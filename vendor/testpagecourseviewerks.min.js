var testpagecourseviewerks=function(e){function t(t){for(var r,i,o=t[0],c=t[1],l=t[2],d=0,m=[];d<o.length;d++)i=o[d],a[i]&&m.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(u&&u(t);m.length;)m.shift()();return s.push.apply(s,l||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var c=n[o];0!==a[c]&&(r=!1)}r&&(s.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={10:0},s=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],c=o.push.bind(o);o.push=t,o=o.slice();for(var l=0;l<o.length;l++)t(o[l]);var u=c;return s.push([189,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return i}),n.d(t,"k",function(){return c}),n.d(t,"g",function(){return l}),n.d(t,"h",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return p}),n.d(t,"n",function(){return f}),n.d(t,"l",function(){return h}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return b}),n.d(t,"e",function(){return v}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return y});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function i(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var o=[].concat;function c(e){return o.apply([],e)}function l(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function u(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var i=t[r];if(null==i)return-1;var o=n[r];return null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function f(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function h(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],i=t(s),o=n[i];o?o.push(s):n[i]=[s]}return n}function b(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function v(e,t){var n,a,s={};try{for(var i=r.h(t),o=i.next();!o.done;o=i.next()){var c=o.value;c in e&&(s[c]=e[c])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(n)throw n.error}}return s}function k(e,t){var n=b(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function y(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var i=n[a];if(r[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},function(e,t,n){"use strict";var r=n(34);r.a.env||(r.a.env={}),t.a=r.a.env},,,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},function(e,t,n){"use strict";var r=n(30);r.a.cfg||(r.a.cfg={}),t.a=r.a.cfg},,,function(e,t){e.exports=jQuery},function(e,t,n){"use strict";var r=n(3),a=n(4),s=n(18),i=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(22);function c(e,t){return o.a[e].relationships[t]}function l(e,t){var n=function(e){var t=function(e){return!0};return e.from?u(t,function(t){return t.dateTime>=e.from}):e.to?u(t,function(t){return t.dateTime<e.to}):e.ids?u(t,function(t){return e.ids.includes(t.id)}):e.name?u(t,function(t){return t.name===e.name}):e.tags?u(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function u(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var p=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var s=a[r];localStorage.setItem("cache-bust-"+n+"-"+s,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+c(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),f=n(15);function h(e,t){for(var n=Object.keys(t),r=e,s=0,i=n;s<i.length;s++){var o=i[s];r===e&&(r=a.a({},e));var c=t[o];if(c&&"object"==typeof c){var l=Object.keys(c).filter(function(e){return e.startsWith("$")});if(l.length>0){for(var u=function(e){var t=c[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var s=0,i=n;s<i.length;s++){var l=i[s];a.includes(l)||a.push(l)}break;case"$remove":var u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!u.includes(e)})}},d=0,m=l;d<m.length;d++){u(m[d])}continue}}r[o]=c}return r}function g(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,s=Object.keys(t),i=a.a({},e),o=0,c=s;o<c.length;o++){var l=c[o],u=t[l];if(u&&"object"==typeof u){var d=Object.keys(u).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var m=function(e){var t=u[e];switch(e){case"$unset":r?delete i[l]:i[l]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");o=(o=i[l])?a.a({},o):{},i[l]=o;var s=o.$remove;Array.isArray(s)&&(o.$remove=s.filter(function(e){return!n.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(n):n.slice(),o.$add=d;break;case"$remove":var o,c=t;if(!Array.isArray(c))throw new Error("$remove instruction must contain array");o=(o=i[l])?a.a({},o):{},i[l]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!c.includes(e)}),0===o.$add.length&&delete o.$add),s=(s=o.$remove)?s.concat(c):c.slice(),o.$remove=s}},p=0,f=d;p<f.length;p++){m(f[p])}continue}}i[l]=u}return i}var b=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(s=r[n]).op||s.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==s.op||s.targetBranchId&&s.branchId!==this.query.branchId&&s.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===s.op&&(s.deltaDoc.tags&&this.query.tags||s.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:i=this.getDataWithMutationsApplied(e,!1,this.data),this.data=i,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,s=this.includes,i=this.query,o=i.hasEdgesFrom?[].concat(i.hasEdgesFrom||[]):[],l=i.tags?[].concat(i.tags||[]):[];switch(t.op){case"update":return Object(f.e)(e,function(e){if(e.id===t.id){var r=h(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return s.forEach(function(r){var s,i=e[r];if(i){var o=Object(f.e)(i,function(e){if(e.id!==t.id)return e;var r=h(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==i&&(e=a.a({},e,((s={})[r]=o,s)))}}),e});case"add-related":if(r===t.table&&-1!==s.indexOf(t.graphProp))return Object(f.e)(e,function(e){var r;if(e.id!==t.id)return e;var s=a.a({},t.relatedDoc);return n&&(s.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([s]),r))});if(i.hasEdgesFrom&&o.includes(t.id)&&r===c(t.table,t.graphProp)){if(!i.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&l.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return i.ids&&i.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==s.indexOf(t.graphProp)?Object(f.e)(e,function(e){var r,s=e[t.graphProp];return s?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?s.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):s.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):i.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(i.include){var u=s.map(function(e){return{label:e,table:c(r,e)}}).filter(function(e){return e.table===t.table});if(u.length>0)return Object(f.e)(e,function(e){return u.forEach(function(r){var s,i=r.label,o=e[i];o&&(e=a.a({},e,((s={})[i]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),s)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),v=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new i(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return b.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesFrom",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.hasEdgesTo=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesTo",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:p.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new s.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(32).a),k=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===b.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var s=a.find(function(t){return o.a[r.table].relationships[t]===e});if(s){for(var i={},c=0,u=r.data;c<u.length;c++){var d=u[c];l(t,d[s]).forEach(function(e){return i[e.id]=e})}var m=Object.keys(i).map(function(e){return i[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var p=l(t,r.data);return t.ids.every(function(e){return p.some(function(t){return t.id===e})})?{value:p}:"continue"}},s=0,i=this.queries;s<i.length;s++){var c=a(i[s]);if("object"==typeof c)return c.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,s=this.findQuery(n,r);s?s.timeoutHandle&&(clearTimeout(s.timeoutHandle),s.timeoutHandle=null):(s=new b(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(s)),s.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,s=(n.repo,this.findQuery(r,a));s&&(s.unsubscribe(e),0===s.subscriptions.length&&(s.timeoutHandle=setTimeout(function(){0===s.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==s}))},this.queries.length>50?500:3e5)))},e}(),y=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return c(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return c(e,t)})).some(function(e){return c(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),s=e.length,i=function(t){var s=e[t];if("update"===s.op){var i=r.findIndex(function(e){return"update"===e.op&&e.branchId===s.branchId&&e.id===s.id});i>=0&&(n[t]=a.a({},s,{deltaDoc:g(s.deltaDoc,r[i].deltaDoc)}),r.splice(i,1))}},o=0;o<s;++o)i(o);return n.concat(r)},e}(),E=n(41);function w(e,t,n,r,s,i){for(var o=function(n){switch(n.op){case"add-related":i||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:s}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(i||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:s,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((c=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var o=t[c];t=t.slice(0,c).concat([a.a({},o,{$meta:r?"removing":"persisted"})],t.slice(c+1))}else t=t.slice(0,c).concat(t.slice(c+1));break;case"update":if(n.branchId!==e)return"continue";var c;if((c=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!i)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[s],$meta:r?"adding":"persisted"}].concat(t);else{var l=t[c],u=l.contributors.slice();u.includes(s)||u.push(s);var d=g(l.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:u,$meta:r?"updating":"persisted"}].concat(t.slice(0,c),t.slice(c+1)):t.slice(0,c).concat(t.slice(c+1))}}},c=0,l=n;c<l.length;c++){var u=o(l[c]);if("object"==typeof u)return u.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var s=a[r],i=this.lookup[s];if(i.value){var o=w(i.query.branchId,i.value,e,n,this.getUserDisplayName(),!!i.query.tags);null===o&&(n||i.fetch()),o!==i.value&&(i.optimisticValue=o,n||(i.value=o),i.notify(o))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new O(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),O=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=s.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(s.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),I=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),s=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),p.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(y.merge(e,s),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return i=a.sent(),this.persistedVersion.dispatchError(i),i&&i.name&&i.name.startsWith("http4")?(this.dispatchError(i,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(i,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new s.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),N=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),j=function(){function e(e,t,n,r,a,s,i,c){var l=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=s,this.writer=i,this.cacheOptimized=c,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new y),s||(this.querySet=new k(this.mutationQueue)),i||(this.writer=new I(this.mutationQueue,this.querySet,e,t,n)),Object.keys(o.a).forEach(function(e){var t=new v(l,e,r||{});c&&(t=t.cacheOptimized()),l[e]=t}),this.deltas=new N(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new v(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var C=n(6),S=n(7);n.d(t,"c",function(){return D}),n.d(t,"d",function(){return x}),n.d(t,"b",function(){return R}),n.d(t,"a",function(){return L});var D=new j(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),x=Object(C.i)(S.a.KED_REALM),R={standardSchool:D.schools.name("standard").cacheOptimized().single(),get mySchool(){return D.schools.name(r.a.currentUser.school).cacheOptimized().single()}},L={getBranchId:function(e,t){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return D.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(C.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return D.courseBlocks.tags(e).idsOnly().concat(D.courseContents.tags(e).idsOnly()).concat(D.courseTabs.tags(e).idsOnly()).concat(D.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";var r=n(1),a=n(6);var s=n(16);n.d(t,"a",function(){return i}),n.d(t,"c",function(){return c}),n.d(t,"e",function(){return l}),n.d(t,"d",function(){return u}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return p});var i=["user","role","school","debug","testVersion","testversion","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function c(e,t){return o(e,t,"W")}function l(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function u(e,t){return e.roles.includes("ADMIN")||l(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,i=Object(s.b)(location.search),o=r.a({},i,{role:t,school:n}),c=Object(s.a)(o);a?location.href=""+a+c:(location.hash="#",location.search=c)}};function m(e){d.actAs(e)}function p(e,t){var n,a,o=Object(s.b)(location.search),c={};try{for(var l=r.h(i),u=l.next();!u.done;u=l.next()){var d=u.value;o[d]&&(c[d]=o[d])}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}var m=Object(s.a)(r.a({},c,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+m+e.substr(p):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return c});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function c(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],i=t(s);i!==s&&(n===e&&(n=e.slice()),n[r]=i)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],i=t[1];return a[n?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"l",function(){return m}),n.d(t,"c",function(){return p}),n.d(t,"h",function(){return f}),n.d(t,"i",function(){return h}),n.d(t,"n",function(){return g}),n.d(t,"k",function(){return b}),n.d(t,"d",function(){return v}),n.d(t,"m",function(){return k}),n.d(t,"b",function(){return y}),n.d(t,"g",function(){return w}),n.d(t,"a",function(){return T}),n.d(t,"j",function(){return O}),n.d(t,"f",function(){return I}),n.d(t,"e",function(){return N});var r=n(1),a=n(5),s=n.n(a),i=n(6),o=n(36),c=n.n(o),l=n(10),u=n.n(l),d=n(3);function m(e,t,n,a,s){var o,l,u={},d=t.id,m=function(o){var c,l,m,p,f,h,g=a[o],b=e[o]||[],v=t[o];if(!v)return"continue";var k=v.map(function(e,t){return{doc:e,idx:t}}),y=k.filter(function(e){return!b.some(function(t){return t.id===e.doc.id})});try{for(var E=r.h(y),w=E.next();!w.done;w=E.next()){var T=w.value,O=(R=r.a({},T.doc)).$meta;delete R.$meta,"add"===O?(R.id||(R.id=Object(i.h)()),s.add(g,R)):"update"===O&&s.put(g,R),s.link(n,d,g,R.id,o),u[o]||(u[o]={}),u[o][T.idx]={$set:R}}}catch(e){c={error:e}}finally{try{w&&!w.done&&(l=E.return)&&l.call(E)}finally{if(c)throw c.error}}var I=b.filter(function(e){return!v.some(function(t){return t.id===e.id})});try{for(var N=r.h(I),j=N.next();!j.done;j=N.next()){var C=j.value;s.unlink(n,d,g,C.id,o)}}catch(e){m={error:e}}finally{try{j&&!j.done&&(p=N.return)&&p.call(N)}finally{if(m)throw m.error}}var S=k.filter(function(e){return b.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var D=r.h(S),x=D.next();!x.done;x=D.next()){var R,L=x.value;delete(R=r.a({},L.doc)).$meta,s.put(g,R),u[o]||(u[o]={}),u[o][L.idx]={$set:R}}}catch(e){f={error:e}}finally{try{x&&!x.done&&(h=D.return)&&h.call(D)}finally{if(f)throw f.error}}};try{for(var p=r.h(Object.keys(a)),f=p.next();!f.done;f=p.next()){m(f.value)}}catch(e){o={error:e}}finally{try{f&&!f.done&&(l=p.return)&&l.call(p)}finally{if(o)throw o.error}}return c()(t,u)}function p(e){return s()(e).format("YYMMDD HH:mm")}function f(e){return s()(e).format("YYMMDD")}function h(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function g(e,t,n){return c()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function b(e,t,n){return c()(t,{createdDate:{$set:Date.now()},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function v(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function k(e,t){var n=Date.now();return(e=g(n,e,t)).createdBy||(e=b(0,e,t)),e}function y(e,t,n){var a,s,i=r.a({},e),o=t[e.id];o&&(i.$etag=o);try{for(var c=r.h(n),l=c.next();!l.done;l=c.next()){var u=l.value,d=e[u].map(function(e){return y(e,t,[])});i[u]=d}}catch(e){a={error:e}}finally{try{l&&!l.done&&(s=c.return)&&s.call(c)}finally{if(a)throw a.error}}return i}function E(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return E(0,function(t){return t.readAsText(e)})}function T(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function O(e){var t=u()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function I(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,c,l;return r.d(this,function(u){switch(u.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,s=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),s&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return i=r.f.apply(void 0,[u.sent(),3]),o=i[0],c=i[1],l=i[2],o.tasks=c,o.abilities&&o.abilitiesOrder&&(o.abilities=o.abilitiesOrder.map(function(e){return o.abilities.find(function(t){return t.id===e})})),o.knowledgeRequirements&&o.knowledgeRequirementsOrder&&(o.knowledgeRequirements=o.knowledgeRequirementsOrder.map(function(e){return o.knowledgeRequirements.find(function(t){return t.id===e})})),o.centralContent&&o.centralContentOrder&&(o.centralContent=o.centralContentOrder.map(function(e){return o.centralContent.find(function(t){return t.id===e})})),a&&(o.templateChain=l),[2,o]}})})}function N(e){return e.migratedTexts&&Object.keys(e.migratedTexts).some(function(t){return Object.keys(e.migratedTexts[t]).length>0})}},function(e,t,n){"use strict";var r=n(4),a=n(15),s=n(27),i=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,i){return r.b(this,void 0,void 0,function(){var o,c,l,u,d,m,p,f,h,g,b;return r.d(this,function(v){switch(v.label){case 0:return i&&"no-cache"===i.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),l=(c=this).authHeader,u=c.tokenInfo,d=c.bearerProvider,l||u||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=u=v.sent(),v.label=2;case 2:return u?u.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=u=v.sent(),v.label=4;case 4:l="Bearer "+u.token,v.label=5;case 5:return l&&(n.Authorization=l),f=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 6:return 401==(h=v.sent()).status&&this.bearerProvider?(g=h.headers.get("www-authenticate"),console.log("Got "+h.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(b=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return b.tokenInfo=v.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 8:h=v.sent(),v.label=9;case 9:return[2,h]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,s,o,c){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=c,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),c=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function l(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var u=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return c}),n.d(t,"j",function(){return l}),n.d(t,"f",function(){return i}),n.d(t,"c",function(){return u});var d=function(){function e(e,t,n){this.http=new i(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(i=u.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(u,o.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i,o;return r.d(this,function(c){switch(c.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=c.sent()).status?[3,3]:(i=u.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(u,o.concat([c.sent()])));case 3:return[4,s.json()];case 4:return[2,c.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=u.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(u,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(18),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=n(15);function o(e){e.resources||(e.resources=[])}function c(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var l=sessionStorage.getItem("redir-hash");if(l)try{var u=JSON.parse(l),d=u.time,m=u.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return c(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return c(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var p=new s,f=Date.now(),h=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-f>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[r.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},b=function(e){function t(t,n,r){var a="string"!=typeof n?n:new h(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return p}),n.d(t,"b",function(){return h}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return b})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(33);function s(e){var t=e.children,n=e.spinner,s=e.onError,i=e.noError;return r.createElement(a.a,{props:t,spinner:n,noError:i,onError:s,fn:function(e){return e}})}},function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,i=e.backgroundColor,o=e.progressColor,c=[];if(n>s)return a.createElement("div",null," ",r," / ",n," ");for(var l=1;l<=n;l++)c.push(a.createElement("svg",{key:l},a.createElement("circle",{className:"circle-chart-background",fill:l>r?i:o,cx:"8",cy:"8",r:"8"})));return c},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return i});var i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,i=t.className,o=t.children,c=t.headerClassName,l=t.contentClassName,u=t.displayProgress,d=t.progressData,m=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(m?" open":"")},a.createElement("div",{className:"openHeader"+(c?" "+c:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),u&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(l?" "+l:"")},o))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return c}),n.d(t,"a",function(){return l});var r=n(1),a=n(5),s=n.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e){return e.month()>=6?[s()(new Date(e.year(),7,1)),s()(new Date(e.year(),11,31))]:[s()(new Date(e.year(),0,1)),s()(new Date(e.year(),6,31))]}function c(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function l(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(31),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(51),s=n(3),i=n(5),o=n.n(i),c=n(66),l=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(c.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(o()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return o()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),u=n(6),d=n(46);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var m=s.a.userTasksRepo,p=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,i,c;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,l.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,i=o()(s).week(),[2,{from:(c=Object(d.a)(o()(s).year(),i)).notBefore,to:c.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,c,l,u;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,i=a(),c=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},c,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:o()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:o()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return l=r.sent(),0===(u=l.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&u.push(e),[4,this.update(u,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e){return r.b(this,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return(t=this.persistedState)?[3,2]:[4,l.load(this.options.user)];case 1:t=r.sent(),r.label=2;case 2:return(n=new l(t)).weekDate=o()(e).startOf("week").valueOf(),n.save(),this.persistedState=n,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(u.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new u.b("email",t.getCurrentUser().mail,"S"),new u.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);m||(m=s.a.userTasksRepo=new p(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(28).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(4),a=n(29),s=n(38),i=n(32),o=n(45),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,i){r=!0,e=a,t=s,s&&n?n(null,s,i):n&&n(a,null,i)});if(r){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,c=s.observer;return i.push(a),n=c,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],i={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,i,o){if(a=o,r&&(r.unsubscribe(),r=null),i)t(null,i,s);else try{var c=e(n);c&&"function"==typeof c.subscribe?r=c.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(c,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);c.prototype.map=Object(s.a)(c)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(4),a=n(29),s=n(38),i=n(28),o=n(27),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);c.prototype._map=Object(s.a)(c)},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(2);function i(e,t){return function(n){return a.createElement(o,r.a({props:n,fn:e},t))}}var o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={result:null,isLoading:!0},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.subscribe()},t.prototype.componentWillUnmount=function(){this.unsubscribe()},t.prototype.shouldComponentUpdate=function(e,t){return this.state.error!==t.error||this.state.isLoading!==t.isLoading||this.state.result!==t.result||!Object(s.m)(e.props,this.props.props)},t.prototype.componentDidUpdate=function(e){Object(s.m)(e.props,this.props.props)||(this.unsubscribe(),this.subscribe())},t.prototype.subscribe=function(){var e=this;this.setState({isLoading:!0}),this.subscription=this.props.fn(this.props.props).subscribe(function(t,n){return e.setState({result:t,error:n,isLoading:!1})})},t.prototype.unsubscribe=function(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null)},t.prototype.render=function(){var e=this.state,t=e.result,n=e.error,r=e.isLoading,s=this.props,i=s.spinner,o=s.onError,c=s.noError;return n?c?"":o?o(n):a.createElement("p",null,"Error: ",n.message):r?i||"":void 0===t?"":t},t}(a.Component)},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,c=e.title;return s.createElement("div",{title:c||Object(i.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},,function(e,t,n){"use strict";var r=n(41);n.d(t,"a",function(){return r.b})},function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(6),s=n(5),i=n.n(s),o=n(24);var c=function(){function e(e){var t="academicYear"in e?e:Object(o.c)(i()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(o.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(o.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),l=n(2),u=n(49);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var d,m=function(){function e(e,t,n,r){this.http=new a.f(e,t,{bearerProvider:n}),this.userEmailGetter=r,this.getActiveCourses=f(this.getActiveCourses),this.getLatestAssessments=f(this.getLatestAssessments),this.getStudentGoals=f(this.getStudentGoals),this.getStudentFutureAbilities=f(this.getStudentFutureAbilities),this.getTeacherTutorStudents=f(this.getTeacherTutorStudents),this.getSchoolTuitionGroups=f(this.getSchoolTuitionGroups),this.getTuitionGroupStudents=f(this.getTuitionGroupStudents),this.getSchoolTeachers=f(this.getSchoolTeachers),this.getAcademicYearTerms=f(this.getAcademicYearTerms)}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i,o;return r.d(this,function(c){switch(c.label){case 0:return c.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=c.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([c.sent()])));case 3:return[4,n.json()];case 4:return[2,c.sent().courses];case 5:throw o=c.sent(),console.error("Error from EDS: "+o),new Error(Object(l.a)(d||(d=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("SchoolTuitionGroups",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("TuitionGroupStudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("SchoolTeachers",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,c,l,d,m,p,f,h,g;return r.d(this,function(r){switch(e){case"en_sin":return[2,u.SouthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,u.NorthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=t.getMonth()>=6,s=a?t.getFullYear():t.getFullYear()-1,o=a?t.getFullYear()+1:t.getFullYear(),c=i()(s.toString(),"YYYY"),l=i()(o.toString(),"YYYY"),1!=c.week()&&(c=c.clone().add(1,"week")),1!=l.week()&&(l=l.clone().add(1,"week")),d=i()(c.clone()).week(32).startOf("week"),m=i()(c.clone()).week(51).endOf("week"),p=i()(l.clone()),f=i()(l.clone()).week(25).endOf("week"),h={startDate:new Date(s,d.month(),d.date()).toDateString(),endDate:new Date(s,m.month(),m.date()).toDateString()},g={startDate:new Date(o,p.month(),p.date()).toDateString(),endDate:new Date(o,f.month(),f.date()).toDateString()},[2,{firstTerm:h,secondTerm:g,holidays:n}]}return[2]})})},e}(),p=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new c(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new c({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}();function f(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}},,function(e,t,n){"use strict";n(29),n(28);var r=n(32);n.d(t,"a",function(){return r.a});var a=n(27);n.d(t,"b",function(){return a.a});n(45)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(31),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return i});var r=n(5),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function i(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},function(e,t,n){"use strict";n.d(t,"e",function(){return a}),n.d(t,"d",function(){return s}),n.d(t,"a",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"c",function(){return c});var r=n(2);function a(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("sub:")}).map(function(e){return e.substr("sub:".length)}))}function s(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr(e.indexOf("|")+1)}))}function i(e,t,n){var a=(e||[]).filter(function(e){return!e.startsWith("course:")&&!e.startsWith("sub:")}),s=t.map(function(e){return"sub:"+e}),i=Object(r.k)(t.map(function(e){return n.map(function(t){return"course:"+e+"|"+t})}));return a.concat(s).concat(i)}function o(e,t){return i(e,a(e),t)}function c(e,t){return i(e,t,s(e))}},function(e,t,n){"use strict";var r=n(12);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Vågrät linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga länk",result:function(){var e=window.prompt("Ange länkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,s=window.prompt((void 0).promptMsg);if(s){var i=document.createElement("img");i.src=s,i.tabIndex=1,n=i,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),i.onfocus=t.onFocus,i.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(68),s=n(6),i=function(){function e(e){var t=this,n=e.table,s=e.getClient,i=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,c,l,u=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,i=n.table,o=a(),c=e.map(function(e){var n=u.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(c.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.do(function(e){return c.forEach(function(t){return e.put(i,t)})}).catch(function(n){return"http409"===n.name?o.list(i,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return o.do(function(e){return n.forEach(function(t){return e.put(i,t)})})}):Promise.resolve(s&&u.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return l=r.sent(),this.regenerateCacheBust(),c.forEach(function(e){e.$etag=l.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(c)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,c,l,u,d,m,p,f,h,g,b,v,k,y=this;return r.d(this,function(E){switch(E.label){case 0:return a=this.options,i=a.getClient,o=a.optimistic,c=a.table,l=a.getQueryOptions,u=i(),[4,l()];case 1:return d=E.sent(),m=[].concat(d.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),p=this.stripGraphs(e,m),o?[4,this.mem.insert(p.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:E.sent(),E.label=3;case 3:f=new s.a,h=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){f.link2(c,e.id,t,n.id)})};try{for(var s=r.h(m),i=s.next();!i.done;i=s.next()){a(i.value)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}f.add(c,e)};try{for(g=r.h(p),b=g.next();!b.done;b=g.next())v=b.value,h(v)}catch(e){t={error:e}}finally{try{b&&!b.done&&(n=g.return)&&n.call(g)}finally{if(t)throw t.error}}return[4,u.batch(f.mutationRequests).catch(function(t){return o&&y.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return k=E.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=k.newEtags[e.id]}),o?[4,this.mem.update(e)]:[3,6];case 5:return E.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:E.sent(),E.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o=this;return r.d(this,function(c){switch(c.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,i=n(),a?[4,this.mem.update(e.map(function(e){return o.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:c.sent(),c.label=2;case 2:return[4,i.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(o,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return c.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return c.sent(),[2]}})})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(12),i=new DOMParser,o={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function c(e){for(var t=i.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)l(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function l(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&o[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),u(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),s=a.name&&!!t[a.name.toLowerCase()];s||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),u(e)&&(t=!0),t}function u(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)l(n.item(r))&&(t=!0);return t}var d=n(71);n.d(t,"a",function(){return v});var m="wysiwyg-actionbar",p="wysiwyg-button",f="wysiwyg-content",h="wysiwyg-focusrect",g="wysiwyg-focuspoint",b="wysiwyg-content readonly",v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||c(e.html)!==c(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(c(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:k(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(g)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),s=a.next();!s.done;s=a.next()){switch(s.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,i=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(i=i.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta vänster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta höger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden på egen rad",result:function(){return e("unfloat")}}])));var o=this.state.focusRect,l=this.props,u=l.readOnly,v=l.reportNumChars,k=l.maxChars;return a.createElement("div",{className:this.props.className},!u&&a.createElement("div",{className:m},i.map(function(e,n){return a.createElement("button",{key:n,className:p,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:u?b:f,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:c(this.props.html)},contentEditable:!u,onPaste:function(e){if(!isNaN(k)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>k&&e.preventDefault()}},onKeyUp:v?function(e){var t=e.target.innerText;v(t?t.length:NaN)}:null,onKeyPress:isNaN(k)?null:function(e){var t=e.target.innerText;t&&t.length>=k&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){u||(v&&e.currentTarget&&v((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(s.a)("outdent"):Object(s.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),o&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:h,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:g+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:g+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:g+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:g+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function k(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},,function(e,t,n){"use strict";n.d(t,"e",function(){return u}),n.d(t,"b",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"f",function(){return p}),n.d(t,"d",function(){return f}),n.d(t,"c",function(){return h});var r,a,s,i,o=n(1),c=n(2),l=n(17);function u(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function d(e){return m([e],e.tasks)}function m(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function p(e){return Object(c.k)([function(e){var t={};return Object(c.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(c.a)(r||(r=o.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(c.a)(a||(a=o.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(c.a)(s||(s=o.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(c.a)(i||(i=o.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function f(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}function h(e){return e.responsibleTeachers.map(function(e){return{name:e.name,email:Object(l.d)(e),access:e.access||"edit"}})}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(5),o=n.n(i),c=n(6),l=n(26),u=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}n.d(t,"a",function(){return b});var m,p,f,h,g,b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){l.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){l.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),i={id:Object(c.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new c.b("email",s.a.currentUser.mail,"S"),new c.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(i.deadline=e.task.deadline),e.task?(i.task=[e.task],e.course?i.course=[e.course]:e.courseInfo&&(i.courseInfo=e.courseInfo)):i.siteVisionPageId=e.id,e.step&&(i.step=e.step),[4,Promise.all([l.b.setWeekPlannerBoxOpen(e.courseName,!0),l.b.insert([i])])]);case 1:return r.sent(),[3,4];case 2:return[4,l.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props.learningTasks,n=Object(u.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),s=this.state.confirmations,i=o()(this.state.weekDate).week(),c=o()().week(),l=i===c?"":i===c+1?Object(u.a)(m||(m=r.e(["för nästa vecka (v",")"],["för nästa vecka (v",")"])),i):i===c-1?Object(u.a)(p||(p=r.e(["för förra veckan (v",")"],["för förra veckan (v",")"])),i):Object(u.a)(f||(f=r.e(["för vecka ",""],["för vecka ",""])),i);return a.createElement("div",{className:"taskContainer"},t.map(function(t,o){var m=t.id,p=n[m]||{$meta:"deleted"},f="adding"===p.$meta||"deleting"===p.$meta,b="deleted"!==p.$meta&&"deleting"!==p.$meta,v=b?Object(u.a)(h||(h=r.e(["Ta bort uppgiften från egen veckoplanering ",""],["Ta bort uppgiften från egen veckoplanering ",""])),l):Object(u.a)(g||(g=r.e(["Lägg till uppgiften i egen veckoplanering ",""],["Lägg till uppgiften i egen veckoplanering ",""])),l),k=s.some(function(e){return m===e});return a.createElement("div",{key:t.id},a.createElement("div",{key:m,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"selectedBox"+(b?" selected":""),style:f?{opacity:.5}:{},onClick:function(){return f||i!==c?k?e.setState({confirmations:s.filter(function(e){return e!==m})}):e.setState({confirmations:r.g(s).concat(m)}):e.toggleTask(t)},title:v})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:t.url},t.name))),a.createElement(d,{visible:k,text:v,onConfirm:function(){e.toggleTask(t),e.setState({confirmations:s.filter(function(e){return e!==m})})},onCancel:function(){e.setState({confirmations:s.filter(function(e){return e!==m})})}}))}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return c});var r=n(1),a=n(37),s=n(11),i=n(2);function o(e,t){return e&&t?t.map(function(t){return e.find(function(e){return e.id===t})}).filter(function(e){return!!e}):e}function c(e,t){var n,c;if(t)c=new a.a([t]);else{var l=e.tags.filter(function(e){return e.startsWith("course:")});if(0===l.length)return new a.a(e);c=(n=s.c.courses).tags.apply(n,r.g(l)).toValue()}return c.map(function(t){var n=Object(i.k)(t.map(function(e){return e.abilitiesOrder||[]})),r=Object(i.k)(t.map(function(e){return e.centralContentOrder||[]})),a=Object(i.k)(t.map(function(e){return e.knowledgeRequirementsOrder||[]})),s=Object.assign({},e);return s.abilities&&(s.abilities=o(e.abilities,n)),s.centralContent&&(s.centralContent=o(e.centralContent,r)),s.knowledgeRequirements&&(s.knowledgeRequirements=o(e.knowledgeRequirements,a)),s})}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(23),i=n(14),o=n(72);function c(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var l=n(5),u=n.n(l),d=n(69),m=n(7),p=n(9),f=n(19),h=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,i=t.progressData,l=!!this.props.openCourses[n],m=(new d.a,this.context.intl);return a.createElement(s.a,{title:a.createElement("h5",null,n||a.createElement(p.a,{id:"userTasks.goals",defaultMessage:"Egna lärandemål"})),headerOpen:l,className:n&&Object(o.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)},displayProgress:!0,progressData:i},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"}," ",a.createElement("a",{className:"trash",href:"#",title:m.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lärandemålet och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=c(t),s=u()(t.deadline).startOf("day")<u()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:g(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:b(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:u()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmål"}))),a.createElement("br",null))}))},t.contextType=f.a,t}(a.Component);function g(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(i.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function b(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(i.f)(m.a.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var v=n(6),k=n(2);var y=n(73),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"weekplanner.addLearningGoalTitle",defaultMessage:"Lägg till eget lärandemål"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(p.a,{id:"weekplanner.addLearningGoal",defaultMessage:"Mål"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(p.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),w=n(25),T=n(42),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=this.props,o=(i.isTask,i.onSave),c=this.context.intl;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"customTask.addWorkGoalTitle",defaultMessage:"Lägg till eget arbetsmål"})),a.createElement("hr",null),a.createElement(w.a,{label:c.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:c.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{rows:7,label:c.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:c.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:c.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return o(n,r,s)}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),I=n(88),N=(n(66),n(31)),j=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,i=s.name,o=s.description,c=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:i,description:o,url:c}):r.a({},t)}))});else{var l={id:Object(v.h)(),name:i,description:o,url:c};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(l)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(p.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(p.a,{id:"addeditsubtask.addSubtask",defaultMessage:"Lägg till underuppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(p.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),C=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(j,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(j,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=t.deadline,o=t.subTasks,l=t.showCalendar,d=t.userTask,m=d.id,f=(d.courseName,this.props),h=f.onUpdate,g=f.onDelete,b=this.isModified(),v="customTask"===c(d),k=u()(d.deadline)<u()(),y=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,v?a.createElement(p.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmål"}):a.createElement(p.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:v?y.formatMessage({id:"task.targetNameLabel",defaultMessage:"Arbetsmålets namn"}):y.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:v?y.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du göra?"}):y.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),v&&a.createElement(a.Fragment,null,a.createElement(T.a,{rows:5,label:y.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:y.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:y.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(N.a,{label:y.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},i||l?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(I.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",selected:i&&u()(i),autoFocus:l,dateFormat:"YYYY-MM-DD",className:k?"expired":void 0,locale:y.locale,popperPlacement:v?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&t.format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:y.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(p.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(N.a,{label:y.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},o&&o.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"task.addSubtask",defaultMessage:"Lägg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){b?h(function(e){e.name=n,e.description=r,e.url=s,e.deadline=i}):e.props.closeDialog()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(p.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){g(m)}},v?a.createElement(p.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmål"}):a.createElement(p.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den här uppgiften"})))))},t.contextType=f.a,t}(a.Component),S=n(13),D=n(74),x=n(46),R=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.backgroundColor,r=e.progressColor,s=Math.round(t);return a.createElement("svg",{className:"progress-chart",width:"100%",height:"25"},a.createElement("rect",{fill:n,width:"100%",height:"100%",rx:"4"}),a.createElement("rect",{className:"fill",fill:r,width:s+"%",height:"100%",rx:"4"}),a.createElement("text",{className:"filled-text",textAnchor:"middle",x:"50%",y:"50%",dy:".3em"},s+"%"))},t.defaultProps={percentage:0,backgroundColor:"#F1F5F4",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return L});var L=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new D.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){this.props.env.userTasksRepo.changeWeek(u()(this.state.weekDate).add(-1,"week").toDate())},t.prototype.nextWeek=function(){this.props.env.userTasksRepo.changeWeek(u()(this.state.weekDate).add(1,"week").toDate())},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(E,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"Lärandemålet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(O,{isTask:!e,onSave:function(a,s,i){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,i)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(C,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet får inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(j,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(v.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var i;return r.d(this,function(r){switch(r.label){case 0:return i=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(v.h)(),dateTime:i+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,c;return r.d(this,function(l){switch(l.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:l.sent(),l.label=2;case 2:return l.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=Object(x.b)(u()(n).add(-1,"week")),s=Object(x.a)(u()(n).year(),a),[4,this.props.env.kedBackendClient.list("usertasks",{from:s.notBefore,to:s.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return i=(i=l.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),o=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),c=i.sort(Object(k.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:o+=1e3});return t.id=Object(v.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(c)];case 4:return l.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.render=function(){var e=this,t=u()(this.state.weekDate).week(),n=u()().week(),i=function(e){var t,n,a,s,i=[],o=Object(k.b)(e,function(e){return e.courseName||""});try{for(var c=r.h(Object.keys(o).sort().filter(function(e){return e}).concat(o[""]?[""]:[])),l=c.next();!l.done;l=c.next()){var u=l.value,d=o[u]||o[""],m=Object(k.b)(d,function(e){return e.learningGoal}),p=[];try{for(var f=r.h(Object.keys(m)),h=f.next();!h.done;h=f.next()){var g=h.value,b=m[g].sort(Object(k.g)("dateTime")),v=b.filter(function(e){return null==e.name})[0],y=v&&v.url;p.push({name:g,allTasks:b,url:y,step:b.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:b.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{h&&!h.done&&(s=f.return)&&s.call(f)}finally{if(a)throw a.error}}i.push({courseName:u,learningGoals:p})}}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=c.return)&&n.call(c)}finally{if(t)throw t.error}}return i}(this.state.userTasks),o=this.state,c=o.dialogs,l=o.weekTextsUT,d=o.strategy,m=o.assessment,f=o.isLoading,g=o.isCopyingTasks,b=l&&("adding"===l.$meta||"updating"===l.$meta),v=!!l&&d!==l.weekTexts.strategy,E=!!l&&m!==l.weekTexts.assessment,w=!b&&(v||E),T=function(e){var t={completedTasks:0,totalNumberOfTasks:0,subjectData:{}};return e.forEach(function(e){return e.learningGoals.forEach(function(n){var r=n.tasks.filter(function(e){return e.done}).length;t.subjectData[e.courseName]={completedNumberOfTasks:r,numberOfTasks:n.tasks.length},t.completedTasks+=r,t.totalNumberOfTasks+=n.tasks.length})}),t}(i),O=i.length>0?T.completedTasks/T.totalNumberOfTasks*100:0;return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===n?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!b&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},a.createElement("h4",null,a.createElement(p.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"})),a.createElement("div",{className:"widgets"},a.createElement("div",{className:"progressBar"},a.createElement(R,{percentage:O})),a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"})))))),i.length>0&&a.createElement("hr",null),i.map(function(t){return a.createElement(h,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)},progressData:T.subjectData[t.courseName]}))}),a.createElement("hr",null),f?a.createElement(S.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.learningGoal",defaultMessage:"Eget lärandemål"})),a.createElement("div",{className:"btn",style:g?{opacity:.5}:void 0,onClick:function(t){return!g&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara från föregående vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(p.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & Utvärdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska göra för att lära mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:d&&d.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.evaluation",defaultMessage:"Utvärdering"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:m&&m.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:w?{}:{opacity:.5},onClick:function(){return!b&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),w?a.createElement(p.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(p.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(y.a,{dialogs:c,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=f.a,t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r=n(1),a=n(9),s=n(86),i=n.n(s),o=n(87),c=n.n(o),l=n(59),u=n(60),d=n(0),m=n(7),p=n(5),f=n.n(p),h=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(i.a,c.a)),n.messages={sv:l,en:u},f()().locale(m.a.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.a.KED_LOCALE,messages:this.messages[m.a.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},function(e){e.exports={"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","customTask.addWorkGoalTitle":"Lägg till eget arbetsmål","customTask.enterNamePlhd":"Ange namn...","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"VT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"HT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.goals":"Egna lärandemål","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"Mål:","weekplanner.addLearningGoalTitle":"Lägg till eget lärandemål","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoal":"Eget lärandemål","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi &amp; Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.yoga":"Yoga","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy &amp; Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(23),i=n(2),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,o=t.markedIds,c=t.markMode,l=t.migratedIds,u=t.uncoveredIds,d=Object(i.b)(n,function(e){return e.group||"default"}),m=Object.keys(d);return a.createElement(s.a,{title:a.createElement("p",null,r),className:"larger"},m.map(function(t){return a.createElement(a.Fragment,{key:t},1===m.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=o.some(function(e){return e===t.id}),r=l&&!!l[t.id],s=u&&u[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return c&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(c?" selectable":"")+(n?" markedGreen":s?" markedRed":"")+(r?" migrated":""),title:r?c?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.left,n=e.right,a=e.rightWidth;return r.createElement("div",{className:"sv-row sv-layout"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},r.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},r.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},r.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-"+(12-a)},t),r.createElement("div",{className:"sv-layout sv-column-"+a},n))))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(3),a=n(14);function s(e){return e?Object(a.e)(r.a.currentUser,e)||r.a.currentUser.roles.includes("ADMIN"):r.a.currentUser.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e})}},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"Administratör",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Carl Holmberg",mail:"carl.holmberg@kunskapsgymnasiet.se",roles:["ADMIN","EMPLOYEE"],school:"Norrköping",username:"carl.holmberg@kunskapsgymnasiet.se"},{displayName:"Carl",mail:"carl@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"carl"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-Lärare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Borås",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"Borås",schoolType:"Grundskolor"},{displayName:"Elev Borlänge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"Borlänge",schoolType:"Gymnasium"},{displayName:"Roll-lös",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(5),a=n.n(r),s=n(7);"sv"===s.a.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var i=function(){return a.a.apply(this,arguments).locale(s.a.KED_LOCALE)}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(11),i=n(35),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>2&&(n=n.slice(1)),{infos:n.concat(e)})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),s.c.writer.onError(this._dbWriterError),s.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),s.c.writer.off(this._dbWriterError),s.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,s=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!s}).map(function(t){var n=t.message,r=t.details,s=t.retryable,o=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(i.a,{onClick:function(){return e.removeError(n)}})),r||s?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},o?"Dölj detailer":"Visa detailjer")," "):void 0,o?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),s?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){s.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";var r=n(16),a=n(3),s=function(){return function(){a.a.currentUser,(Object(r.b)(location.search,{toLower:!0}).features||"").split(",").map(function(e){return e.toLowerCase()})}}();n.d(t,"a",function(){return s})},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){function t(t){return e.call(this,t)||this}return a.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.knowledgeRequirements,n=e.markedIds,o=e.migratedIds,c=e.explainedRequirements,l=this.props,u=l.idsToMarkNotOk,d=l.markMode,m=l.onMarkChanged,p=l.onExplainedRequirementsChanged,f=["E","C","A"],h=[],g=t.slice(),b=null;!(b=f.map(function(e){var t=g.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=g[t];return g.splice(t,1),n})).every(function(e){return null===e});)h.push(b);return s.createElement("div",null,s.createElement("table",null,s.createElement("thead",null,s.createElement("tr",null,f.map(function(e){return s.createElement("th",{key:e},e)}))),s.createElement("tbody",null,h.map(function(e,t){return s.createElement(s.Fragment,{key:t},s.createElement("tr",null,e.map(function(e,t){var r=e&&n&&n.indexOf(e.id)>=0,a=e&&u&&u[e.id],i=e&&o&&!!o[e.id];return s.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:e?e.name:""},className:(d?"selectable":"")+(i?" migrated":"")+(r?" markedGreen":a?" markedRed":""),onClick:d&&e?function(){return m(e.id,!r)}:void 0,title:i?d?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0})})),c&&s.createElement("tr",null,e.map(function(e,t){var o=e&&n&&n.indexOf(e.id)>=0;return s.createElement("td",{key:t},o?s.createElement("textarea",{placeholder:Object(i.a)(r||(r=a.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!d,value:c[e.id]||"",onChange:p&&function(t){return p(e.id,t.target.value)}}):void 0)})))}))))},t}(s.Component)},function(e,t,n){"use strict";var r=n(12);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(r.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt((void 0).promptMsg);e&&Object(r.a)("insertImage",e)}}}},function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(1),a=n(0),s=n(35),i=n(43),o=n(10),c=n.n(o),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&c()(Object(i.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return c()("body").attr("aria-disabled",n.length>0),c()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,o){var l;return a.createElement("div",{key:o},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){l=t,o===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":o<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||c()(Object(i.findDOMNode)(l)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(i.findDOMNode)(l);e.preventDefault(),c()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(3),s=function(){function e(e){this.googleTokenProvider=a.a.googleTokenProvider,this.options=e||{upload:!1,multiple:!1}}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:n.sent(),n.label=2;case 2:return e="421572262269-u68v5lf5o8ss5t68l8gkq3pfarh6dbkv.apps.googleusercontent.com",[4,new Promise(function(n,r){gapi.load("client:auth2",function(){return gapi.auth2.authorize({client_id:e,scope:"https://www.googleapis.com/auth/drive",response_type:"id_token permission",prompt:"none"},function(a){if(a.error)return gapi.auth2.authorize({client_id:e,scope:"https://www.googleapis.com/auth/drive",response_type:"id_token permission",prompt:"consent"},function(e){e.error?r("Picker: No access token"):(t.authToken=e.access_token,n())});t.authToken=a.access_token,n()})})})];case 3:return n.sent(),"undefined"!=typeof google&&void 0!==google.picker?[3,5]:[4,new Promise(function(e){gapi.load("picker",function(){e()})})];case 4:n.sent(),n.label=5;case 5:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e.prototype.show=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,new Promise(function(t,n){var r=(new google.picker.PickerBuilder).addView((new google.picker.DocsView).setOwnedByMe(!0).setIncludeFolders(!0)).setLocale("sv").setSize(1051,650).setOAuthToken(e.authToken).setCallback(function(r){if(r.action==google.picker.Action.CANCEL)n();else if(r.action==google.picker.Action.PICKED){var a=[];r.docs.forEach(function(t){var n=t.id,r=t.mimeType,s=t.name,i=t.modifiedTime,o=t.iconUrl,c=t.url,l=r.includes("google-apps");a.push({fileId:n,mimeType:r,name:s,modifiedTime:i,canExport:l,iconUrl:o,url:c}),e.updatePermissions(n)}),console.log(a),t(a)}});e.options.upload&&r.addView((new google.picker.DocsUploadView).setIncludeFolders(!0)),e.options.multiple&&r.enableFeature(google.picker.Feature.MULTISELECT_ENABLED),e.picker=r.build(),e.picker.setVisible(!0)})]}})})},e.prototype.updatePermissions=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return t.sent(),gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"reader",type:"domain",domain:"kunskapsskolan.se"}),[2]}})})},e.prototype.downloadFile=function(e){var t=e.file,n=e.limitSize;return r.b(this,void 0,void 0,function(){var e,a=this;return r.d(this,function(r){switch(r.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return r.sent(),t.canExport?[2,new Promise(function(e,n){gapi.client.drive.files.export({fileId:t.fileId,mimeType:"application/pdf"}).then(function(n){for(var r=n.body.length,a=new Uint8Array(new ArrayBuffer(r)),s=0;s<r;s++)a[s]=n.body.charCodeAt(s);var i=new Blob([a],{type:"application/pdf"}),o=t.name+".pdf";e(new File([i],o,{type:"application/pdf",lastModified:t.modifiedTime}))})})]:(e=function(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET","https://www.googleapis.com/drive/v3/files/"+e.fileId+"?alt=media",!0),r.setRequestHeader("Authorization","Bearer "+a.authToken),r.responseType="blob",r.onload=function(){t(new File([r.response],e.name,{type:e.mimeType,lastModified:e.modifiedTime}))},r.send()})},[2,new Promise(function(r,a){void 0!==n?gapi.client.drive.files.get({fileId:t.fileId,fields:"size"}).then(function(e){Number(e.result.size)>1024*n*1024&&a("GooglePickerError: Filsize is too laarge")}).then(function(){e(t).then(function(e){r(e)})}):e(t).then(function(e){r(e)})})])}})})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n.n(r),s=function(e){var t=e.size,n=void 0===t?30:t;return a.a.createElement("svg",{width:n,version:"1.1",xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 508.52 508.52",fill:"#ffffff",style:{verticalAlign:"middle",marginRight:"4px"}},a.a.createElement("polygon",{points:"484.492,284.58 339.024,32.577 169.496,32.577 314.996,284.58"}),a.a.createElement("polygon",{points:"145.437,74.276 0,326.279 84.764,473.05 230.169,221.143"}),a.a.createElement("polygon",{points:"234.396,316.363 143.371,475.943 423.756,475.943 508.52,316.36"}))},i=function(e){var t=e.label,n=void 0===t?"Google Drive":t,r=e.action;return a.a.createElement("a",{className:"btn",onClick:r},a.a.createElement(s,{size:16})," ",n)}},,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(7);r.a.ENVIRONMENT="test",r.a.KED_API_URL="https://backend.kedschools.com/kedbackend/api/",r.a.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",r.a.KED_TOKEN_URL="",r.a.KED_CLIENT_ID="",r.a.KED_CLIENT_SECRET="",r.a.KED_REALM="SE1",r.a.KED_LOCALE=r.a.KED_LOCALE||"en",r.a.KED_SCHOOL_LOCALE=r.a.KED_SCHOOL_LOCALE||"en_nin";var a=n(1),s=n(16),i=n(20),o=n(6),c=n(3),l=n(14),u=n(2);function d(e,t,n){var r=Object(s.b)(t),i=Object(u.e)(r,l.a),o=a.f(Object(s.c)(e),2),c=o[0],d=o[1],m=Object(s.b)(d);return c+Object(s.a)(a.a({},m,i,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function p(e,t,n){return new o.e(i.c,i.d,e+t.mail+location.search,r.a.KED_CLIENT_ID,r.a.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var f,h,g=c.a.currentUser&&c.a.currentUser.mail;if(g)if(r.a.KED_TOKEN_PATH){var b=d(r.a.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);c.a.bearerProvider=(h=m(f=b,g),new i.b(f,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){c.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,h),{token:t.token,expires:Date.now()+354e4}},h)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(c.a.currentUser=JSON.parse(t))}(m(b,g));var v=d(r.a.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);c.a.googleTokenProvider=function(e,t){var n=m(e,t);return new i.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(v,g)}else{if(!(r.a.KED_TOKEN_URL&&r.a.KED_CLIENT_ID&&r.a.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");c.a.bearerProvider=p(r.a.KED_TOKEN_URL,c.a.currentUser,["kedbackend","EDS"]),c.a.googleTokenProvider=p(r.a.KED_TOKEN_URL+"/google",c.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}c.a.kedBackendClient=new i.a(r.a.KED_API_URL,c.a.bearerProvider);var k=n(39);c.a.edsClient=new k.b(i.c,r.a.EDS_API_URL,c.a.bearerProvider,function(){return c.a.currentUser.mail})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.abilities,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.centralContent,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(23),i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.title,n=e.requirements,r=e.className,i=e.includedIds,o=e.headerOpen,c=e.explainedRequirements,l=["E","C","A"],u=[],d=n.slice(),m=null;!(m=l.map(function(e){var t=d.findIndex(function(t){return t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=d[t];return d.splice(t,1),i?i[n.id]?n:void 0:n})).every(function(e){return null===e});)m.every(function(e){return!e})||u.push(m);return a.createElement(s.a,{title:a.createElement("p",null,t),className:r,headerOpen:o},a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,l.map(function(e){return a.createElement("th",{key:e},e)}))),a.createElement("tbody",null,u.map(function(e,t){return a.createElement(a.Fragment,{key:t},a.createElement("tr",{key:t},e.map(function(e,t){return a.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:e?e.name:""}})})),c&&a.createElement("tr",null,e.map(function(e,t){return a.createElement("td",{key:t,className:"explained-requirement"},a.createElement("div",null,e&&c[e.id]||""))})))}))))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(136),i=n(37),o=n(21),c=function(){return a.createElement("img",{style:{border:0,margin:0,padding:0},className:"ellipsis-loader"})},l=n(14);n.d(t,"b",function(){return u}),n.d(t,"a",function(){return d});var u=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.dragState=new i.a({tabBeingDragged:"",tabBeingHovered:"",insertBefore:!1,originClientX:-1}),t}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props.lazyProps;return a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer",style:{overflow:"visible"}},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},a.createElement(o.a,{noError:!0},t.map(function(e){var t=e.backgroundImage;return t&&a.createElement("style",null,"\n              .pageHeader {\n                background-image: url('"+t+"') !important;\n              }\n            ")})),a.createElement("div",{className:"pageHeader"},a.createElement("a",null,a.createElement("h1",null,a.createElement(o.a,{noError:!0},t.map(function(e){return a.createElement(a.Fragment,null,e.title)})))),a.createElement(o.a,{noError:!0},t.map(function(e){var t=e.cornerBox;return t&&a.createElement("div",{className:"pageHeaderCornerBox"},t)})),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement(o.a,{spinner:a.createElement(c,null)},t.map(function(t){var n=t.tabs,i=t.buttons,c=t.activeTab,u=t.blocks,d=t.sortableTabs,m=t.onTabDrop;return a.createElement(a.Fragment,null,u?a.createElement("div",{className:"align-horizontal"},u.map(function(e){return a.createElement("div",{key:e.id,className:"horizontalItem top"},a.createElement("div",{className:"align-vertical"},a.createElement("div",null,a.createElement("a",null,e.name)),a.createElement("div",null,a.createElement("div",{className:"btn-group"},e.steps.map(function(e){return a.createElement(a.Fragment,{key:e.stepNo},a.createElement(s.a,{to:e.link,className:"btn btn-small step-button"+(e.isActive?" activePage":"")},e.stepNo),a.createElement("a",null))})))))})):null,a.createElement("div",{className:"horizontalMenu"},a.createElement(o.a,null,e.dragState.map(function(t){var o=t.tabBeingDragged,u=t.tabBeingHovered,p=t.insertBefore,f=t.originClientX;return a.createElement("ul",{className:d?"sortable":null,onDrop:m?function(t){u&&o&&m(o,u,p?"before":"after"),e.dragState.dispatch(r.a({},e.dragState.value,{tabBeingHovered:"",tabBeingDragged:""}))}:null},n.map(function(t,n){var i=t.name,m=t.key,h=t.link,g=t.onClick,b=t.draggable,v=c===m||"$"===c&&0===n,k=e.dragState;return a.createElement(a.Fragment,{key:m},p&&u===m?a.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,a.createElement("li",{className:[v?"activePage":"",m===o?"drag-source":"",d&&b?"draggable":""].filter(function(e){return e}).join(" "),draggable:d&&b,onDragStart:d&&b?function(e){e.dataTransfer.effectAllowed="move",k.dispatch(r.a({},k.value,{originClientX:e.clientX,tabBeingDragged:m}))}:null,onDragOver:d?function(e){o!==m?o&&(e.preventDefault(),e.dataTransfer.dropEffect="move",k.dispatch(r.a({},k.value,{tabBeingHovered:m,insertBefore:f>e.clientX}))):k.dispatch(r.a({},k.value,{tabBeingHovered:""}))}:null,onDragEnd:function(t){e.dragState.dispatch(r.a({},k.value,{tabBeingHovered:"",tabBeingDragged:""}))}},h?h.startsWith(":")?a.createElement("a",{href:Object(l.f)(h.substr(1),{})},i):a.createElement(s.a,{to:h},i):g?a.createElement("a",{onClick:g},i):i),p||u!==m?null:a.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}),i&&i.map(function(e,t){return a.createElement("li",{className:"action-tab",key:"btn"+t},e)}))}))))}))))))))},t}(a.Component),d=function(e){return a.createElement(u,{lazyProps:new i.a(e)})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n.n(r),s=function(e){var t=e.available,n=e.selected,r=e.onChange;return a.a.createElement("div",{className:"taskContainer"},t.map(function(e){var t=e.key,s=e.name,i=n.includes(t);return a.a.createElement("div",{key:t,className:"align-horizontal"},a.a.createElement("div",{className:"horizontalItem top",onClick:function(){return r(i?n.filter(function(e){return e!=t}):n.concat(t),t,i)}},a.a.createElement("div",{className:"checkBox"+(i?" checked":"")})),a.a.createElement("div",{className:"horizontalItem top"},s))}))}},,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(11),s=n(3);function i(e){var t=e.school,n=e.draftRepo,i=e.course;return r.b(this,void 0,void 0,function(){var e,o;return r.d(this,function(r){switch(r.label){case 0:return"standard"!==t?[3,1]:(n.merge(),e=a.c,[3,3]);case 1:return[4,a.c.schools.name(t).single().map(function(e){return e.officialBranchId}).load()];case 2:o=r.sent(),n.merge(o),e=a.c.branch(o),r.label=3;case 3:return e.courseInstances.update(i,{modifiedDate:Date.now(),modifiedBy:{name:s.a.currentUser.displayName,url:"mailto:"+s.a.currentUser.mail}}),[2]}})})}},,function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=["Lära att lära","Samarbeta","Agera globalt","Visa handlingskraft","Vara innovativ","Leva digitalt"]},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(65);function s(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"Välj användare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,s=e.school,i=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===i.length?{fontStyle:"italic"}:{}},0===i.length?"saknar roller":i.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:s?{}:{fontStyle:"italic"}},s||"saknar skola"))}))))}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(11);function a(){return r.c.courseInstances.hasEdgesFrom([r.d])}},,,function(e,t){},,function(e,t,n){"use strict";function r(e){return(e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)})}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(37),s=n(11),i=n(56);function o(e){var t,n=e.map(function(e){return e.startsWith("course:")?e:"course:"+e});return 0===n.length?new a.a([]):(t=s.c.courses.include("abilities","centralContent","knowledgeRequirements")).tags.apply(t,r.g(n)).filter(function(e){return e.isTemplate}).map(function(e){return r.a({},e,{abilities:Object(i.a)(e.abilities,e.abilitiesOrder),centralContent:Object(i.a)(e.centralContent,e.centralContentOrder),knowledgeRequirements:Object(i.a)(e.knowledgeRequirements,e.knowledgeRequirementsOrder)})}).toValue()}},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),s=n(33),i=n(13),o=n(3),c=Object(s.b)(function(){return o.a.kedBackendClient.http.status.combineLatest(o.a.edsClient.http.status).map(function(e){var t=r.f(e,2),n=t[0],s=t[1];return a.createElement("div",{className:"loading-indicator"},a.createElement("div",{className:"indicator"},n.numOutstandingOperations>0||s.numOutstandingOperations>0?a.createElement(i.a,null):void 0))})})},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(23),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.task,n=e.course,i=e.updateLink;if(!t.migratedTexts)return a.createElement(a.Fragment,null," ");var o=t.migratedTexts,c=o.abilities,l=o.centralContent,u=o.knowledgeRequirements,d=Object.keys(u||{}).map(function(e){return r.a({},n.knowledgeRequirements.find(function(t){return t.id===e}),u[e])}),m={title:"Uppdaterat kunskapskrav för betyget A",type:"knowledgeRequirements",items:d.filter(function(e){return"A"===e.gradeStep})},p={title:"Uppdaterat Kunskapskrav för betyget C",type:"knowledgeRequirements",items:d.filter(function(e){return"C"===e.gradeStep})},f={title:"Uppdaterat kunskapskrav för betyget E",type:"knowledgeRequirements",items:d.filter(function(e){return"E"===e.gradeStep})},h={title:"Uppdaterade förmågor",type:"abilities",items:Object.keys(c||{}).map(function(e){return r.a({},n.abilities.find(function(t){return t.id===e}),c[e])})},g=[m,p,f,{title:"Uppdaterat centralt innehåll",type:"centralContent",items:Object.keys(l||{}).map(function(e){return r.a({},n.centralContent.find(function(t){return t.id==e}),l[e])})},h].filter(function(e){return e.items.length>0});return 0===g.length?a.createElement(a.Fragment,null," "):a.createElement(s.a,{className:"larger",title:a.createElement("div",null,a.createElement("div",{className:"warningFlag"},a.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),a.createElement("p",null,"Uppdaterade formuleringar från Skolverket"))},g.map(function(e){var t=e.title,n=(e.type,e.items);return a.createElement("div",{key:t},a.createElement("h5",null,t),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{width:"40%"}},"Ursprunglig formulering"),a.createElement("th",{style:{width:"40%"}},"Skolverkets nya formulering"),a.createElement("th",null,"Täcker uppgiften den nya formuleringen?"))),a.createElement("tbody",null,n.map(function(e){return a.createElement("tr",{key:e.id},a.createElement("td",{dangerouslySetInnerHTML:{__html:e.oldText}}),a.createElement("td",{dangerouslySetInnerHTML:{__html:e.name}}),a.createElement("td",null,a.createElement("button",{onClick:function(){return i(e.id,!0)}},"Ja - behåll kopplingen"),a.createElement("button",{onClick:function(){return i(e.id,!1)}},"Nej - ta bort kopplingen")))}))))}))},t}(a.Component)},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(2),o=n(13),c=n(5),l=n.n(c),u=n(6),d=n(14),m=n(133),p=n.n(m);function f(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return"urkund-status urkund-status-error";case"Submitted":return"urkund-status urkund-status-submitted";case"Accepted":return"urkund-status urkund-status-accepted";case"Analyzed":return"urkund-status urkund-status-analyzed"}}function h(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return e.ExternalId?"Kunde inte tas emot av urkund. Felkod: "+e.Status.ErrorCode+"\nExternal ID: "+e.ExternalId+"\nFelmeddelande: "+e.Status.Message:e.Status.Message;case"Submitted":return"Filen är uppladdad till Urkund. Klicka för att uppdatera status.";case"Accepted":return"Filen analyseras fortfarande av Urkund. Klicka för att uppdatera status.";case"Analyzed":return"Rapport skapad. Klicka för att öppna rapporten i nytt fönster"}}function g(e){if(!e||!e.Status)return"";switch(e.Status.State){case"Error":return"urkund-significance-error";case"Submitted":return"urkund-significance-submitted";case"Accepted":return"urkund-significance-accepted"}var t=e.Report;return t?t.Significance<1?"urkund-significance urkund-significance-0":t.Significance<10?"urkund-significance urkund-significance-1":t.Significance<25?"urkund-significance urkund-significance-2":t.Significance<40?"urkund-significance urkund-significance-3":t.Significance<55?"urkund-significance urkund-significance-4":t.Significance<70?"urkund-significance urkund-significance-5":t.Significance<85?"urkund-significance urkund-significance-6":t.Significance<99.9?"urkund-significance urkund-significance-7":t.Significance>=99.9?"urkund-significance urkund-significance-8":"":""}var b=n(64),v=n(75),k=n(76);n.d(t,"a",function(){return w});var y=[".pdf",".odt",".docx",".doc",".cad",".wav",".mp3",".mpeg4",".mp4",".zip",".png",".jpg",".jpeg",".gif"],E=[".pdf",".odt",".docx",".doc"],w=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assignments:[],loading:!0},n}return r.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,t,r)})},t.prototype.componentDidMount=function(){this.load()},t.prototype.componentWillReceiveProps=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return n.trys.push([0,4,,5]),e.taskId===this.props.taskId&&e.courseId===this.props.courseId?[3,3]:[4,this.setStatePromised(function(){return{assignments:[],loading:!0}})];case 1:return n.sent(),[4,this.load()];case 2:n.sent(),n.label=3;case 3:return[3,5];case 4:return t=n.sent(),Object(i.n)(t),[3,5];case 5:return[2]}})})},t.prototype.update=function(e,t){return r.g([t],e.filter(function(e){var n=e.user,r=e.filename;return n!==t.user||r!==t.filename}))},t.prototype.refreshAssignment=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,c,l,d,m,p,f,h,g=this;return r.d(this,function(b){switch(b.label){case 0:return t=s.a.kedBackendClient.http,n=this.props,a=n.courseId,i=n.taskId,o=n.school,c=e.user,l=e.filename,[4,this.setState(function(t){var n=t.assignments;return{assignments:g.update(n,r.a({},e,{isRefreshing:!0}))}})];case 1:b.sent(),b.label=2;case 2:return b.trys.push([2,8,,10]),[4,t.get("assignments/urkund/"+o+"/"+a+"/"+i+"/"+c+"/"+l)];case 3:return(d=b.sent()).status>=400?(m=u.c.bind,p=[void 0,d.status],[4,d.text()]):[3,5];case 4:throw new(m.apply(u.c,p.concat([b.sent()])));case 5:return[4,d.text()];case 6:return f=b.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:g.update(n,r.a({},e,{isRefreshing:!1,metadata:r.a({},e.metadata,{urkundResponse:f})}))}})];case 7:return b.sent(),[3,10];case 8:return h=b.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:g.update(n,r.a({},e,{isRefreshing:!1,refreshError:h}))}})];case 9:return b.sent(),[3,10];case 10:return[2]}})})},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,i,o,c,m,p,f,h,g,b,v,k,y,E,w;return r.d(this,function(T){switch(T.label){case 0:return T.trys.push([0,13,,14]),n=s.a.kedBackendClient.http,a=this.props,i=a.courseId,o=a.taskId,c=a.school,[4,(m=Object(d.e)(s.a.currentUser,c))?n.get("assignments/"+c+"/"+i+"/"+o):n.get("assignments/"+c+"/"+i+"/"+o+"/"+s.a.currentUser.mail)];case 1:return 200===(p=T.sent()).status?[3,3]:(f=u.c.bind,h=[void 0,p.status],[4,p.text()]);case 2:throw new(f.apply(u.c,h.concat([T.sent()])));case 3:return[4,p.json()];case 4:if(g=T.sent(),this.setState({error:null,loading:!1,assignments:g}),!m)return[3,12];b=g.filter(function(e){return e.metadata&&!e.metadata.urkundUploadError&&(!e.metadata.urkundLastPoll||["Accepted","Submitted"].indexOf(JSON.parse(e.metadata.urkundResponse)[0].Status.State)>=0&&parseInt(e.metadata.urkundLastPoll)<l()().add(-15,"seconds").toDate().getTime())}),T.label=5;case 5:T.trys.push([5,10,11,12]),v=r.h(b),k=v.next(),T.label=6;case 6:return k.done?[3,9]:(y=k.value,[4,this.refreshAssignment(y)]);case 7:T.sent(),T.label=8;case 8:return k=v.next(),[3,6];case 9:return[3,12];case 10:return E=T.sent(),e={error:E},[3,12];case 11:try{k&&!k.done&&(t=v.return)&&t.call(v)}finally{if(e)throw e.error}return[7];case 12:return[3,14];case 13:return w=T.sent(),this.setState({loading:!1,error:"Kunde inte ladda inlämningsuppgifter",assignments:[]}),console.error(w),[3,14];case 14:return[2]}})})},t.prototype.onDrag=function(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"},t.prototype.verifyAndUpload=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),e?this.state.assignments.some(function(t){return t.user===s.a.currentUser.mail&&t.filename===e.name})&&!confirm("Ersätta befintlig fil ("+e.name+")?")?[2]:this.props.school.toLowerCase()===s.a.currentUser.school.toLowerCase()||confirm("Uppgiften tillhör en annan skola ("+this.props.school+").\nVill du ändå lämna in ditt arbete här?")?(this.setState({uploadingFile:e}),[4,this.upload(e)]):[2]:[2];case 1:return n.sent(),[4,this.load()];case 2:return n.sent(),this.setState({uploadingFile:null}),[3,4];case 3:return t=n.sent(),this.setState({error:"Kunde inte ladda upp filen. "+(t.message||t),uploadingFile:null}),console.error(t),[3,4];case 4:return[2]}})})},t.prototype.upload=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,c,l,d,m,p;return r.d(this,function(r){switch(r.label){case 0:if(s.a.kedBackendClient.http,t=this.props,n=t.courseId,a=t.taskId,i=t.school,o=s.a.currentUser.mail,E.indexOf("."+e.name.split(".").reverse()[0].toLowerCase())>=0){if(e.size>52428800)throw new Error("Filer av denna typ får inte vara större än 50 MB")}else if(e.size>104857600)throw new Error("Filen får inte vara större än 100 MB");if(c=e.name.toLowerCase(),!y.some(function(e){return c.endsWith(e)}))throw new Error("Filens ändelse måste vara "+y.join(" / "));return(l=new FormData).append("files",e),[4,s.a.kedBackendClient.http.fetch("assignments/"+i+"/"+n+"/"+a+"/"+o,"put",{},{userDisplayName:s.a.currentUser.displayName},{body:l})];case 1:return 200===(d=r.sent()).status?[3,3]:(m=u.c.bind,p=[void 0,d.status],[4,d.text()]);case 2:throw new(m.apply(u.c,p.concat([r.sent()])));case 3:return[2]}})})},t.prototype.download=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),[4,s.a.kedBackendClient.http.fetch(e.mediaLink,"get",{})];case 1:return(t=r.sent()).status>=400?(n=u.c.bind,a=[void 0,t.status],[4,t.text()]):[3,3];case 2:throw new(n.apply(u.c,a.concat([r.sent()])));case 3:return[4,t.blob()];case 4:return i=r.sent(),p()(i,e.filename,e.contentType),[3,6];case 5:return o=r.sent(),this.setState({error:"Kunde inte ladda ned filen. "+(o.message||o)}),console.error(o),[3,6];case 6:return[2]}})})},t.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(o){switch(o.label){case 0:return o.trys.push([0,6,,7]),[4,this.setStatePromised(function(t){return{assignments:t.assignments.map(function(t){return t.mediaLink===e?r.a({},t,{metadata:r.a({},t.metadata,{$meta:"delete"})}):r.a({},t)})}})];case 1:return o.sent(),[4,s.a.kedBackendClient.http.fetch(e,"delete",{})];case 2:return(t=o.sent()).status>=400?(n=u.c.bind,a=[void 0,t.status],[4,t.text()]):[3,4];case 3:throw new(n.apply(u.c,a.concat([o.sent()])));case 4:return[4,this.load()];case 5:return o.sent(),[3,7];case 6:return i=o.sent(),this.setState({error:"Kunde inte ta bort filen. "+(i.message||i)}),console.error(i),[3,7];case 7:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.courseId,c=t.taskId,u=t.school,m=this.state,p=m.loading,y=m.assignments,E=m.error,w=m.uploadingFile,T=Object(d.e)(s.a.currentUser,u),O=r.g(y);if(w){var I={school:u,courseId:n,taskId:c,filename:w.name,size:w.size,user:s.a.currentUser.mail,contentType:w.type,uploadDate:Date.now(),mediaLink:"assignments/"+u+"/"+n+"/"+c+"/"+s.a.currentUser.mail+"/"+w.name,metadata:{$meta:"add",userDisplayName:s.a.currentUser.displayName}};O=O.filter(function(e){return e.mediaLink!==I.mediaLink}),O=r.g(O,[I])}var N=(O=O.sort(Object(i.h)(["metadata.userDisplayName","filename","uploadDate"],["sv","en"],{sensitivity:"base"}))).some(function(e){return e.user===s.a.currentUser.mail});return a.createElement("div",{onDragOver:function(t){return e.onDrag(t)},onDrop:function(t){t.stopPropagation(),t.preventDefault(),e.verifyAndUpload(t.dataTransfer.files[0])}},E?a.createElement(a.Fragment,null,a.createElement("p",{className:"error"},E)):void 0,p?a.createElement(a.Fragment,null,a.createElement(o.a,null)," Laddar inlämnade filer..."):0===O.length?T?a.createElement("p",null,"Ingen elev har lämnat in något arbete ännu."):void 0:a.createElement(a.Fragment,null,a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,T?a.createElement("th",null,"Elev"):void 0,a.createElement("th",null,"Filnamn"),a.createElement("th",null,"Inlämnat den"),T&&a.createElement(a.Fragment,null,a.createElement("th",null,"Rapport"),a.createElement("th",null,"Nivå")),N&&a.createElement("th",null))),a.createElement("tbody",null,O.map(function(t){return a.createElement("tr",{key:t.mediaLink,style:t.metadata.$meta?{opacity:.5}:{}},T?a.createElement(a.Fragment,null,a.createElement("td",null,a.createElement("a",{href:"mailto:"+t.user},t.metadata.userDisplayName||t.user)),a.createElement("td",null,a.createElement("a",{href:"#",onClick:function(n){n.preventDefault(),n.stopPropagation(),e.download(t)}},t.filename)),a.createElement("td",{className:"assignment-date-col"},l()(t.uploadDate).format("YYYY-MM-DD HH:mm")),"add"===t.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(o.a,null)," Laddar upp..."):"delete"===t.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(o.a,null)," Tar bort..."):(n=t.metadata,r=n.urkundResponse&&JSON.parse(n.urkundResponse),!(i=r&&r[0])&&t.metadata.urkundUploadError&&(i={Status:{ErrorCode:-1,Message:t.metadata.urkundUploadError,State:"Error"},ExternalId:t.metadata.urkundExternalId}),t.isRefreshing?a.createElement("td",{colSpan:2},a.createElement(o.a,null)," Uppdaterar..."):i?a.createElement(a.Fragment,null,a.createElement("td",{className:"urkund-status-col"},a.createElement("a",{href:i.Report&&i.Report.ReportUrl,onClick:function(n){-1!==["Accepted","Submitted"].indexOf(i.Status.State)&&(n.preventDefault(),n.stopPropagation(),e.refreshAssignment(t))},target:"_blank",title:h(i)},a.createElement("div",{className:f(i)}))),a.createElement("td",{className:"urkund-status-col"},a.createElement("div",{className:g(i)},i.Report&&"number"==typeof i.Report.Significance?i.Report.Significance.toFixed()+"%":" "))):a.createElement("td",{colSpan:2}))):a.createElement(a.Fragment,null,a.createElement("td",null,a.createElement("a",{href:"#",onClick:function(n){n.preventDefault(),n.stopPropagation(),e.download(t)}},t.filename)),a.createElement("td",{className:"assignment-date-col"},"add"===t.metadata.$meta?a.createElement(a.Fragment,null,a.createElement(o.a,null)," Laddar upp..."):"delete"===t.metadata.$meta?a.createElement(a.Fragment,null,a.createElement(o.a,null)," Tar bort..."):l()(t.uploadDate).format("YYYY-MM-DD HH:mm"))),N&&a.createElement("td",null,!t.metadata.$meta&&t.user===s.a.currentUser.mail&&a.createElement("a",{href:"#",onClick:function(n){n.stopPropagation(),n.preventDefault(),confirm("Radera inlämnad fil "+t.filename+"?")&&e.delete(t.mediaLink)}},a.createElement("i",{className:"fa fa-trash"}))));var n,r,i})))),Object(b.a)()?void 0:a.createElement(a.Fragment,null,a.createElement("div",{className:"drop-zone task-assignment-drop-zone"},"Droppa ditt färdiga arbete här.",a.createElement("br",null),"Det går också bra att använda bläddra-knappen nedan."),a.createElement("input",{type:"file",onChange:function(t){return e.verifyAndUpload(t.target.files[0])}}),a.createElement(k.a,{label:"Hämta från Google Drive",action:function(){var t=new v.a({upload:!0});t.show().then(function(n){t.downloadFile({file:n[0],limitSize:100}).then(function(t){return e.verifyAndUpload(t)})})}})))},t}(a.Component)},,,function(e,t,n){var r={"./en-SG":78,"./en-SG.js":78,"./en-au":79,"./en-au.js":79,"./en-ca":80,"./en-ca.js":80,"./en-gb":81,"./en-gb.js":81,"./en-ie":82,"./en-ie.js":82,"./en-il":83,"./en-il.js":83,"./en-nz":84,"./en-nz.js":84,"./sv":85,"./sv.js":85};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=121},function(e,t){},function(e,t){},,function(e,t,n){"use strict";var r=n(3),a=n(65),s=n(16),i=Object(s.b)(location.search).user;if(i){var o=a.a.find(function(e){return e.username===i});o&&(r.a.currentUser=o)}var c=Object(s.b)(location.search),l=c.role,u=c.school;r.a.currentUser&&(l&&(r.a.currentUser.roles=l.split(",")),u&&(r.a.currentUser.school=u))},,,,,,function(e,t,n){"use strict";function r(e){var t,n,r;document.write('<link rel="stylesheet" href="'+(t=e,n=location.protocol+"//"+location.host+location.pathname,r=n.lastIndexOf("/"),n.substr(0,r+1)+t)+'" />')}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";function r(e){var t=e.v1,n=e.versionFolder,r=e.version,a=e.includeCSS,s=e.NOCSS;s||t&&t.forEach(function(e){return a(e)});var i=parseInt(s);isNaN(i)&&(i=1);for(var o=i+1;o<=r;++o)a(n+"/v"+o+".css")}n.d(t,"a",function(){return r})},,,,,,,,,,function(e,t,n){"use strict";var r=n(7);r.a.KED_LOCALE="sv",r.a.KED_SCHOOL_LOCALE="sv"},,,,,,,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n.n(a),i=n(204),o=n(203),c=n(205),l=n(67),u=n(94),d=n(114),m=n(33),p=n(11),f=n(37),h=n(2),g=n(7),b=n(14),v=n(6),k=n(163),y=n(3);function E(){return Object(b.d)(y.a.currentUser,"standard")}var w,T,O,I,N,j,C,S,D,x,R,L,M,P,A,U,_,F,B,q,G,Y,H,z,K,V,$,W,Z,Q,J,X=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editingName:!1,name:""},n}return r.c(t,e),t.prototype.createTab=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,c,l,u,d,m,p;return r.d(this,function(f){switch(f.label){case 0:return this.setState({editingName:!1,name:""}),t=this.props,n=t.type,a=t.branch,s=t.draftId,i=t.course,o=t.school,c=t.history,l=t.block,u=t.stepNo,d={id:Object(v.h)(),tabTitle:e,name:e,order:Date.now(),locked:!!E(),acl:["role:USER:R","schoolRole:"+o+"/EMPLOYEE:S"]},m="theme-course-tab"===n?r.a({type:"theme-course-tab",tabClass:"run-up-tab",tags:[this.props.course.id]},d):r.a({type:"step-course-tab",tabClass:"content-tab",tags:r.g(l.tags)},d,{stepNo:u}),p={type:"rich-text",id:Object(v.h)(),tags:[this.props.course.id],html:"<h2>"+e+"</h2",order:Date.now(),locked:!0,hidden:!1},"step-course-tab"===m.type?a.courseBlocks.addRelated(l.id,"tabs",m):a.courseInstances.addRelated(i.id,"tabs",m),a.courseTabs.addRelated(m.id,"contents",p),[4,a.saveNow()];case 1:return f.sent(),c.push("/"+o+"/courses/"+i.id+"/tabs/"+m.id+"/drafts/"+s+"/edit"),[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=(t.school,t.course,t.branch,this.state),s=n.editingName,i=n.name;return a.createElement(a.Fragment,null,a.createElement("a",{onClick:s?null:function(t){return e.setState({editingName:!0,name:""})}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),s?a.createElement("input",{type:"text",style:{color:"black"},autoFocus:!0,placeholder:Object(h.a)(T||(T=r.e(["Fliknamn"],["Fliknamn"]))),value:i,size:30,onChange:function(t){return e.setState({name:t.target.value})},onKeyPress:function(t){"Enter"===t.key&&e.createTab(i)},onBlur:function(){return e.setState({editingName:!1})}}):" "+Object(h.a)(w||(w=r.e(["Ny flik"],["Ny flik"])))))},t}(a.Component),ee=Object(k.a)(X),te={"rich-text":Object(h.a)(O||(O=r.e(["Textruta"],["Textruta"]))),"youtube-movie":Object(h.a)(I||(I=r.e(["Youtube film"],["Youtube film"]))),"learning-goals":Object(h.a)(N||(N=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"]))),"resource-list":Object(h.a)(j||(j=r.e(["Resurslista"],["Resurslista"])))},ne={"rich-text":Object(h.a)(C||(C=r.e(["Lägg till text"],["Lägg till text"]))),"youtube-movie":Object(h.a)(S||(S=r.e(["Lägg till youtube film"],["Lägg till youtube film"]))),"learning-goals":Object(h.a)(D||(D=r.e(["Lägg till lärandemål och uppgifter"],["Lägg till lärandemål och uppgifter"]))),"resource-list":Object(h.a)(x||(x=r.e(["Lägg till resurslista"],["Lägg till resurslista"])))},re=function(e){function t(t){var n=e.call(this,t)||this;return n.state={open:!1,contentType:"rich-text"},n}return r.c(t,e),t.prototype.createContent=function(){var e=this.props,t=e.tab,n=e.branch,r=e.type,a=this.newContent(r||this.state.contentType);n.courseTabs.addRelated(t.id,"contents",a),this.setState({open:!1})},t.prototype.newContent=function(e){switch(e){case"rich-text":return this.newRichText();case"learning-goals":return this.newLearningGoal();default:throw new Error("Not implemented")}},t.prototype.newRichText=function(){return{type:"rich-text",tags:[this.props.course.id],id:Object(v.h)(),order:Date.now(),locked:this.props.tab.locked,lockDelete:E(),hidden:!1,html:Object(h.a)(R||(R=r.e(["Ändra innehållstexten här..."],["Ändra innehållstexten här..."])))}},t.prototype.newLearningGoal=function(){return{type:"learning-goals",tags:[this.props.course.id],id:Object(v.h)(),locked:this.props.tab.locked,lockDelete:E(),hidden:!1,hasCommonLearningGoals:"theme-course"===this.props.course.type,commonLearningGoals:[],order:Date.now(),hiddenTasks:[]}},t.prototype.render=function(){var e=this;return this.state.open?a.createElement("div",null,a.createElement("select",{onChange:function(t){return e.setState({contentType:t.target.value})}},Object.keys(te).map(function(e){return a.createElement("option",{key:e,value:e},te[e])})),a.createElement("a",{className:"btn pull-right",onClick:function(){return e.setState({open:!1})}},Object(h.a)(L||(L=r.e(["Avbryt"],["Avbryt"])))),a.createElement("a",{className:"btn btn-default",onClick:function(){return e.createContent()}},Object(h.a)(M||(M=r.e(["Skapa"],["Skapa"]))))):a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){e.props.type?e.createContent():e.setState({open:!0})}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),this.props.type?ne[this.props.type]:Object(h.a)(P||(P=r.e(["Lägg till innehåll"],["Lägg till innehåll"]))))," ")},t}(a.Component),ae=function(e){var t=e.className,n=e.classNames,a=e.children;return s.a.createElement("div",{className:r.g(n||[],t?[t]:[],["align-horizontal"]).join(" ")},a)},se=function(e){var t=e.className,n=e.classNames,a=e.children;return s.a.createElement("div",{className:r.g(n||[],t?[t]:[],["horizontalItem"]).join(" ")},a)},ie={"intro-tab":Object(h.a)(A||(A=r.e(["Introduktionsflik"],["Introduktionsflik"]))),"run-up-tab":Object(h.a)(U||(U=r.e(["Upptaktsflik"],["Upptaktsflik"]))),"subject-tab":Object(h.a)(_||(_=r.e(["Ämnesflik"],["Ämnesflik"]))),"mission-tab":Object(h.a)(F||(F=r.e(["Uppdragsflik"],["Uppdragsflik"]))),"content-tab":Object(h.a)(B||(B=r.e(["Generell flik"],["Generell flik"]))),"teacher-tab":Object(h.a)(q||(q=r.e(["Lärarsida"],["Lärarsida"])))},oe=n(47),ce=n(25),le=function(e){var t=e.tab,n=e.repo,a=e.course,i=t.subject?t.subject:"theme-course"===a.type&&a.subjects&&a.subjects.length>0?{subjectCode:a.subjects[0].code,subjectName:a.subjects[0].name}:{subjectCode:"",subjectName:""},o=i.subjectCode,c=i.subjectName,l=Object(oe.d)(a.tags),u=Object(oe.d)(t.tags)[0]||l[0]||null;return s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("p",{className:"box-mini-label"},Object(h.a)(G||(G=r.e(["Inställningar för fliken ",""],["Inställningar för fliken ",""])),t.name||t.tabTitle)),s.a.createElement(ae,null,s.a.createElement(se,null,s.a.createElement("label",{className:"kclabel"},Object(h.a)(Y||(Y=r.e(["Flikens typ"],["Flikens typ"]))))),s.a.createElement(se,null,s.a.createElement("select",{value:t.tabClass,onChange:function(e){return n.courseTabs.update(t,"subject-tab"===e.target.value?{tabClass:e.target.value,subject:{subjectCode:o,subjectName:c},tags:Object(oe.a)(t.tags,[o],[u])}:{tabClass:e.target.value})}},Object.keys(ie).map(function(e){return s.a.createElement("option",{key:e,value:e},ie[e])})))),s.a.createElement(ce.a,{label:Object(h.a)(H||(H=r.e(["Flikens namn"],["Flikens namn"]))),id:"TabSettings:name",value:t.name||t.tabTitle,onChange:function(e){return n.courseTabs.update(t,{name:e,tabTitle:e})}}))},ue={"rich-text":Object(h.a)(z||(z=r.e(["Textruta"],["Textruta"]))),"youtube-movie":Object(h.a)(K||(K=r.e(["Youtube film"],["Youtube film"]))),"learning-goals":Object(h.a)(V||(V=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"]))),"resource-list":Object(h.a)($||($=r.e(["Resurslista"],["Resurslista"])))},de=n(52),me=n(48),pe=function(e){var t=e.content,n=e.repo,r=e.editMode,a=e.reportNumChars,i=e.maxChars;return r?s.a.createElement("div",null,s.a.createElement(de.a,{html:t.html,defaultActions:me.a,readOnly:!r||t.locked&&!E(),reportNumChars:a,maxChars:i,actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],onChange:r&&function(e){return n.courseContents.update(t,{html:e})}})):s.a.createElement("div",null,s.a.createElement("div",{className:"rich-text-readonly",dangerouslySetInnerHTML:{__html:t.html}}))},fe=function(e){var t=e.content,n=e.repo;return s.a.createElement("div",null,s.a.createElement("h2",null,Object(h.a)(W||(W=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"])))),E()?s.a.createElement(s.a.Fragment,null,s.a.createElement("div",null,s.a.createElement(ae,null,s.a.createElement(se,null,s.a.createElement("input",{type:"checkbox",checked:t.hasCommonLearningGoals,onChange:function(e){return n.courseContents.update(t,{hasCommonLearningGoals:!!e.target.checked})}})),s.a.createElement(se,null,s.a.createElement("p",null," ",Object(h.a)(Z||(Z=r.e(["Specificera gemensamma lärandemål för samtliga uppgifter"],["Specificera gemensamma lärandemål för samtliga uppgifter"]))))))),s.a.createElement("div",null,s.a.createElement("p",null,t.hasCommonLearningGoals?Object(h.a)(Q||(Q=r.e(["Ange de gemensamma lärandemålen. Ange ett lärandemål per rad."],["Ange de gemensamma lärandemålen. Ange ett lärandemål per rad."]))):Object(h.a)(J||(J=r.e(["Ange ett lärandemål per rad."],["Ange ett lärandemål per rad."])))),s.a.createElement("textarea",{className:"learning-goal-box",value:t.commonLearningGoals.join("\n"),onChange:function(e){return n.courseContents.update(t,{commonLearningGoals:e.target.value.split("\n")})}}))):null)},he=n(55);var ge,be,ve,ke,ye,Ee,we=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editingName:!1,name:""},n}return r.c(t,e),t.prototype.createTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,c,l,u,d,m,p,f,h;return r.d(this,function(g){switch(g.label){case 0:return this.setState({editingName:!1,name:""}),t=this.props,n=t.branch,a=t.draftId,s=t.course,i=t.tab,o=t.school,c=t.content,l=t.history,u=t.block,d=t.learningGoal,m=function(e,t,n){var a=[e.id];return"theme-course"===e.type?a.push.apply(a,r.g(t.tags.filter(function(e){return e.startsWith("course:")||e.startsWith("sub:")}))):a.push.apply(a,r.g(n.tags.filter(function(e){return e.startsWith("course:")||e.startsWith("sub:")}))),{tags:a,subject:"theme-course"===e.type?t.subject.subjectName:e.subject.subjectName}}(s,i,u),p=m.tags,f=m.subject,h={id:Object(v.h)(),tags:p,name:e,acl:["role:USER:R","schoolRole:"+o+"/EMPLOYEE:S"],url:"",taskType:"task",learningGoal:d,futureAbilities:[],resources:[],subject:f},n.courseContents.addRelated(c.id,"tasks",h),[4,n.saveNow()];case 1:return g.sent(),l.push("/"+o+"/courses/"+s.id+"/tabs/"+i.id+"/contents/"+c.id+"/tasks/"+h.id+"/drafts/"+a+"/edit"),[2]}})})},t.prototype.render=function(){var e=this,t=this.state,n=t.editingName,s=t.name;return a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:n?null:function(t){return e.setState({editingName:!0,name:""})}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),n?a.createElement("input",{type:"text",autoFocus:!0,placeholder:Object(h.a)(ve||(ve=r.e(["Uppgiftens namn"],["Uppgiftens namn"]))),value:s,size:50,onChange:function(t){return e.setState({name:t.target.value})},onKeyPress:function(t){"Enter"===t.key&&e.createTask(s)},onBlur:function(){return e.setState({editingName:!1})}}):" "+(E()?Object(h.a)(ge||(ge=r.e(["Lägg till uppgift"],["Lägg till uppgift"]))):Object(h.a)(be||(be=r.e(["Lägg till egen uppgift"],["Lägg till egen uppgift"]))))))},t}(a.Component),Te=Object(k.a)(we),Oe=function(e){var t=e.school,n=e.repo,r=e.content,a=e.draftId,i=e.editMode,o=e.course,c=e.courseTab,l=e.learningGoals,u=e.block,d=r.tasks,m=Object(h.b)(d,function(e){return e.subject||""}),p="step-course"===o.type?o.subject:c.subject;return p&&!m[p.subjectName]&&(m[p.subjectName]=[]),s.a.createElement(s.a.Fragment,null,Object.keys(m).map(function(e){var d=m[e].map(function(n){return{id:n.id,name:n.name,url:i?"#/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/contents/"+r.id+"/tasks/"+n.id+"/drafts/"+a+"/edit":a?"#/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/contents/"+r.id+"/tasks/"+n.id+"/drafts/"+a:"#/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/tasks/"+n.id,courseName:o.name,learningGoal:e,step:"step-course-tab"===c.type?c.stepNo:void 0,task:n,courseInfo:{school:t,course:o.id,tab:c.id}}});return s.a.createElement("div",{key:e},s.a.createElement("h5",null,e),s.a.createElement("ul",null,l.map(function(e){return s.a.createElement("li",{key:e},e)})),i?s.a.createElement(s.a.Fragment,null,s.a.createElement(he.a,{learningTasks:d}),s.a.createElement(Te,{branch:n,content:r,course:o,school:t,draftId:a,tab:c,block:u,learningGoal:e})):s.a.createElement(he.a,{learningTasks:d}))}))},Ie=function(e){var t=e.school,n=e.repo,a=e.content,i=e.draftId,o=e.editMode,c=e.course,l=e.courseTab,u=e.learningGoals,d=e.block,m=a.tasks,p={},f=u.reduce(function(e,t){return e[t]=m.filter(function(e){if(e.learningGoal&&e.learningGoal.split("\n").map(function(e){return e.trim().toLowerCase()}).includes(t.toLowerCase()))return p[e.id]=!0,!0}),e},{}),g=m.filter(function(e){return!p[e.id]});return g.length>0&&(f[o?Object(h.a)(ke||(ke=r.e(["Uppgifter utan giltigt lärandemål"],["Uppgifter utan giltigt lärandemål"]))):Object(h.a)(ye||(ye=r.e(["Övergripande"],["Övergripande"])))]=g),s.a.createElement(s.a.Fragment,null,Object.keys(f).map(function(e){var r=f[e].map(function(n){return{id:n.id,name:n.name,url:o?"#/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/contents/"+a.id+"/tasks/"+n.id+"/drafts/"+i+"/edit":i?"#/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/contents/"+a.id+"/tasks/"+n.id+"/drafts/"+i:"#/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/tasks/"+n.id,courseName:c.name,learningGoal:e,step:"step-course-tab"===l.type?l.stepNo:void 0,task:n,courseInfo:{school:t,course:c.id,tab:l.id}}});return s.a.createElement("div",{key:e},s.a.createElement("h4",null,e),o?s.a.createElement(s.a.Fragment,null,s.a.createElement(he.a,{learningTasks:r}),s.a.createElement(Te,{branch:n,content:a,course:c,school:t,draftId:i,tab:l,block:d,learningGoal:e})):s.a.createElement(he.a,{learningTasks:r}))}))},Ne=function(e){var t=e.content,n=e.editMode,a=e.repo,i=e.course,o=e.school,c=e.draftId,l=e.courseTab,u=e.block,d=t.hasCommonLearningGoals,m=t.commonLearningGoals,p=(t.tasks,m.map(function(e){return e.trim()}).filter(function(e){return!!e}));return s.a.createElement("div",{className:"ked_boxed"},!n||t.locked&&!E()?s.a.createElement("h2",null,Object(h.a)(Ee||(Ee=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"])))):s.a.createElement(fe,{course:i,content:t,repo:a}),s.a.createElement("hr",null),d?s.a.createElement(Oe,r.a({},{content:t,editMode:n,repo:a,course:i,school:o,draftId:c,courseTab:l,block:u,learningGoals:p})):s.a.createElement(Ie,r.a({},{content:t,editMode:n,repo:a,course:i,school:o,draftId:c,courseTab:l,block:u,learningGoals:p})))};function je(e){var t=e.repo,n=e.content,a=e.editMode,i=e.course,o=e.draftId,c=e.school,l=e.courseTab,u=e.reportNumChars,d=e.maxChars,m=e.block;switch(n.type){case"rich-text":return s.a.createElement(pe,r.a({},{repo:t,content:n,editMode:a,reportNumChars:u,maxChars:d}));case"learning-goals":return s.a.createElement(Ne,r.a({},{repo:t,content:n,editMode:a,course:i,draftId:o,courseTab:l,school:c,block:m}));default:return s.a.createElement("p",null,"Okänd innehållstyp: ",n.type)}}var Ce=n(35),Se=n(21);function De(e,t,n,r){var a=e.map(function(e,t){return{doc:e,idx:t}}),s=a.filter(function(e){return e.doc.id===t})[0],i=a.filter(function(e){return e.doc.id===n})[0];if(s&&i){var o=i.idx;s.doc.order;return"after"===r?o===e.length-1?Date.now():e[o].order+Math.random()*(e[o+1].order-e[o].order):0===o?Math.round(e[0].order-100-1e4*Math.random()):e[o-1].order+Math.random()*(e[o].order-e[o-1].order)}return 0}var xe,Re,Le,Me,Pe,Ae,Ue,_e,Fe,Be,qe,Ge,Ye,He,ze,Ke,Ve,$e,We,Ze,Qe,Je,Xe,et,tt,nt,rt,at,st,it,ot,ct,lt,ut,dt,mt,pt,ft,ht,gt,bt,vt,kt,yt,Et,wt,Tt,Ot,It,Nt,jt,Ct,St,Dt,xt,Rt,Lt,Mt,Pt,At,Ut,_t,Ft,Bt,qt,Gt,Yt,Ht,zt,Kt,Vt,$t,Wt,Zt,Qt,Jt,Xt,en,tn,nn,rn,an,sn,on,cn,ln,un,dn,mn,pn,fn,hn,gn,bn,vn,kn,yn,En,wn,Tn,On=function(e){function t(t){var n=e.call(this,t)||this;return n.numCharsObservable=new f.a(0),n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.editMode,n=e.content,a=e.branch,i=e.course,o=e.tab,c=e.school,l=e.draftId,u=e.contentOrderIndex,d=e.contents,m=e.block,p=E(),f=this.numCharsObservable;return!t||n.locked&&!p?s.a.createElement(je,{key:n.id,repo:a,content:n,course:i,editMode:t,courseTab:o,school:c,draftId:l,block:m}):s.a.createElement("div",{key:n.id,className:["course-content-box","learning-goals"!==n.type&&"ked_boxed"].filter(function(e){return!!e}).join(" "),style:{position:"relative"}},s.a.createElement(ae,null,s.a.createElement(se,null,s.a.createElement("p",{className:"box-mini-label"},ue[n.type])),s.a.createElement(se,null,p?s.a.createElement(s.a.Fragment,null," ",s.a.createElement("input",{type:"checkbox",checked:!n.locked,onChange:function(e){return a.courseContents.update(n,{locked:!e.target.checked})}}),Object(h.a)(xe||(xe=r.e(["Tillåt redigering"],["Tillåt redigering"]))),n.locked?null:s.a.createElement(s.a.Fragment,null," ",s.a.createElement("input",{type:"checkbox",checked:!n.lockDelete,onChange:function(e){return a.courseContents.update(n,{lockDelete:!e.target.checked})}}),Object(h.a)(Re||(Re=r.e(["Tillåt dölja rutan"],["Tillåt dölja rutan"]))))):null)),s.a.createElement(je,{repo:a,content:n,course:i,editMode:!0,school:c,draftId:l,courseTab:o,maxChars:4e3,reportNumChars:function(e){f.dispatch(e)},block:m}),s.a.createElement("div",{style:{position:"absolute",top:0,right:0}},(p||!n.locked)&&u>0&&s.a.createElement("span",null,s.a.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(){var e=De(d,n.id,d[u-1].id,"before");e&&a.courseContents.update(n,{order:e})}})," "),(p||!n.locked)&&u<d.length-1&&s.a.createElement("span",null,s.a.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(){var e=De(d,n.id,d[u+1].id,"after");e&&a.courseContents.update(n,{order:e})}})," "),p||!n.lockDelete?s.a.createElement(Ce.a,{title:"standard"===c?Object(h.a)(Le||(Le=r.e(["Ta bort innehållsrutan"],["Ta bort innehållsrutan"]))):Object(h.a)(Me||(Me=r.e(["Dölj innehållsrutan"],["Dölj innehållsrutan"]))),style:{display:"inline-block"},onClick:function(){return confirm(Object(h.a)(Pe||(Pe=r.e(["Ta bort innehåll?"],["Ta bort innehåll?"]))))&&a.courseTabs.removeRelated(o.id,"contents",n)}}):null),"rich-text"===n.type?s.a.createElement(Se.a,null,f.map(function(e){return s.a.createElement("div",{className:["char-counter-bottom"].concat(e>=4e3?"overflowed":[]).join(" ")},Object(h.a)(Ae||(Ae=r.e(["Texten innehåller "," av max "," tillåtna tecken"],["Texten innehåller "," av max "," tillåtna tecken"])),e,4e3))})):void 0)},t}(s.a.Component),In=n(70),Nn=n(112),jn=n(113),Cn=n(23),Sn=n(61),Dn=function(e){var t=e.repo,n=e.tab;return s.a.createElement(Se.a,null,Object(jn.a)(Object(Nn.a)(n.tags)).map(function(e){return 0===e.length?s.a.createElement("p",null,Object(h.a)(Ue||(Ue=r.e(["Fliken är inte kopplad till något ämne / årskurs"],["Fliken är inte kopplad till något ämne / årskurs"])))):s.a.createElement("div",null,e.map(function(a){var i=a.id,o=a.name,c=a.abilities,l=a.centralContent,u=a.knowledgeRequirements;return s.a.createElement("div",{key:i},1===e.length?void 0:s.a.createElement("h1",null,o),s.a.createElement(Cn.a,{className:"larger",title:s.a.createElement("p",null,Object(h.a)(_e||(_e=r.e(["Lås flikens kunskapskrav"],["Lås flikens kunskapskrav"]))))},s.a.createElement("p",null,Object(h.a)(Fe||(Fe=r.e(["Markera de kunskapskrav som ämnesfliken ska täcka."],["Markera de kunskapskrav som ämnesfliken ska täcka."])))),s.a.createElement(Se.a,null,t["knowledge-requirements"].hasEdgesFrom([n.id]).idsOnly().toValue().map(function(e){return s.a.createElement(In.a,{knowledgeRequirements:u,markedIds:e.map(function(e){return e.id}),idsToMarkNotOk:{},markMode:!0,onMarkChanged:function(r,a){e.filter(function(e){return!u.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){t.courseTabs.removeRelated(n.id,"knowledgeRequirements",e)});var s=u.filter(function(e){return e.id===r})[0];a?t.courseTabs.addRelated(n.id,"knowledgeRequirements",s):t.courseTabs.removeRelated(n.id,"knowledgeRequirements",s)}})}))),s.a.createElement(Se.a,null,t.abilities.hasEdgesFrom([n.id]).idsOnly().toValue().map(function(e){return s.a.createElement(Sn.a,{options:c,title:Object(h.a)(Be||(Be=r.e(["Lås flikens förmågor"],["Lås flikens förmågor"]))),markedIds:e.map(function(e){return e.id}),markMode:!0,onMarkChanged:function(r,a){e.filter(function(e){return!c.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){t.courseTabs.removeRelated(n.id,"abilities",e)});var s=c.filter(function(e){return e.id===r})[0];a?t.courseTabs.addRelated(n.id,"abilities",s):t.courseTabs.removeRelated(n.id,"abilities",s)}})})),s.a.createElement(Se.a,null,t["central-content"].hasEdgesFrom([n.id]).idsOnly().toValue().map(function(e){return s.a.createElement(Sn.a,{options:l,title:Object(h.a)(qe||(qe=r.e(["Lås flikens centrala innehåll"],["Lås flikens centrala innehåll"]))),markedIds:e.map(function(e){return e.id}),markMode:!0,onMarkChanged:function(r,a){e.filter(function(e){return!l.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){t.courseTabs.removeRelated(n.id,"centralContent",e)});var s=l.filter(function(e){return e.id===r})[0];a?t.courseTabs.addRelated(n.id,"centralContent",s):t.courseTabs.removeRelated(n.id,"centralContent",s)}})})))}))}))},xn=function(e){var t=e.tab,n=e.repo,a=e.course,i=(e.block,t.subject?t.subject:"theme-course"===a.type&&a.subjects&&a.subjects.length>0?{subjectCode:a.subjects[0].code,subjectName:a.subjects[0].name}:{subjectCode:"",subjectName:""}),o=i.subjectCode,c=(i.subjectName,Object(oe.d)(a.tags)),l=Object(oe.d)(t.tags)[0]||c[0]||null;return s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("p",{className:"box-mini-label"},Object(h.a)(Ge||(Ge=r.e(["Administrativa Inställningar för fliken ",""],["Administrativa Inställningar för fliken ",""])),t.name||t.tabTitle)),s.a.createElement(ae,null,s.a.createElement(se,null,s.a.createElement("input",{type:"checkbox",checked:t.locked,onChange:function(e){return n.courseTabs.update(t,{locked:!!e.target.checked})}})),s.a.createElement(se,null,Object(h.a)(Ye||(Ye=r.e(["Lås fliken från redigering förutom där det explicit tillåts"],["Lås fliken från redigering förutom där det explicit tillåts"]))))),"theme-course"===a.type&&"subject-tab"===t.tabClass&&o?s.a.createElement(s.a.Fragment,null,a.subjects.length>1&&s.a.createElement(ae,null,s.a.createElement(se,null,s.a.createElement("label",{className:"kclabel"},Object(h.a)(He||(He=r.e(["Ämne"],["Ämne"]))))),s.a.createElement(se,null,s.a.createElement("select",{value:o,onChange:function(e){return r.b(void 0,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=e.target.value,[4,u(a,t,l)];case 1:return n.sent(),[2]}})})}},a.subjects.map(function(e){var t=e.name,n=e.code;return s.a.createElement("option",{key:n,value:n},t)})))),c.length>1&&s.a.createElement(s.a.Fragment,null,s.a.createElement(ae,null,s.a.createElement(se,null,s.a.createElement("label",{className:"kclabel"},Object(h.a)(ze||(ze=r.e(["Välj årskurs"],["Välj årskurs"]))))),s.a.createElement(se,null,s.a.createElement("select",{value:l,onChange:function(e){return r.b(void 0,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=e.target.value,[4,u(a,o,t)];case 1:return n.sent(),[2]}})})}},c.map(function(e){return s.a.createElement("option",{key:e,value:e},Object(h.a)(Ke||(Ke=r.e(["Årskurs ",""],["Årskurs ",""])),e))})))),s.a.createElement("div",null,s.a.createElement(Dn,{repo:n,tab:t})))):void 0);function u(e,a,s){return r.b(this,void 0,void 0,function(){var i,o,c,l,u,d,m,p,f,g;return r.d(this,function(b){switch(b.label){case 0:return c=e.subjects.filter(function(e){return e.code===a}).map(function(e){return e.name})[0]||a,l=Object(oe.a)(t.tags,[a],[s]),n.courseTabs.update(t,{subject:{subjectCode:a,subjectName:c},tags:l}),[4,n.courseContents.hasEdgesFrom([t.id]).include("tasks").includeIdsAndNamesOnly().toValue().load()];case 1:u=b.sent(),d=Object(h.k)(u.map(function(e){return e.tasks}));try{for(m=r.h(d),p=m.next();!p.done;p=m.next())f=p.value,g=Object(oe.a)([e.id],[a],[s]),n.tasks.update(f,{tags:g,subject:c})}catch(e){i={error:e}}finally{try{p&&!p.done&&(o=m.return)&&o.call(m)}finally{if(i)throw i.error}}return[2]}})})}},Rn=Object(m.b)(function(e){var t=e.course,n=e.branch,s=e.block,i=e.tab,o=e.editMode,c=e.lazyContents,l=e.school,u=e.draftId;return c.map(function(e){return i?(e=e.slice().sort(Object(h.g)("order")),a.createElement("div",null,o?a.createElement(a.Fragment,null,E()||!i.locked?a.createElement(le,{course:t,tab:i,repo:n}):null,E()?a.createElement(xn,{course:t,tab:i,repo:n,block:s}):null):null,e.map(function(r,c){return a.createElement(On,{key:r.id,content:r,branch:n,contentOrderIndex:c,contents:e,course:t,draftId:u,editMode:o,school:l,block:s,tab:i})}),!o||!E()&&i.locked?void 0:a.createElement(a.Fragment,null,"subject-tab"!==i.tabClass&&"step-course"!==t.type||e.some(function(e){return"learning-goals"===e.type})?null:a.createElement(re,{type:"learning-goals",tab:i,branch:n,course:t}),a.createElement(re,{type:"rich-text",tab:i,branch:n,course:t})))):o?a.createElement("p",null,Object(h.a)(Ve||(Ve=r.e(["Denna kurs saknar innehåll. Skapa ny flik genom knappen ovan"],["Denna kurs saknar innehåll. Skapa ny flik genom knappen ovan"])))):E()?a.createElement("p",null,Object(h.a)($e||($e=r.e(["Denna kurs saknar innehåll. Välj Redigera knappen för att lägga till flikar."],["Denna kurs saknar innehåll. Välj Redigera knappen för att lägga till flikar."])))):a.createElement("p",null,Object(h.a)(We||(We=r.e(["Denna kurs saknar innehåll."],["Denna kurs saknar innehåll."]))))})}),Ln=n(101),Mn=Object(k.a)(function(e){var t=e.school,n=e.course,a=e.tab,i=e.activeTab,o=e.draftId,c=e.history,l=e.courseType,u=e.blockId;return s.a.createElement(s.a.Fragment,null,a&&(E()||!a.locked||n.allowRemoveTabs)?s.a.createElement("div",{className:"btn btn-warning pull-right",onClick:function(){return r.b(void 0,void 0,void 0,function(){var e,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,(e=p.c.branch(o)).courseTabs.include("contents").includeIdsOnly().id(i).load()];case 1:return a=r.sent(),[4,e.courseContents.include("tasks").includeIdsOnly().ids(a.contents.map(function(e){return e.id})).toValue().load()];case 2:return s=r.sent(),E()&&"standard"===t&&(s.forEach(function(t){t.tasks.forEach(function(n){e.courseContents.removeRelated(t.id,"tasks",n)})}),a.contents.forEach(function(t){e.courseTabs.removeRelated(a.id,"contents",t)})),"theme-course"===l?e.courseInstances.removeRelated(n.id,"tabs",a):u&&e.courseBlocks.removeRelated(u,"tabs",a),[4,p.c.saveNow()];case 3:return r.sent(),c.push("/"+t+"/courses/"+n.id+"/tabs/$/drafts/"+o+"/edit"),[2]}})})}},s.a.createElement("i",{className:"fa fa-trash","aria-hidden":!0})," ",E()&&"standard"===t?Object(h.a)(Ze||(Ze=r.e(["Ta bort fliken"],["Ta bort fliken"]))):Object(h.a)(Qe||(Qe=r.e(["Ta bort (dölj) fliken"],["Ta bort (dölj) fliken"])))):null,s.a.createElement("div",null,s.a.createElement(ae,null,s.a.createElement(se,null,s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){return c.push("/"+t+"/courses/"+n.id+"/tabs/"+(i||"$")+"/drafts/"+o),[2]})})}},s.a.createElement("i",{className:"fa fa-eye","aria-hidden":!0})," ",Object(h.a)(Je||(Je=r.e(["Förhandsgranska"],["Förhandsgranska"]))))),s.a.createElement(se,null," ",s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){return c.push("/"+t+"/courses/"+n.id+"/history"),[2]})})}},s.a.createElement("i",{className:"fa fa-history","aria-hidden":!0})," ",Object(h.a)(Xe||(Xe=r.e(["Versionshistorik"],["Versionshistorik"]))))),s.a.createElement(se,null," ",s.a.createElement("button",{className:"btn btn-warning",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,Object(Ln.a)({school:t,course:n,draftRepo:p.c.branch(o)})];case 1:return e.sent(),[4,p.c.saveNow()];case 2:return e.sent(),c.push("/"+t+"/courses/"+n.id+"/tabs/"+(i||"$")),[2]}})})}},s.a.createElement("i",{className:"fa fa-play","aria-hidden":!0})," ",Object(h.a)(et||(et=r.e(["Publicera"],["Publicera"]))))))),s.a.createElement("br",null),s.a.createElement("button",{className:"btn",onClick:function(){return c.push("/"+t+"/courses/"+n.id+"/tabs/"+(i||"$"))}},s.a.createElement("i",{className:"fa fa-arrow-left","aria-hidden":!0})," ",Object(h.a)(tt||(tt=r.e(["Avsluta redigering"],["Avsluta redigering"])))))}),Pn=n(63),An=n(57),Un=n(202),_n=Symbol(),Fn=Symbol(),Bn=Symbol(),qn={Text:_n,Checkbox:Fn,Obscure:Bn},Gn={entityTypes:{courseBlocks:Object(h.a)(nt||(nt=r.e(["kursblock"],["kursblock"]))),courseContents:Object(h.a)(rt||(rt=r.e(["innehållsruta"],["innehållsruta"]))),courseInstances:Object(h.a)(at||(at=r.e(["kurs"],["kurs"]))),courseTabs:Object(h.a)(st||(st=r.e(["flik"],["flik"]))),schools:Object(h.a)(it||(it=r.e(["skola"],["skola"]))),tasks:Object(h.a)(ot||(ot=r.e(["uppgift"],["uppgift"])))},modifiedLinks:{tabs:[Object(h.a)(ct||(ct=r.e(["Tillagd flik"],["Tillagd flik"]))),Object(h.a)(lt||(lt=r.e(["Borttagen flik"],["Borttagen flik"])))],blocks:[Object(h.a)(ut||(ut=r.e(["Tillagt block"],["Tillagt block"]))),Object(h.a)(dt||(dt=r.e(["Borttaget block"],["Borttaget block"])))],abilities:[Object(h.a)(mt||(mt=r.e(["Tillagd förmåga"],["Tillagd förmåga"]))),Object(h.a)(pt||(pt=r.e(["Borttagen förmåga"],["Borttagen förmåga"])))],centralContent:[Object(h.a)(ft||(ft=r.e(["Tillagt centralt innehåll"],["Tillagt centralt innehåll"]))),Object(h.a)(ht||(ht=r.e(["Borttaget centralt innehåll"],["Borttaget centralt innehåll"])))],knowledgeRequirements:[Object(h.a)(gt||(gt=r.e(["Tillagt kunskapskrav"],["Tillagt kunskapskrav"]))),Object(h.a)(bt||(bt=r.e(["Borttaget kunskapskrav"],["Borttaget kunskapskrav"])))],tasks:[Object(h.a)(vt||(vt=r.e(["Tillagd uppgift"],["Tillagd uppgift"]))),Object(h.a)(kt||(kt=r.e(["Borttagen uppgift"],["Borttagen uppgift"])))],contents:[Object(h.a)(yt||(yt=r.e(["Tillagd innehållsruta"],["Tillagd innehållsruta"]))),Object(h.a)(Et||(Et=r.e(["Borttagen innehållsruta"],["Borttagen innehållsruta"])))]},propertyNames:{allowAddTabs:[Fn,Object(h.a)(wt||(wt=r.e(["Ändrat om tillägg av flik ska vara tillåtet"],["Ändrat om tillägg av flik ska vara tillåtet"])))],allowRemoveTabs:[Fn,Object(h.a)(Tt||(Tt=r.e(["Ändrat om borttagning av flik ska vara tillåtet"],["Ändrat om borttagning av flik ska vara tillåtet"])))],allowReorderTabs:[Fn,Object(h.a)(Ot||(Ot=r.e(["Ändrat om det ska va tillåtet att ändra ordning på flik"],["Ändrat om det ska va tillåtet att ändra ordning på flik"])))],assignment:[Fn,Object(h.a)(It||(It=r.e(["Ändrad flagga för inlämningsuppgift"],["Ändrad flagga för inlämningsuppgift"])))],commonLearningGoals:[_n,Object(h.a)(Nt||(Nt=r.e(["Ändrade gemensamma lärandemål"],["Ändrade gemensamma lärandemål"])))],content:[_n,Object(h.a)(jt||(jt=r.e(["Ändrad innehållstext"],["Ändrad innehållstext"])))],dateTime:[Bn,Object(h.a)(Ct||(Ct=r.e(["Ändat datum / tid"],["Ändat datum / tid"])))],deadline:[_n,Object(h.a)(St||(St=r.e(["Ändrat inlämningsdatum"],["Ändrat inlämningsdatum"])))],description:[_n,Object(h.a)(Dt||(Dt=r.e(["Ändrad beskrivning"],["Ändrad beskrivning"])))],embeddedHtml:[Bn,Object(h.a)(xt||(xt=r.e(["Lagt till inbäddad HTML"],["Lagt till inbäddad HTML"])))],explainedRequirements:[Bn,Object(h.a)(Rt||(Rt=r.e(["Lagt till egna förklaringar av kunskapskrav"],["Lagt till egna förklaringar av kunskapskrav"])))],futureAbilities:[_n,Object(h.a)(Lt||(Lt=r.e(["Ändrade framtidsförmågor"],["Ändrade framtidsförmågor"])))],hasCommonLearningGoals:[Fn,Object(h.a)(Mt||(Mt=r.e(["Ändrad inställning för gemensamma lärandemål"],["Ändrad inställning för gemensamma lärandemål"])))],hidden:[Fn,Object(h.a)(Pt||(Pt=r.e(['Ändrad flagga "gömd"'],['Ändrad flagga "gömd"'])))],hiddenTasks:[Bn,Object(h.a)(At||(At=r.e(["Ändrat listan på gömda uppgifter"],["Ändrat listan på gömda uppgifter"])))],html:[Bn,Object(h.a)(Ut||(Ut=r.e(["Ändrat innehåll"],["Ändrat innehåll"])))],learningGoal:[_n,Object(h.a)(_t||(_t=r.e(["Lärandemål"],["Lärandemål"])))],lockDelete:[Fn,Object(h.a)(Ft||(Ft=r.e(['Ändrat flagga: "lås från borttagning"'],['Ändrat flagga: "lås från borttagning"'])))],locked:[Fn,Object(h.a)(Bt||(Bt=r.e(['Ändrad flagga: "förbjud ändring av flikar"'],['Ändrad flagga: "förbjud ändring av flikar"'])))],migratedTexts:[Bn,Object(h.a)(qt||(qt=r.e(["Ändringar i migrerade texter från skolverket"],["Ändringar i migrerade texter från skolverket"])))],name:[_n,Object(h.a)(Gt||(Gt=r.e(["Ändrat namn"],["Ändrat namn"])))],order:[Bn,Object(h.a)(Yt||(Yt=r.e(["Ändrad ordning"],["Ändrad ordning"])))],resources:[Bn,Object(h.a)(Ht||(Ht=r.e(["Ändrade i resurser"],["Ändrade i resurser"])))],taskType:[_n,Object(h.a)(zt||(zt=r.e(["Uppgiftstyp"],["Uppgiftstyp"])))],url:[_n,Object(h.a)(Kt||(Kt=r.e(["Url"],["Url"])))],workingProcedure:[_n,Object(h.a)(Vt||(Vt=r.e(["Arbetsprocess"],["Arbetsprocess"])))],youtubeId:[Bn,Object(h.a)($t||($t=r.e(["Youtube ID"],["Youtube ID"])))]},getModifiedLinkHeading:function(e){var t=Gn.modifiedLinks[e.label];return t?"add"===e.type?t[0]:"remove"===e.type?t[1]:Object(h.a)(Jt||(Jt=r.e(["Ångrad länkning"],["Ångrad länkning"]))):"add"===e.type?Object(h.a)(Wt||(Wt=r.e(["Tillagt objekt"],["Tillagt objekt"]))):"remove"===e.type?Object(h.a)(Zt||(Zt=r.e(["Borttaget objekt"],["Borttaget objekt"]))):Object(h.a)(Qt||(Qt=r.e(["Ångrad länkning"],["Ångrad länkning"])))},getPropVal:function(e){switch(e){case!0:return Object(h.a)(Xt||(Xt=r.e(["Påslaget"],["Påslaget"])));case!1:return Object(h.a)(en||(en=r.e(["Avslaget"],["Avslaget"])));case"primary":return Object(h.a)(tn||(tn=r.e(["Grundskola"],["Grundskola"])));case"gymnasium":return Object(h.a)(nn||(nn=r.e(["Gymnasieskola"],["Gymnasieskola"])));case"exercise":return Object(h.a)(rn||(rn=r.e(["Övningsuppgift"],["Övningsuppgift"])));case"task":return Object(h.a)(an||(an=r.e(["Uppgift"],["Uppgift"])));case"assignment":return Object(h.a)(sn||(sn=r.e(["Inlämningsuppgift"],["Inlämningsuppgift"])));case"theme-course":return Object(h.a)(on||(on=r.e(["Temakurs"],["Temakurs"])));case"step-course":return Object(h.a)(cn||(cn=r.e(["Stegkurs"],["Stegkurs"])));case"intro-tab":return Object(h.a)(ln||(ln=r.e(["Introduktionsflik"],["Introduktionsflik"])));case"run-up-tab":return Object(h.a)(un||(un=r.e(["Upptakt"],["Upptakt"])));case"subject-tab":return Object(h.a)(dn||(dn=r.e(["Ämnesflik"],["Ämnesflik"])));case"mission-tab":return Object(h.a)(mn||(mn=r.e(["Uppdragsflik"],["Uppdragsflik"])));case"content-tab":return Object(h.a)(pn||(pn=r.e(["Innehållsflik"],["Innehållsflik"])));case"teacher-tab":return Object(h.a)(fn||(fn=r.e(["Lärarsida"],["Lärarsida"])));default:return""+e}}},Yn=n(17);function Hn(e){var t=e.delta,n=e.editable,a=e.onDelete,i=t.targetName&&Object(h.l)(t.targetName,80),o=["schoolCourse"];t.$meta&&o.push("entitymeta-"+t.$meta);var c=Object(h.d)(Gn.entityTypes[t.table]||t.table),l=Object.keys(t.data).map(function(e){return{propSpec:Gn.propertyNames[e],prop:e}}),u=l.some(function(e){return!e.propSpec});return s.a.createElement("div",{className:o.join(" ")},s.a.createElement("div",{className:"align-horizontal"},n?s.a.createElement("div",{className:"horizontalItem top pull-right"},s.a.createElement("a",{className:"removeItem",onClick:a})):null,s.a.createElement("div",{className:"horizontalItem top"},i?s.a.createElement("a",null,c,' "',i,'"'):s.a.createElement("a",null,c))),l.filter(function(e){return e.propSpec}).map(function(e){var n=r.f(e.propSpec,2),a=n[0],i=n[1],o=e.prop;return s.a.createElement("div",{key:o},a===qn.Obscure?s.a.createElement("p",null,i):s.a.createElement("p",null,i,": ",Gn.getPropVal(t.data[o])))}),u?s.a.createElement("div",null,s.a.createElement("p",{title:JSON.stringify(t.data,null,4)},Object(h.a)(hn||(hn=r.e(["Ändringar i interna egenskaper"],["Ändringar i interna egenskaper"]))))):null,s.a.createElement("div",null,s.a.createElement("p",{className:"small"},Object(Yn.h)(t.dateTime)," ",t.contributors.join(", "))))}function zn(e){var t=e.delta,n=e.editable,r=e.onDelete,a=t.targetName&&Object(h.l)(t.targetName,80),i=["schoolCourse"];t.$meta&&i.push("entitymeta-"+t.$meta);var o=Gn.getModifiedLinkHeading(t);return s.a.createElement("div",{className:i.join(" ")},s.a.createElement("div",{className:"align-horizontal"},n?s.a.createElement("div",{className:"horizontalItem top pull-right"},s.a.createElement("a",{className:"removeItem",onClick:r})):null,s.a.createElement("div",{className:"horizontalItem top"},a?s.a.createElement("a",null,o,' "',a,'"'):s.a.createElement("a",null,o))),s.a.createElement("div",null,s.a.createElement("p",{className:"small"},Object(Yn.h)(t.dateTime)," ",t.contributor)))}function Kn(e){var t=e.branchId,n=e.tag,a=e.editable,i=p.c.branch(t).deltas;return n&&(i=i.tags(n)),s.a.createElement(Se.a,null,i.toValue().map(function(e){return 0===e.length?s.a.createElement("div",null,s.a.createElement("p",{style:{opacity:.5,fontStyle:"italic"}},n?Object(h.a)(gn||(gn=r.e(["Skolans version är identisk med orginalet"],["Skolans version är identisk med orginalet"]))):Object(h.a)(bn||(bn=r.e(["Det finns inga ändringar att publicera."],["Det finns inga ändringar att publicera."]))))):s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{className:"taskContainer odd-even"},e.map(function(e){var t=function(e){return"modify"===e.type?e.targetId:e.sourceId+e.label+e.targetId}(e);return"modify"===e.type?s.a.createElement(Hn,{delta:e,editable:a,key:t,onDelete:function(){c(e)}}):s.a.createElement(zn,{delta:e,editable:a,key:t,onDelete:function(){o(e)}})})),s.a.createElement("button",{className:"btn btn-large btn-warning",onClick:function(){var t,a;if(confirm(n?Object(h.a)(vn||(vn=r.e(["Åtgärden återstället kursen till standard.\n\nVill du fortsätta?"],["Åtgärden återstället kursen till standard.\\n\\nVill du fortsätta?"]))):Object(h.a)(kn||(kn=r.e(["Åtgärden raderar samtliga ändringar som ännu inte är publicerade.\n\nVill du fortsätta?"],["Åtgärden raderar samtliga ändringar som ännu inte är publicerade.\\n\\nVill du fortsätta?"])))))try{for(var s=r.h(e),i=s.next();!i.done;i=s.next()){var l=i.value;"modify"===l.type?c(l):o(l)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(a=s.return)&&a.call(s)}finally{if(t)throw t.error}}}},n?Object(h.a)(yn||(yn=r.e(["Återställ till orginalet"],["Återställ till orginalet"]))):Object(h.a)(En||(En=r.e(["Radera alla opublicerade ändringar"],["Radera alla opublicerade ändringar"])))))}));function o(e){p.c.branch(t).table(e.sourceTable).undoLink(e.sourceId,e.label,e.targetId)}function c(e){var n={};Object.keys(e.data).forEach(function(e){n[e]={$unset:0}}),p.c.branch(t).table(e.table).update({id:e.targetId,name:e.targetName},n)}}function Vn(e){var t="school-branch"===e.branchType?s.a.createElement("h2",null,Object(h.a)(wn||(wn=r.e(["Skolans ändringar"],["Skolans ändringar"])))):s.a.createElement("h3",null,Object(h.a)(Tn||(Tn=r.e(["Opublicerade ändringar"],["Opublicerade ändringar"]))));return s.a.createElement("div",{className:"ked_boxed"},t,s.a.createElement(Kn,{branchId:e.branchId,editable:!e.isAdmin,tag:"school-branch"===e.branchType?e.courseId:null}))}var $n,Wn,Zn,Qn,Jn,Xn,er,tr,nr,rr,ar,sr,ir,or,cr,lr,ur,dr,mr,pr,fr,hr,gr,br=Object(Un.a)(function(e){var t=e.school,n=e.courseId,s=e.draftId,i=e.course,o=e.branch,c=e.tabs,l=e.activeTab,u=e.editMode,d=e.history,m=e.block,k=c.filter(function(e){return e.id===l})[0]||c[0];return a.createElement(Pn.a,{right:u&&s?a.createElement("div",null,a.createElement(Vn,{isAdmin:"standard"===t,branchId:s,branchType:"draft-branch"})):a.createElement(An.a,{env:y.a,viewCourseUrl:g.a.KED_COURSE_VIEWER_URL}),rightWidth:5,left:a.createElement(a.Fragment,null,a.createElement(Rn,{school:t,course:i,branch:o,tab:k,editMode:u,draftId:s,block:m,lazyContents:k?o.courseContents.include("tasks").hasEdgesFrom([k.id]).toValue():new f.a([])}),u?a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("hr",null),a.createElement(Mn,{school:t,course:i,tab:k,activeTab:l,draftId:s,courseType:i.type,blockId:m&&m.id})):y.a.currentUser.roles.includes("ADMIN")||Object(b.e)(y.a.currentUser,t)?a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("hr",null),a.createElement(ae,null,s&&a.createElement(se,null,a.createElement("button",{className:"btn btn-large btn-warning",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,Object(Ln.a)({school:t,course:i,draftRepo:p.c.branch(s)})];case 1:return e.sent(),[4,p.c.saveNow()];case 2:return e.sent(),d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")),[2]}})})}},a.createElement("i",{className:"fa fa-lg fa-play","aria-hidden":!0})," ",Object(h.a)($n||($n=r.e(["Publicera"],["Publicera"]))))),a.createElement(Se.a,null,p.a.getBranchId(p.c.schools.name(t).single(),n).map(function(e){return a.createElement(a.Fragment,null,a.createElement(se,null,a.createElement("button",{className:"btn btn-large",onClick:e?function(){return d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")+"/drafts/"+e+"/edit")}:function(){return r.b(void 0,void 0,void 0,function(){var e,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,4,,5]),[4,p.c.schools.name(t).single().load()];case 1:return e=r.sent(),[4,Object(v.g)(e.officialBranchId+n+"draft")];case 2:return a=r.sent(),s={id:a,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[n]},p.c.branches.addRelated(e.officialBranchId,"approvedChildren",s),[4,p.c.saveNow()];case 3:return r.sent(),d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")+"/drafts/"+a+"/edit"),[3,5];case 4:return i=r.sent(),Object(h.n)(i),[3,5];case 5:return[2]}})})}},e?a.createElement(a.Fragment,null,a.createElement("i",{className:"fa fa-lg fa-pencil"})," ",s?Object(h.a)(Wn||(Wn=r.e(["Fortsätt redigera"],["Fortsätt redigera"]))):Object(h.a)(Zn||(Zn=r.e(["Redigera"],["Redigera"])))):a.createElement(a.Fragment,null,a.createElement("i",{className:"fa fa-lg fa-plus"})," ",Object(h.a)(Qn||(Qn=r.e(["Skapa skolans version av kursen"],["Skapa skolans version av kursen"])))))),s||!e?void 0:a.createElement(se,null,a.createElement("button",{className:"btn btn-large",onClick:function(){return d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")+"/drafts/"+e)}},a.createElement("i",{className:"fa fa-eye"})," ",Object(h.a)(Jn||(Jn=r.e(["Visa redigerad version"],["Visa redigerad version"]))))))})),s&&a.createElement(se,null,a.createElement("button",{className:"btn btn-large",onClick:function(){d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$"))}},a.createElement("i",{className:"fa fa-lg fa-arrow-left"})," ",Object(h.a)(Xn||(Xn=r.e(["Avsluta redigering"],["Avsluta redigering"]))))))):void 0)})}),vr=n(115),kr=n(88),yr=n(5),Er=n.n(yr),wr=n(95),Tr=function(e){var t=e.task,n=e.writeAccess,a=e.repo,i=e.contentId;return s.a.createElement("div",null,s.a.createElement("div",{className:"align-horizontal spaced"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("p",null,Object(h.a)(er||(er=r.e(["Uppgiftens namn:"],["Uppgiftens namn:"]))))),s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("input",{autoFocus:!0,type:"text",size:35,value:t.name,disabled:!n,readOnly:!n,onChange:function(e){a.tasks.update(t,{name:e.target.value})}}))),t.migratedTexts&&n&&s.a.createElement(vr.a,{task:t,course:null,updateLink:function(e,t){throw new Error("Not implemented yet")}}),s.a.createElement("div",{className:"align-horizontal spaced"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("p",null,Object(h.a)(tr||(tr=r.e(["Lärandemål:"],["Lärandemål:"]))))),s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement(Se.a,null,a.courseContents.id(i).map(function(e){if("learning-goals"!==e.type)return s.a.createElement("p",null,Object(h.a)(nr||(nr=r.e(["Ej valbart"],["Ej valbart"]))));var n=e.hasCommonLearningGoals,i=e.commonLearningGoals.map(function(e){return e.trim()}).filter(function(e){return e}).map(function(e){return{name:e,key:e}});return s.a.createElement(wr.a,{available:i,selected:t.learningGoal.split("\n"),onChange:function(e,r){n?a.tasks.update(t,{learningGoal:e.join("\n")}):a.tasks.update(t,{learningGoal:r})}})})))),s.a.createElement(s.a.Fragment,null,s.a.createElement("h2",null,Object(h.a)(rr||(rr=r.e(["Uppgiftstyp"],["Uppgiftstyp"])))),s.a.createElement(wr.a,{available:[{name:Object(h.a)(ar||(ar=r.e(["Övningsuppgift"],["Övningsuppgift"]))),key:"exercise"},{name:Object(h.a)(sr||(sr=r.e(["Uppgift"],["Uppgift"]))),key:"task"},{name:Object(h.a)(ir||(ir=r.e(["Inlämningsuppgift"],["Inlämningsuppgift"]))),key:"assignment"}],selected:[t.taskType],onChange:function(e,n){return a.tasks.update(t,{taskType:n})}}),"assignment"===t.taskType&&s.a.createElement(s.a.Fragment,null,s.a.createElement("p",null,"Inlämningsdatum"),s.a.createElement("div",{className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement(kr.a,{selected:t.deadline&&Er()(t.deadline),dateFormat:"YYYY-MM-DD",locale:"sv",popperPlacement:"bottom-start",onChange:function(e){a.tasks.update(t,{deadline:e.format("YYYY-MM-DD")})}})),s.a.createElement("div",{className:"horizontalItem top"},t.deadline&&s.a.createElement("a",{className:"deleteDate",href:"#",title:"Ta bort inlämningsdatum",onClick:function(e){e.preventDefault(),a.tasks.update(t,{deadline:null})}}))))))},Or=Object(k.a)(function(e){var t=e.school,n=e.courseId,a=e.tabId,i=e.contentId,o=e.draftId,c=e.task,l=e.repo,u=e.history;return s.a.createElement(s.a.Fragment,null,s.a.createElement("div",null,s.a.createElement("div",{className:"btn btn-warning pull-right",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return l.courseContents.removeRelated(i,"tasks",c),[4,p.c.saveNow()];case 1:return e.sent(),u.push("/"+t+"/courses/"+n+"/tabs/"+a+"/drafts/"+o+"/edit"),[2]}})})}},s.a.createElement("i",{className:"fa fa-trash","aria-hidden":!0})," ",Object(h.a)(or||(or=r.e(["Ta bort uppgiften"],["Ta bort uppgiften"])))),s.a.createElement(ae,null,s.a.createElement(se,null,s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,l.saveNow()];case 1:return e.sent(),u.push("/"+t+"/courses/"+n+"/tabs/"+(a||"$")+"/contents/"+i+"/tasks/"+c.id+"/drafts/"+o),[2]}})})}},s.a.createElement("i",{className:"fa fa-eye","aria-hidden":!0})," ",Object(h.a)(cr||(cr=r.e(["Förhandsgranska"],["Förhandsgranska"]))))),s.a.createElement(se,null,s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){return u.push("/"+t+"/courses/"+n+"/tabs/"+(a||"$")+"/drafts/"+o+"/edit"),[2]})})}},s.a.createElement("i",{className:"fa fa-arrow-left","aria-hidden":!0})," ",Object(h.a)(lr||(lr=r.e(["Återgå till fliken"],["Återgå till fliken"]))))))),s.a.createElement("br",null))}),Ir=function(e){var t=e.repo,n=e.task,a=e.writeAccess;return s.a.createElement(s.a.Fragment,null,s.a.createElement("h4",null,Object(h.a)(ur||(ur=r.e(["Introtext"],["Introtext"])))),s.a.createElement("p",{className:"subHeader"},"(Skriv en introduktion till uppgiften)"),s.a.createElement(de.a,{actions:["bold","italic","underline","link","image"],defaultActions:me.a,readOnly:!a,html:n.content||"",onChange:function(e){return t.tasks.update(n,{content:e})}}))},Nr={exercise:Object(h.a)(dr||(dr=r.e(["Övningsuppgift"],["Övningsuppgift"]))),task:Object(h.a)(mr||(mr=r.e(["Uppgift"],["Uppgift"]))),assignment:Object(h.a)(pr||(pr=r.e(["Inlämningsuppgift"],["Inlämningsuppgift"])))};function jr(e){var t=e.writeAccess,n=e.task,s=e.repo;return a.createElement(a.Fragment,null,a.createElement("h4",null,Nr[n.taskType]||Object(h.a)(fr||(fr=r.e(["Uppgift"],["Uppgift"])))),a.createElement("p",{className:"subHeader"},Object(h.a)(hr||(hr=r.e(["(Skriv in en kort förklaring vad uppgiften går ut på)"],["(Skriv in en kort förklaring vad uppgiften går ut på)"])))),a.createElement(de.a,{actions:["bold","italic","underline","image"],defaultActions:me.a,readOnly:!t,html:n.description||"",onChange:function(e){s.tasks.update(n,{description:e})}}))}function Cr(e){var t=e.writeAccess,n=e.task,s=e.repo;return a.createElement(a.Fragment,null,a.createElement("h4",null,Object(h.a)(gr||(gr=r.e(["Arbetsprocess"],["Arbetsprocess"])))),a.createElement(de.a,{actions:["olist","link","image"],defaultActions:me.a,readOnly:!t,html:n.workingProcedure||"",onChange:function(e){s.tasks.update(n,{workingProcedure:e})}}))}var Sr,Dr,xr,Rr,Lr,Mr,Pr,Ar,Ur=function(e){var t=e.task,n=e.repo;return E()?t.embeddedHtml?s.a.createElement("div",null,s.a.createElement("h4",null,Object(h.a)(Sr||(Sr=r.e(["Inbäddat material"],["Inbäddat material"])))),s.a.createElement("p",null,Object(h.a)(Dr||(Dr=r.e(["Klipp in HTML kod nedan"],["Klipp in HTML kod nedan"])))),s.a.createElement("textarea",{style:{width:"100%",height:"100px"},value:t.embeddedHtml,onChange:function(e){return n.tasks.update(t,{embeddedHtml:e.target.value})}})):s.a.createElement("div",null,s.a.createElement("button",{className:"btn",onClick:function(){return n.tasks.update(t,{embeddedHtml:" "})}},s.a.createElement("i",{className:"fa fa-code","aria-hidden":!0})," ",Object(h.a)(xr||(xr=r.e(["Lägg till inbäddat material"],["Lägg till inbäddat material"])))),s.a.createElement("br",null),s.a.createElement("br",null)):s.a.createElement("div",null)},_r=function(e){var t=e.repo,n=e.courseId,r=e.draftId,a=e.tabId,i=e.contentId,o=e.writeAccess,c=e.task,l=e.school;return s.a.createElement(s.a.Fragment,null,s.a.createElement(Tr,{repo:t,task:c,writeAccess:o,contentId:i}),s.a.createElement(Ir,{repo:t,task:c,writeAccess:o}),s.a.createElement(jr,{writeAccess:o,task:c,repo:t}),s.a.createElement(Cr,{writeAccess:o,task:c,repo:t}),s.a.createElement(Ur,{writeAccess:o,task:c,repo:t}),s.a.createElement(Or,{repo:t,task:c,courseId:n,draftId:r,tabId:a,contentId:i,school:l}))},Fr=n(56),Br=n(103),qr=function(e){var t=e.repo,n=e.task,a=e.tabIds,i=e.uncoveredIds,o=e.blockId;return s.a.createElement(Se.a,null,o?t.courseBlocks.include("abilities","centralContent","knowledgeRequirements").id(o).map(function(e){return s.a.createElement("div",null,s.a.createElement(Gr,r.a({},{repo:t,task:n,uncoveredIds:i,tabOrBlock:e})))}):t.courseTabs.include("abilities","centralContent","knowledgeRequirements").ids(a).toValue().map(function(e){return s.a.createElement("div",null,e.map(function(a){return s.a.createElement("div",{key:a.id},1===e.length?void 0:s.a.createElement("h1",null,a.subject.subjectName),s.a.createElement(Gr,r.a({},{repo:t,task:n,uncoveredIds:i,tabOrBlock:a})))}))}))},Gr=function(e){var t=e.tabOrBlock,n=e.repo,a=e.task,i=e.uncoveredIds;return s.a.createElement(Se.a,null,Object(Fr.b)(t).map(function(e){return s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("h3",null,Object(h.a)(Rr||(Rr=r.e(["Välj kunskapskrav"],["Välj kunskapskrav"])))),s.a.createElement("p",null,Object(h.a)(Lr||(Lr=r.e(["Markera de kunskapskrav som din uppgift täcker."],["Markera de kunskapskrav som din uppgift täcker."])))),s.a.createElement(In.a,{knowledgeRequirements:e.knowledgeRequirements,markedIds:a.knowledgeRequirements.map(function(e){return e.id}),explainedRequirements:a.explainedRequirements||{},idsToMarkNotOk:i,markMode:!0,migratedIds:a&&a.migratedTexts&&a.migratedTexts.knowledgeRequirements,onExplainedRequirementsChanged:function(e,t){var s;return n.tasks.update(a,{explainedRequirements:r.a({},a.explainedRequirements,(s={},s[e]=t,s))})},onMarkChanged:function(t,r){var s=e.knowledgeRequirements.filter(function(e){return e.id===t})[0];r?n.tasks.addRelated(a.id,"knowledgeRequirements",s):n.tasks.removeRelated(a.id,"knowledgeRequirements",s)}})),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement(Sn.a,{title:Object(h.a)(Mr||(Mr=r.e(["Välj förmågor"],["Välj förmågor"]))),options:e.abilities,markedIds:a.abilities.map(function(e){return e.id}),markMode:!0,migratedIds:a&&a.migratedTexts&&a.migratedTexts.abilities,onMarkChanged:function(t,r){var s=e.abilities.filter(function(e){return e.id===t})[0];r?n.tasks.addRelated(a.id,"abilities",s):n.tasks.removeRelated(a.id,"abilities",s)}})),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement(Sn.a,{title:Object(h.a)(Pr||(Pr=r.e(["Välj centralt innehåll"],["Välj centralt innehåll"]))),options:e.centralContent,markedIds:a.centralContent.map(function(e){return e.id}),markMode:!0,migratedIds:a&&a.migratedTexts&&a.migratedTexts.centralContent,onMarkChanged:function(t,r){var s=e.centralContent.filter(function(e){return e.id===t})[0];r?n.tasks.addRelated(a.id,"centralContent",s):n.tasks.removeRelated(a.id,"centralContent",s)}})),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement(Cn.a,{className:"larger",title:s.a.createElement("p",null,Object(h.a)(Ar||(Ar=r.e(["Välj framtidsförmågor"],["Välj framtidsförmågor"]))))},s.a.createElement("br",null),s.a.createElement(wr.a,{available:Br.a.map(function(e){return{name:e,key:e}}),selected:a.futureAbilities,onChange:function(e){return n.tasks.update(a,{futureAbilities:e})}}))))}))},Yr=n(64),Hr=n(54),zr=Object(m.b)(function(e){var t=e.school,n=e.courseId,a=e.activeTab,i=e.draftId,o=e.branch,c=e.contentId,l=e.taskId,u=e.blockId;return o.tasks.include("abilities","centralContent","knowledgeRequirements").includeIdsOnly().hasEdgesFrom([c]).toValue().combineLatest(o.courseTabs.include("abilities","centralContent","knowledgeRequirements").includeIdsOnly().id(a)).switchMap(function(e){var d=r.f(e,2),m=d[0],p=d[1],f=m.filter(function(e){return e.id===l})[0],h=Object(Hr.a)([p],m);return Object(Fr.b)(f).map(function(e){return s.a.createElement(Pn.a,{left:s.a.createElement(qr,{repo:o,task:e,uncoveredIds:h,tabIds:[a],blockId:u}),right:s.a.createElement(_r,{repo:o,school:t,courseId:n,draftId:i,tabId:a,contentId:c,writeAccess:Object(Yr.a)(t),task:e}),rightWidth:6})})})}),Kr=n(13);function Vr(e,t){return p.c.schools.name(e).single().switchMap(function(e){return p.c.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).first()})}var $r,Wr,Zr,Qr,Jr,Xr,ea,ta,na,ra,aa=function(e){function t(t){var n=e.call(this,t)||this;return n.state={open:!1},n}return r.c(t,e),t.prototype.open=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.setState({open:!0}),this.state.schools?[3,2]:[4,p.c.schools.tags("primary").map(function(e){var t=e.id,n=e.name;return{id:t,name:n,displayName:e.displayName||n||"<namnlös>"}}).toValue().load()];case 1:e=t.sent(),this.setState({schools:e}),t.label=2;case 2:return[2]}})})},t.prototype.close=function(){this.setState({open:!1})},t.prototype.selectSchool=function(e){return r.b(this,void 0,void 0,function(){function t(){return r.b(this,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return(n=l)?[4,Vr(e,o).load()]:[3,2];case 1:n=r.sent(),r.label=2;case 2:return t=n,d&&u&&t&&(Object(b.d)(y.a.currentUser,e)||m)?[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")+"/contents/"+u+"/tasks/"+d+"/drafts/"+t+"/edit"]:d?[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")+"/tasks/"+d]:t&&(Object(b.d)(y.a.currentUser,e)||m)?[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")+"/drafts/"+t+"/edit"]:[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")]}})})}var n,a,s,i,o,c,l,u,d,m,p,f;return r.d(this,function(r){switch(r.label){case 0:return n=this.props,a=n.match,s=n.history,i=a.params,o=i.courseId,c=i.tabId,l=i.draftId,u=i.contentId,d=i.taskId,m=y.a.currentUser.roles.includes("ADMIN")||location.search.includes("role="),e===this.props.school?[3,2]:[4,t()];case 1:p=r.sent(),m?(f=Object(b.f)(location.pathname,"standard"===e?{role:void 0,school:e}:{role:"EMPLOYEE",school:e}),location.href=f+"#"+p):s.push(p),r.label=2;case 2:return this.close(),[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.school,a=t.draftId,i=t.displayName,o=this.state,c=o.open,l=o.schools;return s.a.createElement("div",{tabIndex:1,style:{outline:0},onBlur:function(){return e.close()}},c?l?s.a.createElement(s.a.Fragment,null,s.a.createElement("h5",{onClick:function(){return e.close()}},Object(h.a)(Zr||(Zr=r.e(["Växla skola"],["Växla skola"])))),s.a.createElement("ul",null,s.a.createElement("li",{onClick:function(){return e.selectSchool("standard")}},Object(h.a)(Qr||(Qr=r.e(["Standard"],["Standard"])))),l.filter(function(e){return"standard"!==e.name}).sort(function(e,t){return e.displayName.localeCompare(t.displayName,["sv","en"])}).map(function(t){var n=t.id,r=t.name,a=t.displayName;return s.a.createElement("li",{key:n,onClick:function(){return e.selectSchool(r)}},a)}))):s.a.createElement(Kr.a,null):s.a.createElement(s.a.Fragment,null,s.a.createElement("h5",{onClick:function(){return e.open()}},"standard"!==n?i||n:Object(h.a)($r||($r=r.e(["Standard"],["Standard"])))),a&&s.a.createElement("p",{className:"pageSideText"},Object(h.a)(Wr||(Wr=r.e(["Arbetsversion"],["Arbetsversion"]))))))},t}(s.a.Component),sa=Object(k.a)(aa),ia=n(118),oa=n(91),ca=n(92),la=n(93),ua=function(e){var t=e.title,n=e.selectedFAs;return s.a.createElement(Cn.a,{title:s.a.createElement("p",null,t),className:"larger"},s.a.createElement("div",{className:"abilityList"},n.map(function(e){return s.a.createElement("div",{key:e,className:"contentPart"},s.a.createElement("div",{className:"contentText"},s.a.createElement("p",null,e)))})))},da=function(e){var t=e.school,n=e.task,a=e.courseId,i=e.abilities,o=e.centralContent,c=e.requirements,l=e.futureAbilities,u=n.deadline&&Er()(n.deadline).endOf("day")<Er()();return s.a.createElement("div",null,s.a.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},s.a.createElement("div",{className:"sv-text-portlet-content"},s.a.createElement("h1",{className:"h1"},n.name))),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},n.content&&s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.content}}))),n.description&&s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement("div",{className:["ked_boxed","taskBox",n.taskType].join(" "),style:{clear:"both"}},s.a.createElement("h2",null,Nr[n.taskType]||Object(h.a)(Jr||(Jr=r.e(["Uppgift"],["Uppgift"])))),s.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.description}}))),n.workingProcedure&&s.a.createElement("div",null,s.a.createElement("h3",{className:"h3"},Object(h.a)(Xr||(Xr=r.e(["Arbetsprocess"],["Arbetsprocess"])))),s.a.createElement("div",{className:"rich-text-readonly",dangerouslySetInnerHTML:{__html:n.workingProcedure}})),n.embeddedHtml&&s.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.embeddedHtml}}),s.a.createElement("br",null),"assignment"===n.taskType?s.a.createElement(s.a.Fragment,null,s.a.createElement("h2",null,"Inlämningsuppgift"),Object(Yr.a)(t)?s.a.createElement("p",null,"Här kan du som lärare se elevernas inlämnade arbeten."):Object(Yr.a)()?s.a.createElement("p",null,Object(h.a)(ea||(ea=r.e(["Detta är en inlämningsuppgift med inlämningsdatum ",""],["Detta är en inlämningsuppgift med inlämningsdatum ",""])),Er()(n.deadline).format("YYYY-MM-DD"))):s.a.createElement(s.a.Fragment,null,s.a.createElement("p",null,". Lämna in ditt arbete som en pdf, doc eller odt fil genom att dra det till fältet under."),n.deadline?s.a.createElement("p",null,s.a.createElement("b",null,"Den här uppgiften ",u?"skulle varit inlämnad ":"skall vara inlämnad ",Er()(n.deadline).format("YYYY-MM-DD"))):void 0),s.a.createElement(ia.a,{courseId:a,taskId:n.id,school:t}),s.a.createElement("br",null)):void 0,s.a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},i.length>0?s.a.createElement(oa.a,{title:"Den här uppgiften behandlar följande förmågor",className:"larger",headerOpen:!1,abilities:i}):null,o.length>0?s.a.createElement(ca.a,{title:"Den här uppgiften behandlar följande centrala innehåll",className:"larger",headerOpen:!1,centralContent:o}):null,c.length>0?s.a.createElement(la.a,{title:"I den här uppgiften bedöms följande kunskapskrav",className:"larger",headerOpen:!0,requirements:c,explainedRequirements:n.explainedRequirements}):null,l.length>0?s.a.createElement(ua,{title:Object(h.a)(ta||(ta=r.e(["I den här uppgiften behandlas följande framtidsförmågor"],["I den här uppgiften behandlas följande framtidsförmågor"]))),selectedFAs:l}):null),s.a.createElement("hr",null),s.a.createElement("hr",null),n.resources&&n.resources.length>0&&s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement("h2",null,"Resurser kopplade till uppgiften"),s.a.createElement("div",{className:"taskContainer"},n.resources.map(function(e,t){return s.a.createElement("div",{key:t,className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("a",{href:e.url},e.name)))})),s.a.createElement("br",null)),s.a.createElement("br",null))},ma=Object(m.b)(function(e){return e.lazyRepo.map(function(t){return s.a.createElement(pa,r.a({},r.a({},e,{repo:t})))})}),pa=Object(k.a)(Object(m.b)(function(e){var t=e.school,n=e.courseId,a=e.activeTab,i=e.repo,o=e.taskId,c=e.draftId,l=e.contentId,u=e.history;return i.tasks.include("abilities","centralContent","knowledgeRequirements").id(o).map(function(e){return s.a.createElement(Pn.a,{left:s.a.createElement(Se.a,null,Object(Fr.b)(e).map(function(e){return s.a.createElement(s.a.Fragment,null,s.a.createElement(da,{school:t,task:e,courseId:n,abilities:e.abilities,centralContent:e.centralContent,requirements:e.knowledgeRequirements,futureAbilities:e.futureAbilities}),c&&l&&s.a.createElement(s.a.Fragment,null,s.a.createElement("hr",null),s.a.createElement("button",{className:"btn",onClick:function(){return u.push("/"+t+"/courses/"+n+"/tabs/"+a+"/contents/"+l+"/tasks/"+o+"/drafts/"+c+"/edit")}},s.a.createElement("i",{className:"fa fa-lg fa-pencil"})," ",Object(h.a)(na||(na=r.e(["Fortsätt redigera"],["Fortsätt redigera"]))))))})),right:s.a.createElement(An.a,{env:y.a,viewCourseUrl:g.a.KED_COURSE_VIEWER_URL}),rightWidth:5})})})),fa=Object(k.a)(function(e){var t=e.school,n=e.courseId,s=e.activeTab,i=e.draftId,o=e.editMode,c=(e.history,e.contentId),l=e.taskId,d=o?p.c:p.c.optimizeCache(),m=d.schools.name(t).single(),v=i?new f.a(d.branch(i)):m.map(function(e){return d.branch(e.officialBranchId)}),k=v.switchMap(function(e){return e.courseInstances.include("blocks","tabs").id(n)}).combineLatest(m).switchMap(function(e){var t=r.f(e,2),n=t[0],a=t[1],o=i?d.branch(i):d.branch(a.officialBranchId);return"theme-course"===n.type?new f.a({course:n,tabs:n.tabs,branch:o,block:null,schoolEntity:a}):s&&"$"!==s?o.courseBlocks.hasEdgesTo([s]).include("tabs").toValue().map(function(e){var t=r.f(e,1)[0];return{course:n,tabs:t.tabs,branch:o,block:t||n.blocks[0],schoolEntity:a}}):n.blocks.length>0?o.courseBlocks.include("tabs").id(n.blocks[0].id).map(function(e){return{course:n,tabs:e.tabs,branch:o,block:e,schoolEntity:a}}):new f.a({course:n,tabs:[],branch:o,block:null,schoolEntity:a})}),y=k.map(function(e){var n=e.course,c=e.tabs,l=e.branch,u=e.block,d=e.schoolEntity;return function(e,t,n,s,i,o,c,l,u){var d=this,m=E(),p=o.id,f=e.filter(function(e){return e.id===l})[0]||e[0];"step-course"===o.type&&f&&"step-course-tab"===f.type&&(e=e.filter(function(e){return"step-course-tab"===e.type&&e.stepNo===f.stepNo}));var v=(Object(Yr.a)()?e:e.filter(function(e){return"teacher-tab"!==e.tabClass})).sort(Object(h.g)("order")).map(function(e){return{key:e.id,name:e.tabTitle,draggable:!0,link:t?"/"+n+"/courses/"+p+"/tabs/"+e.id+(i?"/drafts/"+i:"")+"/edit":"/"+n+"/courses/"+p+"/tabs/"+e.id+(i?"/drafts/"+i:"")}}),k=[];if(t&&(m||o.allowAddTabs))if("theme-course"===o.type)k.push(a.createElement(ee,{type:"theme-course-tab",key:"$addTab",school:n,course:o,branch:c,draftId:i}));else{var y=f?f.stepNo:u.stepNumbers[0]||1;k.push(a.createElement(ee,{type:"step-course-tab",key:"$addTab",school:n,course:o,branch:c,draftId:i,block:u,stepNo:y}))}m&&k.push(a.createElement("a",{href:Object(b.f)(g.a.KED_SUBJECT_PLANNER_ADMIN_URL,{role:void 0})+"#/admin/courses/"+p+"/settings",key:"$settings",title:Object(h.a)(ra||(ra=r.e(["Inställningar"],["Inställningar"])))},a.createElement("i",{className:"fa fa-cog","aria-hidden":!0})," "));return{title:o.name,backgroundImage:null,tabs:v,cornerBox:a.createElement(sa,{school:n,draftId:i,displayName:s.displayName||n}),buttons:k,activeTab:l||v[0]&&v[0].key,blocks:o.blocks&&o.blocks.sort(Object(h.g)("blockNo")).map(function(e){var t=e.id,r=e.name,a=e.stepNumbers;return{id:t,name:r,steps:a.map(function(e){return{isActive:f&&e===f.stepNo,stepNo:e,link:"/"+n+"/courses/"+p+"/blocks/"+t+"/steps/"+e}})}}),sortableTabs:t&&(m||o.allowReorderTabs),onTabDrop:function(t,n,a){return r.b(d,void 0,void 0,function(){var s,i;return r.d(this,function(r){return(s=De(e,t,n,a))&&(i=e.find(function(e){return e.id===t}))&&c.courseTabs.update(i,{order:s}),[2]})})}}}(c,o,t,d,i,n,l,s,u)});return a.createElement(a.Fragment,null,a.createElement(u.b,{lazyProps:y}),l?o?a.createElement(Se.a,null,k.map(function(e){var r=e.branch,o=e.block;e.course,e.tabs;return a.createElement(zr,{school:t,courseId:n,draftId:i,branch:r,activeTab:s,contentId:c,taskId:l,blockId:o&&o.id})})):a.createElement(ma,{school:t,courseId:n,lazyRepo:v,activeTab:s,taskId:l,contentId:c,draftId:i}):a.createElement(Se.a,null,k.map(function(e){var r=e.branch,c=e.block,l=e.course,u=e.tabs;return a.createElement(br,{school:t,courseId:n,draftId:i,course:l,branch:r,tabs:u,activeTab:s,editMode:o,block:c})})))});var ha,ga,ba,va,ka=n(107),ya=n(136),Ea=function(e){var t=e.title,n=e.courses;return s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("h3",null,t),s.a.createElement("div",{className:"taskContainer odd-even"},n.map(function(e){var t=e.id,n=e.name,r=e.description,a=e.tags;return s.a.createElement(ae,null,s.a.createElement(se,null,s.a.createElement("div",{className:"studentCourse"},s.a.createElement(ya.a,{to:"/courses/"+t},n),s.a.createElement("p",{className:"small"},r))),a.includes("active")?void 0:s.a.createElement(se,null,s.a.createElement("div",{className:"pill incomplete"},"Inaktiv")))})))},wa=Object(m.b)(function(e){return(e.showInactive?Object(ka.a)():Object(ka.a)().tags("active")).orderBy("name").map(function(e){var t=e.id,n=e.name,r=e.type,a=e.description;return{id:t,name:n,type:r,tags:e.tags,description:a,url:"/courses/"+t}}).groupBy("type").map(function(e){return{themeCourses:e["theme-course"],stepCourses:e["step-course"]}}).map(function(e){var t=e.themeCourses,n=e.stepCourses;return s.a.createElement(s.a.Fragment,null,t&&s.a.createElement(Ea,{title:Object(h.a)(ha||(ha=r.e(["Temakurser"],["Temakurser"]))),courses:t}),n&&s.a.createElement(Ea,{title:Object(h.a)(ga||(ga=r.e(["Stegkurser"],["Stegkurser"]))),courses:n}))})}),Ta=function(e){var t=e.school,n=e.courseId,r=e.blockId,a=e.stepNo;return s.a.createElement(Se.a,null,p.c.optimizeCache().schools.name(t).single().map(function(e){return p.c.branch(e.officialBranchId)}).switchMap(function(e){return e.courseBlocks.include("tabs").id(r).map(function(e){var r=e.tabs.filter(function(e){return""+e.stepNo==""+a}).sort(Object(h.g)("order"))[0];return r?s.a.createElement(c.a,{to:"/"+t+"/courses/"+n+"/tabs/"+r.id}):s.a.createElement(c.a,{to:"/"+t+"/courses/"+n})})}))},Oa=function(e){var t=e.school,n=e.courseId,a=p.c.schools.name(t).single(),i=p.a.getBranchId(a,n).map(function(e){return p.c.branch(e)}),o=(a.map(function(e){return p.c.branch(e.officialBranchId)}),i.switchMap(function(e){return e.courseInstances.id(n).map(function(e){return{title:e.name,tabs:[{name:Object(h.a)(ba||(ba=r.e(["Versionshistorik"],["Versionshistorik"]))),key:"versionhistory"}],buttons:[s.a.createElement(ya.a,{to:"/"+t+"/courses/"+n,key:"$settings",title:Object(h.a)(va||(va=r.e(["Visa kursen"],["Visa kursen"])))},s.a.createElement("i",{className:"fa fa-eye","aria-hidden":!0})," ")]}})}));return s.a.createElement(s.a.Fragment,null,s.a.createElement(u.b,{lazyProps:o}),s.a.createElement(Se.a,null,a.map(function(e){e.displayName;var t=e.officialBranchId;return s.a.createElement(Vn,{branchType:"school-branch",branchId:t,courseId:n,isAdmin:!1})})))};n.d(t,"a",function(){return ja});var Ia,Na=Object(m.b)(function(e){var t=e.render;return p.b.mySchool.map(function(e){return t(e)})}),ja=function(){return a.createElement("div",{onKeyDown:function(e){83===e.which&&(e.ctrlKey||e.metaKey)&&(e.preventDefault(),p.c.saveNow().then(function(){}))}},a.createElement(i.a,null,a.createElement(a.Fragment,null,a.createElement(o.a,{path:"/",exact:!0,render:function(){return a.createElement(c.a,{to:"/courses"})}}),a.createElement(o.a,{path:"/courses",exact:!0,render:function(){return a.createElement(a.Fragment,null,a.createElement(u.a,{title:Object(h.a)(Ia||(Ia=r.e(["Kurser"],["Kurser"]))),tabs:[],activeTab:"$"}),a.createElement(Pn.a,{left:a.createElement(wa,{showInactive:!0}),right:a.createElement(An.a,{env:y.a,viewCourseUrl:g.a.KED_COURSE_VIEWER_URL}),rightWidth:5}))}}),a.createElement(o.a,{path:"/courses/:courseId",exact:!1,render:function(e){var t=e.match;return a.createElement(Na,{render:function(e){return a.createElement(c.a,{to:"/"+e.name+"/courses/"+t.params.courseId})}})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId;return a.createElement(fa,{school:n,courseId:r})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId?",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId;return a.createElement(fa,{school:n,courseId:r,activeTab:s})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/settings/:draftId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.draftId;return a.createElement(fa,{school:n,courseId:r,activeTab:"$settings",draftId:s})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/drafts/:draftId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.draftId;return a.createElement(fa,{school:n,courseId:r,activeTab:s,draftId:i})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/drafts/:draftId/edit",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.draftId;return a.createElement(fa,{school:n,courseId:r,activeTab:s,draftId:i,editMode:!0})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/tasks/:taskId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.taskId;return a.createElement(fa,{school:n,courseId:r,activeTab:s,taskId:i,editMode:!1})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/contents/:contentId/tasks/:taskId/drafts/:draftId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.taskId,o=t.draftId,c=t.contentId;return a.createElement(fa,{school:n,courseId:r,activeTab:s,taskId:i,contentId:c,draftId:o,editMode:!1})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/contents/:contentId/tasks/:taskId/drafts/:draftId/edit",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.contentId,o=t.taskId,c=t.draftId;return a.createElement(fa,{school:n,courseId:r,activeTab:s,contentId:i,taskId:o,draftId:c,editMode:!0})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/blocks/:blockId/steps/:stepNo",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.blockId,i=t.stepNo;return a.createElement(Ta,{school:n,courseId:r,blockId:s,stepNo:i})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/history",render:function(e){var t=e.match.params,n=t.school,r=t.courseId;t.blockId,t.stepNo;return a.createElement(Oa,{school:n,courseId:r})}}),a.createElement(l.a,null),a.createElement(d.a,null))))}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(125),n(90),n(142),n(3)),s=n(0),i=n(104),o=n(131),c=n(132),l=n(150),u=n(58),d=n(9),m=n(19);Object(c.a)({v1:["css/courseviewer.css","css/dialog.css","css/grid-css-patch.css"],includeCSS:o.a,version:6,versionFolder:"css/delta-css/courseviewer"});var p=function(e){function t(t){var n=e.call(this,t)||this;return location.hash||(location.hash="#/"),n}return r.c(t,e),t.prototype.render=function(){var e=this.props.intl;return a.a.currentUser?s.createElement(m.a.Provider,{value:{intl:e}},s.createElement(l.a,null)):s.createElement(i.a,null)},t}(s.Component),f=Object(u.a)(Object(d.d)(p));t.default=f}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,