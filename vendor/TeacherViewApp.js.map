{"version":3,"file":"TeacherViewApp.js","sources":["webpack://[name]/./src/components/teacher-view/assignments-view/course-module.tsx","webpack://[name]/./src/components/teacher-view/assignments-view/course-task-not-handed-users.tsx","webpack://[name]/./src/components/teacher-view/assignments-view/course-task.tsx","webpack://[name]/./src/components/teacher-view/assignments-view/course-tasks-assignments.tsx","webpack://[name]/./src/components/teacher-view/assignments-view/filter-students-view/index.tsx","webpack://[name]/./src/components/teacher-view/assignments-view/filter-students-view/not-submitted-user-tasks.tsx","webpack://[name]/./src/components/teacher-view/assignments-view/helpers/assignments-common-functions.tsx","webpack://[name]/./src/components/teacher-view/assignments-view/helpers/email-send-hoc.tsx","webpack://[name]/./src/components/teacher-view/assignments-view/index.tsx","webpack://[name]/./src/components/teacher-view/assignments-view/task-assignment.tsx","webpack://[name]/./src/components/teacher-view/courses-view/index.tsx","webpack://[name]/./src/components/teacher-view/digest-view.tsx","webpack://[name]/./src/components/teacher-view/email-templates/index.tsx","webpack://[name]/./src/components/teacher-view/index.tsx","webpack://[name]/./src/components/teacher-view/shared/notification-icon.tsx"],"sourcesContent":["import { __assign, __read, __spread } from \"tslib\";\nimport { OpenCloseBox } from '../../utility-components/open-close-box';\nimport * as React from 'react';\nimport { CourseTask } from './course-task';\nimport { useContext } from 'react';\nimport { compareProps } from '../../../utils/utils';\nimport { LanguageContext } from '../../utility-components/LanguageContext';\nimport { NotificationIcon } from '../shared/notification-icon';\nimport { StateContext } from '../digest-view';\nimport { AssignmentsContext } from '.';\nexport var CourseModuleView = (function (_a) {\n    var module = _a.module, tasks = _a.tasks;\n    var intl = useContext(LanguageContext).intl;\n    var _b = useContext(StateContext), notificationdigests = _b.notificationdigests, selectedCourse = _b.selectedCourse;\n    var _c = useContext(AssignmentsContext), filterStudyGroups = _c.filterStudyGroups, tuitionStudents = _c.tuitionStudents;\n    var getNotSubmittedUsers = function (taskAssignments) {\n        var taskNotSubmittedUsers = [];\n        // get students from the course study groups who have't uploaded their assignments\n        var studyGroups = filterStudyGroups.length > 0 ? selectedCourse.studyGroups.filter(function (sg) { return filterStudyGroups.includes(sg); }) : selectedCourse.studyGroups;\n        studyGroups.forEach(function (group) {\n            var users = tuitionStudents &&\n                tuitionStudents.filter(function (cs) { return cs.tuitionGroupName === group &&\n                    !taskAssignments.find(function (f) { return f.user === cs.studentEmailAddress; })\n                    && !taskNotSubmittedUsers.find(function (nsu) { return nsu.email === cs.studentEmailAddress; }); })\n                    .map(function (ns) { return { displayName: ns.studentFirstName + \" \" + ns.studentLastName, email: ns.studentEmailAddress }; });\n            if (users) {\n                taskNotSubmittedUsers.push.apply(taskNotSubmittedUsers, __spread(users));\n            }\n        });\n        //sort by lastname - firstname\n        return taskNotSubmittedUsers.map(function (s) {\n            var _a = __read(s.displayName.split(' ')), firstName = _a[0], rest = _a.slice(1);\n            return __assign(__assign({}, s), { firstName: firstName, lastName: rest.join(' ') });\n        }).sort(compareProps([\"lastName\", \"firstName\"]));\n    };\n    var courseNotifications = notificationdigests[selectedCourse.id];\n    return tasks && tasks.length > 0 &&\n        React.createElement(React.Fragment, null,\n            React.createElement(OpenCloseBox, { title: React.createElement(\"div\", { className: \"notification-container\" },\n                    React.createElement(\"span\", null, module.name),\n                    React.createElement(NotificationIcon, { course: selectedCourse, entity: 'module', moduleId: module.id, notificationdigests: notificationdigests })), headerOpen: false }, courseNotifications && Object.keys(courseNotifications).length > 0 ? React.createElement(\"div\", null, tasks.map(function (task) {\n                var taskAssignments = courseNotifications[task.id] ? courseNotifications[task.id].map(function (t) { return t.assignment; }) : [];\n                var notSubmittedUsers = selectedCourse.studyGroups && selectedCourse.studyGroups.length > 0 && getNotSubmittedUsers(taskAssignments);\n                var displayTask = notSubmittedUsers && notSubmittedUsers.length > 0 || taskAssignments && taskAssignments.length > 0;\n                return displayTask &&\n                    React.createElement(CourseTask, { key: task.id, task: task, module: module, assignments: taskAssignments, notSubmittedUsers: notSubmittedUsers });\n            })) :\n                React.createElement(\"div\", null, intl.formatMessage({ id: \"teacherView.noUploadedAssignmentsForModule\", defaultMessage: \"No assignments have been uploaded for this module\" }))));\n});\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport { LanguageContext } from '../../utility-components/LanguageContext';\nimport { showError } from '../../../utils/utils';\nimport { StateContext } from '../digest-view';\nimport { Spinner } from '../../course-builder/sub-components/spinner';\nimport { setupEmail } from './helpers/email-send-hoc';\nimport { preserveImpersonationQuery } from '../../../access-control';\nimport { getBaseCourseViewerEmailUrl } from './helpers/assignments-common-functions';\nexport var CourseTaskNotHandedUserList = setupEmail((function (_a) {\n    var notSubmittedUsers = _a.notSubmittedUsers, moduleName = _a.moduleName, task = _a.task, setEmailInfo = _a.setEmailInfo, emailInfo = _a.emailInfo, sendReminder = _a.sendReminder;\n    var intl = useContext(LanguageContext).intl;\n    var _b = useContext(StateContext), selectedCourse = _b.selectedCourse, courseViewerUrl = _b.courseViewerUrl;\n    var notSubmittedLength = notSubmittedUsers && notSubmittedUsers.length;\n    return !notSubmittedUsers || notSubmittedUsers.length === 0 ? null : React.createElement(\"div\", { className: \"not-submitted-users taskContainer\" },\n        React.createElement(\"h4\", null, intl.formatMessage({ id: \"teacherView.notSubmittedAssignments\", defaultMessage: \"Ej l채mnat in\" })),\n        notSubmittedUsers.map(function (ns, index) {\n            return React.createElement(\"div\", { key: \"notHandedIn_\" + index, className: \"align-horizontal student-row\" + (notSubmittedLength === index + 1 ? \" last\" : \"\") },\n                React.createElement(\"div\", { className: \"horizontalItem top pull-right\", onClick: function () {\n                        var baseUrl = preserveImpersonationQuery(courseViewerUrl, { courseId: selectedCourse.id, });\n                        setEmailInfo({\n                            sendTo: { email: ns.email, firstName: ns.firstName, lastName: ns.lastName },\n                            courseName: selectedCourse.name,\n                            moduleName: moduleName,\n                            taskName: task.name,\n                            taskId: task.id,\n                            taskDeadline: task.deadline,\n                            courseTaskUrl: getBaseCourseViewerEmailUrl(courseViewerUrl) + \"?courseId=\" + selectedCourse.id + \"&module=\" + moduleName + \"&taskId=\" + task.id\n                        });\n                    } },\n                    React.createElement(\"div\", { className: \"checkBox\" + (emailInfo.data.find(function (su) { return su.sendTo.email === ns.email; }) ? \" checked\" : \"\") })),\n                React.createElement(\"div\", { className: \"horizontalItem top\" }, ns.displayName));\n        }),\n        React.createElement(\"div\", { className: \"align-horizontal remind-assignment\" },\n            React.createElement(\"div\", { className: \"horizontalItem top pull-right\" },\n                React.createElement(\"button\", { className: \"btn btn-info\" + (emailInfo.emailSendInProgress ? \" disabled\" : \"\"), disabled: emailInfo.emailSendInProgress, onClick: function () {\n                        if (emailInfo.data.length > 0) {\n                            sendReminder();\n                        }\n                        else {\n                            showError(intl.formatMessage({ id: \"teacherView.sendEmailAtLeastOneRecipientErr\", defaultMessage: \"At least one student should be selected\" }));\n                        }\n                    } }, emailInfo.emailSendInProgress ?\n                    React.createElement(React.Fragment, null,\n                        React.createElement(Spinner, null),\n                        intl.formatMessage({ id: \"teacherView.emailReminderInProgress\", defaultMessage: \"P책g책ende\" }))\n                    :\n                        React.createElement(React.Fragment, null, intl.formatMessage({ id: \"teacherView.remindBtn\", defaultMessage: \"P책minn\" }))))));\n}));\n","import { __awaiter, __generator } from \"tslib\";\nimport * as React from 'react';\nimport { OpenCloseBox } from '../../utility-components/open-close-box';\nimport { CourseTaskAssignments } from './course-tasks-assignments';\nimport { CourseTaskNotHandedUserList } from './course-task-not-handed-users';\nimport { NotificationIcon } from '../shared/notification-icon';\nimport { createUUID, simpleDigest } from 'kedbackend/client';\nimport { db } from '../../../globals/db';\nimport { env } from '../../../globals/KED.env';\nimport { StateContext } from '../digest-view';\nexport var CourseTask = (function (_a) {\n    var task = _a.task, assignments = _a.assignments, notSubmittedUsers = _a.notSubmittedUsers, module = _a.module;\n    var _b = React.useContext(StateContext), notificationdigests = _b.notificationdigests, selectedCourse = _b.selectedCourse, seenDigestsObservable = _b.seenDigestsObservable;\n    function onTaskOpened(isOpened) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tagsDigest_1, seenDigests_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(isOpened && notificationdigests[selectedCourse.id][task.id])) return [3 /*break*/, 3];\n                        return [4 /*yield*/, simpleDigest(env.currentUser.mail + selectedCourse.id)];\n                    case 1:\n                        tagsDigest_1 = _a.sent();\n                        return [4 /*yield*/, seenDigestsObservable.load()];\n                    case 2:\n                        seenDigests_1 = _a.sent();\n                        assignments.forEach(function (assignment) { return __awaiter(_this, void 0, void 0, function () {\n                            var assignmentDigest;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, simpleDigest(assignment.user + //(studen's email address)\n                                            assignment.courseId +\n                                            assignment.taskId +\n                                            assignment.uploadDate +\n                                            (assignment.metadata.driveFileId || \"\"))];\n                                    case 1:\n                                        assignmentDigest = _a.sent();\n                                        if (!(seenDigests_1 && seenDigests_1.find(function (a) { return a.digest === assignmentDigest; }))) {\n                                            db.seenStudentAssignments.add({\n                                                id: createUUID(),\n                                                tags: [tagsDigest_1],\n                                                digest: assignmentDigest\n                                            });\n                                        }\n                                        return [2 /*return*/];\n                                }\n                            });\n                        }); });\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    }\n    return React.createElement(OpenCloseBox, { onOpenClose: function (becameOpen) { return onTaskOpened(becameOpen); }, className: \"task-container\", title: React.createElement(\"div\", { className: \"notification-container\" },\n            React.createElement(\"span\", null, task.name),\n            React.createElement(NotificationIcon, { course: selectedCourse, entity: 'task', taskId: task.id, notificationdigests: notificationdigests })), headerOpen: false },\n        React.createElement(\"div\", { className: \"ked_boxed\" },\n            React.createElement(CourseTaskAssignments, { task: task, assignments: assignments, checkWithUrkund: task.sendToUrkund === undefined ? true : task.sendToUrkund }),\n            React.createElement(\"br\", null),\n            React.createElement(CourseTaskNotHandedUserList, { notSubmittedUsers: notSubmittedUsers, moduleName: module.name, task: task })));\n});\n","import * as React from 'react';\nimport { TaskAssignment } from './task-assignment';\nimport { LanguageContext } from '../../utility-components/LanguageContext';\nimport { useContext } from 'react';\nimport { AssignmentsContext } from '.';\nimport { setupAssignments } from './helpers/assignments-common-functions';\nexport var CourseTaskAssignments = (function (_a) {\n    var assignments = _a.assignments, checkWithUrkund = _a.checkWithUrkund, task = _a.task;\n    var intl = useContext(LanguageContext).intl;\n    var _b = React.useContext(AssignmentsContext), filterStudyGroups = _b.filterStudyGroups, tuitionStudents = _b.tuitionStudents;\n    var filteredAssignments = setupAssignments(assignments, filterStudyGroups, tuitionStudents, checkWithUrkund);\n    return filteredAssignments.length > 0 ? React.createElement(\"table\", { className: \"task-assignments-table\" },\n        React.createElement(\"thead\", null,\n            React.createElement(\"tr\", null,\n                React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentStudentName\", defaultMessage: \"Elev\" })),\n                React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentFileName\", defaultMessage: \"Filnamn\" })),\n                React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentSubmittedAt\", defaultMessage: \"Inlamnat\" })),\n                React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentReport\", defaultMessage: \"Rapport\" })),\n                React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentGrade\", defaultMessage: \"Niva\" })))),\n        React.createElement(\"tbody\", null, filteredAssignments.map(function (assignment) {\n            return React.createElement(TaskAssignment, { task: task, key: assignment.uploadDate, assignment: assignment, shouldGetUrkundStatus: assignment.shouldRefresh });\n        })))\n        :\n            React.createElement(\"div\", null, intl.formatMessage({ id: \"teacherView.noTaskAssignments\", defaultMessage: \"Inga uppdrag uppladdade f철r denna uppgift\" }));\n});\n","import { __read, __spread } from \"tslib\";\nimport * as React from 'react';\nimport { LanguageContext } from '../../../utility-components/LanguageContext';\nimport { StateContext } from '../../digest-view';\nimport { TaskAssignment } from '../task-assignment';\nimport { useContext } from 'react';\nimport { flatten } from '../../../../utils/utils';\nimport { AssignmentsContext } from '..';\nimport { setupAssignments } from '../helpers/assignments-common-functions';\nimport { NotSubmittedUserTasks } from './not-submitted-user-tasks';\nexport var FilteredStudentView = ((function (_a) {\n    var selectedUser = _a.selectedUser;\n    var intl = React.useContext(LanguageContext).intl;\n    var _b = useContext(StateContext), tasks = _b.tasks, selectedCourse = _b.selectedCourse, notificationdigests = _b.notificationdigests;\n    var _c = useContext(AssignmentsContext), filterStudyGroups = _c.filterStudyGroups, tuitionStudents = _c.tuitionStudents;\n    var moduleTasks = {};\n    //get all tasks for all modules for the current course\n    selectedCourse.modules.map(function (m) { return moduleTasks[m.name] = __spread(tasks.filter(function (t) { return m.taskIds.find(function (tId) { return tId === t.id; }); })); });\n    var userTasks = flatten(Object.keys(moduleTasks).map(function (moduleKey) { return moduleTasks[moduleKey]; }));\n    //use the initial notification object to retrieve assignments\n    var courseNotifications = notificationdigests[selectedCourse.id];\n    var notHandedModuleTasks = {};\n    Object.keys(moduleTasks).map(function (utm) { return (notHandedModuleTasks[utm] = moduleTasks[utm].filter(function (task) { return !courseNotifications[task.id] || !courseNotifications[task.id].find(function (ct) { return ct.assignment.user === selectedUser; }); })); });\n    var filteredAssignments = userTasks.map(function (task) {\n        if (courseNotifications[task.id]) {\n            var taskAssignments = courseNotifications[task.id].filter(function (t) { return t.assignment.user === selectedUser; }).map(function (t) { return t.assignment; });\n            return { task: task, assignments: setupAssignments(taskAssignments, filterStudyGroups, tuitionStudents, task.sendToUrkund) };\n        }\n        return { task: null, assignments: [] };\n    });\n    var currentUserObj = tuitionStudents.find(function (a) { return a.studentEmailAddress === selectedUser; });\n    return React.createElement(\"div\", { className: \"filtered-view task-container\" },\n        React.createElement(\"div\", { className: \"ked_boxed\" },\n            filteredAssignments && filteredAssignments.filter(function (obj) { return obj.assignments.length > 0; }).length > 0 &&\n                React.createElement(\"table\", { className: \"task-assignments-table\" },\n                    React.createElement(\"thead\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentTaskName\", defaultMessage: \"Uppgift\" })),\n                            React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentFileName\", defaultMessage: \"Filnamn\" })),\n                            React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentSubmittedAt\", defaultMessage: \"Inlamnat\" })),\n                            React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentReport\", defaultMessage: \"Rapport\" })),\n                            React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentGrade\", defaultMessage: \"Niva\" })))),\n                    React.createElement(\"tbody\", null, filteredAssignments.map(function (obj) {\n                        return obj.assignments && obj.assignments.map(function (assignment) {\n                            return React.createElement(TaskAssignment, { studentView: true, task: obj.task, key: assignment.uploadDate, assignment: assignment, shouldGetUrkundStatus: assignment.shouldRefresh });\n                        });\n                    }))),\n            React.createElement(\"br\", null),\n            React.createElement(NotSubmittedUserTasks, { notHandedInModuleTasks: notHandedModuleTasks, selectedUser: currentUserObj })));\n}));\n","import * as React from 'react';\nimport { useContext } from 'react';\nimport { LanguageContext } from '../../../utility-components/LanguageContext';\nimport { maxLength, showError } from '../../../../utils/utils';\nimport { StateContext } from '../../digest-view';\nimport { setupEmail } from '../helpers/email-send-hoc';\nimport { Spinner } from '../../../course-builder/sub-components/spinner';\nimport { getBaseCourseViewerEmailUrl } from '../helpers/assignments-common-functions';\nexport var NotSubmittedUserTasks = setupEmail((function (_a) {\n    var notHandedInModuleTasks = _a.notHandedInModuleTasks, selectedUser = _a.selectedUser, emailInfo = _a.emailInfo, setEmailInfo = _a.setEmailInfo, sendReminder = _a.sendReminder;\n    var intl = useContext(LanguageContext).intl;\n    var _b = useContext(StateContext), selectedCourse = _b.selectedCourse, courseViewerUrl = _b.courseViewerUrl;\n    return React.createElement(React.Fragment, null,\n        React.createElement(\"table\", { className: \"task-assignments-table not-submitted\" },\n            React.createElement(\"thead\", null,\n                React.createElement(\"tr\", null,\n                    React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentTaskName\", defaultMessage: \"Uppgift\" })),\n                    React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentTaskDescription\", defaultMessage: \"Description\" })),\n                    React.createElement(\"th\", null, intl.formatMessage({ id: \"teacherView.assignmentTaskDeadline\", defaultMessage: \"Deadline\" })),\n                    React.createElement(\"th\", null))),\n            React.createElement(\"tbody\", null, Object.keys(notHandedInModuleTasks).map(function (moduleTask) {\n                return notHandedInModuleTasks[moduleTask].map(function (task) {\n                    return React.createElement(\"tr\", { key: task.name },\n                        React.createElement(\"td\", null, task.name),\n                        React.createElement(\"td\", null, task.content ? maxLength(task.content, 32) : \"\"),\n                        React.createElement(\"td\", null, task.deadline),\n                        React.createElement(\"td\", { onClick: function () {\n                                setEmailInfo({\n                                    sendTo: { email: selectedUser.studentEmailAddress, firstName: selectedUser.studentFirstName, lastName: selectedUser.studentLastName },\n                                    courseName: selectedCourse.name,\n                                    moduleName: moduleTask,\n                                    taskName: task.name,\n                                    taskId: task.id,\n                                    taskDeadline: task.deadline,\n                                    courseTaskUrl: getBaseCourseViewerEmailUrl(courseViewerUrl) + \"?courseId=\" + selectedCourse.id + \"&module=\" + moduleTask + \"&taskId=\" + task.id\n                                });\n                            } },\n                            React.createElement(\"div\", { className: \"checkBox\" + (emailInfo.data.find(function (t) { return t.taskName === task.name; }) ? \" checked\" : \"\") })));\n                });\n            }))),\n        React.createElement(\"div\", { className: \"not-submitted-users taskContainer\" },\n            React.createElement(\"div\", { className: \"align-horizontal remind-assignment\" },\n                React.createElement(\"div\", { className: \"horizontalItem top pull-right\" },\n                    React.createElement(\"button\", { className: \"btn\", disabled: emailInfo.emailSendInProgress, onClick: function () {\n                            if (emailInfo.data.length > 0) {\n                                sendReminder();\n                            }\n                            else {\n                                showError(intl.formatMessage({ id: \"teacherView.sendEmailAtLeastOneRecipientErr\", defaultMessage: \"At least one student should be selected\" }));\n                            }\n                        } }, emailInfo.emailSendInProgress ?\n                        React.createElement(React.Fragment, null,\n                            React.createElement(Spinner, null),\n                            intl.formatMessage({ id: \"teacherView.emailReminderInProgress\", defaultMessage: \"P책g책ende\" }))\n                        :\n                            React.createElement(React.Fragment, null, intl.formatMessage({ id: \"teacherView.remindBtn\", defaultMessage: \"P책minn\" })))))));\n}));\n","import moment from 'moment';\nimport { flatten } from '../../../../utils/utils';\nexport var setupAssignments = function (assignments, filterStudyGroups, tuitionStudents, checkWithUrkund) {\n    var refreshableAssigments = Object.assign([], assignments);\n    var studyGroups = filterStudyGroups.length > 0 && tuitionStudents.filter(function (gr) { return filterStudyGroups.includes(gr.tuitionGroupName); });\n    var filteredAssignments = filterStudyGroups.length > 0 ?\n        refreshableAssigments.filter(function (r) { return flatten(studyGroups).find(function (sg) { return sg.studentEmailAddress === r.user; }); }) : refreshableAssigments;\n    //determine which assignments should get data from urkund\n    checkWithUrkund && filteredAssignments.length > 0 && filteredAssignments.forEach(function (a) {\n        a.shouldRefresh = false;\n        if (a.metadata &&\n            a.metadata.urkundExternalId &&\n            a.metadata.urkundExternalId.length > 0 && // Must have metadata.urkundExternalId Otherwise not possible to refresh\n            !a.metadata.urkundUploadError && ( // Not possible to refresh if upload has failed\n        !a.metadata.urkundLastPoll || // Never checked status yet\n            (['Accepted', 'Submitted'].indexOf(JSON.parse(a.metadata.urkundResponse)[0].Status.State) >= 0 &&\n                parseInt(a.metadata.urkundLastPoll) < moment().add(-15, \"seconds\").toDate().getTime()))) {\n            a.shouldRefresh = true;\n        }\n    });\n    return filteredAssignments;\n};\nexport function getBaseCourseViewerEmailUrl(configUrl) {\n    var courseViewerUrl;\n    try {\n        var url = new URL(configUrl);\n        courseViewerUrl = url.href;\n    }\n    catch (_a) {\n        courseViewerUrl = window.location.origin + \"/\" + courseViewerUrl;\n    }\n    return courseViewerUrl;\n}\n","import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\nimport * as React from 'react';\nimport { useState, useContext } from 'react';\nimport { env } from '../../../../globals/KED.env';\nimport { HttpError } from 'kedbackend/client';\nimport { LanguageContext } from '../../../utility-components/LanguageContext';\nimport { showError, showInfo } from '../../../../utils/utils';\nexport function setupEmail(WrappedComponent) {\n    return function (props) {\n        var _a = __read(useState({ emailSendInProgress: false, data: [] }), 2), emailInfo = _a[0], setEmailInfo = _a[1];\n        var intl = useContext(LanguageContext).intl;\n        var setRecipients = function (recipient) { return setEmailInfo(__assign(__assign({}, emailInfo), { data: emailInfo.data.find(function (su) { return su.sendTo.email === recipient.sendTo.email && recipient.taskId === su.taskId; }) ?\n                emailInfo.data.filter(function (u) { return u.sendTo.email !== recipient.sendTo.email || recipient.taskId !== u.taskId; }) : __spread(emailInfo.data, [recipient]) })); };\n        function sendReminder() {\n            return __awaiter(this, void 0, void 0, function () {\n                var client, res, _a, _b, err_1;\n                return __generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            _c.trys.push([0, 4, , 5]);\n                            client = env.kedBackendClient.http;\n                            setEmailInfo(__assign(__assign({}, emailInfo), { emailSendInProgress: true }));\n                            return [4 /*yield*/, client.post(\"email/reminder\", emailInfo.data)];\n                        case 1:\n                            res = _c.sent();\n                            if (!(res.status !== 200)) return [3 /*break*/, 3];\n                            setEmailInfo(__assign(__assign({}, emailInfo), { emailSendInProgress: false }));\n                            _a = HttpError.bind;\n                            _b = [void 0, res.status];\n                            return [4 /*yield*/, res.text()];\n                        case 2: throw new (_a.apply(HttpError, _b.concat([_c.sent()])))();\n                        case 3:\n                            setEmailInfo(__assign(__assign({}, emailInfo), { emailSendInProgress: false }));\n                            showInfo(intl.formatMessage({ id: \"teacherView.emailRemindersSentMsg\", defaultMessage: \"Reminders successfully sent\" }));\n                            return [3 /*break*/, 5];\n                        case 4:\n                            err_1 = _c.sent();\n                            setEmailInfo(__assign(__assign({}, emailInfo), { emailSendInProgress: false }));\n                            showError(err_1);\n                            return [3 /*break*/, 5];\n                        case 5: return [2 /*return*/];\n                    }\n                });\n            });\n        }\n        return React.createElement(WrappedComponent, __assign({}, props, { emailInfo: emailInfo, setEmailInfo: setRecipients, sendReminder: sendReminder }));\n    };\n}\n","import { __assign, __read } from \"tslib\";\nimport * as React from 'react';\nimport { CourseModuleView } from './course-module';\nimport { useContext, useState, createContext } from 'react';\nimport { LanguageContext } from '../../utility-components/LanguageContext';\nimport { StateContext } from '../digest-view';\nimport Select from 'react-select';\nimport { ExtraPageButtons } from '../../utility-components/extra-page-buttons';\nimport { flatten } from '../../../utils/utils';\nimport { env } from '../../../globals/KED.env';\nimport { parallel } from 'kedbackend/observable';\nimport { FilteredStudentView } from './filter-students-view';\nimport { mockTuitionStudents } from '../../../apis/mock/mock-classroom-data';\nexport var AssignmentsContext = createContext({ filterStudyGroups: [], tuitionStudents: [] });\nexport var AssignmentsView = (function () {\n    var intl = useContext(LanguageContext).intl;\n    var _a = useContext(StateContext), tasks = _a.tasks, selectedCourse = _a.selectedCourse, edsSchool = _a.edsSchool, school = _a.school;\n    var _b = __read(useState({ selectedStudent: { label: null, value: null }, selectedStudyGroups: [] }), 2), filterData = _b[0], setFilteringData = _b[1];\n    var defaultDescriptionMessage = \"H채r listas samtliga inl채mningsuppgifter i din/dina kurser du handleder.\"\n        + \"Klicka till h철ger f철r att v채lja kurs. Kursens uppgifter syns nedan. Du kan 철ppna/d철lja varje modul.\";\n    var emptyOrMock = school === 'KED' && selectedCourse && selectedCourse.studyGroups &&\n        Object.keys(mockTuitionStudents).filter(function (m) { return selectedCourse.studyGroups.includes(m); }).map(function (sp) { return mockTuitionStudents[sp]; });\n    var tuitionStudents = selectedCourse && flatten(edsSchool ? parallel(selectedCourse.studyGroups.map(function (stGroup) { return function () { return env.edsClient.suspense.getTuitionGroupStudents({\n        schoolName: edsSchool,\n        tuitionGroupName: stGroup\n    }); }; }))\n        : emptyOrMock);\n    var uniqueTuitionSelectDatasource = tuitionStudents ? Array.from(new Set(tuitionStudents.map(function (a) { return a.studentEmailAddress; })))\n        .map(function (emailAddress) {\n        var student = tuitionStudents.find(function (a) { return a.studentEmailAddress === emailAddress; });\n        return { label: student.studentFirstName + \" \" + student.studentLastName, value: student.studentEmailAddress };\n    }) : [];\n    return React.createElement(React.Fragment, null,\n        \" \",\n        React.createElement(ExtraPageButtons, null),\n        selectedCourse ?\n            React.createElement(AssignmentsContext.Provider, { value: { filterStudyGroups: filterData.selectedStudyGroups, tuitionStudents: tuitionStudents } },\n                React.createElement(\"div\", { className: \"sv-row sv-layout sv-skip-spacer\" },\n                    React.createElement(\"h2\", null, intl.formatMessage({ id: \"teacherView.assignmentsViewTitle\", defaultMessage: \"Inl채mningsuppgifter\" })),\n                    React.createElement(\"p\", null, intl.formatMessage({ id: \"teacherView.assignmentsViewDescription\", defaultMessage: { defaultDescriptionMessage: defaultDescriptionMessage } })),\n                    React.createElement(\"h3\", null,\n                        selectedCourse.name,\n                        \"-\",\n                        selectedCourse.description),\n                    selectedCourse.studyGroups && selectedCourse.studyGroups.length > 0 &&\n                        React.createElement(\"div\", { className: \"sv-row sv-layout sv-skip-spacer\" },\n                            React.createElement(\"div\", { className: \"horizontalItem top pull-right study-group-filter\" },\n                                React.createElement(Select, { isDisabled: filterData.selectedStudent.value, isMulti: true, options: selectedCourse.studyGroups.map(function (sg) { return ({ label: sg, value: sg }); }), value: filterData.selectedStudyGroups.map(function (group) { return ({ label: group, value: group }); }), placeholder: intl.formatMessage({ id: \"teacherView.filterByStudygroupsPlaceholder\", defaultMessage: \"V채lj undervisningsgrupp\" }), onChange: function (options) {\n                                        setFilteringData(__assign(__assign({}, filterData), { selectedStudyGroups: options.map(function (_a) {\n                                                var value = _a.value;\n                                                return value;\n                                            }) }));\n                                    } })),\n                            React.createElement(\"div\", { className: \"horizontalItem top pull-right study-group-filter\" },\n                                React.createElement(Select, { className: \"basic-single\", classNamePrefix: \"select\", options: uniqueTuitionSelectDatasource, value: filterData.selectedStudent.value ? { label: filterData.selectedStudent.label, value: filterData.selectedStudent.value } : null, isClearable: true, placeholder: intl.formatMessage({ id: \"teacherView.filterByStudent\", defaultMessage: \"V채lj student\" }), onChange: function (options) {\n                                        setFilteringData({ selectedStudyGroups: [], selectedStudent: options ? options : { label: null, value: null } });\n                                    } }))),\n                    filterData.selectedStudent.value ? React.createElement(FilteredStudentView, { selectedUser: filterData.selectedStudent.value }) :\n                        selectedCourse.modules.map(function (module) {\n                            var moduleTasks = tasks.filter(function (t) { return module.taskIds.find(function (tId) { return tId === t.id; }); });\n                            return moduleTasks.length > 0 ? React.createElement(CourseModuleView, { tasks: moduleTasks, key: module.id, module: module }) : null;\n                        })))\n            : null);\n});\n","import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport * as React from 'react';\nimport moment from 'moment';\nimport { DriveFileListing, downloadFile, getUrkundStatus } from '../../course-viewer/course-page/task-assignments-utils';\nimport { env } from '../../../globals/KED.env';\nimport { HttpError } from 'kedbackend/client';\nimport { useEffect, useState, useContext } from 'react';\nimport { maxLength } from '../../../utils/utils';\nimport { StateContext } from '../digest-view';\nexport var TaskAssignment = (function (_a) {\n    var assignment = _a.assignment, shouldGetUrkundStatus = _a.shouldGetUrkundStatus, task = _a.task, studentView = _a.studentView;\n    var _b = __read(useState(assignment), 2), assignmentsWithStatus = _b[0], setAssignmentStatus = _b[1];\n    var _c = useContext(StateContext), school = _c.school, selectedCourse = _c.selectedCourse;\n    function refreshAssignment(assignment) {\n        return __awaiter(this, void 0, void 0, function () {\n            var client, user, filename, req, _a, _b, resJson, e_1;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        client = env.kedBackendClient.http;\n                        user = assignment.user, filename = assignment.filename;\n                        return [4 /*yield*/, setAssignmentStatus(__assign(__assign({}, assignment), { isRefreshing: true }))];\n                    case 1:\n                        _c.sent();\n                        _c.label = 2;\n                    case 2:\n                        _c.trys.push([2, 8, , 10]);\n                        return [4 /*yield*/, client.get(\"assignments/urkund/\" + school + \"/\" + selectedCourse.id + \"/\" + task.id + \"/\" + user + \"/\" + filename)];\n                    case 3:\n                        req = _c.sent();\n                        if (!(req.status >= 400)) return [3 /*break*/, 5];\n                        _a = HttpError.bind;\n                        _b = [void 0, req.status];\n                        return [4 /*yield*/, req.text()];\n                    case 4: throw new (_a.apply(HttpError, _b.concat([_c.sent()])))();\n                    case 5: return [4 /*yield*/, req.text()];\n                    case 6:\n                        resJson = _c.sent();\n                        return [4 /*yield*/, setAssignmentStatus(__assign(__assign({}, assignment), { isRefreshing: false, metadata: __assign(__assign({}, assignment.metadata), { urkundResponse: resJson }) }))];\n                    case 7:\n                        _c.sent();\n                        return [3 /*break*/, 10];\n                    case 8:\n                        e_1 = _c.sent();\n                        return [4 /*yield*/, setAssignmentStatus(__assign(__assign({}, assignment), { isRefreshing: false, refreshError: e_1 }))];\n                    case 9:\n                        _c.sent();\n                        return [3 /*break*/, 10];\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    }\n    useEffect(function () {\n        if (shouldGetUrkundStatus) {\n            setAssignmentStatus(__assign(__assign({}, assignment), { isRefreshing: true }));\n            refreshAssignment(assignment);\n        }\n    }, [shouldGetUrkundStatus, assignment]);\n    return React.createElement(\"tr\", { key: assignmentsWithStatus.mediaLink, style: assignmentsWithStatus.metadata.$meta ? { opacity: 0.5 } : {} },\n        studentView ?\n            React.createElement(\"td\", null, task.name)\n            :\n                React.createElement(\"td\", null,\n                    React.createElement(\"a\", { href: \"mailto:\" + assignmentsWithStatus.user }, assignmentsWithStatus.metadata.userDisplayName || assignmentsWithStatus.user)),\n        React.createElement(\"td\", null, assignmentsWithStatus.metadata.driveFileId ?\n            // The file can be edited on drive. Link to editing it.\n            React.createElement(DriveFileListing, { file: assignmentsWithStatus }) :\n            React.createElement(\"a\", { href: \"#\", onClick: function (ev) {\n                    ev.preventDefault();\n                    ev.stopPropagation();\n                    downloadFile(assignmentsWithStatus);\n                } }, maxLength(assignmentsWithStatus.filename, 32))),\n        React.createElement(\"td\", { className: \"assignment-date-col\" }, moment(assignmentsWithStatus.uploadDate).format('YYYY-MM-DD HH:mm')),\n        getUrkundStatus(assignmentsWithStatus, refreshAssignment, shouldGetUrkundStatus));\n});\n","import React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { LanguageContext } from '../../utility-components/LanguageContext';\nimport { preserveImpersonationQuery } from '../../../access-control';\nimport { NotificationIcon } from '../shared/notification-icon';\nimport { StateContext } from '../digest-view';\nimport { env } from '../../../globals/KED.env';\nexport var CoursesView = (function (_a) {\n    var courseBuilderUrl = _a.courseBuilderUrl;\n    var intl = useContext(LanguageContext).intl;\n    var _b = useContext(StateContext), notificationdigests = _b.notificationdigests, teacherCourses = _b.teacherCourses, selectedCourse = _b.selectedCourse;\n    return React.createElement(\"div\", { className: \"sv-html-portlet sv-portlet sv-skip-spacer\" },\n        React.createElement(\"div\", { className: \"ked_boxed\" },\n            React.createElement(\"h3\", null, intl.formatMessage({ id: \"teacherView.coursesViewTitle\", defaultMessage: \"Mina kurser/ uppgifter\" })),\n            React.createElement(\"div\", { className: \"taskContainer odd-even\" }, teacherCourses.map(function (course) {\n                return React.createElement(\"div\", { key: course.id + course.code, className: \"align-horizontal\" },\n                    React.createElement(\"div\", { className: \"teacherSchoolCourse\" },\n                        React.createElement(\"div\", { className: \"horizontalItem top pull-right\" },\n                            React.createElement(\"a\", { target: \"_blank\", href: preserveImpersonationQuery(courseBuilderUrl, {}) + \"#/courses/\" + course.id + \"/edit\", className: \"editItem\" })),\n                        React.createElement(\"div\", { className: \"horizontalItem top\" },\n                            React.createElement(\"div\", { className: \"notification-container\" },\n                                React.createElement(Link, { key: \"linkCourse_\" + course.id, className: selectedCourse && selectedCourse.id === course.id ? \"selected\" : \"\", to: \"/overview/course/\" + course.id + \"/assignments\" },\n                                    course.name,\n                                    \" - \",\n                                    course.description),\n                                React.createElement(NotificationIcon, { key: \"notifictiona_\" + course.id, notificationdigests: notificationdigests, entity: 'course', course: course })))));\n            }))),\n        env.currentUser.roles.includes(\"ADMIN\") && React.createElement(Link, { to: \"/admin/emailtemplate\" }, \"Manage Email Template\"));\n});\n","import { __read, __spread } from \"tslib\";\nimport * as React from 'react';\nimport { withRouter } from \"react-router\";\nimport { TwoColumnsPage } from '../course-builder-ks/common/two-columns-page';\nimport { AssignmentsView } from './assignments-view';\nimport { CoursesView } from './courses-view';\nimport { db } from '../../globals/db';\nimport { env } from '../../globals/KED.env';\nimport { HttpError, simpleDigestSuspense } from 'kedbackend/client';\nimport { createContext, Suspense } from 'react';\nimport { compareProps } from '../../utils/utils';\nimport { Emitter } from 'kedbackend/observable';\nimport { TimeoutEllipsisLoader } from '../course-builder/sub-components/ellipsis-loader';\nimport { withObserve } from '../utility-components/with-observe';\nvar contextInitialValue = { notificationdigests: {}, selectedCourse: null, teacherCourses: [], seenDigestsObservable: new Emitter([]), school: \"\", edsSchool: \"\", tasks: [], courseViewerUrl: \"\" };\nexport var StateContext = createContext(contextInitialValue);\nexport var DigestView = withRouter(withObserve((function (_a) {\n    var _b;\n    var match = _a.match, courseBuilderUrl = _a.courseBuilderUrl, courseViewerUrl = _a.courseViewerUrl;\n    var courseId = match ? match.params.courseId : null;\n    var courseId = courseId ? courseId : null;\n    var myCourses = [];\n    var school = db.schools.tags(\"gymnasium\").name(env.currentUser.school).include(\"courses\").single().read();\n    var schoolCourses = school ? school.courses : [];\n    if (schoolCourses) {\n        var me_1 = env.currentUser.mail;\n        schoolCourses.forEach(function (course) {\n            if (course.modules.length > 0) {\n                if (course.activatedBy && course.activatedBy.url == me_1) {\n                    myCourses.push(course);\n                }\n                else if (course.responsibleTeachers.filter(function (t) { return t.url == me_1; }).length > 0) {\n                    myCourses.push(course);\n                }\n            }\n        });\n    }\n    myCourses = myCourses.sort(compareProps([\"name\", \"dateTime\"]));\n    var tasks = myCourses ? db.tasks.hasEdgesFrom(myCourses.map(function (c) { return c.id; })).toValue().read() : [];\n    var taskAssignments = tasks.filter(function (task) { return task.assignment === true; });\n    var schoolName = school.name;\n    var courseIds = myCourses.map(function (e) { return e.id; }).join(',');\n    var selectedCourse = myCourses.find(function (c) { return c.id === courseId; });\n    var assignments = {};\n    if (courseIds.length > 0) {\n        var res = env.kedBackendClient.http.suspenseGet(\"assignments/notificationdigests\", {\n            school: schoolName,\n            courseIds: courseIds\n        });\n        if (res.status !== 200) {\n            throw new HttpError(res.status, res.text());\n        }\n        assignments = res.json();\n    }\n    var digestArray = simpleDigestSuspense(myCourses.map(function (course) { return env.currentUser.mail + course.id; }));\n    var seenDigestsObservable = digestArray.length > 0 ?\n        (_b = db.seenStudentAssignments).tags.apply(_b, __spread(digestArray)).toValue() :\n        new Emitter([]);\n    var contextValue = {\n        notificationdigests: assignments,\n        selectedCourse: selectedCourse,\n        teacherCourses: myCourses,\n        seenDigestsObservable: seenDigestsObservable,\n        school: schoolName,\n        edsSchool: school.edsSchoolNameGymn,\n        tasks: taskAssignments,\n        courseViewerUrl: courseViewerUrl\n    };\n    return React.createElement(StateContext.Provider, { value: contextValue },\n        React.createElement(TwoColumnsPage, { left: React.createElement(Suspense, { fallback: React.createElement(TimeoutEllipsisLoader, null) },\n                React.createElement(AssignmentsView, { key: selectedCourse ? selectedCourse.id : \"\" })), right: React.createElement(CoursesView, { courseBuilderUrl: courseBuilderUrl }), rightWidth: 5 }));\n})));\n","import { __assign, __read } from \"tslib\";\nimport React, { useState } from 'react';\nimport { withRouter } from 'react-router';\nimport { Wysiwyg } from '../../utility-components/wysiwyg';\nimport { getCurrentUser } from '../../../globals/current-user';\nimport { db } from '../../../globals/db';\nimport { createUUID } from 'kedbackend/client';\nimport { showError, showInfo } from '../../../utils/utils';\nimport { withObserve } from '../../utility-components/with-observe';\nexport var EmailTemplates = withRouter(withObserve(function (_a) {\n    var match = _a.match;\n    var currentUser = getCurrentUser();\n    var writeAccess = currentUser.roles.includes(\"ADMIN\");\n    var emailParams = [\"[FirstName]\", \"[LastName]\", \"[CourseName]\", \"[ModuleName]\", \"[TaskName]\", \"[TaskDeadline]\", \"[TeacherName]\", \"[TaskUrl]\"];\n    var emailTemplate = db.emailTemplates.tags(\"email-type: assignment-reminder\").single({ onZero: function () { } }).read();\n    var _b = __read(useState(emailTemplate ? { content: emailTemplate.content, subject: emailTemplate.subject } : { content: \"\", subject: \"\" }), 2), emaiTemplateContent = _b[0], setEmailContent = _b[1];\n    function saveTemplate() {\n        var regexContentResult = emaiTemplateContent.content.match(/\\[(.*?)\\]/gm);\n        var regexSubjectResult = emaiTemplateContent.subject.match(/\\[(.*?)\\]/gm);\n        var checkContentUsedParamsOk = true;\n        var checkSubjectUsedParamsOk = true;\n        checkContentUsedParamsOk = regexContentResult != null && regexContentResult.every(function (item) {\n            return emailParams.indexOf(item) !== -1;\n        });\n        checkSubjectUsedParamsOk = regexSubjectResult != null && regexSubjectResult.every(function (item) {\n            return emailParams.indexOf(item) !== -1;\n        });\n        if (checkContentUsedParamsOk && checkSubjectUsedParamsOk) {\n            try {\n                emailTemplate ?\n                    db.emailTemplates.update(emailTemplate, { content: emaiTemplateContent.content, subject: emaiTemplateContent.subject })\n                    :\n                        db.emailTemplates.add({\n                            id: createUUID(),\n                            tags: [\"email-type: assignment-reminder\"],\n                            content: emaiTemplateContent.content,\n                            subject: emaiTemplateContent.subject\n                        });\n                showInfo(\"Template successfully saved\");\n            }\n            catch (err) {\n                showError(err);\n            }\n        }\n        else {\n            showError(\"Invalid parameters were used in template. Please use only the specified ones and try again.\");\n        }\n    }\n    return React.createElement(\"div\", { className: \"sv-html-portlet sv-portlet sv-skip-spacer\" },\n        React.createElement(\"div\", { className: \"ked_boxed\" },\n            React.createElement(\"h4\", null, \"Email reminder template\"),\n            React.createElement(\"p\", { className: \"subHeader\" }, \"(Compose the email template. Possible parameters are: \" + emailParams.join(\",\") + \")\"),\n            React.createElement(\"input\", { placeholder: \"Subject\", value: emaiTemplateContent.subject, className: \"inputTextBox inputTextSmall\", onChange: function (ev) { return setEmailContent(__assign(__assign({}, emaiTemplateContent), { subject: ev.target.value })); } }),\n            React.createElement(Wysiwyg, { actions: [\n                    \"bold\",\n                    \"italic\",\n                    \"underline\",\n                    \"strikethrough\",\n                    \"heading2\",\n                    \"heading3\",\n                    \"olist\",\n                    \"ulist\",\n                    \"outdent\",\n                    \"indent\",\n                    \"line\",\n                    \"image\"\n                ], readOnly: !writeAccess, html: emaiTemplateContent.content, onChange: function (html) { return setEmailContent(__assign(__assign({}, emaiTemplateContent), { content: html })); } }),\n            React.createElement(\"button\", { className: \"btn\", onClick: function () { saveTemplate(); } }, \"Submit\")));\n}));\n","import React, { Suspense } from 'react';\nimport { HashRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { TimeoutEllipsisLoader } from '../course-builder/sub-components/ellipsis-loader';\nimport { DigestView } from './digest-view';\nimport { EmailTemplates } from './email-templates';\nimport { ErrorSuccessFeedback } from '../../utils/error-success-feedback';\nexport var TeacherViewApp = function (_a) {\n    var courseBuilderUrl = _a.courseBuilderUrl, viewCourseUrl = _a.viewCourseUrl;\n    return React.createElement(Router, null,\n        React.createElement(\"div\", { className: \"teacher-view\" },\n            React.createElement(Route, { path: \"/\", exact: true, render: function () { return React.createElement(Redirect, { to: \"/overview\" }); } }),\n            React.createElement(Route, { path: \"/overview/(course)?/:courseId?/(assignments)?\", render: function () {\n                    return React.createElement(Suspense, { fallback: React.createElement(TimeoutEllipsisLoader, null) },\n                        React.createElement(DigestView, { courseBuilderUrl: courseBuilderUrl, courseViewerUrl: viewCourseUrl }));\n                } }),\n            React.createElement(Route, { exact: true, path: \"/admin/emailtemplate\", render: function () {\n                    return React.createElement(Suspense, { fallback: React.createElement(TimeoutEllipsisLoader, null) },\n                        React.createElement(EmailTemplates, null));\n                } }),\n            React.createElement(ErrorSuccessFeedback, null)));\n};\n","import React from 'react';\nimport { StateContext } from '../digest-view';\nimport { withObserve } from '../../utility-components/with-observe';\nexport var NotificationIcon = withObserve(function (_a) {\n    var course = _a.course, entity = _a.entity, moduleId = _a.moduleId, taskId = _a.taskId, notificationdigests = _a.notificationdigests;\n    var seenDigestsObserable = React.useContext(StateContext).seenDigestsObservable;\n    var seenDigests = seenDigestsObserable.read();\n    var notifications = 0;\n    var courseNotifications = notificationdigests[course.id];\n    if (courseNotifications) {\n        if (entity === 'course') {\n            course.modules.forEach(function (cmod) {\n                cmod.taskIds.forEach(function (courseTask) {\n                    notifications += getTaskNotifications(courseNotifications[courseTask]);\n                });\n            });\n        }\n        else if (entity === 'module') {\n            var currentModule = course.modules.find(function (m) { return m.id == moduleId; });\n            currentModule && currentModule.taskIds.forEach(function (courseTask) {\n                notifications += getTaskNotifications(courseNotifications[courseTask]);\n            });\n        }\n        else if (entity === 'task') {\n            notifications += getTaskNotifications(courseNotifications[taskId]);\n        }\n    }\n    function getTaskNotifications(taskAssignments) {\n        if (taskAssignments) {\n            return taskAssignments.filter(function (t) { return !seenDigests.find(function (d) { return d.digest === t.digest; }); }).length;\n        }\n        return 0;\n    }\n    return notifications > 0 && React.createElement(\"div\", { className: \"notification-icon\" }, notifications);\n});\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}