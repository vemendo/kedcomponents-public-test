var testpageteacherview=function(e){function t(t){for(var r,i,o=t[0],u=t[1],c=t[2],d=0,h=[];d<o.length;d++)i=o[d],a[i]&&h.push(a[i][0]),a[i]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(l&&l(t);h.length;)h.shift()();return s.push.apply(s,c||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var u=n[o];0!==a[u]&&(r=!1)}r&&(s.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={12:0},s=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],u=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var l=u;return s.push([292,0]),n()}({0:function(e,t){e.exports=React},111:function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(68);function s(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"Välj användare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,s=e.school,i=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===i.length?{fontStyle:"italic"}:{}},0===i.length?"saknar roller":i.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:s?{}:{fontStyle:"italic"}},s||"saknar skola"))}))))}},12:function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return u}),n.d(t,"f",function(){return c});var r=n(3);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function u(e){return r.b(this,void 0,void 0,function(){var t,n,a,s;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent(),0,16])),[2,(i=a,Array.prototype.map.call(i,function(e){return("00"+e.toString(16)).slice(-2)}).join(""))]}var i})})}function c(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],i=t(s);i!==s&&(n===e&&(n=e.slice()),n[r]=i)}return n}},120:function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(1),a=n(34),s=n(0),i=n.n(s),o=n(2),u=i.a.createContext(null);a.b.addProvider(function(){return u._currentValue});var c,l=function(e){function t(t){var n=e.call(this,t)||this;return n.subscriptions=[],n.outerSubscription={unsubscribe:function(){n.subscriptions.forEach(function(e){return e.unsubscribe()}),n.subscriptions=[]}},n.observer=function(e,t,r){t?n.setState({error:t}):n.setState(function(e){return{counter:e.counter+1,error:t}})},n.state={counter:0,error:null},n}return r.c(t,e),t.prototype.componentDidCatch=function(e,t){e&&e.name||(e=new Error(""+e)),this.setState({error:e,info:t}),console.log(e,t)},t.prototype.componentWillMount=function(){this.outerSubscription.unsubscribe()},t.prototype.render=function(){return this.state.error?this.props.errorFallback||i.a.createElement("p",null,Object(o.a)(c||(c=r.e(["Kunde inte ladda innehållet"],["Kunde inte ladda innehållet"])))):(this.outerSubscription.unsubscribe(),i.a.createElement(s.Suspense,{fallback:this.props.fallback||null},i.a.createElement(u.Provider,{value:this},this.props.children)))},t}(i.a.Component)},125:function(e,t){},13:function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},131:function(e,t,n){var r={"./en-SG":77,"./en-SG.js":77,"./en-au":78,"./en-au.js":78,"./en-ca":79,"./en-ca.js":79,"./en-gb":80,"./en-gb.js":80,"./en-ie":81,"./en-ie.js":81,"./en-il":82,"./en-il.js":82,"./en-nz":83,"./en-nz.js":83,"./sv":84,"./sv.js":84};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=131},132:function(e,t){},133:function(e,t){},135:function(e,t,n){"use strict";var r=n(4),a=n(68),s=n(14),i=Object(s.b)(location.search).user;if(i){var o=a.a.find(function(e){return e.username===i});o&&(r.a.currentUser=o)}var u=Object(s.b)(location.search),c=u.role,l=u.school;r.a.currentUser&&(c&&(r.a.currentUser.roles=c.split(",")),l&&(r.a.currentUser.school=l))},137:function(e,t,n){"use strict";function r(e){var t,n,r;document.write('<link rel="stylesheet" href="'+(t=e,n=location.protocol+"//"+location.host+location.pathname,r=n.lastIndexOf("/"),n.substr(0,r+1)+t)+'" />')}n.d(t,"a",function(){return r})},138:function(e,t,n){"use strict";function r(e){var t=e.v1,n=e.versionFolder,r=e.version,a=e.includeCSS,s=e.NOCSS;s||t&&t.forEach(function(e){return a(e)});var i=parseInt(s);isNaN(i)&&(i=1);for(var o=i+1;o<=r;++o)a(n+"/v"+o+".css")}n.d(t,"a",function(){return r})},14:function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],i=t[1];return a[n?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},146:function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r,a=n(1),s=n(0),i=n.n(s),o=n(2),u=n(114),c=n(4),l=n(9),d=n(51);function h(e){var t=e.school,n=e.courseCode,s=e.selectedStudyGroups,h=e.placeholder,m=e.onUpdate,p="KED"===t&&d.b[n]?d.b[n]:[],f=l.c.schools.cacheOptimized().name(t).single().read().edsSchoolNameGymn,g=(f?c.b.edsClient.suspense.getSchoolTuitionGroups({schoolName:f,courseCode:n}):p).map(function(e){return{label:e.tuitionGroupName,value:e.tuitionGroupName}});return i.a.createElement(u.a,{isMulti:!0,options:g,value:s.map(function(e){return{label:e,value:e}}),placeholder:h,noOptionsMessage:function(){return Object(o.a)(r||(r=a.e(["Kunde inte hitta studiegrupper för denna kurs"],["Kunde inte hitta studiegrupper för denna kurs"])))},onChange:function(e){m(e.map(function(e){return e.value}))}})}},15:function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(14);n.d(t,"a",function(){return i}),n.d(t,"c",function(){return u}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return l}),n.d(t,"b",function(){return h}),n.d(t,"f",function(){return m});var i=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function u(e,t){return o(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function l(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,i=Object(s.b)(location.search),o=r.a({},i,{role:t,school:n}),u=Object(s.a)(o);a?location.href=""+a+u:(location.hash="#",location.search=u)}};function h(e){d.actAs(e)}function m(e,t){var n,a,o=Object(s.b)(location.search),u={};try{for(var c=r.h(i),l=c.next();!l.done;l=c.next()){var d=l.value;o[d]&&(u[d]=o[d])}}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var h=Object(s.a)(r.a({},u,t)),m=e.indexOf("#");return m>=0?""+e.substr(0,m)+h+e.substr(m):""+e+h}},16:function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},17:function(e,t,n){"use strict";var r=n(3),a=n(12),s=n(27),i=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,i){return r.b(this,void 0,void 0,function(){var o,u,c,l,d,h,m,p,f,g,b;return r.d(this,function(v){switch(v.label){case 0:return i&&"no-cache"===i.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),c=(u=this).authHeader,l=u.tokenInfo,d=u.bearerProvider,c||l||!d?[3,2]:(h=this,[4,d.getBearer()]);case 1:h.tokenInfo=l=v.sent(),v.label=2;case 2:return l?l.expires<Date.now()?(console.log("Token expired. Refresh it:"),m=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:m.tokenInfo=l=v.sent(),v.label=4;case 4:c="Bearer "+l.token,v.label=5;case 5:return c&&(n.Authorization=c),p=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 6:return 401==(f=v.sent()).status&&this.bearerProvider?(g=f.headers.get("www-authenticate"),console.log("Got "+f.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(b=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return b.tokenInfo=v.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 8:f=v.sent(),v.label=9;case 9:return[2,f]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,s,o,u){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=u,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),u=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var l=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return h}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"k",function(){return a.e}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return u}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return i}),n.d(t,"c",function(){return l});var d=function(){function e(e,t,n){this.http=new i(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return a=r.a({},t),location.search.includes("useSP")&&(a.flags=(a.flags||[]).concat(["useSP"])),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=u.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([u.sent()])));case 3:return[4,s.json()];case 4:return[2,u.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new h,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=l.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(l,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),h=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},189:function(e,t,n){"use strict";var r=n(0),a=n.n(r),s=n(306),i=n(305),o=n(307),u=n(120),c=n(75),l=n(1),d=n(230),h=n(64),m=n(19),p=n(6),f=n.n(p),g=n(46),b=n(4),v=n(5),y=n(2),k=function(e){var t=e.assignment,n=e.shouldGetUrkundStatus,a=l.f(Object(r.useState)(t),2),s=a[0],i=a[1];return Object(r.useEffect)(function(){n&&i(l.a({},t,{isRefreshing:!0}))},[n,t]),r.createElement("tr",{key:s.mediaLink,style:s.metadata.$meta?{opacity:.5}:{}},r.createElement("td",null,r.createElement("a",{href:"mailto:"+s.user},s.metadata.userDisplayName||s.user)),r.createElement("td",null,s.metadata.driveFileId?r.createElement(g.a,{file:s}):r.createElement("a",{href:"#",onClick:function(e){e.preventDefault(),e.stopPropagation(),Object(g.b)(s)}},Object(y.l)(s.filename,32))),r.createElement("td",{className:"assignment-date-col"},f()(s.uploadDate).format("YYYY-MM-DD HH:mm")),Object(g.c)(s,function(e){return l.b(this,void 0,void 0,function(){var t,n,r,a,s,o,u,c,d,h,m,p;return l.d(this,function(f){switch(f.label){case 0:return t=b.b.kedBackendClient.http,n=this.props,r=n.courseId,a=n.taskId,s=n.school,o=e.user,u=e.filename,[4,i(l.a({},e,{isRefreshing:!0}))];case 1:f.sent(),f.label=2;case 2:return f.trys.push([2,8,,10]),[4,t.get("assignments/urkund/"+s+"/"+r+"/"+a+"/"+o+"/"+u)];case 3:return(c=f.sent()).status>=400?(d=v.c.bind,h=[void 0,c.status],[4,c.text()]):[3,5];case 4:throw new(d.apply(v.c,h.concat([f.sent()])));case 5:return[4,c.text()];case 6:return m=f.sent(),[4,i(l.a({},e,{isRefreshing:!1,metadata:l.a({},e.metadata,{urkundResponse:m})}))];case 7:return f.sent(),[3,10];case 8:return p=f.sent(),[4,i(l.a({},e,{isRefreshing:!1,refreshError:p}))];case 9:return f.sent(),[3,10];case 10:return[2]}})})}))},E=n(16),w=function(e){var t=e.assignments,n=Object(r.useContext)(E.a).intl,a=Object.assign([],t);return a.length>0&&a.forEach(function(e){e.shouldRefresh=!1,e.metadata&&!e.metadata.urkundUploadError&&(!e.metadata.urkundLastPoll||["Accepted","Submitted"].indexOf(JSON.parse(e.metadata.urkundResponse)[0].Status.State)>=0&&parseInt(e.metadata.urkundLastPoll)<f()().add(-15,"seconds").toDate().getTime())&&(e.shouldRefresh=!0)}),t.length>0?r.createElement("table",{className:"task-assignments-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,n.formatMessage({id:"teacherView.assignmentStudentName",defaultMessage:"Elev"})),r.createElement("th",null,n.formatMessage({id:"teacherView.assignmentFileName",defaultMessage:"Filnamn"})),r.createElement("th",null,n.formatMessage({id:"teacherView.assignmentSubmittedAt",defaultMessage:"Inlamnat"})),r.createElement("th",null,n.formatMessage({id:"teacherView.assignmentReport",defaultMessage:"Rapport"})),r.createElement("th",null,n.formatMessage({id:"teacherView.assignmentGrade",defaultMessage:"Niva"})))),r.createElement("tbody",null,a.map(function(e){return r.createElement(k,{assignment:e,shouldGetUrkundStatus:e.shouldRefresh})}))):r.createElement("div",null,n.formatMessage({id:"teacherView.noTaskAssignments",defaultMessage:"Inga uppdrag uppladdade för denna uppgift"}))},T=function(e){var t=e.notSubmittedUsers,n=Object(r.useContext)(E.a).intl,a=t.length,s=l.f(Object(r.useState)([]),2),i=s[0],o=s[1];return t&&r.createElement("div",{className:"not-submitted-users taskContainer"},r.createElement("h4",null,n.formatMessage({id:"teacherView.notSubmittedAssignments",defaultMessage:"Ej lämnat in"})),t.map(function(e,t){return r.createElement("div",{className:"align-horizontal student-row"+(a===t+1?" last":"")},r.createElement("div",{className:"horizontalItem top pull-right",onClick:function(){o(i.indexOf(e.email)>-1?i.filter(function(t){return t!=e.email}):l.g(i,[e.email]))}},r.createElement("div",{className:"checkBox"+(i.indexOf(e.email)>-1?" checked":"")})),r.createElement("div",{className:"horizontalItem top"},e.displayName))}),r.createElement("div",{className:"align-horizontal remind-assignment"},r.createElement("div",{className:"horizontalItem top pull-right"},r.createElement("button",{className:"btn"},n.formatMessage({id:"teacherView.remindBtn",defaultMessage:"Påminn"})))))},S=function(e){var t=e.course,n=e.entity,r=e.moduleId,s=e.taskId,i=e.notificationdigests,o=a.a.useContext(_).seenDigests,u=0,c=i[t.id];if(c)if("course"===n)t.modules.forEach(function(e){e.taskIds.forEach(function(e){u+=d(c[e])})});else if("module"===n){var l=t.modules.find(function(e){return e.id==r});l&&l.taskIds.forEach(function(e){u+=d(c[e])})}else"task"===n&&(u+=d(c[s]));function d(e){return e?e.filter(function(e){return!o.find(function(t){return t.digest===e.digest})}).length:0}return u>0&&a.a.createElement("div",{className:"notification-icon"},u)},D=n(9),N=function(e){var t=e.task,n=e.assignments,a=e.notSubmittedUsers,s=r.useContext(_),i=s.notificationdigests,o=s.selectedCourse,u=s.seenDigests;return r.createElement(m.a,{onOpenClose:function(e){return function(e){return l.b(this,void 0,void 0,function(){var r,a=this;return l.d(this,function(s){switch(s.label){case 0:return e&&i[o.id][t.id]?[4,Object(v.k)(b.b.currentUser.mail+o.id)]:[3,2];case 1:r=s.sent(),console.log(u),n.forEach(function(e){return l.b(a,void 0,void 0,function(){var t;return l.d(this,function(n){switch(n.label){case 0:return[4,Object(v.k)(e.user+e.courseId+e.taskId+e.uploadDate+(e.metadata.driveFileId||""))];case 1:return t=n.sent(),u&&u.find(function(e){return e.digest===t})||D.c.seenStudentAssignments.add({id:Object(v.h)(),tags:[r],digest:t}),[2]}})})}),s.label=2;case 2:return[2]}})})}(e)},className:"task-container",title:r.createElement("div",{className:"notification-container"},r.createElement("span",null,t.name),r.createElement(S,{course:o,entity:"task",taskId:t.id,notificationdigests:i})),headerOpen:!1},r.createElement("div",{className:"ked_boxed"},r.createElement(w,{assignments:n}),r.createElement("br",null),r.createElement(T,{notSubmittedUsers:a})))},O=n(51),I=function(e){var t=e.module,n=e.tasks,a=Object(r.useContext)(E.a).intl,s=Object(r.useContext)(_),i=s.notificationdigests,o=s.selectedCourse,u=i[o.id];return n&&n.length>0&&r.createElement(r.Fragment,null,r.createElement(m.a,{title:r.createElement("div",{className:"notification-container"},r.createElement("span",null,t.name),r.createElement(S,{course:o,entity:"module",moduleId:t.id,notificationdigests:i})),headerOpen:!1},u&&Object.keys(u).length>0?r.createElement("div",null,n.map(function(e){var t=u[e.id]?u[e.id].map(function(e){return e.assignment}):[],n=o.studyGroups&&o.studyGroups.length>0&&function(e){var t=[];return o.studyGroups.forEach(function(n){var r=O.c[n].filter(function(t){return!e.find(function(e){return e.user===t.studentEmailAddress})}).map(function(e){return{displayName:e.studentFirstName+" "+e.studentLastName,email:e.studentEmailAddress}});r&&t.push.apply(t,l.g(r))}),t.map(function(e){var t=l.f(e.displayName.split(" ")),n=t[0],r=t.slice(1);return l.a({},e,{firstName:n,lastName:r.join(" ")})}).sort(Object(y.h)(["lastName","firstName"]))}(t);return(n.length>0||t.length>0)&&r.createElement(N,{key:e.id,task:e,assignments:t,notSubmittedUsers:n})})):r.createElement("div",null,a.formatMessage({id:"teacherView.noUploadedAssignmentsForModule",defaultMessage:"No assignments have been uploaded for this module"}))))},C=n(146),P=function(){var e=Object(r.useContext)(E.a).intl,t=l.f(Object(r.useState)([]),2),n=t[0],a=t[1],s=Object(r.useContext)(_),i=s.tasks,o=s.selectedCourse,u=s.school;return r.createElement(r.Fragment,null," ",o?r.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},r.createElement("h2",null,e.formatMessage({id:"teacherView.assignmentsViewTitle",defaultMessage:"Inlämningsuppgifter"})),r.createElement("p",null,e.formatMessage({id:"teacherView.assignmentsViewDescription",defaultMessage:{defaultDescriptionMessage:"Här listas samtliga inlämningsuppgifter i din/dina kurser du handleder.Klicka till höger för att välja kurs. Kursens uppgifter syns nedan. Du kan öppna/dölja varje modul."}})),r.createElement("h3",null,o.name,"-",o.description),r.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},r.createElement("div",{className:"horizontalItem top pull-right study-group-filter"},r.createElement(C.a,{school:u,courseCode:o.code,selectedStudyGroups:n,onUpdate:function(e){a(l.g(e))},placeholder:e.formatMessage({id:"teacherView.filterByStudygroupsPlaceholder",defaultMessage:"Välj studiegrupp"})}))),o.modules.map(function(e){var t=i.filter(function(t){return e.taskIds.find(function(e){return e===t.id})});return t.length>0?r.createElement(I,{tasks:t,key:e.id,module:e}):null})):null)},A=n(115),R=n(15),L=function(e){var t=e.courseBuilderUrl,n=Object(r.useContext)(E.a).intl,s=Object(r.useContext)(_),i=s.notificationdigests,o=s.teacherCourses,u=s.selectedCourse;return a.a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.a.createElement("div",{className:"ked_boxed"},a.a.createElement("h3",null,n.formatMessage({id:"teacherView.coursesViewTitle",defaultMessage:"Mina kurser/ uppgifter"})),a.a.createElement("div",{className:"taskContainer odd-even"},o.map(function(e){return a.a.createElement(a.a.Fragment,null,a.a.createElement("div",{key:e.description,className:"align-horizontal"},a.a.createElement("div",{className:"teacherSchoolCourse"},a.a.createElement("div",{className:"horizontalItem top pull-right"},a.a.createElement("a",{target:"_blank",href:Object(R.f)(t,{})+"#/courses/"+e.id+"/edit",className:"editItem"})),a.a.createElement("div",{className:"horizontalItem top"},a.a.createElement("div",{className:"notification-container"},a.a.createElement(A.a,{className:u&&u.id===e.id?"selected":"",to:"/overview/course/"+e.id+"/assignments"},e.name," - ",e.description),a.a.createElement(S,{notificationdigests:i,entity:"course",course:e}))))))}))))},_=Object(r.createContext)({notificationdigests:{},selectedCourse:null,teacherCourses:[],seenDigests:[],school:"",tasks:[]}),j=Object(d.a)(function(e){var t,n=e.match,a=e.courseBuilderUrl,s=(s=n?n.params.courseId:null)||null,i=[],o=l.f(Object(r.useState)({assignments:{},digestIds:[]}),2),u=o[0],c=o[1],d=D.c.schools.tags("gymnasium").name(b.b.currentUser.school).include("courses").single().read(),m=d?d.courses:[];if(m){var p=b.b.currentUser.mail;m.forEach(function(e){e.modules.length>0&&(e.activatedBy&&e.activatedBy.url==p?i.push(e):e.responsibleTeachers.filter(function(e){return e.url==p}).length>0&&i.push(e))})}var f=((i=i.sort(Object(y.h)(["name","dateTime"])))?D.c.tasks.hasEdgesFrom(i.map(function(e){return e.id})).toValue().read():[]).filter(function(e){return!0===e.assignment}),g=d.name,k=i.map(function(e){return e.id}).join(","),E=i.find(function(e){return e.id===s}),w=(t=D.c.seenStudentAssignments).tags.apply(t,l.g(u.digestIds)).toValue().read();Object(r.useEffect)(function(){k&&g&&function(e,t){l.b(this,void 0,void 0,function(){var n,r,a,s,o,u,d;return l.d(this,function(l){switch(l.label){case 0:n=b.b.kedBackendClient.http,l.label=1;case 1:return l.trys.push([1,7,,8]),[4,n.get("assignments/notificationdigests",{school:e,courseIds:t})];case 2:return 200===(r=l.sent()).status?[3,4]:(a=v.c.bind,s=[void 0,r.status],[4,r.text()]);case 3:throw new(a.apply(v.c,s.concat([l.sent()])));case 4:return[4,r.json()];case 5:return o=l.sent(),[4,Promise.all(i.map(function(e){return Object(v.k)(b.b.currentUser.mail+e.id)}))];case 6:return u=l.sent(),c({digestIds:u,assignments:o}),[3,8];case 7:return d=l.sent(),Object(y.n)(d),[3,8];case 8:return[2]}})})}(g,k)},[g,k,E]);var T={notificationdigests:u.assignments,selectedCourse:E,teacherCourses:i,seenDigests:w,school:g,tasks:f};return r.createElement(_.Provider,{value:T},r.createElement(h.a,{left:r.createElement(P,null),right:r.createElement(L,{courseBuilderUrl:a}),rightWidth:5}))}),x=n(54),G=n(8);n.d(t,"a",function(){return U});var U=Object(x.a)(Object(G.d)(function(e){var t=e.courseBuilderUrl;return a.a.createElement(s.a,null,a.a.createElement("div",{className:"teacher-view"},a.a.createElement(i.a,{path:"/",exact:!0,render:function(){return a.a.createElement(o.a,{to:"/overview"})}}),a.a.createElement(i.a,{exact:!1,path:"/overview/course/:courseId/assignments"},a.a.createElement(u.a,{fallback:a.a.createElement(c.a,null)},a.a.createElement(j,{courseBuilderUrl:t})))))}))},19:function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,i=e.backgroundColor,o=e.progressColor,u=[];if(n>s)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var c=1;c<=n;c++)u.push(a.createElement("svg",{key:c},a.createElement("circle",{className:"circle-chart-background",fill:c>r?i:o,cx:"8",cy:"8",r:"8"})));return u},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return i});var i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,i=t.className,o=t.children,u=t.headerClassName,c=t.contentClassName,l=t.displayProgress,d=t.progressData,h=t.inactivated,m=t.inactivatedRender,p=this.state.headerOpen;return h?"titleAndChildren"===m?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,n),a.createElement(a.Fragment,null,o)):a.createElement(a.Fragment,null,o):a.createElement("div",{className:(i||"")+" openClose"+(p?" open":"")},a.createElement("div",{className:"openHeader"+(u?" "+u:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),l&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(c?" "+c:"")},o))},t}(a.Component)},2:function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return i}),n.d(t,"k",function(){return u}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return l}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return h}),n.d(t,"o",function(){return m}),n.d(t,"n",function(){return p}),n.d(t,"l",function(){return f}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return b}),n.d(t,"e",function(){return v}),n.d(t,"j",function(){return y}),n.d(t,"m",function(){return k});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function i(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var o=[].concat;function u(e){return o.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function l(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var i=t[r],o=n[r];return i===o?0:null==i?-1:null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function h(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function m(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function p(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function f(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],i=t(s),o=n[i];o?o.push(s):n[i]=[s]}return n}function b(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function v(e,t){var n,a,s={};try{for(var i=r.h(t),o=i.next();!o.done;o=i.next()){var u=o.value;u in e&&(s[u]=e[u])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(n)throw n.error}}return s}function y(e,t){var n=b(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function k(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var i=n[a];if(r[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},20:function(e,t,n){"use strict";var r=n(3),a=n(17),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=n(12);function o(e){e.resources||(e.resources=[])}function u(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var l=JSON.parse(c),d=l.time,h=l.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=h)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return u(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return u(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var m=new s,p=Date.now(),f=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,m.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-p>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[r.sent()]),m.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},b=function(e){function t(t,n,r){var a="string"!=typeof n?n:new f(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return m}),n.d(t,"b",function(){return f}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return b})},21:function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"},isPublic:!0},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"},isPublic:!0},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"},isPublic:!0},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"},isPublic:!0},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"},isPublic:!0},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{tasks:"tasks"},isPublic:!0},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],isPublic:!1},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],isPublic:!1},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"},isPublic:!1},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{},isPublic:!1},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{},isPublic:!1},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"},isPublic:!0},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"},isPublic:!0},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"},isPublic:!0},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"},isPublic:!0},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}},isPublic:!0},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"],isPublic:!0},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"],isPublic:!0},seenStudentAssignments:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{},isPublic:!0},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{},isPublic:!1}}}},22:function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return u}),n.d(t,"a",function(){return c});var r=n(1),a=n(6),s=n.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e,t){var n=null;n=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var r=s()(n.toString(),"YYYY");return 1!=r.week()&&(r=r.clone().add(1,"week")),t?[s()(r.clone()).week(32).startOf("week"),s()(r.clone()).week(51).endOf("week")]:[s()(r.clone()),s()(r.clone()).week(25).endOf("week")]}function u(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},26:function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},27:function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(3),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(28).a)},28:function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(3),a=n(29),s=n(40),i=n(32),o=n(43),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,i){r=!0,e=a,t=s,s&&n?n(null,s,i):n&&n(a,null,i)});if(r){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,u=s.observer;return i.push(a),n=u,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],i={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,i,o){if(a=o,r&&(r.unsubscribe(),r=null),i)t(null,i,s);else try{var u=e(n);u&&"function"==typeof u.subscribe?r=u.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(u,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);u.prototype.map=Object(s.a)(u)},29:function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},292:function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(135),n(94),n(4)),s=n(0),i=n(111),o=n(137),u=n(138),c=n(16),l=n(8),d=n(54),h=n(189);Object(u.a)({v1:["css/dialog.css","css/grid-css-patch.css"],includeCSS:o.a,version:7,versionFolder:"css/delta-css/courseviewer"});var m=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props.intl;return a.a.currentUser?s.createElement(c.a.Provider,{value:{intl:e}},s.createElement(h.a,{courseBuilderUrl:"coursebuilder.html"})):s.createElement(i.a,null)},t}(s.Component),p=Object(d.a)(Object(l.d)(m));t.default=p},30:function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},32:function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(3),a=n(29),s=n(40),i=n(28),o=n(27),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);u.prototype._map=Object(s.a)(u)},34:function(e,t,n){"use strict";var r=n(37);n.d(t,"a",function(){return r.b}),n.d(t,"b",function(){return r.c})},37:function(e,t,n){"use strict";n(29),n(28);var r=n(32);n.d(t,"a",function(){return r.a});var a=n(27);n.d(t,"b",function(){return a.a});var s=n(43);n.d(t,"c",function(){return s.a})},4:function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(30);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},40:function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},43:function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},45:function(e,t){e.exports=ReactDOM},46:function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(5),i=n(4),o=n(134),u=n.n(o),c=n(13);function l(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return"urkund-status urkund-status-error";case"Submitted":return"urkund-status urkund-status-submitted";case"Accepted":return"urkund-status urkund-status-accepted";case"Analyzed":return"urkund-status urkund-status-analyzed"}}function d(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return e.ExternalId?"Kunde inte tas emot av urkund. Felkod: "+e.Status.ErrorCode+"\nExternal ID: "+e.ExternalId+"\nFelmeddelande: "+e.Status.Message:e.Status.Message;case"Submitted":return"Filen är uppladdad till Urkund. Klicka för att uppdatera status.";case"Accepted":return"Filen analyseras fortfarande av Urkund. Klicka för att uppdatera status.";case"Analyzed":return"Rapport skapad. Klicka för att öppna rapporten i nytt fönster"}}function h(e){if(!e||!e.Status)return"";switch(e.Status.State){case"Error":return"urkund-significance-error";case"Submitted":return"urkund-significance-submitted";case"Accepted":return"urkund-significance-accepted"}var t=e.Report;return t?t.Significance<1?"urkund-significance urkund-significance-0":t.Significance<10?"urkund-significance urkund-significance-1":t.Significance<25?"urkund-significance urkund-significance-2":t.Significance<40?"urkund-significance urkund-significance-3":t.Significance<55?"urkund-significance urkund-significance-4":t.Significance<70?"urkund-significance urkund-significance-5":t.Significance<85?"urkund-significance urkund-significance-6":t.Significance<99.9?"urkund-significance urkund-significance-7":t.Significance>=99.9?"urkund-significance urkund-significance-8":"":""}function m(e,t){var n,r=e.metadata;try{n=r.urkundResponse&&JSON.parse(r.urkundResponse)}catch(e){n=null}var s=n&&n[0];return!s&&e.metadata.urkundUploadError&&(s={Status:{ErrorCode:-1,Message:e.metadata.urkundUploadError,State:"Error"},ExternalId:e.metadata.urkundExternalId}),e.isRefreshing?a.createElement("td",{colSpan:2},a.createElement(c.a,null)," Uppdaterar..."):s?a.createElement(a.Fragment,null,a.createElement("td",{className:"urkund-status-col"},a.createElement("a",{href:s.Report&&s.Report.ReportUrl,onClick:function(n){-1!==["Accepted","Submitted"].indexOf(s.Status.State)&&(n.preventDefault(),n.stopPropagation(),t(e))},target:"_blank",title:d(s)},a.createElement("div",{className:l(s)}))),a.createElement("td",{className:"urkund-status-col"},a.createElement("div",{className:h(s)},s.Report&&"number"==typeof s.Report.Significance?s.Report.Significance.toFixed()+"%":" "))):a.createElement("td",{colSpan:2})}function p(e,t){return r.g([t],e.filter(function(e){var n=e.user,r=e.filename;return n!==t.user||r!==t.filename}))}function f(e){return r.b(this,void 0,void 0,function(){var t,n,a,o,c;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),[4,i.b.kedBackendClient.http.fetch(e.mediaLink,"get",{})];case 1:return(t=r.sent()).status>=400?(n=s.c.bind,a=[void 0,t.status],[4,t.text()]):[3,3];case 2:throw new(n.apply(s.c,a.concat([r.sent()])));case 3:return[4,t.blob()];case 4:return o=r.sent(),u()(o,e.filename,e.contentType),[3,6];case 5:return c=r.sent(),this.setState({error:"Kunde inte ladda ned filen. "+(c.message||c)}),console.error(c),[3,6];case 6:return[2]}})})}function g(e){var t=e.file,n=t.metadata,r=n.driveFileIconUrl,s=n.driveFileUrl,i=t.filename.substr(0,t.filename.lastIndexOf("."));return a.createElement("div",{className:"align-horizontal spaced"},a.createElement("div",{className:"horizontalItem top"},a.createElement("img",{className:"file-icon",src:r})),a.createElement("div",{className:"horizontalItem top"},a.createElement("span",null,a.createElement("a",{target:"_blank",href:s},i))))}n.d(t,"c",function(){return m}),n.d(t,"d",function(){return p}),n.d(t,"b",function(){return f}),n.d(t,"a",function(){return g})},47:function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(22),i=n(6),o=n.n(i);var u=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),c=n(2),l=n(55),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var h,m=function(){function e(t,n,s,i){var o=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=i;var u=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){u(e)&&(o[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),i={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))u(o);function u(t){Object.keys(t).forEach(function(o){!s.hasOwnProperty(o)&&n(o)&&(s[o]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var u=JSON.stringify(r.g([o],n)),c=i[u];if(void 0!==c){if(c.promise)throw c.promise;if(c.error)throw c.error;if(c.timeout>Date.now())return c.value}try{var l=t[o].apply(e,n).then(function(e){i[u]={timeout:Date.now()+a,value:e}}).catch(function(e){i[u]={timeout:Date.now()+a,error:e}});throw i[u]={timeout:Date.now()+a,promise:l},l}catch(e){if(e.then)throw e;i[u]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:u})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw o=u.sent(),console.error("Error from EDS: "+o),new Error(Object(c.a)(h||(h=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,u,c,d,h,m,p;return r.d(this,function(r){switch(e){case"en_sin":return[2,l.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,l.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=Object(s.d)(t,!0),i=Object(s.d)(t,!1),u=a[0],c=i[0],d=a[1],h=i[1],m={startDate:new Date(u.year(),u.month(),u.date()).toDateString(),endDate:new Date(u.year(),d.month(),d.date()).toDateString()},p={startDate:new Date(c.year(),c.month(),c.date()).toDateString(),endDate:new Date(c.year(),h.month(),h.date()).toDateString()},[2,{firstTerm:m,secondTerm:p,holidays:n}]}return[2]})})},e}(),p=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new u(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new u({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},5:function(e,t,n){"use strict";var r=n(17);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j}),n.d(t,"k",function(){return r.k})},51:function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"b",function(){return s}),n.d(t,"c",function(){return i});var r=function(e,t,n){for(var r=[],a=t;a<=n;a++)r.push({schoolName:"KED",tuitionGroupName:e,studentFirstName:"Student "+a,studentLastName:"Classroom",studentEmailAddress:"student"+a+".classroom@kedschools.com"});return r.push({schoolName:"KED",tuitionGroupName:e,studentFirstName:"Andrei",studentLastName:"Spatarelu",studentEmailAddress:"andrei.spatarelu@vemendo.se"}),r},a=[{schoolName:"KED",teacherFirstName:"Teacher 1",teacherLastName:"Classroom",teacherEmailAddress:"teacher1.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 2",teacherLastName:"Classroom",teacherEmailAddress:"teacher2.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 3",teacherLastName:"Classroom",teacherEmailAddress:"teacher3.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Carl",teacherLastName:"Holmberg",teacherEmailAddress:"carl@kedschools.com"},{schoolName:"KED",teacherFirstName:"David",teacherLastName:"Fahlander",teacherEmailAddress:"david.fahlander@kedschools.com"}],s={"DJUSÄL01":[{schoolName:"KED",tuitionGroupName:"IDR1_Gr1 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"IDR1_Gr2 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"IDR1_Gr3 (180816-190614)",courseCode:"DJUSÄL01"}],DJUDJI0:[{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr1 (180816-190614)",courseCode:"DJUDJI0"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",courseCode:"DJUDJI0"}],KEMKEM01:[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",courseCode:"KEMKEM01"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",courseCode:"KEMKEM01"}],BIOBIO01:[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",courseCode:"BIOBIO01"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",courseCode:"BIOBIO01"}],SVESVE03:[{schoolName:"KED",tuitionGroupName:"SVE3_Gr1 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr2 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr3 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr4 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr5 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr6 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr7 (180816-190614)",courseCode:"SVESVE03"}]},i={"IDR1_Gr1 (180816-190614)":r("IDR1_Gr1 (180816-190614)",1,12),"IDR1_Gr2 (180816-190614)":r("IDR1_Gr2 (180816-190614)",13,22),"IDR1_Gr3 (180816-190614)":r("IDR1_Gr3 (180816-190614)",23,34),"DJUDJ_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr1 (180816-190614)",studentFirstName:"Andrei",studentLastName:"Spatarelu",studentEmailAddress:"andrei.spatarelu@vemendo.se"}],"DJUDJ_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Student2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Carl",studentLastName:"Holmberg",studentEmailAddress:"carl@kedschools.com"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Student3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"David",studentLastName:"Fahlander",studentEmailAddress:"david.fahlander@vemendo.se"}],"KEM1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"David",studentLastName:"",studentEmailAddress:"david.fahlander@vemendo.se"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 9",studentLastName:"Classroom",studentEmailAddress:"student9.classroom@kedschools.com"}],"KEM1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 5",studentLastName:"Classroom",studentEmailAddress:"student5.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"}],"BIO1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 4",studentLastName:"Classroom",studentEmailAddress:"student4.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 10",studentLastName:"Classroom",studentEmailAddress:"student10.classroom@kedschools.com"}],"BIO1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 7",studentLastName:"Classroom",studentEmailAddress:"student7.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"}],"SVE3_Gr1 (180816-190614)":r("SVE3_Gr1 (180816-190614)",1,21),"SVE3_Gr2 (180816-190614)":r("SVE3_Gr2 (180816-190614)",22,44),"SVE3_Gr3 (180816-190614)":r("SVE3_Gr3 (180816-190614)",45,61),"SVE3_Gr4 (180816-190614)":r("SVE3_Gr4 (180816-190614)",62,78),"SVE3_Gr5 (180816-190614)":r("SVE3_Gr5 (180816-190614)",83,107),"SVE3_Gr6 (180816-190614)":r("SVE3_Gr6 (180816-190614)",108,124),"SVE3_Gr7 (180816-190614)":r("SVE3_Gr7 (180816-190614)",125,150)}},54:function(e,t,n){"use strict";n.d(t,"a",function(){return f});var r=n(1),a=n(8),s=n(85),i=n.n(s),o=n(86),u=n.n(o),c=n(60),l=n(61),d=n(0),h=n(7),m=n(6),p=n.n(m),f=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(i.a,u.a)),n.messages={sv:c,en:l},p()().locale(h.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:h.b.KED_LOCALE,messages:this.messages[h.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},55:function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},60:function(e){e.exports={"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"Lägg till eget arbetsmål","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Min progression","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.goals":"Egna lärandemål","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"Mål:","weekplanner.addLearningGoalTitle":"Lägg till eget lärandemål","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoal":"Eget lärandemål","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken","teacherView.coursesViewTitle":"Mina kurser/ uppgifter","teacherView.assignmentsViewTitle":"Inlämningsuppgifter","teacherView.assignmentsViewDescription":"Här listas samtliga inlämningsuppgifter i din/dina kurser du handleder. Klicka till höger för att välja kurs. Kursens uppgifter syns nedan. Du kan öppna/dölja varje modul.","teacherView.noUploadedAssignmentsForModule":"No assignments have been uploaded for this module","teacherView.assignmentStudentName":"Elev","teacherView.assignmentFileName":"Filnamn","teacherView.assignmentSubmittedAt":"Inlamnat","teacherView.assignmentReport":"Rapport","teacherView.assignmentGrade":"Niva","teacherView.noTaskAssignments":"Inga uppdrag uppladdade för denna uppgift","teacherView.notSubmittedAssignments":"Ej lämnat in","teacherView.remindBtn":"Påminn","teacherView.filterByStudygroupsPlaceholder":"Välj studiegrupp"}},61:function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline","teacherView.coursesViewTitle":"My Courses","teacherView.assignmentsViewTitle":"Assignments","teacherView.assignmentsViewDescription":"Here you cand find all the assignments you supervise. Click on the right menu to select course. The details are displayed below. You can open/hide each module.","teacherView.noUploadedAssignmentsForModule":"No assignments have been uploaded for this module","teacherView.assignmentStudentName":"Pupil","teacherView.assignmentFileName":"Filename","teacherView.assignmentSubmittedAt":"Submitted","teacherView.assignmentReport":"Report","teacherView.assignmentGrade":"Grade","teacherView.noTaskAssignments":"No assignments uploaded for this task","teacherView.notSubmittedAssignments":"Not submitted","teacherView.remindBtn":"Remind","teacherView.filterByStudygroupsPlaceholder":"Select study groups"}},64:function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.left,n=e.right,a=e.rightWidth;return r.createElement("div",{className:"sv-row sv-layout"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},r.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},r.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},r.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-"+(12-a)},t),r.createElement("div",{className:"sv-layout sv-column-"+a},n))))))}},68:function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"Administratör",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Andrei",mail:"andrei.spatarelu@vemendo.se",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"andrei"},{displayName:"Carl Holmberg",mail:"carl.holmberg@kunskapsgymnasiet.se",roles:["ADMIN","EMPLOYEE"],school:"Norrköping",username:"carl.holmberg@kunskapsgymnasiet.se"},{displayName:"Carl",mail:"carl@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"carl"},{displayName:"david.fahlander@kedschools.com",mail:"david.fahlander@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"david.fahlander@kedschools.com"},{displayName:"Teacher 1",mail:"teacher1.classroom@kedschools.com",roles:["EMPLOYEE"],school:"KED",username:"teacher1.classroom@kedschools.com"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-Lärare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Borås",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"Borås",schoolType:"Grundskolor"},{displayName:"Elev Borlänge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"Borlänge",schoolType:"Gymnasium"},{displayName:"Roll-lös",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},7:function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(26);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},75:function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("img",{style:{border:0,margin:0,padding:0},className:"ellipsis-loader"})}},9:function(e,t,n){"use strict";var r=n(4),a=n(3),s=n(17),i=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(21);function u(e,t){return o.a[e].relationships[t]}function c(e,t){var n=function(e){var t=function(e){return!0};return e.from?l(t,function(t){return t.dateTime>=e.from}):e.to?l(t,function(t){return t.dateTime<e.to}):e.ids?l(t,function(t){return e.ids.includes(t.id)}):e.name?l(t,function(t){return t.name===e.name}):e.tags?l(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function l(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function h(e){return"clear-branch"===e.op||"merge"===e.op}var m=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var s=a[r];localStorage.setItem("cache-bust-"+n+"-"+s,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+u(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),p=n(12);function f(e,t){for(var n=Object.keys(t),r=e,s=0,i=n;s<i.length;s++){var o=i[s];r===e&&(r=a.a({},e));var u=t[o];if(u&&"object"==typeof u){var c=Object.keys(u).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var l=function(e){var t=u[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var s=0,i=n;s<i.length;s++){var c=i[s];a.includes(c)||a.push(c)}break;case"$remove":var l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!l.includes(e)})}},d=0,h=c;d<h.length;d++){l(h[d])}continue}}r[o]=u}return r}function g(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,s=Object.keys(t),i=a.a({},e),o=0,u=s;o<u.length;o++){var c=u[o],l=t[c];if(l&&"object"==typeof l){var d=Object.keys(l).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var h=function(e){var t=l[e];switch(e){case"$unset":r?delete i[c]:i[c]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var s=o.$remove;Array.isArray(s)&&(o.$remove=s.filter(function(e){return!n.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(n):n.slice(),o.$add=d;break;case"$remove":var o,u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!u.includes(e)}),0===o.$add.length&&delete o.$add),s=(s=o.$remove)?s.concat(u):u.slice(),o.$remove=s}},m=0,p=d;m<p.length;m++){h(p[m])}continue}}i[c]=l}return i}var b=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(s=r[n]).op||s.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==s.op||s.targetBranchId&&s.branchId!==this.query.branchId&&s.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===s.op&&(s.deltaDoc.tags&&this.query.tags||s.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:i=this.getDataWithMutationsApplied(e,!1,this.data),this.data=i,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,s=this.includes,i=this.query,o=i.hasEdgesFrom?[].concat(i.hasEdgesFrom||[]):[],c=i.tags?[].concat(i.tags||[]):[];switch(t.op){case"update":return Object(p.f)(e,function(e){if(e.id===t.id){var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return s.forEach(function(r){var s,i=e[r];if(i){var o=Object(p.f)(i,function(e){if(e.id!==t.id)return e;var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==i&&(e=a.a({},e,((s={})[r]=o,s)))}}),e});case"add":if(r===t.table&&i.tags){var l=[].concat(i.tags);if(t.doc.tags&&t.doc.tags.some(function(e){return l.includes(e)}))return e.concat([t.doc])}return e;case"add-related":if(r===t.table&&-1!==s.indexOf(t.graphProp))return Object(p.f)(e,function(e){var r;if(e.id!==t.id)return e;var s=a.a({},t.relatedDoc);return n&&(s.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([s]),r))});if(i.hasEdgesFrom&&o.includes(t.id)&&r===u(t.table,t.graphProp)){if(!i.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return i.ids&&i.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==s.indexOf(t.graphProp)?Object(p.f)(e,function(e){var r,s=e[t.graphProp];return s?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?s.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):s.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):i.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(i.include){var h=s.map(function(e){return{label:e,table:u(r,e)}}).filter(function(e){return e.table===t.table});if(h.length>0)return Object(p.f)(e,function(e){return h.forEach(function(r){var s,i=r.label,o=e[i];o&&(e=a.a({},e,((s={})[i]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),s)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),v=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new i(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return b.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesFrom",e)},t.prototype.hasEdgesTo=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesTo",e)},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:m.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new s.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.add=function(e){this.repo.writer.mutate([{op:"add",id:e.id,table:this.table,doc:e}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(32).a),y=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===b.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var s=a.find(function(t){return o.a[r.table].relationships[t]===e});if(s){for(var i={},u=0,l=r.data;u<l.length;u++){var d=l[u];c(t,d[s]).forEach(function(e){return i[e.id]=e})}var h=Object.keys(i).map(function(e){return i[e]});return t.ids.every(function(e){return h.some(function(t){return t.id===e})})?{value:h}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var m=c(t,r.data);return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}},s=0,i=this.queries;s<i.length;s++){var u=a(i[s]);if("object"==typeof u)return u.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,s=this.findQuery(n,r);s?s.timeoutHandle&&(clearTimeout(s.timeoutHandle),s.timeoutHandle=null):(s=new b(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(s)),s.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,s=(n.repo,this.findQuery(r,a));s&&(s.unsubscribe(e),0===s.subscriptions.length&&(s.timeoutHandle=setTimeout(function(){0===s.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==s}))},this.queries.length>50?500:3e5)))},e}(),k=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return h(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"add"===r.op?r.table===e:"delete"===r.op?r.table===e||n.some(function(t){return u(e,t)===r.table}):!!h(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return u(e,t)})).some(function(e){return u(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),s=e.length,i=function(t){var s=e[t];if("update"===s.op){var i=r.findIndex(function(e){return"update"===e.op&&e.branchId===s.branchId&&e.id===s.id});i>=0&&(n[t]=a.a({},s,{deltaDoc:g(s.deltaDoc,r[i].deltaDoc)}),r.splice(i,1))}},o=0;o<s;++o)i(o);return n.concat(r)},e}(),E=n(37);function w(e,t,n,r,s,i){for(var o=function(n){switch(n.op){case"add-related":i||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:s}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(i||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:s,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((u=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var o=t[u];t=t.slice(0,u).concat([a.a({},o,{$meta:r?"removing":"persisted"})],t.slice(u+1))}else t=t.slice(0,u).concat(t.slice(u+1));break;case"update":if(n.branchId!==e)return"continue";var u;if((u=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!i)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[s],$meta:r?"adding":"persisted"}].concat(t);else{var c=t[u],l=c.contributors.slice();l.includes(s)||l.push(s);var d=g(c.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:l,$meta:r?"updating":"persisted"}].concat(t.slice(0,u),t.slice(u+1)):t.slice(0,u).concat(t.slice(u+1))}}},u=0,c=n;u<c.length;u++){var l=o(c[u]);if("object"==typeof l)return l.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var s=a[r],i=this.lookup[s];if(i.value){var o=w(i.query.branchId,i.value,e,n,this.getUserDisplayName(),!!i.query.tags);null===o&&(n||i.fetch()),o!==i.value&&(i.optimisticValue=o,n||(i.value=o),i.notify(o))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new S(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),S=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=s.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(s.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),D=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),s=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),m.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(k.merge(e,s),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return i=a.sent(),this.persistedVersion.dispatchError(i),i&&i.name&&i.name.startsWith("http4")?(this.dispatchError(i,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(i,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new s.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add":t.add(e.table,e.doc);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),N=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),O=function(){function e(e,t,n,r,a,s,i,u){var c=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=s,this.writer=i,this.cacheOptimized=u,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new k),s||(this.querySet=new y(this.mutationQueue)),i||(this.writer=new D(this.mutationQueue,this.querySet,e,t,n)),Object.keys(o.a).forEach(function(e){var t=new v(c,e,r||{});u&&(t=t.cacheOptimized()),c[e]=t}),this.deltas=new N(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new v(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var I=n(5),C=n(7);n.d(t,"c",function(){return P}),n.d(t,"d",function(){return A}),n.d(t,"b",function(){return R}),n.d(t,"a",function(){return L});var P=new O(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),A=Object(I.i)(C.b.KED_REALM),R={standardSchool:P.schools.name("standard").cacheOptimized().single(),get mySchool(){return P.schools.name(r.a.currentUser.school).cacheOptimized().single()}},L={getBranchId:function(e,t){return e.switchMap(function(e){return P.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return P.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return P.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(I.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return P.courseBlocks.tags(e).idsOnly().concat(P.courseContents.tags(e).idsOnly()).concat(P.courseTabs.tags(e).idsOnly()).concat(P.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},93:function(e,t,n){"use strict";(function(e){var t=n(7);t.b.ENVIRONMENT="production",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://api.kedschools.se/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,n(130))},94:function(e,t,n){"use strict";n(93);var r=n(1),a=n(14),s=n(20),i=n(5),o=n(7),u=n(4),c=n(15),l=n(2);function d(e,t,n){var s=Object(a.b)(t),i=Object(l.e)(s,c.a),o=r.f(Object(a.c)(e),2),u=o[0],d=o[1],h=Object(a.b)(d);return u+Object(a.a)(r.a({},h,i,{scopes:n.join(",")}))}function h(e,t){return e+"/"+t}function m(e,t,n){return new i.e(s.c,s.d,e+t.mail+location.search,o.b.KED_CLIENT_ID,o.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var p,f,g=u.a.currentUser&&u.a.currentUser.mail;if(g)if(o.b.KED_TOKEN_PATH){var b=d(o.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);u.a.bearerProvider=(f=h(p=b,g),new s.b(p,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){u.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,f),{token:t.token,expires:Date.now()+354e4}},f)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(u.a.currentUser=JSON.parse(t))}(h(b,g));var v=d(o.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"]);u.a.googleTokenProvider=function(e,t){var n=h(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(v,g)}else{if(!(o.b.KED_TOKEN_URL&&o.b.KED_CLIENT_ID&&o.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");u.a.bearerProvider=m(o.b.KED_TOKEN_URL,u.a.currentUser,["kedbackend","EDS"]),u.a.googleTokenProvider=m(o.b.KED_TOKEN_URL+"/google",u.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"])}u.a.kedBackendClient=new s.a(o.b.KED_API_URL,u.a.bearerProvider);var y=n(47);u.a.edsClient=new y.b(s.c,o.b.EDS_API_URL,u.a.bearerProvider,function(){return u.a.currentUser.mail})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,