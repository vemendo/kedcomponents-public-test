var kedcomponents=function(e){function t(t){for(var r,o,i=t[0],u=t[1],c=t[2],d=0,m=[];d<i.length;d++)o=i[d],a[o]&&m.push(a[o][0]),a[o]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(l&&l(t);m.length;)m.shift()();return s.push.apply(s,c||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,i=1;i<n.length;i++){var u=n[i];0!==a[u]&&(r=!1)}r&&(s.splice(t--,1),e=o(o.s=n[0]))}return e}var r={},a={5:0},s=[];function o(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var i=window.webpackJsonp_name_=window.webpackJsonp_name_||[],u=i.push.bind(i);i.push=t,i=i.slice();for(var c=0;c<i.length;c++)t(i[c]);var l=u;return s.push([216,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return o}),n.d(t,"k",function(){return u}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return l}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return f}),n.d(t,"n",function(){return p}),n.d(t,"l",function(){return h}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return y});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function o(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var i=[].concat;function u(e){return i.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function l(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var o=t[r];if(null==o)return-1;var i=n[r];return null==i?1:0===s.length?a(o,i):e(o,i,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function f(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function p(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function h(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],o=t(s),i=n[o];i?i.push(s):n[o]=[s]}return n}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function b(e,t){var n,a,s={};try{for(var o=r.h(t),i=o.next();!i.done;i=o.next()){var u=i.value;u in e&&(s[u]=e[u])}}catch(e){n={error:e}}finally{try{i&&!i.done&&(a=o.return)&&a.call(o)}finally{if(n)throw n.error}}return s}function k(e,t){var n=v(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function y(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var o=n[a];if(r[a]!==o)return!1;if(e[o]!==t[o])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(28);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(24);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,,,function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"}),"Â ")}},function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(16);n.d(t,"a",function(){return o}),n.d(t,"c",function(){return u}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return l}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return f});var o=["user","role","school","debug","testVersion","testversion","schoolType","schooltype"];function i(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function u(e,t){return i(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function l(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,o=Object(s.b)(location.search),i=r.a({},o,{role:t,school:n}),u=Object(s.a)(i);a?location.href=""+a+u:(location.hash="#",location.search=u)}};function m(e){d.actAs(e)}function f(e,t){var n,a,i=Object(s.b)(location.search),u={};try{for(var c=r.h(o),l=c.next();!l.done;l=c.next()){var d=l.value;i[d]&&(u[d]=i[d])}}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var m=Object(s.a)(r.a({},u,t)),f=e.indexOf("#");return f>=0?""+e.substr(0,f)+m+e.substr(f):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return i}),n.d(t,"e",function(){return u});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function o(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function i(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),o=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[o++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function u(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],o=t(s);o!==s&&(n===e&&(n=e.slice()),n[r]=o)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return o}),n.d(t,"c",function(){return i});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],o=t[1];return a[n?s.toLowerCase():s]=o}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function o(e){return"?"+s(e)}function i(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},,function(e,t,n){"use strict";var r=n(4),a=n(15),s=n(29),o=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,o){return r.b(this,void 0,void 0,function(){var i,u,c,l,d,m,f,p,h,g,v;return r.d(this,function(b){switch(b.label){case 0:return o&&"no-cache"===o.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),i=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),c=(u=this).authHeader,l=u.tokenInfo,d=u.bearerProvider,c||l||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=l=b.sent(),b.label=2;case 2:return l?l.expires<Date.now()?(console.log("Token expired. Refresh it:"),f=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:f.tokenInfo=l=b.sent(),b.label=4;case 4:c="Bearer "+l.token,b.label=5;case 5:return c&&(n.Authorization=c),p=this.baseUrl+e+(i?"?"+i:""),[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 6:return 401==(h=b.sent()).status&&this.bearerProvider?(g=h.headers.get("www-authenticate"),console.log("Got "+h.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(v=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return v.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 8:h=b.sent(),b.label=9;case 9:return[2,h]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),i=function(){function e(e,t,n,r,s,i,u){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=i,this.tokenQuery=u,this.tokenInfo={token:null,expires:0},this.client=new o(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),u=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var l=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return i}),n.d(t,"b",function(){return u}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return o}),n.d(t,"c",function(){return l});var d=function(){function e(e,t,n){this.http=new o(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,o,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(o=l.bind,i=[void 0,s.status],[4,s.text()]);case 2:throw new(o.apply(l,i.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,o,i;return r.d(this,function(u){switch(u.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=u.sent()).status?[3,3]:(o=l.bind,i=[void 0,s.status],[4,s.text()]);case 2:throw new(o.apply(l,i.concat([u.sent()])));case 3:return[4,s.json()];case 4:return[2,u.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=l.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(l,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(18),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),o=n(15);function i(e){e.resources||(e.resources=[])}function u(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return i(e)})}})}(e,n);break;case"tasks":i(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var l=JSON.parse(c),d=l.time,m=l.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return u(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return u(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var f=new s,p=Date.now(),h=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(o.a)(this.getBearer.bind(this)),this.refreshBearer=Object(o.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,f.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,o;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-p>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,o=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=o.apply(this,[r.sent()]),f.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},v=function(e){function t(t,n,r){var a="string"!=typeof n?n:new h(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return f}),n.d(t,"b",function(){return h}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return v})},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,o=e.backgroundColor,i=e.progressColor,u=[];if(n>s)return a.createElement("div",null," ",r," / ",n," ");for(var c=1;c<=n;c++)u.push(a.createElement("svg",{key:c},a.createElement("circle",{className:"circle-chart-background",fill:c>r?o:i,cx:"8",cy:"8",r:"8"})));return u},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return o});var o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,o=t.className,i=t.children,u=t.headerClassName,c=t.contentClassName,l=t.displayProgress,d=t.progressData,m=this.state.headerOpen;return a.createElement("div",{className:(o||"")+" openClose"+(m?" open":"")},a.createElement("div",{className:"openHeader"+(u?" "+u:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),l&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(c?" "+c:"")},i))},t}(a.Component)},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"b",function(){return o}),n.d(t,"d",function(){return i}),n.d(t,"c",function(){return u}),n.d(t,"a",function(){return c});var r=n(1),a=n(6),s=n.n(a);function o(e){return"AT"===e?[32,51]:[1,25]}function i(e){return e.month()>=6?[s()(new Date(e.year(),7,1)),s()(new Date(e.year(),11,31))]:[s()(new Date(e.year(),0,1)),s()(new Date(e.year(),6,31))]}function u(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(33),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(53),s=n(3),o=n(6),i=n.n(o),u=n(70),c=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(u.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(i()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return i()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),l=n(5),d=n(48);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return f});var m=s.a.userTasksRepo,f=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,o,u;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,c.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,o=i()(s).week(),[2,{from:(u=Object(d.a)(i()(s).year(),o)).notBefore,to:u.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,u,c,l;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,o=a(),u=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},u,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:i()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:i()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return c=r.sent(),0===(l=c.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&l.push(e),[4,this.update(l,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e){return r.b(this,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return(t=this.persistedState)?[3,2]:[4,c.load(this.options.user)];case 1:t=r.sent(),r.label=2;case 2:return(n=new c(t)).weekDate=i()(e).startOf("week").valueOf(),n.save(),this.persistedState=n,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(l.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new l.b("email",t.getCurrentUser().mail,"S"),new l.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);m||(m=s.a.userTasksRepo=new f(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(30).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(42),o=n(35),i=n(47),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,o){r=!0,e=a,t=s,s&&n?n(null,s,o):n&&n(a,null,o)});if(r){var s=i.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var o=s.subscriptions,u=s.observer;return o.push(a),n=u,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new o.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],o={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),s[0]=e,null!==s[1]&&t(s,null,o)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),s[1]=e,null!==s[0]&&t(s,null,o)}),o})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,o,i){if(a=i,r&&(r.unsubscribe(),r=null),o)t(null,o,s);else try{var u=e(n);u&&"function"==typeof u.subscribe?r=u.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(u,null,a)}catch(o){t(null,o,a)}}),s})},t}(a.a);u.prototype.map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";var r=n(65);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(42),o=n(30),i=n(29),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new i.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new o.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);u.prototype._map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r,a=n(1),s=n(0),o=n(2),i=function(e){var t=e.onClick,n=e.className,i=e.style,u=e.title;return s.createElement("div",{title:u||Object(o.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:i})}},,,,function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(6),o=n.n(s),i=n(25);var u=function(){function e(e){var t="academicYear"in e?e:Object(i.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(i.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(i.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),c=n(2),l=n(51),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return f}),n.d(t,"a",function(){return p});var m,f=function(){function e(t,n,s,o){var i=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=o;var u=function(e){return"function"==typeof i[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){u(e)&&(i[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(i[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),o={},i=e;i&&i!==Object.prototype;i=Object.getPrototypeOf(i))u(i);function u(t){Object.keys(t).forEach(function(i){!s.hasOwnProperty(i)&&n(i)&&(s[i]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var u=JSON.stringify(r.g([i],n)),c=o[u];if(void 0!==c){if(c.promise)throw c.promise;if(c.error)throw c.error;if(c.timeout>Date.now())return c.value}try{var l=t[i].apply(e,n).then(function(e){o[u]={timeout:Date.now()+a,value:e}}).catch(function(e){o[u]={timeout:Date.now()+a,error:e}});throw o[u]={timeout:Date.now()+a,promise:l},l}catch(e){if(e.then)throw e;o[u]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:u})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,o,i;return r.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,o.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw i=u.sent(),console.error("Error from EDS: "+i),new Error(Object(c.a)(m||(m=r.e(["Kunde tyvÃ¤rr inte ladda terminsmÃ¥l eller avklarade steg frÃ¥n EDS. FÃ¶rsÃ¶k igen senare..."],["Kunde tyvÃ¤rr inte ladda terminsmÃ¥l eller avklarade steg frÃ¥n EDS. FÃ¶rsÃ¶k igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,o;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,o.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,u,c,d,m,f,p,h,g;return r.d(this,function(r){switch(e){case"en_sin":return[2,l.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,l.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=t.getMonth()>=6,s=a?t.getFullYear():t.getFullYear()-1,i=a?t.getFullYear()+1:t.getFullYear(),u=o()(s.toString(),"YYYY"),c=o()(i.toString(),"YYYY"),1!=u.week()&&(u=u.clone().add(1,"week")),1!=c.week()&&(c=c.clone().add(1,"week")),d=o()(u.clone()).week(32).startOf("week"),m=o()(u.clone()).week(51).endOf("week"),f=o()(c.clone()),p=o()(c.clone()).week(25).endOf("week"),h={startDate:new Date(s,d.month(),d.date()).toDateString(),endDate:new Date(s,m.month(),m.date()).toDateString()},g={startDate:new Date(i,f.month(),f.date()).toDateString(),endDate:new Date(i,p.month(),p.date()).toDateString()},[2,{firstTerm:h,secondTerm:g,holidays:n}]}return[2]})})},e}(),p=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new u(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new u({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(33),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),o()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),o()}};function o(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return o});var r=n(6),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function o(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},,function(e,t,n){"use strict";var r=n(11);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"VÃ¥grÃ¤t linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga lÃ¤nk",result:function(){var e=window.prompt("Ange lÃ¤nkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,s=window.prompt((void 0).promptMsg);if(s){var o=document.createElement("img");o.src=s,o.tabIndex=1,n=o,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),o.onfocus=t.onFocus,o.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(72),s=n(5),o=function(){function e(e){var t=this,n=e.table,s=e.getClient,o=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,o()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,i,u,c,l=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,o=n.table,i=a(),u=e.map(function(e){var n=l.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(u.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.do(function(e){return u.forEach(function(t){return e.put(o,t)})}).catch(function(n){return"http409"===n.name?i.list(o,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return i.do(function(e){return n.forEach(function(t){return e.put(o,t)})})}):Promise.resolve(s&&l.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return c=r.sent(),this.regenerateCacheBust(),u.forEach(function(e){e.$etag=c.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(u)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,o,i,u,c,l,d,m,f,p,h,g,v,b,k,y=this;return r.d(this,function(E){switch(E.label){case 0:return a=this.options,o=a.getClient,i=a.optimistic,u=a.table,c=a.getQueryOptions,l=o(),[4,c()];case 1:return d=E.sent(),m=[].concat(d.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),f=this.stripGraphs(e,m),i?[4,this.mem.insert(f.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:E.sent(),E.label=3;case 3:p=new s.a,h=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){p.link2(u,e.id,t,n.id)})};try{for(var s=r.h(m),o=s.next();!o.done;o=s.next()){a(o.value)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}p.add(u,e)};try{for(g=r.h(f),v=g.next();!v.done;v=g.next())b=v.value,h(b)}catch(e){t={error:e}}finally{try{v&&!v.done&&(n=g.return)&&n.call(g)}finally{if(t)throw t.error}}return[4,l.batch(p.mutationRequests).catch(function(t){return i&&y.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return k=E.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=k.newEtags[e.id]}),i?[4,this.mem.update(e)]:[3,6];case 5:return E.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:E.sent(),E.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o,i=this;return r.d(this,function(u){switch(u.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,o=n(),a?[4,this.mem.update(e.map(function(e){return i.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:u.sent(),u.label=2;case 2:return[4,o.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(i,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return u.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return u.sent(),[2]}})})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(11),o=new DOMParser,i={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function u(e){for(var t=o.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)c(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function c(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&i[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),l(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),s=a.name&&!!t[a.name.toLowerCase()];s||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),l(e)&&(t=!0),t}function l(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)c(n.item(r))&&(t=!0);return t}var d=n(74);n.d(t,"a",function(){return b});var m="wysiwyg-actionbar",f="wysiwyg-button",p="wysiwyg-content",h="wysiwyg-focusrect",g="wysiwyg-focuspoint",v="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||u(e.html)!==u(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(u(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:k(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(g)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),s=a.next();!s.done;s=a.next()){switch(s.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,o=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(o=o.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"LÃ¥t bilden flyta vÃ¤nster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"LÃ¥t bilden flyta hÃ¶ger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden pÃ¥ egen rad",result:function(){return e("unfloat")}}])));var i=this.state.focusRect,c=this.props,l=c.readOnly,b=c.reportNumChars,k=c.maxChars;return a.createElement("div",{className:this.props.className},!l&&a.createElement("div",{className:m},o.map(function(e,n){return a.createElement("button",{key:n,className:f,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:l?v:p,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:u(this.props.html)},contentEditable:!l,onPaste:function(e){if(!isNaN(k)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>k&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:NaN)}:null,onKeyPress:isNaN(k)?null:function(e){var t=e.target.innerText;t&&t.length>=k&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){l||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(s.a)("outdent"):Object(s.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),i&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:h,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:g+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:g+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:g+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:g+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function k(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},,function(e){e.exports={picker:"Integrate coursebuilder and subjectplanner with Google Picker",ksTutorComment:"Integrate KSTermplanner with tutor comments",kgTutorComment:"Integrate KSTermplanner  with tutor comments",termplannerCharts:"Integrate KSTermplanner with progress charts",weekplannerCharts:"Integrate Weekplanner with progress charts",teacherRights:"Activate course builder teacher rights",studyGroups:"Add study groups functionality"}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(23),o=n(14),i=n(75);function u(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var c=n(6),l=n.n(c),d=n(32),m=n(7),f=n(9),p=n(19),h=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,o=t.progressData,c=t.displayProgress,m=!!this.props.openCourses[n],p=(new d.a,this.context.intl);return a.createElement(s.a,{title:a.createElement("h5",null,n||a.createElement(f.a,{id:"userTasks.goals",defaultMessage:"Egna lÃ¤randemÃ¥l"})),headerOpen:m,className:n&&Object(i.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)},displayProgress:c,progressData:o},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"},"Â ",a.createElement("a",{className:"trash",href:"#",title:p.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lÃ¤randemÃ¥let och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=u(t),s=l()(t.deadline).startOf("day")<l()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:g(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:v(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:l()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(f.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmÃ¥l"}))),a.createElement("br",null))}))},t.contextType=p.a,t}(a.Component);function g(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(o.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function v(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(o.f)(m.b.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var b=n(5),k=n(2);var y=n(67),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(f.a,{id:"weekplanner.addLearningGoalTitle",defaultMessage:"LÃ¤gg till eget lÃ¤randemÃ¥l"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(f.a,{id:"weekplanner.addLearningGoal",defaultMessage:"MÃ¥l"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(f.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),w=n(26),T=n(46),N=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,o=this.props,i=(o.isTask,o.onSave),u=this.context.intl;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(f.a,{id:"customTask.addWorkGoalTitle",defaultMessage:"LÃ¤gg till eget arbetsmÃ¥l"})),a.createElement("hr",null),a.createElement(w.a,{label:u.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:u.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{rows:7,label:u.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:u.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"LÃ¤gg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:u.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return i(n,r,s)}},a.createElement(f.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=p.a,t}(a.Component),C=n(90),D=(n(70),n(33)),S=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,o=s.name,i=s.description,u=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:o,description:i,url:u}):r.a({},t)}))});else{var c={id:Object(b.h)(),name:o,description:i,url:u};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(c)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(f.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(f.a,{id:"addeditsubtask.addSubtask",defaultMessage:"LÃ¤gg till underuppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(f.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(f.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=p.a,t}(a.Component),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(S,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(S,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,o=t.deadline,i=t.subTasks,c=t.showCalendar,d=t.userTask,m=d.id,p=(d.courseName,this.props),h=p.onUpdate,g=p.onDelete,v=this.isModified(),b="customTask"===u(d),k=l()(d.deadline)<l()(),y=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,b?a.createElement(f.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmÃ¥l"}):a.createElement(f.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:b?y.formatMessage({id:"task.targetNameLabel",defaultMessage:"ArbetsmÃ¥lets namn"}):y.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:b?y.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du gÃ¶ra?"}):y.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),b&&a.createElement(a.Fragment,null,a.createElement(T.a,{rows:5,label:y.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:y.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"LÃ¤gg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:y.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(D.a,{label:y.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},o||c?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(C.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",nextMonthButtonLabel:"",previousMonthButtonLabel:"",showWeekNumbers:!0,selected:o&&l()(o).toDate(),autoFocus:c,dateFormat:"YYYY-MM-dd",className:k?"expired":void 0,locale:y.locale,popperPlacement:b?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&l()(t).format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:y.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(f.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(D.a,{label:y.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},i&&i.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(f.a,{id:"task.addSubtask",defaultMessage:"LÃ¤gg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){v?h(function(e){e.name=n,e.description=r,e.url=s,e.deadline=o}):e.props.closeDialog()}},a.createElement(f.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(f.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){g(m)}},b?a.createElement(f.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmÃ¥l"}):a.createElement(f.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den hÃ¤r uppgiften"})))))},t.contextType=p.a,t}(a.Component),M=n(13),x=n(76),L=n(48),j=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.backgroundColor,r=e.progressColor,s=Math.round(t);return a.createElement("svg",{className:"progress-chart",width:"100%",height:"25"},a.createElement("rect",{fill:n,width:"100%",height:"100%",rx:"4"}),a.createElement("rect",{className:"fill",fill:r,width:s+"%",height:"100%",rx:"4"}),a.createElement("text",{className:"filled-text",textAnchor:"middle",x:"50%",y:"50%",dy:".3em"},s+"%"))},t.defaultProps={percentage:0,backgroundColor:"#F1F5F4",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return P});var P=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new x.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){this.props.env.userTasksRepo.changeWeek(l()(this.state.weekDate).add(-1,"week").toDate())},t.prototype.nextWeek=function(){this.props.env.userTasksRepo.changeWeek(l()(this.state.weekDate).add(1,"week").toDate())},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(E,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"LÃ¤randemÃ¥let kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(N,{isTask:!e,onSave:function(a,s,o){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,o)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(O,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet fÃ¥r inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(S,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lÃ¤randemÃ¥l samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var o;return r.d(this,function(r){switch(r.label){case 0:return o=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),dateTime:o+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,o,i,u;return r.d(this,function(c){switch(c.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:c.sent(),c.label=2;case 2:return c.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=Object(L.b)(l()(n).add(-1,"week")),s=Object(L.a)(l()(n).year(),a),[4,this.props.env.kedBackendClient.list("usertasks",{from:s.notBefore,to:s.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return o=(o=c.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),i=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),u=o.sort(Object(k.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:i+=1e3});return t.id=Object(b.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(u)];case 4:return c.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.getHeaderTitle=function(){return a.createElement("h4",null,a.createElement(f.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"}))},t.prototype.render=function(){var e=this,t=l()(this.state.weekDate).week(),n=d.b.weekplannerCharts,o=l()().week(),i=function(e){var t,n,a,s,o=[],i=Object(k.b)(e,function(e){return e.courseName||""});try{for(var u=r.h(Object.keys(i).sort().filter(function(e){return e}).concat(i[""]?[""]:[])),c=u.next();!c.done;c=u.next()){var l=c.value,d=i[l]||i[""],m=Object(k.b)(d,function(e){return e.learningGoal}),f=[];try{for(var p=r.h(Object.keys(m)),h=p.next();!h.done;h=p.next()){var g=h.value,v=m[g].sort(Object(k.g)("dateTime")),b=v.filter(function(e){return null==e.name})[0],y=b&&b.url;f.push({name:g,allTasks:v,url:y,step:v.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:v.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{h&&!h.done&&(s=p.return)&&s.call(p)}finally{if(a)throw a.error}}o.push({courseName:l,learningGoals:f})}}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return o}(this.state.userTasks),u=this.state,c=u.dialogs,m=u.weekTextsUT,p=u.strategy,g=u.assessment,v=u.isLoading,b=u.isCopyingTasks,E=m&&("adding"===m.$meta||"updating"===m.$meta),w=!!m&&p!==m.weekTexts.strategy,T=!!m&&g!==m.weekTexts.assessment,N=!E&&(w||T),C=function(e){var t={completedTasks:0,totalNumberOfTasks:0,subjectData:{}};return e.forEach(function(e){return e.learningGoals.forEach(function(n){var r=n.tasks.filter(function(e){return e.done}).length;t.subjectData[e.courseName]={completedNumberOfTasks:r,numberOfTasks:n.tasks.length},t.completedTasks+=r,t.totalNumberOfTasks+=n.tasks.length})}),t}(i),D=i.length>0?C.completedTasks/C.totalNumberOfTasks*100:0;return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===o?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!E&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},n&&this.getHeaderTitle(),a.createElement("div",{className:"widgets"},n?a.createElement("div",{className:"progressBar"},a.createElement(j,{percentage:D})):this.getHeaderTitle(),a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(f.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"})))))),i.length>0&&a.createElement("hr",null),i.map(function(t){return a.createElement(h,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)},displayProgress:n,progressData:C.subjectData[t.courseName]}))}),a.createElement("hr",null),v?a.createElement(M.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),a.createElement(f.a,{id:"weekplanner.learningGoal",defaultMessage:"Eget lÃ¤randemÃ¥l"})),a.createElement("div",{className:"btn",style:b?{opacity:.5}:void 0,onClick:function(t){return!b&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(f.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara frÃ¥n fÃ¶regÃ¥ende vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(f.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & UtvÃ¤rdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(f.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(f.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska gÃ¶ra fÃ¶r att lÃ¤ra mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:p&&p.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(f.a,{id:"weekplanner.evaluation",defaultMessage:"UtvÃ¤rdering"})),a.createElement("p",null,a.createElement(f.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.UtvÃ¤rdera i fÃ¶rhÃ¥llande till dina mÃ¥l."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:g&&g.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:N?{}:{opacity:.5},onClick:function(){return!E&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),N?a.createElement(f.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(f.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(y.a,{dialogs:c,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=p.a,t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r=n(1),a=n(9),s=n(88),o=n.n(s),i=n(89),u=n.n(i),c=n(59),l=n(60),d=n(0),m=n(7),f=n(6),p=n.n(f),h=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(o.a,u.a)),n.messages={sv:c,en:l},p()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},function(e){e.exports={"addeditsubtask.addSubtask":"LÃ¤gg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"LÃ¤gg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"FÃ¶r tillfÃ¤llet problem att spara data. Dina Ã¤ndringar sparades inte.","common.changesNotSavedUnauthorized":"Ãndringarna sparades inte p.g.a. otillrÃ¤cklig behÃ¶righet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"LÃ¤nk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"LÃ¤gg till eget arbetsmÃ¥l","customTask.enterNamePlhd":"Ange namn...","task.addSubtask":"LÃ¤gg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmÃ¥l","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den hÃ¤r uppgiften","task.removeWorkGoals":"Ta bort arbetsmÃ¥l","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"ArbetsmÃ¥lets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du gÃ¶ra?","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"TerminsmÃ¥l","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"VT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vÃ¤nta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.sprÃ¥k","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgÃ¤ngligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"HT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","tutorNoteDialog.weekComment":"Kommentar fÃ¶r vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida fÃ¶r komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmÃ¥l","userTasks.deleteLearningGoal":"Ta bort lÃ¤randemÃ¥let och dess uppgifter","userTasks.goals":"Egna lÃ¤randemÃ¥l","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"MÃ¥l:","weekplanner.addLearningGoalTitle":"LÃ¤gg till eget lÃ¤randemÃ¥l","weekplanner.confirmRemoveLearningObjectives":"Ta bort lÃ¤randemÃ¥l samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara frÃ¥n fÃ¶regÃ¥ende vecka","weekplanner.emptyLearningGoalErr":"LÃ¤randemÃ¥let kan inte vara tomt","weekplanner.evaluation":"UtvÃ¤rdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.UtvÃ¤rdera i fÃ¶rhÃ¥llande till dina mÃ¥l.","weekplanner.learningGoal":"Eget lÃ¤randemÃ¥l","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet fÃ¥r inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & UtvÃ¤rdering","weekplanner.strategyDescription":"Hur jag ska gÃ¶ra fÃ¶r att lÃ¤ra mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"VÃ¥grÃ¤t linje","wysiwyg.link":"Infoga lÃ¤nk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),o=n(6),i=n.n(o),u=n(5),c=n(27),l=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}n.d(t,"a",function(){return v});var m,f,p,h,g,v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){c.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){c.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,o;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),o={id:Object(u.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new u.b("email",s.a.currentUser.mail,"S"),new u.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(o.deadline=e.task.deadline),e.task?(o.task=[e.task],e.course?o.course=[e.course]:e.courseInfo&&(o.courseInfo=e.courseInfo)):o.siteVisionPageId=e.id,e.step&&(o.step=e.step),[4,Promise.all([c.b.setWeekPlannerBoxOpen(e.courseName,!0),c.b.insert([o])])]);case 1:return r.sent(),[3,4];case 2:return[4,c.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props.learningTasks,n=Object(l.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),s=this.state.confirmations,o=i()(this.state.weekDate).week(),u=i()().week(),c=o===u?"":o===u+1?Object(l.a)(m||(m=r.e(["fÃ¶r nÃ¤sta vecka (v",")"],["fÃ¶r nÃ¤sta vecka (v",")"])),o):o===u-1?Object(l.a)(f||(f=r.e(["fÃ¶r fÃ¶rra veckan (v",")"],["fÃ¶r fÃ¶rra veckan (v",")"])),o):Object(l.a)(p||(p=r.e(["fÃ¶r vecka ",""],["fÃ¶r vecka ",""])),o);return a.createElement("div",{className:"taskContainer"},t.map(function(t,i){var m=t.id,f=n[m]||{$meta:"deleted"},p="adding"===f.$meta||"deleting"===f.$meta,v="deleted"!==f.$meta&&"deleting"!==f.$meta,b=v?Object(l.a)(h||(h=r.e(["Ta bort uppgiften frÃ¥n egen veckoplanering ",""],["Ta bort uppgiften frÃ¥n egen veckoplanering ",""])),c):Object(l.a)(g||(g=r.e(["LÃ¤gg till uppgiften i egen veckoplanering ",""],["LÃ¤gg till uppgiften i egen veckoplanering ",""])),c),k=s.some(function(e){return m===e});return a.createElement("div",{key:t.id},a.createElement("div",{key:m,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"selectedBox"+(v?" selected":""),style:p?{opacity:.5}:{},onClick:function(){return p||o!==u?k?e.setState({confirmations:s.filter(function(e){return e!==m})}):e.setState({confirmations:r.g(s).concat(m)}):e.toggleTask(t)},title:b})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:t.url},t.name))),a.createElement(d,{visible:k,text:b,onConfirm:function(){e.toggleTask(t),e.setState({confirmations:s.filter(function(e){return e!==m})})},onCancel:function(){e.setState({confirmations:s.filter(function(e){return e!==m})})}}))}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return m});var r=n(1),a=n(53),s=n(3),o=n(2),i=n(5),u=n(43),c=n(25),l=n(6),d=n.n(l),m=s.a.hiddenCoursesRepo,f=function(){function e(){var e=this;this.result=null,this.subscribers=[],this.fullCourse=!1,this.notifySubscriber=function(t,n){try{t(n.fullCourse?e.result:e.result.filter(function(e){return e.visible}))}catch(e){console.error(e)}},this.kedRepo=new a.a({getClient:function(){return s.a.kedBackendClient},optimistic:!0,table:"userhiddencourses",user:s.a.currentUser?s.a.currentUser.mail:"",getQueryOptions:function(){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}});var t=this.init();Promise.all([t,this.kedCoursesPromise,this.edsCoursesPromise]).catch(function(e){return Object(o.n)(e)})}return e.prototype.init=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a=this;return r.d(this,function(o){switch(o.label){case 0:return e=s.a.bearerProvider?s.a.bearerProvider.getBearer():Promise.resolve({}),this.kedCoursesPromise=e.then(function(){return a.listKedCourses()}),this.edsCoursesPromise=e.then(function(){return a.listEDSCourses()}),n=!1,this.userHiddenCoursesPromise=new Promise(function(e){return t=function(t){n?a.userHiddenCoursesPromise=Promise.resolve(t):(n=!0,e(t))}}),[4,e];case 1:return o.sent(),this.kedRepo.mem.subscribe(function(e){return r.b(a,void 0,void 0,function(){var n,a,s,o,i=this;return r.d(this,function(u){switch(u.label){case 0:return[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise])];case 1:return n=r.f.apply(void 0,[u.sent(),2]),a=n[0],s=n[1],o=this,[4,this.createCoursesList(s,e,a)];case 2:return o.result=u.sent(),this.subscribers.forEach(function(e){return i.notifySubscriber(e.subscriber,e.options)}),t(e),[2]}})})}),[2]}})})},e.prototype.listKedCourses=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:return e=this.fullCourse,console.log("FullCourse: "+e),[4,s.a.kedBackendClient.list("schools",{role:"USER",name:s.a.currentUser.school,include:"activeCourses",flags:e?[]:["includeIdsAndNamesOnly"],cacheBust:s.a.currentUser.username})];case 1:return t=n.sent(),[2,Object(o.k)(t.map(function(e){return e.activeCourses})).sort(Object(o.g)("name"))]}})})},e.prototype.listEDSCourses=function(){var e=new u.a(Object(c.c)(d()())).period;return-1===s.a.currentUser.roles.indexOf("EMPLOYEE")?s.a.edsClient.getActiveCourses({periodName:e}):null},e.prototype.createCoursesList=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,u,c,l=this;return r.d(this,function(d){switch(d.label){case 0:return a=Object(o.c)(t.filter(function(e){return!e.show}),function(e){return e.name}),i=Object(o.c)(t.filter(function(e){return e.show}),function(e){return e.name}),u=s.a.currentUser.roles.some(function(e){return"STUDENT"===e}),c=e?Object(o.c)(e,function(e){return e.name}):{},[4,Promise.all(n.map(function(e){var t=e.id,n=e.name,s=e.description,o=e.modifiedBy;return r.b(l,void 0,void 0,function(){var e,l,d;return r.d(this,function(r){return e=c[n],d=(l=!u||null!=e)?!a[t]:!!i[t],o&&o.name&&!s&&(s=o.name+"s version"),[2,{id:t,name:n,description:s,visible:d,defaultVisible:l}]})})}))];case 1:return[2,d.sent().sort(function(e,t){var n=e.name,r=t.name;return n<r?-1:n>r?1:0})]}})})},e.prototype.hideCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.insert([{id:Object(i.h)(),name:e.id}])]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.delete(t.map(function(e){return e.id}))];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.showCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.delete(t.map(function(e){return e.id}))]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.insert([{id:Object(i.h)(),name:e.id,show:!0}])];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.subscribe=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,i;return r.d(this,function(u){switch(u.label){case 0:return this.fullCourse||!t.fullCourse?[3,3]:(this.fullCourse=t.fullCourse,this.kedCoursesPromise=this.listKedCourses(),[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise,this.userHiddenCoursesPromise])]);case 1:return n=r.f.apply(void 0,[u.sent(),3]),a=n[0],s=n[1],o=n[2],i=this,[4,this.createCoursesList(s,o,a)];case 2:i.result=u.sent(),u.label=3;case 3:return[4,this.userHiddenCoursesPromise];case 4:return u.sent(),this.notifySubscriber(e,t),this.subscribers.push({subscriber:e,options:t}),[2]}})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t.subscriber!==e})},e}();m||(m=s.a.hiddenCoursesRepo=new f)},,function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return u});var r=n(1),a=n(16),s=n(56),o=n(7),i=function(){function e(){var e,t;this._initialized=!1;var n=function(e){Object.defineProperty(a,e,{get:function(){return this._initialized||this.init(),this._features[e]},set:function(e){throw new Error("Feature flags cannot be set here")}})},a=this;try{for(var o=r.h(Object.keys(s)),i=o.next();!i.done;i=o.next()){n(i.value)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}}return e.prototype.init=function(){var e,t;if(!this._initialized){var n=(o.a.KED_FEATURES||"").split(",").map(function(e){return e.trim().toLowerCase()}),i=Object(a.b)(location.search,{toLower:!0});i.testversion&&(n=["*"]),i.features&&(n=i.features.split(",").map(function(e){return e.trim().toLowerCase()}));var u=n.includes("*");this._features={};try{for(var c=r.h(Object.keys(s)),l=c.next();!l.done;l=c.next()){var d=l.value;this._features[d]=u||n.includes(d.toLowerCase())}}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}this._initialized=!0}},e}(),u=new i},,function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),s=n(36),o=n(40),i=n(12),u=n.n(i),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&u()(Object(o.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return u()("body").attr("aria-disabled",n.length>0),u()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,i){var c;return a.createElement("div",{key:i},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){c=t,i===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":i<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||u()(Object(o.findDOMNode)(c)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(o.findDOMNode)(c);e.preventDefault(),u()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(6),a=n.n(r),s=n(7);"sv"===s.b.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"sÃ¶ndag_mÃ¥ndag_tisdag_onsdag_torsdag_fredag_lÃ¶rdag".split("_"),weekdaysShort:"sÃ¶n_mÃ¥n_tis_ons_tor_fre_lÃ¶r".split("_"),weekdaysMin:"sÃ¶_mÃ¥_ti_on_to_fr_lÃ¶".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[IgÃ¥r] LT",nextWeek:"[PÃ¥] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"fÃ¶r %s sedan",s:"nÃ¥gra sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en mÃ¥nad",MM:"%d mÃ¥nader",y:"ett Ã¥r",yy:"%d Ã¥r"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var o=function(){return a.a.apply(this,arguments).locale(s.b.KED_LOCALE)}},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},,function(e,t,n){"use strict";var r=n(11);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(r.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt((void 0).promptMsg);e&&Object(r.a)("insertImage",e)}}}},function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(7);r.b.ENVIRONMENT="test",r.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",r.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",r.b.KED_TOKEN_URL="",r.b.KED_CLIENT_ID="",r.b.KED_CLIENT_SECRET="",r.b.KED_REALM="SE1",r.b.KED_LOCALE=r.b.KED_LOCALE||"sv",r.b.KED_SCHOOL_LOCALE=r.b.KED_SCHOOL_LOCALE||"sv";var a=n(1),s=n(16),o=n(20),i=n(5),u=n(3),c=n(14),l=n(2);function d(e,t,n){var r=Object(s.b)(t),o=Object(l.e)(r,c.a),i=a.f(Object(s.c)(e),2),u=i[0],d=i[1],m=Object(s.b)(d);return u+Object(s.a)(a.a({},m,o,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function f(e,t,n){return new i.e(o.c,o.d,e+t.mail+location.search,r.b.KED_CLIENT_ID,r.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var p,h,g=u.a.currentUser&&u.a.currentUser.mail;if(g)if(r.b.KED_TOKEN_PATH){var v=d(r.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);u.a.bearerProvider=(h=m(p=v,g),new o.b(p,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){u.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,h),{token:t.token,expires:Date.now()+354e4}},h)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(u.a.currentUser=JSON.parse(t))}(m(v,g));var b=d(r.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);u.a.googleTokenProvider=function(e,t){var n=m(e,t);return new o.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,g)}else{if(!(r.b.KED_TOKEN_URL&&r.b.KED_CLIENT_ID&&r.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");u.a.bearerProvider=f(r.b.KED_TOKEN_URL,u.a.currentUser,["kedbackend","EDS"]),u.a.googleTokenProvider=f(r.b.KED_TOKEN_URL+"/google",u.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}u.a.kedBackendClient=new o.a(r.b.KED_API_URL,u.a.bearerProvider);var k=n(43);u.a.edsClient=new k.b(o.c,r.b.EDS_API_URL,u.a.bearerProvider,function(){return u.a.currentUser.mail})},,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(3),o=n(123),i=function(e){function t(t){var n=e.call(this,t)||this;return n.onEnvUpdated=n.onEnvUpdated.bind(n),n.state={env:t.tutored?null:s.a},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.tutored&&o.a.subscribe(this.onEnvUpdated)},t.prototype.componentWillUnmount=function(){this.props.tutored&&o.a.unsubscribe(this.onEnvUpdated)},t.prototype.onEnvUpdated=function(e){this.setState({env:e})},t.prototype.render=function(){var e=this.state.env;return e?e.kedBackendClient?this.props.createComponent(e):a.createElement("div",null,"Laddar..."):a.createElement("div",null)},t}(a.Component)},,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.myself=a.createRef(),n.state={text:t.text||""},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.tag,n=e.text,r=e.readOnly,s=t;return a.createElement(s,{contentEditable:!r,"data-placeholder":this.props.placeholder,ref:this.myself,className:this.props.className,onChange:this.onChange.bind(this),onKeyDown:this.onKeyDown.bind(this),onKeyUp:this.onKeyUp.bind(this),onBlur:this.onBlur.bind(this),onPaste:this.onPaste.bind(this),dangerouslySetInnerHTML:{__html:n}})},t.prototype.onChange=function(e){this.setState({text:this.myself.current.innerText})},t.prototype.onKeyDown=function(e){var t=this.myself.current.innerText;if("Escape"===e.key?(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.stopPropagation()):"Enter"===e.key||"Tab"===e.key?(this.propagateOnChange(t),this.setState({text:t})):t.length>=this.props.maxChars&&/^[\d\w\s]$/.test(e.key)&&!e.metaKey&&!e.ctrlKey&&e.preventDefault(),!0===this.props.allowNavigation){var n=!!e.key.startsWith("Arrow")&&e.key.replace("Arrow","").toLowerCase(),r=document.getSelection().getRangeAt(0).endOffset;n&&0==t.length?this.navigate(t,n):!n||"up"!=n&&"down"!=n?n&&("left"==n&&0==r||"right"==n&&r==t.length)&&this.navigate(t,n):this.navigate(t,n)}},t.prototype.onKeyUp=function(e){var t=this.myself.current.innerText;void 0===this.props.validateValue||this.props.validateValue.test(t)||(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.preventDefault())},t.prototype.navigate=function(e,t){this.propagateOnChange(e),this.setState({text:e}),this.props.onNavigate(t)},t.prototype.onPaste=function(e){e.preventDefault();var t=e.clipboardData&&e.clipboardData.getData?e.clipboardData.getData("text/plain"):"";document.execCommand("insertHTML",!1,t)},t.prototype.onBlur=function(e){var t=this.myself.current.innerText;this.propagateOnChange(t),this.setState({text:t})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t}(a.PureComponent)},,function(e,t){},function(e,t,n){"use strict";n.d(t,"a",function(){return f});var r,a,s=n(1),o=n(0),i=n(7),u=n(2),c=n(13),l=n(16),d=n(14),m=n(63),f=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,courses:[],headerOpen:!1},n.updateHiddenCourses=n.updateHiddenCourses.bind(n),n}return s.c(t,e),t.prototype.componentWillMount=function(){m.a.subscribe(this.updateHiddenCourses,{fullCourse:!0})},t.prototype.componentWillUnmount=function(){m.a.unsubscribe(this.updateHiddenCourses)},t.prototype.updateHiddenCourses=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.hideCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(r||(r=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.hideCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.showCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(a||(a=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.showCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.render=function(){var e=this;if(this.state.isLoading)return o.createElement(c.a,null);var t=this.state.courses,n=t.filter(function(e){return e.visible}),r=t.filter(function(e){return!e.visible}),a=Object(l.b)(location.search),u=i.b.KED_COURSE_VIEWER_URL;return o.createElement("div",{className:"ked_boxed"},o.createElement("h3",null,"Skolans kurser"),o.createElement("div",{className:"taskContainer odd-even"},n.map(function(t){return o.createElement("div",{className:"studentCourse",key:t.id},o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top pull-right"},o.createElement("a",{className:"hideItem",onClick:function(){return e.hideCourse(t)}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{href:Object(d.f)(u,{courseId:t.id})},t.name))),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",{className:"small"},t.description)))})),o.createElement("div",{className:"openClose"+(this.state.headerOpen?" open":"")},o.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},o.createElement("h5",null,"Dolda kurser")),o.createElement("div",{className:"openContent"},o.createElement("div",{className:"taskContainer odd-even"},r.map(function(t){return o.createElement("div",{className:"studentCourse",key:t.id},o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top pull-right"},o.createElement("a",{className:"showItem",onClick:function(){return e.showCourse(t)}})),o.createElement("a",{href:Object(l.a)(s.a({},a,{courseId:t.id}))},t.name)),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",{className:"small"},t.description)))})))))},t}(o.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(61),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.commonTasks,n=e.learningGoals;return a.createElement("div",null,n.map(function(e){return a.createElement("div",{key:e.name},a.createElement("h5",null,e.name),a.createElement(s.a,{learningTasks:e.learningTasks}))}),t.length>0&&a.createElement("div",null,n.length>0&&a.createElement("h5",null,"Ãvergripande"),a.createElement(s.a,{learningTasks:t})))},t}(a.Component)},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(6),o=n.n(s);function i(e,t){var n=o()(new Date(t.firstTerm.startDate)),r=o()(new Date(t.firstTerm.endDate)),a=o()(new Date(t.secondTerm.startDate)),s=o()(new Date(t.secondTerm.endDate)),i=n.year()+"/"+s.year(),c=u(t.holidays,n,r);if(e<r){var l=1,d=r.week()-n.week();return{term:"AT",academicYearStructure:{academicYear:i,startDate:n,endDate:r,academicStartWeek:l,academicEndWeek:d,holidays:c}}}var m=function(e){var t=0;return e.forEach(function(e){t+=o()(e.endDate).add(1,"week").week()-o()(e.startDate).week()}),t}(c);l=a.clone().add(1,"week").week()-n.week()-m,d=s.clone().add().add(1,"week").week()-n.week()-m;return{term:"ST",academicYearStructure:{academicYear:i,startDate:a,endDate:s,academicStartWeek:l,academicEndWeek:d,holidays:c=u(t.holidays,a,s)}}}function u(e,t,n){return e.filter(function(e){return o()(e.startDate).isBetween(t,n)})}function c(e){var t=e.shortName;return"MA"===t?"Ma":"EN"===t?"Eng":t.startsWith("SV")?"Sv/SvA":t.startsWith("M2")?"M.spr":null}var l=function(){function e(e,t,n){this.locale=t||"sv",this.selectedDate=e,this.schoolMoment=n?i(o()(e),n):null}return e.prototype.getTermStartAndEnd=function(e){var t=this.schoolMoment.academicYearStructure.startDate.clone().startOf("week");t.year()<this.schoolMoment.academicYearStructure.startDate.year()&&(t=this.schoolMoment.academicYearStructure.startDate);var n=this.schoolMoment.academicYearStructure.endDate;return"sv"===this.locale&&e&&"ST"===this.schoolMoment.term?n=n.clone().add(3,"weeks").endOf("week"):e&&("sv"!=this.locale&&(n=this.schoolMoment.academicYearStructure.endDate.clone()),n=this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").endOf("week")),[t,n]},e.prototype.getFirstAndLastWeekOfTerm=function(){return[this.schoolMoment.academicYearStructure.startDate.week(),this.schoolMoment.academicYearStructure.endDate.week()]},e.prototype.isCurrentWeek=function(e){var t=o()(e);return t.year()===o()().year()&&t.week()===o()().week()},e.prototype.getLastStepWeek=function(e){return"sv"===e?"ST"===this.schoolMoment.term?28:52:this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").week()},e.prototype.toLocaleString=function(e,t){if(this.schoolMoment){var n=this.schoolMoment.academicYearStructure.endDate.year().toString();return t&&(n=n.substr(2)),"AT"===this.schoolMoment.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})}return null},e.prototype.nextTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.endDate.clone():o()()).add(3,"months").toDate(),this.locale)},e.prototype.prevTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.startDate.clone():o()()).subtract(3,"months").toDate(),this.locale)},e.prototype.getPeriodName=function(){return this.schoolMoment.term+this.schoolMoment.academicYearStructure.endDate.year()},e}(),d=n(5),m=n(48),f=function(){return function(e,t,n,a,s,i){var u,l,f,p,h,g=this;if(this.subjectProgress={},this.columns=[],this.weekPlansOrTutorNote=[],n.schoolMoment){var v=r.f(n.getTermStartAndEnd(),2),b=v[0],k=v[1];this.year=b.year();var y=function(e){switch(e){case"sv":return["M.spr","Ma","Sv/SvA","Eng"];case"en_sin":case"en_nin":return["MFL","Ma","Hi","Eng","Yoga","ICT"]}}(a);y.forEach(function(e){return g.columns.push({name:e})});var E=[{name:"Kurs",isFixed:!0},{name:"Kommentar",isFixed:!0}];i&&E.push({name:"TutorComment",isFixed:!0}),(u=this.columns).push.apply(u,r.g(E));var w=function(e,t){var n={};return n.Kurs=t.formatMessage({id:"termplanner.course",defaultMessage:"Kurs"}),n.Kommentar=t.formatMessage({id:"termplanner.comments",defaultMessage:"Kommentar"}),"sv"===e?(n["M.spr"]=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"M.spr"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Ma"}),n["Sv/SvA"]=t.formatMessage({id:"termplanner.swedishLanguage",defaultMessage:"Sv/SvA"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"Eng"})):(n.MFL=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"MFL"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Maths"}),n.Hi=t.formatMessage({id:"termplanner.hindiLanguage",defaultMessage:"Hindi"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"English"}),n.Yoga=t.formatMessage({id:"termplanner.yoga",defaultMessage:"Yoga"}),n.ICT=t.formatMessage({id:"termplanner.ict",defaultMessage:"ICT"})),n}(a,s);this.columns.forEach(function(e){e.translatedName=w[e.name]});for(var T=n.schoolMoment.academicYearStructure.holidays,N=n.schoolMoment.term,C=e.filter(function(e){return!e.type}),D=e.filter(function(e){return"tutor-note"===e.type}),S=n.schoolMoment.academicYearStructure.academicStartWeek,O=function(e){if(T.filter(function(t){return e.week()>=o()(t.startDate).startOf("week").week()&&e.week()<=o()(t.endDate).endOf("week").week()}).length>0)return"continue";var t=e.week(),n=Object(m.a)(e.year(),t),a=C.filter(function(e){return e.dateTime>=n.notBefore&&e.dateTime<=n.notAfter&&(!e.isFinalStep&&e.term===N||"sv"===s.locale)})[0],i=D.filter(function(e){return e.dateTime>=n.notBefore&&e.dateTime<=n.notAfter&&(e.term===N||"sv"===s.locale)})[0];M.weekPlansOrTutorNote.push(r.a({},a||{},{id:a?a.id:Object(d.h)(),dateTime:a?a.dateTime:e.valueOf(),cellValues:a?a.cellValues:{},weekNumber:t,academicWeekNumber:S++,term:N})),M.weekPlansOrTutorNote.push(r.a({},i||{},{id:i?i.id:Object(d.h)(),type:"tutor-note",dateTime:i?i.dateTime:e.valueOf(),content:i?i.content:"",weekNumber:t,term:N}))},M=this,x=b.clone();x.valueOf()<k.valueOf();x=x.clone().add(1,"week").startOf("week"))O(x);var L=n.getLastStepWeek(s.locale),j=Object(m.a)(k.year(),L);this.lastSteps=C.filter(function(e){return e.dateTime>=j.notBefore&&e.dateTime<=j.notAfter&&(e.isFinalStep&&e.term===N||"sv"===s.locale)})[0]||{id:Object(d.h)(),dateTime:o()(k).clone().week(L).startOf("week").valueOf(),cellValues:{},weekNumber:L,term:N,isFinalStep:!0},this.completedSteps={},this.termGoals={};var P={};try{for(var I=r.h(t),R=I.next();!R.done;R=I.next()){var _=R.value,U=c(_);try{for(var A=r.h(_.courseSteps),B=A.next();!B.done;B=A.next()){var H=B.value;if(H.isCompleted){this.completedSteps[U+H.shortName]=!0;var W=parseInt(H.shortName);!isNaN(W)&&W>(P[U]?P[U]:0)&&(P[U]=W)}}}catch(e){p={error:e}}finally{try{B&&!B.done&&(h=A.return)&&h.call(A)}finally{if(p)throw p.error}}this.termGoals[U]=_.periodGoalGrade}}catch(e){l={error:e}}finally{try{R&&!R.done&&(f=I.return)&&f.call(I)}finally{if(l)throw l.error}}t&&(y.forEach(function(e){g.subjectProgress[e]={finalStepCompleted:!1,value:0}}),Object.keys(this.lastSteps.cellValues).forEach(function(e){if(!E[e]){var t=isNaN(parseInt(g.lastSteps.cellValues[e]))||!g.lastSteps.cellValues[e],n=t?0:parseInt(g.lastSteps.cellValues[e]),r=n>0?100*P[e]/n:0;g.subjectProgress[e]={finalStepCompleted:!t,value:r}}}))}}}();var p=n(111),h=n(3),g=new(n(131).a)(function(){return h.a.kedBackendClient},function(){return h.a.currentUser});h.a.ksTermPlannerRepo=g;var v=n(19),b=n(9),k=n(7),y=n(13),E=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.errorMessage,r=e.backgroundColor,s=e.progressColor,o=100/6.28+2,i=Math.round(t),u=10;return a.createElement("svg",{className:"doughnut-chart",viewBox:"0 0 35.847133757961785 35.847133757961785",width:"100%",height:"100%"},a.createElement("circle",{className:"circle-chart-background",stroke:r,strokeWidth:3,fill:"none",cx:o,cy:o,r:100/6.28}),a.createElement("circle",{className:"circle-chart-circle",stroke:s,ref:"progressCircle",strokeWidth:2,style:{strokeDasharray:i+", 100"},strokeLinecap:"round",fill:"none",cx:o,cy:o,r:100/6.28}),a.createElement("g",{className:"circle-chart-info"},n?a.createElement("text",{className:"circle-chart-percent-error",x:o,y:o,alignmentBaseline:"central",fontSize:"5",textAnchor:"middle"},n.split(" ").map(function(e){var t=a.createElement("tspan",{key:e,x:o,y:u},e);return u+=5,t})):a.createElement("text",{className:"circle-chart-percent",x:o,y:o,alignmentBaseline:"central",textAnchor:"middle"},i+"%")))},t.defaultProps={backgroundColor:"#efefef",progressColor:"#3dbca2",errorMessage:null},t}(a.Component),w=n(67),T=n(130),N=n(32);n.d(t,"a",function(){return C});var C=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schoolTerm:new l(t.initialDate),activeCourses:[],weekPlans:[],error:null,loadingActiveCourses:!1,loadingWeekPlans:!1,initialLoad:!0,dialogs:[]},n.flowId=1,n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load(this.state.schoolTerm)},t.prototype.componentDidMount=function(){this.props.env.ksTermPlannerRepo.mem.subscribe(this.updateWeekPlans)},t.prototype.componentWillUnmount=function(){this.props.env.ksTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e,t){this.setState({weekPlans:e,loadingWeekPlans:!1,error:t||null})},t.prototype.load=function(e){var t=this,n=++this.flowId;this.fields=[],this.setState({loadingActiveCourses:!0});var r=this.props.env.ksTermPlannerRepo;this.loadAcademicYearDates(e,k.b.KED_SCHOOL_LOCALE).then(function(a){if(t.flowId===n){var s=new l(e.selectedDate,t.context.intl.locale,a);r.refreshData(s.getTermStartAndEnd(!0)),t.loadActiveCourses(s).then(function(e){t.flowId===n&&t.setState({schoolTerm:s,initialLoad:!1,activeCourses:e,loadingActiveCourses:!1})}).catch(function(e){t.flowId===n&&t.setState({schoolTerm:s,loadingActiveCourses:!1,error:e})})}})},t.prototype.loadAcademicYearDates=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.edsClient.getAcademicYearTerms(t,e.selectedDate)];case 1:return[2,n.sent()]}})})},t.prototype.loadActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=e.getPeriodName().replace("AT","HT").replace("ST","VT"),[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return[2,n.sent()]}})})},t.prototype.updateCell=function(e,t,n){return r.b(this,void 0,void 0,function(){var a;return r.d(this,function(r){switch(r.label){case 0:if((e&&e.cellValues[t]||"")===n)return[2];r.label=1;case 1:return r.trys.push([1,3,,4]),e.cellValues[t]=n,[4,this.props.env.ksTermPlannerRepo.upsert(e,function(e){return e.cellValues[t]=n})];case 2:return[2,r.sent()];case 3:return a=r.sent(),console.error(a.stack||a),"http403"===a.name?this.setState({error:this.context.intl({id:"common.changesNotSavedUnauthorized",defaultMessage:"Ãndringarna sparades inte p.g.a. otillrÃ¤cklig behÃ¶righet."})}):this.setState({error:this.context.intl({id:"common.changesNotSavedErrorOccured",defaultMessage:"FÃ¶r tillfÃ¤llet problem att spara data. Dina Ã¤ndringar sparades inte."})}),[3,4];case 4:return[2]}})})},t.prototype.updateTutorNoteField=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if((e&&e.content||"")===t)return[2];n.label=1;case 1:return n.trys.push([1,3,,4]),e.content=t,e.acl=[new d.b("tutorFor",this.props.env.currentUser.mail,"S").toString(),new d.b("email",this.props.env.currentUser.mail,"R").toString()],[4,this.props.env.ksTermPlannerRepo.upsert(e,function(e){return e.content=t})];case 2:return[2,n.sent()];case 3:return n.sent(),[3,4];case 4:return[2]}})})},t.prototype.deleteTutorNoteField=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.props.env.ksTermPlannerRepo.delete([e])];case 1:return t.sent(),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}})})},t.prototype.onTutorClick=function(e){var t=this;this.openDialog(a.createElement(T.a,{weekNumber:e.weekNumber,comment:e.content,intl:this.context.intl,updateData:function(n){return t.updateTutorNoteField(e,n)},deleteNoteData:function(){return t.deleteTutorNoteField(e.id)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.navigate=function(e,t){var n=r.a({},e),a=this.fields.length,s=Math.max.apply(Math,r.g(this.fields.map(function(e){return e.length})));switch(t){case"up":n.row=Math.max(e.row-1,0);break;case"down":n.row=Math.min(e.row+1,a);break;case"left":n.col=Math.max(e.col-1,0);break;case"right":n.col=Math.min(e.col+1,s)}this.fields[n.row]&&this.fields[n.row][n.col]&&this.fields[n.row][n.col].myself.current.focus()},t.prototype.addField=function(e,t){void 0===this.fields[t.row]&&(this.fields[t.row]=[]),this.fields[t.row][t.col]=e},t.prototype.getTableCell=function(e,t,n,r,s,o,i){var u=this,c=r.completedSteps,l={row:e,col:t};if("Tutor"===i){var d=s,m=d.content;return this.props.tutored?a.createElement("td",{key:"tutornote"+t,onClick:function(){return u.onTutorClick(d)},className:"tutorCell"},m?a.createElement("div",{key:t,"data-tooltip":m},a.createElement("i",{key:t,className:"fas fa-comment-dots"})):a.createElement("div",{key:t},a.createElement("i",{key:t,className:"fas fa-comment-medical"}))):a.createElement("td",{key:"tutornote"+t,className:"tutorCell"},m&&a.createElement("div",{key:t,"data-tooltip":m},a.createElement("i",{key:t,className:"far fa-comment-dots"})))}var f=s.cellValues;return a.createElement("td",{className:this.getCellClassName(c,f,n)},a.createElement(p.a,{key:t,ref:function(e){return u.addField(e,l)},text:f[n],tag:"div",validateValue:"Step"==i?/^\d*$/:void 0,maxChars:"Comment"==i?100:"Course"==i?30:3,onChange:this.updateCell.bind(this,s,n),readOnly:o||"Tutor"==i,allowNavigation:!0,onNavigate:this.navigate.bind(this,l)}))},t.prototype.getCellClassName=function(e,t,n){var r=this.getColumnType(n);return"Step"==r&&e[n+t[n]]?"stepCell completedStep":r.toLowerCase()+"Cell"},t.prototype.getFooterCell=function(e,t,n,r,s){var o=this,i={row:e,col:t},u=this.getColumnType(n);return a.createElement("th",{className:u+"Footer"},a.createElement(p.a,{key:"stepFooterCell"+t,ref:function(e){return o.addField(e,i)},tag:"div",text:r.lastSteps.cellValues[n],onChange:this.updateCell.bind(this,r.lastSteps,n),readOnly:s,maxChars:10,allowNavigation:!0,onNavigate:this.navigate.bind(this,i)}))},t.prototype.getStepHeaderColumn=function(e,t,n){return a.createElement("th",{key:"stepHeaderCell_"+e,className:n.toLowerCase()+"Header"},"Tutor"!=n?t:"")},t.prototype.getColumnType=function(e){var t={Kommentar:"Comment",Kurs:"Course",TutorComment:"Tutor"};return t.hasOwnProperty(e)?t[e]:"Step"},t.prototype.getStepCharts=function(e,t){var n=this;return a.createElement("div",{className:"charts-container"},e.map(function(e){if(!e.isFixed){var r=t[e.name]?t[e.name].value:0,s=t[e.name].finalStepCompleted?null:n.context.intl.formatMessage({id:"termplanner.noFinalStepAvailable",defaultMessage:"Inget slutsteg tillgÃ¤ngligt"}),o=function(e){var t={};return t["M.spr"]=e.formatMessage({id:"termplanner.modernLanguageFullname",defaultMessage:"M.sprÃ¥k"}),t.Ma=e.formatMessage({id:"termplanner.mathsFullname",defaultMessage:"Matematik"}),t["Sv/SvA"]=e.formatMessage({id:"termplanner.swedishLanguageFullName",defaultMessage:"Svenska"}),t.Eng=e.formatMessage({id:"termplanner.englishLanguageFullName",defaultMessage:"Engelska"}),t}(n.context.intl);return a.createElement("div",{key:e.name,className:"chart-box"},a.createElement("h4",null,o[e.name]),a.createElement("div",{key:e.name,className:"inner-chart-box"},a.createElement(E,{key:e.name,percentage:r,errorMessage:s})))}}))},t.prototype.getWeekTutorNote=function(e,t){return e.find(function(e){return"tutor-note"===e.type&&e.weekNumber===t})},t.prototype.render=function(){var e=this,t=this.context.intl,n=N.b.ksTutorComment,r=N.b.termplannerCharts,s=new f(this.state.weekPlans,this.state.activeCourses,this.state.schoolTerm,k.b.KED_SCHOOL_LOCALE,t,n),o=s.termGoals,i=s.columns,u=this.props.tutored,c=this.state,l=c.loadingWeekPlans,d=c.error,m=c.weekPlans,p=c.dialogs,h=0===m.length&&!!d||u||l,g=0,v=s.weekPlansOrTutorNote.filter(function(e){return!e.type});return this.state.initialLoad?a.createElement("p",null,a.createElement(y.a,null),a.createElement(b.a,{id:"termplanner.loadingTermplanner",defaultMessage:"V.g. vÃ¤nta medan terminsplaner laddas..."})):a.createElement("div",{className:"termplanner"+(this.state.loadingWeekPlans?" loading-weekplans":"")+(this.state.loadingActiveCourses?" loading-courses":"")},r&&this.state.activeCourses.length>0&&this.getStepCharts(i,s.subjectProgress),a.createElement("div",{className:"ked_boxed"},a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,this.state.schoolTerm.toLocaleString(t,!0))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.prevTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.nextTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))))),a.createElement(b.a,{id:"termplanner.termPlanning",defaultMessage:"Terminsplanering",tagName:"h4"}),a.createElement("hr",null),a.createElement("table",{className:"termplanner-table zebra"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{className:"weekColumn"},a.createElement(b.a,{id:"termplanner.weekNumber",defaultMessage:"Vecka"})),i.map(function(t,n){var r=e.getColumnType(t.name);return e.getStepHeaderColumn(n,t.translatedName,r)}))),a.createElement("tbody",null,v.filter(function(e){return e.cellValues}).map(function(r,o){g=o;var u=r.weekNumber,c=r.academicWeekNumber,l=u,d=e.state.schoolTerm.isCurrentWeek(r.dateTime);return a.createElement("tr",{key:s.year+":"+l,className:d?"currentWeek":""},a.createElement("td",null,"sv"===t.locale?l:c),i.map(function(t,a){var i=e.getColumnType(t.name),c=e.getWeekTutorNote(s.weekPlansOrTutorNote,u);return"Tutor"===i?c&&n&&e.getTableCell(o,a,t.name,s,c,h,i):e.getTableCell(o,a,t.name,s,r,h,i)}))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",null,a.createElement(b.a,{id:"termplanner.finalStep",defaultMessage:"Slutsteg"})),i.filter(function(e){return!e.isFixed}).map(function(t,n){return e.getFooterCell(g+1,n,t.name,s,h)}),a.createElement("th",null,"-"),a.createElement("th",null),a.createElement("th",null)),a.createElement("tr",null,a.createElement("th",null,a.createElement(b.a,{id:"termplanner.edsGoalGrades",defaultMessage:"TerminsmÃ¥l"})),i.filter(function(e){return!e.isFixed}).map(function(t,n){var r=e.getColumnType(t.name).toLowerCase();return a.createElement("th",{key:"grades_"+n,className:r+"Footer"},o[t.name])}),a.createElement("th",null,"-"),a.createElement("th",null,this.state.error&&a.createElement("p",{className:"error"},""+this.state.error)),a.createElement("th",null))))),a.createElement(w.a,{dialogs:p,popDialog:function(){return e.setState({dialogs:p.slice(0,p.length-1)})}}))},t.contextType=v.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(28),s=function(){function e(){this.subscribers=[],this.env=null,this.version=1}return e.prototype.subscribe=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){return this.subscribers.push(e),e(this.env),[2]})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){return this.subscribers.forEach(function(t){return t(e.env)}),[2]})})},e.prototype.setNewEnv=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(s){switch(s.label){case 0:return n=++this.version,this.env={currentUser:e,tutored:!0},this.notifySubscribers(),[4,t().catch(function(t){return{currentUser:e,tutored:!0,error:t}})];case 1:return a=s.sent(),n===this.version&&(++this.version,this.env=r.a({},a,{tutored:!0}),this.notifySubscribers()),[2]}})})},e}();a.a.tutorEnv||(a.a.tutorEnv=new s),t.a=a.a.tutorEnv},function(e,t,n){var r={"./en-SG":80,"./en-SG.js":80,"./en-au":81,"./en-au.js":81,"./en-ca":82,"./en-ca.js":82,"./en-gb":83,"./en-gb.js":83,"./en-ie":84,"./en-ie.js":84,"./en-il":85,"./en-il.js":85,"./en-nz":86,"./en-nz.js":86,"./sv":87,"./sv.js":87};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=124},function(e,t){},function(e,t){},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={comment:t.comment?t.comment:""},n}return r.c(t,e),t.prototype.delete=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return(0,this.props.closeDialog)(),this.props.deleteNoteData(),[2]})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){return e=this.props.closeDialog,t=this.state.comment,e(),this.props.updateData(t),[2]})})},t.prototype.render=function(){var e=this,t=this.props,n=t.weekNumber,r=t.intl,s=this.state.comment;return a.createElement("div",null,a.createElement("div",null,a.createElement("h2",null,r?r.formatMessage({id:"tutorNoteDialog.weekComment",defaultMessage:"Kommentar fÃ¶r vecka {weekNumber}"},{weekNumber:n}):"Kommentar fÃ¶r vecka "+n),a.createElement("hr",null),a.createElement("div",{className:"align-table"},a.createElement("div",{className:"fullWidth"},a.createElement("textarea",{autoFocus:!0,value:s,onChange:function(t){return e.setState({comment:t.target.value})}})))),a.createElement("div",null,a.createElement(a.Fragment,null,a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},r?r.formatMessage({id:"common.save",defaultMessage:"Spara"}):"Spara"," "),s&&a.createElement("a",{tabIndex:1,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.delete()}},r?r.formatMessage({id:"common.remove",defaultMessage:"Ta bort"}):"Ta bort"))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(53),s=n(6),o=n.n(s),i=function(e){function t(t,n){var a=this,s=n();return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans-ks",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t;return r.d(this,function(n){return e=this.startDate&&this.startDate.valueOf()||o()().valueOf(),t=this.endDate&&this.endDate.valueOf()||o()().valueOf(),[2,{from:e,to:t,role:"USER"}]})})}})||this}return r.c(t,e),t.prototype.refreshData=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=r.f(e,2),this.startDate=t[0],this.endDate=t[1],[4,this.mem.refreshFromServer()];case 1:return n.sent(),[2]}})})},t}(a.a)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(6),o=n.n(s);const i=6e4;var u,c=n(2);function l(e){e.id;var t=e.dayStart,n=e.startMoment,s=e.endMoment,l=e.text,d=e.location,m=e.description,f=e.width,p=e.pos,h=e.locale,g=e.zoom,v=e.htmlLink,b=e.className,k=o()(n).diff(t)/i*g,y=o()(s).diff(n)/i*g,E={hour:"numeric",minute:"2-digit"},w=n.toDate().toLocaleTimeString(h,E),T=s.toDate().toLocaleTimeString(h,E);return a.createElement("div",{className:"dayviewevent "+b,style:{position:"absolute",boxSizing:"border-box",top:k,left:(p||0)+"%",width:(f||100)+"%",height:y,maxHeight:y,overflow:"hidden"},title:w+" - "+T+" "+l+(d?"\n"+Object(c.a)(u||(u=r.e(["Plats: ",""],["Plats: ",""])),d):"")+(m?"\n"+m:"")},a.createElement("a",{className:"event-title",href:v,target:"calendar-event"},l),a.createElement("p",{className:"event-period"},w," - ",T),d&&a.createElement("p",{className:"event-location"},d),m&&a.createElement("p",{className:"event-description"},m))}function d(e){for(var t=e.dayStart,n=e.dayEnd,r=60*e.zoom,s=o()(t).hour(),i=o()(n).hour(),u=[],c=s;c<=i;++c)u.push(c);return a.createElement("div",null,u.map(function(e){return a.createElement("div",{key:e,className:"timeline",style:{width:"100%",boxSizing:"border-box",margin:r/2+"px 0 0 0",height:r/2}})}))}function m(e){var t=e.dayStart,n=e.dayEnd,s=e.events,u=e.locale,m=e.zoom,f=(e.isLastCall,o()(n).diff(t)/i*m),p=function(e,t){var n=[];return e.forEach(function(e,t){var a,s=n.filter(function(t){return t.startMoment&&t.endMoment&&t.startMoment<=e.startMoment&&t.endMoment>e.startMoment}),o=s.concat(Object(c.k)(s.map(function(e){return e.prevOverlaps})));(o=Object(c.j)(o,function(e){return e.index})).sort(Object(c.g)("startMoment"));var i=0;o.forEach(function(e,t){t%4==0&&(a=Math.max(25,Math.round(100/Math.max(o.length-t+1,1))),i=0),e.width=a,e.className=(e.className||"").split(" ").filter(function(e){return"splitted"!==e}).concat("splitted").join(" "),e.pos=i,i+=a}),n.push(r.a({},e,{index:t,pos:i,width:a,className:a<100?e.className?e.className+" splitted":"splitted":e.className,prevOverlaps:o}))}),n}(s);return a.createElement("div",{className:"dayview",style:{top:0,height:f,maxHeight:f,position:"relative",overflow:"hidden"}},a.createElement(d,{dayStart:t,dayEnd:n,zoom:m}),p.map(function(e){return a.createElement(l,{key:e.id,id:e.id,className:e.className,dayStart:t,startMoment:e.startMoment,endMoment:e.endMoment,text:e.text,location:e.location,description:e.description,width:e.width,pos:e.pos,locale:u,zoom:m,htmlLink:e.htmlLink})}))}function f(e){for(var t=e.startHour,n=e.endHour,r=e.locale,s=60*e.zoom,i=[],u=t;u<=n;++u)i.push(u);return a.createElement("div",{className:"hourmarker",style:{position:"relative",left:0,top:0,overflow:"visible",height:(n-t)*s}},i.map(function(e,t){var n=t*s;return a.createElement("span",{key:e},a.createElement("div",{style:{position:"absolute",left:0,top:n,marginTop:"-4px",padding:0}},o()().hour(e).minute(0).toDate().toLocaleString(r,{hour:"2-digit",minute:"2-digit"})))}))}function p(e){var t=e.status,n=e.error;return t||n?a.createElement("div",{className:"statusbar"},n?a.createElement("p",{className:"error"},""+n):a.createElement("p",{className:"status"},t)):null}var h=n(19),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.firstDay,n=e.startHour,r=e.endHour,s=e.numDays,i=e.events,u=e.locale,l=e.zoom,d=e.status,h=e.error,g=this.context.intl,v=[],b=o()(t),k=function(e){var t=o()(b).hour(n),a=o()(b).hour(r),s=o()(b).format("YYYY-MM-DD"),l=o()(t).startOf("day").valueOf()===o()().startOf("day").valueOf();v.push({name:Object(c.d)(t.toDate().toLocaleString(u,{weekday:"long",day:"numeric",month:"short"})),dayStart:t,dayEnd:a,isToday:l,events:i.filter(function(e){return e.start&&e.end&&e.start.dateTime&&e.end.dateTime&&(o()(e.start.dateTime).isBetween(t,a)||o()(e.end.dateTime).isBetween(t,a))}).map(function(e){return Object(c.f)(e,{startMoment:o()(e.start.dateTime),endMoment:o()(e.end.dateTime)})}).sort(function(e,t){return e.startMoment.valueOf>t.startMoment.valueOf?1:e.startMoment<t.startMoment?-1:0}),fullDayEvents:i.filter(function(e){return e.start&&e.end&&e.start.date&&e.end.date&&e.start.date<=s&&e.end.date>s}).map(function(e){return Object(c.f)(e,{startDate:e.start.date,endDate:e.end.date})})}),b=o()(b).add(1,"days")},y=0;y<s;++y)k();return a.createElement("div",{className:"vemendo-weekview"},a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",{style:{border:0}}),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement("p",{className:"dayname"},e.name))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement("p",{className:"week-number"},g.formatMessage({id:"calendar.weekNumber",defaultMessage:"V{weekNumber}"},{weekNumber:o()(t).week()}))),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},e.fullDayEvents.map(function(e){var t=e.id,n=e.text,r=e.location,s=e.description,o=e.htmlLink,i=e.className;return a.createElement("div",{key:t,className:"dayviewevent full-day "+i,title:n+(r?"\n"+g.formatMessage({id:"calendar.fullDayEventLocation",defaultMessage:"Plats: {location}"},{location:r}):"")+(s?"\n"+s:"")},a.createElement("a",{className:"event-title",href:o,target:"calendar-event"},n),r&&a.createElement("p",{className:"event-location"},r),s&&a.createElement("p",{className:"event-description"},s))}))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement(f,{startHour:n,endHour:r,locale:u,zoom:l})),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement(m,{key:e.dayStart.toISOString(),dayStart:e.dayStart,dayEnd:e.dayEnd,events:e.events,locale:u,zoom:l,isLastCall:""==d})," ")})),(d||h)&&(!h||"UnauthorizedError"!==h.name)&&a.createElement("tr",null,a.createElement("td",{style:{border:0}}),a.createElement("td",{style:{border:0},colSpan:s},a.createElement(p,{status:d,error:h}))))))},t.contextType=h.a,t}(a.Component),v=function(){function e(e){this.googleTokenProvider=e}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:t.sent(),t.label=2;case 2:return!this.tokenExpiration||this.tokenExpiration<new Date?[4,this.googleTokenProvider.getBearer()]:[3,4];case 3:e=t.sent(),this.tokenExpiration=new Date(e.expires),gapi.client.setToken({access_token:e.token}),t.label=4;case 4:return void 0!==gapi.client.calendar?[3,6]:[4,gapi.client.load("calendar","v3")];case 5:t.sent(),t.label=6;case 6:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e.prototype.listCalendars=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,this.ensureInited()];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,gapi.client.calendar.calendarList.list({})];case 3:return[2,e.sent().result.items];case 4:throw e.sent().error;case 5:return[2]}})})},e.prototype.batchEvents=function(e){var t=e.calendarList,n=e.timeMin,a=e.timeMax;return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:r.sent();try{return e=gapi.client.newBatch(),t.forEach(function(t){e.add(gapi.client.calendar.events.list({calendarId:t.id||"primary",timeMin:n&&new Date(n).toISOString(),timeMax:a&&new Date(a).toISOString(),showDeleted:!1,singleEvents:!0,fields:"items/id,items/start,items/end,items/summary,items/location,items/htmlLink,items/description",maxResults:2500,orderBy:"startTime"}),{id:t.id})}),[2,e.then(function(e){var n={};for(var r in t){var a=t[r].id,s=e.result[a].result.items;n[a]={calendar:t[r],events:s}}return n})]}catch(e){throw e.error}return[2]}})})},e}(),b=n(75);var k=n(3);n.d(t,"a",function(){return y});var y=function(e){function t(t){var n=e.call(this,t)||this,r=t.firstDay,a=n.props,s=a.initialStartHour,o=a.initialEndHour,i=a.initialZoom;n.state={firstDay:r,startHour:s,endHour:o,zoom:i,calendars:{},calendarsBeingLoaded:[],status:"Loading calendars... (authenticating...)",error:null};var u=(t.env||k.a).googleTokenProvider;return n.gcal=new v(u),n.gcal.ensureInited().then(function(){return n.loadData(r)}).catch(function(e){n.handleError(e)}),n}return r.c(t,e),t.prototype.handleError=function(e){e||(e="Unknown error"),this.setState({error:e}),console.error(e.stack||e)},t.prototype.loadData=function(e){var t=this,n=this.props.numDays,r=this.context.intl;return this.setState({firstDay:e,calendars:{},calendarsBeingLoaded:[],error:null,status:r.formatMessage({id:"calendar.loadingCalendar",defaultMessage:"Loading calendars... (listing...)"})}),this.gcal.listCalendars().then(function(a){a=a.filter(function(e){return function(e){var t=e.summary||"",n=/owner/gi.test(e.accessRole),r=!!e.primary,a=/classroom/gi.test(e.id),s=/holiday/gi.test(e.id);return r||a||s||/schema/gi.test(t)&&n}(e)}),
//!/Week Numbers/ig.test(c.summary)
t.setState({status:r.formatMessage({id:"calendar.loadCalendarEvents",defaultMessage:"Load calendar events..."})}),t.gcal.batchEvents({calendarList:a,timeMin:o()(e).startOf("day"),timeMax:o()(e).add(n,"days").endOf("day")}).then(function(e){t.setState({calendars:e,status:""})})})},t.prototype.navigateToPreviousWeek=function(){var e=this;this.loadData(o()(this.state.firstDay).add(-1,"week")).catch(function(t){e.handleError(t)})},t.prototype.navigateToNextWeek=function(){var e=this;this.loadData(o()(this.state.firstDay).add(1,"week")).catch(function(t){e.handleError(t)})},t.prototype.render=function(){var e=this,t=this.props.numDays,n=this.context.intl,r=this.state,s=r.firstDay,i=r.startHour,u=r.endHour,l=r.zoom,d=r.calendars,m=r.status,f=r.error,p=Object.keys(d).map(function(e){return d[e]}).map(function(e){var t=e.calendar,n=e.events,r="Skolschema"===t.summary&&"Synchronized"===t.description,a=/holiday/.test(t.id),s=(/classroom/.test(t.id),[]);return t.colorId&&s.push("gcal-palette-"+t.colorId),r&&s.push("course-event"),a&&s.push("holiday-event"),n.map(function(e){return{id:e.id,start:e.start,end:e.end,text:e.summary,location:e.location,description:e.description,htmlLink:e.htmlLink,className:(r&&e.summary?s.concat(Object(b.a)("course-event-",e.summary)):s).join(" ")}})}),h=Object(c.k)(p);return a.createElement("div",{style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"btn-toolbar week-navigation"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.navigateToPreviousWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.navigateToNextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))),a.createElement("div",{className:"btn-group"},n.formatMessage({id:"calendar.currentDate",defaultMessage:"Vecka {week}, {year}"},{week:o()(s).week(),year:o()(s).year()}))),a.createElement(g,{locale:n.locale,firstDay:s,startHour:i,endHour:u,numDays:t,zoom:l,events:h,status:m,error:f}))},t.contextType=h.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(43),o=n(25),i=n(6),u=n.n(i),c=n(13),l=n(67),d=n(5),m=function(e){function t(t){var n=e.call(this,t)||this;return n.state={description:t.note?t.note.description:"",color:t.note?t.note.color:"yellow"},n}return r.c(t,e),t.prototype.delete=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,o;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,e.weekDate,t=e.courseName,n=e.weekPlan,e.note,a=e.closeDialog,s=e.env,o=this.state,o.description,o.color,a(),1!==Object.keys(n.plans).length?[3,2]:[4,s.kgTermPlannerRepo.delete([n.id])];case 1:return r.sent(),[3,4];case 2:return[4,s.kgTermPlannerRepo.update([n],function(e){delete e.plans[t]})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,o,i,u,c,l;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,t=e.weekDate,n=e.courseName,a=e.weekPlan,e.note,s=e.closeDialog,o=e.env,i=this.state,u=i.description,c=i.color,s(),0==u.length?[2]:a?[4,o.kgTermPlannerRepo.update([a],function(e){return e.plans[n]={description:u,color:c}})]:[3,2];case 1:return r.sent(),[3,4];case 2:return(l={})[n]={description:u,color:c},[4,o.kgTermPlannerRepo.insert([{id:Object(d.h)(),dateTime:t,plans:l}])];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.weekNumber,r=t.courseName,s=(t.weekPlan,t.note),o=t.env,i=this.state,u=i.description,c=i.color,l=o.tutored;return a.createElement("div",null,a.createElement("div",null,a.createElement("h2",null,"HÃ¤ndelse fÃ¶r vecka ",n," och ",r),a.createElement("hr",null),a.createElement("div",{className:"align-table"},a.createElement("div",null,"Beskrivning:"),a.createElement("div",{className:"fullWidth"},a.createElement("textarea",{autoFocus:!0,value:u,disabled:l,onChange:function(t){return e.setState({description:t.target.value})}}))),a.createElement("div",{className:"align-table"},a.createElement("div",null,"FÃ¤rg:"),a.createElement("div",null,a.createElement("select",{value:c,disabled:l,onChange:function(t){return e.setState({color:t.target.value})}},a.createElement("option",{value:"yellow"},"Gul"),a.createElement("option",{value:"yellowLight"},"Ljusgul"),a.createElement("option",{value:"cyan"},"GrÃ¶n"),a.createElement("option",{value:"cyanLight"},"LjusgrÃ¶n"),a.createElement("option",{value:"purple"},"Lila"),a.createElement("option",{value:"purpleLight"},"Ljuslila"),a.createElement("option",{value:"red"},"RÃ¶d"),a.createElement("option",{value:"redLight"},"Rosa"))))),a.createElement("div",null,l?a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.props.closeDialog()}},"Avbryt"):a.createElement(a.Fragment,null,a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},"Spara"),s&&a.createElement("a",{tabIndex:1,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.delete()}},"Ta bort"))))},t}(a.Component),f=n(2),p=n(48),h=n(130),g=n(32);n.d(t,"a",function(){return v});var v=function(e){function t(t){var n=e.call(this,t)||this,r=new Date;return n.state={now:r,courses:[],weekPlans:[],isLoadingCourses:!0,isLoadingWeekPlans:!0,dialogs:[]},n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.loadEDSCourses(),this.props.env.kgTermPlannerRepo.mem.subscribe(this.updateWeekPlans)},t.prototype.componentWillUnmount=function(){this.props.env.kgTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e){this.setState({weekPlans:e,isLoadingWeekPlans:!1})},t.prototype.loadEDSCourses=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,,2,3]),e=Object(o.c)(u()(this.state.now)),t=new s.a(e).period,a=f.j,[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return n=a.apply(void 0,[r.sent(),function(e){return e.name}]),this.setState({courses:n}),[3,3];case 2:return this.setState({isLoadingCourses:!1}),[7];case 3:return[2]}})})},t.prototype.onNoteClick=function(e,t,n,r,s){var o=this;this.openDialog(a.createElement(m,{weekNumber:e,weekDate:t,courseName:n,weekPlan:r,note:s,env:this.props.env,closeDialog:function(){return o.closeDialog()}}))},t.prototype.onTutorClick=function(e,t){var n=this;this.openDialog(a.createElement(h.a,{weekNumber:t,comment:e.value,updateData:function(t){return n.updateTutorNoteField(e,t)},deleteNoteData:function(){return n.deleteTutorNoteField(e.id)},closeDialog:function(){return n.closeDialog()}}))},t.prototype.deleteTutorNoteField=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.props.env.kgTermPlannerRepo.delete([e])];case 1:return t.sent(),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}})})},t.prototype.updateTutorNoteField=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if((e&&e.value||"")===t)return[2];n.label=1;case 1:return n.trys.push([1,3,,4]),e.value=t,e.acl=[new d.b("tutorFor",this.props.env.currentUser.mail,"S").toString(),new d.b("email",this.props.env.currentUser.mail,"R").toString()],[4,this.props.env.kgTermPlannerRepo.upsert(e,function(e){return e.value=t})];case 2:return[2,n.sent()];case 3:return n.sent(),[3,4];case 4:return[2]}})})},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.render=function(){for(var e=this,t=this.state,n=t.courses,s=t.now,i=t.isLoadingCourses,m=t.isLoadingWeekPlans,f=t.weekPlans,h=t.dialogs,v=i||m,b=[],k=[],y=Object(o.c)(u()(s)),E=r.f(Object(o.d)(u()(s)),2),w=E[0],T=E[1],N=r.f(Object(o.b)(y.term),2),C=N[0],D=N[1],S=g.b.kgTutorComment,O=f.filter(function(e){return!e.type}),M=f.filter(function(e){return"tutor-note"===e.type}),x=function(e){var t=e.week(),n=e.year()<w.year()?w.year():e.year(),r=Object(p.a)(n,t);if(t>=C&&t<=D){var a=O.filter(function(e){return e.dateTime>=r.notBefore&&e.dateTime<=r.notAfter})[0],s=M.filter(function(e){return e.dateTime>=r.notBefore&&e.dateTime<=r.notAfter})[0],o=e.clone().startOf("week").valueOf();b.push({weekNumber:t,weekDate:o,weekPlan:a}),k.push({weekNumber:t,tutorValue:s||{value:"",dateTime:o,id:Object(d.h)(),type:"tutor-note"}})}},L=w.clone().startOf("week");L.valueOf()<T.valueOf();L=L.clone().add(1,"week").startOf("week"))x(L);return a.createElement("div",{className:"ked_boxed"},a.createElement("h4",null,"Terminsplanering"),a.createElement("hr",null),v?a.createElement(c.a,null):0===n.length?a.createElement("div",null,"Terminsplaneraren aktiveras nÃ¤r du skrivits in pÃ¥ dina kurser"):a.createElement("table",{className:"termplanner-table zebra"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Vecka"),n.map(function(e,t){return a.createElement("th",{key:t,className:"kgCourseHeader"},e.name)}),S&&a.createElement("th",{className:"tutorHeader"}))),a.createElement("tbody",null,b.map(function(t,r){var s=t.weekNumber===u()().week(),o=k&&k.find(function(e){return e.weekNumber===t.weekNumber});return a.createElement("tr",{key:r,className:s?"currentWeek":""},a.createElement("td",null,t.weekNumber),n.map(function(n,r){var s=t.weekPlan&&t.weekPlan.plans[n.name];return a.createElement("td",{key:r,className:s?"courseNote note-color-"+s.color:"courseNote","data-tooltip":s&&s.description,title:s&&s.description,onClick:function(){return e.onNoteClick(t.weekNumber,t.weekDate,n.name,t.weekPlan,s)}},s?a.createElement("i",{className:"fas fa-align-center"}):"")}),S&&(e.props.tutored?a.createElement("td",{key:r,onClick:function(){return e.onTutorClick(o.tutorValue,t.weekNumber)},className:"tutorCell"},o.tutorValue.value?a.createElement("div",{key:r,"data-tooltip":o.tutorValue.value},a.createElement("i",{className:"fas fa-comment-dots"})):a.createElement("div",{key:r},a.createElement("i",{className:"fas fa-comment-medical"}))):o.tutorValue.value?a.createElement("td",{className:"tutorCell"},a.createElement("div",{"data-tooltip":o.tutorValue.value},a.createElement("i",{className:"far fa-comment-dots"}))):a.createElement("td",null)))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",{key:"points"},"PoÃ¤ng"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.credits)})),a.createElement("tr",null,a.createElement("th",null,"BetygsmÃ¥l"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.periodGoalGrade)})))),a.createElement(l.a,{dialogs:h,popDialog:function(){return e.setState({dialogs:h.slice(0,h.length-1)})}}))},t}(a.Component)},,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(0),a=n(133),s=n(101);function o(){return r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0})}})}},function(e,t,n){"use strict";var r=n(1),a=n(3),s=n(0),o=n.n(s),i=n(2),u=n(13),c=n(123),l=n(7),d=n(5),m=n(43),f=n(20),p=n(131),h=n(53),g=n(25),v=n(6),b=n.n(v),k=function(e){function t(t,n){var a=this,s=n(),o=Date.now(),i=r.f(Object(g.d)(b()(o)),2),u=i[0],c=i[1];return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){return r.d(this,function(e){return[2,{from:u.startOf("week").add(-2,"days").toDate().valueOf(),to:c.startOf("week").add(5,"days").toDate().valueOf(),role:"USER"}]})})}})||this}return r.c(t,e),t}(h.a),y=new k(function(){return a.a.kedBackendClient},function(){return a.a.currentUser});a.a.kgTermPlannerRepo=y;var E=n(27);function w(e,t){return r.b(this,void 0,void 0,function(){function n(t,n,a){var s=null;return{getBearer:function(){return s||this.refreshBearer()},refreshBearer:function(){return s=function(){return r.b(this,void 0,void 0,function(){var s,o,i,u;return r.d(this,function(r){switch(r.label){case 0:return[4,t.get(n,a)];case 1:return 200!==(s=r.sent()).status?[3,3]:[4,s.json()];case 2:return[2,r.sent()];case 3:return o=d.c.bind,i=[void 0,s.status],u="Could not retrieve tutor token for "+e+". Error Message: ",[4,s.text()];case 4:throw new(o.apply(d.c,i.concat([u+r.sent()])))}})})}()}}}var s,o,i,u,c,h;return r.d(this,function(r){switch(r.label){case 0:return s={mail:e,displayName:t,roles:["USER"],school:a.a.currentUser.school,tutorFor:e},o=n(a.a.kedBackendClient.http,"tutor/token",{userEmail:e}),i=new d.d(f.c,o,l.b.KED_API_URL),u=n(i.http,"tutor/convert-token/google"),c=new m.b(f.c,l.b.EDS_API_URL,o,function(){return e}),(h={currentUser:s,bearerProvider:o,edsClient:c,googleTokenProvider:u,kedBackendClient:i,tutored:!0}).ksTermPlannerRepo=new p.a(function(){return i},function(){return s}),h.kgTermPlannerRepo=new k(function(){return i},function(){return s}),h.userTasksRepo=new E.a(function(){return i},function(){return s}),[4,o.getBearer().catch(function(e){console.error(e)})];case 1:return r.sent(),[2,h]}})})}n.d(t,"a",function(){return T});var T=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,students:[]},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,5,6]),[4,a.a.edsClient.getTeacherTutorStudents()];case 1:return(e=r.sent()).sort(Object(i.h)(["lastName","firstName"])),t=e.length>0?e.map(function(e){return{mail:e.email,displayName:e.firstName+" "+e.lastName}}):[a.a.currentUser],[4,this.setState({students:t})];case 2:return r.sent(),[3,6];case 3:return n=r.sent(),console.error("Could not list tutor students",n),[4,this.setState({students:[a.a.currentUser]})];case 4:return r.sent(),[3,6];case 5:return this.setState({isLoading:!1}),[7];case 6:return[2]}})})},t.prototype.onSelectUser=function(e){var t=this.state.students.filter(function(t){return t.mail===e})[0],n=r.a({},t,{roles:["USER"]});c.a.setNewEnv(n,function(){return w(e,e)})},t.prototype.render=function(){var e=this,t=this.state,n=t.isLoading,r=t.students;return n?o.a.createElement(u.a,null):o.a.createElement("div",{className:"tutors-select"},o.a.createElement("select",{onChange:function(t){return t.target.value&&e.onSelectUser(t.target.value)}},o.a.createElement("option",{value:""},"VÃ¤lj elev"),r.map(function(e){return o.a.createElement("option",{key:e.mail,value:e.mail},e.displayName," (",e.mail,")")})))},t}(o.a.Component)},,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return f});var r,a,s,o,i,u,c=n(1),l=n(0),d=n(2),m=n(3),f=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assessments:[],error:null,loading:!1},n}return c.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return c.b(this,void 0,void 0,function(){var e,t;return c.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,m.a.edsClient.getLatestAssessments(this.props.limit)];case 2:return e=n.sent(),this.setState({assessments:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=this.state.assessments.some(function(e){return!!e.gradeName});return l.createElement("div",{className:"ked_boxed"},l.createElement("div",{className:"weekSelect"},l.createElement("div",{className:"horizontalItem"}),l.createElement("div",{className:"horizontalItem"})),l.createElement("h4",null,Object(d.a)(r||(r=c.e(["Senaste bedÃ¶mningar"],["Senaste bedÃ¶mningar"])))),l.createElement("hr",null),l.createElement("table",{className:"smallFont"},l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",{className:"nowrap"},Object(d.a)(a||(a=c.e(["Datum"],["Datum"])))),l.createElement("th",{className:"nowrap"},Object(d.a)(s||(s=c.e(["Kurs"],["Kurs"])))),l.createElement("th",{className:"nowrap"},Object(d.a)(o||(o=c.e(["Del"],["Del"])))),e&&l.createElement("th",{className:"nowrap"},Object(d.a)(i||(i=c.e(["Betyg"],["Betyg"])))),l.createElement("th",{className:"nowrap",colSpan:2},Object(d.a)(u||(u=c.e(["BedÃ¶mningar"],["BedÃ¶mningar"])))))),l.createElement("tbody",null,this.state.assessments.map(function(t,n){return l.createElement("tr",{key:n,className:n%2&&"tableOdd"},l.createElement("td",null,t.publishDateTime.substr(0,10)),l.createElement("td",{className:"amneCell"},t.courseName),l.createElement("td",{className:"delCell"},t.courseUnitName),e&&l.createElement("td",null,t.gradeName),l.createElement("td",null,l.createElement("pre",null,t.text)))}))))},t}(l.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(0),a=n(133),s=n(3);function o(){return r.createElement(a.a,{env:s.a,tutored:!1})}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(122),s=n(101),o=n(19);function i(e){var t=e.intl;return r.createElement(o.a.Provider,{value:{intl:t}},r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0,initialDate:new Date})}}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(63),o=n(14),i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courses:[],isLoading:!0},n.updateHiddenCoursesState=n.updateHiddenCoursesState.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){s.a.subscribe(this.updateHiddenCoursesState,{fullCourse:!1})},t.prototype.updateHiddenCoursesState=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.componentWillUnmount=function(){s.a.unsubscribe(this.updateHiddenCoursesState)},t.prototype.getCourseUrl=function(e){return Object(o.f)(this.props.viewCourseUrl,{courseId:e})},t.prototype.render=function(){var e=this,t=(this.props.viewCourseUrl,this.state),n=t.isLoading,r=t.error,s=(t.courses,this.state.courses.filter(function(e){return e.visible}));return a.createElement(a.Fragment,null,n?a.createElement("li",{className:"lvl2 header"},a.createElement("a",null,"Laddar...")):r?a.createElement("li",{className:"lv12"},a.createElement("a",null,"Kunde inte ladda kurser.")):s.map(function(t){var n=t.name,r=t.id;return a.createElement("li",{key:r,className:"lvl2"},a.createElement("a",{href:e.getCourseUrl(r)},n))}))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n.n(a),o=n(53),i=n(3),u=i.a.weekNotesRepo,c=function(e){function t(){var t=e.call(this,{getClient:function(){return i.a.kedBackendClient},optimistic:!1,table:"notes",user:i.a.currentUser?i.a.currentUser.mail:"",getQueryOptions:function(){return r.b(t,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}})||this;return t}return r.c(t,e),t}(o.a);u||(u=i.a.weekNotesRepo=new c);var l=n(76),d=n(5),m=n(54),f=n(50),p=n(74),h=n(13);function g(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,o;return r.d(this,function(r){switch(r.label){case 0:return a=!1,s=setTimeout(function(){a=!0,n()},e),[4,t()];case 1:return o=r.sent(),a||clearTimeout(s),[2,o]}})})}var v=n(9),b=n(19),k=function(e){function t(t){var n=e.call(this,t)||this;return n.onChange=n.onChange.bind(n),n.autoSaver=new l.a(function(){return n.save()}),n.state={isLoading:!0,showLoadingProgress:!1,showSavingProgress:!1,everEdited:!1,notes:""},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.showProgressIfLoadingTakesTime(),u.mem.subscribe(this.onChange)},t.prototype.showProgressIfLoadingTakesTime=function(){var e=this;this.timeoutHandle=setTimeout(function(){return e.state.isLoading&&e.setState({showLoadingProgress:!0})},300)},t.prototype.componentWillUnmount=function(){u.mem.unsubscribe(this.onChange),this.autoSaver.stop(),clearTimeout(this.timeoutHandle)},t.prototype._save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:e=3,n.label=1;case 1:return this.isNotesEdited()&&e?[4,u.upsert(this.state.weekNote,function(e){e.content=t.state.notes})]:[3,4];case 2:n.sent(),n.label=3;case 3:return--e,[3,1];case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return this.state.showSavingProgress||this.state.isLoading||!this.isNotesEdited()?[3,8]:[4,this.setState({error:void 0})];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,4,6,8]),[4,g(300,function(){return t._save()},function(){return t.setState({showSavingProgress:!0})})];case 3:return n.sent(),[3,8];case 4:return e=n.sent(),console.error(e),[4,this.setState({error:this.context.intl.formatMessage({id:"common.errorSavingData",defaultMessage:"Kunde inte spara."})})];case 5:return n.sent(),[3,8];case 6:return[4,this.setState({showSavingProgress:!1})];case 7:return n.sent(),[7];case 8:return[2]}})})},t.prototype.isNotesEdited=function(){var e=this.state,t=e.weekNote,n=e.notes;return!!t&&n!==t.content},t.prototype.getTranslatedActions=function(e){var t=Object.assign({},"sv"===e.locale?f.a:p.a);return Object.keys(t).forEach(function(n){var r=f.a[n].title;t[n].title=e.formatMessage({id:"wysiwyg."+n,defaultMessage:r}),"image"===n&&(t[n].promptMsg=e.formatMessage({id:"wysiwyg.imagePromptMsg",defaultMessage:f.a[n].promptMsg}))}),t},t.prototype.onChange=function(e){var t=e.length>0?e[e.length-1]:{id:Object(d.h)(),dateTime:Date.now(),content:"",acl:[new d.b("email",i.a.currentUser.mail,"S")].map(function(e){return e.toString()})},n={weekNote:t,isLoading:!1,showLoadingProgress:!1};this.state.weekNote&&this.state.weekNote.id===t.id&&0!==e.length||(n.notes=t.content),this.setState(n)},t.prototype.render=function(){var e=this,t=this.state,n=t.notes,r=t.showLoadingProgress,a=t.isLoading,o=t.showSavingProgress,i=t.error,u=t.everEdited,c=this.context.intl;return s.a.createElement("div",null,s.a.createElement("div",{className:"ked_boxed kedNotepad"},s.a.createElement("h3",null,s.a.createElement(v.a,{id:"weekNotebook.title",defaultMessage:"Anteckningar"})),s.a.createElement(m.a,{actions:["bold","italic","underline","strikethrough","heading1","heading2","heading3","olist","ulist","line"],defaultActions:this.getTranslatedActions(c),html:a?"<div></div>":n.substr(0,16384),onChange:!a&&function(t){e.setState({notes:t.substr(0,16384),everEdited:!0}),e.autoSaver.triggerChange(500)}}),s.a.createElement("hr",null),i?s.a.createElement("p",{className:"error"},i):r?s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.loading",defaultMessage:"Laddar..."}),s.a.createElement(h.a,null)):o?s.a.createElement(s.a.Fragment,null,s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.saving",defaultMessage:"Sparar..."})," Â  "),s.a.createElement(h.a,null)):this.isNotesEdited()?s.a.createElement(s.a.Fragment,null,"Â "):u?s.a.createElement(v.a,{id:"common.saved",defaultMessage:"Sparad"}):s.a.createElement(s.a.Fragment,null,"Â ")))},t.contextType=b.a,t}(s.a.Component);function y(e){var t=e.intl;return a.createElement(b.a.Provider,{value:{intl:t}},a.createElement(k,null))}n.d(t,"b",function(){return k}),n.d(t,"a",function(){return y})},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2),o=n(43),i=function(){return function(e){this.subjects=e.map(function(e){var t=e.periodGoals.map(function(e){return{period:new o.a(e.periodName),goal:e.gradeName}});return{name:e.courseUnitName,atGoal:t.filter(function(e){return"AT"===e.period.term}).map(function(e){return e.goal})[0],stGoal:t.filter(function(e){return"ST"===e.period.term}).map(function(e){return e.goal})[0],finalGoal:e.finalGoalGrade,strategies:e.strategyText}})}}(),u=n(3),c=function(){return function(e){var t={};e.forEach(function(e){return e.capabilities.forEach(function(e){return t[e.formName]=!0})});var n=Object.keys(t);this.columnHeaders=[{name:"FramtidsfÃ¶rmÃ¥ga",type:"header"},{name:"OmrÃ¥de",type:"header"}].concat(n.map(function(e){return{name:e,type:"year"}})),this.vtHts=Object(s.k)(n.map(function(e){return["HT","VT"]}));var r=[];e.forEach(function(e){var t=[{type:"ability",name:e.abilityName}],n={};e.capabilities.forEach(function(e){var a=[{type:"term",selected:!1!==e.htHasValue},{type:"term",selected:!1!==e.vtHasValue}];n[e.capabilityName]?t&&a.forEach(function(e){return t.push(e)}):(t.length>1&&(r.push(t),t=[]),n[e.capabilityName]=!0,t.push({type:"capability",name:e.capabilityName}),a.forEach(function(e){return t.push(e)}))}),t&&r.push(t)}),this.capabRows=r}}(),l=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loading:!1,data:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentFutureAbilities()];case 2:return e=n.sent(),this.setState({data:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=new c(this.state.data),t=e.columnHeaders,n=e.vtHts,r=e.capabRows;return a.createElement("div",null,a.createElement("h5",null,"FramtidsfÃ¶rmÃ¥gor"),a.createElement("div",{className:"partialEditStudyPlanViewMode"},a.createElement("table",{style:{width:"100%"},className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,t.map(function(e,t){var n=e.name;return"header"===e.type?a.createElement("th",{key:t,rowSpan:2},n):a.createElement("th",{key:t,colSpan:2},n)})),a.createElement("tr",{className:"header"},n.map(function(e,t){return a.createElement("th",{key:t},e)}))),a.createElement("tbody",null,r.map(function(e,t){return a.createElement("tr",{key:t,className:Math.floor(t/3)%2&&"tableOdd"},e.map(function(e,t){return"ability"===e.type?a.createElement("td",{key:t,rowSpan:3,className:"goalsSubject"},e.name):"capability"===e.type?a.createElement("td",{key:t,className:"goalsSubject"},e.name):e.selected?a.createElement("td",{key:t,className:"edsSelected"},a.createElement("div",{className:"markedItem"})):a.createElement("td",{key:t})}))})))))},t}(a.Component);n.d(t,"a",function(){return v});var d,m,f,p,h,g,v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loadingStudyPlans:!1,studyPlans:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loadingStudyPlans:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentGoals()];case 2:return e=n.sent(),this.setState({studyPlans:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loadingStudyPlans:!1}),[2]}})})},t.prototype.render=function(){var e=new i(this.state.studyPlans),t="gymnasium"!==(""+u.a.currentUser.schoolType).toLowerCase();return a.createElement("div",{className:"ked_boxed"},a.createElement("h4",null,Object(s.a)(d||(d=r.e(["MÃ¥l"],["MÃ¥l"])))),a.createElement("hr",null),a.createElement("table",{className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,Object(s.a)(m||(m=r.e(["Ãmne"],["Ãmne"])))),t&&a.createElement("th",null,Object(s.a)(f||(f=r.e(["HT"],["HT"])))),t&&a.createElement("th",null,Object(s.a)(p||(p=r.e(["VT"],["VT"])))),a.createElement("th",null,Object(s.a)(h||(h=r.e(["SlutmÃ¥l"],["SlutmÃ¥l"])))),a.createElement("th",null,Object(s.a)(g||(g=r.e(["Strategier"],["Strategier"])))))),a.createElement("tbody",null,e.subjects.map(function(e,n){return a.createElement("tr",{key:e.name,className:n%2&&"tableOdd"},a.createElement("td",{className:"goalsSubject"},e.name),t&&a.createElement("td",{className:"goalsTerm"},e.atGoal),t&&a.createElement("td",{className:"goalsTerm"},e.stGoal),a.createElement("td",{className:"goalsEnd"},e.finalGoal),a.createElement("td",null,e.strategies))}))),a.createElement("div",{className:"divider"}),a.createElement(l,null))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0);function s(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,fetch(e+"?nodeID="+t,{credentials:"same-origin"})];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()]}})})}var o=n(119);n.d(t,"a",function(){return i});var i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={data:null},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,s(this.props.apiPath,this.props.pageId)];case 1:return e=t.sent(),this.setState({data:e}),[2]}})})},t.prototype.render=function(){if(!this.state.data)return a.createElement("div",null);var e=this.state.data,t=e.moduleName,n=e.subject,r=e.commonTasks,s=e.learningGoals,i=e.step,u=r.map(function(e){return{id:e.id,name:e.name,url:e.url,courseName:n.name,learningGoal:i&&s.length>0?t+" - Ã¶vergripande":t}}),c=s.map(function(e){return{name:e.name,learningTasks:e.tasks.map(function(t){return{id:t.id,name:t.name,url:t.url,courseName:n.name,learningGoal:e.name}})}});return i&&(u.forEach(function(e){return e.step=i}),c.forEach(function(e){return e.learningTasks.forEach(function(e){return e.step=i})})),a.createElement(o.a,{commonTasks:u,learningGoals:c})},t}(a.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"Calendar",function(){return l}),n.d(r,"CalendarTutored",function(){return m}),n.d(r,"WeekPlanner",function(){return h}),n.d(r,"WeekPlannerTutored",function(){return g}),n.d(r,"LatestAssessments",function(){return v.a}),n.d(r,"LearningTasks",function(){return b.a}),n.d(r,"WeekNotebook",function(){return k.a}),n.d(r,"TutorsSelect",function(){return y.a}),n.d(r,"KGTermPlanner",function(){return E.a}),n.d(r,"KGTermPlannerTutored",function(){return w.a}),n.d(r,"ListCourses",function(){return T.a}),n.d(r,"KSTermPlanner",function(){return C}),n.d(r,"KSTermPlannerTutored",function(){return D.a}),n.d(r,"KSGoals",function(){return S.a}),n.d(r,"MyCourses",function(){return O.a});var a=n(1),s=n(24),o=(n(91),n(3)),i=n(0),u=n(19),c=n(132);function l(e){var t=e.intl;return i.createElement(u.a.Provider,{value:{intl:t}},i.createElement(c.a,a.a({},a.a({},e,{env:o.a}))))}var d=n(101);function m(e){var t=e.intl;return i.createElement(u.a.Provider,{value:{intl:t}},i.createElement(d.a,{tutored:!0,createComponent:function(t){return i.createElement(c.a,a.a({key:t.currentUser.mail},e,{env:t}))}}))}var f=n(57),p=n(7);n(27);function h(e){var t=e.intl;return i.createElement(u.a.Provider,{value:{intl:t}},i.createElement(f.a,{env:o.a,viewCourseUrl:p.b.KED_COURSE_VIEWER_URL}))}function g(e){var t=e.intl;return i.createElement(u.a.Provider,{value:{intl:t}},i.createElement(d.a,{tutored:!0,createComponent:function(e){return i.createElement(f.a,{key:e.currentUser.mail,env:e,viewCourseUrl:p.b.KED_COURSE_VIEWER_URL})}}))}var v=n(149),b=n(155),k=n(153),y=n(143),E=n(150),w=n(142),T=n(114),N=n(122);function C(e){var t=e.intl;return i.createElement(u.a.Provider,{value:{intl:t}},i.createElement(N.a,{env:o.a,tutored:!1,initialDate:new Date}))}var D=n(151),S=n(154),O=n(152);o.a.bearerProvider.getBearer(),o.a.googleTokenProvider.getBearer();var M=n(58),x=n(9),L={};Object.keys(r).forEach(function(e){L[e]=Object(M.a)(Object(x.d)(r[e]))});var j=a.a({},L);s.a.components=a.a({},s.a.components,j)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmVudi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmNmZy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9leGVjLnRzIiwid2VicGFjazovL1tuYW1lXS9leHRlcm5hbCBcImpRdWVyeVwiIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hY2Nlc3MtY29udHJvbC9pbmRleC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYWNjZXNzLWNvbnRyb2wvZ2V0LXVzZXItY2xhaW1zLnRzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L3V0aWxzLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9xdWVyeS1zdHJpbmcudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvcmVzdGNsaWVudC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9rZWQtYmVhcmVyLXByb3ZpZGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2FjY2Vzcy1jb250cm9sLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2h0dHAtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViL2JlYXJlci1zdG9yYWdlLXNlc3Npb25zdG9yYWdlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUtdGFzay5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1tb2RlbC1taWdyYXRvci9taWdyYXRlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUtY291cnNlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL2luZGV4LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYi9oYXNoLXJlc3RvcmVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9jbGllbnR3ZWIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2hhcnRzL2dvYWwtcHJvZ3Jlc3MudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9zY2hvb2wtbW9tZW50LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHQtaW5wdXQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXBlcnNpc3RlZC1zdGF0ZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3MvdXNlci10YXNrcy1yZXBvLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL2tlZC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvZW1pdHRlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvdmFsdWUuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2ZlYXR1cmVzL2luZGV4LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9yZW1vdmUtaXRlbS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RET01cIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvbWFwLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9zY2hvb2wtdGVybS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvbWFrZS1zdXNwZW5zZS1hcGkudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMvZWRzY2xpZW50LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHRhcmVhLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvZmliZXItY29udGV4dC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvd2Vla3V0aWwudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucy1zdi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3Mva2VkLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvd2FzaC1odG1sLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9pbWFnZS1lZGl0LWFjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvZ2V0LXRhc2stdHlwZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci91c2VyLXRhc2tzLWJveC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvYWRkLWN1c3RvbS1nb2FsLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci9hZGQtY3VzdG9tLXRhc2sudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL2FkZC1vci1lZGl0LXN1Yi10YXNrLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci9lZGl0LXVzZXItdGFzay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2hhcnRzL3Byb2dyZXNzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci93ZWVrcGxhbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvcmVmaW5lci50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jaGFydHMvY2hhcnRzLXV0aWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9TZXR1cExhbmd1YWdlSW50bC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL2NvbmZpcm1hdGlvbi50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL3Rhc2stbGlzdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3JlcG9zL2hpZGRlbi1jb3Vyc2VzLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2ZlYXR1cmVzL2ZlYXR1cmVzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9kaWFsb2dzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9tb21lbnQtc3YtbG9jYWxlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy9yZXBvLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2FsZW5kYXIvY291cnNlLW5hbWUtdG8tY3NzLWNsYXNzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9wZW5kaW5nLWpvYi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFsLXNldHRlcnMvY29uZmlndXJlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9zZXQtYmVhcmVyLXByb3ZpZGVycy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFsLXNldHRlcnMvc2V0LWtlZC1iYWNrZW5kLWNsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFsLXNldHRlcnMvc2V0LWVkcy1jbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3R1dG9yYWJsZS1jb21wb25lbnQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9jb250ZW50LWVkaXRhYmxlLWZpZWxkLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9saXN0LWNvdXJzZXMvbGlzdC1jb3Vyc2VzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2Utdmlld2VyL3N1YmNvbXBvbmVudHMvbGVhcm5pbmctZ29hbHMtbGlzdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2dlbmVyaWMtc2Nob29sLXV0aWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL3Rlcm1wbGFubmVyLXV0aWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9nZW5lcmljLXNjaG9vbC10ZXJtLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL3ZpZXdtb2RlbC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwby1pbnN0YW5jZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jaGFydHMvZG91Z2hudXQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL3Rlcm1wbGFubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9LRUQudHV0b3JFbnYudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUgc3luYyBzdnxlbiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rcy10ZXJtcGxhbm5lci90dXRvci1kaWFsb2cudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy9rcy10ZXJtcGxhbm5lci1yZXBvLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2FsZW5kYXIvZGF5LXZpZXctZXZlbnQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL3RpbWUtbGluZXMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL2RheS12aWV3LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jYWxlbmRhci9jcnVuY2gtY29sbGlkaW5nLWV2ZW50cy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jYWxlbmRhci9ob3VyLW1hcmtlci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2FsZW5kYXIvc3RhdHVzLWJhci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2FsZW5kYXIvd2Vlay12aWV3LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYXBpcy9nb29nbGUtY2FsZW5kYXIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2FsZW5kYXIvaW5kZXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL3Nob3VsZC1pbmNsdWRlLWNhbGVuZGFyLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tnLXRlcm1wbGFubmVyL3dlZWstbm90ZS1kaWFsb2cudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tnLXRlcm1wbGFubmVyL2tnLXRlcm1wbGFubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rZy10ZXJtcGxhbm5lci9rZy10ZXJtcGxhbm5lci10dXRvcmVkLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3Mva2ctdGVybXBsYW5uZXItcmVwby50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvcmVxdWVzdC10dXRvcmVkLXRva2Vucy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy90dXRvcnMtc2VsZWN0L3R1dG9ycy1zZWxlY3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2xhdGVzdC1hc3Nlc3NtZW50cy9sYXRlc3QtYXNzZXNzbWVudHMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tnLXRlcm1wbGFubmVyL2tnLXRlcm1wbGFubmVyLXNlbGYudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL2tzLXRlcm1wbGFubmVyLXR1dG9yZWQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL215LWNvdXJzZXMvbXktY291cnNlcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3JlcG9zL3dlZWstbm90ZXMtcmVwby50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvaWYtdGFrZXMtdGltZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrLW5vdGVib29rL3dlZWstbm90ZWJvb2sudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWstbm90ZWJvb2svcm9vdC13ZWVrLW5vdGVib29rLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrLW5vdGVib29rL2luZGV4LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tzLWdvYWxzL2dvYWxzLXZpZXdtb2RlbC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rcy1nb2Fscy9mdXR1cmUtYWJpbGl0aWVzLXZpZXdtb2RlbC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rcy1nb2Fscy9mdXR1cmUtYWJpbGl0aWVzLXRhYmxlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rcy1nb2Fscy9nb2Fscy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMva2VkLWxlYXJuaW5nZ29hbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvbGVhcm5pbmctdGFza3MvaW5kZXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL2NhbGVuZGFyLXNlbGYudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL2NhbGVuZGFyLXR1dG9yZWQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXNlbGYudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXR1dG9yZWQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL2tzLXRlcm1wbGFubmVyLXNlbGYudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9lbGVtZW50cy9LRURDb21wb25lbnRzL2tlZGNvbXBvbmVudHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2VsZW1lbnRzL0tFRENvbXBvbmVudHMva2VkY29tcG9uZW50cy5jbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2VsZW1lbnRzL0tFRENvbXBvbmVudHMvd2VicGFjay1lbnRyeS50cyJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiZXhlY3V0ZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImRlZmVycmVkTW9kdWxlcyIsImFwcGx5IiwiY2hlY2tEZWZlcnJlZE1vZHVsZXMiLCJyZXN1bHQiLCJkZWZlcnJlZE1vZHVsZSIsImZ1bGZpbGxlZCIsImoiLCJkZXBJZCIsInNwbGljZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIjUiLCJleHBvcnRzIiwibW9kdWxlIiwibCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsIlJlYWN0IiwiY2FwaXRhbGl6ZUZpcnN0Iiwic3RyIiwiY2hhckNvZGVBdCIsInN1YnN0ciIsInRvTG9jYWxlVXBwZXJDYXNlIiwiZXh0ZW5kIiwib2JqIiwiZXh0ZW5zaW9uIiwia2V5cyIsImZvckVhY2giLCJjbG9uZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25jYXQiLCJmbGF0dGVuIiwiYSIsImNvbXBhcmVQcm9wIiwicHJvcCIsImIiLCJhUHJvcCIsImJQcm9wIiwiY29tcGFyZVByb3BzIiwicHJvcHMiLCJsb2NhbGVzIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImxvY2FsZUNvbXBhcmUiLCJtYXAiLCJzcGxpdCIsIl9hIiwiX2IiLCJ0c2xpYl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZmlyc3RQYXJ0IiwicmVzdCIsImNtcFBhcnQiLCJmaXJzdEEiLCJmaXJzdEIiLCJyZWR1Y2UiLCJjbXAxIiwiY21wMiIsIkwiLCJ0ZXh0IiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwicnYiLCJidWlsZE1lc3NhZ2UiLCJkYXRlVGltZVJldml2ZXIiLCJleGVjIiwiRGF0ZSIsInNob3dJbmZvIiwibXNnIiwiZXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJzaG93RXJyb3IiLCJlcnJNc2ciLCJtZXNzYWdlIiwiY29uc29sZSIsImVycm9yIiwibWF4TGVuZ3RoIiwibWF4TGVuIiwiYXJyYXlUb0xvb2t1cCIsImtleUFjY2Vzc29yIiwiaXRlbSIsImFycmF5IiwiYXJyYXlUb01hcCIsImNoZXJyeVBpY2tQcm9wcyIsInByb3BzVG9QaWNrIiwicHJvcHNUb1BpY2tfMSIsInByb3BzVG9QaWNrXzFfMSIsIm5leHQiLCJkb25lIiwicGFyYW0iLCJkaXN0aW5jdCIsIngiLCJzaGFsbG93RXF1YWxzIiwia2V5c0EiLCJrZXlzQiIsIl9fd2VicGFja19leHBvcnRzX18iLCJlbnYiLCJfa2VkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfanNfZGlzdF9qc19rZWRfYmFja2VuZF9jbGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNmZyIsIl9LRURfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNvbW1hbmQiLCJkb2N1bWVudCIsImV4ZWNDb21tYW5kIiwialF1ZXJ5IiwiU3Bpbm5lciIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJjbGFzc05hbWUiLCJhcmlhLWhpZGRlbiIsIklNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TIiwiaGFzQWNjZXNzIiwidXNlciIsImRvYyIsInJlcXVlc3RlZFJpZ2h0IiwiY2xhaW1zIiwidHlwZSIsIm1haWwiLCJzY2hvb2wiLCJyb2xlcyIsInJvbGUiLCJnZXRVc2VyQ2xhaW1zIiwidHV0b3JGb3IiLCJmaWx0ZXIiLCJjbGFpbSIsImNsaWVudCIsImZyb21TdHJpbmdBcnJheSIsImFjbCIsImhhc1dyaXRlQWNjZXNzIiwiaXNUZWFjaGVyQXRTY2hvb2wiLCJpc1RlYWNoZXIiLCJzb21lIiwiYmVsb25nc1RvU2Nob29sIiwidG9Mb3dlckNhc2UiLCJpc0FkbWluT3JUZWFjaGVyQXRTY2hvb2wiLCJpbmNsdWRlcyIsImltcGVyc29uYXRpb25FbnYiLCJhY3RBcyIsInVybCIsImN1cnJlbnRRdWVyeSIsInF1ZXJ5X3N0cmluZyIsImxvY2F0aW9uIiwic2VhcmNoIiwibmV3UXVlcnkiLCJ0c2xpYl9lczYiLCJuZXdRdWVyeVN0cmluZyIsImhyZWYiLCJoYXNoIiwicHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkiLCJxdWVyeSIsInByZXNlcnZlZFF1ZXJ5IiwiSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVNfMSIsIklNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TXzFfMSIsInBIYXNoIiwiaW5kZXhPZiIsImNyZWF0ZVVVSUQiLCJhdm9pZFNpbXVsdGFub3VzQ2FsbHMiLCJnZXRHbG9iYWxJZCIsImNvbXB1dGVQcmVkZXN0aW5hdGVkSWQiLCJ1cGRhdGVBcnJheSIsIm5vdyIsInJlcGxhY2UiLCJNYXRoIiwicmFuZG9tIiwiZmxvb3IiLCJ0b1N0cmluZyIsIm1ldGhvZCIsIm9uZ29pbmdQcm9taXNlIiwidGhpcyIsInRoZW4iLCJyZWFsbSIsInBhZCIsIkVycm9yIiwiaGV4Iiwiam9pbiIsImlucHV0IiwiZW5jb2RlciIsImRpZ2VzdCIsImxhYmVsIiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwic3VidGxlIiwic2VudCIsIm5pYmJsZSIsIm1hcHBlciIsInJldHZhbCIsIm1hcHBlZCIsInBhcnNlUXVlcnlTdHJpbmciLCJsb2NhdGlvblNlYXJjaCIsInRvTG93ZXIiLCJwYXJ0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidHJpbSIsImVuY29kZVBhcmFtcyIsInBhcmFtcyIsInVuZGVmaW5lZCIsImVuY29kZVVSSUNvbXBvbmVudCIsImdlbmVyYXRlUXVlcnlTdHJpbmciLCJzcGxpdFVybEFuZFF1ZXJ5IiwidXJsV2l0aFBvc3NpYmxlUXVlcnkiLCJwUXVlcnkiLCJyZXN0Y2xpZW50X1Jlc3RDbGllbnQiLCJSZXN0Q2xpZW50IiwiaXNvbW9ycGhpYyIsImJhc2VVcmwiLCJudW1PdXRzdGFuZGluZ09wZXJhdGlvbnMiLCJfc3RhdHVzIiwiZW1pdHRlciIsImZldGNoT3B0aW9ucyIsImF1dGhIZWFkZXIiLCJiZWFyZXIiLCJ1c2VybmFtZSIsImJ0b2EiLCJwYXNzd29yZCIsImJlYXJlclByb3ZpZGVyIiwiY29uZmlndXJhYmxlIiwiZmV0Y2giLCJwYXRoIiwiaGVhZGVycyIsIl90aGlzIiwiZGlzcGF0Y2giLCJfZmV0Y2giLCJyZXMiLCJjYXRjaCIsImVyciIsIlByb21pc2UiLCJyZWplY3QiLCJxdWVyeVN0ciIsInRva2VuSW5mbyIsIl9jIiwid3d3YXV0aCIsIl9kIiwiX2UiLCJjYWNoZSIsIm5vY2FjaGUiLCJ1dGlscyIsImdldEJlYXJlciIsImV4cGlyZXMiLCJsb2ciLCJyZWZyZXNoQmVhcmVyIiwidG9rZW4iLCJBdXRob3JpemF0aW9uIiwic3RhdHVzIiwidGVzdCIsIkFjY2VwdCIsInBvc3QiLCJDb250ZW50LVR5cGUiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImRlbGV0ZSIsImtlZF9iZWFyZXJfcHJvdmlkZXJfS2VkQmVhcmVyUHJvdmlkZXIiLCJLZWRCZWFyZXJQcm92aWRlciIsInN0b3JhZ2UiLCJ0b2tlbklkIiwiY2xpZW50SWQiLCJjbGllbnRTZWNyZXQiLCJ0b2tlblVybCIsInRva2VuUXVlcnkiLCJ0cnlzIiwibG9hZCIsInJldHJpZXMiLCJ3YXJuIiwic3RhdHVzVGV4dCIsInNhdmUiLCJEb2N1bWVudEFjY2VzcyIsImFjY2Vzc0NsYWltVHlwZSIsImFjY2Vzc0NsYWltVmFsdWUiLCJyaWdodCIsImZyb21TdHJpbmciLCJhYyIsImNsYWltVHlwZSIsInVuZXNjYXBlIiwiY2xhaW1WYWx1ZSIsImVzY2FwZSIsImFjY2Vzc0NvbXBvbmVudCIsInRvU3RyaW5nQXJyYXkiLCJ1c2VyQ2xhaW1zIiwiaHR0cF9lcnJvcl9IdHRwRXJyb3IiLCJfc3VwZXIiLCJIdHRwRXJyb3IiLCJjb2RlIiwia2VkX2JhY2tlbmRfY2xpZW50X0tlZEJhY2tlbmRDbGllbnQiLCJrZWRfYmFja2VuZF9jbGllbnRfQmF0Y2hSdW5uZXIiLCJLZWRCYWNrZW5kQ2xpZW50IiwiaHR0cCIsImdldE15Q2xhaW1zIiwidGFibGUiLCJqc29uIiwiaWQiLCJsaXN0IiwibXV0YXRpb25zT25FbXB0eSIsImJhdGNoIiwicmVxcyIsInNvcnQiLCJyZXExIiwicmVxMiIsIm9wIiwiZG8iLCJzY29wZUZuIiwicnVubmVyIiwibXV0YXRpb25SZXF1ZXN0cyIsImRlbGV0ZVJlYWxtIiwiYWRkIiwiYnJhbmNoSWQiLCJwdXQiLCJ1cGRhdGUiLCJkZWx0YURvYyIsIm1lcmdlIiwidGFyZ2V0QnJhbmNoSWQiLCJjbGVhckJyYW5jaCIsInNoYXJlIiwidW5zaGFyZSIsImxpbmsiLCJzb3VyY2VUYWJsZSIsInNvdXJjZUlkIiwidGFyZ2V0VGFibGUiLCJ0YXJnZXRJZCIsImxpbmsyIiwidW5saW5rIiwidW5saW5rMiIsInVuZG9MaW5rIiwiQmF0Y2hSdW5uZXIiLCJMYW5ndWFnZUNvbnRleHQiLCJpbnRsIiwiQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJzZXRJdGVtIiwiZ2V0SXRlbSIsInJlc29sdmUiLCJwYXJzZSIsImV4IiwibWlncmF0ZVRhc2siLCJ0YXNrIiwicmVzb3VyY2VzIiwibWlncmF0ZSIsImdyYXBocyIsImNvdXJzZSIsInRhc2tJZHMiLCJyZXNwb25zaWJsZVRlYWNoZXJzIiwicmVzb3Vyc2VzIiwidGFza3MiLCJtaWdyYXRlQ291cnNlIiwicmVkaXJIYXNoIiwiaGFzaF9yZXN0b3Jlcl9hIiwidGltZSIsInJlbW92ZUl0ZW0iLCJfIiwiX19taWdyYXRvcl9taXhlZF9pbiIsImluY2x1ZGUiLCJLZWRNb2RlbE1pZ3JhdG9yTWl4aW4iLCJrZWRfYmFja2VuZF9jbGllbnQiLCJ0aW1lT2ZQYWdlTG9hZCIsImtlZF9iYWNrZW5kX2NsaWVudF93ZWJfV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIiLCJXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciIsInRva2VuUGF0aCIsInRva2VuUmVzcG9uc2VNYXBwZXIiLCJyZWRpcmVjdCIsImNyZWRlbnRpYWxzIiwid2FudHNSZWRpcmVjdCIsInJlbG9hZCIsInNlbGYiLCJrZWRfYmFja2VuZF9jbGllbnRfd2ViX0tlZEJhY2tlbmRDbGllbnRXZWIiLCJLZWRCYWNrZW5kQ2xpZW50V2ViIiwiYXBpQmFzZVVybCIsInByb3ZpZGVyT3JUb2tlblBhdGgiLCJnb2FsX3Byb2dyZXNzX0dvYWxQcm9ncmVzcyIsIkdvYWxQcm9ncmVzcyIsImNyZWF0ZVByb2dyZXNzIiwibnVtYmVyT2ZUYXNrcyIsImNvbXBsZXRlZE51bWJlck9mVGFza3MiLCJtYXhpbXVtVGFza3NEaXNwbGF5ZWQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwcm9ncmVzc0NvbG9yIiwicHJvZ3Jlc3MiLCJleHRlcm5hbF9SZWFjdF8iLCJ0YXNrTm8iLCJmaWxsIiwiY3giLCJjeSIsInJlbmRlciIsImRlZmF1bHRQcm9wcyIsIm51bWJlcm9mVGFza3MiLCJvcGVuX2Nsb3NlX2JveF9PcGVuQ2xvc2VCb3giLCJPcGVuQ2xvc2VCb3giLCJzdGF0ZSIsImhlYWRlck9wZW4iLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwic2V0U3RhdGUiLCJ0aXRsZSIsImNoaWxkcmVuIiwiaGVhZGVyQ2xhc3NOYW1lIiwiY29udGVudENsYXNzTmFtZSIsImRpc3BsYXlQcm9ncmVzcyIsInByb2dyZXNzRGF0YSIsIm9uQ2xpY2siLCJvbk9wZW5DbG9zZSIsIktFRCIsImdldEZpcnN0QW5kTGFzdFdlZWtPZlRlcm0iLCJ0ZXJtIiwiZ2V0VGVybVN0YXJ0QW5kRW5kIiwibW9udGgiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwieWVhciIsImdldFNjaG9vbE1vbWVudCIsInRoaXNZZWFyIiwiaXNBdXR1bW4iLCJhY2FkZW1pY1llYXIiLCJ3ZWVrIiwiYWRkWWVhciIsImFZZWFyIiwibnVtWWVhcnNUb0FkZCIsInllYXJTdHIiLCJwYXJzZUludCIsIlRleHRJbnB1dCIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfZm9ybV9maWVsZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiYXV0b0ZvY3VzIiwic2l6ZSIsIm9uQ2hhbmdlIiwiZXYiLCJ0YXJnZXQiLCJwbGFjZWhvbGRlciIsIndlZWtwbGFubmVyX3BlcnNpc3RlZF9zdGF0ZV9XZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIiwiV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSIsInVzZXJPckNvcHkiLCJsYXN0V3JpdGUiLCJ3ZWVrRGF0ZSIsIm1vbWVudF9zdl9sb2NhbGUiLCJzdGFydE9mIiwidmFsdWVPZiIsIm9wZW5Db3Vyc2VzIiwiYXNzaWduIiwiY29va2llIiwibG9jYWxTdG9yYWdlIiwic3RvcmVkRGF0YSIsImlzRXhwaXJlZCIsIm1vbWVudF9kZWZhdWx0IiwiYXNPZiIsImlzQmVmb3JlIiwiRVhQSVJBVElPTl9IT1VSUyIsIlZFUlNJT04iLCJ1c2VyVGFza3NSZXBvIiwiS0VEX2VudiIsInVzZXJfdGFza3NfcmVwb19Vc2VyVGFza3NSZXBvIiwiVXNlclRhc2tzUmVwbyIsImdldENsaWVudCIsImdldEN1cnJlbnRVc2VyIiwib3B0aW1pc3RpYyIsImdldFF1ZXJ5T3B0aW9ucyIsImN1cnJlbnRVc2VyIiwidXNlckVtYWlsIiwicGVyc2lzdGVkU3RhdGUiLCJ3ZWVrTnVtYmVyIiwiZnJvbSIsImtlZFdlZWsiLCJ3ZWVrdXRpbCIsIm5vdEJlZm9yZSIsInRvIiwibm90QWZ0ZXIiLCJmbGFncyIsInVwZGF0ZVBlcnNpc3RlZFN0YXRlIiwic3RhdGVDaGFuZ2VzIiwibWVtIiwibm90aWZ5U3Vic2NyaWJlcnMiLCJzZXRUYXNrRG9uZVN0YXRlIiwidXNlclRhc2siLCJtb2RpZmllZEl0ZW0iLCIkbWV0YSIsInNpbWlsYXJUYXNrcyIsImlkZW50aWNhbFRhc2tzIiwiY291cnNlTmFtZSIsImxlYXJuaW5nR29hbCIsInNldFN1YlRhc2tEb25lU3RhdGUiLCJzdWJUYXNrSWQiLCJzdWJUYXNrcyIsInN0Iiwic2V0V2Vla1BsYW5uZXJCb3hPcGVuIiwiaXNPcGVuIiwiY2hhbmdlV2VlayIsIm5ld1BlcnNpc3RlZCIsInJlZnJlc2hGcm9tU2VydmVyIiwic3Vic2NyaWJlIiwic3Vic2NyaWJlciIsInByb3h5U3Vic2NyaWJlciIsInVzZXJUYXNrcyIsInV0Iiwid2Vla1RleHRzIiwia2VkYmFja2VuZF9jbGllbnQiLCJkYXRlVGltZSIsImFzc2Vzc21lbnQiLCJzdHJhdGVneSIsInVuc3Vic2NyaWJlIiwic3Vic2NyaWJlcnMiLCJrZWRfcmVwbyIsImtlZEJhY2tlbmRDbGllbnQiLCJlbnN1cmVIYXNEYXRhIiwiRW1pdHRlciIsImluaXRpYWxWYWx1ZSIsIm9ic2VydmVyIiwic3Vic2NyaXB0aW9uIiwiX2Rpc3BhdGNoIiwiZGlzcGF0Y2hFcnJvciIsIlZhbHVlIiwiX29ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9tYXBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9jb2xsZWN0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfZmliZXJfY29udGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwicmVhZCIsIm5vdGlmeSIsInJlc29sdmVkIiwic3Vic2NpcHRpb24iLCJjdXJyZW50RmliZXIiLCJjdXJyZW50Iiwic3Vic2NyaXB0aW9ucyIsImZuIiwicHJlZml4IiwidG9Db2xsZWN0aW9uIiwiY29tYmluZUxhdGVzdCIsIm90aGVyIiwibXlTdWJzY3JpcHRpb24iLCJvdGhlclN1YnNjcmlwdGlvbiIsInZhbHVlcyIsIml0ZW1zIiwic3dpdGNoTWFwIiwibWFwcGVkU3Vic2NyaXB0aW9uIiwicmV0dXJuZWRTdWJzY3JpcHRpb24iLCJvYnNlcnZhYmxlT3JWYWx1ZSIsIk9ic2VydmFibGUiLCJfc3Vic2NyaWJlIiwiX2ZlYXR1cmVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJGb3JtRmllbGQiLCJodG1sRm9yIiwibm9kZSIsInJlY3VjaGVjayIsIlNldCIsImZpbmRJZCIsImhhcyIsImNoaWxkIiwiY2hpbGRJZCIsIkNvbGxlY3Rpb24iLCJfdmFsdWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl9lbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfbWFwIiwiZW1pdHRlcl8xIiwiZmxhdCIsInRvVmFsdWUiLCJtZSIsIm9yZGVyQnkiLCJncm91cEJ5IiwiZmlyc3QiLCJhcnIiLCJSZW1vdmVJdGVtIiwic3R5bGUiLCJfdXRpbHNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInRlbXBsYXRlT2JqZWN0XzEiLCJSZWFjdERPTSIsImluaXRNYXBNZXRob2QiLCJjdG9yIiwic2Nob29sX3Rlcm1fU2Nob29sVGVybSIsIlNjaG9vbFRlcm0iLCJkYXRlT3JTY2hvb2xNb21lbnQiLCJzY2hvb2xNb21lbnQiLCJzY2hvb2xfbW9tZW50IiwibmV4dFRlcm0iLCJwcmV2VGVybSIsInRvTG9jYWxlU3RyaW5nIiwic2hvcnRZZWFyIiwiZm9ybWF0TWVzc2FnZSIsImRlZmF1bHRNZXNzYWdlIiwiZGVmYXVsdE9wdGlvbnMiLCJpc0FwaU1ldGhvZCIsImYiLCJjYWNoZUV4cGlyYXRpb24iLCJlZHNjbGllbnRfRWRzQ2xpZW50IiwiRWRzQ2xpZW50IiwidXNlckVtYWlsR2V0dGVyIiwib25nb2luZ1Byb21pc2VzIiwiYXJnc0pzb24iLCJzdXNwZW5zZSIsImFwaSIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzdXNwZW5kaWZ5IiwiY2FjaGVkRW50cnkiLCJwcm9taXNlIiwidGltZW91dCIsIm1ha2VTdXNwZW5zZUFwaSIsInByaXZhdGl6aW5nQ2FjaGVCdXN0IiwiZ2V0QWN0aXZlQ291cnNlcyIsInEiLCJjb3Vyc2VDb2RlIiwiQ291cnNlQ29kZSIsInBlcmlvZE5hbWUiLCJQZXJpb2ROYW1lIiwiY291cnNlcyIsImV4XzEiLCJnZXRMYXRlc3RBc3Nlc3NtZW50cyIsImxpbWl0IiwiaXNOYU4iLCJDb3VudCIsImFzc2Vzc21lbnRzIiwiZ2V0U3R1ZGVudEdvYWxzIiwic3R1ZGVudEdvYWxzIiwiZ2V0U3R1ZGVudEZ1dHVyZUFiaWxpdGllcyIsInN0dWRlbnRGdXR1cmVBYmlsaXRpZXMiLCJnZXRUZWFjaGVyVHV0b3JTdHVkZW50cyIsInN0dWRlbnRzIiwiZ2V0U2Nob29sVHVpdGlvbkdyb3VwcyIsInNjaG9vbFR1aXRpb25Hcm91cHMiLCJnZXRUdWl0aW9uR3JvdXBTdHVkZW50cyIsInR1aXRpb25Hcm91cFN0dWRlbnRzIiwiZ2V0U2Nob29sVGVhY2hlcnMiLCJzY2hvb2xUZWFjaGVycyIsImdldEFjYWRlbWljWWVhclRlcm1zIiwic2Nob29sTG9jYWxlIiwiZGF0ZSIsIm1vY2tfZWRzX2RhdGEiLCJTb3V0aEluZGlhIiwiaXNTYW1lT3JBZnRlciIsImZpcnN0VGVybSIsInN0YXJ0RGF0ZSIsImlzU2FtZU9yQmVmb3JlIiwic2Vjb25kVGVybSIsImVuZERhdGUiLCJOb3J0aEluZGlhIiwiaG9saWRheXMiLCJnZXRNb250aCIsImZpcnN0VGVybVllYXIiLCJnZXRGdWxsWWVhciIsInNlY29uZFRlcm1ZZWFyIiwiZmlyc3RUZXJtWWVhck1vbWVudCIsInNlY29uZFRlcm1ZZWFyTW9tZW50Iiwic3RhcnRGaXJzdFRlcm1EYXRlIiwiZW5kRmlyc3RUZXJtRGF0ZSIsImVuZE9mIiwic3RhcnRTZWNvbmRUZXJtRGF0ZSIsImVuZFNlY29uZFRlcm1EYXRlIiwidG9EYXRlU3RyaW5nIiwiZWRzY2xpZW50X0VEU1BlcmlvZCIsIkVEU1BlcmlvZCIsInBlcmlvZFN0cmluZ09yU2Nob29sVGVybSIsInBlcmlvZCIsInN0YXJ0c1dpdGgiLCJzY2hvb2xUZXJtIiwiVGV4dEFyZWFGb3JtRmllbGQiLCJjb2xzIiwicm93cyIsIkZpYmVyQ29udGV4dCIsInByb3ZpZGVycyIsImFkZFByb3ZpZGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwic2V0Q3VycmVudEdldHRlckZyb21Qcm92aWRlcnMiLCJyZW1vdmVQcm92aWRlciIsInNldCIsIktFRFdlZWsiLCJnZXRBZGp1c3RlZFdlZWsiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJ0b0RhdGUiLCJnZXRUaW1lIiwid2Vla2RheSIsIl9leGVjX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJib2xkIiwiaWNvbiIsIml0YWxpYyIsInVuZGVybGluZSIsInN0cmlrZXRocm91Z2giLCJoZWFkaW5nMSIsImhlYWRpbmcyIiwiaGVhZGluZzMiLCJwYXJhZ3JhcGgiLCJxdW90ZSIsIm9saXN0IiwidWxpc3QiLCJsaW5lIiwicHJvbXB0IiwiaW1hZ2UiLCJwcm9tcHRNc2ciLCJjb21wb25lbnQiLCJlbGVtZW50Iiwic2VsIiwicmFuZ2UiLCJpbWciLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwidGFiSW5kZXgiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImNvbGxhcHNlIiwiaW5zZXJ0Tm9kZSIsInNldFN0YXJ0QWZ0ZXIiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsIm9uZm9jdXMiLCJvbkZvY3VzIiwib25ibHVyIiwib25CbHVyIiwiY29udGVudERpdiIsImlubmVySFRNTCIsIktlZFJlcG8iLCJfcmVwb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicXVlcnlPcHRpb25zIiwiY2FjaGVCdXN0IiwiZ2V0Q2FjaGVCdXN0IiwicmVnZW5lcmF0ZUNhY2hlQnVzdCIsImtlZGJhY2tlbmRfY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ1cHNlcnQiLCJ1cGRhdGVyIiwiJGV0YWciLCJ1cGRhdGVkSXRlbSIsImluc2VydCIsImUiLCJtb2RpZmllZEl0ZW1zIiwibWVtUmVwb0l0ZW0iLCJmaW5kIiwiaXQiLCJiciIsImlkcyIsImZyZXNoSXRlbXMiLCJmcmVzaEl0ZW0iLCJtb2RpZmllZCIsIm5ld0V0YWdzIiwic3RyaXBHcmFwaHMiLCJncmFwaCIsInN0cmlwcGVkIiwiZm9yZWlnbkl0ZW1zIiwiZ3JhcGhzXzEiLCJncmFwaHNfMV8xIiwic3RyaXBwZWRfMSIsInN0cmlwcGVkXzFfMSIsInBhcnNlciIsIkRPTVBhcnNlciIsIkhUTUxfV0FTSF9QT0xJQ1kiLCJ1Iiwic3RyaWtlIiwicHJlIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImNsYXNzIiwidGFiaW5kZXgiLCJ1bCIsIm9sIiwibGkiLCJociIsImRpdiIsInNwYW4iLCJib3JkZXIiLCJ0Ym9keSIsInRoZWFkIiwidGZvb3QiLCJ0ciIsInRkIiwiY29sc3BhbiIsInJvd3NwYW4iLCJ0aCIsImFiYnIiLCJzY29wZSIsInNvcnRlZCIsIndhc2hIdG1sIiwiaHRtbCIsInBhcnNlRnJvbVN0cmluZyIsImNoaWxkTm9kZXMiLCJ3YXNoTm9kZSIsInRhZ05hbWUiLCJpc0VsZW1lbnQiLCJwb2xpY3kiLCJ3YXNoQ2hpbGROb2RlcyIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmUiLCJyZW1vdmVNaWRkbGVFbGVtZW50IiwiYXR0cmlidXRlcyIsImF0dHIiLCJhbGxvd2VkIiwicmVtb3ZlQXR0cmlidXRlIiwid2FzaEVsZW1lbnQiLCJjbGFzc2VzIiwid3lzaXd5Z19XeXNpd3lnIiwiV3lzaXd5ZyIsImZvY3VzUmVjdCIsIm9uTW91c2VEb3duIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJjb21wb25lbnREaWRNb3VudCIsInJlYWRPbmx5IiwicXVlcnlTZWxlY3RvckFsbCIsImVsZW0iLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlcG9ydE51bUNoYXJzIiwiaW5uZXJUZXh0IiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFN0YXRlIiwidHJpZ2dlck9uQ2hhbmdlIiwibmV3U3RhdGUiLCJnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCIsInBhcmVudEVsZW1lbnQiLCJmb2N1c0VsZW0iLCJyZWxhdGVkVGFyZ2V0IiwiZm9jdXNSZWN0RGl2IiwibWFrZUNsaWNrYWJsZSIsImNvcm5lciIsImdldFJlY3RDb3JuZXIiLCJyZXNpemVTdGFydFgiLCJjbGllbnRYIiwicHJldmVudERlZmF1bHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsIm5ld1dpZHRoIiwibWF4IiwiZW5kc1dpdGgiLCJmYWN0b3IiLCJuZXdIZWlnaHQiLCJoZWlnaHQiLCJleGVjSW1hZ2VFZGl0QWN0aW9uIiwiY21kIiwiY3NzRmxvYXQiLCJjYiIsImRlZmF1bHRBY3Rpb25zIiwiYWN0aW9ucyIsImFjdGlvbnNUb1VzZSIsImFjdGlvbiIsIm1heENoYXJzIiwiaWR4IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJzZXRUaW1lb3V0IiwiZm9jdXMiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJyZWYiLCJjb250ZW50RWRpdGFibGUiLCJvblBhc3RlIiwiY3VycmVudFRhcmdldCIsImVkaXRvclRleHQiLCJ0ZXh0QmVpbmdQYXN0ZWQiLCJjbGlwYm9hcmREYXRhIiwiZ2V0RGF0YSIsIm9uS2V5VXAiLCJOYU4iLCJvbktleVByZXNzIiwib25JbnB1dCIsIm9uS2V5RG93biIsIndoaWNoIiwic3RvcFByb3BhZ2F0aW9uIiwic2hpZnRLZXkiLCJrZXlDb2RlIiwicmVtb3ZlQ2hpbGQiLCJvdXRsaW5lIiwiYm90dG9tIiwicGFyZW50IiwicGFyZW50UmVjdCIsImNoaWxkUmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJnZXRUYXNrVHlwZSIsInNpdGVWaXNpb25QYWdlSWQiLCJjb3Vyc2VJbmZvIiwidXNlcl90YXNrc19ib3hfVXNlclRhc2tzQm94IiwiVXNlclRhc2tzQm94IiwibGVhcm5pbmdHb2FscyIsInNyY19mZWF0dXJlcyIsImNvbnRleHQiLCJvcGVuX2Nsb3NlX2JveCIsImluZGV4X2VzIiwiY291cnNlX25hbWVfdG9fY3NzX2NsYXNzIiwiYmVjYW1lT3BlbiIsInNldElzT3BlbiIsImxnIiwic3RlcCIsInJlbW92ZUxlYXJuaW5nR29hbCIsImlzV29ya2luZyIsInRhc2tUeXBlIiwiZXhwaXJlZCIsImRlYWRsaW5lIiwib3BhY2l0eSIsInNldFRhc2tEb25lIiwiZ2V0VGFza1VybCIsInZpZXdDb3Vyc2VVcmwiLCJnZXRTdWJqZWN0UGxhbm5lclRhc2tVcmwiLCJob3N0IiwiZm9ybWF0IiwiZWRpdFRhc2siLCJzdWJUYXNrIiwic2V0U3ViVGFza0RvbmUiLCJlZGl0U3ViVGFzayIsImFkZE93blRhc2siLCJjb250ZXh0VHlwZSIsImFjY2Vzc19jb250cm9sIiwiY291cnNlSWQiLCJ0YWIiLCJLRURfY2ZnIiwiS0VEX1NVQkpFQ1RfUExBTk5FUl9VUkwiLCJhZGRfY3VzdG9tX2dvYWxfQWRkQ3VzdG9tR29hbCIsIkFkZEN1c3RvbUdvYWwiLCJvblNhdmUiLCJhZGRfY3VzdG9tX3Rhc2tfQWRkQ3VzdG9tVGFzayIsIkFkZEN1c3RvbVRhc2siLCJkZXNjcmlwdGlvbiIsImlzVGFzayIsImZvcm1fZmllbGRfdGV4dF9pbnB1dCIsImZvcm1fZmllbGRfdGV4dGFyZWEiLCJhZGRfb3JfZWRpdF9zdWJfdGFza19BZGRPckVkaXRTdWJUYXNrIiwiQWRkT3JFZGl0U3ViVGFzayIsImNsb3NlRGlhbG9nIiwibmV3U3ViVGFza18xIiwiaXNFZGl0TW9kZSIsImVkaXRfdXNlcl90YXNrX0VkaXRVc2VyVGFzayIsIkVkaXRVc2VyVGFzayIsIm9uVXNlclRhc2tzQ2hhbmdlZCIsIm15VXNlclRhc2siLCJpc01vZGlmaWVkIiwiYWRkU3ViVGFzayIsIm9wZW5EaWFsb2ciLCJzaG93Q2FsZW5kYXIiLCJvblVwZGF0ZSIsIm9uRGVsZXRlIiwiaXNDdXN0b21UYXNrIiwiZm9ybV9maWVsZCIsImVzIiwiZGF0ZVBpY2tlciIsIm5leHRNb250aEJ1dHRvbkxhYmVsIiwicHJldmlvdXNNb250aEJ1dHRvbkxhYmVsIiwic2hvd1dlZWtOdW1iZXJzIiwic2VsZWN0ZWQiLCJkYXRlRm9ybWF0IiwibG9jYWxlIiwicG9wcGVyUGxhY2VtZW50Iiwic2V0T3BlbiIsInByb2dyZXNzX1Byb2dyZXNzIiwiUHJvZ3Jlc3MiLCJwZXJjZW50YWdlIiwicm91bmRlZFBlcmNlbnRhZ2UiLCJyb3VuZCIsInJ4IiwidGV4dEFuY2hvciIsInkiLCJkeSIsIndlZWtwbGFubmVyX1dlZWtQbGFubmVyIiwiV2Vla1BsYW5uZXIiLCJkaWFsb2dzIiwic2F2aW5nIiwid2Vla1RleHRzVVQiLCJpc0xvYWRpbmciLCJpc0NvcHlpbmdUYXNrcyIsIndlZWtUZXh0c1NhdmluZ0pvYiIsInBlbmRpbmdfam9iIiwic2F2ZVdlZWtUZXh0cyIsInN0b3AiLCJwZXJzaXN0ZWQiLCJpc1dlZWtUZXh0c0VkaXRlZCIsInByZXZXZWVrIiwibmV4dFdlZWsiLCJkaWFsb2ciLCJvcGVuQWRkR29hbERpYWxvZyIsImFkZEN1c3RvbUdvYWwiLCJvcGVuQWRkT3duVGFza0RpYWxvZyIsImxlYXJuaW5nR29hbE5hbWUiLCJhZGRDdXN0b21UYXNrIiwibGF0ZXN0VGltZVN0YW1wIiwiY29uZmlybSIsImxlYXJuaW5nR29hbHNOdW1iZXIiLCJhbGxUYXNrcyIsImNvcHlGcm9tUHJldmlvdXNXZWVrIiwidXNlclRhc2tzXzEiLCJwcmV2V2Vla05vIiwicHJldktFRFdlZWsiLCJwcmV2VGFza3MiLCJwcmV2VGFzayIsInRhc2tPZkN1cnJlbnRXZWVrIiwibGF0ZXN0VGltZVN0YW1wXzEiLCJjb3BpZXMiLCJjb3B5IiwiZ2V0SGVhZGVyVGl0bGUiLCJzaG93UHJvZ3Jlc3NDaGFydHMiLCJ3ZWVrcGxhbm5lckNoYXJ0cyIsImN1cnJlbnRXZWVrIiwidGFza1NldHMiLCJ0YXNrc1BlckNvdXJzZSIsImNvdXJzZVRhc2tzIiwidGFza3NQZXJMZWFybmluZ0dvYWwiLCJyZXN1bHRMZWFybmluZ0dvYWxzIiwiX2YiLCJsZ1Rhc2tzIiwibGVhcm5pbmdHb2FsVGFzayIsInJlZmluZSIsImlzU2F2aW5nIiwiaXNTdHJhdGVneUVkaXRlZCIsImlzQXNzZXNzbWVudEVkaXRlZCIsImVuYWJsZVNhdmVCdXR0b24iLCJjaGFydFRhc2tzIiwiY29tcGxldGVkVGFza3MiLCJ0b3RhbE51bWJlck9mVGFza3MiLCJzdWJqZWN0RGF0YSIsInN1YmplY3RDb21wbGV0ZWRUYXNrcyIsImdldFdlZWtwbGFubmVyUHJvZ3Jlc3NEYXRhIiwiY3RybEtleSIsInRyaWdnZXJDaGFuZ2UiLCJzcGlubmVyIiwiZGlzYWJsZWQiLCJ0dXRvcmVkIiwidXRpbGl0eV9jb21wb25lbnRzX2RpYWxvZ3MiLCJwb3BEaWFsb2ciLCJzZXR1cEludGwiLCJDb21wb25lbnQiLCJfU2V0dXBMYW5ndWFnZUludGwiLCJyZWFjdF9pbnRsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJyZWFjdF9pbnRsX2xvY2FsZV9kYXRhX2VuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsInJlYWN0X2ludGxfbG9jYWxlX2RhdGFfc3ZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwibWVzc2FnZXMiLCJzdiIsIl90cmFuc2xhdGlvbnNfc3ZfanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiZW4iLCJfdHJhbnNsYXRpb25zX2VuX2pzb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fX2RlZmF1bHQiLCJfZ2xvYmFsc19LRURfY2ZnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJLRURfTE9DQUxFIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIkNvbmZpcm1hdGlvbiIsInZpc2libGUiLCJvbkNvbmZpcm0iLCJvbkNhbmNlbCIsInRhc2tfbGlzdF9UYXNrTGlzdCIsIlRhc2tMaXN0IiwiY29uZmlybWF0aW9ucyIsInVzZXJfdGFza3NfcmVwbyIsInRvZ2dsZVRhc2siLCJsZWFybmluZ1Rhc2siLCJhbGwiLCJsZWFybmluZ1Rhc2tzIiwid2Vla1BsYW5uZXJXZWVrIiwiZm9yV2Vla1N0cmluZyIsInRlbXBsYXRlT2JqZWN0XzIiLCJ0ZW1wbGF0ZU9iamVjdF8zIiwidGFza0xvb2t1cElkIiwiZGVzY3JpYmVkQWN0aW9uIiwidGVtcGxhdGVPYmplY3RfNCIsInRlbXBsYXRlT2JqZWN0XzUiLCJjb25maXJtYXRpb25WaXNpYmxlIiwidGlkIiwiaGlkZGVuQ291cnNlc1JlcG8iLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJIaWRkZW5Db3Vyc2VzUmVwbyIsImZ1bGxDb3Vyc2UiLCJub3RpZnlTdWJzY3JpYmVyIiwia2VkUmVwbyIsIl9rZWRfcmVwb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiaW5pdFByb21pc2UiLCJpbml0Iiwia2VkQ291cnNlc1Byb21pc2UiLCJlZHNDb3Vyc2VzUHJvbWlzZSIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiYmVhcmVyUHJvbWlzZSIsImxpc3RLZWRDb3Vyc2VzIiwibGlzdEVEU0NvdXJzZXMiLCJ1c2VySGlkZGVuQ291cnNlc1Jlc29sdmVkIiwidXNlckhpZGRlbkNvdXJzZXNQcm9taXNlIiwicmVzb2x2ZVVzZXJIaWRkZW5Db3Vyc2VzUHJvbWlzZSIsInVzZXJIaWRkZW5Db3Vyc2VzIiwiYWN0aXZlQ291cnNlcyIsImVkc0FjdGl2ZUNvdXJzZXMiLCJjcmVhdGVDb3Vyc2VzTGlzdCIsInNjaG9vbHMiLCJfYXBpc19lZHNjbGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIl91dGlsc19zY2hvb2xfbW9tZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX19kZWZhdWx0IiwiZWRzQ2xpZW50IiwiaGlkZGVuQ291cnNlc01hcCIsImhjIiwic2hvdyIsInZpc2libGVDb3Vyc2VzTWFwIiwiaXNTdHVkZW50IiwiZWRzQ291cnNlTWFwIiwibW9kaWZpZWRCeSIsImVkc0NvdXJzZSIsImRlZmF1bHRWaXNpYmxlIiwiaGlkZUNvdXJzZSIsIm92ZXJyaWRlcyIsImtlZGJhY2tlbmRfY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJvdiIsInNob3dDb3Vyc2UiLCJGZWF0dXJlcyIsIl9pbml0aWFsaXplZCIsImZlYXR1cmVOYW1lIiwidGhpc18xIiwiX2ZlYXR1cmVzIiwiX2ZlYXR1cmVfZmxhZ3NfanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwidHVybmVkT25GZWF0dXJlcyIsIl9nbG9iYWxzX0tFRF9jZmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIktFRF9GRUFUVVJFUyIsIl91dGlsc19xdWVyeV9zdHJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInRlc3R2ZXJzaW9uIiwiZmVhdHVyZXMiLCJmZWF0dXJlIiwidHVybk9uQWxsIiwiRGlhbG9ncyIsInByZXZQcm9wcyIsImxhc3REaXYiLCJqcXVlcnlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX19kZWZhdWx0IiwicmVhY3RfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJjc3MiLCJhcmlhLWRpc2FibGVkIiwiY2xpY2siLCJtZXRhS2V5IiwiZG9tTm9kZSIsIl9jb3Vyc2VfYnVpbGRlcl9zdWJfY29tcG9uZW50c19yZW1vdmVfaXRlbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwibG9jYWxNb21lbnQiLCJfZ2xvYmFsc19LRURfY2ZnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJ1cGRhdGVMb2NhbGUiLCJtb250aHMiLCJtb250aHNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTWluIiwibG9uZ0RhdGVGb3JtYXQiLCJMVCIsIkxUUyIsIkxMIiwiTExMIiwiTExMTCIsImxsbCIsImxsbGwiLCJjYWxlbmRhciIsInNhbWVEYXkiLCJuZXh0RGF5IiwibGFzdERheSIsImxhc3RXZWVrIiwic2FtZUVsc2UiLCJyZWxhdGl2ZVRpbWUiLCJmdXR1cmUiLCJwYXN0Iiwic3MiLCJtbSIsImgiLCJoaCIsImRkIiwiTSIsIk1NIiwieXkiLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwib3JkaW5hbCIsIm51bWJlciIsImRvdyIsImRveSIsIlJlcG8iLCJjb21tIiwibGlzdFByb21pc2UiLCJ1cGRhdGVkSXRlbXMiLCJjb3Vyc2VOYW1lVG9Dc3NDbGFzcyIsImNzc1ByZWZpeCIsIlBlbmRpbmdKb2IiLCJjYWxsYmFjayIsInRpbWVvdXRJZCIsImNhbmNlbGxlZCIsInBlbmRpbmciLCJpc0pvYkV4ZWN1dGluZyIsImpvYkNhbGxiYWNrIiwidGhyb3R0bGUiLCJjbGVhclRpbWVvdXQiLCJsYXVuY2hKb2IiLCJFTlZJUk9OTUVOVCIsIktFRF9BUElfVVJMIiwiRURTX0FQSV9VUkwiLCJLRURfVE9LRU5fVVJMIiwiS0VEX0NMSUVOVF9JRCIsIktFRF9DTElFTlRfU0VDUkVUIiwiS0VEX1JFQUxNIiwiS0VEX1NDSE9PTF9MT0NBTEUiLCJnZXRNZXJnZWRUb2tlblBhdGgiLCJzY29wZXMiLCJpbXBlcnNvbmF0aW9uUHJvcHMiLCJ0b2tlblBhdGhXaXRob3V0UXVlcnkiLCJ0b2tlblF1ZXJ5U3RyaW5nIiwidG9rZW5QYXRoUXVlcnkiLCJnZXRUb2tlbklkIiwibWVyZ2VkVG9rZW5QYXRoIiwiY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIiLCJjbGllbnR3ZWIiLCJlbWFpbCIsInNjaG9vbFR5cGUiLCJpbml0aWFsVXNlckVtYWlsIiwiS0VEX1RPS0VOX1BBVEgiLCJzZXRfYmVhcmVyX3Byb3ZpZGVyc19tZXJnZWRUb2tlblBhdGgiLCJyZXNwb25zZVRleHQiLCJvayIsInNhdmVVc2VySW5mbyIsInN0b3JlZFNlc3Npb25Vc2VyIiwibG9hZFVzZXJJbmZvIiwiZ29vZ2xlTWVyZ2VkUGF0aCIsImdvb2dsZVRva2VuUHJvdmlkZXIiLCJjcmVhdGVHb29nbGVUb2tlblByb3ZpZGVyIiwiZWRzY2xpZW50IiwiVHV0b3JhYmxlQ29tcG9uZW50Iiwib25FbnZVcGRhdGVkIiwiX2dsb2JhbHNfS0VEX3R1dG9yRW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJjcmVhdGVDb21wb25lbnQiLCJDb250ZW50RWRpdGFibGVGaWVsZCIsIm15c2VsZiIsInRhZyIsIlRhZ1R5cGUiLCJkYXRhLXBsYWNlaG9sZGVyIiwiYmx1ciIsInByb3BhZ2F0ZU9uQ2hhbmdlIiwiYWxsb3dOYXZpZ2F0aW9uIiwibmF2RGlyIiwiY2FyZXQiLCJlbmRPZmZzZXQiLCJuYXZpZ2F0ZSIsInZhbGlkYXRlVmFsdWUiLCJkaXJlY3Rpb24iLCJvbk5hdmlnYXRlIiwibmV3VmFsdWUiLCJwcm9wYWdhdGVkT25DaGFuZ2UiLCJMaXN0Q291cnNlcyIsInVwZGF0ZUhpZGRlbkNvdXJzZXMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfcmVwb3NfaGlkZGVuX2NvdXJzZXNfcmVwb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiX2NvdXJzZV9idWlsZGVyX3N1Yl9jb21wb25lbnRzX3NwaW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsInZpc2libGVDb3Vyc2VzIiwiaGlkZGVuQ291cnNlcyIsIl91dGlsc19xdWVyeV9zdHJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIl9nbG9iYWxzX0tFRF9jZmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIktFRF9DT1VSU0VfVklFV0VSX1VSTCIsIl9hY2Nlc3NfY29udHJvbF9pbmRleF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiTGVhcm5pbmdHb2Fsc0xpc3QiLCJjb21tb25UYXNrcyIsIl90YXNrX2xpc3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImdldEN1cnJlbnRBY2FkZW1pY1llYXIiLCJjdXJyZW50RGF0ZSIsImZpcnN0VGVybVN0YXJ0RGF0ZSIsImZpcnN0VGVybUVuZERhdGUiLCJzZWNvbmRUZXJtU3RhcnREYXRlIiwic2Vjb25kVGVybUVuZERhdGUiLCJhY2FkZW1pY1BlcmlvZCIsIl9nZXRUZXJtSG9saWRheXMiLCJhY2FkZW1pY1N0YXJ0V2VlayIsImFjYWRlbWljRW5kV2VlayIsImFjYWRlbWljWWVhclN0cnVjdHVyZSIsIm51bWJlck9mSG9saWRheVdlZWtzIiwibnVtYmVyT2ZXZWVrcyIsIl9nZXRIb2xpZGF5V2Vla3NOdW1iZXIiLCJ0ZXJtU3RhcnREYXRlIiwidGVybUVuZERhdGUiLCJpc0JldHdlZW4iLCJnZXRDb2x1bW5IZWFkZXJGcm9tQ291cnNlIiwic2hvcnROYW1lIiwiZ2VuZXJpY19zY2hvb2xfdGVybV9HZW5lcmljU2Nob29sVGVybSIsIkdlbmVyaWNTY2hvb2xUZXJtIiwiY3VycmVudExvY2FsZSIsInNlbGVjdGVkRGF0ZSIsImluY2x1ZGVFeHRyYVdlZWsiLCJzdGFydE9mVGVybVdlZWsiLCJlbmRPZlRlcm1XZWVrIiwiaXNDdXJyZW50V2VlayIsInRlcm1EYXRlIiwiZ2V0TGFzdFN0ZXBXZWVrIiwic3VidHJhY3QiLCJnZXRQZXJpb2ROYW1lIiwidmlld21vZGVsX1ZpZXdNb2RlbCIsImRiV2Vla1BsYW5zIiwiY3VycmVudFNjaG9vbFRlcm0iLCJjdXJyZW50U2Nob29sTG9jYWxlIiwic2hvd1R1dG9yQ29tbWVudEZpZWxkIiwic3ViamVjdFByb2dyZXNzIiwiY29sdW1ucyIsIndlZWtQbGFuc09yVHV0b3JOb3RlIiwidGVybVN0YXJ0IiwidGVybUVuZCIsImNvbHVtbkhlYWRlcnMiLCJnZXRDb2x1bW5zSGVhZGVyIiwiZml4ZWRDb2x1bW5zXzEiLCJpc0ZpeGVkIiwidHJhbnNsYXRlZENvbHVtbnMiLCJnZXRTY2hvb2xUcmFuc2xhdGVkU3ViamVjdHMiLCJ0cmFuc2xhdGVkTmFtZSIsImN1cnJlbnRUZXJtSG9saWRheXMiLCJjdXJyZW50VGVybV8xIiwid2Vla3BsYW5WYWx1ZXMiLCJ0dXRvclZhbHVlcyIsInciLCJzdGFydEFjYWRlbWljWWVhck51bWJlciIsIndlZWtNb21lbnQiLCJ3ZWVrUGxhbiIsIndwIiwiaXNGaW5hbFN0ZXAiLCJ0dXRvck5vdGUiLCJjZWxsVmFsdWVzIiwiYWNhZGVtaWNXZWVrTnVtYmVyIiwiY29udGVudCIsImxhc3RTdGVwV2VlayIsImxhc3RTdGVwS2VkV2Vla18xIiwibGFzdFN0ZXBzIiwiY29tcGxldGVkU3RlcHMiLCJ0ZXJtR29hbHMiLCJtYXhTdWJqZWN0U3RlcCIsImNvdXJzZXNfMSIsImNvdXJzZXNfMV8xIiwiY29sdW1uSGVhZGVyIiwiY291cnNlU3RlcHMiLCJpc0NvbXBsZXRlZCIsImN1cnJlbnRTdGVwVmFsdWUiLCJwZXJpb2RHb2FsR3JhZGUiLCJmaW5hbFN0ZXBDb21wbGV0ZWQiLCJ2YWwiLCJoYXNOb0ZpbmFsU3RlcFZhbHVlIiwiZmluYWxTdGVwVmFsdWUiLCJwZXJjZW5WYWx1ZSIsInRlcm1QbGFubmVyUmVwb0tTIiwia3NUZXJtUGxhbm5lclJlcG8iLCJkb3VnaG51dF9Eb3VnaG51dCIsIkRvdWdobnV0IiwiZXJyb3JNZXNzYWdlIiwiY2VudGVyIiwic3RhcnRFcnJvclRleHQiLCJ2aWV3Qm94Iiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VMaW5lY2FwIiwiYWxpZ25tZW50QmFzZWxpbmUiLCJmb250U2l6ZSIsInRzcGFuIiwidGVybXBsYW5uZXJfS1NUZXJtUGxhbm5lciIsIktTVGVybVBsYW5uZXIiLCJpbml0aWFsRGF0ZSIsIndlZWtQbGFucyIsImxvYWRpbmdBY3RpdmVDb3Vyc2VzIiwibG9hZGluZ1dlZWtQbGFucyIsImluaXRpYWxMb2FkIiwiZmxvd0lkIiwidXBkYXRlV2Vla1BsYW5zIiwid2Vla1BsYW5zT3JUdXRvckNvbW0iLCJmaWVsZHMiLCJsb2FkQWNhZGVtaWNZZWFyRGF0ZXMiLCJyZWZyZXNoRGF0YSIsImxvYWRBY3RpdmVDb3Vyc2VzIiwidXBkYXRlQ2VsbCIsImNvbHVtbk5hbWUiLCJlcnJvcl8xIiwic3RhY2siLCJ1cGRhdGVUdXRvck5vdGVGaWVsZCIsIm5vdGUiLCJkZWxldGVUdXRvck5vdGVGaWVsZCIsIm5vdGVJZCIsIm9uVHV0b3JDbGljayIsInR1dG9yX2RpYWxvZyIsImNvbW1lbnQiLCJ1cGRhdGVEYXRhIiwiZGVsZXRlTm90ZURhdGEiLCJwb3MiLCJuZXdwb3MiLCJtYXhSb3dzIiwibWF4Q29scyIsInJvdyIsIm1pbiIsImNvbCIsImFkZEZpZWxkIiwiZmllbGQiLCJnZXRUYWJsZUNlbGwiLCJyb3dJbmRleCIsImNvbEluZGV4Iiwic3ViamVjdE5hbWUiLCJtb2RlbCIsInJlYWRPbmx5Q2VsbHMiLCJjb2xUeXBlIiwidHV0b3JlZFdlZWtQbGFuIiwiZGF0YS10b29sdGlwIiwiZ2V0Q2VsbENsYXNzTmFtZSIsImNvbnRlbnRfZWRpdGFibGVfZmllbGQiLCJnZXRDb2x1bW5UeXBlIiwiZ2V0Rm9vdGVyQ2VsbCIsImdldFN0ZXBIZWFkZXJDb2x1bW4iLCJpbmRleCIsInRyYW5zbGF0ZWRDb2x1bW5IZWFkZXIiLCJjb2xUeXBlcyIsIktvbW1lbnRhciIsIkt1cnMiLCJUdXRvckNvbW1lbnQiLCJnZXRTdGVwQ2hhcnRzIiwiZ2V0U2Nob29sVHJhbnNsYXRlZFN1YmplY3RGdWxsbmFtZSIsImdldFdlZWtUdXRvck5vdGUiLCJrc1R1dG9yQ29tbWVudCIsInNob3dEb3VnaG51dENoYXJ0cyIsInRlcm1wbGFubmVyQ2hhcnRzIiwicm93T2Zmc2V0IiwiZmlsdGVyZWRXZWVrcGxhbnMiLCJ3ayIsInR1dG9yVmFsdWUiLCJUdXRvckVudiIsInZlcnNpb24iLCJzZXROZXdFbnYiLCJlbnZHZXR0ZXIiLCJfa2VkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJ0dXRvckVudiIsIi4vZW4tU0ciLCIuL2VuLVNHLmpzIiwiLi9lbi1hdSIsIi4vZW4tYXUuanMiLCIuL2VuLWNhIiwiLi9lbi1jYS5qcyIsIi4vZW4tZ2IiLCIuL2VuLWdiLmpzIiwiLi9lbi1pZSIsIi4vZW4taWUuanMiLCIuL2VuLWlsIiwiLi9lbi1pbC5qcyIsIi4vZW4tbnoiLCIuL2VuLW56LmpzIiwiLi9zdiIsIi4vc3YuanMiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIlR1dG9yRGlhbG9nIiwiS1NUZXJtUGxhbm5lclJlcG8iLCJzdGFydERhdGVWYWx1ZSIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJlbmREYXRlVmFsdWUiLCJkYXRlSW50ZXJ2YWwiLCJNSU5VVEUiLCJTRUNPTkQiLCJEYXlWaWV3RXZlbnQiLCJkYXlTdGFydCIsInN0YXJ0TW9tZW50IiwiZW5kTW9tZW50Iiwiem9vbSIsImh0bWxMaW5rIiwiZGlmZiIsImxvY2FsZVRpbWVPcHRpb25zIiwiaG91ciIsIm1pbnV0ZSIsImxvY2FsZVN0YXJ0VGltZSIsInRvTG9jYWxlVGltZVN0cmluZyIsImxvY2FsZUVuZFRpbWUiLCJib3hTaXppbmciLCJtYXhIZWlnaHQiLCJvdmVyZmxvdyIsIlRpbWVMaW5lcyIsImRheUVuZCIsImhvdXJQaXhlbHMiLCJzdGFydEhvdXIiLCJlbmRIb3VyIiwiaG91cnMiLCJtYXJnaW4iLCJEYXlWaWV3IiwiZXZlbnRzIiwiaXNMYXN0Q2FsbCIsImNydW5jaGVkRXZlbnRzIiwiZXZlbnRJbmRleCIsIm92ZXJsYXBzIiwiYWxsT3ZlcmxhcHMiLCJwcmV2T3ZlcmxhcHMiLCJvdmVybGFwIiwiY24iLCJjcnVuY2hDb2xsaWRpbmdFdmVudHMiLCJIb3VyTWFya2VyIiwieXBvcyIsIm1hcmdpblRvcCIsInBhZGRpbmciLCJTdGF0dXNCYXIiLCJ3ZWVrX3ZpZXciLCJXZWVrVmlldyIsImZpcnN0RGF5IiwibnVtRGF5cyIsImRheURhdGFzIiwiZGF5IiwiZGF5RGF0ZSIsImlzVG9kYXkiLCJzdGFydCIsImVuZCIsImZ1bGxEYXlFdmVudHMiLCJ0b0lTT1N0cmluZyIsImNvbFNwYW4iLCJnb29nbGVfY2FsZW5kYXJfR29vZ2xlQ2FsZW5kYXIiLCJHb29nbGVDYWxlbmRhciIsImVuc3VyZUluaXRlZCIsImdhcGkiLCJsb2FkR2FwaSIsInRva2VuRXhwaXJhdGlvbiIsInRva2VuUmVzdWx0Iiwic2V0VG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJzY3JpcHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwiZ2FhcGlfbG9hZGVkIiwibGlzdENhbGVuZGFycyIsImNhbGVuZGFyTGlzdCIsImJhdGNoRXZlbnRzIiwidGltZU1pbiIsInRpbWVNYXgiLCJiYXRjaF8xIiwibmV3QmF0Y2giLCJjYWwiLCJjYWxlbmRhcklkIiwic2hvd0RlbGV0ZWQiLCJzaW5nbGVFdmVudHMiLCJtYXhSZXN1bHRzIiwicmVzcCIsIm5ld0NhbHMiLCJjYWxJZCIsImNhbGVuZGFyX0NhbGVuZGFyIiwiQ2FsZW5kYXIiLCJpbml0aWFsU3RhcnRIb3VyIiwiaW5pdGlhbEVuZEhvdXIiLCJpbml0aWFsWm9vbSIsImNhbGVuZGFycyIsImNhbGVuZGFyc0JlaW5nTG9hZGVkIiwiZ2NhbCIsImxvYWREYXRhIiwiaGFuZGxlRXJyb3IiLCJzdW1tYXJ5IiwiaXNPd25lciIsImFjY2Vzc1JvbGUiLCJpc1ByaW1hcnkiLCJwcmltYXJ5IiwiaXNDbGFzc3Jvb21DYWxlbmRhciIsImlzSG9saWRheUNhbGVuZGFyIiwic2hvdWxkSW5jbHVkZUNhbGVuZGFyIiwibmF2aWdhdGVUb1ByZXZpb3VzV2VlayIsIm5hdmlnYXRlVG9OZXh0V2VlayIsImV2ZW50U2V0cyIsImlzU2NoZWR1bGUiLCJpc0hvbGlkYXkiLCJjbGFzc05hbWVzIiwiY29sb3JJZCIsIndlZWtfbm90ZV9kaWFsb2dfV2Vla05vdGVEaWFsb2ciLCJXZWVrTm90ZURpYWxvZyIsImNvbG9yIiwicGxhbnMiLCJrZ1Rlcm1QbGFubmVyUmVwbyIsImtnX3Rlcm1wbGFubmVyX0tHVGVybVBsYW5uZXIiLCJLR1Rlcm1QbGFubmVyIiwiaXNMb2FkaW5nQ291cnNlcyIsImlzTG9hZGluZ1dlZWtQbGFucyIsImxvYWRFRFNDb3Vyc2VzIiwib25Ob3RlQ2xpY2siLCJ3ZWVrcyIsInR1dG9yTm90ZXMiLCJmaXJzdFdlZWsiLCJzaG93S2dUdXRvckNvbW1lbnRGaWVsZCIsImtnVHV0b3JDb21tZW50IiwiY3VycmVudFdlZWtQbGFucyIsImN1cnJlbnRUdXRvck5vdGVzIiwid2Vla1llYXIiLCJzdGFydE9mV2VlayIsIm5vdGVWYWx1ZSIsInRuIiwiY3JlZGl0cyIsIktHVGVybVBsYW5uZXJUdXRvcmVkIiwiX2tnX3Rlcm1wbGFubmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfdXRpbGl0eV9jb21wb25lbnRzX3R1dG9yYWJsZV9jb21wb25lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImtnX3Rlcm1wbGFubmVyX3JlcG9fS0dUZXJtUGxhbm5lclJlcG8iLCJLR1Rlcm1QbGFubmVyUmVwbyIsInRlcm1QbGFubmVyUmVwbyIsInJlcXVlc3RUdXRvcmVkVG9rZW5zIiwiZGlzcGxheU5hbWUiLCJjcmVhdGVCZWFyZXJQcm92aWRlciIsInJldHJpZXZlVG9rZW4iLCJ0dXRvcmVkS2VkQmFja2VuZENsaWVudCIsImtzX3Rlcm1wbGFubmVyX3JlcG8iLCJ0dXRvcnNfc2VsZWN0X1R1dG9yc1NlbGVjdCIsIlR1dG9yc1NlbGVjdCIsImVkc1N0dWRlbnRzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJvblNlbGVjdFVzZXIiLCJjaG9vc2VuU3R1ZGVudCIsIktFRF90dXRvckVudiIsImV4dGVybmFsX1JlYWN0X2RlZmF1bHQiLCJzdHVkZW50IiwiTGF0ZXN0QXNzZXNzbWVudHMiLCJsb2FkaW5nIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiaGFzR3JhZGVzIiwiZ3JhZGVOYW1lIiwidGVtcGxhdGVPYmplY3RfNiIsInB1Ymxpc2hEYXRlVGltZSIsImNvdXJzZVVuaXROYW1lIiwiS0dUZXJtUGxhbm5lclNlbGYiLCJLU1Rlcm1QbGFubmVyVHV0b3JlZCIsIl90ZXJtcGxhbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3V0aWxpdHlfY29tcG9uZW50c19MYW5ndWFnZUNvbnRleHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIlByb3ZpZGVyIiwiTXlDb3Vyc2VzIiwidXBkYXRlSGlkZGVuQ291cnNlc1N0YXRlIiwiX3JlcG9zX2hpZGRlbl9jb3Vyc2VzX3JlcG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImdldENvdXJzZVVybCIsIl9hY2Nlc3NfY29udHJvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwid2Vla05vdGVzUmVwbyIsIndlZWtfbm90ZXNfcmVwb19XZWVrTm90ZXNSZXBvIiwiV2Vla05vdGVzUmVwbyIsImlmVGFrZXNUaW1lIiwibXMiLCJ0aW1lb3V0UmVhY2hlZCIsIndlZWtfbm90ZWJvb2tfV2Vla05vdGVib29rIiwiV2Vla05vdGVib29rIiwiYXV0b1NhdmVyIiwic2hvd0xvYWRpbmdQcm9ncmVzcyIsInNob3dTYXZpbmdQcm9ncmVzcyIsImV2ZXJFZGl0ZWQiLCJub3RlcyIsInNob3dQcm9ncmVzc0lmTG9hZGluZ1Rha2VzVGltZSIsInRpbWVvdXRIYW5kbGUiLCJfc2F2ZSIsIm1heEl0ZXJhdGlvbnMiLCJpc05vdGVzRWRpdGVkIiwid2Vla05vdGUiLCJ3biIsImVycl8xIiwiZ2V0VHJhbnNsYXRlZEFjdGlvbnMiLCJsb2NhbGVBY3Rpb25zIiwiYWN0aW9uc19zdiIsImN1cnJlbnRUaXRsZSIsIndlZWtOb3RlcyIsInd5c2l3eWciLCJGcmFnbWVudCIsIlJvb3RXZWVrTm90ZWJvb2siLCJnb2Fsc192aWV3bW9kZWxfVmlld01vZGVsIiwic3R1ZHlQbGFucyIsInN1YmplY3RzIiwic3AiLCJwZXJpb2RHb2FscyIsImciLCJnb2FsIiwiYXRHb2FsIiwic3RHb2FsIiwiZmluYWxHb2FsIiwiZmluYWxHb2FsR3JhZGUiLCJzdHJhdGVnaWVzIiwic3RyYXRlZ3lUZXh0IiwiZnV0dXJlX2FiaWxpdGllc192aWV3bW9kZWxfRnV0dXJlQWJpbGl0aWVzVmlld01vZGVsIiwiZm9ybU5hbWVzIiwiY2FwYWJpbGl0aWVzIiwiZm9ybU5hbWUiLCJ5ZWFycyIsInZ0SHRzIiwiYWJpbGl0eU5hbWUiLCJhZGRlZENhcGFicyIsImNlbGxzIiwiaHRIYXNWYWx1ZSIsInZ0SGFzVmFsdWUiLCJjYXBhYmlsaXR5TmFtZSIsImNlbGwiLCJjYXBhYlJvd3MiLCJmdXR1cmVfYWJpbGl0aWVzX3RhYmxlX0Z1dHVyZUFiaWxpdGllc1RhYmxlIiwiRnV0dXJlQWJpbGl0aWVzVGFibGUiLCJ2aWV3TW9kZWwiLCJyb3dTcGFuIiwidnRIdCIsImdvYWxzX0tTR29hbHMiLCJLU0dvYWxzIiwibG9hZGluZ1N0dWR5UGxhbnMiLCJzaG93VGVybUdvYWxzIiwiZ2V0TGVhcm5pbmdHb2Fsc0FuZFRhc2tzIiwiYXBpUGF0aCIsInBhZ2VJZCIsImxlYXJuaW5nX3Rhc2tzX0xlYXJuaW5nVGFza3MiLCJMZWFybmluZ1Rhc2tzIiwibW9kdWxlTmFtZSIsInN1YmplY3QiLCJjb21tb25UYXNrc0xpc3QiLCJsZWFybmluZ0dvYWxzTGlzdCIsImxlYXJuaW5nX2dvYWxzX2xpc3QiLCJDYWxlbmRhclNlbGYiLCJDYWxlbmRhclR1dG9yZWQiLCJ0dXRvcmFibGVfY29tcG9uZW50IiwiV2Vla1BsYW5uZXJTZWxmIiwid2Vla3BsYW5uZXIiLCJXZWVrUGxhbm5lclR1dG9yZWQiLCJLU1Rlcm1QbGFubmVyU2VsZiIsInRlcm1wbGFubmVyIiwiaW50bENvbXBvbmVudHMiLCJrZWRjb21wb25lbnRzX25hbWVzcGFjZU9iamVjdCIsImsiLCJTZXR1cExhbmd1YWdlSW50bCIsImNvbXBvbmVudHMiXSwibWFwcGluZ3MiOiI4QkFDQSxTQUFBQSxFQUFBQyxHQVFBLElBUEEsSUFNQUMsRUFBQUMsRUFOQUMsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBQ0FLLEVBQUFMLEVBQUEsR0FJQU0sRUFBQSxFQUFBQyxFQUFBLEdBQ1FELEVBQUFILEVBQUFLLE9BQW9CRixJQUM1QkosRUFBQUMsRUFB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QTVyRCxDQUFVQSxPQUFBaTVCLEVBQUEsRUFBQWo1QixDQUFXMHJELEVBQWNDLE9BR3BELElBQU1FLEVBQWF4Z0QsRUFBQSxLQUFJb2dELEdDUDlCcHdDLEVBQUEsRUFBSXd3QyxXQUFheGdELEVBQUEsS0FBSWdRLEVBQUEsRUFBSXd3QyxXQUFlQSIsImZpbGUiOiJrZWRjb21wb25lbnRzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDU6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBfbmFtZV9cIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBfbmFtZV9cIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goWzIxNiwwXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwiXHJcbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplRmlyc3QgKHN0cikge1xyXG4gICAgZm9yIChsZXQgaT0wLCBsPXN0ci5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgaWYgKHN0ci5jaGFyQ29kZUF0KGkpIDwgMHgyMDAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIGkpICsgc3RyW2ldLnRvTG9jYWxlVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKGkgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iaiwgZXh0ZW5zaW9uKSB7XHJcbiAgICBpZiAodHlwZW9mIGV4dGVuc2lvbiAhPT0gJ29iamVjdCcpIHJldHVybiBvYmo7XHJcbiAgICBPYmplY3Qua2V5cyhleHRlbnNpb24pLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBvYmpba2V5XSA9IGV4dGVuc2lvbltrZXldO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmU8VCxFPiAob2JqIDogVCwgZXh0ZW5zaW9uPzogRSkge1xyXG4gICAgbGV0IGNsb25lID0ge307XHJcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xvbmUsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkpO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoZXh0ZW5zaW9uKSBleHRlbmQoY2xvbmUsIGV4dGVuc2lvbik7XHJcbiAgICByZXR1cm4gY2xvbmUgYXMgKFQgJiBFKTtcclxufVxyXG5cclxuY29uc3QgY29uY2F0ID0gW10uY29uY2F0O1xyXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbjxUPiAoYSA6IChUIHwgVFtdKVtdKSB7XHJcbiAgICByZXR1cm4gY29uY2F0LmFwcGx5KFtdLCBhKSBhcyBUW107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlUHJvcDxUPihwcm9wOmtleW9mIFQpIHtcclxuICAgIHJldHVybiAoYTogVCxiOiBUKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYVByb3AgPSBhW3Byb3BdLCBiUHJvcCA9IGJbcHJvcF07XHJcbiAgICAgICAgcmV0dXJuIGFQcm9wID4gYlByb3AgPyAxIDogYVByb3AgPCBiUHJvcCA/IC0xIDogMDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVQcm9wcyhcclxuICAgIHByb3BzOiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuICAgIGxvY2FsZXM/OiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuICAgIG9wdGlvbnM/OiBJbnRsLkNvbGxhdG9yT3B0aW9ucyk6IChhOiBhbnksIGI6IGFueSkgPT4gbnVtYmVyXHJcbntcclxuICAgIHByb3BzID0gQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc107XHJcblxyXG4gICAgY29uc3QgbG9jYWxlQ29tcGFyZSA9IChhLGIpID0+XHJcbiAgICAgICAgdHlwZW9mIGEgPT09ICdzdHJpbmcnID9cclxuICAgICAgICAgICAgYS5sb2NhbGVDb21wYXJlKGIsIGxvY2FsZXMsIG9wdGlvbnMpIDpcclxuICAgICAgICAgICAgYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XHJcblxyXG4gICAgZnVuY3Rpb24gY21wUGFydCAoYSxiLGZpcnN0UGFydDogc3RyaW5nLHJlc3Q6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgY29uc3QgZmlyc3RBID0gYVtmaXJzdFBhcnRdO1xyXG4gICAgICAgIGlmIChmaXJzdEEgPT0gbnVsbCkgcmV0dXJuIC0xO1xyXG4gICAgICAgIGNvbnN0IGZpcnN0QiA9IGJbZmlyc3RQYXJ0XTtcclxuICAgICAgICBpZiAoZmlyc3RCID09IG51bGwpIHJldHVybiAxO1xyXG4gICAgICAgIHJldHVybiByZXN0Lmxlbmd0aCA9PT0gMCA/XHJcbiAgICAgICAgICAgIGxvY2FsZUNvbXBhcmUoZmlyc3RBLCBmaXJzdEIpIDpcclxuICAgICAgICAgICAgY21wUGFydChmaXJzdEEsIGZpcnN0QiwgcmVzdFswXSwgcmVzdC5zbGljZSgxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByb3BzXHJcbiAgICAgICAgLm1hcChwcm9wID0+IHByb3Auc3BsaXQoJy4nKSlcclxuICAgICAgICAubWFwKChbZmlyc3RQYXJ0LCAuLi5yZXN0XSkgPT4gKGEsYikgPT4gY21wUGFydChhLGIsIGZpcnN0UGFydCwgcmVzdCkpXHJcbiAgICAgICAgLnJlZHVjZSgoY21wMSwgY21wMikgPT5cclxuICAgICAgICAgICAgKGEsYikgPT4gY21wMShhLGIpIHx8IGNtcDIoYSxiKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBMKHRleHQsIC4uLmFyZ3MpIHtcclxuICAgIGxldCBmaXJzdCA9IHRleHRbMF07XHJcbiAgICByZXR1cm4gYnVpbGRNZXNzYWdlKHRleHQsIGFyZ3MpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZE1lc3NhZ2UgKHRleHQsIGFyZ3MpIHtcclxuICAgIGxldCBydiA9IHRleHRbMF07XHJcbiAgICBmb3IgKGxldCBpPTEsIGw9dGV4dC5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgcnYgKz0gYXJnc1tpLTFdICsgdGV4dFtpXTtcclxuICAgIH1cclxuICAgIHJldHVybiBydjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRDPFQ+IHtcclxuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBUKSB7XHJcbiAgICAgICAgZXh0ZW5kKHRoaXMsIHRlbXBsYXRlKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVUaW1lUmV2aXZlciAoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFyIGE7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGEgPSAvXFwvRGF0ZVxcKChcXGQqKVxcKVxcLy8uZXhlYyh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCthWzFdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcbi8vbGV0IGluZm9TZXJpYWwgPSAxO1xyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0luZm8gKG1zZykge1xyXG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpbmZvJywgeyAnZGV0YWlsJzogbXNnIH0pO1xyXG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0Vycm9yIChlcnJNc2c6IHN0cmluZyB8IEVycm9yKSB7XHJcbiAgICBjb25zdCBtc2cgPSB0eXBlb2YgZXJyTXNnID09PSAnc3RyaW5nJyA/IGVyck1zZyA6IGVyck1zZy5tZXNzYWdlO1xyXG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdjdXN0b21lcnJvcicsIHsgJ2RldGFpbCc6IG1zZyB9KTtcclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcclxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1heExlbmd0aChzdHI6IHN0cmluZywgbWF4TGVuOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBzdHIubGVuZ3RoID4gbWF4TGVuID9cclxuICAgICAgICBzdHIuc3Vic3RyKDAsIG1heExlbiAtIDMpICsgXCIuLi5cIiA6XHJcbiAgICAgICAgc3RyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlUb0xvb2t1cDxUPihhOiBUW10sIGtleUFjY2Vzc29yOiAoaXRlbTogVCkgPT4gc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICBjb25zdCByZXN1bHQgOiB7W2tleTogc3RyaW5nXSA6IFRbXX0gPSB7fTtcclxuICAgIGZvciAobGV0IGk9MCwgbD1hLmxlbmd0aDsgaTxsOyArK2kpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gYVtpXTtcclxuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcclxuICAgICAgICBsZXQgYXJyYXkgPSByZXN1bHRba2V5XTtcclxuICAgICAgICBpZiAoYXJyYXkpIGFycmF5LnB1c2goaXRlbSk7XHJcbiAgICAgICAgZWxzZSByZXN1bHRba2V5XSA9IFtpdGVtXTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcnJheVRvTWFwPFQ+KGE6IFRbXSwga2V5QWNjZXNzb3I6IChpdGVtOiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA6IHtba2V5OiBzdHJpbmddIDogVH0gPSB7fTtcclxuICAgIGZvciAobGV0IGk9MCwgbD1hLmxlbmd0aDsgaTxsOyArK2kpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gYVtpXTtcclxuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcclxuICAgICAgICByZXN1bHRba2V5XSA9IGl0ZW07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlcnJ5UGlja1Byb3BzPFQ+IChvYmo6IFQsIHByb3BzVG9QaWNrOiBzdHJpbmdbXSk6IFBhcnRpYWw8VD4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIHByb3BzVG9QaWNrKSB7XHJcbiAgICAgIGlmIChwYXJhbSBpbiBvYmopIHJlc3VsdFtwYXJhbV0gPSBvYmpbcGFyYW1dO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdCBhcyBQYXJ0aWFsPFQ+O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3Q8VD4gKGE6IFRbXSwga2V5QWNjZXNzb3I/OiAoaXRlbTogVCkgPT4gYW55KSB7XHJcbiAgICBjb25zdCBtYXAgPSBhcnJheVRvTWFwKGEsIGtleUFjY2Vzc29yIHx8ICh4ID0+IHgpKTtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApLm1hcChrZXkgPT4gbWFwW2tleV0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0VxdWFscyhhOiBhbnksIGI6IGFueSkge1xyXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKCFhIHx8ICFiKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xyXG4gICAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcclxuICAgIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMoYik7XHJcbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcclxuICAgIGZvciAobGV0IGk9MCwgbD1rZXlzQS5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c0FbaV07XHJcbiAgICAgICAgaWYgKGtleXNCW2ldICE9PSBrZXkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbiIsImltcG9ydCB7VXNlciwgTGVhcm5pbmdNb2R1bGVUYXNrc30gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBCZWFyZXJQcm92aWRlciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHtVc2VyVGFza30gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQge0tlZFJlcG99IGZyb20gJy4uL3JlcG9zL2tlZC1yZXBvJztcclxuaW1wb3J0IHtFZHNDbGllbnR9IGZyb20gJy4uL2FwaXMvZWRzY2xpZW50JztcclxuaW1wb3J0IEtFRCBmcm9tICcuL2tlZCc7XHJcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJSZXBvIH0gZnJvbSAnLi4vcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwbyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEVudiB7XHJcbiAgICBjdXJyZW50VXNlcj86IFVzZXI7XHJcbiAgICBsZWFybmluZ01vZHVsZVRhc2tzPzogTGVhcm5pbmdNb2R1bGVUYXNrcztcclxuICAgIGJlYXJlclByb3ZpZGVyPzogQmVhcmVyUHJvdmlkZXI7XHJcbiAgICBnb29nbGVUb2tlblByb3ZpZGVyPzogQmVhcmVyUHJvdmlkZXI7XHJcbiAgICBrZWRCYWNrZW5kQ2xpZW50PzogS2VkQmFja2VuZENsaWVudDtcclxuICAgIGVkc0NsaWVudD86IEVkc0NsaWVudDtcclxuICAgIHVzZXJUYXNrc1JlcG8/O1xyXG4gICAgaGlkZGVuQ291cnNlc1JlcG8/O1xyXG4gICAgd2Vla05vdGVzUmVwbz87XHJcbiAgICBrZ1Rlcm1QbGFubmVyUmVwbz87XHJcbiAgICBrc1Rlcm1QbGFubmVyUmVwbz86IEtTVGVybVBsYW5uZXJSZXBvXHJcbiAgICB0dXRvcmVkOiBib29sZWFuO1xyXG4gICAgZXJyb3I/OiBFcnJvcjtcclxufVxyXG5cclxuaWYgKCFLRUQuZW52KSBLRUQuZW52ID0ge307XHJcblxyXG5leHBvcnQgZGVmYXVsdCBLRUQuZW52IGFzIEVudjtcclxuZXhwb3J0IGNvbnN0IGVudjogRW52ID0gS0VELmVudjtcclxuIiwiZXhwb3J0ICogZnJvbSAnLi9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudCc7IiwiaW1wb3J0IEtFRCBmcm9tICcuL0tFRCc7XHJcblxyXG4vKiBUaGlzIGRlZmF1bHQgY29uZmlndXJhdGlvbiBpcyB1c2VkIGFzIGEgZmFsbGJhY2suXHJcbk5vcm1hbGx5IGJvdGggdGVzdCBwYWdlcyBhbmQgcHJvZHVjdGlvbiBwYWdlcyB3aWxsIG92ZXJyaWRlIHRoZXNlIGNvbmZpZ3JhdGlvbnNcclxuKi9cclxuLypjb25zdCBkZWZhdWx0Q29uZmlndXJhdGlvbiA9IHtcclxuICAvLyBFbnZpcm9ubWVudFxyXG4gIEVOVklST05NRU5UOiAnZGV2ZWxvcG1lbnQnIGFzICdwcm9kdWN0aW9uJyB8ICdkZXZlbG9wbWVudCcgfCAndGVzdCcsXHJcbiAgLy8gQXV0aGVudGljYXRpb24gU2VydmVyOlxyXG4gIEtFRF9UT0tFTl9VUkw6ICdodHRwczovL2tlZGF1dGh0ZXN0LmF6dXJld2Vic2l0ZXMubmV0L3Rva2VuJyxcclxuICBLRURfVE9LRU5fUEFUSDogJy9hcGkvdG9rZW4uU2tyaXB0LnBvcnRsZXQ/c3YuY29udGVudHR5cGU9YXBwbGljYXRpb24vanNvbicsXHJcbiAgS0VEX0NMSUVOVF9JRDogJ2RldmNsaWVudCcsXHJcbiAgS0VEX0NMSUVOVF9TRUNSRVQ6ICc0ZlJkZlFwV3RKcWpUV2YnLFxyXG4gIC8vIFNlcnZpY2VzOlxyXG4gIEtFRF9BUElfVVJMOiAnaHR0cHM6Ly9rZWRiYWNrZW5kdGVzdC5henVyZXdlYnNpdGVzLm5ldC9hcGkvJywgIFxyXG4gIEVEU19BUElfVVJMOiAnaHR0cHM6Ly9lZHNwb3J0YWxvd2luYXBpLmF6dXJld2Vic2l0ZXMubmV0L2FwaS8nXHJcbn0qL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJS2VkQ29uZmlndXJhdGlvbiB7XHJcbiAgRU5WSVJPTk1FTlQ6ICdwcm9kdWN0aW9uJyB8ICdkZXZlbG9wbWVudCcgfCAndGVzdCc7XHJcbiAgS0VEX1JFQUxNOiBzdHJpbmc7XHJcbiAgS0VEX1RPS0VOX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9UT0tFTl9QQVRIOiBzdHJpbmc7XHJcbiAgS0VEX0NMSUVOVF9JRDogc3RyaW5nO1xyXG4gIEtFRF9DTElFTlRfU0VDUkVUOiBzdHJpbmc7XHJcbiAgS0VEX0FQSV9VUkw6IHN0cmluZztcclxuICBFRFNfQVBJX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9MT0NBTEU6IHN0cmluZztcclxuICBLRURfU0NIT09MX0xPQ0FMRTogc3RyaW5nO1xyXG4gIEtFRF9DT1VSU0VfQlVJTERFUl9VUkw6IHN0cmluZztcclxuICBLRURfQ09VUlNFX1ZJRVdFUl9VUkw6IHN0cmluZztcclxuICBLRURfU1VCSkVDVF9QTEFOTkVSX0FETUlOX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9TVUJKRUNUX1BMQU5ORVJfVVJMOiBzdHJpbmc7XHJcbiAgS0VEX0ZFQVRVUkVTOiBzdHJpbmc7XHJcbn07XHJcblxyXG5pZiAoIUtFRC5jZmcpIEtFRC5jZmcgPSB7fTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEtFRC5jZmcgYXMgSUtlZENvbmZpZ3VyYXRpb247XHJcbmV4cG9ydCBjb25zdCBjZmc6IElLZWRDb25maWd1cmF0aW9uID0gS0VELmNmZztcclxuIiwiZXhwb3J0IGRlZmF1bHQgKGNvbW1hbmQsIHZhbHVlID0gbnVsbCkgPT4ge1xyXG4gIGRvY3VtZW50LmV4ZWNDb21tYW5kKGNvbW1hbmQsIGZhbHNlLCB2YWx1ZSlcclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgY29uc3QgU3Bpbm5lciA9ICgpPT4gPHNwYW4+PGkgY2xhc3NOYW1lPVwiZmEgZmEtc3Bpbm5lciBmYS1zcGluXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiZuYnNwOzwvc3Bhbj47XHJcbiIsImltcG9ydCB7IEFjY2Vzc0NsYWltLCBEb2N1bWVudEFjY2VzcywgaGFzQWNjZXNzIGFzIF9oYXNBY2Nlc3MsIEFjY2Vzc1JpZ2h0IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IGdldFVzZXJDbGFpbXMgZnJvbSAnLi9nZXQtdXNlci1jbGFpbXMnO1xyXG5pbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nLCBnZW5lcmF0ZVF1ZXJ5U3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL3F1ZXJ5LXN0cmluZ1wiO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5leHBvcnQgeyBnZXRVc2VyQ2xhaW1zIH07XHJcblxyXG5leHBvcnQgY29uc3QgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMgPSBbXCJ1c2VyXCIsXCJyb2xlXCIsXCJzY2hvb2xcIixcImRlYnVnXCIsXCJ0ZXN0VmVyc2lvblwiLFwidGVzdHZlcnNpb25cIixcInNjaG9vbFR5cGVcIixcInNjaG9vbHR5cGVcIl07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFzQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQsIHJlcXVlc3RlZFJpZ2h0OiBBY2Nlc3NSaWdodCkge1xyXG4gIHZhciBjbGFpbXMgPSBnZXRVc2VyQ2xhaW1zKHVzZXIpO1xyXG4gIGlmIChyZXF1ZXN0ZWRSaWdodCAhPT0gJ1InICYmIHVzZXIudHV0b3JGb3IpIHtcclxuICAgIGNsYWltcyA9IGNsYWltcy5maWx0ZXIoY2xhaW0gPT4gY2xhaW0udHlwZSAhPT0gJ2VtYWlsJyk7XHJcbiAgfVxyXG4gIHZhciByZXN1bHQgPSBfaGFzQWNjZXNzKERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmdBcnJheShkb2MuYWNsIHx8IFtdKSwgY2xhaW1zLCByZXF1ZXN0ZWRSaWdodCk7XHJcbiAgLy9jb25zb2xlLmxvZyhgSGFzICR7cmVxdWVzdGVkUmlnaHR9IGFjY2VzcyB0byAke2RvYy5uYW1lfS8ke2RvYy5pZH06ICR7cmVzdWx0fWApO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNSZWFkQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQpIHtcclxuICByZXR1cm4gaGFzQWNjZXNzKHVzZXIsIGRvYywgJ1InKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc1dyaXRlQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQpIHtcclxuICByZXR1cm4gaGFzQWNjZXNzKHVzZXIsIGRvYywgJ1cnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc1NoYXJlQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQpIHtcclxuICByZXR1cm4gaGFzQWNjZXNzKHVzZXIsIGRvYywgJ1MnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVhY2hlckF0U2Nob29sKHVzZXI6IFVzZXIsIHNjaG9vbDogc3RyaW5nKSB7XHJcbiAgY29uc3QgaXNUZWFjaGVyID0gdXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gJ0VNUExPWUVFJyB8fCByb2xlID09PSAnQURNSU4nKTtcclxuICBjb25zdCBiZWxvbmdzVG9TY2hvb2wgPSAoc2Nob29sfHxcIlwiKS50b0xvd2VyQ2FzZSgpID09PSB1c2VyLnNjaG9vbC50b0xvd2VyQ2FzZSgpO1xyXG4gIHJldHVybiAoaXNUZWFjaGVyICYmIGJlbG9uZ3NUb1NjaG9vbCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0FkbWluT3JUZWFjaGVyQXRTY2hvb2wodXNlcjogVXNlciwgc2Nob29sOiBzdHJpbmcpIHtcclxuICByZXR1cm4gdXNlci5yb2xlcy5pbmNsdWRlcyhcIkFETUlOXCIpIHx8IGlzVGVhY2hlckF0U2Nob29sKHVzZXIsIHNjaG9vbCk7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBpbXBlcnNvbmF0aW9uRW52ID0ge1xyXG4gIGFjdEFzIChvcHRpb25zOiB7cm9sZSwgc2Nob29sLCB1cmw/fSkge1xyXG4gICAgY29uc3Qge3JvbGUsIHNjaG9vbCwgdXJsfSA9IG9wdGlvbnM7XHJcbiAgICBjb25zdCBjdXJyZW50UXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgICBjb25zdCBuZXdRdWVyeSA9IHsuLi5jdXJyZW50UXVlcnksIHJvbGUsIHNjaG9vbH07XHJcbiAgICBjb25zdCBuZXdRdWVyeVN0cmluZyA9IGdlbmVyYXRlUXVlcnlTdHJpbmcobmV3UXVlcnkpO1xyXG4gICAgaWYgKHVybCkge1xyXG4gICAgICBsb2NhdGlvbi5ocmVmID0gYCR7dXJsfSR7bmV3UXVlcnlTdHJpbmd9YDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIiNcIjtcclxuICAgICAgbG9jYXRpb24uc2VhcmNoID0gbmV3UXVlcnlTdHJpbmc7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWN0QXMob3B0aW9uczoge3JvbGUsIHNjaG9vbCwgdXJsP30pIHtcclxuICBpbXBlcnNvbmF0aW9uRW52LmFjdEFzKG9wdGlvbnMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkgKHVybDogc3RyaW5nLCBxdWVyeToge1tuYW1lOiBzdHJpbmddIDogc3RyaW5nfSkge1xyXG4gIGNvbnN0IGN1cnJlbnRRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoKTtcclxuICBjb25zdCBwcmVzZXJ2ZWRRdWVyeSA9IHt9O1xyXG4gIGZvciAoY29uc3QgcGFyYW0gb2YgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMpIHtcclxuICAgIGlmIChjdXJyZW50UXVlcnlbcGFyYW1dKSBwcmVzZXJ2ZWRRdWVyeVtwYXJhbV0gPSBjdXJyZW50UXVlcnlbcGFyYW1dO1xyXG4gIH1cclxuICBjb25zdCBuZXdRdWVyeVN0cmluZyA9IGdlbmVyYXRlUXVlcnlTdHJpbmcoey4uLnByZXNlcnZlZFF1ZXJ5LCAuLi5xdWVyeX0pO1xyXG4gIGNvbnN0IHBIYXNoID0gdXJsLmluZGV4T2YoJyMnKTtcclxuICByZXR1cm4gcEhhc2ggPj0gMCA/XHJcbiAgICBgJHt1cmwuc3Vic3RyKDAscEhhc2gpfSR7bmV3UXVlcnlTdHJpbmd9JHt1cmwuc3Vic3RyKHBIYXNoKX1gIDpcclxuICAgIGAke3VybH0ke25ld1F1ZXJ5U3RyaW5nfWA7XHJcbn1cclxuIiwiaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9jb250cmFjdHMva2VkLW1vZGVsc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VXNlckNsYWltcyAodXNlcjogVXNlcikge1xyXG4gIHJldHVybiBbe1xyXG4gICAgdHlwZTogXCJlbWFpbFwiLFxyXG4gICAgdmFsdWU6IHVzZXIubWFpbFxyXG4gIH0se1xyXG4gICAgdHlwZTogXCJzY2hvb2xcIixcclxuICAgIHZhbHVlOiB1c2VyLnNjaG9vbFxyXG4gIH1dLmNvbmNhdCh1c2VyLnJvbGVzLm1hcChyb2xlID0+ICh7XHJcbiAgICB0eXBlOiBcInJvbGVcIixcclxuICAgIHZhbHVlOiByb2xlXHJcbiAgfSkpKS5jb25jYXQodXNlci5yb2xlcy5tYXAocm9sZSA9PiAoe1xyXG4gICAgdHlwZTogXCJzY2hvb2xSb2xlXCIsXHJcbiAgICB2YWx1ZTogdXNlci5zY2hvb2wgKyBcIi9cIiArIHJvbGVcclxuICB9KSkpO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVUlEKCkge1xyXG4gICAgLy8gRGVjZW50IHNvbHV0aW9uIGZyb20gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xMDUwMzQvaG93LXRvLWNyZWF0ZS1hLWd1aWQtdXVpZC1pbi1qYXZhc2NyaXB0XHJcbiAgICB2YXIgZCA9IERhdGUubm93KCk7XHJcbiAgICB2YXIgdXVpZCA9ICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICB2YXIgciA9IChkICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDtcclxuICAgICAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xyXG4gICAgICAgIHJldHVybiAoYyA9PT0gJ3gnID8gciA6IChyICYgMHg3IHwgMHg4KSkudG9TdHJpbmcoMTYpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdXVpZDtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gYXZvaWRTaW11bHRhbm91c0NhbGxzKG1ldGhvZCkge1xyXG4gICAgdmFyIG9uZ29pbmdQcm9taXNlID0gbnVsbDtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCFvbmdvaW5nUHJvbWlzZSkge1xyXG4gICAgICAgICAgICBvbmdvaW5nUHJvbWlzZSA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgb25nb2luZ1Byb21pc2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvbmdvaW5nUHJvbWlzZTtcclxuICAgIH07XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEdsb2JhbElkKHJlYWxtKSB7XHJcbiAgICB2YXIgcHJlZml4ID0gJ2VjOTZiM2JlLTQ1ZmMtNDFkMy1iNjllLSc7XHJcbiAgICB2YXIgcGFkID0gWyc1MCcsICcwOCcsICdlMScsICc0MCcsICdlNCcsICdlNyddO1xyXG4gICAgaWYgKHJlYWxtLmxlbmd0aCA+IDYpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9vIGxvbmcgcmVhbG1cIik7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlYWxtLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgdmFyIGhleCA9IHJlYWxtLmNoYXJDb2RlQXQoaSkudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgIHBhZFtpXSA9IGhleC5sZW5ndGggPT09IDIgP1xyXG4gICAgICAgICAgICBoZXggOlxyXG4gICAgICAgICAgICAnMCcgKyBoZXg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJlZml4ICsgcGFkLmpvaW4oJycpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlUHJlZGVzdGluYXRlZElkKGlucHV0KSB7XHJcbiAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZW5jb2RlciwgZGF0YSwgZGlnZXN0LCBfYSwgaTtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgIGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gZW5jb2Rlci5lbmNvZGUoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIF9hID0gVWludDhBcnJheS5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgZGF0YSldO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIGRpZ2VzdCA9IG5ldyAoX2EuYXBwbHkoVWludDhBcnJheSwgW3ZvaWQgMCwgX2Iuc2VudCgpXSkpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuaWJibGUgPSBkaWdlc3RbaSsrXSAlIDE2IHwgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3YXNoZWROaWJibGUgPSBjID09PSAneCcgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pYmJsZSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmliYmxlICYgMHg3IHwgMHg4O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdhc2hlZE5pYmJsZS50b1N0cmluZygxNik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLypleHBvcnQgZnVuY3Rpb24gYnVmMmhleChidWZmZXI6IEFycmF5QnVmZmVyKSB7XHJcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChcclxuICAgIG5ldyBVaW50OEFycmF5KGJ1ZmZlciksXHJcbiAgICAoeDogbnVtYmVyKSA9PiAoJzAwJyArIHgudG9TdHJpbmcoMTYpKS5zbGljZSgtMikpLmpvaW4oJycpO1xyXG59Ki9cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUFycmF5KGEsIG1hcHBlcikge1xyXG4gICAgdmFyIHJldHZhbCA9IGE7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgICAgdmFyIHQgPSBhW2ldO1xyXG4gICAgICAgIHZhciBtYXBwZWQgPSBtYXBwZXIodCk7XHJcbiAgICAgICAgaWYgKG1hcHBlZCAhPT0gdCkge1xyXG4gICAgICAgICAgICBpZiAocmV0dmFsID09PSBhKVxyXG4gICAgICAgICAgICAgICAgcmV0dmFsID0gYS5zbGljZSgpO1xyXG4gICAgICAgICAgICByZXR2YWxbaV0gPSBtYXBwZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldHZhbDtcclxufVxyXG4vKlxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQXJyYXk8VD4oYTogVFtdLCBtYXBwZXI6ICh0OiBUKSA9PiBUIHwgZmFsc2UpOiBUW10ge1xyXG4gIGxldCByZXR2YWwgPSBhO1xyXG4gIGxldCBqID0gMDtcclxuICBmb3IgKGxldCBpPTAsbD1hLmxlbmd0aDsgaTxsOyArK2ksICsraikge1xyXG4gICAgY29uc3QgdCA9IGFbaV07XHJcbiAgICBjb25zdCBtYXBwZWQgPSBtYXBwZXIodCk7XHJcbiAgICBpZiAobWFwcGVkID09PSBmYWxzZSkge1xyXG4gICAgICAvLyBNYXBwZXIgd2FudHMgdG8gZGVsZXRlIHRoaXMgZG9jLlxyXG4gICAgICBpZiAocmV0dmFsID09PSBhKSByZXR2YWwgPSBhLnNsaWNlKCk7XHJcbiAgICAgIHJldHZhbC5zcGxpY2UoaiwgMSk7XHJcbiAgICAgIC0tajsgLy8gY29tcGVuc2F0ZSBmb3IgKytqXHJcbiAgICB9IGVsc2UgaWYgKG1hcHBlZCAhPT0gdCkge1xyXG4gICAgICBpZiAocmV0dmFsID09PSBhKSByZXR2YWwgPSBhLnNsaWNlKCk7XHJcbiAgICAgIHJldHZhbFtqXSA9IG1hcHBlZDtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJldHZhbDtcclxufVxyXG4qLyBcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIiwiZXhwb3J0IGludGVyZmFjZSBQYXJzZVF1ZXJ5U3RyaW5nT3B0aW9ucyB7XHJcbiAgdG9Mb3dlcj86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uU2VhcmNoOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJzZVF1ZXJ5U3RyaW5nT3B0aW9ucyk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0ge1xyXG4gIGNvbnN0IHt0b0xvd2VyfSA9IChvcHRpb25zIHx8wqB7fSkgYXMgUGFyc2VRdWVyeVN0cmluZ09wdGlvbnM7XHJcbiAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgaWYgKGxvY2F0aW9uU2VhcmNoICYmIGxvY2F0aW9uU2VhcmNoLmxlbmd0aCA+IDEpXHJcbiAgICBsb2NhdGlvblNlYXJjaC5zdWJzdHIoMSlcclxuICAgICAgLnNwbGl0KCcmJylcclxuICAgICAgLm1hcChwYXJ0ID0+IHBhcnQuc3BsaXQoJz0nKS5tYXAocyA9PiBkZWNvZGVVUklDb21wb25lbnQocy50cmltKCkpKSlcclxuICAgICAgLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4gcmVzdWx0W3RvTG93ZXIgPyBrZXkudG9Mb3dlckNhc2UoKSA6IGtleV0gPSB2YWx1ZSk7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZnVuY3Rpb24gZW5jb2RlUGFyYW1zKHBhcmFtczoge1trZXk6IHN0cmluZ106c3RyaW5nfSkge1xyXG4gIHJldHVybiBPYmplY3Qua2V5cyhwYXJhbXMpLmZpbHRlcihrZXkgPT4gcGFyYW1zW2tleV0gIT09IHVuZGVmaW5lZCkubWFwKGtleSA9PiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW2tleV0pfWApLmpvaW4oJyYnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUXVlcnlTdHJpbmcocGFyYW1zOiB7W2tleTogc3RyaW5nXTpzdHJpbmd9KSB7XHJcbiAgcmV0dXJuIFwiP1wiICsgZW5jb2RlUGFyYW1zKHBhcmFtcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUhhc2hRdWVyeVN0cmluZyhsb2NhdGlvbkhhc2g6IHN0cmluZywgb3B0aW9ucz86IFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zKSB7XHJcbiAgcmV0dXJuIHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb25IYXNoLCBvcHRpb25zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlSGFzaFF1ZXJ5U3RyaW5nKHBhcmFtczoge1trZXk6IHN0cmluZ106c3RyaW5nfSkge1xyXG4gIHJldHVybiBcIiNcIiArIGVuY29kZVBhcmFtcyhwYXJhbXMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRVcmxBbmRRdWVyeSAodXJsV2l0aFBvc3NpYmxlUXVlcnk6IHN0cmluZykge1xyXG4gIGNvbnN0IHBRdWVyeSA9IHVybFdpdGhQb3NzaWJsZVF1ZXJ5LmluZGV4T2YoJz8nKTtcclxuICByZXR1cm4gcFF1ZXJ5ID49IDAgP1xyXG4gICAgW3VybFdpdGhQb3NzaWJsZVF1ZXJ5LnN1YnN0cigwLCBwUXVlcnkpLCB1cmxXaXRoUG9zc2libGVRdWVyeS5zdWJzdHIocFF1ZXJ5KV0gOlxyXG4gICAgW3VybFdpdGhQb3NzaWJsZVF1ZXJ5LCBcIlwiXTtcclxufVxyXG4iLCIvKlxyXG5kZWNsYXJlIHZhciBCdWZmZXI7IC8vIG5vZGUgYnVpbHQtaW5cclxuXHJcblxyXG5mdW5jdGlvbiBiYXNpY0F1dGhIZWFkZXIodXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICByZXR1cm4gXCJCYXNpYyBcIiArIG5ldyBCdWZmZXIodXNlcm5hbWUgKyBcIjpcIiArIHBhc3N3b3JkKS50b1N0cmluZyhcImJhc2U2NFwiKTtcclxufVxyXG4qL1xyXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL29ic2VydmFibGUvZW1pdHRlcic7XHJcbnZhciBSZXN0Q2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVzdENsaWVudChpc29tb3JwaGljLCBiYXNlVXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5pc29tb3JwaGljID0gaXNvbW9ycGhpYztcclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnMgPSAwO1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IG5ldyBFbWl0dGVyKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZmV0Y2hPcHRpb25zID0geyBtb2RlOiAnY29ycycgfTtcclxuICAgICAgICB0aGlzLmF1dGhIZWFkZXIgPSBvcHRpb25zLmJlYXJlciA/XHJcbiAgICAgICAgICAgIFwiQmVhcmVyIFwiICsgb3B0aW9ucy5iZWFyZXIgOlxyXG4gICAgICAgICAgICBvcHRpb25zLnVzZXJuYW1lID9cclxuICAgICAgICAgICAgICAgIFwiQmFzaWMgXCIgKyBpc29tb3JwaGljLmJ0b2Eob3B0aW9ucy51c2VybmFtZSArIFwiOlwiICsgKG9wdGlvbnMucGFzc3dvcmQgfHwgXCJcIikpIDpcclxuICAgICAgICAgICAgICAgIG51bGw7XHJcbiAgICAgICAgdGhpcy5iZWFyZXJQcm92aWRlciA9IG9wdGlvbnMuYmVhcmVyUHJvdmlkZXIgfHwgbnVsbDtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXN0Q2xpZW50LnByb3RvdHlwZSwgXCJzdGF0dXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbiAocGF0aCwgbWV0aG9kLCBoZWFkZXJzLCBxdWVyeSwgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICArK3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cy5kaXNwYXRjaCh0aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZmV0Y2gocGF0aCwgbWV0aG9kLCBoZWFkZXJzLCBxdWVyeSwgZmV0Y2hPcHRpb25zKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgIC0tX3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xyXG4gICAgICAgICAgICBfdGhpcy5fc3RhdHVzLmRpc3BhdGNoKF90aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIC0tX3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xyXG4gICAgICAgICAgICBfdGhpcy5fc3RhdHVzLmRpc3BhdGNoKF90aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuX2ZldGNoID0gZnVuY3Rpb24gKHBhdGgsIG1ldGhvZCwgaGVhZGVycywgcXVlcnksIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlTdHIsIF9hLCBhdXRoSGVhZGVyLCB0b2tlbkluZm8sIGJlYXJlclByb3ZpZGVyLCBfYiwgX2MsIHVybCwgcmVzLCB3d3dhdXRoLCBfZDtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9lKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9lLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmV0Y2hPcHRpb25zICYmIGZldGNoT3B0aW9ucy5jYWNoZSA9PT0gJ25vLWNhY2hlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgYmFjay1idXR0b24gbm90IHJlc3BlY3RpbmcgY2FjaGUgY29udHJvbCBpbiBDaHJvbWUvT3BlcmEuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgYSBxdWVyeSBwYXJhbWV0ZXIgdG8gZm9yY2UgYSBjYWNoZSBlbnRyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBxdWVyeSwgeyBub2NhY2hlOiBjcmVhdGVVVUlEKCkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlTdHIgPSBxdWVyeSAmJiBPYmplY3Qua2V5cyhxdWVyeSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHF1ZXJ5W2tleV0gIT09IHVuZGVmaW5lZDsgfSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI9XCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcmJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcywgYXV0aEhlYWRlciA9IF9hLmF1dGhIZWFkZXIsIHRva2VuSW5mbyA9IF9hLnRva2VuSW5mbywgYmVhcmVyUHJvdmlkZXIgPSBfYS5iZWFyZXJQcm92aWRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIWF1dGhIZWFkZXIgJiYgIXRva2VuSW5mbyAmJiBiZWFyZXJQcm92aWRlcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJlYXJlclByb3ZpZGVyLmdldEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRva2VuSW5mbyA9IHRva2VuSW5mbyA9IF9lLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2tlbkluZm8pIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0b2tlbkluZm8uZXhwaXJlcyA8IERhdGUubm93KCkpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUb2tlbiBleHBpcmVkLiBSZWZyZXNoIGl0OlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBiZWFyZXJQcm92aWRlci5yZWZyZXNoQmVhcmVyKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MudG9rZW5JbmZvID0gdG9rZW5JbmZvID0gX2Uuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoSGVhZGVyID0gXCJCZWFyZXIgXCIgKyB0b2tlbkluZm8udG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gNTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIG9uZSB3YXkgb3IgYW5vdGhlciwgd2UndmUgY29uY2x1ZGVkIGFuIEF1dGhvcml6YXRpb24gaGVhZGVyIHRvIHVzZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF1dGhIZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGF1dGhIZWFkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdGhpcy5iYXNlVXJsICsgcGF0aCArIChxdWVyeVN0ciA/IFwiP1wiICsgcXVlcnlTdHIgOiBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5pc29tb3JwaGljLmZldGNoKHVybCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5mZXRjaE9wdGlvbnMsIHsgaGVhZGVyczogaGVhZGVycywgbWV0aG9kOiBtZXRob2QgfSwgZmV0Y2hPcHRpb25zKSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzID09IDQwMSAmJiB0aGlzLmJlYXJlclByb3ZpZGVyKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHd3d2F1dGggPSByZXMuaGVhZGVycy5nZXQoXCJ3d3ctYXV0aGVudGljYXRlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCBcIiArIHJlcy5zdGF0dXMgKyBcIiBmcm9tIFwiICsgKHRoaXMuYmFzZVVybCArIHBhdGgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEod3d3YXV0aCAmJiAvQmVhcmVyL2kudGVzdCh3d3dhdXRoKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYmVhcmVyUHJvdmlkZXIucmVmcmVzaEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLnRva2VuSW5mbyA9IF9lLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gXCJCZWFyZXIgXCIgKyB0aGlzLnRva2VuSW5mby50b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5pc29tb3JwaGljLmZldGNoKHVybCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5mZXRjaE9wdGlvbnMsIHsgaGVhZGVyczogaGVhZGVycywgbWV0aG9kOiBtZXRob2QgfSwgZmV0Y2hPcHRpb25zKSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OiByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHBhdGgsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChwYXRoLCBcIkdFVFwiLCB7IEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uOyB0ZXh0L3BsYWluXCIgfSwgcXVlcnksIGZldGNoT3B0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChwYXRoLCBkYXRhLCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChwYXRoLCBcIlBPU1RcIiwge1xyXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgICAgXCJBY2NlcHRcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICAgICAgICB9LCBudWxsLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBmZXRjaE9wdGlvbnMsIHsgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkgfSkpO1xyXG4gICAgfTtcclxuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChwYXRoLCBxdWVyeSwgYm9keSwgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2gocGF0aCwgXCJERUxFVEVcIiwgeyBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvbjsgdGV4dC9wbGFpblwiIH0sIHF1ZXJ5LCB0c2xpYl8xLl9fYXNzaWduKHt9LCBmZXRjaE9wdGlvbnMsIHsgYm9keTogYm9keSB9KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlc3RDbGllbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFJlc3RDbGllbnQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzdGNsaWVudC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBSZXN0Q2xpZW50IH0gZnJvbSAnLi9yZXN0Y2xpZW50JztcclxuaW1wb3J0IHsgYXZvaWRTaW11bHRhbm91c0NhbGxzIH0gZnJvbSAnLi91dGlscyc7XHJcbnZhciBLZWRCZWFyZXJQcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEtlZEJlYXJlclByb3ZpZGVyKGlzb21vcnBoaWMsIHN0b3JhZ2UsIHRva2VuSWQsIGNsaWVudElkLCBjbGllbnRTZWNyZXQsIHRva2VuVXJsLCB0b2tlblF1ZXJ5KSB7XHJcbiAgICAgICAgdGhpcy5pc29tb3JwaGljID0gaXNvbW9ycGhpYztcclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xyXG4gICAgICAgIHRoaXMudG9rZW5JZCA9IHRva2VuSWQ7XHJcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IGNsaWVudElkO1xyXG4gICAgICAgIHRoaXMuY2xpZW50U2VjcmV0ID0gY2xpZW50U2VjcmV0O1xyXG4gICAgICAgIHRoaXMudG9rZW5VcmwgPSB0b2tlblVybDtcclxuICAgICAgICB0aGlzLnRva2VuUXVlcnkgPSB0b2tlblF1ZXJ5O1xyXG4gICAgICAgIHRoaXMudG9rZW5JbmZvID0geyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9O1xyXG4gICAgICAgIHRoaXMuY2xpZW50ID0gbmV3IFJlc3RDbGllbnQoaXNvbW9ycGhpYywgXCJcIiwge1xyXG4gICAgICAgICAgICB1c2VybmFtZTogdGhpcy5jbGllbnRJZCxcclxuICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuY2xpZW50U2VjcmV0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5nZXRCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRCZWFyZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoQmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMucmVmcmVzaEJlYXJlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIEtlZEJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgdG9rZW4sIGV4cGlyZXMsIF9iLCBlXzE7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzLnRva2VuSW5mbywgdG9rZW4gPSBfYS50b2tlbiwgZXhwaXJlcyA9IF9hLmV4cGlyZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiAmJiBleHBpcmVzID49IERhdGUubm93KCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzEsIDQsICwgNl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RvcmFnZS5sb2FkKHRoaXMuY2xpZW50SWQgKyBcIi9cIiArIHRoaXMudG9rZW5JZCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudG9rZW5JbmZvID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50b2tlbkluZm8udG9rZW4gJiYgdGhpcy50b2tlbkluZm8uZXhwaXJlcyA+PSBEYXRlLm5vdygpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZWZyZXNoQmVhcmVyKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hCZWFyZXIoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5yZWZyZXNoQmVhcmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzLCByZXRyaWVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cmllcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJldHJpZXMgPCA2KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmV0cmlldmluZyB0b2tlbiBmb3IgXCIgKyB0aGlzLnRva2VuSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNsaWVudC5nZXQodGhpcy50b2tlblVybCwgdGhpcy50b2tlblF1ZXJ5LCB7IGNhY2hlOiAncmVsb2FkJyB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkdvdCBcIiArIHJlcy5zdGF0dXMgKyBcIiBcIiArIHJlcy5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50b2tlbkluZm8gPSAoX2IudG9rZW4gPSBfYy5zZW50KCksIF9iLmV4cGlyZXMgPSBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDEwMDAsIF9iKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJHb3QgdG9rZW4gZm9yIFwiICsgdGhpcy50b2tlbklkICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy50b2tlbkluZm8pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNhdmUodGhpcy5jbGllbnRJZCArIFwiL1wiICsgdGhpcy50b2tlbklkLCB0aGlzLnRva2VuSW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICArK3JldHJpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHJldHJpZXZlIHRva2VuIGZvciBcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMudG9rZW5JZCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2VkQmVhcmVyUHJvdmlkZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEtlZEJlYXJlclByb3ZpZGVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlZC1iZWFyZXItcHJvdmlkZXIuanMubWFwIiwidmFyIERvY3VtZW50QWNjZXNzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRG9jdW1lbnRBY2Nlc3MoYWNjZXNzQ2xhaW1UeXBlLCBhY2Nlc3NDbGFpbVZhbHVlLCByaWdodCkge1xyXG4gICAgICAgIHRoaXMuYWNjZXNzQ2xhaW1UeXBlID0gYWNjZXNzQ2xhaW1UeXBlO1xyXG4gICAgICAgIHRoaXMuYWNjZXNzQ2xhaW1WYWx1ZSA9IGFjY2Vzc0NsYWltVmFsdWU7XHJcbiAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xyXG4gICAgfVxyXG4gICAgRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChhYykge1xyXG4gICAgICAgIGlmICghYWMpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIHZhciBzcGxpdCA9IGFjLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA8IDMpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYWNjZXNzIHN0cmluZzogXCIgKyBhYyk7XHJcbiAgICAgICAgdmFyIGNsYWltVHlwZSA9IERvY3VtZW50QWNjZXNzLnVuZXNjYXBlKHNwbGl0WzBdKTtcclxuICAgICAgICB2YXIgY2xhaW1WYWx1ZSA9IERvY3VtZW50QWNjZXNzLnVuZXNjYXBlKHNwbGl0WzFdKTtcclxuICAgICAgICB2YXIgcmlnaHQgPSBzcGxpdFsyXTtcclxuICAgICAgICBpZiAocmlnaHQgIT09ICdSJyAmJiByaWdodCAhPT0gJ1cnICYmIHJpZ2h0ICE9PSAnUycpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYWNjZXNzIHN0cmluZzogXCIgKyBhYyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEFjY2VzcyhjbGFpbVR5cGUsIGNsYWltVmFsdWUsIHJpZ2h0KTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudEFjY2Vzcy5lc2NhcGUgPSBmdW5jdGlvbiAoYWNjZXNzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGFjY2Vzc0NvbXBvbmVudC5yZXBsYWNlKC9cXCUvZywgXCIlMjVcIikucmVwbGFjZSgvXFw6L2csIFwiJTNBXCIpO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50QWNjZXNzLnVuZXNjYXBlID0gZnVuY3Rpb24gKGFjY2Vzc0NvbXBvbmVudCkge1xyXG4gICAgICAgIHJldHVybiBhY2Nlc3NDb21wb25lbnQucmVwbGFjZSgvXFwlM0EvZywgXCI6XCIpLnJlcGxhY2UoL1xcJTI1L2csIFwiJVwiKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudEFjY2Vzcy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIERvY3VtZW50QWNjZXNzLmVzY2FwZSh0aGlzLmFjY2Vzc0NsYWltVHlwZSkgKyBcIjpcIiArXHJcbiAgICAgICAgICAgIERvY3VtZW50QWNjZXNzLmVzY2FwZSh0aGlzLmFjY2Vzc0NsYWltVmFsdWUpICsgXCI6XCIgK1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0O1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmdBcnJheSA9IGZ1bmN0aW9uIChhY2wpIHtcclxuICAgICAgICByZXR1cm4gYWNsXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGFjKSB7IHJldHVybiBEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nKGFjKTsgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWMpIHsgcmV0dXJuIGFjOyB9KTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudEFjY2Vzcy50b1N0cmluZ0FycmF5ID0gZnVuY3Rpb24gKGFjbCkge1xyXG4gICAgICAgIHJldHVybiBhY2wubWFwKGZ1bmN0aW9uIChhYykgeyByZXR1cm4gYWMudG9TdHJpbmcoKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERvY3VtZW50QWNjZXNzO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEb2N1bWVudEFjY2VzcyB9O1xyXG5leHBvcnQgZnVuY3Rpb24gaGFzQWNjZXNzKGFjbCwgdXNlckNsYWltcywgcmVxdWVzdGVkUmlnaHQpIHtcclxuICAgIGlmICh1c2VyQ2xhaW1zLnNvbWUoZnVuY3Rpb24gKGNsYWltKSB7IHJldHVybiBjbGFpbS50eXBlID09PSAncm9sZScgJiYgY2xhaW0udmFsdWUgPT09IFwiQURNSU5cIjsgfSkpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gYWNsLnNvbWUoZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICByZXR1cm4gdXNlckNsYWltcy5zb21lKGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLmFjY2Vzc0NsYWltVHlwZSA9PT0gYy50eXBlICYmXHJcbiAgICAgICAgICAgICAgICBhLmFjY2Vzc0NsYWltVmFsdWUgPT09IGMudmFsdWUgJiYgKChhLnJpZ2h0ID09PSAnUicgJiYgcmVxdWVzdGVkUmlnaHQgPT09ICdSJykgfHxcclxuICAgICAgICAgICAgICAgIChhLnJpZ2h0ID09PSAnVycgJiYgWydSJywgJ1cnXS5pbmRleE9mKHJlcXVlc3RlZFJpZ2h0KSA+PSAwKSB8fFxyXG4gICAgICAgICAgICAgICAgKGEucmlnaHQgPT09ICdTJykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjZXNzLWNvbnRyb2wuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxudmFyIEh0dHBFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKEh0dHBFcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEh0dHBFcnJvcihjb2RlLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJIVFRQXCIgKyBjb2RlICsgXCIgXCIgKyBtZXNzYWdlKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIF90aGlzLm5hbWUgPSBcImh0dHBcIiArIGNvZGU7XHJcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IFwiSFRUUFwiICsgY29kZSArIFwiIFwiICsgbWVzc2FnZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSHR0cEVycm9yO1xyXG59KEVycm9yKSk7XHJcbmV4cG9ydCB7IEh0dHBFcnJvciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwLWVycm9yLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICcuL3Jlc3RjbGllbnQnO1xyXG5leHBvcnQgKiBmcm9tICcuL3V0aWxzJztcclxuZXhwb3J0IHsgS2VkQmVhcmVyUHJvdmlkZXIgfSBmcm9tICcuL2tlZC1iZWFyZXItcHJvdmlkZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL2FjY2Vzcy1jb250cm9sJztcclxuZXhwb3J0IHsgUmVzdENsaWVudCB9O1xyXG5pbXBvcnQgeyBIdHRwRXJyb3IgfSBmcm9tICcuL2h0dHAtZXJyb3InO1xyXG5leHBvcnQgeyBIdHRwRXJyb3IgfTtcclxuZXhwb3J0ICogZnJvbSAnLi9yZXN0Y2xpZW50JztcclxuO1xyXG52YXIgS2VkQmFja2VuZENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRDbGllbnQoaXNvbW9ycGhpYywgYmVhcmVyUHJvdmlkZXIsIGJhc2VVcmwpIHtcclxuICAgICAgICB0aGlzLmh0dHAgPSBuZXcgUmVzdENsaWVudChpc29tb3JwaGljLCBiYXNlVXJsLCB7IGJlYXJlclByb3ZpZGVyOiBiZWFyZXJQcm92aWRlciB9KTtcclxuICAgIH1cclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmdldE15Q2xhaW1zID0gZnVuY3Rpb24gKHRhYmxlLCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQoXCJtZS9jbGFpbXMvXCIgKyAodGFibGUgfHwgXCJcIiksIG51bGwsIGZldGNoT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIG9wdGlvbnMsIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmdldCh0YWJsZSArIFwiL1wiICsgaWQsIG9wdGlvbnMsIGZldGNoT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMsIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnksIHJlcywgX2EsIF9iO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubXV0YXRpb25zT25FbXB0eSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5Lm11dGF0aW9uc09uRW1wdHkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLm11dGF0aW9uc09uRW1wdHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZ2V0KFwiXCIgKyB0YWJsZSwgcXVlcnksIGZldGNoT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmJhdGNoID0gZnVuY3Rpb24gKHJlcXMsIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVvcmRlciBvcGVyYXRpb25zIHNvIHRoYXQgJ2FkZCdzIGNvbWUgZmlyc3QgYW5kICdkZWxldGUncyBjb21lIGxhc3Q6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXMgPSByZXFzLnNsaWNlKCkuc29ydChmdW5jdGlvbiAocmVxMSwgcmVxMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcTEub3AgPT09ICdhZGQnID8gLTEgOiByZXEyLm9wID09PSAnYWRkJyA/IDEgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcTEub3AgPT09ICdkZWxldGUnID8gMSA6IHJlcTIub3AgPT09ICdkZWxldGUnID8gLTEgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLnBvc3QoXCJiYXRjaFwiLCByZXFzLCBmZXRjaE9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChzY29wZUZuKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBydW5uZXI7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmVyID0gbmV3IEJhdGNoUnVubmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlRm4ocnVubmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5iYXRjaChydW5uZXIubXV0YXRpb25SZXF1ZXN0cyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmRlbGV0ZVJlYWxtID0gZnVuY3Rpb24gKHJlYWxtKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZGVsZXRlKFwicmVhbG1zL1wiICsgcmVhbG0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGFibGUsIGRvYywgYnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5hZGQodGFibGUsIGRvYyk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIucHV0KHRhYmxlLCBkb2MpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51cGRhdGUodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5tZXJnZShicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5jbGVhckJyYW5jaCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmNsZWFyQnJhbmNoKGJyYW5jaElkKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmRlbGV0ZSh0YWJsZSwgaWQpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnNoYXJlKHRhYmxlLCBpZCwgYWNsKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnVuc2hhcmUodGFibGUsIGlkLCBhY2wpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmxpbmsoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRJZCwgbGFiZWwsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIubGluazIoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnVubGluayhzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51bmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIGxhYmVsLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnVubGluazIoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5kb0xpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRJZCwgbGFiZWwsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5kb0xpbmsoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEtlZEJhY2tlbmRDbGllbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEtlZEJhY2tlbmRDbGllbnQgfTtcclxudmFyIEJhdGNoUnVubmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQmF0Y2hSdW5uZXIoKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzID0gW107XHJcbiAgICB9XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRhYmxlLCBkb2MsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2FkZCcsIHRhYmxlOiB0YWJsZSwgZG9jOiBkb2MsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKHRhYmxlLCBkb2MpIHtcclxuICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MpO1xyXG4gICAgICAgIGRlbGV0ZSBkb2MuYWNsOyAvLyBGb3JiaWRkZW4gdG8gc2VuZCBhY2wgd2l0aCBwdXQoKSBjYWxscy5cclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAncHV0JywgdGFibGU6IHRhYmxlLCBkb2M6IGRvYyB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgZGVsdGFEb2MsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgZGVsdGFEb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkZWx0YURvYyk7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3VwZGF0ZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBkZWx0YURvYzogZGVsdGFEb2MsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ21lcmdlJywgYnJhbmNoSWQ6IGJyYW5jaElkLCB0YXJnZXRCcmFuY2hJZDogdGFyZ2V0QnJhbmNoSWQgfSk7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmNsZWFyQnJhbmNoID0gZnVuY3Rpb24gKGJyYW5jaElkKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2NsZWFyLWJyYW5jaCcsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdkZWxldGUnLCB0YWJsZTogdGFibGUsIGlkOiBpZCB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUuc2hhcmUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBhY2wpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnc2hhcmUnLCB0YWJsZTogdGFibGUsIGlkOiBpZCwgYWNsOiBhY2wgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVuc2hhcmUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBhY2wpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5zaGFyZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBhY2w6IGFjbCB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnbGluaycsIHNvdXJjZVRhYmxlOiBzb3VyY2VUYWJsZSwgc291cmNlSWQ6IHNvdXJjZUlkLCB0YXJnZXRUYWJsZTogdGFyZ2V0VGFibGUsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5saW5rMiA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnbGluaycsIHNvdXJjZVRhYmxlOiBzb3VyY2VUYWJsZSwgc291cmNlSWQ6IHNvdXJjZUlkLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCwgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51bmxpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3VubGluaycsIHNvdXJjZVRhYmxlOiBzb3VyY2VUYWJsZSwgc291cmNlSWQ6IHNvdXJjZUlkLCB0YXJnZXRUYWJsZTogdGFyZ2V0VGFibGUsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51bmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bmxpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5kb0xpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3VuZG8tbGluaycsIHNvdXJjZVRhYmxlOiBzb3VyY2VUYWJsZSwgc291cmNlSWQ6IHNvdXJjZUlkLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCwgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCYXRjaFJ1bm5lcjtcclxufSgpKTtcclxuZXhwb3J0IHsgQmF0Y2hSdW5uZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5leHBvcnQgY29uc3QgTGFuZ3VhZ2VDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7aW50bDogbnVsbH0pOyIsInZhciBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UoKSB7XHJcbiAgICB9XHJcbiAgICBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoaWQsIHRva2VuSW5mbykge1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJiZWFyZXItXCIgKyBpZCwgSlNPTi5zdHJpbmdpZnkodG9rZW5JbmZvKSk7XHJcbiAgICB9O1xyXG4gICAgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGpzb24gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiYmVhcmVyLVwiICsgaWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGpzb24gPyBKU09OLnBhcnNlKGpzb24pIDogeyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZTtcclxufSgpKTtcclxuZXhwb3J0IHsgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJlYXJlci1zdG9yYWdlLXNlc3Npb25zdG9yYWdlLmpzLm1hcCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGVUYXNrKHRhc2spIHtcclxuICAgIGlmICghdGFzay5yZXNvdXJjZXMpXHJcbiAgICAgICAgdGFzay5yZXNvdXJjZXMgPSBbXTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLXRhc2suanMubWFwIiwiaW1wb3J0IG1pZ3JhdGVDb3Vyc2UgZnJvbSAnLi9taWdyYXRlLWNvdXJzZSc7XHJcbmltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGUoZG9jLCB0YWJsZSwgZ3JhcGhzKSB7XHJcbiAgICBzd2l0Y2ggKHRhYmxlKSB7XHJcbiAgICAgICAgY2FzZSBcImNvdXJzZXNcIjpcclxuICAgICAgICAgICAgbWlncmF0ZUNvdXJzZShkb2MsIGdyYXBocyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0YXNrc1wiOlxyXG4gICAgICAgICAgICBtaWdyYXRlVGFzayhkb2MpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLmpzLm1hcCIsImltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGVDb3Vyc2UoY291cnNlLCBncmFwaHMpIHtcclxuICAgIGlmICghY291cnNlLm1vZHVsZXMpXHJcbiAgICAgICAgY291cnNlLm1vZHVsZXMgPSBbXTtcclxuICAgIGNvdXJzZS5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xyXG4gICAgICAgIGlmICghbW9kdWxlLnJlc291cmNlcykge1xyXG4gICAgICAgICAgICBtb2R1bGUucmVzb3VyY2VzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbW9kdWxlLnRhc2tJZHMpIHtcclxuICAgICAgICAgICAgbW9kdWxlLnRhc2tJZHMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmICghY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMpIHtcclxuICAgICAgICBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgLy8gRWFybGllciB3cm9uZyBzcGVsbGluZyBvZiByZXNvdXJjZXNcclxuICAgIGlmICgncmVzb3Vyc2VzJyBpbiBjb3Vyc2UgJiYgISgncmVzb3VyY2VzJyBpbiBjb3Vyc2UpKSB7XHJcbiAgICAgICAgY291cnNlLnJlc291cmNlcyA9IGNvdXJzZS5yZXNvdXJzZXM7XHJcbiAgICAgICAgZGVsZXRlIGNvdXJzZS5yZXNvdXJzZXM7XHJcbiAgICB9XHJcbiAgICBpZiAoIWNvdXJzZS5yZXNvdXJjZXMpIHtcclxuICAgICAgICBjb3Vyc2UucmVzb3VyY2VzID0gW107XHJcbiAgICB9XHJcbiAgICBpZiAoZ3JhcGhzKSB7XHJcbiAgICAgICAgZ3JhcGhzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAobGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Rhc2tzJzpcclxuICAgICAgICAgICAgICAgICAgICBjb3Vyc2UudGFza3MuZm9yRWFjaChmdW5jdGlvbiAodGFzaykgeyByZXR1cm4gbWlncmF0ZVRhc2sodGFzayk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlncmF0ZS1jb3Vyc2UuanMubWFwIiwiaW1wb3J0IG1pZ3JhdGUgZnJvbSAnLi9taWdyYXRlJztcclxuZXhwb3J0IHZhciBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gPSBmdW5jdGlvbiAoY2xpZW50KSB7XHJcbiAgICBpZiAoY2xpZW50Ll9fbWlncmF0b3JfbWl4ZWRfaW4pXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgY2xpZW50Ll9fbWlncmF0b3JfbWl4ZWRfaW4gPSB0cnVlO1xyXG4gICAgdmFyIGdldCA9IGNsaWVudC5nZXQ7XHJcbiAgICB2YXIgbGlzdCA9IGNsaWVudC5saXN0O1xyXG4gICAgY2xpZW50LmdldCA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgaW5jbHVkZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlO1xyXG4gICAgICAgIHJldHVybiBnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgbWlncmF0ZShyZXN1bHQsIHRhYmxlLCBpbmNsdWRlICYmIGluY2x1ZGUudG9TdHJpbmcoKS5zcGxpdCgnLCcpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBjbGllbnQubGlzdCA9IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBpbmNsdWRlID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGU7XHJcbiAgICAgICAgcmV0dXJuIGxpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKGRvYykgeyByZXR1cm4gbWlncmF0ZShkb2MsIHRhYmxlLCBpbmNsdWRlICYmIGluY2x1ZGUudG9TdHJpbmcoKS5zcGxpdCgnLCcpKTsgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGNsaWVudDtcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwidmFyIHJlZGlySGFzaCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJyZWRpci1oYXNoXCIpO1xyXG5pZiAocmVkaXJIYXNoKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgX2EgPSBKU09OLnBhcnNlKHJlZGlySGFzaCksIHRpbWUgPSBfYS50aW1lLCBoYXNoID0gX2EuaGFzaDtcclxuICAgICAgICBpZiAodGltZSAmJiB0aW1lID4gRGF0ZS5ub3coKSAtIDYwMDAwKSB7XHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJyZWRpci1oYXNoXCIpO1xyXG4gICAgICAgICAgICBsb2NhdGlvbi5oYXNoID0gaGFzaDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoXykgeyB9XHJcbmV4cG9ydCBmdW5jdGlvbiByZW1lbWJlckhhc2hMb2NhdGlvbigpIHtcclxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJyZWRpci1oYXNoXCIsIEpTT04uc3RyaW5naWZ5KHsgdGltZTogRGF0ZS5ub3coKSwgaGFzaDogbG9jYXRpb24uaGFzaCB9KSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaC1yZXN0b3Jlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBIdHRwRXJyb3IgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xyXG5pbXBvcnQgeyBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UgfSBmcm9tIFwiLi9iZWFyZXItc3RvcmFnZS1zZXNzaW9uc3RvcmFnZVwiO1xyXG5pbXBvcnQgeyBhdm9pZFNpbXVsdGFub3VzQ2FsbHMgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMnO1xyXG5pbXBvcnQgeyBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gfSBmcm9tICcuLi9rZWQtbW9kZWwtbWlncmF0b3InO1xyXG5pbXBvcnQgJy4vaGFzaC1yZXN0b3Jlcic7XHJcbmltcG9ydCB7IHJlbWVtYmVySGFzaExvY2F0aW9uIH0gZnJvbSAnLi9oYXNoLXJlc3RvcmVyJztcclxuS2VkTW9kZWxNaWdyYXRvck1peGluKEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlKTtcclxuZXhwb3J0IHZhciBzdG9yYWdlID0gbmV3IEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSgpO1xyXG52YXIgdGltZU9mUGFnZUxvYWQgPSBEYXRlLm5vdygpO1xyXG52YXIgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcih0b2tlblBhdGgsIHRva2VuUmVzcG9uc2VNYXBwZXIsIHRva2VuSWQpIHtcclxuICAgICAgICB0aGlzLnRva2VuUGF0aCA9IHRva2VuUGF0aDtcclxuICAgICAgICB0aGlzLnRva2VuUmVzcG9uc2VNYXBwZXIgPSB0b2tlblJlc3BvbnNlTWFwcGVyO1xyXG4gICAgICAgIHRoaXMudG9rZW5JZCA9IHRva2VuSWQ7XHJcbiAgICAgICAgdGhpcy50b2tlbkluZm8gPSB7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH07XHJcbiAgICAgICAgdGhpcy5nZXRCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRCZWFyZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoQmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMucmVmcmVzaEJlYXJlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnRva2VuSW5mby50b2tlbikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50b2tlbklkKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdG9yYWdlLmxvYWQodGhpcy50b2tlbklkKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50b2tlbkluZm8gPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMudG9rZW5JbmZvLmV4cGlyZXMgPCBEYXRlLm5vdygpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIucHJvdG90eXBlLnJlZnJlc2hCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYiwgX2MsIF9kO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHRoaXMudG9rZW5QYXRoLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogXCJ0ZXh0L3BsYWluOyBhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0OiAnbWFudWFsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfZS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAzMDIgfHwgKCFyZXMuc3RhdHVzICYmIHJlcy50eXBlID09PSBcIm9wYXF1ZXJlZGlyZWN0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIHNlc3Npb24gdGltZWQgb3V0IGFuZCBzZXJ2ZXIgd2FudHMgdG8gcmVkaXJlY3QgZW50aXJlIHBhZ2UgdG8gbG9naW4gcGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGltZSB0byByZWxvYWQgY3VycmVudCBwYWdlIHRvIGZvcmNlIGEgcmVkaXJlY3Qgb2YgdGhlIGVudGlyZSBwYWdlIGluc3RlYWQgZm9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHJlZGlyZWN0aW5nIHRvIC9hcGkvdG9rZW4gb3Igd2hhdGV2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRpbWVPZlBhZ2VMb2FkID4gNjAwMDApIHsgLy8gcHJvaGliaXQgZW5kbGVzcyBsb29wIG9mIHJlbG9hZGluZyBzZWxmLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2FudHNSZWRpcmVjdCA9IHRydWU7IC8vIFNvIHRoYXQgbGlzdGVuZXJzIHRvIG9uYmVmb3JldW5sb2FkIGNvdWxkIHNob3cgYWx0ZXJuYXRlIG1lc3NhZ2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWRpcmVjdCB3YW50ZWQuIFJlbG9hZCBwYWdlLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1lbWJlckhhc2hMb2NhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEh0dHBFcnJvcigzMDIsIFwiUmVkaXJlY3RlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gXCJIVFRQXCIgKyByZXMuc3RhdHVzICsgXCIgXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShFcnJvciwgW3ZvaWQgMCwgX2IgKyAoX2Uuc2VudCgpKV0pKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZCA9IHRoaXMudG9rZW5SZXNwb25zZU1hcHBlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50b2tlbkluZm8gPSBfZC5hcHBseSh0aGlzLCBbX2Uuc2VudCgpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2F2ZSh0aGlzLnRva2VuSWQsIHRoaXMudG9rZW5JbmZvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciB9O1xyXG5leHBvcnQgdmFyIGlzb21vcnBoaWMgPSB7IGZldGNoOiBmZXRjaC5iaW5kKHNlbGYpLCBidG9hOiBidG9hLmJpbmQoc2VsZikgfTtcclxudmFyIEtlZEJhY2tlbmRDbGllbnRXZWIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhLZWRCYWNrZW5kQ2xpZW50V2ViLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENsaWVudFdlYihhcGlCYXNlVXJsLCBwcm92aWRlck9yVG9rZW5QYXRoLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYmVhcmVyUHJvdmlkZXIgPSB0eXBlb2YgcHJvdmlkZXJPclRva2VuUGF0aCAhPT0gJ3N0cmluZycgP1xyXG4gICAgICAgICAgICBwcm92aWRlck9yVG9rZW5QYXRoIDpcclxuICAgICAgICAgICAgbmV3IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKHByb3ZpZGVyT3JUb2tlblBhdGgsIChvcHRpb25zICYmIG9wdGlvbnMudG9rZW5SZXNwb25zZU1hcHBlcikgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiAoeyB0b2tlbjogeCwgZXhwaXJlczogRGF0ZS5ub3coKSArIDU5ICogNjAgKiA2MCB9KTsgfSksIG9wdGlvbnMgJiYgb3B0aW9ucy50b2tlbklkKTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBhcGlCYXNlVXJsKSB8fCB0aGlzO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBLZWRCYWNrZW5kQ2xpZW50V2ViO1xyXG59KEtlZEJhY2tlbmRDbGllbnQpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZENsaWVudFdlYiB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgKiBmcm9tICcuL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYic7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIG51bWJlck9mVGFza3M6IG51bWJlcjtcclxuICAgIGNvbXBsZXRlZE51bWJlck9mVGFza3M6IG51bWJlcjtcclxuICAgIG1heGltdW1UYXNrc0Rpc3BsYXllZD86IG51bWJlcjtcclxuICAgIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcclxuICAgIHByb2dyZXNzQ29sb3I/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHb2FsUHJvZ3Jlc3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xyXG4gICAgICAgIG51bWJlcm9mVGFza3M6IDAsXHJcbiAgICAgICAgY29tcGxldGVkTnVtYmVyT2ZUYXNrczogMCxcclxuICAgICAgICBtYXhpbXVtVGFza3NEaXNwbGF5ZWQ6IDEwLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJsaWdodGdyZXlcIixcclxuICAgICAgICBwcm9ncmVzc0NvbG9yOiBcIiMzZGJjYTJcIixcclxuICAgIH07XHJcblxyXG4gICAgY3JlYXRlUHJvZ3Jlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBudW1iZXJPZlRhc2tzLCBjb21wbGV0ZWROdW1iZXJPZlRhc2tzLCBtYXhpbXVtVGFza3NEaXNwbGF5ZWQsIGJhY2tncm91bmRDb2xvciwgcHJvZ3Jlc3NDb2xvciB9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBbXTtcclxuICAgICAgICBpZihudW1iZXJPZlRhc2tzID4gbWF4aW11bVRhc2tzRGlzcGxheWVkKXtcclxuICAgICAgICAgICByZXR1cm4gPGRpdj4ge2NvbXBsZXRlZE51bWJlck9mVGFza3N9IC8ge251bWJlck9mVGFza3N9IDwvZGl2PjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHRhc2tObyA9IDE7IHRhc2tObyA8PSBudW1iZXJPZlRhc2tzOyB0YXNrTm8rKykge1xyXG4gICAgICAgICAgICBwcm9ncmVzcy5wdXNoKFxyXG4gICAgICAgICAgICA8c3ZnIGtleT17dGFza05vfT5cclxuICAgICAgICAgICAgICAgIDxjaXJjbGUgY2xhc3NOYW1lPVwiY2lyY2xlLWNoYXJ0LWJhY2tncm91bmRcIiBmaWxsPXt0YXNrTm8gPiBjb21wbGV0ZWROdW1iZXJPZlRhc2tzID8gYmFja2dyb3VuZENvbG9yIDogcHJvZ3Jlc3NDb2xvcn0gY3g9XCI4XCIgY3k9XCI4XCIgcj1cIjhcIiAvPlxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHByb2dyZXNzO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcigpeyAgXHJcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiZ29hbHMtcHJvZ3Jlc3NcIj57dGhpcy5jcmVhdGVQcm9ncmVzcygpfTwvZGl2PlxyXG4gICAgfVxyXG59IiwiLyogUkVGQUNUT1I6IE1vdmUgdGhpcyBjb21wb25lbnQgb3V0c2lkZSBjb3Vyc2VidWlsZGVyIVxyXG4gICBUaGlzIGlzIGEgZ2VuZXJhbC1wdXJwb3NlIGNvbXBvbmVudFxyXG4qL1xyXG5cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBHb2FsUHJvZ3Jlc3MgfSBmcm9tICcuLi9jaGFydHMvZ29hbC1wcm9ncmVzcyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHRpdGxlOiBzdHJpbmcgfCBKU1guRWxlbWVudDtcclxuICBjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgaGVhZGVyQ2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gIGNvbnRlbnRDbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgaGVhZGVyT3Blbj86IGJvb2xlYW47XHJcbiAgb25PcGVuQ2xvc2U/OiAoYmVjYW1lT3BlbjogYm9vbGVhbikgPT4gdm9pZDtcclxuICBkaXNwbGF5UHJvZ3Jlc3M/OiBib29sZWFuO1xyXG4gIHByb2dyZXNzRGF0YT86IHtjb21wbGV0ZWROdW1iZXJPZlRhc2tzOiBudW1iZXIsIG51bWJlck9mVGFza3M6IG51bWJlcn07XHJcbiAgY2hpbGRyZW47XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgaGVhZGVyT3BlbjogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE9wZW5DbG9zZUJveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgaGVhZGVyT3BlbjogcHJvcHMuaGVhZGVyT3BlbiB8fCBmYWxzZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wczogUHJvcHMpIHtcclxuICAgIGlmIChuZXh0UHJvcHMuaGVhZGVyT3BlbiAhPT0gdGhpcy5wcm9wcy5oZWFkZXJPcGVuKSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2hlYWRlck9wZW46IG5leHRQcm9wcy5oZWFkZXJPcGVufSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IHRpdGxlLCBjbGFzc05hbWUsIGNoaWxkcmVuLCBoZWFkZXJDbGFzc05hbWUsIGNvbnRlbnRDbGFzc05hbWUsIGRpc3BsYXlQcm9ncmVzcywgcHJvZ3Jlc3NEYXRhIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyBoZWFkZXJPcGVuIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgLy92YXIgY3VycmVudFByb2dyZXNzRGF0YSA9IC8vcHJvZ3Jlc3NEYXRhKCk7XHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9eyhjbGFzc05hbWV8fCcnKSArIFwiIG9wZW5DbG9zZVwiICsgKGhlYWRlck9wZW4gPyBcIiBvcGVuXCIgOiBcIlwiKX0+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcIm9wZW5IZWFkZXJcIiArIChoZWFkZXJDbGFzc05hbWUgPyBcIiBcIiArIGhlYWRlckNsYXNzTmFtZSA6IFwiXCIpfVxyXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uT3BlbkNsb3NlKSB0aGlzLnByb3BzLm9uT3BlbkNsb3NlKCF0aGlzLnN0YXRlLmhlYWRlck9wZW4pO1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGhlYWRlck9wZW46ICF0aGlzLnN0YXRlLmhlYWRlck9wZW4gfSk7XHJcbiAgICAgICAgfX0gPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3BlbkhlYWRlckNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgPGRpdj57dGl0bGV9PC9kaXY+XHJcbiAgICAgICAgICB7ZGlzcGxheVByb2dyZXNzICYmIDxHb2FsUHJvZ3Jlc3Mgey4uLnByb2dyZXNzRGF0YX0vPn1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcIm9wZW5Db250ZW50XCIgKyAoY29udGVudENsYXNzTmFtZSA/IFwiIFwiICsgY29udGVudENsYXNzTmFtZSA6IFwiXCIpfT5cclxuICAgICAgICB7Y2hpbGRyZW59XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+O1xyXG4gIH1cclxufVxyXG4iLCJcclxuZXhwb3J0IGNvbnN0IEtFRF9OQU1FU1BBQ0UgPSBcIktFRFwiO1xyXG5cclxuZGVjbGFyZSB2YXIgS0VEOiBhbnk7XHJcblxyXG52YXIgcmVzdWx0ID0gdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcgPyB7fSA6IEtFRDtcclxuXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgd2luZG93W0tFRF9OQU1FU1BBQ0VdID0gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XHJcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgVGVybSwgQWNhZGVtaWNZZWFyIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTY2hvb2xNb21lbnQge1xyXG4gIGFjYWRlbWljWWVhcjogQWNhZGVtaWNZZWFyO1xyXG4gIHRlcm06IFRlcm07XHJcbiAgd2Vlaz86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcnN0QW5kTGFzdFdlZWtPZlRlcm0odGVybTogVGVybSkge1xyXG4gIHJldHVybiB0ZXJtID09PSAnQVQnID9cclxuICAgIFszMiwgNTFdIDpcclxuICAgIFsxLCAyNV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtU3RhcnRBbmRFbmQobm93OiBtb21lbnQuTW9tZW50KSA6IG1vbWVudC5Nb21lbnRbXSB7XHJcbiAgICByZXR1cm4gbm93Lm1vbnRoKCkgPj0gNiA/IC8vIDYgPSBKdWx5IGluIEpTIERhdGVzIGFuZCBpbiBtb21lbnQgYXMgd2VsbCFcclxuICAgIFttb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgNywgMSkpLCBtb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgMTEsIDMxKSldIDogLy8gYXVnMSAtIGRlYzMxXHJcbiAgICBbbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDAsIDEpKSwgbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDYsIDMxKSldOyAvLyBqYW4xIC0ganVseTMxXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2hvb2xNb21lbnQobTogbW9tZW50Lk1vbWVudCk6IFNjaG9vbE1vbWVudCB7XHJcbiAgY29uc3QgdGhpc1llYXIgPSBtLnllYXIoKTtcclxuICBjb25zdCBpc0F1dHVtbiA9IG0ubW9udGgoKSA+PSA2OyAvLyBkZXRlcm1pbmUgXHJcbiAgY29uc3QgW2F1dHVtblllYXIsIHNwcmluZ1llYXJdID0gaXNBdXR1bW4gP1xyXG4gICAgW3RoaXNZZWFyLCB0aGlzWWVhciArIDFdIDpcclxuICAgIFt0aGlzWWVhciAtIDEsIHRoaXNZZWFyXTtcclxuICBjb25zdCBhY2FkZW1pY1llYXIgPSAnJyArIGF1dHVtblllYXIgKyAnLycgKyBzcHJpbmdZZWFyO1xyXG4gIGNvbnN0IHRlcm0gPSBpc0F1dHVtbiA/ICdBVCcgOiAnU1QnO1xyXG4gIGNvbnN0IHdlZWsgPSBtLndlZWsoKTtcclxuICByZXR1cm4geyBhY2FkZW1pY1llYXIsIHRlcm0sIHdlZWsgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFllYXIoYVllYXI6IEFjYWRlbWljWWVhciwgbnVtWWVhcnNUb0FkZDogbnVtYmVyKTogQWNhZGVtaWNZZWFyIHtcclxuICByZXR1cm4gYVllYXIuc3BsaXQoJy8nKVxyXG4gICAgLm1hcCh5ZWFyU3RyID0+IHBhcnNlSW50KHllYXJTdHIpICsgbnVtWWVhcnNUb0FkZClcclxuICAgIC5tYXAoeWVhciA9PiAnJyArIHllYXIpXHJcbiAgICAuam9pbignLycpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbmV4dEFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcclxuICByZXR1cm4gYWRkWWVhcihhWWVhciwgMSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmV2QWNhZGVtaWNZZWFyKGFZZWFyOiBBY2FkZW1pY1llYXIpOiBBY2FkZW1pY1llYXIge1xyXG4gIHJldHVybiBhZGRZZWFyKGFZZWFyLCAtMSk7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBGb3JtRmllbGQgfSBmcm9tICcuL2Zvcm0tZmllbGQnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBsYWJlbDogYW55O1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdmFsdWU6IHN0cmluZztcclxuICBwbGFjZWhvbGRlcj86IHN0cmluZztcclxuICBhdXRvRm9jdXM/OiBib29sZWFuO1xyXG4gIG9uQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRleHRJbnB1dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxGb3JtRmllbGQgbGFiZWw9e3RoaXMucHJvcHMubGFiZWx9PlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1cz17dGhpcy5wcm9wcy5hdXRvRm9jdXN9IGlkPXt0aGlzLnByb3BzLmlkfSBzaXplPXszNX0gdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMucHJvcHMub25DaGFuZ2UoZXYudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlcn0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0Zvcm1GaWVsZD5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IGxvY2FsTW9tZW50IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9tb21lbnQtc3YtbG9jYWxlJztcclxuXHJcbnR5cGUgTW9tZW50ID0gbW9tZW50Lk1vbWVudDtcclxuXHJcbmV4cG9ydCBjbGFzcyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIHtcclxuICBzdGF0aWMgRVhQSVJBVElPTl9IT1VSUyA9IDEyO1xyXG4gIHN0YXRpYyBWRVJTSU9OID0gMjtcclxuXHJcbiAgdXNlcjogc3RyaW5nO1xyXG4gIGxhc3RXcml0ZTogbnVtYmVyO1xyXG4gIHdlZWtEYXRlOiBudW1iZXI7XHJcbiAgb3BlbkNvdXJzZXM6IHsgW3BhdGg6IHN0cmluZ106IGJvb2xlYW4gfVxyXG5cclxuICBjb25zdHJ1Y3RvciAodXNlck9yQ29weTogc3RyaW5nIHwgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB1c2VyT3JDb3B5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLnVzZXIgPSB1c2VyT3JDb3B5O1xyXG4gICAgICB0aGlzLmxhc3RXcml0ZSA9IERhdGUubm93KCk7XHJcbiAgICAgIHRoaXMud2Vla0RhdGUgPSBsb2NhbE1vbWVudCgpLnN0YXJ0T2YoJ3dlZWsnKS52YWx1ZU9mKCk7XHJcbiAgICAgIHRoaXMub3BlbkNvdXJzZXMgPSB7fTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgdXNlck9yQ29weSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgbG9hZCh1c2VyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGNvb2tpZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlMicpO1xyXG4gICAgY29uc3Qgc3RvcmVkRGF0YSA9IGNvb2tpZSAmJiAoSlNPTi5wYXJzZShjb29raWUpIGFzIFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUpO1xyXG4gICAgY29uc3Qgc3RhdGUgPSBuZXcgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSh1c2VyKTtcclxuICAgIGlmIChzdG9yZWREYXRhKSBPYmplY3QuYXNzaWduKHN0YXRlLCBzdG9yZWREYXRhKTtcclxuXHJcbiAgICByZXR1cm4gc3RhdGUudXNlciA9PT0gdXNlciAmJiAhc3RhdGUuaXNFeHBpcmVkKG1vbWVudCgpKSA/XHJcbiAgICAgIHN0YXRlIDogbmV3IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUodXNlcik7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzYXZlKCkge1xyXG4gICAgdGhpcy5sYXN0V3JpdGUgPSBEYXRlLm5vdygpO1xyXG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KHRoaXMpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1dlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUyJywganNvbik7XHJcbiAgfVxyXG5cclxuICBpc0V4cGlyZWQgKGFzT2Y6IE1vbWVudCkge1xyXG4gICAgICByZXR1cm4gbW9tZW50KHRoaXMubGFzdFdyaXRlKVxyXG4gICAgICAgIC5pc0JlZm9yZShcclxuICAgICAgICAgICAgYXNPZi5hZGQoXHJcbiAgICAgICAgICAgICAgICAwLVdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUuRVhQSVJBVElPTl9IT1VSUywgJ2hvdXJzJylcclxuICAgICAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge0tlZFJlcG99IGZyb20gJy4va2VkLXJlcG8nO1xyXG5pbXBvcnQgeyBVc2VyVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSB9IGZyb20gXCIuLi9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXBlcnNpc3RlZC1zdGF0ZVwiO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IGNyZWF0ZVVVSUQsIERvY3VtZW50QWNjZXNzLCBLZWRCYWNrZW5kQ2xpZW50IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBnZXRBZGp1c3RlZFdlZWssIEtFRFdlZWsgfSBmcm9tICcuLi91dGlscy93ZWVrdXRpbCc7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcblxyXG5leHBvcnQgbGV0IHVzZXJUYXNrc1JlcG8gPSBlbnYudXNlclRhc2tzUmVwbyBhcyBVc2VyVGFza3NSZXBvO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJUYXNrc1JlcG8gZXh0ZW5kcyBLZWRSZXBvPFVzZXJUYXNrPiB7XHJcbiAgcGVyc2lzdGVkU3RhdGU6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUgfCBudWxsO1xyXG4gIGdldEN1cnJlbnRVc2VyOiAoKT0+VXNlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoZ2V0Q2xpZW50OiAoKT0+S2VkQmFja2VuZENsaWVudCwgZ2V0Q3VycmVudFVzZXI6ICgpPT5Vc2VyKSB7ICAgIFxyXG4gICAgc3VwZXIoe1xyXG4gICAgICBnZXRDbGllbnQsXHJcbiAgICAgIG9wdGltaXN0aWM6IHRydWUsXHJcbiAgICAgIHRhYmxlOiBcInVzZXJ0YXNrc1wiLFxyXG4gICAgICB1c2VyOiBnZXRDdXJyZW50VXNlcigpID8gZ2V0Q3VycmVudFVzZXIoKS5tYWlsIDogXCJcIixcclxuICAgICAgZ2V0UXVlcnlPcHRpb25zOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFVzZXIgPSBnZXRDdXJyZW50VXNlcigpO1xyXG4gICAgICAgIGNvbnN0IHVzZXJFbWFpbCA9IGN1cnJlbnRVc2VyID8gY3VycmVudFVzZXIubWFpbCA6IFwiXCI7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBlcnNpc3RlZFN0YXRlKVxyXG4gICAgICAgICAgdGhpcy5wZXJzaXN0ZWRTdGF0ZSA9IGF3YWl0IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUubG9hZCh1c2VyRW1haWwpO1xyXG4gICAgICAgIGNvbnN0IHsgd2Vla0RhdGUgfSA9IHRoaXMucGVyc2lzdGVkU3RhdGU7XHJcbiAgICAgICAgY29uc3Qgd2Vla051bWJlciA9IG1vbWVudCh3ZWVrRGF0ZSkud2VlaygpO1xyXG4gICAgICAgIGNvbnN0IGtlZFdlZWsgPSBLRURXZWVrKG1vbWVudCh3ZWVrRGF0ZSkueWVhcigpLCB3ZWVrTnVtYmVyKTtcclxuICAgICAgICAvKmNvbnN0IFtmcm9tLCB0b10gPSBbbW9tZW50KHdlZWtEYXRlKS5zdGFydE9mKCd3ZWVrJyksIG1vbWVudCh3ZWVrRGF0ZSkuZW5kT2YoJ3dlZWsnKV1cclxuICAgICAgICAgIC5tYXAobSA9PiBtLnRvRGF0ZSgpLmdldFRpbWUoKSk7Ki9cclxuICAgICAgICBcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZyb206IGtlZFdlZWsubm90QmVmb3JlLFxyXG4gICAgICAgICAgICB0bzoga2VkV2Vlay5ub3RBZnRlcixcclxuICAgICAgICAgICAgcm9sZTogXCJVU0VSXCIsXHJcbiAgICAgICAgICAgIGluY2x1ZGU6IFtcInRhc2tcIiwgXCJjb3Vyc2VcIl0sXHJcbiAgICAgICAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnBlcnNpc3RlZFN0YXRlID0gbnVsbDtcclxuICAgIHRoaXMuZ2V0Q3VycmVudFVzZXIgPSBnZXRDdXJyZW50VXNlcjtcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZVBlcnNpc3RlZFN0YXRlKHN0YXRlQ2hhbmdlczogUGFydGlhbDxXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlPikge1xyXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLnBlcnNpc3RlZFN0YXRlLCBzdGF0ZUNoYW5nZXMpO1xyXG4gICAgYXdhaXQgdGhpcy5wZXJzaXN0ZWRTdGF0ZS5zYXZlKCk7XHJcbiAgICB0aGlzLm1lbS5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2V0VGFza0RvbmVTdGF0ZSh1c2VyVGFzazogVXNlclRhc2ssIGRvbmU6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IHtnZXRDbGllbnQsIG9wdGltaXN0aWMsIHRhYmxlfSA9IHRoaXMub3B0aW9ucztcclxuICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xyXG4gICAgY29uc3QgbW9kaWZpZWRJdGVtID0gT2JqZWN0LmFzc2lnbih7fSwgdXNlclRhc2ssIHtkb25lfSk7XHJcbiAgICBpZiAob3B0aW1pc3RpYykgYXdhaXQgdGhpcy5tZW0udXBkYXRlKE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVkSXRlbSwgeyRtZXRhOiAndXBkYXRpbmcnfSkpO1xyXG4gICAgLy8gTm93IG1ha2Ugc3VyZSB0byBjaGFuZ2UgdGhlIHN0YXRlIGZvciBvdGhlciB3ZWVrcyBhcyB3ZWxsOlxyXG4gICAgY29uc3Qgc2ltaWxhclRhc2tzID0gYXdhaXQgY2xpZW50Lmxpc3Q8VXNlclRhc2s+KCd1c2VydGFza3MnLCB7XHJcbiAgICAgIG5hbWU6IHVzZXJUYXNrLm5hbWUsXHJcbiAgICAgIHJvbGU6IFwiVVNFUlwiLFxyXG4gICAgICBpbmNsdWRlOiBbXCJ0YXNrXCIsXCJjb3Vyc2VcIl0sXHJcbiAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXSxcclxuICAgICAgZnJvbTogbW9tZW50KHRoaXMucGVyc2lzdGVkU3RhdGUud2Vla0RhdGUpLmFkZCgtMywgJ3dlZWtzJykudmFsdWVPZigpLFxyXG4gICAgICB0bzogbW9tZW50KHRoaXMucGVyc2lzdGVkU3RhdGUud2Vla0RhdGUpLmFkZCgzLCAnd2Vla3MnKS52YWx1ZU9mKClcclxuICAgIH0sIHtcclxuICAgICAgY2FjaGU6ICduby1jYWNoZSdcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaWRlbnRpY2FsVGFza3MgPSBzaW1pbGFyVGFza3MuZmlsdGVyKHQgPT5cclxuICAgICAgdC5jb3Vyc2VOYW1lID09PSB1c2VyVGFzay5jb3Vyc2VOYW1lICYmXHJcbiAgICAgIHQubGVhcm5pbmdHb2FsID09PSB1c2VyVGFzay5sZWFybmluZ0dvYWwgJiZcclxuICAgICAgKCF1c2VyVGFzay50YXNrIHx8IHQudGFzay5tYXAodD0+dC5pZCkuam9pbignJykgPT09IHVzZXJUYXNrLnRhc2subWFwKHQ9PnQuaWQpLmpvaW4oJycpKSAmJlxyXG4gICAgICAoIXVzZXJUYXNrLmNvdXJzZSB8fCB0LmNvdXJzZS5tYXAoYz0+Yy5pZCkuam9pbignJykgPT09IHVzZXJUYXNrLmNvdXJzZS5tYXAoYz0+Yy5pZCkuam9pbignJykpKTtcclxuICAgIGlmIChpZGVudGljYWxUYXNrcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaXNzdWUgaW4gU3ViamVjdFBsYW5uZXIgbWlncmF0aW9uICh1c2VydGFza3Mgd2l0aCBsb25nIG5hbWVzIGlzIG5vdCBmb3VuZClcclxuICAgICAgaWRlbnRpY2FsVGFza3MucHVzaCh1c2VyVGFzaylcclxuICAgIH1cclxuICAgIGF3YWl0IHRoaXMudXBkYXRlKGlkZW50aWNhbFRhc2tzLCB0ID0+IHQuZG9uZSA9IGRvbmUpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2V0U3ViVGFza0RvbmVTdGF0ZSAodXNlclRhc2s6IFVzZXJUYXNrLCBzdWJUYXNrSWQ6IHN0cmluZywgZG9uZTogYm9vbGVhbikge1xyXG4gICAgY29uc3Qge2dldENsaWVudCwgb3B0aW1pc3RpYywgdGFibGV9ID0gdGhpcy5vcHRpb25zO1xyXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XHJcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShbdXNlclRhc2tdLFxyXG4gICAgICB0ID0+IHQuc3ViVGFza3MgJiYgdC5zdWJUYXNrcy5maWx0ZXIoc3QgPT4gc3QuaWQgPT09IHN1YlRhc2tJZClcclxuICAgICAgICAuZm9yRWFjaChzdCA9PiBzdC5kb25lID0gZG9uZSkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2V0V2Vla1BsYW5uZXJCb3hPcGVuKGNvdXJzZU5hbWU6IHN0cmluZywgaXNPcGVuOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBvcGVuQ291cnNlcyA9IHsgLi4udGhpcy5wZXJzaXN0ZWRTdGF0ZS5vcGVuQ291cnNlcyB9O1xyXG4gICAgaWYgKGlzT3BlbilcclxuICAgICAgb3BlbkNvdXJzZXNbY291cnNlTmFtZV0gPSB0cnVlO1xyXG4gICAgZWxzZVxyXG4gICAgICBkZWxldGUgb3BlbkNvdXJzZXNbY291cnNlTmFtZV07XHJcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVBlcnNpc3RlZFN0YXRlKHtvcGVuQ291cnNlc30pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY2hhbmdlV2Vlayh3ZWVrRGF0ZTogRGF0ZSkge1xyXG4gICAgbGV0IHBlcnNpc3RlZFN0YXRlID0gdGhpcy5wZXJzaXN0ZWRTdGF0ZTtcclxuICAgIGlmICghcGVyc2lzdGVkU3RhdGUpIHtcclxuICAgICAgcGVyc2lzdGVkU3RhdGUgPSBhd2FpdCBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlLmxvYWQodGhpcy5vcHRpb25zLnVzZXIpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV3UGVyc2lzdGVkID0gbmV3IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUocGVyc2lzdGVkU3RhdGUpO1xyXG4gICAgbmV3UGVyc2lzdGVkLndlZWtEYXRlID0gbW9tZW50KHdlZWtEYXRlKS5zdGFydE9mKCd3ZWVrJykudmFsdWVPZigpO1xyXG4gICAgbmV3UGVyc2lzdGVkLnNhdmUoKTtcclxuICAgIHRoaXMucGVyc2lzdGVkU3RhdGUgPSBuZXdQZXJzaXN0ZWQ7XHJcbiAgICBhd2FpdCB0aGlzLm1lbS5yZWZyZXNoRnJvbVNlcnZlcigpO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlKHN1YnNjcmliZXI6ICh1c2VyVGFza3M6IFVzZXJUYXNrW10sIHBlcnNpc3RlZFN0YXRlOiBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlLCB3ZWVrVGV4dHNVVDogVXNlclRhc2spID0+IHZvaWQpIHtcclxuICAgIGNvbnN0IHByb3h5U3Vic2NyaWJlciA9ICh1c2VyVGFza3M6IFVzZXJUYXNrW10pID0+IHtcclxuICAgICAgc3Vic2NyaWJlcihcclxuICAgICAgICB1c2VyVGFza3MuZmlsdGVyKHV0ID0+ICF1dC53ZWVrVGV4dHMpLFxyXG4gICAgICAgIHRoaXMucGVyc2lzdGVkU3RhdGUsXHJcbiAgICAgICAgdXNlclRhc2tzLmZpbHRlcih1dCA9PiAhIXV0LndlZWtUZXh0cylbMF0gfHwge1xyXG4gICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICAgIGRhdGVUaW1lOiB0aGlzLnBlcnNpc3RlZFN0YXRlLndlZWtEYXRlLFxyXG4gICAgICAgICAgd2Vla1RleHRzOiB7YXNzZXNzbWVudDonJywgc3RyYXRlZ3k6Jyd9LFxyXG4gICAgICAgICAgYWNsOiBbXHJcbiAgICAgICAgICAgIC8vIERlZmF1bHQgQUNMOiBMZXQgdXNlciBzZWxmIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhpcyBpdGVtOlxyXG4gICAgICAgICAgICBuZXcgRG9jdW1lbnRBY2Nlc3MoXCJlbWFpbFwiLCB0aGlzLmdldEN1cnJlbnRVc2VyKCkubWFpbCwgXCJTXCIpLFxyXG4gICAgICAgICAgICAvLyBBZGRpdGlvbmFsIEFDTDogTGV0IGVtcGxveWVlcyBvbiBzYW1lIHNjaG9vbCBoYXZlIHJlYWQgYWNjZXNzIHRvIGl0LlxyXG4gICAgICAgICAgICAvLyBUaGlzIGN1cnJlbnRseSBvbmx5IGFwcGxpZXMgdG8gdGFza3MgdGhhdCByZWZlciB0byBjb3Vyc2UgdGFza3MgKG5vdCBvd24gdGFza3MhKVxyXG4gICAgICAgICAgICBuZXcgRG9jdW1lbnRBY2Nlc3MoXCJzY2hvb2xSb2xlXCIsIGAke3RoaXMuZ2V0Q3VycmVudFVzZXIoKS5zY2hvb2x9L0VNUExPWUVFYCwgXCJSXCIpXHJcbiAgICAgICAgICBdLm1hcChhYyA9PiBhYy50b1N0cmluZygpKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHByb3h5U3Vic2NyaWJlcltcInN1YnNjcmliZXJcIl0gPSBzdWJzY3JpYmVyO1xyXG4gICAgdGhpcy5tZW0uc3Vic2NyaWJlKHByb3h5U3Vic2NyaWJlcik7XHJcbiAgfVxyXG5cclxuICB1bnN1YnNjcmliZShzdWJzY3JpYmVyOiAodXNlclRhc2tzOiBVc2VyVGFza1tdLCBwZXJzaXN0ZWRTdGF0ZTogV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSwgd2Vla1RleHRzVVQ6IFVzZXJUYXNrKSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLm1lbS5zdWJzY3JpYmVycyA9IHRoaXMubWVtLnN1YnNjcmliZXJzLmZpbHRlciAocyA9PiBzW1wic3Vic2NyaWJlclwiXSAhPT0gc3Vic2NyaWJlcik7XHJcbiAgfVxyXG4gIFxyXG59XHJcblxyXG5pZiAoIXVzZXJUYXNrc1JlcG8pIHtcclxuICB1c2VyVGFza3NSZXBvID0gZW52LnVzZXJUYXNrc1JlcG8gPSBuZXcgVXNlclRhc2tzUmVwbyhcclxuICAgICgpPT5lbnYua2VkQmFja2VuZENsaWVudCxcclxuICAgICgpPT5lbnYuY3VycmVudFVzZXIpO1xyXG4gIHVzZXJUYXNrc1JlcG8ubWVtLmVuc3VyZUhhc0RhdGEoKTtcclxufVxyXG4iLCJcclxuZXhwb3J0IGNvbnN0IEtFRF9OQU1FU1BBQ0UgPSBcIktFRFwiO1xyXG5cclxuZGVjbGFyZSB2YXIgS0VEOiBhbnk7XHJcblxyXG52YXIgcmVzdWx0ID0gdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcgPyB7fSA6IEtFRDtcclxuXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgd2luZG93W0tFRF9OQU1FU1BBQ0VdID0gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XHJcbiIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vdmFsdWVcIjtcclxudmFyIEVtaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhFbWl0dGVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRW1pdHRlcihpbml0aWFsVmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmVycyA9IF90aGlzLnN1YnNjcmliZXJzLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IF9hWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzICE9PSBvYnNlcnZlcjtcclxuICAgICAgICAgICAgICAgIH0pOyB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmVycy5wdXNoKFtvYnNlcnZlciwgc3Vic2NyaXB0aW9uXSk7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5lcnJvcilcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIF90aGlzLmVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihfdGhpcy52YWx1ZSwgdW5kZWZpbmVkLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xyXG4gICAgICAgIH0pIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJlcnMgPSBbXTtcclxuICAgICAgICBfdGhpcy52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBFbWl0dGVyLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmVycm9yID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoKCk7XHJcbiAgICB9O1xyXG4gICAgRW1pdHRlci5wcm90b3R5cGUuZGlzcGF0Y2hFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICB0aGlzLl9kaXNwYXRjaCgpO1xyXG4gICAgfTtcclxuICAgIEVtaXR0ZXIucHJvdG90eXBlLl9kaXNwYXRjaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2FbMF0sIHN1YnNjcmlwdGlvbiA9IF9hWzFdO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIoX3RoaXMudmFsdWUsIF90aGlzLmVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVyciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFbWl0dGVyO1xyXG59KFZhbHVlKSk7XHJcbmV4cG9ydCB7IEVtaXR0ZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1pdHRlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBpbml0TWFwTWV0aG9kIH0gZnJvbSBcIi4vbWFwXCI7XHJcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tIFwiLi9jb2xsZWN0aW9uXCI7XHJcbmltcG9ydCB7IEZpYmVyQ29udGV4dCB9IGZyb20gJy4vZmliZXItY29udGV4dCc7XHJcbnZhciBWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gVmFsdWUoc3Vic2NyaWJlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHN1YnNjcmliZSkgfHwgdGhpcztcclxuICAgIH1cclxuICAgIFZhbHVlLmZyb20gPSBmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgIGlmICh4LnN1YnNjcmliZSlcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAocykgeyByZXR1cm4geC5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlLmZyb20oKSBjYW4gb25seSB0YWtlIG9ic2VydmFibGVzXCIpO1xyXG4gICAgfTtcclxuICAgIFZhbHVlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXNvbHZlZCA9IGZhbHNlLCByZXN1bHQsIGVyciwgbm90aWZ5O1xyXG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY2lwdGlvbikge1xyXG4gICAgICAgICAgICByZXNvbHZlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xyXG4gICAgICAgICAgICBlcnIgPSBlcnJvcjtcclxuICAgICAgICAgICAgaWYgKGVycm9yICYmIG5vdGlmeSlcclxuICAgICAgICAgICAgICAgIG5vdGlmeShudWxsLCBlcnJvciwgc3Vic2NpcHRpb24pO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChub3RpZnkpXHJcbiAgICAgICAgICAgICAgICBub3RpZnkodmFsdWUsIG51bGwsIHN1YnNjaXB0aW9uKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAocmVzb2x2ZWQpIHtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRGaWJlciA9IEZpYmVyQ29udGV4dC5jdXJyZW50O1xyXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRGaWJlcikge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEZpYmVyIENvbnRleHRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBjdXJyZW50RmliZXIuc3Vic2NyaXB0aW9ucywgb2JzZXJ2ZXIgPSBjdXJyZW50RmliZXIub2JzZXJ2ZXI7XHJcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICBub3RpZnkgPSBvYnNlcnZlcjtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBub3RpZnkgPSBmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVmFsdWUucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgc3Vic2NpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVmFsdWUucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChmbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGZuKHZhbHVlKSlcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICB9KTsgfSk7XHJcbiAgICB9O1xyXG4gICAgVmFsdWUucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKHgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2cocHJlZml4LCB4KTtcclxuICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVmFsdWUucHJvdG90eXBlLnRvQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbihmdW5jdGlvbiAocykgeyByZXR1cm4gX3RoaXMubWFwKG1hcHBlcikuc3Vic2NyaWJlKHMpOyB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUuY29tYmluZUxhdGVzdCA9IGZ1bmN0aW9uIChvdGhlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtudWxsLCBudWxsXTtcclxuICAgICAgICAgICAgdmFyIG15U3Vic2NyaXB0aW9uLCBvdGhlclN1YnNjcmlwdGlvbjtcclxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbXlTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBvdGhlclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBteVN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoaXRlbXMsIGVycm9yLCBzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXNbMF0gPSBpdGVtcztcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbMV0gIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWVzLCBudWxsLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgb3RoZXJTdWJzY3JpcHRpb24gPSBvdGhlci5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFsdWVzWzFdID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzWzBdICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlcywgbnVsbCwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgVmFsdWUucHJvdG90eXBlLnN3aXRjaE1hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgVmFsdWUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXBwZWRTdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIHJldHVybmVkU3Vic2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWFwcGVkU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChpdGVtLCBlcnJvciwgcykge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gcztcclxuICAgICAgICAgICAgICAgIGlmIChtYXBwZWRTdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCByZXR1cm5lZFN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZU9yVmFsdWUgPSBtYXBwZXIoaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlT3JWYWx1ZSAmJiB0eXBlb2Ygb2JzZXJ2YWJsZU9yVmFsdWUuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24gPSBvYnNlcnZhYmxlT3JWYWx1ZS5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWUsIGVycm9yLCByZXR1cm5lZFN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG9ic2VydmFibGVPclZhbHVlLCBudWxsLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuZWRTdWJzY3JpcHRpb247XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFZhbHVlO1xyXG59KE9ic2VydmFibGUpKTtcclxuZXhwb3J0IHsgVmFsdWUgfTtcclxuVmFsdWUucHJvdG90eXBlLm1hcCA9IGluaXRNYXBNZXRob2QoVmFsdWUpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12YWx1ZS5qcy5tYXAiLCJ2YXIgT2JzZXJ2YWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vc3RhdGljIGdldCBbU3ltYm9sLnNwZWNpZXNdKCkgeyByZXR1cm4gdGhpczsgfVxyXG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShfc3Vic2NyaWJlKSB7XHJcbiAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gX3N1YnNjcmliZTtcclxuICAgIH1cclxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoZnVuY3Rpb24gKGl0ZW1zLCBlcnJvciwgc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKGl0ZW1zLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnIsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHsgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHsgfSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9ic2VydmFibGU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJleHBvcnQgKiBmcm9tICcuL2ZlYXR1cmVzJztcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBsYWJlbDogYW55O1xyXG4gIGNoaWxkcmVuOiBhbnk7XHJcbiAgaWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpbmRJZChub2RlKSB7XHJcbiAgY29uc3QgcmVjdWNoZWNrID0gbmV3IFNldCgpO1xyXG4gIHJldHVybiAoZnVuY3Rpb24gZmluZElkKG5vZGUpe1xyXG4gICAgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJykgcmV0dXJuIG51bGw7XHJcbiAgICBpZiAocmVjdWNoZWNrLmhhcyhub2RlKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICByZWN1Y2hlY2suYWRkKG5vZGUpO1xyXG4gICAgaWYgKG5vZGUucHJvcHMpIHtcclxuICAgICAgaWYgKG5vZGUucHJvcHMuaWQpIHJldHVybiBub2RlLnByb3BzLmlkO1xyXG4gICAgICBpZiAobm9kZS5wcm9wcy5jaGlsZHJlbikge1xyXG4gICAgICAgIHJldHVybiBmaW5kSWQobm9kZS5wcm9wcy5jaGlsZHJlbik7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKG5vZGUubGVuZ3RoKSB7XHJcbiAgICAgIGZvciAobGV0IGk9MDtpPG5vZGUubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVbaV07XHJcbiAgICAgICAgaWYgKGNoaWxkKSB7XHJcbiAgICAgICAgICBjb25zdCBjaGlsZElkID0gZmluZElkKGNoaWxkKTtcclxuICAgICAgICAgIGlmIChjaGlsZElkKSByZXR1cm4gY2hpbGRJZDtcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coY2hpbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pKG5vZGUpO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRm9ybUZpZWxkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIDw+XHJcbiAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImtjbGFiZWxcIiBodG1sRm9yPXt0aGlzLnByb3BzLmlkIHx8IGZpbmRJZCh0aGlzLnByb3BzLmNoaWxkcmVuKX0+e3RoaXMucHJvcHMubGFiZWx9PC9sYWJlbD5cclxuICAgICAgICB7dGhpcy5wcm9wcy5jaGlsZHJlbn1cclxuICAgIDwvPlxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBpbml0TWFwTWV0aG9kIH0gZnJvbSBcIi4vbWFwXCI7XHJcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vdmFsdWVcIjtcclxuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCIuL2VtaXR0ZXJcIjtcclxudmFyIENvbGxlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb2xsZWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ29sbGVjdGlvbihzdWJzY3JpYmUpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgc3Vic2NyaWJlKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuX21hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcclxuICAgICAgICB0aHJvdyBcIm1peGVkaW5cIjtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLmZyb20gPSBmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgIGlmICh4LnN1YnNjcmliZSlcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcclxuICAgICAgICAgICAgdmFyIGVtaXR0ZXJfMSA9IG5ldyBFbWl0dGVyKHgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGVtaXR0ZXJfMS5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYnNlcnZhYmxlQ29sbGVjdGlvbi5mcm9tKCkgY2FuIG9ubHkgdGFrZSBhcnJheXMgb3Igb2JzZXJ2YWJsZXNcIik7XHJcbiAgICB9O1xyXG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7IHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIG1hcHBlcihpdGVtKTsgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgaXRlbXMpOyB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIGl0ZW1zLmZpbHRlcihmaWx0ZXIpOyB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gQ29sbGVjdGlvbi5mcm9tKHRoaXMudG9WYWx1ZSgpLmNvbWJpbmVMYXRlc3Qob3RoZXIpLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIG1lID0gX2FbMF0sIG90aGVyID0gX2FbMV07XHJcbiAgICAgICAgICAgIHJldHVybiBtZS5jb25jYXQob3RoZXIpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5vcmRlckJ5ID0gZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChhcnJheSkgeyByZXR1cm4gYXJyYXkuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHZhciBhUHJvcCA9IGEgJiYgYVtwcm9wXTtcclxuICAgICAgICAgICAgdmFyIGJQcm9wID0gYiAmJiBiW3Byb3BdO1xyXG4gICAgICAgICAgICByZXR1cm4gYVByb3AgPiBiUHJvcCA/IDEgOiBhUHJvcCA8IGJQcm9wID8gLTEgOiAwO1xyXG4gICAgICAgIH0pOyB9KS50b0NvbGxlY3Rpb24oZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLnRvVmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmdyb3VwQnkgPSBmdW5jdGlvbiAocHJvcCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBydiA9IHt9O1xyXG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHJ2W2l0ZW1bcHJvcF1dIHx8IChydltpdGVtW3Byb3BdXSA9IFtdKTtcclxuICAgICAgICAgICAgICAgIGxpc3QucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBydjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyclswXTsgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbGxlY3Rpb247XHJcbn0oT2JzZXJ2YWJsZSkpO1xyXG5leHBvcnQgeyBDb2xsZWN0aW9uIH07XHJcbkNvbGxlY3Rpb24ucHJvdG90eXBlLl9tYXAgPSBpbml0TWFwTWV0aG9kKENvbGxlY3Rpb24pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsZWN0aW9uLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBvbkNsaWNrLFxyXG4gIGNsYXNzTmFtZT8sXHJcbiAgc3R5bGU/LFxyXG4gIHRpdGxlP1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFJlbW92ZUl0ZW0gPSAoeyBvbkNsaWNrLCBjbGFzc05hbWUsIHN0eWxlLCB0aXRsZSB9OiBQcm9wcykgPT5cclxuXHJcbiAgPGRpdlxyXG4gICAgdGl0bGU9e3RpdGxlIHx8IExgUmFkZXJhYH1cclxuICAgIGNsYXNzTmFtZT17XCJyZW1vdmVJdGVtIFwiICsgKGNsYXNzTmFtZSB8fCBcIlwiKX1cclxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9IHN0eWxlPXtzdHlsZX0gLz5cclxuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTTsiLCJleHBvcnQgZnVuY3Rpb24gaW5pdE1hcE1ldGhvZChjdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjdG9yKGZ1bmN0aW9uIChvYnNlcnZlcikgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihtYXBwZXIodmFsdWUpLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnIsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBTY2hvb2xNb21lbnQsIGdldFNjaG9vbE1vbWVudCwgYWRkWWVhciB9IGZyb20gJy4vc2Nob29sLW1vbWVudCc7XHJcbmltcG9ydCB7IEFjYWRlbWljWWVhciwgVGVybSB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcclxuaW1wb3J0IHtJbmplY3RlZEludGx9IGZyb20gJ3JlYWN0LWludGwnO1xyXG5cclxudHlwZSBNb21lbnQgPSBtb21lbnQuTW9tZW50O1xyXG5cclxuZnVuY3Rpb24gaXNTY2hvb2xNb21lbnQob2JqOiBEYXRlIHwgU2Nob29sTW9tZW50KTogb2JqIGlzIFNjaG9vbE1vbWVudCB7XHJcbiAgcmV0dXJuICdhY2FkZW1pY1llYXInIGluIG9iajtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNjaG9vbFRlcm0ge1xyXG4gIGFjYWRlbWljWWVhcjogQWNhZGVtaWNZZWFyO1xyXG4gIHRlcm06IFRlcm07XHJcblxyXG4gIGNvbnN0cnVjdG9yKGRhdGVPclNjaG9vbE1vbWVudDogRGF0ZSB8IFNjaG9vbE1vbWVudCkge1xyXG4gICAgY29uc3Qgc2Nob29sTW9tZW50ID0gaXNTY2hvb2xNb21lbnQoZGF0ZU9yU2Nob29sTW9tZW50KSA/XHJcbiAgICAgIGRhdGVPclNjaG9vbE1vbWVudCA6IGdldFNjaG9vbE1vbWVudChtb21lbnQoZGF0ZU9yU2Nob29sTW9tZW50KSk7XHJcbiAgICB0aGlzLmFjYWRlbWljWWVhciA9IHNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXI7XHJcbiAgICB0aGlzLnRlcm0gPSBzY2hvb2xNb21lbnQudGVybTtcclxuICB9XHJcblxyXG4gIGdldCB5ZWFyKCkge1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuYWNhZGVtaWNZZWFyXHJcbiAgICAgICAgLnNwbGl0KCcvJylbdGhpcy50ZXJtID09PSAnQVQnID8gMCA6IDFdKTtcclxuICB9XHJcblxyXG4gIG5leHRUZXJtKCkge1xyXG4gICAgcmV0dXJuIG5ldyBTY2hvb2xUZXJtKHRoaXMudGVybSA9PT0gJ0FUJyA/XHJcbiAgICAgIHtcclxuICAgICAgICB0ZXJtOiAnU1QnLFxyXG4gICAgICAgIGFjYWRlbWljWWVhcjogdGhpcy5hY2FkZW1pY1llYXJcclxuICAgICAgfSA6XHJcbiAgICAgIHtcclxuICAgICAgICB0ZXJtOiAnQVQnLFxyXG4gICAgICAgIGFjYWRlbWljWWVhcjogYWRkWWVhcih0aGlzLmFjYWRlbWljWWVhciwgMSlcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcmV2VGVybSgpIHtcclxuICAgIHJldHVybiBuZXcgU2Nob29sVGVybSh0aGlzLnRlcm0gPT09ICdBVCcgP1xyXG4gICAgICB7XHJcbiAgICAgICAgdGVybTogJ1NUJyxcclxuICAgICAgICBhY2FkZW1pY1llYXI6IGFkZFllYXIodGhpcy5hY2FkZW1pY1llYXIsIC0xKVxyXG4gICAgICB9IDpcclxuICAgICAge1xyXG4gICAgICAgIHRlcm06ICdBVCcsXHJcbiAgICAgICAgYWNhZGVtaWNZZWFyOiB0aGlzLmFjYWRlbWljWWVhclxyXG4gICAgICB9KTtcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgdG9Mb2NhbGVTdHJpbmcoaW50bDogSW5qZWN0ZWRJbnRsLCBzaG9ydFllYXI/OiBib29sZWFuKSB7XHJcbiAgICBsZXQgeWVhciA9IHRoaXMudGVybSA9PT0gJ0FUJyA/XHJcbiAgICAgIHRoaXMuYWNhZGVtaWNZZWFyLnNwbGl0KCcvJylbMF06XHJcbiAgICAgIHRoaXMuYWNhZGVtaWNZZWFyLnNwbGl0KCcvJylbMV07XHJcblxyXG4gICAgaWYgKHNob3J0WWVhcilcclxuICAgICAgeWVhciA9IHllYXIuc3Vic3RyKDIpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLnRlcm0gPT09ICdBVCcgPyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOid0ZXJtcGxhbm5lci5zZWNvbmRUZXJtJywgZGVmYXVsdE1lc3NhZ2U6J0hUIHt5ZWFyfSd9LCB7eWVhcjogeWVhcn0pIDogXHJcbiAgICBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOid0ZXJtcGxhbm5lci5maXJzdFRlcm0nLCBkZWZhdWx0TWVzc2FnZTonVlQge3llYXJ9J30sIHt5ZWFyOiB5ZWFyfSk7XHJcbiAgfVxyXG59XHJcbiIsImNvbnN0IERFRkFVTFRfQ0FDSEVfRVhQSVJBVElPTiA9IDMwICogNjAgKiAxMDAwOyAvLyAzMCBtaW51dGVzLlxyXG5cclxudHlwZSBQcm9taXNlUmV0dXJuaW5nTWV0aG9kTmFtZXM8QVBJPiA9IHtcclxuICBbTUVUSE9EIGluIGtleW9mIEFQSV06IEFQSVtNRVRIT0RdIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPGFueT4gPyBNRVRIT0QgOiBuZXZlclxyXG59XHJcblxyXG50eXBlIENvbnZlcnRNZXRob2RUb1N1c3BlbnNlPEY+ID0gRiBleHRlbmRzICguLi5hcmdzOiBpbmZlciBBKSA9PiBQcm9taXNlPGluZmVyIFI+ID9cclxuICAoLi4uYXJnczogQSkgPT4gUiA6XHJcbiAgRjtcclxuXHJcbmV4cG9ydCB0eXBlIFN1c3BlbnNlQmFzZWRBUEk8QVBJPiA9IHtcclxuICBbTUVUSE9EIGluIGtleW9mIFByb21pc2VSZXR1cm5pbmdNZXRob2ROYW1lczxBUEk+XTogQ29udmVydE1ldGhvZFRvU3VzcGVuc2U8QVBJW01FVEhPRF0+XHJcbn1cclxuXHJcbnR5cGUgT3B0aW9ucyA9IHtcclxuICBpc0FwaU1ldGhvZD86IChwcm9wOiBzdHJpbmcpPT5ib29sZWFuLFxyXG4gIGNhY2hlRXhwaXJhdGlvbj86IG51bWJlclxyXG59XHJcblxyXG5jb25zdCBkZWZhdWx0T3B0aW9uczogT3B0aW9ucyA9IHtcclxuICBpc0FwaU1ldGhvZDogZiA9PiB0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJyxcclxuICBjYWNoZUV4cGlyYXRpb246IERFRkFVTFRfQ0FDSEVfRVhQSVJBVElPTlxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VTdXNwZW5zZUFwaTxBUEk+KGFwaTogQVBJLCBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnMpOiBTdXNwZW5zZUJhc2VkQVBJPEFQST5cclxue1xyXG4gIG9wdGlvbnMgPSB7Li4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnN9O1xyXG4gIGNvbnN0IHtpc0FwaU1ldGhvZCwgY2FjaGVFeHBpcmF0aW9ufSA9IG9wdGlvbnM7XHJcblxyXG4gIGNvbnN0IHJ2OiBTdXNwZW5zZUJhc2VkQVBJPEFQST4gPSBPYmplY3QuY3JlYXRlKGFwaSBhcyBhbnkpIGFzIFN1c3BlbnNlQmFzZWRBUEk8QVBJPjtcclxuICBjb25zdCBjYWNoZToge1trZXk6IHN0cmluZ106IHt0aW1lb3V0OiBudW1iZXIsIHZhbHVlPzogYW55LCBlcnJvcj86IGFueSwgcHJvbWlzZT86IFByb21pc2U8YW55Pn19ID0ge307XHJcblxyXG4gIC8vIFdhbGsgdGhlIGluc3RhbmNlICsgcHJvdG90eXBlIGNoYWluIHRvIGdlbmVyYXRlIHN1c3BlbnNlIHZlcnNpb24gb2YgZWFjaCBwcm9taXNlIHJldHVybmluZyBtZXRob2RcclxuICBmb3IgKGxldCBwcm90byA9IGFwaTsgcHJvdG8gJiYgcHJvdG8gIT09IE9iamVjdC5wcm90b3R5cGU7IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSkge1xyXG4gICAgc3VzcGVuZGlmeShwcm90byk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdXNwZW5kaWZ5KHByb3RvKSB7XHJcbiAgICBPYmplY3Qua2V5cyhwcm90bykuZm9yRWFjaChwcm9wID0+IHtcclxuICAgICAgaWYgKCFydi5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJiBpc0FwaU1ldGhvZChwcm9wKSkge1xyXG4gICAgICAgIHJ2W3Byb3BdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICAgIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtwcm9wLCAuLi5hcmdzXSk7XHJcbiAgICAgICAgICBjb25zdCBjYWNoZWRFbnRyeSA9IGNhY2hlW2tleV07XHJcbiAgICAgICAgICBpZiAoY2FjaGVkRW50cnkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVkRW50cnkucHJvbWlzZSkgdGhyb3cgY2FjaGVkRW50cnkucHJvbWlzZTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZEVudHJ5LmVycm9yKSB0aHJvdyBjYWNoZWRFbnRyeS5lcnJvcjtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZEVudHJ5LnRpbWVvdXQgPiBEYXRlLm5vdygpKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZEVudHJ5LnZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9taXNlID0gcHJvdG9bcHJvcF0uYXBwbHkoYXBpLCBhcmdzKS50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgY2FjaGVba2V5XSA9IHt0aW1lb3V0OiBEYXRlLm5vdygpICsgY2FjaGVFeHBpcmF0aW9uLCB2YWx1ZTogcmVzdWx0fTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgZXJyb3J9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY2FjaGVba2V5XSA9IHt0aW1lb3V0OiBEYXRlLm5vdygpICsgY2FjaGVFeHBpcmF0aW9uLCBwcm9taXNlfTtcclxuICAgICAgICAgICAgdGhyb3cgcHJvbWlzZTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvci50aGVuKSB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgY2FjaGVba2V5XSA9IHt0aW1lb3V0OiBEYXRlLm5vdygpICsgY2FjaGVFeHBpcmF0aW9uLCBlcnJvcn07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBhcyBhbnk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHJ2O1xyXG59XHJcbiIsImltcG9ydCB7IEVEU0NvdXJzZSwgRURTQXNzZXNzbWVudCwgRURTU3R1ZHlQbGFuLCBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eSwgRURTU3R1ZGVudCwgRURTVHVpdGlvbkdyb3VwLCBFRFNUdWl0aW9uU3R1ZGVudCwgRURTVGVhY2hlciwgTW9ja0VEU0FjYWRlbWljWWVhciwgTW9ja0VEU0RhdGVSYW5nZSB9IGZyb20gJy4uL2NvbnRyYWN0cy9lZHMnO1xyXG5pbXBvcnQgeyBSZXN0Q2xpZW50IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBJc29tb3JwaGljRW52LCBCZWFyZXJQcm92aWRlciwgSHR0cEVycm9yIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBTY2hvb2xNb21lbnQgfSBmcm9tICcuLi91dGlscy9zY2hvb2wtbW9tZW50JztcclxuaW1wb3J0IHsgU2Nob29sVGVybSB9IGZyb20gJy4uL3V0aWxzL3NjaG9vbC10ZXJtJztcclxuaW1wb3J0IHsgZGF0ZVRpbWVSZXZpdmVyLCBMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgbW9ja0pzb25GaWxlIGZyb20gJy4vbW9jay9tb2NrLWVkcy1kYXRhLmpzb24nO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IFN1c3BlbnNlQmFzZWRBUEksIG1ha2VTdXNwZW5zZUFwaSB9IGZyb20gJy4uL3V0aWxzL21ha2Utc3VzcGVuc2UtYXBpJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFZHNDbGllbnQge1xyXG4gIGh0dHA6IFJlc3RDbGllbnQ7XHJcbiAgdXNlckVtYWlsR2V0dGVyOiAoKT0+c3RyaW5nO1xyXG4gIHN1c3BlbnNlOiBTdXNwZW5zZUJhc2VkQVBJPEVkc0NsaWVudD47XHJcblxyXG4gIGNvbnN0cnVjdG9yIChcclxuICAgIGlzb21vcnBoaWM6IElzb21vcnBoaWNFbnYsXHJcbiAgICBiYXNlVXJsOiBzdHJpbmcsXHJcbiAgICBiZWFyZXJQcm92aWRlcjogQmVhcmVyUHJvdmlkZXIsXHJcbiAgICB1c2VyRW1haWxHZXR0ZXI6ICgpPT5zdHJpbmdcclxuICApIHtcclxuICAgIHRoaXMuaHR0cCA9IG5ldyBSZXN0Q2xpZW50IChpc29tb3JwaGljLCBiYXNlVXJsLCB7YmVhcmVyUHJvdmlkZXJ9KTtcclxuICAgIHRoaXMudXNlckVtYWlsR2V0dGVyID0gdXNlckVtYWlsR2V0dGVyO1xyXG4gICAgY29uc3QgaXNBcGlNZXRob2QgPSBtID0+XHJcbiAgICAgIHR5cGVvZiB0aGlzW21dID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgIG0gIT09ICdjb25zdHJ1Y3RvcicgJiYgLy8gU2luY2UgbWFrZVN1c3BlbnNlQXBpKCkgd2Fsa3MgcHJvdG90eXBlIGNoYWluXHJcbiAgICAgIG0gIT09ICdwcml2YXRpemluZ0NhY2hlQnVzdCcgJiZcclxuICAgICAgbSAhPT0gJ3VzZXJFbWFpbEdldHRlcicgLy8gTGlzdCBub24tQVBJIG1ldGhvZHMgaGVyZS4uLlxyXG4gICAgICA7XHJcblxyXG4gICAgT2JqZWN0LmtleXMoRWRzQ2xpZW50LnByb3RvdHlwZSkuZm9yRWFjaChtZXRob2QgPT4ge1xyXG4gICAgICBpZiAoaXNBcGlNZXRob2QobWV0aG9kKSkge1xyXG4gICAgICAgIHRoaXNbbWV0aG9kXSA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzW21ldGhvZF0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3VzcGVuc2UgPSBtYWtlU3VzcGVuc2VBcGkodGhpcywge2lzQXBpTWV0aG9kfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByaXZhdGl6aW5nQ2FjaGVCdXN0KCkge1xyXG4gICAgcmV0dXJuIHt1c2VyOiB0aGlzLnVzZXJFbWFpbEdldHRlcigpfTtcclxuICB9XHJcblxyXG4vKipcclxuICAgKiBSZXRyaWV2ZSBhY3RpdmUgY291cnNlcyBmb3IgY3VycmVudCBsb2dnZWQgaW4gc3R1ZGVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb3Vyc2VDb2RlIFNob3J0LW5hbWUgb2YgdGhlIGNvdXJzZS4gT3B0aW9uYWwuXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0QWN0aXZlQ291cnNlcyhxOiB7Y291cnNlQ29kZT86IHN0cmluZywgcGVyaW9kTmFtZTogc3RyaW5nfSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xyXG4gICAgICBpZiAocSkge1xyXG4gICAgICAgIGlmIChxLmNvdXJzZUNvZGUpIHF1ZXJ5LkNvdXJzZUNvZGUgPSBxLmNvdXJzZUNvZGU7XHJcbiAgICAgICAgaWYgKHEucGVyaW9kTmFtZSkgcXVlcnkuUGVyaW9kTmFtZSA9IHEucGVyaW9kTmFtZTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGFjdGl2ZWNvdXJzZXNcIiwgcXVlcnkpO1xyXG4gICAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgICByZXR1cm4ganNvbi5jb3Vyc2VzIGFzIEVEU0NvdXJzZVtdO1xyXG4gICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZyb20gRURTOiBcIiArIGV4KTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKExgS3VuZGUgdHl2w6RyciBpbnRlIGxhZGRhIHRlcm1pbnNtw6VsIGVsbGVyIGF2a2xhcmFkZSBzdGVnIGZyw6VuIEVEUy4gRsO2cnPDtmsgaWdlbiBzZW5hcmUuLi5gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlIGxhdGVzdCBhc3Nlc3NtZW50cyBmb3IgY3VycmVudCBsb2dnZWQgaW4gdXNlci5cclxuICAgKiBcclxuICAgKiBAcGFyYW0gbGltaXQgT3B0aW9uYWwgbGltaXRcclxuICAgKi9cclxuICBhc3luYyBnZXRMYXRlc3RBc3Nlc3NtZW50cyhsaW1pdD86IG51bWJlcikge1xyXG4gICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xyXG4gICAgaWYgKCFpc05hTihsaW1pdCkpIHF1ZXJ5LkNvdW50ID0gbGltaXQ7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGFzc2Vzc21lbnRzXCIsIHF1ZXJ5KTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uYXNzZXNzbWVudHMgYXMgRURTQXNzZXNzbWVudFtdOyAgICBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlIHN0dWR5cGxhbnMgZm9yIGN1cnJlbnQgbG9nZ2VkLWluIHVzZXJcclxuICAgKi9cclxuICBhc3luYyBnZXRTdHVkZW50R29hbHMoKSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGdvYWxzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XHJcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgIHJldHVybiBqc29uLnN0dWRlbnRHb2FscyBhcyBFRFNTdHVkeVBsYW5bXTsgICAgXHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRTdHVkZW50RnV0dXJlQWJpbGl0aWVzKCkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRGdXR1cmVBYmlsaXRpZXNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudEZ1dHVyZUFiaWxpdGllcyBhcyBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eVtdO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMoKSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwidGVhY2hlcnR1dG9yc3R1ZGVudHNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudHMgYXMgRURTU3R1ZGVudFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0U2Nob29sVHVpdGlvbkdyb3VwcygpXHJcbiAgICogXHJcbiAgICogUmV0dXJuIHR1aXRpb25ncm91cHMgZm9yIHNjaG9vbFxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBzY2hvb2xOYW1lIC0gbmFtZSBvZiBzY2hvb2xcclxuICAgKiBAcGFyYW0gY291cnNlQ29kZSAtIFNrb2x2ZXJrZXRzIGNvZGUgZm9yIGNvdXJzZVxyXG4gICAqL1xyXG4gIGFzeW5jIGdldFNjaG9vbFR1aXRpb25Hcm91cHMocToge3NjaG9vbE5hbWU6IHN0cmluZywgY291cnNlQ29kZTogc3RyaW5nfSkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcIlNjaG9vbFR1aXRpb25Hcm91cHNcIiwgey4uLnRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSwgLi4ucX0pO1xyXG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XHJcbiAgICByZXR1cm4ganNvbi5zY2hvb2xUdWl0aW9uR3JvdXBzIGFzIEVEU1R1aXRpb25Hcm91cFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0VHVpdGlvbkdyb3VwU3R1ZGVudHMoKVxyXG4gICAqIFxyXG4gICAqIFJldHVybiBuYW1lIGFuZCBtYWlsYWRyZXNzZXMgZm9yIHR1dGl0aW9uZ3JvdXBzIGluIHNjaG9vbHNcclxuICAgKiBcclxuICAgKiBAcGFyYW0gc2Nob29sTmFtZSAtIG5hbWUgb2Ygc2Nob29sXHJcbiAgICogQHBhcmFtIHR1aXRpb25Hcm91cE5hbWUgLSB0dWl0aW9uIGdydW9wIG5hbWUgaW4gRURTXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0VHVpdGlvbkdyb3VwU3R1ZGVudHMocToge3NjaG9vbE5hbWU6IHN0cmluZywgdHVpdGlvbkdyb3VwTmFtZTogc3RyaW5nfSkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcIlR1aXRpb25Hcm91cFN0dWRlbnRzXCIsIHsuLi50aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCksIC4uLnF9KTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24udHVpdGlvbkdyb3VwU3R1ZGVudHMgYXMgRURTVHVpdGlvblN0dWRlbnRbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldFNjaG9vbFRlYWNoZXJzKClcclxuICAgKiBcclxuICAgKiBSZXR1cm4gbmFtZSBhbmQgbWFpbGFkcmVzc2VzIGZvciB0dXRpdGlvbmdyb3VwcyBpbiBzY2hvb2xzXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHNjaG9vbE5hbWUgLSBuYW1lIG9mIHNjaG9vbFxyXG4gICAqL1xyXG4gIGFzeW5jIGdldFNjaG9vbFRlYWNoZXJzKHE6IHtzY2hvb2xOYW1lOiBzdHJpbmd9KSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwiU2Nob29sVGVhY2hlcnNcIiwgey4uLnRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSwgLi4ucX0pO1xyXG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XHJcbiAgICByZXR1cm4ganNvbi5zY2hvb2xUZWFjaGVycyBhcyBFRFNUZWFjaGVyW107XHJcbiAgfVxyXG4gIC8vIHdlIGFzc3VtZSB0aGF0IHRoZSBFRFMgd2lsbCByZXR1cm4gdGhlIGN1cnJlbnQgYWNhZGVtaWMgeWVhciBkYXRlcyBkZXRlcm1pbmVkIGJ5IHRoZSBjdXJyZW50IGRhdGVcclxuICBhc3luYyBnZXRBY2FkZW1pY1llYXJUZXJtcyhzY2hvb2xMb2NhbGU6IHN0cmluZywgZGF0ZTogRGF0ZSkge1xyXG4gICAgLy8gbW9jayBkYXRhXHJcbiAgICBzd2l0Y2ggKHNjaG9vbExvY2FsZSkge1xyXG4gICAgICBjYXNlICdlbl9zaW4nOlxyXG4gICAgICByZXR1cm4gbW9ja0pzb25GaWxlLlNvdXRoSW5kaWEuZmlsdGVyKGYgPT4gbW9tZW50KGRhdGUpLmlzU2FtZU9yQWZ0ZXIoZi5maXJzdFRlcm0uc3RhcnREYXRlKSAmJiBtb21lbnQoZGF0ZSkuaXNTYW1lT3JCZWZvcmUoZi5zZWNvbmRUZXJtLmVuZERhdGUpKVswXSBhcyBNb2NrRURTQWNhZGVtaWNZZWFyO1xyXG4gICAgICBjYXNlICdlbl9uaW4nOlxyXG4gICAgICByZXR1cm4gbW9ja0pzb25GaWxlLk5vcnRoSW5kaWEuZmlsdGVyKGYgPT4gbW9tZW50KGRhdGUpLmlzU2FtZU9yQWZ0ZXIoZi5maXJzdFRlcm0uc3RhcnREYXRlKSAmJiBtb21lbnQoZGF0ZSkuaXNTYW1lT3JCZWZvcmUoZi5zZWNvbmRUZXJtLmVuZERhdGUpKVswXSBhcyBNb2NrRURTQWNhZGVtaWNZZWFyO1xyXG4gICAgICBjYXNlICdzdic6XHJcbiAgICAgIHtcclxuICAgICAgdmFyIGhvbGlkYXlzID0gW10gYXMgTW9ja0VEU0RhdGVSYW5nZVtdO1xyXG4gICAgICB2YXIgYWRkWWVhciA9IGRhdGUuZ2V0TW9udGgoKSA+PSA2O1xyXG4gICAgICBcclxuICAgICAgdmFyIGZpcnN0VGVybVllYXIgPSBhZGRZZWFyID8gZGF0ZS5nZXRGdWxsWWVhcigpIDogZGF0ZS5nZXRGdWxsWWVhcigpIC0gMTtcclxuICAgICAgdmFyIHNlY29uZFRlcm1ZZWFyID0gYWRkWWVhciA/IGRhdGUuZ2V0RnVsbFllYXIoKSArIDEgOiBkYXRlLmdldEZ1bGxZZWFyKCk7XHJcblxyXG4gICAgICAvL1RoZSBzdGFydCBkYXRlIGNhbiBiZSBpbiB0aGUgbGFzdCB3ZWVrIG9mIHRoZSBwcmV2aW91cyB5ZWFyXHJcbiAgICAgICB2YXIgZmlyc3RUZXJtWWVhck1vbWVudCA9IG1vbWVudChmaXJzdFRlcm1ZZWFyLnRvU3RyaW5nKCksIFwiWVlZWVwiKTtcclxuICAgICAgIHZhciBzZWNvbmRUZXJtWWVhck1vbWVudCA9IG1vbWVudChzZWNvbmRUZXJtWWVhci50b1N0cmluZygpLCBcIllZWVlcIik7XHJcblxyXG4gICAgICAgaWYoZmlyc3RUZXJtWWVhck1vbWVudC53ZWVrKCkgIT0gMSlcclxuICAgICAgIHtcclxuICAgICAgICBmaXJzdFRlcm1ZZWFyTW9tZW50ID0gZmlyc3RUZXJtWWVhck1vbWVudC5jbG9uZSgpLmFkZCgxLCAnd2VlaycpO1xyXG4gICAgICAgfVxyXG5cclxuICAgICAgICBpZihzZWNvbmRUZXJtWWVhck1vbWVudC53ZWVrKCkgIT0gMSlcclxuICAgICAgIHtcclxuICAgICAgICBzZWNvbmRUZXJtWWVhck1vbWVudCA9IHNlY29uZFRlcm1ZZWFyTW9tZW50LmNsb25lKCkuYWRkKDEsICd3ZWVrJyk7XHJcbiAgICAgICB9XHJcblxyXG4gICAgICB2YXIgc3RhcnRGaXJzdFRlcm1EYXRlID0gbW9tZW50KGZpcnN0VGVybVllYXJNb21lbnQuY2xvbmUoKSkud2VlaygzMikuc3RhcnRPZignd2VlaycpO1xyXG4gICAgICB2YXIgZW5kRmlyc3RUZXJtRGF0ZSA9IG1vbWVudChmaXJzdFRlcm1ZZWFyTW9tZW50LmNsb25lKCkpLndlZWsoNTEpLmVuZE9mKCd3ZWVrJyk7XHJcblxyXG4gICAgICB2YXIgc3RhcnRTZWNvbmRUZXJtRGF0ZSA9IG1vbWVudChzZWNvbmRUZXJtWWVhck1vbWVudC5jbG9uZSgpKTsgLy8gZG9uJ3Qgc2V0IGFzIHRoZSBzdGFydCBvZiB0aGUgd2VlayBiZWNhdXNlIGl0IGNhbiBiZSBpbiB0aGUgcHJldmlvdXMgeWVhclxyXG4gICAgICB2YXIgZW5kU2Vjb25kVGVybURhdGUgPSBtb21lbnQoc2Vjb25kVGVybVllYXJNb21lbnQuY2xvbmUoKSkud2VlaygyNSkuZW5kT2YoJ3dlZWsnKTtcclxuXHJcbiAgICAgIGNvbnN0IGZpcnN0VGVybSA9IHtzdGFydERhdGU6IG5ldyBEYXRlKGZpcnN0VGVybVllYXIsIHN0YXJ0Rmlyc3RUZXJtRGF0ZS5tb250aCgpLCBzdGFydEZpcnN0VGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKSwgZW5kRGF0ZTogbmV3IERhdGUoZmlyc3RUZXJtWWVhciwgZW5kRmlyc3RUZXJtRGF0ZS5tb250aCgpLCBlbmRGaXJzdFRlcm1EYXRlLmRhdGUoKSkudG9EYXRlU3RyaW5nKCl9O1xyXG4gICAgICBjb25zdCBzZWNvbmRUZXJtID0ge3N0YXJ0RGF0ZTogbmV3IERhdGUoc2Vjb25kVGVybVllYXIsIHN0YXJ0U2Vjb25kVGVybURhdGUubW9udGgoKSwgc3RhcnRTZWNvbmRUZXJtRGF0ZS5kYXRlKCkpLnRvRGF0ZVN0cmluZygpLCBlbmREYXRlOiBuZXcgRGF0ZShzZWNvbmRUZXJtWWVhciwgZW5kU2Vjb25kVGVybURhdGUubW9udGgoKSwgZW5kU2Vjb25kVGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKX07XHJcbiAgICAgIHJldHVybiB7Zmlyc3RUZXJtLCBzZWNvbmRUZXJtLCBob2xpZGF5c307XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFRFNQZXJpb2Qge1xyXG4gIHBlcmlvZDogc3RyaW5nO1xyXG4gIHRlcm06ICdBVCcgfCAnU1QnO1xyXG4gIHllYXI6IG51bWJlcjtcclxuICBjb25zdHJ1Y3RvciAocGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtOiBzdHJpbmcgfCBTY2hvb2xNb21lbnQpIHtcclxuICAgIGlmICh0eXBlb2YgcGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZFN0cmluZ09yU2Nob29sVGVybTtcclxuICAgICAgdGhpcy50ZXJtID0gdGhpcy5wZXJpb2Quc3RhcnRzV2l0aCgnSFQnKSA/ICdBVCcgOiAnU1QnO1xyXG4gICAgICB0aGlzLnllYXIgPSBwYXJzZUludCh0aGlzLnBlcmlvZC5zdWJzdHIoMikpO1xyXG4gICAgICBpZiAoaXNOYU4odGhpcy55ZWFyKSkgdGhyb3cgbmV3IEVycm9yIChgSW52YWxpZCBwZXJpb2Q6ICR7dGhpcy5wZXJpb2R9YCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBzY2hvb2xUZXJtID0gbmV3IFNjaG9vbFRlcm0ocGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtKTtcclxuICAgICAgdGhpcy5wZXJpb2QgPSAoc2Nob29sVGVybS50ZXJtID09PSAnQVQnID8gXCJIVFwiIDogXCJWVFwiKSArIHNjaG9vbFRlcm0ueWVhcjtcclxuICAgICAgdGhpcy50ZXJtID0gc2Nob29sVGVybS50ZXJtO1xyXG4gICAgICB0aGlzLnllYXIgPSBzY2hvb2xUZXJtLnllYXI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXQgc2Nob29sVGVybSAoKSA6IFNjaG9vbFRlcm0ge1xyXG4gICAgcmV0dXJuIG5ldyBTY2hvb2xUZXJtKHtcclxuICAgICAgYWNhZGVtaWNZZWFyOiB0aGlzLnRlcm0gPT09ICdBVCcgP1xyXG4gICAgICAgIGAke3RoaXMueWVhcn0vJHt0aGlzLnllYXIgKyAxfWAgOlxyXG4gICAgICAgIGAke3RoaXMueWVhci0xfS8ke3RoaXMueWVhcn1gLFxyXG4gICAgICB0ZXJtOiB0aGlzLnRlcm1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5wZXJpb2Q7XHJcbiAgfVxyXG5cclxuICB2YWx1ZU9mKCkge1xyXG4gICAgcmV0dXJuIHRoaXMueWVhciArIFwiOlwiICsgKHRoaXMudGVybSA9PT0gJ1NUJyA/IFwiMVwiIDogXCIyXCIpO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnNvbkRhdGVfb2xkIChqc29uRGF0ZVN0cjogc3RyaW5nKSA6IERhdGUge1xyXG4gIGNvbnN0IGRhdGUgPSBkYXRlVGltZVJldml2ZXIoXCJcIiwganNvbkRhdGVTdHIpO1xyXG4gIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBKU09OIGRhdGUgc3RyaW5nOiBcIiArIGpzb25EYXRlU3RyKTtcclxuICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gYXZvaWRTaW11bHRhbm91c0NhbGxzPFQsQT4obWV0aG9kOiAoLi4uYXJnczpBW10pPT5Qcm9taXNlPFQ+KSA6ICguLi5hcmdzOkFbXSk9PlByb21pc2U8VD4ge1xyXG4gIGxldCBvbmdvaW5nUHJvbWlzZXM6IHtbYXJnc0pzb246IHN0cmluZ106IFByb21pc2U8VD59ID0ge307XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgYXJnc0pzb24gPSBKU09OLnN0cmluZ2lmeShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xyXG4gICAgaWYgKCFvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dKSB7XHJcbiAgICAgIG9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl0gPSBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKHJlc3VsdD0+e1xyXG4gICAgICAgIGRlbGV0ZSBvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl07XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRm9ybUZpZWxkIH0gZnJvbSAnLi9mb3JtLWZpZWxkJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgbGFiZWw6IGFueTtcclxuICBpZDogc3RyaW5nO1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XHJcbiAgYXV0b0ZvY3VzPzogYm9vbGVhbjtcclxuICByb3dzPzogbnVtYmVyO1xyXG4gIGNoaWxkcmVuPztcclxuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUZXh0QXJlYUZvcm1GaWVsZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxGb3JtRmllbGQgbGFiZWw9e3RoaXMucHJvcHMubGFiZWx9IGlkPXt0aGlzLnByb3BzLmlkfT5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDx0ZXh0YXJlYSBhdXRvRm9jdXM9e3RoaXMucHJvcHMuYXV0b0ZvY3VzfSBpZD17dGhpcy5wcm9wcy5pZH0gY29scz17MzV9IHJvd3M9e3RoaXMucHJvcHMucm93cyB8fCA1fSB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5wcm9wcy5vbkNoYW5nZShldi50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlaG9sZGVyfSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICB7ISF0aGlzLnByb3BzLmNoaWxkcmVuICYmIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cclxuICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvRm9ybUZpZWxkPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbiIsInZhciBzdGFjayA9IFtdO1xyXG52YXIgY3VycmVudEZpYmVyID0gbnVsbDtcclxudmFyIHByb3ZpZGVycyA9IFtmdW5jdGlvbiAoKSB7IHJldHVybiBjdXJyZW50RmliZXI7IH1dO1xyXG5mdW5jdGlvbiBwdXNoRmliZXIoZmliZXIpIHtcclxuICAgIHN0YWNrLnB1c2goY3VycmVudEZpYmVyKTtcclxuICAgIGN1cnJlbnRGaWJlciA9IGZpYmVyO1xyXG59XHJcbmZ1bmN0aW9uIHBvcEZpYmVyKCkge1xyXG4gICAgY3VycmVudEZpYmVyID0gc3RhY2sucG9wKCk7XHJcbn1cclxuZXhwb3J0IHZhciBGaWJlckNvbnRleHQgPSB7XHJcbiAgICBnZXQgY3VycmVudCgpIHsgcmV0dXJuIGN1cnJlbnRGaWJlcjsgfSxcclxuICAgIC8qcnVuOiBmdW5jdGlvbiByZXJ1bjxSPihmaWJlcjogRmliZXIsIGZuOiAoKT0+Uik6IFIgfCBQcm9taXNlPFI+IHtcclxuICAgICAgcHVzaEZpYmVyKGZpYmVyKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZuKCkpO1xyXG4gICAgICB9IGNhdGNoIChwKSB7XHJcbiAgICAgICAgaWYgKHAgJiYgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgcmV0dXJuIHAudGhlbigoKT0+cmVydW4oZmliZXIsIGZuKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgcG9wRmliZXIoKTtcclxuICAgICAgfVxyXG4gICAgfSwqL1xyXG4gICAgYWRkUHJvdmlkZXI6IGZ1bmN0aW9uIChnZXRDdXJyZW50RmliZXIpIHtcclxuICAgICAgICBwcm92aWRlcnMucHVzaChnZXRDdXJyZW50RmliZXIpO1xyXG4gICAgICAgIHNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzKCk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlUHJvdmlkZXI6IGZ1bmN0aW9uIChnZXRDdXJyZW50RmliZXIpIHtcclxuICAgICAgICBwcm92aWRlcnMgPSBwcm92aWRlcnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwICE9PSBnZXRDdXJyZW50RmliZXI7IH0pO1xyXG4gICAgICAgIHNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzKCk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzKCkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpYmVyQ29udGV4dCwgXCJjdXJyZW50XCIsIHtcclxuICAgICAgICBnZXQ6IHByb3ZpZGVycy5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHAoKSB8fCBjKCk7IH07IH0pLFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJVc2UgRmliZXJDb250ZXh0LnB1c2goKSB0byBjaGFuZ2UgY3VycmVudCBmaWJlclwiKTsgfVxyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmliZXItY29udGV4dC5qcy5tYXAiLCJpbXBvcnQgbW9tZW50LCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBLRURXZWVrICh5ZWFyOiBudW1iZXIsIHdlZWs6IG51bWJlcikge1xyXG4gIGNvbnN0IG0gPSBtb21lbnQobmV3IERhdGUoeWVhciwgMSwgMSkpLndlZWsod2Vlayk7XHJcbiAgY29uc3QgcmVzID0ge1xyXG4gICAgeWVhcixcclxuICAgIHdlZWssXHJcbiAgICBub3RCZWZvcmU6IG0uY2xvbmUoKS5zdGFydE9mKCd3ZWVrJykuYWRkKC0yLCAnZGF5cycpLnRvRGF0ZSgpLmdldFRpbWUoKSxcclxuICAgIG5vdEFmdGVyOiBtLmNsb25lKCkuc3RhcnRPZignd2VlaycpLmFkZCg1LCAnZGF5cycpLnRvRGF0ZSgpLmdldFRpbWUoKVxyXG4gIH07XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFkanVzdGVkV2VlayhtOiBNb21lbnQpIHtcclxuICBjb25zdCBjbG9uZSA9IG0uY2xvbmUoKTtcclxuICByZXR1cm4gbS53ZWVrZGF5KCkgPj0gNSA/IC8vIEzDtnJkYWcgMDA6MDAgLyBTw7ZuZGFnIDAwOjAwP1xyXG4gICAgICBtLndlZWsoKSArIDEgOiAvLyBUaWxsaMO2ciBuw6RzdGEgdmVja2FcclxuICAgICAgbS53ZWVrKCk7XHJcbn1cclxuXHJcbi8qZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtMaW1pdHMgKG06IE1vbWVudCkge1xyXG4gIGNvbnN0IGNsb25lZFN3ZWRpc2ggPSBtLmNsb25lKCkubG9jYWxlKCdzdicpO1xyXG4gIGNvbnN0IGxpbWl0cyA9IHtcclxuICAgIG5vdEJlZm9yZTogY2xvbmVkU3dlZGlzaC5zdGFydE9mKCd3ZWVrJykuYWRkKC0yLCAnZGF5cycpLFxyXG4gICAgbm90QWZ0ZXI6IGNsb25lZFN3ZWRpc2guc3RhcnRPZignd2VlaycpLmFkZCg1LCAnZGF5cycpXHJcbiAgfTtcclxufVxyXG4qL1xyXG4iLCJpbXBvcnQgZXhlYyBmcm9tICcuL2V4ZWMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGJvbGQ6IHtcclxuICAgIGljb246ICc8Yj5GPC9iPicsXHJcbiAgICB0aXRsZTogJ0ZldHN0aWwnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdib2xkJylcclxuICB9LFxyXG4gIGl0YWxpYzoge1xyXG4gICAgaWNvbjogJzxpPks8L2k+JyxcclxuICAgIHRpdGxlOiAnS3Vyc2l2JyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaXRhbGljJylcclxuICB9LFxyXG4gIHVuZGVybGluZToge1xyXG4gICAgaWNvbjogJzx1PlU8L3U+JyxcclxuICAgIHRpdGxlOiAnVW5kZXJzdHJ1a2VuJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygndW5kZXJsaW5lJylcclxuICB9LFxyXG4gIHN0cmlrZXRocm91Z2g6IHtcclxuICAgIGljb246ICc8c3RyaWtlPlM8L3N0cmlrZT4nLFxyXG4gICAgdGl0bGU6ICdTdHJ1a2VuJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnc3RyaWtlVGhyb3VnaCcpXHJcbiAgfSxcclxuICBoZWFkaW5nMToge1xyXG4gICAgaWNvbjogJzxiPkg8c3ViPjE8L3N1Yj48L2I+JyxcclxuICAgIHRpdGxlOiAnUnVicmlrIDEnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDE+JylcclxuICB9LFxyXG4gIGhlYWRpbmcyOiB7XHJcbiAgICBpY29uOiAnPGI+SDxzdWI+Mjwvc3ViPjwvYj4nLFxyXG4gICAgdGl0bGU6ICdSdWJyaWsgMicsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMj4nKVxyXG4gIH0sXHJcbiAgaGVhZGluZzM6IHtcclxuICAgIGljb246ICc8Yj5IPHN1Yj4zPC9zdWI+PC9iPicsXHJcbiAgICB0aXRsZTogJ1J1YnJpayAzJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgzPicpXHJcbiAgfSxcclxuICBwYXJhZ3JhcGg6IHtcclxuICAgIGljb246ICcmIzE4MjsnLFxyXG4gICAgdGl0bGU6ICdQYXJhZ3JhZicsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxQPicpXHJcbiAgfSxcclxuICBxdW90ZToge1xyXG4gICAgaWNvbjogJyYjODIyMDsgJiM4MjIxOycsXHJcbiAgICB0aXRsZTogJ0NpdGF0JyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEJMT0NLUVVPVEU+JylcclxuICB9LFxyXG4gIG9saXN0OiB7XHJcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1saXN0LW9sXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXHJcbiAgICB0aXRsZTogJ09yZG5hZCBsaXN0YScsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydE9yZGVyZWRMaXN0JylcclxuICB9LFxyXG4gIHVsaXN0OiB7XHJcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1saXN0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXHJcbiAgICB0aXRsZTogJ1B1bmt0bGlzdGEnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRVbm9yZGVyZWRMaXN0JylcclxuICB9LFxyXG4gIGNvZGU6IHtcclxuICAgIGljb246ICcmbHQ7LyZndDsnLFxyXG4gICAgdGl0bGU6ICdQcm9ncmFta29kJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFBSRT4nKVxyXG4gIH0sXHJcbiAgbGluZToge1xyXG4gICAgaWNvbjogJyYjODIxMzsnLFxyXG4gICAgdGl0bGU6ICdWw6VncsOkdCBsaW5qZScsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydEhvcml6b250YWxSdWxlJylcclxuICB9LFxyXG4gIGxpbms6IHtcclxuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLWxpbmtcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcclxuICAgIHRpdGxlOiAnSW5mb2dhIGzDpG5rJyxcclxuICAgIHJlc3VsdDogKCkgPT4ge1xyXG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KCdBbmdlIGzDpG5rZW5zIFVSTCcpXHJcbiAgICAgIGlmICh1cmwpIGV4ZWMoJ2NyZWF0ZUxpbmsnLCB1cmwpXHJcbiAgICB9XHJcbiAgfSxcclxuICBpbWFnZToge1xyXG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXHJcbiAgICB0aXRsZTogJ0luZm9nYSBiaWxkJyxcclxuICAgIHByb21wdE1zZzogJ0FuZ2UgYmlsZGVucyBVUkwnLFxyXG4gICAgcmVzdWx0OiAoZXYsIGNvbXBvbmVudCkgPT4ge1xyXG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KHRoaXMucHJvbXB0TXNnKVxyXG4gICAgICBpZiAodXJsKSB7XHJcbiAgICAgICAgLy9leGVjKCdpbnNlcnRJbWFnZScsIHVybCk7XHJcbiAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcclxuICAgICAgICBpbWcuc3JjID0gdXJsO1xyXG4gICAgICAgIGltZy50YWJJbmRleCA9IDE7XHJcbiAgICAgICAgaW5zZXJ0RWxlbWVudChpbWcpO1xyXG4gICAgICAgIGltZy5vbmZvY3VzID0gY29tcG9uZW50Lm9uRm9jdXM7XHJcbiAgICAgICAgaW1nLm9uYmx1ciA9IGNvbXBvbmVudC5vbkJsdXI7XHJcbiAgICAgICAgY29tcG9uZW50LnByb3BzLm9uQ2hhbmdlKGNvbXBvbmVudC5jb250ZW50RGl2LmlubmVySFRNTCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluc2VydEVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcclxuICAgIHZhciBzZWwsIHJhbmdlO1xyXG4gICAgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24gJiYgKHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKSkucmFuZ2VDb3VudCkge1xyXG4gICAgICAgIHJhbmdlID0gc2VsLmdldFJhbmdlQXQoMCk7XHJcbiAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcbiAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShlbGVtZW50KTtcclxuICAgICAgICAvLyBNb3ZlIHRoZSBjYXJldCBpbW1lZGlhdGVseSBhZnRlciB0aGUgaW5zZXJ0ZWQgc3BhblxyXG4gICAgICAgIHJhbmdlLnNldFN0YXJ0QWZ0ZXIoZWxlbWVudCk7XHJcbiAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcbiAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUmVwbywgUmVwb0NvbW11bmljYXRvcn0gZnJvbSAnLi9yZXBvJztcclxuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCwgTGlzdE9wdGlvbnMsIEJhdGNoUnVubmVyLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBEb2N1bWVudH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBLZWRSZXBvT3B0aW9uczxUIGV4dGVuZHMgRG9jdW1lbnQ+IHtcclxuICBnZXRDbGllbnQ6ICgpPT5LZWRCYWNrZW5kQ2xpZW50O1xyXG4gIGdldFF1ZXJ5T3B0aW9uczogKCk9PlByb21pc2U8TGlzdE9wdGlvbnM+O1xyXG4gIG9wdGltaXN0aWM6IGJvb2xlYW47XHJcbiAgdGFibGU6IHN0cmluZztcclxuICB1c2VyOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBLZWRSZXBvPFQgZXh0ZW5kcyBEb2N1bWVudD4ge1xyXG4gIG1lbTogUmVwbzxUPjtcclxuICBvcHRpb25zOiBLZWRSZXBvT3B0aW9uczxUPjtcclxuICBcclxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBLZWRSZXBvT3B0aW9uczxUPikge1xyXG4gICAgY29uc3Qge3RhYmxlLCBnZXRDbGllbnQsIGdldFF1ZXJ5T3B0aW9uc30gPSBvcHRpb25zO1xyXG4gICAgdGhpcy5tZW0gPSBuZXcgUmVwbzxUPih7cXVlcnk6IGFzeW5jICgpPT57XHJcbiAgICAgIGNvbnN0IHF1ZXJ5T3B0aW9ucyA9IGF3YWl0IGdldFF1ZXJ5T3B0aW9ucygpO1xyXG4gICAgICByZXR1cm4gYXdhaXQgZ2V0Q2xpZW50KCkubGlzdDxUPih0YWJsZSwge1xyXG4gICAgICAgIC4uLnF1ZXJ5T3B0aW9ucyxcclxuICAgICAgICBjYWNoZUJ1c3Q6IHRoaXMuZ2V0Q2FjaGVCdXN0KCl9KTtcclxuICAgIH19KTtcclxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldENhY2hlQnVzdCgpIHtcclxuICAgIGNvbnN0IHt0YWJsZSwgdXNlcn0gPSB0aGlzLm9wdGlvbnM7XHJcbiAgICBjb25zdCBjYWNoZUJ1c3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2FjaGUtYnVzdC0nICsgdGFibGUgKyAnLScgKyB1c2VyKTtcclxuICAgIHJldHVybiBjYWNoZUJ1c3QgfHwgdGhpcy5yZWdlbmVyYXRlQ2FjaGVCdXN0KCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlZ2VuZXJhdGVDYWNoZUJ1c3QoKSB7XHJcbiAgICBjb25zdCB7dGFibGUsIHVzZXJ9ID0gdGhpcy5vcHRpb25zO1xyXG4gICAgY29uc3QgY2FjaGVCdXN0ID0gY3JlYXRlVVVJRCgpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2NhY2hlLWJ1c3QtJyArIHRhYmxlICsgJy0nICsgdXNlciwgY2FjaGVCdXN0KTtcclxuICAgIHJldHVybiBjYWNoZUJ1c3Q7XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cHNlcnQoaXRlbTogVCwgdXBkYXRlcjogKGl0ZW06IFQpID0+IHZvaWQpIHtcclxuICAgIGlmICghaXRlbS4kZXRhZykge1xyXG4gICAgICAvLyBJdGVtcyB3aXRob3V0ICRldGFnIGNhbm5vdCBiZSByZXRyaWV2ZWQgZnJvbSBzZXJ2ZXIsIHNvIGl0IHNob3VsZCBiZSBpbnNlcnRlZC5cclxuICAgICAgY29uc3QgdXBkYXRlZEl0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCBpdGVtKTtcclxuICAgICAgdXBkYXRlcih1cGRhdGVkSXRlbSk7XHJcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLmluc2VydChbdXBkYXRlZEl0ZW1dKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFdlIGhhdmUgYW4gJGV0YWcsIHNvIHdlIGNhbiBleHBlY3QgaXQgdG8gbGl2ZSBvbiB0aGUgc2VydmVyLlxyXG4gICAgICAvLyBIb3dldmVyLCB0YWtlIGNhcmUgb2YgdGhlIHVubGlrZWx5IHNpdHVhdGlvbiB0aGF0IGl0IHdhcyBkZWxldGVkIGZyb20gc2VydmVyLFxyXG4gICAgICAvLyBhbmQgaWYgc28sIGluc2VydCBpdCBhZ2Fpbi5cclxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoW2l0ZW1dLCB1cGRhdGVyKS5jYXRjaChlID0+IHtcclxuICAgICAgICBpZiAoZS5uYW1lID09PSBcImh0dHA0MDRcIikge1xyXG4gICAgICAgICAgY29uc3QgdXBkYXRlZEl0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCBpdGVtKTtcclxuICAgICAgICAgIHVwZGF0ZXIodXBkYXRlZEl0ZW0pO1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0KFt1cGRhdGVkSXRlbV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgdXBkYXRlKGl0ZW1zOiBUW10sIHVwZGF0ZXI6IChpdGVtOiBUKSA9PiB2b2lkKSB7XHJcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZX0gPSB0aGlzLm9wdGlvbnM7XHJcbiAgICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcclxuICAgIGNvbnN0IG1vZGlmaWVkSXRlbXM6IFRbXSA9IGl0ZW1zLm1hcChpdGVtID0+IHtcclxuICAgICAgY29uc3QgbWVtUmVwb0l0ZW0gPSB0aGlzLm1lbS5pdGVtcy5maW5kKGl0ID0+IGl0LmlkID09PSBpdGVtLmlkKTtcclxuICAgICAgaXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIG1lbVJlcG9JdGVtIHx8IGl0ZW0pO1xyXG4gICAgICB1cGRhdGVyKGl0ZW0pO1xyXG4gICAgICByZXR1cm4gaXRlbTtcclxuICAgIH0pO1xyXG4gICAgaWYgKG9wdGltaXN0aWMpIGF3YWl0IHRoaXMubWVtLnVwZGF0ZShtb2RpZmllZEl0ZW1zLm1hcCh4ID0+IE9iamVjdC5hc3NpZ24oe30sIHgsIHskbWV0YTogJ3VwZGF0aW5nJ30pKSk7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZG8gKGJyID0+IG1vZGlmaWVkSXRlbXMuZm9yRWFjaChpdGVtID0+IGJyLnB1dCh0YWJsZSwgaXRlbSkpKVxyXG4gICAgLmNhdGNoKGUgPT4gZS5uYW1lID09PSBcImh0dHA0MDlcIiA/IC8vIGNvbmZsaWN0XHJcbiAgICAgIC8vIEdldCBhIGZyZXNoIHZlcnNpb24gZnJvbSBzZXJ2ZXI6XHJcbiAgICAgIGNsaWVudC5saXN0PFQ+KHRhYmxlLCB7aWRzOiBpdGVtcy5tYXAoaXRlbSA9PiBpdGVtLmlkKX0sIHtjYWNoZTogJ25vLWNhY2hlJ30pLnRoZW4oZnJlc2hJdGVtcyA9PiB7XHJcbiAgICAgICAgLy8gVXBkYXRlIGxvY2FsIHZlcnNpb246XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZWRJdGVtcyA9IGZyZXNoSXRlbXMubWFwKGZyZXNoSXRlbSA9PiB7XHJcbiAgICAgICAgICAvLyBDbG9uZSB0aGUgZnJlc2ggaXRlbVxyXG4gICAgICAgICAgY29uc3QgbW9kaWZpZWQgPSBPYmplY3QuYXNzaWduKHt9LCBmcmVzaEl0ZW0pO1xyXG4gICAgICAgICAgLy8gUmUtcnVuIHRoZSB1cGRhdGVyIG9uIHRoZSBjbG9uZTpcclxuICAgICAgICAgIHVwZGF0ZXIobW9kaWZpZWQpO1xyXG4gICAgICAgICAgcmV0dXJuIG1vZGlmaWVkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIFJlLWRvIHRoZSB0aGUgcHV0IG9wZXJhdGlvbiB0b3dhcmRzIHRoZSBzZXJ2ZXIuXHJcbiAgICAgICAgcmV0dXJuIGNsaWVudC5kbyhiciA9PiBtb2RpZmllZEl0ZW1zLmZvckVhY2goaXRlbSA9PiBici5wdXQodGFibGUsIGl0ZW0pKSk7XHJcbiAgICAgIH0pIDpcclxuICAgICAgLy8gT3RoZXIgdW5leHBlY3RlZCBlcnJvcjpcclxuICAgICAgUHJvbWlzZS5yZXNvbHZlKG9wdGltaXN0aWMgJiZcclxuICAgICAgICB0aGlzLm1lbS51cGRhdGUoaXRlbXMpKSAvLyBVbmRvIG9wdGltaXN0aWMgdXBkYXRlXHJcbiAgICAgIC50aGVuKCgpPT57XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpOyAvLyBSZWplY3Qgd2l0aCB0aGUgZXJyb3Igbm8gbWF0dGVyLlxyXG4gICAgICB9KSk7XHJcbiAgICB0aGlzLnJlZ2VuZXJhdGVDYWNoZUJ1c3QoKTtcclxuICAgIG1vZGlmaWVkSXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgaXRlbS4kZXRhZyA9IHJlcy5uZXdFdGFnc1tpdGVtLmlkXTtcclxuICAgICAgaXRlbS4kbWV0YSA9IHVuZGVmaW5lZDtcclxuICAgIH0pO1xyXG4gICAgYXdhaXQgdGhpcy5tZW0udXBkYXRlKG1vZGlmaWVkSXRlbXMpOyAvLyBFbnN1cmVzIG5ldyBldGFnIGlzIGlzIGFwcGxpZWQgb24gbmV4dCBhY3Rpb24uXHJcbiAgfVxyXG5cclxuICBzdHJpcEdyYXBocyAoaXRlbXM6IFRbXSwgZ3JhcGhzOiBzdHJpbmdbXSkge1xyXG4gICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHtcclxuICAgICAgY29uc3QgY2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBpdGVtKTtcclxuICAgICAgZ3JhcGhzLmZvckVhY2goZ3JhcGggPT4ge1xyXG4gICAgICAgIGlmIChpdGVtW2dyYXBoXSkge1xyXG4gICAgICAgICAgY2xvbmVbZ3JhcGhdID0gKGl0ZW1bZ3JhcGhdIGFzIHtpZDpzdHJpbmd9W10pLm1hcCAoZG9jID0+ICh7aWQ6IGRvYy5pZH0pKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGluc2VydChpdGVtczogVFtdKSB7XHJcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZSwgZ2V0UXVlcnlPcHRpb25zfSA9IHRoaXMub3B0aW9ucztcclxuICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xyXG4gICAgY29uc3QgcXVlcnlPcHRpb25zID0gYXdhaXQgZ2V0UXVlcnlPcHRpb25zKCk7XHJcbiAgICBjb25zdCBncmFwaHMgPSBbXS5jb25jYXQocXVlcnlPcHRpb25zLmluY2x1ZGUpO1xyXG4gICAgLy8gR2l2ZSBJRHMgdG8gZWFjaCBpdGVtOlxyXG4gICAgaXRlbXMgPSBpdGVtcy5tYXAoaXRlbSA9PiBpdGVtLmlkID8gaXRlbSA6IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0sIHtpZDogY3JlYXRlVVVJRCgpfSkpO1xyXG4gICAgY29uc3Qgc3RyaXBwZWQgPSB0aGlzLnN0cmlwR3JhcGhzKGl0ZW1zLCBncmFwaHMpO1xyXG4gICAgaWYgKG9wdGltaXN0aWMpIGF3YWl0IHRoaXMubWVtLmluc2VydChzdHJpcHBlZC5tYXAoeCA9PiBPYmplY3QuYXNzaWduKHt9LCB4LCB7JG1ldGE6ICdhZGRpbmcnfSkpKTtcclxuICAgIGNvbnN0IGJyID0gbmV3IEJhdGNoUnVubmVyKCk7XHJcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3RyaXBwZWQpIHtcclxuICAgICAgLy8gQWxzbyBhZGQgbGlua3MgdG8gYWxsIGZvcmVpZ24gcmVsYXRlZCBpdGVtczpcclxuICAgICAgZm9yIChjb25zdCBncmFwaCBvZiBncmFwaHMpIHtcclxuICAgICAgICBjb25zdCBmb3JlaWduSXRlbXM6IERvY3VtZW50W10gPSBpdGVtW2dyYXBoXTtcclxuICAgICAgICBpZiAoZm9yZWlnbkl0ZW1zKSB7XHJcbiAgICAgICAgICBmb3JlaWduSXRlbXMuZm9yRWFjaChkb2MgPT4ge1xyXG4gICAgICAgICAgICBici5saW5rMih0YWJsZSwgaXRlbS5pZCwgZ3JhcGgsIGRvYy5pZCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgYnIuYWRkKHRhYmxlLCBpdGVtKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5iYXRjaChici5tdXRhdGlvblJlcXVlc3RzKS5jYXRjaChlID0+IHtcclxuICAgICAgaWYgKG9wdGltaXN0aWMpIHRoaXMubWVtLmRlbGV0ZShpdGVtcy5tYXAoaXRlbSA9PiBpdGVtLmlkKSk7XHJcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcclxuICAgIH0pXHJcbiAgICB0aGlzLnJlZ2VuZXJhdGVDYWNoZUJ1c3QoKTtcclxuICAgIGl0ZW1zLmZvckVhY2goaXRlbSA9PiBpdGVtLiRldGFnID0gcmVzLm5ld0V0YWdzW2l0ZW0uaWRdKTtcclxuICAgIGlmIChvcHRpbWlzdGljKVxyXG4gICAgICBhd2FpdCB0aGlzLm1lbS51cGRhdGUoaXRlbXMpOyAvLyBVcGRhdGUgd2l0aCBuZXcgJGV0YWcuXHJcbiAgICBlbHNlXHJcbiAgICAgIGF3YWl0IHRoaXMubWVtLmluc2VydChpdGVtcyk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBkZWxldGUgKGlkczogc3RyaW5nW10pIHtcclxuICAgIGNvbnN0IHtnZXRDbGllbnQsIG9wdGltaXN0aWMsIHRhYmxlfSA9IHRoaXMub3B0aW9ucztcclxuICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xyXG4gICAgaWYgKG9wdGltaXN0aWMpIGF3YWl0IHRoaXMubWVtLnVwZGF0ZShpZHNcclxuICAgICAgLm1hcChpZCA9PiB0aGlzLm1lbS5pdGVtcy5maW5kKHggPT4geC5pZCA9PT0gaWQpKVxyXG4gICAgICAuZmlsdGVyKHggPT4geClcclxuICAgICAgLm1hcCh4ID0+IE9iamVjdC5hc3NpZ24oe30sIHgsIHskbWV0YTogJ2RlbGV0aW5nJ30pKSk7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZG8gKGJyID0+IGlkcy5mb3JFYWNoKGlkID0+IGJyLmRlbGV0ZSh0YWJsZSwgaWQpKSkuY2F0Y2goYXN5bmMgZSA9PiB7XHJcbiAgICAgIGlmIChvcHRpbWlzdGljKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5tZW0udXBkYXRlKGlkc1xyXG4gICAgICAgICAgLm1hcChpZCA9PiB0aGlzLm1lbS5pdGVtcy5maW5kKHggPT4geC5pZCA9PT0gaWQpKVxyXG4gICAgICAgICAgLmZpbHRlcih4ID0+IHgpXHJcbiAgICAgICAgICAubWFwKHggPT4ge1xyXG4gICAgICAgICAgICB4ID0gT2JqZWN0LmFzc2lnbih7fSwgeCk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB4LiRtZXRhO1xyXG4gICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICAgIH0pKTtcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBlO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnJlZ2VuZXJhdGVDYWNoZUJ1c3QoKTtcclxuICAgIGF3YWl0IHRoaXMubWVtLmRlbGV0ZShpZHMpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xyXG5cclxudHlwZSBIVE1MUG9saWN5ID0ge1t0YWdOYW1lTG93ZXI6IHN0cmluZ106IHtbYXR0cmlidXRlTG93ZXI6IHN0cmluZ106IGJvb2xlYW59fTtcclxuXHJcbi8qKiBUYWdzIC8gQXR0cmlidXRlcyBXaGl0ZWxpc3RcclxuICogXHJcbiAqL1xyXG5jb25zdCBIVE1MX1dBU0hfUE9MSUNZOiBIVE1MUG9saWN5ID0ge1xyXG4gIGI6IHt9LCAgLy8gYm9sZFxyXG4gIGk6IHt9LCAgLy8gaXRhbGljXHJcbiAgcDoge30sICAvLyBwYXJhZ3JhcGhcclxuICB1OiB7fSwgIC8vIHVuZGVybGluZVxyXG4gIHN0cmlrZToge30sIC8vIHN0cmlrZS10aHJvdWdoXHJcbiAgcHJlOiB7fSwgLy8gdW5mb3JtYXR0ZWRcclxuICBoMToge30sIC8vIGhlYWRpbmcgMVxyXG4gIGgyOiB7fSwgLy8gaGVhZGluZyAyXHJcbiAgaDM6IHt9LCAvLyBoZWFkaW5nIDNcclxuICBoNDoge30sIC8vIGhlYWRpbmcgNFxyXG4gIGg1OiB7fSwgLy8gaGVhZGluZyA1XHJcbiAgaW1nOiB7c3JjOiB0cnVlLCBjbGFzczogdHJ1ZSwgc3R5bGU6IHRydWUsIHRhYmluZGV4OiB0cnVlfSwgLy8gaW1hZ2UuIFdlIHNldCBzdHlsZSBhbmQgdGFiaW5kZXggb3Vyc2VsdmVzLiBBY2NlcHQgdGhhdC5cclxuICBhOiB7aHJlZjogdHJ1ZSwgdGFyZ2V0OiB0cnVlLCB0YWJpbmRleDogdHJ1ZX0sIC8vIGxpbmtcclxuICB1bDoge30sIC8vIFVub3JkZXJlZCBsaXN0XHJcbiAgb2w6IHt9LCAvLyBPcmRlcmVkIGxpc3RcclxuICBsaToge30sIC8vIGxpc3QgaXRlbVxyXG4gIGhyOiB7fSwgLy8gSG9yaXpvbnRhbCBydWxlXHJcbiAgYnI6IHt9LCAvLyBCcmVhayBsaW5lXHJcbiAgZGl2OiB7fSwvLyBPZiBzb21lIHJlYXNvbiwgZGl2cyBhcmUgc29tZXRpbWVzIGluc2VydGVkIHdoZW4gcHJlc3NpbmcgRU5URVIgaW4gdGhlIHd5c2l3eWcgZWRpdG9yLlxyXG4gIHNwYW46IHt9LC8vIFNwYW5zIGFyZSBoYXJtbGVzcywganVzdCByZW1vdmUgdGhlaXIgc3R5bGUgYW5kIG90aGVyIGF0dHJpYnV0ZXMgYW5kIEkgZmVlbCBncmVhdC5cclxuICAvLyB0YWJsZSB0YWdzOlxyXG4gIHRhYmxlOiB7Ym9yZGVyOiB0cnVlfSxcclxuICB0Ym9keToge30sXHJcbiAgdGhlYWQ6IHt9LFxyXG4gIHRmb290OiB7fSxcclxuICB0cjoge30sXHJcbiAgdGQ6IHtoZWFkZXJzOiB0cnVlLCBjb2xzcGFuOiB0cnVlLCByb3dzcGFuOiB0cnVlfSxcclxuICB0aDoge2FiYnI6IHRydWUsIGhlYWRlcnM6IHRydWUsIHNjb3BlOiB0cnVlLCBzb3J0ZWQ6IHRydWUsIGNvbHNwYW46IHRydWUsIHJvd3NwYW46IHRydWV9XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2FzaEh0bWwgKGh0bWw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCBcInRleHQvaHRtbFwiKTtcclxuICBjb25zdCB7Y2hpbGROb2Rlc30gPSBkb2MuYm9keTtcclxuICBsZXQgbW9kaWZpZWQgPSBmYWxzZTtcclxuICBmb3IgKGxldCBpPTA7IGk8Y2hpbGROb2Rlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgaWYgKHdhc2hOb2RlKGNoaWxkTm9kZXMuaXRlbShpKSkpIHtcclxuICAgICAgbW9kaWZpZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbW9kaWZpZWQgP1xyXG4gICAgZG9jLmJvZHkuaW5uZXJIVE1MIDpcclxuICAgIGh0bWw7IC8vIEJ5IHJldHVybmluZyB0aGUgb3JpZ2luYWwgSFRNTCBzdHJpbmcsIHdlIHNwYXJlIHRoZSB1c2VyIGZyb20gcmVmcmVzaGluZyB0aGUgZWRpdCBhcmVhLFxyXG4gICAgICAgICAgLy8gd2hpY2ggd291bGQgb3RoZXJ3aXNlIHB1dCB0aGUgY3Vyc29yIGF0IHRoZSB0b3AsIGxvc2luZyB0aGUgcG9zaXRpb24gd2hlcmUgdXNlciB3aGVyZS5cclxufVxyXG5cclxuZnVuY3Rpb24gd2FzaE5vZGUobm9kZTogTm9kZSB8IEVsZW1lbnQgfCBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xyXG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xyXG4gIGlmIChpc0VsZW1lbnQobm9kZSkpIHtcclxuICAgIGlmICh3YXNoRWxlbWVudChub2RlKSkge1xyXG4gICAgICBtb2RpZmllZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmICh3YXNoQ2hpbGROb2Rlcyhub2RlKSkge1xyXG4gICAgbW9kaWZpZWQgPSB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gbW9kaWZpZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdhc2hDaGlsZE5vZGVzKG5vZGU6IE5vZGUpIHtcclxuICBsZXQgbW9kaWZpZWQgPSBmYWxzZTtcclxuICBjb25zdCB7Y2hpbGROb2Rlc30gPSBub2RlO1xyXG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZiAod2FzaE5vZGUoY2hpbGROb2Rlcy5pdGVtKGkpKSkge1xyXG4gICAgICBtb2RpZmllZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtb2RpZmllZDtcclxufSBcclxuXHJcbi8qKiBSZXBsYWNlIGFuIGVsZW1lbnQgd2l0aCBpdHMgY2hpbGQgbm9kZXMuXHJcbiAqIFxyXG4gKi9cclxuZnVuY3Rpb24gcmVtb3ZlTWlkZGxlRWxlbWVudChlbGVtZW50OiBFbGVtZW50KSB7XHJcbiAgY29uc3Qge2NoaWxkTm9kZXN9ID0gZWxlbWVudDtcclxuICBmb3IgKGxldCBpPTA7IGk8Y2hpbGROb2Rlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgZWxlbWVudC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjaGlsZE5vZGVzLml0ZW0oaSksIGVsZW1lbnQpO1xyXG4gIH1cclxuICBlbGVtZW50LnJlbW92ZSgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB3YXNoRWxlbWVudChlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbiB7XHJcbiAgY29uc3QgcG9saWN5ID0gZWxlbWVudC50YWdOYW1lICYmIEhUTUxfV0FTSF9QT0xJQ1lbZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCldO1xyXG4gIGlmICghcG9saWN5KSB7XHJcbiAgICBjb25zb2xlLndhcm4oXCJXeXNpd3lnOiBub3QgYWxsb3dlZCB0YWdcIiwgZWxlbWVudC50YWdOYW1lKTtcclxuICAgIHdhc2hDaGlsZE5vZGVzKGVsZW1lbnQpO1xyXG4gICAgcmVtb3ZlTWlkZGxlRWxlbWVudChlbGVtZW50KTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICBsZXQgbW9kaWZpZWQgPSBmYWxzZTtcclxuICBmb3IgKGxldCBpPTA7IGk8ZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBjb25zdCBhdHRyID0gZWxlbWVudC5hdHRyaWJ1dGVzLml0ZW0oaSk7XHJcbiAgICBjb25zdCBhbGxvd2VkID0gYXR0ci5uYW1lICYmICEhcG9saWN5W2F0dHIubmFtZS50b0xvd2VyQ2FzZSgpXTtcclxuICAgIGlmICghYWxsb3dlZCkge1xyXG4gICAgICBtb2RpZmllZCA9IHRydWU7XHJcbiAgICAgIGNvbnNvbGUud2FybihcIld5c2l3eWc6IG5vdCBhbGxvd2VkIGF0dHJpYnV0ZVwiLCBhdHRyLm5hbWUsIFwiVGFnOiBcIiwgZWxlbWVudC50YWdOYW1lKTtcclxuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1vZGlmaWVkO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZTogTm9kZSkgOiBub2RlIGlzIEVsZW1lbnQge1xyXG4gIHJldHVybiAhIShub2RlIGFzIEVsZW1lbnQpLnRhZ05hbWU7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZXhlYyBmcm9tICcuL2V4ZWMnO1xyXG5pbXBvcnQge3dhc2hIdG1sfSBmcm9tICcuL3dhc2gtaHRtbCc7XHJcbmltcG9ydCBpbWFnZUVkaXRBY3Rpb25zIGZyb20gJy4vaW1hZ2UtZWRpdC1hY3Rpb25zJztcclxuaW1wb3J0IGFjdGlvbnMgZnJvbSAnLi9hY3Rpb25zJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uIHtcclxuICBuYW1lPzogc3RyaW5nO1xyXG4gIGljb246IHN0cmluZztcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIHByb21wdE1zZz86IHN0cmluZztcclxuICByZXN1bHQ6IChldjogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4sIGNvbXBvbmVudDogV3lzaXd5ZykgPT4gdm9pZDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgaHRtbDogc3RyaW5nO1xyXG4gIG9uQ2hhbmdlPzogKGh0bWw6IHN0cmluZykgPT4gdm9pZDtcclxuICByZXBvcnROdW1DaGFycz86IChudW1DaGFyczogbnVtYmVyKSA9PiB2b2lkO1xyXG4gIG1heENoYXJzPzogbnVtYmVyO1xyXG4gIGRlZmF1bHRBY3Rpb25zPzoge1tuYW1lOiBzdHJpbmddOiBBY3Rpb259O1xyXG4gIGFjdGlvbnM/OiAoUGFydGlhbDxBY3Rpb24+IHwgc3RyaW5nKVtdO1xyXG4gIHJlYWRPbmx5PzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBmb2N1c1JlY3Q6IENsaWVudFJlY3QgfCBudWxsO1xyXG59XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG4gIGFjdGlvbmJhcjogJ3d5c2l3eWctYWN0aW9uYmFyJyxcclxuICBidXR0b246ICd3eXNpd3lnLWJ1dHRvbicsXHJcbiAgY29udGVudDogJ3d5c2l3eWctY29udGVudCcsXHJcbiAgZm9jdXNyZWN0OiAnd3lzaXd5Zy1mb2N1c3JlY3QnLFxyXG4gIGZvY3VzcG9pbnQ6ICd3eXNpd3lnLWZvY3VzcG9pbnQnLFxyXG4gIHJlYWRvbmx5Q29udGVudDogJ3d5c2l3eWctY29udGVudCByZWFkb25seSdcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFd5c2l3eWcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb250ZW50RGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICBmb2N1c1JlY3REaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gIGZvY3VzRWxlbTogSFRNTEVsZW1lbnQgfCBudWxsO1xyXG4gIGNvcm5lcjogc3RyaW5nO1xyXG4gIHJlc2l6ZVN0YXJ0WDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge2ZvY3VzUmVjdDogbnVsbH07XHJcbiAgICB0aGlzLm9uRm9jdXMgPSB0aGlzLm9uRm9jdXMuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25CbHVyID0gdGhpcy5vbkJsdXIuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25Nb3VzZURvd24gPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLm9uTW91c2VNb3ZlID0gdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbk1vdXNlVXAgPSB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICBpZiAoIXRoaXMucHJvcHMucmVhZE9ubHkpIHtcclxuICAgICAgQXJyYXkuZnJvbSh0aGlzLmNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbChcImltZyxhXCIpKS5tYXAoZWxlbSA9PiAoZWxlbSBhcyAoSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50KSkpXHJcbiAgICAgIC5mb3JFYWNoKGVsZW0gPT4ge1xyXG4gICAgICAgIGVsZW0udGFiSW5kZXggPSAxO1xyXG4gICAgICAgIGVsZW0ub25mb2N1cyA9IHRoaXMub25Gb2N1cztcclxuICAgICAgICBlbGVtLm9uYmx1ciA9IHRoaXMub25CbHVyIGFzIGFueTtcclxuICAgICAgfSk7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3lzaXd5Zy1jb250ZW50XCIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKSB7XHJcbiAgICAgIHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnModGhpcy5jb250ZW50RGl2ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQgJiYgdGhpcy5jb250ZW50RGl2LmlubmVyVGV4dC5sZW5ndGgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xyXG4gICAgQXJyYXkuZnJvbSh0aGlzLmNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbChcImltZyxhXCIpKS5tYXAoZWxlbSA9PiAoZWxlbSBhcyAoSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50KSkpXHJcbiAgICAuZm9yRWFjaChlbGVtID0+IHtcclxuICAgICAgZWxlbS50YWJJbmRleCA9IDE7XHJcbiAgICAgIGVsZW0ub25mb2N1cyA9IHRoaXMub25Gb2N1cztcclxuICAgICAgZWxlbS5vbmJsdXIgPSB0aGlzLm9uQmx1ciBhcyBhbnk7XHJcbiAgICB9KTtcclxuICAgIGlmICh0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKSB7XHJcbiAgICAgIHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnModGhpcy5jb250ZW50RGl2ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQgJiYgdGhpcy5jb250ZW50RGl2LmlubmVyVGV4dC5sZW5ndGgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3lzaXd5Zy1jb250ZW50XCIpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcclxuICB9XHJcblxyXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHM6IFByb3BzLCBuZXh0U3RhdGU6IFN0YXRlKSB7XHJcbiAgICAvL3RoaXMuY29udGVudERpdi5vbmZvY3VzID0gdGhpcy5vbkZvY3VzO1xyXG4gICAgLy90aGlzLmNvbnRlbnREaXYub25ibHVyID0gdGhpcy5vbkJsdXI7XHJcbiAgICByZXR1cm4gIXRoaXMuY29udGVudERpdiB8fFxyXG4gICAgICBuZXh0U3RhdGUgIT0gdGhpcy5zdGF0ZSB8fFxyXG4gICAgICBuZXh0UHJvcHMucmVhZE9ubHkgIT09IHRoaXMucHJvcHMucmVhZE9ubHkgfHxcclxuICAgICAgd2FzaEh0bWwobmV4dFByb3BzLmh0bWwpICE9PSB3YXNoSHRtbCh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcclxuICB9XHJcblxyXG4gIHRyaWdnZXJPbkNoYW5nZShodG1sOiBzdHJpbmcpIHtcclxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiYgdGhpcy5wcm9wcy5vbkNoYW5nZSh3YXNoSHRtbChodG1sKSk7XHJcbiAgfVxyXG5cclxuICBvbkZvY3VzKGV2OiBGb2N1c0V2ZW50KSB7XHJcbiAgICBjb25zdCBlbGVtID0gZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xyXG4gICAgaWYgKCFlbGVtIHx8ICFlbGVtLnRhZ05hbWUpIHJldHVybjtcclxuICAgIGlmIChlbGVtLnRhZ05hbWUgIT09ICdJTUcnICYmIGVsZW0udGFnTmFtZSAhPT0gJ0EnKSByZXR1cm47XHJcbiAgICBjb25zdCBjb250ZW50UGFyZW50ID0gdGhpcy5jb250ZW50RGl2LnBhcmVudEVsZW1lbnQ7XHJcbiAgICBjb25zdCBuZXdTdGF0ZSA9IHtcclxuICAgICAgZm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdChjb250ZW50UGFyZW50LCBlbGVtKSxcclxuICAgIH1cclxuICAgIHN3aXRjaCAoZWxlbS50YWdOYW1lKSB7XHJcbiAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICBjYXNlICdJTUcnOlxyXG5cclxuICAgICAgZGVmYXVsdDogYnJlYWs7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcclxuICAgIHRoaXMuZm9jdXNFbGVtID0gZWxlbTtcclxuICB9XHJcblxyXG4gIG9uQmx1cihldjogUmVhY3QuRm9jdXNFdmVudDxIVE1MRGl2RWxlbWVudD4pIHtcclxuICAgIC8qaWYgKGV2LnJlbGF0ZWRUYXJnZXQpIHtcclxuICAgICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IGV2LnJlbGF0ZWRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGlmIChyZWxhdGVkVGFyZ2V0LmNsYXNzTmFtZSAmJiByZWxhdGVkVGFyZ2V0LmNsYXNzTmFtZS5zcGxpdCgnICcpLmluZGV4T2YoY2xhc3Nlcy5idXR0b24pID49IDApIHtcclxuICAgICAgICAvLyBBIGltYWdlIGFjdGlvbiBidXR0b24gd2FzIHByZXNzZWRcclxuICAgICAgICBzZXRcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH0qL1xyXG4gICAgaWYgKChldi50YXJnZXQgPT09IHRoaXMuZm9jdXNFbGVtICYmIGV2LnJlbGF0ZWRUYXJnZXQgIT09IHRoaXMuZm9jdXNSZWN0RGl2KSB8fFxyXG4gICAgICBldi50YXJnZXQgPT09IHRoaXMuZm9jdXNSZWN0RGl2KVxyXG4gICAge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtmb2N1c1JlY3Q6IG51bGx9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1ha2VDbGlja2FibGUoZWxlbTogSFRNTEVsZW1lbnQpIHtcclxuICAgICBlbGVtLnRhYkluZGV4ID0gMTtcclxuICB9XHJcblxyXG4gIG9uTW91c2VEb3duKGV2KSB7XHJcbiAgICBpZiAoKGV2LnRhcmdldC5jbGFzc05hbWUgfHwgXCJcIikuc3BsaXQoJyAnKS5pbmRleE9mKGNsYXNzZXMuZm9jdXNwb2ludCkgPj0gMCkge1xyXG4gICAgICBjb25zdCBjb3JuZXIgPSB0aGlzLmdldFJlY3RDb3JuZXIoZXYpO1xyXG4gICAgICB0aGlzLmNvcm5lciA9IGNvcm5lcjtcclxuICAgICAgdGhpcy5yZXNpemVTdGFydFggPSBldi5jbGllbnRYO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZU1vdmUoZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgIGlmICh0aGlzLmNvcm5lciAmJiB0aGlzLnN0YXRlLmZvY3VzUmVjdCAmJiB0aGlzLmZvY3VzRWxlbSkge1xyXG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAvLyBUT0RPOiBSw6RrbmEgdXQgYmFzZXJhdCBww6UgdGhpcy5jb3JuZXIgaHVyIGJpbGRlbnMgc3RvcmxlayBib3JkZSDDpG5kcmFzLlxyXG4gICAgICAvLyBMZXRhIHVwcCBiaWxkZW4gcGVyIElEIGZyw6VuIHRoaXMuY29udGVudERpdlxyXG4gICAgICAvLyBTw6R0dCBESVY6ZW5zIHN0eWxlIGF0dHJpYnV0IHdpZHRoIHRpbGwgbnkgd2lkdGguXHJcbiAgICAgIC8vIE9tIERJVjplbiByZWRhbiBoYWRlIGhlaWdodCwgc8OkdHQgbnkgaGVpZ2h0IG1lZCBzYW1tYSBhc3BlY3QgcmF0aW8gc29tIGlubmFuLFxyXG4gICAgICAvLyBhbm5hcnMsIHPDpHR0IGludGUgaGVpZ2h0IGFsbHMgKGVsbGVyIG3DtmpsaWd0dmlzIHRpbGwgYXV0bykpXHJcbiAgICAgIGNvbnN0IGZvY3VzUmVjdCA9IHRoaXMuZm9jdXNSZWN0RGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICBpZiAoZm9jdXNSZWN0LndpZHRoIDwgMzIpIHJldHVybjtcclxuICAgICAgLy9jb25zdCBjdXJyZW50V2lkdGggPSBmb2N1c1JlY3Qud2lkdGg7XHJcbiAgICAgIC8vY29uc3QgY3VycmVudEhlaWdodCA9IGZvY3VzUmVjdC5oZWlnaHQ7XHJcbiAgICAgIC8vY29uc3QgaGFzSGVpZ2h0U3R5bGUgPSAhdGhpcy5mb2N1c0VsZW0uc3R5bGUuaGVpZ2h0IHx8IHRoaXMuZm9jdXNFbGVtLnN0eWxlLmhlaWdodCA9PT0gXCJhdXRvXCI7XHJcbiAgICAgIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoMzIsIHRoaXMuY29ybmVyLmVuZHNXaXRoKCdsJykgP1xyXG4gICAgICAgIGZvY3VzUmVjdC53aWR0aCArICh0aGlzLnJlc2l6ZVN0YXJ0WCAtIGV2LmNsaWVudFgpIDpcclxuICAgICAgICAvL2ZvY3VzUmVjdC5yaWdodCAtIGV2LmNsaWVudFggOlxyXG4gICAgICAgIGZvY3VzUmVjdC53aWR0aCAtICh0aGlzLnJlc2l6ZVN0YXJ0WCAtIGV2LmNsaWVudFgpKTtcclxuICAgICAgdGhpcy5yZXNpemVTdGFydFggPSBldi5jbGllbnRYO1xyXG4gICAgICAgIC8vZXYuY2xpZW50WCAtIGZvY3VzUmVjdC5sZWZ0O1xyXG4gICAgICBjb25zdCBmYWN0b3IgPSBuZXdXaWR0aCAvIGZvY3VzUmVjdC53aWR0aDtcclxuICAgICAgY29uc3QgbmV3SGVpZ2h0ID0gZm9jdXNSZWN0LmhlaWdodCAqIGZhY3RvcjtcclxuICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUud2lkdGggPSBuZXdXaWR0aCArIFwicHhcIjtcclxuICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBmb2N1c1JlY3Q6IGdldFJlbGF0YXRpdmVDbGllbnRSZWN0KHRoaXMuY29udGVudERpdi5wYXJlbnRFbGVtZW50LCB0aGlzLmZvY3VzRWxlbSksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZVVwKGV2KSB7XHJcbiAgICBpZiAodGhpcy5jb3JuZXIgJiYgdGhpcy5zdGF0ZS5mb2N1c1JlY3QgJiYgdGhpcy5mb2N1c0VsZW0pIHtcclxuICAgICAgdGhpcy5jb3JuZXIgPSBudWxsO1xyXG4gICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZSh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFJlY3RDb3JuZXIoZXYpIHtcclxuICAgIGZvciAoY29uc3QgY2xhc3NOYW1lIG9mIChldi50YXJnZXQuY2xhc3NOYW1lIHx8ICcnKS5zcGxpdCgnICcpKSB7XHJcbiAgICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnZnB1bCc6XHJcbiAgICAgICAgICByZXR1cm4gJ3VsJztcclxuICAgICAgICBjYXNlICdmcHVyJzpcclxuICAgICAgICAgIHJldHVybiAnZnB1cic7XHJcbiAgICAgICAgY2FzZSAnZnBscic6XHJcbiAgICAgICAgICByZXR1cm4gJ2xyJztcclxuICAgICAgICBjYXNlICdmcGxsJzpcclxuICAgICAgICAgIHJldHVybiAnbGwnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGV4ZWNJbWFnZUVkaXRBY3Rpb24gKGNtZDogc3RyaW5nKSB7XHJcbiAgICAvL2NvbnNvbGUubG9nKGNtZCk7XHJcbiAgICBpZiAoIXRoaXMuZm9jdXNFbGVtKSByZXR1cm47XHJcbiAgICAvL2NvbnNvbGUubG9nKFwiZG9pbmcgaXRcIik7XHJcbiAgICBzd2l0Y2ggKGNtZCkge1xyXG4gICAgICBjYXNlICdmbG9hdC1sZWZ0JzpcclxuICAgICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS5jc3NGbG9hdCA9ICdsZWZ0JztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZmxvYXQtcmlnaHQnOlxyXG4gICAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLmNzc0Zsb2F0ID0gJ3JpZ2h0JztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAndW5mbG9hdCc6XHJcbiAgICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuY3NzRmxvYXQgPSAnJztcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHRoaXMudHJpZ2dlck9uQ2hhbmdlKHRoaXMuY29udGVudERpdi5pbm5lckhUTUwpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7Zm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCh0aGlzLmNvbnRlbnREaXYucGFyZW50RWxlbWVudCwgdGhpcy5mb2N1c0VsZW0pfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCBkZWZhdWx0QWN0aW9ucyA9IHRoaXMucHJvcHMuZGVmYXVsdEFjdGlvbnMgfHwgYWN0aW9ucztcclxuICAgIGxldCBhY3Rpb25zVG9Vc2UgPSB0aGlzLnByb3BzLmFjdGlvbnMgPyB0aGlzLnByb3BzLmFjdGlvbnMubWFwKGFjdGlvbiA9PlxyXG4gICAgICB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyA/XHJcbiAgICAgICAgZGVmYXVsdEFjdGlvbnNbYWN0aW9uXSA6XHJcbiAgICAgICAgZGVmYXVsdEFjdGlvbnNbYWN0aW9uLm5hbWVdID9cclxuICAgICAgICAgIHsgLi4uZGVmYXVsdEFjdGlvbnNbYWN0aW9uLm5hbWVdLCAuLi5hY3Rpb24gfSA6XHJcbiAgICAgICAgICBhY3Rpb24pXHJcbiAgICA6IE9iamVjdC5rZXlzKGRlZmF1bHRBY3Rpb25zKS5tYXAoYWN0aW9uID0+IGRlZmF1bHRBY3Rpb25zW2FjdGlvbl0pO1xyXG5cclxuICAgIGlmICh0aGlzLnN0YXRlLmZvY3VzUmVjdCkge1xyXG4gICAgICBhY3Rpb25zVG9Vc2UgPSBhY3Rpb25zVG9Vc2UuY29uY2F0KGltYWdlRWRpdEFjdGlvbnMoY21kID0+IHRoaXMuZXhlY0ltYWdlRWRpdEFjdGlvbihjbWQpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qge2ZvY3VzUmVjdH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qge3JlYWRPbmx5LCByZXBvcnROdW1DaGFycywgbWF4Q2hhcnN9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfT5cclxuICAgICAgeyFyZWFkT25seSAmJiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5hY3Rpb25iYXJ9PlxyXG4gICAgICAgIHthY3Rpb25zVG9Vc2UubWFwKChhY3Rpb24sIGlkeCkgPT5cclxuICAgICAgICAgIDxidXR0b24ga2V5PXtpZHh9IGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259XHJcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBhY3Rpb24uaWNvbn19XHJcbiAgICAgICAgICAgIHRpdGxlPXthY3Rpb24udGl0bGV9XHJcbiAgICAgICAgICAgIG9uTW91c2VEb3duPXtldj0+e2FjdGlvbi5yZXN1bHQoZXYsIHRoaXMpfX1cclxuICAgICAgICAgICAgb25Nb3VzZVVwPXtldj0+c2V0VGltZW91dCgoKT0+dGhpcy5jb250ZW50RGl2LmZvY3VzKCksIDEwKX1cclxuICAgICAgICAgIC8+KX1cclxuICAgICAgPC9kaXY+fVxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17cmVhZE9ubHkgPyBjbGFzc2VzLnJlYWRvbmx5Q29udGVudCA6IGNsYXNzZXMuY29udGVudH0gc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJywgdG9wOiAwLCBsZWZ0OiAwfX0+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0b3JcIlxyXG4gICAgICAgICAgcmVmPXtkaXYgPT4gdGhpcy5jb250ZW50RGl2ID0gZGl2fVxyXG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHdhc2hIdG1sKHRoaXMucHJvcHMuaHRtbCl9fVxyXG4gICAgICAgICAgY29udGVudEVkaXRhYmxlPXshcmVhZE9ubHl9XHJcbiAgICAgICAgICBvblBhc3RlPXtldiA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaXNOYU4obWF4Q2hhcnMpKSB7XHJcbiAgICAgICAgICAgICAgY29uc3Qge3RhcmdldCwgY3VycmVudFRhcmdldH0gPSBldjtcclxuICAgICAgICAgICAgICAvL2NvbnN0IHRleHRCZWluZ092ZXJ3cml0dGVuID0gKHRhcmdldCBhcyBhbnkpLmlubmVyVGV4dCB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGVkaXRvclRleHQgPSAoY3VycmVudFRhcmdldCAmJiBjdXJyZW50VGFyZ2V0LmlubmVyVGV4dCkgfHwgXCJcIjtcclxuICAgICAgICAgICAgICBjb25zdCB0ZXh0QmVpbmdQYXN0ZWQgPSBldi5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpIHx8IFwiXCI7XHJcbiAgICAgICAgICAgICAgaWYgKGVkaXRvclRleHQubGVuZ3RoICsgdGV4dEJlaW5nUGFzdGVkLmxlbmd0aCA+IG1heENoYXJzKSB7XHJcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfX1cclxuICAgICAgICAgIG9uS2V5VXA9e3JlcG9ydE51bUNoYXJzID8gZXYgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB7aW5uZXJUZXh0fSA9IChldi50YXJnZXQgYXMgYW55KTtcclxuICAgICAgICAgICAgcmVwb3J0TnVtQ2hhcnMoaW5uZXJUZXh0ID8gaW5uZXJUZXh0Lmxlbmd0aCA6IE5hTik7XHJcbiAgICAgICAgICB9IDogbnVsbH1cclxuICAgICAgICAgIG9uS2V5UHJlc3M9eyFpc05hTihtYXhDaGFycykgPyBldiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtpbm5lclRleHR9ID0gKGV2LnRhcmdldCBhcyBhbnkpO1xyXG4gICAgICAgICAgICBpZiAoaW5uZXJUZXh0ICYmIGlubmVyVGV4dC5sZW5ndGggPj0gbWF4Q2hhcnMpIHtcclxuICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IDogbnVsbH1cclxuICAgICAgICAgIG9uSW5wdXQ9e2V2ID0+IHRoaXMudHJpZ2dlck9uQ2hhbmdlKChldi50YXJnZXQgYXMgYW55KS5pbm5lckhUTUwpfVxyXG4gICAgICAgICAgb25LZXlEb3duPXtldiA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZWFkT25seSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAocmVwb3J0TnVtQ2hhcnMgJiYgZXYuY3VycmVudFRhcmdldCkge1xyXG4gICAgICAgICAgICAgIHJlcG9ydE51bUNoYXJzKChldi5jdXJyZW50VGFyZ2V0LmlubmVyVGV4dCB8fCBcIlwiKS5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiS2V5OiBcIiArIGV2LndoaWNoKTtcclxuICAgICAgICAgICAgaWYgKGV2LndoaWNoID49IDM1ICYmIGV2LndoaWNoIDw9IDQwKSB7Ly8gaG9tZS9lbmQvdXAvZG93bi9sZWZ0L3JpZ2h0XHJcbiAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFByZXZlbnQgZW50aXJlIHBhZ2UgZnJvbSBzY3JvbGxpbmc/P1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldi53aGljaCA9PT0gOSkge1xyXG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7Ly8gVEFCXHJcbiAgICAgICAgICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBleGVjKFwib3V0ZGVudFwiKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXhlYyhcImluZGVudFwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAoZXYua2V5Q29kZSA9PT0gOCB8fCBldi5rZXlDb2RlID09PSA0NikgJiYgLy8gRGVsZXRlIG9yIEJhY2sgYnV0dG9uc1xyXG4gICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtICYmIHRoaXMuc3RhdGUuZm9jdXNSZWN0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNFbGVtICYmIHRoaXMuZm9jdXNFbGVtLnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5mb2N1c0VsZW0pOyAvLyBSZW1vdmUgbWFya2VkIGltYWdlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtID0gbnVsbDtcclxuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtmb2N1c1JlY3Q6IG51bGx9KTtcclxuICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZSh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIHtmb2N1c1JlY3QgJiYgPGRpdlxyXG4gICAgICAgICAgcmVmPXtkaXYgPT4gdGhpcy5mb2N1c1JlY3REaXYgPSBkaXZ9XHJcbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNyZWN0fVxyXG4gICAgICAgICAgb25CbHVyPXt0aGlzLm9uQmx1cn1cclxuICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgb3V0bGluZTogMCxcclxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgICAgIHRvcDogdGhpcy5zdGF0ZS5mb2N1c1JlY3QudG9wLFxyXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLnN0YXRlLmZvY3VzUmVjdC5sZWZ0LFxyXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5zdGF0ZS5mb2N1c1JlY3Qud2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5mb2N1c1JlY3QuaGVpZ2h0fX0+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnB1bFwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIHRvcDowLCBsZWZ0OjB9fSAvPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNwb2ludCArIFwiIGZwdXJcIn0gc3R5bGU9e3twb3NpdGlvbjonYWJzb2x1dGUnLCB0b3A6MCwgcmlnaHQ6MH19IC8+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnBsclwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIGJvdHRvbTowLCByaWdodDowfX0gLz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcGxsXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgYm90dG9tOjAsIGxlZnQ6MH19IC8+XHJcbiAgICAgICAgPC9kaXY+fVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QgKHBhcmVudDogSFRNTEVsZW1lbnQsIGNoaWxkOiBIVE1MRWxlbWVudCkgOiBDbGllbnRSZWN0IHtcclxuICBjb25zdCBwYXJlbnRSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIGNvbnN0IGNoaWxkUmVjdCA9IGNoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIHJldHVybiB7XHJcbiAgICB0b3A6IGNoaWxkUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCArIHBhcmVudC5zY3JvbGxUb3AsXHJcbiAgICBsZWZ0OiBjaGlsZFJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCArIHBhcmVudC5zY3JvbGxMZWZ0LFxyXG4gICAgYm90dG9tOiBjaGlsZFJlY3QuYm90dG9tIC0gcGFyZW50UmVjdC50b3AgKyBwYXJlbnQuc2Nyb2xsVG9wLFxyXG4gICAgcmlnaHQ6IGNoaWxkUmVjdC5yaWdodCAtIHBhcmVudFJlY3QubGVmdCArIHBhcmVudC5zY3JvbGxMZWZ0LFxyXG4gICAgd2lkdGg6IGNoaWxkUmVjdC53aWR0aCxcclxuICAgIGhlaWdodDogY2hpbGRSZWN0LmhlaWdodFxyXG4gIH07XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW1hZ2VFZGl0QWN0aW9ucyhjYikge1xyXG4gIHJldHVybiBbe1xyXG4gICAgbmFtZTogJ2Zsb2F0LWxlZnQnLFxyXG4gICAgaWNvbjogYDxkaXYgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZVwiPlxyXG4gICAgICA8aSBjbGFzcz1cImZhIGZhLWFsaWduLXJpZ2h0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7IGxlZnQ6LTRweDt0b3A6MDsgdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IHRvcFwiPlxyXG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmAsXHJcbiAgICB0aXRsZTogJ0zDpXQgYmlsZGVuIGZseXRhIHbDpG5zdGVyIG9tIHRleHQnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBjYignZmxvYXQtbGVmdCcpXHJcbiAgfSwge1xyXG4gICAgbmFtZTogJ2Zsb2F0LXJpZ2h0JyxcclxuICAgIGljb246IGA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmVcIj5cclxuICAgICAgPGkgY2xhc3M9XCJmYSBmYS1hbGlnbi1sZWZ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7IHJpZ2h0Oi00cHg7dG9wOjA7IHRyYW5zZm9ybTogc2NhbGUoMC41KTsgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgdG9wXCI+XHJcbiAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YCxcclxuICAgIHRpdGxlOiAnTMOldCBiaWxkZW4gZmx5dGEgaMO2Z2VyIG9tIHRleHQnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBjYignZmxvYXQtcmlnaHQnKVxyXG4gIH0sIHtcclxuICAgIG5hbWU6ICd1bmZsb2F0JyxcclxuICAgIGljb246IGA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XHJcbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjBcIj4mIzgyNTQ7PC9kaXY+XHJcbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDpsZWZ0OjA7dHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbVwiPlxyXG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MFwiPl88L2Rpdj5cclxuICAgIDwvZGl2PmAsXHJcbiAgICB0aXRsZTogJ1BsYWNlcmEgYmlsZGVuIHDDpSBlZ2VuIHJhZCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGNiKCd1bmZsb2F0JylcclxuICB9XTtcclxufVxyXG5cclxuIiwiaW1wb3J0IHsgVXNlclRhc2sgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXNrVHlwZSAodXNlclRhc2s6IFVzZXJUYXNrKSA6ICdjb3Vyc2VCdWlsZGVyVGFzaycgfCAnc2l0ZVZpc2lvblRhc2snIHwgJ3N1YmplY3RQbGFubmVyVGFzaycgfCAnY3VzdG9tVGFzaycge1xyXG4gIHJldHVybiB1c2VyVGFzay5jb3Vyc2UgJiYgdXNlclRhc2sudGFzayAmJiB1c2VyVGFzay5jb3Vyc2UubGVuZ3RoID4gMCAmJiB1c2VyVGFzay50YXNrLmxlbmd0aCA+IDAgP1xyXG4gICAgJ2NvdXJzZUJ1aWxkZXJUYXNrJyA6XHJcbiAgICB1c2VyVGFzay5zaXRlVmlzaW9uUGFnZUlkID9cclxuICAgICAgJ3NpdGVWaXNpb25UYXNrJyA6XHJcbiAgICAgICAgdXNlclRhc2suY291cnNlSW5mbyA/XHJcbiAgICAgICAgICAnc3ViamVjdFBsYW5uZXJUYXNrJyA6XHJcbiAgICAgICAgICAnY3VzdG9tVGFzayc7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBVc2VyVGFzaywgVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveCc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSAnLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xyXG5pbXBvcnQgeyBjb3Vyc2VOYW1lVG9Dc3NDbGFzcyB9IGZyb20gJy4uL2NhbGVuZGFyL2NvdXJzZS1uYW1lLXRvLWNzcy1jbGFzcyc7XHJcbmltcG9ydCB7IGdldFRhc2tUeXBlIH0gZnJvbSAnLi9nZXQtdGFzay10eXBlJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBWaXJ0dWFsTGVhcm5pbmdHb2FsIH0gZnJvbSAnLi9yZWZpbmVyJztcclxuaW1wb3J0IHsgRmVhdHVyZXMgfSBmcm9tICcuLi8uLi9mZWF0dXJlcyc7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdyZWFjdC1pbnRsJztcclxuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VyVGFza3NCb3hQcm9wcyB7XHJcbiAgY291cnNlTmFtZTogc3RyaW5nO1xyXG4gIGxlYXJuaW5nR29hbHM6IFZpcnR1YWxMZWFybmluZ0dvYWxbXSxcclxuICB2aWV3Q291cnNlVXJsOiBzdHJpbmc7XHJcbiAgb3BlbkNvdXJzZXM/OiB7IFtwYXRoOiBzdHJpbmddOiBib29sZWFuIH07XHJcbiAgc2V0SXNPcGVuPzogKGNvdXJzZU5hbWU6IHN0cmluZywgaXNPcGVuOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIHNldFRhc2tEb25lPzogKHRhc2s6IFVzZXJUYXNrLCBkb25lOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIHNldFN1YlRhc2tEb25lOiAodGFzazogVXNlclRhc2ssIHN1YlRhc2s6IFVzZXJTdWJUYXNrLCBkb25lOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIGFkZE93blRhc2s/OiAoY291cnNlTmFtZTogc3RyaW5nLCBsZWFybmluZ0dvYWxOYW1lOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgZWRpdFRhc2s6ICh0YXNrOiBVc2VyVGFzaykgPT4gdm9pZDtcclxuICBlZGl0U3ViVGFzazogKHRhc2s6IFVzZXJUYXNrLCBzdWJUYXNrOiBVc2VyU3ViVGFzaykgPT4gdm9pZDtcclxuICByZW1vdmVMZWFybmluZ0dvYWw6IChsZzogVmlydHVhbExlYXJuaW5nR29hbCk9PnZvaWQ7XHJcbiAgZGlzcGxheVByb2dyZXNzOiBib29sZWFuO1xyXG4gIHByb2dyZXNzRGF0YToge2NvbXBsZXRlZE51bWJlck9mVGFza3M6IG51bWJlciwgbnVtYmVyT2ZUYXNrczogbnVtYmVyfTtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBVc2VyVGFza3NCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VXNlclRhc2tzQm94UHJvcHM+IHtcclxuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFVzZXJUYXNrc0JveFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBjb3Vyc2VOYW1lLFxyXG4gICAgICBsZWFybmluZ0dvYWxzLCBcclxuICAgICAgcHJvZ3Jlc3NEYXRhLFxyXG4gICAgICBkaXNwbGF5UHJvZ3Jlc3NcclxuICAgIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgaXNPcGVuID0gISF0aGlzLnByb3BzLm9wZW5Db3Vyc2VzW2NvdXJzZU5hbWVdO1xyXG4gICAgY29uc3QgZmVhdHVyZXMgPSBuZXcgRmVhdHVyZXMoKTtcclxuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcclxuXHJcbiAgICByZXR1cm4gPE9wZW5DbG9zZUJveFxyXG4gIHRpdGxlPXs8aDU+e2NvdXJzZU5hbWUgfHwgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ1c2VyVGFza3MuZ29hbHNcIiAgZGVmYXVsdE1lc3NhZ2U9XCJFZ25hIGzDpHJhbmRlbcOlbFwiLz4gfTwvaDU+fVxyXG4gICAgICBoZWFkZXJPcGVuPXtpc09wZW59XHJcbiAgICAgIGNsYXNzTmFtZT17Y291cnNlTmFtZSAmJiBjb3Vyc2VOYW1lVG9Dc3NDbGFzcygnd3AtY291cnNlLScsIGNvdXJzZU5hbWUpfVxyXG4gICAgICBvbk9wZW5DbG9zZT17YmVjYW1lT3BlbiA9PiB0aGlzLnByb3BzLnNldElzT3Blbihjb3Vyc2VOYW1lLCBiZWNhbWVPcGVuKX1cclxuICAgICAgZGlzcGxheVByb2dyZXNzPSB7ZGlzcGxheVByb2dyZXNzfSAgICAgICBcclxuICAgICAgcHJvZ3Jlc3NEYXRhID0ge3Byb2dyZXNzRGF0YX1cclxuICAgICAgPlxyXG4gICAgICB7bGVhcm5pbmdHb2Fscy5tYXAobGcgPT5cclxuICAgICAgICA8ZGl2IGtleT17bGcubmFtZX0gY2xhc3NOYW1lPVwibGVhcm5pbmdHb2FsQ29udGFpbmVyXCI+XHJcbiAgICAgICAgICB7bGcuc3RlcCAmJiA8ZGl2IGNsYXNzTmFtZT1cInN0ZXBJbmRpY2F0b3JcIj57bGcuc3RlcH08L2Rpdj59XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxUZXh0IGhvcml6b250YWxJdGVtIHRvcFwiPntsZy5uYW1lfTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XHJcbiAgICAgICAgICAgICAgJm5ic3A7PGFcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRyYXNoXCJcclxuICAgICAgICAgICAgICAgIGhyZWY9XCIjXCJcclxuICAgICAgICAgICAgICAgICB0aXRsZT17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDondXNlclRhc2tzLmRlbGV0ZUxlYXJuaW5nR29hbCcsIGRlZmF1bHRNZXNzYWdlOiAnVGEgYm9ydCBsw6RyYW5kZW3DpWxldCBvY2ggZGVzcyB1cHBnaWZ0ZXInfSl9XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtldj0+e1xyXG4gICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJlbW92ZUxlYXJuaW5nR29hbChsZyk7XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXRyYXNoXCIgLz5cclxuICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxUYXNrc1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cclxuICAgICAgICAgICAgICB7bGcudGFza3MubWFwKHVzZXJUYXNrID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzV29ya2luZyA9IHVzZXJUYXNrLiRtZXRhID09PSAnYWRkaW5nJyB8fCB1c2VyVGFzay4kbWV0YSA9PT0gJ2RlbGV0aW5nJyB8fCB1c2VyVGFzay4kbWV0YSA9PT0gJ3VwZGF0aW5nJztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrVHlwZSA9IGdldFRhc2tUeXBlKHVzZXJUYXNrKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4cGlyZWQgPSBtb21lbnQodXNlclRhc2suZGVhZGxpbmUpLnN0YXJ0T2YoJ2RheScpIDwgbW9tZW50KCkuc3RhcnRPZignZGF5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxkaXYga2V5PXt1c2VyVGFzay5pZH0gc3R5bGU9e2lzV29ya2luZyA/IHsgb3BhY2l0eTogMC41IH0gOiB7fX0+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJjaGVja0JveFwiICsgKHVzZXJUYXNrLmRvbmUgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXYgPT4gIWlzV29ya2luZyAmJiB0aGlzLnByb3BzLnNldFRhc2tEb25lKHVzZXJUYXNrLCAhdXNlclRhc2suZG9uZSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIHt0YXNrVHlwZSA9PT0gJ2NvdXJzZUJ1aWxkZXJUYXNrJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2dldFRhc2tVcmwodXNlclRhc2ssIHRoaXMucHJvcHMudmlld0NvdXJzZVVybCl9Pnt1c2VyVGFzay5uYW1lfTwvYT4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgIHRhc2tUeXBlID09PSAnc3ViamVjdFBsYW5uZXJUYXNrJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2dldFN1YmplY3RQbGFubmVyVGFza1VybCh1c2VyVGFzayl9Pnt1c2VyVGFzay5uYW1lfTwvYT4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrVHlwZSA9PT0gJ3NpdGVWaXNpb25UYXNrJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17dXNlclRhc2sudXJsfT57dXNlclRhc2submFtZX08L2E+IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXshdXNlclRhc2sudXJsID8gXCJsaW5rLWxlc3NcIjogXCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e3VzZXJUYXNrLnVybCB8fCB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9eyh1c2VyVGFzay51cmwrJycpLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChsb2NhdGlvbi5ob3N0LnRvTG93ZXJDYXNlKCkpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfc2VsZlwiIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfYmxhbmtcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA+e3VzZXJUYXNrLm5hbWV9PC9hPn1cclxuICAgICAgICAgICAgICAgICAgICAgIHt1c2VyVGFzay5kZWFkbGluZSAmJiA8ZGl2IGNsYXNzTmFtZT17XCJkYXRlU2V0XCIgKyAoZXhwaXJlZCA/ICcgZXhwaXJlZCcgOiAnJyl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT17bW9tZW50KHVzZXJUYXNrLmRlYWRsaW5lKS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpfSBjbGFzc05hbWU9XCJmYSBmYS1jYWxlbmRhclwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9Pnt9fT48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgdGFza0VkaXRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLmVkaXRUYXNrKHVzZXJUYXNrKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICB7dXNlclRhc2suc3ViVGFza3MgJiYgPGRpdiBjbGFzc05hbWU9XCJzdWJ0YXNrc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIHt1c2VyVGFzay5zdWJUYXNrcy5tYXAoc3ViVGFzayA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e3N1YlRhc2suaWR9ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiY2hlY2tCb3hcIiArIChzdWJUYXNrLmRvbmUgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2V2ID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpc1dvcmtpbmcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXRTdWJUYXNrRG9uZSh1c2VyVGFzaywgc3ViVGFzaywgIXN1YlRhc2suZG9uZSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17c3ViVGFzay51cmwgfHwgdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PXsodXNlclRhc2sudXJsKycnKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgobG9jYXRpb24uaG9zdC50b0xvd2VyQ2FzZSgpKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9zZWxmXCIgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfYmxhbmtcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRhc2sudXJsID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsaW5rLWxlc3MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfT57c3ViVGFzay5uYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHRhc2tFZGl0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLmVkaXRTdWJUYXNrKHVzZXJUYXNrLCBzdWJUYXNrKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pfVxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlYXJuaW5nR29hbFRvb2xzXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGFkZE93bkdvYWxcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMuYWRkT3duVGFzayh0aGlzLnByb3BzLmNvdXJzZU5hbWUsIGxnLm5hbWUpfT5cclxuICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiA8Rm9ybWF0dGVkTWVzc2FnZSBpZD0ndXNlclRhc2tzLmFkZExlYXJuaW5nR29hbCcgZGVmYXVsdE1lc3NhZ2U9J0VnZXQgYXJiZXRzbcOlbCcvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICl9XHJcbiAgICA8L09wZW5DbG9zZUJveD5cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRhc2tVcmwodXNlclRhc2s6IFVzZXJUYXNrLCB2aWV3Q291cnNlVXJsOiBzdHJpbmcpIHtcclxuICBpZiAodXNlclRhc2suY291cnNlICYmIHVzZXJUYXNrLmNvdXJzZS5sZW5ndGggPiAwICYmIHVzZXJUYXNrLnRhc2sgJiYgdXNlclRhc2sudGFzay5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCBjb3Vyc2VVcmwgPSBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSh2aWV3Q291cnNlVXJsLCB7IGNvdXJzZUlkOiB1c2VyVGFzay5jb3Vyc2VbMF0uaWQgfSk7XHJcbiAgICByZXR1cm4gYCR7Y291cnNlVXJsfSMvdGFzay8ke3VzZXJUYXNrLnRhc2tbMF0uaWR9YDtcclxuICB9XHJcbiAgcmV0dXJuIHVzZXJUYXNrLnVybDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3ViamVjdFBsYW5uZXJUYXNrVXJsKHVzZXJUYXNrOiBVc2VyVGFzaykge1xyXG4gIGlmICh1c2VyVGFzay5jb3Vyc2VJbmZvICYmIHVzZXJUYXNrLnRhc2sgJiYgdXNlclRhc2sudGFzay5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCB7c2Nob29sLCBjb3Vyc2UsIHRhYiB9ID0gdXNlclRhc2suY291cnNlSW5mbztcclxuICAgIGNvbnN0IGNvdXJzZVVybCA9IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5KGNmZy5LRURfU1VCSkVDVF9QTEFOTkVSX1VSTCwge30pO1xyXG4gICAgcmV0dXJuIGAke2NvdXJzZVVybH0jLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlfS90YWJzLyR7dGFifS90YXNrcy8ke3VzZXJUYXNrLnRhc2tbMF0uaWR9YDtcclxuICB9XHJcbiAgcmV0dXJuIHVzZXJUYXNrLnVybDtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAncmVhY3QtaW50bCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGxlYXJuaW5nR29hbD86IHN0cmluZztcclxuICBvblNhdmU6IChsZWFybmluZ0dvYWw6IHN0cmluZykgPT4gdm9pZDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBsZWFybmluZ0dvYWw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkZEN1c3RvbUdvYWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGxlYXJuaW5nR29hbDogcHJvcHMubGVhcm5pbmdHb2FsIHx8ICcnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7bGVhcm5pbmdHb2FsfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7b25TYXZlfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gPGRpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgICAgPGgyPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuYWRkTGVhcm5pbmdHb2FsVGl0bGVcIiBkZWZhdWx0TWVzc2FnZT1cIkzDpGdnIHRpbGwgZWdldCBsw6RyYW5kZW3DpWxcIi8+PC9oMj5cclxuICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuYWRkTGVhcm5pbmdHb2FsXCIgZGVmYXVsdE1lc3NhZ2U9XCJNw6VsXCIvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB0YWJJbmRleD17MX0gc2l6ZT17NTB9IGF1dG9Gb2N1c1xyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2xlYXJuaW5nR29hbH1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuc2V0U3RhdGUoe2xlYXJuaW5nR29hbDogZS50YXJnZXQudmFsdWV9KX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxiciAvPjwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XHJcbiAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCJcclxuICAgICAgICAgIG9uQ2xpY2s9eygpPT5vblNhdmUobGVhcm5pbmdHb2FsKX0+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZVwiIGRlZmF1bHRNZXNzYWdlPVwic2F2ZVwiLz48L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVGV4dElucHV0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dC1pbnB1dCc7XHJcbmltcG9ydCB7IFRleHRBcmVhRm9ybUZpZWxkIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dGFyZWEnO1xyXG5pbXBvcnQge0xhbmd1YWdlQ29udGV4dH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XHJcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAncmVhY3QtaW50bCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGlzVGFzazogYm9vbGVhblxyXG4gIG9uU2F2ZTogKG5hbWU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgdXJsOiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBZGRDdXN0b21UYXNrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBuYW1lOiAnJyxcclxuICAgICAgZGVzY3JpcHRpb246ICcnLFxyXG4gICAgICB1cmw6ICcnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uLCB1cmwgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7IGlzVGFzaywgb25TYXZlIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3Qge2ludGx9ID0gdGhpcy5jb250ZXh0O1xyXG4gICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICA8aDI+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjdXN0b21UYXNrLmFkZFdvcmtHb2FsVGl0bGVcIiBkZWZhdWx0TWVzc2FnZT1cIkzDpGdnIHRpbGwgZWdldCBhcmJldHNtw6VsXCIvPjwvaDI+XHJcbiAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5uYW1lTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTogJ05hbW4nfSl9XHJcbiAgICAgICAgICBpZD1cIkFkZEN1c3RvbVRhc2s6bmFtZVwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY3VzdG9tVGFzay5lbnRlck5hbWVQbGhkJywgZGVmYXVsdE1lc3NhZ2U6ICdBbmdlIG5hbW4uLi4nfSl9XHJcbiAgICAgICAgICB2YWx1ZT17bmFtZX1cclxuICAgICAgICAgIGF1dG9Gb2N1c1xyXG4gICAgICAgICAgb25DaGFuZ2U9e25hbWUgPT4gdGhpcy5zZXRTdGF0ZSh7bmFtZX0pfSAvPlxyXG5cclxuICAgICAgICA8VGV4dEFyZWFGb3JtRmllbGRcclxuICAgICAgICAgIHJvd3M9ezd9XHJcbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5kZXNjcmlwdGlvbkxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6J0Jlc2tyaXZuaW5nJ30pfVxyXG4gICAgICAgICAgaWQ9XCJBZGRDdXN0b21UYXNrOmRlc2NyaXB0aW9uXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOidjb21tb24uYWRkRGVzY3JpcHRpb25QbGhkJywgZGVmYXVsdE1lc3NhZ2U6IFwiTMOkZ2cgdGlsbCBlbiBiZXNrcml2bmluZy4uLlwifSl9XHJcbiAgICAgICAgICB2YWx1ZT17ZGVzY3JpcHRpb259XHJcbiAgICAgICAgICBvbkNoYW5nZT17ZGVzY3JpcHRpb249PnRoaXMuc2V0U3RhdGUoe2Rlc2NyaXB0aW9ufSl9IC8+XHJcblxyXG4gICAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY29tbW9uLmxpbmtMYWJlbCcsIGRlZmF1bHRNZXNzYWdlOidMw6Ruayd9KX0gXHJcbiAgICAgICAgICBpZD1cIkFkZEN1c3RvbVRhc2s6dXJsXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiaHR0cDovL3d3dy4uLlwiXHJcbiAgICAgICAgICB2YWx1ZT17dXJsfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e3VybCA9PiB0aGlzLnNldFN0YXRlKHt1cmx9KX0gLz5cclxuXHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XHJcbiAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCJcclxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2F2ZShuYW1lLCBkZXNjcmlwdGlvbiwgdXJsKX0+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZVwiIGRlZmF1bHRNZXNzYWdlPVwiU3BhcmFcIi8+PC9idXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRleHRJbnB1dCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHQtaW5wdXQnO1xyXG5pbXBvcnQgeyBUZXh0QXJlYUZvcm1GaWVsZCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHRhcmVhJztcclxuaW1wb3J0IHsgVXNlclRhc2ssIFVzZXJTdWJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBVc2VyVGFza3NSZXBvIH0gZnJvbSAnLi4vLi4vcmVwb3MvdXNlci10YXNrcy1yZXBvJztcclxuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdyZWFjdC1pbnRsJztcclxuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICAvLyBFZGl0IE1vZGVcclxuICBtb2RlOiAnYWRkJztcclxuICB1c2VyVGFzazogVXNlclRhc2s7XHJcbiAgY2xvc2VEaWFsb2c7XHJcbiAgdXNlclRhc2tzUmVwbzogVXNlclRhc2tzUmVwb1xyXG59IHwge1xyXG4gIG1vZGU6ICdlZGl0JztcclxuICB1c2VyVGFzazogVXNlclRhc2s7XHJcbiAgc3ViVGFzazogVXNlclN1YlRhc2s7XHJcbiAgY2xvc2VEaWFsb2c6ICgpPT52b2lkO1xyXG4gIHVzZXJUYXNrc1JlcG86IFVzZXJUYXNrc1JlcG9cclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICB1cmw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkZE9yRWRpdFN1YlRhc2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgaWYgKHByb3BzLm1vZGUgPT09ICdlZGl0Jykge1xyXG4gICAgICBjb25zdCB7c3ViVGFza30gPSBwcm9wcztcclxuICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICBuYW1lOiBzdWJUYXNrLm5hbWUgfHwgJycsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IHN1YlRhc2suZGVzY3JpcHRpb24gfHwgJycsXHJcbiAgICAgICAgdXJsOiBzdWJUYXNrLnVybCB8fCAnJ1xyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHsgIFxyXG4gICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgIG5hbWU6ICcnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcclxuICAgICAgICB1cmw6ICcnXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzYXZlKCkge1xyXG4gICAgLy8gVXBkYXRlIHJlcG86XHJcbiAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcclxuICAgIGNvbnN0IHt1c2VyVGFzaywgY2xvc2VEaWFsb2csIHVzZXJUYXNrc1JlcG99ID0gcHJvcHM7XHJcbiAgICBjb25zdCB7bmFtZSwgZGVzY3JpcHRpb24sIHVybH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgaWYgKHByb3BzLm1vZGUgPT09ICdlZGl0Jykge1xyXG4gICAgICAvLyBFZGl0IGV4aXN0aW5nOlxyXG4gICAgICB1c2VyVGFza3NSZXBvLnVwZGF0ZShbdXNlclRhc2tdLCB1dCA9PiB7XHJcbiAgICAgICAgY29uc3Qge3N1YlRhc2tzfSA9IHV0O1xyXG4gICAgICAgIGlmIChzdWJUYXNrcykge1xyXG4gICAgICAgICAgdXQuc3ViVGFza3MgPSBzdWJUYXNrcy5tYXAoc3QgPT5cclxuICAgICAgICAgICAgc3QuaWQgPT09IHByb3BzLnN1YlRhc2suaWQgPyB7Li4uc3QsIG5hbWUsIGRlc2NyaXB0aW9uLCB1cmx9IDpcclxuICAgICAgICAgICAgey4uLnN0fVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ3JlYXRlIG5ldyB0YXNrXHJcbiAgICAgIGNvbnN0IG5ld1N1YlRhc2sgPSB7XHJcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgIHVybFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHJlcG86XHJcbiAgICAgIHVzZXJUYXNrc1JlcG8udXBkYXRlKFt1c2VyVGFza10sIHV0ID0+IHtcclxuICAgICAgICBpZiAoIXV0LnN1YlRhc2tzKSB7XHJcbiAgICAgICAgICB1dC5zdWJUYXNrcyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dC5zdWJUYXNrcyA9IHV0LnN1YlRhc2tzLmNvbmNhdChuZXdTdWJUYXNrKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2xvc2UgZGlhbG9nXHJcbiAgICBjbG9zZURpYWxvZygpOyAgICBcclxuICB9XHJcblxyXG4gIGRlbGV0ZSgpIHtcclxuICAgIC8vIFVwZGF0ZSByZXBvOlxyXG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzOyAgXHJcbiAgICBpZiAocHJvcHMubW9kZSAhPT0gJ2VkaXQnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBvbmx5IGRlbGV0ZSBpbiBlZGl0IG1vZGVcIik7XHJcbiAgICB9XHJcbiAgICBwcm9wcy51c2VyVGFza3NSZXBvLnVwZGF0ZShbcHJvcHMudXNlclRhc2tdLCB1dCA9PiB7XHJcbiAgICAgIGlmICh1dC5zdWJUYXNrcykge1xyXG4gICAgICAgIHV0LnN1YlRhc2tzID0gdXQuc3ViVGFza3MuZmlsdGVyKHQgPT4gdC5pZCAhPT0gcHJvcHMuc3ViVGFzay5pZCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENsb3NlIGRpYWxvZzpcclxuICAgIHByb3BzLmNsb3NlRGlhbG9nKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7bmFtZSwgZGVzY3JpcHRpb24sIHVybH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qge3Byb3BzfSA9IHRoaXM7XHJcbiAgICBjb25zdCBpc0VkaXRNb2RlID0gcHJvcHMubW9kZSA9PT0gJ2VkaXQnO1xyXG4gICAgY29uc3Qge2ludGx9ID0gdGhpcy5jb250ZXh0O1xyXG4gICAgcmV0dXJuIDw+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICA8aDI+e2lzRWRpdE1vZGUgPyA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImFkZGVkaXRzdWJ0YXNrLmVkaXRTdWJ0YXNrXCIgZGVmYXVsdE1lc3NhZ2U9J1JlZGlnZXJhIHVuZGVydXBwZ2lmdCcvPiA6IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiYWRkZWRpdHN1YnRhc2suYWRkU3VidGFza1wiIGRlZmF1bHRNZXNzYWdlPSdMw6RnZyB0aWxsIHVuZGVydXBwZ2lmdCcvPiB9PC9oMj5cclxuICAgICAgICA8aHIgLz5cclxuICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonYWRkZWRpdHN1YnRhc2submFtZUxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6J1VuZGVydXBwZ2lmdGVucyBuYW1uJ30pfVxyXG4gICAgICAgICAgaWQ9XCJBZGRVc2VyU3ViVGFzazpuYW1lXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCJcclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm5hbWV9XHJcbiAgICAgICAgICBvbkNoYW5nZT17bmFtZSA9PiB0aGlzLnNldFN0YXRlKHtuYW1lfSl9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPFRleHRBcmVhRm9ybUZpZWxkXHJcbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5kZXNjcmlwdGlvbkxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6J0Jlc2tyaXZuaW5nJ30pfVxyXG4gICAgICAgICAgaWQ9XCJBZGRVc2VyU3ViVGFzazpkZXNjcmlwdGlvblwiXHJcbiAgICAgICAgICByb3dzPXs3fVxyXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIlxyXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICBvbkNoYW5nZT17ZGVzY3JpcHRpb24gPT4gdGhpcy5zZXRTdGF0ZSh7ZGVzY3JpcHRpb259KX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5saW5rTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTonTMOkbmsnfSl9XHJcbiAgICAgICAgICBpZD1cIkFkZFVzZXJTdWJUYXNrOnVybFwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlwiXHJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS51cmx9XHJcbiAgICAgICAgICBvbkNoYW5nZT17dXJsID0+IHRoaXMuc2V0U3RhdGUoe3VybH0pfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDxiciAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3BzLm1vZGUgPT09ICdlZGl0JyAmJiA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiXHJcbiAgICAgICAgICBvbkNsaWNrPXtldiA9PiB0aGlzLmRlbGV0ZSgpfT5cclxuICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiYWRkZWRpdHN1YnRhc2suZGVsZXRlU3VidGFza1wiIGRlZmF1bHRNZXNzYWdlPVwiVGEgYm9ydCB1bmRlcnVwcGdpZnRcIi8+PC9idXR0b24+fVxyXG4gICAgICAgIDxidXR0b25cclxuICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiXHJcbiAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5zYXZlKCl9PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVcIiBkZWZhdWx0TWVzc2FnZT1cIlNwYXJhXCIvPjwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvPlxyXG4gIH1cclxufVxyXG5cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBVc2VyVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFJlbmFtZWFibGVUZXh0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3JlbmFtZWFibGUtdGV4dCc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IGdldFRhc2tUeXBlIH0gZnJvbSAnLi9nZXQtdGFzay10eXBlJztcclxuaW1wb3J0IFJlYWN0RGF0ZVBpY2tlciwgeyBSZWFjdERhdGVQaWNrZXJQcm9wcyB9IGZyb20gJ3JlYWN0LWRhdGVwaWNrZXInO1xyXG5pbXBvcnQgJy4uLy4uL2dsb2JhbHMvbW9tZW50LXN2LWxvY2FsZSc7XHJcbmltcG9ydCB7VGV4dElucHV0fSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC10ZXh0LWlucHV0JztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBGb3JtRmllbGQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZCc7XHJcbmltcG9ydCB7IEFkZE9yRWRpdFN1YlRhc2sgfSBmcm9tICcuL2FkZC1vci1lZGl0LXN1Yi10YXNrJztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcclxuaW1wb3J0IHsgVXNlclRhc2tzUmVwbyB9IGZyb20gJy4uLy4uL3JlcG9zL3VzZXItdGFza3MtcmVwbyc7XHJcbmltcG9ydCB7IFRleHRBcmVhRm9ybUZpZWxkIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dGFyZWEnO1xyXG5pbXBvcnQgeyBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCB7TGFuZ3VhZ2VDb250ZXh0fSBmcm9tIFwiLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dFwiXHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHVzZXJUYXNrOiBVc2VyVGFzaztcclxuICBvblVwZGF0ZTogKHVwZGF0ZXI6ICh1c2VyVGFzazogVXNlclRhc2spID0+IHZvaWQpID0+IHZvaWQ7XHJcbiAgb25EZWxldGU6ICh1c2VyVGFza0lkOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgb3BlbkRpYWxvZzogKGRpYWxvZykgPT4gdm9pZDtcclxuICBjbG9zZURpYWxvZzogKCk9PnZvaWQ7XHJcbiAgdXNlclRhc2tzUmVwbzogVXNlclRhc2tzUmVwb1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIHVzZXJUYXNrOiBVc2VyVGFzaztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgZGVhZGxpbmU/OiBzdHJpbmc7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbiAgc3ViVGFza3M/OiBVc2VyU3ViVGFza1tdO1xyXG4gIHNob3dDYWxlbmRhcj86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFZGl0VXNlclRhc2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBkYXRlUGlja2VyOiBhbnk7XHJcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHVzZXJUYXNrOiBwcm9wcy51c2VyVGFzayxcclxuICAgICAgbmFtZTogcHJvcHMudXNlclRhc2submFtZSxcclxuICAgICAgZGVzY3JpcHRpb246IHByb3BzLnVzZXJUYXNrLmRlc2NyaXB0aW9uLFxyXG4gICAgICB1cmw6IHByb3BzLnVzZXJUYXNrLnVybCxcclxuICAgICAgZGVhZGxpbmU6IHByb3BzLnVzZXJUYXNrLmRlYWRsaW5lLFxyXG4gICAgICBzdWJUYXNrczogcHJvcHMudXNlclRhc2suc3ViVGFza3NcclxuICAgIH1cclxuICAgIHRoaXMub25Vc2VyVGFza3NDaGFuZ2VkID0gdGhpcy5vblVzZXJUYXNrc0NoYW5nZWQuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5wcm9wcy51c2VyVGFza3NSZXBvLnN1YnNjcmliZSh0aGlzLm9uVXNlclRhc2tzQ2hhbmdlZCk7XHJcbiAgfVxyXG5cclxuICBvblVzZXJUYXNrc0NoYW5nZWQodXNlclRhc2tzOiBVc2VyVGFza1tdKSB7XHJcbiAgICBjb25zdCBteVVzZXJUYXNrID0gdXNlclRhc2tzLmZpbmQodXQgPT4gdXQuaWQgPT09IHRoaXMucHJvcHMudXNlclRhc2suaWQpO1xyXG4gICAgaWYgKCFteVVzZXJUYXNrKSB7XHJcbiAgICAgIHRoaXMucHJvcHMuY2xvc2VEaWFsb2coKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHVzZXJUYXNrOiBteVVzZXJUYXNrLFxyXG4gICAgICBzdWJUYXNrczogbXlVc2VyVGFzay5zdWJUYXNrc1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgIHRoaXMucHJvcHMudXNlclRhc2tzUmVwby51bnN1YnNjcmliZSh0aGlzLm9uVXNlclRhc2tzQ2hhbmdlZCk7XHJcbiAgfVxyXG5cclxuICBpc01vZGlmaWVkKCkge1xyXG4gICAgLy8gRG9uJ3QgY291bnQgc3VidGFzayBjaGFuZ2VzISBUaGV5IGxpdmUgdGhlaXIgb3duIGxpZmUgYW5kIGlzIG1haW50YWluZWRcclxuICAgIC8vIGluIGFkZC1vci1lZGl0LXN1Yi10YXNrLnRzeC4gUmVhc29uOiBVc2VyIHdvdWxkIGV4cGVjdCBhZGRlZCAvZWRpdGVkIHN1YnRhc2tzXHJcbiAgICAvLyB0byBiZSBwZXJzaXN0ZWQgcmlnaHQgYXdheS4gTWF5IGNsaWNrIGF3YXkgdGhpcyBkaWFsb2cuXHJcbiAgICAvLyBBbHNvIHJlYXNvbjogQ2FuIGludm9rZSB0aGF0IGRpYWxvZyBieSBpdHNlbGYgZnJvbSBvdGhlciBjb21wb25lbnRzLiBGcm9tIFdlZWtQbGFubmVyXHJcbiAgICAvLyB3aGVuIGNsaWNraW5nIHRoZSBzdWJ0YXNrIGZvciBleGFtcGxlIVxyXG5cclxuICAgIGNvbnN0IHtkZWFkbGluZSwgZGVzY3JpcHRpb24sIG5hbWUsIHVybCwgdXNlclRhc2t9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGRlYWRsaW5lICE9PSB1c2VyVGFzay5kZWFkbGluZSB8fFxyXG4gICAgICBkZXNjcmlwdGlvbiAhPT0gdXNlclRhc2suZGVzY3JpcHRpb24gfHxcclxuICAgICAgbmFtZSAhPT0gdXNlclRhc2submFtZSB8fFxyXG4gICAgICB1cmwgIT09IHVzZXJUYXNrLnVybCk7XHJcbiAgfVxyXG5cclxuICBhZGRTdWJUYXNrKCk6IGFueSB7XHJcbiAgICB0aGlzLnByb3BzLm9wZW5EaWFsb2coPEFkZE9yRWRpdFN1YlRhc2tcclxuICAgICAgbW9kZT1cImFkZFwiXHJcbiAgICAgIHVzZXJUYXNrPXt0aGlzLnN0YXRlLnVzZXJUYXNrfVxyXG4gICAgICBjbG9zZURpYWxvZz17dGhpcy5wcm9wcy5jbG9zZURpYWxvZ31cclxuICAgICAgdXNlclRhc2tzUmVwbz17dGhpcy5wcm9wcy51c2VyVGFza3NSZXBvfVxyXG4gICAgLz4pO1xyXG4gIH1cclxuXHJcbiAgZWRpdFN1YlRhc2soc3ViVGFzazogVXNlclN1YlRhc2spIHtcclxuICAgIHRoaXMucHJvcHMub3BlbkRpYWxvZyg8QWRkT3JFZGl0U3ViVGFza1xyXG4gICAgICBtb2RlPVwiZWRpdFwiXHJcbiAgICAgIHN1YlRhc2s9e3N1YlRhc2t9XHJcbiAgICAgIHVzZXJUYXNrPXt0aGlzLnN0YXRlLnVzZXJUYXNrfVxyXG4gICAgICBjbG9zZURpYWxvZz17dGhpcy5wcm9wcy5jbG9zZURpYWxvZ31cclxuICAgICAgdXNlclRhc2tzUmVwbz17dGhpcy5wcm9wcy51c2VyVGFza3NSZXBvfVxyXG4gICAgLz4pO1xyXG4gIH1cclxuICBcclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uLCB1cmwsIGRlYWRsaW5lLCBzdWJUYXNrcywgc2hvd0NhbGVuZGFyLCB1c2VyVGFzayB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHsgaWQsIGNvdXJzZU5hbWUgfSA9IHVzZXJUYXNrO1xyXG4gICAgY29uc3QgeyBvblVwZGF0ZSwgb25EZWxldGUgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCBpc01vZGlmaWVkID0gdGhpcy5pc01vZGlmaWVkKCk7XHJcblxyXG4gICAgY29uc3QgdGFza1R5cGUgPSBnZXRUYXNrVHlwZSh1c2VyVGFzayk7XHJcbiAgICBjb25zdCBpc0N1c3RvbVRhc2sgPSB0YXNrVHlwZSA9PT0gJ2N1c3RvbVRhc2snO1xyXG4gICAgY29uc3QgZXhwaXJlZCA9IG1vbWVudCh1c2VyVGFzay5kZWFkbGluZSkgPCBtb21lbnQoKTtcclxuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcclxuXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJlZGl0VGFza0RpYWxvZyBzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICA8aDI+e2lzQ3VzdG9tVGFzayA/IFxyXG4gICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5lZGl0V29ya0dvYWxzXCIgZGVmYXVsdE1lc3NhZ2U9J1JlZGlnZXJhIGFyYmV0c23DpWwnLz4gOiBcclxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRhc2suZWRpdFRhc2tcIiBkZWZhdWx0TWVzc2FnZT0nUmVkaWdlcmEgdXBwZ2lmdCcvPn1cclxuICAgICAgPC9oMj5cclxuICAgICAgPGhyIC8+XHJcbiAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICBsYWJlbD17aXNDdXN0b21UYXNrID8gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogJ3Rhc2sudGFyZ2V0TmFtZUxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6ICdBcmJldHNtw6VsZXRzIG5hbW4nfSkgIDogaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogJ3Rhc2sudGFza05hbWVMYWJlbCcsIGRlZmF1bHRNZXNzYWdlOiAnVXBwZ2lmdGVucyBuYW1uJ30pfVxyXG4gICAgICAgIGlkPVwiRWRpdFVzZXJUYXNrOm5hbWVcIlxyXG4gICAgICAgIHBsYWNlaG9sZGVyPXtpc0N1c3RvbVRhc2sgPyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay53aGF0U2hvdWxkWW91RG9QbGhkJywgZGVmYXVsdE1lc3NhZ2U6ICdWYWQgc2thIGR1IGfDtnJhPyd9KSA6IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLmVudGVyVGFza05hbWVQbGhkJywgZGVmYXVsdE1lc3NhZ2U6ICdBbmdlIHVwcGdpZnRlbnMgbmFtbi4uLid9KSB9XHJcbiAgICAgICAgdmFsdWU9e25hbWV9XHJcbiAgICAgICAgb25DaGFuZ2U9e25hbWUgPT4gdGhpcy5zZXRTdGF0ZSh7bmFtZX0pfSAvPlxyXG4gICAgICBcclxuICAgICAge2lzQ3VzdG9tVGFzayAmJiA8PlxyXG4gICAgICAgIDxUZXh0QXJlYUZvcm1GaWVsZFxyXG4gICAgICAgICAgcm93cz17NX1cclxuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDogJ2NvbW1vbi5kZXNjcmlwdGlvbkxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6ICdCZXNrcml2bmluZyd9KX1cclxuICAgICAgICAgIGlkPVwiRWRpdFVzZXJUYXNrOmRlc2NyaXB0aW9uXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAnY29tbW9uLmFkZERlc2NyaXB0aW9uUGxoZCcsIGRlZmF1bHRNZXNzYWdlOiAnTMOkZ2cgdGlsbCBlbiBiZXNrcml2bmluZy4uLid9KX1cclxuICAgICAgICAgIHZhbHVlPXtkZXNjcmlwdGlvbn1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtkZXNjcmlwdGlvbj0+dGhpcy5zZXRTdGF0ZSh7ZGVzY3JpcHRpb259KX0gLz5cclxuXHJcbiAgICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5saW5rTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTpcIkzDpG5rXCJ9KX1cclxuICAgICAgICAgIGlkPVwiRWR1dFVzZXJUYXNrOnVybFwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cImh0dHAocyk6Ly8uLi5cIlxyXG4gICAgICAgICAgdmFsdWU9e3VybH1cclxuICAgICAgICAgIG9uQ2hhbmdlPXt1cmwgPT4gdGhpcy5zZXRTdGF0ZSh7dXJsfSl9ID5cclxuXHJcbiAgICAgICAgPC9UZXh0SW5wdXQ+PC8+fVxyXG5cclxuICAgICAgICA8Rm9ybUZpZWxkIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay5zZXREZWFkbGluZScsIGRlZmF1bHRNZXNzYWdlOiAnQW5nZSBkZWFkbGluZSd9KX0+XHJcbiAgICAgICAgICB7KGRlYWRsaW5lIHx8IHNob3dDYWxlbmRhcikgP1xyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAgPFJlYWN0RGF0ZVBpY2tlciByZWY9e2VsZW0gPT4gdGhpcy5kYXRlUGlja2VyID0gZWxlbX1cclxuICAgICAgICAgICAgICAgICAgaWQ9XCJFZGl0VXNlclRhc2s6ZGVhZGxpbmVcIlxyXG4gICAgICAgICAgICAgICAgICBuZXh0TW9udGhCdXR0b25MYWJlbD1cIlwiIFxyXG4gICAgICAgICAgICAgICAgICBwcmV2aW91c01vbnRoQnV0dG9uTGFiZWw9XCJcIiBcclxuICAgICAgICAgICAgICAgICAgc2hvd1dlZWtOdW1iZXJzPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZD17ZGVhZGxpbmUgJiYgbW9tZW50KGRlYWRsaW5lKS50b0RhdGUoKX1cclxuICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzPXtzaG93Q2FsZW5kYXJ9XHJcbiAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQ9XCJZWVlZLU1NLWRkXCJcclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtleHBpcmVkID8gXCJleHBpcmVkXCIgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAgICAgIGxvY2FsZT17aW50bC5sb2NhbGV9XHJcbiAgICAgICAgICAgICAgICAgIHBvcHBlclBsYWNlbWVudD17aXNDdXN0b21UYXNrID8gXCJ0b3Atc3RhcnRcIiA6IFwiYm90dG9tLXN0YXJ0XCJ9XHJcbiAgICAgICAgICAgICAgICAgIG9uQmx1cj17KCk9PnRoaXMuc2V0U3RhdGUoe3Nob3dDYWxlbmRhcjogZmFsc2V9KX1cclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3ZhbHVlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICBkZWFkbGluZTogdmFsdWUgJiYgbW9tZW50KHZhbHVlKS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgc2hvd0NhbGVuZGFyOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZGVsZXRlRGF0ZVwiIGhyZWY9XCIjXCIgdGl0bGU9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLnJlbW92ZURlYWRsaW5lJywgZGVmYXVsdE1lc3NhZ2U6ICdUYSBib3J0IGRlYWRsaW5lJ30pfSBvbkNsaWNrPXtldj0+e1xyXG4gICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtkZWFkbGluZTogbnVsbCwgc2hvd0NhbGVuZGFyOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICAgICAgfX0+PC9hPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj4gOlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcFwiIHJlZj17KCk9Pnt0aGlzLmRhdGVQaWNrZXIgPSBudWxsfX0+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXtldiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGVQaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGVQaWNrZXIuc2V0T3Blbih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93Q2FsZW5kYXI6IHRydWVcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNhbGVuZGFyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5zZXREZWFkbGluZUxhYmVsXCIgZGVmYXVsdE1lc3NhZ2U9XCJBbmdlIGRlYWRsaW5lLi4uXCIvPlxyXG4gICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgPC9Gb3JtRmllbGQ+XHJcbiAgICAgIDxGb3JtRmllbGQgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLnN1YlRhc2tzJywgZGVmYXVsdE1lc3NhZ2U6ICdVbmRlcnVwcGdpZnRlcid9KX0gPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVhcm5pbmdHb2FsVGFza3NcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxyXG5cclxuICAgICAgICAgICAgICB7c3ViVGFza3MgJiYgc3ViVGFza3MubWFwKHN1YlRhc2sgPT4gPGRpdiBrZXk9e3N1YlRhc2suaWR9IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+PGFcclxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9PnRoaXMuZWRpdFN1YlRhc2soc3ViVGFzayl9XHJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCIjXCI+e3N1YlRhc2submFtZX08L2E+PC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+KX1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3BcIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIkVkaXRVc2VyVGFzazphZGRTdWJUYXNrXCIgY2xhc3NOYW1lPVwiYnRuXCJcclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5hZGRTdWJUYXNrKCl9PlxyXG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5hZGRTdWJ0YXNrXCIgZGVmYXVsdE1lc3NhZ2U9XCJMw6RnZyB0aWxsIHVuZGVydXBwZ2lmdFwiLz5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9Gb3JtRmllbGQ+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGl2aWRlciBsYXJnZVwiIC8+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEJ1dHRvbiB0b3BcIj5cclxuICAgICAgICAgIDxidXR0b24gdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdFwiXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpPT57XHJcbiAgICAgICAgICAgICAgaXNNb2RpZmllZCA/IG9uVXBkYXRlKHVzZXJUYXNrID0+IHtcclxuICAgICAgICAgICAgICAgIHVzZXJUYXNrLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICAgICAgdXNlclRhc2suZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIHVzZXJUYXNrLnVybCA9IHVybDtcclxuICAgICAgICAgICAgICAgIHVzZXJUYXNrLmRlYWRsaW5lID0gZGVhZGxpbmU7XHJcbiAgICAgICAgICAgICAgfSkgOiB0aGlzLnByb3BzLmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgICAgIH19PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVcIiBkZWZhdWx0TWVzc2FnZT1cIlNwYXJhXCIvPiBcclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsQnV0dG9uIHRvcFwiPlxyXG4gICAgICAgICAgPGJ1dHRvbiB0YWJJbmRleD17MX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuXCJcclxuICAgICAgICAgICAgb25DbGljaz17KCk9PntcclxuICAgICAgICAgICAgICB0aGlzLnByb3BzLmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgICAgIH19PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLmNhbmNlbFwiIGRlZmF1bHRNZXNzYWdlPVwiQXZicnl0XCIvPjwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybSB0b3AgcHVsbC1yaWdodFwiPlxyXG4gICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICB0YWJJbmRleD17MX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nXCJcclxuICAgICAgICAgICAgb25DbGljaz17KCk9PntcclxuICAgICAgICAgICAgICBvbkRlbGV0ZShpZCk7XHJcbiAgICAgICAgICAgIH19Pntpc0N1c3RvbVRhc2sgP1xyXG4gICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5yZW1vdmVXb3JrR29hbHNcIiBkZWZhdWx0TWVzc2FnZT1cIlRhIGJvcnQgYXJiZXRzbcOlbFwiLz4gOlxyXG4gICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5yZW1vdmVUaGlzVGFza1wiIGRlZmF1bHRNZXNzYWdlPVwiVGEgYm9ydCBkZW4gaMOkciB1cHBnaWZ0ZW5cIi8+XHJcbiAgICAgICAgICB9PC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICBcclxuICAgICAgey8qPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiBvbkNsaWNrPXtldiA9PiBvbkRlbGV0ZShpZCl9PlxyXG4gICAgICAgIHtMYFRhIGJvcnQgYXJiZXRzbcOlbGB9PC9kaXY+XHJcbiAgICAgIHtpc01vZGlmaWVkICYmXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiXHJcbiAgICAgICAgICB0YWJJbmRleD17MH1cclxuICAgICAgICAgIG9uQ2xpY2s9eygpPT5vblVwZGF0ZSh1c2VyVGFzayA9PiB7XHJcbiAgICAgICAgICAgIHVzZXJUYXNrLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICB1c2VyVGFzay5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICB1c2VyVGFzay51cmwgPSB1cmw7XHJcbiAgICAgICAgICB9KX0+IFNwYXJhPC9kaXY+fSovfVxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gICAgcGVyY2VudGFnZTogbnVtYmVyO1xyXG4gICAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xyXG4gICAgcHJvZ3Jlc3NDb2xvcj86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFByb2dyZXNzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcclxuICAgICAgICBwZXJjZW50YWdlOiAwLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjRjFGNUY0XCIsXHJcbiAgICAgICAgcHJvZ3Jlc3NDb2xvcjogXCIjM2RiY2EyXCIsXHJcbiAgICB9O1xyXG5cclxuICAgIHJlbmRlcigpe1xyXG4gICAgICAgIGNvbnN0IHtwZXJjZW50YWdlLCBiYWNrZ3JvdW5kQ29sb3IsIHByb2dyZXNzQ29sb3J9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICBjb25zdCByb3VuZGVkUGVyY2VudGFnZSA9IE1hdGgucm91bmQocGVyY2VudGFnZSk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJwcm9ncmVzcy1jaGFydFwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjI1XCI+XHJcbiAgICAgICAgICAgIDxyZWN0IGZpbGw9e2JhY2tncm91bmRDb2xvcn0gIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiByeD1cIjRcIi8+XHJcbiAgICAgICAgICAgIDxyZWN0IGNsYXNzTmFtZT1cImZpbGxcIiBmaWxsPXtwcm9ncmVzc0NvbG9yfSB3aWR0aD17YCR7cm91bmRlZFBlcmNlbnRhZ2V9JWB9IGhlaWdodD1cIjEwMCVcIiByeD1cIjRcIi8+XHJcbiAgICAgICAgICAgIDx0ZXh0IGNsYXNzTmFtZT1cImZpbGxlZC10ZXh0XCIgdGV4dEFuY2hvcj1cIm1pZGRsZVwiIHg9XCI1MCVcIiB5PVwiNTAlXCIgZHk9XCIuM2VtXCI+e2Ake3JvdW5kZWRQZXJjZW50YWdlfSVgfTwvdGV4dD5cdFxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFVzZXJUYXNrc0JveCB9IGZyb20gJy4vdXNlci10YXNrcy1ib3gnO1xyXG5pbXBvcnQgeyBVc2VyVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGNyZWF0ZVVVSUQsIEh0dHBFcnJvciB9IGZyb20gXCJrZWRiYWNrZW5kL2NsaWVudFwiO1xyXG5pbXBvcnQgeyByZWZpbmUsIFZpcnR1YWxMZWFybmluZ0dvYWwgfSBmcm9tICcuL3JlZmluZXInO1xyXG5pbXBvcnQgeyBFbnYgfSBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBMLCBjb21wYXJlUHJvcCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG4vL2ltcG9ydCB7IEN1c3RvbUdvYWwgfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcbmltcG9ydCB7IFRTT04gfSBmcm9tICcuLi8uLi91dGlscy90c29uJztcclxuaW1wb3J0IHsgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSB9IGZyb20gJy4vd2Vla3BsYW5uZXItcGVyc2lzdGVkLXN0YXRlJztcclxuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtJztcclxuaW1wb3J0IHsgRGlhbG9ncyB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9kaWFsb2dzJztcclxuaW1wb3J0IHsgQWRkQ3VzdG9tR29hbCB9IGZyb20gJy4vYWRkLWN1c3RvbS1nb2FsJztcclxuaW1wb3J0IHsgQWRkQ3VzdG9tVGFzayB9IGZyb20gJy4vYWRkLWN1c3RvbS10YXNrJztcclxuaW1wb3J0IHsgRWRpdFVzZXJUYXNrIH0gZnJvbSAnLi9lZGl0LXVzZXItdGFzayc7XHJcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICcuLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zcGlubmVyJztcclxuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94JztcclxuaW1wb3J0IHsgUGVuZGluZ0pvYiB9IGZyb20gJy4uLy4uL3V0aWxzL3BlbmRpbmctam9iJztcclxuaW1wb3J0IHsgQWRkT3JFZGl0U3ViVGFzayB9IGZyb20gJy4vYWRkLW9yLWVkaXQtc3ViLXRhc2snO1xyXG5pbXBvcnQgeyBnZXRBZGp1c3RlZFdlZWssIEtFRFdlZWsgfSBmcm9tICcuLi8uLi91dGlscy93ZWVrdXRpbCc7XHJcbmltcG9ydCB7IEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICdyZWFjdC1pbnRsJztcclxuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xyXG5pbXBvcnQgeyBQcm9ncmVzcyB9IGZyb20gJy4uL2NoYXJ0cy9wcm9ncmVzcyc7XHJcbmltcG9ydCB7Z2V0V2Vla3BsYW5uZXJQcm9ncmVzc0RhdGF9IGZyb20gJy4uL2NoYXJ0cy9jaGFydHMtdXRpbHMnXHJcbmltcG9ydCB7IGZlYXR1cmVzIH0gZnJvbSAnLi4vLi4vZmVhdHVyZXMnO1xyXG5cclxuY29uc3QgTUFYX1NUUkFURUdZX0xFTkdUSCA9IDE2Mzg0O1xyXG5jb25zdCBNQVhfQVNTRVNTTUVOVF9MRU5HVEggPSAxNjM4NDtcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdmlld0NvdXJzZVVybDogc3RyaW5nO1xyXG4gIGVudjogRW52O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIHdlZWtEYXRlOiBudW1iZXI7XHJcbiAgZGlhbG9nczogYW55W107XHJcbiAgdXNlclRhc2tzOiBVc2VyVGFza1tdO1xyXG4gIG9wZW5Db3Vyc2VzOiB7IFtwYXRoOiBzdHJpbmddOiBib29sZWFuIH1cclxuICBzdHJhdGVneT86IHN0cmluZztcclxuICBhc3Nlc3NtZW50Pzogc3RyaW5nO1xyXG4gIHdlZWtUZXh0c1VUOiBVc2VyVGFzayB8IG51bGw7XHJcbiAgc2F2aW5nOiBib29sZWFuO1xyXG4gIGlzTG9hZGluZzogYm9vbGVhbjtcclxuICBpc0NvcHlpbmdUYXNrczogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdlZWtQbGFubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xyXG4gIHdlZWtUZXh0c1NhdmluZ0pvYjogUGVuZGluZ0pvYjtcclxuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgdXNlclRhc2tzOiBbXSxcclxuICAgICAgd2Vla0RhdGU6IERhdGUubm93KCksXHJcbiAgICAgIG9wZW5Db3Vyc2VzOiB7fSxcclxuICAgICAgZGlhbG9nczogW10sXHJcbiAgICAgIHNhdmluZzogZmFsc2UsXHJcbiAgICAgIHdlZWtUZXh0c1VUOiBudWxsLFxyXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXHJcbiAgICAgIGlzQ29weWluZ1Rhc2tzOiBmYWxzZVxyXG4gICAgfVxyXG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcclxuICAgIHRoaXMud2Vla1RleHRzU2F2aW5nSm9iID0gbmV3IFBlbmRpbmdKb2IoKCk9PnRoaXMuc2F2ZVdlZWtUZXh0cygpKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby5zdWJzY3JpYmUodGhpcy5vbkNoYW5nZSk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgIHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8udW5zdWJzY3JpYmUodGhpcy5vbkNoYW5nZSk7XHJcbiAgICB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYi5zdG9wKCk7XHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSh1c2VyVGFza3M6IFVzZXJUYXNrW10sIHBlcnNpc3RlZDogV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSwgd2Vla1RleHRzVVQ6IFVzZXJUYXNrKSB7XHJcbiAgICBjb25zdCBuZXdTdGF0ZSA6IFBhcnRpYWw8U3RhdGU+ID0ge1xyXG4gICAgICB1c2VyVGFza3MsXHJcbiAgICAgIHdlZWtEYXRlOiBwZXJzaXN0ZWQud2Vla0RhdGUsXHJcbiAgICAgIG9wZW5Db3Vyc2VzOiBwZXJzaXN0ZWQub3BlbkNvdXJzZXMsXHJcbiAgICAgIHdlZWtUZXh0c1VULFxyXG4gICAgICBpc0xvYWRpbmc6IGZhbHNlXHJcbiAgICB9XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUud2Vla1RleHRzVVQgfHwgKHdlZWtUZXh0c1VULmRhdGVUaW1lICE9PSB0aGlzLnN0YXRlLndlZWtUZXh0c1VULmRhdGVUaW1lKSkge1xyXG4gICAgICAvLyBDaGFuZ2luZyB3ZWVrLiBSZXNldCB0byBuZXcgd2VlaydzIHZhbHVlc1xyXG4gICAgICBuZXdTdGF0ZS5zdHJhdGVneSA9IHdlZWtUZXh0c1VULndlZWtUZXh0cy5zdHJhdGVneTtcclxuICAgICAgbmV3U3RhdGUuYXNzZXNzbWVudCA9IHdlZWtUZXh0c1VULndlZWtUZXh0cy5hc3Nlc3NtZW50O1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSBhcyBhbnkpOyAvLyBSZWFjdCdzIHVzZSBvZiBQaWNrIGluc3RlYWQgb2YgUGFydGlhbCBtYWtlcyB0aGluZ3MgY29tcGxleCBoZXJlLlxyXG4gIH1cclxuXHJcbiAgaXNXZWVrVGV4dHNFZGl0ZWQoKSB7XHJcbiAgICBjb25zdCB7IHN0cmF0ZWd5LCBhc3Nlc3NtZW50LCB3ZWVrVGV4dHNVVCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHJldHVybiAhIXdlZWtUZXh0c1VUICYmIChzdHJhdGVneSAhPT0gd2Vla1RleHRzVVQud2Vla1RleHRzLnN0cmF0ZWd5IHx8IGFzc2Vzc21lbnQgIT09IHdlZWtUZXh0c1VULndlZWtUZXh0cy5hc3Nlc3NtZW50KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgc2F2ZVdlZWtUZXh0cygpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiU2F2aW5nIHRleHRzLi4uXCIpO1xyXG4gICAgY29uc3QgeyBzdHJhdGVneSwgYXNzZXNzbWVudCwgd2Vla1RleHRzVVQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBpZiAodGhpcy5pc1dlZWtUZXh0c0VkaXRlZCgpKSB7XHJcbiAgICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8udXBzZXJ0KHdlZWtUZXh0c1VULCB1dCA9PiB7XHJcbiAgICAgICAgdXQud2Vla1RleHRzID0geyBzdHJhdGVneSwgYXNzZXNzbWVudCB9O1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByZXZXZWVrKCkge1xyXG4gICAgLy90aGlzLnNhdmVXZWVrVGV4dHMoKTtcclxuICAgIHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uY2hhbmdlV2Vlayhtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkuYWRkKC0xLCAnd2VlaycpLnRvRGF0ZSgpKTtcclxuICB9XHJcblxyXG4gIG5leHRXZWVrKCkge1xyXG4gICAgLy90aGlzLnNhdmVXZWVrVGV4dHMoKTtcclxuICAgIHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uY2hhbmdlV2Vlayhtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkuYWRkKDEsICd3ZWVrJykudG9EYXRlKCkpO1xyXG4gIH1cclxuXHJcbiAgb3BlbkRpYWxvZyhkaWFsb2cpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBkaWFsb2dzOiBbLi4udGhpcy5zdGF0ZS5kaWFsb2dzLCBkaWFsb2ddIH0pO1xyXG4gIH1cclxuXHJcbiAgb3BlbkFkZEdvYWxEaWFsb2coKSB7XHJcbiAgICB0aGlzLm9wZW5EaWFsb2coPEFkZEN1c3RvbUdvYWxcclxuICAgICAgb25TYXZlPXthc3luYyAobGVhcm5pbmdHb2FsOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAoIWxlYXJuaW5nR29hbCkgdGhyb3cgbmV3IEVycm9yICh0aGlzLmNvbnRleHQuaW50bC5mb3JtYXRNZXNzYWdlKHtpZDond2Vla3BsYW5uZXIuZW1wdHlMZWFybmluZ0dvYWxFcnInLCBkZWZhdWx0TWVzc2FnZTogJ0zDpHJhbmRlbcOlbGV0IGthbiBpbnRlIHZhcmEgdG9tdCd9KSk7XHJcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnNhdmluZykge1xyXG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNhdmluZzogdHJ1ZSB9KTtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkQ3VzdG9tR29hbChsZWFybmluZ0dvYWwpO1xyXG4gICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNhdmluZzogZmFsc2UgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9fSAvPik7XHJcbiAgfVxyXG5cclxuICBvcGVuQWRkT3duVGFza0RpYWxvZyhjb3Vyc2VOYW1lOiBzdHJpbmcsIGxlYXJuaW5nR29hbE5hbWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5vcGVuRGlhbG9nKDxBZGRDdXN0b21UYXNrXHJcbiAgICAgIGlzVGFzaz17IWNvdXJzZU5hbWV9XHJcbiAgICAgIG9uU2F2ZT17YXN5bmMgKG5hbWU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgdXJsOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAoIW5hbWUpIHRocm93IG5ldyBFcnJvciAodGhpcy5jb250ZXh0LmludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J3dlZWtwbGFubmVyLm5hbWVDYW5ub3RCZUVtcHR5JywgZGVmYXVsdE1lc3NhZ2U6ICdOYW1uZXQga2FuIGludGUgdmFyYSB0b210J30pKTtcclxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuc2F2aW5nKSB7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2F2aW5nOiB0cnVlIH0pO1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGRDdXN0b21UYXNrKGNvdXJzZU5hbWUsIGxlYXJuaW5nR29hbE5hbWUsIG5hbWUsIGRlc2NyaXB0aW9uLCB1cmwpO1xyXG4gICAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNhdmluZzogZmFsc2UgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9fSAvPik7XHJcbiAgfVxyXG5cclxuICBlZGl0VGFzayh1c2VyVGFzazogVXNlclRhc2spIHtcclxuICAgIHRoaXMub3BlbkRpYWxvZyg8RWRpdFVzZXJUYXNrXHJcbiAgICAgIHVzZXJUYXNrc1JlcG89e3RoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG99XHJcbiAgICAgIHVzZXJUYXNrPXt1c2VyVGFza31cclxuICAgICAgb25VcGRhdGU9e2FzeW5jICh1cGRhdGVyOiAodXQ6IFVzZXJUYXNrKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgY29uc3QgdGVzdCA9IHsuLi51c2VyVGFza307XHJcbiAgICAgICAgdXBkYXRlcih0ZXN0KTtcclxuICAgICAgICBpZiAoIXRlc3QubmFtZSkgdGhyb3cgbmV3IEVycm9yICh0aGlzLmNvbnRleHQuaW50bC5mb3JtYXRNZXNzYWdlKHtpZDond2Vla3BsYW5uZXIubmFtZU11c3ROb3RCZUVtcHR5JywgZGVmYXVsdE1lc3NhZ2U6ICdOYW1uZXQgZsOlciBpbnRlIHZhcmEgdG9tdCd9KSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZURpYWxvZygpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8udXBkYXRlKFt1c2VyVGFza10sIHVwZGF0ZXIpO1xyXG4gICAgICB9fVxyXG4gICAgICBvbkRlbGV0ZT17YXN5bmMgaWQgPT4ge1xyXG4gICAgICAgIHRoaXMuY2xvc2VEaWFsb2coKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLmRlbGV0ZShbaWRdKTtcclxuICAgICAgfX1cclxuICAgICAgb3BlbkRpYWxvZz17ZGlhbG9nPT50aGlzLm9wZW5EaWFsb2coZGlhbG9nKX1cclxuICAgICAgY2xvc2VEaWFsb2c9eygpPT50aGlzLmNsb3NlRGlhbG9nKCl9XHJcbiAgICAvPik7XHJcbiAgfVxyXG5cclxuICBlZGl0U3ViVGFzayh1c2VyVGFzazogVXNlclRhc2ssIHN1YlRhc2s6IFVzZXJTdWJUYXNrKSB7XHJcbiAgICB0aGlzLm9wZW5EaWFsb2coPEFkZE9yRWRpdFN1YlRhc2tcclxuICAgICAgdXNlclRhc2tzUmVwbz17dGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwb31cclxuICAgICAgbW9kZT1cImVkaXRcIlxyXG4gICAgICB1c2VyVGFzaz17dXNlclRhc2t9XHJcbiAgICAgIHN1YlRhc2s9e3N1YlRhc2t9XHJcbiAgICAgIGNsb3NlRGlhbG9nPXsoKT0+dGhpcy5jbG9zZURpYWxvZygpfVxyXG4gICAgLz4pO1xyXG4gIH1cclxuXHJcbiAgY2xvc2VEaWFsb2coKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogdGhpcy5zdGF0ZS5kaWFsb2dzLnNsaWNlKDAsIHRoaXMuc3RhdGUuZGlhbG9ncy5sZW5ndGggLSAxKSB9KTtcclxuICB9XHJcblxyXG5cclxuXHJcbiAgYXN5bmMgYWRkQ3VzdG9tR29hbChsZWFybmluZ0dvYWw6IHN0cmluZykge1xyXG4gICAgbGV0IGxhdGVzdFRpbWVTdGFtcCA9IE1hdGgubWF4LmFwcGx5KFxyXG4gICAgICBNYXRoLm1heCxcclxuICAgICAgW3RoaXMuc3RhdGUud2Vla0RhdGVdLmNvbmNhdCh0aGlzLnN0YXRlLnVzZXJUYXNrcy5tYXAodCA9PiB0LmRhdGVUaW1lKSkpO1xyXG5cclxuICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uaW5zZXJ0KFt7XHJcbiAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgIGxlYXJuaW5nR29hbCxcclxuICAgICAgZGF0ZVRpbWU6IGxhdGVzdFRpbWVTdGFtcCArIDIwMDBcclxuICAgIH1dKTtcclxuXHJcbiAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFdlZWtQbGFubmVyQm94T3BlbihcIlwiLCB0cnVlKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHJlbW92ZUxlYXJuaW5nR29hbChsZWFybmluZ0dvYWw6IFZpcnR1YWxMZWFybmluZ0dvYWwpIHtcclxuICAgIGlmIChsZWFybmluZ0dvYWwudGFza3MubGVuZ3RoID4gMCkge1xyXG4gICAgICBpZiAoIWNvbmZpcm0odGhpcy5jb250ZXh0LmludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J3dlZWtwbGFubmVyLmNvbmZpcm1SZW1vdmVMZWFybmluZ09iamVjdGl2ZXMnLCBkZWZhdWx0TWVzc2FnZTogJ1RhIGJvcnQgbMOkcmFuZGVtw6VsIHNhbXQge2xlYXJuaW5nR29hbHNOdW1iZXJ9IHVwcGdpZnRlcj8nfSwge2xlYXJuaW5nR29hbHNOdW1iZXI6IGxlYXJuaW5nR29hbC50YXNrcy5sZW5ndGh9KSkpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uZGVsZXRlKGxlYXJuaW5nR29hbC5hbGxUYXNrcy5tYXAodCA9PiB0LmlkKSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBhZGRDdXN0b21UYXNrKGNvdXJzZU5hbWU6IHN0cmluZywgbGVhcm5pbmdHb2FsOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcclxuICAgIGxldCBsYXRlc3RUaW1lU3RhbXAgPSBNYXRoLm1heC5hcHBseShcclxuICAgICAgTWF0aC5tYXgsXHJcbiAgICAgIFt0aGlzLnN0YXRlLndlZWtEYXRlXS5jb25jYXQodGhpcy5zdGF0ZS51c2VyVGFza3MubWFwKHQgPT4gdC5kYXRlVGltZSkpKTtcclxuXHJcbiAgICAvKmNvbnN0IGVtcHR5TGVhcm5pbmdHb2FsUGxhY2Vob2xkZXIgPSB0aGlzLnN0YXRlLnVzZXJUYXNrcy5maW5kKHV0ID0+XHJcbiAgICAgIHV0Lm5hbWUgPT0gbnVsbCAmJlxyXG4gICAgICAhdXQuY291cnNlTmFtZSAmJlxyXG4gICAgICB1dC5sZWFybmluZ0dvYWwgPT09IGxlYXJuaW5nR29hbCk7XHJcblxyXG4gICAgaWYgKGVtcHR5TGVhcm5pbmdHb2FsUGxhY2Vob2xkZXIpIHtcclxuICAgICAgLy8gSGlqYWNrIGxlYXJuaW5nLWdvYWwgcGxhY2Vob2xkZXIgYW5kIG1ha2UgaXQgdGhlIHJlYWwgdGFzay5cclxuICAgICAgLy8gVGhpcyB3aWxsIG1ha2UgdGhlIGxlYXJuaW5nIGdvYWwgZGlzYXBwZWFyIG9uY2UgdGhpcyB0YXNrXHJcbiAgICAgIC8vIGlzIGRlbGV0ZWQuXHJcbiAgICAgIGF3YWl0IHVzZXJUYXNrc1JlcG8udXBkYXRlKFtlbXB0eUxlYXJuaW5nR29hbFBsYWNlaG9sZGVyXSwgdXQgPT4ge1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odXQsIHsgbmFtZSwgZGVzY3JpcHRpb24sIHVybCB9KTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2UgeyovXHJcbiAgICAgIC8vIEFkZCBhbm90aGVyIHRhc2sgdG8gc2FtZSBsZWFybmluZy1nb2FsXHJcbiAgICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uaW5zZXJ0KFt7XHJcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICBkYXRlVGltZTogbGF0ZXN0VGltZVN0YW1wICsgMjAwMCxcclxuICAgICAgICBjb3Vyc2VOYW1lLFxyXG4gICAgICAgIGxlYXJuaW5nR29hbCxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgIHVybFxyXG4gICAgICB9XSk7XHJcbiAgICAvL31cclxuICB9XHJcblxyXG4gIHNldElzT3Blbihjb3Vyc2VOYW1lOiBzdHJpbmcsIGlzT3BlbjogYm9vbGVhbikge1xyXG4gICAgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby5zZXRXZWVrUGxhbm5lckJveE9wZW4oY291cnNlTmFtZSwgaXNPcGVuKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNldFRhc2tEb25lKHRhc2s6IFVzZXJUYXNrLCBkb25lOiBib29sZWFuKSB7XHJcbiAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFRhc2tEb25lU3RhdGUodGFzaywgZG9uZSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzZXRTdWJUYXNrRG9uZSh0YXNrOiBVc2VyVGFzaywgc3ViVGFzazogVXNlclN1YlRhc2ssIGRvbmU6IGJvb2xlYW4pIHtcclxuICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uc2V0U3ViVGFza0RvbmVTdGF0ZSh0YXNrLCBzdWJUYXNrLmlkLCBkb25lKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNvcHlGcm9tUHJldmlvdXNXZWVrKCkge1xyXG4gICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7aXNDb3B5aW5nVGFza3M6IHRydWV9KTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHsgdXNlclRhc2tzLCBvcGVuQ291cnNlcywgd2Vla0RhdGUgfSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgICBjb25zdCBwcmV2V2Vla05vID0gZ2V0QWRqdXN0ZWRXZWVrIChtb21lbnQod2Vla0RhdGUpLmFkZCgtMSwgJ3dlZWsnKSwgKTtcclxuICAgICAgY29uc3QgcHJldktFRFdlZWsgPSBLRURXZWVrKG1vbWVudCh3ZWVrRGF0ZSkueWVhcigpLCBwcmV2V2Vla05vKTtcclxuICAgICAgLy8gUmVhZCBsYXN0IHdlZWsncyBnb2FscyBhbmQgdGFza3NcclxuICAgICAgbGV0IHByZXZUYXNrcyA9IGF3YWl0IHRoaXMucHJvcHMuZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxVc2VyVGFzaz4oXCJ1c2VydGFza3NcIiwge1xyXG4gICAgICAgIGZyb206IHByZXZLRURXZWVrLm5vdEJlZm9yZSxcclxuICAgICAgICB0bzogcHJldktFRFdlZWsubm90QWZ0ZXIsXHJcbiAgICAgICAgcm9sZTogXCJVU0VSXCIsXHJcbiAgICAgICAgaW5jbHVkZTogW1widGFza1wiLCBcImNvdXJzZVwiLCBcImFjbFwiXSxcclxuICAgICAgICBmbGFnczogW1wiaW5jbHVkZUlkc09ubHlcIl1cclxuICAgICAgfSk7XHJcbiAgICAgIHByZXZUYXNrcyA9IHByZXZUYXNrc1xyXG4gICAgICAgIC5maWx0ZXIocHJldlRhc2sgPT4gIXByZXZUYXNrLmRvbmUpICAvLyBEb24ndCBjb3B5IGRvbmUgdGFza3NcclxuICAgICAgICAuZmlsdGVyKHByZXZUYXNrID0+ICEhcHJldlRhc2submFtZSkgLy8gRG9uJ3QgY29weSBlbXB0eSBsZWFybmluZyBnb2Fsc1xyXG4gICAgICAgIC5maWx0ZXIocHJldlRhc2sgPT4gIXVzZXJUYXNrcy5zb21lKHRhc2tPZkN1cnJlbnRXZWVrID0+XHJcbiAgICAgICAgICB0YXNrT2ZDdXJyZW50V2Vlay5uYW1lID09PSBwcmV2VGFzay5uYW1lICYmXHJcbiAgICAgICAgICB0YXNrT2ZDdXJyZW50V2Vlay5sZWFybmluZ0dvYWwgPT09IHByZXZUYXNrLmxlYXJuaW5nR29hbCAmJlxyXG4gICAgICAgICAgdGFza09mQ3VycmVudFdlZWsuY291cnNlTmFtZSA9PT0gcHJldlRhc2suY291cnNlTmFtZSkpOyAvLyBJZ25vcmUgaWRlbnRpY2FsIHRhc2tzIChhbHJlYWR5IGNvcGllZClcclxuXHJcbiAgICAgIC8vIE5vdyBjcmVhdGUgY29waWVzIGJ1dCBwbGFjZSB0aGVtIGluIHRoZSBjdXJyZW50IHdlZWsuXHJcbiAgICAgIGxldCBsYXRlc3RUaW1lU3RhbXAgPSBNYXRoLm1heC5hcHBseShNYXRoLm1heCwgW3dlZWtEYXRlXS5jb25jYXQodXNlclRhc2tzLm1hcCh0ID0+IHQuZGF0ZVRpbWUpKSk7XHJcblxyXG4gICAgICBjb25zdCBjb3BpZXMgPSBwcmV2VGFza3Muc29ydChjb21wYXJlUHJvcChcImRhdGVUaW1lXCIpKS5tYXAodGFzayA9PiB7XHJcbiAgICAgICAgY29uc3QgY29weTogVXNlclRhc2sgPSB7IC4uLnRhc2ssIGRhdGVUaW1lOiBsYXRlc3RUaW1lU3RhbXAgKz0gMTAwMCB9O1xyXG4gICAgICAgIGNvcHkuaWQgPSBjcmVhdGVVVUlEKCk7XHJcbiAgICAgICAgaWYgKGNvcHkuc3ViVGFza3MpIHtcclxuICAgICAgICAgIGNvcHkuc3ViVGFza3MgPSBjb3B5LnN1YlRhc2tzLmZpbHRlcihzdCA9PiAhc3QuZG9uZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSBjb3B5LiRldGFnO1xyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIFN0b3JlIGl0XHJcbiAgICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uaW5zZXJ0KGNvcGllcyk7XHJcbiAgICB9IGZpbmFsbHkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtpc0NvcHlpbmdUYXNrczogZmFsc2V9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldEhlYWRlclRpdGxlKCl7XHJcbiAgICByZXR1cm4gPGg0PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIubG9nQm9va1wiICBkZWZhdWx0TWVzc2FnZT1cIkxvZ2dib2tcIi8+PC9oND47XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB3ZWVrTnVtYmVyID0gbW9tZW50KHRoaXMuc3RhdGUud2Vla0RhdGUpLndlZWsoKTtcclxuICAgIGNvbnN0IHNob3dQcm9ncmVzc0NoYXJ0cyA9IGZlYXR1cmVzLndlZWtwbGFubmVyQ2hhcnRzO1xyXG4gICAgLy9jb25zb2xlLmxvZyhcIldlZWt5ZGF0ZTogXCIgICsgbmV3IERhdGUodGhpcy5zdGF0ZS53ZWVrRGF0ZSkgKyBcIiB3aGljaCBpcyB3ZWVrIG5vIFwiICsgd2Vla051bWJlcik7XHJcbiAgICBjb25zdCBjdXJyZW50V2VlayA9IG1vbWVudCgpLndlZWsoKTtcclxuICAgIGNvbnN0IHRhc2tTZXRzID0gcmVmaW5lKHRoaXMuc3RhdGUudXNlclRhc2tzKTtcclxuICAgIGNvbnN0IHsgZGlhbG9ncywgd2Vla1RleHRzVVQsIHN0cmF0ZWd5LCBhc3Nlc3NtZW50LCBpc0xvYWRpbmcsIGlzQ29weWluZ1Rhc2tzIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgaXNTYXZpbmcgPSB3ZWVrVGV4dHNVVCAmJiAod2Vla1RleHRzVVQuJG1ldGEgPT09ICdhZGRpbmcnIHx8IHdlZWtUZXh0c1VULiRtZXRhID09PSAndXBkYXRpbmcnKTtcclxuICAgIGNvbnN0IGlzU3RyYXRlZ3lFZGl0ZWQgPSAhIXdlZWtUZXh0c1VUICYmIChzdHJhdGVneSAhPT0gd2Vla1RleHRzVVQud2Vla1RleHRzLnN0cmF0ZWd5KTtcclxuICAgIGNvbnN0IGlzQXNzZXNzbWVudEVkaXRlZCA9ICEhd2Vla1RleHRzVVQgJiYgKGFzc2Vzc21lbnQgIT09IHdlZWtUZXh0c1VULndlZWtUZXh0cy5hc3Nlc3NtZW50KTtcclxuICAgIGNvbnN0IGVuYWJsZVNhdmVCdXR0b24gPSAhaXNTYXZpbmcgJiYgKGlzU3RyYXRlZ3lFZGl0ZWQgfHwgaXNBc3Nlc3NtZW50RWRpdGVkKTtcclxuXHJcbiAgICB2YXIgY2hhcnRUYXNrcyA9IGdldFdlZWtwbGFubmVyUHJvZ3Jlc3NEYXRhKHRhc2tTZXRzKTtcclxuXHJcbiAgICB2YXIgcGVyY2VudGFnZSA9IHRhc2tTZXRzLmxlbmd0aCA+IDAgPyBjaGFydFRhc2tzLmNvbXBsZXRlZFRhc2tzIC8gY2hhcnRUYXNrcy50b3RhbE51bWJlck9mVGFza3MgKiAxMDAgOiAwO1xyXG4gICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtga2VkX2JveGVkIHdlZWtQbGFubmVyJHt3ZWVrTnVtYmVyID09PSBjdXJyZW50V2VlayA/IFwiIGN1cnJlbnRXZWVrXCIgOiBcIlwifWB9XHJcbiAgICAgICAgb25LZXlEb3duPXtldiA9PiB7XHJcbiAgICAgICAgICBpZiAoZXYud2hpY2ggPT09IDgzICYmIGV2LmN0cmxLZXkpIHtcclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgaWYgKCFpc1NhdmluZyAmJiB0aGlzLmlzV2Vla1RleHRzRWRpdGVkKCkpIHtcclxuICAgICAgICAgICAgICB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYi50cmlnZ2VyQ2hhbmdlKDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfX0+XHJcbiAgICAgICAge3Nob3dQcm9ncmVzc0NoYXJ0cyAmJiB0aGlzLmdldEhlYWRlclRpdGxlKCl9XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRzXCI+XHJcbiAgICAgICAgICB7c2hvd1Byb2dyZXNzQ2hhcnRzID8gPGRpdiBjbGFzc05hbWU9XCJwcm9ncmVzc0JhclwiPjxQcm9ncmVzcyBwZXJjZW50YWdlID0ge3BlcmNlbnRhZ2V9Lz48L2Rpdj4gOiB0aGlzLmdldEhlYWRlclRpdGxlKCl9XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHdlZWtTZWxlY3RgfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxyXG4gICAgICAgICAgICAgIDxwPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIud2Vla051bWJlclwiIHZhbHVlcz17e3dlZWtOdW1iZXI6IHdlZWtOdW1iZXJ9fSBkZWZhdWx0TWVzc2FnZT1cIlZlY2thIHt3ZWVrTnVtYmVyfVwiLz48L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCkgPT4gdGhpcy5wcmV2V2VlaygpfT5cclxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtbGVmdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLm5leHRXZWVrKCl9PlxyXG4gICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1yaWdodFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICB7dGFza1NldHMubGVuZ3RoID4gMCAmJiA8aHIgLz59XHJcblxyXG4gICAgICAgIHt0YXNrU2V0cy5tYXAocHJvcHMgPT5cclxuICAgICAgICAgIDxVc2VyVGFza3NCb3hcclxuICAgICAgICAgICAga2V5PXtwcm9wcy5jb3Vyc2VOYW1lfVxyXG4gICAgICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgICAgIGNvdXJzZU5hbWU9e3Byb3BzLmNvdXJzZU5hbWV9XHJcbiAgICAgICAgICAgIGxlYXJuaW5nR29hbHM9e3Byb3BzLmxlYXJuaW5nR29hbHN9XHJcbiAgICAgICAgICAgIHZpZXdDb3Vyc2VVcmw9e3RoaXMucHJvcHMudmlld0NvdXJzZVVybH1cclxuICAgICAgICAgICAgb3BlbkNvdXJzZXM9e3RoaXMuc3RhdGUub3BlbkNvdXJzZXN9XHJcbiAgICAgICAgICAgIGFkZE93blRhc2s9eyhjb3Vyc2VOYW1lOiBzdHJpbmcsIGxlYXJuaW5nR29hbE5hbWU6IHN0cmluZykgPT4gdGhpcy5vcGVuQWRkT3duVGFza0RpYWxvZyhjb3Vyc2VOYW1lLCBsZWFybmluZ0dvYWxOYW1lKX1cclxuICAgICAgICAgICAgc2V0SXNPcGVuPXt0aGlzLnNldElzT3Blbi5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICBzZXRUYXNrRG9uZT17dGhpcy5zZXRUYXNrRG9uZS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICBzZXRTdWJUYXNrRG9uZT17dGhpcy5zZXRTdWJUYXNrRG9uZS5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICBlZGl0VGFzaz17dGFzayA9PiB0aGlzLmVkaXRUYXNrKHRhc2spfVxyXG4gICAgICAgICAgICBlZGl0U3ViVGFzaz17KHRhc2ssIHN1YlRhc2spID0+IHRoaXMuZWRpdFN1YlRhc2sodGFzaywgc3ViVGFzayl9XHJcbiAgICAgICAgICAgIHJlbW92ZUxlYXJuaW5nR29hbD17bGcgPT4gdGhpcy5yZW1vdmVMZWFybmluZ0dvYWwobGcpfSBcclxuICAgICAgICAgICAgZGlzcGxheVByb2dyZXNzID0ge3Nob3dQcm9ncmVzc0NoYXJ0c31cclxuICAgICAgICAgICAgcHJvZ3Jlc3NEYXRhID0ge2NoYXJ0VGFza3Muc3ViamVjdERhdGFbcHJvcHMuY291cnNlTmFtZV19IC8+KX1cclxuXHJcbiAgICAgICAgPGhyIC8+XHJcblxyXG4gICAgICAgIHtpc0xvYWRpbmcgPyA8U3Bpbm5lciAvPiA6IDxkaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9e2V2ID0+IHRoaXMub3BlbkFkZEdvYWxEaWFsb2coKX0+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWxpc3QtYWx0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmxlYXJuaW5nR29hbFwiIGRlZmF1bHRNZXNzYWdlPVwiRWdldCBsw6RyYW5kZW3DpWxcIi8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuXCIgc3R5bGU9e2lzQ29weWluZ1Rhc2tzID8ge29wYWNpdHk6IDAuNX0gOiB1bmRlZmluZWR9IG9uQ2xpY2s9e2V2ID0+ICghaXNDb3B5aW5nVGFza3MpICYmIHRoaXMuY29weUZyb21QcmV2aW91c1dlZWsoKX0+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb25lXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmNvcHlQcmV2aW91c1dlZWtUYWtzXCIgZGVmYXVsdE1lc3NhZ2U9XCJLb3BpZXJhIGVqIGtsYXJhIGZyw6VuIGbDtnJlZ8OlZW5kZSB2ZWNrYVwiLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPE9wZW5DbG9zZUJveFxyXG4gICAgICAgICAgICB0aXRsZT17PGg1PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuc3RyYXRlZ3lBbmRFdmFsdWF0aW9uXCIgZGVmYXVsdE1lc3NhZ2U9XCJTdHJhdGVnaSAmIFV0dsOkcmRlcmluZ1wiLz48L2g1Pn1cclxuICAgICAgICAgICAgaGVhZGVyT3Blbj17dGhpcy5zdGF0ZS5vcGVuQ291cnNlc1tcIlN0cmF0VXR2XCJdfVxyXG4gICAgICAgICAgICBvbk9wZW5DbG9zZT17YmVjYW1lT3BlbiA9PiB0aGlzLnNldElzT3BlbihcIlN0cmF0VXR2XCIsIGJlY2FtZU9wZW4pfVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8aDM+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5zdHJhdGVneVwiIGRlZmF1bHRNZXNzYWdlPVwiU3RyYXRlZ2lcIi8+PC9oMz5cclxuICAgICAgICAgICAgPHA+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5zdHJhdGVneURlc2NyaXB0aW9uXCIgZGVmYXVsdE1lc3NhZ2U9XCJIdXIgamFnIHNrYSBnw7ZyYSBmw7ZyIGF0dCBsw6RyYSBtaWcuXCIvPjwvcD5cclxuICAgICAgICAgICAgPGhyLz5cclxuICAgICAgICAgICAgPHRleHRhcmVhXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwid2Vla3BsYW5uZXItdGV4dGFyZWFcIlxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmVudi50dXRvcmVkfVxyXG4gICAgICAgICAgICAgIHZhbHVlPXtzdHJhdGVneSAmJiBzdHJhdGVneS5zdWJzdHIoMCwgTUFYX1NUUkFURUdZX0xFTkdUSCl9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3N0cmF0ZWd5OiAoZXYudGFyZ2V0LnZhbHVlIHx8ICcnKS5zdWJzdHIoMCwgTUFYX1NUUkFURUdZX0xFTkdUSCl9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMud2Vla1RleHRzU2F2aW5nSm9iLnRyaWdnZXJDaGFuZ2UoNTAwKTtcclxuICAgICAgICAgICAgICB9fSAvPlxyXG5cclxuICAgICAgICAgICAgPGgzPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuZXZhbHVhdGlvblwiIGRlZmF1bHRNZXNzYWdlPVwiVXR2w6RyZGVyaW5nXCIvPjwvaDM+XHJcbiAgICAgICAgICAgIDxwPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuZXZhbHVhdGlvbkRlc2NyaXB0aW9uXCIgZGVmYXVsdE1lc3NhZ2U9XCJSZWZsZWt0aW9uIGtyaW5nIGRpbiBhcmJldHNpbnNhdHMgb2NoIGRpbmEgdmFsZGEgc3RyYXRlZ2llciB1bmRlciB2ZWNrYW4uVXR2w6RyZGVyYSBpIGbDtnJow6VsbGFuZGUgdGlsbCBkaW5hIG3DpWwuXCIvPjwvcD5cclxuICAgICAgICAgICAgPGhyLz5cclxuICAgICAgICAgICAgPHRleHRhcmVhXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwid2Vla3BsYW5uZXItdGV4dGFyZWFcIlxyXG4gICAgICAgICAgICAgIHZhbHVlPXthc3Nlc3NtZW50ICYmIGFzc2Vzc21lbnQuc3Vic3RyKDAsIE1BWF9BU1NFU1NNRU5UX0xFTkdUSCl9XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RoaXMucHJvcHMuZW52LnR1dG9yZWR9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2Fzc2Vzc21lbnQ6IChldi50YXJnZXQudmFsdWUgfHwgJycpLnN1YnN0cigwLCBNQVhfQVNTRVNTTUVOVF9MRU5HVEgpfSlcclxuICAgICAgICAgICAgICAgIHRoaXMud2Vla1RleHRzU2F2aW5nSm9iLnRyaWdnZXJDaGFuZ2UoNTAwKTtcclxuICAgICAgICAgICAgICB9IH0vPlxyXG4gICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuXCJcclxuICAgICAgICAgICAgICB0YWJJbmRleD17MH1cclxuICAgICAgICAgICAgICBzdHlsZT17ZW5hYmxlU2F2ZUJ1dHRvbiA/IHt9IDoge29wYWNpdHk6IDAuNX19XHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCk9PiFpc1NhdmluZyAmJiB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYi50cmlnZ2VyQ2hhbmdlKDApfT5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWZsb3BweS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgLz5cclxuICAgICAgICAgICAgICAgICAge2VuYWJsZVNhdmVCdXR0b24gPyA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImNvbW1vbi5zYXZlXCIgZGVmYXVsdE1lc3NhZ2U9XCIgU3BhcmFcIi8+IDogPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZWRcIiBkZWZhdWx0TWVzc2FnZT1cIiBTcGFyYWRcIi8+fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L09wZW5DbG9zZUJveD5cclxuXHJcbiAgICAgICAgPC9kaXY+fVxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPERpYWxvZ3NcclxuICAgICAgICBkaWFsb2dzPXtkaWFsb2dzfVxyXG4gICAgICAgIHBvcERpYWxvZz17KCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKFxyXG4gICAgICAgICAgICAgICh7ZGlhbG9nc30pID0+ICh7IGRpYWxvZ3M6IGRpYWxvZ3Muc2xpY2UoMCwgZGlhbG9ncy5sZW5ndGggLSAxKSB9KSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSAvPlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgVXNlclRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFVzZXJUYXNrc0JveFByb3BzIH0gZnJvbSAnLi91c2VyLXRhc2tzLWJveCc7XHJcbmltcG9ydCB7IGFycmF5VG9NYXAsIGFycmF5VG9Mb29rdXAsIGNvbXBhcmVQcm9wLCBMIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWxzXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFZpcnR1YWxMZWFybmluZ0dvYWwge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBhbGxUYXNrczogVXNlclRhc2tbXTtcclxuICBzdGVwPzogbnVtYmVyO1xyXG4gIHVybD86IHN0cmluZztcclxuICB0YXNrczogVXNlclRhc2tbXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlZmluZSh0YXNrczogVXNlclRhc2tbXSkge1xyXG4gIGNvbnN0IHJlc3VsdCA9IFtdIGFzIFBhcnRpYWw8VXNlclRhc2tzQm94UHJvcHM+W107XHJcbiAgY29uc3QgbWFwcGVyID0ge30gYXMgeyBbbmFtZTogc3RyaW5nXTogVXNlclRhc2tzQm94UHJvcHMgfTtcclxuICBjb25zdCB0YXNrc1BlckNvdXJzZSA9IGFycmF5VG9Mb29rdXAodGFza3MsIHQgPT4gdC5jb3Vyc2VOYW1lIHx8ICcnKTtcclxuICBmb3IgKGNvbnN0IGNvdXJzZU5hbWUgb2YgT2JqZWN0LmtleXModGFza3NQZXJDb3Vyc2UpLnNvcnQoKS5maWx0ZXIoeCA9PiB4KS5jb25jYXQodGFza3NQZXJDb3Vyc2VbJyddID9cclxuICAgIFsnJ10gOiBbXSkpIHtcclxuICAgIGNvbnN0IGNvdXJzZVRhc2tzID0gdGFza3NQZXJDb3Vyc2VbY291cnNlTmFtZV0gfHwgdGFza3NQZXJDb3Vyc2VbJyddO1xyXG4gICAgY29uc3QgdGFza3NQZXJMZWFybmluZ0dvYWwgPSBhcnJheVRvTG9va3VwKGNvdXJzZVRhc2tzLCB0ID0+IHQubGVhcm5pbmdHb2FsKTtcclxuICAgIGNvbnN0IHJlc3VsdExlYXJuaW5nR29hbHM6IFZpcnR1YWxMZWFybmluZ0dvYWxbXSA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBsZWFybmluZ0dvYWwgb2YgT2JqZWN0LmtleXModGFza3NQZXJMZWFybmluZ0dvYWwpKSB7XHJcbiAgICAgIGNvbnN0IGxnVGFza3MgPSB0YXNrc1BlckxlYXJuaW5nR29hbFtsZWFybmluZ0dvYWxdLnNvcnQoY29tcGFyZVByb3AoXCJkYXRlVGltZVwiKSk7XHJcbiAgICAgIGNvbnN0IGxlYXJuaW5nR29hbFRhc2sgPSBsZ1Rhc2tzXHJcbiAgICAgICAgLmZpbHRlcih0ID0+IHQubmFtZSA9PSBudWxsKSAvLyBJZiBuYW1lIGlzIHVuZGVmaW5lZCBvciBudWxsLCB0aGlzIHJlcHJlc2VudHMgYSBsZWFybmluZyBnb2FsXHJcbiAgICAgICAgWzBdO1xyXG4gICAgICBjb25zdCB1cmwgPSBsZWFybmluZ0dvYWxUYXNrICYmIGxlYXJuaW5nR29hbFRhc2sudXJsO1xyXG4gICAgICByZXN1bHRMZWFybmluZ0dvYWxzLnB1c2goe1xyXG4gICAgICAgIG5hbWU6IGxlYXJuaW5nR29hbCxcclxuICAgICAgICBhbGxUYXNrczogbGdUYXNrcyxcclxuICAgICAgICB1cmwsXHJcbiAgICAgICAgc3RlcDogbGdUYXNrcy5tYXAodCA9PiB0LnN0ZXApLmZpbHRlcihzdGVwID0+IHN0ZXApWzBdLFxyXG4gICAgICAgIHRhc2tzOiBsZ1Rhc2tzLmZpbHRlcih0ID0+IHQubmFtZSlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXN1bHQucHVzaCh7XHJcbiAgICAgIGNvdXJzZU5hbWUsXHJcbiAgICAgIGxlYXJuaW5nR29hbHM6IHJlc3VsdExlYXJuaW5nR29hbHNcclxuICAgIH0pO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbiIsImltcG9ydCB7IFVzZXJUYXNrc0JveFByb3BzIH0gZnJvbSBcIi4uL3dlZWtwbGFubmVyL3VzZXItdGFza3MtYm94XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0V2Vla3BsYW5uZXJQcm9ncmVzc0RhdGEodGFza1NldHM6IFBhcnRpYWw8VXNlclRhc2tzQm94UHJvcHM+W10pIHtcclxuICAgIHZhciBjaGFydFRhc2tzOiB7XHJcbiAgICAgICAgY29tcGxldGVkVGFza3M6IG51bWJlciwgXHJcbiAgICAgICAgdG90YWxOdW1iZXJPZlRhc2tzOiBudW1iZXIsXHJcbiAgICAgICAgc3ViamVjdERhdGE6IHtcclxuICAgICAgICAgICAgW2NvbHVtbkhlYWRlcjogc3RyaW5nXTogeyBjb21wbGV0ZWROdW1iZXJPZlRhc2tzOiBudW1iZXIsIG51bWJlck9mVGFza3M6IG51bWJlciB9XHJcbiAgICAgICAgfVxyXG4gICAgfSA9IHtjb21wbGV0ZWRUYXNrczogMCwgdG90YWxOdW1iZXJPZlRhc2tzOiAwICwgc3ViamVjdERhdGE6IHt9fTtcclxuXHJcbiAgICB0YXNrU2V0cy5mb3JFYWNoKGVsZW0gPT4gZWxlbS5sZWFybmluZ0dvYWxzLmZvckVhY2goeCA9PiB7XHJcbiAgICAgICAgdmFyIHN1YmplY3RDb21wbGV0ZWRUYXNrcyA9IHgudGFza3MuZmlsdGVyKHQgPT4gdC5kb25lKS5sZW5ndGg7XHJcbiAgICAgICAgY2hhcnRUYXNrcy5zdWJqZWN0RGF0YVtlbGVtLmNvdXJzZU5hbWVdID0geyBjb21wbGV0ZWROdW1iZXJPZlRhc2tzOiBzdWJqZWN0Q29tcGxldGVkVGFza3MsIG51bWJlck9mVGFza3M6IHgudGFza3MubGVuZ3RoIH07XHJcbiAgICAgICAgY2hhcnRUYXNrcy5jb21wbGV0ZWRUYXNrcyArPSBzdWJqZWN0Q29tcGxldGVkVGFza3M7XHJcbiAgICAgICAgY2hhcnRUYXNrcy50b3RhbE51bWJlck9mVGFza3MgKz0geC50YXNrcy5sZW5ndGg7XHJcbiAgICB9KSk7XHJcbiAgICByZXR1cm4gY2hhcnRUYXNrcztcclxufSIsImltcG9ydCB7SW50bFByb3ZpZGVyLCBhZGRMb2NhbGVEYXRhfSBmcm9tICdyZWFjdC1pbnRsJztcclxuaW1wb3J0IGxvY2FsZV9lbiBmcm9tICdyZWFjdC1pbnRsL2xvY2FsZS1kYXRhL2VuJztcclxuaW1wb3J0IGxvY2FsZV9zdiBmcm9tICdyZWFjdC1pbnRsL2xvY2FsZS1kYXRhL3N2JztcclxuaW1wb3J0IG1lc3NhZ2VzX3N2IGZyb20gXCIuLi8uLi90cmFuc2xhdGlvbnMvc3YuanNvblwiO1xyXG5pbXBvcnQgbWVzc2FnZXNfZW4gZnJvbSBcIi4uLy4uL3RyYW5zbGF0aW9ucy9lbi5qc29uXCI7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcblxyXG5leHBvcnQgY29uc3Qgc2V0dXBJbnRsID0gPFAgZXh0ZW5kcyBvYmplY3Q+KENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxQPikgPT5cclxuICAgIGNsYXNzIF9TZXR1cExhbmd1YWdlSW50bCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQPntcclxuICAgICAgICBtZXNzYWdlcyA6IG9iamVjdDtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IocHJvcHMpe1xyXG4gICAgICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgICAgIGFkZExvY2FsZURhdGEoWy4uLmxvY2FsZV9lbiwuLi5sb2NhbGVfc3ZdKTtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlcyA9IHtcclxuICAgICAgICAgICAgJ3N2JzogbWVzc2FnZXNfc3YsXHJcbiAgICAgICAgICAgICdlbic6IG1lc3NhZ2VzX2VuXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIG1vbWVudCgpLmxvY2FsZShjZmcuS0VEX0xPQ0FMRSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZW5kZXIoKXtcclxuICAgICAgICAgICAgcmV0dXJuIDxJbnRsUHJvdmlkZXIgbG9jYWxlPXtjZmcuS0VEX0xPQ0FMRX0gbWVzc2FnZXM9e3RoaXMubWVzc2FnZXNbY2ZnLktFRF9MT0NBTEVdfT5cclxuICAgICAgICAgICAgICAgIDxDb21wb25lbnQgey4uLnRoaXMucHJvcHMgYXMgUH0gLz5cclxuICAgICAgICAgICAgPC9JbnRsUHJvdmlkZXI+XHJcbiAgICAgICAgfVxyXG4gICAgfSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdmlzaWJsZTogYm9vbGVhbjtcclxuICB0ZXh0OiBzdHJpbmc7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gIG9uQ29uZmlybTogKCk9PnZvaWQ7XHJcbiAgb25DYW5jZWw6ICgpPT52b2lkO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ29uZmlybWF0aW9uIChwcm9wczogUHJvcHMpIHtcclxuICByZXR1cm4gPGRpdlxyXG4gICAgY2xhc3NOYW1lPXtgY29uZmlybWF0aW9uLWJveCAke3Byb3BzLmNsYXNzTmFtZX0ke3Byb3BzLnZpc2libGUgPyBcIiB2aXNpYmxlXCIgOiBcIlwifWB9PlxyXG4gICAgPHA+e3Byb3BzLnRleHR9PC9wPlxyXG4gICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+cHJvcHMub25Db25maXJtKCl9Pk9LPC9idXR0b24+XHJcbiAgICA8YnV0dG9uIG9uQ2xpY2s9eygpPT5wcm9wcy5vbkNhbmNlbCgpfT5BdmJyeXQ8L2J1dHRvbj5cclxuICA8L2Rpdj47XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBDb3Vyc2UsIENvdXJzZU1vZHVsZSwgVGFzaywgVXNlclRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSB9IGZyb20gXCIuLi8uLi93ZWVrcGxhbm5lci93ZWVrcGxhbm5lci1wZXJzaXN0ZWQtc3RhdGVcIjtcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlELCBCYXRjaFJ1bm5lciwgRG9jdW1lbnRBY2Nlc3MgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IHVzZXJUYXNrc1JlcG8gfSBmcm9tICcuLi8uLi8uLi9yZXBvcy91c2VyLXRhc2tzLXJlcG8nO1xyXG5pbXBvcnQgeyBhcnJheVRvTWFwLCBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XHJcbmltcG9ydCB7IENvbmZpcm1hdGlvbiB9IGZyb20gJy4vY29uZmlybWF0aW9uJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgbGVhcm5pbmdUYXNrczogTGVhcm5pbmdNb2R1bGVUYXNrW11cclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICB3ZWVrRGF0ZTogbnVtYmVyO1xyXG4gIHVzZXJUYXNrczogVXNlclRhc2tbXTtcclxuICBjb25maXJtYXRpb25zOiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMZWFybmluZ01vZHVsZVRhc2sge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHVybDogc3RyaW5nO1xyXG4gIC8qKiBjb3Vyc2VOYW1lXHJcbiAgICogRm9yIEtHOiBjb3Vyc2VOYW1lXHJcbiAgICogRm9yIEtTOiBTdWJqZWN0IG5hbWVcclxuICAgKi9cclxuICBjb3Vyc2VOYW1lOiBzdHJpbmc7XHJcbiAgLyoqIGxlYXJuaW5nR29hbFxyXG4gICAqIEZvciBLRzogbW9kdWxlIG5hbWUgb3IgbGVhcm5pbmcgZ29hbCBvZiB0aGUgdGFza1xyXG4gICAqIEZvciBLUy9zdGVwLWNvdXJzZTogY291cnNlIG5hbWVcclxuICAgKiBGb3IgS1MvdGhlbWUtY291cnNlOiBsZWFybmluZyBnb2FsXHJcbiAgICovXHJcbiAgbGVhcm5pbmdHb2FsOiBzdHJpbmc7XHJcbiAgLyoqIFN0ZXBcclxuICAgKiBPbmx5IHByZXNlbnQgaW4gS1Mvc3RlcC1jb3Vyc2VcclxuICAgKi9cclxuICBzdGVwPzogbnVtYmVyO1xyXG4gIC8qKiB0YXNrXHJcbiAgICogT25seSBmb3IgY291cnNlcyBidWlsdCBieSBjb3Vyc2VidWlsZGVyXHJcbiAgICovXHJcbiAgdGFzaz86IFRhc2s7XHJcbiAgLyoqIGNvdXJzZVxyXG4gICAqIE9ubHkgZm9yIGNvdXJzZXMgYnVpbHQgYnkgY291cnNlYnVpbGRlclxyXG4gICAqL1xyXG4gIGNvdXJzZT86IENvdXJzZTtcclxuICAvKiogY291cnNlSW5mb1xyXG4gICAqIE9ubHkgZm9yIGNvdXJzZXMgYnVpbGQgYnkgc3ViamVjdHBsYW5uZXJcclxuICAgKi9cclxuICBjb3Vyc2VJbmZvPzoge1xyXG4gICAgc2Nob29sOiBzdHJpbmcgLy8gU2Nob29sIG5hbWVcclxuICAgIGNvdXJzZTogc3RyaW5nIC8vIENvdXJzZSBJbnN0YW5jZSBJRFxyXG4gICAgdGFiOiBzdHJpbmcgICAgLy8gQ291cnNlVGFiIElEXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGFza0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHVzZXJUYXNrczogW10sXHJcbiAgICAgIHdlZWtEYXRlOiBEYXRlLm5vdygpLFxyXG4gICAgICBjb25maXJtYXRpb25zOiBbXVxyXG4gICAgfVxyXG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTsgICAgXHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSAodXNlclRhc2tzOiBVc2VyVGFza1tdLCBwZXJzaXN0ZWQ6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUpIHtcclxuICAgIGlmIChwZXJzaXN0ZWQud2Vla0RhdGUgIT09IHRoaXMuc3RhdGUud2Vla0RhdGUpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY29uZmlybWF0aW9uczogW11cclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB1c2VyVGFza3MsXHJcbiAgICAgIHdlZWtEYXRlOiBwZXJzaXN0ZWQud2Vla0RhdGVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB1c2VyVGFza3NSZXBvLnN1YnNjcmliZSh0aGlzLm9uQ2hhbmdlKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgdXNlclRhc2tzUmVwby51bnN1YnNjcmliZSh0aGlzLm9uQ2hhbmdlKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHRvZ2dsZVRhc2sgKGxlYXJuaW5nVGFzazogTGVhcm5pbmdNb2R1bGVUYXNrKSB7XHJcbiAgICBjb25zdCB1c2VyVGFza3MgPSB0aGlzLnN0YXRlLnVzZXJUYXNrcy5maWx0ZXIodXQgPT4ge1xyXG4gICAgICByZXR1cm4gbGVhcm5pbmdUYXNrLnRhc2sgP1xyXG4gICAgICAgIHV0LnRhc2sgJiYgdXQudGFzay5zb21lKHQgPT4gdC5pZCA9PT0gbGVhcm5pbmdUYXNrLmlkKSA6XHJcbiAgICAgICAgdXQuc2l0ZVZpc2lvblBhZ2VJZCA9PT0gbGVhcm5pbmdUYXNrLmlkO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCB7d2Vla0RhdGV9ID0gdGhpcy5zdGF0ZTtcclxuICAgIFxyXG4gICAgaWYgKHVzZXJUYXNrcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgLy8gTm8gdGFzayBtYXRjaGVzIHRoaXMgbGVhcm5pbmdNb2R1bGVUYXNrIC0gbm90IHByZXNlbnQgaW4gd2Vla3BsYW5uZXIuXHJcbiAgICAgIGxldCBsYXRlc3RUaW1lU3RhbXAgPSBNYXRoLm1heC5hcHBseShcclxuICAgICAgICBNYXRoLm1heCxcclxuICAgICAgICBbd2Vla0RhdGVdLmNvbmNhdCh0aGlzLnN0YXRlLnVzZXJUYXNrcy5tYXAodCA9PiB0LmRhdGVUaW1lKSkpO1xyXG5cclxuICAgICAgY29uc3QgdXNlclRhc2s6IFVzZXJUYXNrID0ge1xyXG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgICAgY291cnNlTmFtZTogbGVhcm5pbmdUYXNrLmNvdXJzZU5hbWUsXHJcbiAgICAgICAgZGF0ZVRpbWU6IGxhdGVzdFRpbWVTdGFtcCArIDIwMDAsXHJcbiAgICAgICAgbGVhcm5pbmdHb2FsOiBsZWFybmluZ1Rhc2subGVhcm5pbmdHb2FsLFxyXG4gICAgICAgIG5hbWU6IGxlYXJuaW5nVGFzay5uYW1lLFxyXG4gICAgICAgIHVybDogbGVhcm5pbmdUYXNrLnVybCxcclxuICAgICAgICBhY2w6IFtcclxuICAgICAgICAgIC8vIERlZmF1bHQgQUNMOiBMZXQgdXNlciBzZWxmIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhpcyBpdGVtOlxyXG4gICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwiZW1haWxcIiwgZW52LmN1cnJlbnRVc2VyLm1haWwsIFwiU1wiKSxcclxuICAgICAgICAgIC8vIEFkZGl0aW9uYWwgQUNMOiBMZXQgZW1wbG95ZWVzIG9uIHNhbWUgc2Nob29sIGhhdmUgcmVhZCBhY2Nlc3MgdG8gaXQuXHJcbiAgICAgICAgICAvLyBUaGlzIGN1cnJlbnRseSBvbmx5IGFwcGxpZXMgdG8gdGFza3MgdGhhdCByZWZlciB0byBjb3Vyc2UgdGFza3MgKG5vdCBjdXN0b20gdGFza3MhKVxyXG4gICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwic2Nob29sUm9sZVwiLCBgJHtlbnYuY3VycmVudFVzZXIuc2Nob29sfS9FTVBMT1lFRWAsIFwiUlwiKVxyXG4gICAgICAgIF0ubWFwKGFjID0+IGFjLnRvU3RyaW5nKCkpXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChsZWFybmluZ1Rhc2sudGFzayAmJiBsZWFybmluZ1Rhc2sudGFzay5kZWFkbGluZSkge1xyXG4gICAgICAgIHVzZXJUYXNrLmRlYWRsaW5lID0gbGVhcm5pbmdUYXNrLnRhc2suZGVhZGxpbmU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGxlYXJuaW5nVGFzay50YXNrKSB7XHJcbiAgICAgICAgdXNlclRhc2sudGFzayA9IFtsZWFybmluZ1Rhc2sudGFza107XHJcbiAgICAgICAgaWYgKGxlYXJuaW5nVGFzay5jb3Vyc2UpIHtcclxuICAgICAgICAgIHVzZXJUYXNrLmNvdXJzZSA9IFtsZWFybmluZ1Rhc2suY291cnNlXTtcclxuICAgICAgICB9IGVsc2UgaWYgKGxlYXJuaW5nVGFzay5jb3Vyc2VJbmZvKSB7XHJcbiAgICAgICAgICB1c2VyVGFzay5jb3Vyc2VJbmZvID0gbGVhcm5pbmdUYXNrLmNvdXJzZUluZm87XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVzZXJUYXNrLnNpdGVWaXNpb25QYWdlSWQgPSBsZWFybmluZ1Rhc2suaWQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGxlYXJuaW5nVGFzay5zdGVwKSB7XHJcbiAgICAgICAgdXNlclRhc2suc3RlcCA9IGxlYXJuaW5nVGFzay5zdGVwO1xyXG4gICAgICB9XHJcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICB1c2VyVGFza3NSZXBvLnNldFdlZWtQbGFubmVyQm94T3BlbihsZWFybmluZ1Rhc2suY291cnNlTmFtZSwgdHJ1ZSksXHJcbiAgICAgICAgdXNlclRhc2tzUmVwby5pbnNlcnQoW3VzZXJUYXNrXSldKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIEFscmVhZHkgcHJlc2VudCBpbiB3ZWVrcGxhbm5lci4gSXQncyB0aW1lIHRvIGRlbGV0ZSB0aG9zZSB0aGF0IG1hdGNoZWQgdXMuXHJcbiAgICAgIGF3YWl0IHVzZXJUYXNrc1JlcG8uZGVsZXRlKHVzZXJUYXNrcy5tYXAodCA9PiB0LmlkKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHtsZWFybmluZ1Rhc2tzfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB1c2VyVGFza3MgPSBhcnJheVRvTWFwKHRoaXMuc3RhdGUudXNlclRhc2tzLCB1dCA9PiB1dC50YXNrICYmIHV0LnRhc2subGVuZ3RoID4gMCA/XHJcbiAgICAgIHV0LnRhc2subWFwKHQgPT4gdC5pZClbMF0gOiAvLyBjb3Vyc2UtYnVpbGRlciB0YXNrcyBsb29rZWQgdXAgYnkgaWRcclxuICAgICAgdXQuc2l0ZVZpc2lvblBhZ2VJZCA/IHV0LnNpdGVWaXNpb25QYWdlSWQgOiAvLyBub24tY291cnNlLWJ1aWxkZXIgdGFza3NcclxuICAgICAgdXQudXJsKTtcclxuICAgIGNvbnN0IHtjb25maXJtYXRpb25zfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB3ZWVrUGxhbm5lcldlZWsgPSBtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkud2VlaygpO1xyXG4gICAgY29uc3QgY3VycmVudFdlZWsgPSBtb21lbnQoKS53ZWVrKCk7XHJcbiAgICBjb25zdCBmb3JXZWVrU3RyaW5nID0gd2Vla1BsYW5uZXJXZWVrID09PSBjdXJyZW50V2VlayA/IFwiXCIgOlxyXG4gICAgd2Vla1BsYW5uZXJXZWVrID09PSBjdXJyZW50V2VlayArIDEgPyBMYGbDtnIgbsOkc3RhIHZlY2thICh2JHt3ZWVrUGxhbm5lcldlZWt9KWAgOlxyXG4gICAgd2Vla1BsYW5uZXJXZWVrID09PSBjdXJyZW50V2VlayAtIDEgPyBMYGbDtnIgZsO2cnJhIHZlY2thbiAodiR7d2Vla1BsYW5uZXJXZWVrfSlgIDpcclxuICAgIExgZsO2ciB2ZWNrYSAke3dlZWtQbGFubmVyV2Vla31gO1xyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cclxuICAgICAge2xlYXJuaW5nVGFza3MubWFwKChsZWFybmluZ1Rhc2ssIGlkeCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhc2tMb29rdXBJZCA9IGxlYXJuaW5nVGFzay5pZDtcclxuICAgICAgICBjb25zdCB1c2VyVGFzayA9IHVzZXJUYXNrc1t0YXNrTG9va3VwSWRdIHx8IHskbWV0YTogJ2RlbGV0ZWQnfSBhcyBQYXJ0aWFsPFVzZXJUYXNrPjsgLy8gTm8gZXhpc3QgPSAkbWV0YTogJ2RlbGV0ZWQnXHJcbiAgICAgICAgY29uc3QgaXNXb3JraW5nID0gdXNlclRhc2suJG1ldGEgPT09ICdhZGRpbmcnIHx8IHVzZXJUYXNrLiRtZXRhID09PSAnZGVsZXRpbmcnO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdXNlclRhc2suJG1ldGEgIT09ICdkZWxldGVkJyAmJiB1c2VyVGFzay4kbWV0YSAhPT0gJ2RlbGV0aW5nJztcclxuICAgICAgICBjb25zdCBkZXNjcmliZWRBY3Rpb24gPSBzZWxlY3RlZCA/XHJcbiAgICAgICAgICAgICAgICAgIExgVGEgYm9ydCB1cHBnaWZ0ZW4gZnLDpW4gZWdlbiB2ZWNrb3BsYW5lcmluZyAke2ZvcldlZWtTdHJpbmd9YCA6XHJcbiAgICAgICAgICAgICAgICAgIExgTMOkZ2cgdGlsbCB1cHBnaWZ0ZW4gaSBlZ2VuIHZlY2tvcGxhbmVyaW5nICR7Zm9yV2Vla1N0cmluZ31gO1xyXG4gICAgICAgIGNvbnN0IGNvbmZpcm1hdGlvblZpc2libGUgPVxyXG4gICAgICAgICAgY29uZmlybWF0aW9ucy5zb21lKHRpZCA9PiB0YXNrTG9va3VwSWQgPT09IHRpZCk7XHJcblxyXG4gICAgICAgIHJldHVybiA8ZGl2IGtleT17bGVhcm5pbmdUYXNrLmlkfT48ZGl2IGtleT17dGFza0xvb2t1cElkfSBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgIDxkaXZcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHNlbGVjdGVkQm94JHtzZWxlY3RlZCA/ICcgc2VsZWN0ZWQnIDogJyd9YH1cclxuICAgICAgICAgICAgICAgIHN0eWxlPXtpc1dvcmtpbmcgPyB7b3BhY2l0eTogMC41fToge319XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+IWlzV29ya2luZyAmJiB3ZWVrUGxhbm5lcldlZWsgPT09IGN1cnJlbnRXZWVrID9cclxuICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVUYXNrKGxlYXJuaW5nVGFzaykgOlxyXG4gICAgICAgICAgICAgICAgICBjb25maXJtYXRpb25WaXNpYmxlID8gXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29uZmlybWF0aW9uczogY29uZmlybWF0aW9ucy5maWx0ZXIodGlkID0+IHRpZCAhPT0gdGFza0xvb2t1cElkKX0pIDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtjb25maXJtYXRpb25zOiBbLi4uY29uZmlybWF0aW9uc10uY29uY2F0KHRhc2tMb29rdXBJZCl9KX1cclxuICAgICAgICAgICAgICAgIHRpdGxlPXtkZXNjcmliZWRBY3Rpb259PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICA8YSBocmVmPXtsZWFybmluZ1Rhc2sudXJsfT57bGVhcm5pbmdUYXNrLm5hbWV9PC9hPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPENvbmZpcm1hdGlvblxyXG4gICAgICAgICAgICB2aXNpYmxlPXtjb25maXJtYXRpb25WaXNpYmxlfVxyXG4gICAgICAgICAgICB0ZXh0PXtkZXNjcmliZWRBY3Rpb259XHJcbiAgICAgICAgICAgIG9uQ29uZmlybT17KCk9PntcclxuICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVRhc2sobGVhcm5pbmdUYXNrKTtcclxuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtjb25maXJtYXRpb25zOiBjb25maXJtYXRpb25zLmZpbHRlcih0aWQgPT4gdGlkICE9PSB0YXNrTG9va3VwSWQpfSk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgIG9uQ2FuY2VsPXsoKT0+e1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NvbmZpcm1hdGlvbnM6IGNvbmZpcm1hdGlvbnMuZmlsdGVyKHRpZCA9PiB0aWQgIT09IHRhc2tMb29rdXBJZCl9KTtcclxuICAgICAgICAgICAgfX0gLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICB9XHJcbiAgICAgICl9XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgS2VkUmVwbyB9IGZyb20gJy4va2VkLXJlcG8nO1xyXG5pbXBvcnQgeyBVc2VySGlkZGVuQ291cnNlLCBTY2hvb2wsIENvdXJzZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBFRFNDb3Vyc2UgfSBmcm9tICcuLi9jb250cmFjdHMvZWRzJztcclxuaW1wb3J0IHsgc2hvd0Vycm9yLCBmbGF0dGVuLCBjb21wYXJlUHJvcCwgYXJyYXlUb01hcCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgRURTUGVyaW9kIH0gZnJvbSAnLi4vYXBpcy9lZHNjbGllbnQnO1xyXG5pbXBvcnQgeyBnZXRTY2hvb2xNb21lbnQgfSBmcm9tICcuLi91dGlscy9zY2hvb2wtbW9tZW50JztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5leHBvcnQgbGV0IGhpZGRlbkNvdXJzZXNSZXBvID0gZW52LmhpZGRlbkNvdXJzZXNSZXBvIGFzIEhpZGRlbkNvdXJzZXNSZXBvO1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ291cnNlV2l0aEhpZGRlblN0YXRlIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBkZXNjcmlwdGlvbj86IHN0cmluZztcclxuICB2aXNpYmxlOiBib29sZWFuO1xyXG4gIGRlZmF1bHRWaXNpYmxlOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBIaWRkZW5Db3Vyc2VzU3Vic2NyaWJlciA9IChjb3Vyc2VzOiBDb3Vyc2VXaXRoSGlkZGVuU3RhdGVbXSkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaWJlck9wdGlvbnMge1xyXG4gIGZ1bGxDb3Vyc2U6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNsYXNzIEhpZGRlbkNvdXJzZXNSZXBvIHtcclxuICByZXN1bHQ6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZVtdIHwgbnVsbCA9IG51bGw7XHJcbiAgc3Vic2NyaWJlcnM6IHtzdWJzY3JpYmVyOiBIaWRkZW5Db3Vyc2VzU3Vic2NyaWJlciwgb3B0aW9uczogU3Vic2NyaWJlck9wdGlvbnN9W10gPSBbXTtcclxuICBmdWxsQ291cnNlOiBib29sZWFuID0gZmFsc2U7XHJcbiAga2VkQ291cnNlc1Byb21pc2U6IFByb21pc2U8UGFydGlhbDxDb3Vyc2U+W10+O1xyXG4gIGVkc0NvdXJzZXNQcm9taXNlOiBQcm9taXNlPEVEU0NvdXJzZVtdPjtcclxuICB1c2VySGlkZGVuQ291cnNlc1Byb21pc2U6IFByb21pc2U8VXNlckhpZGRlbkNvdXJzZVtdPjtcclxuICBrZWRSZXBvOiBLZWRSZXBvPFVzZXJIaWRkZW5Db3Vyc2U+O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMua2VkUmVwbyA9IG5ldyBLZWRSZXBvPFVzZXJIaWRkZW5Db3Vyc2U+KHtcclxuICAgICAgZ2V0Q2xpZW50OiAoKSA9PiBlbnYua2VkQmFja2VuZENsaWVudCxcclxuICAgICAgb3B0aW1pc3RpYzogdHJ1ZSxcclxuICAgICAgdGFibGU6IFwidXNlcmhpZGRlbmNvdXJzZXNcIixcclxuICAgICAgdXNlcjogZW52LmN1cnJlbnRVc2VyID8gZW52LmN1cnJlbnRVc2VyLm1haWwgOiBcIlwiLFxyXG4gICAgICBnZXRRdWVyeU9wdGlvbnM6IGFzeW5jICgpID0+ICh7cm9sZTogXCJVU0VSXCJ9KSxcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGluaXRQcm9taXNlID0gdGhpcy5pbml0KCk7XHJcblxyXG4gICAgUHJvbWlzZS5hbGwoW1xyXG4gICAgICBpbml0UHJvbWlzZSxcclxuICAgICAgdGhpcy5rZWRDb3Vyc2VzUHJvbWlzZSxcclxuICAgICAgdGhpcy5lZHNDb3Vyc2VzUHJvbWlzZVxyXG4gICAgXSkuY2F0Y2goZXJyID0+IHNob3dFcnJvcihlcnIpKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGluaXQoKSB7XHJcbiAgICAvLyBXYWl0IHRpbGwgd2UgaGF2ZSBhIGN1cnJlbnRVc2VyIHRoYXQgaXMgYWNjdXJhdGUgYWxzbyBmb3IgaW1wZXJzb25hdGVkIHVzZXJzLlxyXG4gICAgY29uc3QgYmVhcmVyUHJvbWlzZSA9IGVudi5iZWFyZXJQcm92aWRlciA/IGVudi5iZWFyZXJQcm92aWRlci5nZXRCZWFyZXIoKSA6IFByb21pc2UucmVzb2x2ZSh7fSk7XHJcblxyXG4gICAgLy8gSW4gcGFyYWxsZWxsLCB3ZSByZXF1ZXN0OlxyXG4gICAgLy8gIDEpIEtFREJhY2tlbmQ6IFNjaG9vbHMuYWN0aXZlQ291cnNlc1xyXG4gICAgLy8gIDIpIEVEUy5nZXRBY3RpdmVBY291cnNlcygpXHJcbiAgICAvLyAgMykgKHZpYSBzdWJzY3JpcHRpb24pOiBLRURCYWNrZW5kOiB1c2VySGlkZGVuQ291cnNlc1xyXG4gICAgXHJcbiAgICB0aGlzLmtlZENvdXJzZXNQcm9taXNlID0gYmVhcmVyUHJvbWlzZS50aGVuKCgpPT50aGlzLmxpc3RLZWRDb3Vyc2VzKCkpO1xyXG4gICAgdGhpcy5lZHNDb3Vyc2VzUHJvbWlzZSA9IGJlYXJlclByb21pc2UudGhlbigoKT0+dGhpcy5saXN0RURTQ291cnNlcygpKTtcclxuICAgIGxldCByZXNvbHZlVXNlckhpZGRlbkNvdXJzZXNQcm9taXNlOiAoeDogVXNlckhpZGRlbkNvdXJzZVtdKT0+dm9pZDtcclxuICAgIGxldCB1c2VySGlkZGVuQ291cnNlc1Jlc29sdmVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnVzZXJIaWRkZW5Db3Vyc2VzUHJvbWlzZSA9IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVzb2x2ZVVzZXJIaWRkZW5Db3Vyc2VzUHJvbWlzZSA9IHggPT4ge1xyXG4gICAgICBpZiAodXNlckhpZGRlbkNvdXJzZXNSZXNvbHZlZCkge1xyXG4gICAgICAgIHRoaXMudXNlckhpZGRlbkNvdXJzZXNQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVzZXJIaWRkZW5Db3Vyc2VzUmVzb2x2ZWQgPSB0cnVlO1xyXG4gICAgICAgIHJlc29sdmUoeCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgYXdhaXQgYmVhcmVyUHJvbWlzZTtcclxuXHJcbiAgICB0aGlzLmtlZFJlcG8ubWVtLnN1YnNjcmliZShhc3luYyB1c2VySGlkZGVuQ291cnNlcyA9PiB7XHJcbiAgICAgIC8vIENoYW5nZSBvciBpbml0aWFsIHZhbHVlIHJlYWR5IHRvIGJlIG5vdGlmaWVkIG91dC5cclxuICAgICAgLy8gQnV0IGZpcnN0LCBjaGVjayB3ZSBoYXZlIGFsbCB0aGUgcmVsYXRlZCBkYXRhIHJlc3BvbnNlcyB3ZSBuZWVkLlxyXG4gICAgICBjb25zdCBbYWN0aXZlQ291cnNlcywgZWRzQWN0aXZlQ291cnNlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgdGhpcy5rZWRDb3Vyc2VzUHJvbWlzZSwgXHJcbiAgICAgICAgdGhpcy5lZHNDb3Vyc2VzUHJvbWlzZV0pO1xyXG4gICAgICBcclxuICAgICAgLy8gUmVmaW5lIHRoZSB0aHJlZSByZXN1bHRzIGludG8gYSBzaW5nbGUgcmVzdWx0XHJcbiAgICAgIHRoaXMucmVzdWx0ID0gYXdhaXQgdGhpcy5jcmVhdGVDb3Vyc2VzTGlzdChlZHNBY3RpdmVDb3Vyc2VzLCB1c2VySGlkZGVuQ291cnNlcywgYWN0aXZlQ291cnNlcyk7XHJcbiAgICAgIC8vIE5vdGlmeSBvdXIgc3Vic2NyaWJlcnM6XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChzdWJzY3JpYmVyID0+IHRoaXMubm90aWZ5U3Vic2NyaWJlcihzdWJzY3JpYmVyLnN1YnNjcmliZXIsIHN1YnNjcmliZXIub3B0aW9ucykpO1xyXG4gICAgICByZXNvbHZlVXNlckhpZGRlbkNvdXJzZXNQcm9taXNlKHVzZXJIaWRkZW5Db3Vyc2VzKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbGlzdEtlZENvdXJzZXMoKSB7XHJcbiAgICBjb25zdCBmdWxsQ291cnNlID0gdGhpcy5mdWxsQ291cnNlO1xyXG4gICAgY29uc29sZS5sb2coXCJGdWxsQ291cnNlOiBcIisgZnVsbENvdXJzZSk7XHJcbiAgICBjb25zdCBzY2hvb2xzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTY2hvb2w+KCdzY2hvb2xzJywge1xyXG4gICAgICByb2xlOiBcIlVTRVJcIiwgLy8gV29ya2Fyb3VuZCBmcm9tIHNob3dpbmcgYWN0aXZhdGVkIHRlbXBsYXRlcyBhbW9uZyBjb3Vyc2VzIG9mIHRoZSBzY2hvb2xcclxuICAgICAgbmFtZTogZW52LmN1cnJlbnRVc2VyLnNjaG9vbCxcclxuICAgICAgaW5jbHVkZTogXCJhY3RpdmVDb3Vyc2VzXCIsXHJcbiAgICAgIGZsYWdzOiBmdWxsQ291cnNlID8gW10gOiBbXCJpbmNsdWRlSWRzQW5kTmFtZXNPbmx5XCJdLFxyXG4gICAgICBjYWNoZUJ1c3Q6IGVudi5jdXJyZW50VXNlci51c2VybmFtZVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBhY3RpdmVDb3Vyc2VzID0gZmxhdHRlbihzY2hvb2xzLm1hcChzY2hvb2wgPT4gc2Nob29sLmFjdGl2ZUNvdXJzZXMpKS5zb3J0KGNvbXBhcmVQcm9wKFwibmFtZVwiKSlcclxuICAgIHJldHVybiBhY3RpdmVDb3Vyc2VzO1xyXG4gIH1cclxuXHJcbiAgbGlzdEVEU0NvdXJzZXMoKTogUHJvbWlzZTxFRFNDb3Vyc2VbXSB8IG51bGw+IHtcclxuICAgIGNvbnN0IHBlcmlvZE5hbWUgPSBuZXcgRURTUGVyaW9kKGdldFNjaG9vbE1vbWVudChtb21lbnQoKSkpLnBlcmlvZDtcclxuICAgIHJldHVybiBlbnYuY3VycmVudFVzZXIucm9sZXMuaW5kZXhPZignRU1QTE9ZRUUnKSA9PT0gLTEgP1xyXG4gICAgICAvLyBTVFVERU5UcyBzaG91bGQsIGJ5IGRlZmF1bHQsIG9ubHkgc2hvdyBjb3Vyc2VzIHRoYXQgaXMgbGlzdGVkIGluIEVEU1xyXG4gICAgICBlbnYuZWRzQ2xpZW50LmdldEFjdGl2ZUNvdXJzZXMoe3BlcmlvZE5hbWV9KSA6XHJcbiAgICAgIC8vIEVNUExPWUVFcyBzaG91bGQsIGJ5IGRlZmF1bHQsIHNob3cgYWxsIGNvdXJzZXMgb24gc2Nob29sIC0gbm8gbmVlZCB0byBxdWVyeSBFRFNcclxuICAgICAgbnVsbDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNyZWF0ZUNvdXJzZXNMaXN0KFxyXG4gICAgZWRzQWN0aXZlQ291cnNlczogRURTQ291cnNlW10gfCBudWxsLFxyXG4gICAgdXNlckhpZGRlbkNvdXJzZXM6IFVzZXJIaWRkZW5Db3Vyc2VbXSxcclxuICAgIGFjdGl2ZUNvdXJzZXM6IFBhcnRpYWw8Q291cnNlPltdKSA6IFByb21pc2U8Q291cnNlV2l0aEhpZGRlblN0YXRlW10+XHJcbiAge1xyXG4gICAgY29uc3QgaGlkZGVuQ291cnNlc01hcCA9IGFycmF5VG9NYXAodXNlckhpZGRlbkNvdXJzZXMuZmlsdGVyKGhjID0+ICFoYy5zaG93KSwgaGMgPT4gaGMubmFtZSk7XHJcbiAgICBjb25zdCB2aXNpYmxlQ291cnNlc01hcCA9IGFycmF5VG9NYXAodXNlckhpZGRlbkNvdXJzZXMuZmlsdGVyKGhjID0+IGhjLnNob3cpLCBoYyA9PiBoYy5uYW1lKTtcclxuXHJcbiAgICBjb25zdCBpc1N0dWRlbnQgPSBlbnYuY3VycmVudFVzZXIucm9sZXMuc29tZShyb2xlID0+IHJvbGUgPT09ICdTVFVERU5UJyk7XHJcblxyXG4gICAgY29uc3QgZWRzQ291cnNlTWFwID0gZWRzQWN0aXZlQ291cnNlcyA/XHJcbiAgICAgIGFycmF5VG9NYXAoZWRzQWN0aXZlQ291cnNlcywgYyA9PiBjLm5hbWUpIDpcclxuICAgICAge307XHJcblxyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5hbGwoYWN0aXZlQ291cnNlcy5tYXAoYXN5bmMgKHtpZCwgbmFtZSwgZGVzY3JpcHRpb24sIG1vZGlmaWVkQnl9KSA9PiB7XHJcblxyXG4gICAgICBsZXQgZWRzQ291cnNlID0gZWRzQ291cnNlTWFwW25hbWVdO1xyXG5cclxuICAgICAgbGV0IGRlZmF1bHRWaXNpYmxlID0gaXNTdHVkZW50ID9cclxuICAgICAgICBlZHNDb3Vyc2UgIT0gbnVsbCA6IC8vIENvdXJzZSBuYW1lIGFsc28gbGlzdGVkIGluIEVEU1xyXG4gICAgICAgIHRydWU7IC8vIFRlYWNoZXJzIG5vdCBkZXBlbmRlbnQgb24gRURTIGxpc3RpbmdcclxuXHJcbiAgICAgIGxldCB2aXNpYmxlID0gZGVmYXVsdFZpc2libGUgP1xyXG4gICAgICAgICFoaWRkZW5Db3Vyc2VzTWFwW2lkXSA6IC8vIFZpc2libGUgdW5sZXNzIHVzZXIgaGFzIG92ZXJyaWRkZW4gdGhhdC5cclxuICAgICAgICAhIXZpc2libGVDb3Vyc2VzTWFwW2lkXTsgLy8gSGlkZGVuIHVubGVzcyB1c2VyIGhhcyBvdmVycmlkZGVuIHRoYXQuXHJcbiAgICAgIFxyXG4gICAgICAvLyBSZXNvbHZlIGRlc2NyaXB0aW9uOlxyXG4gICAgICBpZiAobW9kaWZpZWRCeSAmJiBtb2RpZmllZEJ5Lm5hbWUgJiYgIWRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgZGVzY3JpcHRpb24gPSBgJHttb2RpZmllZEJ5Lm5hbWV9cyB2ZXJzaW9uYDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBpZCxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgIHZpc2libGUsXHJcbiAgICAgICAgZGVmYXVsdFZpc2libGVcclxuICAgICAgfTtcclxuICAgIH0pKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0LnNvcnQoKHtuYW1lOiBhfSwge25hbWU6IGJ9KSA9PiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBoaWRlQ291cnNlKGM6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZSkge1xyXG4gICAgY29uc3Qgb3ZlcnJpZGVzID0gdGhpcy5rZWRSZXBvLm1lbS5pdGVtcy5maWx0ZXIoaGMgPT4gaGMubmFtZSA9PT0gYy5pZCk7XHJcbiAgICBpZiAoYy5kZWZhdWx0VmlzaWJsZSkge1xyXG4gICAgICBhd2FpdCB0aGlzLmtlZFJlcG8uaW5zZXJ0KFt7XHJcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICBuYW1lOiBjLmlkXHJcbiAgICAgIH1dKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGF3YWl0IHRoaXMua2VkUmVwby5kZWxldGUob3ZlcnJpZGVzLm1hcChvdiA9PiBvdi5pZCkpOyAgICAgIFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2hvd0NvdXJzZShjOiBDb3Vyc2VXaXRoSGlkZGVuU3RhdGUpIHtcclxuICAgIGNvbnN0IG92ZXJyaWRlcyA9IHRoaXMua2VkUmVwby5tZW0uaXRlbXMuZmlsdGVyKGhjID0+IGhjLm5hbWUgPT09IGMuaWQpO1xyXG4gICAgaWYgKGMuZGVmYXVsdFZpc2libGUpIHtcclxuICAgICAgYXdhaXQgdGhpcy5rZWRSZXBvLmRlbGV0ZShvdmVycmlkZXMubWFwKG92ID0+IG92LmlkKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhd2FpdCB0aGlzLmtlZFJlcG8uaW5zZXJ0KFt7XHJcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICBuYW1lOiBjLmlkLFxyXG4gICAgICAgIHNob3c6IHRydWVcclxuICAgICAgfV0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbm90aWZ5U3Vic2NyaWJlciA9IChzdWJzY3JpYmVyOiBIaWRkZW5Db3Vyc2VzU3Vic2NyaWJlciwgb3B0aW9uczogU3Vic2NyaWJlck9wdGlvbnMpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHN1YnNjcmliZXIob3B0aW9ucy5mdWxsQ291cnNlID8gdGhpcy5yZXN1bHQgOiB0aGlzLnJlc3VsdC5maWx0ZXIoYyA9PiBjLnZpc2libGUpKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBzdWJzY3JpYmUgKHN1YnNjcmliZXI6IEhpZGRlbkNvdXJzZXNTdWJzY3JpYmVyLCBvcHRpb25zOiBTdWJzY3JpYmVyT3B0aW9ucykge1xyXG4gICAgaWYgKCF0aGlzLmZ1bGxDb3Vyc2UgJiYgb3B0aW9ucy5mdWxsQ291cnNlKSB7XHJcbiAgICAgIC8vIFRoZSBzdWJzY3JpYmVyIGRlbWFuZHMgZnVsbCBjb3Vyc2VzXHJcbiAgICAgIC8vIE5lZWQgdG8gcXVlcnkgdGhhdCBiZWZvcmUgbm90aWZ5aW5nXHJcbiAgICAgIC8vIEFsc28gYWZmZWN0IHN0YXRlIGZvciBmdXR1cmUgaW50ZXJuYWwgbm90aWZpY2F0aW9uXHJcbiAgICAgIHRoaXMuZnVsbENvdXJzZSA9IG9wdGlvbnMuZnVsbENvdXJzZTtcclxuICAgICAgdGhpcy5rZWRDb3Vyc2VzUHJvbWlzZSA9IHRoaXMubGlzdEtlZENvdXJzZXMoKTsgLy8gUmVkbyB0aGlzIGNhbGwsIG5vdyBsb2FkaW5nIGZ1bGwgY291cnNlc1xyXG4gICAgICAvLyBXYWl0IGZvciBhbGwgb3V0c3RhbmRpbmcgZmV0Y2goKSBjYWxscyB0byBjb21wbGV0ZTpcclxuICAgICAgY29uc3QgW2FjdGl2ZUNvdXJzZXMsIGVkc0FjdGl2ZUNvdXJzZXMsIHVzZXJIaWRkZW5Db3Vyc2VzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICB0aGlzLmtlZENvdXJzZXNQcm9taXNlLCBcclxuICAgICAgICB0aGlzLmVkc0NvdXJzZXNQcm9taXNlLFxyXG4gICAgICAgIHRoaXMudXNlckhpZGRlbkNvdXJzZXNQcm9taXNlXSk7XHJcbiAgICAgIC8vIEFzc2VtYmxlIHJlc3VsdDpcclxuICAgICAgdGhpcy5yZXN1bHQgPSBhd2FpdCB0aGlzLmNyZWF0ZUNvdXJzZXNMaXN0KGVkc0FjdGl2ZUNvdXJzZXMsIHVzZXJIaWRkZW5Db3Vyc2VzLCBhY3RpdmVDb3Vyc2VzKTtcclxuICAgIH1cclxuICAgIGF3YWl0IHRoaXMudXNlckhpZGRlbkNvdXJzZXNQcm9taXNlOyAvLyBTbyB3ZSBrbm93IHRoYXQgdGhpcy5yZXN1bHQgaXMgdGhlcmUuXHJcbiAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3B0aW9ucyk7XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzLnB1c2goe3N1YnNjcmliZXIsIG9wdGlvbnN9KTtcclxuICB9XHJcblxyXG4gIHVuc3Vic2NyaWJlIChzdWJzY3JpYmVyOiBIaWRkZW5Db3Vyc2VzU3Vic2NyaWJlcikge1xyXG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnMuZmlsdGVyKHMgPT4gcy5zdWJzY3JpYmVyICE9PSBzdWJzY3JpYmVyKTtcclxuICB9XHJcbn1cclxuXHJcbmlmICghaGlkZGVuQ291cnNlc1JlcG8pIHtcclxuICBoaWRkZW5Db3Vyc2VzUmVwbyA9IGVudi5oaWRkZW5Db3Vyc2VzUmVwbyA9IG5ldyBIaWRkZW5Db3Vyc2VzUmVwbygpO1xyXG59XHJcbiIsImltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcgfSBmcm9tICcuLi91dGlscy9xdWVyeS1zdHJpbmcnO1xyXG5pbXBvcnQgRmVhdHVyZURlc2NyaXB0aW9ucyBmcm9tICcuL2ZlYXR1cmUtZmxhZ3MuanNvbic7XHJcbmltcG9ydCB7IGNmZyB9IGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcblxyXG50eXBlIEZlYXR1cmVGbGFncyA9IHtyZWFkb25seSBbUCBpbiBrZXlvZiB0eXBlb2YgRmVhdHVyZURlc2NyaXB0aW9uc106IGJvb2xlYW59O1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlcyBleHRlbmRzIEZlYXR1cmVGbGFncyB7fVxyXG5cclxuZXhwb3J0IGNsYXNzIEZlYXR1cmVzIHtcclxuICBwcml2YXRlIF9mZWF0dXJlczogRmVhdHVyZUZsYWdzO1xyXG4gIHByaXZhdGUgX2luaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG4gIGluaXQoKSB7XHJcbiAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHJldHVybjtcclxuICAgIGxldCB0dXJuZWRPbkZlYXR1cmVzID0gKGNmZy5LRURfRkVBVFVSRVMgfHwgXCJcIikuc3BsaXQoJywnKS5tYXAobmFtZSA9PiBuYW1lLnRyaW0oKS50b0xvd2VyQ2FzZSgpKTtcclxuICAgIGNvbnN0IHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gsIHt0b0xvd2VyOiB0cnVlfSk7XHJcblxyXG4gICAgaWYgKHF1ZXJ5LnRlc3R2ZXJzaW9uKSB7XHJcbiAgICAgIHR1cm5lZE9uRmVhdHVyZXMgPSBbXCIqXCJdO1xyXG4gICAgfVxyXG4gICAgaWYgKHF1ZXJ5LmZlYXR1cmVzKSB7XHJcbiAgICAgIHR1cm5lZE9uRmVhdHVyZXMgPSBxdWVyeS5mZWF0dXJlc1xyXG4gICAgICAgIC5zcGxpdCgnLCcpXHJcbiAgICAgICAgLm1hcChmZWF0dXJlID0+IGZlYXR1cmUudHJpbSgpLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdHVybk9uQWxsID0gdHVybmVkT25GZWF0dXJlcy5pbmNsdWRlcygnKicpO1xyXG4gICAgdGhpcy5fZmVhdHVyZXMgPSB7fSBhcyBGZWF0dXJlRmxhZ3M7XHJcbiAgICBmb3IgKGNvbnN0IGZlYXR1cmVOYW1lIG9mIE9iamVjdC5rZXlzKEZlYXR1cmVEZXNjcmlwdGlvbnMpKSB7XHJcbiAgICAgIHRoaXMuX2ZlYXR1cmVzW2ZlYXR1cmVOYW1lXSA9IHR1cm5PbkFsbCB8fFxyXG4gICAgICAgIHR1cm5lZE9uRmVhdHVyZXMuaW5jbHVkZXMoZmVhdHVyZU5hbWUudG9Mb3dlckNhc2UoKSlcclxuICAgIH1cclxuICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTsgICAgXHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3RvciAoKSB7XHJcbiAgICBmb3IgKGNvbnN0IGZlYXR1cmVOYW1lIG9mIE9iamVjdC5rZXlzKEZlYXR1cmVEZXNjcmlwdGlvbnMpKSB7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBmZWF0dXJlTmFtZSwge1xyXG4gICAgICAgIGdldCgpIHtcclxuICAgICAgICAgIGlmICghdGhpcy5faW5pdGlhbGl6ZWQpIHRoaXMuaW5pdCgpO1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2ZlYXR1cmVzW2ZlYXR1cmVOYW1lXTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldCh2YWx1ZSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGZWF0dXJlIGZsYWdzIGNhbm5vdCBiZSBzZXQgaGVyZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmZWF0dXJlcyA9IG5ldyBGZWF0dXJlcygpO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFJlbW92ZUl0ZW0gfSBmcm9tICcuLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9yZW1vdmUtaXRlbSc7XHJcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgZGlhbG9nczogUmVhY3QuQ29tcG9uZW50W107XHJcbiAgcG9wRGlhbG9nOiAoKT0+dm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIERpYWxvZ3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICBsYXN0RGl2OiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogUHJvcHMpIHtcclxuICAgIGlmICh0aGlzLmxhc3REaXYgIT09IG51bGwgJiYgcHJldlByb3BzLmRpYWxvZ3MubGVuZ3RoID4gdGhpcy5wcm9wcy5kaWFsb2dzLmxlbmd0aCkge1xyXG4gICAgICAvLyBBIGRpYWxvZyB3YXMgY2xvc2VkLiBOb3cgZm9jdXMgdGhlIGxhc3QgZGlhbG9nOlxyXG4gICAgICAkKGZpbmRET01Ob2RlKHRoaXMubGFzdERpdikpLmZpbmQoJzppbnB1dCcpLmZpcnN0KCkuZm9jdXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlciAoKSB7XHJcbiAgICB0aGlzLmxhc3REaXYgPSBudWxsO1xyXG4gICAgY29uc3Qge2RpYWxvZ3MsIHBvcERpYWxvZ30gPSB0aGlzLnByb3BzO1xyXG4gICAgJCgnYm9keScpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCBkaWFsb2dzLmxlbmd0aCA+IDApO1xyXG4gICAgJCgnYm9keScpLmNzcygnb3ZlcmZsb3cnLCBkaWFsb2dzLmxlbmd0aCA+IDAgPyAnaGlkZGVuJyA6ICdhdXRvJyk7XHJcblxyXG4gICAgcmV0dXJuIGRpYWxvZ3MubGVuZ3RoID4gMCAmJiA8ZGl2PlxyXG4gICAgICB7ZGlhbG9ncy5tYXAoKGRpYWxvZywgaWR4KSA9PiB7XHJcbiAgICAgICAgbGV0IGRpdjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgICAgICAgZnVuY3Rpb24gb25LZXlQcmVzcyhldjogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MRGl2RWxlbWVudD4pIHtcclxuICAgICAgICAgIGlmIChldi53aGljaCA9PT0gMTMgJiYgKCFldi50YXJnZXQgfHwgKGV2LnRhcmdldCBhcyBIVE1MRWxlbWVudCkudGFnTmFtZSAhPT0gJ1RFWFRBUkVBJykpIHtcclxuICAgICAgICAgICAgJChmaW5kRE9NTm9kZShkaXYpKS5maW5kKCcuYnRuLWRlZmF1bHQnKS5jbGljaygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG9uS2V5RG93bihldikge1xyXG4gICAgICAgICAgaWYgKGV2LndoaWNoID09PSAyNykgeyAvLyBFc2NhcGVcclxuICAgICAgICAgICAgcG9wRGlhbG9nKCk7XHJcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoZXYud2hpY2ggPT09IDgzICYmIChldi5jdHJsS2V5IHx8IGV2Lm1ldGFLZXkpKSB7IC8vIENUUkwtU1xyXG4gICAgICAgICAgICBjb25zdCBkb21Ob2RlID0gZmluZERPTU5vZGUoZGl2KTtcclxuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEJ1dHRvbiA9ICQoZG9tTm9kZSkuZmluZCgnLmJ0bi1kZWZhdWx0Jyk7XHJcbiAgICAgICAgICAgIGRlZmF1bHRCdXR0b24uY2xpY2soKTtcclxuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiA8ZGl2IGtleT17aWR4fT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXJrZW5cIiAvPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLXBhZ2Utd3JhcFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtcGFnZVwiIHJlZj17ZWxlbSA9PiB7XHJcbiAgICAgICAgICBkaXYgPSBlbGVtO1xyXG4gICAgICAgICAgaWYgKGlkeCA9PT0gZGlhbG9ncy5sZW5ndGggLSAxKSB0aGlzLmxhc3REaXYgPSBlbGVtO1xyXG4gICAgICAgIH19XHJcbiAgICAgICAgICAgIHRhYkluZGV4PXswfVxyXG4gICAgICAgICAgICBhcmlhLWRpc2FibGVkPXtpZHggPCBkaWFsb2dzLmxlbmd0aCAtIDF9XHJcbiAgICAgICAgICAgIG9uS2V5UHJlc3M9e29uS2V5UHJlc3N9XHJcbiAgICAgICAgICAgIG9uS2V5RG93bj17b25LZXlEb3dufT5cclxuICAgICAgICAgIHtkaWFsb2d9XHJcbiAgICAgICAgICA8UmVtb3ZlSXRlbSBvbkNsaWNrPXtwb3BEaWFsb2d9IC8+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0b3BGbG9hdHNcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj59KX1cclxuICA8L2Rpdj47XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5cclxuaWYgKGNmZy5LRURfTE9DQUxFID09PSBcInN2XCIpIHtcclxuICAgIG1vbWVudC51cGRhdGVMb2NhbGUoJ3N2Jywge1xyXG4gICAgICAgIG1vbnRoczogJ2phbnVhcmlfZmVicnVhcmlfbWFyc19hcHJpbF9tYWpfanVuaV9qdWxpX2F1Z3VzdGlfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXHJcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcclxuICAgICAgICB3ZWVrZGF5czogJ3PDtm5kYWdfbcOlbmRhZ190aXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDtnJkYWcnLnNwbGl0KCdfJyksXHJcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3PDtm5fbcOlbl90aXNfb25zX3Rvcl9mcmVfbMO2cicuc3BsaXQoJ18nKSxcclxuICAgICAgICB3ZWVrZGF5c01pbjogJ3PDtl9tw6VfdGlfb25fdG9fZnJfbMO2Jy5zcGxpdCgnXycpLFxyXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XHJcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxyXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXHJcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcclxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXHJcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcclxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxyXG4gICAgICAgICAgICBsbGw6ICdEIE1NTSBZWVlZIEhIOm1tJyxcclxuICAgICAgICAgICAgbGxsbDogJ2RkZCBEIE1NTSBZWVlZIEhIOm1tJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2FsZW5kYXI6IHtcclxuICAgICAgICAgICAgc2FtZURheTogJ1tJZGFnXSBMVCcsXHJcbiAgICAgICAgICAgIG5leHREYXk6ICdbSW1vcmdvbl0gTFQnLFxyXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0lnw6VyXSBMVCcsXHJcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW1DDpV0gZGRkZCBMVCcsXHJcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0ldIGRkZGRbc10gTFQnLFxyXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcclxuICAgICAgICAgICAgZnV0dXJlOiAnb20gJXMnLFxyXG4gICAgICAgICAgICBwYXN0OiAnZsO2ciAlcyBzZWRhbicsXHJcbiAgICAgICAgICAgIHM6ICduw6VncmEgc2VrdW5kZXInLFxyXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGVyJyxcclxuICAgICAgICAgICAgbTogJ2VuIG1pbnV0JyxcclxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVyJyxcclxuICAgICAgICAgICAgaDogJ2VuIHRpbW1lJyxcclxuICAgICAgICAgICAgaGg6ICclZCB0aW1tYXInLFxyXG4gICAgICAgICAgICBkOiAnZW4gZGFnJyxcclxuICAgICAgICAgICAgZGQ6ICclZCBkYWdhcicsXHJcbiAgICAgICAgICAgIE06ICdlbiBtw6VuYWQnLFxyXG4gICAgICAgICAgICBNTTogJyVkIG3DpW5hZGVyJyxcclxuICAgICAgICAgICAgeTogJ2V0dCDDpXInLFxyXG4gICAgICAgICAgICB5eTogJyVkIMOlcidcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlfGEpLyxcclxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICdlJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ2EnIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ2EnIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdlJyA6ICdlJztcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHdlZWs6IHtcclxuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuICAgICAgICAgICAgZG95OiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IGNvbnN0IGxvY2FsTW9tZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIG1vbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmxvY2FsZShjZmcuS0VEX0xPQ0FMRSk7XHJcbn1cclxuIiwiXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9Db21tdW5pY2F0b3I8VCBleHRlbmRzIHtpZDogc3RyaW5nfT4ge1xyXG4gIHF1ZXJ5KCk6IFByb21pc2U8VFtdPjtcclxufVxyXG5cclxudHlwZSBTdWJzY3JpYmVyPFQ+ID0gKGl0ZW1zOlRbXSwgZXJyb3I6IHVuZGVmaW5lZCB8IEVycm9yKSA9PiBhbnk7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVwbzxUIGV4dGVuZHMge2lkOiBzdHJpbmd9PiB7XHJcbiAgbGlzdFByb21pc2U6IFByb21pc2U8dm9pZD47XHJcbiAgaXRlbXM6IFRbXTtcclxuICBlcnJvcj86IEVycm9yO1xyXG4gIHN1YnNjcmliZXJzOiBTdWJzY3JpYmVyPFQ+W107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb21tOiBSZXBvQ29tbXVuaWNhdG9yPFQ+KSB7XHJcbiAgICB0aGlzLmxpc3RQcm9taXNlID0gbnVsbDtcclxuICAgIHRoaXMuaXRlbXMgPSBudWxsO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pIHtcclxuICAgIHJldHVybiB0aGlzLmVuc3VyZUhhc0RhdGEoKS50aGVuKCgpPT57XHJcbiAgICAgIHN1YnNjcmliZXIodGhpcy5pdGVtcywgdGhpcy5lcnJvcik7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdW5zdWJzY3JpYmUoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPikge1xyXG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnMuZmlsdGVyIChzID0+IHMgIT09IHN1YnNjcmliZXIpO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5U3Vic2NyaWJlcnMoKSB7XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2gocyA9PiBzKHRoaXMuaXRlbXMsIHRoaXMuZXJyb3IpKTtcclxuICB9XHJcblxyXG4gIGVuc3VyZUhhc0RhdGEoKSB7XHJcbiAgICBpZiAoIXRoaXMubGlzdFByb21pc2UpIHRoaXMucmVmcmVzaEZyb21TZXJ2ZXIoKTtcclxuICAgIHJldHVybiB0aGlzLmxpc3RQcm9taXNlO1xyXG4gIH1cclxuXHJcbiAgcmVmcmVzaEZyb21TZXJ2ZXIoKSB7XHJcbiAgICB0aGlzLmxpc3RQcm9taXNlID0gdGhpcy5jb21tLnF1ZXJ5KCkudGhlbihpdGVtcyA9PiB7XHJcbiAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcclxuICAgICAgdGhpcy5lcnJvciA9IG51bGw7XHJcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcyB8fCBbXTtcclxuICAgICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5saXN0UHJvbWlzZTtcclxuICB9XHJcbiAgXHJcbiAgYXN5bmMgdXBkYXRlKGl0ZW06IFQgfCBUW10pIHtcclxuICAgIGF3YWl0IHRoaXMuZW5zdXJlSGFzRGF0YSgpO1xyXG4gICAgY29uc3QgdXBkYXRlZEl0ZW1zID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBbaXRlbV07XHJcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5tYXAoaXQgPT4ge1xyXG4gICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IHVwZGF0ZWRJdGVtcy5maW5kKCh7aWR9KSA9PiBpdC5pZCA9PT0gaWQpO1xyXG4gICAgICByZXR1cm4gdXBkYXRlZEl0ZW0gP1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHVwZGF0ZWRJdGVtKSA6XHJcbiAgICAgICAgaXQ7XHJcbiAgICB9KTtcclxuICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICB9XHJcblxyXG4gIGluc2VydChpdGVtOiBUIHwgVFtdKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnN1cmVIYXNEYXRhKCkudGhlbigoKT0+e1xyXG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5jb25jYXQoaXRlbSk7XHJcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgaWRzID0gQXJyYXkuaXNBcnJheShpZCkgPyBpZCA6IFtpZF07XHJcbiAgICByZXR1cm4gdGhpcy5lbnN1cmVIYXNEYXRhKCkudGhlbigoKT0+e1xyXG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5maWx0ZXIoaXQgPT4gIWlkcy5zb21lKGlkID0+IGl0LmlkID09PSBpZCkpO1xyXG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGV4ZWMgZnJvbSAnLi9leGVjJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBib2xkOiB7XHJcbiAgICBpY29uOiAnPGI+QjwvYj4nLFxyXG4gICAgdGl0bGU6ICdCb2xkJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnYm9sZCcpXHJcbiAgfSxcclxuICBpdGFsaWM6IHtcclxuICAgIGljb246ICc8aT5JPC9pPicsXHJcbiAgICB0aXRsZTogJ0l0YWxpYycsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2l0YWxpYycpXHJcbiAgfSxcclxuICB1bmRlcmxpbmU6IHtcclxuICAgIGljb246ICc8dT5VPC91PicsXHJcbiAgICB0aXRsZTogJ1VuZGVybGluZScsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3VuZGVybGluZScpXHJcbiAgfSxcclxuICBzdHJpa2V0aHJvdWdoOiB7XHJcbiAgICBpY29uOiAnPHN0cmlrZT5TPC9zdHJpa2U+JyxcclxuICAgIHRpdGxlOiAnU3RyaWtlLXRocm91Z2gnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdzdHJpa2VUaHJvdWdoJylcclxuICB9LFxyXG4gIGhlYWRpbmcxOiB7XHJcbiAgICBpY29uOiAnPGI+SDxzdWI+MTwvc3ViPjwvYj4nLFxyXG4gICAgdGl0bGU6ICdIZWFkaW5nIDEnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDE+JylcclxuICB9LFxyXG4gIGhlYWRpbmcyOiB7XHJcbiAgICBpY29uOiAnPGI+SDxzdWI+Mjwvc3ViPjwvYj4nLFxyXG4gICAgdGl0bGU6ICdIZWFkaW5nIDInLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDI+JylcclxuICB9LFxyXG4gIGhlYWRpbmczOiB7XHJcbiAgICBpY29uOiAnPGI+SDxzdWI+Mzwvc3ViPjwvYj4nLFxyXG4gICAgdGl0bGU6ICdIZWFkaW5nIDMnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDM+JylcclxuICB9LFxyXG4gIHBhcmFncmFwaDoge1xyXG4gICAgaWNvbjogJyYjMTgyOycsXHJcbiAgICB0aXRsZTogJ1BhcmFncmFwaCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxQPicpXHJcbiAgfSxcclxuICBxdW90ZToge1xyXG4gICAgaWNvbjogJyYjODIyMDsgJiM4MjIxOycsXHJcbiAgICB0aXRsZTogJ1F1b3RlJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEJMT0NLUVVPVEU+JylcclxuICB9LFxyXG4gIG9saXN0OiB7XHJcbiAgICBpY29uOiAnJiMzNTsnLFxyXG4gICAgdGl0bGU6ICdPcmRlcmVkIExpc3QnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRPcmRlcmVkTGlzdCcpXHJcbiAgfSxcclxuICB1bGlzdDoge1xyXG4gICAgaWNvbjogJyYjODIyNjsnLFxyXG4gICAgdGl0bGU6ICdVbm9yZGVyZWQgTGlzdCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydFVub3JkZXJlZExpc3QnKVxyXG4gIH0sXHJcbiAgY29kZToge1xyXG4gICAgaWNvbjogJyZsdDsvJmd0OycsXHJcbiAgICB0aXRsZTogJ0NvZGUnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8UFJFPicpXHJcbiAgfSxcclxuICBsaW5lOiB7XHJcbiAgICBpY29uOiAnJiM4MjEzOycsXHJcbiAgICB0aXRsZTogJ0hvcml6b250YWwgTGluZScsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydEhvcml6b250YWxSdWxlJylcclxuICB9LFxyXG4gIGxpbms6IHtcclxuICAgIGljb246ICcmIzEyODI3OTsnLFxyXG4gICAgdGl0bGU6ICdMaW5rJyxcclxuICAgIHJlc3VsdDogKCkgPT4ge1xyXG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KCdFbnRlciB0aGUgbGluayBVUkwnKVxyXG4gICAgICBpZiAodXJsKSBleGVjKCdjcmVhdGVMaW5rJywgdXJsKVxyXG4gICAgfVxyXG4gIH0sXHJcbiAgaW1hZ2U6IHtcclxuICAgIGljb246ICcmIzEyODI0NzsnLFxyXG4gICAgdGl0bGU6ICdJbWFnZScsXHJcbiAgICBwcm9tcHRNc2c6ICdFbnRlciB0aGUgVVJMIG9mIHRoZSBpbWFnZScsXHJcbiAgICByZXN1bHQ6ICgpID0+IHtcclxuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCh0aGlzLnByb21wdE1zZylcclxuICAgICAgaWYgKHVybCkgZXhlYygnaW5zZXJ0SW1hZ2UnLCB1cmwpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBjb3Vyc2VOYW1lVG9Dc3NDbGFzcyhjc3NQcmVmaXg6IHN0cmluZywgY291cnNlTmFtZTogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIGAke2Nzc1ByZWZpeH0ke2NvdXJzZU5hbWUuc3Vic3RyKDAsMykudG9Mb3dlckNhc2UoKX1gO1xyXG59XHJcbiIsIlxyXG5leHBvcnQgY2xhc3MgUGVuZGluZ0pvYiB7XHJcbiAgcHJpdmF0ZSB0aW1lb3V0SWQgPSBudWxsO1xyXG4gIHByaXZhdGUgY2FuY2VsbGVkID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBwZW5kaW5nID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBpc0pvYkV4ZWN1dGluZyA9IGZhbHNlO1xyXG4gIHByaXZhdGUgam9iQ2FsbGJhY2s6ICgpPT5Qcm9taXNlPGFueT47XHJcbiAgXHJcbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6ICgpPT5Qcm9taXNlPGFueT4pIHtcclxuICAgIHRoaXMuam9iQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHRyaWdnZXJDaGFuZ2UodGhyb3R0bGU6IG51bWJlcik6IGFueSB7XHJcbiAgICBpZiAodGhpcy5jYW5jZWxsZWQpIHJldHVybjtcclxuICAgIHRoaXMucGVuZGluZyA9IHRydWU7XHJcbiAgICBpZiAodGhpcy50aW1lb3V0SWQgIT09IG51bGwpXHJcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XHJcbiAgICB0aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCk9PnRoaXMubGF1bmNoSm9iKCksIHRocm90dGxlKTtcclxuICB9XHJcblxyXG4gIHN0b3AoKSB7XHJcbiAgICBpZiAodGhpcy50aW1lb3V0SWQgIT09IG51bGwpXHJcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XHJcbiAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XHJcbiAgICB0aGlzLmNhbmNlbGxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGxhdW5jaEpvYigpIHtcclxuICAgIGlmICh0aGlzLmNhbmNlbGxlZCkgcmV0dXJuO1xyXG4gICAgaWYgKCF0aGlzLnBlbmRpbmcpIHJldHVybjtcclxuICAgIGlmICh0aGlzLmlzSm9iRXhlY3V0aW5nKSByZXR1cm47XHJcbiAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLmlzSm9iRXhlY3V0aW5nID0gdHJ1ZTtcclxuICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgIGF3YWl0IHRoaXMuam9iQ2FsbGJhY2soKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMuaXNKb2JFeGVjdXRpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnBlbmRpbmcpXHJcbiAgICAgIGF3YWl0IHRoaXMubGF1bmNoSm9iKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuXHJcbmRlY2xhcmUgdmFyIHByb2Nlc3M6IGFueTtcclxuXHJcbmNmZy5FTlZJUk9OTUVOVCA9IHByb2Nlc3MuZW52LkVOVklST05NRU5UIGFzIFwicHJvZHVjdGlvblwiIHwgXCJkZXZlbG9wbWVudFwiIHwgXCJ0ZXN0XCI7XHJcbmNmZy5LRURfQVBJX1VSTCA9IHByb2Nlc3MuZW52LktFRF9BUElfVVJMOyAvLyBcImh0dHBzOi8va2VkYmFja2VuZHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL1wiXHJcbmNmZy5FRFNfQVBJX1VSTCA9IHByb2Nlc3MuZW52LkVEU19BUElfVVJMOyAvLyBcImh0dHBzOi8vZWRzcG9ydGFsb3dpbmFwaS5henVyZXdlYnNpdGVzLm5ldC9hcGkvXCJcclxuY2ZnLktFRF9UT0tFTl9VUkwgPSBwcm9jZXNzLmVudi5LRURfVE9LRU5fVVJMOyAvLyBcImh0dHBzOi8va2VkYXV0aHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvdG9rZW5cIlxyXG5jZmcuS0VEX0NMSUVOVF9JRCA9IHByb2Nlc3MuZW52LktFRF9DTElFTlRfSUQ7IC8vIFwiZGV2Y2xpZW50XCIsIFwidGVzdGNsaWVudFwiLCBcIi4uLlwiXHJcbmNmZy5LRURfQ0xJRU5UX1NFQ1JFVCA9IHByb2Nlc3MuZW52LktFRF9DTElFTlRfU0VDUkVUO1xyXG5jZmcuS0VEX1JFQUxNID0gcHJvY2Vzcy5lbnYuS0VEX1JFQUxNOyAvLyBcIlNFMVwiXHJcbmNmZy5LRURfTE9DQUxFID0gY2ZnLktFRF9MT0NBTEUgfHwgcHJvY2Vzcy5lbnYuS0VEX0xPQ0FMRTsgLy8gXCJzdlwiLCBcImVuXCIuIE9ubHkgc2V0IGZyb20gcHJvY2Vzcy5lbnYgaWYgbm90IHNldCBmcm9tIFNpdGVWaXNpb24gZWxlbWVudCBjb25maWcuXHJcbmNmZy5LRURfU0NIT09MX0xPQ0FMRSA9IGNmZy5LRURfU0NIT09MX0xPQ0FMRSB8fCBwcm9jZXNzLmVudi5LRURfU0NIT09MX0xPQ0FMRTsgLy8gXCJzdlwiLCBcImVuX3NpblwiLCBcImVuX25pblwiLiBPbmx5IHNldCBmcm9tIHByb2Nlc3MuZW52IGlmIG5vdCBzZXQgZnJvbSBTaXRlVmlzaW9uIGVsZW1lbnQgY29uZmlnLlxyXG4iLCJpbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nLCBnZW5lcmF0ZVF1ZXJ5U3RyaW5nLCBzcGxpdFVybEFuZFF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxzL3F1ZXJ5LXN0cmluZ1wiO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50V2ViLCBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciwgaXNvbW9ycGhpYywgc3RvcmFnZSB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcclxuaW1wb3J0IHsgQmVhcmVyUHJvdmlkZXIsIEtlZEJlYXJlclByb3ZpZGVyIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9jb250cmFjdHMva2VkLW1vZGVsc1wiO1xyXG5pbXBvcnQgeyBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyB9IGZyb20gXCIuLi9hY2Nlc3MtY29udHJvbC9pbmRleFwiO1xyXG5pbXBvcnQgeyBjaGVycnlQaWNrUHJvcHMgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcclxuXHJcbmZ1bmN0aW9uIGdldE1lcmdlZFRva2VuUGF0aCh0b2tlblBhdGg6IHN0cmluZywgbG9jYXRpb25TZWFyY2g6IHN0cmluZywgc2NvcGVzOiBzdHJpbmdbXSkge1xyXG4gIC8vIE1lcmdlIGNvbmZpZ3VyZWQgcXVlcnkgcGFyYW1zIG9mIHRva2VuIHBhdGggd2l0aCBwYXJhbXMgZ2l2ZW4gdG8gY3VycmVudCBwYWdlXHJcbiAgY29uc3QgY3VycmVudFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvblNlYXJjaCk7XHJcbiAgY29uc3QgaW1wZXJzb25hdGlvblByb3BzID0gY2hlcnJ5UGlja1Byb3BzKGN1cnJlbnRRdWVyeSwgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMpO1xyXG4gIGNvbnN0IFt0b2tlblBhdGhXaXRob3V0UXVlcnksIHRva2VuUXVlcnlTdHJpbmddID0gc3BsaXRVcmxBbmRRdWVyeSh0b2tlblBhdGgpO1xyXG4gIGNvbnN0IHRva2VuUGF0aFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyh0b2tlblF1ZXJ5U3RyaW5nKTtcclxuICByZXR1cm4gdG9rZW5QYXRoV2l0aG91dFF1ZXJ5ICsgZ2VuZXJhdGVRdWVyeVN0cmluZyh7XHJcbiAgICAuLi50b2tlblBhdGhRdWVyeSxcclxuICAgIC4uLmltcGVyc29uYXRpb25Qcm9wcyxcclxuICAgIHNjb3Blczogc2NvcGVzLmpvaW4oJywnKVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aDogc3RyaW5nLCB1c2VyRW1haWw6IHN0cmluZykge1xyXG4gIHJldHVybiBtZXJnZWRUb2tlblBhdGggKyBcIi9cIiArIHVzZXJFbWFpbDtcclxufVxyXG5cclxuZnVuY3Rpb24gc2F2ZVVzZXJJbmZvKHVzZXI6IFVzZXIsIHRva2VuSWQ6IHN0cmluZykge1xyXG4gIGVudi5jdXJyZW50VXNlciA9IHVzZXI7XHJcbiAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInVzZXJJbmZvXCIgKyB0b2tlbklkLCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRVc2VySW5mbyh0b2tlbklkOiBzdHJpbmcpIHtcclxuICBjb25zdCBzdG9yZWRTZXNzaW9uVXNlciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJ1c2VySW5mb1wiICsgdG9rZW5JZCk7XHJcbiAgaWYgKHN0b3JlZFNlc3Npb25Vc2VyKSB7XHJcbiAgICBlbnYuY3VycmVudFVzZXIgPSBKU09OLnBhcnNlKHN0b3JlZFNlc3Npb25Vc2VyKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aDogc3RyaW5nLCB1c2VyRW1haWw6IHN0cmluZykge1xyXG4gIGNvbnN0IHRva2VuSWQgPSBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgdXNlckVtYWlsKTtcclxuICByZXR1cm4gbmV3IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aCwgcmVzcG9uc2VUZXh0ID0+IHtcclxuICAgIGNvbnN0IHJlcyA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KSBhcyB7IG9rOiBib29sZWFuLCBlcnJvcj86IHN0cmluZywgdG9rZW4/OiBzdHJpbmcsIHVzZXI/OiBVc2VyIH07XHJcbiAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcik7XHJcbiAgICBpZiAocmVzLnVzZXIpIHtcclxuICAgICAgc2F2ZVVzZXJJbmZvKHJlcy51c2VyLCB0b2tlbklkKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IHRva2VuOiByZXMudG9rZW4sIGV4cGlyZXM6IERhdGUubm93KCkgKyA1OSAqIDYwICogMTAwMCB9O1xyXG4gIH0sIHRva2VuSWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVHb29nbGVUb2tlblByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aDogc3RyaW5nLCB1c2VyRW1haWw6IHN0cmluZykge1xyXG4gIGNvbnN0IHRva2VuSWQgPSBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgdXNlckVtYWlsKTtcclxuICByZXR1cm4gbmV3IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aCwgcmVzcG9uc2VUZXh0ID0+IHtcclxuICAgIGNvbnN0IHJlcyA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KSBhcyB7IG9rOiBib29sZWFuLCBlcnJvcj86IHN0cmluZywgdG9rZW4/OiBzdHJpbmcsIHVzZXI/OiBVc2VyIH07XHJcbiAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcik7XHJcbiAgICByZXR1cm4geyB0b2tlbjogcmVzLnRva2VuLCBleHBpcmVzOiBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDEwMDAgfTtcclxuICB9LCB0b2tlbklkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIodG9rZW5Vcmw6IHN0cmluZywgdXNlcjogVXNlciwgc2NvcGVzOiBzdHJpbmdbXSkge1xyXG4gIHJldHVybiBuZXcgS2VkQmVhcmVyUHJvdmlkZXIoXHJcbiAgICBpc29tb3JwaGljLFxyXG4gICAgc3RvcmFnZSxcclxuICAgIHRva2VuVXJsICsgdXNlci5tYWlsICsgbG9jYXRpb24uc2VhcmNoLFxyXG4gICAgY2ZnLktFRF9DTElFTlRfSUQsXHJcbiAgICBjZmcuS0VEX0NMSUVOVF9TRUNSRVQsXHJcbiAgICB0b2tlblVybCwge1xyXG4gICAgICBlbWFpbDogdXNlci5tYWlsLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgIHJvbGVzOiB1c2VyLnJvbGVzLFxyXG4gICAgICBzY2hvb2w6IHVzZXIuc2Nob29sLFxyXG4gICAgICBzY2hvb2xUeXBlOiB1c2VyLnNjaG9vbFR5cGUsXHJcbiAgICAgIHNjb3Blc1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vIGVudi5jdXJyZW50VXNlci5tYWlsIGlzIHNldCBieSBTaXRlVmlzaW9uIHNlcnZlciBpbml0aWFsbHkuXHJcbi8vIEEgcmVzcG9uc2UgZnJvbSAvYXBpL3Rva2VuIG1heSBjaGFuZ2UgdGhlIG1haWwgYXR0cmlidXRlIG9mIHRoZSBjdXJyZW50XHJcbi8vIHVzZXIsIHNvIGVudi5jdXJyZW50VXNlci5tYWlsIG1heSBiZSBkaWZmZXJlbnQgYWZ0ZXIgZ2V0dGluZyBhIHJlc3BvbnNlLlxyXG4vLyBIb3dldmVyLCB0aGUgaW5pdGlhbCB2YWx1ZSBpcyB2YWx1YWJsZSBhbHdheXMgaW4gb3JkZXIgdG8gZGlzdGluZ3Vpc2ggdGhlIGNhc2VcclxuLy8gd2hlbiBvbmUgbm9ybWFsIHVzZXIgbG9ncyBvdXQgYW5kIGFub3RoZXIgdXNlciBsb2dzIGluLlxyXG5jb25zdCBpbml0aWFsVXNlckVtYWlsID0gZW52LmN1cnJlbnRVc2VyICYmIGVudi5jdXJyZW50VXNlci5tYWlsOyAvLyBJbml0aWFsIHZhbHVlIG9mIG1haWwuIE1heSBjaGFuZ2UuXHJcbmlmIChpbml0aWFsVXNlckVtYWlsKSB7XHJcbiAgLy8gS0VEXHJcbiAgaWYgKGNmZy5LRURfVE9LRU5fUEFUSCkge1xyXG4gICAgLy9cclxuICAgIC8vXHJcbiAgICAvLyBQcm9kdWN0aW9uIC8gU2l0ZVZpc2lvbiBwcm94aWVkIC9hcGkvdG9rZW4gdG8gcmVxdWVzdCB0b2tlbnMgZnJvbTpcclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgY29uc3QgbWVyZ2VkVG9rZW5QYXRoID0gZ2V0TWVyZ2VkVG9rZW5QYXRoKFxyXG4gICAgICBjZmcuS0VEX1RPS0VOX1BBVEgsXHJcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCwgW1xyXG4gICAgICAgIFwia2VkYmFja2VuZFwiLFxyXG4gICAgICAgIFwiRURTXCIsXHJcbiAgICAgIF0pO1xyXG4gICAgZW52LmJlYXJlclByb3ZpZGVyID0gY3JlYXRlQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoLCBpbml0aWFsVXNlckVtYWlsKTtcclxuICAgIGxvYWRVc2VySW5mbyhnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgaW5pdGlhbFVzZXJFbWFpbCkpO1xyXG5cclxuICAgIC8vIEdvb2dsZVxyXG4gICAgY29uc3QgZ29vZ2xlTWVyZ2VkUGF0aCA9IGdldE1lcmdlZFRva2VuUGF0aChcclxuICAgICAgY2ZnLktFRF9UT0tFTl9QQVRILFxyXG4gICAgICBsb2NhdGlvbi5zZWFyY2gsIFtcclxuICAgICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXIucmVhZG9ubHlcIixcclxuICAgICAgXSk7XHJcbiAgICBlbnYuZ29vZ2xlVG9rZW5Qcm92aWRlciA9IGNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIoZ29vZ2xlTWVyZ2VkUGF0aCwgaW5pdGlhbFVzZXJFbWFpbCk7XHJcbiAgfSBlbHNlIGlmIChjZmcuS0VEX1RPS0VOX1VSTCAmJiBjZmcuS0VEX0NMSUVOVF9JRCAmJiBjZmcuS0VEX0NMSUVOVF9TRUNSRVQpIHtcclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgLy8gVGVzdCAtIGdvIGRpcmVjdGx5IHRvIEtFREFVVEggc2VydmVyIHRvIHJldHJpZXZlIHRva2Vuc1xyXG4gICAgLy9cclxuICAgIC8vXHJcbiAgICBlbnYuYmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcihjZmcuS0VEX1RPS0VOX1VSTCwgZW52LmN1cnJlbnRVc2VyLCBbXHJcbiAgICAgIFwia2VkYmFja2VuZFwiLFxyXG4gICAgICBcIkVEU1wiLFxyXG4gICAgXSk7XHJcbiAgICBlbnYuZ29vZ2xlVG9rZW5Qcm92aWRlciA9IGNyZWF0ZVRlc3RUb2tlblByb3ZpZGVyKGNmZy5LRURfVE9LRU5fVVJMICsgXCIvZ29vZ2xlXCIsIGVudi5jdXJyZW50VXNlciwgW1xyXG4gICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXIucmVhZG9ubHlcIixcclxuICAgIF0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIgS0VEX1RPS0VOX1BBVEhgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRDbGllbnRXZWIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudHdlYic7XHJcblxyXG5lbnYua2VkQmFja2VuZENsaWVudCA9IG5ldyBLZWRCYWNrZW5kQ2xpZW50V2ViIChcclxuICBjZmcuS0VEX0FQSV9VUkwsXHJcbiAgZW52LmJlYXJlclByb3ZpZGVyKTtcclxuXHJcbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgeyBpc29tb3JwaGljIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWInO1xyXG5pbXBvcnQgeyBFZHNDbGllbnQgfSBmcm9tICcuLi9hcGlzL2Vkc2NsaWVudCc7XHJcblxyXG5lbnYuZWRzQ2xpZW50ID0gbmV3IEVkc0NsaWVudCAoXHJcbiAgaXNvbW9ycGhpYyxcclxuICBjZmcuRURTX0FQSV9VUkwsXHJcbiAgZW52LmJlYXJlclByb3ZpZGVyLFxyXG4gICgpPT5lbnYuY3VycmVudFVzZXIubWFpbCk7XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjdXJyZW50VXNlckVudiwgeyBFbnYgfSBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgdHV0b3JFbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQudHV0b3JFbnYnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICB0dXRvcmVkOiBib29sZWFuO1xyXG4gIGNyZWF0ZUNvbXBvbmVudDogKGVudjogRW52KT0+UmVhY3QuUmVhY3ROb2RlXHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgZW52OiBFbnY7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUdXRvcmFibGVDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLm9uRW52VXBkYXRlZCA9IHRoaXMub25FbnZVcGRhdGVkLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBlbnY6IHByb3BzLnR1dG9yZWQgPyBudWxsIDogY3VycmVudFVzZXJFbnZcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgaWYgKHRoaXMucHJvcHMudHV0b3JlZCkge1xyXG4gICAgICB0dXRvckVudi5zdWJzY3JpYmUodGhpcy5vbkVudlVwZGF0ZWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICBpZiAodGhpcy5wcm9wcy50dXRvcmVkKSB7XHJcbiAgICAgIHR1dG9yRW52LnVuc3Vic2NyaWJlKHRoaXMub25FbnZVcGRhdGVkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uRW52VXBkYXRlZChlbnY6IEVudikge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7ZW52fSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7ZW52fSA9IHRoaXMuc3RhdGU7XHJcbiAgICBpZiAoIWVudikgcmV0dXJuIDxkaXY+PC9kaXY+O1xyXG4gICAgaWYgKCFlbnYua2VkQmFja2VuZENsaWVudCkge1xyXG4gICAgICByZXR1cm4gPGRpdj5MYWRkYXIuLi48L2Rpdj47XHJcbiAgICB9XHJcbiAgICAvL2NvbnN0IHtjdXJyZW50VXNlciwgZWRzQ2xpZW50LCBrZWRCYWNrZW5kQ2xpZW50LCBrZ1Rlcm1QbGFubmVyUmVwb30gPSBlbnY7XHJcbiAgICAvL2NvbnN0IHt0dXRvcmVkfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5jcmVhdGVDb21wb25lbnQoZW52KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW50ZXJmYWNlIENFUHJvcHMge1xyXG4gICAgdGV4dDogc3RyaW5nOyAvLyBUZXh0IHRvIGJlIHNob3duIGluIGZpZWxkXHJcbiAgICB0YWc/OiAndGQnIHwgJ3RoJyB8ICdkaXYnIHwgJ3NwYW4nIHwgJ3AnIHwgJ2gxJyB8ICdoMicgfCAnaDMnOyAvLyBhbGxvd2QgdGFncyAtLSBzaG91bGQgd2UgYWRkIG1vcmU/XHJcbiAgICBvbkNoYW5nZTogKG5ld05hbWU6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nOyAvLyBJZiB0ZXh0IGlzIGVtcHR5LCB0aGlzIHdpbGwgYmUgdGhlIHBsYWNlaG9sZGVyXHJcbiAgICBtYXhDaGFycz86IG51bWJlcjtcclxuICAgIHJlYWRPbmx5PzogYm9vbGVhbjtcclxuICAgIGNsYXNzTmFtZT86IHN0cmluZztcclxuICAgIHBsYWNlSG9sZGVyPzogc3RyaW5nO1xyXG5cclxuICAgIHZhbGlkYXRlVmFsdWU/OiBSZWdFeHA7XHJcblxyXG4gICAgLy8gRm9yIG5hdmlnYXRpb25cclxuICAgIGFsbG93TmF2aWdhdGlvbj86IGJvb2xlYW47IC8vIHRvIGFjdGl2YXRlIG5hdmlnYXRpb25cclxuICAgIG9uTmF2aWdhdGU/OiAoZGlyZWN0aW9uOiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb250ZW50RWRpdGFibGVGaWVsZCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8Q0VQcm9wcz4ge1xyXG4gICAgbXlzZWxmOiBSZWFjdC5SZWZPYmplY3Q8YW55PjtcclxuICAgIHByb3BhZ2F0ZWRPbkNoYW5nZTogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBDRVByb3BzKSB7XHJcbiAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgIHRoaXMubXlzZWxmID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxFbGVtZW50PigpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHByb3BzLnRleHQgfHwgJydcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHt0YWcsIHRleHQsIHJlYWRPbmx5fSA9IHRoaXMucHJvcHM7XHJcbiAgICAgICAgY29uc3QgVGFnVHlwZSA9IHRhZztcclxuICAgICAgICByZXR1cm4gPFRhZ1R5cGVcclxuICAgICAgICAgICAgY29udGVudEVkaXRhYmxlPXshcmVhZE9ubHl9XHJcbiAgICAgICAgICAgIGRhdGEtcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgICAgIHJlZj17dGhpcy5teXNlbGZ9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5vbktleURvd24uYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgb25LZXlVcD17dGhpcy5vbktleVVwLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgIG9uQmx1cj17dGhpcy5vbkJsdXIuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgb25QYXN0ZT17dGhpcy5vblBhc3RlLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiB0ZXh0fX0gLz5cclxuICAgIH1cclxuXHJcbiAgICBvbkNoYW5nZShlOiBFdmVudCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0ZXh0OiB0aGlzLm15c2VsZi5jdXJyZW50LmlubmVyVGV4dCB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFRha2UgYWN0aW9uIGRlcGVuZGluZyBvbiBrZXktZXZlbnRcclxuICAgICAqIEBwYXJhbSBlIGV2ZW50IGZyb20gZmllbGRcclxuICAgICAqIFxyXG4gICAgICogSWYgYWxsb3dOYXZpZ2F0aW9uIHRoZW4gbGlzdGVuIHRvIGFycm93LWtleXNcclxuICAgICAqIExpbWl0cyB0byBtYXhDaGFyc1xyXG4gICAgICovXHJcbiAgICBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLm15c2VsZi5jdXJyZW50LmlubmVyVGV4dDtcclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnKSB7XHJcbiAgICAgICAgICAgIHRoaXMubXlzZWxmLmN1cnJlbnQuaW5uZXJUZXh0ID0gdGhpcy5wcm9wcy50ZXh0IHx8IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMubXlzZWxmLmN1cnJlbnQuYmx1cigpO1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdFbnRlcicgfHwgZS5rZXkgPT09ICdUYWInKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlT25DaGFuZ2UodGV4dCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0ZXh0OiB0ZXh0IH0pO1xyXG4gICAgICAgIH0gIGVsc2UgaWYodGV4dC5sZW5ndGggPj0gdGhpcy5wcm9wcy5tYXhDaGFycyAmJiAoXHJcbiAgICAgICAgICAgIC9eW1xcZFxcd1xcc10kLy50ZXN0KGUua2V5KSAmJiAhKGUubWV0YUtleSB8fCBlLmN0cmxLZXkpXHJcbiAgICAgICAgKSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmFsbG93TmF2aWdhdGlvbiA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICBjb25zdCBuYXZEaXIgPSBlLmtleS5zdGFydHNXaXRoKCdBcnJvdycpID8gZS5rZXkucmVwbGFjZSgnQXJyb3cnLCAnJykudG9Mb3dlckNhc2UoKSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBjYXJldCA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpLmdldFJhbmdlQXQoMCkuZW5kT2Zmc2V0OyAvLyBvbmx5IHdvcmtzIGZvciBwbGFpbnRleHRcclxuICAgICAgICAgICAgaWYgKG5hdkRpciAmJiB0ZXh0Lmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlKHRleHQsIG5hdkRpcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmF2RGlyICYmIChuYXZEaXIgPT0gJ3VwJyB8fCBuYXZEaXIgPT0gJ2Rvd24nKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZSh0ZXh0LCBuYXZEaXIpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5hdkRpciAmJiAoXHJcbiAgICAgICAgICAgICAgICAobmF2RGlyID09ICdsZWZ0JyAmJiBjYXJldCA9PSAwKSB8fFxyXG4gICAgICAgICAgICAgICAgKG5hdkRpciA9PSAncmlnaHQnICYmIGNhcmV0ID09IHRleHQubGVuZ3RoKVxyXG4gICAgICAgICAgICApKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlKHRleHQsIG5hdkRpcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlIGV2ZW50IGZyb20gZmllbGRcclxuICAgICAqIFNvbGVseSB1c2VkIHRvIGhhbmRlIHZhbGlkYXRpb25zLWlzc3Vlc1xyXG4gICAgICovXHJcbiAgICBvbktleVVwKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5teXNlbGYuY3VycmVudC5pbm5lclRleHQ7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudmFsaWRhdGVWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICF0aGlzLnByb3BzLnZhbGlkYXRlVmFsdWUudGVzdCh0ZXh0KSkge1xyXG4gICAgICAgICAgICB0aGlzLm15c2VsZi5jdXJyZW50LmlubmVyVGV4dCA9IHRoaXMucHJvcHMudGV4dCB8fCBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLm15c2VsZi5jdXJyZW50LmJsdXIoKTtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB2YWx1ZSBhbmQgcGFzcyB0byBwYXJlbnRzIG5hdmlnYXRlLWZ1bmNpdG9uXHJcbiAgICAgKiBAcGFyYW0gdGV4dCBcclxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gXHJcbiAgICAgKi9cclxuICAgIG5hdmlnYXRlKHRleHQ6IHN0cmluZywgZGlyZWN0aW9uOiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBmaXJzdCB1cGRhdGUgY2VsbFxyXG4gICAgICAgIHRoaXMucHJvcGFnYXRlT25DaGFuZ2UodGV4dCk7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRleHQ6IHRleHR9ICk7XHJcbiAgICAgICAgLy8gdGhlbiBuYXZpZ2F0ZSBhd2F5XHJcbiAgICAgICAgdGhpcy5wcm9wcy5vbk5hdmlnYXRlKGRpcmVjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlIHN1cmUgcGFzdGVkIHRleHQgaXMgcHVyZSB0ZXh0XHJcbiAgICAgKiBAcGFyYW0gZSB0aGUgcGFzZXQgZXZlbnRcclxuICAgICAqL1xyXG4gICAgb25QYXN0ZShlOiBDbGlwYm9hcmRFdmVudCkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCB0ZXh0ID0gKGUuY2xpcGJvYXJkRGF0YSAmJiBlLmNsaXBib2FyZERhdGEuZ2V0RGF0YSk/ICBlLmNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikgOiAnJztcclxuICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcImluc2VydEhUTUxcIiwgZmFsc2UsIHRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHZhbHVlIG9uIGV4aXQgZnJvbSBmaWVsZFxyXG4gICAgICogQHBhcmFtIGUgXHJcbiAgICAgKi9cclxuICAgIG9uQmx1cihlOiBFdmVudCkge1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLm15c2VsZi5jdXJyZW50LmlubmVyVGV4dDtcclxuICAgICAgICB0aGlzLnByb3BhZ2F0ZU9uQ2hhbmdlKHRleHQpO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0ZXh0OiB0ZXh0IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT25seSB1cGRhdGUgdmFsdWUgaWYgaXQgaGFzIGNoYW5nZWRcclxuICAgICAqIEBwYXJhbSBuZXdWYWx1ZSBcclxuICAgICAqL1xyXG4gICAgcHJvcGFnYXRlT25DaGFuZ2UobmV3VmFsdWUpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm9wYWdhdGVkT25DaGFuZ2UgIT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVkT25DaGFuZ2UgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkNoYW5nZShuZXdWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBDb3Vyc2UsIFNjaG9vbCwgVXNlckhpZGRlbkNvdXJzZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgeyBzaG93RXJyb3IsIGZsYXR0ZW4sIGNvbXBhcmVQcm9wLCBzaG93SW5mbywgTCB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcclxuaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZywgZ2VuZXJhdGVRdWVyeVN0cmluZyB9IGZyb20gXCIuLi8uLi91dGlscy9xdWVyeS1zdHJpbmdcIjtcclxuaW1wb3J0IHsgcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkgfSBmcm9tICcuLi8uLi9hY2Nlc3MtY29udHJvbC9pbmRleCc7XHJcbmltcG9ydCB7IGhpZGRlbkNvdXJzZXNSZXBvLCBDb3Vyc2VXaXRoSGlkZGVuU3RhdGUgfSBmcm9tICcuLi8uLi9yZXBvcy9oaWRkZW4tY291cnNlcy1yZXBvJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgaXNMb2FkaW5nOiBib29sZWFuXHJcbiAgY291cnNlczogQ291cnNlV2l0aEhpZGRlblN0YXRlW11cclxuICBoZWFkZXJPcGVuOiBib29sZWFuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMaXN0Q291cnNlcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgaXNMb2FkaW5nOiB0cnVlLFxyXG4gICAgICBjb3Vyc2VzOiBbXSxcclxuICAgICAgaGVhZGVyT3BlbjogZmFsc2VcclxuICAgIH07XHJcbiAgICB0aGlzLnVwZGF0ZUhpZGRlbkNvdXJzZXMgPSB0aGlzLnVwZGF0ZUhpZGRlbkNvdXJzZXMuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgIGhpZGRlbkNvdXJzZXNSZXBvLnN1YnNjcmliZSh0aGlzLnVwZGF0ZUhpZGRlbkNvdXJzZXMsIHtmdWxsQ291cnNlOiB0cnVlfSk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgIGhpZGRlbkNvdXJzZXNSZXBvLnVuc3Vic2NyaWJlKHRoaXMudXBkYXRlSGlkZGVuQ291cnNlcyk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVIaWRkZW5Db3Vyc2VzKGNvdXJzZXM6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZVtdKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtjb3Vyc2VzLCBpc0xvYWRpbmc6IGZhbHNlfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBoaWRlQ291cnNlKGNvdXJzZTogQ291cnNlV2l0aEhpZGRlblN0YXRlKSB7XHJcbiAgICBzaG93SW5mbyhMYFNwYXJhci4uLmApO1xyXG4gICAgYXdhaXQgaGlkZGVuQ291cnNlc1JlcG8uaGlkZUNvdXJzZShjb3Vyc2UpO1xyXG4gICAgc2hvd0luZm8oXCJcIik7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzaG93Q291cnNlKGNvdXJzZTogQ291cnNlV2l0aEhpZGRlblN0YXRlKSB7XHJcbiAgICBzaG93SW5mbyhMYFNwYXJhci4uLmApO1xyXG4gICAgYXdhaXQgaGlkZGVuQ291cnNlc1JlcG8uc2hvd0NvdXJzZShjb3Vyc2UpO1xyXG4gICAgc2hvd0luZm8oXCJcIik7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBpZiAodGhpcy5zdGF0ZS5pc0xvYWRpbmcpIHJldHVybiA8U3Bpbm5lciAvPjtcclxuICAgIGNvbnN0IHtjb3Vyc2VzfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB2aXNpYmxlQ291cnNlcyA9IGNvdXJzZXMuZmlsdGVyKGNvdXJzZSA9PiBjb3Vyc2UudmlzaWJsZSk7XHJcbiAgICBjb25zdCBoaWRkZW5Db3Vyc2VzID0gY291cnNlcy5maWx0ZXIoY291cnNlID0+ICFjb3Vyc2UudmlzaWJsZSk7XHJcbiAgICBjb25zdCBxdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoKTtcclxuICAgIGNvbnN0IHZpZXdDb3Vyc2VVcmwgPSBjZmcuS0VEX0NPVVJTRV9WSUVXRVJfVVJMO1xyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxyXG4gICAgICA8aDM+U2tvbGFucyBrdXJzZXI8L2gzPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXIgb2RkLWV2ZW5cIj5cclxuICAgICAgICB7dmlzaWJsZUNvdXJzZXMubWFwKGNvdXJzZSA9PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHVkZW50Q291cnNlXCIga2V5PXtjb3Vyc2UuaWR9PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBwdWxsLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJoaWRlSXRlbVwiIG9uQ2xpY2s9eygpID0+IHRoaXMuaGlkZUNvdXJzZShjb3Vyc2UpfSAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPXtwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSh2aWV3Q291cnNlVXJsLCB7Y291cnNlSWQ6IGNvdXJzZS5pZH0pfT57Y291cnNlLm5hbWV9PC9hPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzbWFsbFwiPntjb3Vyc2UuZGVzY3JpcHRpb259PC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2Pil9XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkNsb3NlXCIgKyAodGhpcy5zdGF0ZS5oZWFkZXJPcGVuID8gXCIgb3BlblwiIDogXCJcIil9PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3BlbkhlYWRlclwiIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBoZWFkZXJPcGVuOiAhdGhpcy5zdGF0ZS5oZWFkZXJPcGVuIH0pfT5cclxuICAgICAgICAgIDxoNT5Eb2xkYSBrdXJzZXI8L2g1PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3BlbkNvbnRlbnRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lciBvZGQtZXZlblwiPlxyXG4gICAgICAgICAgICB7aGlkZGVuQ291cnNlcy5tYXAoY291cnNlID0+IFxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0dWRlbnRDb3Vyc2VcIiBrZXk9e2NvdXJzZS5pZH0+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBwdWxsLXJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInNob3dJdGVtXCIgb25DbGljaz17KCkgPT4gdGhpcy5zaG93Q291cnNlKGNvdXJzZSl9PjwvYT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj17Z2VuZXJhdGVRdWVyeVN0cmluZyh7Li4ucXVlcnksIGNvdXJzZUlkOiBjb3Vyc2UuaWR9KX0+e2NvdXJzZS5uYW1lfTwvYT5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj57Y291cnNlLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+KX1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IExlYXJuaW5nTW9kdWxlVGFzaywgVGFza0xpc3QgfSBmcm9tICcuL3Rhc2stbGlzdCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGNvbW1vblRhc2tzOiBMZWFybmluZ01vZHVsZVRhc2tbXVxyXG4gIGxlYXJuaW5nR29hbHM6IExlYXJuaW5nR29hbFtdXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdHb2FsIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgbGVhcm5pbmdUYXNrczogTGVhcm5pbmdNb2R1bGVUYXNrW107XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMZWFybmluZ0dvYWxzTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHtjb21tb25UYXNrcywgbGVhcm5pbmdHb2Fsc30gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIDxkaXY+e2xlYXJuaW5nR29hbHMubWFwKGxnID0+IDxkaXYga2V5PXtsZy5uYW1lfT5cclxuICAgICAgPGg1PntsZy5uYW1lfTwvaDU+XHJcbiAgICAgIDxUYXNrTGlzdCBsZWFybmluZ1Rhc2tzPXtsZy5sZWFybmluZ1Rhc2tzfSAvPlxyXG4gICAgPC9kaXY+KX1cclxuICAgIHtjb21tb25UYXNrcy5sZW5ndGggPiAwICYmIDxkaXY+XHJcbiAgICAgIHtsZWFybmluZ0dvYWxzLmxlbmd0aCA+IDAgJiYgPGg1PsOWdmVyZ3JpcGFuZGU8L2g1Pn1cclxuICAgICAgPFRhc2tMaXN0IGxlYXJuaW5nVGFza3M9e2NvbW1vblRhc2tzfSAvPlxyXG4gICAgPC9kaXY+fVxyXG4gICAgPC9kaXY+O1xyXG4gIH1cclxufSIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHtNb2NrRURTQWNhZGVtaWNZZWFyLCBNb2NrRURTRGF0ZVJhbmdlfSBmcm9tICcuLi9jb250cmFjdHMvZWRzJztcclxuaW1wb3J0IHtBY2FkZW1pY1llYXJTdHJ1Y3R1cmUsICBUZXJtIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBJbmplY3RlZEludGwgfSBmcm9tICdyZWFjdC1pbnRsJzsgIFxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmljU2Nob29sTW9tZW50IHtcclxuICAgIGFjYWRlbWljWWVhclN0cnVjdHVyZTogQWNhZGVtaWNZZWFyU3RydWN0dXJlO1xyXG4gICAgdGVybTogVGVybTtcclxuICB9XHJcbiAgXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50QWNhZGVtaWNZZWFyKGN1cnJlbnREYXRlOiBtb21lbnQuTW9tZW50LCBhY2FkZW1pY1llYXI6IE1vY2tFRFNBY2FkZW1pY1llYXIpIDogR2VuZXJpY1NjaG9vbE1vbWVudFxyXG57XHJcbiAgdmFyIGZpcnN0VGVybVN0YXJ0RGF0ZSA9IG1vbWVudChuZXcgRGF0ZShhY2FkZW1pY1llYXIuZmlyc3RUZXJtLnN0YXJ0RGF0ZSkpO1xyXG4gIHZhciBmaXJzdFRlcm1FbmREYXRlID0gbW9tZW50KG5ldyBEYXRlKGFjYWRlbWljWWVhci5maXJzdFRlcm0uZW5kRGF0ZSkpO1xyXG4gIHZhciBzZWNvbmRUZXJtU3RhcnREYXRlID0gbW9tZW50KG5ldyBEYXRlKGFjYWRlbWljWWVhci5zZWNvbmRUZXJtLnN0YXJ0RGF0ZSkpO1xyXG4gIHZhciBzZWNvbmRUZXJtRW5kRGF0ZSA9IG1vbWVudChuZXcgRGF0ZShhY2FkZW1pY1llYXIuc2Vjb25kVGVybS5lbmREYXRlKSk7XHJcbiAgdmFyIGFjYWRlbWljUGVyaW9kID0gZmlyc3RUZXJtU3RhcnREYXRlLnllYXIoKSArIFwiL1wiICsgc2Vjb25kVGVybUVuZERhdGUueWVhcigpO1xyXG5cclxuICB2YXIgaG9saWRheXMgPSBfZ2V0VGVybUhvbGlkYXlzKGFjYWRlbWljWWVhci5ob2xpZGF5cywgZmlyc3RUZXJtU3RhcnREYXRlLCBmaXJzdFRlcm1FbmREYXRlKTsgXHJcbiAgaWYoY3VycmVudERhdGUgPCBmaXJzdFRlcm1FbmREYXRlKVxyXG4gIHtcclxuICAgIC8vY29tcHV0ZSBhY2FkZW1pYyB3ZWVrIG51bWJlcnNcclxuICAgIHZhciBhY2FkZW1pY1N0YXJ0V2VlayA9IDE7XHJcbiAgICB2YXIgYWNhZGVtaWNFbmRXZWVrID0gZmlyc3RUZXJtRW5kRGF0ZS53ZWVrKCkgLSBmaXJzdFRlcm1TdGFydERhdGUud2VlaygpO1xyXG4gICAgLy9nZXQgY3VycmVudCB0ZXJtIGhvbGlkYXlzXHJcbiAgICByZXR1cm4ge3Rlcm06ICdBVCcsIGFjYWRlbWljWWVhclN0cnVjdHVyZToge2FjYWRlbWljWWVhcjogYWNhZGVtaWNQZXJpb2QsIHN0YXJ0RGF0ZTogZmlyc3RUZXJtU3RhcnREYXRlLCBlbmREYXRlOiBmaXJzdFRlcm1FbmREYXRlLGFjYWRlbWljU3RhcnRXZWVrLCBhY2FkZW1pY0VuZFdlZWssIGhvbGlkYXlzfX07XHJcbiAgfVxyXG5cclxuICAvL2NvbXB1dGUgdGhlIG51bWJlciBvZiBmaXJzdCB0ZXJtIGhvbGlkYXlzIHdlZWsgbnVtYmVyc1xyXG4gIHZhciBudW1iZXJPZkhvbGlkYXlXZWVrcyA9IF9nZXRIb2xpZGF5V2Vla3NOdW1iZXIoaG9saWRheXMpO1xyXG4gIC8vY29tcHV0ZSBhY2FkZW1pYyB3ZWVrIG51bWJlcnNcclxuICB2YXIgYWNhZGVtaWNTdGFydFdlZWsgPSBzZWNvbmRUZXJtU3RhcnREYXRlLmNsb25lKCkuYWRkKDEsICd3ZWVrJykud2VlaygpIC0gZmlyc3RUZXJtU3RhcnREYXRlLndlZWsoKSAtIG51bWJlck9mSG9saWRheVdlZWtzO1xyXG4gIHZhciBhY2FkZW1pY0VuZFdlZWsgPSBzZWNvbmRUZXJtRW5kRGF0ZS5jbG9uZSgpLmFkZCgpLmFkZCgxLCAnd2VlaycpLndlZWsoKSAtIGZpcnN0VGVybVN0YXJ0RGF0ZS53ZWVrKCkgLSBudW1iZXJPZkhvbGlkYXlXZWVrcztcclxuICAvL2dldCBjdXJyZW50IHRlcm0gaG9saWRheXNcclxuICB2YXIgaG9saWRheXMgPSBfZ2V0VGVybUhvbGlkYXlzKGFjYWRlbWljWWVhci5ob2xpZGF5cywgc2Vjb25kVGVybVN0YXJ0RGF0ZSwgc2Vjb25kVGVybUVuZERhdGUpO1xyXG4gIHJldHVybiB7dGVybTogJ1NUJywgYWNhZGVtaWNZZWFyU3RydWN0dXJlOiB7YWNhZGVtaWNZZWFyOiBhY2FkZW1pY1BlcmlvZCwgc3RhcnREYXRlOiBzZWNvbmRUZXJtU3RhcnREYXRlLCBlbmREYXRlOiBzZWNvbmRUZXJtRW5kRGF0ZSwgYWNhZGVtaWNTdGFydFdlZWssIGFjYWRlbWljRW5kV2VlaywgaG9saWRheXN9fTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2hvb2xUcmFuc2xhdGVkU3ViamVjdHMoc2Nob29sTG9jYWxlOiBzdHJpbmcsIGludGw6IEluamVjdGVkSW50bCl7XHJcbiAgdmFyIHRyYW5zbGF0ZWRDb2x1bW5zID0ge307XHJcbiAgLy90aGVzZSBhcmUgZml4ZWQgZm9yIGFsbCBzY2hvb2wgbG9jYWxlc1xyXG4gIHRyYW5zbGF0ZWRDb2x1bW5zW1wiS3Vyc1wiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuY291cnNlXCIsIGRlZmF1bHRNZXNzYWdlOiBcIkt1cnNcIn0pO1xyXG4gIHRyYW5zbGF0ZWRDb2x1bW5zW1wiS29tbWVudGFyXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5jb21tZW50c1wiLCBkZWZhdWx0TWVzc2FnZTogXCJLb21tZW50YXJcIn0pO1xyXG5cclxuICBpZihzY2hvb2xMb2NhbGUgPT09ICdzdicpe1xyXG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJNLnNwclwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIubW9kZXJuTGFuZ3VhZ2VcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiTS5zcHJcIn0pO1xyXG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJNYVwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIubWF0aHNcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiTWFcIn0pO1xyXG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJTdi9TdkFcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLnN3ZWRpc2hMYW5ndWFnZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJTdi9TdkFcIn0pO1xyXG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJFbmdcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLmVuZ2xpc2hMYW5ndWFnZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJFbmdcIn0pO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIHRyYW5zbGF0ZWRDb2x1bW5zW1wiTUZMXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5tb2Rlcm5MYW5ndWFnZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJNRkxcIn0pO1xyXG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJNYVwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIubWF0aHNcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiTWF0aHNcIn0pO1xyXG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJIaVwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuaGluZGlMYW5ndWFnZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJIaW5kaVwifSk7XHJcbiAgICB0cmFuc2xhdGVkQ29sdW1uc1tcIkVuZ1wiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuZW5nbGlzaExhbmd1YWdlXCIsIGRlZmF1bHRNZXNzYWdlOiBcIkVuZ2xpc2hcIn0pO1xyXG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJZb2dhXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci55b2dhXCIsIGRlZmF1bHRNZXNzYWdlOiBcIllvZ2FcIn0pO1xyXG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJJQ1RcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLmljdFwiLCBkZWZhdWx0TWVzc2FnZTogXCJJQ1RcIn0pO1xyXG4gIH1cclxuICByZXR1cm4gdHJhbnNsYXRlZENvbHVtbnM7XHJcbn1cclxuXHJcbi8vdGhpcyBpcyByZWxhdGVkIHRvIGNoYXJ0cy4gSXQgaXMgdXNlZCBvbmx5IGZvciBzdiBsb2NhbGVcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaG9vbFRyYW5zbGF0ZWRTdWJqZWN0RnVsbG5hbWUoaW50bDogSW5qZWN0ZWRJbnRsKXtcclxuICB2YXIgdHJhbnNsYXRlZENvbHVtbnMgPSB7fTtcclxuXHJcbiAgdHJhbnNsYXRlZENvbHVtbnNbXCJNLnNwclwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIubW9kZXJuTGFuZ3VhZ2VGdWxsbmFtZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJNLnNwcsOla1wifSk7XHJcbiAgdHJhbnNsYXRlZENvbHVtbnNbXCJNYVwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIubWF0aHNGdWxsbmFtZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJNYXRlbWF0aWtcIn0pO1xyXG4gIHRyYW5zbGF0ZWRDb2x1bW5zW1wiU3YvU3ZBXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5zd2VkaXNoTGFuZ3VhZ2VGdWxsTmFtZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJTdmVuc2thXCJ9KTtcclxuICB0cmFuc2xhdGVkQ29sdW1uc1tcIkVuZ1wiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuZW5nbGlzaExhbmd1YWdlRnVsbE5hbWVcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiRW5nZWxza2FcIn0pO1xyXG5cclxuICByZXR1cm4gdHJhbnNsYXRlZENvbHVtbnM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9nZXRUZXJtSG9saWRheXMoaG9saWRheXM6IE1vY2tFRFNEYXRlUmFuZ2VbXSwgdGVybVN0YXJ0RGF0ZTogbW9tZW50Lk1vbWVudCwgdGVybUVuZERhdGU6IG1vbWVudC5Nb21lbnQpe1xyXG4gIHJldHVybiBob2xpZGF5cy5maWx0ZXIoZWxlbSA9PiB7XHJcbiAgICByZXR1cm4gbW9tZW50KGVsZW0uc3RhcnREYXRlKS5pc0JldHdlZW4odGVybVN0YXJ0RGF0ZSwgdGVybUVuZERhdGUpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfZ2V0SG9saWRheVdlZWtzTnVtYmVyKGhvbGlkYXlzOk1vY2tFRFNEYXRlUmFuZ2VbXSl7XHJcbiAgdmFyIG51bWJlck9mV2Vla3MgPSAwO1xyXG4gIGhvbGlkYXlzLmZvckVhY2goZWxlbSA9PiB7XHJcbiAgICAvL3RoZSBudW1iZXIgb2Ygd2Vla3MgaXMgdGhlIGRpZmZlcmVuY2UgKyAxXHJcbiAgICBudW1iZXJPZldlZWtzKz0gbW9tZW50KGVsZW0uZW5kRGF0ZSkuYWRkKDEsICd3ZWVrJykud2VlaygpIC0gbW9tZW50KGVsZW0uc3RhcnREYXRlKS53ZWVrKCk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIG51bWJlck9mV2Vla3M7XHJcbn0iLCJpbXBvcnQge1Rlcm19IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcclxuaW1wb3J0IHtFRFNDb3Vyc2V9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcnN0QW5kTGFzdFdlZWsodGVybTogVGVybSkge1xyXG4gIHJldHVybiB0ZXJtID09PSAnQVQnID9cclxuICAgIFszMywgNTBdIDogIC8vIFRoaXMgaXMgYSBndWVzcyEgTmVlZCBkYXRhISBTaG91bGQgYmUgcG9zc2libGUgdG8gZ2V0IGZyb20gc2tvbGEyND9cclxuICAgIFsyLCAyM107ICAgIC8vIFRoaXMgaXMgYSBndWVzcyEgTmVlZCBkYXRhIVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTEFTVF9TVEVQX1NQUklORyA9IDI4OyAvLyBXZWVrIDI4IGlzIGluIHN1bW1lci4gVXNlIGl0IGFzIHBsYWNlaG9sZGVyIGZvciBcImxhc3Qgc3RlcFwiXHJcbmV4cG9ydCBjb25zdCBMQVNUX1NURVBfQVVUVU1OID0gNTI7IC8vIFdlZWsgbXVzdCBiZSB2YWxpZC4gVXNlIGl0IGFzIHBsYWNlaG9sZGVyIGZvciBcImxhc3Qgc3RlcFwiXHJcblxyXG4vKipcclxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBzd2VkaXNoIHNjaG9vbC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ291cnNlRnJvbUNvbHVtbkhlYWRlcihcclxuICBjb3Vyc2VzOiBFRFNDb3Vyc2VbXSxcclxuICBjb2x1bW5IZWFkZXI6IHN0cmluZykgOiBFRFNDb3Vyc2UgfCBudWxsXHJcbntcclxuICBzd2l0Y2ggKGNvbHVtbkhlYWRlcikge1xyXG4gICAgY2FzZSAnTS5zcHInOiByZXR1cm4gY291cnNlc1xyXG4gICAgICAuZmlsdGVyKGNvdXJzZSA9PiBjb3Vyc2Uuc2hvcnROYW1lICE9PSAnTUEnICYmIGNvdXJzZS5zaG9ydE5hbWUuc3RhcnRzV2l0aCgnTScpKVswXSB8fCBudWxsO1xyXG4gICAgY2FzZSAnTWEnOiByZXR1cm4gY291cnNlcy5maWx0ZXIoYyA9PiBjLnNob3J0TmFtZSA9PT0gXCJNQVwiKVswXSB8fCBudWxsO1xyXG4gICAgY2FzZSAnU3YvU3ZBJzogcmV0dXJuIGNvdXJzZXMuZmlsdGVyKGMgPT4gYy5zaG9ydE5hbWUuc3RhcnRzV2l0aChcIlNWXCIpKVswXSB8fCBudWxsO1xyXG4gICAgY2FzZSAnRW5nJzogcmV0dXJuIGNvdXJzZXMuZmlsdGVyKGMgPT4gYy5zaG9ydE5hbWUgPT09IFwiRU5cIilbMF0gfHwgbnVsbDtcclxuICB9XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2x1bW5zSGVhZGVyKGxvY2FsZTogc3RyaW5nKTogc3RyaW5nW11cclxue1xyXG4gIHN3aXRjaChsb2NhbGUpXHJcbiAge1xyXG4gICAgY2FzZSAnc3YnOlxyXG4gICAgcmV0dXJuIFsnTS5zcHInLCdNYScsICdTdi9TdkEnLCAnRW5nJ107XHJcbiAgICBjYXNlICdlbl9zaW4nOlxyXG4gICAgcmV0dXJuIFsnTUZMJywnTWEnLCAnSGknLCAnRW5nJywgJ1lvZ2EnLCAnSUNUJ107XHJcbiAgICBjYXNlICdlbl9uaW4nOlxyXG4gICAgcmV0dXJuIFsnTUZMJywnTWEnLCAnSGknLCAnRW5nJywgJ1lvZ2EnLCAnSUNUJ107XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBzd2VkaXNoIHNjaG9vbC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2x1bW5IZWFkZXJGcm9tQ291cnNlKGNvdXJzZTogRURTQ291cnNlKSA6IHN0cmluZ1xyXG57XHJcbiAgY29uc3Qgc2hvcnROYW1lID0gY291cnNlLnNob3J0TmFtZTtcclxuICBpZiAoc2hvcnROYW1lID09PSBcIk1BXCIpIHJldHVybiAnTWEnO1xyXG4gIGlmIChzaG9ydE5hbWUgPT09IFwiRU5cIikgcmV0dXJuICdFbmcnO1xyXG4gIGlmIChzaG9ydE5hbWUuc3RhcnRzV2l0aChcIlNWXCIpKSByZXR1cm4gJ1N2L1N2QSc7XHJcbiAgaWYgKHNob3J0TmFtZS5zdGFydHNXaXRoKFwiTTJcIikpIHJldHVybiAnTS5zcHInO1xyXG4gIHJldHVybiBudWxsO1xyXG59XHJcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgQWNhZGVtaWNZZWFyU3RydWN0dXJlLCBUZXJtIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBNb2NrRURTQWNhZGVtaWNZZWFyIH0gZnJvbSAnLi4vY29udHJhY3RzL2Vkcyc7XHJcbmltcG9ydCB7IEdlbmVyaWNTY2hvb2xNb21lbnQsIGdldEN1cnJlbnRBY2FkZW1pY1llYXIgfSBmcm9tICcuL2dlbmVyaWMtc2Nob29sLXV0aWxzJztcclxuaW1wb3J0IHsgSW5qZWN0ZWRJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCB7IExBU1RfU1RFUF9TUFJJTkcsIExBU1RfU1RFUF9BVVRVTU4gfSBmcm9tICcuLi9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL3Rlcm1wbGFubmVyLXV0aWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBHZW5lcmljU2Nob29sVGVybSB7XHJcbiAgc2Nob29sTW9tZW50OiBHZW5lcmljU2Nob29sTW9tZW50O1xyXG4gIHNlbGVjdGVkRGF0ZTogRGF0ZTtcclxuICBsb2NhbGU6IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoY3VycmVudERhdGU6IERhdGUsIGN1cnJlbnRMb2NhbGU/OiBzdHJpbmcsIGFjYWRlbWljWWVhclN0cnVjdHVyZT86IE1vY2tFRFNBY2FkZW1pY1llYXIpIHtcclxuICAgIHRoaXMubG9jYWxlID0gY3VycmVudExvY2FsZSB8fCBcInN2XCI7XHJcbiAgICB0aGlzLnNlbGVjdGVkRGF0ZSA9IGN1cnJlbnREYXRlO1xyXG4gICAgdGhpcy5zY2hvb2xNb21lbnQgPSBhY2FkZW1pY1llYXJTdHJ1Y3R1cmUgPyBnZXRDdXJyZW50QWNhZGVtaWNZZWFyKG1vbWVudChjdXJyZW50RGF0ZSksIGFjYWRlbWljWWVhclN0cnVjdHVyZSkgOiBudWxsO1xyXG4gIH1cclxuXHJcbiAgZ2V0VGVybVN0YXJ0QW5kRW5kKGluY2x1ZGVFeHRyYVdlZWs/OiBib29sZWFuKTogbW9tZW50Lk1vbWVudFtdIHtcclxuICAgIC8vSW4gY2FzZSB0aGF0IHRoZSB3ZWVrIHN0YXJ0IGRhdGUgaXMgYSBkYXRlIGZyb20gdGhlIHByZXZpb3VzIHllYXJcclxuICAgIC8vQ29uc2lkZXIgdGhlIHN0YXJ0IG9mIHRoZSB3ZWVrICggc3RhcnQgZGF0ZSkgYXMgdGhlIGRheSBvZiB0aGUgMDEuMDEueWVhclxyXG4gICAgdmFyIHN0YXJ0T2ZUZXJtV2VlayA9IHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5zdGFydERhdGUuY2xvbmUoKS5zdGFydE9mKCd3ZWVrJyk7XHJcblxyXG4gICAgaWYgKHN0YXJ0T2ZUZXJtV2Vlay55ZWFyKCkgPCB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuc3RhcnREYXRlLnllYXIoKSkge1xyXG4gICAgICBzdGFydE9mVGVybVdlZWsgPSB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuc3RhcnREYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBlbmRPZlRlcm1XZWVrID0gdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGU7XHJcblxyXG4gICAgaWYodGhpcy5sb2NhbGUgPT09IFwic3ZcIiAmJiBpbmNsdWRlRXh0cmFXZWVrICYmIHRoaXMuc2Nob29sTW9tZW50LnRlcm0gPT09IFwiU1RcIil7XHJcbiAgICAgIGVuZE9mVGVybVdlZWsgPSBlbmRPZlRlcm1XZWVrLmNsb25lKCkuYWRkKDMsICd3ZWVrcycpLmVuZE9mKCd3ZWVrJyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmKGluY2x1ZGVFeHRyYVdlZWspe1xyXG4gICAgICBpZih0aGlzLmxvY2FsZSAhPSBcInN2XCIpe1xyXG4gICAgICAgIC8vIGZvciBpbmRpYSB0aGUgZW5kIGRhdGUgY2FuIGJlIGluIHRoZSBtaWRkbGUgb2YgdGhlIHdlZWtcclxuICAgICAgICBlbmRPZlRlcm1XZWVrPSB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuZW5kRGF0ZS5jbG9uZSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVuZE9mVGVybVdlZWsgPSAgdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGUuY2xvbmUoKS5hZGQoMSwgJ3dlZWsnKS5lbmRPZignd2VlaycpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBbc3RhcnRPZlRlcm1XZWVrLCBlbmRPZlRlcm1XZWVrXTtcclxuICB9XHJcblxyXG4gIGdldEZpcnN0QW5kTGFzdFdlZWtPZlRlcm0oKSB7XHJcbiAgICByZXR1cm4gW3RoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5zdGFydERhdGUud2VlaygpLCB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuZW5kRGF0ZS53ZWVrKCldO1xyXG4gIH1cclxuXHJcbiAgaXNDdXJyZW50V2VlayhkYXRlVGltZTogbnVtYmVyKSA6IGJvb2xlYW4ge1xyXG4gICAgdmFyIHRlcm1EYXRlID0gbW9tZW50KGRhdGVUaW1lKVxyXG4gICAgcmV0dXJuIHRlcm1EYXRlLnllYXIoKSA9PT0gbW9tZW50KCkueWVhcigpICYmIHRlcm1EYXRlLndlZWsoKSA9PT0gbW9tZW50KCkud2VlaygpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TGFzdFN0ZXBXZWVrKGxvY2FsZTogc3RyaW5nKSB7XHJcbiAgICAvL1RPRE86IHRoaXMgc2hvdWxkIGJlIHJlZmFjdG9yZWQuIFRoZSBnZW5lcmljIG1ldGhvZCBzaG91bGQgYmUgdXNlZFxyXG4gICAgaWYobG9jYWxlID09PSBcInN2XCIpe1xyXG4gICAgICByZXR1cm4gdGhpcy5zY2hvb2xNb21lbnQudGVybSA9PT0gXCJTVFwiID8gTEFTVF9TVEVQX1NQUklORyA6IExBU1RfU1RFUF9BVVRVTU47XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGUuY2xvbmUoKS5hZGQoMSwgXCJ3ZWVrXCIpLndlZWsoKTtcclxuICB9XHJcblxyXG4gIHRvTG9jYWxlU3RyaW5nKGludGw6IEluamVjdGVkSW50bCwgc2hvcnRZZWFyPzogYm9vbGVhbikge1xyXG4gICAgaWYodGhpcy5zY2hvb2xNb21lbnQpXHJcbiAgICB7XHJcbiAgICBsZXQgeWVhciA9IHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5lbmREYXRlLnllYXIoKS50b1N0cmluZygpO1xyXG5cclxuICAgIGlmIChzaG9ydFllYXIpXHJcbiAgICAgIHllYXIgPSB5ZWFyLnN1YnN0cigyKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5zY2hvb2xNb21lbnQudGVybSA9PT0gJ0FUJyA/IGludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAndGVybXBsYW5uZXIuc2Vjb25kVGVybScsIGRlZmF1bHRNZXNzYWdlOiAnSFQge3llYXJ9JyB9LCB7IHllYXI6IHllYXIgfSkgOlxyXG4gICAgICBpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ3Rlcm1wbGFubmVyLmZpcnN0VGVybScsIGRlZmF1bHRNZXNzYWdlOiAnVlQge3llYXJ9JyB9LCB7IHllYXI6IHllYXIgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIG5leHRUZXJtKCkge1xyXG4gICAgLy9zd2l0Y2ggdG8gbmV4dCBzZW1lc3Rlciwgd2Ugc2V0IHRoZSBjdXJyZW50IGRhdGUgYXMgYWRkaW5nIDMgbW9udGhzIHRvIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgc2VtZXN0ZXJcclxuICAgIHZhciBlbmREYXRlID0gdGhpcy5zY2hvb2xNb21lbnQgPyB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuZW5kRGF0ZS5jbG9uZSgpIDogbW9tZW50KCk7XHJcbiAgICB2YXIgbmV4dERhdGUgPSBlbmREYXRlLmFkZCgzLCAnbW9udGhzJyk7XHJcbiAgICByZXR1cm4gbmV3IEdlbmVyaWNTY2hvb2xUZXJtKG5leHREYXRlLnRvRGF0ZSgpLCB0aGlzLmxvY2FsZSk7XHJcbiAgfVxyXG5cclxuICBwcmV2VGVybSgpIHtcclxuICAgIC8vdG8gc3dpdGNoIHRvIG5leHQgc2VtZXN0ZXIsIHdlIHNldCB0aGUgY3VycmVudCBkYXRlIGFzIHN1YnRyYWN0aW5nIDMgbW9udGhzIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBjdXJyZW50IHNlbWVzdGVyXHJcbiAgICB2YXIgc3RhcnREYXRlID0gdGhpcy5zY2hvb2xNb21lbnQgPyAgdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLnN0YXJ0RGF0ZS5jbG9uZSgpIDogbW9tZW50KCk7XHJcbiAgICB2YXIgcHJldkRhdGUgPSBzdGFydERhdGUuc3VidHJhY3QoMywgJ21vbnRocycpO1xyXG4gICAgcmV0dXJuIG5ldyBHZW5lcmljU2Nob29sVGVybShwcmV2RGF0ZS50b0RhdGUoKSwgdGhpcy5sb2NhbGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0UGVyaW9kTmFtZSgpe1xyXG4gICAgcmV0dXJuIHRoaXMuc2Nob29sTW9tZW50LnRlcm0gKyB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuZW5kRGF0ZS55ZWFyKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEtTVGVybVBsYW5uZXJXZWVrUGxhbiwgVGVybVBsYW5uZXJUdXRvck5vdGUsIFRlcm1wbGFubmVyV2Vla09yVHV0b3IgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IEVEU0NvdXJzZSB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xyXG5pbXBvcnQge1xyXG4gIGdldENvbHVtbnNIZWFkZXIsXHJcbiAgZ2V0Q29sdW1uSGVhZGVyRnJvbUNvdXJzZSxcclxufSBmcm9tICcuL3Rlcm1wbGFubmVyLXV0aWxzJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBLRURXZWVrIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Vla3V0aWwnO1xyXG5pbXBvcnQge0luamVjdGVkSW50bH0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCB7IEdlbmVyaWNTY2hvb2xUZXJtIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2VuZXJpYy1zY2hvb2wtdGVybSc7XHJcbmltcG9ydCB7IGdldFNjaG9vbFRyYW5zbGF0ZWRTdWJqZWN0cyB9IGZyb20gJy4uLy4uL3V0aWxzL2dlbmVyaWMtc2Nob29sLXV0aWxzJztcclxuXHJcbmludGVyZmFjZSBDb2x1bW4ge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICB0cmFuc2xhdGVkTmFtZT86IHN0cmluZztcclxuICBpc0ZpeGVkPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZpZXdNb2RlbCB7XHJcbiAgd2Vla1BsYW5zT3JUdXRvck5vdGU6IFRlcm1wbGFubmVyV2Vla09yVHV0b3JbXTtcclxuICAvL3dlZWtUdXRvck5vdGVzOiBUZXJtUGxhbm5lclR1dG9yTm90ZVtdO1xyXG4gIGxhc3RTdGVwczogS1NUZXJtUGxhbm5lcldlZWtQbGFuO1xyXG4gIGNvbXBsZXRlZFN0ZXBzOiB7IFtjb2x1bW5IZWFkZXJBbmRzdGVwOiBzdHJpbmddOiB0cnVlIH07XHJcbiAgdGVybUdvYWxzOiB7IFtjb2x1bW5IZWFkZXI6IHN0cmluZ106IHN0cmluZyB9O1xyXG4gIHllYXI6IG51bWJlcjtcclxuICBzdWJqZWN0UHJvZ3Jlc3M6IHtbY29sdW1uSGVhZGVyOiBzdHJpbmddOiB7ZmluYWxTdGVwQ29tcGxldGVkOiBib29sZWFuLCB2YWx1ZTogbnVtYmVyfX0gPSB7fTtcclxuICBjb2x1bW5zOiBDb2x1bW5bXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRiV2Vla1BsYW5zOiBUZXJtcGxhbm5lcldlZWtPclR1dG9yW10sXHJcbiAgICAvL2RiVHV0b3JOb3RlczogVGVybVBsYW5uZXJUdXRvck5vdGVbXSxcclxuICAgIGNvdXJzZXM6IEVEU0NvdXJzZVtdLFxyXG4gICAgY3VycmVudFNjaG9vbFRlcm06IEdlbmVyaWNTY2hvb2xUZXJtLFxyXG4gICAgY3VycmVudFNjaG9vbExvY2FsZTogc3RyaW5nLFxyXG4gICAgaW50bDogSW5qZWN0ZWRJbnRsLFxyXG4gICAgc2hvd1R1dG9yQ29tbWVudEZpZWxkOiBib29sZWFuXHJcbiAgKSB7XHJcbiAgICB0aGlzLndlZWtQbGFuc09yVHV0b3JOb3RlID0gW107XHJcbiAgICBpZiAoY3VycmVudFNjaG9vbFRlcm0uc2Nob29sTW9tZW50KSB7XHJcbiAgICAgIGNvbnN0IFt0ZXJtU3RhcnQsIHRlcm1FbmRdID0gY3VycmVudFNjaG9vbFRlcm0uZ2V0VGVybVN0YXJ0QW5kRW5kKCk7XHJcbiAgICAgIHRoaXMueWVhciA9IHRlcm1TdGFydC55ZWFyKCk7XHJcbiAgICAgIC8vaW5pdCBjb2x1bW5zXHJcbiAgICAgIHZhciBjb2x1bW5IZWFkZXJzID0gZ2V0Q29sdW1uc0hlYWRlcihjdXJyZW50U2Nob29sTG9jYWxlKTtcclxuICAgICAgY29sdW1uSGVhZGVycy5mb3JFYWNoKGMgPT4gdGhpcy5jb2x1bW5zLnB1c2goeyBuYW1lOiBjIH0pKTtcclxuICAgICAgLy9kZWZpbmUgZml4ZWQgY29sdW1ucyAtIHdlIGtlZXAgdGhlc2Ugc2VwYXJhdGVkLCBpbiBjYXNlIHRoYXQgdGhlIG90aGVyIGNvbHVtbnMgd2lsbCBiZSBkeW5hbWljYWxseSByZXRyaWV2ZWRcclxuICAgICAgY29uc3QgZml4ZWRDb2x1bW5zID0gW3sgbmFtZTogXCJLdXJzXCIsIGlzRml4ZWQ6IHRydWUgfSwgeyBuYW1lOiBcIktvbW1lbnRhclwiLCBpc0ZpeGVkOiB0cnVlIH1dO1xyXG4gICAgICBpZihzaG93VHV0b3JDb21tZW50RmllbGQpe1xyXG4gICAgICAgIGZpeGVkQ29sdW1ucy5wdXNoKCB7IG5hbWU6IFwiVHV0b3JDb21tZW50XCIsIGlzRml4ZWQ6dHJ1ZX0pO1xyXG4gICAgICB9XHJcbiAgICAgIC8vQWRkIGZpeGVkIGNvbHVtbnMgbmFtZXNcclxuICAgICAgdGhpcy5jb2x1bW5zLnB1c2goLi4uZml4ZWRDb2x1bW5zKTtcclxuICAgICAgLy9wb3B1bGF0ZSB0cmFuc2xhdGlvbnNcclxuICAgICAgdmFyIHRyYW5zbGF0ZWRDb2x1bW5zID0gZ2V0U2Nob29sVHJhbnNsYXRlZFN1YmplY3RzKGN1cnJlbnRTY2hvb2xMb2NhbGUsIGludGwpO1xyXG4gICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgICAgICBlbGVtZW50LnRyYW5zbGF0ZWROYW1lID0gdHJhbnNsYXRlZENvbHVtbnNbZWxlbWVudC5uYW1lXTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICB2YXIgY3VycmVudFRlcm1Ib2xpZGF5cyA9IGN1cnJlbnRTY2hvb2xUZXJtLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuaG9saWRheXM7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRUZXJtID0gY3VycmVudFNjaG9vbFRlcm0uc2Nob29sTW9tZW50LnRlcm07XHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIHdlZWtQbGFuc1xyXG4gICAgICAvL1xyXG4gICAgIGxldCB3ZWVrcGxhblZhbHVlczogS1NUZXJtUGxhbm5lcldlZWtQbGFuW10gPSBkYldlZWtQbGFucy5maWx0ZXIoKHg6IEtTVGVybVBsYW5uZXJXZWVrUGxhbikgPT4gIXgudHlwZSkgYXMgS1NUZXJtUGxhbm5lcldlZWtQbGFuW107XHJcbiAgICAgbGV0IHR1dG9yVmFsdWVzIDogVGVybVBsYW5uZXJUdXRvck5vdGVbXSA9IGRiV2Vla1BsYW5zLmZpbHRlcigodzogVGVybVBsYW5uZXJUdXRvck5vdGUpID0+IHcudHlwZSA9PT0gJ3R1dG9yLW5vdGUnKSBhcyBUZXJtUGxhbm5lclR1dG9yTm90ZVtdO1xyXG5cclxuICAgICAgdmFyIHN0YXJ0QWNhZGVtaWNZZWFyTnVtYmVyID0gY3VycmVudFNjaG9vbFRlcm0uc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5hY2FkZW1pY1N0YXJ0V2VlaztcclxuICAgICAgZm9yIChsZXQgd2Vla01vbWVudCA9IHRlcm1TdGFydC5jbG9uZSgpO1xyXG4gICAgICAgIHdlZWtNb21lbnQudmFsdWVPZigpIDwgdGVybUVuZC52YWx1ZU9mKCk7XHJcbiAgICAgICAgd2Vla01vbWVudCA9IHdlZWtNb21lbnQuY2xvbmUoKS5hZGQoMSwgJ3dlZWsnKS5zdGFydE9mKCd3ZWVrJykpIHtcclxuXHJcbiAgICAgICAgdmFyIGhvbGlkYXlQZXJpb2QgPSBjdXJyZW50VGVybUhvbGlkYXlzLmZpbHRlcihoPT4gd2Vla01vbWVudC53ZWVrKCkgPj0gbW9tZW50KGguc3RhcnREYXRlKS5zdGFydE9mKFwid2Vla1wiKS53ZWVrKCkgJiYgXHJcbiAgICAgICAgd2Vla01vbWVudC53ZWVrKCkgPD0gbW9tZW50KGguZW5kRGF0ZSkuZW5kT2YoJ3dlZWsnKS53ZWVrKCkpO1xyXG4gICAgICAgIC8vaWYgdGhlIGN1cnJlbnQgd2VlayBpcyBhIGhvbGlkYXkgd2Vlaywgc2tpcCBpdFxyXG4gICAgICAgIGlmKGhvbGlkYXlQZXJpb2QubGVuZ3RoID4gMCl7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgd2Vla051bWJlciA9IHdlZWtNb21lbnQud2VlaygpO1xyXG4gICAgICAgIGNvbnN0IGtlZFdlZWsgPSBLRURXZWVrKHdlZWtNb21lbnQueWVhcigpLCB3ZWVrTnVtYmVyKTtcclxuICAgICAgICAvL0EgdGVybSBjYW4gZW5kIGFuZCBzdGFydCBvbiB0aGUgc2FtZSB3ZWVrIGZvciBJbmRpYVxyXG4gICAgICAgIC8vaW4gdGhpcyBjYXNlIHdlIHNob3VsZCBmaWx0ZXIgdGhlbSBieSB0aGUgdGVybVxyXG4gICAgICAgIC8vVGhpcyBpcyBub3QgdGhlIGNhc2UgZm9yIHN2IGxvY2FsZSBhbmQgd2Ugd2FudCB0byBza2lwIHRoaXMgY2hlY2sgXHJcbiAgICAgICAgLy9iZWNhdXNlIGRhdGEgaXMgYWxyZWFkeSBzYXZlZCBpbiB0aGUgZGF0YWJhc2VcclxuICAgICAgICBjb25zdCB3ZWVrUGxhbiA9IHdlZWtwbGFuVmFsdWVzLmZpbHRlcih3cCA9PlxyXG4gICAgICAgICAgd3AuZGF0ZVRpbWUgPj0ga2VkV2Vlay5ub3RCZWZvcmUgJiZcclxuICAgICAgICAgIHdwLmRhdGVUaW1lIDw9IGtlZFdlZWsubm90QWZ0ZXIgJiZcclxuICAgICAgICAgICghd3AuaXNGaW5hbFN0ZXAgJiZcclxuICAgICAgICAgIHdwLnRlcm0gPT09IGN1cnJlbnRUZXJtIHx8IGludGwubG9jYWxlID09PSBcInN2XCIpKVswXTtcclxuXHJcbiAgICAgICAgY29uc3QgdHV0b3JOb3RlID0gdHV0b3JWYWx1ZXMuZmlsdGVyKHdwID0+IFxyXG4gICAgICAgICAgd3AuZGF0ZVRpbWUgPj0ga2VkV2Vlay5ub3RCZWZvcmUgJiZcclxuICAgICAgICAgIHdwLmRhdGVUaW1lIDw9IGtlZFdlZWsubm90QWZ0ZXIgJiZcclxuICAgICAgICAgICh3cC50ZXJtID09PSBjdXJyZW50VGVybSB8fCBpbnRsLmxvY2FsZSA9PT0gXCJzdlwiKSlbMF07XHJcblxyXG4gICAgICAgIHRoaXMud2Vla1BsYW5zT3JUdXRvck5vdGUucHVzaCh7XHJcbiAgICAgICAgICAuLi53ZWVrUGxhbiB8fCB7fSxcclxuICAgICAgICAgIGlkOiB3ZWVrUGxhbiA/IHdlZWtQbGFuLmlkIDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICAgICAgZGF0ZVRpbWU6IHdlZWtQbGFuID8gd2Vla1BsYW4uZGF0ZVRpbWUgOiB3ZWVrTW9tZW50LnZhbHVlT2YoKSxcclxuICAgICAgICAgIGNlbGxWYWx1ZXM6IHdlZWtQbGFuID8gd2Vla1BsYW4uY2VsbFZhbHVlcyA6IHt9LFxyXG4gICAgICAgICAgd2Vla051bWJlcixcclxuICAgICAgICAgIGFjYWRlbWljV2Vla051bWJlcjogc3RhcnRBY2FkZW1pY1llYXJOdW1iZXIrKyxcclxuICAgICAgICAgIHRlcm06IGN1cnJlbnRUZXJtXHJcbiAgICAgICAgfSBhcyBLU1Rlcm1QbGFubmVyV2Vla1BsYW4pO1xyXG5cclxuICAgICAgICB0aGlzLndlZWtQbGFuc09yVHV0b3JOb3RlLnB1c2goe1xyXG4gICAgICAgICAgLi4udHV0b3JOb3RlIHx8IHt9LFxyXG4gICAgICAgICAgaWQ6IHR1dG9yTm90ZSA/IHR1dG9yTm90ZS5pZCA6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICAgIHR5cGU6ICd0dXRvci1ub3RlJyxcclxuICAgICAgICAgIGRhdGVUaW1lOiB0dXRvck5vdGUgPyB0dXRvck5vdGUuZGF0ZVRpbWUgOiB3ZWVrTW9tZW50LnZhbHVlT2YoKSxcclxuICAgICAgICAgIGNvbnRlbnQ6IHR1dG9yTm90ZSA/IHR1dG9yTm90ZS5jb250ZW50IDogJycsXHJcbiAgICAgICAgICB3ZWVrTnVtYmVyLFxyXG4gICAgICAgICAgdGVybTogY3VycmVudFRlcm0gIFxyXG4gICAgICAgIH0gYXMgVGVybVBsYW5uZXJUdXRvck5vdGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvL1xyXG4gICAgICAvLyBsYXN0U3RlcHNcclxuICAgICAgLy9cclxuICAgICAgY29uc3QgbGFzdFN0ZXBXZWVrID0gY3VycmVudFNjaG9vbFRlcm0uZ2V0TGFzdFN0ZXBXZWVrKGludGwubG9jYWxlKTtcclxuICAgICAgY29uc3QgbGFzdFN0ZXBLZWRXZWVrID0gS0VEV2Vlayh0ZXJtRW5kLnllYXIoKSwgbGFzdFN0ZXBXZWVrKTtcclxuICAgICAgdGhpcy5sYXN0U3RlcHMgPSB3ZWVrcGxhblZhbHVlcy5maWx0ZXIod3AgPT5cclxuICAgICAgICB3cC5kYXRlVGltZSA+PSBsYXN0U3RlcEtlZFdlZWsubm90QmVmb3JlICYmXHJcbiAgICAgICAgd3AuZGF0ZVRpbWUgPD0gbGFzdFN0ZXBLZWRXZWVrLm5vdEFmdGVyICYmIFxyXG4gICAgICAgICh3cC5pc0ZpbmFsU3RlcCAmJlxyXG4gICAgICAgIHdwLnRlcm0gPT09IGN1cnJlbnRUZXJtIHx8IGludGwubG9jYWxlID09PSBcInN2XCIpKVswXSB8fCB7XHJcbiAgICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICAgICAgZGF0ZVRpbWU6IG1vbWVudCh0ZXJtRW5kKS5jbG9uZSgpLndlZWsobGFzdFN0ZXBXZWVrKS5zdGFydE9mKCd3ZWVrJykudmFsdWVPZigpLFxyXG4gICAgICAgICAgY2VsbFZhbHVlczoge30sXHJcbiAgICAgICAgICB3ZWVrTnVtYmVyOiBsYXN0U3RlcFdlZWssXHJcbiAgICAgICAgICB0ZXJtOiBjdXJyZW50VGVybSxcclxuICAgICAgICAgIGlzRmluYWxTdGVwOiB0cnVlXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICB0aGlzLmNvbXBsZXRlZFN0ZXBzID0ge307XHJcbiAgICAgIHRoaXMudGVybUdvYWxzID0ge307XHJcbiAgICAgIHZhciBtYXhTdWJqZWN0U3RlcCA9IHt9O1xyXG4gICAgICBmb3IgKGNvbnN0IGNvdXJzZSBvZiBjb3Vyc2VzKSB7XHJcbiAgICAgICAgY29uc3QgY29sdW1uSGVhZGVyID0gZ2V0Q29sdW1uSGVhZGVyRnJvbUNvdXJzZShjb3Vyc2UpO1xyXG4gICAgICAgIC8vXHJcbiAgICAgICAgLy8gY29tcGxldGVkU3RlcHNcclxuICAgICAgICAvL1xyXG4gICAgICAgIGZvciAoY29uc3Qgc3RlcCBvZiBjb3Vyc2UuY291cnNlU3RlcHMpIHtcclxuICAgICAgICAgIGlmIChzdGVwLmlzQ29tcGxldGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkU3RlcHNbY29sdW1uSGVhZGVyICsgc3RlcC5zaG9ydE5hbWVdID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIC8vc2V0IHRoZSBtYXhpbXVtIHZhbHVlIG9mIHRoZSBjb21wbGV0ZWQgc3RlcCBmb3IgZWFjaCBzdWJqZWN0XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50U3RlcFZhbHVlID0gcGFyc2VJbnQoc3RlcC5zaG9ydE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoIWlzTmFOKGN1cnJlbnRTdGVwVmFsdWUpICYmIGN1cnJlbnRTdGVwVmFsdWUgPiAobWF4U3ViamVjdFN0ZXBbY29sdW1uSGVhZGVyXSA/IG1heFN1YmplY3RTdGVwW2NvbHVtbkhlYWRlcl0gOiAwKSkge1xyXG4gICAgICAgICAgICAgIG1heFN1YmplY3RTdGVwW2NvbHVtbkhlYWRlcl0gPSBjdXJyZW50U3RlcFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvKmNvbnN0IHdlZWtQbGFucyA9IGZpbmRXZWVrUGxhbnNCeVN0ZXAodGhpcy53ZWVrUGxhbnMsIHN0ZXAuU2hvcnROYW1lKTtcclxuICAgICAgICAgICAgd2Vla1BsYW5zLmZvckVhY2god2Vla1BsYW4gPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWRTdGVwc1t3ZWVrUGxhbi53ZWVrICsgY29sdW1uSGVhZGVyXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pKi9cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyB0ZXJtR29hbHNcclxuICAgICAgICAvL1xyXG4gICAgICAgIHRoaXMudGVybUdvYWxzW2NvbHVtbkhlYWRlcl0gPSBjb3Vyc2UucGVyaW9kR29hbEdyYWRlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZihjb3Vyc2VzKSB7XHJcbiAgICAgICAgLy9pbml0XHJcbiAgICAgICAgY29sdW1uSGVhZGVycy5mb3JFYWNoKGVsZW0gPT4ge1xyXG4gICAgICAgICAgdGhpcy5zdWJqZWN0UHJvZ3Jlc3NbZWxlbV0gPSB7ZmluYWxTdGVwQ29tcGxldGVkOmZhbHNlLCB2YWx1ZTogMH07XHJcbiAgICAgICAgfSlcclxuICAgICAgICAvL2NvbXB1dGUgY2hhcnRzIGJ5IGNvbXB1dGluZyAgY29tcGxldGVkIGdvYWwgKHNhdmVkIGRhdGEgZnJvbSBrZWRiYWNrZW5kIGlzIG5vdCB0YWtlbiBpbnRvIGFjY291bnQpL2xhc3RTdGVwVmFsdWVcclxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmxhc3RTdGVwcy5jZWxsVmFsdWVzKS5mb3JFYWNoKCh2YWwpID0+IHtcclxuICAgICAgICAgIC8vZXhjbHVkZSB0aGUgZml4ZWQgY29sdW1ucy4gQ2hhcnRzIHNob3VsZCBub3QgYmUgZGlzcGxheWVkIGZvciB0aG9zZVxyXG4gICAgICAgICAgaWYgKCFmaXhlZENvbHVtbnNbdmFsXSkge1xyXG4gICAgICAgICAgdmFyIGhhc05vRmluYWxTdGVwVmFsdWUgPSBpc05hTihwYXJzZUludCh0aGlzLmxhc3RTdGVwcy5jZWxsVmFsdWVzW3ZhbF0pKSB8fCAhdGhpcy5sYXN0U3RlcHMuY2VsbFZhbHVlc1t2YWxdO1xyXG4gICAgICAgICAgdmFyIGZpbmFsU3RlcFZhbHVlID0gaGFzTm9GaW5hbFN0ZXBWYWx1ZSA/IDAgOiBwYXJzZUludCh0aGlzLmxhc3RTdGVwcy5jZWxsVmFsdWVzW3ZhbF0pO1xyXG4gICAgICAgICAgdmFyIHBlcmNlblZhbHVlID0gZmluYWxTdGVwVmFsdWUgPiAwID8gbWF4U3ViamVjdFN0ZXBbdmFsXSAqIDEwMCAvIGZpbmFsU3RlcFZhbHVlIDogMDtcclxuICAgICAgICAgIHRoaXMuc3ViamVjdFByb2dyZXNzW3ZhbF0gPSB7ZmluYWxTdGVwQ29tcGxldGVkOiAhaGFzTm9GaW5hbFN0ZXBWYWx1ZSwgdmFsdWU6IHBlcmNlblZhbHVlfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZmluZFdlZWtQbGFuc0J5U3RlcCh3ZWVrUGxhbnM6IEtTVGVybVBsYW5uZXJXZWVrUGxhbltdLCBzdGVwOiBzdHJpbmcpOiBLU1Rlcm1QbGFubmVyV2Vla1BsYW5bXSB7XHJcbiAgcmV0dXJuIHdlZWtQbGFucy5maWx0ZXIod3AgPT4gT2JqZWN0LmtleXMod3AuY2VsbFZhbHVlcykubWFwKGNvbHVtbiA9PiB3cC5jZWxsVmFsdWVzW2NvbHVtbl0gPT09IHN0ZXApKTtcclxufVxyXG4iLCJpbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJSZXBvIH0gZnJvbSAnLi9rcy10ZXJtcGxhbm5lci1yZXBvJztcclxuXHJcbmV4cG9ydCBjb25zdCB0ZXJtUGxhbm5lclJlcG9LUyA9IG5ldyBLU1Rlcm1QbGFubmVyUmVwbygoKT0+ZW52LmtlZEJhY2tlbmRDbGllbnQsICgpPT5lbnYuY3VycmVudFVzZXIpO1xyXG5lbnYua3NUZXJtUGxhbm5lclJlcG8gPSB0ZXJtUGxhbm5lclJlcG9LUztcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIHBlcmNlbnRhZ2U6IG51bWJlcjtcclxuICAgIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcclxuICAgIHByb2dyZXNzQ29sb3I/OiBzdHJpbmc7XHJcbiAgICBlcnJvck1lc3NhZ2U/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBEb3VnaG51dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gICAgcHVibGljIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNlZmVmZWZcIixcclxuICAgICAgICBwcm9ncmVzc0NvbG9yOiBcIiMzZGJjYTJcIixcclxuICAgICAgICBlcnJvck1lc3NhZ2U6IG51bGxcclxuICAgIH07XHJcblxyXG4gICAgcmVuZGVyKCl7XHJcbiAgICAgICAgY29uc3Qge3BlcmNlbnRhZ2UsIGVycm9yTWVzc2FnZSwgYmFja2dyb3VuZENvbG9yLCBwcm9ncmVzc0NvbG9yfSA9IHRoaXMucHJvcHM7XHJcbiAgICAgICAgLy9kZWZhdWx0IHZhbHVlc1xyXG4gICAgICAgIHZhciBzdHJva2UgPSAyO1xyXG4gICAgICAgIC8vZXF1YWxzIHdpdGggaGUgY2lyY3VtZmVyZW5jZS8ySUlcclxuICAgICAgICB2YXIgcmFkaXVzID0gMTAwIC8gKDIgKiAzLjE0KTtcclxuICAgICAgICAvL3Rha2UgaW50byBhY2NvdW50IHRoZSBzdHJva2VcclxuICAgICAgICB2YXIgY2VudGVyID0gcmFkaXVzICsgc3Ryb2tlOyBcclxuICAgICAgICB2YXIgdmlld2JveFcgPSBjZW50ZXIgKiAyO1xyXG4gICAgICAgIHZhciB2aWV3dmJveEggPSBjZW50ZXIgKiAyO1xyXG4gICAgICAgIGNvbnN0IHJvdW5kZWRQZXJjZW50YWdlID0gTWF0aC5yb3VuZChwZXJjZW50YWdlKTtcclxuICAgICAgICB2YXIgc3RhcnRFcnJvclRleHQgPSAxMDtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cImRvdWdobnV0LWNoYXJ0XCIgdmlld0JveD17YDAgMCAke3ZpZXdib3hXfSAke3ZpZXd2Ym94SH1gfSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCI+XHJcbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGNsYXNzTmFtZT1cImNpcmNsZS1jaGFydC1iYWNrZ3JvdW5kXCIgc3Ryb2tlPXtiYWNrZ3JvdW5kQ29sb3J9IHN0cm9rZVdpZHRoPXtzdHJva2UgKyAxfSBmaWxsPVwibm9uZVwiIGN4PXtjZW50ZXJ9IGN5PXtjZW50ZXJ9IHI9e3JhZGl1c30gLz5cclxuICAgICAgICAgICAgICAgIDxjaXJjbGUgY2xhc3NOYW1lPVwiY2lyY2xlLWNoYXJ0LWNpcmNsZVwiIHN0cm9rZT17cHJvZ3Jlc3NDb2xvcn0gcmVmPVwicHJvZ3Jlc3NDaXJjbGVcIiBzdHJva2VXaWR0aD17c3Ryb2tlfSBzdHlsZT17eyBzdHJva2VEYXNoYXJyYXk6IGAke3JvdW5kZWRQZXJjZW50YWdlfSwgMTAwYCB9fSBzdHJva2VMaW5lY2FwPVwicm91bmRcIiBmaWxsPVwibm9uZVwiIGN4PXtjZW50ZXJ9IGN5PXtjZW50ZXJ9IHI9e3JhZGl1c30gLz5cclxuICAgICAgICAgICAgICAgIDxnIGNsYXNzTmFtZT1cImNpcmNsZS1jaGFydC1pbmZvXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgeyFlcnJvck1lc3NhZ2UgPyA8dGV4dCBjbGFzc05hbWU9XCJjaXJjbGUtY2hhcnQtcGVyY2VudFwiIHg9e2NlbnRlcn0geT17Y2VudGVyfSBhbGlnbm1lbnRCYXNlbGluZT1cImNlbnRyYWxcIiB0ZXh0QW5jaG9yPVwibWlkZGxlXCI+e2Ake3JvdW5kZWRQZXJjZW50YWdlfSVgfTwvdGV4dD4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGV4dCBjbGFzc05hbWU9XCJjaXJjbGUtY2hhcnQtcGVyY2VudC1lcnJvclwiIHg9e2NlbnRlcn0geT17Y2VudGVyfSBhbGlnbm1lbnRCYXNlbGluZT1cImNlbnRyYWxcIiBmb250U2l6ZT1cIjVcIiB0ZXh0QW5jaG9yPVwibWlkZGxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlLnNwbGl0KCcgJykubWFwKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHNwYW4gPSA8dHNwYW4ga2V5PXtlbGVtZW50fSB4PXtjZW50ZXJ9IHk9e3N0YXJ0RXJyb3JUZXh0fT57ZWxlbWVudH08L3RzcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEVycm9yVGV4dCArPSA1O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHNwYW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZXh0Pn1cclxuICAgICAgICAgICAgICAgIDwvZz5cclxuICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBHZW5lcmljU2Nob29sVGVybSB9IGZyb20gJy4uLy4uL3V0aWxzL2dlbmVyaWMtc2Nob29sLXRlcm0nO1xyXG5pbXBvcnQge0VEU0NvdXJzZX0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2Vkcyc7XHJcbmltcG9ydCB7Vmlld01vZGVsfSBmcm9tICcuL3ZpZXdtb2RlbCc7XHJcbmltcG9ydCB7IENvbnRlbnRFZGl0YWJsZUZpZWxkfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvY29udGVudC1lZGl0YWJsZS1maWVsZCc7XHJcbmltcG9ydCAgeyBFbnYgfSBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBLU1Rlcm1QbGFubmVyV2Vla1BsYW4sIFRlcm1QbGFubmVyVHV0b3JOb3RlLCBUZXJtcGxhbm5lcldlZWtPclR1dG9yIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgJy4uLy4uL3JlcG9zL2tzLXRlcm1wbGFubmVyLXJlcG8taW5zdGFuY2UnO1xyXG5pbXBvcnQge0xhbmd1YWdlQ29udGV4dH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XHJcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xyXG5pbXBvcnQgeyBEb3VnaG51dCB9IGZyb20gJy4uL2NoYXJ0cy9kb3VnaG51dCc7XHJcbmltcG9ydCB7IGdldFNjaG9vbFRyYW5zbGF0ZWRTdWJqZWN0RnVsbG5hbWUgfSBmcm9tICcuLi8uLi91dGlscy9nZW5lcmljLXNjaG9vbC11dGlscyc7XHJcbmltcG9ydCB7IERpYWxvZ3MgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZGlhbG9ncyc7XHJcbmltcG9ydCB7IFR1dG9yRGlhbG9nIH0gZnJvbSAnLi90dXRvci1kaWFsb2cnO1xyXG5pbXBvcnQgeyBEb2N1bWVudEFjY2VzcyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgZmVhdHVyZXMgfSBmcm9tICcuLi8uLi9mZWF0dXJlcyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGluaXRpYWxEYXRlOiBEYXRlO1xyXG4gIHR1dG9yZWQ6IGJvb2xlYW47XHJcbiAgZW52OiBFbnY7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgc2Nob29sVGVybTogR2VuZXJpY1NjaG9vbFRlcm07XHJcbiAgd2Vla1BsYW5zOiBUZXJtcGxhbm5lcldlZWtPclR1dG9yW107XHJcbiAgYWN0aXZlQ291cnNlczogRURTQ291cnNlW107XHJcbiAgbG9hZGluZ1dlZWtQbGFuczogYm9vbGVhbjtcclxuICBsb2FkaW5nQWN0aXZlQ291cnNlczogYm9vbGVhbjtcclxuICBlcnJvcjogRXJyb3IgfCBzdHJpbmcgfCBudWxsO1xyXG4gIGluaXRpYWxMb2FkOiBib29sZWFuO1xyXG4gIGRpYWxvZ3M6IGFueVtdO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEtTVGVybVBsYW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICB0YWJsZTogSFRNTFRhYmxlRWxlbWVudDtcclxuICBmbG93SWQ6IG51bWJlcjtcclxuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XHJcbiAgZmllbGRzOiBDb250ZW50RWRpdGFibGVGaWVsZFtdW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgc2Nob29sVGVybTogbmV3IEdlbmVyaWNTY2hvb2xUZXJtKHByb3BzLmluaXRpYWxEYXRlKSxcclxuICAgICAgYWN0aXZlQ291cnNlczogW10sXHJcbiAgICAgIHdlZWtQbGFuczogW10sXHJcbiAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICBsb2FkaW5nQWN0aXZlQ291cnNlczogZmFsc2UsXHJcbiAgICAgIGxvYWRpbmdXZWVrUGxhbnM6IGZhbHNlLFxyXG4gICAgICBpbml0aWFsTG9hZDogdHJ1ZSxcclxuICAgICAgZGlhbG9nczogW11cclxuICAgIH1cclxuICAgIHRoaXMuZmxvd0lkID0gMTtcclxuICAgIHRoaXMudXBkYXRlV2Vla1BsYW5zID0gdGhpcy51cGRhdGVXZWVrUGxhbnMuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgIHRoaXMubG9hZCh0aGlzLnN0YXRlLnNjaG9vbFRlcm0pO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLnByb3BzLmVudi5rc1Rlcm1QbGFubmVyUmVwby5tZW0uc3Vic2NyaWJlKHRoaXMudXBkYXRlV2Vla1BsYW5zKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgdGhpcy5wcm9wcy5lbnYua3NUZXJtUGxhbm5lclJlcG8ubWVtLnVuc3Vic2NyaWJlKHRoaXMudXBkYXRlV2Vla1BsYW5zKTtcclxuICB9ICBcclxuXHJcbiAgdXBkYXRlV2Vla1BsYW5zKHdlZWtQbGFuc09yVHV0b3JDb21tOiBUZXJtcGxhbm5lcldlZWtPclR1dG9yW10sIGVycm9yPzogRXJyb3IpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe3dlZWtQbGFuczogd2Vla1BsYW5zT3JUdXRvckNvbW0sIGxvYWRpbmdXZWVrUGxhbnM6IGZhbHNlLCBlcnJvcjogZXJyb3IgfHwgbnVsbH0pO1xyXG4gIH1cclxuXHJcbiAgbG9hZChzY2hvb2xUZXJtOiBHZW5lcmljU2Nob29sVGVybSkge1xyXG4gICAgY29uc3QgZmxvd0lkID0gKyt0aGlzLmZsb3dJZDtcclxuICAgIHRoaXMuZmllbGRzID0gW107XHJcblxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIC8vbG9hZGluZ1dlZWtQbGFuczogdHJ1ZSxcclxuICAgICAgbG9hZGluZ0FjdGl2ZUNvdXJzZXM6IHRydWVcclxuICAgIH0pO1xyXG4gICAgY29uc3Qge2tzVGVybVBsYW5uZXJSZXBvfSA9IHRoaXMucHJvcHMuZW52O1xyXG5cclxuICAgIHRoaXMubG9hZEFjYWRlbWljWWVhckRhdGVzKHNjaG9vbFRlcm0sIGNmZy5LRURfU0NIT09MX0xPQ0FMRSlcclxuICAgIC50aGVuKHRlcm0gPT4ge1xyXG4gICAgICBpZiAodGhpcy5mbG93SWQgPT09IGZsb3dJZCkge1xyXG4gICAgICAgIHZhciBjdXJyZW50U2Nob29sVGVybSA9IG5ldyBHZW5lcmljU2Nob29sVGVybShzY2hvb2xUZXJtLnNlbGVjdGVkRGF0ZSwgdGhpcy5jb250ZXh0LmludGwubG9jYWxlLCB0ZXJtKTtcclxuICAgICAgICAvL3JlZnJlc2ggc2F2ZWQgZGF0YVxyXG4gICAgICAgIGtzVGVybVBsYW5uZXJSZXBvLnJlZnJlc2hEYXRhKGN1cnJlbnRTY2hvb2xUZXJtLmdldFRlcm1TdGFydEFuZEVuZCh0cnVlKSk7XHJcblxyXG4gICAgICAgIC8vcmVsb2FkIGNvdXJzZXMgYmFzZWQgb24gdGhlIGN1cnJlbnQgZGF0ZVxyXG4gICAgICAgIHRoaXMubG9hZEFjdGl2ZUNvdXJzZXMoY3VycmVudFNjaG9vbFRlcm0pLnRoZW4oYWN0aXZlQ291cnNlcyA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5mbG93SWQgPT09IGZsb3dJZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtzY2hvb2xUZXJtOiBjdXJyZW50U2Nob29sVGVybSwgaW5pdGlhbExvYWQ6IGZhbHNlLCBhY3RpdmVDb3Vyc2VzLCBsb2FkaW5nQWN0aXZlQ291cnNlczogZmFsc2V9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICBpZiAodGhpcy5mbG93SWQgPT09IGZsb3dJZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtzY2hvb2xUZXJtOiBjdXJyZW50U2Nob29sVGVybSwgbG9hZGluZ0FjdGl2ZUNvdXJzZXM6IGZhbHNlLCBlcnJvcn0pOyAgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7OyAgIFxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWRBY2FkZW1pY1llYXJEYXRlcyhzY2hvb2xUZXJtOiBHZW5lcmljU2Nob29sVGVybSwgc2Nob29sTG9jYWxlOnN0cmluZyl7XHJcbiAgICBjb25zdCB0ZXJtRGF0ZXMgPSBhd2FpdCB0aGlzLnByb3BzLmVudi5lZHNDbGllbnQuZ2V0QWNhZGVtaWNZZWFyVGVybXMoc2Nob29sTG9jYWxlLCBzY2hvb2xUZXJtLnNlbGVjdGVkRGF0ZSk7XHJcbiAgICByZXR1cm4gdGVybURhdGVzO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZEFjdGl2ZUNvdXJzZXMoc2Nob29sVGVybTogR2VuZXJpY1NjaG9vbFRlcm0pIHtcclxuICAgIC8vQ3VzdG9tIGZvciBub3cgaW4gb3JkZXIgdG8gY2hhbmdlIEVEU1BlcmlvZFxyXG4gICAgLy9jb25zdCBwZXJpb2ROYW1lID0gbmV3IEVEU1BlcmlvZChzY2hvb2xUZXJtKS5wZXJpb2Q7IFxyXG4gICAgY29uc3QgcGVyaW9kTmFtZSA9IHNjaG9vbFRlcm0uZ2V0UGVyaW9kTmFtZSgpLnJlcGxhY2UoJ0FUJywgJ0hUJykucmVwbGFjZSgnU1QnLCAnVlQnKTsgLy90ZW1wb3JhcnkgZml4IFxyXG4gICAgY29uc3QgYWN0aXZlQ291cnNlcyA9IGF3YWl0IHRoaXMucHJvcHMuZW52LmVkc0NsaWVudC5nZXRBY3RpdmVDb3Vyc2VzKHtwZXJpb2ROYW1lfSk7XHJcbiAgICByZXR1cm4gYWN0aXZlQ291cnNlcztcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZUNlbGwod2Vla1BsYW46IEtTVGVybVBsYW5uZXJXZWVrUGxhbiwgY29sdW1uTmFtZTogc3RyaW5nLCBuZXdWYWx1ZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9ICh3ZWVrUGxhbiAmJiB3ZWVrUGxhbi5jZWxsVmFsdWVzW2NvbHVtbk5hbWVdKSB8fCBcIlwiO1xyXG4gICAgaWYgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xyXG4gICAgdHJ5IHtcclxuICAgICAgd2Vla1BsYW4uY2VsbFZhbHVlc1tjb2x1bW5OYW1lXSA9IG5ld1ZhbHVlO1xyXG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9wcy5lbnYua3NUZXJtUGxhbm5lclJlcG8udXBzZXJ0IChcclxuICAgICAgICB3ZWVrUGxhbixcclxuICAgICAgICAod3AgOiBLU1Rlcm1QbGFubmVyV2Vla1BsYW4pID0+ICB3cC5jZWxsVmFsdWVzW2NvbHVtbk5hbWVdID0gbmV3VmFsdWUpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayB8fCBlcnJvcik7XHJcbiAgICAgIGlmIChlcnJvci5uYW1lID09PSBcImh0dHA0MDNcIikge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yOiAgdGhpcy5jb250ZXh0LmludGwoe2lkOlwiY29tbW9uLmNoYW5nZXNOb3RTYXZlZFVuYXV0aG9yaXplZFwiLCBkZWZhdWx0TWVzc2FnZTpcIsOEbmRyaW5nYXJuYSBzcGFyYWRlcyBpbnRlIHAuZy5hLiBvdGlsbHLDpGNrbGlnIGJlaMO2cmlnaGV0LlwifSl9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtlcnJvcjogdGhpcy5jb250ZXh0LmludGwoe2lkOlwiY29tbW9uLmNoYW5nZXNOb3RTYXZlZEVycm9yT2NjdXJlZFwiLCBkZWZhdWx0TWVzc2FnZTpcIkbDtnIgdGlsbGbDpGxsZXQgcHJvYmxlbSBhdHQgc3BhcmEgZGF0YS4gRGluYSDDpG5kcmluZ2FyIHNwYXJhZGVzIGludGUuXCJ9KX0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBcclxuICAgKiBAcGFyYW0gdHV0b3JOb3RlIFxyXG4gICAqIEBwYXJhbSBuZXdWYWx1ZSBcclxuICAgKiBcclxuICAgKiBVcGRhdGUgdHV0b3IgZmllbGQgdmFsdWVcclxuICAgKi9cclxuICBhc3luYyB1cGRhdGVUdXRvck5vdGVGaWVsZCh0dXRvck5vdGU6IFRlcm1QbGFubmVyVHV0b3JOb3RlLCBuZXdWYWx1ZTogc3RyaW5nKXtcclxuICAgIGNvbnN0IG9sZFZhbHVlID0gKHR1dG9yTm90ZSAmJiB0dXRvck5vdGUuY29udGVudCkgfHwgXCJcIjtcclxuICAgIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHJldHVybjtcclxuICAgIHRyeSB7XHJcbiAgICAgIHR1dG9yTm90ZS5jb250ZW50ID0gbmV3VmFsdWU7XHJcbiAgICAgIC8vc2V0IGRvY3VtZW50IEFDTFxyXG4gICAgICB0dXRvck5vdGUuYWNsID0gW1xyXG4gICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcInR1dG9yRm9yXCIsIHRoaXMucHJvcHMuZW52LmN1cnJlbnRVc2VyLm1haWwsIFwiU1wiKS50b1N0cmluZygpLFxyXG4gICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcImVtYWlsXCIsIHRoaXMucHJvcHMuZW52LmN1cnJlbnRVc2VyLm1haWwsIFwiUlwiKS50b1N0cmluZygpLFxyXG4gICAgICBdO1xyXG5cclxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvcHMuZW52LmtzVGVybVBsYW5uZXJSZXBvLnVwc2VydCh0dXRvck5vdGUsIFxyXG4gICAgICAgIChub3RlIDogVGVybVBsYW5uZXJUdXRvck5vdGUpID0+IG5vdGUuY29udGVudCA9IG5ld1ZhbHVlKTtcclxuICAgICAgfSBjYXRjaCAoc2hvd0Vycm9yKXt9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZWxldGUgdHV0b3IgY29tbWVudCBieSBJZFxyXG4gICAqIEBwYXJhbSBub3RlSWRcclxuICAgKi9cclxuICBhc3luYyBkZWxldGVUdXRvck5vdGVGaWVsZChub3RlSWQ6IHN0cmluZykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYua3NUZXJtUGxhbm5lclJlcG8uZGVsZXRlKFtub3RlSWRdKTtcclxuICAgIH0gY2F0Y2ggKHNob3dFcnJvcil7fVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkIGEgY29tbWVudCBmcm9tIHR1dG9yXHJcbiAgICogQHBhcmFtIHdlZWtOdW1iZXIgXHJcbiAgICogQHBhcmFtIGNvbW1lbnQgXHJcbiAgICogXHJcbiAgICovXHJcbiAgb25UdXRvckNsaWNrKG5vdGU6IFRlcm1QbGFubmVyVHV0b3JOb3RlKSB7XHJcbiAgICB0aGlzLm9wZW5EaWFsb2coPFR1dG9yRGlhbG9nXHJcbiAgICAgIHdlZWtOdW1iZXI9e25vdGUud2Vla051bWJlcn1cclxuICAgICAgY29tbWVudD17bm90ZS5jb250ZW50fVxyXG4gICAgICBpbnRsPXt0aGlzLmNvbnRleHQuaW50bH1cclxuICAgICAgdXBkYXRlRGF0YSA9IHt2YWwgPT4gdGhpcy51cGRhdGVUdXRvck5vdGVGaWVsZChub3RlLCB2YWwpfVxyXG4gICAgICBkZWxldGVOb3RlRGF0YSA9IHsoKSA9PiB0aGlzLmRlbGV0ZVR1dG9yTm90ZUZpZWxkKG5vdGUuaWQpfVxyXG4gICAgICBjbG9zZURpYWxvZz17KCk9PnRoaXMuY2xvc2VEaWFsb2coKX0gLz4pO1xyXG4gIH1cclxuXHJcbiAgb3BlbkRpYWxvZyhkaWFsb2cpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBkaWFsb2dzOiBbLi4udGhpcy5zdGF0ZS5kaWFsb2dzLCBkaWFsb2ddIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xvc2VEaWFsb2coKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogdGhpcy5zdGF0ZS5kaWFsb2dzLnNsaWNlKDAsIHRoaXMuc3RhdGUuZGlhbG9ncy5sZW5ndGggLSAxKSB9KTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBOYXZpZ2F0ZSB0byBhZGphY2VudCBmaWVsZCBkZXBlbmRpbmcgb24gZGlyZWN0aW9uXHJcbiAgICogQHBhcmFtIHBvcyBjdXJyZW50IHBvc2l0aW9uIGluIGZpZWxkLW1hdHJpeFxyXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24gZGlyZWN0aW9uIHRvIHRha2VcclxuICAgKi9cclxuICBuYXZpZ2F0ZShwb3M6IHtyb3c6bnVtYmVyLCBjb2w6bnVtYmVyfSwgZGlyZWN0aW9uOnN0cmluZykge1xyXG4gICAgbGV0IG5ld3BvcyA9IHsuLi5wb3N9O1xyXG4gICAgbGV0IG1heFJvd3MgPSB0aGlzLmZpZWxkcy5sZW5ndGg7XHJcbiAgICBsZXQgbWF4Q29scyA9IE1hdGgubWF4KC4uLiB0aGlzLmZpZWxkcy5tYXAocm93ID0+IHJvdy5sZW5ndGgpKTtcclxuXHJcbiAgICBzd2l0Y2goZGlyZWN0aW9uKSB7XHJcbiAgICAgIGNhc2UgJ3VwJzpcclxuICAgICAgICBuZXdwb3Mucm93ID0gTWF0aC5tYXgocG9zLnJvdyAtIDEsIDApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdkb3duJzpcclxuICAgICAgICBuZXdwb3Mucm93ID0gTWF0aC5taW4ocG9zLnJvdyArIDEsIG1heFJvd3MpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICBuZXdwb3MuY29sID0gTWF0aC5tYXgocG9zLmNvbCAtIDEsIDApXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3JpZ2h0JzpcclxuICAgICAgICBuZXdwb3MuY29sID0gTWF0aC5taW4ocG9zLmNvbCArIDEsIG1heENvbHMpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5maWVsZHNbbmV3cG9zLnJvd10gJiYgdGhpcy5maWVsZHNbbmV3cG9zLnJvd11bbmV3cG9zLmNvbF0pXHJcbiAgICAgIHRoaXMuZmllbGRzW25ld3Bvcy5yb3ddW25ld3Bvcy5jb2xdLm15c2VsZi5jdXJyZW50LmZvY3VzKCk7XHJcbiAgfVxyXG5cclxuICBcclxuICAvKipcclxuICAgKiBBZGRzIGZpZWxkIHRvIGZpZWxkLW1hdHJpeCB0byBlbmFibGUgbmF2aWdhdGlvbiBpbiB0aGVlIHRhYmxlXHJcbiAgICogQHBhcmFtIGZpZWxkIGN1cnJlbnQgZmllbGRcclxuICAgKiBAcGFyYW0gcG9zIHBvc2l0aW9uIG9mIGZpZWxkIGluIGZpZWxkLW1hdHJpeFxyXG4gICAqL1xyXG4gIGFkZEZpZWxkKGZpZWxkOkNvbnRlbnRFZGl0YWJsZUZpZWxkLCBwb3M6e3JvdzpudW1iZXIsIGNvbDpudW1iZXJ9KSB7XHJcbiAgICBpZiAodGhpcy5maWVsZHNbcG9zLnJvd10gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLmZpZWxkc1twb3Mucm93XSA9IFtdO1xyXG4gICAgfVxyXG4gICAgdGhpcy5maWVsZHNbcG9zLnJvd11bcG9zLmNvbF0gPSBmaWVsZDtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIHRoZSBjZWxsIGluIHRoZSB0ZXJtcGxhbm5lciB0YWJsZVxyXG4gICAqIEBwYXJhbSByb3dJbmRleCBpbmRleCBvZiByb3cgaW4gdGFibGVcclxuICAgKiBAcGFyYW0gY29sSW5kZXggaW5kZXggb2YgY29sdW1uIGluIHRhYmxlXHJcbiAgICogQHBhcmFtIHN1YmplY3ROYW1lIG5hbWUgZmllbGRcclxuICAgKiBAcGFyYW0gbW9kZWwgLS11bnVzZWQ/XHJcbiAgICogQHBhcmFtIHdlZWtQbGFuIGN1cnJlbnQgcm93IGZyb20gd2Vla1BsYW5cclxuICAgKiBAcGFyYW0gcmVhZE9ubHlDZWxscyBpZiBjZWxscyBhcmUgcmVhZG9ubHlcclxuICAgKi9cclxuICBnZXRUYWJsZUNlbGwocm93SW5kZXg6IG51bWJlciwgY29sSW5kZXg6IG51bWJlciwgc3ViamVjdE5hbWU6IHN0cmluZywgbW9kZWw6IFZpZXdNb2RlbCwgXHJcbiAgICB3ZWVrUGxhbjogVGVybXBsYW5uZXJXZWVrT3JUdXRvciwgcmVhZE9ubHlDZWxsczogYm9vbGVhbiwgY29sVHlwZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCB7IGNvbXBsZXRlZFN0ZXBzIH0gPSBtb2RlbDtcclxuICAgIGNvbnN0IHBvcyA9IHtyb3c6IHJvd0luZGV4LCBjb2w6IGNvbEluZGV4fTtcclxuICAgIFxyXG4gICAgaWYgKGNvbFR5cGUgPT09ICdUdXRvcicpIHtcclxuICAgICAgdmFyIHR1dG9yZWRXZWVrUGxhbiA9IHdlZWtQbGFuIGFzIFRlcm1QbGFubmVyVHV0b3JOb3RlO1xyXG4gICAgICBjb25zdCB7Y29udGVudH0gPSB0dXRvcmVkV2Vla1BsYW47XHJcbiAgICAgIGlmICh0aGlzLnByb3BzLnR1dG9yZWQpIHtcclxuICAgICAgICByZXR1cm4gPHRkIGtleT17XCJ0dXRvcm5vdGVcIiArIGNvbEluZGV4fSBvbkNsaWNrPXsoKSA9PiB0aGlzLm9uVHV0b3JDbGljayh0dXRvcmVkV2Vla1BsYW4pfSBjbGFzc05hbWU9XCJ0dXRvckNlbGxcIj5cclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY29udGVudCA/IDxkaXYga2V5PXtjb2xJbmRleH0gZGF0YS10b29sdGlwPXtjb250ZW50fT48aSBrZXk9e2NvbEluZGV4fSBjbGFzc05hbWU9XCJmYXMgZmEtY29tbWVudC1kb3RzXCI+PC9pPjwvZGl2PiA6IFxyXG4gICAgICAgICAgICA8ZGl2IGtleT17Y29sSW5kZXh9PjxpIGtleT17Y29sSW5kZXh9IGNsYXNzTmFtZT1cImZhcyBmYS1jb21tZW50LW1lZGljYWxcIj48L2k+PC9kaXY+XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPC90ZD5cclxuICAgICAgfVxyXG5cclxuICAgIHJldHVybiA8dGQga2V5PXtcInR1dG9ybm90ZVwiICsgY29sSW5kZXh9IGNsYXNzTmFtZT1cInR1dG9yQ2VsbFwiPntjb250ZW50ICYmIDxkaXYga2V5PXtjb2xJbmRleH0gZGF0YS10b29sdGlwPXtjb250ZW50fT48aSBrZXk9e2NvbEluZGV4fSBjbGFzc05hbWU9XCJmYXIgZmEtY29tbWVudC1kb3RzXCI+PC9pPjwvZGl2Pn08L3RkPlxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICB2YXIgY3VycmVudFdlZWtQbGFuID0gd2Vla1BsYW4gYXMgS1NUZXJtUGxhbm5lcldlZWtQbGFuO1xyXG4gICAgY29uc3Qge2NlbGxWYWx1ZXN9ID0gY3VycmVudFdlZWtQbGFuO1xyXG4gICAgLy8gYW4gb3V0ZXIgdGQgY2VsbCBhbmQgaW5uZXIgZGl2IGlzIHVzZWQgdG8gcmVndWxhdGUgdGhlIGhlaWdodCBhbmQgYWxsb3cgZm9yIGVsbGlwc2VzIG9uIHRleHQtb3ZlcmZsb3dcclxuICAgIHJldHVybiA8dGQgY2xhc3NOYW1lPXt0aGlzLmdldENlbGxDbGFzc05hbWUoY29tcGxldGVkU3RlcHMsIGNlbGxWYWx1ZXMsIHN1YmplY3ROYW1lKX0+XHJcbiAgICAgIDxDb250ZW50RWRpdGFibGVGaWVsZFxyXG4gICAgICAgIGtleT17Y29sSW5kZXh9XHJcbiAgICAgICAgcmVmPXtmaWVsZCA9PiB0aGlzLmFkZEZpZWxkKGZpZWxkLCBwb3MpfVxyXG4gICAgICAgIHRleHQ9e2NlbGxWYWx1ZXNbc3ViamVjdE5hbWVdfVxyXG4gICAgICAgIHRhZz0nZGl2J1xyXG4gICAgICAgIHZhbGlkYXRlVmFsdWU9e2NvbFR5cGUgPT0gJ1N0ZXAnID8gL15cXGQqJC8gOiB1bmRlZmluZWR9XHJcbiAgICAgICAgbWF4Q2hhcnM9e2NvbFR5cGUgPT0gJ0NvbW1lbnQnPyAxMDA6IChjb2xUeXBlID09ICdDb3Vyc2UnID8gMzAgOiAzKX1cclxuICAgICAgICBvbkNoYW5nZT17dGhpcy51cGRhdGVDZWxsLmJpbmQodGhpcywgd2Vla1BsYW4sIHN1YmplY3ROYW1lKX1cclxuICAgICAgICByZWFkT25seT17cmVhZE9ubHlDZWxscyB8fCBjb2xUeXBlID09ICdUdXRvcid9XHJcbiAgICAgICAgYWxsb3dOYXZpZ2F0aW9uPXt0cnVlfVxyXG4gICAgICAgIG9uTmF2aWdhdGU9e3RoaXMubmF2aWdhdGUuYmluZCh0aGlzLCBwb3MpfVxyXG4gICAgICAvPlxyXG4gICAgPC90ZD5cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBjbGFzc25hbWUgZm9yIGNlbGxcclxuICAgKiBAcGFyYW0gY29tcGxldGVkU3RlcHMgXHJcbiAgICogQHBhcmFtIGNlbGxWYWx1ZXMgXHJcbiAgICogQHBhcmFtIHN1YmplY3ROYW1lIFxyXG4gICAqL1xyXG4gIGdldENlbGxDbGFzc05hbWUoY29tcGxldGVkU3RlcHMsIGNlbGxWYWx1ZXMsIHN1YmplY3ROYW1lKXtcclxuICAgIGNvbnN0IGNvbFR5cGUgPSB0aGlzLmdldENvbHVtblR5cGUoc3ViamVjdE5hbWUpO1xyXG4gICAgaWYgKGNvbFR5cGUgPT0gJ1N0ZXAnICYmIGNvbXBsZXRlZFN0ZXBzW3N1YmplY3ROYW1lICsgY2VsbFZhbHVlc1tzdWJqZWN0TmFtZV1dKSB7XHJcbiAgICAgIHJldHVybiAnc3RlcENlbGwgY29tcGxldGVkU3RlcCc7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sVHlwZS50b0xvd2VyQ2FzZSgpICsgJ0NlbGwnO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyB0aGUgY2VsbCBpbiB0aGUgdGVybXBsYW5uZXIgdGFibGVzIGZvb3RlclxyXG4gICAqIEBwYXJhbSByb3dJbmRleCBpbmRleCBvZiByb3cgaW4gdGFibGVcclxuICAgKiBAcGFyYW0gY29sSW5kZXggaW5kZXggb2YgY29sdW1uIGluIHRhYmxlXHJcbiAgICogQHBhcmFtIHN1YmplY3ROYW1lIG5hbWUgZmllbGRcclxuICAgKiBAcGFyYW0gbW9kZWxcclxuICAgKiBAcGFyYW0gcmVhZE9ubHlDZWxscyBpZiBjZWxscyBhcmUgcmVhZG9ubHlcclxuICAgKi9cclxuICBnZXRGb290ZXJDZWxsKHJvd0luZGV4OiBudW1iZXIsIGNvbEluZGV4OiBudW1iZXIsIHN1YmplY3ROYW1lOiBzdHJpbmcsIG1vZGVsOiBWaWV3TW9kZWwsIHJlYWRPbmx5Q2VsbHM6IGJvb2xlYW4pe1xyXG4gICAgY29uc3QgcG9zID0ge3Jvdzogcm93SW5kZXgsIGNvbDogY29sSW5kZXh9O1xyXG4gICAgY29uc3QgY29sVHlwZSA9IHRoaXMuZ2V0Q29sdW1uVHlwZShzdWJqZWN0TmFtZSk7XHJcbiAgICByZXR1cm4gPHRoIGNsYXNzTmFtZT17YCR7Y29sVHlwZX1Gb290ZXJgfVxyXG4gICAgPjxDb250ZW50RWRpdGFibGVGaWVsZFxyXG4gICAgICBrZXk9e1wic3RlcEZvb3RlckNlbGxcIiArIGNvbEluZGV4fVxyXG4gICAgICByZWY9e2ZpZWxkID0+IHRoaXMuYWRkRmllbGQoZmllbGQsIHBvcyl9XHJcbiAgICAgIHRhZz0nZGl2J1xyXG4gICAgICB0ZXh0PXttb2RlbC5sYXN0U3RlcHMuY2VsbFZhbHVlc1tzdWJqZWN0TmFtZV19XHJcbiAgICAgIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZUNlbGwuYmluZCh0aGlzLCBtb2RlbC5sYXN0U3RlcHMsIHN1YmplY3ROYW1lKX1cclxuICAgICAgcmVhZE9ubHk9e3JlYWRPbmx5Q2VsbHN9XHJcbiAgICAgIG1heENoYXJzPXsxMH1cclxuICAgICAgYWxsb3dOYXZpZ2F0aW9uPXt0cnVlfVxyXG4gICAgICBvbk5hdmlnYXRlPXt0aGlzLm5hdmlnYXRlLmJpbmQodGhpcywgcG9zKX1cclxuICAgIC8+PC90aD5cclxuICB9XHJcblxyXG4gIGdldFN0ZXBIZWFkZXJDb2x1bW4oaW5kZXg6IG51bWJlciwgdHJhbnNsYXRlZENvbHVtbkhlYWRlcjogc3RyaW5nLCBjb2xUeXBlOiBzdHJpbmcpe1xyXG4gICAgcmV0dXJuIDx0aCBrZXk9e2BzdGVwSGVhZGVyQ2VsbF8ke2luZGV4fWB9IGNsYXNzTmFtZT17YCR7Y29sVHlwZS50b0xvd2VyQ2FzZSgpfUhlYWRlcmB9Pntjb2xUeXBlICE9ICdUdXRvcicgPyB0cmFuc2xhdGVkQ29sdW1uSGVhZGVyOiAnJ308L3RoPlxyXG4gIH1cclxuXHJcbiAgZ2V0Q29sdW1uVHlwZShuYW1lKSB7XHJcbiAgICBjb25zdCBjb2xUeXBlcyA9IHsnS29tbWVudGFyJzogJ0NvbW1lbnQnLCAnS3Vycyc6ICdDb3Vyc2UnLCAnVHV0b3JDb21tZW50JzogJ1R1dG9yJyB9O1xyXG4gICAgcmV0dXJuIGNvbFR5cGVzLmhhc093blByb3BlcnR5KG5hbWUpPyBjb2xUeXBlc1tuYW1lXSA6ICdTdGVwJztcclxuICB9XHJcblxyXG4gIGdldFN0ZXBDaGFydHMoY29sdW1uczogeyBuYW1lOiBzdHJpbmcsIHRyYW5zbGF0ZWROYW1lPzogc3RyaW5nLCBpc0ZpeGVkPzogYm9vbGVhbiB9W10sIHN1YmplY3RQcm9ncmVzczoge1tjb2x1bW5IZWFkZXI6IHN0cmluZ106IHtmaW5hbFN0ZXBDb21wbGV0ZWQ6IGJvb2xlYW4sIHZhbHVlOiBudW1iZXJ9fSkge1xyXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiY2hhcnRzLWNvbnRhaW5lclwiPlxyXG4gICAgICB7XHJcbiAgICAgICAgY29sdW1ucy5tYXAoZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICBpZiAoIWVsZW1lbnQuaXNGaXhlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gc3ViamVjdFByb2dyZXNzW2VsZW1lbnQubmFtZV0gPyBzdWJqZWN0UHJvZ3Jlc3NbZWxlbWVudC5uYW1lXS52YWx1ZSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHN1YmplY3RQcm9ncmVzc1tlbGVtZW50Lm5hbWVdLmZpbmFsU3RlcENvbXBsZXRlZCA/IG51bGwgOiBcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIubm9GaW5hbFN0ZXBBdmFpbGFibGVcIiwgZGVmYXVsdE1lc3NhZ2U6XCJJbmdldCBzbHV0c3RlZyB0aWxsZ8OkbmdsaWd0XCJ9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVkQ29sdW1ucyA9IGdldFNjaG9vbFRyYW5zbGF0ZWRTdWJqZWN0RnVsbG5hbWUodGhpcy5jb250ZXh0LmludGwpO1xyXG4gICAgICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2VsZW1lbnQubmFtZX0gY2xhc3NOYW1lPVwiY2hhcnQtYm94XCI+XHJcbiAgICAgICAgICAgICAgPGg0Pnt0cmFuc2xhdGVkQ29sdW1uc1tlbGVtZW50Lm5hbWVdfTwvaDQ+XHJcbiAgICAgICAgICAgICAgPGRpdiBrZXk9e2VsZW1lbnQubmFtZX0gY2xhc3NOYW1lPVwiaW5uZXItY2hhcnQtYm94XCI+XHJcbiAgICAgICAgICAgICAgICA8RG91Z2hudXQga2V5PXtlbGVtZW50Lm5hbWV9IHBlcmNlbnRhZ2U9e3BlcmNlbnRhZ2V9IGVycm9yTWVzc2FnZT17ZXJyb3JNZXNzYWdlfSAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICA8L2Rpdj5cclxufVxyXG5cclxuICBnZXRXZWVrVHV0b3JOb3RlKHdlZWtQbGFuc09yVHV0b3JOb3RlOiBUZXJtcGxhbm5lcldlZWtPclR1dG9yW10sIHdlZWtOdW1iZXI6IG51bWJlcil7XHJcbiAgICByZXR1cm4gd2Vla1BsYW5zT3JUdXRvck5vdGUuZmluZCgoeDogVGVybVBsYW5uZXJUdXRvck5vdGUpID0+IHgudHlwZSA9PT0gXCJ0dXRvci1ub3RlXCIgJiYgeC53ZWVrTnVtYmVyID09PSB3ZWVrTnVtYmVyKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcclxuICAgIGNvbnN0IHNob3dUdXRvckNvbW1lbnRGaWVsZCA9IGZlYXR1cmVzLmtzVHV0b3JDb21tZW50O1xyXG4gICAgY29uc3Qgc2hvd0RvdWdobnV0Q2hhcnRzID0gZmVhdHVyZXMudGVybXBsYW5uZXJDaGFydHM7XHJcbiAgICBjb25zdCBtb2RlbCA9IG5ldyBWaWV3TW9kZWwoXHJcbiAgICAgIHRoaXMuc3RhdGUud2Vla1BsYW5zLFxyXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZUNvdXJzZXMsXHJcbiAgICAgIHRoaXMuc3RhdGUuc2Nob29sVGVybSxcclxuICAgICAgY2ZnLktFRF9TQ0hPT0xfTE9DQUxFLFxyXG4gICAgICBpbnRsLFxyXG4gICAgICBzaG93VHV0b3JDb21tZW50RmllbGQpO1xyXG5cclxuICAgIGNvbnN0IHt0ZXJtR29hbHMsIGNvbHVtbnN9ID0gbW9kZWw7XHJcbiAgICBjb25zdCB7dHV0b3JlZH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3Qge2xvYWRpbmdXZWVrUGxhbnMsIGVycm9yLCB3ZWVrUGxhbnM6IGRiV2Vla1BsYW5zLCBkaWFsb2dzfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCBmYWlsZWRJbml0aWFsTG9hZCA9IGRiV2Vla1BsYW5zLmxlbmd0aCA9PT0gMCAmJiAhIWVycm9yO1xyXG4gICAgY29uc3QgcmVhZE9ubHlDZWxscyA9IGZhaWxlZEluaXRpYWxMb2FkIHx8IHR1dG9yZWQgfHwgbG9hZGluZ1dlZWtQbGFucztcclxuICAgIGxldCByb3dPZmZzZXQgPSAwO1xyXG4gICAgdmFyIGZpbHRlcmVkV2Vla3BsYW5zID0gIG1vZGVsLndlZWtQbGFuc09yVHV0b3JOb3RlLmZpbHRlcigoeDogS1NUZXJtUGxhbm5lcldlZWtQbGFuKT0+ICF4LnR5cGUpIGFzIEtTVGVybVBsYW5uZXJXZWVrUGxhbltdO1xyXG5cclxuICAgIHJldHVybiB0aGlzLnN0YXRlLmluaXRpYWxMb2FkID8gPHA+PFNwaW5uZXIvPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGVybXBsYW5uZXIubG9hZGluZ1Rlcm1wbGFubmVyXCIgZGVmYXVsdE1lc3NhZ2U9XCJWLmcuIHbDpG50YSBtZWRhbiB0ZXJtaW5zcGxhbmVyIGxhZGRhcy4uLlwiLz48L3A+IDpcclxuICAgICA8ZGl2IGNsYXNzTmFtZT17XHJcbiAgICAgICAgXCJ0ZXJtcGxhbm5lclwiICsgXHJcbiAgICAgICAgKHRoaXMuc3RhdGUubG9hZGluZ1dlZWtQbGFucyA/IFwiIGxvYWRpbmctd2Vla3BsYW5zXCIgOiBcIlwiKSArXHJcbiAgICAgICAgKHRoaXMuc3RhdGUubG9hZGluZ0FjdGl2ZUNvdXJzZXMgPyBcIiBsb2FkaW5nLWNvdXJzZXNcIiA6IFwiXCIpXHJcbiAgICAgIH0+XHJcbiAgICAgIHtzaG93RG91Z2hudXRDaGFydHMgJiYgdGhpcy5zdGF0ZS5hY3RpdmVDb3Vyc2VzLmxlbmd0aCA+IDAgICYmIHRoaXMuZ2V0U3RlcENoYXJ0cyhjb2x1bW5zLCBtb2RlbC5zdWJqZWN0UHJvZ3Jlc3MpfVxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2Vla1NlbGVjdFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxyXG4gICAgICAgICAgICA8cD57dGhpcy5zdGF0ZS5zY2hvb2xUZXJtLnRvTG9jYWxlU3RyaW5nKGludGwsIHRydWUpfTwvcD5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPlxyXG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlcm0gPSB0aGlzLnN0YXRlLnNjaG9vbFRlcm0ucHJldlRlcm0oKTtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkKHRlcm0pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9PlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtbGVmdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZXJtID0gdGhpcy5zdGF0ZS5zY2hvb2xUZXJtLm5leHRUZXJtKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGVybSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0+XHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1yaWdodFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRlcm1wbGFubmVyLnRlcm1QbGFubmluZ1wiIGRlZmF1bHRNZXNzYWdlPVwiVGVybWluc3BsYW5lcmluZ1wiIHRhZ05hbWU9XCJoNFwiLz5cclxuICAgICAgICA8aHIgLz5cclxuICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwidGVybXBsYW5uZXItdGFibGUgemVicmFcIj5cclxuICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cIndlZWtDb2x1bW5cIj5cclxuICAgICAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ0ZXJtcGxhbm5lci53ZWVrTnVtYmVyXCIgZGVmYXVsdE1lc3NhZ2U9XCJWZWNrYVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L3RoPlxyXG4gICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbnMubWFwKCAoZWxlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgY29sVHlwZSA9IHRoaXMuZ2V0Q29sdW1uVHlwZShlbGVtLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGVwSGVhZGVyQ29sdW1uKGluZGV4LCBlbGVtLnRyYW5zbGF0ZWROYW1lLCBjb2xUeXBlKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAge2ZpbHRlcmVkV2Vla3BsYW5zLmZpbHRlcih3ayA9PiB3ay5jZWxsVmFsdWVzKS5tYXAoKHdlZWtQbGFuLCByb3dJbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgIHJvd09mZnNldCA9IHJvd0luZGV4O1xyXG4gICAgICAgICAgICAgIGNvbnN0IHt3ZWVrTnVtYmVyLCBhY2FkZW1pY1dlZWtOdW1iZXJ9ID0gd2Vla1BsYW47XHJcbiAgICAgICAgICAgICAgY29uc3Qgd2VlayA9IHdlZWtOdW1iZXI7XHJcbiAgICAgICAgICAgICAgY29uc3QgaXNDdXJyZW50V2VlayA9IHRoaXMuc3RhdGUuc2Nob29sVGVybS5pc0N1cnJlbnRXZWVrKHdlZWtQbGFuLmRhdGVUaW1lKTtcclxuICAgICAgICAgICAgICByZXR1cm4gPHRyIGtleT17bW9kZWwueWVhciArICc6JyArIHdlZWt9IGNsYXNzTmFtZT17aXNDdXJyZW50V2VlayA/IFwiY3VycmVudFdlZWtcIiA6IFwiXCJ9PlxyXG4gICAgICAgICAgICAgIDx0ZD57aW50bC5sb2NhbGUgPT09IFwic3ZcIiA/IHdlZWsgOiBhY2FkZW1pY1dlZWtOdW1iZXJ9PC90ZD5cclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zLm1hcCgoZWxlbSwgY29sSW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgY29sVHlwZSA9IHRoaXMuZ2V0Q29sdW1uVHlwZShlbGVtLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICB2YXIgdHV0b3JWYWx1ZSA9IHRoaXMuZ2V0V2Vla1R1dG9yTm90ZShtb2RlbC53ZWVrUGxhbnNPclR1dG9yTm90ZSwgd2Vla051bWJlcik7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xUeXBlID09PSBcIlR1dG9yXCIgPyBcclxuICAgICAgICAgICAgICAgICAgdHV0b3JWYWx1ZSAmJiBzaG93VHV0b3JDb21tZW50RmllbGQgJiYgdGhpcy5nZXRUYWJsZUNlbGwocm93SW5kZXgsIGNvbEluZGV4LCBlbGVtLm5hbWUsIG1vZGVsLCB0dXRvclZhbHVlLCByZWFkT25seUNlbGxzLCBjb2xUeXBlKSA6ICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgdGhpcy5nZXRUYWJsZUNlbGwocm93SW5kZXgsIGNvbEluZGV4LCBlbGVtLm5hbWUsIG1vZGVsLCB3ZWVrUGxhbiwgcmVhZE9ubHlDZWxscywgY29sVHlwZSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8L3RyPiBcclxuICAgICAgICAgICAgfSl9XHJcblxyXG4gICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgIDx0Zm9vdD5cclxuICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgIDx0aD48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRlcm1wbGFubmVyLmZpbmFsU3RlcFwiIGRlZmF1bHRNZXNzYWdlPVwiU2x1dHN0ZWdcIi8+PC90aD5cclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zLmZpbHRlcihjID0+ICFjLmlzRml4ZWQpLm1hcCgoZWxlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rm9vdGVyQ2VsbChyb3dPZmZzZXQgKyAxLCBpbmRleCwgZWxlbS5uYW1lLCBtb2RlbCwgcmVhZE9ubHlDZWxscyk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8dGg+LTwvdGg+XHJcbiAgICAgICAgICAgICAgPHRoPjwvdGg+XHJcbiAgICAgICAgICAgICAgPHRoPjwvdGg+ICAgICAgICAgIFxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgPHRoPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGVybXBsYW5uZXIuZWRzR29hbEdyYWRlc1wiIGRlZmF1bHRNZXNzYWdlPVwiVGVybWluc23DpWxcIi8+PC90aD5cclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zLmZpbHRlcihjID0+ICFjLmlzRml4ZWQpLm1hcCgoZWxlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgY29sVHlwZSA9IHRoaXMuZ2V0Q29sdW1uVHlwZShlbGVtLm5hbWUpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiA8dGgga2V5PXtgZ3JhZGVzXyR7aW5kZXh9YH0gY2xhc3NOYW1lPXtgJHtjb2xUeXBlfUZvb3RlcmB9Pnt0ZXJtR29hbHNbZWxlbS5uYW1lXX08L3RoPjtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIDx0aD4tPC90aD5cclxuICAgICAgICAgICAgICA8dGg+e3RoaXMuc3RhdGUuZXJyb3IgJiYgPHAgY2xhc3NOYW1lPVwiZXJyb3JcIj57JycrdGhpcy5zdGF0ZS5lcnJvcn08L3A+fTwvdGg+XHJcbiAgICAgICAgICAgICAgPHRoPjwvdGg+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICA8L3Rmb290PlxyXG4gICAgICAgICAgPC90YWJsZT5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxEaWFsb2dzXHJcbiAgICAgICAgZGlhbG9ncz17ZGlhbG9nc31cclxuICAgICAgICBwb3BEaWFsb2c9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBkaWFsb2dzOiBkaWFsb2dzLnNsaWNlKDAsIGRpYWxvZ3MubGVuZ3RoIC0gMSkgfSl9IC8+ICAgIFxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7VXNlciwgTGVhcm5pbmdNb2R1bGVUYXNrc30gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBCZWFyZXJQcm92aWRlciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IEtFRCBmcm9tICcuL2tlZCc7XHJcbmltcG9ydCBlbnYsIHtFbnZ9IGZyb20gJy4vS0VELmVudic7XHJcblxyXG5leHBvcnQgY2xhc3MgVHV0b3JFbnYge1xyXG4gIHN1YnNjcmliZXJzOiBBcnJheTwoZW52OiBFbnYpPT52b2lkPiA9IFtdO1xyXG4gIGVudjogRW52IHwgbnVsbCA9IG51bGw7XHJcbiAgdmVyc2lvbiA9IDE7XHJcbiAgLy9wcm9taXNlOiBQcm9taXNlPEVudiB8IG51bGw+ID0gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xyXG5cclxuICBhc3luYyBzdWJzY3JpYmUoc3Vic2NyaWJlcjogKGVudjogRW52KSA9PiB2b2lkKSB7XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlcik7XHJcbiAgICBzdWJzY3JpYmVyKHRoaXMuZW52KTtcclxuICB9XHJcblxyXG4gIHVuc3Vic2NyaWJlKHN1YnNjcmliZXI6IChlbnY6IEVudikgPT4gdm9pZCkge1xyXG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnMuZmlsdGVyIChzID0+IHMgIT09IHN1YnNjcmliZXIpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbm90aWZ5U3Vic2NyaWJlcnMoKSB7XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2gocyA9PiBzKHRoaXMuZW52KSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzZXROZXdFbnYodXNlcjogVXNlciwgZW52R2V0dGVyOiAoKT0+UHJvbWlzZTxFbnY+KSB7XHJcbiAgICBsZXQgdmVyc2lvbiA9ICsrdGhpcy52ZXJzaW9uO1xyXG4gICAgdGhpcy5lbnYgPSB7Y3VycmVudFVzZXI6IHVzZXIsIHR1dG9yZWQ6IHRydWV9O1xyXG4gICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycygpOyAvLyBNYWtlIHN1YnNjcmliZXIgZGlzcGxheSBcIkxvYWRpbmcuLi4gdXNlciBuYW1lXCJcclxuICAgIGNvbnN0IGVudjogRW52ID0gYXdhaXQgZW52R2V0dGVyKCkuY2F0Y2goZXJyID0+ICh7XHJcbiAgICAgIGN1cnJlbnRVc2VyOiB1c2VyLFxyXG4gICAgICB0dXRvcmVkOiB0cnVlLFxyXG4gICAgICBlcnJvcjogZXJyXHJcbiAgICB9KSk7XHJcbiAgICBpZiAodmVyc2lvbiA9PT0gdGhpcy52ZXJzaW9uKSB7XHJcbiAgICAgIC8vIE5vIG9uZSBlbHNlIGhhcyBjYWxsZWQgc2V0RW52IGR1cmluZyB0aGlzIGNhbGwuXHJcbiAgICAgICsrdGhpcy52ZXJzaW9uO1xyXG4gICAgICB0aGlzLmVudiA9IHsuLi5lbnYsIHR1dG9yZWQ6IHRydWV9O1xyXG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7IC8vIE1ha2Ugc3Vic2NyaWJlcnMgZGlzcGxheSB0aGUgZGF0YS5cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmlmICghS0VELnR1dG9yRW52KSBLRUQudHV0b3JFbnYgPSBuZXcgVHV0b3JFbnYoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEtFRC50dXRvckVudiBhcyBUdXRvckVudjtcclxuIiwidmFyIG1hcCA9IHtcblx0XCIuL2VuLVNHXCI6IDgwLFxuXHRcIi4vZW4tU0cuanNcIjogODAsXG5cdFwiLi9lbi1hdVwiOiA4MSxcblx0XCIuL2VuLWF1LmpzXCI6IDgxLFxuXHRcIi4vZW4tY2FcIjogODIsXG5cdFwiLi9lbi1jYS5qc1wiOiA4Mixcblx0XCIuL2VuLWdiXCI6IDgzLFxuXHRcIi4vZW4tZ2IuanNcIjogODMsXG5cdFwiLi9lbi1pZVwiOiA4NCxcblx0XCIuL2VuLWllLmpzXCI6IDg0LFxuXHRcIi4vZW4taWxcIjogODUsXG5cdFwiLi9lbi1pbC5qc1wiOiA4NSxcblx0XCIuL2VuLW56XCI6IDg2LFxuXHRcIi4vZW4tbnouanNcIjogODYsXG5cdFwiLi9zdlwiOiA4Nyxcblx0XCIuL3N2LmpzXCI6IDg3XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMTI0OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRm9ybWF0dGVkTWVzc2FnZSwgSW5qZWN0ZWRJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHdlZWtOdW1iZXI6IG51bWJlcjtcclxuICBjb21tZW50OiBzdHJpbmc7XHJcbiAgY2xvc2VEaWFsb2c6ICgpPT4gdm9pZDtcclxuICB1cGRhdGVEYXRhOiAodmFsdWU6IHN0cmluZyk9PiB2b2lkO1xyXG4gIGRlbGV0ZU5vdGVEYXRhOiAoKSA9PiB2b2lkO1xyXG4gIGludGw/OiBJbmplY3RlZEludGxcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBjb21tZW50OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUdXRvckRpYWxvZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcclxuICBcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGNvbW1lbnQ6IHByb3BzLmNvbW1lbnQgPyBwcm9wcy5jb21tZW50IDogJydcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZSgpIHtcclxuICAgIGNvbnN0IHsgY2xvc2VEaWFsb2d9ID0gdGhpcy5wcm9wcztcclxuICAgIGNsb3NlRGlhbG9nKCk7XHJcbiAgICB0aGlzLnByb3BzLmRlbGV0ZU5vdGVEYXRhKCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgYXN5bmMgc2F2ZSgpIHtcclxuICAgIGNvbnN0IHsgY2xvc2VEaWFsb2d9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHsgY29tbWVudCB9ID0gdGhpcy5zdGF0ZTsgIFxyXG4gICAgY2xvc2VEaWFsb2coKTtcclxuICAgIHRoaXMucHJvcHMudXBkYXRlRGF0YShjb21tZW50KTtcclxuXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IHdlZWtOdW1iZXIsIGludGx9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHsgY29tbWVudCB9ID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICByZXR1cm4gPGRpdj5cclxuICAgICAgPGRpdj5cclxuICAgICAgICA8aDI+e2ludGw/IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJ0dXRvck5vdGVEaWFsb2cud2Vla0NvbW1lbnRcIiwgZGVmYXVsdE1lc3NhZ2U6XCJLb21tZW50YXIgZsO2ciB2ZWNrYSB7d2Vla051bWJlcn1cIn0sIHt3ZWVrTnVtYmVyfSk6IGBLb21tZW50YXIgZsO2ciB2ZWNrYSAke3dlZWtOdW1iZXJ9YH08L2gyPlxyXG4gICAgICAgIDxociAvPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24tdGFibGVcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVsbFdpZHRoXCI+XHJcbiAgICAgICAgICAgIDx0ZXh0YXJlYSBhdXRvRm9jdXMgdmFsdWU9e2NvbW1lbnR9IG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHtjb21tZW50OiBldi50YXJnZXQudmFsdWV9KX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdj5cclxuICAgICAgICB7XHJcbiAgICAgICAgICA8PlxyXG4gICAgICAgICAgICA8YnV0dG9uIHRhYkluZGV4PXsxfSBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCIgb25DbGljaz17KCk9PnRoaXMuc2F2ZSgpfT57aW50bCA/IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJjb21tb24uc2F2ZVwiLCBkZWZhdWx0TWVzc2FnZTpcIlNwYXJhXCJ9KSA6ICdTcGFyYSd9IDwvYnV0dG9uPlxyXG4gICAgICAgICAgICB7Y29tbWVudCAmJiA8YSB0YWJJbmRleD17MX0gY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCk9PnRoaXMuZGVsZXRlKCl9PntpbnRsID8gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcImNvbW1vbi5yZW1vdmVcIiwgZGVmYXVsdE1lc3NhZ2U6XCJUYSBib3J0XCJ9KTogXCJUYSBib3J0XCIgfTwvYT59XHJcbiAgICAgICAgICA8Lz5cclxuICAgICAgICB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEtlZFJlcG8gfSBmcm9tICcuL2tlZC1yZXBvJztcclxuaW1wb3J0IHsgS1NUZXJtUGxhbm5lcldlZWtQbGFuLCBUZXJtUGxhbm5lclR1dG9yTm90ZSwgVGVybXBsYW5uZXJXZWVrT3JUdXRvciB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBLU1Rlcm1QbGFubmVyUmVwbyBleHRlbmRzIEtlZFJlcG88VGVybXBsYW5uZXJXZWVrT3JUdXRvcj4ge1xyXG4gIHN0YXJ0RGF0ZTogbW9tZW50Lk1vbWVudDtcclxuICBlbmREYXRlOiBtb21lbnQuTW9tZW50O1xyXG5cclxuICAgYXN5bmMgcmVmcmVzaERhdGEoZGF0ZUludGVydmFsIDogbW9tZW50Lk1vbWVudFtdKXtcclxuICAgIFt0aGlzLnN0YXJ0RGF0ZSwgdGhpcy5lbmREYXRlXSAgPSBkYXRlSW50ZXJ2YWw7XHJcbiAgICAgYXdhaXQgdGhpcy5tZW0ucmVmcmVzaEZyb21TZXJ2ZXIoKTtcclxuICAgfVxyXG5cclxuICBjb25zdHJ1Y3RvcihnZXRDbGllbnQ6ICgpPT5LZWRCYWNrZW5kQ2xpZW50LCBnZXRDdXJyZW50VXNlcjogKCk9PlVzZXIpIHtcclxuICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gZ2V0Q3VycmVudFVzZXIoKTtcclxuICAgIHN1cGVyKHtcclxuICAgICAgZ2V0Q2xpZW50LFxyXG4gICAgICBvcHRpbWlzdGljOiB0cnVlLFxyXG4gICAgICB0YWJsZTogXCJ3ZWVrcGxhbnMta3NcIixcclxuICAgICAgdXNlcjogY3VycmVudFVzZXIgPyBjdXJyZW50VXNlci5tYWlsIDogXCJcIixcclxuICAgICAgZ2V0UXVlcnlPcHRpb25zOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlVmFsdWUgPSAodGhpcy5zdGFydERhdGUgJiYgdGhpcy5zdGFydERhdGUudmFsdWVPZigpKSB8fCBtb21lbnQoKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgY29uc3QgZW5kRGF0ZVZhbHVlID0gKHRoaXMuZW5kRGF0ZSAmJiB0aGlzLmVuZERhdGUudmFsdWVPZigpKSB8fCBtb21lbnQoKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIGZyb206IHN0YXJ0RGF0ZVZhbHVlLFxyXG4gICAgICAgICAgdG86IGVuZERhdGVWYWx1ZSxcclxuICAgICAgICAgIHJvbGU6IFwiVVNFUlwiXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiXHJcbmV4cG9ydCBjb25zdCBTRUNPTkQgPSAxMDAwO1xyXG5leHBvcnQgY29uc3QgTUlOVVRFID0gU0VDT05EICogNjA7XHJcbmV4cG9ydCBjb25zdCBIT1VSID0gTUlOVVRFICogNjA7XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHtNSU5VVEV9IGZyb20gJy4uLy4uL3V0aWxzL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7TH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIGlkOiBzdHJpbmcsXHJcbiAgICBkYXlTdGFydCxcclxuICAgIHN0YXJ0TW9tZW50OiBtb21lbnQuTW9tZW50LFxyXG4gICAgZW5kTW9tZW50OiBtb21lbnQuTW9tZW50LFxyXG4gICAgdGV4dDogc3RyaW5nLFxyXG4gICAgbG9jYXRpb246IHN0cmluZyxcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXHJcbiAgICB3aWR0aDogbnVtYmVyLFxyXG4gICAgcG9zOiBudW1iZXIsXHJcbiAgICBsb2NhbGU6IHN0cmluZyxcclxuICAgIHpvb206IG51bWJlcixcclxuICAgIGh0bWxMaW5rOiBzdHJpbmcsXHJcbiAgICBjbGFzc05hbWU6IHN0cmluZ1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXlWaWV3RXZlbnQgKHtcclxuICAgIGlkLFxyXG4gICAgZGF5U3RhcnQsXHJcbiAgICBzdGFydE1vbWVudCxcclxuICAgIGVuZE1vbWVudCxcclxuICAgIHRleHQsXHJcbiAgICBsb2NhdGlvbixcclxuICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgd2lkdGgsXHJcbiAgICBwb3MsXHJcbiAgICBsb2NhbGUsXHJcbiAgICB6b29tLFxyXG4gICAgaHRtbExpbmssXHJcbiAgICBjbGFzc05hbWVcclxufTogUHJvcHMpIHtcclxuICAgIGNvbnN0IHRvcCA9IChtb21lbnQoc3RhcnRNb21lbnQpLmRpZmYoZGF5U3RhcnQpIC8gTUlOVVRFKSAqIHpvb207XHJcbiAgICBjb25zdCBoZWlnaHQgPSAobW9tZW50KGVuZE1vbWVudCkuZGlmZihzdGFydE1vbWVudCkgLyBNSU5VVEUpICogem9vbTtcclxuICAgIGNvbnN0IGxvY2FsZVRpbWVPcHRpb25zID0ge2hvdXI6ICdudW1lcmljJywgbWludXRlOiAnMi1kaWdpdCd9O1xyXG4gICAgY29uc3QgbG9jYWxlU3RhcnRUaW1lID0gc3RhcnRNb21lbnQudG9EYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKGxvY2FsZSwgbG9jYWxlVGltZU9wdGlvbnMpO1xyXG4gICAgY29uc3QgbG9jYWxlRW5kVGltZSA9IGVuZE1vbWVudC50b0RhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcobG9jYWxlLCBsb2NhbGVUaW1lT3B0aW9ucyk7XHJcblxyXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtcImRheXZpZXdldmVudCBcIiArIGNsYXNzTmFtZX0gc3R5bGU9e3tcclxuICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxyXG4gICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxyXG4gICAgICAgIHRvcCxcclxuICAgICAgICBsZWZ0OiAocG9zIHx8IDApICsgXCIlXCIsXHJcbiAgICAgICAgd2lkdGg6ICh3aWR0aCB8fCAxMDApICsgJyUnLFxyXG4gICAgICAgIGhlaWdodCxcclxuICAgICAgICBtYXhIZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbid9fVxyXG5cclxuICAgICAgICB0aXRsZT17YCR7bG9jYWxlU3RhcnRUaW1lfSAtICR7bG9jYWxlRW5kVGltZX0gJHt0ZXh0fWAgK1xyXG4gICAgICAgICAgICAobG9jYXRpb24gP1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cIiArIExgUGxhdHM6ICR7bG9jYXRpb259YCA6XHJcbiAgICAgICAgICAgICAgICBcIlwiICkgK1xyXG4gICAgICAgICAgICAoZGVzY3JpcHRpb24gP1xyXG4gICAgICAgICAgICAgICAgXCJcXG5cIiArIGRlc2NyaXB0aW9uIDpcclxuICAgICAgICAgICAgICAgIFwiXCIgKVxyXG4gICAgICAgIH1cclxuICAgICAgICA+XHJcbiAgICAgICAgPGEgY2xhc3NOYW1lPVwiZXZlbnQtdGl0bGVcIiBocmVmPXtodG1sTGlua30gdGFyZ2V0PVwiY2FsZW5kYXItZXZlbnRcIj5cclxuICAgICAgICAgICAge3RleHR9XHJcbiAgICAgICAgPC9hPlxyXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cImV2ZW50LXBlcmlvZFwiPlxyXG4gICAgICAgICAgICB7bG9jYWxlU3RhcnRUaW1lfSAtIHtsb2NhbGVFbmRUaW1lfVxyXG4gICAgICAgIDwvcD5cclxuICAgICAgICB7bG9jYXRpb24gJiZcclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXZlbnQtbG9jYXRpb25cIj5cclxuICAgICAgICAgICAgICAgIHtsb2NhdGlvbn1cclxuICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgIH1cclxuICAgICAgICB7ZGVzY3JpcHRpb24gJiZcclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXZlbnQtZGVzY3JpcHRpb25cIj5cclxuICAgICAgICAgICAgICAgIHtkZXNjcmlwdGlvbn1cclxuICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgIH1cclxuICAgIDwvZGl2PjtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRpbWVMaW5lcyAoe2RheVN0YXJ0LCBkYXlFbmQsIHpvb219KSB7XHJcbiAgICBjb25zdCBob3VyUGl4ZWxzID0gNjAgKiB6b29tO1xyXG4gICAgY29uc3Qgc3RhcnRIb3VyID0gbW9tZW50KGRheVN0YXJ0KS5ob3VyKCk7XHJcbiAgICBjb25zdCBlbmRIb3VyID0gbW9tZW50KGRheUVuZCkuaG91cigpO1xyXG5cclxuICAgIGNvbnN0IGhvdXJzID0gW107XHJcbiAgICBmb3IgKGxldCBob3VyID0gc3RhcnRIb3VyOyBob3VyIDw9IGVuZEhvdXI7ICsraG91cikge1xyXG4gICAgICAgIGhvdXJzLnB1c2goaG91cik7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAge2hvdXJzLm1hcChob3VyID0+IFxyXG4gICAgICAgICAgICA8ZGl2IGtleT17aG91cn0gY2xhc3NOYW1lPVwidGltZWxpbmVcIiBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcclxuICAgICAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiBgJHtob3VyUGl4ZWxzIC8gMn1weCAwIDAgMGAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhvdXJQaXhlbHMgLyAyXHJcbiAgICAgICAgfX0gLz4gKX1cclxuICAgIDwvZGl2PjtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IERheVZpZXdFdmVudCBmcm9tICcuL2RheS12aWV3LWV2ZW50JztcclxuaW1wb3J0IFRpbWVMaW5lcyBmcm9tICcuL3RpbWUtbGluZXMnO1xyXG5pbXBvcnQge01JTlVURX0gZnJvbSAnLi4vLi4vdXRpbHMvY29uc3RhbnRzJztcclxuaW1wb3J0IHtjcnVuY2hDb2xsaWRpbmdFdmVudHN9IGZyb20gJy4vY3J1bmNoLWNvbGxpZGluZy1ldmVudHMnO1xyXG5pbXBvcnQgeyBTdHVkZW50Q2FsZW5kYXJFdmVudCB9IGZyb20gJy4vbW9kZWxzJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgICBkYXlTdGFydDogbW9tZW50Lk1vbWVudDsgICAvLyBNaWxsaXNlY29uZHMgYXQgc3RhcnQgb2YgdGhlIGRheSAoZm9yIGV4YW1wbGUgMDg6MDAgdGhlIGRheSlcclxuICAgIGRheUVuZDogbW9tZW50Lk1vbWVudDsgICAgIC8vIE1pbGxpc2Vjb25kcyBhdCBlbmQgb2YgdGhlIGRheSAoZm9yIGV4YW1wbGUgMTc6MDAgdGhlIGRheSlcclxuICAgIGV2ZW50czogU3R1ZGVudENhbGVuZGFyRXZlbnRbXSwgICAgIC8vIEV2ZW50cyB0byBzaG93XHJcbiAgICBsb2NhbGU6IHN0cmluZyxcclxuICAgIHpvb206IG51bWJlcixcclxuICAgIGlzTGFzdENhbGw6IGJvb2xlYW5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRGF5VmlldyAoe1xyXG4gICAgZGF5U3RhcnQsICAgLy8gTWlsbGlzZWNvbmRzIGF0IHN0YXJ0IG9mIHRoZSBkYXkgKGZvciBleGFtcGxlIDA4OjAwIHRoZSBkYXkpXHJcbiAgICBkYXlFbmQsICAgICAvLyBNaWxsaXNlY29uZHMgYXQgZW5kIG9mIHRoZSBkYXkgKGZvciBleGFtcGxlIDE3OjAwIHRoZSBkYXkpXHJcbiAgICBldmVudHMsICAgICAvLyBFdmVudHMgdG8gc2hvd1xyXG4gICAgbG9jYWxlLFxyXG4gICAgem9vbSxcclxuICAgIGlzTGFzdENhbGxcclxufTogUHJvcHMpIHtcclxuICAgIGNvbnN0IGhlaWdodCA9IChtb21lbnQoZGF5RW5kKS5kaWZmKGRheVN0YXJ0KSAvIE1JTlVURSkgKiB6b29tO1xyXG5cclxuICAgIGNvbnN0IGNydW5jaGVkRXZlbnRzID0gY3J1bmNoQ29sbGlkaW5nRXZlbnRzKGV2ZW50cywgaXNMYXN0Q2FsbCk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRheXZpZXdcIiBzdHlsZT17e1xyXG4gICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgIGhlaWdodCxcclxuICAgICAgICAgICAgbWF4SGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG4gICAgICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcclxuICAgICAgICB9fT5cclxuXHJcbiAgICAgICAgICAgIDxUaW1lTGluZXMgZGF5U3RhcnQ9e2RheVN0YXJ0fSBkYXlFbmQ9e2RheUVuZH0gem9vbT17em9vbX0gLz5cclxuXHJcbiAgICAgICAgICAgIHtjcnVuY2hlZEV2ZW50cy5tYXAgKGV2ID0+IDxEYXlWaWV3RXZlbnRcclxuICAgICAgICAgICAgICAgIGtleT17ZXYuaWR9XHJcbiAgICAgICAgICAgICAgICBpZD17ZXYuaWR9XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2V2LmNsYXNzTmFtZX1cclxuICAgICAgICAgICAgICAgIGRheVN0YXJ0PXtkYXlTdGFydH1cclxuICAgICAgICAgICAgICAgIHN0YXJ0TW9tZW50PXtldi5zdGFydE1vbWVudH1cclxuICAgICAgICAgICAgICAgIGVuZE1vbWVudD17ZXYuZW5kTW9tZW50fVxyXG4gICAgICAgICAgICAgICAgdGV4dD17ZXYudGV4dH1cclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uPXtldi5sb2NhdGlvbn1cclxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtldi5kZXNjcmlwdGlvbn1cclxuICAgICAgICAgICAgICAgIHdpZHRoPXtldi53aWR0aH1cclxuICAgICAgICAgICAgICAgIHBvcz17ZXYucG9zfVxyXG4gICAgICAgICAgICAgICAgbG9jYWxlPXtsb2NhbGV9XHJcbiAgICAgICAgICAgICAgICB6b29tPXt6b29tfVxyXG4gICAgICAgICAgICAgICAgaHRtbExpbms9e2V2Lmh0bWxMaW5rfVxyXG4gICAgICAgICAgICAvPil9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IGZsYXR0ZW4sIGRpc3RpbmN0LCBjb21wYXJlUHJvcCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgU3R1ZGVudENhbGVuZGFyRXZlbnQgfSBmcm9tICcuL21vZGVscyc7XHJcblxyXG5pbnRlcmZhY2UgRXZlbnRNZXRhIHtcclxuICBpbmRleD86IG51bWJlcixcclxuICBwcmV2T3ZlcmxhcHM/OiBTdHVkZW50Q2FsZW5kYXJFdmVudFtdICBcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNydW5jaENvbGxpZGluZ0V2ZW50cyAoXHJcbiAgZXZlbnRzOiBTdHVkZW50Q2FsZW5kYXJFdmVudFtdLFxyXG4gIGlzTGFzdENhbGw/OiBib29sZWFuKVxyXG46IFN0dWRlbnRDYWxlbmRhckV2ZW50W11cclxue1xyXG4gIGNvbnN0IHJlc3VsdDogKFN0dWRlbnRDYWxlbmRhckV2ZW50ICYgRXZlbnRNZXRhKVtdID0gW107XHJcbiAgZXZlbnRzLmZvckVhY2goKGV2ZW50LCBldmVudEluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IG92ZXJsYXBzID0gcmVzdWx0LmZpbHRlcih4ID0+IHguc3RhcnRNb21lbnQgJiYgeC5lbmRNb21lbnQgJiZcclxuICAgICAgICAgICh4LnN0YXJ0TW9tZW50IDw9IGV2ZW50LnN0YXJ0TW9tZW50KSAmJlxyXG4gICAgICAgICAgKHguZW5kTW9tZW50ID4gZXZlbnQuc3RhcnRNb21lbnQpKTtcclxuICAgICAgbGV0IGFsbE92ZXJsYXBzID0gb3ZlcmxhcHMuY29uY2F0KGZsYXR0ZW4gKG92ZXJsYXBzLm1hcChvID0+IG8ucHJldk92ZXJsYXBzKSkpO1xyXG4gICAgICBhbGxPdmVybGFwcyA9IGRpc3RpbmN0KGFsbE92ZXJsYXBzLCBvID0+IG8uaW5kZXgpO1xyXG4gICAgICBhbGxPdmVybGFwcy5zb3J0KGNvbXBhcmVQcm9wKFwic3RhcnRNb21lbnRcIikpO1xyXG4gICAgICBsZXQgd2lkdGg7Ly8gPSBNYXRoLnJvdW5kKDEwMCAvIE1hdGgubWF4KChhbGxPdmVybGFwcy5sZW5ndGggKyAxKSwgMSkpO1xyXG4gICAgICBsZXQgcG9zID0gMDtcclxuICAgICAgYWxsT3ZlcmxhcHMuZm9yRWFjaCgob3ZlcmxhcCwgaSkgPT4ge1xyXG4gICAgICAgIGlmIChpICUgNCA9PT0gMCkge1xyXG4gICAgICAgICAgd2lkdGggPSBNYXRoLm1heCgyNSwgTWF0aC5yb3VuZCgxMDAgLyBNYXRoLm1heChhbGxPdmVybGFwcy5sZW5ndGggLSBpICsgMSwgMSkpKTtcclxuICAgICAgICAgIHBvcyA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG92ZXJsYXAud2lkdGggPSB3aWR0aDtcclxuICAgICAgICBvdmVybGFwLmNsYXNzTmFtZSA9IChvdmVybGFwLmNsYXNzTmFtZSB8fCBcIlwiKS5zcGxpdCgnICcpXHJcbiAgICAgICAgICAuZmlsdGVyKGNuID0+IGNuICE9PSAnc3BsaXR0ZWQnKVxyXG4gICAgICAgICAgLmNvbmNhdChcInNwbGl0dGVkXCIpXHJcbiAgICAgICAgICAuam9pbignICcpLFxyXG4gICAgICAgIG92ZXJsYXAucG9zID0gcG9zO1xyXG4gICAgICAgIHBvcyArPSB3aWR0aDtcclxuICAgICAgfSk7XHJcbiAgICAgIHJlc3VsdC5wdXNoKHtcclxuICAgICAgICAuLi5ldmVudCxcclxuICAgICAgICBpbmRleDogZXZlbnRJbmRleCxcclxuICAgICAgICBwb3M6IHBvcyxcclxuICAgICAgICB3aWR0aCxcclxuICAgICAgICBjbGFzc05hbWU6IHdpZHRoIDwgMTAwID9cclxuICAgICAgICAgIChldmVudC5jbGFzc05hbWUgPyBldmVudC5jbGFzc05hbWUgKyBcIiBzcGxpdHRlZFwiIDogXCJzcGxpdHRlZFwiKSA6XHJcbiAgICAgICAgICBldmVudC5jbGFzc05hbWUsXHJcbiAgICAgICAgcHJldk92ZXJsYXBzOiBhbGxPdmVybGFwc1xyXG4gICAgICB9KTtcclxuICAgICAgLyppZiAoaXNMYXN0Q2FsbCAmJiBtb21lbnQoZXZlbnQuc3RhcnQpLmRheSgpID09PSAxKSB7XHJcbiAgICAgICAgaWYgKC9TdmUyLy50ZXN0KGV2ZW50LnRleHQpKSB7XHJcbiAgICAgICAgICBkZWJ1Z2dlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9GcmFuc2thLy50ZXN0KGV2ZW50LnRleHQpKSB7XHJcbiAgICAgICAgICBkZWJ1Z2dlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKC9UeXNrYS8udGVzdChldmVudC50ZXh0KSkge1xyXG4gICAgICAgICAgZGVidWdnZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgvc3BhbnNrLy50ZXN0KGV2ZW50LnRleHQpKSBkZWJ1Z2dlcjtcclxuICAgICAgICBpZiAoL0VuZzYvLnRlc3QoZXZlbnQudGV4dCkpIGRlYnVnZ2VyO1xyXG4gICAgICB9Ki9cclxuICB9KTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG91ck1hcmtlciAoe3N0YXJ0SG91ciwgZW5kSG91ciwgbG9jYWxlLCB6b29tfSkge1xyXG4gICAgY29uc3QgaG91clBpeGVscyA9IDYwICogem9vbTtcclxuXHJcbiAgICBjb25zdCBob3VycyA9IFtdO1xyXG4gICAgZm9yIChsZXQgaG91ciA9IHN0YXJ0SG91cjsgaG91ciA8PSBlbmRIb3VyOyArK2hvdXIpIHtcclxuICAgICAgICBob3Vycy5wdXNoKGhvdXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImhvdXJtYXJrZXJcIiBzdHlsZT17e1xyXG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxyXG4gICAgICAgIGxlZnQ6IDAsXHJcbiAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXHJcbiAgICAgICAgaGVpZ2h0OiAoZW5kSG91ciAtIHN0YXJ0SG91cikgKiBob3VyUGl4ZWxzXHJcbiAgICB9fT5cclxuICAgICAge2hvdXJzLm1hcCgoaG91ciwgaSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHlwb3MgPSBpICogaG91clBpeGVscztcclxuICAgICAgICByZXR1cm4gPHNwYW4ga2V5PXtob3VyfT48ZGl2IHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXHJcbiAgICAgICAgICAgICAgICB0b3A6IHlwb3MsXHJcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICctNHB4JywgLy8gQ1NTIVxyXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMFxyXG4gICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgIHttb21lbnQoKS5ob3VyKGhvdXIpLm1pbnV0ZSgwKS50b0RhdGUoKS50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHtob3VyOiBcIjItZGlnaXRcIiwgbWludXRlOiBcIjItZGlnaXRcIn0pfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgey8qPGRpdiBjbGFzc05hbWU9XCJob3VybGluZVwiXHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNlZWVlRjInLCAvLyBDU1MhXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJzI0cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNnB4JyxcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxcHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogeXBvc1xyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAge2hvdXIgPCBlbmRIb3VyICYmIDxkaXYgY2xhc3NOYW1lPVwiaGFsdmhvdXJsaW5lXCJcclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2VlZWVGMicsIC8vIENTUyFcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAnMjZweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc0cHgnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMCxcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzFweCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB5cG9zICsgKGhvdXJQaXhlbHMgLyAyKSArIDFcclxuICAgICAgICAgICAgfX0gLz4gfSAqL31cclxuICAgICAgICA8L3NwYW4+O1xyXG4gICAgfSl9PC9kaXY+O1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0YXR1c0JhciAoe3N0YXR1cywgZXJyb3J9KSB7XHJcbiAgICBpZiAoIXN0YXR1cyAmJiAhZXJyb3IpIHJldHVybiBudWxsO1xyXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwic3RhdHVzYmFyXCI+XHJcbiAgICAgICAge2Vycm9yID9cclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXJyb3JcIj57JycrZXJyb3J9PC9wPiA6XHJcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInN0YXR1c1wiPntzdGF0dXN9PC9wPn1cclxuICAgIDwvZGl2PlxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgRGF5VmlldyBmcm9tICcuL2RheS12aWV3JztcclxuaW1wb3J0IEhvdXJNYXJrZXIgZnJvbSAnLi9ob3VyLW1hcmtlcic7XHJcbmltcG9ydCB7Y2FwaXRhbGl6ZUZpcnN0LCBjbG9uZSwgTH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgU3RhdHVzQmFyIGZyb20gJy4vc3RhdHVzLWJhcic7XHJcbmltcG9ydCB7IFN0dWRlbnRDYWxlbmRhckV2ZW50LCBEYXlEYXRhIH0gZnJvbSAnLi9tb2RlbHMnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgICBmaXJzdERheTogbW9tZW50Lk1vbWVudCwgIC8vIHttb21lbnR9IFRoZSBkYXkgdG8gc3RhcnQgd2l0aCAobm9ybWFsbHkgYSBtb25kYXkpXHJcbiAgICBzdGFydEhvdXI6IG51bWJlciwgLy8ge251bWJlcn0gVGhlIGhvdXIgdG8gc3RhcnQgb25cclxuICAgIGVuZEhvdXI6IG51bWJlciwgICAvLyB7bnVtYmVyfSBUaGUgaG91ciB0byBlbmQgcmVuZGVyaW5nIHBlciBkYXlcclxuICAgIG51bURheXM6IG51bWJlciwgICAvLyB7bnVtYmVyfSBOdW1iZXIgb2YgZGF5cywgbm9ybWFsbHkgNS5cclxuICAgIGV2ZW50czogU3R1ZGVudENhbGVuZGFyRXZlbnRbXSwgICAgLy8gQXJyYXkgb2YgZXZlbnRzIHRvIGRpc3BsYXkgaW4gdGhlIHdlZWsuXHJcbiAgICBsb2NhbGU6IHN0cmluZywgICAgLy8gTG9jYWxlIHRvIHVzZSBmb3Igc2hvd2luZyB3ZWVrIGRheXMgYW5kIGhvdXIgbWFya3MuXHJcbiAgICB6b29tOiBudW1iZXIsICAgICAgLy8ge251bWJlcn0gWm9vbSB3aGVyZSAxIG1lYW5zIHRoYXQgMSBtaW51dGUgPSAxIHBpeGVsLiAgXHJcbiAgICBzdGF0dXM/OiBzdHJpbmcsXHJcbiAgICBlcnJvcj86IEVycm9yXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdlZWtWaWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XHJcbiAgICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XHJcbiAgICByZW5kZXIgKCkge1xyXG4gICAgICAgIC8vIFByb3BzOlxyXG4gICAgICAgIGNvbnN0IHtcclxuICAgICAgICAgICAgZmlyc3REYXksICAvLyB7bW9tZW50fSBUaGUgZGF5IHRvIHN0YXJ0IHdpdGggKG5vcm1hbGx5IGEgbW9uZGF5KVxyXG4gICAgICAgICAgICBzdGFydEhvdXIsIC8vIHtudW1iZXJ9IFRoZSBob3VyIHRvIHN0YXJ0IG9uXHJcbiAgICAgICAgICAgIGVuZEhvdXIsICAgLy8ge251bWJlcn0gVGhlIGhvdXIgdG8gZW5kIHJlbmRlcmluZyBwZXIgZGF5XHJcbiAgICAgICAgICAgIG51bURheXMsICAgLy8ge251bWJlcn0gTnVtYmVyIG9mIGRheXMsIG5vcm1hbGx5IDUuXHJcbiAgICAgICAgICAgIGV2ZW50cywgICAgLy8gQXJyYXkgb2YgZXZlbnRzIHRvIGRpc3BsYXkgaW4gdGhlIHdlZWsuXHJcbiAgICAgICAgICAgIGxvY2FsZSwgICAgLy8gTG9jYWxlIHRvIHVzZSBmb3Igc2hvd2luZyB3ZWVrIGRheXMgYW5kIGhvdXIgbWFya3MuXHJcbiAgICAgICAgICAgIHpvb20sICAgICAgLy8ge251bWJlcn0gWm9vbSB3aGVyZSAxIG1lYW5zIHRoYXQgMSBtaW51dGUgPSAxIHBpeGVsLiAgXHJcbiAgICAgICAgICAgIHN0YXR1cyxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICAgICAgY29uc3Qge2ludGx9ID0gdGhpcy5jb250ZXh0O1xyXG5cclxuICAgICAgICAvLyBQcmVwYXJlIERheVZpZXcgZGF0YXMgXHJcbiAgICAgICAgY29uc3QgZGF5RGF0YXM6IERheURhdGFbXSA9IFtdO1xyXG4gICAgICAgIGxldCBkYXkgPSBtb21lbnQoZmlyc3REYXkpO1xyXG4gICAgICAgIGZvciAobGV0IGk9MDtpPG51bURheXM7ICsraSkge1xyXG4gICAgICAgICAgICBjb25zdCBkYXlTdGFydCA9IG1vbWVudChkYXkpLmhvdXIoc3RhcnRIb3VyKTtcclxuICAgICAgICAgICAgY29uc3QgZGF5RW5kID0gbW9tZW50KGRheSkuaG91cihlbmRIb3VyKTtcclxuICAgICAgICAgICAgY29uc3QgZGF5RGF0ZSA9IG1vbWVudChkYXkpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xyXG4gICAgICAgICAgICBjb25zdCBpc1RvZGF5ID0gbW9tZW50KGRheVN0YXJ0KS5zdGFydE9mKFwiZGF5XCIpLnZhbHVlT2YoKSA9PT0gbW9tZW50KCkuc3RhcnRPZihcImRheVwiKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgIGRheURhdGFzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogY2FwaXRhbGl6ZUZpcnN0KGRheVN0YXJ0LnRvRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXk6ICdsb25nJyxcclxuICAgICAgICAgICAgICAgICAgICBkYXk6J251bWVyaWMnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vbnRoOiAnc2hvcnQnfSkpLFxyXG4gICAgICAgICAgICAgICAgZGF5U3RhcnQsXHJcbiAgICAgICAgICAgICAgICBkYXlFbmQsXHJcbiAgICAgICAgICAgICAgICBpc1RvZGF5LFxyXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBldmVudHMuZmlsdGVyKGV2ZW50ID0+XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RhcnQgJiYgZXZlbnQuZW5kICYmIGV2ZW50LnN0YXJ0LmRhdGVUaW1lICYmIGV2ZW50LmVuZC5kYXRlVGltZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIChtb21lbnQoZXZlbnQuc3RhcnQuZGF0ZVRpbWUpLmlzQmV0d2VlbihkYXlTdGFydCwgZGF5RW5kKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICBtb21lbnQoZXZlbnQuZW5kLmRhdGVUaW1lKS5pc0JldHdlZW4oZGF5U3RhcnQsIGRheUVuZCkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAvLyBDaGFuZ2Ugc3RhcnQgLyBlbmQgdG8gZGlyZWN0bHkgcG9pbnQgdG8gdGhlIGRhdGVUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgIC5tYXAoZXZlbnQgPT4gY2xvbmUoZXZlbnQsIHtzdGFydE1vbWVudDogbW9tZW50KGV2ZW50LnN0YXJ0LmRhdGVUaW1lKSwgZW5kTW9tZW50OiBtb21lbnQoZXZlbnQuZW5kLmRhdGVUaW1lKX0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAuc29ydCgoYSxiKSA9PiBhLnN0YXJ0TW9tZW50LnZhbHVlT2YgPiBiLnN0YXJ0TW9tZW50LnZhbHVlT2YgPyAxIDogYS5zdGFydE1vbWVudCA8IGIuc3RhcnRNb21lbnQgPyAtMSA6IDApLFxyXG4gICAgICAgICAgICAgICAgZnVsbERheUV2ZW50czogZXZlbnRzLmZpbHRlcihldmVudCA9PlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmeSB0aGF0IGl0IGlzIGEgZnVsbC1kYXktZXZlbnRcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5zdGFydCAmJiBldmVudC5lbmQgJiYgZXZlbnQuc3RhcnQuZGF0ZSAmJiBldmVudC5lbmQuZGF0ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmeSBpdCBhcHBsaWVzIHRvIGN1cnJlbnQgZGF5XHJcbiAgICAgICAgICAgICAgICAgICAgKGV2ZW50LnN0YXJ0LmRhdGUgPD0gZGF5RGF0ZSAmJiBldmVudC5lbmQuZGF0ZSA+IGRheURhdGUpKSBcclxuICAgICAgICAgICAgICAgICAgICAgLy8gQ2hhbmdlIHN0YXJ0IC8gZW5kIHRvIGRpcmVjdGx5IHBvaW50IHRvIHRoZSBkYXRlIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZXZlbnQgPT4gY2xvbmUoZXZlbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnREYXRlOiBldmVudC5zdGFydC5kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlOiBldmVudC5lbmQuZGF0ZX0pKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZGF5ID0gbW9tZW50KGRheSkgLy8gY2xvbmUgaXRcclxuICAgICAgICAgICAgICAgIC5hZGQoMSwgJ2RheXMnKTsgLy8gQWRkIGFub3RoZXIgZGF5XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZW5kZXJcclxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJ2ZW1lbmRvLXdlZWt2aWV3XCI+XHJcbiAgICAgICAgICA8dGFibGU+PHRib2R5PlxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9e3tib3JkZXI6IDB9fT48L3RkPlxyXG4gICAgICAgICAgICAgICAge2RheURhdGFzLm1hcChkID0+IDx0ZCBrZXk9e2QuZGF5U3RhcnQudG9JU09TdHJpbmcoKX0gY2xhc3NOYW1lPXtkLmlzVG9kYXkgPyBcInRvZGF5XCIgOiBudWxsfT5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJkYXluYW1lXCI+e2QubmFtZX08L3A+XHJcbiAgICAgICAgICAgICAgICA8L3RkPil9XHJcbiAgICAgICAgICAgIDwvdHI+PHRyPlxyXG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPXt7Ym9yZGVyOiAwfX0+PHAgY2xhc3NOYW1lPVwid2Vlay1udW1iZXJcIj57aW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcImNhbGVuZGFyLndlZWtOdW1iZXJcIiwgZGVmYXVsdE1lc3NhZ2U6XCJWe3dlZWtOdW1iZXJ9XCJ9LCB7d2Vla051bWJlcjptb21lbnQoZmlyc3REYXkpLndlZWsoKX0pfTwvcD48L3RkPlxyXG4gICAgICAgICAgICAgICAge2RheURhdGFzLm1hcChkYXkgPT5cclxuICAgICAgICAgICAgICAgICAgICA8dGQga2V5PXtkYXkuZGF5U3RhcnQudG9JU09TdHJpbmcoKX0gY2xhc3NOYW1lPXtkYXkuaXNUb2RheSA/IFwidG9kYXlcIiA6IG51bGx9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7ZGF5LmZ1bGxEYXlFdmVudHMubWFwKCh7aWQsIHRleHQsIGxvY2F0aW9uLCBkZXNjcmlwdGlvbiwgaHRtbExpbmssIGNsYXNzTmFtZX0pID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17aWR9IGNsYXNzTmFtZT17XCJkYXl2aWV3ZXZlbnQgZnVsbC1kYXkgXCIgKyBjbGFzc05hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2Ake3RleHR9YCArIChsb2NhdGlvbiA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuXCIgKyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwiY2FsZW5kYXIuZnVsbERheUV2ZW50TG9jYXRpb25cIiwgZGVmYXVsdE1lc3NhZ2U6XCJQbGF0czoge2xvY2F0aW9ufVwifSwge2xvY2F0aW9uOmxvY2F0aW9ufSkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwiKSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXNjcmlwdGlvbiA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcblwiICsgZGVzY3JpcHRpb24gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZXZlbnQtdGl0bGVcIiBocmVmPXtodG1sTGlua30gdGFyZ2V0PVwiY2FsZW5kYXItZXZlbnRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RleHR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsb2NhdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJldmVudC1sb2NhdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvY2F0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkZXNjcmlwdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJldmVudC1kZXNjcmlwdGlvblwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Rlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPC90cj48dHI+XHJcbiAgICAgICAgICAgIDx0ZCBzdHlsZT17e2JvcmRlcjogMH19PlxyXG4gICAgICAgICAgICAgICAgPEhvdXJNYXJrZXJcclxuICAgICAgICAgICAgICAgICAgICBzdGFydEhvdXI9e3N0YXJ0SG91cn1cclxuICAgICAgICAgICAgICAgICAgICBlbmRIb3VyPXtlbmRIb3VyfVxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZT17bG9jYWxlfVxyXG4gICAgICAgICAgICAgICAgICAgIHpvb209e3pvb219IC8+XHJcbiAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICB7ZGF5RGF0YXMubWFwKGRheSA9PiA8dGQga2V5PXtkYXkuZGF5U3RhcnQudG9JU09TdHJpbmcoKX0gY2xhc3NOYW1lPXtkYXkuaXNUb2RheSA/IFwidG9kYXlcIiA6IG51bGx9PjxEYXlWaWV3XHJcbiAgICAgICAgICAgICAgICAgICAga2V5PXtkYXkuZGF5U3RhcnQudG9JU09TdHJpbmcoKX1cclxuICAgICAgICAgICAgICAgICAgICBkYXlTdGFydD17ZGF5LmRheVN0YXJ0fVxyXG4gICAgICAgICAgICAgICAgICAgIGRheUVuZD17ZGF5LmRheUVuZH1cclxuICAgICAgICAgICAgICAgICAgICBldmVudHM9e2RheS5ldmVudHN9XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlPXtsb2NhbGV9XHJcbiAgICAgICAgICAgICAgICAgICAgem9vbT17em9vbX1cclxuICAgICAgICAgICAgICAgICAgICBpc0xhc3RDYWxsPXtzdGF0dXMgPT0gJyd9IC8+IDwvdGQ+KX1cclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgKHN0YXR1cyB8fCBlcnJvcikgJiYgKCFlcnJvciB8fCBlcnJvci5uYW1lICE9PSBcIlVuYXV0aG9yaXplZEVycm9yXCIpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvLyBTaG93IHN0YXR1cyAvIGVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIHN0eWxlPXt7Ym9yZGVyOiAwfX0+PC90ZD48dGQgc3R5bGU9e3tib3JkZXI6IDB9fSBjb2xTcGFuPXtudW1EYXlzfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1c0JhciBzdGF0dXM9e3N0YXR1c30gZXJyb3I9e2Vycm9yfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+PC90cj5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgPC90Ym9keT48L3RhYmxlPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcblxyXG5leHBvcnQgY2xhc3MgR29vZ2xlQ2FsZW5kYXIge1xyXG4gIHRva2VuRXhwaXJhdGlvbjogRGF0ZTtcclxuICBnb29nbGVUb2tlblByb3ZpZGVyOiBCZWFyZXJQcm92aWRlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoZ29vZ2xlVG9rZW5Qcm92aWRlcjogQmVhcmVyUHJvdmlkZXIpIHtcclxuICAgIHRoaXMuZ29vZ2xlVG9rZW5Qcm92aWRlciA9IGdvb2dsZVRva2VuUHJvdmlkZXI7XHJcbiAgfVxyXG5cclxuICBhc3luYyBlbnN1cmVJbml0ZWQoKSB7XHJcbiAgICAvLyBMb2FkIEdBUElcclxuICAgIGlmICh0eXBlb2YgZ2FwaSA9PT0gJ3VuZGVmaW5lZCcpIGF3YWl0IHRoaXMubG9hZEdhcGkoKTtcclxuICAgIC8vIFNldCB0b2tlblxyXG4gICAgaWYgKCF0aGlzLnRva2VuRXhwaXJhdGlvbiB8fCB0aGlzLnRva2VuRXhwaXJhdGlvbiA8IG5ldyBEYXRlKCkpIHtcclxuICAgICAgY29uc3QgdG9rZW5SZXN1bHQgPSBhd2FpdCB0aGlzLmdvb2dsZVRva2VuUHJvdmlkZXIuZ2V0QmVhcmVyKCk7XHJcbiAgICAgIHRoaXMudG9rZW5FeHBpcmF0aW9uID0gbmV3IERhdGUodG9rZW5SZXN1bHQuZXhwaXJlcyk7XHJcbiAgICAgIGdhcGkuY2xpZW50LnNldFRva2VuKHtcclxuICAgICAgICBhY2Nlc3NfdG9rZW46IHRva2VuUmVzdWx0LnRva2VuXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gTG9hZCBDYWxlbmRhciBBUElcclxuICAgIGlmICh0eXBlb2YgZ2FwaS5jbGllbnQuY2FsZW5kYXIgPT09ICd1bmRlZmluZWQnKSBhd2FpdCBnYXBpLmNsaWVudC5sb2FkKCdjYWxlbmRhcicsICd2MycpO1xyXG4gIH1cclxuXHJcbiAgbG9hZEdhcGkoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIGdhcGkgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gcmVzb2x2ZSgpO1xyXG4gICAgICBjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuICAgICAgc2NyaXB0LnNyYyA9IFwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvY2xpZW50LmpzP29ubG9hZD1nYWFwaV9sb2FkZWRcIjtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgICAgICh3aW5kb3cgYXMgYW55KS5nYWFwaV9sb2FkZWQgPSByZXNvbHZlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMTE2ODY4OC9nb29nbGUtb2F1dGgyLXVzaW5nLWV4dGVybmFsbHktZ2VuZXJhdGVkLWFjY2Vzcy10b2tlbi13aXRoLWpzLWNsaWVudC1saWJyYXJ5XHJcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYXBpLWNsaWVudC1saWJyYXJ5L2phdmFzY3JpcHQvcmVmZXJlbmNlL3JlZmVyZW5jZWRvY3MjZ2FwaWNsaWVudHNldHRva2VudG9rZW5vYmplY3RcclxuICAvKmdhcGkuYXV0aC5zZXRUb2tlbih7XHJcbiAgICAgIGFjY2Vzc190b2tlbjogJ2FjY2Vzc1Rva2VuPycsXHJcbiAgICAgIGV4cGlyZXNfaW46IFwiMzYwMFwiLFxyXG4gICAgICBzdGF0ZTogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2NhbGVuZGFyLnJlYWRvbmx5XCJcclxuICB9KSovXHJcblxyXG4gIGFzeW5jIGxpc3RDYWxlbmRhcnMoKSB7XHJcbiAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRlZCgpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZ2FwaS5jbGllbnQuY2FsZW5kYXIuY2FsZW5kYXJMaXN0Lmxpc3Qoe30pO1xyXG4gICAgICAvLyBUT0RPOiBXaGF0IGlzIHRoZSBub3JtYWwgcmVzLnN0YXR1cz8gMjAwPyBUaHJvdyBpZiBub3QgMjAwP1xyXG4gICAgICByZXR1cm4gcmVzLnJlc3VsdC5pdGVtcztcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAvLyBUT0RPOiBQYXJzZSBvdXQgZXJyb3IgZnJvbSBlcnIgKHdoaWNoIGlzIGFuIG9iamVjdCEpXHJcbiAgICAgIHRocm93IGVyci5lcnJvcjsgLy8gSXMgdGhpcyBjb3JyZWN0PyBUZXN0IVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgYmF0Y2hFdmVudHMoeyBjYWxlbmRhckxpc3QsIHRpbWVNaW4sIHRpbWVNYXggfSkge1xyXG4gICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0ZWQoKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGJhdGNoID0gZ2FwaS5jbGllbnQubmV3QmF0Y2goKTtcclxuICAgICAgY2FsZW5kYXJMaXN0LmZvckVhY2goKGNhbCkgPT4ge1xyXG4gICAgICAgIGJhdGNoLmFkZChnYXBpLmNsaWVudC5jYWxlbmRhci5ldmVudHMubGlzdCh7XHJcbiAgICAgICAgICAnY2FsZW5kYXJJZCc6IGNhbC5pZCB8fCAncHJpbWFyeScsXHJcbiAgICAgICAgICAndGltZU1pbic6IHRpbWVNaW4gJiYgKG5ldyBEYXRlKHRpbWVNaW4pKS50b0lTT1N0cmluZygpLFxyXG4gICAgICAgICAgJ3RpbWVNYXgnOiB0aW1lTWF4ICYmIChuZXcgRGF0ZSh0aW1lTWF4KSkudG9JU09TdHJpbmcoKSxcclxuICAgICAgICAgICdzaG93RGVsZXRlZCc6IGZhbHNlLFxyXG4gICAgICAgICAgJ3NpbmdsZUV2ZW50cyc6IHRydWUsXHJcbiAgICAgICAgICAnZmllbGRzJzogJ2l0ZW1zL2lkLGl0ZW1zL3N0YXJ0LGl0ZW1zL2VuZCxpdGVtcy9zdW1tYXJ5LGl0ZW1zL2xvY2F0aW9uLGl0ZW1zL2h0bWxMaW5rLGl0ZW1zL2Rlc2NyaXB0aW9uJyxcclxuICAgICAgICAgICdtYXhSZXN1bHRzJzogMjUwMCxcclxuICAgICAgICAgICdvcmRlckJ5JzogJ3N0YXJ0VGltZSdcclxuICAgICAgICB9KSwgPGFueT57J2lkJzogY2FsLmlkfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gYmF0Y2gudGhlbihyZXNwID0+IHtcclxuICAgICAgICBsZXQgbmV3Q2FscyA9IHt9O1xyXG4gICAgICAgIGZvciAodmFyIGkgaW4gY2FsZW5kYXJMaXN0KSB7XHJcbiAgICAgICAgICBjb25zdCBjYWxJZCA9IGNhbGVuZGFyTGlzdFtpXS5pZDtcclxuICAgICAgICAgIGNvbnN0IGV2ZW50cyA9IChyZXNwLnJlc3VsdFtjYWxJZF0ucmVzdWx0ICBhcyBnYXBpLmNsaWVudC5jYWxlbmRhci5FdmVudHMpLml0ZW1zO1xyXG4gICAgICAgICAgbmV3Q2Fsc1tjYWxJZF0gPSB7Y2FsZW5kYXI6IGNhbGVuZGFyTGlzdFtpXSwgZXZlbnRzfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld0NhbHM7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgdGhyb3cgZXJyLmVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBXZWVrVmlldyBmcm9tICcuL3dlZWstdmlldyc7XHJcbmltcG9ydCB7R29vZ2xlQ2FsZW5kYXJ9IGZyb20gJy4uLy4uL2FwaXMvZ29vZ2xlLWNhbGVuZGFyJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQge2Nsb25lLCBmbGF0dGVuLCBMfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCBTdGF0dXNCYXIgZnJvbSAnLi9zdGF0dXMtYmFyJztcclxuaW1wb3J0IHtjb3Vyc2VOYW1lVG9Dc3NDbGFzc30gZnJvbSAnLi9jb3Vyc2UtbmFtZS10by1jc3MtY2xhc3MnO1xyXG5pbXBvcnQge3Nob3VsZEluY2x1ZGVDYWxlbmRhcn0gZnJvbSAnLi9zaG91bGQtaW5jbHVkZS1jYWxlbmRhcic7XHJcbmltcG9ydCB7IGxvY2FsTW9tZW50IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9tb21lbnQtc3YtbG9jYWxlJztcclxuaW1wb3J0IGVudiwgeyBFbnYgfSBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgICBmaXJzdERheTogbW9tZW50Lk1vbWVudDtcclxuICAgIG51bURheXM6IG51bWJlcjtcclxuICAgIGluaXRpYWxTdGFydEhvdXI6IG51bWJlcjtcclxuICAgIGluaXRpYWxFbmRIb3VyOiBudW1iZXI7XHJcbiAgICBpbml0aWFsWm9vbTogbnVtYmVyO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gICAgZmlyc3REYXk6IG1vbWVudC5Nb21lbnQsXHJcbiAgICBzdGFydEhvdXI6IG51bWJlcixcclxuICAgIGVuZEhvdXI6IG51bWJlcixcclxuICAgIHpvb206IG51bWJlcixcclxuICAgIGNhbGVuZGFyczoge1tjYWxlbmRhcklkOiBzdHJpbmddOiB7XHJcbiAgICAgICAgY2FsZW5kYXI6IGdhcGkuY2xpZW50LmNhbGVuZGFyLkNhbGVuZGFyTGlzdEVudHJ5LFxyXG4gICAgICAgIGV2ZW50czogZ2FwaS5jbGllbnQuY2FsZW5kYXIuRXZlbnRbXSB9fSxcclxuICAgIGNhbGVuZGFyc0JlaW5nTG9hZGVkOiBzdHJpbmdbXSxcclxuICAgIHN0YXR1czogc3RyaW5nLFxyXG4gICAgZXJyb3I6IEVycm9yIHwgbnVsbCBcclxufVxyXG4gIFxyXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMgJiB7ZW52OiBFbnZ9LCBTdGF0ZT4ge1xyXG4gICAgZ2NhbDogR29vZ2xlQ2FsZW5kYXI7XHJcbiAgICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcyAmIHtlbnY6IEVudn0pIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgLy8gUHJvcHNcclxuICAgICAgICBjb25zdCB7Zmlyc3REYXl9ID0gcHJvcHM7XHJcbiAgICAgICAgY29uc3Qge1xyXG4gICAgICAgICAgICBpbml0aWFsU3RhcnRIb3VyLFxyXG4gICAgICAgICAgICBpbml0aWFsRW5kSG91cixcclxuICAgICAgICAgICAgaW5pdGlhbFpvb21cclxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICBcclxuICAgICAgICAvLyBTdGF0ZVxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIGZpcnN0RGF5OiBmaXJzdERheSxcclxuICAgICAgICAgICAgc3RhcnRIb3VyOiBpbml0aWFsU3RhcnRIb3VyLFxyXG4gICAgICAgICAgICBlbmRIb3VyOiBpbml0aWFsRW5kSG91cixcclxuICAgICAgICAgICAgem9vbTogaW5pdGlhbFpvb20sXHJcbiAgICAgICAgICAgIGNhbGVuZGFyczoge30sXHJcbiAgICAgICAgICAgIGNhbGVuZGFyc0JlaW5nTG9hZGVkOiBbXSxcclxuICAgICAgICAgICAgc3RhdHVzOiAnTG9hZGluZyBjYWxlbmRhcnMuLi4gKGF1dGhlbnRpY2F0aW5nLi4uKScsXHJcbiAgICAgICAgICAgIGVycm9yOiBudWxsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCB7Z29vZ2xlVG9rZW5Qcm92aWRlcn0gPSBwcm9wcy5lbnYgfHwgZW52O1xyXG4gICAgICAgIHRoaXMuZ2NhbCA9IG5ldyBHb29nbGVDYWxlbmRhcihnb29nbGVUb2tlblByb3ZpZGVyKTtcclxuXHJcbiAgICAgICAgLy8gU3RhcnQgY2FsbGluZyBvbiBHb29nbGUgQVBJIHJpZ2h0IGF3YXkuIFN0b3JlIHByb21pc2UgaW4gcHJvcGVydHkuXHJcbiAgICAgICAgdGhpcy5nY2FsLmVuc3VyZUluaXRlZCgpLnRoZW4oKCk9PntcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9hZERhdGEoZmlyc3REYXkpO1xyXG4gICAgICAgIH0pLmNhdGNoIChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUVycm9yKGVycm9yKSB7XHJcbiAgICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBcIlVua25vd24gZXJyb3JcIjtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtlcnJvcn0pO1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IgKGVycm9yLnN0YWNrIHx8IGVycm9yKTsgLy8gS2VlcCFcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRGF0YShmaXJzdERheSkge1xyXG4gICAgICAgIC8vIFByb3BzXHJcbiAgICAgICAgY29uc3Qge251bURheXN9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgIGZpcnN0RGF5LFxyXG4gICAgICAgICAgICBjYWxlbmRhcnM6IHt9LFxyXG4gICAgICAgICAgICBjYWxlbmRhcnNCZWluZ0xvYWRlZDogW10sXHJcbiAgICAgICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICAgICAgICBzdGF0dXM6IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJjYWxlbmRhci5sb2FkaW5nQ2FsZW5kYXJcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiTG9hZGluZyBjYWxlbmRhcnMuLi4gKGxpc3RpbmcuLi4pXCJ9KVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBJbXBvcnRhbnQgdG8gcmV0dXJuIHRoZSBQcm9taXNlIHNvIHRoYXQgY2FsbGVyIHdpbGwgY2F0Y2ggYW55IGVycm9yLlxyXG4gICAgICAgIHJldHVybiB0aGlzLmdjYWwubGlzdENhbGVuZGFycygpLnRoZW4oY2FsZW5kYXJzID0+IHtcclxuICAgICAgICAgICAgLy8gSWdub3JlIHRoZSBcIndlZWsgbnVtYmVyc1wiIGNhbGVuZGFyIGFzIHdlIGFscmVhZHkgaW5jbHVkZSB3ZWVrIG51bWJlcnMgaW4gb3VyIHZpZXdcclxuICAgICAgICAgICAgY2FsZW5kYXJzID0gY2FsZW5kYXJzLmZpbHRlcihjYWwgPT4gc2hvdWxkSW5jbHVkZUNhbGVuZGFyKGNhbCkpO1xyXG4gICAgICAgICAgICAvLyEvV2VlayBOdW1iZXJzL2lnLnRlc3QoYy5zdW1tYXJ5KVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coY2FsZW5kYXJzLm1hcChjID0+ICh7YmdDb2xvcjogYy5iYWNrZ3JvdW5kQ29sb3IsIHByaW1hcnk6IGMucHJpbWFyeSwgc3VtbWFyeTogYy5zdW1tYXJ5LCB4OiBjfSkpKTtcclxuICAgICAgICAgICAgLy8gQ2FsZW5kYXJzIFN1Y2Nlc3NmdWxseSBsaXN0ZWQuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzOiBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwiY2FsZW5kYXIubG9hZENhbGVuZGFyRXZlbnRzXCIsIGRlZmF1bHRNZXNzYWdlOiBcIkxvYWQgY2FsZW5kYXIgZXZlbnRzLi4uXCJ9KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5nY2FsLmJhdGNoRXZlbnRzKHtcclxuICAgICAgICAgICAgICAgIGNhbGVuZGFyTGlzdDogY2FsZW5kYXJzLFxyXG4gICAgICAgICAgICAgICAgdGltZU1pbjogbW9tZW50KGZpcnN0RGF5KS5zdGFydE9mKCdkYXknKSxcclxuICAgICAgICAgICAgICAgIHRpbWVNYXg6IG1vbWVudChmaXJzdERheSkuYWRkKG51bURheXMsICdkYXlzJykuZW5kT2YoJ2RheScpXHJcbiAgICAgICAgICAgIH0pLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NhbGVuZGFyczogcmVzdWx0LCBzdGF0dXM6ICcnfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5hdmlnYXRlVG9QcmV2aW91c1dlZWsoKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkRGF0YShtb21lbnQodGhpcy5zdGF0ZS5maXJzdERheSkuYWRkKC0xLCBcIndlZWtcIikpLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmF2aWdhdGVUb05leHRXZWVrKCkge1xyXG4gICAgICAgIHRoaXMubG9hZERhdGEobW9tZW50KHRoaXMuc3RhdGUuZmlyc3REYXkpLmFkZCgxLCBcIndlZWtcIikpLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyICgpIHtcclxuICAgICAgICAvLyBQcm9wc1xyXG4gICAgICAgIGNvbnN0IHsgbnVtRGF5cyB9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gU3RhdGVcclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICAgIGZpcnN0RGF5LFxyXG4gICAgICAgICAgICBzdGFydEhvdXIsXHJcbiAgICAgICAgICAgIGVuZEhvdXIsXHJcbiAgICAgICAgICAgIHpvb20sXHJcbiAgICAgICAgICAgIGNhbGVuZGFycyxcclxuICAgICAgICAgICAgc3RhdHVzLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0gPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgICAgICBjb25zdCBldmVudFNldHMgPSBPYmplY3Qua2V5cyhjYWxlbmRhcnMpXHJcbiAgICAgICAgICAgIC5tYXAoY2FsZW5kYXJJZCA9PiBjYWxlbmRhcnNbY2FsZW5kYXJJZF0pXHJcbiAgICAgICAgICAgIC5tYXAoKHtjYWxlbmRhciwgZXZlbnRzfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNTY2hlZHVsZSA9IGNhbGVuZGFyLnN1bW1hcnkgPT09ICdTa29sc2NoZW1hJyAmJiBjYWxlbmRhci5kZXNjcmlwdGlvbiA9PT0gXCJTeW5jaHJvbml6ZWRcIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzSG9saWRheSA9IC9ob2xpZGF5Ly50ZXN0KGNhbGVuZGFyLmlkKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQ2xhc3NSb29tID0gL2NsYXNzcm9vbS8udGVzdChjYWxlbmRhci5pZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGVuZGFyLmNvbG9ySWQpIGNsYXNzTmFtZXMucHVzaChcImdjYWwtcGFsZXR0ZS1cIiArIGNhbGVuZGFyLmNvbG9ySWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzU2NoZWR1bGUpIGNsYXNzTmFtZXMucHVzaChcImNvdXJzZS1ldmVudFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChpc0hvbGlkYXkpIGNsYXNzTmFtZXMucHVzaChcImhvbGlkYXktZXZlbnRcIik7XHJcbiAgICAgICAgICAgICAgICAvLyBNYXAgR29vZ2xlIENhbGVuZGFyIGV2ZW50cyB0byBvdXIgb3duIGZvcm1hdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBldmVudHMubWFwKGV2ZW50ID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGV2ZW50LmlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBldmVudC5zdGFydCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGV2ZW50LmVuZCxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBldmVudC5zdW1tYXJ5LFxyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiBldmVudC5sb2NhdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXZlbnQuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgLy9iZ0NvbG9yOiBjYWxlbmRhci5iYWNrZ3JvdW5kQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgLy9mZ0NvbG9yOiBjYWxlbmRhci5mb3JlZ3JvdW5kQ29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbExpbms6IGV2ZW50Lmh0bWxMaW5rLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogKGlzU2NoZWR1bGUgJiYgZXZlbnQuc3VtbWFyeSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMuY29uY2F0KGNvdXJzZU5hbWVUb0Nzc0NsYXNzKCdjb3Vyc2UtZXZlbnQtJywgZXZlbnQuc3VtbWFyeSkpIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lcykuam9pbihcIiBcIilcclxuICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGV2ZW50cyA9IGZsYXR0ZW4oZXZlbnRTZXRzKTtcclxuXHJcbiAgICAgICAgLy8gRWxzZSwgcmVuZGVyIHRoZSBXZWVrVmlldyBub3cuIEFueSBlcnJvciBzaG91bGQgYmUgZGlzcGxheWVkIGFzIHJlZCBzdGF0dXNcclxuICAgICAgICByZXR1cm4gPGRpdiBzdHlsZT17e3Bvc2l0aW9uOiAncmVsYXRpdmUnLCB0b3A6IDAsIGxlZnQ6IDB9fT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4tdG9vbGJhciB3ZWVrLW5hdmlnYXRpb25cIiA+XHJcbiAgICAgICAgICAgICAgICB7Lyo8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtMYElkYWdgfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+Ki99XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9PnRoaXMubmF2aWdhdGVUb1ByZXZpb3VzV2VlaygpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtbGVmdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpPT50aGlzLm5hdmlnYXRlVG9OZXh0V2VlaygpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtcmlnaHRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+ICBcclxuICAgICAgICAgICAgICAgICAgICB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcImNhbGVuZGFyLmN1cnJlbnREYXRlXCIsIGRlZmF1bHRNZXNzYWdlOiBcIlZlY2thIHt3ZWVrfSwge3llYXJ9XCJ9LCB7d2VlazogbW9tZW50KGZpcnN0RGF5KS53ZWVrKCksIHllYXI6bW9tZW50KGZpcnN0RGF5KS55ZWFyKCl9KX1cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPFdlZWtWaWV3XHJcbiAgICAgICAgICAgICAgICBsb2NhbGU9e2ludGwubG9jYWxlfVxyXG4gICAgICAgICAgICAgICAgZmlyc3REYXk9e2ZpcnN0RGF5fVxyXG4gICAgICAgICAgICAgICAgc3RhcnRIb3VyPXtzdGFydEhvdXJ9XHJcbiAgICAgICAgICAgICAgICBlbmRIb3VyPXtlbmRIb3VyfVxyXG4gICAgICAgICAgICAgICAgbnVtRGF5cz17bnVtRGF5c31cclxuICAgICAgICAgICAgICAgIHpvb209e3pvb219XHJcbiAgICAgICAgICAgICAgICBldmVudHM9e2V2ZW50c31cclxuICAgICAgICAgICAgICAgIHN0YXR1cz17c3RhdHVzfVxyXG4gICAgICAgICAgICAgICAgZXJyb3I9e2Vycm9yfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgfVxyXG59XHJcbiIsIi8qIENhbGVuZGFycyB0byBzaG93OlxyXG5cclxuICAgIHN1bW1hcnk6IFwiTWF0c2VkZWxcIixcclxuICAgIHN1bW1hcnk6IFwiU2tvbHNjaGVtYVwiLFxyXG4gICAgcHJpbWFyeTogdHJ1ZVxyXG4gICAgaWQuaW5jbHVkZXMoJ2NsYXNzcm9vbScpXHJcbiAgICBpZC5pbmNsdWRlcygnaG9saWRheScpXHJcbiovXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZEluY2x1ZGVDYWxlbmRhciAoY2FsOiBnYXBpLmNsaWVudC5jYWxlbmRhci5DYWxlbmRhckxpc3RFbnRyeSkge1xyXG4gIGNvbnN0IHN1bW1hcnkgPSBjYWwuc3VtbWFyeSB8fCBcIlwiO1xyXG4gIGNvbnN0IGlzT3duZXIgPSAvb3duZXIvaWcudGVzdChjYWwuYWNjZXNzUm9sZSk7XHJcbiAgY29uc3QgaXNQcmltYXJ5ID0gISFjYWwucHJpbWFyeTtcclxuICBjb25zdCBpc0NsYXNzcm9vbUNhbGVuZGFyID0gL2NsYXNzcm9vbS9pZy50ZXN0KGNhbC5pZCk7XHJcbiAgY29uc3QgaXNIb2xpZGF5Q2FsZW5kYXIgPSAvaG9saWRheS9pZy50ZXN0KGNhbC5pZCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICBpc1ByaW1hcnkgfHxcclxuICAgIGlzQ2xhc3Nyb29tQ2FsZW5kYXIgfHxcclxuICAgIGlzSG9saWRheUNhbGVuZGFyIHx8XHJcbiAgICAvLy9tYXRzZWRlbC9pZy50ZXN0KHN1bW1hcnkpIHx8XHJcbiAgICAoL3NjaGVtYS9pZy50ZXN0KHN1bW1hcnkpICYmIGlzT3duZXIpXHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEtHVGVybVBsYW5uZXJXZWVrUGxhbiwgS0dUZXJtUGxhbm5lcldlZWtQbGFuRW50cnkgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IEVudiB9IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHdlZWtOdW1iZXI6IG51bWJlcjtcclxuICB3ZWVrRGF0ZTogbnVtYmVyO1xyXG4gIGNvdXJzZU5hbWU6IHN0cmluZztcclxuICB3ZWVrUGxhbj86IEtHVGVybVBsYW5uZXJXZWVrUGxhbjtcclxuICBub3RlPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuRW50cnk7XHJcbiAgY2xvc2VEaWFsb2c6ICgpPT52b2lkO1xyXG4gIGVudjogRW52O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgY29sb3I6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdlZWtOb3RlRGlhbG9nIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgZGVzY3JpcHRpb246IHByb3BzLm5vdGUgPyBwcm9wcy5ub3RlLmRlc2NyaXB0aW9uIDogJycsXHJcbiAgICAgIGNvbG9yOiBwcm9wcy5ub3RlID8gcHJvcHMubm90ZS5jb2xvciA6ICd5ZWxsb3cnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBkZWxldGUoKSB7XHJcbiAgICBjb25zdCB7IHdlZWtOdW1iZXIsIHdlZWtEYXRlLCBjb3Vyc2VOYW1lLCB3ZWVrUGxhbiwgbm90ZSwgY2xvc2VEaWFsb2csIGVudiB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHsgZGVzY3JpcHRpb24sIGNvbG9yfSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgY2xvc2VEaWFsb2coKTtcclxuXHJcbiAgICBpZiAoT2JqZWN0LmtleXMod2Vla1BsYW4ucGxhbnMpLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBhd2FpdCBlbnYua2dUZXJtUGxhbm5lclJlcG8uZGVsZXRlKFt3ZWVrUGxhbi5pZF0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYXdhaXQgZW52LmtnVGVybVBsYW5uZXJSZXBvLnVwZGF0ZShbd2Vla1BsYW5dLCB3cCA9PiB7XHJcbiAgICAgICAgZGVsZXRlIHdwLnBsYW5zW2NvdXJzZU5hbWVdXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2F2ZSgpIHtcclxuICAgIGNvbnN0IHsgd2Vla051bWJlciwgd2Vla0RhdGUsIGNvdXJzZU5hbWUsIHdlZWtQbGFuLCBub3RlLCBjbG9zZURpYWxvZywgZW52IH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgY29sb3J9ID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICBjbG9zZURpYWxvZygpO1xyXG5cclxuICAgIGlmIChkZXNjcmlwdGlvbi5sZW5ndGggPT0gMCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAod2Vla1BsYW4pIHtcclxuICAgICAgYXdhaXQgZW52LmtnVGVybVBsYW5uZXJSZXBvLnVwZGF0ZShbd2Vla1BsYW5dLCB3cCA9PiB3cC5wbGFuc1tjb3Vyc2VOYW1lXSA9IHtkZXNjcmlwdGlvbiwgY29sb3J9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHBsYW5zID0ge307XHJcbiAgICAgIHBsYW5zW2NvdXJzZU5hbWVdID0ge2Rlc2NyaXB0aW9uLCBjb2xvcn07XHJcbiAgICAgIGF3YWl0IGVudi5rZ1Rlcm1QbGFubmVyUmVwby5pbnNlcnQoW3tcclxuICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICAgIGRhdGVUaW1lOiB3ZWVrRGF0ZSxcclxuICAgICAgICBwbGFuc1xyXG4gICAgICB9XSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IHdlZWtOdW1iZXIsIGNvdXJzZU5hbWUsIHdlZWtQbGFuLCBub3RlLCBlbnYgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBjb2xvciB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHJlYWRPbmx5ID0gZW52LnR1dG9yZWQ7XHJcblxyXG4gICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGgyPkjDpG5kZWxzZSBmw7ZyIHZlY2thIHt3ZWVrTnVtYmVyfSBvY2gge2NvdXJzZU5hbWV9PC9oMj5cclxuICAgICAgICA8aHIgLz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLXRhYmxlXCI+XHJcbiAgICAgICAgICA8ZGl2PkJlc2tyaXZuaW5nOjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmdWxsV2lkdGhcIj5cclxuICAgICAgICAgICAgPHRleHRhcmVhIGF1dG9Gb2N1cyB2YWx1ZT17ZGVzY3JpcHRpb259IGRpc2FibGVkPXtyZWFkT25seX0gb25DaGFuZ2U9e2V2ID0+IHRoaXMuc2V0U3RhdGUoe2Rlc2NyaXB0aW9uOiBldi50YXJnZXQudmFsdWV9KX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24tdGFibGVcIj5cclxuICAgICAgICAgIDxkaXY+RsOkcmc6PC9kaXY+XHJcbiAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8c2VsZWN0IHZhbHVlPXtjb2xvcn0gZGlzYWJsZWQ9e3JlYWRPbmx5fSBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7Y29sb3I6IGV2LnRhcmdldC52YWx1ZX0pfT5cclxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwieWVsbG93XCI+R3VsPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInllbGxvd0xpZ2h0XCI+TGp1c2d1bDwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJjeWFuXCI+R3LDtm48L29wdGlvbj5cclxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY3lhbkxpZ2h0XCI+TGp1c2dyw7ZuPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInB1cnBsZVwiPkxpbGE8L29wdGlvbj5cclxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicHVycGxlTGlnaHRcIj5ManVzbGlsYTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZWRcIj5Sw7ZkPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInJlZExpZ2h0XCI+Um9zYTwvb3B0aW9uPlxyXG4gICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdj5cclxuICAgICAgICB7cmVhZE9ubHkgP1xyXG4gICAgICAgICAgPGJ1dHRvbiB0YWJJbmRleD17MX0gY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiIG9uQ2xpY2s9eygpPT50aGlzLnByb3BzLmNsb3NlRGlhbG9nKCl9PkF2YnJ5dDwvYnV0dG9uPiA6XHJcbiAgICAgICAgICA8PlxyXG4gICAgICAgICAgICA8YnV0dG9uIHRhYkluZGV4PXsxfSBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCIgb25DbGljaz17KCk9PnRoaXMuc2F2ZSgpfT5TcGFyYTwvYnV0dG9uPlxyXG4gICAgICAgICAgICB7bm90ZSAmJiA8YSB0YWJJbmRleD17MX0gY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCk9PnRoaXMuZGVsZXRlKCl9PlRhIGJvcnQ8L2E+fVxyXG4gICAgICAgICAgPC8+XHJcbiAgICAgICAgfVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbi8vaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBFRFNDb3Vyc2UsIEVEU1N0dWR5UGxhbiB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xyXG5pbXBvcnQgeyBFRFNQZXJpb2QgfSBmcm9tICcuLi8uLi9hcGlzL2Vkc2NsaWVudCc7XHJcbmltcG9ydCB7IGdldFNjaG9vbE1vbWVudCwgZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSwgZ2V0VGVybVN0YXJ0QW5kRW5kIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2Nob29sLW1vbWVudCc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xyXG5pbXBvcnQgeyBLR1Rlcm1QbGFubmVyV2Vla1BsYW4sIEtHVGVybVBsYW5uZXJXZWVrUGxhbkVudHJ5LCBLR1Rlcm1QbGFubmVyVHV0b3JOb3RlLCBLR1Rlcm1QbGFubmVyV2Vla1BsYW5PclR1dG9yTm90ZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgRGlhbG9ncyB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9kaWFsb2dzJztcclxuaW1wb3J0IHsgV2Vla05vdGVEaWFsb2cgfSBmcm9tICcuL3dlZWstbm90ZS1kaWFsb2cnO1xyXG5pbXBvcnQgeyBLR1Rlcm1QbGFubmVyUmVwbyB9IGZyb20gJy4uLy4uL3JlcG9zL2tnLXRlcm1wbGFubmVyLXJlcG8nO1xyXG5pbXBvcnQgeyBkaXN0aW5jdCwgc2hvd0Vycm9yIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBLRURXZWVrIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Vla3V0aWwnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBEb2N1bWVudEFjY2VzcywgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcclxuaW1wb3J0IHsgRW52IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgVHV0b3JEaWFsb2cgfSBmcm9tICcuLi9rcy10ZXJtcGxhbm5lci90dXRvci1kaWFsb2cnO1xyXG5pbXBvcnQgeyBmZWF0dXJlcyB9IGZyb20gJy4uLy4uL2ZlYXR1cmVzJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgZW52OiBFbnY7XHJcbiAgdHV0b3JlZDogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBub3c6IERhdGUsXHJcbiAgY291cnNlczogRURTQ291cnNlW107XHJcbiAgd2Vla1BsYW5zOiBLR1Rlcm1QbGFubmVyV2Vla1BsYW5PclR1dG9yTm90ZVtdO1xyXG4gIGlzTG9hZGluZ0NvdXJzZXM6IGJvb2xlYW47XHJcbiAgaXNMb2FkaW5nV2Vla1BsYW5zOiBib29sZWFuO1xyXG4gIGRpYWxvZ3M6IGFueVtdO1xyXG4gIC8vZ29hbHM6IEVEU1N0dWR5UGxhbltdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgS0dUZXJtUGxhbm5lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBub3csXHJcbiAgICAgIGNvdXJzZXM6IFtdLFxyXG4gICAgICB3ZWVrUGxhbnM6IFtdLFxyXG4gICAgICBpc0xvYWRpbmdDb3Vyc2VzOiB0cnVlLFxyXG4gICAgICBpc0xvYWRpbmdXZWVrUGxhbnM6IHRydWUsXHJcbiAgICAgIGRpYWxvZ3M6IFtdXHJcbiAgICAgIC8vZ29hbHM6IFtdXHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZVdlZWtQbGFucyA9IHRoaXMudXBkYXRlV2Vla1BsYW5zLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMubG9hZEVEU0NvdXJzZXMoKTtcclxuICAgIHRoaXMucHJvcHMuZW52LmtnVGVybVBsYW5uZXJSZXBvLm1lbS5zdWJzY3JpYmUodGhpcy51cGRhdGVXZWVrUGxhbnMpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICB0aGlzLnByb3BzLmVudi5rZ1Rlcm1QbGFubmVyUmVwby5tZW0udW5zdWJzY3JpYmUodGhpcy51cGRhdGVXZWVrUGxhbnMpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlV2Vla1BsYW5zKHdlZWtQbGFuczogS0dUZXJtUGxhbm5lcldlZWtQbGFuW10pIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe3dlZWtQbGFucywgaXNMb2FkaW5nV2Vla1BsYW5zOiBmYWxzZX0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZEVEU0NvdXJzZXMoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBzY2hvb2xNb21lbnQgPSBnZXRTY2hvb2xNb21lbnQobW9tZW50KHRoaXMuc3RhdGUubm93KSk7XHJcbiAgICAgIGNvbnN0IHBlcmlvZE5hbWUgPSBuZXcgRURTUGVyaW9kKHNjaG9vbE1vbWVudCkucGVyaW9kO1xyXG4gICAgICBjb25zdCBjb3Vyc2VzID0gZGlzdGluY3QoYXdhaXQgdGhpcy5wcm9wcy5lbnYuZWRzQ2xpZW50LmdldEFjdGl2ZUNvdXJzZXMoe3BlcmlvZE5hbWV9KSwgY291cnNlID0+IGNvdXJzZS5uYW1lKTtcclxuICAgICAgLy9jb25zb2xlLmxvZyhcImNvdXJzZXM6XCIgKyBKU09OLnN0cmluZ2lmeShjb3Vyc2VzLCBudWxsLCAyKSk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb3Vyc2VzIH0pO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzTG9hZGluZ0NvdXJzZXM6IGZhbHNlIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Ob3RlQ2xpY2sod2Vla051bWJlcjogbnVtYmVyLCB3ZWVrRGF0ZTogbnVtYmVyLCBjb3Vyc2VOYW1lOiBzdHJpbmcsIHdlZWtQbGFuPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuLCBub3RlPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuRW50cnkpIHtcclxuICAgIHRoaXMub3BlbkRpYWxvZyg8V2Vla05vdGVEaWFsb2dcclxuICAgICAgd2Vla051bWJlcj17d2Vla051bWJlcn1cclxuICAgICAgd2Vla0RhdGU9e3dlZWtEYXRlfVxyXG4gICAgICBjb3Vyc2VOYW1lPXtjb3Vyc2VOYW1lfVxyXG4gICAgICB3ZWVrUGxhbj17d2Vla1BsYW59XHJcbiAgICAgIG5vdGU9e25vdGV9XHJcbiAgICAgIGVudj17dGhpcy5wcm9wcy5lbnZ9XHJcbiAgICAgIGNsb3NlRGlhbG9nPXsoKT0+dGhpcy5jbG9zZURpYWxvZygpfSAvPik7XHJcbiAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSB3ZWVrTnVtYmVyIFxyXG4gICAqIEBwYXJhbSBjb21tZW50IFxyXG4gICAqIFxyXG4gICAqIEFkZCBhIGNvbW1lbnQgZnJvbSB0dXRvclxyXG4gICAqL1xyXG4gIG9uVHV0b3JDbGljayh0dXRvck5vdGU6IEtHVGVybVBsYW5uZXJUdXRvck5vdGUsIHdlZWtOdW1iZXI6IG51bWJlcikge1xyXG4gICAgdGhpcy5vcGVuRGlhbG9nKDxUdXRvckRpYWxvZ1xyXG4gICAgICB3ZWVrTnVtYmVyPXt3ZWVrTnVtYmVyfVxyXG4gICAgICBjb21tZW50PXt0dXRvck5vdGUudmFsdWV9XHJcbiAgICAgIHVwZGF0ZURhdGEgPSB7bmV3VmFsdWUgPT4gdGhpcy51cGRhdGVUdXRvck5vdGVGaWVsZCh0dXRvck5vdGUsIG5ld1ZhbHVlKX1cclxuICAgICAgZGVsZXRlTm90ZURhdGEgPSB7KCkgPT4gdGhpcy5kZWxldGVUdXRvck5vdGVGaWVsZCh0dXRvck5vdGUuaWQpfVxyXG4gICAgICBjbG9zZURpYWxvZz17KCk9PnRoaXMuY2xvc2VEaWFsb2coKX0gLz4pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZGVsZXRlVHV0b3JOb3RlRmllbGQobm90ZUlkOiBzdHJpbmcpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LmtnVGVybVBsYW5uZXJSZXBvLmRlbGV0ZShbbm90ZUlkXSk7XHJcbiAgICB9IGNhdGNoIChzaG93RXJyb3Ipe31cclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZVR1dG9yTm90ZUZpZWxkKHR1dG9yTm90ZTogS0dUZXJtUGxhbm5lclR1dG9yTm90ZSwgbmV3VmFsdWU6IHN0cmluZyl7XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9ICh0dXRvck5vdGUgJiYgdHV0b3JOb3RlLnZhbHVlKSB8fCBcIlwiO1xyXG4gICAgaWYgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIHR1dG9yTm90ZS52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgICAvL3NldCBkb2N1bWVudCBBQ0xcclxuICAgICAgdHV0b3JOb3RlLmFjbCA9IFtcclxuICAgICAgICBuZXcgRG9jdW1lbnRBY2Nlc3MoXCJ0dXRvckZvclwiLCB0aGlzLnByb3BzLmVudi5jdXJyZW50VXNlci5tYWlsLCBcIlNcIikudG9TdHJpbmcoKSxcclxuICAgICAgICBuZXcgRG9jdW1lbnRBY2Nlc3MoXCJlbWFpbFwiLCB0aGlzLnByb3BzLmVudi5jdXJyZW50VXNlci5tYWlsLCBcIlJcIikudG9TdHJpbmcoKSxcclxuICAgICAgXTtcclxuXHJcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3BzLmVudi5rZ1Rlcm1QbGFubmVyUmVwby51cHNlcnQodHV0b3JOb3RlLCBcclxuICAgICAgICAobm90ZSA6IEtHVGVybVBsYW5uZXJUdXRvck5vdGUpID0+IG5vdGUudmFsdWUgPSBuZXdWYWx1ZSk7XHJcbiAgICAgIH0gY2F0Y2ggKHNob3dFcnJvcil7fVxyXG4gIH1cclxuXHJcbiAgXHJcbiAgb3BlbkRpYWxvZyhkaWFsb2cpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBkaWFsb2dzOiBbLi4udGhpcy5zdGF0ZS5kaWFsb2dzLCBkaWFsb2ddIH0pO1xyXG4gIH1cclxuXHJcbiAgY2xvc2VEaWFsb2coKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogdGhpcy5zdGF0ZS5kaWFsb2dzLnNsaWNlKDAsIHRoaXMuc3RhdGUuZGlhbG9ncy5sZW5ndGggLSAxKSB9KTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgY291cnNlcywgbm93LCBpc0xvYWRpbmdDb3Vyc2VzLCBpc0xvYWRpbmdXZWVrUGxhbnMsIHdlZWtQbGFucywgZGlhbG9ncyB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IGlzTG9hZGluZyA9IGlzTG9hZGluZ0NvdXJzZXMgfHwgaXNMb2FkaW5nV2Vla1BsYW5zO1xyXG4gICAgY29uc3Qgd2Vla3M6IHsgd2Vla051bWJlcjogbnVtYmVyLCB3ZWVrRGF0ZTogbnVtYmVyLCB3ZWVrUGxhbjogS0dUZXJtUGxhbm5lcldlZWtQbGFuIH1bXSA9IFtdO1xyXG4gICAgY29uc3QgdHV0b3JOb3RlczogeyB3ZWVrTnVtYmVyOiBudW1iZXIsIHR1dG9yVmFsdWU6IEtHVGVybVBsYW5uZXJUdXRvck5vdGUgfVtdID0gW107XHJcbiAgICBjb25zdCBzY2hvb2xNb21lbnQgPSBnZXRTY2hvb2xNb21lbnQobW9tZW50KG5vdykpO1xyXG4gICAgY29uc3QgW3Rlcm1TdGFydCwgdGVybUVuZF0gPSBnZXRUZXJtU3RhcnRBbmRFbmQobW9tZW50KG5vdykpO1xyXG4gICAgY29uc3QgW2ZpcnN0V2VlaywgbGFzdFdlZWtdID0gZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybShzY2hvb2xNb21lbnQudGVybSk7XHJcbiAgICBjb25zdCBzaG93S2dUdXRvckNvbW1lbnRGaWVsZCA9IGZlYXR1cmVzLmtnVHV0b3JDb21tZW50O1xyXG5cclxuICAgIGxldCBjdXJyZW50V2Vla1BsYW5zIDogS0dUZXJtUGxhbm5lcldlZWtQbGFuW10gPSB3ZWVrUGxhbnMuZmlsdGVyKCh4IDogS0dUZXJtUGxhbm5lcldlZWtQbGFuKSA9PiAheC50eXBlKSBhcyBLR1Rlcm1QbGFubmVyV2Vla1BsYW5bXTtcclxuICAgIGxldCBjdXJyZW50VHV0b3JOb3RlcyA6IEtHVGVybVBsYW5uZXJUdXRvck5vdGVbXSA9IHdlZWtQbGFucy5maWx0ZXIoKHggOiBLR1Rlcm1QbGFubmVyVHV0b3JOb3RlKSA9PiB4LnR5cGUgPT09ICd0dXRvci1ub3RlJykgYXMgS0dUZXJtUGxhbm5lclR1dG9yTm90ZVtdO1xyXG5cclxuICAgIGZvciAobGV0IHdlZWtNb21lbnQgPSB0ZXJtU3RhcnQuY2xvbmUoKS5zdGFydE9mKCd3ZWVrJyk7XHJcbiAgICAgIHdlZWtNb21lbnQudmFsdWVPZigpIDwgdGVybUVuZC52YWx1ZU9mKCk7XHJcbiAgICAgIHdlZWtNb21lbnQgPSB3ZWVrTW9tZW50LmNsb25lKCkuYWRkKDEsICd3ZWVrJykuc3RhcnRPZignd2VlaycpKVxyXG4gICAge1xyXG4gICAgICBjb25zdCB3ZWVrTnVtYmVyID0gd2Vla01vbWVudC53ZWVrKCk7XHJcblxyXG4gICAgICAvLyBmaXggZm9yIGRpc3BsYXkgYnV0IG5vdCBzdG9yZVxyXG4gICAgICBjb25zdCB3ZWVrWWVhciA9IHdlZWtNb21lbnQueWVhcigpIDwgdGVybVN0YXJ0LnllYXIoKSA/IHRlcm1TdGFydC55ZWFyKCkgOiB3ZWVrTW9tZW50LnllYXIoKTtcclxuXHJcbiAgICAgIGNvbnN0IGtlZFdlZWsgPSBLRURXZWVrKHdlZWtZZWFyLCB3ZWVrTnVtYmVyKTtcclxuICAgICAgaWYgKHdlZWtOdW1iZXIgPj0gZmlyc3RXZWVrICYmIHdlZWtOdW1iZXIgPD0gbGFzdFdlZWspIHtcclxuICAgICAgICBjb25zdCB3ZWVrUGxhbiA9IGN1cnJlbnRXZWVrUGxhbnMuZmlsdGVyKHdwID0+XHJcbiAgICAgICAgICB3cC5kYXRlVGltZSA+PSBrZWRXZWVrLm5vdEJlZm9yZSAmJlxyXG4gICAgICAgICAgd3AuZGF0ZVRpbWUgPD0ga2VkV2Vlay5ub3RBZnRlcilbMF07XHJcblxyXG4gICAgICAgIGNvbnN0IHR1dG9yTm90ZSA9IGN1cnJlbnRUdXRvck5vdGVzLmZpbHRlcih3cCA9PlxyXG4gICAgICAgICAgd3AuZGF0ZVRpbWUgPj0ga2VkV2Vlay5ub3RCZWZvcmUgJiZcclxuICAgICAgICAgIHdwLmRhdGVUaW1lIDw9IGtlZFdlZWsubm90QWZ0ZXIpWzBdO1xyXG5cclxuICAgICAgICBjb25zdCBzdGFydE9mV2VlayA9IHdlZWtNb21lbnQuY2xvbmUoKS5zdGFydE9mKCd3ZWVrJykudmFsdWVPZigpO1xyXG4gICAgICAgIHdlZWtzLnB1c2goe1xyXG4gICAgICAgICAgd2Vla051bWJlcixcclxuICAgICAgICAgIHdlZWtEYXRlOiBzdGFydE9mV2VlayxcclxuICAgICAgICAgIHdlZWtQbGFuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdHV0b3JOb3Rlcy5wdXNoKHtcclxuICAgICAgICAgIHdlZWtOdW1iZXIsXHJcbiAgICAgICAgICB0dXRvclZhbHVlOiB0dXRvck5vdGUgfHwge3ZhbHVlOiAnJywgZGF0ZVRpbWU6IHN0YXJ0T2ZXZWVrLCBpZDogY3JlYXRlVVVJRCgpLCB0eXBlOiAndHV0b3Itbm90ZSd9XHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxyXG4gICAgICA8aDQ+XHJcbiAgICAgICAgVGVybWluc3BsYW5lcmluZ1xyXG4gICAgICAgPC9oND5cclxuICAgICAgPGhyIC8+XHJcbiAgICAgIHtpc0xvYWRpbmcgP1xyXG4gICAgICAgIDxTcGlubmVyIC8+IDogY291cnNlcy5sZW5ndGggPT09IDAgPyA8ZGl2PlxyXG4gICAgICAgICAgVGVybWluc3BsYW5lcmFyZW4gYWt0aXZlcmFzIG7DpHIgZHUgc2tyaXZpdHMgaW4gcMOlIGRpbmEga3Vyc2VyXHJcbiAgICAgICAgICA8L2Rpdj4gOiBcclxuICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0ZXJtcGxhbm5lci10YWJsZSB6ZWJyYVwiPlxyXG4gICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgPHRoPlZlY2thPC90aD5cclxuICAgICAgICAgICAgICAgIHsvKmdvYWxzLm1hcCgoe2NvdXJzZVVuaXRJZCwgY291cnNlVW5pdE5hbWV9KSA9PlxyXG4gICAgICAgICAgICAgICAgICA8dGgga2V5PXtjb3Vyc2VVbml0SWR9IGNsYXNzTmFtZT1cInRlcm1Db3Vyc2VIZWFkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRlcm1Db3Vyc2VUZXh0XCI+e2NvdXJzZVVuaXROYW1lfTwvZGl2PjwvdGg+KSovfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICBjb3Vyc2VzLm1hcCgoYywgaWR4KSA9PiA8dGgga2V5PXtpZHh9IGNsYXNzTmFtZT1cImtnQ291cnNlSGVhZGVyXCI+e2MubmFtZX08L3RoPilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHtzaG93S2dUdXRvckNvbW1lbnRGaWVsZCAmJiA8dGggY2xhc3NOYW1lPVwidHV0b3JIZWFkZXJcIj48L3RoPn1cclxuICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAge3dlZWtzLm1hcCgodywgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0N1cnJlbnRXZWVrID0gdy53ZWVrTnVtYmVyID09PSBtb21lbnQoKS53ZWVrKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBub3RlVmFsdWUgPSB0dXRvck5vdGVzICYmIHR1dG9yTm90ZXMuZmluZCh0biA9PiB0bi53ZWVrTnVtYmVyID09PSB3LndlZWtOdW1iZXIpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiA8dHIga2V5PXtpZHh9IGNsYXNzTmFtZT17aXNDdXJyZW50V2VlayA/IFwiY3VycmVudFdlZWtcIiA6IFwiXCJ9PlxyXG4gICAgICAgICAgICAgICAgICA8dGQ+e3cud2Vla051bWJlcn08L3RkPlxyXG4gICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY291cnNlcy5tYXAoKGMsaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90ZSA9IHcud2Vla1BsYW4gJiYgdy53ZWVrUGxhbi5wbGFuc1tjLm5hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8dGRcclxuICAgICAgICAgICAgICAgICAgICAgIGtleT17aWR4fVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtub3RlPyBgY291cnNlTm90ZSBub3RlLWNvbG9yLSR7bm90ZS5jb2xvcn1gIDogXCJjb3Vyc2VOb3RlXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvb2x0aXA9e25vdGUgJiYgbm90ZS5kZXNjcmlwdGlvbn1cclxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtub3RlICYmIG5vdGUuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5vbk5vdGVDbGljayh3LndlZWtOdW1iZXIsIHcud2Vla0RhdGUsIGMubmFtZSwgdy53ZWVrUGxhbiwgbm90ZSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAge25vdGU/IDxpIGNsYXNzTmFtZT1cImZhcyBmYS1hbGlnbi1jZW50ZXJcIi8+IDogJyd9XHJcbiAgICAgICAgICAgICAgICAgICAgPC90ZD59XHJcbiAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgc2hvd0tnVHV0b3JDb21tZW50RmllbGQgJiYgKHRoaXMucHJvcHMudHV0b3JlZCA/XHJcbiAgICAgICAgICAgICAgICAgICA8dGQga2V5PXtpZHh9IG9uQ2xpY2s9eygpID0+IHRoaXMub25UdXRvckNsaWNrKG5vdGVWYWx1ZS50dXRvclZhbHVlLCB3LndlZWtOdW1iZXIpfSBjbGFzc05hbWU9XCJ0dXRvckNlbGxcIj5cclxuICAgICAgICAgICAgICAgICAgICB7bm90ZVZhbHVlLnR1dG9yVmFsdWUudmFsdWUgPyA8ZGl2IGtleT17aWR4fSBkYXRhLXRvb2x0aXA9e25vdGVWYWx1ZS50dXRvclZhbHVlLnZhbHVlfT48aSBjbGFzc05hbWU9XCJmYXMgZmEtY29tbWVudC1kb3RzXCI+PC9pPjwvZGl2PjogPGRpdiBrZXk9e2lkeH0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWNvbW1lbnQtbWVkaWNhbFwiPjwvaT48L2Rpdj59XHJcbiAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA6XHJcbiAgICAgICAgICAgICAgICAgICAgbm90ZVZhbHVlLnR1dG9yVmFsdWUudmFsdWUgPyA8dGQgY2xhc3NOYW1lPVwidHV0b3JDZWxsXCI+PGRpdiBkYXRhLXRvb2x0aXA9e25vdGVWYWx1ZS50dXRvclZhbHVlLnZhbHVlfT48aSBjbGFzc05hbWU9XCJmYXIgZmEtY29tbWVudC1kb3RzXCI+PC9pPjwvZGl2PjwvdGQ+IDogPHRkPjwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgIDx0Zm9vdD5cclxuICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICA8dGgga2V5PVwicG9pbnRzXCI+UG/DpG5nPC90aD5cclxuICAgICAgICAgICAgICAgIHtjb3Vyc2VzLm1hcCgoYywgaWR4KSA9PiA8dGgga2V5PXtpZHh9IGNsYXNzTmFtZT1cInN0ZXBDZWxsXCI+e2MuY3JlZGl0c308L3RoPil9XHJcbiAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICA8dGg+QmV0eWdzbcOlbDwvdGg+XHJcbiAgICAgICAgICAgICAgICB7Lypnb2Fscy5tYXAoZyA9PlxyXG4gICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cInN0ZXBDZWxsXCI+e2cucGVyaW9kR29hbHMuZmlsdGVyKHBnID0+IHBnLnBlcmlvZE5hbWUgPT09ICBwZXJpb2QucGVyaW9kKVxyXG4gICAgICAgICAgICAgICAgICAubWFwKHBnPT5wZy5ncmFkZU5hbWUpWzBdIHx8IGcuZmluYWxHb2FsR3JhZGV9PC90aD4pKi99XHJcbiAgICAgICAgICAgICAgICB7Y291cnNlcy5tYXAoKGMsIGlkeCkgPT5cclxuICAgICAgICAgICAgICAgICAgPHRoIGtleT17aWR4fSBjbGFzc05hbWU9XCJzdGVwQ2VsbFwiPntjLnBlcmlvZEdvYWxHcmFkZX08L3RoPil9XHJcbiAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgPC90Zm9vdD5cclxuICAgICAgICAgIDwvdGFibGU+fVxyXG4gICAgICAgICAgPERpYWxvZ3NcclxuICAgICAgICBkaWFsb2dzPXtkaWFsb2dzfVxyXG4gICAgICAgIHBvcERpYWxvZz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGRpYWxvZ3M6IGRpYWxvZ3Muc2xpY2UoMCwgZGlhbG9ncy5sZW5ndGggLSAxKSB9KX0gLz5cclxuICAgICAgICAgIFxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge0tHVGVybVBsYW5uZXJ9IGZyb20gJy4va2ctdGVybXBsYW5uZXInO1xyXG5pbXBvcnQgeyBUdXRvcmFibGVDb21wb25lbnQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvdHV0b3JhYmxlLWNvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gS0dUZXJtUGxhbm5lclR1dG9yZWQgKCkge1xyXG4gIHJldHVybiA8VHV0b3JhYmxlQ29tcG9uZW50XHJcbiAgICB0dXRvcmVkPXt0cnVlfVxyXG4gICAgY3JlYXRlQ29tcG9uZW50PXtlbnYgPT5cclxuICAgICAgPEtHVGVybVBsYW5uZXJcclxuICAgICAgICBrZXk9e2Vudi5jdXJyZW50VXNlci5tYWlsfVxyXG4gICAgICAgIGVudj17ZW52fVxyXG4gICAgICAgIHR1dG9yZWQ9e3RydWV9IC8+XHJcbiAgICB9XHJcbiAgLz47XHJcbn1cclxuIiwiaW1wb3J0IHtLZWRSZXBvfSBmcm9tICcuL2tlZC1yZXBvJztcclxuaW1wb3J0IHsgS0dUZXJtUGxhbm5lcldlZWtQbGFuT3JUdXRvck5vdGUgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgZ2V0VGVybVN0YXJ0QW5kRW5kIH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLW1vbWVudCc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBLR1Rlcm1QbGFubmVyUmVwbyBleHRlbmRzIEtlZFJlcG88S0dUZXJtUGxhbm5lcldlZWtQbGFuT3JUdXRvck5vdGU+IHtcclxuICBjb25zdHJ1Y3RvcihnZXRDbGllbnQ6ICgpPT5LZWRCYWNrZW5kQ2xpZW50LCBnZXRDdXJyZW50VXNlcjogKCk9PlVzZXIpIHtcclxuICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gZ2V0Q3VycmVudFVzZXIoKTtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICBjb25zdCBbdGVybVN0YXJ0LCB0ZXJtRW5kXSA9IGdldFRlcm1TdGFydEFuZEVuZChtb21lbnQobm93KSk7XHJcbiAgICBzdXBlcih7XHJcbiAgICAgIGdldENsaWVudCxcclxuICAgICAgb3B0aW1pc3RpYzogdHJ1ZSxcclxuICAgICAgdGFibGU6IFwid2Vla3BsYW5zXCIsXHJcbiAgICAgIHVzZXI6IGN1cnJlbnRVc2VyID8gY3VycmVudFVzZXIubWFpbCA6IFwiXCIsXHJcbiAgICAgIGdldFF1ZXJ5T3B0aW9uczogYXN5bmMgKCk9PntcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgZnJvbTogdGVybVN0YXJ0LnN0YXJ0T2YoJ3dlZWsnKS5hZGQoLTIsICdkYXlzJykudG9EYXRlKCkudmFsdWVPZigpLFxyXG4gICAgICAgICAgdG86IHRlcm1FbmQuc3RhcnRPZignd2VlaycpLmFkZCg1LCAnZGF5cycpLnRvRGF0ZSgpLnZhbHVlT2YoKSxcclxuICAgICAgICAgIHJvbGU6IFwiVVNFUlwiXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB0ZXJtUGxhbm5lclJlcG8gPSBuZXcgS0dUZXJtUGxhbm5lclJlcG8oKCk9PmVudi5rZWRCYWNrZW5kQ2xpZW50LCgpPT5lbnYuY3VycmVudFVzZXIpO1xyXG5lbnYua2dUZXJtUGxhbm5lclJlcG8gPSB0ZXJtUGxhbm5lclJlcG87XHJcbiIsImltcG9ydCBlbnYsIHsgRW52IH0gZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBCZWFyZXJUb2tlbkluZm8sIEtlZEJhY2tlbmRDbGllbnQsIEh0dHBFcnJvciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgRWRzQ2xpZW50IH0gZnJvbSAnLi4vYXBpcy9lZHNjbGllbnQnO1xyXG5pbXBvcnQgeyBpc29tb3JwaGljLCBLZWRCYWNrZW5kQ2xpZW50V2ViIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWInO1xyXG5pbXBvcnQgeyBLU1Rlcm1QbGFubmVyUmVwbyB9IGZyb20gJy4uL3JlcG9zL2tzLXRlcm1wbGFubmVyLXJlcG8nO1xyXG5pbXBvcnQgeyBLR1Rlcm1QbGFubmVyUmVwbyB9IGZyb20gJy4uL3JlcG9zL2tnLXRlcm1wbGFubmVyLXJlcG8nO1xyXG5pbXBvcnQgeyBVc2VyVGFza3NSZXBvIH0gZnJvbSAnLi4vcmVwb3MvdXNlci10YXNrcy1yZXBvJztcclxuaW1wb3J0IHsgUmVzdENsaWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZXF1ZXN0VHV0b3JlZFRva2Vucyh1c2VyRW1haWw6IHN0cmluZywgZGlzcGxheU5hbWU6IHN0cmluZyk6IFByb21pc2U8RW52PiB7XHJcbiAgLy9sZXQgYmVhcmVyUHJvbWlzZTogUHJvbWlzZTxCZWFyZXJUb2tlbkluZm8+IHwgbnVsbCA9IG51bGw7XHJcbiAgLy9sZXQgZ29vZ2xlQmVhcmVyUHJvbWlzZTogUHJvbWlzZTxCZWFyZXJUb2tlbkluZm8+IHwgbnVsbCA9IG51bGw7XHJcblxyXG4gIGNvbnN0IGN1cnJlbnRVc2VyOiBVc2VyID0ge1xyXG4gICAgbWFpbDogdXNlckVtYWlsLFxyXG4gICAgZGlzcGxheU5hbWUsXHJcbiAgICByb2xlczogW1wiVVNFUlwiXSxcclxuICAgIHNjaG9vbDogZW52LmN1cnJlbnRVc2VyLnNjaG9vbCxcclxuICAgIHR1dG9yRm9yOiB1c2VyRW1haWxcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVCZWFyZXJQcm92aWRlciAoY2xpZW50OiBSZXN0Q2xpZW50LCB0b2tlblVybDogc3RyaW5nLCBxdWVyeT8pIHtcclxuICAgIGxldCBiZWFyZXJQcm9taXNlOiBQcm9taXNlPEJlYXJlclRva2VuSW5mbz4gfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBnZXRCZWFyZXIoKTogUHJvbWlzZTxCZWFyZXJUb2tlbkluZm8+IHtcclxuICAgICAgICByZXR1cm4gYmVhcmVyUHJvbWlzZSB8fCB0aGlzLnJlZnJlc2hCZWFyZXIoKTtcclxuICAgICAgfSxcclxuICAgICAgcmVmcmVzaEJlYXJlcigpOiBQcm9taXNlPEJlYXJlclRva2VuSW5mbz4ge1xyXG4gICAgICAgIHJldHVybiAoYmVhcmVyUHJvbWlzZSA9IHJldHJpZXZlVG9rZW4oKSk7XHJcbiAgICAgIH0sXHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgZnVuY3Rpb24gcmV0cmlldmVUb2tlbigpOiBQcm9taXNlPEJlYXJlclRva2VuSW5mbz4ge1xyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZ2V0KHRva2VuVXJsLCBxdWVyeSk7XHJcbiAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICByZXR1cm4gKGF3YWl0IHJlcy5qc29uKCkpIGFzIEJlYXJlclRva2VuSW5mbztcclxuICAgICAgfVxyXG4gICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsXHJcbiAgICAgICAgXCJDb3VsZCBub3QgcmV0cmlldmUgdHV0b3IgdG9rZW4gZm9yIFwiICtcclxuICAgICAgICB1c2VyRW1haWwgK1xyXG4gICAgICAgIFwiLiBFcnJvciBNZXNzYWdlOiBcIiArIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVGhlIG1haW4gYmVhcmVycHJvdmlkZXIgd2lsbCByZXF1ZXN0IGEgdHV0b3ItdG9rZW4gYmFzZWQgb24gdGhlIHVzZXIncyBub3JtYWwgdG9rZW4uXHJcbiAgY29uc3QgYmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVCZWFyZXJQcm92aWRlcihlbnYua2VkQmFja2VuZENsaWVudC5odHRwLCBcInR1dG9yL3Rva2VuXCIsIHt1c2VyRW1haWx9KTtcclxuICBjb25zdCB0dXRvcmVkS2VkQmFja2VuZENsaWVudCA9IG5ldyBLZWRCYWNrZW5kQ2xpZW50KGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBjZmcuS0VEX0FQSV9VUkwpO1xyXG4gIC8vIE5vdywgY3JlYXRlIGJlYXJlciBwcm92aWRlcnMgZm9yIEVEUyBhbmQgR29vZ2xlIHRoYXQgZ2VuZXJhdGVzIHRva2VuIGJ5IGNvbnZlcnRpbmcgdGhlIHR1dG9yLXRva2VuXHJcbiAgLy8gdG8gYW4gRURTLSBvciBHb29nbGUgdG9rZW46XHJcbiAgLy9jb25zdCBlZHNCZWFyZXJQcm92aWRlciA9IGNyZWF0ZUJlYXJlclByb3ZpZGVyKHR1dG9yZWRLZWRCYWNrZW5kQ2xpZW50Lmh0dHAsIFwidHV0b3IvY29udmVydC10b2tlbi9lZHNcIik7XHJcbiAgY29uc3QgZ29vZ2xlVG9rZW5Qcm92aWRlciA9IGNyZWF0ZUJlYXJlclByb3ZpZGVyKHR1dG9yZWRLZWRCYWNrZW5kQ2xpZW50Lmh0dHAsIFwidHV0b3IvY29udmVydC10b2tlbi9nb29nbGVcIik7XHJcblxyXG4gIGNvbnN0IGVkc0NsaWVudCA9IG5ldyBFZHNDbGllbnQoaXNvbW9ycGhpYywgY2ZnLkVEU19BUElfVVJMLCBiZWFyZXJQcm92aWRlciwgKCk9PnVzZXJFbWFpbCk7XHJcbiAgXHJcbiAgY29uc3QgdHV0b3JFbnY6IEVudiA9IHtcclxuICAgIGN1cnJlbnRVc2VyLFxyXG4gICAgYmVhcmVyUHJvdmlkZXIsXHJcbiAgICBlZHNDbGllbnQsXHJcbiAgICBnb29nbGVUb2tlblByb3ZpZGVyLFxyXG4gICAga2VkQmFja2VuZENsaWVudDogdHV0b3JlZEtlZEJhY2tlbmRDbGllbnQsXHJcbiAgICB0dXRvcmVkOiB0cnVlXHJcbiAgfTtcclxuICB0dXRvckVudi5rc1Rlcm1QbGFubmVyUmVwbyA9IG5ldyBLU1Rlcm1QbGFubmVyUmVwbygoKT0+dHV0b3JlZEtlZEJhY2tlbmRDbGllbnQsICgpPT5jdXJyZW50VXNlcik7XHJcbiAgdHV0b3JFbnYua2dUZXJtUGxhbm5lclJlcG8gPSBuZXcgS0dUZXJtUGxhbm5lclJlcG8oKCk9PnR1dG9yZWRLZWRCYWNrZW5kQ2xpZW50LCAoKT0+Y3VycmVudFVzZXIpO1xyXG4gIHR1dG9yRW52LnVzZXJUYXNrc1JlcG8gPSBuZXcgVXNlclRhc2tzUmVwbygoKT0+dHV0b3JlZEtlZEJhY2tlbmRDbGllbnQsICgpPT5jdXJyZW50VXNlcik7XHJcblxyXG4gIGF3YWl0IGJlYXJlclByb3ZpZGVyLmdldEJlYXJlcigpLmNhdGNoKGVycm9yID0+IHtcclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gdHV0b3JFbnY7ICBcclxufVxyXG4iLCJpbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEVEU1N0dWRlbnQgfSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcclxuaW1wb3J0IHsgY29tcGFyZVByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XHJcbmltcG9ydCB0dXRvckVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC50dXRvckVudic7XHJcbmltcG9ydCB7cmVxdWVzdFR1dG9yZWRUb2tlbnN9IGZyb20gJy4uLy4uL3V0aWxzL3JlcXVlc3QtdHV0b3JlZC10b2tlbnMnO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5cclxuaW50ZXJmYWNlIFN0dWRlbnRJbmZvIHtcclxuICBtYWlsOiBzdHJpbmc7XHJcbiAgZGlzcGxheU5hbWU6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuXHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xyXG4gIHN0dWRlbnRzOiBTdHVkZW50SW5mb1tdO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHV0b3JzU2VsZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xyXG5cclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXHJcbiAgICAgIHN0dWRlbnRzOiBbXVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLmxvYWQoKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWQoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBlZHNTdHVkZW50cyA9IGF3YWl0IGVudi5lZHNDbGllbnQuZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMoKTtcclxuICAgICAgZWRzU3R1ZGVudHMuc29ydChjb21wYXJlUHJvcHMoW1wibGFzdE5hbWVcIiwgXCJmaXJzdE5hbWVcIl0pKTtcclxuICAgICAgY29uc3Qgc3R1ZGVudHMgPSBlZHNTdHVkZW50cy5sZW5ndGggPiAwID9cclxuICAgICAgICBlZHNTdHVkZW50cy5tYXAoKHtlbWFpbCwgZmlyc3ROYW1lLCBsYXN0TmFtZX0pPT4oe1xyXG4gICAgICAgICAgbWFpbDogZW1haWwsXHJcbiAgICAgICAgICBkaXNwbGF5TmFtZTogYCR7Zmlyc3ROYW1lfSAke2xhc3ROYW1lfWBcclxuICAgICAgICB9KSkgOlxyXG4gICAgICAgIFtlbnYuY3VycmVudFVzZXJdO1xyXG4gICAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtzdHVkZW50c30pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBsaXN0IHR1dG9yIHN0dWRlbnRzXCIsIGVycm9yKTtcclxuICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7c3R1ZGVudHM6IFtlbnYuY3VycmVudFVzZXJdfSlcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2lzTG9hZGluZzogZmFsc2V9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uU2VsZWN0VXNlcihlbWFpbDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBjaG9vc2VuU3R1ZGVudCA9IHRoaXMuc3RhdGUuc3R1ZGVudHMuZmlsdGVyKHMgPT4gcy5tYWlsID09PSBlbWFpbClbMF07XHJcbiAgICBjb25zdCB1c2VyOiBVc2VyID0ge1xyXG4gICAgICAuLi5jaG9vc2VuU3R1ZGVudCxcclxuICAgICAgcm9sZXM6IFtcIlVTRVJcIl0sXHJcblxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0dXRvckVudi5zZXROZXdFbnYodXNlciwgKCk9PnJlcXVlc3RUdXRvcmVkVG9rZW5zKGVtYWlsLCBlbWFpbCkpXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7aXNMb2FkaW5nLCBzdHVkZW50c30gPSB0aGlzLnN0YXRlO1xyXG4gICAgaWYgKGlzTG9hZGluZykgcmV0dXJuIDxTcGlubmVyIC8+O1xyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInR1dG9ycy1zZWxlY3RcIj5cclxuICAgICAgPHNlbGVjdCBvbkNoYW5nZT17ZXYgPT4gZXYudGFyZ2V0LnZhbHVlICYmIHRoaXMub25TZWxlY3RVc2VyKGV2LnRhcmdldC52YWx1ZSl9PlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj5Ww6RsaiBlbGV2PC9vcHRpb24+XHJcbiAgICAgICAge3N0dWRlbnRzLm1hcChzdHVkZW50ID0+XHJcbiAgICAgICAgICA8b3B0aW9uIGtleT17c3R1ZGVudC5tYWlsfSB2YWx1ZT17c3R1ZGVudC5tYWlsfT5cclxuICAgICAgICAgICAge3N0dWRlbnQuZGlzcGxheU5hbWV9ICh7c3R1ZGVudC5tYWlsfSlcclxuICAgICAgICAgIDwvb3B0aW9uPil9XHJcbiAgICAgIDwvc2VsZWN0PlxyXG4gICAgPC9kaXY+O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IEVEU0Fzc2Vzc21lbnQgfSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBsaW1pdD86IG51bWJlcjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBsb2FkaW5nOiBib29sZWFuLFxyXG4gIGFzc2Vzc21lbnRzOiBFRFNBc3Nlc3NtZW50W10sXHJcbiAgZXJyb3I6IHN0cmluZyB8IG51bGxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExhdGVzdEFzc2Vzc21lbnRzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgYXNzZXNzbWVudHM6IFtdLFxyXG4gICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgbG9hZGluZzogZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgIHRoaXMubG9hZCgpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZCgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe2xvYWRpbmc6IHRydWV9KTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGFzc2Vzc21lbnRzID0gYXdhaXQgZW52LmVkc0NsaWVudC5nZXRMYXRlc3RBc3Nlc3NtZW50cyh0aGlzLnByb3BzLmxpbWl0KTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7YXNzZXNzbWVudHN9KTtcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldFN0YXRlKHtsb2FkaW5nOiBmYWxzZX0pOyAgICBcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IGhhc0dyYWRlcyA9IHRoaXMuc3RhdGUuYXNzZXNzbWVudHMuc29tZShhID0+ICEhYS5ncmFkZU5hbWUpO1xyXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkXCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2Vla1NlbGVjdFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8aDQ+e0xgU2VuYXN0ZSBiZWTDtm1uaW5nYXJgfTwvaDQ+XHJcbiAgICAgIDxociAvPlxyXG4gICAgICA8dGFibGUgY2xhc3NOYW1lPVwic21hbGxGb250XCI+XHJcbiAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwibm93cmFwXCI+e0xgRGF0dW1gfTwvdGg+XHJcbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJub3dyYXBcIj57TGBLdXJzYH08L3RoPlxyXG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwibm93cmFwXCI+e0xgRGVsYH08L3RoPlxyXG4gICAgICAgICAgICB7aGFzR3JhZGVzICYmIDx0aCBjbGFzc05hbWU9XCJub3dyYXBcIj57TGBCZXR5Z2B9PC90aD59XHJcbiAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJub3dyYXBcIiBjb2xTcGFuPXsyfT57TGBCZWTDtm1uaW5nYXJgfTwvdGg+XHJcbiAgICAgICAgICA8L3RyPlxyXG4gICAgICAgIDwvdGhlYWQ+XHJcblxyXG4gICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgIHt0aGlzLnN0YXRlLmFzc2Vzc21lbnRzLm1hcCgoYSwgaSkgPT4gXHJcbiAgICAgICAgICAgIDx0ciBrZXk9e2l9IGNsYXNzTmFtZT17aSAlIDIgJiYgXCJ0YWJsZU9kZFwifT5cclxuICAgICAgICAgICAgICA8dGQ+e2EucHVibGlzaERhdGVUaW1lLnN1YnN0cigwLCAxMCl9PC90ZD5cclxuICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiYW1uZUNlbGxcIj57YS5jb3Vyc2VOYW1lfTwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImRlbENlbGxcIj57YS5jb3Vyc2VVbml0TmFtZX08L3RkPlxyXG4gICAgICAgICAgICAgIHtoYXNHcmFkZXMgJiYgPHRkPnthLmdyYWRlTmFtZX08L3RkPn1cclxuICAgICAgICAgICAgICA8dGQ+PHByZT57YS50ZXh0fTwvcHJlPjwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvdGJvZHk+PC90YWJsZT5cclxuICAgIDwvZGl2PjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge0tHVGVybVBsYW5uZXJ9IGZyb20gJy4va2ctdGVybXBsYW5uZXInO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gS0dUZXJtUGxhbm5lclNlbGYgKCkge1xyXG4gIHJldHVybiA8S0dUZXJtUGxhbm5lciBlbnY9e2Vudn0gdHV0b3JlZD17ZmFsc2V9IC8+O1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtLU1Rlcm1QbGFubmVyfSBmcm9tICcuL3Rlcm1wbGFubmVyJztcclxuaW1wb3J0IHsgVHV0b3JhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3R1dG9yYWJsZS1jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBJbmplY3RlZEludGxQcm9wcyB9IGZyb20gJ3JlYWN0LWludGwnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIEluamVjdGVkSW50bFByb3Bze1xyXG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEtTVGVybVBsYW5uZXJUdXRvcmVkIChwcm9wczogUHJvcHMpIHtcclxuICBjb25zdCB7aW50bH0gPSBwcm9wcztcclxuICByZXR1cm4gPExhbmd1YWdlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e2ludGx9fT5cclxuICA8VHV0b3JhYmxlQ29tcG9uZW50XHJcbiAgICB0dXRvcmVkPXt0cnVlfVxyXG4gICAgY3JlYXRlQ29tcG9uZW50PXtlbnYgPT5cclxuICAgICAgPEtTVGVybVBsYW5uZXJcclxuICAgICAgICBrZXk9e2Vudi5jdXJyZW50VXNlci5tYWlsfVxyXG4gICAgICAgIGVudj17ZW52fVxyXG4gICAgICAgIHR1dG9yZWQ9e3RydWV9IFxyXG4gICAgICAgIGluaXRpYWxEYXRlPXtuZXcgRGF0ZSgpfS8+XHJcbiAgICB9XHJcbiAgLz48L0xhbmd1YWdlQ29udGV4dC5Qcm92aWRlcj47XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBDb3Vyc2UsIFVzZXJIaWRkZW5Db3Vyc2UsIFNjaG9vbCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgaGlkZGVuQ291cnNlc1JlcG8sIENvdXJzZVdpdGhIaWRkZW5TdGF0ZSB9IGZyb20gJy4uLy4uL3JlcG9zL2hpZGRlbi1jb3Vyc2VzLXJlcG8nO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IGZsYXR0ZW4sIGNvbXBhcmVQcm9wLCBhcnJheVRvTWFwLCBhcnJheVRvTG9va3VwIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSB9IGZyb20gJy4uLy4uL2FjY2Vzcy1jb250cm9sJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHMge1xyXG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZSB7XHJcbiAgY291cnNlczogQ291cnNlV2l0aEhpZGRlblN0YXRlW107XHJcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xyXG4gIGVycm9yPzogRXJyb3I7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNeUNvdXJzZXMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGNvdXJzZXM6IFtdLFxyXG4gICAgICBpc0xvYWRpbmc6IHRydWVcclxuICAgIH1cclxuICAgIHRoaXMudXBkYXRlSGlkZGVuQ291cnNlc1N0YXRlID0gdGhpcy51cGRhdGVIaWRkZW5Db3Vyc2VzU3RhdGUuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgaGlkZGVuQ291cnNlc1JlcG8uc3Vic2NyaWJlKHRoaXMudXBkYXRlSGlkZGVuQ291cnNlc1N0YXRlLCB7ZnVsbENvdXJzZTogZmFsc2V9KTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUhpZGRlbkNvdXJzZXNTdGF0ZShjb3Vyc2VzOiBDb3Vyc2VXaXRoSGlkZGVuU3RhdGVbXSkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7Y291cnNlcywgaXNMb2FkaW5nOiBmYWxzZX0pO1xyXG4gIH1cclxuXHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgaGlkZGVuQ291cnNlc1JlcG8udW5zdWJzY3JpYmUodGhpcy51cGRhdGVIaWRkZW5Db3Vyc2VzU3RhdGUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0Q291cnNlVXJsKGNvdXJzZUlkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSh0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmwsIHsgY291cnNlSWQgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7dmlld0NvdXJzZVVybH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3Qge2lzTG9hZGluZywgZXJyb3IsIGNvdXJzZXMgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB2aXNpYmxlQ291cnNlcyA9IHRoaXMuc3RhdGUuY291cnNlcy5maWx0ZXIoYyA9PiBjLnZpc2libGUpO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDw+XHJcbiAgICAgICAge2lzTG9hZGluZyA/IChcclxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJsdmwyIGhlYWRlclwiPlxyXG4gICAgICAgICAgICA8YT5MYWRkYXIuLi48L2E+XHJcbiAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICkgOiBlcnJvciA/IChcclxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJsdjEyXCI+XHJcbiAgICAgICAgICAgIDxhPkt1bmRlIGludGUgbGFkZGEga3Vyc2VyLjwvYT5cclxuICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICkgOiAoXHJcbiAgICAgICAgICB2aXNpYmxlQ291cnNlcy5tYXAoKHtuYW1lLCBpZH0pID0+IChcclxuICAgICAgICAgICAgPGxpIGtleT17aWR9IGNsYXNzTmFtZT1cImx2bDJcIj5cclxuICAgICAgICAgICAgICA8YSBocmVmPXt0aGlzLmdldENvdXJzZVVybChpZCl9PntuYW1lfTwvYT5cclxuICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgIClcclxuICAgICAgICApKVxyXG4gICAgICAgIH1cclxuXHRcdFx0PC8+XHJcbiAgICApO1xyXG4gIH1cclxufSIsImltcG9ydCB7IEtlZFJlcG8gfSBmcm9tICcuL2tlZC1yZXBvJztcclxuaW1wb3J0IHsgV2Vla05vdGUgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlELCBEb2N1bWVudEFjY2VzcyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgZ2V0QWRqdXN0ZWRXZWVrLCBLRURXZWVrIH0gZnJvbSAnLi4vdXRpbHMvd2Vla3V0aWwnO1xyXG5cclxuZXhwb3J0IGxldCB3ZWVrTm90ZXNSZXBvID0gZW52LndlZWtOb3Rlc1JlcG8gYXMgV2Vla05vdGVzUmVwbztcclxuXHJcbmV4cG9ydCBjbGFzcyBXZWVrTm90ZXNSZXBvIGV4dGVuZHMgS2VkUmVwbzxXZWVrTm90ZT4ge1xyXG4gIC8qcHJpdmF0ZSBjdXJyZW50V2VlazogbW9tZW50Lk1vbWVudDtcclxuXHJcbiAgZ2V0Q3VycmVudFdlZWsoKSB7XHJcbiAgICBpZiAoIXRoaXMuY3VycmVudFdlZWspIHtcclxuICAgICAgY29uc3Qge3dlZWtNaWxsaXMsIGV4cGlyZX0gPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJ3ZWVrLW5vdGVzLXdlZWtcIikgfHwgXCJ7fVwiKSBhcyB7d2Vla01pbGxpcz86IG51bWJlciwgZXhwaXJlPzogbnVtYmVyfTtcclxuICAgICAgdGhpcy5jdXJyZW50V2VlayA9IHdlZWtNaWxsaXMgJiYgZXhwaXJlICYmIGV4cGlyZSA+IERhdGUubm93KCkgP1xyXG4gICAgICAgIG1vbWVudChuZXcgRGF0ZSh3ZWVrTWlsbGlzKSkgOlxyXG4gICAgICAgIG1vbWVudCgpLnN0YXJ0T2YoJ3dlZWsnKS5hZGQoMSwgJ2RheXMnKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRXZWVrLmNsb25lKCk7XHJcbiAgfVxyXG5cclxuICBzZXRDdXJyZW50V2VlayhuZXdXZWVrTW9tZW50OiBtb21lbnQuTW9tZW50KSB7XHJcbiAgICB0aGlzLmN1cnJlbnRXZWVrID0gbmV3V2Vla01vbWVudDtcclxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJ3ZWVrLW5vdGVzLXdlZWtcIiwgSlNPTi5zdHJpbmdpZnkoe1xyXG4gICAgICB3ZWVrTWlsbGlzOiBuZXdXZWVrTW9tZW50LnRvRGF0ZSgpLmdldFRpbWUoKSxcclxuICAgICAgZXhwaXJlOiBtb21lbnQoKS5hZGQoOCwgXCJob3Vyc1wiKS50b0RhdGUoKS5nZXRUaW1lKClcclxuICAgIH0pKVxyXG4gIH0qL1xyXG4gIFxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoe1xyXG4gICAgICBnZXRDbGllbnQoKSB7IHJldHVybiBlbnYua2VkQmFja2VuZENsaWVudDsgfSxcclxuICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXHJcbiAgICAgIHRhYmxlOiBcIm5vdGVzXCIsIC8vIFwid2Vlay1ub3Rlc1wiXHJcbiAgICAgIHVzZXI6IGVudi5jdXJyZW50VXNlciA/IGVudi5jdXJyZW50VXNlci5tYWlsIDogXCJcIixcclxuICAgICAgZ2V0UXVlcnlPcHRpb25zOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgLy9jb25zdCB1c2VyRW1haWwgPSBlbnYuY3VycmVudFVzZXIgPyBlbnYuY3VycmVudFVzZXIubWFpbCA6IFwiXCI7XHJcbiAgICAgICAgLy9jb25zdCBjdXJyZW50V2VlayA9IHRoaXMuZ2V0Q3VycmVudFdlZWsoKTtcclxuICAgICAgICAvL2NvbnN0IHdlZWtOdW1iZXIgPSBjdXJyZW50V2Vlay53ZWVrKCk7XHJcbiAgICAgICAgLy9jb25zdCBrZWRXZWVrID0gS0VEV2VlayhjdXJyZW50V2Vlay55ZWFyKCksIHdlZWtOdW1iZXIpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAvL2Zyb206IGtlZFdlZWsubm90QmVmb3JlLFxyXG4gICAgICAgICAgLy90bzoga2VkV2Vlay5ub3RBZnRlcixcclxuICAgICAgICAgIHJvbGU6IFwiVVNFUlwiXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvL3RoaXMuY3VycmVudFdlZWsgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyphc3luYyBjaGFuZ2VXZWVrKHdlZWtzVG9BZGQ6IG51bWJlcikge1xyXG4gICAgdGhpcy5zZXRDdXJyZW50V2Vlayh0aGlzLmdldEN1cnJlbnRXZWVrKCkuYWRkKHdlZWtzVG9BZGQsIFwid2Vla3NcIikpO1xyXG4gICAgYXdhaXQgdGhpcy5tZW0ucmVmcmVzaEZyb21TZXJ2ZXIoKTtcclxuICB9Ki9cclxufVxyXG5cclxuaWYgKCF3ZWVrTm90ZXNSZXBvKSB7XHJcbiAgd2Vla05vdGVzUmVwbyA9IGVudi53ZWVrTm90ZXNSZXBvID0gbmV3IFdlZWtOb3Rlc1JlcG8oKTtcclxufVxyXG4iLCJcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlmVGFrZXNUaW1lKG1zOiBudW1iZXIsIHRhc2s6ICgpPT5Qcm9taXNlPGFueT4sIGFjdGlvbjogKCk9PmFueSkge1xyXG4gIGxldCB0aW1lb3V0UmVhY2hlZCA9IGZhbHNlO1xyXG4gIGNvbnN0IHRoID0gc2V0VGltZW91dCgoKT0+e1xyXG4gICAgdGltZW91dFJlYWNoZWQgPSB0cnVlO1xyXG4gICAgYWN0aW9uKCk7XHJcbiAgfSwgbXMpO1xyXG4gIGNvbnN0IHJ2ID0gYXdhaXQgdGFzaygpO1xyXG4gIGlmICghdGltZW91dFJlYWNoZWQpIGNsZWFyVGltZW91dCh0aCk7XHJcbiAgcmV0dXJuIHJ2O1xyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHdlZWtOb3Rlc1JlcG8gfSBmcm9tICcuLi8uLi9yZXBvcy93ZWVrLW5vdGVzLXJlcG8nO1xyXG5pbXBvcnQgeyBXZWVrTm90ZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgUGVuZGluZ0pvYiB9IGZyb20gJy4uLy4uL3V0aWxzL3BlbmRpbmctam9iJztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCwgRG9jdW1lbnRBY2Nlc3MgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgV3lzaXd5ZyB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnJztcclxuaW1wb3J0IGFjdGlvbnNfc3dlZGlzaCBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLXN2JztcclxuaW1wb3J0IGFjdGlvbnNfZW4gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucyc7XHJcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICcuLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zcGlubmVyJztcclxuaW1wb3J0IHsgaWZUYWtlc1RpbWUgfSBmcm9tICcuLi8uLi91dGlscy9pZi10YWtlcy10aW1lJztcclxuaW1wb3J0IHsgSW5qZWN0ZWRJbnRsLCBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCB7IExhbmd1YWdlQ29udGV4dCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xyXG5cclxuY29uc3QgTUFYX05PVEVfTEVOR1RIID0gMTYzODQ7XHJcblxyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICB3ZWVrTm90ZT86IFdlZWtOb3RlO1xyXG4gIG5vdGVzOiBzdHJpbmc7XHJcbiAgLy93ZWVrOiBudW1iZXI7XHJcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xyXG4gIHNob3dMb2FkaW5nUHJvZ3Jlc3M6IGJvb2xlYW47XHJcbiAgc2hvd1NhdmluZ1Byb2dyZXNzOiBib29sZWFuO1xyXG4gIGV2ZXJFZGl0ZWQ6IGJvb2xlYW47XHJcbiAgZXJyb3I/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBXZWVrTm90ZWJvb2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgYXV0b1NhdmVyOiBQZW5kaW5nSm9iO1xyXG4gIHRpbWVvdXRIYW5kbGU6IGFueTtcclxuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuYXV0b1NhdmVyID0gbmV3IFBlbmRpbmdKb2IoKCk9PnRoaXMuc2F2ZSgpKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcclxuICAgICAgc2hvd0xvYWRpbmdQcm9ncmVzczogZmFsc2UsXHJcbiAgICAgIHNob3dTYXZpbmdQcm9ncmVzczogZmFsc2UsXHJcbiAgICAgIGV2ZXJFZGl0ZWQ6IGZhbHNlLFxyXG4gICAgICBub3RlczogXCJcIixcclxuICAgICAgLy93ZWVrOiBtb21lbnQoKS53ZWVrKClcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLnNob3dQcm9ncmVzc0lmTG9hZGluZ1Rha2VzVGltZSgpO1xyXG4gICAgd2Vla05vdGVzUmVwby5tZW0uc3Vic2NyaWJlKHRoaXMub25DaGFuZ2UpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzaG93UHJvZ3Jlc3NJZkxvYWRpbmdUYWtlc1RpbWUoKSB7XHJcbiAgICB0aGlzLnRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KCgpPT50aGlzLnN0YXRlLmlzTG9hZGluZyAmJiB0aGlzLnNldFN0YXRlKHtzaG93TG9hZGluZ1Byb2dyZXNzOiB0cnVlfSksIDMwMCk7ICAgIFxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICB3ZWVrTm90ZXNSZXBvLm1lbS51bnN1YnNjcmliZSh0aGlzLm9uQ2hhbmdlKTtcclxuICAgIHRoaXMuYXV0b1NhdmVyLnN0b3AoKTtcclxuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRIYW5kbGUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBfc2F2ZSgpIHtcclxuICAgIGZvciAobGV0IG1heEl0ZXJhdGlvbnM9MzsgdGhpcy5pc05vdGVzRWRpdGVkKCkgJiYgbWF4SXRlcmF0aW9uczsgLS1tYXhJdGVyYXRpb25zKSB7XHJcbiAgICAgIGF3YWl0IHdlZWtOb3Rlc1JlcG8udXBzZXJ0KHRoaXMuc3RhdGUud2Vla05vdGUsIHduID0+IHtcclxuICAgICAgICB3bi5jb250ZW50ID0gdGhpcy5zdGF0ZS5ub3RlcztcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIHNhdmUoKSB7XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUuc2hvd1NhdmluZ1Byb2dyZXNzICYmICF0aGlzLnN0YXRlLmlzTG9hZGluZyAmJiB0aGlzLmlzTm90ZXNFZGl0ZWQoKSkge1xyXG4gICAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtlcnJvcjogdW5kZWZpbmVkfSk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgaWZUYWtlc1RpbWUoMzAwLCAoKT0+dGhpcy5fc2F2ZSgpLCAoKT0+dGhpcy5zZXRTdGF0ZSh7c2hvd1NhdmluZ1Byb2dyZXNzOiB0cnVlfSkpO1xyXG4gICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7ZXJyb3I6IHRoaXMuY29udGV4dC5pbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwiY29tbW9uLmVycm9yU2F2aW5nRGF0YVwiLCBkZWZhdWx0TWVzc2FnZTogXCJLdW5kZSBpbnRlIHNwYXJhLlwifSl9KTtcclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtzaG93U2F2aW5nUHJvZ3Jlc3M6IGZhbHNlfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzTm90ZXNFZGl0ZWQoKSB7XHJcbiAgICBjb25zdCB7IHdlZWtOb3RlLCBub3RlcyB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHJldHVybiAhIXdlZWtOb3RlICYmIChub3RlcyAhPT0gd2Vla05vdGUuY29udGVudCk7XHJcbiAgfSAgXHJcblxyXG4gIC8vSWYgdGhlIG5vdGVib29rIHNob3VsZCBiZSB1c2VkIGluIG11bHRpcGxlIG1vZHVsZXMsIG1vdmUgdGhpcyBmdW5jdGlvbnMgaW50byBhbiB1dGlsaXR5IGZpbGVcclxuICBnZXRUcmFuc2xhdGVkQWN0aW9ucyhpbnRsOiBJbmplY3RlZEludGwpe1xyXG4gICAgLy9hY3Rpb25zIG1pZ2h0IGhhdmUgZGlmZmVyZW50IGljb25zIGZvciBlYWNoIGxhbmd1YWdlXHJcbiAgICAvL3dlIGtlZXAgdGhlIHNhbWUgc3RydWN0dXJlIG9mIHRoZSBhY3Rpb25zLCBidXQgd2UgcmVwbGFjZSB0aGUgdGV4dHMgd2l0aCB0aGUgb25lcyBmcm9tIHRoZSB0cmFuc2xhdGVkIGZpbGVzXHJcbiAgICB2YXIgbG9jYWxlQWN0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGludGwubG9jYWxlID09PSBcInN2XCIgPyBhY3Rpb25zX3N3ZWRpc2ggOiBhY3Rpb25zX2VuKTtcclxuICAgIE9iamVjdC5rZXlzKGxvY2FsZUFjdGlvbnMpLmZvckVhY2goZWxlbSA9PiB7XHJcbiAgICAgIGNvbnN0IGN1cnJlbnRUaXRsZSA9IGFjdGlvbnNfc3dlZGlzaFtlbGVtXS50aXRsZTtcclxuICAgICAgbG9jYWxlQWN0aW9uc1tlbGVtXS50aXRsZSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6YHd5c2l3eWcuJHtlbGVtfWAsIGRlZmF1bHRNZXNzYWdlOiBjdXJyZW50VGl0bGV9KTtcclxuICAgICAgXHJcbiAgICAgIC8vYmVjYXVzZSB0aGUgaW1hZ2UgYWN0aW9uIG5lZWRzIGEgY3VzdG9tIHRyYW5zbGF0aW9uLCB3ZSB0cmVhdCB0aGlzIHNlcGFyYXRlbHlcclxuICAgICAgaWYoZWxlbSA9PT0gXCJpbWFnZVwiKXtcclxuICAgICAgICBsb2NhbGVBY3Rpb25zW2VsZW1dLnByb21wdE1zZyA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJ3eXNpd3lnLmltYWdlUHJvbXB0TXNnXCIsIGRlZmF1bHRNZXNzYWdlOiBhY3Rpb25zX3N3ZWRpc2hbZWxlbV0ucHJvbXB0TXNnfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGxvY2FsZUFjdGlvbnM7XHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSh3ZWVrTm90ZXM6IFdlZWtOb3RlW10pIHtcclxuICAgIGNvbnN0IHdlZWtOb3RlID0gd2Vla05vdGVzLmxlbmd0aCA+IDAgP1xyXG4gICAgICB3ZWVrTm90ZXNbd2Vla05vdGVzLmxlbmd0aCAtIDFdIDpcclxuICAgICAge1xyXG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgICAgZGF0ZVRpbWU6IERhdGUubm93KCksXHJcbiAgICAgICAgLy9kYXRlVGltZTogd2Vla05vdGVzUmVwby5nZXRDdXJyZW50V2VlaygpLnRvRGF0ZSgpLmdldFRpbWUoKSxcclxuICAgICAgICBjb250ZW50OiBcIlwiLFxyXG4gICAgICAgIGFjbDogW1xyXG4gICAgICAgICAgLy8gRGVmYXVsdCBBQ0w6IExldCB1c2VyIHNlbGYgaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGlzIGl0ZW06XHJcbiAgICAgICAgICBuZXcgRG9jdW1lbnRBY2Nlc3MoXCJlbWFpbFwiLCBlbnYuY3VycmVudFVzZXIubWFpbCwgXCJTXCIpXHJcbiAgICAgICAgXS5tYXAoYWMgPT4gYWMudG9TdHJpbmcoKSlcclxuICAgICAgfTtcclxuICAgIFxyXG4gICAgY29uc3QgbmV3U3RhdGU6IFBhcnRpYWw8U3RhdGU+ID0ge1xyXG4gICAgICB3ZWVrTm90ZSxcclxuICAgICAgLy93ZWVrOiB3ZWVrTm90ZXNSZXBvLmdldEN1cnJlbnRXZWVrKCkud2VlaygpLFxyXG4gICAgICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICBzaG93TG9hZGluZ1Byb2dyZXNzOiBmYWxzZVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoIXRoaXMuc3RhdGUud2Vla05vdGUgfHwgdGhpcy5zdGF0ZS53ZWVrTm90ZS5pZCAhPT0gd2Vla05vdGUuaWQgfHwgd2Vla05vdGVzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBuZXdTdGF0ZS5ub3RlcyA9IHdlZWtOb3RlLmNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlIGFzIFN0YXRlKTtcclxuICB9XHJcblxyXG4gIC8qYXN5bmMgY2hhbmdlV2VlayhkaXJlY3Rpb246IG51bWJlcikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxyXG4gICAgICAgIGV2ZXJFZGl0ZWQ6IGZhbHNlLFxyXG4gICAgICAgIHdlZWtOb3RlOiBudWxsLFxyXG4gICAgICAgIGVycm9yOiB1bmRlZmluZWRcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuc2hvd1Byb2dyZXNzSWZMb2FkaW5nVGFrZXNUaW1lKCk7XHJcbiAgICAgIGF3YWl0IHdlZWtOb3Rlc1JlcG8uY2hhbmdlV2VlayhkaXJlY3Rpb24pO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7ZXJyb3I6IFwiS3VuZGUgaW50ZSBsYWRkYSBkYXRhXCJ9KTtcclxuICAgIH0gXHJcbiAgfVxyXG5cclxuICBwcmV2V2VlaygpIHtcclxuICAgIHRoaXMuY2hhbmdlV2VlaygtMSk7XHJcbiAgfVxyXG5cclxuICBuZXh0V2VlaygpIHtcclxuICAgIHRoaXMuY2hhbmdlV2VlaygxKTtcclxuICB9Ki9cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge25vdGVzLCBzaG93TG9hZGluZ1Byb2dyZXNzLCBpc0xvYWRpbmcsIHNob3dTYXZpbmdQcm9ncmVzcywgZXJyb3IsIGV2ZXJFZGl0ZWR9ID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIHsvKjxkaXYgY2xhc3NOYW1lPXtga2VkX2JveGVkIGtlZE5vdGVwYWQke3dlZWtOdW1iZXIgPT09IGN1cnJlbnRXZWVrID8gXCIgY3VycmVudFdlZWtcIiA6IFwiXCJ9YH0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgd2Vla1NlbGVjdGB9PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cclxuICAgICAgICAgICAgICAgIDxwPntMYFZlY2thICR7d2Vla051bWJlcn1gfTwvcD5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpID0+IHRoaXMucHJldldlZWsoKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtbGVmdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCkgPT4gdGhpcy5uZXh0V2VlaygpfT5cclxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1yaWdodFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKi9cclxuICAgICAgICB9XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BrZWRfYm94ZWQga2VkTm90ZXBhZGB9PlxyXG4gICAgICAgICAgPGgzPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla05vdGVib29rLnRpdGxlXCIgZGVmYXVsdE1lc3NhZ2U9XCJBbnRlY2tuaW5nYXJcIi8+PC9oMz5cclxuICAgICAgICAgIDxXeXNpd3lnXHJcbiAgICAgICAgICAgIGFjdGlvbnM9e1tcclxuICAgICAgICAgICAgICBcImJvbGRcIixcclxuICAgICAgICAgICAgICBcIml0YWxpY1wiLFxyXG4gICAgICAgICAgICAgIFwidW5kZXJsaW5lXCIsXHJcbiAgICAgICAgICAgICAgXCJzdHJpa2V0aHJvdWdoXCIsXHJcbiAgICAgICAgICAgICAgXCJoZWFkaW5nMVwiLFxyXG4gICAgICAgICAgICAgIFwiaGVhZGluZzJcIixcclxuICAgICAgICAgICAgICBcImhlYWRpbmczXCIsXHJcbiAgICAgICAgICAgICAgXCJvbGlzdFwiLFxyXG4gICAgICAgICAgICAgIFwidWxpc3RcIixcclxuICAgICAgICAgICAgICBcImxpbmVcIl19XHJcbiAgICAgICAgICAgIGRlZmF1bHRBY3Rpb25zPXt0aGlzLmdldFRyYW5zbGF0ZWRBY3Rpb25zKGludGwpfVxyXG4gICAgICAgICAgICBodG1sPXtpc0xvYWRpbmcgPyBcIjxkaXY+PC9kaXY+XCIgOiBub3Rlcy5zdWJzdHIoMCwgTUFYX05PVEVfTEVOR1RIKX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9eyFpc0xvYWRpbmcgJiYgKGh0bWwgPT4ge1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgbm90ZXM6IGh0bWwuc3Vic3RyKDAsIE1BWF9OT1RFX0xFTkdUSCksXHJcbiAgICAgICAgICAgICAgICBldmVyRWRpdGVkOiB0cnVlXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgdGhpcy5hdXRvU2F2ZXIudHJpZ2dlckNoYW5nZSg1MDApO1xyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICAgIC8+XHJcbiAgICAgICAgICA8aHIvPlxyXG4gICAgICAgICAge2Vycm9yID9cclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXJyb3JcIj57ZXJyb3J9PC9wPiA6XHJcbiAgICAgICAgICAgIHNob3dMb2FkaW5nUHJvZ3Jlc3MgP1xyXG4gICAgICAgICAgICAgIDxzcGFuPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLmxvYWRpbmdcIiBkZWZhdWx0TWVzc2FnZT1cIkxhZGRhci4uLlwiLz48U3Bpbm5lciAvPjwvc3Bhbj4gOlxyXG4gICAgICAgICAgICAgIHNob3dTYXZpbmdQcm9ncmVzcyA/IDw+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImNvbW1vbi5zYXZpbmdcIiBkZWZhdWx0TWVzc2FnZT1cIlNwYXJhci4uLlwiLz4gJm5ic3A7IDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxTcGlubmVyIC8+XHJcbiAgICAgICAgICAgICAgPC8+IDpcclxuICAgICAgICAgICAgICB0aGlzLmlzTm90ZXNFZGl0ZWQoKSA/IFxyXG4gICAgICAgICAgICAgICAgPD4mbmJzcDs8Lz4gOlxyXG4gICAgICAgICAgICAgICAgICBldmVyRWRpdGVkID9cclxuICAgICAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZWRcIiBkZWZhdWx0TWVzc2FnZT1cIlNwYXJhZFwiLz4gOlxyXG4gICAgICAgICAgICAgICAgICAgIDw+Jm5ic3A7PC8+fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcbiAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBJbmplY3RlZEludGxQcm9wcyB9IGZyb20gJ3JlYWN0LWludGwnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcclxuaW1wb3J0IHsgV2Vla05vdGVib29rIH0gZnJvbSAnLic7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUm9vdFdlZWtOb3RlYm9vayAocHJvcHMgOiBJbmplY3RlZEludGxQcm9wcykge1xyXG4gICAgY29uc3Qge2ludGx9ID0gcHJvcHM7XHJcbiAgICByZXR1cm4gPExhbmd1YWdlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e2ludGx9fT5cclxuICAgICAgICAgICAgICA8V2Vla05vdGVib29rIC8+XHJcbiAgICAgICAgICAgPC9MYW5ndWFnZUNvbnRleHQuUHJvdmlkZXI+O1xyXG4gIH0iLCJleHBvcnQgKiBmcm9tICcuL3dlZWstbm90ZWJvb2snO1xyXG5leHBvcnQgKiBmcm9tICcuL3Jvb3Qtd2Vlay1ub3RlYm9vayc7XHJcbiIsImltcG9ydCB7RURTU3R1ZHlQbGFufSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcclxuaW1wb3J0IHsgRURTUGVyaW9kIH0gZnJvbSAnLi4vLi4vYXBpcy9lZHNjbGllbnQnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFZpZXdNb2RlbCB7XHJcbiAgICBzdWJqZWN0czogQXJyYXk8e1xyXG4gICAgICAgIG5hbWU6IHN0cmluZztcclxuICAgICAgICBhdEdvYWw6IHN0cmluZztcclxuICAgICAgICBzdEdvYWw6IHN0cmluZztcclxuICAgICAgICBmaW5hbEdvYWw6IHN0cmluZztcclxuICAgICAgICBzdHJhdGVnaWVzOiBzdHJpbmc7XHJcbiAgICB9PjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvciAoc3R1ZHlQbGFuczogRURTU3R1ZHlQbGFuW10pIHtcclxuICAgICAgICB0aGlzLnN1YmplY3RzID0gc3R1ZHlQbGFucy5tYXAoc3AgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwZXJpb2RHb2FscyA9IHNwLnBlcmlvZEdvYWxzXHJcbiAgICAgICAgICAgICAgICAubWFwKGcgPT4gKHtwZXJpb2Q6IG5ldyBFRFNQZXJpb2QoZy5wZXJpb2ROYW1lKSwgZ29hbDogZy5ncmFkZU5hbWV9KSk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzcC5jb3Vyc2VVbml0TmFtZSxcclxuICAgICAgICAgICAgICAgIGF0R29hbDogcGVyaW9kR29hbHMuZmlsdGVyICgoe3BlcmlvZH0pPT4gcGVyaW9kLnRlcm0gPT09ICdBVCcpLm1hcCgoe2dvYWx9KSA9PiBnb2FsKVswXSxcclxuICAgICAgICAgICAgICAgIHN0R29hbDogcGVyaW9kR29hbHMuZmlsdGVyICgoe3BlcmlvZH0pPT4gcGVyaW9kLnRlcm0gPT09ICdTVCcpLm1hcCgoe2dvYWx9KSA9PiBnb2FsKVswXSxcclxuICAgICAgICAgICAgICAgIGZpbmFsR29hbDogc3AuZmluYWxHb2FsR3JhZGUsXHJcbiAgICAgICAgICAgICAgICBzdHJhdGVnaWVzOiBzcC5zdHJhdGVneVRleHRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eSB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xyXG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxudHlwZSBBYmlsaXR5Q2VsbCA9IHsgdHlwZTogJ2FiaWxpdHknLCBuYW1lOiBzdHJpbmcgfTtcclxudHlwZSBDYXBhYkNlbGwgPSB7IHR5cGU6ICdjYXBhYmlsaXR5JywgbmFtZTogc3RyaW5nIH07XHJcbnR5cGUgVGVybUNlbGwgPSB7IHR5cGU6ICd0ZXJtJywgc2VsZWN0ZWQ6IGJvb2xlYW4gfTtcclxudHlwZSBDZWxsID0gQWJpbGl0eUNlbGwgfCBDYXBhYkNlbGwgfCBUZXJtQ2VsbDtcclxuXHJcbmV4cG9ydCBjbGFzcyBGdXR1cmVBYmlsaXRpZXNWaWV3TW9kZWwge1xyXG4gIGNvbHVtbkhlYWRlcnM6IHtuYW1lOiBzdHJpbmcsIHR5cGU6IHN0cmluZ31bXTtcclxuICB2dEh0czogc3RyaW5nW107XHJcbiAgY2FwYWJSb3dzOiBDZWxsW11bXTtcclxuXHJcbiAgY29uc3RydWN0b3IoZGF0YTogRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHlbXSkge1xyXG4gICAgLy8gV2lsbCBidWlsZCB0aGUgdG90YWwgeWVhcnNcclxuICAgIGNvbnN0IGZvcm1OYW1lczoge1tuYW1lOiBzdHJpbmddOiB0cnVlfSA9IHt9O1xyXG4gICAgZGF0YS5mb3JFYWNoKGEgPT4gYS5jYXBhYmlsaXRpZXMuZm9yRWFjaChjID0+IGZvcm1OYW1lc1tjLmZvcm1OYW1lXSA9IHRydWUpKTtcclxuICAgIGNvbnN0IHllYXJzID0gT2JqZWN0LmtleXMoZm9ybU5hbWVzKTtcclxuICAgIFxyXG4gICAgLy8gY29sdW1uSGVhZGVyc1xyXG4gICAgdGhpcy5jb2x1bW5IZWFkZXJzID0gW3tcclxuICAgICAgbmFtZTogXCJGcmFtdGlkc2bDtnJtw6VnYVwiLFxyXG4gICAgICB0eXBlOiBcImhlYWRlclwiXHJcbiAgICB9LCB7XHJcbiAgICAgIG5hbWU6IFwiT21yw6VkZVwiLFxyXG4gICAgICB0eXBlOiBcImhlYWRlclwiXHJcbiAgICB9XS5jb25jYXQoeWVhcnMubWFwKHllYXIgPT4gKHtcclxuICAgICAgbmFtZTogeWVhcixcclxuICAgICAgdHlwZTogJ3llYXInXHJcbiAgICB9KSkpO1xyXG5cclxuICAgIC8vIHZ0SHRzXHJcbiAgICB0aGlzLnZ0SHRzID0gZmxhdHRlbih5ZWFycy5tYXAoeWVhciA9PiBbXCJIVFwiLCBcIlZUXCJdKSk7XHJcblxyXG4gICAgLy8gY2FiYWJSb3dzXHJcbiAgICBjb25zdCByb3dzOiBDZWxsW11bXSA9IFtdO1xyXG4gICAgZGF0YS5mb3JFYWNoKGEgPT4ge1xyXG4gICAgICBsZXQgcm93OiBDZWxsW10gPSBbe3R5cGU6ICdhYmlsaXR5JywgbmFtZTogYS5hYmlsaXR5TmFtZX1dO1xyXG4gICAgICBjb25zdCBhZGRlZENhcGFicyA6IHtbbmFtZTogc3RyaW5nXTogdHJ1ZX0gPSB7fTtcclxuICAgICAgYS5jYXBhYmlsaXRpZXMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICBjb25zdCBjZWxsczogVGVybUNlbGxbXSA9IFtcclxuICAgICAgICAgIHt0eXBlOiAndGVybScsIHNlbGVjdGVkOiBjLmh0SGFzVmFsdWUgIT09IGZhbHNlfSxcclxuICAgICAgICAgIHt0eXBlOiAndGVybScsIHNlbGVjdGVkOiBjLnZ0SGFzVmFsdWUgIT09IGZhbHNlfVxyXG4gICAgICAgIF07XHJcbiAgICAgICAgLy9pZiAoYy5odEhhc1ZhbHVlIHx8IGMudnRIYXNWYWx1ZSkgZGVidWdnZXI7XHJcblxyXG4gICAgICAgIGlmICghYWRkZWRDYXBhYnNbYy5jYXBhYmlsaXR5TmFtZV0pIHtcclxuICAgICAgICAgIC8vaWYgKCFpc0ZpcnN0Q2FwYWJpbGl0eSkgcm93cy5wdXNoKHJvdyk7XHJcbiAgICAgICAgICBpZiAocm93Lmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgcm93cy5wdXNoKHJvdyk7XHJcbiAgICAgICAgICAgIHJvdyA9IFtdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYWRkZWRDYXBhYnNbYy5jYXBhYmlsaXR5TmFtZV0gPSB0cnVlO1xyXG4gICAgICAgICAgcm93LnB1c2goe3R5cGU6ICdjYXBhYmlsaXR5JywgbmFtZTogYy5jYXBhYmlsaXR5TmFtZX0pO1xyXG4gICAgICAgICAgY2VsbHMuZm9yRWFjaChjZWxsID0+IHJvdy5wdXNoKGNlbGwpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJvdykge1xyXG4gICAgICAgICAgLy9hZGRlZENhcGFic1tjLmNhcGFiaWxpdHlOYW1lXS5jb25jYXQoY2VsbHMpO1xyXG4gICAgICAgICAgY2VsbHMuZm9yRWFjaChjZWxsID0+IHJvdy5wdXNoKGNlbGwpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAocm93KSByb3dzLnB1c2gocm93KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuY2FwYWJSb3dzID0gcm93cztcclxuICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEVEU1N0dWRlbnRGdXR1cmVBYmlsaXR5IH0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2Vkcyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgRnV0dXJlQWJpbGl0aWVzVmlld01vZGVsIH0gZnJvbSAnLi9mdXR1cmUtYWJpbGl0aWVzLXZpZXdtb2RlbCc7XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGxvYWRpbmc6IGJvb2xlYW4sXHJcbiAgZGF0YTogRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHlbXSxcclxuICBlcnJvcjogc3RyaW5nIHwgbnVsbFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRnV0dXJlQWJpbGl0aWVzVGFibGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30sIFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxyXG4gICAgICBkYXRhOiBbXSxcclxuICAgICAgZXJyb3I6IG51bGxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICB0aGlzLmxvYWQoKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWQoKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBlbnYuZWRzQ2xpZW50LmdldFN0dWRlbnRGdXR1cmVBYmlsaXRpZXMoKTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRhdGEgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3IgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB2aWV3TW9kZWwgPSBuZXcgRnV0dXJlQWJpbGl0aWVzVmlld01vZGVsICh0aGlzLnN0YXRlLmRhdGEpO1xyXG4gICAgY29uc3Qge2NvbHVtbkhlYWRlcnMsIHZ0SHRzLCBjYXBhYlJvd3N9ID0gdmlld01vZGVsO1xyXG5cclxuICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICA8aDU+RnJhbXRpZHNmw7ZybcOlZ29yPC9oNT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYXJ0aWFsRWRpdFN0dWR5UGxhblZpZXdNb2RlXCI+XHJcbiAgICAgICAgPHRhYmxlIHN0eWxlPXt7IHdpZHRoOiAnMTAwJScgfX0gY2xhc3NOYW1lPVwic21hbGxGb250XCI+XHJcbiAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgIDx0cj57Y29sdW1uSGVhZGVycy5tYXAoKHsgbmFtZSwgdHlwZSB9LCBpKSA9PlxyXG4gICAgICAgICAgICAgIHR5cGUgPT09ICdoZWFkZXInID9cclxuICAgICAgICAgICAgICAgIDx0aCBrZXk9e2l9IHJvd1NwYW49ezJ9PntuYW1lfTwvdGg+IDpcclxuICAgICAgICAgICAgICAgIDx0aCBrZXk9e2l9IGNvbFNwYW49ezJ9PntuYW1lfTwvdGg+KX08L3RyPlxyXG4gICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAge3Z0SHRzLm1hcCgodnRIdCwgaSkgPT4gPHRoIGtleT17aX0+e3Z0SHR9PC90aD4pfVxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAge2NhcGFiUm93cy5tYXAoKHJvdywgaSkgPT4gPHRyIGtleT17aX0gY2xhc3NOYW1lPXsoTWF0aC5mbG9vcihpLzMpICUgMikgJiYgJ3RhYmxlT2RkJ30+XHJcbiAgICAgICAgICAgICAge3Jvdy5tYXAoKGNvbCwgaSkgPT4gY29sLnR5cGUgPT09ICdhYmlsaXR5JyA/XHJcbiAgICAgICAgICAgICAgICA8dGQga2V5PXtpfSByb3dTcGFuPXszfSBjbGFzc05hbWU9XCJnb2Fsc1N1YmplY3RcIj57Y29sLm5hbWV9PC90ZD4gOlxyXG4gICAgICAgICAgICAgICAgY29sLnR5cGUgPT09ICdjYXBhYmlsaXR5JyA/XHJcbiAgICAgICAgICAgICAgICAgIDx0ZCBrZXk9e2l9IGNsYXNzTmFtZT1cImdvYWxzU3ViamVjdFwiPntjb2wubmFtZX08L3RkPiA6XHJcbiAgICAgICAgICAgICAgICAgIGNvbC5zZWxlY3RlZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkIGtleT17aX0gY2xhc3NOYW1lPVwiZWRzU2VsZWN0ZWRcIj48ZGl2IGNsYXNzTmFtZT1cIm1hcmtlZEl0ZW1cIj48L2Rpdj48L3RkPiA6XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkIGtleT17aX0gLz4pfVxyXG4gICAgICAgICAgICA8L3RyPil9XHJcbiAgICAgICAgICA8L3Rib2R5PlxyXG4gICAgICAgIDwvdGFibGU+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+O1xyXG4gIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgVmlld01vZGVsIH0gZnJvbSAnLi9nb2Fscy12aWV3bW9kZWwnO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IEVEU1N0dWR5UGxhbiB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xyXG5pbXBvcnQgeyBGdXR1cmVBYmlsaXRpZXNUYWJsZSB9IGZyb20gJy4vZnV0dXJlLWFiaWxpdGllcy10YWJsZSc7XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGxvYWRpbmdTdHVkeVBsYW5zOiBib29sZWFuLFxyXG4gIHN0dWR5UGxhbnM6IEVEU1N0dWR5UGxhbltdLFxyXG4gIGVycm9yOiBzdHJpbmcgfCBudWxsXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBLU0dvYWxzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9LCBTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBsb2FkaW5nU3R1ZHlQbGFuczogZmFsc2UsXHJcbiAgICAgIHN0dWR5UGxhbnM6IFtdLFxyXG4gICAgICBlcnJvcjogbnVsbFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgdGhpcy5sb2FkKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkKCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7bG9hZGluZ1N0dWR5UGxhbnM6IHRydWV9KTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHN0dWR5UGxhbnMgPSBhd2FpdCBlbnYuZWRzQ2xpZW50LmdldFN0dWRlbnRHb2FscygpO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtzdHVkeVBsYW5zfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtlcnJvcn0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7bG9hZGluZ1N0dWR5UGxhbnM6IGZhbHNlfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB2aWV3TW9kZWwgPSBuZXcgVmlld01vZGVsKHRoaXMuc3RhdGUuc3R1ZHlQbGFucyk7XHJcbiAgICBjb25zdCBzaG93VGVybUdvYWxzID1cclxuICAgICAgICgnJytlbnYuY3VycmVudFVzZXIuc2Nob29sVHlwZSkudG9Mb3dlckNhc2UoKSAhPT0gXCJneW1uYXNpdW1cIjtcclxuXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIj5cclxuICAgICAgPGg0PlxyXG4gICAgICAgIHtMYE3DpWxgfVxyXG4gICAgICA8L2g0PlxyXG4gICAgICA8aHIgLz5cclxuICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInNtYWxsRm9udFwiPlxyXG4gICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgPHRoPntMYMOEbW5lYH08L3RoPlxyXG4gICAgICAgICAgICB7c2hvd1Rlcm1Hb2FscyAmJiA8dGg+e0xgSFRgfTwvdGg+fVxyXG4gICAgICAgICAgICB7c2hvd1Rlcm1Hb2FscyAmJiA8dGg+e0xgVlRgfTwvdGg+fVxyXG4gICAgICAgICAgICA8dGg+e0xgU2x1dG3DpWxgfTwvdGg+XHJcbiAgICAgICAgICAgIDx0aD57TGBTdHJhdGVnaWVyYH08L3RoPlxyXG4gICAgICAgICAgPC90cj5cclxuICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgIHt2aWV3TW9kZWwuc3ViamVjdHMubWFwKChzLCBpKSA9PlxyXG4gICAgICAgICAgPHRyIGtleT17cy5uYW1lfSBjbGFzc05hbWU9e2kgJSAyICYmIFwidGFibGVPZGRcIn0+XHJcbiAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJnb2Fsc1N1YmplY3RcIj57cy5uYW1lfTwvdGQ+XHJcbiAgICAgICAgICAgIHtzaG93VGVybUdvYWxzICYmIDx0ZCBjbGFzc05hbWU9XCJnb2Fsc1Rlcm1cIj57cy5hdEdvYWx9PC90ZD59XHJcbiAgICAgICAgICAgIHtzaG93VGVybUdvYWxzICYmIDx0ZCBjbGFzc05hbWU9XCJnb2Fsc1Rlcm1cIj57cy5zdEdvYWx9PC90ZD59XHJcbiAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJnb2Fsc0VuZFwiPntzLmZpbmFsR29hbH08L3RkPlxyXG4gICAgICAgICAgICA8dGQ+e3Muc3RyYXRlZ2llc308L3RkPlxyXG4gICAgICAgICAgPC90cj5cclxuICAgICAgICAgICl9XHJcbiAgICAgICAgPC90Ym9keT48L3RhYmxlPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGl2aWRlclwiIC8+XHJcbiAgICAgICAgPEZ1dHVyZUFiaWxpdGllc1RhYmxlIC8+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuIiwiXHJcbmV4cG9ydCBpbnRlcmZhY2UgS2VkTGVhcm5pbmdHb2Fsc0RhdGEge1xyXG4gIG1vZHVsZU5hbWU6IHN0cmluZ1xyXG4gIHN1YmplY3Q6IHtcclxuICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgY291cnNlOiB7XHJcbiAgICAgIG5hbWU6IHN0cmluZ1xyXG4gICAgICB1cmw6IHN0cmluZ1xyXG4gICAgfVxyXG4gIH1cclxuICBzdGVwPzogbnVtYmVyXHJcbiAgY29tbW9uVGFza3M6IEtlZExlYXJuaW5nVGFza1tdXHJcbiAgbGVhcm5pbmdHb2FsczogS2VkTGVhcm5pbmdHb2FsW11cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBLZWRMZWFybmluZ1Rhc2sge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHVybDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEtlZExlYXJuaW5nR29hbCB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHRhc2tzOiBLZWRMZWFybmluZ1Rhc2tbXTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldExlYXJuaW5nR29hbHNBbmRUYXNrcyhhcGlQYXRoOiBzdHJpbmcsIHBhZ2VJZDogc3RyaW5nKSB7XHJcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2ggKGAke2FwaVBhdGh9P25vZGVJRD0ke3BhZ2VJZH1gLCB7Y3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIn0pO1xyXG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xyXG4gIHJldHVybiBkYXRhIGFzIEtlZExlYXJuaW5nR29hbHNEYXRhO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgZ2V0TGVhcm5pbmdHb2Fsc0FuZFRhc2tzLCBLZWRMZWFybmluZ0dvYWxzRGF0YSB9IGZyb20gJy4uLy4uL2FwaXMva2VkLWxlYXJuaW5nZ29hbHMnO1xyXG5pbXBvcnQgeyBMZWFybmluZ01vZHVsZVRhc2ssIFRhc2tMaXN0IH0gZnJvbSAnLi4vY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL3Rhc2stbGlzdCc7XHJcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IExlYXJuaW5nR29hbCwgTGVhcm5pbmdHb2Fsc0xpc3QgfSBmcm9tICcuLi9jb3Vyc2Utdmlld2VyL3N1YmNvbXBvbmVudHMvbGVhcm5pbmctZ29hbHMtbGlzdCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGFwaVBhdGg6IHN0cmluZzsgLy8gXCIvNC41NjY3YzYzMTE1ZWQ2YzAzNzkwYTRjOGMvMTIuMWY5NWE2N2ExNWVlMzFlYTFjNDQ0N2IyLmpzb25cIlxyXG4gIHBhZ2VJZDogc3RyaW5nOyAvLyBzdi5QYWdlQ29udGV4dC5wYWdlSWRcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBkYXRhOiBLZWRMZWFybmluZ0dvYWxzRGF0YSB8IG51bGxcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExlYXJuaW5nVGFza3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBkYXRhOiBudWxsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRMZWFybmluZ0dvYWxzQW5kVGFza3MoXHJcbiAgICAgIHRoaXMucHJvcHMuYXBpUGF0aCxcclxuICAgICAgdGhpcy5wcm9wcy5wYWdlSWQpO1xyXG5cclxuICAgIHRoaXMuc2V0U3RhdGUoeyBkYXRhIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgaWYgKCF0aGlzLnN0YXRlLmRhdGEpIHJldHVybiA8ZGl2PjwvZGl2PjtcclxuICAgIGNvbnN0IHsgbW9kdWxlTmFtZSwgc3ViamVjdCwgY29tbW9uVGFza3MsIGxlYXJuaW5nR29hbHMsIHN0ZXAgfSA9IHRoaXMuc3RhdGUuZGF0YTtcclxuICAgIC8vY29uc3Qgc3RlcCA9IHVuZGVmaW5lZDsgLy8gbW9kdWxlTmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJzdGVnIFwiKSAmJiBwYXJzZUludChtb2R1bGVOYW1lLnN1YnN0cig1KSk7XHJcbiAgICBjb25zdCBjb21tb25UYXNrc0xpc3Q6IExlYXJuaW5nTW9kdWxlVGFza1tdID1cclxuICAgICAgY29tbW9uVGFza3MubWFwKHRhc2sgPT4gKHtcclxuICAgICAgICBpZDogdGFzay5pZCxcclxuICAgICAgICBuYW1lOiB0YXNrLm5hbWUsXHJcbiAgICAgICAgdXJsOiB0YXNrLnVybCxcclxuICAgICAgICBjb3Vyc2VOYW1lOiBzdWJqZWN0Lm5hbWUsXHJcbiAgICAgICAgbGVhcm5pbmdHb2FsOiBzdGVwICYmIGxlYXJuaW5nR29hbHMubGVuZ3RoID4gMCA/IGAke21vZHVsZU5hbWV9IC0gw7Z2ZXJncmlwYW5kZWAgOiBtb2R1bGVOYW1lXHJcbiAgICAgIH0pKTtcclxuICAgICAgXHJcbiAgICBjb25zdCBsZWFybmluZ0dvYWxzTGlzdDogTGVhcm5pbmdHb2FsW10gPSBsZWFybmluZ0dvYWxzLm1hcChsZWFybmluZ0dvYWwgPT4gKHtcclxuICAgICAgbmFtZTogbGVhcm5pbmdHb2FsLm5hbWUsXHJcbiAgICAgIGxlYXJuaW5nVGFza3M6IGxlYXJuaW5nR29hbC50YXNrcy5tYXAodGFzayA9PiAoe1xyXG4gICAgICAgIGlkOiB0YXNrLmlkLFxyXG4gICAgICAgIG5hbWU6IHRhc2submFtZSxcclxuICAgICAgICB1cmw6IHRhc2sudXJsLFxyXG4gICAgICAgIGNvdXJzZU5hbWU6IHN1YmplY3QubmFtZSxcclxuICAgICAgICBsZWFybmluZ0dvYWw6IGxlYXJuaW5nR29hbC5uYW1lXHJcbiAgICAgIH0pKVxyXG4gICAgfSkpO1xyXG5cclxuICAgIGlmIChzdGVwKSB7XHJcbiAgICAgIGNvbW1vblRhc2tzTGlzdC5mb3JFYWNoKHRhc2sgPT4gdGFzay5zdGVwID0gc3RlcCk7XHJcbiAgICAgIGxlYXJuaW5nR29hbHNMaXN0LmZvckVhY2gobGcgPT4gbGcubGVhcm5pbmdUYXNrcy5mb3JFYWNoKHRhc2sgPT4gdGFzay5zdGVwID0gc3RlcCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiA8TGVhcm5pbmdHb2Fsc0xpc3RcclxuICAgICAgY29tbW9uVGFza3M9e2NvbW1vblRhc2tzTGlzdH1cclxuICAgICAgbGVhcm5pbmdHb2Fscz17bGVhcm5pbmdHb2Fsc0xpc3R9IC8+O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VDb250ZXh0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XHJcbmltcG9ydCB7SW5qZWN0ZWRJbnRsUHJvcHN9IGZyb20gJ3JlYWN0LWludGwnO1xyXG5pbXBvcnQgeyBDYWxlbmRhciB9IGZyb20gJy4vaW5kZXgnO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBJbmplY3RlZEludGxQcm9wcyB7XHJcbiAgZmlyc3REYXk6IG1vbWVudC5Nb21lbnQ7XHJcbiAgbnVtRGF5czogbnVtYmVyO1xyXG4gIGluaXRpYWxTdGFydEhvdXI6IG51bWJlcjtcclxuICBpbml0aWFsRW5kSG91cjogbnVtYmVyO1xyXG4gIGluaXRpYWxab29tOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDYWxlbmRhclNlbGYgKHByb3BzIDogUHJvcHMpIHtcclxuICBjb25zdCB7aW50bH0gPSBwcm9wcztcclxuICByZXR1cm4gPExhbmd1YWdlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e2ludGx9fT5cclxuICAgICAgICAgICAgPENhbGVuZGFyIHsuLi57Li4ucHJvcHMsIGVudn19Lz5cclxuICAgICAgICAgPC9MYW5ndWFnZUNvbnRleHQuUHJvdmlkZXI+O1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VDb250ZXh0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XHJcbmltcG9ydCB7SW5qZWN0ZWRJbnRsUHJvcHN9IGZyb20gJ3JlYWN0LWludGwnO1xyXG5pbXBvcnQgeyBDYWxlbmRhciB9IGZyb20gJy4vaW5kZXgnO1xyXG5pbXBvcnQgeyBUdXRvcmFibGVDb21wb25lbnQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvdHV0b3JhYmxlLWNvbXBvbmVudCc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIEluamVjdGVkSW50bFByb3BzIHtcclxuICAgIGZpcnN0RGF5OiBtb21lbnQuTW9tZW50O1xyXG4gICAgbnVtRGF5czogbnVtYmVyO1xyXG4gICAgaW5pdGlhbFN0YXJ0SG91cjogbnVtYmVyO1xyXG4gICAgaW5pdGlhbEVuZEhvdXI6IG51bWJlcjtcclxuICAgIGluaXRpYWxab29tOiBudW1iZXI7XHJcbiAgfVxyXG5cclxuICBleHBvcnQgZnVuY3Rpb24gQ2FsZW5kYXJUdXRvcmVkKHByb3BzOiBQcm9wcykge1xyXG4gICAgY29uc3Qge2ludGx9ID0gcHJvcHM7XHJcbiAgICByZXR1cm4gPExhbmd1YWdlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e2ludGx9fT5cclxuICAgIDxUdXRvcmFibGVDb21wb25lbnRcclxuICAgICAgdHV0b3JlZD17dHJ1ZX1cclxuICAgICAgY3JlYXRlQ29tcG9uZW50PXtlbnYgPT5cclxuICAgICAgICA8Q2FsZW5kYXJcclxuICAgICAgICAgIGtleT17ZW52LmN1cnJlbnRVc2VyLm1haWx9XHJcbiAgICAgICAgICB7Li4ucHJvcHN9XHJcbiAgICAgICAgICBlbnY9e2Vudn0gLz5cclxuICAgICAgfVxyXG4gICAgLz48L0xhbmd1YWdlQ29udGV4dC5Qcm92aWRlcj47XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7V2Vla1BsYW5uZXJ9IGZyb20gJy4vd2Vla3BsYW5uZXInO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0ICcuLi8uLi9yZXBvcy91c2VyLXRhc2tzLXJlcG8nO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcclxuaW1wb3J0IHtJbmplY3RlZEludGxQcm9wc30gZnJvbSAncmVhY3QtaW50bCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBJbmplY3RlZEludGxQcm9wc3tcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFdlZWtQbGFubmVyU2VsZiAocHJvcHM6IFByb3BzKSB7XHJcbiAgY29uc3Qge2ludGx9ID0gcHJvcHM7XHJcbiAgcmV0dXJuIDxMYW5ndWFnZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3tpbnRsfX0+XHJcbiAgICAgICAgICA8V2Vla1BsYW5uZXIgZW52PXtlbnZ9IHZpZXdDb3Vyc2VVcmw9e2NmZy5LRURfQ09VUlNFX1ZJRVdFUl9VUkx9IC8+XHJcbiAgICAgICAgIDwvTGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyPjtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7V2Vla1BsYW5uZXJ9IGZyb20gJy4vd2Vla3BsYW5uZXInO1xyXG5pbXBvcnQgeyBUdXRvcmFibGVDb21wb25lbnQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvdHV0b3JhYmxlLWNvbXBvbmVudCc7XHJcbmltcG9ydCB7SW5qZWN0ZWRJbnRsUHJvcHN9IGZyb20gJ3JlYWN0LWludGwnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgSW5qZWN0ZWRJbnRsUHJvcHMge31cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBXZWVrUGxhbm5lclR1dG9yZWQgKHByb3BzOiBQcm9wcykge1xyXG4gIGNvbnN0IHtpbnRsfSA9IHByb3BzO1xyXG4gIFxyXG4gIHJldHVybiA8TGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7aW50bH19PlxyXG4gICAgPFR1dG9yYWJsZUNvbXBvbmVudFxyXG4gICAgICB0dXRvcmVkPXt0cnVlfVxyXG4gICAgICBjcmVhdGVDb21wb25lbnQ9e2VudiA9PlxyXG4gICAgICAgIDxXZWVrUGxhbm5lclxyXG4gICAgICAgICAga2V5PXtlbnYuY3VycmVudFVzZXIubWFpbH1cclxuICAgICAgICAgIGVudj17ZW52fVxyXG4gICAgICAgICAgdmlld0NvdXJzZVVybD17Y2ZnLktFRF9DT1VSU0VfVklFV0VSX1VSTH0vPlxyXG4gICAgICB9XHJcbiAgICAvPlxyXG4gIDwvTGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyPjtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7S1NUZXJtUGxhbm5lcn0gZnJvbSAnLi90ZXJtcGxhbm5lcic7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VDb250ZXh0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XHJcbmltcG9ydCB7SW5qZWN0ZWRJbnRsUHJvcHN9IGZyb20gJ3JlYWN0LWludGwnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEtTVGVybVBsYW5uZXJTZWxmIChwcm9wcyA6IEluamVjdGVkSW50bFByb3BzKSB7XHJcbiAgY29uc3Qge2ludGx9ID0gcHJvcHM7XHJcbiAgcmV0dXJuIDxMYW5ndWFnZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3tpbnRsfX0+XHJcbiAgICAgICAgICAgIDxLU1Rlcm1QbGFubmVyIGVudj17ZW52fSB0dXRvcmVkPXtmYWxzZX0gaW5pdGlhbERhdGU9e25ldyBEYXRlKCl9Lz5cclxuICAgICAgICAgPC9MYW5ndWFnZUNvbnRleHQuUHJvdmlkZXI+O1xyXG59XHJcbiIsImltcG9ydCAnLi4vLi4vZ2xvYmFsLXNldHRlcnMvc2V0LWFsbCc7XHJcblxyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmVudi5iZWFyZXJQcm92aWRlci5nZXRCZWFyZXIoKTsgLy8gU3RhcnQgZ2V0dGluZyBiZWFyZXIgYXMgc29vbiBhcyBwb3NzaWJsZS5cclxuZW52Lmdvb2dsZVRva2VuUHJvdmlkZXIuZ2V0QmVhcmVyKCk7IC8vIFN0YXJ0IGdldHRpbmcgZ29vZ2xlIGJlYXJlciBhcyBzb29uIGFzIHBvc3NpYmxlLlxyXG5cclxuLy8gQ29tbW9uIGNvbXBvbmVudHNcclxuZXhwb3J0IHtDYWxlbmRhclNlbGYgYXMgQ2FsZW5kYXIsfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2NhbGVuZGFyL2NhbGVuZGFyLXNlbGYnO1xyXG5leHBvcnQge0NhbGVuZGFyVHV0b3JlZH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jYWxlbmRhci9jYWxlbmRhci10dXRvcmVkJztcclxuZXhwb3J0IHtXZWVrUGxhbm5lclNlbGYgYXMgV2Vla1BsYW5uZXJ9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvd2Vla3BsYW5uZXItc2VsZic7XHJcbmV4cG9ydCB7V2Vla1BsYW5uZXJUdXRvcmVkfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXR1dG9yZWQnO1xyXG5leHBvcnQge0xhdGVzdEFzc2Vzc21lbnRzfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2xhdGVzdC1hc3Nlc3NtZW50cy9sYXRlc3QtYXNzZXNzbWVudHMnO1xyXG5leHBvcnQge0xlYXJuaW5nVGFza3N9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbGVhcm5pbmctdGFza3MnO1xyXG5leHBvcnQge1Jvb3RXZWVrTm90ZWJvb2sgYXMgV2Vla05vdGVib29rfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL3dlZWstbm90ZWJvb2snO1xyXG5leHBvcnQge1R1dG9yc1NlbGVjdH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy90dXRvcnMtc2VsZWN0L3R1dG9ycy1zZWxlY3QnO1xyXG5cclxuLy8gS0cgb25seVxyXG5leHBvcnQge0tHVGVybVBsYW5uZXJTZWxmIGFzIEtHVGVybVBsYW5uZXJ9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMva2ctdGVybXBsYW5uZXIva2ctdGVybXBsYW5uZXItc2VsZic7XHJcbmV4cG9ydCB7S0dUZXJtUGxhbm5lclR1dG9yZWR9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMva2ctdGVybXBsYW5uZXIva2ctdGVybXBsYW5uZXItdHV0b3JlZCc7XHJcbmV4cG9ydCB7TGlzdENvdXJzZXN9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvbGlzdC1jb3Vyc2VzL2xpc3QtY291cnNlcyc7XHJcblxyXG4vLyBLUyBvbmx5XHJcbmV4cG9ydCB7S1NUZXJtUGxhbm5lclNlbGYgYXMgS1NUZXJtUGxhbm5lcn0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9rcy10ZXJtcGxhbm5lci9rcy10ZXJtcGxhbm5lci1zZWxmJztcclxuZXhwb3J0IHtLU1Rlcm1QbGFubmVyVHV0b3JlZH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9rcy10ZXJtcGxhbm5lci9rcy10ZXJtcGxhbm5lci10dXRvcmVkJztcclxuZXhwb3J0IHtLU0dvYWxzfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2tzLWdvYWxzL2dvYWxzJ1xyXG5leHBvcnQge015Q291cnNlc30gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9teS1jb3Vyc2VzL215LWNvdXJzZXMnOyIsImltcG9ydCAqIGFzIGtlZENvbXBvbmVudHMgZnJvbSAnLi9rZWRjb21wb25lbnRzJztcclxuaW1wb3J0IHsgc2V0dXBJbnRsIH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvU2V0dXBMYW5ndWFnZUludGwnO1xyXG5pbXBvcnQgeyBpbmplY3RJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XHJcblxyXG5jb25zdCBpbnRsQ29tcG9uZW50cyA9IHt9O1xyXG5PYmplY3Qua2V5cyhrZWRDb21wb25lbnRzKS5mb3JFYWNoKGsgPT4ge1xyXG4gICAgaW50bENvbXBvbmVudHNba10gPSBzZXR1cEludGwoaW5qZWN0SW50bChrZWRDb21wb25lbnRzW2tdKSk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHMgPSB7Li4uaW50bENvbXBvbmVudHN9OyIsImltcG9ydCBLRUQgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQnO1xyXG5pbXBvcnQge2NvbXBvbmVudHN9IGZyb20gJy4va2VkY29tcG9uZW50cy5jbGllbnQnO1xyXG5LRUQuY29tcG9uZW50cyA9IHsuLi5LRUQuY29tcG9uZW50cywgLi4uY29tcG9uZW50c307XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=