var kedcomponents=function(e){function t(t){for(var r,i,o=t[0],u=t[1],c=t[2],d=0,h=[];d<o.length;d++)i=o[d],a[i]&&h.push(a[i][0]),a[i]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(l&&l(t);h.length;)h.shift()();return s.push.apply(s,c||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var u=n[o];0!==a[u]&&(r=!1)}r&&(s.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={5:0},s=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],u=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var l=u;return s.push([295,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return i}),n.d(t,"k",function(){return u}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return l}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return h}),n.d(t,"o",function(){return m}),n.d(t,"n",function(){return p}),n.d(t,"l",function(){return f}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return y}),n.d(t,"m",function(){return k});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function i(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var o=[].concat;function u(e){return o.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function l(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var i=t[r],o=n[r];return i===o?0:null==i?-1:null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function h(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function m(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function p(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function f(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],i=t(s),o=n[i];o?o.push(s):n[i]=[s]}return n}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function b(e,t){var n,a,s={};try{for(var i=r.h(t),o=i.next();!o.done;o=i.next()){var u=o.value;u in e&&(s[u]=e[u])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(n)throw n.error}}return s}function y(e,t){var n=v(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function k(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var i=n[a];if(r[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(36);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(27);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,function(e,t,n){"use strict";var r=n(3),a=n(4),s=n(18),i=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(20);function u(e,t){return o.a[e].relationships[t]}function c(e,t){var n=function(e){var t=function(e){return!0};return e.from?l(t,function(t){return t.dateTime>=e.from}):e.to?l(t,function(t){return t.dateTime<e.to}):e.ids?l(t,function(t){return e.ids.includes(t.id)}):e.name?l(t,function(t){return t.name===e.name}):e.tags?l(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function l(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function h(e){return"clear-branch"===e.op||"merge"===e.op}var m=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var s=a[r];localStorage.setItem("cache-bust-"+n+"-"+s,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+u(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),p=n(14);function f(e,t){for(var n=Object.keys(t),r=e,s=0,i=n;s<i.length;s++){var o=i[s];r===e&&(r=a.a({},e));var u=t[o];if(u&&"object"==typeof u){var c=Object.keys(u).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var l=function(e){var t=u[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var s=0,i=n;s<i.length;s++){var c=i[s];a.includes(c)||a.push(c)}break;case"$remove":var l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!l.includes(e)})}},d=0,h=c;d<h.length;d++){l(h[d])}continue}}r[o]=u}return r}function g(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,s=Object.keys(t),i=a.a({},e),o=0,u=s;o<u.length;o++){var c=u[o],l=t[c];if(l&&"object"==typeof l){var d=Object.keys(l).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var h=function(e){var t=l[e];switch(e){case"$unset":r?delete i[c]:i[c]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var s=o.$remove;Array.isArray(s)&&(o.$remove=s.filter(function(e){return!n.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(n):n.slice(),o.$add=d;break;case"$remove":var o,u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!u.includes(e)}),0===o.$add.length&&delete o.$add),s=(s=o.$remove)?s.concat(u):u.slice(),o.$remove=s}},m=0,p=d;m<p.length;m++){h(p[m])}continue}}i[c]=l}return i}var v=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(s=r[n]).op||s.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==s.op||s.targetBranchId&&s.branchId!==this.query.branchId&&s.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===s.op&&(s.deltaDoc.tags&&this.query.tags||s.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:i=this.getDataWithMutationsApplied(e,!1,this.data),this.data=i,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,s=this.includes,i=this.query,o=i.hasEdgesFrom?[].concat(i.hasEdgesFrom||[]):[],c=i.tags?[].concat(i.tags||[]):[];switch(t.op){case"update":return Object(p.e)(e,function(e){if(e.id===t.id){var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return s.forEach(function(r){var s,i=e[r];if(i){var o=Object(p.e)(i,function(e){if(e.id!==t.id)return e;var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==i&&(e=a.a({},e,((s={})[r]=o,s)))}}),e});case"add-related":if(r===t.table&&-1!==s.indexOf(t.graphProp))return Object(p.e)(e,function(e){var r;if(e.id!==t.id)return e;var s=a.a({},t.relatedDoc);return n&&(s.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([s]),r))});if(i.hasEdgesFrom&&o.includes(t.id)&&r===u(t.table,t.graphProp)){if(!i.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return i.ids&&i.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==s.indexOf(t.graphProp)?Object(p.e)(e,function(e){var r,s=e[t.graphProp];return s?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?s.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):s.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):i.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(i.include){var l=s.map(function(e){return{label:e,table:u(r,e)}}).filter(function(e){return e.table===t.table});if(l.length>0)return Object(p.e)(e,function(e){return l.forEach(function(r){var s,i=r.label,o=e[i];o&&(e=a.a({},e,((s={})[i]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),s)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),b=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new i(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return v.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesFrom",e)},t.prototype.hasEdgesTo=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesTo",e)},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:m.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new s.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(32).a),y=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===v.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var s=a.find(function(t){return o.a[r.table].relationships[t]===e});if(s){for(var i={},u=0,l=r.data;u<l.length;u++){var d=l[u];c(t,d[s]).forEach(function(e){return i[e.id]=e})}var h=Object.keys(i).map(function(e){return i[e]});return t.ids.every(function(e){return h.some(function(t){return t.id===e})})?{value:h}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var m=c(t,r.data);return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}},s=0,i=this.queries;s<i.length;s++){var u=a(i[s]);if("object"==typeof u)return u.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,s=this.findQuery(n,r);s?s.timeoutHandle&&(clearTimeout(s.timeoutHandle),s.timeoutHandle=null):(s=new v(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(s)),s.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,s=(n.repo,this.findQuery(r,a));s&&(s.unsubscribe(e),0===s.subscriptions.length&&(s.timeoutHandle=setTimeout(function(){0===s.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==s}))},this.queries.length>50?500:3e5)))},e}(),k=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return h(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return u(e,t)===r.table}):!!h(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return u(e,t)})).some(function(e){return u(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),s=e.length,i=function(t){var s=e[t];if("update"===s.op){var i=r.findIndex(function(e){return"update"===e.op&&e.branchId===s.branchId&&e.id===s.id});i>=0&&(n[t]=a.a({},s,{deltaDoc:g(s.deltaDoc,r[i].deltaDoc)}),r.splice(i,1))}},o=0;o<s;++o)i(o);return n.concat(r)},e}(),w=n(37);function E(e,t,n,r,s,i){for(var o=function(n){switch(n.op){case"add-related":i||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:s}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(i||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:s,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((u=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var o=t[u];t=t.slice(0,u).concat([a.a({},o,{$meta:r?"removing":"persisted"})],t.slice(u+1))}else t=t.slice(0,u).concat(t.slice(u+1));break;case"update":if(n.branchId!==e)return"continue";var u;if((u=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!i)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[s],$meta:r?"adding":"persisted"}].concat(t);else{var c=t[u],l=c.contributors.slice();l.includes(s)||l.push(s);var d=g(c.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:l,$meta:r?"updating":"persisted"}].concat(t.slice(0,u),t.slice(u+1)):t.slice(0,u).concat(t.slice(u+1))}}},u=0,c=n;u<c.length;u++){var l=o(c[u]);if("object"==typeof l)return l.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var s=a[r],i=this.lookup[s];if(i.value){var o=E(i.query.branchId,i.value,e,n,this.getUserDisplayName(),!!i.query.tags);null===o&&(n||i.fetch()),o!==i.value&&(i.optimisticValue=o,n||(i.value=o),i.notify(o))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new S(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),S=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=s.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(s.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),C=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new w.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),s=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),m.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(k.merge(e,s),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return i=a.sent(),this.persistedVersion.dispatchError(i),i&&i.name&&i.name.startsWith("http4")?(this.dispatchError(i,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(i,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new s.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),D=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(w.a),N=function(){function e(e,t,n,r,a,s,i,u){var c=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=s,this.writer=i,this.cacheOptimized=u,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new k),s||(this.querySet=new y(this.mutationQueue)),i||(this.writer=new C(this.mutationQueue,this.querySet,e,t,n)),Object.keys(o.a).forEach(function(e){var t=new b(c,e,r||{});u&&(t=t.cacheOptimized()),c[e]=t}),this.deltas=new D(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new b(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var O=n(5),M=n(7);n.d(t,"c",function(){return P}),n.d(t,"d",function(){return x}),n.d(t,"b",function(){return I}),n.d(t,"a",function(){return L});var P=new N(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),x=Object(O.i)(M.b.KED_REALM),I={standardSchool:P.schools.name("standard").cacheOptimized().single(),get mySchool(){return P.schools.name(r.a.currentUser.school).cacheOptimized().single()}},L={getBranchId:function(e,t){return e.switchMap(function(e){return P.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return P.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return P.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(O.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return P.courseBlocks.tags(e).idsOnly().concat(P.courseContents.tags(e).idsOnly()).concat(P.courseTabs.tags(e).idsOnly()).concat(P.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.label,n=void 0===t?"":t;return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ",n)}},function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(15);n.d(t,"a",function(){return i}),n.d(t,"c",function(){return u}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return l}),n.d(t,"b",function(){return h}),n.d(t,"f",function(){return m});var i=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function u(e,t){return o(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function l(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,i=Object(s.b)(location.search),o=r.a({},i,{role:t,school:n}),u=Object(s.a)(o);a?location.href=""+a+u:(location.hash="#",location.search=u)}};function h(e){d.actAs(e)}function m(e,t){var n,a,o=Object(s.b)(location.search),u={};try{for(var c=r.h(i),l=c.next();!l.done;l=c.next()){var d=l.value;o[d]&&(u[d]=o[d])}}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var h=Object(s.a)(r.a({},u,t)),m=e.indexOf("#");return m>=0?""+e.substr(0,m)+h+e.substr(m):""+e+h}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return u});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function u(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],i=t(s);i!==s&&(n===e&&(n=e.slice()),n[r]=i)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],i=t[1];return a[n?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(14),s=n(29),i=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,i){return r.b(this,void 0,void 0,function(){var o,u,c,l,d,h,m,p,f,g,v;return r.d(this,function(b){switch(b.label){case 0:return i&&"no-cache"===i.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),c=(u=this).authHeader,l=u.tokenInfo,d=u.bearerProvider,c||l||!d?[3,2]:(h=this,[4,d.getBearer()]);case 1:h.tokenInfo=l=b.sent(),b.label=2;case 2:return l?l.expires<Date.now()?(console.log("Token expired. Refresh it:"),m=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:m.tokenInfo=l=b.sent(),b.label=4;case 4:c="Bearer "+l.token,b.label=5;case 5:return c&&(n.Authorization=c),p=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 6:return 401==(f=b.sent()).status&&this.bearerProvider?(g=f.headers.get("www-authenticate"),console.log("Got "+f.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(v=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return v.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 8:f=b.sent(),b.label=9;case 9:return[2,f]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,s,o,u){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=u,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),u=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var l=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return h}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return u}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return i}),n.d(t,"c",function(){return l});var d=function(){function e(e,t,n){this.http=new i(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=u.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([u.sent()])));case 3:return[4,s.json()];case 4:return[2,u.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new h,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=l.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(l,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),h=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,i=e.backgroundColor,o=e.progressColor,u=[];if(n>s)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var c=1;c<=n;c++)u.push(a.createElement("svg",{key:c},a.createElement("circle",{className:"circle-chart-background",fill:c>r?i:o,cx:"8",cy:"8",r:"8"})));return u},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return i});var i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,i=t.className,o=t.children,u=t.headerClassName,c=t.contentClassName,l=t.displayProgress,d=t.progressData,h=t.inactivated,m=t.inactivatedRender,p=this.state.headerOpen;return h?"titleAndChildren"===m?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,n),a.createElement(a.Fragment,null,o)):a.createElement(a.Fragment,null,o):a.createElement("div",{className:(i||"")+" openClose"+(p?" open":"")},a.createElement("div",{className:"openHeader"+(u?" "+u:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),l&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(c?" "+c:"")},o))},t}(a.Component)},function(e){e.exports=JSON.parse('{"a":{"branches":{"accessClaimTypes":["role","schoolRole","email"],"sharingAccessPerRole":{"USER":{"email":["*"],"schoolRole":["*"],"role":["*"]}},"relationships":{"parents":"branches","approvedChildren":"branches"},"isPublic":true},"global":{"accessClaimTypes":["role","schoolRole"],"relationships":{"courseInstances":"courseInstances"},"isPublic":true},"courseInstances":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","blocks":"courseBlocks","tabs":"courseTabs"},"isPublic":true},"courseBlocks":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","tabs":"courseTabs","tasks":"tasks"},"isPublic":true},"courseTabs":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","contents":"courseContents"},"isPublic":true},"courseContents":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"tasks":"tasks"},"isPublic":true},"weekplans":{"accessClaimTypes":["email","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"isPublic":false},"weekplans-ks":{"accessClaimTypes":["email","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"isPublic":false},"usertasks":{"accessClaimTypes":["email","schoolRole","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"schoolRole":["{school}/EMPLOYEE:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{"task":"tasks","course":"courses"},"isPublic":false},"userhiddencourses":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false},"usercalendarvisibility":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false},"subjects":{"relationships":{"courseTemplates":"courses","abilities":"abilities"},"isPublic":true},"schools":{"accessClaimTypes":["role","schoolRole"],"relationships":{"courses":"courses","activeCourses":"courses"},"isPublic":true},"courses":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]}},"defaultAcl":["schoolRole:{school}/EMPLOYEE:*"],"relationships":{"templateChain":"courses","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","abilities":"abilities","images":"images","tasks":"tasks"},"isPublic":true},"tasks":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]}},"defaultAcl":["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],"relationships":{"knowledgeRequirements":"knowledge-requirements","centralContent":"central-content","abilities":"abilities"},"isPublic":true},"images":{"accessClaimTypes":["role","schoolRole","email"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]},"USER":{"email":["{email}:*"]}},"isPublic":true},"central-content":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"]},"knowledge-requirements":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"],"isPublic":true},"abilities":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"],"isPublic":true},"notes":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false}}}')},function(e,t,n){"use strict";var r=n(4),a=n(18),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=n(14);function o(e){e.resources||(e.resources=[])}function u(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var l=JSON.parse(c),d=l.time,h=l.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=h)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return u(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return u(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var m=new s,p=Date.now(),f=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,m.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-p>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[r.sent()]),m.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},v=function(e){function t(t,n,r){var a="string"!=typeof n?n:new f(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return m}),n.d(t,"b",function(){return f}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return v})},,function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return u}),n.d(t,"a",function(){return c});var r=n(1),a=n(6),s=n.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e,t){var n=null;n=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var r=s()(n.toString(),"YYYY");return 1!=r.week()&&(r=r.clone().add(1,"week")),t?[s()(r.clone()).week(32).startOf("week"),s()(r.clone()).week(51).endOf("week")]:[s()(r.clone()),s()(r.clone()).week(25).endOf("week")]}function u(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";var r=n(61);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b})},,,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(30).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(46),i=n(32),o=n(45),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,i){r=!0,e=a,t=s,s&&n?n(null,s,i):n&&n(a,null,i)});if(r){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,u=s.observer;return i.push(a),n=u,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],i={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,i,o){if(a=o,r&&(r.unsubscribe(),r=null),i)t(null,i,s);else try{var u=e(n);u&&"function"==typeof u.subscribe?r=u.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(u,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);u.prototype.map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(46),i=n(30),o=n(29),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);u.prototype._map=Object(s.a)(u)},function(e,t,n){"use strict";var r=n(37);n.d(t,"a",function(){return r.b}),n.d(t,"b",function(){return r.c})},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(38),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(56),s=n(3),i=n(6),o=n.n(i),u=n(83),c=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(u.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(o()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return o()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),l=n(5),d=n(41);n.d(t,"b",function(){return h}),n.d(t,"a",function(){return m});var h=s.a.userTasksRepo,m=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,i,u;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,c.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,i=o()(s).week(),[2,{from:(u=Object(d.a)(o()(s).year(),i)).notBefore,to:u.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,u,c,l;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,i=a(),u=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},u,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:o()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:o()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return c=r.sent(),0===(l=c.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&l.push(e),[4,this.update(l,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(r){switch(r.label){case 0:return(n=this.persistedState)?[3,2]:[4,c.load(this.options.user)];case 1:n=r.sent(),r.label=2;case 2:return(a=new c(n)).weekDate=t?o()(e).valueOf():o()(e).startOf("week").valueOf(),a.save(),this.persistedState=a,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(l.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new l.b("email",t.getCurrentUser().mail,"S"),new l.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);h||(h=s.a.userTasksRepo=new m(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n(31),n(30);var r=n(32);n.d(t,"a",function(){return r.a});var a=n(29);n.d(t,"b",function(){return a.a});var s=n(45);n.d(t,"c",function(){return s.a})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,u=e.title;return s.createElement("div",{title:u||Object(i.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"c",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return u});var r=n(6),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function i(e){var t=a()(e).add(1,"week");return e.week()===e.weeksInYear()&&t.year()===e.year()?{adjusted:!0,nextDate:a()(e.year()+1+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function o(e){var t=a()(e).add(-1,"week");return 2===e.week()&&t.year()!==e.year()?{adjusted:!0,nextDate:a()(e.year()+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function u(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},,function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(23),i=n(6),o=n.n(i);var u=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),c=n(2),l=n(54),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var h,m=function(){function e(t,n,s,i){var o=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=i;var u=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){u(e)&&(o[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),i={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))u(o);function u(t){Object.keys(t).forEach(function(o){!s.hasOwnProperty(o)&&n(o)&&(s[o]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var u=JSON.stringify(r.g([o],n)),c=i[u];if(void 0!==c){if(c.promise)throw c.promise;if(c.error)throw c.error;if(c.timeout>Date.now())return c.value}try{var l=t[o].apply(e,n).then(function(e){i[u]={timeout:Date.now()+a,value:e}}).catch(function(e){i[u]={timeout:Date.now()+a,error:e}});throw i[u]={timeout:Date.now()+a,promise:l},l}catch(e){if(e.then)throw e;i[u]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:u})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw o=u.sent(),console.error("Error from EDS: "+o),new Error(Object(c.a)(h||(h=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,u,c,d,h,m,p;return r.d(this,function(r){switch(e){case"en_sin":return[2,l.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,l.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=Object(s.d)(t,!0),i=Object(s.d)(t,!1),u=a[0],c=i[0],d=a[1],h=i[1],m={startDate:new Date(u.year(),u.month(),u.date()).toDateString(),endDate:new Date(u.year(),d.month(),d.date()).toDateString()},p={startDate:new Date(c.year(),c.month(),c.date()).toDateString(),endDate:new Date(c.year(),h.month(),h.date()).toDateString()},[2,{firstTerm:m,secondTerm:p,holidays:n}]}return[2]})})},e}(),p=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new u(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new u({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(38),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},,,function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Minska indrag",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Öka indrag",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Vågrät linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga länk",result:function(){var e=window.prompt("Ange länkens URL");if(e){var t=document.getSelection(),n=document.createElement("a");n.href=e,n.target="_blank",n.appendChild(document.createTextNode(t.toString())),Object(r.a)("insertHTML",n.outerHTML)}}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,s=window.prompt(this.promptMsg);if(s){var i=document.createElement("img");i.src=s,i.tabIndex=1,n=i,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),i.onfocus=t.onFocus,i.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports=JSON.parse('{"SouthIndia":[{"firstTerm":{"startDate":"2015-06-01T00:00:00.000Z","endDate":"2015-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2015-11-01T00:00:00.000Z","endDate":"2016-03-27T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2016-06-23T00:00:00.000Z","endDate":"2016-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2016-11-01T00:00:00.000Z","endDate":"2017-03-25T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2017-06-05T00:00:00.000Z","endDate":"2017-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2017-11-01T00:00:00.000Z","endDate":"2018-03-30T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2018-06-04T00:00:00.000Z","endDate":"2018-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2018-11-01T00:00:00.000Z","endDate":"2019-04-29T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2019-06-03T00:00:00.000Z","endDate":"2019-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2019-11-01T00:00:00.000Z","endDate":"2020-03-27T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2020-06-01T00:00:00.000Z","endDate":"2020-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2020-11-01T00:00:00.000Z","endDate":"2021-03-26T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2021-06-06T00:00:00.000Z","endDate":"2021-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2021-11-01T00:00:00.000Z","endDate":"2022-03-25T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2022-06-05T00:00:00.000Z","endDate":"2022-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2022-11-01T00:00:00.000Z","endDate":"2023-03-31T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2023-06-04T00:00:00.000Z","endDate":"2023-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2023-11-01T00:00:00.000Z","endDate":"2024-03-29T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2024-06-03T00:00:00.000Z","endDate":"2024-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2024-11-01T00:00:00.000Z","endDate":"2025-03-28T00:00:00.000Z"},"holidays":[]}],"NorthIndia":[{"firstTerm":{"startDate":"2024-04-03T00:00:00.000Z","endDate":"2024-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2024-10-01T00:00:00.000Z","endDate":"2025-04-02T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2023-04-05T00:00:00.000Z","endDate":"2023-10-01T00:00:00.000Z"},"secondTerm":{"startDate":"2023-10-02T00:00:00.000Z","endDate":"2024-04-02T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2022-04-06T00:00:00.000Z","endDate":"2022-10-03T00:00:00.000Z"},"secondTerm":{"startDate":"2022-10-04T00:00:00.000Z","endDate":"2023-04-04T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2021-04-01T00:00:00.000Z","endDate":"2021-10-04T00:00:00.000Z"},"secondTerm":{"startDate":"2021-10-05T00:00:00.000Z","endDate":"2022-04-05T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2020-04-01T00:00:00.000Z","endDate":"2020-09-28T00:00:00.000Z"},"secondTerm":{"startDate":"2020-09-29T00:00:00.000Z","endDate":"2021-03-31T00:00:00.000Z"},"holidays":[{"startDate":"2020-05-17","endDate":"2020-06-28"}]},{"firstTerm":{"startDate":"2019-04-04T00:00:00.000Z","endDate":"2019-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2019-10-01T00:00:00.000Z","endDate":"2020-03-31T00:00:00.000Z"},"holidays":[{"startDate":"2019-05-19","endDate":"2019-06-29"}]},{"firstTerm":{"startDate":"2018-04-04T00:00:00.000Z","endDate":"2018-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2018-10-01T00:00:00.000Z","endDate":"2019-04-03T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2017-04-05T00:00:00.000Z","endDate":"2017-10-02T00:00:00.000Z"},"secondTerm":{"startDate":"2017-10-03T00:00:00.000Z","endDate":"2018-04-03T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2016-04-06T00:00:00.000Z","endDate":"2016-10-03T00:00:00.000Z"},"secondTerm":{"startDate":"2016-10-04T00:00:00.000Z","endDate":"2017-04-04T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2015-04-01T00:00:00.000Z","endDate":"2015-10-05T00:00:00.000Z"},"secondTerm":{"startDate":"2015-10-06T00:00:00.000Z","endDate":"2016-04-05T00:00:00.000Z"},"holidays":[]}]}')},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(85),s=n(5),i=function(){function e(e){var t=this,n=e.table,s=e.getClient,i=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,u,c,l=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,i=n.table,o=a(),u=e.map(function(e){var n=l.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(u.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.do(function(e){return u.forEach(function(t){return e.put(i,t)})}).catch(function(n){return"http409"===n.name?o.list(i,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return o.do(function(e){return n.forEach(function(t){return e.put(i,t)})})}):Promise.resolve(s&&l.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return c=r.sent(),this.regenerateCacheBust(),u.forEach(function(e){e.$etag=c.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(u)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,u,c,l,d,h,m,p,f,g,v,b,y,k=this;return r.d(this,function(w){switch(w.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,i=t.table,o=t.getQueryOptions,u=n(),[4,o()];case 1:return c=w.sent(),l=[].concat(c.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),d=this.stripGraphs(e,l),a?[4,this.mem.insert(d.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:w.sent(),w.label=3;case 3:h=new s.a,m=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){h.link2(i,e.id,t,n.id)})};try{for(var s=(t=void 0,r.h(l)),o=s.next();!o.done;o=s.next()){a(o.value)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}h.add(i,e)};try{for(p=r.h(d),f=p.next();!f.done;f=p.next())g=f.value,m(g)}catch(e){b={error:e}}finally{try{f&&!f.done&&(y=p.return)&&y.call(p)}finally{if(b)throw b.error}}return[4,u.batch(h.mutationRequests).catch(function(t){return a&&k.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return v=w.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=v.newEtags[e.id]}),a?[4,this.mem.update(e)]:[3,6];case 5:return w.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:w.sent(),w.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o=this;return r.d(this,function(u){switch(u.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,i=n(),a?[4,this.mem.update(e.map(function(e){return o.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:u.sent(),u.label=2;case 2:return[4,i.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(o,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return u.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return u.sent(),[2]}})})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(10),i=new DOMParser,o={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function u(e){for(var t=i.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)c(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function c(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&o[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),l(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),s=a.name&&!!t[a.name.toLowerCase()];s||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),l(e)&&(t=!0),t}function l(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)c(n.item(r))&&(t=!0);return t}var d=n(87);n.d(t,"a",function(){return b});var h="wysiwyg-actionbar",m="wysiwyg-button",p="wysiwyg-content",f="wysiwyg-focusrect",g="wysiwyg-focuspoint",v="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||u(e.html)!==u(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(u(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:y(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(g)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),s=a.next();!s.done;s=a.next()){switch(s.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,i=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(i=i.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta vänster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta höger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden på egen rad",result:function(){return e("unfloat")}}])));var o=this.state.focusRect,c=this.props,l=c.readOnly,b=c.reportNumChars,y=c.maxChars;return a.createElement("div",{className:this.props.className},!l&&a.createElement("div",{className:h},i.map(function(e,n){return a.createElement("button",{key:n,className:m,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:l?v:p,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:u(this.props.html)},contentEditable:!l,onPaste:function(e){if(!isNaN(y)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>y&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:0)}:null,onKeyPress:isNaN(y)?null:function(e){var t=e.target.innerText;t&&t.length>=y&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){l||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(s.a)("outdent"):Object(s.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),o&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:f,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:g+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:g+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:g+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:g+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function y(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return u});var r=n(1),a=n(15),s=n(66),i=n(7),o=function(){function e(){var e,t;this._initialized=!1;var n=function(e){Object.defineProperty(a,e,{get:function(){return this._initialized||this.init(),this._features[e]},set:function(e){throw new Error("Feature flags cannot be set here")}})},a=this;try{for(var i=r.h(Object.keys(s)),o=i.next();!o.done;o=i.next()){n(o.value)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}}return e.prototype.init=function(){var e,t;if(!this._initialized){var n=(i.a.KED_FEATURES||"").split(",").map(function(e){return e.trim().toLowerCase()}),o=Object(a.b)(location.search,{toLower:!0});o.testversion&&(n=["*"]),o.features&&(n=o.features.split(",").map(function(e){return e.trim().toLowerCase()}));var u=n.includes("*");this._features={};try{for(var c=r.h(Object.keys(s)),l=c.next();!l.done;l=c.next()){var d=l.value;this._features[d]=u||n.includes(d.toLowerCase())}}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}this._initialized=!0}},e}(),u=new o},function(e,t,n){"use strict";n.d(t,"a",function(){return f});var r=n(1),a=n(8),s=n(100),i=n.n(s),o=n(101),u=n.n(o),c=n(68),l=n(69),d=n(0),h=n(7),m=n(6),p=n.n(m),f=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(i.a,u.a)),n.messages={sv:c,en:l},p()().locale(h.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:h.b.KED_LOCALE,messages:this.messages[h.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},,,function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"a",function(){return i});var r=n(0),a=n.n(r),s=function(e){var t=e.state,n=e.onClick,r=e.label;e.onChange;return a.a.createElement("label",{className:"ui-checkbox"},r,a.a.createElement("input",{type:"checkbox",checked:"checked"==t,onClick:n}),a.a.createElement("span",{className:"custom-element"}))},i=function(e){var t=e.state,n=e.onClick,r=void 0===n?function(){return null}:n,s=e.label,i=e.onChange,o=void 0===i?function(){return null}:i;return a.a.createElement("label",{className:"ui-addbox"},s,a.a.createElement("input",{type:"checkbox",checked:"checked"==t,onClick:r,onChange:o}),a.a.createElement("span",{className:"custom-element"}))}},function(e){e.exports=JSON.parse('{"picker":"Integrate coursebuilder and subjectplanner with Google Picker","ksTutorComment":"Integrate KSTermplanner with tutor comments","kgTutorComment":"Integrate KSTermplanner  with tutor comments","termplannerCharts":"Integrate KSTermplanner with progress charts","weekplannerCharts":"Integrate Weekplanner with progress charts","teacherRights":"Activate course builder teacher rights","studyGroups":"Add study groups and google classroom functionality","cbCollapseBoxes":"Course Builder: Collapse modules by default","ksAssignments":"KS show hand-in assignments","markPartialKRs":"Activate mark partial knowledge requirments functionality"}')},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(19),i=n(13),o=n(88);function u(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var c=n(6),l=n.n(c),d=n(24),h=n(7),m=n(8),p=n(17),f=n(3),g=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,i=t.progressData,c=t.displayProgress,h=!!this.props.openCourses[n],p=(new d.a,this.context.intl),g="gymnasium"===(""+f.b.currentUser.schoolType).toLowerCase();return a.createElement(s.a,{title:a.createElement("h5",null,n||(g?a.createElement(m.a,{id:"userTasks.gymnasiumSchoolGoals",defaultMessage:"Övriga uppgifter"}):a.createElement(m.a,{id:"userTasks.primarySchoolGoals",defaultMessage:"Egna lärandemål"}))),headerOpen:h,className:n&&Object(o.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)},displayProgress:c,progressData:i},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"}," ",a.createElement("a",{className:"trash",href:"#",title:p.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lärandemålet och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=u(t),s=l()(t.deadline).startOf("day")<l()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:v(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:b(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:l()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",g?a.createElement(m.a,{id:"weekplanner.learningGoalGymnasium",defaultMessage:"Uppgift"}):a.createElement(m.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmål"}))),a.createElement("br",null))}))},t.contextType=p.a,t}(a.Component);function v(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(i.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function b(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(i.f)(h.b.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var y=n(5),k=n(2);var w=n(70),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave,r="gymnasium"===(""+f.b.currentUser.schoolType).toLowerCase();return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(m.a,{id:"weekplanner.addLearningGoalGymnasiumSchoolTitle",defaultMessage:"Lägg till rubrik"}):a.createElement(m.a,{id:"weekplanner.addLearningGoalPrimarySchoolTitle",defaultMessage:"Lägg till eget lärandemål"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},r?a.createElement(m.a,{id:"weekplanner.addLearningGoalGymnasiumSchool",defaultMessage:"Rubrik"}):a.createElement(m.a,{id:"weekplanner.addLearningGoalPrimarySchool",defaultMessage:"Mål"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(m.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),T=n(34),S=n(50),C=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=this.props,o=(i.isTask,i.onSave),u=this.context.intl,c="gymnasium"===(""+f.b.currentUser.schoolType).toLowerCase();return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,c?a.createElement(m.a,{id:"customTask.addWorkGoalGymnasiumSchoolTitle",defaultMessage:"Lägg till uppgift"}):a.createElement(m.a,{id:"customTask.addWorkGoalPrimarySchoolTitle",defaultMessage:"Lägg till eget arbetsmål"})),a.createElement("hr",null),a.createElement(T.a,{label:u.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:u.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(S.a,{rows:7,label:u.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:u.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(T.a,{label:u.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return o(n,r,s)}},a.createElement(m.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=p.a,t}(a.Component),D=n(102),N=(n(83),n(38)),O=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,i=s.name,o=s.description,u=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:i,description:o,url:u}):r.a({},t)}))});else{var c={id:Object(y.h)(),name:i,description:o,url:u};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(c)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(m.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(m.a,{id:"addeditsubtask.addSubtask",defaultMessage:"Lägg till underuppgift"})),a.createElement("hr",null),a.createElement(T.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(S.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(m.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(m.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=p.a,t}(a.Component),M=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(O,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(O,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=t.deadline,o=t.subTasks,c=t.showCalendar,d=t.userTask,h=d.id,p=(d.courseName,this.props),f=p.onUpdate,g=p.onDelete,v=this.isModified(),b="customTask"===u(d),y=l()(d.deadline)<l()(),k=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,b?a.createElement(m.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmål"}):a.createElement(m.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(T.a,{autoFocus:!0,label:b?k.formatMessage({id:"task.targetNameLabel",defaultMessage:"Arbetsmålets namn"}):k.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:b?k.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du göra?"}):k.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),b&&a.createElement(a.Fragment,null,a.createElement(S.a,{rows:5,label:k.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:k.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(T.a,{label:k.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(N.a,{label:k.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},i||c?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(D.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",nextMonthButtonLabel:"",previousMonthButtonLabel:"",showWeekNumbers:!0,selected:i&&l()(i).toDate(),autoFocus:c,dateFormat:"yyyy-MM-dd",className:y?"expired":void 0,locale:k.locale,popperPlacement:b?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&l()(t).format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:k.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(m.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(N.a,{label:k.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},o&&o.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(m.a,{id:"task.addSubtask",defaultMessage:"Lägg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){v?f(function(e){e.name=n,e.description=r,e.url=s,e.deadline=i}):e.props.closeDialog()}},a.createElement(m.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(m.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){g(h)}},b?a.createElement(m.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmål"}):a.createElement(m.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den här uppgiften"})))))},t.contextType=p.a,t}(a.Component),P=n(12),x=n(89),I=n(41),L=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.backgroundColor,r=e.progressColor,s=Math.round(t);return a.createElement("svg",{className:"progress-chart",width:"100%",height:"25"},a.createElement("rect",{fill:n,width:"100%",height:"100%",rx:"4"}),a.createElement("rect",{className:"fill",fill:r,width:s+"%",height:"100%",rx:"4"}),a.createElement("text",{className:"filled-text",textAnchor:"middle",x:"50%",y:"50%",dy:".3em"},s+"%"))},t.defaultProps={percentage:0,backgroundColor:"#F1F5F4",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return j});var j=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new x.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){var e=Object(I.d)(l()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.nextWeek=function(){var e=Object(I.c)(l()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(E,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"Lärandemålet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(C,{isTask:!e,onSave:function(a,s,i){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,i)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(M,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet får inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(O,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(y.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var i;return r.d(this,function(r){switch(r.label){case 0:return i=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(y.h)(),dateTime:i+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,u,c;return r.d(this,function(d){switch(d.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:d.sent(),d.label=2;case 2:return d.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=l()(n).add(-1,"week"),s=Object(I.b)(a),i=Object(I.a)(a.year(),s),[4,this.props.env.kedBackendClient.list("usertasks",{from:i.notBefore,to:i.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return o=(o=d.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),[n].concat(t.map(function(e){return e.dateTime})),u=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),c=o.sort(Object(k.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:u+=1e3});return t.id=Object(y.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(c)];case 4:return d.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.getHeaderTitle=function(){return a.createElement("h4",null,a.createElement(m.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"}))},t.prototype.render=function(){var e=this,t=l()(this.state.weekDate).week(),n=d.b.weekplannerCharts,i=l()().week(),o=function(e){var t,n,a,s,i=[],o=Object(k.b)(e,function(e){return e.courseName||""});try{for(var u=r.h(Object.keys(o).sort().filter(function(e){return e}).concat(o[""]?[""]:[])),c=u.next();!c.done;c=u.next()){var l=c.value,d=o[l]||o[""],h=Object(k.b)(d,function(e){return e.learningGoal}),m=[];try{for(var p=(a=void 0,r.h(Object.keys(h))),f=p.next();!f.done;f=p.next()){var g=f.value,v=h[g].sort(Object(k.g)("dateTime")),b=v.filter(function(e){return null==e.name})[0],y=b&&b.url;m.push({name:g,allTasks:v,url:y,step:v.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:v.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{f&&!f.done&&(s=p.return)&&s.call(p)}finally{if(a)throw a.error}}i.push({courseName:l,learningGoals:m})}}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return i}(this.state.userTasks),u=this.state,c=u.dialogs,h=u.weekTextsUT,p=u.strategy,v=u.assessment,b=u.isLoading,y=u.isCopyingTasks,E=h&&("adding"===h.$meta||"updating"===h.$meta),T=!!h&&p!==h.weekTexts.strategy,S=!!h&&v!==h.weekTexts.assessment,C=!E&&(T||S),D="gymnasium"===(""+f.b.currentUser.schoolType).toLowerCase(),N=function(e){var t={completedTasks:0,totalNumberOfTasks:0,subjectData:{}};return e.forEach(function(e){return e.learningGoals.forEach(function(n){var r=n.tasks.filter(function(e){return e.done}).length,a=t.subjectData[e.courseName];a||(a=t.subjectData[e.courseName]={completedNumberOfTasks:0,numberOfTasks:0}),a.completedNumberOfTasks+=r,a.numberOfTasks+=n.tasks.length,t.completedTasks+=r,t.totalNumberOfTasks+=n.tasks.length})}),t}(o),O=N.totalNumberOfTasks>0?N.completedTasks/N.totalNumberOfTasks*100:0;return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===i?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!E&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},n&&N.totalNumberOfTasks>0&&this.getHeaderTitle(),a.createElement("div",{className:"widgets"},n&&N.totalNumberOfTasks>0?a.createElement("div",{className:"progressBar"},a.createElement(L,{percentage:O})):this.getHeaderTitle(),a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(m.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"})))))),o.length>0&&a.createElement("hr",null),o.map(function(t){return a.createElement(g,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)},displayProgress:n,progressData:N.subjectData[t.courseName]}))}),a.createElement("hr",null),b?a.createElement(P.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),D?a.createElement(m.a,{id:"weekplanner.learningGoalGymnasium",defaultMessage:"Uppgift"}):a.createElement(m.a,{id:"weekplanner.learningGoalPrimary",defaultMessage:"Eget lärandemål"})),a.createElement("div",{className:"btn",style:y?{opacity:.5}:void 0,onClick:function(t){return!y&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(m.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara från föregående vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(m.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & Utvärdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(m.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(m.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska göra för att lära mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:p&&p.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(m.a,{id:"weekplanner.evaluation",defaultMessage:"Utvärdering"})),a.createElement("p",null,a.createElement(m.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:v&&v.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:C?{}:{opacity:.5},onClick:function(){return!E&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),C?a.createElement(m.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(m.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(w.a,{dialogs:c,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=p.a,t}(a.Component)},function(e){e.exports=JSON.parse('{"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalPrimarySchoolTitle":"Lägg till eget arbetsmål","customTask.addWorkGoalGymnasiumSchoolTitle":"Lägg till uppgift","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Min progression","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.primarySchoolGoals":"Egna lärandemål","userTasks.gymnasiumSchoolGoals":"Övriga uppgifter","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoalGymnasiumSchool":"Rubrik:","weekplanner.addLearningGoalPrimarySchool":"Mål:","weekplanner.addLearningGoalPrimarySchoolTitle":"Lägg till eget lärandemål","weekplanner.addLearningGoalGymnasiumSchoolTitle":"Lägg till rubrik","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoalPrimary":"Eget lärandemål","weekplanner.learningGoalGymnasium":"Uppgift","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}')},function(e){e.exports=JSON.parse('{"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalPrimarySchoolTitle":"Add own working goal","customTask.addWorkGoalGymnasiumSchoolTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.primarySchoolGoals":"Own learning goal","userTasks.gymnasiumSchoolGoals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoalGymnasiumSchool":"Goal:","weekplanner.addLearningGoalPrimarySchool":"Goal:","weekplanner.addLearningGoalPrimarySchoolTitle":"Add own learning goal","weekplanner.addLearningGoalGymnasiumSchoolTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoalPrimary":"Own learning goal","weekplanner.learningGoalGymnasium":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}')},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),s=n(40),i=n(43),o=n(11),u=n.n(o),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&u()(Object(i.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return u()("body").attr("aria-disabled",n.length>0),u()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,o){var c;return a.createElement("div",{key:o},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){c=t,o===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":o<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||u()(Object(i.findDOMNode)(c)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(i.findDOMNode)(c);e.preventDefault(),u()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(6),o=n.n(i),u=n(5),c=n(35),l=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}var h=n(17),m=n(65);n.d(t,"a",function(){return p});var p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){c.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){c.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),i={id:Object(u.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new u.b("email",s.a.currentUser.mail,"S"),new u.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(i.deadline=e.task.deadline),e.task?(i.task=[e.task],e.course?i.course=[e.course]:e.courseInfo&&(i.courseInfo=e.courseInfo)):i.siteVisionPageId=e.id,e.step&&(i.step=e.step),[4,Promise.all([c.b.setWeekPlannerBoxOpen(e.courseName,!0),c.b.insert([i])])]);case 1:return r.sent(),[3,4];case 2:return[4,c.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.context.intl,n=this.props.learningTasks,s=Object(l.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),i=this.state.confirmations,u=o()(this.state.weekDate).week(),c=o()().week(),h=u===c?"":u===c+1?t.formatMessage({id:"taskList.nextWeekTask",defaultMessage:"för nästa vecka (v{week})"},{week:u}):u===c-1?t.formatMessage({id:"taskList.lastWeekTask",defaultMessage:"för förra veckan (v{week})"},{week:u}):t.formatMessage({id:"taskList.currentWeekTask",defaultMessage:"för vecka {week}"},{week:u});return a.createElement("div",{className:"taskContainer"},n.map(function(n,o){var l=n.id,p=s[l]||{$meta:"deleted"},f="adding"===p.$meta||"deleting"===p.$meta,g="deleted"!==p.$meta&&"deleting"!==p.$meta,v=g?t.formatMessage({id:"taskList.removeTaskFromWeeklyPlanning",defaultMessage:"Ta bort uppgiften från egen veckoplanering {week}"},{week:h}):t.formatMessage({id:"taskList.addTaskToWeeklyPlanning",defaultMessage:"Lägg till uppgiften i egen veckoplanering {week}"},{week:h}),b=i.some(function(e){return l===e});return a.createElement("div",{key:o},a.createElement(m.a,{state:g?"checked":"",onClick:function(){return f||u!==c?b?e.setState({confirmations:i.filter(function(e){return e!==l})}):e.setState({confirmations:r.g(i).concat(l)}):e.toggleTask(n)},label:a.createElement("a",{title:v,href:n.url},n.name)}),a.createElement(d,{visible:b,text:v,onConfirm:function(){e.toggleTask(n),e.setState({confirmations:i.filter(function(e){return e!==l})})},onCancel:function(){e.setState({confirmations:i.filter(function(e){return e!==l})})}}))}))},t.contextType=h.a,t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r=n(1),a=n(56),s=n(3),i=n(2),o=n(5),u=n(47),c=n(23),l=n(6),d=n.n(l),h=s.a.hiddenCoursesRepo,m=function(){function e(){var e=this;this.result=null,this.subscribers=[],this.fullCourse=!1,this.notifySubscriber=function(t,n){try{t(n.fullCourse?e.result:e.result.filter(function(e){return e.visible}))}catch(e){console.error(e)}},this.kedRepo=new a.a({getClient:function(){return s.a.kedBackendClient},optimistic:!0,table:"userhiddencourses",user:s.a.currentUser?s.a.currentUser.mail:"",getQueryOptions:function(){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}});var t=this.init();Promise.all([t,this.kedCoursesPromise,this.edsCoursesPromise]).catch(function(e){return Object(i.n)(e)})}return e.prototype.init=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a=this;return r.d(this,function(i){switch(i.label){case 0:return e=s.a.bearerProvider?s.a.bearerProvider.getBearer():Promise.resolve({}),this.kedCoursesPromise=e.then(function(){return a.listKedCourses()}),this.edsCoursesPromise=e.then(function(){return a.listEDSCourses()}),n=!1,this.userHiddenCoursesPromise=new Promise(function(e){return t=function(t){n?a.userHiddenCoursesPromise=Promise.resolve(t):(n=!0,e(t))}}),[4,e];case 1:return i.sent(),this.kedRepo.mem.subscribe(function(e){return r.b(a,void 0,void 0,function(){var n,a,s,i,o=this;return r.d(this,function(u){switch(u.label){case 0:return[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise])];case 1:return n=r.f.apply(void 0,[u.sent(),2]),a=n[0],s=n[1],i=this,[4,this.createCoursesList(s,e,a)];case 2:return i.result=u.sent(),this.subscribers.forEach(function(e){return o.notifySubscriber(e.subscriber,e.options)}),t(e),[2]}})})}),[2]}})})},e.prototype.listKedCourses=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:return e=this.fullCourse,console.log("FullCourse: "+e),[4,s.a.kedBackendClient.list("schools",{role:"USER",name:s.a.currentUser.school,include:"activeCourses",flags:e?[]:["includeIdsAndNamesOnly"],cacheBust:s.a.currentUser.username})];case 1:return t=n.sent(),[2,Object(i.k)(t.map(function(e){return e.activeCourses})).sort(Object(i.g)("name"))]}})})},e.prototype.listEDSCourses=function(){var e=new u.a(Object(c.c)(d()())).period;return-1===s.a.currentUser.roles.indexOf("EMPLOYEE")?s.a.edsClient.getActiveCourses({periodName:e}):null},e.prototype.createCoursesList=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,o,u,c,l=this;return r.d(this,function(d){switch(d.label){case 0:return a=Object(i.c)(t.filter(function(e){return!e.show}),function(e){return e.name}),o=Object(i.c)(t.filter(function(e){return e.show}),function(e){return e.name}),u=s.a.currentUser.roles.some(function(e){return"STUDENT"===e}),c=e?Object(i.c)(e,function(e){return e.name}):{},[4,Promise.all(n.map(function(e){var t=e.id,n=e.name,s=e.description,i=e.modifiedBy;return r.b(l,void 0,void 0,function(){var e,l,d;return r.d(this,function(r){return e=c[n],d=(l=!u||null!=e)?!a[t]:!!o[t],i&&i.name&&!s&&(s=i.name+"s version"),[2,{id:t,name:n,description:s,visible:d,defaultVisible:l}]})})}))];case 1:return[2,d.sent().sort(function(e,t){var n=e.name,r=t.name;return n<r?-1:n>r?1:0})]}})})},e.prototype.hideCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.insert([{id:Object(o.h)(),name:e.id}])]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.delete(t.map(function(e){return e.id}))];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.showCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.delete(t.map(function(e){return e.id}))]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.insert([{id:Object(o.h)(),name:e.id,show:!0}])];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.subscribe=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return this.fullCourse||!t.fullCourse?[3,3]:(this.fullCourse=t.fullCourse,this.kedCoursesPromise=this.listKedCourses(),[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise,this.userHiddenCoursesPromise])]);case 1:return n=r.f.apply(void 0,[u.sent(),3]),a=n[0],s=n[1],i=n[2],o=this,[4,this.createCoursesList(s,i,a)];case 2:o.result=u.sent(),u.label=3;case 3:return[4,this.userHiddenCoursesPromise];case 4:return u.sent(),this.notifySubscriber(e,t),this.subscribers.push({subscriber:e,options:t}),[2]}})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t.subscriber!==e})},e}();h||(h=s.a.hiddenCoursesRepo=new m)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("img",{style:{border:0,margin:0,padding:0},className:"ellipsis-loader"})}},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(6),a=n.n(r),s=n(7);"sv"===s.b.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var i=function(){return a.a.apply(this,arguments).locale(s.b.KED_LOCALE)}},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(3),s=function(){function e(e){var t=e.discoveryDocs;this.googleTokenProvider=a.b.googleTokenProvider,this.discoveryDocs=[],this.discoveryDocs.push(t)}return e.prototype.setBearerProvider=function(e){this.googleTokenProvider=e},e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:t.sent(),t.label=2;case 2:return!this.tokenExpiration||this.tokenExpiration<new Date?[4,this.googleTokenProvider.getBearer()]:[3,4];case 3:e=t.sent(),this.tokenExpiration=new Date(e.expires),this.token=e.token,gapi.client.setToken({access_token:e.token}),t.label=4;case 4:return[4,gapi.client.init({discoveryDocs:this.discoveryDocs})];case 5:return t.sent(),[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e){if("undefined"!=typeof gapi)return e();var t=document.createElement("script");t.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(t),window.gaapi_loaded=e})},e}()},function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Outdent",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Indent",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");if(e){var t=document.getSelection(),n=document.createElement("a");n.href=e,n.target="_blank",n.appendChild(document.createTextNode(t.toString())),Object(r.a)("insertHTML",n.outerHTML)}}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt(this.promptMsg);e&&Object(r.a)("insertImage",e)}}}},function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},,,,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var t=n(7);t.b.ENVIRONMENT="test",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,n(132))},function(e,t,n){"use strict";n(103);var r=n(1),a=n(15),s=n(21),i=n(5),o=n(7),u=n(3),c=n(13),l=n(2);function d(e,t,n){var s=Object(a.b)(t),i=Object(l.e)(s,c.a),o=r.f(Object(a.c)(e),2),u=o[0],d=o[1],h=Object(a.b)(d);return u+Object(a.a)(r.a({},h,i,{scopes:n.join(",")}))}function h(e,t){return e+"/"+t}function m(e,t,n){return new i.e(s.c,s.d,e+t.mail+location.search,o.b.KED_CLIENT_ID,o.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var p,f,g=u.a.currentUser&&u.a.currentUser.mail;if(g)if(o.b.KED_TOKEN_PATH){var v=d(o.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);u.a.bearerProvider=(f=h(p=v,g),new s.b(p,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){u.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,f),{token:t.token,expires:Date.now()+354e4}},f)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(u.a.currentUser=JSON.parse(t))}(h(v,g));var b=d(o.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.profile.emails","https://www.googleapis.com/auth/classroom.profile.photos","https://www.googleapis.com/auth/classroom.rosters.readonly","https://www.googleapis.com/auth/classroom.rosters","https://www.googleapis.com/auth/classroom.coursework.students"]);u.a.googleTokenProvider=function(e,t){var n=h(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,g)}else{if(!(o.b.KED_TOKEN_URL&&o.b.KED_CLIENT_ID&&o.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");u.a.bearerProvider=m(o.b.KED_TOKEN_URL,u.a.currentUser,["kedbackend","EDS"]),u.a.googleTokenProvider=m(o.b.KED_TOKEN_URL+"/google",u.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.profile.emails","https://www.googleapis.com/auth/classroom.profile.photos","https://www.googleapis.com/auth/classroom.rosters.readonly","https://www.googleapis.com/auth/classroom.rosters","https://www.googleapis.com/auth/classroom.coursework.students"])}u.a.kedBackendClient=new s.a(o.b.KED_API_URL,u.a.bearerProvider);var y=n(47);u.a.edsClient=new y.b(s.c,o.b.EDS_API_URL,u.a.bearerProvider,function(){return u.a.currentUser.mail})},,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(3),i=n(145),o=function(e){function t(t){var n=e.call(this,t)||this;return n.onEnvUpdated=n.onEnvUpdated.bind(n),n.state={env:t.tutored?null:s.a},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.tutored&&i.a.subscribe(this.onEnvUpdated)},t.prototype.componentWillUnmount=function(){this.props.tutored&&i.a.unsubscribe(this.onEnvUpdated)},t.prototype.onEnvUpdated=function(e){this.setState({env:e})},t.prototype.render=function(){var e=this.state.env;return e?e.kedBackendClient?this.props.createComponent(e):a.createElement("div",null,"Laddar..."):a.createElement("div",null)},t}(a.Component)},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(1),a=n(33),s=n(0),i=n.n(s),o=n(2),u=i.a.createContext(null);a.b.addProvider(function(){return u._currentValue});var c,l=function(e){function t(t){var n=e.call(this,t)||this;return n.subscriptions=[],n.outerSubscription={unsubscribe:function(){n.subscriptions.forEach(function(e){return e.unsubscribe()}),n.subscriptions=[]}},n.observer=function(e,t,r){t?n.setState({error:t}):n.setState(function(e){return{counter:e.counter+1,error:t}})},n.state={counter:0,error:null},n}return r.c(t,e),t.prototype.componentDidCatch=function(e,t){e&&e.name||(e=new Error(""+e)),this.setState({error:e,info:t}),console.log(e,t)},t.prototype.componentWillMount=function(){this.outerSubscription.unsubscribe()},t.prototype.render=function(){return this.state.error?this.props.errorFallback||i.a.createElement("p",null,Object(o.a)(c||(c=r.e(["Kunde inte ladda innehållet"],["Kunde inte ladda innehållet"])))):(this.outerSubscription.unsubscribe(),i.a.createElement(s.Suspense,{fallback:this.props.fallback||null},i.a.createElement(u.Provider,{value:this},this.props.children)))},t}(i.a.Component)},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.myself=a.createRef(),n.state={text:t.text||""},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.tag,n=e.text,r=e.readOnly,s=t;return a.createElement(s,{contentEditable:!r,"data-placeholder":this.props.placeholder,ref:this.myself,className:this.props.className,onChange:this.onChange.bind(this),onKeyDown:this.onKeyDown.bind(this),onKeyUp:this.onKeyUp.bind(this),onBlur:this.onBlur.bind(this),onPaste:this.onPaste.bind(this),dangerouslySetInnerHTML:{__html:n}})},t.prototype.onChange=function(e){this.setState({text:this.myself.current.innerText})},t.prototype.onKeyDown=function(e){var t=this.myself.current.innerText;if("Escape"===e.key?(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.stopPropagation()):"Enter"===e.key?(e.preventDefault(),this.navigate(t,"down")):"Tab"===e.key?this.propagateOnChange(t):t.length>=this.props.maxChars&&/^[\d\w\s]$/.test(e.key)&&!e.metaKey&&!e.ctrlKey&&e.preventDefault(),!0===this.props.allowNavigation){var n=!!e.key.startsWith("Arrow")&&e.key.replace("Arrow","").toLowerCase(),r=document.getSelection().getRangeAt(0).endOffset;n&&0==t.length?this.navigate(t,n):!n||"up"!=n&&"down"!=n?n&&("left"==n&&0==r||"right"==n&&r==t.length)&&this.navigate(t,n):this.navigate(t,n)}},t.prototype.onKeyUp=function(e){var t=this.myself.current.innerText;void 0===this.props.validateValue||this.props.validateValue.test(t)||(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.preventDefault())},t.prototype.navigate=function(e,t){this.propagateOnChange(e),this.setState({text:e}),this.props.onNavigate(t)},t.prototype.onPaste=function(e){e.preventDefault();var t=e.clipboardData&&e.clipboardData.getData?e.clipboardData.getData("text/plain"):"";document.execCommand("insertHTML",!1,t)},t.prototype.onBlur=function(e){var t=this.myself.current.innerText;this.propagateOnChange(t),this.setState({text:t})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t}(a.PureComponent)},,,,,,function(e,t){},function(e,t,n){"use strict";n.d(t,"a",function(){return m});var r,a,s=n(1),i=n(0),o=n(7),u=n(2),c=n(12),l=n(15),d=n(13),h=n(73),m=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,courses:[],headerOpen:!1},n.updateHiddenCourses=n.updateHiddenCourses.bind(n),n}return s.c(t,e),t.prototype.componentWillMount=function(){h.a.subscribe(this.updateHiddenCourses,{fullCourse:!0})},t.prototype.componentWillUnmount=function(){h.a.unsubscribe(this.updateHiddenCourses)},t.prototype.updateHiddenCourses=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.hideCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(r||(r=s.e(["Sparar..."],["Sparar..."])))),[4,h.a.hideCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.showCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(a||(a=s.e(["Sparar..."],["Sparar..."])))),[4,h.a.showCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.render=function(){var e=this;if(this.state.isLoading)return i.createElement(c.a,null);var t=this.state.courses,n=t.filter(function(e){return e.visible}),r=t.filter(function(e){return!e.visible}),a=Object(l.b)(location.search),u=o.b.KED_COURSE_VIEWER_URL;return i.createElement("div",{className:"ked_boxed"},i.createElement("h3",null,"Skolans kurser"),i.createElement("div",{className:"taskContainer odd-even"},n.map(function(t){return i.createElement("div",{className:"studentCourse",key:t.id},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top pull-right"},i.createElement("a",{className:"hideItem",onClick:function(){return e.hideCourse(t)}})),i.createElement("div",{className:"horizontalItem top"},i.createElement("a",{href:Object(d.f)(u,{courseId:t.id})},t.name))),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",{className:"small"},t.description)))})),i.createElement("div",{className:"openClose"+(this.state.headerOpen?" open":"")},i.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},i.createElement("h5",null,"Dolda kurser")),i.createElement("div",{className:"openContent"},i.createElement("div",{className:"taskContainer odd-even"},r.map(function(t){return i.createElement("div",{className:"studentCourse",key:t.id},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top pull-right"},i.createElement("a",{className:"showItem",onClick:function(){return e.showCourse(t)}})),i.createElement("a",{href:Object(l.a)(s.a({},a,{courseId:t.id}))},t.name)),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",{className:"small"},t.description)))})))))},t}(i.Component)},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(71),i=n(17),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.commonTasks,n=e.learningGoals,r=this.context.intl;return a.createElement("div",null,n.map(function(e){return a.createElement("div",{key:e.name},a.createElement("h5",null,e.name),a.createElement(s.a,{learningTasks:e.learningTasks}))}),t.length>0&&a.createElement("div",null,n.length>0&&a.createElement("h5",null,r.formatMessage({id:"learningGoalsLost.overall",defaultMessage:"Övergripande"})),a.createElement(s.a,{learningTasks:t})))},t.contextType=i.a,t}(a.Component)},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(6),i=n.n(s);function o(e,t){var n=i()(new Date(t.firstTerm.startDate)),r=i()(new Date(t.firstTerm.endDate)),a=i()(new Date(t.secondTerm.startDate)),s=i()(new Date(t.secondTerm.endDate)),o=n.year().toString().substr(2)+"/"+s.year().toString().substr(2),c=u(t.holidays,n,r);if(e<r){var l=1,d=r.week()-n.week();return{term:"AT",academicYearStructure:{academicYear:o,startDate:n,endDate:r,academicStartWeek:l,academicEndWeek:d,holidays:c}}}var h=function(e){var t=0;return e.forEach(function(e){t+=i()(e.endDate).add(1,"week").week()-i()(e.startDate).week()}),t}(c);l=a.clone().add(1,"week").week()-n.week()-h,d=s.clone().add().add(1,"week").week()-n.week()-h;return{term:"ST",academicYearStructure:{academicYear:o,startDate:a,endDate:s,academicStartWeek:l,academicEndWeek:d,holidays:c=u(t.holidays,a,s)}}}function u(e,t,n){return e.filter(function(e){return i()(e.startDate).isBetween(t,n)})}function c(e){var t=e.shortName;return"MA"===t?"Ma":"EN"===t?"Eng":t.startsWith("SV")?"Sv/SvA":t.startsWith("M2")?"M.spr":null}var l=function(){function e(e,t,n){this.locale=t||"sv",this.selectedDate=e,this.schoolMoment=n?o(i()(e),n):null}return e.prototype.getTermStartAndEnd=function(e){var t=this.schoolMoment.academicYearStructure.startDate.clone().startOf("week");t.year()<this.schoolMoment.academicYearStructure.startDate.year()&&(t=this.schoolMoment.academicYearStructure.startDate);var n=this.schoolMoment.academicYearStructure.endDate;return"sv"===this.locale&&e&&"ST"===this.schoolMoment.term?n=n.clone().add(3,"weeks").endOf("week"):e&&("sv"!=this.locale&&(n=this.schoolMoment.academicYearStructure.endDate.clone()),n=this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").endOf("week")),[t,n]},e.prototype.getFirstAndLastWeekOfTerm=function(){return[this.schoolMoment.academicYearStructure.startDate.week(),this.schoolMoment.academicYearStructure.endDate.week()]},e.prototype.isCurrentWeek=function(e){var t=i()(e);return t.year()===i()().year()&&t.week()===i()().week()},e.prototype.getLastStepWeek=function(e){return"sv"===e?"ST"===this.schoolMoment.term?28:52:this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").week()},e.prototype.toLocaleString=function(e,t){if(this.schoolMoment){var n=this.schoolMoment.academicYearStructure.endDate.year().toString(),r=this.schoolMoment.academicYearStructure.academicYear;return n=t&&"sv"===e.locale?n.substr(2):r,"AT"===this.schoolMoment.term?e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"VT {year}"},{year:n})}return null},e.prototype.nextTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.endDate.clone():i()()).add(3,"months").toDate(),this.locale)},e.prototype.prevTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.startDate.clone():i()()).subtract(3,"months").toDate(),this.locale)},e.prototype.getEdsPeriodName=function(){return"AT"===this.schoolMoment.term?"HT":"VT"+this.schoolMoment.academicYearStructure.endDate.year()},e}(),d=n(5),h=n(41),m=function(e,t,n,a,s,o){var u,l,m,p,f,g=this;if(this.subjectProgress={},this.columns=[],this.weekPlansOrTutorNote=[],n.schoolMoment){var v=r.f(n.getTermStartAndEnd(),2),b=v[0],y=v[1];this.year=b.year();var k=function(e){switch(e){case"sv":return["M.spr","Ma","Sv/SvA","Eng"];case"en_sin":case"en_nin":return["MFL","Ma","Hi","Eng","Yoga","ICT"]}}(a);k.forEach(function(e){return g.columns.push({name:e})});var w=[{name:"Kurs",isFixed:!0},{name:"Kommentar",isFixed:!0}];o&&w.push({name:"TutorComment",isFixed:!0}),(u=this.columns).push.apply(u,r.g(w));var E=function(e,t){var n={};return n.Kurs=t.formatMessage({id:"termplanner.course",defaultMessage:"Kurs"}),n.Kommentar=t.formatMessage({id:"termplanner.comments",defaultMessage:"Kommentar"}),"sv"===e?(n["M.spr"]=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"M.spr"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Ma"}),n["Sv/SvA"]=t.formatMessage({id:"termplanner.swedishLanguage",defaultMessage:"Sv/SvA"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"Eng"})):(n.MFL=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"MFL"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Maths"}),n.Hi=t.formatMessage({id:"termplanner.hindiLanguage",defaultMessage:"Hindi"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"English"}),n.Yoga=t.formatMessage({id:"termplanner.yoga",defaultMessage:"Yoga"}),n.ICT=t.formatMessage({id:"termplanner.ict",defaultMessage:"ICT"})),n}(a,s);this.columns.forEach(function(e){e.translatedName=E[e.name]});for(var T=n.schoolMoment.academicYearStructure.holidays,S=n.schoolMoment.term,C=e.filter(function(e){return!e.type}),D=e.filter(function(e){return"tutor-note"===e.type}),N=n.schoolMoment.academicYearStructure.academicStartWeek,O=function(e){if(T.filter(function(t){return e.week()>=i()(t.startDate).startOf("week").week()&&e.week()<=i()(t.endDate).endOf("week").week()}).length>0)return"continue";var t=e.week(),n=Object(h.a)(e.year(),t),a=C.filter(function(e){return e.dateTime>=n.notBefore&&e.dateTime<=n.notAfter&&(!e.isFinalStep&&e.term===S||"sv"===s.locale)})[0],o=D.filter(function(e){return e.dateTime>=n.notBefore&&e.dateTime<=n.notAfter&&(e.term===S||"sv"===s.locale)})[0];M.weekPlansOrTutorNote.push(r.a({},a||{},{id:a?a.id:Object(d.h)(),dateTime:a?a.dateTime:e.valueOf(),cellValues:a?a.cellValues:{},weekNumber:t,academicWeekNumber:N++,term:S})),M.weekPlansOrTutorNote.push(r.a({},o||{},{id:o?o.id:Object(d.h)(),type:"tutor-note",dateTime:o?o.dateTime:e.valueOf(),content:o?o.content:"",weekNumber:t,term:S}))},M=this,P=b.clone();P.valueOf()<y.valueOf();P=P.clone().add(1,"week").startOf("week"))O(P);var x=n.getLastStepWeek(s.locale),I=Object(h.a)(y.year(),x);this.lastSteps=C.filter(function(e){return e.dateTime>=I.notBefore&&e.dateTime<=I.notAfter&&(e.isFinalStep&&e.term===S||"sv"===s.locale)})[0]||{id:Object(d.h)(),dateTime:i()(y).clone().week(x).startOf("week").valueOf(),cellValues:{},weekNumber:x,term:S,isFinalStep:!0},this.completedSteps={},this.termGoals={};var L={};try{for(var j=r.h(t),R=j.next();!R.done;R=j.next()){var A=R.value,U=c(A);try{for(var _=(p=void 0,r.h(A.courseSteps)),B=_.next();!B.done;B=_.next()){var F=B.value;if(F.isCompleted){this.completedSteps[U+F.shortName]=!0;var G=parseInt(F.shortName);!isNaN(G)&&G>(L[U]?L[U]:0)&&(L[U]=G)}}}catch(e){p={error:e}}finally{try{B&&!B.done&&(f=_.return)&&f.call(_)}finally{if(p)throw p.error}}this.termGoals[U]=A.periodGoalGrade}}catch(e){l={error:e}}finally{try{R&&!R.done&&(m=j.return)&&m.call(j)}finally{if(l)throw l.error}}t&&(k.forEach(function(e){g.subjectProgress[e]={finalStepCompleted:!1,value:0}}),Object.keys(this.lastSteps.cellValues).forEach(function(e){if(!w[e]){var t=isNaN(parseInt(g.lastSteps.cellValues[e]))||!g.lastSteps.cellValues[e],n=t?0:parseInt(g.lastSteps.cellValues[e]),r=n>0?100*L[e]/n:0;g.subjectProgress[e]={finalStepCompleted:!t,value:r}}}))}};var p=n(127),f=n(3),g=new(n(158).a)(function(){return f.a.kedBackendClient},function(){return f.a.currentUser});f.a.ksTermPlannerRepo=g;var v=n(17),b=n(8),y=n(7),k=n(12),w=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.errorMessage,r=e.backgroundColor,s=e.progressColor,i=100/6.28+2,o=Math.round(t),u=10;return a.createElement("svg",{className:"doughnut-chart",viewBox:"0 0 35.847133757961785 35.847133757961785",width:"100%",height:"100%"},a.createElement("circle",{className:"circle-chart-background",stroke:r,strokeWidth:3,fill:"none",cx:i,cy:i,r:100/6.28}),a.createElement("circle",{className:"circle-chart-circle",stroke:s,ref:"progressCircle",strokeWidth:2,style:{strokeDasharray:o+", 100"},strokeLinecap:"round",fill:"none",cx:i,cy:i,r:100/6.28}),a.createElement("g",{className:"circle-chart-info"},n?a.createElement("text",{className:"circle-chart-percent-error",x:i,y:i,alignmentBaseline:"central",fontSize:"5",textAnchor:"middle"},n.split(" ").map(function(e){var t=a.createElement("tspan",{key:e,x:i,y:u},e);return u+=5,t})):a.createElement("text",{className:"circle-chart-percent",x:i,y:i,alignmentBaseline:"central",textAnchor:"middle"},o+"%")))},t.defaultProps={backgroundColor:"#efefef",progressColor:"#3dbca2",errorMessage:null},t}(a.Component),E=n(70),T=n(157),S=n(24),C=n(19);n.d(t,"a",function(){return D});var D=function(e){function t(t){var n=e.call(this,t)||this;return n.unmounted=!1,n.state={schoolTerm:new l(t.initialDate),activeCourses:[],weekPlans:[],error:null,loadingActiveCourses:!1,loadingWeekPlans:!1,initialLoad:!0,dialogs:[]},n.flowId=1,n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,this.load(this.state.schoolTerm)];case 1:return e.sent(),this.unmounted||this.props.env.ksTermPlannerRepo.mem.subscribe(this.updateWeekPlans),[2]}})})},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.props.env.ksTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e,t){this.setState({weekPlans:e,loadingWeekPlans:!1,error:t||null})},t.prototype.load=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o;return r.d(this,function(r){switch(r.label){case 0:t=++this.flowId,this.fields=[],this.setState({loadingActiveCourses:!0}),n=this.props.env.ksTermPlannerRepo,r.label=1;case 1:return r.trys.push([1,4,,5]),[4,this.loadAcademicYearDates(e,y.b.KED_SCHOOL_LOCALE)];case 2:return a=r.sent(),this.flowId!==t?[2]:(s=new l(e.selectedDate,this.context.intl.locale,a),n.refreshData(s.getTermStartAndEnd(!0)),[4,this.loadActiveCourses(s)]);case 3:return i=r.sent(),this.flowId!==t?[2]:(this.setState({schoolTerm:s,initialLoad:!1,activeCourses:i,loadingActiveCourses:!1}),[3,5]);case 4:return o=r.sent(),this.flowId!==t?[2]:(this.setState({schoolTerm:s,loadingActiveCourses:!1,error:o}),[3,5]);case 5:return[2]}})})},t.prototype.loadAcademicYearDates=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.edsClient.getAcademicYearTerms(t,e.selectedDate)];case 1:return[2,n.sent()]}})})},t.prototype.loadActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=e.getEdsPeriodName(),[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return[2,n.sent()]}})})},t.prototype.updateCell=function(e,t,n){return r.b(this,void 0,void 0,function(){var a;return r.d(this,function(r){switch(r.label){case 0:if((e&&e.cellValues[t]||"")===n)return[2];r.label=1;case 1:return r.trys.push([1,3,,4]),e.cellValues[t]=n,[4,this.props.env.ksTermPlannerRepo.upsert(e,function(e){return e.cellValues[t]=n})];case 2:return[2,r.sent()];case 3:return a=r.sent(),console.error(a.stack||a),"http403"===a.name?this.setState({error:this.context.intl({id:"common.changesNotSavedUnauthorized",defaultMessage:"Ändringarna sparades inte p.g.a. otillräcklig behörighet."})}):this.setState({error:this.context.intl({id:"common.changesNotSavedErrorOccured",defaultMessage:"För tillfället problem att spara data. Dina ändringar sparades inte."})}),[3,4];case 4:return[2]}})})},t.prototype.updateTutorNoteField=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if((e&&e.content||"")===t)return[2];n.label=1;case 1:return n.trys.push([1,3,,4]),e.content=t,e.acl=[new d.b("tutorFor",this.props.env.currentUser.mail,"S").toString(),new d.b("email",this.props.env.currentUser.mail,"R").toString()],[4,this.props.env.ksTermPlannerRepo.upsert(e,function(e){return e.content=t})];case 2:return[2,n.sent()];case 3:return n.sent(),[3,4];case 4:return[2]}})})},t.prototype.deleteTutorNoteField=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.props.env.ksTermPlannerRepo.delete([e])];case 1:return t.sent(),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}})})},t.prototype.onTutorClick=function(e){var t=this;this.openDialog(a.createElement(T.a,{weekNumber:e.weekNumber,comment:e.content,intl:this.context.intl,updateData:function(n){return t.updateTutorNoteField(e,n)},deleteNoteData:function(){return t.deleteTutorNoteField(e.id)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.navigate=function(e,t){var n=r.a({},e),a=this.fields.length,s=Math.max.apply(Math,r.g(this.fields.map(function(e){return e.length})));switch(t){case"up":n.row=Math.max(e.row-1,0);break;case"down":n.row=Math.min(e.row+1,a);break;case"left":n.col=Math.max(e.col-1,0);break;case"right":n.col=Math.min(e.col+1,s)}this.fields[n.row]&&this.fields[n.row][n.col]&&this.fields[n.row][n.col].myself.current.focus()},t.prototype.addField=function(e,t){void 0===this.fields[t.row]&&(this.fields[t.row]=[]),this.fields[t.row][t.col]=e},t.prototype.getTableCell=function(e,t,n,r,s,i,o){var u=this,c=r.completedSteps,l={row:e,col:t};if("Tutor"===o){var d=s,h=d.content;return this.props.tutored?a.createElement("td",{key:"tutornote"+t,onClick:function(){return u.onTutorClick(d)},className:"tutorCell"},h?a.createElement("div",{key:t,"data-tooltip":h},a.createElement("i",{key:t,className:"fas fa-comment-dots"})):a.createElement("div",{key:t},a.createElement("i",{key:t,className:"fas fa-comment-medical"}))):a.createElement("td",{key:"tutornote"+t,className:"tutorCell"},h&&a.createElement("div",{key:t,"data-tooltip":h},a.createElement("i",{key:t,className:"far fa-comment-dots"})))}var m=s.cellValues;return a.createElement("td",{className:this.getCellClassName(c,m,n)},a.createElement(p.a,{key:t,ref:function(e){return u.addField(e,l)},text:m[n],tag:"div",validateValue:"Step"==o?/^\d*$/:void 0,maxChars:"Comment"==o?100:"Course"==o?30:3,onChange:this.updateCell.bind(this,s,n),readOnly:i||"Tutor"==o,allowNavigation:!0,onNavigate:this.navigate.bind(this,l)}))},t.prototype.getCellClassName=function(e,t,n){var r=this.getColumnType(n);return"Step"==r&&e[n+t[n]]?"stepCell completedStep":r.toLowerCase()+"Cell"},t.prototype.getFooterCell=function(e,t,n,r,s){var i=this,o={row:e,col:t},u=this.getColumnType(n);return a.createElement("th",{className:u+"Footer"},a.createElement(p.a,{key:"stepFooterCell"+t,ref:function(e){return i.addField(e,o)},tag:"div",text:r.lastSteps.cellValues[n],onChange:this.updateCell.bind(this,r.lastSteps,n),readOnly:s,maxChars:10,allowNavigation:!0,onNavigate:this.navigate.bind(this,o)}))},t.prototype.getStepHeaderColumn=function(e,t,n){return a.createElement("th",{key:"stepHeaderCell_"+e,className:n.toLowerCase()+"Header"},"Tutor"!=n?t:"")},t.prototype.getColumnType=function(e){var t={Kommentar:"Comment",Kurs:"Course",TutorComment:"Tutor"};return t.hasOwnProperty(e)?t[e]:"Step"},t.prototype.openCloseProgressCharts=function(e){localStorage.setItem("TermplannerBoxCharts",e)},t.prototype.getStepCharts=function(e,t){var n=this,r=JSON.parse(localStorage.getItem("TermplannerBoxCharts"));return a.createElement(C.a,{headerOpen:r,onOpenClose:this.openCloseProgressCharts,title:this.context.intl.formatMessage({id:"termplanner.chartsBoxTitle",defaultMessage:"Min progression"})},a.createElement("div",{className:"charts-container"},e.map(function(e){if(!e.isFixed){var r=t[e.name]?t[e.name].value:0,s=t[e.name].finalStepCompleted?null:n.context.intl.formatMessage({id:"termplanner.noFinalStepAvailable",defaultMessage:"Inget slutsteg tillgängligt"}),i=function(e){var t={};return t["M.spr"]=e.formatMessage({id:"termplanner.modernLanguageFullname",defaultMessage:"M.språk"}),t.Ma=e.formatMessage({id:"termplanner.mathsFullname",defaultMessage:"Matematik"}),t["Sv/SvA"]=e.formatMessage({id:"termplanner.swedishLanguageFullName",defaultMessage:"Svenska"}),t.Eng=e.formatMessage({id:"termplanner.englishLanguageFullName",defaultMessage:"Engelska"}),t}(n.context.intl);return a.createElement("div",{key:e.name,className:"chart-box"},a.createElement("h4",null,i[e.name]),a.createElement("div",{key:e.name,className:"inner-chart-box"},a.createElement(w,{key:e.name,percentage:r,errorMessage:s})))}})))},t.prototype.getWeekTutorNote=function(e,t){return e.find(function(e){return"tutor-note"===e.type&&e.weekNumber===t})},t.prototype.render=function(){var e=this,t=this.context.intl,n=S.b.ksTutorComment,r=S.b.termplannerCharts,s=new m(this.state.weekPlans,this.state.activeCourses,this.state.schoolTerm,y.b.KED_SCHOOL_LOCALE,t,n),i=s.termGoals,o=s.columns,u=this.props.tutored,c=this.state,l=c.loadingWeekPlans,d=c.error,h=c.weekPlans,p=c.dialogs,f=0===h.length&&!!d||u||l,g=0,v=s.weekPlansOrTutorNote.filter(function(e){return!e.type});return this.state.initialLoad?a.createElement("p",null,a.createElement(k.a,null),a.createElement(b.a,{id:"termplanner.loadingTermplanner",defaultMessage:"V.g. vänta medan terminsplaner laddas..."})):a.createElement("div",{className:"termplanner"+(this.state.loadingWeekPlans?" loading-weekplans":"")+(this.state.loadingActiveCourses?" loading-courses":"")},r&&this.state.activeCourses.length>0&&this.getStepCharts(o,s.subjectProgress),a.createElement("div",{className:"ked_boxed"},a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,this.state.schoolTerm.toLocaleString(t,!0))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.prevTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.nextTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))))),a.createElement(b.a,{id:"termplanner.termPlanning",defaultMessage:"Terminsplanering",tagName:"h4"}),a.createElement("hr",null),a.createElement("table",{className:"termplanner-table zebra"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{className:"weekColumn"},a.createElement(b.a,{id:"termplanner.weekNumber",defaultMessage:"Vecka"})),o.map(function(t,n){var r=e.getColumnType(t.name);return e.getStepHeaderColumn(n,t.translatedName,r)}))),a.createElement("tbody",null,v.filter(function(e){return e.cellValues}).map(function(r,i){g=i;var u=r.weekNumber,c=r.academicWeekNumber,l=u,d=e.state.schoolTerm.isCurrentWeek(r.dateTime);return a.createElement("tr",{key:s.year+":"+l,className:d?"currentWeek":""},a.createElement("td",null,"sv"===t.locale?l:c),o.map(function(t,a){var o=e.getColumnType(t.name),c=e.getWeekTutorNote(s.weekPlansOrTutorNote,u);return"Tutor"===o?c&&n&&e.getTableCell(i,a,t.name,s,c,f,o):e.getTableCell(i,a,t.name,s,r,f,o)}))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",null,a.createElement(b.a,{id:"termplanner.finalStep",defaultMessage:"Slutsteg"})),o.filter(function(e){return!e.isFixed}).map(function(t,n){return e.getFooterCell(g+1,n,t.name,s,f)}),a.createElement("th",null,"-"),a.createElement("th",null),n&&a.createElement("th",null)),a.createElement("tr",null,a.createElement("th",null,a.createElement(b.a,{id:"termplanner.edsGoalGrades",defaultMessage:"Terminsmål"})),o.filter(function(e){return!e.isFixed}).map(function(t,n){var r=e.getColumnType(t.name).toLowerCase();return a.createElement("th",{key:"grades_"+n,className:r+"Footer"},i[t.name])}),a.createElement("th",null,"-"),a.createElement("th",null,this.state.error&&a.createElement("p",{className:"error"},""+this.state.error)),n&&a.createElement("th",null))))),a.createElement(E.a,{dialogs:p,popDialog:function(){return e.setState({dialogs:p.slice(0,p.length-1)})}}))},t.contextType=v.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(36),s=function(){function e(){this.subscribers=[],this.env=null,this.version=1}return e.prototype.subscribe=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){return this.subscribers.push(e),e(this.env),[2]})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){return this.subscribers.forEach(function(t){return t(e.env)}),[2]})})},e.prototype.setNewEnv=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(s){switch(s.label){case 0:return n=++this.version,this.env={currentUser:e,tutored:!0},this.notifySubscribers(),[4,t().catch(function(t){return{currentUser:e,tutored:!0,error:t}})];case 1:return a=s.sent(),n===this.version&&(++this.version,this.env=r.a({},a,{tutored:!0}),this.notifySubscribers()),[2]}})})},e}();a.a.tutorEnv||(a.a.tutorEnv=new s),t.a=a.a.tutorEnv},,,function(e,t,n){var r={"./en-SG":92,"./en-SG.js":92,"./en-au":93,"./en-au.js":93,"./en-ca":94,"./en-ca.js":94,"./en-gb":95,"./en-gb.js":95,"./en-ie":96,"./en-ie.js":96,"./en-il":97,"./en-il.js":97,"./en-nz":98,"./en-nz.js":98,"./sv":99,"./sv.js":99};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=148},function(e,t){},function(e,t){},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={comment:t.comment?t.comment:""},n}return r.c(t,e),t.prototype.delete=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return(0,this.props.closeDialog)(),this.props.deleteNoteData(),[2]})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){return e=this.props.closeDialog,t=this.state.comment,e(),this.props.updateData(t),[2]})})},t.prototype.render=function(){var e=this,t=this.props,n=t.weekNumber,r=t.intl,s=this.state.comment;return a.createElement("div",null,a.createElement("div",null,a.createElement("h2",null,r?r.formatMessage({id:"tutorNoteDialog.weekComment",defaultMessage:"Kommentar för vecka {weekNumber}"},{weekNumber:n}):"Kommentar för vecka "+n),a.createElement("hr",null),a.createElement("div",{className:"align-table"},a.createElement("div",{className:"fullWidth"},a.createElement("textarea",{autoFocus:!0,value:s,onChange:function(t){return e.setState({comment:t.target.value})}})))),a.createElement("div",null,a.createElement(a.Fragment,null,a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},r?r.formatMessage({id:"common.save",defaultMessage:"Spara"}):"Spara"," "),s&&a.createElement("a",{tabIndex:1,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.delete()}},r?r.formatMessage({id:"common.remove",defaultMessage:"Ta bort"}):"Ta bort"))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(56),s=n(6),i=n.n(s),o=function(e){function t(t,n){var a=this,s=n();return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans-ks",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t;return r.d(this,function(n){return e=this.startDate&&this.startDate.valueOf()||i()().valueOf(),t=this.endDate&&this.endDate.valueOf()||i()().valueOf(),[2,{from:e,to:t,role:"USER"}]})})}})||this}return r.c(t,e),t.prototype.refreshData=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=r.f(e,2),this.startDate=t[0],this.endDate=t[1],[4,this.mem.refreshFromServer()];case 1:return n.sent(),[2]}})})},t}(a.a)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(6),i=n.n(s);const o=6e4;var u,c=n(2);function l(e){e.id;var t=e.dayStart,n=e.startMoment,s=e.endMoment,l=e.text,d=e.location,h=e.description,m=e.width,p=e.pos,f=e.locale,g=e.zoom,v=e.htmlLink,b=e.className,y=i()(n).diff(t)/o*g,k=i()(s).diff(n)/o*g,w={hour:"numeric",minute:"2-digit"},E=n.toDate().toLocaleTimeString(f,w),T=s.toDate().toLocaleTimeString(f,w);return a.createElement("div",{className:"dayviewevent "+b,style:{position:"absolute",boxSizing:"border-box",top:y,left:(p||0)+"%",width:(m||100)+"%",height:k,maxHeight:k,overflow:"hidden"},title:E+" - "+T+" "+l+(d?"\n"+Object(c.a)(u||(u=r.e(["Plats: ",""],["Plats: ",""])),d):"")+(h?"\n"+h:"")},a.createElement("a",{className:"event-title",href:v,target:"calendar-event"},l),a.createElement("p",{className:"event-period"},E," - ",T),d&&a.createElement("p",{className:"event-location"},d),h&&a.createElement("p",{className:"event-description"},h))}function d(e){for(var t=e.dayStart,n=e.dayEnd,r=60*e.zoom,s=i()(t).hour(),o=i()(n).hour(),u=[],c=s;c<=o;++c)u.push(c);return a.createElement("div",null,u.map(function(e){return a.createElement("div",{key:e,className:"timeline",style:{width:"100%",boxSizing:"border-box",margin:r/2+"px 0 0 0",height:r/2}})}))}function h(e){var t=e.dayStart,n=e.dayEnd,s=e.events,u=e.locale,h=e.zoom,m=(e.isLastCall,i()(n).diff(t)/o*h),p=function(e,t){var n=[];return e.forEach(function(e,t){var a,s=n.filter(function(t){return t.startMoment&&t.endMoment&&t.startMoment<=e.startMoment&&t.endMoment>e.startMoment}),i=s.concat(Object(c.k)(s.map(function(e){return e.prevOverlaps})));(i=Object(c.j)(i,function(e){return e.index})).sort(Object(c.g)("startMoment"));var o=0;i.forEach(function(e,t){t%4==0&&(a=Math.max(25,Math.round(100/Math.max(i.length-t+1,1))),o=0),e.width=a,e.className=(e.className||"").split(" ").filter(function(e){return"splitted"!==e}).concat("splitted").join(" "),e.pos=o,o+=a}),n.push(r.a({},e,{index:t,pos:o,width:a,className:a<100?e.className?e.className+" splitted":"splitted":e.className,prevOverlaps:i}))}),n}(s);return a.createElement("div",{className:"dayview",style:{top:0,height:m,maxHeight:m,position:"relative",overflow:"hidden"}},a.createElement(d,{dayStart:t,dayEnd:n,zoom:h}),p.map(function(e){return a.createElement(l,{key:e.id,id:e.id,className:e.className,dayStart:t,startMoment:e.startMoment,endMoment:e.endMoment,text:e.text,location:e.location,description:e.description,width:e.width,pos:e.pos,locale:u,zoom:h,htmlLink:e.htmlLink})}))}function m(e){for(var t=e.startHour,n=e.endHour,r=e.locale,s=60*e.zoom,o=[],u=t;u<=n;++u)o.push(u);return a.createElement("div",{className:"hourmarker",style:{position:"relative",left:0,top:0,overflow:"visible",height:(n-t)*s}},o.map(function(e,t){var n=t*s;return a.createElement("span",{key:e},a.createElement("div",{style:{position:"absolute",left:0,top:n,marginTop:"-4px",padding:0}},i()().hour(e).minute(0).toDate().toLocaleString(r,{hour:"2-digit",minute:"2-digit"})))}))}function p(e){var t=e.status,n=e.error;return t||n?a.createElement("div",{className:"statusbar"},n?a.createElement("p",{className:"error"},""+n):a.createElement("p",{className:"status"},t)):null}var f=n(17),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.firstDay,n=e.startHour,r=e.endHour,s=e.numDays,o=e.events,u=e.locale,l=e.zoom,d=e.status,f=e.error,g=this.context.intl,v=[],b=i()(t),y=function(e){var t=i()(b).hour(n),a=i()(b).hour(r),s=i()(b).format("yyyy-MM-DD"),l=i()(t).startOf("day").valueOf()===i()().startOf("day").valueOf();v.push({name:Object(c.d)(t.toDate().toLocaleString(u,{weekday:"long",day:"numeric",month:"short"})),dayStart:t,dayEnd:a,isToday:l,events:o.filter(function(e){return e.start&&e.end&&e.start.dateTime&&e.end.dateTime&&(i()(e.start.dateTime).isBetween(t,a)||i()(e.end.dateTime).isBetween(t,a))}).map(function(e){return Object(c.f)(e,{startMoment:i()(e.start.dateTime),endMoment:i()(e.end.dateTime)})}).sort(function(e,t){return e.startMoment.valueOf>t.startMoment.valueOf?1:e.startMoment<t.startMoment?-1:0}),fullDayEvents:o.filter(function(e){return e.start&&e.end&&e.start.date&&e.end.date&&e.start.date<=s&&e.end.date>s}).map(function(e){return Object(c.f)(e,{startDate:e.start.date,endDate:e.end.date})})}),b=i()(b).add(1,"days")},k=0;k<s;++k)y();return a.createElement("div",{className:"vemendo-weekview"},a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",{style:{border:0}}),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement("p",{className:"dayname"},e.name))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement("p",{className:"week-number"},g.formatMessage({id:"calendar.weekNumber",defaultMessage:"V{weekNumber}"},{weekNumber:i()(t).week()}))),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},e.fullDayEvents.map(function(e){var t=e.id,n=e.text,r=e.location,s=e.description,i=e.htmlLink,o=e.className;return a.createElement("div",{key:t,className:"dayviewevent full-day "+o,title:n+(r?"\n"+g.formatMessage({id:"calendar.fullDayEventLocation",defaultMessage:"Plats: {location}"},{location:r}):"")+(s?"\n"+s:"")},a.createElement("a",{className:"event-title",href:i,target:"calendar-event"},n),r&&a.createElement("p",{className:"event-location"},r),s&&a.createElement("p",{className:"event-description"},s))}))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement(m,{startHour:n,endHour:r,locale:u,zoom:l})),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement(h,{key:e.dayStart.toISOString(),dayStart:e.dayStart,dayEnd:e.dayEnd,events:e.events,locale:u,zoom:l,isLastCall:""==d})," ")})),(d||f)&&(!f||"UnauthorizedError"!==f.name)&&a.createElement("tr",null,a.createElement("td",{style:{border:0}}),a.createElement("td",{style:{border:0},colSpan:s},a.createElement(p,{status:d,error:f}))))))},t.contextType=f.a,t}(a.Component),v=function(e){function t(t){var n=e.call(this,{discoveryDocs:"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest"})||this;return n.setBearerProvider(t),n}return r.c(t,e),t.prototype.listCalendars=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,this.ensureInited()];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,gapi.client.calendar.calendarList.list({})];case 3:return[2,e.sent().result.items];case 4:throw e.sent().error;case 5:return[2]}})})},t.prototype.batchEvents=function(e){var t=e.calendarList,n=e.timeMin,a=e.timeMax;return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:r.sent();try{return e=gapi.client.newBatch(),t.forEach(function(t){e.add(gapi.client.calendar.events.list({calendarId:t.id||"primary",timeMin:n&&new Date(n).toISOString(),timeMax:a&&new Date(a).toISOString(),showDeleted:!1,singleEvents:!0,fields:"items/id,items/start,items/end,items/summary,items/location,items/htmlLink,items/description",maxResults:2500,orderBy:"startTime"}),{id:t.id})}),[2,e.then(function(e){var n={};for(var r in t){var a=t[r].id,s=e.result[a].result.items;n[a]={calendar:t[r],events:s}}return n})]}catch(e){throw e.error}return[2]}})})},t}(n(86).a),b=n(88);var y=n(3);n.d(t,"a",function(){return k});var k=function(e){function t(t){var n=e.call(this,t)||this,r=t.firstDay;"string"!=typeof r&&"number"!=typeof r||(r=i()().startOf("week").weekday(r));var a=n.props,s=a.initialStartHour,o=a.initialEndHour,u=a.initialZoom;n.state={firstDay:r,startHour:s,endHour:o,zoom:u,calendars:{},calendarsBeingLoaded:[],status:"Loading calendars... (authenticating...)",error:null};var c=(t.env||y.a).googleTokenProvider;return n.gcal=new v(c),n.gcal.ensureInited().then(function(){return n.loadData(r)}).catch(function(e){n.handleError(e)}),n}return r.c(t,e),t.prototype.handleError=function(e){e||(e="Unknown error"),this.setState({error:e}),console.error(e.stack||e)},t.prototype.loadData=function(e){var t=this,n=this.props.numDays,r=this.context.intl;return this.setState({firstDay:e,calendars:{},calendarsBeingLoaded:[],error:null,status:r.formatMessage({id:"calendar.loadingCalendar",defaultMessage:"Loading calendars... (listing...)"})}),this.gcal.listCalendars().then(function(a){a=a.filter(function(e){return function(e){var t=e.summary||"",n=/owner/gi.test(e.accessRole),r=!!e.primary,a=/classroom/gi.test(e.id),s=/holiday/gi.test(e.id);return r||a||s||/schema/gi.test(t)&&n}(e)}),
//!/Week Numbers/ig.test(c.summary)
t.setState({status:r.formatMessage({id:"calendar.loadCalendarEvents",defaultMessage:"Load calendar events..."})}),t.gcal.batchEvents({calendarList:a,timeMin:i()(e).startOf("day"),timeMax:i()(e).add(n,"days").endOf("day")}).then(function(e){t.setState({calendars:e,status:""})})})},t.prototype.navigateToPreviousWeek=function(){var e=this;this.loadData(i()(this.state.firstDay).add(-1,"week")).catch(function(t){e.handleError(t)})},t.prototype.navigateToNextWeek=function(){var e=this;this.loadData(i()(this.state.firstDay).add(1,"week")).catch(function(t){e.handleError(t)})},t.prototype.render=function(){var e=this,t=this.props.numDays,n=this.context.intl,r=this.state,s=r.firstDay,o=r.startHour,u=r.endHour,l=r.zoom,d=r.calendars,h=r.status,m=r.error,p=Object.keys(d).map(function(e){return d[e]}).map(function(e){var t=e.calendar,n=e.events,r="Skolschema"===t.summary&&"Synchronized"===t.description,a=/holiday/.test(t.id),s=(/classroom/.test(t.id),[]);return t.colorId&&s.push("gcal-palette-"+t.colorId),r&&s.push("course-event"),a&&s.push("holiday-event"),n.map(function(e){return{id:e.id,start:e.start,end:e.end,text:e.summary,location:e.location,description:e.description,htmlLink:e.htmlLink,className:(r&&e.summary?s.concat(Object(b.a)("course-event-",e.summary)):s).join(" ")}})}),f=Object(c.k)(p);return a.createElement("div",{style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"btn-toolbar week-navigation"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.navigateToPreviousWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.navigateToNextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))),a.createElement("div",{className:"btn-group"},n.formatMessage({id:"calendar.currentDate",defaultMessage:"Vecka {week}, {year}"},{week:i()(s).week(),year:i()(s).year()}))),a.createElement(g,{locale:n.locale,firstDay:s,startHour:o,endHour:u,numDays:t,zoom:l,events:f,status:h,error:m}))},t.contextType=f.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(47),i=n(23),o=n(6),u=n.n(o),c=n(12),l=n(70),d=n(5),h=function(e){function t(t){var n=e.call(this,t)||this;return n.state={description:t.note?t.note.description:"",color:t.note?t.note.color:"yellow"},n}return r.c(t,e),t.prototype.delete=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,e.weekDate,t=e.courseName,n=e.weekPlan,e.note,a=e.closeDialog,s=e.env,i=this.state,i.description,i.color,a(),1!==Object.keys(n.plans).length?[3,2]:[4,s.kgTermPlannerRepo.delete([n.id])];case 1:return r.sent(),[3,4];case 2:return[4,s.kgTermPlannerRepo.update([n],function(e){delete e.plans[t]})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,u,c,l;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,t=e.weekDate,n=e.courseName,a=e.weekPlan,e.note,s=e.closeDialog,i=e.env,o=this.state,u=o.description,c=o.color,s(),0==u.length?[2]:a?[4,i.kgTermPlannerRepo.update([a],function(e){return e.plans[n]={description:u,color:c}})]:[3,2];case 1:return r.sent(),[3,4];case 2:return(l={})[n]={description:u,color:c},[4,i.kgTermPlannerRepo.insert([{id:Object(d.h)(),dateTime:t,plans:l}])];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.weekNumber,r=t.courseName,s=(t.weekPlan,t.note),i=t.env,o=this.state,u=o.description,c=o.color,l=i.tutored;return a.createElement("div",null,a.createElement("div",null,a.createElement("h2",null,"Händelse för vecka ",n," och ",r),a.createElement("hr",null),a.createElement("div",{className:"align-table"},a.createElement("div",null,"Beskrivning:"),a.createElement("div",{className:"fullWidth"},a.createElement("textarea",{autoFocus:!0,value:u,disabled:l,onChange:function(t){return e.setState({description:t.target.value})}}))),a.createElement("div",{className:"align-table"},a.createElement("div",null,"Färg:"),a.createElement("div",null,a.createElement("select",{value:c,disabled:l,onChange:function(t){return e.setState({color:t.target.value})}},a.createElement("option",{value:"yellow"},"Gul"),a.createElement("option",{value:"yellowLight"},"Ljusgul"),a.createElement("option",{value:"cyan"},"Grön"),a.createElement("option",{value:"cyanLight"},"Ljusgrön"),a.createElement("option",{value:"purple"},"Lila"),a.createElement("option",{value:"purpleLight"},"Ljuslila"),a.createElement("option",{value:"red"},"Röd"),a.createElement("option",{value:"redLight"},"Rosa"))))),a.createElement("div",null,l?a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.props.closeDialog()}},"Avbryt"):a.createElement(a.Fragment,null,a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},"Spara"),s&&a.createElement("a",{tabIndex:1,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.delete()}},"Ta bort"))))},t}(a.Component),m=n(2),p=n(41),f=n(157),g=n(24);n.d(t,"a",function(){return v});var v=function(e){function t(t){var n=e.call(this,t)||this,r=new Date;return n.state={now:r,courses:[],weekPlans:[],isLoadingCourses:!0,isLoadingWeekPlans:!0,dialogs:[]},n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.loadEDSCourses(),this.props.env.kgTermPlannerRepo.mem.subscribe(this.updateWeekPlans)},t.prototype.componentWillUnmount=function(){this.props.env.kgTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e){this.setState({weekPlans:e,isLoadingWeekPlans:!1})},t.prototype.loadEDSCourses=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,,2,3]),e=Object(i.c)(u()(this.state.now)),t=new s.a(e).period,a=m.j,[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return n=a.apply(void 0,[r.sent(),function(e){return e.name}]),this.setState({courses:n}),[3,3];case 2:return this.setState({isLoadingCourses:!1}),[7];case 3:return[2]}})})},t.prototype.onNoteClick=function(e,t,n,r,s){var i=this;this.openDialog(a.createElement(h,{weekNumber:e,weekDate:t,courseName:n,weekPlan:r,note:s,env:this.props.env,closeDialog:function(){return i.closeDialog()}}))},t.prototype.onTutorClick=function(e,t){var n=this;this.openDialog(a.createElement(f.a,{weekNumber:t,comment:e.value,updateData:function(t){return n.updateTutorNoteField(e,t)},deleteNoteData:function(){return n.deleteTutorNoteField(e.id)},closeDialog:function(){return n.closeDialog()}}))},t.prototype.deleteTutorNoteField=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.props.env.kgTermPlannerRepo.delete([e])];case 1:return t.sent(),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}})})},t.prototype.updateTutorNoteField=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if((e&&e.value||"")===t)return[2];n.label=1;case 1:return n.trys.push([1,3,,4]),e.value=t,e.acl=[new d.b("tutorFor",this.props.env.currentUser.mail,"S").toString(),new d.b("email",this.props.env.currentUser.mail,"R").toString()],[4,this.props.env.kgTermPlannerRepo.upsert(e,function(e){return e.value=t})];case 2:return[2,n.sent()];case 3:return n.sent(),[3,4];case 4:return[2]}})})},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.render=function(){for(var e=this,t=this.state,n=t.courses,s=t.now,o=t.isLoadingCourses,h=t.isLoadingWeekPlans,m=t.weekPlans,f=t.dialogs,v=o||h,b=[],y=[],k=Object(i.c)(u()(s)),w=r.f(Object(i.d)(s,"AT"===k.term),2),E=w[0],T=w[1],S=r.f(Object(i.b)(k.term),2),C=S[0],D=S[1],N=g.b.kgTutorComment,O=m.filter(function(e){return!e.type}),M=m.filter(function(e){return"tutor-note"===e.type}),P=function(e){var t=e.week(),n=e.year(),r=Object(p.a)(n,t);if(t>=C&&t<=D){var a=O.filter(function(e){return e.dateTime>=r.notBefore&&e.dateTime<=r.notAfter})[0],s=M.filter(function(e){return e.dateTime>=r.notBefore&&e.dateTime<=r.notAfter})[0],i=e.clone().startOf("week").valueOf();b.push({weekNumber:t,weekDate:i,weekPlan:a}),y.push({weekNumber:t,tutorValue:s||{value:"",dateTime:i,id:Object(d.h)(),type:"tutor-note"}})}},x=E.clone();x.valueOf()<T.valueOf();x=x.clone().add(1,"week").startOf("week"))P(x);return a.createElement("div",{className:"ked_boxed"},a.createElement("h4",null,"Terminsplanering"),a.createElement("hr",null),v?a.createElement(c.a,null):0===n.length?a.createElement("div",null,"Terminsplaneraren aktiveras när du skrivits in på dina kurser"):a.createElement("table",{className:"termplanner-table zebra"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Vecka"),n.map(function(e,t){return a.createElement("th",{key:t,className:"kgCourseHeader"},e.name)}),N&&a.createElement("th",{className:"tutorHeader"}))),a.createElement("tbody",null,b.map(function(t,r){var s=t.weekNumber===u()().week(),i=y&&y.find(function(e){return e.weekNumber===t.weekNumber});return a.createElement("tr",{key:r,className:s?"currentWeek":""},a.createElement("td",null,t.weekNumber),n.map(function(n,r){var s=t.weekPlan&&t.weekPlan.plans[n.name];return a.createElement("td",{key:r,className:s?"courseNote note-color-"+s.color:"courseNote","data-tooltip":s&&s.description,title:s&&s.description,onClick:function(){return e.onNoteClick(t.weekNumber,t.weekDate,n.name,t.weekPlan,s)}},s?a.createElement("i",{className:"fas fa-align-center"}):"")}),N&&(e.props.tutored?a.createElement("td",{key:r,onClick:function(){return e.onTutorClick(i.tutorValue,t.weekNumber)},className:"tutorCell"},i.tutorValue.value?a.createElement("div",{key:r,"data-tooltip":i.tutorValue.value},a.createElement("i",{className:"fas fa-comment-dots"})):a.createElement("div",{key:r},a.createElement("i",{className:"fas fa-comment-medical"}))):i.tutorValue.value?a.createElement("td",{className:"tutorCell"},a.createElement("div",{"data-tooltip":i.tutorValue.value},a.createElement("i",{className:"far fa-comment-dots"}))):a.createElement("td",null)))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",{key:"points"},"Poäng"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.credits)})),a.createElement("tr",null,a.createElement("th",null,"Betygsmål"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.periodGoalGrade)})))),a.createElement(l.a,{dialogs:f,popDialog:function(){return e.setState({dialogs:f.slice(0,f.length-1)})}}))},t}(a.Component)},,,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(160),s=n(113);function i(){return r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0})}})}},function(e,t,n){"use strict";var r=n(1),a=n(3),s=n(0),i=n.n(s),o=n(2),u=n(12),c=n(145),l=n(7),d=n(5),h=n(47),m=n(21),p=n(158),f=n(56),g=n(23),v=function(e){function t(t,n){var a=this,s=n(),i=new Date,o=r.f(Object(g.d)(i,i.getMonth()>=7),2),u=o[0],c=o[1];return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){return r.d(this,function(e){return[2,{from:u.startOf("week").add(-2,"days").toDate().valueOf(),to:c.startOf("week").add(5,"days").toDate().valueOf(),role:"USER"}]})})}})||this}return r.c(t,e),t}(f.a),b=new v(function(){return a.a.kedBackendClient},function(){return a.a.currentUser});a.a.kgTermPlannerRepo=b;var y=n(35);function k(e,t){return r.b(this,void 0,void 0,function(){function n(t,n,a){var s=null;return{getBearer:function(){return s||this.refreshBearer()},refreshBearer:function(){return s=function(){return r.b(this,void 0,void 0,function(){var s,i,o,u;return r.d(this,function(r){switch(r.label){case 0:return[4,t.get(n,a)];case 1:return 200!==(s=r.sent()).status?[3,3]:[4,s.json()];case 2:return[2,r.sent()];case 3:return i=d.c.bind,o=[void 0,s.status],u="Could not retrieve tutor token for "+e+". Error Message: ",[4,s.text()];case 4:throw new(i.apply(d.c,o.concat([u+r.sent()])))}})})}()}}}var s,i,o,u,c,f;return r.d(this,function(r){switch(r.label){case 0:return s={mail:e,displayName:t,roles:["USER"],school:a.a.currentUser.school,tutorFor:e},i=n(a.a.kedBackendClient.http,"tutor/token",{userEmail:e}),o=new d.d(m.c,i,l.b.KED_API_URL),u=n(o.http,"tutor/convert-token/google"),c=new h.b(m.c,l.b.EDS_API_URL,i,function(){return e}),(f={currentUser:s,bearerProvider:i,edsClient:c,googleTokenProvider:u,kedBackendClient:o,tutored:!0}).ksTermPlannerRepo=new p.a(function(){return o},function(){return s}),f.kgTermPlannerRepo=new v(function(){return o},function(){return s}),f.userTasksRepo=new y.a(function(){return o},function(){return s}),[4,i.getBearer().catch(function(e){console.error(e)})];case 1:return r.sent(),[2,f]}})})}n.d(t,"a",function(){return w});var w=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,students:[]},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,5,6]),[4,a.a.edsClient.getTeacherTutorStudents()];case 1:return(e=r.sent()).sort(Object(o.h)(["lastName","firstName"])),t=e.length>0?e.map(function(e){return{mail:e.email,displayName:e.firstName+" "+e.lastName}}):[a.a.currentUser],[4,this.setState({students:t})];case 2:return r.sent(),[3,6];case 3:return n=r.sent(),console.error("Could not list tutor students",n),[4,this.setState({students:[a.a.currentUser]})];case 4:return r.sent(),[3,6];case 5:return this.setState({isLoading:!1}),[7];case 6:return[2]}})})},t.prototype.onSelectUser=function(e){var t=this.state.students.filter(function(t){return t.mail===e})[0],n=r.a({},t,{roles:["USER"]});c.a.setNewEnv(n,function(){return k(e,e)})},t.prototype.render=function(){var e=this,t=this.state,n=t.isLoading,r=t.students;return n?i.a.createElement(u.a,null):i.a.createElement("div",{className:"tutors-select"},i.a.createElement("select",{onChange:function(t){return t.target.value&&e.onSelectUser(t.target.value)}},i.a.createElement("option",{value:""},"Välj elev"),r.map(function(e){return i.a.createElement("option",{key:e.mail,value:e.mail},e.displayName," (",e.mail,")")})))},t}(i.a.Component)},,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r,a=n(1),s=n(0),i=n(2),o=n(3),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assessments:[],error:null,loading:!1},n}return a.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return a.b(this,void 0,void 0,function(){var e,t;return a.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,o.a.edsClient.getLatestAssessments(this.props.limit)];case 2:return e=n.sent(),this.setState({assessments:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=this.state.assessments.some(function(e){return!!e.gradeName});return s.createElement("div",{className:"ked_boxed"},s.createElement("h4",null,Object(i.a)(r||(r=a.e(["Senaste bedömningar"],["Senaste bedömningar"])))),s.createElement("hr",null),s.createElement("ul",{className:"latest-assesments zebra"},this.state.assessments.map(function(t,n){return s.createElement("li",{key:n},e&&""!=t.gradeName&&s.createElement("span",{className:"grade pill pull-right"},t.gradeName),s.createElement("span",{className:"date pill pull-left"},t.publishDateTime.substr(0,10)),t.courseName==t.courseUnitName?s.createElement("h5",null,s.createElement("strong",null,t.courseName)):s.createElement("h5",null,s.createElement("strong",null,t.courseName)," / ",s.createElement("em",null,t.courseUnitName)),s.createElement("br",null),s.createElement("p",null,t.text))})))},t}(s.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(160),s=n(3);function i(){return r.createElement(a.a,{env:s.a,tutored:!1})}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(0),a=n(144),s=n(113),i=n(17);function o(e){var t=e.intl;return r.createElement(i.a.Provider,{value:{intl:t}},r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0,initialDate:new Date})}}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(73),i=n(13),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courses:[],isLoading:!0},n.updateHiddenCoursesState=n.updateHiddenCoursesState.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){s.a.subscribe(this.updateHiddenCoursesState,{fullCourse:!1})},t.prototype.updateHiddenCoursesState=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.componentWillUnmount=function(){s.a.unsubscribe(this.updateHiddenCoursesState)},t.prototype.getCourseUrl=function(e){return Object(i.f)(this.props.viewCourseUrl,{courseId:e})},t.prototype.render=function(){var e=this,t=(this.props.viewCourseUrl,this.state),n=t.isLoading,r=t.error,s=(t.courses,this.state.courses.filter(function(e){return e.visible}));return a.createElement(a.Fragment,null,n?a.createElement("li",{className:"lvl2 header"},a.createElement("a",null,"Laddar...")):r?a.createElement("li",{className:"lv12"},a.createElement("a",null,"Kunde inte ladda kurser.")):s.map(function(t){var n=t.name,r=t.id;return a.createElement("li",{key:r,className:"lvl2"},a.createElement("a",{href:e.getCourseUrl(r)},n))}))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n.n(a),i=n(56),o=n(3),u=o.a.weekNotesRepo,c=function(e){function t(){var t=e.call(this,{getClient:function(){return o.a.kedBackendClient},optimistic:!1,table:"notes",user:o.a.currentUser?o.a.currentUser.mail:"",getQueryOptions:function(){return r.b(t,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}})||this;return t}return r.c(t,e),t}(i.a);u||(u=o.a.weekNotesRepo=new c);var l=n(89),d=n(5),h=n(57),m=n(53),p=n(87),f=n(12);function g(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i;return r.d(this,function(r){switch(r.label){case 0:return a=!1,s=setTimeout(function(){a=!0,n()},e),[4,t()];case 1:return i=r.sent(),a||clearTimeout(s),[2,i]}})})}var v=n(8),b=n(17),y=function(e){function t(t){var n=e.call(this,t)||this;return n.onChange=n.onChange.bind(n),n.autoSaver=new l.a(function(){return n.save()}),n.state={isLoading:!0,showLoadingProgress:!1,showSavingProgress:!1,everEdited:!1,notes:""},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.showProgressIfLoadingTakesTime(),u.mem.subscribe(this.onChange)},t.prototype.showProgressIfLoadingTakesTime=function(){var e=this;this.timeoutHandle=setTimeout(function(){return e.state.isLoading&&e.setState({showLoadingProgress:!0})},300)},t.prototype.componentWillUnmount=function(){u.mem.unsubscribe(this.onChange),this.autoSaver.stop(),clearTimeout(this.timeoutHandle)},t.prototype._save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:e=3,n.label=1;case 1:return this.isNotesEdited()&&e?[4,u.upsert(this.state.weekNote,function(e){e.content=t.state.notes})]:[3,4];case 2:n.sent(),n.label=3;case 3:return--e,[3,1];case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return this.state.showSavingProgress||this.state.isLoading||!this.isNotesEdited()?[3,8]:[4,this.setState({error:void 0})];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,4,6,8]),[4,g(300,function(){return t._save()},function(){return t.setState({showSavingProgress:!0})})];case 3:return n.sent(),[3,8];case 4:return e=n.sent(),console.error(e),[4,this.setState({error:this.context.intl.formatMessage({id:"common.errorSavingData",defaultMessage:"Kunde inte spara."})})];case 5:return n.sent(),[3,8];case 6:return[4,this.setState({showSavingProgress:!1})];case 7:return n.sent(),[7];case 8:return[2]}})})},t.prototype.isNotesEdited=function(){var e=this.state,t=e.weekNote,n=e.notes;return!!t&&n!==t.content},t.prototype.getTranslatedActions=function(e){var t=Object.assign({},"sv"===e.locale?m.a:p.a);return Object.keys(t).forEach(function(n){var r=m.a[n].title;t[n].title=e.formatMessage({id:"wysiwyg."+n,defaultMessage:r}),"image"===n&&(t[n].promptMsg=e.formatMessage({id:"wysiwyg.imagePromptMsg",defaultMessage:m.a[n].promptMsg}))}),t},t.prototype.onChange=function(e){var t=e.length>0?e[e.length-1]:{id:Object(d.h)(),dateTime:Date.now(),content:"",acl:[new d.b("email",o.a.currentUser.mail,"S")].map(function(e){return e.toString()})},n={weekNote:t,isLoading:!1,showLoadingProgress:!1};this.state.weekNote&&this.state.weekNote.id===t.id&&0!==e.length||(n.notes=t.content),this.setState(n)},t.prototype.render=function(){var e=this,t=this.state,n=t.notes,r=t.showLoadingProgress,a=t.isLoading,i=t.showSavingProgress,o=t.error,u=t.everEdited,c=this.context.intl;return s.a.createElement("div",null,s.a.createElement("div",{className:"ked_boxed kedNotepad"},s.a.createElement("h3",null,s.a.createElement(v.a,{id:"weekNotebook.title",defaultMessage:"Anteckningar"})),s.a.createElement(h.a,{actions:["bold","italic","underline","strikethrough","olist","ulist","outdent","indent","line"],defaultActions:this.getTranslatedActions(c),html:a?"<div></div>":n.substr(0,16384),onChange:!a&&function(t){e.setState({notes:t.substr(0,16384),everEdited:!0}),e.autoSaver.triggerChange(500)}}),s.a.createElement("hr",null),o?s.a.createElement("p",{className:"error"},o):r?s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.loading",defaultMessage:"Laddar..."}),s.a.createElement(f.a,null)):i?s.a.createElement(s.a.Fragment,null,s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.saving",defaultMessage:"Sparar..."}),"   "),s.a.createElement(f.a,null)):this.isNotesEdited()?s.a.createElement(s.a.Fragment,null," "):u?s.a.createElement(v.a,{id:"common.saved",defaultMessage:"Sparad"}):s.a.createElement(s.a.Fragment,null," ")))},t.contextType=b.a,t}(s.a.Component);function k(e){var t=e.intl;return a.createElement(b.a.Provider,{value:{intl:t}},a.createElement(y,null))}n.d(t,"b",function(){return y}),n.d(t,"a",function(){return k})},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2),i=n(47),o=function(e){this.subjects=e.map(function(e){var t=e.periodGoals.map(function(e){return{period:new i.a(e.periodName),goal:e.gradeName}});return{name:e.courseUnitName,atGoal:t.filter(function(e){return"AT"===e.period.term}).map(function(e){return e.goal})[0],stGoal:t.filter(function(e){return"ST"===e.period.term}).map(function(e){return e.goal})[0],finalGoal:e.finalGoalGrade,strategies:e.strategyText}})},u=n(3),c=function(e){var t={};e.forEach(function(e){return e.capabilities.forEach(function(e){return t[e.formName]=!0})});var n=Object.keys(t);this.columnHeaders=[{name:"Framtidsförmåga",type:"header"},{name:"Område",type:"header"}].concat(n.map(function(e){return{name:e,type:"year"}})),this.vtHts=Object(s.k)(n.map(function(e){return["HT","VT"]}));var r=[];e.forEach(function(e){var t=[{type:"ability",name:e.abilityName}],n={};e.capabilities.forEach(function(e){var a=[{type:"term",selected:!1!==e.htHasValue},{type:"term",selected:!1!==e.vtHasValue}];n[e.capabilityName]?t&&a.forEach(function(e){return t.push(e)}):(t.length>1&&(r.push(t),t=[]),n[e.capabilityName]=!0,t.push({type:"capability",name:e.capabilityName}),a.forEach(function(e){return t.push(e)}))}),t&&r.push(t)}),this.capabRows=r},l=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loading:!1,data:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentFutureAbilities()];case 2:return e=n.sent(),this.setState({data:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=new c(this.state.data),t=e.columnHeaders,n=e.vtHts,r=e.capabRows;return a.createElement("div",null,a.createElement("h5",null,"Framtidsförmågor"),a.createElement("div",{className:"partialEditStudyPlanViewMode"},a.createElement("table",{style:{width:"100%"},className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,t.map(function(e,t){var n=e.name;return"header"===e.type?a.createElement("th",{key:t,rowSpan:2},n):a.createElement("th",{key:t,colSpan:2},n)})),a.createElement("tr",{className:"header"},n.map(function(e,t){return a.createElement("th",{key:t},e)}))),a.createElement("tbody",null,r.map(function(e,t){return a.createElement("tr",{key:t,className:Math.floor(t/3)%2&&"tableOdd"},e.map(function(e,t){return"ability"===e.type?a.createElement("td",{key:t,rowSpan:3,className:"goalsSubject"},e.name):"capability"===e.type?a.createElement("td",{key:t,className:"goalsSubject"},e.name):e.selected?a.createElement("td",{key:t,className:"edsSelected"},a.createElement("div",{className:"markedItem"})):a.createElement("td",{key:t})}))})))))},t}(a.Component);n.d(t,"a",function(){return v});var d,h,m,p,f,g,v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loadingStudyPlans:!1,studyPlans:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loadingStudyPlans:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentGoals()];case 2:return e=n.sent(),this.setState({studyPlans:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loadingStudyPlans:!1}),[2]}})})},t.prototype.render=function(){var e=new o(this.state.studyPlans),t="gymnasium"!==(""+u.a.currentUser.schoolType).toLowerCase();return a.createElement("div",{className:"ked_boxed"},a.createElement("h4",null,Object(s.a)(d||(d=r.e(["Mål"],["Mål"])))),a.createElement("hr",null),a.createElement("table",{className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,Object(s.a)(h||(h=r.e(["Ämne"],["Ämne"])))),t&&a.createElement("th",null,Object(s.a)(m||(m=r.e(["HT"],["HT"])))),t&&a.createElement("th",null,Object(s.a)(p||(p=r.e(["VT"],["VT"])))),a.createElement("th",null,Object(s.a)(f||(f=r.e(["Slutmål"],["Slutmål"])))),a.createElement("th",null,Object(s.a)(g||(g=r.e(["Strategier"],["Strategier"])))))),a.createElement("tbody",null,e.subjects.map(function(e,n){return a.createElement("tr",{key:e.name,className:n%2&&"tableOdd"},a.createElement("td",{className:"goalsSubject"},e.name),t&&a.createElement("td",{className:"goalsTerm"},e.atGoal),t&&a.createElement("td",{className:"goalsTerm"},e.stGoal),a.createElement("td",{className:"goalsEnd"},e.finalGoal),a.createElement("td",null,e.strategies))}))),a.createElement("div",{className:"divider"}),a.createElement(l,null))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0);function s(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,fetch(e+"?nodeID="+t,{credentials:"same-origin"})];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()]}})})}var i=n(141),o=n(62),u=n(8),c=n(17);n.d(t,"a",function(){return d});var l=function(e){function t(t){var n=e.call(this,t)||this;return n.state={data:null},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,s(this.props.apiPath,this.props.pageId)];case 1:return e=t.sent(),this.setState({data:e}),[2]}})})},t.prototype.render=function(){if(!this.state.data)return a.createElement("div",null);var e=this.state.data,t=e.moduleName,n=e.subject,r=e.commonTasks,s=e.learningGoals,o=e.step,u=this.props.intl,l=r.map(function(e){return{id:e.id,name:e.name,url:e.url,courseName:n.name,learningGoal:o&&s.length>0?t+" - övergripande":t}}),d=s.map(function(e){return{name:e.name,learningTasks:e.tasks.map(function(t){return{id:t.id,name:t.name,url:t.url,courseName:n.name,learningGoal:e.name}})}});return o&&(l.forEach(function(e){return e.step=o}),d.forEach(function(e){return e.learningTasks.forEach(function(e){return e.step=o})})),a.createElement(c.a.Provider,{value:{intl:u}},a.createElement(i.a,{commonTasks:l,learningGoals:d}))},t}(a.Component),d=Object(o.a)(Object(u.d)(l))},function(e,t,n){"use strict";var r=n(0),a=n(78),s=n(120),i=n(3),o=n(9),u=n(13);function c(e){var t=e.viewCourseUrl,n=i.b.currentUser.schoolGrade,a="gymnasium"!==(""+i.b.currentUser.schoolType).toLowerCase(),s=n&&a&&o.c.courses.tags("grade:"+n).idsAndNamesOnly().toValue().read();return r.createElement(r.Fragment,null,r.createElement(r.Fragment,null,s&&0!==s.length?s.map(function(e){return r.createElement("li",{key:e.id,className:"lvl2"},r.createElement("a",{href:Object(u.f)(t,{courseId:e.id})},e.name))}):r.createElement("li",{className:"lvl2 header"},r.createElement("a",null,"Kunde inte ladda kurser."))))}function l(e){var t=e.viewCourseUrl;return r.createElement(s.a,{fallback:r.createElement(a.a,null)},r.createElement(c,{viewCourseUrl:t}))}n.d(t,"a",function(){return l})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"Calendar",function(){return l}),n.d(r,"CalendarTutored",function(){return h}),n.d(r,"WeekPlanner",function(){return f}),n.d(r,"WeekPlannerTutored",function(){return g}),n.d(r,"LatestAssessments",function(){return v.a}),n.d(r,"LearningTasks",function(){return b.a}),n.d(r,"WeekNotebook",function(){return y.a}),n.d(r,"TutorsSelect",function(){return k.a}),n.d(r,"KGTermPlanner",function(){return w.a}),n.d(r,"KGTermPlannerTutored",function(){return E.a}),n.d(r,"ListCourses",function(){return T.a}),n.d(r,"KSTermPlanner",function(){return C}),n.d(r,"KSTermPlannerTutored",function(){return D.a}),n.d(r,"KSGoals",function(){return N.a}),n.d(r,"MyCourses",function(){return O.a}),n.d(r,"MySubjects",function(){return M.a});var a=n(1),s=n(27),i=(n(104),n(3)),o=n(0),u=n(17),c=n(159);function l(e){var t=e.intl;return o.createElement(u.a.Provider,{value:{intl:t}},o.createElement(c.a,a.a({},a.a({},e,{env:i.a}))))}var d=n(113);function h(e){var t=e.intl;return o.createElement(u.a.Provider,{value:{intl:t}},o.createElement(d.a,{tutored:!0,createComponent:function(t){return o.createElement(c.a,a.a({key:t.currentUser.mail},e,{env:t}))}}))}var m=n(67),p=n(7);n(35);function f(e){var t=e.intl;return o.createElement(u.a.Provider,{value:{intl:t}},o.createElement(m.a,{env:i.a,viewCourseUrl:p.b.KED_COURSE_VIEWER_URL}))}function g(e){var t=e.intl;return o.createElement(u.a.Provider,{value:{intl:t}},o.createElement(d.a,{tutored:!0,createComponent:function(e){return o.createElement(m.a,{key:e.currentUser.mail,env:e,viewCourseUrl:p.b.KED_COURSE_VIEWER_URL})}}))}var v=n(180),b=n(186),y=n(184),k=n(172),w=n(181),E=n(171),T=n(134),S=n(144);function C(e){var t=e.intl;return o.createElement(u.a.Provider,{value:{intl:t}},o.createElement(S.a,{env:i.a,tutored:!1,initialDate:new Date}))}var D=n(182),N=n(185),O=n(183),M=n(187);i.a.bearerProvider.getBearer(),i.a.googleTokenProvider.getBearer();var P=n(62),x=n(8);p.a.KED_SUBJECT_PLANNER_URL="/ap/amnesplaneraren",p.a.KED_SUBJECT_PLANNER_ADMIN_URL="/ap/amnesplanerarenadmin";var I={};Object.keys(r).forEach(function(e){I[e]=Object(P.a)(Object(x.d)(r[e]))});var L=a.a({},I);s.a.components=a.a({},s.a.components,L)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,