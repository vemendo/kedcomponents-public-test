var kedappcourseviewer=function(e){function t(t){for(var r,i,o=t[0],u=t[1],c=t[2],d=0,m=[];d<o.length;d++)i=o[d],a[i]&&m.push(a[i][0]),a[i]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(l&&l(t);m.length;)m.shift()();return s.push.apply(s,c||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var u=n[o];0!==a[u]&&(r=!1)}r&&(s.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={2:0},s=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],u=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var l=u;return s.push([299,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return i}),n.d(t,"k",function(){return u}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return l}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return p}),n.d(t,"n",function(){return h}),n.d(t,"l",function(){return f}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return b}),n.d(t,"e",function(){return v}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return y});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function i(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var o=[].concat;function u(e){return o.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function l(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var i=t[r],o=n[r];return i===o?0:null==i?-1:null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function h(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function f(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],i=t(s),o=n[i];o?o.push(s):n[i]=[s]}return n}function b(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function v(e,t){var n,a,s={};try{for(var i=r.h(t),o=i.next();!o.done;o=i.next()){var u=o.value;u in e&&(s[u]=e[u])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(n)throw n.error}}return s}function k(e,t){var n=b(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function y(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var i=n[a];if(r[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(36);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(27);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,function(e,t,n){"use strict";var r=n(3),a=n(4),s=n(18),i=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(20);function u(e,t){return o.a[e].relationships[t]}function c(e,t){var n=function(e){var t=function(e){return!0};return e.from?l(t,function(t){return t.dateTime>=e.from}):e.to?l(t,function(t){return t.dateTime<e.to}):e.ids?l(t,function(t){return e.ids.includes(t.id)}):e.name?l(t,function(t){return t.name===e.name}):e.tags?l(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function l(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var p=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var s=a[r];localStorage.setItem("cache-bust-"+n+"-"+s,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+u(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),h=n(14);function f(e,t){for(var n=Object.keys(t),r=e,s=0,i=n;s<i.length;s++){var o=i[s];r===e&&(r=a.a({},e));var u=t[o];if(u&&"object"==typeof u){var c=Object.keys(u).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var l=function(e){var t=u[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var s=0,i=n;s<i.length;s++){var c=i[s];a.includes(c)||a.push(c)}break;case"$remove":var l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!l.includes(e)})}},d=0,m=c;d<m.length;d++){l(m[d])}continue}}r[o]=u}return r}function g(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,s=Object.keys(t),i=a.a({},e),o=0,u=s;o<u.length;o++){var c=u[o],l=t[c];if(l&&"object"==typeof l){var d=Object.keys(l).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var m=function(e){var t=l[e];switch(e){case"$unset":r?delete i[c]:i[c]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var s=o.$remove;Array.isArray(s)&&(o.$remove=s.filter(function(e){return!n.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(n):n.slice(),o.$add=d;break;case"$remove":var o,u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!u.includes(e)}),0===o.$add.length&&delete o.$add),s=(s=o.$remove)?s.concat(u):u.slice(),o.$remove=s}},p=0,h=d;p<h.length;p++){m(h[p])}continue}}i[c]=l}return i}var b=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(s=r[n]).op||s.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==s.op||s.targetBranchId&&s.branchId!==this.query.branchId&&s.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===s.op&&(s.deltaDoc.tags&&this.query.tags||s.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:i=this.getDataWithMutationsApplied(e,!1,this.data),this.data=i,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,s=this.includes,i=this.query,o=i.hasEdgesFrom?[].concat(i.hasEdgesFrom||[]):[],c=i.tags?[].concat(i.tags||[]):[];switch(t.op){case"update":return Object(h.e)(e,function(e){if(e.id===t.id){var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return s.forEach(function(r){var s,i=e[r];if(i){var o=Object(h.e)(i,function(e){if(e.id!==t.id)return e;var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==i&&(e=a.a({},e,((s={})[r]=o,s)))}}),e});case"add-related":if(r===t.table&&-1!==s.indexOf(t.graphProp))return Object(h.e)(e,function(e){var r;if(e.id!==t.id)return e;var s=a.a({},t.relatedDoc);return n&&(s.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([s]),r))});if(i.hasEdgesFrom&&o.includes(t.id)&&r===u(t.table,t.graphProp)){if(!i.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return i.ids&&i.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==s.indexOf(t.graphProp)?Object(h.e)(e,function(e){var r,s=e[t.graphProp];return s?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?s.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):s.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):i.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(i.include){var l=s.map(function(e){return{label:e,table:u(r,e)}}).filter(function(e){return e.table===t.table});if(l.length>0)return Object(h.e)(e,function(e){return l.forEach(function(r){var s,i=r.label,o=e[i];o&&(e=a.a({},e,((s={})[i]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),s)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),v=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new i(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return b.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesFrom",e)},t.prototype.hasEdgesTo=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesTo",e)},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:p.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new s.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(32).a),k=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===b.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var s=a.find(function(t){return o.a[r.table].relationships[t]===e});if(s){for(var i={},u=0,l=r.data;u<l.length;u++){var d=l[u];c(t,d[s]).forEach(function(e){return i[e.id]=e})}var m=Object.keys(i).map(function(e){return i[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var p=c(t,r.data);return t.ids.every(function(e){return p.some(function(t){return t.id===e})})?{value:p}:"continue"}},s=0,i=this.queries;s<i.length;s++){var u=a(i[s]);if("object"==typeof u)return u.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,s=this.findQuery(n,r);s?s.timeoutHandle&&(clearTimeout(s.timeoutHandle),s.timeoutHandle=null):(s=new b(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(s)),s.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,s=(n.repo,this.findQuery(r,a));s&&(s.unsubscribe(e),0===s.subscriptions.length&&(s.timeoutHandle=setTimeout(function(){0===s.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==s}))},this.queries.length>50?500:3e5)))},e}(),y=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return u(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return u(e,t)})).some(function(e){return u(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),s=e.length,i=function(t){var s=e[t];if("update"===s.op){var i=r.findIndex(function(e){return"update"===e.op&&e.branchId===s.branchId&&e.id===s.id});i>=0&&(n[t]=a.a({},s,{deltaDoc:g(s.deltaDoc,r[i].deltaDoc)}),r.splice(i,1))}},o=0;o<s;++o)i(o);return n.concat(r)},e}(),E=n(37);function w(e,t,n,r,s,i){for(var o=function(n){switch(n.op){case"add-related":i||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:s}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(i||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:s,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((u=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var o=t[u];t=t.slice(0,u).concat([a.a({},o,{$meta:r?"removing":"persisted"})],t.slice(u+1))}else t=t.slice(0,u).concat(t.slice(u+1));break;case"update":if(n.branchId!==e)return"continue";var u;if((u=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!i)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[s],$meta:r?"adding":"persisted"}].concat(t);else{var c=t[u],l=c.contributors.slice();l.includes(s)||l.push(s);var d=g(c.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:l,$meta:r?"updating":"persisted"}].concat(t.slice(0,u),t.slice(u+1)):t.slice(0,u).concat(t.slice(u+1))}}},u=0,c=n;u<c.length;u++){var l=o(c[u]);if("object"==typeof l)return l.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var s=a[r],i=this.lookup[s];if(i.value){var o=w(i.query.branchId,i.value,e,n,this.getUserDisplayName(),!!i.query.tags);null===o&&(n||i.fetch()),o!==i.value&&(i.optimisticValue=o,n||(i.value=o),i.notify(o))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new S(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),S=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=s.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(s.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),N=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),s=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),p.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(y.merge(e,s),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return i=a.sent(),this.persistedVersion.dispatchError(i),i&&i.name&&i.name.startsWith("http4")?(this.dispatchError(i,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(i,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new s.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),D=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),C=function(){function e(e,t,n,r,a,s,i,u){var c=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=s,this.writer=i,this.cacheOptimized=u,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new y),s||(this.querySet=new k(this.mutationQueue)),i||(this.writer=new N(this.mutationQueue,this.querySet,e,t,n)),Object.keys(o.a).forEach(function(e){var t=new v(c,e,r||{});u&&(t=t.cacheOptimized()),c[e]=t}),this.deltas=new D(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new v(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var I=n(5),O=n(7);n.d(t,"c",function(){return L}),n.d(t,"d",function(){return _}),n.d(t,"b",function(){return x}),n.d(t,"a",function(){return P});var L=new C(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),_=Object(I.i)(O.b.KED_REALM),x={standardSchool:L.schools.name("standard").cacheOptimized().single(),get mySchool(){return L.schools.name(r.a.currentUser.school).cacheOptimized().single()}},P={getBranchId:function(e,t){return e.switchMap(function(e){return L.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return L.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return L.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(I.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return L.courseBlocks.tags(e).idsOnly().concat(L.courseContents.tags(e).idsOnly()).concat(L.courseTabs.tags(e).idsOnly()).concat(L.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},,function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.label,n=void 0===t?"":t;return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ",n)}},function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(15);n.d(t,"a",function(){return i}),n.d(t,"c",function(){return u}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return l}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return p});var i=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function u(e,t){return o(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function l(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,i=Object(s.b)(location.search),o=r.a({},i,{role:t,school:n}),u=Object(s.a)(o);a?location.href=""+a+u:(location.hash="#",location.search=u)}};function m(e){d.actAs(e)}function p(e,t){var n,a,o=Object(s.b)(location.search),u={};try{for(var c=r.h(i),l=c.next();!l.done;l=c.next()){var d=l.value;o[d]&&(u[d]=o[d])}}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var m=Object(s.a)(r.a({},u,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+m+e.substr(p):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return u});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function u(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],i=t(s);i!==s&&(n===e&&(n=e.slice()),n[r]=i)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],i=t[1];return a[n?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"l",function(){return m}),n.d(t,"c",function(){return p}),n.d(t,"h",function(){return h}),n.d(t,"i",function(){return f}),n.d(t,"n",function(){return g}),n.d(t,"k",function(){return b}),n.d(t,"d",function(){return v}),n.d(t,"m",function(){return k}),n.d(t,"b",function(){return y}),n.d(t,"g",function(){return w}),n.d(t,"a",function(){return T}),n.d(t,"j",function(){return S}),n.d(t,"f",function(){return N}),n.d(t,"e",function(){return D});var r=n(1),a=n(6),s=n.n(a),i=n(5),o=n(42),u=n.n(o),c=n(11),l=n.n(c),d=n(3);function m(e,t,n,a,s){var o,c,l={},d=t.id,m=function(o){var u,c,m,p,h,f,g=a[o],b=e[o]||[],v=t[o];if(!v)return"continue";var k=v.map(function(e,t){return{doc:e,idx:t}}),y=k.filter(function(e){return!b.some(function(t){return t.id===e.doc.id})});try{for(var E=(u=void 0,r.h(y)),w=E.next();!w.done;w=E.next()){var T=w.value,S=(x=r.a({},T.doc)).$meta;delete x.$meta,"add"===S?(x.id||(x.id=Object(i.h)()),s.add(g,x)):"update"===S&&s.put(g,x),s.link(n,d,g,x.id,o),l[o]||(l[o]={}),l[o][T.idx]={$set:x}}}catch(e){u={error:e}}finally{try{w&&!w.done&&(c=E.return)&&c.call(E)}finally{if(u)throw u.error}}var N=b.filter(function(e){return!v.some(function(t){return t.id===e.id})});try{for(var D=(m=void 0,r.h(N)),C=D.next();!C.done;C=D.next()){var I=C.value;s.unlink(n,d,g,I.id,o)}}catch(e){m={error:e}}finally{try{C&&!C.done&&(p=D.return)&&p.call(D)}finally{if(m)throw m.error}}var O=k.filter(function(e){return b.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var L=(h=void 0,r.h(O)),_=L.next();!_.done;_=L.next()){var x,P=_.value;delete(x=r.a({},P.doc)).$meta,s.put(g,x),l[o]||(l[o]={}),l[o][P.idx]={$set:x}}}catch(e){h={error:e}}finally{try{_&&!_.done&&(f=L.return)&&f.call(L)}finally{if(h)throw h.error}}};try{for(var p=r.h(Object.keys(a)),h=p.next();!h.done;h=p.next()){m(h.value)}}catch(e){o={error:e}}finally{try{h&&!h.done&&(c=p.return)&&c.call(p)}finally{if(o)throw o.error}}return u()(t,l)}function p(e){return s()(e).format("YYMMDD HH:mm")}function h(e){return s()(e).format("YYMMDD")}function f(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function g(e,t,n){return u()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function b(e,t,n){return u()(t,{createdDate:{$set:e},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function v(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function k(e,t){var n=Date.now();return(e=g(n,e,t)).createdBy||(e=b(n,e,t)),e}function y(e,t,n){var a,s,i=r.a({},e),o=t[e.id];o&&(i.$etag=o);try{for(var u=r.h(n),c=u.next();!c.done;c=u.next()){var l=c.value,d=e[l].map(function(e){return y(e,t,[])});i[l]=d}}catch(e){a={error:e}}finally{try{c&&!c.done&&(s=u.return)&&s.call(u)}finally{if(a)throw a.error}}return i}function E(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return E(0,function(t){return t.readAsText(e)})}function T(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function S(e){var t=l()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function N(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,u,c;return r.d(this,function(l){switch(l.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,s=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),s&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return i=r.f.apply(void 0,[l.sent(),3]),o=i[0],u=i[1],c=i[2],o.tasks=u,o.abilities&&o.abilitiesOrder&&(o.abilities=o.abilitiesOrder.map(function(e){return o.abilities.find(function(t){return t.id===e})})),o.knowledgeRequirements&&o.knowledgeRequirementsOrder&&(o.knowledgeRequirements=o.knowledgeRequirementsOrder.map(function(e){return o.knowledgeRequirements.find(function(t){return t.id===e})})),o.centralContent&&o.centralContentOrder&&(o.centralContent=o.centralContentOrder.map(function(e){return o.centralContent.find(function(t){return t.id===e})})),a&&(o.templateChain=c),[2,o]}})})}function D(e,t){return void 0===e||t.filter(function(t){return!e.includes(t)}).length>0||e.filter(function(e){return!t.includes(e)}).length>0}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(14),s=n(29),i=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,i){return r.b(this,void 0,void 0,function(){var o,u,c,l,d,m,p,h,f,g,b;return r.d(this,function(v){switch(v.label){case 0:return i&&"no-cache"===i.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),c=(u=this).authHeader,l=u.tokenInfo,d=u.bearerProvider,c||l||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=l=v.sent(),v.label=2;case 2:return l?l.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=l=v.sent(),v.label=4;case 4:c="Bearer "+l.token,v.label=5;case 5:return c&&(n.Authorization=c),h=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 6:return 401==(f=v.sent()).status&&this.bearerProvider?(g=f.headers.get("www-authenticate"),console.log("Got "+f.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(b=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return b.tokenInfo=v.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 8:f=v.sent(),v.label=9;case 9:return[2,f]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,s,o,u){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=u,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),u=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var l=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return u}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return i}),n.d(t,"c",function(){return l});var d=function(){function e(e,t,n){this.http=new i(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=u.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([u.sent()])));case 3:return[4,s.json()];case 4:return[2,u.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=l.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(l,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,i=e.backgroundColor,o=e.progressColor,u=[];if(n>s)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var c=1;c<=n;c++)u.push(a.createElement("svg",{key:c},a.createElement("circle",{className:"circle-chart-background",fill:c>r?i:o,cx:"8",cy:"8",r:"8"})));return u},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return i});var i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,i=t.className,o=t.children,u=t.headerClassName,c=t.contentClassName,l=t.displayProgress,d=t.progressData,m=t.inactivated,p=t.inactivatedRender,h=this.state.headerOpen;return m?"titleAndChildren"===p?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,n),a.createElement(a.Fragment,null,o)):a.createElement(a.Fragment,null,o):a.createElement("div",{className:(i||"")+" openClose"+(h?" open":"")},a.createElement("div",{className:"openHeader"+(u?" "+u:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),l&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(c?" "+c:"")},o))},t}(a.Component)},function(e){e.exports=JSON.parse('{"a":{"branches":{"accessClaimTypes":["role","schoolRole","email"],"sharingAccessPerRole":{"USER":{"email":["*"],"schoolRole":["*"],"role":["*"]}},"relationships":{"parents":"branches","approvedChildren":"branches"},"isPublic":true},"global":{"accessClaimTypes":["role","schoolRole"],"relationships":{"courseInstances":"courseInstances"},"isPublic":true},"courseInstances":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","blocks":"courseBlocks","tabs":"courseTabs"},"isPublic":true},"courseBlocks":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","tabs":"courseTabs","tasks":"tasks"},"isPublic":true},"courseTabs":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","contents":"courseContents"},"isPublic":true},"courseContents":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"tasks":"tasks"},"isPublic":true},"weekplans":{"accessClaimTypes":["email","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"isPublic":false},"weekplans-ks":{"accessClaimTypes":["email","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"isPublic":false},"usertasks":{"accessClaimTypes":["email","schoolRole","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"schoolRole":["{school}/EMPLOYEE:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{"task":"tasks","course":"courses"},"isPublic":false},"userhiddencourses":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false},"usercalendarvisibility":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false},"subjects":{"relationships":{"courseTemplates":"courses","abilities":"abilities"},"isPublic":true},"schools":{"accessClaimTypes":["role","schoolRole"],"relationships":{"courses":"courses","activeCourses":"courses"},"isPublic":true},"courses":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]}},"defaultAcl":["schoolRole:{school}/EMPLOYEE:*"],"relationships":{"templateChain":"courses","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","abilities":"abilities","images":"images","tasks":"tasks"},"isPublic":true},"tasks":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]}},"defaultAcl":["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],"relationships":{"knowledgeRequirements":"knowledge-requirements","centralContent":"central-content","abilities":"abilities"},"isPublic":true},"images":{"accessClaimTypes":["role","schoolRole","email"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]},"USER":{"email":["{email}:*"]}},"isPublic":true},"central-content":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"]},"knowledge-requirements":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"],"isPublic":true},"abilities":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"],"isPublic":true},"notes":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false}}}')},function(e,t,n){"use strict";var r=n(4),a=n(18),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=n(14);function o(e){e.resources||(e.resources=[])}function u(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var l=JSON.parse(c),d=l.time,m=l.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return u(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return u(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var p=new s,h=Date.now(),f=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-h>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[r.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},b=function(e){function t(t,n,r){var a="string"!=typeof n?n:new f(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return p}),n.d(t,"b",function(){return f}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return b})},,function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return u}),n.d(t,"a",function(){return c});var r=n(1),a=n(6),s=n.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e,t){var n=null;n=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var r=s()(n.toString(),"YYYY");return 1!=r.week()&&(r=r.clone().add(1,"week")),t?[s()(r.clone()).week(32).startOf("week"),s()(r.clone()).week(51).endOf("week")]:[s()(r.clone()),s()(r.clone()).week(25).endOf("week")]}function u(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";var r=n(61);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b})},,,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(30).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(46),i=n(32),o=n(45),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,i){r=!0,e=a,t=s,s&&n?n(null,s,i):n&&n(a,null,i)});if(r){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,u=s.observer;return i.push(a),n=u,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],i={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,i,o){if(a=o,r&&(r.unsubscribe(),r=null),i)t(null,i,s);else try{var u=e(n);u&&"function"==typeof u.subscribe?r=u.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(u,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);u.prototype.map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(46),i=n(30),o=n(29),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);u.prototype._map=Object(s.a)(u)},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(38),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(56),s=n(3),i=n(6),o=n.n(i),u=n(83),c=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(u.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(o()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return o()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),l=n(5),d=n(41);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var m=s.a.userTasksRepo,p=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,i,u;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,c.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,i=o()(s).week(),[2,{from:(u=Object(d.a)(o()(s).year(),i)).notBefore,to:u.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,u,c,l;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,i=a(),u=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},u,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:o()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:o()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return c=r.sent(),0===(l=c.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&l.push(e),[4,this.update(l,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(r){switch(r.label){case 0:return(n=this.persistedState)?[3,2]:[4,c.load(this.options.user)];case 1:n=r.sent(),r.label=2;case 2:return(a=new c(n)).weekDate=t?o()(e).valueOf():o()(e).startOf("week").valueOf(),a.save(),this.persistedState=a,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(l.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new l.b("email",t.getCurrentUser().mail,"S"),new l.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);m||(m=s.a.userTasksRepo=new p(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n(31),n(30);var r=n(32);n.d(t,"a",function(){return r.a});var a=n(29);n.d(t,"b",function(){return a.a});var s=n(45);n.d(t,"c",function(){return s.a})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,u=e.title;return s.createElement("div",{title:u||Object(i.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"c",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return u});var r=n(6),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function i(e){var t=a()(e).add(1,"week");return e.week()===e.weeksInYear()&&t.year()===e.year()?{adjusted:!0,nextDate:a()(e.year()+1+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function o(e){var t=a()(e).add(-1,"week");return 2===e.week()&&t.year()!==e.year()?{adjusted:!0,nextDate:a()(e.year()+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function u(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},,function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(23),i=n(6),o=n.n(i);var u=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),c=n(2),l=n(54),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return p}),n.d(t,"a",function(){return h});var m,p=function(){function e(t,n,s,i){var o=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=i;var u=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){u(e)&&(o[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),i={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))u(o);function u(t){Object.keys(t).forEach(function(o){!s.hasOwnProperty(o)&&n(o)&&(s[o]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var u=JSON.stringify(r.g([o],n)),c=i[u];if(void 0!==c){if(c.promise)throw c.promise;if(c.error)throw c.error;if(c.timeout>Date.now())return c.value}try{var l=t[o].apply(e,n).then(function(e){i[u]={timeout:Date.now()+a,value:e}}).catch(function(e){i[u]={timeout:Date.now()+a,error:e}});throw i[u]={timeout:Date.now()+a,promise:l},l}catch(e){if(e.then)throw e;i[u]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:u})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw o=u.sent(),console.error("Error from EDS: "+o),new Error(Object(c.a)(m||(m=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,u,c,d,m,p,h;return r.d(this,function(r){switch(e){case"en_sin":return[2,l.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,l.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=Object(s.d)(t,!0),i=Object(s.d)(t,!1),u=a[0],c=i[0],d=a[1],m=i[1],p={startDate:new Date(u.year(),u.month(),u.date()).toDateString(),endDate:new Date(u.year(),d.month(),d.date()).toDateString()},h={startDate:new Date(c.year(),c.month(),c.date()).toDateString(),endDate:new Date(c.year(),m.month(),m.date()).toDateString()},[2,{firstTerm:p,secondTerm:h,holidays:n}]}return[2]})})},e}(),h=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new u(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new u({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(38),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.thumbnail,n=e.url,a=e.title,s=e.label,i=e.icon,o=e.size,u=void 0===o?"small":o,c=e.customAction,l=s||a,d=t||i,m=!!d;return r.createElement("div",{className:"file-view "+u},r.createElement("a",{href:c?"#":n,target:c?void 0:"_blank",title:a},m?r.createElement("img",{className:"file-"+(t?"thumbnail":"icon"),src:d,alt:a}):r.createElement("i",{className:"fas fa-file"})),r.createElement("a",{href:c?"#":n,target:c?void 0:"_blank",title:a,onClick:c},l))}},,,function(e){e.exports=JSON.parse('{"SouthIndia":[{"firstTerm":{"startDate":"2015-06-01T00:00:00.000Z","endDate":"2015-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2015-11-01T00:00:00.000Z","endDate":"2016-03-27T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2016-06-23T00:00:00.000Z","endDate":"2016-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2016-11-01T00:00:00.000Z","endDate":"2017-03-25T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2017-06-05T00:00:00.000Z","endDate":"2017-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2017-11-01T00:00:00.000Z","endDate":"2018-03-30T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2018-06-04T00:00:00.000Z","endDate":"2018-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2018-11-01T00:00:00.000Z","endDate":"2019-04-29T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2019-06-03T00:00:00.000Z","endDate":"2019-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2019-11-01T00:00:00.000Z","endDate":"2020-03-27T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2020-06-01T00:00:00.000Z","endDate":"2020-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2020-11-01T00:00:00.000Z","endDate":"2021-03-26T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2021-06-06T00:00:00.000Z","endDate":"2021-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2021-11-01T00:00:00.000Z","endDate":"2022-03-25T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2022-06-05T00:00:00.000Z","endDate":"2022-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2022-11-01T00:00:00.000Z","endDate":"2023-03-31T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2023-06-04T00:00:00.000Z","endDate":"2023-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2023-11-01T00:00:00.000Z","endDate":"2024-03-29T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2024-06-03T00:00:00.000Z","endDate":"2024-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2024-11-01T00:00:00.000Z","endDate":"2025-03-28T00:00:00.000Z"},"holidays":[]}],"NorthIndia":[{"firstTerm":{"startDate":"2024-04-03T00:00:00.000Z","endDate":"2024-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2024-10-01T00:00:00.000Z","endDate":"2025-04-02T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2023-04-05T00:00:00.000Z","endDate":"2023-10-01T00:00:00.000Z"},"secondTerm":{"startDate":"2023-10-02T00:00:00.000Z","endDate":"2024-04-02T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2022-04-06T00:00:00.000Z","endDate":"2022-10-03T00:00:00.000Z"},"secondTerm":{"startDate":"2022-10-04T00:00:00.000Z","endDate":"2023-04-04T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2021-04-01T00:00:00.000Z","endDate":"2021-10-04T00:00:00.000Z"},"secondTerm":{"startDate":"2021-10-05T00:00:00.000Z","endDate":"2022-04-05T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2020-04-01T00:00:00.000Z","endDate":"2020-09-28T00:00:00.000Z"},"secondTerm":{"startDate":"2020-09-29T00:00:00.000Z","endDate":"2021-03-31T00:00:00.000Z"},"holidays":[{"startDate":"2020-05-17","endDate":"2020-06-28"}]},{"firstTerm":{"startDate":"2019-04-04T00:00:00.000Z","endDate":"2019-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2019-10-01T00:00:00.000Z","endDate":"2020-03-31T00:00:00.000Z"},"holidays":[{"startDate":"2019-05-19","endDate":"2019-06-29"}]},{"firstTerm":{"startDate":"2018-04-04T00:00:00.000Z","endDate":"2018-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2018-10-01T00:00:00.000Z","endDate":"2019-04-03T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2017-04-05T00:00:00.000Z","endDate":"2017-10-02T00:00:00.000Z"},"secondTerm":{"startDate":"2017-10-03T00:00:00.000Z","endDate":"2018-04-03T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2016-04-06T00:00:00.000Z","endDate":"2016-10-03T00:00:00.000Z"},"secondTerm":{"startDate":"2016-10-04T00:00:00.000Z","endDate":"2017-04-04T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2015-04-01T00:00:00.000Z","endDate":"2015-10-05T00:00:00.000Z"},"secondTerm":{"startDate":"2015-10-06T00:00:00.000Z","endDate":"2016-04-05T00:00:00.000Z"},"holidays":[]}]}')},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(85),s=n(5),i=function(){function e(e){var t=this,n=e.table,s=e.getClient,i=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,u,c,l=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,i=n.table,o=a(),u=e.map(function(e){var n=l.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(u.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.do(function(e){return u.forEach(function(t){return e.put(i,t)})}).catch(function(n){return"http409"===n.name?o.list(i,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return o.do(function(e){return n.forEach(function(t){return e.put(i,t)})})}):Promise.resolve(s&&l.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return c=r.sent(),this.regenerateCacheBust(),u.forEach(function(e){e.$etag=c.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(u)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,u,c,l,d,m,p,h,f,g,b,v,k,y=this;return r.d(this,function(E){switch(E.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,i=t.table,o=t.getQueryOptions,u=n(),[4,o()];case 1:return c=E.sent(),l=[].concat(c.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),d=this.stripGraphs(e,l),a?[4,this.mem.insert(d.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:E.sent(),E.label=3;case 3:m=new s.a,p=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){m.link2(i,e.id,t,n.id)})};try{for(var s=(t=void 0,r.h(l)),o=s.next();!o.done;o=s.next()){a(o.value)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}m.add(i,e)};try{for(h=r.h(d),f=h.next();!f.done;f=h.next())g=f.value,p(g)}catch(e){v={error:e}}finally{try{f&&!f.done&&(k=h.return)&&k.call(h)}finally{if(v)throw v.error}}return[4,u.batch(m.mutationRequests).catch(function(t){return a&&y.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return b=E.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=b.newEtags[e.id]}),a?[4,this.mem.update(e)]:[3,6];case 5:return E.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:E.sent(),E.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o=this;return r.d(this,function(u){switch(u.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,i=n(),a?[4,this.mem.update(e.map(function(e){return o.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:u.sent(),u.label=2;case 2:return[4,i.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(o,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return u.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return u.sent(),[2]}})})},e}()},,function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return i}),n.d(t,"c",function(){return o});var r=n(1),a=function(e,t,n){for(var r=[],a=t;a<=n;a++)r.push({schoolName:"KED",tuitionGroupName:e,studentFirstName:"Student "+a,studentLastName:"Classroom",studentEmailAddress:"student"+a+".classroom@kedschools.com"});return r},s=[{schoolName:"KED",teacherFirstName:"Teacher 1",teacherLastName:"Classroom",teacherEmailAddress:"teacher1.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 2",teacherLastName:"Classroom",teacherEmailAddress:"teacher2.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 3",teacherLastName:"Classroom",teacherEmailAddress:"teacher3.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Carl",teacherLastName:"Holmberg",teacherEmailAddress:"carl@kedschools.com"},{schoolName:"KED",teacherFirstName:"David",teacherLastName:"Fahlander",teacherEmailAddress:"david.fahlander@kedschools.com"}],i={"DJUSÄL01":[{schoolName:"KED",tuitionGroupName:"DJUR1_GR1 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"DJUR1_GR2 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"DJUR1_GR3 (180816-190614)",courseCode:"DJUSÄL01"}],DJUDJI0:[{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr1 (180816-190614)",courseCode:"DJUDJI0"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",courseCode:"DJUDJI0"}],KEMKEM01:[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",courseCode:"KEMKEM01"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",courseCode:"KEMKEM01"}],MATMAT03b:[{schoolName:"KED",tuitionGroupName:"MAT3b_Gr1 (180816-190614)",courseCode:"MATMAT03b"},{schoolName:"KED",tuitionGroupName:"MAT3b_Gr2 (180816-190614)",courseCode:"MATMAT03b"},{schoolName:"KED",tuitionGroupName:"MAT3b_Gr3 (180816-190614)",courseCode:"MATMAT03b"}],BIOBIO01:[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",courseCode:"BIOBIO01"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",courseCode:"BIOBIO01"}],SVESVE03:[{schoolName:"KED",tuitionGroupName:"SVE3_Gr1 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr2 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr3 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr4 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr5 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr6 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr7 (180816-190614)",courseCode:"SVESVE03"}]},o={"DJUR1_GR1 (180816-190614)":a("DJUR1_GR1 (180816-190614)",1,12),"DJUR1_GR2 (180816-190614)":a("DJUR1_GR2 (180816-190614)",13,24),"DJUR1_GR3 (180816-190614)":r.g([{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Student2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Carl",studentLastName:"Holmberg",studentEmailAddress:"carl@kedschools.com"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Student3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"}],a("DJUR1_GR3 (180816-190614)",23,34)),"MAT3b_Gr1 (180816-190614)":a("MAT3b_Gr1 (180816-190614)",3,23),"MAT3b_Gr2 (180816-190614)":a("MAT3b_Gr2 (180816-190614)",24,49),"MAT3b_Gr3 (180816-190614)":a("MAT3b_Gr3 (180816-190614)",50,72),"IDR1_Gr1 (180816-190614)":a("IDR1_Gr1 (180816-190614)",1,12),"IDR1_Gr2 (180816-190614)":a("IDR1_Gr2 (180816-190614)",13,22),"IDR1_Gr3 (180816-190614)":a("IDR1_Gr3 (180816-190614)",23,34),"KEM1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"David",studentLastName:"",studentEmailAddress:"david.fahlander@vemendo.se"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 9",studentLastName:"Classroom",studentEmailAddress:"student9.classroom@kedschools.com"}],"KEM1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 5",studentLastName:"Classroom",studentEmailAddress:"student5.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"}],"BIO1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 4",studentLastName:"Classroom",studentEmailAddress:"student4.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 10",studentLastName:"Classroom",studentEmailAddress:"student10.classroom@kedschools.com"}],"BIO1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 7",studentLastName:"Classroom",studentEmailAddress:"student7.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"}],"SVE3_Gr1 (180816-190614)":a("SVE3_Gr1 (180816-190614)",1,21),"SVE3_Gr2 (180816-190614)":a("SVE3_Gr2 (180816-190614)",22,44),"SVE3_Gr3 (180816-190614)":a("SVE3_Gr3 (180816-190614)",45,61),"SVE3_Gr4 (180816-190614)":a("SVE3_Gr4 (180816-190614)",62,78),"SVE3_Gr5 (180816-190614)":a("SVE3_Gr5 (180816-190614)",83,107),"SVE3_Gr6 (180816-190614)":a("SVE3_Gr6 (180816-190614)",108,124),"SVE3_Gr7 (180816-190614)":a("SVE3_Gr7 (180816-190614)",125,150)}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return i});var r=n(0),a=n.n(r),s=function(e){var t=e.label,n=e.addClass,r=e.faIcon,s=e.action,i=e.url,o=n?"btn "+n:"btn";return i&&!s?a.a.createElement("a",{className:o,href:i,target:"_blank"},r&&a.a.createElement("i",{className:r})," ",t):a.a.createElement("a",{className:o,onClick:s},r&&a.a.createElement("i",{className:r})," ",t)},i=function(e){var t=e.label,n=void 0===t?"Google Drive":t,r=e.action;return a.a.createElement(s,{label:n,faIcon:"fab fa-google-drive",action:r})}},,function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return u});var r=n(1),a=n(15),s=n(66),i=n(7),o=function(){function e(){var e,t;this._initialized=!1;var n=function(e){Object.defineProperty(a,e,{get:function(){return this._initialized||this.init(),this._features[e]},set:function(e){throw new Error("Feature flags cannot be set here")}})},a=this;try{for(var i=r.h(Object.keys(s)),o=i.next();!o.done;o=i.next()){n(o.value)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}}return e.prototype.init=function(){var e,t;if(!this._initialized){var n=(i.a.KED_FEATURES||"").split(",").map(function(e){return e.trim().toLowerCase()}),o=Object(a.b)(location.search,{toLower:!0});o.testversion&&(n=["*"]),o.features&&(n=o.features.split(",").map(function(e){return e.trim().toLowerCase()}));var u=n.includes("*");this._features={};try{for(var c=r.h(Object.keys(s)),l=c.next();!l.done;l=c.next()){var d=l.value;this._features[d]=u||n.includes(d.toLowerCase())}}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}this._initialized=!0}},e}(),u=new o},function(e,t,n){"use strict";n.d(t,"a",function(){return f});var r=n(1),a=n(8),s=n(100),i=n.n(s),o=n(101),u=n.n(o),c=n(68),l=n(69),d=n(0),m=n(7),p=n(6),h=n.n(p),f=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(i.a,u.a)),n.messages={sv:c,en:l},h()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(e){function t(){return e.call(this,{discoveryDocs:"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"})||this}return r.c(t,e),t.prototype.getFile=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,gapi.client.drive.files.get({fileId:e,supportsAllDrives:!0,fields:"id,name,mimeType,webViewLink,iconLink,modifiedTime,thumbnailLink"}).then(function(e){if(e.result.name){var t=e.result;return{fileId:t.id,url:t.webViewLink,mimeType:t.mimeType,name:t.name,modiifiedTime:t.modifiedTime,iconUrl:t.iconLink,thumbnailUrl:t.thumbnailLink}}return null})]}})})},t.prototype.updatePermissions=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),console.log("updating permissions"),[4,this.ensureInited()];case 1:return t.sent(),gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"reader",type:"anyone",supportsAllDrives:!0}).then(function(e){return console.log(e)}),[3,3];case 2:return t.sent(),console.log("unable to update permissions"),[3,3];case 3:return[2]}})})},t.prototype.createFolder=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return console.log("Creating folder "+e),[4,this.ensureInited()];case 1:return n.sent(),[2,gapi.client.drive.files.create({name:e,mimeType:"application/vnd.google-apps.folder",parents:[t]}).then(function(e){return e.result})]}})})},t.prototype.getIdForFolderPath=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,u,c,l;return r.d(this,function(d){switch(d.label){case 0:return console.log("Getting id for "+e.join("/")),[4,this.ensureInited()];case 1:d.sent(),t="root",d.label=2;case 2:d.trys.push([2,9,10,11]),n=r.h(e),a=n.next(),d.label=3;case 3:return a.done?[3,8]:(s=a.value,[4,this.getIdForFolder(s,t)]);case 4:return(i=d.sent())?(t=i,[3,7]):[3,5];case 5:return[4,this.createFolder(s,t)];case 6:o=d.sent(),t=o.id,d.label=7;case 7:return a=n.next(),[3,3];case 8:return[3,11];case 9:return u=d.sent(),c={error:u},[3,11];case 10:try{a&&!a.done&&(l=n.return)&&l.call(n)}finally{if(c)throw c.error}return[7];case 11:return[2,t]}})})},t.prototype.getIdForFolder=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return console.log("Getting id for "+e),[4,this.ensureInited()];case 1:return n.sent(),[2,gapi.client.drive.files.list({corpora:"user",q:"'"+t+"' in parents and mimeType = 'application/vnd.google-apps.folder' and name = '"+e+"'"}).then(function(e){return!!e.result.files.length&&e.result.files[0].id})]}})})},t.prototype.copyFile=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return console.log("Copying file: "+e.name),[4,this.ensureInited()];case 1:return n.sent(),t?[4,this.getIdForFolderPath(t)]:[3,3];case 2:return n.sent(),[3,4];case 3:"root",n.label=4;case 4:return[2,gapi.client.drive.files.copy({fileId:e.id,supportsAllDrives:!0,parents:[parent],name:e.name,fields:"id,name,mimeType,webViewLink,iconLink,modifiedTime,thumbnailLink"}).then(function(e){return e.result})]}})})},t.prototype.handInFile=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return console.log("handing in file"),[4,this.ensureInited()];case 1:return n.sent(),t=gapi.client.newBatch(),[4,a.forEach(function(n){t.add(gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"writer",type:"user",emailAddress:n}))})];case 2:return n.sent(),t.then(function(e){return console.log(e)}),[2]}})})},t.prototype.reclaimFile=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return[2]})})},t.prototype.returnFile=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return[2]})})},t.prototype.updateUrkundProperties=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return[2]})})},t.prototype.downloadFile=function(e){var t=e.file,n=e.limitSize,a=e.mimeType;return r.b(this,void 0,void 0,function(){var e,s,i=this;return r.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:return r.sent(),e=a||"application/pdf",t.canExport?[2,new Promise(function(n,r){gapi.client.drive.files.export({fileId:t.fileId,mimeType:e}).then(function(r){for(var a=r.body.length,s=new Uint8Array(new ArrayBuffer(a)),i=0;i<a;i++)s[i]=r.body.charCodeAt(i);var o=new Blob([s],{type:e}),u=t.name+".pdf";n(new File([o],u,{type:e,lastModified:t.modifiedTime}))})})]:(s=function(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET","https://www.googleapis.com/drive/v3/files/"+e.fileId+"?alt=media",!0),r.setRequestHeader("Authorization","Bearer "+i.token),r.responseType="blob",r.onload=function(){t(new File([r.response],e.name,{type:e.mimeType,lastModified:e.modifiedTime}))},r.send()})},[2,new Promise(function(e,r){void 0!==n?gapi.client.drive.files.get({fileId:t.fileId,fields:"size"}).then(function(e){Number(e.result.size)>1024*n*1024&&r("GooglePickerError: Fildsize is too laarge")}).then(function(){s(t).then(function(t){e(t)})}):s(t).then(function(t){e(t)})})])}})})},t}(n(86).a)},function(e,t,n){"use strict";n.d(t,"b",function(){return r}),n.d(t,"a",function(){return a});var r="421572262269-u68v5lf5o8ss5t68l8gkq3pfarh6dbkv.apps.googleusercontent.com",a="https://docs.google.com/document/d/1V7exG6vN83Sq8kb6uz1B6DaZDVO9eLcJbP7XF0vL4dY/export?format=txt"},function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"a",function(){return i});var r=n(0),a=n.n(r),s=function(e){var t=e.state,n=e.onClick,r=e.label;e.onChange;return a.a.createElement("label",{className:"ui-checkbox"},r,a.a.createElement("input",{type:"checkbox",checked:"checked"==t,onClick:n}),a.a.createElement("span",{className:"custom-element"}))},i=function(e){var t=e.state,n=e.onClick,r=void 0===n?function(){return null}:n,s=e.label,i=e.onChange,o=void 0===i?function(){return null}:i;return a.a.createElement("label",{className:"ui-addbox"},s,a.a.createElement("input",{type:"checkbox",checked:"checked"==t,onClick:r,onChange:o}),a.a.createElement("span",{className:"custom-element"}))}},function(e){e.exports=JSON.parse('{"picker":"Integrate coursebuilder and subjectplanner with Google Picker","ksTutorComment":"Integrate KSTermplanner with tutor comments","kgTutorComment":"Integrate KSTermplanner  with tutor comments","termplannerCharts":"Integrate KSTermplanner with progress charts","weekplannerCharts":"Integrate Weekplanner with progress charts","teacherRights":"Activate course builder teacher rights","studyGroups":"Add study groups and google classroom functionality","cbCollapseBoxes":"Course Builder: Collapse modules by default","ksAssignments":"KS show hand-in assignments","markPartialKRs":"Activate mark partial knowledge requirments functionality"}')},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(19),i=n(13),o=n(88);function u(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var c=n(6),l=n.n(c),d=n(24),m=n(7),p=n(8),h=n(17),f=n(3),g=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,i=t.progressData,c=t.displayProgress,m=!!this.props.openCourses[n],h=(new d.a,this.context.intl),g="gymnasium"===(""+f.b.currentUser.schoolType).toLowerCase();return a.createElement(s.a,{title:a.createElement("h5",null,n||(g?a.createElement(p.a,{id:"userTasks.gymnasiumSchoolGoals",defaultMessage:"Övriga uppgifter"}):a.createElement(p.a,{id:"userTasks.primarySchoolGoals",defaultMessage:"Egna lärandemål"}))),headerOpen:m,className:n&&Object(o.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)},displayProgress:c,progressData:i},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"}," ",a.createElement("a",{className:"trash",href:"#",title:h.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lärandemålet och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=u(t),s=l()(t.deadline).startOf("day")<l()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:b(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:v(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:l()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",g?a.createElement(p.a,{id:"weekplanner.learningGoalGymnasium",defaultMessage:"Uppgift"}):a.createElement(p.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmål"}))),a.createElement("br",null))}))},t.contextType=h.a,t}(a.Component);function b(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(i.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function v(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(i.f)(m.b.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var k=n(5),y=n(2);var E=n(70),w=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave,r="gymnasium"===(""+f.b.currentUser.schoolType).toLowerCase();return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(p.a,{id:"weekplanner.addLearningGoalGymnasiumSchoolTitle",defaultMessage:"Lägg till rubrik"}):a.createElement(p.a,{id:"weekplanner.addLearningGoalPrimarySchoolTitle",defaultMessage:"Lägg till eget lärandemål"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},r?a.createElement(p.a,{id:"weekplanner.addLearningGoalGymnasiumSchool",defaultMessage:"Rubrik"}):a.createElement(p.a,{id:"weekplanner.addLearningGoalPrimarySchool",defaultMessage:"Mål"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(p.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),T=n(34),S=n(50),N=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=this.props,o=(i.isTask,i.onSave),u=this.context.intl,c="gymnasium"===(""+f.b.currentUser.schoolType).toLowerCase();return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,c?a.createElement(p.a,{id:"customTask.addWorkGoalGymnasiumSchoolTitle",defaultMessage:"Lägg till uppgift"}):a.createElement(p.a,{id:"customTask.addWorkGoalPrimarySchoolTitle",defaultMessage:"Lägg till eget arbetsmål"})),a.createElement("hr",null),a.createElement(T.a,{label:u.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:u.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(S.a,{rows:7,label:u.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:u.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(T.a,{label:u.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return o(n,r,s)}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=h.a,t}(a.Component),D=n(102),C=(n(83),n(38)),I=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,i=s.name,o=s.description,u=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:i,description:o,url:u}):r.a({},t)}))});else{var c={id:Object(k.h)(),name:i,description:o,url:u};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(c)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(p.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(p.a,{id:"addeditsubtask.addSubtask",defaultMessage:"Lägg till underuppgift"})),a.createElement("hr",null),a.createElement(T.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(S.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(p.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=h.a,t}(a.Component),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(I,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(I,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=t.deadline,o=t.subTasks,c=t.showCalendar,d=t.userTask,m=d.id,h=(d.courseName,this.props),f=h.onUpdate,g=h.onDelete,b=this.isModified(),v="customTask"===u(d),k=l()(d.deadline)<l()(),y=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,v?a.createElement(p.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmål"}):a.createElement(p.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(T.a,{autoFocus:!0,label:v?y.formatMessage({id:"task.targetNameLabel",defaultMessage:"Arbetsmålets namn"}):y.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:v?y.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du göra?"}):y.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),v&&a.createElement(a.Fragment,null,a.createElement(S.a,{rows:5,label:y.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:y.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(T.a,{label:y.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(C.a,{label:y.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},i||c?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(D.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",nextMonthButtonLabel:"",previousMonthButtonLabel:"",showWeekNumbers:!0,selected:i&&l()(i).toDate(),autoFocus:c,dateFormat:"yyyy-MM-dd",className:k?"expired":void 0,locale:y.locale,popperPlacement:v?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&l()(t).format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:y.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(p.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(C.a,{label:y.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},o&&o.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"task.addSubtask",defaultMessage:"Lägg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){b?f(function(e){e.name=n,e.description=r,e.url=s,e.deadline=i}):e.props.closeDialog()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(p.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){g(m)}},v?a.createElement(p.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmål"}):a.createElement(p.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den här uppgiften"})))))},t.contextType=h.a,t}(a.Component),L=n(12),_=n(89),x=n(41),P=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.backgroundColor,r=e.progressColor,s=Math.round(t);return a.createElement("svg",{className:"progress-chart",width:"100%",height:"25"},a.createElement("rect",{fill:n,width:"100%",height:"100%",rx:"4"}),a.createElement("rect",{className:"fill",fill:r,width:s+"%",height:"100%",rx:"4"}),a.createElement("text",{className:"filled-text",textAnchor:"middle",x:"50%",y:"50%",dy:".3em"},s+"%"))},t.defaultProps={percentage:0,backgroundColor:"#F1F5F4",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return R});var R=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new _.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){var e=Object(x.d)(l()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.nextWeek=function(){var e=Object(x.c)(l()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(w,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"Lärandemålet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(N,{isTask:!e,onSave:function(a,s,i){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,i)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(O,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet får inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(I,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(k.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var i;return r.d(this,function(r){switch(r.label){case 0:return i=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(k.h)(),dateTime:i+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,u,c;return r.d(this,function(d){switch(d.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:d.sent(),d.label=2;case 2:return d.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=l()(n).add(-1,"week"),s=Object(x.b)(a),i=Object(x.a)(a.year(),s),[4,this.props.env.kedBackendClient.list("usertasks",{from:i.notBefore,to:i.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return o=(o=d.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),[n].concat(t.map(function(e){return e.dateTime})),u=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),c=o.sort(Object(y.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:u+=1e3});return t.id=Object(k.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(c)];case 4:return d.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.getHeaderTitle=function(){return a.createElement("h4",null,a.createElement(p.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"}))},t.prototype.render=function(){var e=this,t=l()(this.state.weekDate).week(),n=d.b.weekplannerCharts,i=l()().week(),o=function(e){var t,n,a,s,i=[],o=Object(y.b)(e,function(e){return e.courseName||""});try{for(var u=r.h(Object.keys(o).sort().filter(function(e){return e}).concat(o[""]?[""]:[])),c=u.next();!c.done;c=u.next()){var l=c.value,d=o[l]||o[""],m=Object(y.b)(d,function(e){return e.learningGoal}),p=[];try{for(var h=(a=void 0,r.h(Object.keys(m))),f=h.next();!f.done;f=h.next()){var g=f.value,b=m[g].sort(Object(y.g)("dateTime")),v=b.filter(function(e){return null==e.name})[0],k=v&&v.url;p.push({name:g,allTasks:b,url:k,step:b.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:b.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{f&&!f.done&&(s=h.return)&&s.call(h)}finally{if(a)throw a.error}}i.push({courseName:l,learningGoals:p})}}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return i}(this.state.userTasks),u=this.state,c=u.dialogs,m=u.weekTextsUT,h=u.strategy,b=u.assessment,v=u.isLoading,k=u.isCopyingTasks,w=m&&("adding"===m.$meta||"updating"===m.$meta),T=!!m&&h!==m.weekTexts.strategy,S=!!m&&b!==m.weekTexts.assessment,N=!w&&(T||S),D="gymnasium"===(""+f.b.currentUser.schoolType).toLowerCase(),C=function(e){var t={completedTasks:0,totalNumberOfTasks:0,subjectData:{}};return e.forEach(function(e){return e.learningGoals.forEach(function(n){var r=n.tasks.filter(function(e){return e.done}).length,a=t.subjectData[e.courseName];a||(a=t.subjectData[e.courseName]={completedNumberOfTasks:0,numberOfTasks:0}),a.completedNumberOfTasks+=r,a.numberOfTasks+=n.tasks.length,t.completedTasks+=r,t.totalNumberOfTasks+=n.tasks.length})}),t}(o),I=C.totalNumberOfTasks>0?C.completedTasks/C.totalNumberOfTasks*100:0;return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===i?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!w&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},n&&C.totalNumberOfTasks>0&&this.getHeaderTitle(),a.createElement("div",{className:"widgets"},n&&C.totalNumberOfTasks>0?a.createElement("div",{className:"progressBar"},a.createElement(P,{percentage:I})):this.getHeaderTitle(),a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"})))))),o.length>0&&a.createElement("hr",null),o.map(function(t){return a.createElement(g,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)},displayProgress:n,progressData:C.subjectData[t.courseName]}))}),a.createElement("hr",null),v?a.createElement(L.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),D?a.createElement(p.a,{id:"weekplanner.learningGoalGymnasium",defaultMessage:"Uppgift"}):a.createElement(p.a,{id:"weekplanner.learningGoalPrimary",defaultMessage:"Eget lärandemål"})),a.createElement("div",{className:"btn",style:k?{opacity:.5}:void 0,onClick:function(t){return!k&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara från föregående vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(p.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & Utvärdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska göra för att lära mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:h&&h.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.evaluation",defaultMessage:"Utvärdering"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:b&&b.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:N?{}:{opacity:.5},onClick:function(){return!w&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),N?a.createElement(p.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(p.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(E.a,{dialogs:c,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=h.a,t}(a.Component)},function(e){e.exports=JSON.parse('{"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalPrimarySchoolTitle":"Lägg till eget arbetsmål","customTask.addWorkGoalGymnasiumSchoolTitle":"Lägg till uppgift","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Min progression","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.primarySchoolGoals":"Egna lärandemål","userTasks.gymnasiumSchoolGoals":"Övriga uppgifter","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoalGymnasiumSchool":"Rubrik:","weekplanner.addLearningGoalPrimarySchool":"Mål:","weekplanner.addLearningGoalPrimarySchoolTitle":"Lägg till eget lärandemål","weekplanner.addLearningGoalGymnasiumSchoolTitle":"Lägg till rubrik","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoalPrimary":"Eget lärandemål","weekplanner.learningGoalGymnasium":"Uppgift","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}')},function(e){e.exports=JSON.parse('{"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalPrimarySchoolTitle":"Add own working goal","customTask.addWorkGoalGymnasiumSchoolTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.primarySchoolGoals":"Own learning goal","userTasks.gymnasiumSchoolGoals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoalGymnasiumSchool":"Goal:","weekplanner.addLearningGoalPrimarySchool":"Goal:","weekplanner.addLearningGoalPrimarySchoolTitle":"Add own learning goal","weekplanner.addLearningGoalGymnasiumSchoolTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoalPrimary":"Own learning goal","weekplanner.learningGoalGymnasium":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}')},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),s=n(40),i=n(43),o=n(11),u=n.n(o),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&u()(Object(i.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return u()("body").attr("aria-disabled",n.length>0),u()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,o){var c;return a.createElement("div",{key:o},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){c=t,o===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":o<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||u()(Object(i.findDOMNode)(c)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(i.findDOMNode)(c);e.preventDefault(),u()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(6),o=n.n(i),u=n(5),c=n(35),l=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}var m=n(17),p=n(65);n.d(t,"a",function(){return h});var h=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){c.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){c.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),i={id:Object(u.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new u.b("email",s.a.currentUser.mail,"S"),new u.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(i.deadline=e.task.deadline),e.task?(i.task=[e.task],e.course?i.course=[e.course]:e.courseInfo&&(i.courseInfo=e.courseInfo)):i.siteVisionPageId=e.id,e.step&&(i.step=e.step),[4,Promise.all([c.b.setWeekPlannerBoxOpen(e.courseName,!0),c.b.insert([i])])]);case 1:return r.sent(),[3,4];case 2:return[4,c.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.context.intl,n=this.props.learningTasks,s=Object(l.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),i=this.state.confirmations,u=o()(this.state.weekDate).week(),c=o()().week(),m=u===c?"":u===c+1?t.formatMessage({id:"taskList.nextWeekTask",defaultMessage:"för nästa vecka (v{week})"},{week:u}):u===c-1?t.formatMessage({id:"taskList.lastWeekTask",defaultMessage:"för förra veckan (v{week})"},{week:u}):t.formatMessage({id:"taskList.currentWeekTask",defaultMessage:"för vecka {week}"},{week:u});return a.createElement("div",{className:"taskContainer"},n.map(function(n,o){var l=n.id,h=s[l]||{$meta:"deleted"},f="adding"===h.$meta||"deleting"===h.$meta,g="deleted"!==h.$meta&&"deleting"!==h.$meta,b=g?t.formatMessage({id:"taskList.removeTaskFromWeeklyPlanning",defaultMessage:"Ta bort uppgiften från egen veckoplanering {week}"},{week:m}):t.formatMessage({id:"taskList.addTaskToWeeklyPlanning",defaultMessage:"Lägg till uppgiften i egen veckoplanering {week}"},{week:m}),v=i.some(function(e){return l===e});return a.createElement("div",{key:o},a.createElement(p.a,{state:g?"checked":"",onClick:function(){return f||u!==c?v?e.setState({confirmations:i.filter(function(e){return e!==l})}):e.setState({confirmations:r.g(i).concat(l)}):e.toggleTask(n)},label:a.createElement("a",{title:b,href:n.url},n.name)}),a.createElement(d,{visible:v,text:b,onConfirm:function(){e.toggleTask(n),e.setState({confirmations:i.filter(function(e){return e!==l})})},onCancel:function(){e.setState({confirmations:i.filter(function(e){return e!==l})})}}))}))},t.contextType=m.a,t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return m});var r=n(1),a=n(56),s=n(3),i=n(2),o=n(5),u=n(47),c=n(23),l=n(6),d=n.n(l),m=s.a.hiddenCoursesRepo,p=function(){function e(){var e=this;this.result=null,this.subscribers=[],this.fullCourse=!1,this.notifySubscriber=function(t,n){try{t(n.fullCourse?e.result:e.result.filter(function(e){return e.visible}))}catch(e){console.error(e)}},this.kedRepo=new a.a({getClient:function(){return s.a.kedBackendClient},optimistic:!0,table:"userhiddencourses",user:s.a.currentUser?s.a.currentUser.mail:"",getQueryOptions:function(){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}});var t=this.init();Promise.all([t,this.kedCoursesPromise,this.edsCoursesPromise]).catch(function(e){return Object(i.n)(e)})}return e.prototype.init=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a=this;return r.d(this,function(i){switch(i.label){case 0:return e=s.a.bearerProvider?s.a.bearerProvider.getBearer():Promise.resolve({}),this.kedCoursesPromise=e.then(function(){return a.listKedCourses()}),this.edsCoursesPromise=e.then(function(){return a.listEDSCourses()}),n=!1,this.userHiddenCoursesPromise=new Promise(function(e){return t=function(t){n?a.userHiddenCoursesPromise=Promise.resolve(t):(n=!0,e(t))}}),[4,e];case 1:return i.sent(),this.kedRepo.mem.subscribe(function(e){return r.b(a,void 0,void 0,function(){var n,a,s,i,o=this;return r.d(this,function(u){switch(u.label){case 0:return[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise])];case 1:return n=r.f.apply(void 0,[u.sent(),2]),a=n[0],s=n[1],i=this,[4,this.createCoursesList(s,e,a)];case 2:return i.result=u.sent(),this.subscribers.forEach(function(e){return o.notifySubscriber(e.subscriber,e.options)}),t(e),[2]}})})}),[2]}})})},e.prototype.listKedCourses=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:return e=this.fullCourse,console.log("FullCourse: "+e),[4,s.a.kedBackendClient.list("schools",{role:"USER",name:s.a.currentUser.school,include:"activeCourses",flags:e?[]:["includeIdsAndNamesOnly"],cacheBust:s.a.currentUser.username})];case 1:return t=n.sent(),[2,Object(i.k)(t.map(function(e){return e.activeCourses})).sort(Object(i.g)("name"))]}})})},e.prototype.listEDSCourses=function(){var e=new u.a(Object(c.c)(d()())).period;return-1===s.a.currentUser.roles.indexOf("EMPLOYEE")?s.a.edsClient.getActiveCourses({periodName:e}):null},e.prototype.createCoursesList=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,o,u,c,l=this;return r.d(this,function(d){switch(d.label){case 0:return a=Object(i.c)(t.filter(function(e){return!e.show}),function(e){return e.name}),o=Object(i.c)(t.filter(function(e){return e.show}),function(e){return e.name}),u=s.a.currentUser.roles.some(function(e){return"STUDENT"===e}),c=e?Object(i.c)(e,function(e){return e.name}):{},[4,Promise.all(n.map(function(e){var t=e.id,n=e.name,s=e.description,i=e.modifiedBy;return r.b(l,void 0,void 0,function(){var e,l,d;return r.d(this,function(r){return e=c[n],d=(l=!u||null!=e)?!a[t]:!!o[t],i&&i.name&&!s&&(s=i.name+"s version"),[2,{id:t,name:n,description:s,visible:d,defaultVisible:l}]})})}))];case 1:return[2,d.sent().sort(function(e,t){var n=e.name,r=t.name;return n<r?-1:n>r?1:0})]}})})},e.prototype.hideCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.insert([{id:Object(o.h)(),name:e.id}])]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.delete(t.map(function(e){return e.id}))];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.showCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.delete(t.map(function(e){return e.id}))]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.insert([{id:Object(o.h)(),name:e.id,show:!0}])];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.subscribe=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return this.fullCourse||!t.fullCourse?[3,3]:(this.fullCourse=t.fullCourse,this.kedCoursesPromise=this.listKedCourses(),[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise,this.userHiddenCoursesPromise])]);case 1:return n=r.f.apply(void 0,[u.sent(),3]),a=n[0],s=n[1],i=n[2],o=this,[4,this.createCoursesList(s,i,a)];case 2:o.result=u.sent(),u.label=3;case 3:return[4,this.userHiddenCoursesPromise];case 4:return u.sent(),this.notifySubscriber(e,t),this.subscribers.push({subscriber:e,options:t}),[2]}})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t.subscriber!==e})},e}();m||(m=s.a.hiddenCoursesRepo=new p)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(79),s=n(63),i={"google-apps":"application/vnd.google-apps.document,application/vnd.google-apps.presentation,application/vnd.google-apps.spreadsheet",pdf:"application/pdf"},o=function(e){function t(t){var n=e.call(this,{scopes:["https://www.googleapis.com/auth/drive"]})||this;return n.options={upload:!1,multiple:!1,limitType:!1},Object.assign(n.options,t),n.drive=new s.a,n}return r.c(t,e),t.prototype.show=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,new Promise(function(t,n){var r=(new google.picker.PickerBuilder).enableFeature(google.picker.Feature.SUPPORT_DRIVES).enableFeature(google.picker.Feature.SUPPORT_TEAM_DRIVES).addView((new google.picker.DocsView).setOwnedByMe(!0).setIncludeFolders(!0)).addView((new google.picker.DocsView).setIncludeFolders(!0).setEnableTeamDrives(!0)).setLocale("sv").setSize(1051,650).setOAuthToken(e.authToken).setCallback(function(r){if(r.action==google.picker.Action.CANCEL)n();else if(r.action==google.picker.Action.PICKED){var a=[];r.docs.map(function(t){var n=t.id,r=t.mimeType,s=t.name,i=t.modifiedTime,o=t.iconUrl,u=t.url,c=r.includes("google-apps");a.push({fileId:n,mimeType:r,name:s,modifiedTime:i,canExport:c,iconUrl:o,url:u}),e.drive.updatePermissions(n)}),t(a)}});if(e.options.upload&&r.addView((new google.picker.DocsUploadView).setIncludeFolders(!0)),e.options.multiple&&r.enableFeature(google.picker.Feature.MULTISELECT_ENABLED),e.options.limitType){var a=i[e.options.limitType];console.log(a),r.setSelectableMimeTypes(a)}e.picker=r.build(),e.picker.setVisible(!0)})]}})})},t.prototype.close=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return this.picker.dispose(),[2]})})},t}(a.a)},,function(e,t,n){"use strict";function r(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return"urkund-status urkund-status-error";case"Submitted":return"urkund-status urkund-status-submitted";case"Accepted":return"urkund-status urkund-status-accepted";case"Analyzed":return"urkund-status urkund-status-analyzed"}}function a(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return e.ExternalId?"Kunde inte tas emot av urkund. Felkod: "+e.Status.ErrorCode+"\nExternal ID: "+e.ExternalId+"\nFelmeddelande: "+e.Status.Message:e.Status.Message;case"Submitted":return"Filen är uppladdad till Urkund. Klicka för att uppdatera status.";case"Accepted":return"Filen analyseras fortfarande av Urkund. Klicka för att uppdatera status.";case"Analyzed":return"Rapport skapad. Klicka för att öppna rapporten i nytt fönster"}}function s(e){if(!e||!e.Status)return"";switch(e.Status.State){case"Error":return"urkund-significance-error";case"Submitted":return"urkund-significance-submitted";case"Accepted":return"urkund-significance-accepted"}var t=e.Report;return t?t.Significance<1?"urkund-significance urkund-significance-0":t.Significance<10?"urkund-significance urkund-significance-1":t.Significance<25?"urkund-significance urkund-significance-2":t.Significance<40?"urkund-significance urkund-significance-3":t.Significance<55?"urkund-significance urkund-significance-4":t.Significance<70?"urkund-significance urkund-significance-5":t.Significance<85?"urkund-significance urkund-significance-6":t.Significance<99.9?"urkund-significance urkund-significance-7":t.Significance>=99.9?"urkund-significance urkund-significance-8":"":""}n.d(t,"c",function(){return r}),n.d(t,"a",function(){return a}),n.d(t,"b",function(){return s})},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(3),s=n(64),i=function(){function e(e){var t,n=e.scopes,a=void 0===n?[]:n;this.scopes=["https://www.googleapis.com/auth/userinfo.email","https://www.googleapis.com/auth/userinfo.profile"],(t=this.scopes).push.apply(t,r.g(a))}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:n.sent(),n.label=2;case 2:return e=this.scopes.join(" "),[4,new Promise(function(n,r){gapi.load("client:auth2",function(){var i=!1;return gapi.auth2.authorize({client_id:s.b,scope:e,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"none"},function(o){if(console.table(o),o.error)i=!0;else{var u=new Set(o.scope.split(" "));t.scopes.filter(function(e){return!u.has(e)}).length>0?(console.log("missing scopes"),i=!0):(t.authToken=o.access_token,n())}return i?(console.log("reauthorize"),gapi.auth2.authorize({client_id:s.b,scope:e,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"consent"},function(e){console.table(e),e.error?r("Google Web Client: No access token"):(t.authToken=e.access_token,n())})):o.expires_in<500?gapi.auth2.authorize({client_id:s.b,scope:e,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"none"},function(e){t.authToken=e.access_token,n()}):void 0})})})];case 3:return n.sent(),"undefined"!=typeof google&&void 0!==google.picker?[3,5]:[4,new Promise(function(e){gapi.load("picker",function(){e()})})];case 4:n.sent(),n.label=5;case 5:return void 0!==gapi.client&&void 0!==gapi.client.classroom?[3,7]:[4,new Promise(function(e){gapi.client.load("classroom","v1",function(){e()})})];case 6:n.sent(),n.label=7;case 7:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(3),a=n(13);function s(e){return e?Object(a.e)(r.a.currentUser,e)||r.a.currentUser.roles.includes("ADMIN"):r.a.currentUser.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e})}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(6),a=n.n(r),s=n(7);"sv"===s.b.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var i=function(){return a.a.apply(this,arguments).locale(s.b.KED_LOCALE)}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(9),i=n(40),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>1&&(n=n.slice(1)),{infos:[e]})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),s.c.writer.onError(this._dbWriterError),s.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),s.c.writer.off(this._dbWriterError),s.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,s=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!s}).map(function(t){var n=t.message,r=t.details,s=t.retryable,o=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(i.a,{onClick:function(){return e.removeError(n)}})),r||s?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},o?"Dölj detailer":"Visa detailjer")," "):void 0,o?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),s?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){s.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(3),s=function(){function e(e){var t=e.discoveryDocs;this.googleTokenProvider=a.b.googleTokenProvider,this.discoveryDocs=[],this.discoveryDocs.push(t)}return e.prototype.setBearerProvider=function(e){this.googleTokenProvider=e},e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:t.sent(),t.label=2;case 2:return!this.tokenExpiration||this.tokenExpiration<new Date?[4,this.googleTokenProvider.getBearer()]:[3,4];case 3:e=t.sent(),this.tokenExpiration=new Date(e.expires),this.token=e.token,gapi.client.setToken({access_token:e.token}),t.label=4;case 4:return[4,gapi.client.init({discoveryDocs:this.discoveryDocs})];case 5:return t.sent(),[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e){if("undefined"!=typeof gapi)return e();var t=document.createElement("script");t.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(t),window.gaapi_loaded=e})},e}()},,function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},,,,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var t=n(7);t.b.ENVIRONMENT="test",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,n(132))},function(e,t,n){"use strict";n(103);var r=n(1),a=n(15),s=n(21),i=n(5),o=n(7),u=n(3),c=n(13),l=n(2);function d(e,t,n){var s=Object(a.b)(t),i=Object(l.e)(s,c.a),o=r.f(Object(a.c)(e),2),u=o[0],d=o[1],m=Object(a.b)(d);return u+Object(a.a)(r.a({},m,i,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function p(e,t,n){return new i.e(s.c,s.d,e+t.mail+location.search,o.b.KED_CLIENT_ID,o.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var h,f,g=u.a.currentUser&&u.a.currentUser.mail;if(g)if(o.b.KED_TOKEN_PATH){var b=d(o.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);u.a.bearerProvider=(f=m(h=b,g),new s.b(h,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){u.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,f),{token:t.token,expires:Date.now()+354e4}},f)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(u.a.currentUser=JSON.parse(t))}(m(b,g));var v=d(o.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.profile.emails","https://www.googleapis.com/auth/classroom.profile.photos","https://www.googleapis.com/auth/classroom.rosters.readonly","https://www.googleapis.com/auth/classroom.rosters","https://www.googleapis.com/auth/classroom.coursework.students"]);u.a.googleTokenProvider=function(e,t){var n=m(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(v,g)}else{if(!(o.b.KED_TOKEN_URL&&o.b.KED_CLIENT_ID&&o.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");u.a.bearerProvider=p(o.b.KED_TOKEN_URL,u.a.currentUser,["kedbackend","EDS"]),u.a.googleTokenProvider=p(o.b.KED_TOKEN_URL+"/google",u.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.profile.emails","https://www.googleapis.com/auth/classroom.profile.photos","https://www.googleapis.com/auth/classroom.rosters.readonly","https://www.googleapis.com/auth/classroom.rosters","https://www.googleapis.com/auth/classroom.coursework.students"])}u.a.kedBackendClient=new s.a(o.b.KED_API_URL,u.a.bearerProvider);var k=n(47);u.a.edsClient=new k.b(s.c,o.b.EDS_API_URL,u.a.bearerProvider,function(){return u.a.currentUser.mail})},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.abilities,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.centralContent,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(19),i=n(2),o=function(e){var t=e.title,n=e.className,o=e.headerOpen,c=e.idsToSubjectMap,l=e.requirements;if(!c)return a.createElement(s.a,{title:a.createElement("p",null,t),className:n,headerOpen:o},a.createElement(u,r.a({},r.a({},e))));var d=c?Object(i.b)(l,function(e){return c[e.id]||""}):{"":l},m=Object.keys(d).map(function(e){return{subject:e,requirements:d[e]}});return a.createElement(s.a,{title:a.createElement("p",null,t),className:n,headerOpen:o},m.map(function(t){var n=t.subject,s=t.requirements;return a.createElement(u,r.a({},r.a({},e,{key:n,heading:n,requirements:s})))}))},u=function(e){for(var t=e.requirements,n=e.includedIds,r=e.explainedRequirements,s=e.partialRequirments,i=e.heading,o=["E","C","A"],u=[],c=t.slice(),l=null;!(l=o.map(function(e){var t=c.findIndex(function(t){return t.gradeStep.toUpperCase()===e});if(t<0)return null;var r=c[t];return c.splice(t,1),n?n[r.id]?r:void 0:r})).every(function(e){return null===e});)l.every(function(e){return!e})||u.push(l);return a.createElement(a.Fragment,null,i&&a.createElement("h4",null,i),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,o.map(function(e){return a.createElement("th",{key:e},e)}))),a.createElement("tbody",null,u.map(function(e,t){return a.createElement(a.Fragment,{key:t},a.createElement("tr",{key:t},e.map(function(e,t){var n=e&&s&&s[e.id];return a.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:n?n.join("."):e?e.name:""}})})),r&&a.createElement("tr",null,e.map(function(e,t){return a.createElement("td",{key:t,className:"explained-requirement"},a.createElement("div",null,e&&r[e.id]||""))})))}))))}},,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r,a,s=n(1),i=n(0),o=n(7),u=n(2),c=n(12),l=n(15),d=n(13),m=n(73),p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,courses:[],headerOpen:!1},n.updateHiddenCourses=n.updateHiddenCourses.bind(n),n}return s.c(t,e),t.prototype.componentWillMount=function(){m.a.subscribe(this.updateHiddenCourses,{fullCourse:!0})},t.prototype.componentWillUnmount=function(){m.a.unsubscribe(this.updateHiddenCourses)},t.prototype.updateHiddenCourses=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.hideCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(r||(r=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.hideCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.showCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(a||(a=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.showCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.render=function(){var e=this;if(this.state.isLoading)return i.createElement(c.a,null);var t=this.state.courses,n=t.filter(function(e){return e.visible}),r=t.filter(function(e){return!e.visible}),a=Object(l.b)(location.search),u=o.b.KED_COURSE_VIEWER_URL;return i.createElement("div",{className:"ked_boxed"},i.createElement("h3",null,"Skolans kurser"),i.createElement("div",{className:"taskContainer odd-even"},n.map(function(t){return i.createElement("div",{className:"studentCourse",key:t.id},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top pull-right"},i.createElement("a",{className:"hideItem",onClick:function(){return e.hideCourse(t)}})),i.createElement("div",{className:"horizontalItem top"},i.createElement("a",{href:Object(d.f)(u,{courseId:t.id})},t.name))),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",{className:"small"},t.description)))})),i.createElement("div",{className:"openClose"+(this.state.headerOpen?" open":"")},i.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},i.createElement("h5",null,"Dolda kurser")),i.createElement("div",{className:"openContent"},i.createElement("div",{className:"taskContainer odd-even"},r.map(function(t){return i.createElement("div",{className:"studentCourse",key:t.id},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top pull-right"},i.createElement("a",{className:"showItem",onClick:function(){return e.showCourse(t)}})),i.createElement("a",{href:Object(l.a)(s.a({},a,{courseId:t.id}))},t.name)),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",{className:"small"},t.description)))})))))},t}(i.Component)},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(71),i=n(17),o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.commonTasks,n=e.learningGoals,r=this.context.intl;return a.createElement("div",null,n.map(function(e){return a.createElement("div",{key:e.name},a.createElement("h5",null,e.name),a.createElement(s.a,{learningTasks:e.learningTasks}))}),t.length>0&&a.createElement("div",null,n.length>0&&a.createElement("h5",null,r.formatMessage({id:"learningGoalsLost.overall",defaultMessage:"Övergripande"})),a.createElement(s.a,{learningTasks:t})))},t.contextType=i.a,t}(a.Component)},,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(2),o=n(6),u=n.n(o),c=n(5),l=n(13),d=n(168),m=n.n(d),p=n(80),h=n(75),f=n(59),g=n(24),b=n(63),v=n(58),k=n(77),y=n(12),E=n(51),w=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.loading,n=e.files,r=(e.school,e.usersNotHandedInDocs),i=e.taskDeadline,o=e.teacherAtThisSchool,c=e.download,l=e.refreshAssignment,d=e.sendToUrkund,m=n.some(function(e){return e.user===s.a.currentUser.mail});return t?a.createElement(y.a,{label:"Laddar inlämnade filer..."}):0!==n.length||r?o?function(e,t,n,r,s,i,o){return a.createElement(a.Fragment,null,e.length>0&&a.createElement(a.Fragment,null,g.b.studyGroups&&a.createElement("p",null,"Uploaded assignments"),a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Elev"),a.createElement("th",null,"Filnamn"),a.createElement("th",null,"Inlämnat den"),a.createElement("th",null,"Rapport"),a.createElement("th",null,"Nivå"),t&&a.createElement("th",null))),a.createElement("tbody",null,e.map(function(e){return a.createElement("tr",{key:e.mediaLink,style:e.metadata.$meta?{opacity:.5}:{}},a.createElement(a.Fragment,null,a.createElement("td",null,a.createElement("a",{href:"mailto:"+e.user},e.metadata.userDisplayName||e.user)),a.createElement("td",null,e.metadata.driveFileId?a.createElement(E.a,{thumbnail:e.metadata.driveFileIconUrl,title:e.filename.substr(0,e.filename.lastIndexOf(".")),url:e.metadata.driveFileUrl}):a.createElement(E.a,{customAction:function(t){t.preventDefault(),t.stopPropagation(),s(e)},title:e.filename})),a.createElement("td",{className:"assignment-date-col"},u()(e.uploadDate).format("YYYY-MM-DD HH:mm")),"add"===e.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(y.a,{label:"Laddar upp..."})):"delete"===e.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(y.a,{label:"Tar bort..."})):function(){var t,n=e.metadata;try{t=n.urkundResponse&&JSON.parse(n.urkundResponse)}catch(e){t=null}var r=t&&t[0];return!r&&e.metadata.urkundUploadError&&(r={Status:{ErrorCode:-1,Message:e.metadata.urkundUploadError,State:"Error"},ExternalId:e.metadata.urkundExternalId}),e.isRefreshing?a.createElement("td",{colSpan:2},a.createElement(y.a,{label:"Uppdaterar..."})):r?a.createElement(a.Fragment,null,a.createElement("td",{className:"urkund-status-col"},a.createElement("a",{href:r.Report&&r.Report.ReportUrl,onClick:function(t){-1!==["Accepted","Submitted"].indexOf(r.Status.State)&&(t.preventDefault(),t.stopPropagation(),o&&i(e))},target:"_blank",title:Object(k.a)(r)},a.createElement("div",{className:Object(k.c)(r)}))),a.createElement("td",{className:"urkund-status-col"},a.createElement("div",{className:Object(k.b)(r)},r.Report&&"number"==typeof r.Report.Significance?r.Report.Significance.toFixed()+"%":" "))):a.createElement("td",{colSpan:2})}()),t&&T(e))})))),a.createElement("br",null),n&&n.length>0&&function(e,t){return a.createElement(a.Fragment,null,g.b.studyGroups&&a.createElement("p",null,"Not handed in assignments"),a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Elev"),a.createElement("th",null,"Task deadline"))),a.createElement("tbody",null,e.map(function(e){return a.createElement("tr",{key:e.displayName,style:{opacity:.5}},a.createElement("td",null,a.createElement("a",{href:"mailto:"+e.email},e.displayName)),a.createElement("td",null," ",t," "))}))),a.createElement("br",null))}(n,r))}(n,m,r,i,c,l,d):function(e,t,n){return console.log("student view"),a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Filnamn"),a.createElement("th",null,"Inlämnat den"),t&&a.createElement("th",null))),a.createElement("tbody",null,e.map(function(e){return a.createElement("tr",{key:e.mediaLink,style:e.metadata.$meta?{opacity:.5}:{}},a.createElement("td",null,e.metadata.driveFileId?a.createElement(E.a,{thumbnail:e.metadata.driveFileIconUrl,title:e.filename.substr(0,e.filename.lastIndexOf(".")),url:e.metadata.driveFileUrl}):a.createElement(E.a,{customAction:function(t){t.preventDefault(),t.stopPropagation(),n(e)},title:e.filename})),a.createElement("td",{className:"assignment-date-col"},"add"===e.metadata.$meta?a.createElement(y.a,{label:"Laddar upp..."}):"delete"===e.metadata.$meta?a.createElement(y.a,{label:"Tar bort..."}):u()(e.uploadDate).format("YYYY-MM-DD HH:mm")),t&&T(e))})))}(n,m,c):o?a.createElement("p",null,"Ingen elev har lämnat in något arbete ännu."):null},t}(a.Component);function T(e){var t=this;return a.createElement("td",null,!e.metadata.$meta&&e.user===s.a.currentUser.mail&&a.createElement("a",{href:"#",onClick:function(n){n.stopPropagation(),n.preventDefault(),confirm("Radera inlämnad fil "+e.filename+"?")&&t.props.delete(e.mediaLink)}},a.createElement("i",{className:"fa fa-trash"})))}var S=n(19);n.d(t,"a",function(){return C});var N=[".pdf",".odt",".docx",".doc",".cad",".wav",".mp3",".mpeg4",".mp4",".zip",".png",".jpg",".jpeg",".gif",".txt",".html"],D=[".pdf",".odt",".docx",".doc",".txt",".html"],C=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assignments:[],loading:!0},n}return r.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,t,r)})},t.prototype.componentDidMount=function(){this.load()},t.prototype.componentWillReceiveProps=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return n.trys.push([0,4,,5]),e.taskId===this.props.taskId&&e.courseId===this.props.courseId?[3,3]:[4,this.setStatePromised(function(){return{assignments:[],loading:!0}})];case 1:return n.sent(),[4,this.load()];case 2:n.sent(),n.label=3;case 3:return[3,5];case 4:return t=n.sent(),Object(i.n)(t),[3,5];case 5:return[2]}})})},t.prototype.update=function(e,t){return r.g([t],e.filter(function(e){var n=e.user,r=e.filename;return n!==t.user||r!==t.filename}))},t.prototype.refreshAssignment=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,u,l,d,m,p,h,f,g=this;return r.d(this,function(b){switch(b.label){case 0:return t=s.a.kedBackendClient.http,n=this.props,a=n.courseId,i=n.taskId,o=n.school,u=e.user,l=e.filename,[4,this.setState(function(t){var n=t.assignments;return{assignments:g.update(n,r.a({},e,{isRefreshing:!0}))}})];case 1:b.sent(),b.label=2;case 2:return b.trys.push([2,8,,10]),[4,t.get("assignments/urkund/"+o+"/"+a+"/"+i+"/"+u+"/"+l)];case 3:return(d=b.sent()).status>=400?(m=c.c.bind,p=[void 0,d.status],[4,d.text()]):[3,5];case 4:throw new(m.apply(c.c,p.concat([b.sent()])));case 5:return[4,d.text()];case 6:return h=b.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:g.update(n,r.a({},e,{isRefreshing:!1,metadata:r.a({},e.metadata,{urkundResponse:h})}))}})];case 7:return b.sent(),[3,10];case 8:return f=b.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:g.update(n,r.a({},e,{isRefreshing:!1,refreshError:f}))}})];case 9:return b.sent(),[3,10];case 10:return[2]}})})},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,i,o,d,m,p,h,f,g,b,v,k,y,E,w,T;return r.d(this,function(S){switch(S.label){case 0:return S.trys.push([0,13,,14]),e=s.a.kedBackendClient.http,t=this.props,n=t.courseId,a=t.taskId,i=t.school,o=t.sendToUrkund,[4,(d=Object(l.e)(s.a.currentUser,i))?e.get("assignments/"+i+"/"+n+"/"+a):e.get("assignments/"+i+"/"+n+"/"+a+"/"+s.a.currentUser.mail)];case 1:return 200===(m=S.sent()).status?[3,3]:(p=c.c.bind,h=[void 0,m.status],[4,m.text()]);case 2:throw new(p.apply(c.c,h.concat([S.sent()])));case 3:return[4,m.json()];case 4:if(f=S.sent(),this.setState({error:null,loading:!1,assignments:f}),!d||!o)return[3,12];g=f.filter(function(e){return e.metadata&&!e.metadata.urkundUploadError&&(!e.metadata.urkundLastPoll||["Accepted","Submitted"].indexOf(JSON.parse(e.metadata.urkundResponse)[0].Status.State)>=0&&parseInt(e.metadata.urkundLastPoll)<u()().add(-15,"seconds").toDate().getTime())}),S.label=5;case 5:S.trys.push([5,10,11,12]),b=r.h(g),v=b.next(),S.label=6;case 6:return v.done?[3,9]:(k=v.value,[4,this.refreshAssignment(k)]);case 7:S.sent(),S.label=8;case 8:return v=b.next(),[3,6];case 9:return[3,12];case 10:return y=S.sent(),w={error:y},[3,12];case 11:try{v&&!v.done&&(T=b.return)&&T.call(b)}finally{if(w)throw w.error}return[7];case 12:return[3,14];case 13:return E=S.sent(),this.setState({loading:!1,error:"Kunde inte ladda inlämningsuppgifter",assignments:[]}),console.error(E),[3,14];case 14:return[2]}})})},t.prototype.onDrag=function(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"},t.prototype.verifyAndUpload=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),e?this.state.assignments.some(function(t){return t.user===s.a.currentUser.mail&&t.filename===e.name})&&!confirm("Ersätta befintlig fil ("+e.name+")?")?[2]:this.props.school.toLowerCase()===s.a.currentUser.school.toLowerCase()||confirm("Uppgiften tillhör en annan skola ("+this.props.school+").\nVill du ändå lämna in ditt arbete här?")?(this.setState({uploadingFile:e}),[4,this.upload(e,t)]):[2]:[2];case 1:return r.sent(),[4,this.load()];case 2:return r.sent(),this.setState({uploadingFile:null}),[3,4];case 3:return n=r.sent(),this.setState({error:"Kunde inte ladda upp filen. "+(n.message||n),uploadingFile:null}),console.error(n),[3,4];case 4:return[2]}})})},t.prototype.upload=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,o,u,l,d,m,p,h,f,g;return r.d(this,function(b){switch(b.label){case 0:if(s.a.kedBackendClient.http,n=this.props,a=n.courseId,i=n.taskId,o=n.school,u=n.sendToUrkund,l=s.a.currentUser.mail,D.indexOf("."+e.name.split(".").reverse()[0].toLowerCase())>=0){if(e.size>52428800)throw new Error("Filer av denna typ får inte vara större än 50 MB")}else if(e.size>104857600)throw new Error("Filen får inte vara större än 100 MB");if(d=e.name.toLowerCase(),!N.some(function(e){return d.endsWith(e)}))throw new Error("Filens ändelse måste vara "+N.join(" / "));return(m=new FormData).append("files",e),p={userDisplayName:s.a.currentUser.displayName,verifyWithUrkund:u},t&&(p=r.a({},p,{driveFileId:t.fileId,driveFileUrl:t.url,driveFileIconUrl:t.iconUrl})),[4,s.a.kedBackendClient.http.fetch("assignments/"+o+"/"+a+"/"+i+"/"+l,"put",{},p,{body:m})];case 1:return 200===(h=b.sent()).status?[3,3]:(f=c.c.bind,g=[void 0,h.status],[4,h.text()]);case 2:throw new(f.apply(c.c,g.concat([b.sent()])));case 3:return[2]}})})},t.prototype.download=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),[4,s.a.kedBackendClient.http.fetch(e.mediaLink,"get",{})];case 1:return(t=r.sent()).status>=400?(n=c.c.bind,a=[void 0,t.status],[4,t.text()]):[3,3];case 2:throw new(n.apply(c.c,a.concat([r.sent()])));case 3:return[4,t.blob()];case 4:return i=r.sent(),m()(i,e.filename,e.contentType),[3,6];case 5:return o=r.sent(),this.setState({error:"Kunde inte ladda ned filen. "+(o.message||o)}),console.error(o),[3,6];case 6:return[2]}})})},t.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(o){switch(o.label){case 0:return o.trys.push([0,6,,7]),[4,this.setStatePromised(function(t){return{assignments:t.assignments.map(function(t){return t.mediaLink===e?r.a({},t,{metadata:r.a({},t.metadata,{$meta:"delete"})}):r.a({},t)})}})];case 1:return o.sent(),[4,s.a.kedBackendClient.http.fetch(e,"delete",{})];case 2:return(t=o.sent()).status>=400?(n=c.c.bind,a=[void 0,t.status],[4,t.text()]):[3,4];case 3:throw new(n.apply(c.c,a.concat([o.sent()])));case 4:return[4,this.load()];case 5:return o.sent(),[3,7];case 6:return i=o.sent(),this.setState({error:"Kunde inte ta bort filen. "+(i.message||i)}),console.error(i),[3,7];case 7:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.courseId,o=t.taskId,u=t.school,c=t.courseStudyGroups,d=t.taskDeadline,m=this.state,k=m.loading,y=m.assignments,E=m.error,T=m.uploadingFile,N=Object(l.e)(s.a.currentUser,u);console.log(N);var D=r.g(y),C=g.b.picker;if(T){var I={school:u,courseId:n,taskId:o,filename:T.name,size:T.size,user:s.a.currentUser.mail,contentType:T.type,uploadDate:Date.now(),mediaLink:"assignments/"+u+"/"+n+"/"+o+"/"+s.a.currentUser.mail+"/"+T.name,metadata:{$meta:"add",userDisplayName:s.a.currentUser.displayName}};D=D.filter(function(e){return e.mediaLink!==I.mediaLink}),D=r.g(D,[I])}D=D.map(function(e){var t=r.f((e.metadata.userDisplayName||e.user).split(" ")),n=t[0],a=t.slice(1);return r.a({},e,{firstName:n,lastName:a.join(" ")})}).sort(Object(i.h)(["lastName","firstName","filename","uploadDate"],["sv","en"],{sensitivity:"base"}));var O={},L=c&&c.length>0&&g.b.studyGroups&&N;return c&&Object.keys(v.c).filter(function(e){return c&&c.includes(e)}).forEach(function(e){var t=D.filter(function(t){return v.c[e].find(function(e){return e.studentEmailAddress==t.user})}),n=v.c[e].filter(function(e){return!t.find(function(t){return t.user===e.studentEmailAddress})}).map(function(e){return{displayName:e.studentFirstName+" "+e.studentLastName,email:e.studentEmailAddress}});n=n.map(function(e){var t=r.f(e.displayName.split(" ")),n=t[0],a=t.slice(1);return r.a({},e,{firstName:n,lastName:a.join(" ")})}).sort(Object(i.h)(["lastName","firstName"])),O[e]={assignments:t,notSubmittedUsers:n}}),a.createElement("div",{className:"stopFloats",onDragOver:function(t){return e.onDrag(t)},onDrop:function(t){t.stopPropagation(),t.preventDefault(),e.verifyAndUpload(t.dataTransfer.files[0])}},E?a.createElement(a.Fragment,null,a.createElement("p",{className:"error"},E)):void 0,L?Object.keys(O).map(function(t){return a.createElement(S.a,{headerOpen:!1,title:t,key:t},a.createElement(w,{loading:k,files:O[t].assignments,usersNotHandedInDocs:O[t].notSubmittedUsers,school:u,download:e.download,refreshAssignment:e.refreshAssignment,delete:e.delete,taskDeadline:d,teacherAtThisSchool:!0,sendToUrkund:!0}))}):a.createElement(w,{loading:k,files:D,school:u,download:this.download,refreshAssignment:this.refreshAssignment,delete:this.delete,teacherAtThisSchool:!0,sendToUrkund:!0}),Object(p.a)()?void 0:a.createElement(a.Fragment,null,a.createElement("div",{className:"drop-zone task-assignment-drop-zone"},"Droppa ditt färdiga arbete här.",a.createElement("br",null),"Det går också bra att använda bläddra-knappen nedan."),a.createElement("input",{type:"file",onChange:function(t){return e.verifyAndUpload(t.target.files[0])}}),C&&a.createElement(f.b,{label:"Hämta från Google Drive",action:function(){var t=new h.a({upload:!0}),n=new b.a;t.show().then(function(t){var r=t[0];r&&n.downloadFile({file:r,mimeType:"text/plain",limitSize:100}).then(function(t){return e.verifyAndUpload(t,r)})})}})))},t}(a.Component)},,,,,function(e,t,n){var r={"./en-SG":92,"./en-SG.js":92,"./en-au":93,"./en-au.js":93,"./en-ca":94,"./en-ca.js":94,"./en-gb":95,"./en-gb.js":95,"./en-ie":96,"./en-ie.js":96,"./en-il":97,"./en-il.js":97,"./en-nz":98,"./en-nz.js":98,"./sv":99,"./sv.js":99};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=148},function(e,t){},function(e,t){},function(e,t,n){"use strict";var r=n(67);n.d(t,"a",function(){return r.a})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2),i=n(84),o=n(16),u=n(12),c=function(e){var t=e.title,n=e.backgroundImage,r=e.tabs,s=e.activeTab;return a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},n&&a.createElement("style",null,"\n        .pageHeader {\n          background-image: url('"+n+"') !important;\n        }\n      "),a.createElement("div",{className:"pageHeader"},a.createElement("a",null,a.createElement("h1",null,t)),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement("div",{className:"align-horizontal"}),a.createElement("div",{className:"horizontalMenu"},a.createElement("ul",null,r.map(function(e,t){var n=e.name,r=e.key,i=e.link,o=s===i;return a.createElement("li",{key:r||("string"==typeof n?n:t),className:o?"activePage":""},a.createElement("a",{href:i},n))})))))))))},l=n(108);var d=n(106),m=n(107),p=n(141),h=n(71);function f(e,t){return e.taskCustomizations?r.a({},t,e.taskCustomizations[t.id]):t}var g=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.module,n=e.course,r=function(e,t){var n={};return t.tasks.filter(function(t){return-1!==e.taskIds.indexOf(t.id)}).forEach(function(e){e.abilities.forEach(function(e){var t=e.id;return n[t]=!0}),e.centralContent.forEach(function(e){var t=e.id;return n[t]=!0}),e.knowledgeRequirements.forEach(function(e){var t=e.id;return n[t]=!0})}),n}(t,n),i=t.taskIds.map(function(e){return n.tasks.find(function(t){return t.id===e})}).filter(function(e){return!!e}).map(function(e){return{id:e.id,task:f(t,e),course:n,name:e.name,url:"#"+encodeURIComponent(t.name.trim())+"/"+e.id,courseName:n.name,learningGoal:e.learningGoal||t.name}}),o=i.filter(function(e){return e.task&&e.task.assignment}),u=i.filter(function(e){return!e.task||!e.task.assignment}),c=u.filter(function(e){return!e.task.learningGoal}),g=Object(s.b)(u.filter(function(e){return!!e.task.learningGoal}),function(e){return e.learningGoal});return a.createElement("div",null,a.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},a.createElement("div",{className:"sv-text-portlet-content"},a.createElement("h1",{className:"h1"},t.name))),a.createElement("div",{className:"sv-vertical sv-layout"},a.createElement("div",{dangerouslySetInnerHTML:{__html:t.mandatoryContent}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("div",{className:"ked_boxed"},a.createElement("h3",null,"Modulens kunskapskrav, förmågor och centrala innehåll"),(!!t.startWeek||!!t.endWeek)&&a.createElement("div",{className:"week-period-div"},a.createElement("div",null,"Startvecka"),a.createElement("div",null,t.startWeek||"--"),a.createElement("div",null,"Slutvecka"),a.createElement("div",null,t.endWeek||"--"),a.createElement("br",null)),a.createElement("hr",null),a.createElement(l.a,{title:"I den här modulen bedöms följande kunskapskrav",requirements:n.knowledgeRequirements,includedIds:r}),a.createElement(d.a,{title:"Den här modulen behandlar följande förmågor",abilities:n.abilities.filter(function(e){return r[e.id]})}),a.createElement(m.a,{title:"Den här modulen behandlar följande centrala innehåll",centralContent:n.centralContent.filter(function(e){return r[e.id]})}))),t.taskIds.length>0&&a.createElement("div",{className:"sv-script-portlet sv-portlet"},a.createElement("div",{className:"ked_boxed"},0===o.length?void 0:a.createElement(a.Fragment,null,a.createElement("h2",null,"Inlämningsuppgifter"),a.createElement("hr",null),a.createElement(h.a,{learningTasks:o})),0===u.length?void 0:a.createElement(a.Fragment,null,a.createElement("h2",null,"Uppgifter"),a.createElement("hr",null),a.createElement(p.a,{commonTasks:c,learningGoals:Object.keys(g).map(function(e){return{name:e,learningTasks:g[e]}})})))),t.resources.length>0&&a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("div",{className:"ked_boxed"},a.createElement("h2",null,"Resurser"),a.createElement("hr",null),a.createElement("div",{className:"taskContainer"},t.resources.map(function(e,t){return a.createElement("div",{className:"align-horizontal",key:t},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:e.url},e.name)))})))))},t}(a.Component),b=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props.resources;return a.createElement("div",null,a.createElement("div",{className:"taskContainer"},e.map(function(e,t){return a.createElement("div",{className:"align-horizontal",key:t},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:e.url},e.name)))})))},t}(a.Component),v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this.props.course;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},e.runUpText&&a.createElement("div",null,a.createElement("h1",null,"Upptakt"),a.createElement("p",{className:"normal",dangerouslySetInnerHTML:{__html:e.runUpText}})),e.responsibleTeachers&&e.responsibleTeachers.length>0&&a.createElement("div",null,a.createElement("h2",null,"Lärare"),e.responsibleTeachers.map(function(e,t){return a.createElement("p",{key:t},a.createElement("a",{href:k(e.email||e.url||"")},e.name))})),e.workFlowLink&&a.createElement("a",{className:"btn",href:e.workFlowLink},"Arbetsgång"),a.createElement("br",null),a.createElement("br",null),a.createElement(d.a,{title:"Ämnets förmågor",subTitle:"Förmågor",abilities:e.abilities,className:"larger"}),a.createElement(m.a,{title:"Kursens centrala innehåll",subTitle:"Centralt innehåll",centralContent:e.centralContent,className:"larger"}),a.createElement(l.a,{title:"Kursens kunskapskrav",requirements:e.knowledgeRequirements,className:"larger"})),e.resources.length>0&&a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("div",{className:"ked_boxed"},a.createElement("h2",null,"Resurser"),a.createElement("hr",null),a.createElement(b,{resources:e.resources}))))},t}(a.Component);function k(e){return-1===e.indexOf(":")&&e.indexOf("@")>=0?"mailto:"+e:e}var y=!1;var E,w,T,S,N,D=n(13),C=n(151),I=n(35),O=n(5),L=n(3),_=n(6),x=n.n(_),P=n(143),R=n(65),U=n(75),M=n(59),j=n(63),A=function(e){function t(){return e.call(this,{scopes:L.b.currentUser.roles.includes("EMPLOYEE")?["https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.profile.emails","https://www.googleapis.com/auth/classroom.rosters.readonly","https://www.googleapis.com/auth/classroom.coursework.students"]:["https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/classroom.courses.readonly","https://www.googleapis.com/auth/classroom.coursework.me"]})||this}return r.c(t,e),t.prototype.reclaimSubmission=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[4,gapi.client.classroom.courses.courseWork.studentSubmissions.reclaim({courseId:e.courseId,courseWorkId:e.courseWorkId,id:e.id}).then(function(e){return e.result})];case 2:return[2,t.sent()]}})})},t.prototype.handInSubmission=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[4,gapi.client.classroom.courses.courseWork.studentSubmissions.turnIn({courseId:e.courseId,courseWorkId:e.courseWorkId,id:e.id}).then(function(e){return e.result})];case 2:return[2,t.sent()]}})})},t.prototype.returnSubmission=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:return r.sent(),[4,this.getClassrooms(e)[0]];case 2:return a=r.sent(),[4,this.getCourseWork(a.id,t)];case 3:return s=r.sent(),[4,this.getStudentSubmissions(s.courseId,s.id,n)[0]];case 4:if("TURNED_IN"!=(i=r.sent()).state)throw"Inte inlämnad";return[4,gapi.client.classroom.courses.courseWork.studentSubmissions.return({courseId:i.courseId,courseWorkId:i.courseWorkId,id:i.id}).then(function(e){return console.log(e)})];case 5:return r.sent(),[2]}})})},t.prototype.getSubmissions=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o,u,c,l,d,m=this;return r.d(this,function(p){switch(p.label){case 0:return[4,this.ensureInited()];case 1:return p.sent(),[4,this.getClassrooms(e)];case 2:return s=p.sent(),i=[],n?[4,Promise.all(s.map(function(e,n){return r.b(m,void 0,void 0,function(){var a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.getCourseWork(e.id,t,!1)];case 1:return a=r.sent(),s[n].courseWork=a,[2]}})})}))]:[3,6];case 3:return p.sent(),console.table(s),[4,Promise.all(s.map(function(e,t){return r.b(m,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,this.getStudentSubmissions(e.id,e.courseWork.id,!1)];case 1:return[2,t.sent()]}})})}))];case 4:return o=p.sent(),u=[],o.map(function(e,t){var n=s[t].room.split("|")[1],a=e.map(function(e){return r.a({},e,{group:n})});u.push.apply(u,r.g(a))}),[4,Promise.all(u.map(function(e){return r.b(m,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.getUser(e.userId)];case 1:return t=n.sent(),[2,r.a({},e,t)]}})})}))];case 5:return l=p.sent(),i.push.apply(i,r.g(l)),[3,9];case 6:return[4,this.getCourseWork(s[0].id,t)];case 7:return c=p.sent(),[4,this.getStudentSubmissions(c.courseId,c.id,!0)];case 8:l=p.sent(),i.push.apply(i,r.g(l.map(function(e){return e.userEmail=L.b.currentUser.mail,e}))),p.label=9;case 9:return a?(d=n?s[0].courseWork.materials[0].driveFile.driveFile:i[0].assignmentSubmission.attachments[0].driveFile,[2,{submissions:i,templateFile:d.alternateLink,templateThumbnail:d.thumbnailUrl,templateTitle:d.title}]):[2,{submissions:i}]}})})},t.prototype.addFilesToSubmission=function(e,t,n,a){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,gapi.client.classroom.courses.courseWork.studentSubmissions.modifyAttachments({courseId:e,courseWorkId:t,id:n,addAttachments:a.map(function(e){return{driveFile:{id:e.fileId}}})}).then(function(e){return console.log(e)})];case 1:return r.sent(),[2]}})})},t.prototype.getUser=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,gapi.client.classroom.userProfiles.get({userId:e}).then(function(e){var t=e.result.name;return{name:{firstName:t.givenName,lastName:t.familyName},userEmail:e.result.emailAddress}})];case 1:if((t=n.sent()).name)return[2,t];throw"Användare inte hittad"}})})},t.prototype.getClassrooms=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,gapi.client.classroom.courses.list({fields:"courses.id,courses.room,courses.descriptionHeading",courseStates:"ACTIVE"}).then(function(t){return t.result.courses.filter(function(t){return t.room&&t.room.indexOf(e)>-1})})];case 1:if((t=n.sent()).length>0)return[2,t];throw"Inte registrerad på kurs"}})})},t.prototype.getCourseWork=function(e,t,n){return void 0===n&&(n=!0),r.b(this,void 0,void 0,function(){var a;return r.d(this,function(r){switch(r.label){case 0:return[4,gapi.client.classroom.courses.courseWork.list({courseId:e,fields:"courseWork.courseId,courseWork.id,courseWork.materials,courseWork.description,courseWork.workType,courseWork.dueDate,courseWork.dueTime"}).then(function(e){return e.result.courseWork.filter(function(e){return e.description.indexOf(t)>-1})})];case 1:if(a=r.sent(),console.table(a),1==a.length)return[2,a[0]];if(n)throw"Hittar ingen matchad inlämningsuppgift";return[2]}})})},t.prototype.getStudentSubmissions=function(e,t,n){return void 0===n&&(n=!0),r.b(this,void 0,void 0,function(){var a;return r.d(this,function(r){switch(r.label){case 0:return[4,gapi.client.classroom.courses.courseWork.studentSubmissions.list({courseId:e,courseWorkId:t}).then(function(e){return e.result.studentSubmissions})];case 1:if(a=r.sent())return[2,a];if(n)throw"Hittar ingen matchad inlämning";return[2]}})})},t}(n(79).a),G=n(19),F=n(51),B=n(77),K={TURNED_IN:"inlämnad",RECLAIMED_BY_STUDENT:"återtagen",RETURNED:"återlämnada",CREATED:"ej inlämnad",NEW:"ej inlämnad"},W=function(e){var t=e.submissions,n=e.assignments,r=e.refreshAssignment,s=e.hasTemplate,i={},o={};return t.forEach(function(e){i[e.group]?i[e.group].push(e):i[e.group]=[e]}),n.forEach(function(e){var n=t.find(function(t){return t.id==e.submissionId});n&&(o[n.group]?o[n.group].push(e):o[n.group]=[e])}),a.createElement("div",{className:"stopFloats"},Object.keys(i).sort().map(function(e,t){return a.createElement(G.a,{key:t,title:e,children:a.createElement(q,{assignments:o[e]?o[e]:[],submissions:i[e],refreshAssignment:r,hasTemplate:s})})}))},q=function(e){function t(t){var n=e.call(this,t)||this;return n.state={submissions:n.props.submissions,assignments:n.props.assignments},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=function(e,t){var n=e.name.lastName.localeCompare(t.name.lastName);return 0==n?e.name.firstName.localeCompare(t.name.firstName):n},n=this.state,r=n.submissions,s=n.assignments,i=this.props.hasTemplate,o=r.filter(function(e){return"TURNED_IN"===e.state}).sort(t),u=r.filter(function(e){return"TURNED_IN"!==e.state}).sort(t);return a.createElement(a.Fragment,null," ",o.length>0&&a.createElement(a.Fragment,null,a.createElement("p",null,"Inlämnade uppgifter:"),a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Elev"),a.createElement("th",null,"Inlämingsdatum"),a.createElement("th",null,"Inlämning"))),a.createElement("tbody",null,o.map(function(t,n){return a.createElement(V,{key:n,submission:t,files:s.filter(function(e){return e.submissionId===t.id}),refreshAssignment:e.props.refreshAssignment,hasTemplate:i})})))),u.length>0&&a.createElement(a.Fragment,null,a.createElement("p",null,"Ej inlämnade:"),a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Elev"),a.createElement("th",null,"Status"),a.createElement("th",null,"Inlämning"))),a.createElement("tbody",null,u.map(function(e,t){return a.createElement(V,{key:t,submission:e,files:s.filter(function(t){return t.submissionId===e.id}),refreshAssignment:function(){},hasTemplate:i})})))))},t}(a.Component),V=function(e){var t,n,r=e.submission,s=e.files,i=e.refreshAssignment,o=e.hasTemplate,u=!!r.assignmentSubmission.attachments&&r.assignmentSubmission.attachments[0].driveFile,c=r.name,l=r.state,d=r.userEmail,m=r.late,p=r.updateTime,h="TURNED_IN"==l,f=h?(t=r.alternateLink,(n=t.split("/")).splice(3,1,"u","0","g","tg"),n[8]=n[9]+"?authuser=0#u="+n[12],n.slice(0,9).join("/")):"";u&&o&&(u.alternateLink=f);var g=u?o?r.assignmentSubmission.attachments.slice(1):r.assignmentSubmission.attachments:[];return a.createElement("tr",{className:m&&h?"late":void 0},a.createElement("td",null,a.createElement("a",{href:"mailto:"+d},c.firstName," ",c.lastName)),a.createElement("td",null,h?new Date(p).toLocaleString().split(" ").join(" kl. "):K[l]),a.createElement("td",null,u&&h?[!o&&g.length>1&&a.createElement("p",null,a.createElement(M.a,{label:"Bedöm i Classroom",url:f,faIcon:"fas fa-highlighter"})),(o||!o&&1==g.length)&&a.createElement(Y,{key:0,file:u,data:s.find(function(e){return e.metadata.driveFileId===u.id}),refreshAssignment:i}),!o&&g.length>1||o&&g.length?a.createElement(G.a,{key:1,title:"Bifogade filer ("+g.length+")"},g.map(function(e,t){s.find(function(t){return t.metadata.driveFileId===e.driveFile.id});return a.createElement(Y,{key:t,file:e.driveFile,data:s.find(function(t){return t.metadata.driveFileId===e.driveFile.id}),refreshAssignment:i})})):void 0]:u&&[o&&a.createElement(F.a,{key:0,thumbnail:u.thumbnailUrl,url:u.alternateLink,title:u.title}),g.length?a.createElement(G.a,{key:1,title:"Bifogade filer ("+g.length+")"},g.map(function(e,t){s.find(function(t){return t.metadata.driveFileId===e.driveFile.id});return a.createElement(F.a,{key:t,thumbnail:e.driveFile.thumbnailUrl,url:e.driveFile.alternateLink,title:e.driveFile.title})})):void 0]))},Y=function(e){var t=e.file,n=e.data,r=e.refreshAssignment,s=!(!n||!n.metadata.urkundResponse)&&JSON.parse(n.metadata.urkundResponse)[0];return console.table(s),a.createElement("div",{className:"stats-view"},a.createElement(F.a,{thumbnail:t.thumbnailUrl,url:t.alternateLink,title:t.title}),a.createElement("div",{className:"urkund-stats urkund-status-col"},s?a.createElement(a.Fragment,null,a.createElement("p",null,"Urkund"),a.createElement("a",{href:s.Report&&s.Report.ReportUrl,onClick:function(e){-1!==["Accepted","Submitted"].indexOf(s.Status.State)&&(e.preventDefault(),e.stopPropagation(),r(n))},target:"_blank",title:Object(B.a)(s)},a.createElement("div",{className:Object(B.c)(s)})),a.createElement("div",{className:Object(B.b)(s)},s.Report&&"number"==typeof s.Report.Significance?s.Report.Significance.toFixed()+"%":" ")):a.createElement("p",null,"Ej skickad till Urkund")))},z=function(e){function t(t){var n=e.call(this,t)||this;return n.drive=new j.a,n.classroom=new A,n.state={assignment:null,assignments:null,loading:!0,loadingMessage:"Laddar inlämning..."},n}return r.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,t,r)})},t.prototype.componentDidMount=function(){this.load()},t.prototype.componentWillReceiveProps=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return n.trys.push([0,4,,5]),e.task.id===this.props.task.id&&e.course.id===this.props.course.id?[3,3]:[4,this.setStatePromised(function(){return{assignment:null,loading:!0}})];case 1:return n.sent(),[4,this.load()];case 2:n.sent(),n.label=3;case 3:return[3,5];case 4:return t=n.sent(),Object(s.n)(t),[3,5];case 5:return[2]}})})},t.prototype.update=function(e,t){return r.g([t],e.filter(function(e){var n=e.user,r=e.filename;return n!==t.user||r!==t.filename}))},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,u,c,l,d,m,p=this;return r.d(this,function(h){switch(h.label){case 0:return h.trys.push([0,4,,5]),e=this.props.task,t=e.id,e.sendToUrkund,n=e.templateFile,a=this.props.course,s=a.id,i=a.school,o=Object(D.e)(L.a.currentUser,i),[4,this.classroom.getSubmissions(s,t,o,!!n)];case 1:return u=h.sent(),c=u.submissions,l=[],[4,(o?L.a.kedBackendClient.http.get("assignments/"+i+"/"+s+"/"+t):L.a.kedBackendClient.http.get("assignments/"+i+"/"+s+"/"+t+"/"+L.a.currentUser.mail)).then(function(e){return e.json()}).then(function(e){return e.map(function(e){var t,n;if(!e.metadata||!e.metadata.driveFileId)return e;var a=!!e.metadata.urkundResponse&&JSON.parse(e.metadata.urkundResponse);e.metadata.urkundUploadError||e.metadata.urkundLastPoll&&!(a&&a[0].Status.State&&["Accepted","Submitted"].indexOf(a[0].Status.State)>=0&&parseInt(e.metadata.urkundLastPoll)<x()().add(-15,"seconds").toDate().getTime())||l.push(e);var s=c.filter(function(t){return t.userEmail==e.user}),i=function(t){t.assignmentSubmission.attachments.forEach(function(n){n.driveFile.id==e.metadata.driveFileId&&(e.inClassroom=!0,e.submissionId=t.id)})};try{for(var o=r.h(s),u=o.next();!u.done;u=o.next()){i(u.value)}}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}return e})})];case 2:return d=h.sent(),u.submissions=c,this.setState({error:null,loading:!1,assignments:d,assignment:u}),[4,Promise.all(l.map(function(e){return r.b(p,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,this.refreshAssignment(e)];case 1:return[2,t.sent()]}})})}))];case 3:return h.sent(),[3,5];case 4:return m=h.sent(),this.setState({loading:!1,error:"Kunde inte ladda inlämningsuppgifter",assignment:null}),console.error(m),[3,5];case 5:return[2]}})})},t.prototype.verifyAndUpload=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),e?[4,this.upload(e,t)]:[2];case 1:return r.sent(),[4,this.load()];case 2:return r.sent(),[3,4];case 3:return n=r.sent(),console.error(n),[3,4];case 4:return[2]}})})},t.prototype.upload=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,u,c,l,d,m,p,h;return r.d(this,function(f){switch(f.label){case 0:return n=this.props.task,a=n.id,s=n.sendToUrkund,i=this.props.course,o=i.id,u=i.school,c=L.a.currentUser.mail,(l=new FormData).append("files",e),d={userDisplayName:L.a.currentUser.displayName,verifyWithUrkund:s},t&&(d=r.a({},d,{driveFileId:t.fileId,driveFileUrl:t.url,driveFileIconUrl:t.iconUrl})),[4,L.a.kedBackendClient.http.fetch("assignments/"+u+"/"+o+"/"+a+"/"+c,"put",{},d,{body:l})];case 1:return 200===(m=f.sent()).status?[3,3]:(p=O.c.bind,h=[void 0,m.status],[4,m.text()]);case 2:throw new(p.apply(O.c,h.concat([f.sent()])));case 3:return[2]}})})},t.prototype.reclaimSubmission=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return confirm("Är du säker på att du vill återta uppgiften?")?(this.setState({loading:!0,loadingMessage:"Återtar inlämning..."}),[4,this.classroom.reclaimSubmission(e)]):[2];case 1:return t.sent(),[4,this.load()];case 2:return t.sent(),[2]}})})},t.prototype.handInSubmission=function(e,t){return void 0===t&&(t=!1),r.b(this,void 0,void 0,function(){var n,a,s,i=this;return r.d(this,function(o){switch(o.label){case 0:return confirm("Är du säker på att du vill lämna in?")?(this.setState({loading:!0,loadingMessage:"Lämnar in uppgiften..."}),this.props.task.sendToUrkund?(n=e.assignmentSubmission.attachments.map(function(e){return e.driveFile}),[4,Promise.all(n.map(function(e){return r.b(i,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,this.drive.getFile(e.id)];case 1:return[2,t.sent()]}})})}))]):[3,4]):[2];case 1:return a=o.sent(),[4,Promise.all(a.map(function(e){return r.b(i,void 0,void 0,function(){var t,n;return r.d(this,function(a){switch(a.label){case 0:return t=r.a({},e,{canExport:e.mimeType.includes("google-apps")}),[4,this.drive.downloadFile({file:t,mimeType:"text/plain"})];case 1:return n=a.sent(),[2,{file:t,data:n}]}})})}))];case 2:return s=o.sent(),[4,Promise.all(s.map(function(e){return r.b(i,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,this.verifyAndUpload(e.data,e.file)];case 1:return t.sent(),[2]}})})}))];case 3:o.sent(),o.label=4;case 4:return t?[3,6]:[4,this.classroom.handInSubmission(e)];case 5:o.sent(),o.label=6;case 6:return[4,this.load()];case 7:return o.sent(),[2]}})})},t.prototype.addFilesToSubmission=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(r){switch(r.label){case 0:this.setState({loading:!0,loadingMessage:"Uppdaterar inlämning med nya filer..."}),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this.classroom.addFilesToSubmission(e.courseId,e.courseWorkId,e.id,t)];case 2:return r.sent(),[3,4];case 3:return n=r.sent(),console.log(n),Object(s.n)("Du försökte läman in en fil som du inte änger."),[3,4];case 4:return[4,this.load()];case 5:return r.sent(),[2]}})})},t.prototype.refreshAssignment=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,u,c,l,d,m,p,h=this;return r.d(this,function(f){switch(f.label){case 0:return t=L.a.kedBackendClient.http,n=this.props.course,a=n.id,s=n.school,i=this.props.task.id,o=e.user,u=e.filename,console.log("Refreshing: "+u),[4,this.setState(function(t){var n=t.assignments;return{assignments:h.update(n,r.a({},e,{isRefreshing:!0}))}})];case 1:f.sent(),f.label=2;case 2:return f.trys.push([2,8,,10]),[4,t.get("assignments/urkund/"+s+"/"+a+"/"+i+"/"+o+"/"+u)];case 3:return(c=f.sent()).status>=400?(l=O.c.bind,d=[void 0,c.status],[4,c.text()]):[3,5];case 4:throw new(l.apply(O.c,d.concat([f.sent()])));case 5:return[4,c.text()];case 6:return m=f.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:h.update(n,r.a({},e,{isRefreshing:!1,metadata:r.a({},e.metadata,{urkundResponse:m})}))}})];case 7:return f.sent(),[3,10];case 8:return p=f.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:h.update(n,r.a({},e,{isRefreshing:!1,refreshError:p}))}})];case 9:return f.sent(),[3,10];case 10:return[2]}})})},t.prototype.teacherView=function(){var e=this.state,t=e.assignment,n=e.assignments,r=this.props.task,s=(r.sendToUrkund,r.templateFile);return a.createElement(a.Fragment,null,a.createElement("p",null,"Här kan du som lärare se inlämnade arbeten"),a.createElement(W,{assignments:n,submissions:t.submissions,refreshAssignment:this.refreshAssignment.bind(this),hasTemplate:!!s}))},t.prototype.studentView=function(){var e=this,t=this.props.task,n=t.sendToUrkund,r=t.additionalUploads,s=t.templateFile,i=this.state,o=i.assignment,u=i.assignments,c=i.error,l=o.submissions[0],d=!!s,m=l.assignmentSubmission.attachments&&l.assignmentSubmission.attachments.length>0,p="TURNED_IN"==l.state,h=!(!p||!m)&&!!u.find(function(e){return e.submissionId==l.id});return a.createElement(a.Fragment,null,p?h?a.createElement("p",null,"Uppgiften är inlämnad."):a.createElement("p",null,"Uppgiften är inlämnad men måste även skickas till Urkund"):a.createElement("p",null,"Uppgiften är inte inlämnad","RECLAIMED_BY_STUDENT"==l.state?" (återtagen)":void 0,"."),d?a.createElement(a.Fragment,null,a.createElement("p",null,"Dokumentet nedan ska användas till inlämningen."),a.createElement(F.a,{size:"large",thumbnail:o.templateThumbnail,url:o.templateFile,label:o.templateTitle,title:o.templateTitle})):void 0,a.createElement(a.Fragment,null,a.createElement("div",{className:"btn-group"},d||m?p?a.createElement(M.a,{action:function(){return e.reclaimSubmission(l)},faIcon:"fas fa-thumbs-down",label:"Återta"}):a.createElement(M.a,{addClass:"red",action:function(){return e.handInSubmission(l)},faIcon:"fas fa-thumbs-up",label:"Lämna in"}):void 0,p&&!h&&a.createElement(M.a,{action:function(){return e.handInSubmission(l,!0)},label:"Skicka till urkund"}),(!d||r)&&!p&&a.createElement(M.b,{label:r?"Bifoga filer":"Välj filer",action:function(){var t=new U.a({upload:!0,multiple:!0});t.show().then(function(n){e.addFilesToSubmission(l,n),t.close()})}})),n&&a.createElement("p",null,"Uppgiften ",r?"och alla bifagde filer ":"","skickas till Urkund."),(r&&l.assignmentSubmission.attachments.length>1||!d&&m)&&a.createElement(a.Fragment,null,a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Bifogade filer"))),a.createElement("tbody",null,l.assignmentSubmission.attachments.map(function(e,t){if(!d||0!=t)return a.createElement("tr",{key:t},a.createElement("td",null,a.createElement(F.a,{size:"small",label:e.driveFile.title,title:e.driveFile.title,thumbnail:e.driveFile.thumbnailUrl,url:e.driveFile.alternateLink})))}))),a.createElement("p",null,a.createElement("em",null,"De bifogade filerna lämnas in samtidigt som uppgiften lämnas in. För att ta bort bifogade filer måste du gå via ",a.createElement("a",{href:l.alternateLink,target:"_blank"},"Classroom"),". Obs! Ta inte bort själva uppgiftsfilen.")))),c&&a.createElement("p",{className:"error"},c))},t.prototype.render=function(){return this.state.loading?a.createElement(u.a,{label:this.state.loadingMessage}):Object(D.e)(L.a.currentUser,this.props.course.school)?this.teacherView():this.studentView()},t}(a.Component),H=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:void 0,weekPlannerWeek:x()().week()},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){I.b.subscribe(this.onUserTasksChanged)},t.prototype.componentWillUnmount=function(){I.b.unsubscribe(this.onUserTasksChanged)},t.prototype.componentWillReceiveProps=function(e){if(e.task.id!==this.props.task.id){var t=I.b.mem.items.find(function(t){return t.task&&t.task.length>0&&t.task[0].id===e.task.id})||null;this.setState({userTask:t,weekPlannerWeek:x()(I.b.persistedState.weekDate).week()})}},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.task&&e.task.length>0&&e.task[0].id===t.props.task.id})||null;this.setState({userTask:n,weekPlannerWeek:x()(I.b.persistedState.weekDate).week()})},t.prototype.toggleTask=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,u;return r.d(this,function(r){switch(r.label){case 0:return e=I.b.persistedState.weekDate,t=this.state.userTask,n=this.props,a=n.course,s=n.task,(i=a.modules.find(function(e){return e.taskIds.some(function(e){return e===s.id})}))?void 0===t?[2]:t?[3,2]:(o=Math.max.apply(Math.max,[e].concat(I.b.mem.items.map(function(e){return e.dateTime}))),u={id:Object(O.h)(),courseName:a.name,dateTime:o+2e3,learningGoal:s.learningGoal||i.name,name:s.name,url:s.url,task:[s],course:[a],acl:[new O.b("email",L.a.currentUser.mail,"S"),new O.b("schoolRole",L.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},s.deadline&&(u.deadline=s.deadline),[4,Promise.all([I.b.setWeekPlannerBoxOpen(this.props.course.name,!0),I.b.insert([u])])]):[2];case 1:return r.sent(),[3,4];case 2:return[4,I.b.delete([t.id])];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.task,i=t.course,o=this.state,u=o.userTask,c=o.weekPlannerWeek,p=n.abilities.map(function(e){return i.abilities.find(function(t){return t.id===e.id})}).filter(function(e){return!!e}),h=n.centralContent.map(function(e){return i.centralContent.find(function(t){return t.id==e.id})}).filter(function(e){return!!e}),f=n.knowledgeRequirements.map(function(e){return i.knowledgeRequirements.find(function(t){return t.id===e.id})}).filter(function(e){return!!e}),g=u&&("adding"===u.$meta||"deleting"===u.$meta),b=x()().week(),v=c===b?"loggboken":c===b+1?Object(s.a)(E||(E=r.e(["vald vecka (nästa vecka)"],["vald vecka (nästa vecka)"]))):c===b-1?Object(s.a)(w||(w=r.e(["vald vecka (förra veckan)"],["vald vecka (förra veckan)"]))):Object(s.a)(T||(T=r.e(["vald vecka (v ",")"],["vald vecka (v ",")"])),c),k=n.deadline&&x()(n.deadline).endOf("day")<x()();return i.googleCreateClassrooms&&n.templateFile&&n.templateFile.mimeType.includes("google-apps"),a.createElement(a.Fragment,null,a.createElement("h1",null,n.name),n.content&&a.createElement(a.Fragment,null,a.createElement("div",{dangerouslySetInnerHTML:{__html:n.content}})),n.learningGoal&&a.createElement("div",null,a.createElement("h2",null,"Uppgiftens lärandemål"),a.createElement("p",null,n.learningGoal)),n.url&&a.createElement("a",{href:n.url,className:"btn btn-large"},"Gå till uppgiften"),a.createElement("br",null),n.assignment&&a.createElement("div",{className:"card"+(k?" warning":"")},a.createElement("div",{className:"card-icon"},a.createElement("i",{className:"fas fa-file-alt"}),a.createElement("p",{className:"card-icon-info"},n.deadline?n.deadline:"Ingen deadline")),a.createElement("h2",null,"Inlämningsuppgift"),i.googleCreateClassrooms?a.createElement(a.Fragment,null,a.createElement(z,{course:i,task:n})):a.createElement(a.Fragment,null,Object(D.e)(L.a.currentUser,i.school)?a.createElement("p",null,"Här kan du som lärare se elevernas inlämnade arbeten."):n.templateFile?a.createElement(a.Fragment,null,a.createElement("p",null,"Till den här uppgiften ska du anvädna följande mall:"),a.createElement(F.a,{thumbnail:n.templateFile.iconUrl,title:n.templateFile.name,url:n.templateFile.url.substr(0,n.templateFile.url.lastIndexOf("/"))+"/copy"})):a.createElement(a.Fragment,null,a.createElement("p",null,"Det här är en inlämningsuppgift. Lämna in ditt arbete som en pdf, doc eller odt fil genom att dra det till fältet under. Du kan även ladda up en fil eller välja en fil från din Google Drive."),n.deadline?a.createElement("p",null,a.createElement("b",null,"Den här uppgiften ",k?"skulle ha lämnats in ":"ska vara inlämnad ",x()(n.deadline).format("YYYY-MM-DD"))):void 0),a.createElement(P.a,{courseId:i.id,taskId:n.id,school:i.school,sendToUrkund:n.sendToUrkund,courseStudyGroups:i.studyGroups,taskDeadline:n.deadline}),a.createElement("br",null))),p.length>0&&a.createElement(d.a,{title:"Den här uppgiften behandlar följande förmågor",className:"larger",headerOpen:!1,abilities:p}),h.length>0&&a.createElement(m.a,{title:"Den här uppgiften behandlar följande centrala innehåll",className:"larger",headerOpen:!1,centralContent:h}),f.length>0&&a.createElement(l.a,{title:"I den här uppgiften bedöms följande kunskapskrav",className:"larger",headerOpen:!1,requirements:f}),a.createElement("hr",null),void 0!==u&&a.createElement("div",{className:"taskContainer",style:g?{opacity:.5}:{}},a.createElement(R.a,{state:u&&"deleting"!==u.$meta?"checked":"",label:u?Object(s.a)(S||(S=r.e(["Ta bort uppgiften från ",""],["Ta bort uppgiften från ",""])),v):Object(s.a)(N||(N=r.e(["Lägg till uppgiften i ",""],["Lägg till uppgiften i ",""])),v),onClick:function(){return!g&&e.toggleTask()}})),a.createElement("hr",null),n.resources&&n.resources.length>0&&a.createElement(a.Fragment,null,a.createElement("h2",null,"Resurser kopplade till uppgiften"),a.createElement("div",{className:"taskContainer"},n.resources.map(function(e,t){return a.createElement("div",{key:t,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:e.url},e.name)))})),a.createElement("br",null)),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null))},t}(a.Component);y||(y=!0,document.documentElement.addEventListener("click",function(e){var t=e.target;t&&"A"===t.tagName&&history.replaceState({pageYOffset:window.pageYOffset},null,null)}),history.scrollRestoration&&(history.scrollRestoration="manual"));var Z=function(e){function t(t){var n=e.call(this,t)||this;n.onHashChange=n.onHashChange.bind(n);var r=n.getModuleAndTaskFromHash(),a=r.module,s=r.task;return n.state={module:a,task:s},n}return r.c(t,e),t.prototype.getModuleAndTaskFromHash=function(){var e=(location.hash.substr(1)||"").split("/");e.length>0&&!e[0]&&(e=e.slice(1));var t=r.f(e.map(function(e){return decodeURIComponent(e)}),2),n=t[0],a=t[1],s=this.props.course.modules.filter(function(e){return(e.name||"").trim().toLowerCase()===(n||"").trim().toLowerCase()})[0]||null,i=a&&this.props.course.tasks.find(function(e){return e.id===a})||null;return i&&!s&&(s=this.getOrderedModules().filter(function(e){return e.taskIds.some(function(e){return i.id===e})})[0]),i&&s&&(i=f(s,i)),{module:s,task:i}},t.prototype.componentDidMount=function(){window.addEventListener("hashchange",this.onHashChange)},t.prototype.componentWillUnmount=function(){window.removeEventListener("hashchange",this.onHashChange)},t.prototype.onHashChange=function(){var e=this.getModuleAndTaskFromHash(),t=e.module,n=e.task;this.setState({module:t,task:n},function(){var e=void 0;if(n){var t=document.getElementById("ked-task-anchor");e=t?window.pageYOffset+t.getBoundingClientRect().top:0}!function(e){var t=e.fallbackScrollPosition;history.state&&void 0!==history.state.pageYOffset?window.scrollTo(0,history.state.pageYOffset):void 0!==t&&window.scrollTo(0,t)}({fallbackScrollPosition:e})})},t.prototype.getOrderedModules=function(){var e=this.props.course,t=e.moduleOrder||e.modules.map(function(e){return e.id});return t.map(function(t){return e.modules.find(function(e){return e.id===t&&!e.inactive})}).filter(function(e){return!!e}).concat(e.modules.filter(function(e){return!t.find(function(t){return e.id===t})}))},t.prototype.render=function(){var e=this.props,t=e.course,n=e.courseBuilderUrl,r=this.state,s=r.module,i=r.task,o=this.getOrderedModules();return a.createElement("div",null,a.createElement(c,{title:t.name+" - "+t.points+"p",backgroundImage:(t.images.find(function(e){return e.id===t.imageId})||{url:""}).url,tabs:[{name:"Upptakt",link:"#",key:"Upptakt"}].concat(o.map(function(e){var t=e.name;return{name:t,link:"#"+encodeURIComponent(t),key:t}})).concat(t.workFlowLink?[{name:"Arbetsgång",key:"workflow",link:t.workFlowLink}]:[]).concat(Object(D.c)(L.a.currentUser,t)?[{name:a.createElement("span",null,a.createElement("i",{className:"fa fa-pencil","aria-hidden":"true"})," Redigera denna kurs"),key:"edit",link:Object(D.f)(n,{})+"#/courses/"+t.id+"/edit"}]:[]),activeTab:s?"#"+encodeURIComponent(s.name):"#"}),a.createElement("div",{className:"sv-row sv-layout"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},a.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},i?a.createElement(H,{task:i,course:t}):s?a.createElement(g,{course:t,module:s}):a.createElement(v,{course:t})),a.createElement("div",{className:"sv-layout sv-column-5"},a.createElement("div",{className:"sv-vertical sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement(C.a,{viewCourseUrl:"",env:L.a}))))))))))},t}(a.Component),$=n(15),J=n(134);function Q(){return a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement(c,{title:L.a.currentUser.school,backgroundImage:"",tabs:[{name:"Skolans kurser",link:"#"}],activeTab:"#"}),a.createElement("div",{className:"sv-row sv-layout"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},a.createElement(J.a,null)))))}n.d(t,"a",function(){return X});var X=function(e){function t(t){var n=e.call(this,t)||this;return n.state={course:null,isLoading:!0},n}return r.c(t,e),t.prototype.componentWillMount=function(){var e=this;this.load().catch(s.n).then(function(){return e.setState({isLoading:!1})})},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return(e=Object($.b)(location.search).courseId)?[4,Object(o.f)(e)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n=null,r.label=3;case 3:return t=n,this.setState({course:t}),document.title=t?t.name+" - "+t.points+"p":"Kurser",[2]}})})},t.prototype.render=function(){return a.createElement("div",{className:"course-viewer"},this.state.isLoading?a.createElement(u.a,null):this.state.course?a.createElement(Z,{course:this.state.course,courseBuilderUrl:this.props.courseBuilderUrl}):a.createElement(Q,null),a.createElement(i.a,null))},t}(a.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=n(27),s=(n(104),n(3)),i=n(7),o=n(0),u=n(190),c=n(2),l=n(12),d=n(17),m=n(8),p=n(62),h=s.a.bearerProvider.getBearer(),f=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isTokenLoaded:!1},n}return r.c(t,e),t.prototype.componentWillMount=function(){var e=this;h.then(function(){e.setState({isTokenLoaded:!0})}).catch(function(e){Object(c.n)(e)})},t.prototype.render=function(){var e=this.props.intl;return this.state.isTokenLoaded?o.createElement(d.a.Provider,{value:{intl:e}},o.createElement(u.a,{courseBuilderUrl:i.b.KED_COURSE_BUILDER_URL})):o.createElement("p",null,o.createElement(l.a,null),"V.g. vänta... autenticerar...")},t}(o.Component),g=Object(p.a)(Object(m.d)(f));a.a.components=r.a({},a.a.components,{KEDAppCourseViewer:g})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,