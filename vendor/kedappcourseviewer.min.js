var kedappcourseviewer=function(e){function t(t){for(var r,i,o=t[0],u=t[1],c=t[2],d=0,p=[];d<o.length;d++)i=o[d],a[i]&&p.push(a[i][0]),a[i]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(l&&l(t);p.length;)p.shift()();return s.push.apply(s,c||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var u=n[o];0!==a[u]&&(r=!1)}r&&(s.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={3:0},s=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],u=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var l=u;return s.push([217,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return i}),n.d(t,"k",function(){return u}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return l}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return p}),n.d(t,"o",function(){return f}),n.d(t,"n",function(){return h}),n.d(t,"l",function(){return m}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return y});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function i(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var o=[].concat;function u(e){return o.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function l(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var i=t[r];if(null==i)return-1;var o=n[r];return null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function p(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function f(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function h(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function m(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],i=t(s),o=n[i];o?o.push(s):n[i]=[s]}return n}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function b(e,t){var n,a,s={};try{for(var i=r.h(t),o=i.next();!o.done;o=i.next()){var u=o.value;u in e&&(s[u]=e[u])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(n)throw n.error}}return s}function k(e,t){var n=v(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function y(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var i=n[a];if(r[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(28);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(24);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,,function(e,t,n){"use strict";var r=n(3),a=n(4),s=n(18),i=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(22);function u(e,t){return o.a[e].relationships[t]}function c(e,t){var n=function(e){var t=function(e){return!0};return e.from?l(t,function(t){return t.dateTime>=e.from}):e.to?l(t,function(t){return t.dateTime<e.to}):e.ids?l(t,function(t){return e.ids.includes(t.id)}):e.name?l(t,function(t){return t.name===e.name}):e.tags?l(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function l(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function p(e){return"clear-branch"===e.op||"merge"===e.op}var f=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var s=a[r];localStorage.setItem("cache-bust-"+n+"-"+s,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+u(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),h=n(15);function m(e,t){for(var n=Object.keys(t),r=e,s=0,i=n;s<i.length;s++){var o=i[s];r===e&&(r=a.a({},e));var u=t[o];if(u&&"object"==typeof u){var c=Object.keys(u).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var l=function(e){var t=u[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var s=0,i=n;s<i.length;s++){var c=i[s];a.includes(c)||a.push(c)}break;case"$remove":var l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!l.includes(e)})}},d=0,p=c;d<p.length;d++){l(p[d])}continue}}r[o]=u}return r}function g(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,s=Object.keys(t),i=a.a({},e),o=0,u=s;o<u.length;o++){var c=u[o],l=t[c];if(l&&"object"==typeof l){var d=Object.keys(l).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var p=function(e){var t=l[e];switch(e){case"$unset":r?delete i[c]:i[c]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var s=o.$remove;Array.isArray(s)&&(o.$remove=s.filter(function(e){return!n.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(n):n.slice(),o.$add=d;break;case"$remove":var o,u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!u.includes(e)}),0===o.$add.length&&delete o.$add),s=(s=o.$remove)?s.concat(u):u.slice(),o.$remove=s}},f=0,h=d;f<h.length;f++){p(h[f])}continue}}i[c]=l}return i}var v=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(s=r[n]).op||s.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==s.op||s.targetBranchId&&s.branchId!==this.query.branchId&&s.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===s.op&&(s.deltaDoc.tags&&this.query.tags||s.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:i=this.getDataWithMutationsApplied(e,!1,this.data),this.data=i,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,s=this.includes,i=this.query,o=i.hasEdgesFrom?[].concat(i.hasEdgesFrom||[]):[],c=i.tags?[].concat(i.tags||[]):[];switch(t.op){case"update":return Object(h.e)(e,function(e){if(e.id===t.id){var r=m(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return s.forEach(function(r){var s,i=e[r];if(i){var o=Object(h.e)(i,function(e){if(e.id!==t.id)return e;var r=m(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==i&&(e=a.a({},e,((s={})[r]=o,s)))}}),e});case"add-related":if(r===t.table&&-1!==s.indexOf(t.graphProp))return Object(h.e)(e,function(e){var r;if(e.id!==t.id)return e;var s=a.a({},t.relatedDoc);return n&&(s.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([s]),r))});if(i.hasEdgesFrom&&o.includes(t.id)&&r===u(t.table,t.graphProp)){if(!i.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return i.ids&&i.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==s.indexOf(t.graphProp)?Object(h.e)(e,function(e){var r,s=e[t.graphProp];return s?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?s.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):s.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):i.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(i.include){var l=s.map(function(e){return{label:e,table:u(r,e)}}).filter(function(e){return e.table===t.table});if(l.length>0)return Object(h.e)(e,function(e){return l.forEach(function(r){var s,i=r.label,o=e[i];o&&(e=a.a({},e,((s={})[i]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),s)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),b=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new i(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return v.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesFrom",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.hasEdgesTo=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesTo",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:f.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new s.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(34).a),k=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===v.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var s=a.find(function(t){return o.a[r.table].relationships[t]===e});if(s){for(var i={},u=0,l=r.data;u<l.length;u++){var d=l[u];c(t,d[s]).forEach(function(e){return i[e.id]=e})}var p=Object.keys(i).map(function(e){return i[e]});return t.ids.every(function(e){return p.some(function(t){return t.id===e})})?{value:p}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var f=c(t,r.data);return t.ids.every(function(e){return f.some(function(t){return t.id===e})})?{value:f}:"continue"}},s=0,i=this.queries;s<i.length;s++){var u=a(i[s]);if("object"==typeof u)return u.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,s=this.findQuery(n,r);s?s.timeoutHandle&&(clearTimeout(s.timeoutHandle),s.timeoutHandle=null):(s=new v(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(s)),s.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,s=(n.repo,this.findQuery(r,a));s&&(s.unsubscribe(e),0===s.subscriptions.length&&(s.timeoutHandle=setTimeout(function(){0===s.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==s}))},this.queries.length>50?500:3e5)))},e}(),y=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return p(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return u(e,t)===r.table}):!!p(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return u(e,t)})).some(function(e){return u(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),s=e.length,i=function(t){var s=e[t];if("update"===s.op){var i=r.findIndex(function(e){return"update"===e.op&&e.branchId===s.branchId&&e.id===s.id});i>=0&&(n[t]=a.a({},s,{deltaDoc:g(s.deltaDoc,r[i].deltaDoc)}),r.splice(i,1))}},o=0;o<s;++o)i(o);return n.concat(r)},e}(),E=n(38);function w(e,t,n,r,s,i){for(var o=function(n){switch(n.op){case"add-related":i||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:s}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(i||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:s,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((u=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var o=t[u];t=t.slice(0,u).concat([a.a({},o,{$meta:r?"removing":"persisted"})],t.slice(u+1))}else t=t.slice(0,u).concat(t.slice(u+1));break;case"update":if(n.branchId!==e)return"continue";var u;if((u=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!i)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[s],$meta:r?"adding":"persisted"}].concat(t);else{var c=t[u],l=c.contributors.slice();l.includes(s)||l.push(s);var d=g(c.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:l,$meta:r?"updating":"persisted"}].concat(t.slice(0,u),t.slice(u+1)):t.slice(0,u).concat(t.slice(u+1))}}},u=0,c=n;u<c.length;u++){var l=o(c[u]);if("object"==typeof l)return l.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var s=a[r],i=this.lookup[s];if(i.value){var o=w(i.query.branchId,i.value,e,n,this.getUserDisplayName(),!!i.query.tags);null===o&&(n||i.fetch()),o!==i.value&&(i.optimisticValue=o,n||(i.value=o),i.notify(o))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new S(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),S=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=s.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(s.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),D=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),s=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),f.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(y.merge(e,s),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return i=a.sent(),this.persistedVersion.dispatchError(i),i&&i.name&&i.name.startsWith("http4")?(this.dispatchError(i,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(i,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new s.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),C=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),O=function(){function e(e,t,n,r,a,s,i,u){var c=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=s,this.writer=i,this.cacheOptimized=u,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new y),s||(this.querySet=new k(this.mutationQueue)),i||(this.writer=new D(this.mutationQueue,this.querySet,e,t,n)),Object.keys(o.a).forEach(function(e){var t=new b(c,e,r||{});u&&(t=t.cacheOptimized()),c[e]=t}),this.deltas=new C(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new b(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var N=n(5),I=n(7);n.d(t,"c",function(){return x}),n.d(t,"d",function(){return R}),n.d(t,"b",function(){return P}),n.d(t,"a",function(){return L});var x=new O(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),R=Object(N.i)(I.b.KED_REALM),P={standardSchool:x.schools.name("standard").cacheOptimized().single(),get mySchool(){return x.schools.name(r.a.currentUser.school).cacheOptimized().single()}},L={getBranchId:function(e,t){return e.switchMap(function(e){return x.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return x.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return x.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(N.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return x.courseBlocks.tags(e).idsOnly().concat(x.courseContents.tags(e).idsOnly()).concat(x.courseTabs.tags(e).idsOnly()).concat(x.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},,function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(16);n.d(t,"a",function(){return i}),n.d(t,"c",function(){return u}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return l}),n.d(t,"b",function(){return p}),n.d(t,"f",function(){return f});var i=["user","role","school","debug","testVersion","testversion","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function u(e,t){return o(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function l(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,i=Object(s.b)(location.search),o=r.a({},i,{role:t,school:n}),u=Object(s.a)(o);a?location.href=""+a+u:(location.hash="#",location.search=u)}};function p(e){d.actAs(e)}function f(e,t){var n,a,o=Object(s.b)(location.search),u={};try{for(var c=r.h(i),l=c.next();!l.done;l=c.next()){var d=l.value;o[d]&&(u[d]=o[d])}}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var p=Object(s.a)(r.a({},u,t)),f=e.indexOf("#");return f>=0?""+e.substr(0,f)+p+e.substr(f):""+e+p}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return u});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function u(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],i=t(s);i!==s&&(n===e&&(n=e.slice()),n[r]=i)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],i=t[1];return a[n?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"k",function(){return p}),n.d(t,"c",function(){return f}),n.d(t,"g",function(){return h}),n.d(t,"h",function(){return m}),n.d(t,"m",function(){return g}),n.d(t,"j",function(){return v}),n.d(t,"d",function(){return b}),n.d(t,"l",function(){return k}),n.d(t,"b",function(){return y}),n.d(t,"f",function(){return w}),n.d(t,"a",function(){return T}),n.d(t,"i",function(){return S}),n.d(t,"e",function(){return D});var r=n(1),a=n(6),s=n.n(a),i=n(5),o=n(37),u=n.n(o),c=n(12),l=n.n(c),d=n(3);function p(e,t,n,a,s){var o,c,l={},d=t.id,p=function(o){var u,c,p,f,h,m,g=a[o],v=e[o]||[],b=t[o];if(!b)return"continue";var k=b.map(function(e,t){return{doc:e,idx:t}}),y=k.filter(function(e){return!v.some(function(t){return t.id===e.doc.id})});try{for(var E=r.h(y),w=E.next();!w.done;w=E.next()){var T=w.value,S=(P=r.a({},T.doc)).$meta;delete P.$meta,"add"===S?(P.id||(P.id=Object(i.h)()),s.add(g,P)):"update"===S&&s.put(g,P),s.link(n,d,g,P.id,o),l[o]||(l[o]={}),l[o][T.idx]={$set:P}}}catch(e){u={error:e}}finally{try{w&&!w.done&&(c=E.return)&&c.call(E)}finally{if(u)throw u.error}}var D=v.filter(function(e){return!b.some(function(t){return t.id===e.id})});try{for(var C=r.h(D),O=C.next();!O.done;O=C.next()){var N=O.value;s.unlink(n,d,g,N.id,o)}}catch(e){p={error:e}}finally{try{O&&!O.done&&(f=C.return)&&f.call(C)}finally{if(p)throw p.error}}var I=k.filter(function(e){return v.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var x=r.h(I),R=x.next();!R.done;R=x.next()){var P,L=R.value;delete(P=r.a({},L.doc)).$meta,s.put(g,P),l[o]||(l[o]={}),l[o][L.idx]={$set:P}}}catch(e){h={error:e}}finally{try{R&&!R.done&&(m=x.return)&&m.call(x)}finally{if(h)throw h.error}}};try{for(var f=r.h(Object.keys(a)),h=f.next();!h.done;h=f.next()){p(h.value)}}catch(e){o={error:e}}finally{try{h&&!h.done&&(c=f.return)&&c.call(f)}finally{if(o)throw o.error}}return u()(t,l)}function f(e){return s()(e).format("YYMMDD HH:mm")}function h(e){return s()(e).format("YYMMDD")}function m(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function g(e,t,n){return u()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function v(e,t,n){return u()(t,{createdDate:{$set:e},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function b(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function k(e,t){var n=Date.now();return(e=g(n,e,t)).createdBy||(e=v(n,e,t)),e}function y(e,t,n){var a,s,i=r.a({},e),o=t[e.id];o&&(i.$etag=o);try{for(var u=r.h(n),c=u.next();!c.done;c=u.next()){var l=c.value,d=e[l].map(function(e){return y(e,t,[])});i[l]=d}}catch(e){a={error:e}}finally{try{c&&!c.done&&(s=u.return)&&s.call(u)}finally{if(a)throw a.error}}return i}function E(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return E(0,function(t){return t.readAsText(e)})}function T(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function S(e){var t=l()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function D(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,u,c;return r.d(this,function(l){switch(l.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,s=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),s&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return i=r.f.apply(void 0,[l.sent(),3]),o=i[0],u=i[1],c=i[2],o.tasks=u,o.abilities&&o.abilitiesOrder&&(o.abilities=o.abilitiesOrder.map(function(e){return o.abilities.find(function(t){return t.id===e})})),o.knowledgeRequirements&&o.knowledgeRequirementsOrder&&(o.knowledgeRequirements=o.knowledgeRequirementsOrder.map(function(e){return o.knowledgeRequirements.find(function(t){return t.id===e})})),o.centralContent&&o.centralContentOrder&&(o.centralContent=o.centralContentOrder.map(function(e){return o.centralContent.find(function(t){return t.id===e})})),a&&(o.templateChain=c),[2,o]}})})}},function(e,t,n){"use strict";var r=n(4),a=n(15),s=n(29),i=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,i){return r.b(this,void 0,void 0,function(){var o,u,c,l,d,p,f,h,m,g,v;return r.d(this,function(b){switch(b.label){case 0:return i&&"no-cache"===i.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),c=(u=this).authHeader,l=u.tokenInfo,d=u.bearerProvider,c||l||!d?[3,2]:(p=this,[4,d.getBearer()]);case 1:p.tokenInfo=l=b.sent(),b.label=2;case 2:return l?l.expires<Date.now()?(console.log("Token expired. Refresh it:"),f=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:f.tokenInfo=l=b.sent(),b.label=4;case 4:c="Bearer "+l.token,b.label=5;case 5:return c&&(n.Authorization=c),h=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 6:return 401==(m=b.sent()).status&&this.bearerProvider?(g=m.headers.get("www-authenticate"),console.log("Got "+m.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(v=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return v.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 8:m=b.sent(),b.label=9;case 9:return[2,m]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,s,o,u){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=u,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),u=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var l=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return p}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return u}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return i}),n.d(t,"c",function(){return l});var d=function(){function e(e,t,n){this.http=new i(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=u.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([u.sent()])));case 3:return[4,s.json()];case 4:return[2,u.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new p,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=l.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(l,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),p=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(18),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=n(15);function o(e){e.resources||(e.resources=[])}function u(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var l=JSON.parse(c),d=l.time,p=l.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=p)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return u(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return u(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var f=new s,h=Date.now(),m=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,f.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-h>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[r.sent()]),f.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},v=function(e){function t(t,n,r){var a="string"!=typeof n?n:new m(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return f}),n.d(t,"b",function(){return m}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return v})},,function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.className,s=t.children,i=t.headerClassName,o=t.contentClassName,u=this.state.headerOpen;return a.createElement("div",{className:(r||"")+" openClose"+(u?" open":"")},a.createElement("div",{className:"openHeader"+(i?" "+i:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},n),a.createElement("div",{className:"openContent"+(o?" "+o:"")},s))},t}(a.Component)},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return u}),n.d(t,"a",function(){return c});var r=n(1),a=n(6),s=n.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e){return e.month()>=6?[s()(new Date(e.year(),7,1)),s()(new Date(e.year(),11,31))]:[s()(new Date(e.year(),0,1)),s()(new Date(e.year(),6,31))]}function u(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(32),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(52),s=n(3),i=n(6),o=n.n(i),u=n(67),c=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(u.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(o()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return o()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),l=n(5),d=n(47);n.d(t,"b",function(){return p}),n.d(t,"a",function(){return f});var p=s.a.userTasksRepo,f=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,i,u;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,c.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,i=o()(s).week(),[2,{from:(u=Object(d.a)(o()(s).year(),i)).notBefore,to:u.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,u,c,l;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,i=a(),u=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},u,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:o()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:o()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return c=r.sent(),0===(l=c.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&l.push(e),[4,this.update(l,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e){return r.b(this,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return(t=this.persistedState)?[3,2]:[4,c.load(this.options.user)];case 1:t=r.sent(),r.label=2;case 2:return(n=new c(t)).weekDate=o()(e).startOf("week").valueOf(),n.save(),this.persistedState=n,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(l.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new l.b("email",t.getCurrentUser().mail,"S"),new l.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);p||(p=s.a.userTasksRepo=new f(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(30).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(41),i=n(34),o=n(46),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,i){r=!0,e=a,t=s,s&&n?n(null,s,i):n&&n(a,null,i)});if(r){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,u=s.observer;return i.push(a),n=u,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],i={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,i,o){if(a=o,r&&(r.unsubscribe(),r=null),i)t(null,i,s);else try{var u=e(n);u&&"function"==typeof u.subscribe?r=u.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(u,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);u.prototype.map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(41),i=n(30),o=n(29),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);u.prototype._map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,u=e.title;return s.createElement("div",{title:u||Object(i.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},,,function(e,t,n){"use strict";n(31),n(30);var r=n(34);n.d(t,"a",function(){return r.a});var a=n(29);n.d(t,"b",function(){return a.a});var s=n(46);n.d(t,"c",function(){return s.a})},function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(6),i=n.n(s),o=n(25);var u=function(){function e(e){var t="academicYear"in e?e:Object(o.c)(i()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(o.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(o.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),c=n(2),l=n(50),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return f}),n.d(t,"a",function(){return h});var p,f=function(){function e(t,n,s,i){var o=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=i;var u=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){u(e)&&(o[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),i={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))u(o);function u(t){Object.keys(t).forEach(function(o){!s.hasOwnProperty(o)&&n(o)&&(s[o]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var u=JSON.stringify(r.g([o],n)),c=i[u];if(void 0!==c){if(c.promise)throw c.promise;if(c.error)throw c.error;if(c.timeout>Date.now())return c.value}try{var l=t[o].apply(e,n).then(function(e){i[u]={timeout:Date.now()+a,value:e}}).catch(function(e){i[u]={timeout:Date.now()+a,error:e}});throw i[u]={timeout:Date.now()+a,promise:l},l}catch(e){if(e.then)throw e;i[u]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:u})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw o=u.sent(),console.error("Error from EDS: "+o),new Error(Object(c.a)(p||(p=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,u,c,d,p,f,h,m,g;return r.d(this,function(r){switch(e){case"en_sin":return[2,l.SouthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,l.NorthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=t.getMonth()>=6,s=a?t.getFullYear():t.getFullYear()-1,o=a?t.getFullYear()+1:t.getFullYear(),u=i()(s.toString(),"YYYY"),c=i()(o.toString(),"YYYY"),1!=u.week()&&(u=u.clone().add(1,"week")),1!=c.week()&&(c=c.clone().add(1,"week")),d=i()(u.clone()).week(32).startOf("week"),p=i()(u.clone()).week(51).endOf("week"),f=i()(c.clone()),h=i()(c.clone()).week(25).endOf("week"),m={startDate:new Date(s,d.month(),d.date()).toDateString(),endDate:new Date(s,p.month(),p.date()).toDateString()},g={startDate:new Date(o,f.month(),f.date()).toDateString(),endDate:new Date(o,h.month(),h.date()).toDateString()},[2,{firstTerm:m,secondTerm:g,holidays:n}]}return[2]})})},e}(),h=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new u(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new u({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(32),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return i});var r=n(6),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function i(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},,,function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(69),s=n(5),i=function(){function e(e){var t=this,n=e.table,s=e.getClient,i=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,u,c,l=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,i=n.table,o=a(),u=e.map(function(e){var n=l.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(u.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.do(function(e){return u.forEach(function(t){return e.put(i,t)})}).catch(function(n){return"http409"===n.name?o.list(i,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return o.do(function(e){return n.forEach(function(t){return e.put(i,t)})})}):Promise.resolve(s&&l.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return c=r.sent(),this.regenerateCacheBust(),u.forEach(function(e){e.$etag=c.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(u)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,u,c,l,d,p,f,h,m,g,v,b,k,y=this;return r.d(this,function(E){switch(E.label){case 0:return a=this.options,i=a.getClient,o=a.optimistic,u=a.table,c=a.getQueryOptions,l=i(),[4,c()];case 1:return d=E.sent(),p=[].concat(d.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),f=this.stripGraphs(e,p),o?[4,this.mem.insert(f.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:E.sent(),E.label=3;case 3:h=new s.a,m=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){h.link2(u,e.id,t,n.id)})};try{for(var s=r.h(p),i=s.next();!i.done;i=s.next()){a(i.value)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}h.add(u,e)};try{for(g=r.h(f),v=g.next();!v.done;v=g.next())b=v.value,m(b)}catch(e){t={error:e}}finally{try{v&&!v.done&&(n=g.return)&&n.call(g)}finally{if(t)throw t.error}}return[4,l.batch(h.mutationRequests).catch(function(t){return o&&y.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return k=E.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=k.newEtags[e.id]}),o?[4,this.mem.update(e)]:[3,6];case 5:return E.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:E.sent(),E.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o=this;return r.d(this,function(u){switch(u.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,i=n(),a?[4,this.mem.update(e.map(function(e){return o.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:u.sent(),u.label=2;case 2:return[4,i.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(o,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return u.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return u.sent(),[2]}})})},e}()},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(23),i=n(14),o=n(73);function u(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var c=n(6),l=n.n(c),d=n(70),p=n(7),f=n(9),h=n(19),m=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,i=!!this.props.openCourses[n],c=(new d.a,this.context.intl);return a.createElement(s.a,{title:a.createElement("h5",null,n||a.createElement(f.a,{id:"userTasks.goals",defaultMessage:"Egna lärandemål"})),headerOpen:i,className:n&&Object(o.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)}},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"}," ",a.createElement("a",{className:"trash",href:"#",title:c.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lärandemålet och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=u(t),s=l()(t.deadline).startOf("day")<l()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:g(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:v(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:l()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(f.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmål"}))),a.createElement("br",null))}))},t.contextType=h.a,t}(a.Component);function g(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(i.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function v(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(i.f)(p.b.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var b=n(5),k=n(2);var y=n(64),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(f.a,{id:"weekplanner.addLearningGoalTitle",defaultMessage:"Lägg till eget lärandemål"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(f.a,{id:"weekplanner.addLearningGoal",defaultMessage:"Mål"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(f.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),w=n(26),T=n(45),S=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=this.props,o=(i.isTask,i.onSave),u=this.context.intl;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(f.a,{id:"customTask.addWorkGoalTitle",defaultMessage:"Lägg till eget arbetsmål"})),a.createElement("hr",null),a.createElement(w.a,{label:u.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:u.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{rows:7,label:u.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:u.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:u.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return o(n,r,s)}},a.createElement(f.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=h.a,t}(a.Component),D=n(88),C=(n(67),n(32)),O=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,i=s.name,o=s.description,u=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:i,description:o,url:u}):r.a({},t)}))});else{var c={id:Object(b.h)(),name:i,description:o,url:u};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(c)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(f.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(f.a,{id:"addeditsubtask.addSubtask",defaultMessage:"Lägg till underuppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(f.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(f.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=h.a,t}(a.Component),N=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(O,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(O,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=t.deadline,o=t.subTasks,c=t.showCalendar,d=t.userTask,p=d.id,h=(d.courseName,this.props),m=h.onUpdate,g=h.onDelete,v=this.isModified(),b="customTask"===u(d),k=l()(d.deadline)<l()(),y=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,b?a.createElement(f.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmål"}):a.createElement(f.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:b?y.formatMessage({id:"task.targetNameLabel",defaultMessage:"Arbetsmålets namn"}):y.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:b?y.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du göra?"}):y.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),b&&a.createElement(a.Fragment,null,a.createElement(T.a,{rows:5,label:y.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:y.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:y.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(C.a,{label:y.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},i||c?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(D.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",selected:i&&l()(i),autoFocus:c,dateFormat:"YYYY-MM-DD",className:k?"expired":void 0,locale:y.locale,popperPlacement:b?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&t.format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:y.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(f.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(C.a,{label:y.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},o&&o.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(f.a,{id:"task.addSubtask",defaultMessage:"Lägg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){v?m(function(e){e.name=n,e.description=r,e.url=s,e.deadline=i}):e.props.closeDialog()}},a.createElement(f.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(f.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){g(p)}},b?a.createElement(f.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmål"}):a.createElement(f.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den här uppgiften"})))))},t.contextType=h.a,t}(a.Component),I=n(13),x=n(74),R=n(47);n.d(t,"a",function(){return P});var P=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new x.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){this.props.env.userTasksRepo.changeWeek(l()(this.state.weekDate).add(-1,"week").toDate())},t.prototype.nextWeek=function(){this.props.env.userTasksRepo.changeWeek(l()(this.state.weekDate).add(1,"week").toDate())},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(E,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"Lärandemålet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(S,{isTask:!e,onSave:function(a,s,i){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,i)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(N,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet får inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(O,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var i;return r.d(this,function(r){switch(r.label){case 0:return i=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),dateTime:i+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,u;return r.d(this,function(c){switch(c.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:c.sent(),c.label=2;case 2:return c.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=Object(R.b)(l()(n).add(-1,"week")),s=Object(R.a)(l()(n).year(),a),[4,this.props.env.kedBackendClient.list("usertasks",{from:s.notBefore,to:s.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return i=(i=c.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),o=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),u=i.sort(Object(k.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:o+=1e3});return t.id=Object(b.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(u)];case 4:return c.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.render=function(){var e=this,t=l()(this.state.weekDate).week(),n=l()().week(),i=function(e){var t,n,a,s,i=[],o=Object(k.b)(e,function(e){return e.courseName||""});try{for(var u=r.h(Object.keys(o).sort().filter(function(e){return e}).concat(o[""]?[""]:[])),c=u.next();!c.done;c=u.next()){var l=c.value,d=o[l]||o[""],p=Object(k.b)(d,function(e){return e.learningGoal}),f=[];try{for(var h=r.h(Object.keys(p)),m=h.next();!m.done;m=h.next()){var g=m.value,v=p[g].sort(Object(k.g)("dateTime")),b=v.filter(function(e){return null==e.name})[0],y=b&&b.url;f.push({name:g,allTasks:v,url:y,step:v.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:v.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{m&&!m.done&&(s=h.return)&&s.call(h)}finally{if(a)throw a.error}}i.push({courseName:l,learningGoals:f})}}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return i}(this.state.userTasks),o=this.state,u=o.dialogs,c=o.weekTextsUT,d=o.strategy,p=o.assessment,h=o.isLoading,g=o.isCopyingTasks,v=c&&("adding"===c.$meta||"updating"===c.$meta),b=!!c&&d!==c.weekTexts.strategy,E=!!c&&p!==c.weekTexts.assessment,w=!v&&(b||E);return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===n?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!v&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(f.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))))),a.createElement("h4",null,a.createElement(f.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"})),i.length>0&&a.createElement("hr",null),i.map(function(t){return a.createElement(m,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)}}))}),a.createElement("hr",null),h?a.createElement(I.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),a.createElement(f.a,{id:"weekplanner.learningGoal",defaultMessage:"Eget lärandemål"})),a.createElement("div",{className:"btn",style:g?{opacity:.5}:void 0,onClick:function(t){return!g&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(f.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara från föregående vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(f.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & Utvärdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(f.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(f.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska göra för att lära mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:d&&d.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(f.a,{id:"weekplanner.evaluation",defaultMessage:"Utvärdering"})),a.createElement("p",null,a.createElement(f.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:p&&p.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:w?{}:{opacity:.5},onClick:function(){return!v&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),w?a.createElement(f.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(f.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(y.a,{dialogs:u,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=h.a,t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return m});var r=n(1),a=n(9),s=n(86),i=n.n(s),o=n(87),u=n.n(o),c=n(57),l=n(58),d=n(0),p=n(7),f=n(6),h=n.n(f),m=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(i.a,u.a)),n.messages={sv:c,en:l},h()().locale(p.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:p.b.KED_LOCALE,messages:this.messages[p.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},function(e){e.exports={"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"Lägg till eget arbetsmål","customTask.enterNamePlhd":"Ange namn...","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"VT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"HT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.goals":"Egna lärandemål","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"Mål:","weekplanner.addLearningGoalTitle":"Lägg till eget lärandemål","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoal":"Eget lärandemål","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi &amp; Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy &amp; Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(6),o=n.n(i),u=n(5),c=n(27),l=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}n.d(t,"a",function(){return v});var p,f,h,m,g,v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){c.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){c.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),i={id:Object(u.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new u.b("email",s.a.currentUser.mail,"S"),new u.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(i.deadline=e.task.deadline),e.task?(i.task=[e.task],e.course?i.course=[e.course]:e.courseInfo&&(i.courseInfo=e.courseInfo)):i.siteVisionPageId=e.id,e.step&&(i.step=e.step),[4,Promise.all([c.b.setWeekPlannerBoxOpen(e.courseName,!0),c.b.insert([i])])]);case 1:return r.sent(),[3,4];case 2:return[4,c.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props.learningTasks,n=Object(l.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),s=this.state.confirmations,i=o()(this.state.weekDate).week(),u=o()().week(),c=i===u?"":i===u+1?Object(l.a)(p||(p=r.e(["för nästa vecka (v",")"],["för nästa vecka (v",")"])),i):i===u-1?Object(l.a)(f||(f=r.e(["för förra veckan (v",")"],["för förra veckan (v",")"])),i):Object(l.a)(h||(h=r.e(["för vecka ",""],["för vecka ",""])),i);return a.createElement("div",{className:"taskContainer"},t.map(function(t,o){var p=t.id,f=n[p]||{$meta:"deleted"},h="adding"===f.$meta||"deleting"===f.$meta,v="deleted"!==f.$meta&&"deleting"!==f.$meta,b=v?Object(l.a)(m||(m=r.e(["Ta bort uppgiften från egen veckoplanering ",""],["Ta bort uppgiften från egen veckoplanering ",""])),c):Object(l.a)(g||(g=r.e(["Lägg till uppgiften i egen veckoplanering ",""],["Lägg till uppgiften i egen veckoplanering ",""])),c),k=s.some(function(e){return p===e});return a.createElement("div",{key:t.id},a.createElement("div",{key:p,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"selectedBox"+(v?" selected":""),style:h?{opacity:.5}:{},onClick:function(){return h||i!==u?k?e.setState({confirmations:s.filter(function(e){return e!==p})}):e.setState({confirmations:r.g(s).concat(p)}):e.toggleTask(t)},title:b})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:t.url},t.name))),a.createElement(d,{visible:k,text:b,onConfirm:function(){e.toggleTask(t),e.setState({confirmations:s.filter(function(e){return e!==p})})},onCancel:function(){e.setState({confirmations:s.filter(function(e){return e!==p})})}}))}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r=n(1),a=n(52),s=n(3),i=n(2),o=n(5),u=n(42),c=n(25),l=n(6),d=n.n(l),p=s.a.hiddenCoursesRepo,f=function(){function e(){var e=this;this.result=null,this.subscribers=[],this.fullCourse=!1,this.notifySubscriber=function(t,n){try{t(n.fullCourse?e.result:e.result.filter(function(e){return e.visible}))}catch(e){console.error(e)}},this.kedRepo=new a.a({getClient:function(){return s.a.kedBackendClient},optimistic:!0,table:"userhiddencourses",user:s.a.currentUser?s.a.currentUser.mail:"",getQueryOptions:function(){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}});var t=this.init();Promise.all([t,this.kedCoursesPromise,this.edsCoursesPromise]).catch(function(e){return Object(i.n)(e)})}return e.prototype.init=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a=this;return r.d(this,function(i){switch(i.label){case 0:return e=s.a.bearerProvider?s.a.bearerProvider.getBearer():Promise.resolve({}),this.kedCoursesPromise=e.then(function(){return a.listKedCourses()}),this.edsCoursesPromise=e.then(function(){return a.listEDSCourses()}),n=!1,this.userHiddenCoursesPromise=new Promise(function(e){return t=function(t){n?a.userHiddenCoursesPromise=Promise.resolve(t):(n=!0,e(t))}}),[4,e];case 1:return i.sent(),this.kedRepo.mem.subscribe(function(e){return r.b(a,void 0,void 0,function(){var n,a,s,i,o=this;return r.d(this,function(u){switch(u.label){case 0:return[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise])];case 1:return n=r.f.apply(void 0,[u.sent(),2]),a=n[0],s=n[1],i=this,[4,this.createCoursesList(s,e,a)];case 2:return i.result=u.sent(),this.subscribers.forEach(function(e){return o.notifySubscriber(e.subscriber,e.options)}),t(e),[2]}})})}),[2]}})})},e.prototype.listKedCourses=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:return e=this.fullCourse,console.log("FullCourse: "+e),[4,s.a.kedBackendClient.list("schools",{role:"USER",name:s.a.currentUser.school,include:"activeCourses",flags:e?[]:["includeIdsAndNamesOnly"],cacheBust:s.a.currentUser.username})];case 1:return t=n.sent(),[2,Object(i.k)(t.map(function(e){return e.activeCourses})).sort(Object(i.g)("name"))]}})})},e.prototype.listEDSCourses=function(){var e=new u.a(Object(c.c)(d()())).period;return-1===s.a.currentUser.roles.indexOf("EMPLOYEE")?s.a.edsClient.getActiveCourses({periodName:e}):null},e.prototype.createCoursesList=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,o,u,c,l=this;return r.d(this,function(d){switch(d.label){case 0:return a=Object(i.c)(t.filter(function(e){return!e.show}),function(e){return e.name}),o=Object(i.c)(t.filter(function(e){return e.show}),function(e){return e.name}),u=s.a.currentUser.roles.some(function(e){return"STUDENT"===e}),c=e?Object(i.c)(e,function(e){return e.name}):{},[4,Promise.all(n.map(function(e){var t=e.id,n=e.name,s=e.description,i=e.modifiedBy;return r.b(l,void 0,void 0,function(){var e,l,d;return r.d(this,function(r){return e=c[n],d=(l=!u||null!=e)?!a[t]:!!o[t],i&&i.name&&!s&&(s=i.name+"s version"),[2,{id:t,name:n,description:s,visible:d,defaultVisible:l}]})})}))];case 1:return[2,d.sent().sort(function(e,t){var n=e.name,r=t.name;return n<r?-1:n>r?1:0})]}})})},e.prototype.hideCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.insert([{id:Object(o.h)(),name:e.id}])]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.delete(t.map(function(e){return e.id}))];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.showCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.delete(t.map(function(e){return e.id}))]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.insert([{id:Object(o.h)(),name:e.id,show:!0}])];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.subscribe=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return this.fullCourse||!t.fullCourse?[3,3]:(this.fullCourse=t.fullCourse,this.kedCoursesPromise=this.listKedCourses(),[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise,this.userHiddenCoursesPromise])]);case 1:return n=r.f.apply(void 0,[u.sent(),3]),a=n[0],s=n[1],i=n[2],o=this,[4,this.createCoursesList(s,i,a)];case 2:o.result=u.sent(),u.label=3;case 3:return[4,this.userHiddenCoursesPromise];case 4:return u.sent(),this.notifySubscriber(e,t),this.subscribers.push({subscriber:e,options:t}),[2]}})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t.subscriber!==e})},e}();p||(p=s.a.hiddenCoursesRepo=new f)},,,function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),s=n(35),i=n(39),o=n(12),u=n.n(o),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&u()(Object(i.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return u()("body").attr("aria-disabled",n.length>0),u()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,o){var c;return a.createElement("div",{key:o},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){c=t,o===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":o<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||u()(Object(i.findDOMNode)(c)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(i.findDOMNode)(c);e.preventDefault(),u()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(3),a=n(14);function s(e){return e?Object(a.e)(r.a.currentUser,e)||r.a.currentUser.roles.includes("ADMIN"):r.a.currentUser.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e})}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(6),a=n.n(r),s=n(7);"sv"===s.b.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var i=function(){return a.a.apply(this,arguments).locale(s.b.KED_LOCALE)}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(10),i=n(35),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>1&&(n=n.slice(1)),{infos:[e]})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),s.c.writer.onError(this._dbWriterError),s.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),s.c.writer.off(this._dbWriterError),s.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,s=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!s}).map(function(t){var n=t.message,r=t.details,s=t.retryable,o=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(i.a,{onClick:function(){return e.removeError(n)}})),r||s?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},o?"Dölj detailer":"Visa detailjer")," "):void 0,o?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),s?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){s.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";var r=n(16),a=n(3),s=function(){return function(){a.a.currentUser,(Object(r.b)(location.search,{toLower:!0}).features||"").split(",").map(function(e){return e.toLowerCase()})}}();n.d(t,"a",function(){return s})},,,function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(3),s=function(){function e(e){this.googleTokenProvider=a.a.googleTokenProvider,this.options=e||{upload:!1,multiple:!1}}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:n.sent(),n.label=2;case 2:return e="421572262269-u68v5lf5o8ss5t68l8gkq3pfarh6dbkv.apps.googleusercontent.com",[4,new Promise(function(n,r){gapi.load("client:auth2",function(){return gapi.auth2.authorize({client_id:e,scope:"https://www.googleapis.com/auth/drive",response_type:"id_token permission",prompt:"none"},function(a){if(a.error)return gapi.auth2.authorize({client_id:e,scope:"https://www.googleapis.com/auth/drive",response_type:"id_token permission",prompt:"consent"},function(e){e.error?r("Picker: No access token"):(t.authToken=e.access_token,n())});t.authToken=a.access_token,n()})})})];case 3:return n.sent(),"undefined"!=typeof google&&void 0!==google.picker?[3,5]:[4,new Promise(function(e){gapi.load("picker",function(){e()})})];case 4:n.sent(),n.label=5;case 5:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e.prototype.show=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,new Promise(function(t,n){var r=(new google.picker.PickerBuilder).addView((new google.picker.DocsView).setOwnedByMe(!0).setIncludeFolders(!0)).setLocale("sv").setSize(1051,650).setOAuthToken(e.authToken).setCallback(function(r){if(r.action==google.picker.Action.CANCEL)n();else if(r.action==google.picker.Action.PICKED){var a=[];r.docs.forEach(function(t){var n=t.id,r=t.mimeType,s=t.name,i=t.modifiedTime,o=t.iconUrl,u=t.url,c=r.includes("google-apps");a.push({fileId:n,mimeType:r,name:s,modifiedTime:i,canExport:c,iconUrl:o,url:u}),e.updatePermissions(n)}),console.log(a),t(a)}});e.options.upload&&r.addView((new google.picker.DocsUploadView).setIncludeFolders(!0)),e.options.multiple&&r.enableFeature(google.picker.Feature.MULTISELECT_ENABLED),e.picker=r.build(),e.picker.setVisible(!0)})]}})})},e.prototype.updatePermissions=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return t.sent(),gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"reader",type:"domain",domain:"kunskapsskolan.se"}),[2]}})})},e.prototype.downloadFile=function(e){var t=e.file,n=e.limitSize;return r.b(this,void 0,void 0,function(){var e,a=this;return r.d(this,function(r){switch(r.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return r.sent(),t.canExport?[2,new Promise(function(e,n){gapi.client.drive.files.export({fileId:t.fileId,mimeType:"application/pdf"}).then(function(n){for(var r=n.body.length,a=new Uint8Array(new ArrayBuffer(r)),s=0;s<r;s++)a[s]=n.body.charCodeAt(s);var i=new Blob([a],{type:"application/pdf"}),o=t.name+".pdf";e(new File([i],o,{type:"application/pdf",lastModified:t.modifiedTime}))})})]:(e=function(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET","https://www.googleapis.com/drive/v3/files/"+e.fileId+"?alt=media",!0),r.setRequestHeader("Authorization","Bearer "+a.authToken),r.responseType="blob",r.onload=function(){t(new File([r.response],e.name,{type:e.mimeType,lastModified:e.modifiedTime}))},r.send()})},[2,new Promise(function(r,a){void 0!==n?gapi.client.drive.files.get({fileId:t.fileId,fields:"size"}).then(function(e){Number(e.result.size)>1024*n*1024&&a("GooglePickerError: Filsize is too laarge")}).then(function(){e(t).then(function(e){r(e)})}):e(t).then(function(e){r(e)})})])}})})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n.n(r),s=function(e){var t=e.size,n=void 0===t?30:t;return a.a.createElement("svg",{width:n,version:"1.1",xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 508.52 508.52",fill:"#ffffff",style:{verticalAlign:"middle",marginRight:"4px"}},a.a.createElement("polygon",{points:"484.492,284.58 339.024,32.577 169.496,32.577 314.996,284.58"}),a.a.createElement("polygon",{points:"145.437,74.276 0,326.279 84.764,473.05 230.169,221.143"}),a.a.createElement("polygon",{points:"234.396,316.363 143.371,475.943 423.756,475.943 508.52,316.36"}))},i=function(e){var t=e.label,n=void 0===t?"Google Drive":t,r=e.action;return a.a.createElement("a",{className:"btn",onClick:r},a.a.createElement(s,{size:16})," ",n)}},,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(7);r.b.ENVIRONMENT="test",r.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",r.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",r.b.KED_TOKEN_URL="",r.b.KED_CLIENT_ID="",r.b.KED_CLIENT_SECRET="",r.b.KED_REALM="SE1",r.b.KED_LOCALE=r.b.KED_LOCALE||"sv",r.b.KED_SCHOOL_LOCALE=r.b.KED_SCHOOL_LOCALE||"sv";var a=n(1),s=n(16),i=n(20),o=n(5),u=n(3),c=n(14),l=n(2);function d(e,t,n){var r=Object(s.b)(t),i=Object(l.e)(r,c.a),o=a.f(Object(s.c)(e),2),u=o[0],d=o[1],p=Object(s.b)(d);return u+Object(s.a)(a.a({},p,i,{scopes:n.join(",")}))}function p(e,t){return e+"/"+t}function f(e,t,n){return new o.e(i.c,i.d,e+t.mail+location.search,r.b.KED_CLIENT_ID,r.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var h,m,g=u.a.currentUser&&u.a.currentUser.mail;if(g)if(r.b.KED_TOKEN_PATH){var v=d(r.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);u.a.bearerProvider=(m=p(h=v,g),new i.b(h,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){u.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,m),{token:t.token,expires:Date.now()+354e4}},m)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(u.a.currentUser=JSON.parse(t))}(p(v,g));var b=d(r.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);u.a.googleTokenProvider=function(e,t){var n=p(e,t);return new i.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,g)}else{if(!(r.b.KED_TOKEN_URL&&r.b.KED_CLIENT_ID&&r.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");u.a.bearerProvider=f(r.b.KED_TOKEN_URL,u.a.currentUser,["kedbackend","EDS"]),u.a.googleTokenProvider=f(r.b.KED_TOKEN_URL+"/google",u.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}u.a.kedBackendClient=new i.a(r.b.KED_API_URL,u.a.bearerProvider);var k=n(42);u.a.edsClient=new k.b(i.c,r.b.EDS_API_URL,u.a.bearerProvider,function(){return u.a.currentUser.mail})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.abilities,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.centralContent,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(23),i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.title,n=e.requirements,r=e.className,i=e.includedIds,o=e.headerOpen,u=e.explainedRequirements,c=["E","C","A"],l=[],d=n.slice(),p=null;!(p=c.map(function(e){var t=d.findIndex(function(t){return t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=d[t];return d.splice(t,1),i?i[n.id]?n:void 0:n})).every(function(e){return null===e});)p.every(function(e){return!e})||l.push(p);return a.createElement(s.a,{title:a.createElement("p",null,t),className:r,headerOpen:o},a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,c.map(function(e){return a.createElement("th",{key:e},e)}))),a.createElement("tbody",null,l.map(function(e,t){return a.createElement(a.Fragment,{key:t},a.createElement("tr",{key:t},e.map(function(e,t){return a.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:e?e.name:""}})})),u&&a.createElement("tr",null,e.map(function(e,t){return a.createElement("td",{key:t,className:"explained-requirement"},a.createElement("div",null,e&&u[e.id]||""))})))}))))},t}(a.Component)},,,,,,,,,,,,,,,,,,,function(e,t){},function(e,t,n){"use strict";n.d(t,"a",function(){return f});var r,a,s=n(1),i=n(0),o=n(7),u=n(2),c=n(13),l=n(16),d=n(14),p=n(61),f=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,courses:[],headerOpen:!1},n.updateHiddenCourses=n.updateHiddenCourses.bind(n),n}return s.c(t,e),t.prototype.componentWillMount=function(){p.a.subscribe(this.updateHiddenCourses,{fullCourse:!0})},t.prototype.componentWillUnmount=function(){p.a.unsubscribe(this.updateHiddenCourses)},t.prototype.updateHiddenCourses=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.hideCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(r||(r=s.e(["Sparar..."],["Sparar..."])))),[4,p.a.hideCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.showCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(a||(a=s.e(["Sparar..."],["Sparar..."])))),[4,p.a.showCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.render=function(){var e=this;if(this.state.isLoading)return i.createElement(c.a,null);var t=this.state.courses,n=t.filter(function(e){return e.visible}),r=t.filter(function(e){return!e.visible}),a=Object(l.b)(location.search),u=o.b.KED_COURSE_VIEWER_URL;return i.createElement("div",{className:"ked_boxed"},i.createElement("h3",null,"Skolans kurser"),i.createElement("div",{className:"taskContainer odd-even"},n.map(function(t){return i.createElement("div",{className:"studentCourse",key:t.id},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top pull-right"},i.createElement("a",{className:"hideItem",onClick:function(){return e.hideCourse(t)}})),i.createElement("div",{className:"horizontalItem top"},i.createElement("a",{href:Object(d.f)(u,{courseId:t.id})},t.name))),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",{className:"small"},t.description)))})),i.createElement("div",{className:"openClose"+(this.state.headerOpen?" open":"")},i.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},i.createElement("h5",null,"Dolda kurser")),i.createElement("div",{className:"openContent"},i.createElement("div",{className:"taskContainer odd-even"},r.map(function(t){return i.createElement("div",{className:"studentCourse",key:t.id},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top pull-right"},i.createElement("a",{className:"showItem",onClick:function(){return e.showCourse(t)}})),i.createElement("a",{href:Object(l.a)(s.a({},a,{courseId:t.id}))},t.name)),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",{className:"small"},t.description)))})))))},t}(i.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(59),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.commonTasks,n=e.learningGoals;return a.createElement("div",null,n.map(function(e){return a.createElement("div",{key:e.name},a.createElement("h5",null,e.name),a.createElement(s.a,{learningTasks:e.learningTasks}))}),t.length>0&&a.createElement("div",null,n.length>0&&a.createElement("h5",null,"Övergripande"),a.createElement(s.a,{learningTasks:t})))},t}(a.Component)},,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(2),o=n(13),u=n(6),c=n.n(u),l=n(5),d=n(14),p=n(135),f=n.n(p);function h(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return"urkund-status urkund-status-error";case"Submitted":return"urkund-status urkund-status-submitted";case"Accepted":return"urkund-status urkund-status-accepted";case"Analyzed":return"urkund-status urkund-status-analyzed"}}function m(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return e.ExternalId?"Kunde inte tas emot av urkund. Felkod: "+e.Status.ErrorCode+"\nExternal ID: "+e.ExternalId+"\nFelmeddelande: "+e.Status.Message:e.Status.Message;case"Submitted":return"Filen är uppladdad till Urkund. Klicka för att uppdatera status.";case"Accepted":return"Filen analyseras fortfarande av Urkund. Klicka för att uppdatera status.";case"Analyzed":return"Rapport skapad. Klicka för att öppna rapporten i nytt fönster"}}function g(e){if(!e||!e.Status)return"";switch(e.Status.State){case"Error":return"urkund-significance-error";case"Submitted":return"urkund-significance-submitted";case"Accepted":return"urkund-significance-accepted"}var t=e.Report;return t?t.Significance<1?"urkund-significance urkund-significance-0":t.Significance<10?"urkund-significance urkund-significance-1":t.Significance<25?"urkund-significance urkund-significance-2":t.Significance<40?"urkund-significance urkund-significance-3":t.Significance<55?"urkund-significance urkund-significance-4":t.Significance<70?"urkund-significance urkund-significance-5":t.Significance<85?"urkund-significance urkund-significance-6":t.Significance<99.9?"urkund-significance urkund-significance-7":t.Significance>=99.9?"urkund-significance urkund-significance-8":"":""}var v=n(65),b=n(75),k=n(76);n.d(t,"a",function(){return w});var y=[".pdf",".odt",".docx",".doc",".cad",".wav",".mp3",".mpeg4",".mp4",".zip",".png",".jpg",".jpeg",".gif"],E=[".pdf",".odt",".docx",".doc"],w=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assignments:[],loading:!0},n}return r.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,t,r)})},t.prototype.componentDidMount=function(){this.load()},t.prototype.componentWillReceiveProps=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return n.trys.push([0,4,,5]),e.taskId===this.props.taskId&&e.courseId===this.props.courseId?[3,3]:[4,this.setStatePromised(function(){return{assignments:[],loading:!0}})];case 1:return n.sent(),[4,this.load()];case 2:n.sent(),n.label=3;case 3:return[3,5];case 4:return t=n.sent(),Object(i.n)(t),[3,5];case 5:return[2]}})})},t.prototype.update=function(e,t){return r.g([t],e.filter(function(e){var n=e.user,r=e.filename;return n!==t.user||r!==t.filename}))},t.prototype.refreshAssignment=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,u,c,d,p,f,h,m,g=this;return r.d(this,function(v){switch(v.label){case 0:return t=s.a.kedBackendClient.http,n=this.props,a=n.courseId,i=n.taskId,o=n.school,u=e.user,c=e.filename,[4,this.setState(function(t){var n=t.assignments;return{assignments:g.update(n,r.a({},e,{isRefreshing:!0}))}})];case 1:v.sent(),v.label=2;case 2:return v.trys.push([2,8,,10]),[4,t.get("assignments/urkund/"+o+"/"+a+"/"+i+"/"+u+"/"+c)];case 3:return(d=v.sent()).status>=400?(p=l.c.bind,f=[void 0,d.status],[4,d.text()]):[3,5];case 4:throw new(p.apply(l.c,f.concat([v.sent()])));case 5:return[4,d.text()];case 6:return h=v.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:g.update(n,r.a({},e,{isRefreshing:!1,metadata:r.a({},e.metadata,{urkundResponse:h})}))}})];case 7:return v.sent(),[3,10];case 8:return m=v.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:g.update(n,r.a({},e,{isRefreshing:!1,refreshError:m}))}})];case 9:return v.sent(),[3,10];case 10:return[2]}})})},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,i,o,u,p,f,h,m,g,v,b,k,y,E,w;return r.d(this,function(T){switch(T.label){case 0:return T.trys.push([0,13,,14]),n=s.a.kedBackendClient.http,a=this.props,i=a.courseId,o=a.taskId,u=a.school,[4,(p=Object(d.e)(s.a.currentUser,u))?n.get("assignments/"+u+"/"+i+"/"+o):n.get("assignments/"+u+"/"+i+"/"+o+"/"+s.a.currentUser.mail)];case 1:return 200===(f=T.sent()).status?[3,3]:(h=l.c.bind,m=[void 0,f.status],[4,f.text()]);case 2:throw new(h.apply(l.c,m.concat([T.sent()])));case 3:return[4,f.json()];case 4:if(g=T.sent(),this.setState({error:null,loading:!1,assignments:g}),!p)return[3,12];v=g.filter(function(e){return e.metadata&&!e.metadata.urkundUploadError&&(!e.metadata.urkundLastPoll||["Accepted","Submitted"].indexOf(JSON.parse(e.metadata.urkundResponse)[0].Status.State)>=0&&parseInt(e.metadata.urkundLastPoll)<c()().add(-15,"seconds").toDate().getTime())}),T.label=5;case 5:T.trys.push([5,10,11,12]),b=r.h(v),k=b.next(),T.label=6;case 6:return k.done?[3,9]:(y=k.value,[4,this.refreshAssignment(y)]);case 7:T.sent(),T.label=8;case 8:return k=b.next(),[3,6];case 9:return[3,12];case 10:return E=T.sent(),e={error:E},[3,12];case 11:try{k&&!k.done&&(t=b.return)&&t.call(b)}finally{if(e)throw e.error}return[7];case 12:return[3,14];case 13:return w=T.sent(),this.setState({loading:!1,error:"Kunde inte ladda inlämningsuppgifter",assignments:[]}),console.error(w),[3,14];case 14:return[2]}})})},t.prototype.onDrag=function(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"},t.prototype.verifyAndUpload=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return n.trys.push([0,3,,4]),e?this.state.assignments.some(function(t){return t.user===s.a.currentUser.mail&&t.filename===e.name})&&!confirm("Ersätta befintlig fil ("+e.name+")?")?[2]:this.props.school.toLowerCase()===s.a.currentUser.school.toLowerCase()||confirm("Uppgiften tillhör en annan skola ("+this.props.school+").\nVill du ändå lämna in ditt arbete här?")?(this.setState({uploadingFile:e}),[4,this.upload(e)]):[2]:[2];case 1:return n.sent(),[4,this.load()];case 2:return n.sent(),this.setState({uploadingFile:null}),[3,4];case 3:return t=n.sent(),this.setState({error:"Kunde inte ladda upp filen. "+(t.message||t),uploadingFile:null}),console.error(t),[3,4];case 4:return[2]}})})},t.prototype.upload=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,u,c,d,p,f;return r.d(this,function(r){switch(r.label){case 0:if(s.a.kedBackendClient.http,t=this.props,n=t.courseId,a=t.taskId,i=t.school,o=s.a.currentUser.mail,E.indexOf("."+e.name.split(".").reverse()[0].toLowerCase())>=0){if(e.size>52428800)throw new Error("Filer av denna typ får inte vara större än 50 MB")}else if(e.size>104857600)throw new Error("Filen får inte vara större än 100 MB");if(u=e.name.toLowerCase(),!y.some(function(e){return u.endsWith(e)}))throw new Error("Filens ändelse måste vara "+y.join(" / "));return(c=new FormData).append("files",e),[4,s.a.kedBackendClient.http.fetch("assignments/"+i+"/"+n+"/"+a+"/"+o,"put",{},{userDisplayName:s.a.currentUser.displayName},{body:c})];case 1:return 200===(d=r.sent()).status?[3,3]:(p=l.c.bind,f=[void 0,d.status],[4,d.text()]);case 2:throw new(p.apply(l.c,f.concat([r.sent()])));case 3:return[2]}})})},t.prototype.download=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),[4,s.a.kedBackendClient.http.fetch(e.mediaLink,"get",{})];case 1:return(t=r.sent()).status>=400?(n=l.c.bind,a=[void 0,t.status],[4,t.text()]):[3,3];case 2:throw new(n.apply(l.c,a.concat([r.sent()])));case 3:return[4,t.blob()];case 4:return i=r.sent(),f()(i,e.filename,e.contentType),[3,6];case 5:return o=r.sent(),this.setState({error:"Kunde inte ladda ned filen. "+(o.message||o)}),console.error(o),[3,6];case 6:return[2]}})})},t.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(o){switch(o.label){case 0:return o.trys.push([0,6,,7]),[4,this.setStatePromised(function(t){return{assignments:t.assignments.map(function(t){return t.mediaLink===e?r.a({},t,{metadata:r.a({},t.metadata,{$meta:"delete"})}):r.a({},t)})}})];case 1:return o.sent(),[4,s.a.kedBackendClient.http.fetch(e,"delete",{})];case 2:return(t=o.sent()).status>=400?(n=l.c.bind,a=[void 0,t.status],[4,t.text()]):[3,4];case 3:throw new(n.apply(l.c,a.concat([o.sent()])));case 4:return[4,this.load()];case 5:return o.sent(),[3,7];case 6:return i=o.sent(),this.setState({error:"Kunde inte ta bort filen. "+(i.message||i)}),console.error(i),[3,7];case 7:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.courseId,u=t.taskId,l=t.school,p=this.state,f=p.loading,y=p.assignments,E=p.error,w=p.uploadingFile,T=Object(d.e)(s.a.currentUser,l),S=r.g(y);if(w){var D={school:l,courseId:n,taskId:u,filename:w.name,size:w.size,user:s.a.currentUser.mail,contentType:w.type,uploadDate:Date.now(),mediaLink:"assignments/"+l+"/"+n+"/"+u+"/"+s.a.currentUser.mail+"/"+w.name,metadata:{$meta:"add",userDisplayName:s.a.currentUser.displayName}};S=S.filter(function(e){return e.mediaLink!==D.mediaLink}),S=r.g(S,[D])}var C=(S=S.sort(Object(i.h)(["metadata.userDisplayName","filename","uploadDate"],["sv","en"],{sensitivity:"base"}))).some(function(e){return e.user===s.a.currentUser.mail});return a.createElement("div",{onDragOver:function(t){return e.onDrag(t)},onDrop:function(t){t.stopPropagation(),t.preventDefault(),e.verifyAndUpload(t.dataTransfer.files[0])}},E?a.createElement(a.Fragment,null,a.createElement("p",{className:"error"},E)):void 0,f?a.createElement(a.Fragment,null,a.createElement(o.a,null)," Laddar inlämnade filer..."):0===S.length?T?a.createElement("p",null,"Ingen elev har lämnat in något arbete ännu."):void 0:a.createElement(a.Fragment,null,a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,T?a.createElement("th",null,"Elev"):void 0,a.createElement("th",null,"Filnamn"),a.createElement("th",null,"Inlämnat den"),T&&a.createElement(a.Fragment,null,a.createElement("th",null,"Rapport"),a.createElement("th",null,"Nivå")),C&&a.createElement("th",null))),a.createElement("tbody",null,S.map(function(t){return a.createElement("tr",{key:t.mediaLink,style:t.metadata.$meta?{opacity:.5}:{}},T?a.createElement(a.Fragment,null,a.createElement("td",null,a.createElement("a",{href:"mailto:"+t.user},t.metadata.userDisplayName||t.user)),a.createElement("td",null,a.createElement("a",{href:"#",onClick:function(n){n.preventDefault(),n.stopPropagation(),e.download(t)}},t.filename)),a.createElement("td",{className:"assignment-date-col"},c()(t.uploadDate).format("YYYY-MM-DD HH:mm")),"add"===t.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(o.a,null)," Laddar upp..."):"delete"===t.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(o.a,null)," Tar bort..."):(n=t.metadata,r=n.urkundResponse&&JSON.parse(n.urkundResponse),!(i=r&&r[0])&&t.metadata.urkundUploadError&&(i={Status:{ErrorCode:-1,Message:t.metadata.urkundUploadError,State:"Error"},ExternalId:t.metadata.urkundExternalId}),t.isRefreshing?a.createElement("td",{colSpan:2},a.createElement(o.a,null)," Uppdaterar..."):i?a.createElement(a.Fragment,null,a.createElement("td",{className:"urkund-status-col"},a.createElement("a",{href:i.Report&&i.Report.ReportUrl,onClick:function(n){-1!==["Accepted","Submitted"].indexOf(i.Status.State)&&(n.preventDefault(),n.stopPropagation(),e.refreshAssignment(t))},target:"_blank",title:m(i)},a.createElement("div",{className:h(i)}))),a.createElement("td",{className:"urkund-status-col"},a.createElement("div",{className:g(i)},i.Report&&"number"==typeof i.Report.Significance?i.Report.Significance.toFixed()+"%":" "))):a.createElement("td",{colSpan:2}))):a.createElement(a.Fragment,null,a.createElement("td",null,a.createElement("a",{href:"#",onClick:function(n){n.preventDefault(),n.stopPropagation(),e.download(t)}},t.filename)),a.createElement("td",{className:"assignment-date-col"},"add"===t.metadata.$meta?a.createElement(a.Fragment,null,a.createElement(o.a,null)," Laddar upp..."):"delete"===t.metadata.$meta?a.createElement(a.Fragment,null,a.createElement(o.a,null)," Tar bort..."):c()(t.uploadDate).format("YYYY-MM-DD HH:mm"))),C&&a.createElement("td",null,!t.metadata.$meta&&t.user===s.a.currentUser.mail&&a.createElement("a",{href:"#",onClick:function(n){n.stopPropagation(),n.preventDefault(),confirm("Radera inlämnad fil "+t.filename+"?")&&e.delete(t.mediaLink)}},a.createElement("i",{className:"fa fa-trash"}))));var n,r,i})))),Object(v.a)()?void 0:a.createElement(a.Fragment,null,a.createElement("div",{className:"drop-zone task-assignment-drop-zone"},"Droppa ditt färdiga arbete här.",a.createElement("br",null),"Det går också bra att använda bläddra-knappen nedan."),a.createElement("input",{type:"file",onChange:function(t){return e.verifyAndUpload(t.target.files[0])}}),a.createElement(k.a,{label:"Hämta från Google Drive",action:function(){var t=new b.a({upload:!0});t.show().then(function(n){t.downloadFile({file:n[0],limitSize:100}).then(function(t){return e.verifyAndUpload(t)})})}})))},t}(a.Component)},,,function(e,t,n){var r={"./en-SG":78,"./en-SG.js":78,"./en-au":79,"./en-au.js":79,"./en-ca":80,"./en-ca.js":80,"./en-gb":81,"./en-gb.js":81,"./en-ie":82,"./en-ie.js":82,"./en-il":83,"./en-il.js":83,"./en-nz":84,"./en-nz.js":84,"./sv":85,"./sv.js":85};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=122},function(e,t){},function(e,t){},function(e,t,n){"use strict";var r=n(55);n.d(t,"a",function(){return r.a})},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2),i=n(68),o=n(17),u=n(13),c=function(e){var t=e.title,n=e.backgroundImage,r=e.tabs,s=e.activeTab;return a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},n&&a.createElement("style",null,"\n        .pageHeader {\n          background-image: url('"+n+"') !important;\n        }\n      "),a.createElement("div",{className:"pageHeader"},a.createElement("a",null,a.createElement("h1",null,t)),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement("div",{className:"align-horizontal"}),a.createElement("div",{className:"horizontalMenu"},a.createElement("ul",null,r.map(function(e,t){var n=e.name,r=e.key,i=e.link,o=s===i;return a.createElement("li",{key:r||("string"==typeof n?n:t),className:o?"activePage":""},a.createElement("a",{href:i},n))})))))))))},l=n(92);var d=n(90),p=n(91),f=n(117),h=n(59);function m(e,t){return e.taskCustomizations?r.a({},t,e.taskCustomizations[t.id]):t}var g=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.module,n=e.course,r=function(e,t){var n={};return t.tasks.filter(function(t){return-1!==e.taskIds.indexOf(t.id)}).forEach(function(e){e.abilities.forEach(function(e){var t=e.id;return n[t]=!0}),e.centralContent.forEach(function(e){var t=e.id;return n[t]=!0}),e.knowledgeRequirements.forEach(function(e){var t=e.id;return n[t]=!0})}),n}(t,n),i=t.taskIds.map(function(e){return n.tasks.find(function(t){return t.id===e})}).filter(function(e){return!!e}).map(function(e){return{id:e.id,task:m(t,e),course:n,name:e.name,url:"#"+encodeURIComponent(t.name.trim())+"/"+e.id,courseName:n.name,learningGoal:e.learningGoal||t.name}}),o=i.filter(function(e){return e.task&&e.task.assignment}),u=i.filter(function(e){return!e.task||!e.task.assignment}),c=u.filter(function(e){return!e.task.learningGoal}),g=Object(s.b)(u.filter(function(e){return!!e.task.learningGoal}),function(e){return e.learningGoal});return a.createElement("div",null,a.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},a.createElement("div",{className:"sv-text-portlet-content"},a.createElement("h1",{className:"h1"},t.name))),a.createElement("div",{className:"sv-vertical sv-layout"},a.createElement("div",{dangerouslySetInnerHTML:{__html:t.mandatoryContent}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("div",{className:"ked_boxed"},a.createElement("h3",null,"Modulens kunskapskrav, förmågor och centrala innehåll"),(!!t.startWeek||!!t.endWeek)&&a.createElement("div",{className:"week-period-div"},a.createElement("div",null,"Startvecka"),a.createElement("div",null,t.startWeek||"--"),a.createElement("div",null,"Slutvecka"),a.createElement("div",null,t.endWeek||"--"),a.createElement("br",null)),a.createElement("hr",null),a.createElement(l.a,{title:"I den här modulen bedöms följande kunskapskrav",requirements:n.knowledgeRequirements,includedIds:r}),a.createElement(d.a,{title:"Den här modulen behandlar följande förmågor",abilities:n.abilities.filter(function(e){return r[e.id]})}),a.createElement(p.a,{title:"Den här modulen behandlar följande centrala innehåll",centralContent:n.centralContent.filter(function(e){return r[e.id]})}))),t.taskIds.length>0&&a.createElement("div",{className:"sv-script-portlet sv-portlet"},a.createElement("div",{className:"ked_boxed"},0===o.length?void 0:a.createElement(a.Fragment,null,a.createElement("h2",null,"Inlämningsuppgifter"),a.createElement("hr",null),a.createElement(h.a,{learningTasks:o})),0===u.length?void 0:a.createElement(a.Fragment,null,a.createElement("h2",null,"Uppgifter"),a.createElement("hr",null),a.createElement(f.a,{commonTasks:c,learningGoals:Object.keys(g).map(function(e){return{name:e,learningTasks:g[e]}})})))),t.resources.length>0&&a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("div",{className:"ked_boxed"},a.createElement("h2",null,"Resurser"),a.createElement("hr",null),a.createElement("div",{className:"taskContainer"},t.resources.map(function(e,t){return a.createElement("div",{className:"align-horizontal",key:t},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:e.url},e.name)))})))))},t}(a.Component),v=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props.resources;return a.createElement("div",null,a.createElement("div",{className:"taskContainer"},e.map(function(e,t){return a.createElement("div",{className:"align-horizontal",key:t},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:e.url},e.name)))})))},t}(a.Component),b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this.props.course;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},e.runUpText&&a.createElement("div",null,a.createElement("h1",null,"Upptakt"),a.createElement("p",{className:"normal",dangerouslySetInnerHTML:{__html:e.runUpText}})),e.responsibleTeachers&&e.responsibleTeachers.length>0&&a.createElement("div",null,a.createElement("h2",null,"Lärare"),e.responsibleTeachers.map(function(e,t){return a.createElement("p",{key:t},a.createElement("a",{href:k(e.url)},e.name))})),e.workFlowLink&&a.createElement("a",{className:"btn",href:e.workFlowLink},"Arbetsgång"),a.createElement("br",null),a.createElement("br",null),a.createElement(d.a,{title:"Ämnets förmågor",subTitle:"Förmågor",abilities:e.abilities,className:"larger"}),a.createElement(p.a,{title:"Kursens centrala innehåll",subTitle:"Centralt innehåll",centralContent:e.centralContent,className:"larger"}),a.createElement(l.a,{title:"Kursens kunskapskrav",requirements:e.knowledgeRequirements,className:"larger"})),e.resources.length>0&&a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("div",{className:"ked_boxed"},a.createElement("h2",null,"Resurser"),a.createElement("hr",null),a.createElement(v,{resources:e.resources}))))},t}(a.Component);function k(e){return-1===e.indexOf(":")&&e.indexOf("@")>=0?"mailto:"+e:e}var y=!1;var E,w,T,S,D,C=n(14),O=n(125),N=n(27),I=n(5),x=n(3),R=n(6),P=n.n(R),L=n(119),j=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:void 0,weekPlannerWeek:P()().week()},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){N.b.subscribe(this.onUserTasksChanged)},t.prototype.componentWillUnmount=function(){N.b.unsubscribe(this.onUserTasksChanged)},t.prototype.componentWillReceiveProps=function(e){if(e.task.id!==this.props.task.id){var t=N.b.mem.items.find(function(t){return t.task&&t.task.length>0&&t.task[0].id===e.task.id})||null;this.setState({userTask:t,weekPlannerWeek:P()(N.b.persistedState.weekDate).week()})}},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.task&&e.task.length>0&&e.task[0].id===t.props.task.id})||null;this.setState({userTask:n,weekPlannerWeek:P()(N.b.persistedState.weekDate).week()})},t.prototype.toggleTask=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,u;return r.d(this,function(r){switch(r.label){case 0:return e=N.b.persistedState.weekDate,t=this.state.userTask,n=this.props,a=n.course,s=n.task,(i=a.modules.find(function(e){return e.taskIds.some(function(e){return e===s.id})}))?void 0===t?[2]:t?[3,2]:(o=Math.max.apply(Math.max,[e].concat(N.b.mem.items.map(function(e){return e.dateTime}))),u={id:Object(I.h)(),courseName:a.name,dateTime:o+2e3,learningGoal:s.learningGoal||i.name,name:s.name,url:s.url,task:[s],course:[a],acl:[new I.b("email",x.a.currentUser.mail,"S"),new I.b("schoolRole",x.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},s.deadline&&(u.deadline=s.deadline),[4,Promise.all([N.b.setWeekPlannerBoxOpen(this.props.course.name,!0),N.b.insert([u])])]):[2];case 1:return r.sent(),[3,4];case 2:return[4,N.b.delete([t.id])];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.task,i=t.course,o=this.state,u=o.userTask,c=o.weekPlannerWeek,f=n.abilities.map(function(e){return i.abilities.find(function(t){return t.id===e.id})}).filter(function(e){return!!e}),h=n.centralContent.map(function(e){return i.centralContent.find(function(t){return t.id==e.id})}).filter(function(e){return!!e}),m=n.knowledgeRequirements.map(function(e){return i.knowledgeRequirements.find(function(t){return t.id===e.id})}).filter(function(e){return!!e}),g=u&&("adding"===u.$meta||"deleting"===u.$meta),v=P()().week(),b=c===v?"loggboken":c===v+1?Object(s.a)(E||(E=r.e(["vald vecka (nästa vecka)"],["vald vecka (nästa vecka)"]))):c===v-1?Object(s.a)(w||(w=r.e(["vald vecka (förra veckan)"],["vald vecka (förra veckan)"]))):Object(s.a)(T||(T=r.e(["vald vecka (v ",")"],["vald vecka (v ",")"])),c),k=n.deadline&&P()(n.deadline).endOf("day")<P()();return a.createElement("div",null,a.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},a.createElement("div",{className:"sv-text-portlet-content"},a.createElement("h1",{className:"h1"},n.name))),a.createElement("div",{className:"sv-html-portlet sv-portlet"},n.content&&a.createElement(a.Fragment,null,a.createElement("div",{dangerouslySetInnerHTML:{__html:n.content}})),n.learningGoal&&a.createElement("div",null,a.createElement("h2",null,"Uppgiftens lärandemål"),a.createElement("p",null,n.learningGoal)),n.url&&a.createElement("a",{href:n.url,className:"btn btn-large"},"Gå till uppgiften")),a.createElement("br",null),n.assignment?a.createElement(a.Fragment,null,a.createElement("h2",null,"Inlämningsuppgift"),Object(C.e)(x.a.currentUser,i.school)?a.createElement("p",null,"Här kan du som lärare se elevernas inlämnade arbeten."):a.createElement(a.Fragment,null,a.createElement("p",null,"Det här är en inlämningsuppgift. Lämna in ditt arbete som en pdf, doc eller odt fil genom att dra det till fältet under. Du kan även ladda up en fil eller välja en fil från din Google Drive."),n.deadline?a.createElement("p",null,a.createElement("b",null,"Den här uppgiften ",k?"skulle ha lämnats in ":"ska vara inlämnad ",P()(n.deadline).format("YYYY-MM-DD"))):void 0),a.createElement(L.a,{courseId:i.id,taskId:n.id,school:i.school}),a.createElement("br",null)):void 0,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},f.length>0&&a.createElement(d.a,{title:"Den här uppgiften behandlar följande förmågor",className:"larger",headerOpen:!1,abilities:f}),h.length>0&&a.createElement(p.a,{title:"Den här uppgiften behandlar följande centrala innehåll",className:"larger",headerOpen:!1,centralContent:h}),m.length>0&&a.createElement(l.a,{title:"I den här uppgiften bedöms följande kunskapskrav",className:"larger",headerOpen:!0,requirements:m})),a.createElement("hr",null),void 0!==u&&a.createElement("div",{className:"taskContainer"},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"selectedBox"+(u&&"deleting"!==u.$meta?" selected":""),style:g?{opacity:.5}:{},onClick:function(){return!g&&e.toggleTask()}})),a.createElement("div",{className:"horizontalItem top"},u?Object(s.a)(S||(S=r.e(["Ta bort uppgiften från ",""],["Ta bort uppgiften från ",""])),b):Object(s.a)(D||(D=r.e(["Lägg till uppgiften i ",""],["Lägg till uppgiften i ",""])),b)))),a.createElement("hr",null),n.resources&&n.resources.length>0&&a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("h2",null,"Resurser kopplade till uppgiften"),a.createElement("div",{className:"taskContainer"},n.resources.map(function(e,t){return a.createElement("div",{key:t,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:e.url},e.name)))})),a.createElement("br",null)),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null),a.createElement("br",null))},t}(a.Component);y||(y=!0,document.documentElement.addEventListener("click",function(e){var t=e.target;t&&"A"===t.tagName&&history.replaceState({pageYOffset:window.pageYOffset},null,null)}),history.scrollRestoration&&(history.scrollRestoration="manual"));var _=function(e){function t(t){var n=e.call(this,t)||this;n.onHashChange=n.onHashChange.bind(n);var r=n.getModuleAndTaskFromHash(),a=r.module,s=r.task;return n.state={module:a,task:s},n}return r.c(t,e),t.prototype.getModuleAndTaskFromHash=function(){var e=(location.hash.substr(1)||"").split("/");e.length>0&&!e[0]&&(e=e.slice(1));var t=r.f(e.map(function(e){return decodeURIComponent(e)}),2),n=t[0],a=t[1],s=this.props.course.modules.filter(function(e){return(e.name||"").trim().toLowerCase()===(n||"").trim().toLowerCase()})[0]||null,i=a&&this.props.course.tasks.find(function(e){return e.id===a})||null;return i&&!s&&(s=this.getOrderedModules().filter(function(e){return e.taskIds.some(function(e){return i.id===e})})[0]),i&&s&&(i=m(s,i)),{module:s,task:i}},t.prototype.componentDidMount=function(){window.addEventListener("hashchange",this.onHashChange)},t.prototype.componentWillUnmount=function(){window.removeEventListener("hashchange",this.onHashChange)},t.prototype.onHashChange=function(){var e=this.getModuleAndTaskFromHash(),t=e.module,n=e.task;this.setState({module:t,task:n},function(){var e=void 0;if(n){var t=document.getElementById("ked-task-anchor");e=t?window.pageYOffset+t.getBoundingClientRect().top:0}!function(e){var t=e.fallbackScrollPosition;history.state&&void 0!==history.state.pageYOffset?window.scrollTo(0,history.state.pageYOffset):void 0!==t&&window.scrollTo(0,t)}({fallbackScrollPosition:e})})},t.prototype.getOrderedModules=function(){var e=this.props.course,t=e.moduleOrder||e.modules.map(function(e){return e.id});return t.map(function(t){return e.modules.find(function(e){return e.id===t})}).filter(function(e){return!!e}).concat(e.modules.filter(function(e){return!t.find(function(t){return e.id===t})}))},t.prototype.render=function(){var e=this.props,t=e.course,n=e.courseBuilderUrl,r=this.state,s=r.module,i=r.task,o=this.getOrderedModules();return a.createElement("div",null,a.createElement(c,{title:t.name+" - "+t.points+"p",backgroundImage:(t.images.find(function(e){return e.id===t.imageId})||{url:""}).url,tabs:[{name:"Upptakt",link:"#",key:"Upptakt"}].concat(o.map(function(e){var t=e.name;return{name:t,link:"#"+encodeURIComponent(t),key:t}})).concat(t.workFlowLink?[{name:"Arbetsgång",key:"workflow",link:t.workFlowLink}]:[]).concat(Object(C.c)(x.a.currentUser,t)?[{name:a.createElement("span",null,a.createElement("i",{className:"fa fa-pencil","aria-hidden":"true"})," Redigera denna kurs"),key:"edit",link:Object(C.f)(n,{})+"#/courses/"+t.id+"/edit"}]:[]),activeTab:s?"#"+encodeURIComponent(s.name):"#"}),a.createElement("div",{className:"sv-row sv-layout"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},a.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},i?a.createElement(j,{task:i,course:t}):s?a.createElement(g,{course:t,module:s}):a.createElement(b,{course:t})),a.createElement("div",{className:"sv-layout sv-column-5"},a.createElement("div",{className:"sv-vertical sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement(O.a,{viewCourseUrl:"",env:x.a}))))))))))},t}(a.Component),M=n(16),U=n(112);function A(){return a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement(c,{title:x.a.currentUser.school,backgroundImage:"",tabs:[{name:"Skolans kurser",link:"#"}],activeTab:"#"}),a.createElement("div",{className:"sv-row sv-layout"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},a.createElement(U.a,null)))))}n.d(t,"a",function(){return B});var B=function(e){function t(t){var n=e.call(this,t)||this;return n.state={course:null,isLoading:!0},n}return r.c(t,e),t.prototype.componentWillMount=function(){var e=this;this.load().catch(s.n).then(function(){return e.setState({isLoading:!1})})},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return(e=Object(M.b)(location.search).courseId)?[4,Object(o.e)(e)]:[3,2];case 1:return n=r.sent(),[3,3];case 2:n=null,r.label=3;case 3:return t=n,this.setState({course:t}),document.title=t?t.name+" - "+t.points+"p":"Kurser",[2]}})})},t.prototype.render=function(){return a.createElement("div",{className:"course-viewer"},this.state.isLoading?a.createElement(u.a,null):this.state.course?a.createElement(_,{course:this.state.course,courseBuilderUrl:this.props.courseBuilderUrl}):a.createElement(A,null),a.createElement(i.a,null))},t}(a.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=n(24),s=(n(89),n(3)),i=n(7),o=n(0),u=n(155),c=n(2),l=n(13),d=n(19),p=n(9),f=n(56),h=s.a.bearerProvider.getBearer(),m=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isTokenLoaded:!1},n}return r.c(t,e),t.prototype.componentWillMount=function(){var e=this;h.then(function(){e.setState({isTokenLoaded:!0})}).catch(function(e){Object(c.n)(e)})},t.prototype.render=function(){var e=this.props.intl;return this.state.isTokenLoaded?o.createElement(d.a.Provider,{value:{intl:e}},o.createElement(u.a,{courseBuilderUrl:i.b.KED_COURSE_BUILDER_URL})):o.createElement("p",null,o.createElement(l.a,null),"V.g. vänta... autenticerar...")},t}(o.Component),g=Object(f.a)(Object(p.d)(m));a.a.components=r.a({},a.a.components,{KEDAppCourseViewer:g})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,