var testpagecoursebuilderks=function(e){function t(t){for(var r,o,s=t[0],c=t[1],u=t[2],d=0,m=[];d<s.length;d++)o=s[d],a[o]&&m.push(a[o][0]),a[o]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(l&&l(t);m.length;)m.shift()();return i.push.apply(i,u||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,s=1;s<n.length;s++){var c=n[s];0!==a[c]&&(r=!1)}r&&(i.splice(t--,1),e=o(o.s=n[0]))}return e}var r={},a={8:0},i=[];function o(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var s=window.webpackJsonp_name_=window.webpackJsonp_name_||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var u=0;u<s.length;u++)t(s[u]);var l=c;return i.push([181,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return o}),n.d(t,"k",function(){return c}),n.d(t,"g",function(){return u}),n.d(t,"h",function(){return l}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return f}),n.d(t,"n",function(){return h}),n.d(t,"l",function(){return p}),n.d(t,"b",function(){return b}),n.d(t,"c",function(){return g}),n.d(t,"e",function(){return v}),n.d(t,"j",function(){return y}),n.d(t,"m",function(){return k});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function i(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function o(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&i(n,t),n}var s=[].concat;function c(e){return s.apply([],e)}function u(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function l(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],i=t.slice(1);return function(e,t){return function e(t,n,r,i){var o=t[r];if(null==o)return-1;var s=n[r];return null==s?1:0===i.length?a(o,s):e(o,s,i[0],i.slice(1))}(e,t,n,i)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function f(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function h(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function p(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function b(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r],o=t(i),s=n[o];s?s.push(i):n[o]=[i]}return n}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r];n[t(i)]=i}return n}function v(e,t){var n,a,i={};try{for(var o=r.h(t),s=o.next();!s.done;s=o.next()){var c=s.value;c in e&&(i[c]=e[c])}}catch(e){n={error:e}}finally{try{s&&!s.done&&(a=o.return)&&a.call(o)}finally{if(n)throw n.error}}return i}function y(e,t){var n=g(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function k(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,i=n.length;a<i;++a){var o=n[a];if(r[a]!==o)return!1;if(e[o]!==t[o])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(28);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(19);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(24);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,,function(e,t,n){"use strict";var r=n(3),a=n(4),i=n(19),o=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),s=n(22);function c(e,t){return s.a[e].relationships[t]}function u(e,t){var n=function(e){var t=function(e){return!0};return e.from?l(t,function(t){return t.dateTime>=e.from}):e.to?l(t,function(t){return t.dateTime<e.to}):e.ids?l(t,function(t){return e.ids.includes(t.id)}):e.name?l(t,function(t){return t.name===e.name}):e.tags?l(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function l(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var f=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var i=a[r];localStorage.setItem("cache-bust-"+n+"-"+i,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return s.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+c(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),h=n(15);function p(e,t){for(var n=Object.keys(t),r=e,i=0,o=n;i<o.length;i++){var s=o[i];r===e&&(r=a.a({},e));var c=t[s];if(c&&"object"==typeof c){var u=Object.keys(c).filter(function(e){return e.startsWith("$")});if(u.length>0){for(var l=function(e){var t=c[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[s];a=Array.isArray(a)?a.slice():[],r[s]=a;for(var i=0,o=n;i<o.length;i++){var u=o[i];a.includes(u)||a.push(u)}break;case"$remove":var l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");a=r[s];Array.isArray(a)||(a=[]),r[s]=a.filter(function(e){return!l.includes(e)})}},d=0,m=u;d<m.length;d++){l(m[d])}continue}}r[s]=c}return r}function b(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,i=Object.keys(t),o=a.a({},e),s=0,c=i;s<c.length;s++){var u=c[s],l=t[u];if(l&&"object"==typeof l){var d=Object.keys(l).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var m=function(e){var t=l[e];switch(e){case"$unset":r?delete o[u]:o[u]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");s=(s=o[u])?a.a({},s):{},o[u]=s;var i=s.$remove;Array.isArray(i)&&(s.$remove=i.filter(function(e){return!n.includes(e)}),0===s.$remove.length&&delete s.$remove),d=(d=s.$add)?d.concat(n):n.slice(),s.$add=d;break;case"$remove":var s,c=t;if(!Array.isArray(c))throw new Error("$remove instruction must contain array");s=(s=o[u])?a.a({},s):{},o[u]=s;var d=s.$remove;Array.isArray(d)&&(s.$add=d.filter(function(e){return!c.includes(e)}),0===s.$add.length&&delete s.$add),i=(i=s.$remove)?i.concat(c):c.slice(),s.$remove=i}},f=0,h=d;f<h.length;f++){m(h[f])}continue}}o[u]=l}return o}var g=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,i,o;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(i=r[n]).op||i.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==i.op||i.targetBranchId&&i.branchId!==this.query.branchId&&i.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===i.op&&(i.deltaDoc.tags&&this.query.tags||i.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:o=this.getDataWithMutationsApplied(e,!1,this.data),this.data=o,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,i=this.includes,o=this.query,s=o.hasEdgesFrom?[].concat(o.hasEdgesFrom||[]):[],u=o.tags?[].concat(o.tags||[]):[];switch(t.op){case"update":return Object(h.e)(e,function(e){if(e.id===t.id){var r=p(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return i.forEach(function(r){var i,o=e[r];if(o){var s=Object(h.e)(o,function(e){if(e.id!==t.id)return e;var r=p(e,t.deltaDoc);return n&&(r.$meta="updating"),r});s!==o&&(e=a.a({},e,((i={})[r]=s,i)))}}),e});case"add-related":if(r===t.table&&-1!==i.indexOf(t.graphProp))return Object(h.e)(e,function(e){var r;if(e.id!==t.id)return e;var i=a.a({},t.relatedDoc);return n&&(i.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([i]),r))});if(o.hasEdgesFrom&&s.includes(t.id)&&r===c(t.table,t.graphProp)){if(!o.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&u.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return o.ids&&o.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==i.indexOf(t.graphProp)?Object(h.e)(e,function(e){var r,i=e[t.graphProp];return i?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?i.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):i.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):o.hasEdgesFrom&&s.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(o.include){var l=i.map(function(e){return{label:e,table:c(r,e)}}).filter(function(e){return e.table===t.table});if(l.length>0)return Object(h.e)(e,function(e){return l.forEach(function(r){var i,o=r.label,s=e[o];s&&(e=a.a({},e,((i={})[o]=n?s.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):s.filter(function(e){return e.id!==t.id}),i)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),v=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new o(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return g.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesFrom",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.hasEdgesTo=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesTo",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:f.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new i.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(35).a),y=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===g.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var i=a.find(function(t){return s.a[r.table].relationships[t]===e});if(i){for(var o={},c=0,l=r.data;c<l.length;c++){var d=l[c];u(t,d[i]).forEach(function(e){return o[e.id]=e})}var m=Object.keys(o).map(function(e){return o[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var f=u(t,r.data);return t.ids.every(function(e){return f.some(function(t){return t.id===e})})?{value:f}:"continue"}},i=0,o=this.queries;i<o.length;i++){var c=a(o[i]);if("object"==typeof c)return c.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,i=this.findQuery(n,r);i?i.timeoutHandle&&(clearTimeout(i.timeoutHandle),i.timeoutHandle=null):(i=new g(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(i)),i.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,i=(n.repo,this.findQuery(r,a));i&&(i.unsubscribe(e),0===i.subscriptions.length&&(i.timeoutHandle=setTimeout(function(){0===i.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==i}))},this.queries.length>50?500:3e5)))},e}(),k=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return c(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return c(e,t)})).some(function(e){return c(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),i=e.length,o=function(t){var i=e[t];if("update"===i.op){var o=r.findIndex(function(e){return"update"===e.op&&e.branchId===i.branchId&&e.id===i.id});o>=0&&(n[t]=a.a({},i,{deltaDoc:b(i.deltaDoc,r[o].deltaDoc)}),r.splice(o,1))}},s=0;s<i;++s)o(s);return n.concat(r)},e}(),E=n(39);function w(e,t,n,r,i,o){for(var s=function(n){switch(n.op){case"add-related":o||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:i}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(o||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:i,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((c=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var s=t[c];t=t.slice(0,c).concat([a.a({},s,{$meta:r?"removing":"persisted"})],t.slice(c+1))}else t=t.slice(0,c).concat(t.slice(c+1));break;case"update":if(n.branchId!==e)return"continue";var c;if((c=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!o)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[i],$meta:r?"adding":"persisted"}].concat(t);else{var u=t[c],l=u.contributors.slice();l.includes(i)||l.push(i);var d=b(u.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:l,$meta:r?"updating":"persisted"}].concat(t.slice(0,c),t.slice(c+1)):t.slice(0,c).concat(t.slice(c+1))}}},c=0,u=n;c<u.length;c++){var l=s(u[c]);if("object"==typeof l)return l.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var i=a[r],o=this.lookup[i];if(o.value){var s=w(o.query.branchId,o.value,e,n,this.getUserDisplayName(),!!o.query.tags);null===s&&(n||o.fetch()),s!==o.value&&(o.optimisticValue=s,n||(o.value=s),o.notify(s))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new S(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),S=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=i.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),O=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,i,o;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),i=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),f.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(k.merge(e,i),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return o=a.sent(),this.persistedVersion.dispatchError(o),o&&o.name&&o.name.startsWith("http4")?(this.dispatchError(o,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(o,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new i.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(s.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),I=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),j=function(){function e(e,t,n,r,a,i,o,c){var u=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=i,this.writer=o,this.cacheOptimized=c,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new k),i||(this.querySet=new y(this.mutationQueue)),o||(this.writer=new O(this.mutationQueue,this.querySet,e,t,n)),Object.keys(s.a).forEach(function(e){var t=new v(u,e,r||{});c&&(t=t.cacheOptimized()),u[e]=t}),this.deltas=new I(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new v(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var C=n(5),N=n(7);n.d(t,"c",function(){return D}),n.d(t,"d",function(){return x}),n.d(t,"b",function(){return R}),n.d(t,"a",function(){return L});var D=new j(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),x=Object(C.i)(N.b.KED_REALM),R={standardSchool:D.schools.name("standard").cacheOptimized().single(),get mySchool(){return D.schools.name(r.a.currentUser.school).cacheOptimized().single()}},L={getBranchId:function(e,t){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return D.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(C.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return D.courseBlocks.tags(e).idsOnly().concat(D.courseContents.tags(e).idsOnly()).concat(D.courseTabs.tags(e).idsOnly()).concat(D.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},,function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";var r=n(1),a=n(5);var i=n(16);n.d(t,"a",function(){return o}),n.d(t,"c",function(){return c}),n.d(t,"e",function(){return u}),n.d(t,"d",function(){return l}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return f});var o=["user","role","school","debug","testVersion","testversion","schoolType","schooltype"];function s(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function c(e,t){return s(e,t,"W")}function u(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function l(e,t){return e.roles.includes("ADMIN")||u(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,o=Object(i.b)(location.search),s=r.a({},o,{role:t,school:n}),c=Object(i.a)(s);a?location.href=""+a+c:(location.hash="#",location.search=c)}};function m(e){d.actAs(e)}function f(e,t){var n,a,s=Object(i.b)(location.search),c={};try{for(var u=r.h(o),l=u.next();!l.done;l=u.next()){var d=l.value;s[d]&&(c[d]=s[d])}}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=u.return)&&a.call(u)}finally{if(n)throw n.error}}var m=Object(i.a)(r.a({},c,t)),f=e.indexOf("#");return f>=0?""+e.substr(0,f)+m+e.substr(f):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return s}),n.d(t,"e",function(){return c});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function i(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function o(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function s(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),i=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(i.apply(Uint8Array,[void 0,r.sent()])),o=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[o++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function c(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var i=e[r],o=t(i);o!==i&&(n===e&&(n=e.slice()),n[r]=o)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return o}),n.d(t,"c",function(){return s});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),i=t[0],o=t[1];return a[n?i.toLowerCase():i]=o}),a}function i(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function o(e){return"?"+i(e)}function s(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";n.d(t,"k",function(){return m}),n.d(t,"c",function(){return f}),n.d(t,"g",function(){return h}),n.d(t,"h",function(){return p}),n.d(t,"m",function(){return b}),n.d(t,"j",function(){return g}),n.d(t,"d",function(){return v}),n.d(t,"l",function(){return y}),n.d(t,"b",function(){return k}),n.d(t,"f",function(){return w}),n.d(t,"a",function(){return T}),n.d(t,"i",function(){return S}),n.d(t,"e",function(){return O});var r=n(1),a=n(6),i=n.n(a),o=n(5),s=n(38),c=n.n(s),u=n(12),l=n.n(u),d=n(3);function m(e,t,n,a,i){var s,u,l={},d=t.id,m=function(s){var c,u,m,f,h,p,b=a[s],g=e[s]||[],v=t[s];if(!v)return"continue";var y=v.map(function(e,t){return{doc:e,idx:t}}),k=y.filter(function(e){return!g.some(function(t){return t.id===e.doc.id})});try{for(var E=r.h(k),w=E.next();!w.done;w=E.next()){var T=w.value,S=(R=r.a({},T.doc)).$meta;delete R.$meta,"add"===S?(R.id||(R.id=Object(o.h)()),i.add(b,R)):"update"===S&&i.put(b,R),i.link(n,d,b,R.id,s),l[s]||(l[s]={}),l[s][T.idx]={$set:R}}}catch(e){c={error:e}}finally{try{w&&!w.done&&(u=E.return)&&u.call(E)}finally{if(c)throw c.error}}var O=g.filter(function(e){return!v.some(function(t){return t.id===e.id})});try{for(var I=r.h(O),j=I.next();!j.done;j=I.next()){var C=j.value;i.unlink(n,d,b,C.id,s)}}catch(e){m={error:e}}finally{try{j&&!j.done&&(f=I.return)&&f.call(I)}finally{if(m)throw m.error}}var N=y.filter(function(e){return g.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var D=r.h(N),x=D.next();!x.done;x=D.next()){var R,L=x.value;delete(R=r.a({},L.doc)).$meta,i.put(b,R),l[s]||(l[s]={}),l[s][L.idx]={$set:R}}}catch(e){h={error:e}}finally{try{x&&!x.done&&(p=D.return)&&p.call(D)}finally{if(h)throw h.error}}};try{for(var f=r.h(Object.keys(a)),h=f.next();!h.done;h=f.next()){m(h.value)}}catch(e){s={error:e}}finally{try{h&&!h.done&&(u=f.return)&&u.call(f)}finally{if(s)throw s.error}}return c()(t,l)}function f(e){return i()(e).format("YYMMDD HH:mm")}function h(e){return i()(e).format("YYMMDD")}function p(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function b(e,t,n){return c()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function g(e,t,n){return c()(t,{createdDate:{$set:e},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function v(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function y(e,t){var n=Date.now();return(e=b(n,e,t)).createdBy||(e=g(n,e,t)),e}function k(e,t,n){var a,i,o=r.a({},e),s=t[e.id];s&&(o.$etag=s);try{for(var c=r.h(n),u=c.next();!u.done;u=c.next()){var l=u.value,d=e[l].map(function(e){return k(e,t,[])});o[l]=d}}catch(e){a={error:e}}finally{try{u&&!u.done&&(i=c.return)&&i.call(c)}finally{if(a)throw a.error}}return o}function E(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return E(0,function(t){return t.readAsText(e)})}function T(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function S(e){var t=l()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function O(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,o,s,c,u;return r.d(this,function(l){switch(l.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,i=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),i&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return o=r.f.apply(void 0,[l.sent(),3]),s=o[0],c=o[1],u=o[2],s.tasks=c,s.abilities&&s.abilitiesOrder&&(s.abilities=s.abilitiesOrder.map(function(e){return s.abilities.find(function(t){return t.id===e})})),s.knowledgeRequirements&&s.knowledgeRequirementsOrder&&(s.knowledgeRequirements=s.knowledgeRequirementsOrder.map(function(e){return s.knowledgeRequirements.find(function(t){return t.id===e})})),s.centralContent&&s.centralContentOrder&&(s.centralContent=s.centralContentOrder.map(function(e){return s.centralContent.find(function(t){return t.id===e})})),a&&(s.templateChain=u),[2,s]}})})}},function(e,t,n){"use strict";var r=n(4),a=n(15),i=n(29),o=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new i.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var i=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),e}).catch(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,i,o){return r.b(this,void 0,void 0,function(){var s,c,u,l,d,m,f,h,p,b,g;return r.d(this,function(v){switch(v.label){case 0:return o&&"no-cache"===o.cache&&(i=r.a({},i,{nocache:Object(a.c)()})),s=i&&Object.keys(i).filter(function(e){return void 0!==i[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(i[e])}).join("&"),u=(c=this).authHeader,l=c.tokenInfo,d=c.bearerProvider,u||l||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=l=v.sent(),v.label=2;case 2:return l?l.expires<Date.now()?(console.log("Token expired. Refresh it:"),f=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:f.tokenInfo=l=v.sent(),v.label=4;case 4:u="Bearer "+l.token,v.label=5;case 5:return u&&(n.Authorization=u),h=this.baseUrl+e+(s?"?"+s:""),[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 6:return 401==(p=v.sent()).status&&this.bearerProvider?(b=p.headers.get("www-authenticate"),console.log("Got "+p.status+" from "+(this.baseUrl+e)),b&&/Bearer/i.test(b)?(g=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return g.tokenInfo=v.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 8:p=v.sent(),v.label=9;case 9:return[2,p]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),s=function(){function e(e,t,n,r,i,s,c){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=i,this.tokenUrl=s,this.tokenQuery=c,this.tokenInfo={token:null,expires:0},this.client=new o(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),c=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),i=n[2];if("R"!==i&&"W"!==i&&"S"!==i)throw new Error("Invalid access string: "+t);return new e(r,a,i)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function u(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var l=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return s}),n.d(t,"b",function(){return c}),n.d(t,"j",function(){return u}),n.d(t,"f",function(){return o}),n.d(t,"c",function(){return l});var d=function(){function e(e,t,n){this.http=new o(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var i,o,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(i=r.sent()).status?[3,3]:(o=l.bind,s=[void 0,i.status],[4,i.text()]);case 2:throw new(o.apply(l,s.concat([r.sent()])));case 3:return[4,i.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,o,s;return r.d(this,function(c){switch(c.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(i=c.sent()).status?[3,3]:(o=l.bind,s=[void 0,i.status],[4,i.text()]);case 2:throw new(o.apply(l,s.concat([c.sent()])));case 3:return[4,i.json()];case 4:return[2,c.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=l.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(l,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(i){return i.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(i){return i.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(i){return i.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(i){return i.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(i){return i.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";var r=n(4),a=n(19),i=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),o=n(15);function s(e){e.resources||(e.resources=[])}function c(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return s(e)})}})}(e,n);break;case"tasks":s(e)}}var u=sessionStorage.getItem("redir-hash");if(u)try{var l=JSON.parse(u),d=l.time,m=l.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return c(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return c(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var f=new i,h=Date.now(),p=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(o.a)(this.getBearer.bind(this)),this.refreshBearer=Object(o.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,f.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-h>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return i=this,o=this.tokenResponseMapper,[4,e.text()];case 4:return i.tokenInfo=o.apply(this,[r.sent()]),f.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),b={fetch:fetch.bind(self),btoa:btoa.bind(self)},g=function(e){function t(t,n,r){var a="string"!=typeof n?n:new p(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,b,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return f}),n.d(t,"b",function(){return p}),n.d(t,"c",function(){return b}),n.d(t,"a",function(){return g})},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(37);function i(e){var t=e.children,n=e.spinner,i=e.onError,o=e.noError;return r.createElement(a.a,{props:t,spinner:n,noError:o,onError:i,fn:function(e){return e}})}},function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},function(e,t,n){"use strict";var r=n(1),a=n(0),i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,i=e.maximumTasksDisplayed,o=e.backgroundColor,s=e.progressColor,c=[];if(n>i)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var u=1;u<=n;u++)c.push(a.createElement("svg",{key:u},a.createElement("circle",{className:"circle-chart-background",fill:u>r?o:s,cx:"8",cy:"8",r:"8"})));return c},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return o});var o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,o=t.className,s=t.children,c=t.headerClassName,u=t.contentClassName,l=t.displayProgress,d=t.progressData,m=this.state.headerOpen;return a.createElement("div",{className:(o||"")+" openClose"+(m?" open":"")},a.createElement("div",{className:"openHeader"+(c?" "+c:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),l&&a.createElement(i,r.a({},d)))),a.createElement("div",{className:"openContent"+(u?" "+u:"")},s))},t}(a.Component)},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"b",function(){return o}),n.d(t,"d",function(){return s}),n.d(t,"c",function(){return c}),n.d(t,"a",function(){return u});var r=n(1),a=n(6),i=n.n(a);function o(e){return"AT"===e?[32,51]:[1,25]}function s(e){return e.month()>=6?[i()(new Date(e.year(),7,1)),i()(new Date(e.year(),11,31))]:[i()(new Date(e.year(),0,1)),i()(new Date(e.year(),6,31))]}function c(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function u(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(33),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(i.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(30).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(4),a=n(31),i=n(42),o=n(35),s=n(47),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,i,o){r=!0,e=a,t=i,i&&n?n(null,i,o):n&&n(a,null,o)});if(r){var i=s.a.current;if(!i)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var o=i.subscriptions,c=i.observer;return o.push(a),n=c,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new o.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,i=[null,null],o={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),i[0]=e,null!==i[1]&&t(i,null,o)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),i[1]=e,null!==i[0]&&t(i,null,o)}),o})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,i={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,o,s){if(a=s,r&&(r.unsubscribe(),r=null),o)t(null,o,i);else try{var c=e(n);c&&"function"==typeof c.subscribe?r=c.subscribe(function(e,n,a){r=a,t(e,n,i)}):t(c,null,a)}catch(o){t(null,o,a)}}),i})},t}(a.a);c.prototype.map=Object(i.a)(c)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0);var i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var i=e(a);if(i)return i}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},function(e,t,n){"use strict";var r=n(39);n.d(t,"a",function(){return r.b}),n.d(t,"b",function(){return r.c})},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(4),a=n(31),i=n(42),o=n(30),s=n(29),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new s.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new o.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);c.prototype._map=Object(i.a)(c)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r,a=n(1),i=n(0),o=n(2),s=function(e){var t=e.onClick,n=e.className,s=e.style,c=e.title;return i.createElement("div",{title:c||Object(o.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:s})}},function(e,t,n){"use strict";n.d(t,"b",function(){return o}),n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(2);function o(e,t){return function(n){return a.createElement(s,r.a({props:n,fn:e},t))}}var s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={result:null,isLoading:!0},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.subscribe()},t.prototype.componentWillUnmount=function(){this.unsubscribe()},t.prototype.shouldComponentUpdate=function(e,t){return this.state.error!==t.error||this.state.isLoading!==t.isLoading||this.state.result!==t.result||!Object(i.m)(e.props,this.props.props)},t.prototype.componentDidUpdate=function(e){Object(i.m)(e.props,this.props.props)||(this.unsubscribe(),this.subscribe())},t.prototype.subscribe=function(){var e=this;this.setState({isLoading:!0}),this.subscription=this.props.fn(this.props.props).subscribe(function(t,n){return e.setState({result:t,error:n,isLoading:!1})})},t.prototype.unsubscribe=function(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null)},t.prototype.render=function(){var e=this.state,t=e.result,n=e.error,r=e.isLoading,i=this.props,o=i.spinner,s=i.onError,c=i.noError;return n?c?"":s?s(n):a.createElement("p",null,"Error: ",n.message):r?o||"":void 0===t?"":t},t}(a.Component)},,function(e,t,n){"use strict";n(31),n(30);var r=n(35);n.d(t,"a",function(){return r.a});var a=n(29);n.d(t,"b",function(){return a.a});var i=n(47);n.d(t,"c",function(){return i.a})},,,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),i=n(6),o=n.n(i),s=n(25);var c=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),u=n(2),l=n(51),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return f}),n.d(t,"a",function(){return h});var m,f=function(){function e(t,n,i,o){var s=this;this.http=new a.f(t,n,{bearerProvider:i}),this.userEmailGetter=o;var c=function(e){return"function"==typeof s[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){c(e)&&(s[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(s[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,i=Object.create(e),o={},s=e;s&&s!==Object.prototype;s=Object.getPrototypeOf(s))c(s);function c(t){Object.keys(t).forEach(function(s){!i.hasOwnProperty(s)&&n(s)&&(i[s]=function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var c=JSON.stringify(r.g([s],n)),u=o[c];if(void 0!==u){if(u.promise)throw u.promise;if(u.error)throw u.error;if(u.timeout>Date.now())return u.value}try{var l=t[s].apply(e,n).then(function(e){o[c]={timeout:Date.now()+a,value:e}}).catch(function(e){o[c]={timeout:Date.now()+a,error:e}});throw o[c]={timeout:Date.now()+a,promise:l},l}catch(e){if(e.then)throw e;o[c]={timeout:Date.now()+a,error:e}}})})}return i}(this,{isApiMethod:c})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,i,o,s;return r.d(this,function(c){switch(c.label){case 0:return c.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=c.sent()).status?[3,3]:(i=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(i.apply(a.c,o.concat([c.sent()])));case 3:return[4,n.json()];case 4:return[2,c.sent().courses];case 5:throw s=c.sent(),console.error("Error from EDS: "+s),new Error(Object(u.a)(m||(m=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,i,o;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(i=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(i.apply(a.c,o.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,s,c,u,d,m,f,h,p,b;return r.d(this,function(r){switch(e){case"en_sin":return[2,l.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,l.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=t.getMonth()>=6,i=a?t.getFullYear():t.getFullYear()-1,s=a?t.getFullYear()+1:t.getFullYear(),c=o()(i.toString(),"YYYY"),u=o()(s.toString(),"YYYY"),1!=c.week()&&(c=c.clone().add(1,"week")),1!=u.week()&&(u=u.clone().add(1,"week")),d=o()(c.clone()).week(32).startOf("week"),m=o()(c.clone()).week(51).endOf("week"),f=o()(u.clone()),h=o()(u.clone()).week(25).endOf("week"),p={startDate:new Date(i,d.month(),d.date()).toDateString(),endDate:new Date(i,m.month(),m.date()).toDateString()},b={startDate:new Date(s,f.month(),f.date()).toDateString(),endDate:new Date(s,h.month(),h.date()).toDateString()},[2,{firstTerm:p,secondTerm:b,holidays:n}]}return[2]})})},e}(),h=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new c(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new c({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},function(e,t,n){"use strict";n.d(t,"b",function(){return m}),n.d(t,"a",function(){return k});var r=n(1),a=n(0),i=n(142),o=n(18),s=n(2),c=n(5),u=n(3),l=[{name:"schools",text:Object(s.a)(f||(f=r.e(["Skolor"],["Skolor"]))),route:"/schools"},{name:"subjects",text:Object(s.a)(h||(h=r.e(["Ämnen"],["Ämnen"]))),route:"/subjects"}],d=[{name:"courseBuilder",text:Object(s.a)(p||(p=r.e(["Kursbyggaren"],["Kursbyggaren"]))),route:"/courses/new"},{name:"studentPage",text:Object(s.a)(b||(b=r.e(["Elevsida"],["Elevsida"]))),route:""},{name:"feedback",text:a.createElement("span",null,a.createElement("i",{className:"fa fa-commenting-o","aria-hidden":"true"})," Feedback"),route:"https://kg.kunskapsporten.se/kursbyggaren/"}];function m(e,t,n,r){var a=Object(c.h)();n.update({imageId:{$set:a},images:{$set:[{id:a,url:r,acl:["role:USER:R","schoolRole:"+u.a.currentUser.school+"/EMPLOYEE:S"],$meta:"add"}]}})}var f,h,p,b,g,v,y,k=function(e){var t=e.title,n=(e.isTemplate,e.host),c=e.course,f=(e.origCourse,e.backgroundImage),h=e.activePage,p=u.a.currentUser.roles.some(function(e){return"ADMIN"===e}),b=d;return p&&(b=l.concat(b)),a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},f&&a.createElement("style",null,"\n        .pageHeader {\n          background-image: url('"+f+"') !important;\n        }\n      "),a.createElement("div",{className:"pageHeader",onDragOver:c&&o.a,onDrop:c&&function(e){return function(e,t,n,a){return r.b(this,void 0,void 0,function(){var n,a,i,o,c,l,d,f;return r.d(this,function(h){switch(h.label){case 0:return e.stopPropagation(),e.preventDefault(),n=e.dataTransfer.files,a=null,i=Array.from(e.dataTransfer.items),n.length>0?(o=n[0]).size>2097152?(Object(s.n)(Object(s.a)(g||(g=r.e(["Kan inte ladda upp bilder större än 2 MB"],["Kan inte ladda upp bilder större än 2 MB"])))),[2]):((c=new FormData).append("files",o),[4,u.a.kedBackendClient.http.fetch("web-upload","put",{},{},{body:c})]):[3,3];case 1:return 200!==(l=h.sent()).status?(Object(s.n)(Object(s.a)(v||(v=r.e(["Kunde inte ladda upp filen till Google Storage"],["Kunde inte ladda upp filen till Google Storage"])))),[2]):[4,l.text()];case 2:return a=h.sent(),[3,7];case 3:d=function(e){var t;return r.d(this,function(n){switch(n.label){case 0:return(t=i[e]).type.match("^text/uri-list")?[4,new Promise(function(e){return t.getAsString(e)})]:[3,2];case 1:a=n.sent(),n.label=2;case 2:return[2]}})},f=0,h.label=4;case 4:return f<i.length?[5,d(f)]:[3,7];case 5:h.sent(),h.label=6;case 6:return++f,[3,4];case 7:return null==a?(Object(s.n)(Object(s.a)(y||(y=r.e(["Kunde inte hitta någon bild i innehållet"],["Kunde inte hitta någon bild i innehållet"])))),[2]):(m(0,0,t,a),[2])}})})}(e,n)}},a.createElement("a",null,a.createElement("h1",null,t)),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement("div",{className:"align-horizontal"}),a.createElement("div",{className:"horizontalMenu"},a.createElement("ul",null,b.map(function(t){return{item:t,isActive:h===t.name,callback:e.callbacks&&e.callbacks[t.name],givenRoute:e.routes&&e.routes[t.name],defaultRoute:t.route}}).filter(function(e){return e.callback||e.defaultRoute||e.givenRoute}).map(function(e){var t=e.item,n=e.isActive,r=e.callback,o=e.defaultRoute,s=e.givenRoute;return a.createElement("li",{key:t.name,className:n?"activePage":"",onClick:r},r?a.createElement("a",null,t.text):o||s?s||/^http[s]\:\/\//i.test(o)?a.createElement("a",{href:s||o},t.text):a.createElement(i.a,{to:o},t.text):a.createElement("a",null,t.text))})))))))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return c});var r=n(1),a=n(34),i=n(10),o=n(2);function s(e,t,n){var r=(void 0===n?{appendLeftovers:!1}:n).appendLeftovers,a={};if(!e||!t)return e;var i=e&&t?t.map(function(t){return a[t]=!0,e.find(function(e){return e.id===t})}).filter(function(e){return!!e}):e;if(r){var o=e.filter(function(e){return!a[e.id]});return i.concat(o)}return i}function c(e,t){var n,c;if(t)c=new a.a([t]);else{var u=e.tags.filter(function(e){return e.startsWith("course:")});if(0===u.length)return new a.a(e);c=(n=i.c.courses).tags.apply(n,r.g(u)).toValue()}return c.map(function(t){var n=Object(o.k)(t.map(function(e){return e.abilitiesOrder||[]})),r=Object(o.k)(t.map(function(e){return e.centralContentOrder||[]})),a=Object(o.k)(t.map(function(e){return e.knowledgeRequirementsOrder||[]})),i=Object.assign({},e);return i.abilities&&(i.abilities=s(e.abilities,n)),i.centralContent&&(i.centralContent=s(e.centralContent,r)),i.knowledgeRequirements&&(i.knowledgeRequirements=s(e.knowledgeRequirements,a)),i})}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(33),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(i.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=null,a=[function(){return r}];var i={get current(){return r},addProvider:function(e){a.push(e),o()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),o()}};function o(){Object.defineProperty(i,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},,function(e,t,n){"use strict";n.d(t,"e",function(){return a}),n.d(t,"d",function(){return i}),n.d(t,"a",function(){return o}),n.d(t,"b",function(){return s}),n.d(t,"c",function(){return c});var r=n(2);function a(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("sub:")}).map(function(e){return e.substr("sub:".length)}))}function i(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr(e.indexOf("|")+1)}))}function o(e,t,n){var a=(e||[]).filter(function(e){return!e.startsWith("course:")&&!e.startsWith("sub:")}),i=t.map(function(e){return"sub:"+e}),o=Object(r.k)(t.map(function(e){return n.map(function(t){return"course:"+e+"|"+t})}));return a.concat(i).concat(o)}function s(e,t){return o(e,a(e),t)}function c(e,t){return o(e,t,i(e))}},,function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,,,function(e,t,n){"use strict";n.d(t,"e",function(){return l}),n.d(t,"b",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"f",function(){return f}),n.d(t,"d",function(){return h}),n.d(t,"c",function(){return p});var r,a,i,o,s=n(1),c=n(2),u=n(18);function l(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function d(e){return m([e],e.tasks)}function m(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function f(e){return Object(c.k)([function(e){var t={};return Object(c.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(c.a)(r||(r=s.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(c.a)(a||(a=s.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(c.a)(i||(i=s.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(c.a)(o||(o=s.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function h(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}function p(e){return e.responsibleTeachers.map(function(e){return{name:e.name,email:Object(u.d)(e),access:e.access||"edit"}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r=n(1),a=n(9),i=n(88),o=n.n(i),s=n(89),c=n.n(s),u=n(59),l=n(60),d=n(0),m=n(7),f=n(6),h=n.n(f),p=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(o.a,c.a)),n.messages={sv:u,en:l},h()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},,,function(e){e.exports={"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"Lägg till eget arbetsmål","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"VT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"HT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.goals":"Egna lärandemål","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"Mål:","weekplanner.addLearningGoalTitle":"Lägg till eget lärandemål","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoal":"Eget lärandemål","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(23),o=n(2),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,s=t.markedIds,c=t.markMode,u=t.migratedIds,l=t.uncoveredIds,d=Object(o.b)(n,function(e){return e.group||"default"}),m=Object.keys(d);return a.createElement(i.a,{title:a.createElement("p",null,r),className:"larger"},m.map(function(t){return a.createElement(a.Fragment,{key:t},1===m.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=s.some(function(e){return e===t.id}),r=u&&!!u[t.id],i=l&&l[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return c&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(c?" selectable":"")+(n?" markedGreen":i?" markedRed":"")+(r?" migrated":""),title:r?c?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.left,n=e.right,a=e.rightWidth;return r.createElement("div",{className:"sv-row sv-layout"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},r.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},r.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},r.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-"+(12-a)},t),r.createElement("div",{className:"sv-layout sv-column-"+a},n))))))}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"Administratör",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Carl Holmberg",mail:"carl.holmberg@kunskapsgymnasiet.se",roles:["ADMIN","EMPLOYEE"],school:"Norrköping",username:"carl.holmberg@kunskapsgymnasiet.se"},{displayName:"Carl",mail:"carl@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"carl"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-Lärare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Borås",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"Borås",schoolType:"Grundskolor"},{displayName:"Elev Borlänge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"Borlänge",schoolType:"Gymnasium"},{displayName:"Roll-lös",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(10),o=n(36),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>1&&(n=n.slice(1)),{infos:[e]})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),i.c.writer.onError(this._dbWriterError),i.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),i.c.writer.off(this._dbWriterError),i.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,i=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!i}).map(function(t){var n=t.message,r=t.details,i=t.retryable,s=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(o.a,{onClick:function(){return e.removeError(n)}})),r||i?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},s?"Dölj detailer":"Visa detailjer")," "):void 0,s?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),i?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){i.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r,a=n(1),i=n(0),o=n(2),s=function(e){function t(t){return e.call(this,t)||this}return a.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.knowledgeRequirements,n=e.markedIds,s=e.migratedIds,c=e.explainedRequirements,u=this.props,l=u.idsToMarkNotOk,d=u.markMode,m=u.onMarkChanged,f=u.onExplainedRequirementsChanged,h=["E","C","A"],p=[],b=t.slice(),g=null;!(g=h.map(function(e){var t=b.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=b[t];return b.splice(t,1),n})).every(function(e){return null===e});)p.push(g);return i.createElement("div",null,i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,h.map(function(e){return i.createElement("th",{key:e},e)}))),i.createElement("tbody",null,p.map(function(e,t){return i.createElement(i.Fragment,{key:t},i.createElement("tr",null,e.map(function(e,t){var r=e&&n&&n.indexOf(e.id)>=0,a=e&&l&&l[e.id],o=e&&s&&!!s[e.id];return i.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:e?e.name:""},className:(d?"selectable":"")+(o?" migrated":"")+(r?" markedGreen":a?" markedRed":""),onClick:d&&e?function(){return m(e.id,!r)}:void 0,title:o?d?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0})})),c&&i.createElement("tr",null,e.map(function(e,t){var s=e&&n&&n.indexOf(e.id)>=0;return i.createElement("td",{key:t},s?i.createElement("textarea",{placeholder:Object(o.a)(r||(r=a.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!d,value:c[e.id]||"",onChange:f&&function(t){return f(e.id,t.target.value)}}):void 0)})))}))))},t}(i.Component)},,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(7);r.b.ENVIRONMENT="test",r.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",r.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",r.b.KED_TOKEN_URL="",r.b.KED_CLIENT_ID="",r.b.KED_CLIENT_SECRET="",r.b.KED_REALM="SE1",r.b.KED_LOCALE="en",r.b.KED_SCHOOL_LOCALE="en_nin";var a=n(1),i=n(16),o=n(20),s=n(5),c=n(3),u=n(14),l=n(2);function d(e,t,n){var r=Object(i.b)(t),o=Object(l.e)(r,u.a),s=a.f(Object(i.c)(e),2),c=s[0],d=s[1],m=Object(i.b)(d);return c+Object(i.a)(a.a({},m,o,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function f(e,t,n){return new s.e(o.c,o.d,e+t.mail+location.search,r.b.KED_CLIENT_ID,r.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var h,p,b=c.a.currentUser&&c.a.currentUser.mail;if(b)if(r.b.KED_TOKEN_PATH){var g=d(r.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);c.a.bearerProvider=(p=m(h=g,b),new o.b(h,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){c.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,p),{token:t.token,expires:Date.now()+354e4}},p)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(c.a.currentUser=JSON.parse(t))}(m(g,b));var v=d(r.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);c.a.googleTokenProvider=function(e,t){var n=m(e,t);return new o.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(v,b)}else{if(!(r.b.KED_TOKEN_URL&&r.b.KED_CLIENT_ID&&r.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");c.a.bearerProvider=f(r.b.KED_TOKEN_URL,c.a.currentUser,["kedbackend","EDS"]),c.a.googleTokenProvider=f(r.b.KED_TOKEN_URL+"/google",c.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}c.a.kedBackendClient=new o.a(r.b.KED_API_URL,c.a.bearerProvider);var y=n(43);c.a.edsClient=new y.b(o.c,r.b.EDS_API_URL,c.a.bearerProvider,function(){return c.a.currentUser.mail})},,,,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(142),o=n(34),s=n(21),c=function(){return a.createElement("img",{style:{border:0,margin:0,padding:0},className:"ellipsis-loader"})},u=n(14),l=n(2);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return f});var d,m=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.dragState=new o.a({tabBeingDragged:"",tabBeingHovered:"",insertBefore:!1,originClientX:-1}),t}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props.lazyProps;return a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer",style:{overflow:"visible"}},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},a.createElement(s.a,{noError:!0},t.map(function(e){var t=e.backgroundImage;return t&&a.createElement("style",null,"\n              .pageHeader {\n                background-image: url('"+t+"') !important;\n              }\n            ")})),a.createElement("div",{className:"pageHeader"},a.createElement("a",null,a.createElement("h1",null,a.createElement(s.a,{noError:!0},t.map(function(e){return a.createElement(a.Fragment,null,e.title)})))),a.createElement(s.a,{noError:!0},t.map(function(e){var t=e.cornerBox;return t&&a.createElement("div",{className:"pageHeaderCornerBox"},t)})),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement(s.a,{spinner:a.createElement(c,null)},t.map(function(t){var n=t.tabs,o=t.buttons,c=t.activeTab,m=t.blocks,f=t.sortableTabs,h=t.onTabDrop;return a.createElement(a.Fragment,null,m?a.createElement("div",{className:"align-horizontal"},m.map(function(e){return a.createElement("div",{key:e.id,className:"horizontalItem top"},a.createElement("div",{className:"align-vertical"},a.createElement("div",null,a.createElement("a",null,e.name)),a.createElement("div",null,a.createElement("div",{className:"btn-group"},e.steps.map(function(e){return a.createElement(a.Fragment,{key:e.stepNo},a.createElement(i.a,{to:e.link,className:"btn btn-small step-button"+(e.isActive?" activePage":"")},e.stepNo),a.createElement("a",null))})))))})):null,a.createElement("div",{className:"horizontalMenu"},a.createElement(s.a,null,e.dragState.map(function(t){var s=t.tabBeingDragged,m=t.tabBeingHovered,p=t.insertBefore,b=t.originClientX;return a.createElement("ul",{className:f?"sortable":null,onDrop:h?function(t){m&&s&&h(s,m,p?"before":"after"),e.dragState.dispatch(r.a({},e.dragState.value,{tabBeingHovered:"",tabBeingDragged:""}))}:null},n.map(function(t,n){var o=t.name,h=t.key,g=t.link,v=t.onClick,y=t.draggable,k=c===h||"$"===c&&0===n,E=e.dragState;return o=o||Object(l.a)(d||(d=r.e(["(Namnlös flik)"],["(Namnlös flik)"]))),a.createElement(a.Fragment,{key:h},p&&m===h?a.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,a.createElement("li",{className:[k?"activePage":"",h===s?"drag-source":"",f&&y?"draggable":""].filter(function(e){return e}).join(" "),draggable:f&&y,onDragStart:f&&y?function(e){e.dataTransfer.effectAllowed="move",E.dispatch(r.a({},E.value,{originClientX:e.clientX,tabBeingDragged:h}))}:null,onDragOver:f?function(e){s!==h?s&&(e.preventDefault(),e.dataTransfer.dropEffect="move",E.dispatch(r.a({},E.value,{tabBeingHovered:h,insertBefore:b>e.clientX}))):E.dispatch(r.a({},E.value,{tabBeingHovered:""}))}:null,onDragEnd:function(t){e.dragState.dispatch(r.a({},E.value,{tabBeingHovered:"",tabBeingDragged:""}))}},g?g.startsWith(":")?a.createElement("a",{href:Object(u.f)(g.substr(1),{})},o):a.createElement(i.a,{to:g},o):v?a.createElement("a",{onClick:v},o):o),p||m!==h?null:a.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}),o&&o.map(function(e,t){return a.createElement("li",{className:"action-tab",key:"btn"+t},e)}))}))))}))))))))},t}(a.Component),f=function(e){return a.createElement(m,{lazyProps:new o.a(e)})}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n.n(r),i=function(e){var t=e.available,n=e.selected,r=e.onChange;return a.a.createElement("div",{className:"taskContainer"},t.map(function(e){var t=e.key,i=e.name,o=n.includes(t);return a.a.createElement("div",{key:t,className:"align-horizontal"},a.a.createElement("div",{className:"horizontalItem top",onClick:function(){return r(o?n.filter(function(e){return e!=t}):n.concat(t),t,o)}},a.a.createElement("div",{className:"checkBox"+(o?" checked":"")})),a.a.createElement("div",{className:"horizontalItem top"},i))}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return f}),n.d(t,"b",function(){return h});var r,a,i,o=n(1),s=n(0),c=n(44),u=n(2),l=n(3),d=n(5),m=n(142),f=function(e){return s.createElement("div",{style:{outline:0}},s.createElement(c.a,{title:"Skolor",activePage:"schools",callbacks:{schools:function(){return location.hash="#/schools"}},routes:{feedback:e.feedbackUrl}}),s.createElement(h,o.a({},e)))},h=function(e){function t(t){var n=e.call(this,t)||this;return n.state=null,n}return o.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(u.n)(e)})},t.prototype.load=function(){return o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:return this.props.id?(e=this.props.id,[4,l.a.kedBackendClient.get("schools",e)]):[3,2];case 1:return t=n.sent(),this.origSchool=o.a({},t),this.setState(o.a({},t)),[3,3];case 2:this.setState({id:Object(d.h)(),officialBranchId:Object(d.h)(),isGymnasium:"gymnasium"===this.props.type,isPrimarySchool:"primary"===this.props.type}),n.label=3;case 3:return[2]}})})},t.prototype.save=function(){return o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:if(e=new d.a,(t=o.a({},this.state,{tags:(this.state.tags||[]).filter(function(e){return["primary","gymnasium"].indexOf(e)<0})})).isPrimarySchool&&t.tags.push("primary"),t.isGymnasium&&t.tags.push("gymnasium"),!t.isGymnasium&&!t.isPrimarySchool)throw new Error(Object(u.a)(r||(r=o.e(["Skolan måste antingen vara gymnasium eller grundskola"],["Skolan måste antingen vara gymnasium eller grundskola"]))));if(this.origSchool){if(this.origSchool.name!==this.state.name)throw new Error("Skolans namn får inte ändras. Kontakta Vemendo AB.");t.officialBranchId||(t.officialBranchId=Object(d.h)(),this.addSchoolBranch(t,e)),e.put("schools",t)}else t.acl=["role:USER:R"],t.acl.push(new d.b("schoolRole",t.name+"/EMPLOYEE","W").toString()),e.add("schools",t),this.addSchoolBranch(t,e);return[4,l.a.kedBackendClient.batch(e.mutationRequests)];case 1:return n.sent(),location.hash="#/schools",[2]}})})},t.prototype.addSchoolBranch=function(e,t){var n={id:e.officialBranchId,name:e.name,schoolId:e.id,acl:["role:USER:R",new d.b("schoolRole",e.name+"/EMPLOYEE","W").toString()]};t.add("branches",n)},t.prototype.deleteSchool=function(){return o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:return prompt(Object(u.a)(a||(a=o.e(['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'],['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'])),this.state.name))!==this.state.name?[3,3]:[4,l.a.kedBackendClient.list("branches",{ids:[this.state.officialBranchId],include:"approvedChildren",flags:["includeIdsOnly"]})];case 1:return e=n.sent(),(t=new d.a).delete("schools",this.state.id),e[0].approvedChildren.forEach(function(e){var n=e.id;t.delete("branches",n)}),t.delete("branches",this.state.officialBranchId),[4,l.a.kedBackendClient.batch(t.mutationRequests)];case 2:return n.sent(),location.hash="#/schools",[3,4];case 3:alert("Skolan togs inte bort eftersom det namn du angav inte stämmer."),n.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=!!t.id,a=this.state,c=this.origSchool,d=l.a.currentUser.roles.some(function(e){return"ADMIN"===e});return s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},s.createElement("h2",null,n),s.createElement("hr",null),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Namn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:!a||!a.name,disabled:!d||r,tabIndex:1,size:50,value:a?a.name:"",onChange:function(t){return e.setState({name:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Visningsnamn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:a&&!a.displayName,disabled:!d,tabIndex:1,size:50,value:a?a.displayName:"",onChange:function(t){return e.setState({displayName:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),a&&a.isGymnasium?s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"EDS namn (gymnasium):"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNameGymn:"",onChange:function(t){return e.setState({edsSchoolNameGymn:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})):null,a&&a.isPrimarySchool?s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"EDS namn (grundskola):"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNamePrim:"",onChange:function(t){return e.setState({edsSchoolNamePrim:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})):null,s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Typ:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"checkbox",name:"schoolTypePrimary",disabled:!d,checked:a&&a.isPrimarySchool,tabIndex:1,value:"primary",onChange:function(t){return e.setState({isPrimarySchool:t.target.checked})}})," Grundskola"),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"}),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"checkbox",name:"schoolTypeGymnasium",disabled:!d,checked:a&&a.isGymnasium,tabIndex:1,value:"gymnasium",onChange:function(t){return e.setState({isGymnasium:t.target.checked})}})," Gymnasium"),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("br",null),d&&r&&s.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.deleteSchool().catch(u.n)}},"Ta bort skola"),s.createElement("div",{className:"pull-right"}," "),s.createElement(m.a,{className:"btn btn-warning btn-large pull-right",to:"/schools"},"Avbryt"),d&&s.createElement("a",{tabIndex:1,className:"btn btn-large",onClick:function(){c&&c.name!==a.name&&!confirm(Object(u.a)(i||(i=o.e(["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."],["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."]))))||e.save().catch(u.n)}},"Spara")))},t}(s.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(1),a=n(0),i=n(3),o=n(44),s=n(13),c=n(104),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(s.a,null));var e=this.state.subject,t=e.name;e.code,e.courseTemplates,e.schoolType;return a.createElement("div",null,a.createElement(o.a,{title:t,activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),a.createElement(c.a,{id:this.props.id}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(10),i=n(3);function o(e){var t=e.school,n=e.draftRepo,o=e.course;return r.b(this,void 0,void 0,function(){var e,s;return r.d(this,function(r){switch(r.label){case 0:return"standard"!==t?[3,1]:(n.merge(),e=a.c,[3,3]);case 1:return[4,a.c.schools.name(t).single().map(function(e){return e.officialBranchId}).load()];case 2:s=r.sent(),n.merge(s),e=a.c.branch(s),r.label=3;case 3:return e.courseInstances.update(o,{modifiedDate:Date.now(),modifiedBy:{name:i.a.currentUser.displayName,url:"mailto:"+i.a.currentUser.mail}}),[2]}})})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(3),o=n(13),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(o.a,null));var e=this.state.subject,t=e.name,n=e.code,r=e.courseTemplates,i=e.schoolType;return a.createElement("div",null,"primary"===i?a.createElement(a.Fragment,null,a.createElement("h2",null,"Grundskoleämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var n=e.id,r=(e.code,e.publishable,e.points,e.schoolGrade);return a.createElement("li",{key:n,className:"complete"},t," för årskurs ",r)}))):a.createElement(a.Fragment,null,a.createElement("h2",null,"Kurser för ämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var t=e.id,n=e.name,r=(e.code,e.publishable,e.points);return a.createElement("li",{key:t,className:"complete"},n," - ",r,"p")}))))},t}(a.Component)},,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(69);function i(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"Välj användare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,i=e.school,o=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===o.length?{fontStyle:"italic"}:{}},0===o.length?"saknar roller":o.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:i?{}:{fontStyle:"italic"}},i||"saknar skola"))}))))}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(10);function a(){return r.c.courseInstances.hasEdgesFrom([r.d])}},,function(e,t,n){"use strict";var r,a,i,o=n(1),s=n(0),c=n(44),u=n(3),l=n(2),d=n(142),m=n(14),f=n(13),h=function(e){var t=e.schools,n=e.viewCourseUrl,c=u.a.currentUser.roles.some(function(e){return"ADMIN"===e});return s.createElement("div",{className:"editable-school-list"},s.createElement("div",null,t?s.createElement("table",null,s.createElement("tbody",null,t.map(function(e){return s.createElement("tr",{className:"align-horizontal",key:e.id},s.createElement("td",null,s.createElement(d.a,{className:"editItem",to:"/schools/"+e.id+"/edit"})),s.createElement("td",null,s.createElement("p",null,e.name)),s.createElement("td",null,s.createElement("p",null,s.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"EMPLOYEE",school:e.name})}},"Agera som lärare på denna skola"))),s.createElement("td",null,s.createElement("p",null,s.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"STUDENT",school:e.name,url:n})}},"Agera som elev på denna skola"))))}))):s.createElement("p",null,s.createElement(f.a,null),"V.g. vänta medan skolor laddas")),s.createElement("br",null),t&&c&&s.createElement(d.a,{to:"/schools/new/"+e.type,className:"btn"},"gymnasium"==e.type?Object(l.a)(r||(r=o.e(["Lägg till gymnasieskola"],["Lägg till gymnasieskola"]))):"primary"==e.type?Object(l.a)(a||(a=o.e(["Lägg till grundskola"],["Lägg till grundskola"]))):Object(l.a)(i||(i=o.e(["Lägg till skola"],["Lägg till skola"])))))};n.d(t,"a",function(){return p}),n.d(t,"b",function(){return b});var p=function(e){return s.createElement("div",{style:{outline:0}},s.createElement(c.a,{title:"Skolor",activePage:"schools",routes:{feedback:e.feedbackUrl}}),s.createElement(b,{viewCourseUrl:e.viewCourseUrl}))},b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schools:null},n}return o.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(l.n)(e.message||e)})},t.prototype.load=function(){return o.b(this,void 0,void 0,function(){var e;return o.d(this,function(t){switch(t.label){case 0:return[4,u.a.kedBackendClient.list("schools")];case 1:return e=t.sent(),this.setState({schools:e}),[2]}})})},t.prototype.render=function(){var e=this.state.schools;return e&&e.sort(Object(l.g)("name")),s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},e?s.createElement(s.Fragment,null,s.createElement("div",null,s.createElement("h2",null,"Gymnasieskolor"),s.createElement(h,{schools:e.filter(function(e){return e.isGymnasium}),viewCourseUrl:this.props.viewCourseUrl,type:"gymnasium"})),s.createElement("div",null,s.createElement("h2",null,"Grundskolor"),s.createElement(h,{schools:e.filter(function(e){return e.isPrimarySchool}),viewCourseUrl:this.props.viewCourseUrl,type:"primary"}))):s.createElement(f.a,null)))},t}(s.Component)},function(e,t){},,function(e,t,n){"use strict";function r(e){return(e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)})}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(34),i=n(10),o=n(45);function s(e){var t,n=e.map(function(e){return e.startsWith("course:")?e:"course:"+e});return 0===n.length?new a.a([]):(t=i.c.courses.include("abilities","centralContent","knowledgeRequirements")).tags.apply(t,r.g(n)).filter(function(e){return e.isTemplate}).map(function(e){return r.a({},e,{abilities:Object(o.a)(e.abilities,e.abilitiesOrder),centralContent:Object(o.a)(e.centralContent,e.centralContentOrder),knowledgeRequirements:Object(o.a)(e.knowledgeRequirements,e.knowledgeRequirementsOrder)})}).toValue()}},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),i=n(37),o=n(13),s=n(3),c=Object(i.b)(function(){return s.a.kedBackendClient.http.status.combineLatest(s.a.edsClient.http.status).map(function(e){var t=r.f(e,2),n=t[0],i=t[1];return a.createElement("div",{className:"loading-indicator"},a.createElement("div",{className:"indicator"},n.numOutstandingOperations>0||i.numOutstandingOperations>0?a.createElement(o.a,null):void 0))})})},,,,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(2),o=n(3),s=n(12),c=n.n(s);function u(e){switch(e.trim()){case"3":case"1-3":return["1-3"];case"6":case"4-6":return["4-6"];case"7-9":case"9":return["7-9"];case"1":case"1s":return["1-3"];case"1-6":return["1-3","4-6"];case"4-9":return["4-6","7-9"];default:throw new Error("Unexpected year in Skolverket XML: "+e+". Expecting 3,6,9 or 1-3, 4-6, 7-9")}}var l=n(5);function d(e,t){var n,a,i=new Set,o=new Map,s=new Set;t.forEach(function(t){if(t=t.trim(),e.has(t))o.set(t,e.get(t));else{var n=Object(l.h)();console.log("New id: "+n+". Text: "+t),o.set(t,n),s.add(n)}});try{for(var c=r.h(e.entries()),u=c.next();!u.done;u=c.next()){var d=r.f(u.value,2),m=d[0],f=d[1];-1===t.indexOf(m)&&i.add(f)}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}return{removedIds:i,newTexts:o,idsToAdd:s}}var m=1;var f=new Set("alla allt att av blev bli blir blivit de dem den denna deras dess dessa det detta dig din dina ditt du där då efter ej eller en er era ert ett från för ha hade han hans har henne hennes hon honom hur här i icke ingen inom inte jag ju kan kunde man med mellan men mig min mina mitt mot mycket ni nu när någon något några och om oss på samma sedan sig sin sina sitta själv skulle som så sådan sådana sådant till under upp ut utan vad var vara varför varit varje vars vart vem vi vid vilka vilkas vilken vilket vår våra vårt än är åt över kring".split(" "));function h(e){return new Set(function(e){var t=document.createElement("div");return t.innerHTML=e,""+t.innerText}(e).replace(/[^\w\såäö]/gi,"").toLowerCase().split(/\s/).map(function(e){return e.trim()}).filter(function(e){return!!e}).filter(function(e){return!f.has(e)}))}function p(e,t,n,a,i){var o=new Map;e=e.map(function(e){return r.a({},e,{name:e.name.trim()})}).filter(function(e){return!!e.name});var s=new Map;t.forEach(function(e){return s.set(e.html,e)});var c=new Map;e.forEach(function(e){return c.set(e.name,e)}),e=e.filter(function(e){return!s.has(e.name)}),t=t.filter(function(e){return!c.has(e.html)}),e.forEach(function(e){return o.set(e.id,{gradeStep:e.gradeStep,oldText:e.name,lexemes:h(e.name),matchLevel:0})});for(var u=[];t.length>0;){var l=t[0],d=p(l);if(d){d.newText&&t.push({html:d.newText,gradeStep:d.gradeStep});var f=o.get(d.id);f.newText=l.html,f.matchLevel=d.myMatchLevel,f.newId=n.get(l.html)}else u.push(l);t.shift()}return u.forEach(function(e){o.set("fictiveOldId"+ ++m,{newId:n.get(e.html),newText:e.html,gradeStep:e.gradeStep,matchLevel:0,lexemes:new Set})}),o.forEach(function(e){var t=e.oldText,n=e.newText;t&&n&&r.g(h(t)).join(" ")===r.g(h(n)).join(" ")&&(e.isTypoFix=!0)}),console.log("IdsToMigrate",r.g(o.values()).map(function(e){var t=e.oldText,n=e.lexemes;return r.g(n).join(" ")+": "+t})),o;function p(e){var t=h(e.html);return r.g(o.entries()).filter(function(t){var n=r.f(t,2);n[0];return n[1].gradeStep===e.gradeStep}).map(function(e){var n=r.f(e,2),a=n[0],i=n[1],o=i.gradeStep,s=i.matchLevel,c=i.newText,u=i.lexemes;return{id:a,gradeStep:o,matchLevel:s,newText:c,myMatchLevel:b(t,u)}}).filter(function(e){return e.myMatchLevel>=50&&(!e.matchLevel||e.matchLevel<e.myMatchLevel)}).sort(function(e,t){return t.myMatchLevel-e.myMatchLevel})[0]}function b(e,t){if(0===e.size||0===t.size)return 0;var n=0,r=0;return e.forEach(function(e){t.has(e)&&++n}),t.forEach(function(t){e.has(t)&&++r}),Math.round(100*Math.max(n/e.size,r/t.size))}}function b(e,t,n,a){return r.b(this,void 0,void 0,function(){function s(e,t,r){var i=!V.has(e.name);V.add(e.name),z.forEach(function(t,n){var r=t.newId,i=t.oldText;a.push({mutations:function(t){i&&t.unlink2("courses",e.id,"abilities",n),r&&t.link2("courses",e.id,"abilities",r)}})}),e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)});var o=r.ccsToMigrate,s=r.krsToMigrate;o.forEach(function(t,n){var r=t.newId,o=t.newText,s=t.oldText,c=t.isTypoFix;a.push({change:i&&(s?o?c?"Tryckfelsrättning Centralt Innehåll":"Uppdaterat Centralt Innehåll":"Borttaget Centralt Innehåll":"Nytt Centralt Innehåll"),content:"<h4>"+e.name+"</h4><strike>"+(s||"")+"</strike><br/>"+(o||""),mutations:function(t){if(r&&M.has(r)&&!W.has(r)){var a={id:r,name:o,acl:["role:USER:R"],dateTime:Date.now()};t.add("central-content",a),W.add(r)}s&&t.unlink2("courses",e.id,"centralContent",n),r&&t.link2("courses",e.id,"centralContent",r)}})}),e.centralContentOrder=t.centralContent.map(function(e){var t=e.html;return U.get(t)}),s.forEach(function(t,n){var r=t.newId,o=t.newText,s=t.gradeStep,c=t.oldText,u=t.isTypoFix;a.push({change:i&&(c?o?u?"Tryckfelsrättning Kunskapskrav":"Uppdaterat Kunskapskrav":"Borttaget Kunskapskrav":"Nytt Kunskapskrav"),content:"<h4>"+e.name+"</h4><strike>"+(c||"")+"</strike><br/>"+(o||""),mutations:function(t){if(r&&K.has(r)&&!W.has(r)){var a={id:r,name:o,gradeStep:s,acl:["role:USER:R"],dateTime:Date.now()};console.log("Adding Knowledge-Requirement "+r+": "+o),t.add("knowledge-requirements",a),W.add(r)}c&&t.unlink2("courses",e.id,"knowledgeRequirements",n),r&&t.link2("courses",e.id,"knowledgeRequirements",r)}})}),e.knowledgeRequirementsOrder=t.knowledgeRequirements.map(function(e){return F.get(e.html)}),(z.size>0||o.size>0||s.size>0)&&a.push({change:e.isTemplate?"Uppdaterad Kursmall":"Uppdaterad Kursinstans",content:e.isTemplate?""+e.name:e.name+". Skola: "+(e.school||"ej angiven")+". Beskrivning: "+(e.description||""),mutations:function(t){return t.put("courses",e)}})}function c(){return r.b(this,void 0,void 0,function(){function e(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return 0===e.length?[2,[]]:(new Map,console.log("Number of ids: "+e.length),[4,o.a.kedBackendClient.list("tasks",r.a({},t,{hasEdgesTo:e}))]);case 1:return[2,n.sent()]}})})}var t,n,s,c,u,l,d,m,f;return r.d(this,function(o){switch(o.label){case 0:return s=r.g(z.keys(),Object(i.k)(G.map(function(e){return r.g(e.ccsToMigrate.keys(),e.krsToMigrate.keys())}))).filter(function(e){return!e.startsWith("fictiveOldId")}),c=Date.now(),[4,e(s,{include:["abilities","knowledgeRequirements","centralContent"],flags:["includeIdsOnly"]})];case 1:u=o.sent(),l=function(e){var t,n,i,o,s,u,l,d,m=e.migratedTexts||{abilities:{},centralContent:{},knowledgeRequirements:{}};e.migratedTexts={abilities:{},centralContent:{},knowledgeRequirements:{}};var f=[],h=[],p=function(t){var n=z.get(t);if(n){var r=n.newId,a=n.newText,i=n.isTypoFix,o=n.oldText,s=t;m.abilities[t]&&(o=m.abilities[t].oldText,s=m.abilities[t].oldId),r&&o!==a&&(i||(e.migratedTexts.abilities[r]={oldId:s,oldText:o,importDate:c})),f.push(function(n){n.unlink2("tasks",e.id,"abilities",t),r&&n.link2("tasks",e.id,"abilities",r)}),h.push("<strike>"+o+"</strike>"),r&&h.push(a)}};try{for(var b=r.h(e.abilities),g=b.next();!g.done;g=b.next()){p(g.value.id)}}catch(e){t={error:e}}finally{try{g&&!g.done&&(n=b.return)&&n.call(b)}finally{if(t)throw t.error}}var v=new Set(e.tags?e.tags.filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)}):[]),y=new Set;try{for(var k=r.h(G),E=k.next();!E.done;E=k.next()){var w=E.value,T=w.krsToMigrate,S=w.ccsToMigrate,O=w.courseCode;if(0===v.size||v.has(O)){var I=function(t){var n=S.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,o=n.isTypoFix,s=t;m.centralContent[t]&&(i=m.centralContent[t].oldText,s=m.centralContent[t].oldId),r&&i!==a&&(o||(e.migratedTexts.centralContent[r]={oldId:s,oldText:i,importDate:c})),r&&y.has(r)||(f.push(function(n){n.unlink2("tasks",e.id,"centralContent",t),r&&n.link2("tasks",e.id,"centralContent",r)}),h.push("<strike>"+i+"</strike>"),r&&(h.push(a),y.add(r)))}};try{for(var j=r.h(e.centralContent),C=j.next();!C.done;C=j.next()){I(C.value.id)}}catch(e){s={error:e}}finally{try{C&&!C.done&&(u=j.return)&&u.call(j)}finally{if(s)throw s.error}}var N=function(t){var n=T.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,o=n.isTypoFix,s=t;m.knowledgeRequirements[t]&&(i=m.knowledgeRequirements[t].oldText,s=m.knowledgeRequirements[t].oldId),r&&i!==a&&(o||(e.migratedTexts.knowledgeRequirements[r]={oldId:s,oldText:i,importDate:c})),r&&y.has(r)||(f.push(function(n){n.unlink2("tasks",e.id,"knowledgeRequirements",t),r&&n.link2("tasks",e.id,"knowledgeRequirements",r)}),h.push("<strike>"+i+"</strike>"),r&&(h.push(a),y.add(r)))}};try{for(var D=r.h(e.knowledgeRequirements),x=D.next();!x.done;x=D.next()){N(x.value.id)}}catch(e){l={error:e}}finally{try{x&&!x.done&&(d=D.return)&&d.call(D)}finally{if(l)throw l.error}}}}}catch(e){i={error:e}}finally{try{E&&!E.done&&(o=k.return)&&o.call(k)}finally{if(i)throw i.error}}a.push({change:"Migrerad Uppgift",content:"<h4>"+e.name+" "+(e.school?"("+e.school+") ":"(skola ej angiven)")+"</h4>\n          <p>Kurskod: "+r.g(v).join(",")+"</p>\n          "+h.map(function(e){return"<p>"+e+"</p>"}).join(""),mutations:function(t){t.put("tasks",e),f.forEach(function(e){return e(t)})}})};try{for(d=r.h(u),m=d.next();!m.done;m=d.next())f=m.value,l(f)}catch(e){t={error:e}}finally{try{m&&!m.done&&(n=d.return)&&n.call(d)}finally{if(t)throw t.error}}return[2]}})})}var u,l,m,f,h,b,g,v,y,k,E,w,T,S,O,I,j,C,N,D,x,R,L,P,A,q,_,U,M,B,F,K,z,G,W,V,Z,Q,Y,$,H,J;return r.d(this,function(o){switch(o.label){case 0:E=new Map,w=e.abilitiesOrder?e.abilitiesOrder.map(function(t){return e.abilities.find(function(e){return e.id===t})}):e.abilities;try{for(T=r.h(w),S=T.next();!S.done;S=T.next())O=S.value,E.set(O.name.trim(),O.id)}catch(e){u={error:e}}finally{try{S&&!S.done&&(l=T.return)&&l.call(T)}finally{if(u)throw u.error}}try{for(I=r.h(t),j=I.next();!j.done;j=I.next()){H=j.value.template;try{for(C=r.h(H.centralContent),N=C.next();!N.done;N=C.next())D=N.value,E.set(D.name.trim(),D.id)}catch(e){h={error:e}}finally{try{N&&!N.done&&(b=C.return)&&b.call(C)}finally{if(h)throw h.error}}try{for(x=r.h(H.knowledgeRequirements),R=x.next();!R.done;R=x.next())L=R.value,E.set(L.name.trim(),L.id)}catch(e){g={error:e}}finally{try{R&&!R.done&&(v=x.return)&&v.call(x)}finally{if(g)throw g.error}}}}catch(e){m={error:e}}finally{try{j&&!j.done&&(f=I.return)&&f.call(I)}finally{if(m)throw m.error}}P=d(E,n.abilities),A=P.newTexts,q=P.idsToAdd,_=d(E,Object(i.k)(n.courses.map(function(e){return e.centralContent.map(function(e){return e.html})}))),U=_.newTexts,M=_.idsToAdd,B=d(E,Object(i.k)(n.courses.map(function(e){return e.knowledgeRequirements.map(function(e){return e.html})}))),F=B.newTexts,K=B.idsToAdd,console.log("Abilities to add: "+q.size),console.log("CCs to add: "+M.size),console.log("KRs to add: "+K.size),z=p(w,n.abilities.map(function(e){return{html:e}}),A),G=t.map(function(e,t){var r=e.template;console.log("Course: "+r.name);var a=n.courses.find(function(e){return e.name===r.name})||n.courses.find(function(e){return e.code===r.code});return{courseCode:r.code,ccsToMigrate:a?p(r.centralContent,a.centralContent.map(function(e){return{html:e.html}}),U,0,r.name):new Map,krsToMigrate:a?p(r.knowledgeRequirements,a.knowledgeRequirements,F,0,r.name):new Map}}),z.forEach(function(t,n){var r=t.newText,i=t.newId,o=t.oldText,s=t.isTypoFix;a.push({change:o?r?s?"Tryckfelsrättning Förmåga":"Uppdaterad Förmåga":"Borttagen Förmåga":"Ny Förmåga",content:"<strike>"+(o||"")+"</strike><br/>"+(r||""),mutations:function(t){if(i&&q.has(i)){var a={id:i,name:r,acl:["role:USER:R"],dateTime:Date.now()};t.add("abilities",a)}o&&t.unlink2("subjects",e.id,"abilities",n),i&&t.link2("subjects",e.id,"abilities",i)}})}),(!e.abilitiesOrder||z.size>0)&&(e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)}),a.push({mutations:function(t){return t.put("subjects",e)},change:e.abilitiesOrder?null:"Inför en ordnad lista på förmågor i databasen"})),W=new Set,a.push({mutations:function(){return W.clear()}}),V=new Set,a.push({mutations:function(){return V.clear()}}),Z=function(e,t){var a,i,o=n.courses.find(function(t){return t.name===e.name})||n.courses.find(function(t){return t.code===e.code}),c=G.find(function(t){return t.courseCode===e.code}),u=c.ccsToMigrate,l=c.krsToMigrate;try{for(var d=r.h(t),m=d.next();!m.done;m=d.next()){s(m.value,o,{ccsToMigrate:u,krsToMigrate:l})}}catch(e){a={error:e}}finally{try{m&&!m.done&&(i=d.return)&&i.call(d)}finally{if(a)throw a.error}}};try{for(Q=r.h(t),Y=Q.next();!Y.done;Y=Q.next())$=Y.value,H=$.template,J=$.instances,Z(H,J)}catch(e){y={error:e}}finally{try{Y&&!Y.done&&(k=Q.return)&&k.call(Q)}finally{if(y)throw y.error}}return[4,c()];case 1:return o.sent(),[2]}})})}var g=n(18);function v(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,s=this;return r.d(this,function(c){switch(c.label){case 0:return[4,o.a.kedBackendClient.get("subjects",e.id,{include:["courseTemplates","abilities"]})];case 1:return e=c.sent(),[4,Promise.all(e.courseTemplates.map(function(e){return Object(g.e)(e.id,{include:["centralContent","knowledgeRequirements"]})}))];case 2:return a=c.sent(),console.log("Subject: "+e.name+". Courses: "+a.map(function(e){return e.name})),[4,Promise.all(a.map(function(e){return r.b(s,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t={template:e},[4,o.a.kedBackendClient.list("courses",{name:e.name,include:["abilities"],flags:["includeIdsOnly"]})];case 1:return[2,(t.instances=n.sent(),t)]}})})}))];case 3:return i=c.sent(),[4,b(e,i,t,n)];case 4:return c.sent(),[2]}})})}var y,k,E,w=function(e){function t(t){var n=e.call(this,t)||this;return n.coursesElems={},n.centralContentElems=[],n.knowledgeRequirementElems=[],n.state={showFullText:!1,changes:[],isWorking:!0,isImporting:!1},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:this.addClassesForCherryPickedElements(),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,this.diffWithExisting()];case 2:return e=r.sent(),t=e.changes,n=e.subjectToImport,this.setState({changes:t,subjectToImport:n}),[3,5];case 3:return a=r.sent(),this.setState({error:""+a}),[3,5];case 4:return this.setState({isWorking:!1}),[7];case 5:return[2]}})})},t.prototype.addClassesForCherryPickedElements=function(){var e=c()(this.purposeElem).find("li").first().parent().children("li");e.addClass("ability");var t=c()(this.centralContentElems).find("li");t.addClass("central-content");var n=c()(this.knowledgeRequirementElems).find("p");n.addClass("knowledge-requirement"),c()([e,t,n]).addClass("marked-area")},t.prototype.cherryPickData=function(){var e=this,t=this.props.subject,n=Array.from(c()(this.purposeElem).find("li").first().parent().children("li")).map(function(e,t){return(t+1+". "+c()(e).html()).trim()}).filter(function(e){return!!e});return{name:t.name,code:t.code,schoolType:t.schoolType,abilities:n,courses:Object.keys(this.coursesElems).map(function(t){return e.coursesElems[t]}).map(function(e){var t=e.course,n=e.elem;return{name:t.name,year:t.year,code:t.code,points:t.points,centralContent:Array.from(c()(n).find(".central-content")).map(function(e){return{html:c()(e).html().trim(),group:c()(e).parent("ul").prev("h4").text().trim()}}).filter(function(e){return!!e.html}),knowledgeRequirements:Array.from(c()(n).find(".grade-step-none .knowledge-requirement")).map(function(e){return c()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:null,html:e}}).concat(Array.from(c()(n).find(".grade-step-E .knowledge-requirement")).map(function(e){return c()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"E",html:e}}).concat(Array.from(c()(n).find(".grade-step-C .knowledge-requirement")).map(function(e){return c()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"C",html:e}})).concat(Array.from(c()(n).find(".grade-step-A .knowledge-requirement")).map(function(e){return c()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"A",html:e}})))}})}},t.prototype.diffWithExisting=function(){return r.b(this,void 0,void 0,function(){function e(){var e=h;return h+=2,e}var t,n,a,i,s,c,u,d,m,f,h,p,b,g,y,k,E,w,T,S,O,I=this;return r.d(this,function(j){switch(j.label){case 0:return s=this.cherryPickData(),c=[],[4,o.a.kedBackendClient.list("subjects")];case 1:return u=j.sent(),d=u.filter(function(e){return e.code===I.props.subject.code})[0],m=[],f=[],h=Date.now(),d?[4,v(d,s,c)]:[3,3];case 2:return j.sent(),[3,4];case 3:p=d={id:Object(l.h)(),schoolType:s.schoolType,tags:["schoolType:"+s.schoolType],acl:["role:USER:R"],code:s.code,name:s.name,abilitiesOrder:[],publishable:!1,dateTime:e()},c.push({change:"Nytt ämne",content:s.name+" ("+s.code+")",mutations:function(e){return e.add("subjects",p)}}),b=[],g=function(t){var n={id:Object(l.h)(),name:t,acl:["role:USER:R"],dateTime:e()};b.push(n),c.push({change:"Ny förmåga",content:t,mutations:function(e){e.add("abilities",n),e.link("subjects",p.id,"abilities",n.id,"abilities")}})};try{for(y=r.h(s.abilities),k=y.next();!k.done;k=y.next())E=k.value,g(E)}catch(e){t={error:e}}finally{try{k&&!k.done&&(n=y.return)&&n.call(y)}finally{if(t)throw t.error}}p.abilitiesOrder=b.map(function(e){return e.id}),w=function(t){var n,a,i,s,u,d,h={id:Object(l.h)(),subjectCode:p.code,schoolType:p.schoolType,tags:["sub:"+p.code,"course:"+t.code,"schoolType:"+p.schoolType],dateTime:e(),isTemplate:!0,acl:["role:EMPLOYEE:R"],name:t.name,code:t.code,points:t.points,modules:[],subjectId:p.id,resources:[],createdBy:{name:o.a.currentUser.displayName,url:"mailto:"+o.a.currentUser.mail},createdDate:Date.now(),knowledgeRequirementsOrder:[],centralContentOrder:[],abilitiesOrder:b.map(function(e){return e.id})};t.year&&(h.schoolGrade=t.year),c.push({change:"Ny kurs",content:t.name,mutations:function(e){e.add("courses",h),e.link("subjects",p.id,"courses",h.id,"courseTemplates")}});var g=function(t,n){var r=m.filter(function(e){return e.name===n})[0];r?c.push({mutations:function(e){e.link("courses",h.id,"central-content",r.id,"centralContent")}}):(r={id:Object(l.h)(),dateTime:e(),name:n,acl:["role:USER:R"]},t&&(r.group=t),m.push(r),c.push({change:"Nytt centralt innehåll",content:"<h4>"+t+"</h4>"+n,mutations:function(e){e.add("central-content",r),e.link("courses",h.id,"central-content",r.id,"centralContent")}})),h.centralContentOrder.push(r.id)};try{for(var v=r.h(t.centralContent),y=v.next();!y.done;y=v.next()){var k=y.value;g(k.group,k.html)}}catch(e){n={error:e}}finally{try{y&&!y.done&&(a=v.return)&&a.call(v)}finally{if(n)throw n.error}}var E=function(t){var n=f.filter(function(e){return e.name===t.html&&e.gradeStep===t.gradeStep})[0];n?c.push({mutations:function(e){e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}}):(n={id:Object(l.h)(),dateTime:e(),name:t.html,gradeStep:t.gradeStep,acl:["role:USER:R"]},f.push(n),c.push({change:"Nytt kunskapskrav för betyget "+t.gradeStep,content:t.html,mutations:function(e){e.add("knowledge-requirements",n),e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}})),h.knowledgeRequirementsOrder.push(n.id)};try{for(var w=r.h(t.knowledgeRequirements),T=w.next();!T.done;T=w.next()){E(T.value)}}catch(e){i={error:e}}finally{try{T&&!T.done&&(s=w.return)&&s.call(w)}finally{if(i)throw i.error}}var S=function(e){c.push({mutations:function(t){t.link("courses",h.id,"abilities",e.id,"abilities")}})};try{for(var O=r.h(b),I=O.next();!I.done;I=O.next()){S(I.value)}}catch(e){u={error:e}}finally{try{I&&!I.done&&(d=O.return)&&d.call(O)}finally{if(u)throw u.error}}};try{for(T=r.h(s.courses),S=T.next();!S.done;S=T.next())O=S.value,w(O)}catch(e){a={error:e}}finally{try{S&&!S.done&&(i=T.return)&&i.call(T)}finally{if(a)throw a.error}}j.label=4;case 4:return[2,{changes:c,subjectToImport:s}]}})})},t.prototype.cancel=function(){this.props.onCancel()},t.prototype.import=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:this.setState({isWorking:!0,isImporting:!0}),e=this.state.changes.map(function(e){return e.mutations}),t.label=1;case 1:return t.trys.push([1,,3,4]),[4,o.a.kedBackendClient.do(function(t){e.forEach(function(e){return e(t)})})];case 2:return t.sent(),[3,4];case 3:return this.setState({isWorking:!1,isImporting:!1}),[7];case 4:return this.props.onImportSuccess(this.props.subject.name),[2]}})})},t.prototype.fixL=function(e){return e},t.prototype.render=function(){var e=this,t=this.state.subjectToImport,n=this.props.subject;return a.createElement("div",null,a.createElement("h1",null,Object(i.a)(y||(y=r.e(["Uppladdat Ämne ",""],["Uppladdat Ämne ",""])),t?t.name:"")),this.state.error?a.createElement("p",null,"Fel: ",this.state.error):this.state.isWorking?a.createElement("p",null,"Arbetar..."):this.state.isImporting?a.createElement("p",null,"Importerar..."):this.state.changes.every(function(e){return!e.change})?a.createElement("div",null,a.createElement("p",null,"Kunde inte finna några förändringar från befintligt data. Klicka OK för att avbryta och återgå."),a.createElement("button",{onClick:function(){return e.cancel()}}," OK ")):a.createElement("div",null,a.createElement("table",{style:{border:"1px solid gray",padding:"2px"}},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{colSpan:2},"Granskning av ändringar i grund-data")),a.createElement("tr",null,a.createElement("th",null,"Ändring"),a.createElement("th",null,"Innehåll"))),a.createElement("tbody",null,this.state.changes.filter(function(e){return e.change}).map(function(e,t){return a.createElement("tr",{key:t},a.createElement("td",{style:{padding:"2px"}},e.change),a.createElement("td",{style:{padding:"2px"},dangerouslySetInnerHTML:{__html:e.content}}))}))),a.createElement("button",{onClick:function(){return e.cancel()},disabled:this.state.isImporting},"Avbryt"),a.createElement("button",{onClick:function(){return e.import()},disabled:this.state.isImporting},"Importera"),a.createElement("br",null)),a.createElement("button",{onClick:function(){return e.setState({showFullText:!e.state.showFullText})}},this.state.showFullText?Object(i.a)(k||(k=r.e(["Dölj nedan"],["Dölj nedan"]))):Object(i.a)(E||(E=r.e(["Visa hela texten från Skolverket"],["Visa hela texten från Skolverket"])))),a.createElement("table",{style:{display:this.state.showFullText?"":"none"}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Namn"),a.createElement("td",null,n.name)),a.createElement("tr",null,a.createElement("th",null,"Ämneskod"),a.createElement("td",null,n.code)),a.createElement("tr",null,a.createElement("th",null,"Syfte"),a.createElement("td",{ref:function(t){return e.purposeElem=t},dangerouslySetInnerHTML:{__html:this.fixL(n.purpose)}})),a.createElement("tr",null,a.createElement("th",null,"Kurser"),a.createElement("td",null,n.courses.map(function(t){return a.createElement("table",{key:t.code,ref:function(n){return e.coursesElems[t.code]={course:t,elem:n}}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Kursens namn"),a.createElement("td",null,t.name)),a.createElement("tr",null,a.createElement("th",null,"Kurskod"),a.createElement("td",null,t.code)),a.createElement("tr",null,a.createElement("th",null,"Poäng"),a.createElement("td",null,t.points)),a.createElement("tr",null,a.createElement("th",null,"Centralt innehåll"),a.createElement("td",{ref:function(t){return e.centralContentElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.centralContent)}})),t.knownledgeRequirements.some(function(e){return!e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav utan betygsättning"),a.createElement("td",{className:"grade-step-none",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return!e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"E"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg E"),a.createElement("td",{className:"grade-step-E",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"E"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"C"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg C"),a.createElement("td",{className:"grade-step-C",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"C"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"A"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg A"),a.createElement("td",{className:"grade-step-A",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"A"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0))}))))))},t}(a.Component),T=(n(102),n(142)),S=n(13);n.d(t,"a",function(){return D});var O,I,j,C,N,D=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,gymnasiumSubjects:[],primarySchoolSubjects:[],uploadedSubject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,o.a.kedBackendClient.list("subjects")];case 1:return(e=r.sent()).sort(Object(i.g)("name")),t=e.filter(function(e){return"primary"!==e.schoolType}),n=e.filter(function(e){return"primary"===e.schoolType}),this.setState({gymnasiumSubjects:t,primarySchoolSubjects:n,isListingSubjects:!1}),[2]}})})},t.prototype.handleFileSelect=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,o,s,l,d,m,f,h,p,b,v,y,k,E,w;return r.d(this,function(T){switch(T.label){case 0:return e.stopPropagation(),e.preventDefault(),t=e.dataTransfer.files,[4,Object(g.f)(t[0])];case 1:if(n=T.sent(),a=c()(c.a.parseXML(n)),o=a.find("subject>originatorTypeOfSchooling").text().trim()||a.find("subject>typeOfSchooling").text().trim(),"gymnasium"===("COMPULSORY_SCHOOL"===o?"primary":"UPPER_SECONDARY_EDUCATION"===o?"gymnasium":null)){for(w={name:a.find("subject>name").text().trim(),code:a.find("subject>code").text().trim(),purpose:a.find("subject>purpose").text().trim(),courses:[],schoolType:"gymnasium"},s=a.find("subject>courses"),l=0;l<s.length;++l)d=c()(s[l]),m=[].slice.call(d.find("knowledgeRequirements")).map(function(e){return{gradeStep:c()(e).find("gradeStep").text().trim(),text:c()(e).find("text").text().trim()}}),w.courses.push({name:d.find("name").text().trim(),code:d.find("code").text().trim(),centralContent:d.find("centralContent").text().trim(),points:parseInt(d.find("point").text().trim()),knownledgeRequirements:m});this.setState({uploadedSubject:w})}else f=Object(i.k)(Array.from(a.find("subject>centralContent")).map(function(e){var t=c()(e).find("year").text().trim();if(c()(e).find("typeOfCentralContent").text().trim())throw new Error(Object(i.a)(O||(O=r.e(["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."]))));return u(t).map(function(t){return{year:t,text:c()(e).find("text").text().trim()}})})),h=Object(i.k)(Array.from(a.find("subject>knowledgeRequirement")).map(function(e){var t=c()(e).find("year").text().trim();if(c()(e).find("typeOfRequirement").text().trim())throw new Error(Object(i.a)(I||(I=r.e(["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."]))));return u(t).map(function(t){return{year:t,text:c()(e).find("text").text().trim(),gradeStep:c()(e).find("gradeStep").text().trim()}})})),p=Object(i.b)(f,function(e){return e.year}),b=Object(i.b)(h,function(e){return e.year}),v=a.find("subject>name").text().trim(),y=a.find("subject>code").text().trim(),k=a.find("subject>purpose").text().trim(),E=["1-3","4-6","7-9"].map(function(e){return{name:v+" "+e,code:y+"|"+e,points:0,year:e,centralContent:(p[e]||[]).map(function(e){return e.text}).join("\n"),knownledgeRequirements:(b[e]||[]).map(function(e){return{gradeStep:e.gradeStep,text:e.text}})}}),w={name:v,code:y,purpose:k,schoolType:"primary",courses:E},this.setState({uploadedSubject:w});return[2]}})})},t.prototype.onImportSuccess=function(e){Object(i.o)(Object(i.a)(j||(j=r.e(["Importen av "," lyckades"],["Importen av "," lyckades"])),e)),this.setState({uploadedSubject:null}),this.load()},t.prototype.render=function(){var e=this,t=this.props.linkPrefix;return a.createElement("div",null,this.state.uploadedSubject?a.createElement(w,{onCancel:function(){return e.setState({uploadedSubject:null})},onImportSuccess:function(t){return e.onImportSuccess(t)},subject:this.state.uploadedSubject}):this.state.isListingSubjects?a.createElement("div",null,a.createElement("p",null,a.createElement(S.a,null),"Var god vänta medan ämnen hämtas...")):a.createElement("div",null,a.createElement("h2",null,Object(i.a)(C||(C=r.e(["Gymnasieämnen"],["Gymnasieämnen"])))),a.createElement("ul",null,this.state.gymnasiumSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(T.a,{to:t+e.id},e.name))})),a.createElement("h2",null,Object(i.a)(N||(N=r.e(["Grundskoleämnen"],["Grundskoleämnen"])))),a.createElement("ul",null,this.state.primarySchoolSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(T.a,{to:t+e.id},e.name))})),a.createElement("div",{className:"drop-zone",onDragOver:g.a,onDrop:function(t){return e.handleFileSelect(t)}},"Droppa Subject-fil här från skolverket (Hämtas från ",a.createElement("a",{href:"http://opendata.skolverket.se",target:"skolverket"},"opendata.skolverket.se"),")")))},t}(a.Component)},,,,function(e,t,n){var r={"./en-SG":80,"./en-SG.js":80,"./en-au":81,"./en-au.js":81,"./en-ca":82,"./en-ca.js":82,"./en-gb":83,"./en-gb.js":83,"./en-ie":84,"./en-ie.js":84,"./en-il":85,"./en-il.js":85,"./en-nz":86,"./en-nz.js":86,"./sv":87,"./sv.js":87};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=125},function(e,t){},function(e,t){},,,function(e,t,n){"use strict";var r=n(3),a=n(69),i=n(16),o=Object(i.b)(location.search).user;if(o){var s=a.a.find(function(e){return e.username===o});s&&(r.a.currentUser=s)}var c=Object(i.b)(location.search),u=c.role,l=c.school;r.a.currentUser&&(u&&(r.a.currentUser.roles=u.split(",")),l&&(r.a.currentUser.school=l))},,,,,,function(e,t,n){"use strict";function r(e){var t,n,r;document.write('<link rel="stylesheet" href="'+(t=e,n=location.protocol+"//"+location.host+location.pathname,r=n.lastIndexOf("/"),n.substr(0,r+1)+t)+'" />')}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";function r(e){var t=e.v1,n=e.versionFolder,r=e.version,a=e.includeCSS,i=e.NOCSS;i||t&&t.forEach(function(e){return a(e)});var o=parseInt(i);isNaN(o)&&(o=1);for(var s=o+1;s<=r;++s)a(n+"/v"+s+".css")}n.d(t,"a",function(){return r})},,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r,a,i,o,s,c,u,l,d,m,f,h,p,b,g,v,y,k,E,w,T,S,O,I,j,C,N=n(0),D=n.n(N),x=n(227),R=n(225),L=n(71),P=n(1),A=n(5),q=n(10),_=n(174),U=n(2),M=n(21),B=n(49),F=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courseName:"",courseType:"theme-course",subject:{subjectName:"",subjectCode:""}},n}return P.c(t,e),t.prototype.createCourse=function(){return P.b(this,void 0,void 0,function(){var e,t,n,i,o,s,c,u,l;return P.d(this,function(d){switch(d.label){case 0:return e=this.state,t=e.courseType,n=e.courseName,i=e.subject,o=Object(A.h)(),[4,q.b.standardSchool.load()];case 1:return s=d.sent(),c=s.officialBranchId,u=s.id,q.c.branches.addRelated(c,"approvedChildren",{id:Object(A.h)(),name:"draft",acl:["role:USER:R","schoolRole:standard/EMPLOYEE:S"],schoolId:u,treeParentId:c,tags:[o]}),l={id:o,acl:["schoolRole:standard/EMPLOYEE:S","role:USER:R"],name:n,tags:"step-course"===t?Object(B.c)([],[i.subjectCode]):[]},q.c.global.addRelated(q.d,"courseInstances","step-course"===t?P.a({},l,{type:t,description:Object(U.a)(r||(r=P.e(["Stegkurs"],["Stegkurs"]))),subject:i}):P.a({},l,{type:t,description:Object(U.a)(a||(a=P.e(["Temakurs"],["Temakurs"]))),subjects:[]})),this.setState({courseName:""}),[4,q.c.saveNow()];case 2:return d.sent(),this.props.history.push("/admin/courses/"+o+"/settings"),[2]}})})},t.prototype.isValidState=function(e){var t=this.state,n=t.courseName,r=t.courseType,a=t.subject,s=n&&"theme-course"===r||a.subjectCode;if(!s&&e){if(!n)return Object(U.a)(i||(i=P.e(["Kursens namn måste fyllas i"],["Kursens namn måste fyllas i"])));if(!a.subjectCode)return Object(U.a)(o||(o=P.e(["Ämne måste väljas för stegkurser"],["Ämne måste väljas för stegkurser"])))}return s},t.prototype.render=function(){var e=this,t=this.state,n=t.courseName,r=t.courseType,a=t.subject;return N.createElement("div",null,N.createElement("h2",null,"Skapa ny standardkurs"),N.createElement("hr",null),N.createElement("div",null,"Namn: ",N.createElement("input",{type:"text",value:n,onChange:function(t){return e.setState({courseName:t.target.value})}})),N.createElement("br",null),N.createElement("div",null,N.createElement("input",{type:"radio",name:"course-type",checked:"step-course"===r,onChange:function(t){return t.target.checked&&e.setState({courseType:"step-course"})}})," Stegkurs"),N.createElement("br",null),N.createElement("div",null,N.createElement("input",{type:"radio",name:"course-type",checked:"theme-course"===r,onChange:function(t){return t.target.checked&&e.setState({courseType:"theme-course"})}})," Temakurs"),N.createElement("br",null),"step-course"===r?N.createElement(N.Fragment,null,N.createElement("br",null),N.createElement("form",null,N.createElement("label",{className:"kclabel"},Object(U.a)(s||(s=P.e(["Ämne"],["Ämne"])))),N.createElement(M.a,null,q.c.subjects.tags("schoolType:primary").toValue().map(function(t){return N.createElement("select",{value:a.subjectCode,onChange:function(n){return e.setState({subject:t.filter(function(e){return e.code===n.target.value}).map(function(e){return{subjectCode:e.code,subjectName:e.name}})[0]})}},N.createElement("option",{value:""},Object(U.a)(c||(c=P.e(["Välj ämne"],["Välj ämne"])))),t.map(function(e){return N.createElement("option",{key:e.code,value:e.code},e.name)}))})))):null,N.createElement("div",null,N.createElement("button",{disabled:!this.isValidState(),className:["btn","btn-large",this.isValidState()?"":"disabled"].join(" "),onClick:function(){return e.isValidState()?e.createCourse():alert(e.isValidState(!0))}},"Skapa")))},t}(N.Component),K=Object(_.a)(F),z=n(66),G=n(142),W=function(e){var t=e.items,n=e.caption;return N.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},N.createElement("div",{className:"ked_boxed"},N.createElement("h3",null,n),N.createElement("div",{className:"taskContainer odd-even"},t.map(function(e){return N.createElement("div",{className:"schoolCourse",key:e.id},N.createElement("div",{className:["align-horizontal",e.$meta&&"entitymeta-"+e.$meta].join(" ")},N.createElement("div",{className:"horizontalItem top pull-right"},e.editLink.startsWith(":")?N.createElement("a",{href:e.editLink.substr(1),className:"editItem"}):N.createElement(G.a,{to:e.editLink,className:"editItem"})),N.createElement("div",{className:"horizontalItem top"},e.viewLink.startsWith(":")?N.createElement("a",{href:e.viewLink.substr(1)},e.name):N.createElement(G.a,{to:e.viewLink},e.name)),e.pills.map(function(e,t){return N.createElement("div",{key:t,className:"horizontalItem top"},N.createElement("div",{className:["pill"].concat(e.className).join(" ")},e.name))})),N.createElement("div",{className:"horizontalItem top"},N.createElement("p",null,e.description)),N.createElement("div",{className:"horizontalItem top"},N.createElement("p",{className:"small"},e.smallText)))}))))},V=n(37),Z=n(7),Q=n(14),Y=n(18),$=n(110),H=Object(V.b)(function(){return Object($.a)().orderBy("name").map(function(e){var t=e.id,n=e.$meta,r=e.name,a=e.description,i=e.tags,o=e.type,s=e.modifiedBy,c=e.modifiedDate;return{id:t,type:o,$meta:n,name:r,description:a,viewLink:":"+Object(Q.f)(Z.b.KED_SUBJECT_PLANNER_URL,{})+"#/standard/courses/"+t,editLink:"/admin/courses/"+t+"/settings",pills:i.filter(function(e){return"active"===e}).map(function(e){return{className:"active",name:Object(U.a)(u||(u=P.e(["Aktiv"],["Aktiv"])))}}),smallText:s&&c&&Object(U.a)(l||(l=P.e(["Senast redigerad av "," / ",""],["Senast redigerad av "," / ",""])),s.name,Object(Y.g)(c))}}).toValue().map(function(e){var t=e.filter(function(e){return"step-course"===e.type}),n=e.filter(function(e){return"theme-course"===e.type});return N.createElement(N.Fragment,null,N.createElement(W,{caption:"Stegkurser",items:t}),N.createElement(W,{caption:"Temakurser",items:n}))})}),J=n(226),X=n(3),ee=n(26),te=n(46),ne=n(33),re=n(224),ae=n(103),ie=n(13),oe=function(e){function t(t){var n=e.call(this,t)||this;return n.state={optionsVisible:!1},n}return P.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.selected,r=t.onChange,a=t.getOptions,i=this.state,o=i.optionsVisible,s=i.options,c=s&&s.filter(function(e){return!n.some(function(t){return t.key===e.key})});return D.a.createElement(D.a.Fragment,null,D.a.createElement("div",{className:"taskContainer"},n.map(function(e){var t=e.key,a=e.name;return D.a.createElement("div",{key:t,className:"align-horizontal"},D.a.createElement("div",{className:"horizontalItem top"},D.a.createElement("i",{className:"fa fa-remove hoverable",onClick:function(){return r(n.filter(function(e){return e.key!==t}))}}),a))})),D.a.createElement("span",{style:{outline:"none"},tabIndex:0,onBlur:function(t){return setTimeout(function(){return e.setState({optionsVisible:!1})},100)}},D.a.createElement("a",{className:"btn",onClick:function(){return P.b(e,void 0,void 0,function(){var e;return P.d(this,function(t){switch(t.label){case 0:if(o)return[2,this.setState({optionsVisible:!1})];if(this.setState({optionsVisible:!0}),this.state.options)return[3,4];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,a()];case 2:return e=t.sent(),this.setState({options:e}),[3,4];case 3:return t.sent(),this.setState({options:[{key:null,name:Object(U.a)(d||(d=P.e(["Ett fel har inträffat"],["Ett fel har inträffat"])))}]}),[3,4];case 4:return[2]}})})}},D.a.createElement("i",{className:"fa fa-plus","aria-hidden":!0})," ",Object(U.a)(m||(m=P.e(["Lägg till"],["Lägg till"])))),o?D.a.createElement(D.a.Fragment,null,D.a.createElement("br",null),c?D.a.createElement("select",{size:1===c.length?2:c.length,defaultValue:"",onChange:function(t){var a=t.target.value;r(n.concat({key:a,name:s.filter(function(e){return e.key===a}).map(function(e){return e.name})[0]})),e.setState({optionsVisible:!1})}},D.a.createElement("option",{style:{display:"none"},disabled:!0,key:"",value:""}),c.map(function(e){var t=e.key,n=e.name;return D.a.createElement("option",{key:t,value:t},n)})):D.a.createElement(ie.a,null)):void 0))},t}(D.a.Component),se=n(96),ce=n(36),ue=n(73),le=n(115),de=n(116),me=n(23),fe=n(62),he=n(55),pe=Object(V.b)(function(e){var t,n=e.repo,r=e.course,a=e.block,i=Object(le.a)(a.tags),o=i.map(function(e){return"course:"+e});return Object(de.a)(i).combineLatest((t=n.courseBlocks.hasEdgesFrom([r.id])).tags.apply(t,P.g(o)).include("abilities","centralContent","knowledgeRequirements").includeIdsOnly()).map(function(e){var t=P.f(e,2),r=t[0],i=t[1],o=Object(he.a)(r,i);return 0===r.length?D.a.createElement("p",null,Object(U.a)(f||(f=P.e(["Blocket är inte kopplad till någon årskurs"],["Blocket är inte kopplad till någon årskurs"])))):D.a.createElement("div",null,r.map(function(e){var t=e.id,i=e.name,s=e.abilities,c=e.centralContent,u=e.knowledgeRequirements;return D.a.createElement("div",{key:t},1===r.length?void 0:D.a.createElement("h1",null,i),D.a.createElement(me.a,{className:"larger",title:D.a.createElement("p",null,Object(U.a)(h||(h=P.e(["Välj blockets kunskapskrav"],["Välj blockets kunskapskrav"]))))},D.a.createElement("p",null,Object(U.a)(p||(p=P.e(["Markera de kunskapskrav som blocket ska täcka."],["Markera de kunskapskrav som blocket ska täcka."])))),D.a.createElement(M.a,null,n["knowledge-requirements"].hasEdgesFrom([a.id]).idsOnly().toValue().map(function(e){return D.a.createElement(ue.a,{knowledgeRequirements:u,markedIds:e.map(function(e){return e.id}),idsToMarkNotOk:o,markMode:!0,onMarkChanged:function(t,r){e.filter(function(e){return!u.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){n.courseBlocks.removeRelated(a.id,"knowledgeRequirements",e)});var i=u.filter(function(e){return e.id===t})[0];r?n.courseBlocks.addRelated(a.id,"knowledgeRequirements",i):n.courseBlocks.removeRelated(a.id,"knowledgeRequirements",i)}})}))),D.a.createElement(M.a,null,n.abilities.hasEdgesFrom([a.id]).idsOnly().toValue().map(function(e){return D.a.createElement(fe.a,{options:s,title:Object(U.a)(b||(b=P.e(["Välj blockets förmågor"],["Välj blockets förmågor"]))),markedIds:e.map(function(e){return e.id}),uncoveredIds:o,markMode:!0,onMarkChanged:function(t,r){e.filter(function(e){return!s.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){n.courseBlocks.removeRelated(a.id,"abilities",e)});var i=s.filter(function(e){return e.id===t})[0];r?n.courseBlocks.addRelated(a.id,"abilities",i):n.courseBlocks.removeRelated(a.id,"abilities",i)}})})),D.a.createElement(M.a,null,n["central-content"].hasEdgesFrom([a.id]).idsOnly().toValue().map(function(e){return D.a.createElement(fe.a,{options:c,title:Object(U.a)(g||(g=P.e(["Välj blockets centrala innehåll"],["Välj blockets centrala innehåll"]))),markedIds:e.map(function(e){return e.id}),uncoveredIds:o,markMode:!0,onMarkChanged:function(t,r){e.filter(function(e){return!c.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){n.courseBlocks.removeRelated(a.id,"centralContent",e)});var i=c.filter(function(e){return e.id===t})[0];r?n.courseBlocks.addRelated(a.id,"centralContent",i):n.courseBlocks.removeRelated(a.id,"centralContent",i)}})})))}))})}),be=function(e){var t=e.repo,n=e.course;return D.a.createElement("div",null,D.a.createElement("label",{className:"kclabel"},Object(U.a)(v||(v=P.e(["Kursblock"],["Kursblock"])))),n.blocks.sort(Object(U.g)("blockNo")).map(function(e,r){return D.a.createElement(ge,{key:e.id,block:e,course:n,repo:t,isLastBlock:r===n.blocks.length-1})}),D.a.createElement("button",{className:"btn",onClick:function(){return function(e,t){var n=t.blocks.sort(Object(U.g)("blockNo")).slice().pop(),r=n?n.blockNo+1:1,a=n?n.stepNumbers[n.stepNumbers.length-1]+1:1,i={id:Object(A.h)(),acl:["schoolRole:standard/EMPLOYEE:S","role:USER:R"],blockNo:r,locked:!0,name:"Block "+r,tags:P.g([t.id],t.tags.filter(function(e){return e.startsWith("course:")||e.startsWith("sub:")})),stepNumbers:[a,a+1,a+2,a+3,a+4]};e.courseInstances.addRelated(t.id,"blocks",i),i.stepNumbers.forEach(function(n){var r={id:Object(A.h)(),type:"step-course-tab",tabClass:"intro-tab",tabTitle:Object(U.a)(j||(j=P.e(["Introduktion"],["Introduktion"]))),name:Object(U.a)(C||(C=P.e(["Introduktion"],["Introduktion"]))),locked:!0,acl:["schoolRole:standard/EMPLOYEE:S","role:USER:R"],stepNo:n,order:0,tags:P.g([t.id],t.tags.filter(function(e){return e.startsWith("course:")||e.startsWith("sub:")}))};e.courseBlocks.addRelated(i.id,"tabs",r)})}(t,n)}},D.a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",Object(U.a)(y||(y=P.e(["Lägg till block"],["Lägg till block"])))),D.a.createElement("br",null))},ge=function(e){var t=e.block,n=e.course,r=e.repo,a=e.isLastBlock;return D.a.createElement(D.a.Fragment,null,D.a.createElement("div",{className:"ked_boxed",style:{position:"relative"}},D.a.createElement("h4",null,"Block ",t.blockNo),Object(U.a)(k||(k=P.e(["Steg"],["Steg"])))," ",D.a.createElement("div",{className:"btn-group"},t.stepNumbers.map(function(e){return D.a.createElement("a",{key:e,className:"btn btn-small step-button"},e)})),D.a.createElement("form",null,D.a.createElement("label",{className:"kclabel"},Object(U.a)(E||(E=P.e(["Årskurs"],["Årskurs"])))),D.a.createElement("select",{value:Object(B.d)(t.tags)[0]||"",onChange:function(e){return r.courseBlocks.update(t,{tags:Object(B.b)(t.tags,[e.target.value].filter(function(e){return!!e}))})}},D.a.createElement("option",{value:""},Object(U.a)(w||(w=P.e(["Välj årskurser"],["Välj årskurser"])))),D.a.createElement("option",{value:"1-3"},Object(U.a)(T||(T=P.e(["Årskurs 1-3"],["Årskurs 1-3"])))),D.a.createElement("option",{value:"4-6"},Object(U.a)(S||(S=P.e(["Årskurs 4-6"],["Årskurs 4-6"])))),D.a.createElement("option",{value:"7-9"},Object(U.a)(O||(O=P.e(["Årskurs 7-9"],["Årskurs 7-9"])))))),D.a.createElement("br",null),Object(B.d)(t.tags).length>0?D.a.createElement(pe,{block:t,course:n,repo:r}):void 0,a?D.a.createElement(ce.a,{title:"Ta bort blocket",style:{display:"inline-block",position:"absolute",top:0,right:0},onClick:function(){return confirm(Object(U.a)(I||(I=P.e(["Ta bort blocket?"],["Ta bort blocket?"]))))&&r.courseInstances.removeRelated(n.id,"blocks",t)}}):null),D.a.createElement("hr",null))};var ve,ye,ke,Ee,we,Te,Se,Oe,Ie,je,Ce,Ne,De,xe,Re,Le=Object(re.a)(Object(V.b)(function(e){var t=e.courseId;e.history;return q.a.getOrCreateBranchId(q.b.standardSchool,t).map(function(e){return q.c.branch(e)}).switchMap(function(e){return e.courseInstances.include("blocks").id(t).map(function(n){return N.createElement(N.Fragment,null,N.createElement(ee.a,{autoFocus:!0,label:"Namn",id:"CourseInstance:name",placeholder:"",value:n.name,onChange:function(t){return e.courseInstances.update(n,{name:t})}}),N.createElement(te.a,{label:"Beskrivning",id:"CourseInstance:description",rows:7,placeholder:"",value:n.description,onChange:function(t){e.courseInstances.update(n,{description:t})}}),N.createElement(ne.a,{label:"Typ",id:"CourseInstance:type"},N.createElement("div",{className:"align-horizontal"},N.createElement("div",{className:"horizontalItem top"},N.createElement("input",{disabled:!0,type:"radio",name:"course-type",checked:"step-course"===n.type,id:"CourseInstance:type",onChange:function(t){return t.target.checked&&e.courseInstances.update(n,{type:"step-course"})}})," Stegkurs")),N.createElement("div",{className:"align-horizontal"},N.createElement("div",{className:"horizontalItem"},N.createElement("input",{disabled:!0,type:"radio",name:"course-type",checked:"theme-course"===n.type,id:"CourseInstance:type",onChange:function(t){return t.target.checked&&e.courseInstances.update(n,{type:"theme-course"})}})," Temakurs"))),"step-course"===n.type?N.createElement(N.Fragment,null,N.createElement("br",null),N.createElement(ne.a,{label:Object(U.a)(ve||(ve=P.e(["Ämne"],["Ämne"]))),id:"CourseInstance:subject"},N.createElement("p",{id:"CourseInstance:subject"},n.subject.subjectName))):null,N.createElement("br",null),N.createElement("form",null,N.createElement("label",{className:"kclabel"},Object(U.a)(ye||(ye=P.e(["Ändringspolicy"],["Ändringspolicy"])))),N.createElement(se.a,{available:[{name:Object(U.a)(ke||(ke=P.e(["Tillåt skolor skapa egna flikar"],["Tillåt skolor skapa egna flikar"]))),key:"allowAddTabs"},{name:Object(U.a)(Ee||(Ee=P.e(["Tillåt skolor dölja standardflikar"],["Tillåt skolor dölja standardflikar"]))),key:"allowRemoveTabs"},{name:Object(U.a)(we||(we=P.e(["Tillåt skolor ändra ordningen mellan standardflikar"],["Tillåt skolor ändra ordningen mellan standardflikar"]))),key:"allowReorderTabs"}],selected:[n.allowAddTabs&&"allowAddTabs",n.allowRemoveTabs&&"allowRemoveTabs",n.allowReorderTabs&&"allowReorderTabs"].filter(function(e){return!!e}),onChange:function(t){return e.courseInstances.update(n,{allowAddTabs:t.includes("allowAddTabs"),allowRemoveTabs:t.includes("allowRemoveTabs"),allowReorderTabs:t.includes("allowReorderTabs")})}})),"step-course"===n.type?N.createElement(N.Fragment,null,Object(B.e)(n.tags).length>0?N.createElement(be,{repo:e,course:n}):void 0):void 0,"theme-course"===n.type?N.createElement(N.Fragment,null,N.createElement("br",null),N.createElement("form",null,N.createElement("label",{className:"kclabel"},Object(U.a)(Te||(Te=P.e(["Kopplade ämnen"],["Kopplade ämnen"])))),N.createElement(oe,{selected:(n.subjects||[]).map(function(e){return{name:e.name,key:e.code}}),getOptions:function(){return q.c.subjects.tags("schoolType:primary").map(function(e){return{name:e.name,key:e.code}}).toValue().load()},onChange:function(t){return e.courseInstances.update(n,{tags:Object(B.c)(n.tags,t.map(function(e){return e.key})),subjects:t.map(function(e){return{name:e.name,code:e.key}})})}})),N.createElement("br",null),N.createElement("form",null,N.createElement("label",{className:"kclabel"},Object(U.a)(Se||(Se=P.e(["Årskurser som ska ingå"],["Årskurser som ska ingå"])))),N.createElement(se.a,{available:[{name:Object(U.a)(Oe||(Oe=P.e(["Årskurs 1-3"],["Årskurs 1-3"]))),key:"1-3"},{name:Object(U.a)(Ie||(Ie=P.e(["Årskurs 4-6"],["Årskurs 4-6"]))),key:"4-6"},{name:Object(U.a)(je||(je=P.e(["Årskurs 7-9"],["Årskurs 7-9"]))),key:"7-9"}],selected:Object(B.d)(n.tags),onChange:function(t){return e.courseInstances.update(n,{tags:Object(B.b)(n.tags,t)})}}))):void 0,N.createElement("br",null),n.tags.includes("active")?N.createElement("div",{className:"btn btn-large pull-right",onClick:function(){return e.courseInstances.update(n,{tags:{$remove:["active"]}})}},"Inaktivera"):N.createElement("div",{className:"btn btn-large pull-right",onClick:function(){return e.courseInstances.update(n,{tags:{$add:["active"]}})}},"Aktivera"),N.createElement(G.a,{className:"btn btn-warning btn-large pull-right",to:"/admin/courses/"+t+"/confirm-delete"},Object(U.a)(Ce||(Ce=P.e(["Radera ..."],["Radera ..."])))),N.createElement("div",{className:"btn btn-large btn-warning",onClick:function(){return P.b(void 0,void 0,void 0,function(){return P.d(this,function(r){switch(r.label){case 0:return Object(ae.a)({school:"standard",draftRepo:e,course:n}),[4,q.c.saveNow()];case 1:return r.sent(),location.href=Object(Q.f)(Z.b.KED_SUBJECT_PLANNER_URL+"#/standard/courses/"+t,{}),[2]}})})}},"Publicera"))})})})),Pe=Object(_.a)(Object(V.b)(function(e){var t=e.courseId,n=e.history;return q.c.courseInstances.ids([t]).toValue().combineLatest(q.c.branches.tags(t).idsOnly().map(function(e){return e.id})).combineLatest(q.c.courseBlocks.tags(t).idsOnly().map(function(e){return e.id})).combineLatest(q.c.courseContents.tags(t).idsOnly().map(function(e){return e.id})).combineLatest(q.c.courseTabs.tags(t).idsOnly().map(function(e){return e.id})).combineLatest(q.c.tasks.tags(t).idsOnly().map(function(e){return e.id})).map(function(e){var t=P.f(e,2),n=t[0],r=t[1];return{courses:n[0][0][0][0],branchIds:n[0][0][0][1],courseBlockIds:n[0][0][1],courseContentIds:n[0][1],courseTabIds:n[1],taskIds:r}}).map(function(e){var t=e.courses,r=e.branchIds,a=e.courseBlockIds,i=e.courseContentIds,o=e.courseTabIds,s=e.taskIds;if(0===t.length)return N.createElement("div",null,N.createElement("p",null,"Kursen är nu borttagen"),N.createElement(G.a,{className:"btn btn-large",to:"/admin"},"Till adminverktygets startsida"));var c=t[0];return N.createElement("div",{className:["entitymeta-"+c.$meta].join(" ")},N.createElement("h2",null,"Bekräfta borttagning av standardkursen ",c.name," "),N.createElement("p",null,"Följande relaterade objekt kommer också att tas bort"),N.createElement("p",null,"Temporära utkast: ",r.length," st"),N.createElement("p",null,"Kursblock: ",a.length," st"),N.createElement("p",null,"Innehållsrutor (totalt inklusive skolors egna varianter): ",i.length," st"),N.createElement("p",null,"Flikar (totalt inklusive skolors egna varianter): ",o.length," st"),N.createElement("p",null,"Uppgifter (totalt inklusive skolors egna varianter): ",s.length," st"),N.createElement("a",{className:"btn btn-large",onClick:function(){return n.go(-1)}},"Avbryt"),N.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){var e,t,n,u,l;(e=q.c.branches).delete.apply(e,P.g(r)),(t=q.c.courseBlocks).delete.apply(t,P.g(a)),(n=q.c.courseContents).delete.apply(n,P.g(i)),(u=q.c.courseTabs).delete.apply(u,P.g(o)),(l=q.c.tasks).delete.apply(l,P.g(s)),q.c.courseInstances.delete(c.id)}},"Bekräfta borttagning av kurs"))})},{spinner:N.createElement("p",null,"Hämtar relaterade objekt... ",N.createElement(ie.a,null))})),Ae=n(121),qe=n(104),_e=n(112),Ue=n(97),Me=function(){var e=X.a.currentUser,t=e.roles;e.school;return t.includes("ADMIN")||Object(Q.e)(X.a.currentUser,"standard")?D.a.createElement(J.a,{to:"/admin"}):(location.href=Object(Q.f)(Z.b.KED_SUBJECT_PLANNER_URL,{}),D.a.createElement("div",null))},Be={$:["/admin",D.a.createElement(D.a.Fragment,null,"Start")],schools:["/schools",D.a.createElement(D.a.Fragment,null,"Skolor")],import:["/admin/import",D.a.createElement(D.a.Fragment,null,"Import")]},Fe=[{path:"/",exact:!0,content:function(){return D.a.createElement(Me,null)}},{path:"/admin",exact:!0,tabId:"$",title:"Ämnesplaneraren Admin",content:function(){return D.a.createElement(J.a,{to:"/admin/courses/create"})}},{path:"/admin/courses/create",exact:!0,tabId:"$",title:"Skapa standardkurs",content:function(){return D.a.createElement(z.a,{left:D.a.createElement(K,null),right:D.a.createElement(H,null),rightWidth:5})}},{path:"/admin/courses/:courseId/settings",exact:!0,tabId:"$",title:"Ämnesplaneraren Admin",content:function(e){var t=e.match;return D.a.createElement(z.a,{left:D.a.createElement(Le,{courseId:t.params.courseId}),right:D.a.createElement(H,null),rightWidth:5})}},{path:"/admin/courses/:courseId/confirm-delete",exact:!0,tabId:"$",title:"Bekräfta radering av standardkurs",content:function(e){var t=e.match;return D.a.createElement(z.a,{left:D.a.createElement(Pe,{courseId:t.params.courseId}),right:D.a.createElement(H,null),rightWidth:5})}},{path:"/admin/import",exact:!0,tabId:"import",title:"Import från Skolverket",content:function(){return D.a.createElement(Ae.a,{linkPrefix:"/admin/import/"})}},{path:"/admin/import/:subjectId",exact:!1,tabId:"import",title:"Import från skolverket",content:function(e){var t=e.match;return D.a.createElement(qe.a,{id:t.params.subjectId})}},{path:"/schools",exact:!0,tabId:"schools",title:Object(U.a)(Ne||(Ne=P.e(["Skolor"],["Skolor"]))),content:function(){return D.a.createElement(_e.b,{viewCourseUrl:Z.b.KED_SUBJECT_PLANNER_URL})}},{path:"/schools/:schoolId/edit",tabId:"schools",title:"Skolor",content:function(e){var t=e.match;return D.a.createElement(Ue.b,{title:Object(U.a)(De||(De=P.e(["Redigera skola"],["Redigera skola"]))),id:t.params.schoolId})}},{path:"/schools/new/gymnasium",tabId:"schools",title:"Skolor",content:function(e){e.match;return D.a.createElement(Ue.b,{title:Object(U.a)(xe||(xe=P.e(["Lägg till skola"],["Lägg till skola"]))),type:"gymnasium"})}},{path:"/schools/new/primary",tabId:"schools",title:"Skolor",content:function(e){e.match;return D.a.createElement(Ue.b,{title:Object(U.a)(Re||(Re=P.e(["Lägg till skola"],["Lägg till skola"]))),type:"primary"})}}],Ke=Object.keys(Be).map(function(e){return{key:e,name:Be[e][1],link:Be[e][0]}}),ze=n(95),Ge=n(117);n.d(t,"a",function(){return We});var We=function(){return N.createElement(x.a,null,N.createElement(N.Fragment,null,Fe.map(function(e,t){var n=e.exact,r=e.path,a=e.tabId,i=e.title,o=e.content;return N.createElement(R.a,{key:t,path:r,exact:n,component:function(e){return N.createElement(N.Fragment,null,N.createElement(ze.a,{activeTab:a||"$",tabs:Ke,title:i||"",backgroundImage:"https://ks.kunskapsporten.se/images/18.6323bc4d15f4831f9c82dedf/theme.jpg"}),o(e))}})}),N.createElement(L.a,null),N.createElement(Ge.a,null)))}},,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(130),n(91),n(3)),i=n(0),o=n(107),s=n(136),c=n(137),u=n(160),l=n(17),d=n(9),m=n(56);Object(c.a)({v1:["css/courseviewer.css","css/dialog.css","css/grid-css-patch.css"],includeCSS:s.a,version:6,versionFolder:"css/delta-css/courseviewer"});var f=function(e){function t(t){var n=e.call(this,t)||this;return location.hash||(location.hash="#/"),n}return r.c(t,e),t.prototype.render=function(){var e=this.props.intl;return a.a.currentUser?i.createElement(l.a.Provider,{value:{intl:e}},i.createElement(u.a,null)):i.createElement(o.a,null)},t}(i.Component),h=Object(m.a)(Object(d.d)(f));t.default=h}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmVudi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmNmZy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1zdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL3V0aWxzLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9jYWNoZS1idXN0LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9kZWx0YS1tZXJnZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1xdWVyeS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9xdWVyeS1zZXQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL211dGF0aW9uLXF1ZXVlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9kZWx0YS1jb2xsZWN0aW9uL2FwcGx5LW11dGF0aW9ucy1vbi1kZWx0YXMuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2RlbHRhLWNvbGxlY3Rpb24vZGVsdGEtY2FjaGUuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2tlZGJhY2tlbmQtd3JpdGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9kZWx0YS1jb2xsZWN0aW9uL2RlbHRhLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2tlZGJhY2tlbmQtcmVwby5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9kYi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zcGlubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYWNjZXNzLWNvbnRyb2wvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FjY2Vzcy1jb250cm9sL2dldC11c2VyLWNsYWltcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC91dGlscy5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvcXVlcnktc3RyaW5nLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3V0aWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L3Jlc3RjbGllbnQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQva2VkLWJlYXJlci1wcm92aWRlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9hY2Nlc3MtY29udHJvbC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9odHRwLWVycm9yLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2luZGV4LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYi9iZWFyZXItc3RvcmFnZS1zZXNzaW9uc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1tb2RlbC1taWdyYXRvci9taWdyYXRlLXRhc2suanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvbWlncmF0ZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1tb2RlbC1taWdyYXRvci9taWdyYXRlLWNvdXJzZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1tb2RlbC1taWdyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC13ZWIvaGFzaC1yZXN0b3Jlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvY2xpZW50d2ViLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9sYXp5LWNvbnRlbnQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NoYXJ0cy9nb2FsLXByb2dyZXNzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL0tFRC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvc2Nob29sLW1vbWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC10ZXh0LWlucHV0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9rZWQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL2VtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL3ZhbHVlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvbGl2ZS1xdWVyeS12aWV3LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL21hcC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvc2Nob29sLXRlcm0udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL21ha2Utc3VzcGVuc2UtYXBpLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL2Vkc2NsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2NvdXJzZS1iYW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2xvZ2ljL29yZGVyZWQtcmVxdWlyZW1lbnRzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHRhcmVhLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvZmliZXItY29udGV4dC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy9sb2dpYy9jb3Vyc2UtaW5zdGFuY2UtdGFncy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2J1c2luZXNzLWxvZ2ljLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9TZXR1cExhbmd1YWdlSW50bC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc2VsZWN0LXJlbGF0ZWQtZG9jcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvY29tbW9uL3R3by1jb2x1bW5zLXBhZ2UudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L2RhdGEvdXNlcnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2Vycm9yLXN1Y2Nlc3MtZmVlZGJhY2sudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2tub3dsZWRnZS1tYXRyaXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9jb25maWd1cmUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL3NldC1iZWFyZXItcHJvdmlkZXJzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9zZXQta2VkLWJhY2tlbmQtY2xpZW50LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9zZXQtZWRzLWNsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9lbGxpcHNpcy1sb2FkZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2NvbW1vbi9iYW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9jaGVja2xpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3NjaG9vbHMvZWRpdC1zY2hvb2wudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3Nob3ctc3ViamVjdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvbG9naWMvcHVibGlzaC1jb3Vyc2UudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvc2hvdy1zdWJqZWN0LWlubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC91dGlscy9jaG9vc2UtdXNlci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvbG9naWMvbGlzdC1jb3Vyc2UtaW5zdGFuY2VzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3NjaG9vbHMvZWRpdGFibGUtc2Nob29sLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3NjaG9vbHMvaW5kZXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2xvZ2ljL2dldC1jb3Vyc2UtY29kZXMtZnJvbS10YWdzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2xvZ2ljL2dldC1zdGFuZGFyZC1jb3Vyc2VzLXdpdGgtb3JkZXJlZC1yZXF1aXJlbWVudHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2xvYWRpbmctaW5kaWNhdG9yLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy9za29sdmVya2V0LXN1YmplY3QudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvZGlmZi9taWdyYXRlLXN1YmplY3QudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvZGlmZi9kaWZmLXhtbC13aXRoLWRhdGFiYXNlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3VwbG9hZGVkLXN1YmplY3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3N1YmplY3RzLWlubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIHN2fGVuIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L3NldC1jdXJyZW50LXVzZXIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3Rlc3QvdXRpbHMvaW5jbHVkZS1jc3MudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2luY2x1ZGUtb3B0aW9uYWwtY3NzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2FkbWluL2NvdXJzZXMvY3JlYXRlLXN0YW5kYXJkLWNvdXJzZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvY29tbW9uL3NpZGUtbGlzdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvY29tbW9uL3N0YW5kYXJkLWNvdXJzZS1pbnN0YW5jZS1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvbXVsdGlzZWxlY3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2FkbWluL2NvdXJzZXMvZWRpdC1jb3Vyc2UtYmxvY2stcmVxdWlyZW1lbnRzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy9hZG1pbi9jb3Vyc2VzL2VkaXQtc3RhbmRhcmQtY291cnNlLWJsb2Nrcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvYWRtaW4vY291cnNlcy9lZGl0LXN0YW5kYXJkLWNvdXJzZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvYWRtaW4vY291cnNlcy9kZWxldGUtc3RhbmRhcmQtY291cnNlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy9hZG1pbi9yb3V0ZXMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2FkbWluL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC90ZXN0cGFnZS1jb3Vyc2VidWlsZGVyLWtzLnRzeCJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiZXhlY3V0ZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImRlZmVycmVkTW9kdWxlcyIsImFwcGx5IiwiY2hlY2tEZWZlcnJlZE1vZHVsZXMiLCJyZXN1bHQiLCJkZWZlcnJlZE1vZHVsZSIsImZ1bGZpbGxlZCIsImoiLCJkZXBJZCIsInNwbGljZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIjgiLCJleHBvcnRzIiwibW9kdWxlIiwibCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsIlJlYWN0IiwiY2FwaXRhbGl6ZUZpcnN0Iiwic3RyIiwiY2hhckNvZGVBdCIsInN1YnN0ciIsInRvTG9jYWxlVXBwZXJDYXNlIiwiZXh0ZW5kIiwib2JqIiwiZXh0ZW5zaW9uIiwia2V5cyIsImZvckVhY2giLCJjbG9uZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25jYXQiLCJmbGF0dGVuIiwiYSIsImNvbXBhcmVQcm9wIiwicHJvcCIsImIiLCJhUHJvcCIsImJQcm9wIiwiY29tcGFyZVByb3BzIiwicHJvcHMiLCJsb2NhbGVzIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImxvY2FsZUNvbXBhcmUiLCJtYXAiLCJzcGxpdCIsIl9hIiwiX2IiLCJ0c2xpYl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZmlyc3RQYXJ0IiwicmVzdCIsImNtcFBhcnQiLCJmaXJzdEEiLCJmaXJzdEIiLCJyZWR1Y2UiLCJjbXAxIiwiY21wMiIsIkwiLCJ0ZXh0IiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwicnYiLCJidWlsZE1lc3NhZ2UiLCJkYXRlVGltZVJldml2ZXIiLCJleGVjIiwiRGF0ZSIsInNob3dJbmZvIiwibXNnIiwiZXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJzaG93RXJyb3IiLCJlcnJNc2ciLCJtZXNzYWdlIiwiY29uc29sZSIsImVycm9yIiwibWF4TGVuZ3RoIiwibWF4TGVuIiwiYXJyYXlUb0xvb2t1cCIsImtleUFjY2Vzc29yIiwiaXRlbSIsImFycmF5IiwiYXJyYXlUb01hcCIsImNoZXJyeVBpY2tQcm9wcyIsInByb3BzVG9QaWNrIiwicHJvcHNUb1BpY2tfMSIsInByb3BzVG9QaWNrXzFfMSIsIm5leHQiLCJkb25lIiwicGFyYW0iLCJkaXN0aW5jdCIsIngiLCJzaGFsbG93RXF1YWxzIiwia2V5c0EiLCJrZXlzQiIsIl9fd2VicGFja19leHBvcnRzX18iLCJlbnYiLCJfa2VkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfanNfZGlzdF9qc19rZWRfYmFja2VuZF9jbGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNmZyIsIl9LRURfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIktlZEJhY2tlbmRTdWJzY3JpcHRpb24iLCJzdWJzY3JpYmVyIiwiY29sbGVjdGlvbiIsInRoaXMiLCJub3RpZnlTdWJzY3JpYmVyIiwibGFzdE5vdGlmaWVkRGF0YSIsImV4IiwiZXgyIiwidW5zdWJzY3JpYmUiLCJnZXRUYWJsZUZyb21MYWJlbCIsInRhYmxlIiwibGFiZWwiLCJzY2hlbWEiLCJyZWxhdGlvbnNoaXBzIiwicXVlcnlBcnJheSIsInF1ZXJ5IiwiZmlsdGVyIiwiZnJvbSIsIkFORCIsImRhdGVUaW1lIiwidG8iLCJpZHMiLCJpbmNsdWRlcyIsImlkIiwidGFncyIsInNvbWUiLCJ0YWciLCJnZXRGaWx0ZXJGcm9tUXVlcnkiLCJmaWx0ZXIxIiwiZmlsdGVyMiIsImJyYW5jaFNlbnNpdGl2ZSIsIm9wIiwiZ2xvYmFsT3AiLCJjYWNoZV9idXN0X0NhY2hlQnVzdCIsIkNhY2hlQnVzdCIsImdldENhY2hlQnVzdCIsInVzZXIiLCJnZXRJbnZvbHZlZEl0ZW1zIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImpvaW4iLCJpbnZhbGlkYXRlQ2FjaGUiLCJyZXFzIiwiZ2V0Q2FjaGVJbnZhbGlkYXRpb25zIiwic2V0SXRlbSIsIm5vdyIsImhhc0VkZ2VzRnJvbSIsInJlbGF0ZWRUYWJsZXMiLCJicmFuY2hJZCIsInNvcnQiLCJpbnZhbGlkYXRpb25TZXQiLCJyZXEiLCJzb3VyY2VUYWJsZSIsInRhcmdldEJyYW5jaElkIiwiYXBwbHlEZWx0YSIsImRvYyIsImRlbHRhIiwidGFyZ2V0RG9jIiwia2V5c18xIiwidHNsaWJfZXM2IiwidmFsIiwibWV0YUluc3RydWN0aW9ucyIsInN0YXJ0c1dpdGgiLCJfbG9vcF8xIiwibWkiLCJtaVZhbHVlIiwiJHdhc1Vuc2V0IiwidmFsdWVzVG9BZGQiLCJFcnJvciIsInRhcmdldEFycmF5IiwidmFsdWVzVG9BZGRfMSIsInYiLCJ2YWx1ZXNUb1JlbW92ZV8xIiwibWV0YUluc3RydWN0aW9uc18xIiwibWVyZ2VEZWx0YXMiLCJkZWx0YTEiLCJkZWx0YTIiLCJyZW1vdmVVbnNldFByb3BzIiwidGFyZ2V0RGVsdGEiLCJrZXlzXzIiLCJfbG9vcF8yIiwiJHVuc2V0IiwidmFsdWVzVG9BZGRfMiIsInRhcmdldE1ldGFQcm9wIiwidGFyZ2V0UmVtb3ZlQXJyYXkiLCIkcmVtb3ZlIiwidGFyZ2V0QWRkQXJyYXkiLCIkYWRkIiwidmFsdWVzVG9SZW1vdmVfMiIsIm1ldGFJbnN0cnVjdGlvbnNfMiIsImtlZGJhY2tlbmRfcXVlcnlfS2VkQmFja2VuZFF1ZXJ5IiwiS2VkQmFja2VuZFF1ZXJ5IiwicmVwbyIsIm11dGF0aW9uUXVldWUiLCJzdWJzY3JpcHRpb25zIiwiZ290SW5pdGlhbFJlc3BvbnNlIiwiaW52YWxpZCIsImxvYWRlZFZlcnNpb24iLCJfbG9hZFByb21pc2UiLCJpbmNsdWRlIiwicXVlcnlLZXkiLCJtdXRhdGlvbnNPbkVtcHR5IiwiY29tcGFyYWJsZVByb3BzIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbmZpZ3VyYWJsZSIsInN1YnNjcmliZSIsInN1YnNjcmlwdGlvbiIsImdldERhdGFXaXRoTXV0YXRpb25zQXBwbGllZCIsInF1ZXJ5TG9jYWxseSIsImxvYWQiLCJzZW50IiwidmVyc2lvbiIsImxvYWRQcm9taXNlIiwiX3RoaXMiLCJ3cml0ZXIiLCJwZXJzaXN0ZWRWZXJzaW9uIiwiX2xvYWQiLCJ0aGVuIiwiTWF0aCIsIm1heCIsImNhdGNoIiwibm90aWZ5U3Vic2NyaWJlcnMiLCJhZmZlY3RzUXVlcnkiLCJ3YWl0Rm9yVmVyc2lvblRvUGVyc2lzdCIsInF1ZXJ5U2VydmVyIiwiY29tbWl0TXV0YXRpb25zIiwibXV0YXRpb25zIiwibXV0YXRpb25zXzEiLCJyZWZyZXNoT3JJbnZhbGlkYXRlIiwiZGVsdGFEb2MiLCJvcHRpbWlzdGljTXV0YXRpb25zIiwiZGF0YV8xIiwicXVlcnlTZXQiLCJnZXRDbGllbnQiLCJsaXN0Iiwib3B0aW1pc3RpYyIsIm11dGF0aW9uIiwiYXBwbHlNdXRhdGlvbnNPbkRhdGEiLCJsaXN0T3B0aW9ucyIsInNvdXJjZUlkcyIsInJlcXVlc3RlZFRhZ3MiLCJ1dGlscyIsInVwZGF0ZWREb2MiLCIkbWV0YSIsImluY2x1ZGVkRG9jcyIsInVwZGF0ZWRBcnJheSIsInJlbGF0ZWQiLCJ1cGRhdGVkUmVsYXRlZCIsImluZGV4T2YiLCJncmFwaFByb3AiLCJyZWxhdGVkRG9jIiwic2V0R3JhcGhQcm9wcyIsImxhYmVsc18xIiwicmVsYXRlZERvY3MiLCJjb3B5Iiwia2VkYmFja2VuZF9jb2xsZWN0aW9uX0tlZEJhY2tlbmRDb2xsZWN0aW9uIiwiX3N1cGVyIiwiS2VkQmFja2VuZENvbGxlY3Rpb24iLCJvYnNlcnZlciIsIl9pbmNsdWRlcyIsImFwcGx5UXVlcnkiLCJhZGRUb1F1ZXJ5QXJyYXlQcm9wIiwiYXJyYXlQcm9wIiwiZW50cmllcyIsImFkZEZsYWdzIiwiZmxhZ3MiLCJkZWJ1ZyIsImlkc09ubHkiLCJpZHNBbmROYW1lc09ubHkiLCJpbmNsdWRlSWRzT25seSIsImluY2x1ZGVJZHNBbmROYW1lc09ubHkiLCJiZXR3ZWVuIiwicm9sZSIsImhlZiIsImluY2x1ZGVEZWx0YUVkZ2VzIiwiaGFzRWRnZXNUbyIsImhldCIsInNpbmdsZSIsIm9uWmVybyIsIm9uTWFueSIsImdyYXBocyIsImNhY2hlT3B0aW1pemVkIiwiY2FjaGVCdXN0IiwiZ2V0VXNlciIsIm11dGF0aW9uRmFjdG9yeSIsInR4Iiwia2VkX2JhY2tlbmRfY2xpZW50IiwibXV0YXRpb25SZXF1ZXN0cyIsInRocm93ZXJzIiwidG9WYWx1ZSIsIml0ZW1zIiwibG9nIiwidXBkYXRlIiwiY2hhbmdlcyIsImRlYm91bmNlIiwibXV0YXRlIiwidGFyZ2V0TmFtZSIsImFkZFJlbGF0ZWQiLCJyZW1vdmVSZWxhdGVkIiwidW5kb0xpbmsiLCJyZWxhdGVkSWQiLCJkZWxldGUiLCJxdWVyeV9zZXRfUXVlcnlTZXQiLCJRdWVyeVNldCIsInF1ZXJpZXMiLCJQcm9taXNlIiwiYWxsIiwicSIsImNsZWFudXBJbnZhbGlkUXVlcmllcyIsInRpbWVvdXRIYW5kbGUiLCJjbGVhclRpbWVvdXQiLCJmaW5kUXVlcnkiLCJmaW5kIiwicUluY2x1ZGVzIiwicmVzXzEiLCJlbnRpdHkiLCJyZXN1bHRfMSIsImV2ZXJ5IiwicmVzdWx0XzIiLCJzdGF0ZV8xIiwia2JRdWVyeSIsInNldFRpbWVvdXQiLCJtdXRhdGlvbl9xdWV1ZV9NdXRhdGlvblF1ZXVlIiwiTXV0YXRpb25RdWV1ZSIsInF1ZXVlIiwic2F2aW5nUXVldWUiLCJhZGQiLCJtZXJnZSIsIm1vdmVUb1NhdmluZ1F1ZXVlIiwiY2xlYXJTYXZpbmdRdWV1ZSIsInF1ZXVlMSIsInF1ZXVlMiIsIm11dGFibGVRdWV1ZTEiLCJtdXRhYmxlUXVldWUyIiwibGVuIiwib3ZlcmxhcHBpbmdJZE9wSWR4IiwiZmluZEluZGV4IiwibmV3TXV0IiwiYXBwbHlNdXRhdGlvbnNPbkRlbHRhcyIsImRlbHRhcyIsInVzZXJEaXNwbGF5TmFtZSIsImhhc0FkZGl0aW9uYWxGaWx0ZXIiLCJ0eXBlIiwic291cmNlSWQiLCJ0YXJnZXRJZCIsImNvbnRyaWJ1dG9yIiwiaWR4IiwiZGVsdGFSZWxhdGlvbiIsImNvbnRyaWJ1dG9ycyIsImV4aXN0aW5nRGVsdGFEb2MiLCJuZXdEYXRhIiwiZGVsdGFfY2FjaGVfRGVsdGFDYWNoZSIsIkRlbHRhQ2FjaGUiLCJnZXRVc2VyRGlzcGxheU5hbWUiLCJsb29rdXAiLCJhcHBseU11dGF0aW9ucyIsImNhY2hlRW50cnkiLCJuZXdWYWx1ZSIsImZldGNoIiwib3B0aW1pc3RpY1ZhbHVlIiwibm90aWZ5IiwiZGVsdGFfY2FjaGVfRGVsdGFDYWNoZUVudHJ5IiwiY2xlYW51cFRpbWVyIiwic3Vic2NyaWJlcnMiLCJpc0ZldGNoaW5nIiwiRGVsdGFDYWNoZUVudHJ5IiwiY2xpZW50IiwiZmV0Y2hPcGVyYXRpb25JZCIsImZldGNoRnJvbVNlcnZlciIsImZhaWwiLCJyZXMiLCJfYyIsImh0dHAiLCJzdGF0dXMiLCJqc29uIiwiY29weV8xIiwia2VkYmFja2VuZF93cml0ZXJfS2VkQmFja2VuZFdyaXRlciIsIktlZEJhY2tlbmRXcml0ZXIiLCJfdGltZW91dElkIiwiX2lzU2F2aW5nUHJvbWlzZSIsImN1cnJlbnRWZXJzaW9uIiwib2JzZXJ2YWJsZSIsImVycm9yU3Vic2NyaWJlcnMiLCJzdGF0ZVN1YnNjcmliZXJzIiwiZGVsdGFDYWNoZSIsIm9uRXJyb3IiLCJjYWxsYmFjayIsIm9uU3RhdGVDaGFuZ2UiLCJvZmYiLCJkaXNwYXRjaEVycm9yIiwicmV0cnlhYmxlIiwiXyIsImRpc3BhdGNoU3RhdGVDaGFuZ2UiLCJzYXZlIiwicmV0cnlTYXZlIiwiaXNFZGl0ZWQiLCJfc2F2ZSIsInJlc29sdmUiLCJldGFnTXV0YXRpb25zIiwiZXJyb3JfMSIsIm1hcE11dGF0aW9ucyIsInRyeXMiLCJiYXRjaCIsIm5ld0V0YWdzIiwiJGV0YWciLCJkaXNwYXRjaCIsImJyIiwibGluazIiLCJ1bmxpbmsyIiwiY2xlYXJCcmFuY2giLCJkZWx0YV9jb2xsZWN0aW9uX0RlbHRhQ29sbGVjdGlvbiIsIkRlbHRhQ29sbGVjdGlvbiIsImtlZGJhY2tlbmRfcmVwb19LZWRCYWNrZW5kUmVwbyIsIktlZEJhY2tlbmRSZXBvIiwiZGVmYXVsdFF1ZXJ5T3B0aW9ucyIsInRhYmxlTmFtZSIsIl9jbG9uZSIsInF1ZXJ5T3B0aW9ucyIsInVuZGVmaW5lZCIsImJyYW5jaCIsIm9wdGltaXplQ2FjaGUiLCJzYXZlTm93IiwiZGIiLCJnbG9iYWxJZCIsIlNjaG9vbHMiLCJDb3Vyc2VJbnN0YW5jZXMiLCJLRURfZW52Iiwia2VkQmFja2VuZENsaWVudCIsImN1cnJlbnRVc2VyIiwibWFpbCIsImRpc3BsYXlOYW1lIiwiS0VEX2NmZyIsIktFRF9SRUFMTSIsInN0YW5kYXJkU2Nob29sIiwic2Nob29scyIsIm15U2Nob29sIiwic2Nob29sIiwiZ2V0QnJhbmNoSWQiLCJjb3Vyc2VJZCIsInN3aXRjaE1hcCIsImJyYW5jaGVzIiwib2ZmaWNpYWxCcmFuY2hJZCIsImdldE9yQ3JlYXRlQnJhbmNoSWQiLCJjb3Vyc2VJbnN0YW5jZXMiLCJhY2wiLCJzY2hvb2xJZCIsInRyZWVQYXJlbnRJZCIsImdldEFsbERlc2NlbmRhbnRJZHMiLCJjb3Vyc2VCbG9ja3MiLCJjb3Vyc2VDb250ZW50cyIsImNvdXJzZVRhYnMiLCJ0YXNrcyIsImpRdWVyeSIsIlNwaW5uZXIiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY2xhc3NOYW1lIiwiYXJpYS1oaWRkZW4iLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyIsImhhc0FjY2VzcyIsInJlcXVlc3RlZFJpZ2h0IiwiY2xhaW1zIiwicm9sZXMiLCJnZXRVc2VyQ2xhaW1zIiwidHV0b3JGb3IiLCJjbGFpbSIsImZyb21TdHJpbmdBcnJheSIsImhhc1dyaXRlQWNjZXNzIiwiaXNUZWFjaGVyQXRTY2hvb2wiLCJpc1RlYWNoZXIiLCJiZWxvbmdzVG9TY2hvb2wiLCJ0b0xvd2VyQ2FzZSIsImlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbCIsImltcGVyc29uYXRpb25FbnYiLCJhY3RBcyIsInVybCIsImN1cnJlbnRRdWVyeSIsInF1ZXJ5X3N0cmluZyIsImxvY2F0aW9uIiwic2VhcmNoIiwibmV3UXVlcnkiLCJuZXdRdWVyeVN0cmluZyIsImhyZWYiLCJoYXNoIiwicHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkiLCJwcmVzZXJ2ZWRRdWVyeSIsIklNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TXzEiLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNU18xXzEiLCJwSGFzaCIsImNyZWF0ZVVVSUQiLCJhdm9pZFNpbXVsdGFub3VzQ2FsbHMiLCJnZXRHbG9iYWxJZCIsImNvbXB1dGVQcmVkZXN0aW5hdGVkSWQiLCJ1cGRhdGVBcnJheSIsInJlcGxhY2UiLCJyYW5kb20iLCJmbG9vciIsInRvU3RyaW5nIiwibWV0aG9kIiwib25nb2luZ1Byb21pc2UiLCJyZWFsbSIsInBhZCIsImhleCIsImlucHV0IiwiZW5jb2RlciIsImRpZ2VzdCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiVWludDhBcnJheSIsImNyeXB0byIsInN1YnRsZSIsIm5pYmJsZSIsIm1hcHBlciIsInJldHZhbCIsIm1hcHBlZCIsInBhcnNlUXVlcnlTdHJpbmciLCJsb2NhdGlvblNlYXJjaCIsInRvTG93ZXIiLCJwYXJ0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidHJpbSIsImVuY29kZVBhcmFtcyIsInBhcmFtcyIsImVuY29kZVVSSUNvbXBvbmVudCIsImdlbmVyYXRlUXVlcnlTdHJpbmciLCJzcGxpdFVybEFuZFF1ZXJ5IiwidXJsV2l0aFBvc3NpYmxlUXVlcnkiLCJwUXVlcnkiLCJMYW5ndWFnZUNvbnRleHQiLCJpbnRsIiwidXBkYXRlRG9jdW1lbnRHcmFwaHMiLCJvbGREb2MiLCJuZXdEb2MiLCJkb2NVcGRhdGVzIiwiZG9jSWQiLCJuYXZQcm9wIiwiZm9yZWlnblRhYmxlIiwib2xkTGlzdCIsIm5ld0xpc3QiLCJ0dXBsZXMiLCJhZGRlZCIsInR1cGxlIiwiYWRkZWRfMSIsImFkZGVkXzFfMSIsIm1ldGEiLCJtdXRhdGVkU3ViRG9jIiwia2VkYmFja2VuZF9jbGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInB1dCIsImxpbmsiLCIkc2V0IiwicmVtb3ZlZCIsInJlbW92ZWRfMSIsInJlbW92ZWRfMV8xIiwidW5saW5rIiwidXBkYXRlZCIsInVwZGF0ZWRfMSIsInVwZGF0ZWRfMV8xIiwidSIsInJlYWN0X2FkZG9uc191cGRhdGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwiZHRGb3JtYXQiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiZm9ybWF0Iiwic2hvcnREYXRlRm9ybWF0Iiwic2hvcnRQZXJzb25OYW1lRm9ybWF0IiwibmFtZXMiLCJsYXN0TmFtZSIsInBvcCIsInVwZGF0ZU1vZGlmaWNhdGlvblN0YW1wIiwibW9kaWZpZWREYXRlIiwibW9kaWZpZWRCeSIsInVwZGF0ZUNyZWF0aW9uU3RhbXAiLCJjcmVhdGVkRGF0ZSIsImNyZWF0ZWRCeSIsImdldEVtYWlsRnJvbURvY0FjY2VzcyIsInJlc291cmNlIiwiZW1haWwiLCJzdWJzdHJpbmciLCJ1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyIsImFwcGx5RXRhZ3MiLCJldGFnIiwiZ3JhcGhzXzEiLCJncmFwaHNfMV8xIiwicmVhZEJsb2IiLCJibG9iIiwicmVqZWN0IiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImV2IiwidGFyZ2V0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJyZWFkQmxvYkFzVGV4dCIsInJlYWRBc1RleHQiLCJhbGxvd0NvcHkiLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJkYXRhVHJhbnNmZXIiLCJkcm9wRWZmZWN0IiwidXBkYXRlQ291cnNlQnVpbGRlclN0YXR1cyIsImRpdiIsImpxdWVyeV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJsb2FkQ291cnNlIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiaW5jbHVkZVRlbXBsYXRlQ2hhaW4iLCJpbmNsdWRlVGFza3MiLCJjb3Vyc2UiLCJjb3Vyc2VUYXNrcyIsInRlbXBsYXRlQ2hhaW4iLCJhYmlsaXRpZXMiLCJhYmlsaXRpZXNPcmRlciIsImtub3dsZWRnZVJlcXVpcmVtZW50cyIsImtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyIiwiY2VudHJhbENvbnRlbnQiLCJjZW50cmFsQ29udGVudE9yZGVyIiwiY2MiLCJyZXN0Y2xpZW50X1Jlc3RDbGllbnQiLCJSZXN0Q2xpZW50IiwiaXNvbW9ycGhpYyIsImJhc2VVcmwiLCJudW1PdXRzdGFuZGluZ09wZXJhdGlvbnMiLCJfc3RhdHVzIiwiZW1pdHRlciIsImZldGNoT3B0aW9ucyIsImF1dGhIZWFkZXIiLCJiZWFyZXIiLCJ1c2VybmFtZSIsImJ0b2EiLCJwYXNzd29yZCIsImJlYXJlclByb3ZpZGVyIiwicGF0aCIsImhlYWRlcnMiLCJfZmV0Y2giLCJlcnIiLCJxdWVyeVN0ciIsInRva2VuSW5mbyIsInd3d2F1dGgiLCJfZCIsIl9lIiwiY2FjaGUiLCJub2NhY2hlIiwiZ2V0QmVhcmVyIiwiZXhwaXJlcyIsInJlZnJlc2hCZWFyZXIiLCJ0b2tlbiIsIkF1dGhvcml6YXRpb24iLCJ0ZXN0IiwiQWNjZXB0IiwicG9zdCIsIkNvbnRlbnQtVHlwZSIsImJvZHkiLCJrZWRfYmVhcmVyX3Byb3ZpZGVyX0tlZEJlYXJlclByb3ZpZGVyIiwiS2VkQmVhcmVyUHJvdmlkZXIiLCJzdG9yYWdlIiwidG9rZW5JZCIsImNsaWVudElkIiwiY2xpZW50U2VjcmV0IiwidG9rZW5VcmwiLCJ0b2tlblF1ZXJ5IiwicmV0cmllcyIsIndhcm4iLCJzdGF0dXNUZXh0IiwiRG9jdW1lbnRBY2Nlc3MiLCJhY2Nlc3NDbGFpbVR5cGUiLCJhY2Nlc3NDbGFpbVZhbHVlIiwicmlnaHQiLCJmcm9tU3RyaW5nIiwiYWMiLCJjbGFpbVR5cGUiLCJ1bmVzY2FwZSIsImNsYWltVmFsdWUiLCJlc2NhcGUiLCJhY2Nlc3NDb21wb25lbnQiLCJ0b1N0cmluZ0FycmF5IiwidXNlckNsYWltcyIsImh0dHBfZXJyb3JfSHR0cEVycm9yIiwiSHR0cEVycm9yIiwiY29kZSIsImtlZF9iYWNrZW5kX2NsaWVudF9LZWRCYWNrZW5kQ2xpZW50Iiwia2VkX2JhY2tlbmRfY2xpZW50X0JhdGNoUnVubmVyIiwiS2VkQmFja2VuZENsaWVudCIsImdldE15Q2xhaW1zIiwicmVxMSIsInJlcTIiLCJkbyIsInNjb3BlRm4iLCJydW5uZXIiLCJkZWxldGVSZWFsbSIsInNoYXJlIiwidW5zaGFyZSIsInRhcmdldFRhYmxlIiwiQmF0Y2hSdW5uZXIiLCJCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UiLCJzZXNzaW9uU3RvcmFnZSIsInBhcnNlIiwibWlncmF0ZVRhc2siLCJ0YXNrIiwicmVzb3VyY2VzIiwibWlncmF0ZSIsInRhc2tJZHMiLCJyZXNwb25zaWJsZVRlYWNoZXJzIiwicmVzb3Vyc2VzIiwibWlncmF0ZUNvdXJzZSIsInJlZGlySGFzaCIsImhhc2hfcmVzdG9yZXJfYSIsInRpbWUiLCJyZW1vdmVJdGVtIiwiX19taWdyYXRvcl9taXhlZF9pbiIsIktlZE1vZGVsTWlncmF0b3JNaXhpbiIsInRpbWVPZlBhZ2VMb2FkIiwia2VkX2JhY2tlbmRfY2xpZW50X3dlYl9XZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciIsIldlYlNlcnZlckJlYXJlclByb3ZpZGVyIiwidG9rZW5QYXRoIiwidG9rZW5SZXNwb25zZU1hcHBlciIsInJlZGlyZWN0IiwiY3JlZGVudGlhbHMiLCJ3YW50c1JlZGlyZWN0IiwicmVsb2FkIiwic2VsZiIsImtlZF9iYWNrZW5kX2NsaWVudF93ZWJfS2VkQmFja2VuZENsaWVudFdlYiIsIktlZEJhY2tlbmRDbGllbnRXZWIiLCJhcGlCYXNlVXJsIiwicHJvdmlkZXJPclRva2VuUGF0aCIsIkxhenlDb250ZW50IiwiX2xpdmVfcXVlcnlfdmlld19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiY2hpbGRyZW4iLCJzcGlubmVyIiwibm9FcnJvciIsImZuIiwiZ29hbF9wcm9ncmVzc19Hb2FsUHJvZ3Jlc3MiLCJHb2FsUHJvZ3Jlc3MiLCJjcmVhdGVQcm9ncmVzcyIsIm51bWJlck9mVGFza3MiLCJjb21wbGV0ZWROdW1iZXJPZlRhc2tzIiwibWF4aW11bVRhc2tzRGlzcGxheWVkIiwiYmFja2dyb3VuZENvbG9yIiwicHJvZ3Jlc3NDb2xvciIsInByb2dyZXNzIiwiZXh0ZXJuYWxfUmVhY3RfIiwidGFza05vIiwiZmlsbCIsImN4IiwiY3kiLCJyZW5kZXIiLCJkZWZhdWx0UHJvcHMiLCJudW1iZXJvZlRhc2tzIiwib3Blbl9jbG9zZV9ib3hfT3BlbkNsb3NlQm94IiwiT3BlbkNsb3NlQm94Iiwic3RhdGUiLCJoZWFkZXJPcGVuIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsInNldFN0YXRlIiwidGl0bGUiLCJoZWFkZXJDbGFzc05hbWUiLCJjb250ZW50Q2xhc3NOYW1lIiwiZGlzcGxheVByb2dyZXNzIiwicHJvZ3Jlc3NEYXRhIiwib25DbGljayIsIm9uT3BlbkNsb3NlIiwiS0VEIiwiZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSIsInRlcm0iLCJnZXRUZXJtU3RhcnRBbmRFbmQiLCJtb250aCIsInllYXIiLCJnZXRTY2hvb2xNb21lbnQiLCJ0aGlzWWVhciIsImlzQXV0dW1uIiwiYWNhZGVtaWNZZWFyIiwid2VlayIsImFkZFllYXIiLCJhWWVhciIsIm51bVllYXJzVG9BZGQiLCJ5ZWFyU3RyIiwicGFyc2VJbnQiLCJUZXh0SW5wdXQiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX2Zvcm1fZmllbGRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImF1dG9Gb2N1cyIsInNpemUiLCJvbkNoYW5nZSIsInBsYWNlaG9sZGVyIiwiRW1pdHRlciIsImluaXRpYWxWYWx1ZSIsIl9kaXNwYXRjaCIsIlZhbHVlIiwiX29ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9tYXBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9jb2xsZWN0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfZmliZXJfY29udGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwicmVhZCIsInJlc29sdmVkIiwic3Vic2NpcHRpb24iLCJjdXJyZW50RmliZXIiLCJjdXJyZW50IiwicHJlZml4IiwidG9Db2xsZWN0aW9uIiwiY29tYmluZUxhdGVzdCIsIm90aGVyIiwibXlTdWJzY3JpcHRpb24iLCJvdGhlclN1YnNjcmlwdGlvbiIsInZhbHVlcyIsIm1hcHBlZFN1YnNjcmlwdGlvbiIsInJldHVybmVkU3Vic2NyaXB0aW9uIiwib2JzZXJ2YWJsZU9yVmFsdWUiLCJPYnNlcnZhYmxlIiwiX3N1YnNjcmliZSIsIkZvcm1GaWVsZCIsImh0bWxGb3IiLCJub2RlIiwicmVjdWNoZWNrIiwiU2V0IiwiZmluZElkIiwiaGFzIiwiY2hpbGQiLCJjaGlsZElkIiwiX2pzX2Rpc3RfanNfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiQ29sbGVjdGlvbiIsIl92YWx1ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX2VtaXR0ZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl9tYXAiLCJlbWl0dGVyXzEiLCJmbGF0IiwibWUiLCJvcmRlckJ5IiwiZ3JvdXBCeSIsImZpcnN0IiwiYXJyIiwiUmVtb3ZlSXRlbSIsInN0eWxlIiwiX3V0aWxzX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ0ZW1wbGF0ZU9iamVjdF8xIiwibGl2ZVF1ZXJ5VmlldyIsIkxpdmVRdWVyeVZpZXciLCJpc0xvYWRpbmciLCJjb21wb25lbnREaWRNb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50Iiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFN0YXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwiX2NvbGxlY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9lbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJpbml0TWFwTWV0aG9kIiwiY3RvciIsInNjaG9vbF90ZXJtX1NjaG9vbFRlcm0iLCJTY2hvb2xUZXJtIiwiZGF0ZU9yU2Nob29sTW9tZW50Iiwic2Nob29sTW9tZW50Iiwic2Nob29sX21vbWVudCIsIm1vbWVudF9kZWZhdWx0IiwibmV4dFRlcm0iLCJwcmV2VGVybSIsInRvTG9jYWxlU3RyaW5nIiwic2hvcnRZZWFyIiwiZm9ybWF0TWVzc2FnZSIsImRlZmF1bHRNZXNzYWdlIiwiZGVmYXVsdE9wdGlvbnMiLCJpc0FwaU1ldGhvZCIsImYiLCJjYWNoZUV4cGlyYXRpb24iLCJlZHNjbGllbnRfRWRzQ2xpZW50IiwiRWRzQ2xpZW50IiwidXNlckVtYWlsR2V0dGVyIiwib25nb2luZ1Byb21pc2VzIiwiYXJnc0pzb24iLCJzdXNwZW5zZSIsImFwaSIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzdXNwZW5kaWZ5IiwiY2FjaGVkRW50cnkiLCJwcm9taXNlIiwidGltZW91dCIsIm1ha2VTdXNwZW5zZUFwaSIsInByaXZhdGl6aW5nQ2FjaGVCdXN0IiwiZ2V0QWN0aXZlQ291cnNlcyIsImNvdXJzZUNvZGUiLCJDb3Vyc2VDb2RlIiwicGVyaW9kTmFtZSIsIlBlcmlvZE5hbWUiLCJjb3Vyc2VzIiwiZXhfMSIsImdldExhdGVzdEFzc2Vzc21lbnRzIiwibGltaXQiLCJpc05hTiIsIkNvdW50IiwiYXNzZXNzbWVudHMiLCJnZXRTdHVkZW50R29hbHMiLCJzdHVkZW50R29hbHMiLCJnZXRTdHVkZW50RnV0dXJlQWJpbGl0aWVzIiwic3R1ZGVudEZ1dHVyZUFiaWxpdGllcyIsImdldFRlYWNoZXJUdXRvclN0dWRlbnRzIiwic3R1ZGVudHMiLCJnZXRTY2hvb2xUdWl0aW9uR3JvdXBzIiwic2Nob29sVHVpdGlvbkdyb3VwcyIsImdldFR1aXRpb25Hcm91cFN0dWRlbnRzIiwidHVpdGlvbkdyb3VwU3R1ZGVudHMiLCJnZXRTY2hvb2xUZWFjaGVycyIsInNjaG9vbFRlYWNoZXJzIiwiZ2V0QWNhZGVtaWNZZWFyVGVybXMiLCJzY2hvb2xMb2NhbGUiLCJkYXRlIiwibW9ja19lZHNfZGF0YSIsIlNvdXRoSW5kaWEiLCJpc1NhbWVPckFmdGVyIiwiZmlyc3RUZXJtIiwic3RhcnREYXRlIiwiaXNTYW1lT3JCZWZvcmUiLCJzZWNvbmRUZXJtIiwiZW5kRGF0ZSIsIk5vcnRoSW5kaWEiLCJob2xpZGF5cyIsImdldE1vbnRoIiwiZmlyc3RUZXJtWWVhciIsImdldEZ1bGxZZWFyIiwic2Vjb25kVGVybVllYXIiLCJmaXJzdFRlcm1ZZWFyTW9tZW50Iiwic2Vjb25kVGVybVllYXJNb21lbnQiLCJzdGFydEZpcnN0VGVybURhdGUiLCJzdGFydE9mIiwiZW5kRmlyc3RUZXJtRGF0ZSIsImVuZE9mIiwic3RhcnRTZWNvbmRUZXJtRGF0ZSIsImVuZFNlY29uZFRlcm1EYXRlIiwidG9EYXRlU3RyaW5nIiwiZWRzY2xpZW50X0VEU1BlcmlvZCIsIkVEU1BlcmlvZCIsInBlcmlvZFN0cmluZ09yU2Nob29sVGVybSIsInBlcmlvZCIsInNjaG9vbFRlcm0iLCJ2YWx1ZU9mIiwiQWRtaW5NZW51SXRlbXMiLCJfdXRpbHNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsInJvdXRlIiwidGVtcGxhdGVPYmplY3RfMiIsIk5vbkFkbWluTWVudUl0ZW1zIiwidGVtcGxhdGVPYmplY3RfMyIsInRlbXBsYXRlT2JqZWN0XzQiLCJzZXRDb3Vyc2VJbWFnZSIsIm9yaWdDb3Vyc2UiLCJob3N0IiwiaW1hZ2VJZCIsImtlZGJhY2tlbmRfY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJpbWFnZXMiLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJDb3Vyc2VCYW5uZXIiLCJpc1RlbXBsYXRlIiwiYmFja2dyb3VuZEltYWdlIiwiYWN0aXZlUGFnZSIsImlzQWRtaW4iLCJtZW51SXRlbXMiLCJvbkRyYWdPdmVyIiwiX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJvbkRyb3AiLCJmaWxlcyIsImZpbGUiLCJ0ZW1wbGF0ZU9iamVjdF81IiwiZm9ybSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidGVtcGxhdGVPYmplY3RfNiIsIm1hdGNoIiwiZ2V0QXNTdHJpbmciLCJ0ZW1wbGF0ZU9iamVjdF83Iiwib25Ecm9wSW1hZ2UiLCJpc0FjdGl2ZSIsImNhbGxiYWNrcyIsImdpdmVuUm91dGUiLCJyb3V0ZXMiLCJkZWZhdWx0Um91dGUiLCJyZWFjdF9yb3V0ZXJfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJnZXRPcmRlcmVkRG9jcyIsImRvY3MiLCJvcmRlciIsImFwcGVuZExlZnRvdmVycyIsIm1hcmtlZERvY3MiLCJsZWZ0T3ZlcnMiLCJyZXNvbHZlUmVxdWlyZW1lbnRPcmRlciIsIm9yZGVyRGVmaW5lciIsIm9yZGVyRGVmaW5pbmdEb2NPYnNlcnZhYmxlIiwia2VkYmFja2VuZF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJjb3Vyc2VDb2RlcyIsIl9nbG9iYWxzX2RiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJvcmRlckhvbGRlcnMiLCJfdXRpbHNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIm9yZGVySG9sZGVyIiwiY2NPcmRlciIsImtyT3JkZXIiLCJvYmpDbG9uZSIsImFzc2lnbiIsIlRleHRBcmVhRm9ybUZpZWxkIiwiY29scyIsInJvd3MiLCJGaWJlckNvbnRleHQiLCJwcm92aWRlcnMiLCJhZGRQcm92aWRlciIsImdldEN1cnJlbnRGaWJlciIsInNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzIiwicmVtb3ZlUHJvdmlkZXIiLCJzZXQiLCJnZXRTdWJqZWN0Q29kZXMiLCJnZXRTY2hvb2xZZWFycyIsImNvbXB1dGVDb3Vyc2VJbnN0YW5jZVRhZ3MiLCJjb21wdXRlVGFnc0Zyb21TY2hvb2xZZWFycyIsImNvbXB1dGVUYWdzRnJvbVN1YmplY3RDb2RlcyIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwic3ViamVjdENvZGVzIiwic2Nob29sWWVhcnMiLCJvdGhlclRhZ3MiLCJzdWJqZWN0VGFncyIsInN1YiIsImNvdXJzZVRhZ3MiLCJzY2hvb2xZZWFyIiwiZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzIiwidW5jb3ZlcmVkUmVxdWlyZW1lbnRzIiwia3IiLCJnZXRJZHNOb3RDb3ZlcmVkQnlUYXNrcyIsImdldElkc05vdENvdmVyZWRCeVJlcVJlZmVyZW5jaW5nRG9jcyIsInRlbXBsYXRlcyIsImRvY3NCZWluZ0NoZWNrZWQiLCJ1bmNvdmVyZWRJZHMiLCJzYW5pdHlDaGVjayIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwidGFza0lkIiwiaGFzRHVwbGljYXRlVGFza3MiLCJ0YXNrVXJscyIsInRhc2tzV2l0aFNhbWVVcmwiLCJoYXNFbXB0eU1vZHVsZU5hbWVzIiwibW9kdWxlTmFtZXMiLCJoYXNEdXBsaWNhdGVNb2R1bGVOYW1lcyIsImdldFRhc2tzUGVySWQiLCJmdXR1cmVBYmlsaXRpZXMiLCJmYSIsImdldFNvZnRBY2Nlc3NMaXN0IiwiZGEiLCJfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImFjY2VzcyIsInNldHVwSW50bCIsIkNvbXBvbmVudCIsIl9TZXR1cExhbmd1YWdlSW50bCIsInJlYWN0X2ludGxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInJlYWN0X2ludGxfbG9jYWxlX2RhdGFfZW5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwicmVhY3RfaW50bF9sb2NhbGVfZGF0YV9zdl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJtZXNzYWdlcyIsInN2IiwiX3RyYW5zbGF0aW9uc19zdl9qc29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJlbiIsIl90cmFuc2xhdGlvbnNfZW5fanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwibW9tZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19fZGVmYXVsdCIsImxvY2FsZSIsIl9nbG9iYWxzX0tFRF9jZmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyIsIktFRF9MT0NBTEUiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiU2VsZWN0UmVsYXRlZERvY3MiLCJtYXJrZWRJZHMiLCJtYXJrTW9kZSIsIm1pZ3JhdGVkSWRzIiwiZ3JvdXBlZE9wdGlvbnMiLCJncm91cCIsImdyb3VwcyIsIl91dGlsaXR5X2NvbXBvbmVudHNfb3Blbl9jbG9zZV9ib3hfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIm9wdGlvbiIsImlzTWFya2VkIiwiaXNNaWdyYXRlZCIsImlzVW5jb3ZlcmVkIiwib25NYXJrQ2hhbmdlZCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwiVHdvQ29sdW1uc1BhZ2UiLCJsZWZ0IiwicmlnaHRXaWR0aCIsInVzZXJzIiwic2Nob29sVHlwZSIsInNjaG9vbEdyYWRlIiwiRXJyb3JTdWNjZXNzRmVlZGJhY2siLCJlcnJvcnMiLCJpbmZvcyIsIl91bmhhbmRsZWRSZWplY3Rpb24iLCJfZXJyb3IiLCJfY3VzdG9tRXJyb3IiLCJfb25JbmZvIiwiX2RiV3JpdGVyRXJyb3IiLCJfZGJXcml0ZXJTdGF0ZUNoYW5nZWQiLCJfYWRkRXJyb3IiLCJkZXRhaWxzIiwiX2FkZEluZm8iLCJpbmZvIiwiaXNTYXZpbmciLCJkYldyaXRlcklzRWRpdGVkIiwiZGJXcml0ZXJJc1NhdmluZyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhc29uIiwicG9zaXRpb24iLCJ0b3AiLCJ3aWR0aCIsInBvaW50ZXJFdmVudHMiLCJkaXNwbGF5IiwibWFyZ2luIiwic2hvd0RldGFpbHMiLCJmbG9hdCIsIl9jb21wb25lbnRzX2NvdXJzZV9idWlsZGVyX3N1Yl9jb21wb25lbnRzX3JlbW92ZV9pdGVtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJyZW1vdmVFcnJvciIsInRvZ2dsZURldGFpbHMiLCJLbm93bGVkZ2VNYXRyaXgiLCJleHBsYWluZWRSZXF1aXJlbWVudHMiLCJpZHNUb01hcmtOb3RPayIsIm9uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZCIsImNvbHVtbnMiLCJyb3ciLCJncmFkZSIsInBOZXh0IiwiZ3JhZGVTdGVwIiwidG9VcHBlckNhc2UiLCJyZXF1aXJlbWVudCIsImlzTWFya2VkT0siLCJpc01hcmtlZE5vdE9LIiwicmVhZE9ubHkiLCJFTlZJUk9OTUVOVCIsIktFRF9BUElfVVJMIiwiRURTX0FQSV9VUkwiLCJLRURfVE9LRU5fVVJMIiwiS0VEX0NMSUVOVF9JRCIsIktFRF9DTElFTlRfU0VDUkVUIiwiS0VEX1NDSE9PTF9MT0NBTEUiLCJnZXRNZXJnZWRUb2tlblBhdGgiLCJzY29wZXMiLCJpbXBlcnNvbmF0aW9uUHJvcHMiLCJhY2Nlc3NfY29udHJvbCIsInRva2VuUGF0aFdpdGhvdXRRdWVyeSIsInRva2VuUXVlcnlTdHJpbmciLCJ0b2tlblBhdGhRdWVyeSIsImdldFRva2VuSWQiLCJtZXJnZWRUb2tlblBhdGgiLCJ1c2VyRW1haWwiLCJjcmVhdGVUZXN0VG9rZW5Qcm92aWRlciIsImNsaWVudHdlYiIsImluaXRpYWxVc2VyRW1haWwiLCJLRURfVE9LRU5fUEFUSCIsInNldF9iZWFyZXJfcHJvdmlkZXJzX21lcmdlZFRva2VuUGF0aCIsInJlc3BvbnNlVGV4dCIsIm9rIiwic2F2ZVVzZXJJbmZvIiwic3RvcmVkU2Vzc2lvblVzZXIiLCJsb2FkVXNlckluZm8iLCJnb29nbGVNZXJnZWRQYXRoIiwiZ29vZ2xlVG9rZW5Qcm92aWRlciIsImNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIiLCJlZHNDbGllbnQiLCJlZHNjbGllbnQiLCJFbGxpcHNpc0xvYWRlciIsImJvcmRlciIsInBhZGRpbmciLCJiYW5uZXJfTGF6eUJhbm5lciIsIkxhenlCYW5uZXIiLCJkcmFnU3RhdGUiLCJ0YWJCZWluZ0RyYWdnZWQiLCJ0YWJCZWluZ0hvdmVyZWQiLCJpbnNlcnRCZWZvcmUiLCJvcmlnaW5DbGllbnRYIiwibGF6eVByb3BzIiwib3ZlcmZsb3ciLCJsYXp5X2NvbnRlbnQiLCJjb3JuZXJCb3giLCJ0YWJzIiwiYnV0dG9ucyIsImFjdGl2ZVRhYiIsImJsb2NrcyIsInNvcnRhYmxlVGFicyIsIm9uVGFiRHJvcCIsImJsb2NrIiwic3RlcHMiLCJzdGVwIiwic3RlcE5vIiwiTGluayIsImRyYWdnYWJsZSIsIm9uRHJhZ1N0YXJ0IiwiZWZmZWN0QWxsb3dlZCIsImNsaWVudFgiLCJvbkRyYWdFbmQiLCJidG4iLCJCYW5uZXIiLCJDaGVja2xpc3QiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJhdmFpbGFibGUiLCJzZWxlY3RlZCIsImNyZWF0ZUVsZW1lbnQiLCJjaGVja2VkIiwiayIsIkVkaXRTY2hvb2wiLCJvdXRsaW5lIiwiX2NvdXJzZXNfY291cnNlX2Jhbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiZmVlZGJhY2siLCJmZWVkYmFja1VybCIsIkVkaXRTY2hvb2xOb0Jhbm5lciIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIm9yaWdTY2hvb2wiLCJpc0d5bW5hc2l1bSIsImlzUHJpbWFyeVNjaG9vbCIsImFkZFNjaG9vbEJyYW5jaCIsImRlbGV0ZVNjaG9vbCIsInByb21wdCIsInNjaG9vbEJyYW5jaCIsImJyXzEiLCJhcHByb3ZlZENoaWxkcmVuIiwiYWxlcnQiLCJlZGl0RXhpc3RpbmciLCJkaXNhYmxlZCIsInRhYkluZGV4IiwiZWRzU2Nob29sTmFtZUd5bW4iLCJlZHNTY2hvb2xOYW1lUHJpbSIsInJlYWN0X3JvdXRlcl9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsImNvbmZpcm0iLCJTaG93U3ViamVjdCIsInN1YmplY3QiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfc3ViX2NvbXBvbmVudHNfc3Bpbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiY291cnNlVGVtcGxhdGVzIiwiX2NvdXJzZXNfY291cnNlX2Jhbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX3Nob3dfc3ViamVjdF9pbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwicHVibGlzaENvdXJzZSIsImRyYWZ0UmVwbyIsImRlc3RpbmF0aW9uUmVwbyIsIl9nbG9iYWxzX2RiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJzY2hvb2xCcmFuY2hJZCIsIlNob3dTdWJqZWN0SW5uZXIiLCJfc3ViX2NvbXBvbmVudHNfc3Bpbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicHVibGlzaGFibGUiLCJwb2ludHMiLCJDaG9vc2VVc2VyIiwiX2RhdGFfdXNlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImZvbnRTdHlsZSIsImxpc3RDb3Vyc2VJbnN0YW5jZXMiLCJfZ2xvYmFsc19kYl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiRWRpdGFibGVTY2hvb2xMaXN0Iiwidmlld0NvdXJzZVVybCIsImN1cnNvciIsImNvdXJzZV9iYW5uZXIiLCJzY2hvb2xzX1NjaG9vbHNXaXRob3V0QmFubmVyIiwiU2Nob29sc1dpdGhvdXRCYW5uZXIiLCJnZXRDb3Vyc2VDb2Rlc0Zyb21UYWdzIiwiY291cnNlVGFnIiwiZ2V0U3RhbmRhcmRDb3Vyc2VzV2l0aE9yZGVyZWRSZXF1aXJlbWVudHMiLCJjb3Vyc2VDb2RlVGFncyIsIl9vcmRlcmVkX3JlcXVpcmVtZW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiTG9hZGluZ0luZGljYXRvciIsIl9saXZlX3F1ZXJ5X3ZpZXdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImtlZEJhY2tlbmRTdGF0dXMiLCJlZHNTdGF0dXMiLCJfY291cnNlX2J1aWxkZXJfc3ViX2NvbXBvbmVudHNfc3Bpbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicGFyc2VTa29sdmVya2V0WWVhcnMiLCJpblllYXIiLCJkaWZmU3ViamVjdEdsb2JhbFRleHRzIiwiZGJUZXh0TWFwIiwieG1sVGV4dHMiLCJyZW1vdmVkSWRzIiwibmV3VGV4dHMiLCJNYXAiLCJpZHNUb0FkZCIsIm5ld1RleHQiLCJvbGRUZXh0Iiwib2xkSWQiLCJfZmljdGl2ZU9sZElkIiwic3RvcFdvcmRzIiwiZ2V0TGV4ZW1lcyIsImh0bWwiLCJkb2N1bWVudCIsImlubmVySFRNTCIsImlubmVyVGV4dCIsInJlbW92ZVRhZ3MiLCJsZXhlbWUiLCJnZXRJZHNUb01pZ3JhdGUiLCJkYlRleHRzIiwidGV4dFR5cGUiLCJpZHNUb01pZ3JhdGUiLCJ4bWxTZXQiLCJkYlNldCIsImRiVGV4dCIsImxleGVtZXMiLCJtYXRjaExldmVsIiwieG1sU3BpbnN0ZXJzIiwieG1sVGV4dCIsImJlc3RNYXRjaCIsImZpbmRCZXN0TWF0Y2giLCJwYWlyIiwibXlNYXRjaExldmVsIiwibmV3SWQiLCJzcGluc3RlciIsImlzVHlwb0ZpeCIsInhtbExleGVtZXMiLCJnZXRNYXRjaExldmVsIiwicHAiLCJsZXhlbWVzMSIsImxleGVtZXMyIiwicG9pbnRzMSIsInBvaW50czIiLCJ3b3JkIiwicm91bmQiLCJtaWdyYXRlU3ViamVjdCIsImV4aXN0aW5nU3ViamVjdCIsImNvdXJzZVNldHMiLCJzdWJqZWN0VG9JbXBvcnQiLCJtaWdyYXRlQ291cnNlSW5zdGFuY2UiLCJjb3Vyc2VUb0ltcG9ydCIsInNob3dDaGFuZ2VzIiwic2hvd25DaGFuZ2VzIiwiYWJpbGl0eUlkc1RvTWlncmF0ZSIsIm5ld0FiaWxpdHlUZXh0cyIsImNjc1RvTWlncmF0ZSIsImtyc1RvTWlncmF0ZSIsImNoYW5nZSIsImNvbnRlbnQiLCJjY3NUb0FkZCIsImNyZWF0ZWRJZHMiLCJuZXdDQ1RleHRzIiwia3JzVG9BZGQiLCJuZXdLUlRleHRzIiwiZGVzY3JpcHRpb24iLCJtaWdyYXRlVGFza3MiLCJmZXRjaFRhc2tzSW5DaHVua3NXaXRoRWRnZXNUbyIsIm9sZElkcyIsImlkc1RvTWlncmF0ZVBlckNvdXJzZSIsImltcG9ydERhdGUiLCJvbGRNVCIsIm1pZ3JhdGVkVGV4dHMiLCJjaGFuZ2VEZXNjcmlwdGlvbnMiLCJtaWdyYXRpb25JbmZvIiwibmV3SWRfMSIsIl9mIiwidGFza0NvdXJzZUNvZGVzIiwibGlua2VkSWRzIiwiaWRzVG9NaWdyYXRlUGVyQ291cnNlXzEiLCJpZHNUb01pZ3JhdGVQZXJDb3Vyc2VfMV8xIiwiX2ciLCJuZXdJZF8yIiwiX2giLCJfaiIsIm5ld0lkXzMiLCJfayIsIl9sIiwidHh0IiwidGFza3NfMSIsInRhc2tzXzFfMSIsIm9yZGVyZWRBYmlsaXRpZXMiLCJvcmRlcmVkQWJpbGl0aWVzXzEiLCJvcmRlcmVkQWJpbGl0aWVzXzFfMSIsImNvdXJzZVNldHNfMSIsImNvdXJzZVNldHNfMV8xIiwidGVtcGxhdGUiLCJhYmlsaXRpZXNUb0FkZCIsIl9tIiwieG1sQ291cnNlIiwieG1sIiwiY2xlYXIiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZXNfMSIsImluc3RhbmNlc18xXzEiLCJjb3Vyc2VTZXRzXzIiLCJjb3Vyc2VTZXRzXzJfMSIsIl9vIiwiX3AiLCJkaWZmWG1sV2l0aERhdGFiYXNlIiwiY3QiLCJjb3Vyc2VfYnVpbGRlcl91dGlscyIsImV4cGFuZGVkQ291cnNlVGVtcGxhdGVzIiwiY291cnNlVGVtcGxhdGUiLCJ1cGxvYWRlZF9zdWJqZWN0X1VwbG9hZGVkU3ViamVjdCIsIlVwbG9hZGVkU3ViamVjdCIsImNvdXJzZXNFbGVtcyIsImNlbnRyYWxDb250ZW50RWxlbXMiLCJrbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zIiwic2hvd0Z1bGxUZXh0IiwiaXNXb3JraW5nIiwiaXNJbXBvcnRpbmciLCJhZGRDbGFzc2VzRm9yQ2hlcnJ5UGlja2VkRWxlbWVudHMiLCJkaWZmV2l0aEV4aXN0aW5nIiwiZXh0ZXJuYWxfalF1ZXJ5X2RlZmF1bHQiLCJwdXJwb3NlRWxlbSIsInBhcmVudCIsImFkZENsYXNzIiwiY2VudHJhbENvbnRlbnRzIiwiY2hlcnJ5UGlja0RhdGEiLCJza29sU3ViamVjdCIsImVsZW0iLCJwcmV2IiwiY3JlYXRlVGltZSIsImV4aXN0aW5nU3ViamVjdHMiLCJuZXdTdWJqZWN0XzEiLCJzdWJqZWN0QWJpbGl0aWVzIiwibmV3QWJpbGl0eSIsIm5ld0NvdXJzZSIsInN1YmplY3RDb2RlIiwic3ViamVjdElkIiwiY2NHcm91cCIsIm5ld0NlbnRyYWxDb250ZW50IiwiY3IiLCJuZXdLbm93bGVkZ2VSZXF1aXJlbWVudCIsInN1YmplY3RBYmlsaXRpZXNfMSIsInN1YmplY3RBYmlsaXRpZXNfMV8xIiwiY2FuY2VsIiwib25DYW5jZWwiLCJpbXBvcnQiLCJhbGxNdXRhdGlvbnMiLCJtdXQiLCJvbkltcG9ydFN1Y2Nlc3MiLCJmaXhMIiwiY29sU3BhbiIsInJlZiIsInB1cnBvc2UiLCJrbm93bmxlZGdlUmVxdWlyZW1lbnRzIiwic3ViamVjdHNfaW5uZXJfU3ViamVjdHNJbm5lciIsIlN1YmplY3RzSW5uZXIiLCJpc0xpc3RpbmdTdWJqZWN0cyIsImd5bW5hc2l1bVN1YmplY3RzIiwicHJpbWFyeVNjaG9vbFN1YmplY3RzIiwidXBsb2FkZWRTdWJqZWN0Iiwic3ViamVjdHMiLCJoYW5kbGVGaWxlU2VsZWN0IiwicGFyc2VYTUwiLCJ0eXBlT2ZTY2hvb2xpbmciLCJtb2RlbCIsInN1YmplY3RzX2lubmVyX3RlbXBsYXRlT2JqZWN0XzEiLCJzdGFkaXVtIiwic3ViamVjdHNfaW5uZXJfdGVtcGxhdGVPYmplY3RfMiIsImNlbnRyYWxDb250ZW50c0J5U3RhZGl1bV8xIiwia25vd2xlZGdlUmVxdWlyZW1lbnRzQnlTdGFkaXVtXzEiLCJzdWJqZWN0TmFtZV8xIiwic3ViamVjdENvZGVfMSIsInN1YmplY3RQdXJwb3NlIiwiY291cnNlc0J5U3RhZGl1bSIsInN1YmplY3RzX2lubmVyX3RlbXBsYXRlT2JqZWN0XzMiLCJsaW5rUHJlZml4IiwiLi9lbi1TRyIsIi4vZW4tU0cuanMiLCIuL2VuLWF1IiwiLi9lbi1hdS5qcyIsIi4vZW4tY2EiLCIuL2VuLWNhLmpzIiwiLi9lbi1nYiIsIi4vZW4tZ2IuanMiLCIuL2VuLWllIiwiLi9lbi1pZS5qcyIsIi4vZW4taWwiLCIuL2VuLWlsLmpzIiwiLi9lbi1ueiIsIi4vZW4tbnouanMiLCIuL3N2IiwiLi9zdi5qcyIsIndlYnBhY2tDb250ZXh0Iiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX3V0aWxzX3F1ZXJ5X3N0cmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiaW5jbHVkZUNTUyIsImNzc0ZpbGUiLCJ1cmkiLCJwTGFzdFNsYXNoIiwid3JpdGUiLCJwcm90b2NvbCIsInBhdGhuYW1lIiwibGFzdEluZGV4T2YiLCJpbmNsdWRlT3B0aW9uYWxDU1MiLCJ2MSIsInZlcnNpb25Gb2xkZXIiLCJOT0NTUyIsImNzc1ZlciIsInZlciIsImNyZWF0ZV9zdGFuZGFyZF9jb3Vyc2VfQ3JlYXRlU3RhbmRhcmRDb3Vyc2UiLCJfQ3JlYXRlU3RhbmRhcmRDb3Vyc2UiLCJjb3Vyc2VOYW1lIiwiY291cnNlVHlwZSIsInN1YmplY3ROYW1lIiwiY3JlYXRlQ291cnNlIiwiY291cnNlUHJvcGVydGllcyIsImNvdXJzZV9pbnN0YW5jZV90YWdzIiwiZ2xvYmFsIiwiaGlzdG9yeSIsImlzVmFsaWRTdGF0ZSIsImdpdmVNZXNzYWdlIiwiQ3JlYXRlU3RhbmRhcmRDb3Vyc2UiLCJ3aXRoUm91dGVyIiwiU2lkZUxpc3QiLCJjYXB0aW9uIiwiZWRpdExpbmsiLCJ2aWV3TGluayIsInBpbGxzIiwicGlsbCIsInNtYWxsVGV4dCIsIlN0YW5kYXJkQ291cnNlSW5zdGFuY2VMaXN0IiwibGl2ZV9xdWVyeV92aWV3IiwibGlzdF9jb3Vyc2VfaW5zdGFuY2VzIiwiS0VEX1NVQkpFQ1RfUExBTk5FUl9VUkwiLCJzdGFuZGFyZF9jb3Vyc2VfaW5zdGFuY2VfbGlzdF90ZW1wbGF0ZU9iamVjdF8xIiwic3RhbmRhcmRfY291cnNlX2luc3RhbmNlX2xpc3RfdGVtcGxhdGVPYmplY3RfMiIsImNvdXJzZUl0ZW1zIiwic3RlcENvdXJzZUl0ZW1zIiwidGhlbWVDb3Vyc2VJdGVtcyIsIm11bHRpc2VsZWN0X011bHRpc2VsZWN0IiwiTXVsdGlzZWxlY3QiLCJvcHRpb25zVmlzaWJsZSIsImdldE9wdGlvbnMiLCJmaWx0ZXJlZE9wdGlvbnMiLCJleHRlcm5hbF9SZWFjdF9kZWZhdWx0IiwiRnJhZ21lbnQiLCJvbkJsdXIiLCJvcHRpb25zXzEiLCJtdWx0aXNlbGVjdF90ZW1wbGF0ZU9iamVjdF8xIiwibXVsdGlzZWxlY3RfdGVtcGxhdGVPYmplY3RfMiIsImRlZmF1bHRWYWx1ZSIsInNlbGVjdGVkS2V5IiwiQ291cnNlQmxvY2tSZXF1aXJlbWVudHMiLCJnZXRfY291cnNlX2NvZGVzX2Zyb21fdGFncyIsImdldF9zdGFuZGFyZF9jb3Vyc2VzX3dpdGhfb3JkZXJlZF9yZXF1aXJlbWVudHMiLCJzaWJsaW5nQmxvY2tzIiwiYnVzaW5lc3NfbG9naWMiLCJlZGl0X2NvdXJzZV9ibG9ja19yZXF1aXJlbWVudHNfdGVtcGxhdGVPYmplY3RfMSIsIm9wZW5fY2xvc2VfYm94IiwiZWRpdF9jb3Vyc2VfYmxvY2tfcmVxdWlyZW1lbnRzX3RlbXBsYXRlT2JqZWN0XzIiLCJlZGl0X2NvdXJzZV9ibG9ja19yZXF1aXJlbWVudHNfdGVtcGxhdGVPYmplY3RfMyIsImJsb2NrS3JzIiwia25vd2xlZGdlX21hdHJpeCIsIm1hcmtlZElkIiwiaW52YWxpZEtyIiwibWFya2VkRG9jIiwiYmxvY2tBYmlsaXRpZXMiLCJzZWxlY3RfcmVsYXRlZF9kb2NzIiwiZWRpdF9jb3Vyc2VfYmxvY2tfcmVxdWlyZW1lbnRzX3RlbXBsYXRlT2JqZWN0XzQiLCJpbnZhbGlkQWJpbGl0eSIsImJsb2NrQ0NzIiwiZWRpdF9jb3Vyc2VfYmxvY2tfcmVxdWlyZW1lbnRzX3RlbXBsYXRlT2JqZWN0XzUiLCJpbnZhbGlkQ0MiLCJFZGl0U3RhbmRhcmRDb3Vyc2VCbG9ja3MiLCJlZGl0X3N0YW5kYXJkX2NvdXJzZV9ibG9ja3NfdGVtcGxhdGVPYmplY3RfMSIsIkNvdXJzZUJsb2NrU2V0dGluZ3MiLCJpc0xhc3RCbG9jayIsImxhc3RCbG9jayIsImJsb2NrTm8iLCJmaXJzdFN0ZXBObyIsInN0ZXBOdW1iZXJzIiwibmV3QmxvY2siLCJsb2NrZWQiLCJpbnRyb2R1Y3Rpb25UYWIiLCJ0YWJDbGFzcyIsInRhYlRpdGxlIiwidGVtcGxhdGVPYmplY3RfMTAiLCJ0ZW1wbGF0ZU9iamVjdF8xMSIsImFkZENvdXJzZUJsb2NrIiwiZWRpdF9zdGFuZGFyZF9jb3Vyc2VfYmxvY2tzX3RlbXBsYXRlT2JqZWN0XzIiLCJlZGl0X3N0YW5kYXJkX2NvdXJzZV9ibG9ja3NfdGVtcGxhdGVPYmplY3RfMyIsImVkaXRfc3RhbmRhcmRfY291cnNlX2Jsb2Nrc190ZW1wbGF0ZU9iamVjdF80IiwiZWRpdF9zdGFuZGFyZF9jb3Vyc2VfYmxvY2tzX3RlbXBsYXRlT2JqZWN0XzUiLCJlZGl0X3N0YW5kYXJkX2NvdXJzZV9ibG9ja3NfdGVtcGxhdGVPYmplY3RfNiIsInRlbXBsYXRlT2JqZWN0XzgiLCJyZW1vdmVfaXRlbSIsInRlbXBsYXRlT2JqZWN0XzkiLCJFZGl0U3RhbmRhcmRDb3Vyc2UiLCJlc193aXRoUm91dGVyIiwiZm9ybV9maWVsZF90ZXh0X2lucHV0IiwiZm9ybV9maWVsZF90ZXh0YXJlYSIsImZvcm1fZmllbGQiLCJlZGl0X3N0YW5kYXJkX2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8xIiwiZWRpdF9zdGFuZGFyZF9jb3Vyc2VfdGVtcGxhdGVPYmplY3RfMiIsImNoZWNrbGlzdCIsImVkaXRfc3RhbmRhcmRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzMiLCJlZGl0X3N0YW5kYXJkX2NvdXJzZV90ZW1wbGF0ZU9iamVjdF80IiwiZWRpdF9zdGFuZGFyZF9jb3Vyc2VfdGVtcGxhdGVPYmplY3RfNSIsImFsbG93QWRkVGFicyIsImFsbG93UmVtb3ZlVGFicyIsImFsbG93UmVvcmRlclRhYnMiLCJzZWxlY3RlZFBvbGljeSIsImVkaXRfc3RhbmRhcmRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzYiLCJzZWxlY3RlZE9wdGlvbnMiLCJlZGl0X3N0YW5kYXJkX2NvdXJzZV90ZW1wbGF0ZU9iamVjdF83IiwiZWRpdF9zdGFuZGFyZF9jb3Vyc2VfdGVtcGxhdGVPYmplY3RfOCIsImVkaXRfc3RhbmRhcmRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzkiLCJlZGl0X3N0YW5kYXJkX2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8xMCIsInNlbGVjdGVkU2Nob29sWWVhcnMiLCJlZGl0X3N0YW5kYXJkX2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8xMSIsInB1Ymxpc2hfY291cnNlIiwiRGVsZXRlU3RhbmRhcmRDb3Vyc2UiLCJicmFuY2hJZHMiLCJjb3Vyc2VCbG9ja0lkcyIsImNvdXJzZUNvbnRlbnRJZHMiLCJjb3Vyc2VUYWJJZHMiLCJnbyIsIlJlZGlyZWN0RnJvbVJvb3QiLCJSZWRpcmVjdCIsIlRBQlMiLCIkIiwiUk9VVEVTIiwiZXhhY3QiLCJ0YWJJZCIsInR3b19jb2x1bW5zX3BhZ2UiLCJzdWJqZWN0c19pbm5lciIsInNob3dfc3ViamVjdF9pbm5lciIsInJvdXRlc190ZW1wbGF0ZU9iamVjdF8xIiwiZWRpdF9zY2hvb2wiLCJyb3V0ZXNfdGVtcGxhdGVPYmplY3RfMiIsInJvdXRlc190ZW1wbGF0ZU9iamVjdF8zIiwicm91dGVzX3RlbXBsYXRlT2JqZWN0XzQiLCJUQUJTX0FSUkFZIiwiU3ViamVjdFBsYW5uZXJBZG1pbkFwcCIsIkhhc2hSb3V0ZXIiLCJpbmRleCIsIlJvdXRlIiwiY29tcG9uZW50Iiwicm91dGVQcm9wcyIsImJhbm5lciIsImVycm9yX3N1Y2Nlc3NfZmVlZGJhY2siLCJsb2FkaW5nX2luZGljYXRvciIsIl91dGlsc19pbmNsdWRlX29wdGlvbmFsX2Nzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiX3V0aWxzX2luY2x1ZGVfY3NzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJfQXBwIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl9jb21wb25lbnRzX3V0aWxpdHlfY29tcG9uZW50c19MYW5ndWFnZUNvbnRleHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXyIsIlByb3ZpZGVyIiwiX2NvbXBvbmVudHNfY291cnNlX2J1aWxkZXJfa3NfYWRtaW5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyIsIl91dGlsc19jaG9vc2VfdXNlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiQXBwIiwiX2NvbXBvbmVudHNfdXRpbGl0eV9jb21wb25lbnRzX1NldHVwTGFuZ3VhZ2VJbnRsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMV9fIiwicmVhY3RfaW50bF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTBfXyJdLCJtYXBwaW5ncyI6IndDQUNBLFNBQUFBLEVBQUFDLEdBUUEsSUFQQSxJQU1BQyxFQUFBQyxFQU5BQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FDQUssRUFBQUwsRUFBQSxH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UUFXeEMsT0FkbUJ0YixFQUFBLEVBQUFraUQsRUFBQTkwQyxHQU1qQjgwQyxFQUFBcm5ELFVBQUE4d0IsT0FBQSxXQUNTLElBQUF2TixFQUFBMWEsS0FBQXBFLE1BQUE4ZSxLQUNQLE9BQU8rakMsRUFBQSxFQUFJbnFDLFlBQ1hvcUMsRUFBQSxjQUFDQyxFQUFBLEVBQWdCQyxTQUFRLENBQUN2bEQsTUFBTyxDQUFFcWhCLEtBQUlBLElBQ3JDZ2tDLEVBQUEsY0FBQ0csRUFBQSxFQUFzQixPQUV2QkgsRUFBQSxjQUFDSSxFQUFBLEVBQVUsT0FFakJOLEVBZEEsQ0FBbUJFLEVBQUEsV0FnQmJLLEVBQU03bkQsT0FBQThuRCxFQUFBLEVBQUE5bkQsQ0FBVUEsT0FBQStuRCxFQUFBLEVBQUEvbkQsQ0FBV3NuRCxJQUNsQmovQyxFQUFBIiwiZmlsZSI6InRlc3RwYWdlY291cnNlYnVpbGRlcmtzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDg6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBfbmFtZV9cIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBfbmFtZV9cIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goWzE4MSwwXSk7XG4gXHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIHJlYWR5XG4gXHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7IiwiXHJcbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplRmlyc3QgKHN0cikge1xyXG4gICAgZm9yIChsZXQgaT0wLCBsPXN0ci5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgaWYgKHN0ci5jaGFyQ29kZUF0KGkpIDwgMHgyMDAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIGkpICsgc3RyW2ldLnRvTG9jYWxlVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKGkgKyAxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3RyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iaiwgZXh0ZW5zaW9uKSB7XHJcbiAgICBpZiAodHlwZW9mIGV4dGVuc2lvbiAhPT0gJ29iamVjdCcpIHJldHVybiBvYmo7XHJcbiAgICBPYmplY3Qua2V5cyhleHRlbnNpb24pLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBvYmpba2V5XSA9IGV4dGVuc2lvbltrZXldO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmU8VCxFPiAob2JqIDogVCwgZXh0ZW5zaW9uPzogRSkge1xyXG4gICAgbGV0IGNsb25lID0ge307XHJcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY2xvbmUsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkpO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoZXh0ZW5zaW9uKSBleHRlbmQoY2xvbmUsIGV4dGVuc2lvbik7XHJcbiAgICByZXR1cm4gY2xvbmUgYXMgKFQgJiBFKTtcclxufVxyXG5cclxuY29uc3QgY29uY2F0ID0gW10uY29uY2F0O1xyXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbjxUPiAoYSA6IChUIHwgVFtdKVtdKSB7XHJcbiAgICByZXR1cm4gY29uY2F0LmFwcGx5KFtdLCBhKSBhcyBUW107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlUHJvcDxUPihwcm9wOmtleW9mIFQpIHtcclxuICAgIHJldHVybiAoYTogVCxiOiBUKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYVByb3AgPSBhW3Byb3BdLCBiUHJvcCA9IGJbcHJvcF07XHJcbiAgICAgICAgcmV0dXJuIGFQcm9wID4gYlByb3AgPyAxIDogYVByb3AgPCBiUHJvcCA/IC0xIDogMDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVQcm9wcyhcclxuICAgIHByb3BzOiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuICAgIGxvY2FsZXM/OiBzdHJpbmcgfCBzdHJpbmdbXSxcclxuICAgIG9wdGlvbnM/OiBJbnRsLkNvbGxhdG9yT3B0aW9ucyk6IChhOiBhbnksIGI6IGFueSkgPT4gbnVtYmVyXHJcbntcclxuICAgIHByb3BzID0gQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc107XHJcblxyXG4gICAgY29uc3QgbG9jYWxlQ29tcGFyZSA9IChhLGIpID0+XHJcbiAgICAgICAgdHlwZW9mIGEgPT09ICdzdHJpbmcnID9cclxuICAgICAgICAgICAgYS5sb2NhbGVDb21wYXJlKGIsIGxvY2FsZXMsIG9wdGlvbnMpIDpcclxuICAgICAgICAgICAgYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XHJcblxyXG4gICAgZnVuY3Rpb24gY21wUGFydCAoYSxiLGZpcnN0UGFydDogc3RyaW5nLHJlc3Q6IHN0cmluZ1tdKSB7XHJcbiAgICAgICAgY29uc3QgZmlyc3RBID0gYVtmaXJzdFBhcnRdO1xyXG4gICAgICAgIGlmIChmaXJzdEEgPT0gbnVsbCkgcmV0dXJuIC0xO1xyXG4gICAgICAgIGNvbnN0IGZpcnN0QiA9IGJbZmlyc3RQYXJ0XTtcclxuICAgICAgICBpZiAoZmlyc3RCID09IG51bGwpIHJldHVybiAxO1xyXG4gICAgICAgIHJldHVybiByZXN0Lmxlbmd0aCA9PT0gMCA/XHJcbiAgICAgICAgICAgIGxvY2FsZUNvbXBhcmUoZmlyc3RBLCBmaXJzdEIpIDpcclxuICAgICAgICAgICAgY21wUGFydChmaXJzdEEsIGZpcnN0QiwgcmVzdFswXSwgcmVzdC5zbGljZSgxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByb3BzXHJcbiAgICAgICAgLm1hcChwcm9wID0+IHByb3Auc3BsaXQoJy4nKSlcclxuICAgICAgICAubWFwKChbZmlyc3RQYXJ0LCAuLi5yZXN0XSkgPT4gKGEsYikgPT4gY21wUGFydChhLGIsIGZpcnN0UGFydCwgcmVzdCkpXHJcbiAgICAgICAgLnJlZHVjZSgoY21wMSwgY21wMikgPT5cclxuICAgICAgICAgICAgKGEsYikgPT4gY21wMShhLGIpIHx8IGNtcDIoYSxiKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBMKHRleHQsIC4uLmFyZ3MpIHtcclxuICAgIGxldCBmaXJzdCA9IHRleHRbMF07XHJcbiAgICByZXR1cm4gYnVpbGRNZXNzYWdlKHRleHQsIGFyZ3MpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZE1lc3NhZ2UgKHRleHQsIGFyZ3MpIHtcclxuICAgIGxldCBydiA9IHRleHRbMF07XHJcbiAgICBmb3IgKGxldCBpPTEsIGw9dGV4dC5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgcnYgKz0gYXJnc1tpLTFdICsgdGV4dFtpXTtcclxuICAgIH1cclxuICAgIHJldHVybiBydjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRDPFQ+IHtcclxuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBUKSB7XHJcbiAgICAgICAgZXh0ZW5kKHRoaXMsIHRlbXBsYXRlKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVUaW1lUmV2aXZlciAoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFyIGE7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGEgPSAvXFwvRGF0ZVxcKChcXGQqKVxcKVxcLy8uZXhlYyh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCthWzFdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcbi8vbGV0IGluZm9TZXJpYWwgPSAxO1xyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0luZm8gKG1zZykge1xyXG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpbmZvJywgeyAnZGV0YWlsJzogbXNnIH0pO1xyXG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0Vycm9yIChlcnJNc2c6IHN0cmluZyB8IEVycm9yKSB7XHJcbiAgICBjb25zdCBtc2cgPSB0eXBlb2YgZXJyTXNnID09PSAnc3RyaW5nJyA/IGVyck1zZyA6IGVyck1zZy5tZXNzYWdlO1xyXG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdjdXN0b21lcnJvcicsIHsgJ2RldGFpbCc6IG1zZyB9KTtcclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcclxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1heExlbmd0aChzdHI6IHN0cmluZywgbWF4TGVuOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBzdHIubGVuZ3RoID4gbWF4TGVuID9cclxuICAgICAgICBzdHIuc3Vic3RyKDAsIG1heExlbiAtIDMpICsgXCIuLi5cIiA6XHJcbiAgICAgICAgc3RyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlUb0xvb2t1cDxUPihhOiBUW10sIGtleUFjY2Vzc29yOiAoaXRlbTogVCkgPT4gc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICBjb25zdCByZXN1bHQgOiB7W2tleTogc3RyaW5nXSA6IFRbXX0gPSB7fTtcclxuICAgIGZvciAobGV0IGk9MCwgbD1hLmxlbmd0aDsgaTxsOyArK2kpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gYVtpXTtcclxuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcclxuICAgICAgICBsZXQgYXJyYXkgPSByZXN1bHRba2V5XTtcclxuICAgICAgICBpZiAoYXJyYXkpIGFycmF5LnB1c2goaXRlbSk7XHJcbiAgICAgICAgZWxzZSByZXN1bHRba2V5XSA9IFtpdGVtXTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcnJheVRvTWFwPFQ+KGE6IFRbXSwga2V5QWNjZXNzb3I6IChpdGVtOiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA6IHtba2V5OiBzdHJpbmddIDogVH0gPSB7fTtcclxuICAgIGZvciAobGV0IGk9MCwgbD1hLmxlbmd0aDsgaTxsOyArK2kpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gYVtpXTtcclxuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcclxuICAgICAgICByZXN1bHRba2V5XSA9IGl0ZW07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlcnJ5UGlja1Byb3BzPFQ+IChvYmo6IFQsIHByb3BzVG9QaWNrOiBzdHJpbmdbXSk6IFBhcnRpYWw8VD4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIHByb3BzVG9QaWNrKSB7XHJcbiAgICAgIGlmIChwYXJhbSBpbiBvYmopIHJlc3VsdFtwYXJhbV0gPSBvYmpbcGFyYW1dO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdCBhcyBQYXJ0aWFsPFQ+O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3Q8VD4gKGE6IFRbXSwga2V5QWNjZXNzb3I/OiAoaXRlbTogVCkgPT4gYW55KSB7XHJcbiAgICBjb25zdCBtYXAgPSBhcnJheVRvTWFwKGEsIGtleUFjY2Vzc29yIHx8ICh4ID0+IHgpKTtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApLm1hcChrZXkgPT4gbWFwW2tleV0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0VxdWFscyhhOiBhbnksIGI6IGFueSkge1xyXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKCFhIHx8ICFiKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xyXG4gICAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcclxuICAgIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMoYik7XHJcbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcclxuICAgIGZvciAobGV0IGk9MCwgbD1rZXlzQS5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c0FbaV07XHJcbiAgICAgICAgaWYgKGtleXNCW2ldICE9PSBrZXkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbiIsImltcG9ydCB7VXNlciwgTGVhcm5pbmdNb2R1bGVUYXNrc30gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBCZWFyZXJQcm92aWRlciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHtVc2VyVGFza30gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQge0tlZFJlcG99IGZyb20gJy4uL3JlcG9zL2tlZC1yZXBvJztcclxuaW1wb3J0IHtFZHNDbGllbnR9IGZyb20gJy4uL2FwaXMvZWRzY2xpZW50JztcclxuaW1wb3J0IEtFRCBmcm9tICcuL2tlZCc7XHJcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJSZXBvIH0gZnJvbSAnLi4vcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwbyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEVudiB7XHJcbiAgICBjdXJyZW50VXNlcj86IFVzZXI7XHJcbiAgICBsZWFybmluZ01vZHVsZVRhc2tzPzogTGVhcm5pbmdNb2R1bGVUYXNrcztcclxuICAgIGJlYXJlclByb3ZpZGVyPzogQmVhcmVyUHJvdmlkZXI7XHJcbiAgICBnb29nbGVUb2tlblByb3ZpZGVyPzogQmVhcmVyUHJvdmlkZXI7XHJcbiAgICBrZWRCYWNrZW5kQ2xpZW50PzogS2VkQmFja2VuZENsaWVudDtcclxuICAgIGVkc0NsaWVudD86IEVkc0NsaWVudDtcclxuICAgIHVzZXJUYXNrc1JlcG8/O1xyXG4gICAgaGlkZGVuQ291cnNlc1JlcG8/O1xyXG4gICAgd2Vla05vdGVzUmVwbz87XHJcbiAgICBrZ1Rlcm1QbGFubmVyUmVwbz87XHJcbiAgICBrc1Rlcm1QbGFubmVyUmVwbz86IEtTVGVybVBsYW5uZXJSZXBvXHJcbiAgICB0dXRvcmVkOiBib29sZWFuO1xyXG4gICAgZXJyb3I/OiBFcnJvcjtcclxufVxyXG5cclxuaWYgKCFLRUQuZW52KSBLRUQuZW52ID0ge307XHJcblxyXG5leHBvcnQgZGVmYXVsdCBLRUQuZW52IGFzIEVudjtcclxuZXhwb3J0IGNvbnN0IGVudjogRW52ID0gS0VELmVudjtcclxuIiwiZXhwb3J0ICogZnJvbSAnLi9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudCc7IiwiaW1wb3J0IEtFRCBmcm9tICcuL0tFRCc7XHJcblxyXG4vKiBUaGlzIGRlZmF1bHQgY29uZmlndXJhdGlvbiBpcyB1c2VkIGFzIGEgZmFsbGJhY2suXHJcbk5vcm1hbGx5IGJvdGggdGVzdCBwYWdlcyBhbmQgcHJvZHVjdGlvbiBwYWdlcyB3aWxsIG92ZXJyaWRlIHRoZXNlIGNvbmZpZ3JhdGlvbnNcclxuKi9cclxuLypjb25zdCBkZWZhdWx0Q29uZmlndXJhdGlvbiA9IHtcclxuICAvLyBFbnZpcm9ubWVudFxyXG4gIEVOVklST05NRU5UOiAnZGV2ZWxvcG1lbnQnIGFzICdwcm9kdWN0aW9uJyB8ICdkZXZlbG9wbWVudCcgfCAndGVzdCcsXHJcbiAgLy8gQXV0aGVudGljYXRpb24gU2VydmVyOlxyXG4gIEtFRF9UT0tFTl9VUkw6ICdodHRwczovL2tlZGF1dGh0ZXN0LmF6dXJld2Vic2l0ZXMubmV0L3Rva2VuJyxcclxuICBLRURfVE9LRU5fUEFUSDogJy9hcGkvdG9rZW4uU2tyaXB0LnBvcnRsZXQ/c3YuY29udGVudHR5cGU9YXBwbGljYXRpb24vanNvbicsXHJcbiAgS0VEX0NMSUVOVF9JRDogJ2RldmNsaWVudCcsXHJcbiAgS0VEX0NMSUVOVF9TRUNSRVQ6ICc0ZlJkZlFwV3RKcWpUV2YnLFxyXG4gIC8vIFNlcnZpY2VzOlxyXG4gIEtFRF9BUElfVVJMOiAnaHR0cHM6Ly9rZWRiYWNrZW5kdGVzdC5henVyZXdlYnNpdGVzLm5ldC9hcGkvJywgIFxyXG4gIEVEU19BUElfVVJMOiAnaHR0cHM6Ly9lZHNwb3J0YWxvd2luYXBpLmF6dXJld2Vic2l0ZXMubmV0L2FwaS8nXHJcbn0qL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJS2VkQ29uZmlndXJhdGlvbiB7XHJcbiAgRU5WSVJPTk1FTlQ6ICdwcm9kdWN0aW9uJyB8ICdkZXZlbG9wbWVudCcgfCAndGVzdCc7XHJcbiAgS0VEX1JFQUxNOiBzdHJpbmc7XHJcbiAgS0VEX1RPS0VOX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9UT0tFTl9QQVRIOiBzdHJpbmc7XHJcbiAgS0VEX0NMSUVOVF9JRDogc3RyaW5nO1xyXG4gIEtFRF9DTElFTlRfU0VDUkVUOiBzdHJpbmc7XHJcbiAgS0VEX0FQSV9VUkw6IHN0cmluZztcclxuICBFRFNfQVBJX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9MT0NBTEU6IHN0cmluZztcclxuICBLRURfU0NIT09MX0xPQ0FMRTogc3RyaW5nO1xyXG4gIEtFRF9DT1VSU0VfQlVJTERFUl9VUkw6IHN0cmluZztcclxuICBLRURfQ09VUlNFX1ZJRVdFUl9VUkw6IHN0cmluZztcclxuICBLRURfU1VCSkVDVF9QTEFOTkVSX0FETUlOX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9TVUJKRUNUX1BMQU5ORVJfVVJMOiBzdHJpbmc7XHJcbiAgS0VEX0ZFQVRVUkVTOiBzdHJpbmc7XHJcbiAgS0VEX0tFRVBfQUxJVkVfVVJMOiBzdHJpbmc7XHJcbn07XHJcblxyXG5pZiAoIUtFRC5jZmcpIEtFRC5jZmcgPSB7fTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEtFRC5jZmcgYXMgSUtlZENvbmZpZ3VyYXRpb247XHJcbmV4cG9ydCBjb25zdCBjZmc6IElLZWRDb25maWd1cmF0aW9uID0gS0VELmNmZztcclxuIiwidmFyIEtlZEJhY2tlbmRTdWJzY3JpcHRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uKHN1YnNjcmliZXIsIGNvbGxlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XHJcbiAgICB9XHJcbiAgICBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5ub3RpZnlTdWJzY3JpYmVyID0gZnVuY3Rpb24gKGRhdGEsIGVycm9yKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyKFtdLCBlcnJvciwgdGhpcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IHRoaXMubGFzdE5vdGlmaWVkRGF0YSkgeyAvLyBXaWxsIGluLWZhY3QgYmUgZXF1YWwgYnkgcmVmZXJlbmNlIGlmIGRhdGEgaXMgc2FtZSBhcyBsYXN0IG5vdGlmaWNhdGlvbiAoYXMgd2UgdXNlIGFuIGltbXV0YWJsZSBhcHByb2FjaCBvbiBkYXRhKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0Tm90aWZpZWREYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcihkYXRhLCBlcnJvciwgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIoW10sIGV4LCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXgyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgbm90aWZ5aW5nIEtlZEJhY2tlbmRTdWJzY3JpYmVyOlwiLCBleDIsICdvcmlnaW5hbGx5IG5vdGlmaWVkIGVycm9yOicsIGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24udW5zdWJzY3JpYmUodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEtlZEJhY2tlbmRTdWJzY3JpcHRpb247XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEtlZEJhY2tlbmRTdWJzY3JpcHRpb24gfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkYmFja2VuZC1zdWJzY3JpcHRpb24uanMubWFwIiwiaW1wb3J0IHsgdGFibGVzIH0gZnJvbSAna2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb24nO1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFibGVGcm9tTGFiZWwodGFibGUsIGxhYmVsKSB7XHJcbiAgICByZXR1cm4gdGFibGVzW3RhYmxlXS5yZWxhdGlvbnNoaXBzW2xhYmVsXTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlBcnJheShxdWVyeSwgZGF0YSkge1xyXG4gICAgdmFyIGZpbHRlciA9IGdldEZpbHRlckZyb21RdWVyeShxdWVyeSk7XHJcbiAgICByZXR1cm4gZGF0YS5maWx0ZXIoZmlsdGVyKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gQU5EKGZpbHRlcjEsIGZpbHRlcjIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gZmlsdGVyMSh4KSAmJiBmaWx0ZXIyKHgpOyB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWx0ZXJGcm9tUXVlcnkocXVlcnkpIHtcclxuICAgIHZhciBmaWx0ZXIgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgIGlmIChxdWVyeS5mcm9tKVxyXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5kYXRlVGltZSA+PSBxdWVyeS5mcm9tOyB9KTtcclxuICAgIGlmIChxdWVyeS50bylcclxuICAgICAgICByZXR1cm4gQU5EKGZpbHRlciwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZGF0ZVRpbWUgPCBxdWVyeS50bzsgfSk7XHJcbiAgICBpZiAocXVlcnkuaWRzKVxyXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4gcXVlcnkuaWRzLmluY2x1ZGVzKHguaWQpOyB9KTtcclxuICAgIGlmIChxdWVyeS5uYW1lKVxyXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5uYW1lID09PSBxdWVyeS5uYW1lOyB9KTtcclxuICAgIGlmIChxdWVyeS50YWdzKVxyXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC50YWdzICYmIFtdLmNvbmNhdChxdWVyeS50YWdzIHx8IFtdKS5zb21lKGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHgudGFncy5pbmNsdWRlcyh0YWcpOyB9KTsgfSk7XHJcbiAgICAvLyBxdWVyeS5oYXNFZGdlc0Zyb20gYW5kIHF1ZXJ5Lmhhc0VkZ2VzVG8gY2Fubm90IGJ5IGZpbHRlcmVkIGhlcmVcclxuICAgIHJldHVybiBmaWx0ZXI7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGJyYW5jaFNlbnNpdGl2ZShtKSB7XHJcbiAgICByZXR1cm4gbS5vcCAhPT0gJ2RlbGV0ZSc7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdsb2JhbE9wKG0pIHtcclxuICAgIHJldHVybiBtLm9wID09PSAnY2xlYXItYnJhbmNoJyB8fCBtLm9wID09PSAnbWVyZ2UnO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImltcG9ydCAqIGFzIEpzb25TY2hlbWEgZnJvbSBcImtlZGJhY2tlbmQtc2NoZW1hL3NjaGVtYS5qc29uXCI7XHJcbmltcG9ydCB7IGdldFRhYmxlRnJvbUxhYmVsIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxudmFyIENhY2hlQnVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENhY2hlQnVzdCgpIHtcclxuICAgIH1cclxuICAgIENhY2hlQnVzdC5nZXRDYWNoZUJ1c3QgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5LCB1c2VyLCBpbmNsdWRlcykge1xyXG4gICAgICAgIHZhciBpbnZvbHZlZEl0ZW1zID0gQ2FjaGVCdXN0LmdldEludm9sdmVkSXRlbXModGFibGUsIHF1ZXJ5LCBpbmNsdWRlcyk7XHJcbiAgICAgICAgcmV0dXJuIGludm9sdmVkSXRlbXNcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjYWNoZS1idXN0LVwiICsgdXNlciArIFwiLVwiICsgaXRlbSk7IH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAhIXZhbHVlOyB9KVxyXG4gICAgICAgICAgICAuam9pbignLycpIHx8ICdzdGF0aWMnO1xyXG4gICAgfTtcclxuICAgIENhY2hlQnVzdC5pbnZhbGlkYXRlQ2FjaGUgPSBmdW5jdGlvbiAocmVxcywgdXNlcikge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBDYWNoZUJ1c3QuZ2V0Q2FjaGVJbnZhbGlkYXRpb25zKHJlcXMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IF9hW19pXTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYWNoZS1idXN0LVwiICsgdXNlciArIFwiLVwiICsgaXRlbSwgJycgKyBEYXRlLm5vdygpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2FjaGVCdXN0LmdldEludm9sdmVkSXRlbXMgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5LCBpbmNsdWRlcykge1xyXG4gICAgICAgIHZhciBoYXNFZGdlc0Zyb20gPSBxdWVyeS5oYXNFZGdlc0Zyb207XHJcbiAgICAgICAgdmFyIHJlbGF0ZWRUYWJsZXMgPSBpbmNsdWRlc1xyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gSnNvblNjaGVtYS50YWJsZXNbdGFibGVdLnJlbGF0aW9uc2hpcHNbbGFiZWxdOyB9KVxyXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh0YWJsZSkgeyByZXR1cm4gISF0YWJsZTsgfSk7XHJcbiAgICAgICAgaWYgKGhhc0VkZ2VzRnJvbSlcclxuICAgICAgICAgICAgcmVsYXRlZFRhYmxlcy5wdXNoKFwiaGVmXCIgKyB0YWJsZSk7XHJcbiAgICAgICAgcmV0dXJuIFt0YWJsZSwgJ21hc3RlcicsIHF1ZXJ5LmJyYW5jaElkXS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICEheDsgfSkuY29uY2F0KHJlbGF0ZWRUYWJsZXMpLnNvcnQoKTtcclxuICAgIH07XHJcbiAgICBDYWNoZUJ1c3QuZ2V0Q2FjaGVJbnZhbGlkYXRpb25zID0gZnVuY3Rpb24gKHJlcXMpIHtcclxuICAgICAgICB2YXIgaW52YWxpZGF0aW9uU2V0ID0ge307XHJcbiAgICAgICAgcmVxcy5mb3JFYWNoKGZ1bmN0aW9uIChyZXEpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChyZXEub3ApIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2FkZCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwdXQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS50YWJsZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbGluayc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd1bmxpbmsnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAndW5kby1saW5rJzpcclxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbcmVxLnNvdXJjZVRhYmxlXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W1wiaGVmLVwiICsgZ2V0VGFibGVGcm9tTGFiZWwocmVxLnNvdXJjZVRhYmxlLCByZXEubGFiZWwpXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjbGVhci1icmFuY2gnOlxyXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGlvblNldFtyZXEuYnJhbmNoSWRdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ21lcmdlJzpcclxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbcmVxLmJyYW5jaElkXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS50YXJnZXRCcmFuY2hJZCB8fCBcIm1hc3RlclwiXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoaW52YWxpZGF0aW9uU2V0KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQ2FjaGVCdXN0O1xyXG59KCkpO1xyXG5leHBvcnQgeyBDYWNoZUJ1c3QgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUtYnVzdC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlEZWx0YShkb2MsIGRlbHRhKSB7XHJcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlbHRhKTtcclxuICAgIHZhciB0YXJnZXREb2MgPSBkb2M7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMSA9IGtleXM7IF9pIDwga2V5c18xLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlzXzFbX2ldO1xyXG4gICAgICAgIGlmICh0YXJnZXREb2MgPT09IGRvYylcclxuICAgICAgICAgICAgdGFyZ2V0RG9jID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZG9jKTtcclxuICAgICAgICB2YXIgdmFsID0gZGVsdGFba2V5XTtcclxuICAgICAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXRhSW5zdHJ1Y3Rpb25zID0gT2JqZWN0LmtleXModmFsKVxyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkuc3RhcnRzV2l0aCgnJCcpOyB9KTtcclxuICAgICAgICAgICAgaWYgKG1ldGFJbnN0cnVjdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAobWkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWlWYWx1ZSA9IHZhbFttaV07XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJHVuc2V0XCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmcgb24gdGFyZ2V0IGRvYyFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERvYy4kd2FzVW5zZXQgPSB0cnVlOyAvLyBKdXN0IG1hcmsgaXQgZm9yIHJlLXJldHJpZXZhbCBhZnRlciBzdWNjZXNzZnVsIHBvc3RpbmcgY2hhbmdlcy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkYWRkXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNUb0FkZCA9IG1pVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9BZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJGFkZCBpbnN0cnVjdGlvbiBtdXN0IGNvbnRhaW4gYXJyYXlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0YXJnZXREb2Nba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0YXJnZXRBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QXJyYXkgPSB0YXJnZXRBcnJheS5zbGljZSgpOyAvLyBPbiBKUyBzaWRlLCB3ZSBtdXN0IGJlIGltbXV0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RG9jW2tleV0gPSB0YXJnZXRBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgdmFsdWVzVG9BZGRfMSA9IHZhbHVlc1RvQWRkOyBfaSA8IHZhbHVlc1RvQWRkXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSB2YWx1ZXNUb0FkZF8xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldEFycmF5LmluY2x1ZGVzKHYpKSB7IC8vIGF2b2lkIGR1cHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QXJyYXkucHVzaCh2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJHJlbW92ZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzVG9SZW1vdmVfMSA9IG1pVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9SZW1vdmVfMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIkcmVtb3ZlIGluc3RydWN0aW9uIG11c3QgY29udGFpbiBhcnJheVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRhcmdldERvY1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRhcmdldEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREb2Nba2V5XSA9IHRhcmdldEFycmF5LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gIXZhbHVlc1RvUmVtb3ZlXzEuaW5jbHVkZXModCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBtZXRhSW5zdHJ1Y3Rpb25zXzEgPSBtZXRhSW5zdHJ1Y3Rpb25zOyBfYSA8IG1ldGFJbnN0cnVjdGlvbnNfMS5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWkgPSBtZXRhSW5zdHJ1Y3Rpb25zXzFbX2FdO1xyXG4gICAgICAgICAgICAgICAgICAgIF9sb29wXzEobWkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0RG9jW2tleV0gPSB2YWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0RG9jO1xyXG59XHJcbi8vIHtuYW1lOiBcIlVsbGFcIn0sIHtuYW1lOiB7JHVuc2V0OjB9XHJcbi8vIHt0YWdzOiB7JGFkZDogXCJoZWpcIn19LCB7dGFnczogeyR1bnNldDowfVwifVxyXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VEZWx0YXMoZGVsdGExLCBkZWx0YTIsIF9hKSB7XHJcbiAgICB2YXIgcmVtb3ZlVW5zZXRQcm9wcyA9IChfYSA9PT0gdm9pZCAwID8geyByZW1vdmVVbnNldFByb3BzOiBmYWxzZSB9IDogX2EpLnJlbW92ZVVuc2V0UHJvcHM7XHJcbiAgICAvL3JldHVybiB7Li4uZGVsdGExLCAuLi5kZWx0YTJ9O1xyXG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkZWx0YTIpO1xyXG4gICAgdmFyIHRhcmdldERlbHRhID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZGVsdGExKTtcclxuICAgIGZvciAodmFyIF9pID0gMCwga2V5c18yID0ga2V5czsgX2kgPCBrZXlzXzIubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGtleXNfMltfaV07XHJcbiAgICAgICAgdmFyIHZhbCA9IGRlbHRhMltrZXldO1xyXG4gICAgICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgdmFyIG1ldGFJbnN0cnVjdGlvbnMgPSBPYmplY3Qua2V5cyh2YWwpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleS5zdGFydHNXaXRoKCckJyk7IH0pO1xyXG4gICAgICAgICAgICBpZiAobWV0YUluc3RydWN0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMiA9IGZ1bmN0aW9uIChtaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaVZhbHVlID0gdmFsW21pXTtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkdW5zZXRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbW92ZVVuc2V0UHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0RGVsdGFba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIG1hdHRlciBpZiB0YXJnZXREZWx0YSBpcyBlbXB0eSBvciBoYXMgdmFsdWUuIFNldCBpdCB0byB7JHVuc2V0OjB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIHRoZSB2ZXJ5IGVuZCByZXN1bHQgd2lsbCBoYXZlIHskdW5zZXQ6MH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREZWx0YVtrZXldID0geyAkdW5zZXQ6IDAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkYWRkXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNUb0FkZF8yID0gbWlWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNUb0FkZF8yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIiRhZGQgaW5zdHJ1Y3Rpb24gbXVzdCBjb250YWluIGFycmF5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldE1ldGFQcm9wID0gdGFyZ2V0RGVsdGFba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wID0gdGFyZ2V0TWV0YVByb3AgPyB0c2xpYl8xLl9fYXNzaWduKHt9LCB0YXJnZXRNZXRhUHJvcCkgOiB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERlbHRhW2tleV0gPSB0YXJnZXRNZXRhUHJvcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0LCBqdXN0IGNoZWNrIGlmIHRhcmdldCBtZXRhUHJvcCBoYXMgeyRyZW1vdmU6IFsuLi5pdGVtc119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBzbywgcmVtb3ZlIGFueSBlcXVhbCBpdGVtcyBmcm9tIHRoZXJlIGJlZm9yZSBtZXJnaW5nIHRoZSB7JGFkZDogWy4uLl19IGFycmF5cy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZW1vdmVBcnJheSA9IHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXRSZW1vdmVBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UmVtb3ZlQXJyYXkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiAhdmFsdWVzVG9BZGRfMi5pbmNsdWRlcyh0KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldE1ldGFQcm9wLiRyZW1vdmUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmICRyZW1vdmUgYXJyYXkgYmVjYW1lIGVtdHB5LiBSZW1vdmUgdGhlICRyZW1vdmUgcHJvcC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm93IGl0J3MgdGltZSB0byBtZXJnZSBvciBjcmVhdGUgdGFyZ2V0ICRhZGQgYXJyYXkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0QWRkQXJyYXkgPSB0YXJnZXRNZXRhUHJvcC4kYWRkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QWRkQXJyYXkgPSB0YXJnZXRBZGRBcnJheSA/IHRhcmdldEFkZEFycmF5LmNvbmNhdCh2YWx1ZXNUb0FkZF8yKSA6IHZhbHVlc1RvQWRkXzIuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wLiRhZGQgPSB0YXJnZXRBZGRBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkcmVtb3ZlXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNUb1JlbW92ZV8yID0gbWlWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNUb1JlbW92ZV8yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIiRyZW1vdmUgaW5zdHJ1Y3Rpb24gbXVzdCBjb250YWluIGFycmF5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldE1ldGFQcm9wID0gdGFyZ2V0RGVsdGFba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wID0gdGFyZ2V0TWV0YVByb3AgPyB0c2xpYl8xLl9fYXNzaWduKHt9LCB0YXJnZXRNZXRhUHJvcCkgOiB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERlbHRhW2tleV0gPSB0YXJnZXRNZXRhUHJvcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0LCBqdXN0IGNoZWNrIGlmIHRhcmdldCBtZXRhUHJvcCBoYXMgeyRhZGQ6IFsuLi5pdGVtc119XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBzbywgcmVtb3ZlIGFueSBlcXVhbCBpdGVtcyBmcm9tIHRoZXJlIGJlZm9yZSBtZXJnaW5nIHRoZSB7JHJlbW92ZTogWy4uLl19IGFycmF5cy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBZGRBcnJheSA9IHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXRBZGRBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcC4kYWRkID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QWRkQXJyYXkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiAhdmFsdWVzVG9SZW1vdmVfMi5pbmNsdWRlcyh0KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldE1ldGFQcm9wLiRhZGQubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmICRhZGQgYXJyYXkgYmVjYW1lIGVtdHB5LiBSZW1vdmUgdGhlICRhZGQgcHJvcC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRhcmdldE1ldGFQcm9wLiRhZGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm93IGl0J3MgdGltZSB0byBtZXJnZSBvciBjcmVhdGUgdGFyZ2V0ICRyZW1vdmUgYXJyYXkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0UmVtb3ZlQXJyYXkgPSB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UmVtb3ZlQXJyYXkgPSB0YXJnZXRSZW1vdmVBcnJheSA/IHRhcmdldFJlbW92ZUFycmF5LmNvbmNhdCh2YWx1ZXNUb1JlbW92ZV8yKSA6IHZhbHVlc1RvUmVtb3ZlXzIuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wLiRyZW1vdmUgPSB0YXJnZXRSZW1vdmVBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgbWV0YUluc3RydWN0aW9uc18yID0gbWV0YUluc3RydWN0aW9uczsgX2IgPCBtZXRhSW5zdHJ1Y3Rpb25zXzIubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pID0gbWV0YUluc3RydWN0aW9uc18yW19iXTtcclxuICAgICAgICAgICAgICAgICAgICBfbG9vcF8yKG1pKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhcmdldERlbHRhW2tleV0gPSB2YWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0RGVsdGE7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsdGEtbWVyZ2UuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgdXBkYXRlQXJyYXkgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMnO1xyXG5pbXBvcnQgeyBicmFuY2hTZW5zaXRpdmUsIGdldFRhYmxlRnJvbUxhYmVsIH0gZnJvbSAnLi91dGlscyc7XHJcbmltcG9ydCB7IGFwcGx5RGVsdGEgfSBmcm9tICcuL2RlbHRhLW1lcmdlJztcclxudmFyIEtlZEJhY2tlbmRRdWVyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRRdWVyeSh0YWJsZSwgcXVlcnksIHVzZXIsIHJlcG8sIG11dGF0aW9uUXVldWUpIHtcclxuICAgICAgICB0aGlzLnRhYmxlID0gdGFibGU7XHJcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgICAgIHRoaXMudXNlciA9IHVzZXI7XHJcbiAgICAgICAgdGhpcy5yZXBvID0gcmVwbztcclxuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IFtdO1xyXG4gICAgICAgIHRoaXMuZ290SW5pdGlhbFJlc3BvbnNlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbnZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5sb2FkZWRWZXJzaW9uID0gMDtcclxuICAgICAgICB0aGlzLl9sb2FkUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pbmNsdWRlcyA9IHF1ZXJ5LmluY2x1ZGUgP1xyXG4gICAgICAgICAgICB0eXBlb2YgcXVlcnkuaW5jbHVkZSA9PT0gJ3N0cmluZycgP1xyXG4gICAgICAgICAgICAgICAgW3F1ZXJ5LmluY2x1ZGVdIDpcclxuICAgICAgICAgICAgICAgIHF1ZXJ5LmluY2x1ZGUgOlxyXG4gICAgICAgICAgICBbXTtcclxuICAgIH1cclxuICAgIEtlZEJhY2tlbmRRdWVyeS5xdWVyeUtleSA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnkpIHtcclxuICAgICAgICB2YXIgbXV0YXRpb25zT25FbXB0eSA9IHF1ZXJ5Lm11dGF0aW9uc09uRW1wdHksIGNvbXBhcmFibGVQcm9wcyA9IHRzbGliXzEuX19yZXN0KHF1ZXJ5LCBbXCJtdXRhdGlvbnNPbkVtcHR5XCJdKTtcclxuICAgICAgICByZXR1cm4gdGFibGUgKyBKU09OLnN0cmluZ2lmeShjb21wYXJhYmxlUHJvcHMpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLCBcInF1ZXJ5S2V5XCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtlZEJhY2tlbmRRdWVyeS5xdWVyeUtleSh0aGlzLnRhYmxlLCB0aGlzLnF1ZXJ5KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YSwgZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLmdvdEluaXRpYWxSZXNwb25zZSAmJiAhdGhpcy5pbnZhbGlkKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLmdldERhdGFXaXRoTXV0YXRpb25zQXBwbGllZCh0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCksIHRydWUsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlTdWJzY3JpYmVyKGRhdGEsIHRoaXMuZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLnF1ZXJ5TG9jYWxseSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeVN1YnNjcmliZXIoZGF0YSwgdGhpcy5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2FkKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBsb2FkUHJvbWlzZTtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nb3RJbml0aWFsUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG11dGF0aW9uc09uRW1wdHkgc2hvdWxkIG5ldmVyIGJlIHVzZWQgdHdpY2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5xdWVyeS5tdXRhdGlvbnNPbkVtcHR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCF2ZXJzaW9uICYmIHRoaXMuX2xvYWRQcm9taXNlKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX2xvYWRQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxvYWRpbmcgaXMgb25nb2luZywgYW5kIGNhbGxlciBkb2VzIG5vdCByZXF1aXJlIGEgcmVjZW50IHJlZnJlc2guXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2FpdCBmb3IgdGhlIG9uZ29pbmcgbG9hZCB0byBjb21wbGV0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IHZlcnNpb24gfHwgdGhpcy5yZXBvLndyaXRlci5wZXJzaXN0ZWRWZXJzaW9uLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkUHJvbWlzZSA9IHRoaXMuX2xvYWRQcm9taXNlID0gdGhpcy5fbG9hZCh2ZXJzaW9uKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2xvYWRQcm9taXNlID09PSBsb2FkUHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmxvYWRlZFZlcnNpb24gPSBNYXRoLm1heChfdGhpcy5sb2FkZWRWZXJzaW9uLCB2ZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2xvYWRQcm9taXNlID09PSBsb2FkUHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vb25lIGhhcyByZWZyZXNoZWQgb3VyIGxvYWQuIFRoZSBlcnJvciBpcyB0aGUgZmluYWwgcmVzdWx0LiBTZXQgaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2xvYWRQcm9taXNlID09PSBsb2FkUHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vb25lIGhhcyByZWZyZXNoZWQgb3VyIGxvYWQuIFdlJ3JlIGZpbmlzaGVkLiBEYXRhIG9yIGVycm9yIGlzIGFscmVhZHkgc2V0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgZ290SW5pdGlhbFJlc3BvbnNlIHRvIHRydWUgYW5kIG5vdGlmeSBzdWJzY3JpYmVycy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbG9hZFByb21pc2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmdvdEluaXRpYWxSZXNwb25zZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubm90aWZ5U3Vic2NyaWJlcnMoX3RoaXMubXV0YXRpb25RdWV1ZS5nZXQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBIG1vcmUgcmVjZW50IGNhbGwgdG8gbG9hZCgpIGlzIG9uZ29pbmcsIE9SIHdhcyBvbmdvaW5nIGJ1dCByZXNwb25kZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWZvcmUgdXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW4gYW55IGNhc2UgcmV0dXJuIHRoaXMuX2xvYWRQcm9taXNlLiBJZiBpdCdzIG9uZ29pbmcgd2UnbGwgd2FpdCBmb3IgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBmaW5pc2guIElmIGl0J3MgbnVsbCwgd2UnbGwgYmUgcmV0dXJuaW5nIGZpbmFsbHkgaGVyZSB3aXRob3V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55IGFjdGlvbiwgYmVjYXVzZSB0aGUgYWN0aW9uIHdhcyB0YWtlbiBieSB0aGUgcmVmcmVzaGVyLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fbG9hZFByb21pc2U7IC8vIFdhaXQgZm9yIHRoZSByZWZyZXNoZWQgbG9hZCB0byBjb21wbGV0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgbG9hZFByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuX2xvYWQgPSBmdW5jdGlvbiAodmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5tdXRhdGlvblF1ZXVlLmFmZmVjdHNRdWVyeSh0aGlzLnRhYmxlLCB0aGlzLnF1ZXJ5LCB0aGlzLmluY2x1ZGVzKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBvdXRnb2luZyBtdXRhdGlvbnMgdGhhdCBhZmZlY3RzIHRoaXMgcXVlcnkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gd2FpdCB0aWxsIHRoZXkgcmVhY2ggc2VydmVyIGFuZCBzZXJ2ZXIgcmVzcG9uZHMgd2l0aCBPSyBiZWZvcmUgcXVlcnlpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNlcnZlci4gT3RoZXJ3aXNlLCB3ZSBtYXkgZ2V0IGluYWNjdXJhdGUgZGF0YSBmcm9tIHNlcnZlci5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZXBvLndyaXRlci53YWl0Rm9yVmVyc2lvblRvUGVyc2lzdCh2ZXJzaW9uKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBhcmUgb3V0Z29pbmcgbXV0YXRpb25zIHRoYXQgYWZmZWN0cyB0aGlzIHF1ZXJ5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIHdhaXQgdGlsbCB0aGV5IHJlYWNoIHNlcnZlciBhbmQgc2VydmVyIHJlc3BvbmRzIHdpdGggT0sgYmVmb3JlIHF1ZXJ5aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzZXJ2ZXIuIE90aGVyd2lzZSwgd2UgbWF5IGdldCBpbmFjY3VyYXRlIGRhdGEgZnJvbSBzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5xdWVyeVNlcnZlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IHRoaXMuc3Vic2NyaXB0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgIT09IHN1YnNjcmlwdGlvbjsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5jb21taXRNdXRhdGlvbnMgPSBmdW5jdGlvbiAobXV0YXRpb25zLCB2ZXJzaW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfaSwgbXV0YXRpb25zXzEsIG0sIGRhdGE7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGEpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaSA9IDAsIG11dGF0aW9uc18xID0gbXV0YXRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShfaSA8IG11dGF0aW9uc18xLmxlbmd0aCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gbXV0YXRpb25zXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtLm9wID09PSAnY2xlYXItYnJhbmNoJyAmJiAobS5icmFuY2hJZCA9PT0gdGhpcy5xdWVyeS5icmFuY2hJZCkpKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZWZyZXNoT3JJbnZhbGlkYXRlKHZlcnNpb24pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5vcCA9PT0gJ21lcmdlJyAmJiAoIW0udGFyZ2V0QnJhbmNoSWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uYnJhbmNoSWQgPT09IHRoaXMucXVlcnkuYnJhbmNoSWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udGFyZ2V0QnJhbmNoSWQgPT09IHRoaXMucXVlcnkuYnJhbmNoSWQpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaE9ySW52YWxpZGF0ZSh2ZXJzaW9uKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG0ub3AgPT09ICd1cGRhdGUnICYmICgobS5kZWx0YURvYy50YWdzICYmIHRoaXMucXVlcnkudGFncykgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtLmRlbHRhRG9jLm5hbWUgJiYgdGhpcy5xdWVyeS5uYW1lKSkpKSByZXR1cm4gWzMgLypicmVhayovLCA3XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSB0YWcgbWF5IGhhdmUgYmVlbiBhZGRlZCwgb3IgcmVuYW1lZCwgYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBxdWVyeSBpcyBkZXBlbmRlbnQgb24gdGhlIHNhbWUgcHJvcGVydHkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBxdWVyeSBtdXN0IGJlIHJlZnJlc2hlZCBmcm9tIHNlcnZlciBhcyB3ZSBjYW5ub3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tbWl0IHRoZSBtdXRhdGlvbnMgbG9jYWxseSBhcyB3ZSBkb24ndCBoYXZlIGFsbCBpbmZvLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hPckludmFsaWRhdGUodmVyc2lvbildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSB0YWcgbWF5IGhhdmUgYmVlbiBhZGRlZCwgb3IgcmVuYW1lZCwgYW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBxdWVyeSBpcyBkZXBlbmRlbnQgb24gdGhlIHNhbWUgcHJvcGVydHkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBxdWVyeSBtdXN0IGJlIHJlZnJlc2hlZCBmcm9tIHNlcnZlciBhcyB3ZSBjYW5ub3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tbWl0IHRoZSBtdXRhdGlvbnMgbG9jYWxseSBhcyB3ZSBkb24ndCBoYXZlIGFsbCBpbmZvLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkKG11dGF0aW9ucywgZmFsc2UsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gOTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5yZWZyZXNoT3JJbnZhbGlkYXRlID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnN1YnNjcmlwdGlvbnMubGVuZ3RoID09PSAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW52YWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2FkKHZlcnNpb24pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLm5vdGlmeVN1YnNjcmliZXJzID0gZnVuY3Rpb24gKG9wdGltaXN0aWNNdXRhdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5nb3RJbml0aWFsUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGFfMSA9IHRoaXMuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkKG9wdGltaXN0aWNNdXRhdGlvbnMsIHRydWUsIHRoaXMuZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICBzLm5vdGlmeVN1YnNjcmliZXIoZGF0YV8xLCBfdGhpcy5lcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLnF1ZXJ5TG9jYWxseSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZXBvLnF1ZXJ5U2V0LnF1ZXJ5TG9jYWxseSh0aGlzLnRhYmxlLCB0aGlzLnF1ZXJ5LCB0aGlzLmluY2x1ZGVzKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLnF1ZXJ5U2VydmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlcG8uZ2V0Q2xpZW50KCkubGlzdCh0aGlzLnRhYmxlLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLnF1ZXJ5KSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGRhdGFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLmdldERhdGFXaXRoTXV0YXRpb25zQXBwbGllZCA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIG9wdGltaXN0aWMsIGRhdGEpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtdXRhdGlvbikge1xyXG4gICAgICAgICAgICBkYXRhID0gX3RoaXMuYXBwbHlNdXRhdGlvbnNPbkRhdGEoZGF0YSwgbXV0YXRpb24sIG9wdGltaXN0aWMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuYXBwbHlNdXRhdGlvbnNPbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSwgbSwgb3B0aW1pc3RpYykge1xyXG4gICAgICAgIGlmIChicmFuY2hTZW5zaXRpdmUobSkgJiYgbS5icmFuY2hJZCAhPSB0aGlzLnF1ZXJ5LmJyYW5jaElkKVxyXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICB2YXIgX2EgPSB0aGlzLCB0YWJsZSA9IF9hLnRhYmxlLCBpbmNsdWRlcyA9IF9hLmluY2x1ZGVzLCBsaXN0T3B0aW9ucyA9IF9hLnF1ZXJ5O1xyXG4gICAgICAgIHZhciBzb3VyY2VJZHMgPSBsaXN0T3B0aW9ucy5oYXNFZGdlc0Zyb20gPyBbXS5jb25jYXQobGlzdE9wdGlvbnMuaGFzRWRnZXNGcm9tIHx8IFtdKSA6IFtdO1xyXG4gICAgICAgIHZhciByZXF1ZXN0ZWRUYWdzID0gbGlzdE9wdGlvbnMudGFncyA/IFtdLmNvbmNhdChsaXN0T3B0aW9ucy50YWdzIHx8IFtdKSA6IFtdO1xyXG4gICAgICAgIHN3aXRjaCAobS5vcCkge1xyXG4gICAgICAgICAgICBjYXNlICd1cGRhdGUnOiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlQXJyYXkoZGF0YSwgZnVuY3Rpb24gKGRvYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2MuaWQgPT09IG0uaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgZGVsdGEgb24gdXBkYXRlZCBkb2N1bWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZERvYyA9IGFwcGx5RGVsdGEoZG9jLCBtLmRlbHRhRG9jKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGltaXN0aWMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRG9jLiRtZXRhID0gJ3VwZGF0aW5nJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWREb2M7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGlkIGRvZXMgbm90IGFwcGx5IHRvIHRoaXMgZG9jLCBzZWFyY2ggaW4gZ3JhcGhzIHRoZSBpZCBpcyBmb3VuZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFtb25nIGdyYXBoIGluY2x1ZGVkIGRvY3MsIGFuZCBpZiBzbywgdXBkYXRlIHRoYXQgb25lOlxyXG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluY2x1ZGVkRG9jcyA9IGRvY1tsYWJlbF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlZERvY3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkQXJyYXkgPSB1cGRhdGVBcnJheShpbmNsdWRlZERvY3MsIGZ1bmN0aW9uIChyZWxhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbGF0ZWQuaWQgIT09IG0uaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWxhdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkUmVsYXRlZCA9IGFwcGx5RGVsdGEocmVsYXRlZCwgbS5kZWx0YURvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGltaXN0aWMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRSZWxhdGVkLiRtZXRhID0gJ3VwZGF0aW5nJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlZFJlbGF0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkQXJyYXkgIT09IGluY2x1ZGVkRG9jcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRvYywgKF9hID0ge30sIF9hW2xhYmVsXSA9IHVwZGF0ZWRBcnJheSwgX2EpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlICdhZGQtcmVsYXRlZCc6XHJcbiAgICAgICAgICAgICAgICBpZiAodGFibGUgPT09IG0udGFibGUgJiYgaW5jbHVkZXMuaW5kZXhPZihtLmdyYXBoUHJvcCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgZXhwcmVzc2lvbiBpcyBgZGIuY291cnNlQmxvY2tzLi4uLndoYXRldmVyLi4gLmluY2x1ZGUoXCJhYmlsaXRpZXNcIilgLCBkZXRlY3Q6IGRiLmNvdXJzZUJsb2Nrcy5hZGRSZWxhdGVkKGJsb2NrSWQsICdhYmlsaXRpZXMnLCAuLi4pXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gLi4uYmVjYXVzZSB0YWJsZSA9ICdjb3Vyc2VCbG9ja3MnIGFuZCBpbmNsdWRlcyBoYXMgXCJhYmlsaXRpZXNcIi5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlQXJyYXkoZGF0YSwgZnVuY3Rpb24gKGRvYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2MuaWQgIT09IG0uaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVsYXRlZERvYyA9IHRzbGliXzEuX19hc3NpZ24oe30sIG0ucmVsYXRlZERvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpbWlzdGljKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZERvYy4kbWV0YSA9ICdhZGRpbmcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZG9jLCAoX2EgPSB7fSwgX2FbbS5ncmFwaFByb3BdID0gZG9jW20uZ3JhcGhQcm9wXS5jb25jYXQoW3JlbGF0ZWREb2NdKSwgX2EpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsaXN0T3B0aW9ucy5oYXNFZGdlc0Zyb20pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlSWRzLmluY2x1ZGVzKG0uaWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGV4cHJlc3Npb24gaXM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgYGRiLmNvdXJzZUJsb2Nrcy5oYXNFZGdlc0Zyb20oW2NvdXJzZUlkXSlgICAobWVhbmluZyB0YWJsZT0nY291cnNlQmxvY2tzJyBhbmQgc291cmNlSWRzIGluY2x1ZGVzIGNvdXJzZUlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAsIGRldGVjdDogZGIuY291cnNlSW5zdGFuY2VzLmFkZFJlbGF0ZWQoY291cnNlSWQsICdjb3Vyc2VCbG9ja3MnLCAuLi4uKSAvLyBtLmdyYXBoUHJvcCA9PT0gJ2Jsb2NrcyctLT4gZ2V0VGFibGVGcm9tTGFiZWwgLS0+ICdjb3Vyc2VCbG9ja3MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZSA9PT0gZ2V0VGFibGVGcm9tTGFiZWwobS50YWJsZSwgbS5ncmFwaFByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxpc3RPcHRpb25zLnRhZ3MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuY29uY2F0KHRoaXMuc2V0R3JhcGhQcm9wcyhtLnJlbGF0ZWREb2MpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnJlbGF0ZWREb2MudGFncyAmJiByZXF1ZXN0ZWRUYWdzLnNvbWUoZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gbS5yZWxhdGVkRG9jLnRhZ3MuaW5jbHVkZXModGFnKTsgfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb25jYXQodGhpcy5zZXRHcmFwaFByb3BzKG0ucmVsYXRlZERvYykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RPcHRpb25zLmlkcyAmJiBsaXN0T3B0aW9ucy5pZHMuc29tZShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGlkID09PSBtLnJlbGF0ZWREb2MuaWQ7IH0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBjZXJ0YWluIElEIGlzIG9ic2VydmVkLiBBIGRvYyB3aXRoIHRoaXMgaWQgaXMgYmVpbmcgYWRkZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBkb2MgdG8gdGhlIHJlc3VsdC4gRXhhY3RseSB0aGlzIFdJTEwgaGFwcGVuIGluIHRoZSBmb2xsb3dpbmcgdHlwaWNhbCBzY2VuYXJpbzpcclxuICAgICAgICAgICAgICAgICAgICAvLyAxLiBVc2VyIGFkZHMgYSByZWxhdGVkIGRvY3VtZW50IHRvIGEgbGlzdC5cclxuICAgICAgICAgICAgICAgICAgICAvLyAyLiBEb2N1bWVudCByZW1haW5zIHdpdGhpbiB0aGUgTXV0YXRpb25RdWV1ZSB3aGlsZSBiYXRjaC1yZXF1ZXN0IGlzIGJlaW5nIHByb2Nlc3NlZCBieSBzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gMy4gVXNlciBjbGlja3MgdGhlIGFkZGVkIGl0ZW0gdG8gZWRpdCBvciB2aWV3IGl0IChvciBvdXIgY29tcG9uZW50IHJlZGlyZWN0cyB0byBpdHMgZWRpdG9yKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDQuIEEgbmV3IHF1ZXJ5IG9mIHRoYXQgcGFydGljdWxhciBJRCBpcyBzdWJzY3JpYmVkIHRvIHtpZHM9W3RoZUlkXX1cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICBLZWRCYWNrZW5kUXVlcnkuc3Vic2NyaWJlIHRoZW4gZG9lcyB0aGlzOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgMS4gQ2FsbCBxdWVyeUxvY2FsbHkoKSBiZWZvcmUgcXVlcnlpbmcgc2VydmVyXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAyLiBxdWVyeUxvY2FsbHkoKSBpbnNwZWN0cyBtdXRhdGlvbnMgYW5kIGZpbmRzIGEgbWF0Y2gsIHJldHVybmluZyBhbiBlbXB0eSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAoYXNzdW1lcyBhcyB3ZSBhcmUgYWRkaW5nIGl0LCBpdCBjYW4ndCBleGlzdCBvbiB0aGUgc2VydmVyIGFueXdheSlcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgIDMuIEtlZEJhY2tlbmRRVWVyeSBhcHBsaWVzIG11dGF0aW9ucyBvbnRvIHRoZSBlbXB0eSBsaXN0LCBhbmQgZW5kcyB1cCBoZXJlIHRvIGFkZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgaXQgb3B0aW1pc3RpY2FsbHkuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICA0LiBXaGVuIHNlcnZlciByZXNwb25kcyB3aXRoIDIwMCBPSywgY2FsbHMgdXMgaGVyZSBhZ2FpbiB3aXRoIG9wdGltaXN0aWM9ZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRvIFwicGVyc2lzdFwiIGl0IGluIHRoZSBxdWVyeSdzIGRhdGEgYXJyYXkuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICA0QjogSWYgbm90IDIwMCBPSywgbXV0YXRpb24gbWF5IGJlIGdvbmUgYW5kIHRoZSBzdWJzY3JpYmVyIHdpbGwgc2UgYW4gZXJyb3IgcGFnZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgXCJDb3VsZCBub3QgZmluZCBlbnRpdHkgd2l0aCBpZCBYLlwiIGFsb25nIHdpdGggYSByZWQgZXJyb3IgbWVzc2FnZSBvbiB0aGUgc2NyZWVuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBhYm91dCB0aGF0IGl0IGZhaWxlZCB0byBzYXZlIG9uIHNlcnZlci5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb25jYXQodGhpcy5zZXRHcmFwaFByb3BzKG0ucmVsYXRlZERvYykpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JlbW92ZS1yZWxhdGVkJzpcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZSA9PT0gbS50YWJsZSAmJiBpbmNsdWRlcy5pbmRleE9mKG0uZ3JhcGhQcm9wKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlQXJyYXkoZGF0YSwgZnVuY3Rpb24gKGRvYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmNsdWRlZERvY3MgPSBkb2NbbS5ncmFwaFByb3BdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWluY2x1ZGVkRG9jcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb2MuaWQgIT09IG0uaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZG9jLCAoX2EgPSB7fSwgX2FbbS5ncmFwaFByb3BdID0gb3B0aW1pc3RpYyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIHJlbGF0ZWQtZG9jLXRvLXJlbW92ZSB3aXRoICRtZXRhOiAnZGVsZXRpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlZERvY3MubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmlkICE9PSBtLnJlbGF0ZWREb2MuaWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgOiB0c2xpYl8xLl9fYXNzaWduKHt9LCBkLCB7ICRtZXRhOiAnZGVsZXRpbmcnIH0pOyB9KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgcmVsYXRlZC1kb2MtdG8tcmVtb3ZlIGZyb20gZG9jW2dyYXBQcm9wXTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVkRG9jcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgIT09IG0ucmVsYXRlZERvYy5pZDsgfSksIF9hKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobGlzdE9wdGlvbnMuaGFzRWRnZXNGcm9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZUlkcy5pbmNsdWRlcyhtLmlkKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdGltaXN0aWMgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgPT09IG0ucmVsYXRlZERvYy5pZCA/IHRzbGliXzEuX19hc3NpZ24oe30sIGQsIHsgJG1ldGE6ICdkZWxldGluZycgfSkgOiBkOyB9KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCAhPT0gbS5yZWxhdGVkRG9jLmlkOyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICBjYXNlICdkZWxldGUnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlID09PSBtLnRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmlkICE9PSBtLmlkOyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpc3RPcHRpb25zLmluY2x1ZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5jbHVkZWRUYWJsZXMgPSBpbmNsdWRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gKHsgbGFiZWw6IGxhYmVsLCB0YWJsZTogZ2V0VGFibGVGcm9tTGFiZWwodGFibGUsIGxhYmVsKSB9KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsc18xID0gaW5jbHVkZWRUYWJsZXMuZmlsdGVyKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBfYS50YWJsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlID09PSBtLnRhYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbHNfMS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbHNfMS5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IF9hLmxhYmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVsYXRlZERvY3MgPSBkb2NbbGFiZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWxhdGVkRG9jcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MsIChfYiA9IHt9LCBfYltsYWJlbF0gPSBvcHRpbWlzdGljID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWREb2NzLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCA9PT0gbS5pZCA/IHRzbGliXzEuX19hc3NpZ24oe30sIGQsIHsgJG1ldGE6ICdkZWxldGluZycgfSkgOiBkOyB9KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkRG9jcy5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gX2EuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkICE9PSBtLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIF9iKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLnNldEdyYXBoUHJvcHMgPSBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgdmFyIGNvcHkgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MpO1xyXG4gICAgICAgIHRoaXMuaW5jbHVkZXMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHsgcmV0dXJuIGNvcHlbbGFiZWxdID0gY29weVtsYWJlbF0gfHwgW107IH0pO1xyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBLZWRCYWNrZW5kUXVlcnk7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEtlZEJhY2tlbmRRdWVyeSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLXF1ZXJ5LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IEJhdGNoUnVubmVyIH0gZnJvbSAnLi4va2VkLWJhY2tlbmQtY2xpZW50JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFN1YnNjcmlwdGlvbiB9IGZyb20gXCIuL2tlZGJhY2tlbmQtc3Vic2NyaXB0aW9uXCI7XHJcbmltcG9ydCB7IENhY2hlQnVzdCB9IGZyb20gJy4vY2FjaGUtYnVzdCc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRRdWVyeSB9IGZyb20gJy4va2VkYmFja2VuZC1xdWVyeSc7XHJcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbGxlY3Rpb24nO1xyXG4vKipcclxuICogUmVwcmVzZW50cyBhIFwibGl2ZVwiIHF1ZXJ5IGFnYWluc3QgYSB0YWJsZSBvciBmaWx0ZXJlZCB0YWJsZS5cclxuICovXHJcbnZhciBLZWRCYWNrZW5kQ29sbGVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKEtlZEJhY2tlbmRDb2xsZWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENvbGxlY3Rpb24ocmVwbywgdGFibGUsIHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgS2VkQmFja2VuZFN1YnNjcmlwdGlvbihvYnNlcnZlciwgX3RoaXMpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZXBvLnF1ZXJ5U2V0LnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xyXG4gICAgICAgIH0pIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMucmVwbyA9IHJlcG87XHJcbiAgICAgICAgX3RoaXMudGFibGUgPSB0YWJsZTtcclxuICAgICAgICBfdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUsIFwicXVlcnlLZXlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gS2VkQmFja2VuZFF1ZXJ5LnF1ZXJ5S2V5KHRoaXMudGFibGUsIHRoaXMucXVlcnkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZSwgXCJpbmNsdWRlc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbmNsdWRlcyB8fCAodGhpcy5faW5jbHVkZXMgPSBbXS5jb25jYXQodGhpcy5xdWVyeS5pbmNsdWRlIHx8IFtdKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuYXBwbHlRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgS2VkQmFja2VuZENvbGxlY3Rpb24odGhpcy5yZXBvLCB0aGlzLnRhYmxlLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLnF1ZXJ5LCBxdWVyeSkpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRUb1F1ZXJ5QXJyYXlQcm9wID0gZnVuY3Rpb24gKGFycmF5UHJvcCwgZW50cmllcykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KChfYSA9IHt9LCBfYVthcnJheVByb3BdID0gKHRoaXMucXVlcnlbYXJyYXlQcm9wXSB8fCBbXSkuY29uY2F0KGVudHJpZXMpLCBfYSkpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRGbGFncyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmxhZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBmbGFnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiZmxhZ3NcIiwgZmxhZ3MpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgZGVidWc6IHRydWUgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmlkc09ubHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpZHNPbmx5XCIpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5pZHNBbmROYW1lc09ubHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpZHNBbmROYW1lc09ubHlcIik7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmluY2x1ZGVJZHNPbmx5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZEZsYWdzKFwiaW5jbHVkZUlkc09ubHlcIik7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmluY2x1ZGVJZHNBbmROYW1lc09ubHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpbmNsdWRlSWRzQW5kTmFtZXNPbmx5XCIpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5iZXR3ZWVuID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGZyb206IGZyb20sIHRvOiB0byB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUucm9sZSA9IGZ1bmN0aW9uIChyb2xlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IHJvbGU6IHJvbGUgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmhhc0VkZ2VzRnJvbSA9IGZ1bmN0aW9uIChpZHMsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCB8fCBpZHMuc29tZShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICFpZDsgfSkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaWQgbGlzdCBnaXZlbiB0byBDb2xsZWN0aW9uLmhhc0VkZ2VzRnJvbShcIiArIEpTT04uc3RyaW5naWZ5KGlkcykgKyBcIilcIik7XHJcbiAgICAgICAgdmFyIGhlZiA9IHRoaXMuYWRkVG9RdWVyeUFycmF5UHJvcChcImhhc0VkZ2VzRnJvbVwiLCBpZHMpO1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZURlbHRhRWRnZXMgP1xyXG4gICAgICAgICAgICBoZWYuYWRkRmxhZ3MoXCJpbmNsdWRlRGVsdGFFZGdlc1wiKSA6XHJcbiAgICAgICAgICAgIGhlZjtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaGFzRWRnZXNUbyA9IGZ1bmN0aW9uIChpZHMsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCB8fCBpZHMuc29tZShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICFpZDsgfSkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaWQgbGlzdCBnaXZlbiB0byBDb2xsZWN0aW9uLmhhc0VkZ2VzVG8oXCIgKyBKU09OLnN0cmluZ2lmeShpZHMpICsgXCIpXCIpO1xyXG4gICAgICAgIHZhciBoZXQgPSB0aGlzLmFkZFRvUXVlcnlBcnJheVByb3AoXCJoYXNFZGdlc1RvXCIsIGlkcyk7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlRGVsdGFFZGdlcyA/XHJcbiAgICAgICAgICAgIGhldC5hZGRGbGFncyhcImluY2x1ZGVEZWx0YUVkZ2VzXCIpIDpcclxuICAgICAgICAgICAgaGV0O1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5pZCA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGlkczogW2lkXSB9KS5zaW5nbGUoe1xyXG4gICAgICAgICAgICBvblplcm86IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgZW50aXR5IGluIFwiICsgX3RoaXMudGFibGUgKyBcIiB3aXRoIGlkIFwiICsgaWQpOyB9LFxyXG4gICAgICAgICAgICBvbk1hbnk6IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiTXVsdGlwbGUgZW50cmllcyBpbiBcIiArIF90aGlzLnRhYmxlICsgXCIgd2l0aCBpZCBcIiArIGlkKTsgfSxcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaWRzID0gZnVuY3Rpb24gKGlkcykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBpZHM6IGlkcyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUubmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnRhZ3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRhZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB0YWdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyB0YWdzOiB0YWdzIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5icmFuY2hJZCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmluY2x1ZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGdyYXBocyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGdyYXBoc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiaW5jbHVkZVwiLCBncmFwaHMpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5jYWNoZU9wdGltaXplZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgY2FjaGVCdXN0OiBDYWNoZUJ1c3QuZ2V0Q2FjaGVCdXN0KHRoaXMudGFibGUsIHRoaXMucXVlcnksIHRoaXMucmVwby5nZXRVc2VyKCksIHRoaXMuaW5jbHVkZXMpIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5tdXRhdGlvbnNPbkVtcHR5ID0gZnVuY3Rpb24gKG11dGF0aW9uRmFjdG9yeSkge1xyXG4gICAgICAgIHZhciB0eCA9IG5ldyBCYXRjaFJ1bm5lcigpO1xyXG4gICAgICAgIG11dGF0aW9uRmFjdG9yeSh0eCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IG11dGF0aW9uc09uRW1wdHk6IHR4Lm11dGF0aW9uUmVxdWVzdHMgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnNpbmdsZSA9IGZ1bmN0aW9uICh0aHJvd2Vycykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIF9hID0gdGhyb3dlcnMgfHwge30sIG9uWmVybyA9IF9hLm9uWmVybywgb25NYW55ID0gX2Eub25NYW55O1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChvblplcm8pXHJcbiAgICAgICAgICAgICAgICAgICAgb25aZXJvKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2luZ2xlIGl0ZW0gb2YgXCIgKyBfdGhpcy50YWJsZSArIFwiIGV4cGVjdGVkIHRvIGJlIHJldHVybmVkIGJ5IHF1ZXJ5IFwiICsgSlNPTi5zdHJpbmdpZnkoX3RoaXMucXVlcnkpICsgXCIgYnV0IG5vbmUgd2FzIGZvdW5kLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgZGVidWdnZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAob25NYW55KVxyXG4gICAgICAgICAgICAgICAgICAgIG9uTWFueSgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2luZ2xlIGl0ZW0gb2YgXCIgKyBfdGhpcy50YWJsZSArIFwiIGV4cGVjdGVkIHRvIGJlIHJldHVybmVkIGJ5IHF1ZXJ5IFwiICsgSlNPTi5zdHJpbmdpZnkoX3RoaXMucXVlcnkpICsgXCIgYnV0IFwiICsgaXRlbXMubGVuZ3RoICsgXCIgd2FzIGZvdW5kLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXNbMF07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLypjb21iaW5lTGF0ZXN0PFRPdGhlcj4ob3RoZXI6IFF1ZXJ5T2JzZXJ2YWJsZTxUT3RoZXI+KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcih4ID0+IHgpLmNvbWJpbmVMYXRlc3Qob3RoZXIpO1xyXG4gICAgfSovXHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRvYywgY2hhbmdlcywgZGVib3VuY2UpIHtcclxuICAgICAgICBpZiAoZGVib3VuY2UgPT09IHZvaWQgMCkgeyBkZWJvdW5jZSA9IDEwMDA7IH1cclxuICAgICAgICB0aGlzLnJlcG8ud3JpdGVyLm11dGF0ZShbe1xyXG4gICAgICAgICAgICAgICAgb3A6ICd1cGRhdGUnLFxyXG4gICAgICAgICAgICAgICAgdGFibGU6IHRoaXMudGFibGUsXHJcbiAgICAgICAgICAgICAgICBicmFuY2hJZDogdGhpcy5xdWVyeS5icmFuY2hJZCxcclxuICAgICAgICAgICAgICAgIGlkOiBkb2MuaWQsXHJcbiAgICAgICAgICAgICAgICBkZWx0YURvYzogY2hhbmdlcyxcclxuICAgICAgICAgICAgICAgIHRhcmdldE5hbWU6IGRvYy5uYW1lXHJcbiAgICAgICAgICAgIH1dLCBkZWJvdW5jZSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmFkZFJlbGF0ZWQgPSBmdW5jdGlvbiAoaWQsIGxhYmVsLCByZWxhdGVkRG9jKSB7XHJcbiAgICAgICAgdGhpcy5yZXBvLndyaXRlci5tdXRhdGUoW3tcclxuICAgICAgICAgICAgICAgIG9wOiAnYWRkLXJlbGF0ZWQnLFxyXG4gICAgICAgICAgICAgICAgdGFibGU6IHRoaXMudGFibGUsXHJcbiAgICAgICAgICAgICAgICBicmFuY2hJZDogdGhpcy5xdWVyeS5icmFuY2hJZCxcclxuICAgICAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgIGdyYXBoUHJvcDogbGFiZWwsXHJcbiAgICAgICAgICAgICAgICByZWxhdGVkRG9jOiByZWxhdGVkRG9jXHJcbiAgICAgICAgICAgIH1dLCAwKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUucmVtb3ZlUmVsYXRlZCA9IGZ1bmN0aW9uIChpZCwgbGFiZWwsIHJlbGF0ZWREb2MpIHtcclxuICAgICAgICB0aGlzLnJlcG8ud3JpdGVyLm11dGF0ZShbe1xyXG4gICAgICAgICAgICAgICAgb3A6ICdyZW1vdmUtcmVsYXRlZCcsXHJcbiAgICAgICAgICAgICAgICB0YWJsZTogdGhpcy50YWJsZSxcclxuICAgICAgICAgICAgICAgIGJyYW5jaElkOiB0aGlzLnF1ZXJ5LmJyYW5jaElkLFxyXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgZ3JhcGhQcm9wOiBsYWJlbCxcclxuICAgICAgICAgICAgICAgIHJlbGF0ZWREb2M6IHJlbGF0ZWREb2NcclxuICAgICAgICAgICAgfV0sIDApO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS51bmRvTGluayA9IGZ1bmN0aW9uIChpZCwgbGFiZWwsIHJlbGF0ZWRJZCkge1xyXG4gICAgICAgIGlmICghdGhpcy5xdWVyeS5icmFuY2hJZClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5kbyBsaW5rcyBjYW4gb25seSBiZSBwZXJmb3JtZWQgb24gYnJhbmNoZXNcIik7XHJcbiAgICAgICAgdGhpcy5yZXBvLndyaXRlci5tdXRhdGUoW3tcclxuICAgICAgICAgICAgICAgIG9wOiAndW5kby1saW5rJyxcclxuICAgICAgICAgICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxyXG4gICAgICAgICAgICAgICAgYnJhbmNoSWQ6IHRoaXMucXVlcnkuYnJhbmNoSWQsXHJcbiAgICAgICAgICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgICAgICAgICBncmFwaFByb3A6IGxhYmVsLFxyXG4gICAgICAgICAgICAgICAgcmVsYXRlZElkOiByZWxhdGVkSWRcclxuICAgICAgICAgICAgfV0sIDApO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgaWRzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgaWRzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVwby53cml0ZXIubXV0YXRlKGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiAoe1xyXG4gICAgICAgICAgICBvcDogJ2RlbGV0ZScsXHJcbiAgICAgICAgICAgIHRhYmxlOiBfdGhpcy50YWJsZSxcclxuICAgICAgICAgICAgaWQ6IGlkXHJcbiAgICAgICAgfSk7IH0pLCAwKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5yZXBvLnF1ZXJ5U2V0LnVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEtlZEJhY2tlbmRDb2xsZWN0aW9uO1xyXG59KENvbGxlY3Rpb24pKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZENvbGxlY3Rpb24gfTtcclxuLyptaXhpbihcclxuICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUsXHJcbiAgTWFwcGVkQ29sbGVjdGlvbi5wcm90b3R5cGUsXHJcbiAgXCJtYXBcIiwgXCJmbGF0XCIsIFwiY29uY2F0XCIsIFwicmVuZGVyXCIsIFwibG9hZFwiKTsqL1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLWNvbGxlY3Rpb24uanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgS2VkQmFja2VuZFF1ZXJ5IH0gZnJvbSAnLi9rZWRiYWNrZW5kLXF1ZXJ5JztcclxuaW1wb3J0ICogYXMgSnNvblNjaGVtYSBmcm9tICdrZWRiYWNrZW5kLXNjaGVtYS9zY2hlbWEuanNvbic7XHJcbmltcG9ydCB7IHF1ZXJ5QXJyYXkgfSBmcm9tICcuL3V0aWxzJztcclxudmFyIFF1ZXJ5U2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUXVlcnlTZXQobXV0YXRpb25RdWV1ZSkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IG11dGF0aW9uUXVldWU7XHJcbiAgICAgICAgdGhpcy5xdWVyaWVzID0gW107XHJcbiAgICB9XHJcbiAgICBRdWVyeVNldC5wcm90b3R5cGUuY29tbWl0TXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9ucywgdmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKHRoaXMucXVlcmllcy5tYXAoZnVuY3Rpb24gKHEpIHsgcmV0dXJuIHEuY29tbWl0TXV0YXRpb25zKG11dGF0aW9ucywgdmVyc2lvbik7IH0pKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cEludmFsaWRRdWVyaWVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUXVlcnlTZXQucHJvdG90eXBlLmNsZWFudXBJbnZhbGlkUXVlcmllcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSB0aGlzLnF1ZXJpZXMuZmlsdGVyKGZ1bmN0aW9uIChxKSB7XHJcbiAgICAgICAgICAgIGlmIChxLmludmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChxLnRpbWVvdXRIYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQocS50aW1lb3V0SGFuZGxlKTtcclxuICAgICAgICAgICAgICAgICAgICBxLnRpbWVvdXRIYW5kbGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5ub3RpZnlTdWJzY3JpYmVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb3B0aW1pc3RpY011dGF0aW9ucyA9IHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKTtcclxuICAgICAgICB0aGlzLnF1ZXJpZXMuZm9yRWFjaChmdW5jdGlvbiAocSkge1xyXG4gICAgICAgICAgICBxLm5vdGlmeVN1YnNjcmliZXJzKG9wdGltaXN0aWNNdXRhdGlvbnMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5maW5kUXVlcnkgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcmllcy5maW5kKGZ1bmN0aW9uIChxKSB7IHJldHVybiBxLnF1ZXJ5S2V5ID09PSBLZWRCYWNrZW5kUXVlcnkucXVlcnlLZXkodGFibGUsIHF1ZXJ5KTsgfSk7XHJcbiAgICB9O1xyXG4gICAgUXVlcnlTZXQucHJvdG90eXBlLnF1ZXJ5TG9jYWxseSA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnksIGluY2x1ZGVzKSB7XHJcbiAgICAgICAgLy8gRm9yIG5vdywgb25seSBoYW5kbGUgdGhpcyB2ZXJ5IGNvbW1vbiBhbmQgc3BlY2lhbCBjYXNlICh3aGljaFxyXG4gICAgICAgIC8vIHdpbGwgc2F2ZSBhIGxvdCBvZiB1bm5lc2Nlc3NhcnkgbmV0d29yayB0cmFmZmljIGlmIEkgYW0gdGhpbmtpbmcgcmlnaHQuLi4pXHJcbiAgICAgICAgdmFyIG11dGF0aW9ucyA9IHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKTtcclxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgcXVlcnkgd2FudHMgdG8gZ2V0IGEgc2luZ2xlIGVudGl0eSBieSBpdHMgSUQ6XHJcbiAgICAgICAgaWYgKHF1ZXJ5LmlkcyAmJiBxdWVyeS5pZHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIC8vIEFuZCBpZiBzbywgaWYgd2UgaGF2ZSBhbiBvdXRnb2luZyBtdXRhdGlvbiB0byBjcmVhdGUgdGhhdCBlbnRpdHk6XHJcbiAgICAgICAgICAgIGlmIChtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5vcCA9PT0gJ2FkZC1yZWxhdGVkJyAmJiBtLnJlbGF0ZWREb2MuaWQgPT09IHF1ZXJ5Lmlkc1swXTsgfSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZW4gcmV0dXJuIGFuIEVNUFRZIHJlc3BvbnNlLCBzaWduYWxsaW5nIHRoYXQgd2UgY2FuIHJlc29sdmUgdGhpcyBsb2NhbGx5LFxyXG4gICAgICAgICAgICAgICAgLy8gYnV0IGxldCB0aGUgb3B0aXN0aWMgZmVhdHVyZSBvZiBLZWRCYWNrZW5kUXVlcnkgYXBwbHkgdGhlIG11dGF0aW9uIGJlZm9yZVxyXG4gICAgICAgICAgICAgICAgLy8gbm90aWZ5aW5nIHN1YnNjcmliZXJzICh3ZSBkb24ndCB3YW50IGl0IHRvIGJlIHBlcnNpc3RlbnQgYmVmb3JlIHRoZSBzZXJ2ZXJcclxuICAgICAgICAgICAgICAgIC8vIGhhcyBhY2NlcHRlZCB0aGUgbXV0YXRpb24pXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gT0ssIGFub3RoZXIgcXVpdGUgY29tbW9uIGNhc2UgaXMgd2hlbiB3ZSBhc2sgZm9yIGEgY2VydGFpbiBJRCBhbmQgdGhhdCBJRCByZXBsaWVzXHJcbiAgICAgICAgLy8gd2l0aGluIGFub3RoZXIgcXVlcnlcclxuICAgICAgICBpZiAocXVlcnkuaGFzRWRnZXNGcm9tIHx8IHF1ZXJ5Lmhhc0VkZ2VzVG8pXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBOb3QgcG9zc2libGUgdG8gaGFuZGxlXHJcbiAgICAgICAgaWYgKCFxdWVyeS5pZHMpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBGb3Igbm93LCBqdXN0IHRha2UgaGlnaHQgZm9yIHRoaXMgcGFydGljdWxhciBhbmQgbW9zdCBjb21tb24gY2FzZSFcclxuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChxKSB7XHJcbiAgICAgICAgICAgIGlmICghcS5nb3RJbml0aWFsUmVzcG9uc2UpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICBpZiAocS5xdWVyeS5icmFuY2hJZCAhPT0gcXVlcnkuYnJhbmNoSWQpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICBpZiAocS5xdWVyeS5mbGFncylcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7IC8vIEl0IHdvdWxkIGJlIGNvbXBsZXggdG8gc3VwcG9ydCB2YXJpb3VzIGZsYWdzLiBRdWVyeSdzIGRhdGEgbWF5IGluY2x1ZGUgaWRzIG9ubHkuIENhbid0IHJlbHkgb24gdGhlIHF1ZXJ5LlxyXG4gICAgICAgICAgICB2YXIgcUluY2x1ZGVzID0gcS5pbmNsdWRlcztcclxuICAgICAgICAgICAgaWYgKHFJbmNsdWRlcy5sZW5ndGggPiAwICYmICghcXVlcnkuaW5jbHVkZSB8fCBxdWVyeS5pbmNsdWRlLmxlbmd0aCA9PT0gMCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IGluY2x1ZGUsIGJ1dCB0aGlzIHF1ZXJ5IGRvZXMuIENoZWNrIGlmIHdlIGNhbiBmaW5kIG91ciByZXN1bHQgd2l0aGluIGl0LlxyXG4gICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gcUluY2x1ZGVzLmZpbmQoZnVuY3Rpb24gKGwpIHsgcmV0dXJuIEpzb25TY2hlbWEudGFibGVzW3EudGFibGVdW1wicmVsYXRpb25zaGlwc1wiXVtsXSA9PT0gdGFibGU7IH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc18xID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHEuZGF0YTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVudGl0eSA9IF9hW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YkRhdGEgPSBxdWVyeUFycmF5KHF1ZXJ5LCBlbnRpdHlbbGFiZWxdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IHJldHVybiByZXNfMVtyLmlkXSA9IHI7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0XzEgPSBPYmplY3Qua2V5cyhyZXNfMSkubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gcmVzXzFbaWRdOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHJldHVybiByZXN1bHQgaWYgd2UgY291bGQgbG9vayB1cCBldmVyeSByZXF1ZXN0ZWQgSUQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFxdWVyeS5pZHMuZXZlcnkoZnVuY3Rpb24gKGlkKSB7IHJldHVybiByZXN1bHRfMS5zb21lKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmlkID09PSBpZDsgfSk7IH0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiByZXN1bHRfMSB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghaW5jbHVkZXMuZXZlcnkoZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiBxSW5jbHVkZXMuaW5jbHVkZXMobGFiZWwpOyB9KSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgIC8vIExhc3RseSwgaWYgdGhlIHF1ZXJ5IGluY2x1ZGVzIGFsbCBncmFwaHMgdGhhdCB3ZSBkbywgcGljayB0aGUgc3Vic2V0IGZyb20gdGhhdCBxdWVyeS5cclxuICAgICAgICAgICAgLy8gQ29uY3JldGUgZXhhbXBsZTogV2Ugb2JzZXJ2ZSBhIGNlcnRhaW4gVGFzayBieSBJRCBhbmQgd2FudCBpdHMga25vd2xlZGdlUmVxdWlyZW1lbnRzIGFsb25nIHdpdGggaXQsXHJcbiAgICAgICAgICAgIC8vIGFuZCB0aGVyZSdzIGFub3RoZXIgcXVlcnkgb2YgYWxsIHRhc2tzIHRoYXQgYWxzbyBpbmNsdWRlcyBrbm93bGVkZ2VSZXF1aXJlbWVudHMuIFVzZSBpdC4gXHJcbiAgICAgICAgICAgIGlmIChxLnRhYmxlID09PSB0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdF8yID0gcXVlcnlBcnJheShxdWVyeSwgcS5kYXRhKTtcclxuICAgICAgICAgICAgICAgIC8vIE9ubHkgcmV0dXJuIHJlc3VsdCBpZiB3ZSBjb3VsZCBsb29rIHVwIGV2ZXJ5IHJlcXVlc3RlZCBJRDpcclxuICAgICAgICAgICAgICAgIGlmICghcXVlcnkuaWRzLmV2ZXJ5KGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gcmVzdWx0XzIuc29tZShmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5pZCA9PT0gaWQ7IH0pOyB9KSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdF8yIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnF1ZXJpZXM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBxID0gX2FbX2ldO1xyXG4gICAgICAgICAgICB2YXIgc3RhdGVfMSA9IF9sb29wXzEocSk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhdGVfMSA9PT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZV8xLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBRdWVyeVNldC5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgIHZhciBfYSA9IHN1YnNjcmlwdGlvbi5jb2xsZWN0aW9uLCB0YWJsZSA9IF9hLnRhYmxlLCBxdWVyeSA9IF9hLnF1ZXJ5LCByZXBvID0gX2EucmVwbztcclxuICAgICAgICB2YXIga2JRdWVyeSA9IHRoaXMuZmluZFF1ZXJ5KHRhYmxlLCBxdWVyeSk7XHJcbiAgICAgICAgaWYgKCFrYlF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIGtiUXVlcnkgPSBuZXcgS2VkQmFja2VuZFF1ZXJ5KHRhYmxlLCBxdWVyeSwgcmVwby5nZXRVc2VyKCksIHJlcG8sIHRoaXMubXV0YXRpb25RdWV1ZSk7XHJcbiAgICAgICAgICAgIHRoaXMucXVlcmllcy5wdXNoKGtiUXVlcnkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGtiUXVlcnkudGltZW91dEhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGtiUXVlcnkudGltZW91dEhhbmRsZSk7XHJcbiAgICAgICAgICAgICAgICBrYlF1ZXJ5LnRpbWVvdXRIYW5kbGUgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGtiUXVlcnkuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XHJcbiAgICB9O1xyXG4gICAgUXVlcnlTZXQucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIF9hID0gc3Vic2NyaXB0aW9uLmNvbGxlY3Rpb24sIHRhYmxlID0gX2EudGFibGUsIHF1ZXJ5ID0gX2EucXVlcnksIHJlcG8gPSBfYS5yZXBvO1xyXG4gICAgICAgIHZhciBrYlF1ZXJ5ID0gdGhpcy5maW5kUXVlcnkodGFibGUsIHF1ZXJ5KTtcclxuICAgICAgICBpZiAoa2JRdWVyeSkge1xyXG4gICAgICAgICAgICAvLyBQcm9oaWJpdCBmdXJ0aGVyIG5vdGlmaWNhdGlvbnMgdG8gdGhpcyBzdWJzY3JpcHRpb246XHJcbiAgICAgICAgICAgIGtiUXVlcnkudW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgLy8gUmVsZWFzZSB1bm5lc2Nlc3NhcnkgbWVtb3J5IHdoZW4gdGhlcmUgYXJlIG5vIG1vcmUgc3Vic2NyaXB0aW9ucyBvZiB0aGlzIHF1ZXJ5LCBieSByZW1vdmluZyB0aGUgcXVlcnkgaXRzZWxmXHJcbiAgICAgICAgICAgIC8vIFRvIHRoYXQgaW4gYSBkZWxheWVkIG1hbm5lciwgc28gdGhhdCBhbiB1bnN1YnNjcmliZSgpIGZvbGxvd2VkIGJ5IGFuIGltbWVkaWF0ZSBzdWJzY3JpYmUoKSBkb24ndCBoYXZlIHRvIHJlLXF1ZXJ5IHRoZSBzZXJ2ZXI6XHJcbiAgICAgICAgICAgIGlmIChrYlF1ZXJ5LnN1YnNjcmlwdGlvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTY2hlZHVsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uIGluIDUgbWludXRlczpcclxuICAgICAgICAgICAgICAgIGtiUXVlcnkudGltZW91dEhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGtiUXVlcnkgc3RpbGwgaGFzIG5vIHN1YnNjcmlwdGlvbnMgKG5vdCBjZXJ0YWluISBBIG5ldyBzdWJzY3JpYmVyIG1heSBoYXZlIGNvbWUgYWxvbmcuLi4pXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtiUXVlcnkuc3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RpbGwgbm8gc3Vic2NyaXB0aW9ucyBvbiBpdCwgdGltZSB0byByZWxlYXNlIHNvbWUgbWVtb3J5IGFuZCBmb3JnZXQgdGhlIGluLW1lbW9yeSBjYWNoZSBvZiB0aGUgcXVlcnkgcmVzdWx0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnF1ZXJpZXMgPSBfdGhpcy5xdWVyaWVzLmZpbHRlcihmdW5jdGlvbiAocSkgeyByZXR1cm4gcSAhPT0ga2JRdWVyeTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5xdWVyaWVzLmxlbmd0aCA+IDUwID9cclxuICAgICAgICAgICAgICAgICAgICA1MDAgOiAvLyBEb24ndCBob3N0IHRvbyBtYW55IHF1ZXJpZXMuIEdhcmJhZ2UgY29sbGVjdCB0aGlzIHdpdGhpbiA1MDAgbXNcclxuICAgICAgICAgICAgICAgICAgICA1ICogNjAwMDApOyAvLyBBbGxvdyBxdWVyeSBpbiBtZW1vcnkgZm9yIGFub3RoZXIgNSBtaW51dGVzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFF1ZXJ5U2V0O1xyXG59KCkpO1xyXG5leHBvcnQgeyBRdWVyeVNldCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS1zZXQuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgZ2V0VGFibGVGcm9tTGFiZWwsIGJyYW5jaFNlbnNpdGl2ZSwgZ2xvYmFsT3AgfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHsgbWVyZ2VEZWx0YXMgfSBmcm9tICcuL2RlbHRhLW1lcmdlJztcclxudmFyIE11dGF0aW9uUXVldWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBNdXRhdGlvblF1ZXVlKCkge1xyXG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcclxuICAgICAgICB0aGlzLnNhdmluZ1F1ZXVlID0gW107XHJcbiAgICB9XHJcbiAgICBNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobXV0YXRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IE11dGF0aW9uUXVldWUubWVyZ2UodGhpcy5xdWV1ZSwgbXV0YXRpb25zKTtcclxuICAgIH07XHJcbiAgICBNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5tb3ZlVG9TYXZpbmdRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNhdmluZ1F1ZXVlID0gTXV0YXRpb25RdWV1ZS5tZXJnZSh0aGlzLnNhdmluZ1F1ZXVlLCB0aGlzLnF1ZXVlKTtcclxuICAgICAgICB0aGlzLnF1ZXVlID0gW107XHJcbiAgICB9O1xyXG4gICAgTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuY2xlYXJTYXZpbmdRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnNhdmluZ1F1ZXVlID0gW107XHJcbiAgICB9O1xyXG4gICAgTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNhdmluZ1F1ZXVlLmNvbmNhdCh0aGlzLnF1ZXVlKTtcclxuICAgIH07XHJcbiAgICBNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5hZmZlY3RzUXVlcnkgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5LCBpbmNsdWRlcykge1xyXG4gICAgICAgIHZhciBtdXRhdGlvbnMgPSB0aGlzLmdldCgpO1xyXG4gICAgICAgIGlmIChtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5vcCA9PT0gJ21lcmdlJyB8fCBtLm9wID09PSAnY2xlYXItYnJhbmNoJzsgfSkpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGlmIChxdWVyeS5pZHMpIHtcclxuICAgICAgICAgICAgLy8gQSBxdWVyeSB3aXRoIFwiaWRzXCIgZmlsdGVyIHdpbGwgYmUgZWFzeSB0byBkZXRlY3QgYSBuby1tYXRjaCBvbjpcclxuICAgICAgICAgICAgcmV0dXJuIG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtKSB7IHJldHVybiBnbG9iYWxPcChtKSB8fCAoIWJyYW5jaFNlbnNpdGl2ZShtKSB8fCBtLmJyYW5jaElkID09PSBxdWVyeS5icmFuY2hJZCkgJiZcclxuICAgICAgICAgICAgICAgIHF1ZXJ5Lmlkcy5pbmNsdWRlcyhtLmlkKTsgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgbXV0YXRpb25zIGFmZmVjdCBzYW1lIGJyYW5jaCBhbmQgdGFibGUuIENvdWxkIGJlIGRvbmUgbW9yZSBmaW5lIGdyYWluZWQsXHJcbiAgICAgICAgLy8gYnV0IHRoYXQgd291bGQgb25seSBiZSBhIHN1Ym9wdGltaXphdGlvbi5cclxuICAgICAgICByZXR1cm4gbXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG0ub3AgPT09ICdkZWxldGUnID9cclxuICAgICAgICAgICAgICAgIG0udGFibGUgPT09IHRhYmxlIHx8IChpbmNsdWRlcy5zb21lKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gZ2V0VGFibGVGcm9tTGFiZWwodGFibGUsIGxhYmVsKSA9PT0gbS50YWJsZTsgfSkpIDpcclxuICAgICAgICAgICAgICAgIGdsb2JhbE9wKG0pID8gdHJ1ZSA6XHJcbiAgICAgICAgICAgICAgICAgICAgbS5icmFuY2hJZCA9PSBxdWVyeS5icmFuY2hJZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAobS50YWJsZSA9PT0gdGFibGUgfHwgKG0ub3AgIT09ICd1cGRhdGUnICYmIChbdGFibGVdLmNvbmNhdChpbmNsdWRlcy5tYXAoZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiBnZXRUYWJsZUZyb21MYWJlbCh0YWJsZSwgbGFiZWwpOyB9KSkuc29tZShmdW5jdGlvbiAodGFibGUpIHsgcmV0dXJuIGdldFRhYmxlRnJvbUxhYmVsKG0udGFibGUsIG0uZ3JhcGhQcm9wKSA9PT0gdGFibGU7IH0pKSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIE11dGF0aW9uUXVldWUubWVyZ2UgPSBmdW5jdGlvbiAocXVldWUxLCBxdWV1ZTIpIHtcclxuICAgICAgICB2YXIgbXV0YWJsZVF1ZXVlMSA9IHF1ZXVlMS5zbGljZSgpO1xyXG4gICAgICAgIHZhciBtdXRhYmxlUXVldWUyID0gcXVldWUyLnNsaWNlKCk7XHJcbiAgICAgICAgLy9pZiAobXV0YWJsZVF1ZXVlMS5sZW5ndGggPiAwKSBkZWJ1Z2dlcjtcclxuICAgICAgICB2YXIgbGVuID0gcXVldWUxLmxlbmd0aDtcclxuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgIHZhciBtID0gcXVldWUxW2ldO1xyXG4gICAgICAgICAgICBpZiAobS5vcCA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvdmVybGFwcGluZ0lkT3BJZHggPSBtdXRhYmxlUXVldWUyLmZpbmRJbmRleChmdW5jdGlvbiAobmV3TXV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld011dC5vcCA9PT0gJ3VwZGF0ZScgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TXV0LmJyYW5jaElkID09PSBtLmJyYW5jaElkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld011dC5pZCA9PT0gbS5pZDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKG92ZXJsYXBwaW5nSWRPcElkeCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbXV0YWJsZVF1ZXVlMVtpXSA9IHRzbGliXzEuX19hc3NpZ24oe30sIG0sIHsgZGVsdGFEb2M6IG1lcmdlRGVsdGFzKG0uZGVsdGFEb2MsIG11dGFibGVRdWV1ZTJbb3ZlcmxhcHBpbmdJZE9wSWR4XS5kZWx0YURvYykgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbXV0YWJsZVF1ZXVlMi5zcGxpY2Uob3ZlcmxhcHBpbmdJZE9wSWR4LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xyXG4gICAgICAgICAgICBfbG9vcF8xKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbXV0YWJsZVF1ZXVlMS5jb25jYXQobXV0YWJsZVF1ZXVlMik7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE11dGF0aW9uUXVldWU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IE11dGF0aW9uUXVldWUgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXV0YXRpb24tcXVldWUuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgbWVyZ2VEZWx0YXMgfSBmcm9tICcuLi9kZWx0YS1tZXJnZSc7XHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseU11dGF0aW9uc09uRGVsdGFzKGJyYW5jaElkLCBkZWx0YXMsIG11dGF0aW9ucywgb3B0aW1pc3RpYywgdXNlckRpc3BsYXlOYW1lLCBoYXNBZGRpdGlvbmFsRmlsdGVyKSB7XHJcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgc3dpdGNoIChtLm9wKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FkZC1yZWxhdGVkJzpcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBBZGRSZWxhdGVkIFJlcG9NdXRhdGlvblxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIGlmICghaGFzQWRkaXRpb25hbEZpbHRlciAmJiBtLmJyYW5jaElkID09PSBicmFuY2hJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbHRhcyA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYWRkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUlkOiBtLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SWQ6IG0ucmVsYXRlZERvYy5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBtLmdyYXBoUHJvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVRhYmxlOiBtLnRhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1ldGE6IG9wdGltaXN0aWMgPyAnYWRkaW5nJyA6ICdwZXJzaXN0ZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVRpbWU6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lOiBtLnJlbGF0ZWREb2MubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9yOiB1c2VyRGlzcGxheU5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0uY29uY2F0KGRlbHRhcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnY2xlYXItYnJhbmNoJzpcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBDbGVhckJyYW5jaCBSZXBvTXV0YXRpb25cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpZiAobS5icmFuY2hJZCA9PT0gYnJhbmNoSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdkZWxldGUnOlxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBSZXBvTXV0YXRpb25cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBUaGlzIHR5cGUgb2YgbXV0YXRpb24gY2FuIG5vdCBiZSBwZXJmb3JtZWQgb250byBicmFuY2hlcy4gVGhlcmUncyBubyBicmFuY2hJZCBwcm9wZXJ0eSBvbiBtLlxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ21lcmdlJzpcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBNZXJnZSBSZXBvTXV0YXRpb25cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpZiAobS5icmFuY2hJZCA9PT0gYnJhbmNoSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG0udGFyZ2V0QnJhbmNoSWQgPT09IGJyYW5jaElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjaGFuZ2Ugd2lsbCBhcHBlbmQgbmV3IGRlbHRhcyB0byBvdXIgZGVsdGFzIGFycmF5IGJ1dCB3ZSBkb24ndCBrbm93IHdoYXQgd291bGQgY29tZS5cclxuICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIHJlZmV0Y2ggZnJvbSBzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpbWlzdGljKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbnVsbCB9OyAvLyBDYWxsZXIgc2hvdWxkIGNoZWNrIGZvciBudWxsIGFuZCByZS1mZXRjaCBkYXRhIGZyb20gc2VydmVyLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3JlbW92ZS1yZWxhdGVkJzpcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUtUmVsYXRlZCBSZXBvTXV0YXRpb25cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpZiAoaGFzQWRkaXRpb25hbEZpbHRlciB8fCBtLmJyYW5jaElkICE9PSBicmFuY2hJZClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICAgICAgZGVsdGFzID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3JlbW92ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUlkOiBtLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZDogbS5yZWxhdGVkRG9jLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lOiBtLnJlbGF0ZWREb2MubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG0uZ3JhcGhQcm9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VUYWJsZTogbS50YWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3I6IHVzZXJEaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVRpbWU6IERhdGUubm93KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRtZXRhOiBvcHRpbWlzdGljID8gJ2FkZGluZycgOiAncGVyc2lzdGVkJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLmNvbmNhdChkZWx0YXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3VuZG8tbGluayc6XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gVW5kby1MaW5rIFJlcG9NdXRhdGlvblxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIGlmIChtLmJyYW5jaElkICE9PSBicmFuY2hJZClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZHggPSBkZWx0YXMuZmluZEluZGV4KGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZC50eXBlID09PSAnYWRkJyB8fCBkLnR5cGUgPT09ICdyZW1vdmUnIHx8IGQudHlwZSA9PT0gJ3VuZG8tbGluaycpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNvdXJjZUlkID09PSBtLmlkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnRhcmdldElkID09PSBtLnJlbGF0ZWRJZDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaWR4IDwgMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgICAgICAgICAvLyBGb3VuZCBhbiBcImFkZFwiIG9yIFwicmVtb3ZlXCIgZGVsdGEgdG8gY2hhbmdlOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpbWlzdGljKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YVJlbGF0aW9uID0gZGVsdGFzW2lkeF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIGV4aXN0aW5nIGFkZC9yZW1vdmUgZGVsdGEgYXMgY3VycmVubHR5IGJlaW5nIGRlbGV0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzID0gZGVsdGFzLnNsaWNlKDAsIGlkeCkuY29uY2F0KFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRzbGliXzEuX19hc3NpZ24oe30sIGRlbHRhUmVsYXRpb24sIHsgJG1ldGE6IG9wdGltaXN0aWMgPyAncmVtb3ZpbmcnIDogJ3BlcnNpc3RlZCcgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSwgZGVsdGFzLnNsaWNlKGlkeCArIDEpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFBlcnNpc3RlZC4gSnVzdCByZW1vdmUgaXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhcyA9IGRlbHRhcy5zbGljZSgwLCBpZHgpLmNvbmNhdChkZWx0YXMuc2xpY2UoaWR4ICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd1cGRhdGUnOlxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBSZXBvTXV0YXRpb25cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpZiAobS5icmFuY2hJZCAhPT0gYnJhbmNoSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gZGVsdGFzLmZpbmRJbmRleChmdW5jdGlvbiAoZGVsdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlbHRhLnR5cGUgPT09ICdtb2RpZnknICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YS50YXJnZXRJZCA9PT0gbS5pZDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaWR4IDwgMCAmJiAhaGFzQWRkaXRpb25hbEZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXMgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdtb2RpZnknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBtLnRhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldElkOiBtLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWU6IG0udGFyZ2V0TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBtLmRlbHRhRG9jLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9yczogW3VzZXJEaXNwbGF5TmFtZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1ldGE6IG9wdGltaXN0aWMgPyAnYWRkaW5nJyA6ICdwZXJzaXN0ZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0uY29uY2F0KGRlbHRhcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhpc3RpbmdEZWx0YURvYyA9IGRlbHRhc1tpZHhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJpYnV0b3JzID0gZXhpc3RpbmdEZWx0YURvYy5jb250cmlidXRvcnMuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250cmlidXRvcnMuaW5jbHVkZXModXNlckRpc3BsYXlOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzLnB1c2godXNlckRpc3BsYXlOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGF0YSA9IG1lcmdlRGVsdGFzKGV4aXN0aW5nRGVsdGFEb2MuZGF0YSwgbS5kZWx0YURvYywgeyByZW1vdmVVbnNldFByb3BzOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGltaXN0aWMgJiYgT2JqZWN0LmtleXMobmV3RGF0YSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21taXR0ZWQgbXV0YXRpb24gdGhhdCByZXNldHMgYSBkZWx0YURvYy4gUmVtb3ZlIHRoZSBkZWx0YURvYyBlbnRpcmVseTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhcyA9IGRlbHRhcy5zbGljZSgwLCBpZHgpLmNvbmNhdChkZWx0YXMuc2xpY2UoaWR4ICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXMgPSBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbW9kaWZ5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGU6IG0udGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldElkOiBtLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lOiBtLnRhcmdldE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5ld0RhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmlidXRvcnM6IGNvbnRyaWJ1dG9ycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1ldGE6IG9wdGltaXN0aWMgPyAndXBkYXRpbmcnIDogJ3BlcnNpc3RlZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5jb25jYXQoZGVsdGFzLnNsaWNlKDAsIGlkeCksIGRlbHRhcy5zbGljZShpZHggKyAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBtdXRhdGlvbnNfMSA9IG11dGF0aW9uczsgX2kgPCBtdXRhdGlvbnNfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIgbSA9IG11dGF0aW9uc18xW19pXTtcclxuICAgICAgICB2YXIgc3RhdGVfMSA9IF9sb29wXzEobSk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZV8xID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICByZXR1cm4gc3RhdGVfMS52YWx1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBkZWx0YXM7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbHktbXV0YXRpb25zLW9uLWRlbHRhcy5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBIdHRwRXJyb3IgfSBmcm9tICcuLi8uLi9rZWQtYmFja2VuZC1jbGllbnQnO1xyXG5pbXBvcnQgeyBhcHBseU11dGF0aW9uc09uRGVsdGFzIH0gZnJvbSAnLi9hcHBseS1tdXRhdGlvbnMtb24tZGVsdGFzJztcclxudmFyIERlbHRhQ2FjaGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEZWx0YUNhY2hlKGdldENsaWVudCwgZ2V0VXNlciwgZ2V0VXNlckRpc3BsYXlOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5nZXRDbGllbnQgPSBnZXRDbGllbnQ7XHJcbiAgICAgICAgdGhpcy5nZXRVc2VyID0gZ2V0VXNlcjtcclxuICAgICAgICB0aGlzLmdldFVzZXJEaXNwbGF5TmFtZSA9IGdldFVzZXJEaXNwbGF5TmFtZTtcclxuICAgICAgICB0aGlzLmxvb2t1cCA9IHt9O1xyXG4gICAgfVxyXG4gICAgRGVsdGFDYWNoZS5wcm90b3R5cGUuYXBwbHlNdXRhdGlvbnMgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBfYSkge1xyXG4gICAgICAgIHZhciBvcHRpbWlzdGljID0gKF9hID09PSB2b2lkIDAgPyB7IG9wdGltaXN0aWM6IGZhbHNlIH0gOiBfYSkub3B0aW1pc3RpYztcclxuICAgICAgICAvLyBBcHBseSBtdXRhdGlvbnMgbG9jYWxseSBvbnRvIHRoZSBEZWx0YUNhY2hlIGFuZCBub3RpZnkgdGhlaXIgc3Vic2NyaWJlcnNcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9iID0gT2JqZWN0LmtleXModGhpcy5sb29rdXApOyBfaSA8IF9iLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlLZXkgPSBfYltfaV07XHJcbiAgICAgICAgICAgIHZhciBjYWNoZUVudHJ5ID0gdGhpcy5sb29rdXBbcXVlcnlLZXldO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVFbnRyeS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gSW5zdGVhZCBoZXJlOiBTdG9yZSB0aGUgbXV0YXRpb25zIG9uIGNhY2hlRW50cnkuIE5vIG1hdHRlciBpZiBpdCB5ZXQgaGFzIHZhbHVlIG9yIG5vdC5cclxuICAgICAgICAgICAgICAgIC8vIFRoZW4gYXBwbHkgbXV0YXRpb24gd2hlbmV2ZXIgc3Vic2NyaWJpbmchIChCZXR0ZXIgaGFuZGxpbmcgb2YgbXV0YXRpb25zIHRoYXQgYXJyaXZlcyBiZWZvcmUgZmV0Y2goKSBpcyBkb25lKVxyXG4gICAgICAgICAgICAgICAgLy8gKFNlZSBob3cgSSBoYW5kbGUgdGhpcyBpbiBxdWVyeS1zZXQudHMpXHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBhcHBseU11dGF0aW9uc09uRGVsdGFzKGNhY2hlRW50cnkucXVlcnkuYnJhbmNoSWQsIGNhY2hlRW50cnkudmFsdWUsIG11dGF0aW9ucywgb3B0aW1pc3RpYywgdGhpcy5nZXRVc2VyRGlzcGxheU5hbWUoKSwgISFjYWNoZUVudHJ5LnF1ZXJ5LnRhZ3MpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIG11dGF0aW9uIHJlcXVpcmVzIGNhY2hlRW50cnkgdG8gYmUgcmVmZXRjaGVkIGZyb20gc2VydmVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpbWlzdGljKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGxlciBoYXMgc3VjY2Vzc2Z1bGx5IHBlcmZvcm1lZCB0aGUgbXV0YXRpb25zIGFuZCBnb3Qgc3VjY2VzcyBiYWNrIGZyb20gc2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCdzIG9rIHRvIHJlZmV0Y2ggdGhlIGRlbHRhcyBmcm9tIHNlcnZlciBub3c6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlRW50cnkuZmV0Y2goKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWZ0ZXIgZmV0Y2ggY29tcGxldGVzLCBpdCB3aWxsIG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBjYWNoZUVudHJ5LnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVFbnRyeS5vcHRpbWlzdGljVmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGltaXN0aWMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlRW50cnkudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjYWNoZUVudHJ5Lm5vdGlmeShuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGVsdGFDYWNoZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHF1ZXJ5LCBvYnNlcnZlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGNhY2hlRW50cnkgPSB0aGlzLmxvb2t1cFtxdWVyeS5icmFuY2hJZCArIHF1ZXJ5LnRhZ3NdO1xyXG4gICAgICAgIGlmICghY2FjaGVFbnRyeSkge1xyXG4gICAgICAgICAgICBjYWNoZUVudHJ5ID0gbmV3IERlbHRhQ2FjaGVFbnRyeSh0aGlzLmdldENsaWVudCgpLCBxdWVyeSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9va3VwW3F1ZXJ5LmJyYW5jaElkICsgcXVlcnkudGFnc10gPSBjYWNoZUVudHJ5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2FjaGVFbnRyeS5jbGVhbnVwVGltZXIpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNhY2hlRW50cnkuY2xlYW51cFRpbWVyKTtcclxuICAgICAgICAgICAgY2FjaGVFbnRyeS5jbGVhbnVwVGltZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY2FjaGVFbnRyeS5zdWJzY3JpYmVycyA9IGNhY2hlRW50cnkuc3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvID0gX2Eub2JzZXJ2ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8gIT09IG9ic2VydmVyO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FjaGVFbnRyeS5zdWJzY3JpYmVycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWNoZUVudHJ5LmNsZWFudXBUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGVFbnRyeS5zdWJzY3JpYmVycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5sb29rdXBbcXVlcnkuYnJhbmNoSWQgKyBxdWVyeS50YWdzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGNhY2hlRW50cnkuc3Vic2NyaWJlcnMucHVzaCh7IG9ic2VydmVyOiBvYnNlcnZlciwgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb24gfSk7XHJcbiAgICAgICAgaWYgKGNhY2hlRW50cnkudmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gVmFsdWUgaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IHJldHJpZXZlZCBhbHJlYWR5LiBQaWNrIGZyb20gY2FjaGUuXHJcbiAgICAgICAgICAgIG9ic2VydmVyKGNhY2hlRW50cnkub3B0aW1pc3RpY1ZhbHVlIHx8IGNhY2hlRW50cnkudmFsdWUsIG51bGwsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNhY2hlRW50cnkuaXNGZXRjaGluZykge1xyXG4gICAgICAgICAgICAvLyBBIHZhbHVlIGlzIG9uIGl0cyB3YXkuIFNpdCBiYWNrIGFuZCByZWxheC4gQWxsIHJlZ2lzdGVyZWRcclxuICAgICAgICAgICAgLy8gb2JzZXJ2ZXJzIChpbmNsdWRpbmcgdGhpcyBvbmUpIHdpbGwgYmUgbm90aWZpZWQgd2hlbiBkYXRhIGFycml2ZXNcclxuICAgICAgICAgICAgLy8gb3IgZmFpbHMuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNhY2hlRW50cnkuZXJyb3IpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgY2FjaGVFbnRyeS5lcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNhY2hlRW50cnkuZmV0Y2goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVsdGFDYWNoZTtcclxufSgpKTtcclxuZXhwb3J0IHsgRGVsdGFDYWNoZSB9O1xyXG52YXIgRGVsdGFDYWNoZUVudHJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGVsdGFDYWNoZUVudHJ5KGNsaWVudCwgcXVlcnkpIHtcclxuICAgICAgICB0aGlzLmZldGNoT3BlcmF0aW9uSWQgPSAwOyAvLyBNYWtlcyBzdXJlIGEgcmUtZmV0Y2ggd2lsbCBkaXNjYXJkIHRoZSByZXN1bHQgZnJvbSBhbnkgb25nb2luZyBmZXRjaC5cclxuICAgICAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcclxuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5vcHRpbWlzdGljVmFsdWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLmlzRmV0Y2hpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNsZWFudXBUaW1lciA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBEZWx0YUNhY2hlRW50cnkucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGZldGNoT3BlcmF0aW9uSWQgPSArK3RoaXMuZmV0Y2hPcGVyYXRpb25JZDtcclxuICAgICAgICB0aGlzLmlzRmV0Y2hpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZmV0Y2hGcm9tU2VydmVyKCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgLy8gU3VjY2Vzc1xyXG4gICAgICAgICAgICBpZiAoZmV0Y2hPcGVyYXRpb25JZCA9PT0gX3RoaXMuZmV0Y2hPcGVyYXRpb25JZCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuaXNGZXRjaGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFsdWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYi5kYXRlVGltZSAtIGEuZGF0ZVRpbWU7IH0pOyAvLyBMYXRlc3QgZmlyc3RcclxuICAgICAgICAgICAgICAgIF90aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vcHRpbWlzdGljVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLm5vdGlmeSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgLy8gRmFpbFxyXG4gICAgICAgICAgICBpZiAoZmV0Y2hPcGVyYXRpb25JZCA9PT0gX3RoaXMuZmV0Y2hPcGVyYXRpb25JZCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuaXNGZXRjaGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICAgICAgICAgIF90aGlzLmZhaWwoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRGVsdGFDYWNoZUVudHJ5LnByb3RvdHlwZS5mZXRjaEZyb21TZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucXVlcnkuYnJhbmNoSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlbHRhcyBvbmx5IGF2YWlsYWJsZSBvbiBicmFuY2hlcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNsaWVudC5odHRwLmdldCgnZGVsdGFzJywgdGhpcy5xdWVyeSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzID49IDMwMCB8fCByZXMuc3RhdHVzIDwgMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRGVsdGFDYWNoZUVudHJ5LnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zdWJzY3JpYmVyczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBvYnNlcnZlciA9IF9iLm9ic2VydmVyLCBzdWJzY3JpcHRpb24gPSBfYi5zdWJzY3JpcHRpb247XHJcbiAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlLCBudWxsLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBEZWx0YUNhY2hlRW50cnkucHJvdG90eXBlLmZhaWwgPSBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICB2YXIgY29weSA9IHRoaXMuc3Vic2NyaWJlcnMuc2xpY2UoKTtcclxuICAgICAgICB0aGlzLnN1YnNjcmliZXJzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBjb3B5XzEgPSBjb3B5OyBfaSA8IGNvcHlfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIF9hID0gY29weV8xW19pXSwgb2JzZXJ2ZXIgPSBfYS5vYnNlcnZlciwgc3Vic2NyaXB0aW9uID0gX2Euc3Vic2NyaXB0aW9uO1xyXG4gICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERlbHRhQ2FjaGVFbnRyeTtcclxufSgpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVsdGEtY2FjaGUuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgTXV0YXRpb25RdWV1ZSB9IGZyb20gJy4vbXV0YXRpb24tcXVldWUnO1xyXG5pbXBvcnQgeyBCYXRjaFJ1bm5lciB9IGZyb20gJy4uL2tlZC1iYWNrZW5kLWNsaWVudCc7XHJcbmltcG9ydCB7IHRhYmxlcyB9IGZyb20gJ2tlZGJhY2tlbmQtc2NoZW1hL3NjaGVtYS5qc29uJztcclxuaW1wb3J0IHsgQ2FjaGVCdXN0IH0gZnJvbSAnLi9jYWNoZS1idXN0JztcclxuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL29ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBEZWx0YUNhY2hlIH0gZnJvbSAnLi9kZWx0YS1jb2xsZWN0aW9uL2RlbHRhLWNhY2hlJztcclxudmFyIEtlZEJhY2tlbmRXcml0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kV3JpdGVyKG11dGF0aW9uUXVldWUsIHF1ZXJ5U2V0LCBnZXRDbGllbnQsIGdldFVzZXIsIGdldFVzZXJEaXNwbGF5TmFtZSkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IG11dGF0aW9uUXVldWU7XHJcbiAgICAgICAgdGhpcy5xdWVyeVNldCA9IHF1ZXJ5U2V0O1xyXG4gICAgICAgIHRoaXMuZ2V0Q2xpZW50ID0gZ2V0Q2xpZW50O1xyXG4gICAgICAgIHRoaXMuZ2V0VXNlciA9IGdldFVzZXI7XHJcbiAgICAgICAgdGhpcy5nZXRVc2VyRGlzcGxheU5hbWUgPSBnZXRVc2VyRGlzcGxheU5hbWU7XHJcbiAgICAgICAgdGhpcy5fdGltZW91dElkID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9pc1NhdmluZ1Byb21pc2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFZlcnNpb24gPSAwO1xyXG4gICAgICAgIHRoaXMucGVyc2lzdGVkVmVyc2lvbiA9IG5ldyBFbWl0dGVyKDApO1xyXG4gICAgICAgIHRoaXMuZXJyb3JTdWJzY3JpYmVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdWJzY3JpYmVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGVsdGFDYWNoZSA9IG5ldyBEZWx0YUNhY2hlKGdldENsaWVudCwgZ2V0VXNlciwgZ2V0VXNlckRpc3BsYXlOYW1lKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZSwgXCJpc1NhdmluZ1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAhIXRoaXMuX2lzU2F2aW5nUHJvbWlzZTsgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUsIFwiaXNFZGl0ZWRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpLmxlbmd0aCA+IDA7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuZXJyb3JTdWJzY3JpYmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN1YnNjcmliZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuZXJyb3JTdWJzY3JpYmVycyA9IHRoaXMuZXJyb3JTdWJzY3JpYmVycy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgIT09IGNhbGxiYWNrOyB9KTtcclxuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaWJlcnMgPSB0aGlzLnN0YXRlU3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzICE9PSBjYWxsYmFjazsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUuZGlzcGF0Y2hFcnJvciA9IGZ1bmN0aW9uIChlcnJvciwgcmV0cnlhYmxlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLmVycm9yU3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCByZXRyeWFibGUsIF90aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoXykgeyB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUuZGlzcGF0Y2hTdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soX3RoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChfKSB7IH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5tdXRhdGUgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBkZWJvdW5jZSkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZS5hZGQobXV0YXRpb25zKTtcclxuICAgICAgICArK3RoaXMuY3VycmVudFZlcnNpb247XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaFN0YXRlQ2hhbmdlKCk7XHJcbiAgICAgICAgdGhpcy5xdWVyeVNldC5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gICAgICAgIHRoaXMuZGVsdGFDYWNoZS5hcHBseU11dGF0aW9ucyh0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCksIHsgb3B0aW1pc3RpYzogdHJ1ZSB9KTtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzU2F2aW5nUHJvbWlzZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZW91dElkKVxyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXRJZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IHNldFRpbWVvdXQodGhpcy5zYXZlLmJpbmQodGhpcyksIGRlYm91bmNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgaXNTYXZpbmcsIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcsIGJlY2FzZSBpdCB3aWxsIHJlLWNoZWNrIGlmIGFkZGl0aW9uYWxcclxuICAgICAgICAvLyBtdXRhdGlvbnMgaGF2ZSBjb21lLCB3aGVuIHNhdmluZyBpcyBkb25lLlxyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLnJldHJ5U2F2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zYXZlKCk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUud2FpdEZvclZlcnNpb25Ub1BlcnNpc3QgPSBmdW5jdGlvbiAodmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGVyc2lzdGVkVmVyc2lvbjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBlcnNpc3RlZFZlcnNpb24ubG9hZCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNpc3RlZFZlcnNpb24gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHBlcnNpc3RlZFZlcnNpb24gPCB2ZXJzaW9uKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSgpOyAvLyBCZSBtb3JlIGVhZ2VyIHRvIHNhdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wZXJzaXN0ZWRWZXJzaW9uLmZpbHRlcihmdW5jdGlvbiAocGVyc2lzdGVkVmVyc2lvbikgeyByZXR1cm4gcGVyc2lzdGVkVmVyc2lvbiA+PSB2ZXJzaW9uOyB9KS5sb2FkKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5fdGltZW91dElkKVxyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dElkKTtcclxuICAgICAgICBpZiAodGhpcy5faXNTYXZpbmdQcm9taXNlKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNTYXZpbmdQcm9taXNlO1xyXG4gICAgICAgIGlmICghdGhpcy5pc0VkaXRlZClcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5faXNTYXZpbmdQcm9taXNlID0gdGhpcy5fc2F2ZSgpO1xyXG4gICAgICAgIHRoaXMuX2lzU2F2aW5nUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7IH0pLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2lzU2F2aW5nUHJvbWlzZSA9IG51bGw7IH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1NhdmluZ1Byb21pc2U7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUuX3NhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBtdXRhdGlvbnMsIHZlcnNpb24sIG11dGF0aW9uUmVxdWVzdHMsIHJlc18xLCBldGFnTXV0YXRpb25zLCBlcnJvcl8xO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gPSB0aGlzLmN1cnJlbnRWZXJzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUubW92ZVRvU2F2aW5nUXVldWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25SZXF1ZXN0cyA9IHRoaXMubWFwTXV0YXRpb25zKG11dGF0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgNiwgMTEsIDEyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0Q2xpZW50KCkuYmF0Y2gobXV0YXRpb25SZXF1ZXN0cyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV0YWdNdXRhdGlvbnMgPSBPYmplY3Qua2V5cyhyZXNfMS5uZXdFdGFncykubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wOiAndXBkYXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFEb2M6IHsgJGV0YWc6IHJlc18xLm5ld0V0YWdzW2lkXSB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogbnVsbCAvLyBXZSBkb24ndCBoYXZlIHRoZSB0YXJnZXQgbmFtZS4gQnV0IHRoaXMgbXV0YXRpb24gd29uJ3QgYmUgdmlzaWJsZSBpbiBhIERlbHRhQ29sbGVjdGlvbiBhbnl3YXksIHNvIGl0IHdvbnQgYmUgdXNlZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnZhbGlkYXRlIGNhY2hlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENhY2hlQnVzdC5pbnZhbGlkYXRlQ2FjaGUobXV0YXRpb25SZXF1ZXN0cywgdGhpcy5nZXRVc2VyKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb21tbWl0IG11dGF0aW9ucyBhbG9uZyB3aXRoIGV0YWdNdXRhdGlvbnMgaW50byBxdWVyaWVzIGNhY2hlZCBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVyc2lzdGVkVmVyc2lvbi5kaXNwYXRjaCh2ZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWx0YUNhY2hlLmFwcGx5TXV0YXRpb25zKG11dGF0aW9ucywgeyBvcHRpbWlzdGljOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5xdWVyeVNldC5jb21taXRNdXRhdGlvbnMoTXV0YXRpb25RdWV1ZS5tZXJnZShtdXRhdGlvbnMsIGV0YWdNdXRhdGlvbnMpLCB2ZXJzaW9uKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE9uIHN1Y2Nlc3MsIGNsZWFyIHNhdmluZyBxdWV1ZSBhcyB0aGUgbXV0YXRpb25zIHdpbGwgbm93IGJlIGNvbW1pdHRlZCB0byBhbGwgcXVlcnkncyBkYXRhIGluc3RlYWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZS5jbGVhclNhdmluZ1F1ZXVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpOyAvLyBpc0VkaXRlZCBtYXkgaGF2ZSB0dXJuZWQgdG8gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmluYWxseSwgbm90aWZ5IHN1YnNjcmliZXJzIHNvIHRoYXQgdmlld3MgZ2V0IHVwZGF0ZWQgd2l0aCBjb21taXR0ZWQgcmVzdWx0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U2V0Lm5vdGlmeVN1YnNjcmliZXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKS5sZW5ndGggPiAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZGl0aW9uYWwgbXV0YXRpb25zIGhhcHBlbmQgd2hpbGUgd2Ugd2VyZSBzYXZpbmcuIEhhbmRsZSB0aGVtIGFzIHdlbGwuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX3NhdmUoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRpdGlvbmFsIG11dGF0aW9ucyBoYXBwZW5kIHdoaWxlIHdlIHdlcmUgc2F2aW5nLiBIYW5kbGUgdGhlbSBhcyB3ZWxsLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMyAvKmJyZWFrKi8sIDEyXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVyc2lzdGVkVmVyc2lvbi5kaXNwYXRjaEVycm9yKGVycm9yXzEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShlcnJvcl8xICYmIGVycm9yXzEubmFtZSAmJiBlcnJvcl8xLm5hbWUuc3RhcnRzV2l0aChcImh0dHA0XCIpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjY2VzcyBDb250cm9sIGRlbmllZCwgYmFkIHJlcXVlc3Qgb3Igc2ltaWxhci4gVGhyb3cgbXV0YXRpb25zIGF3YXkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFcnJvcihlcnJvcl8xLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZS5jbGVhclNhdmluZ1F1ZXVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpOyAvLyBpc0VkaXRlZCBtYXkgaGF2ZSB0dXJuZWQgdG8gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWVyeVNldC5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCkubGVuZ3RoID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIbyBobyEgQWRkaXRpb25hbCBtdXRhdGlvbnMgaGFwcGVuZCB3aGlsZSB3ZSB3ZXJlIHNhdmluZy4gSGFuZGxlIHRoZW0gYWxvbmUuIFRIZXkgbWlnaHQgYmUgbW9yZSBsdWNreS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5fc2F2ZSgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhvIGhvISBBZGRpdGlvbmFsIG11dGF0aW9ucyBoYXBwZW5kIHdoaWxlIHdlIHdlcmUgc2F2aW5nLiBIYW5kbGUgdGhlbSBhbG9uZS4gVEhleSBtaWdodCBiZSBtb3JlIGx1Y2t5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gODtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMyAvKmJyZWFrKi8sIDEwXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFcnJvcihlcnJvcl8xLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxMDtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzMgLypicmVhayovLCAxMl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaFN0YXRlQ2hhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNyAvKmVuZGZpbmFsbHkqL107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5tYXBNdXRhdGlvbnMgPSBmdW5jdGlvbiAobXV0YXRpb25zKSB7XHJcbiAgICAgICAgdmFyIGJyID0gbmV3IEJhdGNoUnVubmVyKCk7XHJcbiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgc3dpdGNoIChtLm9wKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyLnVwZGF0ZShtLnRhYmxlLCBtLmlkLCBtLmRlbHRhRG9jLCBtLmJyYW5jaElkKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2FkZC1yZWxhdGVkJzpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW0ucmVsYXRlZERvYy4kZXRhZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBObyAkZXRhZyBtZWFucyB0aGlzIGlzIGEgbmV3IGRvY3VtZW50LiBBZGQgaXQgYmVmb3JlIGxpbmtpbmcgdG8gaXQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyLmFkZCh0YWJsZXNbbS50YWJsZV0ucmVsYXRpb25zaGlwc1ttLmdyYXBoUHJvcF0sIG0ucmVsYXRlZERvYywgbS5icmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyLmxpbmsyKG0udGFibGUsIG0uaWQsIG0uZ3JhcGhQcm9wLCBtLnJlbGF0ZWREb2MuaWQsIG0uYnJhbmNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlLXJlbGF0ZWQnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyLnVubGluazIobS50YWJsZSwgbS5pZCwgbS5ncmFwaFByb3AsIG0ucmVsYXRlZERvYy5pZCwgbS5icmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd1bmRvLWxpbmsnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyLnVuZG9MaW5rKG0udGFibGUsIG0uaWQsIG0uZ3JhcGhQcm9wLCBtLnJlbGF0ZWRJZCwgbS5icmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkZWxldGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyLmRlbGV0ZShtLnRhYmxlLCBtLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NsZWFyLWJyYW5jaCc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnIuY2xlYXJCcmFuY2gobS5icmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtZXJnZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnIubWVyZ2UobS5icmFuY2hJZCwgbS50YXJnZXRCcmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYnIubXV0YXRpb25SZXF1ZXN0cztcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2VkQmFja2VuZFdyaXRlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZFdyaXRlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLXdyaXRlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi4vLi4vb2JzZXJ2YWJsZSc7XHJcbnZhciBEZWx0YUNvbGxlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhEZWx0YUNvbGxlY3Rpb24sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBEZWx0YUNvbGxlY3Rpb24oZGVsdGFDYWNoZSwgcXVlcnkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIF90aGlzLmRlbHRhQ2FjaGUuc3Vic2NyaWJlKHF1ZXJ5LCBvYnNlcnZlcik7IH0pIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuZGVsdGFDYWNoZSA9IGRlbHRhQ2FjaGU7XHJcbiAgICAgICAgX3RoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBEZWx0YUNvbGxlY3Rpb24ucHJvdG90eXBlLnRhZ3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRhZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB0YWdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXcgRGVsdGFDb2xsZWN0aW9uKHRoaXMuZGVsdGFDYWNoZSwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5xdWVyeSwgeyB0YWdzOiB0YWdzIH0pKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRGVsdGFDb2xsZWN0aW9uO1xyXG59KENvbGxlY3Rpb24pKTtcclxuZXhwb3J0IHsgRGVsdGFDb2xsZWN0aW9uIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbHRhLWNvbGxlY3Rpb24uanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgdGFibGVzIH0gZnJvbSAna2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb24nO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ29sbGVjdGlvbiB9IGZyb20gJy4va2VkYmFja2VuZC1jb2xsZWN0aW9uJztcclxuaW1wb3J0IHsgUXVlcnlTZXQgfSBmcm9tICcuL3F1ZXJ5LXNldCc7XHJcbmltcG9ydCB7IE11dGF0aW9uUXVldWUgfSBmcm9tICcuL211dGF0aW9uLXF1ZXVlJztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFdyaXRlciB9IGZyb20gJy4va2VkYmFja2VuZC13cml0ZXInO1xyXG5pbXBvcnQgeyBEZWx0YUNvbGxlY3Rpb24gfSBmcm9tICcuL2RlbHRhLWNvbGxlY3Rpb24vZGVsdGEtY29sbGVjdGlvbic7XHJcbnZhciBLZWRCYWNrZW5kUmVwbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRSZXBvKGdldENsaWVudCwgZ2V0VXNlciwgZ2V0VXNlckRpc3BsYXlOYW1lLCBkZWZhdWx0UXVlcnlPcHRpb25zLCBtdXRhdGlvblF1ZXVlLCBxdWVyeVNldCwgd3JpdGVyLCBjYWNoZU9wdGltaXplZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5nZXRDbGllbnQgPSBnZXRDbGllbnQ7XHJcbiAgICAgICAgdGhpcy5nZXRVc2VyID0gZ2V0VXNlcjtcclxuICAgICAgICB0aGlzLmdldFVzZXJEaXNwbGF5TmFtZSA9IGdldFVzZXJEaXNwbGF5TmFtZTtcclxuICAgICAgICB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMgPSBkZWZhdWx0UXVlcnlPcHRpb25zO1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IG11dGF0aW9uUXVldWU7XHJcbiAgICAgICAgdGhpcy5xdWVyeVNldCA9IHF1ZXJ5U2V0O1xyXG4gICAgICAgIHRoaXMud3JpdGVyID0gd3JpdGVyO1xyXG4gICAgICAgIHRoaXMuY2FjaGVPcHRpbWl6ZWQgPSBjYWNoZU9wdGltaXplZDtcclxuICAgICAgICBpZiAoIWRlZmF1bHRRdWVyeU9wdGlvbnMpXHJcbiAgICAgICAgICAgIHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIGlmICghbXV0YXRpb25RdWV1ZSlcclxuICAgICAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlID0gbmV3IE11dGF0aW9uUXVldWUoKTtcclxuICAgICAgICBpZiAoIXF1ZXJ5U2V0KVxyXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5U2V0ID0gbmV3IFF1ZXJ5U2V0KHRoaXMubXV0YXRpb25RdWV1ZSk7XHJcbiAgICAgICAgaWYgKCF3cml0ZXIpXHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVyID0gbmV3IEtlZEJhY2tlbmRXcml0ZXIodGhpcy5tdXRhdGlvblF1ZXVlLCB0aGlzLnF1ZXJ5U2V0LCBnZXRDbGllbnQsIGdldFVzZXIsIGdldFVzZXJEaXNwbGF5TmFtZSk7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGFibGVzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkge1xyXG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IG5ldyBLZWRCYWNrZW5kQ29sbGVjdGlvbihfdGhpcywgdGFibGUsIGRlZmF1bHRRdWVyeU9wdGlvbnMgfHwge30pO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVPcHRpbWl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLmNhY2hlT3B0aW1pemVkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXNbdGFibGVdID0gY29sbGVjdGlvbjtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmRlbHRhcyA9IG5ldyBEZWx0YUNvbGxlY3Rpb24odGhpcy53cml0ZXIuZGVsdGFDYWNoZSwge1xyXG4gICAgICAgICAgICBicmFuY2hJZDogdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zLmJyYW5jaElkIC8vIElmIGJyYW5jaElkIGlzIHVuZGVmaW5lZC4gRGVsdGFDb2xsZWN0aW9uIHdpbGwgcmVzcG9uZCB3aXRoIEVycm9yIG9uIHN1YnNjcmliZSgpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUudGFibGUgPSBmdW5jdGlvbiAodGFibGVOYW1lKSB7XHJcbiAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBuZXcgS2VkQmFja2VuZENvbGxlY3Rpb24odGhpcywgdGFibGVOYW1lLCB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMpO1xyXG4gICAgICAgIGlmICh0aGlzLmNhY2hlT3B0aW1pemVkKVxyXG4gICAgICAgICAgICBjb2xsZWN0aW9uID0gY29sbGVjdGlvbi5jYWNoZU9wdGltaXplZCgpO1xyXG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5fY2xvbmUgPSBmdW5jdGlvbiAocXVlcnlPcHRpb25zLCBjYWNoZU9wdGltaXplZCkge1xyXG4gICAgICAgIHZhciBjbG9uZSA9IG5ldyBLZWRCYWNrZW5kUmVwbyh0aGlzLmdldENsaWVudCwgdGhpcy5nZXRVc2VyLCB0aGlzLmdldFVzZXJEaXNwbGF5TmFtZSwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zLCBxdWVyeU9wdGlvbnMpLCB0aGlzLm11dGF0aW9uUXVldWUsIHRoaXMucXVlcnlTZXQsIHRoaXMud3JpdGVyLCBjYWNoZU9wdGltaXplZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5jYWNoZU9wdGltaXplZCA6IGNhY2hlT3B0aW1pemVkKTtcclxuICAgICAgICByZXR1cm4gY2xvbmU7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLmJyYW5jaCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9uZSh7IGJyYW5jaElkOiBicmFuY2hJZCB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUucm9sZSA9IGZ1bmN0aW9uIChyb2xlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb25lKHsgcm9sZTogcm9sZSB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUub3B0aW1pemVDYWNoZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xvbmUoe30sIHRydWUpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5jbGVhckJyYW5jaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucy5icmFuY2hJZClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNsZWFyIG1hc3RlciBicmFuY2hcIik7XHJcbiAgICAgICAgdGhpcy53cml0ZXIubXV0YXRlKFt7IG9wOiAnY2xlYXItYnJhbmNoJywgYnJhbmNoSWQ6IHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucy5icmFuY2hJZCB9XSwgMCk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKHRhcmdldEJyYW5jaElkKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBtZXJnZSBmcm9tIG1hc3RlciBicmFuY2hcIik7XHJcbiAgICAgICAgdGhpcy53cml0ZXIubXV0YXRlKFt7IG9wOiAnbWVyZ2UnLCBicmFuY2hJZDogdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zLmJyYW5jaElkLCB0YXJnZXRCcmFuY2hJZDogdGFyZ2V0QnJhbmNoSWQgfV0sIDApO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5zYXZlTm93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMud3JpdGVyLndhaXRGb3JWZXJzaW9uVG9QZXJzaXN0KHRoaXMud3JpdGVyLmN1cnJlbnRWZXJzaW9uKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEtlZEJhY2tlbmRSZXBvO1xyXG59KCkpO1xyXG5leHBvcnQgeyBLZWRCYWNrZW5kUmVwbyB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLXJlcG8uanMubWFwIiwiaW1wb3J0IGVudiBmcm9tICcuL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IGdldEdsb2JhbElkLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgY2ZnIGZyb20gJy4vS0VELmNmZyc7XHJcbmltcG9ydCB7IFNjaG9vbCwgQnJhbmNoIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XHJcblxyXG5leHBvcnQgY29uc3QgZGIgPSBuZXcgS2VkQmFja2VuZFJlcG8oXHJcbiAgKCk9PmVudi5rZWRCYWNrZW5kQ2xpZW50LFxyXG4gICgpPT5lbnYuY3VycmVudFVzZXIgP1xyXG4gICAgZW52LmN1cnJlbnRVc2VyLm1haWwgOlxyXG4gICAgXCJcIixcclxuICAoKT0+ZW52LmN1cnJlbnRVc2VyID9cclxuICAgIGVudi5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSB8fCBlbnYuY3VycmVudFVzZXIubWFpbCA6XHJcbiAgICBcIlwiKTtcclxuXHJcbmV4cG9ydCBjb25zdCBnbG9iYWxJZCA9IGdldEdsb2JhbElkKGNmZy5LRURfUkVBTE0pO1xyXG5leHBvcnQgY29uc3QgU2Nob29scyA9IHtcclxuICBzdGFuZGFyZFNjaG9vbDogZGIuc2Nob29scy5uYW1lKFwic3RhbmRhcmRcIikuY2FjaGVPcHRpbWl6ZWQoKS5zaW5nbGUoKSxcclxuICBnZXQgbXlTY2hvb2wgKCkgeyByZXR1cm4gZGIuc2Nob29scy5uYW1lKGVudi5jdXJyZW50VXNlci5zY2hvb2wpLmNhY2hlT3B0aW1pemVkKCkuc2luZ2xlKCk7IH1cclxufTtcclxuZXhwb3J0IGNvbnN0IENvdXJzZUluc3RhbmNlcyA9IHtcclxuICBnZXRCcmFuY2hJZChzY2hvb2w6IFZhbHVlPFNjaG9vbD4sIGNvdXJzZUlkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBzY2hvb2wuc3dpdGNoTWFwKHNjaG9vbCA9PlxyXG4gICAgICBkYi5icmFuY2hlc1xyXG4gICAgICAgIC5oYXNFZGdlc0Zyb20oW3NjaG9vbC5vZmZpY2lhbEJyYW5jaElkXSlcclxuICAgICAgICAubmFtZShcImRyYWZ0XCIpXHJcbiAgICAgICAgLnRhZ3MoY291cnNlSWQpXHJcbiAgICAgICAgLmlkc09ubHkoKVxyXG4gICAgICAgIC5tYXAoKHtpZH0pID0+IGlkKVxyXG4gICAgICAgIC50b1ZhbHVlKClcclxuICAgICAgICAubWFwKGlkcyA9PiBpZHMubGVuZ3RoID4gMCA/IGlkc1swXSA6IHVuZGVmaW5lZCkpO1xyXG4gIH0sXHJcblxyXG4gIC8qKiBHZXQgYSBEUkFGVCBicmFuY2ggZm9yIGdpdmVuIGNvdXJzZSBJRCBhbmQgZ2l2ZW4gc2Nob29sLlxyXG4gICAqIElmIHRoZXJlIGlzIG5vdCB5ZXQgc3VjaCBhIGJyYW5jaCwgY3JlYXRlIGl0IHVzaW5nIG11dGF0aW9uc09uRW1wdHkoKSB3aGljaCB3aWxsXHJcbiAgICogbGVhZCB0byB0aGUgQyMgY29kZSBEb2N1bWVudFJlcG9zaXRvcnkuUmVhZE9yTXV0YXRlKCkgdmlhIERvY3VtZW50Q29udHJvbGxlci5cclxuICAgKi9cclxuICBnZXRPckNyZWF0ZUJyYW5jaElkKHNjaG9vbDogVmFsdWU8U2Nob29sPiwgY291cnNlSWQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGRiLmNvdXJzZUluc3RhbmNlcy5pZHNPbmx5KCkuaWQoY291cnNlSWQpLnN3aXRjaE1hcCgoKT0+IC8vIFRIaXMgZmlyc3QgbGluZSB2ZXJpZmllcyBjb3Vyc2UgZXhpc3RzLiBJZiBkZWxldGVkLCBkb24ndCB0cnkgdG8gcmVjcmVhdGUgaXRzIGJyYW5jaCFcclxuICAgICAgc2Nob29sLnN3aXRjaE1hcChzY2hvb2wgPT4gXHJcbiAgICAgIGRiLmJyYW5jaGVzXHJcbiAgICAgICAgLmhhc0VkZ2VzRnJvbShbc2Nob29sLm9mZmljaWFsQnJhbmNoSWRdKVxyXG4gICAgICAgIC5uYW1lKFwiZHJhZnRcIilcclxuICAgICAgICAudGFncyhjb3Vyc2VJZClcclxuICAgICAgICAuaWRzT25seSgpXHJcbiAgICAgICAgLm11dGF0aW9uc09uRW1wdHkodHggPT4ge1xyXG4gICAgICAgICAgLy8gVGhlc2UgMiBtdXRhdGlvbnMgd2lsbCBvY2N1ciBzZXJ2ZXIgc2lkZSwgYXRvbWljYWxseS5cclxuICAgICAgICAgIC8vIFdpbGwgYmUgc2VudCBvbiBlYWNoIHJlcXVlc3QgaW4gdGhlIHF1ZXJ5LCBidXQgd2lsbCBvbmx5IGV4ZWN1dGUgaWYgcXVlcnkgcmVzdWx0cyBpbiB6ZXJvIGl0ZW1zLlxyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlNjaG9vbDpcIiwgc2Nob29sKTtcclxuICAgICAgICAgIGNvbnN0IGlkID0gY3JlYXRlVVVJRCgpO1xyXG4gICAgICAgICAgdHguYWRkKFwiYnJhbmNoZXNcIiwge1xyXG4gICAgICAgICAgICBpZCxcclxuICAgICAgICAgICAgYWNsOiBbXHJcbiAgICAgICAgICAgICAgXCJyb2xlOlVTRVI6UlwiLFxyXG4gICAgICAgICAgICAgIGBzY2hvb2xSb2xlOiR7c2Nob29sLm5hbWV9L0VNUExPWUVFOlNgXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIG5hbWU6ICdkcmFmdCcsXHJcbiAgICAgICAgICAgIHNjaG9vbElkOiBzY2hvb2wuaWQsXHJcbiAgICAgICAgICAgIHRyZWVQYXJlbnRJZDogc2Nob29sLm9mZmljaWFsQnJhbmNoSWQsXHJcbiAgICAgICAgICAgIHRhZ3M6IFtjb3Vyc2VJZF1cclxuICAgICAgICAgIH0gYXMgQnJhbmNoKTtcclxuICAgICAgICAgIC8vIEFwcHJvdmluZyB0aGUgYnJhbmNoIG1ha2VzIHN1cmUgdGhhdCBpdCB3YXMgY3JlYXRlZCBieSBhbiBFTVBMT1lFRSBvbiBnaXZlbiBzY2hvb2wuXHJcbiAgICAgICAgICB0eC5saW5rMihcImJyYW5jaGVzXCIsIHNjaG9vbC5vZmZpY2lhbEJyYW5jaElkLCBcImFwcHJvdmVkQ2hpbGRyZW5cIiwgaWQpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnNpbmdsZSgpXHJcbiAgICAgICAgLm1hcCgoe2lkfSkgPT4gaWQpKSk7XHJcbiAgfSxcclxuXHJcbiAgZ2V0QWxsRGVzY2VuZGFudElkcyhjb3Vyc2VJZDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gZGIuY291cnNlQmxvY2tzLnRhZ3MoY291cnNlSWQpLmlkc09ubHkoKS5jb25jYXQoXHJcbiAgICAgIGRiLmNvdXJzZUNvbnRlbnRzLnRhZ3MoY291cnNlSWQpLmlkc09ubHkoKSkuY29uY2F0KFxyXG4gICAgICBkYi5jb3Vyc2VUYWJzLnRhZ3MoY291cnNlSWQpLmlkc09ubHkoKSkuY29uY2F0KFxyXG4gICAgICBkYi50YXNrcy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkpXHJcbiAgICAgIC5tYXAoeCA9PiB4LmlkKTtcclxuICB9XHJcbn1cclxuIiwibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNwaW5uZXIgPSAoKT0+IDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXNwaW5uZXIgZmEtc3BpblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4mbmJzcDs8L3NwYW4+O1xyXG4iLCJpbXBvcnQgeyBBY2Nlc3NDbGFpbSwgRG9jdW1lbnRBY2Nlc3MsIGhhc0FjY2VzcyBhcyBfaGFzQWNjZXNzLCBBY2Nlc3NSaWdodCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBnZXRVc2VyQ2xhaW1zIGZyb20gJy4vZ2V0LXVzZXItY2xhaW1zJztcclxuaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZywgZ2VuZXJhdGVRdWVyeVN0cmluZyB9IGZyb20gXCIuLi91dGlscy9xdWVyeS1zdHJpbmdcIjtcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcclxuZXhwb3J0IHsgZ2V0VXNlckNsYWltcyB9O1xyXG5cclxuZXhwb3J0IGNvbnN0IElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TID0gW1widXNlclwiLFwicm9sZVwiLFwic2Nob29sXCIsXCJkZWJ1Z1wiLFwidGVzdFZlcnNpb25cIixcInRlc3R2ZXJzaW9uXCIsXCJzY2hvb2xUeXBlXCIsXCJzY2hvb2x0eXBlXCJdO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc0FjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50LCByZXF1ZXN0ZWRSaWdodDogQWNjZXNzUmlnaHQpIHtcclxuICB2YXIgY2xhaW1zID0gZ2V0VXNlckNsYWltcyh1c2VyKTtcclxuICBpZiAocmVxdWVzdGVkUmlnaHQgIT09ICdSJyAmJiB1c2VyLnR1dG9yRm9yKSB7XHJcbiAgICBjbGFpbXMgPSBjbGFpbXMuZmlsdGVyKGNsYWltID0+IGNsYWltLnR5cGUgIT09ICdlbWFpbCcpO1xyXG4gIH1cclxuICB2YXIgcmVzdWx0ID0gX2hhc0FjY2VzcyhEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nQXJyYXkoZG9jLmFjbCB8fCBbXSksIGNsYWltcywgcmVxdWVzdGVkUmlnaHQpO1xyXG4gIC8vY29uc29sZS5sb2coYEhhcyAke3JlcXVlc3RlZFJpZ2h0fSBhY2Nlc3MgdG8gJHtkb2MubmFtZX0vJHtkb2MuaWR9OiAke3Jlc3VsdH1gKTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFzUmVhZEFjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50KSB7XHJcbiAgcmV0dXJuIGhhc0FjY2Vzcyh1c2VyLCBkb2MsICdSJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNXcml0ZUFjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50KSB7XHJcbiAgcmV0dXJuIGhhc0FjY2Vzcyh1c2VyLCBkb2MsICdXJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNTaGFyZUFjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50KSB7XHJcbiAgcmV0dXJuIGhhc0FjY2Vzcyh1c2VyLCBkb2MsICdTJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1RlYWNoZXJBdFNjaG9vbCh1c2VyOiBVc2VyLCBzY2hvb2w6IHN0cmluZykge1xyXG4gIGNvbnN0IGlzVGVhY2hlciA9IHVzZXIucm9sZXMuc29tZShyb2xlID0+IHJvbGUgPT09ICdFTVBMT1lFRScgfHwgcm9sZSA9PT0gJ0FETUlOJyk7XHJcbiAgY29uc3QgYmVsb25nc1RvU2Nob29sID0gKHNjaG9vbHx8XCJcIikudG9Mb3dlckNhc2UoKSA9PT0gdXNlci5zY2hvb2wudG9Mb3dlckNhc2UoKTtcclxuICByZXR1cm4gKGlzVGVhY2hlciAmJiBiZWxvbmdzVG9TY2hvb2wpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNBZG1pbk9yVGVhY2hlckF0U2Nob29sKHVzZXI6IFVzZXIsIHNjaG9vbDogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIHVzZXIucm9sZXMuaW5jbHVkZXMoXCJBRE1JTlwiKSB8fCBpc1RlYWNoZXJBdFNjaG9vbCh1c2VyLCBzY2hvb2wpO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgaW1wZXJzb25hdGlvbkVudiA9IHtcclxuICBhY3RBcyAob3B0aW9uczoge3JvbGUsIHNjaG9vbCwgdXJsP30pIHtcclxuICAgIGNvbnN0IHtyb2xlLCBzY2hvb2wsIHVybH0gPSBvcHRpb25zO1xyXG4gICAgY29uc3QgY3VycmVudFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gpO1xyXG4gICAgY29uc3QgbmV3UXVlcnkgPSB7Li4uY3VycmVudFF1ZXJ5LCByb2xlLCBzY2hvb2x9O1xyXG4gICAgY29uc3QgbmV3UXVlcnlTdHJpbmcgPSBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKG5ld1F1ZXJ5KTtcclxuICAgIGlmICh1cmwpIHtcclxuICAgICAgbG9jYXRpb24uaHJlZiA9IGAke3VybH0ke25ld1F1ZXJ5U3RyaW5nfWA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsb2NhdGlvbi5oYXNoID0gXCIjXCI7XHJcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9IG5ld1F1ZXJ5U3RyaW5nO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjdEFzKG9wdGlvbnM6IHtyb2xlLCBzY2hvb2wsIHVybD99KSB7XHJcbiAgaW1wZXJzb25hdGlvbkVudi5hY3RBcyhvcHRpb25zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5ICh1cmw6IHN0cmluZywgcXVlcnk6IHtbbmFtZTogc3RyaW5nXSA6IHN0cmluZ30pIHtcclxuICBjb25zdCBjdXJyZW50UXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCk7XHJcbiAgY29uc3QgcHJlc2VydmVkUXVlcnkgPSB7fTtcclxuICBmb3IgKGNvbnN0IHBhcmFtIG9mIElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TKSB7XHJcbiAgICBpZiAoY3VycmVudFF1ZXJ5W3BhcmFtXSkgcHJlc2VydmVkUXVlcnlbcGFyYW1dID0gY3VycmVudFF1ZXJ5W3BhcmFtXTtcclxuICB9XHJcbiAgY29uc3QgbmV3UXVlcnlTdHJpbmcgPSBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKHsuLi5wcmVzZXJ2ZWRRdWVyeSwgLi4ucXVlcnl9KTtcclxuICBjb25zdCBwSGFzaCA9IHVybC5pbmRleE9mKCcjJyk7XHJcbiAgcmV0dXJuIHBIYXNoID49IDAgP1xyXG4gICAgYCR7dXJsLnN1YnN0cigwLHBIYXNoKX0ke25ld1F1ZXJ5U3RyaW5nfSR7dXJsLnN1YnN0cihwSGFzaCl9YCA6XHJcbiAgICBgJHt1cmx9JHtuZXdRdWVyeVN0cmluZ31gO1xyXG59XHJcbiIsImltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY29udHJhY3RzL2tlZC1tb2RlbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVzZXJDbGFpbXMgKHVzZXI6IFVzZXIpIHtcclxuICByZXR1cm4gW3tcclxuICAgIHR5cGU6IFwiZW1haWxcIixcclxuICAgIHZhbHVlOiB1c2VyLm1haWxcclxuICB9LHtcclxuICAgIHR5cGU6IFwic2Nob29sXCIsXHJcbiAgICB2YWx1ZTogdXNlci5zY2hvb2xcclxuICB9XS5jb25jYXQodXNlci5yb2xlcy5tYXAocm9sZSA9PiAoe1xyXG4gICAgdHlwZTogXCJyb2xlXCIsXHJcbiAgICB2YWx1ZTogcm9sZVxyXG4gIH0pKSkuY29uY2F0KHVzZXIucm9sZXMubWFwKHJvbGUgPT4gKHtcclxuICAgIHR5cGU6IFwic2Nob29sUm9sZVwiLFxyXG4gICAgdmFsdWU6IHVzZXIuc2Nob29sICsgXCIvXCIgKyByb2xlXHJcbiAgfSkpKTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVVVJRCgpIHtcclxuICAgIC8vIERlY2VudCBzb2x1dGlvbiBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxyXG4gICAgdmFyIGQgPSBEYXRlLm5vdygpO1xyXG4gICAgdmFyIHV1aWQgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XHJcbiAgICAgICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KTtcclxuICAgICAgICByZXR1cm4gKGMgPT09ICd4JyA/IHIgOiAociAmIDB4NyB8IDB4OCkpLnRvU3RyaW5nKDE2KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHV1aWQ7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGF2b2lkU2ltdWx0YW5vdXNDYWxscyhtZXRob2QpIHtcclxuICAgIHZhciBvbmdvaW5nUHJvbWlzZSA9IG51bGw7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghb25nb2luZ1Byb21pc2UpIHtcclxuICAgICAgICAgICAgb25nb2luZ1Byb21pc2UgPSBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIG9uZ29pbmdQcm9taXNlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb25nb2luZ1Byb21pc2U7XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxJZChyZWFsbSkge1xyXG4gICAgdmFyIHByZWZpeCA9ICdlYzk2YjNiZS00NWZjLTQxZDMtYjY5ZS0nO1xyXG4gICAgdmFyIHBhZCA9IFsnNTAnLCAnMDgnLCAnZTEnLCAnNDAnLCAnZTQnLCAnZTcnXTtcclxuICAgIGlmIChyZWFsbS5sZW5ndGggPiA2KVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvbyBsb25nIHJlYWxtXCIpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWFsbS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIHZhciBoZXggPSByZWFsbS5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KTtcclxuICAgICAgICBwYWRbaV0gPSBoZXgubGVuZ3RoID09PSAyID9cclxuICAgICAgICAgICAgaGV4IDpcclxuICAgICAgICAgICAgJzAnICsgaGV4O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByZWZpeCArIHBhZC5qb2luKCcnKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVByZWRlc3RpbmF0ZWRJZChpbnB1dCkge1xyXG4gICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVuY29kZXIsIGRhdGEsIGRpZ2VzdCwgX2EsIGk7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGVuY29kZXIuZW5jb2RlKGlucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICBfYSA9IFVpbnQ4QXJyYXkuYmluZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGRhdGEpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBkaWdlc3QgPSBuZXcgKF9hLmFwcGx5KFVpbnQ4QXJyYXksIFt2b2lkIDAsIF9iLnNlbnQoKV0pKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmliYmxlID0gZGlnZXN0W2krK10gJSAxNiB8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2FzaGVkTmliYmxlID0gYyA9PT0gJ3gnID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaWJibGUgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pYmJsZSAmIDB4NyB8IDB4ODtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3YXNoZWROaWJibGUudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qZXhwb3J0IGZ1bmN0aW9uIGJ1ZjJoZXgoYnVmZmVyOiBBcnJheUJ1ZmZlcikge1xyXG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoXHJcbiAgICBuZXcgVWludDhBcnJheShidWZmZXIpLFxyXG4gICAgKHg6IG51bWJlcikgPT4gKCcwMCcgKyB4LnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpKS5qb2luKCcnKTtcclxufSovXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVBcnJheShhLCBtYXBwZXIpIHtcclxuICAgIHZhciByZXR2YWwgPSBhO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgIHZhciB0ID0gYVtpXTtcclxuICAgICAgICB2YXIgbWFwcGVkID0gbWFwcGVyKHQpO1xyXG4gICAgICAgIGlmIChtYXBwZWQgIT09IHQpIHtcclxuICAgICAgICAgICAgaWYgKHJldHZhbCA9PT0gYSlcclxuICAgICAgICAgICAgICAgIHJldHZhbCA9IGEuc2xpY2UoKTtcclxuICAgICAgICAgICAgcmV0dmFsW2ldID0gbWFwcGVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXR2YWw7XHJcbn1cclxuLypcclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUFycmF5PFQ+KGE6IFRbXSwgbWFwcGVyOiAodDogVCkgPT4gVCB8IGZhbHNlKTogVFtdIHtcclxuICBsZXQgcmV0dmFsID0gYTtcclxuICBsZXQgaiA9IDA7XHJcbiAgZm9yIChsZXQgaT0wLGw9YS5sZW5ndGg7IGk8bDsgKytpLCArK2opIHtcclxuICAgIGNvbnN0IHQgPSBhW2ldO1xyXG4gICAgY29uc3QgbWFwcGVkID0gbWFwcGVyKHQpO1xyXG4gICAgaWYgKG1hcHBlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgLy8gTWFwcGVyIHdhbnRzIHRvIGRlbGV0ZSB0aGlzIGRvYy5cclxuICAgICAgaWYgKHJldHZhbCA9PT0gYSkgcmV0dmFsID0gYS5zbGljZSgpO1xyXG4gICAgICByZXR2YWwuc3BsaWNlKGosIDEpO1xyXG4gICAgICAtLWo7IC8vIGNvbXBlbnNhdGUgZm9yICsralxyXG4gICAgfSBlbHNlIGlmIChtYXBwZWQgIT09IHQpIHtcclxuICAgICAgaWYgKHJldHZhbCA9PT0gYSkgcmV0dmFsID0gYS5zbGljZSgpO1xyXG4gICAgICByZXR2YWxbal0gPSBtYXBwZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZXR2YWw7XHJcbn1cclxuKi8gXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImV4cG9ydCBpbnRlcmZhY2UgUGFyc2VRdWVyeVN0cmluZ09wdGlvbnMge1xyXG4gIHRvTG93ZXI/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvblNlYXJjaDogc3RyaW5nLCBvcHRpb25zPzogUGFyc2VRdWVyeVN0cmluZ09wdGlvbnMpOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9IHtcclxuICBjb25zdCB7dG9Mb3dlcn0gPSAob3B0aW9ucyB8fMKge30pIGFzIFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zO1xyXG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gIGlmIChsb2NhdGlvblNlYXJjaCAmJiBsb2NhdGlvblNlYXJjaC5sZW5ndGggPiAxKVxyXG4gICAgbG9jYXRpb25TZWFyY2guc3Vic3RyKDEpXHJcbiAgICAgIC5zcGxpdCgnJicpXHJcbiAgICAgIC5tYXAocGFydCA9PiBwYXJ0LnNwbGl0KCc9JykubWFwKHMgPT4gZGVjb2RlVVJJQ29tcG9uZW50KHMudHJpbSgpKSkpXHJcbiAgICAgIC5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHJlc3VsdFt0b0xvd2VyID8ga2V5LnRvTG93ZXJDYXNlKCkgOiBrZXldID0gdmFsdWUpO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuY29kZVBhcmFtcyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcclxuICByZXR1cm4gT2JqZWN0LmtleXMocGFyYW1zKS5maWx0ZXIoa2V5ID0+IHBhcmFtc1trZXldICE9PSB1bmRlZmluZWQpLm1hcChrZXkgPT4gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtc1trZXldKX1gKS5qb2luKCcmJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKHBhcmFtczoge1trZXk6IHN0cmluZ106c3RyaW5nfSkge1xyXG4gIHJldHVybiBcIj9cIiArIGVuY29kZVBhcmFtcyhwYXJhbXMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIYXNoUXVlcnlTdHJpbmcobG9jYXRpb25IYXNoOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJzZVF1ZXJ5U3RyaW5nT3B0aW9ucykge1xyXG4gIHJldHVybiBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uSGFzaCwgb3B0aW9ucyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUhhc2hRdWVyeVN0cmluZyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcclxuICByZXR1cm4gXCIjXCIgKyBlbmNvZGVQYXJhbXMocGFyYW1zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0VXJsQW5kUXVlcnkgKHVybFdpdGhQb3NzaWJsZVF1ZXJ5OiBzdHJpbmcpIHtcclxuICBjb25zdCBwUXVlcnkgPSB1cmxXaXRoUG9zc2libGVRdWVyeS5pbmRleE9mKCc/Jyk7XHJcbiAgcmV0dXJuIHBRdWVyeSA+PSAwID9cclxuICAgIFt1cmxXaXRoUG9zc2libGVRdWVyeS5zdWJzdHIoMCwgcFF1ZXJ5KSwgdXJsV2l0aFBvc3NpYmxlUXVlcnkuc3Vic3RyKHBRdWVyeSldIDpcclxuICAgIFt1cmxXaXRoUG9zc2libGVRdWVyeSwgXCJcIl07XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5leHBvcnQgY29uc3QgTGFuZ3VhZ2VDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dCh7aW50bDogbnVsbH0pOyIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgRG9jdW1lbnQsIFJlc291cmNlLCBNb2RpZmljYXRpb25UcmFja2VkLCBDb3Vyc2UsIFRhc2ssIFNvZnREb2N1bWVudEFjY2VzcyB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgQmF0Y2hSdW5uZXIsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB1cGRhdGUgZnJvbSAncmVhY3QtYWRkb25zLXVwZGF0ZSc7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSB9IGZyb20gJy4uLy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZURvY3VtZW50R3JhcGhzKG9sZERvYywgbmV3RG9jLCB0YWJsZTogc3RyaW5nLCBncmFwaHM6IHsgW2xhYmVsOiBzdHJpbmddOiBzdHJpbmcgfSwgYmF0Y2g6IEJhdGNoUnVubmVyKSB7XHJcbiAgY29uc3QgZG9jVXBkYXRlcyA9IHt9O1xyXG4gIGNvbnN0IGRvY0lkID0gbmV3RG9jLmlkO1xyXG4gIGZvciAobGV0IG5hdlByb3Agb2YgT2JqZWN0LmtleXMoZ3JhcGhzKSkge1xyXG4gICAgY29uc3QgZm9yZWlnblRhYmxlID0gZ3JhcGhzW25hdlByb3BdO1xyXG4gICAgY29uc3Qgb2xkTGlzdDogRG9jdW1lbnRbXSA9IG9sZERvY1tuYXZQcm9wXSB8fCBbXTtcclxuICAgIGNvbnN0IG5ld0xpc3Q6IERvY3VtZW50W10gPSBuZXdEb2NbbmF2UHJvcF07XHJcbiAgICBpZiAoIW5ld0xpc3QpIGNvbnRpbnVlO1xyXG4gICAgY29uc3QgdHVwbGVzID0gbmV3TGlzdFxyXG4gICAgICAubWFwKChkb2MsIGlkeCk9Pih7ZG9jLCBpZHh9KSk7IC8vIENyZWF0ZSB0dWJsZXMgb2Yge2RvYywgYXJyYXktaW5kZXh9IHNvIHdlIGNhbiB1cGRhdGUgcmVzdWx0XHJcbiAgICBjb25zdCBhZGRlZCA9IHR1cGxlcy5maWx0ZXIodHVwbGUgPT4gIW9sZExpc3Quc29tZShvID0+IG8uaWQgPT09IHR1cGxlLmRvYy5pZCkpOyAvLyBGaW5kIGFkZGVkIGl0ZW1zXHJcblxyXG4gICAgZm9yIChsZXQgYSBvZiBhZGRlZCkge1xyXG4gICAgICBjb25zdCBtdXRhdGVkU3ViRG9jID0gey4uLmEuZG9jfTtcclxuICAgICAgY29uc3QgbWV0YSA9IG11dGF0ZWRTdWJEb2MuJG1ldGE7XHJcbiAgICAgIGRlbGV0ZSBtdXRhdGVkU3ViRG9jLiRtZXRhOyAvLyBEZWxldGUgJG1ldGEgc28gdGhhdCBcImFkZFwiIG9yIFwidXBkYXRlXCIgZG9lcyBub3QgcGVyc2lzdGUgdG8gbmV4dCBzdGF0ZS5cclxuICAgICAgaWYgKG1ldGEgPT09ICdhZGQnKSB7XHJcbiAgICAgICAgaWYgKCFtdXRhdGVkU3ViRG9jLmlkKSBtdXRhdGVkU3ViRG9jLmlkID0gY3JlYXRlVVVJRCgpOyAvLyBHZW5lcmF0ZSBJRCBpZiBub3QgZG9uZSB5ZXQuXHJcbiAgICAgICAgLy8gTm93IHB1dCBhbiAnYWRkJyBtdXRhdGlvbiBpbiB0aGUgYmF0Y2ggcXVldWUuXHJcbiAgICAgICAgYmF0Y2guYWRkKGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XHJcbiAgICAgIH0gZWxzZSBpZiAobWV0YSA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgICBiYXRjaC5wdXQoZm9yZWlnblRhYmxlLCBtdXRhdGVkU3ViRG9jKTtcclxuICAgICAgfVxyXG4gICAgICBiYXRjaC5saW5rKHRhYmxlLCBkb2NJZCwgZm9yZWlnblRhYmxlLCBtdXRhdGVkU3ViRG9jLmlkLCBuYXZQcm9wKTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSByZXN1bHQgc28gdGhhdCBzdGF0ZSBpcyByZWZsZWN0ZWQgYWZ0ZXIgc3VjY2VzZnVsIFBPU1QgdG8gc2VydmVyLlxyXG4gICAgICBpZiAoIWRvY1VwZGF0ZXNbbmF2UHJvcF0pIGRvY1VwZGF0ZXNbbmF2UHJvcF0gPSB7fTtcclxuICAgICAgZG9jVXBkYXRlc1tuYXZQcm9wXVthLmlkeF0gPSB7JHNldDogbXV0YXRlZFN1YkRvY307XHJcbiAgICB9XHJcbiAgICBjb25zdCByZW1vdmVkID0gb2xkTGlzdC5maWx0ZXIobyA9PiAhbmV3TGlzdC5zb21lKG4gPT4gbi5pZCA9PT0gby5pZCkpO1xyXG4gICAgZm9yIChsZXQgciBvZiByZW1vdmVkKSB7XHJcbiAgICAgIGJhdGNoLnVubGluayh0YWJsZSwgZG9jSWQsIGZvcmVpZ25UYWJsZSwgci5pZCwgbmF2UHJvcCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB1cGRhdGVkID0gdHVwbGVzLmZpbHRlcih0dXBsZSA9PiBvbGRMaXN0LnNvbWUobyA9PiBvLmlkID09PSB0dXBsZS5kb2MuaWQgJiYgdHVwbGUuZG9jLiRtZXRhID09PSAndXBkYXRlJykpO1xyXG4gICAgZm9yIChsZXQgdSBvZiB1cGRhdGVkKSB7XHJcbiAgICAgIGNvbnN0IG11dGF0ZWRTdWJEb2MgPSB7Li4udS5kb2N9O1xyXG4gICAgICBkZWxldGUgbXV0YXRlZFN1YkRvYy4kbWV0YTtcclxuICAgICAgYmF0Y2gucHV0KGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XHJcblxyXG4gICAgICAvLyBVcGRhdGUgcmVzdWx0IHNvIHRoYXQgJG1ldGEgaXMgcmVtb3ZlZCBmcm9tIG5hdmlnYXRpb24gcHJvcCBhZnRlciBzdWNjZXNzZnVsIFBPU1QgdG8gc2VydmVyLlxyXG4gICAgICBpZiAoIWRvY1VwZGF0ZXNbbmF2UHJvcF0pIGRvY1VwZGF0ZXNbbmF2UHJvcF0gPSB7fTtcclxuICAgICAgZG9jVXBkYXRlc1tuYXZQcm9wXVt1LmlkeF0gPSB7JHNldDogbXV0YXRlZFN1YkRvY307XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB1cGRhdGUobmV3RG9jLCBkb2NVcGRhdGVzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGR0Rm9ybWF0KGRhdGVUaW1lOiBudW1iZXIgfCBEYXRlIHwgbW9tZW50Lk1vbWVudCkge1xyXG4gIHJldHVybiBtb21lbnQoZGF0ZVRpbWUpLmZvcm1hdCgnWVlNTUREIEhIOm1tJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaG9ydERhdGVGb3JtYXQoZGF0ZVRpbWU6IG51bWJlciB8IERhdGUgfCBtb21lbnQuTW9tZW50KSB7XHJcbiAgcmV0dXJuIG1vbWVudChkYXRlVGltZSkuZm9ybWF0KCdZWU1NREQnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3J0UGVyc29uTmFtZUZvcm1hdChuYW1lOiBzdHJpbmcpIHtcclxuICBpZiAoIW5hbWUpIHJldHVybiBcIlwiO1xyXG4gIGNvbnN0IG5hbWVzID0gbmFtZS5zcGxpdCgnICcpLmZpbHRlcihuID0+ICEhbik7XHJcbiAgY29uc3QgbGFzdE5hbWUgPSBuYW1lcy5wb3AoKTtcclxuICByZXR1cm4gbmFtZXMubWFwKG5hbWUgPT4gYCR7bmFtZVswXX0uYCkuY29uY2F0KGxhc3ROYW1lKS5qb2luKCcgJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVNb2RpZmljYXRpb25TdGFtcCAobm93OiBudW1iZXIsIG9iajogTW9kaWZpY2F0aW9uVHJhY2tlZCwgdXNlcjogVXNlcikge1xyXG4gIHJldHVybiB1cGRhdGUob2JqLCB7XHJcbiAgICBkYXRlVGltZTogeyRzZXQ6IG5vd30sIC8vIEZvciBxdWVyaWVzLi4uXHJcbiAgICBtb2RpZmllZERhdGU6IHskc2V0OiBub3d9LFxyXG4gICAgbW9kaWZpZWRCeToge1xyXG4gICAgICAkc2V0OiB7XHJcbiAgICAgICAgbmFtZTogdXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgICB1cmw6IFwibWFpbHRvOlwiICsgdXNlci5tYWlsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNyZWF0aW9uU3RhbXA8VCBleHRlbmRzIE1vZGlmaWNhdGlvblRyYWNrZWQ+IChub3c6IG51bWJlciwgb2JqOiBULCB1c2VyOiBVc2VyKTogVCB7XHJcbiAgcmV0dXJuIHVwZGF0ZShvYmosIHtcclxuICAgIGNyZWF0ZWREYXRlOiB7JHNldDogbm93fSxcclxuICAgIGNyZWF0ZWRCeToge1xyXG4gICAgICAkc2V0OiB7XHJcbiAgICAgICAgbmFtZTogdXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgICB1cmw6IFwibWFpbHRvOlwiICsgdXNlci5tYWlsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVtYWlsRnJvbURvY0FjY2VzcyAocmVzb3VyY2U6IFNvZnREb2N1bWVudEFjY2Vzcykge1xyXG4gIGlmIChyZXNvdXJjZS5lbWFpbCkgcmV0dXJuIHJlc291cmNlLmVtYWlsO1xyXG4gIHJldHVybiByZXNvdXJjZS51cmwgP1xyXG4gICAgcmVzb3VyY2UudXJsLnN0YXJ0c1dpdGgoJ21haWx0bzonKSA/XHJcbiAgICAgIHJlc291cmNlLnVybC5zdWJzdHJpbmcoJ21haWx0bzonLmxlbmd0aCkgOlxyXG4gICAgICByZXNvdXJjZS51cmwgOlxyXG4gICAgcmVzb3VyY2UudXJsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMob2JqOiBNb2RpZmljYXRpb25UcmFja2VkLCB1c2VyOiBVc2VyKSB7XHJcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICBvYmogPSB1cGRhdGVNb2RpZmljYXRpb25TdGFtcChub3csIG9iaiwgdXNlcik7XHJcbiAgaWYgKCFvYmouY3JlYXRlZEJ5KSBvYmogPSB1cGRhdGVDcmVhdGlvblN0YW1wKG5vdywgb2JqLCB1c2VyKTtcclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlFdGFncyhkb2M6IERvY3VtZW50LCBuZXdFdGFnczoge1tpZDogc3RyaW5nXTogc3RyaW5nfSwgZ3JhcGhzOiBzdHJpbmdbXSkge1xyXG4gIGNvbnN0IHJlcyA9IHsuLi5kb2N9O1xyXG4gIGNvbnN0IGV0YWcgPSBuZXdFdGFnc1tkb2MuaWRdO1xyXG4gIGlmIChldGFnKVxyXG4gICAgcmVzLiRldGFnID0gZXRhZztcclxuICBmb3IgKGxldCBsYWJlbCBvZiBncmFwaHMpIHtcclxuICAgIGNvbnN0IG5ld0xpc3QgPSBkb2NbbGFiZWxdLm1hcChkID0+IGFwcGx5RXRhZ3MoZCwgbmV3RXRhZ3MsIFtdKSk7XHJcbiAgICByZXNbbGFiZWxdID0gbmV3TGlzdDtcclxuICB9XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRCbG9iKGJsb2I6IEJsb2IsIG06IChyOkZpbGVSZWFkZXIpPT52b2lkKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICByZWFkZXIub25sb2FkID0gZXYgPT4gcmVzb2x2ZSgoZXYudGFyZ2V0IGFzIGFueSkucmVzdWx0KTtcclxuICAgIHJlYWRlci5vbmFib3J0ID0gZXYgPT4gcmVqZWN0KG5ldyBFcnJvcihcImZpbGUgcmVhZCBhYm9ydGVkXCIpKTtcclxuICAgIHJlYWRlci5vbmVycm9yID0gZXYgPT4gcmVqZWN0KChldi50YXJnZXQgYXMgYW55KS5lcnJvcik7XHJcbiAgICBtKHJlYWRlcik7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dCAoYmxvYjogQmxvYikge1xyXG4gIHJldHVybiByZWFkQmxvYihibG9iLCByPT5yLnJlYWRBc1RleHQoYmxvYikpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVhZEJsb2JBc0RhdGFVcmwgKGJsb2I6IEJsb2IpIHtcclxuICByZXR1cm4gcmVhZEJsb2IoYmxvYiwgcj0+ci5yZWFkQXNEYXRhVVJMKGJsb2IpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93Q29weShlOiBSZWFjdC5EcmFnRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSB7XHJcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5JztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoc3RhdHVzOiAndW5zYXZlZCcgfCAnc2F2ZWQnIHwgJ2Vycm9yJyB8ICcnKSB7XHJcbiAgY29uc3QgZGl2ID0gJCgnZGl2LmNvdXJzZS1idWlsZGVyJylbMF07XHJcbiAgaWYgKGRpdikgZGl2LmNsYXNzTmFtZSA9IFwiY291cnNlLWJ1aWxkZXJcIiArIChzdGF0dXMgPyBcIiBzdGF0dXMgXCIgKyBzdGF0dXMgOiBcIlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRDb3Vyc2UoaWQ6IHN0cmluZywgb3B0aW9ucz86IHtcclxuICAgIGluY2x1ZGVUZW1wbGF0ZUNoYWluPzogYm9vbGVhbixcclxuICAgIGluY2x1ZGU/OiBzdHJpbmdbXVxyXG4gIH0pOiBQcm9taXNlPENvdXJzZT5cclxue1xyXG4gIGNvbnN0IGNsaWVudCA9IGVudi5rZWRCYWNrZW5kQ2xpZW50O1xyXG4gIGNvbnN0IGluY2x1ZGVUZW1wbGF0ZUNoYWluID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGVUZW1wbGF0ZUNoYWluO1xyXG4gIGNvbnN0IGluY2x1ZGVUYXNrcyA9ICFvcHRpb25zIHx8ICFvcHRpb25zLmluY2x1ZGUgfHwgb3B0aW9ucy5pbmNsdWRlLmluZGV4T2YoXCJ0YXNrc1wiKSAhPT0gLTE7XHJcbiAgY29uc3QgW2NvdXJzZSwgY291cnNlVGFza3MsIHRlbXBsYXRlQ2hhaW5dID0gKGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgIGNsaWVudC5nZXQoXCJjb3Vyc2VzXCIsIGlkLCB7XHJcbiAgICAgIGluY2x1ZGU6IG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlID8gb3B0aW9ucy5pbmNsdWRlLmZpbHRlcihpID0+IGkgIT09IFwidGFza3NcIikgOiBbXHJcbiAgICAgICAgXCJjZW50cmFsQ29udGVudFwiLFxyXG4gICAgICAgIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsXHJcbiAgICAgICAgXCJhYmlsaXRpZXNcIixcclxuICAgICAgICBcImltYWdlc1wiLFxyXG4gICAgICAgIFwiYWNsXCIgLy8gRG9uJ3QgaW5jbHVkZSB0YXNrcyBoZXJlLi4uXHJcbiAgICAgIF1cclxuICAgIH0pLFxyXG4gICAgLy8gLi4uIGJ1dCBpbmNsdWRlIHRhc2tzIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHdlIGNhbiBsb2FkIHRoZSBncmFwaHMgZm9yIHRoZVxyXG4gICAgLy8gdGFza3MgYXMgd2VsbCFcclxuICAgIGluY2x1ZGVUYXNrcyAmJiBjbGllbnQubGlzdChcInRhc2tzXCIsIHtcclxuICAgICAgaGFzRWRnZXNGcm9tOiBpZCxcclxuICAgICAgaW5jbHVkZTogWydrbm93bGVkZ2VSZXF1aXJlbWVudHMnLCAnY2VudHJhbENvbnRlbnQnLCAnYWJpbGl0aWVzJywgJ2FjbCddLFxyXG4gICAgICBmbGFnczogWydpbmNsdWRlSWRzT25seSddIC8vIERvbid0IG5lZWQgcmVkdW5kYW50IGluZm8gdGhhdCdzIGFscmVhZHkgb24gY291cnNlXHJcbiAgICB9KSxcclxuICAgIGluY2x1ZGVUZW1wbGF0ZUNoYWluICYmIGNsaWVudC5saXN0KFwiY291cnNlc1wiLCB7XHJcbiAgICAgIGhhc0VkZ2VzRnJvbTogaWQsXHJcbiAgICAgIGZsYWdzOiBbJ2lkc09ubHknXVxyXG4gICAgfSlcclxuICBdKSkgYXMgW0NvdXJzZSwgVGFza1tdLCBDb3Vyc2VbXV07XHJcbiAgY291cnNlLnRhc2tzID0gY291cnNlVGFza3M7XHJcblxyXG4gIC8vIENvcnJlY3QgdGhlIG9yZGVyIG9mIEFiaWxpdGllc1xyXG4gIGlmIChjb3Vyc2UuYWJpbGl0aWVzICYmIGNvdXJzZS5hYmlsaXRpZXNPcmRlcikge1xyXG4gICAgY291cnNlLmFiaWxpdGllcyA9IGNvdXJzZS5hYmlsaXRpZXNPcmRlci5tYXAoaWQgPT5cclxuICAgICAgY291cnNlLmFiaWxpdGllcy5maW5kKGEgPT4gYS5pZCA9PT0gaWQpKTtcclxuICB9XHJcblxyXG4gIC8vIENvcnJlY3QgdGhlIG9yZGVyIG9mIEtub3dsZWRnZVJlcXVpcmVtZW50c1xyXG4gIGlmIChjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzICYmIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlcikge1xyXG4gICAgY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cyA9IGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlci5tYXAoaWQgPT5cclxuICAgICAgY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cy5maW5kKGMgPT4gYy5pZCA9PT0gaWQpKTtcclxuICB9XHJcblxyXG4gIC8vIENvcnJlY3QgdGhlIG9yZGVyIG9mIENlbnRyYWxDb250ZW50XHJcbiAgaWYgKGNvdXJzZS5jZW50cmFsQ29udGVudCAmJiBjb3Vyc2UuY2VudHJhbENvbnRlbnRPcmRlcikge1xyXG4gICAgY291cnNlLmNlbnRyYWxDb250ZW50ID0gY291cnNlLmNlbnRyYWxDb250ZW50T3JkZXIubWFwKGlkID0+XHJcbiAgICAgIGNvdXJzZS5jZW50cmFsQ29udGVudC5maW5kKGNjID0+IGNjLmlkID09PSBpZCkpOy8vLmZpbHRlcih4ID0+ICEheCk7Ly8gRGVidWdnaW5nIHNvbXRoaW4nIC4gTm9ybWFsbHkgdGhlIGxhc3QgLmZpbHRlcigpLi4uIHBhcnQgc2hvdWxkIG5vdCBiZSBuZXNjZXNzYXJ5Li4uXHJcbiAgfVxyXG4gIFxyXG4gIC8vIEluY2x1ZGUgdGVtcGxhdGUgY2hhaW4gaWYgcmVxdWVzdGVkLlxyXG4gIGlmIChpbmNsdWRlVGVtcGxhdGVDaGFpbikgY291cnNlLnRlbXBsYXRlQ2hhaW4gPSB0ZW1wbGF0ZUNoYWluO1xyXG4gIHJldHVybiBjb3Vyc2U7XHJcbn1cclxuIiwiLypcclxuZGVjbGFyZSB2YXIgQnVmZmVyOyAvLyBub2RlIGJ1aWx0LWluXHJcblxyXG5cclxuZnVuY3Rpb24gYmFzaWNBdXRoSGVhZGVyKHVzZXJuYW1lLCBwYXNzd29yZCkge1xyXG4gICAgcmV0dXJuIFwiQmFzaWMgXCIgKyBuZXcgQnVmZmVyKHVzZXJuYW1lICsgXCI6XCIgKyBwYXNzd29yZCkudG9TdHJpbmcoXCJiYXNlNjRcIik7XHJcbn1cclxuKi9cclxuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtaXR0ZXInO1xyXG52YXIgUmVzdENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFJlc3RDbGllbnQoaXNvbW9ycGhpYywgYmFzZVVybCwgb3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuaXNvbW9ycGhpYyA9IGlzb21vcnBoaWM7XHJcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIHRoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zID0gMDtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBuZXcgRW1pdHRlcih0aGlzKTtcclxuICAgICAgICB0aGlzLmZldGNoT3B0aW9ucyA9IHsgbW9kZTogJ2NvcnMnIH07XHJcbiAgICAgICAgdGhpcy5hdXRoSGVhZGVyID0gb3B0aW9ucy5iZWFyZXIgP1xyXG4gICAgICAgICAgICBcIkJlYXJlciBcIiArIG9wdGlvbnMuYmVhcmVyIDpcclxuICAgICAgICAgICAgb3B0aW9ucy51c2VybmFtZSA/XHJcbiAgICAgICAgICAgICAgICBcIkJhc2ljIFwiICsgaXNvbW9ycGhpYy5idG9hKG9wdGlvbnMudXNlcm5hbWUgKyBcIjpcIiArIChvcHRpb25zLnBhc3N3b3JkIHx8IFwiXCIpKSA6XHJcbiAgICAgICAgICAgICAgICBudWxsO1xyXG4gICAgICAgIHRoaXMuYmVhcmVyUHJvdmlkZXIgPSBvcHRpb25zLmJlYXJlclByb3ZpZGVyIHx8IG51bGw7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzdENsaWVudC5wcm90b3R5cGUsIFwic3RhdHVzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24gKHBhdGgsIG1ldGhvZCwgaGVhZGVycywgcXVlcnksIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgKyt0aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucztcclxuICAgICAgICB0aGlzLl9zdGF0dXMuZGlzcGF0Y2godGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZldGNoKHBhdGgsIG1ldGhvZCwgaGVhZGVycywgcXVlcnksIGZldGNoT3B0aW9ucylcclxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICAgICAgICAtLV90aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucztcclxuICAgICAgICAgICAgX3RoaXMuX3N0YXR1cy5kaXNwYXRjaChfdGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXM7XHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAtLV90aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucztcclxuICAgICAgICAgICAgX3RoaXMuX3N0YXR1cy5kaXNwYXRjaChfdGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLl9mZXRjaCA9IGZ1bmN0aW9uIChwYXRoLCBtZXRob2QsIGhlYWRlcnMsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHF1ZXJ5U3RyLCBfYSwgYXV0aEhlYWRlciwgdG9rZW5JbmZvLCBiZWFyZXJQcm92aWRlciwgX2IsIF9jLCB1cmwsIHJlcywgd3d3YXV0aCwgX2Q7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfZS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZldGNoT3B0aW9ucyAmJiBmZXRjaE9wdGlvbnMuY2FjaGUgPT09ICduby1jYWNoZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGJhY2stYnV0dG9uIG5vdCByZXNwZWN0aW5nIGNhY2hlIGNvbnRyb2wgaW4gQ2hyb21lL09wZXJhLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIGEgcXVlcnkgcGFyYW1ldGVyIHRvIGZvcmNlIGEgY2FjaGUgZW50cnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgcXVlcnksIHsgbm9jYWNoZTogY3JlYXRlVVVJRCgpIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5U3RyID0gcXVlcnkgJiYgT2JqZWN0LmtleXMocXVlcnkpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBxdWVyeVtrZXldICE9PSB1bmRlZmluZWQ7IH0pLm1hcChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPVwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQocXVlcnlba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbignJicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMsIGF1dGhIZWFkZXIgPSBfYS5hdXRoSGVhZGVyLCB0b2tlbkluZm8gPSBfYS50b2tlbkluZm8sIGJlYXJlclByb3ZpZGVyID0gX2EuYmVhcmVyUHJvdmlkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCFhdXRoSGVhZGVyICYmICF0b2tlbkluZm8gJiYgYmVhcmVyUHJvdmlkZXIpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBiZWFyZXJQcm92aWRlci5nZXRCZWFyZXIoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi50b2tlbkluZm8gPSB0b2tlbkluZm8gPSBfZS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdG9rZW5JbmZvKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodG9rZW5JbmZvLmV4cGlyZXMgPCBEYXRlLm5vdygpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVG9rZW4gZXhwaXJlZC4gUmVmcmVzaCBpdDpcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYmVhcmVyUHJvdmlkZXIucmVmcmVzaEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnRva2VuSW5mbyA9IHRva2VuSW5mbyA9IF9lLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aEhlYWRlciA9IFwiQmVhcmVyIFwiICsgdG9rZW5JbmZvLnRva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbiBvbmUgd2F5IG9yIGFub3RoZXIsIHdlJ3ZlIGNvbmNsdWRlZCBhbiBBdXRob3JpemF0aW9uIGhlYWRlciB0byB1c2U6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdXRoSGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBhdXRoSGVhZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuYmFzZVVybCArIHBhdGggKyAocXVlcnlTdHIgPyBcIj9cIiArIHF1ZXJ5U3RyIDogXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaXNvbW9ycGhpYy5mZXRjaCh1cmwsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuZmV0Y2hPcHRpb25zLCB7IGhlYWRlcnM6IGhlYWRlcnMsIG1ldGhvZDogbWV0aG9kIH0sIGZldGNoT3B0aW9ucykpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9lLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyA9PSA0MDEgJiYgdGhpcy5iZWFyZXJQcm92aWRlcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3d3dhdXRoID0gcmVzLmhlYWRlcnMuZ2V0KFwid3d3LWF1dGhlbnRpY2F0ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJHb3QgXCIgKyByZXMuc3RhdHVzICsgXCIgZnJvbSBcIiArICh0aGlzLmJhc2VVcmwgKyBwYXRoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHd3d2F1dGggJiYgL0JlYXJlci9pLnRlc3Qod3d3YXV0aCkpKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmJlYXJlclByb3ZpZGVyLnJlZnJlc2hCZWFyZXIoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZC50b2tlbkluZm8gPSBfZS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IFwiQmVhcmVyIFwiICsgdGhpcy50b2tlbkluZm8udG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaXNvbW9ycGhpYy5mZXRjaCh1cmwsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuZmV0Y2hPcHRpb25zLCB7IGhlYWRlcnM6IGhlYWRlcnMsIG1ldGhvZDogbWV0aG9kIH0sIGZldGNoT3B0aW9ucykpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9lLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSA5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXRoLCBxdWVyeSwgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2gocGF0aCwgXCJHRVRcIiwgeyBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvbjsgdGV4dC9wbGFpblwiIH0sIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpO1xyXG4gICAgfTtcclxuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbiAocGF0aCwgZGF0YSwgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2gocGF0aCwgXCJQT1NUXCIsIHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgICAgIFwiQWNjZXB0XCI6IFwiYXBwbGljYXRpb24vanNvblwiXHJcbiAgICAgICAgfSwgbnVsbCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgZmV0Y2hPcHRpb25zLCB7IGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpIH0pKTtcclxuICAgIH07XHJcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAocGF0aCwgcXVlcnksIGJvZHksIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKHBhdGgsIFwiREVMRVRFXCIsIHsgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb247IHRleHQvcGxhaW5cIiB9LCBxdWVyeSwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgZmV0Y2hPcHRpb25zLCB7IGJvZHk6IGJvZHkgfSkpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBSZXN0Q2xpZW50O1xyXG59KCkpO1xyXG5leHBvcnQgeyBSZXN0Q2xpZW50IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3RjbGllbnQuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgUmVzdENsaWVudCB9IGZyb20gJy4vcmVzdGNsaWVudCc7XHJcbmltcG9ydCB7IGF2b2lkU2ltdWx0YW5vdXNDYWxscyB9IGZyb20gJy4vdXRpbHMnO1xyXG52YXIgS2VkQmVhcmVyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBLZWRCZWFyZXJQcm92aWRlcihpc29tb3JwaGljLCBzdG9yYWdlLCB0b2tlbklkLCBjbGllbnRJZCwgY2xpZW50U2VjcmV0LCB0b2tlblVybCwgdG9rZW5RdWVyeSkge1xyXG4gICAgICAgIHRoaXMuaXNvbW9ycGhpYyA9IGlzb21vcnBoaWM7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gc3RvcmFnZTtcclxuICAgICAgICB0aGlzLnRva2VuSWQgPSB0b2tlbklkO1xyXG4gICAgICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZDtcclxuICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IGNsaWVudFNlY3JldDtcclxuICAgICAgICB0aGlzLnRva2VuVXJsID0gdG9rZW5Vcmw7XHJcbiAgICAgICAgdGhpcy50b2tlblF1ZXJ5ID0gdG9rZW5RdWVyeTtcclxuICAgICAgICB0aGlzLnRva2VuSW5mbyA9IHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfTtcclxuICAgICAgICB0aGlzLmNsaWVudCA9IG5ldyBSZXN0Q2xpZW50KGlzb21vcnBoaWMsIFwiXCIsIHtcclxuICAgICAgICAgICAgdXNlcm5hbWU6IHRoaXMuY2xpZW50SWQsXHJcbiAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLmNsaWVudFNlY3JldFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2V0QmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMuZ2V0QmVhcmVyLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaEJlYXJlciA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzLnJlZnJlc2hCZWFyZXIuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcbiAgICBLZWRCZWFyZXJQcm92aWRlci5wcm90b3R5cGUuZ2V0QmVhcmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2EsIHRva2VuLCBleHBpcmVzLCBfYiwgZV8xO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcy50b2tlbkluZm8sIHRva2VuID0gX2EudG9rZW4sIGV4cGlyZXMgPSBfYS5leHBpcmVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gJiYgZXhwaXJlcyA+PSBEYXRlLm5vdygpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFsxLCA0LCAsIDZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0b3JhZ2UubG9hZCh0aGlzLmNsaWVudElkICsgXCIvXCIgKyB0aGlzLnRva2VuSWQpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRva2VuSW5mbyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5JbmZvLnRva2VuICYmIHRoaXMudG9rZW5JbmZvLmV4cGlyZXMgPj0gRGF0ZS5ub3coKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMSA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZWZyZXNoQmVhcmVyKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCZWFyZXJQcm92aWRlci5wcm90b3R5cGUucmVmcmVzaEJlYXJlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlcywgcmV0cmllcywgX2EsIF9iO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJpZXMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXRyaWVzIDwgNikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJldHJpZXZpbmcgdG9rZW4gZm9yIFwiICsgdGhpcy50b2tlbklkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jbGllbnQuZ2V0KHRoaXMudG9rZW5VcmwsIHRoaXMudG9rZW5RdWVyeSwgeyBjYWNoZTogJ3JlbG9hZCcgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJHb3QgXCIgKyByZXMuc3RhdHVzICsgXCIgXCIgKyByZXMuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudG9rZW5JbmZvID0gKF9iLnRva2VuID0gX2Muc2VudCgpLCBfYi5leHBpcmVzID0gRGF0ZS5ub3coKSArIDU5ICogNjAgKiAxMDAwLCBfYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiR290IHRva2VuIGZvciBcIiArIHRoaXMudG9rZW5JZCArIFwiOiBcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMudG9rZW5JbmZvKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zYXZlKHRoaXMuY2xpZW50SWQgKyBcIi9cIiArIHRoaXMudG9rZW5JZCwgdGhpcy50b2tlbkluZm8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgKytyZXRyaWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byByZXRyaWV2ZSB0b2tlbiBmb3IgXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnRva2VuSWQpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEtlZEJlYXJlclByb3ZpZGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBLZWRCZWFyZXJQcm92aWRlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWQtYmVhcmVyLXByb3ZpZGVyLmpzLm1hcCIsInZhciBEb2N1bWVudEFjY2VzcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERvY3VtZW50QWNjZXNzKGFjY2Vzc0NsYWltVHlwZSwgYWNjZXNzQ2xhaW1WYWx1ZSwgcmlnaHQpIHtcclxuICAgICAgICB0aGlzLmFjY2Vzc0NsYWltVHlwZSA9IGFjY2Vzc0NsYWltVHlwZTtcclxuICAgICAgICB0aGlzLmFjY2Vzc0NsYWltVmFsdWUgPSBhY2Nlc3NDbGFpbVZhbHVlO1xyXG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcclxuICAgIH1cclxuICAgIERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmcgPSBmdW5jdGlvbiAoYWMpIHtcclxuICAgICAgICBpZiAoIWFjKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB2YXIgc3BsaXQgPSBhYy5zcGxpdCgnOicpO1xyXG4gICAgICAgIGlmIChzcGxpdC5sZW5ndGggPCAzKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFjY2VzcyBzdHJpbmc6IFwiICsgYWMpO1xyXG4gICAgICAgIHZhciBjbGFpbVR5cGUgPSBEb2N1bWVudEFjY2Vzcy51bmVzY2FwZShzcGxpdFswXSk7XHJcbiAgICAgICAgdmFyIGNsYWltVmFsdWUgPSBEb2N1bWVudEFjY2Vzcy51bmVzY2FwZShzcGxpdFsxXSk7XHJcbiAgICAgICAgdmFyIHJpZ2h0ID0gc3BsaXRbMl07XHJcbiAgICAgICAgaWYgKHJpZ2h0ICE9PSAnUicgJiYgcmlnaHQgIT09ICdXJyAmJiByaWdodCAhPT0gJ1MnKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFjY2VzcyBzdHJpbmc6IFwiICsgYWMpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRBY2Nlc3MoY2xhaW1UeXBlLCBjbGFpbVZhbHVlLCByaWdodCk7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRBY2Nlc3MuZXNjYXBlID0gZnVuY3Rpb24gKGFjY2Vzc0NvbXBvbmVudCkge1xyXG4gICAgICAgIHJldHVybiBhY2Nlc3NDb21wb25lbnQucmVwbGFjZSgvXFwlL2csIFwiJTI1XCIpLnJlcGxhY2UoL1xcOi9nLCBcIiUzQVwiKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudEFjY2Vzcy51bmVzY2FwZSA9IGZ1bmN0aW9uIChhY2Nlc3NDb21wb25lbnQpIHtcclxuICAgICAgICByZXR1cm4gYWNjZXNzQ29tcG9uZW50LnJlcGxhY2UoL1xcJTNBL2csIFwiOlwiKS5yZXBsYWNlKC9cXCUyNS9nLCBcIiVcIik7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRBY2Nlc3MucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBEb2N1bWVudEFjY2Vzcy5lc2NhcGUodGhpcy5hY2Nlc3NDbGFpbVR5cGUpICsgXCI6XCIgK1xyXG4gICAgICAgICAgICBEb2N1bWVudEFjY2Vzcy5lc2NhcGUodGhpcy5hY2Nlc3NDbGFpbVZhbHVlKSArIFwiOlwiICtcclxuICAgICAgICAgICAgdGhpcy5yaWdodDtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nQXJyYXkgPSBmdW5jdGlvbiAoYWNsKSB7XHJcbiAgICAgICAgcmV0dXJuIGFjbFxyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChhYykgeyByZXR1cm4gRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZyhhYyk7IH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjKSB7IHJldHVybiBhYzsgfSk7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRBY2Nlc3MudG9TdHJpbmdBcnJheSA9IGZ1bmN0aW9uIChhY2wpIHtcclxuICAgICAgICByZXR1cm4gYWNsLm1hcChmdW5jdGlvbiAoYWMpIHsgcmV0dXJuIGFjLnRvU3RyaW5nKCk7IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBEb2N1bWVudEFjY2VzcztcclxufSgpKTtcclxuZXhwb3J0IHsgRG9jdW1lbnRBY2Nlc3MgfTtcclxuZXhwb3J0IGZ1bmN0aW9uIGhhc0FjY2VzcyhhY2wsIHVzZXJDbGFpbXMsIHJlcXVlc3RlZFJpZ2h0KSB7XHJcbiAgICBpZiAodXNlckNsYWltcy5zb21lKGZ1bmN0aW9uIChjbGFpbSkgeyByZXR1cm4gY2xhaW0udHlwZSA9PT0gJ3JvbGUnICYmIGNsYWltLnZhbHVlID09PSBcIkFETUlOXCI7IH0pKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgcmV0dXJuIGFjbC5zb21lKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgcmV0dXJuIHVzZXJDbGFpbXMuc29tZShmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICByZXR1cm4gYS5hY2Nlc3NDbGFpbVR5cGUgPT09IGMudHlwZSAmJlxyXG4gICAgICAgICAgICAgICAgYS5hY2Nlc3NDbGFpbVZhbHVlID09PSBjLnZhbHVlICYmICgoYS5yaWdodCA9PT0gJ1InICYmIHJlcXVlc3RlZFJpZ2h0ID09PSAnUicpIHx8XHJcbiAgICAgICAgICAgICAgICAoYS5yaWdodCA9PT0gJ1cnICYmIFsnUicsICdXJ10uaW5kZXhPZihyZXF1ZXN0ZWRSaWdodCkgPj0gMCkgfHxcclxuICAgICAgICAgICAgICAgIChhLnJpZ2h0ID09PSAnUycpKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY2Vzcy1jb250cm9sLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbnZhciBIdHRwRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhIdHRwRXJyb3IsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBIdHRwRXJyb3IoY29kZSwgbWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFwiSFRUUFwiICsgY29kZSArIFwiIFwiICsgbWVzc2FnZSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICBfdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgICAgICBfdGhpcy5uYW1lID0gXCJodHRwXCIgKyBjb2RlO1xyXG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBcIkhUVFBcIiArIGNvZGUgKyBcIiBcIiArIG1lc3NhZ2U7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIEh0dHBFcnJvcjtcclxufShFcnJvcikpO1xyXG5leHBvcnQgeyBIdHRwRXJyb3IgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cC1lcnJvci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBSZXN0Q2xpZW50IH0gZnJvbSAnLi9yZXN0Y2xpZW50JztcclxuZXhwb3J0ICogZnJvbSAnLi91dGlscyc7XHJcbmV4cG9ydCB7IEtlZEJlYXJlclByb3ZpZGVyIH0gZnJvbSAnLi9rZWQtYmVhcmVyLXByb3ZpZGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9hY2Nlc3MtY29udHJvbCc7XHJcbmV4cG9ydCB7IFJlc3RDbGllbnQgfTtcclxuaW1wb3J0IHsgSHR0cEVycm9yIH0gZnJvbSAnLi9odHRwLWVycm9yJztcclxuZXhwb3J0IHsgSHR0cEVycm9yIH07XHJcbmV4cG9ydCAqIGZyb20gJy4vcmVzdGNsaWVudCc7XHJcbjtcclxudmFyIEtlZEJhY2tlbmRDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kQ2xpZW50KGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBiYXNlVXJsKSB7XHJcbiAgICAgICAgdGhpcy5odHRwID0gbmV3IFJlc3RDbGllbnQoaXNvbW9ycGhpYywgYmFzZVVybCwgeyBiZWFyZXJQcm92aWRlcjogYmVhcmVyUHJvdmlkZXIgfSk7XHJcbiAgICB9XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5nZXRNeUNsYWltcyA9IGZ1bmN0aW9uICh0YWJsZSwgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZ2V0KFwibWUvY2xhaW1zL1wiICsgKHRhYmxlIHx8IFwiXCIpLCBudWxsLCBmZXRjaE9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBvcHRpb25zLCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQodGFibGUgKyBcIi9cIiArIGlkLCBvcHRpb25zLCBmZXRjaE9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zLCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHF1ZXJ5LCByZXMsIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSA9IHRzbGliXzEuX19hc3NpZ24oe30sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm11dGF0aW9uc09uRW1wdHkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5tdXRhdGlvbnNPbkVtcHR5ID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5tdXRhdGlvbnNPbkVtcHR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmdldChcIlwiICsgdGFibGUsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5iYXRjaCA9IGZ1bmN0aW9uIChyZXFzLCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlb3JkZXIgb3BlcmF0aW9ucyBzbyB0aGF0ICdhZGQncyBjb21lIGZpcnN0IGFuZCAnZGVsZXRlJ3MgY29tZSBsYXN0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXFzID0gcmVxcy5zbGljZSgpLnNvcnQoZnVuY3Rpb24gKHJlcTEsIHJlcTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXExLm9wID09PSAnYWRkJyA/IC0xIDogcmVxMi5vcCA9PT0gJ2FkZCcgPyAxIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXExLm9wID09PSAnZGVsZXRlJyA/IDEgOiByZXEyLm9wID09PSAnZGVsZXRlJyA/IC0xIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5wb3N0KFwiYmF0Y2hcIiwgcmVxcywgZmV0Y2hPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZG8gPSBmdW5jdGlvbiAoc2NvcGVGbikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcnVubmVyO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5lciA9IG5ldyBCYXRjaFJ1bm5lcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZUZuKHJ1bm5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYmF0Y2gocnVubmVyLm11dGF0aW9uUmVxdWVzdHMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5kZWxldGVSZWFsbSA9IGZ1bmN0aW9uIChyZWFsbSkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmRlbGV0ZShcInJlYWxtcy9cIiArIHJlYWxtKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRhYmxlLCBkb2MsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuYWRkKHRhYmxlLCBkb2MpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAodGFibGUsIGRvYykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnB1dCh0YWJsZSwgZG9jKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgZGVsdGFEb2MsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudXBkYXRlKHRhYmxlLCBpZCwgZGVsdGFEb2MsIGJyYW5jaElkKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIubWVyZ2UoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuY2xlYXJCcmFuY2ggPSBmdW5jdGlvbiAoYnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5jbGVhckJyYW5jaChicmFuY2hJZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5kZWxldGUodGFibGUsIGlkKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuc2hhcmUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBhY2wpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5zaGFyZSh0YWJsZSwgaWQsIGFjbCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVuc2hhcmUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBhY2wpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bnNoYXJlKHRhYmxlLCBpZCwgYWNsKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5saW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIGxhYmVsLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmxpbmsyKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmxpbmsoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5saW5rMiA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldElkLCBsYWJlbCwgYnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmxpbmsyKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVuZG9MaW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIGxhYmVsLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnVuZG9MaW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBLZWRCYWNrZW5kQ2xpZW50O1xyXG59KCkpO1xyXG5leHBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50IH07XHJcbnZhciBCYXRjaFJ1bm5lciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEJhdGNoUnVubmVyKCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cyA9IFtdO1xyXG4gICAgfVxyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdhZGQnLCB0YWJsZTogdGFibGUsIGRvYzogZG9jLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jKSB7XHJcbiAgICAgICAgZG9jID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZG9jKTtcclxuICAgICAgICBkZWxldGUgZG9jLmFjbDsgLy8gRm9yYmlkZGVuIHRvIHNlbmQgYWNsIHdpdGggcHV0KCkgY2FsbHMuXHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3B1dCcsIHRhYmxlOiB0YWJsZSwgZG9jOiBkb2MgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGRlbHRhRG9jLCBicmFuY2hJZCkge1xyXG4gICAgICAgIGRlbHRhRG9jID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZGVsdGFEb2MpO1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1cGRhdGUnLCB0YWJsZTogdGFibGUsIGlkOiBpZCwgZGVsdGFEb2M6IGRlbHRhRG9jLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKGJyYW5jaElkLCB0YXJnZXRCcmFuY2hJZCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdtZXJnZScsIGJyYW5jaElkOiBicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQ6IHRhcmdldEJyYW5jaElkIH0pO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5jbGVhckJyYW5jaCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdjbGVhci1icmFuY2gnLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnZGVsZXRlJywgdGFibGU6IHRhYmxlLCBpZDogaWQgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnNoYXJlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgYWNsKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3NoYXJlJywgdGFibGU6IHRhYmxlLCBpZDogaWQsIGFjbDogYWNsIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51bnNoYXJlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgYWNsKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3Vuc2hhcmUnLCB0YWJsZTogdGFibGUsIGlkOiBpZCwgYWNsOiBhY2wgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmxpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2xpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0VGFibGU6IHRhcmdldFRhYmxlLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2xpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bmxpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0VGFibGU6IHRhcmdldFRhYmxlLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5saW5rMiA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5saW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVuZG9MaW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bmRvLWxpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gQmF0Y2hSdW5uZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEJhdGNoUnVubmVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsInZhciBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UoKSB7XHJcbiAgICB9XHJcbiAgICBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoaWQsIHRva2VuSW5mbykge1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJiZWFyZXItXCIgKyBpZCwgSlNPTi5zdHJpbmdpZnkodG9rZW5JbmZvKSk7XHJcbiAgICB9O1xyXG4gICAgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGpzb24gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiYmVhcmVyLVwiICsgaWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGpzb24gPyBKU09OLnBhcnNlKGpzb24pIDogeyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZTtcclxufSgpKTtcclxuZXhwb3J0IHsgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJlYXJlci1zdG9yYWdlLXNlc3Npb25zdG9yYWdlLmpzLm1hcCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGVUYXNrKHRhc2spIHtcclxuICAgIGlmICghdGFzay5yZXNvdXJjZXMpXHJcbiAgICAgICAgdGFzay5yZXNvdXJjZXMgPSBbXTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLXRhc2suanMubWFwIiwiaW1wb3J0IG1pZ3JhdGVDb3Vyc2UgZnJvbSAnLi9taWdyYXRlLWNvdXJzZSc7XHJcbmltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGUoZG9jLCB0YWJsZSwgZ3JhcGhzKSB7XHJcbiAgICBzd2l0Y2ggKHRhYmxlKSB7XHJcbiAgICAgICAgY2FzZSBcImNvdXJzZXNcIjpcclxuICAgICAgICAgICAgbWlncmF0ZUNvdXJzZShkb2MsIGdyYXBocyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0YXNrc1wiOlxyXG4gICAgICAgICAgICBtaWdyYXRlVGFzayhkb2MpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLmpzLm1hcCIsImltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGVDb3Vyc2UoY291cnNlLCBncmFwaHMpIHtcclxuICAgIGlmICghY291cnNlLm1vZHVsZXMpXHJcbiAgICAgICAgY291cnNlLm1vZHVsZXMgPSBbXTtcclxuICAgIGNvdXJzZS5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xyXG4gICAgICAgIGlmICghbW9kdWxlLnJlc291cmNlcykge1xyXG4gICAgICAgICAgICBtb2R1bGUucmVzb3VyY2VzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbW9kdWxlLnRhc2tJZHMpIHtcclxuICAgICAgICAgICAgbW9kdWxlLnRhc2tJZHMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmICghY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMpIHtcclxuICAgICAgICBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgLy8gRWFybGllciB3cm9uZyBzcGVsbGluZyBvZiByZXNvdXJjZXNcclxuICAgIGlmICgncmVzb3Vyc2VzJyBpbiBjb3Vyc2UgJiYgISgncmVzb3VyY2VzJyBpbiBjb3Vyc2UpKSB7XHJcbiAgICAgICAgY291cnNlLnJlc291cmNlcyA9IGNvdXJzZS5yZXNvdXJzZXM7XHJcbiAgICAgICAgZGVsZXRlIGNvdXJzZS5yZXNvdXJzZXM7XHJcbiAgICB9XHJcbiAgICBpZiAoIWNvdXJzZS5yZXNvdXJjZXMpIHtcclxuICAgICAgICBjb3Vyc2UucmVzb3VyY2VzID0gW107XHJcbiAgICB9XHJcbiAgICBpZiAoZ3JhcGhzKSB7XHJcbiAgICAgICAgZ3JhcGhzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAobGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Rhc2tzJzpcclxuICAgICAgICAgICAgICAgICAgICBjb3Vyc2UudGFza3MuZm9yRWFjaChmdW5jdGlvbiAodGFzaykgeyByZXR1cm4gbWlncmF0ZVRhc2sodGFzayk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlncmF0ZS1jb3Vyc2UuanMubWFwIiwiaW1wb3J0IG1pZ3JhdGUgZnJvbSAnLi9taWdyYXRlJztcclxuZXhwb3J0IHZhciBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gPSBmdW5jdGlvbiAoY2xpZW50KSB7XHJcbiAgICBpZiAoY2xpZW50Ll9fbWlncmF0b3JfbWl4ZWRfaW4pXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgY2xpZW50Ll9fbWlncmF0b3JfbWl4ZWRfaW4gPSB0cnVlO1xyXG4gICAgdmFyIGdldCA9IGNsaWVudC5nZXQ7XHJcbiAgICB2YXIgbGlzdCA9IGNsaWVudC5saXN0O1xyXG4gICAgY2xpZW50LmdldCA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgaW5jbHVkZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlO1xyXG4gICAgICAgIHJldHVybiBnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgbWlncmF0ZShyZXN1bHQsIHRhYmxlLCBpbmNsdWRlICYmIGluY2x1ZGUudG9TdHJpbmcoKS5zcGxpdCgnLCcpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBjbGllbnQubGlzdCA9IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBpbmNsdWRlID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGU7XHJcbiAgICAgICAgcmV0dXJuIGxpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKGRvYykgeyByZXR1cm4gbWlncmF0ZShkb2MsIHRhYmxlLCBpbmNsdWRlICYmIGluY2x1ZGUudG9TdHJpbmcoKS5zcGxpdCgnLCcpKTsgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGNsaWVudDtcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwidmFyIHJlZGlySGFzaCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJyZWRpci1oYXNoXCIpO1xyXG5pZiAocmVkaXJIYXNoKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgX2EgPSBKU09OLnBhcnNlKHJlZGlySGFzaCksIHRpbWUgPSBfYS50aW1lLCBoYXNoID0gX2EuaGFzaDtcclxuICAgICAgICBpZiAodGltZSAmJiB0aW1lID4gRGF0ZS5ub3coKSAtIDYwMDAwKSB7XHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJyZWRpci1oYXNoXCIpO1xyXG4gICAgICAgICAgICBsb2NhdGlvbi5oYXNoID0gaGFzaDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoXykgeyB9XHJcbmV4cG9ydCBmdW5jdGlvbiByZW1lbWJlckhhc2hMb2NhdGlvbigpIHtcclxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJyZWRpci1oYXNoXCIsIEpTT04uc3RyaW5naWZ5KHsgdGltZTogRGF0ZS5ub3coKSwgaGFzaDogbG9jYXRpb24uaGFzaCB9KSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaC1yZXN0b3Jlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBIdHRwRXJyb3IgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xyXG5pbXBvcnQgeyBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UgfSBmcm9tIFwiLi9iZWFyZXItc3RvcmFnZS1zZXNzaW9uc3RvcmFnZVwiO1xyXG5pbXBvcnQgeyBhdm9pZFNpbXVsdGFub3VzQ2FsbHMgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMnO1xyXG5pbXBvcnQgeyBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gfSBmcm9tICcuLi9rZWQtbW9kZWwtbWlncmF0b3InO1xyXG5pbXBvcnQgJy4vaGFzaC1yZXN0b3Jlcic7XHJcbmltcG9ydCB7IHJlbWVtYmVySGFzaExvY2F0aW9uIH0gZnJvbSAnLi9oYXNoLXJlc3RvcmVyJztcclxuS2VkTW9kZWxNaWdyYXRvck1peGluKEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlKTtcclxuZXhwb3J0IHZhciBzdG9yYWdlID0gbmV3IEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSgpO1xyXG52YXIgdGltZU9mUGFnZUxvYWQgPSBEYXRlLm5vdygpO1xyXG52YXIgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcih0b2tlblBhdGgsIHRva2VuUmVzcG9uc2VNYXBwZXIsIHRva2VuSWQpIHtcclxuICAgICAgICB0aGlzLnRva2VuUGF0aCA9IHRva2VuUGF0aDtcclxuICAgICAgICB0aGlzLnRva2VuUmVzcG9uc2VNYXBwZXIgPSB0b2tlblJlc3BvbnNlTWFwcGVyO1xyXG4gICAgICAgIHRoaXMudG9rZW5JZCA9IHRva2VuSWQ7XHJcbiAgICAgICAgdGhpcy50b2tlbkluZm8gPSB7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH07XHJcbiAgICAgICAgdGhpcy5nZXRCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRCZWFyZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoQmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMucmVmcmVzaEJlYXJlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnRva2VuSW5mby50b2tlbikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50b2tlbklkKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdG9yYWdlLmxvYWQodGhpcy50b2tlbklkKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50b2tlbkluZm8gPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMudG9rZW5JbmZvLmV4cGlyZXMgPCBEYXRlLm5vdygpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIucHJvdG90eXBlLnJlZnJlc2hCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYiwgX2MsIF9kO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHRoaXMudG9rZW5QYXRoLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogXCJ0ZXh0L3BsYWluOyBhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0OiAnbWFudWFsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfZS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAzMDIgfHwgKCFyZXMuc3RhdHVzICYmIHJlcy50eXBlID09PSBcIm9wYXF1ZXJlZGlyZWN0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIHNlc3Npb24gdGltZWQgb3V0IGFuZCBzZXJ2ZXIgd2FudHMgdG8gcmVkaXJlY3QgZW50aXJlIHBhZ2UgdG8gbG9naW4gcGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGltZSB0byByZWxvYWQgY3VycmVudCBwYWdlIHRvIGZvcmNlIGEgcmVkaXJlY3Qgb2YgdGhlIGVudGlyZSBwYWdlIGluc3RlYWQgZm9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHJlZGlyZWN0aW5nIHRvIC9hcGkvdG9rZW4gb3Igd2hhdGV2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRpbWVPZlBhZ2VMb2FkID4gNjAwMDApIHsgLy8gcHJvaGliaXQgZW5kbGVzcyBsb29wIG9mIHJlbG9hZGluZyBzZWxmLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2FudHNSZWRpcmVjdCA9IHRydWU7IC8vIFNvIHRoYXQgbGlzdGVuZXJzIHRvIG9uYmVmb3JldW5sb2FkIGNvdWxkIHNob3cgYWx0ZXJuYXRlIG1lc3NhZ2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWRpcmVjdCB3YW50ZWQuIFJlbG9hZCBwYWdlLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1lbWJlckhhc2hMb2NhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEh0dHBFcnJvcigzMDIsIFwiUmVkaXJlY3RlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gXCJIVFRQXCIgKyByZXMuc3RhdHVzICsgXCIgXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShFcnJvciwgW3ZvaWQgMCwgX2IgKyAoX2Uuc2VudCgpKV0pKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZCA9IHRoaXMudG9rZW5SZXNwb25zZU1hcHBlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50b2tlbkluZm8gPSBfZC5hcHBseSh0aGlzLCBbX2Uuc2VudCgpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2F2ZSh0aGlzLnRva2VuSWQsIHRoaXMudG9rZW5JbmZvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciB9O1xyXG5leHBvcnQgdmFyIGlzb21vcnBoaWMgPSB7IGZldGNoOiBmZXRjaC5iaW5kKHNlbGYpLCBidG9hOiBidG9hLmJpbmQoc2VsZikgfTtcclxudmFyIEtlZEJhY2tlbmRDbGllbnRXZWIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhLZWRCYWNrZW5kQ2xpZW50V2ViLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENsaWVudFdlYihhcGlCYXNlVXJsLCBwcm92aWRlck9yVG9rZW5QYXRoLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYmVhcmVyUHJvdmlkZXIgPSB0eXBlb2YgcHJvdmlkZXJPclRva2VuUGF0aCAhPT0gJ3N0cmluZycgP1xyXG4gICAgICAgICAgICBwcm92aWRlck9yVG9rZW5QYXRoIDpcclxuICAgICAgICAgICAgbmV3IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKHByb3ZpZGVyT3JUb2tlblBhdGgsIChvcHRpb25zICYmIG9wdGlvbnMudG9rZW5SZXNwb25zZU1hcHBlcikgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiAoeyB0b2tlbjogeCwgZXhwaXJlczogRGF0ZS5ub3coKSArIDU5ICogNjAgKiA2MCB9KTsgfSksIG9wdGlvbnMgJiYgb3B0aW9ucy50b2tlbklkKTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBhcGlCYXNlVXJsKSB8fCB0aGlzO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBLZWRCYWNrZW5kQ2xpZW50V2ViO1xyXG59KEtlZEJhY2tlbmRDbGllbnQpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZENsaWVudFdlYiB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgKiBmcm9tICcuL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYic7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgTGl2ZVF1ZXJ5VmlldyB9IGZyb20gJy4vbGl2ZS1xdWVyeS12aWV3JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgY2hpbGRyZW46IE9ic2VydmFibGU8SlNYLkVsZW1lbnQ+O1xyXG4gIHNwaW5uZXI/OiBKU1guRWxlbWVudDtcclxuICBub0Vycm9yPzogYm9vbGVhbjtcclxuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gSlNYLkVsZW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBMYXp5Q29udGVudCh7Y2hpbGRyZW4sIHNwaW5uZXIsIG9uRXJyb3IsIG5vRXJyb3J9OiBQcm9wcykge1xyXG4gIHJldHVybiA8TGl2ZVF1ZXJ5Vmlld1xyXG4gICAgcHJvcHM9e2NoaWxkcmVufVxyXG4gICAgc3Bpbm5lcj17c3Bpbm5lcn1cclxuICAgIG5vRXJyb3I9e25vRXJyb3J9XHJcbiAgICBvbkVycm9yPXtvbkVycm9yfVxyXG4gICAgZm49e29ic2VydmFibGUgPT4gb2JzZXJ2YWJsZX0gLz47XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIG51bWJlck9mVGFza3M6IG51bWJlcjtcclxuICAgIGNvbXBsZXRlZE51bWJlck9mVGFza3M6IG51bWJlcjtcclxuICAgIG1heGltdW1UYXNrc0Rpc3BsYXllZD86IG51bWJlcjtcclxuICAgIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcclxuICAgIHByb2dyZXNzQ29sb3I/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHb2FsUHJvZ3Jlc3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xyXG4gICAgICAgIG51bWJlcm9mVGFza3M6IDAsXHJcbiAgICAgICAgY29tcGxldGVkTnVtYmVyT2ZUYXNrczogMCxcclxuICAgICAgICBtYXhpbXVtVGFza3NEaXNwbGF5ZWQ6IDEwLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJsaWdodGdyZXlcIixcclxuICAgICAgICBwcm9ncmVzc0NvbG9yOiBcIiMzZGJjYTJcIixcclxuICAgIH07XHJcblxyXG4gICAgY3JlYXRlUHJvZ3Jlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBudW1iZXJPZlRhc2tzLCBjb21wbGV0ZWROdW1iZXJPZlRhc2tzLCBtYXhpbXVtVGFza3NEaXNwbGF5ZWQsIGJhY2tncm91bmRDb2xvciwgcHJvZ3Jlc3NDb2xvciB9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBbXTtcclxuICAgICAgICBpZihudW1iZXJPZlRhc2tzID4gbWF4aW11bVRhc2tzRGlzcGxheWVkKXtcclxuICAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJwcm9ncmVzcy1vdmVydmlld1wiPiB7Y29tcGxldGVkTnVtYmVyT2ZUYXNrc30gLyB7bnVtYmVyT2ZUYXNrc30gPC9kaXY+O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgdGFza05vID0gMTsgdGFza05vIDw9IG51bWJlck9mVGFza3M7IHRhc2tObysrKSB7XHJcbiAgICAgICAgICAgIHByb2dyZXNzLnB1c2goXHJcbiAgICAgICAgICAgIDxzdmcga2V5PXt0YXNrTm99PlxyXG4gICAgICAgICAgICAgICAgPGNpcmNsZSBjbGFzc05hbWU9XCJjaXJjbGUtY2hhcnQtYmFja2dyb3VuZFwiIGZpbGw9e3Rhc2tObyA+IGNvbXBsZXRlZE51bWJlck9mVGFza3MgPyBiYWNrZ3JvdW5kQ29sb3IgOiBwcm9ncmVzc0NvbG9yfSBjeD1cIjhcIiBjeT1cIjhcIiByPVwiOFwiIC8+XHJcbiAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcHJvZ3Jlc3M7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCl7ICBcclxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJnb2Fscy1wcm9ncmVzc1wiPnt0aGlzLmNyZWF0ZVByb2dyZXNzKCl9PC9kaXY+XHJcbiAgICB9XHJcbn0iLCIvKiBSRUZBQ1RPUjogTW92ZSB0aGlzIGNvbXBvbmVudCBvdXRzaWRlIGNvdXJzZWJ1aWxkZXIhXHJcbiAgIFRoaXMgaXMgYSBnZW5lcmFsLXB1cnBvc2UgY29tcG9uZW50XHJcbiovXHJcblxyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEdvYWxQcm9ncmVzcyB9IGZyb20gJy4uL2NoYXJ0cy9nb2FsLXByb2dyZXNzJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdGl0bGU6IHN0cmluZyB8IEpTWC5FbGVtZW50O1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxuICBoZWFkZXJDbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgY29udGVudENsYXNzTmFtZT86IHN0cmluZztcclxuICBoZWFkZXJPcGVuPzogYm9vbGVhbjtcclxuICBvbk9wZW5DbG9zZT86IChiZWNhbWVPcGVuOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIGRpc3BsYXlQcm9ncmVzcz86IGJvb2xlYW47XHJcbiAgcHJvZ3Jlc3NEYXRhPzoge2NvbXBsZXRlZE51bWJlck9mVGFza3M6IG51bWJlciwgbnVtYmVyT2ZUYXNrczogbnVtYmVyfTtcclxuICBjaGlsZHJlbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBoZWFkZXJPcGVuOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgT3BlbkNsb3NlQm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBoZWFkZXJPcGVuOiBwcm9wcy5oZWFkZXJPcGVuIHx8IGZhbHNlXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzOiBQcm9wcykge1xyXG4gICAgaWYgKG5leHRQcm9wcy5oZWFkZXJPcGVuICE9PSB0aGlzLnByb3BzLmhlYWRlck9wZW4pIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7aGVhZGVyT3BlbjogbmV4dFByb3BzLmhlYWRlck9wZW59KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgdGl0bGUsIGNsYXNzTmFtZSwgY2hpbGRyZW4sIGhlYWRlckNsYXNzTmFtZSwgY29udGVudENsYXNzTmFtZSwgZGlzcGxheVByb2dyZXNzLCBwcm9ncmVzc0RhdGEgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7IGhlYWRlck9wZW4gfSA9IHRoaXMuc3RhdGU7XHJcbiAgICAvL3ZhciBjdXJyZW50UHJvZ3Jlc3NEYXRhID0gLy9wcm9ncmVzc0RhdGEoKTtcclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17KGNsYXNzTmFtZXx8JycpICsgXCIgb3BlbkNsb3NlXCIgKyAoaGVhZGVyT3BlbiA/IFwiIG9wZW5cIiA6IFwiXCIpfT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkhlYWRlclwiICsgKGhlYWRlckNsYXNzTmFtZSA/IFwiIFwiICsgaGVhZGVyQ2xhc3NOYW1lIDogXCJcIil9XHJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHMub25PcGVuQ2xvc2UpIHRoaXMucHJvcHMub25PcGVuQ2xvc2UoIXRoaXMuc3RhdGUuaGVhZGVyT3Blbik7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGVhZGVyT3BlbjogIXRoaXMuc3RhdGUuaGVhZGVyT3BlbiB9KTtcclxuICAgICAgICB9fSA+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuSGVhZGVyQ29udGFpbmVyXCI+XHJcbiAgICAgICAgICA8ZGl2Pnt0aXRsZX08L2Rpdj5cclxuICAgICAgICAgIHtkaXNwbGF5UHJvZ3Jlc3MgJiYgPEdvYWxQcm9ncmVzcyB7Li4ucHJvZ3Jlc3NEYXRhfS8+fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkNvbnRlbnRcIiArIChjb250ZW50Q2xhc3NOYW1lID8gXCIgXCIgKyBjb250ZW50Q2xhc3NOYW1lIDogXCJcIil9PlxyXG4gICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj47XHJcbiAgfVxyXG59XHJcbiIsIlxyXG5leHBvcnQgY29uc3QgS0VEX05BTUVTUEFDRSA9IFwiS0VEXCI7XHJcblxyXG5kZWNsYXJlIHZhciBLRUQ6IGFueTtcclxuXHJcbnZhciByZXN1bHQgPSB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJyA/IHt9IDogS0VEO1xyXG5cclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB3aW5kb3dbS0VEX05BTUVTUEFDRV0gPSByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcclxuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBUZXJtLCBBY2FkZW1pY1llYXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNjaG9vbE1vbWVudCB7XHJcbiAgYWNhZGVtaWNZZWFyOiBBY2FkZW1pY1llYXI7XHJcbiAgdGVybTogVGVybTtcclxuICB3ZWVrPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSh0ZXJtOiBUZXJtKSB7XHJcbiAgcmV0dXJuIHRlcm0gPT09ICdBVCcgP1xyXG4gICAgWzMyLCA1MV0gOlxyXG4gICAgWzEsIDI1XTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRlcm1TdGFydEFuZEVuZChub3c6IG1vbWVudC5Nb21lbnQpIDogbW9tZW50Lk1vbWVudFtdIHtcclxuICAgIHJldHVybiBub3cubW9udGgoKSA+PSA2ID8gLy8gNiA9IEp1bHkgaW4gSlMgRGF0ZXMgYW5kIGluIG1vbWVudCBhcyB3ZWxsIVxyXG4gICAgW21vbWVudChuZXcgRGF0ZShub3cueWVhcigpLCA3LCAxKSksIG1vbWVudChuZXcgRGF0ZShub3cueWVhcigpLCAxMSwgMzEpKV0gOiAvLyBhdWcxIC0gZGVjMzFcclxuICAgIFttb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgMCwgMSkpLCBtb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgNiwgMzEpKV07IC8vIGphbjEgLSBqdWx5MzFcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaG9vbE1vbWVudChtOiBtb21lbnQuTW9tZW50KTogU2Nob29sTW9tZW50IHtcclxuICBjb25zdCB0aGlzWWVhciA9IG0ueWVhcigpO1xyXG4gIGNvbnN0IGlzQXV0dW1uID0gbS5tb250aCgpID49IDY7IC8vIGRldGVybWluZSBcclxuICBjb25zdCBbYXV0dW1uWWVhciwgc3ByaW5nWWVhcl0gPSBpc0F1dHVtbiA/XHJcbiAgICBbdGhpc1llYXIsIHRoaXNZZWFyICsgMV0gOlxyXG4gICAgW3RoaXNZZWFyIC0gMSwgdGhpc1llYXJdO1xyXG4gIGNvbnN0IGFjYWRlbWljWWVhciA9ICcnICsgYXV0dW1uWWVhciArICcvJyArIHNwcmluZ1llYXI7XHJcbiAgY29uc3QgdGVybSA9IGlzQXV0dW1uID8gJ0FUJyA6ICdTVCc7XHJcbiAgY29uc3Qgd2VlayA9IG0ud2VlaygpO1xyXG4gIHJldHVybiB7IGFjYWRlbWljWWVhciwgdGVybSwgd2VlayB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyLCBudW1ZZWFyc1RvQWRkOiBudW1iZXIpOiBBY2FkZW1pY1llYXIge1xyXG4gIHJldHVybiBhWWVhci5zcGxpdCgnLycpXHJcbiAgICAubWFwKHllYXJTdHIgPT4gcGFyc2VJbnQoeWVhclN0cikgKyBudW1ZZWFyc1RvQWRkKVxyXG4gICAgLm1hcCh5ZWFyID0+ICcnICsgeWVhcilcclxuICAgIC5qb2luKCcvJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBuZXh0QWNhZGVtaWNZZWFyKGFZZWFyOiBBY2FkZW1pY1llYXIpOiBBY2FkZW1pY1llYXIge1xyXG4gIHJldHVybiBhZGRZZWFyKGFZZWFyLCAxKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByZXZBY2FkZW1pY1llYXIoYVllYXI6IEFjYWRlbWljWWVhcik6IEFjYWRlbWljWWVhciB7XHJcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIC0xKTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEZvcm1GaWVsZCB9IGZyb20gJy4vZm9ybS1maWVsZCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGxhYmVsOiBhbnk7XHJcbiAgaWQ6IHN0cmluZztcclxuICB2YWx1ZTogc3RyaW5nO1xyXG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xyXG4gIGF1dG9Gb2N1cz86IGJvb2xlYW47XHJcbiAgb25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGV4dElucHV0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPEZvcm1GaWVsZCBsYWJlbD17dGhpcy5wcm9wcy5sYWJlbH0+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgYXV0b0ZvY3VzPXt0aGlzLnByb3BzLmF1dG9Gb2N1c30gaWQ9e3RoaXMucHJvcHMuaWR9IHNpemU9ezM1fSB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5wcm9wcy5vbkNoYW5nZShldi50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlaG9sZGVyfSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvRm9ybUZpZWxkPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbiIsIlxyXG5leHBvcnQgY29uc3QgS0VEX05BTUVTUEFDRSA9IFwiS0VEXCI7XHJcblxyXG5kZWNsYXJlIHZhciBLRUQ6IGFueTtcclxuXHJcbnZhciByZXN1bHQgPSB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJyA/IHt9IDogS0VEO1xyXG5cclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB3aW5kb3dbS0VEX05BTUVTUEFDRV0gPSByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcclxuIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgVmFsdWUgfSBmcm9tIFwiLi92YWx1ZVwiO1xyXG52YXIgRW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKEVtaXR0ZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBFbWl0dGVyKGluaXRpYWxWYWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnN1YnNjcmliZXJzID0gX3RoaXMuc3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gX2FbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMgIT09IG9ic2VydmVyO1xyXG4gICAgICAgICAgICAgICAgfSk7IH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZXJzLnB1c2goW29ic2VydmVyLCBzdWJzY3JpcHRpb25dKTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmVycm9yKVxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgX3RoaXMuZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyKF90aGlzLnZhbHVlLCB1bmRlZmluZWQsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XHJcbiAgICAgICAgfSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xyXG4gICAgICAgIF90aGlzLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEVtaXR0ZXIucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2goKTtcclxuICAgIH07XHJcbiAgICBFbWl0dGVyLnByb3RvdHlwZS5kaXNwYXRjaEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoKCk7XHJcbiAgICB9O1xyXG4gICAgRW1pdHRlci5wcm90b3R5cGUuX2Rpc3BhdGNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVswXSwgc3Vic2NyaXB0aW9uID0gX2FbMV07XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihfdGhpcy52YWx1ZSwgX3RoaXMuZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEVtaXR0ZXI7XHJcbn0oVmFsdWUpKTtcclxuZXhwb3J0IHsgRW1pdHRlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbWl0dGVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IGluaXRNYXBNZXRob2QgfSBmcm9tIFwiLi9tYXBcIjtcclxuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gXCIuL2NvbGxlY3Rpb25cIjtcclxuaW1wb3J0IHsgRmliZXJDb250ZXh0IH0gZnJvbSAnLi9maWJlci1jb250ZXh0JztcclxudmFyIFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmFsdWUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBWYWx1ZShzdWJzY3JpYmUpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgc3Vic2NyaWJlKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgVmFsdWUuZnJvbSA9IGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgaWYgKHguc3Vic2NyaWJlKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUuZnJvbSgpIGNhbiBvbmx5IHRha2Ugb2JzZXJ2YWJsZXNcIik7XHJcbiAgICB9O1xyXG4gICAgVmFsdWUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2UsIHJlc3VsdCwgZXJyLCBub3RpZnk7XHJcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGVyciA9IGVycm9yO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgbm90aWZ5KVxyXG4gICAgICAgICAgICAgICAgbm90aWZ5KG51bGwsIGVycm9yLCBzdWJzY2lwdGlvbik7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgICAgIG5vdGlmeSh2YWx1ZSwgbnVsbCwgc3Vic2NpcHRpb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChyZXNvbHZlZCkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudEZpYmVyID0gRmliZXJDb250ZXh0LmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGlmICghY3VycmVudEZpYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgRmliZXIgQ29udGV4dFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IGN1cnJlbnRGaWJlci5zdWJzY3JpcHRpb25zLCBvYnNlcnZlciA9IGN1cnJlbnRGaWJlci5vYnNlcnZlcjtcclxuICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIG5vdGlmeSA9IG9ic2VydmVyO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIG5vdGlmeSA9IGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY2lwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBzdWJzY2lwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoZm4odmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgIH0pOyB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKHByZWZpeCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwcmVmaXgsIHgpO1xyXG4gICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUudG9Db2xsZWN0aW9uID0gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy5tYXAobWFwcGVyKS5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgfTtcclxuICAgIFZhbHVlLnByb3RvdHlwZS5jb21iaW5lTGF0ZXN0ID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW251bGwsIG51bGxdO1xyXG4gICAgICAgICAgICB2YXIgbXlTdWJzY3JpcHRpb24sIG90aGVyU3Vic2NyaXB0aW9uO1xyXG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBteVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG90aGVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIG15U3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChpdGVtcywgZXJyb3IsIHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhbHVlc1swXSA9IGl0ZW1zO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1sxXSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcih2YWx1ZXMsIG51bGwsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBvdGhlclN1YnNjcmlwdGlvbiA9IG90aGVyLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXNbMV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbMF0gIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWVzLCBudWxsLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUuc3dpdGNoTWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgdmFyIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgcmV0dXJuZWRTdWJzY3JpcHRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXBwZWRTdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKGl0ZW0sIGVycm9yLCBzKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBzO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hcHBlZFN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHJldHVybmVkU3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlT3JWYWx1ZSA9IG1hcHBlcihpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9ic2VydmFibGVPclZhbHVlICYmIHR5cGVvZiBvYnNlcnZhYmxlT3JWYWx1ZS5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG9ic2VydmFibGVPclZhbHVlLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcih2YWx1ZSwgZXJyb3IsIHJldHVybmVkU3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIob2JzZXJ2YWJsZU9yVmFsdWUsIG51bGwsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5lZFN1YnNjcmlwdGlvbjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVmFsdWU7XHJcbn0oT2JzZXJ2YWJsZSkpO1xyXG5leHBvcnQgeyBWYWx1ZSB9O1xyXG5WYWx1ZS5wcm90b3R5cGUubWFwID0gaW5pdE1hcE1ldGhvZChWYWx1ZSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbHVlLmpzLm1hcCIsInZhciBPYnNlcnZhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy9zdGF0aWMgZ2V0IFtTeW1ib2wuc3BlY2llc10oKSB7IHJldHVybiB0aGlzOyB9XHJcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKF9zdWJzY3JpYmUpIHtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBfc3Vic2NyaWJlO1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShmdW5jdGlvbiAoaXRlbXMsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIoaXRlbXMsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVyciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgeyB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkgeyB9IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcclxufSgpKTtcclxuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgbGFiZWw6IGFueTtcclxuICBjaGlsZHJlbjogYW55O1xyXG4gIGlkPzogc3RyaW5nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kSWQobm9kZSkge1xyXG4gIGNvbnN0IHJlY3VjaGVjayA9IG5ldyBTZXQoKTtcclxuICByZXR1cm4gKGZ1bmN0aW9uIGZpbmRJZChub2RlKXtcclxuICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHJldHVybiBudWxsO1xyXG4gICAgaWYgKHJlY3VjaGVjay5oYXMobm9kZSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmVjdWNoZWNrLmFkZChub2RlKTtcclxuICAgIGlmIChub2RlLnByb3BzKSB7XHJcbiAgICAgIGlmIChub2RlLnByb3BzLmlkKSByZXR1cm4gbm9kZS5wcm9wcy5pZDtcclxuICAgICAgaWYgKG5vZGUucHJvcHMuY2hpbGRyZW4pIHtcclxuICAgICAgICByZXR1cm4gZmluZElkKG5vZGUucHJvcHMuY2hpbGRyZW4pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChub2RlLmxlbmd0aCkge1xyXG4gICAgICBmb3IgKGxldCBpPTA7aTxub2RlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2ldO1xyXG4gICAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgICAgY29uc3QgY2hpbGRJZCA9IGZpbmRJZChjaGlsZCk7XHJcbiAgICAgICAgICBpZiAoY2hpbGRJZCkgcmV0dXJuIGNoaWxkSWQ7XHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKGNoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KShub2RlKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZvcm1GaWVsZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiA8PlxyXG4gICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJrY2xhYmVsXCIgaHRtbEZvcj17dGhpcy5wcm9wcy5pZCB8fCBmaW5kSWQodGhpcy5wcm9wcy5jaGlsZHJlbil9Pnt0aGlzLnByb3BzLmxhYmVsfTwvbGFiZWw+XHJcbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICA8Lz5cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSAnLi9qcy9kaXN0L2pzL29ic2VydmFibGUnO1xyXG4iLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBpbml0TWFwTWV0aG9kIH0gZnJvbSBcIi4vbWFwXCI7XHJcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vdmFsdWVcIjtcclxuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCIuL2VtaXR0ZXJcIjtcclxudmFyIENvbGxlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb2xsZWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ29sbGVjdGlvbihzdWJzY3JpYmUpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgc3Vic2NyaWJlKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuX21hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcclxuICAgICAgICB0aHJvdyBcIm1peGVkaW5cIjtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLmZyb20gPSBmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgIGlmICh4LnN1YnNjcmliZSlcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcclxuICAgICAgICAgICAgdmFyIGVtaXR0ZXJfMSA9IG5ldyBFbWl0dGVyKHgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGVtaXR0ZXJfMS5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYnNlcnZhYmxlQ29sbGVjdGlvbi5mcm9tKCkgY2FuIG9ubHkgdGFrZSBhcnJheXMgb3Igb2JzZXJ2YWJsZXNcIik7XHJcbiAgICB9O1xyXG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7IHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIG1hcHBlcihpdGVtKTsgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgaXRlbXMpOyB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIGl0ZW1zLmZpbHRlcihmaWx0ZXIpOyB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gQ29sbGVjdGlvbi5mcm9tKHRoaXMudG9WYWx1ZSgpLmNvbWJpbmVMYXRlc3Qob3RoZXIpLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIG1lID0gX2FbMF0sIG90aGVyID0gX2FbMV07XHJcbiAgICAgICAgICAgIHJldHVybiBtZS5jb25jYXQob3RoZXIpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5vcmRlckJ5ID0gZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChhcnJheSkgeyByZXR1cm4gYXJyYXkuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHZhciBhUHJvcCA9IGEgJiYgYVtwcm9wXTtcclxuICAgICAgICAgICAgdmFyIGJQcm9wID0gYiAmJiBiW3Byb3BdO1xyXG4gICAgICAgICAgICByZXR1cm4gYVByb3AgPiBiUHJvcCA/IDEgOiBhUHJvcCA8IGJQcm9wID8gLTEgOiAwO1xyXG4gICAgICAgIH0pOyB9KS50b0NvbGxlY3Rpb24oZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLnRvVmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmdyb3VwQnkgPSBmdW5jdGlvbiAocHJvcCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBydiA9IHt9O1xyXG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHJ2W2l0ZW1bcHJvcF1dIHx8IChydltpdGVtW3Byb3BdXSA9IFtdKTtcclxuICAgICAgICAgICAgICAgIGxpc3QucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBydjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyclswXTsgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbGxlY3Rpb247XHJcbn0oT2JzZXJ2YWJsZSkpO1xyXG5leHBvcnQgeyBDb2xsZWN0aW9uIH07XHJcbkNvbGxlY3Rpb24ucHJvdG90eXBlLl9tYXAgPSBpbml0TWFwTWV0aG9kKENvbGxlY3Rpb24pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsZWN0aW9uLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBvbkNsaWNrLFxyXG4gIGNsYXNzTmFtZT8sXHJcbiAgc3R5bGU/LFxyXG4gIHRpdGxlP1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFJlbW92ZUl0ZW0gPSAoeyBvbkNsaWNrLCBjbGFzc05hbWUsIHN0eWxlLCB0aXRsZSB9OiBQcm9wcykgPT5cclxuXHJcbiAgPGRpdlxyXG4gICAgdGl0bGU9e3RpdGxlIHx8IExgUmFkZXJhYH1cclxuICAgIGNsYXNzTmFtZT17XCJyZW1vdmVJdGVtIFwiICsgKGNsYXNzTmFtZSB8fCBcIlwiKX1cclxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9IHN0eWxlPXtzdHlsZX0gLz5cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XHJcbmltcG9ydCB7IHNoYWxsb3dFcXVhbHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XHJcblxyXG5pbnRlcmZhY2UgT3B0aW9ucyB7XHJcbiAgc3Bpbm5lcj86IEpTWC5FbGVtZW50O1xyXG4gIG9uRXJyb3I/OiAoZXJyb3I6IEVycm9yKSA9PiBKU1guRWxlbWVudDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxpdmVRdWVyeVZpZXc8VFByb3BzPihcclxuICBmbjogKHByb3BzOiBUUHJvcHMpID0+IE9ic2VydmFibGU8SlNYLkVsZW1lbnQ+LFxyXG4gIG9wdGlvbnM/OiBPcHRpb25zKTogKHByb3BzOiBUUHJvcHMpID0+IEpTWC5FbGVtZW50XHJcbntcclxuICByZXR1cm4gKHByb3BzOiBUUHJvcHMpPT57XHJcbiAgICByZXR1cm4gPExpdmVRdWVyeVZpZXcgcHJvcHM9e3Byb3BzfSBmbj17Zm59IHsuLi5vcHRpb25zfSAvPjtcclxuICB9XHJcbn1cclxuXHJcbmludGVyZmFjZSBQcm9wczxUUHJvcHM+IHtcclxuICBwcm9wczogVFByb3BzO1xyXG4gIHNwaW5uZXI/OiBKU1guRWxlbWVudDtcclxuICBub0Vycm9yPzogYm9vbGVhbjtcclxuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gSlNYLkVsZW1lbnQ7XHJcbiAgZm46IChwcm9wczogVFByb3BzKSA9PiBPYnNlcnZhYmxlPEpTWC5FbGVtZW50PjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICByZXN1bHQ6IEpTWC5FbGVtZW50O1xyXG4gIGVycm9yPzogRXJyb3I7XHJcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGl2ZVF1ZXJ5VmlldzxUUHJvcHM+IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPFRQcm9wcz4sIFN0YXRlPiB7XHJcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24/OiBTdWJzY3JpcHRpb247XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wczxUUHJvcHM+KSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICByZXN1bHQ6IG51bGwsXHJcbiAgICAgIGlzTG9hZGluZzogdHJ1ZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgdGhpcy51bnN1YnNjcmliZSgpO1xyXG4gIH1cclxuXHJcbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wczogUHJvcHM8VFByb3BzPiwgbmV4dFN0YXRlOiBTdGF0ZSkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgdGhpcy5zdGF0ZS5lcnJvciAhPT0gbmV4dFN0YXRlLmVycm9yIHx8XHJcbiAgICAgIHRoaXMuc3RhdGUuaXNMb2FkaW5nICE9PSBuZXh0U3RhdGUuaXNMb2FkaW5nIHx8XHJcbiAgICAgIHRoaXMuc3RhdGUucmVzdWx0ICE9PSBuZXh0U3RhdGUucmVzdWx0IHx8XHJcbiAgICAgICFzaGFsbG93RXF1YWxzKG5leHRQcm9wcy5wcm9wcywgdGhpcy5wcm9wcy5wcm9wcylcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBQcm9wczxUUHJvcHM+KSB7XHJcbiAgICBpZiAoIXNoYWxsb3dFcXVhbHMocHJldlByb3BzLnByb3BzLCB0aGlzLnByb3BzLnByb3BzKSkge1xyXG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmUoKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtpc0xvYWRpbmc6IHRydWV9IGFzIGFueSk7XHJcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMucHJvcHMuZm4odGhpcy5wcm9wcy5wcm9wcykuc3Vic2NyaWJlKChyZXN1bHQsIGVycm9yKSA9PiB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgcmVzdWx0LFxyXG4gICAgICBlcnJvcixcclxuICAgICAgaXNMb2FkaW5nOiBmYWxzZVxyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgdW5zdWJzY3JpYmUoKSB7XHJcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge3Jlc3VsdCwgZXJyb3IsIGlzTG9hZGluZ30gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qge3NwaW5uZXIsIG9uRXJyb3IsIG5vRXJyb3J9ID0gdGhpcy5wcm9wcztcclxuICAgIC8vaWYgKCFpc0xvYWRpbmcgJiYgIXJlc3VsdCkgZGVidWdnZXI7XHJcbiAgICByZXR1cm4gZXJyb3IgP1xyXG4gICAgICBub0Vycm9yID8gXCJcIiA6IG9uRXJyb3IgPyBvbkVycm9yKGVycm9yKSA6IDxwPkVycm9yOiB7ZXJyb3IubWVzc2FnZX08L3A+IDpcclxuICAgICAgaXNMb2FkaW5nID9cclxuICAgICAgICBzcGlubmVyID8gc3Bpbm5lciA6IFwiXCIgOlxyXG4gICAgICAgIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IHJlc3VsdDtcclxuICB9XHJcbn0iLCJleHBvcnQgKiBmcm9tICcuL29ic2VydmFibGUnO1xyXG5leHBvcnQgKiBmcm9tICcuL3ZhbHVlJztcclxuZXhwb3J0ICogZnJvbSAnLi9jb2xsZWN0aW9uJztcclxuZXhwb3J0ICogZnJvbSAnLi9lbWl0dGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9maWJlci1jb250ZXh0JztcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGluaXRNYXBNZXRob2QoY3Rvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXBwZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgY3RvcihmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobWFwcGVyKHZhbHVlKSwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pOyB9KTtcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgU2Nob29sTW9tZW50LCBnZXRTY2hvb2xNb21lbnQsIGFkZFllYXIgfSBmcm9tICcuL3NjaG9vbC1tb21lbnQnO1xyXG5pbXBvcnQgeyBBY2FkZW1pY1llYXIsIFRlcm0gfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcbmltcG9ydCB7SW5qZWN0ZWRJbnRsfSBmcm9tICdyZWFjdC1pbnRsJztcclxuXHJcbnR5cGUgTW9tZW50ID0gbW9tZW50Lk1vbWVudDtcclxuXHJcbmZ1bmN0aW9uIGlzU2Nob29sTW9tZW50KG9iajogRGF0ZSB8IFNjaG9vbE1vbWVudCk6IG9iaiBpcyBTY2hvb2xNb21lbnQge1xyXG4gIHJldHVybiAnYWNhZGVtaWNZZWFyJyBpbiBvYmo7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTY2hvb2xUZXJtIHtcclxuICBhY2FkZW1pY1llYXI6IEFjYWRlbWljWWVhcjtcclxuICB0ZXJtOiBUZXJtO1xyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRlT3JTY2hvb2xNb21lbnQ6IERhdGUgfCBTY2hvb2xNb21lbnQpIHtcclxuICAgIGNvbnN0IHNjaG9vbE1vbWVudCA9IGlzU2Nob29sTW9tZW50KGRhdGVPclNjaG9vbE1vbWVudCkgP1xyXG4gICAgICBkYXRlT3JTY2hvb2xNb21lbnQgOiBnZXRTY2hvb2xNb21lbnQobW9tZW50KGRhdGVPclNjaG9vbE1vbWVudCkpO1xyXG4gICAgdGhpcy5hY2FkZW1pY1llYXIgPSBzY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyO1xyXG4gICAgdGhpcy50ZXJtID0gc2Nob29sTW9tZW50LnRlcm07XHJcbiAgfVxyXG5cclxuICBnZXQgeWVhcigpIHtcclxuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmFjYWRlbWljWWVhclxyXG4gICAgICAgIC5zcGxpdCgnLycpW3RoaXMudGVybSA9PT0gJ0FUJyA/IDAgOiAxXSk7XHJcbiAgfVxyXG5cclxuICBuZXh0VGVybSgpIHtcclxuICAgIHJldHVybiBuZXcgU2Nob29sVGVybSh0aGlzLnRlcm0gPT09ICdBVCcgP1xyXG4gICAgICB7XHJcbiAgICAgICAgdGVybTogJ1NUJyxcclxuICAgICAgICBhY2FkZW1pY1llYXI6IHRoaXMuYWNhZGVtaWNZZWFyXHJcbiAgICAgIH0gOlxyXG4gICAgICB7XHJcbiAgICAgICAgdGVybTogJ0FUJyxcclxuICAgICAgICBhY2FkZW1pY1llYXI6IGFkZFllYXIodGhpcy5hY2FkZW1pY1llYXIsIDEpXHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJldlRlcm0oKSB7XHJcbiAgICByZXR1cm4gbmV3IFNjaG9vbFRlcm0odGhpcy50ZXJtID09PSAnQVQnID9cclxuICAgICAge1xyXG4gICAgICAgIHRlcm06ICdTVCcsXHJcbiAgICAgICAgYWNhZGVtaWNZZWFyOiBhZGRZZWFyKHRoaXMuYWNhZGVtaWNZZWFyLCAtMSlcclxuICAgICAgfSA6XHJcbiAgICAgIHtcclxuICAgICAgICB0ZXJtOiAnQVQnLFxyXG4gICAgICAgIGFjYWRlbWljWWVhcjogdGhpcy5hY2FkZW1pY1llYXJcclxuICAgICAgfSk7XHJcbiAgICBcclxuICB9XHJcblxyXG4gIHRvTG9jYWxlU3RyaW5nKGludGw6IEluamVjdGVkSW50bCwgc2hvcnRZZWFyPzogYm9vbGVhbikge1xyXG4gICAgbGV0IHllYXIgPSB0aGlzLnRlcm0gPT09ICdBVCcgP1xyXG4gICAgICB0aGlzLmFjYWRlbWljWWVhci5zcGxpdCgnLycpWzBdOlxyXG4gICAgICB0aGlzLmFjYWRlbWljWWVhci5zcGxpdCgnLycpWzFdO1xyXG5cclxuICAgIGlmIChzaG9ydFllYXIpXHJcbiAgICAgIHllYXIgPSB5ZWFyLnN1YnN0cigyKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy50ZXJtID09PSAnQVQnID8gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDondGVybXBsYW5uZXIuc2Vjb25kVGVybScsIGRlZmF1bHRNZXNzYWdlOidIVCB7eWVhcn0nfSwge3llYXI6IHllYXJ9KSA6IFxyXG4gICAgaW50bC5mb3JtYXRNZXNzYWdlKHtpZDondGVybXBsYW5uZXIuZmlyc3RUZXJtJywgZGVmYXVsdE1lc3NhZ2U6J1ZUIHt5ZWFyfSd9LCB7eWVhcjogeWVhcn0pO1xyXG4gIH1cclxufVxyXG4iLCJjb25zdCBERUZBVUxUX0NBQ0hFX0VYUElSQVRJT04gPSAzMCAqIDYwICogMTAwMDsgLy8gMzAgbWludXRlcy5cclxuXHJcbnR5cGUgUHJvbWlzZVJldHVybmluZ01ldGhvZE5hbWVzPEFQST4gPSB7XHJcbiAgW01FVEhPRCBpbiBrZXlvZiBBUEldOiBBUElbTUVUSE9EXSBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxhbnk+ID8gTUVUSE9EIDogbmV2ZXJcclxufVxyXG5cclxudHlwZSBDb252ZXJ0TWV0aG9kVG9TdXNwZW5zZTxGPiA9IEYgZXh0ZW5kcyAoLi4uYXJnczogaW5mZXIgQSkgPT4gUHJvbWlzZTxpbmZlciBSPiA/XHJcbiAgKC4uLmFyZ3M6IEEpID0+IFIgOlxyXG4gIEY7XHJcblxyXG5leHBvcnQgdHlwZSBTdXNwZW5zZUJhc2VkQVBJPEFQST4gPSB7XHJcbiAgW01FVEhPRCBpbiBrZXlvZiBQcm9taXNlUmV0dXJuaW5nTWV0aG9kTmFtZXM8QVBJPl06IENvbnZlcnRNZXRob2RUb1N1c3BlbnNlPEFQSVtNRVRIT0RdPlxyXG59XHJcblxyXG50eXBlIE9wdGlvbnMgPSB7XHJcbiAgaXNBcGlNZXRob2Q/OiAocHJvcDogc3RyaW5nKT0+Ym9vbGVhbixcclxuICBjYWNoZUV4cGlyYXRpb24/OiBudW1iZXJcclxufVxyXG5cclxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IE9wdGlvbnMgPSB7XHJcbiAgaXNBcGlNZXRob2Q6IGYgPT4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbicsXHJcbiAgY2FjaGVFeHBpcmF0aW9uOiBERUZBVUxUX0NBQ0hFX0VYUElSQVRJT05cclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlU3VzcGVuc2VBcGk8QVBJPihhcGk6IEFQSSwgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zKTogU3VzcGVuc2VCYXNlZEFQSTxBUEk+XHJcbntcclxuICBvcHRpb25zID0gey4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zfTtcclxuICBjb25zdCB7aXNBcGlNZXRob2QsIGNhY2hlRXhwaXJhdGlvbn0gPSBvcHRpb25zO1xyXG5cclxuICBjb25zdCBydjogU3VzcGVuc2VCYXNlZEFQSTxBUEk+ID0gT2JqZWN0LmNyZWF0ZShhcGkgYXMgYW55KSBhcyBTdXNwZW5zZUJhc2VkQVBJPEFQST47XHJcbiAgY29uc3QgY2FjaGU6IHtba2V5OiBzdHJpbmddOiB7dGltZW91dDogbnVtYmVyLCB2YWx1ZT86IGFueSwgZXJyb3I/OiBhbnksIHByb21pc2U/OiBQcm9taXNlPGFueT59fSA9IHt9O1xyXG5cclxuICAvLyBXYWxrIHRoZSBpbnN0YW5jZSArIHByb3RvdHlwZSBjaGFpbiB0byBnZW5lcmF0ZSBzdXNwZW5zZSB2ZXJzaW9uIG9mIGVhY2ggcHJvbWlzZSByZXR1cm5pbmcgbWV0aG9kXHJcbiAgZm9yIChsZXQgcHJvdG8gPSBhcGk7IHByb3RvICYmIHByb3RvICE9PSBPYmplY3QucHJvdG90eXBlOyBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykpIHtcclxuICAgIHN1c3BlbmRpZnkocHJvdG8pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3VzcGVuZGlmeShwcm90bykge1xyXG4gICAgT2JqZWN0LmtleXMocHJvdG8pLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgIGlmICghcnYuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgaXNBcGlNZXRob2QocHJvcCkpIHtcclxuICAgICAgICBydltwcm9wXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbcHJvcCwgLi4uYXJnc10pO1xyXG4gICAgICAgICAgY29uc3QgY2FjaGVkRW50cnkgPSBjYWNoZVtrZXldO1xyXG4gICAgICAgICAgaWYgKGNhY2hlZEVudHJ5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZEVudHJ5LnByb21pc2UpIHRocm93IGNhY2hlZEVudHJ5LnByb21pc2U7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZWRFbnRyeS5lcnJvcikgdGhyb3cgY2FjaGVkRW50cnkuZXJyb3I7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZWRFbnRyeS50aW1lb3V0ID4gRGF0ZS5ub3coKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZWRFbnRyeS52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHByb3RvW3Byb3BdLmFwcGx5KGFwaSwgYXJncykudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgdmFsdWU6IHJlc3VsdH07XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICBjYWNoZVtrZXldID0ge3RpbWVvdXQ6IERhdGUubm93KCkgKyBjYWNoZUV4cGlyYXRpb24sIGVycm9yfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgcHJvbWlzZX07XHJcbiAgICAgICAgICAgIHRocm93IHByb21pc2U7XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IudGhlbikgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgZXJyb3J9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gYXMgYW55O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBydjtcclxufVxyXG4iLCJpbXBvcnQgeyBFRFNDb3Vyc2UsIEVEU0Fzc2Vzc21lbnQsIEVEU1N0dWR5UGxhbiwgRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHksIEVEU1N0dWRlbnQsIEVEU1R1aXRpb25Hcm91cCwgRURTVHVpdGlvblN0dWRlbnQsIEVEU1RlYWNoZXIsIE1vY2tFRFNBY2FkZW1pY1llYXIsIE1vY2tFRFNEYXRlUmFuZ2UgfSBmcm9tICcuLi9jb250cmFjdHMvZWRzJztcclxuaW1wb3J0IHsgUmVzdENsaWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgSXNvbW9ycGhpY0VudiwgQmVhcmVyUHJvdmlkZXIsIEh0dHBFcnJvciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgU2Nob29sTW9tZW50IH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLW1vbWVudCc7XHJcbmltcG9ydCB7IFNjaG9vbFRlcm0gfSBmcm9tICcuLi91dGlscy9zY2hvb2wtdGVybSc7XHJcbmltcG9ydCB7IGRhdGVUaW1lUmV2aXZlciwgTCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IG1vY2tKc29uRmlsZSBmcm9tICcuL21vY2svbW9jay1lZHMtZGF0YS5qc29uJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBTdXNwZW5zZUJhc2VkQVBJLCBtYWtlU3VzcGVuc2VBcGkgfSBmcm9tICcuLi91dGlscy9tYWtlLXN1c3BlbnNlLWFwaSc7XHJcblxyXG5leHBvcnQgY2xhc3MgRWRzQ2xpZW50IHtcclxuICBodHRwOiBSZXN0Q2xpZW50O1xyXG4gIHVzZXJFbWFpbEdldHRlcjogKCk9PnN0cmluZztcclxuICBzdXNwZW5zZTogU3VzcGVuc2VCYXNlZEFQSTxFZHNDbGllbnQ+O1xyXG5cclxuICBjb25zdHJ1Y3RvciAoXHJcbiAgICBpc29tb3JwaGljOiBJc29tb3JwaGljRW52LFxyXG4gICAgYmFzZVVybDogc3RyaW5nLFxyXG4gICAgYmVhcmVyUHJvdmlkZXI6IEJlYXJlclByb3ZpZGVyLFxyXG4gICAgdXNlckVtYWlsR2V0dGVyOiAoKT0+c3RyaW5nXHJcbiAgKSB7XHJcbiAgICB0aGlzLmh0dHAgPSBuZXcgUmVzdENsaWVudCAoaXNvbW9ycGhpYywgYmFzZVVybCwge2JlYXJlclByb3ZpZGVyfSk7XHJcbiAgICB0aGlzLnVzZXJFbWFpbEdldHRlciA9IHVzZXJFbWFpbEdldHRlcjtcclxuICAgIGNvbnN0IGlzQXBpTWV0aG9kID0gbSA9PlxyXG4gICAgICB0eXBlb2YgdGhpc1ttXSA9PT0gJ2Z1bmN0aW9uJyAmJlxyXG4gICAgICBtICE9PSAnY29uc3RydWN0b3InICYmIC8vIFNpbmNlIG1ha2VTdXNwZW5zZUFwaSgpIHdhbGtzIHByb3RvdHlwZSBjaGFpblxyXG4gICAgICBtICE9PSAncHJpdmF0aXppbmdDYWNoZUJ1c3QnICYmXHJcbiAgICAgIG0gIT09ICd1c2VyRW1haWxHZXR0ZXInIC8vIExpc3Qgbm9uLUFQSSBtZXRob2RzIGhlcmUuLi5cclxuICAgICAgO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKEVkc0NsaWVudC5wcm90b3R5cGUpLmZvckVhY2gobWV0aG9kID0+IHtcclxuICAgICAgaWYgKGlzQXBpTWV0aG9kKG1ldGhvZCkpIHtcclxuICAgICAgICB0aGlzW21ldGhvZF0gPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpc1ttZXRob2RdKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnN1c3BlbnNlID0gbWFrZVN1c3BlbnNlQXBpKHRoaXMsIHtpc0FwaU1ldGhvZH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwcml2YXRpemluZ0NhY2hlQnVzdCgpIHtcclxuICAgIHJldHVybiB7dXNlcjogdGhpcy51c2VyRW1haWxHZXR0ZXIoKX07XHJcbiAgfVxyXG5cclxuLyoqXHJcbiAgICogUmV0cmlldmUgYWN0aXZlIGNvdXJzZXMgZm9yIGN1cnJlbnQgbG9nZ2VkIGluIHN0dWRlbnQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gY291cnNlQ29kZSBTaG9ydC1uYW1lIG9mIHRoZSBjb3Vyc2UuIE9wdGlvbmFsLlxyXG4gICAqL1xyXG4gIGFzeW5jIGdldEFjdGl2ZUNvdXJzZXMocToge2NvdXJzZUNvZGU/OiBzdHJpbmcsIHBlcmlvZE5hbWU6IHN0cmluZ30pIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHF1ZXJ5OmFueSA9IHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKTtcclxuICAgICAgaWYgKHEpIHtcclxuICAgICAgICBpZiAocS5jb3Vyc2VDb2RlKSBxdWVyeS5Db3Vyc2VDb2RlID0gcS5jb3Vyc2VDb2RlO1xyXG4gICAgICAgIGlmIChxLnBlcmlvZE5hbWUpIHF1ZXJ5LlBlcmlvZE5hbWUgPSBxLnBlcmlvZE5hbWU7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRhY3RpdmVjb3Vyc2VzXCIsIHF1ZXJ5KTtcclxuICAgICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgICAgcmV0dXJuIGpzb24uY291cnNlcyBhcyBFRFNDb3Vyc2VbXTtcclxuICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmcm9tIEVEUzogXCIgKyBleCk7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihMYEt1bmRlIHR5dsOkcnIgaW50ZSBsYWRkYSB0ZXJtaW5zbcOlbCBlbGxlciBhdmtsYXJhZGUgc3RlZyBmcsOlbiBFRFMuIEbDtnJzw7ZrIGlnZW4gc2VuYXJlLi4uYCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXRyaWV2ZSBsYXRlc3QgYXNzZXNzbWVudHMgZm9yIGN1cnJlbnQgbG9nZ2VkIGluIHVzZXIuXHJcbiAgICogXHJcbiAgICogQHBhcmFtIGxpbWl0IE9wdGlvbmFsIGxpbWl0XHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0TGF0ZXN0QXNzZXNzbWVudHMobGltaXQ/OiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHF1ZXJ5OmFueSA9IHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKTtcclxuICAgIGlmICghaXNOYU4obGltaXQpKSBxdWVyeS5Db3VudCA9IGxpbWl0O1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRhc3Nlc3NtZW50c1wiLCBxdWVyeSk7XHJcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgIHJldHVybiBqc29uLmFzc2Vzc21lbnRzIGFzIEVEU0Fzc2Vzc21lbnRbXTsgICAgXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXRyaWV2ZSBzdHVkeXBsYW5zIGZvciBjdXJyZW50IGxvZ2dlZC1pbiB1c2VyXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0U3R1ZGVudEdvYWxzKCkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRnb2Fsc1wiLCB0aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCkpO1xyXG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XHJcbiAgICByZXR1cm4ganNvbi5zdHVkZW50R29hbHMgYXMgRURTU3R1ZHlQbGFuW107ICAgIFxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0U3R1ZGVudEZ1dHVyZUFiaWxpdGllcygpIHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJzdHVkZW50RnV0dXJlQWJpbGl0aWVzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XHJcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgIHJldHVybiBqc29uLnN0dWRlbnRGdXR1cmVBYmlsaXRpZXMgYXMgRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHlbXTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFRlYWNoZXJUdXRvclN0dWRlbnRzKCkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInRlYWNoZXJ0dXRvcnN0dWRlbnRzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XHJcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgIHJldHVybiBqc29uLnN0dWRlbnRzIGFzIEVEU1N0dWRlbnRbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldFNjaG9vbFR1aXRpb25Hcm91cHMoKVxyXG4gICAqIFxyXG4gICAqIFJldHVybiB0dWl0aW9uZ3JvdXBzIGZvciBzY2hvb2xcclxuICAgKiBcclxuICAgKiBAcGFyYW0gc2Nob29sTmFtZSAtIG5hbWUgb2Ygc2Nob29sXHJcbiAgICogQHBhcmFtIGNvdXJzZUNvZGUgLSBTa29sdmVya2V0cyBjb2RlIGZvciBjb3Vyc2VcclxuICAgKi9cclxuICBhc3luYyBnZXRTY2hvb2xUdWl0aW9uR3JvdXBzKHE6IHtzY2hvb2xOYW1lOiBzdHJpbmcsIGNvdXJzZUNvZGU6IHN0cmluZ30pIHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJTY2hvb2xUdWl0aW9uR3JvdXBzXCIsIHsuLi50aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCksIC4uLnF9KTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uc2Nob29sVHVpdGlvbkdyb3VwcyBhcyBFRFNUdWl0aW9uR3JvdXBbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldFR1aXRpb25Hcm91cFN0dWRlbnRzKClcclxuICAgKiBcclxuICAgKiBSZXR1cm4gbmFtZSBhbmQgbWFpbGFkcmVzc2VzIGZvciB0dXRpdGlvbmdyb3VwcyBpbiBzY2hvb2xzXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHNjaG9vbE5hbWUgLSBuYW1lIG9mIHNjaG9vbFxyXG4gICAqIEBwYXJhbSB0dWl0aW9uR3JvdXBOYW1lIC0gdHVpdGlvbiBncnVvcCBuYW1lIGluIEVEU1xyXG4gICAqL1xyXG4gIGFzeW5jIGdldFR1aXRpb25Hcm91cFN0dWRlbnRzKHE6IHtzY2hvb2xOYW1lOiBzdHJpbmcsIHR1aXRpb25Hcm91cE5hbWU6IHN0cmluZ30pIHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJUdWl0aW9uR3JvdXBTdHVkZW50c1wiLCB7Li4udGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpLCAuLi5xfSk7XHJcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgIHJldHVybiBqc29uLnR1aXRpb25Hcm91cFN0dWRlbnRzIGFzIEVEU1R1aXRpb25TdHVkZW50W107XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBnZXRTY2hvb2xUZWFjaGVycygpXHJcbiAgICogXHJcbiAgICogUmV0dXJuIG5hbWUgYW5kIG1haWxhZHJlc3NlcyBmb3IgdHV0aXRpb25ncm91cHMgaW4gc2Nob29sc1xyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBzY2hvb2xOYW1lIC0gbmFtZSBvZiBzY2hvb2xcclxuICAgKi9cclxuICBhc3luYyBnZXRTY2hvb2xUZWFjaGVycyhxOiB7c2Nob29sTmFtZTogc3RyaW5nfSkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcIlNjaG9vbFRlYWNoZXJzXCIsIHsuLi50aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCksIC4uLnF9KTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uc2Nob29sVGVhY2hlcnMgYXMgRURTVGVhY2hlcltdO1xyXG4gIH1cclxuICAvLyB3ZSBhc3N1bWUgdGhhdCB0aGUgRURTIHdpbGwgcmV0dXJuIHRoZSBjdXJyZW50IGFjYWRlbWljIHllYXIgZGF0ZXMgZGV0ZXJtaW5lZCBieSB0aGUgY3VycmVudCBkYXRlXHJcbiAgYXN5bmMgZ2V0QWNhZGVtaWNZZWFyVGVybXMoc2Nob29sTG9jYWxlOiBzdHJpbmcsIGRhdGU6IERhdGUpIHtcclxuICAgIC8vIG1vY2sgZGF0YVxyXG4gICAgc3dpdGNoIChzY2hvb2xMb2NhbGUpIHtcclxuICAgICAgY2FzZSAnZW5fc2luJzpcclxuICAgICAgcmV0dXJuIG1vY2tKc29uRmlsZS5Tb3V0aEluZGlhLmZpbHRlcihmID0+IG1vbWVudChkYXRlKS5pc1NhbWVPckFmdGVyKGYuZmlyc3RUZXJtLnN0YXJ0RGF0ZSkgJiYgbW9tZW50KGRhdGUpLmlzU2FtZU9yQmVmb3JlKGYuc2Vjb25kVGVybS5lbmREYXRlKSlbMF0gYXMgTW9ja0VEU0FjYWRlbWljWWVhcjtcclxuICAgICAgY2FzZSAnZW5fbmluJzpcclxuICAgICAgcmV0dXJuIG1vY2tKc29uRmlsZS5Ob3J0aEluZGlhLmZpbHRlcihmID0+IG1vbWVudChkYXRlKS5pc1NhbWVPckFmdGVyKGYuZmlyc3RUZXJtLnN0YXJ0RGF0ZSkgJiYgbW9tZW50KGRhdGUpLmlzU2FtZU9yQmVmb3JlKGYuc2Vjb25kVGVybS5lbmREYXRlKSlbMF0gYXMgTW9ja0VEU0FjYWRlbWljWWVhcjtcclxuICAgICAgY2FzZSAnc3YnOlxyXG4gICAgICB7XHJcbiAgICAgIHZhciBob2xpZGF5cyA9IFtdIGFzIE1vY2tFRFNEYXRlUmFuZ2VbXTtcclxuICAgICAgdmFyIGFkZFllYXIgPSBkYXRlLmdldE1vbnRoKCkgPj0gNjtcclxuICAgICAgXHJcbiAgICAgIHZhciBmaXJzdFRlcm1ZZWFyID0gYWRkWWVhciA/IGRhdGUuZ2V0RnVsbFllYXIoKSA6IGRhdGUuZ2V0RnVsbFllYXIoKSAtIDE7XHJcbiAgICAgIHZhciBzZWNvbmRUZXJtWWVhciA9IGFkZFllYXIgPyBkYXRlLmdldEZ1bGxZZWFyKCkgKyAxIDogZGF0ZS5nZXRGdWxsWWVhcigpO1xyXG5cclxuICAgICAgLy9UaGUgc3RhcnQgZGF0ZSBjYW4gYmUgaW4gdGhlIGxhc3Qgd2VlayBvZiB0aGUgcHJldmlvdXMgeWVhclxyXG4gICAgICAgdmFyIGZpcnN0VGVybVllYXJNb21lbnQgPSBtb21lbnQoZmlyc3RUZXJtWWVhci50b1N0cmluZygpLCBcIllZWVlcIik7XHJcbiAgICAgICB2YXIgc2Vjb25kVGVybVllYXJNb21lbnQgPSBtb21lbnQoc2Vjb25kVGVybVllYXIudG9TdHJpbmcoKSwgXCJZWVlZXCIpO1xyXG5cclxuICAgICAgIGlmKGZpcnN0VGVybVllYXJNb21lbnQud2VlaygpICE9IDEpXHJcbiAgICAgICB7XHJcbiAgICAgICAgZmlyc3RUZXJtWWVhck1vbWVudCA9IGZpcnN0VGVybVllYXJNb21lbnQuY2xvbmUoKS5hZGQoMSwgJ3dlZWsnKTtcclxuICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoc2Vjb25kVGVybVllYXJNb21lbnQud2VlaygpICE9IDEpXHJcbiAgICAgICB7XHJcbiAgICAgICAgc2Vjb25kVGVybVllYXJNb21lbnQgPSBzZWNvbmRUZXJtWWVhck1vbWVudC5jbG9uZSgpLmFkZCgxLCAnd2VlaycpO1xyXG4gICAgICAgfVxyXG5cclxuICAgICAgdmFyIHN0YXJ0Rmlyc3RUZXJtRGF0ZSA9IG1vbWVudChmaXJzdFRlcm1ZZWFyTW9tZW50LmNsb25lKCkpLndlZWsoMzIpLnN0YXJ0T2YoJ3dlZWsnKTtcclxuICAgICAgdmFyIGVuZEZpcnN0VGVybURhdGUgPSBtb21lbnQoZmlyc3RUZXJtWWVhck1vbWVudC5jbG9uZSgpKS53ZWVrKDUxKS5lbmRPZignd2VlaycpO1xyXG5cclxuICAgICAgdmFyIHN0YXJ0U2Vjb25kVGVybURhdGUgPSBtb21lbnQoc2Vjb25kVGVybVllYXJNb21lbnQuY2xvbmUoKSk7IC8vIGRvbid0IHNldCBhcyB0aGUgc3RhcnQgb2YgdGhlIHdlZWsgYmVjYXVzZSBpdCBjYW4gYmUgaW4gdGhlIHByZXZpb3VzIHllYXJcclxuICAgICAgdmFyIGVuZFNlY29uZFRlcm1EYXRlID0gbW9tZW50KHNlY29uZFRlcm1ZZWFyTW9tZW50LmNsb25lKCkpLndlZWsoMjUpLmVuZE9mKCd3ZWVrJyk7XHJcblxyXG4gICAgICBjb25zdCBmaXJzdFRlcm0gPSB7c3RhcnREYXRlOiBuZXcgRGF0ZShmaXJzdFRlcm1ZZWFyLCBzdGFydEZpcnN0VGVybURhdGUubW9udGgoKSwgc3RhcnRGaXJzdFRlcm1EYXRlLmRhdGUoKSkudG9EYXRlU3RyaW5nKCksIGVuZERhdGU6IG5ldyBEYXRlKGZpcnN0VGVybVllYXIsIGVuZEZpcnN0VGVybURhdGUubW9udGgoKSwgZW5kRmlyc3RUZXJtRGF0ZS5kYXRlKCkpLnRvRGF0ZVN0cmluZygpfTtcclxuICAgICAgY29uc3Qgc2Vjb25kVGVybSA9IHtzdGFydERhdGU6IG5ldyBEYXRlKHNlY29uZFRlcm1ZZWFyLCBzdGFydFNlY29uZFRlcm1EYXRlLm1vbnRoKCksIHN0YXJ0U2Vjb25kVGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKSwgZW5kRGF0ZTogbmV3IERhdGUoc2Vjb25kVGVybVllYXIsIGVuZFNlY29uZFRlcm1EYXRlLm1vbnRoKCksIGVuZFNlY29uZFRlcm1EYXRlLmRhdGUoKSkudG9EYXRlU3RyaW5nKCl9O1xyXG4gICAgICByZXR1cm4ge2ZpcnN0VGVybSwgc2Vjb25kVGVybSwgaG9saWRheXN9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRURTUGVyaW9kIHtcclxuICBwZXJpb2Q6IHN0cmluZztcclxuICB0ZXJtOiAnQVQnIHwgJ1NUJztcclxuICB5ZWFyOiBudW1iZXI7XHJcbiAgY29uc3RydWN0b3IgKHBlcmlvZFN0cmluZ09yU2Nob29sVGVybTogc3RyaW5nIHwgU2Nob29sTW9tZW50KSB7XHJcbiAgICBpZiAodHlwZW9mIHBlcmlvZFN0cmluZ09yU2Nob29sVGVybSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdGhpcy5wZXJpb2QgPSBwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm07XHJcbiAgICAgIHRoaXMudGVybSA9IHRoaXMucGVyaW9kLnN0YXJ0c1dpdGgoJ0hUJykgPyAnQVQnIDogJ1NUJztcclxuICAgICAgdGhpcy55ZWFyID0gcGFyc2VJbnQodGhpcy5wZXJpb2Quc3Vic3RyKDIpKTtcclxuICAgICAgaWYgKGlzTmFOKHRoaXMueWVhcikpIHRocm93IG5ldyBFcnJvciAoYEludmFsaWQgcGVyaW9kOiAke3RoaXMucGVyaW9kfWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3Qgc2Nob29sVGVybSA9IG5ldyBTY2hvb2xUZXJtKHBlcmlvZFN0cmluZ09yU2Nob29sVGVybSk7XHJcbiAgICAgIHRoaXMucGVyaW9kID0gKHNjaG9vbFRlcm0udGVybSA9PT0gJ0FUJyA/IFwiSFRcIiA6IFwiVlRcIikgKyBzY2hvb2xUZXJtLnllYXI7XHJcbiAgICAgIHRoaXMudGVybSA9IHNjaG9vbFRlcm0udGVybTtcclxuICAgICAgdGhpcy55ZWFyID0gc2Nob29sVGVybS55ZWFyO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IHNjaG9vbFRlcm0gKCkgOiBTY2hvb2xUZXJtIHtcclxuICAgIHJldHVybiBuZXcgU2Nob29sVGVybSh7XHJcbiAgICAgIGFjYWRlbWljWWVhcjogdGhpcy50ZXJtID09PSAnQVQnID9cclxuICAgICAgICBgJHt0aGlzLnllYXJ9LyR7dGhpcy55ZWFyICsgMX1gIDpcclxuICAgICAgICBgJHt0aGlzLnllYXItMX0vJHt0aGlzLnllYXJ9YCxcclxuICAgICAgdGVybTogdGhpcy50ZXJtXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGVyaW9kO1xyXG4gIH1cclxuXHJcbiAgdmFsdWVPZigpIHtcclxuICAgIHJldHVybiB0aGlzLnllYXIgKyBcIjpcIiArICh0aGlzLnRlcm0gPT09ICdTVCcgPyBcIjFcIiA6IFwiMlwiKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUpzb25EYXRlX29sZCAoanNvbkRhdGVTdHI6IHN0cmluZykgOiBEYXRlIHtcclxuICBjb25zdCBkYXRlID0gZGF0ZVRpbWVSZXZpdmVyKFwiXCIsIGpzb25EYXRlU3RyKTtcclxuICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlNPTiBkYXRlIHN0cmluZzogXCIgKyBqc29uRGF0ZVN0cik7XHJcbiAgcmV0dXJuIGRhdGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF2b2lkU2ltdWx0YW5vdXNDYWxsczxULEE+KG1ldGhvZDogKC4uLmFyZ3M6QVtdKT0+UHJvbWlzZTxUPikgOiAoLi4uYXJnczpBW10pPT5Qcm9taXNlPFQ+IHtcclxuICBsZXQgb25nb2luZ1Byb21pc2VzOiB7W2FyZ3NKc29uOiBzdHJpbmddOiBQcm9taXNlPFQ+fSA9IHt9O1xyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIGNvbnN0IGFyZ3NKc29uID0gSlNPTi5zdHJpbmdpZnkoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcclxuICAgIGlmICghb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXSkge1xyXG4gICAgICBvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihyZXN1bHQ9PntcclxuICAgICAgICBkZWxldGUgb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgSUNvdXJzZUVkaXRvckhvc3QgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3RcIjtcclxuaW1wb3J0IHsgQ291cnNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyByZWFkQmxvYkFzVGV4dCwgYWxsb3dDb3B5LCByZWFkQmxvYkFzRGF0YVVybCB9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBzaG93RXJyb3IsIEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gXCJrZWRiYWNrZW5kL2NsaWVudFwiO1xyXG5pbXBvcnQgeyBoYXNBY2Nlc3MgfSBmcm9tIFwiLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2xcIjtcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5cclxudHlwZSBDYWxsYmFjayA9ICgpID0+IHZvaWQ7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHRpdGxlOiBzdHJpbmcsXHJcbiAgYWN0aXZlUGFnZTogQmFubmVyTWVudUl0ZW0sXHJcbiAgY2FsbGJhY2tzPzogeyBbbWVudU5hbWU6IHN0cmluZ106IENhbGxiYWNrIH0sXHJcbiAgcm91dGVzOiB7IFttZW51TmFtZTogc3RyaW5nXTogc3RyaW5nIH0gJiB7IGZlZWRiYWNrOiBzdHJpbmcgfSxcclxuICBiYWNrZ3JvdW5kSW1hZ2U/OiBzdHJpbmcsXHJcbiAgaXNUZW1wbGF0ZT8sXHJcbiAgaG9zdD86IElDb3Vyc2VFZGl0b3JIb3N0LFxyXG4gIGNvdXJzZT86IENvdXJzZSxcclxuICBvcmlnQ291cnNlPzogQ291cnNlXHJcbn1cclxuXHJcbnR5cGUgQmFubmVyTWVudUl0ZW0gPVxyXG4gIFwiY291cnNlQnVpbGRlclwiIHxcclxuICBcInN0dWRlbnRQYWdlXCIgfFxyXG4gIFwidGVtcGxhdGVCdWlsZGVyXCIgfFxyXG4gIFwic3ViamVjdHNcIiB8XHJcbiAgXCJzY2hvb2xzXCI7XHJcblxyXG5jb25zdCBBZG1pbk1lbnVJdGVtcyA9IFtcclxuICB7IG5hbWU6IFwic2Nob29sc1wiLCB0ZXh0OiBMYFNrb2xvcmAsIHJvdXRlOiBcIi9zY2hvb2xzXCIgfSxcclxuICB7IG5hbWU6IFwic3ViamVjdHNcIiwgdGV4dDogTGDDhG1uZW5gLCByb3V0ZTogXCIvc3ViamVjdHNcIiB9LFxyXG4gIC8ve25hbWU6IFwidGVtcGxhdGVCdWlsZGVyXCIsIHRleHQ6IExgTWFsbGJ5Z2dhcmVuYCwgcm91dGU6IFwiL2NvdXJzZS10ZW1wbGF0ZXNcIn0sXHJcbl1cclxuXHJcbmNvbnN0IE5vbkFkbWluTWVudUl0ZW1zID0gW1xyXG4gIHsgbmFtZTogXCJjb3Vyc2VCdWlsZGVyXCIsIHRleHQ6IExgS3Vyc2J5Z2dhcmVuYCwgcm91dGU6IFwiL2NvdXJzZXMvbmV3XCIgfSxcclxuICB7IG5hbWU6IFwic3R1ZGVudFBhZ2VcIiwgdGV4dDogTGBFbGV2c2lkYWAsIHJvdXRlOiBcIlwiIH0sXHJcbiAgeyBuYW1lOiBcImZlZWRiYWNrXCIsIHRleHQ6IDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLWNvbW1lbnRpbmctb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4gRmVlZGJhY2s8L3NwYW4+LCByb3V0ZTogXCJodHRwczovL2tnLmt1bnNrYXBzcG9ydGVuLnNlL2t1cnNieWdnYXJlbi9cIiB9XHJcbl1cclxuXHJcblxyXG5hc3luYyBmdW5jdGlvbiBvbkRyb3BJbWFnZShldjogUmVhY3QuRHJhZ0V2ZW50PEhUTUxEaXZFbGVtZW50PiwgaG9zdDogSUNvdXJzZUVkaXRvckhvc3QsIGNvdXJzZTogQ291cnNlLCBvcmlnQ291cnNlOiBDb3Vyc2UpIHtcclxuICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGNvbnN0IGZpbGVzID0gZXYuZGF0YVRyYW5zZmVyLmZpbGVzO1xyXG4gIGxldCB1cmwgPSBudWxsO1xyXG4gIGNvbnN0IGl0ZW1zID0gQXJyYXkuZnJvbShldi5kYXRhVHJhbnNmZXIuaXRlbXMpO1xyXG4gIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCBmaWxlID0gZmlsZXNbMF07XHJcbiAgICBpZiAoZmlsZS5zaXplID4gMiAqIDEwMjQgKiAxMDI0KSB7XHJcbiAgICAgIHNob3dFcnJvcihMYEthbiBpbnRlIGxhZGRhIHVwcCBiaWxkZXIgc3TDtnJyZSDDpG4gMiBNQmApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvL3VybCA9IGF3YWl0IHJlYWRCbG9iQXNEYXRhVXJsKGZpbGUpO1xyXG4gICAgY29uc3QgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgZm9ybS5hcHBlbmQoXCJmaWxlc1wiLCBmaWxlKTtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmh0dHAuZmV0Y2goXHJcbiAgICAgICd3ZWItdXBsb2FkJyxcclxuICAgICAgJ3B1dCcsXHJcbiAgICAgIHt9LFxyXG4gICAgICB7fSxcclxuICAgICAge1xyXG4gICAgICAgIGJvZHk6IGZvcm1cclxuICAgICAgfSk7XHJcbiAgICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwKSB7XHJcbiAgICAgIHNob3dFcnJvcihMYEt1bmRlIGludGUgbGFkZGEgdXBwIGZpbGVuIHRpbGwgR29vZ2xlIFN0b3JhZ2VgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdXJsID0gYXdhaXQgcmVzLnRleHQoKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XHJcbiAgICAgIGlmIChpdGVtLnR5cGUubWF0Y2goJ150ZXh0L3VyaS1saXN0JykpIHtcclxuICAgICAgICAvLyBVUklcclxuICAgICAgICB1cmwgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGl0ZW0uZ2V0QXNTdHJpbmcocmVzb2x2ZSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmICh1cmwgPT0gbnVsbCkge1xyXG4gICAgc2hvd0Vycm9yKExgS3VuZGUgaW50ZSBoaXR0YSBuw6Vnb24gYmlsZCBpIGlubmVow6VsbGV0YCk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHNldENvdXJzZUltYWdlKGNvdXJzZSwgb3JpZ0NvdXJzZSwgaG9zdCwgdXJsKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldENvdXJzZUltYWdlKFxyXG4gIGNvdXJzZTogQ291cnNlLFxyXG4gIG9yaWdDb3Vyc2U6IENvdXJzZSxcclxuICBob3N0OiBJQ291cnNlRWRpdG9ySG9zdCxcclxuICB1cmw6IHN0cmluZ1xyXG4pIHtcclxuICBjb25zdCBpbWFnZUlkID0gY3JlYXRlVVVJRCgpO1xyXG4gIGhvc3QudXBkYXRlKHtcclxuICAgIGltYWdlSWQ6IHsgJHNldDogaW1hZ2VJZCB9LFxyXG4gICAgaW1hZ2VzOiB7XHJcbiAgICAgICRzZXQ6IFt7XHJcbiAgICAgICAgaWQ6IGltYWdlSWQsXHJcbiAgICAgICAgdXJsLFxyXG4gICAgICAgIGFjbDogW1xyXG4gICAgICAgICAgYHJvbGU6VVNFUjpSYCxcclxuICAgICAgICAgIGBzY2hvb2xSb2xlOiR7ZW52LmN1cnJlbnRVc2VyLnNjaG9vbH0vRU1QTE9ZRUU6U2BcclxuICAgICAgICBdLFxyXG4gICAgICAgICRtZXRhOiAnYWRkJ1xyXG4gICAgICB9XVxyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG4vKiBUaGlzIHZlcnNpb24gaGFkIHRoZSBidWcgdGhhdCBvbGQgaW1hZ2VzIHdlcmUgbm90IHJlcGxhY2VkLlxyXG5PbmUgY291cnNlIGF0IFVwcHNhbGEgY29udGFpbmVkIDEyIGltYWdlcy5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2V0Q291cnNlSW1hZ2VPbGQoXHJcbiAgY291cnNlOiBDb3Vyc2UsXHJcbiAgb3JpZ0NvdXJzZTogQ291cnNlLFxyXG4gIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0LFxyXG4gIHVybDogc3RyaW5nKVxyXG57XHJcbiAgaWYgKCFvcmlnQ291cnNlIHx8ICFvcmlnQ291cnNlLmltYWdlSWQpIHtcclxuICAgIGNvbnN0IGltYWdlSWQgPSBjcmVhdGVVVUlEKCk7XHJcbiAgICBob3N0LnVwZGF0ZSh7XHJcbiAgICAgIGltYWdlSWQ6IHsgJHNldDogaW1hZ2VJZCB9LFxyXG4gICAgICBpbWFnZXM6IHtcclxuICAgICAgICAkcHVzaDogW3tcclxuICAgICAgICAgIGlkOiBpbWFnZUlkLFxyXG4gICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgYWNsOiBjb3Vyc2UuaXNUZW1wbGF0ZSA/IFtcInJvbGU6VVNFUjpSXCJdIDogW1wicm9sZTpVU0VSOlJcIiwgYHNjaG9vbFJvbGU6JHtlbnYuY3VycmVudFVzZXIuc2Nob29sfS9FTVBMT1lFRTpTYF0sXHJcbiAgICAgICAgICAkbWV0YTogJ2FkZCdcclxuICAgICAgICB9XVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gVXBkYXRlIGV4aXN0aW5nIGltYWdlOlxyXG4gICAgY29uc3QgaW1nSWR4ID0gY291cnNlLmltYWdlcy5maW5kSW5kZXgoaW1nID0+IGltZy5pZCA9PT0gY291cnNlLmltYWdlSWQpO1xyXG4gICAgaWYgKGltZ0lkeCA+PSAwKSB7XHJcbiAgICAgIGNvbnN0IGltYWdlRW50aXR5ID0gY291cnNlLmltYWdlc1tpbWdJZHhdO1xyXG4gICAgICBpZiAoY291cnNlLmlzVGVtcGxhdGUpIHtcclxuICAgICAgICAvLyBUZW1wbGF0ZXM6IFVwZGF0ZSB0aGUgdGVtcGxhdGUgaW1hZ2UgY29udGVudDpcclxuICAgICAgICBob3N0LnVwZGF0ZSh7XHJcbiAgICAgICAgICBpbWFnZXM6IHtcclxuICAgICAgICAgICAgJHNwbGljZTogW1tpbWdJZHgsIDEsIHtcclxuICAgICAgICAgICAgICAuLi5pbWFnZUVudGl0eSxcclxuICAgICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgICAgJG1ldGE6ICd1cGRhdGUnXHJcbiAgICAgICAgICAgIH1dXVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gUmVhbCBjb3Vyc2VzOiBSZXBsYWNlIHdpdGggYSBuZXcgaW1hZ2VcclxuICAgICAgICBjb25zdCBpbWFnZUlkID0gY3JlYXRlVVVJRCgpO1xyXG4gICAgICAgIGhvc3QudXBkYXRlKHtcclxuICAgICAgICAgIGltYWdlSWQ6IHsgJHNldDogaW1hZ2VJZCB9LFxyXG4gICAgICAgICAgaW1hZ2VzOiB7XHJcbiAgICAgICAgICAgICRzcGxpY2U6IFtbaW1nSWR4LCAxLCB7XHJcbiAgICAgICAgICAgICAgaWQ6IGltYWdlSWQsXHJcbiAgICAgICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgICAgIGFjbDogW1xyXG4gICAgICAgICAgICAgICAgYHJvbGU6VVNFUjpSYCxcclxuICAgICAgICAgICAgICAgIGBzY2hvb2xSb2xlOiR7ZW52LmN1cnJlbnRVc2VyLnNjaG9vbH0vRU1QTE9ZRUU6U2BcclxuICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICRtZXRhOiAnYWRkJ1xyXG4gICAgICAgICAgICB9XV1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzaG93RXJyb3IoTGBLdW5kZSBpbnRlIHVwcGRhdGVyYSBiaWxkZW4uYCk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiovXHJcblxyXG5leHBvcnQgY29uc3QgQ291cnNlQmFubmVyID0gKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gIGNvbnN0IHsgdGl0bGUsIGlzVGVtcGxhdGUsIGhvc3QsIGNvdXJzZSwgb3JpZ0NvdXJzZSwgYmFja2dyb3VuZEltYWdlLCBhY3RpdmVQYWdlIH0gPSBwcm9wcztcclxuICBjb25zdCBpc0FkbWluID0gZW52LmN1cnJlbnRVc2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSBcIkFETUlOXCIpO1xyXG4gIGxldCBtZW51SXRlbXMgPSBOb25BZG1pbk1lbnVJdGVtcztcclxuICBpZiAoaXNBZG1pbikgbWVudUl0ZW1zID0gQWRtaW5NZW51SXRlbXMuY29uY2F0KG1lbnVJdGVtcyk7XHJcblxyXG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyIHN2LWNvbHVtbi0xMlwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LXNjcmlwdC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICB7YmFja2dyb3VuZEltYWdlICYmIDxzdHlsZT57YFxyXG4gICAgICAgIC5wYWdlSGVhZGVyIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnJHtiYWNrZ3JvdW5kSW1hZ2V9JykgIWltcG9ydGFudDtcclxuICAgICAgICB9XHJcbiAgICAgIGB9PC9zdHlsZT59XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlSGVhZGVyXCJcclxuICAgICAgICAgIG9uRHJhZ092ZXI9e2NvdXJzZSAmJiBhbGxvd0NvcHl9XHJcbiAgICAgICAgICBvbkRyb3A9e2NvdXJzZSAmJiAoZXYgPT4gb25Ecm9wSW1hZ2UoZXYsIGhvc3QsIGNvdXJzZSwgb3JpZ0NvdXJzZSkpfT5cclxuICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICA8aDE+e3RpdGxlfTwvaDE+XHJcbiAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbnNGaWVsZFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbnNDb250YWluZXJcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj48L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naG9yaXpvbnRhbE1lbnUnPlxyXG4gICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICB7bWVudUl0ZW1zLm1hcChpdGVtID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogYWN0aXZlUGFnZSA9PT0gaXRlbS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBwcm9wcy5jYWxsYmFja3MgJiYgcHJvcHMuY2FsbGJhY2tzW2l0ZW0ubmFtZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgZ2l2ZW5Sb3V0ZTogKHByb3BzLnJvdXRlcyAmJiBwcm9wcy5yb3V0ZXNbaXRlbS5uYW1lXSksXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFJvdXRlOiBpdGVtLnJvdXRlXHJcbiAgICAgICAgICAgICAgICAgIH0pKS5maWx0ZXIoeCA9PiB4LmNhbGxiYWNrIHx8IHguZGVmYXVsdFJvdXRlIHx8IHguZ2l2ZW5Sb3V0ZSkubWFwKCh7IGl0ZW0sIGlzQWN0aXZlLCBjYWxsYmFjaywgZGVmYXVsdFJvdXRlLCBnaXZlblJvdXRlIH0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPGxpXHJcbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e2l0ZW0ubmFtZX1cclxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17aXNBY3RpdmUgPyBcImFjdGl2ZVBhZ2VcIiA6IFwiXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtjYWxsYmFja31cclxuICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7Y2FsbGJhY2sgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA8YT57aXRlbS50ZXh0fTwvYT4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Um91dGUgfHwgZ2l2ZW5Sb3V0ZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZW5Sb3V0ZSB8fCAvXmh0dHBbc11cXDpcXC9cXC8vaS50ZXN0KGRlZmF1bHRSb3V0ZSkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17Z2l2ZW5Sb3V0ZSB8fCBkZWZhdWx0Um91dGV9PntpdGVtLnRleHR9PC9hPiA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz17ZGVmYXVsdFJvdXRlfT57aXRlbS50ZXh0fTwvTGluaz4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxhPntpdGVtLnRleHR9PC9hPn1cclxuICAgICAgICAgICAgICAgICAgICA8L2xpPjtcclxuICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG59XHJcbiIsImltcG9ydCB7IENvbGxlY3Rpb24sIEVtaXR0ZXIsIFZhbHVlIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgVGFzayB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgZmxhdHRlbiwgZGlzdGluY3QgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFdpdGhHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5cclxuLyoqIENvdXJzZSAqL1xyXG5pbnRlcmZhY2UgT3JkZXJEZWZpbmluZ0RvYyB7XHJcbiAga25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXI/OiBzdHJpbmdbXSAgIC8vIENvdXJzZVxyXG4gIGNlbnRyYWxDb250ZW50T3JkZXI/OiBzdHJpbmdbXSAgICAgICAgICAvLyBDb3Vyc2VcclxuICBhYmlsaXRpZXNPcmRlcj86IHN0cmluZ1tdICAgICAgICAgICAgICAgLy8gQ291cnNlICsgU3ViamVjdFxyXG59XHJcblxyXG4vKiogQ291cnNlLCBDb3Vyc2VJbnN0YW5jZSwgVGFzaywgTGVhcm5pbmdHb2Fsc0NvbnRlbnQgb3IgQ291cnNlQmxvY2sgKi9cclxuZXhwb3J0IGludGVyZmFjZSBSZXF1aXJlbWVudHNDb250YWluaW5nRG9jIHtcclxuICB0YWdzOiBzdHJpbmdbXTsgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ291cnNlICsgQ291cnNlSW5zdGFuY2UsIFRhc2tcclxuICBjZW50cmFsQ29udGVudD86IHtpZDogc3RyaW5nfVtdOyAgICAgICAgLy8gQ291cnNlICsgTGVhcm5pbmdHb2Fsc0NvbnRlbnQgKyBDb3Vyc2VCbG9jayArIFRhc2tcclxuICBrbm93bGVkZ2VSZXF1aXJlbWVudHM/OiB7aWQ6IHN0cmluZ31bXTsgLy8gQ291cnNlICsgTGVhcm5pbmdHb2Fsc0NvbnRlbnQgKyBDb3Vyc2VCbG9jayArIFRhc2tcclxuICBhYmlsaXRpZXM/OiB7aWQ6IHN0cmluZ31bXTsgLy8gQ291cnNlLCBMZWFybmluZ0dvYWxzQ29udGVudCwgQ291cnNlQmxvY2ssIFRhc2tcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9yZGVyZWREb2NzPFQgZXh0ZW5kcyB7aWQ6IHN0cmluZ30+KGRvY3M/OiBUW10sIG9yZGVyPzogc3RyaW5nW10sIHthcHBlbmRMZWZ0b3ZlcnN9ID0ge2FwcGVuZExlZnRvdmVyczpmYWxzZX0pIHtcclxuICAvLyBNYXJrIGRvYyBJRHMgdGhhdCB3aGVyZSBwcmVzZW50IGluIGdpdmVuICdvcmRlcicgYXJyYXkuXHJcbiAgLy8gV2lsbCBiZSB1c2VkIHRvIGZpbmQgbGVmdC1vdmVycyB0aGF0IHdlcmUgbm90IHByZXNlbnQgaW4gdGhlICdvcmRlcicgYXJyYXkuXHJcbiAgY29uc3QgbWFya2VkRG9jczoge1tpZDogc3RyaW5nXTogdHJ1ZX0gPSB7fTtcclxuXHJcbiAgaWYgKCFkb2NzIHx8ICFvcmRlcikge1xyXG4gICAgLy8gU3BlY2lhbCBjYXNlOiBubyBkb2NzIG9yIG5vIG9yZGVyLiBEb24ndCBmYWlsLiBKdXN0IHJldHVybiBkb2NzIGFzIGlzLlxyXG4gICAgcmV0dXJuIGRvY3M7XHJcbiAgfVxyXG5cclxuICAvLyBNYXAgZ2l2ZW4gJ29yZGVyJyBhcnJheSB0byBjb3JyZXNwb25kaW5nIGRvY3MuIEFsc28gbWFyayBpbiBtYXJrZWREb2NzLlxyXG4gIGNvbnN0IHJlc3VsdCA9IChkb2NzICYmIG9yZGVyID9cclxuICAgIG9yZGVyLm1hcChpZCA9PiB7XHJcbiAgICAgIG1hcmtlZERvY3NbaWRdID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIGRvY3MuZmluZChkb2MgPT4gZG9jLmlkID09PSBpZCk7XHJcbiAgICB9KS5maWx0ZXIoZG9jID0+ICEhZG9jKSA6XHJcbiAgICBkb2NzKTtcclxuXHJcbiAgaWYgKGFwcGVuZExlZnRvdmVycykgeyAgICAgIFxyXG4gICAgLy8gSWYgYW55IGxlZnRvdmVycyBhcmUgdGhlcmUsIGNvbmNhdCB0aGVtIGF0IHRoZSBlbmQ6XHJcbiAgICBjb25zdCBsZWZ0T3ZlcnMgPSBkb2NzLmZpbHRlcihkb2MgPT4gIW1hcmtlZERvY3NbZG9jLmlkXSk7XHJcbiAgICByZXR1cm4gcmVzdWx0LmNvbmNhdChsZWZ0T3ZlcnMpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVSZXF1aXJlbWVudE9yZGVyPFQgZXh0ZW5kcyBSZXF1aXJlbWVudHNDb250YWluaW5nRG9jPihvYmo6IFQsIG9yZGVyRGVmaW5lcj86IE9yZGVyRGVmaW5pbmdEb2MpOiBWYWx1ZTxUPiB7XHJcbiAgbGV0IG9yZGVyRGVmaW5pbmdEb2NPYnNlcnZhYmxlOiBWYWx1ZTxPcmRlckRlZmluaW5nRG9jW10+O1xyXG4gIGlmIChvcmRlckRlZmluZXIpIHtcclxuICAgIC8vIFVzZXIgcHJvdmlkZWQgdGhlIG9yZGVyRGVmaW5pbmcgZG9jICh1c2UgY2FzZSBpcyB3aGVuIG9iaiBpcyBhIENvdXJzZSBvciBTdWJqZWN0LCB3aGljaCBjb250YWlucyBpdHMgb3JkZXIgYnkgaXRzZWxmLiBVc2VyIHRoZW4gcHJvdmlkZXMgdGhlIENvdXJzZSBvciBTdWJqZWN0IGluIGJvdGggYXJncylcclxuICAgIG9yZGVyRGVmaW5pbmdEb2NPYnNlcnZhYmxlID0gbmV3IEVtaXR0ZXIoW29yZGVyRGVmaW5lcl0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBjb3Vyc2VDb2RlcyA9IG9iai50YWdzLmZpbHRlcih0YWcgPT4gdGFnLnN0YXJ0c1dpdGgoXCJjb3Vyc2U6XCIpKTtcclxuICAgIGlmIChjb3Vyc2VDb2Rlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIG5ldyBFbWl0dGVyKG9iaik7IC8vIE5vIGNvdXJzZSB0YWdzLiBOb3QgcG9zc2libGUgdG8gcmVzb2x2ZSBvcmRlci5cclxuICAgIH1cclxuICAgIG9yZGVyRGVmaW5pbmdEb2NPYnNlcnZhYmxlID0gZGIuY291cnNlcy50YWdzKC4uLmNvdXJzZUNvZGVzKS50b1ZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb3JkZXJEZWZpbmluZ0RvY09ic2VydmFibGUubWFwKG9yZGVySG9sZGVycyA9PiB7XHJcbiAgICBjb25zdCBhYmlsaXRpZXNPcmRlciA9IGZsYXR0ZW4ob3JkZXJIb2xkZXJzLm1hcChvcmRlckhvbGRlciA9PiBvcmRlckhvbGRlci5hYmlsaXRpZXNPcmRlciB8fCBbXSkpO1xyXG4gICAgY29uc3QgY2NPcmRlciA9IGZsYXR0ZW4ob3JkZXJIb2xkZXJzLm1hcChvcmRlckhvbGRlciA9PiBvcmRlckhvbGRlci5jZW50cmFsQ29udGVudE9yZGVyIHx8IFtdKSk7XHJcbiAgICBjb25zdCBrck9yZGVyID0gZmxhdHRlbihvcmRlckhvbGRlcnMubWFwKG9yZGVySG9sZGVyID0+IG9yZGVySG9sZGVyLmtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyIHx8IFtdKSk7XHJcbiAgICBjb25zdCBvYmpDbG9uZSA9IE9iamVjdC5hc3NpZ24oe30sIG9iaik7XHJcbiAgICBpZiAob2JqQ2xvbmUuYWJpbGl0aWVzKSBvYmpDbG9uZS5hYmlsaXRpZXMgPSBnZXRPcmRlcmVkRG9jcyhvYmouYWJpbGl0aWVzLCBhYmlsaXRpZXNPcmRlcik7XHJcbiAgICBpZiAob2JqQ2xvbmUuY2VudHJhbENvbnRlbnQpIG9iakNsb25lLmNlbnRyYWxDb250ZW50ID0gZ2V0T3JkZXJlZERvY3Mob2JqLmNlbnRyYWxDb250ZW50LCBjY09yZGVyKTtcclxuICAgIGlmIChvYmpDbG9uZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMpIG9iakNsb25lLmtub3dsZWRnZVJlcXVpcmVtZW50cyA9IGdldE9yZGVyZWREb2NzKG9iai5rbm93bGVkZ2VSZXF1aXJlbWVudHMsIGtyT3JkZXIpO1xyXG4gICAgcmV0dXJuIG9iakNsb25lO1xyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRm9ybUZpZWxkIH0gZnJvbSAnLi9mb3JtLWZpZWxkJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgbGFiZWw6IGFueTtcclxuICBpZDogc3RyaW5nO1xyXG4gIHZhbHVlOiBzdHJpbmc7XHJcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XHJcbiAgYXV0b0ZvY3VzPzogYm9vbGVhbjtcclxuICByb3dzPzogbnVtYmVyO1xyXG4gIGNoaWxkcmVuPztcclxuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUZXh0QXJlYUZvcm1GaWVsZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxGb3JtRmllbGQgbGFiZWw9e3RoaXMucHJvcHMubGFiZWx9IGlkPXt0aGlzLnByb3BzLmlkfT5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDx0ZXh0YXJlYSBhdXRvRm9jdXM9e3RoaXMucHJvcHMuYXV0b0ZvY3VzfSBpZD17dGhpcy5wcm9wcy5pZH0gY29scz17MzV9IHJvd3M9e3RoaXMucHJvcHMucm93cyB8fCA1fSB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5wcm9wcy5vbkNoYW5nZShldi50YXJnZXQudmFsdWUpfVxyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlaG9sZGVyfSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICB7ISF0aGlzLnByb3BzLmNoaWxkcmVuICYmIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cclxuICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvRm9ybUZpZWxkPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbiIsInZhciBzdGFjayA9IFtdO1xyXG52YXIgY3VycmVudEZpYmVyID0gbnVsbDtcclxudmFyIHByb3ZpZGVycyA9IFtmdW5jdGlvbiAoKSB7IHJldHVybiBjdXJyZW50RmliZXI7IH1dO1xyXG5mdW5jdGlvbiBwdXNoRmliZXIoZmliZXIpIHtcclxuICAgIHN0YWNrLnB1c2goY3VycmVudEZpYmVyKTtcclxuICAgIGN1cnJlbnRGaWJlciA9IGZpYmVyO1xyXG59XHJcbmZ1bmN0aW9uIHBvcEZpYmVyKCkge1xyXG4gICAgY3VycmVudEZpYmVyID0gc3RhY2sucG9wKCk7XHJcbn1cclxuZXhwb3J0IHZhciBGaWJlckNvbnRleHQgPSB7XHJcbiAgICBnZXQgY3VycmVudCgpIHsgcmV0dXJuIGN1cnJlbnRGaWJlcjsgfSxcclxuICAgIC8qcnVuOiBmdW5jdGlvbiByZXJ1bjxSPihmaWJlcjogRmliZXIsIGZuOiAoKT0+Uik6IFIgfCBQcm9taXNlPFI+IHtcclxuICAgICAgcHVzaEZpYmVyKGZpYmVyKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZuKCkpO1xyXG4gICAgICB9IGNhdGNoIChwKSB7XHJcbiAgICAgICAgaWYgKHAgJiYgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgcmV0dXJuIHAudGhlbigoKT0+cmVydW4oZmliZXIsIGZuKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgcG9wRmliZXIoKTtcclxuICAgICAgfVxyXG4gICAgfSwqL1xyXG4gICAgYWRkUHJvdmlkZXI6IGZ1bmN0aW9uIChnZXRDdXJyZW50RmliZXIpIHtcclxuICAgICAgICBwcm92aWRlcnMucHVzaChnZXRDdXJyZW50RmliZXIpO1xyXG4gICAgICAgIHNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzKCk7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlUHJvdmlkZXI6IGZ1bmN0aW9uIChnZXRDdXJyZW50RmliZXIpIHtcclxuICAgICAgICBwcm92aWRlcnMgPSBwcm92aWRlcnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwICE9PSBnZXRDdXJyZW50RmliZXI7IH0pO1xyXG4gICAgICAgIHNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzKCk7XHJcbiAgICB9XHJcbn07XHJcbmZ1bmN0aW9uIHNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzKCkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpYmVyQ29udGV4dCwgXCJjdXJyZW50XCIsIHtcclxuICAgICAgICBnZXQ6IHByb3ZpZGVycy5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHAoKSB8fCBjKCk7IH07IH0pLFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJVc2UgRmliZXJDb250ZXh0LnB1c2goKSB0byBjaGFuZ2UgY3VycmVudCBmaWJlclwiKTsgfVxyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmliZXItY29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBDb3Vyc2VJbnN0YW5jZSB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xyXG5pbXBvcnQgeyBkaXN0aW5jdCwgZmxhdHRlbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdWJqZWN0Q29kZXMgKHRhZ3M6IHN0cmluZ1tdKSB7XHJcbiAgcmV0dXJuIGRpc3RpbmN0KCh0YWdzIHx8wqBbXSlcclxuICAgIC5maWx0ZXIodGFnID0+IHRhZy5zdGFydHNXaXRoKFwic3ViOlwiKSlcclxuICAgIC5tYXAodGFnID0+IHRhZy5zdWJzdHIoXCJzdWI6XCIubGVuZ3RoKSlcclxuICApOztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaG9vbFllYXJzKHRhZ3M6IHN0cmluZ1tdKSB7XHJcbiAgcmV0dXJuIGRpc3RpbmN0KCh0YWdzIHx8IFtdKVxyXG4gICAgLmZpbHRlcih0YWcgPT4gdGFnLnN0YXJ0c1dpdGgoXCJjb3Vyc2U6XCIpKVxyXG4gICAgLm1hcCh0YWcgPT4gdGFnLnN1YnN0cih0YWcuaW5kZXhPZihcInxcIikgKyAxKSkgLy8gU2Nob29sIHllYXIgaXMgY29uY2F0ZW5hdGVkIGFzIHBpcGUgKyBzY2hvb2x5ZWFyLiBFeGFtcGxlOiBcIkdSR1JGWVMwMXw0LTZcIlxyXG4gICk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQ291cnNlSW5zdGFuY2VUYWdzICh0YWdzOiBzdHJpbmdbXSwgc3ViamVjdENvZGVzOiBzdHJpbmdbXSwgc2Nob29sWWVhcnM6IHN0cmluZ1tdKSB7XHJcbiAgY29uc3Qgb3RoZXJUYWdzID0gKHRhZ3MgfHwgW10pLmZpbHRlcih0YWcgPT4gIXRhZy5zdGFydHNXaXRoKFwiY291cnNlOlwiKSAmJiAhdGFnLnN0YXJ0c1dpdGgoXCJzdWI6XCIpKTtcclxuICBjb25zdCBzdWJqZWN0VGFncyA9IHN1YmplY3RDb2Rlcy5tYXAoc3ViID0+IFwic3ViOlwiICsgc3ViKTtcclxuICBjb25zdCBjb3Vyc2VUYWdzID0gZmxhdHRlbihcclxuICAgICAgICBzdWJqZWN0Q29kZXMubWFwKHN1YiA9PlxyXG4gICAgICAgICAgc2Nob29sWWVhcnMubWFwKHNjaG9vbFllYXIgPT5cclxuICAgICAgICAgICAgXCJjb3Vyc2U6XCIgKyBzdWIgKyBcInxcIiArIHNjaG9vbFllYXIpKSk7XHJcbiAgcmV0dXJuIG90aGVyVGFnc1xyXG4gICAgLmNvbmNhdChzdWJqZWN0VGFncylcclxuICAgIC5jb25jYXQoY291cnNlVGFncyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlVGFnc0Zyb21TY2hvb2xZZWFycyh0YWdzOiBzdHJpbmdbXSwgc2Nob29sWWVhcnM6IHN0cmluZ1tdKSB7XHJcbiAgLy9zY2hvb2xZZWFycyA9IHNjaG9vbFllYXJzLm1hcChhZnRlckNvbG9uKTtcclxuICBjb25zdCBzdWJqZWN0Q29kZXMgPSBnZXRTdWJqZWN0Q29kZXModGFncyk7XHJcbiAgcmV0dXJuIGNvbXB1dGVDb3Vyc2VJbnN0YW5jZVRhZ3ModGFncywgc3ViamVjdENvZGVzLCBzY2hvb2xZZWFycyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlVGFnc0Zyb21TdWJqZWN0Q29kZXModGFnczogc3RyaW5nW10sIHN1YmplY3RDb2Rlczogc3RyaW5nW10pIHtcclxuICAvL3N1YmplY3RDb2RlcyA9IHN1YmplY3RDb2Rlcy5tYXAoYWZ0ZXJDb2xvbik7XHJcbiAgY29uc3Qgc2Nob29sWWVhcnMgPSBnZXRTY2hvb2xZZWFycyh0YWdzKTtcclxuICByZXR1cm4gY29tcHV0ZUNvdXJzZUluc3RhbmNlVGFncyh0YWdzLCBzdWJqZWN0Q29kZXMsIHNjaG9vbFllYXJzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYWZ0ZXJDb2xvbiAoc3RyOiBzdHJpbmcpIHtcclxuICBjb25zdCBwQ29sb24gPSBzdHIuaW5kZXhPZignOicpO1xyXG4gIHJldHVybiBwQ29sb24gPj0gMCA/XHJcbiAgICBzdHIuc3Vic3RyKHBDb2xvbiArIDEpIDpcclxuICAgIHN0cjtcclxufVxyXG4iLCJpbXBvcnQgeyBEb2N1bWVudCwgQ291cnNlLCBLbm93bGVkZ2VSZXF1aXJlbWVudCwgQ291cnNlTW9kdWxlLCBUYXNrLCBTb2Z0RG9jdW1lbnRBY2Nlc3MgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGZsYXR0ZW4sIEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcclxuaW1wb3J0IHsgV2l0aEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IGdldEVtYWlsRnJvbURvY0FjY2VzcyB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMoY291cnNlOiBDb3Vyc2UpIHtcclxuICBjb25zdCB1bmNvdmVyZWRSZXF1aXJlbWVudHMgPSBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzLnJlZHVjZSgocmVzdWx0LCBpdGVtKSA9PiB7XHJcbiAgICByZXN1bHRbaXRlbS5pZF0gPSBpdGVtO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9LCB7fSBhcyB7IFtpZDogc3RyaW5nXTogS25vd2xlZGdlUmVxdWlyZW1lbnQgfSk7XHJcblxyXG4gIGNvdXJzZS50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xyXG4gICAgdGFzay5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZm9yRWFjaChrciA9PiB7XHJcbiAgICAgIGRlbGV0ZSB1bmNvdmVyZWRSZXF1aXJlbWVudHNba3IuaWRdO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBPYmplY3Qua2V5cyh1bmNvdmVyZWRSZXF1aXJlbWVudHMpLm1hcChpZCA9PiB1bmNvdmVyZWRSZXF1aXJlbWVudHNbaWRdKTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZXFzUmVmZXJlbmNpbmdEb2Mge1xyXG4gIGtub3dsZWRnZVJlcXVpcmVtZW50czogQXJyYXk8e2lkOiBzdHJpbmd9PlxyXG4gIGFiaWxpdGllczogQXJyYXk8e2lkOiBzdHJpbmd9PlxyXG4gIGNlbnRyYWxDb250ZW50OiBBcnJheTx7aWQ6IHN0cmluZ30+XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJZHNOb3RDb3ZlcmVkQnlUYXNrcyhjb3Vyc2U6IENvdXJzZSkgOiB7W2lkOiBzdHJpbmddOiB0cnVlfSB7XHJcbiAgcmV0dXJuIGdldElkc05vdENvdmVyZWRCeVJlcVJlZmVyZW5jaW5nRG9jcyhcclxuICAgIFtjb3Vyc2UgYXMgV2l0aEdyYXBoczxDb3Vyc2UsIFwiYWJpbGl0aWVzXCIgfCBcImNlbnRyYWxDb250ZW50XCIgfCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiPl0sXHJcbiAgICBjb3Vyc2UudGFza3MgYXMgV2l0aEdyYXBoczxUYXNrLCBcImFiaWxpdGllc1wiIHwgXCJjZW50cmFsQ29udGVudFwiIHwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIj5bXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJZHNOb3RDb3ZlcmVkQnlSZXFSZWZlcmVuY2luZ0RvY3MoXHJcbiAgdGVtcGxhdGVzOiBSZXFzUmVmZXJlbmNpbmdEb2NbXSxcclxuICBkb2NzQmVpbmdDaGVja2VkOiBSZXFzUmVmZXJlbmNpbmdEb2NbXSkgOiB7W2lkOiBzdHJpbmddOiB0cnVlfVxyXG57XHJcbiAgY29uc3QgdW5jb3ZlcmVkSWRzID0ge307XHJcbiAgLy8gMS4gTWFyayB0aGUgaWRzIG9mIGFsbCBrbm93bGVkZ2UgcmVxdWlyZW1lbnRzLCBhYmlsaXRpZXMgYW5kIGNlbnRyYWwgY29udGVudCBmb3IgdGhpcyBjb3Vyc2U6XHJcbiAgdGVtcGxhdGVzLmZvckVhY2goY291cnNlID0+IHtcclxuICAgIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZm9yRWFjaChyID0+IHtcclxuICAgICAgdW5jb3ZlcmVkSWRzW3IuaWRdID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgY291cnNlLmFiaWxpdGllcy5mb3JFYWNoKGEgPT4ge1xyXG4gICAgICB1bmNvdmVyZWRJZHNbYS5pZF0gPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICBjb3Vyc2UuY2VudHJhbENvbnRlbnQuZm9yRWFjaChjYyA9PiB7XHJcbiAgICAgIHVuY292ZXJlZElkc1tjYy5pZF0gPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgLy8gMi4gTGlzdCBhbGwgdGFza3MgYW5kIHVubWFyayBhbGwgaWRzIHRoYXQgdGhleSByZWZlciB0b1xyXG4gIGRvY3NCZWluZ0NoZWNrZWQuZm9yRWFjaChkb2MgPT4ge1xyXG4gICAgZG9jLmtub3dsZWRnZVJlcXVpcmVtZW50cy5mb3JFYWNoKGtyID0+IHtcclxuICAgICAgZGVsZXRlIHVuY292ZXJlZElkc1trci5pZF07XHJcbiAgICB9KTtcclxuICAgIGRvYy5hYmlsaXRpZXMuZm9yRWFjaChhID0+IHtcclxuICAgICAgZGVsZXRlIHVuY292ZXJlZElkc1thLmlkXTtcclxuICAgIH0pO1xyXG4gICAgZG9jLmNlbnRyYWxDb250ZW50LmZvckVhY2goY2MgPT4ge1xyXG4gICAgICBkZWxldGUgdW5jb3ZlcmVkSWRzW2NjLmlkXTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIHJldHVybiB1bmNvdmVyZWRJZHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzYW5pdHlDaGVjayAoY291cnNlOiBDb3Vyc2UpIHtcclxuICBmdW5jdGlvbiBoYXNEdXBsaWNhdGVUYXNrcyhjb3Vyc2U6IENvdXJzZSkge1xyXG4gICAgY29uc3QgdGFza0lkczoge1tpZDpzdHJpbmddOiBib29sZWFufSA9IHt9O1xyXG4gICAgcmV0dXJuIGZsYXR0ZW4oY291cnNlLm1vZHVsZXMubWFwKG1vZHVsZSA9PiBtb2R1bGUudGFza0lkcy5tYXAodGFza0lkID0+IHtcclxuICAgICAgaWYgKHRhc2tJZHNbdGFza0lkXSkge1xyXG4gICAgICAgIGNvbnN0IHRhc2sgPSBjb3Vyc2UudGFza3MuZmluZCh0ID0+IHQuaWQgPT09IHRhc2tJZCk7XHJcbiAgICAgICAgcmV0dXJuIExgU2FtbWEgdXBwZ2lmdCBmw7ZyZWtvbW1lciBmbGVyYSBnw6VuZ2VyOiBcIiR7dGFzay5uYW1lfVwiYDtcclxuICAgICAgfVxyXG4gICAgICB0YXNrSWRzW3Rhc2tJZF0gPSB0cnVlO1xyXG4gICAgfSkuZmlsdGVyKHggPT4geCkpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRhc2tzV2l0aFNhbWVVcmwoY291cnNlOiBDb3Vyc2UpIHtcclxuICAgIGNvbnN0IHRhc2tVcmxzOiB7W3VybDpzdHJpbmddOiBUYXNrfSA9IHt9O1xyXG4gICAgcmV0dXJuIGNvdXJzZS50YXNrcy5tYXAodGFzayA9PiB7XHJcbiAgICAgIGlmICh0YXNrLnVybCkge1xyXG4gICAgICAgIGlmICh0YXNrVXJsc1t0YXNrLnVybF0pIHtcclxuICAgICAgICAgIHJldHVybiBMYFR2w6UgdXBwZ2lmdGVyIHBla2FyIHDDpSBzYW1tYSBVUkw6IFwiJHt0YXNrVXJsc1t0YXNrLnVybF0ubmFtZX1cIiBzYW10IFwiJHt0YXNrLm5hbWV9XCJgO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0YXNrVXJsc1t0YXNrLnVybF0gPSB0YXNrO1xyXG4gICAgICB9XHJcbiAgICB9KS5maWx0ZXIoeCA9PiB4KTsgIFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFzRW1wdHlNb2R1bGVOYW1lcyhjb3Vyc2U6IENvdXJzZSkge1xyXG4gICAgcmV0dXJuIGNvdXJzZS5tb2R1bGVzLnNvbWUgKG1vZHVsZSA9PiBtb2R1bGUubmFtZSA9PT0gXCJcIikgJiZcclxuICAgICAgTGBEZXQgZmlubnMgbWluc3QgZW4gbW9kdWwgdXRhbiBhbmdpdmV0IG5hbW5gO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFzRHVwbGljYXRlTW9kdWxlTmFtZXMoY291cnNlOiBDb3Vyc2UpIHtcclxuICAgIGNvbnN0IG1vZHVsZU5hbWVzOiB7W25hbWU6IHN0cmluZ106IHRydWV9ID0ge307XHJcbiAgICByZXR1cm4gY291cnNlLm1vZHVsZXMubWFwKG1vZHVsZSA9PiB7XHJcbiAgICAgIGlmIChtb2R1bGUubmFtZSAmJiBtb2R1bGVOYW1lc1ttb2R1bGUubmFtZV0pIHtcclxuICAgICAgICByZXR1cm4gTGBNb2R1bGVuIG1lZCBuYW1uICR7bW9kdWxlLm5hbWV9IGbDtnJla29tbWVyIGZsZXJhIGfDpW5nZXJgO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChtb2R1bGUubmFtZSkgbW9kdWxlTmFtZXNbbW9kdWxlLm5hbWVdID0gdHJ1ZTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBjb25zdCBjaGVja3MgPSBmbGF0dGVuKFtcclxuICAgIGhhc0R1cGxpY2F0ZVRhc2tzKGNvdXJzZSksXHJcbiAgICB0YXNrc1dpdGhTYW1lVXJsKGNvdXJzZSksXHJcbiAgICBoYXNFbXB0eU1vZHVsZU5hbWVzKGNvdXJzZSksXHJcbiAgICBoYXNEdXBsaWNhdGVNb2R1bGVOYW1lcyhjb3Vyc2UpXHJcbiAgXSk7XHJcblxyXG4gIHJldHVybiBjaGVja3MuZmlsdGVyIChyZXN1bHQgPT4gcmVzdWx0KTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXNrc1BlcklkIChjb3Vyc2U6IENvdXJzZSkge1xyXG4gIGNvbnN0IHJlc3VsdDoge1tpZDogc3RyaW5nXTogVGFza1tdfSA9IHt9O1xyXG4gIGZ1bmN0aW9uIGFkZChpZDogc3RyaW5nLCB0YXNrOiBUYXNrKSB7XHJcbiAgICBjb25zdCBsaXN0ID0gcmVzdWx0W2lkXSB8fCAocmVzdWx0W2lkXSA9IFtdKTtcclxuICAgIGxpc3QucHVzaCh0YXNrKTtcclxuICB9XHJcbiAgY291cnNlLnRhc2tzLmZvckVhY2godGFzayA9PiB7XHJcbiAgICB0YXNrLmFiaWxpdGllcy5mb3JFYWNoKGEgPT4gYWRkKGEuaWQsIHRhc2spKTtcclxuICAgIHRhc2suY2VudHJhbENvbnRlbnQuZm9yRWFjaChjID0+IGFkZChjLmlkLCB0YXNrKSk7XHJcbiAgICB0YXNrLmZ1dHVyZUFiaWxpdGllcy5mb3JFYWNoKGZhID0+IGFkZChmYSwgdGFzaykpO1xyXG4gIH0pO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKiBSZXR1cm5zIGFuIGFjY2VzcyBsaXN0IGZvciBhIGNvdXJzZSBpbiBhIGJhY2t3YXJkIGNvbXBhdGlibGUgd2F5ICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTb2Z0QWNjZXNzTGlzdCAoY291cnNlOiBDb3Vyc2UpOiBTb2Z0RG9jdW1lbnRBY2Nlc3NbXSB7XHJcbiAgY29uc3Qge3Jlc3BvbnNpYmxlVGVhY2hlcnN9ID0gY291cnNlO1xyXG4gIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNpYmxlVGVhY2hlcnMubWFwKGRhID0+KHtcclxuICAgIG5hbWU6IGRhLm5hbWUsXHJcbiAgICBlbWFpbDogZ2V0RW1haWxGcm9tRG9jQWNjZXNzKGRhKSxcclxuICAgIGFjY2VzczogZGEuYWNjZXNzIHx8ICdlZGl0J1xyXG4gIH0gYXMgU29mdERvY3VtZW50QWNjZXNzKSk7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4iLCJpbXBvcnQge0ludGxQcm92aWRlciwgYWRkTG9jYWxlRGF0YX0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCBsb2NhbGVfZW4gZnJvbSAncmVhY3QtaW50bC9sb2NhbGUtZGF0YS9lbic7XHJcbmltcG9ydCBsb2NhbGVfc3YgZnJvbSAncmVhY3QtaW50bC9sb2NhbGUtZGF0YS9zdic7XHJcbmltcG9ydCBtZXNzYWdlc19zdiBmcm9tIFwiLi4vLi4vdHJhbnNsYXRpb25zL3N2Lmpzb25cIjtcclxuaW1wb3J0IG1lc3NhZ2VzX2VuIGZyb20gXCIuLi8uLi90cmFuc2xhdGlvbnMvZW4uanNvblwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldHVwSW50bCA9IDxQIGV4dGVuZHMgb2JqZWN0PihDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8UD4pID0+XHJcbiAgICBjbGFzcyBfU2V0dXBMYW5ndWFnZUludGwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UD57XHJcbiAgICAgICAgbWVzc2FnZXMgOiBvYmplY3Q7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHByb3BzKXtcclxuICAgICAgICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICAgICAgICBhZGRMb2NhbGVEYXRhKFsuLi5sb2NhbGVfZW4sLi4ubG9jYWxlX3N2XSk7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZXMgPSB7XHJcbiAgICAgICAgICAgICdzdic6IG1lc3NhZ2VzX3N2LFxyXG4gICAgICAgICAgICAnZW4nOiBtZXNzYWdlc19lblxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBtb21lbnQoKS5sb2NhbGUoY2ZnLktFRF9MT0NBTEUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVuZGVyKCl7XHJcbiAgICAgICAgICAgIHJldHVybiA8SW50bFByb3ZpZGVyIGxvY2FsZT17Y2ZnLktFRF9MT0NBTEV9IG1lc3NhZ2VzPXt0aGlzLm1lc3NhZ2VzW2NmZy5LRURfTE9DQUxFXX0+XHJcbiAgICAgICAgICAgICAgICA8Q29tcG9uZW50IHsuLi50aGlzLnByb3BzIGFzIFB9IC8+XHJcbiAgICAgICAgICAgIDwvSW50bFByb3ZpZGVyPlxyXG4gICAgICAgIH1cclxuICAgIH0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvdXJzZSwgQ291cnNlTW9kdWxlLCBUYXNrLCBEb2N1bWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSBcIi4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveFwiO1xyXG5pbXBvcnQgeyBhcnJheVRvTG9va3VwIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMgfSBmcm9tICcuLi9jb3Vyc2VzL2J1c2luZXNzLWxvZ2ljJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgb3B0aW9uczogKERvY3VtZW50ICYge2dyb3VwPzogc3RyaW5nfSlbXTtcclxuICB0aXRsZTtcclxuICBtYXJrTW9kZTogYm9vbGVhbjtcclxuICBtYXJrZWRJZHM6IHN0cmluZ1tdO1xyXG4gIG1pZ3JhdGVkSWRzPzoge1tpZDogc3RyaW5nXTogYW55fTtcclxuICB1bmNvdmVyZWRJZHM/OiB7W2lkOiBzdHJpbmddOiB0cnVlfTtcclxuICBvbk1hcmtDaGFuZ2VkOiAoaWQ6IHN0cmluZywgaXNNYXJrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3RSZWxhdGVkRG9jcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge29wdGlvbnMsIHRpdGxlLCBtYXJrZWRJZHMsIG1hcmtNb2RlLCBtaWdyYXRlZElkcywgdW5jb3ZlcmVkSWRzfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCBncm91cGVkT3B0aW9ucyA9IGFycmF5VG9Mb29rdXAob3B0aW9ucywgZCA9PiBkLmdyb3VwIHx8IFwiZGVmYXVsdFwiKTtcclxuICAgIGNvbnN0IGdyb3VwcyA9IE9iamVjdC5rZXlzKGdyb3VwZWRPcHRpb25zKTtcclxuICAgIHJldHVybiA8T3BlbkNsb3NlQm94IHRpdGxlPXs8cD57dGl0bGV9PC9wPn0gY2xhc3NOYW1lPVwibGFyZ2VyXCI+XHJcbiAgICAgICAge2dyb3Vwcy5tYXAoZ3JvdXAgPT4gPFJlYWN0LkZyYWdtZW50IGtleT17Z3JvdXB9PlxyXG4gICAgICAgICAge2dyb3Vwcy5sZW5ndGggPT09IDEgPyBudWxsIDogPD48YnIvPjxoNT57Z3JvdXB9PC9oNT48aHIvPjwvPn1cclxuICAgICAgICAgIHtncm91cGVkT3B0aW9uc1tncm91cF0ubWFwKG9wdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkID0gbWFya2VkSWRzLnNvbWUoeCA9PiB4ID09PSBvcHRpb24uaWQpO1xyXG4gICAgICAgICAgICBjb25zdCBpc01pZ3JhdGVkID0gbWlncmF0ZWRJZHMgJiYgISFtaWdyYXRlZElkc1tvcHRpb24uaWRdO1xyXG4gICAgICAgICAgICBjb25zdCBpc1VuY292ZXJlZCA9IHVuY292ZXJlZElkcyAmJiB1bmNvdmVyZWRJZHNbb3B0aW9uLmlkXTtcclxuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17b3B0aW9uLmlkfSBvbkNsaWNrPXsoKT0+XHJcbiAgICAgICAgICAgICAgbWFya01vZGUgJiYgdGhpcy5wcm9wcy5vbk1hcmtDaGFuZ2VkKG9wdGlvbi5pZCwgIWlzTWFya2VkKX0+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiICtcclxuICAgICAgICAgICAgICAgIChtYXJrTW9kZSA/IFwiIHNlbGVjdGFibGVcIiA6IFwiXCIpICtcclxuICAgICAgICAgICAgICAgIChpc01hcmtlZCA/IFwiIG1hcmtlZEdyZWVuXCIgOiAoaXNVbmNvdmVyZWQgP1xyXG4gICAgICAgICAgICAgICAgICBcIiBtYXJrZWRSZWRcIjpcclxuICAgICAgICAgICAgICAgICAgXCJcIikpICtcclxuICAgICAgICAgICAgICAgIChpc01pZ3JhdGVkID8gXCIgbWlncmF0ZWRcIiA6IFwiXCIpfVxyXG4gICAgICAgICAgICAgICAgdGl0bGU9e2lzTWlncmF0ZWQgP1xyXG4gICAgICAgICAgICAgICAgICBtYXJrTW9kZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgYFNrb2x2ZXJrZXQgaGFyIHVwcGRhdGVyYXQgdGV4dGVucyBmb3JtdWxlcmluZy4gRHUga2FuIGdyYW5za2Egw6RuZHJpbmdlbiBnZW5vbSBhdHQgZsOkbGxhIHV0IHZhcm5pbmdzYm94ZW4gdGlsbCBow7ZnZXIsIG1lZCB0aXRlbCBcIlVwcGRhdGVyYWRlIGZvcm11bGVyaW5nYXIgZnLDpW4gU2tvbHZlcmtldFwiYCA6XHJcbiAgICAgICAgICAgICAgICAgICAgYFNrb2x2ZXJrZXQgaGFyIHVwcGRhdGVyYXQgdGV4dGVucyBmb3JtdWxlcmluZywgbWVuIGRldHRhIGhhciDDpG5udSBpbnRlIGdyYW5za2F0cyBhdiB1cHBnaWZ0ZW5zIHJlZGlnZXJpbmdzYmVow7ZyaWdlYCA6XHJcbiAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH0+XHJcbiAgICAgICAgICAgICAgICA8cCBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogb3B0aW9uLm5hbWV9fSAvPlxyXG4gICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PjtcclxuICAgICAgICAgIH0pfVxyXG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+KX1cclxuICAgIDwvT3BlbkNsb3NlQm94PlxyXG4gIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgbGVmdDogUmVhY3QuUmVhY3ROb2RlO1xyXG4gIHJpZ2h0OiBSZWFjdC5SZWFjdE5vZGU7XHJcbiAgcmlnaHRXaWR0aDogMSB8IDIgfCAzIHwgNCB8IDUgfCA2IHwgNyB8IDggfMKgOSB8IDEwIHwgMTE7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUd29Db2x1bW5zUGFnZSA9ICh7IGxlZnQsIHJpZ2h0LCByaWdodFdpZHRoIH06IFByb3BzKSA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0XCI+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tMTJcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1zcGFjZXItMjBweHZ0IHN2LXZlcnRpY2FsIHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytcm93IHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tJHsxMi1yaWdodFdpZHRofWB9PlxyXG4gICAgICAgICAgICAgIHtsZWZ0fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bzdi1sYXlvdXQgc3YtY29sdW1uLSR7cmlnaHRXaWR0aH1gfT5cclxuICAgICAgICAgICAgICB7cmlnaHR9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbik7XHJcbiIsImltcG9ydCB7VXNlcn0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVzZXJzIDogVXNlcltdID0gW3tcclxuICAgIGRpc3BsYXlOYW1lOiBcIkFkbWluaXN0cmF0w7ZyXCIsXHJcbiAgICBtYWlsOiBcInZlbWVuZG9Aa2Vkc2Nob29scy5jb21cIixcclxuICAgIHJvbGVzOiBbJ0FETUlOJywnRU1QTE9ZRUUnXSxcclxuICAgIHNjaG9vbDogJ0tFRCcsXHJcbiAgICB1c2VybmFtZTogXCJhZG1pblwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiRGF2aWRcIixcclxuICAgIG1haWw6IFwiZGF2aWQuZmFobGFuZGVyQHZlbWVuZG8uc2VcIixcclxuICAgIHJvbGVzOiBbJ0FETUlOJywnRU1QTE9ZRUUnXSxcclxuICAgIHNjaG9vbDogJ0tFRCcsXHJcbiAgICB1c2VybmFtZTogXCJkYXZpZFwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiQ2FybCBIb2xtYmVyZ1wiLFxyXG4gICAgbWFpbDogXCJjYXJsLmhvbG1iZXJnQGt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXHJcbiAgICByb2xlczogWydBRE1JTicsJ0VNUExPWUVFJ10sXHJcbiAgICBzY2hvb2w6ICdOb3Jya8O2cGluZycsXHJcbiAgICB1c2VybmFtZTogXCJjYXJsLmhvbG1iZXJnQGt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcclxufSx7IFxyXG4gICAgZGlzcGxheU5hbWU6IFwiQ2FybFwiLFxyXG4gICAgbWFpbDogXCJjYXJsQGtlZHNjaG9vbHMuY29tXCIsXHJcbiAgICByb2xlczogWydBRE1JTicsJ0VNUExPWUVFJywnU1RVREVOVCddLFxyXG4gICAgc2Nob29sOiAnS0VEJyxcclxuICAgIHVzZXJuYW1lOiBcImNhcmxcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2MVwiLFxyXG4gICAgbWFpbDogXCJ1Ync2NzU3QGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxyXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXHJcbiAgICB1c2VybmFtZTogXCJ1Ync2NzU3QGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXYyXCIsXHJcbiAgICBtYWlsOiBcInVtczQzMDJAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXHJcbiAgICByb2xlczogWydTVFVERU5UJ10sXHJcbiAgICBzY2hvb2w6ICdVcHBzYWxhJyxcclxuICAgIHVzZXJuYW1lOiBcInVtczQzMDJAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjNcIixcclxuICAgIG1haWw6IFwidWhoMzQ2MEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIixcclxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcclxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxyXG4gICAgdXNlcm5hbWU6IFwidWhoMzQ2MEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2NChmZWwgZ29hbHMgaXNzdWUpXCIsXHJcbiAgICBtYWlsOiBcInVtdDY4MjZAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcclxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXHJcbiAgICB1c2VybmFtZTogXCJ1bXQ2ODI2QGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY1KGZ1dHVyZSBhYmlsaXRpZXMpXCIsXHJcbiAgICBtYWlsOiBcInVqZzM4MzNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcclxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXHJcbiAgICB1c2VybmFtZTogXCJ1amczODMzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY2KGZ1dHVyZSBhYmlsaXRpZXMpXCIsXHJcbiAgICBtYWlsOiBcInVqdDEzNjNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcclxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXHJcbiAgICB1c2VybmFtZTogXCJ1anQxMzYzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUzDpHJhcmUxXCIsXHJcbiAgICBtYWlsOiBcInJpY2thcmQuYWxiZXJ0c3NvbkBrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgcm9sZXM6IFsnRU1QTE9ZRUUnXSxcclxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxyXG4gICAgdXNlcm5hbWU6IFwicmlja2FyZC5hbGJlcnRzc29uQGt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJFRFNUZXN0VXNlckd5bW5hc2l1bVwiLFxyXG4gICAgbWFpbDogXCJ1aGgzMjAwQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgLy9tYWlsOiBcIlVISDMyMDBARURVLktVTlNLQVBTR1lNTkFTSUVULlNFXCIsXHJcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcclxuICAgIHVzZXJuYW1lOiBcIkVEU1Rlc3RVc2VyMVwiLFxyXG4gICAgc2Nob29sOiBcIktFRFwiLFxyXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcInZlbWVuZG8uZWxldkBrZWRzY2hvb2xzLmNvbVwiLFxyXG4gICAgbWFpbDogXCJ2ZW1lbmRvLmVsZXZAa2Vkc2Nob29scy5jb21cIixcclxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxyXG4gICAgdXNlcm5hbWU6IFwidmVtZW5kby5lbGV2QGtlZHNjaG9vbHMuY29tXCIsXHJcbiAgICBzY2hvb2w6IFwiS0VEXCIsXHJcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiTWVkYXJiZXRhcmUgTmFja2FcIixcclxuICAgIG1haWw6IFwibWVkYXJiZXRhcmUubmFja2FAa3Vuc2thcHNza29sYW4uc2VcIixcclxuICAgIHJvbGVzOiBbXCJFTVBMT1lFRVwiXSxcclxuICAgIHVzZXJuYW1lOiBcIm1lZGFyYmV0YXJlLm5hY2thL0tTXCIsXHJcbiAgICBzY2hvb2w6IFwiTmFja2FcIixcclxuICAgIHNjaG9vbFR5cGU6IFwiR3J1bmRza29sb3JcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIk1lZGFyYmV0YXJlIEdsb2JlblwiLFxyXG4gICAgbWFpbDogXCJtZWRhcmJldGFyZS5nbG9iZW5Aa3Vuc2thcHNneW1uYXNpZXQuc2VcIixcclxuICAgIHJvbGVzOiBbXCJFTVBMT1lFRVwiXSxcclxuICAgIHVzZXJuYW1lOiBcIm1lZGFyYmV0YXJlLmdsb2Jlbi9LU1wiLFxyXG4gICAgc2Nob29sOiBcIkdsb2JlblwiLFxyXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgR2xvYmVuXCIsXHJcbiAgICBtYWlsOiBcImVsZXYuZ2xvYmVuQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgc2Nob29sR3JhZGU6IDIsXHJcbiAgICByb2xlczogWydTVFVERU5UJ10sXHJcbiAgICB1c2VybmFtZTogXCJlbGV2Lmdsb2JlblwiLFxyXG4gICAgc2Nob29sOiBcIkdsb2JlblwiLFxyXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgQm9yw6VzXCIsXHJcbiAgICBtYWlsOiBcImVsZXYuYm9yYXNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICBzY2hvb2xHcmFkZTogNyxcclxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcclxuICAgIHVzZXJuYW1lOiBcImVsZXYuYm9yYXNcIixcclxuICAgIHNjaG9vbDogXCJCb3LDpXNcIixcclxuICAgIHNjaG9vbFR5cGU6IFwiR3J1bmRza29sb3JcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgQm9ybMOkbmdlXCIsXHJcbiAgICBtYWlsOiBcImVsZXYuYm9ybGFuZ2VAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICBzY2hvb2xHcmFkZTogOSxcclxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcclxuICAgIHVzZXJuYW1lOiAnZWxldi5ib3JsYW5nZS9LUycsXHJcbiAgICBzY2hvb2w6ICdCb3Jsw6RuZ2UnLFxyXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIlJvbGwtbMO2c1wiLFxyXG4gICAgbWFpbDogXCJub25lQGt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICB1c2VybmFtZTogXCJub25lXCIsXHJcbiAgICByb2xlczogW11cclxufV07XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7TH0gZnJvbSAnLi91dGlscyc7XHJcbmltcG9ydCB7ZGJ9IGZyb20gJy4uL2dsb2JhbHMvZGInO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kV3JpdGVyIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0nO1xyXG5cclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgZXJyb3JzOiBFcnJvclN0cnVjdFtdO1xyXG4gIGluZm9zOiBzdHJpbmdbXTtcclxuICAvL2RiV3JpdGVyUmV0cnlhYmxlRXJyb3I/OiBFcnJvcjtcclxuICBkYldyaXRlcklzU2F2aW5nPzogYm9vbGVhbjtcclxuICBkYldyaXRlcklzRWRpdGVkPzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIEVycm9yU3RydWN0IHtcclxuICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgcmV0cnlhYmxlPzogYm9vbGVhbjtcclxuICBkZXRhaWxzPzogRXJyb3I7XHJcbiAgc2hvd0RldGFpbHM/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRXJyb3JTdWNjZXNzRmVlZGJhY2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlPXtcclxuICAgICAgZXJyb3JzOiBbXSxcclxuICAgICAgaW5mb3M6IFtdXHJcbiAgICB9O1xyXG4gICAgdGhpcy5fdW5oYW5kbGVkUmVqZWN0aW9uID0gdGhpcy5fdW5oYW5kbGVkUmVqZWN0aW9uLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9lcnJvciA9IHRoaXMuX2Vycm9yLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9jdXN0b21FcnJvciA9IHRoaXMuX2N1c3RvbUVycm9yLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9vbkluZm8gPSB0aGlzLl9vbkluZm8uYmluZCh0aGlzKTtcclxuICAgIHRoaXMuX2RiV3JpdGVyRXJyb3IgPSB0aGlzLl9kYldyaXRlckVycm9yLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9kYldyaXRlclN0YXRlQ2hhbmdlZCA9IHRoaXMuX2RiV3JpdGVyU3RhdGVDaGFuZ2VkLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9hZGRFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGRldGFpbHM/OiBFcnJvciwgcmV0cnlhYmxlPzogYm9vbGVhbikge1xyXG4gICAgLy9jb25zb2xlLmVycm9yKG1lc3NhZ2UsIHtyZXRyeWFibGU6ICEhcmV0cnlhYmxlLCBkZXRhaWxzfSk7XHJcbiAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4ge1xyXG4gICAgICBpZiAoZXJyb3JzLnNvbWUoZSA9PiBlLm1lc3NhZ2UgPT09IG1lc3NhZ2UpKSByZXR1cm4ge2Vycm9yc307XHJcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMikgZXJyb3JzID0gZXJyb3JzLnNsaWNlKDEpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGVycm9yczogZXJyb3JzLmNvbmNhdChbe21lc3NhZ2UsIGRldGFpbHMsIHJldHJ5YWJsZX1dKVxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICAvLyBSZW1vdmUgbm9uLXJldHJ5YWJsZSBlcnJvcnMgYWZ0ZXIgMzAgc2Vjb25kczpcclxuICAgIGlmICghcmV0cnlhYmxlKSBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoKHtlcnJvcnN9KSA9PiAoe1xyXG4gICAgICAgIGVycm9yczogZXJyb3JzLmZpbHRlcihlID0+IGUubWVzc2FnZSAhPT0gbWVzc2FnZSlcclxuICAgICAgfSkpO1xyXG4gICAgfSwgMzAwMDApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfYWRkSW5mbyhtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgIGlmIChtZXNzYWdlID09PSBcIlwiKSB7XHJcbiAgICAgIC8vIFR1cm4gb2ZmIGN1cnJlbnQgaW5mbyBtZXNzYWdlc1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtpbmZvczogW119KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZSgoe2luZm9zfSkgPT4ge1xyXG4gICAgICBpZiAoaW5mb3Muc29tZShpbmZvID0+IGluZm8gPT09IG1lc3NhZ2UpKSByZXR1cm4ge2luZm9zfTtcclxuICAgICAgaWYgKGluZm9zLmxlbmd0aCA+IDEpIGluZm9zID0gaW5mb3Muc2xpY2UoMSk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5mb3M6IFttZXNzYWdlXSAvLyB3YXM6IGluZm9zLmNvbmNhdChtZXNzYWdlKS4gQnV0IGl0IHN1Y2tzIVxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICAvLyBSZW1vdmUgaW5mbyBtZXNzYWdlIGFmdGVyIDEwIHNlY29uZHM6XHJcbiAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoKHtpbmZvc30pID0+ICh7XHJcbiAgICAgICAgaW5mb3M6IGluZm9zLmZpbHRlcihtc2cgPT4gbXNnICE9PSBtZXNzYWdlKVxyXG4gICAgICB9KSk7XHJcbiAgICB9LCAxMDAwMCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9kYldyaXRlckVycm9yIChlcnJvcjogRXJyb3IsIHJldHJ5YWJsZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fYWRkRXJyb3IoYERldCBnw6VyIGludGUgYXR0IHNwYXJhIHRpbGwgc2VydmVybmAsIGVycm9yLCByZXRyeWFibGUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfZGJXcml0ZXJTdGF0ZUNoYW5nZWQgKHtpc0VkaXRlZCwgaXNTYXZpbmd9OiBLZWRCYWNrZW5kV3JpdGVyKSB7XHJcbiAgICBpZiAoIWlzRWRpdGVkKSB7XHJcbiAgICAgIC8vIElmIGlzRWRpdGVkIGlzIGZhbHNlLCBhIHN1Y2Nlc3NmdWwgd3JpdGUgbXVzdCBoYXZlIGhhcHBlbmVkLCBhbmRcclxuICAgICAgLy8gdGhlcmUgY2Fubm90IGJlIGFueSByZXRyeWFibGUgZXJyb3IgYW55bW9yZVxyXG4gICAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4ge1xyXG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5maWx0ZXIoZSA9PiAhZS5yZXRyeWFibGUpO1xyXG4gICAgICAgIHJldHVybiB7ZXJyb3JzfTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZGJXcml0ZXJJc0VkaXRlZDogaXNFZGl0ZWQsXHJcbiAgICAgIGRiV3JpdGVySXNTYXZpbmc6IGlzU2F2aW5nXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9lcnJvcik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY3VzdG9tZXJyb3InLCB0aGlzLl9jdXN0b21FcnJvcik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaW5mbycsIHRoaXMuX29uSW5mbyk7XHJcbiAgICBkYi53cml0ZXIub25FcnJvcih0aGlzLl9kYldyaXRlckVycm9yKTtcclxuICAgIGRiLndyaXRlci5vblN0YXRlQ2hhbmdlKHRoaXMuX2RiV3JpdGVyU3RhdGVDaGFuZ2VkKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbik7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9lcnJvcik7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY3VzdG9tZXJyb3InLCB0aGlzLl9jdXN0b21FcnJvcik7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5mbycsIHRoaXMuX29uSW5mbyk7XHJcbiAgICBkYi53cml0ZXIub2ZmKHRoaXMuX2RiV3JpdGVyRXJyb3IpO1xyXG4gICAgZGIud3JpdGVyLm9mZih0aGlzLl9kYldyaXRlclN0YXRlQ2hhbmdlZCk7XHJcbiAgfVxyXG5cclxuICBfdW5oYW5kbGVkUmVqZWN0aW9uIChldjogRXZlbnQgJiB7cmVhc29uOiBFcnJvcn0pIHtcclxuICAgIHRoaXMuX2FkZEVycm9yKGBFdHQgb2vDpG50IGZlbCBpbnRyw6RmZmFkZS4uLmAsIGV2LnJlYXNvbik7XHJcbiAgfVxyXG5cclxuICBfZXJyb3IgKGV2OiBFdmVudCAmIHtlcnJvcjogRXJyb3J9KSB7XHJcbiAgICB0aGlzLl9hZGRFcnJvcihldi5lcnJvciA/IGV2LmVycm9yLm1lc3NhZ2UgOiBgRXR0IG9rw6RudCBmZWwgaW50csOkZmZhZGUuLi5gLCBldi5lcnJvcik7XHJcbiAgfVxyXG5cclxuICBfY3VzdG9tRXJyb3IgKGV2OiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5fYWRkRXJyb3IoZXYuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIF9vbkluZm8oZXY6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLl9hZGRJbmZvKGV2LmRldGFpbCk7XHJcbiAgfSBcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge2Vycm9ycywgaW5mb3MsIGRiV3JpdGVySXNTYXZpbmd9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImVycm9yLXN1Y2Nlc3MtZmVlZGJhY2tcIiBzdHlsZT17e1xyXG4gICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxyXG4gICAgICBsZWZ0OiAwLFxyXG4gICAgICB0b3A6IDAsXHJcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcclxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXHJcbiAgICB9fT5cclxuICAgICAgPGRpdiBzdHlsZT17e2Rpc3BsYXk6ICd0YWJsZScsIG1hcmdpbjogXCIwIGF1dG9cIn19PlxyXG4gICAgICAgIHtlcnJvcnMuZmlsdGVyKGUgPT4gIWUucmV0cnlhYmxlIHx8ICFkYldyaXRlcklzU2F2aW5nKVxyXG4gICAgICAgIC5tYXAoKHttZXNzYWdlLCBkZXRhaWxzLCByZXRyeWFibGUsIHNob3dEZXRhaWxzfSkgPT4gKFxyXG4gICAgICAgICAgPGRpdiBrZXk9e21lc3NhZ2V9IGNsYXNzTmFtZT1cImVycm9yXCI+XHJcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tmbG9hdDonbGVmdCd9fT57bWVzc2FnZX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e3BvaW50ZXJFdmVudHM6ICdhdXRvJ319PlxyXG4gICAgICAgICAgICAgIDxSZW1vdmVJdGVtIG9uQ2xpY2s9eygpPT50aGlzLnJlbW92ZUVycm9yKG1lc3NhZ2UpfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAge2RldGFpbHMgfHwgcmV0cnlhYmxlID8gPGRpdiBzdHlsZT17e3BvaW50ZXJFdmVudHM6ICdhdXRvJ319PlxyXG4gICAgICAgICAgICAgIHtkZXRhaWxzID8gPD48YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKT0+dGhpcy50b2dnbGVEZXRhaWxzKG1lc3NhZ2UpfT57c2hvd0RldGFpbHMgPyBcIkTDtmxqIGRldGFpbGVyXCIgOiBcIlZpc2EgZGV0YWlsamVyXCJ9PC9hPiZuYnNwOzwvPiA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICB7c2hvd0RldGFpbHMgPyA8cD57JycrZGV0YWlsc308L3A+OiA8PiZuYnNwOzwvPn1cclxuICAgICAgICAgICAgICB7cmV0cnlhYmxlID8gPGEgY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9PnRoaXMucmV0cnlTYXZlKCl9PkbDtnJzw7ZrIHNwYXJhIG51PC9hPiA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgPC9kaXY+OiB1bmRlZmluZWR9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApKX1cclxuICAgICAgICB7aW5mb3MubWFwKG1lc3NhZ2UgPT4gXHJcbiAgICAgICAgICA8cCBrZXk9e21lc3NhZ2V9IGNsYXNzTmFtZT1cImluZm9cIj57bWVzc2FnZX08L3A+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj47XHJcbiAgfVxyXG4gIHJlbW92ZUVycm9yKG1lc3NhZ2U6IHN0cmluZyk6IGFueSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4gKHtcclxuICAgICAgZXJyb3JzOiBlcnJvcnMuZmlsdGVyKGUgPT4gZS5tZXNzYWdlICE9PSBtZXNzYWdlKVxyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgcmV0cnlTYXZlKCkge1xyXG4gICAgZGIud3JpdGVyLnJldHJ5U2F2ZSgpO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRGV0YWlscyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoKHtlcnJvcnN9KSA9PiAoe2Vycm9yczogZXJyb3JzLm1hcChlcnJvciA9PiBlcnJvci5tZXNzYWdlID09PSBtZXNzYWdlID9cclxuICAgICAge1xyXG4gICAgICAgIC4uLmVycm9yLFxyXG4gICAgICAgIHNob3dEZXRhaWxzOiAhZXJyb3Iuc2hvd0RldGFpbHNcclxuICAgICAgfSA6XHJcbiAgICAgIGVycm9yKVxyXG4gICAgfSkpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7QWJpbGl0eSwgS25vd2xlZGdlUmVxdWlyZW1lbnR9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQge1JlbW92ZUl0ZW19IGZyb20gJy4vcmVtb3ZlLWl0ZW0nO1xyXG5pbXBvcnQgdXBkYXRlIGZyb20gJ3JlYWN0LWFkZG9ucy11cGRhdGUnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IEtub3dsZWRnZVJlcXVpcmVtZW50W107XHJcbiAgaWRzVG9NYXJrTm90T2s/OiB7W2lkOiBzdHJpbmddOiB0cnVlfTtcclxuICBleHBsYWluZWRSZXF1aXJlbWVudHM/OiB7W3JlcXVpcmVtZW50SWQ6IHN0cmluZ106IHN0cmluZ31cclxuICAvLyBQcm9wcyB1c2VkIGluIGVkaXQgbW9kZSAoZWRpdGluZyBjb3Vyc2UgdGVtcGxhdGVzKVxyXG4gIC8vY292ZXJlZElkcz86IHN0cmluZ1tdO1xyXG4gIC8vIFByb3BzIHVzZWQgaW4gbWFyayBtb2RlIChlZGl0aW5nIHRhc2tzKVxyXG4gIG1hcmtNb2RlPzogYm9vbGVhbjtcclxuICBtYXJrZWRJZHM/OiBzdHJpbmdbXTtcclxuICBtaWdyYXRlZElkcz86IHtbaWQ6IHN0cmluZ106IGFueX07XHJcbiAgb25NYXJrQ2hhbmdlZDogKGlkOiBzdHJpbmcsIGlzTWFya2VkOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIG9uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZD86IChyZXFJZDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBLbm93bGVkZ2VNYXRyaXggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIHt9PiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGtub3dsZWRnZVJlcXVpcmVtZW50cywgbWFya2VkSWRzLCBtaWdyYXRlZElkcywgZXhwbGFpbmVkUmVxdWlyZW1lbnRzIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyBpZHNUb01hcmtOb3RPaywgbWFya01vZGUsIG9uTWFya0NoYW5nZWQsIG9uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZCB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBjb25zdCBjb2x1bW5zID0gW1wiRVwiLCBcIkNcIiwgXCJBXCJdO1xyXG4gICAgY29uc3Qgcm93czogS25vd2xlZGdlUmVxdWlyZW1lbnRbXVtdID0gW107XHJcbiAgICBjb25zdCByZXFzID0ga25vd2xlZGdlUmVxdWlyZW1lbnRzLnNsaWNlKCk7XHJcbiAgICBsZXQgcm93OiBLbm93bGVkZ2VSZXF1aXJlbWVudFtdIHwgbnVsbCA9IG51bGw7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICByb3cgPSBjb2x1bW5zLm1hcChncmFkZSA9PiB7XHJcbiAgICAgICAgY29uc3QgcE5leHQgPSByZXFzLmZpbmRJbmRleChyID0+IHIuZ3JhZGVTdGVwICYmIHIuZ3JhZGVTdGVwLnRvVXBwZXJDYXNlKCkgPT09IGdyYWRlKTtcclxuICAgICAgICBpZiAocE5leHQgPCAwKSByZXR1cm4gbnVsbDtcclxuICAgICAgICBjb25zdCBydiA9IHJlcXNbcE5leHRdO1xyXG4gICAgICAgIHJlcXMuc3BsaWNlKHBOZXh0LCAxKTtcclxuICAgICAgICByZXR1cm4gcnY7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAocm93LmV2ZXJ5KHIgPT4gciA9PT0gbnVsbCkpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIHJvd3MucHVzaChyb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICA8dGFibGU+XHJcbiAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICB7Y29sdW1ucy5tYXAoYyA9PiA8dGgga2V5PXtjfT57Y308L3RoPil9XHJcbiAgICAgICAgICA8L3RyPlxyXG4gICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAge3Jvd3MubWFwKChyb3csaSkgPT4gPFJlYWN0LkZyYWdtZW50IGtleT17aX0+XHJcbiAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICB7cm93Lm1hcCgocmVxdWlyZW1lbnQsaikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNNYXJrZWRPSyA9IHJlcXVpcmVtZW50ICYmIG1hcmtlZElkcyAmJiBtYXJrZWRJZHMuaW5kZXhPZihyZXF1aXJlbWVudC5pZCkgPj0gMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkTm90T0sgPSByZXF1aXJlbWVudCAmJiBpZHNUb01hcmtOb3RPayAmJiBpZHNUb01hcmtOb3RPa1tyZXF1aXJlbWVudC5pZF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc01pZ3JhdGVkID0gcmVxdWlyZW1lbnQgJiYgbWlncmF0ZWRJZHMgJiYgISFtaWdyYXRlZElkc1tyZXF1aXJlbWVudC5pZF07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPHRkXHJcbiAgICAgICAgICAgICAgICAgIGtleT17an1cclxuICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHJlcXVpcmVtZW50ID8gcmVxdWlyZW1lbnQubmFtZSA6IFwiXCJ9fVxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eyhtYXJrTW9kZSA/IFwic2VsZWN0YWJsZVwiIDogXCJcIikgK1xyXG4gICAgICAgICAgICAgICAgICAoaXNNaWdyYXRlZCA/IFwiIG1pZ3JhdGVkXCIgOiBcIlwiKSArXHJcbiAgICAgICAgICAgICAgICAgIChpc01hcmtlZE9LID9cclxuICAgICAgICAgICAgICAgICAgICBcIiBtYXJrZWRHcmVlblwiIDpcclxuICAgICAgICAgICAgICAgICAgICAoaXNNYXJrZWROb3RPSyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICBcIiBtYXJrZWRSZWRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgIFwiXCIpKX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXttYXJrTW9kZSAmJiByZXF1aXJlbWVudCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAoKT0+b25NYXJrQ2hhbmdlZChyZXF1aXJlbWVudC5pZCwgIWlzTWFya2VkT0spIDpcclxuICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17aXNNaWdyYXRlZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICBtYXJrTW9kZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBTa29sdmVya2V0IGhhciB1cHBkYXRlcmF0IHRleHRlbnMgZm9ybXVsZXJpbmcuIER1IGthbiBncmFuc2thIMOkbmRyaW5nZW4gZ2Vub20gYXR0IGbDpGxsYSB1dCB2YXJuaW5nc2JveGVuIHRpbGwgaMO2Z2VyLCBtZWQgdGl0ZWwgXCJVcHBkYXRlcmFkZSBmb3JtdWxlcmluZ2FyIGZyw6VuIFNrb2x2ZXJrZXRcImAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgU2tvbHZlcmtldCBoYXIgdXBwZGF0ZXJhdCB0ZXh0ZW5zIGZvcm11bGVyaW5nLCBtZW4gZGV0dGEgaGFyIMOkbm51IGludGUgZ3JhbnNrYXRzIGF2IHVwcGdpZnRlbnMgcmVkaWdlcmluZ3NiZWjDtnJpZ2VgIDpcclxuICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH0gLz5cclxuICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAge2V4cGxhaW5lZFJlcXVpcmVtZW50cyAmJiA8dHI+XHJcbiAgICAgICAgICAgICAge3Jvdy5tYXAoKHJlcXVpcmVtZW50LGopID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkT0sgPSByZXF1aXJlbWVudCAmJiBtYXJrZWRJZHMgJiYgbWFya2VkSWRzLmluZGV4T2YocmVxdWlyZW1lbnQuaWQpID49IDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPHRkIGtleT17an0+XHJcbiAgICAgICAgICAgICAgICAgIHtpc01hcmtlZE9LID8gPHRleHRhcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e0xgQmVza3JpdiBrcmF2ZXRgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0VGV4dEJveCBpbnB1dFRleHRMYXJnZVwiIHN0eWxlPXt7d2lkdGg6IFwiMTAwJVwifX1cclxuICAgICAgICAgICAgICAgICAgICByZWFkT25seT17IW1hcmtNb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtleHBsYWluZWRSZXF1aXJlbWVudHNbcmVxdWlyZW1lbnQuaWRdIHx8IFwiXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZCAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICBldiA9PiBvbkV4cGxhaW5lZFJlcXVpcmVtZW50c0NoYW5nZWQocmVxdWlyZW1lbnQuaWQsIGV2LnRhcmdldC52YWx1ZSkpfVxyXG4gICAgICAgICAgICAgICAgICAvPiA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICAgICAgPC90ZD59KX1cclxuICAgICAgICAgICAgPC90cj59XHJcbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvdGJvZHk+XHJcbiAgICAgIDwvdGFibGU+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICB7LypyZXR1cm4gPGRpdj5cclxuICAgICAgPHRhYmxlPlxyXG4gICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgPHRoPkU8L3RoPlxyXG4gICAgICAgICAgICA8dGg+QzwvdGg+XHJcbiAgICAgICAgICAgIDx0aD5BPC90aD5cclxuICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgPC90aGVhZD5cclxuICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICB7dGJvZHkubWFwKChyb3csIGkpID0+IFxyXG4gICAgICAgICAgPHRyIGtleT17aX0+e3Jvdy5tYXAoKGNlbGwsIGopID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaXNNYXJrZWRPSyA9IHByb3BzLm1hcmtlZElkcyAmJiBwcm9wcy5tYXJrZWRJZHMuaW5kZXhPZihjZWxsLmlkKSA+PSAwO1xyXG4gICAgICAgICAgICBjb25zdCBpc01hcmtlZE5vdE9LID0gcHJvcHMuaWRzVG9NYXJrTm90T2sgJiYgcHJvcHMuaWRzVG9NYXJrTm90T2tbY2VsbC5pZF07XHJcbiAgICAgICAgICAgIHJldHVybiA8dGRcclxuICAgICAgICAgICAgICBrZXk9e2p9XHJcbiAgICAgICAgICAgICAgcm93U3Bhbj17Y2VsbC5yb3dTcGFufVxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17KHByb3BzLm1hcmtNb2RlID8gXCJzZWxlY3RhYmxlXCIgOiBcIlwiKSArXHJcbiAgICAgICAgICAgICAgICAoaXNNYXJrZWRPSyA/XHJcbiAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZEdyZWVuXCIgOlxyXG4gICAgICAgICAgICAgICAgICAoaXNNYXJrZWROb3RPSyA/XHJcbiAgICAgICAgICAgICAgICAgICAgXCIgbWFya2VkUmVkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgXCJcIikpfVxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLm1hcmtNb2RlICYmICgoKT0+cHJvcHMub25NYXJrQ2hhbmdlZChjZWxsLmlkLCAhaXNNYXJrZWRPSykpfT5cclxuICAgICAgICAgICAgICB7Y2VsbC5odG1sICYmIDxkaXYgc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJ319PlxyXG4gICAgICAgICAgICAgICAgPHBcclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjZWxsLnR5cGUgPT09ICdhYmlsaXR5JyA/ICdhYmlsaXR5VGV4dCcgOiAnY3JpdGVyaWFUZXh0J31cclxuICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IGNlbGwuaHRtbH19IC8+XHJcbiAgICAgICAgICAgICAgICB7cHJvcHMuZWRpdE1vZGUgJiYgPFJlbW92ZUl0ZW0gY2xhc3NOYW1lPVwidXBwZXJSaWdodFwiIG9uQ2xpY2s9eygpPT5cclxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsSWRzKFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwudHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLnJvd0luZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2VsbElkcyhcclxuICAgICAgICAgICAgICAgICAgICAgIGNlbGwudHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGNlbGwucm93SW5kZXgpLmZpbHRlcihpZCA9PiBpZCAhPSBjZWxsLmlkKSApfSAvPiB9XHJcbiAgICAgICAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgICAgICA8L3RkPn0pfVxyXG4gICAgICAgICAgPC90cj4pfVxyXG4gICAgICAgIDwvdGJvZHk+XHJcbiAgICAgIDwvdGFibGU+XHJcbiAgICA8L2Rpdj4qL31cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5cclxuZGVjbGFyZSB2YXIgcHJvY2VzczogYW55O1xyXG5cclxuY2ZnLkVOVklST05NRU5UID0gcHJvY2Vzcy5lbnYuRU5WSVJPTk1FTlQgYXMgXCJwcm9kdWN0aW9uXCIgfCBcImRldmVsb3BtZW50XCIgfCBcInRlc3RcIjtcclxuY2ZnLktFRF9BUElfVVJMID0gcHJvY2Vzcy5lbnYuS0VEX0FQSV9VUkw7IC8vIFwiaHR0cHM6Ly9rZWRiYWNrZW5kdGVzdC5henVyZXdlYnNpdGVzLm5ldC9hcGkvXCJcclxuY2ZnLkVEU19BUElfVVJMID0gcHJvY2Vzcy5lbnYuRURTX0FQSV9VUkw7IC8vIFwiaHR0cHM6Ly9lZHNwb3J0YWxvd2luYXBpLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9cIlxyXG5jZmcuS0VEX1RPS0VOX1VSTCA9IHByb2Nlc3MuZW52LktFRF9UT0tFTl9VUkw7IC8vIFwiaHR0cHM6Ly9rZWRhdXRodGVzdC5henVyZXdlYnNpdGVzLm5ldC90b2tlblwiXHJcbmNmZy5LRURfQ0xJRU5UX0lEID0gcHJvY2Vzcy5lbnYuS0VEX0NMSUVOVF9JRDsgLy8gXCJkZXZjbGllbnRcIiwgXCJ0ZXN0Y2xpZW50XCIsIFwiLi4uXCJcclxuY2ZnLktFRF9DTElFTlRfU0VDUkVUID0gcHJvY2Vzcy5lbnYuS0VEX0NMSUVOVF9TRUNSRVQ7XHJcbmNmZy5LRURfUkVBTE0gPSBwcm9jZXNzLmVudi5LRURfUkVBTE07IC8vIFwiU0UxXCJcclxuY2ZnLktFRF9MT0NBTEUgPSAnZW4nLy9jZmcuS0VEX0xPQ0FMRSB8fCBwcm9jZXNzLmVudi5LRURfTE9DQUxFOyAvLyBcInN2XCIsIFwiZW5cIi4gT25seSBzZXQgZnJvbSBwcm9jZXNzLmVudiBpZiBub3Qgc2V0IGZyb20gU2l0ZVZpc2lvbiBlbGVtZW50IGNvbmZpZy5cclxuY2ZnLktFRF9TQ0hPT0xfTE9DQUxFID0gJ2VuX25pbicvL2NmZy5LRURfU0NIT09MX0xPQ0FMRSB8fCBwcm9jZXNzLmVudi5LRURfU0NIT09MX0xPQ0FMRTsgLy8gXCJzdlwiLCBcImVuX3NpblwiLCBcImVuX25pblwiLiBPbmx5IHNldCBmcm9tIHByb2Nlc3MuZW52IGlmIG5vdCBzZXQgZnJvbSBTaXRlVmlzaW9uIGVsZW1lbnQgY29uZmlnLlxyXG4iLCJpbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nLCBnZW5lcmF0ZVF1ZXJ5U3RyaW5nLCBzcGxpdFVybEFuZFF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxzL3F1ZXJ5LXN0cmluZ1wiO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50V2ViLCBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciwgaXNvbW9ycGhpYywgc3RvcmFnZSB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcclxuaW1wb3J0IHsgQmVhcmVyUHJvdmlkZXIsIEtlZEJlYXJlclByb3ZpZGVyIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9jb250cmFjdHMva2VkLW1vZGVsc1wiO1xyXG5pbXBvcnQgeyBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyB9IGZyb20gXCIuLi9hY2Nlc3MtY29udHJvbC9pbmRleFwiO1xyXG5pbXBvcnQgeyBjaGVycnlQaWNrUHJvcHMgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcclxuXHJcbmZ1bmN0aW9uIGdldE1lcmdlZFRva2VuUGF0aCh0b2tlblBhdGg6IHN0cmluZywgbG9jYXRpb25TZWFyY2g6IHN0cmluZywgc2NvcGVzOiBzdHJpbmdbXSkge1xyXG4gIC8vIE1lcmdlIGNvbmZpZ3VyZWQgcXVlcnkgcGFyYW1zIG9mIHRva2VuIHBhdGggd2l0aCBwYXJhbXMgZ2l2ZW4gdG8gY3VycmVudCBwYWdlXHJcbiAgY29uc3QgY3VycmVudFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvblNlYXJjaCk7XHJcbiAgY29uc3QgaW1wZXJzb25hdGlvblByb3BzID0gY2hlcnJ5UGlja1Byb3BzKGN1cnJlbnRRdWVyeSwgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMpO1xyXG4gIGNvbnN0IFt0b2tlblBhdGhXaXRob3V0UXVlcnksIHRva2VuUXVlcnlTdHJpbmddID0gc3BsaXRVcmxBbmRRdWVyeSh0b2tlblBhdGgpO1xyXG4gIGNvbnN0IHRva2VuUGF0aFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyh0b2tlblF1ZXJ5U3RyaW5nKTtcclxuICByZXR1cm4gdG9rZW5QYXRoV2l0aG91dFF1ZXJ5ICsgZ2VuZXJhdGVRdWVyeVN0cmluZyh7XHJcbiAgICAuLi50b2tlblBhdGhRdWVyeSxcclxuICAgIC4uLmltcGVyc29uYXRpb25Qcm9wcyxcclxuICAgIHNjb3Blczogc2NvcGVzLmpvaW4oJywnKVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aDogc3RyaW5nLCB1c2VyRW1haWw6IHN0cmluZykge1xyXG4gIHJldHVybiBtZXJnZWRUb2tlblBhdGggKyBcIi9cIiArIHVzZXJFbWFpbDtcclxufVxyXG5cclxuZnVuY3Rpb24gc2F2ZVVzZXJJbmZvKHVzZXI6IFVzZXIsIHRva2VuSWQ6IHN0cmluZykge1xyXG4gIGVudi5jdXJyZW50VXNlciA9IHVzZXI7XHJcbiAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInVzZXJJbmZvXCIgKyB0b2tlbklkLCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvYWRVc2VySW5mbyh0b2tlbklkOiBzdHJpbmcpIHtcclxuICBjb25zdCBzdG9yZWRTZXNzaW9uVXNlciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJ1c2VySW5mb1wiICsgdG9rZW5JZCk7XHJcbiAgaWYgKHN0b3JlZFNlc3Npb25Vc2VyKSB7XHJcbiAgICBlbnYuY3VycmVudFVzZXIgPSBKU09OLnBhcnNlKHN0b3JlZFNlc3Npb25Vc2VyKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aDogc3RyaW5nLCB1c2VyRW1haWw6IHN0cmluZykge1xyXG4gIGNvbnN0IHRva2VuSWQgPSBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgdXNlckVtYWlsKTtcclxuICByZXR1cm4gbmV3IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aCwgcmVzcG9uc2VUZXh0ID0+IHtcclxuICAgIGNvbnN0IHJlcyA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KSBhcyB7IG9rOiBib29sZWFuLCBlcnJvcj86IHN0cmluZywgdG9rZW4/OiBzdHJpbmcsIHVzZXI/OiBVc2VyIH07XHJcbiAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcik7XHJcbiAgICBpZiAocmVzLnVzZXIpIHtcclxuICAgICAgc2F2ZVVzZXJJbmZvKHJlcy51c2VyLCB0b2tlbklkKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7IHRva2VuOiByZXMudG9rZW4sIGV4cGlyZXM6IERhdGUubm93KCkgKyA1OSAqIDYwICogMTAwMCB9O1xyXG4gIH0sIHRva2VuSWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVHb29nbGVUb2tlblByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aDogc3RyaW5nLCB1c2VyRW1haWw6IHN0cmluZykge1xyXG4gIGNvbnN0IHRva2VuSWQgPSBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgdXNlckVtYWlsKTtcclxuICByZXR1cm4gbmV3IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aCwgcmVzcG9uc2VUZXh0ID0+IHtcclxuICAgIGNvbnN0IHJlcyA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KSBhcyB7IG9rOiBib29sZWFuLCBlcnJvcj86IHN0cmluZywgdG9rZW4/OiBzdHJpbmcsIHVzZXI/OiBVc2VyIH07XHJcbiAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcik7XHJcbiAgICByZXR1cm4geyB0b2tlbjogcmVzLnRva2VuLCBleHBpcmVzOiBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDEwMDAgfTtcclxuICB9LCB0b2tlbklkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIodG9rZW5Vcmw6IHN0cmluZywgdXNlcjogVXNlciwgc2NvcGVzOiBzdHJpbmdbXSkge1xyXG4gIHJldHVybiBuZXcgS2VkQmVhcmVyUHJvdmlkZXIoXHJcbiAgICBpc29tb3JwaGljLFxyXG4gICAgc3RvcmFnZSxcclxuICAgIHRva2VuVXJsICsgdXNlci5tYWlsICsgbG9jYXRpb24uc2VhcmNoLFxyXG4gICAgY2ZnLktFRF9DTElFTlRfSUQsXHJcbiAgICBjZmcuS0VEX0NMSUVOVF9TRUNSRVQsXHJcbiAgICB0b2tlblVybCwge1xyXG4gICAgICBlbWFpbDogdXNlci5tYWlsLnRvTG93ZXJDYXNlKCksXHJcbiAgICAgIHJvbGVzOiB1c2VyLnJvbGVzLFxyXG4gICAgICBzY2hvb2w6IHVzZXIuc2Nob29sLFxyXG4gICAgICBzY2hvb2xUeXBlOiB1c2VyLnNjaG9vbFR5cGUsXHJcbiAgICAgIHNjb3Blc1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8vIGVudi5jdXJyZW50VXNlci5tYWlsIGlzIHNldCBieSBTaXRlVmlzaW9uIHNlcnZlciBpbml0aWFsbHkuXHJcbi8vIEEgcmVzcG9uc2UgZnJvbSAvYXBpL3Rva2VuIG1heSBjaGFuZ2UgdGhlIG1haWwgYXR0cmlidXRlIG9mIHRoZSBjdXJyZW50XHJcbi8vIHVzZXIsIHNvIGVudi5jdXJyZW50VXNlci5tYWlsIG1heSBiZSBkaWZmZXJlbnQgYWZ0ZXIgZ2V0dGluZyBhIHJlc3BvbnNlLlxyXG4vLyBIb3dldmVyLCB0aGUgaW5pdGlhbCB2YWx1ZSBpcyB2YWx1YWJsZSBhbHdheXMgaW4gb3JkZXIgdG8gZGlzdGluZ3Vpc2ggdGhlIGNhc2VcclxuLy8gd2hlbiBvbmUgbm9ybWFsIHVzZXIgbG9ncyBvdXQgYW5kIGFub3RoZXIgdXNlciBsb2dzIGluLlxyXG5jb25zdCBpbml0aWFsVXNlckVtYWlsID0gZW52LmN1cnJlbnRVc2VyICYmIGVudi5jdXJyZW50VXNlci5tYWlsOyAvLyBJbml0aWFsIHZhbHVlIG9mIG1haWwuIE1heSBjaGFuZ2UuXHJcbmlmIChpbml0aWFsVXNlckVtYWlsKSB7XHJcbiAgLy8gS0VEXHJcbiAgaWYgKGNmZy5LRURfVE9LRU5fUEFUSCkge1xyXG4gICAgLy9cclxuICAgIC8vXHJcbiAgICAvLyBQcm9kdWN0aW9uIC8gU2l0ZVZpc2lvbiBwcm94aWVkIC9hcGkvdG9rZW4gdG8gcmVxdWVzdCB0b2tlbnMgZnJvbTpcclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgY29uc3QgbWVyZ2VkVG9rZW5QYXRoID0gZ2V0TWVyZ2VkVG9rZW5QYXRoKFxyXG4gICAgICBjZmcuS0VEX1RPS0VOX1BBVEgsXHJcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCwgW1xyXG4gICAgICAgIFwia2VkYmFja2VuZFwiLFxyXG4gICAgICAgIFwiRURTXCIsXHJcbiAgICAgIF0pO1xyXG4gICAgZW52LmJlYXJlclByb3ZpZGVyID0gY3JlYXRlQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoLCBpbml0aWFsVXNlckVtYWlsKTtcclxuICAgIGxvYWRVc2VySW5mbyhnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgaW5pdGlhbFVzZXJFbWFpbCkpO1xyXG5cclxuICAgIC8vIEdvb2dsZVxyXG4gICAgY29uc3QgZ29vZ2xlTWVyZ2VkUGF0aCA9IGdldE1lcmdlZFRva2VuUGF0aChcclxuICAgICAgY2ZnLktFRF9UT0tFTl9QQVRILFxyXG4gICAgICBsb2NhdGlvbi5zZWFyY2gsIFtcclxuICAgICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXIucmVhZG9ubHlcIixcclxuICAgICAgXSk7XHJcbiAgICBlbnYuZ29vZ2xlVG9rZW5Qcm92aWRlciA9IGNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIoZ29vZ2xlTWVyZ2VkUGF0aCwgaW5pdGlhbFVzZXJFbWFpbCk7XHJcbiAgfSBlbHNlIGlmIChjZmcuS0VEX1RPS0VOX1VSTCAmJiBjZmcuS0VEX0NMSUVOVF9JRCAmJiBjZmcuS0VEX0NMSUVOVF9TRUNSRVQpIHtcclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgLy8gVGVzdCAtIGdvIGRpcmVjdGx5IHRvIEtFREFVVEggc2VydmVyIHRvIHJldHJpZXZlIHRva2Vuc1xyXG4gICAgLy9cclxuICAgIC8vXHJcbiAgICBlbnYuYmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcihjZmcuS0VEX1RPS0VOX1VSTCwgZW52LmN1cnJlbnRVc2VyLCBbXHJcbiAgICAgIFwia2VkYmFja2VuZFwiLFxyXG4gICAgICBcIkVEU1wiLFxyXG4gICAgXSk7XHJcbiAgICBlbnYuZ29vZ2xlVG9rZW5Qcm92aWRlciA9IGNyZWF0ZVRlc3RUb2tlblByb3ZpZGVyKGNmZy5LRURfVE9LRU5fVVJMICsgXCIvZ29vZ2xlXCIsIGVudi5jdXJyZW50VXNlciwgW1xyXG4gICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXIucmVhZG9ubHlcIixcclxuICAgIF0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIgS0VEX1RPS0VOX1BBVEhgKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRDbGllbnRXZWIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudHdlYic7XHJcblxyXG5lbnYua2VkQmFja2VuZENsaWVudCA9IG5ldyBLZWRCYWNrZW5kQ2xpZW50V2ViIChcclxuICBjZmcuS0VEX0FQSV9VUkwsXHJcbiAgZW52LmJlYXJlclByb3ZpZGVyKTtcclxuXHJcbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgeyBpc29tb3JwaGljIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWInO1xyXG5pbXBvcnQgeyBFZHNDbGllbnQgfSBmcm9tICcuLi9hcGlzL2Vkc2NsaWVudCc7XHJcblxyXG5lbnYuZWRzQ2xpZW50ID0gbmV3IEVkc0NsaWVudCAoXHJcbiAgaXNvbW9ycGhpYyxcclxuICBjZmcuRURTX0FQSV9VUkwsXHJcbiAgZW52LmJlYXJlclByb3ZpZGVyLFxyXG4gICgpPT5lbnYuY3VycmVudFVzZXIubWFpbCk7XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgY29uc3QgRWxsaXBzaXNMb2FkZXIgPSAoKSA9PlxyXG4gIDxpbWdcclxuICAgIHN0eWxlPXt7Ym9yZGVyOiAwLCBtYXJnaW46IDAsIHBhZGRpbmc6IDB9fVxyXG4gICAgY2xhc3NOYW1lPVwiZWxsaXBzaXMtbG9hZGVyXCIgLz47XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBWYWx1ZSwgRW1pdHRlciB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IGxpdmVRdWVyeVZpZXcgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGl2ZS1xdWVyeS12aWV3JztcclxuaW1wb3J0IHsgTGF6eUNvbnRlbnQgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGF6eS1jb250ZW50JztcclxuaW1wb3J0IHsgRWxsaXBzaXNMb2FkZXIgfSBmcm9tICcuLi8uLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9lbGxpcHNpcy1sb2FkZXInO1xyXG5pbXBvcnQgeyBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSB9IGZyb20gJy4uLy4uLy4uL2FjY2Vzcy1jb250cm9sJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmFubmVyUHJvcHMge1xyXG4gIHRpdGxlOiBzdHJpbmcsXHJcbiAgYmFja2dyb3VuZEltYWdlPzogc3RyaW5nLFxyXG4gIHRhYnM6IHsgbmFtZTogc3RyaW5nIHwgSlNYLkVsZW1lbnQsIGtleTogc3RyaW5nLCBsaW5rPzogc3RyaW5nLCBvbkNsaWNrPzogKCkgPT4gdm9pZCwgZHJhZ2dhYmxlPzogYm9vbGVhbiAgfVtdLFxyXG4gIGJ1dHRvbnM/OiBKU1guRWxlbWVudFtdLFxyXG4gIGFjdGl2ZVRhYjogc3RyaW5nO1xyXG4gIGNvcm5lckJveD86IHN0cmluZyB8IEpTWC5FbGVtZW50O1xyXG4gIGJsb2Nrcz86IEFycmF5PHsgaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBzdGVwczogQXJyYXk8eyBsaW5rOiBzdHJpbmcsIHN0ZXBObzogbnVtYmVyLCBpc0FjdGl2ZTogYm9vbGVhbn0+IH0+XHJcbiAgc29ydGFibGVUYWJzPzogYm9vbGVhbjtcclxuICBvblRhYkRyb3A/OiAoc291cmNlOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nLCBwbGFjZW1lbnQ6ICdiZWZvcmUnIHwgJ2FmdGVyJykgPT4gdm9pZFxyXG59XHJcblxyXG5pbnRlcmZhY2UgTGF6eUJhbm5lclByb3BzIHtcclxuICBsYXp5UHJvcHM6IFZhbHVlPEJhbm5lclByb3BzPlxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTGF6eUJhbm5lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxMYXp5QmFubmVyUHJvcHM+IHtcclxuICBkcmFnU3RhdGUgPSBuZXcgRW1pdHRlcih7IHRhYkJlaW5nRHJhZ2dlZDogJycsIHRhYkJlaW5nSG92ZXJlZDogJycsIGluc2VydEJlZm9yZTogZmFsc2UsIG9yaWdpbkNsaWVudFg6IC0xIH0pO1xyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGxhenlQcm9wcyB9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytcm93IHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiIHN0eWxlPXt7IG92ZXJmbG93OiBcInZpc2libGVcIiB9fT5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tMTJcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytc2NyaXB0LXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgICAgICA8TGF6eUNvbnRlbnQgbm9FcnJvcj5cclxuICAgICAgICAgICAgICB7bGF6eVByb3BzLm1hcCgoeyBiYWNrZ3JvdW5kSW1hZ2UgfSkgPT4gYmFja2dyb3VuZEltYWdlICYmIDxzdHlsZT57YFxyXG4gICAgICAgICAgICAgIC5wYWdlSGVhZGVyIHtcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnJHtiYWNrZ3JvdW5kSW1hZ2V9JykgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGB9PC9zdHlsZT4pfVxyXG4gICAgICAgICAgICA8L0xhenlDb250ZW50PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2VIZWFkZXJcIj5cclxuICAgICAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgICAgIDxoMT48TGF6eUNvbnRlbnQgbm9FcnJvcj57bGF6eVByb3BzLm1hcChwcm9wcyA9PiA8Pntwcm9wcy50aXRsZX08Lz4pfTwvTGF6eUNvbnRlbnQ+PC9oMT5cclxuICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgPExhenlDb250ZW50IG5vRXJyb3I+e2xhenlQcm9wcy5tYXAoKHsgY29ybmVyQm94IH0pID0+IGNvcm5lckJveCAmJlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlSGVhZGVyQ29ybmVyQm94XCI+XHJcbiAgICAgICAgICAgICAgICAgIHtjb3JuZXJCb3h9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj4pfVxyXG4gICAgICAgICAgICAgIDwvTGF6eUNvbnRlbnQ+XHJcblxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uc0ZpZWxkXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbnNDb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgPExhenlDb250ZW50IHNwaW5uZXI9ezxFbGxpcHNpc0xvYWRlciAvPn0+e2xhenlQcm9wcy5tYXAoKHsgdGFicywgYnV0dG9ucywgYWN0aXZlVGFiLCBibG9ja3MsIHNvcnRhYmxlVGFicywgb25UYWJEcm9wIH0pID0+IDw+XHJcbiAgICAgICAgICAgICAgICAgICAge2Jsb2NrcyA/IDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2Jsb2Nrcy5tYXAoYmxvY2sgPT4gPGRpdiBrZXk9e2Jsb2NrLmlkfSBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi12ZXJ0aWNhbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YT57YmxvY2submFtZX08L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtibG9jay5zdGVwcy5tYXAoc3RlcCA9PiA8UmVhY3QuRnJhZ21lbnQga2V5PXtzdGVwLnN0ZXBOb30+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvPXtzdGVwLmxpbmt9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiYnRuIGJ0bi1zbWFsbCBzdGVwLWJ1dHRvblwiICsgKHN0ZXAuaXNBY3RpdmUgPyBcIiBhY3RpdmVQYWdlXCIgOiBcIlwiKX0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3N0ZXAuc3RlcE5vfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50Pil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PiA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2hvcml6b250YWxNZW51Jz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxMYXp5Q29udGVudD57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1N0YXRlLm1hcCgoeyB0YWJCZWluZ0RyYWdnZWQsIHRhYkJlaW5nSG92ZXJlZCwgaW5zZXJ0QmVmb3JlLCBvcmlnaW5DbGllbnRYIH0pID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e3NvcnRhYmxlVGFicyA/IFwic29ydGFibGVcIiA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyb3A9e29uVGFiRHJvcCA/IGV2ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYkJlaW5nSG92ZXJlZCAmJiB0YWJCZWluZ0RyYWdnZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblRhYkRyb3AodGFiQmVpbmdEcmFnZ2VkLCB0YWJCZWluZ0hvdmVyZWQsIGluc2VydEJlZm9yZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmVmb3JlJyA6ICdhZnRlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1N0YXRlLmRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmRyYWdTdGF0ZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJCZWluZ0hvdmVyZWQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkJlaW5nRHJhZ2dlZDogJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IDogbnVsbH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RhYnMubWFwKCh7IG5hbWUsIGtleSwgbGluaywgb25DbGljaywgZHJhZ2dhYmxlIH0sIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0FjdGl2ZSA9IGFjdGl2ZVRhYiA9PT0ga2V5IHx8IChhY3RpdmVUYWIgPT09ICckJyAmJiBpZHggPT09IDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7ZHJhZ1N0YXRlfSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lIHx8IExgKE5hbW5sw7ZzIGZsaWspYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudCBrZXk9e2tleX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2luc2VydEJlZm9yZSAmJiB0YWJCZWluZ0hvdmVyZWQgPT09IGtleSA/IDxsaSBjbGFzc05hbWU9XCJkcm9wLXRhcmdldFwiIG9uRHJhZ092ZXI9e2V2ID0+IGV2LnByZXZlbnREZWZhdWx0KCl9PiZuYnNwOzwvbGk+IDogbnVsbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgPyBcImFjdGl2ZVBhZ2VcIiA6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9PT0gdGFiQmVpbmdEcmFnZ2VkID8gXCJkcmFnLXNvdXJjZVwiIDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydGFibGVUYWJzICYmIGRyYWdnYWJsZSA/IFwiZHJhZ2dhYmxlXCIgOiBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmZpbHRlcih4PT54KS5qb2luKCcgJyl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnZ2FibGU9e3NvcnRhYmxlVGFicyAmJiBkcmFnZ2FibGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdTdGFydD17c29ydGFibGVUYWJzICYmIGRyYWdnYWJsZSA/IGV2ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXYuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSBcIm1vdmVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ1N0YXRlLmRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5kcmFnU3RhdGUudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luQ2xpZW50WDogZXYuY2xpZW50WCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJCZWluZ0RyYWdnZWQ6IGtleVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnT3Zlcj17c29ydGFibGVUYWJzID8gZXYgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiQmVpbmdEcmFnZ2VkID09PSBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnU3RhdGUuZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZHJhZ1N0YXRlLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiQmVpbmdIb3ZlcmVkOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhYkJlaW5nRHJhZ2dlZCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IFwibW92ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwib25EcmFnT3ZlcjogXCIgKyBuYW1lICsgXCIuIGlkeDogXCIgKyBpZHggKyBcIi4gb3RoZXJJZHg6IFwiICsgb3RoZXJJZHgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnU3RhdGUuZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRyYWdTdGF0ZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJCZWluZ0hvdmVyZWQ6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRCZWZvcmU6IG9yaWdpbkNsaWVudFggPiBldi5jbGllbnRYfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnRW5kPXtldiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhZ1N0YXRlLmRpc3BhdGNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5kcmFnU3RhdGUudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiQmVpbmdIb3ZlcmVkOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJCZWluZ0RyYWdnZWQ6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGluayA/IGxpbmsuc3RhcnRzV2l0aChcIjpcIikgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeShsaW5rLnN1YnN0cigxKSwge30pfT57bmFtZX08L2E+IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89e2xpbmt9PntuYW1lfTwvTGluaz4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBvbkNsaWNrPXtvbkNsaWNrfT57bmFtZX08L2E+IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IWluc2VydEJlZm9yZSAmJiB0YWJCZWluZ0hvdmVyZWQgPT09IGtleSA/IDxsaSBjbGFzc05hbWU9XCJkcm9wLXRhcmdldFwiICBvbkRyYWdPdmVyPXtldiA9PiBldi5wcmV2ZW50RGVmYXVsdCgpfT4mbmJzcDs8L2xpPiA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtidXR0b25zICYmIGJ1dHRvbnMubWFwKChidG4sIGlkeCkgPT4gPGxpIGNsYXNzTmFtZT1cImFjdGlvbi10YWJcIiBrZXk9e2BidG4ke2lkeH1gfT57YnRufTwvbGk+KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPil9XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L0xhenlDb250ZW50PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICA8Lz4pfVxyXG4gICAgICAgICAgICAgICAgICA8L0xhenlDb250ZW50PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEJhbm5lciA9IChwcm9wczogQmFubmVyUHJvcHMpID0+IDxMYXp5QmFubmVyIGxhenlQcm9wcz17bmV3IEVtaXR0ZXI8QmFubmVyUHJvcHM+KHByb3BzKX0gLz5cclxuXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGF2YWlsYWJsZToge25hbWU6IHN0cmluZywga2V5OiBzdHJpbmd9W11cclxuICBzZWxlY3RlZDogc3RyaW5nW11cclxuICBvbkNoYW5nZTogKHNlbGVjdGVkOiBzdHJpbmdbXSwgY2xpY2tlZEtleTogc3RyaW5nLCB3YXNDaGVja2VkOiBib29sZWFuKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQ2hlY2tsaXN0ID0gKHthdmFpbGFibGUsIHNlbGVjdGVkLCBvbkNoYW5nZX06IFByb3BzKSA9PiA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cclxuICB7XHJcbiAgICBhdmFpbGFibGUubWFwKCh7a2V5LCBuYW1lfSkgPT4ge1xyXG4gICAgICBjb25zdCBjaGVja2VkID0gc2VsZWN0ZWQuaW5jbHVkZXMoa2V5KTtcclxuICAgICAgcmV0dXJuIDxkaXYga2V5PXtrZXl9IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCIgb25DbGljaz17KCk9PlxyXG4gICAgICAgICAgICBvbkNoYW5nZShjaGVja2VkID9cclxuICAgICAgICAgICAgICBzZWxlY3RlZC5maWx0ZXIoayA9PiBrICE9IGtleSkgOlxyXG4gICAgICAgICAgICAgIHNlbGVjdGVkLmNvbmNhdChrZXkpLFxyXG4gICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICBjaGVja2VkKX0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImNoZWNrQm94XCIgKyAoY2hlY2tlZCA/IFwiIGNoZWNrZWRcIiA6IFwiXCIpfT48L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj57bmFtZX08L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgfVxyXG4gICAgKVxyXG4gIH1cclxuPC9kaXY+XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU2Nob29sLCBCcmFuY2gsIENvdXJzZSB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xyXG5pbXBvcnQgeyBDb3Vyc2VCYW5uZXIgfSBmcm9tIFwiLi4vY291cnNlcy9jb3Vyc2UtYmFubmVyXCI7XHJcbmltcG9ydCB7IHNob3dFcnJvciwgTCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IGNyZWF0ZVVVSUQsIERvY3VtZW50QWNjZXNzLCBCYXRjaFJ1bm5lciB9IGZyb20gXCJrZWRiYWNrZW5kL2NsaWVudFwiO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGlkPzogc3RyaW5nXHJcbiAgdGl0bGU6IHN0cmluZ1xyXG4gIHR5cGU/OiAnZ3ltbmFzaXVtJyB8ICdwcmltYXJ5J1xyXG59XHJcblxyXG50eXBlIFN0YXRlID0gU2Nob29sO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVkaXRTY2hvb2wgPSAocHJvcHM6IFByb3BzICYge2ZlZWRiYWNrVXJsOiBzdHJpbmd9KSA9PiA8ZGl2IHN0eWxlPXt7IG91dGxpbmU6IDAgfX0+XHJcbiAgPENvdXJzZUJhbm5lclxyXG4gICAgdGl0bGU9XCJTa29sb3JcIiBhY3RpdmVQYWdlPVwic2Nob29sc1wiIGNhbGxiYWNrcz17e3NjaG9vbHM6ICgpPT5sb2NhdGlvbi5oYXNoPVwiIy9zY2hvb2xzXCJ9fVxyXG4gICAgcm91dGVzPXt7ZmVlZGJhY2s6IHByb3BzLmZlZWRiYWNrVXJsfX0gLz5cclxuICA8RWRpdFNjaG9vbE5vQmFubmVyIHsuLi5wcm9wc30gLz5cclxuPC9kaXY+O1xyXG5cclxuZXhwb3J0IGNsYXNzIEVkaXRTY2hvb2xOb0Jhbm5lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIG9yaWdTY2hvb2w6IFNjaG9vbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5sb2FkKCkuY2F0Y2goZXJyID0+IHNob3dFcnJvcihlcnIpKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWQoKSB7XHJcbiAgICBpZiAodGhpcy5wcm9wcy5pZCkge1xyXG4gICAgICAvLyBJRCBnaXZlbiwgbG9hZCBpdC5cclxuICAgICAgY29uc3QgeyBpZCB9ID0gdGhpcy5wcm9wcztcclxuICAgICAgY29uc3Qgc2Nob29sID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuZ2V0PFNjaG9vbD4oXCJzY2hvb2xzXCIsIGlkKTtcclxuICAgICAgdGhpcy5vcmlnU2Nob29sID0geyAuLi5zY2hvb2wgfTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IC4uLnNjaG9vbCB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIE5vIGlkLCBjcmVhdGUgbmV3IGluc3RlYWQuXHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgICAgb2ZmaWNpYWxCcmFuY2hJZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICAgIGlzR3ltbmFzaXVtOiB0aGlzLnByb3BzLnR5cGUgPT09ICdneW1uYXNpdW0nLFxyXG4gICAgICAgIGlzUHJpbWFyeVNjaG9vbDogdGhpcy5wcm9wcy50eXBlID09PSAncHJpbWFyeSdcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBzYXZlKCkge1xyXG4gICAgY29uc3QgciA9IG5ldyBCYXRjaFJ1bm5lcigpO1xyXG4gICAgbGV0IHNjaG9vbCA9IHsgLi4udGhpcy5zdGF0ZSwgdGFnczogKHRoaXMuc3RhdGUudGFncyB8fCBbXSlcclxuICAgICAgLmZpbHRlcih0YWcgPT4gW1wicHJpbWFyeVwiLCBcImd5bW5hc2l1bVwiXS5pbmRleE9mKHRhZykgPCAwKVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoc2Nob29sLmlzUHJpbWFyeVNjaG9vbCkgc2Nob29sLnRhZ3MucHVzaChcInByaW1hcnlcIik7XHJcbiAgICBpZiAoc2Nob29sLmlzR3ltbmFzaXVtKSBzY2hvb2wudGFncy5wdXNoKFwiZ3ltbmFzaXVtXCIpO1xyXG4gICAgaWYgKCEoc2Nob29sLmlzR3ltbmFzaXVtIHx8IHNjaG9vbC5pc1ByaW1hcnlTY2hvb2wpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciAoTGBTa29sYW4gbcOlc3RlIGFudGluZ2VuIHZhcmEgZ3ltbmFzaXVtIGVsbGVyIGdydW5kc2tvbGFgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMub3JpZ1NjaG9vbCkge1xyXG4gICAgICBzY2hvb2wuYWNsID0gW1wicm9sZTpVU0VSOlJcIl07XHJcbiAgICAgIHNjaG9vbC5hY2wucHVzaChcclxuICAgICAgICBuZXcgRG9jdW1lbnRBY2Nlc3MoXHJcbiAgICAgICAgICBcInNjaG9vbFJvbGVcIixcclxuICAgICAgICAgIGAke3NjaG9vbC5uYW1lfS9FTVBMT1lFRWAsIFwiV1wiKS50b1N0cmluZygpKTtcclxuICAgICAgci5hZGQoXCJzY2hvb2xzXCIsIHNjaG9vbCk7XHJcbiAgICAgIHRoaXMuYWRkU2Nob29sQnJhbmNoKHNjaG9vbCwgcik7XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMub3JpZ1NjaG9vbC5uYW1lICE9PSB0aGlzLnN0YXRlLm5hbWUpIHtcclxuXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNrb2xhbnMgbmFtbiBmw6VyIGludGUgw6RuZHJhcy4gS29udGFrdGEgVmVtZW5kbyBBQi5cIilcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIXNjaG9vbC5vZmZpY2lhbEJyYW5jaElkKSB7XHJcbiAgICAgICAgc2Nob29sLm9mZmljaWFsQnJhbmNoSWQgPSBjcmVhdGVVVUlEKCk7XHJcbiAgICAgICAgdGhpcy5hZGRTY2hvb2xCcmFuY2goc2Nob29sLCByKTtcclxuICAgICAgfVxyXG4gICAgICByLnB1dChcInNjaG9vbHNcIiwgc2Nob29sKTtcclxuICAgIH1cclxuXHJcbiAgICBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5iYXRjaChyLm11dGF0aW9uUmVxdWVzdHMpO1xyXG5cclxuICAgIGxvY2F0aW9uLmhhc2ggPSBcIiMvc2Nob29sc1wiO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhZGRTY2hvb2xCcmFuY2goc2Nob29sOiB7IHRhZ3M6IHN0cmluZ1tdOyBuYW1lOiBzdHJpbmc7IGlzUHJpbWFyeVNjaG9vbD86IGJvb2xlYW47IGlzR3ltbmFzaXVtPzogYm9vbGVhbjsgb2ZmaWNpYWxCcmFuY2hJZDogc3RyaW5nOyBjb3Vyc2VzPzogQ291cnNlW107IGFjdGl2ZUNvdXJzZXM/OiBDb3Vyc2VbXTsgaWQ6IHN0cmluZzsgYWNsPzogc3RyaW5nW107IGRhdGVUaW1lPzogbnVtYmVyOyB0cmVlUGFyZW50SWQ/OiBzdHJpbmc7ICRldGFnPzogc3RyaW5nOyAkbWV0YT86IFwiYWRkXCIgfCBcInJlZlwiIHwgXCJ1cGRhdGVcIiB8IFwiYWRkaW5nXCIgfCBcInVwZGF0aW5nXCIgfCBcImRlbGV0aW5nXCIgfCBcImRlbGV0ZWRcIjsgfSwgcjogQmF0Y2hSdW5uZXIpIHtcclxuICAgIGNvbnN0IGJyYW5jaDogQnJhbmNoID0ge1xyXG4gICAgICBpZDogc2Nob29sLm9mZmljaWFsQnJhbmNoSWQsXHJcbiAgICAgIG5hbWU6IHNjaG9vbC5uYW1lLFxyXG4gICAgICBzY2hvb2xJZDogc2Nob29sLmlkLFxyXG4gICAgICBhY2w6IFtcclxuICAgICAgICBcInJvbGU6VVNFUjpSXCIsXHJcbiAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwic2Nob29sUm9sZVwiLCBgJHtzY2hvb2wubmFtZX0vRU1QTE9ZRUVgLCBcIldcIikudG9TdHJpbmcoKVxyXG4gICAgICBdXHJcbiAgICB9O1xyXG4gICAgci5hZGQoXCJicmFuY2hlc1wiLCBicmFuY2gpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZGVsZXRlU2Nob29sKCkge1xyXG4gICAgaWYgKHByb21wdChMYMOEciBkdSBzw6RrZXIgcMOlIGF0dCB0YSBib3J0IHNrb2xhbiBcIiR7dGhpcy5zdGF0ZS5uYW1lfVwiPyBTa3JpdiBza29sYW5zIGV4YWt0YSBuYW1uIGbDtnIgYXR0IGJla3LDpGZ0YWApID09PSB0aGlzLnN0YXRlLm5hbWUgKSB7XHJcbiAgICAgIGNvbnN0IHNjaG9vbEJyYW5jaCA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8QnJhbmNoPihcImJyYW5jaGVzXCIsIHtcclxuICAgICAgICBpZHM6IFt0aGlzLnN0YXRlLm9mZmljaWFsQnJhbmNoSWRdLFxyXG4gICAgICAgIGluY2x1ZGU6IFwiYXBwcm92ZWRDaGlsZHJlblwiLFxyXG4gICAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXVxyXG4gICAgICB9KTtcclxuICAgICAgY29uc3QgYnIgPSBuZXcgQmF0Y2hSdW5uZXIoKTtcclxuICAgICAgYnIuZGVsZXRlKFwic2Nob29sc1wiLCB0aGlzLnN0YXRlLmlkKTtcclxuICAgICAgc2Nob29sQnJhbmNoWzBdLmFwcHJvdmVkQ2hpbGRyZW4uZm9yRWFjaCgoe2lkfSkgPT4ge1xyXG4gICAgICAgIGJyLmRlbGV0ZShcImJyYW5jaGVzXCIsIGlkKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGJyLmRlbGV0ZShcImJyYW5jaGVzXCIsIHRoaXMuc3RhdGUub2ZmaWNpYWxCcmFuY2hJZCk7XHJcbiAgICAgIGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmJhdGNoKGJyLm11dGF0aW9uUmVxdWVzdHMpO1xyXG4gICAgICBsb2NhdGlvbi5oYXNoPSBcIiMvc2Nob29sc1wiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWxlcnQoXCJTa29sYW4gdG9ncyBpbnRlIGJvcnQgZWZ0ZXJzb20gZGV0IG5hbW4gZHUgYW5nYXYgaW50ZSBzdMOkbW1lci5cIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IHRpdGxlLCBpZCB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IGVkaXRFeGlzdGluZyA9ICEhaWQ7XHJcbiAgICBjb25zdCBzY2hvb2wgPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qgb3JpZ1NjaG9vbCA9IHRoaXMub3JpZ1NjaG9vbDtcclxuICAgIGNvbnN0IGlzQWRtaW4gPSBlbnYuY3VycmVudFVzZXIucm9sZXMuc29tZShyb2xlID0+IHJvbGUgPT09IFwiQURNSU5cIik7XHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0XCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICA8aDI+e3RpdGxlfTwvaDI+XHJcbiAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPk5hbW46PC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBhdXRvRm9jdXM9eyFzY2hvb2wgfHwgIXNjaG9vbC5uYW1lfVxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshaXNBZG1pbiB8fCBlZGl0RXhpc3Rpbmd9XHJcbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICAgICAgc2l6ZT17NTB9XHJcbiAgICAgICAgICAgICAgdmFsdWU9e3NjaG9vbCA/IHNjaG9vbC5uYW1lIDogXCJcIn1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7IG5hbWU6IGV2LnRhcmdldC52YWx1ZSB9KX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlZpc25pbmdzbmFtbjo8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1cz17c2Nob29sICYmICFzY2hvb2wuZGlzcGxheU5hbWV9XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFpc0FkbWlufVxyXG4gICAgICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgICAgIHNpemU9ezUwfVxyXG4gICAgICAgICAgICAgIHZhbHVlPXtzY2hvb2wgPyBzY2hvb2wuZGlzcGxheU5hbWUgOiBcIlwifVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHsgZGlzcGxheU5hbWU6IGV2LnRhcmdldC52YWx1ZSB9KX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAge3NjaG9vbCAmJiBzY2hvb2wuaXNHeW1uYXNpdW0gPyA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+RURTIG5hbW4gKGd5bW5hc2l1bSk6PC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshaXNBZG1pbn1cclxuICAgICAgICAgICAgICB0YWJJbmRleD17MX1cclxuICAgICAgICAgICAgICBzaXplPXs1MH1cclxuICAgICAgICAgICAgICB2YWx1ZT17c2Nob29sID8gc2Nob29sLmVkc1NjaG9vbE5hbWVHeW1uIDogXCJcIn1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7IGVkc1NjaG9vbE5hbWVHeW1uOiBldi50YXJnZXQudmFsdWUgfSl9IC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PiA6IG51bGx9XHJcbiAgICAgICAge3NjaG9vbCAmJiBzY2hvb2wuaXNQcmltYXJ5U2Nob29sID8gPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPkVEUyBuYW1uIChncnVuZHNrb2xhKTo8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFpc0FkbWlufVxyXG4gICAgICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgICAgIHNpemU9ezUwfVxyXG4gICAgICAgICAgICAgIHZhbHVlPXtzY2hvb2wgPyBzY2hvb2wuZWRzU2Nob29sTmFtZVByaW0gOiBcIlwifVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHsgZWRzU2Nob29sTmFtZVByaW06IGV2LnRhcmdldC52YWx1ZSB9KX0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+IDogbnVsbH1cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+VHlwOjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgbmFtZT1cInNjaG9vbFR5cGVQcmltYXJ5XCJcclxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWlzQWRtaW59XHJcbiAgICAgICAgICAgICAgY2hlY2tlZD17c2Nob29sICYmIHNjaG9vbC5pc1ByaW1hcnlTY2hvb2x9XHJcbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICAgICAgdmFsdWU9XCJwcmltYXJ5XCJcclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzUHJpbWFyeVNjaG9vbDogZXYudGFyZ2V0LmNoZWNrZWQgfSl9IC8+XHJcbiAgICAgICAgICAgICZuYnNwO0dydW5kc2tvbGFcclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgbmFtZT1cInNjaG9vbFR5cGVHeW1uYXNpdW1cIlxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshaXNBZG1pbn1cclxuICAgICAgICAgICAgICBjaGVja2VkPXtzY2hvb2wgJiYgc2Nob29sLmlzR3ltbmFzaXVtfVxyXG4gICAgICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgICAgIHZhbHVlPVwiZ3ltbmFzaXVtXCJcclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzR3ltbmFzaXVtOiBldi50YXJnZXQuY2hlY2tlZCB9KX0gLz5cclxuICAgICAgICAgICAgJm5ic3A7R3ltbmFzaXVtXHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxici8+XHJcbiAgICAgICAge2lzQWRtaW4gJiYgZWRpdEV4aXN0aW5nICYmIDxkaXYgdGFiSW5kZXg9ezJ9IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9eygpID0+XHJcbiAgICAgICAgICB0aGlzLmRlbGV0ZVNjaG9vbCgpLmNhdGNoKHNob3dFcnJvcil9PlxyXG4gICAgICAgICAgVGEgYm9ydCBza29sYVxyXG4gICAgICAgIDwvZGl2Pn1cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1bGwtcmlnaHRcIj4mbmJzcDs8L2Rpdj5cclxuICAgICAgICA8TGluayBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiB0bz1cIi9zY2hvb2xzXCI+XHJcbiAgICAgICAgICBBdmJyeXRcclxuICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgXHJcbiAgICAgICAge2lzQWRtaW4gJiYgPGEgdGFiSW5kZXg9ezF9IGNsYXNzTmFtZT17XCJidG4gYnRuLWxhcmdlXCJ9IG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgIGlmIChvcmlnU2Nob29sICYmIG9yaWdTY2hvb2wubmFtZSAhPT0gc2Nob29sLm5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKCFjb25maXJtKExgw4RyIGR1IHPDpGtlciBww6UgYXR0IGR1IHZpbGwgZMO2cGEgb20gc2tvbGFuPyBEZXR0YSBww6V2ZXJrYXIgcG9ydGFsZW5zIGZ1bmt0aW9uIGbDtnIgbMOkcmFyZSBvY2ggZWxldmVyIHNvbSB0aWxsaMO2ciBza29sYW4uIE5hbW5ldCBtw6VzdGUgc3TDpG1tYSBleGFrdCDDtnZlcmVucyBtZWQgbmFtbmdpdm5pbmdlbiBhdiBza29sYW4gcMOlIGFudsOkbmRhcm9iamVrdGVuLlxyXG5cclxuRGV0IHNvbSBow6RuZGVyIGFubmFycyDDpHIgYXR0IGVsZXZlciBvY2ggbMOkcmFyZSBww6Ugc2tvbGFuIGludGUgbMOkbmdyZSBoaXR0YXIgbsOlZ3JhIGt1cnNlci5cclxuXHJcbkJsaXIgZGV0IGZlbCBrYW4gZHUgZG9jayBhbGx0aWQgYmFyYSBkw7ZwYSB0aWxsYmFrYSBza29sYW5zIG5hbW4uYCkpIHtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuc2F2ZSgpLmNhdGNoKHNob3dFcnJvcik7XHJcbiAgICAgICAgfX0+U3BhcmE8L2E+fVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PjtcclxuICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBMaW5rLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBDb3Vyc2VCYW5uZXIgfSBmcm9tIFwiLi4vY291cnNlcy9jb3Vyc2UtYmFubmVyXCI7XHJcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xyXG5pbXBvcnQgeyBTaG93U3ViamVjdElubmVyIH0gZnJvbSAnLi9zaG93LXN1YmplY3QtaW5uZXInO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBpZDogc3RyaW5nXHJcbiAgZmVlZGJhY2tVcmw6IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIHN1YmplY3Q6IFN1YmplY3RcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNob3dTdWJqZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge3N1YmplY3Q6IG51bGx9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgdGhpcy5sb2FkKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkKCkge1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmdldDxTdWJqZWN0Pignc3ViamVjdHMnLCB0aGlzLnByb3BzLmlkLCB7IGluY2x1ZGU6ICdjb3Vyc2VUZW1wbGF0ZXMnIH0pO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN1YmplY3QgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUuc3ViamVjdCkgcmV0dXJuIDxwPjxTcGlubmVyIC8+PC9wPjtcclxuICAgIGNvbnN0IHsgbmFtZSwgY29kZSwgY291cnNlVGVtcGxhdGVzLCBzY2hvb2xUeXBlIH0gPSB0aGlzLnN0YXRlLnN1YmplY3Q7XHJcbiAgICByZXR1cm4gPGRpdj48Q291cnNlQmFubmVyXHJcbiAgICAgIHRpdGxlPXtuYW1lfVxyXG4gICAgICBhY3RpdmVQYWdlPVwic3ViamVjdHNcIlxyXG4gICAgICByb3V0ZXM9e3tmZWVkYmFjazogdGhpcy5wcm9wcy5mZWVkYmFja1VybH19XHJcbiAgICAgICAvPlxyXG4gICAgICAgPFNob3dTdWJqZWN0SW5uZXIgaWQ9e3RoaXMucHJvcHMuaWR9IC8+XHJcbiAgICA8L2Rpdj47XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEtlZEJhY2tlbmRSZXBvIH0gZnJvbSBcImtlZGJhY2tlbmQvcmVwb1wiO1xyXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBDb3Vyc2VJbnN0YW5jZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHVibGlzaENvdXJzZUFyZ3VtZW50cyB7XHJcbiAgc2Nob29sOiBzdHJpbmc7XHJcbiAgZHJhZnRSZXBvOiBLZWRCYWNrZW5kUmVwbztcclxuICBjb3Vyc2U6IENvdXJzZUluc3RhbmNlO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHVibGlzaENvdXJzZSh7c2Nob29sLCBkcmFmdFJlcG8sIGNvdXJzZX06IFB1Ymxpc2hDb3Vyc2VBcmd1bWVudHMpIHtcclxuICBsZXQgZGVzdGluYXRpb25SZXBvOiBLZWRCYWNrZW5kUmVwbztcclxuICBpZiAoc2Nob29sID09PSBcInN0YW5kYXJkXCIpIHtcclxuICAgIC8vIEVkaXRpbmcgU3RhbmRhcmQgU2Nob29sIHNob3VsZCBtZXJnZSB0byByZWFsaXR5LlxyXG4gICAgZHJhZnRSZXBvLm1lcmdlKCk7XHJcbiAgICBkZXN0aW5hdGlvblJlcG8gPSBkYjtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICAvLyBFZGl0aW5nIGNlcnRhaW4gc2Nob29sIHNob3VsZCBtZXJnZSB0byBzY2hvb2wgYnJhbmNoLlxyXG4gICAgY29uc3Qgc2Nob29sQnJhbmNoSWQgPSBhd2FpdCBkYi5zY2hvb2xzLm5hbWUoc2Nob29sKS5zaW5nbGUoKS5tYXAoc2Nob29sID0+IHNjaG9vbC5vZmZpY2lhbEJyYW5jaElkKS5sb2FkKCk7XHJcbiAgICBkcmFmdFJlcG8ubWVyZ2Uoc2Nob29sQnJhbmNoSWQpO1xyXG4gICAgZGVzdGluYXRpb25SZXBvID0gZGIuYnJhbmNoKHNjaG9vbEJyYW5jaElkKTtcclxuICB9XHJcbiAgZGVzdGluYXRpb25SZXBvLmNvdXJzZUluc3RhbmNlcy51cGRhdGUoY291cnNlLCB7XHJcbiAgICBtb2RpZmllZERhdGU6IERhdGUubm93KCksXHJcbiAgICBtb2RpZmllZEJ5OiB7XHJcbiAgICAgIG5hbWU6IGVudi5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgdXJsOiBgbWFpbHRvOiR7ZW52LmN1cnJlbnRVc2VyLm1haWx9YFxyXG4gICAgfVxyXG4gIH0pO1xyXG4gIC8vYXdhaXQgZGIuc2F2ZU5vdygpO1xyXG4gIC8vaGlzdG9yeS5wdXNoKGAvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2VJZH0vdGFicy8ke2FjdGl2ZVRhYiB8fCAnJCd9YCk7XHJcbn1cclxuXHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIExpbmssIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IENvdXJzZUJhbm5lciB9IGZyb20gXCIuLi9jb3Vyc2VzL2NvdXJzZS1iYW5uZXJcIjtcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zcGlubmVyXCI7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGlkOiBzdHJpbmdcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBzdWJqZWN0OiBTdWJqZWN0XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaG93U3ViamVjdElubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge3N1YmplY3Q6IG51bGx9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgdGhpcy5sb2FkKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkKCkge1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmdldDxTdWJqZWN0Pignc3ViamVjdHMnLCB0aGlzLnByb3BzLmlkLCB7IGluY2x1ZGU6ICdjb3Vyc2VUZW1wbGF0ZXMnIH0pO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN1YmplY3QgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUuc3ViamVjdCkgcmV0dXJuIDxwPjxTcGlubmVyIC8+PC9wPjtcclxuICAgIGNvbnN0IHsgbmFtZSwgY29kZSwgY291cnNlVGVtcGxhdGVzLCBzY2hvb2xUeXBlIH0gPSB0aGlzLnN0YXRlLnN1YmplY3Q7XHJcbiAgICByZXR1cm4gPGRpdj5cclxuICAgICAge3NjaG9vbFR5cGUgPT09ICdwcmltYXJ5JyA/IDw+XHJcbiAgICAgICAgPGgyPkdydW5kc2tvbGXDpG1uZXQge25hbWV9ICh7Y29kZX0pPC9oMj5cclxuICAgICAgICA8dWwgY2xhc3NOYW1lPVwiZW50aXR5LWxpc3RcIj5cclxuICAgICAgICAgIHtjb3Vyc2VUZW1wbGF0ZXMubWFwKCh7aWQsIGNvZGUsIHB1Ymxpc2hhYmxlLCBwb2ludHMsIHNjaG9vbEdyYWRlfSkgPT5cclxuICAgICAgICAgIDxsaSBrZXk9e2lkfSBjbGFzc05hbWU9XCJjb21wbGV0ZVwiPlxyXG4gICAgICAgICAgICB7bmFtZX0gZsO2ciDDpXJza3VycyB7c2Nob29sR3JhZGV9XHJcbiAgICAgICAgICA8L2xpPil9XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC8+ICA6IDw+XHJcbiAgICAgICAgPGgyPkt1cnNlciBmw7ZyIMOkbW5ldCB7bmFtZX0gKHtjb2RlfSk8L2gyPlxyXG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJlbnRpdHktbGlzdFwiPlxyXG4gICAgICAgICAge2NvdXJzZVRlbXBsYXRlcy5tYXAoKHtpZCwgbmFtZSwgY29kZSwgcHVibGlzaGFibGUsIHBvaW50c30pID0+XHJcbiAgICAgICAgICA8bGkga2V5PXtpZH0gY2xhc3NOYW1lPVwiY29tcGxldGVcIj5cclxuICAgICAgICAgICAge25hbWV9IC0ge3BvaW50c31wXHJcbiAgICAgICAgICA8L2xpPil9XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC8+fVxyXG4gICAgPC9kaXY+O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZXJzIH0gZnJvbSAnLi4vZGF0YS91c2Vycyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ2hvb3NlVXNlcigpIHtcclxuICBsZXQgc2VsZWN0O1xyXG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dFwiPlxyXG4gICAgPGgyPlbDpGxqIGFudsOkbmRhcmU8L2gyPlxyXG4gICAgPHRhYmxlIGNsYXNzTmFtZT1cImxvZ2luLXRhYmxlXCI+PHRoZWFkPjx0cj5cclxuICAgICAgPHRoPk5hbW48L3RoPlxyXG4gICAgICA8dGg+Um9sbGVyPC90aD5cclxuICAgICAgPHRoPkUtcG9zdDwvdGg+XHJcbiAgICAgIDx0aD5Ta29sYTwvdGg+XHJcbiAgICA8L3RyPjwvdGhlYWQ+XHJcbiAgICAgIDx0Ym9keT5cclxuICAgICAgICB7dXNlcnMubWFwKCh7IHVzZXJuYW1lLCBkaXNwbGF5TmFtZSwgbWFpbCwgc2Nob29sLCByb2xlcyB9KSA9PlxyXG4gICAgICAgICAgPHRyIGtleT17bWFpbH0gb25DbGljaz17KCkgPT4gbG9jYXRpb24uc2VhcmNoID0gYD91c2VyPSR7dXNlcm5hbWV9YH0+XHJcbiAgICAgICAgICAgIDx0ZD57ZGlzcGxheU5hbWV9PC90ZD5cclxuICAgICAgICAgICAgPHRkIHN0eWxlPXtyb2xlcy5sZW5ndGggPT09IDAgPyB7IGZvbnRTdHlsZTogJ2l0YWxpYycgfSA6IHt9fT57cm9sZXMubGVuZ3RoID09PSAwID8gXCJzYWtuYXIgcm9sbGVyXCIgOiByb2xlcy5qb2luKCcsICcpfTwvdGQ+XHJcbiAgICAgICAgICAgIDx0ZD57bWFpbH08L3RkPlxyXG4gICAgICAgICAgICA8dGQgc3R5bGU9e3NjaG9vbCA/IHt9IDogeyBmb250U3R5bGU6ICdpdGFsaWMnIH19PntzY2hvb2wgfHwgXCJzYWtuYXIgc2tvbGFcIn08L3RkPlxyXG4gICAgICAgICAgPC90cj5cclxuICAgICAgICApfVxyXG4gICAgICA8L3Rib2R5PjwvdGFibGU+XHJcbiAgPC9kaXY+XHJcbn07XHJcbiIsImltcG9ydCB7IGRiLCBnbG9iYWxJZCB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvZGInO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxpc3RDb3Vyc2VJbnN0YW5jZXMoKSB7XHJcbiAgcmV0dXJuIGRiLmNvdXJzZUluc3RhbmNlcy5oYXNFZGdlc0Zyb20oW2dsb2JhbElkXSk7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IERpYWxvZ0NvbnRhaW5lciB9IGZyb20gXCIuLi9pbnRlcmZhY2VzL2NvdXJzZS1lZGl0b3ItaG9zdFwiO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgRWRpdFNjaG9vbCB9IGZyb20gJy4vZWRpdC1zY2hvb2wnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IGFjdEFzIH0gZnJvbSBcIi4uLy4uLy4uL2FjY2Vzcy1jb250cm9sXCI7XHJcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzY2hvb2xzPzogU2Nob29sW11cclxuICB2aWV3Q291cnNlVXJsOiBzdHJpbmdcclxuICB0eXBlOiAnZ3ltbmFzaXVtJyB8ICdwcmltYXJ5J1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRWRpdGFibGVTY2hvb2xMaXN0ID0gKHByb3BzOiBQcm9wcykgPT4ge1xyXG4gIGNvbnN0IHsgc2Nob29scywgdmlld0NvdXJzZVVybCB9ID0gcHJvcHM7XHJcbiAgY29uc3QgaXNBZG1pbiA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gXCJBRE1JTlwiKTtcclxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJlZGl0YWJsZS1zY2hvb2wtbGlzdFwiPlxyXG4gICAgPGRpdj5cclxuICAgICAge3NjaG9vbHMgPyA8dGFibGU+XHJcbiAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAge3NjaG9vbHMubWFwKHNjaG9vbCA9PlxyXG4gICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17c2Nob29sLmlkfT5cclxuICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICA8TGluayBjbGFzc05hbWU9XCJlZGl0SXRlbVwiIHRvPXtgL3NjaG9vbHMvJHtzY2hvb2wuaWR9L2VkaXRgfT48L0xpbms+XHJcbiAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICA8cD57c2Nob29sLm5hbWV9PC9wPlxyXG4gICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgPHA+PGEgc3R5bGU9e3tjdXJzb3I6ICdwb2ludGVyJ319IG9uQ2xpY2s9eygpPT5hY3RBcyh7cm9sZTogXCJFTVBMT1lFRVwiLCBzY2hvb2w6IHNjaG9vbC5uYW1lfSl9PkFnZXJhIHNvbSBsw6RyYXJlIHDDpSBkZW5uYSBza29sYTwvYT48L3A+XHJcbiAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICA8cD48YSBzdHlsZT17e2N1cnNvcjogJ3BvaW50ZXInfX0gb25DbGljaz17KCk9PmFjdEFzKHtyb2xlOiBcIlNUVURFTlRcIiwgc2Nob29sOiBzY2hvb2wubmFtZSwgdXJsOiB2aWV3Q291cnNlVXJsfSl9PkFnZXJhIHNvbSBlbGV2IHDDpSBkZW5uYSBza29sYTwvYT48L3A+XHJcbiAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgPC90cj4pfVxyXG4gICAgICAgIDwvdGJvZHk+XHJcbiAgICAgIDwvdGFibGU+IDogPHA+PFNwaW5uZXIgLz5WLmcuIHbDpG50YSBtZWRhbiBza29sb3IgbGFkZGFzPC9wPn1cclxuICAgIDwvZGl2PlxyXG4gICAgPGJyIC8+XHJcbiAgICB7c2Nob29scyAmJiBpc0FkbWluICYmIDxMaW5rIHRvPXtgL3NjaG9vbHMvbmV3LyR7cHJvcHMudHlwZX1gfSBjbGFzc05hbWU9XCJidG5cIj57XHJcbiAgICAgICAgcHJvcHMudHlwZSA9PSAnZ3ltbmFzaXVtJyA/IExgTMOkZ2cgdGlsbCBneW1uYXNpZXNrb2xhYCA6XHJcbiAgICAgICAgcHJvcHMudHlwZSA9PSAncHJpbWFyeScgPyBMYEzDpGdnIHRpbGwgZ3J1bmRza29sYWAgOlxyXG4gICAgICAgIExgTMOkZ2cgdGlsbCBza29sYWB9PC9MaW5rPn1cclxuICA8L2RpdiA+XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBDb3Vyc2VCYW5uZXIgfSBmcm9tIFwiLi4vY291cnNlcy9jb3Vyc2UtYmFubmVyXCI7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgU2Nob29sIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBFZGl0YWJsZVNjaG9vbExpc3QgfSBmcm9tICcuL2VkaXRhYmxlLXNjaG9vbC1saXN0JztcclxuaW1wb3J0IHsgc2hvd0Vycm9yLCBjb21wYXJlUHJvcCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcclxuICBmZWVkYmFja1VybDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIHNjaG9vbHM6IFNjaG9vbFtdIHwgbnVsbFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2Nob29scyA9IChwcm9wczogUHJvcHMpID0+IDxkaXYgc3R5bGU9e3sgb3V0bGluZTogMCB9fT5cclxuICA8Q291cnNlQmFubmVyIHRpdGxlPVwiU2tvbG9yXCIgYWN0aXZlUGFnZT1cInNjaG9vbHNcIiByb3V0ZXM9e3tmZWVkYmFjazogcHJvcHMuZmVlZGJhY2tVcmx9fSAvPlxyXG4gIDxTY2hvb2xzV2l0aG91dEJhbm5lciB2aWV3Q291cnNlVXJsPXtwcm9wcy52aWV3Q291cnNlVXJsfSAvPlxyXG48L2Rpdj5cclxuXHJcbmV4cG9ydCBjbGFzcyBTY2hvb2xzV2l0aG91dEJhbm5lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQaWNrPFByb3BzLCBcInZpZXdDb3Vyc2VVcmxcIj4sU3RhdGU+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHNjaG9vbHM6IG51bGxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5sb2FkKCkuY2F0Y2goZXJyID0+IHNob3dFcnJvcihlcnIubWVzc2FnZSB8fCBlcnIpKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWQoKSB7XHJcbiAgICBjb25zdCBzY2hvb2xzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTY2hvb2w+KFwic2Nob29sc1wiKTtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBzY2hvb2xzIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyBzY2hvb2xzIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgc2Nob29scyAmJiBzY2hvb2xzLnNvcnQoY29tcGFyZVByb3AoXCJuYW1lXCIpKTtcclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXRcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlY29udGVudCBzdi1sYXlvdXQgc3Ytc3BhY2VyLTIwcHh2dCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgIHtzY2hvb2xzID8gPD5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPGgyPkd5bW5hc2llc2tvbG9yPC9oMj5cclxuICAgICAgICAgIDxFZGl0YWJsZVNjaG9vbExpc3RcclxuICAgICAgICAgICAgc2Nob29scz17c2Nob29scy5maWx0ZXIoc2Nob29sID0+IHNjaG9vbC5pc0d5bW5hc2l1bSl9XHJcbiAgICAgICAgICAgIHZpZXdDb3Vyc2VVcmw9e3RoaXMucHJvcHMudmlld0NvdXJzZVVybH1cclxuICAgICAgICAgICAgdHlwZT1cImd5bW5hc2l1bVwiIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxoMj5HcnVuZHNrb2xvcjwvaDI+XHJcbiAgICAgICAgICA8RWRpdGFibGVTY2hvb2xMaXN0XHJcbiAgICAgICAgICAgIHNjaG9vbHM9e3NjaG9vbHMuZmlsdGVyKHNjaG9vbCA9PiBzY2hvb2wuaXNQcmltYXJ5U2Nob29sKX1cclxuICAgICAgICAgICAgdmlld0NvdXJzZVVybD17dGhpcy5wcm9wcy52aWV3Q291cnNlVXJsfVxyXG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvPiA6IDxTcGlubmVyIC8+fVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIH1cclxufVxyXG4iLCJcclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvdXJzZUNvZGVzRnJvbVRhZ3ModGFnczogc3RyaW5nW10pIHtcclxuICByZXR1cm4gKHRhZ3MgfHwgW10pXHJcbiAgICAuZmlsdGVyKHRhZyA9PiB0YWcuc3RhcnRzV2l0aChcImNvdXJzZTpcIikpXHJcbiAgICAubWFwKGNvdXJzZVRhZyA9PiBjb3Vyc2VUYWcuc3Vic3RyKFwiY291cnNlOlwiLmxlbmd0aCkpO1xyXG59XHJcbiIsImltcG9ydCB7IEFiaWxpdHksIENlbnRyYWxDb250ZW50LCBLbm93bGVkZ2VSZXF1aXJlbWVudCwgQ291cnNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBWYWx1ZSwgQ29sbGVjdGlvbiwgRW1pdHRlciB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9kYic7XHJcbmltcG9ydCB7IGdldE9yZGVyZWREb2NzIH0gZnJvbSAnLi9vcmRlcmVkLXJlcXVpcmVtZW50cyc7XHJcbmltcG9ydCB7IFdpdGhHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5cclxuXHJcbmV4cG9ydCB0eXBlIENvdXJzZVdpdGhSZXF1aXJlbWVudHMgPSBXaXRoR3JhcGhzPENvdXJzZSwgXCJhYmlsaXRpZXNcIiB8IFwiY2VudHJhbENvbnRlbnRcIiB8IFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCI+O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YW5kYXJkQ291cnNlc1dpdGhPcmRlcmVkUmVxdWlyZW1lbnRzKGNvdXJzZUNvZGVzOiBzdHJpbmdbXSk6IFZhbHVlPENvdXJzZVdpdGhSZXF1aXJlbWVudHNbXT4ge1xyXG4gIGNvbnN0IGNvdXJzZUNvZGVUYWdzID0gY291cnNlQ29kZXMubWFwKGNvZGUgPT4gY29kZS5zdGFydHNXaXRoKCdjb3Vyc2U6JykgPyBjb2RlIDogXCJjb3Vyc2U6XCIgKyBjb2RlKTtcclxuICBpZiAoY291cnNlQ29kZVRhZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gbmV3IEVtaXR0ZXIoW10pO1xyXG4gIHJldHVybiBkYi5jb3Vyc2VzLmluY2x1ZGUoXCJhYmlsaXRpZXNcIiwgXCJjZW50cmFsQ29udGVudFwiLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiKVxyXG4gICAgLnRhZ3MoLi4uY291cnNlQ29kZVRhZ3MpXHJcbiAgICAuZmlsdGVyKGNvdXJzZSA9PiBjb3Vyc2UuaXNUZW1wbGF0ZSkgLy8gQlVHQlVHOiBJbiBLRywgd2Ugd291bGQgbmVlZCB0aGlzIGZpbHRlciwgbm90IEtTLiBOZWVkIGFub3RoZXIgYXV0aG9yaXplZCB3YXkgb2YgZ2V0dGluZyB0aGUgc3RhbmRhcmQgY291cnNlIG9ubHkhXHJcbiAgICAubWFwKGNvdXJzZSA9PiAoe1xyXG4gICAgICAuLi5jb3Vyc2UsXHJcbiAgICAgIGFiaWxpdGllczogZ2V0T3JkZXJlZERvY3MoY291cnNlLmFiaWxpdGllcywgY291cnNlLmFiaWxpdGllc09yZGVyKSxcclxuICAgICAgY2VudHJhbENvbnRlbnQ6IGdldE9yZGVyZWREb2NzKGNvdXJzZS5jZW50cmFsQ29udGVudCwgY291cnNlLmNlbnRyYWxDb250ZW50T3JkZXIpLFxyXG4gICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IGdldE9yZGVyZWREb2NzKGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMsIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlcilcclxuICAgIH0pKS50b1ZhbHVlKClcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFJlc3RDbGllbnRTdGF0dXMgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgbGl2ZVF1ZXJ5VmlldyB9IGZyb20gJy4vbGl2ZS1xdWVyeS12aWV3JztcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IEVsbGlwc2lzTG9hZGVyIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvZWxsaXBzaXMtbG9hZGVyJztcclxuXHJcbmV4cG9ydCBjb25zdCBMb2FkaW5nSW5kaWNhdG9yID0gbGl2ZVF1ZXJ5VmlldygoKSA9PlxyXG4gIGVudi5rZWRCYWNrZW5kQ2xpZW50Lmh0dHAuc3RhdHVzLmNvbWJpbmVMYXRlc3QoZW52LmVkc0NsaWVudC5odHRwLnN0YXR1cylcclxuICAubWFwKChba2VkQmFja2VuZFN0YXR1cywgZWRzU3RhdHVzXSk9PjxkaXYgY2xhc3NOYW1lPVwibG9hZGluZy1pbmRpY2F0b3JcIj48ZGl2IGNsYXNzTmFtZT1cImluZGljYXRvclwiPlxyXG4gICAge2tlZEJhY2tlbmRTdGF0dXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zID4gMCB8fCBlZHNTdGF0dXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zID4gMCA/XHJcbiAgICAgIDxTcGlubmVyIC8+IDogdW5kZWZpbmVkfVxyXG48L2Rpdj48L2Rpdj4pKTtcclxuIiwiZXhwb3J0IGludGVyZmFjZSBTa29sdmVya2V0U3ViamVjdCB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHNjaG9vbFR5cGU6ICdneW1uYXNpdW0nIHwgJ3ByaW1hcnknO1xyXG4gIGNvZGU6IHN0cmluZztcclxuICBwdXJwb3NlOiBzdHJpbmc7XHJcbiAgY291cnNlczogU2tvbHZlcmtldENvdXJzZVtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNrb2x2ZXJrZXRDb3Vyc2Uge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgY29kZTogc3RyaW5nO1xyXG4gICAgY2VudHJhbENvbnRlbnQ6IHN0cmluZztcclxuICAgIHllYXI/OiAnMS0zJyB8ICc0LTYnIHwgJzctOSc7XHJcbiAgICAvL2NlbnRyYWxDb250ZW50OiBBcnJheTx7eWVhcj86IHN0cmluZywgdGV4dDogc3RyaW5nfT47XHJcbiAgICBwb2ludHM6IG51bWJlcjtcclxuICAgIGtub3dubGVkZ2VSZXF1aXJlbWVudHM6IEFycmF5PHtncmFkZVN0ZXA6IHN0cmluZywgdGV4dDogc3RyaW5nfT47XHJcbiAgICAvL2tub3dubGVkZ2VSZXF1aXJlbWVudHM6IEFycmF5PHtncmFkZVN0ZXA6IHN0cmluZywgdGV4dDogc3RyaW5nLCB5ZWFyPzogbnVtYmVyfT47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNrb2x2ZXJrZXRZZWFycyAoaW5ZZWFyOiBzdHJpbmcpIDogQXJyYXk8JzEtMycgfCAnNC02JyB8ICc3LTknPiB7XHJcbiAgc3dpdGNoKGluWWVhci50cmltKCkpIHtcclxuICAgIGNhc2UgJzMnOlxyXG4gICAgY2FzZSAnMS0zJzpcclxuICAgICAgcmV0dXJuIFsnMS0zJ107XHJcbiAgICBjYXNlICc2JzpcclxuICAgIGNhc2UgJzQtNic6XHJcbiAgICAgIHJldHVybiBbJzQtNiddO1xyXG4gICAgY2FzZSAnNy05JzpcclxuICAgIGNhc2UgJzknOlxyXG4gICAgICByZXR1cm4gWyc3LTknXTtcclxuICAgIC8vIFNwZWNpYWxzXHJcbiAgICBjYXNlICcxJzogcmV0dXJuIFtcIjEtM1wiXTsgLy8gRsO2cmVrb21tZXIgaSDDpG1uZW5hIFwiU3ZlbnNrYVwiIG9jaCBcIlN2ZW5za2Egc29tIGFuZHJhc3Byw6VrXCJcclxuICAgIGNhc2UgJzFzJzogcmV0dXJuIFtcIjEtM1wiXTsgLy8gRsO2cmVrb21tZXIgaSDDpG1uZW5hIFwiU3ZlbnNrYVwiIG9jaCBcIlN2ZW5za2Egc29tIGFuZHJhc3Byw6VrXCJcclxuICAgIGNhc2UgJzEtNic6IHJldHVybiBbXCIxLTNcIiwgXCI0LTZcIl07IC8vIEbDtnJla29tbWVyIGkgw6RtbmV0IFwiSGVtLSBvY2gga29uc3VtZW50a3Vuc2thcFwiXHJcbiAgICBjYXNlICc0LTknOiByZXR1cm4gW1wiNC02XCIsIFwiNy05XCJdOyAvLyBGw7ZyZWtvbW1lciBpIMOkbW5ldCBcIk1vZGVybmEgc3Byw6VrXCJcclxuICAgIGRlZmF1bHQ6IHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHllYXIgaW4gU2tvbHZlcmtldCBYTUw6ICR7aW5ZZWFyfS4gRXhwZWN0aW5nIDMsNiw5IG9yIDEtMywgNC02LCA3LTlgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3ViamVjdCwgQ291cnNlLCBLbm93bGVkZ2VSZXF1aXJlbWVudCwgQWJpbGl0eSwgQ2VudHJhbENvbnRlbnQsIFRhc2sgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcclxuaW1wb3J0IHsgU3ViamVjdFRvSW1wb3J0LCBDb3Vyc2VUb0ltcG9ydCB9IGZyb20gXCIuLi9zdWJqZWN0LXRvLWltcG9ydFwiO1xyXG5pbXBvcnQgeyBDaGFuZ2UgfSBmcm9tIFwiLi9jaGFuZ2VcIjtcclxuaW1wb3J0IHsgQ291cnNlU2V0IH0gZnJvbSAnLi9jb3Vyc2Utc2V0JztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCwgQmF0Y2hSdW5uZXIsIE11dGF0aW9uUmVxdWVzdCwgTGlzdE9wdGlvbnMgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IEF1dG9WYWx1ZU1hcCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL2F1dG8tdmFsdWUtbWFwJztcclxuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5cclxudHlwZSBJRCA9IHN0cmluZztcclxuXHJcbmZ1bmN0aW9uIGRpZmZTdWJqZWN0R2xvYmFsVGV4dHMoZGJUZXh0TWFwOiBNYXA8c3RyaW5nLCBJRD4sIHhtbFRleHRzOiBzdHJpbmdbXSkge1xyXG4gIGNvbnN0IHJlbW92ZWRJZHMgPSBuZXcgU2V0PElEPigpO1xyXG4gIGNvbnN0IG5ld1RleHRzID0gbmV3IE1hcDxzdHJpbmcsIElEPigpO1xyXG4gIGNvbnN0IGlkc1RvQWRkID0gbmV3IFNldDxJRD4oKTtcclxuXHJcbiAgeG1sVGV4dHMuZm9yRWFjaChuZXdUZXh0ID0+IHtcclxuICAgIG5ld1RleHQgPSBuZXdUZXh0LnRyaW0oKTtcclxuICAgIGlmICghZGJUZXh0TWFwLmhhcyhuZXdUZXh0KSkge1xyXG4gICAgICBjb25zdCBpZCA9IGNyZWF0ZVVVSUQoKTtcclxuICAgICAgY29uc29sZS5sb2coYE5ldyBpZDogJHtpZH0uIFRleHQ6ICR7bmV3VGV4dH1gKTtcclxuICAgICAgbmV3VGV4dHMuc2V0KG5ld1RleHQsIGlkKTtcclxuICAgICAgaWRzVG9BZGQuYWRkKGlkKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5ld1RleHRzLnNldChuZXdUZXh0LCBkYlRleHRNYXAuZ2V0KG5ld1RleHQpKTtcclxuICAgIH1cclxuICB9KTtcclxuXHJcbiAgZm9yIChjb25zdCBbb2xkVGV4dCwgb2xkSWRdIG9mIGRiVGV4dE1hcC5lbnRyaWVzKCkpIHtcclxuICAgIGlmICh4bWxUZXh0cy5pbmRleE9mKG9sZFRleHQpID09PSAtMSkge1xyXG4gICAgICByZW1vdmVkSWRzLmFkZChvbGRJZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcmVtb3ZlZElkcyxcclxuICAgIG5ld1RleHRzLFxyXG4gICAgaWRzVG9BZGRcclxuICB9XHJcbn1cclxuXHJcbmxldCBfZmljdGl2ZU9sZElkID0gMTtcclxuZnVuY3Rpb24gZmljdGl2ZU9sZElkKCkge1xyXG4gIHJldHVybiBcImZpY3RpdmVPbGRJZFwiICsgKCsrX2ZpY3RpdmVPbGRJZCk7XHJcbn1cclxuXHJcbmNvbnN0IHN0b3BXb3JkcyA9IG5ldyBTZXQoXHJcbiAgLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vTWloYWlWYWxlbnRpbi9sdW5yLWxhbmd1YWdlcy9ibG9iL21hc3Rlci9sdW5yLnN2LmpzI0wyNTJcclxuICAoJ2FsbGEgYWxsdCBhdHQgYXYgYmxldiBibGkgYmxpciBibGl2aXQgZGUgZGVtIGRlbiBkZW5uYSBkZXJhcyBkZXNzIGRlc3NhIGRldCBkZXR0YSBkaWcgZGluIGRpbmEgZGl0dCBkdSBkw6RyIGTDpSBlZnRlciBlaiBlbGxlciBlbiBlciBlcmEgZXJ0IGV0dCBmcsOlbiBmw7ZyIGhhIGhhZGUgaGFuIGhhbnMgaGFyIGhlbm5lIGhlbm5lcyBob24gaG9ub20gaHVyIGjDpHIgaSBpY2tlIGluZ2VuIGlub20gaW50ZSBqYWcganUga2FuIGt1bmRlIG1hbiBtZWQgbWVsbGFuIG1lbiBtaWcgbWluIG1pbmEgbWl0dCBtb3QgbXlja2V0IG5pIG51IG7DpHIgbsOlZ29uIG7DpWdvdCBuw6VncmEgb2NoIG9tIG9zcyBww6Ugc2FtbWEgc2VkYW4gc2lnIHNpbiBzaW5hIHNpdHRhIHNqw6RsdiBza3VsbGUgc29tIHPDpSBzw6VkYW4gc8OlZGFuYSBzw6VkYW50IHRpbGwgdW5kZXIgdXBwIHV0IHV0YW4gdmFkIHZhciB2YXJhIHZhcmbDtnIgdmFyaXQgdmFyamUgdmFycyB2YXJ0IHZlbSB2aSB2aWQgdmlsa2Egdmlsa2FzIHZpbGtlbiB2aWxrZXQgdsOlciB2w6VyYSB2w6VydCDDpG4gw6RyIMOldCDDtnZlcicgK1xyXG4gICcga3JpbmcnKSAvLyBUaGlzIGxpbmUgY29udGFpbnMgYWRkaXRpb25hbCBzdG9wLXdvcmRzIG1pc3NpbmcgaW4gbHVuci5zdi5cclxuICAuc3BsaXQoJyAnKSk7XHJcblxyXG5mdW5jdGlvbiBnZXRMZXhlbWVzKGh0bWw6IHN0cmluZyk6IFNldDxzdHJpbmc+IHtcclxuICByZXR1cm4gbmV3IFNldChyZW1vdmVUYWdzKGh0bWwpLnJlcGxhY2UoL1teXFx3XFxzw6XDpMO2XS9naSwgJycpLnRvTG93ZXJDYXNlKCkuc3BsaXQoL1xccy8pXHJcbiAgICAubWFwKGxleGVtZSA9PiBsZXhlbWUudHJpbSgpKVxyXG4gICAgLmZpbHRlcihsZXhlbWUgPT4gISFsZXhlbWUpXHJcbiAgICAuZmlsdGVyKGxleGVtZSA9PiAhc3RvcFdvcmRzLmhhcyhsZXhlbWUpKVxyXG4gICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZVRhZ3MoaHRtbDogc3RyaW5nKTogc3RyaW5nIHtcclxuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcclxuICByZXR1cm4gJycrZGl2LmlubmVyVGV4dDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0SWRzVG9NaWdyYXRlKFxyXG4gIGRiVGV4dHM6IHtpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZ31bXSxcclxuICB4bWxUZXh0czoge2h0bWw6IHN0cmluZywgZ3JhZGVTdGVwPzogc3RyaW5nfVtdLFxyXG4gIG5ld1RleHRzOiBNYXA8c3RyaW5nLCBJRD4sXHJcbiAgdGV4dFR5cGU6IHN0cmluZyxcclxuICBjb3Vyc2U/OiBzdHJpbmcpIDogTWFwPElELCB7XHJcbiAgICBuZXdUZXh0Pzogc3RyaW5nLFxyXG4gICAgbmV3SWQ/OiBJRCxcclxuICAgIG9sZFRleHQ/OiBzdHJpbmcsXHJcbiAgICBncmFkZVN0ZXA/OiBzdHJpbmcsXHJcbiAgICBpc1R5cG9GaXg/OiBib29sZWFuXHJcbiAgfT5cclxue1xyXG4gIGNvbnN0IGlkc1RvTWlncmF0ZSA9IG5ldyBNYXA8SUQsIHtcclxuICAgIG5ld1RleHQ/OiBzdHJpbmcsXHJcbiAgICBuZXdJZD86IElELFxyXG4gICAgb2xkVGV4dD86IHN0cmluZyxcclxuICAgIGdyYWRlU3RlcD86IHN0cmluZyxcclxuICAgIGlzVHlwb0ZpeD86IGJvb2xlYW4sXHJcbiAgICBtYXRjaExldmVsOiBudW1iZXIsXHJcbiAgICBsZXhlbWVzOiBTZXQ8c3RyaW5nPlxyXG4gIH0+KCk7XHJcbiAgZGJUZXh0cyA9IGRiVGV4dHMubWFwKGVudGl0eSA9PiAoey4uLmVudGl0eSwgbmFtZTogZW50aXR5Lm5hbWUudHJpbSgpfSkpLmZpbHRlcigoe25hbWV9KSA9PiAhIW5hbWUpO1xyXG4gIGNvbnN0IHhtbFNldCA9IG5ldyBNYXA8c3RyaW5nLCB7aHRtbDogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9PigpO1xyXG4gIHhtbFRleHRzLmZvckVhY2goaXRlbSA9PiB4bWxTZXQuc2V0KGl0ZW0uaHRtbCwgaXRlbSkpO1xyXG4gIGNvbnN0IGRiU2V0ID0gbmV3IE1hcDxzdHJpbmcsIHtpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZ30+KCk7XHJcbiAgZGJUZXh0cy5mb3JFYWNoKGVudGl0eSA9PiBkYlNldC5zZXQoZW50aXR5Lm5hbWUsIGVudGl0eSkpO1xyXG4gIC8vIFJlbW92ZSB0aG9zZSB3aG8gYWxyZWFkeSBleGlzdHMgaWRlbnRpY2FsbHlcclxuICBkYlRleHRzID0gZGJUZXh0cy5maWx0ZXIoZW50aXR5ID0+ICF4bWxTZXQuaGFzKGVudGl0eS5uYW1lKSk7XHJcbiAgeG1sVGV4dHMgPSB4bWxUZXh0cy5maWx0ZXIoaXRlbSA9PiAhZGJTZXQuaGFzKGl0ZW0uaHRtbCkpO1xyXG5cclxuICAvLyBOb3csIGZvciB0aGUgcmVtYWluZGVyLCB0cnkgdGhlIGJlc3QgdG8gbWFwIG9sZCB0ZXh0cyB0byBuZXcgdGV4dHMsIGFuZCB3aGVuIGRvbmUsIGNoZWNrIGlmIHRoZXJlIGFyZSBuZXcgdGV4dHMgdGhhdCBuZXZlciBnb3QgbWFwcGVkLlxyXG5cclxuICAvLyBTdGFydCBieSBwdXR0aW5nIGFsbCBkYlRleHQgaW50byB0aGUgcmVzdWx0LCB3aXRob3V0IGEgcGFpcmVkIHhtbCB0ZXh0IHlldDpcclxuICBkYlRleHRzLmZvckVhY2goZGJUZXh0ID0+IGlkc1RvTWlncmF0ZS5zZXQoZGJUZXh0LmlkLCB7XHJcbiAgICBncmFkZVN0ZXA6IGRiVGV4dC5ncmFkZVN0ZXAsXHJcbiAgICBvbGRUZXh0OiBkYlRleHQubmFtZSxcclxuICAgIGxleGVtZXM6IGdldExleGVtZXMoZGJUZXh0Lm5hbWUpLFxyXG4gICAgbWF0Y2hMZXZlbDogMFxyXG4gIH0pKTtcclxuICAvLyBUaGVuIHRyeSB0byBwYWlyIGVhY2ggeG1sVGV4dCB0byBhbiBpdGVtIGluIGlkc1RvTWlncmF0ZVxyXG4gIGNvbnN0IHhtbFNwaW5zdGVyczoge2h0bWw6IHN0cmluZywgZ3JhZGVTdGVwPzogc3RyaW5nfVtdID0gW107XHJcbiAgd2hpbGUgKHhtbFRleHRzLmxlbmd0aCA+IDApIHtcclxuICAgIGNvbnN0IHhtbFRleHQgPSB4bWxUZXh0c1swXTtcclxuICAgIGNvbnN0IGJlc3RNYXRjaCA9IGZpbmRCZXN0TWF0Y2goeG1sVGV4dCk7XHJcbiAgICBpZiAoIWJlc3RNYXRjaCkge1xyXG4gICAgICB4bWxTcGluc3RlcnMucHVzaCh4bWxUZXh0KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChiZXN0TWF0Y2gubmV3VGV4dCkge1xyXG4gICAgICAgIC8vIFRocm93IG91dCBleGlzdGluZyBtYXRjaFxyXG4gICAgICAgIHhtbFRleHRzLnB1c2goe2h0bWw6IGJlc3RNYXRjaC5uZXdUZXh0LCBncmFkZVN0ZXA6IGJlc3RNYXRjaC5ncmFkZVN0ZXB9KTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBwYWlyID0gaWRzVG9NaWdyYXRlLmdldChiZXN0TWF0Y2guaWQpO1xyXG4gICAgICAvLyBQYWlyIG15c2VsZiB3aXRoIHRoaXMgbWF0Y2g6XHJcbiAgICAgIHBhaXIubmV3VGV4dCA9IHhtbFRleHQuaHRtbDtcclxuICAgICAgcGFpci5tYXRjaExldmVsID0gYmVzdE1hdGNoLm15TWF0Y2hMZXZlbDtcclxuICAgICAgcGFpci5uZXdJZCA9IG5ld1RleHRzLmdldCh4bWxUZXh0Lmh0bWwpO1xyXG4gICAgfVxyXG4gICAgeG1sVGV4dHMuc2hpZnQoKTtcclxuICB9XHJcbiAgLy8gRm9yIGVhY2ggc3BpbnN0ZXIgKG5ldyB0ZXh0cyB0aGF0IGNvdWxkbid0IGZpbmQgYW55IG1hdGNoIGluIG9sZCB0ZXh0cyksXHJcbiAgLy8gQWRkIHRoZW0gd2l0aCBhbiBmaWN0aXZlIG9sZCBJRCBidXQgb21pdCBvbGRUZXh0IHRvIG1hcmsgaXQgYXMgYSBuZXdjb21lclxyXG4gIHhtbFNwaW5zdGVycy5mb3JFYWNoKHNwaW5zdGVyID0+IHtcclxuICAgIGlkc1RvTWlncmF0ZS5zZXQoZmljdGl2ZU9sZElkKCksIHtcclxuICAgICAgbmV3SWQ6IG5ld1RleHRzLmdldChzcGluc3Rlci5odG1sKSxcclxuICAgICAgbmV3VGV4dDogc3BpbnN0ZXIuaHRtbCxcclxuICAgICAgZ3JhZGVTdGVwOiBzcGluc3Rlci5ncmFkZVN0ZXAsXHJcbiAgICAgIG1hdGNoTGV2ZWw6IDAsXHJcbiAgICAgIGxleGVtZXM6IG5ldyBTZXQ8c3RyaW5nPigpfSlcclxuICB9KTtcclxuXHJcbiAgLy8gTWFyayB0eXBvLWZpeGVzXHJcbiAgaWRzVG9NaWdyYXRlLmZvckVhY2gobWF0Y2ggPT4ge1xyXG4gICAgY29uc3Qge29sZFRleHQsIG5ld1RleHR9ID0gbWF0Y2g7XHJcbiAgICBpZiAob2xkVGV4dCAmJiBuZXdUZXh0KSB7XHJcbiAgICAgIGlmIChbLi4uZ2V0TGV4ZW1lcyhvbGRUZXh0KV0uam9pbignICcpID09PSBbLi4uZ2V0TGV4ZW1lcyhuZXdUZXh0KV0uam9pbignICcpKSB7XHJcbiAgICAgICAgbWF0Y2guaXNUeXBvRml4ID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBjb25zb2xlLmxvZyhcIklkc1RvTWlncmF0ZVwiLCBbLi4uaWRzVG9NaWdyYXRlLnZhbHVlcygpXS5tYXAoKHtvbGRUZXh0LCBsZXhlbWVzfSkgPT4gYCR7Wy4uLmxleGVtZXNdLmpvaW4oJyAnKX06ICR7b2xkVGV4dH1gKSk7XHJcblxyXG4gIHJldHVybiBpZHNUb01pZ3JhdGU7XHJcblxyXG4gIGZ1bmN0aW9uIGZpbmRCZXN0TWF0Y2goeG1sVGV4dDoge2h0bWw6IHN0cmluZywgZ3JhZGVTdGVwPzogc3RyaW5nfSkge1xyXG4gICAgY29uc3QgeG1sTGV4ZW1lcyA9IGdldExleGVtZXMoeG1sVGV4dC5odG1sKTtcclxuICAgIGNvbnN0IHBvc3NpYmxlUGFydG5lcnMgPSBbLi4uaWRzVG9NaWdyYXRlLmVudHJpZXMoKV1cclxuICAgICAgLmZpbHRlcigoW2lkLCB4XSkgPT4geC5ncmFkZVN0ZXAgPT09IHhtbFRleHQuZ3JhZGVTdGVwKVxyXG4gICAgICAubWFwKChbaWQsIHtncmFkZVN0ZXAsIG1hdGNoTGV2ZWwsIG5ld1RleHQsIGxleGVtZXN9XSkgPT4gKHtcclxuICAgICAgICBpZCxcclxuICAgICAgICBncmFkZVN0ZXAsXHJcbiAgICAgICAgbWF0Y2hMZXZlbCxcclxuICAgICAgICBuZXdUZXh0LFxyXG4gICAgICAgIG15TWF0Y2hMZXZlbDogZ2V0TWF0Y2hMZXZlbCh4bWxMZXhlbWVzLCBsZXhlbWVzKVxyXG4gICAgICB9KSkuZmlsdGVyKHBwID0+IHBwLm15TWF0Y2hMZXZlbCA+PSA1MCAmJiAoIXBwLm1hdGNoTGV2ZWwgfHwgcHAubWF0Y2hMZXZlbCA8IHBwLm15TWF0Y2hMZXZlbCkpO1xyXG4gICAgcmV0dXJuIHBvc3NpYmxlUGFydG5lcnMuc29ydCgoYSwgYikgPT4gYi5teU1hdGNoTGV2ZWwgLSBhLm15TWF0Y2hMZXZlbClbMF07IC8vIGhpZ2hlc3QgZmlyc3QuXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRNYXRjaExldmVsKGxleGVtZXMxOiBTZXQ8c3RyaW5nPiwgbGV4ZW1lczI6IFNldDxzdHJpbmc+KSB7XHJcbiAgICBpZiAobGV4ZW1lczEuc2l6ZSA9PT0gMCB8fCBsZXhlbWVzMi5zaXplID09PSAwKSByZXR1cm4gMDtcclxuICAgIGxldCBwb2ludHMxID0gMDtcclxuICAgIGxldCBwb2ludHMyID0gMDtcclxuICAgIGxleGVtZXMxLmZvckVhY2god29yZCA9PiB7XHJcbiAgICAgIGlmIChsZXhlbWVzMi5oYXMod29yZCkpICsrcG9pbnRzMTtcclxuICAgIH0pO1xyXG4gICAgbGV4ZW1lczIuZm9yRWFjaCh3b3JkID0+IHtcclxuICAgICAgaWYgKGxleGVtZXMxLmhhcyh3b3JkKSkgKytwb2ludHMyO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgxMDAgKiBNYXRoLm1heChwb2ludHMxIC8gbGV4ZW1lczEuc2l6ZSwgcG9pbnRzMiAvIGxleGVtZXMyLnNpemUpKTtcclxuICB9XHJcblxyXG4gIC8qaWYgKGRiVGV4dHMubGVuZ3RoICE9PSB4bWxUZXh0cy5sZW5ndGgpIHtcclxuICAgIC8vIFdlIGNhbiBubyBsb25nZXIgYXNzdW1lIHRoYXQgdGhlIGNoYW5nZWQgdGV4dHMgcmVmZXIgdG8gZGlmZmVyZW50IGZvcm11bGF0aW9ucyBvZiB0aGUgc2FtZSBtZWFuaW5nLlxyXG4gICAgLy8gV2Ugbm90IG1hcCBvbGQgZm9ybXVsYXRpb25zIHRvIG5ldyBvbmVzLlxyXG4gICAgLy8gSW4gZnV0dXJlLCB3ZSBjb3VsZCBoYW5kbGUgdGhpcyBjYXNlIGJ5IGFzc3VtaW5nIGFsbCBvbGQgdGV4dHMgbm90IG9jY3VycmluZyBpbiBuZXcgZGF0YSwgaGF2ZSBiZWVuIHJlbW92ZWQgYW5kIGFsbCBuZXcgaGF2ZSBiZWVuIGFkZGVkLlxyXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTnVtYmVyIG9mIFwiICsgdGV4dFR5cGUgKyAoY291cnNlID8gYCBvbiBjb3Vyc2UgJHtjb3Vyc2V9YCA6IFwiXCIpICsgXCIgZGlmZmVycy4gQ2Fubm90IG1pZ3JhdGUuXCIpO1xyXG4gIH1cclxuICBkYlRleHRzLmZvckVhY2goKHtuYW1lOiBvbGRUZXh0LCBpZDogb2xkSWQsIGdyYWRlU3RlcH0sIGkpID0+IHtcclxuICAgIGNvbnN0IHhtbFRleHQgPSB4bWxUZXh0c1tpXS50cmltKCk7XHJcbiAgICBpZiAob2xkVGV4dC50cmltKCkgIT09IHhtbFRleHQpIHtcclxuICAgICAgaWRzVG9NaWdyYXRlLnNldChvbGRJZCwge25ld1RleHQ6IHhtbFRleHQsIG5ld0lkOiBuZXdUZXh0cy5nZXQoeG1sVGV4dCksIG9sZFRleHQsIGdyYWRlU3RlcH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG4gIHJldHVybiBpZHNUb01pZ3JhdGU7Ki9cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1pZ3JhdGVTdWJqZWN0KGV4aXN0aW5nU3ViamVjdDogU3ViamVjdCwgY291cnNlU2V0czogQ291cnNlU2V0W10sIHN1YmplY3RUb0ltcG9ydDogU3ViamVjdFRvSW1wb3J0LCBjaGFuZ2VzOiBDaGFuZ2VbXSkge1xyXG4gIC8vIEdlbmVyYXRlIGRiVGV4dE1hcDpcclxuICAvLyBkYlRleHRNYXAgY29udGFpbnMgYSBtYXAgZnJvbSBvbGQgdGV4dHMgKEFiaWxpdGllcywgQ2VudHJhbCBDb250ZW50IG9yIEtub3dsZWRnZSBSZXF1aXJlbWVudHMpIHRvIGl0cyBJRCBpbiB0aGUgZGF0YWJhc2UuXHJcbiAgLy8gVGhlIG1hcCBzaG91bGQgYmUgdXNlZCB0byBsb29rdXAgSURzLCBnaXZlbiB0aGVpciB0cmltbWVkIHRleHQuXHJcbiAgY29uc3QgZGJUZXh0TWFwID0gbmV3IE1hcDxzdHJpbmcsIElEPigpO1xyXG4gIGNvbnN0IG9yZGVyZWRBYmlsaXRpZXMgPSBleGlzdGluZ1N1YmplY3QuYWJpbGl0aWVzT3JkZXIgP1xyXG4gICAgZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllc09yZGVyLm1hcChpZCA9PiBleGlzdGluZ1N1YmplY3QuYWJpbGl0aWVzLmZpbmQoYSA9PiBhLmlkID09PSBpZCkpIDpcclxuICAgIGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXM7XHJcbiAgZm9yIChjb25zdCBhIG9mIG9yZGVyZWRBYmlsaXRpZXMpIHtcclxuICAgIGRiVGV4dE1hcC5zZXQoYS5uYW1lLnRyaW0oKSwgYS5pZCk7XHJcbiAgfVxyXG4gIGZvciAoY29uc3Qge3RlbXBsYXRlfSBvZiBjb3Vyc2VTZXRzKSB7XHJcbiAgICBmb3IgKGNvbnN0IGNjIG9mIHRlbXBsYXRlLmNlbnRyYWxDb250ZW50KSB7XHJcbiAgICAgIGRiVGV4dE1hcC5zZXQoY2MubmFtZS50cmltKCksIGNjLmlkKTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3Qga3Igb2YgdGVtcGxhdGUua25vd2xlZGdlUmVxdWlyZW1lbnRzKSB7XHJcbiAgICAgIGRiVGV4dE1hcC5zZXQoa3IubmFtZS50cmltKCksIGtyLmlkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEZpbmQgb3V0IHdoaWNoIG5ldyB0ZXh0cyAoaW4gdG90YWwpIHRoYXQgc2hvdWxkIGJlIGNyZWF0ZWQgaW4gdGhlIERCIG9uIG1pZ3JhdGluZy5cclxuICAvLyBNYXliZSBhbHNvIGZpbmQgb3V0IGlmIHRoZXJlIGFyZSBhbnkgb2xkIHRleHRzIHdobydzIG9iamVjdHMgYXJlIG5vIG1vcmUgdXNlZCBhbmQgY291bGQgYmUgcmVtb3ZlZCBmcm9tIHRoZSBEQlxyXG4gIC8vIG5ld1RleHRzOiBBIG1hcCBiZXR3ZWVuIGEgbmV3IHRleHQgYW5kIGl0cyBuZXcgSUQgaW4gdGhlIGRhdGFiYXNlIGFmdGVyIGNyZWF0aW5nIGl0LlxyXG4gIC8vIHJlbW92ZWRJZHM6IEEgc2V0IG9mIGV4aXN0aW5nIGlkcyB0aGF0IHdvdWxkIGJlIHNhZmUgdG8gcmVtb3ZlIG9uIG1pZ3JhdGluZyAod2lsbCBpZ25vcmUgdGhvc2UgZm9yIG5vdylcclxuICBjb25zdCB7bmV3VGV4dHM6IG5ld0FiaWxpdHlUZXh0cywgaWRzVG9BZGQ6IGFiaWxpdGllc1RvQWRkfSA9XHJcbiAgICBkaWZmU3ViamVjdEdsb2JhbFRleHRzKGRiVGV4dE1hcCwgc3ViamVjdFRvSW1wb3J0LmFiaWxpdGllcyk7XHJcbiAgY29uc3Qge25ld1RleHRzOiBuZXdDQ1RleHRzLCBpZHNUb0FkZDogY2NzVG9BZGR9ID1cclxuICAgIGRpZmZTdWJqZWN0R2xvYmFsVGV4dHMoZGJUZXh0TWFwLCBmbGF0dGVuKHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzLm1hcChjID0+IGMuY2VudHJhbENvbnRlbnQubWFwKGNjID0+IGNjLmh0bWwpKSkpO1xyXG4gIGNvbnN0IHtuZXdUZXh0czogbmV3S1JUZXh0cywgaWRzVG9BZGQ6IGtyc1RvQWRkfSA9XHJcbiAgICBkaWZmU3ViamVjdEdsb2JhbFRleHRzKGRiVGV4dE1hcCwgZmxhdHRlbihzdWJqZWN0VG9JbXBvcnQuY291cnNlcy5tYXAoYyA9PiBjLmtub3dsZWRnZVJlcXVpcmVtZW50cy5tYXAoa3IgPT4ga3IuaHRtbCkpKSk7XHJcbiAgXHJcbiAgY29uc29sZS5sb2coYEFiaWxpdGllcyB0byBhZGQ6ICR7YWJpbGl0aWVzVG9BZGQuc2l6ZX1gKTtcclxuICBjb25zb2xlLmxvZyhgQ0NzIHRvIGFkZDogJHtjY3NUb0FkZC5zaXplfWApO1xyXG4gIGNvbnNvbGUubG9nKGBLUnMgdG8gYWRkOiAke2tyc1RvQWRkLnNpemV9YCk7XHJcblxyXG4gIC8vIEZpbmQgb3V0IGFsbCBleGlzdGluZyBBYmlsaXR5IGlkcyB0aGF0IHdpbGwgYmUgbWlncmF0ZWQgdG8gbmV3IG9uZXNcclxuICBjb25zdCBhYmlsaXR5SWRzVG9NaWdyYXRlID0gZ2V0SWRzVG9NaWdyYXRlKFxyXG4gICAgb3JkZXJlZEFiaWxpdGllcyxcclxuICAgIHN1YmplY3RUb0ltcG9ydC5hYmlsaXRpZXMubWFwKGh0bWwgPT4gKHtodG1sfSkpLFxyXG4gICAgbmV3QWJpbGl0eVRleHRzLFxyXG4gICAgXCJhYmlsaXRpZXNcIik7XHJcblxyXG4gIC8vIERvIHRoZSBzYW1lIGZvciBlYWNoIENlbnRyYWwgQ29udGVudCBhbmQgS25vd2xlZGdlIFJlcXVpcmVtZW50cyBvbiBlYWNoIGNvdXJzZTpcclxuICBjb25zdCBpZHNUb01pZ3JhdGVQZXJDb3Vyc2UgPSBjb3Vyc2VTZXRzLm1hcCgoe3RlbXBsYXRlfSwgaSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coYENvdXJzZTogJHt0ZW1wbGF0ZS5uYW1lfWApO1xyXG4gICAgY29uc3QgeG1sQ291cnNlID0gc3ViamVjdFRvSW1wb3J0LmNvdXJzZXMuZmluZChjID0+IGMubmFtZSA9PT0gdGVtcGxhdGUubmFtZSkgfHxcclxuICAgICAgc3ViamVjdFRvSW1wb3J0LmNvdXJzZXMuZmluZChjID0+IGMuY29kZSA9PT0gdGVtcGxhdGUuY29kZSk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBjb3Vyc2VDb2RlOiB0ZW1wbGF0ZS5jb2RlLFxyXG4gICAgICBjY3NUb01pZ3JhdGU6IHhtbENvdXJzZSA/XHJcbiAgICAgICAgZ2V0SWRzVG9NaWdyYXRlKFxyXG4gICAgICAgICAgdGVtcGxhdGUuY2VudHJhbENvbnRlbnQsIC8vIEhhcyBhbHJlYWR5IGJlZW4gc29ydGVkIHdoZW4gcmV0cmlldmVkIHZpYSBsb2FkQ291cnNlKClcclxuICAgICAgICAgIHhtbENvdXJzZS5jZW50cmFsQ29udGVudC5tYXAoKHtodG1sfSkgPT4gKHtodG1sfSkpLFxyXG4gICAgICAgICAgbmV3Q0NUZXh0cyxcclxuICAgICAgICAgIFwiY2VudHJhbCBjb250ZW50XCIsXHJcbiAgICAgICAgICB0ZW1wbGF0ZS5uYW1lKSA6XHJcbiAgICAgICAgbmV3IE1hcDxJRCwge25ld1RleHQ6IHN0cmluZywgbmV3SWQ6IElELCBvbGRUZXh0OiBzdHJpbmcsIGlzVHlwb0ZpeDogYm9vbGVhbn0+KCksXHJcbiAgICAgIGtyc1RvTWlncmF0ZTogeG1sQ291cnNlID9cclxuICAgICAgICBnZXRJZHNUb01pZ3JhdGUoXHJcbiAgICAgICAgICB0ZW1wbGF0ZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMsIC8vIEhhcyBhbHJlYWR5IGJlZW4gc29ydGVkIHdoZW4gcmV0cmlldmVkIHZpYSBsb2FkQ291cnNlKClcclxuICAgICAgICAgIHhtbENvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMsXHJcbiAgICAgICAgICBuZXdLUlRleHRzLFxyXG4gICAgICAgICAgXCJrbm93bGVkZ2UgcmVxdWlyZW1lbnRzXCIsXHJcbiAgICAgICAgICB0ZW1wbGF0ZS5uYW1lXHJcbiAgICAgICAgKSA6XHJcbiAgICAgICAgbmV3IE1hcDxJRCwge25ld1RleHQ6IHN0cmluZywgbmV3SWQ6IElELCBvbGRUZXh0OiBzdHJpbmcsIGdyYWRlU3RlcDogc3RyaW5nLCBpc1R5cG9GaXg6IGJvb2xlYW59PigpXHJcbiAgICB9O1xyXG4gIH0pO1xyXG5cclxuICAvLyBPSyBzbyBub3cgd2UgaGF2ZSBhbGwgaW5mby5cclxuICAvLyBOb3csIHdlIG5lZWQgdG86XHJcbiAgLy8gU3ViamVjdDpcclxuICAvLyAxLiBSZW1vdmUgbGlua3MgZnJvbSBzdWJqZWN0cyB0byBhYmlsaXRpZXNcclxuICAvLyAyLiBBZGQgbGlua3MgZnJvbSBzdWJqZWN0cyB0byBhYmlsaXRpZXNcclxuICBhYmlsaXR5SWRzVG9NaWdyYXRlLmZvckVhY2goKHtuZXdUZXh0LCBuZXdJZCwgb2xkVGV4dCwgaXNUeXBvRml4fSwgb2xkSWQpID0+IHtcclxuICAgIC8vY29uc3Qgb2xkVGV4dCA9IGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXMuZmluZChhID0+IGEuaWQgPT09IG9sZElkKS5uYW1lO1xyXG4gICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgY2hhbmdlOiAoXHJcbiAgICAgICAgb2xkVGV4dCA/XHJcbiAgICAgICAgICBuZXdUZXh0ID9cclxuICAgICAgICAgICAgaXNUeXBvRml4ID9cclxuICAgICAgICAgICAgICBgVHJ5Y2tmZWxzcsOkdHRuaW5nIEbDtnJtw6VnYWAgOlxyXG4gICAgICAgICAgICAgIGBVcHBkYXRlcmFkIEbDtnJtw6VnYWAgOlxyXG4gICAgICAgICAgICBgQm9ydHRhZ2VuIEbDtnJtw6VnYWAgOlxyXG4gICAgICAgICAgYE55IEbDtnJtw6VnYWBcclxuICAgICAgKSxcclxuICAgICAgY29udGVudDogYDxzdHJpa2U+JHtvbGRUZXh0IHx8ICcnfTwvc3RyaWtlPjxici8+JHtuZXdUZXh0IHx8ICcnfWAsXHJcbiAgICAgIG11dGF0aW9uczogYnIgPT4ge1xyXG4gICAgICAgIGlmIChuZXdJZCAmJiBhYmlsaXRpZXNUb0FkZC5oYXMobmV3SWQpKSB7XHJcbiAgICAgICAgICBjb25zdCBhOiBBYmlsaXR5ID0ge1xyXG4gICAgICAgICAgICBpZDogbmV3SWQsXHJcbiAgICAgICAgICAgIG5hbWU6IG5ld1RleHQsXHJcbiAgICAgICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl0sXHJcbiAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgYnIuYWRkKFwiYWJpbGl0aWVzXCIsIGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2xkVGV4dCkgYnIudW5saW5rMihcInN1YmplY3RzXCIsIGV4aXN0aW5nU3ViamVjdC5pZCwgXCJhYmlsaXRpZXNcIiwgb2xkSWQpO1xyXG4gICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJzdWJqZWN0c1wiLCBleGlzdGluZ1N1YmplY3QuaWQsIFwiYWJpbGl0aWVzXCIsIG5ld0lkKTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9KTtcclxuICAvLyAzLiBVcGRhdGUgYWJpbGl0aWVzT3JkZXIgb24gU3ViamVjdCBiYXNlZCBvbiBzdWJqZWN0VG9JbXBvcnQuYWJpbGl0aWVzIChtYXBwZWQgdG8gaWRzIGluIG5ld1RleHRzKVxyXG4gIGlmICghZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllc09yZGVyIHx8IGFiaWxpdHlJZHNUb01pZ3JhdGUuc2l6ZSA+IDApIHtcclxuICAgIGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXNPcmRlciA9IHN1YmplY3RUb0ltcG9ydC5hYmlsaXRpZXMubWFwKHhtbCA9PiBuZXdBYmlsaXR5VGV4dHMuZ2V0KHhtbCkpO1xyXG4gICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgbXV0YXRpb25zOiBiciA9PiBici5wdXQoXCJzdWJqZWN0c1wiLCBleGlzdGluZ1N1YmplY3QpLFxyXG4gICAgICBjaGFuZ2U6IGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXNPcmRlciA/XHJcbiAgICAgICAgbnVsbCA6IC8vIMOEbmRyaW5nZW4gcmVkYW4gdmlzdWVsbCBzb20gXCJVcHBkYXRlcmFkIGbDtnIgZsO2cm3DpWdhXCIsIGV0Yywgb3ZhblxyXG4gICAgICAgIGBJbmbDtnIgZW4gb3JkbmFkIGxpc3RhIHDDpSBmw7ZybcOlZ29yIGkgZGF0YWJhc2VuYCxcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgY3JlYXRlZElkcyA9IG5ldyBTZXQ8SUQ+KCk7XHJcbiAgY2hhbmdlcy5wdXNoKHttdXRhdGlvbnM6ICgpPT5jcmVhdGVkSWRzLmNsZWFyKCl9KTsgLy8gSW4gY2FzZSBtdXRhdGlvbnMgcnVuIHR3aWNlICh3aGljaCBpdCBkb2Vzbid0IGFzIG9mIGN1cnJlbnQgaW1wbC4pXHJcbiAgY29uc3Qgc2hvd25DaGFuZ2VzID0gbmV3IFNldDxzdHJpbmc+KCk7IC8vIFNldCBvZiBjb3Vyc2VOYW1lXHJcbiAgY2hhbmdlcy5wdXNoKHttdXRhdGlvbnM6ICgpPT5zaG93bkNoYW5nZXMuY2xlYXIoKX0pO1xyXG4gIFxyXG4gIC8vIENvdXJzZXM6XHJcbiAgLy8gMS4gR28gdGhyb3VnaCBhbGwgY291cnNlIGluc3RhbmNlcyBhbmQ6XHJcbiAgLy8gICAgICBBOiBSZW1vdmUgbGlua3MgZnJvbSBjb3Vyc2VzIHRvIGFiaWxpdGllcyBsaXN0ZWQgaW4gYWJpbGl0eUlkc1RvTWlncmF0ZS5rZXlzKClcclxuICAvLyAgICAgIEI6IEFkZCBsaW5rcyBmcm9tIGNvdXJzZXMgdG8gYWJpbGl0aWVzIGFiaWx0aXRpZXNUb01pZ3JhdGUudmFsdWVzKClcclxuICAvLyAgICAgIEM6IFVwZGF0ZSBhYmlsaXRpZXNPcmRlciBvbiBjb3Vyc2UgaW5zdGFuY2VzIGJhc2VkIG9uIHN1YmplY3RUb0ltcG9ydCAobWFwcGVkIHRvIGlkcyBpbiBuZXdUZXh0cylcclxuICAvLyAyLCAzOiBEbyB0aGUgc2FtZSBmb3IgY2VudHJhbC1jb250ZW50IGFuZCBrbm93bGVkZ2UtcmVxdWlyZW1lbnRlczpcclxuICAvLyAgICBGaW5kIGNjcyBhbmQga3JzIHRvIG1pZ3JhdGUgYmFzZWQgb24gY291cnNlSW5zdGFuY2UuY29kZVxyXG4gIC8vICAgIEZvciBib3RoIGNjcyBhbmQga3JzLCBkbzpcclxuICAvLyAgICAgIEE6IFVubGluayBjY3NUb01pZ3JhdGUua2V5cygpXHJcbiAgLy8gICAgICBCOiBMaW5rIGNjc1RvTWlncmF0ZS52YWx1ZXMoKVxyXG4gIC8vICAgICAgQzogVXBkYXRlIGNlbnRyYWxDb250ZW50T3JkZXIgYmFzZWQgb24gc3ViamVjdFRvSW1wb3J0LmNlbnRyYWxDb250ZW50IG1hcHBlZCB0byBuZXdUZXh0cyBpZHNcclxuICAvLyAgICAgIChzYW1lIGZvciBrcnNUb01pZ3JhdGUsIHdpdGgga25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIgaW5zdGVhZClcclxuICBmb3IgKGNvbnN0IHt0ZW1wbGF0ZSwgaW5zdGFuY2VzfSBvZiBjb3Vyc2VTZXRzKSB7XHJcbiAgICAvLyBGaW5kIGNvdXJzZVRvSW1wb3J0XHJcbiAgICBjb25zdCBjb3Vyc2VUb0ltcG9ydDogQ291cnNlVG9JbXBvcnQgPSAoXHJcbiAgICAgIHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzLmZpbmQoYyA9PiBjLm5hbWUgPT09IHRlbXBsYXRlLm5hbWUpIHx8XHJcbiAgICAgIHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzLmZpbmQoYyA9PiBjLmNvZGUgPT09IHRlbXBsYXRlLmNvZGUpXHJcbiAgICApO1xyXG5cclxuICAgIC8vIEZpbmQgQ2VudHJhbCBDb250ZW50IGFuZCBLbm93bGVkZ2UgUmVxdWlyZW1lbnRzIHRvIG1pZ3JhdGVcclxuICAgIGNvbnN0IHtjY3NUb01pZ3JhdGUsIGtyc1RvTWlncmF0ZX06IHtcclxuICAgICAgY2NzVG9NaWdyYXRlOiBNYXA8SUQsIHtuZXdUZXh0Pzogc3RyaW5nLCBuZXdJZD86IElELCBvbGRUZXh0Pzogc3RyaW5nfT4sXHJcbiAgICAgIGtyc1RvTWlncmF0ZTogTWFwPElELCB7bmV3VGV4dD86IHN0cmluZywgbmV3SWQ/OiBJRCwgb2xkVGV4dD86IHN0cmluZywgZ3JhZGVTdGVwPzogc3RyaW5nfT5cclxuICAgIH0gPSBpZHNUb01pZ3JhdGVQZXJDb3Vyc2UuZmluZCh4ID0+IHguY291cnNlQ29kZSA9PT0gdGVtcGxhdGUuY29kZSk7XHJcbiAgICBcclxuICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgY291cnNlIGluc3RhbmNlcyAoaW5zdGFuY2VzIGFsc28gY29udGFpbnMgdGVtcGxhdGVzKVxyXG4gICAgLy8gYW5kIG1pZ3JhdGUgdGhlbS4gVGhpcyB3aWxsIGluY2x1ZGUgY3JlYXRpbmcgbWlzc2luZyBlbnRpdGllcyBpbiB0aGUgREIuXHJcbiAgICBmb3IgKGNvbnN0IGNvdXJzZSBvZiBpbnN0YW5jZXMpIHtcclxuICAgICAgbWlncmF0ZUNvdXJzZUluc3RhbmNlKGNvdXJzZSwgY291cnNlVG9JbXBvcnQsIHtjY3NUb01pZ3JhdGUsIGtyc1RvTWlncmF0ZX0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXdhaXQgbWlncmF0ZVRhc2tzKCk7XHJcbiAgcmV0dXJuO1xyXG5cclxuICBmdW5jdGlvbiBtaWdyYXRlQ291cnNlSW5zdGFuY2UoXHJcbiAgICBjb3Vyc2U6IENvdXJzZSxcclxuICAgIGNvdXJzZVRvSW1wb3J0OiBDb3Vyc2VUb0ltcG9ydCxcclxuICAgIGlkc1RvTWlncmF0ZToge1xyXG4gICAgICBjY3NUb01pZ3JhdGU6IE1hcDxJRCwge25ld1RleHQ/OiBzdHJpbmcsIG5ld0lkPzogSUQsIG9sZFRleHQ/OiBzdHJpbmcsIGlzVHlwb0ZpeD86IGJvb2xlYW59PixcclxuICAgICAga3JzVG9NaWdyYXRlOiBNYXA8SUQsIHtuZXdUZXh0Pzogc3RyaW5nLCBuZXdJZD86IElELCBvbGRUZXh0Pzogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmcsIGlzVHlwb0ZpeD86IGJvb2xlYW59PlxyXG4gICAgfSlcclxuICB7XHJcbiAgICBjb25zdCBzaG93Q2hhbmdlcyA9ICFzaG93bkNoYW5nZXMuaGFzKGNvdXJzZS5uYW1lKTtcclxuICAgIHNob3duQ2hhbmdlcy5hZGQoY291cnNlLm5hbWUpO1xyXG4gICAgYWJpbGl0eUlkc1RvTWlncmF0ZS5mb3JFYWNoKCh7bmV3SWQsIG9sZFRleHR9LCBvbGRJZCkgPT4ge1xyXG4gICAgICAvLyBSZWxpbmsgdGhlIGNvdXJzZSBpbnN0YW5jZSB3aXRoIGFiaWxpdGllcy4gVGhpcyBjaGFuZ2UgZG9lcyBub3QgbmVlZCB0byBiZSB2aXNpYmxlIGluIEdVSS5cclxuICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICBtdXRhdGlvbnM6IGJyID0+IHtcclxuICAgICAgICAgIGlmIChvbGRUZXh0KSBici51bmxpbmsyKFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiYWJpbGl0aWVzXCIsIG9sZElkKTtcclxuICAgICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJjb3Vyc2VzXCIsIGNvdXJzZS5pZCwgXCJhYmlsaXRpZXNcIiwgbmV3SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7ICBcclxuICAgIH0pO1xyXG4gICAgY291cnNlLmFiaWxpdGllc09yZGVyID0gc3ViamVjdFRvSW1wb3J0LmFiaWxpdGllcy5tYXAoaHRtbCA9PiBuZXdBYmlsaXR5VGV4dHMuZ2V0KGh0bWwpKTtcclxuXHJcbiAgICBjb25zdCB7Y2NzVG9NaWdyYXRlLCBrcnNUb01pZ3JhdGV9ID0gaWRzVG9NaWdyYXRlO1xyXG5cclxuICAgIC8vIENlbnRyYWwgQ29udGVudFxyXG4gICAgY2NzVG9NaWdyYXRlLmZvckVhY2goKHtuZXdJZCwgbmV3VGV4dCwgb2xkVGV4dCwgaXNUeXBvRml4fSwgb2xkSWQpID0+IHtcclxuICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICBjaGFuZ2U6IHNob3dDaGFuZ2VzICYmIChcclxuICAgICAgICAgIG9sZFRleHQgP1xyXG4gICAgICAgICAgICBuZXdUZXh0ID9cclxuICAgICAgICAgICAgICBpc1R5cG9GaXggP1xyXG4gICAgICAgICAgICAgICAgYFRyeWNrZmVsc3LDpHR0bmluZyBDZW50cmFsdCBJbm5laMOlbGxgIDpcclxuICAgICAgICAgICAgICAgIGBVcHBkYXRlcmF0IENlbnRyYWx0IElubmVow6VsbGAgOlxyXG4gICAgICAgICAgICAgIGBCb3J0dGFnZXQgQ2VudHJhbHQgSW5uZWjDpWxsYCA6XHJcbiAgICAgICAgICAgIGBOeXR0IENlbnRyYWx0IElubmVow6VsbGApLFxyXG4gICAgICAgIGNvbnRlbnQ6IGA8aDQ+JHtjb3Vyc2UubmFtZX08L2g0PjxzdHJpa2U+JHtvbGRUZXh0IHx8ICcnfTwvc3RyaWtlPjxici8+JHtuZXdUZXh0IHx8ICcnfWAsXHJcbiAgICAgICAgbXV0YXRpb25zOiBiciA9PiB7XHJcbiAgICAgICAgICBpZiAobmV3SWQgJiYgY2NzVG9BZGQuaGFzKG5ld0lkKSAmJiAhY3JlYXRlZElkcy5oYXMobmV3SWQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNjOiBDZW50cmFsQ29udGVudCA9IHtcclxuICAgICAgICAgICAgICBpZDogbmV3SWQsXHJcbiAgICAgICAgICAgICAgbmFtZTogbmV3VGV4dCxcclxuICAgICAgICAgICAgICBhY2w6IFtcInJvbGU6VVNFUjpSXCJdLFxyXG4gICAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGJyLmFkZChcImNlbnRyYWwtY29udGVudFwiLCBjYyk7XHJcbiAgICAgICAgICAgIGNyZWF0ZWRJZHMuYWRkKG5ld0lkKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChvbGRUZXh0KSBici51bmxpbmsyKFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiY2VudHJhbENvbnRlbnRcIiwgb2xkSWQpO1xyXG4gICAgICAgICAgaWYgKG5ld0lkKSBici5saW5rMihcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIG5ld0lkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICAgIGNvdXJzZS5jZW50cmFsQ29udGVudE9yZGVyID0gY291cnNlVG9JbXBvcnQuY2VudHJhbENvbnRlbnQubWFwKCh7aHRtbH0pID0+IG5ld0NDVGV4dHMuZ2V0KGh0bWwpKTtcclxuXHJcbiAgICAvLyBLbm93bGVkZ2UgUmVxdWlyZW1lbnRzXHJcbiAgICBrcnNUb01pZ3JhdGUuZm9yRWFjaCgoe25ld0lkLCBuZXdUZXh0LCBncmFkZVN0ZXAsIG9sZFRleHQsIGlzVHlwb0ZpeH0sIG9sZElkKSA9PiB7XHJcbiAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgY2hhbmdlOiBzaG93Q2hhbmdlcyAmJiAoXHJcbiAgICAgICAgICBvbGRUZXh0ID9cclxuICAgICAgICAgICAgbmV3VGV4dCA/XHJcbiAgICAgICAgICAgICAgaXNUeXBvRml4ID9cclxuICAgICAgICAgICAgICAgIGBUcnlja2ZlbHNyw6R0dG5pbmcgS3Vuc2thcHNrcmF2YDpcclxuICAgICAgICAgICAgICAgIGBVcHBkYXRlcmF0IEt1bnNrYXBza3JhdmAgOlxyXG4gICAgICAgICAgICAgIGBCb3J0dGFnZXQgS3Vuc2thcHNrcmF2YCA6XHJcbiAgICAgICAgICAgIGBOeXR0IEt1bnNrYXBza3JhdmBcclxuICAgICAgICApLFxyXG4gICAgICAgIGNvbnRlbnQ6IGA8aDQ+JHtjb3Vyc2UubmFtZX08L2g0PjxzdHJpa2U+JHtvbGRUZXh0IHx8ICcnfTwvc3RyaWtlPjxici8+JHtuZXdUZXh0IHx8ICcnfWAsXHJcbiAgICAgICAgbXV0YXRpb25zOiBiciA9PiB7XHJcbiAgICAgICAgICBpZiAobmV3SWQgJiYga3JzVG9BZGQuaGFzKG5ld0lkKSAmJiAhY3JlYXRlZElkcy5oYXMobmV3SWQpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGtyOiBLbm93bGVkZ2VSZXF1aXJlbWVudCA9IHtcclxuICAgICAgICAgICAgICBpZDogbmV3SWQsXHJcbiAgICAgICAgICAgICAgbmFtZTogbmV3VGV4dCxcclxuICAgICAgICAgICAgICBncmFkZVN0ZXAsXHJcbiAgICAgICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXSxcclxuICAgICAgICAgICAgICBkYXRlVGltZTogRGF0ZS5ub3coKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQWRkaW5nIEtub3dsZWRnZS1SZXF1aXJlbWVudCAke25ld0lkfTogJHtuZXdUZXh0fWApO1xyXG4gICAgICAgICAgICBici5hZGQoXCJrbm93bGVkZ2UtcmVxdWlyZW1lbnRzXCIsIGtyKTtcclxuICAgICAgICAgICAgY3JlYXRlZElkcy5hZGQobmV3SWQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKG9sZFRleHQpIGJyLnVubGluazIoXCJjb3Vyc2VzXCIsIGNvdXJzZS5pZCwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgb2xkSWQpO1xyXG4gICAgICAgICAgaWYgKG5ld0lkKSBici5saW5rMihcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBuZXdJZCk7ICBcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIgPVxyXG4gICAgICBjb3Vyc2VUb0ltcG9ydC5rbm93bGVkZ2VSZXF1aXJlbWVudHMubWFwKGtyID0+IG5ld0tSVGV4dHMuZ2V0KGtyLmh0bWwpKTtcclxuXHJcbiAgICAvLyBVcGRhdGVzIHRoZSBjb3Vyc2UgcHJvcGVydGllcyBjZW50cmFsQ29udGVudE9yZGVyIGFuZCBrbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlclxyXG4gICAgaWYgKGFiaWxpdHlJZHNUb01pZ3JhdGUuc2l6ZSA+IDAgfHwgY2NzVG9NaWdyYXRlLnNpemUgPiAwIHx8IGtyc1RvTWlncmF0ZS5zaXplID4gMCkge1xyXG4gICAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICAgIGNoYW5nZTogIWNvdXJzZS5pc1RlbXBsYXRlID8gYFVwcGRhdGVyYWQgS3Vyc2luc3RhbnNgIDogYFVwcGRhdGVyYWQgS3Vyc21hbGxgLFxyXG4gICAgICAgIGNvbnRlbnQ6ICFjb3Vyc2UuaXNUZW1wbGF0ZSA/XHJcbiAgICAgICAgICBgJHtjb3Vyc2UubmFtZX0uIFNrb2xhOiAke2NvdXJzZS5zY2hvb2wgfHwgXCJlaiBhbmdpdmVuXCJ9LiBCZXNrcml2bmluZzogJHtjb3Vyc2UuZGVzY3JpcHRpb24gfHwgJyd9YCA6XHJcbiAgICAgICAgICBgJHtjb3Vyc2UubmFtZX1gLFxyXG4gICAgICAgIG11dGF0aW9uczogYnIgPT4gYnIucHV0KFwiY291cnNlc1wiLCBjb3Vyc2UpXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvLyBUYXNrczpcclxuICAvLyAxLiBBU1lOQyBPUEVSQVRJT046IEdvIHRocm91Z2ggYWxsIHRhc2tzIHRoYXQgaGFzIGVkZ2VzIHRvIGFueSBvZiB0aGUgb2xkIGlkcy5cclxuICAvLyAyLiBGb3IgZWFjaCBmb3VuZCB0YXNrLCBkbzpcclxuICAvLyAgICBBOiBJdGVyYXRlIHRhZ3Mgc3RhcnRpbmcgd2l0aCBcImNvdXJzZTpcIi4gUGljayB0aGUgY291cnNlIGNvZGUuXHJcbiAgLy8gICAgQjogUG9wdWxhdGUgdGhlIG5ldyBwcm9wZXJ0eSBtaWdyYXRpb25UYXNrczoge1xyXG4gIC8vICAgICAgICAgYWJpbGl0aWVzOiB7W25ld0lkOiBzdHJpbmddOiB7b2xkVGV4dDogc3RyaW5nLCBvbGRJZDogc3RyaW5nLCBpbXBvcnREYXRlOiBudW1iZXJ9fSwgLy8gQmUgYWJsZSB0byBjcmVhdGUgYSBjaGFpbiBpbiB0aGUgR1VJICFcclxuICAvLyAgICAgICAgIGNlbnRyYWxDb250ZW50OiB7W25ld0lkOiBzdHJpbmddOiB7b2xkVGV4dDogc3RyaW5nLCAuLi5cIi4uLn19LFxyXG4gIC8vICAgICAgICAga25vd2xlZGdlUmVxdWlyZW1lbnRzOiB7W25ld0lkOiBzdHJpbmddOiB7b2xkVGV4dDogc3RyaW5nLCAuLi5cIi4uLn19LFxyXG4gIC8vICAgICAgIH1cclxuICAvLyAgICAgICBPQlMxISBNZXJnZWEgYWJpbGl0aWVzLCBjZW50cmFsQ29uZGVudCBvY2gga25vd2xlZGdlUmVxdWlyZW1lbnRzIG1lZCBldiB0aWRpZ2FyZSB2w6RyZGVuIChzw6UgbWFuIGthbiBpbXBvcnRlcmEgb20gb2NoIG9tIGlnZW4hKVxyXG4gIC8vICAgICAgIE9CUzIhIG9sZElkIGthbiBmw7ZyZWtvbW1hIHDDpSBmbGVyYSBuZXdJZCBvbSB0YXNrIGFudsOkbmRzIGF2IGZsZXJhIGt1cnNlci4gXHJcbiAgLy8gICAgQzogQ3JlYXRlIHNldHMgZm9yIHVubGlua3MgYW5kIGxpbmsgb3BlcmF0aW9ucyBwZXIgdHlwZS5cclxuICAvLyAgICBEOiBGb3IgYWxsIGNvdXJzZUNvZGVzIHRoYXQgdGhlIHRhc2sgaXMgdGFnZ2VuIG9uLFxyXG4gIC8vICAgICAgICAgKiByZWdpc3RlciBjY3NUb01pZ3JhdGUua2V5cygpIGluIHRoZSB1bmxpbmsgc2V0IG9mIGNlbnRyYWwgY29udGVudHNcclxuICAvLyAgICAgICAgICogcmVnaXN0ZXIgY2NzVG9NaWdyYXRlLnZhbHVlcygpIGluIHRoZSBsaW5rIHNldCBvZiBjZW50cmFsIGNvbnRlbnRzXHJcbiAgLy8gICAgICAgICAqIC0tXCItLSBmb3Iga25vd2xlZGdlUmVxdWlyZW1lbnRzXHJcbiAgLy8gICAgRTogdW5saW5rIGFuZCBsaW5rIHdpdGggcmVnYXJkcyB0byBhYmlsaXR5SWRzVG9NaWdyYXRlIChrZXlzKCkgYW5kIHZhbHVlcygpIHJlc3BlY3RpdmVseSkuXHJcbiAgLy8gICAgRjogdW5saW5rIGFuZCBsaW5rIGFjY29yZGluZyB0byB0aGUgY3JlYXRlZCBzZXRzIG9mIGxpbmsgLyB1bmxpbmsgb3BlcmF0aW9ucy5cclxuICAvLyAgICBOb3RlOiBVbmxpa2UgY291cnNlIGluc3RhbmNlcywgdGhlcmUncyBubyBvcmRlciBwcm9wZXJ0eSB0byB0YWtlIGNhcmUgb2YgaGVyZSFcclxuICAvL1xyXG5cclxuICBhc3luYyBmdW5jdGlvbiBtaWdyYXRlVGFza3MoKSB7XHJcbiAgICBjb25zdCBvbGRJZHMgPSBbXHJcbiAgICAgIC4uLmFiaWxpdHlJZHNUb01pZ3JhdGUua2V5cygpLFxyXG4gICAgICAuLi5mbGF0dGVuKGlkc1RvTWlncmF0ZVBlckNvdXJzZS5tYXAoYyA9PiBbXHJcbiAgICAgICAgLi4uYy5jY3NUb01pZ3JhdGUua2V5cygpLFxyXG4gICAgICAgIC4uLmMua3JzVG9NaWdyYXRlLmtleXMoKVxyXG4gICAgICBdKSlcclxuICAgIF0uZmlsdGVyKGlkID0+ICFpZC5zdGFydHNXaXRoKCdmaWN0aXZlT2xkSWQnKSk7XHJcbiAgICBcclxuICAgIGNvbnN0IGltcG9ydERhdGUgPSBEYXRlLm5vdygpO1xyXG5cclxuICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgZmV0Y2hUYXNrc0luQ2h1bmtzV2l0aEVkZ2VzVG8ob2xkSWRzLCB7XHJcbiAgICAgIGluY2x1ZGU6IFtcImFiaWxpdGllc1wiLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBcImNlbnRyYWxDb250ZW50XCJdLFxyXG4gICAgICBmbGFnczogW1wiaW5jbHVkZUlkc09ubHlcIl1cclxuICAgIH0pO1xyXG5cclxuICAgIGFzeW5jIGZ1bmN0aW9uIGZldGNoVGFza3NJbkNodW5rc1dpdGhFZGdlc1RvKGlkczogc3RyaW5nW10sIG9wdGlvbnM6IExpc3RPcHRpb25zKTogUHJvbWlzZTxUYXNrW10+IHtcclxuICAgICAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgbWFrZSB3b3JrIGFyb3VuZCB0aGUgY2FzZSB3aGVuIGdpdmVuIFwiaWRzXCIgY29udGFpbnMgdG9vIG1hbnkgaXRlbXMsIGJ5XHJcbiAgICAgIC8vIGRpdmlkaW5nIHRoZSByZXF1ZXN0cyBpbnRvIHNldmVyYWwgYW5kIG1lcmdlIHRoZSByZXN1bHQgdXNpbmcgYSBNYXAuXHJcbiAgICAgIGlmIChpZHMubGVuZ3RoID09PSAwKSByZXR1cm4gW107IC8vIE90aGVyd2lzZSB3ZSdsbCByZXF1ZXN0IGV2ZXJ5IHRhc2sgaW4gdGhlIHN5c3RlbS5cclxuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcDxJRCwgVGFzaz4oKTtcclxuICAgICAgY29uc29sZS5sb2coXCJOdW1iZXIgb2YgaWRzOiBcIiArIGlkcy5sZW5ndGgpO1xyXG4gICAgICAvL3JldHVybiByZXN1bHQudmFsdWVzKCk7XHJcbiAgICAgIHJldHVybiBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFRhc2s+KFwidGFza3NcIiwge1xyXG4gICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgaGFzRWRnZXNUbzogaWRzXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qY29uc3QgdGFza3MgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFRhc2s+KFwidGFza3NcIiwge1xyXG4gICAgICBoYXNFZGdlc1RvOiBvbGRJZHMsXHJcbiAgICAgIGluY2x1ZGU6IFtcImFiaWxpdGllc1wiLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBcImNlbnRyYWxDb250ZW50XCJdLFxyXG4gICAgICBmbGFnczogW1wiaW5jbHVkZUlkc09ubHlcIl1cclxuICAgIH0pOyovXHJcblxyXG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHRhc2tzKSB7XHJcbiAgICAgIGNvbnN0IG9sZE1UID0gdGFzay5taWdyYXRlZFRleHRzIHx8IHtcclxuICAgICAgICBhYmlsaXRpZXM6IHt9LFxyXG4gICAgICAgIGNlbnRyYWxDb250ZW50OiB7fSxcclxuICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IHt9XHJcbiAgICAgIH07XHJcbiAgICAgIHRhc2subWlncmF0ZWRUZXh0cyA9IHtcclxuICAgICAgICBhYmlsaXRpZXM6IHt9LFxyXG4gICAgICAgIGNlbnRyYWxDb250ZW50OiB7fSxcclxuICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IHt9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCBtdXRhdGlvbnM6IEFycmF5PChicjogQmF0Y2hSdW5uZXIpPT52b2lkPiA9IFtdO1xyXG4gICAgICBjb25zdCBjaGFuZ2VEZXNjcmlwdGlvbnM6IHN0cmluZ1tdID0gW107XHJcbiAgICAgIGZvciAoY29uc3Qge2lkfSBvZiB0YXNrLmFiaWxpdGllcykge1xyXG4gICAgICAgIGNvbnN0IG1pZ3JhdGlvbkluZm8gPSBhYmlsaXR5SWRzVG9NaWdyYXRlLmdldChpZCk7XHJcbiAgICAgICAgaWYgKG1pZ3JhdGlvbkluZm8pIHtcclxuICAgICAgICAgIGNvbnN0IHtuZXdJZCwgbmV3VGV4dCwgaXNUeXBvRml4fSA9IG1pZ3JhdGlvbkluZm87XHJcbiAgICAgICAgICBsZXQge29sZFRleHR9ID0gbWlncmF0aW9uSW5mbztcclxuICAgICAgICAgIGxldCBvbGRJZCA9IGlkO1xyXG4gICAgICAgICAgaWYgKG9sZE1ULmFiaWxpdGllc1tpZF0pIHtcclxuICAgICAgICAgICAgLy8gSWYgbWlncmF0aW5nIHN0dWZmIHRoYXQgd2FzIG5ldmVyIGFja25vd2xlZGdlcyBieSBhIHRlYWNoZXIsXHJcbiAgICAgICAgICAgIC8vIFdlIHNob3VsZCBwb2ludCBvdXQgdGhlIHZlcnkgb2xkIGlkIGFuZCB0ZXh0IGluc3RlYWQgb2YgdGhlIG5ldmVyLWFja25vd2xlZGdlZCBvbmUuXHJcbiAgICAgICAgICAgIG9sZFRleHQgPSBvbGRNVC5hYmlsaXRpZXNbaWRdLm9sZFRleHQ7XHJcbiAgICAgICAgICAgIG9sZElkID0gb2xkTVQuYWJpbGl0aWVzW2lkXS5vbGRJZDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChuZXdJZCAmJiBvbGRUZXh0ICE9PSBuZXdUZXh0KSB7XHJcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZTogSWYgb2xkVGV4dCA9PT0gbmV3VGV4dCwgdGhlbiB0aGlzIGlzIGEgcmVpbXBvcnQgbmV3IFhNTCB0aGF0IHJldmVydHMgYmFjayB0byBvcmlnaW4gdGV4dC4gRG9uJ3QgcmVxdWlyZSBhY2tub3dsZWRnZW1lbnQgZnJvbSB0ZWFjaGVyIVxyXG4gICAgICAgICAgICBpZiAoIWlzVHlwb0ZpeCkge1xyXG4gICAgICAgICAgICAgIC8vIElmIHRoaXMgd2Fzbid0IGp1c3QgYSB0eXBvIGZpeCAoY2hhbmdlcyBpbiBzdG9wIHdvcmRzLCBjYXNpbmcgb3Igc3BlY2lhbCBjaGFyYWN0ZXJzKVxyXG4gICAgICAgICAgICAgIHRhc2subWlncmF0ZWRUZXh0cy5hYmlsaXRpZXNbbmV3SWRdID0ge29sZElkLCBvbGRUZXh0LCBpbXBvcnREYXRlfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbXV0YXRpb25zLnB1c2goYnIgPT4ge1xyXG4gICAgICAgICAgICBici51bmxpbmsyKFwidGFza3NcIiwgdGFzay5pZCwgXCJhYmlsaXRpZXNcIiwgaWQpO1xyXG4gICAgICAgICAgICBpZiAobmV3SWQpIGJyLmxpbmsyKFwidGFza3NcIiwgdGFzay5pZCwgXCJhYmlsaXRpZXNcIiwgbmV3SWQpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjaGFuZ2VEZXNjcmlwdGlvbnMucHVzaChgPHN0cmlrZT4ke29sZFRleHR9PC9zdHJpa2U+YCk7XHJcbiAgICAgICAgICBpZiAobmV3SWQpIHtcclxuICAgICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2gobmV3VGV4dCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB0YXNrQ291cnNlQ29kZXMgPSBuZXcgU2V0PHN0cmluZz4odGFzay50YWdzID8gXHJcbiAgICAgICAgdGFzay50YWdzLmZpbHRlcih0ID0+IHQuc3RhcnRzV2l0aCgnY291cnNlOicpKS5tYXAodCA9PiB0LnN1YnN0cihcImNvdXJzZTpcIi5sZW5ndGgpKSA6XHJcbiAgICAgICAgW10pO1xyXG5cclxuICAgICAgLy8gV2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIGxpbmtlZElkcyAoZm9yIHRoaXMgcGFydGljdWxhciB0YXNrKSBmb3IgdGhlIGZvbGxvd2luZyByZWFzb246XHJcbiAgICAgIC8vIExldCdzIHNheSB0aGUgdGFzayB3YXMgcmVmZXJyZWQgdG8gYnkgdHdvIGRpZmZlcmVudCBjb3Vyc2VzIChwb3NzaWJsZSBpbiBvbGQgdmVyc2lvbnMpLFxyXG4gICAgICAvLyBhbmQgaW4gb2xkIENlbnRyYWwgQ29udGVudCwgdGhlIHR3byBjb3Vyc2VzIGRpZCBoYXZlIHNsaWdodGx5IGRpZmZlcmVudCBmb3JtdWxhdGlvbnMgb2YgY2VudHJhbCBjb250ZW50LFxyXG4gICAgICAvLyBzbyB0aGUgdGFzayB3YXMgbWFwcGVkIHRvIGJvdGggb2YgdGhlbS4gVGhlbiwgaW4gbmV3IFhNTCwgdGhlIHNhbWUgY2VudHJhbCBjb250ZW50IHdhcyBmb3JtdWxhdGVkXHJcbiAgICAgIC8vIGluIGEgbmV3IHdheSB0aGF0IGlzIGlkZW50aWNhbCB0aGlzIHRpbWUgYmV0d2VlbiB0aGUgdHdvIGNvdXJzZXMuIFRoZW4gYm90aCBvbGQgSURzIHdpbGwgYmUgcmVwbGFjZWRcclxuICAgICAgLy8gYnkgYSBzaW5nbGUgbmV3IElELiBJdCB3b3VsZCB0aGVuIGJlIHVubmVzY2Vzc2FyeSB0byBsaW5rIHRvIHRoZSBuZXcgSUQgdHdpY2UuXHJcbiAgICAgIGNvbnN0IGxpbmtlZElkcyA9IG5ldyBTZXQ8SUQ+KCk7XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IHtrcnNUb01pZ3JhdGUsIGNjc1RvTWlncmF0ZSwgY291cnNlQ29kZX0gb2YgaWRzVG9NaWdyYXRlUGVyQ291cnNlKSB7XHJcbiAgICAgICAgaWYgKHRhc2tDb3Vyc2VDb2Rlcy5zaXplID09PSAwIHx8IHRhc2tDb3Vyc2VDb2Rlcy5oYXMoY291cnNlQ29kZSkpIHtcclxuICAgICAgICAgIGZvciAoY29uc3Qge2lkfSBvZiB0YXNrLmNlbnRyYWxDb250ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pZ3JhdGlvbkluZm8gPSBjY3NUb01pZ3JhdGUuZ2V0KGlkKTtcclxuICAgICAgICAgICAgaWYgKG1pZ3JhdGlvbkluZm8pIHtcclxuICAgICAgICAgICAgICBsZXQge25ld0lkLCBuZXdUZXh0LCBvbGRUZXh0LCBpc1R5cG9GaXh9ID0gbWlncmF0aW9uSW5mbztcclxuICAgICAgICAgICAgICBsZXQgb2xkSWQgPSBpZDtcclxuICAgICAgICAgICAgICBpZiAob2xkTVQuY2VudHJhbENvbnRlbnRbaWRdKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBtaWdyYXRpbmcgc3R1ZmYgdGhhdCB3YXMgbmV2ZXIgYWNrbm93bGVkZ2VzIGJ5IGEgdGVhY2hlcixcclxuICAgICAgICAgICAgICAgIC8vIFdlIHNob3VsZCBwb2ludCBvdXQgdGhlIHZlcnkgb2xkIGlkIGFuZCB0ZXh0IGluc3RlYWQgb2YgdGhlIG5ldmVyLWFja25vd2xlZGdlZCBvbmUuXHJcbiAgICAgICAgICAgICAgICBvbGRUZXh0ID0gb2xkTVQuY2VudHJhbENvbnRlbnRbaWRdLm9sZFRleHQ7XHJcbiAgICAgICAgICAgICAgICBvbGRJZCA9IG9sZE1ULmNlbnRyYWxDb250ZW50W2lkXS5vbGRJZDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYgKG5ld0lkICYmIG9sZFRleHQgIT09IG5ld1RleHQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZTogSWYgb2xkVGV4dCA9PT0gbmV3VGV4dCwgdGhlbiB0aGlzIGlzIGEgcmVpbXBvcnQgbmV3IFhNTCB0aGF0IHJldmVydHMgYmFjayB0byBvcmlnaW4gdGV4dC4gRG9uJ3QgcmVxdWlyZSBhY2tub3dsZWRnZW1lbnQgZnJvbSB0ZWFjaGVyIVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc1R5cG9GaXgpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyB3YXNuJ3QganVzdCBhIHR5cG8gZml4IChjaGFuZ2VzIGluIHN0b3Agd29yZHMsIGNhc2luZyBvciBzcGVjaWFsIGNoYXJhY3RlcnMpXHJcbiAgICAgICAgICAgICAgICAgIHRhc2subWlncmF0ZWRUZXh0cy5jZW50cmFsQ29udGVudFtuZXdJZF0gPSB7b2xkSWQsIG9sZFRleHQsIGltcG9ydERhdGV9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAoIW5ld0lkIHx8ICFsaW5rZWRJZHMuaGFzKG5ld0lkKSkge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRpb25zLnB1c2goYnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBici51bmxpbmsyKFwidGFza3NcIiwgdGFzay5pZCwgXCJjZW50cmFsQ29udGVudFwiLCBpZCk7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIG5ld0lkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2goYDxzdHJpa2U+JHtvbGRUZXh0fTwvc3RyaWtlPmApO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0lkKSB7XHJcbiAgICAgICAgICAgICAgICAgIGNoYW5nZURlc2NyaXB0aW9ucy5wdXNoKG5ld1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICBsaW5rZWRJZHMuYWRkKG5ld0lkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZvciAoY29uc3Qge2lkfSBvZiB0YXNrLmtub3dsZWRnZVJlcXVpcmVtZW50cykge1xyXG4gICAgICAgICAgICBjb25zdCBtaWdyYXRpb25JbmZvID0ga3JzVG9NaWdyYXRlLmdldChpZCk7XHJcbiAgICAgICAgICAgIGlmIChtaWdyYXRpb25JbmZvKSB7XHJcbiAgICAgICAgICAgICAgbGV0IHtuZXdJZCwgbmV3VGV4dCwgb2xkVGV4dCwgaXNUeXBvRml4fSA9IG1pZ3JhdGlvbkluZm87XHJcbiAgICAgICAgICAgICAgbGV0IG9sZElkID0gaWQ7XHJcbiAgICAgICAgICAgICAgaWYgKG9sZE1ULmtub3dsZWRnZVJlcXVpcmVtZW50c1tpZF0pIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIG1pZ3JhdGluZyBzdHVmZiB0aGF0IHdhcyBuZXZlciBhY2tub3dsZWRnZXMgYnkgYSB0ZWFjaGVyLFxyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIHBvaW50IG91dCB0aGUgdmVyeSBvbGQgaWQgYW5kIHRleHQgaW5zdGVhZCBvZiB0aGUgbmV2ZXItYWNrbm93bGVkZ2VkIG9uZS5cclxuICAgICAgICAgICAgICAgIG9sZFRleHQgPSBvbGRNVC5rbm93bGVkZ2VSZXF1aXJlbWVudHNbaWRdLm9sZFRleHQ7XHJcbiAgICAgICAgICAgICAgICBvbGRJZCA9IG9sZE1ULmtub3dsZWRnZVJlcXVpcmVtZW50c1tpZF0ub2xkSWQ7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmIChuZXdJZCAmJiBvbGRUZXh0ICE9PSBuZXdUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2U6IElmIG9sZFRleHQgPT09IG5ld1RleHQsIHRoZW4gdGhpcyBpcyBhIHJlaW1wb3J0IG5ldyBYTUwgdGhhdCByZXZlcnRzIGJhY2sgdG8gb3JpZ2luIHRleHQuIERvbid0IHJlcXVpcmUgYWNrbm93bGVkZ2VtZW50IGZyb20gdGVhY2hlciFcclxuICAgICAgICAgICAgICAgIGlmICghaXNUeXBvRml4KSB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgd2Fzbid0IGp1c3QgYSB0eXBvIGZpeCAoY2hhbmdlcyBpbiBzdG9wIHdvcmRzLCBjYXNpbmcgb3Igc3BlY2lhbCBjaGFyYWN0ZXJzKVxyXG4gICAgICAgICAgICAgICAgICB0YXNrLm1pZ3JhdGVkVGV4dHMua25vd2xlZGdlUmVxdWlyZW1lbnRzW25ld0lkXSA9IHtvbGRJZCwgb2xkVGV4dCwgaW1wb3J0RGF0ZX07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICBpZiAoIW5ld0lkIHx8ICFsaW5rZWRJZHMuaGFzKG5ld0lkKSkge1xyXG4gICAgICAgICAgICAgICAgbXV0YXRpb25zLnB1c2goYnIgPT4ge1xyXG4gICAgICAgICAgICAgICAgICBici51bmxpbmsyKFwidGFza3NcIiwgdGFzay5pZCwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgaWQpO1xyXG4gICAgICAgICAgICAgICAgICBpZiAobmV3SWQpIGJyLmxpbmsyKFwidGFza3NcIiwgdGFzay5pZCwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgbmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXNjcmlwdGlvbnMucHVzaChgPHN0cmlrZT4ke29sZFRleHR9PC9zdHJpa2U+YCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3SWQpIHtcclxuICAgICAgICAgICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2gobmV3VGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgIGxpbmtlZElkcy5hZGQobmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICBjaGFuZ2U6IGBNaWdyZXJhZCBVcHBnaWZ0YCxcclxuICAgICAgICBjb250ZW50OiBgPGg0PiR7dGFzay5uYW1lfSAke3Rhc2suc2Nob29sID8gYCgke3Rhc2suc2Nob29sfSkgYCA6ICcoc2tvbGEgZWogYW5naXZlbiknfTwvaDQ+XHJcbiAgICAgICAgICA8cD5LdXJza29kOiAke1suLi50YXNrQ291cnNlQ29kZXNdLmpvaW4oJywnKX08L3A+XHJcbiAgICAgICAgICAke2NoYW5nZURlc2NyaXB0aW9ucy5tYXAodHh0ID0+IGA8cD4ke3R4dH08L3A+YCkuam9pbignJyl9YCxcclxuICAgICAgICBtdXRhdGlvbnM6IGJyID0+IHtcclxuICAgICAgICAgIGJyLnB1dChcInRhc2tzXCIsIHRhc2spO1xyXG4gICAgICAgICAgbXV0YXRpb25zLmZvckVhY2gobSA9PiBtKGJyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFRIRSBSRVNVTFQgV0lMTCBCRTpcclxuICAvLyAgRnVuY3Rpb24gcG9wdWxhdGVzIGEgY29tcGxldGUgc2V0IG9mIENoYW5nZXMgdG8gZGlzcGxheSB0byB1c2VyLlxyXG4gIC8vICBJZiB1c2VyIGNsaWNrcyBcImltcG9ydFwiLCB0aGVzZSBjaGFuZ2VzIHdpbGwgYmUgcGVyZm9ybWVkLlxyXG5cclxuICBcclxuICAvLyBOZXh0IHRoaW5nIHdpbGwgYmUgdG8gbWFrZSB0aGlzIHZpc2libGUgaW4gR1VJOlxyXG4gIC8vICBTaG93IE9wZW5DbG9zZUJveCB3aXRoIHdhcm5pbmcgYmVmb3JlIFwiSW5sw6RtbmluZ3N1cHBnaWZ0XCIgaW4gY2FzZSB0aGVyZSBhcmUgbWlncmF0aW9uVGFza3MuXHJcbiAgLy8gIExpc3Qga25vd2xlZGdlIHJlcXVpcmVtZW50cyBBLCBLUiBDLCBLUiBFLCBjZW50cmFsIGNvbnRlbnRzIGFuZCBhYmlsaXRpZXMgcmVzcGVjdGl2ZWx5IGluIHRvdGFsbHkgbWF4IDUgdGFibGVzLlxyXG4gIC8vICBTYW1lIEdVSSBhcyBrbm93bGVkZ2VSZXF1aXJlbWVudCBtYXRyaXggKGdyZWVuIGhlYWRlcikgcGVyIHRhYmxlLlxyXG4gIC8vICBIZWFkZXJzOiBcIlVyc3BydW5nbGlnIGZvcm11bGVyaW5nXCIsIFwiU2tvbHZlcmtldHMgbnlhIGZvcm11bGVyaW5nXCIsIFwiVMOkY2tlciB1cHBnaWZ0ZW4gZGVuIG55YSBmb3JtdWxlcmluZ2VuP1wiXHJcbiAgLy8gIEZvciBlYWNoIHJvdywgc2hvdyBzdHJpa2UgdGV4dCArIG5ldyB0ZXh0IHdpdGggZ3JlZW4gYmFja2dyb3VuZC4gVGhlbiBJbXBvcnQgRGF0ZS4gVGhlbiBcIkphIC8gTmVqXCIuXHJcbiAgLy8gIFRyeWNrZXIgbWFuIEpBIGVsbGVyIG5laiBzw6UgdGFzIHJhZGVuIGJvcnQuXHJcbiAgLy8gIFRyeWNrZXIgbWFuIE5laiBzw6UgdGFzIMOkdmVuIGtvcHBsaW5nZW4gYm9ydCBvY2gga3Vyc2VyIHNvbSBhbnbDpG5kZXIgdXBwZ2lmdGVuIGthbiBww6V2ZXJrYXMuXHJcbiAgLy9cclxuICAvLyBOw6RzdGEgc2FrIGF0dCBnw7ZyYTogUGlubmEvIHZpc2EgYmVyw7ZyZGEgdXBwZ2lmdGVyIG1lZCBueSBmw6RyZyBlbGxlciBpa29uLlxyXG4gIC8vIE9ja3PDpSwgaMO2Z3N0IHVwcCBww6Uga3Vycy1zaWRhbiAoa3Vyc2J5Z2cpOiBWaXNhIHNhbW1hIHZhcm5pbmdzdHJpYW5nZWwgT3BlbkNsb3NlQm94IG9jaCBsaXN0YVxyXG4gIC8vIMOkbmRyYWRlIGZvcm11bGVyaW5nYXIgKyBiZXLDtnJkYSB1cHBnaWZ0ZXIuIE9tIG1hbiBpbnRlIMOkciByZWRpZ2VyaW5nc2JlaMO2cmlnIGF2IGVuIHVwcGdpZnQgYsO2clxyXG4gIC8vIG1hbiBrb250YWt0YSB1cHBnaWZ0ZW5zIMOkZ2FyZSBmw7ZyIGF0dCBncmFuc2thIG1pZ3JlcmluZ2VuLlxyXG59XHJcbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgU3ViamVjdCwgQ291cnNlLCBBYmlsaXR5LCBLbm93bGVkZ2VSZXF1aXJlbWVudCwgQ2VudHJhbENvbnRlbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFN1YmplY3RUb0ltcG9ydCB9IGZyb20gJy4uL3N1YmplY3QtdG8taW1wb3J0JztcclxuaW1wb3J0IHsgQ2hhbmdlIH0gZnJvbSAnLi9jaGFuZ2UnO1xyXG5pbXBvcnQgeyBtaWdyYXRlT3JkZXJMaXN0c09mQ291cnNlSW5zdGFuY2VzLCBtaWdyYXRlQWJpbGl0aWVzT3JkZXJPblN1YmplY3QgfSBmcm9tICcuL21pZ3JhdGlvbnMnO1xyXG5pbXBvcnQgeyBtaWdyYXRlU3ViamVjdCB9IGZyb20gJy4vbWlncmF0ZS1zdWJqZWN0JztcclxuaW1wb3J0IHsgbG9hZENvdXJzZSB9IGZyb20gJy4uLy4uL3V0aWxzJztcclxuaW1wb3J0IHsgQ291cnNlU2V0IH0gZnJvbSAnLi9jb3Vyc2Utc2V0JztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkaWZmWG1sV2l0aERhdGFiYXNlKGV4aXN0aW5nU3ViamVjdDogU3ViamVjdCwgc3ViamVjdFRvSW1wb3J0OiBTdWJqZWN0VG9JbXBvcnQsIGNoYW5nZXM6IENoYW5nZVtdKSB7XHJcbiAgLy8gRXhwYW5kIGdyYXBocyBvZiBleGlzdGluZyBTdWJqZWN0XHJcbiAgZXhpc3RpbmdTdWJqZWN0ID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuZ2V0KCdzdWJqZWN0cycsIGV4aXN0aW5nU3ViamVjdC5pZCwgeyBpbmNsdWRlOiBbXCJjb3Vyc2VUZW1wbGF0ZXNcIiwgXCJhYmlsaXRpZXNcIl0gfSk7XHJcbiAgLy8gTGF6aWx5IGxvYWQgYWxsIGNlbnRyYWwgY29udGVudHMgYW5kIGtub3dsZWRnZVJlcXVpcmVtZW50cyBvblxyXG4gIC8vIGVhY2ggY291cnNlIHRlbXBsYXRlXHJcbiAgY29uc3QgZXhwYW5kZWRDb3Vyc2VUZW1wbGF0ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChleGlzdGluZ1N1YmplY3QuY291cnNlVGVtcGxhdGVzLm1hcChjdCA9PiBsb2FkQ291cnNlKGN0LmlkLCB7XHJcbiAgICBpbmNsdWRlOiBbXHJcbiAgICAgICdjZW50cmFsQ29udGVudCcsXHJcbiAgICAgICdrbm93bGVkZ2VSZXF1aXJlbWVudHMnXHJcbiAgICBdXHJcbiAgfSkpKTtcclxuXHJcbiAgY29uc29sZS5sb2coYFN1YmplY3Q6ICR7ZXhpc3RpbmdTdWJqZWN0Lm5hbWV9LiBDb3Vyc2VzOiAke2V4cGFuZGVkQ291cnNlVGVtcGxhdGVzLm1hcCgoe25hbWV9KSA9PiBuYW1lKX1gKTtcclxuXHJcbiAgY29uc3QgY291cnNlU2V0czogQ291cnNlU2V0W10gPSBhd2FpdCBQcm9taXNlLmFsbChleHBhbmRlZENvdXJzZVRlbXBsYXRlcy5tYXAgKGFzeW5jIGNvdXJzZVRlbXBsYXRlID0+ICh7XHJcbiAgICB0ZW1wbGF0ZTogY291cnNlVGVtcGxhdGUsXHJcbiAgICBpbnN0YW5jZXM6IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8Q291cnNlPihcImNvdXJzZXNcIiwgeyBuYW1lOiBjb3Vyc2VUZW1wbGF0ZS5uYW1lLCBpbmNsdWRlOiBbJ2FiaWxpdGllcyddLCBmbGFnczogWydpbmNsdWRlSWRzT25seSddIH0pXHJcbiAgfSkpKTtcclxuXHJcbiAgLyppZiAoZXhwYW5kZWRDb3Vyc2VUZW1wbGF0ZXMuc29tZSAoY291cnNlID0+ICFjb3Vyc2UuY2VudHJhbENvbnRlbnRPcmRlciB8fCAhY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyIHx8ICFjb3Vyc2UuYWJpbGl0aWVzT3JkZXIpKSB7XHJcbiAgICBtaWdyYXRlT3JkZXJMaXN0c09mQ291cnNlSW5zdGFuY2VzKGNvdXJzZVNldHMsIHN1YmplY3RUb0ltcG9ydCwgY2hhbmdlcyk7XHJcbiAgICAvLyBJbiBmdXR1cmUsIGFzIGFiaWxpdGllcyBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCwgd2Ugd2lsbCBoYXZlIHRvIG1haW50YWluIHRoZSBvcmRlciBvZiBhYmlsaXRpZXMgb24gdGhlIGNvdXJzZSBpbnN0YW5jZXMsXHJcbiAgICAvLyB0aGUgc2FtZSB3YXkgd2UgZG8gaXQgd2l0aCBjZW50cmFsIGNvbnRlbnQgYW5kIGtub3dsZWRnZSByZXF1aXJlbWVudHMuIFRPRE8gcmVzcGVjdCBhYmlsaXRpZXMgb3JkZXIgb24gZXZlcnkgcGxhY2UgYWJpbGl0aWVzIGFyZSBlbnVtZXJhdGVkLFxyXG4gICAgLy8gc3VjaCBhcyBvbiBjb3Vyc2Ugdmlld2VyLCBjb3Vyc2UgYnVpbGRlciwgZXRjLlxyXG4gICAgbWlncmF0ZUFiaWxpdGllc09yZGVyT25TdWJqZWN0KGV4aXN0aW5nU3ViamVjdCwgY291cnNlU2V0cywgY2hhbmdlcyk7XHJcbiAgfSBlbHNlIHsqL1xyXG4gICAgYXdhaXQgbWlncmF0ZVN1YmplY3QoZXhpc3RpbmdTdWJqZWN0LCBjb3Vyc2VTZXRzLCBzdWJqZWN0VG9JbXBvcnQsIGNoYW5nZXMpO1xyXG4gIC8vfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFNrb2x2ZXJrZXRTdWJqZWN0LCBTa29sdmVya2V0Q291cnNlIH0gZnJvbSAnLi9za29sdmVya2V0LXN1YmplY3QnO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IFN1YmplY3QsIENvdXJzZSwgQWJpbGl0eSwgS25vd2xlZGdlUmVxdWlyZW1lbnQsIENlbnRyYWxDb250ZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBNdXRhdGlvblJlcXVlc3QsIEJhdGNoUnVubmVyLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBDaGFuZ2UgfSBmcm9tICcuL2RpZmYvY2hhbmdlJztcclxuaW1wb3J0IHsgU3ViamVjdFRvSW1wb3J0LCBDb3Vyc2VUb0ltcG9ydCB9IGZyb20gJy4vc3ViamVjdC10by1pbXBvcnQnO1xyXG5pbXBvcnQgeyBkaWZmWG1sV2l0aERhdGFiYXNlIH0gZnJvbSAnLi9kaWZmL2RpZmYteG1sLXdpdGgtZGF0YWJhc2UnO1xyXG5pbXBvcnQgeyBsb2FkQ291cnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBvbkNhbmNlbDogKCkgPT4gdm9pZDtcclxuICBvbkltcG9ydFN1Y2Nlc3M6IChzdWJqZWN0OiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgc3ViamVjdDogU2tvbHZlcmtldFN1YmplY3Q7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgc2hvd0Z1bGxUZXh0OiBib29sZWFuO1xyXG4gIGNoYW5nZXM6IENoYW5nZVtdO1xyXG4gIHN1YmplY3RUb0ltcG9ydD86IFN1YmplY3RUb0ltcG9ydDtcclxuICBpc1dvcmtpbmc6IGJvb2xlYW47XHJcbiAgaXNJbXBvcnRpbmc6IGJvb2xlYW47XHJcbiAgZXJyb3I/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBVcGxvYWRlZFN1YmplY3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgcHVycG9zZUVsZW06IEhUTUxFbGVtZW50O1xyXG4gIGNvdXJzZXNFbGVtczogeyBbY291cnNlQ29kZTogc3RyaW5nXTogeyBjb3Vyc2U6IFNrb2x2ZXJrZXRDb3Vyc2UsIGVsZW06IEhUTUxFbGVtZW50IH0gfTtcclxuICBjZW50cmFsQ29udGVudEVsZW1zOiBIVE1MRWxlbWVudFtdO1xyXG4gIGtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXM6IEhUTUxFbGVtZW50W107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5jb3Vyc2VzRWxlbXMgPSB7fTtcclxuICAgIHRoaXMuY2VudHJhbENvbnRlbnRFbGVtcyA9IFtdO1xyXG4gICAgdGhpcy5rbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zID0gW107XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBzaG93RnVsbFRleHQ6IGZhbHNlLFxyXG4gICAgICBjaGFuZ2VzOiBbXSxcclxuICAgICAgaXNXb3JraW5nOiB0cnVlLFxyXG4gICAgICBpc0ltcG9ydGluZzogZmFsc2VcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMuYWRkQ2xhc3Nlc0ZvckNoZXJyeVBpY2tlZEVsZW1lbnRzKCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB7Y2hhbmdlcywgc3ViamVjdFRvSW1wb3J0fSA9IGF3YWl0IHRoaXMuZGlmZldpdGhFeGlzdGluZygpO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgY2hhbmdlcywgc3ViamVjdFRvSW1wb3J0IH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yOiAnJytlcnJvciB9KTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1dvcmtpbmc6IGZhbHNlIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkQ2xhc3Nlc0ZvckNoZXJyeVBpY2tlZEVsZW1lbnRzKCkge1xyXG4gICAgY29uc3QgYWJpbGl0aWVzID0gJCh0aGlzLnB1cnBvc2VFbGVtKS5maW5kKCdsaScpLmZpcnN0KCkucGFyZW50KCkuY2hpbGRyZW4oJ2xpJyk7XHJcbiAgICBhYmlsaXRpZXMuYWRkQ2xhc3MoJ2FiaWxpdHknKTtcclxuICAgIGNvbnN0IGNlbnRyYWxDb250ZW50cyA9ICQodGhpcy5jZW50cmFsQ29udGVudEVsZW1zKS5maW5kKCdsaScpO1xyXG4gICAgY2VudHJhbENvbnRlbnRzLmFkZENsYXNzKCdjZW50cmFsLWNvbnRlbnQnKTtcclxuICAgIGNvbnN0IGtub3dsZWRnZVJlcXVpcmVtZW50cyA9ICQodGhpcy5rbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zKS5maW5kKCdwJyk7XHJcbiAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHMuYWRkQ2xhc3MoJ2tub3dsZWRnZS1yZXF1aXJlbWVudCcpO1xyXG4gICAgY29uc3QgYWxsID0gJChbYWJpbGl0aWVzLCBjZW50cmFsQ29udGVudHMsIGtub3dsZWRnZVJlcXVpcmVtZW50c10pO1xyXG4gICAgYWxsLmFkZENsYXNzKCdtYXJrZWQtYXJlYScpO1xyXG4gIH1cclxuXHJcbiAgY2hlcnJ5UGlja0RhdGEoKTogU3ViamVjdFRvSW1wb3J0IHtcclxuICAgIC8vXHJcbiAgICAvLyBSZWFkcyBlbGVtZW50cyAodGFnZ2VkIGJ5IGNsYXNzZXMgaW4gYWRkQ2xhc3Nlc0ZvckNoZXJyeVBpY2tlZEVsZW1lbnRzKCkpIGFuZCBjb252ZXJ0cyB0aGVpciBpbm5lciBIVE1MIHRvIHRoZSBjb3JyZXNwb25kaW5nXHJcbiAgICAvLyBtb2RlbCBTdWJqZWN0VG9JbXBvcnQuIE5vdGUgdGhhdCBpZiB3ZSBuZWVkIHRvIGFkanVzdCBob3cgdG8gcGljayB0aGUgcmlnaHQgTEkgb3IgUCBlbGVtZW50cywgd2VcclxuICAgIC8vIHdpbGwgb25seSBuZWVkIHRvIGNoYW5nZSB0aGUgY29kZSBpbiBhZGRDbGFzc2VzRm9yQ2hlcnJ5UGlja2VkRWxlbWVudHMoKSwgbm90IHRoaXMgY29kZS5cclxuICAgIC8vXHJcbiAgICBjb25zdCBza29sU3ViamVjdCA9IHRoaXMucHJvcHMuc3ViamVjdDtcclxuICAgIGNvbnN0IGFiaWxpdGllc0xpcyA9IEFycmF5LmZyb20oJCh0aGlzLnB1cnBvc2VFbGVtKS5maW5kKCdsaScpLmZpcnN0KCkucGFyZW50KCkuY2hpbGRyZW4oJ2xpJykpO1xyXG4gICAgY29uc3QgYWJpbGl0aWVzID0gYWJpbGl0aWVzTGlzLm1hcCgoYSwgaSkgPT4gYCR7aSArIDF9LiAkeyQoYSkuaHRtbCgpfWAudHJpbSgpKS5maWx0ZXIoaHRtbCA9PiAhIWh0bWwpO1xyXG5cclxuICAgIGNvbnN0IHJlc3VsdDogU3ViamVjdFRvSW1wb3J0ID0ge1xyXG4gICAgICBuYW1lOiBza29sU3ViamVjdC5uYW1lLFxyXG4gICAgICBjb2RlOiBza29sU3ViamVjdC5jb2RlLFxyXG4gICAgICBzY2hvb2xUeXBlOiBza29sU3ViamVjdC5zY2hvb2xUeXBlLFxyXG4gICAgICBhYmlsaXRpZXMsXHJcbiAgICAgIGNvdXJzZXM6IE9iamVjdC5rZXlzKHRoaXMuY291cnNlc0VsZW1zKVxyXG4gICAgICAgIC5tYXAoY291cnNlQ29kZSA9PiB0aGlzLmNvdXJzZXNFbGVtc1tjb3Vyc2VDb2RlXSlcclxuICAgICAgICAubWFwPENvdXJzZVRvSW1wb3J0PigoeyBjb3Vyc2UsIGVsZW0gfSkgPT4gKHtcclxuICAgICAgICAgIG5hbWU6IGNvdXJzZS5uYW1lLFxyXG4gICAgICAgICAgeWVhcjogY291cnNlLnllYXIsXHJcbiAgICAgICAgICBjb2RlOiBjb3Vyc2UuY29kZSxcclxuICAgICAgICAgIHBvaW50czogY291cnNlLnBvaW50cyxcclxuICAgICAgICAgIGNlbnRyYWxDb250ZW50OiBBcnJheS5mcm9tKCQoZWxlbSkuZmluZCgnLmNlbnRyYWwtY29udGVudCcpKS5tYXAoYyA9PiAoe1xyXG4gICAgICAgICAgICBodG1sOiAkKGMpLmh0bWwoKS50cmltKCkgYXMgc3RyaW5nLFxyXG4gICAgICAgICAgICBncm91cDogJChjKS5wYXJlbnQoJ3VsJykucHJldignaDQnKS50ZXh0KCkudHJpbSgpXHJcbiAgICAgICAgICB9KSkuZmlsdGVyKCh7aHRtbH0pID0+ICEhaHRtbCksXHJcbiAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6XHJcbiAgICAgICAgICAgIEFycmF5LmZyb20oJChlbGVtKS5maW5kKCcuZ3JhZGUtc3RlcC1ub25lIC5rbm93bGVkZ2UtcmVxdWlyZW1lbnQnKSkubWFwKHIgPT4gJChyKS5odG1sKCkudHJpbSgpKVxyXG4gICAgICAgICAgICAgIC5maWx0ZXIoaHRtbCA9PiAhIWh0bWwpXHJcbiAgICAgICAgICAgICAgLm1hcChodG1sID0+ICh7Z3JhZGVTdGVwOiBudWxsLCBodG1sIH0pKVxyXG4gICAgICAgICAgICAgIC5jb25jYXQoXHJcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKCQoZWxlbSkuZmluZCgnLmdyYWRlLXN0ZXAtRSAua25vd2xlZGdlLXJlcXVpcmVtZW50JykpLm1hcChyID0+ICQocikuaHRtbCgpLnRyaW0oKSlcclxuICAgICAgICAgICAgICAgICAgLmZpbHRlcihodG1sID0+ICEhaHRtbClcclxuICAgICAgICAgICAgICAgICAgLm1hcChodG1sID0+ICh7IGdyYWRlU3RlcDogXCJFXCIsIGh0bWwgfSkpXHJcbiAgICAgICAgICAgICAgICAgIC5jb25jYXQoXHJcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbSgkKGVsZW0pLmZpbmQoJy5ncmFkZS1zdGVwLUMgLmtub3dsZWRnZS1yZXF1aXJlbWVudCcpKS5tYXAociA9PiAkKHIpLmh0bWwoKS50cmltKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGh0bWwgPT4gISFodG1sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLm1hcChodG1sID0+ICh7IGdyYWRlU3RlcDogXCJDXCIsIGh0bWwgfSkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgLmNvbmNhdChcclxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbSgkKGVsZW0pLmZpbmQoJy5ncmFkZS1zdGVwLUEgLmtub3dsZWRnZS1yZXF1aXJlbWVudCcpKS5tYXAociA9PiAkKHIpLmh0bWwoKS50cmltKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihodG1sID0+ICEhaHRtbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGh0bWwgPT4gKHsgZ3JhZGVTdGVwOiBcIkFcIiwgaHRtbCB9KSkpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgfTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBhc3luYyBkaWZmV2l0aEV4aXN0aW5nKCk6IFByb21pc2U8e2NoYW5nZXM6IENoYW5nZVtdLCBzdWJqZWN0VG9JbXBvcnQ6IFN1YmplY3RUb0ltcG9ydH0+IHtcclxuICAgIGNvbnN0IHN1YmplY3RUb0ltcG9ydCA9IHRoaXMuY2hlcnJ5UGlja0RhdGEoKTtcclxuICAgIGxldCBjaGFuZ2VzOiBDaGFuZ2VbXSA9IFtdO1xyXG4gICAgLy8gRmluZCBleGlzdGluZyBTdWJqZWN0XHJcbiAgICBjb25zdCBleGlzdGluZ1N1YmplY3RzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTdWJqZWN0PihcInN1YmplY3RzXCIpO1xyXG4gICAgbGV0IGV4aXN0aW5nU3ViamVjdCA9IGV4aXN0aW5nU3ViamVjdHMuZmlsdGVyKHMgPT4gcy5jb2RlID09PSB0aGlzLnByb3BzLnN1YmplY3QuY29kZSlbMF07XHJcbiAgICBsZXQgY2VudHJhbENvbnRlbnQgPSBbXSBhcyBDZW50cmFsQ29udGVudFtdLFxyXG4gICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHMgPSBbXSBhcyBLbm93bGVkZ2VSZXF1aXJlbWVudFtdO1xyXG5cclxuICAgIGxldCBjcmVhdGVUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIGZ1bmN0aW9uIGN0KCkge1xyXG4gICAgICBjb25zdCBydiA9IGNyZWF0ZVRpbWU7XHJcbiAgICAgIGNyZWF0ZVRpbWUgKz0gMjtcclxuICAgICAgcmV0dXJuIHJ2O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChleGlzdGluZ1N1YmplY3QpIHtcclxuICAgICAgLy8gSW5jbHVkZSBhYmlsaXRpZXMgYW5kIHN0YW5kYXJkQ291cnNlcyB3aXRoIHRoZSBmb3VuZCBTdWJqZWN0OlxyXG4gICAgICBhd2FpdCBkaWZmWG1sV2l0aERhdGFiYXNlKGV4aXN0aW5nU3ViamVjdCwgc3ViamVjdFRvSW1wb3J0LCBjaGFuZ2VzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFN1YmplY3Qgbm90IGltcG9ydGVkIGJlZm9yZS4gQWRkIGl0IVxyXG4gICAgICBjb25zdCBuZXdTdWJqZWN0OiBTdWJqZWN0ID0gZXhpc3RpbmdTdWJqZWN0ID0ge1xyXG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgICAgc2Nob29sVHlwZTogc3ViamVjdFRvSW1wb3J0LnNjaG9vbFR5cGUsXHJcbiAgICAgICAgdGFnczogW1wic2Nob29sVHlwZTpcIiArIHN1YmplY3RUb0ltcG9ydC5zY2hvb2xUeXBlXSxcclxuICAgICAgICBhY2w6IFtcInJvbGU6VVNFUjpSXCJdLFxyXG4gICAgICAgIGNvZGU6IHN1YmplY3RUb0ltcG9ydC5jb2RlLFxyXG4gICAgICAgIG5hbWU6IHN1YmplY3RUb0ltcG9ydC5uYW1lLFxyXG4gICAgICAgIGFiaWxpdGllc09yZGVyOiBbXSwgLy8gVXBkYXRlIGxhdGVyIG9uIVxyXG4gICAgICAgIHB1Ymxpc2hhYmxlOiBmYWxzZSxcclxuICAgICAgICBkYXRlVGltZTogY3QoKVxyXG4gICAgICB9O1xyXG4gICAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICAgIGNoYW5nZTogXCJOeXR0IMOkbW5lXCIsXHJcbiAgICAgICAgY29udGVudDogYCR7c3ViamVjdFRvSW1wb3J0Lm5hbWV9ICgke3N1YmplY3RUb0ltcG9ydC5jb2RlfSlgLFxyXG4gICAgICAgIG11dGF0aW9uczogciA9PiByLmFkZChcInN1YmplY3RzXCIsIG5ld1N1YmplY3QpXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgY29uc3Qgc3ViamVjdEFiaWxpdGllcyA9IFtdO1xyXG5cclxuICAgICAgZm9yIChsZXQgYSBvZiBzdWJqZWN0VG9JbXBvcnQuYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgY29uc3QgbmV3QWJpbGl0eTogQWJpbGl0eSA9IHtcclxuICAgICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgICAgICBuYW1lOiBhLFxyXG4gICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXSxcclxuICAgICAgICAgIGRhdGVUaW1lOiBjdCgpXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc3ViamVjdEFiaWxpdGllcy5wdXNoKG5ld0FiaWxpdHkpOyAvLyBUbyByZWZlciBmcm9tIGluIGNvdXJzZXMgbGF0ZXIgb24hXHJcblxyXG4gICAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgICBjaGFuZ2U6IFwiTnkgZsO2cm3DpWdhXCIsXHJcbiAgICAgICAgICBjb250ZW50OiBhLFxyXG4gICAgICAgICAgbXV0YXRpb25zOiByID0+IHtcclxuICAgICAgICAgICAgci5hZGQoXCJhYmlsaXRpZXNcIiwgbmV3QWJpbGl0eSk7XHJcbiAgICAgICAgICAgIHIubGluayhcInN1YmplY3RzXCIsIG5ld1N1YmplY3QuaWQsIFwiYWJpbGl0aWVzXCIsIG5ld0FiaWxpdHkuaWQsIFwiYWJpbGl0aWVzXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBVcGRhdGUgbm93IHdoZW4gd2UgaGF2ZSBhYmlsaXRpZXMgb3JkZXI6XHJcbiAgICAgIG5ld1N1YmplY3QuYWJpbGl0aWVzT3JkZXIgPSBzdWJqZWN0QWJpbGl0aWVzLm1hcCgoe2lkfSkgPT4gaWQpO1xyXG5cclxuICAgICAgZm9yIChsZXQgYyBvZiBzdWJqZWN0VG9JbXBvcnQuY291cnNlcykge1xyXG4gICAgICAgIGNvbnN0IG5ld0NvdXJzZTogQ291cnNlID0ge1xyXG4gICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICAgIHN1YmplY3RDb2RlOiBuZXdTdWJqZWN0LmNvZGUsXHJcbiAgICAgICAgICBzY2hvb2xUeXBlOiBuZXdTdWJqZWN0LnNjaG9vbFR5cGUsXHJcbiAgICAgICAgICB0YWdzOiBbXHJcbiAgICAgICAgICAgIFwic3ViOlwiICsgbmV3U3ViamVjdC5jb2RlLFxyXG4gICAgICAgICAgICBcImNvdXJzZTpcIiArIGMuY29kZSxcclxuICAgICAgICAgICAgXCJzY2hvb2xUeXBlOlwiICsgbmV3U3ViamVjdC5zY2hvb2xUeXBlXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgZGF0ZVRpbWU6IGN0KCksXHJcbiAgICAgICAgICBpc1RlbXBsYXRlOiB0cnVlLFxyXG4gICAgICAgICAgYWNsOiBbXCJyb2xlOkVNUExPWUVFOlJcIl0sIC8vIFN0YW5kYXJka3Vyc2VyIGVuZGFzdCBzeW5saWdhIGbDtnIgbMOkcmFyZVxyXG4gICAgICAgICAgbmFtZTogYy5uYW1lLFxyXG4gICAgICAgICAgY29kZTogYy5jb2RlLFxyXG4gICAgICAgICAgcG9pbnRzOiBjLnBvaW50cyxcclxuICAgICAgICAgIG1vZHVsZXM6IFtdLFxyXG4gICAgICAgICAgc3ViamVjdElkOiBuZXdTdWJqZWN0LmlkLFxyXG4gICAgICAgICAgcmVzb3VyY2VzOiBbXSxcclxuICAgICAgICAgIGNyZWF0ZWRCeTogeyBuYW1lOiBlbnYuY3VycmVudFVzZXIuZGlzcGxheU5hbWUsIHVybDogXCJtYWlsdG86XCIgKyBlbnYuY3VycmVudFVzZXIubWFpbCB9LFxyXG4gICAgICAgICAgY3JlYXRlZERhdGU6IERhdGUubm93KCksXHJcbiAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlcjogW10sXHJcbiAgICAgICAgICBjZW50cmFsQ29udGVudE9yZGVyOiBbXSxcclxuICAgICAgICAgIGFiaWxpdGllc09yZGVyOiBzdWJqZWN0QWJpbGl0aWVzLm1hcCgoe2lkfSkgPT4gaWQpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoYy55ZWFyKSBuZXdDb3Vyc2Uuc2Nob29sR3JhZGUgPSBjLnllYXI7XHJcblxyXG4gICAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgICBjaGFuZ2U6IFwiTnkga3Vyc1wiLFxyXG4gICAgICAgICAgY29udGVudDogYy5uYW1lLFxyXG4gICAgICAgICAgbXV0YXRpb25zOiByID0+IHtcclxuICAgICAgICAgICAgci5hZGQoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZSk7XHJcbiAgICAgICAgICAgIHIubGluayhcInN1YmplY3RzXCIsIG5ld1N1YmplY3QuaWQsIFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwiY291cnNlVGVtcGxhdGVzXCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmb3IgKGxldCB7Z3JvdXA6IGNjR3JvdXAsIGh0bWx9IG9mIGMuY2VudHJhbENvbnRlbnQpIHtcclxuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGV4aXN0cyBhbiBpZGVudGljYWwgY2VudHJhbCBjb250ZW50IG9uIHByZXZpb3VzIGNvdXJzZSBmaXJzdFxyXG4gICAgICAgICAgbGV0IG5ld0NlbnRyYWxDb250ZW50ID0gY2VudHJhbENvbnRlbnQuZmlsdGVyKGNjID0+IGNjLm5hbWUgPT09IGh0bWwpWzBdO1xyXG4gICAgICAgICAgaWYgKCFuZXdDZW50cmFsQ29udGVudCkge1xyXG4gICAgICAgICAgICBuZXdDZW50cmFsQ29udGVudCA9IHtcclxuICAgICAgICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICAgICAgICAgIGRhdGVUaW1lOiBjdCgpLFxyXG4gICAgICAgICAgICAgIG5hbWU6IGh0bWwsXHJcbiAgICAgICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoY2NHcm91cCkgbmV3Q2VudHJhbENvbnRlbnQuZ3JvdXAgPSBjY0dyb3VwO1xyXG4gICAgICAgICAgICBjZW50cmFsQ29udGVudC5wdXNoKG5ld0NlbnRyYWxDb250ZW50KTtcclxuXHJcbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgY2hhbmdlOiBcIk55dHQgY2VudHJhbHQgaW5uZWjDpWxsXCIsXHJcbiAgICAgICAgICAgICAgY29udGVudDogYDxoND4ke2NjR3JvdXB9PC9oND4ke2h0bWx9YCxcclxuICAgICAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xyXG4gICAgICAgICAgICAgICAgci5hZGQoXCJjZW50cmFsLWNvbnRlbnRcIiwgbmV3Q2VudHJhbENvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgci5saW5rKFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwiY2VudHJhbC1jb250ZW50XCIsIG5ld0NlbnRyYWxDb250ZW50LmlkLCBcImNlbnRyYWxDb250ZW50XCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xyXG4gICAgICAgICAgICAgICAgci5saW5rKFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwiY2VudHJhbC1jb250ZW50XCIsIG5ld0NlbnRyYWxDb250ZW50LmlkLCBcImNlbnRyYWxDb250ZW50XCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBSZWdpc3RlciB0aGUgb3JkZXIgaW4gd2hpY2ggdGhpcyBjZW50cmFsIGNvbnRlbnQgYXBwZWFyZWQgaW4gdGhlIFhNTDpcclxuICAgICAgICAgIG5ld0NvdXJzZS5jZW50cmFsQ29udGVudE9yZGVyLnB1c2gobmV3Q2VudHJhbENvbnRlbnQuaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgY3Igb2YgYy5rbm93bGVkZ2VSZXF1aXJlbWVudHMpIHtcclxuICAgICAgICAgIGxldCBuZXdLbm93bGVkZ2VSZXF1aXJlbWVudCA9IGtub3dsZWRnZVJlcXVpcmVtZW50cy5maWx0ZXIoa3IgPT4ga3IubmFtZSA9PT0gY3IuaHRtbCAmJiBrci5ncmFkZVN0ZXAgPT09IGNyLmdyYWRlU3RlcClbMF07XHJcbiAgICAgICAgICBpZiAoIW5ld0tub3dsZWRnZVJlcXVpcmVtZW50KSB7XHJcbiAgICAgICAgICAgIG5ld0tub3dsZWRnZVJlcXVpcmVtZW50ID0ge1xyXG4gICAgICAgICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgICAgICAgICAgZGF0ZVRpbWU6IGN0KCksXHJcbiAgICAgICAgICAgICAgbmFtZTogY3IuaHRtbCxcclxuICAgICAgICAgICAgICBncmFkZVN0ZXA6IGNyLmdyYWRlU3RlcCxcclxuICAgICAgICAgICAgICBhY2w6IFtcInJvbGU6VVNFUjpSXCJdXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHMucHVzaChuZXdLbm93bGVkZ2VSZXF1aXJlbWVudCk7XHJcblxyXG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgIGNoYW5nZTogXCJOeXR0IGt1bnNrYXBza3JhdiBmw7ZyIGJldHlnZXQgXCIgKyBjci5ncmFkZVN0ZXAsXHJcbiAgICAgICAgICAgICAgY29udGVudDogY3IuaHRtbCxcclxuICAgICAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xyXG4gICAgICAgICAgICAgICAgci5hZGQoXCJrbm93bGVkZ2UtcmVxdWlyZW1lbnRzXCIsIG5ld0tub3dsZWRnZVJlcXVpcmVtZW50KTtcclxuICAgICAgICAgICAgICAgIHIubGluayhcImNvdXJzZXNcIiwgbmV3Q291cnNlLmlkLCBcImtub3dsZWRnZS1yZXF1aXJlbWVudHNcIiwgbmV3S25vd2xlZGdlUmVxdWlyZW1lbnQuaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XHJcbiAgICAgICAgICAgICAgICByLmxpbmsoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZS5pZCwgXCJrbm93bGVkZ2UtcmVxdWlyZW1lbnRzXCIsIG5ld0tub3dsZWRnZVJlcXVpcmVtZW50LmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBSZWdpc3RlciB0aGUgb3JkZXIgaW4gd2hpY2ggdGhpcyBrbm93bGVkZ2UgcmVxdWlyZW1lbnQgYXBwZWFyZWQgaW4gdGhlIFhNTDpcclxuICAgICAgICAgIG5ld0NvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlci5wdXNoKG5ld0tub3dsZWRnZVJlcXVpcmVtZW50LmlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQnVpbGQga25vd2xlZGdlIG1hdHJpeFxyXG5cclxuICAgICAgICAvLyBMaW5rIGRpcmVjdGx5IGZyb20gY291cnNlIHRlbXBsYXRlIHRvIGFsbCBhYmlsaXRpZXMgdGhhdCB0aGUgc3ViamVjdCBoYXM6XHJcbiAgICAgICAgZm9yIChjb25zdCBhIG9mIHN1YmplY3RBYmlsaXRpZXMpIHtcclxuICAgICAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XHJcbiAgICAgICAgICAgICAgci5saW5rKFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwiYWJpbGl0aWVzXCIsIGEuaWQsIFwiYWJpbGl0aWVzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtjaGFuZ2VzLCBzdWJqZWN0VG9JbXBvcnR9O1xyXG4gIH1cclxuXHJcbiAgY2FuY2VsKCkge1xyXG4gICAgdGhpcy5wcm9wcy5vbkNhbmNlbCgpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgaW1wb3J0KCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGlzV29ya2luZzogdHJ1ZSwgaXNJbXBvcnRpbmc6IHRydWUgfSk7XHJcbiAgICBjb25zdCBhbGxNdXRhdGlvbnMgPSB0aGlzLnN0YXRlLmNoYW5nZXMubWFwKGNoYW5nZSA9PiBjaGFuZ2UubXV0YXRpb25zKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmRvKHIgPT4ge1xyXG4gICAgICAgIGFsbE11dGF0aW9ucy5mb3JFYWNoKG11dCA9PiBtdXQocikpO1xyXG4gICAgICB9KTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1dvcmtpbmc6IGZhbHNlLCBpc0ltcG9ydGluZzogZmFsc2UgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnByb3BzLm9uSW1wb3J0U3VjY2Vzcyh0aGlzLnByb3BzLnN1YmplY3QubmFtZSk7XHJcbiAgfVxyXG5cclxuICBmaXhMKGh0bWw6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGh0bWw7Ly8ucmVwbGFjZSgnPGwgZnJvbWF0PVwiT0xcIj4nKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge3N1YmplY3RUb0ltcG9ydH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qge3N1YmplY3R9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiA8ZGl2PjxoMT57TGBVcHBsYWRkYXQgw4RtbmUgJHtzdWJqZWN0VG9JbXBvcnQgPyBzdWJqZWN0VG9JbXBvcnQubmFtZSA6ICcnfWB9PC9oMT5cclxuICAgICAge3RoaXMuc3RhdGUuZXJyb3IgPyA8cD5GZWw6IHt0aGlzLnN0YXRlLmVycm9yfTwvcD4gOlxyXG4gICAgICAgdGhpcy5zdGF0ZS5pc1dvcmtpbmcgPyA8cD5BcmJldGFyLi4uPC9wPiA6XHJcbiAgICAgICB0aGlzLnN0YXRlLmlzSW1wb3J0aW5nID8gPHA+SW1wb3J0ZXJhci4uLjwvcD4gOlxyXG4gICAgICAgdGhpcy5zdGF0ZS5jaGFuZ2VzLmV2ZXJ5KGMgPT4gIWMuY2hhbmdlKSA/IC8vIEluZ2Egw6RuZHJpbmdhciBhdHQgdmlzYSAoYmFyYSBwc2V1ZG8tw6RuZHJpbmdhcilcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8cD5LdW5kZSBpbnRlIGZpbm5hIG7DpWdyYSBmw7Zyw6RuZHJpbmdhciBmcsOlbiBiZWZpbnRsaWd0IGRhdGEuIEtsaWNrYSBPSyBmw7ZyIGF0dCBhdmJyeXRhIG9jaCDDpXRlcmfDpS48L3A+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmNhbmNlbCgpfT4gT0sgPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PiA6XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDx0YWJsZSBzdHlsZT17e2JvcmRlcjogXCIxcHggc29saWQgZ3JheVwiLCBwYWRkaW5nOiBcIjJweFwiIH19Pjx0aGVhZD48dHI+XHJcbiAgICAgICAgICA8dGggY29sU3Bhbj17Mn0+R3JhbnNrbmluZyBhdiDDpG5kcmluZ2FyIGkgZ3J1bmQtZGF0YTwvdGg+XHJcbiAgICAgICAgPC90cj48dHI+XHJcbiAgICAgICAgICAgIDx0aD7DhG5kcmluZzwvdGg+XHJcbiAgICAgICAgICAgIDx0aD5Jbm5laMOlbGw8L3RoPlxyXG4gICAgICAgICAgPC90cj48L3RoZWFkPjx0Ym9keT5cclxuICAgICAgICAgICAge3RoaXMuc3RhdGUuY2hhbmdlcy5maWx0ZXIoY2hhbmdlID0+IGNoYW5nZS5jaGFuZ2UpLm1hcCgoY2hhbmdlLGkpID0+IDx0ciBrZXk9e2l9PlxyXG4gICAgICAgICAgICAgIDx0ZCBzdHlsZT17e3BhZGRpbmc6IFwiMnB4XCJ9fT57Y2hhbmdlLmNoYW5nZX08L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZCBzdHlsZT17e3BhZGRpbmc6IFwiMnB4XCJ9fSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGNoYW5nZS5jb250ZW50IH19IC8+XHJcbiAgICAgICAgICAgIDwvdHI+KX1cclxuICAgICAgICAgIDwvdGJvZHk+PC90YWJsZT5cclxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuY2FuY2VsKCl9IGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzSW1wb3J0aW5nfT5BdmJyeXQ8L2J1dHRvbj5cclxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuaW1wb3J0KCl9IGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzSW1wb3J0aW5nfT5JbXBvcnRlcmE8L2J1dHRvbj5cclxuICAgICAgICA8YnIgLz5cclxuICAgICAgICA8L2Rpdj59IFxyXG4gICAgICA8YnV0dG9uXHJcbiAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IHNob3dGdWxsVGV4dDogIXRoaXMuc3RhdGUuc2hvd0Z1bGxUZXh0IH0pfT5cclxuICAgICAgICB7dGhpcy5zdGF0ZS5zaG93RnVsbFRleHQgP1xyXG4gICAgICAgICAgTGBEw7ZsaiBuZWRhbmAgOlxyXG4gICAgICAgICAgTGBWaXNhIGhlbGEgdGV4dGVuIGZyw6VuIFNrb2x2ZXJrZXRgfVxyXG4gICAgICA8L2J1dHRvbj5cclxuXHJcbiAgICAgIHsvKiBUaGUgdGFibGUgYmVsb3cgaXMgTk9UIGp1c3QgZm9yIHNob3chXHJcbiAgICAgICAgICBGdW5jdGlvbmFsaXR5IGlzIGRlcGVuZGVudCBvbiBpdHMgZXhpc3RlbmNlIGZvciBpbXBvcnRpbmcgc3R1ZmYgdXNpbmcgalF1ZXJ5IHRvIGNoZXJyeS1waWNrIGRhdGEuICovfSAgICAgICAgICBcclxuICAgICAgPHRhYmxlIHN0eWxlPXt7IGRpc3BsYXk6IHRoaXMuc3RhdGUuc2hvd0Z1bGxUZXh0ID8gJycgOiAnbm9uZScgfX0+PHRib2R5Pjx0cj5cclxuICAgICAgICA8dGg+XHJcbiAgICAgICAgICBOYW1uXHJcbiAgICAgICAgPC90aD5cclxuICAgICAgICA8dGQ+XHJcbiAgICAgICAgICB7c3ViamVjdC5uYW1lfVxyXG4gICAgICAgIDwvdGQ+XHJcbiAgICAgIDwvdHI+PHRyPlxyXG4gICAgICAgICAgPHRoPlxyXG4gICAgICAgICAgICDDhG1uZXNrb2RcclxuICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgIHtzdWJqZWN0LmNvZGV9XHJcbiAgICAgICAgICA8L3RkPlxyXG4gICAgICAgIDwvdHI+PHRyPlxyXG4gICAgICAgICAgPHRoPlxyXG4gICAgICAgICAgICBTeWZ0ZVxyXG4gICAgICAgICAgPC90aD5cclxuICAgICAgICAgIDx0ZCByZWY9e2VsZW0gPT4gdGhpcy5wdXJwb3NlRWxlbSA9IGVsZW19IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5maXhMKHN1YmplY3QucHVycG9zZSkgfX0gLz5cclxuICAgICAgICA8L3RyPjx0cj5cclxuICAgICAgICAgIDx0aD5cclxuICAgICAgICAgICAgS3Vyc2VyXHJcbiAgICAgICAgICA8L3RoPlxyXG4gICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICB7c3ViamVjdC5jb3Vyc2VzLm1hcChjb3Vyc2UgPT4gPHRhYmxlIGtleT17Y291cnNlLmNvZGV9IHJlZj17ZWxlbSA9PiB0aGlzLmNvdXJzZXNFbGVtc1tjb3Vyc2UuY29kZV0gPSB7IGNvdXJzZSwgZWxlbSB9fT48dGJvZHk+XHJcbiAgICAgICAgICAgICAgPHRyPjx0aD5LdXJzZW5zIG5hbW48L3RoPjx0ZD57Y291cnNlLm5hbWV9PC90ZD48L3RyPlxyXG4gICAgICAgICAgICAgIDx0cj48dGg+S3Vyc2tvZDwvdGg+PHRkPntjb3Vyc2UuY29kZX08L3RkPjwvdHI+XHJcbiAgICAgICAgICAgICAgPHRyPjx0aD5Qb8Okbmc8L3RoPjx0ZD57Y291cnNlLnBvaW50c308L3RkPjwvdHI+XHJcbiAgICAgICAgICAgICAgPHRyPjx0aD5DZW50cmFsdCBpbm5laMOlbGw8L3RoPjx0ZCByZWY9e2VsZW0gPT4gdGhpcy5jZW50cmFsQ29udGVudEVsZW1zLnB1c2goZWxlbSl9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5maXhMKGNvdXJzZS5jZW50cmFsQ29udGVudCkgfX0gLz48L3RyPlxyXG4gICAgICAgICAgICAgIHtjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5zb21lKGtyID0+ICFrci5ncmFkZVN0ZXApID8gPHRyPlxyXG4gICAgICAgICAgICAgICAgPHRoPkt1bnNrYXBza3JhdiB1dGFuIGJldHlnc8OkdHRuaW5nPC90aD5cclxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJncmFkZS1zdGVwLW5vbmVcIiByZWY9e2VsZW0gPT4gdGhpcy5rbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zLnB1c2goZWxlbSl9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5maXhMKGNvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLmZpbHRlcihyID0+ICFyLmdyYWRlU3RlcCkubWFwKGtyID0+IGtyLnRleHQpLmpvaW4oJycpKSB9fSAvPlxyXG4gICAgICAgICAgICAgIDwvdHI+IDogdW5kZWZpbmVkfVxyXG5cclxuICAgICAgICAgICAgICB7Y291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuc29tZShrciA9PiBrci5ncmFkZVN0ZXAgPT09J0UnKSA/IDx0cj5cclxuICAgICAgICAgICAgICAgIDx0aD5LdW5za2Fwc2tyYXYgQmV0eWcgRTwvdGg+XHJcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZ3JhZGUtc3RlcC1FXCIgcmVmPXtlbGVtID0+IHRoaXMua25vd2xlZGdlUmVxdWlyZW1lbnRFbGVtcy5wdXNoKGVsZW0pfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHRoaXMuZml4TChjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5maWx0ZXIociA9PiByLmdyYWRlU3RlcCA9PT0gJ0UnKS5tYXAoa3IgPT4ga3IudGV4dCkuam9pbignJykpIH19IC8+XHJcbiAgICAgICAgICAgICAgPC90cj4gOiB1bmRlZmluZWR9XHJcblxyXG4gICAgICAgICAgICAgIHtjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5zb21lKGtyID0+IGtyLmdyYWRlU3RlcCA9PT0nQycpID8gPHRyPlxyXG4gICAgICAgICAgICAgICAgPHRoPkt1bnNrYXBza3JhdiBCZXR5ZyBDPC90aD5cclxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJncmFkZS1zdGVwLUNcIiByZWY9e2VsZW0gPT4gdGhpcy5rbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zLnB1c2goZWxlbSl9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5maXhMKGNvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLmZpbHRlcihyID0+IHIuZ3JhZGVTdGVwID09PSAnQycpLm1hcChrciA9PiBrci50ZXh0KS5qb2luKCcnKSkgfX0gLz5cclxuICAgICAgICAgICAgICA8L3RyPiA6IHVuZGVmaW5lZH1cclxuXHJcbiAgICAgICAgICAgICAge2NvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLnNvbWUoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSdBJykgPyA8dHI+XHJcbiAgICAgICAgICAgICAgICA8dGg+S3Vuc2thcHNrcmF2IEJldHlnIEE8L3RoPlxyXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImdyYWRlLXN0ZXAtQVwiIHJlZj17ZWxlbSA9PiB0aGlzLmtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMucHVzaChlbGVtKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmZpeEwoY291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuZmlsdGVyKHIgPT4gci5ncmFkZVN0ZXAgPT09ICdBJykubWFwKGtyID0+IGtyLnRleHQpLmpvaW4oJycpKSB9fSAvPlxyXG4gICAgICAgICAgICAgIDwvdHI+IDogdW5kZWZpbmVkfVxyXG5cclxuICAgICAgICAgICAgPC90Ym9keT48L3RhYmxlPil9XHJcbiAgICAgICAgICA8L3RkPlxyXG4gICAgICAgIDwvdHI+XHJcbiAgICAgIDwvdGJvZHk+PC90YWJsZT5cclxuICAgIDwvZGl2PlxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEwsIHNob3dJbmZvLCBjb21wYXJlUHJvcCwgYXJyYXlUb0xvb2t1cCwgZmxhdHRlbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgeyBTa29sdmVya2V0U3ViamVjdCwgcGFyc2VTa29sdmVya2V0WWVhcnMsIFNrb2x2ZXJrZXRDb3Vyc2UgfSBmcm9tICcuL3Nrb2x2ZXJrZXQtc3ViamVjdCc7XHJcbmltcG9ydCB7IFVwbG9hZGVkU3ViamVjdCB9IGZyb20gJy4vdXBsb2FkZWQtc3ViamVjdCc7XHJcbmV4cG9ydCB7IFNob3dTdWJqZWN0IH0gZnJvbSAnLi9zaG93LXN1YmplY3QnO1xyXG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIExpbmssIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IHJlYWRCbG9iQXNUZXh0LCBhbGxvd0NvcHkgfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4uL2NvdXJzZXMvY291cnNlLWJhbm5lclwiO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgbGlua1ByZWZpeDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGd5bW5hc2l1bVN1YmplY3RzOiBTdWJqZWN0W107XHJcbiAgcHJpbWFyeVNjaG9vbFN1YmplY3RzOiBTdWJqZWN0W107XHJcbiAgaXNMaXN0aW5nU3ViamVjdHM6IGJvb2xlYW47XHJcbiAgdXBsb2FkZWRTdWJqZWN0OiBTa29sdmVya2V0U3ViamVjdCB8IG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdWJqZWN0c0lubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBpc0xpc3RpbmdTdWJqZWN0czogdHJ1ZSxcclxuICAgICAgZ3ltbmFzaXVtU3ViamVjdHM6IFtdLFxyXG4gICAgICBwcmltYXJ5U2Nob29sU3ViamVjdHM6IFtdLFxyXG4gICAgICB1cGxvYWRlZFN1YmplY3Q6IG51bGxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICB0aGlzLmxvYWQoKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWQoKSB7XHJcbiAgICBjb25zdCBzdWJqZWN0cyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8U3ViamVjdD4oXCJzdWJqZWN0c1wiKTtcclxuICAgIHN1YmplY3RzLnNvcnQoY29tcGFyZVByb3AoXCJuYW1lXCIpKTtcclxuICAgIGNvbnN0IGd5bW5hc2l1bVN1YmplY3RzID0gc3ViamVjdHMuZmlsdGVyKHMgPT4gcy5zY2hvb2xUeXBlICE9PSAncHJpbWFyeScpO1xyXG4gICAgY29uc3QgcHJpbWFyeVNjaG9vbFN1YmplY3RzID0gc3ViamVjdHMuZmlsdGVyKHMgPT4gcy5zY2hvb2xUeXBlID09PSAncHJpbWFyeScpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGd5bW5hc2l1bVN1YmplY3RzLCBwcmltYXJ5U2Nob29sU3ViamVjdHMsIGlzTGlzdGluZ1N1YmplY3RzOiBmYWxzZSB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGhhbmRsZUZpbGVTZWxlY3QoZXY6IFJlYWN0LkRyYWdFdmVudDxIVE1MRGl2RWxlbWVudD4pIHtcclxuICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGZpbGVzID0gZXYuZGF0YVRyYW5zZmVyLmZpbGVzO1xyXG4gICAgY29uc3QgeG1sID0gYXdhaXQgcmVhZEJsb2JBc1RleHQoZmlsZXNbMF0pO1xyXG4gICAgY29uc3QgZG9jID0gJCgkLnBhcnNlWE1MKHhtbCkpO1xyXG4gICAgY29uc3QgdHlwZU9mU2Nob29saW5nID1cclxuICAgICAgZG9jLmZpbmQoXCJzdWJqZWN0Pm9yaWdpbmF0b3JUeXBlT2ZTY2hvb2xpbmdcIikudGV4dCgpLnRyaW0oKSB8fFxyXG4gICAgICBkb2MuZmluZChcInN1YmplY3Q+dHlwZU9mU2Nob29saW5nXCIpLnRleHQoKS50cmltKCk7XHJcbiAgICBjb25zdCBzY2hvb2xUeXBlOiAncHJpbWFyeScgfCAnZ3ltbmFzaXVtJyA9IHR5cGVPZlNjaG9vbGluZyA9PT0gXCJDT01QVUxTT1JZX1NDSE9PTFwiID9cclxuICAgICAgJ3ByaW1hcnknIDpcclxuICAgICAgdHlwZU9mU2Nob29saW5nID09PSBcIlVQUEVSX1NFQ09OREFSWV9FRFVDQVRJT05cIiA/XHJcbiAgICAgICAgJ2d5bW5hc2l1bScgOlxyXG4gICAgICAgIG51bGw7XHJcblxyXG4gICAgaWYgKHNjaG9vbFR5cGUgPT09ICdneW1uYXNpdW0nKSB7XHJcbiAgICAgIGNvbnN0IG1vZGVsOiBTa29sdmVya2V0U3ViamVjdCA9IHtcclxuICAgICAgICBuYW1lOiBkb2MuZmluZChcInN1YmplY3Q+bmFtZVwiKS50ZXh0KCkudHJpbSgpLFxyXG4gICAgICAgIGNvZGU6IGRvYy5maW5kKFwic3ViamVjdD5jb2RlXCIpLnRleHQoKS50cmltKCksXHJcbiAgICAgICAgcHVycG9zZTogZG9jLmZpbmQoXCJzdWJqZWN0PnB1cnBvc2VcIikudGV4dCgpLnRyaW0oKSxcclxuICAgICAgICBjb3Vyc2VzOiBbXSxcclxuICAgICAgICBzY2hvb2xUeXBlOiAnZ3ltbmFzaXVtJ1xyXG4gICAgICB9O1xyXG4gICAgICBjb25zdCBjb3Vyc2VzID0gZG9jLmZpbmQoXCJzdWJqZWN0PmNvdXJzZXNcIik7XHJcbiAgICAgIGZvciAobGV0IGk9MDsgaTxjb3Vyc2VzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgY291cnNlID0gJChjb3Vyc2VzW2ldKTtcclxuICAgICAgICBjb25zdCBrbm93bmxlZGdlUmVxdWlyZW1lbnRzID0gW10uc2xpY2UuY2FsbChjb3Vyc2UuZmluZChcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiKSlcclxuICAgICAgICAgIC5tYXAociA9PiAoe1xyXG4gICAgICAgICAgICBncmFkZVN0ZXA6ICQocikuZmluZCgnZ3JhZGVTdGVwJykudGV4dCgpLnRyaW0oKSxcclxuICAgICAgICAgICAgdGV4dDogJChyKS5maW5kKCd0ZXh0JykudGV4dCgpLnRyaW0oKVxyXG4gICAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICBtb2RlbC5jb3Vyc2VzLnB1c2goe1xyXG4gICAgICAgICAgbmFtZTogY291cnNlLmZpbmQoXCJuYW1lXCIpLnRleHQoKS50cmltKCksXHJcbiAgICAgICAgICBjb2RlOiBjb3Vyc2UuZmluZChcImNvZGVcIikudGV4dCgpLnRyaW0oKSxcclxuICAgICAgICAgIGNlbnRyYWxDb250ZW50OiBjb3Vyc2UuZmluZChcImNlbnRyYWxDb250ZW50XCIpLnRleHQoKS50cmltKCksXHJcbiAgICAgICAgICBwb2ludHM6IHBhcnNlSW50KGNvdXJzZS5maW5kKFwicG9pbnRcIikudGV4dCgpLnRyaW0oKSksXHJcbiAgICAgICAgICBrbm93bmxlZGdlUmVxdWlyZW1lbnRzLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3VwbG9hZGVkU3ViamVjdDogbW9kZWx9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGNlbnRyYWxDb250ZW50cyA9IGZsYXR0ZW4oQXJyYXkuZnJvbShkb2MuZmluZChcInN1YmplY3Q+Y2VudHJhbENvbnRlbnRcIikpXHJcbiAgICAgICAgLm1hcChjYyA9PiB7XHJcbiAgICAgICAgICBjb25zdCB5ZWFyID0gJChjYykuZmluZCgneWVhcicpLnRleHQoKS50cmltKCkgYXMgc3RyaW5nO1xyXG4gICAgICAgICAgY29uc3QgdHlwZU9mQ2VudHJhbENvbnRlbnQgPSAkKGNjKS5maW5kKCd0eXBlT2ZDZW50cmFsQ29udGVudCcpLnRleHQoKS50cmltKCkgYXMgc3RyaW5nO1xyXG5cclxuICAgICAgICAgIGlmICh0eXBlT2ZDZW50cmFsQ29udGVudCkge1xyXG4gICAgICAgICAgICAvLyBEbyBub3QgeWV0IHN1cHBvcnQgbXVsdGlwbGUgdHlwZXMgb2YgY2VudHJhbCBjb250ZW50LlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgKExgw4RtbmV0IGlubmVow6VsbGVyIGZsZXJhIHBhcmFsbGVsbGEgdHlwZXIgYXYgY2VudHJhbHQgaW5uZWjDpWxsLiBEZXR0YSBzdMO2ZHMgw6RubnUgaW50ZS5gKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCBzdGFkaXVtcyA9IHBhcnNlU2tvbHZlcmtldFllYXJzKHllYXIpO1xyXG4gICAgICAgICAgY29uc3QgY2VudHJhbENvbnRlbnRzRm9yRWFjaFN0YWRpdW0gPSBzdGFkaXVtcy5tYXAoIHN0YWRpdW0gPT4gKHtcclxuICAgICAgICAgICAgeWVhcjogc3RhZGl1bSxcclxuICAgICAgICAgICAgdGV4dDogJChjYykuZmluZCgndGV4dCcpLnRleHQoKS50cmltKCkgYXMgc3RyaW5nXHJcbiAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICByZXR1cm4gY2VudHJhbENvbnRlbnRzRm9yRWFjaFN0YWRpdW07XHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgY29uc3Qga25vd2xlZGdlUmVxdWlyZW1lbnRzID0gZmxhdHRlbihBcnJheS5mcm9tKGRvYy5maW5kKFwic3ViamVjdD5rbm93bGVkZ2VSZXF1aXJlbWVudFwiKSlcclxuICAgICAgICAubWFwKGtyID0+IHtcclxuICAgICAgICAgIGNvbnN0IHllYXIgPSAkKGtyKS5maW5kKCd5ZWFyJykudGV4dCgpLnRyaW0oKTtcclxuXHJcbiAgICAgICAgICBjb25zdCB0eXBlT2ZSZXF1aXJlbWVudCA9ICQoa3IpLmZpbmQoJ3R5cGVPZlJlcXVpcmVtZW50JykudGV4dCgpLnRyaW0oKSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICBpZiAodHlwZU9mUmVxdWlyZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gRG8gbm90IHlldCBzdXBwb3J0IG11bHRpcGxlIHR5cGVzIG9mIGtub3dsZWRnZSByZXF1aXJlbWVudC5cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yIChMYMOEbW5ldCBpbm5laMOlbGxlciBmbGVyYSBwYXJhbGxlbGxhIHR5cGVyIGF2IGt1bnNrYXBza3Jhdi4gRGV0dGEgc3TDtmRzIMOkbm51IGludGUuYCk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlU2tvbHZlcmtldFllYXJzKHllYXIpLm1hcChzdGFkaXVtID0+ICh7XHJcbiAgICAgICAgICAgIHllYXI6IHN0YWRpdW0sXHJcbiAgICAgICAgICAgIHRleHQ6ICQoa3IpLmZpbmQoJ3RleHQnKS50ZXh0KCkudHJpbSgpLFxyXG4gICAgICAgICAgICBncmFkZVN0ZXA6ICQoa3IpLmZpbmQoJ2dyYWRlU3RlcCcpLnRleHQoKS50cmltKClcclxuICAgICAgICAgIH0pKTtcclxuICAgICAgICB9KSk7XHJcbiAgICAgIFxyXG4gICAgICBjb25zdCBjZW50cmFsQ29udGVudHNCeVN0YWRpdW0gPSBhcnJheVRvTG9va3VwKGNlbnRyYWxDb250ZW50cywgY2MgPT4gY2MueWVhcik7XHJcbiAgICAgIGNvbnN0IGtub3dsZWRnZVJlcXVpcmVtZW50c0J5U3RhZGl1bSA9IGFycmF5VG9Mb29rdXAoa25vd2xlZGdlUmVxdWlyZW1lbnRzLCBrciA9PiBrci55ZWFyKTtcclxuXHJcbiAgICAgIGNvbnN0IHN1YmplY3ROYW1lID0gZG9jLmZpbmQoXCJzdWJqZWN0Pm5hbWVcIikudGV4dCgpLnRyaW0oKTtcclxuICAgICAgY29uc3Qgc3ViamVjdENvZGUgPSBkb2MuZmluZChcInN1YmplY3Q+Y29kZVwiKS50ZXh0KCkudHJpbSgpO1xyXG4gICAgICBjb25zdCBzdWJqZWN0UHVycG9zZSA9IGRvYy5maW5kKFwic3ViamVjdD5wdXJwb3NlXCIpLnRleHQoKS50cmltKCk7XHJcbiAgICAgIC8qXHJcblxyXG4gICAgICAgIFByb2JsZW1hdGljIHdoZW4gdGhlIGZvbGxvd2luZyB0YWdzIGFyZSBwcmVzZW50OlxyXG5cclxuICAgICAgICA8dHlwZU9mUmVxdWlyZW1lbnQ+XHJcbiAgICAgICAgICBXSVRISU5fU1RVREVOVF9DSE9JQ0VfQ0hJTkVTRVxyXG4gICAgICAgIDwvdHlwZU9mUmVxdWlyZW1lbnQ+XHJcbiAgICAgICAgPHR5cGVPZkNlbnRyYWxDb250ZW50PlxyXG4gICAgICAgICAgV0lUSElOX0xBTkdVQUdFX0NIT0lDRVxyXG4gICAgICAgIDwvdHlwZU9mQ2VudHJhbENvbnRlbnQ+XHJcbiAgICAgICovXHJcblxyXG4gICAgICBjb25zdCBjb3Vyc2VzQnlTdGFkaXVtOiBTa29sdmVya2V0Q291cnNlW10gPSAoWycxLTMnLCc0LTYnLCc3LTknXSBhcyBBcnJheTwnMS0zJyB8ICc0LTYnIHwgJzctOSc+KVxyXG4gICAgICAgIC5tYXAoc3RhZGl1bSA9PiAoe1xyXG4gICAgICAgICAgbmFtZTogc3ViamVjdE5hbWUrJyAnK3N0YWRpdW0sXHJcbiAgICAgICAgICBjb2RlOiBzdWJqZWN0Q29kZSsnfCcrc3RhZGl1bSxcclxuICAgICAgICAgIHBvaW50czogMCxcclxuICAgICAgICAgIHllYXI6IHN0YWRpdW0sXHJcbiAgICAgICAgICBjZW50cmFsQ29udGVudDogKGNlbnRyYWxDb250ZW50c0J5U3RhZGl1bVtzdGFkaXVtXXx8W10pLm1hcChjYyA9PiBjYy50ZXh0KS5qb2luKCdcXG4nKSxcclxuICAgICAgICAgIGtub3dubGVkZ2VSZXF1aXJlbWVudHM6IChrbm93bGVkZ2VSZXF1aXJlbWVudHNCeVN0YWRpdW1bc3RhZGl1bV18fFtdKS5tYXAoKHtncmFkZVN0ZXAsIHRleHR9KSA9PiAoe2dyYWRlU3RlcCwgdGV4dH0pKVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgIGNvbnN0IG1vZGVsOiBTa29sdmVya2V0U3ViamVjdCA9IHtcclxuICAgICAgICBuYW1lOiBzdWJqZWN0TmFtZSxcclxuICAgICAgICBjb2RlOiBzdWJqZWN0Q29kZSxcclxuICAgICAgICBwdXJwb3NlOiBzdWJqZWN0UHVycG9zZSxcclxuICAgICAgICBzY2hvb2xUeXBlOiAncHJpbWFyeScsXHJcbiAgICAgICAgY291cnNlczogY291cnNlc0J5U3RhZGl1bVxyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHt1cGxvYWRlZFN1YmplY3Q6IG1vZGVsfSk7XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbiAgfVxyXG5cclxuICBvbkltcG9ydFN1Y2Nlc3Moc3ViamVjdCkge1xyXG4gICAgIHNob3dJbmZvKExgSW1wb3J0ZW4gYXYgJHtzdWJqZWN0fSBseWNrYWRlc2ApO1xyXG4gICAgIHRoaXMuc2V0U3RhdGUoe3VwbG9hZGVkU3ViamVjdDogbnVsbH0pO1xyXG4gICAgIHRoaXMubG9hZCgpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge2xpbmtQcmVmaXh9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICB7dGhpcy5zdGF0ZS51cGxvYWRlZFN1YmplY3QgP1xyXG4gICAgICA8VXBsb2FkZWRTdWJqZWN0XHJcbiAgICAgICAgb25DYW5jZWw9eygpPT50aGlzLnNldFN0YXRlKHt1cGxvYWRlZFN1YmplY3Q6IG51bGx9KX1cclxuICAgICAgICBvbkltcG9ydFN1Y2Nlc3M9e3N1YmplY3QgPT4gdGhpcy5vbkltcG9ydFN1Y2Nlc3Moc3ViamVjdCl9XHJcbiAgICAgICAgc3ViamVjdD17dGhpcy5zdGF0ZS51cGxvYWRlZFN1YmplY3R9IC8+XHJcbiAgICA6IHRoaXMuc3RhdGUuaXNMaXN0aW5nU3ViamVjdHMgP1xyXG4gICAgICA8ZGl2PjxwPjxTcGlubmVyLz5WYXIgZ29kIHbDpG50YSBtZWRhbiDDpG1uZW4gaMOkbXRhcy4uLjwvcD48L2Rpdj4gOlxyXG4gICAgICA8ZGl2PlxyXG4gICAgICAgIDxoMj57TGBHeW1uYXNpZcOkbW5lbmB9PC9oMj5cclxuICAgICAgICA8dWw+e3RoaXMuc3RhdGUuZ3ltbmFzaXVtU3ViamVjdHMubWFwKHMgPT5cclxuICAgICAgICAgIDxsaSBrZXk9e3MuaWR9IGNsYXNzTmFtZT17cy5wdWJsaXNoYWJsZSA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwifT5cclxuICAgICAgICAgICAgPExpbmsgdG89e2xpbmtQcmVmaXggKyBzLmlkfT57cy5uYW1lfTwvTGluaz5cclxuICAgICAgICAgIDwvbGk+KX1cclxuICAgICAgICA8L3VsPlxyXG4gICAgICAgIDxoMj57TGBHcnVuZHNrb2xlw6RtbmVuYH08L2gyPlxyXG4gICAgICAgIDx1bD57dGhpcy5zdGF0ZS5wcmltYXJ5U2Nob29sU3ViamVjdHMubWFwKHMgPT5cclxuICAgICAgICAgIDxsaSBrZXk9e3MuaWR9IGNsYXNzTmFtZT17cy5wdWJsaXNoYWJsZSA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwifT5cclxuICAgICAgICAgICAgPExpbmsgdG89e2xpbmtQcmVmaXggKyBzLmlkfT57cy5uYW1lfTwvTGluaz5cclxuICAgICAgICAgIDwvbGk+KX1cclxuICAgICAgICA8L3VsPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJvcC16b25lXCIgb25EcmFnT3Zlcj17YWxsb3dDb3B5fSBvbkRyb3A9e2V2PT50aGlzLmhhbmRsZUZpbGVTZWxlY3QoZXYpfT5cclxuICAgICAgICAgIERyb3BwYSBTdWJqZWN0LWZpbCBow6RyIGZyw6VuIHNrb2x2ZXJrZXQgKEjDpG10YXMgZnLDpW4gPGEgaHJlZj1cImh0dHA6Ly9vcGVuZGF0YS5za29sdmVya2V0LnNlXCIgdGFyZ2V0PVwic2tvbHZlcmtldFwiPm9wZW5kYXRhLnNrb2x2ZXJrZXQuc2U8L2E+KVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIH08L2Rpdj5cclxuICB9XHJcbn1cclxuIiwidmFyIG1hcCA9IHtcblx0XCIuL2VuLVNHXCI6IDgwLFxuXHRcIi4vZW4tU0cuanNcIjogODAsXG5cdFwiLi9lbi1hdVwiOiA4MSxcblx0XCIuL2VuLWF1LmpzXCI6IDgxLFxuXHRcIi4vZW4tY2FcIjogODIsXG5cdFwiLi9lbi1jYS5qc1wiOiA4Mixcblx0XCIuL2VuLWdiXCI6IDgzLFxuXHRcIi4vZW4tZ2IuanNcIjogODMsXG5cdFwiLi9lbi1pZVwiOiA4NCxcblx0XCIuL2VuLWllLmpzXCI6IDg0LFxuXHRcIi4vZW4taWxcIjogODUsXG5cdFwiLi9lbi1pbC5qc1wiOiA4NSxcblx0XCIuL2VuLW56XCI6IDg2LFxuXHRcIi4vZW4tbnouanNcIjogODYsXG5cdFwiLi9zdlwiOiA4Nyxcblx0XCIuL3N2LmpzXCI6IDg3XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMTI1OyIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgdXNlcnMgfSBmcm9tICcuL2RhdGEvdXNlcnMnO1xyXG5pbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvcXVlcnktc3RyaW5nJztcclxuXHJcbmNvbnN0IHVzZXJuYW1lID0gcGFyc2VRdWVyeVN0cmluZyAobG9jYXRpb24uc2VhcmNoKS51c2VyO1xyXG5pZiAodXNlcm5hbWUpIHtcclxuICBjb25zdCB1c2VyID0gdXNlcnMuZmluZCh1ID0+IHUudXNlcm5hbWUgPT09IHVzZXJuYW1lKTtcclxuICBpZiAodXNlcikge1xyXG4gICAgZW52LmN1cnJlbnRVc2VyID0gdXNlcjtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHsgcm9sZSwgc2Nob29sIH0gPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCk7XHJcbmlmIChlbnYuY3VycmVudFVzZXIpIHtcclxuICBpZiAocm9sZSkge1xyXG4gICAgZW52LmN1cnJlbnRVc2VyLnJvbGVzID0gcm9sZS5zcGxpdCgnLCcpO1xyXG4gIH1cclxuICBpZiAoc2Nob29sKSB7XHJcbiAgICBlbnYuY3VycmVudFVzZXIuc2Nob29sID0gc2Nob29sO1xyXG4gIH1cclxufVxyXG4iLCJmdW5jdGlvbiByZXNvbHZlKHVyaTogc3RyaW5nKSB7XHJcbiAgdmFyIGhyZWYgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3QgKyBsb2NhdGlvbi5wYXRobmFtZTtcclxuICB2YXIgcExhc3RTbGFzaCA9IGhyZWYubGFzdEluZGV4T2YoJy8nKTtcclxuICByZXR1cm4gaHJlZi5zdWJzdHIoMCwgcExhc3RTbGFzaCArIDEpICsgdXJpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5jbHVkZUNTUyhjc3NGaWxlOiBzdHJpbmcpIHtcclxuICBkb2N1bWVudC53cml0ZSgnPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGhyZWY9XCInK3Jlc29sdmUoY3NzRmlsZSkrJ1wiIC8+Jyk7ICBcclxufVxyXG4iLCJleHBvcnQgZnVuY3Rpb24gaW5jbHVkZU9wdGlvbmFsQ1NTICh7XHJcbiAgdjEsXHJcbiAgdmVyc2lvbkZvbGRlcixcclxuICB2ZXJzaW9uLFxyXG4gIGluY2x1ZGVDU1MsXHJcbiAgTk9DU1NcclxufToge3YxPzogc3RyaW5nW10sIHZlcnNpb25Gb2xkZXI/OiBzdHJpbmcsIHZlcnNpb246IG51bWJlciwgaW5jbHVkZUNTUzogKGZpbGU6IHN0cmluZykgPT4gdm9pZCwgTk9DU1M/OiBzdHJpbmd9KSB7XHJcbiAgaWYgKCFOT0NTUykge1xyXG4gICAgaWYgKHYxKSB2MS5mb3JFYWNoKGNzc0ZpbGUgPT4gaW5jbHVkZUNTUyhjc3NGaWxlKSk7XHJcbiAgfVxyXG4gIGxldCBjc3NWZXIgPSBwYXJzZUludChOT0NTUyk7XHJcbiAgaWYgKGlzTmFOKGNzc1ZlcikpIGNzc1ZlciA9IDE7XHJcbiAgZm9yIChsZXQgdmVyID0gY3NzVmVyICsgMTsgdmVyIDw9IHZlcnNpb247ICsrdmVyKSB7XHJcbiAgICBpbmNsdWRlQ1NTKGAke3ZlcnNpb25Gb2xkZXJ9L3Yke3Zlcn0uY3NzYCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCwgRG9jdW1lbnRBY2Nlc3MsIEJhdGNoUnVubmVyIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBkYiwgZ2xvYmFsSWQsIFNjaG9vbHMgfSBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgd2l0aFJvdXRlciwgUm91dGVQcm9wcywgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcbmltcG9ydCB7IEJyYW5jaCwgU2Nob29sIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IGdldFN1YmplY3RDb2RlcywgY29tcHV0ZVRhZ3NGcm9tU3ViamVjdENvZGVzIH0gZnJvbSAnLi4vLi4vbG9naWMvY291cnNlLWluc3RhbmNlLXRhZ3MnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgUm91dGVDb21wb25lbnRQcm9wczxhbnk+e1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGNvdXJzZU5hbWU6IHN0cmluZztcclxuICBjb3Vyc2VUeXBlOiAndGhlbWUtY291cnNlJyB8ICdzdGVwLWNvdXJzZSc7XHJcbiAgc3ViamVjdDoge3N1YmplY3ROYW1lOiBzdHJpbmcsIHN1YmplY3RDb2RlOiBzdHJpbmd9O1xyXG59XHJcblxyXG5jbGFzcyBfQ3JlYXRlU3RhbmRhcmRDb3Vyc2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGNvdXJzZU5hbWU6IFwiXCIsXHJcbiAgICAgIGNvdXJzZVR5cGU6ICd0aGVtZS1jb3Vyc2UnLFxyXG4gICAgICBzdWJqZWN0OiB7c3ViamVjdE5hbWU6ICcnLCBzdWJqZWN0Q29kZTogJyd9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY3JlYXRlQ291cnNlKCkge1xyXG4gICAgY29uc3QgeyBjb3Vyc2VUeXBlOiB0eXBlLCBjb3Vyc2VOYW1lOiBuYW1lLCBzdWJqZWN0IH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgY291cnNlSWQgPSBjcmVhdGVVVUlEKCk7XHJcblxyXG4gICAgY29uc3Qge29mZmljaWFsQnJhbmNoSWQsIGlkOiBzY2hvb2xJZH0gPSBhd2FpdCBTY2hvb2xzLnN0YW5kYXJkU2Nob29sLmxvYWQoKTtcclxuXHJcbiAgICBkYi5icmFuY2hlcy5hZGRSZWxhdGVkKG9mZmljaWFsQnJhbmNoSWQsIFwiYXBwcm92ZWRDaGlsZHJlblwiLCB7XHJcbiAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgIG5hbWU6ICdkcmFmdCcsXHJcbiAgICAgIGFjbDogW1xyXG4gICAgICAgIFwicm9sZTpVU0VSOlJcIixcclxuICAgICAgICBcInNjaG9vbFJvbGU6c3RhbmRhcmQvRU1QTE9ZRUU6U1wiXSxcclxuICAgICAgc2Nob29sSWQsXHJcbiAgICAgIHRyZWVQYXJlbnRJZDogb2ZmaWNpYWxCcmFuY2hJZCxcclxuICAgICAgdGFnczogW2NvdXJzZUlkXSAvLyBBbGxvdyBmb2xsb3dpbmcgcXVlcmllczpcclxuICAgICAgICAvLyBMaXN0IGFsbCBkcmFmdCBmb3IgYSBjZXJ0YWluIHNjaG9vbDoge2hhc0VkZ2VzRnJvbT1zY2hvb2xCcmFuY2hJZCZ0YWdzPWNvdXJzZUlkfVxyXG4gICAgICAgIC8vIEdldCBvZmZpY2lhbCBkcmFmdCBmb3IgYSBjZXJ0YWluIHNjaG9vbDoge2hhc0VkZ2VzRnJvbT1zY2hvb2xCcmFuY2hJZCZuYW1lPWRyYWZ0JnRhZ3M9Y291cnNlSWR9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBjb3Vyc2VQcm9wZXJ0aWVzID0ge1xyXG4gICAgICBpZDogY291cnNlSWQsXHJcbiAgICAgIGFjbDogW1xyXG4gICAgICAgICdzY2hvb2xSb2xlOnN0YW5kYXJkL0VNUExPWUVFOlMnLFxyXG4gICAgICAgICdyb2xlOlVTRVI6UidcclxuICAgICAgXSxcclxuICAgICAgbmFtZSxcclxuICAgICAgLy9kZXNjcmlwdGlvbjogdHlwZSA9PT0gJ3N0ZXAtY291cnNlJyA/IFwiU3RlZ2t1cnNcIiA6IFwiVGVhbWt1cnNcIixcclxuICAgICAgdGFnczogdHlwZSA9PT0gJ3N0ZXAtY291cnNlJyA/XHJcbiAgICAgICAgY29tcHV0ZVRhZ3NGcm9tU3ViamVjdENvZGVzIChbXSwgW3N1YmplY3Quc3ViamVjdENvZGVdKSA6XHJcbiAgICAgICAgW10gXHJcbiAgICB9O1xyXG5cclxuICAgIGRiLmdsb2JhbC5hZGRSZWxhdGVkKGdsb2JhbElkLCBcImNvdXJzZUluc3RhbmNlc1wiLCB0eXBlID09PSAnc3RlcC1jb3Vyc2UnID8ge1xyXG4gICAgICAuLi5jb3Vyc2VQcm9wZXJ0aWVzLFxyXG4gICAgICB0eXBlLFxyXG4gICAgICBkZXNjcmlwdGlvbjogTGBTdGVna3Vyc2AsXHJcbiAgICAgIHN1YmplY3RcclxuICAgIH0gOiB7XHJcbiAgICAgIC4uLmNvdXJzZVByb3BlcnRpZXMsXHJcbiAgICAgIHR5cGUsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiBMYFRlbWFrdXJzYCxcclxuICAgICAgc3ViamVjdHM6IFtdXHJcbiAgICB9KTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICBjb3Vyc2VOYW1lOiAnJ1xyXG4gICAgfSk7XHJcbiAgICBhd2FpdCBkYi5zYXZlTm93KCk7XHJcbiAgICB0aGlzLnByb3BzLmhpc3RvcnkucHVzaChgL2FkbWluL2NvdXJzZXMvJHtjb3Vyc2VJZH0vc2V0dGluZ3NgKTtcclxuICB9XHJcblxyXG4gIGlzVmFsaWRTdGF0ZShnaXZlTWVzc2FnZT86IGJvb2xlYW4pOiBib29sZWFuIHwgc3RyaW5nIHtcclxuICAgIGNvbnN0IHtjb3Vyc2VOYW1lLCBjb3Vyc2VUeXBlLCBzdWJqZWN0fSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCBydiA9IGNvdXJzZU5hbWUgJiYgY291cnNlVHlwZSA9PT0gJ3RoZW1lLWNvdXJzZScgfHwgc3ViamVjdC5zdWJqZWN0Q29kZTtcclxuICAgIGlmICghcnYgJiYgZ2l2ZU1lc3NhZ2UpIHtcclxuICAgICAgaWYgKCFjb3Vyc2VOYW1lKSByZXR1cm4gTGBLdXJzZW5zIG5hbW4gbcOlc3RlIGZ5bGxhcyBpYDtcclxuICAgICAgaWYgKCFzdWJqZWN0LnN1YmplY3RDb2RlKSByZXR1cm4gTGDDhG1uZSBtw6VzdGUgdsOkbGphcyBmw7ZyIHN0ZWdrdXJzZXJgO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJ2O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyBjb3Vyc2VOYW1lLCBjb3Vyc2VUeXBlLCBzdWJqZWN0IH0gPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGgyPlNrYXBhIG55IHN0YW5kYXJka3VyczwvaDI+XHJcbiAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIE5hbW46IDxpbnB1dCB0eXBlPVwidGV4dFwiIHZhbHVlPXtjb3Vyc2VOYW1lfSBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7IGNvdXJzZU5hbWU6IGV2LnRhcmdldC52YWx1ZSB9KX0gLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8YnIgLz5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJjb3Vyc2UtdHlwZVwiIGNoZWNrZWQ9e2NvdXJzZVR5cGUgPT09ICdzdGVwLWNvdXJzZSd9IG9uQ2hhbmdlPXtldiA9PiBldi50YXJnZXQuY2hlY2tlZCAmJiB0aGlzLnNldFN0YXRlKHsgY291cnNlVHlwZTogJ3N0ZXAtY291cnNlJyB9KX0gLz4gU3RlZ2t1cnNcclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxiciAvPlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImNvdXJzZS10eXBlXCIgY2hlY2tlZD17Y291cnNlVHlwZSA9PT0gJ3RoZW1lLWNvdXJzZSd9IG9uQ2hhbmdlPXtldiA9PiBldi50YXJnZXQuY2hlY2tlZCAmJiB0aGlzLnNldFN0YXRlKHsgY291cnNlVHlwZTogJ3RoZW1lLWNvdXJzZScgfSl9IC8+IFRlbWFrdXJzXHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8YnIgLz5cclxuICAgICAgICB7Y291cnNlVHlwZSA9PT0gJ3N0ZXAtY291cnNlJyA/IDw+XHJcbiAgICAgICAgPGJyLz5cclxuICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJrY2xhYmVsXCI+e0xgw4RtbmVgfTwvbGFiZWw+XHJcbiAgICAgICAgICA8TGF6eUNvbnRlbnQ+e2RiLnN1YmplY3RzLnRhZ3MoXCJzY2hvb2xUeXBlOnByaW1hcnlcIikudG9WYWx1ZSgpLm1hcChzdWJqZWN0cyA9PlxyXG4gICAgICAgICAgICA8c2VsZWN0XHJcbiAgICAgICAgICAgICAgdmFsdWU9e3N1YmplY3Quc3ViamVjdENvZGV9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgc3ViamVjdDogc3ViamVjdHMuZmlsdGVyKHMgPT4gcy5jb2RlID09PSBldi50YXJnZXQudmFsdWUpLm1hcChzID0+ICh7XHJcbiAgICAgICAgICAgICAgICAgIHN1YmplY3RDb2RlOiBzLmNvZGUsXHJcbiAgICAgICAgICAgICAgICAgIHN1YmplY3ROYW1lOiBzLm5hbWVcclxuICAgICAgICAgICAgICAgIH0pKVswXX0pfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPntMYFbDpGxqIMOkbW5lYH08L29wdGlvbj5cclxuICAgICAgICAgICAgICB7c3ViamVjdHMubWFwKHN1YmplY3QgPT4gPG9wdGlvbiBrZXk9e3N1YmplY3QuY29kZX0gdmFsdWU9e3N1YmplY3QuY29kZX0+e3N1YmplY3QubmFtZX08L29wdGlvbj4pfVxyXG4gICAgICAgICAgICA8L3NlbGVjdD4pXHJcbiAgICAgICAgICB9PC9MYXp5Q29udGVudD5cclxuICAgICAgICA8L2Zvcm0+XHJcblxyXG4gICAgICAgIDwvPiA6IG51bGx9XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxidXR0b24gZGlzYWJsZWQ9eyF0aGlzLmlzVmFsaWRTdGF0ZSgpfSBjbGFzc05hbWU9e1tcImJ0blwiLCBcImJ0bi1sYXJnZVwiLCB0aGlzLmlzVmFsaWRTdGF0ZSgpID8gXCJcIiA6IFwiZGlzYWJsZWRcIl0uam9pbignICcpfSBvbkNsaWNrPXsoKSA9PiB0aGlzLmlzVmFsaWRTdGF0ZSgpID9cclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVDb3Vyc2UoKSA6IGFsZXJ0KHRoaXMuaXNWYWxpZFN0YXRlKHRydWUpKX0+U2thcGE8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IENyZWF0ZVN0YW5kYXJkQ291cnNlID0gd2l0aFJvdXRlcihfQ3JlYXRlU3RhbmRhcmRDb3Vyc2UpO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGNhcHRpb246IHN0cmluZztcclxuICBpdGVtczogU2lkZUxpc3RJdGVtW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2lkZUxpc3RJdGVtIHtcclxuICBpZDogc3RyaW5nO1xyXG4gICRtZXRhPzogc3RyaW5nO1xyXG4gIHBpbGxzPzogU2lkZUxpc3RQaWxsW107XHJcbiAgdmlld0xpbms6IHN0cmluZztcclxuICBlZGl0TGluazogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBkZXNjcmlwdGlvbj86IHN0cmluZztcclxuICBzbWFsbFRleHQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2lkZUxpc3RQaWxsIHtcclxuICBjbGFzc05hbWU6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBTaWRlTGlzdCA9ICh7aXRlbXMsIGNhcHRpb259OiBQcm9wcykgPT4gKFxyXG4gIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIj5cclxuICAgICAgICA8aDM+e2NhcHRpb259PC9oMz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXIgb2RkLWV2ZW5cIj5cclxuICAgICAgICAgIHtpdGVtcy5tYXAoaXRlbSA9PiA8ZGl2IGNsYXNzTmFtZT1cInNjaG9vbENvdXJzZVwiIGtleT17aXRlbS5pZH0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtbXCJhbGlnbi1ob3Jpem9udGFsXCIsIGl0ZW0uJG1ldGEgJiYgYGVudGl0eW1ldGEtJHtpdGVtLiRtZXRhfWBdLmpvaW4oJyAnKX0+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgcHVsbC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAge2l0ZW0uZWRpdExpbmsuc3RhcnRzV2l0aCgnOicpID9cclxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj17aXRlbS5lZGl0TGluay5zdWJzdHIoMSl9IGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgLz4gOlxyXG4gICAgICAgICAgICAgICAgICA8TGluayB0bz17aXRlbS5lZGl0TGlua30gY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIiAvPlxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAge2l0ZW0udmlld0xpbmsuc3RhcnRzV2l0aCgnOicpID9cclxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj17aXRlbS52aWV3TGluay5zdWJzdHIoMSl9PntpdGVtLm5hbWV9PC9hPiA6XHJcbiAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtpdGVtLnZpZXdMaW5rfT57aXRlbS5uYW1lfTwvTGluaz5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICB7aXRlbS5waWxscy5tYXAoKHBpbGwsIGlkeCkgPT4gXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGtleT17aWR4fSBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1tcInBpbGxcIl0uY29uY2F0KHBpbGwuY2xhc3NOYW1lKS5qb2luKCcgJyl9PntwaWxsLm5hbWV9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICA8cD57aXRlbS5kZXNjcmlwdGlvbn08L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+e2l0ZW0uc21hbGxUZXh0fTwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj4pfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj4gXHJcbiAgICA8L2Rpdj5cclxuKTtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBTaWRlTGlzdCwgU2lkZUxpc3RQaWxsIH0gZnJvbSAnLi9zaWRlLWxpc3QnO1xyXG5pbXBvcnQgeyBkYiwgZ2xvYmFsSWQgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgY29tcGFyZVByb3AsIEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICcuLi8uLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zcGlubmVyJztcclxuaW1wb3J0IHsgbGl2ZVF1ZXJ5VmlldyB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9saXZlLXF1ZXJ5LXZpZXcnO1xyXG5pbXBvcnQgY2ZnIGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSAnLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xyXG5pbXBvcnQgeyBzaG9ydERhdGVGb3JtYXQgfSBmcm9tICcuLi8uLi9jb3Vyc2UtYnVpbGRlci91dGlscyc7XHJcbmltcG9ydCB7IGxpc3RDb3Vyc2VJbnN0YW5jZXMgfSBmcm9tICcuLi9sb2dpYy9saXN0LWNvdXJzZS1pbnN0YW5jZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFN0YW5kYXJkQ291cnNlSW5zdGFuY2VMaXN0ID0gbGl2ZVF1ZXJ5VmlldygoKT0+XHJcbiAgLyp7XHJcbiAgICBsb2FkaW5nOiAoKT0+PFNwaW5uZXIgLz4sXHJcbiAgICBlcnJvcjogZXJyb3IgPT4gPHA+T2pzYW4gaG9wcHNhbiBmZWw6IHtlcnJvci5tZXNzYWdlfTwvcD5cclxuICB9LCovXHJcbiAgbGlzdENvdXJzZUluc3RhbmNlcygpXHJcbiAgICAub3JkZXJCeShcIm5hbWVcIilcclxuICAgIC5tYXAoKHtpZCwgJG1ldGEsIG5hbWUsIGRlc2NyaXB0aW9uLCB0YWdzLCB0eXBlLCBtb2RpZmllZEJ5LCBtb2RpZmllZERhdGV9KSA9PiAoe1xyXG4gICAgICBpZCxcclxuICAgICAgdHlwZSxcclxuICAgICAgJG1ldGEsXHJcbiAgICAgIG5hbWUsXHJcbiAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICB2aWV3TGluazpgOiR7cHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkoY2ZnLktFRF9TVUJKRUNUX1BMQU5ORVJfVVJMLCB7fSl9Iy9zdGFuZGFyZC9jb3Vyc2VzLyR7aWR9YCxcclxuICAgICAgZWRpdExpbms6YC9hZG1pbi9jb3Vyc2VzLyR7aWR9L3NldHRpbmdzYCxcclxuICAgICAgcGlsbHM6IHRhZ3MuZmlsdGVyKHRhZyA9PiB0YWcgPT09IFwiYWN0aXZlXCIpXHJcbiAgICAgICAgLm1hcCh0YWcgPT4gKHtcclxuICAgICAgICAgIGNsYXNzTmFtZTogXCJhY3RpdmVcIixcclxuICAgICAgICAgIG5hbWU6IExgQWt0aXZgXHJcbiAgICAgICAgfSkpLFxyXG4gICAgICBzbWFsbFRleHQ6IG1vZGlmaWVkQnkgJiYgbW9kaWZpZWREYXRlICYmIExgU2VuYXN0IHJlZGlnZXJhZCBhdiAke21vZGlmaWVkQnkubmFtZX0gLyAke3Nob3J0RGF0ZUZvcm1hdChtb2RpZmllZERhdGUpfWBcclxuICAgIH0pKVxyXG4gICAgLnRvVmFsdWUoKVxyXG4gICAgLm1hcChjb3Vyc2VJdGVtcyA9PiB7XHJcbiAgICAgIGNvbnN0IHN0ZXBDb3Vyc2VJdGVtcyA9IGNvdXJzZUl0ZW1zLmZpbHRlcihjb3Vyc2UgPT4gY291cnNlLnR5cGUgPT09ICdzdGVwLWNvdXJzZScpO1xyXG4gICAgICBjb25zdCB0aGVtZUNvdXJzZUl0ZW1zID0gY291cnNlSXRlbXMuZmlsdGVyKGNvdXJzZSA9PiBjb3Vyc2UudHlwZSA9PT0gJ3RoZW1lLWNvdXJzZScpO1xyXG5cclxuICAgICAgcmV0dXJuIDw+XHJcbiAgICAgICAgPFNpZGVMaXN0IGNhcHRpb249e1wiU3RlZ2t1cnNlclwifSBpdGVtcz17c3RlcENvdXJzZUl0ZW1zfSAvPlxyXG4gICAgICAgIDxTaWRlTGlzdCBjYXB0aW9uPXtcIlRlbWFrdXJzZXJcIn0gaXRlbXM9e3RoZW1lQ291cnNlSXRlbXN9IC8+XHJcbiAgICAgIDwvPlxyXG4gICAgfSkpO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIG9wdGlvbnM/OiBPcHRpb25bXTtcclxuICBvcHRpb25zVmlzaWJsZTogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzZWxlY3RlZDogT3B0aW9uW11cclxuICBnZXRPcHRpb25zOiAoKT0+UHJvbWlzZTxPcHRpb25bXT47XHJcbiAgb25DaGFuZ2U6IChzZWxlY3RlZDogT3B0aW9uW10pID0+IHZvaWQ7XHJcbn1cclxuXHJcbmludGVyZmFjZSBPcHRpb24ge1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBrZXk6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE11bHRpc2VsZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgb3B0aW9uc1Zpc2libGU6IGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7c2VsZWN0ZWQsIG9uQ2hhbmdlLCBnZXRPcHRpb25zfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7b3B0aW9uc1Zpc2libGUsIG9wdGlvbnN9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IGZpbHRlcmVkT3B0aW9ucyA9IG9wdGlvbnMgJiYgb3B0aW9ucy5maWx0ZXIobyA9PiAhc2VsZWN0ZWQuc29tZShzID0+IHMua2V5ID09PSBvLmtleSkpO1xyXG4gICAgcmV0dXJuIDw+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHNlbGVjdGVkLm1hcCgoe2tleSwgbmFtZX0pID0+IHtcclxuICAgICAgICAgICAgLy9jb25zdCBjaGVja2VkID0gc2VsZWN0ZWQuaW5jbHVkZXMoa2V5KTtcclxuICAgICAgICAgICAgcmV0dXJuIDxkaXYga2V5PXtrZXl9IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxpXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZmEgZmEtcmVtb3ZlIGhvdmVyYWJsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9Pm9uQ2hhbmdlKHNlbGVjdGVkLmZpbHRlcihvcHRpb24gPT4gb3B0aW9uLmtleSAhPT0ga2V5KSl9XHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgIHtuYW1lfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8c3BhbiBzdHlsZT17e291dGxpbmU6ICdub25lJ319IHRhYkluZGV4PXswfSBvbkJsdXI9e2V2ID0+IHNldFRpbWVvdXQoKCk9PnRoaXMuc2V0U3RhdGUoe29wdGlvbnNWaXNpYmxlOiBmYWxzZX0pLCAxMDApfT5cclxuICAgICAgICA8YVxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuXCJcclxuICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpPT57XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zVmlzaWJsZSkgcmV0dXJuIHRoaXMuc2V0U3RhdGUoe29wdGlvbnNWaXNpYmxlOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtvcHRpb25zVmlzaWJsZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRpb25zID0gYXdhaXQgZ2V0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7b3B0aW9uc30pO1xyXG4gICAgICAgICAgICAgIH0gY2F0Y2goZXJyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtvcHRpb25zOiBbe2tleTogbnVsbCwgbmFtZTogTGBFdHQgZmVsIGhhciBpbnRyw6RmZmF0YH1dfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj17dHJ1ZX0gLz4ge0xgTMOkZ2cgdGlsbGB9XHJcbiAgICAgIDwvYT5cclxuICAgICAge1xyXG4gICAgICAgIG9wdGlvbnNWaXNpYmxlID8gPD5cclxuICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgZmlsdGVyZWRPcHRpb25zID9cclxuICAgICAgICAgICAgICAgIDxzZWxlY3RcclxuICAgICAgICAgICAgICAgICAgc2l6ZT17ZmlsdGVyZWRPcHRpb25zLmxlbmd0aCA9PT0gMSA/IDIgOiBmaWx0ZXJlZE9wdGlvbnMubGVuZ3RofVxyXG4gICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9JydcclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZEtleSA9IGV2LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZShzZWxlY3RlZC5jb25jYXQoe2tleTogc2VsZWN0ZWRLZXksIG5hbWU6IG9wdGlvbnMuZmlsdGVyKG8gPT4gby5rZXkgPT09IHNlbGVjdGVkS2V5KS5tYXAobyA9PiBvLm5hbWUpWzBdfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe29wdGlvbnNWaXNpYmxlOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgICAgPG9wdGlvbiBzdHlsZT17e2Rpc3BsYXk6ICdub25lJ319IGRpc2FibGVkIGtleT0nJyB2YWx1ZT0nJz48L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAge2ZpbHRlcmVkT3B0aW9ucy5tYXAoKHtrZXksIG5hbWV9KSA9PiA8b3B0aW9uIGtleT17a2V5fSB2YWx1ZT17a2V5fT57bmFtZX08L29wdGlvbj4pfVxyXG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+IDpcclxuICAgICAgICAgICAgICAgIDxTcGlubmVyIC8+XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIDwvPiA6XHJcbiAgICAgICAgICB1bmRlZmluZWRcclxuICAgICAgfVxyXG4gICAgICA8L3NwYW4+XHJcbiAgICA8Lz47XHJcbiAgfVxyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8sIFdpdGhHcmFwaHMsIFN0cmlwR3JhcGhzIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgVGFzaywgVGhlbWVDb3Vyc2VUYWIsIENvdXJzZVRhYiwgQ291cnNlQmxvY2ssIENvdXJzZUluc3RhbmNlLCBTdGVwQ291cnNlSW5zdGFuY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IEtub3dsZWRnZU1hdHJpeCB9IGZyb20gJy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2tub3dsZWRnZS1tYXRyaXgnO1xyXG5pbXBvcnQgeyBMYXp5Q29udGVudCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9sYXp5LWNvbnRlbnQnO1xyXG5pbXBvcnQgeyBnZXRDb3Vyc2VDb2Rlc0Zyb21UYWdzIH0gZnJvbSAnLi4vLi4vbG9naWMvZ2V0LWNvdXJzZS1jb2Rlcy1mcm9tLXRhZ3MnO1xyXG5pbXBvcnQgeyBMLCBzaG93RXJyb3IsIGZsYXR0ZW4gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IGdldFN0YW5kYXJkQ291cnNlc1dpdGhPcmRlcmVkUmVxdWlyZW1lbnRzIH0gZnJvbSAnLi4vLi4vbG9naWMvZ2V0LXN0YW5kYXJkLWNvdXJzZXMtd2l0aC1vcmRlcmVkLXJlcXVpcmVtZW50cyc7XHJcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveCc7XHJcbmltcG9ydCB7IFNlbGVjdFJlbGF0ZWREb2NzIH0gZnJvbSAnLi4vLi4vLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc2VsZWN0LXJlbGF0ZWQtZG9jcyc7XHJcbmltcG9ydCB7IGxpdmVRdWVyeVZpZXcgfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGl2ZS1xdWVyeS12aWV3JztcclxuaW1wb3J0IHsgZ2V0SWRzTm90Q292ZXJlZEJ5UmVxUmVmZXJlbmNpbmdEb2NzIH0gZnJvbSAnLi4vLi4vLi4vY291cnNlLWJ1aWxkZXIvY291cnNlcy9idXNpbmVzcy1sb2dpYyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHJlcG86IEtlZEJhY2tlbmRSZXBvXHJcbiAgY291cnNlOiBTdGVwQ291cnNlSW5zdGFuY2VcclxuICBibG9jazogU3RyaXBHcmFwaHM8Q291cnNlQmxvY2s+XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDb3Vyc2VCbG9ja1JlcXVpcmVtZW50cyA9IGxpdmVRdWVyeVZpZXcoKHtcclxuICByZXBvLFxyXG4gIGNvdXJzZSxcclxuICBibG9ja1xyXG59OiBQcm9wcykgPT4ge1xyXG4gIGNvbnN0IGNvdXJzZUNvZGVzID0gZ2V0Q291cnNlQ29kZXNGcm9tVGFncyhibG9jay50YWdzKTtcclxuICBjb25zdCBjb3Vyc2VDb2RlVGFncyA9IGNvdXJzZUNvZGVzLm1hcChjb2RlID0+IFwiY291cnNlOlwiICsgY29kZSk7XHJcbiAgcmV0dXJuIGdldFN0YW5kYXJkQ291cnNlc1dpdGhPcmRlcmVkUmVxdWlyZW1lbnRzKGNvdXJzZUNvZGVzKVxyXG4gICAgLmNvbWJpbmVMYXRlc3QoXHJcbiAgICAgIHJlcG8uY291cnNlQmxvY2tzXHJcbiAgICAgICAgLmhhc0VkZ2VzRnJvbShbY291cnNlLmlkXSkgLy8gU2FtZSBwYXJlbnQgZ2l2ZSBtZSBzaWJsaW5nIGJsb2NrcyFcclxuICAgICAgICAudGFncyguLi5jb3Vyc2VDb2RlVGFncykgLy8gLi4udGFnZ2VkIHdpdGggc2FtZSBjb3Vyc2VDb2RlICg9IFwiMS0zXCIsIFwiNC02XCIsIGV0Yy4uLilcclxuICAgICAgICAuaW5jbHVkZShcImFiaWxpdGllc1wiLCBcImNlbnRyYWxDb250ZW50XCIsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIpXHJcbiAgICAgICAgLmluY2x1ZGVJZHNPbmx5KCkpIC8vIFNvIHdlIGNhbiBkZXRlY3Qgbm9uLWNvdmVyZWQgcmVxdWlyZW1lbnRzXHJcbiAgICAubWFwKChbY291cnNlVGVtcGxhdGVzLCBzaWJsaW5nQmxvY2tzXSkgPT4ge1xyXG4gICAgICBjb25zdCB1bmNvdmVyZWRJZHMgPSBnZXRJZHNOb3RDb3ZlcmVkQnlSZXFSZWZlcmVuY2luZ0RvY3MoY291cnNlVGVtcGxhdGVzLCBzaWJsaW5nQmxvY2tzKTtcclxuICAgICAgaWYgKGNvdXJzZVRlbXBsYXRlcy5sZW5ndGggPT09IDApXHJcbiAgICAgICAgcmV0dXJuIDxwPntMYEJsb2NrZXQgw6RyIGludGUga29wcGxhZCB0aWxsIG7DpWdvbiDDpXJza3Vyc2B9PC9wPjtcclxuXHJcbiAgICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgIHtjb3Vyc2VUZW1wbGF0ZXMubWFwKCh7aWQsIG5hbWUsIGFiaWxpdGllcywgY2VudHJhbENvbnRlbnQsIGtub3dsZWRnZVJlcXVpcmVtZW50c30pID0+IDxkaXYga2V5PXtpZH0+XHJcbiAgICAgICAgICB7Y291cnNlVGVtcGxhdGVzLmxlbmd0aCA9PT0gMSA/IHVuZGVmaW5lZCA6IDxoMT57bmFtZX08L2gxPn1cclxuICAgICAgICAgICAgPE9wZW5DbG9zZUJveCBjbGFzc05hbWU9XCJsYXJnZXJcIiB0aXRsZT17PHA+e0xgVsOkbGogYmxvY2tldHMga3Vuc2thcHNrcmF2YH08L3A+fT5cclxuICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAge0xgTWFya2VyYSBkZSBrdW5za2Fwc2tyYXYgc29tIGJsb2NrZXQgc2thIHTDpGNrYS5gfVxyXG4gICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICA8TGF6eUNvbnRlbnQ+e1xyXG4gICAgICAgICAgICAgICAgcmVwb1tcImtub3dsZWRnZS1yZXF1aXJlbWVudHNcIl0uaGFzRWRnZXNGcm9tKFtibG9jay5pZF0pLmlkc09ubHkoKS50b1ZhbHVlKCkubWFwKGJsb2NrS3JzID0+IHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiA8S25vd2xlZGdlTWF0cml4XHJcbiAgICAgICAgICAgICAgICAgICAga25vd2xlZGdlUmVxdWlyZW1lbnRzPXtrbm93bGVkZ2VSZXF1aXJlbWVudHN9XHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2VkSWRzPXtibG9ja0tycy5tYXAoKHtpZH0pID0+IGlkKX1cclxuICAgICAgICAgICAgICAgICAgICBpZHNUb01hcmtOb3RPaz17dW5jb3ZlcmVkSWRzfVxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtNb2RlPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uTWFya0NoYW5nZWQ9eyhtYXJrZWRJZDogc3RyaW5nLCBpc01hcmtlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGludmFsaWQga25vd2xlZGdlIHJlcXVpcmVtZW50cyAodGhvc2UgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIHN0YW5kYXJkIGNvdXJzZSlcclxuICAgICAgICAgICAgICAgICAgICAgIC8vIENhbiBoYXBwZW4gYWZ0ZXIgY2hhbmdpbmcgc2Nob29sIHllYXIgLyBjb3Vyc2Ugb3Igc3ViamVjdC5cclxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGludmFsaWRLcnMgPSBibG9ja0tycy5maWx0ZXIoa3IgPT4gIWtub3dsZWRnZVJlcXVpcmVtZW50cy5zb21lKCh7aWR9KSA9PiBrci5pZCA9PT0gaWQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGludmFsaWRLcnMuZm9yRWFjaChpbnZhbGlkS3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZUJsb2Nrcy5yZW1vdmVSZWxhdGVkKGJsb2NrLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBpbnZhbGlkS3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZWREb2MgPSBrbm93bGVkZ2VSZXF1aXJlbWVudHMuZmlsdGVyKCh7aWR9KSA9PiBpZCA9PT0gbWFya2VkSWQpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFya2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcG8uY291cnNlQmxvY2tzLmFkZFJlbGF0ZWQoYmxvY2suaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIG1hcmtlZERvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZUJsb2Nrcy5yZW1vdmVSZWxhdGVkKGJsb2NrLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBtYXJrZWREb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICB9KX08L0xhenlDb250ZW50PlxyXG4gICAgICAgICAgICA8L09wZW5DbG9zZUJveD5cclxuXHJcbiAgICAgICAgICAgIDxMYXp5Q29udGVudD57XHJcbiAgICAgICAgICAgICAgcmVwby5hYmlsaXRpZXMuaGFzRWRnZXNGcm9tKFtibG9jay5pZF0pLmlkc09ubHkoKS50b1ZhbHVlKCkubWFwKGJsb2NrQWJpbGl0aWVzID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiA8U2VsZWN0UmVsYXRlZERvY3NcclxuICAgICAgICAgICAgICAgICAgb3B0aW9ucz17YWJpbGl0aWVzfVxyXG4gICAgICAgICAgICAgICAgICB0aXRsZT17TGBWw6RsaiBibG9ja2V0cyBmw7ZybcOlZ29yYH1cclxuICAgICAgICAgICAgICAgICAgbWFya2VkSWRzPXtibG9ja0FiaWxpdGllcy5tYXAoKHtpZH0pID0+IGlkKX1cclxuICAgICAgICAgICAgICAgICAgdW5jb3ZlcmVkSWRzPXt1bmNvdmVyZWRJZHN9XHJcbiAgICAgICAgICAgICAgICAgIG1hcmtNb2RlPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAvL21pZ3JhdGVkSWRzPXt0YXNrICYmIHRhc2subWlncmF0ZWRUZXh0cyAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMuYWJpbGl0aWVzfVxyXG4gICAgICAgICAgICAgICAgICBvbk1hcmtDaGFuZ2VkPXsobWFya2VkSWQsIGlzTWFya2VkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGludmFsaWQgYWJpbGl0aWVzICh0aG9zZSB0aGF0IGFyZSBub3QgcGFydCBvZiB0aGUgc3RhbmRhcmQgY291cnNlKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbiBoYXBwZW4gYWZ0ZXIgY2hhbmdpbmcgc2Nob29sIHllYXIgLyBjb3Vyc2Ugb3Igc3ViamVjdC5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnZhbGlkQWJpbGl0aWVzID0gYmxvY2tBYmlsaXRpZXMuZmlsdGVyKGEgPT4gIWFiaWxpdGllcy5zb21lKCh7aWR9KSA9PiBhLmlkID09PSBpZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRBYmlsaXRpZXMuZm9yRWFjaChpbnZhbGlkQWJpbGl0eSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZUJsb2Nrcy5yZW1vdmVSZWxhdGVkKGJsb2NrLmlkLCBcImFiaWxpdGllc1wiLCBpbnZhbGlkQWJpbGl0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya2VkRG9jID0gYWJpbGl0aWVzLmZpbHRlcigoe2lkfSkgPT4gaWQgPT09IG1hcmtlZElkKVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgIGlmIChpc01hcmtlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZUJsb2Nrcy5hZGRSZWxhdGVkKGJsb2NrLmlkLCBcImFiaWxpdGllc1wiLCBtYXJrZWREb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwby5jb3Vyc2VCbG9ja3MucmVtb3ZlUmVsYXRlZChibG9jay5pZCwgXCJhYmlsaXRpZXNcIiwgbWFya2VkRG9jKTtcclxuICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIH0pfTwvTGF6eUNvbnRlbnQ+XHJcblxyXG4gICAgICAgICAgICA8TGF6eUNvbnRlbnQ+e1xyXG4gICAgICAgICAgICAgIHJlcG9bXCJjZW50cmFsLWNvbnRlbnRcIl0uaGFzRWRnZXNGcm9tKFtibG9jay5pZF0pLmlkc09ubHkoKS50b1ZhbHVlKCkubWFwKGJsb2NrQ0NzID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPFNlbGVjdFJlbGF0ZWREb2NzXHJcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e2NlbnRyYWxDb250ZW50fVxyXG4gICAgICAgICAgICAgICAgICB0aXRsZT17TGBWw6RsaiBibG9ja2V0cyBjZW50cmFsYSBpbm5laMOlbGxgfVxyXG4gICAgICAgICAgICAgICAgICBtYXJrZWRJZHM9e2Jsb2NrQ0NzLm1hcChjYyA9PiBjYy5pZCl9XHJcbiAgICAgICAgICAgICAgICAgIHVuY292ZXJlZElkcz17dW5jb3ZlcmVkSWRzfVxyXG4gICAgICAgICAgICAgICAgICBtYXJrTW9kZT17dHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgLy9taWdyYXRlZElkcz17dGFzayAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMgJiYgdGFzay5taWdyYXRlZFRleHRzLmNlbnRyYWxDb250ZW50fVxyXG4gICAgICAgICAgICAgICAgICBvbk1hcmtDaGFuZ2VkPXsobWFya2VkSWQsIGlzTWFya2VkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGludmFsaWQgY2VudHJhbCBjb250ZW50cyAodGhvc2UgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIHN0YW5kYXJkIGNvdXJzZSlcclxuICAgICAgICAgICAgICAgICAgICAvLyBDYW4gaGFwcGVuIGFmdGVyIGNoYW5naW5nIHNjaG9vbCB5ZWFyIC8gY291cnNlIG9yIHN1YmplY3QuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW52YWxpZENlbnRyYWxDb250ZW50cyA9IGJsb2NrQ0NzLmZpbHRlcihjYyA9PiAhY2VudHJhbENvbnRlbnQuc29tZSgoe2lkfSkgPT4gY2MuaWQgPT09IGlkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZENlbnRyYWxDb250ZW50cy5mb3JFYWNoKGludmFsaWRDQyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZUJsb2Nrcy5yZW1vdmVSZWxhdGVkKGJsb2NrLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIGludmFsaWRDQyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya2VkRG9jID0gY2VudHJhbENvbnRlbnQuZmlsdGVyKCh7aWR9KSA9PiBpZCA9PT0gbWFya2VkSWQpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc01hcmtlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgcmVwby5jb3Vyc2VCbG9ja3MuYWRkUmVsYXRlZChibG9jay5pZCwgXCJjZW50cmFsQ29udGVudFwiLCBtYXJrZWREb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZUJsb2Nrcy5yZW1vdmVSZWxhdGVkKGJsb2NrLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIG1hcmtlZERvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgLz4gIFxyXG4gICAgICAgICAgICAgIH0pfTwvTGF6eUNvbnRlbnQ+XHJcblxyXG4gICAgICAgIDwvZGl2Pil9XHJcbiAgICAgIDwvZGl2PjtcclxufSl9KVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBXaXRoR3JhcGhzLCBLZWRCYWNrZW5kUmVwbyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IFN0ZXBDb3Vyc2VJbnN0YW5jZSwgQ291cnNlQmxvY2ssIFN0ZXBDb3Vyc2VUYWIgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGNvbXBhcmVQcm9wLCBMIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyB9IGZyb20gJy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL3V0aWxzJztcclxuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtJztcclxuaW1wb3J0IHsgZ2V0U2Nob29sWWVhcnMsIGNvbXB1dGVUYWdzRnJvbVNjaG9vbFllYXJzLCBjb21wdXRlVGFnc0Zyb21TdWJqZWN0Q29kZXMsIGdldFN1YmplY3RDb2RlcyB9IGZyb20gJy4uLy4uL2xvZ2ljL2NvdXJzZS1pbnN0YW5jZS10YWdzJztcclxuaW1wb3J0IHsgQ291cnNlQmxvY2tSZXF1aXJlbWVudHMgfSBmcm9tICcuL2VkaXQtY291cnNlLWJsb2NrLXJlcXVpcmVtZW50cyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHJlcG86IEtlZEJhY2tlbmRSZXBvXHJcbiAgY291cnNlOiBXaXRoR3JhcGhzPFN0ZXBDb3Vyc2VJbnN0YW5jZSwgXCJibG9ja3NcIj5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEVkaXRTdGFuZGFyZENvdXJzZUJsb2NrcyA9ICh7cmVwbywgY291cnNlfTogUHJvcHMpID0+IDxkaXY+XHJcbiAgPGxhYmVsIGNsYXNzTmFtZT1cImtjbGFiZWxcIj57TGBLdXJzYmxvY2tgfTwvbGFiZWw+XHJcbiAge2NvdXJzZS5ibG9ja3Muc29ydChjb21wYXJlUHJvcChcImJsb2NrTm9cIikpLm1hcCgoYmxvY2ssIGlkeCkgPT5cclxuICAgIDxDb3Vyc2VCbG9ja1NldHRpbmdzXHJcbiAgICAgIGtleT17YmxvY2suaWR9XHJcbiAgICAgIGJsb2NrPXtibG9ja31cclxuICAgICAgY291cnNlPXtjb3Vyc2V9XHJcbiAgICAgIHJlcG89e3JlcG99XHJcbiAgICAgIGlzTGFzdEJsb2NrPXtpZHggPT09IGNvdXJzZS5ibG9ja3MubGVuZ3RoIC0gMX1cclxuICAgIC8+KX1cclxuICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiXHJcbiAgICBvbkNsaWNrPXsoKT0+YWRkQ291cnNlQmxvY2socmVwbywgY291cnNlKX1cclxuICA+XHJcbiAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgLz4ge0xgTMOkZ2cgdGlsbCBibG9ja2B9XHJcbiAgPC9idXR0b24+XHJcbiAgPGJyLz5cclxuPC9kaXY+XHJcblxyXG5leHBvcnQgY29uc3QgQ291cnNlQmxvY2tTZXR0aW5ncyA9ICh7YmxvY2ssIGNvdXJzZSwgcmVwbywgaXNMYXN0QmxvY2t9OiBQcm9wcyAmIHtibG9jazogQ291cnNlQmxvY2ssIGlzTGFzdEJsb2NrOiBib29sZWFufSkgPT4gPD5cclxuICA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiIHN0eWxlPXt7cG9zaXRpb246IFwicmVsYXRpdmVcIn19PlxyXG4gICAgPGg0PkJsb2NrIHtibG9jay5ibG9ja05vfTwvaDQ+XHJcbiAgICB7TGBTdGVnYH0gPGRpdiBjbGFzc05hbWU9XCJidG4tZ3JvdXBcIj5cclxuICAgICAge2Jsb2NrLnN0ZXBOdW1iZXJzLm1hcChzdGVwTm8gPT5cclxuICAgICAgICA8YSBrZXk9e3N0ZXBOb30gY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbWFsbCBzdGVwLWJ1dHRvblwiPntzdGVwTm99PC9hPil9XHJcbiAgICA8L2Rpdj5cclxuICAgIDxmb3JtPlxyXG4gICAgICA8bGFiZWwgY2xhc3NOYW1lPVwia2NsYWJlbFwiPntMYMOFcnNrdXJzYH08L2xhYmVsPlxyXG4gICAgICA8c2VsZWN0IHZhbHVlPXtnZXRTY2hvb2xZZWFycyhibG9jay50YWdzKVswXSB8fCBcIlwifVxyXG4gICAgICAgIG9uQ2hhbmdlPXtldiA9PiByZXBvLmNvdXJzZUJsb2Nrcy51cGRhdGUoYmxvY2ssIHtcclxuICAgICAgICAgIHRhZ3M6IGNvbXB1dGVUYWdzRnJvbVNjaG9vbFllYXJzKGJsb2NrLnRhZ3MsIFtldi50YXJnZXQudmFsdWVdLmZpbHRlcih4PT4hIXgpKVxyXG4gICAgICAgIH0pfVxyXG4gICAgICA+XHJcbiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIlwiPntMYFbDpGxqIMOlcnNrdXJzZXJgfTwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCIxLTNcIj57TGDDhXJza3VycyAxLTNgfTwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCI0LTZcIj57TGDDhXJza3VycyA0LTZgfTwvb3B0aW9uPlxyXG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCI3LTlcIj57TGDDhXJza3VycyA3LTlgfTwvb3B0aW9uPlxyXG4gICAgICA8L3NlbGVjdD5cclxuICAgIDwvZm9ybT5cclxuICAgIDxici8+XHJcbiAgICB7Z2V0U2Nob29sWWVhcnMoYmxvY2sudGFncykubGVuZ3RoID4gMCA/XHJcbiAgICAgIDxDb3Vyc2VCbG9ja1JlcXVpcmVtZW50c1xyXG4gICAgICAgIGJsb2NrPXtibG9ja31cclxuICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cclxuICAgICAgICByZXBvPXtyZXBvfVxyXG4gICAgICAvPiA6XHJcbiAgICAgIHVuZGVmaW5lZFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB7aXNMYXN0QmxvY2sgPyA8UmVtb3ZlSXRlbVxyXG4gICAgICAgICAgdGl0bGU9XCJUYSBib3J0IGJsb2NrZXRcIlxyXG4gICAgICAgICAgc3R5bGU9e3sgZGlzcGxheTogJ2lubGluZS1ibG9jaycsIHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHRvcDogMCwgcmlnaHQ6IDAgfX1cclxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNvbmZpcm0oTGBUYSBib3J0IGJsb2NrZXQ/YCkgJiZcclxuICAgICAgICAgICAgcmVwby5jb3Vyc2VJbnN0YW5jZXMucmVtb3ZlUmVsYXRlZChjb3Vyc2UuaWQsIFwiYmxvY2tzXCIsIGJsb2NrKX0gLz5cclxuICAgICAgICAgIDogbnVsbH1cclxuXHJcbiAgPC9kaXY+XHJcbiAgPGhyLz5cclxuPC8+XHJcblxyXG5mdW5jdGlvbiBhZGRDb3Vyc2VCbG9jayhyZXBvOiBLZWRCYWNrZW5kUmVwbywgY291cnNlOiBXaXRoR3JhcGhzPFN0ZXBDb3Vyc2VJbnN0YW5jZSwgXCJibG9ja3NcIj4pIHtcclxuICBjb25zdCBsYXN0QmxvY2sgPSBjb3Vyc2UuYmxvY2tzLnNvcnQoY29tcGFyZVByb3AoXCJibG9ja05vXCIpKS5zbGljZSgpLnBvcCgpO1xyXG4gIGNvbnN0IGJsb2NrTm8gPSBsYXN0QmxvY2sgPyBsYXN0QmxvY2suYmxvY2tObyArIDEgOiAxO1xyXG4gIGNvbnN0IGZpcnN0U3RlcE5vID0gbGFzdEJsb2NrID9cclxuICAgIGxhc3RCbG9jay5zdGVwTnVtYmVyc1tsYXN0QmxvY2suc3RlcE51bWJlcnMubGVuZ3RoIC0gMV0gKyAxIDpcclxuICAgIDE7XHJcbiAgY29uc3QgbmV3QmxvY2s6IENvdXJzZUJsb2NrID0ge1xyXG4gICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgIGFjbDogW1xyXG4gICAgICAnc2Nob29sUm9sZTpzdGFuZGFyZC9FTVBMT1lFRTpTJyxcclxuICAgICAgJ3JvbGU6VVNFUjpSJ1xyXG4gICAgXSxcclxuICAgIGJsb2NrTm8sXHJcbiAgICBsb2NrZWQ6IHRydWUsXHJcbiAgICBuYW1lOiBgQmxvY2sgJHtibG9ja05vfWAsXHJcbiAgICB0YWdzOiBbY291cnNlLmlkLCAuLi5jb3Vyc2UudGFncy5maWx0ZXIodGFnID0+IHRhZy5zdGFydHNXaXRoKFwiY291cnNlOlwiKSB8fCB0YWcuc3RhcnRzV2l0aChcInN1YjpcIikpXSxcclxuICAgIHN0ZXBOdW1iZXJzOiBbZmlyc3RTdGVwTm8sIGZpcnN0U3RlcE5vICsgMSwgZmlyc3RTdGVwTm8gKyAyLCBmaXJzdFN0ZXBObyArIDMsIGZpcnN0U3RlcE5vICsgNF1cclxuICB9O1xyXG4gIHJlcG8uY291cnNlSW5zdGFuY2VzLmFkZFJlbGF0ZWQoY291cnNlLmlkLCBcImJsb2Nrc1wiLCBuZXdCbG9jayk7XHJcbiAgbmV3QmxvY2suc3RlcE51bWJlcnMuZm9yRWFjaChzdGVwTm8gPT4ge1xyXG4gICAgY29uc3QgaW50cm9kdWN0aW9uVGFiOiBTdGVwQ291cnNlVGFiID0ge1xyXG4gICAgICBpZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICB0eXBlOiAnc3RlcC1jb3Vyc2UtdGFiJyxcclxuICAgICAgdGFiQ2xhc3M6ICdpbnRyby10YWInLFxyXG4gICAgICB0YWJUaXRsZTogTGBJbnRyb2R1a3Rpb25gLCAvLyBEZXByZWNhdGVkLiBVc2UgbmFtZSBpbnN0ZWFkLlxyXG4gICAgICBuYW1lOiBMYEludHJvZHVrdGlvbmAsXHJcbiAgICAgIGxvY2tlZDogdHJ1ZSxcclxuICAgICAgYWNsOiBbXHJcbiAgICAgICAgJ3NjaG9vbFJvbGU6c3RhbmRhcmQvRU1QTE9ZRUU6UycsXHJcbiAgICAgICAgJ3JvbGU6VVNFUjpSJ1xyXG4gICAgICBdLFxyXG4gICAgICBzdGVwTm8sXHJcbiAgICAgIG9yZGVyOiAwLFxyXG4gICAgICB0YWdzOiBbY291cnNlLmlkLCAuLi5jb3Vyc2UudGFncy5maWx0ZXIodGFnID0+IHRhZy5zdGFydHNXaXRoKFwiY291cnNlOlwiKSB8fCB0YWcuc3RhcnRzV2l0aChcInN1YjpcIikpXVxyXG4gICAgfTtcclxuICAgIHJlcG8uY291cnNlQmxvY2tzLmFkZFJlbGF0ZWQobmV3QmxvY2suaWQsIFwidGFic1wiLCBpbnRyb2R1Y3Rpb25UYWIpO1xyXG4gIH0pO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCwgRG9jdW1lbnRBY2Nlc3MgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IGRiLCBnbG9iYWxJZCwgQ291cnNlSW5zdGFuY2VzLCBTY2hvb2xzIH0gZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFscy9kYic7XHJcbmltcG9ydCB7IENvdXJzZUluc3RhbmNlLCBUaGVtZUNvdXJzZUluc3RhbmNlLCBTdGVwQ291cnNlSW5zdGFuY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFRleHRJbnB1dCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHQtaW5wdXQnO1xyXG5pbXBvcnQgeyBUZXh0QXJlYUZvcm1GaWVsZCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHRhcmVhJztcclxuaW1wb3J0IHsgRm9ybUZpZWxkIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQnO1xyXG5pbXBvcnQgeyBMLCBzaG93RXJyb3IsIGRpc3RpbmN0LCBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBMaW5rLCB3aXRoUm91dGVyLCBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IGxpdmVRdWVyeVZpZXcgfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGl2ZS1xdWVyeS12aWV3JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8sIFdpdGhHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBwdWJsaXNoQ291cnNlIH0gZnJvbSAnLi4vLi4vbG9naWMvcHVibGlzaC1jb3Vyc2UnO1xyXG5pbXBvcnQgeyBNdWx0aXNlbGVjdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9tdWx0aXNlbGVjdCc7XHJcbmltcG9ydCB7IENoZWNrbGlzdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9jaGVja2xpc3QnO1xyXG5pbXBvcnQgeyBnZXRTdWJqZWN0Q29kZXMsIGNvbXB1dGVUYWdzRnJvbVN1YmplY3RDb2RlcywgZ2V0U2Nob29sWWVhcnMsIGNvbXB1dGVUYWdzRnJvbVNjaG9vbFllYXJzIH0gZnJvbSAnLi4vLi4vbG9naWMvY291cnNlLWluc3RhbmNlLXRhZ3MnO1xyXG5pbXBvcnQgeyBFZGl0U3RhbmRhcmRDb3Vyc2VCbG9ja3MgfSBmcm9tICcuL2VkaXQtc3RhbmRhcmQtY291cnNlLWJsb2Nrcyc7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IHsgcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkgfSBmcm9tICcuLi8uLi8uLi8uLi9hY2Nlc3MtY29udHJvbCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBSb3V0ZUNvbXBvbmVudFByb3BzPGFueT4ge1xyXG4gIGNvdXJzZUlkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBFZGl0U3RhbmRhcmRDb3Vyc2UgPSB3aXRoUm91dGVyKGxpdmVRdWVyeVZpZXcoKHtjb3Vyc2VJZCwgaGlzdG9yeX06IFByb3BzKSA9PlxyXG4gIENvdXJzZUluc3RhbmNlcy5nZXRPckNyZWF0ZUJyYW5jaElkKFNjaG9vbHMuc3RhbmRhcmRTY2hvb2wsIGNvdXJzZUlkKVxyXG4gIC5tYXAoYnJhbmNoSWQgPT5kYi5icmFuY2goYnJhbmNoSWQpKVxyXG4gIC5zd2l0Y2hNYXAoYnJhbmNoID0+XHJcbiAgICBicmFuY2guY291cnNlSW5zdGFuY2VzLmluY2x1ZGUoXCJibG9ja3NcIikuaWQoY291cnNlSWQpLm1hcChjb3Vyc2UgPT4gPD5cclxuICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgIGF1dG9Gb2N1c1xyXG4gICAgICAgIGxhYmVsPVwiTmFtblwiXHJcbiAgICAgICAgaWQ9XCJDb3Vyc2VJbnN0YW5jZTpuYW1lXCJcclxuICAgICAgICBwbGFjZWhvbGRlcj1cIlwiXHJcbiAgICAgICAgdmFsdWU9e2NvdXJzZS5uYW1lfVxyXG4gICAgICAgIG9uQ2hhbmdlPXtuYW1lID0+IGJyYW5jaC5jb3Vyc2VJbnN0YW5jZXMudXBkYXRlKGNvdXJzZSwge25hbWV9KX1cclxuICAgICAgLz5cclxuICAgICAgPFRleHRBcmVhRm9ybUZpZWxkXHJcbiAgICAgICAgbGFiZWw9XCJCZXNrcml2bmluZ1wiXHJcbiAgICAgICAgaWQ9XCJDb3Vyc2VJbnN0YW5jZTpkZXNjcmlwdGlvblwiXHJcbiAgICAgICAgcm93cz17N31cclxuICAgICAgICBwbGFjZWhvbGRlcj1cIlwiXHJcbiAgICAgICAgdmFsdWU9e2NvdXJzZS5kZXNjcmlwdGlvbn1cclxuICAgICAgICBvbkNoYW5nZT17ZGVzY3JpcHRpb24gPT4ge1xyXG4gICAgICAgICAgYnJhbmNoLmNvdXJzZUluc3RhbmNlcy51cGRhdGUoY291cnNlLCB7ZGVzY3JpcHRpb259KTtcclxuICAgICAgICB9fVxyXG4gICAgICAgICAgLz5cclxuICAgICAgPEZvcm1GaWVsZCBsYWJlbD1cIlR5cFwiIGlkPVwiQ291cnNlSW5zdGFuY2U6dHlwZVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgPGlucHV0IGRpc2FibGVkIHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJjb3Vyc2UtdHlwZVwiIGNoZWNrZWQ9e2NvdXJzZS50eXBlID09PSAnc3RlcC1jb3Vyc2UnfSBpZD1cIkNvdXJzZUluc3RhbmNlOnR5cGVcIiBvbkNoYW5nZT17XHJcbiAgICAgICAgICAgICAgZXYgPT4gZXYudGFyZ2V0LmNoZWNrZWQgJiYgYnJhbmNoLmNvdXJzZUluc3RhbmNlcy51cGRhdGUoY291cnNlLCB7dHlwZTogJ3N0ZXAtY291cnNlJ30pfSAvPiBTdGVna3Vyc1xyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCBkaXNhYmxlZCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiY291cnNlLXR5cGVcIiBjaGVja2VkPXtjb3Vyc2UudHlwZSA9PT0gJ3RoZW1lLWNvdXJzZSd9IGlkPVwiQ291cnNlSW5zdGFuY2U6dHlwZVwiIG9uQ2hhbmdlPXtcclxuICAgICAgICAgICAgICBldiA9PiBldi50YXJnZXQuY2hlY2tlZCAmJiBicmFuY2guY291cnNlSW5zdGFuY2VzLnVwZGF0ZShjb3Vyc2UsIHt0eXBlOiAndGhlbWUtY291cnNlJ30pfSAvPiBUZW1ha3Vyc1xyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvRm9ybUZpZWxkPlxyXG5cclxuICAgICAge2NvdXJzZS50eXBlID09PSAnc3RlcC1jb3Vyc2UnID8gPD5cclxuICAgICAgPGJyLz5cclxuICAgICAgPEZvcm1GaWVsZCBsYWJlbD17TGDDhG1uZWB9IGlkPVwiQ291cnNlSW5zdGFuY2U6c3ViamVjdFwiPlxyXG4gICAgICAgIDxwIGlkPVwiQ291cnNlSW5zdGFuY2U6c3ViamVjdFwiPnsoY291cnNlIGFzIFN0ZXBDb3Vyc2VJbnN0YW5jZSkuc3ViamVjdC5zdWJqZWN0TmFtZX08L3A+XHJcbiAgICAgIDwvRm9ybUZpZWxkPlxyXG4gICAgICA8Lz4gOiBudWxsfVxyXG5cclxuICAgICAgPGJyLz5cclxuICAgICAgICA8Zm9ybT5cclxuICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJrY2xhYmVsXCI+e0xgw4RuZHJpbmdzcG9saWN5YH08L2xhYmVsPlxyXG4gICAgICAgICAgPENoZWNrbGlzdFxyXG4gICAgICAgICAgICBhdmFpbGFibGU9e1tcclxuICAgICAgICAgICAgICB7bmFtZTogTGBUaWxsw6V0IHNrb2xvciBza2FwYSBlZ25hIGZsaWthcmAsIGtleTogXCJhbGxvd0FkZFRhYnNcIn0sXHJcbiAgICAgICAgICAgICAge25hbWU6IExgVGlsbMOldCBza29sb3IgZMO2bGphIHN0YW5kYXJkZmxpa2FyYCwga2V5OiBcImFsbG93UmVtb3ZlVGFic1wifSxcclxuICAgICAgICAgICAgICB7bmFtZTogTGBUaWxsw6V0IHNrb2xvciDDpG5kcmEgb3JkbmluZ2VuIG1lbGxhbiBzdGFuZGFyZGZsaWthcmAsIGtleTogXCJhbGxvd1Jlb3JkZXJUYWJzXCJ9LFxyXG4gICAgICAgICAgICBdfVxyXG4gICAgICAgICAgICBzZWxlY3RlZD17W1xyXG4gICAgICAgICAgICAgIGNvdXJzZS5hbGxvd0FkZFRhYnMgJiYgXCJhbGxvd0FkZFRhYnNcIixcclxuICAgICAgICAgICAgICBjb3Vyc2UuYWxsb3dSZW1vdmVUYWJzICYmIFwiYWxsb3dSZW1vdmVUYWJzXCIsXHJcbiAgICAgICAgICAgICAgY291cnNlLmFsbG93UmVvcmRlclRhYnMgJiYgXCJhbGxvd1Jlb3JkZXJUYWJzXCJdLmZpbHRlcih4ID0+ICEheCl9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtzZWxlY3RlZFBvbGljeSA9PiBicmFuY2guY291cnNlSW5zdGFuY2VzLnVwZGF0ZShjb3Vyc2UsIHtcclxuICAgICAgICAgICAgICBhbGxvd0FkZFRhYnM6IHNlbGVjdGVkUG9saWN5LmluY2x1ZGVzKFwiYWxsb3dBZGRUYWJzXCIpLFxyXG4gICAgICAgICAgICAgIGFsbG93UmVtb3ZlVGFiczogc2VsZWN0ZWRQb2xpY3kuaW5jbHVkZXMoXCJhbGxvd1JlbW92ZVRhYnNcIiksXHJcbiAgICAgICAgICAgICAgYWxsb3dSZW9yZGVyVGFiczogc2VsZWN0ZWRQb2xpY3kuaW5jbHVkZXMoXCJhbGxvd1Jlb3JkZXJUYWJzXCIpLFxyXG4gICAgICAgICAgICB9KX0gLz5cclxuICAgICAgICA8L2Zvcm0+XHJcblxyXG4gICAgICB7Y291cnNlLnR5cGUgPT09ICdzdGVwLWNvdXJzZScgPyA8PlxyXG4gICAgICAgIHtnZXRTdWJqZWN0Q29kZXMoY291cnNlLnRhZ3MpLmxlbmd0aCA+IDAgPyA8RWRpdFN0YW5kYXJkQ291cnNlQmxvY2tzXHJcbiAgICAgICAgICByZXBvPXticmFuY2h9XHJcbiAgICAgICAgICBjb3Vyc2U9e2NvdXJzZSBhcyBXaXRoR3JhcGhzPFN0ZXBDb3Vyc2VJbnN0YW5jZSwgXCJibG9ja3NcIj59Lz4gOiB1bmRlZmluZWR9XHJcbiAgICAgICAgPC8+IDogdW5kZWZpbmVkXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHtjb3Vyc2UudHlwZSA9PT0gJ3RoZW1lLWNvdXJzZScgPyA8PlxyXG4gICAgICAgIDxici8+XHJcbiAgICAgICAgPGZvcm0+XHJcbiAgICAgICAgICA8bGFiZWwgY2xhc3NOYW1lPVwia2NsYWJlbFwiPntMYEtvcHBsYWRlIMOkbW5lbmB9PC9sYWJlbD5cclxuICAgICAgICAgIDxNdWx0aXNlbGVjdFxyXG4gICAgICAgICAgICBzZWxlY3RlZD17KChjb3Vyc2UgYXMgVGhlbWVDb3Vyc2VJbnN0YW5jZSkuc3ViamVjdHMgfHwgW10pLm1hcCgoe25hbWUsIGNvZGV9KSA9PiAoe25hbWUsIGtleTogY29kZX0pKX1cclxuICAgICAgICAgICAgZ2V0T3B0aW9ucz17KCk9PmRiLnN1YmplY3RzLnRhZ3MoJ3NjaG9vbFR5cGU6cHJpbWFyeScpLm1hcChzID0+ICh7bmFtZTogcy5uYW1lLCBrZXk6IHMuY29kZX0pKS50b1ZhbHVlKCkubG9hZCgpfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17c2VsZWN0ZWRPcHRpb25zID0+IGJyYW5jaC5jb3Vyc2VJbnN0YW5jZXMudXBkYXRlPFRoZW1lQ291cnNlSW5zdGFuY2U+KGNvdXJzZSwge1xyXG4gICAgICAgICAgICAgIHRhZ3M6IGNvbXB1dGVUYWdzRnJvbVN1YmplY3RDb2RlcyAoY291cnNlLnRhZ3MsIHNlbGVjdGVkT3B0aW9ucy5tYXAobyA9PiBvLmtleSkpLFxyXG4gICAgICAgICAgICAgIHN1YmplY3RzOiBzZWxlY3RlZE9wdGlvbnMubWFwKG9wdGlvbiA9PiAoe25hbWU6IG9wdGlvbi5uYW1lLCBjb2RlOiBvcHRpb24ua2V5fSkpXHJcbiAgICAgICAgICAgIH0pfSAvPlxyXG4gICAgICAgIDwvZm9ybT5cclxuICAgICAgICA8YnIvPlxyXG4gICAgICAgIDxmb3JtPlxyXG4gICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImtjbGFiZWxcIj57TGDDhXJza3Vyc2VyIHNvbSBza2EgaW5nw6VgfTwvbGFiZWw+XHJcbiAgICAgICAgICA8Q2hlY2tsaXN0XHJcbiAgICAgICAgICAgIGF2YWlsYWJsZT17W1xyXG4gICAgICAgICAgICAgIHtuYW1lOiBMYMOFcnNrdXJzIDEtM2AsIGtleTogXCIxLTNcIn0sXHJcbiAgICAgICAgICAgICAge25hbWU6IExgw4Vyc2t1cnMgNC02YCwga2V5OiBcIjQtNlwifSxcclxuICAgICAgICAgICAgICB7bmFtZTogTGDDhXJza3VycyA3LTlgLCBrZXk6IFwiNy05XCJ9XHJcbiAgICAgICAgICAgIF19XHJcbiAgICAgICAgICAgIHNlbGVjdGVkPXtnZXRTY2hvb2xZZWFycyhjb3Vyc2UudGFncyl9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtzZWxlY3RlZFNjaG9vbFllYXJzID0+IGJyYW5jaC5jb3Vyc2VJbnN0YW5jZXMudXBkYXRlKGNvdXJzZSwge1xyXG4gICAgICAgICAgICAgIHRhZ3M6IGNvbXB1dGVUYWdzRnJvbVNjaG9vbFllYXJzKGNvdXJzZS50YWdzLCBzZWxlY3RlZFNjaG9vbFllYXJzKVxyXG4gICAgICAgICAgICB9KX0gLz5cclxuICAgICAgICA8L2Zvcm0+XHJcbiAgICAgIDwvPiA6IHVuZGVmaW5lZH1cclxuXHJcbiAgICAgIDxici8+XHJcblxyXG4gICAgICB7Y291cnNlLnRhZ3MuaW5jbHVkZXMoJ2FjdGl2ZScpID9cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9e1xyXG4gICAgICAgICAgKCk9PmJyYW5jaC5jb3Vyc2VJbnN0YW5jZXMudXBkYXRlKGNvdXJzZSwge3RhZ3M6IHskcmVtb3ZlOiBbXCJhY3RpdmVcIl19fSlcclxuICAgICAgICB9PlxyXG4gICAgICAgICAgSW5ha3RpdmVyYVxyXG4gICAgICAgIDwvZGl2PiA6XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiBvbkNsaWNrPXtcclxuICAgICAgICAgICgpPT5icmFuY2guY291cnNlSW5zdGFuY2VzLnVwZGF0ZShjb3Vyc2UsIHt0YWdzOiB7JGFkZDogW1wiYWN0aXZlXCJdfX0pXHJcbiAgICAgICAgfT5cclxuICAgICAgICAgIEFrdGl2ZXJhXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIH1cclxuICAgICAgPExpbmsgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgdG89e2AvYWRtaW4vY291cnNlcy8ke2NvdXJzZUlkfS9jb25maXJtLWRlbGV0ZWB9PlxyXG4gICAgICAgIHtMYFJhZGVyYSAuLi5gfTwvTGluaz5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi13YXJuaW5nXCIgb25DbGljaz17YXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHB1Ymxpc2hDb3Vyc2Uoe3NjaG9vbDogXCJzdGFuZGFyZFwiLCBkcmFmdFJlcG86IGJyYW5jaCwgY291cnNlOiBjb3Vyc2UgYXMgQ291cnNlSW5zdGFuY2V9KTtcclxuICAgICAgICBhd2FpdCBkYi5zYXZlTm93KCk7XHJcbiAgICAgICAgbG9jYXRpb24uaHJlZiA9IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IChgJHtjZmcuS0VEX1NVQkpFQ1RfUExBTk5FUl9VUkx9Iy9zdGFuZGFyZC9jb3Vyc2VzLyR7Y291cnNlSWR9YCwge30pO1xyXG4gICAgICB9fT5cclxuICAgICAgICBQdWJsaWNlcmFcclxuICAgICAgPC9kaXY+XHJcbiAgICA8Lz5cclxuKSkpKTtcclxuXHJcblxyXG4vKmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUNvdXJzZShjb3Vyc2U6IENvdXJzZUluc3RhbmNlKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEdldCBjb3Vyc2UncyBkcmFmdHMgb24gYWxsIHNjaG9vbHNcclxuICAgIC8vIEdldCBpZHMgb2YgYWxsIHJlbGF0ZWQgZW50aXRpZXMgKHNlYXJjaCBieSBlbnRpdGllcyB0YWdzIHdpdGggY291cnNlIGlkKVxyXG4gICAgY29uc3QgW1xyXG4gICAgICBkcmFmdEJyYW5jaElkcyxcclxuICAgICAgY291cnNlQmxvY2tJZHMsXHJcbiAgICAgIGNvdXJzZUNvbnRlbnRJZHMsXHJcbiAgICAgIGNvdXJlc1RhYnNJZHMsXHJcbiAgICAgIHRhc2tzSWRzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICBkYi5icmFuY2hlcy50YWdzKGNvdXJzZS5pZCkubG9hZCgpLFxyXG4gICAgICAgIGRiLmNvdXJzZUJsb2Nrcy50YWdzKGNvdXJzZS5pZCkubG9hZCgpLFxyXG4gICAgICAgIGRiLmNvdXJzZUNvbnRlbnRzLnRhZ3MoY291cnNlLmlkKS5sb2FkKCksXHJcbiAgICAgICAgZGIuY291cnNlVGFicy50YWdzKGNvdXJzZS5pZCkubG9hZCgpLFxyXG4gICAgICAgIGRiLnRhc2tzLnRhZ3MoY291cnNlLmlkKS5sb2FkKClcclxuICAgICAgXSk7XHJcblxyXG4gICAgLy8gRGVsZXRlIGFsbCBkcmFmdCBpZHMuXHJcbiAgICBkYi5icmFuY2hlcy5kZWxldGUoLi4uZHJhZnRCcmFuY2hJZHMpO1xyXG4gICAgLy8gRGVsZXRlIGFsbCBkZXNjZW5kYW50IGlkczpcclxuICAgIGRiLmNvdXJzZUJsb2Nrcy5kZWxldGUoLi4uY291cnNlQmxvY2tJZHMpO1xyXG4gICAgZGIuY291cnNlQ29udGVudHMuZGVsZXRlKC4uLmNvdXJzZUNvbnRlbnRJZHMpO1xyXG4gICAgZGIuY291cnNlVGFicy5kZWxldGUoLi4uY291cmVzVGFic0lkcyk7XHJcbiAgICBkYi50YXNrcy5kZWxldGUoLi4udGFza3NJZHMpO1xyXG5cclxuICAgIC8vIERlbGV0ZSB0aGUgY291cnNlIGl0c2VsZlxyXG4gICAgZGIuY291cnNlSW5zdGFuY2VzLmRlbGV0ZShjb3Vyc2UuaWQpO1xyXG5cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgc2hvd0Vycm9yKGVycm9yKTtcclxuICB9XHJcbn0qL1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGxpdmVRdWVyeVZpZXcgfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGl2ZS1xdWVyeS12aWV3JztcclxuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgd2l0aFJvdXRlciwgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcbmltcG9ydCB7IENvdXJzZUluc3RhbmNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICcuLi8uLi8uLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zcGlubmVyJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBSb3V0ZUNvbXBvbmVudFByb3BzPGFueT57XHJcbiAgY291cnNlSWQ6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERlbGV0ZVN0YW5kYXJkQ291cnNlID0gd2l0aFJvdXRlcihsaXZlUXVlcnlWaWV3KCh7Y291cnNlSWQsIGhpc3Rvcnl9OiBQcm9wcykgPT5cclxuICBkYi5jb3Vyc2VJbnN0YW5jZXMuaWRzKFtjb3Vyc2VJZF0pLnRvVmFsdWUoKVxyXG4gICAgLmNvbWJpbmVMYXRlc3QoZGIuYnJhbmNoZXMudGFncyhjb3Vyc2VJZCkuaWRzT25seSgpLm1hcCgoe2lkfSk9PmlkKSlcclxuICAgIC5jb21iaW5lTGF0ZXN0KGRiLmNvdXJzZUJsb2Nrcy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkubWFwKCh7aWR9KT0+aWQpKVxyXG4gICAgLmNvbWJpbmVMYXRlc3QoZGIuY291cnNlQ29udGVudHMudGFncyhjb3Vyc2VJZCkuaWRzT25seSgpLm1hcCgoe2lkfSk9PmlkKSlcclxuICAgIC5jb21iaW5lTGF0ZXN0KGRiLmNvdXJzZVRhYnMudGFncyhjb3Vyc2VJZCkuaWRzT25seSgpLm1hcCgoe2lkfSk9PmlkKSlcclxuICAgIC5jb21iaW5lTGF0ZXN0KGRiLnRhc2tzLnRhZ3MoY291cnNlSWQpLmlkc09ubHkoKS5tYXAoKHtpZH0pPT5pZCkpXHJcbiAgICAubWFwKChbYSwgYl0pID0+ICh7XHJcbiAgICAgIGNvdXJzZXM6IGFbMF1bMF1bMF1bMF0sXHJcbiAgICAgIGJyYW5jaElkczogYVswXVswXVswXVsxXSxcclxuICAgICAgY291cnNlQmxvY2tJZHM6IGFbMF1bMF1bMV0sXHJcbiAgICAgIGNvdXJzZUNvbnRlbnRJZHM6IGFbMF1bMV0sXHJcbiAgICAgIGNvdXJzZVRhYklkczogYVsxXSxcclxuICAgICAgdGFza0lkczogYn0pKVxyXG4gICAgLm1hcCgoe2NvdXJzZXMsIGJyYW5jaElkcywgY291cnNlQmxvY2tJZHMsIGNvdXJzZUNvbnRlbnRJZHMsIGNvdXJzZVRhYklkcywgdGFza0lkc30pID0+IHtcclxuICAgICAgaWYgKGNvdXJzZXMubGVuZ3RoID09PSAwKSByZXR1cm4gPGRpdj5cclxuICAgICAgICA8cD5LdXJzZW4gw6RyIG51IGJvcnR0YWdlbjwvcD5cclxuICAgICAgICA8TGluayBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlXCIgdG89XCIvYWRtaW5cIj5cclxuICAgICAgICAgIFRpbGwgYWRtaW52ZXJrdHlnZXRzIHN0YXJ0c2lkYVxyXG4gICAgICAgIDwvTGluaz5cclxuICAgICAgPC9kaXY+O1xyXG4gICAgICBjb25zdCBjb3Vyc2UgPSBjb3Vyc2VzWzBdO1xyXG4gICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e1tgZW50aXR5bWV0YS0ke2NvdXJzZS4kbWV0YX1gXS5qb2luKCcgJyl9PlxyXG4gICAgICAgIDxoMj5CZWtyw6RmdGEgYm9ydHRhZ25pbmcgYXYgc3RhbmRhcmRrdXJzZW4ge2NvdXJzZS5uYW1lfSA8L2gyPlxyXG4gICAgICAgIDxwPkbDtmxqYW5kZSByZWxhdGVyYWRlIG9iamVrdCBrb21tZXIgb2Nrc8OlIGF0dCB0YXMgYm9ydDwvcD5cclxuICAgICAgICA8cD5UZW1wb3LDpHJhIHV0a2FzdDoge2JyYW5jaElkcy5sZW5ndGh9IHN0PC9wPlxyXG4gICAgICAgIDxwPkt1cnNibG9jazoge2NvdXJzZUJsb2NrSWRzLmxlbmd0aH0gc3Q8L3A+XHJcbiAgICAgICAgPHA+SW5uZWjDpWxsc3J1dG9yICh0b3RhbHQgaW5rbHVzaXZlIHNrb2xvcnMgZWduYSB2YXJpYW50ZXIpOiB7Y291cnNlQ29udGVudElkcy5sZW5ndGh9IHN0PC9wPlxyXG4gICAgICAgIDxwPkZsaWthciAodG90YWx0IGlua2x1c2l2ZSBza29sb3JzIGVnbmEgdmFyaWFudGVyKToge2NvdXJzZVRhYklkcy5sZW5ndGh9IHN0PC9wPlxyXG4gICAgICAgIDxwPlVwcGdpZnRlciAodG90YWx0IGlua2x1c2l2ZSBza29sb3JzIGVnbmEgdmFyaWFudGVyKToge3Rhc2tJZHMubGVuZ3RofSBzdDwvcD5cclxuXHJcbiAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZVwiIG9uQ2xpY2s9eygpPT5oaXN0b3J5LmdvKC0xKX0+XHJcbiAgICAgICAgICBBdmJyeXRcclxuICAgICAgICA8L2E+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiBvbkNsaWNrPXsoKT0+e1xyXG4gICAgICAgICAgLy8gRGVsZXRlIGFsbCBkcmFmdCBpZHMuXHJcbiAgICAgICAgICBkYi5icmFuY2hlcy5kZWxldGUoLi4uYnJhbmNoSWRzKTtcclxuICAgICAgICAgIC8vIERlbGV0ZSBhbGwgZGVzY2VuZGFudCBpZHM6XHJcbiAgICAgICAgICBkYi5jb3Vyc2VCbG9ja3MuZGVsZXRlKC4uLmNvdXJzZUJsb2NrSWRzKTtcclxuICAgICAgICAgIGRiLmNvdXJzZUNvbnRlbnRzLmRlbGV0ZSguLi5jb3Vyc2VDb250ZW50SWRzKTtcclxuICAgICAgICAgIGRiLmNvdXJzZVRhYnMuZGVsZXRlKC4uLmNvdXJzZVRhYklkcyk7XHJcbiAgICAgICAgICBkYi50YXNrcy5kZWxldGUoLi4udGFza0lkcyk7XHJcbiAgICAgICAgICAvLyBEZWxldGUgdGhlIGNvdXJzZSBpdHNlbGZcclxuICAgICAgICAgIGRiLmNvdXJzZUluc3RhbmNlcy5kZWxldGUoY291cnNlLmlkKTtcclxuICAgICAgICB9fVxyXG4gICAgICAgID5CZWtyw6RmdGEgYm9ydHRhZ25pbmcgYXYga3VyczwvZGl2PlxyXG5cclxuICAgICAgPC9kaXY+XHJcbiAgICB9KVxyXG4gICx7XHJcbiAgICBzcGlubmVyOiA8cD5Iw6RtdGFyIHJlbGF0ZXJhZGUgb2JqZWt0Li4uIDxTcGlubmVyIC8+PC9wPlxyXG4gIH1cclxuKSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ3JlYXRlU3RhbmRhcmRDb3Vyc2UgfSBmcm9tICcuL2NvdXJzZXMvY3JlYXRlLXN0YW5kYXJkLWNvdXJzZSc7XHJcbmltcG9ydCB7IFR3b0NvbHVtbnNQYWdlIH0gZnJvbSAnLi4vY29tbW9uL3R3by1jb2x1bW5zLXBhZ2UnO1xyXG5pbXBvcnQgeyBTdGFuZGFyZENvdXJzZUluc3RhbmNlTGlzdCB9IGZyb20gJy4uL2NvbW1vbi9zdGFuZGFyZC1jb3Vyc2UtaW5zdGFuY2UtbGlzdCc7XHJcbmltcG9ydCB7IFJlZGlyZWN0LCBSb3V0ZVByb3BzLCBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgeyBFZGl0U3RhbmRhcmRDb3Vyc2UgfSBmcm9tICcuL2NvdXJzZXMvZWRpdC1zdGFuZGFyZC1jb3Vyc2UnO1xyXG5pbXBvcnQgeyBEZWxldGVTdGFuZGFyZENvdXJzZSB9IGZyb20gJy4vY291cnNlcy9kZWxldGUtc3RhbmRhcmQtY291cnNlJztcclxuaW1wb3J0IHsgU3ViamVjdHNJbm5lciB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3N1YmplY3RzLWlubmVyJztcclxuaW1wb3J0IHsgU2hvd1N1YmplY3RJbm5lciB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3Nob3ctc3ViamVjdC1pbm5lcic7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFNjaG9vbHNXaXRob3V0QmFubmVyIH0gZnJvbSAnLi4vLi4vY291cnNlLWJ1aWxkZXIvc2Nob29scyc7XHJcbmltcG9ydCB7IEVkaXRTY2hvb2xOb0Jhbm5lciB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3NjaG9vbHMvZWRpdC1zY2hvb2wnO1xyXG5pbXBvcnQgeyBpc1RlYWNoZXJBdFNjaG9vbCwgcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkgfSBmcm9tICcuLi8uLi8uLi9hY2Nlc3MtY29udHJvbCc7XHJcblxyXG5jb25zdCBSZWRpcmVjdEZyb21Sb290ID0gKCkgPT4ge1xyXG4gIGNvbnN0IHtyb2xlcywgc2Nob29sfSA9IGVudi5jdXJyZW50VXNlcjtcclxuICBpZiAocm9sZXMuaW5jbHVkZXMoXCJBRE1JTlwiKSB8fCBpc1RlYWNoZXJBdFNjaG9vbChlbnYuY3VycmVudFVzZXIsIFwic3RhbmRhcmRcIikpXHJcbiAgICByZXR1cm4gPFJlZGlyZWN0IHRvPVwiL2FkbWluXCIgLz47XHJcbiAgbG9jYXRpb24uaHJlZiA9IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IChjZmcuS0VEX1NVQkpFQ1RfUExBTk5FUl9VUkwsIHt9KTtcclxuICByZXR1cm4gPGRpdiAvPjtcclxuICAvKnJldHVybiByb2xlcy5pbmNsdWRlcyhcIkFETUlOXCIpID9cclxuICAgIDxSZWRpcmVjdCB0bz1cIi9hZG1pblwiIC8+IDogXHJcbiAgLy9yb2xlcy5pbmNsdWRlcyhcIkVNUExPWUVFXCIpID9cclxuICAvLzxSZWRpcmVjdCB0bz17YC8ke3NjaG9vbH0vY291cnNlcy9lZGl0YH0gLz4gOlxyXG4gICAgPFJlZGlyZWN0IHRvPXtgL2FkbWluL2NvdXJzZXNgfSAvPjsqL1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVEFCUyA9IHtcclxuICAkOiBbJy9hZG1pbicsIDw+U3RhcnQ8Lz5dLFxyXG4gIC8vY291cnNlczogWycvYWRtaW4vY291cnNlcycsIDw+S3Vyc2VyPC8+XSxcclxuICBzY2hvb2xzOiBbYC9zY2hvb2xzYCwgPD5Ta29sb3I8Lz5dLFxyXG4gIGltcG9ydDogWycvYWRtaW4vaW1wb3J0JywgPD5JbXBvcnQ8Lz5dLFxyXG59XHJcblxyXG5pbnRlcmZhY2UgUm91dGUge1xyXG4gIHBhdGg6IHN0cmluZztcclxuICBleGFjdD86IGJvb2xlYW47XHJcbiAgdGFiSWQ/OiBzdHJpbmc7XHJcbiAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgY29udGVudDogKHJvdXRlUHJvcHM6IFJvdXRlQ29tcG9uZW50UHJvcHM8YW55Pik9PlJlYWN0LlJlYWN0Tm9kZVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUk9VVEVTOiBSb3V0ZVtdID0gW1xyXG4gIHtcclxuICAgIHBhdGg6IFwiL1wiLFxyXG4gICAgZXhhY3Q6IHRydWUsXHJcbiAgICBjb250ZW50OiAoKT0+PFJlZGlyZWN0RnJvbVJvb3QgLz5cclxuICB9LFxyXG4gIHtcclxuICAgIHBhdGg6IFwiL2FkbWluXCIsXHJcbiAgICBleGFjdDogdHJ1ZSxcclxuICAgIHRhYklkOiBcIiRcIixcclxuICAgIHRpdGxlOiBcIsOEbW5lc3BsYW5lcmFyZW4gQWRtaW5cIixcclxuICAgIGNvbnRlbnQ6ICgpPT48UmVkaXJlY3QgdG89XCIvYWRtaW4vY291cnNlcy9jcmVhdGVcIiAvPlxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogXCIvYWRtaW4vY291cnNlcy9jcmVhdGVcIixcclxuICAgIGV4YWN0OiB0cnVlLFxyXG4gICAgdGFiSWQ6IFwiJFwiLFxyXG4gICAgdGl0bGU6IFwiU2thcGEgc3RhbmRhcmRrdXJzXCIsXHJcbiAgICBjb250ZW50OiAoKT0+XHJcbiAgICAgIDxUd29Db2x1bW5zUGFnZVxyXG4gICAgICAgIGxlZnQ9ezxDcmVhdGVTdGFuZGFyZENvdXJzZSAvPn1cclxuICAgICAgICByaWdodD17PFN0YW5kYXJkQ291cnNlSW5zdGFuY2VMaXN0IC8+fVxyXG4gICAgICAgIHJpZ2h0V2lkdGg9ezV9IC8+XHJcbiAgfSx7XHJcbiAgICBwYXRoOiBcIi9hZG1pbi9jb3Vyc2VzLzpjb3Vyc2VJZC9zZXR0aW5nc1wiLFxyXG4gICAgZXhhY3Q6IHRydWUsXHJcbiAgICB0YWJJZDogXCIkXCIsXHJcbiAgICB0aXRsZTogXCLDhG1uZXNwbGFuZXJhcmVuIEFkbWluXCIsXHJcbiAgICBjb250ZW50OiAoe21hdGNofSk9PjxUd29Db2x1bW5zUGFnZVxyXG4gICAgICBsZWZ0PXs8RWRpdFN0YW5kYXJkQ291cnNlIGNvdXJzZUlkPXttYXRjaC5wYXJhbXMuY291cnNlSWR9Lz59XHJcbiAgICAgIHJpZ2h0PXs8U3RhbmRhcmRDb3Vyc2VJbnN0YW5jZUxpc3QgLz59XHJcbiAgICAgIHJpZ2h0V2lkdGg9ezV9IC8+XHJcbiAgfSx7XHJcbiAgICBwYXRoOiBcIi9hZG1pbi9jb3Vyc2VzLzpjb3Vyc2VJZC9jb25maXJtLWRlbGV0ZVwiLFxyXG4gICAgZXhhY3Q6IHRydWUsXHJcbiAgICB0YWJJZDogXCIkXCIsXHJcbiAgICB0aXRsZTogXCJCZWtyw6RmdGEgcmFkZXJpbmcgYXYgc3RhbmRhcmRrdXJzXCIsXHJcbiAgICBjb250ZW50OiAoe21hdGNofSk9PjxUd29Db2x1bW5zUGFnZVxyXG4gICAgICBsZWZ0PXs8RGVsZXRlU3RhbmRhcmRDb3Vyc2UgY291cnNlSWQ9e21hdGNoLnBhcmFtcy5jb3Vyc2VJZH0gLz59XHJcbiAgICAgIHJpZ2h0PXs8U3RhbmRhcmRDb3Vyc2VJbnN0YW5jZUxpc3QgLz59XHJcbiAgICAgIHJpZ2h0V2lkdGg9ezV9IC8+XHJcbiAgfSx7XHJcbiAgICBwYXRoOiBcIi9hZG1pbi9pbXBvcnRcIixcclxuICAgIGV4YWN0OiB0cnVlLFxyXG4gICAgdGFiSWQ6ICdpbXBvcnQnLFxyXG4gICAgdGl0bGU6IFwiSW1wb3J0IGZyw6VuIFNrb2x2ZXJrZXRcIixcclxuICAgIGNvbnRlbnQ6ICgpPT48U3ViamVjdHNJbm5lciBsaW5rUHJlZml4PVwiL2FkbWluL2ltcG9ydC9cIiAvPlxyXG4gIH0se1xyXG4gICAgcGF0aDogXCIvYWRtaW4vaW1wb3J0LzpzdWJqZWN0SWRcIixcclxuICAgIGV4YWN0OiBmYWxzZSxcclxuICAgIHRhYklkOiBcImltcG9ydFwiLFxyXG4gICAgdGl0bGU6IFwiSW1wb3J0IGZyw6VuIHNrb2x2ZXJrZXRcIixcclxuICAgIGNvbnRlbnQ6ICh7bWF0Y2h9KT0+PFNob3dTdWJqZWN0SW5uZXIgaWQ9e21hdGNoLnBhcmFtcy5zdWJqZWN0SWR9IC8+XHJcbiAgfSx7XHJcbiAgICBwYXRoOiBcIi9zY2hvb2xzXCIsXHJcbiAgICBleGFjdDogdHJ1ZSxcclxuICAgIHRhYklkOiBcInNjaG9vbHNcIixcclxuICAgIHRpdGxlOiBMYFNrb2xvcmAsXHJcbiAgICBjb250ZW50OiAoKT0+PFNjaG9vbHNXaXRob3V0QmFubmVyIHZpZXdDb3Vyc2VVcmw9e2NmZy5LRURfU1VCSkVDVF9QTEFOTkVSX1VSTH0gLz5cclxuICB9LHtcclxuICAgIHBhdGg6IFwiL3NjaG9vbHMvOnNjaG9vbElkL2VkaXRcIixcclxuICAgIHRhYklkOiBcInNjaG9vbHNcIixcclxuICAgIHRpdGxlOiBcIlNrb2xvclwiLFxyXG4gICAgY29udGVudDogKHttYXRjaH0pPT48RWRpdFNjaG9vbE5vQmFubmVyIHRpdGxlPXtMYFJlZGlnZXJhIHNrb2xhYH0gaWQ9e21hdGNoLnBhcmFtcy5zY2hvb2xJZH0gLz5cclxuICB9LHtcclxuICAgIHBhdGg6IFwiL3NjaG9vbHMvbmV3L2d5bW5hc2l1bVwiLFxyXG4gICAgdGFiSWQ6IFwic2Nob29sc1wiLFxyXG4gICAgdGl0bGU6IFwiU2tvbG9yXCIsXHJcbiAgICBjb250ZW50OiAoe21hdGNofSk9PjxFZGl0U2Nob29sTm9CYW5uZXIgdGl0bGU9e0xgTMOkZ2cgdGlsbCBza29sYWB9IHR5cGU9XCJneW1uYXNpdW1cIiAvPlxyXG4gIH0se1xyXG4gICAgcGF0aDogXCIvc2Nob29scy9uZXcvcHJpbWFyeVwiLFxyXG4gICAgdGFiSWQ6IFwic2Nob29sc1wiLFxyXG4gICAgdGl0bGU6IFwiU2tvbG9yXCIsXHJcbiAgICBjb250ZW50OiAoe21hdGNofSk9PjxFZGl0U2Nob29sTm9CYW5uZXIgdGl0bGU9e0xgTMOkZ2cgdGlsbCBza29sYWB9IHR5cGU9XCJwcmltYXJ5XCIgLz5cclxuICB9XHJcbl07XHJcblxyXG5leHBvcnQgY29uc3QgVEFCU19BUlJBWSA9IE9iamVjdC5rZXlzKFRBQlMpLm1hcChrZXkgPT4gKHtcclxuICBrZXksXHJcbiAgbmFtZTogVEFCU1trZXldWzFdLFxyXG4gIGxpbms6IFRBQlNba2V5XVswXVxyXG59KSk7XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgRXJyb3JTdWNjZXNzRmVlZGJhY2sgfSBmcm9tICcuLi8uLi8uLi91dGlscy9lcnJvci1zdWNjZXNzLWZlZWRiYWNrJztcclxuaW1wb3J0IHsgVEFCUywgUk9VVEVTLCBUQUJTX0FSUkFZIH0gZnJvbSAnLi9yb3V0ZXMnO1xyXG5pbXBvcnQgeyBCYW5uZXIgfSBmcm9tICcuLi9jb21tb24vYmFubmVyJztcclxuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9sb2FkaW5nLWluZGljYXRvcic7XHJcblxyXG5leHBvcnQgY29uc3QgU3ViamVjdFBsYW5uZXJBZG1pbkFwcCA9ICgpPT5cclxuICA8Um91dGVyPlxyXG4gICAgPD5cclxuICAgICAge1JPVVRFUy5tYXAoKHtleGFjdCwgcGF0aCwgdGFiSWQsIHRpdGxlLCBjb250ZW50fSwgaW5kZXgpID0+XHJcbiAgICAgICAgPFJvdXRlXHJcbiAgICAgICAgICBrZXk9e2luZGV4fVxyXG4gICAgICAgICAgcGF0aD17cGF0aH1cclxuICAgICAgICAgIGV4YWN0PXtleGFjdH1cclxuICAgICAgY29tcG9uZW50PXtyb3V0ZVByb3BzID0+IDw+XHJcbiAgICAgICAgPEJhbm5lclxyXG4gICAgICAgICAgYWN0aXZlVGFiPXt0YWJJZCB8fCBcIiRcIn0gdGFicz17VEFCU19BUlJBWX0gdGl0bGU9e3RpdGxlIHx8IFwiXCJ9XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U9XCJodHRwczovL2tzLmt1bnNrYXBzcG9ydGVuLnNlL2ltYWdlcy8xOC42MzIzYmM0ZDE1ZjQ4MzFmOWM4MmRlZGYvdGhlbWUuanBnXCIgIC8+XHJcbiAgICAgICAge2NvbnRlbnQocm91dGVQcm9wcyl9XHJcbiAgICAgIDwvPn0gLz4pXHJcbiAgICAgIH1cclxuICAgICAgPEVycm9yU3VjY2Vzc0ZlZWRiYWNrIC8+XHJcbiAgICAgIDxMb2FkaW5nSW5kaWNhdG9yIC8+XHJcbiAgICA8Lz5cclxuICA8L1JvdXRlcj5cclxuIiwiLy8gPEluaXRpYWxpemF0aW9uPlxyXG5pbXBvcnQgJy4vc2V0LWN1cnJlbnQtdXNlcic7IC8vIEVtdWxhdGUgc2VydmVyLXNpZGUgc2NyaXB0IHRvIHNldCBjdXJyZW50IHVzZXJcclxuaW1wb3J0ICcuLi9nbG9iYWwtc2V0dGVycy9zZXQtYWxsJzsgLy8gQ2xpZW50LXNpZGUgaW5pdGlhbGl6YXRpb25cclxuLy8gPC9Jbml0aWFsaXphdGlvbj5cclxuXHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBDaG9vc2VVc2VyIH0gZnJvbSAnLi91dGlscy9jaG9vc2UtdXNlcic7XHJcbmltcG9ydCB7IGluY2x1ZGVDU1MgfSBmcm9tICcuL3V0aWxzL2luY2x1ZGUtY3NzJztcclxuaW1wb3J0IHsgaW5jbHVkZU9wdGlvbmFsQ1NTIH0gZnJvbSAnLi4vdXRpbHMvaW5jbHVkZS1vcHRpb25hbC1jc3MnO1xyXG5pbXBvcnQgeyBTdWJqZWN0UGxhbm5lckFkbWluQXBwIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy9hZG1pbic7XHJcbmltcG9ydCB7IExhbmd1YWdlQ29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XHJcbmltcG9ydCB7IEluamVjdGVkSW50bFByb3BzLCBpbmplY3RJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCB7IHNldHVwSW50bCB9IGZyb20gJy4uL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL1NldHVwTGFuZ3VhZ2VJbnRsJztcclxuXHJcbmluY2x1ZGVPcHRpb25hbENTUyh7XHJcbiAgdjE6IFtcclxuICAgICdjc3MvY291cnNldmlld2VyLmNzcycsXHJcbiAgICAnY3NzL2RpYWxvZy5jc3MnLFxyXG4gICAgJ2Nzcy9ncmlkLWNzcy1wYXRjaC5jc3MnXHJcbiAgXSxcclxuICBpbmNsdWRlQ1NTLFxyXG4gIHZlcnNpb246IDYsXHJcbiAgdmVyc2lvbkZvbGRlcjogJ2Nzcy9kZWx0YS1jc3MvY291cnNldmlld2VyJ1xyXG59KTtcclxuXHJcbmNsYXNzIF9BcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SW5qZWN0ZWRJbnRsUHJvcHM+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICBpZiAoIWxvY2F0aW9uLmhhc2gpIGxvY2F0aW9uLmhhc2ggPSBcIiMvXCI7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIGVudi5jdXJyZW50VXNlciA/XHJcbiAgICA8TGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGludGwgfX0+XHJcbiAgICAgIDxTdWJqZWN0UGxhbm5lckFkbWluQXBwIC8+IFxyXG4gICAgPC9MYW5ndWFnZUNvbnRleHQuUHJvdmlkZXI+OlxyXG4gICAgICA8Q2hvb3NlVXNlciAvPlxyXG4gIH1cclxufVxyXG5cclxuY29uc3QgQXBwID0gc2V0dXBJbnRsKGluamVjdEludGwoX0FwcCkpO1xyXG5leHBvcnQgZGVmYXVsdCBBcHA7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=