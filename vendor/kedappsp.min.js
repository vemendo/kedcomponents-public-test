var kedappsp=function(e){function t(t){for(var r,i,o=t[0],c=t[1],l=t[2],d=0,m=[];d<o.length;d++)i=o[d],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&m.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(u&&u(t);m.length;)m.shift()();return s.push.apply(s,l||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var c=n[o];0!==a[c]&&(r=!1)}r&&(s.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={3:0},s=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],c=o.push.bind(o);o.push=t,o=o.slice();for(var l=0;l<o.length;l++)t(o[l]);var u=c;return s.push([306,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return i}),n.d(t,"k",function(){return c}),n.d(t,"g",function(){return l}),n.d(t,"h",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return p}),n.d(t,"n",function(){return f}),n.d(t,"l",function(){return h}),n.d(t,"b",function(){return b}),n.d(t,"c",function(){return g}),n.d(t,"e",function(){return v}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return E});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function i(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var o=[].concat;function c(e){return o.apply([],e)}function l(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function u(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var i=t[r],o=n[r];return i===o?0:null==i?-1:null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function f(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function h(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function b(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],i=t(s),o=n[i];o?o.push(s):n[i]=[s]}return n}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function v(e,t){var n,a,s={};try{for(var i=r.h(t),o=i.next();!o.done;o=i.next()){var c=o.value;c in e&&(s[c]=e[c])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(n)throw n.error}}return s}function k(e,t){var n=g(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function E(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var i=n[a];if(r[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},,function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(34);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},function(e,t,n){"use strict";var r=n(17);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j}),n.d(t,"k",function(){return r.k}),n.d(t,"l",function(){return r.l})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(26);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,function(e,t,n){"use strict";var r=n(4),a=n(3),s=n(17),i=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(20);function c(e,t){return o.a[e].relationships[t]}function l(e,t){var n=function(e){var t=function(e){return!0};return e.from?u(t,function(t){return t.dateTime>=e.from}):e.to?u(t,function(t){return t.dateTime<e.to}):e.ids?u(t,function(t){return e.ids.includes(t.id)}):e.name?u(t,function(t){return t.name===e.name}):e.tags?u(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function u(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var p=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var s=a[r];localStorage.setItem("cache-bust-"+n+"-"+s,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+c(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),f=n(11);function h(e,t){for(var n=Object.keys(t),r=e,s=0,i=n;s<i.length;s++){var o=i[s];r===e&&(r=a.a({},e));var c=t[o];if(c&&"object"==typeof c){var l=Object.keys(c).filter(function(e){return e.startsWith("$")});if(l.length>0){for(var u=function(e){var t=c[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var s=0,i=n;s<i.length;s++){var l=i[s];a.includes(l)||a.push(l)}break;case"$remove":var u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!u.includes(e)})}},d=0,m=l;d<m.length;d++){u(m[d])}continue}}r[o]=c}return r}function b(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,s=Object.keys(t),i=a.a({},e),o=0,c=s;o<c.length;o++){var l=c[o],u=t[l];if(u&&"object"==typeof u){var d=Object.keys(u).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var m=function(e){var t=u[e];switch(e){case"$unset":r?delete i[l]:i[l]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");o=(o=i[l])?a.a({},o):{},i[l]=o;var s=o.$remove;Array.isArray(s)&&(o.$remove=s.filter(function(e){return!n.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(n):n.slice(),o.$add=d;break;case"$remove":var o,c=t;if(!Array.isArray(c))throw new Error("$remove instruction must contain array");o=(o=i[l])?a.a({},o):{},i[l]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!c.includes(e)}),0===o.$add.length&&delete o.$add),s=(s=o.$remove)?s.concat(c):c.slice(),o.$remove=s}},p=0,f=d;p<f.length;p++){m(f[p])}continue}}i[l]=u}return i}var g=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(s=r[n]).op||s.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==s.op||s.targetBranchId&&s.branchId!==this.query.branchId&&s.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===s.op&&(s.deltaDoc.tags&&this.query.tags||s.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:i=this.getDataWithMutationsApplied(e,!1,this.data),this.data=i,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,s=this.includes,i=this.query,o=i.hasEdgesFrom?[].concat(i.hasEdgesFrom||[]):[],l=i.tags?[].concat(i.tags||[]):[];switch(t.op){case"update":return Object(f.g)(e,function(e){if(e.id===t.id){var r=h(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return s.forEach(function(r){var s,i=e[r];if(i){var o=Object(f.g)(i,function(e){if(e.id!==t.id)return e;var r=h(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==i&&(e=a.a({},e,((s={})[r]=o,s)))}}),e});case"add":if(r===t.table&&i.tags){var u=[].concat(i.tags);if(t.doc.tags&&t.doc.tags.some(function(e){return u.includes(e)}))return e.concat([t.doc])}return e;case"add-related":if(r===t.table&&-1!==s.indexOf(t.graphProp))return Object(f.g)(e,function(e){var r;if(e.id!==t.id)return e;var s=a.a({},t.relatedDoc);return n&&(s.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([s]),r))});if(i.hasEdgesFrom&&o.includes(t.id)&&r===c(t.table,t.graphProp)){if(!i.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&l.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return i.ids&&i.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==s.indexOf(t.graphProp)?Object(f.g)(e,function(e){var r,s=e[t.graphProp];return s?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?s.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):s.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):i.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(i.include){var m=s.map(function(e){return{label:e,table:c(r,e)}}).filter(function(e){return e.table===t.table});if(m.length>0)return Object(f.g)(e,function(e){return m.forEach(function(r){var s,i=r.label,o=e[i];o&&(e=a.a({},e,((s={})[i]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),s)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),v=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new i(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return g.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesFrom",e)},t.prototype.hasEdgesTo=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesTo",e)},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:p.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new s.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.add=function(e){this.repo.writer.mutate([{op:"add",id:e.id,table:this.table,doc:e}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(31).a),k=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===g.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var s=a.find(function(t){return o.a[r.table].relationships[t]===e});if(s){for(var i={},c=0,u=r.data;c<u.length;c++){var d=u[c];l(t,d[s]).forEach(function(e){return i[e.id]=e})}var m=Object.keys(i).map(function(e){return i[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var p=l(t,r.data);return t.ids.every(function(e){return p.some(function(t){return t.id===e})})?{value:p}:"continue"}},s=0,i=this.queries;s<i.length;s++){var c=a(i[s]);if("object"==typeof c)return c.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,s=this.findQuery(n,r);s?s.timeoutHandle&&(clearTimeout(s.timeoutHandle),s.timeoutHandle=null):(s=new g(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(s)),s.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,s=(n.repo,this.findQuery(r,a));s&&(s.unsubscribe(e),0===s.subscriptions.length&&(s.timeoutHandle=setTimeout(function(){0===s.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==s}))},this.queries.length>50?500:3e5)))},e}(),E=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"add"===r.op?r.table===e:"delete"===r.op?r.table===e||n.some(function(t){return c(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return c(e,t)})).some(function(e){return c(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),s=e.length,i=function(t){var s=e[t];if("update"===s.op){var i=r.findIndex(function(e){return"update"===e.op&&e.branchId===s.branchId&&e.id===s.id});i>=0&&(n[t]=a.a({},s,{deltaDoc:b(s.deltaDoc,r[i].deltaDoc)}),r.splice(i,1))}},o=0;o<s;++o)i(o);return n.concat(r)},e}(),y=n(33);function w(e,t,n,r,s,i){for(var o=function(n){switch(n.op){case"add-related":i||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:s}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(i||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:s,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((c=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var o=t[c];t=t.slice(0,c).concat([a.a({},o,{$meta:r?"removing":"persisted"})],t.slice(c+1))}else t=t.slice(0,c).concat(t.slice(c+1));break;case"update":if(n.branchId!==e)return"continue";var c;if((c=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!i)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[s],$meta:r?"adding":"persisted"}].concat(t);else{var l=t[c],u=l.contributors.slice();u.includes(s)||u.push(s);var d=b(l.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:u,$meta:r?"updating":"persisted"}].concat(t.slice(0,c),t.slice(c+1)):t.slice(0,c).concat(t.slice(c+1))}}},c=0,l=n;c<l.length;c++){var u=o(l[c]);if("object"==typeof u)return u.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var s=a[r],i=this.lookup[s];if(i.value){var o=w(i.query.branchId,i.value,e,n,this.getUserDisplayName(),!!i.query.tags);null===o&&(n||i.fetch()),o!==i.value&&(i.optimisticValue=o,n||(i.value=o),i.notify(o))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new O(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),O=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=s.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(s.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),N=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new y.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),s=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),p.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(E.merge(e,s),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return i=a.sent(),this.persistedVersion.dispatchError(i),i&&i.name&&i.name.startsWith("http4")?(this.dispatchError(i,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(i,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new s.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add":t.add(e.table,e.doc);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),j=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(y.a),S=function(){function e(e,t,n,r,a,s,i,c){var l=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=s,this.writer=i,this.cacheOptimized=c,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new E),s||(this.querySet=new k(this.mutationQueue)),i||(this.writer=new N(this.mutationQueue,this.querySet,e,t,n)),Object.keys(o.a).forEach(function(e){var t=new v(l,e,r||{});c&&(t=t.cacheOptimized()),l[e]=t}),this.deltas=new j(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new v(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var C=n(5),I=n(7);n.d(t,"c",function(){return D}),n.d(t,"d",function(){return x}),n.d(t,"b",function(){return R}),n.d(t,"a",function(){return L});var D=new S(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),x=Object(C.i)(I.b.KED_REALM),R={standardSchool:D.schools.name("standard").cacheOptimized().single(),get mySchool(){return D.schools.name(r.a.currentUser.school).cacheOptimized().single()}},L={getBranchId:function(e,t){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return D.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(C.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return D.courseBlocks.tags(e).idsOnly().concat(D.courseContents.tags(e).idsOnly()).concat(D.courseTabs.tags(e).idsOnly()).concat(D.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return c}),n.d(t,"f",function(){return u}),n.d(t,"g",function(){return d});var r=n(3);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function c(e){return r.b(this,void 0,void 0,function(){var t,n,a,s;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent(),0,16])),[2,(i=a,Array.prototype.map.call(i,function(e){return("00"+e.toString(16)).slice(-2)}).join(""))]}var i})})}var l={};function u(e){var t=e.map(function(e){return l[e]}),n=[];if(t.forEach(function(t,r){t||n.push(e[r])}),0===n.length)return t;throw Promise.all(n.map(function(e){return c(e).then(function(t){return l[e]=t})}))}function d(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],i=t(s);i!==s&&(n===e&&(n=e.slice()),n[r]=i)}return n}},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.label,n=void 0===t?"":t;return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ",n)}},function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(15);n.d(t,"a",function(){return i}),n.d(t,"c",function(){return c}),n.d(t,"e",function(){return l}),n.d(t,"d",function(){return u}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return p});var i=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function c(e,t){return o(e,t,"W")}function l(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function u(e,t){return e.roles.includes("ADMIN")||l(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,i=Object(s.b)(location.search),o=r.a({},i,{role:t,school:n}),c=Object(s.a)(o);a?location.href=""+a+c:(location.hash="#",location.search=c)}};function m(e){d.actAs(e)}function p(e,t){var n,a,o=Object(s.b)(location.search),c={};try{for(var l=r.h(i),u=l.next();!u.done;u=l.next()){var d=u.value;o[d]&&(c[d]=o[d])}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}var m=Object(s.a)(r.a({},c,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+m+e.substr(p):""+e+m}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],i=t[1];return a[n?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(3),a=n(11),s=n(28),i=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this.cache={},this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.suspenseFetch=function(e,t,n,a,s){var i=this,o=t+" "+e+" "+JSON.stringify(n)+" "+JSON.stringify(a)+" "+JSON.stringify(s),c=this.cache[o];if(c){if("promise"in c)throw c.promise;return c.result}var l=this.fetch(e,t,n,a,s).then(function(e){return r.b(i,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return t=e.status,[4,e.text()];case 1:return n=r.sent(),this.cache[o]={result:{status:t,text:function(){return n},json:function(){return JSON.parse(n)}}},[2]}})})});throw this.cache[o]={promise:l},l},e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,i){return r.b(this,void 0,void 0,function(){var o,c,l,u,d,m,p,f,h,b,g;return r.d(this,function(v){switch(v.label){case 0:return i&&"no-cache"===i.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),l=(c=this).authHeader,u=c.tokenInfo,d=c.bearerProvider,l||u||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=u=v.sent(),v.label=2;case 2:return u?u.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=u=v.sent(),v.label=4;case 4:l="Bearer "+u.token,v.label=5;case 5:return l&&(n.Authorization=l),f=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 6:return 401==(h=v.sent()).status&&this.bearerProvider?(b=h.headers.get("www-authenticate"),console.log("Got "+h.status+" from "+(this.baseUrl+e)),b&&/Bearer/i.test(b)?(g=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return g.tokenInfo=v.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 8:h=v.sent(),v.label=9;case 9:return[2,h]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.suspenseGet=function(e,t,n){return this.suspenseFetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,s,o,c){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=c,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),c=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function l(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var u=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"k",function(){return a.e}),n.d(t,"l",function(){return a.f}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return c}),n.d(t,"j",function(){return l}),n.d(t,"f",function(){return i}),n.d(t,"c",function(){return u});var d=function(){function e(e,t,n){this.http=new i(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(i=u.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(u,o.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i,o;return r.d(this,function(c){switch(c.label){case 0:return a=r.a({},t),"undefined"!=typeof location&&location.search.includes("useSP")&&(a.flags=(a.flags||[]).concat(["useSP"])),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=c.sent()).status?[3,3]:(i=u.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(u,o.concat([c.sent()])));case 3:return[4,s.json()];case 4:return[2,c.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=u.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(u,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";n.d(t,"l",function(){return m}),n.d(t,"c",function(){return p}),n.d(t,"h",function(){return f}),n.d(t,"i",function(){return h}),n.d(t,"n",function(){return b}),n.d(t,"k",function(){return g}),n.d(t,"d",function(){return v}),n.d(t,"m",function(){return k}),n.d(t,"b",function(){return E}),n.d(t,"g",function(){return w}),n.d(t,"a",function(){return T}),n.d(t,"j",function(){return O}),n.d(t,"f",function(){return N}),n.d(t,"e",function(){return j});var r=n(1),a=n(6),s=n.n(a),i=n(5),o=n(48),c=n.n(o),l=n(12),u=n.n(l),d=n(4);function m(e,t,n,a,s){var o,l,u={},d=t.id,m=function(o){var c,l,m,p,f,h,b=a[o],g=e[o]||[],v=t[o];if(!v)return"continue";var k=v.map(function(e,t){return{doc:e,idx:t}}),E=k.filter(function(e){return!g.some(function(t){return t.id===e.doc.id})});try{for(var y=(c=void 0,r.h(E)),w=y.next();!w.done;w=y.next()){var T=w.value,O=(R=r.a({},T.doc)).$meta;delete R.$meta,"add"===O?(R.id||(R.id=Object(i.h)()),s.add(b,R)):"update"===O&&s.put(b,R),s.link(n,d,b,R.id,o),u[o]||(u[o]={}),u[o][T.idx]={$set:R}}}catch(e){c={error:e}}finally{try{w&&!w.done&&(l=y.return)&&l.call(y)}finally{if(c)throw c.error}}var N=g.filter(function(e){return!v.some(function(t){return t.id===e.id})});try{for(var j=(m=void 0,r.h(N)),S=j.next();!S.done;S=j.next()){var C=S.value;s.unlink(n,d,b,C.id,o)}}catch(e){m={error:e}}finally{try{S&&!S.done&&(p=j.return)&&p.call(j)}finally{if(m)throw m.error}}var I=k.filter(function(e){return g.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var D=(f=void 0,r.h(I)),x=D.next();!x.done;x=D.next()){var R,L=x.value;delete(R=r.a({},L.doc)).$meta,s.put(b,R),u[o]||(u[o]={}),u[o][L.idx]={$set:R}}}catch(e){f={error:e}}finally{try{x&&!x.done&&(h=D.return)&&h.call(D)}finally{if(f)throw f.error}}};try{for(var p=r.h(Object.keys(a)),f=p.next();!f.done;f=p.next()){m(f.value)}}catch(e){o={error:e}}finally{try{f&&!f.done&&(l=p.return)&&l.call(p)}finally{if(o)throw o.error}}return c()(t,u)}function p(e){return s()(e).format("YYMMDD HH:mm")}function f(e){return s()(e).format("YYMMDD")}function h(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function b(e,t,n){return c()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function g(e,t,n){return c()(t,{createdDate:{$set:e},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function v(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function k(e,t){var n=Date.now();return(e=b(n,e,t)).createdBy||(e=g(n,e,t)),e}function E(e,t,n){var a,s,i=r.a({},e),o=t[e.id];o&&(i.$etag=o);try{for(var c=r.h(n),l=c.next();!l.done;l=c.next()){var u=l.value,d=e[u].map(function(e){return E(e,t,[])});i[u]=d}}catch(e){a={error:e}}finally{try{l&&!l.done&&(s=c.return)&&s.call(c)}finally{if(a)throw a.error}}return i}function y(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return y(0,function(t){return t.readAsText(e)})}function T(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function O(e){var t=u()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function N(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,c,l;return r.d(this,function(u){switch(u.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,s=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),s&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return i=r.f.apply(void 0,[u.sent(),3]),o=i[0],c=i[1],l=i[2],o.tasks=c,o.abilities&&o.abilitiesOrder&&(o.abilities=o.abilitiesOrder.map(function(e){return o.abilities.find(function(t){return t.id===e})})),o.knowledgeRequirements&&o.knowledgeRequirementsOrder&&(o.knowledgeRequirements=o.knowledgeRequirementsOrder.map(function(e){return o.knowledgeRequirements.find(function(t){return t.id===e})})),o.centralContent&&o.centralContentOrder&&(o.centralContent=o.centralContentOrder.map(function(e){return o.centralContent.find(function(t){return t.id===e})})),a&&(o.templateChain=l),[2,o]}})})}function j(e,t){return void 0===e||t.filter(function(t){return!e.includes(t)}).length>0||e.filter(function(e){return!t.includes(e)}).length>0}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,i=e.backgroundColor,o=e.progressColor,c=[];if(n>s)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var l=1;l<=n;l++)c.push(a.createElement("svg",{key:l},a.createElement("circle",{className:"circle-chart-background",fill:l>r?i:o,cx:"8",cy:"8",r:"8"})));return c},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return i});var i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,i=t.className,o=t.children,c=t.headerClassName,l=t.contentClassName,u=t.displayProgress,d=t.progressData,m=t.inactivated,p=t.inactivatedRender,f=this.state.headerOpen;return m?"titleAndChildren"===p?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,n),a.createElement(a.Fragment,null,o)):a.createElement(a.Fragment,null,o):a.createElement("div",{className:(i||"")+" openClose"+(f?" open":"")},a.createElement("div",{className:"openHeader"+(c?" "+c:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),u&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(l?" "+l:"")},o))},t}(a.Component)},function(e){e.exports=JSON.parse('{"a":{"branches":{"accessClaimTypes":["role","schoolRole","email"],"sharingAccessPerRole":{"USER":{"email":["*"],"schoolRole":["*"],"role":["*"]}},"relationships":{"parents":"branches","approvedChildren":"branches"},"isPublic":true},"global":{"accessClaimTypes":["role","schoolRole"],"relationships":{"courseInstances":"courseInstances"},"isPublic":true},"courseInstances":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","blocks":"courseBlocks","tabs":"courseTabs"},"isPublic":true},"courseBlocks":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","tabs":"courseTabs","tasks":"tasks"},"isPublic":true},"courseTabs":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","contents":"courseContents"},"isPublic":true},"courseContents":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"tasks":"tasks"},"isPublic":true},"weekplans":{"accessClaimTypes":["email","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"isPublic":false},"weekplans-ks":{"accessClaimTypes":["email","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"isPublic":false},"usertasks":{"accessClaimTypes":["email","schoolRole","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"schoolRole":["{school}/EMPLOYEE:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{"task":"tasks","course":"courses"},"isPublic":false},"userhiddencourses":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false},"usercalendarvisibility":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false},"subjects":{"relationships":{"courseTemplates":"courses","abilities":"abilities"},"isPublic":true},"schools":{"accessClaimTypes":["role","schoolRole"],"relationships":{"courses":"courses","activeCourses":"courses"},"isPublic":true},"courses":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]}},"defaultAcl":["schoolRole:{school}/EMPLOYEE:*"],"relationships":{"templateChain":"courses","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","abilities":"abilities","images":"images","tasks":"tasks"},"isPublic":true},"tasks":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]}},"defaultAcl":["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],"relationships":{"knowledgeRequirements":"knowledge-requirements","centralContent":"central-content","abilities":"abilities"},"isPublic":true},"images":{"accessClaimTypes":["role","schoolRole","email"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]},"USER":{"email":["{email}:*"]}},"isPublic":true},"central-content":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"]},"knowledge-requirements":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"],"isPublic":true},"abilities":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"],"isPublic":true},"seenStudentAssignments":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":true},"notes":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false}}}')},function(e,t,n){"use strict";var r=n(3),a=n(17),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=n(11);function o(e){e.resources||(e.resources=[])}function c(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var l=sessionStorage.getItem("redir-hash");if(l)try{var u=JSON.parse(l),d=u.time,m=u.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return c(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return c(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var p=new s,f=Date.now(),h=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-f>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[r.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),b={fetch:fetch.bind(self),btoa:btoa.bind(self)},g=function(e){function t(t,n,r){var a="string"!=typeof n?n:new h(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,b,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return p}),n.d(t,"b",function(){return h}),n.d(t,"c",function(){return b}),n.d(t,"a",function(){return g})},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return c}),n.d(t,"a",function(){return l});var r=n(1),a=n(6),s=n.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e,t){var n=null;n=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var r=s()(n.toString(),"YYYY");return 1!=r.week()&&(r=r.clone().add(1,"week")),t?[s()(r.clone()).week(32).startOf("week"),s()(r.clone()).week(51).endOf("week")]:[s()(r.clone()),s()(r.clone()).week(25).endOf("week")]}function c(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function l(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},,function(e,t,n){"use strict";var r=n(68);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(40);function s(e){var t=e.children,n=e.spinner,s=e.onError,i=e.noError;return r.createElement(a.a,{props:t,spinner:n,noError:i,onError:s,fn:function(e){return e}})}},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(38),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:this.props.size||35,value:this.props.value,onChange:this.props.onChange&&function(t){return e.props.onChange(t.target.value)},disabled:this.props.disabled,placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(3),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(29).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(3),a=n(30),s=n(42),i=n(31),o=n(41),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,i){r=!0,e=a,t=s,s&&n?n(null,s,i):n&&n(a,null,i)});if(r){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,c=s.observer;return i.push(a),n=c,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],i={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,i,o){if(a=o,r&&(r.unsubscribe(),r=null),i)t(null,i,s);else try{var c=e(n);c&&"function"==typeof c.subscribe?r=c.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(c,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);c.prototype.map=Object(s.a)(c)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(3),a=n(30),s=n(42),i=n(29),o=n(28),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);c.prototype._map=Object(s.a)(c)},function(e,t,n){"use strict";var r=n(33);n.d(t,"a",function(){return r.b}),n.d(t,"b",function(){return r.c})},function(e,t,n){"use strict";n(30),n(29);var r=n(31);n.d(t,"a",function(){return r.a});var a=n(28);n.d(t,"b",function(){return a.a});var s=n(41);n.d(t,"c",function(){return s.a})},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n.n(a),i=function(e){var t=e.className,n=e.classNames,a=e.children;return s.a.createElement("div",{className:r.g(n||[],t?[t]:[],["horizontalItem"]).join(" ")},a)}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(61),s=n(4),i=n(6),o=n.n(i),c=n(98),l=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(c.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(o()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return o()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),u=n(5),d=n(44);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var m=s.a.userTasksRepo,p=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,i,c;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,l.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,i=o()(s).week(),[2,{from:(c=Object(d.a)(o()(s).year(),i)).notBefore,to:c.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,c,l,u;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,i=a(),c=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},c,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:o()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:o()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return l=r.sent(),0===(u=l.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&u.push(e),[4,this.update(u,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(r){switch(r.label){case 0:return(n=this.persistedState)?[3,2]:[4,l.load(this.options.user)];case 1:n=r.sent(),r.label=2;case 2:return(a=new l(n)).weekDate=t?o()(e).valueOf():o()(e).startOf("week").valueOf(),a.save(),this.persistedState=a,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(u.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new u.b("email",t.getCurrentUser().mail,"S"),new u.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);m||(m=s.a.userTasksRepo=new p(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(2);function i(e,t){return function(n){return a.createElement(o,r.a({props:n,fn:e},t))}}var o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={result:null,isLoading:!0},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.subscribe()},t.prototype.componentWillUnmount=function(){this.unsubscribe()},t.prototype.shouldComponentUpdate=function(e,t){return this.state.error!==t.error||this.state.isLoading!==t.isLoading||this.state.result!==t.result||!Object(s.m)(e.props,this.props.props)},t.prototype.componentDidUpdate=function(e){Object(s.m)(e.props,this.props.props)||(this.unsubscribe(),this.subscribe())},t.prototype.subscribe=function(){var e=this;this.setState({isLoading:!0}),this.subscription=this.props.fn(this.props.props).subscribe(function(t,n){return e.setState({result:t,error:n,isLoading:!1})})},t.prototype.unsubscribe=function(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null)},t.prototype.render=function(){var e=this.state,t=e.result,n=e.error,r=e.isLoading,s=this.props,i=s.spinner,o=s.onError,c=s.noError;return n?c?"":o?o(n):a.createElement("p",null,"Error: ",n.message):r?i||"":void 0===t?"":t},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,c=e.title;return s.createElement("div",{title:c||Object(i.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"c",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return c});var r=n(6),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function i(e){var t=a()(e).add(1,"week");return e.week()===e.weeksInYear()&&t.year()===e.year()?{adjusted:!0,nextDate:a()(e.year()+1+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function o(e){var t=a()(e).add(-1,"week");return 2===e.week()&&t.year()!==e.year()?{adjusted:!0,nextDate:a()(e.year()+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function c(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(22),i=n(6),o=n.n(i);var c=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),l=n(2),u=n(53),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return p}),n.d(t,"a",function(){return f});var m,p=function(){function e(t,n,s,i){var o=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=i;var c=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){c(e)&&(o[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),i={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))c(o);function c(t){Object.keys(t).forEach(function(o){!s.hasOwnProperty(o)&&n(o)&&(s[o]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var c=JSON.stringify(r.g([o],n)),l=i[c];if(void 0!==l){if(l.promise)throw l.promise;if(l.error)throw l.error;if(l.timeout>Date.now())return l.value}try{var u=t[o].apply(e,n).then(function(e){i[c]={timeout:Date.now()+a,value:e}}).catch(function(e){i[c]={timeout:Date.now()+a,error:e}});throw i[c]={timeout:Date.now()+a,promise:u},u}catch(e){if(e.then)throw e;i[c]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:c})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i,o;return r.d(this,function(c){switch(c.label){case 0:return c.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=c.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([c.sent()])));case 3:return[4,n.json()];case 4:return[2,c.sent().courses];case 5:throw o=c.sent(),console.error("Error from EDS: "+o),new Error(Object(l.a)(m||(m=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,c,l,d,m,p,f;return r.d(this,function(r){switch(e){case"en_sin":return[2,u.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,u.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=Object(s.d)(t,!0),i=Object(s.d)(t,!1),c=a[0],l=i[0],d=a[1],m=i[1],p={startDate:new Date(c.year(),c.month(),c.date()).toDateString(),endDate:new Date(c.year(),d.month(),d.date()).toDateString()},f={startDate:new Date(l.year(),l.month(),l.date()).toDateString(),endDate:new Date(l.year(),m.month(),m.date()).toDateString()},[2,{firstTerm:p,secondTerm:f,holidays:n}]}return[2]})})},e}(),f=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new c(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new c({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},,function(e,t){e.exports=ReactDOM},,,function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return c});var r=n(1),a=n(32),s=n(9),i=n(2);function o(e,t,n){var r=(void 0===n?{appendLeftovers:!1}:n).appendLeftovers,a={};if(!e||!t)return e;var s=e&&t?t.map(function(t){return a[t]=!0,e.find(function(e){return e.id===t})}).filter(function(e){return!!e}):e;if(r){var i=e.filter(function(e){return!a[e.id]});return s.concat(i)}return s}function c(e,t){var n,c;if(t)c=new a.a([t]);else{var l=e.tags.filter(function(e){return e.startsWith("course:")});if(0===l.length)return new a.a(e);c=(n=s.c.courses).tags.apply(n,r.g(l)).toValue()}return c.map(function(t){var n=Object(i.k)(t.map(function(e){return e.abilitiesOrder||[]})),r=Object(i.k)(t.map(function(e){return e.centralContentOrder||[]})),a=Object(i.k)(t.map(function(e){return e.knowledgeRequirementsOrder||[]})),s=Object.assign({},e);return s.abilities&&(s.abilities=o(e.abilities,n)),s.centralContent&&(s.centralContent=o(e.centralContent,r)),s.knowledgeRequirements&&(s.knowledgeRequirements=o(e.knowledgeRequirements,a)),s})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return i}),n.d(t,"c",function(){return o});var r=n(1),a=function(e,t,n){for(var r=[],a=t;a<=n;a++)r.push({schoolName:"KED",tuitionGroupName:e,studentFirstName:"Student "+a,studentLastName:"Classroom",studentEmailAddress:"student"+a+".classroom@kedschools.com"});return r},s=[{schoolName:"KED",teacherFirstName:"Teacher 1",teacherLastName:"Classroom",teacherEmailAddress:"teacher1.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 2",teacherLastName:"Classroom",teacherEmailAddress:"teacher2.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 3",teacherLastName:"Classroom",teacherEmailAddress:"teacher3.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Carl",teacherLastName:"Holmberg",teacherEmailAddress:"carl@kedschools.com"},{schoolName:"KED",teacherFirstName:"David",teacherLastName:"Fahlander",teacherEmailAddress:"david.fahlander@kedschools.com"},{schoolName:"KED",teacherFirstName:"Andrei",teacherLastName:"Spatarelu",teacherEmailAddress:"andrei.spatarelu@vemendo.se"}],i={"DJUSÄL01":[{schoolName:"KED",tuitionGroupName:"DJUR1_GR1 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"DJUR1_GR2 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"DJUR1_GR3 (180816-190614)",courseCode:"DJUSÄL01"}],DJUDJI0:[{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr1 (180816-190614)",courseCode:"DJUDJI0"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",courseCode:"DJUDJI0"}],KEMKEM01:[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",courseCode:"KEMKEM01"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",courseCode:"KEMKEM01"}],MATMAT03b:[{schoolName:"KED",tuitionGroupName:"MAT3b_Gr1 (180816-190614)",courseCode:"MATMAT03b"},{schoolName:"KED",tuitionGroupName:"MAT3b_Gr2 (180816-190614)",courseCode:"MATMAT03b"},{schoolName:"KED",tuitionGroupName:"MAT3b_Gr3 (180816-190614)",courseCode:"MATMAT03b"}],BIOBIO01:[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",courseCode:"BIOBIO01"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",courseCode:"BIOBIO01"}],SVESVE03:[{schoolName:"KED",tuitionGroupName:"SVE3_Gr1 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr2 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr3 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr4 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr5 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr6 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr7 (180816-190614)",courseCode:"SVESVE03"}]},o={"DJUR1_GR1 (180816-190614)":a("DJUR1_GR1 (180816-190614)",1,12),"DJUR1_GR2 (180816-190614)":a("DJUR1_GR2 (180816-190614)",13,24),"DJUR1_GR3 (180816-190614)":r.g([{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Student2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Carl",studentLastName:"Holmberg",studentEmailAddress:"carl@kedschools.com"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Andrei",studentLastName:"Spatarelu",studentEmailAddress:"andrei.spatarelu@vemendo.se"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Student3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"}],a("DJUR1_GR3 (180816-190614)",23,34)),"MAT3b_Gr1 (180816-190614)":a("MAT3b_Gr1 (180816-190614)",3,23),"MAT3b_Gr2 (180816-190614)":a("MAT3b_Gr2 (180816-190614)",24,49),"MAT3b_Gr3 (180816-190614)":a("MAT3b_Gr3 (180816-190614)",50,72),"IDR1_Gr1 (180816-190614)":a("IDR1_Gr1 (180816-190614)",1,12),"IDR1_Gr2 (180816-190614)":a("IDR1_Gr2 (180816-190614)",13,22),"IDR1_Gr3 (180816-190614)":a("IDR1_Gr3 (180816-190614)",23,34),"KEM1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 9",studentLastName:"Classroom",studentEmailAddress:"student9.classroom@kedschools.com"}],"KEM1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 5",studentLastName:"Classroom",studentEmailAddress:"student5.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"}],"BIO1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 4",studentLastName:"Classroom",studentEmailAddress:"student4.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 10",studentLastName:"Classroom",studentEmailAddress:"student10.classroom@kedschools.com"}],"BIO1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 7",studentLastName:"Classroom",studentEmailAddress:"student7.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"}],"SVE3_Gr1 (180816-190614)":a("SVE3_Gr1 (180816-190614)",1,21),"SVE3_Gr2 (180816-190614)":a("SVE3_Gr2 (180816-190614)",22,44),"SVE3_Gr3 (180816-190614)":a("SVE3_Gr3 (180816-190614)",45,61),"SVE3_Gr4 (180816-190614)":a("SVE3_Gr4 (180816-190614)",62,78),"SVE3_Gr5 (180816-190614)":a("SVE3_Gr5 (180816-190614)",83,107),"SVE3_Gr6 (180816-190614)":a("SVE3_Gr6 (180816-190614)",108,124),"SVE3_Gr7 (180816-190614)":a("SVE3_Gr7 (180816-190614)",125,150)}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(38),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e){e.exports=JSON.parse('{"SouthIndia":[{"firstTerm":{"startDate":"2015-06-01T00:00:00.000Z","endDate":"2015-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2015-11-01T00:00:00.000Z","endDate":"2016-03-27T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2016-06-23T00:00:00.000Z","endDate":"2016-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2016-11-01T00:00:00.000Z","endDate":"2017-03-25T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2017-06-05T00:00:00.000Z","endDate":"2017-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2017-11-01T00:00:00.000Z","endDate":"2018-03-30T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2018-06-04T00:00:00.000Z","endDate":"2018-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2018-11-01T00:00:00.000Z","endDate":"2019-04-29T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2019-06-03T00:00:00.000Z","endDate":"2019-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2019-11-01T00:00:00.000Z","endDate":"2020-03-27T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2020-06-01T00:00:00.000Z","endDate":"2020-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2020-11-01T00:00:00.000Z","endDate":"2021-03-26T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2021-06-06T00:00:00.000Z","endDate":"2021-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2021-11-01T00:00:00.000Z","endDate":"2022-03-25T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2022-06-05T00:00:00.000Z","endDate":"2022-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2022-11-01T00:00:00.000Z","endDate":"2023-03-31T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2023-06-04T00:00:00.000Z","endDate":"2023-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2023-11-01T00:00:00.000Z","endDate":"2024-03-29T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2024-06-03T00:00:00.000Z","endDate":"2024-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2024-11-01T00:00:00.000Z","endDate":"2025-03-28T00:00:00.000Z"},"holidays":[]}],"NorthIndia":[{"firstTerm":{"startDate":"2024-04-03T00:00:00.000Z","endDate":"2024-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2024-10-01T00:00:00.000Z","endDate":"2025-04-02T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2023-04-05T00:00:00.000Z","endDate":"2023-10-01T00:00:00.000Z"},"secondTerm":{"startDate":"2023-10-02T00:00:00.000Z","endDate":"2024-04-02T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2022-04-06T00:00:00.000Z","endDate":"2022-10-03T00:00:00.000Z"},"secondTerm":{"startDate":"2022-10-04T00:00:00.000Z","endDate":"2023-04-04T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2021-04-01T00:00:00.000Z","endDate":"2021-10-04T00:00:00.000Z"},"secondTerm":{"startDate":"2021-10-05T00:00:00.000Z","endDate":"2022-04-05T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2020-04-01T00:00:00.000Z","endDate":"2020-09-28T00:00:00.000Z"},"secondTerm":{"startDate":"2020-09-29T00:00:00.000Z","endDate":"2021-03-31T00:00:00.000Z"},"holidays":[{"startDate":"2020-05-17","endDate":"2020-06-28"}]},{"firstTerm":{"startDate":"2019-04-04T00:00:00.000Z","endDate":"2019-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2019-10-01T00:00:00.000Z","endDate":"2020-03-31T00:00:00.000Z"},"holidays":[{"startDate":"2019-05-19","endDate":"2019-06-29"}]},{"firstTerm":{"startDate":"2018-04-04T00:00:00.000Z","endDate":"2018-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2018-10-01T00:00:00.000Z","endDate":"2019-04-03T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2017-04-05T00:00:00.000Z","endDate":"2017-10-02T00:00:00.000Z"},"secondTerm":{"startDate":"2017-10-03T00:00:00.000Z","endDate":"2018-04-03T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2016-04-06T00:00:00.000Z","endDate":"2016-10-03T00:00:00.000Z"},"secondTerm":{"startDate":"2016-10-04T00:00:00.000Z","endDate":"2017-04-04T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2015-04-01T00:00:00.000Z","endDate":"2015-10-05T00:00:00.000Z"},"secondTerm":{"startDate":"2015-10-06T00:00:00.000Z","endDate":"2016-04-05T00:00:00.000Z"},"holidays":[]}]}')},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n.n(a),i=function(e){var t=e.className,n=e.classNames,a=e.children;return s.a.createElement("div",{className:r.g(n||[],t?[t]:[],["align-horizontal"]).join(" ")},a)}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.thumbnail,n=e.url,a=e.title,s=e.label,i=e.icon,o=e.size,c=void 0===o?"small":o,l=e.customAction,u=s||a,d=t||i,m=!!d;return r.createElement("div",{className:"file-view "+c},r.createElement("a",{href:l?"#":n,target:l?void 0:"_blank",title:a},m?r.createElement("img",{className:"file-"+(t?"thumbnail":"icon"),src:d,alt:a}):r.createElement("i",{className:"fas fa-file"})),r.createElement("a",{href:l?"#":n,target:l?void 0:"_blank",title:a,onClick:l},u))}},function(e,t,n){"use strict";n.d(t,"c",function(){return d}),n.d(t,"d",function(){return m}),n.d(t,"b",function(){return p}),n.d(t,"a",function(){return f});var r=n(1),a=n(0),s=n(5),i=n(4),o=n(140),c=n.n(o),l=n(13),u=n(63);function d(e,t,n){var r,s=e.metadata;try{r=s.urkundResponse&&JSON.parse(s.urkundResponse)}catch(e){r=null}var i=r&&r[0];return!i&&e.metadata.urkundUploadError&&(i={Status:{ErrorCode:-1,Message:e.metadata.urkundUploadError,State:"Error"},ExternalId:e.metadata.urkundExternalId}),e.isRefreshing?a.createElement("td",{colSpan:2},a.createElement(l.a,null)," Uppdaterar..."):i?a.createElement(a.Fragment,null,a.createElement("td",{className:"urkund-status-col"},a.createElement("a",{href:i.Report&&i.Report.ReportUrl,onClick:function(r){-1!==["Accepted","Submitted"].indexOf(i.Status.State)&&(r.preventDefault(),r.stopPropagation(),n&&t(e))},target:"_blank",title:Object(u.a)(i)},a.createElement("div",{className:Object(u.c)(i)}))),a.createElement("td",{className:"urkund-status-col"},a.createElement("div",{className:Object(u.b)(i)},i.Report&&"number"==typeof i.Report.Significance?i.Report.Significance.toFixed()+"%":" "))):a.createElement("td",{colSpan:2})}function m(e,t){return r.g([t],e.filter(function(e){var n=e.user,r=e.filename;return n!==t.user||r!==t.filename}))}function p(e){return r.b(this,void 0,void 0,function(){var t,n,a,o,l;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),[4,i.b.kedBackendClient.http.fetch(e.mediaLink,"get",{})];case 1:return(t=r.sent()).status>=400?(n=s.c.bind,a=[void 0,t.status],[4,t.text()]):[3,3];case 2:throw new(n.apply(s.c,a.concat([r.sent()])));case 3:return[4,t.blob()];case 4:return o=r.sent(),c()(o,e.filename,e.contentType),[3,6];case 5:return l=r.sent(),this.setState({error:"Kunde inte ladda ned filen. "+(l.message||l)}),console.error(l),[3,6];case 6:return[2]}})})}function f(e){var t=e.file,n=t.metadata,r=n.driveFileIconUrl,s=n.driveFileUrl,i=t.filename.substr(0,t.filename.lastIndexOf("."));return a.createElement("div",{className:"align-horizontal spaced"},a.createElement("div",{className:"horizontalItem top"},a.createElement("img",{className:"file-icon",src:r})),a.createElement("div",{className:"horizontalItem top"},a.createElement("span",null,a.createElement("a",{target:"_blank",href:s},i))))}},function(e,t,n){"use strict";n.d(t,"e",function(){return a}),n.d(t,"d",function(){return s}),n.d(t,"a",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"c",function(){return c});var r=n(2);function a(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("sub:")}).map(function(e){return e.substr("sub:".length)}))}function s(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr(e.indexOf("|")+1)}))}function i(e,t,n){var a=(e||[]).filter(function(e){return!e.startsWith("course:")&&!e.startsWith("sub:")}),s=t.map(function(e){return"sub:"+e}),i=Object(r.k)(t.map(function(e){return n.map(function(t){return"course:"+e+"|"+t})}));return a.concat(s).concat(i)}function o(e,t){return i(e,a(e),t)}function c(e,t){return i(e,t,s(e))}},function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Minska indrag",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Öka indrag",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Vågrät linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga länk",result:function(){var e=window.prompt("Ange länkens URL");if(e){var t=document.getSelection(),n=document.createElement("a");n.href=e,n.target="_blank",n.appendChild(document.createTextNode(t.toString())),Object(r.a)("insertHTML",n.outerHTML)}}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,s=window.prompt(this.promptMsg);if(s){var i=document.createElement("img");i.src=s,i.tabIndex=1,n=i,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),i.onfocus=t.onFocus,i.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r=n(1),a=n(8),s=n(93),i=n.n(s),o=n(94),c=n.n(o),l=n(64),u=n(65),d=n(0),m=n(7),p=n(6),f=n.n(p),h=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(i.a,c.a)),n.messages={sv:l,en:u},f()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(100),s=n(5),i=function(){function e(e){var t=this,n=e.table,s=e.getClient,i=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,c,l,u=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,i=n.table,o=a(),c=e.map(function(e){var n=u.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(c.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.do(function(e){return c.forEach(function(t){return e.put(i,t)})}).catch(function(n){return"http409"===n.name?o.list(i,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return o.do(function(e){return n.forEach(function(t){return e.put(i,t)})})}):Promise.resolve(s&&u.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return l=r.sent(),this.regenerateCacheBust(),c.forEach(function(e){e.$etag=l.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(c)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,c,l,u,d,m,p,f,h,b,g,v,k,E=this;return r.d(this,function(y){switch(y.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,i=t.table,o=t.getQueryOptions,c=n(),[4,o()];case 1:return l=y.sent(),u=[].concat(l.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),d=this.stripGraphs(e,u),a?[4,this.mem.insert(d.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:y.sent(),y.label=3;case 3:m=new s.a,p=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){m.link2(i,e.id,t,n.id)})};try{for(var s=(t=void 0,r.h(u)),o=s.next();!o.done;o=s.next()){a(o.value)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}m.add(i,e)};try{for(f=r.h(d),h=f.next();!h.done;h=f.next())b=h.value,p(b)}catch(e){v={error:e}}finally{try{h&&!h.done&&(k=f.return)&&k.call(f)}finally{if(v)throw v.error}}return[4,c.batch(m.mutationRequests).catch(function(t){return a&&E.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return g=y.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=g.newEtags[e.id]}),a?[4,this.mem.update(e)]:[3,6];case 5:return y.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:y.sent(),y.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o=this;return r.d(this,function(c){switch(c.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,i=n(),a?[4,this.mem.update(e.map(function(e){return o.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:c.sent(),c.label=2;case 2:return[4,i.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(o,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return c.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return c.sent(),[2]}})})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(10),i=new DOMParser,o={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function c(e){for(var t=i.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)l(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function l(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&o[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),u(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r);a.name&&!!t[a.name.toLowerCase()]||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),u(e)&&(t=!0),t}function u(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)l(n.item(r))&&(t=!0);return t}var d=n(101);n.d(t,"a",function(){return v});var m="wysiwyg-actionbar",p="wysiwyg-button",f="wysiwyg-content",h="wysiwyg-focusrect",b="wysiwyg-focuspoint",g="wysiwyg-content readonly",v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||c(e.html)!==c(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(c(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:k(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(b)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),s=a.next();!s.done;s=a.next()){switch(s.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,i=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(i=i.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta vänster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta höger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden på egen rad",result:function(){return e("unfloat")}}])));var o=this.state.focusRect,l=this.props,u=l.readOnly,v=l.reportNumChars,k=l.maxChars;return a.createElement("div",{className:this.props.className},!u&&a.createElement("div",{className:m},i.map(function(e,n){return a.createElement("button",{key:n,className:p,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:u?g:f,style:{position:"relative",top:0,left:0},onMouseMove:this.onMouseMove,onMouseDown:this.onMouseDown,onMouseUp:this.onMouseUp},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:c(this.props.html)},contentEditable:!u,onPaste:function(e){if(!isNaN(k)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>k&&e.preventDefault()}},onKeyUp:v?function(e){var t=e.target.innerText;v(t?t.length:0)}:null,onKeyPress:isNaN(k)?null:function(e){var t=e.target.innerText;t&&t.length>=k&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){u||(v&&e.currentTarget&&v((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(s.a)("outdent"):Object(s.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),o&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:h,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:b+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:b+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:b+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:b+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function k(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},function(e,t,n){"use strict";function r(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return"urkund-status urkund-status-error";case"Submitted":return"urkund-status urkund-status-submitted";case"Accepted":return"urkund-status urkund-status-accepted";case"Analyzed":return"urkund-status urkund-status-analyzed"}}function a(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return e.ExternalId?"Kunde inte tas emot av urkund. Felkod: "+e.Status.ErrorCode+"\nExternal ID: "+e.ExternalId+"\nFelmeddelande: "+e.Status.Message:e.Status.Message;case"Submitted":return"Filen är uppladdad till Urkund. Klicka för att uppdatera status.";case"Accepted":return"Filen analyseras fortfarande av Urkund. Klicka för att uppdatera status.";case"Analyzed":return"Rapport skapad. Klicka för att öppna rapporten i nytt fönster"}}function s(e){if(!e||!e.Status)return"";switch(e.Status.State){case"Error":return"urkund-significance-error";case"Submitted":return"urkund-significance-submitted";case"Accepted":return"urkund-significance-accepted"}var t=e.Report;return t?t.Significance<1?"urkund-significance urkund-significance-0":t.Significance<10?"urkund-significance urkund-significance-1":t.Significance<25?"urkund-significance urkund-significance-2":t.Significance<40?"urkund-significance urkund-significance-3":t.Significance<55?"urkund-significance urkund-significance-4":t.Significance<70?"urkund-significance urkund-significance-5":t.Significance<85?"urkund-significance urkund-significance-6":t.Significance<99.9?"urkund-significance urkund-significance-7":t.Significance>=99.9?"urkund-significance urkund-significance-8":"":""}n.d(t,"c",function(){return r}),n.d(t,"a",function(){return a}),n.d(t,"b",function(){return s})},function(e){e.exports=JSON.parse('{"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalPrimarySchoolTitle":"Lägg till eget arbetsmål","customTask.addWorkGoalGymnasiumSchoolTitle":"Lägg till uppgift","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Min progression","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.primarySchoolGoals":"Egna lärandemål","userTasks.gymnasiumSchoolGoals":"Övriga uppgifter","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoalGymnasiumSchool":"Rubrik:","weekplanner.addLearningGoalPrimarySchool":"Mål:","weekplanner.addLearningGoalPrimarySchoolTitle":"Lägg till eget lärandemål","weekplanner.addLearningGoalGymnasiumSchoolTitle":"Lägg till rubrik","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoalPrimary":"Eget lärandemål","weekplanner.learningGoalGymnasium":"Uppgift","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken","teacherView.coursesViewTitle":"Mina kurser/ uppgifter","teacherView.assignmentsViewTitle":"Inlämningsuppgifter","teacherView.assignmentsViewDescription":"Här listas samtliga inlämningsuppgifter i din/dina kurser du handleder. Klicka till höger för att välja kurs. Kursens uppgifter syns nedan. Du kan öppna/dölja varje modul.","teacherView.noUploadedAssignmentsForModule":"No assignments have been uploaded for this module","teacherView.assignmentStudentName":"Elev","teacherView.assignmentFileName":"Filnamn","teacherView.assignmentSubmittedAt":"Inlamnat","teacherView.assignmentReport":"Rapport","teacherView.assignmentGrade":"Niva","teacherView.noTaskAssignments":"Inga uppdrag uppladdade för denna uppgift","teacherView.notSubmittedAssignments":"Ej lämnat in","teacherView.remindBtn":"Påminn","teacherView.filterByStudygroupsPlaceholder":"Välj studiegrupp"}')},function(e){e.exports=JSON.parse('{"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalPrimarySchoolTitle":"Add own working goal","customTask.addWorkGoalGymnasiumSchoolTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.primarySchoolGoals":"Own learning goal","userTasks.gymnasiumSchoolGoals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoalGymnasiumSchool":"Goal:","weekplanner.addLearningGoalPrimarySchool":"Goal:","weekplanner.addLearningGoalPrimarySchoolTitle":"Add own learning goal","weekplanner.addLearningGoalGymnasiumSchoolTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoalPrimary":"Own learning goal","weekplanner.learningGoalGymnasium":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline","teacherView.coursesViewTitle":"My Courses","teacherView.assignmentsViewTitle":"Assignments","teacherView.assignmentsViewDescription":"Here you cand find all the assignments you supervise. Click on the right menu to select course. The details are displayed below. You can open/hide each module.","teacherView.noUploadedAssignmentsForModule":"No assignments have been uploaded for this module","teacherView.assignmentStudentName":"Pupil","teacherView.assignmentFileName":"Filename","teacherView.assignmentSubmittedAt":"Submitted","teacherView.assignmentReport":"Report","teacherView.assignmentGrade":"Grade","teacherView.noTaskAssignments":"No assignments uploaded for this task","teacherView.notSubmittedAssignments":"Not submitted","teacherView.remindBtn":"Remind","teacherView.filterByStudygroupsPlaceholder":"Select study groups"}')},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return i});var r=n(0),a=n.n(r),s=function(e){var t=e.label,n=e.addClass,r=e.faIcon,s=e.action,i=e.url,o=n?"btn "+n:"btn";return i&&!s?a.a.createElement("a",{className:o,href:i,target:"_blank"},r&&a.a.createElement("i",{className:r})," ",t):a.a.createElement("a",{className:o,onClick:s},r&&a.a.createElement("i",{className:r})," ",t)},i=function(e){var t=e.label,n=void 0===t?"Google Drive":t,r=e.action;return a.a.createElement(s,{label:n,faIcon:"fab fa-google-drive",action:r})}},function(e,t,n){"use strict";n.d(t,"e",function(){return u}),n.d(t,"b",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"f",function(){return p}),n.d(t,"d",function(){return f}),n.d(t,"c",function(){return h});var r,a,s,i,o=n(1),c=n(2),l=n(18);function u(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function d(e){return m([e],e.tasks)}function m(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function p(e){return Object(c.k)([function(e){var t={};return Object(c.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(c.a)(r||(r=o.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(c.a)(a||(a=o.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(c.a)(s||(s=o.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(c.a)(i||(i=o.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function f(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}function h(e){return e.responsibleTeachers.map(function(e){return{name:e.name,email:Object(l.d)(e),access:e.access||"edit"}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return c});var r=n(1),a=n(15),s=n(74),i=n(7),o=function(){function e(){var e,t;this._initialized=!1;var n=function(e){Object.defineProperty(a,e,{get:function(){return this._initialized||this.init(),this._features[e]},set:function(e){throw new Error("Feature flags cannot be set here")}})},a=this;try{for(var i=r.h(Object.keys(s)),o=i.next();!o.done;o=i.next()){n(o.value)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}}return e.prototype.init=function(){var e,t;if(!this._initialized){var n=(i.a.KED_FEATURES||"").split(",").map(function(e){return e.trim().toLowerCase()}),o=Object(a.b)(location.search,{toLower:!0});o.testversion&&(n=["*"]),o.features&&(n=o.features.split(",").map(function(e){return e.trim().toLowerCase()}));var c=n.includes("*");this._features={};try{for(var l=r.h(Object.keys(s)),u=l.next();!u.done;u=l.next()){var d=u.value;this._features[d]=c||n.includes(d.toLowerCase())}}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}this._initialized=!0}},e}(),c=new o},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(e){function t(){return e.call(this,{discoveryDocs:"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"})||this}return r.c(t,e),t.prototype.getFile=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,gapi.client.drive.files.get({fileId:e,supportsAllDrives:!0,fields:"id,name,mimeType,webViewLink,iconLink,modifiedTime,thumbnailLink"}).then(function(e){if(e.result.name){var t=e.result;return{fileId:t.id,url:t.webViewLink,mimeType:t.mimeType,name:t.name,modiifiedTime:t.modifiedTime,iconUrl:t.iconLink,thumbnailUrl:t.thumbnailLink}}return null})]}})})},t.prototype.updatePermissions=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),console.log("updating permissions"),[4,this.ensureInited()];case 1:return t.sent(),gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"reader",type:"anyone",supportsAllDrives:!0}).then(function(e){return console.log(e)}),[3,3];case 2:return t.sent(),console.log("unable to update permissions"),[3,3];case 3:return[2]}})})},t.prototype.createFolder=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return console.log("Creating folder "+e),[4,this.ensureInited()];case 1:return n.sent(),[2,gapi.client.drive.files.create({name:e,mimeType:"application/vnd.google-apps.folder",parents:[t]}).then(function(e){return e.result})]}})})},t.prototype.getIdForFolderPath=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,c,l,u;return r.d(this,function(d){switch(d.label){case 0:return console.log("Getting id for "+e.join("/")),[4,this.ensureInited()];case 1:d.sent(),t="root",d.label=2;case 2:d.trys.push([2,9,10,11]),n=r.h(e),a=n.next(),d.label=3;case 3:return a.done?[3,8]:(s=a.value,[4,this.getIdForFolder(s,t)]);case 4:return(i=d.sent())?(t=i,[3,7]):[3,5];case 5:return[4,this.createFolder(s,t)];case 6:o=d.sent(),t=o.id,d.label=7;case 7:return a=n.next(),[3,3];case 8:return[3,11];case 9:return c=d.sent(),l={error:c},[3,11];case 10:try{a&&!a.done&&(u=n.return)&&u.call(n)}finally{if(l)throw l.error}return[7];case 11:return[2,t]}})})},t.prototype.getIdForFolder=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return console.log("Getting id for "+e),[4,this.ensureInited()];case 1:return n.sent(),[2,gapi.client.drive.files.list({corpora:"user",q:"'"+t+"' in parents and mimeType = 'application/vnd.google-apps.folder' and name = '"+e+"'"}).then(function(e){return!!e.result.files.length&&e.result.files[0].id})]}})})},t.prototype.copyFile=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return console.log("Copying file: "+e.name),[4,this.ensureInited()];case 1:return n.sent(),t?[4,this.getIdForFolderPath(t)]:[3,3];case 2:return n.sent(),[3,4];case 3:"root",n.label=4;case 4:return[2,gapi.client.drive.files.copy({fileId:e.id,supportsAllDrives:!0,parents:[parent],name:e.name,fields:"id,name,mimeType,webViewLink,iconLink,modifiedTime,thumbnailLink"}).then(function(e){return e.result})]}})})},t.prototype.handInFile=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return console.log("handing in file"),[4,this.ensureInited()];case 1:return n.sent(),t=gapi.client.newBatch(),[4,a.forEach(function(n){t.add(gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"writer",type:"user",emailAddress:n}))})];case 2:return n.sent(),t.then(function(e){return console.log(e)}),[2]}})})},t.prototype.reclaimFile=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return[2]})})},t.prototype.returnFile=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return[2]})})},t.prototype.updateUrkundProperties=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return[2]})})},t.prototype.downloadFile=function(e){var t=e.file,n=e.limitSize,a=e.mimeType;return r.b(this,void 0,void 0,function(){var e,s,i=this;return r.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:return r.sent(),e=a||"application/pdf",t.canExport?[2,new Promise(function(n,r){gapi.client.drive.files.export({fileId:t.fileId,mimeType:e}).then(function(r){for(var a=r.body.length,s=new Uint8Array(new ArrayBuffer(a)),i=0;i<a;i++)s[i]=r.body.charCodeAt(i);var o=new Blob([s],{type:e}),c=t.name+".pdf";n(new File([o],c,{type:e,lastModified:t.modifiedTime}))})})]:(s=function(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET","https://www.googleapis.com/drive/v3/files/"+e.fileId+"?alt=media",!0),r.setRequestHeader("Authorization","Bearer "+i.token),r.responseType="blob",r.onload=function(){t(new File([r.response],e.name,{type:e.mimeType,lastModified:e.modifiedTime}))},r.send()})},[2,new Promise(function(e,r){void 0!==n?gapi.client.drive.files.get({fileId:t.fileId,fields:"size"}).then(function(e){Number(e.result.size)>1024*n*1024&&r("GooglePickerError: Fildsize is too laarge")}).then(function(){s(t).then(function(t){e(t)})}):s(t).then(function(t){e(t)})})])}})})},t}(n(82).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.left,n=e.right,a=e.rightWidth;return r.createElement("div",{className:"sv-row sv-layout"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},r.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},r.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},r.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-"+(12-a)},t),r.createElement("div",{className:"sv-layout sv-column-"+a},n))))))}},function(e,t,n){"use strict";n.d(t,"b",function(){return r}),n.d(t,"a",function(){return a});var r="421572262269-u68v5lf5o8ss5t68l8gkq3pfarh6dbkv.apps.googleusercontent.com",a="https://docs.google.com/document/d/1V7exG6vN83Sq8kb6uz1B6DaZDVO9eLcJbP7XF0vL4dY/export?format=txt"},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("img",{style:{border:0,margin:0,padding:0},className:"ellipsis-loader"})}},function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"a",function(){return i});var r=n(0),a=n.n(r),s=function(e){var t=e.state,n=e.label,r=e.onChange;return a.a.createElement("label",{className:"ui-checkbox"},n,a.a.createElement("input",{type:"checkbox",defaultChecked:"checked"==t,onChange:r}),a.a.createElement("span",{className:"custom-element"}))},i=function(e){var t=e.state,n=e.label,r=e.onChange,s=void 0===r?function(){return null}:r;return a.a.createElement("label",{className:"ui-addbox"},n,a.a.createElement("input",{type:"checkbox",defaultChecked:"checked"==t,onChange:s}),a.a.createElement("span",{className:"custom-element"}))}},function(e){e.exports=JSON.parse('{"picker":"Integrate coursebuilder and subjectplanner with Google Picker","ksTutorComment":"Integrate KSTermplanner with tutor comments","kgTutorComment":"Integrate KSTermplanner  with tutor comments","termplannerCharts":"Integrate KSTermplanner with progress charts","weekplannerCharts":"Integrate Weekplanner with progress charts","teacherRights":"Activate course builder teacher rights","studyGroups":"Add study groups and google classroom functionality","cbCollapseBoxes":"Course Builder: Collapse modules by default","ksAssignments":"KS show hand-in assignments","markPartialKRs":"Activate mark partial knowledge requirments functionality"}')},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(19),i=n(14),o=n(102);function c(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var l=n(6),u=n.n(l),d=n(24),m=n(7),p=n(8),f=n(16),h=n(4),b=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,i=t.progressData,l=t.displayProgress,m=!!this.props.openCourses[n],f=(new d.a,this.context.intl),b="gymnasium"===(""+h.b.currentUser.schoolType).toLowerCase()||h.b.currentUser.roles.includes("EMPLOYEE");return a.createElement(s.a,{title:a.createElement("h5",null,n||(b?a.createElement(p.a,{id:"userTasks.gymnasiumSchoolGoals",defaultMessage:"Övriga uppgifter"}):a.createElement(p.a,{id:"userTasks.primarySchoolGoals",defaultMessage:"Egna lärandemål"}))),headerOpen:m,className:n&&Object(o.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)},displayProgress:l,progressData:i},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"}," ",a.createElement("a",{className:"trash",href:"#",title:f.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lärandemålet och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=c(t),s=u()(t.deadline).startOf("day")<u()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:g(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:v(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:u()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",b?a.createElement(p.a,{id:"weekplanner.learningGoalGymnasium",defaultMessage:"Uppgift"}):a.createElement(p.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmål"}))),a.createElement("br",null))}))},t.contextType=f.a,t}(a.Component);function g(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(i.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function v(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(i.f)(m.b.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var k=n(5),E=n(2);var y=n(77),w=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave,r="gymnasium"===(""+h.b.currentUser.schoolType).toLowerCase()||h.b.currentUser.roles.includes("EMPLOYEE");return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(p.a,{id:"weekplanner.addLearningGoalGymnasiumSchoolTitle",defaultMessage:"Lägg till rubrik"}):a.createElement(p.a,{id:"weekplanner.addLearningGoalPrimarySchoolTitle",defaultMessage:"Lägg till eget lärandemål"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},r?a.createElement(p.a,{id:"weekplanner.addLearningGoalGymnasiumSchool",defaultMessage:"Rubrik"}):a.createElement(p.a,{id:"weekplanner.addLearningGoalPrimarySchool",defaultMessage:"Mål"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(p.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),T=n(27),O=n(52),N=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=this.props,o=(i.isTask,i.onSave),c=this.context.intl,l="gymnasium"===(""+h.b.currentUser.schoolType).toLowerCase()||h.b.currentUser.roles.includes("EMPLOYEE");return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,l?a.createElement(p.a,{id:"customTask.addWorkGoalGymnasiumSchoolTitle",defaultMessage:"Lägg till uppgift"}):a.createElement(p.a,{id:"customTask.addWorkGoalPrimarySchoolTitle",defaultMessage:"Lägg till eget arbetsmål"})),a.createElement("hr",null),a.createElement(T.a,{label:c.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:c.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(O.a,{rows:7,label:c.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:c.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(T.a,{label:c.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return o(n,r,s)}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),j=n(108),S=(n(98),n(38)),C=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,i=s.name,o=s.description,c=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:i,description:o,url:c}):r.a({},t)}))});else{var l={id:Object(k.h)(),name:i,description:o,url:c};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(l)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(p.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(p.a,{id:"addeditsubtask.addSubtask",defaultMessage:"Lägg till underuppgift"})),a.createElement("hr",null),a.createElement(T.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(O.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(p.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),I=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(C,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(C,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=t.deadline,o=t.subTasks,l=t.showCalendar,d=t.userTask,m=d.id,f=(d.courseName,this.props),h=f.onUpdate,b=f.onDelete,g=this.isModified(),v="customTask"===c(d),k=u()(d.deadline)<u()(),E=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,v?a.createElement(p.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmål"}):a.createElement(p.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(T.a,{autoFocus:!0,label:v?E.formatMessage({id:"task.targetNameLabel",defaultMessage:"Arbetsmålets namn"}):E.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:v?E.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du göra?"}):E.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),v&&a.createElement(a.Fragment,null,a.createElement(O.a,{rows:5,label:E.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:E.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(T.a,{label:E.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(S.a,{label:E.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},i||l?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(j.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",nextMonthButtonLabel:"",previousMonthButtonLabel:"",showWeekNumbers:!0,selected:i&&u()(i).toDate(),autoFocus:l,dateFormat:"yyyy-MM-dd",className:k?"expired":void 0,locale:E.locale,popperPlacement:v?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&u()(t).format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:E.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(p.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(S.a,{label:E.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},o&&o.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"task.addSubtask",defaultMessage:"Lägg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){g?h(function(e){e.name=n,e.description=r,e.url=s,e.deadline=i}):e.props.closeDialog()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(p.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){b(m)}},v?a.createElement(p.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmål"}):a.createElement(p.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den här uppgiften"})))))},t.contextType=f.a,t}(a.Component),D=n(13),x=n(103),R=n(44),L=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.backgroundColor,r=e.progressColor,s=Math.round(t);return a.createElement("svg",{className:"progress-chart",width:"100%",height:"25"},a.createElement("rect",{fill:n,width:"100%",height:"100%",rx:"4"}),a.createElement("rect",{className:"fill",fill:r,width:s+"%",height:"100%",rx:"4"}),a.createElement("text",{className:"filled-text",textAnchor:"middle",x:"50%",y:"50%",dy:".3em"},s+"%"))},t.defaultProps={percentage:0,backgroundColor:"#F1F5F4",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return M});var M=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new x.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){var e=Object(R.d)(u()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.nextWeek=function(){var e=Object(R.c)(u()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(w,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"Lärandemålet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(N,{isTask:!e,onSave:function(a,s,i){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,i)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(I,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet får inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(C,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(k.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var i;return r.d(this,function(r){switch(r.label){case 0:return i=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(k.h)(),dateTime:i+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,c,l;return r.d(this,function(d){switch(d.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:d.sent(),d.label=2;case 2:return d.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=u()(n).add(-1,"week"),s=Object(R.b)(a),i=Object(R.a)(a.year(),s),[4,this.props.env.kedBackendClient.list("usertasks",{from:i.notBefore,to:i.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return o=(o=d.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),[n].concat(t.map(function(e){return e.dateTime})),c=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),l=o.sort(Object(E.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:c+=1e3});return t.id=Object(k.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(l)];case 4:return d.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.getHeaderTitle=function(){return a.createElement("h4",null,a.createElement(p.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"}))},t.prototype.render=function(){var e=this,t=u()(this.state.weekDate).week(),n=d.b.weekplannerCharts,i=u()().week(),o=function(e){var t,n,a,s,i=[],o=Object(E.b)(e,function(e){return e.courseName||""});try{for(var c=r.h(Object.keys(o).sort().filter(function(e){return e}).concat(o[""]?[""]:[])),l=c.next();!l.done;l=c.next()){var u=l.value,d=o[u]||o[""],m=Object(E.b)(d,function(e){return e.learningGoal}),p=[];try{for(var f=(a=void 0,r.h(Object.keys(m))),h=f.next();!h.done;h=f.next()){var b=h.value,g=m[b].sort(Object(E.g)("dateTime")),v=g.filter(function(e){return null==e.name})[0],k=v&&v.url;p.push({name:b,allTasks:g,url:k,step:g.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:g.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{h&&!h.done&&(s=f.return)&&s.call(f)}finally{if(a)throw a.error}}i.push({courseName:u,learningGoals:p})}}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=c.return)&&n.call(c)}finally{if(t)throw t.error}}return i}(this.state.userTasks),c=this.state,l=c.dialogs,m=c.weekTextsUT,f=c.strategy,g=c.assessment,v=c.isLoading,k=c.isCopyingTasks,w=m&&("adding"===m.$meta||"updating"===m.$meta),T=!!m&&f!==m.weekTexts.strategy,O=!!m&&g!==m.weekTexts.assessment,N=!w&&(T||O),j="gymnasium"===(""+h.b.currentUser.schoolType).toLowerCase()||h.b.currentUser.roles.includes("EMPLOYEE"),S=function(e){var t={completedTasks:0,totalNumberOfTasks:0,subjectData:{}};return e.forEach(function(e){return e.learningGoals.forEach(function(n){var r=n.tasks.filter(function(e){return e.done}).length,a=t.subjectData[e.courseName];a||(a=t.subjectData[e.courseName]={completedNumberOfTasks:0,numberOfTasks:0}),a.completedNumberOfTasks+=r,a.numberOfTasks+=n.tasks.length,t.completedTasks+=r,t.totalNumberOfTasks+=n.tasks.length})}),t}(o),C=S.totalNumberOfTasks>0?S.completedTasks/S.totalNumberOfTasks*100:0;return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===i?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!w&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},n&&S.totalNumberOfTasks>0&&this.getHeaderTitle(),a.createElement("div",{className:"widgets"},n&&S.totalNumberOfTasks>0?a.createElement("div",{className:"progressBar"},a.createElement(L,{percentage:C})):this.getHeaderTitle(),a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"})))))),o.length>0&&a.createElement("hr",null),o.map(function(t){return a.createElement(b,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)},displayProgress:n,progressData:S.subjectData[t.courseName]}))}),a.createElement("hr",null),v?a.createElement(D.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),j?a.createElement(p.a,{id:"weekplanner.learningGoalGymnasium",defaultMessage:"Uppgift"}):a.createElement(p.a,{id:"weekplanner.learningGoalPrimary",defaultMessage:"Eget lärandemål"})),a.createElement("div",{className:"btn",style:k?{opacity:.5}:void 0,onClick:function(t){return!k&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara från föregående vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(p.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & Utvärdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska göra för att lära mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:f&&f.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.evaluation",defaultMessage:"Utvärdering"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:g&&g.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:N?{}:{opacity:.5},onClick:function(){return!w&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),N?a.createElement(p.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(p.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(y.a,{dialogs:l,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=f.a,t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(1),a=n(0),s=n(43),i=n(47),o=n(12),c=n.n(o),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&c()(Object(i.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return c()("body").attr("aria-disabled",n.length>0),c()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,o){var l;return a.createElement("div",{key:o},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){l=t,o===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":o<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||c()(Object(i.findDOMNode)(l)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(i.findDOMNode)(l);e.preventDefault(),c()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(4),i=n(6),o=n.n(i),c=n(5),l=n(39),u=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}var m=n(16),p=n(73);n.d(t,"a",function(){return f});var f=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){l.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){l.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),i={id:Object(c.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new c.b("email",s.a.currentUser.mail,"S"),new c.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(i.deadline=e.task.deadline),e.task?(i.task=[e.task],e.course?i.course=[e.course]:e.courseInfo&&(i.courseInfo=e.courseInfo)):i.siteVisionPageId=e.id,e.step&&(i.step=e.step),[4,Promise.all([l.b.setWeekPlannerBoxOpen(e.courseName,!0),l.b.insert([i])])]);case 1:return r.sent(),[3,4];case 2:return[4,l.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.context.intl,n=this.props.learningTasks,s=Object(u.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),i=this.state.confirmations,c=o()(this.state.weekDate).week(),l=o()().week(),m=c===l?"":c===l+1?t.formatMessage({id:"taskList.nextWeekTask",defaultMessage:"för nästa vecka (v{week})"},{week:c}):c===l-1?t.formatMessage({id:"taskList.lastWeekTask",defaultMessage:"för förra veckan (v{week})"},{week:c}):t.formatMessage({id:"taskList.currentWeekTask",defaultMessage:"för vecka {week}"},{week:c});return a.createElement("div",{className:"taskContainer"},n.map(function(n,o){var u=n.id,f=s[u]||{$meta:"deleted"},h="adding"===f.$meta||"deleting"===f.$meta,b="deleted"!==f.$meta&&"deleting"!==f.$meta,g=b?t.formatMessage({id:"taskList.removeTaskFromWeeklyPlanning",defaultMessage:"Ta bort uppgiften från egen veckoplanering {week}"},{week:m}):t.formatMessage({id:"taskList.addTaskToWeeklyPlanning",defaultMessage:"Lägg till uppgiften i egen veckoplanering {week}"},{week:m}),v=i.some(function(e){return u===e});return a.createElement("div",{key:o},a.createElement(p.a,{state:b?"checked":"",onClick:function(){return h||c!==l?v?e.setState({confirmations:i.filter(function(e){return e!==u})}):e.setState({confirmations:r.g(i).concat(u)}):e.toggleTask(n)},label:a.createElement("a",{title:g,href:n.url},n.name)}),a.createElement(d,{visible:v,text:g,onConfirm:function(){e.toggleTask(n),e.setState({confirmations:i.filter(function(e){return e!==u})})},onCancel:function(){e.setState({confirmations:i.filter(function(e){return e!==u})})}}))}))},t.contextType=m.a,t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(19),i=n(2),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,o=t.markedIds,c=t.markMode,l=t.migratedIds,u=t.uncoveredIds,d=Object(i.b)(n,function(e){return e.group||"default"}),m=Object.keys(d);return a.createElement(s.a,{title:a.createElement("p",null,r),className:"larger"},m.map(function(t){return a.createElement(a.Fragment,{key:t},1===m.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=o.some(function(e){return e===t.id}),r=l&&!!l[t.id],s=u&&u[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return c&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(c?" selectable":"")+(n?" markedGreen":s?" markedRed":"")+(r?" migrated":""),title:r?c?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(4),s=function(){function e(e){var t=e.discoveryDocs;this.googleTokenProvider=a.b.googleTokenProvider,this.discoveryDocs=[],this.discoveryDocs.push(t)}return e.prototype.setBearerProvider=function(e){this.googleTokenProvider=e},e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:t.sent(),t.label=2;case 2:return!this.tokenExpiration||this.tokenExpiration<new Date?[4,this.googleTokenProvider.getBearer()]:[3,4];case 3:e=t.sent(),this.tokenExpiration=new Date(e.expires),this.token=e.token,gapi.client.setToken({access_token:e.token}),t.label=4;case 4:return[4,gapi.client.init({discoveryDocs:this.discoveryDocs})];case 5:return t.sent(),[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e){if("undefined"!=typeof gapi)return e();var t=document.createElement("script");t.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(t),window.gaapi_loaded=e})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(104),s=n(69),i={"google-apps":"application/vnd.google-apps.document,application/vnd.google-apps.presentation,application/vnd.google-apps.spreadsheet",pdf:"application/pdf"},o=function(e){function t(t){var n=e.call(this,{scopes:["https://www.googleapis.com/auth/drive"]})||this;return n.options={upload:!1,multiple:!1,limitType:!1},Object.assign(n.options,t),n.drive=new s.a,n}return r.c(t,e),t.prototype.show=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,new Promise(function(t,n){var r=(new google.picker.PickerBuilder).enableFeature(google.picker.Feature.SUPPORT_DRIVES).enableFeature(google.picker.Feature.SUPPORT_TEAM_DRIVES).addView((new google.picker.DocsView).setOwnedByMe(!0).setIncludeFolders(!0)).addView((new google.picker.DocsView).setIncludeFolders(!0).setEnableTeamDrives(!0)).setLocale("sv").setSize(1051,650).setOAuthToken(e.authToken).setCallback(function(r){if(r.action==google.picker.Action.CANCEL)n();else if(r.action==google.picker.Action.PICKED){var a=[];r.docs.map(function(t){var n=t.id,r=t.mimeType,s=t.name,i=t.modifiedTime,o=t.iconUrl,c=t.url,l=r.includes("google-apps");a.push({fileId:n,mimeType:r,name:s,modifiedTime:i,canExport:l,iconUrl:o,url:c}),e.drive.updatePermissions(n)}),t(a)}});if(e.options.upload&&r.addView((new google.picker.DocsUploadView).setIncludeFolders(!0)),e.options.multiple&&r.enableFeature(google.picker.Feature.MULTISELECT_ENABLED),e.options.limitType){var a=i[e.options.limitType];console.log(a),r.setSelectableMimeTypes(a)}e.picker=r.build(),e.picker.setVisible(!0)})]}})})},t.prototype.close=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return this.picker.dispose(),[2]})})},t}(a.a)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(4),a=n(14);function s(e){return e?Object(a.e)(r.a.currentUser,e)||r.a.currentUser.roles.includes("ADMIN"):r.a.currentUser.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e})}},,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var t=n(7);t.b.ENVIRONMENT="test",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,n(130))},function(e,t,n){"use strict";n(96);var r=n(1),a=n(15),s=n(21),i=n(5),o=n(7),c=n(4),l=n(14),u=n(2),d=["https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.profile.emails","https://www.googleapis.com/auth/classroom.rosters","https://www.googleapis.com/auth/classroom.coursework.students"],m=["https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.coursework.me"];function p(e,t,n){var s=Object(a.b)(t),i=Object(u.e)(s,l.a),o=r.f(Object(a.c)(e),2),c=o[0],d=o[1],m=Object(a.b)(d);return c+Object(a.a)(r.a({},m,i,{scopes:n.join(",")}))}function f(e,t){return e+"/"+t}function h(e,t,n){return new i.e(s.c,s.d,e+t.mail+location.search,o.b.KED_CLIENT_ID,o.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var b,g,v=c.a.currentUser&&c.a.currentUser.mail;if(v)if(o.b.KED_TOKEN_PATH){var k=p(o.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);c.a.bearerProvider=(g=f(b=k,v),new s.b(b,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){c.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,g),{token:t.token,expires:Date.now()+354e4}},g)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(c.a.currentUser=JSON.parse(t))}(f(k,v));var E=["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"].concat(c.a.currentUser.roles.includes("EMPLOYEE")?d:m),y=p(o.b.KED_TOKEN_PATH,location.search,E);c.a.googleTokenProvider=function(e,t){var n=f(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(y,v)}else{if(!(o.b.KED_TOKEN_URL&&o.b.KED_CLIENT_ID&&o.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");c.a.bearerProvider=h(o.b.KED_TOKEN_URL,c.a.currentUser,["kedbackend","EDS"]);E=["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"].concat(c.a.currentUser.roles.includes("EMPLOYEE")?d:m);c.a.googleTokenProvider=h(o.b.KED_TOKEN_URL+"/google",c.a.currentUser,E)}c.a.kedBackendClient=new s.a(o.b.KED_API_URL,c.a.bearerProvider);var w=n(45);c.a.edsClient=new w.b(s.c,o.b.EDS_API_URL,c.a.bearerProvider,function(){return c.a.currentUser.mail})},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(6),a=n.n(r),s=n(7);"sv"===s.b.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var i=function(){return a.a.apply(this,arguments).locale(s.b.KED_LOCALE)}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(9),i=n(43),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>1&&(n=n.slice(1)),{infos:[e]})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),s.c.writer.onError(this._dbWriterError),s.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),s.c.writer.off(this._dbWriterError),s.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,s=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!s}).map(function(t){var n=t.message,r=t.details,s=t.retryable,o=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(i.a,{onClick:function(){return e.removeError(n)}})),r||s?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},o?"Dölj detailer":"Visa detailjer")," "):void 0,o?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),s?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){s.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Outdent",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Indent",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");if(e){var t=document.getSelection(),n=document.createElement("a");n.href=e,n.target="_blank",n.appendChild(document.createTextNode(t.toString())),Object(r.a)("insertHTML",n.outerHTML)}}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt(this.promptMsg);e&&Object(r.a)("insertImage",e)}}}},function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(4),s=n(71),i=function(){function e(e){var t,n=e.scopes,a=void 0===n?[]:n;this.scopes=["https://www.googleapis.com/auth/userinfo.email","https://www.googleapis.com/auth/userinfo.profile"],(t=this.scopes).push.apply(t,r.g(a))}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:n.sent(),n.label=2;case 2:return e=this.scopes.join(" "),[4,new Promise(function(n,r){gapi.load("client:auth2",function(){var i=!1;return gapi.auth2.authorize({client_id:s.b,scope:e,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"none"},function(o){if(console.table(o),o.error)i=!0;else{var c=new Set(o.scope.split(" "));t.scopes.filter(function(e){return!c.has(e)}).length>0?(console.log("missing scopes"),i=!0):(t.authToken=o.access_token,n())}return i?(console.log("reauthorize"),gapi.auth2.authorize({client_id:s.b,scope:e,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"consent"},function(e){console.table(e),e.error?r("Google Web Client: No access token"):(t.authToken=e.access_token,n())})):o.expires_in<500?gapi.auth2.authorize({client_id:s.b,scope:e,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"none"},function(e){t.authToken=e.access_token,n()}):void 0})})})];case 3:return n.sent(),"undefined"!=typeof google&&void 0!==google.picker?[3,5]:[4,new Promise(function(e){gapi.load("picker",function(){e()})})];case 4:n.sent(),n.label=5;case 5:return void 0!==gapi.client&&void 0!==gapi.client.classroom?[3,7]:[4,new Promise(function(e){gapi.client.load("classroom","v1",function(){e()})})];case 6:n.sent(),n.label=7;case 7:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e}()},,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2);function i(e){return e.split(".").filter(function(e){return e})}function o(e){return e.map(function(e){return e.trim()})||[]}function c(e,t){var n=i(e);return t&&t.length===n.length}function l(e,t,n,r){var a=e.name,s=i(e.name),l=t&&o(t),d=n&&u(n,e.id),m=c(e.name,l);return s.forEach(function(e){var t=e.trim(),n=e+".";l&&l.includes(t)&&!m?a=a.replace(n,"<span class=markedGreen>"+n+"</span>"):d&&d.includes(t)?a=a.replace(n,"<span>"+n+"</span>"):!m&&d&&d.length>0&&(a=a.replace(n,"<span class=markedRed>"+n+"</span>"))}),a}function u(e,t){var n=[];return e.forEach(function(e){var a=Object.assign([],Object.keys(e).filter(function(e){return e==t}).map(function(t){return e[t].map(function(e){return e.trim()})}));n.push.apply(n,r.g(a))}),Object(s.k)(n)}function d(e,t){var n=[];return(n=e.map(function(e,t){return{ind:t,val:e}}).filter(function(e){return t.includes(e.val)}))?n.sort(function(e,t){return e.ind>t.ind?1:-1}).map(function(e){return e.val}):[]}function m(e,t){return e?t?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0}n.d(t,"a",function(){return f});var p,f=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.getKnowledgeSentencesContent=function(e,t,n,r,s){var c=this,l=this.props,p=l.coveredPartialRequirments,f=l.markMode,h=i(e.name),b=t&&o(t),g=p&&u(p,e.id);return a.createElement("td",{key:n,title:m(s,f)},h.map(function(n,s){var i=n.trim(),o=b&&b.includes(i)||r&&!b,l=!g.includes(i);return a.createElement("span",{key:s,dangerouslySetInnerHTML:{__html:n?n+".":""},className:"selectable"+(o?" markedGreen":l?" markedRed":""),onClick:function(){var a=t?Object.assign([],t):[],s=b&&b.includes(i);!r||b&&0!=b.length?(s?a=t.filter(function(e){return e!=n}):a.push(n),c.props.onUpdatePartialKnowledge(e.id,d(h,a))):(a=h.filter(function(e){return e!=n}),c.props.onUpdatePartialKnowledge(e.id,d(h,a)))}})}))},t.prototype.onRequirementChanged=function(e,t,n,r){this.props.onUpdatePartialKnowledge?t&&!n||r?this.props.onUpdatePartialKnowledge(e.id,[]):this.props.onUpdatePartialKnowledge(e.id,i(e.name)):this.props.onMarkChanged(e.id,!t)},t.prototype.render=function(){for(var e=this,t=this.props,n=t.knowledgeRequirements,d=t.markedIds,f=t.migratedIds,h=t.explainedRequirements,b=t.markBySentenceView,g=t.markPartialFeatureEnabled,v=this.props,k=v.idsToMarkNotOk,E=v.markMode,y=v.onExplainedRequirementsChanged,w=v.partialRequirments,T=v.coveredPartialRequirments,O=["E","C","A"],N=[],j=n.slice(),S=null;!(S=O.map(function(e){var t=j.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=j[t];return j.splice(t,1),n})).every(function(e){return null===e});)N.push(S);return a.createElement("table",{className:"knowledge-matrix"},a.createElement("thead",null,a.createElement("tr",null,O.map(function(e){return a.createElement("th",{key:e},e)}))),a.createElement("tbody",null,N.map(function(t,n){return a.createElement(a.Fragment,{key:n},a.createElement("tr",null,t.map(function(t,n){var r=t&&d&&d.indexOf(t.id)>=0,s=(t&&k&&k[t.id],t&&f&&!!f[t.id]),p=t&&w&&w[t.id],h=p&&o(p),v=t&&c(t.name,h),y=t&&function(e,t){for(var n=i(e.name),r=!1,a=0;a<n.length;a++){var s=n[a].trim(),o=t&&u(t,e.id);if(o&&o.includes(s)){r=!0;break}}return r}(t,T),O=!(h&&h.length>0||y);return t&&b&&g?e.getKnowledgeSentencesContent(t,p,n,r,s):a.createElement("td",{key:n,dangerouslySetInnerHTML:{__html:t?p&&p.length||y?l(t,p,T):t.name:""},className:(E?"selectable":"")+(s?" migrated":"")+(!r||p&&!v?O?" markedRed":"":" markedGreen"),onClick:E&&t?function(){return e.onRequirementChanged(t,r,h,v)}:void 0,title:m(s,E)})})),h&&a.createElement("tr",null,t.map(function(e,t){var n=e&&w&&w[e.id]&&o(w[e.id]),i=e&&d&&d.indexOf(e.id)>=0||n&&n.length>0;return a.createElement("td",{key:t},i?a.createElement("textarea",{placeholder:Object(s.a)(p||(p=r.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!E,value:e&&h[e.id]||"",onChange:e&&y&&function(t){return y(e.id,t.target.value)}}):void 0)})))})))},t}(a.Component)},,,,function(e,t,n){"use strict";n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var r,a=n(1),s=n(0),i=n(121),o=n(32),c=n(25),l=n(72),u=n(14),d=n(2),m=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.dragState=new o.a({tabBeingDragged:"",tabBeingHovered:"",insertBefore:!1,originClientX:-1}),t}return a.c(t,e),t.prototype.render=function(){var e=this,t=this.props.lazyProps;return s.createElement("div",{className:"sv-row sv-layout sv-skip-spacer",style:{overflow:"visible"}},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},s.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},s.createElement(c.a,{noError:!0},t.map(function(e){var t=e.backgroundImage;return t&&s.createElement("style",null,"\n              .pageHeader {\n                background-image: url('"+t+"') !important;\n              }\n            ")})),s.createElement("div",{className:"pageHeader"},s.createElement("a",null,s.createElement("h1",null,s.createElement(c.a,{noError:!0},t.map(function(e){return s.createElement(s.Fragment,null,e.title)})))),s.createElement(c.a,{noError:!0},t.map(function(e){var t=e.cornerBox;return t&&s.createElement("div",{className:"pageHeaderCornerBox"},t)})),s.createElement("div",{className:"buttonsField"},s.createElement("div",{className:"buttonsContainer"},s.createElement(c.a,{spinner:s.createElement(l.a,null)},t.map(function(t){var n=t.tabs,o=t.buttons,l=t.activeTab,m=t.blocks,p=t.sortableTabs,f=t.onTabDrop;return s.createElement(s.Fragment,null,m?s.createElement("div",{className:"align-horizontal"},m.map(function(e){return s.createElement("div",{key:e.id,className:"horizontalItem top"},s.createElement("div",{className:"align-vertical"},s.createElement("div",null,s.createElement("a",null,e.name)),s.createElement("div",null,s.createElement("div",{className:"btn-group"},e.steps.map(function(e){return s.createElement(s.Fragment,{key:e.stepNo},s.createElement(i.a,{to:e.link,className:"btn btn-small step-button"+(e.isActive?" activePage":"")},e.stepNo),s.createElement("a",null))})))))})):null,s.createElement("div",{className:"horizontalMenu"},s.createElement(c.a,null,e.dragState.map(function(t){var c=t.tabBeingDragged,m=t.tabBeingHovered,h=t.insertBefore,b=t.originClientX;return s.createElement("ul",{className:p?"sortable":null,onDrop:f?function(t){m&&c&&f(c,m,h?"before":"after"),e.dragState.dispatch(a.a({},e.dragState.value,{tabBeingHovered:"",tabBeingDragged:""}))}:null},n.map(function(t,n){var o=t.name,f=t.key,g=t.link,v=t.onClick,k=t.draggable,E=l===f||"$"===l&&0===n,y=e.dragState;return o=o||Object(d.a)(r||(r=a.e(["(Namnlös flik)"],["(Namnlös flik)"]))),s.createElement(s.Fragment,{key:f},h&&m===f?s.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,s.createElement("li",{className:[E?"activePage":"",f===c?"drag-source":"",p&&k?"draggable":""].filter(function(e){return e}).join(" "),draggable:p&&k,onDragStart:p&&k?function(e){e.dataTransfer.effectAllowed="move",y.dispatch(a.a({},y.value,{originClientX:e.clientX,tabBeingDragged:f}))}:null,onDragOver:p?function(e){c!==f?c&&(e.preventDefault(),e.dataTransfer.dropEffect="move",y.dispatch(a.a({},y.value,{tabBeingHovered:f,insertBefore:b>e.clientX}))):y.dispatch(a.a({},y.value,{tabBeingHovered:""}))}:null,onDragEnd:function(t){e.dragState.dispatch(a.a({},y.value,{tabBeingHovered:"",tabBeingDragged:""}))}},g?g.startsWith(":")?s.createElement("a",{href:Object(u.f)(g.substr(1),{})},o):s.createElement(i.a,{to:g},o):v?s.createElement("a",{onClick:v},o):o),h||m!==f?null:s.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}),o&&o.map(function(e,t){return s.createElement("li",{className:"action-tab",key:"btn"+t},e)}))}))))}))))))))},t}(s.Component),p=function(e){return s.createElement(m,{lazyProps:new o.a(e)})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.abilities,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.centralContent,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(19),i=n(2),o=function(e){var t=e.title,n=e.className,o=e.headerOpen,l=e.idsToSubjectMap,u=e.requirements;if(!l)return a.createElement(s.a,{title:a.createElement("p",null,t),className:n,headerOpen:o},a.createElement(c,r.a({},r.a({},e))));var d=l?Object(i.b)(u,function(e){return l[e.id]||""}):{"":u},m=Object.keys(d).map(function(e){return{subject:e,requirements:d[e]}});return a.createElement(s.a,{title:a.createElement("p",null,t),className:n,headerOpen:o},m.map(function(t){var n=t.subject,s=t.requirements;return a.createElement(c,r.a({},r.a({},e,{key:n,heading:n,requirements:s})))}))},c=function(e){for(var t=e.requirements,n=e.includedIds,r=e.explainedRequirements,s=e.partialRequirments,i=e.heading,o=["E","C","A"],c=[],l=t.slice(),u=null;!(u=o.map(function(e){var t=l.findIndex(function(t){return t.gradeStep.toUpperCase()===e});if(t<0)return null;var r=l[t];return l.splice(t,1),n?n[r.id]?r:void 0:r})).every(function(e){return null===e});)u.every(function(e){return!e})||c.push(u);return a.createElement(a.Fragment,null,i&&a.createElement("h4",null,i),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,o.map(function(e){return a.createElement("th",{key:e},e)}))),a.createElement("tbody",null,c.map(function(e,t){return a.createElement(a.Fragment,{key:t},a.createElement("tr",{key:t},e.map(function(e,t){var n=e&&s&&s[e.id];return a.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:n?n.join("."):e?e.name:""}})})),r&&a.createElement("tr",null,e.map(function(e,t){return a.createElement("td",{key:t,className:"explained-requirement"},a.createElement("div",null,e&&r[e.id]||""))})))}))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n.n(r),s=function(e){var t=e.available,n=e.selected,r=e.onChange;return a.a.createElement("div",{className:"taskContainer"},t.map(function(e){var t=e.key,s=e.name,i=n.includes(t);return a.a.createElement("div",{key:t,className:"align-horizontal"},a.a.createElement("div",{className:"horizontalItem top",onClick:function(){return r(i?n.filter(function(e){return e!=t}):n.concat(t),t,i)}},a.a.createElement("div",{className:"checkBox"+(i?" checked":"")})),a.a.createElement("div",{className:"horizontalItem top"},s))}))}},,function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"a",function(){return i});var r=n(2),a=n(50);function s(e){return Object(a.a)(e.tasks,e.taskOrder,{appendLeftovers:!0})}function i(e,t,n,s,i,o){(void 0===o?{appendLeftovers:!1}:o).appendLeftovers;var c=Object(a.a)(e,t,{appendLeftovers:!0}).map(function(e){return e.id}),l="before"===i;return Object(r.k)(c.filter(function(e){return e!==n.id}).map(function(e){return e!==s.id?e:l?[n.id,e]:[e,n.id]}))}},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(9),s=n(4);function i(e){var t=e.school,n=e.draftRepo,i=e.course;return r.b(this,void 0,void 0,function(){var e,o;return r.d(this,function(r){switch(r.label){case 0:return"standard"!==t?[3,1]:(n.merge(),e=a.c,[3,3]);case 1:return[4,a.c.schools.name(t).single().map(function(e){return e.officialBranchId}).load()];case 2:o=r.sent(),n.merge(o),e=a.c.branch(o),r.label=3;case 3:return e.courseInstances.update(i,{modifiedDate:Date.now(),modifiedBy:{name:s.a.currentUser.displayName,url:"mailto:"+s.a.currentUser.mail}}),[2]}})})}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n.n(a);function i(e){var t=e.taskMetas,n=e.renderEditLink,i=e.renderLink,o=e.onSort,c=r.f(Object(a.useState)({taskBeingDragged:null,taskBeingHovered:null,insertBefore:!1,originClientY:-1}),2),l=c[0],u=c[1],d=l.taskBeingDragged,m=l.taskBeingHovered,p=l.insertBefore,f=l.originClientY;return s.a.createElement("div",{className:"taskContainer sortable",onDrop:function(e){m&&d&&o(d,m,p?"before":"after"),u(r.a({},l,{taskBeingHovered:null,taskBeingDragged:null}))}},t.map(function(e){var t=e.task,a=e.isTaskOwner,o=function(e){return e.migratedTexts&&Object.keys(e.migratedTexts).some(function(t){return Object.keys(e.migratedTexts[t]).length>0})}(t),c=t.id;return s.a.createElement(s.a.Fragment,{key:c},p&&m===t?s.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,s.a.createElement("div",{className:["align-horizontal","draggable",t===d&&"drag-source"].filter(function(e){return e}).join(" "),draggable:!0,onDragStart:function(e){e.dataTransfer.effectAllowed="move",u(r.a({},l,{originClientY:e.clientY,taskBeingDragged:t}))},onDragOver:function(e){d&&(d!==t?(e.preventDefault(),e.dataTransfer.dropEffect="move",u(r.a({},l,{taskBeingHovered:t,insertBefore:f>e.clientY}))):u(r.a({},l,{taskBeingHovered:null})))},onDragEnd:function(e){u(r.a({},l,{taskBeingHovered:null,taskBeingDragged:null}))}},a&&o&&s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("div",{style:{position:"relative",top:"0.2em",left:"-0.7em"}},s.a.createElement("i",{className:"fa fa-pagelines",style:{position:"absolute",top:0,left:0,color:"#49c35a"}}))),s.a.createElement("div",{className:"horizontalItem top"},n(e)),s.a.createElement("div",{className:"horizontalItem top"},i(e))),p||m!==t?null:s.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r,a=n(1),s=n(0),i=n(2),o=n(18),c=n(95),l=n.n(c),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state=n.props.resource||{name:"",url:""},n}return a.c(t,e),t.prototype.save=function(){var e=this.state;if(!l.a.isUri(e.url))throw new Error(Object(i.a)(r||(r=a.e(["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"],["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"])),e.url));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.onSave,a=t.onDelete,i=this.state,c=l.a.isUri(this.state.url);return s.createElement("div",null,s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("h2",null,n),s.createElement("hr",null),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Namn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:!0,tabIndex:1,size:50,value:i.name,onChange:function(t){return e.setState({name:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Länk:"),s.createElement("div",{className:"horizontalItem top "},s.createElement("input",{type:"text",tabIndex:1,size:50,value:i.url,onChange:function(t){return e.setState({url:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("br",null)),s.createElement("div",{className:"sv-html-portlet sv-portlet"},(i.createdDate||i.modifiedDate)&&s.createElement("div",null,i.createdDate&&s.createElement("p",null,"Resursen/Länken skapades ",Object(o.c)(i.createdDate)," av ",s.createElement("strong",null,i.createdBy.name),"."),i.modifiedDate&&s.createElement("p",null,"Resursen/Länken redigerades senast ",Object(o.c)(i.modifiedDate)," av ",s.createElement("strong",null,i.modifiedBy.name),"."),s.createElement("br",null),s.createElement("br",null)),a&&s.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return a()}},"Ta bort resurs/länk"),s.createElement("a",{tabIndex:1,className:"btn btn-large"+(c?"":" btn-inactive"),onClick:c&&function(){return r(i)}},"Spara")))},t}(s.Component)},,,,,function(e,t){},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(9);function a(){return r.c.courseInstances.hasEdgesFrom([r.d])}},,,,,function(e,t,n){var r={"./en-SG":85,"./en-SG.js":85,"./en-au":86,"./en-au.js":86,"./en-ca":87,"./en-ca.js":87,"./en-gb":88,"./en-gb.js":88,"./en-ie":89,"./en-ie.js":89,"./en-il":90,"./en-il.js":90,"./en-nz":91,"./en-nz.js":91,"./sv":92,"./sv.js":92};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=137},function(e,t){},function(e,t){},,,,,,function(e,t,n){"use strict";function r(e){return(e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)})}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(32),s=n(9),i=n(50);function o(e){var t,n=e.map(function(e){return e.startsWith("course:")?e:"course:"+e});return 0===n.length?new a.a([]):(t=s.c.courses.include("abilities","centralContent","knowledgeRequirements")).tags.apply(t,r.g(n)).filter(function(e){return e.isTemplate}).map(function(e){return r.a({},e,{abilities:Object(i.a)(e.abilities,e.abilitiesOrder),centralContent:Object(i.a)(e.centralContent,e.centralContentOrder),knowledgeRequirements:Object(i.a)(e.knowledgeRequirements,e.knowledgeRequirementsOrder)})}).toValue()}},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),s=n(40),i=n(13),o=n(4),c=Object(s.b)(function(){return o.a.kedBackendClient.http.status.combineLatest(o.a.edsClient.http.status).map(function(e){var t=r.f(e,2),n=t[0],s=t[1];return a.createElement("div",{className:"loading-indicator"},a.createElement("div",{className:"indicator"},n.numOutstandingOperations>0||s.numOutstandingOperations>0?a.createElement(i.a,null):void 0))})})},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(19),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.task,n=e.course,i=e.updateLink;if(!t.migratedTexts)return a.createElement(a.Fragment,null," ");var o=t.migratedTexts,c=o.abilities,l=o.centralContent,u=o.knowledgeRequirements,d=Object.keys(u||{}).map(function(e){return r.a({},n.knowledgeRequirements.find(function(t){return t.id===e}),u[e])}),m={title:"Uppdaterat kunskapskrav för betyget A",type:"knowledgeRequirements",items:d.filter(function(e){return"A"===e.gradeStep})},p={title:"Uppdaterat Kunskapskrav för betyget C",type:"knowledgeRequirements",items:d.filter(function(e){return"C"===e.gradeStep})},f={title:"Uppdaterat kunskapskrav för betyget E",type:"knowledgeRequirements",items:d.filter(function(e){return"E"===e.gradeStep})},h={title:"Uppdaterade förmågor",type:"abilities",items:Object.keys(c||{}).map(function(e){return r.a({},n.abilities.find(function(t){return t.id===e}),c[e])})},b=[m,p,f,{title:"Uppdaterat centralt innehåll",type:"centralContent",items:Object.keys(l||{}).map(function(e){return r.a({},n.centralContent.find(function(t){return t.id==e}),l[e])})},h].filter(function(e){return e.items.length>0});return 0===b.length?a.createElement(a.Fragment,null," "):a.createElement(s.a,{className:"larger",title:a.createElement("div",null,a.createElement("div",{className:"warningFlag"},a.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),a.createElement("p",null,"Uppdaterade formuleringar från Skolverket"))},b.map(function(e){var t=e.title,n=(e.type,e.items);return a.createElement("div",{key:t},a.createElement("h5",null,t),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{width:"40%"}},"Ursprunglig formulering"),a.createElement("th",{style:{width:"40%"}},"Skolverkets nya formulering"),a.createElement("th",null,"Täcker uppgiften den nya formuleringen?"))),a.createElement("tbody",null,n.map(function(e){return a.createElement("tr",{key:e.id},a.createElement("td",{dangerouslySetInnerHTML:{__html:e.oldText}}),a.createElement("td",{dangerouslySetInnerHTML:{__html:e.name}}),a.createElement("td",null,a.createElement("button",{onClick:function(){return i(e.id,!0)}},"Ja - behåll kopplingen"),a.createElement("button",{onClick:function(){return i(e.id,!1)}},"Nej - ta bort kopplingen")))}))))}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=["Lära att lära","Samarbeta","Agera globalt","Visa handlingskraft","Vara innovativ","Leva digitalt"]},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(1),a=n(12),s=n.n(a),i=n(7),o=3e5,c=i.a.KED_KEEP_ALIVE_URL,l=Date.now();function u(){setInterval(m,o),setTimeout(function(){return s()("body").mousemove(d).keypress(d).scroll(d)},100)}function d(){l=Date.now()}function m(){Date.now()-l<o&&function(){r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:console.log("Sending heartbeat request to "+c),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,fetch(c,{cache:"no-cache",credentials:"same-origin"})];case 2:return e=n.sent(),console.log("Response from "+c+": "+e.status+" "+e.statusText),[3,4];case 3:return t=n.sent(),console.warn("Request to "+c+" failed: "+t),[3,4];case 4:return[2]}})})}()}},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(4),i=n(2),o=n(6),c=n.n(o),l=n(5),u=n(14),d=n(84),m=n(83),p=n(66),f=n(24),h=n(69),b=n(51),g=n(13),v=n(55),k=n(56),E=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.loading,n=e.files,r=e.usersNotHandedInDocs,i=e.taskDeadline,o=e.teacherAtThisSchool,l=e.refreshAssignment,u=e.sendToUrkund,d=e.deleteAssignment,m=n.some(function(e){return e.user===s.a.currentUser.mail});return t?a.createElement(g.a,{label:"Laddar inlämnade filer..."}):0!==n.length||r?o?function(e,t,n,r,s,i,o){return a.createElement(a.Fragment,null,e.length>0&&a.createElement(a.Fragment,null,f.b.studyGroups&&a.createElement("p",null,"Uploaded assignments"),a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Elev"),a.createElement("th",null,"Filnamn"),a.createElement("th",null,"Inlämnat den"),a.createElement("th",null,"Rapport"),a.createElement("th",null,"Nivå"),t&&a.createElement("th",null))),a.createElement("tbody",null,e.map(function(e){return a.createElement("tr",{key:e.mediaLink,style:e.metadata.$meta?{opacity:.5}:{}},a.createElement(a.Fragment,null,a.createElement("td",null,a.createElement("a",{href:"mailto:"+e.user},e.metadata.userDisplayName||e.user)),a.createElement("td",null,e.metadata.driveFileId?a.createElement(v.a,{thumbnail:e.metadata.driveFileIconUrl,title:e.filename.substr(0,e.filename.lastIndexOf(".")),url:e.metadata.driveFileUrl}):a.createElement(v.a,{customAction:function(t){t.preventDefault(),t.stopPropagation(),Object(k.b)(e)},title:e.filename})),a.createElement("td",{className:"assignment-date-col"},c()(e.uploadDate).format("YYYY-MM-DD HH:mm")),"add"===e.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(g.a,{label:"Laddar upp..."})):"delete"===e.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(g.a,null)," Tar bort..."):Object(k.c)(e,s,i)),t&&y(e,o))})))),a.createElement("br",null),n&&n.length>0&&function(e,t){return a.createElement(a.Fragment,null,f.b.studyGroups&&a.createElement("p",null,"Not handed in assignments"),a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Elev"),a.createElement("th",null,"Task deadline"))),a.createElement("tbody",null,e.map(function(e){return a.createElement("tr",{key:e.displayName,style:{opacity:.5}},a.createElement("td",null,a.createElement("a",{href:"mailto:"+e.email},e.displayName)),a.createElement("td",null," ",t," "))}))),a.createElement("br",null))}(n,r))}(n,m,r,i,l,u,d):function(e,t,n){return a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Filnamn"),a.createElement("th",null,"Inlämnat den"),t&&a.createElement("th",null))),a.createElement("tbody",null,e.map(function(e){return a.createElement("tr",{key:e.mediaLink,style:e.metadata.$meta?{opacity:.5}:{}},a.createElement("td",null,e.metadata.driveFileId?a.createElement(v.a,{thumbnail:e.metadata.driveFileIconUrl,title:e.filename.substr(0,e.filename.lastIndexOf(".")),url:e.metadata.driveFileUrl}):a.createElement(v.a,{customAction:function(t){t.preventDefault(),t.stopPropagation(),Object(k.b)(e)},title:e.filename})),a.createElement("td",{className:"assignment-date-col"},"add"===e.metadata.$meta?a.createElement(g.a,{label:"Laddar upp..."}):"delete"===e.metadata.$meta?a.createElement(g.a,{label:"Tar bort..."}):c()(e.uploadDate).format("YYYY-MM-DD HH:mm")),t&&y(e,n))})))}(n,m,d):o?a.createElement("p",null,"Ingen elev har lämnat in något arbete ännu."):null},t}(a.Component);function y(e,t){return a.createElement("td",null,!e.metadata.$meta&&e.user===s.a.currentUser.mail&&a.createElement("a",{href:"#",onClick:function(n){n.stopPropagation(),n.preventDefault(),confirm("Radera inlämnad fil "+e.filename+"?")&&t(e.mediaLink)}},a.createElement("i",{className:"fa fa-trash"})))}var w=n(19);n.d(t,"a",function(){return N});var T=[".pdf",".odt",".docx",".doc",".cad",".wav",".mp3",".mpeg4",".mp4",".zip",".png",".jpg",".jpeg",".gif",".txt",".html"],O=[".pdf",".odt",".docx",".doc",".txt",".html"],N=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assignments:[],loading:!0},n}return r.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,t,r)})},t.prototype.componentDidMount=function(){this.load()},t.prototype.componentWillReceiveProps=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return n.trys.push([0,4,,5]),e.taskId===this.props.taskId&&e.courseId===this.props.courseId?[3,3]:[4,this.setStatePromised(function(){return{assignments:[],loading:!0}})];case 1:return n.sent(),[4,this.load()];case 2:n.sent(),n.label=3;case 3:return[3,5];case 4:return t=n.sent(),Object(i.n)(t),[3,5];case 5:return[2]}})})},t.prototype.refreshAssignment=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,c,u,d,m,p,f,h;return r.d(this,function(b){switch(b.label){case 0:return t=s.a.kedBackendClient.http,n=this.props,a=n.courseId,i=n.taskId,o=n.school,c=e.user,u=e.filename,[4,this.setState(function(t){var n=t.assignments;return{assignments:Object(k.d)(n,r.a({},e,{isRefreshing:!0}))}})];case 1:b.sent(),b.label=2;case 2:return b.trys.push([2,8,,10]),[4,t.get("assignments/urkund/"+o+"/"+a+"/"+i+"/"+c+"/"+u)];case 3:return(d=b.sent()).status>=400?(m=l.c.bind,p=[void 0,d.status],[4,d.text()]):[3,5];case 4:throw new(m.apply(l.c,p.concat([b.sent()])));case 5:return[4,d.text()];case 6:return f=b.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:Object(k.d)(n,r.a({},e,{isRefreshing:!1,metadata:r.a({},e.metadata,{urkundResponse:f})}))}})];case 7:return b.sent(),[3,10];case 8:return h=b.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:Object(k.d)(n,r.a({},e,{isRefreshing:!1,refreshError:h}))}})];case 9:return b.sent(),[3,10];case 10:return[2]}})})},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,i,o,d,m,p,f,h,b,g,v,k,E,y,w,T;return r.d(this,function(O){switch(O.label){case 0:return O.trys.push([0,13,,14]),e=s.a.kedBackendClient.http,t=this.props,n=t.courseId,a=t.taskId,i=t.school,o=t.sendToUrkund,[4,(d=Object(u.e)(s.a.currentUser,i))?e.get("assignments/"+i+"/"+n+"/"+a):e.get("assignments/"+i+"/"+n+"/"+a+"/"+s.a.currentUser.mail)];case 1:return 200===(m=O.sent()).status?[3,3]:(p=l.c.bind,f=[void 0,m.status],[4,m.text()]);case 2:throw new(p.apply(l.c,f.concat([O.sent()])));case 3:return[4,m.json()];case 4:if(h=O.sent(),this.setState({error:null,loading:!1,assignments:h}),!d||!o)return[3,12];b=h.filter(function(e){return e.metadata&&e.metadata.urkundExternalId&&e.metadata.urkundExternalId.length>0&&!e.metadata.urkundUploadError&&(!e.metadata.urkundLastPoll||["Accepted","Submitted"].indexOf(JSON.parse(e.metadata.urkundResponse)[0].Status.State)>=0&&parseInt(e.metadata.urkundLastPoll)<c()().add(-15,"seconds").toDate().getTime())}),O.label=5;case 5:O.trys.push([5,10,11,12]),g=r.h(b),v=g.next(),O.label=6;case 6:return v.done?[3,9]:(k=v.value,[4,this.refreshAssignment(k)]);case 7:O.sent(),O.label=8;case 8:return v=g.next(),[3,6];case 9:return[3,12];case 10:return E=O.sent(),w={error:E},[3,12];case 11:try{v&&!v.done&&(T=g.return)&&T.call(g)}finally{if(w)throw w.error}return[7];case 12:return[3,14];case 13:return y=O.sent(),this.setState({loading:!1,error:"Kunde inte ladda inlämningsuppgifter",assignments:[]}),console.error(y),[3,14];case 14:return[2]}})})},t.prototype.onDrag=function(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"},t.prototype.verifyAndUpload=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),e?this.state.assignments.some(function(t){return t.user===s.a.currentUser.mail&&t.filename===e.name})&&!confirm("Ersätta befintlig fil ("+e.name+")?")?[2]:this.props.school.toLowerCase()===s.a.currentUser.school.toLowerCase()||confirm("Uppgiften tillhör en annan skola ("+this.props.school+").\nVill du ändå lämna in ditt arbete här?")?(this.setState({uploadingFile:e}),[4,this.upload(e,t)]):[2]:[2];case 1:return r.sent(),[4,this.load()];case 2:return r.sent(),this.setState({uploadingFile:null}),[3,4];case 3:return n=r.sent(),this.setState({error:"Kunde inte ladda upp filen. "+(n.message||n),uploadingFile:null}),console.error(n),[3,4];case 4:return[2]}})})},t.prototype.upload=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,o,c,u,d,m,p,f,h,b;return r.d(this,function(g){switch(g.label){case 0:if(s.a.kedBackendClient.http,n=this.props,a=n.courseId,i=n.taskId,o=n.school,c=n.sendToUrkund,u=s.a.currentUser.mail,O.indexOf("."+e.name.split(".").reverse()[0].toLowerCase())>=0){if(e.size>52428800)throw new Error("Filer av denna typ får inte vara större än 50 MB")}else if(e.size>104857600)throw new Error("Filen får inte vara större än 100 MB");if(d=e.name.toLowerCase(),!T.some(function(e){return d.endsWith(e)}))throw new Error("Filens ändelse måste vara "+T.join(" / "));return(m=new FormData).append("files",e),p={userDisplayName:s.a.currentUser.displayName,verifyWithUrkund:c},t&&(p=r.a({},p,{driveFileId:t.fileId,driveFileUrl:t.url,driveFileIconUrl:t.iconUrl})),[4,s.a.kedBackendClient.http.fetch("assignments/"+o+"/"+a+"/"+i+"/"+u,"put",{},p,{body:m})];case 1:return 200===(f=g.sent()).status?[3,3]:(h=l.c.bind,b=[void 0,f.status],[4,f.text()]);case 2:throw new(h.apply(l.c,b.concat([g.sent()])));case 3:return[2]}})})},t.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(o){switch(o.label){case 0:return o.trys.push([0,6,,7]),[4,this.setStatePromised(function(t){return{assignments:t.assignments.map(function(t){return t.mediaLink===e?r.a({},t,{metadata:r.a({},t.metadata,{$meta:"delete"})}):r.a({},t)})}})];case 1:return o.sent(),[4,s.a.kedBackendClient.http.fetch(e,"delete",{})];case 2:return(t=o.sent()).status>=400?(n=l.c.bind,a=[void 0,t.status],[4,t.text()]):[3,4];case 3:throw new(n.apply(l.c,a.concat([o.sent()])));case 4:return[4,this.load()];case 5:return o.sent(),[3,7];case 6:return i=o.sent(),this.setState({error:"Kunde inte ta bort filen. "+(i.message||i)}),console.error(i),[3,7];case 7:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.courseId,o=t.taskId,c=t.school,l=t.courseStudyGroups,g=t.taskDeadline,v=this.state,k=v.loading,y=v.assignments,T=v.error,O=v.uploadingFile,N=Object(u.e)(s.a.currentUser,c);console.log(N);var j=r.g(y),S=f.b.picker;if(O){var C={school:c,courseId:n,taskId:o,filename:O.name,size:O.size,user:s.a.currentUser.mail,contentType:O.type,uploadDate:Date.now(),mediaLink:"assignments/"+c+"/"+n+"/"+o+"/"+s.a.currentUser.mail+"/"+O.name,metadata:{$meta:"add",userDisplayName:s.a.currentUser.displayName}};j=j.filter(function(e){return e.mediaLink!==C.mediaLink}),j=r.g(j,[C])}j=j.map(function(e){var t=r.f((e.metadata.userDisplayName||e.user).split(" ")),n=t[0],a=t.slice(1);return r.a({},e,{firstName:n,lastName:a.join(" ")})}).sort(Object(i.h)(["lastName","firstName","filename","uploadDate"],["sv","en"],{sensitivity:"base"}));var I={},D=l&&l.length>0&&f.b.studyGroups&&N;return l&&Object.keys(b.c).filter(function(e){return l&&l.includes(e)}).forEach(function(e){var t=j.filter(function(t){return b.c[e].find(function(e){return e.studentEmailAddress==t.user})}),n=b.c[e].filter(function(e){return!t.find(function(t){return t.user===e.studentEmailAddress})}).map(function(e){return{displayName:e.studentFirstName+" "+e.studentLastName,email:e.studentEmailAddress}});n=n.map(function(e){var t=r.f(e.displayName.split(" ")),n=t[0],a=t.slice(1);return r.a({},e,{firstName:n,lastName:a.join(" ")})}).sort(Object(i.h)(["lastName","firstName"])),I[e]={assignments:t,notSubmittedUsers:n}}),a.createElement("div",{className:"stopFloats",onDragOver:function(t){return e.onDrag(t)},onDrop:function(t){t.stopPropagation(),t.preventDefault(),e.verifyAndUpload(t.dataTransfer.files[0])}},T?a.createElement(a.Fragment,null,a.createElement("p",{className:"error"},T)):void 0,D?Object.keys(I).map(function(t){return a.createElement(w.a,{headerOpen:!1,title:t,key:t},a.createElement(E,{loading:k,files:I[t].assignments,usersNotHandedInDocs:I[t].notSubmittedUsers,school:c,refreshAssignment:e.refreshAssignment.bind(e),deleteAssignment:e.delete.bind(e),taskDeadline:g,teacherAtThisSchool:!0,sendToUrkund:!0}))}):a.createElement(E,{loading:k,files:j,school:c,refreshAssignment:this.refreshAssignment.bind(this),deleteAssignment:this.delete.bind(this),teacherAtThisSchool:!0,sendToUrkund:!0}),Object(d.a)()?void 0:a.createElement(a.Fragment,null,a.createElement("div",{className:"drop-zone task-assignment-drop-zone"},"Droppa ditt färdiga arbete här.",a.createElement("br",null),"Det går också bra att använda bläddra-knappen nedan."),a.createElement("input",{type:"file",onChange:function(t){return e.verifyAndUpload(t.target.files[0])}}),S&&a.createElement(p.b,{label:"Hämta från Google Drive",action:function(){var t=new m.a({upload:!0}),n=new h.a;t.show().then(function(t){var r=t[0];r&&n.downloadFile({file:r,mimeType:"text/plain",limitSize:100}).then(function(t){return e.verifyAndUpload(t,r)})})}})))},t}(a.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n.n(a),i=n(313),o=n(312),c=n(314),l=n(99),u=n(110),d=n(147),m=n(40),p=n(9),f=n(32),h=n(2),b=n(7),g=n(14),v=n(5),k=n(236),E=n(4);function y(){return Object(g.d)(E.a.currentUser,"standard")}var w,T,O,N,j,S,C,I,D,x,R,L,M,_,A,P,U,F,G,B,q,K,V,H,z,W,Y,$,J,Z,Q,X,ee,te,ne,re,ae,se,ie=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editingName:!1,name:""},n}return r.c(t,e),t.prototype.createTab=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,c,l,u,d,m;return r.d(this,function(p){switch(p.label){case 0:return this.setState({editingName:!1,name:""}),t=this.props,n=t.type,a=t.branch,s=t.draftId,i=t.course,o=t.school,c=t.history,l=t.block,u=t.stepNo,d={id:Object(v.h)(),tabTitle:e,name:e,order:Date.now(),locked:!!y(),acl:["role:USER:R","schoolRole:"+o+"/EMPLOYEE:S"]},"step-course-tab"===(m="theme-course-tab"===n?r.a({type:"theme-course-tab",tabClass:"content-tab",tags:[this.props.course.id]},d):r.a({type:"step-course-tab",tabClass:"content-tab",tags:r.g(l.tags)},d,{stepNo:u})).type?a.courseBlocks.addRelated(l.id,"tabs",m):a.courseInstances.addRelated(i.id,"tabs",m),[4,a.saveNow()];case 1:return p.sent(),c.push("/"+o+"/courses/"+i.id+"/tabs/"+m.id+"/drafts/"+s+"/edit"),[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=(t.school,t.course,t.branch,this.state),s=n.editingName,i=n.name;return a.createElement(a.Fragment,null,a.createElement("a",{onClick:s?null:function(t){return e.setState({editingName:!0,name:""})}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),s?a.createElement("input",{type:"text",style:{color:"black"},autoFocus:!0,placeholder:Object(h.a)(T||(T=r.e(["Fliknamn"],["Fliknamn"]))),value:i,size:30,onChange:function(t){return e.setState({name:t.target.value})},onKeyPress:function(t){"Enter"===t.key&&e.createTab(i)},onBlur:function(){return e.setState({editingName:!1})}}):" "+Object(h.a)(w||(w=r.e(["Ny flik"],["Ny flik"])))))},t}(a.Component),oe=Object(k.a)(ie),ce={"rich-text":Object(h.a)(O||(O=r.e(["Textruta"],["Textruta"]))),"youtube-movie":Object(h.a)(N||(N=r.e(["Youtube film"],["Youtube film"]))),"learning-goals":Object(h.a)(j||(j=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"]))),"resource-list":Object(h.a)(S||(S=r.e(["Resurslista"],["Resurslista"]))),"embedded-html":Object(h.a)(C||(C=r.e(["Inbäddad HTML"],["Inbäddad HTML"]))),"word-bank":Object(h.a)(I||(I=r.e(["Ordbank"],["Ordbank"])))},le={"rich-text":Object(h.a)(D||(D=r.e(["Lägg till text"],["Lägg till text"]))),"youtube-movie":Object(h.a)(x||(x=r.e(["Lägg till youtube film"],["Lägg till youtube film"]))),"learning-goals":Object(h.a)(R||(R=r.e(["Lägg till lärandemål och uppgifter"],["Lägg till lärandemål och uppgifter"]))),"resource-list":Object(h.a)(L||(L=r.e(["Lägg till resurslista"],["Lägg till resurslista"]))),"embedded-html":Object(h.a)(M||(M=r.e(["Lägg till inbäddad HTML"],["Lägg till inbäddad HTML"]))),"word-bank":Object(h.a)(_||(_=r.e(["Lägg till ordbank"],["Lägg till ordbank"])))},ue=function(e){function t(t){var n=e.call(this,t)||this;return n.state={open:!1,contentType:"rich-text"},n}return r.c(t,e),t.prototype.createContent=function(){var e=this.props,t=e.tab,n=e.branch,r=e.type,a=this.newContent(r||this.state.contentType);n.courseTabs.addRelated(t.id,"contents",a),this.setState({open:!1})},t.prototype.newContent=function(e){switch(e){case"rich-text":return this.newRichText();case"learning-goals":return this.newLearningGoal();case"embedded-html":return this.newEmbeddedHTML();case"word-bank":return this.newWordBank();case"resource-list":return this.newResourceList();default:throw new Error("Not implemented")}},t.prototype.newWordBank=function(){return{type:"word-bank",tags:[this.props.course.id],id:Object(v.h)(),order:Date.now(),locked:this.props.tab.locked,lockDelete:y(),hidden:!1,selectedWordBank:null}},t.prototype.newRichText=function(){return{type:"rich-text",tags:[this.props.course.id],id:Object(v.h)(),order:Date.now(),locked:this.props.tab.locked,lockDelete:y(),hidden:!1,html:""}},t.prototype.newEmbeddedHTML=function(){return{type:"embedded-html",tags:[this.props.course.id],id:Object(v.h)(),order:Date.now(),locked:this.props.tab.locked,lockDelete:y(),hidden:!1,html:""}},t.prototype.newLearningGoal=function(){return{type:"learning-goals",tags:[this.props.course.id],id:Object(v.h)(),locked:this.props.tab.locked,lockDelete:y(),hidden:!1,hasCommonLearningGoals:"theme-course"===this.props.course.type,commonLearningGoals:[],order:Date.now(),hiddenTasks:[]}},t.prototype.newResourceList=function(){return{type:"resource-list",tags:[this.props.course.id],id:Object(v.h)(),locked:!1,lockDelete:y(),order:Date.now(),hidden:!1,resources:[]}},t.prototype.render=function(){var e=this;return this.state.open?a.createElement("div",null,a.createElement("select",{onChange:function(t){return e.setState({contentType:t.target.value})}},Object.keys(ce).map(function(e){return a.createElement("option",{key:e,value:e},ce[e])})),a.createElement("a",{className:"btn pull-right",onClick:function(){return e.setState({open:!1})}},Object(h.a)(A||(A=r.e(["Avbryt"],["Avbryt"])))),a.createElement("a",{className:"btn btn-default",onClick:function(){return e.createContent()}},Object(h.a)(P||(P=r.e(["Skapa"],["Skapa"]))))):a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){e.props.type?e.createContent():e.setState({open:!0})}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),this.props.type?le[this.props.type]:Object(h.a)(U||(U=r.e(["Lägg till innehåll"],["Lägg till innehåll"]))))," ")},t}(a.Component),de=n(54),me=n(35),pe={"intro-tab":Object(h.a)(F||(F=r.e(["Introduktionsflik"],["Introduktionsflik"]))),"run-up-tab":Object(h.a)(G||(G=r.e(["Upptaktsflik"],["Upptaktsflik"]))),"subject-tab":Object(h.a)(B||(B=r.e(["Ämnesflik"],["Ämnesflik"]))),"mission-tab":Object(h.a)(q||(q=r.e(["Uppdragsflik"],["Uppdragsflik"]))),"content-tab":Object(h.a)(K||(K=r.e(["Generell flik"],["Generell flik"]))),"teacher-tab":Object(h.a)(V||(V=r.e(["Lärarsida"],["Lärarsida"]))),"word-bank-tab":Object(h.a)(H||(H=r.e(["Ordbank"],["Ordbank"])))},fe={"step-course":["content-tab","intro-tab","teacher-tab","word-bank-tab"],"theme-course":["content-tab","run-up-tab","subject-tab","mission-tab","teacher-tab"]},he=n(57),be=n(27),ge=function(e){var t=e.tab,n=e.repo,a=e.course,i=t.subject?t.subject:"theme-course"===a.type&&a.subjects&&a.subjects.length>0?{subjectCode:a.subjects[0].code,subjectName:a.subjects[0].name}:{subjectCode:"",subjectName:""},o=i.subjectCode,c=i.subjectName,l=Object(he.d)(a.tags),u=Object(he.d)(t.tags)[0]||l[0]||null;return s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("p",{className:"box-mini-label"},Object(h.a)(z||(z=r.e(["Inställningar för fliken ",""],["Inställningar för fliken ",""])),t.name||t.tabTitle)),s.a.createElement(de.a,null,s.a.createElement(me.a,null,s.a.createElement("label",{className:"kclabel"},Object(h.a)(W||(W=r.e(["Flikens typ"],["Flikens typ"]))))),s.a.createElement(me.a,null,s.a.createElement("select",{value:t.tabClass,onChange:function(e){return n.courseTabs.update(t,"subject-tab"===e.target.value?{tabClass:e.target.value,subject:{subjectCode:o,subjectName:c},tags:Object(he.a)(t.tags,[o],[u])}:{tabClass:e.target.value})}},fe[a.type].map(function(e){return s.a.createElement("option",{key:e,value:e},pe[e])})))),s.a.createElement(be.a,{label:Object(h.a)(Y||(Y=r.e(["Flikens namn"],["Flikens namn"]))),id:"TabSettings:name",value:t.name||t.tabTitle,onChange:function(e){return n.courseTabs.update(t,{name:e,tabTitle:e})}}))},ve={"rich-text":Object(h.a)($||($=r.e(["Textruta"],["Textruta"]))),"youtube-movie":Object(h.a)(J||(J=r.e(["Youtube film"],["Youtube film"]))),"learning-goals":Object(h.a)(Z||(Z=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"]))),"resource-list":Object(h.a)(Q||(Q=r.e(["Resurslista"],["Resurslista"]))),"embedded-html":Object(h.a)(X||(X=r.e(["Inbäddad HTML"],["Inbäddad HTML"]))),"word-bank":Object(h.a)(ee||(ee=r.e(["Ordbank"],["Ordbank"])))},ke=n(62),Ee=n(58),ye=function(e){var t=e.content,n=e.repo,r=e.editMode,a=e.reportNumChars,i=e.maxChars;return r?s.a.createElement("div",null,s.a.createElement(ke.a,{html:t.html,defaultActions:Ee.a,readOnly:!r||t.locked&&!y(),reportNumChars:a,maxChars:i,actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","outdent","indent","line","link","image"],onChange:r&&function(e){return n.courseContents.update(t,{html:e})}})):s.a.createElement("div",null,s.a.createElement("div",{className:"rich-text-readonly",dangerouslySetInnerHTML:{__html:t.html}}))},we=function(e){var t=e.tab,n=e.content,a=e.repo;return s.a.createElement("div",null,s.a.createElement("h2",null,"mission-tab"!==t.tabClass?Object(h.a)(te||(te=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"]))):Object(h.a)(ne||(ne=r.e(["Uppdrag"],["Uppdrag"])))),y()&&"mission-tab"!==t.tabClass?s.a.createElement(s.a.Fragment,null,s.a.createElement("div",null,s.a.createElement(de.a,null,s.a.createElement(me.a,null,s.a.createElement("input",{type:"checkbox",checked:n.hasCommonLearningGoals,onChange:function(e){return a.courseContents.update(n,{hasCommonLearningGoals:!!e.target.checked})}})),s.a.createElement(me.a,null,s.a.createElement("p",null," ",Object(h.a)(re||(re=r.e(["Specificera gemensamma lärandemål för samtliga uppgifter"],["Specificera gemensamma lärandemål för samtliga uppgifter"]))))))),s.a.createElement("div",null,s.a.createElement("p",null,n.hasCommonLearningGoals?Object(h.a)(ae||(ae=r.e(["Ange de gemensamma lärandemålen. Ange ett lärandemål per rad."],["Ange de gemensamma lärandemålen. Ange ett lärandemål per rad."]))):Object(h.a)(se||(se=r.e(["Ange ett lärandemål per rad."],["Ange ett lärandemål per rad."])))),s.a.createElement("textarea",{className:"learning-goal-box",value:n.commonLearningGoals.join("\n"),onChange:function(e){return a.courseContents.update(n,{commonLearningGoals:e.target.value.split("\n")})}}))):null)},Te=n(78);var Oe,Ne,je,Se,Ce,Ie,De,xe,Re,Le,Me,_e,Ae=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editingName:!1,name:""},n}return r.c(t,e),t.prototype.createTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,c,l,u,d,m,p,f,b;return r.d(this,function(g){switch(g.label){case 0:return this.setState({editingName:!1,name:""}),t=this.props,n=t.branch,a=t.draftId,s=t.course,i=t.tab,o=t.school,c=t.content,l=t.history,u=t.block,d=t.learningGoal,m=function(e,t,n){var a=[e.id];if("mission-tab"===t.tabClass){var s=e.tabs.filter(function(e){return"subject-tab"===e.tabClass}),i=Object(h.j)(s.map(function(e){return e.subject}),function(e){return e.subjectCode}),o=Object(h.j)(Object(h.k)(s.map(function(e){return e.tags.filter(function(e){return e.startsWith("course:")})})));return a.push.apply(a,r.g(i.map(function(e){return"sub:"+e.subjectCode}))),a.push.apply(a,r.g(o)),{tags:a,subject:i.map(function(e){return e.subjectName}).join(", ")}}return a.push.apply(a,r.g((t||n).tags.filter(function(e){return e.startsWith("course:")}))),"theme-course"===e.type?a.push.apply(a,r.g(t.tags.filter(function(e){return e.startsWith("sub:")}))):a.push.apply(a,r.g(n.tags.filter(function(e){return e.startsWith("sub:")}))),{tags:a,subject:"theme-course"===e.type?t.subject.subjectName:e.subject.subjectName}}(s,i,u),p=m.tags,f=m.subject,b={id:Object(v.h)(),tags:p,name:e,acl:["role:USER:R","schoolRole:"+o+"/EMPLOYEE:S"],url:"",taskType:"task",learningGoal:d,futureAbilities:[],resources:[],subject:f},n.courseContents.addRelated(c.id,"tasks",b),[4,n.saveNow()];case 1:return g.sent(),l.push("/"+o+"/courses/"+s.id+"/tabs/"+i.id+"/contents/"+c.id+"/tasks/"+b.id+"/drafts/"+a+"/edit"),[2]}})})},t.prototype.render=function(){var e=this,t=this.state,n=t.editingName,s=t.name;return a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:n?null:function(t){return e.setState({editingName:!0,name:""})}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),n?a.createElement("input",{type:"text",autoFocus:!0,placeholder:Object(h.a)(je||(je=r.e(["Uppgiftens namn"],["Uppgiftens namn"]))),value:s,size:50,onChange:function(t){return e.setState({name:t.target.value})},onKeyPress:function(t){"Enter"===t.key&&e.createTask(s)},onBlur:function(){return e.setState({editingName:!1})}}):" "+(y()?Object(h.a)(Oe||(Oe=r.e(["Lägg till uppgift"],["Lägg till uppgift"]))):Object(h.a)(Ne||(Ne=r.e(["Lägg till egen uppgift"],["Lägg till egen uppgift"]))))))},t}(a.Component),Pe=Object(k.a)(Ae),Ue=n(125),Fe=n(121),Ge=n(116),Be=function(e){var t=e.school,n=e.repo,r=e.content,a=e.draftId,i=e.editMode,o=e.course,c=e.courseTab,l=e.learningGoals,u=e.block,d=Object(Ge.b)(r),m=Object(h.b)(d,function(e){return e.subject||""}),p="step-course"===o.type?o.subject:c.subject;return p&&!m[p.subjectName]&&(m[p.subjectName]=[]),s.a.createElement(s.a.Fragment,null,Object.keys(m).map(function(e){var d=m[e].map(function(n){return{id:n.id,name:n.name,url:i?"#/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/contents/"+r.id+"/tasks/"+n.id+"/drafts/"+a+"/edit":a?"#/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/contents/"+r.id+"/tasks/"+n.id+"/drafts/"+a:"#/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/tasks/"+n.id,courseName:o.name,learningGoal:e,step:"step-course-tab"===c.type?c.stepNo:void 0,task:n,courseInfo:{school:t,course:o.id,tab:c.id}}});function p(e){return"/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/contents/"+r.id+"/tasks/"+e.id+"/drafts/"+a+"/edit"}return s.a.createElement("div",{key:e},s.a.createElement("h5",null,e),s.a.createElement("ul",null,l.map(function(e){return s.a.createElement("li",{key:e},e)})),i?s.a.createElement(s.a.Fragment,null,s.a.createElement(Ue.a,{taskMetas:d.map(function(e){return{task:e.task,isTaskOwner:!0}}),renderEditLink:function(e){var t=e.task;return s.a.createElement(s.a.Fragment,null,s.a.createElement(Fe.a,{to:p(t),className:"editItem"})," ")},renderLink:function(e){var t=e.task;return s.a.createElement(Fe.a,{to:p(t)},t.name)},onSort:function(e,t,a){var s=Object(Ge.a)(r.tasks,r.taskOrder,e,t,a,{appendLeftovers:!0});n.courseContents.update(r,{taskOrder:s})}}),s.a.createElement(Pe,{branch:n,content:r,course:o,school:t,draftId:a,tab:c,block:u,learningGoal:e})):s.a.createElement(Te.a,{learningTasks:d}))}))},qe=function(e){var t=e.school,n=e.repo,a=e.content,i=e.draftId,o=e.editMode,c=e.course,l=e.courseTab,u=e.learningGoals,d=e.block,m=Object(Ge.b)(a),p={},f=u.reduce(function(e,t){return e[t]=m.filter(function(e){if(e.learningGoal&&e.learningGoal.split("\n").map(function(e){return e.trim().toLowerCase()}).includes(t.toLowerCase()))return p[e.id]=!0,!0}),e},{}),b=m.filter(function(e){return!p[e.id]});function g(e){return"/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/contents/"+a.id+"/tasks/"+e.id+"/drafts/"+i+"/edit"}return"mission-tab"===l.tabClass||0===m.length?f[""]=b:b.length>0&&(f[Object(h.a)(Se||(Se=r.e(["Övergripande"],["Övergripande"])))]=b),s.a.createElement(s.a.Fragment,null,Object.keys(f).map(function(e){var u=f[e].map(function(n){return{id:n.id,name:n.name,url:o?"#/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/contents/"+a.id+"/tasks/"+n.id+"/drafts/"+i+"/edit":i?"#/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/contents/"+a.id+"/tasks/"+n.id+"/drafts/"+i:"#/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/tasks/"+n.id,courseName:c.name,learningGoal:"mission-tab"===l.tabClass?Object(h.a)(Ce||(Ce=r.e(["Uppdrag"],["Uppdrag"]))):e,step:"step-course-tab"===l.type?l.stepNo:void 0,task:n,courseInfo:{school:t,course:c.id,tab:l.id}}});return s.a.createElement("div",{key:e},e&&s.a.createElement("h4",null,e),o?s.a.createElement(s.a.Fragment,null,s.a.createElement(Ue.a,{taskMetas:u.map(function(e){return{task:e.task,isTaskOwner:!0}}),renderEditLink:function(e){var t=e.task;return s.a.createElement(s.a.Fragment,null,s.a.createElement(Fe.a,{to:g(t),className:"editItem"})," ")},renderLink:function(e){var t=e.task;return s.a.createElement(Fe.a,{to:g(t)},t.name)},onSort:function(e,t,r){var s=Object(Ge.a)(a.tasks,a.taskOrder,e,t,r,{appendLeftovers:!0});n.courseContents.update(a,{taskOrder:s})}}),s.a.createElement(Pe,{branch:n,content:a,course:c,school:t,draftId:i,tab:l,block:d,learningGoal:e})):s.a.createElement(Te.a,{learningTasks:u}))}))},Ke=function(e){var t=e.content,n=e.editMode,a=e.repo,i=e.course,o=e.school,c=e.draftId,l=e.courseTab,u=e.block,d=t.hasCommonLearningGoals,m=t.commonLearningGoals,p=(t.tasks,m.map(function(e){return e.trim()}).filter(function(e){return!!e}));return s.a.createElement("div",{className:"ked_boxed"},!n||t.locked&&!y()?"mission-tab"!==l.tabClass?s.a.createElement("h2",null,Object(h.a)(Ie||(Ie=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"])))):s.a.createElement("h2",null,Object(h.a)(De||(De=r.e(["Uppdrag"],["Uppdrag"])))):s.a.createElement(we,{course:i,content:t,repo:a,tab:l}),s.a.createElement("hr",null),d&&"mission-tab"!==l.tabClass?s.a.createElement(Be,r.a({},{content:t,editMode:n,repo:a,course:i,school:o,draftId:c,courseTab:l,block:u,learningGoals:p})):s.a.createElement(qe,r.a({},{content:t,editMode:n,repo:a,course:i,school:o,draftId:c,courseTab:l,block:u,learningGoals:p})))},Ve=function(e){var t=e.content,n=e.repo,a=e.editMode,i=e.reportNumChars,o=e.maxChars;return!a||t.locked&&!y()?s.a.createElement("div",{dangerouslySetInnerHTML:{__html:t.html}}):s.a.createElement("div",null,s.a.createElement("h4",null,Object(h.a)(xe||(xe=r.e(["Inbäddat material"],["Inbäddat material"])))),s.a.createElement("p",null,Object(h.a)(Re||(Re=r.e(["Klipp in HTML kod nedan"],["Klipp in HTML kod nedan"])))),s.a.createElement("textarea",{style:{width:"100%",height:"100px"},value:t.html,onChange:function(e){var r=e.target.value;r.length>o||(n.courseContents.update(t,{html:r}),i(r.length))}}))},He=n(206),ze=n.n(He),We=n(120);function Ye(e){var t=e.subjectName,n=e.stepNo,a=e.selectedWordBank,i=e.wordBanksAlreadyAdded,o=e.onChange,c=b.a.KED_ENUM_WORDBANKS_URL+"?sv.contenttype=application/json&subject="+t+"&step="+n,l=ze()(c);return l=l.filter(function(e){var t=e.order;return a&&t===a.key||!i||!i.includes(t)}),s.a.createElement("div",null,s.a.createElement("h3",null,a?a.name:Object(h.a)(Le||(Le=r.e(["Välj ordbank"],["Välj ordbank"])))),s.a.createElement(We.a,{isMulti:!1,placeholder:Object(h.a)(Me||(Me=r.e(["Välj bland ordbanker för ",", steg ",""],["Välj bland ordbanker för ",", steg ",""])),t,n),noOptionsMessage:function(){return Object(h.a)(_e||(_e=r.e(["Kunde inte hitta tillgängliga ordbanker för ",", steg ",""],["Kunde inte hitta tillgängliga ordbanker för ",", steg ",""])),t,n)},options:l.map(function(e){var t=e.name,n=(e.id,e.order);e.url;return{label:t,value:n}}),value:a&&{label:a.name,value:a.key},onChange:function(e){return o({name:e.label,key:e.value})}}))}var $e=n(72);function Je(e){var t=e.repo,n=e.content,i=e.siblingWordBanks,o=e.editMode,c=e.course,l=e.courseTab,u=n.selectedWordBank,d=c.subject.subjectName,m=l.stepNo,p=u&&b.a.KED_WORDBANKS_URL+"?preview=true&subject="+d+"&step="+m+"&list="+u.key,f=r.f(Object(a.useState)(200),2),h=f[0],g=f[1],v=Object(a.useRef)(),k=i.map(function(e){return e.selectedWordBank&&e.selectedWordBank.key}).filter(function(e){return!!e});return Object(a.useEffect)(function(){return g(200)},[u&&u.key]),s.a.createElement(s.a.Fragment,null,o&&(!n.locked||y())&&s.a.createElement(s.a.Suspense,{fallback:s.a.createElement($e.a,null)},s.a.createElement(Ye,r.a({},{subjectName:d,stepNo:m,wordBanksAlreadyAdded:k},{selectedWordBank:u,onChange:function(e){var r=e.name,a=e.key;t.courseContents.update(n,{selectedWordBank:{name:r,key:a}})}}))),u&&s.a.createElement("iframe",{ref:v,scrolling:"no",frameBorder:"0",style:{width:"100%",height:h,padding:0,margin:0},src:p,onLoad:function(){g(v.current.contentWindow.document.body.scrollHeight)}}))}var Ze,Qe,Xe=s.a.createContext({openDialog:null,closeDialog:null}),et=n(126),tt=function(e){var t=e.content,n=e.editMode,i=e.repo,o=t.resources,c=Object(a.useContext)(Xe);return!n||t.locked&&!y()?s.a.createElement("div",null):s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("h4",null,Object(h.a)(Ze||(Ze=r.e(["Resurser"],["Resurser"])))),s.a.createElement("div",{className:"taskContainer"},o.map(function(e,n){return s.a.createElement("div",{className:"align-horizontal",key:n},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("a",{className:"editItem",onClick:function(){return c.openDialog(s.a.createElement(et.a,{title:"Edit resource",resource:e,onSave:function(e){o[n]=e,i.courseContents.update(t,{resources:r.g(o)}),c.closeDialog()},onDelete:function(){o.splice(n,1),i.courseContents.update(t,{resources:r.g(o)}),c.closeDialog()}}))}})," "),s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("div",{className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("a",{target:"_blank",href:e.url},e.name)))))})),s.a.createElement("a",{className:"btn",onClick:function(){return c.openDialog(s.a.createElement(et.a,{title:"Resurs",onSave:function(e){i.courseContents.update(t,{resources:r.g(o,[e])}),c.closeDialog()}}))}},s.a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),Object(h.a)(Qe||(Qe=r.e(["Lägg till resurs"],["Lägg till resurs"])))))};function nt(e){var t=e.repo,n=e.content,a=e.siblingContents,i=e.editMode,o=e.course,c=e.draftId,l=e.school,u=e.courseTab,d=e.reportNumChars,m=e.maxChars,p=e.block;switch(n.type){case"rich-text":return s.a.createElement(ye,r.a({},{repo:t,content:n,editMode:i,reportNumChars:d,maxChars:m}));case"learning-goals":return s.a.createElement(Ke,r.a({},{repo:t,content:n,editMode:i,course:o,draftId:c,courseTab:u,school:l,block:p}));case"resource-list":return s.a.createElement(tt,r.a({},{repo:t,content:n,editMode:i}));case"embedded-html":return s.a.createElement(Ve,r.a({},{repo:t,content:n,editMode:i,reportNumChars:d,maxChars:m}));case"word-bank":return s.a.createElement(Je,r.a({},{repo:t,editMode:i,content:n,siblingWordBanks:a.filter(function(e){return"word-bank"===e.type&&e.id!==n.id}),course:o,courseTab:u}));default:return s.a.createElement("p",null,"Okänd innehållstyp: ",n.type)}}var rt=n(43),at=n(25);function st(e,t,n,r){var a=e.map(function(e,t){return{doc:e,idx:t}}),s=a.filter(function(e){return e.doc.id===t})[0],i=a.filter(function(e){return e.doc.id===n})[0];if(s&&i){var o=i.idx;s.doc.order;return"after"===r?o===e.length-1?Date.now():e[o].order+Math.random()*(e[o+1].order-e[o].order):0===o?Math.round(e[0].order-100-1e4*Math.random()):e[o-1].order+Math.random()*(e[o].order-e[o-1].order)}return 0}var it,ot,ct,lt,ut,dt,mt,pt,ft,ht,bt,gt,vt,kt,Et,yt,wt,Tt,Ot,Nt,jt,St,Ct,It,Dt,xt,Rt,Lt,Mt,_t,At,Pt,Ut,Ft,Gt,Bt,qt,Kt,Vt,Ht,zt,Wt,Yt,$t,Jt,Zt,Qt,Xt,en,tn,nn,rn,an,sn,on,cn,ln,un,dn,mn,pn,fn,hn,bn,gn,vn,kn,En,yn,wn,Tn,On,Nn,jn,Sn,Cn,In,Dn,xn,Rn,Ln,Mn,_n,An,Pn,Un,Fn,Gn,Bn,qn,Kn,Vn,Hn,zn,Wn,Yn,$n,Jn,Zn,Qn,Xn,er,tr,nr,rr,ar,sr,ir,or,cr={MAX_CHARS_IN_CONTENTS:4e3,MAX_CHARS_TASK_NAMES:64,MAX_CHARS_TASK_INTRO_TEXT:200},lr=cr.MAX_CHARS_IN_CONTENTS,ur=function(e){function t(t){var n=e.call(this,t)||this;return n.numCharsObservable=new f.a(0),n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.editMode,n=e.content,a=e.branch,i=e.course,o=e.tab,c=e.school,l=e.draftId,u=e.contentOrderIndex,d=e.contents,m=e.block,p=y(),f=this.numCharsObservable;return!t||n.locked&&!p?s.a.createElement(nt,{key:n.id,repo:a,content:n,siblingContents:d,course:i,editMode:t,courseTab:o,school:c,draftId:l,block:m}):s.a.createElement("div",{key:n.id,className:["course-content-box","learning-goals"!==n.type&&"ked_boxed"].filter(function(e){return!!e}).join(" "),style:{position:"relative"}},s.a.createElement(de.a,null,s.a.createElement(me.a,null,s.a.createElement("p",{className:"box-mini-label"},ve[n.type])),s.a.createElement(me.a,null,p?s.a.createElement(s.a.Fragment,null," ",s.a.createElement("input",{type:"checkbox",checked:!n.locked,onChange:function(e){return a.courseContents.update(n,{locked:!e.target.checked})}}),Object(h.a)(it||(it=r.e(["Tillåt redigering"],["Tillåt redigering"]))),n.locked?null:s.a.createElement(s.a.Fragment,null," ",s.a.createElement("input",{type:"checkbox",checked:!n.lockDelete,onChange:function(e){return a.courseContents.update(n,{lockDelete:!e.target.checked})}}),Object(h.a)(ot||(ot=r.e(["Tillåt dölja rutan"],["Tillåt dölja rutan"]))))):null)),s.a.createElement(nt,{repo:a,content:n,siblingContents:d,course:i,editMode:!0,school:c,draftId:l,courseTab:o,maxChars:lr,reportNumChars:function(e){f.dispatch(e)},block:m}),s.a.createElement("div",{style:{position:"absolute",top:0,right:0}},(p||!n.locked)&&u>0&&s.a.createElement("span",null,s.a.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(){var e=st(d,n.id,d[u-1].id,"before");e&&a.courseContents.update(n,{order:e})}})," "),(p||!n.locked)&&u<d.length-1&&s.a.createElement("span",null,s.a.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(){var e=st(d,n.id,d[u+1].id,"after");e&&a.courseContents.update(n,{order:e})}})," "),p||!n.lockDelete?s.a.createElement(rt.a,{title:"standard"===c?Object(h.a)(ct||(ct=r.e(["Ta bort innehållsrutan"],["Ta bort innehållsrutan"]))):Object(h.a)(lt||(lt=r.e(["Dölj innehållsrutan"],["Dölj innehållsrutan"]))),style:{display:"inline-block"},onClick:function(){return confirm(Object(h.a)(ut||(ut=r.e(["Ta bort innehåll?"],["Ta bort innehåll?"]))))&&a.courseTabs.removeRelated(o.id,"contents",n)}}):null),"rich-text"===n.type?s.a.createElement(at.a,null,f.map(function(e){return s.a.createElement("div",{className:["char-counter-bottom"].concat(e>=lr?"overflowed":[]).join(" ")},Object(h.a)(dt||(dt=r.e(["Texten innehåller "," av max "," tillåtna tecken"],["Texten innehåller "," av max "," tillåtna tecken"])),e,lr))})):void 0)},t}(s.a.Component),dr=n(106),mr=n(145),pr=n(146),fr=n(19),hr=n(79),br=function(e){var t=e.repo,n=e.tab;return s.a.createElement(at.a,null,Object(pr.a)(Object(mr.a)(n.tags)).map(function(e){return 0===e.length?s.a.createElement("p",null,Object(h.a)(mt||(mt=r.e(["Fliken är inte kopplad till något ämne / årskurs"],["Fliken är inte kopplad till något ämne / årskurs"])))):s.a.createElement("div",null,e.map(function(a){var i=a.id,o=a.name,c=a.abilities,l=a.centralContent,u=a.knowledgeRequirements;return s.a.createElement("div",{key:i},1===e.length?void 0:s.a.createElement("h1",null,o),s.a.createElement(fr.a,{className:"larger",title:s.a.createElement("p",null,Object(h.a)(pt||(pt=r.e(["Lås flikens kunskapskrav"],["Lås flikens kunskapskrav"]))))},s.a.createElement("p",null,Object(h.a)(ft||(ft=r.e(["Markera de kunskapskrav som ämnesfliken ska täcka."],["Markera de kunskapskrav som ämnesfliken ska täcka."])))),s.a.createElement(at.a,null,t["knowledge-requirements"].hasEdgesFrom([n.id]).idsOnly().toValue().map(function(e){return s.a.createElement(dr.a,{knowledgeRequirements:u,markedIds:e.map(function(e){return e.id}),idsToMarkNotOk:{},markMode:!0,onMarkChanged:function(r,a){e.filter(function(e){return!u.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){t.courseTabs.removeRelated(n.id,"knowledgeRequirements",e)});var s=u.filter(function(e){return e.id===r})[0];a?t.courseTabs.addRelated(n.id,"knowledgeRequirements",s):t.courseTabs.removeRelated(n.id,"knowledgeRequirements",s)}})}))),s.a.createElement(at.a,null,t.abilities.hasEdgesFrom([n.id]).idsOnly().toValue().map(function(e){return s.a.createElement(hr.a,{options:c,title:Object(h.a)(ht||(ht=r.e(["Lås flikens förmågor"],["Lås flikens förmågor"]))),markedIds:e.map(function(e){return e.id}),markMode:!0,onMarkChanged:function(r,a){e.filter(function(e){return!c.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){t.courseTabs.removeRelated(n.id,"abilities",e)});var s=c.filter(function(e){return e.id===r})[0];a?t.courseTabs.addRelated(n.id,"abilities",s):t.courseTabs.removeRelated(n.id,"abilities",s)}})})),s.a.createElement(at.a,null,t["central-content"].hasEdgesFrom([n.id]).idsOnly().toValue().map(function(e){return s.a.createElement(hr.a,{options:l,title:Object(h.a)(bt||(bt=r.e(["Lås flikens centrala innehåll"],["Lås flikens centrala innehåll"]))),markedIds:e.map(function(e){return e.id}),markMode:!0,onMarkChanged:function(r,a){e.filter(function(e){return!l.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){t.courseTabs.removeRelated(n.id,"centralContent",e)});var s=l.filter(function(e){return e.id===r})[0];a?t.courseTabs.addRelated(n.id,"centralContent",s):t.courseTabs.removeRelated(n.id,"centralContent",s)}})})))}))}))},gr=function(e){var t=e.tab,n=e.repo,a=e.course,i=e.block,o=t.subject?t.subject:"theme-course"===a.type&&a.subjects&&a.subjects.length>0?{subjectCode:a.subjects[0].code,subjectName:a.subjects[0].name}:"step-course"===a.type?{subjectCode:a.subject.subjectCode,subjectName:a.subject.subjectName}:{subjectCode:"",subjectName:""},c=o.subjectCode,l=o.subjectName,u=Object(he.d)(a.tags),d=Object(he.d)(t.tags)[0]||u[0]||null;return s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("p",{className:"box-mini-label"},Object(h.a)(gt||(gt=r.e(["Administrativa Inställningar för fliken ",""],["Administrativa Inställningar för fliken ",""])),t.name||t.tabTitle)),s.a.createElement(de.a,null,s.a.createElement(me.a,null,s.a.createElement("input",{type:"checkbox",checked:t.locked,onChange:function(e){return n.courseTabs.update(t,{locked:!!e.target.checked})}})),s.a.createElement(me.a,null,Object(h.a)(vt||(vt=r.e(["Lås fliken från redigering förutom där det explicit tillåts"],["Lås fliken från redigering förutom där det explicit tillåts"]))))),"step-course"===a.type&&s.a.createElement(s.a.Fragment,null,s.a.createElement("br",null),s.a.createElement(fr.a,{title:Object(h.a)(kt||(kt=r.e(["Avancerat..."],["Avancerat..."])))},s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return e=Object(he.d)(i.tags)[0],[4,m(a,a.subject.subjectName,a.subject.subjectCode,e)];case 1:return t.sent(),[2]}})})}},Object(h.a)(Et||(Et=r.e(["Gör om kopplingen till ämne och årskursspann"],["Gör om kopplingen till ämne och årskursspann"])))))),"theme-course"===a.type&&"subject-tab"===t.tabClass&&!!c&&s.a.createElement(s.a.Fragment,null,s.a.createElement("br",null),a.subjects.length>1&&s.a.createElement(de.a,null,s.a.createElement(me.a,null,s.a.createElement("label",{className:"kclabel"},Object(h.a)(yt||(yt=r.e(["Ämne"],["Ämne"]))))),s.a.createElement(me.a,null,s.a.createElement("select",{value:c,onChange:function(e){return r.b(void 0,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return t=e.target.value,n=a.subjects.filter(function(e){return e.code===t}).map(function(e){return e.name})[0]||t,[4,m(a,n,t,d)];case 1:return r.sent(),[2]}})})}},a.subjects.map(function(e){var t=e.name,n=e.code;return s.a.createElement("option",{key:n,value:n},t)})))),u.length>1&&s.a.createElement(s.a.Fragment,null,s.a.createElement(de.a,null,s.a.createElement(me.a,null,s.a.createElement("label",{className:"kclabel"},Object(h.a)(wt||(wt=r.e(["Välj årskurs"],["Välj årskurs"]))))),s.a.createElement(me.a,null,s.a.createElement("select",{value:d,onChange:function(e){return r.b(void 0,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return t=e.target.value,n=a.subjects.filter(function(e){return e.code===c}).map(function(e){return e.name})[0]||c,[4,m(a,n,c,t)];case 1:return r.sent(),[2]}})})}},u.map(function(e){return s.a.createElement("option",{key:e,value:e},Object(h.a)(Tt||(Tt=r.e(["Årskurs ",""],["Årskurs ",""])),e))})))),s.a.createElement("div",null,s.a.createElement(br,{repo:n,tab:t})),s.a.createElement("br",null),s.a.createElement(fr.a,{title:Object(h.a)(Ot||(Ot=r.e(["Avancerat..."],["Avancerat..."])))},s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,m(a,l,c,d)];case 1:return e.sent(),[2]}})})}},Object(h.a)(Nt||(Nt=r.e(["Gör om kopplingen till ämne och årskursspann"],["Gör om kopplingen till ämne och årskursspann"]))))))));function m(e,a,s,i){return r.b(this,void 0,void 0,function(){var o,c,l,u,d,m,p,f,b;return r.d(this,function(g){switch(g.label){case 0:return o=Object(he.a)(t.tags,[s],[i]),n.courseTabs.update(t,{subject:{subjectCode:s,subjectName:a},tags:o}),[4,n.courseContents.hasEdgesFrom([t.id]).include("tasks").includeIdsAndNamesOnly().toValue().load()];case 1:c=g.sent(),l=Object(h.k)(c.map(function(e){return e.tasks}));try{for(u=r.h(l),d=u.next();!d.done;d=u.next())m=d.value,p=Object(he.a)([e.id],[s],[i]),n.tasks.update(m,{tags:p,subject:a})}catch(e){f={error:e}}finally{try{d&&!d.done&&(b=u.return)&&b.call(u)}finally{if(f)throw f.error}}return[2]}})})}},vr=Object(m.b)(function(e){var t=e.course,n=e.branch,s=e.block,i=e.tab,o=e.editMode,c=e.lazyContents,l=e.school,u=e.draftId;return c.map(function(e){return i?(e=e.slice().sort(Object(h.g)("order")),a.createElement("div",null,o?a.createElement(a.Fragment,null,y()||!i.locked?a.createElement(ge,{course:t,tab:i,repo:n}):null,y()?a.createElement(gr,{course:t,tab:i,repo:n,block:s}):null):null,e.map(function(r,c){return a.createElement(ur,{key:r.id,content:r,branch:n,contentOrderIndex:c,contents:e,course:t,draftId:u,editMode:o,school:l,block:s,tab:i})}),!!o&&(y()||!i.locked)&&a.createElement(a.Fragment,null,"word-bank-tab"===i.tabClass&&a.createElement(ue,{type:"word-bank",tab:i,branch:n,course:t}),"word-bank-tab"!==i.tabClass&&("mission-tab"===i.tabClass||"subject-tab"===i.tabClass||"step-course"===t.type)&&!e.some(function(e){return"learning-goals"===e.type})&&a.createElement(ue,{type:"learning-goals",tab:i,branch:n,course:t}),a.createElement(ue,{type:"rich-text",tab:i,branch:n,course:t}),0==e.filter(function(e){return"resource-list"==e.type}).length&&a.createElement(ue,{type:"resource-list",tab:i,branch:n,course:t}),"intro-tab"===i.tabClass||"run-up-tab"===i.tabClass&&a.createElement(ue,{type:"embedded-html",tab:i,branch:n,course:t})))):o?a.createElement("p",null,Object(h.a)(jt||(jt=r.e(["Denna kurs saknar innehåll. Skapa ny flik genom knappen ovan"],["Denna kurs saknar innehåll. Skapa ny flik genom knappen ovan"])))):y()?a.createElement("p",null,Object(h.a)(St||(St=r.e(["Denna kurs saknar innehåll. Välj Redigera knappen för att lägga till flikar."],["Denna kurs saknar innehåll. Välj Redigera knappen för att lägga till flikar."])))):a.createElement("p",null,Object(h.a)(Ct||(Ct=r.e(["Denna kurs saknar innehåll."],["Denna kurs saknar innehåll."]))))})}),kr=n(123),Er=Object(k.a)(function(e){var t=e.school,n=e.course,a=e.tab,i=e.activeTab,o=e.draftId,c=e.history,l=e.courseType,u=e.blockId;return s.a.createElement(s.a.Fragment,null,a&&(y()||!a.locked||n.allowRemoveTabs)?s.a.createElement("div",{className:"btn btn-warning pull-right",onClick:function(){return r.b(void 0,void 0,void 0,function(){var e,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,(e=p.c.branch(o)).courseTabs.include("contents").includeIdsOnly().id(i).load()];case 1:return a=r.sent(),[4,e.courseContents.include("tasks").includeIdsOnly().ids(a.contents.map(function(e){return e.id})).toValue().load()];case 2:return s=r.sent(),y()&&"standard"===t&&(s.forEach(function(t){t.tasks.forEach(function(n){e.courseContents.removeRelated(t.id,"tasks",n)})}),a.contents.forEach(function(t){e.courseTabs.removeRelated(a.id,"contents",t)})),"theme-course"===l?e.courseInstances.removeRelated(n.id,"tabs",a):u&&e.courseBlocks.removeRelated(u,"tabs",a),[4,p.c.saveNow()];case 3:return r.sent(),c.push("/"+t+"/courses/"+n.id+"/tabs/$/drafts/"+o+"/edit"),[2]}})})}},s.a.createElement("i",{className:"fa fa-trash","aria-hidden":!0})," ",Object(h.a)(It||(It=r.e(["Ta bort fliken"],["Ta bort fliken"])))):null,s.a.createElement("div",null,s.a.createElement(de.a,null,s.a.createElement(me.a,null,s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){return c.push("/"+t+"/courses/"+n.id+"/tabs/"+(i||"$")+"/drafts/"+o),[2]})})}},s.a.createElement("i",{className:"fa fa-eye","aria-hidden":!0})," ",Object(h.a)(Dt||(Dt=r.e(["Förhandsgranska"],["Förhandsgranska"]))))),s.a.createElement(me.a,null," ",s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){return c.push("/"+t+"/courses/"+n.id+"/history"),[2]})})}},s.a.createElement("i",{className:"fa fa-history","aria-hidden":!0})," ",Object(h.a)(xt||(xt=r.e(["Versionshistorik"],["Versionshistorik"]))))),s.a.createElement(me.a,null," ",s.a.createElement("button",{className:"btn btn-warning",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,Object(kr.a)({school:t,course:n,draftRepo:p.c.branch(o)})];case 1:return e.sent(),[4,p.c.saveNow()];case 2:return e.sent(),c.push("/"+t+"/courses/"+n.id+"/tabs/"+(i||"$")),[2]}})})}},s.a.createElement("i",{className:"fa fa-play","aria-hidden":!0})," ",Object(h.a)(Rt||(Rt=r.e(["Publicera"],["Publicera"]))))))),s.a.createElement("br",null),s.a.createElement("button",{className:"btn",onClick:function(){return c.push("/"+t+"/courses/"+n.id+"/tabs/"+(i||"$"))}},s.a.createElement("i",{className:"fa fa-arrow-left","aria-hidden":!0})," ",Object(h.a)(Lt||(Lt=r.e(["Avsluta redigering"],["Avsluta redigering"])))))}),yr=n(70),wr=n(75),Tr=n(311),Or=Symbol("TypeText"),Nr=Symbol("TypeCheckbox"),jr=Symbol("TypeObsure"),Sr=Symbol("TypeHiddenChange"),Cr=Symbol("TypeHtml"),Ir={Text:Or,Html:Cr,Checkbox:Nr,Obscure:jr,HiddenChange:Sr},Dr={entityTypes:{courseBlocks:Object(h.a)(Mt||(Mt=r.e(["kursblock"],["kursblock"]))),courseContents:Object(h.a)(_t||(_t=r.e(["innehållsruta"],["innehållsruta"]))),courseInstances:Object(h.a)(At||(At=r.e(["kurs"],["kurs"]))),courseTabs:Object(h.a)(Pt||(Pt=r.e(["flik"],["flik"]))),schools:Object(h.a)(Ut||(Ut=r.e(["skola"],["skola"]))),tasks:Object(h.a)(Ft||(Ft=r.e(["uppgift"],["uppgift"])))},modifiedLinks:{tabs:[Object(h.a)(Gt||(Gt=r.e(["Tillagd flik"],["Tillagd flik"]))),Object(h.a)(Bt||(Bt=r.e(["Borttagen flik"],["Borttagen flik"])))],blocks:[Object(h.a)(qt||(qt=r.e(["Tillagt block"],["Tillagt block"]))),Object(h.a)(Kt||(Kt=r.e(["Borttaget block"],["Borttaget block"])))],abilities:[Object(h.a)(Vt||(Vt=r.e(["Tillagd förmåga"],["Tillagd förmåga"]))),Object(h.a)(Ht||(Ht=r.e(["Borttagen förmåga"],["Borttagen förmåga"])))],centralContent:[Object(h.a)(zt||(zt=r.e(["Tillagt centralt innehåll"],["Tillagt centralt innehåll"]))),Object(h.a)(Wt||(Wt=r.e(["Borttaget centralt innehåll"],["Borttaget centralt innehåll"])))],knowledgeRequirements:[Object(h.a)(Yt||(Yt=r.e(["Tillagt kunskapskrav"],["Tillagt kunskapskrav"]))),Object(h.a)($t||($t=r.e(["Borttaget kunskapskrav"],["Borttaget kunskapskrav"])))],tasks:[Object(h.a)(Jt||(Jt=r.e(["Tillagd uppgift"],["Tillagd uppgift"]))),Object(h.a)(Zt||(Zt=r.e(["Borttagen uppgift"],["Borttagen uppgift"])))],contents:[Object(h.a)(Qt||(Qt=r.e(["Tillagd innehållsruta"],["Tillagd innehållsruta"]))),Object(h.a)(Xt||(Xt=r.e(["Borttagen innehållsruta"],["Borttagen innehållsruta"])))]},propertyNames:{allowAddTabs:[Nr,Object(h.a)(en||(en=r.e(["Ändrat om tillägg av flik ska vara tillåtet"],["Ändrat om tillägg av flik ska vara tillåtet"])))],allowRemoveTabs:[Nr,Object(h.a)(tn||(tn=r.e(["Ändrat om borttagning av flik ska vara tillåtet"],["Ändrat om borttagning av flik ska vara tillåtet"])))],allowReorderTabs:[Nr,Object(h.a)(nn||(nn=r.e(["Ändrat om det ska va tillåtet att ändra ordning på flik"],["Ändrat om det ska va tillåtet att ändra ordning på flik"])))],assignment:[Nr,Object(h.a)(rn||(rn=r.e(["Ändrad flagga för inlämningsuppgift"],["Ändrad flagga för inlämningsuppgift"])))],commonLearningGoals:[Or,Object(h.a)(an||(an=r.e(["Ändrade gemensamma lärandemål"],["Ändrade gemensamma lärandemål"])))],content:[Cr,Object(h.a)(sn||(sn=r.e(["Ändrad innehållstext"],["Ändrad innehållstext"])))],createdBy:[Sr,Object(h.a)(on||(on=r.e(["Skapad av"],["Skapad av"])))],createdDate:[Sr,Object(h.a)(cn||(cn=r.e(["Skapad datum"],["Skapad datum"])))],dateTime:[jr,Object(h.a)(ln||(ln=r.e(["Ändat datum / tid"],["Ändat datum / tid"])))],deadline:[Or,Object(h.a)(un||(un=r.e(["Ändrat inlämningsdatum"],["Ändrat inlämningsdatum"])))],description:[Cr,Object(h.a)(dn||(dn=r.e(["Ändrad beskrivning"],["Ändrad beskrivning"])))],embeddedHtml:[jr,Object(h.a)(mn||(mn=r.e(["Lagt till inbäddad HTML"],["Lagt till inbäddad HTML"])))],explainedRequirements:[jr,Object(h.a)(pn||(pn=r.e(["Lagt till egna förklaringar av kunskapskrav"],["Lagt till egna förklaringar av kunskapskrav"])))],futureAbilities:[Or,Object(h.a)(fn||(fn=r.e(["Ändrade framtidsförmågor"],["Ändrade framtidsförmågor"])))],hasCommonLearningGoals:[Nr,Object(h.a)(hn||(hn=r.e(["Ändrad inställning för gemensamma lärandemål"],["Ändrad inställning för gemensamma lärandemål"])))],hidden:[Nr,Object(h.a)(bn||(bn=r.e(['Ändrad flagga "gömd"'],['Ändrad flagga "gömd"'])))],hiddenTasks:[jr,Object(h.a)(gn||(gn=r.e(["Ändrat listan på gömda uppgifter"],["Ändrat listan på gömda uppgifter"])))],html:[jr,Object(h.a)(vn||(vn=r.e(["Ändrat innehåll"],["Ändrat innehåll"])))],learningGoal:[Or,Object(h.a)(kn||(kn=r.e(["Lärandemål"],["Lärandemål"])))],lockDelete:[Nr,Object(h.a)(En||(En=r.e(['Ändrat flagga: "lås från borttagning"'],['Ändrat flagga: "lås från borttagning"'])))],locked:[Nr,Object(h.a)(yn||(yn=r.e(['Ändrad flagga: "förbjud ändring av flikar"'],['Ändrad flagga: "förbjud ändring av flikar"'])))],migratedTexts:[jr,Object(h.a)(wn||(wn=r.e(["Ändringar i migrerade texter från skolverket"],["Ändringar i migrerade texter från skolverket"])))],modifiedBy:[Sr,Object(h.a)(Tn||(Tn=r.e(["Ändrad av"],["Ändrad av"])))],modifiedDate:[Sr,Object(h.a)(On||(On=r.e(["Ändringsdatum"],["Ändringsdatum"])))],taskOrder:[jr,Object(h.a)(Nn||(Nn=r.e(["Ändrad ordning på uppgifter"],["Ändrad ordning på uppgifter"])))],name:[Or,Object(h.a)(jn||(jn=r.e(["Ändrat namn"],["Ändrat namn"])))],order:[jr,Object(h.a)(Sn||(Sn=r.e(["Ändrad ordning"],["Ändrad ordning"])))],resources:[jr,Object(h.a)(Cn||(Cn=r.e(["Ändrade i resurser"],["Ändrade i resurser"])))],school:[Or,Object(h.a)(In||(In=r.e(["Skola"],["Skola"])))],stepNo:[Or,Object(h.a)(Dn||(Dn=r.e(["Stegnummer"],["Stegnummer"])))],stepNumbers:[Or,Object(h.a)(xn||(xn=r.e(["Stegnummer"],["Stegnummer"])))],subject:[Or,Object(h.a)(Rn||(Rn=r.e(["Ämne"],["Ämne"])))],subjects:[jr,Object(h.a)(Ln||(Ln=r.e(["Ämnen"],["Ämnen"])))],tabClass:[Or,Object(h.a)(Mn||(Mn=r.e(["Typ av flik"],["Typ av flik"])))],tabTitle:[Sr,Object(h.a)(_n||(_n=r.e(["Fliknamn"],["Fliknamn"])))],taskType:[Or,Object(h.a)(An||(An=r.e(["Uppgiftstyp"],["Uppgiftstyp"])))],url:[Or,Object(h.a)(Pn||(Pn=r.e(["Url"],["Url"])))],workingProcedure:[Cr,Object(h.a)(Un||(Un=r.e(["Arbetsprocess"],["Arbetsprocess"])))],youtubeId:[jr,Object(h.a)(Fn||(Fn=r.e(["Youtube ID"],["Youtube ID"])))]},getModifiedLinkHeading:function(e){var t=Dr.modifiedLinks[e.label];return t?"add"===e.type?t[0]:"remove"===e.type?t[1]:Object(h.a)(Kn||(Kn=r.e(["Ångrad länkning"],["Ångrad länkning"]))):"add"===e.type?Object(h.a)(Gn||(Gn=r.e(["Tillagt objekt"],["Tillagt objekt"]))):"remove"===e.type?Object(h.a)(Bn||(Bn=r.e(["Borttaget objekt"],["Borttaget objekt"]))):Object(h.a)(qn||(qn=r.e(["Ångrad länkning"],["Ångrad länkning"])))},getPropVal:function(e,t,n){switch(e){case!0:return Object(h.a)(Vn||(Vn=r.e(["Påslaget"],["Påslaget"])));case!1:return Object(h.a)(Hn||(Hn=r.e(["Avslaget"],["Avslaget"])));case"primary":return Object(h.a)(zn||(zn=r.e(["Grundskola"],["Grundskola"])));case"gymnasium":return Object(h.a)(Wn||(Wn=r.e(["Gymnasieskola"],["Gymnasieskola"])));case"exercise":return Object(h.a)(Yn||(Yn=r.e(["Övningsuppgift"],["Övningsuppgift"])));case"task":return Object(h.a)($n||($n=r.e(["Uppgift"],["Uppgift"])));case"assignment":return Object(h.a)(Jn||(Jn=r.e(["Inlämningsuppgift"],["Inlämningsuppgift"])));case"theme-course":return Object(h.a)(Zn||(Zn=r.e(["Temakurs"],["Temakurs"])));case"step-course":return Object(h.a)(Qn||(Qn=r.e(["Stegkurs"],["Stegkurs"])));case"intro-tab":return Object(h.a)(Xn||(Xn=r.e(["Introduktionsflik"],["Introduktionsflik"])));case"run-up-tab":return Object(h.a)(er||(er=r.e(["Upptakt"],["Upptakt"])));case"subject-tab":return Object(h.a)(tr||(tr=r.e(["Ämnesflik"],["Ämnesflik"])));case"mission-tab":return Object(h.a)(nr||(nr=r.e(["Uppdragsflik"],["Uppdragsflik"])));case"content-tab":return Object(h.a)(rr||(rr=r.e(["Innehållsflik"],["Innehållsflik"])));case"teacher-tab":return Object(h.a)(ar||(ar=r.e(["Lärarsida"],["Lärarsida"])));case"word-bank-tab":return Object(h.a)(sr||(sr=r.e(["Ordbank"],["Ordbank"])));default:return null==e?Object(h.a)(ir||(ir=r.e(["Nollställt"],["Nollställt"]))):""===e?Object(h.a)(or||(or=r.e(["(tomt)"],["(tomt)"]))):t===Cr?Object(h.l)(xr(e),300):"string"==typeof e?e:e.subjectName?e.subjectName:JSON.stringify(e,null,2)}}};function xr(e){var t=document.createElement("div");return t.innerHTML=e,t.innerText}var Rr,Lr,Mr,_r,Ar,Pr,Ur,Fr,Gr,Br=n(18);function qr(e){var t=e.delta,n=e.editable,a=e.onDelete,i=t.targetName&&Object(h.l)(t.targetName,80),o=["schoolCourse"];t.$meta&&o.push("entitymeta-"+t.$meta);var c=Object(h.d)(Dr.entityTypes[t.table]||t.table),l=Object.keys(t.data).map(function(e){return{propSpec:Dr.propertyNames[e],prop:e}}),u=l.some(function(e){return!e.propSpec});return s.a.createElement("div",{className:o.join(" ")},s.a.createElement("div",{className:"align-horizontal"},n?s.a.createElement("div",{className:"horizontalItem top pull-right"},s.a.createElement("a",{className:"removeItem",onClick:a})):null,s.a.createElement("div",{className:"horizontalItem top"},i?s.a.createElement("a",null,c,' "',i,'"'):s.a.createElement("a",null,c))),l.filter(function(e){return e.propSpec}).map(function(e){var n=r.f(e.propSpec,2),a=n[0],i=n[1],o=e.prop;return s.a.createElement("div",{key:o},a===Ir.Obscure?s.a.createElement("p",null,i):a===Ir.HiddenChange?null:s.a.createElement("p",null,i,": ",Dr.getPropVal(t.data[o],a,o)))}),u?s.a.createElement("div",null,s.a.createElement("p",{title:JSON.stringify(t.data,null,4)},Object(h.a)(Rr||(Rr=r.e(["Ändringar i interna egenskaper"],["Ändringar i interna egenskaper"]))))):null,s.a.createElement("div",null,s.a.createElement("p",{className:"small"},Object(Br.h)(t.dateTime)," ",t.contributors.join(", "))))}function Kr(e){var t=e.delta,n=e.editable,r=e.onDelete,a=t.targetName&&Object(h.l)(xr(t.targetName),80),i=["schoolCourse"];t.$meta&&i.push("entitymeta-"+t.$meta);var o=Dr.getModifiedLinkHeading(t);return s.a.createElement("div",{className:i.join(" ")},s.a.createElement("div",{className:"align-horizontal"},n?s.a.createElement("div",{className:"horizontalItem top pull-right"},s.a.createElement("a",{className:"removeItem",onClick:r})):null,s.a.createElement("div",{className:"horizontalItem top"},a?s.a.createElement("a",null,o,' "',a,'"'):s.a.createElement("a",null,o))),s.a.createElement("div",null,s.a.createElement("p",{className:"small"},Object(Br.h)(t.dateTime)," ",t.contributor)))}function Vr(e){var t=e.branchId,n=e.tag,a=e.editable,i=p.c.branch(t).deltas;return n&&(i=i.tags(n)),s.a.createElement(at.a,null,i.toValue().map(function(e){return 0===e.length?s.a.createElement("div",null,s.a.createElement("p",{style:{opacity:.5,fontStyle:"italic"}},n?Object(h.a)(Lr||(Lr=r.e(["Skolans version är identisk med orginalet"],["Skolans version är identisk med orginalet"]))):Object(h.a)(Mr||(Mr=r.e(["Det finns inga ändringar att publicera."],["Det finns inga ändringar att publicera."]))))):s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{className:"taskContainer odd-even"},e.map(function(e){var t=function(e){return"modify"===e.type?e.targetId:e.sourceId+e.label+e.targetId}(e);return"modify"===e.type?s.a.createElement(qr,{delta:e,editable:a,key:t,onDelete:function(){c(e)}}):s.a.createElement(Kr,{delta:e,editable:a,key:t,onDelete:function(){o(e)}})})),s.a.createElement("button",{className:"btn btn-large btn-warning",onClick:function(){var t,a;if(confirm(n?Object(h.a)(_r||(_r=r.e(["Åtgärden återstället kursen till standard.\n\nVill du fortsätta?"],["Åtgärden återstället kursen till standard.\\n\\nVill du fortsätta?"]))):Object(h.a)(Ar||(Ar=r.e(["Åtgärden raderar samtliga ändringar som ännu inte är publicerade.\n\nVill du fortsätta?"],["Åtgärden raderar samtliga ändringar som ännu inte är publicerade.\\n\\nVill du fortsätta?"])))))try{for(var s=r.h(e),i=s.next();!i.done;i=s.next()){var l=i.value;"modify"===l.type?c(l):o(l)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(a=s.return)&&a.call(s)}finally{if(t)throw t.error}}}},n?Object(h.a)(Pr||(Pr=r.e(["Återställ till orginalet"],["Återställ till orginalet"]))):Object(h.a)(Ur||(Ur=r.e(["Radera alla opublicerade ändringar"],["Radera alla opublicerade ändringar"])))))}));function o(e){p.c.branch(t).table(e.sourceTable).undoLink(e.sourceId,e.label,e.targetId)}function c(e){var n={};Object.keys(e.data).forEach(function(e){n[e]={$unset:0}}),p.c.branch(t).table(e.table).update({id:e.targetId,name:e.targetName},n)}}function Hr(e){var t="school-branch"===e.branchType?s.a.createElement("h2",null,Object(h.a)(Fr||(Fr=r.e(["Skolans ändringar"],["Skolans ändringar"])))):s.a.createElement("h3",null,Object(h.a)(Gr||(Gr=r.e(["Opublicerade ändringar"],["Opublicerade ändringar"]))));return s.a.createElement("div",{className:"ked_boxed"},t,s.a.createElement(Vr,{branchId:e.branchId,editable:!e.isAdmin,tag:"school-branch"===e.branchType?e.courseId:null}))}var zr,Wr,Yr,$r,Jr,Zr,Qr,Xr,ea,ta,na,ra,aa,sa,ia,oa,ca,la,ua,da,ma,pa,fa,ha,ba,ga=Object(m.b)(function(e){return e.content.map(function(e){var t=e;return s.a.createElement("div",null,t&&t.resources.length>0&&s.a.createElement("div",{className:"ked_boxed kpMenu"},s.a.createElement("h2",null,"Resurser"),s.a.createElement("hr",null),s.a.createElement("div",{className:"taskContainer"},t.resources.map(function(e){return s.a.createElement("div",{className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("a",{href:e.url,target:"_blank"},e.name)))}))))})}),va=Object(Tr.a)(function(e){var t=e.school,n=e.courseId,s=e.draftId,i=e.course,o=e.branch,c=e.tabs,l=e.activeTab,u=e.editMode,d=e.history,m=e.block,k=c.filter(function(e){return e.id===l})[0]||c[0],y=k&&o.courseContents.hasEdgesFrom([k.id]).filter(function(e){return"resource-list"===e.type}).first();return a.createElement(yr.a,{right:u&&s?a.createElement("div",null,a.createElement(Hr,{isAdmin:"standard"===t,branchId:s,branchType:"draft-branch"})):a.createElement(a.Fragment,null,a.createElement(wr.a,{env:E.a,viewCourseUrl:b.b.KED_COURSE_VIEWER_URL}),y&&a.createElement(ga,{content:y})),rightWidth:5,left:a.createElement(a.Fragment,null,a.createElement(vr,{school:t,course:i,branch:o,tab:k,editMode:u,draftId:s,block:m,lazyContents:k?o.courseContents.include("tasks").hasEdgesFrom([k.id]).toValue():new f.a([])}),u?a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("hr",null),a.createElement(Er,{school:t,course:i,tab:k,activeTab:l,draftId:s,courseType:i.type,blockId:m&&m.id})):E.a.currentUser.roles.includes("ADMIN")||Object(g.e)(E.a.currentUser,t)?a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("hr",null),a.createElement(de.a,null,s&&a.createElement(me.a,null,a.createElement("button",{className:"btn btn-large btn-warning",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,Object(kr.a)({school:t,course:i,draftRepo:p.c.branch(s)})];case 1:return e.sent(),[4,p.c.saveNow()];case 2:return e.sent(),d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")),[2]}})})}},a.createElement("i",{className:"fa fa-lg fa-play","aria-hidden":!0})," ",Object(h.a)(zr||(zr=r.e(["Publicera"],["Publicera"]))))),a.createElement(at.a,null,p.a.getBranchId(p.c.schools.name(t).single(),n).map(function(e){return a.createElement(a.Fragment,null,a.createElement(me.a,null,a.createElement("button",{className:"btn btn-large",onClick:e?function(){return d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")+"/drafts/"+e+"/edit")}:function(){return r.b(void 0,void 0,void 0,function(){var e,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,4,,5]),[4,p.c.schools.name(t).single().load()];case 1:return e=r.sent(),[4,Object(v.g)(e.officialBranchId+n+"draft")];case 2:return a=r.sent(),s={id:a,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[n]},p.c.branches.addRelated(e.officialBranchId,"approvedChildren",s),[4,p.c.saveNow()];case 3:return r.sent(),d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")+"/drafts/"+a+"/edit"),[3,5];case 4:return i=r.sent(),Object(h.n)(i),[3,5];case 5:return[2]}})})}},e?a.createElement(a.Fragment,null,a.createElement("i",{className:"fa fa-lg fa-pencil"})," ",s?Object(h.a)(Wr||(Wr=r.e(["Fortsätt redigera"],["Fortsätt redigera"]))):Object(h.a)(Yr||(Yr=r.e(["Redigera"],["Redigera"])))):a.createElement(a.Fragment,null,a.createElement("i",{className:"fa fa-lg fa-plus"})," ",Object(h.a)($r||($r=r.e(["Skapa skolans version av kursen"],["Skapa skolans version av kursen"])))))),s||!e?void 0:a.createElement(me.a,null,a.createElement("button",{className:"btn btn-large",onClick:function(){return d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")+"/drafts/"+e)}},a.createElement("i",{className:"fa fa-eye"})," ",Object(h.a)(Jr||(Jr=r.e(["Visa redigerad version"],["Visa redigerad version"]))))))})),s&&a.createElement(me.a,null,a.createElement("button",{className:"btn btn-large",onClick:function(){d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$"))}},a.createElement("i",{className:"fa fa-lg fa-arrow-left"})," ",Object(h.a)(Zr||(Zr=r.e(["Avsluta redigering"],["Avsluta redigering"]))))))):void 0)})}),ka=n(148),Ea=n(108),ya=n(6),wa=n.n(ya),Ta=n(114),Oa=function(e){var t=e.task,n=e.writeAccess,a=e.repo,i=e.contentId,o=e.tab,c=o?o.tabClass:null;return s.a.createElement("div",null,s.a.createElement("div",{className:"align-horizontal spaced"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("p",null,"mission-tab"===c?Object(h.a)(Qr||(Qr=r.e(["Uppdragets namn:"],["Uppdragets namn:"]))):Object(h.a)(Xr||(Xr=r.e(["Uppgiftens namn:"],["Uppgiftens namn:"]))))),s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("input",{autoFocus:!0,type:"text",size:35,value:t.name,disabled:!n,readOnly:!n,onChange:function(e){a.tasks.update(t,{name:e.target.value.substr(0,cr.MAX_CHARS_TASK_NAMES)})}}))),t.migratedTexts&&n&&s.a.createElement(ka.a,{task:t,course:null,updateLink:function(e,t){throw new Error("Not implemented yet")}}),"mission-tab"!==c&&s.a.createElement("div",{className:"align-horizontal spaced"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("p",null,Object(h.a)(ea||(ea=r.e(["Lärandemål:"],["Lärandemål:"]))))),s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement(at.a,null,a.courseContents.id(i).map(function(e){if("learning-goals"!==e.type)return s.a.createElement("p",null,Object(h.a)(ta||(ta=r.e(["Ej valbart"],["Ej valbart"]))));var n=e.hasCommonLearningGoals,i=e.commonLearningGoals.map(function(e){return e.trim()}).filter(function(e){return e}).map(function(e){return{name:e,key:e}});return s.a.createElement(Ta.a,{available:i,selected:t.learningGoal.split("\n"),onChange:function(e,r){n?a.tasks.update(t,{learningGoal:e.join("\n")}):a.tasks.update(t,{learningGoal:r})}})})))),s.a.createElement(s.a.Fragment,null,s.a.createElement("h2",null,"mission-tab"===c?Object(h.a)(na||(na=r.e(["Uppdragstyp"],["Uppdragstyp"]))):Object(h.a)(ra||(ra=r.e(["Uppgiftstyp"],["Uppgiftstyp"])))),s.a.createElement(Ta.a,{available:["mission-tab"!==c&&{name:Object(h.a)(aa||(aa=r.e(["Övningsuppgift"],["Övningsuppgift"]))),key:"exercise"},{name:Object(h.a)(sa||(sa=r.e(["Uppgift"],["Uppgift"]))),key:"task"},{name:Object(h.a)(ia||(ia=r.e(["Inlämningsuppgift"],["Inlämningsuppgift"]))),key:"assignment"}].filter(function(e){return e}),selected:[t.taskType],onChange:function(e,n){return a.tasks.update(t,{taskType:n})}}),"assignment"===t.taskType&&s.a.createElement(s.a.Fragment,null,s.a.createElement("p",null,"Inlämningsdatum"),s.a.createElement("div",{className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement(Ea.a,{nextMonthButtonLabel:"",showWeekNumbers:!0,previousMonthButtonLabel:"",selected:t.deadline&&wa()(t.deadline).toDate(),dateFormat:"yyyy-MM-dd",locale:"sv",popperPlacement:"bottom-start",onChange:function(e){a.tasks.update(t,{deadline:wa()(e).format("YYYY-MM-DD")})}})),s.a.createElement("div",{className:"horizontalItem top"},t.deadline&&s.a.createElement("a",{className:"deleteDate",href:"#",title:"Ta bort inlämningsdatum",onClick:function(e){e.preventDefault(),a.tasks.update(t,{deadline:null})}}))),s.a.createElement("div",{className:"taskContainer"},s.a.createElement("div",{className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top",onClick:function(){return a.tasks.update(t,{sendToUrkund:null!=t.sendToUrkund&&!t.sendToUrkund})}},s.a.createElement("div",{className:"checkBox"+(null==t.sendToUrkund||t.sendToUrkund?" checked":"")})),s.a.createElement("div",{className:"horizontalItem top"},"Verify assignments with Urkund"))))))},Na=Object(k.a)(function(e){var t=e.school,n=e.courseId,a=e.tabId,i=e.contentId,o=e.draftId,c=e.task,l=e.repo,u=e.history;return s.a.createElement(s.a.Fragment,null,s.a.createElement("div",null,s.a.createElement("div",{className:"btn btn-warning pull-right",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return l.courseContents.removeRelated(i,"tasks",c),[4,p.c.saveNow()];case 1:return e.sent(),u.push("/"+t+"/courses/"+n+"/tabs/"+a+"/drafts/"+o+"/edit"),[2]}})})}},s.a.createElement("i",{className:"fa fa-trash","aria-hidden":!0})," ",Object(h.a)(oa||(oa=r.e(["Ta bort uppgiften"],["Ta bort uppgiften"])))),s.a.createElement(de.a,null,s.a.createElement(me.a,null,s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,l.saveNow()];case 1:return e.sent(),u.push("/"+t+"/courses/"+n+"/tabs/"+(a||"$")+"/contents/"+i+"/tasks/"+c.id+"/drafts/"+o),[2]}})})}},s.a.createElement("i",{className:"fa fa-eye","aria-hidden":!0})," ",Object(h.a)(ca||(ca=r.e(["Förhandsgranska"],["Förhandsgranska"]))))),s.a.createElement(me.a,null,s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){return u.push("/"+t+"/courses/"+n+"/tabs/"+(a||"$")+"/drafts/"+o+"/edit"),[2]})})}},s.a.createElement("i",{className:"fa fa-arrow-left","aria-hidden":!0})," ",Object(h.a)(la||(la=r.e(["Återgå till fliken"],["Återgå till fliken"]))))))),s.a.createElement("br",null))}),ja=function(e){var t=e.repo,n=e.task,a=e.writeAccess;return s.a.createElement(s.a.Fragment,null,s.a.createElement("h4",null,Object(h.a)(ua||(ua=r.e(["Introtext"],["Introtext"])))),s.a.createElement("p",{className:"subHeader"},"(Skriv en introduktion till uppgiften)"),s.a.createElement(ke.a,{actions:["bold","italic","underline","link","image"],defaultActions:Ee.a,readOnly:!a,html:n.content||"",onChange:function(e){return t.tasks.update(n,{content:e})}}))},Sa={exercise:Object(h.a)(da||(da=r.e(["Övningsuppgift"],["Övningsuppgift"]))),task:Object(h.a)(ma||(ma=r.e(["Uppgift"],["Uppgift"]))),assignment:Object(h.a)(pa||(pa=r.e(["Inlämningsuppgift"],["Inlämningsuppgift"])))};function Ca(e){var t=e.writeAccess,n=e.task,s=e.repo,i=r.f(Object(a.useState)(0),2),o=i[0],c=i[1];return a.createElement(a.Fragment,null,a.createElement("h4",null,Sa[n.taskType]||Object(h.a)(fa||(fa=r.e(["Uppgift"],["Uppgift"])))),a.createElement("p",{className:"subHeader"},Object(h.a)(ha||(ha=r.e(["(Skriv in en kort förklaring, max "," tecken, vad uppgiften går ut på.)"],["(Skriv in en kort förklaring, max "," tecken, vad uppgiften går ut på.)"])),cr.MAX_CHARS_TASK_INTRO_TEXT)),a.createElement(ke.a,{actions:["bold"],defaultActions:Ee.a,readOnly:!t,html:n.description||"",maxChars:cr.MAX_CHARS_TASK_INTRO_TEXT,reportNumChars:function(e){return c(e)},onChange:function(e){s.tasks.update(n,{description:e})}}),a.createElement("div",{style:{textAlign:"right",opacity:.7,fontSize:"8pt"}},Object(h.a)(ba||(ba=r.e([""," av ",""],[""," av ",""])),o,cr.MAX_CHARS_TASK_INTRO_TEXT)))}var Ia,Da,xa=function(e){var t=e.subject,n=e.step,r=e.onSelect;return s.a.createElement("div",{style:{minHeight:400}},s.a.createElement(a.Suspense,{fallback:s.a.createElement($e.a,null)},s.a.createElement(Ye,{subjectName:t,stepNo:n,onChange:function(e){var a=e.name,s=e.key,i=b.a.KED_WORDBANKS_URL+"?subject="+t+"&step="+n+"&list="+s;r({name:a,url:i})}})))};function Ra(e){var t=e.writeAccess,n=e.task,s=e.repo,i=e.step,o=Object(a.useContext)(Xe),c=["bold","italic","underline","olist","outdent","indent","link","image"];return t&&(i&&c.push({name:"listWordBank",icon:'<i class="fa fa-book" aria-hidden="true"></i>',title:Object(h.a)(Ia||(Ia=r.e(["Länka till ordbank"],["Länka till ordbank"]))),result:function(e,t){var r=function(){if(window.getSelection){var e=window.getSelection();if(e.getRangeAt&&e.rangeCount)return e.getRangeAt(0)}else if(document.selection&&document.selection.createRange)return document.selection.createRange();return null}();o.openDialog(a.createElement(xa,{subject:n.subject,step:i,onSelect:function(e){var t=e.name,n=e.url;o.closeDialog(),function(e){if(e)if(window.getSelection){var t=window.getSelection();t.removeAllRanges(),t.addRange(e)}else document.selection&&e.select&&e.select()}(r);var a=document.createElement("a");a.href=n,a.target="_blank",a.appendChild(document.createTextNode(t)),document.execCommand("insertHTML",!1,a.outerHTML)}}))}}),y()&&c.push({icon:'<i class="fa fa-link" style="color:var(--col-accent)" aria-hidden="true"></i>',title:"Resurs länk",result:function(){var e=window.prompt("Ange länkens URL för resursen");if(e){var t=new URL("",e);if(t.host!==window.location.host)return void Object(h.n)("Ogiltig resursadress");var n=new RegExp("([^.|/]+).([^.]+)(?=.html)").exec(t.pathname);if(!b.a.KED_RESOURCES_URL)return void Object(h.n)("Resurser URL är inte konfigurerad");var r=b.a.KED_RESOURCES_URL.replace("{value}",n[0]),a=document.createElement("a"),s=window.getSelection().toString();a.href=t.host+r,a.target="_blank",a.appendChild(document.createTextNode(s)),r&&s&&document.execCommand("insertHTML",!1,a.outerHTML)}}})),a.createElement(a.Fragment,null,a.createElement("h4",null,Object(h.a)(Da||(Da=r.e(["Arbetsprocess"],["Arbetsprocess"])))),a.createElement(ke.a,{actions:c,defaultActions:Ee.a,readOnly:!t,html:n.workingProcedure||"",onChange:function(e){s.tasks.update(n,{workingProcedure:e})}}))}var La,Ma,_a,Aa,Pa,Ua,Fa,Ga,Ba=function(e){var t=e.task,n=e.repo;return y()?t.embeddedHtml?s.a.createElement("div",null,s.a.createElement("h4",null,Object(h.a)(La||(La=r.e(["Inbäddat material"],["Inbäddat material"])))),s.a.createElement("p",null,Object(h.a)(Ma||(Ma=r.e(["Klipp in HTML kod nedan"],["Klipp in HTML kod nedan"])))),s.a.createElement("textarea",{style:{width:"100%",height:"100px"},value:t.embeddedHtml,onChange:function(e){return n.tasks.update(t,{embeddedHtml:e.target.value})}})):s.a.createElement("div",null,s.a.createElement("button",{className:"btn",onClick:function(){return n.tasks.update(t,{embeddedHtml:" "})}},s.a.createElement("i",{className:"fa fa-code","aria-hidden":!0})," ",Object(h.a)(_a||(_a=r.e(["Lägg till inbäddat material"],["Lägg till inbäddat material"])))),s.a.createElement("br",null),s.a.createElement("br",null)):s.a.createElement("div",null)},qa=function(e){var t=e.repo,n=e.course,r=e.draftId,a=e.tabId,i=e.tab,o=e.contentId,c=e.writeAccess,l=e.task,u=e.school;return s.a.createElement(s.a.Fragment,null,s.a.createElement(Oa,{repo:t,task:l,writeAccess:c,contentId:o,tab:i}),s.a.createElement(ja,{repo:t,task:l,writeAccess:c}),s.a.createElement(Ca,{writeAccess:c,task:l,repo:t}),s.a.createElement(Ra,{writeAccess:c,task:l,repo:t,step:i&&"step-course-tab"===i.type&&i.stepNo}),s.a.createElement(Ba,{writeAccess:c,task:l,repo:t}),s.a.createElement(Na,{repo:t,task:l,courseId:n.id,draftId:r,tabId:a,contentId:o,school:u}))},Ka=n(50),Va=n(149),Ha=n(24),za=function(e){var t=e.repo,n=e.task,a=e.tabIds,i=e.uncoveredIds,o=e.blockId,c=e.allCoveredSentences;return s.a.createElement(at.a,null,o?t.courseBlocks.include("abilities","centralContent","knowledgeRequirements").id(o).map(function(e){return s.a.createElement("div",null,s.a.createElement(Wa,r.a({},{repo:t,task:n,uncoveredIds:i,tabOrBlock:e,allCoveredSentences:c})))}):t.courseTabs.include("abilities","centralContent","knowledgeRequirements").ids(a).toValue().map(function(e){return s.a.createElement("div",null,1===e.length?s.a.createElement(Wa,r.a({},{repo:t,task:n,uncoveredIds:i,tabOrBlock:e[0],allCoveredSentences:c})):e.map(function(e){return s.a.createElement(fr.a,{key:e.id,title:s.a.createElement("h4",null,e.name||e.tabTitle,e.subject&&e.subject.subjectName&&e.subject.subjectName!==(e.name||e.tabTitle)?" ("+e.subject.subjectName+")":"")},s.a.createElement(Wa,r.a({},{repo:t,task:n,uncoveredIds:i,tabOrBlock:e,hasMultipleSubjects:!0,allCoveredSentences:c})))}))}))},Wa=function(e){var t=e.tabOrBlock,n=e.repo,i=e.task,o=e.uncoveredIds,c=e.hasMultipleSubjects,l=e.allCoveredSentences,u=r.f(Object(a.useState)(!1),2),d=u[0],m=u[1],p=Ha.b.markPartialKRs;return s.a.createElement(at.a,null,Object(Ka.b)(t).map(function(e){var t="type"in e&&e.subject&&e.subject.subjectName;return s.a.createElement(s.a.Fragment,null,"exercise"!==i.taskType&&s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("h3",null,Object(h.a)(Aa||(Aa=r.e(["Välj kunskapskrav"],["Välj kunskapskrav"])))),s.a.createElement("div",{className:"matrix-knowledge-title"},s.a.createElement("p",null,Object(h.a)(Pa||(Pa=r.e(["Markera de kunskapskrav som din uppgift täcker."],["Markera de kunskapskrav som din uppgift täcker."])))),p&&s.a.createElement("p",null,s.a.createElement("i",{className:"fab fa-creative-commons-nd "+(d?"activePartialView":""),onClick:function(){return m(!d)}}))),s.a.createElement(dr.a,{knowledgeRequirements:e.knowledgeRequirements,markedIds:i.knowledgeRequirements.map(function(e){return e.id}),explainedRequirements:i.explainedRequirements||{},idsToMarkNotOk:o,markMode:!0,markBySentenceView:d,migratedIds:i&&i.migratedTexts&&i.migratedTexts.knowledgeRequirements,partialRequirments:i.partialRequirments||{},coveredPartialRequirments:l,markPartialFeatureEnabled:p,onExplainedRequirementsChanged:function(e,t){var a;return n.tasks.update(i,{explainedRequirements:r.a({},i.explainedRequirements,(a={},a[e]=t,a))})},onUpdatePartialKnowledge:function(t,a){var s;n.tasks.update(i,{partialRequirments:r.a({},i.partialRequirments,(s={},s[t]=r.g(a),s))});var o=e.knowledgeRequirements.filter(function(e){return e.id===t})[0];0===a.length?n.tasks.removeRelated(i.id,"knowledgeRequirements",o):i.partialRequirments&&i.partialRequirments[t]&&0!==i.partialRequirments[t].length||n.tasks.addRelated(i.id,"knowledgeRequirements",o)},onMarkChanged:function(a,s){var o,l,u=e.knowledgeRequirements.filter(function(e){return e.id===a})[0];s?(c?n.tasks.update(i,{idsToSubjectMap:r.a({},i.idsToSubjectMap,(o={},o[a]=t,o))}):n.tasks.update(i,{idsToSubjectMap:void 0}),n.tasks.addRelated(i.id,"knowledgeRequirements",u)):(c?n.tasks.update(i,{idsToSubjectMap:r.a({},i.idsToSubjectMap,(l={},l[a]=void 0,l))}):n.tasks.update(i,{idsToSubjectMap:void 0}),n.tasks.removeRelated(i.id,"knowledgeRequirements",u))}})),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement(hr.a,{title:Object(h.a)(Ua||(Ua=r.e(["Välj förmågor"],["Välj förmågor"]))),options:e.abilities,markedIds:i.abilities.map(function(e){return e.id}),markMode:!0,migratedIds:i&&i.migratedTexts&&i.migratedTexts.abilities,onMarkChanged:function(t,r){var a=e.abilities.filter(function(e){return e.id===t})[0];r?n.tasks.addRelated(i.id,"abilities",a):n.tasks.removeRelated(i.id,"abilities",a)}})),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement(hr.a,{title:Object(h.a)(Fa||(Fa=r.e(["Välj centralt innehåll"],["Välj centralt innehåll"]))),options:e.centralContent,markedIds:i.centralContent.map(function(e){return e.id}),markMode:!0,migratedIds:i&&i.migratedTexts&&i.migratedTexts.centralContent,onMarkChanged:function(t,r){var a=e.centralContent.filter(function(e){return e.id===t})[0];r?n.tasks.addRelated(i.id,"centralContent",a):n.tasks.removeRelated(i.id,"centralContent",a)}})),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement(fr.a,{className:"larger",title:s.a.createElement("p",null,Object(h.a)(Ga||(Ga=r.e(["Välj framtidsförmågor"],["Välj framtidsförmågor"]))))},s.a.createElement("br",null),s.a.createElement(Ta.a,{available:Va.a.map(function(e){return{name:e,key:e}}),selected:i.futureAbilities,onChange:function(e){return n.tasks.update(i,{futureAbilities:e})}}))))}))},Ya=n(84),$a=n(67),Ja=Object(m.b)(function(e){var t=e.school,n=e.course,a=e.activeTab,i=e.draftId,o=e.branch,c=e.contentId,l=e.taskId,u=e.blockId,d=n.tabs.find(function(e){return e.id===a}),m=d&&"mission-tab"===d.tabClass?n.tabs.filter(function(e){return"subject-tab"===e.tabClass}).map(function(e){return e.id}):[a];return o.tasks.include("abilities","centralContent","knowledgeRequirements").includeIdsOnly().hasEdgesFrom([c]).toValue().combineLatest(o.courseTabs.include("abilities","centralContent","knowledgeRequirements").includeIdsOnly().ids(m)).switchMap(function(e){var d=r.f(e,2),p=d[0],f=d[1],b=p.filter(function(e){return e.id===l})[0],g=Object($a.a)(f,p),v=p&&Object(h.k)(p.filter(function(e){return null!=e.partialRequirments}).map(function(e){return e.partialRequirments}));return Object(Ka.b)(b).map(function(e){return s.a.createElement(yr.a,{left:s.a.createElement(za,{repo:o,task:e,uncoveredIds:g,tabIds:m,blockId:u,allCoveredSentences:v}),right:s.a.createElement(qa,{repo:o,school:t,course:n,draftId:i,tabId:a,tab:f.find(function(e){return e.id===a}),contentId:c,writeAccess:Object(Ya.a)(t),task:e}),rightWidth:6})})})}),Za=n(13);function Qa(e,t){return p.c.schools.name(e).single().switchMap(function(e){return p.c.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).first()})}var Xa,es,ts,ns,rs,as,ss,is,os,cs,ls=function(e){function t(t){var n=e.call(this,t)||this;return n.state={open:!1},n}return r.c(t,e),t.prototype.open=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.setState({open:!0}),this.state.schools?[3,2]:[4,p.c.schools.tags("primary").map(function(e){var t=e.id,n=e.name;return{id:t,name:n,displayName:e.displayName||n||"<namnlös>"}}).toValue().load()];case 1:e=t.sent(),this.setState({schools:e}),t.label=2;case 2:return[2]}})})},t.prototype.close=function(){this.setState({open:!1})},t.prototype.selectSchool=function(e){return r.b(this,void 0,void 0,function(){function t(){return r.b(this,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return(n=l)?[4,Qa(e,o).load()]:[3,2];case 1:n=r.sent(),r.label=2;case 2:return t=n,d&&u&&t&&(Object(g.d)(E.a.currentUser,e)||m)?[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")+"/contents/"+u+"/tasks/"+d+"/drafts/"+t+"/edit"]:d?[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")+"/tasks/"+d]:t&&(Object(g.d)(E.a.currentUser,e)||m)?[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")+"/drafts/"+t+"/edit"]:[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")]}})})}var n,a,s,i,o,c,l,u,d,m,p,f;return r.d(this,function(r){switch(r.label){case 0:return n=this.props,a=n.match,s=n.history,i=a.params,o=i.courseId,c=i.tabId,l=i.draftId,u=i.contentId,d=i.taskId,m=E.a.currentUser.roles.includes("ADMIN")||location.search.includes("role="),e===this.props.school?[3,2]:[4,t()];case 1:p=r.sent(),m?(f=Object(g.f)(location.pathname,"standard"===e?{role:void 0,school:e}:{role:"EMPLOYEE",school:e}),location.href=f+"#"+p):s.push(p),r.label=2;case 2:return this.close(),[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.school,a=t.draftId,i=t.displayName,o=this.state,c=o.open,l=o.schools;return s.a.createElement("div",{tabIndex:1,style:{outline:0},onBlur:function(){return e.close()}},c?l?s.a.createElement(s.a.Fragment,null,s.a.createElement("h5",{onClick:function(){return e.close()}},Object(h.a)(ts||(ts=r.e(["Växla skola"],["Växla skola"])))),s.a.createElement("ul",null,s.a.createElement("li",{onClick:function(){return e.selectSchool("standard")}},Object(h.a)(ns||(ns=r.e(["Standard"],["Standard"])))),l.filter(function(e){return"standard"!==e.name}).sort(function(e,t){return e.displayName.localeCompare(t.displayName,["sv","en"])}).map(function(t){var n=t.id,r=t.name,a=t.displayName;return s.a.createElement("li",{key:n,onClick:function(){return e.selectSchool(r)}},a)}))):s.a.createElement(Za.a,null):s.a.createElement(s.a.Fragment,null,s.a.createElement("h5",{onClick:function(){return e.open()}},"standard"!==n?i||n:Object(h.a)(Xa||(Xa=r.e(["Standard"],["Standard"])))),a&&s.a.createElement("p",{className:"pageSideText"},Object(h.a)(es||(es=r.e(["Arbetsversion"],["Arbetsversion"]))))))},t}(s.a.Component),us=Object(k.a)(ls),ds=n(153),ms=n(111),ps=n(112),fs=n(113),hs=function(e){var t=e.title,n=e.selectedFAs;return s.a.createElement(fr.a,{title:s.a.createElement("p",null,t),className:"larger"},s.a.createElement("div",{className:"abilityList"},n.map(function(e){return s.a.createElement("div",{key:e,className:"contentPart"},s.a.createElement("div",{className:"contentText"},s.a.createElement("p",null,e)))})))},bs=function(e){var t=e.school,n=e.task,a=e.courseId,i=e.abilities,o=e.centralContent,c=e.requirements,l=e.futureAbilities,u=n.deadline&&wa()(n.deadline).endOf("day")<wa()();return s.a.createElement("div",null,s.a.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},s.a.createElement("div",{className:"sv-text-portlet-content"},s.a.createElement("h1",{className:"h1"},n.name))),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},n.content&&s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.content}}))),n.description&&s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement("div",{className:["ked_boxed","taskBox",n.taskType].join(" "),style:{clear:"both"}},s.a.createElement("h2",null,Sa[n.taskType]||Object(h.a)(rs||(rs=r.e(["Uppgift"],["Uppgift"])))),s.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.description}}))),n.workingProcedure&&s.a.createElement("div",null,s.a.createElement("h3",{className:"h3"},Object(h.a)(as||(as=r.e(["Arbetsprocess"],["Arbetsprocess"])))),s.a.createElement("div",{className:"rich-text-readonly",dangerouslySetInnerHTML:{__html:n.workingProcedure}})),n.embeddedHtml&&s.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.embeddedHtml}}),s.a.createElement("br",null),"assignment"===n.taskType?s.a.createElement(s.a.Fragment,null,s.a.createElement("h2",null,"Inlämningsuppgift"),Object(Ya.a)(t)?s.a.createElement("p",null,"Här kan du som lärare se elevernas inlämnade arbeten."):Object(Ya.a)()?s.a.createElement("p",null,Object(h.a)(ss||(ss=r.e(["Detta är en inlämningsuppgift med inlämningsdatum ",""],["Detta är en inlämningsuppgift med inlämningsdatum ",""])),wa()(n.deadline).format("YYYY-MM-DD"))):s.a.createElement(s.a.Fragment,null,s.a.createElement("p",null,". Lämna in ditt arbete som en pdf, doc eller odt fil genom att dra det till fältet under."),n.deadline?s.a.createElement("p",null,s.a.createElement("b",null,"Den här uppgiften ",u?"skulle varit inlämnad ":"skall vara inlämnad ",wa()(n.deadline).format("YYYY-MM-DD"))):void 0),s.a.createElement(ds.a,{courseId:a,taskId:n.id,school:t,sendToUrkund:n.sendToUrkund}),s.a.createElement("br",null)):void 0,l.length>0?s.a.createElement(hs,{title:Object(h.a)(is||(is=r.e(["I den här uppgiften behandlas följande framtidsförmågor"],["I den här uppgiften behandlas följande framtidsförmågor"]))),selectedFAs:l}):null,c.length>0&&"exercise"!==n.taskType?s.a.createElement(fs.a,{title:"I den här uppgiften bedöms följande kunskapskrav",className:"larger",headerOpen:!1,requirements:c,idsToSubjectMap:n.idsToSubjectMap,explainedRequirements:n.explainedRequirements,partialRequirments:n.partialRequirments}):null,s.a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},i.length>0?s.a.createElement(ms.a,{title:"Den här uppgiften behandlar följande förmågor",className:"larger",headerOpen:!1,abilities:i}):null,o.length>0?s.a.createElement(ps.a,{title:"Den här uppgiften behandlar följande centrala innehåll",className:"larger",headerOpen:!1,centralContent:o}):null),s.a.createElement("hr",null),s.a.createElement("hr",null),n.resources&&n.resources.length>0&&s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement("h2",null,"Resurser kopplade till uppgiften"),s.a.createElement("div",{className:"taskContainer"},n.resources.map(function(e,t){return s.a.createElement("div",{key:t,className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("a",{href:e.url},e.name)))})),s.a.createElement("br",null)),s.a.createElement("br",null))},gs=Object(m.b)(function(e){return e.lazyRepo.map(function(t){return s.a.createElement(vs,r.a({},r.a({},e,{repo:t})))})}),vs=Object(k.a)(Object(m.b)(function(e){var t=e.school,n=e.courseId,a=e.activeTab,i=e.repo,o=e.taskId,c=e.draftId,l=e.contentId,u=e.history;return i.tasks.include("abilities","centralContent","knowledgeRequirements").id(o).map(function(e){return s.a.createElement(yr.a,{left:s.a.createElement(at.a,null,Object(Ka.b)(e).map(function(e){return s.a.createElement(s.a.Fragment,null,s.a.createElement(bs,{school:t,task:e,courseId:n,abilities:e.abilities,centralContent:e.centralContent,requirements:e.knowledgeRequirements,futureAbilities:e.futureAbilities}),c&&l&&s.a.createElement(s.a.Fragment,null,s.a.createElement("hr",null),s.a.createElement("button",{className:"btn",onClick:function(){return u.push("/"+t+"/courses/"+n+"/tabs/"+a+"/contents/"+l+"/tasks/"+o+"/drafts/"+c+"/edit")}},s.a.createElement("i",{className:"fa fa-lg fa-pencil"})," ",Object(h.a)(os||(os=r.e(["Fortsätt redigera"],["Fortsätt redigera"]))))))})),right:s.a.createElement(wr.a,{env:E.a,viewCourseUrl:b.b.KED_COURSE_VIEWER_URL}),rightWidth:5})})})),ks=Object(k.a)(function(e){var t=e.school,n=e.courseId,s=e.activeTab,i=e.draftId,o=e.editMode,c=(e.history,e.contentId),l=e.taskId,d=o?p.c:p.c.optimizeCache(),m=d.schools.name(t).single(),v=i?new f.a(d.branch(i)):m.map(function(e){return d.branch(e.officialBranchId)}),k=v.switchMap(function(e){return e.courseInstances.include("blocks","tabs").id(n)}).combineLatest(m).switchMap(function(e){var t=r.f(e,2),n=t[0],a=t[1],o=i?d.branch(i):d.branch(a.officialBranchId);return"theme-course"===n.type?new f.a({course:n,tabs:n.tabs,branch:o,block:null,schoolEntity:a}):s&&"$"!==s?o.courseBlocks.hasEdgesTo([s]).include("tabs").toValue().map(function(e){var t=r.f(e,1)[0];return{course:n,tabs:t.tabs,branch:o,block:t||n.blocks[0],schoolEntity:a}}):n.blocks.length>0?o.courseBlocks.include("tabs").id(n.blocks[0].id).map(function(e){return{course:n,tabs:e.tabs,branch:o,block:e,schoolEntity:a}}):new f.a({course:n,tabs:[],branch:o,block:null,schoolEntity:a})}).map(function(e){return r.a({},e,{tabs:e.tabs&&e.tabs.sort(Object(h.h)(["stepNo","order"]))})}),E=k.map(function(e){var n=e.course,c=e.tabs,l=e.branch,u=e.block,d=e.schoolEntity;return function(e,t,n,s,i,o,c,l,u){var d=this,m=y(),p=o.id,f=e.filter(function(e){return e.id===l})[0]||e[0];"step-course"===o.type&&f&&"step-course-tab"===f.type&&(e=e.filter(function(e){return"step-course-tab"===e.type&&e.stepNo===f.stepNo}));var v=(Object(Ya.a)()?e:e.filter(function(e){return"teacher-tab"!==e.tabClass})).map(function(e){return{key:e.id,name:e.tabTitle,draggable:!0,link:t?"/"+n+"/courses/"+p+"/tabs/"+e.id+(i?"/drafts/"+i:"")+"/edit":"/"+n+"/courses/"+p+"/tabs/"+e.id+(i?"/drafts/"+i:"")}}),k=[];if(t&&(m||o.allowAddTabs))if("theme-course"===o.type)k.push(a.createElement(oe,{type:"theme-course-tab",key:"$addTab",school:n,course:o,branch:c,draftId:i}));else{var E=f?f.stepNo:u.stepNumbers[0]||1;k.push(a.createElement(oe,{type:"step-course-tab",key:"$addTab",school:n,course:o,branch:c,draftId:i,block:u,stepNo:E}))}m&&k.push(a.createElement("a",{href:Object(g.f)(b.b.KED_SUBJECT_PLANNER_ADMIN_URL,{role:void 0})+"#/admin/courses/"+p+"/settings",key:"$settings",title:Object(h.a)(cs||(cs=r.e(["Inställningar"],["Inställningar"])))},a.createElement("i",{className:"fa fa-cog","aria-hidden":!0})," "));return{title:o.name,backgroundImage:null,tabs:v,cornerBox:a.createElement(us,{school:n,draftId:i,displayName:s.displayName||n}),buttons:k,activeTab:l||v[0]&&v[0].key,blocks:o.blocks&&o.blocks.sort(Object(h.g)("blockNo")).map(function(e){var t=e.id,r=e.name,a=e.stepNumbers;return{id:t,name:r,steps:a.map(function(e){return{isActive:f&&e===f.stepNo,stepNo:e,link:"/"+n+"/courses/"+p+"/blocks/"+t+"/steps/"+e}})}}),sortableTabs:t&&(m||o.allowReorderTabs),onTabDrop:function(t,n,a){return r.b(d,void 0,void 0,function(){var s,i;return r.d(this,function(r){return(s=st(e,t,n,a))&&(i=e.find(function(e){return e.id===t}))&&c.courseTabs.update(i,{order:s}),[2]})})}}}(c,o,t,d,i,n,l,s,u)});return a.createElement(a.Fragment,null,a.createElement(u.b,{lazyProps:E}),l?o?a.createElement(at.a,null,k.map(function(e){var n=e.branch,r=e.block,o=e.course;e.tabs;return a.createElement(Ja,{school:t,course:o,draftId:i,branch:n,activeTab:s,contentId:c,taskId:l,blockId:r&&r.id})})):a.createElement(gs,{school:t,courseId:n,lazyRepo:v,activeTab:s,taskId:l,contentId:c,draftId:i}):a.createElement(at.a,null,k.map(function(e){var r=e.branch,c=e.block,l=e.course,u=e.tabs;return a.createElement(va,{school:t,courseId:n,draftId:i,course:l,branch:r,tabs:u,activeTab:s,editMode:o,block:c})})))});var Es,ys,ws,Ts,Os=n(132),Ns=function(e){var t=e.title,n=e.courses;return s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("h3",null,t),s.a.createElement("div",{className:"taskContainer odd-even"},n.map(function(e){var t=e.id,n=e.name,r=e.description,a=e.tags;return s.a.createElement(de.a,null,s.a.createElement(me.a,null,s.a.createElement("div",{className:"studentCourse"},s.a.createElement(Fe.a,{to:"/courses/"+t},n),s.a.createElement("p",{className:"small"},r))),a.includes("active")?void 0:s.a.createElement(me.a,null,s.a.createElement("div",{className:"pill incomplete"},"Inaktiv")))})))},js=Object(m.b)(function(e){return(e.showInactive?Object(Os.a)():Object(Os.a)().tags("active")).orderBy("name").map(function(e){var t=e.id,n=e.name,r=e.type,a=e.description;return{id:t,name:n,type:r,tags:e.tags,description:a,url:"/courses/"+t}}).groupBy("type").map(function(e){return{themeCourses:e["theme-course"],stepCourses:e["step-course"]}}).map(function(e){var t=e.themeCourses,n=e.stepCourses;return s.a.createElement(s.a.Fragment,null,t&&s.a.createElement(Ns,{title:Object(h.a)(Es||(Es=r.e(["Temakurser"],["Temakurser"]))),courses:t}),n&&s.a.createElement(Ns,{title:Object(h.a)(ys||(ys=r.e(["Stegkurser"],["Stegkurser"]))),courses:n}))})}),Ss=function(e){var t=e.school,n=e.courseId,r=e.blockId,a=e.stepNo;return s.a.createElement(at.a,null,p.c.optimizeCache().schools.name(t).single().map(function(e){return p.c.branch(e.officialBranchId)}).switchMap(function(e){return e.courseBlocks.include("tabs").id(r).map(function(e){var r=e.tabs.filter(function(e){return""+e.stepNo==""+a}).sort(Object(h.g)("order"))[0];return r?s.a.createElement(c.a,{to:"/"+t+"/courses/"+n+"/tabs/"+r.id}):s.a.createElement(c.a,{to:"/"+t+"/courses/"+n})})}))},Cs=function(e){var t=e.school,n=e.courseId,a=p.c.schools.name(t).single(),i=p.a.getBranchId(a,n).map(function(e){return p.c.branch(e)}),o=(a.map(function(e){return p.c.branch(e.officialBranchId)}),i.switchMap(function(e){return e.courseInstances.id(n).map(function(e){return{title:e.name,tabs:[{name:Object(h.a)(ws||(ws=r.e(["Versionshistorik"],["Versionshistorik"]))),key:"versionhistory"}],buttons:[s.a.createElement(Fe.a,{to:"/"+t+"/courses/"+n,key:"$settings",title:Object(h.a)(Ts||(Ts=r.e(["Visa kursen"],["Visa kursen"])))},s.a.createElement("i",{className:"fa fa-eye","aria-hidden":!0})," ")]}})}));return s.a.createElement(s.a.Fragment,null,s.a.createElement(u.b,{lazyProps:o}),s.a.createElement(at.a,null,a.map(function(e){e.displayName;var t=e.officialBranchId;return s.a.createElement(Hr,{branchType:"school-branch",branchId:t,courseId:n,isAdmin:!1})})))},Is=n(150),Ds=n(77);n.d(t,"a",function(){return Ms}),Object(Is.a)();var xs,Rs,Ls=Object(m.b)(function(e){var t=e.render,n=e.courseIdOrName;return 36===n.length&&"-"===n[8]&&"-"===n[13]&&"-"===n[18]&&"-"===n[23]?p.b.mySchool.map(function(e){return t(e,n)}):p.c.courseInstances.name(n.replace("+"," ")).idsOnly().single().combineLatest(p.b.mySchool).map(function(e){var n=r.f(e,2),a=n[0],s=n[1];return t(s,a.id)})}),Ms=(xs=function(){return a.createElement("div",{onKeyDown:function(e){83===e.which&&(e.ctrlKey||e.metaKey)&&(e.preventDefault(),p.c.saveNow().then(function(){}))}},a.createElement(i.a,null,a.createElement(a.Fragment,null,a.createElement(o.a,{path:"/",exact:!0,render:function(){return a.createElement(c.a,{to:"/courses"})}}),a.createElement(o.a,{path:"/courses",exact:!0,render:function(){return a.createElement(a.Fragment,null,a.createElement(u.a,{title:Object(h.a)(Rs||(Rs=r.e(["Kurser"],["Kurser"]))),tabs:[],activeTab:"$"}),a.createElement(yr.a,{left:a.createElement(js,{showInactive:!0}),right:a.createElement(wr.a,{env:E.a,viewCourseUrl:b.b.KED_COURSE_VIEWER_URL}),rightWidth:5}))}}),a.createElement(o.a,{path:"/courses/:courseIdOrName",exact:!1,render:function(e){var t=e.match;return a.createElement(Ls,{courseIdOrName:t.params.courseIdOrName,render:function(e,t){return a.createElement(c.a,{to:"/"+e.name+"/courses/"+t})}})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId;return a.createElement(ks,{school:n,courseId:r})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId?",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId;return a.createElement(ks,{school:n,courseId:r,activeTab:s})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/settings/:draftId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.draftId;return a.createElement(ks,{school:n,courseId:r,activeTab:"$settings",draftId:s})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/drafts/:draftId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.draftId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,draftId:i})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/drafts/:draftId/edit",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.draftId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,draftId:i,editMode:!0})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/tasks/:taskId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.taskId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,taskId:i,editMode:!1})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/contents/:contentId/tasks/:taskId/drafts/:draftId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.taskId,o=t.draftId,c=t.contentId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,taskId:i,contentId:c,draftId:o,editMode:!1})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/contents/:contentId/tasks/:taskId/drafts/:draftId/edit",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.contentId,o=t.taskId,c=t.draftId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,contentId:i,taskId:o,draftId:c,editMode:!0})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/blocks/:blockId/steps/:stepNo",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.blockId,i=t.stepNo;return a.createElement(Ss,{school:n,courseId:r,blockId:s,stepNo:i})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/history",render:function(e){var t=e.match.params,n=t.school,r=t.courseId;return t.blockId,t.stepNo,a.createElement(Cs,{school:n,courseId:r})}}),a.createElement(l.a,null),a.createElement(d.a,null))))},function(e){function t(t){var n=e.call(this,t)||this;return n.state={dialogs:[]},n.openDialog=n.openDialog.bind(n),n.closeDialog=n.closeDialog.bind(n),n}return r.c(t,e),t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.render=function(){var e=this.state.dialogs;return s.a.createElement(Xe.Provider,{value:{openDialog:this.openDialog,closeDialog:this.closeDialog}},s.a.createElement(xs,r.a({},this.props)),s.a.createElement(Ds.a,{dialogs:e,popDialog:this.closeDialog}))},t}(s.a.Component))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"KEDAppCourseViewerKS",function(){return b});var a=n(1),s=n(26),i=(n(97),n(4)),o=n(0),c=n(2),l=n(13),u=n(191),d=n(16),m=n(8),p=n(59),f=i.a.bearerProvider.getBearer(),h=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isTokenLoaded:!1},n}return a.c(t,e),t.prototype.componentWillMount=function(){var e=this;f.then(function(){e.setState({isTokenLoaded:!0})}).catch(function(e){Object(c.n)(e)})},t.prototype.render=function(){var e=this.props.intl;return this.state.isTokenLoaded?o.createElement(d.a.Provider,{value:{intl:e}},o.createElement(u.a,null)):o.createElement("p",null,o.createElement(l.a,null),"V.g. vänta... autenticerar...")},t}(o.Component),b=Object(p.a)(Object(m.d)(h));s.a.components=a.a({},s.a.components,r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,