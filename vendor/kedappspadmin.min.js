var kedappspadmin=function(e){function t(t){for(var r,o,s=t[0],c=t[1],u=t[2],d=0,m=[];d<s.length;d++)o=s[d],a[o]&&m.push(a[o][0]),a[o]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(l&&l(t);m.length;)m.shift()();return i.push.apply(i,u||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,s=1;s<n.length;s++){var c=n[s];0!==a[c]&&(r=!1)}r&&(i.splice(t--,1),e=o(o.s=n[0]))}return e}var r={},a={4:0},i=[];function o(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var s=window.webpackJsonp_name_=window.webpackJsonp_name_||[],c=s.push.bind(s);s.push=t,s=s.slice();for(var u=0;u<s.length;u++)t(s[u]);var l=c;return i.push([223,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return o}),n.d(t,"k",function(){return c}),n.d(t,"g",function(){return u}),n.d(t,"h",function(){return l}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return f}),n.d(t,"n",function(){return h}),n.d(t,"l",function(){return p}),n.d(t,"b",function(){return b}),n.d(t,"c",function(){return g}),n.d(t,"e",function(){return v}),n.d(t,"j",function(){return y}),n.d(t,"m",function(){return k});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function i(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function o(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&i(n,t),n}var s=[].concat;function c(e){return s.apply([],e)}function u(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function l(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],i=t.slice(1);return function(e,t){return function e(t,n,r,i){var o=t[r];if(null==o)return-1;var s=n[r];return null==s?1:0===i.length?a(o,s):e(o,s,i[0],i.slice(1))}(e,t,n,i)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function f(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function h(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function p(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function b(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r],o=t(i),s=n[o];s?s.push(i):n[o]=[i]}return n}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r];n[t(i)]=i}return n}function v(e,t){var n,a,i={};try{for(var o=r.h(t),s=o.next();!s.done;s=o.next()){var c=s.value;c in e&&(i[c]=e[c])}}catch(e){n={error:e}}finally{try{s&&!s.done&&(a=o.return)&&a.call(o)}finally{if(n)throw n.error}}return i}function y(e,t){var n=g(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function k(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,i=n.length;a<i;++a){var o=n[a];if(r[a]!==o)return!1;if(e[o]!==t[o])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(28);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(19);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(24);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,,function(e,t,n){"use strict";var r=n(3),a=n(4),i=n(19),o=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),s=n(23);function c(e,t){return s.a[e].relationships[t]}function u(e,t){var n=function(e){var t=function(e){return!0};return e.from?l(t,function(t){return t.dateTime>=e.from}):e.to?l(t,function(t){return t.dateTime<e.to}):e.ids?l(t,function(t){return e.ids.includes(t.id)}):e.name?l(t,function(t){return t.name===e.name}):e.tags?l(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function l(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var f=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var i=a[r];localStorage.setItem("cache-bust-"+n+"-"+i,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return s.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+c(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),h=n(15);function p(e,t){for(var n=Object.keys(t),r=e,i=0,o=n;i<o.length;i++){var s=o[i];r===e&&(r=a.a({},e));var c=t[s];if(c&&"object"==typeof c){var u=Object.keys(c).filter(function(e){return e.startsWith("$")});if(u.length>0){for(var l=function(e){var t=c[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[s];a=Array.isArray(a)?a.slice():[],r[s]=a;for(var i=0,o=n;i<o.length;i++){var u=o[i];a.includes(u)||a.push(u)}break;case"$remove":var l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");a=r[s];Array.isArray(a)||(a=[]),r[s]=a.filter(function(e){return!l.includes(e)})}},d=0,m=u;d<m.length;d++){l(m[d])}continue}}r[s]=c}return r}function b(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,i=Object.keys(t),o=a.a({},e),s=0,c=i;s<c.length;s++){var u=c[s],l=t[u];if(l&&"object"==typeof l){var d=Object.keys(l).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var m=function(e){var t=l[e];switch(e){case"$unset":r?delete o[u]:o[u]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");s=(s=o[u])?a.a({},s):{},o[u]=s;var i=s.$remove;Array.isArray(i)&&(s.$remove=i.filter(function(e){return!n.includes(e)}),0===s.$remove.length&&delete s.$remove),d=(d=s.$add)?d.concat(n):n.slice(),s.$add=d;break;case"$remove":var s,c=t;if(!Array.isArray(c))throw new Error("$remove instruction must contain array");s=(s=o[u])?a.a({},s):{},o[u]=s;var d=s.$remove;Array.isArray(d)&&(s.$add=d.filter(function(e){return!c.includes(e)}),0===s.$add.length&&delete s.$add),i=(i=s.$remove)?i.concat(c):c.slice(),s.$remove=i}},f=0,h=d;f<h.length;f++){m(h[f])}continue}}o[u]=l}return o}var g=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,i,o;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(i=r[n]).op||i.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==i.op||i.targetBranchId&&i.branchId!==this.query.branchId&&i.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===i.op&&(i.deltaDoc.tags&&this.query.tags||i.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:o=this.getDataWithMutationsApplied(e,!1,this.data),this.data=o,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,i=this.includes,o=this.query,s=o.hasEdgesFrom?[].concat(o.hasEdgesFrom||[]):[],u=o.tags?[].concat(o.tags||[]):[];switch(t.op){case"update":return Object(h.e)(e,function(e){if(e.id===t.id){var r=p(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return i.forEach(function(r){var i,o=e[r];if(o){var s=Object(h.e)(o,function(e){if(e.id!==t.id)return e;var r=p(e,t.deltaDoc);return n&&(r.$meta="updating"),r});s!==o&&(e=a.a({},e,((i={})[r]=s,i)))}}),e});case"add-related":if(r===t.table&&-1!==i.indexOf(t.graphProp))return Object(h.e)(e,function(e){var r;if(e.id!==t.id)return e;var i=a.a({},t.relatedDoc);return n&&(i.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([i]),r))});if(o.hasEdgesFrom&&s.includes(t.id)&&r===c(t.table,t.graphProp)){if(!o.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&u.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return o.ids&&o.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==i.indexOf(t.graphProp)?Object(h.e)(e,function(e){var r,i=e[t.graphProp];return i?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?i.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):i.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):o.hasEdgesFrom&&s.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(o.include){var l=i.map(function(e){return{label:e,table:c(r,e)}}).filter(function(e){return e.table===t.table});if(l.length>0)return Object(h.e)(e,function(e){return l.forEach(function(r){var i,o=r.label,s=e[o];s&&(e=a.a({},e,((i={})[o]=n?s.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):s.filter(function(e){return e.id!==t.id}),i)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),v=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new o(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return g.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesFrom",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.hasEdgesTo=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesTo",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:f.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new i.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(35).a),y=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===g.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var i=a.find(function(t){return s.a[r.table].relationships[t]===e});if(i){for(var o={},c=0,l=r.data;c<l.length;c++){var d=l[c];u(t,d[i]).forEach(function(e){return o[e.id]=e})}var m=Object.keys(o).map(function(e){return o[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var f=u(t,r.data);return t.ids.every(function(e){return f.some(function(t){return t.id===e})})?{value:f}:"continue"}},i=0,o=this.queries;i<o.length;i++){var c=a(o[i]);if("object"==typeof c)return c.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,i=this.findQuery(n,r);i?i.timeoutHandle&&(clearTimeout(i.timeoutHandle),i.timeoutHandle=null):(i=new g(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(i)),i.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,i=(n.repo,this.findQuery(r,a));i&&(i.unsubscribe(e),0===i.subscriptions.length&&(i.timeoutHandle=setTimeout(function(){0===i.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==i}))},this.queries.length>50?500:3e5)))},e}(),k=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return c(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return c(e,t)})).some(function(e){return c(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),i=e.length,o=function(t){var i=e[t];if("update"===i.op){var o=r.findIndex(function(e){return"update"===e.op&&e.branchId===i.branchId&&e.id===i.id});o>=0&&(n[t]=a.a({},i,{deltaDoc:b(i.deltaDoc,r[o].deltaDoc)}),r.splice(o,1))}},s=0;s<i;++s)o(s);return n.concat(r)},e}(),E=n(39);function w(e,t,n,r,i,o){for(var s=function(n){switch(n.op){case"add-related":o||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:i}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(o||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:i,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((c=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var s=t[c];t=t.slice(0,c).concat([a.a({},s,{$meta:r?"removing":"persisted"})],t.slice(c+1))}else t=t.slice(0,c).concat(t.slice(c+1));break;case"update":if(n.branchId!==e)return"continue";var c;if((c=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!o)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[i],$meta:r?"adding":"persisted"}].concat(t);else{var u=t[c],l=u.contributors.slice();l.includes(i)||l.push(i);var d=b(u.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:l,$meta:r?"updating":"persisted"}].concat(t.slice(0,c),t.slice(c+1)):t.slice(0,c).concat(t.slice(c+1))}}},c=0,u=n;c<u.length;c++){var l=s(u[c]);if("object"==typeof l)return l.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var i=a[r],o=this.lookup[i];if(o.value){var s=w(o.query.branchId,o.value,e,n,this.getUserDisplayName(),!!o.query.tags);null===s&&(n||o.fetch()),s!==o.value&&(o.optimisticValue=s,n||(o.value=s),o.notify(s))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new S(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),S=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=i.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),O=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,i,o;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),i=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),f.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(k.merge(e,i),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return o=a.sent(),this.persistedVersion.dispatchError(o),o&&o.name&&o.name.startsWith("http4")?(this.dispatchError(o,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(o,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new i.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(s.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),I=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),j=function(){function e(e,t,n,r,a,i,o,c){var u=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=i,this.writer=o,this.cacheOptimized=c,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new k),i||(this.querySet=new y(this.mutationQueue)),o||(this.writer=new O(this.mutationQueue,this.querySet,e,t,n)),Object.keys(s.a).forEach(function(e){var t=new v(u,e,r||{});c&&(t=t.cacheOptimized()),u[e]=t}),this.deltas=new I(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new v(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var C=n(5),x=n(7);n.d(t,"c",function(){return D}),n.d(t,"d",function(){return N}),n.d(t,"b",function(){return R}),n.d(t,"a",function(){return L});var D=new j(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),N=Object(C.i)(x.b.KED_REALM),R={standardSchool:D.schools.name("standard").cacheOptimized().single(),get mySchool(){return D.schools.name(r.a.currentUser.school).cacheOptimized().single()}},L={getBranchId:function(e,t){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return D.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(C.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return D.courseBlocks.tags(e).idsOnly().concat(D.courseContents.tags(e).idsOnly()).concat(D.courseTabs.tags(e).idsOnly()).concat(D.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},,function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";var r=n(1),a=n(5);var i=n(16);n.d(t,"a",function(){return o}),n.d(t,"c",function(){return c}),n.d(t,"e",function(){return u}),n.d(t,"d",function(){return l}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return f});var o=["user","role","school","debug","testVersion","testversion","schoolType","schooltype"];function s(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function c(e,t){return s(e,t,"W")}function u(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function l(e,t){return e.roles.includes("ADMIN")||u(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,o=Object(i.b)(location.search),s=r.a({},o,{role:t,school:n}),c=Object(i.a)(s);a?location.href=""+a+c:(location.hash="#",location.search=c)}};function m(e){d.actAs(e)}function f(e,t){var n,a,s=Object(i.b)(location.search),c={};try{for(var u=r.h(o),l=u.next();!l.done;l=u.next()){var d=l.value;s[d]&&(c[d]=s[d])}}catch(e){n={error:e}}finally{try{l&&!l.done&&(a=u.return)&&a.call(u)}finally{if(n)throw n.error}}var m=Object(i.a)(r.a({},c,t)),f=e.indexOf("#");return f>=0?""+e.substr(0,f)+m+e.substr(f):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return s}),n.d(t,"e",function(){return c});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function i(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function o(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function s(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),i=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(i.apply(Uint8Array,[void 0,r.sent()])),o=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[o++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function c(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var i=e[r],o=t(i);o!==i&&(n===e&&(n=e.slice()),n[r]=o)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return o}),n.d(t,"c",function(){return s});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),i=t[0],o=t[1];return a[n?i.toLowerCase():i]=o}),a}function i(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function o(e){return"?"+i(e)}function s(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";n.d(t,"k",function(){return m}),n.d(t,"c",function(){return f}),n.d(t,"g",function(){return h}),n.d(t,"h",function(){return p}),n.d(t,"m",function(){return b}),n.d(t,"j",function(){return g}),n.d(t,"d",function(){return v}),n.d(t,"l",function(){return y}),n.d(t,"b",function(){return k}),n.d(t,"f",function(){return w}),n.d(t,"a",function(){return T}),n.d(t,"i",function(){return S}),n.d(t,"e",function(){return O});var r=n(1),a=n(6),i=n.n(a),o=n(5),s=n(38),c=n.n(s),u=n(12),l=n.n(u),d=n(3);function m(e,t,n,a,i){var s,u,l={},d=t.id,m=function(s){var c,u,m,f,h,p,b=a[s],g=e[s]||[],v=t[s];if(!v)return"continue";var y=v.map(function(e,t){return{doc:e,idx:t}}),k=y.filter(function(e){return!g.some(function(t){return t.id===e.doc.id})});try{for(var E=r.h(k),w=E.next();!w.done;w=E.next()){var T=w.value,S=(R=r.a({},T.doc)).$meta;delete R.$meta,"add"===S?(R.id||(R.id=Object(o.h)()),i.add(b,R)):"update"===S&&i.put(b,R),i.link(n,d,b,R.id,s),l[s]||(l[s]={}),l[s][T.idx]={$set:R}}}catch(e){c={error:e}}finally{try{w&&!w.done&&(u=E.return)&&u.call(E)}finally{if(c)throw c.error}}var O=g.filter(function(e){return!v.some(function(t){return t.id===e.id})});try{for(var I=r.h(O),j=I.next();!j.done;j=I.next()){var C=j.value;i.unlink(n,d,b,C.id,s)}}catch(e){m={error:e}}finally{try{j&&!j.done&&(f=I.return)&&f.call(I)}finally{if(m)throw m.error}}var x=y.filter(function(e){return g.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var D=r.h(x),N=D.next();!N.done;N=D.next()){var R,L=N.value;delete(R=r.a({},L.doc)).$meta,i.put(b,R),l[s]||(l[s]={}),l[s][L.idx]={$set:R}}}catch(e){h={error:e}}finally{try{N&&!N.done&&(p=D.return)&&p.call(D)}finally{if(h)throw h.error}}};try{for(var f=r.h(Object.keys(a)),h=f.next();!h.done;h=f.next()){m(h.value)}}catch(e){s={error:e}}finally{try{h&&!h.done&&(u=f.return)&&u.call(f)}finally{if(s)throw s.error}}return c()(t,l)}function f(e){return i()(e).format("YYMMDD HH:mm")}function h(e){return i()(e).format("YYMMDD")}function p(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function b(e,t,n){return c()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function g(e,t,n){return c()(t,{createdDate:{$set:e},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function v(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function y(e,t){var n=Date.now();return(e=b(n,e,t)).createdBy||(e=g(n,e,t)),e}function k(e,t,n){var a,i,o=r.a({},e),s=t[e.id];s&&(o.$etag=s);try{for(var c=r.h(n),u=c.next();!u.done;u=c.next()){var l=u.value,d=e[l].map(function(e){return k(e,t,[])});o[l]=d}}catch(e){a={error:e}}finally{try{u&&!u.done&&(i=c.return)&&i.call(c)}finally{if(a)throw a.error}}return o}function E(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return E(0,function(t){return t.readAsText(e)})}function T(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function S(e){var t=l()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function O(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,o,s,c,u;return r.d(this,function(l){switch(l.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,i=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),i&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return o=r.f.apply(void 0,[l.sent(),3]),s=o[0],c=o[1],u=o[2],s.tasks=c,s.abilities&&s.abilitiesOrder&&(s.abilities=s.abilitiesOrder.map(function(e){return s.abilities.find(function(t){return t.id===e})})),s.knowledgeRequirements&&s.knowledgeRequirementsOrder&&(s.knowledgeRequirements=s.knowledgeRequirementsOrder.map(function(e){return s.knowledgeRequirements.find(function(t){return t.id===e})})),s.centralContent&&s.centralContentOrder&&(s.centralContent=s.centralContentOrder.map(function(e){return s.centralContent.find(function(t){return t.id===e})})),a&&(s.templateChain=u),[2,s]}})})}},function(e,t,n){"use strict";var r=n(4),a=n(15),i=n(29),o=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new i.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var i=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),e}).catch(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,i,o){return r.b(this,void 0,void 0,function(){var s,c,u,l,d,m,f,h,p,b,g;return r.d(this,function(v){switch(v.label){case 0:return o&&"no-cache"===o.cache&&(i=r.a({},i,{nocache:Object(a.c)()})),s=i&&Object.keys(i).filter(function(e){return void 0!==i[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(i[e])}).join("&"),u=(c=this).authHeader,l=c.tokenInfo,d=c.bearerProvider,u||l||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=l=v.sent(),v.label=2;case 2:return l?l.expires<Date.now()?(console.log("Token expired. Refresh it:"),f=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:f.tokenInfo=l=v.sent(),v.label=4;case 4:u="Bearer "+l.token,v.label=5;case 5:return u&&(n.Authorization=u),h=this.baseUrl+e+(s?"?"+s:""),[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 6:return 401==(p=v.sent()).status&&this.bearerProvider?(b=p.headers.get("www-authenticate"),console.log("Got "+p.status+" from "+(this.baseUrl+e)),b&&/Bearer/i.test(b)?(g=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return g.tokenInfo=v.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 8:p=v.sent(),v.label=9;case 9:return[2,p]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),s=function(){function e(e,t,n,r,i,s,c){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=i,this.tokenUrl=s,this.tokenQuery=c,this.tokenInfo={token:null,expires:0},this.client=new o(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),c=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),i=n[2];if("R"!==i&&"W"!==i&&"S"!==i)throw new Error("Invalid access string: "+t);return new e(r,a,i)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function u(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var l=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return s}),n.d(t,"b",function(){return c}),n.d(t,"j",function(){return u}),n.d(t,"f",function(){return o}),n.d(t,"c",function(){return l});var d=function(){function e(e,t,n){this.http=new o(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var i,o,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(i=r.sent()).status?[3,3]:(o=l.bind,s=[void 0,i.status],[4,i.text()]);case 2:throw new(o.apply(l,s.concat([r.sent()])));case 3:return[4,i.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,o,s;return r.d(this,function(c){switch(c.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(i=c.sent()).status?[3,3]:(o=l.bind,s=[void 0,i.status],[4,i.text()]);case 2:throw new(o.apply(l,s.concat([c.sent()])));case 3:return[4,i.json()];case 4:return[2,c.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=l.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(l,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=l.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(l,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(i){return i.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(i){return i.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(i){return i.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(i){return i.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(i){return i.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,i=e.maximumTasksDisplayed,o=e.backgroundColor,s=e.progressColor,c=[];if(n>i)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var u=1;u<=n;u++)c.push(a.createElement("svg",{key:u},a.createElement("circle",{className:"circle-chart-background",fill:u>r?o:s,cx:"8",cy:"8",r:"8"})));return c},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return o});var o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,o=t.className,s=t.children,c=t.headerClassName,u=t.contentClassName,l=t.displayProgress,d=t.progressData,m=this.state.headerOpen;return a.createElement("div",{className:(o||"")+" openClose"+(m?" open":"")},a.createElement("div",{className:"openHeader"+(c?" "+c:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),l&&a.createElement(i,r.a({},d)))),a.createElement("div",{className:"openContent"+(u?" "+u:"")},s))},t}(a.Component)},function(e,t,n){"use strict";var r=n(4),a=n(19),i=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),o=n(15);function s(e){e.resources||(e.resources=[])}function c(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return s(e)})}})}(e,n);break;case"tasks":s(e)}}var u=sessionStorage.getItem("redir-hash");if(u)try{var l=JSON.parse(u),d=l.time,m=l.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return c(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return c(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var f=new i,h=Date.now(),p=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(o.a)(this.getBearer.bind(this)),this.refreshBearer=Object(o.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,f.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-h>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return i=this,o=this.tokenResponseMapper,[4,e.text()];case 4:return i.tokenInfo=o.apply(this,[r.sent()]),f.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),b={fetch:fetch.bind(self),btoa:btoa.bind(self)},g=function(e){function t(t,n,r){var a="string"!=typeof n?n:new p(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,b,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return f}),n.d(t,"b",function(){return p}),n.d(t,"c",function(){return b}),n.d(t,"a",function(){return g})},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(36);function i(e){var t=e.children,n=e.spinner,i=e.onError,o=e.noError;return r.createElement(a.a,{props:t,spinner:n,noError:o,onError:i,fn:function(e){return e}})}},function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"b",function(){return o}),n.d(t,"d",function(){return s}),n.d(t,"c",function(){return c}),n.d(t,"a",function(){return u});var r=n(1),a=n(6),i=n.n(a);function o(e){return"AT"===e?[32,51]:[1,25]}function s(e){return e.month()>=6?[i()(new Date(e.year(),7,1)),i()(new Date(e.year(),11,31))]:[i()(new Date(e.year(),0,1)),i()(new Date(e.year(),6,31))]}function c(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function u(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(33),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(i.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(30).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(4),a=n(31),i=n(42),o=n(35),s=n(47),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,i,o){r=!0,e=a,t=i,i&&n?n(null,i,o):n&&n(a,null,o)});if(r){var i=s.a.current;if(!i)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var o=i.subscriptions,c=i.observer;return o.push(a),n=c,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new o.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,i=[null,null],o={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),i[0]=e,null!==i[1]&&t(i,null,o)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),i[1]=e,null!==i[0]&&t(i,null,o)}),o})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,i={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,o,s){if(a=s,r&&(r.unsubscribe(),r=null),o)t(null,o,i);else try{var c=e(n);c&&"function"==typeof c.subscribe?r=c.subscribe(function(e,n,a){r=a,t(e,n,i)}):t(c,null,a)}catch(o){t(null,o,a)}}),i})},t}(a.a);c.prototype.map=Object(i.a)(c)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0);var i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var i=e(a);if(i)return i}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},function(e,t,n){"use strict";var r=n(39);n.d(t,"a",function(){return r.b}),n.d(t,"b",function(){return r.c})},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(4),a=n(31),i=n(42),o=n(30),s=n(29),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new s.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new o.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);c.prototype._map=Object(i.a)(c)},function(e,t,n){"use strict";n.d(t,"b",function(){return o}),n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(2);function o(e,t){return function(n){return a.createElement(s,r.a({props:n,fn:e},t))}}var s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={result:null,isLoading:!0},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.subscribe()},t.prototype.componentWillUnmount=function(){this.unsubscribe()},t.prototype.shouldComponentUpdate=function(e,t){return this.state.error!==t.error||this.state.isLoading!==t.isLoading||this.state.result!==t.result||!Object(i.m)(e.props,this.props.props)},t.prototype.componentDidUpdate=function(e){Object(i.m)(e.props,this.props.props)||(this.unsubscribe(),this.subscribe())},t.prototype.subscribe=function(){var e=this;this.setState({isLoading:!0}),this.subscription=this.props.fn(this.props.props).subscribe(function(t,n){return e.setState({result:t,error:n,isLoading:!1})})},t.prototype.unsubscribe=function(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null)},t.prototype.render=function(){var e=this.state,t=e.result,n=e.error,r=e.isLoading,i=this.props,o=i.spinner,s=i.onError,c=i.noError;return n?c?"":s?s(n):a.createElement("p",null,"Error: ",n.message):r?o||"":void 0===t?"":t},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r,a=n(1),i=n(0),o=n(2),s=function(e){var t=e.onClick,n=e.className,s=e.style,c=e.title;return i.createElement("div",{title:c||Object(o.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:s})}},,function(e,t,n){"use strict";n(31),n(30);var r=n(35);n.d(t,"a",function(){return r.a});var a=n(29);n.d(t,"b",function(){return a.a});var i=n(47);n.d(t,"c",function(){return i.a})},,,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),i=n(6),o=n.n(i),s=n(25);var c=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),u=n(2),l=n(51),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return f}),n.d(t,"a",function(){return h});var m,f=function(){function e(t,n,i,o){var s=this;this.http=new a.f(t,n,{bearerProvider:i}),this.userEmailGetter=o;var c=function(e){return"function"==typeof s[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){c(e)&&(s[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(s[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,i=Object.create(e),o={},s=e;s&&s!==Object.prototype;s=Object.getPrototypeOf(s))c(s);function c(t){Object.keys(t).forEach(function(s){!i.hasOwnProperty(s)&&n(s)&&(i[s]=function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var c=JSON.stringify(r.g([s],n)),u=o[c];if(void 0!==u){if(u.promise)throw u.promise;if(u.error)throw u.error;if(u.timeout>Date.now())return u.value}try{var l=t[s].apply(e,n).then(function(e){o[c]={timeout:Date.now()+a,value:e}}).catch(function(e){o[c]={timeout:Date.now()+a,error:e}});throw o[c]={timeout:Date.now()+a,promise:l},l}catch(e){if(e.then)throw e;o[c]={timeout:Date.now()+a,error:e}}})})}return i}(this,{isApiMethod:c})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,i,o,s;return r.d(this,function(c){switch(c.label){case 0:return c.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=c.sent()).status?[3,3]:(i=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(i.apply(a.c,o.concat([c.sent()])));case 3:return[4,n.json()];case 4:return[2,c.sent().courses];case 5:throw s=c.sent(),console.error("Error from EDS: "+s),new Error(Object(u.a)(m||(m=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,i,o;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(i=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(i.apply(a.c,o.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,s,c,u,d,m,f,h,p,b;return r.d(this,function(r){switch(e){case"en_sin":return[2,l.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,l.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=t.getMonth()>=6,i=a?t.getFullYear():t.getFullYear()-1,s=a?t.getFullYear()+1:t.getFullYear(),c=o()(i.toString(),"YYYY"),u=o()(s.toString(),"YYYY"),1!=c.week()&&(c=c.clone().add(1,"week")),1!=u.week()&&(u=u.clone().add(1,"week")),d=o()(c.clone()).week(32).startOf("week"),m=o()(c.clone()).week(51).endOf("week"),f=o()(u.clone()),h=o()(u.clone()).week(25).endOf("week"),p={startDate:new Date(i,d.month(),d.date()).toDateString(),endDate:new Date(i,m.month(),m.date()).toDateString()},b={startDate:new Date(s,f.month(),f.date()).toDateString(),endDate:new Date(s,h.month(),h.date()).toDateString()},[2,{firstTerm:p,secondTerm:b,holidays:n}]}return[2]})})},e}(),h=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new c(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new c({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},function(e,t,n){"use strict";n.d(t,"b",function(){return m}),n.d(t,"a",function(){return k});var r=n(1),a=n(0),i=n(143),o=n(18),s=n(2),c=n(5),u=n(3),l=[{name:"schools",text:Object(s.a)(f||(f=r.e(["Skolor"],["Skolor"]))),route:"/schools"},{name:"subjects",text:Object(s.a)(h||(h=r.e(["Ämnen"],["Ämnen"]))),route:"/subjects"}],d=[{name:"courseBuilder",text:Object(s.a)(p||(p=r.e(["Kursbyggaren"],["Kursbyggaren"]))),route:"/courses/new"},{name:"studentPage",text:Object(s.a)(b||(b=r.e(["Elevsida"],["Elevsida"]))),route:""},{name:"feedback",text:a.createElement("span",null,a.createElement("i",{className:"fa fa-commenting-o","aria-hidden":"true"})," Feedback"),route:"https://kg.kunskapsporten.se/kursbyggaren/"}];function m(e,t,n,r){var a=Object(c.h)();n.update({imageId:{$set:a},images:{$set:[{id:a,url:r,acl:["role:USER:R","schoolRole:"+u.a.currentUser.school+"/EMPLOYEE:S"],$meta:"add"}]}})}var f,h,p,b,g,v,y,k=function(e){var t=e.title,n=(e.isTemplate,e.host),c=e.course,f=(e.origCourse,e.backgroundImage),h=e.activePage,p=u.a.currentUser.roles.some(function(e){return"ADMIN"===e}),b=d;return p&&(b=l.concat(b)),a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},f&&a.createElement("style",null,"\n        .pageHeader {\n          background-image: url('"+f+"') !important;\n        }\n      "),a.createElement("div",{className:"pageHeader",onDragOver:c&&o.a,onDrop:c&&function(e){return function(e,t,n,a){return r.b(this,void 0,void 0,function(){var n,a,i,o,c,l,d,f;return r.d(this,function(h){switch(h.label){case 0:return e.stopPropagation(),e.preventDefault(),n=e.dataTransfer.files,a=null,i=Array.from(e.dataTransfer.items),n.length>0?(o=n[0]).size>2097152?(Object(s.n)(Object(s.a)(g||(g=r.e(["Kan inte ladda upp bilder större än 2 MB"],["Kan inte ladda upp bilder större än 2 MB"])))),[2]):((c=new FormData).append("files",o),[4,u.a.kedBackendClient.http.fetch("web-upload","put",{},{},{body:c})]):[3,3];case 1:return 200!==(l=h.sent()).status?(Object(s.n)(Object(s.a)(v||(v=r.e(["Kunde inte ladda upp filen till Google Storage"],["Kunde inte ladda upp filen till Google Storage"])))),[2]):[4,l.text()];case 2:return a=h.sent(),[3,7];case 3:d=function(e){var t;return r.d(this,function(n){switch(n.label){case 0:return(t=i[e]).type.match("^text/uri-list")?[4,new Promise(function(e){return t.getAsString(e)})]:[3,2];case 1:a=n.sent(),n.label=2;case 2:return[2]}})},f=0,h.label=4;case 4:return f<i.length?[5,d(f)]:[3,7];case 5:h.sent(),h.label=6;case 6:return++f,[3,4];case 7:return null==a?(Object(s.n)(Object(s.a)(y||(y=r.e(["Kunde inte hitta någon bild i innehållet"],["Kunde inte hitta någon bild i innehållet"])))),[2]):(m(0,0,t,a),[2])}})})}(e,n)}},a.createElement("a",null,a.createElement("h1",null,t)),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement("div",{className:"align-horizontal"}),a.createElement("div",{className:"horizontalMenu"},a.createElement("ul",null,b.map(function(t){return{item:t,isActive:h===t.name,callback:e.callbacks&&e.callbacks[t.name],givenRoute:e.routes&&e.routes[t.name],defaultRoute:t.route}}).filter(function(e){return e.callback||e.defaultRoute||e.givenRoute}).map(function(e){var t=e.item,n=e.isActive,r=e.callback,o=e.defaultRoute,s=e.givenRoute;return a.createElement("li",{key:t.name,className:n?"activePage":"",onClick:r},r?a.createElement("a",null,t.text):o||s?s||/^http[s]\:\/\//i.test(o)?a.createElement("a",{href:s||o},t.text):a.createElement(i.a,{to:o},t.text):a.createElement("a",null,t.text))})))))))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return c});var r=n(1),a=n(34),i=n(10),o=n(2);function s(e,t,n){var r=(void 0===n?{appendLeftovers:!1}:n).appendLeftovers,a={};if(!e||!t)return e;var i=e&&t?t.map(function(t){return a[t]=!0,e.find(function(e){return e.id===t})}).filter(function(e){return!!e}):e;if(r){var o=e.filter(function(e){return!a[e.id]});return i.concat(o)}return i}function c(e,t){var n,c;if(t)c=new a.a([t]);else{var u=e.tags.filter(function(e){return e.startsWith("course:")});if(0===u.length)return new a.a(e);c=(n=i.c.courses).tags.apply(n,r.g(u)).toValue()}return c.map(function(t){var n=Object(o.k)(t.map(function(e){return e.abilitiesOrder||[]})),r=Object(o.k)(t.map(function(e){return e.centralContentOrder||[]})),a=Object(o.k)(t.map(function(e){return e.knowledgeRequirementsOrder||[]})),i=Object.assign({},e);return i.abilities&&(i.abilities=s(e.abilities,n)),i.centralContent&&(i.centralContent=s(e.centralContent,r)),i.knowledgeRequirements&&(i.knowledgeRequirements=s(e.knowledgeRequirements,a)),i})}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(33),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(i.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=null,a=[function(){return r}];var i={get current(){return r},addProvider:function(e){a.push(e),o()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),o()}};function o(){Object.defineProperty(i,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},,function(e,t,n){"use strict";n.d(t,"e",function(){return a}),n.d(t,"d",function(){return i}),n.d(t,"a",function(){return o}),n.d(t,"b",function(){return s}),n.d(t,"c",function(){return c});var r=n(2);function a(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("sub:")}).map(function(e){return e.substr("sub:".length)}))}function i(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr(e.indexOf("|")+1)}))}function o(e,t,n){var a=(e||[]).filter(function(e){return!e.startsWith("course:")&&!e.startsWith("sub:")}),i=t.map(function(e){return"sub:"+e}),o=Object(r.k)(t.map(function(e){return n.map(function(t){return"course:"+e+"|"+t})}));return a.concat(i).concat(o)}function s(e,t){return o(e,a(e),t)}function c(e,t){return o(e,t,i(e))}},,function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,,,function(e,t,n){"use strict";n.d(t,"e",function(){return l}),n.d(t,"b",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"f",function(){return f}),n.d(t,"d",function(){return h}),n.d(t,"c",function(){return p});var r,a,i,o,s=n(1),c=n(2),u=n(18);function l(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function d(e){return m([e],e.tasks)}function m(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function f(e){return Object(c.k)([function(e){var t={};return Object(c.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(c.a)(r||(r=s.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(c.a)(a||(a=s.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(c.a)(i||(i=s.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(c.a)(o||(o=s.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function h(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}function p(e){return e.responsibleTeachers.map(function(e){return{name:e.name,email:Object(u.d)(e),access:e.access||"edit"}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r=n(1),a=n(9),i=n(89),o=n.n(i),s=n(90),c=n.n(s),u=n(59),l=n(60),d=n(0),m=n(7),f=n(6),h=n.n(f),p=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(o.a,c.a)),n.messages={sv:u,en:l},h()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},,,function(e){e.exports={"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"Lägg till eget arbetsmål","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"VT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"HT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.goals":"Egna lärandemål","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"Mål:","weekplanner.addLearningGoalTitle":"Lägg till eget lärandemål","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoal":"Eget lärandemål","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(20),o=n(2),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,s=t.markedIds,c=t.markMode,u=t.migratedIds,l=t.uncoveredIds,d=Object(o.b)(n,function(e){return e.group||"default"}),m=Object.keys(d);return a.createElement(i.a,{title:a.createElement("p",null,r),className:"larger"},m.map(function(t){return a.createElement(a.Fragment,{key:t},1===m.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=s.some(function(e){return e===t.id}),r=u&&!!u[t.id],i=l&&l[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return c&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(c?" selectable":"")+(n?" markedGreen":i?" markedRed":"")+(r?" migrated":""),title:r?c?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.left,n=e.right,a=e.rightWidth;return r.createElement("div",{className:"sv-row sv-layout"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},r.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},r.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},r.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-"+(12-a)},t),r.createElement("div",{className:"sv-layout sv-column-"+a},n))))))}},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(10),o=n(37),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>1&&(n=n.slice(1)),{infos:[e]})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),i.c.writer.onError(this._dbWriterError),i.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),i.c.writer.off(this._dbWriterError),i.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,i=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!i}).map(function(t){var n=t.message,r=t.details,i=t.retryable,s=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(o.a,{onClick:function(){return e.removeError(n)}})),r||i?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},s?"Dölj detailer":"Visa detailjer")," "):void 0,s?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),i?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){i.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r,a=n(1),i=n(0),o=n(2),s=function(e){function t(t){return e.call(this,t)||this}return a.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.knowledgeRequirements,n=e.markedIds,s=e.migratedIds,c=e.explainedRequirements,u=this.props,l=u.idsToMarkNotOk,d=u.markMode,m=u.onMarkChanged,f=u.onExplainedRequirementsChanged,h=["E","C","A"],p=[],b=t.slice(),g=null;!(g=h.map(function(e){var t=b.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=b[t];return b.splice(t,1),n})).every(function(e){return null===e});)p.push(g);return i.createElement("div",null,i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,h.map(function(e){return i.createElement("th",{key:e},e)}))),i.createElement("tbody",null,p.map(function(e,t){return i.createElement(i.Fragment,{key:t},i.createElement("tr",null,e.map(function(e,t){var r=e&&n&&n.indexOf(e.id)>=0,a=e&&l&&l[e.id],o=e&&s&&!!s[e.id];return i.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:e?e.name:""},className:(d?"selectable":"")+(o?" migrated":"")+(r?" markedGreen":a?" markedRed":""),onClick:d&&e?function(){return m(e.id,!r)}:void 0,title:o?d?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0})})),c&&i.createElement("tr",null,e.map(function(e,t){var s=e&&n&&n.indexOf(e.id)>=0;return i.createElement("td",{key:t},s?i.createElement("textarea",{placeholder:Object(o.a)(r||(r=a.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!d,value:c[e.id]||"",onChange:f&&function(t){return f(e.id,t.target.value)}}):void 0)})))}))))},t}(i.Component)},,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(7);r.b.ENVIRONMENT="test",r.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",r.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",r.b.KED_TOKEN_URL="",r.b.KED_CLIENT_ID="",r.b.KED_CLIENT_SECRET="",r.b.KED_REALM="SE1",r.b.KED_LOCALE=r.b.KED_LOCALE||"sv",r.b.KED_SCHOOL_LOCALE=r.b.KED_SCHOOL_LOCALE||"sv";var a=n(1),i=n(16),o=n(21),s=n(5),c=n(3),u=n(14),l=n(2);function d(e,t,n){var r=Object(i.b)(t),o=Object(l.e)(r,u.a),s=a.f(Object(i.c)(e),2),c=s[0],d=s[1],m=Object(i.b)(d);return c+Object(i.a)(a.a({},m,o,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function f(e,t,n){return new s.e(o.c,o.d,e+t.mail+location.search,r.b.KED_CLIENT_ID,r.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var h,p,b=c.a.currentUser&&c.a.currentUser.mail;if(b)if(r.b.KED_TOKEN_PATH){var g=d(r.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);c.a.bearerProvider=(p=m(h=g,b),new o.b(h,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){c.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,p),{token:t.token,expires:Date.now()+354e4}},p)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(c.a.currentUser=JSON.parse(t))}(m(g,b));var v=d(r.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);c.a.googleTokenProvider=function(e,t){var n=m(e,t);return new o.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(v,b)}else{if(!(r.b.KED_TOKEN_URL&&r.b.KED_CLIENT_ID&&r.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");c.a.bearerProvider=f(r.b.KED_TOKEN_URL,c.a.currentUser,["kedbackend","EDS"]),c.a.googleTokenProvider=f(r.b.KED_TOKEN_URL+"/google",c.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}c.a.kedBackendClient=new o.a(r.b.KED_API_URL,c.a.bearerProvider);var y=n(43);c.a.edsClient=new y.b(o.c,r.b.EDS_API_URL,c.a.bearerProvider,function(){return c.a.currentUser.mail})},,,,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(143),o=n(34),s=n(22),c=function(){return a.createElement("img",{style:{border:0,margin:0,padding:0},className:"ellipsis-loader"})},u=n(14),l=n(2);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return f});var d,m=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.dragState=new o.a({tabBeingDragged:"",tabBeingHovered:"",insertBefore:!1,originClientX:-1}),t}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props.lazyProps;return a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer",style:{overflow:"visible"}},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},a.createElement(s.a,{noError:!0},t.map(function(e){var t=e.backgroundImage;return t&&a.createElement("style",null,"\n              .pageHeader {\n                background-image: url('"+t+"') !important;\n              }\n            ")})),a.createElement("div",{className:"pageHeader"},a.createElement("a",null,a.createElement("h1",null,a.createElement(s.a,{noError:!0},t.map(function(e){return a.createElement(a.Fragment,null,e.title)})))),a.createElement(s.a,{noError:!0},t.map(function(e){var t=e.cornerBox;return t&&a.createElement("div",{className:"pageHeaderCornerBox"},t)})),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement(s.a,{spinner:a.createElement(c,null)},t.map(function(t){var n=t.tabs,o=t.buttons,c=t.activeTab,m=t.blocks,f=t.sortableTabs,h=t.onTabDrop;return a.createElement(a.Fragment,null,m?a.createElement("div",{className:"align-horizontal"},m.map(function(e){return a.createElement("div",{key:e.id,className:"horizontalItem top"},a.createElement("div",{className:"align-vertical"},a.createElement("div",null,a.createElement("a",null,e.name)),a.createElement("div",null,a.createElement("div",{className:"btn-group"},e.steps.map(function(e){return a.createElement(a.Fragment,{key:e.stepNo},a.createElement(i.a,{to:e.link,className:"btn btn-small step-button"+(e.isActive?" activePage":"")},e.stepNo),a.createElement("a",null))})))))})):null,a.createElement("div",{className:"horizontalMenu"},a.createElement(s.a,null,e.dragState.map(function(t){var s=t.tabBeingDragged,m=t.tabBeingHovered,p=t.insertBefore,b=t.originClientX;return a.createElement("ul",{className:f?"sortable":null,onDrop:h?function(t){m&&s&&h(s,m,p?"before":"after"),e.dragState.dispatch(r.a({},e.dragState.value,{tabBeingHovered:"",tabBeingDragged:""}))}:null},n.map(function(t,n){var o=t.name,h=t.key,g=t.link,v=t.onClick,y=t.draggable,k=c===h||"$"===c&&0===n,E=e.dragState;return o=o||Object(l.a)(d||(d=r.e(["(Namnlös flik)"],["(Namnlös flik)"]))),a.createElement(a.Fragment,{key:h},p&&m===h?a.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,a.createElement("li",{className:[k?"activePage":"",h===s?"drag-source":"",f&&y?"draggable":""].filter(function(e){return e}).join(" "),draggable:f&&y,onDragStart:f&&y?function(e){e.dataTransfer.effectAllowed="move",E.dispatch(r.a({},E.value,{originClientX:e.clientX,tabBeingDragged:h}))}:null,onDragOver:f?function(e){s!==h?s&&(e.preventDefault(),e.dataTransfer.dropEffect="move",E.dispatch(r.a({},E.value,{tabBeingHovered:h,insertBefore:b>e.clientX}))):E.dispatch(r.a({},E.value,{tabBeingHovered:""}))}:null,onDragEnd:function(t){e.dragState.dispatch(r.a({},E.value,{tabBeingHovered:"",tabBeingDragged:""}))}},g?g.startsWith(":")?a.createElement("a",{href:Object(u.f)(g.substr(1),{})},o):a.createElement(i.a,{to:g},o):v?a.createElement("a",{onClick:v},o):o),p||m!==h?null:a.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}),o&&o.map(function(e,t){return a.createElement("li",{className:"action-tab",key:"btn"+t},e)}))}))))}))))))))},t}(a.Component),f=function(e){return a.createElement(m,{lazyProps:new o.a(e)})}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n.n(r),i=function(e){var t=e.available,n=e.selected,r=e.onChange;return a.a.createElement("div",{className:"taskContainer"},t.map(function(e){var t=e.key,i=e.name,o=n.includes(t);return a.a.createElement("div",{key:t,className:"align-horizontal"},a.a.createElement("div",{className:"horizontalItem top",onClick:function(){return r(o?n.filter(function(e){return e!=t}):n.concat(t),t,o)}},a.a.createElement("div",{className:"checkBox"+(o?" checked":"")})),a.a.createElement("div",{className:"horizontalItem top"},i))}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return f}),n.d(t,"b",function(){return h});var r,a,i,o=n(1),s=n(0),c=n(44),u=n(2),l=n(3),d=n(5),m=n(143),f=function(e){return s.createElement("div",{style:{outline:0}},s.createElement(c.a,{title:"Skolor",activePage:"schools",callbacks:{schools:function(){return location.hash="#/schools"}},routes:{feedback:e.feedbackUrl}}),s.createElement(h,o.a({},e)))},h=function(e){function t(t){var n=e.call(this,t)||this;return n.state=null,n}return o.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(u.n)(e)})},t.prototype.load=function(){return o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:return this.props.id?(e=this.props.id,[4,l.a.kedBackendClient.get("schools",e)]):[3,2];case 1:return t=n.sent(),this.origSchool=o.a({},t),this.setState(o.a({},t)),[3,3];case 2:this.setState({id:Object(d.h)(),officialBranchId:Object(d.h)(),isGymnasium:"gymnasium"===this.props.type,isPrimarySchool:"primary"===this.props.type}),n.label=3;case 3:return[2]}})})},t.prototype.save=function(){return o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:if(e=new d.a,(t=o.a({},this.state,{tags:(this.state.tags||[]).filter(function(e){return["primary","gymnasium"].indexOf(e)<0})})).isPrimarySchool&&t.tags.push("primary"),t.isGymnasium&&t.tags.push("gymnasium"),!t.isGymnasium&&!t.isPrimarySchool)throw new Error(Object(u.a)(r||(r=o.e(["Skolan måste antingen vara gymnasium eller grundskola"],["Skolan måste antingen vara gymnasium eller grundskola"]))));if(this.origSchool){if(this.origSchool.name!==this.state.name)throw new Error("Skolans namn får inte ändras. Kontakta Vemendo AB.");t.officialBranchId||(t.officialBranchId=Object(d.h)(),this.addSchoolBranch(t,e)),e.put("schools",t)}else t.acl=["role:USER:R"],t.acl.push(new d.b("schoolRole",t.name+"/EMPLOYEE","W").toString()),e.add("schools",t),this.addSchoolBranch(t,e);return[4,l.a.kedBackendClient.batch(e.mutationRequests)];case 1:return n.sent(),location.hash="#/schools",[2]}})})},t.prototype.addSchoolBranch=function(e,t){var n={id:e.officialBranchId,name:e.name,schoolId:e.id,acl:["role:USER:R",new d.b("schoolRole",e.name+"/EMPLOYEE","W").toString()]};t.add("branches",n)},t.prototype.deleteSchool=function(){return o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:return prompt(Object(u.a)(a||(a=o.e(['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'],['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'])),this.state.name))!==this.state.name?[3,3]:[4,l.a.kedBackendClient.list("branches",{ids:[this.state.officialBranchId],include:"approvedChildren",flags:["includeIdsOnly"]})];case 1:return e=n.sent(),(t=new d.a).delete("schools",this.state.id),e[0].approvedChildren.forEach(function(e){var n=e.id;t.delete("branches",n)}),t.delete("branches",this.state.officialBranchId),[4,l.a.kedBackendClient.batch(t.mutationRequests)];case 2:return n.sent(),location.hash="#/schools",[3,4];case 3:alert("Skolan togs inte bort eftersom det namn du angav inte stämmer."),n.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=!!t.id,a=this.state,c=this.origSchool,d=l.a.currentUser.roles.some(function(e){return"ADMIN"===e});return s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},s.createElement("h2",null,n),s.createElement("hr",null),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Namn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:!a||!a.name,disabled:!d||r,tabIndex:1,size:50,value:a?a.name:"",onChange:function(t){return e.setState({name:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Visningsnamn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:a&&!a.displayName,disabled:!d,tabIndex:1,size:50,value:a?a.displayName:"",onChange:function(t){return e.setState({displayName:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),a&&a.isGymnasium?s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"EDS namn (gymnasium):"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNameGymn:"",onChange:function(t){return e.setState({edsSchoolNameGymn:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})):null,a&&a.isPrimarySchool?s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"EDS namn (grundskola):"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNamePrim:"",onChange:function(t){return e.setState({edsSchoolNamePrim:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})):null,s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Typ:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"checkbox",name:"schoolTypePrimary",disabled:!d,checked:a&&a.isPrimarySchool,tabIndex:1,value:"primary",onChange:function(t){return e.setState({isPrimarySchool:t.target.checked})}})," Grundskola"),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"}),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"checkbox",name:"schoolTypeGymnasium",disabled:!d,checked:a&&a.isGymnasium,tabIndex:1,value:"gymnasium",onChange:function(t){return e.setState({isGymnasium:t.target.checked})}})," Gymnasium"),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("br",null),d&&r&&s.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.deleteSchool().catch(u.n)}},"Ta bort skola"),s.createElement("div",{className:"pull-right"}," "),s.createElement(m.a,{className:"btn btn-warning btn-large pull-right",to:"/schools"},"Avbryt"),d&&s.createElement("a",{tabIndex:1,className:"btn btn-large",onClick:function(){c&&c.name!==a.name&&!confirm(Object(u.a)(i||(i=o.e(["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."],["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."]))))||e.save().catch(u.n)}},"Spara")))},t}(s.Component)},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(1),a=n(0),i=n(3),o=n(44),s=n(13),c=n(104),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(s.a,null));var e=this.state.subject,t=e.name;e.code,e.courseTemplates,e.schoolType;return a.createElement("div",null,a.createElement(o.a,{title:t,activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),a.createElement(c.a,{id:this.props.id}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(10),i=n(3);function o(e){var t=e.school,n=e.draftRepo,o=e.course;return r.b(this,void 0,void 0,function(){var e,s;return r.d(this,function(r){switch(r.label){case 0:return"standard"!==t?[3,1]:(n.merge(),e=a.c,[3,3]);case 1:return[4,a.c.schools.name(t).single().map(function(e){return e.officialBranchId}).load()];case 2:s=r.sent(),n.merge(s),e=a.c.branch(s),r.label=3;case 3:return e.courseInstances.update(o,{modifiedDate:Date.now(),modifiedBy:{name:i.a.currentUser.displayName,url:"mailto:"+i.a.currentUser.mail}}),[2]}})})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(3),o=n(13),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(o.a,null));var e=this.state.subject,t=e.name,n=e.code,r=e.courseTemplates,i=e.schoolType;return a.createElement("div",null,"primary"===i?a.createElement(a.Fragment,null,a.createElement("h2",null,"Grundskoleämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var n=e.id,r=(e.code,e.publishable,e.points,e.schoolGrade);return a.createElement("li",{key:n,className:"complete"},t," för årskurs ",r)}))):a.createElement(a.Fragment,null,a.createElement("h2",null,"Kurser för ämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var t=e.id,n=e.name,r=(e.code,e.publishable,e.points);return a.createElement("li",{key:t,className:"complete"},n," - ",r,"p")}))))},t}(a.Component)},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(10);function a(){return r.c.courseInstances.hasEdgesFrom([r.d])}},,function(e,t,n){"use strict";var r,a,i,o=n(1),s=n(0),c=n(44),u=n(3),l=n(2),d=n(143),m=n(14),f=n(13),h=function(e){var t=e.schools,n=e.viewCourseUrl,c=u.a.currentUser.roles.some(function(e){return"ADMIN"===e});return s.createElement("div",{className:"editable-school-list"},s.createElement("div",null,t?s.createElement("table",null,s.createElement("tbody",null,t.map(function(e){return s.createElement("tr",{className:"align-horizontal",key:e.id},s.createElement("td",null,s.createElement(d.a,{className:"editItem",to:"/schools/"+e.id+"/edit"})),s.createElement("td",null,s.createElement("p",null,e.name)),s.createElement("td",null,s.createElement("p",null,s.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"EMPLOYEE",school:e.name})}},"Agera som lärare på denna skola"))),s.createElement("td",null,s.createElement("p",null,s.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"STUDENT",school:e.name,url:n})}},"Agera som elev på denna skola"))))}))):s.createElement("p",null,s.createElement(f.a,null),"V.g. vänta medan skolor laddas")),s.createElement("br",null),t&&c&&s.createElement(d.a,{to:"/schools/new/"+e.type,className:"btn"},"gymnasium"==e.type?Object(l.a)(r||(r=o.e(["Lägg till gymnasieskola"],["Lägg till gymnasieskola"]))):"primary"==e.type?Object(l.a)(a||(a=o.e(["Lägg till grundskola"],["Lägg till grundskola"]))):Object(l.a)(i||(i=o.e(["Lägg till skola"],["Lägg till skola"])))))};n.d(t,"a",function(){return p}),n.d(t,"b",function(){return b});var p=function(e){return s.createElement("div",{style:{outline:0}},s.createElement(c.a,{title:"Skolor",activePage:"schools",routes:{feedback:e.feedbackUrl}}),s.createElement(b,{viewCourseUrl:e.viewCourseUrl}))},b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schools:null},n}return o.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(l.n)(e.message||e)})},t.prototype.load=function(){return o.b(this,void 0,void 0,function(){var e;return o.d(this,function(t){switch(t.label){case 0:return[4,u.a.kedBackendClient.list("schools")];case 1:return e=t.sent(),this.setState({schools:e}),[2]}})})},t.prototype.render=function(){var e=this.state.schools;return e&&e.sort(Object(l.g)("name")),s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},e?s.createElement(s.Fragment,null,s.createElement("div",null,s.createElement("h2",null,"Gymnasieskolor"),s.createElement(h,{schools:e.filter(function(e){return e.isGymnasium}),viewCourseUrl:this.props.viewCourseUrl,type:"gymnasium"})),s.createElement("div",null,s.createElement("h2",null,"Grundskolor"),s.createElement(h,{schools:e.filter(function(e){return e.isPrimarySchool}),viewCourseUrl:this.props.viewCourseUrl,type:"primary"}))):s.createElement(f.a,null)))},t}(s.Component)},function(e,t){},,function(e,t,n){"use strict";function r(e){return(e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)})}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(34),i=n(10),o=n(45);function s(e){var t,n=e.map(function(e){return e.startsWith("course:")?e:"course:"+e});return 0===n.length?new a.a([]):(t=i.c.courses.include("abilities","centralContent","knowledgeRequirements")).tags.apply(t,r.g(n)).filter(function(e){return e.isTemplate}).map(function(e){return r.a({},e,{abilities:Object(o.a)(e.abilities,e.abilitiesOrder),centralContent:Object(o.a)(e.centralContent,e.centralContentOrder),knowledgeRequirements:Object(o.a)(e.knowledgeRequirements,e.knowledgeRequirementsOrder)})}).toValue()}},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),i=n(36),o=n(13),s=n(3),c=Object(i.b)(function(){return s.a.kedBackendClient.http.status.combineLatest(s.a.edsClient.http.status).map(function(e){var t=r.f(e,2),n=t[0],i=t[1];return a.createElement("div",{className:"loading-indicator"},a.createElement("div",{className:"indicator"},n.numOutstandingOperations>0||i.numOutstandingOperations>0?a.createElement(o.a,null):void 0))})})},,,,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(2),o=n(3),s=n(12),c=n.n(s);function u(e){switch(e.trim()){case"3":case"1-3":return["1-3"];case"6":case"4-6":return["4-6"];case"7-9":case"9":return["7-9"];case"1":case"1s":return["1-3"];case"1-6":return["1-3","4-6"];case"4-9":return["4-6","7-9"];default:throw new Error("Unexpected year in Skolverket XML: "+e+". Expecting 3,6,9 or 1-3, 4-6, 7-9")}}var l=n(5);function d(e,t){var n,a,i=new Set,o=new Map,s=new Set;t.forEach(function(t){if(t=t.trim(),e.has(t))o.set(t,e.get(t));else{var n=Object(l.h)();console.log("New id: "+n+". Text: "+t),o.set(t,n),s.add(n)}});try{for(var c=r.h(e.entries()),u=c.next();!u.done;u=c.next()){var d=r.f(u.value,2),m=d[0],f=d[1];-1===t.indexOf(m)&&i.add(f)}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}return{removedIds:i,newTexts:o,idsToAdd:s}}var m=1;var f=new Set("alla allt att av blev bli blir blivit de dem den denna deras dess dessa det detta dig din dina ditt du där då efter ej eller en er era ert ett från för ha hade han hans har henne hennes hon honom hur här i icke ingen inom inte jag ju kan kunde man med mellan men mig min mina mitt mot mycket ni nu när någon något några och om oss på samma sedan sig sin sina sitta själv skulle som så sådan sådana sådant till under upp ut utan vad var vara varför varit varje vars vart vem vi vid vilka vilkas vilken vilket vår våra vårt än är åt över kring".split(" "));function h(e){return new Set(function(e){var t=document.createElement("div");return t.innerHTML=e,""+t.innerText}(e).replace(/[^\w\såäö]/gi,"").toLowerCase().split(/\s/).map(function(e){return e.trim()}).filter(function(e){return!!e}).filter(function(e){return!f.has(e)}))}function p(e,t,n,a,i){var o=new Map;e=e.map(function(e){return r.a({},e,{name:e.name.trim()})}).filter(function(e){return!!e.name});var s=new Map;t.forEach(function(e){return s.set(e.html,e)});var c=new Map;e.forEach(function(e){return c.set(e.name,e)}),e=e.filter(function(e){return!s.has(e.name)}),t=t.filter(function(e){return!c.has(e.html)}),e.forEach(function(e){return o.set(e.id,{gradeStep:e.gradeStep,oldText:e.name,lexemes:h(e.name),matchLevel:0})});for(var u=[];t.length>0;){var l=t[0],d=p(l);if(d){d.newText&&t.push({html:d.newText,gradeStep:d.gradeStep});var f=o.get(d.id);f.newText=l.html,f.matchLevel=d.myMatchLevel,f.newId=n.get(l.html)}else u.push(l);t.shift()}return u.forEach(function(e){o.set("fictiveOldId"+ ++m,{newId:n.get(e.html),newText:e.html,gradeStep:e.gradeStep,matchLevel:0,lexemes:new Set})}),o.forEach(function(e){var t=e.oldText,n=e.newText;t&&n&&r.g(h(t)).join(" ")===r.g(h(n)).join(" ")&&(e.isTypoFix=!0)}),console.log("IdsToMigrate",r.g(o.values()).map(function(e){var t=e.oldText,n=e.lexemes;return r.g(n).join(" ")+": "+t})),o;function p(e){var t=h(e.html);return r.g(o.entries()).filter(function(t){var n=r.f(t,2);n[0];return n[1].gradeStep===e.gradeStep}).map(function(e){var n=r.f(e,2),a=n[0],i=n[1],o=i.gradeStep,s=i.matchLevel,c=i.newText,u=i.lexemes;return{id:a,gradeStep:o,matchLevel:s,newText:c,myMatchLevel:b(t,u)}}).filter(function(e){return e.myMatchLevel>=50&&(!e.matchLevel||e.matchLevel<e.myMatchLevel)}).sort(function(e,t){return t.myMatchLevel-e.myMatchLevel})[0]}function b(e,t){if(0===e.size||0===t.size)return 0;var n=0,r=0;return e.forEach(function(e){t.has(e)&&++n}),t.forEach(function(t){e.has(t)&&++r}),Math.round(100*Math.max(n/e.size,r/t.size))}}function b(e,t,n,a){return r.b(this,void 0,void 0,function(){function s(e,t,r){var i=!Z.has(e.name);Z.add(e.name),z.forEach(function(t,n){var r=t.newId,i=t.oldText;a.push({mutations:function(t){i&&t.unlink2("courses",e.id,"abilities",n),r&&t.link2("courses",e.id,"abilities",r)}})}),e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)});var o=r.ccsToMigrate,s=r.krsToMigrate;o.forEach(function(t,n){var r=t.newId,o=t.newText,s=t.oldText,c=t.isTypoFix;a.push({change:i&&(s?o?c?"Tryckfelsrättning Centralt Innehåll":"Uppdaterat Centralt Innehåll":"Borttaget Centralt Innehåll":"Nytt Centralt Innehåll"),content:"<h4>"+e.name+"</h4><strike>"+(s||"")+"</strike><br/>"+(o||""),mutations:function(t){if(r&&M.has(r)&&!V.has(r)){var a={id:r,name:o,acl:["role:USER:R"],dateTime:Date.now()};t.add("central-content",a),V.add(r)}s&&t.unlink2("courses",e.id,"centralContent",n),r&&t.link2("courses",e.id,"centralContent",r)}})}),e.centralContentOrder=t.centralContent.map(function(e){var t=e.html;return B.get(t)}),s.forEach(function(t,n){var r=t.newId,o=t.newText,s=t.gradeStep,c=t.oldText,u=t.isTypoFix;a.push({change:i&&(c?o?u?"Tryckfelsrättning Kunskapskrav":"Uppdaterat Kunskapskrav":"Borttaget Kunskapskrav":"Nytt Kunskapskrav"),content:"<h4>"+e.name+"</h4><strike>"+(c||"")+"</strike><br/>"+(o||""),mutations:function(t){if(r&&K.has(r)&&!V.has(r)){var a={id:r,name:o,gradeStep:s,acl:["role:USER:R"],dateTime:Date.now()};console.log("Adding Knowledge-Requirement "+r+": "+o),t.add("knowledge-requirements",a),V.add(r)}c&&t.unlink2("courses",e.id,"knowledgeRequirements",n),r&&t.link2("courses",e.id,"knowledgeRequirements",r)}})}),e.knowledgeRequirementsOrder=t.knowledgeRequirements.map(function(e){return F.get(e.html)}),(z.size>0||o.size>0||s.size>0)&&a.push({change:e.isTemplate?"Uppdaterad Kursmall":"Uppdaterad Kursinstans",content:e.isTemplate?""+e.name:e.name+". Skola: "+(e.school||"ej angiven")+". Beskrivning: "+(e.description||""),mutations:function(t){return t.put("courses",e)}})}function c(){return r.b(this,void 0,void 0,function(){function e(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return 0===e.length?[2,[]]:(new Map,console.log("Number of ids: "+e.length),[4,o.a.kedBackendClient.list("tasks",r.a({},t,{hasEdgesTo:e}))]);case 1:return[2,n.sent()]}})})}var t,n,s,c,u,l,d,m,f;return r.d(this,function(o){switch(o.label){case 0:return s=r.g(z.keys(),Object(i.k)(W.map(function(e){return r.g(e.ccsToMigrate.keys(),e.krsToMigrate.keys())}))).filter(function(e){return!e.startsWith("fictiveOldId")}),c=Date.now(),[4,e(s,{include:["abilities","knowledgeRequirements","centralContent"],flags:["includeIdsOnly"]})];case 1:u=o.sent(),l=function(e){var t,n,i,o,s,u,l,d,m=e.migratedTexts||{abilities:{},centralContent:{},knowledgeRequirements:{}};e.migratedTexts={abilities:{},centralContent:{},knowledgeRequirements:{}};var f=[],h=[],p=function(t){var n=z.get(t);if(n){var r=n.newId,a=n.newText,i=n.isTypoFix,o=n.oldText,s=t;m.abilities[t]&&(o=m.abilities[t].oldText,s=m.abilities[t].oldId),r&&o!==a&&(i||(e.migratedTexts.abilities[r]={oldId:s,oldText:o,importDate:c})),f.push(function(n){n.unlink2("tasks",e.id,"abilities",t),r&&n.link2("tasks",e.id,"abilities",r)}),h.push("<strike>"+o+"</strike>"),r&&h.push(a)}};try{for(var b=r.h(e.abilities),g=b.next();!g.done;g=b.next()){p(g.value.id)}}catch(e){t={error:e}}finally{try{g&&!g.done&&(n=b.return)&&n.call(b)}finally{if(t)throw t.error}}var v=new Set(e.tags?e.tags.filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)}):[]),y=new Set;try{for(var k=r.h(W),E=k.next();!E.done;E=k.next()){var w=E.value,T=w.krsToMigrate,S=w.ccsToMigrate,O=w.courseCode;if(0===v.size||v.has(O)){var I=function(t){var n=S.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,o=n.isTypoFix,s=t;m.centralContent[t]&&(i=m.centralContent[t].oldText,s=m.centralContent[t].oldId),r&&i!==a&&(o||(e.migratedTexts.centralContent[r]={oldId:s,oldText:i,importDate:c})),r&&y.has(r)||(f.push(function(n){n.unlink2("tasks",e.id,"centralContent",t),r&&n.link2("tasks",e.id,"centralContent",r)}),h.push("<strike>"+i+"</strike>"),r&&(h.push(a),y.add(r)))}};try{for(var j=r.h(e.centralContent),C=j.next();!C.done;C=j.next()){I(C.value.id)}}catch(e){s={error:e}}finally{try{C&&!C.done&&(u=j.return)&&u.call(j)}finally{if(s)throw s.error}}var x=function(t){var n=T.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,o=n.isTypoFix,s=t;m.knowledgeRequirements[t]&&(i=m.knowledgeRequirements[t].oldText,s=m.knowledgeRequirements[t].oldId),r&&i!==a&&(o||(e.migratedTexts.knowledgeRequirements[r]={oldId:s,oldText:i,importDate:c})),r&&y.has(r)||(f.push(function(n){n.unlink2("tasks",e.id,"knowledgeRequirements",t),r&&n.link2("tasks",e.id,"knowledgeRequirements",r)}),h.push("<strike>"+i+"</strike>"),r&&(h.push(a),y.add(r)))}};try{for(var D=r.h(e.knowledgeRequirements),N=D.next();!N.done;N=D.next()){x(N.value.id)}}catch(e){l={error:e}}finally{try{N&&!N.done&&(d=D.return)&&d.call(D)}finally{if(l)throw l.error}}}}}catch(e){i={error:e}}finally{try{E&&!E.done&&(o=k.return)&&o.call(k)}finally{if(i)throw i.error}}a.push({change:"Migrerad Uppgift",content:"<h4>"+e.name+" "+(e.school?"("+e.school+") ":"(skola ej angiven)")+"</h4>\n          <p>Kurskod: "+r.g(v).join(",")+"</p>\n          "+h.map(function(e){return"<p>"+e+"</p>"}).join(""),mutations:function(t){t.put("tasks",e),f.forEach(function(e){return e(t)})}})};try{for(d=r.h(u),m=d.next();!m.done;m=d.next())f=m.value,l(f)}catch(e){t={error:e}}finally{try{m&&!m.done&&(n=d.return)&&n.call(d)}finally{if(t)throw t.error}}return[2]}})})}var u,l,m,f,h,b,g,v,y,k,E,w,T,S,O,I,j,C,x,D,N,R,L,P,A,q,_,B,M,U,F,K,z,W,V,Z,G,Q,$,Y,H,J;return r.d(this,function(o){switch(o.label){case 0:E=new Map,w=e.abilitiesOrder?e.abilitiesOrder.map(function(t){return e.abilities.find(function(e){return e.id===t})}):e.abilities;try{for(T=r.h(w),S=T.next();!S.done;S=T.next())O=S.value,E.set(O.name.trim(),O.id)}catch(e){u={error:e}}finally{try{S&&!S.done&&(l=T.return)&&l.call(T)}finally{if(u)throw u.error}}try{for(I=r.h(t),j=I.next();!j.done;j=I.next()){H=j.value.template;try{for(C=r.h(H.centralContent),x=C.next();!x.done;x=C.next())D=x.value,E.set(D.name.trim(),D.id)}catch(e){h={error:e}}finally{try{x&&!x.done&&(b=C.return)&&b.call(C)}finally{if(h)throw h.error}}try{for(N=r.h(H.knowledgeRequirements),R=N.next();!R.done;R=N.next())L=R.value,E.set(L.name.trim(),L.id)}catch(e){g={error:e}}finally{try{R&&!R.done&&(v=N.return)&&v.call(N)}finally{if(g)throw g.error}}}}catch(e){m={error:e}}finally{try{j&&!j.done&&(f=I.return)&&f.call(I)}finally{if(m)throw m.error}}P=d(E,n.abilities),A=P.newTexts,q=P.idsToAdd,_=d(E,Object(i.k)(n.courses.map(function(e){return e.centralContent.map(function(e){return e.html})}))),B=_.newTexts,M=_.idsToAdd,U=d(E,Object(i.k)(n.courses.map(function(e){return e.knowledgeRequirements.map(function(e){return e.html})}))),F=U.newTexts,K=U.idsToAdd,console.log("Abilities to add: "+q.size),console.log("CCs to add: "+M.size),console.log("KRs to add: "+K.size),z=p(w,n.abilities.map(function(e){return{html:e}}),A),W=t.map(function(e,t){var r=e.template;console.log("Course: "+r.name);var a=n.courses.find(function(e){return e.name===r.name})||n.courses.find(function(e){return e.code===r.code});return{courseCode:r.code,ccsToMigrate:a?p(r.centralContent,a.centralContent.map(function(e){return{html:e.html}}),B,0,r.name):new Map,krsToMigrate:a?p(r.knowledgeRequirements,a.knowledgeRequirements,F,0,r.name):new Map}}),z.forEach(function(t,n){var r=t.newText,i=t.newId,o=t.oldText,s=t.isTypoFix;a.push({change:o?r?s?"Tryckfelsrättning Förmåga":"Uppdaterad Förmåga":"Borttagen Förmåga":"Ny Förmåga",content:"<strike>"+(o||"")+"</strike><br/>"+(r||""),mutations:function(t){if(i&&q.has(i)){var a={id:i,name:r,acl:["role:USER:R"],dateTime:Date.now()};t.add("abilities",a)}o&&t.unlink2("subjects",e.id,"abilities",n),i&&t.link2("subjects",e.id,"abilities",i)}})}),(!e.abilitiesOrder||z.size>0)&&(e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)}),a.push({mutations:function(t){return t.put("subjects",e)},change:e.abilitiesOrder?null:"Inför en ordnad lista på förmågor i databasen"})),V=new Set,a.push({mutations:function(){return V.clear()}}),Z=new Set,a.push({mutations:function(){return Z.clear()}}),G=function(e,t){var a,i,o=n.courses.find(function(t){return t.name===e.name})||n.courses.find(function(t){return t.code===e.code}),c=W.find(function(t){return t.courseCode===e.code}),u=c.ccsToMigrate,l=c.krsToMigrate;try{for(var d=r.h(t),m=d.next();!m.done;m=d.next()){s(m.value,o,{ccsToMigrate:u,krsToMigrate:l})}}catch(e){a={error:e}}finally{try{m&&!m.done&&(i=d.return)&&i.call(d)}finally{if(a)throw a.error}}};try{for(Q=r.h(t),$=Q.next();!$.done;$=Q.next())Y=$.value,H=Y.template,J=Y.instances,G(H,J)}catch(e){y={error:e}}finally{try{$&&!$.done&&(k=Q.return)&&k.call(Q)}finally{if(y)throw y.error}}return[4,c()];case 1:return o.sent(),[2]}})})}var g=n(18);function v(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,s=this;return r.d(this,function(c){switch(c.label){case 0:return[4,o.a.kedBackendClient.get("subjects",e.id,{include:["courseTemplates","abilities"]})];case 1:return e=c.sent(),[4,Promise.all(e.courseTemplates.map(function(e){return Object(g.e)(e.id,{include:["centralContent","knowledgeRequirements"]})}))];case 2:return a=c.sent(),console.log("Subject: "+e.name+". Courses: "+a.map(function(e){return e.name})),[4,Promise.all(a.map(function(e){return r.b(s,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t={template:e},[4,o.a.kedBackendClient.list("courses",{name:e.name,include:["abilities"],flags:["includeIdsOnly"]})];case 1:return[2,(t.instances=n.sent(),t)]}})})}))];case 3:return i=c.sent(),[4,b(e,i,t,n)];case 4:return c.sent(),[2]}})})}var y,k,E,w=function(e){function t(t){var n=e.call(this,t)||this;return n.coursesElems={},n.centralContentElems=[],n.knowledgeRequirementElems=[],n.state={showFullText:!1,changes:[],isWorking:!0,isImporting:!1},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:this.addClassesForCherryPickedElements(),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,this.diffWithExisting()];case 2:return e=r.sent(),t=e.changes,n=e.subjectToImport,this.setState({changes:t,subjectToImport:n}),[3,5];case 3:return a=r.sent(),this.setState({error:""+a}),[3,5];case 4:return this.setState({isWorking:!1}),[7];case 5:return[2]}})})},t.prototype.addClassesForCherryPickedElements=function(){var e=c()(this.purposeElem).find("li").first().parent().children("li");e.addClass("ability");var t=c()(this.centralContentElems).find("li");t.addClass("central-content");var n=c()(this.knowledgeRequirementElems).find("p");n.addClass("knowledge-requirement"),c()([e,t,n]).addClass("marked-area")},t.prototype.cherryPickData=function(){var e=this,t=this.props.subject,n=Array.from(c()(this.purposeElem).find("li").first().parent().children("li")).map(function(e,t){return(t+1+". "+c()(e).html()).trim()}).filter(function(e){return!!e});return{name:t.name,code:t.code,schoolType:t.schoolType,abilities:n,courses:Object.keys(this.coursesElems).map(function(t){return e.coursesElems[t]}).map(function(e){var t=e.course,n=e.elem;return{name:t.name,year:t.year,code:t.code,points:t.points,centralContent:Array.from(c()(n).find(".central-content")).map(function(e){return{html:c()(e).html().trim(),group:c()(e).parent("ul").prev("h4").text().trim()}}).filter(function(e){return!!e.html}),knowledgeRequirements:Array.from(c()(n).find(".grade-step-none .knowledge-requirement")).map(function(e){return c()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:null,html:e}}).concat(Array.from(c()(n).find(".grade-step-E .knowledge-requirement")).map(function(e){return c()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"E",html:e}}).concat(Array.from(c()(n).find(".grade-step-C .knowledge-requirement")).map(function(e){return c()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"C",html:e}})).concat(Array.from(c()(n).find(".grade-step-A .knowledge-requirement")).map(function(e){return c()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"A",html:e}})))}})}},t.prototype.diffWithExisting=function(){return r.b(this,void 0,void 0,function(){function e(){var e=h;return h+=2,e}var t,n,a,i,s,c,u,d,m,f,h,p,b,g,y,k,E,w,T,S,O,I=this;return r.d(this,function(j){switch(j.label){case 0:return s=this.cherryPickData(),c=[],[4,o.a.kedBackendClient.list("subjects")];case 1:return u=j.sent(),d=u.filter(function(e){return e.code===I.props.subject.code})[0],m=[],f=[],h=Date.now(),d?[4,v(d,s,c)]:[3,3];case 2:return j.sent(),[3,4];case 3:p=d={id:Object(l.h)(),schoolType:s.schoolType,tags:["schoolType:"+s.schoolType],acl:["role:USER:R"],code:s.code,name:s.name,abilitiesOrder:[],publishable:!1,dateTime:e()},c.push({change:"Nytt ämne",content:s.name+" ("+s.code+")",mutations:function(e){return e.add("subjects",p)}}),b=[],g=function(t){var n={id:Object(l.h)(),name:t,acl:["role:USER:R"],dateTime:e()};b.push(n),c.push({change:"Ny förmåga",content:t,mutations:function(e){e.add("abilities",n),e.link("subjects",p.id,"abilities",n.id,"abilities")}})};try{for(y=r.h(s.abilities),k=y.next();!k.done;k=y.next())E=k.value,g(E)}catch(e){t={error:e}}finally{try{k&&!k.done&&(n=y.return)&&n.call(y)}finally{if(t)throw t.error}}p.abilitiesOrder=b.map(function(e){return e.id}),w=function(t){var n,a,i,s,u,d,h={id:Object(l.h)(),subjectCode:p.code,schoolType:p.schoolType,tags:["sub:"+p.code,"course:"+t.code,"schoolType:"+p.schoolType],dateTime:e(),isTemplate:!0,acl:["role:EMPLOYEE:R"],name:t.name,code:t.code,points:t.points,modules:[],subjectId:p.id,resources:[],createdBy:{name:o.a.currentUser.displayName,url:"mailto:"+o.a.currentUser.mail},createdDate:Date.now(),knowledgeRequirementsOrder:[],centralContentOrder:[],abilitiesOrder:b.map(function(e){return e.id})};t.year&&(h.schoolGrade=t.year),c.push({change:"Ny kurs",content:t.name,mutations:function(e){e.add("courses",h),e.link("subjects",p.id,"courses",h.id,"courseTemplates")}});var g=function(t,n){var r=m.filter(function(e){return e.name===n})[0];r?c.push({mutations:function(e){e.link("courses",h.id,"central-content",r.id,"centralContent")}}):(r={id:Object(l.h)(),dateTime:e(),name:n,acl:["role:USER:R"]},t&&(r.group=t),m.push(r),c.push({change:"Nytt centralt innehåll",content:"<h4>"+t+"</h4>"+n,mutations:function(e){e.add("central-content",r),e.link("courses",h.id,"central-content",r.id,"centralContent")}})),h.centralContentOrder.push(r.id)};try{for(var v=r.h(t.centralContent),y=v.next();!y.done;y=v.next()){var k=y.value;g(k.group,k.html)}}catch(e){n={error:e}}finally{try{y&&!y.done&&(a=v.return)&&a.call(v)}finally{if(n)throw n.error}}var E=function(t){var n=f.filter(function(e){return e.name===t.html&&e.gradeStep===t.gradeStep})[0];n?c.push({mutations:function(e){e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}}):(n={id:Object(l.h)(),dateTime:e(),name:t.html,gradeStep:t.gradeStep,acl:["role:USER:R"]},f.push(n),c.push({change:"Nytt kunskapskrav för betyget "+t.gradeStep,content:t.html,mutations:function(e){e.add("knowledge-requirements",n),e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}})),h.knowledgeRequirementsOrder.push(n.id)};try{for(var w=r.h(t.knowledgeRequirements),T=w.next();!T.done;T=w.next()){E(T.value)}}catch(e){i={error:e}}finally{try{T&&!T.done&&(s=w.return)&&s.call(w)}finally{if(i)throw i.error}}var S=function(e){c.push({mutations:function(t){t.link("courses",h.id,"abilities",e.id,"abilities")}})};try{for(var O=r.h(b),I=O.next();!I.done;I=O.next()){S(I.value)}}catch(e){u={error:e}}finally{try{I&&!I.done&&(d=O.return)&&d.call(O)}finally{if(u)throw u.error}}};try{for(T=r.h(s.courses),S=T.next();!S.done;S=T.next())O=S.value,w(O)}catch(e){a={error:e}}finally{try{S&&!S.done&&(i=T.return)&&i.call(T)}finally{if(a)throw a.error}}j.label=4;case 4:return[2,{changes:c,subjectToImport:s}]}})})},t.prototype.cancel=function(){this.props.onCancel()},t.prototype.import=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:this.setState({isWorking:!0,isImporting:!0}),e=this.state.changes.map(function(e){return e.mutations}),t.label=1;case 1:return t.trys.push([1,,3,4]),[4,o.a.kedBackendClient.do(function(t){e.forEach(function(e){return e(t)})})];case 2:return t.sent(),[3,4];case 3:return this.setState({isWorking:!1,isImporting:!1}),[7];case 4:return this.props.onImportSuccess(this.props.subject.name),[2]}})})},t.prototype.fixL=function(e){return e},t.prototype.render=function(){var e=this,t=this.state.subjectToImport,n=this.props.subject;return a.createElement("div",null,a.createElement("h1",null,Object(i.a)(y||(y=r.e(["Uppladdat Ämne ",""],["Uppladdat Ämne ",""])),t?t.name:"")),this.state.error?a.createElement("p",null,"Fel: ",this.state.error):this.state.isWorking?a.createElement("p",null,"Arbetar..."):this.state.isImporting?a.createElement("p",null,"Importerar..."):this.state.changes.every(function(e){return!e.change})?a.createElement("div",null,a.createElement("p",null,"Kunde inte finna några förändringar från befintligt data. Klicka OK för att avbryta och återgå."),a.createElement("button",{onClick:function(){return e.cancel()}}," OK ")):a.createElement("div",null,a.createElement("table",{style:{border:"1px solid gray",padding:"2px"}},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{colSpan:2},"Granskning av ändringar i grund-data")),a.createElement("tr",null,a.createElement("th",null,"Ändring"),a.createElement("th",null,"Innehåll"))),a.createElement("tbody",null,this.state.changes.filter(function(e){return e.change}).map(function(e,t){return a.createElement("tr",{key:t},a.createElement("td",{style:{padding:"2px"}},e.change),a.createElement("td",{style:{padding:"2px"},dangerouslySetInnerHTML:{__html:e.content}}))}))),a.createElement("button",{onClick:function(){return e.cancel()},disabled:this.state.isImporting},"Avbryt"),a.createElement("button",{onClick:function(){return e.import()},disabled:this.state.isImporting},"Importera"),a.createElement("br",null)),a.createElement("button",{onClick:function(){return e.setState({showFullText:!e.state.showFullText})}},this.state.showFullText?Object(i.a)(k||(k=r.e(["Dölj nedan"],["Dölj nedan"]))):Object(i.a)(E||(E=r.e(["Visa hela texten från Skolverket"],["Visa hela texten från Skolverket"])))),a.createElement("table",{style:{display:this.state.showFullText?"":"none"}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Namn"),a.createElement("td",null,n.name)),a.createElement("tr",null,a.createElement("th",null,"Ämneskod"),a.createElement("td",null,n.code)),a.createElement("tr",null,a.createElement("th",null,"Syfte"),a.createElement("td",{ref:function(t){return e.purposeElem=t},dangerouslySetInnerHTML:{__html:this.fixL(n.purpose)}})),a.createElement("tr",null,a.createElement("th",null,"Kurser"),a.createElement("td",null,n.courses.map(function(t){return a.createElement("table",{key:t.code,ref:function(n){return e.coursesElems[t.code]={course:t,elem:n}}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Kursens namn"),a.createElement("td",null,t.name)),a.createElement("tr",null,a.createElement("th",null,"Kurskod"),a.createElement("td",null,t.code)),a.createElement("tr",null,a.createElement("th",null,"Poäng"),a.createElement("td",null,t.points)),a.createElement("tr",null,a.createElement("th",null,"Centralt innehåll"),a.createElement("td",{ref:function(t){return e.centralContentElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.centralContent)}})),t.knownledgeRequirements.some(function(e){return!e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav utan betygsättning"),a.createElement("td",{className:"grade-step-none",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return!e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"E"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg E"),a.createElement("td",{className:"grade-step-E",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"E"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"C"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg C"),a.createElement("td",{className:"grade-step-C",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"C"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"A"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg A"),a.createElement("td",{className:"grade-step-A",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"A"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0))}))))))},t}(a.Component),T=(n(102),n(143)),S=n(13);n.d(t,"a",function(){return D});var O,I,j,C,x,D=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,gymnasiumSubjects:[],primarySchoolSubjects:[],uploadedSubject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,o.a.kedBackendClient.list("subjects")];case 1:return(e=r.sent()).sort(Object(i.g)("name")),t=e.filter(function(e){return"primary"!==e.schoolType}),n=e.filter(function(e){return"primary"===e.schoolType}),this.setState({gymnasiumSubjects:t,primarySchoolSubjects:n,isListingSubjects:!1}),[2]}})})},t.prototype.handleFileSelect=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,o,s,l,d,m,f,h,p,b,v,y,k,E,w;return r.d(this,function(T){switch(T.label){case 0:return e.stopPropagation(),e.preventDefault(),t=e.dataTransfer.files,[4,Object(g.f)(t[0])];case 1:if(n=T.sent(),a=c()(c.a.parseXML(n)),o=a.find("subject>originatorTypeOfSchooling").text().trim()||a.find("subject>typeOfSchooling").text().trim(),"gymnasium"===("COMPULSORY_SCHOOL"===o?"primary":"UPPER_SECONDARY_EDUCATION"===o?"gymnasium":null)){for(w={name:a.find("subject>name").text().trim(),code:a.find("subject>code").text().trim(),purpose:a.find("subject>purpose").text().trim(),courses:[],schoolType:"gymnasium"},s=a.find("subject>courses"),l=0;l<s.length;++l)d=c()(s[l]),m=[].slice.call(d.find("knowledgeRequirements")).map(function(e){return{gradeStep:c()(e).find("gradeStep").text().trim(),text:c()(e).find("text").text().trim()}}),w.courses.push({name:d.find("name").text().trim(),code:d.find("code").text().trim(),centralContent:d.find("centralContent").text().trim(),points:parseInt(d.find("point").text().trim()),knownledgeRequirements:m});this.setState({uploadedSubject:w})}else f=Object(i.k)(Array.from(a.find("subject>centralContent")).map(function(e){var t=c()(e).find("year").text().trim();if(c()(e).find("typeOfCentralContent").text().trim())throw new Error(Object(i.a)(O||(O=r.e(["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."]))));return u(t).map(function(t){return{year:t,text:c()(e).find("text").text().trim()}})})),h=Object(i.k)(Array.from(a.find("subject>knowledgeRequirement")).map(function(e){var t=c()(e).find("year").text().trim();if(c()(e).find("typeOfRequirement").text().trim())throw new Error(Object(i.a)(I||(I=r.e(["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."]))));return u(t).map(function(t){return{year:t,text:c()(e).find("text").text().trim(),gradeStep:c()(e).find("gradeStep").text().trim()}})})),p=Object(i.b)(f,function(e){return e.year}),b=Object(i.b)(h,function(e){return e.year}),v=a.find("subject>name").text().trim(),y=a.find("subject>code").text().trim(),k=a.find("subject>purpose").text().trim(),E=["1-3","4-6","7-9"].map(function(e){return{name:v+" "+e,code:y+"|"+e,points:0,year:e,centralContent:(p[e]||[]).map(function(e){return e.text}).join("\n"),knownledgeRequirements:(b[e]||[]).map(function(e){return{gradeStep:e.gradeStep,text:e.text}})}}),w={name:v,code:y,purpose:k,schoolType:"primary",courses:E},this.setState({uploadedSubject:w});return[2]}})})},t.prototype.onImportSuccess=function(e){Object(i.o)(Object(i.a)(j||(j=r.e(["Importen av "," lyckades"],["Importen av "," lyckades"])),e)),this.setState({uploadedSubject:null}),this.load()},t.prototype.render=function(){var e=this,t=this.props.linkPrefix;return a.createElement("div",null,this.state.uploadedSubject?a.createElement(w,{onCancel:function(){return e.setState({uploadedSubject:null})},onImportSuccess:function(t){return e.onImportSuccess(t)},subject:this.state.uploadedSubject}):this.state.isListingSubjects?a.createElement("div",null,a.createElement("p",null,a.createElement(S.a,null),"Var god vänta medan ämnen hämtas...")):a.createElement("div",null,a.createElement("h2",null,Object(i.a)(C||(C=r.e(["Gymnasieämnen"],["Gymnasieämnen"])))),a.createElement("ul",null,this.state.gymnasiumSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(T.a,{to:t+e.id},e.name))})),a.createElement("h2",null,Object(i.a)(x||(x=r.e(["Grundskoleämnen"],["Grundskoleämnen"])))),a.createElement("ul",null,this.state.primarySchoolSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(T.a,{to:t+e.id},e.name))})),a.createElement("div",{className:"drop-zone",onDragOver:g.a,onDrop:function(t){return e.handleFileSelect(t)}},"Droppa Subject-fil här från skolverket (Hämtas från ",a.createElement("a",{href:"http://opendata.skolverket.se",target:"skolverket"},"opendata.skolverket.se"),")")))},t}(a.Component)},,,,function(e,t,n){var r={"./en-SG":81,"./en-SG.js":81,"./en-au":82,"./en-au.js":82,"./en-ca":83,"./en-ca.js":83,"./en-gb":84,"./en-gb.js":84,"./en-ie":85,"./en-ie.js":85,"./en-il":86,"./en-il.js":86,"./en-nz":87,"./en-nz.js":87,"./sv":88,"./sv.js":88};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=126},function(e,t){},function(e,t){},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r,a,i,o,s,c,u,l,d,m,f,h,p,b,g,v,y,k,E,w,T,S,O,I,j,C,x=n(0),D=n.n(x),N=n(228),R=n(226),L=n(72),P=n(1),A=n(5),q=n(10),_=n(175),B=n(2),M=n(22),U=n(49),F=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courseName:"",courseType:"theme-course",subject:{subjectName:"",subjectCode:""}},n}return P.c(t,e),t.prototype.createCourse=function(){return P.b(this,void 0,void 0,function(){var e,t,n,i,o,s,c,u,l;return P.d(this,function(d){switch(d.label){case 0:return e=this.state,t=e.courseType,n=e.courseName,i=e.subject,o=Object(A.h)(),[4,q.b.standardSchool.load()];case 1:return s=d.sent(),c=s.officialBranchId,u=s.id,q.c.branches.addRelated(c,"approvedChildren",{id:Object(A.h)(),name:"draft",acl:["role:USER:R","schoolRole:standard/EMPLOYEE:S"],schoolId:u,treeParentId:c,tags:[o]}),l={id:o,acl:["schoolRole:standard/EMPLOYEE:S","role:USER:R"],name:n,tags:"step-course"===t?Object(U.c)([],[i.subjectCode]):[]},q.c.global.addRelated(q.d,"courseInstances","step-course"===t?P.a({},l,{type:t,description:Object(B.a)(r||(r=P.e(["Stegkurs"],["Stegkurs"]))),subject:i}):P.a({},l,{type:t,description:Object(B.a)(a||(a=P.e(["Temakurs"],["Temakurs"]))),subjects:[]})),this.setState({courseName:""}),[4,q.c.saveNow()];case 2:return d.sent(),this.props.history.push("/admin/courses/"+o+"/settings"),[2]}})})},t.prototype.isValidState=function(e){var t=this.state,n=t.courseName,r=t.courseType,a=t.subject,s=n&&"theme-course"===r||a.subjectCode;if(!s&&e){if(!n)return Object(B.a)(i||(i=P.e(["Kursens namn måste fyllas i"],["Kursens namn måste fyllas i"])));if(!a.subjectCode)return Object(B.a)(o||(o=P.e(["Ämne måste väljas för stegkurser"],["Ämne måste väljas för stegkurser"])))}return s},t.prototype.render=function(){var e=this,t=this.state,n=t.courseName,r=t.courseType,a=t.subject;return x.createElement("div",null,x.createElement("h2",null,"Skapa ny standardkurs"),x.createElement("hr",null),x.createElement("div",null,"Namn: ",x.createElement("input",{type:"text",value:n,onChange:function(t){return e.setState({courseName:t.target.value})}})),x.createElement("br",null),x.createElement("div",null,x.createElement("input",{type:"radio",name:"course-type",checked:"step-course"===r,onChange:function(t){return t.target.checked&&e.setState({courseType:"step-course"})}})," Stegkurs"),x.createElement("br",null),x.createElement("div",null,x.createElement("input",{type:"radio",name:"course-type",checked:"theme-course"===r,onChange:function(t){return t.target.checked&&e.setState({courseType:"theme-course"})}})," Temakurs"),x.createElement("br",null),"step-course"===r?x.createElement(x.Fragment,null,x.createElement("br",null),x.createElement("form",null,x.createElement("label",{className:"kclabel"},Object(B.a)(s||(s=P.e(["Ämne"],["Ämne"])))),x.createElement(M.a,null,q.c.subjects.tags("schoolType:primary").toValue().map(function(t){return x.createElement("select",{value:a.subjectCode,onChange:function(n){return e.setState({subject:t.filter(function(e){return e.code===n.target.value}).map(function(e){return{subjectCode:e.code,subjectName:e.name}})[0]})}},x.createElement("option",{value:""},Object(B.a)(c||(c=P.e(["Välj ämne"],["Välj ämne"])))),t.map(function(e){return x.createElement("option",{key:e.code,value:e.code},e.name)}))})))):null,x.createElement("div",null,x.createElement("button",{disabled:!this.isValidState(),className:["btn","btn-large",this.isValidState()?"":"disabled"].join(" "),onClick:function(){return e.isValidState()?e.createCourse():alert(e.isValidState(!0))}},"Skapa")))},t}(x.Component),K=Object(_.a)(F),z=n(67),W=n(143),V=function(e){var t=e.items,n=e.caption;return x.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},x.createElement("div",{className:"ked_boxed"},x.createElement("h3",null,n),x.createElement("div",{className:"taskContainer odd-even"},t.map(function(e){return x.createElement("div",{className:"schoolCourse",key:e.id},x.createElement("div",{className:["align-horizontal",e.$meta&&"entitymeta-"+e.$meta].join(" ")},x.createElement("div",{className:"horizontalItem top pull-right"},e.editLink.startsWith(":")?x.createElement("a",{href:e.editLink.substr(1),className:"editItem"}):x.createElement(W.a,{to:e.editLink,className:"editItem"})),x.createElement("div",{className:"horizontalItem top"},e.viewLink.startsWith(":")?x.createElement("a",{href:e.viewLink.substr(1)},e.name):x.createElement(W.a,{to:e.viewLink},e.name)),e.pills.map(function(e,t){return x.createElement("div",{key:t,className:"horizontalItem top"},x.createElement("div",{className:["pill"].concat(e.className).join(" ")},e.name))})),x.createElement("div",{className:"horizontalItem top"},x.createElement("p",null,e.description)),x.createElement("div",{className:"horizontalItem top"},x.createElement("p",{className:"small"},e.smallText)))}))))},Z=n(36),G=n(7),Q=n(14),$=n(18),Y=n(111),H=Object(Z.b)(function(){return Object(Y.a)().orderBy("name").map(function(e){var t=e.id,n=e.$meta,r=e.name,a=e.description,i=e.tags,o=e.type,s=e.modifiedBy,c=e.modifiedDate;return{id:t,type:o,$meta:n,name:r,description:a,viewLink:":"+Object(Q.f)(G.b.KED_SUBJECT_PLANNER_URL,{})+"#/standard/courses/"+t,editLink:"/admin/courses/"+t+"/settings",pills:i.filter(function(e){return"active"===e}).map(function(e){return{className:"active",name:Object(B.a)(u||(u=P.e(["Aktiv"],["Aktiv"])))}}),smallText:s&&c&&Object(B.a)(l||(l=P.e(["Senast redigerad av "," / ",""],["Senast redigerad av "," / ",""])),s.name,Object($.g)(c))}}).toValue().map(function(e){var t=e.filter(function(e){return"step-course"===e.type}),n=e.filter(function(e){return"theme-course"===e.type});return x.createElement(x.Fragment,null,x.createElement(V,{caption:"Stegkurser",items:t}),x.createElement(V,{caption:"Temakurser",items:n}))})}),J=n(227),X=n(3),ee=n(26),te=n(46),ne=n(33),re=n(225),ae=n(103),ie=n(13),oe=function(e){function t(t){var n=e.call(this,t)||this;return n.state={optionsVisible:!1},n}return P.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.selected,r=t.onChange,a=t.getOptions,i=this.state,o=i.optionsVisible,s=i.options,c=s&&s.filter(function(e){return!n.some(function(t){return t.key===e.key})});return D.a.createElement(D.a.Fragment,null,D.a.createElement("div",{className:"taskContainer"},n.map(function(e){var t=e.key,a=e.name;return D.a.createElement("div",{key:t,className:"align-horizontal"},D.a.createElement("div",{className:"horizontalItem top"},D.a.createElement("i",{className:"fa fa-remove hoverable",onClick:function(){return r(n.filter(function(e){return e.key!==t}))}}),a))})),D.a.createElement("span",{style:{outline:"none"},tabIndex:0,onBlur:function(t){return setTimeout(function(){return e.setState({optionsVisible:!1})},100)}},D.a.createElement("a",{className:"btn",onClick:function(){return P.b(e,void 0,void 0,function(){var e;return P.d(this,function(t){switch(t.label){case 0:if(o)return[2,this.setState({optionsVisible:!1})];if(this.setState({optionsVisible:!0}),this.state.options)return[3,4];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,a()];case 2:return e=t.sent(),this.setState({options:e}),[3,4];case 3:return t.sent(),this.setState({options:[{key:null,name:Object(B.a)(d||(d=P.e(["Ett fel har inträffat"],["Ett fel har inträffat"])))}]}),[3,4];case 4:return[2]}})})}},D.a.createElement("i",{className:"fa fa-plus","aria-hidden":!0})," ",Object(B.a)(m||(m=P.e(["Lägg till"],["Lägg till"])))),o?D.a.createElement(D.a.Fragment,null,D.a.createElement("br",null),c?D.a.createElement("select",{size:1===c.length?2:c.length,defaultValue:"",onChange:function(t){var a=t.target.value;r(n.concat({key:a,name:s.filter(function(e){return e.key===a}).map(function(e){return e.name})[0]})),e.setState({optionsVisible:!1})}},D.a.createElement("option",{style:{display:"none"},disabled:!0,key:"",value:""}),c.map(function(e){var t=e.key,n=e.name;return D.a.createElement("option",{key:t,value:t},n)})):D.a.createElement(ie.a,null)):void 0))},t}(D.a.Component),se=n(97),ce=n(37),ue=n(74),le=n(116),de=n(117),me=n(20),fe=n(63),he=n(55),pe=Object(Z.b)(function(e){var t,n=e.repo,r=e.course,a=e.block,i=Object(le.a)(a.tags),o=i.map(function(e){return"course:"+e});return Object(de.a)(i).combineLatest((t=n.courseBlocks.hasEdgesFrom([r.id])).tags.apply(t,P.g(o)).include("abilities","centralContent","knowledgeRequirements").includeIdsOnly()).map(function(e){var t=P.f(e,2),r=t[0],i=t[1],o=Object(he.a)(r,i);return 0===r.length?D.a.createElement("p",null,Object(B.a)(f||(f=P.e(["Blocket är inte kopplad till någon årskurs"],["Blocket är inte kopplad till någon årskurs"])))):D.a.createElement("div",null,r.map(function(e){var t=e.id,i=e.name,s=e.abilities,c=e.centralContent,u=e.knowledgeRequirements;return D.a.createElement("div",{key:t},1===r.length?void 0:D.a.createElement("h1",null,i),D.a.createElement(me.a,{className:"larger",title:D.a.createElement("p",null,Object(B.a)(h||(h=P.e(["Välj blockets kunskapskrav"],["Välj blockets kunskapskrav"]))))},D.a.createElement("p",null,Object(B.a)(p||(p=P.e(["Markera de kunskapskrav som blocket ska täcka."],["Markera de kunskapskrav som blocket ska täcka."])))),D.a.createElement(M.a,null,n["knowledge-requirements"].hasEdgesFrom([a.id]).idsOnly().toValue().map(function(e){return D.a.createElement(ue.a,{knowledgeRequirements:u,markedIds:e.map(function(e){return e.id}),idsToMarkNotOk:o,markMode:!0,onMarkChanged:function(t,r){e.filter(function(e){return!u.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){n.courseBlocks.removeRelated(a.id,"knowledgeRequirements",e)});var i=u.filter(function(e){return e.id===t})[0];r?n.courseBlocks.addRelated(a.id,"knowledgeRequirements",i):n.courseBlocks.removeRelated(a.id,"knowledgeRequirements",i)}})}))),D.a.createElement(M.a,null,n.abilities.hasEdgesFrom([a.id]).idsOnly().toValue().map(function(e){return D.a.createElement(fe.a,{options:s,title:Object(B.a)(b||(b=P.e(["Välj blockets förmågor"],["Välj blockets förmågor"]))),markedIds:e.map(function(e){return e.id}),uncoveredIds:o,markMode:!0,onMarkChanged:function(t,r){e.filter(function(e){return!s.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){n.courseBlocks.removeRelated(a.id,"abilities",e)});var i=s.filter(function(e){return e.id===t})[0];r?n.courseBlocks.addRelated(a.id,"abilities",i):n.courseBlocks.removeRelated(a.id,"abilities",i)}})})),D.a.createElement(M.a,null,n["central-content"].hasEdgesFrom([a.id]).idsOnly().toValue().map(function(e){return D.a.createElement(fe.a,{options:c,title:Object(B.a)(g||(g=P.e(["Välj blockets centrala innehåll"],["Välj blockets centrala innehåll"]))),markedIds:e.map(function(e){return e.id}),uncoveredIds:o,markMode:!0,onMarkChanged:function(t,r){e.filter(function(e){return!c.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){n.courseBlocks.removeRelated(a.id,"centralContent",e)});var i=c.filter(function(e){return e.id===t})[0];r?n.courseBlocks.addRelated(a.id,"centralContent",i):n.courseBlocks.removeRelated(a.id,"centralContent",i)}})})))}))})}),be=function(e){var t=e.repo,n=e.course;return D.a.createElement("div",null,D.a.createElement("label",{className:"kclabel"},Object(B.a)(v||(v=P.e(["Kursblock"],["Kursblock"])))),n.blocks.sort(Object(B.g)("blockNo")).map(function(e,r){return D.a.createElement(ge,{key:e.id,block:e,course:n,repo:t,isLastBlock:r===n.blocks.length-1})}),D.a.createElement("button",{className:"btn",onClick:function(){return function(e,t){var n=t.blocks.sort(Object(B.g)("blockNo")).slice().pop(),r=n?n.blockNo+1:1,a=n?n.stepNumbers[n.stepNumbers.length-1]+1:1,i={id:Object(A.h)(),acl:["schoolRole:standard/EMPLOYEE:S","role:USER:R"],blockNo:r,locked:!0,name:"Block "+r,tags:P.g([t.id],t.tags.filter(function(e){return e.startsWith("course:")||e.startsWith("sub:")})),stepNumbers:[a,a+1,a+2,a+3,a+4]};e.courseInstances.addRelated(t.id,"blocks",i),i.stepNumbers.forEach(function(n){var r={id:Object(A.h)(),type:"step-course-tab",tabClass:"intro-tab",tabTitle:Object(B.a)(j||(j=P.e(["Introduktion"],["Introduktion"]))),name:Object(B.a)(C||(C=P.e(["Introduktion"],["Introduktion"]))),locked:!0,acl:["schoolRole:standard/EMPLOYEE:S","role:USER:R"],stepNo:n,order:0,tags:P.g([t.id],t.tags.filter(function(e){return e.startsWith("course:")||e.startsWith("sub:")}))};e.courseBlocks.addRelated(i.id,"tabs",r)})}(t,n)}},D.a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",Object(B.a)(y||(y=P.e(["Lägg till block"],["Lägg till block"])))),D.a.createElement("br",null))},ge=function(e){var t=e.block,n=e.course,r=e.repo,a=e.isLastBlock;return D.a.createElement(D.a.Fragment,null,D.a.createElement("div",{className:"ked_boxed",style:{position:"relative"}},D.a.createElement("h4",null,"Block ",t.blockNo),Object(B.a)(k||(k=P.e(["Steg"],["Steg"])))," ",D.a.createElement("div",{className:"btn-group"},t.stepNumbers.map(function(e){return D.a.createElement("a",{key:e,className:"btn btn-small step-button"},e)})),D.a.createElement("form",null,D.a.createElement("label",{className:"kclabel"},Object(B.a)(E||(E=P.e(["Årskurs"],["Årskurs"])))),D.a.createElement("select",{value:Object(U.d)(t.tags)[0]||"",onChange:function(e){return r.courseBlocks.update(t,{tags:Object(U.b)(t.tags,[e.target.value].filter(function(e){return!!e}))})}},D.a.createElement("option",{value:""},Object(B.a)(w||(w=P.e(["Välj årskurser"],["Välj årskurser"])))),D.a.createElement("option",{value:"1-3"},Object(B.a)(T||(T=P.e(["Årskurs 1-3"],["Årskurs 1-3"])))),D.a.createElement("option",{value:"4-6"},Object(B.a)(S||(S=P.e(["Årskurs 4-6"],["Årskurs 4-6"])))),D.a.createElement("option",{value:"7-9"},Object(B.a)(O||(O=P.e(["Årskurs 7-9"],["Årskurs 7-9"])))))),D.a.createElement("br",null),Object(U.d)(t.tags).length>0?D.a.createElement(pe,{block:t,course:n,repo:r}):void 0,a?D.a.createElement(ce.a,{title:"Ta bort blocket",style:{display:"inline-block",position:"absolute",top:0,right:0},onClick:function(){return confirm(Object(B.a)(I||(I=P.e(["Ta bort blocket?"],["Ta bort blocket?"]))))&&r.courseInstances.removeRelated(n.id,"blocks",t)}}):null),D.a.createElement("hr",null))};var ve,ye,ke,Ee,we,Te,Se,Oe,Ie,je,Ce,xe,De,Ne,Re,Le=Object(re.a)(Object(Z.b)(function(e){var t=e.courseId;e.history;return q.a.getOrCreateBranchId(q.b.standardSchool,t).map(function(e){return q.c.branch(e)}).switchMap(function(e){return e.courseInstances.include("blocks").id(t).map(function(n){return x.createElement(x.Fragment,null,x.createElement(ee.a,{autoFocus:!0,label:"Namn",id:"CourseInstance:name",placeholder:"",value:n.name,onChange:function(t){return e.courseInstances.update(n,{name:t})}}),x.createElement(te.a,{label:"Beskrivning",id:"CourseInstance:description",rows:7,placeholder:"",value:n.description,onChange:function(t){e.courseInstances.update(n,{description:t})}}),x.createElement(ne.a,{label:"Typ",id:"CourseInstance:type"},x.createElement("div",{className:"align-horizontal"},x.createElement("div",{className:"horizontalItem top"},x.createElement("input",{disabled:!0,type:"radio",name:"course-type",checked:"step-course"===n.type,id:"CourseInstance:type",onChange:function(t){return t.target.checked&&e.courseInstances.update(n,{type:"step-course"})}})," Stegkurs")),x.createElement("div",{className:"align-horizontal"},x.createElement("div",{className:"horizontalItem"},x.createElement("input",{disabled:!0,type:"radio",name:"course-type",checked:"theme-course"===n.type,id:"CourseInstance:type",onChange:function(t){return t.target.checked&&e.courseInstances.update(n,{type:"theme-course"})}})," Temakurs"))),"step-course"===n.type?x.createElement(x.Fragment,null,x.createElement("br",null),x.createElement(ne.a,{label:Object(B.a)(ve||(ve=P.e(["Ämne"],["Ämne"]))),id:"CourseInstance:subject"},x.createElement("p",{id:"CourseInstance:subject"},n.subject.subjectName))):null,x.createElement("br",null),x.createElement("form",null,x.createElement("label",{className:"kclabel"},Object(B.a)(ye||(ye=P.e(["Ändringspolicy"],["Ändringspolicy"])))),x.createElement(se.a,{available:[{name:Object(B.a)(ke||(ke=P.e(["Tillåt skolor skapa egna flikar"],["Tillåt skolor skapa egna flikar"]))),key:"allowAddTabs"},{name:Object(B.a)(Ee||(Ee=P.e(["Tillåt skolor dölja standardflikar"],["Tillåt skolor dölja standardflikar"]))),key:"allowRemoveTabs"},{name:Object(B.a)(we||(we=P.e(["Tillåt skolor ändra ordningen mellan standardflikar"],["Tillåt skolor ändra ordningen mellan standardflikar"]))),key:"allowReorderTabs"}],selected:[n.allowAddTabs&&"allowAddTabs",n.allowRemoveTabs&&"allowRemoveTabs",n.allowReorderTabs&&"allowReorderTabs"].filter(function(e){return!!e}),onChange:function(t){return e.courseInstances.update(n,{allowAddTabs:t.includes("allowAddTabs"),allowRemoveTabs:t.includes("allowRemoveTabs"),allowReorderTabs:t.includes("allowReorderTabs")})}})),"step-course"===n.type?x.createElement(x.Fragment,null,Object(U.e)(n.tags).length>0?x.createElement(be,{repo:e,course:n}):void 0):void 0,"theme-course"===n.type?x.createElement(x.Fragment,null,x.createElement("br",null),x.createElement("form",null,x.createElement("label",{className:"kclabel"},Object(B.a)(Te||(Te=P.e(["Kopplade ämnen"],["Kopplade ämnen"])))),x.createElement(oe,{selected:(n.subjects||[]).map(function(e){return{name:e.name,key:e.code}}),getOptions:function(){return q.c.subjects.tags("schoolType:primary").map(function(e){return{name:e.name,key:e.code}}).toValue().load()},onChange:function(t){return e.courseInstances.update(n,{tags:Object(U.c)(n.tags,t.map(function(e){return e.key})),subjects:t.map(function(e){return{name:e.name,code:e.key}})})}})),x.createElement("br",null),x.createElement("form",null,x.createElement("label",{className:"kclabel"},Object(B.a)(Se||(Se=P.e(["Årskurser som ska ingå"],["Årskurser som ska ingå"])))),x.createElement(se.a,{available:[{name:Object(B.a)(Oe||(Oe=P.e(["Årskurs 1-3"],["Årskurs 1-3"]))),key:"1-3"},{name:Object(B.a)(Ie||(Ie=P.e(["Årskurs 4-6"],["Årskurs 4-6"]))),key:"4-6"},{name:Object(B.a)(je||(je=P.e(["Årskurs 7-9"],["Årskurs 7-9"]))),key:"7-9"}],selected:Object(U.d)(n.tags),onChange:function(t){return e.courseInstances.update(n,{tags:Object(U.b)(n.tags,t)})}}))):void 0,x.createElement("br",null),n.tags.includes("active")?x.createElement("div",{className:"btn btn-large pull-right",onClick:function(){return e.courseInstances.update(n,{tags:{$remove:["active"]}})}},"Inaktivera"):x.createElement("div",{className:"btn btn-large pull-right",onClick:function(){return e.courseInstances.update(n,{tags:{$add:["active"]}})}},"Aktivera"),x.createElement(W.a,{className:"btn btn-warning btn-large pull-right",to:"/admin/courses/"+t+"/confirm-delete"},Object(B.a)(Ce||(Ce=P.e(["Radera ..."],["Radera ..."])))),x.createElement("div",{className:"btn btn-large btn-warning",onClick:function(){return P.b(void 0,void 0,void 0,function(){return P.d(this,function(r){switch(r.label){case 0:return Object(ae.a)({school:"standard",draftRepo:e,course:n}),[4,q.c.saveNow()];case 1:return r.sent(),location.href=Object(Q.f)(G.b.KED_SUBJECT_PLANNER_URL+"#/standard/courses/"+t,{}),[2]}})})}},"Publicera"))})})})),Pe=Object(_.a)(Object(Z.b)(function(e){var t=e.courseId,n=e.history;return q.c.courseInstances.ids([t]).toValue().combineLatest(q.c.branches.tags(t).idsOnly().map(function(e){return e.id})).combineLatest(q.c.courseBlocks.tags(t).idsOnly().map(function(e){return e.id})).combineLatest(q.c.courseContents.tags(t).idsOnly().map(function(e){return e.id})).combineLatest(q.c.courseTabs.tags(t).idsOnly().map(function(e){return e.id})).combineLatest(q.c.tasks.tags(t).idsOnly().map(function(e){return e.id})).map(function(e){var t=P.f(e,2),n=t[0],r=t[1];return{courses:n[0][0][0][0],branchIds:n[0][0][0][1],courseBlockIds:n[0][0][1],courseContentIds:n[0][1],courseTabIds:n[1],taskIds:r}}).map(function(e){var t=e.courses,r=e.branchIds,a=e.courseBlockIds,i=e.courseContentIds,o=e.courseTabIds,s=e.taskIds;if(0===t.length)return x.createElement("div",null,x.createElement("p",null,"Kursen är nu borttagen"),x.createElement(W.a,{className:"btn btn-large",to:"/admin"},"Till adminverktygets startsida"));var c=t[0];return x.createElement("div",{className:["entitymeta-"+c.$meta].join(" ")},x.createElement("h2",null,"Bekräfta borttagning av standardkursen ",c.name," "),x.createElement("p",null,"Följande relaterade objekt kommer också att tas bort"),x.createElement("p",null,"Temporära utkast: ",r.length," st"),x.createElement("p",null,"Kursblock: ",a.length," st"),x.createElement("p",null,"Innehållsrutor (totalt inklusive skolors egna varianter): ",i.length," st"),x.createElement("p",null,"Flikar (totalt inklusive skolors egna varianter): ",o.length," st"),x.createElement("p",null,"Uppgifter (totalt inklusive skolors egna varianter): ",s.length," st"),x.createElement("a",{className:"btn btn-large",onClick:function(){return n.go(-1)}},"Avbryt"),x.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){var e,t,n,u,l;(e=q.c.branches).delete.apply(e,P.g(r)),(t=q.c.courseBlocks).delete.apply(t,P.g(a)),(n=q.c.courseContents).delete.apply(n,P.g(i)),(u=q.c.courseTabs).delete.apply(u,P.g(o)),(l=q.c.tasks).delete.apply(l,P.g(s)),q.c.courseInstances.delete(c.id)}},"Bekräfta borttagning av kurs"))})},{spinner:x.createElement("p",null,"Hämtar relaterade objekt... ",x.createElement(ie.a,null))})),Ae=n(122),qe=n(104),_e=n(113),Be=n(98),Me=function(){var e=X.a.currentUser,t=e.roles;e.school;return t.includes("ADMIN")||Object(Q.e)(X.a.currentUser,"standard")?D.a.createElement(J.a,{to:"/admin"}):(location.href=Object(Q.f)(G.b.KED_SUBJECT_PLANNER_URL,{}),D.a.createElement("div",null))},Ue={$:["/admin",D.a.createElement(D.a.Fragment,null,"Start")],schools:["/schools",D.a.createElement(D.a.Fragment,null,"Skolor")],import:["/admin/import",D.a.createElement(D.a.Fragment,null,"Import")]},Fe=[{path:"/",exact:!0,content:function(){return D.a.createElement(Me,null)}},{path:"/admin",exact:!0,tabId:"$",title:"Ämnesplaneraren Admin",content:function(){return D.a.createElement(J.a,{to:"/admin/courses/create"})}},{path:"/admin/courses/create",exact:!0,tabId:"$",title:"Skapa standardkurs",content:function(){return D.a.createElement(z.a,{left:D.a.createElement(K,null),right:D.a.createElement(H,null),rightWidth:5})}},{path:"/admin/courses/:courseId/settings",exact:!0,tabId:"$",title:"Ämnesplaneraren Admin",content:function(e){var t=e.match;return D.a.createElement(z.a,{left:D.a.createElement(Le,{courseId:t.params.courseId}),right:D.a.createElement(H,null),rightWidth:5})}},{path:"/admin/courses/:courseId/confirm-delete",exact:!0,tabId:"$",title:"Bekräfta radering av standardkurs",content:function(e){var t=e.match;return D.a.createElement(z.a,{left:D.a.createElement(Pe,{courseId:t.params.courseId}),right:D.a.createElement(H,null),rightWidth:5})}},{path:"/admin/import",exact:!0,tabId:"import",title:"Import från Skolverket",content:function(){return D.a.createElement(Ae.a,{linkPrefix:"/admin/import/"})}},{path:"/admin/import/:subjectId",exact:!1,tabId:"import",title:"Import från skolverket",content:function(e){var t=e.match;return D.a.createElement(qe.a,{id:t.params.subjectId})}},{path:"/schools",exact:!0,tabId:"schools",title:Object(B.a)(xe||(xe=P.e(["Skolor"],["Skolor"]))),content:function(){return D.a.createElement(_e.b,{viewCourseUrl:G.b.KED_SUBJECT_PLANNER_URL})}},{path:"/schools/:schoolId/edit",tabId:"schools",title:"Skolor",content:function(e){var t=e.match;return D.a.createElement(Be.b,{title:Object(B.a)(De||(De=P.e(["Redigera skola"],["Redigera skola"]))),id:t.params.schoolId})}},{path:"/schools/new/gymnasium",tabId:"schools",title:"Skolor",content:function(e){e.match;return D.a.createElement(Be.b,{title:Object(B.a)(Ne||(Ne=P.e(["Lägg till skola"],["Lägg till skola"]))),type:"gymnasium"})}},{path:"/schools/new/primary",tabId:"schools",title:"Skolor",content:function(e){e.match;return D.a.createElement(Be.b,{title:Object(B.a)(Re||(Re=P.e(["Lägg till skola"],["Lägg till skola"]))),type:"primary"})}}],Ke=Object.keys(Ue).map(function(e){return{key:e,name:Ue[e][1],link:Ue[e][0]}}),ze=n(96),We=n(118);n.d(t,"a",function(){return Ve});var Ve=function(){return x.createElement(N.a,null,x.createElement(x.Fragment,null,Fe.map(function(e,t){var n=e.exact,r=e.path,a=e.tabId,i=e.title,o=e.content;return x.createElement(R.a,{key:t,path:r,exact:n,component:function(e){return x.createElement(x.Fragment,null,x.createElement(ze.a,{activeTab:a||"$",tabs:Ke,title:i||"",backgroundImage:"https://ks.kunskapsporten.se/images/18.6323bc4d15f4831f9c82dedf/theme.jpg"}),o(e))}})}),x.createElement(L.a,null),x.createElement(We.a,null)))}},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"KEDAppCourseBuilderKS",function(){return b});var a=n(1),i=n(24),o=(n(92),n(3)),s=n(0),c=n(2),u=n(13),l=n(161),d=n(9),m=n(17),f=n(56),h=o.a.bearerProvider.getBearer(),p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isTokenLoaded:!1},n}return a.c(t,e),t.prototype.componentWillMount=function(){var e=this;h.then(function(){e.setState({isTokenLoaded:!0})}).catch(function(e){Object(c.n)(e)})},t.prototype.render=function(){var e=this.props.intl;return this.state.isTokenLoaded?s.createElement(m.a.Provider,{value:{intl:e}},s.createElement(l.a,null)):s.createElement("p",null,s.createElement(u.a,null),"V.g. vänta... autenticerar...")},t}(s.Component),b=Object(f.a)(Object(d.d)(p));i.a.components=a.a({},i.a.components,r)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,