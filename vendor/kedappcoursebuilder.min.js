var kedappcoursebuilder=function(e){function t(t){for(var r,s,o=t[0],l=t[1],c=t[2],d=0,m=[];d<o.length;d++)s=o[d],a[s]&&m.push(a[s][0]),a[s]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(u&&u(t);m.length;)m.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,o=1;o<n.length;o++){var l=n[o];0!==a[l]&&(r=!1)}r&&(i.splice(t--,1),e=s(s.s=n[0]))}return e}var r={},a={1:0},i=[];function s(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=r,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(n,r,function(t){return e[t]}.bind(null,r));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],l=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var u=l;return i.push([230,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return s}),n.d(t,"k",function(){return l}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return p}),n.d(t,"n",function(){return h}),n.d(t,"l",function(){return f}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return y}),n.d(t,"m",function(){return k});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function i(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function s(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&i(n,t),n}var o=[].concat;function l(e){return o.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function u(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],i=t.slice(1);return function(e,t){return function e(t,n,r,i){var s=t[r];if(null==s)return-1;var o=n[r];return null==o?1:0===i.length?a(s,o):e(s,o,i[0],i.slice(1))}(e,t,n,i)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function h(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function f(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r],s=t(i),o=n[s];o?o.push(i):n[s]=[i]}return n}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r];n[t(i)]=i}return n}function b(e,t){var n,a,i={};try{for(var s=r.h(t),o=s.next();!o.done;o=s.next()){var l=o.value;l in e&&(i[l]=e[l])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=s.return)&&a.call(s)}finally{if(n)throw n.error}}return i}function y(e,t){var n=v(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function k(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,i=n.length;a<i;++a){var s=n[a];if(r[a]!==s)return!1;if(e[s]!==t[s])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(29);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(26);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,function(e,t,n){"use strict";var r=n(3),a=n(4),i=n(18),s=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(23);function l(e,t){return o.a[e].relationships[t]}function c(e,t){var n=function(e){var t=function(e){return!0};return e.from?u(t,function(t){return t.dateTime>=e.from}):e.to?u(t,function(t){return t.dateTime<e.to}):e.ids?u(t,function(t){return e.ids.includes(t.id)}):e.name?u(t,function(t){return t.name===e.name}):e.tags?u(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function u(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var p=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var i=a[r];localStorage.setItem("cache-bust-"+n+"-"+i,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+l(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),h=n(14);function f(e,t){for(var n=Object.keys(t),r=e,i=0,s=n;i<s.length;i++){var o=s[i];r===e&&(r=a.a({},e));var l=t[o];if(l&&"object"==typeof l){var c=Object.keys(l).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var u=function(e){var t=l[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var i=0,s=n;i<s.length;i++){var c=s[i];a.includes(c)||a.push(c)}break;case"$remove":var u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!u.includes(e)})}},d=0,m=c;d<m.length;d++){u(m[d])}continue}}r[o]=l}return r}function g(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,i=Object.keys(t),s=a.a({},e),o=0,l=i;o<l.length;o++){var c=l[o],u=t[c];if(u&&"object"==typeof u){var d=Object.keys(u).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var m=function(e){var t=u[e];switch(e){case"$unset":r?delete s[c]:s[c]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");o=(o=s[c])?a.a({},o):{},s[c]=o;var i=o.$remove;Array.isArray(i)&&(o.$remove=i.filter(function(e){return!n.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(n):n.slice(),o.$add=d;break;case"$remove":var o,l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");o=(o=s[c])?a.a({},o):{},s[c]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!l.includes(e)}),0===o.$add.length&&delete o.$add),i=(i=o.$remove)?i.concat(l):l.slice(),o.$remove=i}},p=0,h=d;p<h.length;p++){m(h[p])}continue}}s[c]=u}return s}var v=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,i,s;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(i=r[n]).op||i.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==i.op||i.targetBranchId&&i.branchId!==this.query.branchId&&i.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===i.op&&(i.deltaDoc.tags&&this.query.tags||i.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:s=this.getDataWithMutationsApplied(e,!1,this.data),this.data=s,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,i=this.includes,s=this.query,o=s.hasEdgesFrom?[].concat(s.hasEdgesFrom||[]):[],c=s.tags?[].concat(s.tags||[]):[];switch(t.op){case"update":return Object(h.e)(e,function(e){if(e.id===t.id){var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return i.forEach(function(r){var i,s=e[r];if(s){var o=Object(h.e)(s,function(e){if(e.id!==t.id)return e;var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==s&&(e=a.a({},e,((i={})[r]=o,i)))}}),e});case"add-related":if(r===t.table&&-1!==i.indexOf(t.graphProp))return Object(h.e)(e,function(e){var r;if(e.id!==t.id)return e;var i=a.a({},t.relatedDoc);return n&&(i.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([i]),r))});if(s.hasEdgesFrom&&o.includes(t.id)&&r===l(t.table,t.graphProp)){if(!s.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return s.ids&&s.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==i.indexOf(t.graphProp)?Object(h.e)(e,function(e){var r,i=e[t.graphProp];return i?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?i.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):i.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):s.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(s.include){var u=i.map(function(e){return{label:e,table:l(r,e)}}).filter(function(e){return e.table===t.table});if(u.length>0)return Object(h.e)(e,function(e){return u.forEach(function(r){var i,s=r.label,o=e[s];o&&(e=a.a({},e,((i={})[s]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),i)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),b=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new s(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return v.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesFrom",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.hasEdgesTo=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesTo",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:p.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new i.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(35).a),y=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===v.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var i=a.find(function(t){return o.a[r.table].relationships[t]===e});if(i){for(var s={},l=0,u=r.data;l<u.length;l++){var d=u[l];c(t,d[i]).forEach(function(e){return s[e.id]=e})}var m=Object.keys(s).map(function(e){return s[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var p=c(t,r.data);return t.ids.every(function(e){return p.some(function(t){return t.id===e})})?{value:p}:"continue"}},i=0,s=this.queries;i<s.length;i++){var l=a(s[i]);if("object"==typeof l)return l.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,i=this.findQuery(n,r);i?i.timeoutHandle&&(clearTimeout(i.timeoutHandle),i.timeoutHandle=null):(i=new v(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(i)),i.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,i=(n.repo,this.findQuery(r,a));i&&(i.unsubscribe(e),0===i.subscriptions.length&&(i.timeoutHandle=setTimeout(function(){0===i.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==i}))},this.queries.length>50?500:3e5)))},e}(),k=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return l(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return l(e,t)})).some(function(e){return l(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),i=e.length,s=function(t){var i=e[t];if("update"===i.op){var s=r.findIndex(function(e){return"update"===e.op&&e.branchId===i.branchId&&e.id===i.id});s>=0&&(n[t]=a.a({},i,{deltaDoc:g(i.deltaDoc,r[s].deltaDoc)}),r.splice(s,1))}},o=0;o<i;++o)s(o);return n.concat(r)},e}(),E=n(40);function w(e,t,n,r,i,s){for(var o=function(n){switch(n.op){case"add-related":s||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:i}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(s||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:i,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((l=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var o=t[l];t=t.slice(0,l).concat([a.a({},o,{$meta:r?"removing":"persisted"})],t.slice(l+1))}else t=t.slice(0,l).concat(t.slice(l+1));break;case"update":if(n.branchId!==e)return"continue";var l;if((l=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!s)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[i],$meta:r?"adding":"persisted"}].concat(t);else{var c=t[l],u=c.contributors.slice();u.includes(i)||u.push(i);var d=g(c.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:u,$meta:r?"updating":"persisted"}].concat(t.slice(0,l),t.slice(l+1)):t.slice(0,l).concat(t.slice(l+1))}}},l=0,c=n;l<c.length;l++){var u=o(c[l]);if("object"==typeof u)return u.value}return t}var C=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var i=a[r],s=this.lookup[i];if(s.value){var o=w(s.query.branchId,s.value,e,n,this.getUserDisplayName(),!!s.query.tags);null===o&&(n||s.fetch()),o!==s.value&&(s.optimisticValue=o,n||(s.value=o),s.notify(o))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new S(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),S=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=i.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),T=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new C(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,i,s;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),i=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),p.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(k.merge(e,i),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return s=a.sent(),this.persistedVersion.dispatchError(s),s&&s.name&&s.name.startsWith("http4")?(this.dispatchError(s,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(s,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new i.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),O=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),N=function(){function e(e,t,n,r,a,i,s,l){var c=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=i,this.writer=s,this.cacheOptimized=l,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new k),i||(this.querySet=new y(this.mutationQueue)),s||(this.writer=new T(this.mutationQueue,this.querySet,e,t,n)),Object.keys(o.a).forEach(function(e){var t=new b(c,e,r||{});l&&(t=t.cacheOptimized()),c[e]=t}),this.deltas=new O(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new b(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var D=n(5),I=n(7);n.d(t,"c",function(){return x}),n.d(t,"d",function(){return j}),n.d(t,"b",function(){return R}),n.d(t,"a",function(){return L});var x=new N(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),j=Object(D.i)(I.b.KED_REALM),R={standardSchool:x.schools.name("standard").cacheOptimized().single(),get mySchool(){return x.schools.name(r.a.currentUser.school).cacheOptimized().single()}},L={getBranchId:function(e,t){return e.switchMap(function(e){return x.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return x.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return x.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(D.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return x.courseBlocks.tags(e).idsOnly().concat(x.courseContents.tags(e).idsOnly()).concat(x.courseTabs.tags(e).idsOnly()).concat(x.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";var r=n(1),a=n(5);var i=n(15);n.d(t,"a",function(){return s}),n.d(t,"c",function(){return l}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return p});var s=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function l(e,t){return o(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function u(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,s=Object(i.b)(location.search),o=r.a({},s,{role:t,school:n}),l=Object(i.a)(o);a?location.href=""+a+l:(location.hash="#",location.search=l)}};function m(e){d.actAs(e)}function p(e,t){var n,a,o=Object(i.b)(location.search),l={};try{for(var c=r.h(s),u=c.next();!u.done;u=c.next()){var d=u.value;o[d]&&(l[d]=o[d])}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var m=Object(i.a)(r.a({},l,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+m+e.substr(p):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"d",function(){return s}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return l});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function i(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function s(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,s;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),i=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(i.apply(Uint8Array,[void 0,r.sent()])),s=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[s++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function l(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var i=e[r],s=t(i);s!==i&&(n===e&&(n=e.slice()),n[r]=s)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),i=t[0],s=t[1];return a[n?i.toLowerCase():i]=s}),a}function i(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function s(e){return"?"+i(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"l",function(){return m}),n.d(t,"c",function(){return p}),n.d(t,"h",function(){return h}),n.d(t,"i",function(){return f}),n.d(t,"n",function(){return g}),n.d(t,"k",function(){return v}),n.d(t,"d",function(){return b}),n.d(t,"m",function(){return y}),n.d(t,"b",function(){return k}),n.d(t,"g",function(){return w}),n.d(t,"a",function(){return C}),n.d(t,"j",function(){return S}),n.d(t,"f",function(){return T}),n.d(t,"e",function(){return O});var r=n(1),a=n(6),i=n.n(a),s=n(5),o=n(39),l=n.n(o),c=n(11),u=n.n(c),d=n(3);function m(e,t,n,a,i){var o,c,u={},d=t.id,m=function(o){var l,c,m,p,h,f,g=a[o],v=e[o]||[],b=t[o];if(!b)return"continue";var y=b.map(function(e,t){return{doc:e,idx:t}}),k=y.filter(function(e){return!v.some(function(t){return t.id===e.doc.id})});try{for(var E=r.h(k),w=E.next();!w.done;w=E.next()){var C=w.value,S=(R=r.a({},C.doc)).$meta;delete R.$meta,"add"===S?(R.id||(R.id=Object(s.h)()),i.add(g,R)):"update"===S&&i.put(g,R),i.link(n,d,g,R.id,o),u[o]||(u[o]={}),u[o][C.idx]={$set:R}}}catch(e){l={error:e}}finally{try{w&&!w.done&&(c=E.return)&&c.call(E)}finally{if(l)throw l.error}}var T=v.filter(function(e){return!b.some(function(t){return t.id===e.id})});try{for(var O=r.h(T),N=O.next();!N.done;N=O.next()){var D=N.value;i.unlink(n,d,g,D.id,o)}}catch(e){m={error:e}}finally{try{N&&!N.done&&(p=O.return)&&p.call(O)}finally{if(m)throw m.error}}var I=y.filter(function(e){return v.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var x=r.h(I),j=x.next();!j.done;j=x.next()){var R,L=j.value;delete(R=r.a({},L.doc)).$meta,i.put(g,R),u[o]||(u[o]={}),u[o][L.idx]={$set:R}}}catch(e){h={error:e}}finally{try{j&&!j.done&&(f=x.return)&&f.call(x)}finally{if(h)throw h.error}}};try{for(var p=r.h(Object.keys(a)),h=p.next();!h.done;h=p.next()){m(h.value)}}catch(e){o={error:e}}finally{try{h&&!h.done&&(c=p.return)&&c.call(p)}finally{if(o)throw o.error}}return l()(t,u)}function p(e){return i()(e).format("YYMMDD HH:mm")}function h(e){return i()(e).format("YYMMDD")}function f(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function g(e,t,n){return l()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function v(e,t,n){return l()(t,{createdDate:{$set:e},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function b(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function y(e,t){var n=Date.now();return(e=g(n,e,t)).createdBy||(e=v(n,e,t)),e}function k(e,t,n){var a,i,s=r.a({},e),o=t[e.id];o&&(s.$etag=o);try{for(var l=r.h(n),c=l.next();!c.done;c=l.next()){var u=c.value,d=e[u].map(function(e){return k(e,t,[])});s[u]=d}}catch(e){a={error:e}}finally{try{c&&!c.done&&(i=l.return)&&i.call(l)}finally{if(a)throw a.error}}return s}function E(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return E(0,function(t){return t.readAsText(e)})}function C(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function S(e){var t=u()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function T(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,s,o,l,c;return r.d(this,function(u){switch(u.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,i=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),i&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return s=r.f.apply(void 0,[u.sent(),3]),o=s[0],l=s[1],c=s[2],o.tasks=l,o.abilities&&o.abilitiesOrder&&(o.abilities=o.abilitiesOrder.map(function(e){return o.abilities.find(function(t){return t.id===e})})),o.knowledgeRequirements&&o.knowledgeRequirementsOrder&&(o.knowledgeRequirements=o.knowledgeRequirementsOrder.map(function(e){return o.knowledgeRequirements.find(function(t){return t.id===e})})),o.centralContent&&o.centralContentOrder&&(o.centralContent=o.centralContentOrder.map(function(e){return o.centralContent.find(function(t){return t.id===e})})),a&&(o.templateChain=c),[2,o]}})})}function O(e,t){return t.filter(function(t){return!e.includes(t)}).length>0||e.filter(function(e){return!t.includes(e)}).length>0}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(14),i=n(30),s=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new i.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var i=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),e}).catch(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,i,s){return r.b(this,void 0,void 0,function(){var o,l,c,u,d,m,p,h,f,g,v;return r.d(this,function(b){switch(b.label){case 0:return s&&"no-cache"===s.cache&&(i=r.a({},i,{nocache:Object(a.c)()})),o=i&&Object.keys(i).filter(function(e){return void 0!==i[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(i[e])}).join("&"),c=(l=this).authHeader,u=l.tokenInfo,d=l.bearerProvider,c||u||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=u=b.sent(),b.label=2;case 2:return u?u.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=u=b.sent(),b.label=4;case 4:c="Bearer "+u.token,b.label=5;case 5:return c&&(n.Authorization=c),h=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},s))];case 6:return 401==(f=b.sent()).status&&this.bearerProvider?(g=f.headers.get("www-authenticate"),console.log("Got "+f.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(v=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return v.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},s))];case 8:f=b.sent(),b.label=9;case 9:return[2,f]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,i,o,l){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=i,this.tokenUrl=o,this.tokenQuery=l,this.tokenInfo={token:null,expires:0},this.client=new s(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),l=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),i=n[2];if("R"!==i&&"W"!==i&&"S"!==i)throw new Error("Invalid access string: "+t);return new e(r,a,i)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var u=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return l}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return s}),n.d(t,"c",function(){return u});var d=function(){function e(e,t,n){this.http=new s(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var i,s,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(i=r.sent()).status?[3,3]:(s=u.bind,o=[void 0,i.status],[4,i.text()]);case 2:throw new(s.apply(u,o.concat([r.sent()])));case 3:return[4,i.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,s,o;return r.d(this,function(l){switch(l.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(i=l.sent()).status?[3,3]:(s=u.bind,o=[void 0,i.status],[4,i.text()]);case 2:throw new(s.apply(u,o.concat([l.sent()])));case 3:return[4,i.json()];case 4:return[2,l.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=u.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(u,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(i){return i.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(i){return i.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(i){return i.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(i){return i.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(i){return i.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),i=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,i=e.maximumTasksDisplayed,s=e.backgroundColor,o=e.progressColor,l=[];if(n>i)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var c=1;c<=n;c++)l.push(a.createElement("svg",{key:c},a.createElement("circle",{className:"circle-chart-background",fill:c>r?s:o,cx:"8",cy:"8",r:"8"})));return l},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return s});var s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,s=t.className,o=t.children,l=t.headerClassName,c=t.contentClassName,u=t.displayProgress,d=t.progressData,m=t.inactivated,p=t.inactivatedRender,h=this.state.headerOpen;return m?"titleAndChildren"===p?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,n),a.createElement(a.Fragment,null,o)):a.createElement(a.Fragment,null,o):a.createElement("div",{className:(s||"")+" openClose"+(h?" open":"")},a.createElement("div",{className:"openHeader"+(l?" "+l:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),u&&a.createElement(i,r.a({},d)))),a.createElement("div",{className:"openContent"+(c?" "+c:"")},o))},t}(a.Component)},function(e,t,n){"use strict";var r=n(4),a=n(18),i=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),s=n(14);function o(e){e.resources||(e.resources=[])}function l(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var u=JSON.parse(c),d=u.time,m=u.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return l(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return l(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var p=new i,h=Date.now(),f=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(s.a)(this.getBearer.bind(this)),this.refreshBearer=Object(s.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,i,s;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-h>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return i=this,s=this.tokenResponseMapper,[4,e.text()];case 4:return i.tokenInfo=s.apply(this,[r.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},v=function(e){function t(t,n,r){var a="string"!=typeof n?n:new f(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return p}),n.d(t,"b",function(){return f}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return v})},function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return l}),n.d(t,"a",function(){return c});var r=n(1),a=n(6),i=n.n(a);function s(e){return"AT"===e?[32,51]:[1,25]}function o(e,t){var n=null;n=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var r=i()(n.toString(),"YYYY");return 1!=r.week()&&(r=r.clone().add(1,"week")),t?[i()(r.clone()).week(32).startOf("week"),i()(r.clone()).week(51).endOf("week")]:[i()(r.clone()),i()(r.clone()).week(25).endOf("week")]}function l(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},,function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},function(e,t,n){"use strict";var r=n(56);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b})},,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},,,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(31).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(4),a=n(32),i=n(43),s=n(35),o=n(48),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,i,s){r=!0,e=a,t=i,i&&n?n(null,i,s):n&&n(a,null,s)});if(r){var i=o.a.current;if(!i)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var s=i.subscriptions,l=i.observer;return s.push(a),n=l,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new s.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,i=[null,null],s={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,s)),i[0]=e,null!==i[1]&&t(i,null,s)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,s)),i[1]=e,null!==i[0]&&t(i,null,s)}),s})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,i={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,s,o){if(a=o,r&&(r.unsubscribe(),r=null),s)t(null,s,i);else try{var l=e(n);l&&"function"==typeof l.subscribe?r=l.subscribe(function(e,n,a){r=a,t(e,n,i)}):t(l,null,a)}catch(s){t(null,s,a)}}),i})},t}(a.a);l.prototype.map=Object(i.a)(l)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},,function(e,t,n){"use strict";var r=n(40);n.d(t,"a",function(){return r.b}),n.d(t,"b",function(){return r.c})},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(4),a=n(32),i=n(43),s=n(31),o=n(30),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new s.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);l.prototype._map=Object(i.a)(l)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),i=n(0),s=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,l=e.title;return i.createElement("div",{title:l||Object(s.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},,,function(e,t,n){"use strict";n(32),n(31);var r=n(35);n.d(t,"a",function(){return r.a});var a=n(30);n.d(t,"b",function(){return a.a});var i=n(48);n.d(t,"c",function(){return i.a})},function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),i=n(21),s=n(6),o=n.n(s);var l=function(){function e(e){var t="academicYear"in e?e:Object(i.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(i.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(i.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),c=n(2),u=n(51),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return p}),n.d(t,"a",function(){return h});var m,p=function(){function e(t,n,i,s){var o=this;this.http=new a.f(t,n,{bearerProvider:i}),this.userEmailGetter=s;var l=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){l(e)&&(o[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,i=Object.create(e),s={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))l(o);function l(t){Object.keys(t).forEach(function(o){!i.hasOwnProperty(o)&&n(o)&&(i[o]=function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var l=JSON.stringify(r.g([o],n)),c=s[l];if(void 0!==c){if(c.promise)throw c.promise;if(c.error)throw c.error;if(c.timeout>Date.now())return c.value}try{var u=t[o].apply(e,n).then(function(e){s[l]={timeout:Date.now()+a,value:e}}).catch(function(e){s[l]={timeout:Date.now()+a,error:e}});throw s[l]={timeout:Date.now()+a,promise:u},u}catch(e){if(e.then)throw e;s[l]={timeout:Date.now()+a,error:e}}})})}return i}(this,{isApiMethod:l})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,i,s,o;return r.d(this,function(l){switch(l.label){case 0:return l.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=l.sent()).status?[3,3]:(i=a.c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(i.apply(a.c,s.concat([l.sent()])));case 3:return[4,n.json()];case 4:return[2,l.sent().courses];case 5:throw o=l.sent(),console.error("Error from EDS: "+o),new Error(Object(c.a)(m||(m=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,i,s;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(i=a.c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(i.apply(a.c,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(s){switch(s.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=s.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([s.sent()])));case 3:return[4,t.json()];case 4:return[2,s.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(s){switch(s.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=s.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([s.sent()])));case 3:return[4,t.json()];case 4:return[2,s.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(s){switch(s.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=s.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([s.sent()])));case 3:return[4,t.json()];case 4:return[2,s.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,l,c,d,m,p,h;return r.d(this,function(r){switch(e){case"en_sin":return[2,u.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,u.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=Object(i.d)(t,!0),s=Object(i.d)(t,!1),l=a[0],c=s[0],d=a[1],m=s[1],p={startDate:new Date(l.year(),l.month(),l.date()).toDateString(),endDate:new Date(l.year(),d.month(),d.date()).toDateString()},h={startDate:new Date(c.year(),c.month(),c.date()).toDateString(),endDate:new Date(c.year(),m.month(),m.date()).toDateString()},[2,{firstTerm:p,secondTerm:h,holidays:n}]}return[2]})})},e}(),h=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new l(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new l({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},function(e,t,n){"use strict";n.d(t,"b",function(){return m}),n.d(t,"a",function(){return k});var r=n(1),a=n(0),i=n(105),s=n(16),o=n(2),l=n(5),c=n(3),u=[{name:"schools",text:Object(o.a)(p||(p=r.e(["Skolor"],["Skolor"]))),route:"/schools"},{name:"subjects",text:Object(o.a)(h||(h=r.e(["Ämnen"],["Ämnen"]))),route:"/subjects"}],d=[{name:"courseBuilder",text:Object(o.a)(f||(f=r.e(["Kursbyggaren"],["Kursbyggaren"]))),route:"/courses/new"},{name:"studentPage",text:Object(o.a)(g||(g=r.e(["Elevsida"],["Elevsida"]))),route:""},{name:"feedback",text:a.createElement("span",null,a.createElement("i",{className:"fa fa-commenting-o","aria-hidden":"true"})," Feedback"),route:"https://kg.kunskapsporten.se/kursbyggaren/"}];function m(e,t,n,r){var a=Object(l.h)();n.update({imageId:{$set:a},images:{$set:[{id:a,url:r,acl:["role:USER:R","schoolRole:"+c.a.currentUser.school+"/EMPLOYEE:S"],$meta:"add"}]}})}var p,h,f,g,v,b,y,k=function(e){var t=e.title,n=(e.isTemplate,e.host),l=e.course,p=(e.origCourse,e.backgroundImage),h=e.activePage,f=c.a.currentUser.roles.some(function(e){return"ADMIN"===e}),g=d;return f&&(g=u.concat(g)),a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},p&&a.createElement("style",null,"\n        .pageHeader {\n          background-image: url('"+p+"') !important;\n        }\n      "),a.createElement("div",{className:"pageHeader",onDragOver:l&&s.a,onDrop:l&&function(e){return function(e,t,n,a){return r.b(this,void 0,void 0,function(){var n,a,i,s,l,u,d,p;return r.d(this,function(h){switch(h.label){case 0:return e.stopPropagation(),e.preventDefault(),n=e.dataTransfer.files,a=null,i=Array.from(e.dataTransfer.items),n.length>0?(s=n[0]).size>2097152?(Object(o.n)(Object(o.a)(v||(v=r.e(["Kan inte ladda upp bilder större än 2 MB"],["Kan inte ladda upp bilder större än 2 MB"])))),[2]):((l=new FormData).append("files",s),[4,c.a.kedBackendClient.http.fetch("web-upload","put",{},{},{body:l})]):[3,3];case 1:return 200!==(u=h.sent()).status?(Object(o.n)(Object(o.a)(b||(b=r.e(["Kunde inte ladda upp filen till Google Storage"],["Kunde inte ladda upp filen till Google Storage"])))),[2]):[4,u.text()];case 2:return a=h.sent(),[3,7];case 3:d=function(e){var t;return r.d(this,function(n){switch(n.label){case 0:return(t=i[e]).type.match("^text/uri-list")?[4,new Promise(function(e){return t.getAsString(e)})]:[3,2];case 1:a=n.sent(),n.label=2;case 2:return[2]}})},p=0,h.label=4;case 4:return p<i.length?[5,d(p)]:[3,7];case 5:h.sent(),h.label=6;case 6:return++p,[3,4];case 7:return null==a?(Object(o.n)(Object(o.a)(y||(y=r.e(["Kunde inte hitta någon bild i innehållet"],["Kunde inte hitta någon bild i innehållet"])))),[2]):(m(0,0,t,a),[2])}})})}(e,n)}},a.createElement("a",null,a.createElement("h1",null,t)),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement("div",{className:"align-horizontal"}),a.createElement("div",{className:"horizontalMenu"},a.createElement("ul",null,g.map(function(t){return{item:t,isActive:h===t.name,callback:e.callbacks&&e.callbacks[t.name],givenRoute:e.routes&&e.routes[t.name],defaultRoute:t.route}}).filter(function(e){return e.callback||e.defaultRoute||e.givenRoute}).map(function(e){var t=e.item,n=e.isActive,r=e.callback,s=e.defaultRoute,o=e.givenRoute;return a.createElement("li",{key:t.name,className:n?"activePage":"",onClick:r},r?a.createElement("a",null,t.text):s||o?o||/^http[s]\:\/\//i.test(s)?a.createElement("a",{href:o||s},t.text):a.createElement(i.a,{to:s},t.text):a.createElement("a",null,t.text))})))))))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return l});var r=n(1),a=n(34),i=n(9),s=n(2);function o(e,t,n){var r=(void 0===n?{appendLeftovers:!1}:n).appendLeftovers,a={};if(!e||!t)return e;var i=e&&t?t.map(function(t){return a[t]=!0,e.find(function(e){return e.id===t})}).filter(function(e){return!!e}):e;if(r){var s=e.filter(function(e){return!a[e.id]});return i.concat(s)}return i}function l(e,t){var n,l;if(t)l=new a.a([t]);else{var c=e.tags.filter(function(e){return e.startsWith("course:")});if(0===c.length)return new a.a(e);l=(n=i.c.courses).tags.apply(n,r.g(c)).toValue()}return l.map(function(t){var n=Object(s.k)(t.map(function(e){return e.abilitiesOrder||[]})),r=Object(s.k)(t.map(function(e){return e.centralContentOrder||[]})),a=Object(s.k)(t.map(function(e){return e.knowledgeRequirementsOrder||[]})),i=Object.assign({},e);return i.abilities&&(i.abilities=o(e.abilities,n)),i.centralContent&&(i.centralContent=o(e.centralContent,r)),i.knowledgeRequirements&&(i.knowledgeRequirements=o(e.knowledgeRequirements,a)),i})}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=null,a=[function(){return r}];var i={get current(){return r},addProvider:function(e){a.push(e),s()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),s()}};function s(){Object.defineProperty(i,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},,function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Vågrät linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga länk",result:function(){var e=window.prompt("Ange länkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,i=window.prompt(this.promptMsg);if(i){var s=document.createElement("img");s.src=i,s.tabIndex=1,n=s,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),s.onfocus=t.onFocus,s.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(10),s=new DOMParser,o={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function l(e){for(var t=s.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)c(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function c(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&o[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),u(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),i=a.name&&!!t[a.name.toLowerCase()];i||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),u(e)&&(t=!0),t}function u(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)c(n.item(r))&&(t=!0);return t}var d=n(74);n.d(t,"a",function(){return b});var m="wysiwyg-actionbar",p="wysiwyg-button",h="wysiwyg-content",f="wysiwyg-focusrect",g="wysiwyg-focuspoint",v="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||l(e.html)!==l(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(l(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:y(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(g)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),i=a.next();!i.done;i=a.next()){switch(i.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,s=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(s=s.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta vänster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta höger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden på egen rad",result:function(){return e("unfloat")}}])));var o=this.state.focusRect,c=this.props,u=c.readOnly,b=c.reportNumChars,y=c.maxChars;return a.createElement("div",{className:this.props.className},!u&&a.createElement("div",{className:m},s.map(function(e,n){return a.createElement("button",{key:n,className:p,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:u?v:h,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:l(this.props.html)},contentEditable:!u,onPaste:function(e){if(!isNaN(y)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>y&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:0)}:null,onKeyPress:isNaN(y)?null:function(e){var t=e.target.innerText;t&&t.length>=y&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){u||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(i.a)("outdent"):Object(i.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),o&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:f,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:g+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:g+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:g+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:g+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function y(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},function(e,t,n){"use strict";n.d(t,"e",function(){return u}),n.d(t,"b",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"f",function(){return p}),n.d(t,"d",function(){return h}),n.d(t,"c",function(){return f});var r,a,i,s,o=n(1),l=n(2),c=n(16);function u(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function d(e){return m([e],e.tasks)}function m(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function p(e){return Object(l.k)([function(e){var t={};return Object(l.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(l.a)(r||(r=o.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(l.a)(a||(a=o.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(l.a)(i||(i=o.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(l.a)(s||(s=o.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function h(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}function f(e){return e.responsibleTeachers.map(function(e){return{name:e.name,email:Object(c.d)(e),access:e.access||"edit"}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return l});var r=n(1),a=n(15),i=n(58),s=n(7),o=function(){function e(){var e,t;this._initialized=!1;var n=function(e){Object.defineProperty(a,e,{get:function(){return this._initialized||this.init(),this._features[e]},set:function(e){throw new Error("Feature flags cannot be set here")}})},a=this;try{for(var s=r.h(Object.keys(i)),o=s.next();!o.done;o=s.next()){n(o.value)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}}return e.prototype.init=function(){var e,t;if(!this._initialized){var n=(s.a.KED_FEATURES||"").split(",").map(function(e){return e.trim().toLowerCase()}),o=Object(a.b)(location.search,{toLower:!0});o.testversion&&(n=["*"]),o.features&&(n=o.features.split(",").map(function(e){return e.trim().toLowerCase()}));var l=n.includes("*");this._features={};try{for(var c=r.h(Object.keys(i)),u=c.next();!u.done;u=c.next()){var d=u.value;this._features[d]=l||n.includes(d.toLowerCase())}}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}this._initialized=!0}},e}(),l=new o},function(e,t,n){"use strict";n.d(t,"a",function(){return f});var r=n(1),a=n(8),i=n(90),s=n.n(i),o=n(91),l=n.n(o),c=n(60),u=n(61),d=n(0),m=n(7),p=n(6),h=n.n(p),f=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(s.a,l.a)),n.messages={sv:c,en:u},h()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},function(e){e.exports={picker:"Integrate coursebuilder and subjectplanner with Google Picker",ksTutorComment:"Integrate KSTermplanner with tutor comments",kgTutorComment:"Integrate KSTermplanner  with tutor comments",termplannerCharts:"Integrate KSTermplanner with progress charts",weekplannerCharts:"Integrate Weekplanner with progress charts",teacherRights:"Activate course builder teacher rights",studyGroups:"Add study groups and google classroom functionality",cbCollapseBoxes:"Course Builder: Collapse modules by default",ksAssignments:"KS show hand-in assignments",markPartialKRs:"Activate mark partial knowledge requirments functionality"}},,function(e){e.exports={"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"Lägg till eget arbetsmål","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Framsteg diagram","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.goals":"Egna lärandemål","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"Mål:","weekplanner.addLearningGoalTitle":"Lägg till eget lärandemål","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoal":"Eget lärandemål","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(19),s=n(2),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,o=t.markedIds,l=t.markMode,c=t.migratedIds,u=t.uncoveredIds,d=Object(s.b)(n,function(e){return e.group||"default"}),m=Object.keys(d);return a.createElement(i.a,{title:a.createElement("p",null,r),className:"larger"},m.map(function(t){return a.createElement(a.Fragment,{key:t},1===m.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=o.some(function(e){return e===t.id}),r=c&&!!c[t.id],i=u&&u[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return l&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(l?" selectable":"")+(n?" markedGreen":i?" markedRed":"")+(r?" migrated":""),title:r?l?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(9),s=n(37),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>1&&(n=n.slice(1)),{infos:[e]})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),i.c.writer.onError(this._dbWriterError),i.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),i.c.writer.off(this._dbWriterError),i.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,i=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!i}).map(function(t){var n=t.message,r=t.details,i=t.retryable,o=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(s.a,{onClick:function(){return e.removeError(n)}})),r||i?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},o?"Dölj detailer":"Visa detailjer")," "):void 0,o?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),i?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){i.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(r.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt(this.promptMsg);e&&Object(r.a)("insertImage",e)}}}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(e){function t(t){var n=e.call(this,["https://www.googleapis.com/auth/drive"])||this;return n.options=t||{upload:!1,multiple:!1},n}return r.c(t,e),t.prototype.show=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,new Promise(function(t,n){var r=(new google.picker.PickerBuilder).addView((new google.picker.DocsView).setOwnedByMe(!0).setIncludeFolders(!0)).setLocale("sv").setSize(1051,650).setOAuthToken(e.authToken).setCallback(function(r){if(r.action==google.picker.Action.CANCEL)n();else if(r.action==google.picker.Action.PICKED){var a=[];r.docs.forEach(function(t){var n=t.id,r=t.mimeType,i=t.name,s=t.modifiedTime,o=t.iconUrl,l=t.url,c=r.includes("google-apps");a.push({fileId:n,mimeType:r,name:i,modifiedTime:s,canExport:c,iconUrl:o,url:l}),e.updatePermissions(n)}),console.log(a),t(a)}});e.options.upload&&r.addView((new google.picker.DocsUploadView).setIncludeFolders(!0)),e.options.multiple&&r.enableFeature(google.picker.Feature.MULTISELECT_ENABLED),e.picker=r.build(),e.picker.setVisible(!0)})]}})})},t.prototype.updatePermissions=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return t.sent(),gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"reader",type:"domain",domain:"kunskapsskolan.se"}),[2]}})})},t.prototype.downloadFile=function(e){var t=e.file,n=e.limitSize;return r.b(this,void 0,void 0,function(){var e,a=this;return r.d(this,function(r){switch(r.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return r.sent(),t.canExport?[2,new Promise(function(e,n){gapi.client.drive.files.export({fileId:t.fileId,mimeType:"application/pdf"}).then(function(n){for(var r=n.body.length,a=new Uint8Array(new ArrayBuffer(r)),i=0;i<r;i++)a[i]=n.body.charCodeAt(i);var s=new Blob([a],{type:"application/pdf"}),o=t.name+".pdf";e(new File([s],o,{type:"application/pdf",lastModified:t.modifiedTime}))})})]:(e=function(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET","https://www.googleapis.com/drive/v3/files/"+e.fileId+"?alt=media",!0),r.setRequestHeader("Authorization","Bearer "+a.authToken),r.responseType="blob",r.onload=function(){t(new File([r.response],e.name,{type:e.mimeType,lastModified:e.modifiedTime}))},r.send()})},[2,new Promise(function(r,a){void 0!==n?gapi.client.drive.files.get({fileId:t.fileId,fields:"size"}).then(function(e){Number(e.result.size)>1024*n*1024&&a("GooglePickerError: Filsize is too laarge")}).then(function(){e(t).then(function(e){r(e)})}):e(t).then(function(e){r(e)})})])}})})},t}(n(78).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(3),i=function(){function e(e){var t;this.scopes=["https://www.googleapis.com/auth/userinfo.email","https://www.googleapis.com/auth/userinfo.profile"],(t=this.scopes).push.apply(t,r.g(e))}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e,t,n=this;return r.d(this,function(r){switch(r.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:r.sent(),r.label=2;case 2:return e="421572262269-u68v5lf5o8ss5t68l8gkq3pfarh6dbkv.apps.googleusercontent.com",t=this.scopes.join(" "),[4,new Promise(function(r,i){gapi.load("client:auth2",function(){var s=!1;return console.log("loading client:auth2"),gapi.auth2.authorize({client_id:e,scope:t,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"none"},function(o){if(console.log(o),o.error)s=!0;else{var l=new Set(o.scope.split(" "));n.scopes.filter(function(e){return!l.has(e)}).length>0?(console.log("missing scopes"),s=!0):(n.authToken=o.access_token,r())}if(s)return console.log("reauthorize"),gapi.auth2.authorize({client_id:e,scope:t,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"consent"},function(e){console.log(e),e.error?i("Google Web Client: No access token"):(n.authToken=e.access_token,r())})})})})];case 3:return r.sent(),"undefined"!=typeof google&&void 0!==google.picker?[3,5]:[4,new Promise(function(e){gapi.load("picker",function(){e()})})];case 4:r.sent(),r.label=5;case 5:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n.n(r),i=function(e){var t=e.size,n=void 0===t?30:t;return a.a.createElement("svg",{width:n,version:"1.1",xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 508.52 508.52",fill:"#ffffff",style:{verticalAlign:"middle",marginRight:"4px"}},a.a.createElement("polygon",{points:"484.492,284.58 339.024,32.577 169.496,32.577 314.996,284.58"}),a.a.createElement("polygon",{points:"145.437,74.276 0,326.279 84.764,473.05 230.169,221.143"}),a.a.createElement("polygon",{points:"234.396,316.363 143.371,475.943 423.756,475.943 508.52,316.36"}))},s=function(e){var t=e.label,n=void 0===t?"Google Drive":t,r=e.action;return a.a.createElement("a",{className:"btn",onClick:r},a.a.createElement(i,{size:16})," ",n)}},function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(2);function s(e){return e.split(".").filter(function(e){return e})}function o(e,t){return e&&e.filter(function(e){return!!e[t]}).map(function(e){return e[t].trim()})}function l(e,t,n,r){var a=e.name,i=s(e.name),l=o(t,e.id),u=n&&c(n,t);return i.forEach(function(e){var t=e.trim(),n=e+".";if(l&&l.includes(t))a=a.replace(n,"<span class=markedGreen>"+n+"</span>");else{var i=u&&u.includes(t);!r&&u&&u.length>0&&!i?a=a.replace(n,"<span class=markedRed>"+n+"</span>"):i&&(a=a.replace(n,'<span class="sentence-covered">'+n+"</span>"))}}),a}function c(e,t){var n=[];return(t?e.filter(function(e){return!t.includes(e)}):e).forEach(function(e){if(e){var t=Object.keys(e).map(function(t){return e[t]})[0].trim();t&&n.push(t)}}),n}function u(e,t){return e?t?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0}n.d(t,"a",function(){return m});var d,m=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.getKnowledgeSentencesContent=function(e,t,n,r,i){var l=this,d=this.props,m=d.partialRequirments,p=d.coveredPartialRequirments,h=d.markMode,f=s(e.name),g=o(m,e.id),v=p&&c(p,m);return a.createElement("td",{key:t,title:u(i,h)},f.map(function(t,i){var s=t.trim(),o=g&&g.includes(s)||n,c=r&&!v.includes(s);return a.createElement("span",{key:i,dangerouslySetInnerHTML:{__html:t?t+".":""},className:"selectable"+(o?" markedGreen":c?" markedRed":""),onClick:function(){var r=g&&g.includes(s);n&&0==g.length?l.props.onUpdatePartialKnowledge(e.id,f.filter(function(e){return e.trim()!=s}),!1):l.props.onUpdatePartialKnowledge(e.id,[t],r),l.updateRequirmentState(e.id,r,s,f,g,n)}})}))},t.prototype.updateRequirmentState=function(e,t,n,r,a,i){var s=[];t?s=a.filter(function(e){return e!=n}):(a.push(n),s=a);var o=r.every(function(e){return e.trim()&&s.indexOf(e.trim())>=0});o&&!i&&this.props.onMarkChanged(e,!i),i&&!o&&this.props.onMarkChanged(e,!i)},t.prototype.onRequirementChanged=function(e,t){if(this.props.onUpdatePartialKnowledge){var n=s(e.name);this.props.onUpdatePartialKnowledge(e.id,n,!t)}this.props.onMarkChanged(e.id,t)},t.prototype.render=function(){for(var e=this,t=this.props,n=t.knowledgeRequirements,m=t.markedIds,p=t.migratedIds,h=t.explainedRequirements,f=t.markBySentenceView,g=t.markPartialFeatureEnabled,v=this.props,b=v.idsToMarkNotOk,y=v.markMode,k=v.onExplainedRequirementsChanged,E=v.partialRequirments,w=v.coveredPartialRequirments,C=["E","C","A"],S=[],T=n.slice(),O=null;!(O=C.map(function(e){var t=T.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=T[t];return T.splice(t,1),n})).every(function(e){return null===e});)S.push(O);return a.createElement("div",null,a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,C.map(function(e){return a.createElement("th",{key:e},e)}))),a.createElement("tbody",null,S.map(function(t,n){return a.createElement(a.Fragment,{key:n},a.createElement("tr",null,t.map(function(t,n){var r=t&&m&&m.indexOf(t.id)>=0,i=t&&b&&b[t.id],d=t&&p&&!!p[t.id],h=o(E,t.id),v=function(e,t,n){for(var r=s(e.name),a=!1,i=0;i<r.length;i++){var o=r[i].trim(),l=n&&c(n,t);if(l&&l.includes(o)){a=!0;break}}return a}(t,E,w),k=i&&!(h&&h.length>0||v);return f&&g?e.getKnowledgeSentencesContent(t,n,r,i,d):a.createElement("td",{key:n,dangerouslySetInnerHTML:{__html:t?r?t.name:l(t,E,w,k):""},className:(y?"selectable":"")+(d?" migrated":"")+(r?" markedGreen":k?" markedRed":""),onClick:y&&t?function(){return e.onRequirementChanged(t,!r)}:void 0,title:u(d,y)})})),h&&a.createElement("tr",null,t.map(function(e,t){var n=o(E,e.id),s=e&&m&&m.indexOf(e.id)>=0||n.length>0;return a.createElement("td",{key:t},s?a.createElement("textarea",{placeholder:Object(i.a)(d||(d=r.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!y,value:h[e.id]||"",onChange:k&&function(t){return k(e.id,t.target.value)}}):void 0)})))}))))},t}(a.Component)},,,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var t=n(7);t.b.ENVIRONMENT="test",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,n(118))},function(e,t,n){"use strict";n(93);var r=n(1),a=n(15),i=n(20),s=n(5),o=n(7),l=n(3),c=n(13),u=n(2);function d(e,t,n){var i=Object(a.b)(t),s=Object(u.e)(i,c.a),o=r.f(Object(a.c)(e),2),l=o[0],d=o[1],m=Object(a.b)(d);return l+Object(a.a)(r.a({},m,s,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function p(e,t,n){return new s.e(i.c,i.d,e+t.mail+location.search,o.b.KED_CLIENT_ID,o.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var h,f,g=l.a.currentUser&&l.a.currentUser.mail;if(g)if(o.b.KED_TOKEN_PATH){var v=d(o.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);l.a.bearerProvider=(f=m(h=v,g),new i.b(h,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){l.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,f),{token:t.token,expires:Date.now()+354e4}},f)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(l.a.currentUser=JSON.parse(t))}(m(v,g));var b=d(o.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);l.a.googleTokenProvider=function(e,t){var n=m(e,t);return new i.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,g)}else{if(!(o.b.KED_TOKEN_URL&&o.b.KED_CLIENT_ID&&o.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");l.a.bearerProvider=p(o.b.KED_TOKEN_URL,l.a.currentUser,["kedbackend","EDS"]),l.a.googleTokenProvider=p(o.b.KED_TOKEN_URL+"/google",l.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}l.a.kedBackendClient=new i.a(o.b.KED_API_URL,l.a.bearerProvider);var y=n(44);l.a.edsClient=new y.b(i.c,o.b.EDS_API_URL,l.a.bearerProvider,function(){return l.a.currentUser.mail})},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return p}),n.d(t,"b",function(){return h});var r,a,i,s=n(1),o=n(0),l=n(45),c=n(2),u=n(3),d=n(5),m=n(105),p=function(e){return o.createElement("div",{style:{outline:0}},o.createElement(l.a,{title:"Skolor",activePage:"schools",callbacks:{schools:function(){return location.hash="#/schools"}},routes:{feedback:e.feedbackUrl}}),o.createElement(h,s.a({},e)))},h=function(e){function t(t){var n=e.call(this,t)||this;return n.state=null,n}return s.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(c.n)(e)})},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:return this.props.id?(e=this.props.id,[4,u.a.kedBackendClient.get("schools",e)]):[3,2];case 1:return t=n.sent(),this.origSchool=s.a({},t),this.setState(s.a({},t)),[3,3];case 2:this.setState({id:Object(d.h)(),officialBranchId:Object(d.h)(),isGymnasium:"gymnasium"===this.props.type,isPrimarySchool:"primary"===this.props.type}),n.label=3;case 3:return[2]}})})},t.prototype.save=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:if(e=new d.a,(t=s.a({},this.state,{tags:(this.state.tags||[]).filter(function(e){return["primary","gymnasium"].indexOf(e)<0})})).isPrimarySchool&&t.tags.push("primary"),t.isGymnasium&&t.tags.push("gymnasium"),!t.isGymnasium&&!t.isPrimarySchool)throw new Error(Object(c.a)(r||(r=s.e(["Skolan måste antingen vara gymnasium eller grundskola"],["Skolan måste antingen vara gymnasium eller grundskola"]))));if(this.origSchool){if(this.origSchool.name!==this.state.name)throw new Error("Skolans namn får inte ändras. Kontakta Vemendo AB.");t.officialBranchId||(t.officialBranchId=Object(d.h)(),this.addSchoolBranch(t,e)),e.put("schools",t)}else t.acl=["role:USER:R"],t.acl.push(new d.b("schoolRole",t.name+"/EMPLOYEE","W").toString()),e.add("schools",t),this.addSchoolBranch(t,e);return[4,u.a.kedBackendClient.batch(e.mutationRequests)];case 1:return n.sent(),location.hash="#/schools",[2]}})})},t.prototype.addSchoolBranch=function(e,t){var n={id:e.officialBranchId,name:e.name,schoolId:e.id,acl:["role:USER:R",new d.b("schoolRole",e.name+"/EMPLOYEE","W").toString()]};t.add("branches",n)},t.prototype.deleteSchool=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:return prompt(Object(c.a)(a||(a=s.e(['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'],['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'])),this.state.name))!==this.state.name?[3,3]:[4,u.a.kedBackendClient.list("branches",{ids:[this.state.officialBranchId],include:"approvedChildren",flags:["includeIdsOnly"]})];case 1:return e=n.sent(),(t=new d.a).delete("schools",this.state.id),e[0].approvedChildren.forEach(function(e){var n=e.id;t.delete("branches",n)}),t.delete("branches",this.state.officialBranchId),[4,u.a.kedBackendClient.batch(t.mutationRequests)];case 2:return n.sent(),location.hash="#/schools",[3,4];case 3:alert("Skolan togs inte bort eftersom det namn du angav inte stämmer."),n.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=!!t.id,a=this.state,l=this.origSchool,d=u.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},o.createElement("h2",null,n),o.createElement("hr",null),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Namn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:!a||!a.name,disabled:!d||r,tabIndex:1,size:50,value:a?a.name:"",onChange:function(t){return e.setState({name:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Visningsnamn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:a&&!a.displayName,disabled:!d,tabIndex:1,size:50,value:a?a.displayName:"",onChange:function(t){return e.setState({displayName:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),a&&a.isGymnasium?o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"EDS namn (gymnasium):"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNameGymn:"",onChange:function(t){return e.setState({edsSchoolNameGymn:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})):null,a&&a.isPrimarySchool?o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"EDS namn (grundskola):"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNamePrim:"",onChange:function(t){return e.setState({edsSchoolNamePrim:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})):null,o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Typ:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"checkbox",name:"schoolTypePrimary",disabled:!d,checked:a&&a.isPrimarySchool,tabIndex:1,value:"primary",onChange:function(t){return e.setState({isPrimarySchool:t.target.checked})}})," Grundskola"),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"}),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"checkbox",name:"schoolTypeGymnasium",disabled:!d,checked:a&&a.isGymnasium,tabIndex:1,value:"gymnasium",onChange:function(t){return e.setState({isGymnasium:t.target.checked})}})," Gymnasium"),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("br",null),d&&r&&o.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.deleteSchool().catch(c.n)}},"Ta bort skola"),o.createElement("div",{className:"pull-right"}," "),o.createElement(m.a,{className:"btn btn-warning btn-large pull-right",to:"/schools"},"Avbryt"),d&&o.createElement("a",{tabIndex:1,className:"btn btn-large",onClick:function(){l&&l.name!==a.name&&!confirm(Object(c.a)(i||(i=s.e(["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."],["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."]))))||e.save().catch(c.n)}},"Spara")))},t}(o.Component)},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"a",function(){return s});var r=n(2),a=n(46);function i(e){return Object(a.a)(e.tasks,e.taskOrder,{appendLeftovers:!0})}function s(e,t,n,i,s,o){(void 0===o?{appendLeftovers:!1}:o).appendLeftovers;var l=Object(a.a)(e,t,{appendLeftovers:!0}).map(function(e){return e.id}),c="before"===s;return Object(r.k)(l.filter(function(e){return e!==n.id}).map(function(e){return e!==i.id?e:c?[n.id,e]:[e,n.id]}))}},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),i=n(3),s=n(45),o=n(12),l=n(108),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(o.a,null));var e=this.state.subject,t=e.name;e.code,e.courseTemplates,e.schoolType;return a.createElement("div",null,a.createElement(s.a,{title:t,activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),a.createElement(l.a,{id:this.props.id}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(3),s=n(12),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(s.a,null));var e=this.state.subject,t=e.name,n=e.code,r=e.courseTemplates,i=e.schoolType;return a.createElement("div",null,"primary"===i?a.createElement(a.Fragment,null,a.createElement("h2",null,"Grundskoleämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var n=e.id,r=(e.code,e.publishable,e.points,e.schoolGrade);return a.createElement("li",{key:n,className:"complete"},t," för årskurs ",r)}))):a.createElement(a.Fragment,null,a.createElement("h2",null,"Kurser för ämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var t=e.id,n=e.name,r=(e.code,e.publishable,e.points);return a.createElement("li",{key:t,className:"complete"},n," - ",r,"p")}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n.n(a);function s(e){var t=e.taskMetas,n=e.renderEditLink,s=e.renderLink,o=e.onSort,l=r.f(Object(a.useState)({taskBeingDragged:null,taskBeingHovered:null,insertBefore:!1,originClientY:-1}),2),c=l[0],u=l[1],d=c.taskBeingDragged,m=c.taskBeingHovered,p=c.insertBefore,h=c.originClientY;return i.a.createElement("div",{className:"taskContainer sortable",onDrop:function(e){m&&d&&o(d,m,p?"before":"after"),u(r.a({},c,{taskBeingHovered:null,taskBeingDragged:null}))}},t.map(function(e){var t=e.task,a=e.isTaskOwner,o=function(e){return e.migratedTexts&&Object.keys(e.migratedTexts).some(function(t){return Object.keys(e.migratedTexts[t]).length>0})}(t),l=t.id;return i.a.createElement(i.a.Fragment,{key:l},p&&m===t?i.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,i.a.createElement("div",{className:["align-horizontal","draggable",t===d&&"drag-source"].filter(function(e){return e}).join(" "),draggable:!0,onDragStart:function(e){e.dataTransfer.effectAllowed="move",u(r.a({},c,{originClientY:e.clientY,taskBeingDragged:t}))},onDragOver:function(e){d&&(d!==t?(e.preventDefault(),e.dataTransfer.dropEffect="move",u(r.a({},c,{taskBeingHovered:t,insertBefore:h>e.clientY}))):u(r.a({},c,{taskBeingHovered:null})))},onDragEnd:function(e){u(r.a({},c,{taskBeingHovered:null,taskBeingDragged:null}))}},a&&o&&i.a.createElement("div",{className:"horizontalItem top"},i.a.createElement("div",{style:{position:"relative",top:"0.2em",left:"-0.7em"}},i.a.createElement("i",{className:"fa fa-pagelines",style:{position:"absolute",top:0,left:0,color:"#49c35a"}}))),i.a.createElement("div",{className:"horizontalItem top"},n(e)),i.a.createElement("div",{className:"horizontalItem top"},s(e))),p||m!==t?null:i.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r,a=n(1),i=n(0),s=n(2),o=n(16),l=n(70),c=n.n(l),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state=n.props.resource||{name:"",url:""},n}return a.c(t,e),t.prototype.save=function(){var e=this.state;if(!c.a.isUri(e.url))throw new Error(Object(s.a)(r||(r=a.e(["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"],["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"])),e.url));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.onSave,a=t.onDelete,s=this.state,l=c.a.isUri(this.state.url);return i.createElement("div",null,i.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},i.createElement("h2",null,n),i.createElement("hr",null),i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top"},"Namn:"),i.createElement("div",{className:"horizontalItem top"},i.createElement("input",{type:"text",autoFocus:!0,tabIndex:1,size:50,value:s.name,onChange:function(t){return e.setState({name:t.target.value})}})),i.createElement("div",{className:"horizontalItem top spaced"})),i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top"},"Länk:"),i.createElement("div",{className:"horizontalItem top "},i.createElement("input",{type:"text",tabIndex:1,size:50,value:s.url,onChange:function(t){return e.setState({url:t.target.value})}})),i.createElement("div",{className:"horizontalItem top spaced"})),i.createElement("br",null)),i.createElement("div",{className:"sv-html-portlet sv-portlet"},(s.createdDate||s.modifiedDate)&&i.createElement("div",null,s.createdDate&&i.createElement("p",null,"Resursen/Länken skapades ",Object(o.c)(s.createdDate)," av ",i.createElement("strong",null,s.createdBy.name),"."),s.modifiedDate&&i.createElement("p",null,"Resursen/Länken redigerades senast ",Object(o.c)(s.modifiedDate)," av ",i.createElement("strong",null,s.modifiedBy.name),"."),i.createElement("br",null),i.createElement("br",null)),a&&i.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return a()}},"Ta bort resurs/länk"),i.createElement("a",{tabIndex:1,className:"btn btn-large"+(l?"":" btn-inactive"),onClick:l&&function(){return r(s)}},"Spara")))},t}(i.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),i=function(e){function t(t){var n=e.call(this,t)||this;return n.myself=a.createRef(),n.state={text:t.text||""},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.tag,n=e.text,r=e.readOnly,i=t;return a.createElement(i,{contentEditable:!r,"data-placeholder":this.props.placeholder,ref:this.myself,className:this.props.className,onChange:this.onChange.bind(this),onKeyDown:this.onKeyDown.bind(this),onKeyUp:this.onKeyUp.bind(this),onBlur:this.onBlur.bind(this),onPaste:this.onPaste.bind(this),dangerouslySetInnerHTML:{__html:n}})},t.prototype.onChange=function(e){this.setState({text:this.myself.current.innerText})},t.prototype.onKeyDown=function(e){var t=this.myself.current.innerText;if("Escape"===e.key?(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.stopPropagation()):"Enter"===e.key?(e.preventDefault(),this.navigate(t,"down")):"Tab"===e.key?this.propagateOnChange(t):t.length>=this.props.maxChars&&/^[\d\w\s]$/.test(e.key)&&!e.metaKey&&!e.ctrlKey&&e.preventDefault(),!0===this.props.allowNavigation){var n=!!e.key.startsWith("Arrow")&&e.key.replace("Arrow","").toLowerCase(),r=document.getSelection().getRangeAt(0).endOffset;n&&0==t.length?this.navigate(t,n):!n||"up"!=n&&"down"!=n?n&&("left"==n&&0==r||"right"==n&&r==t.length)&&this.navigate(t,n):this.navigate(t,n)}},t.prototype.onKeyUp=function(e){var t=this.myself.current.innerText;void 0===this.props.validateValue||this.props.validateValue.test(t)||(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.preventDefault())},t.prototype.navigate=function(e,t){this.propagateOnChange(e),this.setState({text:e}),this.props.onNavigate(t)},t.prototype.onPaste=function(e){e.preventDefault();var t=e.clipboardData&&e.clipboardData.getData?e.clipboardData.getData("text/plain"):"";document.execCommand("insertHTML",!1,t)},t.prototype.onBlur=function(e){var t=this.myself.current.innerText;this.propagateOnChange(t),this.setState({text:t})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t}(a.PureComponent)},function(e,t,n){"use strict";var r,a,i,s=n(1),o=n(0),l=n(45),c=n(3),u=n(2),d=n(105),m=n(13),p=n(12),h=function(e){var t=e.schools,n=e.viewCourseUrl,l=c.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"editable-school-list"},o.createElement("div",null,t?o.createElement("table",null,o.createElement("tbody",null,t.map(function(e){return o.createElement("tr",{className:"align-horizontal",key:e.id},o.createElement("td",null,o.createElement(d.a,{className:"editItem",to:"/schools/"+e.id+"/edit"})),o.createElement("td",null,o.createElement("p",null,e.name)),o.createElement("td",null,o.createElement("p",null,o.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"EMPLOYEE",school:e.name})}},"Agera som lärare på denna skola"))),o.createElement("td",null,o.createElement("p",null,o.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"STUDENT",school:e.name,url:n})}},"Agera som elev på denna skola"))))}))):o.createElement("p",null,o.createElement(p.a,null),"V.g. vänta medan skolor laddas")),o.createElement("br",null),t&&l&&o.createElement(d.a,{to:"/schools/new/"+e.type,className:"btn"},"gymnasium"==e.type?Object(u.a)(r||(r=s.e(["Lägg till gymnasieskola"],["Lägg till gymnasieskola"]))):"primary"==e.type?Object(u.a)(a||(a=s.e(["Lägg till grundskola"],["Lägg till grundskola"]))):Object(u.a)(i||(i=s.e(["Lägg till skola"],["Lägg till skola"])))))};n.d(t,"a",function(){return f}),n.d(t,"b",function(){return g});var f=function(e){return o.createElement("div",{style:{outline:0}},o.createElement(l.a,{title:"Skolor",activePage:"schools",routes:{feedback:e.feedbackUrl}}),o.createElement(g,{viewCourseUrl:e.viewCourseUrl}))},g=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schools:null},n}return s.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(u.n)(e.message||e)})},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){var e;return s.d(this,function(t){switch(t.label){case 0:return[4,c.a.kedBackendClient.list("schools")];case 1:return e=t.sent(),this.setState({schools:e}),[2]}})})},t.prototype.render=function(){var e=this.state.schools;return e&&e.sort(Object(u.g)("name")),o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},e?o.createElement(o.Fragment,null,o.createElement("div",null,o.createElement("h2",null,"Gymnasieskolor"),o.createElement(h,{schools:e.filter(function(e){return e.isGymnasium}),viewCourseUrl:this.props.viewCourseUrl,type:"gymnasium"})),o.createElement("div",null,o.createElement("h2",null,"Grundskolor"),o.createElement(h,{schools:e.filter(function(e){return e.isPrimarySchool}),viewCourseUrl:this.props.viewCourseUrl,type:"primary"}))):o.createElement(p.a,null)))},t}(o.Component)},,,function(e,t){},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(19),s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.task,n=e.course,s=e.updateLink;if(!t.migratedTexts)return a.createElement(a.Fragment,null," ");var o=t.migratedTexts,l=o.abilities,c=o.centralContent,u=o.knowledgeRequirements,d=Object.keys(u||{}).map(function(e){return r.a({},n.knowledgeRequirements.find(function(t){return t.id===e}),u[e])}),m={title:"Uppdaterat kunskapskrav för betyget A",type:"knowledgeRequirements",items:d.filter(function(e){return"A"===e.gradeStep})},p={title:"Uppdaterat Kunskapskrav för betyget C",type:"knowledgeRequirements",items:d.filter(function(e){return"C"===e.gradeStep})},h={title:"Uppdaterat kunskapskrav för betyget E",type:"knowledgeRequirements",items:d.filter(function(e){return"E"===e.gradeStep})},f={title:"Uppdaterade förmågor",type:"abilities",items:Object.keys(l||{}).map(function(e){return r.a({},n.abilities.find(function(t){return t.id===e}),l[e])})},g=[m,p,h,{title:"Uppdaterat centralt innehåll",type:"centralContent",items:Object.keys(c||{}).map(function(e){return r.a({},n.centralContent.find(function(t){return t.id==e}),c[e])})},f].filter(function(e){return e.items.length>0});return 0===g.length?a.createElement(a.Fragment,null," "):a.createElement(i.a,{className:"larger",title:a.createElement("div",null,a.createElement("div",{className:"warningFlag"},a.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),a.createElement("p",null,"Uppdaterade formuleringar från Skolverket"))},g.map(function(e){var t=e.title,n=(e.type,e.items);return a.createElement("div",{key:t},a.createElement("h5",null,t),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{width:"40%"}},"Ursprunglig formulering"),a.createElement("th",{style:{width:"40%"}},"Skolverkets nya formulering"),a.createElement("th",null,"Täcker uppgiften den nya formuleringen?"))),a.createElement("tbody",null,n.map(function(e){return a.createElement("tr",{key:e.id},a.createElement("td",{dangerouslySetInnerHTML:{__html:e.oldText}}),a.createElement("td",{dangerouslySetInnerHTML:{__html:e.name}}),a.createElement("td",null,a.createElement("button",{onClick:function(){return s(e.id,!0)}},"Ja - behåll kopplingen"),a.createElement("button",{onClick:function(){return s(e.id,!1)}},"Nej - ta bort kopplingen")))}))))}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=["Lära att lära","Samarbeta","Agera globalt","Visa handlingskraft","Vara innovativ","Leva digitalt"]},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(1),a=n(11),i=n.n(a),s=n(7),o=3e5,l=s.a.KED_KEEP_ALIVE_URL,c=Date.now();function u(){setInterval(m,o),setTimeout(function(){return i()("body").mousemove(d).keypress(d).scroll(d)},100)}function d(){c=Date.now()}function m(){Date.now()-c<o&&function(){r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:console.log("Sending heartbeat request to "+l),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,fetch(l,{cache:"no-cache",credentials:"same-origin"})];case 2:return e=n.sent(),console.log("Response from "+l+": "+e.status+" "+e.statusText),[3,4];case 3:return t=n.sent(),console.warn("Request to "+l+" failed: "+t),[3,4];case 4:return[2]}})})}()}},,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(2),s=n(3),o=n(11),l=n.n(o);function c(e){switch(e.trim()){case"3":case"1-3":return["1-3"];case"6":case"4-6":return["4-6"];case"7-9":case"9":return["7-9"];case"1":case"1s":return["1-3"];case"1-6":return["1-3","4-6"];case"4-9":return["4-6","7-9"];default:throw new Error("Unexpected year in Skolverket XML: "+e+". Expecting 3,6,9 or 1-3, 4-6, 7-9")}}var u=n(5);function d(e,t){var n,a,i=new Set,s=new Map,o=new Set;t.forEach(function(t){if(t=t.trim(),e.has(t))s.set(t,e.get(t));else{var n=Object(u.h)();console.log("New id: "+n+". Text: "+t),s.set(t,n),o.add(n)}});try{for(var l=r.h(e.entries()),c=l.next();!c.done;c=l.next()){var d=r.f(c.value,2),m=d[0],p=d[1];-1===t.indexOf(m)&&i.add(p)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}return{removedIds:i,newTexts:s,idsToAdd:o}}var m=1;var p=new Set("alla allt att av blev bli blir blivit de dem den denna deras dess dessa det detta dig din dina ditt du där då efter ej eller en er era ert ett från för ha hade han hans har henne hennes hon honom hur här i icke ingen inom inte jag ju kan kunde man med mellan men mig min mina mitt mot mycket ni nu när någon något några och om oss på samma sedan sig sin sina sitta själv skulle som så sådan sådana sådant till under upp ut utan vad var vara varför varit varje vars vart vem vi vid vilka vilkas vilken vilket vår våra vårt än är åt över kring".split(" "));function h(e){return new Set(function(e){var t=document.createElement("div");return t.innerHTML=e,""+t.innerText}(e).replace(/[^\w\såäö]/gi,"").toLowerCase().split(/\s/).map(function(e){return e.trim()}).filter(function(e){return!!e}).filter(function(e){return!p.has(e)}))}function f(e,t,n,a,i){var s=new Map;e=e.map(function(e){return r.a({},e,{name:e.name.trim()})}).filter(function(e){return!!e.name});var o=new Map;t.forEach(function(e){return o.set(e.html,e)});var l=new Map;e.forEach(function(e){return l.set(e.name,e)}),e=e.filter(function(e){return!o.has(e.name)}),t=t.filter(function(e){return!l.has(e.html)}),e.forEach(function(e){return s.set(e.id,{gradeStep:e.gradeStep,oldText:e.name,lexemes:h(e.name),matchLevel:0})});for(var c=[];t.length>0;){var u=t[0],d=f(u);if(d){d.newText&&t.push({html:d.newText,gradeStep:d.gradeStep});var p=s.get(d.id);p.newText=u.html,p.matchLevel=d.myMatchLevel,p.newId=n.get(u.html)}else c.push(u);t.shift()}return c.forEach(function(e){s.set("fictiveOldId"+ ++m,{newId:n.get(e.html),newText:e.html,gradeStep:e.gradeStep,matchLevel:0,lexemes:new Set})}),s.forEach(function(e){var t=e.oldText,n=e.newText;t&&n&&r.g(h(t)).join(" ")===r.g(h(n)).join(" ")&&(e.isTypoFix=!0)}),console.log("IdsToMigrate",r.g(s.values()).map(function(e){var t=e.oldText,n=e.lexemes;return r.g(n).join(" ")+": "+t})),s;function f(e){var t=h(e.html);return r.g(s.entries()).filter(function(t){var n=r.f(t,2);n[0];return n[1].gradeStep===e.gradeStep}).map(function(e){var n=r.f(e,2),a=n[0],i=n[1],s=i.gradeStep,o=i.matchLevel,l=i.newText,c=i.lexemes;return{id:a,gradeStep:s,matchLevel:o,newText:l,myMatchLevel:g(t,c)}}).filter(function(e){return e.myMatchLevel>=50&&(!e.matchLevel||e.matchLevel<e.myMatchLevel)}).sort(function(e,t){return t.myMatchLevel-e.myMatchLevel})[0]}function g(e,t){if(0===e.size||0===t.size)return 0;var n=0,r=0;return e.forEach(function(e){t.has(e)&&++n}),t.forEach(function(t){e.has(t)&&++r}),Math.round(100*Math.max(n/e.size,r/t.size))}}function g(e,t,n,a){return r.b(this,void 0,void 0,function(){function o(e,t,r){var i=!$.has(e.name);$.add(e.name),F.forEach(function(t,n){var r=t.newId,i=t.oldText;a.push({mutations:function(t){i&&t.unlink2("courses",e.id,"abilities",n),r&&t.link2("courses",e.id,"abilities",r)}})}),e.abilitiesOrder=n.abilities.map(function(e){return P.get(e)});var s=r.ccsToMigrate,o=r.krsToMigrate;s.forEach(function(t,n){var r=t.newId,s=t.newText,o=t.oldText,l=t.isTypoFix;a.push({change:i&&(o?s?l?"Tryckfelsrättning Centralt Innehåll":"Uppdaterat Centralt Innehåll":"Borttaget Centralt Innehåll":"Nytt Centralt Innehåll"),content:"<h4>"+e.name+"</h4><strike>"+(o||"")+"</strike><br/>"+(s||""),mutations:function(t){if(r&&B.has(r)&&!V.has(r)){var a={id:r,name:s,acl:["role:USER:R"],dateTime:Date.now()};t.add("central-content",a),V.add(r)}o&&t.unlink2("courses",e.id,"centralContent",n),r&&t.link2("courses",e.id,"centralContent",r)}})}),e.centralContentOrder=t.centralContent.map(function(e){var t=e.html;return _.get(t)}),o.forEach(function(t,n){var r=t.newId,s=t.newText,o=t.gradeStep,l=t.oldText,c=t.isTypoFix;a.push({change:i&&(l?s?c?"Tryckfelsrättning Kunskapskrav":"Uppdaterat Kunskapskrav":"Borttaget Kunskapskrav":"Nytt Kunskapskrav"),content:"<h4>"+e.name+"</h4><strike>"+(l||"")+"</strike><br/>"+(s||""),mutations:function(t){if(r&&z.has(r)&&!V.has(r)){var a={id:r,name:s,gradeStep:o,acl:["role:USER:R"],dateTime:Date.now()};console.log("Adding Knowledge-Requirement "+r+": "+s),t.add("knowledge-requirements",a),V.add(r)}l&&t.unlink2("courses",e.id,"knowledgeRequirements",n),r&&t.link2("courses",e.id,"knowledgeRequirements",r)}})}),e.knowledgeRequirementsOrder=t.knowledgeRequirements.map(function(e){return q.get(e.html)}),(F.size>0||s.size>0||o.size>0)&&a.push({change:e.isTemplate?"Uppdaterad Kursmall":"Uppdaterad Kursinstans",content:e.isTemplate?""+e.name:e.name+". Skola: "+(e.school||"ej angiven")+". Beskrivning: "+(e.description||""),mutations:function(t){return t.put("courses",e)}})}function l(){return r.b(this,void 0,void 0,function(){function e(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return 0===e.length?[2,[]]:(new Map,console.log("Number of ids: "+e.length),[4,s.a.kedBackendClient.list("tasks",r.a({},t,{hasEdgesTo:e}))]);case 1:return[2,n.sent()]}})})}var t,n,o,l,c,u,d,m,p;return r.d(this,function(s){switch(s.label){case 0:return o=r.g(F.keys(),Object(i.k)(G.map(function(e){return r.g(e.ccsToMigrate.keys(),e.krsToMigrate.keys())}))).filter(function(e){return!e.startsWith("fictiveOldId")}),l=Date.now(),[4,e(o,{include:["abilities","knowledgeRequirements","centralContent"],flags:["includeIdsOnly"]})];case 1:c=s.sent(),u=function(e){var t,n,i,s,o,c,u,d,m=e.migratedTexts||{abilities:{},centralContent:{},knowledgeRequirements:{}};e.migratedTexts={abilities:{},centralContent:{},knowledgeRequirements:{}};var p=[],h=[],f=function(t){var n=F.get(t);if(n){var r=n.newId,a=n.newText,i=n.isTypoFix,s=n.oldText,o=t;m.abilities[t]&&(s=m.abilities[t].oldText,o=m.abilities[t].oldId),r&&s!==a&&(i||(e.migratedTexts.abilities[r]={oldId:o,oldText:s,importDate:l})),p.push(function(n){n.unlink2("tasks",e.id,"abilities",t),r&&n.link2("tasks",e.id,"abilities",r)}),h.push("<strike>"+s+"</strike>"),r&&h.push(a)}};try{for(var g=r.h(e.abilities),v=g.next();!v.done;v=g.next()){f(v.value.id)}}catch(e){t={error:e}}finally{try{v&&!v.done&&(n=g.return)&&n.call(g)}finally{if(t)throw t.error}}var b=new Set(e.tags?e.tags.filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)}):[]),y=new Set;try{for(var k=r.h(G),E=k.next();!E.done;E=k.next()){var w=E.value,C=w.krsToMigrate,S=w.ccsToMigrate,T=w.courseCode;if(0===b.size||b.has(T)){var O=function(t){var n=S.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,s=n.isTypoFix,o=t;m.centralContent[t]&&(i=m.centralContent[t].oldText,o=m.centralContent[t].oldId),r&&i!==a&&(s||(e.migratedTexts.centralContent[r]={oldId:o,oldText:i,importDate:l})),r&&y.has(r)||(p.push(function(n){n.unlink2("tasks",e.id,"centralContent",t),r&&n.link2("tasks",e.id,"centralContent",r)}),h.push("<strike>"+i+"</strike>"),r&&(h.push(a),y.add(r)))}};try{for(var N=r.h(e.centralContent),D=N.next();!D.done;D=N.next()){O(D.value.id)}}catch(e){o={error:e}}finally{try{D&&!D.done&&(c=N.return)&&c.call(N)}finally{if(o)throw o.error}}var I=function(t){var n=C.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,s=n.isTypoFix,o=t;m.knowledgeRequirements[t]&&(i=m.knowledgeRequirements[t].oldText,o=m.knowledgeRequirements[t].oldId),r&&i!==a&&(s||(e.migratedTexts.knowledgeRequirements[r]={oldId:o,oldText:i,importDate:l})),r&&y.has(r)||(p.push(function(n){n.unlink2("tasks",e.id,"knowledgeRequirements",t),r&&n.link2("tasks",e.id,"knowledgeRequirements",r)}),h.push("<strike>"+i+"</strike>"),r&&(h.push(a),y.add(r)))}};try{for(var x=r.h(e.knowledgeRequirements),j=x.next();!j.done;j=x.next()){I(j.value.id)}}catch(e){u={error:e}}finally{try{j&&!j.done&&(d=x.return)&&d.call(x)}finally{if(u)throw u.error}}}}}catch(e){i={error:e}}finally{try{E&&!E.done&&(s=k.return)&&s.call(k)}finally{if(i)throw i.error}}a.push({change:"Migrerad Uppgift",content:"<h4>"+e.name+" "+(e.school?"("+e.school+") ":"(skola ej angiven)")+"</h4>\n          <p>Kurskod: "+r.g(b).join(",")+"</p>\n          "+h.map(function(e){return"<p>"+e+"</p>"}).join(""),mutations:function(t){t.put("tasks",e),p.forEach(function(e){return e(t)})}})};try{for(d=r.h(c),m=d.next();!m.done;m=d.next())p=m.value,u(p)}catch(e){t={error:e}}finally{try{m&&!m.done&&(n=d.return)&&n.call(d)}finally{if(t)throw t.error}}return[2]}})})}var c,u,m,p,h,g,v,b,y,k,E,w,C,S,T,O,N,D,I,x,j,R,L,U,P,A,M,_,B,K,q,z,F,G,V,$,H,W,Z,Q,Y,J;return r.d(this,function(s){switch(s.label){case 0:E=new Map,w=e.abilitiesOrder?e.abilitiesOrder.map(function(t){return e.abilities.find(function(e){return e.id===t})}):e.abilities;try{for(C=r.h(w),S=C.next();!S.done;S=C.next())T=S.value,E.set(T.name.trim(),T.id)}catch(e){c={error:e}}finally{try{S&&!S.done&&(u=C.return)&&u.call(C)}finally{if(c)throw c.error}}try{for(O=r.h(t),N=O.next();!N.done;N=O.next()){Y=N.value.template;try{for(D=r.h(Y.centralContent),I=D.next();!I.done;I=D.next())x=I.value,E.set(x.name.trim(),x.id)}catch(e){h={error:e}}finally{try{I&&!I.done&&(g=D.return)&&g.call(D)}finally{if(h)throw h.error}}try{for(j=r.h(Y.knowledgeRequirements),R=j.next();!R.done;R=j.next())L=R.value,E.set(L.name.trim(),L.id)}catch(e){v={error:e}}finally{try{R&&!R.done&&(b=j.return)&&b.call(j)}finally{if(v)throw v.error}}}}catch(e){m={error:e}}finally{try{N&&!N.done&&(p=O.return)&&p.call(O)}finally{if(m)throw m.error}}U=d(E,n.abilities),P=U.newTexts,A=U.idsToAdd,M=d(E,Object(i.k)(n.courses.map(function(e){return e.centralContent.map(function(e){return e.html})}))),_=M.newTexts,B=M.idsToAdd,K=d(E,Object(i.k)(n.courses.map(function(e){return e.knowledgeRequirements.map(function(e){return e.html})}))),q=K.newTexts,z=K.idsToAdd,console.log("Abilities to add: "+A.size),console.log("CCs to add: "+B.size),console.log("KRs to add: "+z.size),F=f(w,n.abilities.map(function(e){return{html:e}}),P),G=t.map(function(e,t){var r=e.template;console.log("Course: "+r.name);var a=n.courses.find(function(e){return e.name===r.name})||n.courses.find(function(e){return e.code===r.code});return{courseCode:r.code,ccsToMigrate:a?f(r.centralContent,a.centralContent.map(function(e){return{html:e.html}}),_,0,r.name):new Map,krsToMigrate:a?f(r.knowledgeRequirements,a.knowledgeRequirements,q,0,r.name):new Map}}),F.forEach(function(t,n){var r=t.newText,i=t.newId,s=t.oldText,o=t.isTypoFix;a.push({change:s?r?o?"Tryckfelsrättning Förmåga":"Uppdaterad Förmåga":"Borttagen Förmåga":"Ny Förmåga",content:"<strike>"+(s||"")+"</strike><br/>"+(r||""),mutations:function(t){if(i&&A.has(i)){var a={id:i,name:r,acl:["role:USER:R"],dateTime:Date.now()};t.add("abilities",a)}s&&t.unlink2("subjects",e.id,"abilities",n),i&&t.link2("subjects",e.id,"abilities",i)}})}),(!e.abilitiesOrder||F.size>0)&&(e.abilitiesOrder=n.abilities.map(function(e){return P.get(e)}),a.push({mutations:function(t){return t.put("subjects",e)},change:e.abilitiesOrder?null:"Inför en ordnad lista på förmågor i databasen"})),V=new Set,a.push({mutations:function(){return V.clear()}}),$=new Set,a.push({mutations:function(){return $.clear()}}),H=function(e,t){var a,i,s=n.courses.find(function(t){return t.name===e.name})||n.courses.find(function(t){return t.code===e.code}),l=G.find(function(t){return t.courseCode===e.code}),c=l.ccsToMigrate,u=l.krsToMigrate;try{for(var d=r.h(t),m=d.next();!m.done;m=d.next()){o(m.value,s,{ccsToMigrate:c,krsToMigrate:u})}}catch(e){a={error:e}}finally{try{m&&!m.done&&(i=d.return)&&i.call(d)}finally{if(a)throw a.error}}};try{for(W=r.h(t),Z=W.next();!Z.done;Z=W.next())Q=Z.value,Y=Q.template,J=Q.instances,H(Y,J)}catch(e){y={error:e}}finally{try{Z&&!Z.done&&(k=W.return)&&k.call(W)}finally{if(y)throw y.error}}return[4,l()];case 1:return s.sent(),[2]}})})}var v=n(16);function b(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,o=this;return r.d(this,function(l){switch(l.label){case 0:return[4,s.a.kedBackendClient.get("subjects",e.id,{include:["courseTemplates","abilities"]})];case 1:return e=l.sent(),[4,Promise.all(e.courseTemplates.map(function(e){return Object(v.f)(e.id,{include:["centralContent","knowledgeRequirements"]})}))];case 2:return a=l.sent(),console.log("Subject: "+e.name+". Courses: "+a.map(function(e){return e.name})),[4,Promise.all(a.map(function(e){return r.b(o,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t={template:e},[4,s.a.kedBackendClient.list("courses",{name:e.name,include:["abilities"],flags:["includeIdsOnly"]})];case 1:return[2,(t.instances=n.sent(),t)]}})})}))];case 3:return i=l.sent(),[4,g(e,i,t,n)];case 4:return l.sent(),[2]}})})}var y,k,E,w=function(e){function t(t){var n=e.call(this,t)||this;return n.coursesElems={},n.centralContentElems=[],n.knowledgeRequirementElems=[],n.state={showFullText:!1,changes:[],isWorking:!0,isImporting:!1},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:this.addClassesForCherryPickedElements(),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,this.diffWithExisting()];case 2:return e=r.sent(),t=e.changes,n=e.subjectToImport,this.setState({changes:t,subjectToImport:n}),[3,5];case 3:return a=r.sent(),this.setState({error:""+a}),[3,5];case 4:return this.setState({isWorking:!1}),[7];case 5:return[2]}})})},t.prototype.addClassesForCherryPickedElements=function(){var e=l()(this.purposeElem).find("li").first().parent().children("li");e.addClass("ability");var t=l()(this.centralContentElems).find("li");t.addClass("central-content");var n=l()(this.knowledgeRequirementElems).find("p");n.addClass("knowledge-requirement"),l()([e,t,n]).addClass("marked-area")},t.prototype.cherryPickData=function(){var e=this,t=this.props.subject,n=Array.from(l()(this.purposeElem).find("li").first().parent().children("li")).map(function(e,t){return(t+1+". "+l()(e).html()).trim()}).filter(function(e){return!!e});return{name:t.name,code:t.code,schoolType:t.schoolType,abilities:n,courses:Object.keys(this.coursesElems).map(function(t){return e.coursesElems[t]}).map(function(e){var t=e.course,n=e.elem;return{name:t.name,year:t.year,code:t.code,points:t.points,centralContent:Array.from(l()(n).find(".central-content")).map(function(e){return{html:l()(e).html().trim(),group:l()(e).parent("ul").prev("h4").text().trim()}}).filter(function(e){return!!e.html}),knowledgeRequirements:Array.from(l()(n).find(".grade-step-none .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:null,html:e}}).concat(Array.from(l()(n).find(".grade-step-E .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"E",html:e}}).concat(Array.from(l()(n).find(".grade-step-C .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"C",html:e}})).concat(Array.from(l()(n).find(".grade-step-A .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"A",html:e}})))}})}},t.prototype.diffWithExisting=function(){return r.b(this,void 0,void 0,function(){function e(){var e=h;return h+=2,e}var t,n,a,i,o,l,c,d,m,p,h,f,g,v,y,k,E,w,C,S,T,O=this;return r.d(this,function(N){switch(N.label){case 0:return o=this.cherryPickData(),l=[],[4,s.a.kedBackendClient.list("subjects")];case 1:return c=N.sent(),d=c.filter(function(e){return e.code===O.props.subject.code})[0],m=[],p=[],h=Date.now(),d?[4,b(d,o,l)]:[3,3];case 2:return N.sent(),[3,4];case 3:f=d={id:Object(u.h)(),schoolType:o.schoolType,tags:["schoolType:"+o.schoolType],acl:["role:USER:R"],code:o.code,name:o.name,abilitiesOrder:[],publishable:!1,dateTime:e()},l.push({change:"Nytt ämne",content:o.name+" ("+o.code+")",mutations:function(e){return e.add("subjects",f)}}),g=[],v=function(t){var n={id:Object(u.h)(),name:t,acl:["role:USER:R"],dateTime:e()};g.push(n),l.push({change:"Ny förmåga",content:t,mutations:function(e){e.add("abilities",n),e.link("subjects",f.id,"abilities",n.id,"abilities")}})};try{for(y=r.h(o.abilities),k=y.next();!k.done;k=y.next())E=k.value,v(E)}catch(e){t={error:e}}finally{try{k&&!k.done&&(n=y.return)&&n.call(y)}finally{if(t)throw t.error}}f.abilitiesOrder=g.map(function(e){return e.id}),w=function(t){var n,a,i,o,c,d,h={id:Object(u.h)(),subjectCode:f.code,schoolType:f.schoolType,tags:["sub:"+f.code,"course:"+t.code,"schoolType:"+f.schoolType],dateTime:e(),isTemplate:!0,acl:["role:EMPLOYEE:R"],name:t.name,code:t.code,points:t.points,modules:[],subjectId:f.id,resources:[],createdBy:{name:s.a.currentUser.displayName,url:"mailto:"+s.a.currentUser.mail},createdDate:Date.now(),knowledgeRequirementsOrder:[],centralContentOrder:[],abilitiesOrder:g.map(function(e){return e.id})};t.year&&(h.schoolGrade=t.year),l.push({change:"Ny kurs",content:t.name,mutations:function(e){e.add("courses",h),e.link("subjects",f.id,"courses",h.id,"courseTemplates")}});var v=function(t,n){var r=m.filter(function(e){return e.name===n})[0];r?l.push({mutations:function(e){e.link("courses",h.id,"central-content",r.id,"centralContent")}}):(r={id:Object(u.h)(),dateTime:e(),name:n,acl:["role:USER:R"]},t&&(r.group=t),m.push(r),l.push({change:"Nytt centralt innehåll",content:"<h4>"+t+"</h4>"+n,mutations:function(e){e.add("central-content",r),e.link("courses",h.id,"central-content",r.id,"centralContent")}})),h.centralContentOrder.push(r.id)};try{for(var b=r.h(t.centralContent),y=b.next();!y.done;y=b.next()){var k=y.value;v(k.group,k.html)}}catch(e){n={error:e}}finally{try{y&&!y.done&&(a=b.return)&&a.call(b)}finally{if(n)throw n.error}}var E=function(t){var n=p.filter(function(e){return e.name===t.html&&e.gradeStep===t.gradeStep})[0];n?l.push({mutations:function(e){e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}}):(n={id:Object(u.h)(),dateTime:e(),name:t.html,gradeStep:t.gradeStep,acl:["role:USER:R"]},p.push(n),l.push({change:"Nytt kunskapskrav för betyget "+t.gradeStep,content:t.html,mutations:function(e){e.add("knowledge-requirements",n),e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}})),h.knowledgeRequirementsOrder.push(n.id)};try{for(var w=r.h(t.knowledgeRequirements),C=w.next();!C.done;C=w.next()){E(C.value)}}catch(e){i={error:e}}finally{try{C&&!C.done&&(o=w.return)&&o.call(w)}finally{if(i)throw i.error}}var S=function(e){l.push({mutations:function(t){t.link("courses",h.id,"abilities",e.id,"abilities")}})};try{for(var T=r.h(g),O=T.next();!O.done;O=T.next()){S(O.value)}}catch(e){c={error:e}}finally{try{O&&!O.done&&(d=T.return)&&d.call(T)}finally{if(c)throw c.error}}};try{for(C=r.h(o.courses),S=C.next();!S.done;S=C.next())T=S.value,w(T)}catch(e){a={error:e}}finally{try{S&&!S.done&&(i=C.return)&&i.call(C)}finally{if(a)throw a.error}}N.label=4;case 4:return[2,{changes:l,subjectToImport:o}]}})})},t.prototype.cancel=function(){this.props.onCancel()},t.prototype.import=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:this.setState({isWorking:!0,isImporting:!0}),e=this.state.changes.map(function(e){return e.mutations}),t.label=1;case 1:return t.trys.push([1,,3,4]),[4,s.a.kedBackendClient.do(function(t){e.forEach(function(e){return e(t)})})];case 2:return t.sent(),[3,4];case 3:return this.setState({isWorking:!1,isImporting:!1}),[7];case 4:return this.props.onImportSuccess(this.props.subject.name),[2]}})})},t.prototype.fixL=function(e){return e},t.prototype.render=function(){var e=this,t=this.state.subjectToImport,n=this.props.subject;return a.createElement("div",null,a.createElement("h1",null,Object(i.a)(y||(y=r.e(["Uppladdat Ämne ",""],["Uppladdat Ämne ",""])),t?t.name:"")),this.state.error?a.createElement("p",null,"Fel: ",this.state.error):this.state.isWorking?a.createElement("p",null,"Arbetar..."):this.state.isImporting?a.createElement("p",null,"Importerar..."):this.state.changes.every(function(e){return!e.change})?a.createElement("div",null,a.createElement("p",null,"Kunde inte finna några förändringar från befintligt data. Klicka OK för att avbryta och återgå."),a.createElement("button",{onClick:function(){return e.cancel()}}," OK ")):a.createElement("div",null,a.createElement("table",{style:{border:"1px solid gray",padding:"2px"}},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{colSpan:2},"Granskning av ändringar i grund-data")),a.createElement("tr",null,a.createElement("th",null,"Ändring"),a.createElement("th",null,"Innehåll"))),a.createElement("tbody",null,this.state.changes.filter(function(e){return e.change}).map(function(e,t){return a.createElement("tr",{key:t},a.createElement("td",{style:{padding:"2px"}},e.change),a.createElement("td",{style:{padding:"2px"},dangerouslySetInnerHTML:{__html:e.content}}))}))),a.createElement("button",{onClick:function(){return e.cancel()},disabled:this.state.isImporting},"Avbryt"),a.createElement("button",{onClick:function(){return e.import()},disabled:this.state.isImporting},"Importera"),a.createElement("br",null)),a.createElement("button",{onClick:function(){return e.setState({showFullText:!e.state.showFullText})}},this.state.showFullText?Object(i.a)(k||(k=r.e(["Dölj nedan"],["Dölj nedan"]))):Object(i.a)(E||(E=r.e(["Visa hela texten från Skolverket"],["Visa hela texten från Skolverket"])))),a.createElement("table",{style:{display:this.state.showFullText?"":"none"}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Namn"),a.createElement("td",null,n.name)),a.createElement("tr",null,a.createElement("th",null,"Ämneskod"),a.createElement("td",null,n.code)),a.createElement("tr",null,a.createElement("th",null,"Syfte"),a.createElement("td",{ref:function(t){return e.purposeElem=t},dangerouslySetInnerHTML:{__html:this.fixL(n.purpose)}})),a.createElement("tr",null,a.createElement("th",null,"Kurser"),a.createElement("td",null,n.courses.map(function(t){return a.createElement("table",{key:t.code,ref:function(n){return e.coursesElems[t.code]={course:t,elem:n}}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Kursens namn"),a.createElement("td",null,t.name)),a.createElement("tr",null,a.createElement("th",null,"Kurskod"),a.createElement("td",null,t.code)),a.createElement("tr",null,a.createElement("th",null,"Poäng"),a.createElement("td",null,t.points)),a.createElement("tr",null,a.createElement("th",null,"Centralt innehåll"),a.createElement("td",{ref:function(t){return e.centralContentElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.centralContent)}})),t.knownledgeRequirements.some(function(e){return!e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav utan betygsättning"),a.createElement("td",{className:"grade-step-none",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return!e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"E"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg E"),a.createElement("td",{className:"grade-step-E",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"E"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"C"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg C"),a.createElement("td",{className:"grade-step-C",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"C"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"A"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg A"),a.createElement("td",{className:"grade-step-A",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"A"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0))}))))))},t}(a.Component),C=(n(106),n(105)),S=n(12);n.d(t,"a",function(){return x});var T,O,N,D,I,x=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,gymnasiumSubjects:[],primarySchoolSubjects:[],uploadedSubject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,s.a.kedBackendClient.list("subjects")];case 1:return(e=r.sent()).sort(Object(i.g)("name")),t=e.filter(function(e){return"primary"!==e.schoolType}),n=e.filter(function(e){return"primary"===e.schoolType}),this.setState({gymnasiumSubjects:t,primarySchoolSubjects:n,isListingSubjects:!1}),[2]}})})},t.prototype.handleFileSelect=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o,u,d,m,p,h,f,g,b,y,k,E,w;return r.d(this,function(C){switch(C.label){case 0:return e.stopPropagation(),e.preventDefault(),t=e.dataTransfer.files,[4,Object(v.g)(t[0])];case 1:if(n=C.sent(),a=l()(l.a.parseXML(n)),s=a.find("subject>originatorTypeOfSchooling").text().trim()||a.find("subject>typeOfSchooling").text().trim(),"gymnasium"===("COMPULSORY_SCHOOL"===s?"primary":"UPPER_SECONDARY_EDUCATION"===s?"gymnasium":null)){for(w={name:a.find("subject>name").text().trim(),code:a.find("subject>code").text().trim(),purpose:a.find("subject>purpose").text().trim(),courses:[],schoolType:"gymnasium"},o=a.find("subject>courses"),u=0;u<o.length;++u)d=l()(o[u]),m=[].slice.call(d.find("knowledgeRequirements")).map(function(e){return{gradeStep:l()(e).find("gradeStep").text().trim(),text:l()(e).find("text").text().trim()}}),w.courses.push({name:d.find("name").text().trim(),code:d.find("code").text().trim(),centralContent:d.find("centralContent").text().trim(),points:parseInt(d.find("point").text().trim()),knownledgeRequirements:m});this.setState({uploadedSubject:w})}else p=Object(i.k)(Array.from(a.find("subject>centralContent")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfCentralContent").text().trim())throw new Error(Object(i.a)(T||(T=r.e(["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim()}})})),h=Object(i.k)(Array.from(a.find("subject>knowledgeRequirement")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfRequirement").text().trim())throw new Error(Object(i.a)(O||(O=r.e(["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim(),gradeStep:l()(e).find("gradeStep").text().trim()}})})),f=Object(i.b)(p,function(e){return e.year}),g=Object(i.b)(h,function(e){return e.year}),b=a.find("subject>name").text().trim(),y=a.find("subject>code").text().trim(),k=a.find("subject>purpose").text().trim(),E=["1-3","4-6","7-9"].map(function(e){return{name:b+" "+e,code:y+"|"+e,points:0,year:e,centralContent:(f[e]||[]).map(function(e){return e.text}).join("\n"),knownledgeRequirements:(g[e]||[]).map(function(e){return{gradeStep:e.gradeStep,text:e.text}})}}),w={name:b,code:y,purpose:k,schoolType:"primary",courses:E},this.setState({uploadedSubject:w});return[2]}})})},t.prototype.onImportSuccess=function(e){Object(i.o)(Object(i.a)(N||(N=r.e(["Importen av "," lyckades"],["Importen av "," lyckades"])),e)),this.setState({uploadedSubject:null}),this.load()},t.prototype.render=function(){var e=this,t=this.props.linkPrefix;return a.createElement("div",null,this.state.uploadedSubject?a.createElement(w,{onCancel:function(){return e.setState({uploadedSubject:null})},onImportSuccess:function(t){return e.onImportSuccess(t)},subject:this.state.uploadedSubject}):this.state.isListingSubjects?a.createElement("div",null,a.createElement("p",null,a.createElement(S.a,null),"Var god vänta medan ämnen hämtas...")):a.createElement("div",null,a.createElement("h2",null,Object(i.a)(D||(D=r.e(["Gymnasieämnen"],["Gymnasieämnen"])))),a.createElement("ul",null,this.state.gymnasiumSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(C.a,{to:t+e.id},e.name))})),a.createElement("h2",null,Object(i.a)(I||(I=r.e(["Grundskoleämnen"],["Grundskoleämnen"])))),a.createElement("ul",null,this.state.primarySchoolSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(C.a,{to:t+e.id},e.name))})),a.createElement("div",{className:"drop-zone",onDragOver:v.a,onDrop:function(t){return e.handleFileSelect(t)}},"Droppa Subject-fil här från skolverket (Hämtas från ",a.createElement("a",{href:"http://opendata.skolverket.se",target:"skolverket"},"opendata.skolverket.se"),")")))},t}(a.Component)},,,,function(e,t,n){var r={"./en-SG":82,"./en-SG.js":82,"./en-au":83,"./en-au.js":83,"./en-ca":84,"./en-ca.js":84,"./en-gb":85,"./en-gb.js":85,"./en-ie":86,"./en-ie.js":86,"./en-il":87,"./en-il.js":87,"./en-nz":88,"./en-nz.js":88,"./sv":89,"./sv.js":89};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=132},function(e,t){},function(e,t){},,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r,a,i=n(1),s=n(0),o=n.n(s),l=n(2),c=n(240),u=n(238),d=n(72),m=n(116),p=n(101),h=function(e){return s.createElement(p.a,{title:Object(l.a)(r||(r=i.e(["Lägg till skola"],["Lägg till skola"]))),type:e.type,feedbackUrl:e.feedbackUrl})},f=n(3),g=n(106),v=n(45),b=n(128),y=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,primarySchoolSubjects:[],uploadedSubject:null},n}return i.c(t,e),t.prototype.render=function(){return s.createElement("div",null,s.createElement(v.a,{title:Object(l.a)(a||(a=i.e(["Ämnen"],["Ämnen"]))),activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),s.createElement(b.a,{linkPrefix:"/subjects/"}))},t}(s.Component),k=n(41),E=n(16),w=n(5),C=n(110),S=n(79),T=n(77),O=n(24),N=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return i.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.resources,a=O.b.picker;return s.createElement("div",null,s.createElement("div",{className:"taskContainer"},r.map(function(e,r){return s.createElement("div",{className:"align-horizontal",key:r},s.createElement("div",{className:"horizontalItem top"},s.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:C.a,props:{title:"Redigera resurs",resource:e,onSave:function(e){var a=Object(E.m)(e,f.a.currentUser);n({$splice:[[r,1,a]]}),t.closeDialog()},onDelete:function(){n({$splice:[[r,1]]}),t.closeDialog()}}})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement("a",{href:e.url,target:"_blank"},e.name)))})),s.createElement("div",{className:"horizontal-align spaced"},s.createElement("div",{className:"horizontaItem top"},s.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:C.a,props:{title:"Lägg till resurs",onSave:function(e){var r=Object(E.m)(e,f.a.currentUser);n({$push:[r]}),t.closeDialog()}}})}},s.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Lägg till resurs")),a&&s.createElement("div",{className:"horizontaItem top"},s.createElement(S.a,{label:"Lägg till från Drive",action:function(){new T.a({upload:!0,multiple:!0}).show().then(function(e){e.forEach(function(e){var t={url:e.url,name:e.name},r=Object(E.m)(t,f.a.currentUser);n({$push:[r]})})})}}))))},t}(s.Component),D=n(80),I=n(39),x=n.n(I),j=n(13),R=n(64),L=n(70),U=n.n(L),P=function(){function e(e){this.queryer=e,this.promise=null,this.result=null}return e.prototype.query=function(){var e=this;return this.promise?this.promise:this.promise=this.queryer().then(function(t){return e.result=t})},e.prototype.reset=function(){this.promise=null},e}(),A=n(12);function M(e){var t=e.searchMarkedIds,n=e.searchResult,r=e.task,a=e.editTask;e.writeAccess,e.taskCustomization;return s.createElement("div",{className:"task-search-result"+(a.state.task||a.state.previewTaskContent?"":" fixed")},0===t.length?s.createElement("h2",null,"Samtliga uppgifter för kursen"):s.createElement("h2",null,"Uppgifter som täcker valda filter"),s.createElement("table",null,s.createElement("tbody",null,n.filter(r?function(e){return e.id===r.id}:function(){return!0}).map(function(e){return s.createElement(s.Fragment,{key:e.id},s.createElement("tr",null,s.createElement("td",null,s.createElement("div",{tabIndex:1,className:"checkBox"+(r&&r.id===e.id?" checked":""),onClick:function(){return i(e)}})),s.createElement("td",null,e.content?s.createElement("a",{href:"#",onClick:function(t){i(e),t.preventDefault(),t.stopPropagation()}},e.name):s.createElement("a",{href:e.url,target:"_blank"},e.name)),s.createElement("td",null,Object(E.i)(e.modifiedBy.name)),s.createElement("td",null,e.school||"Standard"),s.createElement("td",null,Object(E.h)(e.modifiedDate))))}))),s.createElement("br",null),s.createElement("hr",null));function i(e){r&&r.id===e.id?a.updateSearchMarkedIds(t):(Object(k.findDOMNode)(a).parentElement.scrollTop=0,a.setStatePromised({task:e,previewTaskContent:null}))}}var _=n(92),B=n(6),K=n.n(B),q=n(124);function z(e){var t=e.task,n=e.course,r=e.writeAccess,a=e.features,o=e.editTask,l=a.picker;return s.createElement("div",null,s.createElement("h2",null,"Uppgiftens namn och länk"),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"Uppgiftens namn:")),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{autoFocus:!0,type:"text",size:35,value:t.name,disabled:!r,readOnly:!r,onChange:function(e){var n=i.a({},t);n.name=e.target.value,o.setStatePromised({task:n})}}))),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"URL:")),s.createElement("div",{className:"horizontalItem top align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{className:"horizontalItem",type:"text",size:35,value:t.url,disabled:!r,readOnly:!r,onChange:function(e){var n=i.a({},t);n.url=e.target.value,o.setStatePromised({task:n})}})),s.createElement("div",{className:"horizontalItem top"},l&&s.createElement(S.a,{label:"",action:function(){new T.a({upload:!0}).show().then(function(e){var n=e[0].url,r=n.substr(0,n.lastIndexOf("/"))+"/view";if(r!=t.url){var a=i.a({},t);a.url=r,o.setStatePromised({task:a})}})}})))),t.migratedTexts&&r&&s.createElement(q.a,{task:t,course:n,updateLink:function(e,t){return o.updateLink(e,t)}}),s.createElement(s.Fragment,null,s.createElement("h2",null,"Inlämningsuppgift"),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement("div",{className:"checkBox"+(o.getTaskProp("assignment")?" checked":""),onClick:function(){o.updateTaskOrCustomization("assignment",{$set:!o.getTaskProp("assignment")})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"Den här uppgiften är en inlämningsuppgift"))),o.getTaskProp("assignment")&&s.createElement(s.Fragment,null,s.createElement("p",null,"Inlämningsdatum"),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement(_.a,{nextMonthButtonLabel:"",previousMonthButtonLabel:"",showWeekNumbers:!0,selected:o.getTaskProp("deadline")&&K()(o.getTaskProp("deadline")).toDate(),dateFormat:"YYYY-MM-dd",locale:"sv",popperPlacement:"bottom-start",onChange:function(e){o.updateTaskOrCustomization("deadline",{$set:K()(e).format("YYYY-MM-DD")})}})),s.createElement("div",{className:"horizontalItem top"},o.getTaskProp("deadline")&&s.createElement("a",{className:"deleteDate",href:"#",title:"Ta bort inlämningsdatum",onClick:function(e){e.preventDefault(),o.updateTaskOrCustomization("deadline",{$set:null})}}))),s.createElement("div",{className:"taskContainer"},s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement("div",{className:"checkBox"+(null==t.sendToUrkund||t.sendToUrkund?" checked":""),onClick:function(){return o.updateTaskOrCustomization("sendToUrkund",{$set:null!=t.sendToUrkund&&!t.sendToUrkund})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"Verify assignments with Urkund")))))))}function F(e){var t=e.task;return s.createElement(s.Fragment,null,s.createElement("h3",null,"Uppgiftens status"),t.createdBy&&t.createdDate&&s.createElement("p",null,"Uppgiften skapades ",Object(E.c)(t.createdDate)," av ",s.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&s.createElement("p",null,"Uppgiften redigerades senast ",Object(E.c)(t.modifiedDate)," av ",s.createElement("strong",null,t.modifiedBy.name),"."))}function G(e){var t=e.writeAccess,n=e.editTask;return s.createElement(s.Fragment,null,!!n.props.onDelete&&s.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onDelete()}},"Ta bort från kursmodul"),s.createElement("div",{className:"pull-right"}," "),s.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onCancel()}},"Avbryt"),s.createElement("div",{className:"btn btn-large",onClick:function(){return n.save().catch(l.n)}},"Spara"),!t&&s.createElement("div",{className:"btn btn-large",onClick:function(){return n.copyTask().catch(l.n)}},"Skapa kopia av den här uppgiften"))}var V=n(54),$=n(50);function H(e){var t=e.writeAccess,n=e.task,r=e.editTask;return s.createElement(s.Fragment,null,s.createElement("h3",null,"Uppgiftens innehåll"),t&&s.createElement("p",null,"Om uppgiften inte länkar till något dokument kan du lägga innehåll här."),s.createElement(V.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],defaultActions:$.a,readOnly:!t,html:n.content,onChange:function(e){var t=i.a({},n);t.content=e,r.setState({task:t})}}))}function W(e){var t=e.writeAccess,n=e.task,r=e.taskCustomization,a=e.editTask;return s.createElement(s.Fragment,null,s.createElement(s.Fragment,null,s.createElement("h3",null,"Uppgiftens lärandemål"),s.createElement("div",null,s.createElement("textarea",{className:"inputTextBox learning-goal-box",disabled:!t,value:n.learningGoal,onChange:function(e){var t=i.a({},n);t.learningGoal=e.target.value,a.setStatePromised({task:t})}}))),s.createElement("br",null),s.createElement(s.Fragment,null,(t||!!n.content)&&s.createElement(H,{writeAccess:t,task:n,editTask:a})),s.createElement(s.Fragment,null,r&&r.resources?s.createElement("h3",null,"Resurser för uppgiften (modifierad för denna kursinstans)"):s.createElement("h3",null,"Resurser kopplade till uppgiften"),s.createElement(N,{resources:r&&r.resources||n.resources,host:a.props.host,onUpdate:function(e){a.updateTaskOrCustomization("resources",e)}})))}var Z,Q,Y,J,X,ee,te,ne,re,ae,ie,se,oe,le,ce,ue=function(e){function t(t){var n=e.call(this,t)||this;n.features=new O.a;var r=!t.task||Object(j.c)(f.a.currentUser,t.task);return n.state={title:t.task?r?Object(l.a)(Z||(Z=i.e(['Redigera uppgift till "','"'],['Redigera uppgift till "','"'])),t.module.name):Object(l.a)(Q||(Q=i.e(['Visa uppgift till "','"'],['Visa uppgift till "','"'])),t.module.name):t.searchMode?Object(l.a)(Y||(Y=i.e(['Sök ny uppgift till "','"'],['Sök ny uppgift till "','"'])),t.module.name):Object(l.a)(J||(J=i.e(['Lägg till egen uppgift till "','"'],['Lägg till egen uppgift till "','"'])),t.module.name),futureAbilitiesOpen:!1,taskCustomization:t.taskCustomization||{},task:t.task?i.a({$meta:t.task.$meta||"update"},t.task):t.searchMode?null:{id:Object(w.h)(),$meta:"add",tags:["sub:"+t.course.subjectCode,"course:"+t.course.code],school:!t.course.isTemplate&&f.a.currentUser.school,resources:[],abilities:[],centralContent:[],futureAbilities:[],knowledgeRequirements:[],name:"",url:"",acl:t.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+f.a.currentUser.school+"/EMPLOYEE:S"]},searchMarkedIds:t.searchMode&&[],searchResult:t.searchMode&&[],isSearching:t.searchMode},t.searchMode&&(n.searchResponse=new P(function(){return f.a.kedBackendClient.list("tasks",{tags:"course:"+t.course.code,include:["knowledgeRequirements","abilities","centralContent"],flags:["includeIdsOnly"]})})),n}return i.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentDidMount=function(){return i.b(this,void 0,void 0,function(){var e;return i.d(this,function(t){switch(t.label){case 0:if(!this.props.searchMode)return[3,8];this.setStatePromised({isSearching:!0}),t.label=1;case 1:return t.trys.push([1,5,6,8]),[4,this.searchResponse.query()];case 2:return t.sent(),this.state.searchMarkedIds&&0===this.state.searchMarkedIds.length?[4,this.updateSearchResult(this.state.searchMarkedIds)]:[3,4];case 3:t.sent(),t.label=4;case 4:return[3,8];case 5:return e=t.sent(),Object(l.n)(e),[3,8];case 6:return[4,this.setStatePromised({isSearching:!1})];case 7:return t.sent(),[7];case 8:return[2]}})})},t.prototype.updateSearchMarkedIds=function(e){return i.b(this,void 0,void 0,function(){var t;return i.d(this,function(n){switch(n.label){case 0:return t=this.setStatePromised({task:null,searchMarkedIds:e,previewTaskContent:null}),this.searchResponse.result?[3,3]:[4,this.searchResponse.promise];case 1:return n.sent(),[4,t];case 2:n.sent(),e=this.state.searchMarkedIds,n.label=3;case 3:return[4,this.updateSearchResult(e)];case 4:return n.sent(),[2]}})})},t.prototype.updateSearchResult=function(e){return i.b(this,void 0,void 0,function(){var t,n;return i.d(this,function(r){switch(r.label){case 0:return[4,this.searchResponse.query()];case 1:return t=r.sent(),n=t.filter(function(t){return e.every(function(e){return t.knowledgeRequirements.some(function(t){return t.id===e})||t.abilities.some(function(t){return t.id===e})||t.centralContent.some(function(t){return t.id===e})})}),this.setStatePromised({searchResult:n}),[2]}})})},t.prototype.onMarkChanged=function(e,t){if(this.props.searchMode){var n=this.state.searchMarkedIds;this.updateSearchMarkedIds(t?n.concat(e):n.filter(function(t){return t!==e})).catch(l.n)}else this.updateLink(e,t)},t.prototype.updateLink=function(e,t){var n=this.props.course,r=this.state.task,a=n.abilities.find(function(t){return t.id===e}),s=n.knowledgeRequirements.find(function(t){return t.id===e}),o=n.centralContent.find(function(t){return t.id===e}),l=i.f(a?["abilities",a]:s?["knowledgeRequirements",s]:o?["centralContent",o]:[null,null],2),c=l[0],u=l[1];if(c){var d=r[c].slice(),m=d.findIndex(function(t){return t.id===e});t?m<0&&d.push(u):m>=0&&d.splice(m,1);var p=i.a({},r);p[c]=d,r&&r.migratedTexts&&(p.migratedTexts=i.a({},r.migratedTexts),r.migratedTexts[c]&&(p.migratedTexts[c]=i.a({},r.migratedTexts[c]),delete p.migratedTexts[c][e])),this.setStatePromised({task:p})}else console.error("Could not find marked id "+e)},t.prototype.save=function(){return i.b(this,void 0,void 0,function(){var e,t,n;return i.d(this,function(r){switch(r.label){case 0:if(e=this.state,t=e.task,n=e.taskCustomization,!Object(j.c)(f.a.currentUser,t))return[3,5];if(!t.url&&!t.content)throw new Error(Object(l.a)(X||(X=i.e(["Uppgiften måste antingen ha en URL eller ett innehåll"],["Uppgiften måste antingen ha en URL eller ett innehåll"]))));if(t.url&&!U.a.isUri(t.url))throw new Error(Object(l.a)(ee||(ee=i.e(["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"])),t.url));return this.props.task&&this.props.task.id!==t.id?[4,this.props.onReplace(this.props.task.id,t)]:[3,2];case 1:return r.sent(),[3,4];case 2:return[4,this.props.onSave(t,null)];case 3:r.sent(),r.label=4;case 4:return[3,9];case 5:return this.props.searchMode?[4,this.props.onSave(t,n)]:[3,7];case 6:return r.sent(),[3,9];case 7:if(this.props.course.isTemplate&&"add"===t.$meta)throw new Error(Object(l.a)(te||(te=i.e(["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"],["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"]))));return[4,this.props.onSaveCustomization(n)];case 8:r.sent(),r.label=9;case 9:return[2]}})})},t.prototype.copyTask=function(){return i.b(this,void 0,void 0,function(){var e;return i.d(this,function(t){switch(t.label){case 0:return(e=i.a({},this.state.task,this.state.taskCustomization||{},{id:Object(w.h)(),acl:this.props.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+f.a.currentUser.school+"/EMPLOYEE:S"],school:this.props.course.school})).$meta="add",[4,this.setStatePromised({task:e,title:Object(l.a)(ne||(ne=i.e(['Redigera kopierad uppgift till "','"'],['Redigera kopierad uppgift till "','"'])),this.props.module.name),taskCustomization:void 0})];case 1:return t.sent(),[2]}})})},t.prototype.getTaskProp=function(e){var t=this.state,n=t.task,r=t.taskCustomization,a=r&&r[e];return void 0!==a?a:n[e]},t.prototype.updateTaskOrCustomization=function(e,t){var n=this.state,r=n.task,a=n.taskCustomization;if(!(r&&Object(j.c)(f.a.currentUser,r))||a&&void 0!==a[e]){var s=i.a({},a);s[e]=x()(s[e]||r[e],t),this.setStatePromised({taskCustomization:s})}else{var o=i.a({},r);o[e]=x()(r[e],t),this.setStatePromised({task:o})}},t.prototype.render=function(){var e=this.props,t=e.course,n=(e.module,e.onCancel,e.onDelete,e.idsNotCoveredByAnyTask),r=e.searchMode,a=this.state,i=a.task,o=a.taskCustomization,l=a.title,c=a.searchResult,u=a.searchMarkedIds,d=a.isSearching,m=r?u:i.centralContent.map(function(e){return e.id}).concat(i.abilities.map(function(e){return e.id})).concat(i.knowledgeRequirements.map(function(e){return e.id})),p=i&&Object(j.c)(f.a.currentUser,i),h=(i&&U.a.isUri(i.url),this.features);return s.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},s.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},s.createElement("div",{className:"sv-text-portlet-content"},s.createElement("h1",{className:"h1"},l))),s.createElement("div",{className:"sv-fluid-grid sv-grid-ksgs12 sv-layout"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-6"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("div",{className:"ked_boxed"},s.createElement("h3",null,r?"Filtrera på kunskapskrav":p?"Välj kunskapskrav":"Kunskapskrav"),r?s.createElement("p",null,"Markera de kunskapskrav som uppgiften måste täcka."):p&&s.createElement("p",null,"Markera de kunskapskrav som din uppgift täcker."),s.createElement(D.a,{knowledgeRequirements:t.knowledgeRequirements,markedIds:m,idsToMarkNotOk:n,markMode:r||p,migratedIds:i&&i.migratedTexts&&i.migratedTexts.knowledgeRequirements,onMarkChanged:this.onMarkChanged.bind(this)}))),s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement(R.a,{options:t.abilities,title:p||r?"Välj förmågor":"Förmågor",markedIds:m,markMode:p||r,migratedIds:i&&i.migratedTexts&&i.migratedTexts.abilities,onMarkChanged:this.onMarkChanged.bind(this)})),s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement(R.a,{options:t.centralContent,title:p||r?"Välj centralt innehåll":"Centralt innehåll",markedIds:m,markMode:p||r,migratedIds:i&&i.migratedTexts&&i.migratedTexts.centralContent,onMarkChanged:this.onMarkChanged.bind(this)}))),s.createElement("div",{className:"sv-layout sv-column-6"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},d&&s.createElement("p",null,s.createElement(A.a,null)," Laddar uppgifter..."),c?s.createElement(s.Fragment,null,s.createElement(M,{searchMarkedIds:u,searchResult:c,task:i,writeAccess:p,taskCustomization:o,editTask:this}),this.state.previewTaskContent?s.createElement("div",{dangerouslySetInnerHTML:{__html:this.state.previewTaskContent}}):i&&s.createElement(W,{writeAccess:p,task:i,taskCustomization:o,editTask:this}),i&&s.createElement(F,{task:i})):s.createElement(s.Fragment,null,i&&s.createElement(z,{task:i,course:t,writeAccess:p,features:h,editTask:this}),i&&s.createElement(W,{writeAccess:p,task:i,taskCustomization:o,editTask:this}),i&&s.createElement(F,{task:i}))),i&&s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement("hr",null),s.createElement("br",null),s.createElement(G,{writeAccess:p,editTask:this})))),s.createElement("div",{className:"sv-layout"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"}))))},t}(s.Component),de=n(109),me=n(46),pe=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return i.c(t,e),t.prototype.openTaskDialog=function(e){var t=this.props,n=t.taskCustomizations,r=t.course,a=t.host,i=t.module,s=(t.taskIds,t.onTaskAdded,t.onTaskUpdated),o=t.onTaskCustomizationUpdated,l=t.onTaskDeleted,c=t.idsNotCoveredByAnyTask,u=t.onTaskReplaced;a.openDialog({Component:ue,props:{task:e,taskCustomization:n&&n[e.id],module:i,course:r,host:a,idsNotCoveredByAnyTask:c,onSave:function(e){var t=Object(E.m)(e,f.a.currentUser);s(t),a.closeDialog()},onSaveCustomization:function(t){o(e.id,t),a.closeDialog()},onDelete:function(){l(e.id),a.closeDialog()},onReplace:function(e,t){u(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})},t.prototype.render=function(){var e=this,t=this.props,n=Object(me.a)(t.course.tasks,t.taskIds,{appendLeftovers:!1});return s.createElement("div",null,s.createElement(de.a,{taskMetas:n.map(function(e){return{task:e,isTaskOwner:Object(j.c)(f.a.currentUser,e)}}),renderEditLink:function(t){var n=t.task,r=t.isTaskOwner;return s.createElement("div",{className:r?"editItem":"viewItem",onClick:function(){return e.openTaskDialog(n)}})},renderLink:function(t){var n=t.task;return n.content?s.createElement("a",{href:"#",onClick:function(t){t.preventDefault(),e.openTaskDialog(n)}},n.name):s.createElement("a",{href:n.url,target:"_blank"},n.name)},onSort:function(t,n,r){e.props.onTasksReordered(t,n,r)}}),s.createElement("br",null),s.createElement("a",{className:"btn",onClick:function(){var n=e.props,r=n.course,a=n.host,i=n.idsNotCoveredByAnyTask,s=n.module,o=n.onTaskAdded;n.onTaskCustomizationUpdated;t.host.openDialog({Component:ue,props:{searchMode:!0,module:s,course:r,host:a,idsNotCoveredByAnyTask:i,onSave:function(e,t){e=Object(E.m)(e,f.a.currentUser),o(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})}},s.createElement("i",{className:"fa fa-search","aria-hidden":!0})," Sök uppgift")," ",s.createElement("a",{onClick:function(){var t=e.props,n=t.course,r=t.host,a=t.module,i=(t.taskIds,t.onTaskAdded),s=(t.onTaskUpdated,t.onTaskDeleted,t.idsNotCoveredByAnyTask);r.openDialog({Component:ue,props:{module:a,course:n,host:r,idsNotCoveredByAnyTask:s,onSave:function(e){e=Object(E.m)(e,f.a.currentUser),i(e),r.closeDialog()},onCancel:function(){return r.closeDialog()}}})},className:"btn"},s.createElement("i",{className:"fa fa-plus","aria-hidden":!0})," Lägg till egen uppgift"))},t}(s.Component),he=n(37),fe=n(19),ge=n(115),ve=n(102),be=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editMandatoryContent:!1},n}return i.c(t,e),t.prototype.getModuleIndex=function(){var e=this.props,t=e.course,n=e.module;return t.modules.findIndex(function(e){return e.id===n.id})},t.prototype.getModuleOrderIndex=function(){var e=this.props,t=(e.course,e.module);return this.props.getOrderedModules().findIndex(function(e){return e.id===t.id})},t.prototype.updateModule=function(e){var t=this.props.module,n=x()(t,e),r=this.getModuleIndex();this.props.host.update({modules:{$splice:[[r,1,n]]}})},t.prototype.onTaskAdded=function(e,t){var n={},r=this.props.module.taskIds.slice();r.push(e.id),this.props.course.tasks.some(function(t){return t.id===e.id})||(n.tasks={$push:[e]});var a=i.a({},this.props.module.taskCustomizations||{});t&&(a[e.id]=t);var s=this.getModuleIndex();n.modules={},n.modules[s]={taskIds:{$set:r},taskCustomizations:{$set:a}},this.props.host.update(n)},t.prototype.onTaskUpdated=function(e){if(!e.$meta)throw new Error(Object(l.a)(re||(re=i.e(["Hoppsan, blev lite knas. Fel ID: ",""],["Hoppsan, blev lite knas. Fel ID: ",""])),"Pa7Dq"));var t=this.props.course.tasks.findIndex(function(t){return t.id===e.id});t>=0&&this.props.host.update({tasks:{$splice:[[t,1,e]]}})},t.prototype.onTaskCustomized=function(e,t){var n=i.a({},this.props.module.taskCustomizations||{});n[e]=t,this.updateModule({taskCustomizations:{$set:n}})},t.prototype.onTaskDeleted=function(e){this.updateModule({taskIds:{$set:this.props.module.taskIds.filter(function(t){return t!==e})},taskCustomizations:{$apply:function(t){var n=i.a({},t);return delete n[e],n}}})},t.prototype.onTaskReplaced=function(e,t){var n=this.props.module.taskIds.indexOf(e);if(n<0)Object(l.n)(Object(l.a)(ae||(ae=i.e(["Kunde inte spara uppgift. Felkod d72kQ"],["Kunde inte spara uppgift. Felkod d72kQ"]))));else{var r={taskIds:{$splice:[[n,1,t.id]]},taskCustomizations:{$apply:function(t){var n=i.a({},t);return delete n[e],n}}},a=x()(this.props.module,r),s=this.getModuleIndex();this.props.host.update({modules:{$splice:[[s,1,a]]},tasks:{$set:this.props.course.tasks.concat(t)}})}},t.prototype.onTasksReordered=function(e,t,n){var r=Object(ve.a)(this.props.course.tasks,this.props.module.taskIds,e,t,n,{appendLeftovers:!1});this.updateModule({taskIds:{$set:r}})},t.prototype.render=function(){for(var e=this,t=this.props,n=t.course,r=t.host,a=t.module,o=t.idsNotCoveredByAnyTask,c=this.getModuleIndex(),u=this.getModuleOrderIndex(),d=this.updateModule.bind(this),m=1,p=["--"],h=["--"],f=0;f<51;++f)p.push(""+m),h.push(""+ ++m);return s.createElement(fe.a,{inactivated:!O.b.cbCollapseBoxes,title:s.createElement(s.Fragment,null,s.createElement("div",{style:{float:"right"}},u>0&&s.createElement("span",null,s.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(t){t.stopPropagation(),e.props.onReorder(-1)}})," "),u<n.modules.length-1&&s.createElement("span",null,s.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(t){t.stopPropagation(),e.props.onReorder(1)}})," "),s.createElement(he.a,{title:"Ta bort modulen",style:{display:"inline-block"},onClick:function(e){e.stopPropagation(),confirm(Object(l.a)(ie||(ie=i.e(["Ta bort modul ","?"],["Ta bort modul ","?"])),a.name))&&r.update({modules:{$splice:[[c,1]]}})}})),s.createElement("p",null,a.name)),headerOpen:"Ny kursmodul"==a.name},s.createElement("div",{className:"course-module ked_boxed",style:{position:"relative"}},s.createElement(ge.a,{text:a.name,tag:"h3",className:"renameable-text",maxChars:100,placeholder:"Namnlös modul",onChange:function(e){return d({name:{$set:e}})}}),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem center"},s.createElement("p",null,"Startvecka")),s.createElement("div",{className:"horizontalItem center"},s.createElement("select",{value:a.startWeek||"--",onChange:function(e){return d({startWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},p.map(function(e){return s.createElement("option",{key:e,value:e},e)}))),s.createElement("div",{className:"horizontalItem center"},s.createElement("p",null,"Slutvecka")),s.createElement("div",{className:"horizontalItem center"},s.createElement("select",{value:a.endWeek||"--",onChange:function(e){return d({endWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},h.map(function(e){return s.createElement("option",{key:e,value:e},e)})))),s.createElement("h4",null,"Kursmodulens introduktion"),s.createElement(V.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],defaultActions:$.a,html:a.mandatoryContent,onChange:function(e){d({mandatoryContent:{$set:e}})}}),s.createElement("h4",null,"Uppgifter"),s.createElement(pe,{taskIds:a.taskIds,taskCustomizations:a.taskCustomizations,course:n,module:a,host:r,idsNotCoveredByAnyTask:o,onTaskAdded:function(t,n){return e.onTaskAdded(t,n)},onTaskUpdated:function(t){return e.onTaskUpdated(t)},onTaskCustomizationUpdated:function(t,n){return e.onTaskCustomized(t,n)},onTaskDeleted:function(t){return e.onTaskDeleted(t)},onTaskReplaced:function(t,n){return e.onTaskReplaced(t,n)},onTasksReordered:function(t,n,r){return e.onTasksReordered(t,n,r)}}),s.createElement("h4",null,"Modulresurser"),s.createElement("p",{className:"subHeader"},"(Eventuella resuser för redovisning av modulen samt för modulen som helhet)"),s.createElement(N,{resources:a.resources,onUpdate:function(e){return d({resources:e})},host:r}),s.createElement("div",{style:{position:"absolute",top:0,right:0}},u>0&&s.createElement("span",null,s.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(-1)}})," "),u<n.modules.length-1&&s.createElement("span",null,s.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(1)}})," "),s.createElement(he.a,{title:"Ta bort modulen",style:{display:"inline-block"},onClick:function(){return confirm(Object(l.a)(se||(se=i.e(["Ta bort modul ","?"],["Ta bort modul ","?"])),a.name))&&r.update({modules:{$splice:[[c,1]]}})}})),s.createElement("div",{className:"horizontal-align"},s.createElement("div",{className:"horizontaItem activateCourseModule"},s.createElement("div",{className:"btn btn-info"+(a.inactive?" btn-activate":" btn-inactivate"),onClick:function(){return d({inactive:{$set:!a.inactive}})}},a.inactive?"Aktivera modulen":"Inaktivera modulen")))))},t}(s.Component),ye=function(e){function t(t){var n=e.call(this,t)||this;return n._moduleRefs={},n.state={},n}return i.c(t,e),t.prototype.addModule=function(){this.props.host.update({modules:{$push:[{name:"Ny kursmodul",id:Object(w.h)(),resources:[],taskIds:[]}]}})},t.prototype.getOrderedModules=function(){var e=this.props.course,t=e.moduleOrder||e.modules.map(function(e){return e.id});return t.map(function(t){return e.modules.find(function(e){return e.id===t})}).filter(function(e){return!!e}).concat(e.modules.filter(function(e){return!t.find(function(t){return e.id===t})}))},t.prototype.reorder=function(e,t){return i.b(this,void 0,void 0,function(){var n,r,a,s,o,l,c;return i.d(this,function(i){switch(i.label){case 0:return this.props.course,n=this.getOrderedModules(),r=n.findIndex(function(t){return t.id===e}),(a=r+t)<0||a>=n.length?[2]:(s=n[a],(o=n.map(function(e){return e.id}))[a]=e,o[r]=s.id,l=document.documentElement.scrollTop,[4,this.props.host.update({moduleOrder:{$set:o}})]);case 1:if(i.sent(),c=Object(k.findDOMNode)(this._moduleRefs[e]))try{window.scrollTo({top:l}),(c.getBoundingClientRect().top<0||c.getBoundingClientRect().bottom>document.documentElement.scrollHeight)&&c.scrollIntoView({behavior:"smooth",block:"start"})}catch(e){window.scrollTo(null,l),(c.getBoundingClientRect().top<0||c.getBoundingClientRect().bottom>document.documentElement.scrollHeight)&&c.scrollIntoView(!0)}return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.course,r=t.host,a=t.idsNotCoveredByAnyTask,i=(n.moduleOrder||n.modules.map(function(e){return e.id}),this.getOrderedModules());return s.createElement("div",{className:"sv-html-portlet sv-portlet",ref:function(t){return e._elem=t}},i.map(function(t){return s.createElement(be,{ref:function(n){return e._moduleRefs[t.id]=n},key:t.id,course:n,module:t,onReorder:function(n){return e.reorder(t.id,n)},getOrderedModules:function(){return e.getOrderedModules()},host:r,idsNotCoveredByAnyTask:a})}),s.createElement("div",{className:"btn btn-large",onClick:function(){return e.addModule()}},"Lägg till kursmodul"))},t}(s.Component),ke=new(function(e){function t(t){var n=e.call(this,{query:function(){return i.b(n,void 0,void 0,function(){var e,n;return i.d(this,function(r){switch(r.label){case 0:return e=t(),[4,f.a.kedBackendClient.list("schools",{name:e,include:["courses"]})];case 1:if(n=r.sent(),this._schoolId=n.length>0&&n[0].id,!this._schoolId)throw new Error(Object(l.a)(oe||(oe=i.e(["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'],["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'])),e,e));return[2,Object(l.k)(n.map(function(e){return e.courses}))]}})})}})||this;return n}return i.c(t,e),t.prototype.getSchoolId=function(){var e=this;return this.ensureHasData().then(function(){return e._schoolId})},t}(n(73).a))(function(){return f.a.currentUser.school}),Ee=n(105),we=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schoolCourses:null},n.onSchoolCoursesUpdated=n.onSchoolCoursesUpdated.bind(n),n}return i.c(t,e),t.prototype.componentDidMount=function(){ke.subscribe(this.onSchoolCoursesUpdated).catch(l.n)},t.prototype.componentWillUnmount=function(){ke.unsubscribe(this.onSchoolCoursesUpdated)},t.prototype.onSchoolCoursesUpdated=function(e){var t=Object(l.g)("name"),n=Object(l.g)("createdDate");e.sort(function(e,r){return t(e,r)||n(e,r)}),this.setState({schoolCourses:e})},t.prototype.outputCourses=function(e,t,n){return s.createElement(fe.a,{title:s.createElement("p",null,t),headerOpen:n,contentClassName:"odd-even"},e.map(function(e){return s.createElement("div",{className:"schoolCourse",key:e.id},s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top pull-right"},s.createElement(Ee.a,{to:"/courses/"+e.id+"/edit",className:"editItem"})),s.createElement("div",{className:"horizontalItem top"},s.createElement(Ee.a,{to:"/courses/"+e.id+"/edit"},e.name)),s.createElement("div",{className:"horizontalItem top"},e.active&&s.createElement("div",{className:"pill active"},"Aktiv")),e.active&&!e.publishable&&s.createElement("div",{className:"horizontalItem top"},s.createElement("div",{className:"pill incomplete"},"Inkomplett"))),s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,e.description)),s.createElement("div",{className:"horizontalItem top"},e.modifiedBy?s.createElement("p",{className:"small"},"Redigerad av ",e.modifiedBy.name," / ",Object(E.h)(e.modifiedDate)):s.createElement("p",{className:"small",style:{fontStyle:"italic"}}," ")))}))},t.prototype.render=function(){var e=this.state.schoolCourses,t=[],n=[];if(e){var r=f.a.currentUser.mail;e.forEach(function(e){e.activatedBy&&e.activatedBy.url==r?t.push(e):e.responsibleTeachers.filter(function(e){return e.url==r}).length>0?t.push(e):n.push(e)})}return s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("div",{className:"ked_boxed"},s.createElement("h3",null,"Skolans kurser"),s.createElement("div",{className:"taskContainer odd-even"},e?s.createElement(s.Fragment,null,this.outputCourses(t,"Mina kurser",!0),this.outputCourses(n,"Andra kurser",!1)):s.createElement("p",null,s.createElement(A.a,null)," Laddar skolans kurser")),"#/courses/new"!==location.hash&&s.createElement(Ee.a,{className:"btn",to:"/courses/new",onClick:function(){return window.scroll(0,0)}},"Skapa ny kurs")))},t}(s.Component),Ce=n(55),Se=n(9),Te=n(7),Oe=n(117),Ne=function(e,t,n){for(var r=[],a=t;a<=n;a++)r.push({schoolName:"KED",tuitionGroupName:e,studentFirstName:"Student "+a,studentLastName:"Classroom",studentEmailAddress:"student"+a+".classroom@kedschools.com"});return r},De=[{schoolName:"KED",teacherFirstName:"Teacher 1",teacherLastName:"Classroom",teacherEmailAddress:"teacher1.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 2",teacherLastName:"Classroom",teacherEmailAddress:"teacher2.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 3",teacherLastName:"Classroom",teacherEmailAddress:"teacher3.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Carl",teacherLastName:"Holmberg",teacherEmailAddress:"carl@kedschools.com"},{schoolName:"KED",teacherFirstName:"David",teacherLastName:"Fahlander",teacherEmailAddress:"david.fahlander@kedschools.com"}],Ie={"DJUSÄL01":[{schoolName:"KED",tuitionGroupName:"IDR1_Gr1 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"IDR1_Gr2 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"IDR1_Gr3 (180816-190614)",courseCode:"DJUSÄL01"}],KEMKEM01:[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",courseCode:"KEMKEM01"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",courseCode:"KEMKEM01"}],BIOBIO01:[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",courseCode:"BIOBIO01"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",courseCode:"BIOBIO01"}],SVESVE03:[{schoolName:"KED",tuitionGroupName:"SVE3_Gr1 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr2 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr3 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr4 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr5 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr6 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr7 (180816-190614)",courseCode:"SVESVE03"}]},xe={"IDR1_Gr1 (180816-190614)":Ne("IDR1_Gr1 (180816-190614)",1,12),"IDR1_Gr2 (180816-190614)":Ne("IDR1_Gr2 (180816-190614)",13,22),"IDR1_Gr3 (180816-190614)":Ne("IDR1_Gr3 (180816-190614)",23,34),"KEM1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 9",studentLastName:"Classroom",studentEmailAddress:"student9.classroom@kedschools.com"}],"KEM1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 5",studentLastName:"Classroom",studentEmailAddress:"student5.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"}],"BIO1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 4",studentLastName:"Classroom",studentEmailAddress:"student4.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 10",studentLastName:"Classroom",studentEmailAddress:"student10.classroom@kedschools.com"}],"BIO1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 7",studentLastName:"Classroom",studentEmailAddress:"student7.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"}],"SVE3_Gr1 (180816-190614)":Ne("SVE3_Gr1 (180816-190614)",1,21),"SVE3_Gr2 (180816-190614)":Ne("SVE3_Gr2 (180816-190614)",22,44),"SVE3_Gr3 (180816-190614)":Ne("SVE3_Gr3 (180816-190614)",45,61),"SVE3_Gr4 (180816-190614)":Ne("SVE3_Gr4 (180816-190614)",62,78),"SVE3_Gr5 (180816-190614)":Ne("SVE3_Gr5 (180816-190614)",83,107),"SVE3_Gr6 (180816-190614)":Ne("SVE3_Gr6 (180816-190614)",108,124),"SVE3_Gr7 (180816-190614)":Ne("SVE3_Gr7 (180816-190614)",125,150)};function je(e){var t=e.school,n=e.selectedTeachers,r=e.onSelect,a=e.onBlur,s="KED"===t?De:[],c=Se.c.schools.cacheOptimized().name(t).single().read().edsSchoolNameGymn,u=(c?f.b.edsClient.suspense.getSchoolTeachers({schoolName:c}):s).map(function(e){return{label:e.teacherFirstName+" "+e.teacherLastName,value:e.teacherEmailAddress}});Object(j.d)(f.b.currentUser,t)&&!u.some(function(e){return e.value===f.b.currentUser.mail})&&u.push({label:f.b.currentUser.displayName,value:f.b.currentUser.mail});var d=Object(l.b)(n,function(e){return e.email});return u=u.filter(function(e){return!d[e.value]}).sort(Object(l.h)(["label"],Te.a.KED_LOCALE)),o.a.createElement(Oe.a,{isMulti:!1,options:u,defaultMenuIsOpen:!0,autoFocus:!0,onBlur:function(){return a()},placeholder:Object(l.a)(le||(le=i.e(["Välj bland skolans lärare..."],["Välj bland skolans lärare..."]))),noOptionsMessage:function(){return Object(l.a)(ce||(ce=i.e(["Det finns inga fler lärare att välja från"],["Det finns inga fler lärare att välja från"])))},onChange:function(e){var t=e,n=t.label,a=t.value;r({name:n,email:a})}})}var Re=n(34),Le=o.a.createContext(null);Re.b.addProvider(function(){return Le._currentValue});var Ue,Pe,Ae,Me,_e,Be,Ke,qe,ze,Fe=function(e){function t(t){var n=e.call(this,t)||this;return n.subscriptions=[],n.outerSubscription={unsubscribe:function(){n.subscriptions.forEach(function(e){return e.unsubscribe()}),n.subscriptions=[]}},n.observer=function(e,t,r){t?n.setState({error:t}):n.setState(function(e){return{counter:e.counter+1,error:t}})},n.state={counter:0,error:null},n}return i.c(t,e),t.prototype.componentDidCatch=function(e,t){e&&e.name||(e=new Error(""+e)),this.setState({error:e,info:t}),console.log(e,t)},t.prototype.componentWillMount=function(){this.outerSubscription.unsubscribe()},t.prototype.render=function(){return this.state.error?this.props.errorFallback||o.a.createElement("p",null,Object(l.a)(Ue||(Ue=i.e(["Kunde inte ladda innehållet"],["Kunde inte ladda innehållet"])))):(this.outerSubscription.unsubscribe(),o.a.createElement(s.Suspense,{fallback:this.props.fallback||null},o.a.createElement(Le.Provider,{value:this},this.props.children)))},t}(o.a.Component);function Ge(e){var t=e.school,n=e.teachers,r=e.onUpdate,a=Object(s.useRef)(),c=i.f(Object(s.useState)(!1),2),u=c[0],d=c[1],m=O.b.teacherRights;return o.a.createElement("div",{className:"teachers-list"},o.a.createElement("h3",null,"Ansvariga lärare"),o.a.createElement("table",{style:{width:"100%"}},o.a.createElement("thead",null,n.length>0&&o.a.createElement("tr",null,o.a.createElement("th",{style:{width:"15%"}},Object(l.a)(Pe||(Pe=i.e(["Namn"],["Namn"])))),o.a.createElement("th",null,Object(l.a)(Ae||(Ae=i.e(["E-postadress"],["E-postadress"])))),m&&o.a.createElement("th",{style:{width:"24px"}},Object(l.a)(Me||(Me=i.e(["Behörighet"],["Behörighet"])))),o.a.createElement("th",{style:{width:"24px"}}))),o.a.createElement("tbody",null,n.map(function(e,t){return o.a.createElement("tr",{key:t},o.a.createElement("td",null,o.a.createElement("input",{type:"text",ref:a,value:e.name,autoFocus:!e.name&&t>0,onChange:function(a){if(a.target.value||e.email){var s=i.g(n);s[t]=i.a({},e,{name:a.target.value}),r(s)}else r(i.g(n.slice(0,t),n.slice(t+1)))}})),o.a.createElement("td",null,o.a.createElement("input",{type:"text",style:{width:"100%"},value:e.email||e.url,onKeyDown:function(e){9===e.which&&!e.shiftKey&&t===n.length-1&&(n.length<1||n[n.length-1].name)&&(d(!0),e.preventDefault())},onChange:function(a){var s=i.a({},e,{url:a.target.value,email:a.target.value});if(a.target.value||e.name){var o=i.g(n);o[t]=s,r(o)}else r(i.g(n.slice(0,t),n.slice(t+1)))}})),m&&o.a.createElement("td",null,o.a.createElement("select",{disabled:!(e.email||e.url),value:e.access||"edit",onChange:function(a){var s=i.g(n);s[t]=i.a({},e,{access:a.target.value}),r(s)}},o.a.createElement("option",{value:"read"},Object(l.a)(_e||(_e=i.e(["Läsa"],["Läsa"])))),o.a.createElement("option",{value:"edit"},Object(l.a)(Be||(Be=i.e(["Redigera"],["Redigera"])))),o.a.createElement("option",{value:"full"},Object(l.a)(Ke||(Ke=i.e(["Full"],["Full"])))))),o.a.createElement("td",null,o.a.createElement(he.a,{onClick:function(){r(i.g(n.slice(0,t),n.slice(t+1)))}})))}))),o.a.createElement("br",null),u?o.a.createElement(Fe,{fallback:o.a.createElement(A.a,null),errorFallback:Object(l.a)(qe||(qe=i.e(["Kunder inte hämta skolans lärare från EDS"],["Kunder inte hämta skolans lärare från EDS"])))},o.a.createElement(je,{school:t,selectedTeachers:n,onBlur:function(){return d(!1)},onSelect:function(e){var t=e.name,a=e.email,s={name:t,email:a,url:a,access:"edit"},o=i.g(n);o.push(s),r(o),d(!1)}})):o.a.createElement("a",{className:"btn",onClick:function(){d(!0)}},o.a.createElement("i",{className:"fa fa-user-plus","aria-hidden":!0}),Object(l.a)(ze||(ze=i.e([" Lägg till ansvarig lärare"],[" Lägg till ansvarig lärare"])))))}var Ve,$e,He,We=n(125),Ze=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isOpen:!1},n}return i.c(t,e),t.prototype.render=function(){var e=this.props.course,t=(this.state.isOpen,[]),n=Object(Ce.d)(e);return t.push(s.createElement("tr",{key:"centralContent",className:"covered-item-label"},s.createElement("td",{colSpan:2},"Centralt innehåll"))),e.centralContent.forEach(function(e,r){return t.push(s.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},s.createElement("td",null,s.createElement("p",{className:"criteriaText",dangerouslySetInnerHTML:{__html:e.name}})),s.createElement("td",null,s.createElement("p",null,(n[e.id]||[]).length))))}),t.push(s.createElement("tr",{key:"abilities",className:"covered-item-label"},s.createElement("td",{colSpan:2},"Förmågor"))),e.abilities.forEach(function(e,r){return t.push(s.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},s.createElement("td",null,s.createElement("p",{className:"abilityText",dangerouslySetInnerHTML:{__html:e.name}})),s.createElement("td",null,s.createElement("p",null,(n[e.id]||[]).length))))}),t.push(s.createElement("tr",{key:"futureAbilities",className:"covered-item-label"},s.createElement("td",{colSpan:2},"Framtidsförmågor"))),We.a.forEach(function(e,r){return t.push(s.createElement("tr",{key:e,className:r%2?"tableOdd":""},s.createElement("td",null,s.createElement("p",{className:"abilityText"},e)),s.createElement("td",null,s.createElement("p",null,(n[e]||[]).length))))}),s.createElement(fe.a,{className:"larger",title:s.createElement("p",null,"Kursens täckningstabell"),contentClassName:"weighted-items-table"},s.createElement("p",null,"Tabellen anger hur många uppgifter som berör varje del."),s.createElement("table",null,s.createElement("tbody",null,t)))},t}(s.Component),Qe=function(e){function t(t){var n=e.call(this,t)||this;return n.state={url:n.props.url||""},n}return i.c(t,e),t.prototype.save=function(){var e=this.state.url;if(!U.a.isUri(e))throw new Error(Object(l.a)(Ve||(Ve=i.e(["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"])),e));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.onSave,r=t.onDelete,a=this.state,i=U.a.isUri(this.state.url);return s.createElement("div",null,s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("h2",null,"Koppla en arbetsgång till kursen"),s.createElement("p",null,"Det går bara att lägga in en arbetsgång per kurs."),s.createElement("br",null),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Länk:"),s.createElement("div",{className:"horizontalItem top "},s.createElement("input",{type:"text",tabIndex:1,size:50,value:a.url,onChange:function(t){return e.setState({url:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("br",null)),s.createElement("div",{className:"sv-html-portlet sv-portlet",id:"svid12_492422d515badf36646e4ff1"},r&&s.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return r()}},"Ta bort arbetsgång"),s.createElement("a",{tabIndex:1,className:"btn btn-large"+(i?"":" btn-inactive"),onClick:i&&function(){return n(a.url)}},"Spara")))},t}(s.Component),Ye=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return i.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.url;return s.createElement("div",null,s.createElement("div",{className:"taskContainer"},r&&s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:Qe,props:{url:r,onSave:function(e){n({$set:e}),t.closeDialog()},onDelete:function(){n({$set:void 0}),t.closeDialog()}}})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement("a",{href:r,target:"_blank"},"Nuvarande arbetsgång")))),!r&&s.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:Qe,props:{onSave:function(e){n({$set:e}),t.closeDialog()}}})}},s.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Koppla en arbetsgång till kursen"))},t}(s.Component);function Je(){return f.a.currentUser}function Xe(e){var t=e.school,n=e.courseCode,r=e.selectedStudyGroups,a=e.onUpdate,s="KED"===t&&Ie[n]?Ie[n]:[],c=Se.c.schools.cacheOptimized().name(t).single().read().edsSchoolNameGymn,u=(c?f.b.edsClient.suspense.getSchoolTuitionGroups({schoolName:c,courseCode:n}):s).map(function(e){return{label:e.tuitionGroupName,value:e.tuitionGroupName}});return o.a.createElement(Oe.a,{isMulti:!0,options:u,value:r.map(function(e){return{label:e,value:e}}),placeholder:Object(l.a)($e||($e=i.e(["Koppla studiegrupper till kursen..."],["Koppla studiegrupper till kursen..."]))),noOptionsMessage:function(){return Object(l.a)(He||(He=i.e(["Kunde inte hitta studiegrupper för denna kurs"],["Kunde inte hitta studiegrupper för denna kurs"])))},onChange:function(e){a(e.map(function(e){return e.value}))}})}var et,tt,nt,rt,at,it,st,ot,lt,ct,ut,dt,mt,pt,ht,ft,gt,vt,bt,yt=function(e){function t(t){var n=e.call(this,t)||this;return n.state={changeImageUrl:!1},n}return i.c(t,e),t.prototype.setImageUrl=function(e){this.props.course.imageId},t.prototype.render=function(){var e=this.props,t=e.course,n=e.origCourse,r=e.host,a=Object(Ce.e)(t),o=Object(Ce.b)(t),c=Object(Ce.f)(t),u=t.images.find(function(e){return e.id===t.imageId}),d=u&&u.url.startsWith("data:"),m=u&&u.url.indexOf("storage.googleapis.com")>0,p=Object(Ce.c)(t),h=Je(),f=p.some(function(e){return e.email===h.mail&&"full"===e.access}),g=O.b.studyGroups;return s.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},t.isTemplate&&s.createElement("h1",null,"Kursmall"),s.createElement("h2",null,"Kursövergripande"),s.createElement(fe.a,{title:s.createElement("p",null,"Kursövergripande"),headerOpen:!0,inactivated:!O.b.cbCollapseBoxes},s.createElement("div",{className:"ked_boxed"},s.createElement("div",null,s.createElement("h3",null,"Kursens bild"),d?s.createElement("p",null,"Kursens bild ligger i databasen. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):m?s.createElement("p",null,"Kursens bild ligger i Kunskapsskolans Google moln. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):u?s.createElement("div",null,s.createElement("textarea",{value:u.url,style:{width:"100%",height:"30px"},onChange:function(e){return Object(v.b)(t,n,r,e.target.value)}}),s.createElement("p",null,"Bilden som visas högst upp hämtas från angiven URL. För att ändra bild kan du redigera URL ovan. Ett annat sätt att ändra bild är att dra och släppa en ny bild över den gamla högst upp på sidan.")):s.createElement("p",null,"Kursen saknar egen bild. Lägg till en bild genom att dra och släppa en bild på kurs-bannern högst upp på den här sidan."),s.createElement("br",null)),!t.isTemplate&&s.createElement("div",null,s.createElement("h3",null,"Beskrivning"),s.createElement("p",{className:"subHeader"},"(Beskrivning av kursen. För att skilja mellan olika varianter av samma gymnasiekurs)"),s.createElement("textarea",{className:"inputTextBox inputTextSmall",value:t.description,onChange:function(e){return r.update({description:{$set:e.target.value}})}}),s.createElement("br",null)),s.createElement("div",null,s.createElement("h3",null,"Upptaktstext"),s.createElement("p",{className:"subHeader"},"(texten ska visas på kursens upptaktssektion)"),s.createElement(V.a,{html:t.runUpText,defaultActions:$.a,actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],onChange:function(e){return r.update({runUpText:{$set:e}})}}),s.createElement("br",null)),s.createElement("h3",null,"Kursresurser"),s.createElement("p",{className:"subHeader"},"(Resurser för upptakt och kursen som helhet)"),s.createElement(N,{resources:t.resources,onUpdate:function(e){return r.update({resources:e})},host:r}),s.createElement("br",null),s.createElement("h3",null,"Arbetsgång"),s.createElement("p",{className:"subHeader"},"(Eventuell länk till arbetsgång för kursen)"),s.createElement(Ye,{url:t.workFlowLink,onUpdate:function(e){return r.update({workFlowLink:e})},host:r}),s.createElement("br",null),!t.isTemplate&&s.createElement("div",null,s.createElement("h3",null,"Google Classroom"),g?s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement("div",{className:"checkBox"+(t.googleCreateClassrooms?" checked":""),onClick:function(){r.update({googleCreateClassrooms:{$set:!t.googleCreateClassrooms}})}})),s.createElement("div",{className:"horizontalItem top"},"Skapa klassrum för kursen")):s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{placeholder:"Google classroom URL",type:"text",size:30,value:t.googleClassRoomURL,onChange:function(e){return r.update({googleClassRoomURL:{$set:e.target.value}})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{placeholder:"kod",type:"text",size:8,value:t.googleClassRoomCode,onChange:function(e){return r.update({googleClassRoomCode:{$set:e.target.value}})}})))),t.isTemplate?null:s.createElement(s.Fragment,null,s.createElement(Ge,{school:t.school,teachers:t.responsibleTeachers,onUpdate:function(e){r.update({responsibleTeachers:{$set:e}})}}),s.createElement("br",null),g&&s.createElement("div",{className:"select-studygroups"},s.createElement("h3",null,Object(l.a)(et||(et=i.e(["Studiegrupper"],["Studiegrupper"])))),s.createElement(Fe,{fallback:s.createElement(A.a,null),errorFallback:Object(l.a)(tt||(tt=i.e(["Kunde inte ladda studiegrupper från EDS"],["Kunde inte ladda studiegrupper från EDS"])))},s.createElement(Xe,{school:t.school,courseCode:t.code,selectedStudyGroups:t.studyGroups||[],onUpdate:function(e){return r.update({studyGroups:{$set:e}})}})))))),s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement("div",{id:"Kursensmoduler"}),s.createElement("h2",null,"Kursens moduler"),s.createElement("hr",null)),s.createElement(ye,{host:r,course:t,idsNotCoveredByAnyTask:o}),s.createElement("div",null,s.createElement("br",null),s.createElement(Ze,{course:t})),s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement("h2",null,"Kursens status"),s.createElement("hr",null),t.createdBy&&t.createdDate&&s.createElement("p",null,"Kursen skapades ",Object(E.c)(t.createdDate)," av ",s.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&s.createElement("p",null,"Kursen redigerades senast ",Object(E.c)(t.modifiedDate)," av ",s.createElement("strong",null,t.modifiedBy.name),"."),t.active?s.createElement("p",null,"Kursen är ",s.createElement("strong",null,"AKTIV")," sedan ",Object(E.c)(t.activatedDate)," av ",s.createElement("strong",null,t.activatedBy.name),"."):s.createElement("p",null,"Kursen är ",s.createElement("strong",null,"INAKTIV"),t.inactivatedBy?s.createElement("span",null,"sedan ",Object(E.c)(t.inactivatedDate)," av ",s.createElement("strong",null,t.inactivatedBy.name),"."):s.createElement("span",null,".")),0===a.length?s.createElement("p",{className:"markedGreen"},"Modulernas kunskapskrav täcker skolverkets krav för denna kurs"):s.createElement("div",{className:"markedRed warning-box"},s.createElement("div",{className:"warningFlag"},s.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),s.createElement("p",null,"Modulernas kunskapskrav täcker inte skolverkets krav för denna kurs.")),c.map(function(e){return s.createElement("div",{key:e,className:"markedRed warning-box"},s.createElement("div",{className:"warningFlag"},s.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),s.createElement("p",null,e))}),s.createElement("br",null),s.createElement("div",{className:"btn btn-large",onClick:function(){return r.confirmSaveAndSync()}},"Spara"),t.active?s.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.inactivateAndSave()}},"Inaktivera och spara"):s.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.activateAndSave()}},"Aktivera och spara")),s.createElement("br",null),s.createElement("div",{className:"sv-html-portlet sv-portlet"},f&&!t.isTemplate&&(n?s.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){confirm(Object(l.a)(nt||(nt=i.e(['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\n\nKursen kommar att raderas helt!\n\nÄr du säker?"],['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\\n\\nKursen kommar att raderas helt!\\n\\nÄr du säker?"])),t.name,t.description,t.school))&&r.deleteCourse().catch(l.n)}},"Ta bort kurs"):s.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return history.go(-1)}},"Avbryt")),t.googleCreateClassrooms&&g&&s.createElement("div",{className:"btn btn-primary btn-large pull-right",onClick:function(){return r.syncWithClassroomAndSave()}},r.syncInProgress()?s.createElement(A.a,null):t.inSyncWithClassroom?s.createElement("span",null,s.createElement("i",{className:"fas fa-check","aria-hidden":"true"})):s.createElement("span",null,s.createElement("i",{className:"fas fa-code-branch"}))," Sync med klassrum")))),s.createElement("div",{className:"sv-layout sv-column-5"},s.createElement(we,null)))},t}(s.Component),kt=n(56),Et=function(e){function t(){return e.call(this,["https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.profile.photos","https://www.googleapis.com/auth/classroom.profile.emails","https://www.googleapis.com/auth/classroom.rosters","https://www.googleapis.com/auth/classroom.rosters.readonly","https://www.googleapis.com/auth/classroom.coursework.students","https://www.googleapis.com/auth/script.external_request"])||this}return i.c(t,e),t.prototype.callSync=function(e,t){return i.b(this,void 0,void 0,function(){var n;return i.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:return r.sent(),(n=t?{function:e,parameters:t}:{function:e}).devMode=!0,[4,fetch("https://script.googleapis.com/v1/scripts/M1H0BlTkv983PNVTJjDXjNqXLxmQiBgGz:run?alt=json",{method:"post",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:"Bearer "+this.authToken},body:JSON.stringify(n)}).then(function(e){return e.json()})];case 2:return[2,r.sent()]}})})},t.prototype.initSync=function(e,t,n){return i.b(this,void 0,void 0,function(){var r,a,s,o,l,c,u,d,m,p,h,g,v,b,y,k,E,w,C;return i.d(this,function(S){switch(S.label){case 0:if(l={},"KED"===e.school)try{for(c=i.h(e.studyGroups),u=c.next();!u.done;u=c.next())v=u.value,l[v]=xe[v]?xe[v].map(function(e){return e.studentEmailAddress}):[]}catch(e){r={error:e}}finally{try{u&&!u.done&&(a=c.return)&&a.call(c)}finally{if(r)throw r.error}}return[4,f.b.kedBackendClient.http.get("schools",{cacheBust:"static",name:e.school}).then(function(e){return e.json()})];case 1:if(d=S.sent(),m=d[0].edsSchoolNameGymn,p=m?{}:l,!e.studyGroups)return[3,9];if(!m)return[3,9];S.label=2;case 2:S.trys.push([2,7,8,9]),h=i.h(e.studyGroups),g=h.next(),S.label=3;case 3:return g.done?[3,6]:(v=g.value,[4,f.b.edsClient.getTuitionGroupStudents({schoolName:m,tuitionGroupName:v})]);case 4:b=S.sent(),p[v]=b.map(function(e){return e.studentEmailAddress}),S.label=5;case 5:return g=h.next(),[3,3];case 6:return[3,9];case 7:return y=S.sent(),s={error:y},[3,9];case 8:try{g&&!g.done&&(o=h.return)&&o.call(h)}finally{if(s)throw s.error}return[7];case 9:return k=this.diffCourse(e,t,n),E=k.subset,w=k.changes,C=k.action,console.log(E),console.log(w),console.log(p),"full"==C?[2,this.createClassroom(E,p)]:"update"==C?[2,this.updateClassroom({course:E,changes:w,studyGroupStudents:p})]:[2]}})})},t.prototype.archive=function(e){return i.b(this,void 0,void 0,function(){return i.d(this,function(t){return console.log("archiving"),[2,this.callSync("archive",[e])]})})},t.prototype.diffCourse=function(e,t,n){var r,a=function(e){return e.filter(function(e){return!0===e.assignment}).map(function(e){return{assignment:e.assignment,deadline:e.deadline,id:e.id,name:e.name}})},i={id:(r=e).id,school:r.school,code:r.code,name:r.name,description:r.description,tasks:r.tasks,responsibleTeachers:r.responsibleTeachers,studyGroups:r.studyGroups};return i.tasks=a(i.tasks),{subset:i,changes:!!t&&{tasks:a(t.tasks),responsibleTeachers:t.responsibleTeachers,studyGroups:t.studyGroups},action:"update"}},t.prototype.createClassroom=function(e,t){return i.b(this,void 0,void 0,function(){return i.d(this,function(n){return[2,this.callSync("createClassrooms",[e,t])]})})},t.prototype.updateClassroom=function(e){var t=e.course,n=e.changes,r=e.studyGroupStudents;return i.b(this,void 0,void 0,function(){return i.d(this,function(e){return[2,this.callSync("updateClassrooms",[t,n,r])]})})},t}(n(78).a),wt="production"===Te.b.ENVIRONMENT?l.n:null,Ct=Object(l.a)(rt||(rt=i.e(["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."],["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."]))),St={origCourse:null,origTemplate:null,course:null,dialogContainers:[],hasUnsavedData:!1,view:"courseBuilder",classroomSyncInProgress:!1},Tt=function(e){function t(t){var n=e.call(this,t)||this;return n.state=i.a({},St),n.update=n.update.bind(n),n.refDialog=n.refDialog.bind(n),n.contentYPos=0,n.onKeyDown=n.onKeyDown.bind(n),n.beforeUnload=n.beforeUnload.bind(n),n.onClickPreventUnload=n.onClickPreventUnload.bind(n),n.isSaving=!1,n.dialogs=[],t.view&&(n.state=i.a({},n.state,{view:t.view})),n}return i.c(t,e),t.prototype.setStatePromised=function(e){return this._setState(i.a({hasUnsavedData:!0},e))},t.prototype.setNonSaveableDataState=function(e){return this._setState(e)},t.prototype._setState=function(t){var n=this;if(t.course){var r=t.course,a=r.tasks,s=r.modules,o={};s.forEach(function(e){return e.taskIds.forEach(function(e){return o[e]=!0})});var l=a.filter(function(e){return o[e.id]}),c=i.a({},t.course);c.tasks=l,t=i.a({},t,{course:c})}var u=t.allCourses||this.state.allCourses,d=t.course||this.state.course;if(u){var m=u.findIndex(function(e){return e.id===n.props.id});u=x()(u,{$splice:[[m,1,d]]}),(t=i.a({},t)).allCourses=u}return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentWillMount=function(){this.load().catch(wt),window.addEventListener("keydown",this.onKeyDown),window.addEventListener("beforeunload",this.beforeUnload),document.body.addEventListener("click",this.onClickPreventUnload)},t.prototype.componentWillUnmount=function(){window.removeEventListener("keydown",this.onKeyDown),window.removeEventListener("beforeunload",this.beforeUnload),document.body.removeEventListener("click",this.onClickPreventUnload),Object(E.j)("")},t.prototype.componentWillReceiveProps=function(e){this.state&&this.state.course&&(e.id===this.props.id&&e.templateId===this.props.templateId||this.setStatePromised(St)),e.view!==this.props.view&&this.setNonSaveableDataState({view:e.view})},t.prototype.componentDidUpdate=function(e,t){if(this.contentDiv){var n=Object(k.findDOMNode)(this.contentDiv);n&&(this.contentYPos=n.getBoundingClientRect().top)}t&&t.course&&(this.props.id===e.id&&this.props.templateId===e.templateId||this.load().catch(wt)),!t.hasUnsavedData&&this.state.hasUnsavedData&&Object(E.j)("unsaved")},t.prototype.loadFromTemplate=function(e){return i.b(this,void 0,void 0,function(){var t,n,r;return i.d(this,function(a){switch(a.label){case 0:return Object(l.o)("Laddar data från mall..."),[4,Object(E.f)(e,{includeTemplateChain:!0})];case 1:return t=a.sent(),(n=Object(E.k)(Date.now(),t,f.a.currentUser)).id=Object(w.h)(),n.parentId=e,n.active=!1,n.isTemplate=!1,n.templateChain=i.g(n.templateChain),n.templateChain.push({id:e,$meta:"ref"}),r=f.a.currentUser.school,n.school=r,n.description="",n.responsibleTeachers=[{name:f.a.currentUser.displayName,email:f.a.currentUser.mail,access:"full",url:f.a.currentUser.mail}],delete n.studyGroups,n.acl=["role:USER:R","schoolRole:"+r+"/EMPLOYEE:S"],delete n.$etag,delete n.createdBy,delete n.createdDate,delete n.modifiedBy,delete n.modifiedDate,delete n.activatedBy,delete n.activatedDate,delete n.googleClassRoomCode,delete n.googleClassRoomURL,delete n.googleCreateClassrooms,[4,this.setStatePromised({course:n,origCourse:null,origTemplate:t})];case 2:return a.sent(),Object(l.o)(""),[2]}})})},t.prototype.load=function(){return i.b(this,void 0,void 0,function(){return i.d(this,function(e){switch(e.label){case 0:return Object(E.j)(""),this.props.id?[4,this.loadExistingCourse(this.props.id)]:[3,2];case 1:return e.sent(),[3,5];case 2:return this.props.templateId?[4,this.loadFromTemplate(this.props.templateId)]:[3,4];case 3:return e.sent(),[3,5];case 4:throw new Error(Object(l.a)(at||(at=i.e(["Ogiltig parameter. id eller templateId måste anges"],["Ogiltig parameter. id eller templateId måste anges"]))));case 5:return[2]}})})},t.prototype.loadExistingCourse=function(e){return i.b(this,void 0,void 0,function(){var t;return i.d(this,function(n){switch(n.label){case 0:return Object(l.o)("Laddar kurs"),[4,Object(E.f)(e)];case 1:return(t=n.sent()).responsibleTeachers||(t.responsibleTeachers=[{name:f.a.currentUser.displayName,email:f.a.currentUser.mail,access:"full",url:f.a.currentUser.mail}]),[4,this.setNonSaveableDataState({course:t,origCourse:t})];case 2:return n.sent(),Object(l.o)(""),[2]}})})},t.prototype.update=function(e){return i.b(this,void 0,void 0,function(){return i.d(this,function(t){switch(t.label){case 0:return[4,this.setStatePromised({course:x()(this.state.course,e)})];case 1:return t.sent(),kt.b.studyGroups&&this._checkClassroomChanges(),[2]}})})},t.prototype.deleteCourse=function(){return i.b(this,void 0,void 0,function(){var e,t,n,r,a,s,o,c;return i.d(this,function(u){switch(u.label){case 0:return Object(l.o)("Raderar kursen..."),n=this.state.course.school,this.state.course.parentId,r=this.props.id,[4,f.a.kedBackendClient.list("courses",{hasEdgesTo:[this.props.id]})];case 1:a=u.sent(),s=new w.a;try{for(o=i.h(a),c=o.next();!c.done;c=o.next())c.value}catch(t){e={error:t}}finally{try{c&&!c.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}return s.delete("courses",r),[4,f.a.kedBackendClient.batch(s.mutationRequests)];case 2:return u.sent(),n===f.a.currentUser.school&&ke.delete(r),Object(l.o)(""),location.hash="#/courses/new",[2]}})})},t.prototype.confirmSaveAndSync=function(){return i.b(this,void 0,void 0,function(){var e,t;return i.d(this,function(n){switch(n.label){case 0:return e=this.state.course,t=!1,e.googleCreateClassrooms&&!e.inSyncWithClassroom&&kt.b.studyGroups&&(t=confirm(Object(l.a)(it||(it=i.e(["Synkurs kurs med klassrum?"],["Synkurs kurs med klassrum?"]))))),[4,t];case 1:return n.sent()?this.syncWithClassroomAndSave():this.save(),[2]}})})},t.prototype.save=function(){return i.b(this,void 0,void 0,function(){var e,t,n,r,a,s,o,c,u;return i.d(this,function(d){switch(d.label){case 0:if(e=this.state,t=e.course,n=e.origCourse,!(kt.b.studyGroups&&n&&n.googleCreateClassrooms)||t.googleCreateClassrooms)return[3,4];d.label=1;case 1:return d.trys.push([1,3,,4]),[4,(new Et).archive(t)];case 2:return d.sent().done||Object(l.n)(Object(l.a)(st||(st=i.e(["Classroom course could not be archived"],["Classroom course could not be archived"])))),[3,4];case 3:return d.sent(),[3,4];case 4:if(r=kt.b.teacherRights,a=this.state.origCourse?Object(Ce.c)(this.state.origCourse):[],s=Object(Ce.c)(this.state.course),o=Je(),r&&!o.roles.includes("ADMIN")&&!i.g(a,s).some(function(e){var t=e.email,n=e.url,r=e.access;return(t||n)===o.mail&&(!r||"edit"===r||"full"===r)}))return Object(l.n)(Object(l.a)(ot||(ot=i.e(["Kursen kunde inte sparas. Lägg till dig själv i listan på ansvariga lärare"],["Kursen kunde inte sparas. Lägg till dig själv i listan på ansvariga lärare"])))),[2];if(this.isSaving)return[2];d.label=5;case 5:return d.trys.push([5,7,8,9]),this.isSaving=!0,[4,this._save()];case 6:return d.sent(),[3,9];case 7:return c=d.sent(),u=c&&c.message?c.message:Object(l.a)(lt||(lt=i.e(["Ett okänt fel har inträffat..."],["Ett okänt fel har inträffat..."]))),c&&("http409"===c.name||"http412"===c.name||"http404"===c.name?u=Object(l.a)(ct||(ct=i.e(["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."],["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."]))):"http403"===c.name&&(this.state.course.isTemplate?u=Object(l.a)(ut||(ut=i.e(["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."],["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."]))):this.state.course.school&&(u=Object(l.a)(dt||(dt=i.e(["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""],["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""])),this.state.course.name,this.state.course.school)))),Object(l.n)(u),Object(E.j)("error"),[3,9];case 8:return this.isSaving=!1,[7];case 9:return[2]}})})},t.prototype.syncInProgress=function(){return this.state.classroomSyncInProgress},t.prototype.syncWithClassroomAndSave=function(){return i.b(this,void 0,void 0,function(){var e,t,n,r,a;return i.d(this,function(s){switch(s.label){case 0:return e=this.state,t=e.course,n=e.origCourse,console.log(t),console.log(n),[4,this.save()];case 1:if(s.sent(),this.state.hasUnsavedData)return Object(l.n)(Object(l.a)(mt||(mt=i.e(["Synkronisering med klassrummet skulle inte ske"],["Synkronisering med klassrummet skulle inte ske"])))),[2];s.label=2;case 2:return s.trys.push([2,7,,8]),this.setState({classroomSyncInProgress:!0}),r=new Et,t.googleCreateClassrooms?(a=null==t.inSyncWithClassroom,[4,r.initSync(t,n,a)]):[3,6];case 3:return s.sent().done?(this.update({inSyncWithClassroom:{$set:!0}}),this.setState({classroomSyncInProgress:!1}),[4,this._save(!0)]):[3,5];case 4:return s.sent(),Object(l.o)(Object(l.a)(pt||(pt=i.e(["Synkronisering med framgång"],["Synkronisering med framgång"])))),[3,6];case 5:Object(l.n)(Object(l.a)(ht||(ht=i.e(["Fel synkroniserat klassrum"],["Fel synkroniserat klassrum"])))),this.setState({classroomSyncInProgress:!1}),s.label=6;case 6:return[3,8];case 7:return s.sent(),[3,8];case 8:return[2]}})})},t.prototype._save=function(e){return void 0===e&&(e=!1),i.b(this,void 0,void 0,function(){var t,n,r,a,s,o,c,u,d,m,p,h;return i.d(this,function(g){switch(g.label){case 0:return t=this.state,n=t.course,r=t.origCourse,a=t.origTemplate,s=0===Object(Ce.e)(n).length,!e&&Object(l.o)(Object(l.a)(ft||(ft=i.e(["Sparar..."],["Sparar..."])))),o=Object(E.n)(Date.now(),n,f.a.currentUser),c=new w.a,u=r||a,d=o.tasks.map(function(e){if("add"===e.$meta||"update"===e.$meta){var t=u.tasks.find(function(t){return t.id===e.id});return Object(E.l)(t||{},e,"tasks",{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"},c)}var n=i.a({},e);return delete n.$meta,n}),o=x()(o,{tasks:{$set:d}}),o=Object(E.l)(r||{},o,"courses",{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"},c),(o=i.a({},o)).publishable=s,m=(o.tags||[]).filter(function(e){return"incomplete"!==e}),o.tags=o.publishable?m:m.concat("incomplete"),r?[3,3]:(c.add("courses",o),n.school?[4,ke.getSchoolId()]:[3,2]);case 1:p=g.sent(),c.link("schools",p,"courses",n.id,"courses"),n.active&&c.link("schools",p,"courses",n.id,"activeCourses"),g.label=2;case 2:return[3,7];case 3:return c.put("courses",o),r.active||!n.active?[3,5]:[4,ke.getSchoolId()];case 4:return p=g.sent(),c.link("schools",p,"courses",n.id,"activeCourses"),[3,7];case 5:return!r.active||n.active?[3,7]:[4,ke.getSchoolId()];case 6:p=g.sent(),c.unlink("schools",p,"courses",n.id,"activeCourses"),g.label=7;case 7:return[4,f.a.kedBackendClient.batch(c.mutationRequests)];case 8:return h=g.sent(),!e&&Object(l.o)(r?Object(l.a)(gt||(gt=i.e(["Ändringarna har sparats"],["Ändringarna har sparats"]))):Object(l.a)(vt||(vt=i.e(["Kursen har skapats"],["Kursen har skapats"])))),h&&h.newEtags&&(o=Object(E.b)(o,h.newEtags,["images","tasks"])),n.school===f.a.currentUser.school&&(r?ke.update(o):ke.insert(o)),[4,this.setNonSaveableDataState({course:o,origCourse:o,hasUnsavedData:!1})];case 9:return g.sent(),Object(E.j)(""),r||(location.hash="#/courses/"+o.id+"/edit"),[2]}})})},t.prototype._checkClassroomChanges=function(){var e=this.state,t=e.course,n=e.origCourse,r=t.tasks.filter(function(e){return e.assignment});if(!n)return t.inSyncWithClassroom=!1,void this.setStatePromised({course:t});var a=n.tasks.filter(function(e){return e.assignment}),i=Object(E.e)(n.responsibleTeachers,t.responsibleTeachers),s=r.filter(function(e){return!a.find(function(t){return t.id==e.id})}).length>0||a.filter(function(e){return!r.find(function(t){return t.id==e.id})}).length>0;s||(s=r.some(function(e){return null!=a.find(function(t){return t.id===e.id&&t.name!==e.name})}));var o=Object(E.e)(n.studyGroups,t.studyGroups),l=t.inSyncWithClassroom;t.inSyncWithClassroom=!(i||s||o),l!=t.inSyncWithClassroom&&this.setStatePromised({course:t})},t.prototype.activateAndSave=function(){var e=this,t=i.a({},this.state.course);t.active||(t.active=!0,t.activatedBy={name:f.a.currentUser.displayName,url:"mailto:"+f.a.currentUser.mail},t.activatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(wt))},t.prototype.inactivateAndSave=function(){var e=this,t=i.a({},this.state.course);t.active&&(t.active=!1,t.inactivatedBy={name:f.a.currentUser.displayName,url:"mailto:"+f.a.currentUser.mail},t.inactivatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(wt))},t.prototype.openDialog=function(e){this.setNonSaveableDataState({dialogContainers:this.state.dialogContainers.concat(e)})},t.prototype.closeDialog=function(){var e=this.state.dialogContainers,t=e.length;for(t&&this.setNonSaveableDataState({dialogContainers:e.slice(0,t-1)});this.dialogs.length>=t;)this.dialogs.pop()},t.prototype.refDialog=function(e,t){this.dialogs[t]=e},t.prototype.onKeyDown=function(e){if(83===e.which&&(e.ctrlKey||e.metaKey)){if(e.preventDefault(),this.state.dialogContainers.length>0)return void this.saveDialog();this.save()}else if(27===e.which&&this.state.dialogContainers.length>0)this.closeDialog(),e.preventDefault();else if(13===e.which){var t=e.target;this.state.dialogContainers.length>0&&"TEXTAREA"!==t.tagName&&"INPUT"!==t.tagName&&"SELECT"!==t.tagName&&"OPTION"!==t.tagName&&!t.contentEditable&&this.saveDialog()}},t.prototype.beforeUnload=function(e){if((this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!f.a.kedBackendClient.http.bearerProvider.wantsRedirect)return e.returnValue=Ct,e.returnValue},t.prototype.onClickPreventUnload=function(e){if(e.target&&"a"===(""+e.target.tagName).toLowerCase()){var t=e.target;if(t.href&&"#"!==t.getAttribute("href")&&!t.target&&(this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!confirm(Ct))return e.preventDefault(),e.stopPropagation(),!1}},t.prototype.saveDialog=function(){if(this.state.dialogContainers.length>0){var e=this.dialogs[this.state.dialogContainers.length-1];e&&e.save()}},t.prototype.render=function(){var e=this,t=(f.a.currentUser.roles.indexOf("ADMIN"),this.state.course);return this.state.course?s.createElement("div",{style:{outline:0}},s.createElement(v.a,{title:t.name+" - "+t.points+"p",activePage:this.state.view,routes:{studentPage:Object(j.f)(this.props.viewCourseUrl,{courseId:this.props.id}),feedback:this.props.feedbackUrl},host:this,course:t,origCourse:this.state.origCourse,backgroundImage:t.images.filter(function(e){return e.id===t.imageId}).map(function(e){return e.url})[0],isTemplate:t.isTemplate}),s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},s.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer",ref:function(t){return e.contentDiv=t}},s.createElement(yt,{course:this.state.course,origCourse:this.state.origCourse,host:this}),s.createElement("br",null),this.state.dialogContainers.map(function(t,n){var r=t.Component,a=t.props;return s.createElement("div",{key:n},s.createElement("div",{className:"darken"}),s.createElement("div",{className:"modal-page-wrap"},s.createElement("div",{className:"modal-page"},s.createElement(r,i.a({ref:function(t){return e.refDialog(t,n)}},a)),s.createElement(he.a,{onClick:function(){return e.closeDialog()}}))))})))))):s.createElement("div",{style:{outline:0}},s.createElement(v.a,{title:"",activePage:this.state.view,routes:{feedback:this.props.feedbackUrl}}),s.createElement("p",null,s.createElement(A.a,null),"V.g. vänta medan kursen laddas..."))},t}(s.Component),Ot=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courseOptions:null,selectedTemplateId:"--",courses:null,selectedCourseId:""},n}return i.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(l.n)},t.prototype.load=function(){return i.b(this,void 0,void 0,function(){var e,t,n;return i.d(this,function(r){switch(r.label){case 0:return Object(l.o)("Laddar kurser"),[4,f.a.kedBackendClient.list("subjects",{tags:["schoolType:gymnasium"],include:"courseTemplates"})];case 1:return e=r.sent(),t=Object(l.k)(e.map(function(e){return e.courseTemplates})).sort(Object(l.g)("name")),n=[{id:"--",name:"--"}].concat(t),Object(l.o)(""),this.setState({courseOptions:n}),[2]}})})},t.prototype.onSelectCourse=function(e){return i.b(this,void 0,void 0,function(){var t,n,r,a,s;return i.d(this,function(o){switch(o.label){case 0:return[4,f.a.kedBackendClient.list("courses",{hasEdgesTo:[e]})];case 1:return t=o.sent(),n=t.filter(function(e){return e.active}).map(function(e){var t=e.id,n=e.school,r=e.description,a=e.createdBy,i=e.modifiedBy;r&&(r=Object(l.l)(r,80));var s=r||(a?a.name+"s version":i&&i.name+"s version");return{id:t,name:"standard"===n?r?"Standard - "+r:"Standard":n+" - "+Object(l.l)(s,90),school:n}}).sort(Object(l.g)("name")),r=n.filter(function(e){return"standard"===e.school}),a=n.filter(function(e){return"standard"!==e.school}),s=i.g(r,[{id:e,name:"Tom"}],a),this.setState({courses:s,selectedTemplateId:e,selectedCourseId:s[0].id}),[2]}})})},t.prototype.render=function(){var e=this,t=this.state,n=t.courseOptions,r=(t.selectedTemplateId,t.courses),a=t.selectedCourseId;return s.createElement("div",{style:{outline:0}},s.createElement(v.a,{title:Object(l.a)(bt||(bt=i.e(["Kursbyggaren"],["Kursbyggaren"]))),activePage:"courseBuilder",routes:{feedback:this.props.feedbackUrl}}),s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},s.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},s.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("h2",null,"Skapa ny kurs"),s.createElement("hr",null),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"Välj gymnasiekurs :"))),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},n?s.createElement("select",{value:this.state.selectedTemplateId,onChange:function(t){return e.onSelectCourse(t.target.value).catch(l.n)}},n.map(function(e){return s.createElement("option",{key:e.id,value:e.id},e.name)})):s.createElement("div",null,s.createElement(A.a,null),s.createElement("select",{disabled:!0,value:""},s.createElement("option",null,"--"))))),r&&s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"Utgå från version: "))),r&&s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("select",{value:a,onChange:function(t){return e.setState({selectedCourseId:t.target.value})}},r.map(function(e){return s.createElement("option",{key:e.id,value:e.id},e.name)})))),s.createElement("br",null),s.createElement("br",null),r&&a&&s.createElement(Ee.a,{to:"/courses/create-from-template/"+this.state.selectedCourseId,className:"btn btn-large"},"Skapa"))),s.createElement("div",{className:"sv-layout sv-column-5"},s.createElement(we,null))))))))},t}(s.Component),Nt=n(126);n.d(t,"a",function(){return It}),Object(Nt.a)();var Dt,It=function(e){function t(t){return e.call(this,t)||this}return i.c(t,e),t.prototype.render=function(){var e=this,t=f.a.currentUser.roles.some(function(e){return"ADMIN"===e||"EMPLOYEE"===e}),n=f.a.currentUser.roles.some(function(e){return"ADMIN"===e});return s.createElement("div",{className:"course-builder"},s.createElement(c.a,null,t?s.createElement("div",null,s.createElement(u.a,{exact:!0,path:"/",render:function(t){t.match;return n?s.createElement(m.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl}):s.createElement(Ot,{feedbackUrl:e.props.feedbackUrl})}}),s.createElement(u.a,{exact:!0,path:"/schools",render:function(t){t.match;return s.createElement(m.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),s.createElement(u.a,{exact:!0,path:"/schools/new/gymnasium",render:function(){return s.createElement(h,{type:"gymnasium",feedbackUrl:e.props.feedbackUrl})}}),s.createElement(u.a,{exact:!0,path:"/schools/new/primary",render:function(){return s.createElement(h,{type:"primary",feedbackUrl:e.props.feedbackUrl})}}),s.createElement(u.a,{exact:!0,path:"/schools/:id/edit",render:function(t){var n=t.match;return s.createElement(p.a,{id:n.params.id,title:Object(l.a)(Dt||(Dt=i.e(["Editera skola"],["Editera skola"]))),feedbackUrl:e.props.feedbackUrl})}}),s.createElement(u.a,{exact:!0,path:"/subjects",render:function(){return s.createElement(y,{feedbackUrl:e.props.feedbackUrl})}}),s.createElement(u.a,{path:"/subjects/:id",render:function(t){var n=t.match;return s.createElement(g.a,{id:n.params.id,feedbackUrl:e.props.feedbackUrl})}}),s.createElement(u.a,{exact:!0,path:"/courses/new",render:function(){return s.createElement(Ot,{feedbackUrl:e.props.feedbackUrl})}}),s.createElement(u.a,{path:"/courses/create-from-template/:templateId",render:function(t){var n=t.match;return s.createElement(Tt,{templateId:n.params.templateId,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),s.createElement(u.a,{path:"/courses/:id/edit",render:function(t){var n=t.match;return s.createElement(Tt,{id:n.params.id,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}})):s.createElement("div",null,s.createElement(u.a,{path:"/",render:function(){return s.createElement("div",null,s.createElement(v.a,{title:"Kursbyggaren",activePage:"courseBuilder",routes:{feedback:e.props.feedbackUrl}}),s.createElement("h2",null,"Behörighet saknas"),s.createElement("p",null,"Detta verktyg är endast till för anställda på Kunskapsskolan."),s.createElement("h3",null,"Användarattribut"),s.createElement("table",{className:"ked_boxed",style:{border:"1px solid #eee"}},s.createElement("thead",null,s.createElement("tr",null,s.createElement("th",null,"Attribut"),s.createElement("th",null,"Värde"))),s.createElement("tbody",null,Object.keys(f.a.currentUser).map(function(e){return s.createElement("tr",{key:e},s.createElement("td",null,e),s.createElement("td",null,f.a.currentUser[e]))}))))}}))),s.createElement(d.a,null))},t}(s.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=n(26),i=(n(94),n(3)),s=n(7),o=n(0),l=n(162),c=n(2),u=n(12),d=n(17),m=n(8),p=n(57),h=i.a.bearerProvider.getBearer(),f=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isTokenLoaded:!1},n}return r.c(t,e),t.prototype.componentWillMount=function(){var e=this;h.then(function(){e.setState({isTokenLoaded:!0})}).catch(function(e){Object(c.n)(e)})},t.prototype.render=function(){var e=this.props.intl;return this.state.isTokenLoaded?o.createElement(d.a.Provider,{value:{intl:e}},o.createElement(l.a,{viewCourseUrl:s.b.KED_COURSE_VIEWER_URL,feedbackUrl:this.props.feedbackUrl})):o.createElement("p",null,o.createElement(u.a,null),"V.g. vänta... autenticerar...")},t}(o.Component),g=Object(p.a)(Object(m.d)(f));a.a.components=r.a({},a.a.components,{KEDAppCourseBuilder:g})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,