var kedappcoursebuilder=function(e){function t(t){for(var r,o,s=t[0],l=t[1],c=t[2],d=0,p=[];d<s.length;d++)o=s[d],a[o]&&p.push(a[o][0]),a[o]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(u&&u(t);p.length;)p.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,s=1;s<n.length;s++){var l=n[s];0!==a[l]&&(r=!1)}r&&(i.splice(t--,1),e=o(o.s=n[0]))}return e}var r={},a={1:0},i=[];function o(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var s=window.webpackJsonp_name_=window.webpackJsonp_name_||[],l=s.push.bind(s);s.push=t,s=s.slice();for(var c=0;c<s.length;c++)t(s[c]);var u=l;return i.push([213,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return o}),n.d(t,"k",function(){return l}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return p}),n.d(t,"o",function(){return m}),n.d(t,"n",function(){return h}),n.d(t,"l",function(){return f}),n.d(t,"b",function(){return v}),n.d(t,"c",function(){return g}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return y}),n.d(t,"m",function(){return k});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function i(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function o(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&i(n,t),n}var s=[].concat;function l(e){return s.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function u(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],i=t.slice(1);return function(e,t){return function e(t,n,r,i){var o=t[r];if(null==o)return-1;var s=n[r];return null==s?1:0===i.length?a(o,s):e(o,s,i[0],i.slice(1))}(e,t,n,i)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function p(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function m(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function h(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function f(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r],o=t(i),s=n[o];s?s.push(i):n[o]=[i]}return n}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r];n[t(i)]=i}return n}function b(e,t){var n,a,i={};try{for(var o=r.h(t),s=o.next();!s.done;s=o.next()){var l=s.value;l in e&&(i[l]=e[l])}}catch(e){n={error:e}}finally{try{s&&!s.done&&(a=o.return)&&a.call(o)}finally{if(n)throw n.error}}return i}function y(e,t){var n=g(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function k(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,i=n.length;a<i;++a){var o=n[a];if(r[a]!==o)return!1;if(e[o]!==t[o])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(28);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(24);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,,function(e,t,n){"use strict";var r=n(3),a=n(4),i=n(18),o=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),s=n(22);function l(e,t){return s.a[e].relationships[t]}function c(e,t){var n=function(e){var t=function(e){return!0};return e.from?u(t,function(t){return t.dateTime>=e.from}):e.to?u(t,function(t){return t.dateTime<e.to}):e.ids?u(t,function(t){return e.ids.includes(t.id)}):e.name?u(t,function(t){return t.name===e.name}):e.tags?u(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function u(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function p(e){return"clear-branch"===e.op||"merge"===e.op}var m=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var i=a[r];localStorage.setItem("cache-bust-"+n+"-"+i,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return s.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+l(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),h=n(15);function f(e,t){for(var n=Object.keys(t),r=e,i=0,o=n;i<o.length;i++){var s=o[i];r===e&&(r=a.a({},e));var l=t[s];if(l&&"object"==typeof l){var c=Object.keys(l).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var u=function(e){var t=l[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[s];a=Array.isArray(a)?a.slice():[],r[s]=a;for(var i=0,o=n;i<o.length;i++){var c=o[i];a.includes(c)||a.push(c)}break;case"$remove":var u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");a=r[s];Array.isArray(a)||(a=[]),r[s]=a.filter(function(e){return!u.includes(e)})}},d=0,p=c;d<p.length;d++){u(p[d])}continue}}r[s]=l}return r}function v(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,i=Object.keys(t),o=a.a({},e),s=0,l=i;s<l.length;s++){var c=l[s],u=t[c];if(u&&"object"==typeof u){var d=Object.keys(u).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var p=function(e){var t=u[e];switch(e){case"$unset":r?delete o[c]:o[c]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");s=(s=o[c])?a.a({},s):{},o[c]=s;var i=s.$remove;Array.isArray(i)&&(s.$remove=i.filter(function(e){return!n.includes(e)}),0===s.$remove.length&&delete s.$remove),d=(d=s.$add)?d.concat(n):n.slice(),s.$add=d;break;case"$remove":var s,l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");s=(s=o[c])?a.a({},s):{},o[c]=s;var d=s.$remove;Array.isArray(d)&&(s.$add=d.filter(function(e){return!l.includes(e)}),0===s.$add.length&&delete s.$add),i=(i=s.$remove)?i.concat(l):l.slice(),s.$remove=i}},m=0,h=d;m<h.length;m++){p(h[m])}continue}}o[c]=u}return o}var g=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,i,o;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(i=r[n]).op||i.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==i.op||i.targetBranchId&&i.branchId!==this.query.branchId&&i.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===i.op&&(i.deltaDoc.tags&&this.query.tags||i.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:o=this.getDataWithMutationsApplied(e,!1,this.data),this.data=o,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,i=this.includes,o=this.query,s=o.hasEdgesFrom?[].concat(o.hasEdgesFrom||[]):[],c=o.tags?[].concat(o.tags||[]):[];switch(t.op){case"update":return Object(h.e)(e,function(e){if(e.id===t.id){var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return i.forEach(function(r){var i,o=e[r];if(o){var s=Object(h.e)(o,function(e){if(e.id!==t.id)return e;var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r});s!==o&&(e=a.a({},e,((i={})[r]=s,i)))}}),e});case"add-related":if(r===t.table&&-1!==i.indexOf(t.graphProp))return Object(h.e)(e,function(e){var r;if(e.id!==t.id)return e;var i=a.a({},t.relatedDoc);return n&&(i.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([i]),r))});if(o.hasEdgesFrom&&s.includes(t.id)&&r===l(t.table,t.graphProp)){if(!o.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return o.ids&&o.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==i.indexOf(t.graphProp)?Object(h.e)(e,function(e){var r,i=e[t.graphProp];return i?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?i.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):i.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):o.hasEdgesFrom&&s.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(o.include){var u=i.map(function(e){return{label:e,table:l(r,e)}}).filter(function(e){return e.table===t.table});if(u.length>0)return Object(h.e)(e,function(e){return u.forEach(function(r){var i,o=r.label,s=e[o];s&&(e=a.a({},e,((i={})[o]=n?s.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):s.filter(function(e){return e.id!==t.id}),i)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),b=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new o(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return g.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesFrom",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.hasEdgesTo=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesTo",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:m.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new i.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(34).a),y=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===g.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var i=a.find(function(t){return s.a[r.table].relationships[t]===e});if(i){for(var o={},l=0,u=r.data;l<u.length;l++){var d=u[l];c(t,d[i]).forEach(function(e){return o[e.id]=e})}var p=Object.keys(o).map(function(e){return o[e]});return t.ids.every(function(e){return p.some(function(t){return t.id===e})})?{value:p}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var m=c(t,r.data);return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}},i=0,o=this.queries;i<o.length;i++){var l=a(o[i]);if("object"==typeof l)return l.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,i=this.findQuery(n,r);i?i.timeoutHandle&&(clearTimeout(i.timeoutHandle),i.timeoutHandle=null):(i=new g(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(i)),i.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,i=(n.repo,this.findQuery(r,a));i&&(i.unsubscribe(e),0===i.subscriptions.length&&(i.timeoutHandle=setTimeout(function(){0===i.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==i}))},this.queries.length>50?500:3e5)))},e}(),k=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return p(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return l(e,t)===r.table}):!!p(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return l(e,t)})).some(function(e){return l(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),i=e.length,o=function(t){var i=e[t];if("update"===i.op){var o=r.findIndex(function(e){return"update"===e.op&&e.branchId===i.branchId&&e.id===i.id});o>=0&&(n[t]=a.a({},i,{deltaDoc:v(i.deltaDoc,r[o].deltaDoc)}),r.splice(o,1))}},s=0;s<i;++s)o(s);return n.concat(r)},e}(),E=n(38);function w(e,t,n,r,i,o){for(var s=function(n){switch(n.op){case"add-related":o||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:i}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(o||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:i,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((l=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var s=t[l];t=t.slice(0,l).concat([a.a({},s,{$meta:r?"removing":"persisted"})],t.slice(l+1))}else t=t.slice(0,l).concat(t.slice(l+1));break;case"update":if(n.branchId!==e)return"continue";var l;if((l=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!o)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[i],$meta:r?"adding":"persisted"}].concat(t);else{var c=t[l],u=c.contributors.slice();u.includes(i)||u.push(i);var d=v(c.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:u,$meta:r?"updating":"persisted"}].concat(t.slice(0,l),t.slice(l+1)):t.slice(0,l).concat(t.slice(l+1))}}},l=0,c=n;l<c.length;l++){var u=s(c[l]);if("object"==typeof u)return u.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var i=a[r],o=this.lookup[i];if(o.value){var s=w(o.query.branchId,o.value,e,n,this.getUserDisplayName(),!!o.query.tags);null===s&&(n||o.fetch()),s!==o.value&&(o.optimisticValue=s,n||(o.value=s),o.notify(s))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new C(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),C=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=i.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),S=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,i,o;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),i=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),m.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(k.merge(e,i),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return o=a.sent(),this.persistedVersion.dispatchError(o),o&&o.name&&o.name.startsWith("http4")?(this.dispatchError(o,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(o,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new i.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(s.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),O=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),I=function(){function e(e,t,n,r,a,i,o,l){var c=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=i,this.writer=o,this.cacheOptimized=l,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new k),i||(this.querySet=new y(this.mutationQueue)),o||(this.writer=new S(this.mutationQueue,this.querySet,e,t,n)),Object.keys(s.a).forEach(function(e){var t=new b(c,e,r||{});l&&(t=t.cacheOptimized()),c[e]=t}),this.deltas=new O(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new b(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var x=n(6),D=n(7);n.d(t,"c",function(){return j}),n.d(t,"d",function(){return N}),n.d(t,"b",function(){return R}),n.d(t,"a",function(){return U});var j=new I(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),N=Object(x.i)(D.b.KED_REALM),R={standardSchool:j.schools.name("standard").cacheOptimized().single(),get mySchool(){return j.schools.name(r.a.currentUser.school).cacheOptimized().single()}},U={getBranchId:function(e,t){return e.switchMap(function(e){return j.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return j.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return j.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(x.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return j.courseBlocks.tags(e).idsOnly().concat(j.courseContents.tags(e).idsOnly()).concat(j.courseTabs.tags(e).idsOnly()).concat(j.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";var r=n(1),a=n(6);var i=n(16);n.d(t,"a",function(){return o}),n.d(t,"c",function(){return l}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"b",function(){return p}),n.d(t,"f",function(){return m});var o=["user","role","school","debug","testVersion","testversion","schoolType","schooltype"];function s(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function l(e,t){return s(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function u(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,o=Object(i.b)(location.search),s=r.a({},o,{role:t,school:n}),l=Object(i.a)(s);a?location.href=""+a+l:(location.hash="#",location.search=l)}};function p(e){d.actAs(e)}function m(e,t){var n,a,s=Object(i.b)(location.search),l={};try{for(var c=r.h(o),u=c.next();!u.done;u=c.next()){var d=u.value;s[d]&&(l[d]=s[d])}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var p=Object(i.a)(r.a({},l,t)),m=e.indexOf("#");return m>=0?""+e.substr(0,m)+p+e.substr(m):""+e+p}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return s}),n.d(t,"e",function(){return l});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function i(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function o(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function s(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),i=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(i.apply(Uint8Array,[void 0,r.sent()])),o=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[o++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function l(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var i=e[r],o=t(i);o!==i&&(n===e&&(n=e.slice()),n[r]=o)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return o}),n.d(t,"c",function(){return s});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),i=t[0],o=t[1];return a[n?i.toLowerCase():i]=o}),a}function i(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function o(e){return"?"+i(e)}function s(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"k",function(){return p}),n.d(t,"c",function(){return m}),n.d(t,"g",function(){return h}),n.d(t,"h",function(){return f}),n.d(t,"m",function(){return v}),n.d(t,"j",function(){return g}),n.d(t,"d",function(){return b}),n.d(t,"l",function(){return y}),n.d(t,"b",function(){return k}),n.d(t,"f",function(){return w}),n.d(t,"a",function(){return T}),n.d(t,"i",function(){return C}),n.d(t,"e",function(){return S});var r=n(1),a=n(5),i=n.n(a),o=n(6),s=n(37),l=n.n(s),c=n(11),u=n.n(c),d=n(3);function p(e,t,n,a,i){var s,c,u={},d=t.id,p=function(s){var l,c,p,m,h,f,v=a[s],g=e[s]||[],b=t[s];if(!b)return"continue";var y=b.map(function(e,t){return{doc:e,idx:t}}),k=y.filter(function(e){return!g.some(function(t){return t.id===e.doc.id})});try{for(var E=r.h(k),w=E.next();!w.done;w=E.next()){var T=w.value,C=(R=r.a({},T.doc)).$meta;delete R.$meta,"add"===C?(R.id||(R.id=Object(o.h)()),i.add(v,R)):"update"===C&&i.put(v,R),i.link(n,d,v,R.id,s),u[s]||(u[s]={}),u[s][T.idx]={$set:R}}}catch(e){l={error:e}}finally{try{w&&!w.done&&(c=E.return)&&c.call(E)}finally{if(l)throw l.error}}var S=g.filter(function(e){return!b.some(function(t){return t.id===e.id})});try{for(var O=r.h(S),I=O.next();!I.done;I=O.next()){var x=I.value;i.unlink(n,d,v,x.id,s)}}catch(e){p={error:e}}finally{try{I&&!I.done&&(m=O.return)&&m.call(O)}finally{if(p)throw p.error}}var D=y.filter(function(e){return g.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var j=r.h(D),N=j.next();!N.done;N=j.next()){var R,U=N.value;delete(R=r.a({},U.doc)).$meta,i.put(v,R),u[s]||(u[s]={}),u[s][U.idx]={$set:R}}}catch(e){h={error:e}}finally{try{N&&!N.done&&(f=j.return)&&f.call(j)}finally{if(h)throw h.error}}};try{for(var m=r.h(Object.keys(a)),h=m.next();!h.done;h=m.next()){p(h.value)}}catch(e){s={error:e}}finally{try{h&&!h.done&&(c=m.return)&&c.call(m)}finally{if(s)throw s.error}}return l()(t,u)}function m(e){return i()(e).format("YYMMDD HH:mm")}function h(e){return i()(e).format("YYMMDD")}function f(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function v(e,t,n){return l()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function g(e,t,n){return l()(t,{createdDate:{$set:e},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function b(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function y(e,t){var n=Date.now();return(e=v(n,e,t)).createdBy||(e=g(n,e,t)),e}function k(e,t,n){var a,i,o=r.a({},e),s=t[e.id];s&&(o.$etag=s);try{for(var l=r.h(n),c=l.next();!c.done;c=l.next()){var u=c.value,d=e[u].map(function(e){return k(e,t,[])});o[u]=d}}catch(e){a={error:e}}finally{try{c&&!c.done&&(i=l.return)&&i.call(l)}finally{if(a)throw a.error}}return o}function E(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return E(0,function(t){return t.readAsText(e)})}function T(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function C(e){var t=u()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function S(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,o,s,l,c;return r.d(this,function(u){switch(u.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,i=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),i&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return o=r.f.apply(void 0,[u.sent(),3]),s=o[0],l=o[1],c=o[2],s.tasks=l,s.abilities&&s.abilitiesOrder&&(s.abilities=s.abilitiesOrder.map(function(e){return s.abilities.find(function(t){return t.id===e})})),s.knowledgeRequirements&&s.knowledgeRequirementsOrder&&(s.knowledgeRequirements=s.knowledgeRequirementsOrder.map(function(e){return s.knowledgeRequirements.find(function(t){return t.id===e})})),s.centralContent&&s.centralContentOrder&&(s.centralContent=s.centralContentOrder.map(function(e){return s.centralContent.find(function(t){return t.id===e})})),a&&(s.templateChain=c),[2,s]}})})}},function(e,t,n){"use strict";var r=n(4),a=n(15),i=n(29),o=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new i.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var i=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),e}).catch(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,i,o){return r.b(this,void 0,void 0,function(){var s,l,c,u,d,p,m,h,f,v,g;return r.d(this,function(b){switch(b.label){case 0:return o&&"no-cache"===o.cache&&(i=r.a({},i,{nocache:Object(a.c)()})),s=i&&Object.keys(i).filter(function(e){return void 0!==i[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(i[e])}).join("&"),c=(l=this).authHeader,u=l.tokenInfo,d=l.bearerProvider,c||u||!d?[3,2]:(p=this,[4,d.getBearer()]);case 1:p.tokenInfo=u=b.sent(),b.label=2;case 2:return u?u.expires<Date.now()?(console.log("Token expired. Refresh it:"),m=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:m.tokenInfo=u=b.sent(),b.label=4;case 4:c="Bearer "+u.token,b.label=5;case 5:return c&&(n.Authorization=c),h=this.baseUrl+e+(s?"?"+s:""),[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 6:return 401==(f=b.sent()).status&&this.bearerProvider?(v=f.headers.get("www-authenticate"),console.log("Got "+f.status+" from "+(this.baseUrl+e)),v&&/Bearer/i.test(v)?(g=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return g.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 8:f=b.sent(),b.label=9;case 9:return[2,f]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),s=function(){function e(e,t,n,r,i,s,l){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=i,this.tokenUrl=s,this.tokenQuery=l,this.tokenInfo={token:null,expires:0},this.client=new o(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),l=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),i=n[2];if("R"!==i&&"W"!==i&&"S"!==i)throw new Error("Invalid access string: "+t);return new e(r,a,i)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var u=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return p}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return s}),n.d(t,"b",function(){return l}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return o}),n.d(t,"c",function(){return u});var d=function(){function e(e,t,n){this.http=new o(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var i,o,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(i=r.sent()).status?[3,3]:(o=u.bind,s=[void 0,i.status],[4,i.text()]);case 2:throw new(o.apply(u,s.concat([r.sent()])));case 3:return[4,i.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,o,s;return r.d(this,function(l){switch(l.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(i=l.sent()).status?[3,3]:(o=u.bind,s=[void 0,i.status],[4,i.text()]);case 2:throw new(o.apply(u,s.concat([l.sent()])));case 3:return[4,i.json()];case 4:return[2,l.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new p,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=u.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(u,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(i){return i.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(i){return i.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(i){return i.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(i){return i.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(i){return i.undoLink(e,t,r,n,a)})},e}(),p=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},,function(e,t,n){"use strict";var r=n(4),a=n(18),i=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),o=n(15);function s(e){e.resources||(e.resources=[])}function l(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return s(e)})}})}(e,n);break;case"tasks":s(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var u=JSON.parse(c),d=u.time,p=u.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=p)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return l(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return l(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var m=new i,h=Date.now(),f=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(o.a)(this.getBearer.bind(this)),this.refreshBearer=Object(o.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,m.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-h>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return i=this,o=this.tokenResponseMapper,[4,e.text()];case 4:return i.tokenInfo=o.apply(this,[r.sent()]),m.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),v={fetch:fetch.bind(self),btoa:btoa.bind(self)},g=function(e){function t(t,n,r){var a="string"!=typeof n?n:new f(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,v,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return m}),n.d(t,"b",function(){return f}),n.d(t,"c",function(){return v}),n.d(t,"a",function(){return g})},,function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.className,i=t.children,o=t.headerClassName,s=t.contentClassName,l=this.state.headerOpen;return a.createElement("div",{className:(r||"")+" openClose"+(l?" open":"")},a.createElement("div",{className:"openHeader"+(o?" "+o:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},n),a.createElement("div",{className:"openContent"+(s?" "+s:"")},i))},t}(a.Component)},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"b",function(){return o}),n.d(t,"d",function(){return s}),n.d(t,"c",function(){return l}),n.d(t,"a",function(){return c});var r=n(1),a=n(5),i=n.n(a);function o(e){return"AT"===e?[32,51]:[1,25]}function s(e){return e.month()>=6?[i()(new Date(e.year(),7,1)),i()(new Date(e.year(),11,31))]:[i()(new Date(e.year(),0,1)),i()(new Date(e.year(),6,31))]}function l(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},,,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(30).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(4),a=n(31),i=n(41),o=n(34),s=n(46),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,i,o){r=!0,e=a,t=i,i&&n?n(null,i,o):n&&n(a,null,o)});if(r){var i=s.a.current;if(!i)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var o=i.subscriptions,l=i.observer;return o.push(a),n=l,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new o.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,i=[null,null],o={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),i[0]=e,null!==i[1]&&t(i,null,o)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),i[1]=e,null!==i[0]&&t(i,null,o)}),o})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,i={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,o,s){if(a=s,r&&(r.unsubscribe(),r=null),o)t(null,o,i);else try{var l=e(n);l&&"function"==typeof l.subscribe?r=l.subscribe(function(e,n,a){r=a,t(e,n,i)}):t(l,null,a)}catch(o){t(null,o,a)}}),i})},t}(a.a);l.prototype.map=Object(i.a)(l)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},,function(e,t,n){"use strict";var r=n(38);n.d(t,"a",function(){return r.b}),n.d(t,"b",function(){return r.c})},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(4),a=n(31),i=n(41),o=n(30),s=n(29),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new s.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new o.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);l.prototype._map=Object(i.a)(l)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r,a=n(1),i=n(0),o=n(2),s=function(e){var t=e.onClick,n=e.className,s=e.style,l=e.title;return i.createElement("div",{title:l||Object(o.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:s})}},,,function(e,t,n){"use strict";n(31),n(30);var r=n(34);n.d(t,"a",function(){return r.a});var a=n(29);n.d(t,"b",function(){return a.a});var i=n(46);n.d(t,"c",function(){return i.a})},function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(6),i=n(5),o=n.n(i),s=n(25);var l=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),c=n(2),u=n(50),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return m}),n.d(t,"a",function(){return h});var p,m=function(){function e(t,n,i,o){var s=this;this.http=new a.f(t,n,{bearerProvider:i}),this.userEmailGetter=o;var l=function(e){return"function"==typeof s[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){l(e)&&(s[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(s[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,i=Object.create(e),o={},s=e;s&&s!==Object.prototype;s=Object.getPrototypeOf(s))l(s);function l(t){Object.keys(t).forEach(function(s){!i.hasOwnProperty(s)&&n(s)&&(i[s]=function(){for(var n=[],i=0;i<arguments.length;i++)n[i]=arguments[i];var l=JSON.stringify(r.g([s],n)),c=o[l];if(void 0!==c){if(c.promise)throw c.promise;if(c.error)throw c.error;if(c.timeout>Date.now())return c.value}try{var u=t[s].apply(e,n).then(function(e){o[l]={timeout:Date.now()+a,value:e}}).catch(function(e){o[l]={timeout:Date.now()+a,error:e}});throw o[l]={timeout:Date.now()+a,promise:u},u}catch(e){if(e.then)throw e;o[l]={timeout:Date.now()+a,error:e}}})})}return i}(this,{isApiMethod:l})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,i,o,s;return r.d(this,function(l){switch(l.label){case 0:return l.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=l.sent()).status?[3,3]:(i=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(i.apply(a.c,o.concat([l.sent()])));case 3:return[4,n.json()];case 4:return[2,l.sent().courses];case 5:throw s=l.sent(),console.error("Error from EDS: "+s),new Error(Object(c.a)(p||(p=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,i,o;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(i=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(i.apply(a.c,o.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,i;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,i=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,i.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,s,l,c,d,p,m,h,f,v;return r.d(this,function(r){switch(e){case"en_sin":return[2,u.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,u.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=t.getMonth()>=6,i=a?t.getFullYear():t.getFullYear()-1,s=a?t.getFullYear()+1:t.getFullYear(),l=o()(i.toString(),"YYYY"),c=o()(s.toString(),"YYYY"),1!=l.week()&&(l=l.clone().add(1,"week")),1!=c.week()&&(c=c.clone().add(1,"week")),d=o()(l.clone()).week(32).startOf("week"),p=o()(l.clone()).week(51).endOf("week"),m=o()(c.clone()),h=o()(c.clone()).week(25).endOf("week"),f={startDate:new Date(i,d.month(),d.date()).toDateString(),endDate:new Date(i,p.month(),p.date()).toDateString()},v={startDate:new Date(s,m.month(),m.date()).toDateString(),endDate:new Date(s,h.month(),h.date()).toDateString()},[2,{firstTerm:f,secondTerm:v,holidays:n}]}return[2]})})},e}(),h=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new l(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new l({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},function(e,t,n){"use strict";n.d(t,"b",function(){return p}),n.d(t,"a",function(){return k});var r=n(1),a=n(0),i=n(138),o=n(17),s=n(2),l=n(6),c=n(3),u=[{name:"schools",text:Object(s.a)(m||(m=r.e(["Skolor"],["Skolor"]))),route:"/schools"},{name:"subjects",text:Object(s.a)(h||(h=r.e(["Ämnen"],["Ämnen"]))),route:"/subjects"}],d=[{name:"courseBuilder",text:Object(s.a)(f||(f=r.e(["Kursbyggaren"],["Kursbyggaren"]))),route:"/courses/new"},{name:"studentPage",text:Object(s.a)(v||(v=r.e(["Elevsida"],["Elevsida"]))),route:""},{name:"feedback",text:a.createElement("span",null,a.createElement("i",{className:"fa fa-commenting-o","aria-hidden":"true"})," Feedback"),route:"https://kg.kunskapsporten.se/kursbyggaren/"}];function p(e,t,n,r){var a=Object(l.h)();n.update({imageId:{$set:a},images:{$set:[{id:a,url:r,acl:["role:USER:R","schoolRole:"+c.a.currentUser.school+"/EMPLOYEE:S"],$meta:"add"}]}})}var m,h,f,v,g,b,y,k=function(e){var t=e.title,n=(e.isTemplate,e.host),l=e.course,m=(e.origCourse,e.backgroundImage),h=e.activePage,f=c.a.currentUser.roles.some(function(e){return"ADMIN"===e}),v=d;return f&&(v=u.concat(v)),a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},m&&a.createElement("style",null,"\n        .pageHeader {\n          background-image: url('"+m+"') !important;\n        }\n      "),a.createElement("div",{className:"pageHeader",onDragOver:l&&o.a,onDrop:l&&function(e){return function(e,t,n,a){return r.b(this,void 0,void 0,function(){var n,a,i,o,l,u,d,m;return r.d(this,function(h){switch(h.label){case 0:return e.stopPropagation(),e.preventDefault(),n=e.dataTransfer.files,a=null,i=Array.from(e.dataTransfer.items),n.length>0?(o=n[0]).size>2097152?(Object(s.n)(Object(s.a)(g||(g=r.e(["Kan inte ladda upp bilder större än 2 MB"],["Kan inte ladda upp bilder större än 2 MB"])))),[2]):((l=new FormData).append("files",o),[4,c.a.kedBackendClient.http.fetch("web-upload","put",{},{},{body:l})]):[3,3];case 1:return 200!==(u=h.sent()).status?(Object(s.n)(Object(s.a)(b||(b=r.e(["Kunde inte ladda upp filen till Google Storage"],["Kunde inte ladda upp filen till Google Storage"])))),[2]):[4,u.text()];case 2:return a=h.sent(),[3,7];case 3:d=function(e){var t;return r.d(this,function(n){switch(n.label){case 0:return(t=i[e]).type.match("^text/uri-list")?[4,new Promise(function(e){return t.getAsString(e)})]:[3,2];case 1:a=n.sent(),n.label=2;case 2:return[2]}})},m=0,h.label=4;case 4:return m<i.length?[5,d(m)]:[3,7];case 5:h.sent(),h.label=6;case 6:return++m,[3,4];case 7:return null==a?(Object(s.n)(Object(s.a)(y||(y=r.e(["Kunde inte hitta någon bild i innehållet"],["Kunde inte hitta någon bild i innehållet"])))),[2]):(p(0,0,t,a),[2])}})})}(e,n)}},a.createElement("a",null,a.createElement("h1",null,t)),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement("div",{className:"align-horizontal"}),a.createElement("div",{className:"horizontalMenu"},a.createElement("ul",null,v.map(function(t){return{item:t,isActive:h===t.name,callback:e.callbacks&&e.callbacks[t.name],givenRoute:e.routes&&e.routes[t.name],defaultRoute:t.route}}).filter(function(e){return e.callback||e.defaultRoute||e.givenRoute}).map(function(e){var t=e.item,n=e.isActive,r=e.callback,o=e.defaultRoute,s=e.givenRoute;return a.createElement("li",{key:t.name,className:n?"activePage":"",onClick:r},r?a.createElement("a",null,t.text):o||s?s||/^http[s]\:\/\//i.test(o)?a.createElement("a",{href:s||o},t.text):a.createElement(i.a,{to:o},t.text):a.createElement("a",null,t.text))})))))))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return l});var r=n(1),a=n(33),i=n(10),o=n(2);function s(e,t,n){var r=(void 0===n?{appendLeftovers:!1}:n).appendLeftovers,a={};if(!e||!t)return e;var i=e&&t?t.map(function(t){return a[t]=!0,e.find(function(e){return e.id===t})}).filter(function(e){return!!e}):e;if(r){var o=e.filter(function(e){return!a[e.id]});return i.concat(o)}return i}function l(e,t){var n,l;if(t)l=new a.a([t]);else{var c=e.tags.filter(function(e){return e.startsWith("course:")});if(0===c.length)return new a.a(e);l=(n=i.c.courses).tags.apply(n,r.g(c)).toValue()}return l.map(function(t){var n=Object(o.k)(t.map(function(e){return e.abilitiesOrder||[]})),r=Object(o.k)(t.map(function(e){return e.centralContentOrder||[]})),a=Object(o.k)(t.map(function(e){return e.knowledgeRequirementsOrder||[]})),i=Object.assign({},e);return i.abilities&&(i.abilities=s(e.abilities,n)),i.centralContent&&(i.centralContent=s(e.centralContent,r)),i.knowledgeRequirements&&(i.knowledgeRequirements=s(e.knowledgeRequirements,a)),i})}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=null,a=[function(){return r}];var i={get current(){return r},addProvider:function(e){a.push(e),o()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),o()}};function o(){Object.defineProperty(i,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},,,function(e,t,n){"use strict";var r=n(12);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Vågrät linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga länk",result:function(){var e=window.prompt("Ange länkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,i=window.prompt((void 0).promptMsg);if(i){var o=document.createElement("img");o.src=i,o.tabIndex=1,n=o,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),o.onfocus=t.onFocus,o.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(12),o=new DOMParser,s={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function l(e){for(var t=o.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)c(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function c(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&s[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),u(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),i=a.name&&!!t[a.name.toLowerCase()];i||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),u(e)&&(t=!0),t}function u(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)c(n.item(r))&&(t=!0);return t}var d=n(68);n.d(t,"a",function(){return b});var p="wysiwyg-actionbar",m="wysiwyg-button",h="wysiwyg-content",f="wysiwyg-focusrect",v="wysiwyg-focuspoint",g="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||l(e.html)!==l(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(l(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:y(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(v)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),i=a.next();!i.done;i=a.next()){switch(i.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,o=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(o=o.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta vänster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta höger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden på egen rad",result:function(){return e("unfloat")}}])));var s=this.state.focusRect,c=this.props,u=c.readOnly,b=c.reportNumChars,y=c.maxChars;return a.createElement("div",{className:this.props.className},!u&&a.createElement("div",{className:p},o.map(function(e,n){return a.createElement("button",{key:n,className:m,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:u?g:h,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:l(this.props.html)},contentEditable:!u,onPaste:function(e){if(!isNaN(y)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>y&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:NaN)}:null,onKeyPress:isNaN(y)?null:function(e){var t=e.target.innerText;t&&t.length>=y&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){u||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(i.a)("outdent"):Object(i.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),s&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:f,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:v+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:v+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:v+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:v+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function y(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},function(e,t,n){"use strict";n.d(t,"e",function(){return u}),n.d(t,"b",function(){return d}),n.d(t,"a",function(){return p}),n.d(t,"f",function(){return m}),n.d(t,"d",function(){return h}),n.d(t,"c",function(){return f});var r,a,i,o,s=n(1),l=n(2),c=n(17);function u(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function d(e){return p([e],e.tasks)}function p(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function m(e){return Object(l.k)([function(e){var t={};return Object(l.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(l.a)(r||(r=s.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(l.a)(a||(a=s.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(l.a)(i||(i=s.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(l.a)(o||(o=s.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function h(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}function f(e){return e.responsibleTeachers.map(function(e){return{name:e.name,email:Object(c.d)(e),access:e.access||"edit"}})}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(23),o=n(2),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,s=t.markedIds,l=t.markMode,c=t.migratedIds,u=t.uncoveredIds,d=Object(o.b)(n,function(e){return e.group||"default"}),p=Object.keys(d);return a.createElement(i.a,{title:a.createElement("p",null,r),className:"larger"},p.map(function(t){return a.createElement(a.Fragment,{key:t},1===p.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=s.some(function(e){return e===t.id}),r=c&&!!c[t.id],i=u&&u[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return l&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(l?" selectable":"")+(n?" markedGreen":i?" markedRed":"")+(r?" migrated":""),title:r?l?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(10),o=n(35),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>1&&(n=n.slice(1)),{infos:[e]})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),i.c.writer.onError(this._dbWriterError),i.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),i.c.writer.off(this._dbWriterError),i.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,i=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!i}).map(function(t){var n=t.message,r=t.details,i=t.retryable,s=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(o.a,{onClick:function(){return e.removeError(n)}})),r||i?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},s?"Dölj detailer":"Visa detailjer")," "):void 0,s?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),i?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){i.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";var r=n(16),a=n(3),i=function(){return function(){a.a.currentUser,(Object(r.b)(location.search,{toLower:!0}).features||"").split(",").map(function(e){return e.toLowerCase()})}}();n.d(t,"a",function(){return i})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r,a=n(1),i=n(0),o=n(2),s=function(e){function t(t){return e.call(this,t)||this}return a.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.knowledgeRequirements,n=e.markedIds,s=e.migratedIds,l=e.explainedRequirements,c=this.props,u=c.idsToMarkNotOk,d=c.markMode,p=c.onMarkChanged,m=c.onExplainedRequirementsChanged,h=["E","C","A"],f=[],v=t.slice(),g=null;!(g=h.map(function(e){var t=v.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=v[t];return v.splice(t,1),n})).every(function(e){return null===e});)f.push(g);return i.createElement("div",null,i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,h.map(function(e){return i.createElement("th",{key:e},e)}))),i.createElement("tbody",null,f.map(function(e,t){return i.createElement(i.Fragment,{key:t},i.createElement("tr",null,e.map(function(e,t){var r=e&&n&&n.indexOf(e.id)>=0,a=e&&u&&u[e.id],o=e&&s&&!!s[e.id];return i.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:e?e.name:""},className:(d?"selectable":"")+(o?" migrated":"")+(r?" markedGreen":a?" markedRed":""),onClick:d&&e?function(){return p(e.id,!r)}:void 0,title:o?d?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0})})),l&&i.createElement("tr",null,e.map(function(e,t){var s=e&&n&&n.indexOf(e.id)>=0;return i.createElement("td",{key:t},s?i.createElement("textarea",{placeholder:Object(o.a)(r||(r=a.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!d,value:l[e.id]||"",onChange:m&&function(t){return m(e.id,t.target.value)}}):void 0)})))}))))},t}(i.Component)},function(e,t,n){"use strict";var r=n(12);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(r.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt((void 0).promptMsg);e&&Object(r.a)("insertImage",e)}}}},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(3),i=function(){function e(e){this.googleTokenProvider=a.a.googleTokenProvider,this.options=e||{upload:!1,multiple:!1}}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:n.sent(),n.label=2;case 2:return e="421572262269-u68v5lf5o8ss5t68l8gkq3pfarh6dbkv.apps.googleusercontent.com",[4,new Promise(function(n,r){gapi.load("client:auth2",function(){return gapi.auth2.authorize({client_id:e,scope:"https://www.googleapis.com/auth/drive",response_type:"id_token permission",prompt:"none"},function(a){if(a.error)return gapi.auth2.authorize({client_id:e,scope:"https://www.googleapis.com/auth/drive",response_type:"id_token permission",prompt:"consent"},function(e){e.error?r("Picker: No access token"):(t.authToken=e.access_token,n())});t.authToken=a.access_token,n()})})})];case 3:return n.sent(),"undefined"!=typeof google&&void 0!==google.picker?[3,5]:[4,new Promise(function(e){gapi.load("picker",function(){e()})})];case 4:n.sent(),n.label=5;case 5:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e.prototype.show=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,new Promise(function(t,n){var r=(new google.picker.PickerBuilder).addView((new google.picker.DocsView).setOwnedByMe(!0).setIncludeFolders(!0)).setLocale("sv").setSize(1051,650).setOAuthToken(e.authToken).setCallback(function(r){if(r.action==google.picker.Action.CANCEL)n();else if(r.action==google.picker.Action.PICKED){var a=[];r.docs.forEach(function(t){var n=t.id,r=t.mimeType,i=t.name,o=t.modifiedTime,s=t.iconUrl,l=t.url,c=r.includes("google-apps");a.push({fileId:n,mimeType:r,name:i,modifiedTime:o,canExport:c,iconUrl:s,url:l}),e.updatePermissions(n)}),console.log(a),t(a)}});e.options.upload&&r.addView((new google.picker.DocsUploadView).setIncludeFolders(!0)),e.options.multiple&&r.enableFeature(google.picker.Feature.MULTISELECT_ENABLED),e.picker=r.build(),e.picker.setVisible(!0)})]}})})},e.prototype.updatePermissions=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return t.sent(),gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"reader",type:"domain",domain:"kunskapsskolan.se"}),[2]}})})},e.prototype.downloadFile=function(e){var t=e.file,n=e.limitSize;return r.b(this,void 0,void 0,function(){var e,a=this;return r.d(this,function(r){switch(r.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return r.sent(),t.canExport?[2,new Promise(function(e,n){gapi.client.drive.files.export({fileId:t.fileId,mimeType:"application/pdf"}).then(function(n){for(var r=n.body.length,a=new Uint8Array(new ArrayBuffer(r)),i=0;i<r;i++)a[i]=n.body.charCodeAt(i);var o=new Blob([a],{type:"application/pdf"}),s=t.name+".pdf";e(new File([o],s,{type:"application/pdf",lastModified:t.modifiedTime}))})})]:(e=function(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET","https://www.googleapis.com/drive/v3/files/"+e.fileId+"?alt=media",!0),r.setRequestHeader("Authorization","Bearer "+a.authToken),r.responseType="blob",r.onload=function(){t(new File([r.response],e.name,{type:e.mimeType,lastModified:e.modifiedTime}))},r.send()})},[2,new Promise(function(r,a){void 0!==n?gapi.client.drive.files.get({fileId:t.fileId,fields:"size"}).then(function(e){Number(e.result.size)>1024*n*1024&&a("GooglePickerError: Filsize is too laarge")}).then(function(){e(t).then(function(e){r(e)})}):e(t).then(function(e){r(e)})})])}})})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(0),a=n.n(r),i=function(e){var t=e.size,n=void 0===t?30:t;return a.a.createElement("svg",{width:n,version:"1.1",xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 508.52 508.52",fill:"#ffffff",style:{verticalAlign:"middle",marginRight:"4px"}},a.a.createElement("polygon",{points:"484.492,284.58 339.024,32.577 169.496,32.577 314.996,284.58"}),a.a.createElement("polygon",{points:"145.437,74.276 0,326.279 84.764,473.05 230.169,221.143"}),a.a.createElement("polygon",{points:"234.396,316.363 143.371,475.943 423.756,475.943 508.52,316.36"}))},o=function(e){var t=e.label,n=void 0===t?"Google Drive":t,r=e.action;return a.a.createElement("a",{className:"btn",onClick:r},a.a.createElement(i,{size:16})," ",n)}},,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(7);r.b.ENVIRONMENT="test",r.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",r.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",r.b.KED_TOKEN_URL="",r.b.KED_CLIENT_ID="",r.b.KED_CLIENT_SECRET="",r.b.KED_REALM="SE1",r.b.KED_LOCALE=r.b.KED_LOCALE||"sv",r.b.KED_SCHOOL_LOCALE=r.b.KED_SCHOOL_LOCALE||"sv";var a=n(1),i=n(16),o=n(20),s=n(6),l=n(3),c=n(14),u=n(2);function d(e,t,n){var r=Object(i.b)(t),o=Object(u.e)(r,c.a),s=a.f(Object(i.c)(e),2),l=s[0],d=s[1],p=Object(i.b)(d);return l+Object(i.a)(a.a({},p,o,{scopes:n.join(",")}))}function p(e,t){return e+"/"+t}function m(e,t,n){return new s.e(o.c,o.d,e+t.mail+location.search,r.b.KED_CLIENT_ID,r.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var h,f,v=l.a.currentUser&&l.a.currentUser.mail;if(v)if(r.b.KED_TOKEN_PATH){var g=d(r.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);l.a.bearerProvider=(f=p(h=g,v),new o.b(h,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){l.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,f),{token:t.token,expires:Date.now()+354e4}},f)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(l.a.currentUser=JSON.parse(t))}(p(g,v));var b=d(r.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);l.a.googleTokenProvider=function(e,t){var n=p(e,t);return new o.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,v)}else{if(!(r.b.KED_TOKEN_URL&&r.b.KED_CLIENT_ID&&r.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");l.a.bearerProvider=m(r.b.KED_TOKEN_URL,l.a.currentUser,["kedbackend","EDS"]),l.a.googleTokenProvider=m(r.b.KED_TOKEN_URL+"/google",l.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}l.a.kedBackendClient=new o.a(r.b.KED_API_URL,l.a.bearerProvider);var y=n(42);l.a.edsClient=new y.b(o.c,r.b.EDS_API_URL,l.a.bearerProvider,function(){return l.a.currentUser.mail})},,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return m}),n.d(t,"b",function(){return h});var r,a,i,o=n(1),s=n(0),l=n(43),c=n(2),u=n(3),d=n(6),p=n(138),m=function(e){return s.createElement("div",{style:{outline:0}},s.createElement(l.a,{title:"Skolor",activePage:"schools",callbacks:{schools:function(){return location.hash="#/schools"}},routes:{feedback:e.feedbackUrl}}),s.createElement(h,o.a({},e)))},h=function(e){function t(t){var n=e.call(this,t)||this;return n.state=null,n}return o.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(c.n)(e)})},t.prototype.load=function(){return o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:return this.props.id?(e=this.props.id,[4,u.a.kedBackendClient.get("schools",e)]):[3,2];case 1:return t=n.sent(),this.origSchool=o.a({},t),this.setState(o.a({},t)),[3,3];case 2:this.setState({id:Object(d.h)(),officialBranchId:Object(d.h)(),isGymnasium:"gymnasium"===this.props.type,isPrimarySchool:"primary"===this.props.type}),n.label=3;case 3:return[2]}})})},t.prototype.save=function(){return o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:if(e=new d.a,(t=o.a({},this.state,{tags:(this.state.tags||[]).filter(function(e){return["primary","gymnasium"].indexOf(e)<0})})).isPrimarySchool&&t.tags.push("primary"),t.isGymnasium&&t.tags.push("gymnasium"),!t.isGymnasium&&!t.isPrimarySchool)throw new Error(Object(c.a)(r||(r=o.e(["Skolan måste antingen vara gymnasium eller grundskola"],["Skolan måste antingen vara gymnasium eller grundskola"]))));if(this.origSchool){if(this.origSchool.name!==this.state.name)throw new Error("Skolans namn får inte ändras. Kontakta Vemendo AB.");t.officialBranchId||(t.officialBranchId=Object(d.h)(),this.addSchoolBranch(t,e)),e.put("schools",t)}else t.acl=["role:USER:R"],t.acl.push(new d.b("schoolRole",t.name+"/EMPLOYEE","W").toString()),e.add("schools",t),this.addSchoolBranch(t,e);return[4,u.a.kedBackendClient.batch(e.mutationRequests)];case 1:return n.sent(),location.hash="#/schools",[2]}})})},t.prototype.addSchoolBranch=function(e,t){var n={id:e.officialBranchId,name:e.name,schoolId:e.id,acl:["role:USER:R",new d.b("schoolRole",e.name+"/EMPLOYEE","W").toString()]};t.add("branches",n)},t.prototype.deleteSchool=function(){return o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:return prompt(Object(c.a)(a||(a=o.e(['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'],['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'])),this.state.name))!==this.state.name?[3,3]:[4,u.a.kedBackendClient.list("branches",{ids:[this.state.officialBranchId],include:"approvedChildren",flags:["includeIdsOnly"]})];case 1:return e=n.sent(),(t=new d.a).delete("schools",this.state.id),e[0].approvedChildren.forEach(function(e){var n=e.id;t.delete("branches",n)}),t.delete("branches",this.state.officialBranchId),[4,u.a.kedBackendClient.batch(t.mutationRequests)];case 2:return n.sent(),location.hash="#/schools",[3,4];case 3:alert("Skolan togs inte bort eftersom det namn du angav inte stämmer."),n.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=!!t.id,a=this.state,l=this.origSchool,d=u.a.currentUser.roles.some(function(e){return"ADMIN"===e});return s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},s.createElement("h2",null,n),s.createElement("hr",null),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Namn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:!a||!a.name,disabled:!d||r,tabIndex:1,size:50,value:a?a.name:"",onChange:function(t){return e.setState({name:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Visningsnamn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:a&&!a.displayName,disabled:!d,tabIndex:1,size:50,value:a?a.displayName:"",onChange:function(t){return e.setState({displayName:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),a&&a.isGymnasium?s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"EDS namn (gymnasium):"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNameGymn:"",onChange:function(t){return e.setState({edsSchoolNameGymn:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})):null,a&&a.isPrimarySchool?s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"EDS namn (grundskola):"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNamePrim:"",onChange:function(t){return e.setState({edsSchoolNamePrim:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})):null,s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Typ:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"checkbox",name:"schoolTypePrimary",disabled:!d,checked:a&&a.isPrimarySchool,tabIndex:1,value:"primary",onChange:function(t){return e.setState({isPrimarySchool:t.target.checked})}})," Grundskola"),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"}),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"checkbox",name:"schoolTypeGymnasium",disabled:!d,checked:a&&a.isGymnasium,tabIndex:1,value:"gymnasium",onChange:function(t){return e.setState({isGymnasium:t.target.checked})}})," Gymnasium"),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("br",null),d&&r&&s.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.deleteSchool().catch(c.n)}},"Ta bort skola"),s.createElement("div",{className:"pull-right"}," "),s.createElement(p.a,{className:"btn btn-warning btn-large pull-right",to:"/schools"},"Avbryt"),d&&s.createElement("a",{tabIndex:1,className:"btn btn-large",onClick:function(){l&&l.name!==a.name&&!confirm(Object(c.a)(i||(i=o.e(["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."],["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."]))))||e.save().catch(c.n)}},"Spara")))},t}(s.Component)},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"a",function(){return o});var r=n(2),a=n(44);function i(e){return Object(a.a)(e.tasks,e.taskOrder,{appendLeftovers:!0})}function o(e,t,n,i,o,s){(void 0===s?{appendLeftovers:!1}:s).appendLeftovers;var l=Object(a.a)(e,t,{appendLeftovers:!0}).map(function(e){return e.id}),c="before"===o;return Object(r.k)(l.filter(function(e){return e!==n.id}).map(function(e){return e!==i.id?e:c?[n.id,e]:[e,n.id]}))}},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),i=n(3),o=n(43),s=n(13),l=n(100),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(s.a,null));var e=this.state.subject,t=e.name;e.code,e.courseTemplates,e.schoolType;return a.createElement("div",null,a.createElement(o.a,{title:t,activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),a.createElement(l.a,{id:this.props.id}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(3),o=n(13),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(o.a,null));var e=this.state.subject,t=e.name,n=e.code,r=e.courseTemplates,i=e.schoolType;return a.createElement("div",null,"primary"===i?a.createElement(a.Fragment,null,a.createElement("h2",null,"Grundskoleämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var n=e.id,r=(e.code,e.publishable,e.points,e.schoolGrade);return a.createElement("li",{key:n,className:"complete"},t," för årskurs ",r)}))):a.createElement(a.Fragment,null,a.createElement("h2",null,"Kurser för ämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var t=e.id,n=e.name,r=(e.code,e.publishable,e.points);return a.createElement("li",{key:t,className:"complete"},n," - ",r,"p")}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n.n(a);function o(e){var t=e.taskMetas,n=e.renderEditLink,o=e.renderLink,s=e.onSort,l=r.f(Object(a.useState)({taskBeingDragged:null,taskBeingHovered:null,insertBefore:!1,originClientY:-1}),2),c=l[0],u=l[1],d=c.taskBeingDragged,p=c.taskBeingHovered,m=c.insertBefore,h=c.originClientY;return i.a.createElement("div",{className:"taskContainer sortable",onDrop:function(e){p&&d&&s(d,p,m?"before":"after"),u(r.a({},c,{taskBeingHovered:null,taskBeingDragged:null}))}},t.map(function(e){var t=e.task,a=e.isTaskOwner,s=function(e){return e.migratedTexts&&Object.keys(e.migratedTexts).some(function(t){return Object.keys(e.migratedTexts[t]).length>0})}(t),l=t.id;return i.a.createElement(i.a.Fragment,{key:l},m&&p===t?i.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,i.a.createElement("div",{className:["align-horizontal","draggable",t===d&&"drag-source"].filter(function(e){return e}).join(" "),draggable:!0,onDragStart:function(e){e.dataTransfer.effectAllowed="move",u(r.a({},c,{originClientY:e.clientY,taskBeingDragged:t}))},onDragOver:function(e){d&&(d!==t?(e.preventDefault(),e.dataTransfer.dropEffect="move",u(r.a({},c,{taskBeingHovered:t,insertBefore:h>e.clientY}))):u(r.a({},c,{taskBeingHovered:null})))},onDragEnd:function(e){u(r.a({},c,{taskBeingHovered:null,taskBeingDragged:null}))}},a&&s&&i.a.createElement("div",{className:"horizontalItem top"},i.a.createElement("div",{style:{position:"relative",top:"0.2em",left:"-0.7em"}},i.a.createElement("i",{className:"fa fa-pagelines",style:{position:"absolute",top:0,left:0,color:"#49c35a"}}))),i.a.createElement("div",{className:"horizontalItem top"},n(e)),i.a.createElement("div",{className:"horizontalItem top"},o(e))),m||p!==t?null:i.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=["Lära att lära","Samarbeta","Agera globalt","Visa handlingskraft","Vara innovativ","Leva digitalt"]},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(11),o=n.n(i),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editMode:!1,runtimeStyle:null,text:t.text||""},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){this.props.text!==e.text&&this.setState({text:e.text||""})},t.prototype.render=function(){var e=this,t=this.state.text||"";return a.createElement("div",{className:"renameable-text"+(t?"":" unnamed")+(this.props.readOnly?" disabled":""),tabIndex:this.state.editMode?void 0:0,onFocus:function(t){e.rename()},style:{width:"100%"}},a.createElement("div",{ref:function(t){return e.label=t},style:{display:this.state.editMode?"none":""}},t||this.props.clickAdvertiseText),"textarea"===this.props.tag?a.createElement("textarea",{ref:function(t){return e.input=t},maxLength:this.props.maxChars,style:r.a({},this.state.runtimeStyle,{display:this.state.editMode?"":"none"}),onFocus:function(e){return o()(e.target).select()},onBlur:this.onBlur.bind(this),value:t,onKeyDown:this.onKeyDown.bind(this),onChange:this.onChange.bind(this),tabIndex:this.state.editMode?0:void 0,placeholder:this.props.placeholder}):a.createElement("input",{ref:function(t){return e.input=t},type:"text",maxLength:this.props.maxChars,style:r.a({},this.state.runtimeStyle,{display:this.state.editMode?"":"none"}),onFocus:function(e){return o()(e.target).select()},onBlur:this.onBlur.bind(this),value:t,onKeyDown:this.onKeyDown.bind(this),onChange:this.onChange.bind(this),tabIndex:this.state.editMode?0:void 0,placeholder:this.props.placeholder}))},t.prototype.onKeyDown=function(e){27===e.keyCode?(this.input.value=this.props.text||"",this.input.blur(),e.stopPropagation()):13===e.keyCode&&(this.propagateOnChange(this.input.value),this.setState({editMode:!1,text:this.input.value}))},t.prototype.onBlur=function(e){this.propagateOnChange(this.input.value),this.setState({editMode:!1,text:this.input.value})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t.prototype.onChange=function(e){this.setState({text:this.input.value}),this.props.eager&&this.propagateOnChange(this.input.value)},t.prototype.rename=function(e){var t=this;if(!this.state.editMode&&!this.props.readOnly){e=e||this.state.text||"";var n=o()(this.label);this.setState({text:e,editMode:!0,runtimeStyle:{textAlign:n.css("textAlign"),fontSize:n.css("font-size"),paddingTop:n.css("paddingTop"),paddingBottom:n.css("paddingBottom"),paddingLeft:n.css("paddingLeft"),paddingRight:n.css("paddingRight"),marginTop:n.css("marginTop"),marginBottom:n.css("marginBottom"),marginLeft:n.css("marginLeft"),marginRight:n.css("marginRight"),borderRadius:n.css("borderRadius"),backgroundColor:n.css("backgroundColor"),lineHeight:n.css("lineHeight"),fontWeight:n.css("fontWeight"),outLine:0,borderStyle:"none",height:"100%",width:"100%",boxSizing:"border-box"}},function(){return o()(t.input).focus()})}},t}(a.Component)},function(e,t,n){"use strict";var r,a,i,o=n(1),s=n(0),l=n(43),c=n(3),u=n(2),d=n(138),p=n(14),m=n(13),h=function(e){var t=e.schools,n=e.viewCourseUrl,l=c.a.currentUser.roles.some(function(e){return"ADMIN"===e});return s.createElement("div",{className:"editable-school-list"},s.createElement("div",null,t?s.createElement("table",null,s.createElement("tbody",null,t.map(function(e){return s.createElement("tr",{className:"align-horizontal",key:e.id},s.createElement("td",null,s.createElement(d.a,{className:"editItem",to:"/schools/"+e.id+"/edit"})),s.createElement("td",null,s.createElement("p",null,e.name)),s.createElement("td",null,s.createElement("p",null,s.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(p.b)({role:"EMPLOYEE",school:e.name})}},"Agera som lärare på denna skola"))),s.createElement("td",null,s.createElement("p",null,s.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(p.b)({role:"STUDENT",school:e.name,url:n})}},"Agera som elev på denna skola"))))}))):s.createElement("p",null,s.createElement(m.a,null),"V.g. vänta medan skolor laddas")),s.createElement("br",null),t&&l&&s.createElement(d.a,{to:"/schools/new/"+e.type,className:"btn"},"gymnasium"==e.type?Object(u.a)(r||(r=o.e(["Lägg till gymnasieskola"],["Lägg till gymnasieskola"]))):"primary"==e.type?Object(u.a)(a||(a=o.e(["Lägg till grundskola"],["Lägg till grundskola"]))):Object(u.a)(i||(i=o.e(["Lägg till skola"],["Lägg till skola"])))))};n.d(t,"a",function(){return f}),n.d(t,"b",function(){return v});var f=function(e){return s.createElement("div",{style:{outline:0}},s.createElement(l.a,{title:"Skolor",activePage:"schools",routes:{feedback:e.feedbackUrl}}),s.createElement(v,{viewCourseUrl:e.viewCourseUrl}))},v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schools:null},n}return o.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(u.n)(e.message||e)})},t.prototype.load=function(){return o.b(this,void 0,void 0,function(){var e;return o.d(this,function(t){switch(t.label){case 0:return[4,c.a.kedBackendClient.list("schools")];case 1:return e=t.sent(),this.setState({schools:e}),[2]}})})},t.prototype.render=function(){var e=this.state.schools;return e&&e.sort(Object(u.g)("name")),s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},e?s.createElement(s.Fragment,null,s.createElement("div",null,s.createElement("h2",null,"Gymnasieskolor"),s.createElement(h,{schools:e.filter(function(e){return e.isGymnasium}),viewCourseUrl:this.props.viewCourseUrl,type:"gymnasium"})),s.createElement("div",null,s.createElement("h2",null,"Grundskolor"),s.createElement(h,{schools:e.filter(function(e){return e.isPrimarySchool}),viewCourseUrl:this.props.viewCourseUrl,type:"primary"}))):s.createElement(m.a,null)))},t}(s.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(23),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.task,n=e.course,o=e.updateLink;if(!t.migratedTexts)return a.createElement(a.Fragment,null," ");var s=t.migratedTexts,l=s.abilities,c=s.centralContent,u=s.knowledgeRequirements,d=Object.keys(u||{}).map(function(e){return r.a({},n.knowledgeRequirements.find(function(t){return t.id===e}),u[e])}),p={title:"Uppdaterat kunskapskrav för betyget A",type:"knowledgeRequirements",items:d.filter(function(e){return"A"===e.gradeStep})},m={title:"Uppdaterat Kunskapskrav för betyget C",type:"knowledgeRequirements",items:d.filter(function(e){return"C"===e.gradeStep})},h={title:"Uppdaterat kunskapskrav för betyget E",type:"knowledgeRequirements",items:d.filter(function(e){return"E"===e.gradeStep})},f={title:"Uppdaterade förmågor",type:"abilities",items:Object.keys(l||{}).map(function(e){return r.a({},n.abilities.find(function(t){return t.id===e}),l[e])})},v=[p,m,h,{title:"Uppdaterat centralt innehåll",type:"centralContent",items:Object.keys(c||{}).map(function(e){return r.a({},n.centralContent.find(function(t){return t.id==e}),c[e])})},f].filter(function(e){return e.items.length>0});return 0===v.length?a.createElement(a.Fragment,null," "):a.createElement(i.a,{className:"larger",title:a.createElement("div",null,a.createElement("div",{className:"warningFlag"},a.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),a.createElement("p",null,"Uppdaterade formuleringar från Skolverket"))},v.map(function(e){var t=e.title,n=(e.type,e.items);return a.createElement("div",{key:t},a.createElement("h5",null,t),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{width:"40%"}},"Ursprunglig formulering"),a.createElement("th",{style:{width:"40%"}},"Skolverkets nya formulering"),a.createElement("th",null,"Täcker uppgiften den nya formuleringen?"))),a.createElement("tbody",null,n.map(function(e){return a.createElement("tr",{key:e.id},a.createElement("td",{dangerouslySetInnerHTML:{__html:e.oldText}}),a.createElement("td",{dangerouslySetInnerHTML:{__html:e.name}}),a.createElement("td",null,a.createElement("button",{onClick:function(){return o(e.id,!0)}},"Ja - behåll kopplingen"),a.createElement("button",{onClick:function(){return o(e.id,!1)}},"Nej - ta bort kopplingen")))}))))}))},t}(a.Component)},,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(2),o=n(3),s=n(11),l=n.n(s);function c(e){switch(e.trim()){case"3":case"1-3":return["1-3"];case"6":case"4-6":return["4-6"];case"7-9":case"9":return["7-9"];case"1":case"1s":return["1-3"];case"1-6":return["1-3","4-6"];case"4-9":return["4-6","7-9"];default:throw new Error("Unexpected year in Skolverket XML: "+e+". Expecting 3,6,9 or 1-3, 4-6, 7-9")}}var u=n(6);function d(e,t){var n,a,i=new Set,o=new Map,s=new Set;t.forEach(function(t){if(t=t.trim(),e.has(t))o.set(t,e.get(t));else{var n=Object(u.h)();console.log("New id: "+n+". Text: "+t),o.set(t,n),s.add(n)}});try{for(var l=r.h(e.entries()),c=l.next();!c.done;c=l.next()){var d=r.f(c.value,2),p=d[0],m=d[1];-1===t.indexOf(p)&&i.add(m)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}return{removedIds:i,newTexts:o,idsToAdd:s}}var p=1;var m=new Set("alla allt att av blev bli blir blivit de dem den denna deras dess dessa det detta dig din dina ditt du där då efter ej eller en er era ert ett från för ha hade han hans har henne hennes hon honom hur här i icke ingen inom inte jag ju kan kunde man med mellan men mig min mina mitt mot mycket ni nu när någon något några och om oss på samma sedan sig sin sina sitta själv skulle som så sådan sådana sådant till under upp ut utan vad var vara varför varit varje vars vart vem vi vid vilka vilkas vilken vilket vår våra vårt än är åt över kring".split(" "));function h(e){return new Set(function(e){var t=document.createElement("div");return t.innerHTML=e,""+t.innerText}(e).replace(/[^\w\såäö]/gi,"").toLowerCase().split(/\s/).map(function(e){return e.trim()}).filter(function(e){return!!e}).filter(function(e){return!m.has(e)}))}function f(e,t,n,a,i){var o=new Map;e=e.map(function(e){return r.a({},e,{name:e.name.trim()})}).filter(function(e){return!!e.name});var s=new Map;t.forEach(function(e){return s.set(e.html,e)});var l=new Map;e.forEach(function(e){return l.set(e.name,e)}),e=e.filter(function(e){return!s.has(e.name)}),t=t.filter(function(e){return!l.has(e.html)}),e.forEach(function(e){return o.set(e.id,{gradeStep:e.gradeStep,oldText:e.name,lexemes:h(e.name),matchLevel:0})});for(var c=[];t.length>0;){var u=t[0],d=f(u);if(d){d.newText&&t.push({html:d.newText,gradeStep:d.gradeStep});var m=o.get(d.id);m.newText=u.html,m.matchLevel=d.myMatchLevel,m.newId=n.get(u.html)}else c.push(u);t.shift()}return c.forEach(function(e){o.set("fictiveOldId"+ ++p,{newId:n.get(e.html),newText:e.html,gradeStep:e.gradeStep,matchLevel:0,lexemes:new Set})}),o.forEach(function(e){var t=e.oldText,n=e.newText;t&&n&&r.g(h(t)).join(" ")===r.g(h(n)).join(" ")&&(e.isTypoFix=!0)}),console.log("IdsToMigrate",r.g(o.values()).map(function(e){var t=e.oldText,n=e.lexemes;return r.g(n).join(" ")+": "+t})),o;function f(e){var t=h(e.html);return r.g(o.entries()).filter(function(t){var n=r.f(t,2);n[0];return n[1].gradeStep===e.gradeStep}).map(function(e){var n=r.f(e,2),a=n[0],i=n[1],o=i.gradeStep,s=i.matchLevel,l=i.newText,c=i.lexemes;return{id:a,gradeStep:o,matchLevel:s,newText:l,myMatchLevel:v(t,c)}}).filter(function(e){return e.myMatchLevel>=50&&(!e.matchLevel||e.matchLevel<e.myMatchLevel)}).sort(function(e,t){return t.myMatchLevel-e.myMatchLevel})[0]}function v(e,t){if(0===e.size||0===t.size)return 0;var n=0,r=0;return e.forEach(function(e){t.has(e)&&++n}),t.forEach(function(t){e.has(t)&&++r}),Math.round(100*Math.max(n/e.size,r/t.size))}}function v(e,t,n,a){return r.b(this,void 0,void 0,function(){function s(e,t,r){var i=!Z.has(e.name);Z.add(e.name),K.forEach(function(t,n){var r=t.newId,i=t.oldText;a.push({mutations:function(t){i&&t.unlink2("courses",e.id,"abilities",n),r&&t.link2("courses",e.id,"abilities",r)}})}),e.abilitiesOrder=n.abilities.map(function(e){return P.get(e)});var o=r.ccsToMigrate,s=r.krsToMigrate;o.forEach(function(t,n){var r=t.newId,o=t.newText,s=t.oldText,l=t.isTypoFix;a.push({change:i&&(s?o?l?"Tryckfelsrättning Centralt Innehåll":"Uppdaterat Centralt Innehåll":"Borttaget Centralt Innehåll":"Nytt Centralt Innehåll"),content:"<h4>"+e.name+"</h4><strike>"+(s||"")+"</strike><br/>"+(o||""),mutations:function(t){if(r&&_.has(r)&&!H.has(r)){var a={id:r,name:o,acl:["role:USER:R"],dateTime:Date.now()};t.add("central-content",a),H.add(r)}s&&t.unlink2("courses",e.id,"centralContent",n),r&&t.link2("courses",e.id,"centralContent",r)}})}),e.centralContentOrder=t.centralContent.map(function(e){var t=e.html;return B.get(t)}),s.forEach(function(t,n){var r=t.newId,o=t.newText,s=t.gradeStep,l=t.oldText,c=t.isTypoFix;a.push({change:i&&(l?o?c?"Tryckfelsrättning Kunskapskrav":"Uppdaterat Kunskapskrav":"Borttaget Kunskapskrav":"Nytt Kunskapskrav"),content:"<h4>"+e.name+"</h4><strike>"+(l||"")+"</strike><br/>"+(o||""),mutations:function(t){if(r&&F.has(r)&&!H.has(r)){var a={id:r,name:o,gradeStep:s,acl:["role:USER:R"],dateTime:Date.now()};console.log("Adding Knowledge-Requirement "+r+": "+o),t.add("knowledge-requirements",a),H.add(r)}l&&t.unlink2("courses",e.id,"knowledgeRequirements",n),r&&t.link2("courses",e.id,"knowledgeRequirements",r)}})}),e.knowledgeRequirementsOrder=t.knowledgeRequirements.map(function(e){return z.get(e.html)}),(K.size>0||o.size>0||s.size>0)&&a.push({change:e.isTemplate?"Uppdaterad Kursmall":"Uppdaterad Kursinstans",content:e.isTemplate?""+e.name:e.name+". Skola: "+(e.school||"ej angiven")+". Beskrivning: "+(e.description||""),mutations:function(t){return t.put("courses",e)}})}function l(){return r.b(this,void 0,void 0,function(){function e(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return 0===e.length?[2,[]]:(new Map,console.log("Number of ids: "+e.length),[4,o.a.kedBackendClient.list("tasks",r.a({},t,{hasEdgesTo:e}))]);case 1:return[2,n.sent()]}})})}var t,n,s,l,c,u,d,p,m;return r.d(this,function(o){switch(o.label){case 0:return s=r.g(K.keys(),Object(i.k)($.map(function(e){return r.g(e.ccsToMigrate.keys(),e.krsToMigrate.keys())}))).filter(function(e){return!e.startsWith("fictiveOldId")}),l=Date.now(),[4,e(s,{include:["abilities","knowledgeRequirements","centralContent"],flags:["includeIdsOnly"]})];case 1:c=o.sent(),u=function(e){var t,n,i,o,s,c,u,d,p=e.migratedTexts||{abilities:{},centralContent:{},knowledgeRequirements:{}};e.migratedTexts={abilities:{},centralContent:{},knowledgeRequirements:{}};var m=[],h=[],f=function(t){var n=K.get(t);if(n){var r=n.newId,a=n.newText,i=n.isTypoFix,o=n.oldText,s=t;p.abilities[t]&&(o=p.abilities[t].oldText,s=p.abilities[t].oldId),r&&o!==a&&(i||(e.migratedTexts.abilities[r]={oldId:s,oldText:o,importDate:l})),m.push(function(n){n.unlink2("tasks",e.id,"abilities",t),r&&n.link2("tasks",e.id,"abilities",r)}),h.push("<strike>"+o+"</strike>"),r&&h.push(a)}};try{for(var v=r.h(e.abilities),g=v.next();!g.done;g=v.next()){f(g.value.id)}}catch(e){t={error:e}}finally{try{g&&!g.done&&(n=v.return)&&n.call(v)}finally{if(t)throw t.error}}var b=new Set(e.tags?e.tags.filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)}):[]),y=new Set;try{for(var k=r.h($),E=k.next();!E.done;E=k.next()){var w=E.value,T=w.krsToMigrate,C=w.ccsToMigrate,S=w.courseCode;if(0===b.size||b.has(S)){var O=function(t){var n=C.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,o=n.isTypoFix,s=t;p.centralContent[t]&&(i=p.centralContent[t].oldText,s=p.centralContent[t].oldId),r&&i!==a&&(o||(e.migratedTexts.centralContent[r]={oldId:s,oldText:i,importDate:l})),r&&y.has(r)||(m.push(function(n){n.unlink2("tasks",e.id,"centralContent",t),r&&n.link2("tasks",e.id,"centralContent",r)}),h.push("<strike>"+i+"</strike>"),r&&(h.push(a),y.add(r)))}};try{for(var I=r.h(e.centralContent),x=I.next();!x.done;x=I.next()){O(x.value.id)}}catch(e){s={error:e}}finally{try{x&&!x.done&&(c=I.return)&&c.call(I)}finally{if(s)throw s.error}}var D=function(t){var n=T.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,o=n.isTypoFix,s=t;p.knowledgeRequirements[t]&&(i=p.knowledgeRequirements[t].oldText,s=p.knowledgeRequirements[t].oldId),r&&i!==a&&(o||(e.migratedTexts.knowledgeRequirements[r]={oldId:s,oldText:i,importDate:l})),r&&y.has(r)||(m.push(function(n){n.unlink2("tasks",e.id,"knowledgeRequirements",t),r&&n.link2("tasks",e.id,"knowledgeRequirements",r)}),h.push("<strike>"+i+"</strike>"),r&&(h.push(a),y.add(r)))}};try{for(var j=r.h(e.knowledgeRequirements),N=j.next();!N.done;N=j.next()){D(N.value.id)}}catch(e){u={error:e}}finally{try{N&&!N.done&&(d=j.return)&&d.call(j)}finally{if(u)throw u.error}}}}}catch(e){i={error:e}}finally{try{E&&!E.done&&(o=k.return)&&o.call(k)}finally{if(i)throw i.error}}a.push({change:"Migrerad Uppgift",content:"<h4>"+e.name+" "+(e.school?"("+e.school+") ":"(skola ej angiven)")+"</h4>\n          <p>Kurskod: "+r.g(b).join(",")+"</p>\n          "+h.map(function(e){return"<p>"+e+"</p>"}).join(""),mutations:function(t){t.put("tasks",e),m.forEach(function(e){return e(t)})}})};try{for(d=r.h(c),p=d.next();!p.done;p=d.next())m=p.value,u(m)}catch(e){t={error:e}}finally{try{p&&!p.done&&(n=d.return)&&n.call(d)}finally{if(t)throw t.error}}return[2]}})})}var c,u,p,m,h,v,g,b,y,k,E,w,T,C,S,O,I,x,D,j,N,R,U,M,P,A,L,B,_,q,z,F,K,$,H,Z,Y,Q,V,G,W,J;return r.d(this,function(o){switch(o.label){case 0:E=new Map,w=e.abilitiesOrder?e.abilitiesOrder.map(function(t){return e.abilities.find(function(e){return e.id===t})}):e.abilities;try{for(T=r.h(w),C=T.next();!C.done;C=T.next())S=C.value,E.set(S.name.trim(),S.id)}catch(e){c={error:e}}finally{try{C&&!C.done&&(u=T.return)&&u.call(T)}finally{if(c)throw c.error}}try{for(O=r.h(t),I=O.next();!I.done;I=O.next()){W=I.value.template;try{for(x=r.h(W.centralContent),D=x.next();!D.done;D=x.next())j=D.value,E.set(j.name.trim(),j.id)}catch(e){h={error:e}}finally{try{D&&!D.done&&(v=x.return)&&v.call(x)}finally{if(h)throw h.error}}try{for(N=r.h(W.knowledgeRequirements),R=N.next();!R.done;R=N.next())U=R.value,E.set(U.name.trim(),U.id)}catch(e){g={error:e}}finally{try{R&&!R.done&&(b=N.return)&&b.call(N)}finally{if(g)throw g.error}}}}catch(e){p={error:e}}finally{try{I&&!I.done&&(m=O.return)&&m.call(O)}finally{if(p)throw p.error}}M=d(E,n.abilities),P=M.newTexts,A=M.idsToAdd,L=d(E,Object(i.k)(n.courses.map(function(e){return e.centralContent.map(function(e){return e.html})}))),B=L.newTexts,_=L.idsToAdd,q=d(E,Object(i.k)(n.courses.map(function(e){return e.knowledgeRequirements.map(function(e){return e.html})}))),z=q.newTexts,F=q.idsToAdd,console.log("Abilities to add: "+A.size),console.log("CCs to add: "+_.size),console.log("KRs to add: "+F.size),K=f(w,n.abilities.map(function(e){return{html:e}}),P),$=t.map(function(e,t){var r=e.template;console.log("Course: "+r.name);var a=n.courses.find(function(e){return e.name===r.name})||n.courses.find(function(e){return e.code===r.code});return{courseCode:r.code,ccsToMigrate:a?f(r.centralContent,a.centralContent.map(function(e){return{html:e.html}}),B,0,r.name):new Map,krsToMigrate:a?f(r.knowledgeRequirements,a.knowledgeRequirements,z,0,r.name):new Map}}),K.forEach(function(t,n){var r=t.newText,i=t.newId,o=t.oldText,s=t.isTypoFix;a.push({change:o?r?s?"Tryckfelsrättning Förmåga":"Uppdaterad Förmåga":"Borttagen Förmåga":"Ny Förmåga",content:"<strike>"+(o||"")+"</strike><br/>"+(r||""),mutations:function(t){if(i&&A.has(i)){var a={id:i,name:r,acl:["role:USER:R"],dateTime:Date.now()};t.add("abilities",a)}o&&t.unlink2("subjects",e.id,"abilities",n),i&&t.link2("subjects",e.id,"abilities",i)}})}),(!e.abilitiesOrder||K.size>0)&&(e.abilitiesOrder=n.abilities.map(function(e){return P.get(e)}),a.push({mutations:function(t){return t.put("subjects",e)},change:e.abilitiesOrder?null:"Inför en ordnad lista på förmågor i databasen"})),H=new Set,a.push({mutations:function(){return H.clear()}}),Z=new Set,a.push({mutations:function(){return Z.clear()}}),Y=function(e,t){var a,i,o=n.courses.find(function(t){return t.name===e.name})||n.courses.find(function(t){return t.code===e.code}),l=$.find(function(t){return t.courseCode===e.code}),c=l.ccsToMigrate,u=l.krsToMigrate;try{for(var d=r.h(t),p=d.next();!p.done;p=d.next()){s(p.value,o,{ccsToMigrate:c,krsToMigrate:u})}}catch(e){a={error:e}}finally{try{p&&!p.done&&(i=d.return)&&i.call(d)}finally{if(a)throw a.error}}};try{for(Q=r.h(t),V=Q.next();!V.done;V=Q.next())G=V.value,W=G.template,J=G.instances,Y(W,J)}catch(e){y={error:e}}finally{try{V&&!V.done&&(k=Q.return)&&k.call(Q)}finally{if(y)throw y.error}}return[4,l()];case 1:return o.sent(),[2]}})})}var g=n(17);function b(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,s=this;return r.d(this,function(l){switch(l.label){case 0:return[4,o.a.kedBackendClient.get("subjects",e.id,{include:["courseTemplates","abilities"]})];case 1:return e=l.sent(),[4,Promise.all(e.courseTemplates.map(function(e){return Object(g.e)(e.id,{include:["centralContent","knowledgeRequirements"]})}))];case 2:return a=l.sent(),console.log("Subject: "+e.name+". Courses: "+a.map(function(e){return e.name})),[4,Promise.all(a.map(function(e){return r.b(s,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t={template:e},[4,o.a.kedBackendClient.list("courses",{name:e.name,include:["abilities"],flags:["includeIdsOnly"]})];case 1:return[2,(t.instances=n.sent(),t)]}})})}))];case 3:return i=l.sent(),[4,v(e,i,t,n)];case 4:return l.sent(),[2]}})})}var y,k,E,w=function(e){function t(t){var n=e.call(this,t)||this;return n.coursesElems={},n.centralContentElems=[],n.knowledgeRequirementElems=[],n.state={showFullText:!1,changes:[],isWorking:!0,isImporting:!1},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:this.addClassesForCherryPickedElements(),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,this.diffWithExisting()];case 2:return e=r.sent(),t=e.changes,n=e.subjectToImport,this.setState({changes:t,subjectToImport:n}),[3,5];case 3:return a=r.sent(),this.setState({error:""+a}),[3,5];case 4:return this.setState({isWorking:!1}),[7];case 5:return[2]}})})},t.prototype.addClassesForCherryPickedElements=function(){var e=l()(this.purposeElem).find("li").first().parent().children("li");e.addClass("ability");var t=l()(this.centralContentElems).find("li");t.addClass("central-content");var n=l()(this.knowledgeRequirementElems).find("p");n.addClass("knowledge-requirement"),l()([e,t,n]).addClass("marked-area")},t.prototype.cherryPickData=function(){var e=this,t=this.props.subject,n=Array.from(l()(this.purposeElem).find("li").first().parent().children("li")).map(function(e,t){return(t+1+". "+l()(e).html()).trim()}).filter(function(e){return!!e});return{name:t.name,code:t.code,schoolType:t.schoolType,abilities:n,courses:Object.keys(this.coursesElems).map(function(t){return e.coursesElems[t]}).map(function(e){var t=e.course,n=e.elem;return{name:t.name,year:t.year,code:t.code,points:t.points,centralContent:Array.from(l()(n).find(".central-content")).map(function(e){return{html:l()(e).html().trim(),group:l()(e).parent("ul").prev("h4").text().trim()}}).filter(function(e){return!!e.html}),knowledgeRequirements:Array.from(l()(n).find(".grade-step-none .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:null,html:e}}).concat(Array.from(l()(n).find(".grade-step-E .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"E",html:e}}).concat(Array.from(l()(n).find(".grade-step-C .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"C",html:e}})).concat(Array.from(l()(n).find(".grade-step-A .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"A",html:e}})))}})}},t.prototype.diffWithExisting=function(){return r.b(this,void 0,void 0,function(){function e(){var e=h;return h+=2,e}var t,n,a,i,s,l,c,d,p,m,h,f,v,g,y,k,E,w,T,C,S,O=this;return r.d(this,function(I){switch(I.label){case 0:return s=this.cherryPickData(),l=[],[4,o.a.kedBackendClient.list("subjects")];case 1:return c=I.sent(),d=c.filter(function(e){return e.code===O.props.subject.code})[0],p=[],m=[],h=Date.now(),d?[4,b(d,s,l)]:[3,3];case 2:return I.sent(),[3,4];case 3:f=d={id:Object(u.h)(),schoolType:s.schoolType,tags:["schoolType:"+s.schoolType],acl:["role:USER:R"],code:s.code,name:s.name,abilitiesOrder:[],publishable:!1,dateTime:e()},l.push({change:"Nytt ämne",content:s.name+" ("+s.code+")",mutations:function(e){return e.add("subjects",f)}}),v=[],g=function(t){var n={id:Object(u.h)(),name:t,acl:["role:USER:R"],dateTime:e()};v.push(n),l.push({change:"Ny förmåga",content:t,mutations:function(e){e.add("abilities",n),e.link("subjects",f.id,"abilities",n.id,"abilities")}})};try{for(y=r.h(s.abilities),k=y.next();!k.done;k=y.next())E=k.value,g(E)}catch(e){t={error:e}}finally{try{k&&!k.done&&(n=y.return)&&n.call(y)}finally{if(t)throw t.error}}f.abilitiesOrder=v.map(function(e){return e.id}),w=function(t){var n,a,i,s,c,d,h={id:Object(u.h)(),subjectCode:f.code,schoolType:f.schoolType,tags:["sub:"+f.code,"course:"+t.code,"schoolType:"+f.schoolType],dateTime:e(),isTemplate:!0,acl:["role:EMPLOYEE:R"],name:t.name,code:t.code,points:t.points,modules:[],subjectId:f.id,resources:[],createdBy:{name:o.a.currentUser.displayName,url:"mailto:"+o.a.currentUser.mail},createdDate:Date.now(),knowledgeRequirementsOrder:[],centralContentOrder:[],abilitiesOrder:v.map(function(e){return e.id})};t.year&&(h.schoolGrade=t.year),l.push({change:"Ny kurs",content:t.name,mutations:function(e){e.add("courses",h),e.link("subjects",f.id,"courses",h.id,"courseTemplates")}});var g=function(t,n){var r=p.filter(function(e){return e.name===n})[0];r?l.push({mutations:function(e){e.link("courses",h.id,"central-content",r.id,"centralContent")}}):(r={id:Object(u.h)(),dateTime:e(),name:n,acl:["role:USER:R"]},t&&(r.group=t),p.push(r),l.push({change:"Nytt centralt innehåll",content:"<h4>"+t+"</h4>"+n,mutations:function(e){e.add("central-content",r),e.link("courses",h.id,"central-content",r.id,"centralContent")}})),h.centralContentOrder.push(r.id)};try{for(var b=r.h(t.centralContent),y=b.next();!y.done;y=b.next()){var k=y.value;g(k.group,k.html)}}catch(e){n={error:e}}finally{try{y&&!y.done&&(a=b.return)&&a.call(b)}finally{if(n)throw n.error}}var E=function(t){var n=m.filter(function(e){return e.name===t.html&&e.gradeStep===t.gradeStep})[0];n?l.push({mutations:function(e){e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}}):(n={id:Object(u.h)(),dateTime:e(),name:t.html,gradeStep:t.gradeStep,acl:["role:USER:R"]},m.push(n),l.push({change:"Nytt kunskapskrav för betyget "+t.gradeStep,content:t.html,mutations:function(e){e.add("knowledge-requirements",n),e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}})),h.knowledgeRequirementsOrder.push(n.id)};try{for(var w=r.h(t.knowledgeRequirements),T=w.next();!T.done;T=w.next()){E(T.value)}}catch(e){i={error:e}}finally{try{T&&!T.done&&(s=w.return)&&s.call(w)}finally{if(i)throw i.error}}var C=function(e){l.push({mutations:function(t){t.link("courses",h.id,"abilities",e.id,"abilities")}})};try{for(var S=r.h(v),O=S.next();!O.done;O=S.next()){C(O.value)}}catch(e){c={error:e}}finally{try{O&&!O.done&&(d=S.return)&&d.call(S)}finally{if(c)throw c.error}}};try{for(T=r.h(s.courses),C=T.next();!C.done;C=T.next())S=C.value,w(S)}catch(e){a={error:e}}finally{try{C&&!C.done&&(i=T.return)&&i.call(T)}finally{if(a)throw a.error}}I.label=4;case 4:return[2,{changes:l,subjectToImport:s}]}})})},t.prototype.cancel=function(){this.props.onCancel()},t.prototype.import=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:this.setState({isWorking:!0,isImporting:!0}),e=this.state.changes.map(function(e){return e.mutations}),t.label=1;case 1:return t.trys.push([1,,3,4]),[4,o.a.kedBackendClient.do(function(t){e.forEach(function(e){return e(t)})})];case 2:return t.sent(),[3,4];case 3:return this.setState({isWorking:!1,isImporting:!1}),[7];case 4:return this.props.onImportSuccess(this.props.subject.name),[2]}})})},t.prototype.fixL=function(e){return e},t.prototype.render=function(){var e=this,t=this.state.subjectToImport,n=this.props.subject;return a.createElement("div",null,a.createElement("h1",null,Object(i.a)(y||(y=r.e(["Uppladdat Ämne ",""],["Uppladdat Ämne ",""])),t?t.name:"")),this.state.error?a.createElement("p",null,"Fel: ",this.state.error):this.state.isWorking?a.createElement("p",null,"Arbetar..."):this.state.isImporting?a.createElement("p",null,"Importerar..."):this.state.changes.every(function(e){return!e.change})?a.createElement("div",null,a.createElement("p",null,"Kunde inte finna några förändringar från befintligt data. Klicka OK för att avbryta och återgå."),a.createElement("button",{onClick:function(){return e.cancel()}}," OK ")):a.createElement("div",null,a.createElement("table",{style:{border:"1px solid gray",padding:"2px"}},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{colSpan:2},"Granskning av ändringar i grund-data")),a.createElement("tr",null,a.createElement("th",null,"Ändring"),a.createElement("th",null,"Innehåll"))),a.createElement("tbody",null,this.state.changes.filter(function(e){return e.change}).map(function(e,t){return a.createElement("tr",{key:t},a.createElement("td",{style:{padding:"2px"}},e.change),a.createElement("td",{style:{padding:"2px"},dangerouslySetInnerHTML:{__html:e.content}}))}))),a.createElement("button",{onClick:function(){return e.cancel()},disabled:this.state.isImporting},"Avbryt"),a.createElement("button",{onClick:function(){return e.import()},disabled:this.state.isImporting},"Importera"),a.createElement("br",null)),a.createElement("button",{onClick:function(){return e.setState({showFullText:!e.state.showFullText})}},this.state.showFullText?Object(i.a)(k||(k=r.e(["Dölj nedan"],["Dölj nedan"]))):Object(i.a)(E||(E=r.e(["Visa hela texten från Skolverket"],["Visa hela texten från Skolverket"])))),a.createElement("table",{style:{display:this.state.showFullText?"":"none"}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Namn"),a.createElement("td",null,n.name)),a.createElement("tr",null,a.createElement("th",null,"Ämneskod"),a.createElement("td",null,n.code)),a.createElement("tr",null,a.createElement("th",null,"Syfte"),a.createElement("td",{ref:function(t){return e.purposeElem=t},dangerouslySetInnerHTML:{__html:this.fixL(n.purpose)}})),a.createElement("tr",null,a.createElement("th",null,"Kurser"),a.createElement("td",null,n.courses.map(function(t){return a.createElement("table",{key:t.code,ref:function(n){return e.coursesElems[t.code]={course:t,elem:n}}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Kursens namn"),a.createElement("td",null,t.name)),a.createElement("tr",null,a.createElement("th",null,"Kurskod"),a.createElement("td",null,t.code)),a.createElement("tr",null,a.createElement("th",null,"Poäng"),a.createElement("td",null,t.points)),a.createElement("tr",null,a.createElement("th",null,"Centralt innehåll"),a.createElement("td",{ref:function(t){return e.centralContentElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.centralContent)}})),t.knownledgeRequirements.some(function(e){return!e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav utan betygsättning"),a.createElement("td",{className:"grade-step-none",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return!e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"E"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg E"),a.createElement("td",{className:"grade-step-E",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"E"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"C"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg C"),a.createElement("td",{className:"grade-step-C",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"C"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"A"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg A"),a.createElement("td",{className:"grade-step-A",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"A"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0))}))))))},t}(a.Component),T=(n(98),n(138)),C=n(13);n.d(t,"a",function(){return j});var S,O,I,x,D,j=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,gymnasiumSubjects:[],primarySchoolSubjects:[],uploadedSubject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,o.a.kedBackendClient.list("subjects")];case 1:return(e=r.sent()).sort(Object(i.g)("name")),t=e.filter(function(e){return"primary"!==e.schoolType}),n=e.filter(function(e){return"primary"===e.schoolType}),this.setState({gymnasiumSubjects:t,primarySchoolSubjects:n,isListingSubjects:!1}),[2]}})})},t.prototype.handleFileSelect=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,o,s,u,d,p,m,h,f,v,b,y,k,E,w;return r.d(this,function(T){switch(T.label){case 0:return e.stopPropagation(),e.preventDefault(),t=e.dataTransfer.files,[4,Object(g.f)(t[0])];case 1:if(n=T.sent(),a=l()(l.a.parseXML(n)),o=a.find("subject>originatorTypeOfSchooling").text().trim()||a.find("subject>typeOfSchooling").text().trim(),"gymnasium"===("COMPULSORY_SCHOOL"===o?"primary":"UPPER_SECONDARY_EDUCATION"===o?"gymnasium":null)){for(w={name:a.find("subject>name").text().trim(),code:a.find("subject>code").text().trim(),purpose:a.find("subject>purpose").text().trim(),courses:[],schoolType:"gymnasium"},s=a.find("subject>courses"),u=0;u<s.length;++u)d=l()(s[u]),p=[].slice.call(d.find("knowledgeRequirements")).map(function(e){return{gradeStep:l()(e).find("gradeStep").text().trim(),text:l()(e).find("text").text().trim()}}),w.courses.push({name:d.find("name").text().trim(),code:d.find("code").text().trim(),centralContent:d.find("centralContent").text().trim(),points:parseInt(d.find("point").text().trim()),knownledgeRequirements:p});this.setState({uploadedSubject:w})}else m=Object(i.k)(Array.from(a.find("subject>centralContent")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfCentralContent").text().trim())throw new Error(Object(i.a)(S||(S=r.e(["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim()}})})),h=Object(i.k)(Array.from(a.find("subject>knowledgeRequirement")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfRequirement").text().trim())throw new Error(Object(i.a)(O||(O=r.e(["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim(),gradeStep:l()(e).find("gradeStep").text().trim()}})})),f=Object(i.b)(m,function(e){return e.year}),v=Object(i.b)(h,function(e){return e.year}),b=a.find("subject>name").text().trim(),y=a.find("subject>code").text().trim(),k=a.find("subject>purpose").text().trim(),E=["1-3","4-6","7-9"].map(function(e){return{name:b+" "+e,code:y+"|"+e,points:0,year:e,centralContent:(f[e]||[]).map(function(e){return e.text}).join("\n"),knownledgeRequirements:(v[e]||[]).map(function(e){return{gradeStep:e.gradeStep,text:e.text}})}}),w={name:b,code:y,purpose:k,schoolType:"primary",courses:E},this.setState({uploadedSubject:w});return[2]}})})},t.prototype.onImportSuccess=function(e){Object(i.o)(Object(i.a)(I||(I=r.e(["Importen av "," lyckades"],["Importen av "," lyckades"])),e)),this.setState({uploadedSubject:null}),this.load()},t.prototype.render=function(){var e=this,t=this.props.linkPrefix;return a.createElement("div",null,this.state.uploadedSubject?a.createElement(w,{onCancel:function(){return e.setState({uploadedSubject:null})},onImportSuccess:function(t){return e.onImportSuccess(t)},subject:this.state.uploadedSubject}):this.state.isListingSubjects?a.createElement("div",null,a.createElement("p",null,a.createElement(C.a,null),"Var god vänta medan ämnen hämtas...")):a.createElement("div",null,a.createElement("h2",null,Object(i.a)(x||(x=r.e(["Gymnasieämnen"],["Gymnasieämnen"])))),a.createElement("ul",null,this.state.gymnasiumSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(T.a,{to:t+e.id},e.name))})),a.createElement("h2",null,Object(i.a)(D||(D=r.e(["Grundskoleämnen"],["Grundskoleämnen"])))),a.createElement("ul",null,this.state.primarySchoolSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(T.a,{to:t+e.id},e.name))})),a.createElement("div",{className:"drop-zone",onDragOver:g.a,onDrop:function(t){return e.handleFileSelect(t)}},"Droppa Subject-fil här från skolverket (Hämtas från ",a.createElement("a",{href:"http://opendata.skolverket.se",target:"skolverket"},"opendata.skolverket.se"),")")))},t}(a.Component)},,,,function(e,t,n){var r={"./en-SG":75,"./en-SG.js":75,"./en-au":76,"./en-au.js":76,"./en-ca":77,"./en-ca.js":77,"./en-gb":78,"./en-gb.js":78,"./en-ie":79,"./en-ie.js":79,"./en-il":80,"./en-il.js":80,"./en-nz":81,"./en-nz.js":81,"./sv":82,"./sv.js":82};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=121},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r,a,i,o=n(1),s=n(0),l=n.n(s),c=n(2),u=n(221),d=n(219),p=n(64),m=n(110),h=n(93),f=function(e){return s.createElement(h.a,{title:Object(c.a)(r||(r=o.e(["Lägg till skola"],["Lägg till skola"]))),type:e.type,feedbackUrl:e.feedbackUrl})},v=n(3),g=n(98),b=n(43),y=n(117),k=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,primarySchoolSubjects:[],uploadedSubject:null},n}return o.c(t,e),t.prototype.render=function(){return s.createElement("div",null,s.createElement(b.a,{title:Object(c.a)(a||(a=o.e(["Ämnen"],["Ämnen"]))),activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),s.createElement(y.a,{linkPrefix:"/subjects/"}))},t}(s.Component),E=n(39),w=n(6),T=n(17),C=n(95),S=n.n(C),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state=n.props.resource||{name:"",url:""},n}return o.c(t,e),t.prototype.save=function(){var e=this.state;if(!S.a.isUri(e.url))throw new Error(Object(c.a)(i||(i=o.e(["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"],["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"])),e.url));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.onSave,a=t.onDelete,i=this.state,o=S.a.isUri(this.state.url);return s.createElement("div",null,s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("h2",null,n),s.createElement("hr",null),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Namn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:!0,tabIndex:1,size:50,value:i.name,onChange:function(t){return e.setState({name:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Länk:"),s.createElement("div",{className:"horizontalItem top "},s.createElement("input",{type:"text",tabIndex:1,size:50,value:i.url,onChange:function(t){return e.setState({url:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("br",null)),s.createElement("div",{className:"sv-html-portlet sv-portlet"},(i.createdDate||i.modifiedDate)&&s.createElement("div",null,i.createdDate&&s.createElement("p",null,"Resursen/Länken skapades ",Object(T.c)(i.createdDate)," av ",s.createElement("strong",null,i.createdBy.name),"."),i.modifiedDate&&s.createElement("p",null,"Resursen/Länken redigerades senast ",Object(T.c)(i.modifiedDate)," av ",s.createElement("strong",null,i.modifiedBy.name),"."),s.createElement("br",null),s.createElement("br",null)),a&&s.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return a()}},"Ta bort resurs/länk"),s.createElement("a",{tabIndex:1,className:"btn btn-large"+(o?"":" btn-inactive"),onClick:o&&function(){return r(i)}},"Spara")))},t}(s.Component),I=n(73),x=n(72),D=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return o.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.resources;return s.createElement("div",null,s.createElement("div",{className:"taskContainer"},r.map(function(e,r){return s.createElement("div",{className:"align-horizontal",key:r},s.createElement("div",{className:"horizontalItem top"},s.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:O,props:{title:"Redigera resurs",resource:e,onSave:function(e){var a=Object(T.l)(e,v.a.currentUser);n({$splice:[[r,1,a]]}),t.closeDialog()},onDelete:function(){n({$splice:[[r,1]]}),t.closeDialog()}}})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement("a",{href:e.url,target:"_blank"},e.name)))})),s.createElement("div",{className:"horizontal-align spaced"},s.createElement("div",{className:"horizontaItem top"},s.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:O,props:{title:"Lägg till resurs",onSave:function(e){var r=Object(T.l)(e,v.a.currentUser);n({$push:[r]}),t.closeDialog()}}})}},s.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Lägg till resurs")),s.createElement("div",{className:"horizontaItem top"},s.createElement(I.a,{label:"Lägg till från Drive",action:function(){new x.a({upload:!0,multiple:!0}).show().then(function(e){e.forEach(function(e){var t={url:e.url,name:e.name},r=Object(T.l)(t,v.a.currentUser);n({$push:[r]})})})}}))))},t}(s.Component),j=n(67),N=n(37),R=n.n(N),U=n(14),M=n(57),P=function(){function e(e){this.queryer=e,this.promise=null,this.result=null}return e.prototype.query=function(){var e=this;return this.promise?this.promise:this.promise=this.queryer().then(function(t){return e.result=t})},e.prototype.reset=function(){this.promise=null},e}(),A=n(102),L=n(13),B=n(66);function _(e){var t=e.searchMarkedIds,n=e.searchResult,r=e.task,a=e.editTask;e.writeAccess,e.taskCustomization;return s.createElement("div",{className:"task-search-result"+(a.state.task||a.state.previewTaskContent?"":" fixed")},0===t.length?s.createElement("h2",null,"Samtliga uppgifter för kursen"):s.createElement("h2",null,"Uppgifter som täcker valda filter"),s.createElement("table",null,s.createElement("tbody",null,n.filter(r?function(e){return e.id===r.id}:function(){return!0}).map(function(e){return s.createElement(s.Fragment,{key:e.id},s.createElement("tr",null,s.createElement("td",null,s.createElement("div",{tabIndex:1,className:"checkBox"+(r&&r.id===e.id?" checked":""),onClick:function(){return i(e)}})),s.createElement("td",null,e.content?s.createElement("a",{href:"#",onClick:function(t){i(e),t.preventDefault(),t.stopPropagation()}},e.name):s.createElement("a",{href:e.url,target:"_blank"},e.name)),s.createElement("td",null,Object(T.h)(e.modifiedBy.name)),s.createElement("td",null,e.school||"Standard"),s.createElement("td",null,Object(T.g)(e.modifiedDate))))}))),s.createElement("br",null),s.createElement("hr",null));function i(e){r&&r.id===e.id?a.updateSearchMarkedIds(t):(Object(E.findDOMNode)(a).parentElement.scrollTop=0,a.setStatePromised({task:e,previewTaskContent:null}))}}var q=n(86),z=n(5),F=n.n(z),K=n(115);function $(e){var t=e.task,n=e.course,r=e.writeAccess,a=(e.features,e.editTask);return s.createElement("div",null,s.createElement("h2",null,"Uppgiftens namn och länk"),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"Uppgiftens namn:")),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{autoFocus:!0,type:"text",size:35,value:t.name,disabled:!r,readOnly:!r,onChange:function(e){var n=o.a({},t);n.name=e.target.value,a.setStatePromised({task:n})}}))),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"URL:")),s.createElement("div",{className:"horizontalItem top align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{className:"horizontalItem",type:"text",size:35,value:t.url,disabled:!r,readOnly:!r,onChange:function(e){var n=o.a({},t);n.url=e.target.value,a.setStatePromised({task:n})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement(I.a,{label:"",action:function(){new x.a({upload:!0}).show().then(function(e){var n=e[0].url,r=n.substr(0,n.lastIndexOf("/"))+"/view";if(r!=t.url){var i=o.a({},t);i.url=r,a.setStatePromised({task:i})}})}})))),t.migratedTexts&&r&&s.createElement(K.a,{task:t,course:n,updateLink:function(e,t){return a.updateLink(e,t)}}),s.createElement(s.Fragment,null,s.createElement("h2",null,"Inlämningsuppgift"),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement("div",{className:"checkBox"+(a.getTaskProp("assignment")?" checked":""),onClick:function(){a.updateTaskOrCustomization("assignment",{$set:!a.getTaskProp("assignment")})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"Den här uppgiften är en inlämningsuppgift"))),a.getTaskProp("assignment")&&s.createElement(s.Fragment,null,s.createElement("p",null,"Inlämningsdatum"),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement(q.a,{selected:a.getTaskProp("deadline")&&F()(a.getTaskProp("deadline")),dateFormat:"YYYY-MM-DD",locale:"sv",popperPlacement:"bottom-start",onChange:function(e){a.updateTaskOrCustomization("deadline",{$set:e.format("YYYY-MM-DD")})}})),s.createElement("div",{className:"horizontalItem top"},a.getTaskProp("deadline")&&s.createElement("a",{className:"deleteDate",href:"#",title:"Ta bort inlämningsdatum",onClick:function(e){e.preventDefault(),a.updateTaskOrCustomization("deadline",{$set:null})}}))))))}function H(e){var t=e.task;return s.createElement(s.Fragment,null,s.createElement("h3",null,"Uppgiftens status"),t.createdBy&&t.createdDate&&s.createElement("p",null,"Uppgiften skapades ",Object(T.c)(t.createdDate)," av ",s.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&s.createElement("p",null,"Uppgiften redigerades senast ",Object(T.c)(t.modifiedDate)," av ",s.createElement("strong",null,t.modifiedBy.name),"."))}function Z(e){var t=e.writeAccess,n=e.editTask;return s.createElement(s.Fragment,null,!!n.props.onDelete&&s.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onDelete()}},"Ta bort från kursmodul"),s.createElement("div",{className:"pull-right"}," "),s.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onCancel()}},"Avbryt"),s.createElement("div",{className:"btn btn-large",onClick:function(){return n.save().catch(c.n)}},"Spara"),!t&&s.createElement("div",{className:"btn btn-large",onClick:function(){return n.copyTask().catch(c.n)}},"Skapa kopia av den här uppgiften"))}var Y=n(53),Q=n(49);function V(e){var t=e.writeAccess,n=e.task,r=e.editTask;return s.createElement(s.Fragment,null,s.createElement("h3",null,"Uppgiftens innehåll"),t&&s.createElement("p",null,"Om uppgiften inte länkar till något dokument kan du lägga innehåll här."),s.createElement(Y.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],defaultActions:Q.a,readOnly:!t,html:n.content,onChange:function(e){var t=o.a({},n);t.content=e,r.setState({task:t})}}))}function G(e){var t=e.writeAccess,n=e.task,r=e.taskCustomization,a=e.editTask;return s.createElement(s.Fragment,null,s.createElement(s.Fragment,null,s.createElement("h3",null,"Uppgiftens lärandemål"),s.createElement("div",null,s.createElement("textarea",{className:"inputTextBox learning-goal-box",disabled:!t,value:n.learningGoal,onChange:function(e){var t=o.a({},n);t.learningGoal=e.target.value,a.setStatePromised({task:t})}}))),s.createElement("br",null),s.createElement(s.Fragment,null,(t||!!n.content)&&s.createElement(V,{writeAccess:t,task:n,editTask:a})),s.createElement(s.Fragment,null,r&&r.resources?s.createElement("h3",null,"Resurser för uppgiften (modifierad för denna kursinstans)"):s.createElement("h3",null,"Resurser kopplade till uppgiften"),s.createElement(D,{resources:r&&r.resources||n.resources,host:a.props.host,onUpdate:function(e){a.updateTaskOrCustomization("resources",e)}})))}var W,J,X,ee,te,ne,re,ae,ie,oe,se,le,ce,ue,de=function(e){function t(t){var n=e.call(this,t)||this;n.features=new B.a;var r=!t.task||Object(U.c)(v.a.currentUser,t.task);return n.state={title:t.task?r?Object(c.a)(W||(W=o.e(['Redigera uppgift till "','"'],['Redigera uppgift till "','"'])),t.module.name):Object(c.a)(J||(J=o.e(['Visa uppgift till "','"'],['Visa uppgift till "','"'])),t.module.name):t.searchMode?Object(c.a)(X||(X=o.e(['Sök ny uppgift till "','"'],['Sök ny uppgift till "','"'])),t.module.name):Object(c.a)(ee||(ee=o.e(['Lägg till egen uppgift till "','"'],['Lägg till egen uppgift till "','"'])),t.module.name),futureAbilitiesOpen:!1,taskCustomization:t.taskCustomization||{},task:t.task?o.a({$meta:t.task.$meta||"update"},t.task):t.searchMode?null:{id:Object(w.h)(),$meta:"add",tags:["sub:"+t.course.subjectCode,"course:"+t.course.code],school:!t.course.isTemplate&&v.a.currentUser.school,resources:[],abilities:[],centralContent:[],futureAbilities:[],knowledgeRequirements:[],name:"",url:"",acl:t.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+v.a.currentUser.school+"/EMPLOYEE:S"]},searchMarkedIds:t.searchMode&&[],searchResult:t.searchMode&&[],isSearching:t.searchMode},t.searchMode&&(n.searchResponse=new P(function(){return v.a.kedBackendClient.list("tasks",{tags:"course:"+t.course.code,include:["knowledgeRequirements","abilities","centralContent"],flags:["includeIdsOnly"]})})),n}return o.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentDidMount=function(){return o.b(this,void 0,void 0,function(){var e;return o.d(this,function(t){switch(t.label){case 0:if(!this.props.searchMode)return[3,8];this.setStatePromised({isSearching:!0}),t.label=1;case 1:return t.trys.push([1,5,6,8]),[4,this.searchResponse.query()];case 2:return t.sent(),this.state.searchMarkedIds&&0===this.state.searchMarkedIds.length?[4,this.updateSearchResult(this.state.searchMarkedIds)]:[3,4];case 3:t.sent(),t.label=4;case 4:return[3,8];case 5:return e=t.sent(),Object(c.n)(e),[3,8];case 6:return[4,this.setStatePromised({isSearching:!1})];case 7:return t.sent(),[7];case 8:return[2]}})})},t.prototype.updateSearchMarkedIds=function(e){return o.b(this,void 0,void 0,function(){var t;return o.d(this,function(n){switch(n.label){case 0:return t=this.setStatePromised({task:null,searchMarkedIds:e,previewTaskContent:null}),this.searchResponse.result?[3,3]:[4,this.searchResponse.promise];case 1:return n.sent(),[4,t];case 2:n.sent(),e=this.state.searchMarkedIds,n.label=3;case 3:return[4,this.updateSearchResult(e)];case 4:return n.sent(),[2]}})})},t.prototype.updateSearchResult=function(e){return o.b(this,void 0,void 0,function(){var t,n;return o.d(this,function(r){switch(r.label){case 0:return[4,this.searchResponse.query()];case 1:return t=r.sent(),n=t.filter(function(t){return e.every(function(e){return t.knowledgeRequirements.some(function(t){return t.id===e})||t.abilities.some(function(t){return t.id===e})||t.centralContent.some(function(t){return t.id===e})})}),this.setStatePromised({searchResult:n}),[2]}})})},t.prototype.onMarkChanged=function(e,t){if(this.props.searchMode){var n=this.state.searchMarkedIds;this.updateSearchMarkedIds(t?n.concat(e):n.filter(function(t){return t!==e})).catch(c.n)}else this.updateLink(e,t)},t.prototype.updateLink=function(e,t){var n=this.props.course,r=this.state.task,a=n.abilities.find(function(t){return t.id===e}),i=n.knowledgeRequirements.find(function(t){return t.id===e}),s=n.centralContent.find(function(t){return t.id===e}),l=o.f(a?["abilities",a]:i?["knowledgeRequirements",i]:s?["centralContent",s]:[null,null],2),c=l[0],u=l[1];if(c){var d=r[c].slice(),p=d.findIndex(function(t){return t.id===e});t?p<0&&d.push(u):p>=0&&d.splice(p,1);var m=o.a({},r);m[c]=d,r&&r.migratedTexts&&(m.migratedTexts=o.a({},r.migratedTexts),r.migratedTexts[c]&&(m.migratedTexts[c]=o.a({},r.migratedTexts[c]),delete m.migratedTexts[c][e])),this.setStatePromised({task:m})}else console.error("Could not find marked id "+e)},t.prototype.save=function(){return o.b(this,void 0,void 0,function(){var e,t,n;return o.d(this,function(r){switch(r.label){case 0:if(e=this.state,t=e.task,n=e.taskCustomization,!Object(U.c)(v.a.currentUser,t))return[3,5];if(!t.url&&!t.content)throw new Error(Object(c.a)(te||(te=o.e(["Uppgiften måste antingen ha en URL eller ett innehåll"],["Uppgiften måste antingen ha en URL eller ett innehåll"]))));if(t.url&&!S.a.isUri(t.url))throw new Error(Object(c.a)(ne||(ne=o.e(["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"])),t.url));return this.props.task&&this.props.task.id!==t.id?[4,this.props.onReplace(this.props.task.id,t)]:[3,2];case 1:return r.sent(),[3,4];case 2:return[4,this.props.onSave(t,null)];case 3:r.sent(),r.label=4;case 4:return[3,9];case 5:return this.props.searchMode?[4,this.props.onSave(t,n)]:[3,7];case 6:return r.sent(),[3,9];case 7:if(this.props.course.isTemplate&&"add"===t.$meta)throw new Error(Object(c.a)(re||(re=o.e(["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"],["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"]))));return[4,this.props.onSaveCustomization(n)];case 8:r.sent(),r.label=9;case 9:return[2]}})})},t.prototype.copyTask=function(){return o.b(this,void 0,void 0,function(){var e;return o.d(this,function(t){switch(t.label){case 0:return(e=o.a({},this.state.task,this.state.taskCustomization||{},{id:Object(w.h)(),acl:this.props.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+v.a.currentUser.school+"/EMPLOYEE:S"],school:this.props.course.school})).$meta="add",[4,this.setStatePromised({task:e,title:Object(c.a)(ae||(ae=o.e(['Redigera kopierad uppgift till "','"'],['Redigera kopierad uppgift till "','"'])),this.props.module.name),taskCustomization:void 0})];case 1:return t.sent(),[2]}})})},t.prototype.getTaskProp=function(e){var t=this.state,n=t.task,r=t.taskCustomization,a=r&&r[e];return void 0!==a?a:n[e]},t.prototype.updateTaskOrCustomization=function(e,t){var n=this.state,r=n.task,a=n.taskCustomization;if(!(r&&Object(U.c)(v.a.currentUser,r))||a&&void 0!==a[e]){var i=o.a({},a);i[e]=R()(i[e]||r[e],t),this.setStatePromised({taskCustomization:i})}else{var s=o.a({},r);s[e]=R()(r[e],t),this.setStatePromised({task:s})}},t.prototype.render=function(){var e=this,t=this.props,n=t.course,r=(t.module,t.onCancel,t.onDelete,t.idsNotCoveredByAnyTask),a=t.searchMode,i=this.state,l=i.task,c=i.taskCustomization,u=i.title,d=i.searchResult,p=i.searchMarkedIds,m=i.isSearching,h=a?p:l.centralContent.map(function(e){return e.id}).concat(l.abilities.map(function(e){return e.id})).concat(l.knowledgeRequirements.map(function(e){return e.id})),f=l&&Object(U.c)(v.a.currentUser,l),g=(l&&S.a.isUri(l.url),this.features);return s.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},s.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},s.createElement("div",{className:"sv-text-portlet-content"},s.createElement("h1",{className:"h1"},u))),s.createElement("div",{className:"sv-fluid-grid sv-grid-ksgs12 sv-layout"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-6"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("div",{className:"ked_boxed"},s.createElement("h3",null,a?"Filtrera på kunskapskrav":f?"Välj kunskapskrav":"Kunskapskrav"),a?s.createElement("p",null,"Markera de kunskapskrav som uppgiften måste täcka."):f&&s.createElement("p",null,"Markera de kunskapskrav som din uppgift täcker."),s.createElement(j.a,{knowledgeRequirements:n.knowledgeRequirements,markedIds:h,idsToMarkNotOk:r,markMode:a||f,migratedIds:l&&l.migratedTexts&&l.migratedTexts.knowledgeRequirements,onMarkChanged:this.onMarkChanged.bind(this)}))),s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement(M.a,{options:n.abilities,title:f||a?"Välj förmågor":"Förmågor",markedIds:h,markMode:f||a,migratedIds:l&&l.migratedTexts&&l.migratedTexts.abilities,onMarkChanged:this.onMarkChanged.bind(this)})),s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement(M.a,{options:n.centralContent,title:f||a?"Välj centralt innehåll":"Centralt innehåll",markedIds:h,markMode:f||a,migratedIds:l&&l.migratedTexts&&l.migratedTexts.centralContent,onMarkChanged:this.onMarkChanged.bind(this)})),!a&&s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement("div",{className:"openClose larger"+(this.state.futureAbilitiesOpen?" open":"")},s.createElement("div",{className:"openHeader",onClick:function(){return e.setStatePromised({futureAbilitiesOpen:!e.state.futureAbilitiesOpen})}},f?s.createElement("p",null,"Välj ytterligare alternativ"):s.createElement("p",null,"Ytterligare alternativ")),s.createElement("div",{className:"openContent"},s.createElement("h4",null,"Framtidsförmågor"),s.createElement("div",{className:"taskContainer"},A.a.map(function(t){var n=l.futureAbilities.indexOf(t)>=0;return s.createElement("div",{className:"align-horizontal",key:t},s.createElement("div",{className:"horizontalItem top"},s.createElement("div",{className:"checkBox"+(n?" checked":""),onClick:f?function(){var r=o.a({},l);r.futureAbilities=n?l.futureAbilities.filter(function(e){return e!=t}):l.futureAbilities.concat(t),e.setStatePromised({task:r})}:void 0})),s.createElement("div",{className:"horizontalItem top"},t))})))))),s.createElement("div",{className:"sv-layout sv-column-6"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},m&&s.createElement("p",null,s.createElement(L.a,null)," Laddar uppgifter..."),d?s.createElement(s.Fragment,null,s.createElement(_,{searchMarkedIds:p,searchResult:d,task:l,writeAccess:f,taskCustomization:c,editTask:this}),this.state.previewTaskContent?s.createElement("div",{dangerouslySetInnerHTML:{__html:this.state.previewTaskContent}}):l&&s.createElement(G,{writeAccess:f,task:l,taskCustomization:c,editTask:this}),l&&s.createElement(H,{task:l})):s.createElement(s.Fragment,null,l&&s.createElement($,{task:l,course:n,writeAccess:f,features:g,editTask:this}),l&&s.createElement(G,{writeAccess:f,task:l,taskCustomization:c,editTask:this}),l&&s.createElement(H,{task:l}))),l&&s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement("hr",null),s.createElement("br",null),s.createElement(Z,{writeAccess:f,editTask:this})))),s.createElement("div",{className:"sv-layout"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"}))))},t}(s.Component),pe=n(101),me=n(44),he=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return o.c(t,e),t.prototype.openTaskDialog=function(e){var t=this.props,n=t.taskCustomizations,r=t.course,a=t.host,i=t.module,o=(t.taskIds,t.onTaskAdded,t.onTaskUpdated),s=t.onTaskCustomizationUpdated,l=t.onTaskDeleted,c=t.idsNotCoveredByAnyTask,u=t.onTaskReplaced;a.openDialog({Component:de,props:{task:e,taskCustomization:n&&n[e.id],module:i,course:r,host:a,idsNotCoveredByAnyTask:c,onSave:function(e){var t=Object(T.l)(e,v.a.currentUser);o(t),a.closeDialog()},onSaveCustomization:function(t){s(e.id,t),a.closeDialog()},onDelete:function(){l(e.id),a.closeDialog()},onReplace:function(e,t){u(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})},t.prototype.render=function(){var e=this,t=this.props,n=Object(me.a)(t.course.tasks,t.taskIds,{appendLeftovers:!1});return s.createElement("div",null,s.createElement(pe.a,{taskMetas:n.map(function(e){return{task:e,isTaskOwner:Object(U.c)(v.a.currentUser,e)}}),renderEditLink:function(t){var n=t.task,r=t.isTaskOwner;return s.createElement("div",{className:r?"editItem":"viewItem",onClick:function(){return e.openTaskDialog(n)}})},renderLink:function(t){var n=t.task;return n.content?s.createElement("a",{href:"#",onClick:function(t){t.preventDefault(),e.openTaskDialog(n)}},n.name):s.createElement("a",{href:n.url,target:"_blank"},n.name)},onSort:function(t,n,r){e.props.onTasksReordered(t,n,r)}}),s.createElement("br",null),s.createElement("a",{className:"btn",onClick:function(){var n=e.props,r=n.course,a=n.host,i=n.idsNotCoveredByAnyTask,o=n.module,s=n.onTaskAdded;n.onTaskCustomizationUpdated;t.host.openDialog({Component:de,props:{searchMode:!0,module:o,course:r,host:a,idsNotCoveredByAnyTask:i,onSave:function(e,t){e=Object(T.l)(e,v.a.currentUser),s(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})}},s.createElement("i",{className:"fa fa-search","aria-hidden":!0})," Sök uppgift")," ",s.createElement("a",{onClick:function(){var t=e.props,n=t.course,r=t.host,a=t.module,i=(t.taskIds,t.onTaskAdded),o=(t.onTaskUpdated,t.onTaskDeleted,t.idsNotCoveredByAnyTask);r.openDialog({Component:de,props:{module:a,course:n,host:r,idsNotCoveredByAnyTask:o,onSave:function(e){e=Object(T.l)(e,v.a.currentUser),i(e),r.closeDialog()},onCancel:function(){return r.closeDialog()}}})},className:"btn"},s.createElement("i",{className:"fa fa-plus","aria-hidden":!0})," Lägg till egen uppgift"))},t}(s.Component),fe=n(109),ve=n(35),ge=n(94),be=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editMandatoryContent:!1},n}return o.c(t,e),t.prototype.getModuleIndex=function(){var e=this.props,t=e.course,n=e.module;return t.modules.findIndex(function(e){return e.id===n.id})},t.prototype.getModuleOrderIndex=function(){var e=this.props,t=(e.course,e.module);return this.props.getOrderedModules().findIndex(function(e){return e.id===t.id})},t.prototype.updateModule=function(e){var t=this.props.module,n=R()(t,e),r=this.getModuleIndex();this.props.host.update({modules:{$splice:[[r,1,n]]}})},t.prototype.onTaskAdded=function(e,t){var n={},r=this.props.module.taskIds.slice();r.push(e.id),this.props.course.tasks.some(function(t){return t.id===e.id})||(n.tasks={$push:[e]});var a=o.a({},this.props.module.taskCustomizations||{});t&&(a[e.id]=t);var i=this.getModuleIndex();n.modules={},n.modules[i]={taskIds:{$set:r},taskCustomizations:{$set:a}},this.props.host.update(n)},t.prototype.onTaskUpdated=function(e){if(!e.$meta)throw new Error(Object(c.a)(ie||(ie=o.e(["Hoppsan, blev lite knas. Fel ID: ",""],["Hoppsan, blev lite knas. Fel ID: ",""])),"Pa7Dq"));var t=this.props.course.tasks.findIndex(function(t){return t.id===e.id});t>=0&&this.props.host.update({tasks:{$splice:[[t,1,e]]}})},t.prototype.onTaskCustomized=function(e,t){var n=o.a({},this.props.module.taskCustomizations||{});n[e]=t,this.updateModule({taskCustomizations:{$set:n}})},t.prototype.onTaskDeleted=function(e){this.updateModule({taskIds:{$set:this.props.module.taskIds.filter(function(t){return t!==e})},taskCustomizations:{$apply:function(t){var n=o.a({},t);return delete n[e],n}}})},t.prototype.onTaskReplaced=function(e,t){var n=this.props.module.taskIds.indexOf(e);if(n<0)Object(c.n)(Object(c.a)(oe||(oe=o.e(["Kunde inte spara uppgift. Felkod d72kQ"],["Kunde inte spara uppgift. Felkod d72kQ"]))));else{var r={taskIds:{$splice:[[n,1,t.id]]},taskCustomizations:{$apply:function(t){var n=o.a({},t);return delete n[e],n}}},a=R()(this.props.module,r),i=this.getModuleIndex();this.props.host.update({modules:{$splice:[[i,1,a]]},tasks:{$set:this.props.course.tasks.concat(t)}})}},t.prototype.onTasksReordered=function(e,t,n){var r=Object(ge.a)(this.props.course.tasks,this.props.module.taskIds,e,t,n,{appendLeftovers:!1});this.updateModule({taskIds:{$set:r}})},t.prototype.render=function(){for(var e=this,t=this.props,n=t.course,r=t.host,a=t.module,i=t.idsNotCoveredByAnyTask,l=this.getModuleIndex(),u=this.getModuleOrderIndex(),d=this.updateModule.bind(this),p=1,m=["--"],h=["--"],f=0;f<51;++f)m.push(""+p),h.push(""+ ++p);return s.createElement("div",{className:"course-module ked_boxed",style:{position:"relative"}},s.createElement("h3",null,s.createElement(fe.a,{eager:!0,clickAdvertiseText:"Namnlös modul",maxChars:100,text:a.name,onChange:function(e){return d({name:{$set:e}})}})),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem center"},s.createElement("p",null,"Startvecka")),s.createElement("div",{className:"horizontalItem center"},s.createElement("select",{value:a.startWeek||"--",onChange:function(e){return d({startWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},m.map(function(e){return s.createElement("option",{key:e,value:e},e)}))),s.createElement("div",{className:"horizontalItem center"},s.createElement("p",null,"Slutvecka")),s.createElement("div",{className:"horizontalItem center"},s.createElement("select",{value:a.endWeek||"--",onChange:function(e){return d({endWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},h.map(function(e){return s.createElement("option",{key:e,value:e},e)})))),s.createElement("h4",null,"Kursmodulens introduktion"),s.createElement(Y.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],defaultActions:Q.a,html:a.mandatoryContent,onChange:function(e){d({mandatoryContent:{$set:e}})}}),s.createElement("h4",null,"Uppgifter"),s.createElement(he,{taskIds:a.taskIds,taskCustomizations:a.taskCustomizations,course:n,module:a,host:r,idsNotCoveredByAnyTask:i,onTaskAdded:function(t,n){return e.onTaskAdded(t,n)},onTaskUpdated:function(t){return e.onTaskUpdated(t)},onTaskCustomizationUpdated:function(t,n){return e.onTaskCustomized(t,n)},onTaskDeleted:function(t){return e.onTaskDeleted(t)},onTaskReplaced:function(t,n){return e.onTaskReplaced(t,n)},onTasksReordered:function(t,n,r){return e.onTasksReordered(t,n,r)}}),s.createElement("h4",null,"Modulresurser"),s.createElement("p",{className:"subHeader"},"(Eventuella resuser för redovisning av modulen samt för modulen som helhet)"),s.createElement(D,{resources:a.resources,onUpdate:function(e){return d({resources:e})},host:r}),s.createElement("div",{style:{position:"absolute",top:0,right:0}},u>0&&s.createElement("span",null,s.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(-1)}})," "),u<n.modules.length-1&&s.createElement("span",null,s.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(1)}})," "),s.createElement(ve.a,{title:"Ta bort modulen",style:{display:"inline-block"},onClick:function(){return confirm(Object(c.a)(se||(se=o.e(["Ta bort modul ","?"],["Ta bort modul ","?"])),a.name))&&r.update({modules:{$splice:[[l,1]]}})}})))},t}(s.Component),ye=function(e){function t(t){var n=e.call(this,t)||this;return n._moduleRefs={},n.state={},n}return o.c(t,e),t.prototype.addModule=function(){this.props.host.update({modules:{$push:[{name:"Ny kursmodul",id:Object(w.h)(),resources:[],taskIds:[]}]}})},t.prototype.getOrderedModules=function(){var e=this.props.course,t=e.moduleOrder||e.modules.map(function(e){return e.id});return t.map(function(t){return e.modules.find(function(e){return e.id===t})}).filter(function(e){return!!e}).concat(e.modules.filter(function(e){return!t.find(function(t){return e.id===t})}))},t.prototype.reorder=function(e,t){return o.b(this,void 0,void 0,function(){var n,r,a,i,s,l,c;return o.d(this,function(o){switch(o.label){case 0:return this.props.course,n=this.getOrderedModules(),r=n.findIndex(function(t){return t.id===e}),(a=r+t)<0||a>=n.length?[2]:(i=n[a],(s=n.map(function(e){return e.id}))[a]=e,s[r]=i.id,l=document.documentElement.scrollTop,[4,this.props.host.update({moduleOrder:{$set:s}})]);case 1:if(o.sent(),c=Object(E.findDOMNode)(this._moduleRefs[e]))try{window.scrollTo({top:l}),c.scrollIntoView({behavior:"smooth",block:"start"})}catch(e){window.scrollTo(null,l),c.scrollIntoView(!0)}return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.course,r=t.host,a=t.idsNotCoveredByAnyTask,i=(n.moduleOrder||n.modules.map(function(e){return e.id}),this.getOrderedModules());return s.createElement("div",{className:"sv-html-portlet sv-portlet",ref:function(t){return e._elem=t}},i.map(function(t){return s.createElement(be,{ref:function(n){return e._moduleRefs[t.id]=n},key:t.id,course:n,module:t,onReorder:function(n){return e.reorder(t.id,n)},getOrderedModules:function(){return e.getOrderedModules()},host:r,idsNotCoveredByAnyTask:a})}),s.createElement("div",{className:"btn btn-large",onClick:function(){return e.addModule()}},"Lägg till kursmodul"))},t}(s.Component),ke=new(function(e){function t(t){var n=e.call(this,{query:function(){return o.b(n,void 0,void 0,function(){var e,n;return o.d(this,function(r){switch(r.label){case 0:return e=t(),[4,v.a.kedBackendClient.list("schools",{name:e,include:["courses"]})];case 1:if(n=r.sent(),this._schoolId=n.length>0&&n[0].id,!this._schoolId)throw new Error(Object(c.a)(le||(le=o.e(["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'],["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'])),e,e));return[2,Object(c.k)(n.map(function(e){return e.courses}))]}})})}})||this;return n}return o.c(t,e),t.prototype.getSchoolId=function(){var e=this;return this.ensureHasData().then(function(){return e._schoolId})},t}(n(65).a))(function(){return v.a.currentUser.school}),Ee=n(138),we=n(23),Te=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schoolCourses:null},n.onSchoolCoursesUpdated=n.onSchoolCoursesUpdated.bind(n),n}return o.c(t,e),t.prototype.componentDidMount=function(){ke.subscribe(this.onSchoolCoursesUpdated).catch(c.n)},t.prototype.componentWillUnmount=function(){ke.unsubscribe(this.onSchoolCoursesUpdated)},t.prototype.onSchoolCoursesUpdated=function(e){var t=Object(c.g)("name"),n=Object(c.g)("createdDate");e.sort(function(e,r){return t(e,r)||n(e,r)}),this.setState({schoolCourses:e})},t.prototype.outputCourses=function(e,t,n){return s.createElement(we.a,{title:s.createElement("p",null,t),headerOpen:n},e.map(function(e){return s.createElement("div",{className:"schoolCourse",key:e.id},s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top pull-right"},s.createElement(Ee.a,{to:"/courses/"+e.id+"/edit",className:"editItem"})),s.createElement("div",{className:"horizontalItem top"},s.createElement(Ee.a,{to:"/courses/"+e.id+"/edit"},e.name)),s.createElement("div",{className:"horizontalItem top"},e.active&&s.createElement("div",{className:"pill active"},"Aktiv")),e.active&&!e.publishable&&s.createElement("div",{className:"horizontalItem top"},s.createElement("div",{className:"pill incomplete"},"Inkomplett"))),s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,e.description)),s.createElement("div",{className:"horizontalItem top"},e.modifiedBy?s.createElement("p",{className:"small"},"Redigerad av ",e.modifiedBy.name," / ",Object(T.g)(e.modifiedDate)):s.createElement("p",{className:"small",style:{fontStyle:"italic"}}," ")))}))},t.prototype.render=function(){var e=this.state.schoolCourses,t=[],n=[];if(e){var r=v.a.currentUser.mail;e.forEach(function(e){e.activatedBy&&e.activatedBy.url==r?t.push(e):e.responsibleTeachers.filter(function(e){return e.url==r}).length>0?t.push(e):n.push(e)})}return s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("div",{className:"ked_boxed"},s.createElement("h3",null,"Skolans kurser"),s.createElement("div",{className:"taskContainer"},e?s.createElement(s.Fragment,null,this.outputCourses(t,"Mina kurser",!0),this.outputCourses(n,"Andra kurser",!1)):s.createElement("p",null,s.createElement(L.a,null)," Laddar skolans kurser")),"#/courses/new"!==location.hash&&s.createElement(Ee.a,{className:"btn",to:"/courses/new",onClick:function(){return window.scroll(0,0)}},"Skapa ny kurs")))},t}(s.Component),Ce=n(54),Se=n(10),Oe=n(7),Ie=n(135);function xe(e){var t=e.school,n=e.selectedTeachers,r=e.onSelect,a=e.onBlur,i=Se.c.schools.cacheOptimized().name(t).single().read().edsSchoolNameGymn,s=(i?v.b.edsClient.suspense.getSchoolTeachers({schoolName:i}):[]).map(function(e){return{label:e.teacherFirstName+" "+e.teacherLastName,value:e.teacherEmailAddress}});Object(U.d)(v.b.currentUser,t)&&!s.some(function(e){return e.value===v.b.currentUser.mail})&&s.push({label:v.b.currentUser.displayName,value:v.b.currentUser.mail});var u=Object(c.b)(n,function(e){return e.email});return s=s.filter(function(e){return!u[e.value]}).sort(Object(c.h)(["label"],Oe.a.KED_LOCALE)),l.a.createElement(Ie.a,{isMulti:!1,options:s,defaultMenuIsOpen:!0,autoFocus:!0,onBlur:function(){return a()},placeholder:Object(c.a)(ce||(ce=o.e(["Välj bland skolans lärare..."],["Välj bland skolans lärare..."]))),noOptionsMessage:function(){return Object(c.a)(ue||(ue=o.e(["Det finns inga fler lärare att välja från"],["Det finns inga fler lärare att välja från"])))},onChange:function(e){var t=e,n=t.label,a=t.value;r({name:n,email:a})}})}var De=n(33),je=l.a.createContext(null);De.b.addProvider(function(){return je._currentValue});var Ne,Re,Ue,Me,Pe,Ae,Le,Be,_e,qe=function(e){function t(t){var n=e.call(this,t)||this;return n.subscriptions=[],n.outerSubscription={unsubscribe:function(){n.subscriptions.forEach(function(e){return e.unsubscribe()}),n.subscriptions=[]}},n.observer=function(e,t,r){t?n.setState({error:t}):n.setState(function(e){return{counter:e.counter+1,error:t}})},n.state={counter:0,error:null},n}return o.c(t,e),t.prototype.componentDidCatch=function(e,t){e&&e.name||(e=new Error(""+e)),this.setState({error:e,info:t}),console.log(e,t)},t.prototype.componentWillMount=function(){this.outerSubscription.unsubscribe()},t.prototype.render=function(){return this.state.error?this.props.errorFallback||l.a.createElement("p",null,Object(c.a)(Ne||(Ne=o.e(["Kunde inte ladda innehållet"],["Kunde inte ladda innehållet"])))):(this.outerSubscription.unsubscribe(),l.a.createElement(s.Suspense,{fallback:this.props.fallback||null},l.a.createElement(je.Provider,{value:this},this.props.children)))},t}(l.a.Component);function ze(e){var t=e.school,n=e.teachers,r=e.onUpdate,a=Object(s.useRef)(),i=o.f(Object(s.useState)(!1),2),u=i[0],d=i[1];return l.a.createElement("div",{className:"teachers-list"},l.a.createElement("h3",null,"Ansvariga lärare"),l.a.createElement("table",{style:{width:"100%"}},l.a.createElement("thead",null,n.length>0&&l.a.createElement("tr",null,l.a.createElement("th",{style:{width:"15%"}},Object(c.a)(Re||(Re=o.e(["Namn"],["Namn"])))),l.a.createElement("th",null,Object(c.a)(Ue||(Ue=o.e(["E-postadress"],["E-postadress"])))),l.a.createElement("th",{style:{width:"24px"}},Object(c.a)(Me||(Me=o.e(["Behörighet"],["Behörighet"])))),l.a.createElement("th",{style:{width:"24px"}}))),l.a.createElement("tbody",null,n.map(function(e,t){return l.a.createElement("tr",{key:t},l.a.createElement("td",null,l.a.createElement("input",{type:"text",ref:a,value:e.name,autoFocus:!e.name&&t>0,onChange:function(a){if(a.target.value||e.email){var i=o.g(n);i[t]=o.a({},e,{name:a.target.value}),r(i)}else r(o.g(n.slice(0,t),n.slice(t+1)))}})),l.a.createElement("td",null,l.a.createElement("input",{type:"text",style:{width:"100%"},value:e.email,onKeyDown:function(e){9===e.which&&!e.shiftKey&&t===n.length-1&&(n.length<1||n[n.length-1].name)&&(d(!0),e.preventDefault())},onChange:function(a){var i=o.a({},e,{url:a.target.value,email:a.target.value});if(a.target.value||e.name){var s=o.g(n);s[t]=i,r(s)}else r(o.g(n.slice(0,t),n.slice(t+1)))}})),l.a.createElement("td",null,l.a.createElement("select",{disabled:!e.email,value:e.access,onChange:function(a){var i=o.g(n);i[t]=o.a({},e,{access:a.target.value}),r(i)}},l.a.createElement("option",{value:"read"},Object(c.a)(Pe||(Pe=o.e(["Läsa"],["Läsa"])))),l.a.createElement("option",{value:"edit"},Object(c.a)(Ae||(Ae=o.e(["Redigera"],["Redigera"])))),l.a.createElement("option",{value:"full"},Object(c.a)(Le||(Le=o.e(["Full"],["Full"])))))),l.a.createElement("td",null,l.a.createElement(ve.a,{onClick:function(){r(o.g(n.slice(0,t),n.slice(t+1)))}})))}))),l.a.createElement("br",null),u?l.a.createElement(qe,{fallback:l.a.createElement(L.a,null),errorFallback:Object(c.a)(Be||(Be=o.e(["Kunder inte hämta skolans lärare från EDS"],["Kunder inte hämta skolans lärare från EDS"])))},l.a.createElement(xe,{school:t,selectedTeachers:n,onBlur:function(){return d(!1)},onSelect:function(e){var t=e.name,a=e.email,i={name:t,email:a,url:a,access:"edit"},s=o.g(n);s.push(i),r(s),d(!1)}})):l.a.createElement("a",{className:"btn",onClick:function(){d(!0)}},l.a.createElement("i",{className:"fa fa-user-plus","aria-hidden":!0}),Object(c.a)(_e||(_e=o.e([" Lägg till ansvarig lärare"],[" Lägg till ansvarig lärare"])))))}var Fe,Ke,$e,He=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isOpen:!1},n}return o.c(t,e),t.prototype.render=function(){var e=this.props.course,t=(this.state.isOpen,[]),n=Object(Ce.d)(e);return t.push(s.createElement("tr",{key:"centralContent",className:"covered-item-label"},s.createElement("td",{colSpan:2},"Centralt innehåll"))),e.centralContent.forEach(function(e,r){return t.push(s.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},s.createElement("td",null,s.createElement("p",{className:"criteriaText",dangerouslySetInnerHTML:{__html:e.name}})),s.createElement("td",null,s.createElement("p",null,(n[e.id]||[]).length))))}),t.push(s.createElement("tr",{key:"abilities",className:"covered-item-label"},s.createElement("td",{colSpan:2},"Förmågor"))),e.abilities.forEach(function(e,r){return t.push(s.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},s.createElement("td",null,s.createElement("p",{className:"abilityText",dangerouslySetInnerHTML:{__html:e.name}})),s.createElement("td",null,s.createElement("p",null,(n[e.id]||[]).length))))}),t.push(s.createElement("tr",{key:"futureAbilities",className:"covered-item-label"},s.createElement("td",{colSpan:2},"Framtidsförmågor"))),A.a.forEach(function(e,r){return t.push(s.createElement("tr",{key:e,className:r%2?"tableOdd":""},s.createElement("td",null,s.createElement("p",{className:"abilityText"},e)),s.createElement("td",null,s.createElement("p",null,(n[e]||[]).length))))}),s.createElement(we.a,{className:"larger",title:s.createElement("p",null,"Kursens täckningstabell"),contentClassName:"weighted-items-table"},s.createElement("p",null,"Tabellen anger hur många uppgifter som berör varje del."),s.createElement("table",null,s.createElement("tbody",null,t)))},t}(s.Component),Ze=function(e){function t(t){var n=e.call(this,t)||this;return n.state={url:n.props.url||""},n}return o.c(t,e),t.prototype.save=function(){var e=this.state.url;if(!S.a.isUri(e))throw new Error(Object(c.a)(Fe||(Fe=o.e(["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"])),e));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.onSave,r=t.onDelete,a=this.state,i=S.a.isUri(this.state.url);return s.createElement("div",null,s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("h2",null,"Koppla en arbetsgång till kursen"),s.createElement("p",null,"Det går bara att lägga in en arbetsgång per kurs."),s.createElement("br",null),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Länk:"),s.createElement("div",{className:"horizontalItem top "},s.createElement("input",{type:"text",tabIndex:1,size:50,value:a.url,onChange:function(t){return e.setState({url:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("br",null)),s.createElement("div",{className:"sv-html-portlet sv-portlet",id:"svid12_492422d515badf36646e4ff1"},r&&s.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return r()}},"Ta bort arbetsgång"),s.createElement("a",{tabIndex:1,className:"btn btn-large"+(i?"":" btn-inactive"),onClick:i&&function(){return n(a.url)}},"Spara")))},t}(s.Component),Ye=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return o.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.url;return s.createElement("div",null,s.createElement("div",{className:"taskContainer"},r&&s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},s.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:Ze,props:{url:r,onSave:function(e){n({$set:e}),t.closeDialog()},onDelete:function(){n({$set:void 0}),t.closeDialog()}}})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement("a",{href:r,target:"_blank"},"Nuvarande arbetsgång")))),!r&&s.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:Ze,props:{onSave:function(e){n({$set:e}),t.closeDialog()}}})}},s.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Koppla en arbetsgång till kursen"))},t}(s.Component);function Qe(){return v.a.currentUser}function Ve(e){var t=e.school,n=e.courseCode,r=e.selectedStudyGroups,a=e.onUpdate,i=Se.c.schools.cacheOptimized().name(t).single().read().edsSchoolNameGymn,s=v.b.edsClient.suspense.getSchoolTuitionGroups({schoolName:i,courseCode:n}).map(function(e){return{label:e.tuitionGroupName,value:e.tuitionGroupName}});return l.a.createElement(Ie.a,{isMulti:!0,options:s,value:r.map(function(e){return{label:e,value:e}}),placeholder:Object(c.a)(Ke||(Ke=o.e(["Koppla studiegrupper till kursen..."],["Koppla studiegrupper till kursen..."]))),noOptionsMessage:function(){return Object(c.a)($e||($e=o.e(["Kunde inte hitta studiegrupper för denna kurs"],["Kunde inte hitta studiegrupper för denna kurs"])))},onChange:function(e){a(e.map(function(e){return e.value}))}})}var Ge,We,Je,Xe,et,tt,nt,rt,at,it,ot,st,lt,ct,ut=function(e){function t(t){var n=e.call(this,t)||this;return n.state={changeImageUrl:!1},n}return o.c(t,e),t.prototype.setImageUrl=function(e){this.props.course.imageId},t.prototype.render=function(){var e=this.props,t=e.course,n=e.origCourse,r=e.host,a=Object(Ce.e)(t),i=Object(Ce.b)(t),l=Object(Ce.f)(t),u=t.images.find(function(e){return e.id===t.imageId}),d=u&&u.url.startsWith("data:"),p=u&&u.url.indexOf("storage.googleapis.com")>0,m=Object(Ce.c)(t),h=Qe(),f=m.some(function(e){return e.email===h.mail&&"full"===e.access});return s.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},t.isTemplate&&s.createElement("h1",null,"Kursmall"),s.createElement("h2",null,"Kursövergripande"),s.createElement("hr",null),s.createElement("div",{className:"ked_boxed"},s.createElement("div",null,s.createElement("h3",null,"Kursens bild"),d?s.createElement("p",null,"Kursens bild ligger i databasen. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):p?s.createElement("p",null,"Kursens bild ligger i Kunskapsskolans Google moln. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):u?s.createElement("div",null,s.createElement("textarea",{value:u.url,style:{width:"100%",height:"30px"},onChange:function(e){return Object(b.b)(t,n,r,e.target.value)}}),s.createElement("p",null,"Bilden som visas högst upp hämtas från angiven URL. För att ändra bild kan du redigera URL ovan. Ett annat sätt att ändra bild är att dra och släppa en ny bild över den gamla högst upp på sidan.")):s.createElement("p",null,"Kursen saknar egen bild. Lägg till en bild genom att dra och släppa en bild på kurs-bannern högst upp på den här sidan."),s.createElement("br",null)),!t.isTemplate&&s.createElement("div",null,s.createElement("h3",null,"Beskrivning"),s.createElement("p",{className:"subHeader"},"(Beskrivning av kursen. För att skilja mellan olika varianter av samma gymnasiekurs)"),s.createElement("textarea",{className:"inputTextBox inputTextSmall",value:t.description,onChange:function(e){return r.update({description:{$set:e.target.value}})}}),s.createElement("br",null)),s.createElement("div",null,s.createElement("h3",null,"Upptaktstext"),s.createElement("p",{className:"subHeader"},"(texten ska visas på kursens upptaktssektion)"),s.createElement(Y.a,{html:t.runUpText,defaultActions:Q.a,actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],onChange:function(e){return r.update({runUpText:{$set:e}})}}),s.createElement("br",null)),s.createElement("h3",null,"Kursresurser"),s.createElement("p",{className:"subHeader"},"(Resurser för upptakt och kursen som helhet)"),s.createElement(D,{resources:t.resources,onUpdate:function(e){return r.update({resources:e})},host:r}),s.createElement("br",null),s.createElement("h3",null,"Arbetsgång"),s.createElement("p",{className:"subHeader"},"(Eventuell länk till arbetsgång för kursen)"),s.createElement(Ye,{url:t.workFlowLink,onUpdate:function(e){return r.update({workFlowLink:e})},host:r}),s.createElement("br",null),!t.isTemplate&&s.createElement("div",null,s.createElement("h3",null,"Google Classroom"),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{placeholder:"Google classroom URL",type:"text",size:30,value:t.googleClassRoomURL,onChange:function(e){return r.update({googleClassRoomURL:{$set:e.target.value}})}})),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{placeholder:"kod",type:"text",size:8,value:t.googleClassRoomCode,onChange:function(e){return r.update({googleClassRoomCode:{$set:e.target.value}})}})))),t.isTemplate?null:s.createElement(s.Fragment,null,s.createElement(ze,{school:t.school,teachers:t.responsibleTeachers,onUpdate:function(e){r.update({responsibleTeachers:{$set:e}})}}),s.createElement("br",null),s.createElement("div",{className:"select-studygroups"},s.createElement("h3",null,Object(c.a)(Ge||(Ge=o.e(["Studiegrupper"],["Studiegrupper"])))),s.createElement(qe,{fallback:s.createElement(L.a,null),errorFallback:Object(c.a)(We||(We=o.e(["Kunde inte ladda studiegrupper från EDS"],["Kunde inte ladda studiegrupper från EDS"])))},s.createElement(Ve,{school:t.school,courseCode:t.code,selectedStudyGroups:t.studyGroups||[],onUpdate:function(e){return r.update({studyGroups:{$set:e}})}}))))),s.createElement("div",{className:"sv-html-portlet sv-portlet",id:"svid12_6ab4811f15b13c706b43bb47"},s.createElement("div",{id:"Kursensmoduler"}),s.createElement("h2",null,"Kursens moduler"),s.createElement("hr",null)),s.createElement(ye,{host:r,course:t,idsNotCoveredByAnyTask:i}),s.createElement("div",null,s.createElement("br",null),s.createElement(He,{course:t})),s.createElement("div",{className:"sv-html-portlet sv-portlet"},s.createElement("h2",null,"Kursens status"),s.createElement("hr",null),t.createdBy&&t.createdDate&&s.createElement("p",null,"Kursen skapades ",Object(T.c)(t.createdDate)," av ",s.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&s.createElement("p",null,"Kursen redigerades senast ",Object(T.c)(t.modifiedDate)," av ",s.createElement("strong",null,t.modifiedBy.name),"."),t.active?s.createElement("p",null,"Kursen är ",s.createElement("strong",null,"AKTIV")," sedan ",Object(T.c)(t.activatedDate)," av ",s.createElement("strong",null,t.activatedBy.name),"."):s.createElement("p",null,"Kursen är ",s.createElement("strong",null,"INAKTIV"),t.inactivatedBy?s.createElement("span",null,"sedan ",Object(T.c)(t.inactivatedDate)," av ",s.createElement("strong",null,t.inactivatedBy.name),"."):s.createElement("span",null,".")),0===a.length?s.createElement("p",{className:"markedGreen"},"Modulernas kunskapskrav täcker skolverkets krav för denna kurs"):s.createElement("div",{className:"markedRed warning-box"},s.createElement("div",{className:"warningFlag"},s.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),s.createElement("p",null,"Modulernas kunskapskrav täcker inte skolverkets krav för denna kurs.")),l.map(function(e){return s.createElement("div",{key:e,className:"markedRed warning-box"},s.createElement("div",{className:"warningFlag"},s.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),s.createElement("p",null,e))}),s.createElement("br",null),f&&!t.isTemplate&&(n?s.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){confirm(Object(c.a)(Je||(Je=o.e(['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\n\nKursen kommar att raderas helt!\n\nÄr du säker?"],['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\\n\\nKursen kommar att raderas helt!\\n\\nÄr du säker?"])),t.name,t.description,t.school))&&r.deleteCourse().catch(c.n)}},"Ta bort kurs"):s.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return history.go(-1)}},"Avbryt")),s.createElement("div",{className:"btn btn-large",onClick:function(){return r.save()}},"Spara"),t.active?s.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.inactivateAndSave()}},"Inaktivera och spara"):s.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.activateAndSave()}},"Aktivera och spara")))),s.createElement("div",{className:"sv-layout sv-column-5"},s.createElement(Te,null)))},t}(s.Component),dt="production"===Oe.b.ENVIRONMENT?c.n:null,pt=Object(c.a)(Xe||(Xe=o.e(["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."],["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."]))),mt={origCourse:null,origTemplate:null,course:null,dialogContainers:[],hasUnsavedData:!1,view:"courseBuilder"},ht=function(e){function t(t){var n=e.call(this,t)||this;return n.state=o.a({},mt),n.update=n.update.bind(n),n.refDialog=n.refDialog.bind(n),n.contentYPos=0,n.onKeyDown=n.onKeyDown.bind(n),n.beforeUnload=n.beforeUnload.bind(n),n.onClickPreventUnload=n.onClickPreventUnload.bind(n),n.isSaving=!1,n.dialogs=[],t.view&&(n.state=o.a({},n.state,{view:t.view})),n}return o.c(t,e),t.prototype.setStatePromised=function(e){return this._setState(o.a({hasUnsavedData:!0},e))},t.prototype.setNonSaveableDataState=function(e){return this._setState(e)},t.prototype._setState=function(t){var n=this;if(t.course){var r=t.course,a=r.tasks,i=r.modules,s={};i.forEach(function(e){return e.taskIds.forEach(function(e){return s[e]=!0})});var l=a.filter(function(e){return s[e.id]}),c=o.a({},t.course);c.tasks=l,t=o.a({},t,{course:c})}var u=t.allCourses||this.state.allCourses,d=t.course||this.state.course;if(u){var p=u.findIndex(function(e){return e.id===n.props.id});u=R()(u,{$splice:[[p,1,d]]}),(t=o.a({},t)).allCourses=u}return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentWillMount=function(){this.load().catch(dt),window.addEventListener("keydown",this.onKeyDown),window.addEventListener("beforeunload",this.beforeUnload),document.body.addEventListener("click",this.onClickPreventUnload)},t.prototype.componentWillUnmount=function(){window.removeEventListener("keydown",this.onKeyDown),window.removeEventListener("beforeunload",this.beforeUnload),document.body.removeEventListener("click",this.onClickPreventUnload),Object(T.i)("")},t.prototype.componentWillReceiveProps=function(e){this.state&&this.state.course&&(e.id===this.props.id&&e.templateId===this.props.templateId||this.setStatePromised(mt)),e.view!==this.props.view&&this.setNonSaveableDataState({view:e.view})},t.prototype.componentDidUpdate=function(e,t){if(this.contentDiv){var n=Object(E.findDOMNode)(this.contentDiv);n&&(this.contentYPos=n.getBoundingClientRect().top)}t&&t.course&&(this.props.id===e.id&&this.props.templateId===e.templateId||this.load().catch(dt)),!t.hasUnsavedData&&this.state.hasUnsavedData&&Object(T.i)("unsaved")},t.prototype.loadFromTemplate=function(e){return o.b(this,void 0,void 0,function(){var t,n,r;return o.d(this,function(a){switch(a.label){case 0:return Object(c.o)("Laddar data från mall..."),[4,Object(T.e)(e,{includeTemplateChain:!0})];case 1:return t=a.sent(),(n=Object(T.j)(Date.now(),t,v.a.currentUser)).id=Object(w.h)(),n.parentId=e,n.active=!1,n.isTemplate=!1,n.templateChain=o.g(n.templateChain),n.templateChain.push({id:e,$meta:"ref"}),r=v.a.currentUser.school,n.school=r,n.description="",n.responsibleTeachers=[],delete n.studyGroups,n.acl=["role:USER:R","schoolRole:"+r+"/EMPLOYEE:S"],delete n.$etag,delete n.createdBy,delete n.createdDate,delete n.modifiedBy,delete n.modifiedDate,delete n.activatedBy,delete n.activatedDate,delete n.googleClassRoomCode,delete n.googleClassRoomURL,[4,this.setStatePromised({course:n,origCourse:null,origTemplate:t})];case 2:return a.sent(),Object(c.o)(""),[2]}})})},t.prototype.load=function(){return o.b(this,void 0,void 0,function(){return o.d(this,function(e){switch(e.label){case 0:return Object(T.i)(""),this.props.id?[4,this.loadExistingCourse(this.props.id)]:[3,2];case 1:return e.sent(),[3,5];case 2:return this.props.templateId?[4,this.loadFromTemplate(this.props.templateId)]:[3,4];case 3:return e.sent(),[3,5];case 4:throw new Error(Object(c.a)(et||(et=o.e(["Ogiltig parameter. id eller templateId måste anges"],["Ogiltig parameter. id eller templateId måste anges"]))));case 5:return[2]}})})},t.prototype.loadExistingCourse=function(e){return o.b(this,void 0,void 0,function(){var t;return o.d(this,function(n){switch(n.label){case 0:return Object(c.o)("Laddar kurs"),[4,Object(T.e)(e)];case 1:return(t=n.sent()).responsibleTeachers||(t.responsibleTeachers=[]),[4,this.setNonSaveableDataState({course:t,origCourse:t})];case 2:return n.sent(),Object(c.o)(""),[2]}})})},t.prototype.update=function(e){return o.b(this,void 0,void 0,function(){return o.d(this,function(t){switch(t.label){case 0:return[4,this.setStatePromised({course:R()(this.state.course,e)})];case 1:return t.sent(),[2]}})})},t.prototype.deleteCourse=function(){return o.b(this,void 0,void 0,function(){var e,t,n,r,a,i,s,l;return o.d(this,function(u){switch(u.label){case 0:return Object(c.o)("Raderar kursen..."),n=this.state.course.school,this.state.course.parentId,r=this.props.id,[4,v.a.kedBackendClient.list("courses",{hasEdgesTo:[this.props.id]})];case 1:a=u.sent(),i=new w.a;try{for(s=o.h(a),l=s.next();!l.done;l=s.next())l.value}catch(t){e={error:t}}finally{try{l&&!l.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}return i.delete("courses",r),[4,v.a.kedBackendClient.batch(i.mutationRequests)];case 2:return u.sent(),n===v.a.currentUser.school&&ke.delete(r),Object(c.o)(""),location.hash="#/courses/new",[2]}})})},t.prototype.save=function(){return o.b(this,void 0,void 0,function(){var e,t,n,r,a;return o.d(this,function(i){switch(i.label){case 0:if(e=this.state.origCourse?Object(Ce.c)(this.state.origCourse):[],t=Object(Ce.c)(this.state.course),!(n=Qe()).roles.includes("ADMIN")&&!o.g(e,t).some(function(e){var t=e.email,r=e.access;return t===n.mail&&("edit"===r||"full"===r)}))return Object(c.n)(Object(c.a)(tt||(tt=o.e(["Kursen kunde inte sparas. Lägg till dig själv i listan på ansvariga lärare"],["Kursen kunde inte sparas. Lägg till dig själv i listan på ansvariga lärare"])))),[2];if(this.isSaving)return[2];i.label=1;case 1:return i.trys.push([1,3,4,5]),this.isSaving=!0,[4,this._save()];case 2:return i.sent(),[3,5];case 3:return r=i.sent(),a=r&&r.message?r.message:Object(c.a)(nt||(nt=o.e(["Ett okänt fel har inträffat..."],["Ett okänt fel har inträffat..."]))),r&&("http409"===r.name||"http412"===r.name||"http404"===r.name?a=Object(c.a)(rt||(rt=o.e(["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."],["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."]))):"http403"===r.name&&(this.state.course.isTemplate?a=Object(c.a)(at||(at=o.e(["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."],["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."]))):this.state.course.school&&(a=Object(c.a)(it||(it=o.e(["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""],["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""])),this.state.course.name,this.state.course.school)))),Object(c.n)(a),Object(T.i)("error"),[3,5];case 4:return this.isSaving=!1,[7];case 5:return[2]}})})},t.prototype._save=function(){return o.b(this,void 0,void 0,function(){var e,t,n,r,a,i,s,l,u,d,p,m;return o.d(this,function(h){switch(h.label){case 0:return e=this.state,t=e.course,n=e.origCourse,r=e.origTemplate,a=0===Object(Ce.e)(t).length,Object(c.o)(Object(c.a)(ot||(ot=o.e(["Sparar..."],["Sparar..."])))),i=Object(T.m)(Date.now(),t,v.a.currentUser),s=new w.a,l=n||r,u=i.tasks.map(function(e){if("add"===e.$meta||"update"===e.$meta){var t=l.tasks.find(function(t){return t.id===e.id});return Object(T.k)(t||{},e,"tasks",{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"},s)}var n=o.a({},e);return delete n.$meta,n}),i=R()(i,{tasks:{$set:u}}),i=Object(T.k)(n||{},i,"courses",{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"},s),(i=o.a({},i)).publishable=a,d=(i.tags||[]).filter(function(e){return"incomplete"!==e}),i.tags=i.publishable?d:d.concat("incomplete"),n?[3,3]:(s.add("courses",i),t.school?[4,ke.getSchoolId()]:[3,2]);case 1:p=h.sent(),s.link("schools",p,"courses",t.id,"courses"),t.active&&s.link("schools",p,"courses",t.id,"activeCourses"),h.label=2;case 2:return[3,7];case 3:return s.put("courses",i),n.active||!t.active?[3,5]:[4,ke.getSchoolId()];case 4:return p=h.sent(),s.link("schools",p,"courses",t.id,"activeCourses"),[3,7];case 5:return!n.active||t.active?[3,7]:[4,ke.getSchoolId()];case 6:p=h.sent(),s.unlink("schools",p,"courses",t.id,"activeCourses"),h.label=7;case 7:return[4,v.a.kedBackendClient.batch(s.mutationRequests)];case 8:return m=h.sent(),Object(c.o)(n?Object(c.a)(st||(st=o.e(["Ändringarna har sparats"],["Ändringarna har sparats"]))):Object(c.a)(lt||(lt=o.e(["Kursen har skapats"],["Kursen har skapats"])))),m&&m.newEtags&&(i=Object(T.b)(i,m.newEtags,["images","tasks"])),t.school===v.a.currentUser.school&&(n?ke.update(i):ke.insert(i)),[4,this.setNonSaveableDataState({course:i,origCourse:i,hasUnsavedData:!1})];case 9:return h.sent(),Object(T.i)(""),n||(location.hash="#/courses/"+i.id+"/edit"),[2]}})})},t.prototype.activateAndSave=function(){var e=this,t=o.a({},this.state.course);t.active||(t.active=!0,t.activatedBy={name:v.a.currentUser.displayName,url:"mailto:"+v.a.currentUser.mail},t.activatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(dt))},t.prototype.inactivateAndSave=function(){var e=this,t=o.a({},this.state.course);t.active&&(t.active=!1,t.inactivatedBy={name:v.a.currentUser.displayName,url:"mailto:"+v.a.currentUser.mail},t.inactivatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(dt))},t.prototype.openDialog=function(e){this.setNonSaveableDataState({dialogContainers:this.state.dialogContainers.concat(e)})},t.prototype.closeDialog=function(){var e=this.state.dialogContainers,t=e.length;for(t&&this.setNonSaveableDataState({dialogContainers:e.slice(0,t-1)});this.dialogs.length>=t;)this.dialogs.pop()},t.prototype.refDialog=function(e,t){this.dialogs[t]=e},t.prototype.onKeyDown=function(e){if(83===e.which&&(e.ctrlKey||e.metaKey)){if(e.preventDefault(),this.state.dialogContainers.length>0)return void this.saveDialog();this.save()}else if(27===e.which&&this.state.dialogContainers.length>0)this.closeDialog(),e.preventDefault();else if(13===e.which){var t=e.target;this.state.dialogContainers.length>0&&"TEXTAREA"!==t.tagName&&"INPUT"!==t.tagName&&"SELECT"!==t.tagName&&"OPTION"!==t.tagName&&!t.contentEditable&&this.saveDialog()}},t.prototype.beforeUnload=function(e){if((this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!v.a.kedBackendClient.http.bearerProvider.wantsRedirect)return e.returnValue=pt,e.returnValue},t.prototype.onClickPreventUnload=function(e){if(e.target&&"a"===(""+e.target.tagName).toLowerCase()){var t=e.target;if(t.href&&"#"!==t.getAttribute("href")&&!t.target&&(this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!confirm(pt))return e.preventDefault(),e.stopPropagation(),!1}},t.prototype.saveDialog=function(){if(this.state.dialogContainers.length>0){var e=this.dialogs[this.state.dialogContainers.length-1];e&&e.save()}},t.prototype.render=function(){var e=this,t=(v.a.currentUser.roles.indexOf("ADMIN"),this.state.course);return this.state.course?s.createElement("div",{style:{outline:0}},s.createElement(b.a,{title:t.name+" - "+t.points+"p",activePage:this.state.view,routes:{studentPage:Object(U.f)(this.props.viewCourseUrl,{courseId:this.props.id}),feedback:this.props.feedbackUrl},host:this,course:t,origCourse:this.state.origCourse,backgroundImage:t.images.filter(function(e){return e.id===t.imageId}).map(function(e){return e.url})[0],isTemplate:t.isTemplate}),s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},s.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer",ref:function(t){return e.contentDiv=t}},s.createElement(ut,{course:this.state.course,origCourse:this.state.origCourse,host:this}),s.createElement("br",null),this.state.dialogContainers.map(function(t,n){var r=t.Component,a=t.props;return s.createElement("div",{key:n},s.createElement("div",{className:"darken"}),s.createElement("div",{className:"modal-page-wrap"},s.createElement("div",{className:"modal-page"},s.createElement(r,o.a({ref:function(t){return e.refDialog(t,n)}},a)),s.createElement(ve.a,{onClick:function(){return e.closeDialog()}}))))})))))):s.createElement("div",{style:{outline:0}},s.createElement(b.a,{title:"",activePage:this.state.view,routes:{feedback:this.props.feedbackUrl}}),s.createElement("p",null,s.createElement(L.a,null),"V.g. vänta medan kursen laddas..."))},t}(s.Component),ft=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courseOptions:null,selectedTemplateId:"--",courses:null,selectedCourseId:""},n}return o.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(c.n)},t.prototype.load=function(){return o.b(this,void 0,void 0,function(){var e,t,n;return o.d(this,function(r){switch(r.label){case 0:return Object(c.o)("Laddar kurser"),[4,v.a.kedBackendClient.list("subjects",{tags:["schoolType:gymnasium"],include:"courseTemplates"})];case 1:return e=r.sent(),t=Object(c.k)(e.map(function(e){return e.courseTemplates})).sort(Object(c.g)("name")),n=[{id:"--",name:"--"}].concat(t),Object(c.o)(""),this.setState({courseOptions:n}),[2]}})})},t.prototype.onSelectCourse=function(e){return o.b(this,void 0,void 0,function(){var t,n,r,a,i;return o.d(this,function(s){switch(s.label){case 0:return[4,v.a.kedBackendClient.list("courses",{hasEdgesTo:[e]})];case 1:return t=s.sent(),n=t.filter(function(e){return e.active}).map(function(e){var t=e.id,n=e.school,r=e.description,a=e.createdBy,i=e.modifiedBy;r&&(r=Object(c.l)(r,80));var o=r||(a?a.name+"s version":i&&i.name+"s version");return{id:t,name:"standard"===n?r?"Standard - "+r:"Standard":n+" - "+Object(c.l)(o,90),school:n}}).sort(Object(c.g)("name")),r=n.filter(function(e){return"standard"===e.school}),a=n.filter(function(e){return"standard"!==e.school}),i=o.g(r,[{id:e,name:"Tom"}],a),this.setState({courses:i,selectedTemplateId:e,selectedCourseId:i[0].id}),[2]}})})},t.prototype.render=function(){var e=this,t=this.state,n=t.courseOptions,r=(t.selectedTemplateId,t.courses),a=t.selectedCourseId;return s.createElement("div",{style:{outline:0}},s.createElement(b.a,{title:Object(c.a)(ct||(ct=o.e(["Kursbyggaren"],["Kursbyggaren"]))),activePage:"courseBuilder",routes:{feedback:this.props.feedbackUrl}}),s.createElement("div",{className:"sv-row sv-layout"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},s.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},s.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},s.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("h2",null,"Skapa ny kurs"),s.createElement("hr",null),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"Välj gymnasiekurs :"))),s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},n?s.createElement("select",{value:this.state.selectedTemplateId,onChange:function(t){return e.onSelectCourse(t.target.value).catch(c.n)}},n.map(function(e){return s.createElement("option",{key:e.id,value:e.id},e.name)})):s.createElement("div",null,s.createElement(L.a,null),s.createElement("select",{disabled:!0,value:""},s.createElement("option",null,"--"))))),r&&s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("p",null,"Utgå från version: "))),r&&s.createElement("div",{className:"align-horizontal spaced"},s.createElement("div",{className:"horizontalItem top"},s.createElement("select",{value:a,onChange:function(t){return e.setState({selectedCourseId:t.target.value})}},r.map(function(e){return s.createElement("option",{key:e.id,value:e.id},e.name)})))),s.createElement("br",null),s.createElement("br",null),r&&a&&s.createElement(Ee.a,{to:"/courses/create-from-template/"+this.state.selectedCourseId,className:"btn btn-large"},"Skapa"))),s.createElement("div",{className:"sv-layout sv-column-5"},s.createElement(Te,null))))))))},t}(s.Component),vt=n(11),gt=n.n(vt),bt=3e5,yt="/4.4b4cce2a160e445593f16043.html",kt=Date.now();function Et(){kt=Date.now()}function wt(){Date.now()-kt<bt&&function(){o.b(this,void 0,void 0,function(){var e,t;return o.d(this,function(n){switch(n.label){case 0:console.log("Sending heartbeat request to "+yt),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,fetch(yt,{cache:"no-cache",credentials:"same-origin"})];case 2:return e=n.sent(),console.log("Response from "+yt+": "+e.status+" "+e.statusText),[3,4];case 3:return t=n.sent(),console.warn("Request to "+yt+" failed: "+t),[3,4];case 4:return[2]}})})}()}n.d(t,"a",function(){return Ct}),setInterval(wt,bt),setTimeout(function(){return gt()("body").mousemove(Et).keypress(Et).scroll(Et)},100);var Tt,Ct=function(e){function t(t){return e.call(this,t)||this}return o.c(t,e),t.prototype.render=function(){var e=this,t=v.a.currentUser.roles.some(function(e){return"ADMIN"===e||"EMPLOYEE"===e}),n=v.a.currentUser.roles.some(function(e){return"ADMIN"===e});return s.createElement("div",{className:"course-builder"},s.createElement(u.a,null,t?s.createElement("div",null,s.createElement(d.a,{exact:!0,path:"/",render:function(t){t.match;return n?s.createElement(m.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl}):s.createElement(ft,{feedbackUrl:e.props.feedbackUrl})}}),s.createElement(d.a,{exact:!0,path:"/schools",render:function(t){t.match;return s.createElement(m.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),s.createElement(d.a,{exact:!0,path:"/schools/new/gymnasium",render:function(){return s.createElement(f,{type:"gymnasium",feedbackUrl:e.props.feedbackUrl})}}),s.createElement(d.a,{exact:!0,path:"/schools/new/primary",render:function(){return s.createElement(f,{type:"primary",feedbackUrl:e.props.feedbackUrl})}}),s.createElement(d.a,{exact:!0,path:"/schools/:id/edit",render:function(t){var n=t.match;return s.createElement(h.a,{id:n.params.id,title:Object(c.a)(Tt||(Tt=o.e(["Editera skola"],["Editera skola"]))),feedbackUrl:e.props.feedbackUrl})}}),s.createElement(d.a,{exact:!0,path:"/subjects",render:function(){return s.createElement(k,{feedbackUrl:e.props.feedbackUrl})}}),s.createElement(d.a,{path:"/subjects/:id",render:function(t){var n=t.match;return s.createElement(g.a,{id:n.params.id,feedbackUrl:e.props.feedbackUrl})}}),s.createElement(d.a,{exact:!0,path:"/courses/new",render:function(){return s.createElement(ft,{feedbackUrl:e.props.feedbackUrl})}}),s.createElement(d.a,{path:"/courses/create-from-template/:templateId",render:function(t){var n=t.match;return s.createElement(ht,{templateId:n.params.templateId,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),s.createElement(d.a,{path:"/courses/:id/edit",render:function(t){var n=t.match;return s.createElement(ht,{id:n.params.id,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}})):s.createElement("div",null,s.createElement(d.a,{path:"/",render:function(){return s.createElement("div",null,s.createElement(b.a,{title:"Kursbyggaren",activePage:"courseBuilder",routes:{feedback:e.props.feedbackUrl}}),s.createElement("h2",null,"Behörighet saknas"),s.createElement("p",null,"Detta verktyg är endast till för anställda på Kunskapsskolan."),s.createElement("h3",null,"Användarattribut"),s.createElement("table",{className:"ked_boxed",style:{border:"1px solid #eee"}},s.createElement("thead",null,s.createElement("tr",null,s.createElement("th",null,"Attribut"),s.createElement("th",null,"Värde"))),s.createElement("tbody",null,Object.keys(v.a.currentUser).map(function(e){return s.createElement("tr",{key:e},s.createElement("td",null,e),s.createElement("td",null,v.a.currentUser[e]))}))))}}))),s.createElement(p.a,null))},t}(s.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=n(24),i=(n(87),n(3)),o=n(7),s=n(0),l=n(153),c=n(2),u=n(13),d=i.a.bearerProvider.getBearer(),p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isTokenLoaded:!1},n}return r.c(t,e),t.prototype.componentWillMount=function(){var e=this;d.then(function(){e.setState({isTokenLoaded:!0})}).catch(function(e){Object(c.n)(e)})},t.prototype.render=function(){return this.state.isTokenLoaded?s.createElement(l.a,{viewCourseUrl:o.b.KED_COURSE_VIEWER_URL,feedbackUrl:this.props.feedbackUrl}):s.createElement("p",null,s.createElement(u.a,null),"V.g. vänta... autenticerar...")},t}(s.Component);a.a.components=r.a({},a.a.components,{KEDAppCourseBuilder:p})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,