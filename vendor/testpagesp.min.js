var testpagesp=function(e){function t(t){for(var r,i,o=t[0],c=t[1],l=t[2],d=0,m=[];d<o.length;d++)i=o[d],a[i]&&m.push(a[i][0]),a[i]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(e[r]=c[r]);for(u&&u(t);m.length;)m.shift()();return s.push.apply(s,l||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var c=n[o];0!==a[c]&&(r=!1)}r&&(s.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={9:0},s=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],c=o.push.bind(o);o.push=t,o=o.slice();for(var l=0;l<o.length;l++)t(o[l]);var u=c;return s.push([269,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return i}),n.d(t,"k",function(){return c}),n.d(t,"g",function(){return l}),n.d(t,"h",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return p}),n.d(t,"n",function(){return f}),n.d(t,"l",function(){return h}),n.d(t,"b",function(){return b}),n.d(t,"c",function(){return g}),n.d(t,"e",function(){return v}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return y});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function i(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var o=[].concat;function c(e){return o.apply([],e)}function l(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function u(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var i=t[r],o=n[r];return i===o?0:null==i?-1:null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function f(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function h(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function b(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],i=t(s),o=n[i];o?o.push(s):n[i]=[s]}return n}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function v(e,t){var n,a,s={};try{for(var i=r.h(t),o=i.next();!o.done;o=i.next()){var c=o.value;c in e&&(s[c]=e[c])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(n)throw n.error}}return s}function k(e,t){var n=g(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function y(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var i=n[a];if(r[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(31);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(27);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,function(e,t,n){"use strict";var r=n(3),a=n(4),s=n(18),i=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(24);function c(e,t){return o.a[e].relationships[t]}function l(e,t){var n=function(e){var t=function(e){return!0};return e.from?u(t,function(t){return t.dateTime>=e.from}):e.to?u(t,function(t){return t.dateTime<e.to}):e.ids?u(t,function(t){return e.ids.includes(t.id)}):e.name?u(t,function(t){return t.name===e.name}):e.tags?u(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function u(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var p=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var s=a[r];localStorage.setItem("cache-bust-"+n+"-"+s,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+c(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),f=n(14);function h(e,t){for(var n=Object.keys(t),r=e,s=0,i=n;s<i.length;s++){var o=i[s];r===e&&(r=a.a({},e));var c=t[o];if(c&&"object"==typeof c){var l=Object.keys(c).filter(function(e){return e.startsWith("$")});if(l.length>0){for(var u=function(e){var t=c[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var s=0,i=n;s<i.length;s++){var l=i[s];a.includes(l)||a.push(l)}break;case"$remove":var u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!u.includes(e)})}},d=0,m=l;d<m.length;d++){u(m[d])}continue}}r[o]=c}return r}function b(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,s=Object.keys(t),i=a.a({},e),o=0,c=s;o<c.length;o++){var l=c[o],u=t[l];if(u&&"object"==typeof u){var d=Object.keys(u).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var m=function(e){var t=u[e];switch(e){case"$unset":r?delete i[l]:i[l]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");o=(o=i[l])?a.a({},o):{},i[l]=o;var s=o.$remove;Array.isArray(s)&&(o.$remove=s.filter(function(e){return!n.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(n):n.slice(),o.$add=d;break;case"$remove":var o,c=t;if(!Array.isArray(c))throw new Error("$remove instruction must contain array");o=(o=i[l])?a.a({},o):{},i[l]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!c.includes(e)}),0===o.$add.length&&delete o.$add),s=(s=o.$remove)?s.concat(c):c.slice(),o.$remove=s}},p=0,f=d;p<f.length;p++){m(f[p])}continue}}i[l]=u}return i}var g=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(s=r[n]).op||s.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==s.op||s.targetBranchId&&s.branchId!==this.query.branchId&&s.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===s.op&&(s.deltaDoc.tags&&this.query.tags||s.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:i=this.getDataWithMutationsApplied(e,!1,this.data),this.data=i,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,s=this.includes,i=this.query,o=i.hasEdgesFrom?[].concat(i.hasEdgesFrom||[]):[],l=i.tags?[].concat(i.tags||[]):[];switch(t.op){case"update":return Object(f.e)(e,function(e){if(e.id===t.id){var r=h(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return s.forEach(function(r){var s,i=e[r];if(i){var o=Object(f.e)(i,function(e){if(e.id!==t.id)return e;var r=h(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==i&&(e=a.a({},e,((s={})[r]=o,s)))}}),e});case"add-related":if(r===t.table&&-1!==s.indexOf(t.graphProp))return Object(f.e)(e,function(e){var r;if(e.id!==t.id)return e;var s=a.a({},t.relatedDoc);return n&&(s.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([s]),r))});if(i.hasEdgesFrom&&o.includes(t.id)&&r===c(t.table,t.graphProp)){if(!i.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&l.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return i.ids&&i.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==s.indexOf(t.graphProp)?Object(f.e)(e,function(e){var r,s=e[t.graphProp];return s?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?s.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):s.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):i.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(i.include){var u=s.map(function(e){return{label:e,table:c(r,e)}}).filter(function(e){return e.table===t.table});if(u.length>0)return Object(f.e)(e,function(e){return u.forEach(function(r){var s,i=r.label,o=e[i];o&&(e=a.a({},e,((s={})[i]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),s)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),v=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new i(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return g.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesFrom",e)},t.prototype.hasEdgesTo=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesTo",e)},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:p.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new s.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(37).a),k=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===g.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var s=a.find(function(t){return o.a[r.table].relationships[t]===e});if(s){for(var i={},c=0,u=r.data;c<u.length;c++){var d=u[c];l(t,d[s]).forEach(function(e){return i[e.id]=e})}var m=Object.keys(i).map(function(e){return i[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var p=l(t,r.data);return t.ids.every(function(e){return p.some(function(t){return t.id===e})})?{value:p}:"continue"}},s=0,i=this.queries;s<i.length;s++){var c=a(i[s]);if("object"==typeof c)return c.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,s=this.findQuery(n,r);s?s.timeoutHandle&&(clearTimeout(s.timeoutHandle),s.timeoutHandle=null):(s=new g(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(s)),s.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,s=(n.repo,this.findQuery(r,a));s&&(s.unsubscribe(e),0===s.subscriptions.length&&(s.timeoutHandle=setTimeout(function(){0===s.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==s}))},this.queries.length>50?500:3e5)))},e}(),y=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return c(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return c(e,t)})).some(function(e){return c(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),s=e.length,i=function(t){var s=e[t];if("update"===s.op){var i=r.findIndex(function(e){return"update"===e.op&&e.branchId===s.branchId&&e.id===s.id});i>=0&&(n[t]=a.a({},s,{deltaDoc:b(s.deltaDoc,r[i].deltaDoc)}),r.splice(i,1))}},o=0;o<s;++o)i(o);return n.concat(r)},e}(),E=n(42);function w(e,t,n,r,s,i){for(var o=function(n){switch(n.op){case"add-related":i||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:s}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(i||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:s,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((c=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var o=t[c];t=t.slice(0,c).concat([a.a({},o,{$meta:r?"removing":"persisted"})],t.slice(c+1))}else t=t.slice(0,c).concat(t.slice(c+1));break;case"update":if(n.branchId!==e)return"continue";var c;if((c=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!i)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[s],$meta:r?"adding":"persisted"}].concat(t);else{var l=t[c],u=l.contributors.slice();u.includes(s)||u.push(s);var d=b(l.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:u,$meta:r?"updating":"persisted"}].concat(t.slice(0,c),t.slice(c+1)):t.slice(0,c).concat(t.slice(c+1))}}},c=0,l=n;c<l.length;c++){var u=o(l[c]);if("object"==typeof u)return u.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var s=a[r],i=this.lookup[s];if(i.value){var o=w(i.query.branchId,i.value,e,n,this.getUserDisplayName(),!!i.query.tags);null===o&&(n||i.fetch()),o!==i.value&&(i.optimisticValue=o,n||(i.value=o),i.notify(o))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new O(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),O=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=s.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(s.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),j=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),s=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),p.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(y.merge(e,s),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return i=a.sent(),this.persistedVersion.dispatchError(i),i&&i.name&&i.name.startsWith("http4")?(this.dispatchError(i,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(i,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new s.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),N=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),I=function(){function e(e,t,n,r,a,s,i,c){var l=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=s,this.writer=i,this.cacheOptimized=c,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new y),s||(this.querySet=new k(this.mutationQueue)),i||(this.writer=new j(this.mutationQueue,this.querySet,e,t,n)),Object.keys(o.a).forEach(function(e){var t=new v(l,e,r||{});c&&(t=t.cacheOptimized()),l[e]=t}),this.deltas=new N(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new v(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var C=n(5),S=n(7);n.d(t,"c",function(){return D}),n.d(t,"d",function(){return x}),n.d(t,"b",function(){return R}),n.d(t,"a",function(){return L});var D=new I(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),x=Object(C.i)(S.b.KED_REALM),R={standardSchool:D.schools.name("standard").cacheOptimized().single(),get mySchool(){return D.schools.name(r.a.currentUser.school).cacheOptimized().single()}},L={getBranchId:function(e,t){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return D.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return D.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(C.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return D.courseBlocks.tags(e).idsOnly().concat(D.courseContents.tags(e).idsOnly()).concat(D.courseTabs.tags(e).idsOnly()).concat(D.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(15);n.d(t,"a",function(){return i}),n.d(t,"c",function(){return c}),n.d(t,"e",function(){return l}),n.d(t,"d",function(){return u}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return p});var i=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function c(e,t){return o(e,t,"W")}function l(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function u(e,t){return e.roles.includes("ADMIN")||l(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,i=Object(s.b)(location.search),o=r.a({},i,{role:t,school:n}),c=Object(s.a)(o);a?location.href=""+a+c:(location.hash="#",location.search=c)}};function m(e){d.actAs(e)}function p(e,t){var n,a,o=Object(s.b)(location.search),c={};try{for(var l=r.h(i),u=l.next();!u.done;u=l.next()){var d=u.value;o[d]&&(c[d]=o[d])}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}var m=Object(s.a)(r.a({},c,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+m+e.substr(p):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return c});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function c(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],i=t(s);i!==s&&(n===e&&(n=e.slice()),n[r]=i)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],i=t[1];return a[n?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"l",function(){return m}),n.d(t,"c",function(){return p}),n.d(t,"h",function(){return f}),n.d(t,"i",function(){return h}),n.d(t,"n",function(){return b}),n.d(t,"k",function(){return g}),n.d(t,"d",function(){return v}),n.d(t,"m",function(){return k}),n.d(t,"b",function(){return y}),n.d(t,"g",function(){return w}),n.d(t,"a",function(){return T}),n.d(t,"j",function(){return O}),n.d(t,"f",function(){return j}),n.d(t,"e",function(){return N});var r=n(1),a=n(6),s=n.n(a),i=n(5),o=n(41),c=n.n(o),l=n(11),u=n.n(l),d=n(3);function m(e,t,n,a,s){var o,l,u={},d=t.id,m=function(o){var c,l,m,p,f,h,b=a[o],g=e[o]||[],v=t[o];if(!v)return"continue";var k=v.map(function(e,t){return{doc:e,idx:t}}),y=k.filter(function(e){return!g.some(function(t){return t.id===e.doc.id})});try{for(var E=(c=void 0,r.h(y)),w=E.next();!w.done;w=E.next()){var T=w.value,O=(R=r.a({},T.doc)).$meta;delete R.$meta,"add"===O?(R.id||(R.id=Object(i.h)()),s.add(b,R)):"update"===O&&s.put(b,R),s.link(n,d,b,R.id,o),u[o]||(u[o]={}),u[o][T.idx]={$set:R}}}catch(e){c={error:e}}finally{try{w&&!w.done&&(l=E.return)&&l.call(E)}finally{if(c)throw c.error}}var j=g.filter(function(e){return!v.some(function(t){return t.id===e.id})});try{for(var N=(m=void 0,r.h(j)),I=N.next();!I.done;I=N.next()){var C=I.value;s.unlink(n,d,b,C.id,o)}}catch(e){m={error:e}}finally{try{I&&!I.done&&(p=N.return)&&p.call(N)}finally{if(m)throw m.error}}var S=k.filter(function(e){return g.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var D=(f=void 0,r.h(S)),x=D.next();!x.done;x=D.next()){var R,L=x.value;delete(R=r.a({},L.doc)).$meta,s.put(b,R),u[o]||(u[o]={}),u[o][L.idx]={$set:R}}}catch(e){f={error:e}}finally{try{x&&!x.done&&(h=D.return)&&h.call(D)}finally{if(f)throw f.error}}};try{for(var p=r.h(Object.keys(a)),f=p.next();!f.done;f=p.next()){m(f.value)}}catch(e){o={error:e}}finally{try{f&&!f.done&&(l=p.return)&&l.call(p)}finally{if(o)throw o.error}}return c()(t,u)}function p(e){return s()(e).format("YYMMDD HH:mm")}function f(e){return s()(e).format("YYMMDD")}function h(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function b(e,t,n){return c()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function g(e,t,n){return c()(t,{createdDate:{$set:e},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function v(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function k(e,t){var n=Date.now();return(e=b(n,e,t)).createdBy||(e=g(n,e,t)),e}function y(e,t,n){var a,s,i=r.a({},e),o=t[e.id];o&&(i.$etag=o);try{for(var c=r.h(n),l=c.next();!l.done;l=c.next()){var u=l.value,d=e[u].map(function(e){return y(e,t,[])});i[u]=d}}catch(e){a={error:e}}finally{try{l&&!l.done&&(s=c.return)&&s.call(c)}finally{if(a)throw a.error}}return i}function E(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return E(0,function(t){return t.readAsText(e)})}function T(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function O(e){var t=u()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function j(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,c,l;return r.d(this,function(u){switch(u.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,s=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),s&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return i=r.f.apply(void 0,[u.sent(),3]),o=i[0],c=i[1],l=i[2],o.tasks=c,o.abilities&&o.abilitiesOrder&&(o.abilities=o.abilitiesOrder.map(function(e){return o.abilities.find(function(t){return t.id===e})})),o.knowledgeRequirements&&o.knowledgeRequirementsOrder&&(o.knowledgeRequirements=o.knowledgeRequirementsOrder.map(function(e){return o.knowledgeRequirements.find(function(t){return t.id===e})})),o.centralContent&&o.centralContentOrder&&(o.centralContent=o.centralContentOrder.map(function(e){return o.centralContent.find(function(t){return t.id===e})})),a&&(o.templateChain=l),[2,o]}})})}function N(e,t){return void 0===e||t.filter(function(t){return!e.includes(t)}).length>0||e.filter(function(e){return!t.includes(e)}).length>0}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(14),s=n(32),i=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,i){return r.b(this,void 0,void 0,function(){var o,c,l,u,d,m,p,f,h,b,g;return r.d(this,function(v){switch(v.label){case 0:return i&&"no-cache"===i.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),l=(c=this).authHeader,u=c.tokenInfo,d=c.bearerProvider,l||u||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=u=v.sent(),v.label=2;case 2:return u?u.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=u=v.sent(),v.label=4;case 4:l="Bearer "+u.token,v.label=5;case 5:return l&&(n.Authorization=l),f=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 6:return 401==(h=v.sent()).status&&this.bearerProvider?(b=h.headers.get("www-authenticate"),console.log("Got "+h.status+" from "+(this.baseUrl+e)),b&&/Bearer/i.test(b)?(g=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return g.tokenInfo=v.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 8:h=v.sent(),v.label=9;case 9:return[2,h]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,s,o,c){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=c,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),c=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function l(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var u=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return c}),n.d(t,"j",function(){return l}),n.d(t,"f",function(){return i}),n.d(t,"c",function(){return u});var d=function(){function e(e,t,n){this.http=new i(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(i=u.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(u,o.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i,o;return r.d(this,function(c){switch(c.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=c.sent()).status?[3,3]:(i=u.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(u,o.concat([c.sent()])));case 3:return[4,s.json()];case 4:return[2,c.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=u.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(u,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,i=e.backgroundColor,o=e.progressColor,c=[];if(n>s)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var l=1;l<=n;l++)c.push(a.createElement("svg",{key:l},a.createElement("circle",{className:"circle-chart-background",fill:l>r?i:o,cx:"8",cy:"8",r:"8"})));return c},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return i});var i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,i=t.className,o=t.children,c=t.headerClassName,l=t.contentClassName,u=t.displayProgress,d=t.progressData,m=t.inactivated,p=t.inactivatedRender,f=this.state.headerOpen;return m?"titleAndChildren"===p?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,n),a.createElement(a.Fragment,null,o)):a.createElement(a.Fragment,null,o):a.createElement("div",{className:(i||"")+" openClose"+(f?" open":"")},a.createElement("div",{className:"openHeader"+(c?" "+c:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),u&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(l?" "+l:"")},o))},t}(a.Component)},function(e,t,n){"use strict";var r=n(4),a=n(18),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=n(14);function o(e){e.resources||(e.resources=[])}function c(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var l=sessionStorage.getItem("redir-hash");if(l)try{var u=JSON.parse(l),d=u.time,m=u.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return c(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return c(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var p=new s,f=Date.now(),h=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-f>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[r.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),b={fetch:fetch.bind(self),btoa:btoa.bind(self)},g=function(e){function t(t,n,r){var a="string"!=typeof n?n:new h(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,b,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return p}),n.d(t,"b",function(){return h}),n.d(t,"c",function(){return b}),n.d(t,"a",function(){return g})},,function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return c}),n.d(t,"a",function(){return l});var r=n(1),a=n(6),s=n.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e,t){var n=null;n=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var r=s()(n.toString(),"YYYY");return 1!=r.week()&&(r=r.clone().add(1,"week")),t?[s()(r.clone()).week(32).startOf("week"),s()(r.clone()).week(51).endOf("week")]:[s()(r.clone()),s()(r.clone()).week(25).endOf("week")]}function c(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function l(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(38);function s(e){var t=e.children,n=e.spinner,s=e.onError,i=e.noError;return r.createElement(a.a,{props:t,spinner:n,noError:i,onError:s,fn:function(e){return e}})}},function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},function(e,t,n){"use strict";var r=n(58);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b})},,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(35),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(55),s=n(3),i=n(6),o=n.n(i),c=n(75),l=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(c.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(o()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return o()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),u=n(5),d=n(40);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var m=s.a.userTasksRepo,p=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,i,c;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,l.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,i=o()(s).week(),[2,{from:(c=Object(d.a)(o()(s).year(),i)).notBefore,to:c.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,c,l,u;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,i=a(),c=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},c,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:o()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:o()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return l=r.sent(),0===(u=l.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&u.push(e),[4,this.update(u,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(r){switch(r.label){case 0:return(n=this.persistedState)?[3,2]:[4,l.load(this.options.user)];case 1:n=r.sent(),r.label=2;case 2:return(a=new l(n)).weekDate=t?o()(e).valueOf():o()(e).startOf("week").valueOf(),a.save(),this.persistedState=a,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(u.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new u.b("email",t.getCurrentUser().mail,"S"),new u.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);m||(m=s.a.userTasksRepo=new p(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(33).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(4),a=n(34),s=n(45),i=n(37),o=n(50),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,i){r=!0,e=a,t=s,s&&n?n(null,s,i):n&&n(a,null,i)});if(r){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,c=s.observer;return i.push(a),n=c,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],i={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,i,o){if(a=o,r&&(r.unsubscribe(),r=null),i)t(null,i,s);else try{var c=e(n);c&&"function"==typeof c.subscribe?r=c.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(c,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);c.prototype.map=Object(s.a)(c)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},function(e,t,n){"use strict";var r=n(42);n.d(t,"a",function(){return r.b}),n.d(t,"b",function(){return r.c})},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(4),a=n(34),s=n(45),i=n(33),o=n(32),c=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);c.prototype._map=Object(s.a)(c)},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(2);function i(e,t){return function(n){return a.createElement(o,r.a({props:n,fn:e},t))}}var o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={result:null,isLoading:!0},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.subscribe()},t.prototype.componentWillUnmount=function(){this.unsubscribe()},t.prototype.shouldComponentUpdate=function(e,t){return this.state.error!==t.error||this.state.isLoading!==t.isLoading||this.state.result!==t.result||!Object(s.m)(e.props,this.props.props)},t.prototype.componentDidUpdate=function(e){Object(s.m)(e.props,this.props.props)||(this.unsubscribe(),this.subscribe())},t.prototype.subscribe=function(){var e=this;this.setState({isLoading:!0}),this.subscription=this.props.fn(this.props.props).subscribe(function(t,n){return e.setState({result:t,error:n,isLoading:!1})})},t.prototype.unsubscribe=function(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null)},t.prototype.render=function(){var e=this.state,t=e.result,n=e.error,r=e.isLoading,s=this.props,i=s.spinner,o=s.onError,c=s.noError;return n?c?"":o?o(n):a.createElement("p",null,"Error: ",n.message):r?i||"":void 0===t?"":t},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,c=e.title;return s.createElement("div",{title:c||Object(i.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"c",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return c});var r=n(6),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function i(e){var t=a()(e).add(1,"week");return e.week()===e.weeksInYear()&&t.year()===e.year()?{adjusted:!0,nextDate:a()(e.year()+1+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function o(e){var t=a()(e).add(-1,"week");return 2===e.week()&&t.year()!==e.year()?{adjusted:!0,nextDate:a()(e.year()+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function c(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},,function(e,t,n){"use strict";n(34),n(33);var r=n(37);n.d(t,"a",function(){return r.a});var a=n(32);n.d(t,"b",function(){return a.a});var s=n(50);n.d(t,"c",function(){return s.a})},function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(22),i=n(6),o=n.n(i);var c=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),l=n(2),u=n(53),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return p}),n.d(t,"a",function(){return f});var m,p=function(){function e(t,n,s,i){var o=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=i;var c=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){c(e)&&(o[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),i={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))c(o);function c(t){Object.keys(t).forEach(function(o){!s.hasOwnProperty(o)&&n(o)&&(s[o]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var c=JSON.stringify(r.g([o],n)),l=i[c];if(void 0!==l){if(l.promise)throw l.promise;if(l.error)throw l.error;if(l.timeout>Date.now())return l.value}try{var u=t[o].apply(e,n).then(function(e){i[c]={timeout:Date.now()+a,value:e}}).catch(function(e){i[c]={timeout:Date.now()+a,error:e}});throw i[c]={timeout:Date.now()+a,promise:u},u}catch(e){if(e.then)throw e;i[c]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:c})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i,o;return r.d(this,function(c){switch(c.label){case 0:return c.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=c.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([c.sent()])));case 3:return[4,n.json()];case 4:return[2,c.sent().courses];case 5:throw o=c.sent(),console.error("Error from EDS: "+o),new Error(Object(l.a)(m||(m=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,c,l,d,m,p,f;return r.d(this,function(r){switch(e){case"en_sin":return[2,u.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,u.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=Object(s.d)(t,!0),i=Object(s.d)(t,!1),c=a[0],l=i[0],d=a[1],m=i[1],p={startDate:new Date(c.year(),c.month(),c.date()).toDateString(),endDate:new Date(c.year(),d.month(),d.date()).toDateString()},f={startDate:new Date(l.year(),l.month(),l.date()).toDateString(),endDate:new Date(l.year(),m.month(),m.date()).toDateString()},[2,{firstTerm:p,secondTerm:f,holidays:n}]}return[2]})})},e}(),f=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new c(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new c({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},,function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return c});var r=n(1),a=n(36),s=n(9),i=n(2);function o(e,t,n){var r=(void 0===n?{appendLeftovers:!1}:n).appendLeftovers,a={};if(!e||!t)return e;var s=e&&t?t.map(function(t){return a[t]=!0,e.find(function(e){return e.id===t})}).filter(function(e){return!!e}):e;if(r){var i=e.filter(function(e){return!a[e.id]});return s.concat(i)}return s}function c(e,t){var n,c;if(t)c=new a.a([t]);else{var l=e.tags.filter(function(e){return e.startsWith("course:")});if(0===l.length)return new a.a(e);c=(n=s.c.courses).tags.apply(n,r.g(l)).toValue()}return c.map(function(t){var n=Object(i.k)(t.map(function(e){return e.abilitiesOrder||[]})),r=Object(i.k)(t.map(function(e){return e.centralContentOrder||[]})),a=Object(i.k)(t.map(function(e){return e.knowledgeRequirementsOrder||[]})),s=Object.assign({},e);return s.abilities&&(s.abilities=o(e.abilities,n)),s.centralContent&&(s.centralContent=o(e.centralContent,r)),s.knowledgeRequirements&&(s.knowledgeRequirements=o(e.knowledgeRequirements,a)),s})}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(35),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},function(e,t,n){"use strict";n.d(t,"e",function(){return a}),n.d(t,"d",function(){return s}),n.d(t,"a",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"c",function(){return c});var r=n(2);function a(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("sub:")}).map(function(e){return e.substr("sub:".length)}))}function s(e){return Object(r.j)((e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr(e.indexOf("|")+1)}))}function i(e,t,n){var a=(e||[]).filter(function(e){return!e.startsWith("course:")&&!e.startsWith("sub:")}),s=t.map(function(e){return"sub:"+e}),i=Object(r.k)(t.map(function(e){return n.map(function(t){return"course:"+e+"|"+t})}));return a.concat(s).concat(i)}function o(e,t){return i(e,a(e),t)}function c(e,t){return i(e,t,s(e))}},function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Minska indrag",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Öka indrag",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Vågrät linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga länk",result:function(){var e=window.prompt("Ange länkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,s=window.prompt(this.promptMsg);if(s){var i=document.createElement("img");i.src=s,i.tabIndex=1,n=i,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),i.onfocus=t.onFocus,i.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(77),s=n(5),i=function(){function e(e){var t=this,n=e.table,s=e.getClient,i=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,c,l,u=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,i=n.table,o=a(),c=e.map(function(e){var n=u.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(c.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.do(function(e){return c.forEach(function(t){return e.put(i,t)})}).catch(function(n){return"http409"===n.name?o.list(i,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return o.do(function(e){return n.forEach(function(t){return e.put(i,t)})})}):Promise.resolve(s&&u.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return l=r.sent(),this.regenerateCacheBust(),c.forEach(function(e){e.$etag=l.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(c)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,c,l,u,d,m,p,f,h,b,g,v,k,y=this;return r.d(this,function(E){switch(E.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,i=t.table,o=t.getQueryOptions,c=n(),[4,o()];case 1:return l=E.sent(),u=[].concat(l.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),d=this.stripGraphs(e,u),a?[4,this.mem.insert(d.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:E.sent(),E.label=3;case 3:m=new s.a,p=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){m.link2(i,e.id,t,n.id)})};try{for(var s=(t=void 0,r.h(u)),o=s.next();!o.done;o=s.next()){a(o.value)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}m.add(i,e)};try{for(f=r.h(d),h=f.next();!h.done;h=f.next())b=h.value,p(b)}catch(e){v={error:e}}finally{try{h&&!h.done&&(k=f.return)&&k.call(f)}finally{if(v)throw v.error}}return[4,c.batch(m.mutationRequests).catch(function(t){return a&&y.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return g=E.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=g.newEtags[e.id]}),a?[4,this.mem.update(e)]:[3,6];case 5:return E.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:E.sent(),E.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o=this;return r.d(this,function(c){switch(c.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,i=n(),a?[4,this.mem.update(e.map(function(e){return o.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:c.sent(),c.label=2;case 2:return[4,i.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(o,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return c.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return c.sent(),[2]}})})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(10),i=new DOMParser,o={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function c(e){for(var t=i.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)l(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function l(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&o[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),u(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),s=a.name&&!!t[a.name.toLowerCase()];s||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),u(e)&&(t=!0),t}function u(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)l(n.item(r))&&(t=!0);return t}var d=n(80);n.d(t,"a",function(){return v});var m="wysiwyg-actionbar",p="wysiwyg-button",f="wysiwyg-content",h="wysiwyg-focusrect",b="wysiwyg-focuspoint",g="wysiwyg-content readonly",v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||c(e.html)!==c(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(c(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:k(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(b)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),s=a.next();!s.done;s=a.next()){switch(s.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,i=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(i=i.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta vänster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta höger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden på egen rad",result:function(){return e("unfloat")}}])));var o=this.state.focusRect,l=this.props,u=l.readOnly,v=l.reportNumChars,k=l.maxChars;return a.createElement("div",{className:this.props.className},!u&&a.createElement("div",{className:m},i.map(function(e,n){return a.createElement("button",{key:n,className:p,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:u?g:f,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:c(this.props.html)},contentEditable:!u,onPaste:function(e){if(!isNaN(k)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>k&&e.preventDefault()}},onKeyUp:v?function(e){var t=e.target.innerText;v(t?t.length:0)}:null,onKeyPress:isNaN(k)?null:function(e){var t=e.target.innerText;t&&t.length>=k&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){u||(v&&e.currentTarget&&v((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(s.a)("outdent"):Object(s.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),o&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:h,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:b+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:b+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:b+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:b+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function k(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},function(e,t,n){"use strict";n.d(t,"e",function(){return u}),n.d(t,"b",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"f",function(){return p}),n.d(t,"d",function(){return f}),n.d(t,"c",function(){return h});var r,a,s,i,o=n(1),c=n(2),l=n(16);function u(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function d(e){return m([e],e.tasks)}function m(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function p(e){return Object(c.k)([function(e){var t={};return Object(c.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(c.a)(r||(r=o.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(c.a)(a||(a=o.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(c.a)(s||(s=o.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(c.a)(i||(i=o.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function f(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}function h(e){return e.responsibleTeachers.map(function(e){return{name:e.name,email:Object(l.d)(e),access:e.access||"edit"}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return c});var r=n(1),a=n(15),s=n(61),i=n(7),o=function(){function e(){var e,t;this._initialized=!1;var n=function(e){Object.defineProperty(a,e,{get:function(){return this._initialized||this.init(),this._features[e]},set:function(e){throw new Error("Feature flags cannot be set here")}})},a=this;try{for(var i=r.h(Object.keys(s)),o=i.next();!o.done;o=i.next()){n(o.value)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}}return e.prototype.init=function(){var e,t;if(!this._initialized){var n=(i.a.KED_FEATURES||"").split(",").map(function(e){return e.trim().toLowerCase()}),o=Object(a.b)(location.search,{toLower:!0});o.testversion&&(n=["*"]),o.features&&(n=o.features.split(",").map(function(e){return e.trim().toLowerCase()}));var c=n.includes("*");this._features={};try{for(var l=r.h(Object.keys(s)),u=l.next();!u.done;u=l.next()){var d=u.value;this._features[d]=c||n.includes(d.toLowerCase())}}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}this._initialized=!0}},e}(),c=new o},function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r=n(1),a=n(8),s=n(95),i=n.n(s),o=n(96),c=n.n(o),l=n(63),u=n(64),d=n(0),m=n(7),p=n(6),f=n.n(p),h=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(i.a,c.a)),n.messages={sv:l,en:u},f()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},function(e,t,n){"use strict";n.d(t,"b",function(){return r}),n.d(t,"a",function(){return a});var r="421572262269-u68v5lf5o8ss5t68l8gkq3pfarh6dbkv.apps.googleusercontent.com",a="https://docs.google.com/document/d/1V7exG6vN83Sq8kb6uz1B6DaZDVO9eLcJbP7XF0vL4dY/export?format=txt"},function(e){e.exports={picker:"Integrate coursebuilder and subjectplanner with Google Picker",ksTutorComment:"Integrate KSTermplanner with tutor comments",kgTutorComment:"Integrate KSTermplanner  with tutor comments",termplannerCharts:"Integrate KSTermplanner with progress charts",weekplannerCharts:"Integrate Weekplanner with progress charts",teacherRights:"Activate course builder teacher rights",studyGroups:"Add study groups and google classroom functionality",cbCollapseBoxes:"Course Builder: Collapse modules by default",ksAssignments:"KS show hand-in assignments",markPartialKRs:"Activate mark partial knowledge requirments functionality"}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(19),i=n(13),o=n(81);function c(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var l=n(6),u=n.n(l),d=n(25),m=n(7),p=n(8),f=n(17),h=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,i=t.progressData,l=t.displayProgress,m=!!this.props.openCourses[n],f=(new d.a,this.context.intl);return a.createElement(s.a,{title:a.createElement("h5",null,n||a.createElement(p.a,{id:"userTasks.goals",defaultMessage:"Egna lärandemål"})),headerOpen:m,className:n&&Object(o.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)},displayProgress:l,progressData:i},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"}," ",a.createElement("a",{className:"trash",href:"#",title:f.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lärandemålet och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=c(t),s=u()(t.deadline).startOf("day")<u()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:b(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:g(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:u()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmål"}))),a.createElement("br",null))}))},t.contextType=f.a,t}(a.Component);function b(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(i.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function g(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(i.f)(m.b.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var v=n(5),k=n(2);var y=n(65),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"weekplanner.addLearningGoalTitle",defaultMessage:"Lägg till eget lärandemål"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(p.a,{id:"weekplanner.addLearningGoal",defaultMessage:"Mål"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(p.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),w=n(29),T=n(49),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=this.props,o=(i.isTask,i.onSave),c=this.context.intl;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"customTask.addWorkGoalTitle",defaultMessage:"Lägg till eget arbetsmål"})),a.createElement("hr",null),a.createElement(w.a,{label:c.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:c.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{rows:7,label:c.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:c.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:c.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return o(n,r,s)}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),j=n(97),N=(n(75),n(35)),I=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,i=s.name,o=s.description,c=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:i,description:o,url:c}):r.a({},t)}))});else{var l={id:Object(v.h)(),name:i,description:o,url:c};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(l)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(p.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(p.a,{id:"addeditsubtask.addSubtask",defaultMessage:"Lägg till underuppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(p.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),C=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(I,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(I,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=t.deadline,o=t.subTasks,l=t.showCalendar,d=t.userTask,m=d.id,f=(d.courseName,this.props),h=f.onUpdate,b=f.onDelete,g=this.isModified(),v="customTask"===c(d),k=u()(d.deadline)<u()(),y=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,v?a.createElement(p.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmål"}):a.createElement(p.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:v?y.formatMessage({id:"task.targetNameLabel",defaultMessage:"Arbetsmålets namn"}):y.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:v?y.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du göra?"}):y.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),v&&a.createElement(a.Fragment,null,a.createElement(T.a,{rows:5,label:y.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:y.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"Lägg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:y.formatMessage({id:"common.linkLabel",defaultMessage:"Länk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(N.a,{label:y.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},i||l?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(j.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",nextMonthButtonLabel:"",previousMonthButtonLabel:"",showWeekNumbers:!0,selected:i&&u()(i).toDate(),autoFocus:l,dateFormat:"yyyy-MM-dd",className:k?"expired":void 0,locale:y.locale,popperPlacement:v?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&u()(t).format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:y.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(p.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(N.a,{label:y.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},o&&o.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"task.addSubtask",defaultMessage:"Lägg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){g?h(function(e){e.name=n,e.description=r,e.url=s,e.deadline=i}):e.props.closeDialog()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(p.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){b(m)}},v?a.createElement(p.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmål"}):a.createElement(p.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den här uppgiften"})))))},t.contextType=f.a,t}(a.Component),S=n(12),D=n(82),x=n(40),R=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.backgroundColor,r=e.progressColor,s=Math.round(t);return a.createElement("svg",{className:"progress-chart",width:"100%",height:"25"},a.createElement("rect",{fill:n,width:"100%",height:"100%",rx:"4"}),a.createElement("rect",{className:"fill",fill:r,width:s+"%",height:"100%",rx:"4"}),a.createElement("text",{className:"filled-text",textAnchor:"middle",x:"50%",y:"50%",dy:".3em"},s+"%"))},t.defaultProps={percentage:0,backgroundColor:"#F1F5F4",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return L});var L=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new D.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){var e=Object(x.d)(u()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.nextWeek=function(){var e=Object(x.c)(u()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(E,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"Lärandemålet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(O,{isTask:!e,onSave:function(a,s,i){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,i)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(C,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet får inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(I,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(v.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var i;return r.d(this,function(r){switch(r.label){case 0:return i=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(v.h)(),dateTime:i+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,c,l;return r.d(this,function(d){switch(d.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:d.sent(),d.label=2;case 2:return d.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=u()(n).add(-1,"week"),s=Object(x.b)(a),i=Object(x.a)(a.year(),s),[4,this.props.env.kedBackendClient.list("usertasks",{from:i.notBefore,to:i.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return o=(o=d.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),[n].concat(t.map(function(e){return e.dateTime})),c=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),l=o.sort(Object(k.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:c+=1e3});return t.id=Object(v.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(l)];case 4:return d.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.getHeaderTitle=function(){return a.createElement("h4",null,a.createElement(p.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"}))},t.prototype.render=function(){var e=this,t=u()(this.state.weekDate).week(),n=d.b.weekplannerCharts,i=u()().week(),o=function(e){var t,n,a,s,i=[],o=Object(k.b)(e,function(e){return e.courseName||""});try{for(var c=r.h(Object.keys(o).sort().filter(function(e){return e}).concat(o[""]?[""]:[])),l=c.next();!l.done;l=c.next()){var u=l.value,d=o[u]||o[""],m=Object(k.b)(d,function(e){return e.learningGoal}),p=[];try{for(var f=(a=void 0,r.h(Object.keys(m))),h=f.next();!h.done;h=f.next()){var b=h.value,g=m[b].sort(Object(k.g)("dateTime")),v=g.filter(function(e){return null==e.name})[0],y=v&&v.url;p.push({name:b,allTasks:g,url:y,step:g.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:g.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{h&&!h.done&&(s=f.return)&&s.call(f)}finally{if(a)throw a.error}}i.push({courseName:u,learningGoals:p})}}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=c.return)&&n.call(c)}finally{if(t)throw t.error}}return i}(this.state.userTasks),c=this.state,l=c.dialogs,m=c.weekTextsUT,f=c.strategy,b=c.assessment,g=c.isLoading,v=c.isCopyingTasks,E=m&&("adding"===m.$meta||"updating"===m.$meta),w=!!m&&f!==m.weekTexts.strategy,T=!!m&&b!==m.weekTexts.assessment,O=!E&&(w||T),j=function(e){var t={completedTasks:0,totalNumberOfTasks:0,subjectData:{}};return e.forEach(function(e){return e.learningGoals.forEach(function(n){var r=n.tasks.filter(function(e){return e.done}).length,a=t.subjectData[e.courseName];a||(a=t.subjectData[e.courseName]={completedNumberOfTasks:0,numberOfTasks:0}),a.completedNumberOfTasks+=r,a.numberOfTasks+=n.tasks.length,t.completedTasks+=r,t.totalNumberOfTasks+=n.tasks.length})}),t}(o),N=o.length>0?j.completedTasks/j.totalNumberOfTasks*100:0;return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===i?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!E&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},n&&this.getHeaderTitle(),a.createElement("div",{className:"widgets"},n?a.createElement("div",{className:"progressBar"},a.createElement(R,{percentage:N})):this.getHeaderTitle(),a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"})))))),o.length>0&&a.createElement("hr",null),o.map(function(t){return a.createElement(h,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)},displayProgress:n,progressData:j.subjectData[t.courseName]}))}),a.createElement("hr",null),g?a.createElement(S.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.learningGoal",defaultMessage:"Eget lärandemål"})),a.createElement("div",{className:"btn",style:v?{opacity:.5}:void 0,onClick:function(t){return!v&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara från föregående vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(p.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & Utvärdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska göra för att lära mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:f&&f.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.evaluation",defaultMessage:"Utvärdering"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:b&&b.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:O?{}:{opacity:.5},onClick:function(){return!E&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),O?a.createElement(p.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(p.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(y.a,{dialogs:l,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=f.a,t}(a.Component)},function(e){e.exports={"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"Lägg till eget arbetsmål","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Framsteg diagram","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.goals":"Egna lärandemål","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"Mål:","weekplanner.addLearningGoalTitle":"Lägg till eget lärandemål","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoal":"Eget lärandemål","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(1),a=n(0),s=n(39),i=n(43),o=n(11),c=n.n(o),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&c()(Object(i.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return c()("body").attr("aria-disabled",n.length>0),c()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,o){var l;return a.createElement("div",{key:o},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){l=t,o===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":o<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||c()(Object(i.findDOMNode)(l)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(i.findDOMNode)(l);e.preventDefault(),c()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(e){function t(){return e.call(this,"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest")||this}return r.c(t,e),t.prototype.getFile=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,gapi.client.drive.files.get({fileId:e,supportsAllDrives:!0,fields:"id,name,mimeType,webViewLink,iconLink,modifiedTime,thumbnailLink"}).then(function(e){if(e.result.name){var t=e.result;return{fileId:t.id,url:t.webViewLink,mimeType:t.mimeType,name:t.name,modiifiedTime:t.modifiedTime,iconUrl:t.iconLink,thumbnailUrl:t.thumbnailLink}}return!1})]}})})},t.prototype.updatePermissions=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return console.log("updating permissions"),[4,this.ensureInited()];case 1:return t.sent(),gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"reader",type:"anyone",supportsAllDrives:!0}).then(function(e){return console.log(e)}),[2]}})})},t.prototype.createFolder=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return console.log("Creating folder "+e),[4,this.ensureInited()];case 1:return n.sent(),[2,gapi.client.drive.files.create({name:e,mimeType:"application/vnd.google-apps.folder",parents:[t]}).then(function(e){return e.result})]}})})},t.prototype.getIdForFolderPath=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,c,l,u;return r.d(this,function(d){switch(d.label){case 0:return console.log("Getting id for "+e.join("/")),[4,this.ensureInited()];case 1:d.sent(),t="root",d.label=2;case 2:d.trys.push([2,9,10,11]),n=r.h(e),a=n.next(),d.label=3;case 3:return a.done?[3,8]:(s=a.value,[4,this.getIdForFolder(s,t)]);case 4:return(i=d.sent())?(t=i,[3,7]):[3,5];case 5:return[4,this.createFolder(s,t)];case 6:o=d.sent(),t=o.id,d.label=7;case 7:return a=n.next(),[3,3];case 8:return[3,11];case 9:return c=d.sent(),l={error:c},[3,11];case 10:try{a&&!a.done&&(u=n.return)&&u.call(n)}finally{if(l)throw l.error}return[7];case 11:return[2,t]}})})},t.prototype.getIdForFolder=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return console.log("Getting id for "+e),[4,this.ensureInited()];case 1:return n.sent(),[2,gapi.client.drive.files.list({corpora:"user",q:"'"+t+"' in parents and mimeType = 'application/vnd.google-apps.folder' and name = '"+e+"'"}).then(function(e){return!!e.result.files.length&&e.result.files[0].id})]}})})},t.prototype.copyFile=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return console.log("Copying file: "+e.name),[4,this.ensureInited()];case 1:return n.sent(),t?[4,this.getIdForFolderPath(t)]:[3,3];case 2:return n.sent(),[3,4];case 3:"root",n.label=4;case 4:return[2,gapi.client.drive.files.copy({fileId:e.id,supportsAllDrives:!0,parents:[parent],name:e.name,fields:"id,name,mimeType,webViewLink,iconLink,modifiedTime,thumbnailLink"}).then(function(e){return e.result})]}})})},t.prototype.downloadFile=function(e){var t=e.file,n=e.limitSize;return r.b(this,void 0,void 0,function(){var e,a=this;return r.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:return r.sent(),t.canExport?[2,new Promise(function(e,n){gapi.client.drive.files.export({fileId:t.fileId,mimeType:"application/pdf"}).then(function(n){for(var r=n.body.length,a=new Uint8Array(new ArrayBuffer(r)),s=0;s<r;s++)a[s]=n.body.charCodeAt(s);var i=new Blob([a],{type:"application/pdf"}),o=t.name+".pdf";e(new File([i],o,{type:"application/pdf",lastModified:t.modifiedTime}))})})]:(e=function(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET","https://www.googleapis.com/drive/v3/files/"+e.fileId+"?alt=media",!0),r.setRequestHeader("Authorization","Bearer "+a.token),r.responseType="blob",r.onload=function(){t(new File([r.response],e.name,{type:e.mimeType,lastModified:e.modifiedTime}))},r.send()})},[2,new Promise(function(r,a){void 0!==n?gapi.client.drive.files.get({fileId:t.fileId,fields:"size"}).then(function(e){Number(e.result.size)>1024*n*1024&&a("GooglePickerError: Filsize is too laarge")}).then(function(){e(t).then(function(e){r(e)})}):e(t).then(function(e){r(e)})})])}})})},t}(n(78).a)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(6),o=n.n(i),c=n(5),l=n(30),u=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}var m=n(17);n.d(t,"a",function(){return p});var p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){l.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){l.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),i={id:Object(c.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new c.b("email",s.a.currentUser.mail,"S"),new c.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(i.deadline=e.task.deadline),e.task?(i.task=[e.task],e.course?i.course=[e.course]:e.courseInfo&&(i.courseInfo=e.courseInfo)):i.siteVisionPageId=e.id,e.step&&(i.step=e.step),[4,Promise.all([l.b.setWeekPlannerBoxOpen(e.courseName,!0),l.b.insert([i])])]);case 1:return r.sent(),[3,4];case 2:return[4,l.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.context.intl,n=this.props.learningTasks,s=Object(u.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),i=this.state.confirmations,c=o()(this.state.weekDate).week(),l=o()().week(),m=c===l?"":c===l+1?t.formatMessage({id:"taskList.nextWeekTask",defaultMessage:"för nästa vecka (v{week})"},{week:c}):c===l-1?t.formatMessage({id:"taskList.lastWeekTask",defaultMessage:"för förra veckan (v{week})"},{week:c}):t.formatMessage({id:"taskList.currentWeekTask",defaultMessage:"för vecka {week}"},{week:c});return a.createElement("div",{className:"taskContainer"},n.map(function(n,o){var u=n.id,p=s[u]||{$meta:"deleted"},f="adding"===p.$meta||"deleting"===p.$meta,h="deleted"!==p.$meta&&"deleting"!==p.$meta,b=h?t.formatMessage({id:"taskList.removeTaskFromWeeklyPlanning",defaultMessage:"Ta bort uppgiften från egen veckoplanering {week}"},{week:m}):t.formatMessage({id:"taskList.addTaskToWeeklyPlanning",defaultMessage:"Lägg till uppgiften i egen veckoplanering {week}"},{week:m}),g=i.some(function(e){return u===e});return a.createElement("div",{key:n.id},a.createElement("div",{key:u,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"selectedBox"+(h?" selected":""),style:f?{opacity:.5}:{},onClick:function(){return f||c!==l?g?e.setState({confirmations:i.filter(function(e){return e!==u})}):e.setState({confirmations:r.g(i).concat(u)}):e.toggleTask(n)},title:b})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:n.url},n.name))),a.createElement(d,{visible:g,text:b,onConfirm:function(){e.toggleTask(n),e.setState({confirmations:i.filter(function(e){return e!==u})})},onCancel:function(){e.setState({confirmations:i.filter(function(e){return e!==u})})}}))}))},t.contextType=m.a,t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(19),i=n(2),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,o=t.markedIds,c=t.markMode,l=t.migratedIds,u=t.uncoveredIds,d=Object(i.b)(n,function(e){return e.group||"default"}),m=Object.keys(d);return a.createElement(s.a,{title:a.createElement("p",null,r),className:"larger"},m.map(function(t){return a.createElement(a.Fragment,{key:t},1===m.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=o.some(function(e){return e===t.id}),r=l&&!!l[t.id],s=u&&u[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return c&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(c?" selectable":"")+(n?" markedGreen":s?" markedRed":"")+(r?" migrated":""),title:r?c?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(e){var t=e.left,n=e.right,a=e.rightWidth;return r.createElement("div",{className:"sv-row sv-layout"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},r.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},r.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},r.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},r.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-"+(12-a)},t),r.createElement("div",{className:"sv-layout sv-column-"+a},n))))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(3),a=n(13);function s(e){return e?Object(a.e)(r.a.currentUser,e)||r.a.currentUser.roles.includes("ADMIN"):r.a.currentUser.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e})}},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"Administratör",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Andrei",mail:"andrei.spatarelu@vemendo.se",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"andrei"},{displayName:"Carl Holmberg",mail:"carl.holmberg@kunskapsgymnasiet.se",roles:["ADMIN","EMPLOYEE"],school:"Norrköping",username:"carl.holmberg@kunskapsgymnasiet.se"},{displayName:"Carl",mail:"carl@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"carl"},{displayName:"david.fahlander@kedschools.com",mail:"david.fahlander@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"david.fahlander@kedschools.com"},{displayName:"Teacher 1",mail:"teacher1.classroom@kedschools.com",roles:["EMPLOYEE"],school:"KED",username:"teacher1.classroom@kedschools.com"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-Lärare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Borås",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"Borås",schoolType:"Grundskolor"},{displayName:"Elev Borlänge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"Borlänge",schoolType:"Gymnasium"},{displayName:"Roll-lös",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(6),a=n.n(r),s=n(7);"sv"===s.b.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var i=function(){return a.a.apply(this,arguments).locale(s.b.KED_LOCALE)}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(9),i=n(39),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>1&&(n=n.slice(1)),{infos:[e]})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),s.c.writer.onError(this._dbWriterError),s.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),s.c.writer.off(this._dbWriterError),s.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,s=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!s}).map(function(t){var n=t.message,r=t.details,s=t.retryable,o=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(i.a,{onClick:function(){return e.removeError(n)}})),r||s?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},o?"Dölj detailer":"Visa detailjer")," "):void 0,o?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),s?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){s.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(3),s=function(){function e(e){this.googleTokenProvider=a.b.googleTokenProvider,this.discoveryDocs=[],this.discoveryDocs.push(e)}return e.prototype.setBearerProvider=function(e){this.googleTokenProvider=e},e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:t.sent(),t.label=2;case 2:return!this.tokenExpiration||this.tokenExpiration<new Date?[4,this.googleTokenProvider.getBearer()]:[3,4];case 3:e=t.sent(),this.tokenExpiration=new Date(e.expires),this.token=e.token,gapi.client.setToken({access_token:e.token}),t.label=4;case 4:return[4,gapi.client.init({discoveryDocs:this.discoveryDocs})];case 5:return t.sent(),[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e){if("undefined"!=typeof gapi)return e();var t=document.createElement("script");t.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(t),window.gaapi_loaded=e})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(83),s=n(66),i={"google-apps":"application/vnd.google-apps.document,application/vnd.google-apps.presentation,application/vnd.google-apps.spreadsheet",pdf:"application/pdf"},o=function(e){function t(t){var n=e.call(this,["https://www.googleapis.com/auth/drive"])||this;return n.options={upload:!1,multiple:!1,limitType:!1},Object.assign(n.options,t),console.log(n.options),n.drive=new s.a,n}return r.c(t,e),t.prototype.show=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,new Promise(function(t,n){var r=(new google.picker.PickerBuilder).enableFeature(google.picker.Feature.SUPPORT_DRIVES).enableFeature(google.picker.Feature.SUPPORT_TEAM_DRIVES).addView((new google.picker.DocsView).setOwnedByMe(!0).setIncludeFolders(!0)).addView((new google.picker.DocsView).setIncludeFolders(!0).setEnableTeamDrives(!0)).setLocale("sv").setSize(1051,650).setOAuthToken(e.authToken).setCallback(function(r){if(r.action==google.picker.Action.CANCEL)n();else if(r.action==google.picker.Action.PICKED){var a=[];r.docs.map(function(t){var n=t.id,r=t.mimeType,s=t.name,i=t.modifiedTime,o=t.iconUrl,c=t.url,l=r.includes("google-apps");a.push({fileId:n,mimeType:r,name:s,modifiedTime:i,canExport:l,iconUrl:o,url:c}),e.drive.updatePermissions(n)}),console.log(a),t(a)}});if(e.options.upload&&r.addView((new google.picker.DocsUploadView).setIncludeFolders(!0)),e.options.multiple&&r.enableFeature(google.picker.Feature.MULTISELECT_ENABLED),e.options.limitType){var a=i[e.options.limitType];console.log(a),r.setSelectableMimeTypes(a)}e.picker=r.build(),e.picker.setVisible(!0)})]}})})},t}(a.a)},function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Outdent",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Indent",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(r.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt(this.promptMsg);e&&Object(r.a)("insertImage",e)}}}},function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(3),s=n(60),i=function(){function e(e){var t;this.scopes=["https://www.googleapis.com/auth/userinfo.email","https://www.googleapis.com/auth/userinfo.profile"],(t=this.scopes).push.apply(t,r.g(e))}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:n.sent(),n.label=2;case 2:return e=this.scopes.join(" "),[4,new Promise(function(n,r){gapi.load("client:auth2",function(){var i=!1;return gapi.auth2.authorize({client_id:s.b,scope:e,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"none"},function(o){if(console.log(o),o.error)i=!0;else{var c=new Set(o.scope.split(" "));t.scopes.filter(function(e){return!c.has(e)}).length>0?(console.log("missing scopes"),i=!0):(t.authToken=o.access_token,n())}return i?(console.log("reauthorize"),gapi.auth2.authorize({client_id:s.b,scope:e,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"consent"},function(e){console.log(e),e.error?r("Google Web Client: No access token"):(t.authToken=e.access_token,n())})):o.expires_in<500?gapi.auth2.authorize({client_id:s.b,scope:e,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"none"},function(e){t.authToken=e.access_token,n()}):void 0})})})];case 3:return n.sent(),"undefined"!=typeof google&&void 0!==google.picker?[3,5]:[4,new Promise(function(e){gapi.load("picker",function(){e()})})];case 4:n.sent(),n.label=5;case 5:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n.n(r),s=function(e){var t=e.size,n=void 0===t?30:t;return a.a.createElement("svg",{width:n,version:"1.1",xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 508.52 508.52",fill:"#ffffff",style:{verticalAlign:"middle",marginRight:"4px"}},a.a.createElement("polygon",{points:"484.492,284.58 339.024,32.577 169.496,32.577 314.996,284.58"}),a.a.createElement("polygon",{points:"145.437,74.276 0,326.279 84.764,473.05 230.169,221.143"}),a.a.createElement("polygon",{points:"234.396,316.363 143.371,475.943 423.756,475.943 508.52,316.36"}))},i=function(e){var t=e.label,n=void 0===t?"Google Drive":t,r=e.action;return a.a.createElement("a",{className:"btn",onClick:r},a.a.createElement(s,{size:16})," ",n)}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2);function i(e){return e.split(".").filter(function(e){return e})}function o(e){return e.map(function(e){return e.trim()})||[]}function c(e,t){var n=i(e);return t&&t.length===n.length}function l(e,t,n,r){var a=e.name,s=i(e.name),l=t&&o(t),d=n&&u(n,e.id),m=c(e.name,l);return s.forEach(function(e){var t=e.trim(),n=e+".";l&&l.includes(t)&&!m?a=a.replace(n,"<span class=markedGreen>"+n+"</span>"):d&&d.includes(t)?a=a.replace(n,"<span>"+n+"</span>"):!m&&d&&d.length>0&&(a=a.replace(n,"<span class=markedRed>"+n+"</span>"))}),a}function u(e,t){var n=[];return e.forEach(function(e){var a=Object.assign([],Object.keys(e).filter(function(e){return e==t}).map(function(t){return e[t].map(function(e){return e.trim()})}));n.push.apply(n,r.g(a))}),Object(s.k)(n)}function d(e,t){var n=[];return(n=e.map(function(e,t){return{ind:t,val:e}}).filter(function(e){return t.includes(e.val)}))?n.sort(function(e,t){return e.ind>t.ind?1:-1}).map(function(e){return e.val}):[]}function m(e,t){return e?t?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0}n.d(t,"a",function(){return f});var p,f=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.getKnowledgeSentencesContent=function(e,t,n,r,s){var c=this,l=this.props,p=l.coveredPartialRequirments,f=l.markMode,h=i(e.name),b=t&&o(t),g=p&&u(p,e.id);return a.createElement("td",{key:n,title:m(s,f)},h.map(function(n,s){var i=n.trim(),o=b&&b.includes(i)||r&&!b,l=!g.includes(i);return a.createElement("span",{key:s,dangerouslySetInnerHTML:{__html:n?n+".":""},className:"selectable"+(o?" markedGreen":l?" markedRed":""),onClick:function(){var a=t?Object.assign([],t):[],s=b&&b.includes(i);!r||b&&0!=b.length?(s?a=t.filter(function(e){return e!=n}):a.push(n),c.props.onUpdatePartialKnowledge(e.id,d(h,a))):(a=h.filter(function(e){return e!=n}),c.props.onUpdatePartialKnowledge(e.id,d(h,a)))}})}))},t.prototype.onRequirementChanged=function(e,t,n,r){this.props.onUpdatePartialKnowledge?t&&!n||r?this.props.onUpdatePartialKnowledge(e.id,[]):this.props.onUpdatePartialKnowledge(e.id,i(e.name)):this.props.onMarkChanged(e.id,!t)},t.prototype.render=function(){for(var e=this,t=this.props,n=t.knowledgeRequirements,d=t.markedIds,f=t.migratedIds,h=t.explainedRequirements,b=t.markBySentenceView,g=t.markPartialFeatureEnabled,v=this.props,k=v.idsToMarkNotOk,y=v.markMode,E=v.onExplainedRequirementsChanged,w=v.partialRequirments,T=v.coveredPartialRequirments,O=["E","C","A"],j=[],N=n.slice(),I=null;!(I=O.map(function(e){var t=N.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=N[t];return N.splice(t,1),n})).every(function(e){return null===e});)j.push(I);return a.createElement("table",{className:"knowledge-matrix"},a.createElement("thead",null,a.createElement("tr",null,O.map(function(e){return a.createElement("th",{key:e},e)}))),a.createElement("tbody",null,j.map(function(t,n){return a.createElement(a.Fragment,{key:n},a.createElement("tr",null,t.map(function(t,n){var r=t&&d&&d.indexOf(t.id)>=0,s=(t&&k&&k[t.id],t&&f&&!!f[t.id]),p=w&&w[t.id],h=p&&o(p),v=c(t.name,h),E=function(e,t){for(var n=i(e.name),r=!1,a=0;a<n.length;a++){var s=n[a].trim(),o=t&&u(t,e.id);if(o&&o.includes(s)){r=!0;break}}return r}(t,T),O=!(h&&h.length>0||E);return b&&g?e.getKnowledgeSentencesContent(t,p,n,r,s):a.createElement("td",{key:n,dangerouslySetInnerHTML:{__html:t?p&&p.length||E?l(t,p,T):t.name:""},className:(y?"selectable":"")+(s?" migrated":"")+(!r||p&&!v?O?" markedRed":"":" markedGreen"),onClick:y&&t?function(){return e.onRequirementChanged(t,r,h,v)}:void 0,title:m(s,y)})})),h&&a.createElement("tr",null,t.map(function(e,t){var n=w&&w[e.id]&&o(w[e.id]),i=e&&d&&d.indexOf(e.id)>=0||n&&n.length>0;return a.createElement("td",{key:t},i?a.createElement("textarea",{placeholder:Object(s.a)(p||(p=r.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!y,value:h[e.id]||"",onChange:E&&function(t){return E(e.id,t.target.value)}}):void 0)})))})))},t}(a.Component)},,,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var t=n(7);t.b.ENVIRONMENT="test",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,n(126))},function(e,t,n){"use strict";n(98);var r=n(1),a=n(15),s=n(20),i=n(5),o=n(7),c=n(3),l=n(13),u=n(2);function d(e,t,n){var s=Object(a.b)(t),i=Object(u.e)(s,l.a),o=r.f(Object(a.c)(e),2),c=o[0],d=o[1],m=Object(a.b)(d);return c+Object(a.a)(r.a({},m,i,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function p(e,t,n){return new i.e(s.c,s.d,e+t.mail+location.search,o.b.KED_CLIENT_ID,o.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var f,h,b=c.a.currentUser&&c.a.currentUser.mail;if(b)if(o.b.KED_TOKEN_PATH){var g=d(o.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);c.a.bearerProvider=(h=m(f=g,b),new s.b(f,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){c.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,h),{token:t.token,expires:Date.now()+354e4}},h)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(c.a.currentUser=JSON.parse(t))}(m(g,b));var v=d(o.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"]);c.a.googleTokenProvider=function(e,t){var n=m(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(v,b)}else{if(!(o.b.KED_TOKEN_URL&&o.b.KED_CLIENT_ID&&o.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");c.a.bearerProvider=p(o.b.KED_TOKEN_URL,c.a.currentUser,["kedbackend","EDS"]),c.a.googleTokenProvider=p(o.b.KED_TOKEN_URL+"/google",c.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"])}c.a.kedBackendClient=new s.a(o.b.KED_API_URL,c.a.bearerProvider);var k=n(46);c.a.edsClient=new k.b(s.c,o.b.EDS_API_URL,c.a.bearerProvider,function(){return c.a.currentUser.mail})},function(e,t,n){"use strict";n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var r,a=n(1),s=n(0),i=n(111),o=n(36),c=n(23),l=n(101),u=n(13),d=n(2),m=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.dragState=new o.a({tabBeingDragged:"",tabBeingHovered:"",insertBefore:!1,originClientX:-1}),t}return a.c(t,e),t.prototype.render=function(){var e=this,t=this.props.lazyProps;return s.createElement("div",{className:"sv-row sv-layout sv-skip-spacer",style:{overflow:"visible"}},s.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},s.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},s.createElement(c.a,{noError:!0},t.map(function(e){var t=e.backgroundImage;return t&&s.createElement("style",null,"\n              .pageHeader {\n                background-image: url('"+t+"') !important;\n              }\n            ")})),s.createElement("div",{className:"pageHeader"},s.createElement("a",null,s.createElement("h1",null,s.createElement(c.a,{noError:!0},t.map(function(e){return s.createElement(s.Fragment,null,e.title)})))),s.createElement(c.a,{noError:!0},t.map(function(e){var t=e.cornerBox;return t&&s.createElement("div",{className:"pageHeaderCornerBox"},t)})),s.createElement("div",{className:"buttonsField"},s.createElement("div",{className:"buttonsContainer"},s.createElement(c.a,{spinner:s.createElement(l.a,null)},t.map(function(t){var n=t.tabs,o=t.buttons,l=t.activeTab,m=t.blocks,p=t.sortableTabs,f=t.onTabDrop;return s.createElement(s.Fragment,null,m?s.createElement("div",{className:"align-horizontal"},m.map(function(e){return s.createElement("div",{key:e.id,className:"horizontalItem top"},s.createElement("div",{className:"align-vertical"},s.createElement("div",null,s.createElement("a",null,e.name)),s.createElement("div",null,s.createElement("div",{className:"btn-group"},e.steps.map(function(e){return s.createElement(s.Fragment,{key:e.stepNo},s.createElement(i.a,{to:e.link,className:"btn btn-small step-button"+(e.isActive?" activePage":"")},e.stepNo),s.createElement("a",null))})))))})):null,s.createElement("div",{className:"horizontalMenu"},s.createElement(c.a,null,e.dragState.map(function(t){var c=t.tabBeingDragged,m=t.tabBeingHovered,h=t.insertBefore,b=t.originClientX;return s.createElement("ul",{className:p?"sortable":null,onDrop:f?function(t){m&&c&&f(c,m,h?"before":"after"),e.dragState.dispatch(a.a({},e.dragState.value,{tabBeingHovered:"",tabBeingDragged:""}))}:null},n.map(function(t,n){var o=t.name,f=t.key,g=t.link,v=t.onClick,k=t.draggable,y=l===f||"$"===l&&0===n,E=e.dragState;return o=o||Object(d.a)(r||(r=a.e(["(Namnlös flik)"],["(Namnlös flik)"]))),s.createElement(s.Fragment,{key:f},h&&m===f?s.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,s.createElement("li",{className:[y?"activePage":"",f===c?"drag-source":"",p&&k?"draggable":""].filter(function(e){return e}).join(" "),draggable:p&&k,onDragStart:p&&k?function(e){e.dataTransfer.effectAllowed="move",E.dispatch(a.a({},E.value,{originClientX:e.clientX,tabBeingDragged:f}))}:null,onDragOver:p?function(e){c!==f?c&&(e.preventDefault(),e.dataTransfer.dropEffect="move",E.dispatch(a.a({},E.value,{tabBeingHovered:f,insertBefore:b>e.clientX}))):E.dispatch(a.a({},E.value,{tabBeingHovered:""}))}:null,onDragEnd:function(t){e.dragState.dispatch(a.a({},E.value,{tabBeingHovered:"",tabBeingDragged:""}))}},g?g.startsWith(":")?s.createElement("a",{href:Object(u.f)(g.substr(1),{})},o):s.createElement(i.a,{to:g},o):v?s.createElement("a",{onClick:v},o):o),h||m!==f?null:s.createElement("li",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}),o&&o.map(function(e,t){return s.createElement("li",{className:"action-tab",key:"btn"+t},e)}))}))))}))))))))},t}(s.Component),p=function(e){return s.createElement(m,{lazyProps:new o.a(e)})}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("img",{style:{border:0,margin:0,padding:0},className:"ellipsis-loader"})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.abilities,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.subTitle,s=t.centralContent,i=t.className,o=this.state.headerOpen;return a.createElement("div",{className:(i||"")+" openClose"+(o?" open":"")},a.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("p",null,n)),a.createElement("div",{className:"openContent"},a.createElement("div",{className:"abilityList"},r&&a.createElement("div",{className:"contentHeader"},a.createElement("h5",null,r)),s.map(function(e){return a.createElement("div",{key:e.id,className:"contentPart"},a.createElement("div",{className:"contentText"},a.createElement("p",{dangerouslySetInnerHTML:{__html:e.name}})))}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(19),i=n(2),o=function(e){var t=e.title,n=e.className,o=e.headerOpen,l=e.idsToSubjectMap,u=e.requirements;if(!l)return a.createElement(s.a,{title:a.createElement("p",null,t),className:n,headerOpen:o},a.createElement(c,r.a({},r.a({},e))));var d=l?Object(i.b)(u,function(e){return l[e.id]||""}):{"":u},m=Object.keys(d).map(function(e){return{subject:e,requirements:d[e]}});return a.createElement(s.a,{title:a.createElement("p",null,t),className:n,headerOpen:o},m.map(function(t){var n=t.subject,s=t.requirements;return a.createElement(c,r.a({},r.a({},e,{key:n,heading:n,requirements:s})))}))},c=function(e){for(var t=e.requirements,n=e.includedIds,r=e.explainedRequirements,s=e.partialRequirments,i=e.heading,o=["E","C","A"],c=[],l=t.slice(),u=null;!(u=o.map(function(e){var t=l.findIndex(function(t){return t.gradeStep.toUpperCase()===e});if(t<0)return null;var r=l[t];return l.splice(t,1),n?n[r.id]?r:void 0:r})).every(function(e){return null===e});)u.every(function(e){return!e})||c.push(u);return a.createElement(a.Fragment,null,i&&a.createElement("h4",null,i),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,o.map(function(e){return a.createElement("th",{key:e},e)}))),a.createElement("tbody",null,c.map(function(e,t){return a.createElement(a.Fragment,{key:t},a.createElement("tr",{key:t},e.map(function(e,t){var n=e&&s&&s[e.id];return a.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:n?n.join("."):e?e.name:""}})})),r&&a.createElement("tr",null,e.map(function(e,t){return a.createElement("td",{key:t,className:"explained-requirement"},a.createElement("div",null,e&&r[e.id]||""))})))}))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n.n(r),s=function(e){var t=e.available,n=e.selected,r=e.onChange;return a.a.createElement("div",{className:"taskContainer"},t.map(function(e){var t=e.key,s=e.name,i=n.includes(t);return a.a.createElement("div",{key:t,className:"align-horizontal"},a.a.createElement("div",{className:"horizontalItem top",onClick:function(){return r(i?n.filter(function(e){return e!=t}):n.concat(t),t,i)}},a.a.createElement("div",{className:"checkBox"+(i?" checked":"")})),a.a.createElement("div",{className:"horizontalItem top"},s))}))}},,function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"a",function(){return i});var r=n(2),a=n(48);function s(e){return Object(a.a)(e.tasks,e.taskOrder,{appendLeftovers:!0})}function i(e,t,n,s,i,o){(void 0===o?{appendLeftovers:!1}:o).appendLeftovers;var c=Object(a.a)(e,t,{appendLeftovers:!0}).map(function(e){return e.id}),l="before"===i;return Object(r.k)(c.filter(function(e){return e!==n.id}).map(function(e){return e!==s.id?e:l?[n.id,e]:[e,n.id]}))}},,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(9),s=n(3);function i(e){var t=e.school,n=e.draftRepo,i=e.course;return r.b(this,void 0,void 0,function(){var e,o;return r.d(this,function(r){switch(r.label){case 0:return"standard"!==t?[3,1]:(n.merge(),e=a.c,[3,3]);case 1:return[4,a.c.schools.name(t).single().map(function(e){return e.officialBranchId}).load()];case 2:o=r.sent(),n.merge(o),e=a.c.branch(o),r.label=3;case 3:return e.courseInstances.update(i,{modifiedDate:Date.now(),modifiedBy:{name:s.a.currentUser.displayName,url:"mailto:"+s.a.currentUser.mail}}),[2]}})})}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n.n(a);function i(e){var t=e.taskMetas,n=e.renderEditLink,i=e.renderLink,o=e.onSort,c=r.f(Object(a.useState)({taskBeingDragged:null,taskBeingHovered:null,insertBefore:!1,originClientY:-1}),2),l=c[0],u=c[1],d=l.taskBeingDragged,m=l.taskBeingHovered,p=l.insertBefore,f=l.originClientY;return s.a.createElement("div",{className:"taskContainer sortable",onDrop:function(e){m&&d&&o(d,m,p?"before":"after"),u(r.a({},l,{taskBeingHovered:null,taskBeingDragged:null}))}},t.map(function(e){var t=e.task,a=e.isTaskOwner,o=function(e){return e.migratedTexts&&Object.keys(e.migratedTexts).some(function(t){return Object.keys(e.migratedTexts[t]).length>0})}(t),c=t.id;return s.a.createElement(s.a.Fragment,{key:c},p&&m===t?s.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,s.a.createElement("div",{className:["align-horizontal","draggable",t===d&&"drag-source"].filter(function(e){return e}).join(" "),draggable:!0,onDragStart:function(e){e.dataTransfer.effectAllowed="move",u(r.a({},l,{originClientY:e.clientY,taskBeingDragged:t}))},onDragOver:function(e){d&&(d!==t?(e.preventDefault(),e.dataTransfer.dropEffect="move",u(r.a({},l,{taskBeingHovered:t,insertBefore:f>e.clientY}))):u(r.a({},l,{taskBeingHovered:null})))},onDragEnd:function(e){u(r.a({},l,{taskBeingHovered:null,taskBeingDragged:null}))}},a&&o&&s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("div",{style:{position:"relative",top:"0.2em",left:"-0.7em"}},s.a.createElement("i",{className:"fa fa-pagelines",style:{position:"absolute",top:0,left:0,color:"#49c35a"}}))),s.a.createElement("div",{className:"horizontalItem top"},n(e)),s.a.createElement("div",{className:"horizontalItem top"},i(e))),p||m!==t?null:s.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r,a=n(1),s=n(0),i=n(2),o=n(16),c=n(74),l=n.n(c),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state=n.props.resource||{name:"",url:""},n}return a.c(t,e),t.prototype.save=function(){var e=this.state;if(!l.a.isUri(e.url))throw new Error(Object(i.a)(r||(r=a.e(["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"],["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"])),e.url));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.onSave,a=t.onDelete,i=this.state,c=l.a.isUri(this.state.url);return s.createElement("div",null,s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("h2",null,n),s.createElement("hr",null),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Namn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:!0,tabIndex:1,size:50,value:i.name,onChange:function(t){return e.setState({name:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Länk:"),s.createElement("div",{className:"horizontalItem top "},s.createElement("input",{type:"text",tabIndex:1,size:50,value:i.url,onChange:function(t){return e.setState({url:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("br",null)),s.createElement("div",{className:"sv-html-portlet sv-portlet"},(i.createdDate||i.modifiedDate)&&s.createElement("div",null,i.createdDate&&s.createElement("p",null,"Resursen/Länken skapades ",Object(o.c)(i.createdDate)," av ",s.createElement("strong",null,i.createdBy.name),"."),i.modifiedDate&&s.createElement("p",null,"Resursen/Länken redigerades senast ",Object(o.c)(i.modifiedDate)," av ",s.createElement("strong",null,i.modifiedBy.name),"."),s.createElement("br",null),s.createElement("br",null)),a&&s.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return a()}},"Ta bort resurs/länk"),s.createElement("a",{tabIndex:1,className:"btn btn-large"+(c?"":" btn-inactive"),onClick:c&&function(){return r(i)}},"Spara")))},t}(s.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(73);function s(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"Välj användare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,s=e.school,i=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===i.length?{fontStyle:"italic"}:{}},0===i.length?"saknar roller":i.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:s?{}:{fontStyle:"italic"}},s||"saknar skola"))}))))}},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(9);function a(){return r.c.courseInstances.hasEdgesFrom([r.d])}},,,,,,function(e,t){},,function(e,t,n){"use strict";function r(e){return(e||[]).filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)})}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(36),s=n(9),i=n(48);function o(e){var t,n=e.map(function(e){return e.startsWith("course:")?e:"course:"+e});return 0===n.length?new a.a([]):(t=s.c.courses.include("abilities","centralContent","knowledgeRequirements")).tags.apply(t,r.g(n)).filter(function(e){return e.isTemplate}).map(function(e){return r.a({},e,{abilities:Object(i.a)(e.abilities,e.abilitiesOrder),centralContent:Object(i.a)(e.centralContent,e.centralContentOrder),knowledgeRequirements:Object(i.a)(e.knowledgeRequirements,e.knowledgeRequirementsOrder)})}).toValue()}},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),s=n(38),i=n(12),o=n(3),c=Object(s.b)(function(){return o.a.kedBackendClient.http.status.combineLatest(o.a.edsClient.http.status).map(function(e){var t=r.f(e,2),n=t[0],s=t[1];return a.createElement("div",{className:"loading-indicator"},a.createElement("div",{className:"indicator"},n.numOutstandingOperations>0||s.numOutstandingOperations>0?a.createElement(i.a,null):void 0))})})},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(19),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.task,n=e.course,i=e.updateLink;if(!t.migratedTexts)return a.createElement(a.Fragment,null," ");var o=t.migratedTexts,c=o.abilities,l=o.centralContent,u=o.knowledgeRequirements,d=Object.keys(u||{}).map(function(e){return r.a({},n.knowledgeRequirements.find(function(t){return t.id===e}),u[e])}),m={title:"Uppdaterat kunskapskrav för betyget A",type:"knowledgeRequirements",items:d.filter(function(e){return"A"===e.gradeStep})},p={title:"Uppdaterat Kunskapskrav för betyget C",type:"knowledgeRequirements",items:d.filter(function(e){return"C"===e.gradeStep})},f={title:"Uppdaterat kunskapskrav för betyget E",type:"knowledgeRequirements",items:d.filter(function(e){return"E"===e.gradeStep})},h={title:"Uppdaterade förmågor",type:"abilities",items:Object.keys(c||{}).map(function(e){return r.a({},n.abilities.find(function(t){return t.id===e}),c[e])})},b=[m,p,f,{title:"Uppdaterat centralt innehåll",type:"centralContent",items:Object.keys(l||{}).map(function(e){return r.a({},n.centralContent.find(function(t){return t.id==e}),l[e])})},h].filter(function(e){return e.items.length>0});return 0===b.length?a.createElement(a.Fragment,null," "):a.createElement(s.a,{className:"larger",title:a.createElement("div",null,a.createElement("div",{className:"warningFlag"},a.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),a.createElement("p",null,"Uppdaterade formuleringar från Skolverket"))},b.map(function(e){var t=e.title,n=(e.type,e.items);return a.createElement("div",{key:t},a.createElement("h5",null,t),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{width:"40%"}},"Ursprunglig formulering"),a.createElement("th",{style:{width:"40%"}},"Skolverkets nya formulering"),a.createElement("th",null,"Täcker uppgiften den nya formuleringen?"))),a.createElement("tbody",null,n.map(function(e){return a.createElement("tr",{key:e.id},a.createElement("td",{dangerouslySetInnerHTML:{__html:e.oldText}}),a.createElement("td",{dangerouslySetInnerHTML:{__html:e.name}}),a.createElement("td",null,a.createElement("button",{onClick:function(){return i(e.id,!0)}},"Ja - behåll kopplingen"),a.createElement("button",{onClick:function(){return i(e.id,!1)}},"Nej - ta bort kopplingen")))}))))}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=["Lära att lära","Samarbeta","Agera globalt","Visa handlingskraft","Vara innovativ","Leva digitalt"]},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(1),a=n(11),s=n.n(a),i=n(7),o=3e5,c=i.a.KED_KEEP_ALIVE_URL,l=Date.now();function u(){setInterval(m,o),setTimeout(function(){return s()("body").mousemove(d).keypress(d).scroll(d)},100)}function d(){l=Date.now()}function m(){Date.now()-l<o&&function(){r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:console.log("Sending heartbeat request to "+c),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,fetch(c,{cache:"no-cache",credentials:"same-origin"})];case 2:return e=n.sent(),console.log("Response from "+c+": "+e.status+" "+e.statusText),[3,4];case 3:return t=n.sent(),console.warn("Request to "+c+" failed: "+t),[3,4];case 4:return[2]}})})}()}},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(2),o=n(12),c=n(6),l=n.n(c),u=n(5),d=n(13),m=n(162),p=n.n(m);function f(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return"urkund-status urkund-status-error";case"Submitted":return"urkund-status urkund-status-submitted";case"Accepted":return"urkund-status urkund-status-accepted";case"Analyzed":return"urkund-status urkund-status-analyzed"}}function h(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return e.ExternalId?"Kunde inte tas emot av urkund. Felkod: "+e.Status.ErrorCode+"\nExternal ID: "+e.ExternalId+"\nFelmeddelande: "+e.Status.Message:e.Status.Message;case"Submitted":return"Filen är uppladdad till Urkund. Klicka för att uppdatera status.";case"Accepted":return"Filen analyseras fortfarande av Urkund. Klicka för att uppdatera status.";case"Analyzed":return"Rapport skapad. Klicka för att öppna rapporten i nytt fönster"}}function b(e){if(!e||!e.Status)return"";switch(e.Status.State){case"Error":return"urkund-significance-error";case"Submitted":return"urkund-significance-submitted";case"Accepted":return"urkund-significance-accepted"}var t=e.Report;return t?t.Significance<1?"urkund-significance urkund-significance-0":t.Significance<10?"urkund-significance urkund-significance-1":t.Significance<25?"urkund-significance urkund-significance-2":t.Significance<40?"urkund-significance urkund-significance-3":t.Significance<55?"urkund-significance urkund-significance-4":t.Significance<70?"urkund-significance urkund-significance-5":t.Significance<85?"urkund-significance urkund-significance-6":t.Significance<99.9?"urkund-significance urkund-significance-7":t.Significance>=99.9?"urkund-significance urkund-significance-8":"":""}var g=n(72),v=n(79),k=n(84),y=n(25),E=n(66);n.d(t,"a",function(){return O});var w=[".pdf",".odt",".docx",".doc",".cad",".wav",".mp3",".mpeg4",".mp4",".zip",".png",".jpg",".jpeg",".gif"],T=[".pdf",".odt",".docx",".doc"],O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assignments:[],loading:!0},n}return r.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,t,r)})},t.prototype.componentDidMount=function(){this.load()},t.prototype.componentWillReceiveProps=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return n.trys.push([0,4,,5]),e.taskId===this.props.taskId&&e.courseId===this.props.courseId?[3,3]:[4,this.setStatePromised(function(){return{assignments:[],loading:!0}})];case 1:return n.sent(),[4,this.load()];case 2:n.sent(),n.label=3;case 3:return[3,5];case 4:return t=n.sent(),Object(i.n)(t),[3,5];case 5:return[2]}})})},t.prototype.update=function(e,t){return r.g([t],e.filter(function(e){var n=e.user,r=e.filename;return n!==t.user||r!==t.filename}))},t.prototype.refreshAssignment=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,c,l,d,m,p,f,h,b=this;return r.d(this,function(g){switch(g.label){case 0:return t=s.a.kedBackendClient.http,n=this.props,a=n.courseId,i=n.taskId,o=n.school,c=e.user,l=e.filename,[4,this.setState(function(t){var n=t.assignments;return{assignments:b.update(n,r.a({},e,{isRefreshing:!0}))}})];case 1:g.sent(),g.label=2;case 2:return g.trys.push([2,8,,10]),[4,t.get("assignments/urkund/"+o+"/"+a+"/"+i+"/"+c+"/"+l)];case 3:return(d=g.sent()).status>=400?(m=u.c.bind,p=[void 0,d.status],[4,d.text()]):[3,5];case 4:throw new(m.apply(u.c,p.concat([g.sent()])));case 5:return[4,d.text()];case 6:return f=g.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:b.update(n,r.a({},e,{isRefreshing:!1,metadata:r.a({},e.metadata,{urkundResponse:f})}))}})];case 7:return g.sent(),[3,10];case 8:return h=g.sent(),[4,this.setState(function(t){var n=t.assignments;return{assignments:b.update(n,r.a({},e,{isRefreshing:!1,refreshError:h}))}})];case 9:return g.sent(),[3,10];case 10:return[2]}})})},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,i,o,c,m,p,f,h,b,g,v,k,y,E,w;return r.d(this,function(T){switch(T.label){case 0:return T.trys.push([0,13,,14]),e=s.a.kedBackendClient.http,t=this.props,n=t.courseId,a=t.taskId,i=t.school,[4,(o=Object(d.e)(s.a.currentUser,i))?e.get("assignments/"+i+"/"+n+"/"+a):e.get("assignments/"+i+"/"+n+"/"+a+"/"+s.a.currentUser.mail)];case 1:return 200===(c=T.sent()).status?[3,3]:(m=u.c.bind,p=[void 0,c.status],[4,c.text()]);case 2:throw new(m.apply(u.c,p.concat([T.sent()])));case 3:return[4,c.json()];case 4:if(f=T.sent(),this.setState({error:null,loading:!1,assignments:f}),!o)return[3,12];h=f.filter(function(e){return e.metadata&&!e.metadata.urkundUploadError&&(!e.metadata.urkundLastPoll||["Accepted","Submitted"].indexOf(JSON.parse(e.metadata.urkundResponse)[0].Status.State)>=0&&parseInt(e.metadata.urkundLastPoll)<l()().add(-15,"seconds").toDate().getTime())}),T.label=5;case 5:T.trys.push([5,10,11,12]),b=r.h(h),g=b.next(),T.label=6;case 6:return g.done?[3,9]:(v=g.value,[4,this.refreshAssignment(v)]);case 7:T.sent(),T.label=8;case 8:return g=b.next(),[3,6];case 9:return[3,12];case 10:return k=T.sent(),E={error:k},[3,12];case 11:try{g&&!g.done&&(w=b.return)&&w.call(b)}finally{if(E)throw E.error}return[7];case 12:return[3,14];case 13:return y=T.sent(),this.setState({loading:!1,error:"Kunde inte ladda inlämningsuppgifter",assignments:[]}),console.error(y),[3,14];case 14:return[2]}})})},t.prototype.onDrag=function(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"},t.prototype.verifyAndUpload=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,,4]),e?this.state.assignments.some(function(t){return t.user===s.a.currentUser.mail&&t.filename===e.name})&&!confirm("Ersätta befintlig fil ("+e.name+")?")?[2]:this.props.school.toLowerCase()===s.a.currentUser.school.toLowerCase()||confirm("Uppgiften tillhör en annan skola ("+this.props.school+").\nVill du ändå lämna in ditt arbete här?")?(this.setState({uploadingFile:e}),[4,this.upload(e,t)]):[2]:[2];case 1:return r.sent(),[4,this.load()];case 2:return r.sent(),this.setState({uploadingFile:null}),[3,4];case 3:return n=r.sent(),this.setState({error:"Kunde inte ladda upp filen. "+(n.message||n),uploadingFile:null}),console.error(n),[3,4];case 4:return[2]}})})},t.prototype.upload=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,o,c,l,d,m,p,f,h,b;return r.d(this,function(g){switch(g.label){case 0:if(s.a.kedBackendClient.http,n=this.props,a=n.courseId,i=n.taskId,o=n.school,c=n.sendToUrkund,l=s.a.currentUser.mail,T.indexOf("."+e.name.split(".").reverse()[0].toLowerCase())>=0){if(e.size>52428800)throw new Error("Filer av denna typ får inte vara större än 50 MB")}else if(e.size>104857600)throw new Error("Filen får inte vara större än 100 MB");if(d=e.name.toLowerCase(),!w.some(function(e){return d.endsWith(e)}))throw new Error("Filens ändelse måste vara "+w.join(" / "));return(m=new FormData).append("files",e),p={userDisplayName:s.a.currentUser.displayName,verifyWithUrkund:c},t&&(p=r.a({},p,{driveFileId:t.fileId,driveFileUrl:t.url,driveFileIconUrl:t.iconUrl})),[4,s.a.kedBackendClient.http.fetch("assignments/"+o+"/"+a+"/"+i+"/"+l,"put",{},p,{body:m})];case 1:return 200===(f=g.sent()).status?[3,3]:(h=u.c.bind,b=[void 0,f.status],[4,f.text()]);case 2:throw new(h.apply(u.c,b.concat([g.sent()])));case 3:return[2]}})})},t.prototype.download=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,5,,6]),[4,s.a.kedBackendClient.http.fetch(e.mediaLink,"get",{})];case 1:return(t=r.sent()).status>=400?(n=u.c.bind,a=[void 0,t.status],[4,t.text()]):[3,3];case 2:throw new(n.apply(u.c,a.concat([r.sent()])));case 3:return[4,t.blob()];case 4:return i=r.sent(),p()(i,e.filename,e.contentType),[3,6];case 5:return o=r.sent(),this.setState({error:"Kunde inte ladda ned filen. "+(o.message||o)}),console.error(o),[3,6];case 6:return[2]}})})},t.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(o){switch(o.label){case 0:return o.trys.push([0,6,,7]),[4,this.setStatePromised(function(t){return{assignments:t.assignments.map(function(t){return t.mediaLink===e?r.a({},t,{metadata:r.a({},t.metadata,{$meta:"delete"})}):r.a({},t)})}})];case 1:return o.sent(),[4,s.a.kedBackendClient.http.fetch(e,"delete",{})];case 2:return(t=o.sent()).status>=400?(n=u.c.bind,a=[void 0,t.status],[4,t.text()]):[3,4];case 3:throw new(n.apply(u.c,a.concat([o.sent()])));case 4:return[4,this.load()];case 5:return o.sent(),[3,7];case 6:return i=o.sent(),this.setState({error:"Kunde inte ta bort filen. "+(i.message||i)}),console.error(i),[3,7];case 7:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.courseId,c=t.taskId,u=t.school,m=this.state,p=m.loading,w=m.assignments,T=m.error,O=m.uploadingFile,N=Object(d.e)(s.a.currentUser,u),I=r.g(w),C=y.b.picker;if(O){var S={school:u,courseId:n,taskId:c,filename:O.name,size:O.size,user:s.a.currentUser.mail,contentType:O.type,uploadDate:Date.now(),mediaLink:"assignments/"+u+"/"+n+"/"+c+"/"+s.a.currentUser.mail+"/"+O.name,metadata:{$meta:"add",userDisplayName:s.a.currentUser.displayName}};I=I.filter(function(e){return e.mediaLink!==S.mediaLink}),I=r.g(I,[S])}var D=(I=I.sort(Object(i.h)(["metadata.userDisplayName","filename","uploadDate"],["sv","en"],{sensitivity:"base"}))).some(function(e){return e.user===s.a.currentUser.mail});return a.createElement("div",{onDragOver:function(t){return e.onDrag(t)},onDrop:function(t){t.stopPropagation(),t.preventDefault(),e.verifyAndUpload(t.dataTransfer.files[0])}},T?a.createElement(a.Fragment,null,a.createElement("p",{className:"error"},T)):void 0,p?a.createElement(a.Fragment,null,a.createElement(o.a,null)," Laddar inlämnade filer..."):0===I.length?N?a.createElement("p",null,"Ingen elev har lämnat in något arbete ännu."):void 0:a.createElement(a.Fragment,null,a.createElement("table",{className:"task-assignments-table"},a.createElement("thead",null,a.createElement("tr",null,N?a.createElement("th",null,"Elev"):void 0,a.createElement("th",null,"Filnamn"),a.createElement("th",null,"Inlämnat den"),N&&a.createElement(a.Fragment,null,a.createElement("th",null,"Rapport"),a.createElement("th",null,"Nivå")),D&&a.createElement("th",null))),a.createElement("tbody",null,I.map(function(t){return a.createElement("tr",{key:t.mediaLink,style:t.metadata.$meta?{opacity:.5}:{}},N?a.createElement(a.Fragment,null,a.createElement("td",null,a.createElement("a",{href:"mailto:"+t.user},t.metadata.userDisplayName||t.user)),a.createElement("td",null,t.metadata.driveFileId?a.createElement(j,{file:t}):a.createElement("a",{href:"#",onClick:function(n){n.preventDefault(),n.stopPropagation(),e.download(t)}},t.filename)),a.createElement("td",{className:"assignment-date-col"},l()(t.uploadDate).format("YYYY-MM-DD HH:mm")),"add"===t.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(o.a,null)," Laddar upp..."):"delete"===t.metadata.$meta?a.createElement("td",{colSpan:2},a.createElement(o.a,null)," Tar bort..."):(n=t.metadata,r=n.urkundResponse&&JSON.parse(n.urkundResponse),!(i=r&&r[0])&&t.metadata.urkundUploadError&&(i={Status:{ErrorCode:-1,Message:t.metadata.urkundUploadError,State:"Error"},ExternalId:t.metadata.urkundExternalId}),t.isRefreshing?a.createElement("td",{colSpan:2},a.createElement(o.a,null)," Uppdaterar..."):i?a.createElement(a.Fragment,null,a.createElement("td",{className:"urkund-status-col"},a.createElement("a",{href:i.Report&&i.Report.ReportUrl,onClick:function(n){-1!==["Accepted","Submitted"].indexOf(i.Status.State)&&(n.preventDefault(),n.stopPropagation(),e.refreshAssignment(t))},target:"_blank",title:h(i)},a.createElement("div",{className:f(i)}))),a.createElement("td",{className:"urkund-status-col"},a.createElement("div",{className:b(i)},i.Report&&"number"==typeof i.Report.Significance?i.Report.Significance.toFixed()+"%":" "))):a.createElement("td",{colSpan:2}))):a.createElement(a.Fragment,null,a.createElement("td",null,t.metadata.driveFileId?a.createElement(j,{file:t}):a.createElement("a",{href:"#",onClick:function(n){n.preventDefault(),n.stopPropagation(),e.download(t)}},t.filename)),a.createElement("td",{className:"assignment-date-col"},"add"===t.metadata.$meta?a.createElement(a.Fragment,null,a.createElement(o.a,null)," Laddar upp..."):"delete"===t.metadata.$meta?a.createElement(a.Fragment,null,a.createElement(o.a,null)," Tar bort..."):l()(t.uploadDate).format("YYYY-MM-DD HH:mm"))),D&&a.createElement("td",null,!t.metadata.$meta&&t.user===s.a.currentUser.mail&&a.createElement("a",{href:"#",onClick:function(n){n.stopPropagation(),n.preventDefault(),confirm("Radera inlämnad fil "+t.filename+"?")&&e.delete(t.mediaLink)}},a.createElement("i",{className:"fa fa-trash"}))));var n,r,i})))),Object(g.a)()?void 0:a.createElement(a.Fragment,null,a.createElement("div",{className:"drop-zone task-assignment-drop-zone"},"Droppa ditt färdiga arbete här.",a.createElement("br",null),"Det går också bra att använda bläddra-knappen nedan."),a.createElement("input",{type:"file",onChange:function(t){return e.verifyAndUpload(t.target.files[0])}}),C&&a.createElement(k.a,{label:"Hämta från Google Drive",action:function(){var t=new v.a({upload:!0}),n=new E.a;t.show().then(function(t){var r=t[0];r&&n.downloadFile({file:r,limitSize:100}).then(function(t){return e.verifyAndUpload(t,r)})})}})))},t}(a.Component);function j(e){var t=e.file,n=t.metadata,r=n.driveFileIconUrl,s=n.driveFileUrl,i=t.filename.substr(0,t.filename.lastIndexOf("."));return a.createElement("div",{className:"align-horizontal spaced"},a.createElement("div",{className:"horizontalItem top"},a.createElement("img",{className:"file-icon",src:r})),a.createElement("div",{className:"horizontalItem top"},a.createElement("p",null,a.createElement("a",{target:"_blank",href:s},i))))}},,,,,function(e,t,n){var r={"./en-SG":87,"./en-SG.js":87,"./en-au":88,"./en-au.js":88,"./en-ca":89,"./en-ca.js":89,"./en-gb":90,"./en-gb.js":90,"./en-ie":91,"./en-ie.js":91,"./en-il":92,"./en-il.js":92,"./en-nz":93,"./en-nz.js":93,"./sv":94,"./sv.js":94};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=142},function(e,t){},function(e,t){},,,,,,,function(e,t,n){"use strict";var r=n(3),a=n(73),s=n(15),i=Object(s.b)(location.search).user;if(i){var o=a.a.find(function(e){return e.username===i});o&&(r.a.currentUser=o)}var c=Object(s.b)(location.search),l=c.role,u=c.school;r.a.currentUser&&(l&&(r.a.currentUser.roles=l.split(",")),u&&(r.a.currentUser.school=u))},,,,,,,,,function(e,t,n){"use strict";function r(e){var t,n,r;document.write('<link rel="stylesheet" href="'+(t=e,n=location.protocol+"//"+location.host+location.pathname,r=n.lastIndexOf("/"),n.substr(0,r+1)+t)+'" />')}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";function r(e){var t=e.v1,n=e.versionFolder,r=e.version,a=e.includeCSS,s=e.NOCSS;s||t&&t.forEach(function(e){return a(e)});var i=parseInt(s);isNaN(i)&&(i=1);for(var o=i+1;o<=r;++o)a(n+"/v"+o+".css")}n.d(t,"a",function(){return r})},,,,,,,,,,,,function(e,t,n){"use strict";var r=n(7);r.b.KED_LOCALE="sv",r.b.KED_SCHOOL_LOCALE="sv"},,,,,,,,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n.n(a),i=n(300),o=n(298),c=n(299),l=n(76),u=n(100),d=n(131),m=n(38),p=n(9),f=n(36),h=n(2),b=n(7),g=n(13),v=n(5),k=n(225),y=n(3);function E(){return Object(g.d)(y.a.currentUser,"standard")}var w,T,O,j,N,I,C,S,D,x,R,L,M,_,A,U,P,B,F,q,H,G,z,K,W,Y,V,$,Z,Q,J,X,ee,te,ne,re,ae,se,ie=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editingName:!1,name:""},n}return r.c(t,e),t.prototype.createTab=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,c,l,u,d,m;return r.d(this,function(p){switch(p.label){case 0:return this.setState({editingName:!1,name:""}),t=this.props,n=t.type,a=t.branch,s=t.draftId,i=t.course,o=t.school,c=t.history,l=t.block,u=t.stepNo,d={id:Object(v.h)(),tabTitle:e,name:e,order:Date.now(),locked:!!E(),acl:["role:USER:R","schoolRole:"+o+"/EMPLOYEE:S"]},"step-course-tab"===(m="theme-course-tab"===n?r.a({type:"theme-course-tab",tabClass:"content-tab",tags:[this.props.course.id]},d):r.a({type:"step-course-tab",tabClass:"content-tab",tags:r.g(l.tags)},d,{stepNo:u})).type?a.courseBlocks.addRelated(l.id,"tabs",m):a.courseInstances.addRelated(i.id,"tabs",m),[4,a.saveNow()];case 1:return p.sent(),c.push("/"+o+"/courses/"+i.id+"/tabs/"+m.id+"/drafts/"+s+"/edit"),[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=(t.school,t.course,t.branch,this.state),s=n.editingName,i=n.name;return a.createElement(a.Fragment,null,a.createElement("a",{onClick:s?null:function(t){return e.setState({editingName:!0,name:""})}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),s?a.createElement("input",{type:"text",style:{color:"black"},autoFocus:!0,placeholder:Object(h.a)(T||(T=r.e(["Fliknamn"],["Fliknamn"]))),value:i,size:30,onChange:function(t){return e.setState({name:t.target.value})},onKeyPress:function(t){"Enter"===t.key&&e.createTab(i)},onBlur:function(){return e.setState({editingName:!1})}}):" "+Object(h.a)(w||(w=r.e(["Ny flik"],["Ny flik"])))))},t}(a.Component),oe=Object(k.a)(ie),ce={"rich-text":Object(h.a)(O||(O=r.e(["Textruta"],["Textruta"]))),"youtube-movie":Object(h.a)(j||(j=r.e(["Youtube film"],["Youtube film"]))),"learning-goals":Object(h.a)(N||(N=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"]))),"resource-list":Object(h.a)(I||(I=r.e(["Resurslista"],["Resurslista"]))),"embedded-html":Object(h.a)(C||(C=r.e(["Inbäddad HTML"],["Inbäddad HTML"]))),"word-bank":Object(h.a)(S||(S=r.e(["Ordbank"],["Ordbank"])))},le={"rich-text":Object(h.a)(D||(D=r.e(["Lägg till text"],["Lägg till text"]))),"youtube-movie":Object(h.a)(x||(x=r.e(["Lägg till youtube film"],["Lägg till youtube film"]))),"learning-goals":Object(h.a)(R||(R=r.e(["Lägg till lärandemål och uppgifter"],["Lägg till lärandemål och uppgifter"]))),"resource-list":Object(h.a)(L||(L=r.e(["Lägg till resurslista"],["Lägg till resurslista"]))),"embedded-html":Object(h.a)(M||(M=r.e(["Lägg till inbäddad HTML"],["Lägg till inbäddad HTML"]))),"word-bank":Object(h.a)(_||(_=r.e(["Lägg till ordbank"],["Lägg till ordbank"])))},ue=function(e){function t(t){var n=e.call(this,t)||this;return n.state={open:!1,contentType:"rich-text"},n}return r.c(t,e),t.prototype.createContent=function(){var e=this.props,t=e.tab,n=e.branch,r=e.type,a=this.newContent(r||this.state.contentType);n.courseTabs.addRelated(t.id,"contents",a),this.setState({open:!1})},t.prototype.newContent=function(e){switch(e){case"rich-text":return this.newRichText();case"learning-goals":return this.newLearningGoal();case"embedded-html":return this.newEmbeddedHTML();case"word-bank":return this.newWordBank();case"resource-list":return this.newResourceList();default:throw new Error("Not implemented")}},t.prototype.newWordBank=function(){return{type:"word-bank",tags:[this.props.course.id],id:Object(v.h)(),order:Date.now(),locked:this.props.tab.locked,lockDelete:E(),hidden:!1,selectedWordBank:null}},t.prototype.newRichText=function(){return{type:"rich-text",tags:[this.props.course.id],id:Object(v.h)(),order:Date.now(),locked:this.props.tab.locked,lockDelete:E(),hidden:!1,html:""}},t.prototype.newEmbeddedHTML=function(){return{type:"embedded-html",tags:[this.props.course.id],id:Object(v.h)(),order:Date.now(),locked:this.props.tab.locked,lockDelete:E(),hidden:!1,html:""}},t.prototype.newLearningGoal=function(){return{type:"learning-goals",tags:[this.props.course.id],id:Object(v.h)(),locked:this.props.tab.locked,lockDelete:E(),hidden:!1,hasCommonLearningGoals:"theme-course"===this.props.course.type,commonLearningGoals:[],order:Date.now(),hiddenTasks:[]}},t.prototype.newResourceList=function(){return{type:"resource-list",tags:[this.props.course.id],id:Object(v.h)(),locked:this.props.tab.locked,lockDelete:E(),order:Date.now(),hidden:!1,resources:[]}},t.prototype.render=function(){var e=this;return this.state.open?a.createElement("div",null,a.createElement("select",{onChange:function(t){return e.setState({contentType:t.target.value})}},Object.keys(ce).map(function(e){return a.createElement("option",{key:e,value:e},ce[e])})),a.createElement("a",{className:"btn pull-right",onClick:function(){return e.setState({open:!1})}},Object(h.a)(A||(A=r.e(["Avbryt"],["Avbryt"])))),a.createElement("a",{className:"btn btn-default",onClick:function(){return e.createContent()}},Object(h.a)(U||(U=r.e(["Skapa"],["Skapa"]))))):a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){e.props.type?e.createContent():e.setState({open:!0})}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),this.props.type?le[this.props.type]:Object(h.a)(P||(P=r.e(["Lägg till innehåll"],["Lägg till innehåll"]))))," ")},t}(a.Component),de=function(e){var t=e.className,n=e.classNames,a=e.children;return s.a.createElement("div",{className:r.g(n||[],t?[t]:[],["align-horizontal"]).join(" ")},a)},me=function(e){var t=e.className,n=e.classNames,a=e.children;return s.a.createElement("div",{className:r.g(n||[],t?[t]:[],["horizontalItem"]).join(" ")},a)},pe={"intro-tab":Object(h.a)(B||(B=r.e(["Introduktionsflik"],["Introduktionsflik"]))),"run-up-tab":Object(h.a)(F||(F=r.e(["Upptaktsflik"],["Upptaktsflik"]))),"subject-tab":Object(h.a)(q||(q=r.e(["Ämnesflik"],["Ämnesflik"]))),"mission-tab":Object(h.a)(H||(H=r.e(["Uppdragsflik"],["Uppdragsflik"]))),"content-tab":Object(h.a)(G||(G=r.e(["Generell flik"],["Generell flik"]))),"teacher-tab":Object(h.a)(z||(z=r.e(["Lärarsida"],["Lärarsida"]))),"word-bank-tab":Object(h.a)(K||(K=r.e(["Ordbank"],["Ordbank"])))},fe={"step-course":["content-tab","intro-tab","teacher-tab","word-bank-tab"],"theme-course":["content-tab","run-up-tab","subject-tab","mission-tab","teacher-tab"]},he=n(51),be=n(29),ge=function(e){var t=e.tab,n=e.repo,a=e.course,i=t.subject?t.subject:"theme-course"===a.type&&a.subjects&&a.subjects.length>0?{subjectCode:a.subjects[0].code,subjectName:a.subjects[0].name}:{subjectCode:"",subjectName:""},o=i.subjectCode,c=i.subjectName,l=Object(he.d)(a.tags),u=Object(he.d)(t.tags)[0]||l[0]||null;return s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("p",{className:"box-mini-label"},Object(h.a)(W||(W=r.e(["Inställningar för fliken ",""],["Inställningar för fliken ",""])),t.name||t.tabTitle)),s.a.createElement(de,null,s.a.createElement(me,null,s.a.createElement("label",{className:"kclabel"},Object(h.a)(Y||(Y=r.e(["Flikens typ"],["Flikens typ"]))))),s.a.createElement(me,null,s.a.createElement("select",{value:t.tabClass,onChange:function(e){return n.courseTabs.update(t,"subject-tab"===e.target.value?{tabClass:e.target.value,subject:{subjectCode:o,subjectName:c},tags:Object(he.a)(t.tags,[o],[u])}:{tabClass:e.target.value})}},fe[a.type].map(function(e){return s.a.createElement("option",{key:e,value:e},pe[e])})))),s.a.createElement(be.a,{label:Object(h.a)(V||(V=r.e(["Flikens namn"],["Flikens namn"]))),id:"TabSettings:name",value:t.name||t.tabTitle,onChange:function(e){return n.courseTabs.update(t,{name:e,tabTitle:e})}}))},ve={"rich-text":Object(h.a)($||($=r.e(["Textruta"],["Textruta"]))),"youtube-movie":Object(h.a)(Z||(Z=r.e(["Youtube film"],["Youtube film"]))),"learning-goals":Object(h.a)(Q||(Q=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"]))),"resource-list":Object(h.a)(J||(J=r.e(["Resurslista"],["Resurslista"]))),"embedded-html":Object(h.a)(X||(X=r.e(["Inbäddad HTML"],["Inbäddad HTML"]))),"word-bank":Object(h.a)(ee||(ee=r.e(["Ordbank"],["Ordbank"])))},ke=n(56),ye=n(52),Ee=function(e){var t=e.content,n=e.repo,r=e.editMode,a=e.reportNumChars,i=e.maxChars;return r?s.a.createElement("div",null,s.a.createElement(ke.a,{html:t.html,defaultActions:ye.a,readOnly:!r||t.locked&&!E(),reportNumChars:a,maxChars:i,actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","outdent","indent","line","link","image"],onChange:r&&function(e){return n.courseContents.update(t,{html:e})}})):s.a.createElement("div",null,s.a.createElement("div",{className:"rich-text-readonly",dangerouslySetInnerHTML:{__html:t.html}}))},we=function(e){var t=e.tab,n=e.content,a=e.repo;return s.a.createElement("div",null,s.a.createElement("h2",null,"mission-tab"!==t.tabClass?Object(h.a)(te||(te=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"]))):Object(h.a)(ne||(ne=r.e(["Uppdrag"],["Uppdrag"])))),E()&&"mission-tab"!==t.tabClass?s.a.createElement(s.a.Fragment,null,s.a.createElement("div",null,s.a.createElement(de,null,s.a.createElement(me,null,s.a.createElement("input",{type:"checkbox",checked:n.hasCommonLearningGoals,onChange:function(e){return a.courseContents.update(n,{hasCommonLearningGoals:!!e.target.checked})}})),s.a.createElement(me,null,s.a.createElement("p",null," ",Object(h.a)(re||(re=r.e(["Specificera gemensamma lärandemål för samtliga uppgifter"],["Specificera gemensamma lärandemål för samtliga uppgifter"]))))))),s.a.createElement("div",null,s.a.createElement("p",null,n.hasCommonLearningGoals?Object(h.a)(ae||(ae=r.e(["Ange de gemensamma lärandemålen. Ange ett lärandemål per rad."],["Ange de gemensamma lärandemålen. Ange ett lärandemål per rad."]))):Object(h.a)(se||(se=r.e(["Ange ett lärandemål per rad."],["Ange ett lärandemål per rad."])))),s.a.createElement("textarea",{className:"learning-goal-box",value:n.commonLearningGoals.join("\n"),onChange:function(e){return a.courseContents.update(n,{commonLearningGoals:e.target.value.split("\n")})}}))):null)},Te=n(67);var Oe,je,Ne,Ie,Ce,Se,De,xe,Re,Le,Me,_e,Ae=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editingName:!1,name:""},n}return r.c(t,e),t.prototype.createTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o,c,l,u,d,m,p,f,b;return r.d(this,function(g){switch(g.label){case 0:return this.setState({editingName:!1,name:""}),t=this.props,n=t.branch,a=t.draftId,s=t.course,i=t.tab,o=t.school,c=t.content,l=t.history,u=t.block,d=t.learningGoal,m=function(e,t,n){var a=[e.id];if("mission-tab"===t.tabClass){var s=e.tabs.filter(function(e){return"subject-tab"===e.tabClass}),i=Object(h.j)(s.map(function(e){return e.subject}),function(e){return e.subjectCode}),o=Object(h.j)(Object(h.k)(s.map(function(e){return e.tags.filter(function(e){return e.startsWith("course:")})})));return a.push.apply(a,r.g(i.map(function(e){return"sub:"+e.subjectCode}))),a.push.apply(a,r.g(o)),{tags:a,subject:i.map(function(e){return e.subjectName}).join(", ")}}return a.push.apply(a,r.g((t||n).tags.filter(function(e){return e.startsWith("course:")}))),"theme-course"===e.type?a.push.apply(a,r.g(t.tags.filter(function(e){return e.startsWith("sub:")}))):a.push.apply(a,r.g(n.tags.filter(function(e){return e.startsWith("sub:")}))),{tags:a,subject:"theme-course"===e.type?t.subject.subjectName:e.subject.subjectName}}(s,i,u),p=m.tags,f=m.subject,b={id:Object(v.h)(),tags:p,name:e,acl:["role:USER:R","schoolRole:"+o+"/EMPLOYEE:S"],url:"",taskType:"task",learningGoal:d,futureAbilities:[],resources:[],subject:f},n.courseContents.addRelated(c.id,"tasks",b),[4,n.saveNow()];case 1:return g.sent(),l.push("/"+o+"/courses/"+s.id+"/tabs/"+i.id+"/contents/"+c.id+"/tasks/"+b.id+"/drafts/"+a+"/edit"),[2]}})})},t.prototype.render=function(){var e=this,t=this.state,n=t.editingName,s=t.name;return a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:n?null:function(t){return e.setState({editingName:!0,name:""})}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),n?a.createElement("input",{type:"text",autoFocus:!0,placeholder:Object(h.a)(Ne||(Ne=r.e(["Uppgiftens namn"],["Uppgiftens namn"]))),value:s,size:50,onChange:function(t){return e.setState({name:t.target.value})},onKeyPress:function(t){"Enter"===t.key&&e.createTask(s)},onBlur:function(){return e.setState({editingName:!1})}}):" "+(E()?Object(h.a)(Oe||(Oe=r.e(["Lägg till uppgift"],["Lägg till uppgift"]))):Object(h.a)(je||(je=r.e(["Lägg till egen uppgift"],["Lägg till egen uppgift"]))))))},t}(a.Component),Ue=Object(k.a)(Ae),Pe=n(115),Be=n(111),Fe=n(107),qe=function(e){var t=e.school,n=e.repo,r=e.content,a=e.draftId,i=e.editMode,o=e.course,c=e.courseTab,l=e.learningGoals,u=e.block,d=Object(Fe.b)(r),m=Object(h.b)(d,function(e){return e.subject||""}),p="step-course"===o.type?o.subject:c.subject;return p&&!m[p.subjectName]&&(m[p.subjectName]=[]),s.a.createElement(s.a.Fragment,null,Object.keys(m).map(function(e){var d=m[e].map(function(n){return{id:n.id,name:n.name,url:i?"#/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/contents/"+r.id+"/tasks/"+n.id+"/drafts/"+a+"/edit":a?"#/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/contents/"+r.id+"/tasks/"+n.id+"/drafts/"+a:"#/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/tasks/"+n.id,courseName:o.name,learningGoal:e,step:"step-course-tab"===c.type?c.stepNo:void 0,task:n,courseInfo:{school:t,course:o.id,tab:c.id}}});function p(e){return"/"+t+"/courses/"+o.id+"/tabs/"+c.id+"/contents/"+r.id+"/tasks/"+e.id+"/drafts/"+a+"/edit"}return s.a.createElement("div",{key:e},s.a.createElement("h5",null,e),s.a.createElement("ul",null,l.map(function(e){return s.a.createElement("li",{key:e},e)})),i?s.a.createElement(s.a.Fragment,null,s.a.createElement(Pe.a,{taskMetas:d.map(function(e){return{task:e.task,isTaskOwner:!0}}),renderEditLink:function(e){var t=e.task;return s.a.createElement(s.a.Fragment,null,s.a.createElement(Be.a,{to:p(t),className:"editItem"})," ")},renderLink:function(e){var t=e.task;return s.a.createElement(Be.a,{to:p(t)},t.name)},onSort:function(e,t,a){var s=Object(Fe.a)(r.tasks,r.taskOrder,e,t,a,{appendLeftovers:!0});n.courseContents.update(r,{taskOrder:s})}}),s.a.createElement(Ue,{branch:n,content:r,course:o,school:t,draftId:a,tab:c,block:u,learningGoal:e})):s.a.createElement(Te.a,{learningTasks:d}))}))},He=function(e){var t=e.school,n=e.repo,a=e.content,i=e.draftId,o=e.editMode,c=e.course,l=e.courseTab,u=e.learningGoals,d=e.block,m=Object(Fe.b)(a),p={},f=u.reduce(function(e,t){return e[t]=m.filter(function(e){if(e.learningGoal&&e.learningGoal.split("\n").map(function(e){return e.trim().toLowerCase()}).includes(t.toLowerCase()))return p[e.id]=!0,!0}),e},{}),b=m.filter(function(e){return!p[e.id]});function g(e){return"/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/contents/"+a.id+"/tasks/"+e.id+"/drafts/"+i+"/edit"}return"mission-tab"===l.tabClass||0===m.length?f[""]=b:b.length>0&&(f[Object(h.a)(Ie||(Ie=r.e(["Övergripande"],["Övergripande"])))]=b),s.a.createElement(s.a.Fragment,null,Object.keys(f).map(function(e){var u=f[e].map(function(n){return{id:n.id,name:n.name,url:o?"#/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/contents/"+a.id+"/tasks/"+n.id+"/drafts/"+i+"/edit":i?"#/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/contents/"+a.id+"/tasks/"+n.id+"/drafts/"+i:"#/"+t+"/courses/"+c.id+"/tabs/"+l.id+"/tasks/"+n.id,courseName:c.name,learningGoal:"mission-tab"===l.tabClass?Object(h.a)(Ce||(Ce=r.e(["Uppdrag"],["Uppdrag"]))):e,step:"step-course-tab"===l.type?l.stepNo:void 0,task:n,courseInfo:{school:t,course:c.id,tab:l.id}}});return s.a.createElement("div",{key:e},e&&s.a.createElement("h4",null,e),o?s.a.createElement(s.a.Fragment,null,s.a.createElement(Pe.a,{taskMetas:u.map(function(e){return{task:e.task,isTaskOwner:!0}}),renderEditLink:function(e){var t=e.task;return s.a.createElement(s.a.Fragment,null,s.a.createElement(Be.a,{to:g(t),className:"editItem"})," ")},renderLink:function(e){var t=e.task;return s.a.createElement(Be.a,{to:g(t)},t.name)},onSort:function(e,t,r){var s=Object(Fe.a)(a.tasks,a.taskOrder,e,t,r,{appendLeftovers:!0});n.courseContents.update(a,{taskOrder:s})}}),s.a.createElement(Ue,{branch:n,content:a,course:c,school:t,draftId:i,tab:l,block:d,learningGoal:e})):s.a.createElement(Te.a,{learningTasks:u}))}))},Ge=function(e){var t=e.content,n=e.editMode,a=e.repo,i=e.course,o=e.school,c=e.draftId,l=e.courseTab,u=e.block,d=t.hasCommonLearningGoals,m=t.commonLearningGoals,p=(t.tasks,m.map(function(e){return e.trim()}).filter(function(e){return!!e}));return s.a.createElement("div",{className:"ked_boxed"},!n||t.locked&&!E()?"mission-tab"!==l.tabClass?s.a.createElement("h2",null,Object(h.a)(Se||(Se=r.e(["Lärandemål och uppgifter"],["Lärandemål och uppgifter"])))):s.a.createElement("h2",null,Object(h.a)(De||(De=r.e(["Uppdrag"],["Uppdrag"])))):s.a.createElement(we,{course:i,content:t,repo:a,tab:l}),s.a.createElement("hr",null),d&&"mission-tab"!==l.tabClass?s.a.createElement(qe,r.a({},{content:t,editMode:n,repo:a,course:i,school:o,draftId:c,courseTab:l,block:u,learningGoals:p})):s.a.createElement(He,r.a({},{content:t,editMode:n,repo:a,course:i,school:o,draftId:c,courseTab:l,block:u,learningGoals:p})))},ze=function(e){var t=e.content,n=e.repo,a=e.editMode,i=e.reportNumChars,o=e.maxChars;return!a||t.locked&&!E()?s.a.createElement("div",{dangerouslySetInnerHTML:{__html:t.html}}):s.a.createElement("div",null,s.a.createElement("h4",null,Object(h.a)(xe||(xe=r.e(["Inbäddat material"],["Inbäddat material"])))),s.a.createElement("p",null,Object(h.a)(Re||(Re=r.e(["Klipp in HTML kod nedan"],["Klipp in HTML kod nedan"])))),s.a.createElement("textarea",{style:{width:"100%",height:"100px"},value:t.html,onChange:function(e){var r=e.target.value;r.length>o||(n.courseContents.update(t,{html:r}),i(r.length))}}))},Ke=n(196),We=n.n(Ke),Ye=n(125);function Ve(e){var t=e.subjectName,n=e.stepNo,a=e.selectedWordBank,i=e.wordBanksAlreadyAdded,o=e.onChange,c=b.a.KED_ENUM_WORDBANKS_URL+"?sv.contenttype=application/json&subject="+t+"&step="+n,l=We()(c);return l=l.filter(function(e){var t=e.order;return a&&t===a.key||!i||!i.includes(t)}),s.a.createElement("div",null,s.a.createElement("h3",null,a?a.name:Object(h.a)(Le||(Le=r.e(["Välj ordbank"],["Välj ordbank"])))),s.a.createElement(Ye.a,{isMulti:!1,placeholder:Object(h.a)(Me||(Me=r.e(["Välj bland ordbanker för ",", steg ",""],["Välj bland ordbanker för ",", steg ",""])),t,n),noOptionsMessage:function(){return Object(h.a)(_e||(_e=r.e(["Kunde inte hitta tillgängliga ordbanker för ",", steg ",""],["Kunde inte hitta tillgängliga ordbanker för ",", steg ",""])),t,n)},options:l.map(function(e){var t=e.name,n=(e.id,e.order);e.url;return{label:t,value:n}}),value:a&&{label:a.name,value:a.key},onChange:function(e){return o({name:e.label,key:e.value})}}))}var $e=n(101);function Ze(e){var t=e.repo,n=e.content,i=e.siblingWordBanks,o=e.editMode,c=e.course,l=e.courseTab,u=n.selectedWordBank,d=c.subject.subjectName,m=l.stepNo,p=u&&b.a.KED_WORDBANKS_URL+"?preview=true&subject="+d+"&step="+m+"&list="+u.key,f=r.f(Object(a.useState)(200),2),h=f[0],g=f[1],v=Object(a.useRef)(),k=i.map(function(e){return e.selectedWordBank&&e.selectedWordBank.key}).filter(function(e){return!!e});return Object(a.useEffect)(function(){return g(200)},[u&&u.key]),s.a.createElement(s.a.Fragment,null,o&&(!n.locked||E())&&s.a.createElement(s.a.Suspense,{fallback:s.a.createElement($e.a,null)},s.a.createElement(Ve,r.a({},{subjectName:d,stepNo:m,wordBanksAlreadyAdded:k},{selectedWordBank:u,onChange:function(e){var r=e.name,a=e.key;t.courseContents.update(n,{selectedWordBank:{name:r,key:a}})}}))),u&&s.a.createElement("iframe",{ref:v,scrolling:"no",frameBorder:"0",style:{width:"100%",height:h,padding:0,margin:0},src:p,onLoad:function(){g(v.current.contentWindow.document.body.scrollHeight)}}))}var Qe,Je,Xe=s.a.createContext({openDialog:null,closeDialog:null}),et=n(116),tt=function(e){var t=e.content,n=e.editMode,i=e.repo,o=t.resources,c=Object(a.useContext)(Xe);return!n||t.locked&&!E()?s.a.createElement("div",null):s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("h4",null,Object(h.a)(Qe||(Qe=r.e(["Resurser"],["Resurser"])))),s.a.createElement("div",{className:"taskContainer"},o.map(function(e,n){return s.a.createElement("div",{className:"align-horizontal",key:n},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("a",{className:"editItem",onClick:function(){return c.openDialog(s.a.createElement(et.a,{title:"Edit resource",resource:e,onSave:function(e){o[n]=e,i.courseContents.update(t,{resources:r.g(o)}),c.closeDialog()},onDelete:function(){o.splice(n,1),i.courseContents.update(t,{resources:r.g(o)}),c.closeDialog()}}))}})," "),s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("div",{className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("a",{href:e.url},e.name)))))})),s.a.createElement("a",{className:"btn",onClick:function(){return c.openDialog(s.a.createElement(et.a,{title:"Resurs",onSave:function(e){i.courseContents.update(t,{resources:r.g(o,[e])}),c.closeDialog()}}))}},s.a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"}),Object(h.a)(Je||(Je=r.e(["Lägg till resurs"],["Lägg till resurs"])))))};function nt(e){var t=e.repo,n=e.content,a=e.siblingContents,i=e.editMode,o=e.course,c=e.draftId,l=e.school,u=e.courseTab,d=e.reportNumChars,m=e.maxChars,p=e.block;switch(n.type){case"rich-text":return s.a.createElement(Ee,r.a({},{repo:t,content:n,editMode:i,reportNumChars:d,maxChars:m}));case"learning-goals":return s.a.createElement(Ge,r.a({},{repo:t,content:n,editMode:i,course:o,draftId:c,courseTab:u,school:l,block:p}));case"resource-list":return s.a.createElement(tt,r.a({},{repo:t,content:n,editMode:i}));case"embedded-html":return s.a.createElement(ze,r.a({},{repo:t,content:n,editMode:i,reportNumChars:d,maxChars:m}));case"word-bank":return s.a.createElement(Ze,r.a({},{repo:t,editMode:i,content:n,siblingWordBanks:a.filter(function(e){return"word-bank"===e.type&&e.id!==n.id}),course:o,courseTab:u}));default:return s.a.createElement("p",null,"Okänd innehållstyp: ",n.type)}}var rt=n(39),at=n(23);function st(e,t,n,r){var a=e.map(function(e,t){return{doc:e,idx:t}}),s=a.filter(function(e){return e.doc.id===t})[0],i=a.filter(function(e){return e.doc.id===n})[0];if(s&&i){var o=i.idx;s.doc.order;return"after"===r?o===e.length-1?Date.now():e[o].order+Math.random()*(e[o+1].order-e[o].order):0===o?Math.round(e[0].order-100-1e4*Math.random()):e[o-1].order+Math.random()*(e[o].order-e[o-1].order)}return 0}var it,ot,ct,lt,ut,dt,mt,pt,ft,ht,bt,gt,vt,kt,yt,Et,wt,Tt,Ot,jt,Nt,It,Ct,St,Dt,xt,Rt,Lt,Mt,_t,At,Ut,Pt,Bt,Ft,qt,Ht,Gt,zt,Kt,Wt,Yt,Vt,$t,Zt,Qt,Jt,Xt,en,tn,nn,rn,an,sn,on,cn,ln,un,dn,mn,pn,fn,hn,bn,gn,vn,kn,yn,En,wn,Tn,On,jn,Nn,In,Cn,Sn,Dn,xn,Rn,Ln,Mn,_n,An,Un,Pn,Bn,Fn,qn,Hn,Gn,zn,Kn,Wn,Yn,Vn,$n,Zn,Qn,Jn,Xn,er,tr,nr,rr,ar,sr,ir,or,cr={MAX_CHARS_IN_CONTENTS:4e3,MAX_CHARS_TASK_NAMES:64,MAX_CHARS_TASK_INTRO_TEXT:200},lr=cr.MAX_CHARS_IN_CONTENTS,ur=function(e){function t(t){var n=e.call(this,t)||this;return n.numCharsObservable=new f.a(0),n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.editMode,n=e.content,a=e.branch,i=e.course,o=e.tab,c=e.school,l=e.draftId,u=e.contentOrderIndex,d=e.contents,m=e.block,p=E(),f=this.numCharsObservable;return!t||n.locked&&!p?s.a.createElement(nt,{key:n.id,repo:a,content:n,siblingContents:d,course:i,editMode:t,courseTab:o,school:c,draftId:l,block:m}):s.a.createElement("div",{key:n.id,className:["course-content-box","learning-goals"!==n.type&&"ked_boxed"].filter(function(e){return!!e}).join(" "),style:{position:"relative"}},s.a.createElement(de,null,s.a.createElement(me,null,s.a.createElement("p",{className:"box-mini-label"},ve[n.type])),s.a.createElement(me,null,p?s.a.createElement(s.a.Fragment,null," ",s.a.createElement("input",{type:"checkbox",checked:!n.locked,onChange:function(e){return a.courseContents.update(n,{locked:!e.target.checked})}}),Object(h.a)(it||(it=r.e(["Tillåt redigering"],["Tillåt redigering"]))),n.locked?null:s.a.createElement(s.a.Fragment,null," ",s.a.createElement("input",{type:"checkbox",checked:!n.lockDelete,onChange:function(e){return a.courseContents.update(n,{lockDelete:!e.target.checked})}}),Object(h.a)(ot||(ot=r.e(["Tillåt dölja rutan"],["Tillåt dölja rutan"]))))):null)),s.a.createElement(nt,{repo:a,content:n,siblingContents:d,course:i,editMode:!0,school:c,draftId:l,courseTab:o,maxChars:lr,reportNumChars:function(e){f.dispatch(e)},block:m}),s.a.createElement("div",{style:{position:"absolute",top:0,right:0}},(p||!n.locked)&&u>0&&s.a.createElement("span",null,s.a.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(){var e=st(d,n.id,d[u-1].id,"before");e&&a.courseContents.update(n,{order:e})}})," "),(p||!n.locked)&&u<d.length-1&&s.a.createElement("span",null,s.a.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(){var e=st(d,n.id,d[u+1].id,"after");e&&a.courseContents.update(n,{order:e})}})," "),p||!n.lockDelete?s.a.createElement(rt.a,{title:"standard"===c?Object(h.a)(ct||(ct=r.e(["Ta bort innehållsrutan"],["Ta bort innehållsrutan"]))):Object(h.a)(lt||(lt=r.e(["Dölj innehållsrutan"],["Dölj innehållsrutan"]))),style:{display:"inline-block"},onClick:function(){return confirm(Object(h.a)(ut||(ut=r.e(["Ta bort innehåll?"],["Ta bort innehåll?"]))))&&a.courseTabs.removeRelated(o.id,"contents",n)}}):null),"rich-text"===n.type?s.a.createElement(at.a,null,f.map(function(e){return s.a.createElement("div",{className:["char-counter-bottom"].concat(e>=lr?"overflowed":[]).join(" ")},Object(h.a)(dt||(dt=r.e(["Texten innehåller "," av max "," tillåtna tecken"],["Texten innehåller "," av max "," tillåtna tecken"])),e,lr))})):void 0)},t}(s.a.Component),dr=n(85),mr=n(129),pr=n(130),fr=n(19),hr=n(68),br=function(e){var t=e.repo,n=e.tab;return s.a.createElement(at.a,null,Object(pr.a)(Object(mr.a)(n.tags)).map(function(e){return 0===e.length?s.a.createElement("p",null,Object(h.a)(mt||(mt=r.e(["Fliken är inte kopplad till något ämne / årskurs"],["Fliken är inte kopplad till något ämne / årskurs"])))):s.a.createElement("div",null,e.map(function(a){var i=a.id,o=a.name,c=a.abilities,l=a.centralContent,u=a.knowledgeRequirements;return s.a.createElement("div",{key:i},1===e.length?void 0:s.a.createElement("h1",null,o),s.a.createElement(fr.a,{className:"larger",title:s.a.createElement("p",null,Object(h.a)(pt||(pt=r.e(["Lås flikens kunskapskrav"],["Lås flikens kunskapskrav"]))))},s.a.createElement("p",null,Object(h.a)(ft||(ft=r.e(["Markera de kunskapskrav som ämnesfliken ska täcka."],["Markera de kunskapskrav som ämnesfliken ska täcka."])))),s.a.createElement(at.a,null,t["knowledge-requirements"].hasEdgesFrom([n.id]).idsOnly().toValue().map(function(e){return s.a.createElement(dr.a,{knowledgeRequirements:u,markedIds:e.map(function(e){return e.id}),idsToMarkNotOk:{},markMode:!0,onMarkChanged:function(r,a){e.filter(function(e){return!u.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){t.courseTabs.removeRelated(n.id,"knowledgeRequirements",e)});var s=u.filter(function(e){return e.id===r})[0];a?t.courseTabs.addRelated(n.id,"knowledgeRequirements",s):t.courseTabs.removeRelated(n.id,"knowledgeRequirements",s)}})}))),s.a.createElement(at.a,null,t.abilities.hasEdgesFrom([n.id]).idsOnly().toValue().map(function(e){return s.a.createElement(hr.a,{options:c,title:Object(h.a)(ht||(ht=r.e(["Lås flikens förmågor"],["Lås flikens förmågor"]))),markedIds:e.map(function(e){return e.id}),markMode:!0,onMarkChanged:function(r,a){e.filter(function(e){return!c.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){t.courseTabs.removeRelated(n.id,"abilities",e)});var s=c.filter(function(e){return e.id===r})[0];a?t.courseTabs.addRelated(n.id,"abilities",s):t.courseTabs.removeRelated(n.id,"abilities",s)}})})),s.a.createElement(at.a,null,t["central-content"].hasEdgesFrom([n.id]).idsOnly().toValue().map(function(e){return s.a.createElement(hr.a,{options:l,title:Object(h.a)(bt||(bt=r.e(["Lås flikens centrala innehåll"],["Lås flikens centrala innehåll"]))),markedIds:e.map(function(e){return e.id}),markMode:!0,onMarkChanged:function(r,a){e.filter(function(e){return!l.some(function(t){var n=t.id;return e.id===n})}).forEach(function(e){t.courseTabs.removeRelated(n.id,"centralContent",e)});var s=l.filter(function(e){return e.id===r})[0];a?t.courseTabs.addRelated(n.id,"centralContent",s):t.courseTabs.removeRelated(n.id,"centralContent",s)}})})))}))}))},gr=function(e){var t=e.tab,n=e.repo,a=e.course,i=e.block,o=t.subject?t.subject:"theme-course"===a.type&&a.subjects&&a.subjects.length>0?{subjectCode:a.subjects[0].code,subjectName:a.subjects[0].name}:"step-course"===a.type?{subjectCode:a.subject.subjectCode,subjectName:a.subject.subjectName}:{subjectCode:"",subjectName:""},c=o.subjectCode,l=o.subjectName,u=Object(he.d)(a.tags),d=Object(he.d)(t.tags)[0]||u[0]||null;return s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("p",{className:"box-mini-label"},Object(h.a)(gt||(gt=r.e(["Administrativa Inställningar för fliken ",""],["Administrativa Inställningar för fliken ",""])),t.name||t.tabTitle)),s.a.createElement(de,null,s.a.createElement(me,null,s.a.createElement("input",{type:"checkbox",checked:t.locked,onChange:function(e){return n.courseTabs.update(t,{locked:!!e.target.checked})}})),s.a.createElement(me,null,Object(h.a)(vt||(vt=r.e(["Lås fliken från redigering förutom där det explicit tillåts"],["Lås fliken från redigering förutom där det explicit tillåts"]))))),"step-course"===a.type&&s.a.createElement(s.a.Fragment,null,s.a.createElement("br",null),s.a.createElement(fr.a,{title:Object(h.a)(kt||(kt=r.e(["Avancerat..."],["Avancerat..."])))},s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return e=Object(he.d)(i.tags)[0],[4,m(a,a.subject.subjectName,a.subject.subjectCode,e)];case 1:return t.sent(),[2]}})})}},Object(h.a)(yt||(yt=r.e(["Gör om kopplingen till ämne och årskursspann"],["Gör om kopplingen till ämne och årskursspann"])))))),"theme-course"===a.type&&"subject-tab"===t.tabClass&&!!c&&s.a.createElement(s.a.Fragment,null,s.a.createElement("br",null),a.subjects.length>1&&s.a.createElement(de,null,s.a.createElement(me,null,s.a.createElement("label",{className:"kclabel"},Object(h.a)(Et||(Et=r.e(["Ämne"],["Ämne"]))))),s.a.createElement(me,null,s.a.createElement("select",{value:c,onChange:function(e){return r.b(void 0,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return t=e.target.value,n=a.subjects.filter(function(e){return e.code===t}).map(function(e){return e.name})[0]||t,[4,m(a,n,t,d)];case 1:return r.sent(),[2]}})})}},a.subjects.map(function(e){var t=e.name,n=e.code;return s.a.createElement("option",{key:n,value:n},t)})))),u.length>1&&s.a.createElement(s.a.Fragment,null,s.a.createElement(de,null,s.a.createElement(me,null,s.a.createElement("label",{className:"kclabel"},Object(h.a)(wt||(wt=r.e(["Välj årskurs"],["Välj årskurs"]))))),s.a.createElement(me,null,s.a.createElement("select",{value:d,onChange:function(e){return r.b(void 0,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return t=e.target.value,n=a.subjects.filter(function(e){return e.code===c}).map(function(e){return e.name})[0]||c,[4,m(a,n,c,t)];case 1:return r.sent(),[2]}})})}},u.map(function(e){return s.a.createElement("option",{key:e,value:e},Object(h.a)(Tt||(Tt=r.e(["Årskurs ",""],["Årskurs ",""])),e))})))),s.a.createElement("div",null,s.a.createElement(br,{repo:n,tab:t})),s.a.createElement("br",null),s.a.createElement(fr.a,{title:Object(h.a)(Ot||(Ot=r.e(["Avancerat..."],["Avancerat..."])))},s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,m(a,l,c,d)];case 1:return e.sent(),[2]}})})}},Object(h.a)(jt||(jt=r.e(["Gör om kopplingen till ämne och årskursspann"],["Gör om kopplingen till ämne och årskursspann"]))))))));function m(e,a,s,i){return r.b(this,void 0,void 0,function(){var o,c,l,u,d,m,p,f,b;return r.d(this,function(g){switch(g.label){case 0:return o=Object(he.a)(t.tags,[s],[i]),n.courseTabs.update(t,{subject:{subjectCode:s,subjectName:a},tags:o}),[4,n.courseContents.hasEdgesFrom([t.id]).include("tasks").includeIdsAndNamesOnly().toValue().load()];case 1:c=g.sent(),l=Object(h.k)(c.map(function(e){return e.tasks}));try{for(u=r.h(l),d=u.next();!d.done;d=u.next())m=d.value,p=Object(he.a)([e.id],[s],[i]),n.tasks.update(m,{tags:p,subject:a})}catch(e){f={error:e}}finally{try{d&&!d.done&&(b=u.return)&&b.call(u)}finally{if(f)throw f.error}}return[2]}})})}},vr=Object(m.b)(function(e){var t=e.course,n=e.branch,s=e.block,i=e.tab,o=e.editMode,c=e.lazyContents,l=e.school,u=e.draftId;return c.map(function(e){return i?(e=e.slice().sort(Object(h.g)("order")),a.createElement("div",null,o?a.createElement(a.Fragment,null,E()||!i.locked?a.createElement(ge,{course:t,tab:i,repo:n}):null,E()?a.createElement(gr,{course:t,tab:i,repo:n,block:s}):null):null,e.map(function(r,c){return a.createElement(ur,{key:r.id,content:r,branch:n,contentOrderIndex:c,contents:e,course:t,draftId:u,editMode:o,school:l,block:s,tab:i})}),!!o&&(E()||!i.locked)&&a.createElement(a.Fragment,null,"word-bank-tab"===i.tabClass&&a.createElement(ue,{type:"word-bank",tab:i,branch:n,course:t}),"word-bank-tab"!==i.tabClass&&("mission-tab"===i.tabClass||"subject-tab"===i.tabClass||"step-course"===t.type)&&!e.some(function(e){return"learning-goals"===e.type})&&a.createElement(ue,{type:"learning-goals",tab:i,branch:n,course:t}),a.createElement(ue,{type:"rich-text",tab:i,branch:n,course:t}),0==e.filter(function(e){return"resource-list"==e.type}).length&&a.createElement(ue,{type:"resource-list",tab:i,branch:n,course:t}),"intro-tab"===i.tabClass||"run-up-tab"===i.tabClass&&a.createElement(ue,{type:"embedded-html",tab:i,branch:n,course:t})))):o?a.createElement("p",null,Object(h.a)(Nt||(Nt=r.e(["Denna kurs saknar innehåll. Skapa ny flik genom knappen ovan"],["Denna kurs saknar innehåll. Skapa ny flik genom knappen ovan"])))):E()?a.createElement("p",null,Object(h.a)(It||(It=r.e(["Denna kurs saknar innehåll. Välj Redigera knappen för att lägga till flikar."],["Denna kurs saknar innehåll. Välj Redigera knappen för att lägga till flikar."])))):a.createElement("p",null,Object(h.a)(Ct||(Ct=r.e(["Denna kurs saknar innehåll."],["Denna kurs saknar innehåll."]))))})}),kr=n(113),yr=Object(k.a)(function(e){var t=e.school,n=e.course,a=e.tab,i=e.activeTab,o=e.draftId,c=e.history,l=e.courseType,u=e.blockId;return s.a.createElement(s.a.Fragment,null,a&&(E()||!a.locked||n.allowRemoveTabs)?s.a.createElement("div",{className:"btn btn-warning pull-right",onClick:function(){return r.b(void 0,void 0,void 0,function(){var e,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,(e=p.c.branch(o)).courseTabs.include("contents").includeIdsOnly().id(i).load()];case 1:return a=r.sent(),[4,e.courseContents.include("tasks").includeIdsOnly().ids(a.contents.map(function(e){return e.id})).toValue().load()];case 2:return s=r.sent(),E()&&"standard"===t&&(s.forEach(function(t){t.tasks.forEach(function(n){e.courseContents.removeRelated(t.id,"tasks",n)})}),a.contents.forEach(function(t){e.courseTabs.removeRelated(a.id,"contents",t)})),"theme-course"===l?e.courseInstances.removeRelated(n.id,"tabs",a):u&&e.courseBlocks.removeRelated(u,"tabs",a),[4,p.c.saveNow()];case 3:return r.sent(),c.push("/"+t+"/courses/"+n.id+"/tabs/$/drafts/"+o+"/edit"),[2]}})})}},s.a.createElement("i",{className:"fa fa-trash","aria-hidden":!0})," ",Object(h.a)(St||(St=r.e(["Ta bort fliken"],["Ta bort fliken"])))):null,s.a.createElement("div",null,s.a.createElement(de,null,s.a.createElement(me,null,s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){return c.push("/"+t+"/courses/"+n.id+"/tabs/"+(i||"$")+"/drafts/"+o),[2]})})}},s.a.createElement("i",{className:"fa fa-eye","aria-hidden":!0})," ",Object(h.a)(Dt||(Dt=r.e(["Förhandsgranska"],["Förhandsgranska"]))))),s.a.createElement(me,null," ",s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){return c.push("/"+t+"/courses/"+n.id+"/history"),[2]})})}},s.a.createElement("i",{className:"fa fa-history","aria-hidden":!0})," ",Object(h.a)(xt||(xt=r.e(["Versionshistorik"],["Versionshistorik"]))))),s.a.createElement(me,null," ",s.a.createElement("button",{className:"btn btn-warning",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,Object(kr.a)({school:t,course:n,draftRepo:p.c.branch(o)})];case 1:return e.sent(),[4,p.c.saveNow()];case 2:return e.sent(),c.push("/"+t+"/courses/"+n.id+"/tabs/"+(i||"$")),[2]}})})}},s.a.createElement("i",{className:"fa fa-play","aria-hidden":!0})," ",Object(h.a)(Rt||(Rt=r.e(["Publicera"],["Publicera"]))))))),s.a.createElement("br",null),s.a.createElement("button",{className:"btn",onClick:function(){return c.push("/"+t+"/courses/"+n.id+"/tabs/"+(i||"$"))}},s.a.createElement("i",{className:"fa fa-arrow-left","aria-hidden":!0})," ",Object(h.a)(Lt||(Lt=r.e(["Avsluta redigering"],["Avsluta redigering"])))))}),Er=n(71),wr=n(62),Tr=n(297),Or=Symbol("TypeText"),jr=Symbol("TypeCheckbox"),Nr=Symbol("TypeObsure"),Ir=Symbol("TypeHiddenChange"),Cr=Symbol("TypeHtml"),Sr={Text:Or,Html:Cr,Checkbox:jr,Obscure:Nr,HiddenChange:Ir},Dr={entityTypes:{courseBlocks:Object(h.a)(Mt||(Mt=r.e(["kursblock"],["kursblock"]))),courseContents:Object(h.a)(_t||(_t=r.e(["innehållsruta"],["innehållsruta"]))),courseInstances:Object(h.a)(At||(At=r.e(["kurs"],["kurs"]))),courseTabs:Object(h.a)(Ut||(Ut=r.e(["flik"],["flik"]))),schools:Object(h.a)(Pt||(Pt=r.e(["skola"],["skola"]))),tasks:Object(h.a)(Bt||(Bt=r.e(["uppgift"],["uppgift"])))},modifiedLinks:{tabs:[Object(h.a)(Ft||(Ft=r.e(["Tillagd flik"],["Tillagd flik"]))),Object(h.a)(qt||(qt=r.e(["Borttagen flik"],["Borttagen flik"])))],blocks:[Object(h.a)(Ht||(Ht=r.e(["Tillagt block"],["Tillagt block"]))),Object(h.a)(Gt||(Gt=r.e(["Borttaget block"],["Borttaget block"])))],abilities:[Object(h.a)(zt||(zt=r.e(["Tillagd förmåga"],["Tillagd förmåga"]))),Object(h.a)(Kt||(Kt=r.e(["Borttagen förmåga"],["Borttagen förmåga"])))],centralContent:[Object(h.a)(Wt||(Wt=r.e(["Tillagt centralt innehåll"],["Tillagt centralt innehåll"]))),Object(h.a)(Yt||(Yt=r.e(["Borttaget centralt innehåll"],["Borttaget centralt innehåll"])))],knowledgeRequirements:[Object(h.a)(Vt||(Vt=r.e(["Tillagt kunskapskrav"],["Tillagt kunskapskrav"]))),Object(h.a)($t||($t=r.e(["Borttaget kunskapskrav"],["Borttaget kunskapskrav"])))],tasks:[Object(h.a)(Zt||(Zt=r.e(["Tillagd uppgift"],["Tillagd uppgift"]))),Object(h.a)(Qt||(Qt=r.e(["Borttagen uppgift"],["Borttagen uppgift"])))],contents:[Object(h.a)(Jt||(Jt=r.e(["Tillagd innehållsruta"],["Tillagd innehållsruta"]))),Object(h.a)(Xt||(Xt=r.e(["Borttagen innehållsruta"],["Borttagen innehållsruta"])))]},propertyNames:{allowAddTabs:[jr,Object(h.a)(en||(en=r.e(["Ändrat om tillägg av flik ska vara tillåtet"],["Ändrat om tillägg av flik ska vara tillåtet"])))],allowRemoveTabs:[jr,Object(h.a)(tn||(tn=r.e(["Ändrat om borttagning av flik ska vara tillåtet"],["Ändrat om borttagning av flik ska vara tillåtet"])))],allowReorderTabs:[jr,Object(h.a)(nn||(nn=r.e(["Ändrat om det ska va tillåtet att ändra ordning på flik"],["Ändrat om det ska va tillåtet att ändra ordning på flik"])))],assignment:[jr,Object(h.a)(rn||(rn=r.e(["Ändrad flagga för inlämningsuppgift"],["Ändrad flagga för inlämningsuppgift"])))],commonLearningGoals:[Or,Object(h.a)(an||(an=r.e(["Ändrade gemensamma lärandemål"],["Ändrade gemensamma lärandemål"])))],content:[Cr,Object(h.a)(sn||(sn=r.e(["Ändrad innehållstext"],["Ändrad innehållstext"])))],createdBy:[Ir,Object(h.a)(on||(on=r.e(["Skapad av"],["Skapad av"])))],createdDate:[Ir,Object(h.a)(cn||(cn=r.e(["Skapad datum"],["Skapad datum"])))],dateTime:[Nr,Object(h.a)(ln||(ln=r.e(["Ändat datum / tid"],["Ändat datum / tid"])))],deadline:[Or,Object(h.a)(un||(un=r.e(["Ändrat inlämningsdatum"],["Ändrat inlämningsdatum"])))],description:[Cr,Object(h.a)(dn||(dn=r.e(["Ändrad beskrivning"],["Ändrad beskrivning"])))],embeddedHtml:[Nr,Object(h.a)(mn||(mn=r.e(["Lagt till inbäddad HTML"],["Lagt till inbäddad HTML"])))],explainedRequirements:[Nr,Object(h.a)(pn||(pn=r.e(["Lagt till egna förklaringar av kunskapskrav"],["Lagt till egna förklaringar av kunskapskrav"])))],futureAbilities:[Or,Object(h.a)(fn||(fn=r.e(["Ändrade framtidsförmågor"],["Ändrade framtidsförmågor"])))],hasCommonLearningGoals:[jr,Object(h.a)(hn||(hn=r.e(["Ändrad inställning för gemensamma lärandemål"],["Ändrad inställning för gemensamma lärandemål"])))],hidden:[jr,Object(h.a)(bn||(bn=r.e(['Ändrad flagga "gömd"'],['Ändrad flagga "gömd"'])))],hiddenTasks:[Nr,Object(h.a)(gn||(gn=r.e(["Ändrat listan på gömda uppgifter"],["Ändrat listan på gömda uppgifter"])))],html:[Nr,Object(h.a)(vn||(vn=r.e(["Ändrat innehåll"],["Ändrat innehåll"])))],learningGoal:[Or,Object(h.a)(kn||(kn=r.e(["Lärandemål"],["Lärandemål"])))],lockDelete:[jr,Object(h.a)(yn||(yn=r.e(['Ändrat flagga: "lås från borttagning"'],['Ändrat flagga: "lås från borttagning"'])))],locked:[jr,Object(h.a)(En||(En=r.e(['Ändrad flagga: "förbjud ändring av flikar"'],['Ändrad flagga: "förbjud ändring av flikar"'])))],migratedTexts:[Nr,Object(h.a)(wn||(wn=r.e(["Ändringar i migrerade texter från skolverket"],["Ändringar i migrerade texter från skolverket"])))],modifiedBy:[Ir,Object(h.a)(Tn||(Tn=r.e(["Ändrad av"],["Ändrad av"])))],modifiedDate:[Ir,Object(h.a)(On||(On=r.e(["Ändringsdatum"],["Ändringsdatum"])))],taskOrder:[Nr,Object(h.a)(jn||(jn=r.e(["Ändrad ordning på uppgifter"],["Ändrad ordning på uppgifter"])))],name:[Or,Object(h.a)(Nn||(Nn=r.e(["Ändrat namn"],["Ändrat namn"])))],order:[Nr,Object(h.a)(In||(In=r.e(["Ändrad ordning"],["Ändrad ordning"])))],resources:[Nr,Object(h.a)(Cn||(Cn=r.e(["Ändrade i resurser"],["Ändrade i resurser"])))],school:[Or,Object(h.a)(Sn||(Sn=r.e(["Skola"],["Skola"])))],stepNo:[Or,Object(h.a)(Dn||(Dn=r.e(["Stegnummer"],["Stegnummer"])))],stepNumbers:[Or,Object(h.a)(xn||(xn=r.e(["Stegnummer"],["Stegnummer"])))],subject:[Or,Object(h.a)(Rn||(Rn=r.e(["Ämne"],["Ämne"])))],subjects:[Nr,Object(h.a)(Ln||(Ln=r.e(["Ämnen"],["Ämnen"])))],tabClass:[Or,Object(h.a)(Mn||(Mn=r.e(["Typ av flik"],["Typ av flik"])))],tabTitle:[Ir,Object(h.a)(_n||(_n=r.e(["Fliknamn"],["Fliknamn"])))],taskType:[Or,Object(h.a)(An||(An=r.e(["Uppgiftstyp"],["Uppgiftstyp"])))],url:[Or,Object(h.a)(Un||(Un=r.e(["Url"],["Url"])))],workingProcedure:[Cr,Object(h.a)(Pn||(Pn=r.e(["Arbetsprocess"],["Arbetsprocess"])))],youtubeId:[Nr,Object(h.a)(Bn||(Bn=r.e(["Youtube ID"],["Youtube ID"])))]},getModifiedLinkHeading:function(e){var t=Dr.modifiedLinks[e.label];return t?"add"===e.type?t[0]:"remove"===e.type?t[1]:Object(h.a)(Gn||(Gn=r.e(["Ångrad länkning"],["Ångrad länkning"]))):"add"===e.type?Object(h.a)(Fn||(Fn=r.e(["Tillagt objekt"],["Tillagt objekt"]))):"remove"===e.type?Object(h.a)(qn||(qn=r.e(["Borttaget objekt"],["Borttaget objekt"]))):Object(h.a)(Hn||(Hn=r.e(["Ångrad länkning"],["Ångrad länkning"])))},getPropVal:function(e,t,n){switch(e){case!0:return Object(h.a)(zn||(zn=r.e(["Påslaget"],["Påslaget"])));case!1:return Object(h.a)(Kn||(Kn=r.e(["Avslaget"],["Avslaget"])));case"primary":return Object(h.a)(Wn||(Wn=r.e(["Grundskola"],["Grundskola"])));case"gymnasium":return Object(h.a)(Yn||(Yn=r.e(["Gymnasieskola"],["Gymnasieskola"])));case"exercise":return Object(h.a)(Vn||(Vn=r.e(["Övningsuppgift"],["Övningsuppgift"])));case"task":return Object(h.a)($n||($n=r.e(["Uppgift"],["Uppgift"])));case"assignment":return Object(h.a)(Zn||(Zn=r.e(["Inlämningsuppgift"],["Inlämningsuppgift"])));case"theme-course":return Object(h.a)(Qn||(Qn=r.e(["Temakurs"],["Temakurs"])));case"step-course":return Object(h.a)(Jn||(Jn=r.e(["Stegkurs"],["Stegkurs"])));case"intro-tab":return Object(h.a)(Xn||(Xn=r.e(["Introduktionsflik"],["Introduktionsflik"])));case"run-up-tab":return Object(h.a)(er||(er=r.e(["Upptakt"],["Upptakt"])));case"subject-tab":return Object(h.a)(tr||(tr=r.e(["Ämnesflik"],["Ämnesflik"])));case"mission-tab":return Object(h.a)(nr||(nr=r.e(["Uppdragsflik"],["Uppdragsflik"])));case"content-tab":return Object(h.a)(rr||(rr=r.e(["Innehållsflik"],["Innehållsflik"])));case"teacher-tab":return Object(h.a)(ar||(ar=r.e(["Lärarsida"],["Lärarsida"])));case"word-bank-tab":return Object(h.a)(sr||(sr=r.e(["Ordbank"],["Ordbank"])));default:return null==e?Object(h.a)(ir||(ir=r.e(["Nollställt"],["Nollställt"]))):""===e?Object(h.a)(or||(or=r.e(["(tomt)"],["(tomt)"]))):t===Cr?Object(h.l)(xr(e),300):"string"==typeof e?e:e.subjectName?e.subjectName:JSON.stringify(e,null,2)}}};function xr(e){var t=document.createElement("div");return t.innerHTML=e,t.innerText}var Rr,Lr,Mr,_r,Ar,Ur,Pr,Br,Fr,qr=n(16);function Hr(e){var t=e.delta,n=e.editable,a=e.onDelete,i=t.targetName&&Object(h.l)(t.targetName,80),o=["schoolCourse"];t.$meta&&o.push("entitymeta-"+t.$meta);var c=Object(h.d)(Dr.entityTypes[t.table]||t.table),l=Object.keys(t.data).map(function(e){return{propSpec:Dr.propertyNames[e],prop:e}}),u=l.some(function(e){return!e.propSpec});return s.a.createElement("div",{className:o.join(" ")},s.a.createElement("div",{className:"align-horizontal"},n?s.a.createElement("div",{className:"horizontalItem top pull-right"},s.a.createElement("a",{className:"removeItem",onClick:a})):null,s.a.createElement("div",{className:"horizontalItem top"},i?s.a.createElement("a",null,c,' "',i,'"'):s.a.createElement("a",null,c))),l.filter(function(e){return e.propSpec}).map(function(e){var n=r.f(e.propSpec,2),a=n[0],i=n[1],o=e.prop;return s.a.createElement("div",{key:o},a===Sr.Obscure?s.a.createElement("p",null,i):a===Sr.HiddenChange?null:s.a.createElement("p",null,i,": ",Dr.getPropVal(t.data[o],a,o)))}),u?s.a.createElement("div",null,s.a.createElement("p",{title:JSON.stringify(t.data,null,4)},Object(h.a)(Rr||(Rr=r.e(["Ändringar i interna egenskaper"],["Ändringar i interna egenskaper"]))))):null,s.a.createElement("div",null,s.a.createElement("p",{className:"small"},Object(qr.h)(t.dateTime)," ",t.contributors.join(", "))))}function Gr(e){var t=e.delta,n=e.editable,r=e.onDelete,a=t.targetName&&Object(h.l)(xr(t.targetName),80),i=["schoolCourse"];t.$meta&&i.push("entitymeta-"+t.$meta);var o=Dr.getModifiedLinkHeading(t);return s.a.createElement("div",{className:i.join(" ")},s.a.createElement("div",{className:"align-horizontal"},n?s.a.createElement("div",{className:"horizontalItem top pull-right"},s.a.createElement("a",{className:"removeItem",onClick:r})):null,s.a.createElement("div",{className:"horizontalItem top"},a?s.a.createElement("a",null,o,' "',a,'"'):s.a.createElement("a",null,o))),s.a.createElement("div",null,s.a.createElement("p",{className:"small"},Object(qr.h)(t.dateTime)," ",t.contributor)))}function zr(e){var t=e.branchId,n=e.tag,a=e.editable,i=p.c.branch(t).deltas;return n&&(i=i.tags(n)),s.a.createElement(at.a,null,i.toValue().map(function(e){return 0===e.length?s.a.createElement("div",null,s.a.createElement("p",{style:{opacity:.5,fontStyle:"italic"}},n?Object(h.a)(Lr||(Lr=r.e(["Skolans version är identisk med orginalet"],["Skolans version är identisk med orginalet"]))):Object(h.a)(Mr||(Mr=r.e(["Det finns inga ändringar att publicera."],["Det finns inga ändringar att publicera."]))))):s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{className:"taskContainer odd-even"},e.map(function(e){var t=function(e){return"modify"===e.type?e.targetId:e.sourceId+e.label+e.targetId}(e);return"modify"===e.type?s.a.createElement(Hr,{delta:e,editable:a,key:t,onDelete:function(){c(e)}}):s.a.createElement(Gr,{delta:e,editable:a,key:t,onDelete:function(){o(e)}})})),s.a.createElement("button",{className:"btn btn-large btn-warning",onClick:function(){var t,a;if(confirm(n?Object(h.a)(_r||(_r=r.e(["Åtgärden återstället kursen till standard.\n\nVill du fortsätta?"],["Åtgärden återstället kursen till standard.\\n\\nVill du fortsätta?"]))):Object(h.a)(Ar||(Ar=r.e(["Åtgärden raderar samtliga ändringar som ännu inte är publicerade.\n\nVill du fortsätta?"],["Åtgärden raderar samtliga ändringar som ännu inte är publicerade.\\n\\nVill du fortsätta?"])))))try{for(var s=r.h(e),i=s.next();!i.done;i=s.next()){var l=i.value;"modify"===l.type?c(l):o(l)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(a=s.return)&&a.call(s)}finally{if(t)throw t.error}}}},n?Object(h.a)(Ur||(Ur=r.e(["Återställ till orginalet"],["Återställ till orginalet"]))):Object(h.a)(Pr||(Pr=r.e(["Radera alla opublicerade ändringar"],["Radera alla opublicerade ändringar"])))))}));function o(e){p.c.branch(t).table(e.sourceTable).undoLink(e.sourceId,e.label,e.targetId)}function c(e){var n={};Object.keys(e.data).forEach(function(e){n[e]={$unset:0}}),p.c.branch(t).table(e.table).update({id:e.targetId,name:e.targetName},n)}}function Kr(e){var t="school-branch"===e.branchType?s.a.createElement("h2",null,Object(h.a)(Br||(Br=r.e(["Skolans ändringar"],["Skolans ändringar"])))):s.a.createElement("h3",null,Object(h.a)(Fr||(Fr=r.e(["Opublicerade ändringar"],["Opublicerade ändringar"]))));return s.a.createElement("div",{className:"ked_boxed"},t,s.a.createElement(zr,{branchId:e.branchId,editable:!e.isAdmin,tag:"school-branch"===e.branchType?e.courseId:null}))}var Wr,Yr,Vr,$r,Zr,Qr,Jr,Xr,ea,ta,na,ra,aa,sa,ia,oa,ca,la,ua,da,ma,pa,fa,ha,ba,ga=Object(m.b)(function(e){return e.content.map(function(e){var t=e;return s.a.createElement("div",null,t&&t.resources.length>0&&s.a.createElement("div",{className:"ked_boxed kpMenu"},s.a.createElement("h2",null,"Resurser"),s.a.createElement("hr",null),s.a.createElement("div",{className:"taskContainer"},t.resources.map(function(e){return s.a.createElement("div",{className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("a",{href:e.url,target:"_blank"},e.name)))}))))})}),va=Object(Tr.a)(function(e){var t=e.school,n=e.courseId,s=e.draftId,i=e.course,o=e.branch,c=e.tabs,l=e.activeTab,u=e.editMode,d=e.history,m=e.block,k=c.filter(function(e){return e.id===l})[0]||c[0],E=k&&o.courseContents.hasEdgesFrom([k.id]).filter(function(e){return"resource-list"===e.type}).first();return a.createElement(Er.a,{right:u&&s?a.createElement("div",null,a.createElement(Kr,{isAdmin:"standard"===t,branchId:s,branchType:"draft-branch"})):a.createElement(a.Fragment,null,a.createElement(wr.a,{env:y.a,viewCourseUrl:b.b.KED_COURSE_VIEWER_URL}),E&&a.createElement(ga,{content:E})),rightWidth:5,left:a.createElement(a.Fragment,null,a.createElement(vr,{school:t,course:i,branch:o,tab:k,editMode:u,draftId:s,block:m,lazyContents:k?o.courseContents.include("tasks").hasEdgesFrom([k.id]).toValue():new f.a([])}),u?a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("hr",null),a.createElement(yr,{school:t,course:i,tab:k,activeTab:l,draftId:s,courseType:i.type,blockId:m&&m.id})):y.a.currentUser.roles.includes("ADMIN")||Object(g.e)(y.a.currentUser,t)?a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("hr",null),a.createElement(de,null,s&&a.createElement(me,null,a.createElement("button",{className:"btn btn-large btn-warning",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,Object(kr.a)({school:t,course:i,draftRepo:p.c.branch(s)})];case 1:return e.sent(),[4,p.c.saveNow()];case 2:return e.sent(),d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")),[2]}})})}},a.createElement("i",{className:"fa fa-lg fa-play","aria-hidden":!0})," ",Object(h.a)(Wr||(Wr=r.e(["Publicera"],["Publicera"]))))),a.createElement(at.a,null,p.a.getBranchId(p.c.schools.name(t).single(),n).map(function(e){return a.createElement(a.Fragment,null,a.createElement(me,null,a.createElement("button",{className:"btn btn-large",onClick:e?function(){return d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")+"/drafts/"+e+"/edit")}:function(){return r.b(void 0,void 0,void 0,function(){var e,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,4,,5]),[4,p.c.schools.name(t).single().load()];case 1:return e=r.sent(),[4,Object(v.g)(e.officialBranchId+n+"draft")];case 2:return a=r.sent(),s={id:a,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[n]},p.c.branches.addRelated(e.officialBranchId,"approvedChildren",s),[4,p.c.saveNow()];case 3:return r.sent(),d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")+"/drafts/"+a+"/edit"),[3,5];case 4:return i=r.sent(),Object(h.n)(i),[3,5];case 5:return[2]}})})}},e?a.createElement(a.Fragment,null,a.createElement("i",{className:"fa fa-lg fa-pencil"})," ",s?Object(h.a)(Yr||(Yr=r.e(["Fortsätt redigera"],["Fortsätt redigera"]))):Object(h.a)(Vr||(Vr=r.e(["Redigera"],["Redigera"])))):a.createElement(a.Fragment,null,a.createElement("i",{className:"fa fa-lg fa-plus"})," ",Object(h.a)($r||($r=r.e(["Skapa skolans version av kursen"],["Skapa skolans version av kursen"])))))),s||!e?void 0:a.createElement(me,null,a.createElement("button",{className:"btn btn-large",onClick:function(){return d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$")+"/drafts/"+e)}},a.createElement("i",{className:"fa fa-eye"})," ",Object(h.a)(Zr||(Zr=r.e(["Visa redigerad version"],["Visa redigerad version"]))))))})),s&&a.createElement(me,null,a.createElement("button",{className:"btn btn-large",onClick:function(){d.push("/"+t+"/courses/"+n+"/tabs/"+(k?k.id:"$"))}},a.createElement("i",{className:"fa fa-lg fa-arrow-left"})," ",Object(h.a)(Qr||(Qr=r.e(["Avsluta redigering"],["Avsluta redigering"]))))))):void 0)})}),ka=n(132),ya=n(97),Ea=n(6),wa=n.n(Ea),Ta=n(105),Oa=function(e){var t=e.task,n=e.writeAccess,a=e.repo,i=e.contentId,o=e.tab,c=o?o.tabClass:null;return s.a.createElement("div",null,s.a.createElement("div",{className:"align-horizontal spaced"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("p",null,"mission-tab"===c?Object(h.a)(Jr||(Jr=r.e(["Uppdragets namn:"],["Uppdragets namn:"]))):Object(h.a)(Xr||(Xr=r.e(["Uppgiftens namn:"],["Uppgiftens namn:"]))))),s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("input",{autoFocus:!0,type:"text",size:35,value:t.name,disabled:!n,readOnly:!n,onChange:function(e){a.tasks.update(t,{name:e.target.value.substr(0,cr.MAX_CHARS_TASK_NAMES)})}}))),t.migratedTexts&&n&&s.a.createElement(ka.a,{task:t,course:null,updateLink:function(e,t){throw new Error("Not implemented yet")}}),"mission-tab"!==c&&s.a.createElement("div",{className:"align-horizontal spaced"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("p",null,Object(h.a)(ea||(ea=r.e(["Lärandemål:"],["Lärandemål:"]))))),s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement(at.a,null,a.courseContents.id(i).map(function(e){if("learning-goals"!==e.type)return s.a.createElement("p",null,Object(h.a)(ta||(ta=r.e(["Ej valbart"],["Ej valbart"]))));var n=e.hasCommonLearningGoals,i=e.commonLearningGoals.map(function(e){return e.trim()}).filter(function(e){return e}).map(function(e){return{name:e,key:e}});return s.a.createElement(Ta.a,{available:i,selected:t.learningGoal.split("\n"),onChange:function(e,r){n?a.tasks.update(t,{learningGoal:e.join("\n")}):a.tasks.update(t,{learningGoal:r})}})})))),s.a.createElement(s.a.Fragment,null,s.a.createElement("h2",null,"mission-tab"===c?Object(h.a)(na||(na=r.e(["Uppdragstyp"],["Uppdragstyp"]))):Object(h.a)(ra||(ra=r.e(["Uppgiftstyp"],["Uppgiftstyp"])))),s.a.createElement(Ta.a,{available:["mission-tab"!==c&&{name:Object(h.a)(aa||(aa=r.e(["Övningsuppgift"],["Övningsuppgift"]))),key:"exercise"},{name:Object(h.a)(sa||(sa=r.e(["Uppgift"],["Uppgift"]))),key:"task"},{name:Object(h.a)(ia||(ia=r.e(["Inlämningsuppgift"],["Inlämningsuppgift"]))),key:"assignment"}].filter(function(e){return e}),selected:[t.taskType],onChange:function(e,n){return a.tasks.update(t,{taskType:n})}}),"assignment"===t.taskType&&s.a.createElement(s.a.Fragment,null,s.a.createElement("p",null,"Inlämningsdatum"),s.a.createElement("div",{className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement(ya.a,{nextMonthButtonLabel:"",showWeekNumbers:!0,previousMonthButtonLabel:"",selected:t.deadline&&wa()(t.deadline).toDate(),dateFormat:"yyyy-MM-dd",locale:"sv",popperPlacement:"bottom-start",onChange:function(e){a.tasks.update(t,{deadline:wa()(e).format("YYYY-MM-DD")})}})),s.a.createElement("div",{className:"horizontalItem top"},t.deadline&&s.a.createElement("a",{className:"deleteDate",href:"#",title:"Ta bort inlämningsdatum",onClick:function(e){e.preventDefault(),a.tasks.update(t,{deadline:null})}}))),s.a.createElement("div",{className:"taskContainer"},s.a.createElement("div",{className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top",onClick:function(){return a.tasks.update(t,{sendToUrkund:null!=t.sendToUrkund&&!t.sendToUrkund})}},s.a.createElement("div",{className:"checkBox"+(null==t.sendToUrkund||t.sendToUrkund?" checked":"")})),s.a.createElement("div",{className:"horizontalItem top"},"Verify assignments with Urkund"))))))},ja=Object(k.a)(function(e){var t=e.school,n=e.courseId,a=e.tabId,i=e.contentId,o=e.draftId,c=e.task,l=e.repo,u=e.history;return s.a.createElement(s.a.Fragment,null,s.a.createElement("div",null,s.a.createElement("div",{className:"btn btn-warning pull-right",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return l.courseContents.removeRelated(i,"tasks",c),[4,p.c.saveNow()];case 1:return e.sent(),u.push("/"+t+"/courses/"+n+"/tabs/"+a+"/drafts/"+o+"/edit"),[2]}})})}},s.a.createElement("i",{className:"fa fa-trash","aria-hidden":!0})," ",Object(h.a)(oa||(oa=r.e(["Ta bort uppgiften"],["Ta bort uppgiften"])))),s.a.createElement(de,null,s.a.createElement(me,null,s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,l.saveNow()];case 1:return e.sent(),u.push("/"+t+"/courses/"+n+"/tabs/"+(a||"$")+"/contents/"+i+"/tasks/"+c.id+"/drafts/"+o),[2]}})})}},s.a.createElement("i",{className:"fa fa-eye","aria-hidden":!0})," ",Object(h.a)(ca||(ca=r.e(["Förhandsgranska"],["Förhandsgranska"]))))),s.a.createElement(me,null,s.a.createElement("button",{className:"btn",onClick:function(){return r.b(void 0,void 0,void 0,function(){return r.d(this,function(e){return u.push("/"+t+"/courses/"+n+"/tabs/"+(a||"$")+"/drafts/"+o+"/edit"),[2]})})}},s.a.createElement("i",{className:"fa fa-arrow-left","aria-hidden":!0})," ",Object(h.a)(la||(la=r.e(["Återgå till fliken"],["Återgå till fliken"]))))))),s.a.createElement("br",null))}),Na=function(e){var t=e.repo,n=e.task,a=e.writeAccess;return s.a.createElement(s.a.Fragment,null,s.a.createElement("h4",null,Object(h.a)(ua||(ua=r.e(["Introtext"],["Introtext"])))),s.a.createElement("p",{className:"subHeader"},"(Skriv en introduktion till uppgiften)"),s.a.createElement(ke.a,{actions:["bold","italic","underline","link","image"],defaultActions:ye.a,readOnly:!a,html:n.content||"",onChange:function(e){return t.tasks.update(n,{content:e})}}))},Ia={exercise:Object(h.a)(da||(da=r.e(["Övningsuppgift"],["Övningsuppgift"]))),task:Object(h.a)(ma||(ma=r.e(["Uppgift"],["Uppgift"]))),assignment:Object(h.a)(pa||(pa=r.e(["Inlämningsuppgift"],["Inlämningsuppgift"])))};function Ca(e){var t=e.writeAccess,n=e.task,s=e.repo,i=r.f(Object(a.useState)(0),2),o=i[0],c=i[1];return a.createElement(a.Fragment,null,a.createElement("h4",null,Ia[n.taskType]||Object(h.a)(fa||(fa=r.e(["Uppgift"],["Uppgift"])))),a.createElement("p",{className:"subHeader"},Object(h.a)(ha||(ha=r.e(["(Skriv in en kort förklaring, max "," tecken, vad uppgiften går ut på.)"],["(Skriv in en kort förklaring, max "," tecken, vad uppgiften går ut på.)"])),cr.MAX_CHARS_TASK_INTRO_TEXT)),a.createElement(ke.a,{actions:["bold"],defaultActions:ye.a,readOnly:!t,html:n.description||"",maxChars:cr.MAX_CHARS_TASK_INTRO_TEXT,reportNumChars:function(e){return c(e)},onChange:function(e){s.tasks.update(n,{description:e})}}),a.createElement("div",{style:{textAlign:"right",opacity:.7,fontSize:"8pt"}},Object(h.a)(ba||(ba=r.e([""," av ",""],[""," av ",""])),o,cr.MAX_CHARS_TASK_INTRO_TEXT)))}var Sa,Da,xa=function(e){var t=e.subject,n=e.step,r=e.onSelect;return s.a.createElement("div",{style:{minHeight:400}},s.a.createElement(a.Suspense,{fallback:s.a.createElement($e.a,null)},s.a.createElement(Ve,{subjectName:t,stepNo:n,onChange:function(e){var a=e.name,s=e.key,i=b.a.KED_WORDBANKS_URL+"?subject="+t+"&step="+n+"&list="+s;r({name:a,url:i})}})))};function Ra(e){var t=e.writeAccess,n=e.task,s=e.repo,i=e.step,o=Object(a.useContext)(Xe),c=["bold","italic","underline","olist","outdent","indent","link","image"];return t&&E()&&null!=i&&c.push({name:"listWordBank",icon:'<i class="fa fa-book" aria-hidden="true"></i>',title:Object(h.a)(Sa||(Sa=r.e(["Länka till ordbank"],["Länka till ordbank"]))),result:function(e,t){var r=function(){if(window.getSelection){var e=window.getSelection();if(e.getRangeAt&&e.rangeCount)return e.getRangeAt(0)}else if(document.selection&&document.selection.createRange)return document.selection.createRange();return null}();o.openDialog(a.createElement(xa,{subject:n.subject,step:i,onSelect:function(e){var t=e.name,n=e.url;o.closeDialog(),function(e){if(e)if(window.getSelection){var t=window.getSelection();t.removeAllRanges(),t.addRange(e)}else document.selection&&e.select&&e.select()}(r);var a=document.createElement("a");a.href=n,a.appendChild(document.createTextNode(t)),document.execCommand("insertHTML",!1,a.outerHTML)}}))}},{icon:'<i class="fa fa-link" style="color:var(--col-accent)" aria-hidden="true"></i>',title:"Resurs länk",result:function(){var e=window.prompt("Ange länkens URL för resursen");if(e){var t=new URL("",e);if(t.host!==window.location.host)return void Object(h.n)("Ogiltig resursadress");var n=new RegExp("([^.|/]+).([^.]+)(?=.html)").exec(t.pathname);if(!b.a.KED_RESOURCES_URL)return void Object(h.n)("Resurser URL är inte konfigurerad");var r=b.a.KED_RESOURCES_URL.replace("{value}",n[0]);r&&document.execCommand("createLink",!1,r)}}}),a.createElement(a.Fragment,null,a.createElement("h4",null,Object(h.a)(Da||(Da=r.e(["Arbetsprocess"],["Arbetsprocess"])))),a.createElement(ke.a,{actions:c,defaultActions:ye.a,readOnly:!t,html:n.workingProcedure||"",onChange:function(e){s.tasks.update(n,{workingProcedure:e})}}))}var La,Ma,_a,Aa,Ua,Pa,Ba,Fa,qa=function(e){var t=e.task,n=e.repo;return E()?t.embeddedHtml?s.a.createElement("div",null,s.a.createElement("h4",null,Object(h.a)(La||(La=r.e(["Inbäddat material"],["Inbäddat material"])))),s.a.createElement("p",null,Object(h.a)(Ma||(Ma=r.e(["Klipp in HTML kod nedan"],["Klipp in HTML kod nedan"])))),s.a.createElement("textarea",{style:{width:"100%",height:"100px"},value:t.embeddedHtml,onChange:function(e){return n.tasks.update(t,{embeddedHtml:e.target.value})}})):s.a.createElement("div",null,s.a.createElement("button",{className:"btn",onClick:function(){return n.tasks.update(t,{embeddedHtml:" "})}},s.a.createElement("i",{className:"fa fa-code","aria-hidden":!0})," ",Object(h.a)(_a||(_a=r.e(["Lägg till inbäddat material"],["Lägg till inbäddat material"])))),s.a.createElement("br",null),s.a.createElement("br",null)):s.a.createElement("div",null)},Ha=function(e){var t=e.repo,n=e.course,r=e.draftId,a=e.tabId,i=e.tab,o=e.contentId,c=e.writeAccess,l=e.task,u=e.school;return s.a.createElement(s.a.Fragment,null,s.a.createElement(Oa,{repo:t,task:l,writeAccess:c,contentId:o,tab:i}),s.a.createElement(Na,{repo:t,task:l,writeAccess:c}),s.a.createElement(Ca,{writeAccess:c,task:l,repo:t}),s.a.createElement(Ra,{writeAccess:c,task:l,repo:t,step:i&&"step-course-tab"===i.type&&i.stepNo}),s.a.createElement(qa,{writeAccess:c,task:l,repo:t}),s.a.createElement(ja,{repo:t,task:l,courseId:n.id,draftId:r,tabId:a,contentId:o,school:u}))},Ga=n(48),za=n(133),Ka=n(25),Wa=function(e){var t=e.repo,n=e.task,a=e.tabIds,i=e.uncoveredIds,o=e.blockId,c=e.allCoveredSentences;return s.a.createElement(at.a,null,o?t.courseBlocks.include("abilities","centralContent","knowledgeRequirements").id(o).map(function(e){return s.a.createElement("div",null,s.a.createElement(Ya,r.a({},{repo:t,task:n,uncoveredIds:i,tabOrBlock:e,allCoveredSentences:c})))}):t.courseTabs.include("abilities","centralContent","knowledgeRequirements").ids(a).toValue().map(function(e){return s.a.createElement("div",null,1===e.length?s.a.createElement(Ya,r.a({},{repo:t,task:n,uncoveredIds:i,tabOrBlock:e[0],allCoveredSentences:c})):e.map(function(e){return s.a.createElement(fr.a,{key:e.id,title:s.a.createElement("h4",null,e.name||e.tabTitle,e.subject&&e.subject.subjectName&&e.subject.subjectName!==(e.name||e.tabTitle)?" ("+e.subject.subjectName+")":"")},s.a.createElement(Ya,r.a({},{repo:t,task:n,uncoveredIds:i,tabOrBlock:e,hasMultipleSubjects:!0,allCoveredSentences:c})))}))}))},Ya=function(e){var t=e.tabOrBlock,n=e.repo,i=e.task,o=e.uncoveredIds,c=e.hasMultipleSubjects,l=e.allCoveredSentences,u=r.f(Object(a.useState)(!1),2),d=u[0],m=u[1],p=Ka.b.markPartialKRs;return s.a.createElement(at.a,null,Object(Ga.b)(t).map(function(e){var t="type"in e&&e.subject&&e.subject.subjectName;return s.a.createElement(s.a.Fragment,null,"exercise"!==i.taskType&&s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("h3",null,Object(h.a)(Aa||(Aa=r.e(["Välj kunskapskrav"],["Välj kunskapskrav"])))),s.a.createElement("div",{className:"matrix-knowledge-title"},s.a.createElement("p",null,Object(h.a)(Ua||(Ua=r.e(["Markera de kunskapskrav som din uppgift täcker."],["Markera de kunskapskrav som din uppgift täcker."])))),p&&s.a.createElement("p",null,s.a.createElement("i",{className:"fab fa-creative-commons-nd "+(d?"activePartialView":""),onClick:function(){return m(!d)}}))),s.a.createElement(dr.a,{knowledgeRequirements:e.knowledgeRequirements,markedIds:i.knowledgeRequirements.map(function(e){return e.id}),explainedRequirements:i.explainedRequirements||{},idsToMarkNotOk:o,markMode:!0,markBySentenceView:d,migratedIds:i&&i.migratedTexts&&i.migratedTexts.knowledgeRequirements,partialRequirments:i.partialRequirments||{},coveredPartialRequirments:l,markPartialFeatureEnabled:p,onExplainedRequirementsChanged:function(e,t){var a;return n.tasks.update(i,{explainedRequirements:r.a({},i.explainedRequirements,(a={},a[e]=t,a))})},onUpdatePartialKnowledge:function(t,a){var s;n.tasks.update(i,{partialRequirments:r.a({},i.partialRequirments,(s={},s[t]=r.g(a),s))});var o=e.knowledgeRequirements.filter(function(e){return e.id===t})[0];0===a.length?n.tasks.removeRelated(i.id,"knowledgeRequirements",o):i.partialRequirments&&i.partialRequirments[t]&&0!==i.partialRequirments[t].length||n.tasks.addRelated(i.id,"knowledgeRequirements",o)},onMarkChanged:function(a,s){var o,l,u=e.knowledgeRequirements.filter(function(e){return e.id===a})[0];s?(c?n.tasks.update(i,{idsToSubjectMap:r.a({},i.idsToSubjectMap,(o={},o[a]=t,o))}):n.tasks.update(i,{idsToSubjectMap:void 0}),n.tasks.addRelated(i.id,"knowledgeRequirements",u)):(c?n.tasks.update(i,{idsToSubjectMap:r.a({},i.idsToSubjectMap,(l={},l[a]=void 0,l))}):n.tasks.update(i,{idsToSubjectMap:void 0}),n.tasks.removeRelated(i.id,"knowledgeRequirements",u))}})),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement(hr.a,{title:Object(h.a)(Pa||(Pa=r.e(["Välj förmågor"],["Välj förmågor"]))),options:e.abilities,markedIds:i.abilities.map(function(e){return e.id}),markMode:!0,migratedIds:i&&i.migratedTexts&&i.migratedTexts.abilities,onMarkChanged:function(t,r){var a=e.abilities.filter(function(e){return e.id===t})[0];r?n.tasks.addRelated(i.id,"abilities",a):n.tasks.removeRelated(i.id,"abilities",a)}})),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement(hr.a,{title:Object(h.a)(Ba||(Ba=r.e(["Välj centralt innehåll"],["Välj centralt innehåll"]))),options:e.centralContent,markedIds:i.centralContent.map(function(e){return e.id}),markMode:!0,migratedIds:i&&i.migratedTexts&&i.migratedTexts.centralContent,onMarkChanged:function(t,r){var a=e.centralContent.filter(function(e){return e.id===t})[0];r?n.tasks.addRelated(i.id,"centralContent",a):n.tasks.removeRelated(i.id,"centralContent",a)}})),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement(fr.a,{className:"larger",title:s.a.createElement("p",null,Object(h.a)(Fa||(Fa=r.e(["Välj framtidsförmågor"],["Välj framtidsförmågor"]))))},s.a.createElement("br",null),s.a.createElement(Ta.a,{available:za.a.map(function(e){return{name:e,key:e}}),selected:i.futureAbilities,onChange:function(e){return n.tasks.update(i,{futureAbilities:e})}}))))}))},Va=n(72),$a=n(57),Za=Object(m.b)(function(e){var t=e.school,n=e.course,a=e.activeTab,i=e.draftId,o=e.branch,c=e.contentId,l=e.taskId,u=e.blockId,d=n.tabs.find(function(e){return e.id===a}),m=d&&"mission-tab"===d.tabClass?n.tabs.filter(function(e){return"subject-tab"===e.tabClass}).map(function(e){return e.id}):[a];return o.tasks.include("abilities","centralContent","knowledgeRequirements").includeIdsOnly().hasEdgesFrom([c]).toValue().combineLatest(o.courseTabs.include("abilities","centralContent","knowledgeRequirements").includeIdsOnly().ids(m)).switchMap(function(e){var d=r.f(e,2),p=d[0],f=d[1],b=p.filter(function(e){return e.id===l})[0],g=Object($a.a)(f,p),v=p&&Object(h.k)(p.filter(function(e){return null!=e.partialRequirments}).map(function(e){return e.partialRequirments}));return Object(Ga.b)(b).map(function(e){return s.a.createElement(Er.a,{left:s.a.createElement(Wa,{repo:o,task:e,uncoveredIds:g,tabIds:m,blockId:u,allCoveredSentences:v}),right:s.a.createElement(Ha,{repo:o,school:t,course:n,draftId:i,tabId:a,tab:f.find(function(e){return e.id===a}),contentId:c,writeAccess:Object(Va.a)(t),task:e}),rightWidth:6})})})}),Qa=n(12);function Ja(e,t){return p.c.schools.name(e).single().switchMap(function(e){return p.c.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).first()})}var Xa,es,ts,ns,rs,as,ss,is,os,cs,ls=function(e){function t(t){var n=e.call(this,t)||this;return n.state={open:!1},n}return r.c(t,e),t.prototype.open=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.setState({open:!0}),this.state.schools?[3,2]:[4,p.c.schools.tags("primary").map(function(e){var t=e.id,n=e.name;return{id:t,name:n,displayName:e.displayName||n||"<namnlös>"}}).toValue().load()];case 1:e=t.sent(),this.setState({schools:e}),t.label=2;case 2:return[2]}})})},t.prototype.close=function(){this.setState({open:!1})},t.prototype.selectSchool=function(e){return r.b(this,void 0,void 0,function(){function t(){return r.b(this,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return(n=l)?[4,Ja(e,o).load()]:[3,2];case 1:n=r.sent(),r.label=2;case 2:return t=n,d&&u&&t&&(Object(g.d)(y.a.currentUser,e)||m)?[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")+"/contents/"+u+"/tasks/"+d+"/drafts/"+t+"/edit"]:d?[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")+"/tasks/"+d]:t&&(Object(g.d)(y.a.currentUser,e)||m)?[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")+"/drafts/"+t+"/edit"]:[2,"/"+e+"/courses/"+o+"/tabs/"+(c||"$")]}})})}var n,a,s,i,o,c,l,u,d,m,p,f;return r.d(this,function(r){switch(r.label){case 0:return n=this.props,a=n.match,s=n.history,i=a.params,o=i.courseId,c=i.tabId,l=i.draftId,u=i.contentId,d=i.taskId,m=y.a.currentUser.roles.includes("ADMIN")||location.search.includes("role="),e===this.props.school?[3,2]:[4,t()];case 1:p=r.sent(),m?(f=Object(g.f)(location.pathname,"standard"===e?{role:void 0,school:e}:{role:"EMPLOYEE",school:e}),location.href=f+"#"+p):s.push(p),r.label=2;case 2:return this.close(),[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.school,a=t.draftId,i=t.displayName,o=this.state,c=o.open,l=o.schools;return s.a.createElement("div",{tabIndex:1,style:{outline:0},onBlur:function(){return e.close()}},c?l?s.a.createElement(s.a.Fragment,null,s.a.createElement("h5",{onClick:function(){return e.close()}},Object(h.a)(ts||(ts=r.e(["Växla skola"],["Växla skola"])))),s.a.createElement("ul",null,s.a.createElement("li",{onClick:function(){return e.selectSchool("standard")}},Object(h.a)(ns||(ns=r.e(["Standard"],["Standard"])))),l.filter(function(e){return"standard"!==e.name}).sort(function(e,t){return e.displayName.localeCompare(t.displayName,["sv","en"])}).map(function(t){var n=t.id,r=t.name,a=t.displayName;return s.a.createElement("li",{key:n,onClick:function(){return e.selectSchool(r)}},a)}))):s.a.createElement(Qa.a,null):s.a.createElement(s.a.Fragment,null,s.a.createElement("h5",{onClick:function(){return e.open()}},"standard"!==n?i||n:Object(h.a)(Xa||(Xa=r.e(["Standard"],["Standard"])))),a&&s.a.createElement("p",{className:"pageSideText"},Object(h.a)(es||(es=r.e(["Arbetsversion"],["Arbetsversion"]))))))},t}(s.a.Component),us=Object(k.a)(ls),ds=n(137),ms=n(102),ps=n(103),fs=n(104),hs=function(e){var t=e.title,n=e.selectedFAs;return s.a.createElement(fr.a,{title:s.a.createElement("p",null,t),className:"larger"},s.a.createElement("div",{className:"abilityList"},n.map(function(e){return s.a.createElement("div",{key:e,className:"contentPart"},s.a.createElement("div",{className:"contentText"},s.a.createElement("p",null,e)))})))},bs=function(e){var t=e.school,n=e.task,a=e.courseId,i=e.abilities,o=e.centralContent,c=e.requirements,l=e.futureAbilities,u=n.deadline&&wa()(n.deadline).endOf("day")<wa()();return s.a.createElement("div",null,s.a.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},s.a.createElement("div",{className:"sv-text-portlet-content"},s.a.createElement("h1",{className:"h1"},n.name))),s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},n.content&&s.a.createElement(s.a.Fragment,null,s.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.content}}))),n.description&&s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement("div",{className:["ked_boxed","taskBox",n.taskType].join(" "),style:{clear:"both"}},s.a.createElement("h2",null,Ia[n.taskType]||Object(h.a)(rs||(rs=r.e(["Uppgift"],["Uppgift"])))),s.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.description}}))),n.workingProcedure&&s.a.createElement("div",null,s.a.createElement("h3",{className:"h3"},Object(h.a)(as||(as=r.e(["Arbetsprocess"],["Arbetsprocess"])))),s.a.createElement("div",{className:"rich-text-readonly",dangerouslySetInnerHTML:{__html:n.workingProcedure}})),n.embeddedHtml&&s.a.createElement("div",{dangerouslySetInnerHTML:{__html:n.embeddedHtml}}),s.a.createElement("br",null),"assignment"===n.taskType&&Ka.b.ksAssignments?s.a.createElement(s.a.Fragment,null,s.a.createElement("h2",null,"Inlämningsuppgift"),Object(Va.a)(t)?s.a.createElement("p",null,"Här kan du som lärare se elevernas inlämnade arbeten."):Object(Va.a)()?s.a.createElement("p",null,Object(h.a)(ss||(ss=r.e(["Detta är en inlämningsuppgift med inlämningsdatum ",""],["Detta är en inlämningsuppgift med inlämningsdatum ",""])),wa()(n.deadline).format("YYYY-MM-DD"))):s.a.createElement(s.a.Fragment,null,s.a.createElement("p",null,". Lämna in ditt arbete som en pdf, doc eller odt fil genom att dra det till fältet under."),n.deadline?s.a.createElement("p",null,s.a.createElement("b",null,"Den här uppgiften ",u?"skulle varit inlämnad ":"skall vara inlämnad ",wa()(n.deadline).format("YYYY-MM-DD"))):void 0),s.a.createElement(ds.a,{courseId:a,taskId:n.id,school:t,sendToUrkund:n.sendToUrkund}),s.a.createElement("br",null)):void 0,l.length>0?s.a.createElement(hs,{title:Object(h.a)(is||(is=r.e(["I den här uppgiften behandlas följande framtidsförmågor"],["I den här uppgiften behandlas följande framtidsförmågor"]))),selectedFAs:l}):null,c.length>0&&"exercise"!==n.taskType?s.a.createElement(fs.a,{title:"I den här uppgiften bedöms följande kunskapskrav",className:"larger",headerOpen:!1,requirements:c,idsToSubjectMap:n.idsToSubjectMap,explainedRequirements:n.explainedRequirements,partialRequirments:n.partialRequirments}):null,s.a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},i.length>0?s.a.createElement(ms.a,{title:"Den här uppgiften behandlar följande förmågor",className:"larger",headerOpen:!1,abilities:i}):null,o.length>0?s.a.createElement(ps.a,{title:"Den här uppgiften behandlar följande centrala innehåll",className:"larger",headerOpen:!1,centralContent:o}):null),s.a.createElement("hr",null),s.a.createElement("hr",null),n.resources&&n.resources.length>0&&s.a.createElement("div",{className:"sv-html-portlet sv-portlet"},s.a.createElement("h2",null,"Resurser kopplade till uppgiften"),s.a.createElement("div",{className:"taskContainer"},n.resources.map(function(e,t){return s.a.createElement("div",{key:t,className:"align-horizontal"},s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("a",{href:e.url},e.name)))})),s.a.createElement("br",null)),s.a.createElement("br",null))},gs=Object(m.b)(function(e){return e.lazyRepo.map(function(t){return s.a.createElement(vs,r.a({},r.a({},e,{repo:t})))})}),vs=Object(k.a)(Object(m.b)(function(e){var t=e.school,n=e.courseId,a=e.activeTab,i=e.repo,o=e.taskId,c=e.draftId,l=e.contentId,u=e.history;return i.tasks.include("abilities","centralContent","knowledgeRequirements").id(o).map(function(e){return s.a.createElement(Er.a,{left:s.a.createElement(at.a,null,Object(Ga.b)(e).map(function(e){return s.a.createElement(s.a.Fragment,null,s.a.createElement(bs,{school:t,task:e,courseId:n,abilities:e.abilities,centralContent:e.centralContent,requirements:e.knowledgeRequirements,futureAbilities:e.futureAbilities}),c&&l&&s.a.createElement(s.a.Fragment,null,s.a.createElement("hr",null),s.a.createElement("button",{className:"btn",onClick:function(){return u.push("/"+t+"/courses/"+n+"/tabs/"+a+"/contents/"+l+"/tasks/"+o+"/drafts/"+c+"/edit")}},s.a.createElement("i",{className:"fa fa-lg fa-pencil"})," ",Object(h.a)(os||(os=r.e(["Fortsätt redigera"],["Fortsätt redigera"]))))))})),right:s.a.createElement(wr.a,{env:y.a,viewCourseUrl:b.b.KED_COURSE_VIEWER_URL}),rightWidth:5})})})),ks=Object(k.a)(function(e){var t=e.school,n=e.courseId,s=e.activeTab,i=e.draftId,o=e.editMode,c=(e.history,e.contentId),l=e.taskId,d=o?p.c:p.c.optimizeCache(),m=d.schools.name(t).single(),v=i?new f.a(d.branch(i)):m.map(function(e){return d.branch(e.officialBranchId)}),k=v.switchMap(function(e){return e.courseInstances.include("blocks","tabs").id(n)}).combineLatest(m).switchMap(function(e){var t=r.f(e,2),n=t[0],a=t[1],o=i?d.branch(i):d.branch(a.officialBranchId);return"theme-course"===n.type?new f.a({course:n,tabs:n.tabs,branch:o,block:null,schoolEntity:a}):s&&"$"!==s?o.courseBlocks.hasEdgesTo([s]).include("tabs").toValue().map(function(e){var t=r.f(e,1)[0];return{course:n,tabs:t.tabs,branch:o,block:t||n.blocks[0],schoolEntity:a}}):n.blocks.length>0?o.courseBlocks.include("tabs").id(n.blocks[0].id).map(function(e){return{course:n,tabs:e.tabs,branch:o,block:e,schoolEntity:a}}):new f.a({course:n,tabs:[],branch:o,block:null,schoolEntity:a})}).map(function(e){return r.a({},e,{tabs:e.tabs&&e.tabs.sort(Object(h.h)(["stepNo","order"]))})}),y=k.map(function(e){var n=e.course,c=e.tabs,l=e.branch,u=e.block,d=e.schoolEntity;return function(e,t,n,s,i,o,c,l,u){var d=this,m=E(),p=o.id,f=e.filter(function(e){return e.id===l})[0]||e[0];"step-course"===o.type&&f&&"step-course-tab"===f.type&&(e=e.filter(function(e){return"step-course-tab"===e.type&&e.stepNo===f.stepNo}));var v=(Object(Va.a)()?e:e.filter(function(e){return"teacher-tab"!==e.tabClass})).map(function(e){return{key:e.id,name:e.tabTitle,draggable:!0,link:t?"/"+n+"/courses/"+p+"/tabs/"+e.id+(i?"/drafts/"+i:"")+"/edit":"/"+n+"/courses/"+p+"/tabs/"+e.id+(i?"/drafts/"+i:"")}}),k=[];if(t&&(m||o.allowAddTabs))if("theme-course"===o.type)k.push(a.createElement(oe,{type:"theme-course-tab",key:"$addTab",school:n,course:o,branch:c,draftId:i}));else{var y=f?f.stepNo:u.stepNumbers[0]||1;k.push(a.createElement(oe,{type:"step-course-tab",key:"$addTab",school:n,course:o,branch:c,draftId:i,block:u,stepNo:y}))}m&&k.push(a.createElement("a",{href:Object(g.f)(b.b.KED_SUBJECT_PLANNER_ADMIN_URL,{role:void 0})+"#/admin/courses/"+p+"/settings",key:"$settings",title:Object(h.a)(cs||(cs=r.e(["Inställningar"],["Inställningar"])))},a.createElement("i",{className:"fa fa-cog","aria-hidden":!0})," "));return{title:o.name,backgroundImage:null,tabs:v,cornerBox:a.createElement(us,{school:n,draftId:i,displayName:s.displayName||n}),buttons:k,activeTab:l||v[0]&&v[0].key,blocks:o.blocks&&o.blocks.sort(Object(h.g)("blockNo")).map(function(e){var t=e.id,r=e.name,a=e.stepNumbers;return{id:t,name:r,steps:a.map(function(e){return{isActive:f&&e===f.stepNo,stepNo:e,link:"/"+n+"/courses/"+p+"/blocks/"+t+"/steps/"+e}})}}),sortableTabs:t&&(m||o.allowReorderTabs),onTabDrop:function(t,n,a){return r.b(d,void 0,void 0,function(){var s,i;return r.d(this,function(r){return(s=st(e,t,n,a))&&(i=e.find(function(e){return e.id===t}))&&c.courseTabs.update(i,{order:s}),[2]})})}}}(c,o,t,d,i,n,l,s,u)});return a.createElement(a.Fragment,null,a.createElement(u.b,{lazyProps:y}),l?o?a.createElement(at.a,null,k.map(function(e){var n=e.branch,r=e.block,o=e.course;e.tabs;return a.createElement(Za,{school:t,course:o,draftId:i,branch:n,activeTab:s,contentId:c,taskId:l,blockId:r&&r.id})})):a.createElement(gs,{school:t,courseId:n,lazyRepo:v,activeTab:s,taskId:l,contentId:c,draftId:i}):a.createElement(at.a,null,k.map(function(e){var r=e.branch,c=e.block,l=e.course,u=e.tabs;return a.createElement(va,{school:t,courseId:n,draftId:i,course:l,branch:r,tabs:u,activeTab:s,editMode:o,block:c})})))});var ys,Es,ws,Ts,Os=n(121),js=function(e){var t=e.title,n=e.courses;return s.a.createElement("div",{className:"ked_boxed"},s.a.createElement("h3",null,t),s.a.createElement("div",{className:"taskContainer odd-even"},n.map(function(e){var t=e.id,n=e.name,r=e.description,a=e.tags;return s.a.createElement(de,null,s.a.createElement(me,null,s.a.createElement("div",{className:"studentCourse"},s.a.createElement(Be.a,{to:"/courses/"+t},n),s.a.createElement("p",{className:"small"},r))),a.includes("active")?void 0:s.a.createElement(me,null,s.a.createElement("div",{className:"pill incomplete"},"Inaktiv")))})))},Ns=Object(m.b)(function(e){return(e.showInactive?Object(Os.a)():Object(Os.a)().tags("active")).orderBy("name").map(function(e){var t=e.id,n=e.name,r=e.type,a=e.description;return{id:t,name:n,type:r,tags:e.tags,description:a,url:"/courses/"+t}}).groupBy("type").map(function(e){return{themeCourses:e["theme-course"],stepCourses:e["step-course"]}}).map(function(e){var t=e.themeCourses,n=e.stepCourses;return s.a.createElement(s.a.Fragment,null,t&&s.a.createElement(js,{title:Object(h.a)(ys||(ys=r.e(["Temakurser"],["Temakurser"]))),courses:t}),n&&s.a.createElement(js,{title:Object(h.a)(Es||(Es=r.e(["Stegkurser"],["Stegkurser"]))),courses:n}))})}),Is=function(e){var t=e.school,n=e.courseId,r=e.blockId,a=e.stepNo;return s.a.createElement(at.a,null,p.c.optimizeCache().schools.name(t).single().map(function(e){return p.c.branch(e.officialBranchId)}).switchMap(function(e){return e.courseBlocks.include("tabs").id(r).map(function(e){var r=e.tabs.filter(function(e){return""+e.stepNo==""+a}).sort(Object(h.g)("order"))[0];return r?s.a.createElement(c.a,{to:"/"+t+"/courses/"+n+"/tabs/"+r.id}):s.a.createElement(c.a,{to:"/"+t+"/courses/"+n})})}))},Cs=function(e){var t=e.school,n=e.courseId,a=p.c.schools.name(t).single(),i=p.a.getBranchId(a,n).map(function(e){return p.c.branch(e)}),o=(a.map(function(e){return p.c.branch(e.officialBranchId)}),i.switchMap(function(e){return e.courseInstances.id(n).map(function(e){return{title:e.name,tabs:[{name:Object(h.a)(ws||(ws=r.e(["Versionshistorik"],["Versionshistorik"]))),key:"versionhistory"}],buttons:[s.a.createElement(Be.a,{to:"/"+t+"/courses/"+n,key:"$settings",title:Object(h.a)(Ts||(Ts=r.e(["Visa kursen"],["Visa kursen"])))},s.a.createElement("i",{className:"fa fa-eye","aria-hidden":!0})," ")]}})}));return s.a.createElement(s.a.Fragment,null,s.a.createElement(u.b,{lazyProps:o}),s.a.createElement(at.a,null,a.map(function(e){e.displayName;var t=e.officialBranchId;return s.a.createElement(Kr,{branchType:"school-branch",branchId:t,courseId:n,isAdmin:!1})})))},Ss=n(134),Ds=n(65);n.d(t,"a",function(){return Ms}),Object(Ss.a)();var xs,Rs,Ls=Object(m.b)(function(e){var t=e.render;return p.b.mySchool.map(function(e){return t(e)})}),Ms=(xs=function(){return a.createElement("div",{onKeyDown:function(e){83===e.which&&(e.ctrlKey||e.metaKey)&&(e.preventDefault(),p.c.saveNow().then(function(){}))}},a.createElement(i.a,null,a.createElement(a.Fragment,null,a.createElement(o.a,{path:"/",exact:!0,render:function(){return a.createElement(c.a,{to:"/courses"})}}),a.createElement(o.a,{path:"/courses",exact:!0,render:function(){return a.createElement(a.Fragment,null,a.createElement(u.a,{title:Object(h.a)(Rs||(Rs=r.e(["Kurser"],["Kurser"]))),tabs:[],activeTab:"$"}),a.createElement(Er.a,{left:a.createElement(Ns,{showInactive:!0}),right:a.createElement(wr.a,{env:y.a,viewCourseUrl:b.b.KED_COURSE_VIEWER_URL}),rightWidth:5}))}}),a.createElement(o.a,{path:"/courses/:courseId",exact:!1,render:function(e){var t=e.match;return a.createElement(Ls,{render:function(e){return a.createElement(c.a,{to:"/"+e.name+"/courses/"+t.params.courseId})}})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId;return a.createElement(ks,{school:n,courseId:r})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId?",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId;return a.createElement(ks,{school:n,courseId:r,activeTab:s})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/settings/:draftId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.draftId;return a.createElement(ks,{school:n,courseId:r,activeTab:"$settings",draftId:s})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/drafts/:draftId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.draftId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,draftId:i})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/drafts/:draftId/edit",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.draftId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,draftId:i,editMode:!0})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/tasks/:taskId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.taskId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,taskId:i,editMode:!1})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/contents/:contentId/tasks/:taskId/drafts/:draftId",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.taskId,o=t.draftId,c=t.contentId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,taskId:i,contentId:c,draftId:o,editMode:!1})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/tabs/:tabId/contents/:contentId/tasks/:taskId/drafts/:draftId/edit",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.tabId,i=t.contentId,o=t.taskId,c=t.draftId;return a.createElement(ks,{school:n,courseId:r,activeTab:s,contentId:i,taskId:o,draftId:c,editMode:!0})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/blocks/:blockId/steps/:stepNo",render:function(e){var t=e.match.params,n=t.school,r=t.courseId,s=t.blockId,i=t.stepNo;return a.createElement(Is,{school:n,courseId:r,blockId:s,stepNo:i})}}),a.createElement(o.a,{exact:!0,path:"/:school/courses/:courseId/history",render:function(e){var t=e.match.params,n=t.school,r=t.courseId;t.blockId,t.stepNo;return a.createElement(Cs,{school:n,courseId:r})}}),a.createElement(l.a,null),a.createElement(d.a,null))))},function(e){function t(t){var n=e.call(this,t)||this;return n.state={dialogs:[]},n.openDialog=n.openDialog.bind(n),n.closeDialog=n.closeDialog.bind(n),n}return r.c(t,e),t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.render=function(){var e=this.state.dialogs;return s.a.createElement(Xe.Provider,{value:{openDialog:this.openDialog,closeDialog:this.closeDialog}},s.a.createElement(xs,r.a({},this.props)),s.a.createElement(Ds.a,{dialogs:e,popDialog:this.closeDialog}))},t}(s.a.Component))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(151),n(99),n(173),n(3)),s=n(0),i=n(117),o=n(160),c=n(161),l=n(182),u=n(59),d=n(8),m=n(17);Object(c.a)({v1:["css/courseviewer.css","css/dialog.css","css/grid-css-patch.css"],includeCSS:o.a,version:6,versionFolder:"css/delta-css/courseviewer"});var p=function(e){function t(t){var n=e.call(this,t)||this;return location.hash||(location.hash="#/"),n}return r.c(t,e),t.prototype.render=function(){var e=this.props.intl;return a.a.currentUser?s.createElement(m.a.Provider,{value:{intl:e}},s.createElement(l.a,null)):s.createElement(i.a,null)},t}(s.Component),f=Object(u.a)(Object(d.d)(p));t.default=f}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmVudi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9LRUQuY2ZnLnRzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2tlZGJhY2tlbmQtc3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL3V0aWxzLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2NhY2hlLWJ1c3QuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8vZGVsdGEtbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1xdWVyeS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9rZWRiYWNrZW5kLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8vcXVlcnktc2V0LmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL211dGF0aW9uLXF1ZXVlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2RlbHRhLWNvbGxlY3Rpb24vYXBwbHktbXV0YXRpb25zLW9uLWRlbHRhcy5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9kZWx0YS1jb2xsZWN0aW9uL2RlbHRhLWNhY2hlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2tlZGJhY2tlbmQtd3JpdGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2RlbHRhLWNvbGxlY3Rpb24vZGVsdGEtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9rZWRiYWNrZW5kLXJlcG8uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvZGIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvZXhlYy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zcGlubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYWNjZXNzLWNvbnRyb2wvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FjY2Vzcy1jb250cm9sL2dldC11c2VyLWNsYWltcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L3V0aWxzLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9xdWVyeS1zdHJpbmcudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9yZXN0Y2xpZW50LmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQva2VkLWJlYXJlci1wcm92aWRlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2FjY2Vzcy1jb250cm9sLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvaHR0cC1lcnJvci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2luZGV4LmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NoYXJ0cy9nb2FsLXByb2dyZXNzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViL2JlYXJlci1zdG9yYWdlLXNlc3Npb25zdG9yYWdlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvbWlncmF0ZS10YXNrLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvbWlncmF0ZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUtY291cnNlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC13ZWIvaGFzaC1yZXN0b3Jlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2NsaWVudHdlYi5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvc2Nob29sLW1vbWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvbGF6eS1jb250ZW50LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZmVhdHVyZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHQtaW5wdXQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXBlcnNpc3RlZC1zdGF0ZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3MvdXNlci10YXNrcy1yZXBvLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL2tlZC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9lbWl0dGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL3ZhbHVlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9saXZlLXF1ZXJ5LXZpZXcudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvd2Vla3V0aWwudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RET01cIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9tYXAuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3NjaG9vbC10ZXJtLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9tYWtlLXN1c3BlbnNlLWFwaS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYXBpcy9lZHNjbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvbG9naWMvb3JkZXJlZC1yZXF1aXJlbWVudHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dGFyZWEudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL2ZpYmVyLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvbG9naWMvY291cnNlLWluc3RhbmNlLXRhZ3MudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucy1zdi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3Mva2VkLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvd2FzaC1odG1sLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9pbWFnZS1lZGl0LWFjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvY291cnNlcy9idXNpbmVzcy1sb2dpYy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZmVhdHVyZXMvZmVhdHVyZXMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL1NldHVwTGFuZ3VhZ2VJbnRsLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYXBpcy9jb25maWdzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL2dldC10YXNrLXR5cGUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvdXNlci10YXNrcy1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL2FkZC1jdXN0b20tZ29hbC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvYWRkLWN1c3RvbS10YXNrLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci9hZGQtb3ItZWRpdC1zdWItdGFzay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvZWRpdC11c2VyLXRhc2sudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NoYXJ0cy9wcm9ncmVzcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvd2Vla3BsYW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL3JlZmluZXIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2hhcnRzL2NoYXJ0cy11dGlscy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvZGlhbG9ncy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMvZ29vZ2xlLWRyaXZlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS12aWV3ZXIvc3ViY29tcG9uZW50cy9jb25maXJtYXRpb24udHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS12aWV3ZXIvc3ViY29tcG9uZW50cy90YXNrLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NlbGVjdC1yZWxhdGVkLWRvY3MudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2NvbW1vbi90d28tY29sdW1ucy1wYWdlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy9sb2dpYy9pcy1lbXBsb3llZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC9kYXRhL3VzZXJzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL21vbWVudC1zdi1sb2NhbGUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2Vycm9yLXN1Y2Nlc3MtZmVlZGJhY2sudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy9yZXBvLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL2dvb2dsZS1jbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMvZ29vZ2xlLXBpY2tlci50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL2NvdXJzZS1uYW1lLXRvLWNzcy1jbGFzcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvcGVuZGluZy1qb2IudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMvZ29vZ2xlLXdlYmNsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYXBpcy9idXR0b25zLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9rbm93bGVkZ2UtbWF0cml4LXBhcnRpYWwtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMva25vd2xlZGdlLW1hdHJpeC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL2NvbmZpZ3VyZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFsLXNldHRlcnMvc2V0LWJlYXJlci1wcm92aWRlcnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL3NldC1rZWQtYmFja2VuZC1jbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL3NldC1lZHMtY2xpZW50LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2NvbW1vbi9iYW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2VsbGlwc2lzLWxvYWRlci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL2FiaWxpdGllcy1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS12aWV3ZXIvc3ViY29tcG9uZW50cy9jZW50cmFsLWNvbnRlbnQtYm94LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2Utdmlld2VyL3N1YmNvbXBvbmVudHMva25vd2xlZGdlLXJlcXVpcmVtZW50cy10YWJsZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2NoZWNrbGlzdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvbG9naWMvdGFzay1vcmRlci50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy9sb2dpYy9wdWJsaXNoLWNvdXJzZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvc29ydGFibGUtdGFzay1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXJlc291cmNlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC91dGlscy9jaG9vc2UtdXNlci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvbG9naWMvbGlzdC1jb3Vyc2UtaW5zdGFuY2VzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2xvZ2ljL2dldC1jb3Vyc2UtY29kZXMtZnJvbS10YWdzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2xvZ2ljL2dldC1zdGFuZGFyZC1jb3Vyc2VzLXdpdGgtb3JkZXJlZC1yZXF1aXJlbWVudHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2xvYWRpbmctaW5kaWNhdG9yLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svdGFzay1taWdyYXRpb24tYm94LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29udHJhY3RzL2tlZC1tb2RlbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2tlZXAtc2Vzc2lvbi1hbGl2ZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2Utdmlld2VyL2NvdXJzZS1wYWdlL3Vya3VuZC11dGlscy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2Utdmlld2VyL2NvdXJzZS1wYWdlL3Rhc2stYXNzaWdubWVudHMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlIHN5bmMgc3Z8ZW4iLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3Rlc3Qvc2V0LWN1cnJlbnQtdXNlci50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC91dGlscy9pbmNsdWRlLWNzcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvaW5jbHVkZS1vcHRpb25hbC1jc3MudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3Rlc3QvdGVzdC1jb25maWcudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvbG9naWMvaXMta2VkLXN0YWZmLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvYWRkLXRhYi1idXR0b24udHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvYWRkLWNvbnRlbnQtYnV0dG9uLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvYWxpZ24taG9yaXpvbnRhbC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2hvcml6b250YWwtaXRlbS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci9jb3Vyc2UtdGFiL3RhYi1jbGFzc2VzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvdGFiLXNldHRpbmdzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL2NvdXJzZS1jb250ZW50cy9jb3Vyc2UtY29udGVudC10eXBlcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL2NvdXJzZS1jb250ZW50cy9yaWNoLXRleHQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvY291cnNlLWNvbnRlbnRzL2xlYXJuaW5nLXRhc2tzLXNldHRpbmdzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL2NvdXJzZS1jb250ZW50cy9hZGQtdGFzay1idXR0b24udHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2xvZ2ljL2NvbXB1dGUtdGFzay10YWdzLWFuZC1zdWJqZWN0LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvY291cnNlLWNvbnRlbnRzL2xlYXJuaW5nLXRhc2tzLXdpdGgtY29tbW9uLWdvYWxzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL2NvdXJzZS1jb250ZW50cy9sZWFybmluZy10YXNrcy13aXRoLXNlcGFyYXRlLWdvYWxzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL2NvdXJzZS1jb250ZW50cy9sZWFybmluZy10YXNrcy1jb250ZW50LWJveC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci9jb3Vyc2UtY29udGVudHMvZW1iZWRkZWQtaHRtbC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci9jb3Vyc2UtY29udGVudHMvd29yZC1iYW5rLWNvbnRlbnQtc2V0dGluZ3MudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvY291cnNlLWNvbnRlbnRzL3dvcmQtYmFuay1jb250ZW50LWJveC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvY29tbW9uL2RpYWxvZy1jb250ZXh0LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvY291cnNlLWNvbnRlbnRzL3Jlc291cmNlLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvY291cnNlLWNvbnRlbnRzL2NvbnRlbnQtYm94LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy9sb2dpYy9jaGFuZ2Utc29ydC1vcmRlci50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy9jb21tb24vZmllbGQtbGltaXRzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvY291cnNlLXRhYi1jb250ZW50LWJveC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci90YWItc2V0dGluZ3MtcmVxdWlyZW1lbnRzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL3RhYi1zZXR0aW5ncy1hZG1pbi50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci9jb3Vyc2UtdGFiLWFyZWEudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvZWRpdG9yLWZvb3Rlci1idXR0b25zLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL3ZlcnNpb24taGlzdG9yeS9tb2RlbC1mcmllbmRseS1uYW1lcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL3ZlcnNpb24taGlzdG9yeS9kZWx0YWRvYy1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvdmVyc2lvbi1oaXN0b3J5L2RlbHRhbGluay1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvdmVyc2lvbi1oaXN0b3J5L2RlbHRhLXZpZXcudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvdmVyc2lvbi1oaXN0b3J5L3ZlcnNpb24taGlzdG9yeS1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvY291cnNlLWNvbnRlbnRzL3Jlc291cmNlLWxpc3Qtdmlldy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci9jb3Vyc2UtYXJlYS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci90YXNrL3JpZ2h0LWNvbHVtbi9iYXNpYy1lZGl0YWJsZS10YXNrLWZpZWxkcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci90YXNrL3JpZ2h0LWNvbHVtbi90YXNrLWZvb3Rlci1idXR0b25zLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL3Rhc2svcmlnaHQtY29sdW1uL2ludHJvZHVjdGlvbi10ZXh0LWVkaXRvci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci90YXNrL3RleHRzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvdGFzay9yaWdodC1jb2x1bW4vdGFzay1kZXNjcmlwdGlvbi1lZGl0b3IudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2NvbW1vbi9zZWxlY3Qtd29yZC1iYW5rLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL3Rhc2svcmlnaHQtY29sdW1uL3Rhc2std29ya2luZy1wcm9jZWR1cmUtZWRpdG9yLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9yZXN0b3JlLXNlbGVjdGlvbi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL3Rhc2svcmlnaHQtY29sdW1uL3Rhc2stZW1iZWRkZWQtaHRtbC1lZGl0b3IudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvdGFzay9yaWdodC1jb2x1bW4vZWRpdC10YXNrLWZvcm0udHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvdGFzay9sZWZ0LWNvbHVtbi9lZGl0LXJlcXVpcmVtZW50cy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci90YXNrL3Rhc2stZWRpdG9yLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy9sb2dpYy9nZXQtZHJhZnQtaWQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci9jbGlja2FibGUtc2Nob29sLWRpdi50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvY29tbW9uL2Z1dHVyZS1hYmlsaXRpZXMtYm94LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL3Rhc2svdmlld2VyL3Rhc2stdmlld2VyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL3Rhc2svdmlld2VyL3Rhc2stdmlld2VyLXBhZ2UudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL3ZpZXdlci1lZGl0b3IvY291cnNlLXZpZXdlci1wYWdlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL2xpc3QtY291cnNlcy9zdHVkZW50LWNvdXJzZXMtYm94LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL2xpc3QtY291cnNlcy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci9yZWRpcmVjdC10by1zdGVwLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yL3ZlcnNpb24taGlzdG9yeS9pbmRleC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3Mvdmlld2VyLWVkaXRvci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvY29tbW9uL2RpYWxvZy1jb250ZW50LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC90ZXN0cGFnZS1zcC50c3giXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImV4ZWN1dGVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJkZWZlcnJlZE1vZHVsZXMiLCJhcHBseSIsImNoZWNrRGVmZXJyZWRNb2R1bGVzIiwicmVzdWx0IiwiZGVmZXJyZWRNb2R1bGUiLCJmdWxmaWxsZWQiLCJqIiwiZGVwSWQiLCJzcGxpY2UiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwicyIsImluc3RhbGxlZE1vZHVsZXMiLCI5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicCIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJSZWFjdCIsImNhcGl0YWxpemVGaXJzdCIsInN0ciIsImNoYXJDb2RlQXQiLCJzdWJzdHIiLCJ0b0xvY2FsZVVwcGVyQ2FzZSIsImV4dGVuZCIsIm9iaiIsImV4dGVuc2lvbiIsImtleXMiLCJmb3JFYWNoIiwiY2xvbmUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY29uY2F0IiwiZmxhdHRlbiIsImEiLCJjb21wYXJlUHJvcCIsInByb3AiLCJiIiwiYVByb3AiLCJiUHJvcCIsImNvbXBhcmVQcm9wcyIsInByb3BzIiwibG9jYWxlcyIsIm9wdGlvbnMiLCJBcnJheSIsImlzQXJyYXkiLCJsb2NhbGVDb21wYXJlIiwibWFwIiwic3BsaXQiLCJfYSIsIl9iIiwidHNsaWJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImZpcnN0UGFydCIsInJlc3QiLCJjbXBQYXJ0IiwiZmlyc3RBIiwiZmlyc3RCIiwicmVkdWNlIiwiY21wMSIsImNtcDIiLCJMIiwidGV4dCIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsInJ2IiwiYnVpbGRNZXNzYWdlIiwiZGF0ZVRpbWVSZXZpdmVyIiwiZXhlYyIsIkRhdGUiLCJzaG93SW5mbyIsIm1zZyIsImV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJkaXNwYXRjaEV2ZW50Iiwic2hvd0Vycm9yIiwiZXJyTXNnIiwibWVzc2FnZSIsImNvbnNvbGUiLCJlcnJvciIsIm1heExlbmd0aCIsIm1heExlbiIsImFycmF5VG9Mb29rdXAiLCJrZXlBY2Nlc3NvciIsIml0ZW0iLCJhcnJheSIsImFycmF5VG9NYXAiLCJjaGVycnlQaWNrUHJvcHMiLCJwcm9wc1RvUGljayIsInByb3BzVG9QaWNrXzEiLCJwcm9wc1RvUGlja18xXzEiLCJuZXh0IiwiZG9uZSIsInBhcmFtIiwiZGlzdGluY3QiLCJ4Iiwic2hhbGxvd0VxdWFscyIsImtleXNBIiwia2V5c0IiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiZW52IiwiX2tlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2pzX2Rpc3RfanNfa2VkX2JhY2tlbmRfY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJjZmciLCJfS0VEX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJLZWRCYWNrZW5kU3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsImNvbGxlY3Rpb24iLCJ0aGlzIiwibm90aWZ5U3Vic2NyaWJlciIsImxhc3ROb3RpZmllZERhdGEiLCJleCIsImV4MiIsInVuc3Vic2NyaWJlIiwiZ2V0VGFibGVGcm9tTGFiZWwiLCJ0YWJsZSIsImxhYmVsIiwic2NoZW1hIiwicmVsYXRpb25zaGlwcyIsInF1ZXJ5QXJyYXkiLCJxdWVyeSIsImZpbHRlciIsImZyb20iLCJBTkQiLCJkYXRlVGltZSIsInRvIiwiaWRzIiwiaW5jbHVkZXMiLCJpZCIsInRhZ3MiLCJzb21lIiwidGFnIiwiZ2V0RmlsdGVyRnJvbVF1ZXJ5IiwiZmlsdGVyMSIsImZpbHRlcjIiLCJicmFuY2hTZW5zaXRpdmUiLCJvcCIsImdsb2JhbE9wIiwiY2FjaGVfYnVzdF9DYWNoZUJ1c3QiLCJDYWNoZUJ1c3QiLCJnZXRDYWNoZUJ1c3QiLCJ1c2VyIiwiZ2V0SW52b2x2ZWRJdGVtcyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJqb2luIiwiaW52YWxpZGF0ZUNhY2hlIiwicmVxcyIsImdldENhY2hlSW52YWxpZGF0aW9ucyIsInNldEl0ZW0iLCJub3ciLCJoYXNFZGdlc0Zyb20iLCJyZWxhdGVkVGFibGVzIiwiYnJhbmNoSWQiLCJzb3J0IiwiaW52YWxpZGF0aW9uU2V0IiwicmVxIiwic291cmNlVGFibGUiLCJ0YXJnZXRCcmFuY2hJZCIsImFwcGx5RGVsdGEiLCJkb2MiLCJkZWx0YSIsInRhcmdldERvYyIsImtleXNfMSIsInRzbGliX2VzNiIsInZhbCIsIm1ldGFJbnN0cnVjdGlvbnMiLCJzdGFydHNXaXRoIiwiX2xvb3BfMSIsIm1pIiwibWlWYWx1ZSIsIiR3YXNVbnNldCIsInZhbHVlc1RvQWRkIiwiRXJyb3IiLCJ0YXJnZXRBcnJheSIsInZhbHVlc1RvQWRkXzEiLCJ2IiwidmFsdWVzVG9SZW1vdmVfMSIsIm1ldGFJbnN0cnVjdGlvbnNfMSIsIm1lcmdlRGVsdGFzIiwiZGVsdGExIiwiZGVsdGEyIiwicmVtb3ZlVW5zZXRQcm9wcyIsInRhcmdldERlbHRhIiwia2V5c18yIiwiX2xvb3BfMiIsIiR1bnNldCIsInZhbHVlc1RvQWRkXzIiLCJ0YXJnZXRNZXRhUHJvcCIsInRhcmdldFJlbW92ZUFycmF5IiwiJHJlbW92ZSIsInRhcmdldEFkZEFycmF5IiwiJGFkZCIsInZhbHVlc1RvUmVtb3ZlXzIiLCJtZXRhSW5zdHJ1Y3Rpb25zXzIiLCJrZWRiYWNrZW5kX3F1ZXJ5X0tlZEJhY2tlbmRRdWVyeSIsIktlZEJhY2tlbmRRdWVyeSIsInJlcG8iLCJtdXRhdGlvblF1ZXVlIiwic3Vic2NyaXB0aW9ucyIsImdvdEluaXRpYWxSZXNwb25zZSIsImludmFsaWQiLCJsb2FkZWRWZXJzaW9uIiwiX2xvYWRQcm9taXNlIiwiaW5jbHVkZSIsInF1ZXJ5S2V5IiwibXV0YXRpb25zT25FbXB0eSIsImNvbXBhcmFibGVQcm9wcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25maWd1cmFibGUiLCJzdWJzY3JpYmUiLCJzdWJzY3JpcHRpb24iLCJnZXREYXRhV2l0aE11dGF0aW9uc0FwcGxpZWQiLCJxdWVyeUxvY2FsbHkiLCJsb2FkIiwic2VudCIsInZlcnNpb24iLCJsb2FkUHJvbWlzZSIsIl90aGlzIiwid3JpdGVyIiwicGVyc2lzdGVkVmVyc2lvbiIsIl9sb2FkIiwidGhlbiIsIk1hdGgiLCJtYXgiLCJjYXRjaCIsIm5vdGlmeVN1YnNjcmliZXJzIiwiYWZmZWN0c1F1ZXJ5Iiwid2FpdEZvclZlcnNpb25Ub1BlcnNpc3QiLCJxdWVyeVNlcnZlciIsImNvbW1pdE11dGF0aW9ucyIsIm11dGF0aW9ucyIsIm11dGF0aW9uc18xIiwicmVmcmVzaE9ySW52YWxpZGF0ZSIsImRlbHRhRG9jIiwib3B0aW1pc3RpY011dGF0aW9ucyIsImRhdGFfMSIsInF1ZXJ5U2V0IiwiZ2V0Q2xpZW50IiwibGlzdCIsIm9wdGltaXN0aWMiLCJtdXRhdGlvbiIsImFwcGx5TXV0YXRpb25zT25EYXRhIiwibGlzdE9wdGlvbnMiLCJzb3VyY2VJZHMiLCJyZXF1ZXN0ZWRUYWdzIiwidXRpbHMiLCJ1cGRhdGVkRG9jIiwiJG1ldGEiLCJpbmNsdWRlZERvY3MiLCJ1cGRhdGVkQXJyYXkiLCJyZWxhdGVkIiwidXBkYXRlZFJlbGF0ZWQiLCJpbmRleE9mIiwiZ3JhcGhQcm9wIiwicmVsYXRlZERvYyIsInNldEdyYXBoUHJvcHMiLCJsYWJlbHNfMSIsInJlbGF0ZWREb2NzIiwiY29weSIsImtlZGJhY2tlbmRfY29sbGVjdGlvbl9LZWRCYWNrZW5kQ29sbGVjdGlvbiIsIl9zdXBlciIsIktlZEJhY2tlbmRDb2xsZWN0aW9uIiwib2JzZXJ2ZXIiLCJfaW5jbHVkZXMiLCJhcHBseVF1ZXJ5IiwiYWRkVG9RdWVyeUFycmF5UHJvcCIsImFycmF5UHJvcCIsImVudHJpZXMiLCJhZGRGbGFncyIsImZsYWdzIiwiZGVidWciLCJpZHNPbmx5IiwiaWRzQW5kTmFtZXNPbmx5IiwiaW5jbHVkZUlkc09ubHkiLCJpbmNsdWRlSWRzQW5kTmFtZXNPbmx5IiwiYmV0d2VlbiIsInJvbGUiLCJoYXNFZGdlc1RvIiwic2luZ2xlIiwib25aZXJvIiwib25NYW55IiwiZ3JhcGhzIiwiY2FjaGVPcHRpbWl6ZWQiLCJjYWNoZUJ1c3QiLCJnZXRVc2VyIiwibXV0YXRpb25GYWN0b3J5IiwidHgiLCJrZWRfYmFja2VuZF9jbGllbnQiLCJtdXRhdGlvblJlcXVlc3RzIiwidGhyb3dlcnMiLCJ0b1ZhbHVlIiwiaXRlbXMiLCJsb2ciLCJ1cGRhdGUiLCJjaGFuZ2VzIiwiZGVib3VuY2UiLCJtdXRhdGUiLCJ0YXJnZXROYW1lIiwiYWRkUmVsYXRlZCIsInJlbW92ZVJlbGF0ZWQiLCJ1bmRvTGluayIsInJlbGF0ZWRJZCIsImRlbGV0ZSIsInF1ZXJ5X3NldF9RdWVyeVNldCIsIlF1ZXJ5U2V0IiwicXVlcmllcyIsIlByb21pc2UiLCJhbGwiLCJxIiwiY2xlYW51cEludmFsaWRRdWVyaWVzIiwidGltZW91dEhhbmRsZSIsImNsZWFyVGltZW91dCIsImZpbmRRdWVyeSIsImZpbmQiLCJxSW5jbHVkZXMiLCJyZXNfMSIsImVudGl0eSIsInJlc3VsdF8xIiwiZXZlcnkiLCJyZXN1bHRfMiIsInN0YXRlXzEiLCJrYlF1ZXJ5Iiwic2V0VGltZW91dCIsIm11dGF0aW9uX3F1ZXVlX011dGF0aW9uUXVldWUiLCJNdXRhdGlvblF1ZXVlIiwicXVldWUiLCJzYXZpbmdRdWV1ZSIsImFkZCIsIm1lcmdlIiwibW92ZVRvU2F2aW5nUXVldWUiLCJjbGVhclNhdmluZ1F1ZXVlIiwicXVldWUxIiwicXVldWUyIiwibXV0YWJsZVF1ZXVlMSIsIm11dGFibGVRdWV1ZTIiLCJsZW4iLCJvdmVybGFwcGluZ0lkT3BJZHgiLCJmaW5kSW5kZXgiLCJuZXdNdXQiLCJhcHBseU11dGF0aW9uc09uRGVsdGFzIiwiZGVsdGFzIiwidXNlckRpc3BsYXlOYW1lIiwiaGFzQWRkaXRpb25hbEZpbHRlciIsInR5cGUiLCJzb3VyY2VJZCIsInRhcmdldElkIiwiY29udHJpYnV0b3IiLCJpZHgiLCJkZWx0YVJlbGF0aW9uIiwiY29udHJpYnV0b3JzIiwiZXhpc3RpbmdEZWx0YURvYyIsIm5ld0RhdGEiLCJkZWx0YV9jYWNoZV9EZWx0YUNhY2hlIiwiRGVsdGFDYWNoZSIsImdldFVzZXJEaXNwbGF5TmFtZSIsImxvb2t1cCIsImFwcGx5TXV0YXRpb25zIiwiY2FjaGVFbnRyeSIsIm5ld1ZhbHVlIiwiZmV0Y2giLCJvcHRpbWlzdGljVmFsdWUiLCJub3RpZnkiLCJkZWx0YV9jYWNoZV9EZWx0YUNhY2hlRW50cnkiLCJjbGVhbnVwVGltZXIiLCJzdWJzY3JpYmVycyIsImlzRmV0Y2hpbmciLCJEZWx0YUNhY2hlRW50cnkiLCJjbGllbnQiLCJmZXRjaE9wZXJhdGlvbklkIiwiZmV0Y2hGcm9tU2VydmVyIiwiZmFpbCIsInJlcyIsIl9jIiwiaHR0cCIsInN0YXR1cyIsImpzb24iLCJjb3B5XzEiLCJrZWRiYWNrZW5kX3dyaXRlcl9LZWRCYWNrZW5kV3JpdGVyIiwiS2VkQmFja2VuZFdyaXRlciIsIl90aW1lb3V0SWQiLCJfaXNTYXZpbmdQcm9taXNlIiwiY3VycmVudFZlcnNpb24iLCJvYnNlcnZhYmxlIiwiZXJyb3JTdWJzY3JpYmVycyIsInN0YXRlU3Vic2NyaWJlcnMiLCJkZWx0YUNhY2hlIiwib25FcnJvciIsImNhbGxiYWNrIiwib25TdGF0ZUNoYW5nZSIsIm9mZiIsImRpc3BhdGNoRXJyb3IiLCJyZXRyeWFibGUiLCJfIiwiZGlzcGF0Y2hTdGF0ZUNoYW5nZSIsInNhdmUiLCJyZXRyeVNhdmUiLCJpc0VkaXRlZCIsIl9zYXZlIiwicmVzb2x2ZSIsImV0YWdNdXRhdGlvbnMiLCJlcnJvcl8xIiwibWFwTXV0YXRpb25zIiwidHJ5cyIsImJhdGNoIiwibmV3RXRhZ3MiLCIkZXRhZyIsImRpc3BhdGNoIiwiYnIiLCJsaW5rMiIsInVubGluazIiLCJjbGVhckJyYW5jaCIsImRlbHRhX2NvbGxlY3Rpb25fRGVsdGFDb2xsZWN0aW9uIiwiRGVsdGFDb2xsZWN0aW9uIiwia2VkYmFja2VuZF9yZXBvX0tlZEJhY2tlbmRSZXBvIiwiS2VkQmFja2VuZFJlcG8iLCJkZWZhdWx0UXVlcnlPcHRpb25zIiwidGFibGVOYW1lIiwiX2Nsb25lIiwicXVlcnlPcHRpb25zIiwidW5kZWZpbmVkIiwiYnJhbmNoIiwib3B0aW1pemVDYWNoZSIsInNhdmVOb3ciLCJkYiIsImdsb2JhbElkIiwiU2Nob29scyIsIkNvdXJzZUluc3RhbmNlcyIsIktFRF9lbnYiLCJrZWRCYWNrZW5kQ2xpZW50IiwiY3VycmVudFVzZXIiLCJtYWlsIiwiZGlzcGxheU5hbWUiLCJLRURfY2ZnIiwiS0VEX1JFQUxNIiwic3RhbmRhcmRTY2hvb2wiLCJzY2hvb2xzIiwibXlTY2hvb2wiLCJzY2hvb2wiLCJnZXRCcmFuY2hJZCIsImNvdXJzZUlkIiwic3dpdGNoTWFwIiwiYnJhbmNoZXMiLCJvZmZpY2lhbEJyYW5jaElkIiwiZ2V0T3JDcmVhdGVCcmFuY2hJZCIsImNvdXJzZUluc3RhbmNlcyIsImFjbCIsInNjaG9vbElkIiwidHJlZVBhcmVudElkIiwiZ2V0QWxsRGVzY2VuZGFudElkcyIsImNvdXJzZUJsb2NrcyIsImNvdXJzZUNvbnRlbnRzIiwiY291cnNlVGFicyIsInRhc2tzIiwiY29tbWFuZCIsImRvY3VtZW50IiwiZXhlY0NvbW1hbmQiLCJqUXVlcnkiLCJTcGlubmVyIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNsYXNzTmFtZSIsImFyaWEtaGlkZGVuIiwiSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMiLCJoYXNBY2Nlc3MiLCJyZXF1ZXN0ZWRSaWdodCIsImNsYWltcyIsInJvbGVzIiwiZ2V0VXNlckNsYWltcyIsInR1dG9yRm9yIiwiY2xhaW0iLCJmcm9tU3RyaW5nQXJyYXkiLCJoYXNXcml0ZUFjY2VzcyIsImlzVGVhY2hlckF0U2Nob29sIiwiaXNUZWFjaGVyIiwiYmVsb25nc1RvU2Nob29sIiwidG9Mb3dlckNhc2UiLCJpc0FkbWluT3JUZWFjaGVyQXRTY2hvb2wiLCJpbXBlcnNvbmF0aW9uRW52IiwiYWN0QXMiLCJ1cmwiLCJjdXJyZW50UXVlcnkiLCJxdWVyeV9zdHJpbmciLCJsb2NhdGlvbiIsInNlYXJjaCIsIm5ld1F1ZXJ5IiwibmV3UXVlcnlTdHJpbmciLCJocmVmIiwiaGFzaCIsInByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IiwicHJlc2VydmVkUXVlcnkiLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNU18xIiwiSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVNfMV8xIiwicEhhc2giLCJjcmVhdGVVVUlEIiwiYXZvaWRTaW11bHRhbm91c0NhbGxzIiwiZ2V0R2xvYmFsSWQiLCJjb21wdXRlUHJlZGVzdGluYXRlZElkIiwidXBkYXRlQXJyYXkiLCJyZXBsYWNlIiwicmFuZG9tIiwiZmxvb3IiLCJ0b1N0cmluZyIsIm1ldGhvZCIsIm9uZ29pbmdQcm9taXNlIiwicmVhbG0iLCJwYWQiLCJoZXgiLCJpbnB1dCIsImVuY29kZXIiLCJkaWdlc3QiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJzdWJ0bGUiLCJuaWJibGUiLCJtYXBwZXIiLCJyZXR2YWwiLCJtYXBwZWQiLCJwYXJzZVF1ZXJ5U3RyaW5nIiwibG9jYXRpb25TZWFyY2giLCJ0b0xvd2VyIiwicGFydCIsImRlY29kZVVSSUNvbXBvbmVudCIsInRyaW0iLCJlbmNvZGVQYXJhbXMiLCJwYXJhbXMiLCJlbmNvZGVVUklDb21wb25lbnQiLCJnZW5lcmF0ZVF1ZXJ5U3RyaW5nIiwic3BsaXRVcmxBbmRRdWVyeSIsInVybFdpdGhQb3NzaWJsZVF1ZXJ5IiwicFF1ZXJ5IiwidXBkYXRlRG9jdW1lbnRHcmFwaHMiLCJvbGREb2MiLCJuZXdEb2MiLCJkb2NVcGRhdGVzIiwiZG9jSWQiLCJuYXZQcm9wIiwiZm9yZWlnblRhYmxlIiwib2xkTGlzdCIsIm5ld0xpc3QiLCJ0dXBsZXMiLCJhZGRlZCIsInR1cGxlIiwiYWRkZWRfMSIsImVfMiIsImFkZGVkXzFfMSIsIm1ldGEiLCJtdXRhdGVkU3ViRG9jIiwia2VkYmFja2VuZF9jbGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInB1dCIsImxpbmsiLCIkc2V0IiwicmVtb3ZlZCIsInJlbW92ZWRfMSIsImVfMyIsInJlbW92ZWRfMV8xIiwidW5saW5rIiwidXBkYXRlZCIsInVwZGF0ZWRfMSIsImVfNCIsInVwZGF0ZWRfMV8xIiwidSIsInJlYWN0X2FkZG9uc191cGRhdGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwiZHRGb3JtYXQiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiZm9ybWF0Iiwic2hvcnREYXRlRm9ybWF0Iiwic2hvcnRQZXJzb25OYW1lRm9ybWF0IiwibmFtZXMiLCJsYXN0TmFtZSIsInBvcCIsInVwZGF0ZU1vZGlmaWNhdGlvblN0YW1wIiwibW9kaWZpZWREYXRlIiwibW9kaWZpZWRCeSIsInVwZGF0ZUNyZWF0aW9uU3RhbXAiLCJjcmVhdGVkRGF0ZSIsImNyZWF0ZWRCeSIsImdldEVtYWlsRnJvbURvY0FjY2VzcyIsInJlc291cmNlIiwiZW1haWwiLCJzdWJzdHJpbmciLCJ1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyIsImFwcGx5RXRhZ3MiLCJldGFnIiwiZ3JhcGhzXzEiLCJncmFwaHNfMV8xIiwicmVhZEJsb2IiLCJibG9iIiwicmVqZWN0IiwicmVhZGVyIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsImV2IiwidGFyZ2V0Iiwib25hYm9ydCIsIm9uZXJyb3IiLCJyZWFkQmxvYkFzVGV4dCIsInJlYWRBc1RleHQiLCJhbGxvd0NvcHkiLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJkYXRhVHJhbnNmZXIiLCJkcm9wRWZmZWN0IiwidXBkYXRlQ291cnNlQnVpbGRlclN0YXR1cyIsImRpdiIsImpxdWVyeV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJsb2FkQ291cnNlIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiaW5jbHVkZVRlbXBsYXRlQ2hhaW4iLCJpbmNsdWRlVGFza3MiLCJjb3Vyc2UiLCJjb3Vyc2VUYXNrcyIsInRlbXBsYXRlQ2hhaW4iLCJhYmlsaXRpZXMiLCJhYmlsaXRpZXNPcmRlciIsImtub3dsZWRnZVJlcXVpcmVtZW50cyIsImtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyIiwiY2VudHJhbENvbnRlbnQiLCJjZW50cmFsQ29udGVudE9yZGVyIiwiY2MiLCJoYXNDaGFuZ2VzIiwib3JpZ2luYWxWYWx1ZXMiLCJjdXJyZW50VmFsdWVzIiwiTGFuZ3VhZ2VDb250ZXh0IiwiaW50bCIsInJlc3RjbGllbnRfUmVzdENsaWVudCIsIlJlc3RDbGllbnQiLCJpc29tb3JwaGljIiwiYmFzZVVybCIsIm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucyIsIl9zdGF0dXMiLCJlbWl0dGVyIiwiZmV0Y2hPcHRpb25zIiwiYXV0aEhlYWRlciIsImJlYXJlciIsInVzZXJuYW1lIiwiYnRvYSIsInBhc3N3b3JkIiwiYmVhcmVyUHJvdmlkZXIiLCJwYXRoIiwiaGVhZGVycyIsIl9mZXRjaCIsImVyciIsInF1ZXJ5U3RyIiwidG9rZW5JbmZvIiwid3d3YXV0aCIsIl9kIiwiX2UiLCJjYWNoZSIsIm5vY2FjaGUiLCJnZXRCZWFyZXIiLCJleHBpcmVzIiwicmVmcmVzaEJlYXJlciIsInRva2VuIiwiQXV0aG9yaXphdGlvbiIsInRlc3QiLCJBY2NlcHQiLCJwb3N0IiwiQ29udGVudC1UeXBlIiwiYm9keSIsImtlZF9iZWFyZXJfcHJvdmlkZXJfS2VkQmVhcmVyUHJvdmlkZXIiLCJLZWRCZWFyZXJQcm92aWRlciIsInN0b3JhZ2UiLCJ0b2tlbklkIiwiY2xpZW50SWQiLCJjbGllbnRTZWNyZXQiLCJ0b2tlblVybCIsInRva2VuUXVlcnkiLCJyZXRyaWVzIiwid2FybiIsInN0YXR1c1RleHQiLCJEb2N1bWVudEFjY2VzcyIsImFjY2Vzc0NsYWltVHlwZSIsImFjY2Vzc0NsYWltVmFsdWUiLCJyaWdodCIsImZyb21TdHJpbmciLCJhYyIsImNsYWltVHlwZSIsInVuZXNjYXBlIiwiY2xhaW1WYWx1ZSIsImVzY2FwZSIsImFjY2Vzc0NvbXBvbmVudCIsInRvU3RyaW5nQXJyYXkiLCJ1c2VyQ2xhaW1zIiwiaHR0cF9lcnJvcl9IdHRwRXJyb3IiLCJIdHRwRXJyb3IiLCJjb2RlIiwia2VkX2JhY2tlbmRfY2xpZW50X0tlZEJhY2tlbmRDbGllbnQiLCJrZWRfYmFja2VuZF9jbGllbnRfQmF0Y2hSdW5uZXIiLCJLZWRCYWNrZW5kQ2xpZW50IiwiZ2V0TXlDbGFpbXMiLCJyZXExIiwicmVxMiIsImRvIiwic2NvcGVGbiIsInJ1bm5lciIsImRlbGV0ZVJlYWxtIiwic2hhcmUiLCJ1bnNoYXJlIiwidGFyZ2V0VGFibGUiLCJCYXRjaFJ1bm5lciIsImdvYWxfcHJvZ3Jlc3NfR29hbFByb2dyZXNzIiwiR29hbFByb2dyZXNzIiwiY3JlYXRlUHJvZ3Jlc3MiLCJudW1iZXJPZlRhc2tzIiwiY29tcGxldGVkTnVtYmVyT2ZUYXNrcyIsIm1heGltdW1UYXNrc0Rpc3BsYXllZCIsImJhY2tncm91bmRDb2xvciIsInByb2dyZXNzQ29sb3IiLCJwcm9ncmVzcyIsImV4dGVybmFsX1JlYWN0XyIsInRhc2tObyIsImZpbGwiLCJjeCIsImN5IiwicmVuZGVyIiwiZGVmYXVsdFByb3BzIiwibnVtYmVyb2ZUYXNrcyIsIm9wZW5fY2xvc2VfYm94X09wZW5DbG9zZUJveCIsIk9wZW5DbG9zZUJveCIsInN0YXRlIiwiaGVhZGVyT3BlbiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJzZXRTdGF0ZSIsInRpdGxlIiwiY2hpbGRyZW4iLCJoZWFkZXJDbGFzc05hbWUiLCJjb250ZW50Q2xhc3NOYW1lIiwiZGlzcGxheVByb2dyZXNzIiwicHJvZ3Jlc3NEYXRhIiwiaW5hY3RpdmF0ZWQiLCJpbmFjdGl2YXRlZFJlbmRlciIsIm9uQ2xpY2siLCJvbk9wZW5DbG9zZSIsIkJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSIsInNlc3Npb25TdG9yYWdlIiwicGFyc2UiLCJtaWdyYXRlVGFzayIsInRhc2siLCJyZXNvdXJjZXMiLCJtaWdyYXRlIiwidGFza0lkcyIsInJlc3BvbnNpYmxlVGVhY2hlcnMiLCJyZXNvdXJzZXMiLCJtaWdyYXRlQ291cnNlIiwicmVkaXJIYXNoIiwiaGFzaF9yZXN0b3Jlcl9hIiwidGltZSIsInJlbW92ZUl0ZW0iLCJfX21pZ3JhdG9yX21peGVkX2luIiwiS2VkTW9kZWxNaWdyYXRvck1peGluIiwidGltZU9mUGFnZUxvYWQiLCJrZWRfYmFja2VuZF9jbGllbnRfd2ViX1dlYlNlcnZlckJlYXJlclByb3ZpZGVyIiwiV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIiLCJ0b2tlblBhdGgiLCJ0b2tlblJlc3BvbnNlTWFwcGVyIiwicmVkaXJlY3QiLCJjcmVkZW50aWFscyIsIndhbnRzUmVkaXJlY3QiLCJyZWxvYWQiLCJzZWxmIiwia2VkX2JhY2tlbmRfY2xpZW50X3dlYl9LZWRCYWNrZW5kQ2xpZW50V2ViIiwiS2VkQmFja2VuZENsaWVudFdlYiIsImFwaUJhc2VVcmwiLCJwcm92aWRlck9yVG9rZW5QYXRoIiwiZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSIsInRlcm0iLCJnZXRUZXJtU3RhckVuZERhdGUiLCJkYXRlIiwiaXNGaXJzdFRlcm0iLCJ0ZXJtWWVhciIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJ0ZXJtWWVhck1vbWVudCIsIndlZWsiLCJzdGFydE9mIiwiZW5kT2YiLCJnZXRTY2hvb2xNb21lbnQiLCJ0aGlzWWVhciIsInllYXIiLCJpc0F1dHVtbiIsIm1vbnRoIiwiYWNhZGVtaWNZZWFyIiwiYWRkWWVhciIsImFZZWFyIiwibnVtWWVhcnNUb0FkZCIsInllYXJTdHIiLCJwYXJzZUludCIsIkxhenlDb250ZW50IiwiX2xpdmVfcXVlcnlfdmlld19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwic3Bpbm5lciIsIm5vRXJyb3IiLCJmbiIsIl9mZWF0dXJlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiS0VEIiwiVGV4dElucHV0IiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9mb3JtX2ZpZWxkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJhdXRvRm9jdXMiLCJzaXplIiwib25DaGFuZ2UiLCJwbGFjZWhvbGRlciIsIndlZWtwbGFubmVyX3BlcnNpc3RlZF9zdGF0ZV9XZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIiwiV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSIsInVzZXJPckNvcHkiLCJsYXN0V3JpdGUiLCJ3ZWVrRGF0ZSIsIm1vbWVudF9zdl9sb2NhbGUiLCJ2YWx1ZU9mIiwib3BlbkNvdXJzZXMiLCJhc3NpZ24iLCJjb29raWUiLCJzdG9yZWREYXRhIiwiaXNFeHBpcmVkIiwibW9tZW50X2RlZmF1bHQiLCJhc09mIiwiaXNCZWZvcmUiLCJFWFBJUkFUSU9OX0hPVVJTIiwiVkVSU0lPTiIsInVzZXJUYXNrc1JlcG8iLCJ1c2VyX3Rhc2tzX3JlcG9fVXNlclRhc2tzUmVwbyIsIlVzZXJUYXNrc1JlcG8iLCJnZXRDdXJyZW50VXNlciIsImdldFF1ZXJ5T3B0aW9ucyIsInVzZXJFbWFpbCIsInBlcnNpc3RlZFN0YXRlIiwid2Vla051bWJlciIsImtlZFdlZWsiLCJ3ZWVrdXRpbCIsIm5vdEJlZm9yZSIsIm5vdEFmdGVyIiwidXBkYXRlUGVyc2lzdGVkU3RhdGUiLCJzdGF0ZUNoYW5nZXMiLCJtZW0iLCJzZXRUYXNrRG9uZVN0YXRlIiwidXNlclRhc2siLCJtb2RpZmllZEl0ZW0iLCJzaW1pbGFyVGFza3MiLCJpZGVudGljYWxUYXNrcyIsImNvdXJzZU5hbWUiLCJsZWFybmluZ0dvYWwiLCJzZXRTdWJUYXNrRG9uZVN0YXRlIiwic3ViVGFza0lkIiwic3ViVGFza3MiLCJzdCIsInNldFdlZWtQbGFubmVyQm94T3BlbiIsImlzT3BlbiIsImNoYW5nZVdlZWsiLCJrZWVwQ3VycmVudERhdGUiLCJuZXdQZXJzaXN0ZWQiLCJyZWZyZXNoRnJvbVNlcnZlciIsInByb3h5U3Vic2NyaWJlciIsInVzZXJUYXNrcyIsInV0Iiwid2Vla1RleHRzIiwia2VkYmFja2VuZF9jbGllbnQiLCJhc3Nlc3NtZW50Iiwic3RyYXRlZ3kiLCJrZWRfcmVwbyIsImVuc3VyZUhhc0RhdGEiLCJFbWl0dGVyIiwiaW5pdGlhbFZhbHVlIiwiX2Rpc3BhdGNoIiwiVmFsdWUiLCJfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX21hcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX2NvbGxlY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl9maWJlcl9jb250ZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJyZWFkIiwicmVzb2x2ZWQiLCJzdWJzY2lwdGlvbiIsImN1cnJlbnRGaWJlciIsImN1cnJlbnQiLCJwcmVmaXgiLCJ0b0NvbGxlY3Rpb24iLCJjb21iaW5lTGF0ZXN0Iiwib3RoZXIiLCJteVN1YnNjcmlwdGlvbiIsIm90aGVyU3Vic2NyaXB0aW9uIiwidmFsdWVzIiwibWFwcGVkU3Vic2NyaXB0aW9uIiwicmV0dXJuZWRTdWJzY3JpcHRpb24iLCJvYnNlcnZhYmxlT3JWYWx1ZSIsIk9ic2VydmFibGUiLCJfc3Vic2NyaWJlIiwiRm9ybUZpZWxkIiwiaHRtbEZvciIsIm5vZGUiLCJyZWN1Y2hlY2siLCJTZXQiLCJmaW5kSWQiLCJoYXMiLCJjaGlsZCIsImNoaWxkSWQiLCJfanNfZGlzdF9qc19vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJDb2xsZWN0aW9uIiwiX3ZhbHVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfZW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX21hcCIsImVtaXR0ZXJfMSIsImZsYXQiLCJtZSIsIm9yZGVyQnkiLCJncm91cEJ5IiwiZmlyc3QiLCJhcnIiLCJsaXZlUXVlcnlWaWV3IiwiTGl2ZVF1ZXJ5VmlldyIsImlzTG9hZGluZyIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0U3RhdGUiLCJfdXRpbHNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImNvbXBvbmVudERpZFVwZGF0ZSIsInByZXZQcm9wcyIsIlJlbW92ZUl0ZW0iLCJzdHlsZSIsInRlbXBsYXRlT2JqZWN0XzEiLCJLRURXZWVrIiwiZ2V0TmV4dFdlZWtEYXRlIiwiZ2V0UHJldldlZWtEYXRlIiwiZ2V0QWRqdXN0ZWRXZWVrIiwibW9tZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0IiwidG9EYXRlIiwiZ2V0VGltZSIsIm5leHREYXRlIiwid2Vla3NJblllYXIiLCJhZGp1c3RlZCIsInByZXZEYXRlIiwid2Vla2RheSIsIl9jb2xsZWN0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfZW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiUmVhY3RET00iLCJpbml0TWFwTWV0aG9kIiwiY3RvciIsInNjaG9vbF90ZXJtX1NjaG9vbFRlcm0iLCJTY2hvb2xUZXJtIiwiZGF0ZU9yU2Nob29sTW9tZW50Iiwic2Nob29sTW9tZW50Iiwic2Nob29sX21vbWVudCIsIm5leHRUZXJtIiwicHJldlRlcm0iLCJ0b0xvY2FsZVN0cmluZyIsInNob3J0WWVhciIsImZvcm1hdE1lc3NhZ2UiLCJkZWZhdWx0TWVzc2FnZSIsImRlZmF1bHRPcHRpb25zIiwiaXNBcGlNZXRob2QiLCJmIiwiY2FjaGVFeHBpcmF0aW9uIiwiZWRzY2xpZW50X0Vkc0NsaWVudCIsIkVkc0NsaWVudCIsInVzZXJFbWFpbEdldHRlciIsIm9uZ29pbmdQcm9taXNlcyIsImFyZ3NKc29uIiwic3VzcGVuc2UiLCJhcGkiLCJwcm90byIsImdldFByb3RvdHlwZU9mIiwic3VzcGVuZGlmeSIsImNhY2hlZEVudHJ5IiwicHJvbWlzZSIsInRpbWVvdXQiLCJtYWtlU3VzcGVuc2VBcGkiLCJwcml2YXRpemluZ0NhY2hlQnVzdCIsImdldEFjdGl2ZUNvdXJzZXMiLCJjb3Vyc2VDb2RlIiwiQ291cnNlQ29kZSIsInBlcmlvZE5hbWUiLCJQZXJpb2ROYW1lIiwiY291cnNlcyIsImV4XzEiLCJnZXRMYXRlc3RBc3Nlc3NtZW50cyIsImxpbWl0IiwiaXNOYU4iLCJDb3VudCIsImFzc2Vzc21lbnRzIiwiZ2V0U3R1ZGVudEdvYWxzIiwic3R1ZGVudEdvYWxzIiwiZ2V0U3R1ZGVudEZ1dHVyZUFiaWxpdGllcyIsInN0dWRlbnRGdXR1cmVBYmlsaXRpZXMiLCJnZXRUZWFjaGVyVHV0b3JTdHVkZW50cyIsInN0dWRlbnRzIiwiZ2V0U2Nob29sVHVpdGlvbkdyb3VwcyIsInNjaG9vbFR1aXRpb25Hcm91cHMiLCJnZXRUdWl0aW9uR3JvdXBTdHVkZW50cyIsInR1aXRpb25Hcm91cFN0dWRlbnRzIiwiZ2V0U2Nob29sVGVhY2hlcnMiLCJzY2hvb2xUZWFjaGVycyIsImdldEFjYWRlbWljWWVhclRlcm1zIiwic2Nob29sTG9jYWxlIiwibW9ja19lZHNfZGF0YSIsIlNvdXRoSW5kaWEiLCJpc1NhbWVPckFmdGVyIiwiZmlyc3RUZXJtIiwic3RhcnREYXRlIiwiaXNTYW1lT3JCZWZvcmUiLCJzZWNvbmRUZXJtIiwiZW5kRGF0ZSIsIk5vcnRoSW5kaWEiLCJob2xpZGF5cyIsImZpcnN0VGVybU1vbWVudCIsInNlY29uZFRlcm1Nb21lbnQiLCJzdGFydEZpcnN0VGVybURhdGUiLCJzdGFydFNlY29uZFRlcm1EYXRlIiwiZW5kRmlyc3RUZXJtRGF0ZSIsImVuZFNlY29uZFRlcm1EYXRlIiwidG9EYXRlU3RyaW5nIiwiZWRzY2xpZW50X0VEU1BlcmlvZCIsIkVEU1BlcmlvZCIsInBlcmlvZFN0cmluZ09yU2Nob29sVGVybSIsInBlcmlvZCIsInNjaG9vbFRlcm0iLCJnZXRPcmRlcmVkRG9jcyIsImRvY3MiLCJvcmRlciIsImFwcGVuZExlZnRvdmVycyIsIm1hcmtlZERvY3MiLCJsZWZ0T3ZlcnMiLCJyZXNvbHZlUmVxdWlyZW1lbnRPcmRlciIsIm9yZGVyRGVmaW5lciIsIm9yZGVyRGVmaW5pbmdEb2NPYnNlcnZhYmxlIiwia2VkYmFja2VuZF9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJjb3Vyc2VDb2RlcyIsIl9nbG9iYWxzX2RiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJvcmRlckhvbGRlcnMiLCJfdXRpbHNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIm9yZGVySG9sZGVyIiwiY2NPcmRlciIsImtyT3JkZXIiLCJvYmpDbG9uZSIsIlRleHRBcmVhRm9ybUZpZWxkIiwiY29scyIsInJvd3MiLCJGaWJlckNvbnRleHQiLCJwcm92aWRlcnMiLCJhZGRQcm92aWRlciIsImdldEN1cnJlbnRGaWJlciIsInNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzIiwicmVtb3ZlUHJvdmlkZXIiLCJzZXQiLCJnZXRTdWJqZWN0Q29kZXMiLCJnZXRTY2hvb2xZZWFycyIsImNvbXB1dGVDb3Vyc2VJbnN0YW5jZVRhZ3MiLCJjb21wdXRlVGFnc0Zyb21TY2hvb2xZZWFycyIsImNvbXB1dGVUYWdzRnJvbVN1YmplY3RDb2RlcyIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwic3ViamVjdENvZGVzIiwic2Nob29sWWVhcnMiLCJvdGhlclRhZ3MiLCJzdWJqZWN0VGFncyIsInN1YiIsImNvdXJzZVRhZ3MiLCJzY2hvb2xZZWFyIiwiX2V4ZWNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImJvbGQiLCJpY29uIiwiaXRhbGljIiwidW5kZXJsaW5lIiwic3RyaWtldGhyb3VnaCIsImhlYWRpbmcxIiwiaGVhZGluZzIiLCJoZWFkaW5nMyIsInBhcmFncmFwaCIsInF1b3RlIiwib2xpc3QiLCJ1bGlzdCIsIm91dGRlbnQiLCJpbmRlbnQiLCJsaW5lIiwicHJvbXB0IiwiaW1hZ2UiLCJwcm9tcHRNc2ciLCJjb21wb25lbnQiLCJlbGVtZW50Iiwic2VsIiwicmFuZ2UiLCJpbWciLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwidGFiSW5kZXgiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImNvbGxhcHNlIiwiaW5zZXJ0Tm9kZSIsInNldFN0YXJ0QWZ0ZXIiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsIm9uZm9jdXMiLCJvbkZvY3VzIiwib25ibHVyIiwib25CbHVyIiwiY29udGVudERpdiIsImlubmVySFRNTCIsIktlZFJlcG8iLCJfcmVwb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicmVnZW5lcmF0ZUNhY2hlQnVzdCIsInVwc2VydCIsInVwZGF0ZXIiLCJ1cGRhdGVkSXRlbSIsImluc2VydCIsIm1vZGlmaWVkSXRlbXMiLCJtZW1SZXBvSXRlbSIsIml0IiwiZnJlc2hJdGVtcyIsImZyZXNoSXRlbSIsIm1vZGlmaWVkIiwic3RyaXBHcmFwaHMiLCJncmFwaCIsInN0cmlwcGVkIiwiZm9yZWlnbkl0ZW1zIiwic3RyaXBwZWRfMSIsInN0cmlwcGVkXzFfMSIsInBhcnNlciIsIkRPTVBhcnNlciIsIkhUTUxfV0FTSF9QT0xJQ1kiLCJzdHJpa2UiLCJwcmUiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiY2xhc3MiLCJ0YWJpbmRleCIsInVsIiwib2wiLCJsaSIsImhyIiwic3BhbiIsImJvcmRlciIsInRib2R5IiwidGhlYWQiLCJ0Zm9vdCIsInRyIiwidGQiLCJjb2xzcGFuIiwicm93c3BhbiIsInRoIiwiYWJiciIsInNjb3BlIiwic29ydGVkIiwid2FzaEh0bWwiLCJodG1sIiwicGFyc2VGcm9tU3RyaW5nIiwiY2hpbGROb2RlcyIsIndhc2hOb2RlIiwidGFnTmFtZSIsImlzRWxlbWVudCIsInBvbGljeSIsIndhc2hDaGlsZE5vZGVzIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsInJlbW92ZSIsInJlbW92ZU1pZGRsZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwiYXR0ciIsImFsbG93ZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ3YXNoRWxlbWVudCIsImNsYXNzZXMiLCJ3eXNpd3lnX1d5c2l3eWciLCJXeXNpd3lnIiwiZm9jdXNSZWN0Iiwib25Nb3VzZURvd24iLCJvbk1vdXNlTW92ZSIsIm9uTW91c2VVcCIsInJlYWRPbmx5IiwicXVlcnlTZWxlY3RvckFsbCIsImVsZW0iLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlcG9ydE51bUNoYXJzIiwiaW5uZXJUZXh0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRyaWdnZXJPbkNoYW5nZSIsIm5ld1N0YXRlIiwiZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QiLCJwYXJlbnRFbGVtZW50IiwiZm9jdXNFbGVtIiwicmVsYXRlZFRhcmdldCIsImZvY3VzUmVjdERpdiIsIm1ha2VDbGlja2FibGUiLCJjb3JuZXIiLCJnZXRSZWN0Q29ybmVyIiwicmVzaXplU3RhcnRYIiwiY2xpZW50WCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwibmV3V2lkdGgiLCJlbmRzV2l0aCIsImZhY3RvciIsIm5ld0hlaWdodCIsImhlaWdodCIsImV4ZWNJbWFnZUVkaXRBY3Rpb24iLCJjbWQiLCJjc3NGbG9hdCIsImNiIiwiZGVmYXVsdEFjdGlvbnMiLCJhY3Rpb25zIiwiYWN0aW9uc1RvVXNlIiwiYWN0aW9uIiwibWF4Q2hhcnMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImZvY3VzIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwicmVmIiwiY29udGVudEVkaXRhYmxlIiwib25QYXN0ZSIsImN1cnJlbnRUYXJnZXQiLCJlZGl0b3JUZXh0IiwidGV4dEJlaW5nUGFzdGVkIiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJvbktleVVwIiwib25LZXlQcmVzcyIsIm9uSW5wdXQiLCJvbktleURvd24iLCJ3aGljaCIsInNoaWZ0S2V5Iiwia2V5Q29kZSIsInJlbW92ZUNoaWxkIiwib3V0bGluZSIsImJvdHRvbSIsInBhcmVudCIsInBhcmVudFJlY3QiLCJjaGlsZFJlY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzIiwidW5jb3ZlcmVkUmVxdWlyZW1lbnRzIiwia3IiLCJnZXRJZHNOb3RDb3ZlcmVkQnlUYXNrcyIsImdldElkc05vdENvdmVyZWRCeVJlcVJlZmVyZW5jaW5nRG9jcyIsInRlbXBsYXRlcyIsImRvY3NCZWluZ0NoZWNrZWQiLCJ1bmNvdmVyZWRJZHMiLCJzYW5pdHlDaGVjayIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwidGFza0lkIiwiaGFzRHVwbGljYXRlVGFza3MiLCJ0YXNrVXJscyIsInRlbXBsYXRlT2JqZWN0XzIiLCJ0YXNrc1dpdGhTYW1lVXJsIiwidGVtcGxhdGVPYmplY3RfMyIsImhhc0VtcHR5TW9kdWxlTmFtZXMiLCJtb2R1bGVOYW1lcyIsInRlbXBsYXRlT2JqZWN0XzQiLCJoYXNEdXBsaWNhdGVNb2R1bGVOYW1lcyIsImdldFRhc2tzUGVySWQiLCJmdXR1cmVBYmlsaXRpZXMiLCJmYSIsImdldFNvZnRBY2Nlc3NMaXN0IiwiZGEiLCJfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImFjY2VzcyIsIkZlYXR1cmVzIiwiX2luaXRpYWxpemVkIiwiZmVhdHVyZU5hbWUiLCJ0aGlzXzEiLCJpbml0IiwiX2ZlYXR1cmVzIiwiX2ZlYXR1cmVfZmxhZ3NfanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwidHVybmVkT25GZWF0dXJlcyIsIl9nbG9iYWxzX0tFRF9jZmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIktFRF9GRUFUVVJFUyIsIl91dGlsc19xdWVyeV9zdHJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInRlc3R2ZXJzaW9uIiwiZmVhdHVyZXMiLCJmZWF0dXJlIiwidHVybk9uQWxsIiwic2V0dXBJbnRsIiwiQ29tcG9uZW50IiwiX1NldHVwTGFuZ3VhZ2VJbnRsIiwicmVhY3RfaW50bF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicmVhY3RfaW50bF9sb2NhbGVfZGF0YV9lbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJyZWFjdF9pbnRsX2xvY2FsZV9kYXRhX3N2X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19fZGVmYXVsdCIsIm1lc3NhZ2VzIiwic3YiLCJfdHJhbnNsYXRpb25zX3N2X2pzb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsImVuIiwiX3RyYW5zbGF0aW9uc19lbl9qc29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX19kZWZhdWx0IiwibG9jYWxlIiwiX2dsb2JhbHNfS0VEX2NmZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiS0VEX0xPQ0FMRSIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJXZWJDbGllbnRJZCIsIlRlbXBsYXRlc0ZpbGVJZCIsImdldFRhc2tUeXBlIiwic2l0ZVZpc2lvblBhZ2VJZCIsImNvdXJzZUluZm8iLCJ1c2VyX3Rhc2tzX2JveF9Vc2VyVGFza3NCb3giLCJVc2VyVGFza3NCb3giLCJsZWFybmluZ0dvYWxzIiwic3JjX2ZlYXR1cmVzIiwiY29udGV4dCIsIm9wZW5fY2xvc2VfYm94IiwiaW5kZXhfZXMiLCJjb3Vyc2VfbmFtZV90b19jc3NfY2xhc3MiLCJiZWNhbWVPcGVuIiwic2V0SXNPcGVuIiwibGciLCJzdGVwIiwicmVtb3ZlTGVhcm5pbmdHb2FsIiwiaXNXb3JraW5nIiwidGFza1R5cGUiLCJleHBpcmVkIiwiZGVhZGxpbmUiLCJvcGFjaXR5Iiwic2V0VGFza0RvbmUiLCJnZXRUYXNrVXJsIiwidmlld0NvdXJzZVVybCIsImdldFN1YmplY3RQbGFubmVyVGFza1VybCIsImhvc3QiLCJlZGl0VGFzayIsInN1YlRhc2siLCJzZXRTdWJUYXNrRG9uZSIsImVkaXRTdWJUYXNrIiwiYWRkT3duVGFzayIsImNvbnRleHRUeXBlIiwiYWNjZXNzX2NvbnRyb2wiLCJ0YWIiLCJLRURfU1VCSkVDVF9QTEFOTkVSX1VSTCIsImFkZF9jdXN0b21fZ29hbF9BZGRDdXN0b21Hb2FsIiwiQWRkQ3VzdG9tR29hbCIsIm9uU2F2ZSIsImFkZF9jdXN0b21fdGFza19BZGRDdXN0b21UYXNrIiwiQWRkQ3VzdG9tVGFzayIsImRlc2NyaXB0aW9uIiwiaXNUYXNrIiwiZm9ybV9maWVsZF90ZXh0X2lucHV0IiwiZm9ybV9maWVsZF90ZXh0YXJlYSIsImFkZF9vcl9lZGl0X3N1Yl90YXNrX0FkZE9yRWRpdFN1YlRhc2siLCJBZGRPckVkaXRTdWJUYXNrIiwiY2xvc2VEaWFsb2ciLCJuZXdTdWJUYXNrXzEiLCJpc0VkaXRNb2RlIiwiZWRpdF91c2VyX3Rhc2tfRWRpdFVzZXJUYXNrIiwiRWRpdFVzZXJUYXNrIiwib25Vc2VyVGFza3NDaGFuZ2VkIiwibXlVc2VyVGFzayIsImlzTW9kaWZpZWQiLCJhZGRTdWJUYXNrIiwib3BlbkRpYWxvZyIsInNob3dDYWxlbmRhciIsIm9uVXBkYXRlIiwib25EZWxldGUiLCJpc0N1c3RvbVRhc2siLCJmb3JtX2ZpZWxkIiwiZXMiLCJkYXRlUGlja2VyIiwibmV4dE1vbnRoQnV0dG9uTGFiZWwiLCJwcmV2aW91c01vbnRoQnV0dG9uTGFiZWwiLCJzaG93V2Vla051bWJlcnMiLCJzZWxlY3RlZCIsImRhdGVGb3JtYXQiLCJwb3BwZXJQbGFjZW1lbnQiLCJzZXRPcGVuIiwicHJvZ3Jlc3NfUHJvZ3Jlc3MiLCJQcm9ncmVzcyIsInBlcmNlbnRhZ2UiLCJyb3VuZGVkUGVyY2VudGFnZSIsInJvdW5kIiwicngiLCJ0ZXh0QW5jaG9yIiwieSIsImR5Iiwid2Vla3BsYW5uZXJfV2Vla1BsYW5uZXIiLCJXZWVrUGxhbm5lciIsImRpYWxvZ3MiLCJzYXZpbmciLCJ3ZWVrVGV4dHNVVCIsImlzQ29weWluZ1Rhc2tzIiwid2Vla1RleHRzU2F2aW5nSm9iIiwicGVuZGluZ19qb2IiLCJzYXZlV2Vla1RleHRzIiwic3RvcCIsInBlcnNpc3RlZCIsImlzV2Vla1RleHRzRWRpdGVkIiwicHJldldlZWsiLCJwcmV2V2Vla09iaiIsIm5leHRXZWVrIiwibmV4dFdlZWtPYmoiLCJkaWFsb2ciLCJvcGVuQWRkR29hbERpYWxvZyIsImFkZEN1c3RvbUdvYWwiLCJvcGVuQWRkT3duVGFza0RpYWxvZyIsImxlYXJuaW5nR29hbE5hbWUiLCJhZGRDdXN0b21UYXNrIiwibGF0ZXN0VGltZVN0YW1wIiwiY29uZmlybSIsImxlYXJuaW5nR29hbHNOdW1iZXIiLCJhbGxUYXNrcyIsImNvcHlGcm9tUHJldmlvdXNXZWVrIiwidXNlclRhc2tzXzEiLCJwcmV2V2Vla05vIiwicHJldktFRFdlZWsiLCJwcmV2VGFza3MiLCJwcmV2VGFzayIsInRhc2tPZkN1cnJlbnRXZWVrIiwibGF0ZXN0VGltZVN0YW1wXzEiLCJjb3BpZXMiLCJnZXRIZWFkZXJUaXRsZSIsInNob3dQcm9ncmVzc0NoYXJ0cyIsIndlZWtwbGFubmVyQ2hhcnRzIiwiY3VycmVudFdlZWsiLCJ0YXNrU2V0cyIsInRhc2tzUGVyQ291cnNlIiwidGFza3NQZXJMZWFybmluZ0dvYWwiLCJyZXN1bHRMZWFybmluZ0dvYWxzIiwiX2YiLCJsZ1Rhc2tzIiwibGVhcm5pbmdHb2FsVGFzayIsInJlZmluZSIsImlzU2F2aW5nIiwiaXNTdHJhdGVneUVkaXRlZCIsImlzQXNzZXNzbWVudEVkaXRlZCIsImVuYWJsZVNhdmVCdXR0b24iLCJjaGFydFRhc2tzIiwiY29tcGxldGVkVGFza3MiLCJ0b3RhbE51bWJlck9mVGFza3MiLCJzdWJqZWN0RGF0YSIsInN1YmplY3RDb21wbGV0ZWRUYXNrcyIsImNvdXJzZVN1YmplY3REYXRhIiwiZ2V0V2Vla3BsYW5uZXJQcm9ncmVzc0RhdGEiLCJjdHJsS2V5IiwidHJpZ2dlckNoYW5nZSIsImRpc2FibGVkIiwidHV0b3JlZCIsInV0aWxpdHlfY29tcG9uZW50c19kaWFsb2dzIiwicG9wRGlhbG9nIiwiRGlhbG9ncyIsImxhc3REaXYiLCJyZWFjdF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsImNzcyIsImFyaWEtZGlzYWJsZWQiLCJjbGljayIsIm1ldGFLZXkiLCJkb21Ob2RlIiwiX2NvdXJzZV9idWlsZGVyX3N1Yl9jb21wb25lbnRzX3JlbW92ZV9pdGVtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJHb29nbGVEcml2ZSIsImdldEZpbGUiLCJmaWxlSWQiLCJlbnN1cmVJbml0ZWQiLCJnYXBpIiwiZHJpdmUiLCJmaWxlcyIsInN1cHBvcnRzQWxsRHJpdmVzIiwiZmllbGRzIiwicmVzcCIsImZpbGUiLCJ3ZWJWaWV3TGluayIsIm1pbWVUeXBlIiwibW9kaWlmaWVkVGltZSIsIm1vZGlmaWVkVGltZSIsImljb25VcmwiLCJpY29uTGluayIsInRodW1ibmFpbFVybCIsInRodW1ibmFpbExpbmsiLCJ1cGRhdGVQZXJtaXNzaW9ucyIsInBlcm1pc3Npb25zIiwic2VuZE5vdGlmaWNhdGlvbkVtYWlsIiwiY3JlYXRlRm9sZGVyIiwicGFyZW50cyIsImdldElkRm9yRm9sZGVyUGF0aCIsInBhdGhfMSIsInBhdGhfMV8xIiwiZm9sZGVyIiwiZ2V0SWRGb3JGb2xkZXIiLCJmb2xkZXJJZCIsIm5ld0ZvbGRlciIsImNvcnBvcmEiLCJjb3B5RmlsZSIsImRlc3RpbmF0aW9uIiwiZG93bmxvYWRGaWxlIiwibGltaXRTaXplIiwiY2FuRXhwb3J0IiwiZXhwb3J0IiwiQXJyYXlCdWZmZXIiLCJCbG9iIiwiZmlsZW5hbWUiLCJGaWxlIiwibGFzdE1vZGlmaWVkIiwieGhyRG93bmxvYWRfMSIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZSIsInNlbmQiLCJOdW1iZXIiLCJDb25maXJtYXRpb24iLCJ2aXNpYmxlIiwib25Db25maXJtIiwib25DYW5jZWwiLCJ0YXNrX2xpc3RfVGFza0xpc3QiLCJUYXNrTGlzdCIsImNvbmZpcm1hdGlvbnMiLCJ1c2VyX3Rhc2tzX3JlcG8iLCJ0b2dnbGVUYXNrIiwibGVhcm5pbmdUYXNrIiwibGVhcm5pbmdUYXNrcyIsIndlZWtQbGFubmVyV2VlayIsImZvcldlZWtTdHJpbmciLCJ0YXNrTG9va3VwSWQiLCJkZXNjcmliZWRBY3Rpb24iLCJjb25maXJtYXRpb25WaXNpYmxlIiwidGlkIiwiU2VsZWN0UmVsYXRlZERvY3MiLCJtYXJrZWRJZHMiLCJtYXJrTW9kZSIsIm1pZ3JhdGVkSWRzIiwiZ3JvdXBlZE9wdGlvbnMiLCJncm91cCIsImdyb3VwcyIsIl91dGlsaXR5X2NvbXBvbmVudHNfb3Blbl9jbG9zZV9ib3hfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIm9wdGlvbiIsImlzTWFya2VkIiwiaXNNaWdyYXRlZCIsImlzVW5jb3ZlcmVkIiwib25NYXJrQ2hhbmdlZCIsIlR3b0NvbHVtbnNQYWdlIiwicmlnaHRXaWR0aCIsImlzRW1wbG95ZWUiLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfYWNjZXNzX2NvbnRyb2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImF0U2Nob29sIiwidXNlcnMiLCJzY2hvb2xUeXBlIiwic2Nob29sR3JhZGUiLCJsb2NhbE1vbWVudCIsIl9nbG9iYWxzX0tFRF9jZmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInVwZGF0ZUxvY2FsZSIsIm1vbnRocyIsIm1vbnRoc1Nob3J0Iiwid2Vla2RheXMiLCJ3ZWVrZGF5c1Nob3J0Iiwid2Vla2RheXNNaW4iLCJsb25nRGF0ZUZvcm1hdCIsIkxUIiwiTFRTIiwiTEwiLCJMTEwiLCJMTExMIiwibGxsIiwibGxsbCIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaCIsImhoIiwiZGQiLCJNIiwiTU0iLCJ5eSIsImRheU9mTW9udGhPcmRpbmFsUGFyc2UiLCJvcmRpbmFsIiwibnVtYmVyIiwiZG93IiwiZG95IiwiRXJyb3JTdWNjZXNzRmVlZGJhY2siLCJlcnJvcnMiLCJpbmZvcyIsIl91bmhhbmRsZWRSZWplY3Rpb24iLCJfZXJyb3IiLCJfY3VzdG9tRXJyb3IiLCJfb25JbmZvIiwiX2RiV3JpdGVyRXJyb3IiLCJfZGJXcml0ZXJTdGF0ZUNoYW5nZWQiLCJfYWRkRXJyb3IiLCJkZXRhaWxzIiwiX2FkZEluZm8iLCJpbmZvIiwiZGJXcml0ZXJJc0VkaXRlZCIsImRiV3JpdGVySXNTYXZpbmciLCJyZWFzb24iLCJwb2ludGVyRXZlbnRzIiwiZGlzcGxheSIsIm1hcmdpbiIsInNob3dEZXRhaWxzIiwiZmxvYXQiLCJfY29tcG9uZW50c19jb3Vyc2VfYnVpbGRlcl9zdWJfY29tcG9uZW50c19yZW1vdmVfaXRlbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicmVtb3ZlRXJyb3IiLCJ0b2dnbGVEZXRhaWxzIiwiUmVwbyIsImNvbW0iLCJsaXN0UHJvbWlzZSIsInVwZGF0ZWRJdGVtcyIsIkdvb2dsZUNsaWVudCIsImRpc2NvdmVyeURvY3MiLCJnb29nbGVUb2tlblByb3ZpZGVyIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwic2V0QmVhcmVyUHJvdmlkZXIiLCJsb2FkR2FwaSIsInRva2VuRXhwaXJhdGlvbiIsInRva2VuUmVzdWx0Iiwic2V0VG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJzY3JpcHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwiZ2FhcGlfbG9hZGVkIiwibWltZVR5cGVDb2xsZWN0aW9ucyIsImdvb2dsZS1hcHBzIiwicGRmIiwiR29vZ2xlUGlja2VyIiwidXBsb2FkIiwibXVsdGlwbGUiLCJsaW1pdFR5cGUiLCJfZ29vZ2xlX2RyaXZlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJzaG93IiwicGlja2VyYnVpbGRlciIsImdvb2dsZSIsInBpY2tlciIsIlBpY2tlckJ1aWxkZXIiLCJlbmFibGVGZWF0dXJlIiwiRmVhdHVyZSIsIlNVUFBPUlRfRFJJVkVTIiwiU1VQUE9SVF9URUFNX0RSSVZFUyIsImFkZFZpZXciLCJEb2NzVmlldyIsInNldE93bmVkQnlNZSIsInNldEluY2x1ZGVGb2xkZXJzIiwic2V0RW5hYmxlVGVhbURyaXZlcyIsInNldExvY2FsZSIsInNldFNpemUiLCJzZXRPQXV0aFRva2VuIiwiYXV0aFRva2VuIiwic2V0Q2FsbGJhY2siLCJBY3Rpb24iLCJDQU5DRUwiLCJQSUNLRUQiLCJzZWxlY3RlZF8xIiwiRG9jc1VwbG9hZFZpZXciLCJNVUxUSVNFTEVDVF9FTkFCTEVEIiwibWltZVR5cGVzIiwic2V0U2VsZWN0YWJsZU1pbWVUeXBlcyIsImJ1aWxkIiwic2V0VmlzaWJsZSIsIl9nb29nbGVfd2ViY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJjb3Vyc2VOYW1lVG9Dc3NDbGFzcyIsImNzc1ByZWZpeCIsIlBlbmRpbmdKb2IiLCJ0aW1lb3V0SWQiLCJjYW5jZWxsZWQiLCJwZW5kaW5nIiwiaXNKb2JFeGVjdXRpbmciLCJqb2JDYWxsYmFjayIsInRocm90dGxlIiwibGF1bmNoSm9iIiwiR29vZ2xlV2ViQ2xpZW50Iiwic2NvcGVzIiwiU0NPUEVTIiwicmVhdXRob3JpemUiLCJhdXRoMiIsImF1dGhvcml6ZSIsImNsaWVudF9pZCIsIl9jb25maWdzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJyZXNwb25zZV90eXBlIiwibG9naW5faGludCIsInNjb3Blc2V0XzEiLCJleHBpcmVzX2luIiwiRHJpdmVCdXR0b24iLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJJY29uRHJpdmUiLCJ4bWxucyIsInhtbG5zWGxpbmsiLCJ2aWV3Qm94IiwidmVydGljYWxBbGlnbiIsIm1hcmdpblJpZ2h0IiwicG9pbnRzIiwiZ2V0UmVxdWlybWVudFNlbnRlbmNlcyIsInJlcXVpcmVtZW50IiwiZ2V0U2F2ZWRTZW50ZW5jZXMiLCJwYXJ0aWFsUmVxdWlybWVudHMiLCJhbGxSZXF1aXJlbWVudFNlbnRlY2VzTWFya2VkIiwicmVxdWlyZW1lbnROYW1lIiwicGFydGlhbFJlcXVpcmVtZW50cyIsInRleHRTZW50ZW5jZXMiLCJnZXRQYXJ0aWFsQ29udGVudERlZmF1bHRWaWV3IiwiYWxyZWFkeUNvdmVyZWRQYXJ0aWFsUmVxdWlybWVudHMiLCJza2lwTm90TWFya2VkIiwicmVzdWx0ZWRIdG1sIiwicm93UmVxdWlybWVudHMiLCJhbGxSZXFDb3ZlcmVkU2VudGVuY2UiLCJnZXRDb3ZlcmVkU2VudGVjZXMiLCJhbGxSZXFTZW50ZW5jZXNNYXJrZWQiLCJzZW50ZW5jZSIsInRyaW1tZWRTZW50ZW5jZSIsImZ1bGxTZW50ZW5jZSIsImFsbFJlcSIsInJlcXVpcmVtZW50SWQiLCJyZXN1bHRBcnJheSIsImFzc2lnbmVkUmVxIiwicmVxSWQiLCJrIiwiZ2V0U29ydGVkUmVxdWlybWVudHMiLCJvdXRwdXQiLCJpbmQiLCJnZXRNaWdyYXRpb25UaXRsZSIsImtub3dsZWRnZV9tYXRyaXhfS25vd2xlZGdlTWF0cml4IiwiS25vd2xlZGdlTWF0cml4IiwiZ2V0S25vd2xlZGdlU2VudGVuY2VzQ29udGVudCIsImluZGV4IiwibWFya2VkT2siLCJjb3ZlcmVkUGFydGlhbFJlcXVpcm1lbnRzIiwiYWxsQ292ZXJlZFNlbnRlbmNlUmVxIiwiaGFzVmFsdWUiLCJzZW50ZW5jZU5vdE1hcmtlZCIsInVwZGF0ZWRSZXF1aXJtZW50cyIsInNob3VsZEJlUmVtb3ZlZCIsIm9uVXBkYXRlUGFydGlhbEtub3dsZWRnZSIsIm9uUmVxdWlyZW1lbnRDaGFuZ2VkIiwicGFydGlhbFZhbHVlcyIsImFsbFBhcnRpYWxNYXJrZWQiLCJleHBsYWluZWRSZXF1aXJlbWVudHMiLCJtYXJrQnlTZW50ZW5jZVZpZXciLCJtYXJrUGFydGlhbEZlYXR1cmVFbmFibGVkIiwiaWRzVG9NYXJrTm90T2siLCJvbkV4cGxhaW5lZFJlcXVpcmVtZW50c0NoYW5nZWQiLCJjb2x1bW5zIiwicm93IiwiZ3JhZGUiLCJwTmV4dCIsImdyYWRlU3RlcCIsInRvVXBwZXJDYXNlIiwiaXNNYXJrZWRPSyIsInJvd1BhcnRpYWxSZXF1aXJlbWVudHMiLCJoYXNQYXJ0aWFsQ292ZXJlZCIsImlzUGFydGlhbENvdmVyZWRSZXF1aXJtZW50IiwibWFya2VkUmVkIiwicGFydGlhbFNlbnRlbmNlcyIsInByb2Nlc3MiLCJfZ2xvYmFsc19LRURfY2ZnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJFTlZJUk9OTUVOVCIsIktFRF9BUElfVVJMIiwiRURTX0FQSV9VUkwiLCJLRURfVE9LRU5fVVJMIiwiS0VEX0NMSUVOVF9JRCIsIktFRF9DTElFTlRfU0VDUkVUIiwiS0VEX1NDSE9PTF9MT0NBTEUiLCJLRURfUkVTT1VSQ0VTX1VSTCIsImdldE1lcmdlZFRva2VuUGF0aCIsImltcGVyc29uYXRpb25Qcm9wcyIsInRva2VuUGF0aFdpdGhvdXRRdWVyeSIsInRva2VuUXVlcnlTdHJpbmciLCJ0b2tlblBhdGhRdWVyeSIsImdldFRva2VuSWQiLCJtZXJnZWRUb2tlblBhdGgiLCJjcmVhdGVUZXN0VG9rZW5Qcm92aWRlciIsImNsaWVudHdlYiIsImluaXRpYWxVc2VyRW1haWwiLCJLRURfVE9LRU5fUEFUSCIsInNldF9iZWFyZXJfcHJvdmlkZXJzX21lcmdlZFRva2VuUGF0aCIsInJlc3BvbnNlVGV4dCIsIm9rIiwic2F2ZVVzZXJJbmZvIiwic3RvcmVkU2Vzc2lvblVzZXIiLCJsb2FkVXNlckluZm8iLCJnb29nbGVNZXJnZWRQYXRoIiwiY3JlYXRlR29vZ2xlVG9rZW5Qcm92aWRlciIsImVkc0NsaWVudCIsImVkc2NsaWVudCIsIkxhenlCYW5uZXIiLCJkcmFnU3RhdGUiLCJrZWRiYWNrZW5kX29ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInRhYkJlaW5nRHJhZ2dlZCIsInRhYkJlaW5nSG92ZXJlZCIsIm9yaWdpbkNsaWVudFgiLCJsYXp5UHJvcHMiLCJvdmVyZmxvdyIsIl91dGlsaXR5X2NvbXBvbmVudHNfbGF6eV9jb250ZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJiYWNrZ3JvdW5kSW1hZ2UiLCJjb3JuZXJCb3giLCJfY291cnNlX2J1aWxkZXJfc3ViX2NvbXBvbmVudHNfZWxsaXBzaXNfbG9hZGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJ0YWJzIiwiYnV0dG9ucyIsImFjdGl2ZVRhYiIsImJsb2NrcyIsInNvcnRhYmxlVGFicyIsIm9uVGFiRHJvcCIsImJsb2NrIiwic3RlcHMiLCJzdGVwTm8iLCJyZWFjdF9yb3V0ZXJfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJpc0FjdGl2ZSIsIm9uRHJvcCIsImRyYWdnYWJsZSIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwib25EcmFnT3ZlciIsIm9uRHJhZ1N0YXJ0IiwiZWZmZWN0QWxsb3dlZCIsIm9uRHJhZ0VuZCIsIl9hY2Nlc3NfY29udHJvbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiYnRuIiwiQmFubmVyIiwiRWxsaXBzaXNMb2FkZXIiLCJwYWRkaW5nIiwiQWJpbGl0aWVzQm94Iiwic3ViVGl0bGUiLCJDZW50cmFsQ29udGVudEJveCIsIktub3dsZWRnZVJlcXVpcmVtZW50c0JveCIsImlkc1RvU3ViamVjdE1hcCIsInJlcXVpcmVtZW50cyIsIktub3dsZWRnZVJlcXVpcmVtZW50c1RhYmxlIiwicmVxdWlyZW1lbnRzUGVyU3ViamVjdExvb2t1cCIsIiIsInJlcXNQZXJTdWJqZWN0Iiwic3ViamVjdCIsImhlYWRpbmciLCJpbmNsdWRlZElkcyIsImNvbHVtbiIsImNvbHVtblBhcnRpYWxSZXEiLCJDaGVja2xpc3QiLCJhdmFpbGFibGUiLCJjaGVja2VkIiwiZ2V0U29ydGVkVGFza3MiLCJjb21wdXRlVXBkYXRlZE9yZGVyIiwiX29yZGVyZWRfcmVxdWlyZW1lbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJjb250ZW50IiwidGFza09yZGVyIiwiY3VycmVudE9yZGVyIiwic291cmNlIiwicGxhY2VtZW50Iiwib3JkZXJlZElkcyIsInBsYWNlQmVmb3JlIiwicHVibGlzaENvdXJzZSIsImRyYWZ0UmVwbyIsImRlc3RpbmF0aW9uUmVwbyIsIl9nbG9iYWxzX2RiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJzY2hvb2xCcmFuY2hJZCIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIlNvcnRhYmxlVGFza0xpc3QiLCJ0YXNrTWV0YXMiLCJyZW5kZXJFZGl0TGluayIsInJlbmRlckxpbmsiLCJvblNvcnQiLCJzZXREcmFnU3RhdGUiLCJ0YXNrQmVpbmdEcmFnZ2VkIiwidGFza0JlaW5nSG92ZXJlZCIsIm9yaWdpbkNsaWVudFkiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJ0YXNrTWV0YSIsImlzVGFza093bmVyIiwiaGFzTWlncmF0ZWRUZXh0cyIsIm1pZ3JhdGVkVGV4dHMiLCJ0YXNrSGFzTWlncmF0ZWRUZXh0cyIsIkZyYWdtZW50IiwiY2xpZW50WSIsImNvbG9yIiwiRWRpdFJlc291cmNlIiwidmFsaWRfdXJsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19fZGVmYXVsdCIsImlzVXJpIiwiaXNWYWxpZFVybCIsIl91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiQ2hvb3NlVXNlciIsIl9kYXRhX3VzZXJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJmb250U3R5bGUiLCJsaXN0Q291cnNlSW5zdGFuY2VzIiwiX2dsb2JhbHNfZGJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImdldENvdXJzZUNvZGVzRnJvbVRhZ3MiLCJjb3Vyc2VUYWciLCJnZXRTdGFuZGFyZENvdXJzZXNXaXRoT3JkZXJlZFJlcXVpcmVtZW50cyIsImNvdXJzZUNvZGVUYWdzIiwiaXNUZW1wbGF0ZSIsIl9vcmRlcmVkX3JlcXVpcmVtZW50c19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiTG9hZGluZ0luZGljYXRvciIsIl9saXZlX3F1ZXJ5X3ZpZXdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsImtlZEJhY2tlbmRTdGF0dXMiLCJlZHNTdGF0dXMiLCJfY291cnNlX2J1aWxkZXJfc3ViX2NvbXBvbmVudHNfc3Bpbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiVGFza01pZ3JhdGlvbkJveCIsInVwZGF0ZUxpbmsiLCJrcnMiLCJrckEiLCJrckMiLCJrckUiLCJhYnMiLCJ0YWJsZXNUb1Nob3ciLCJib3hJbmZvIiwib2xkVGV4dCIsIkhFQVJUQkVBVF9JTlRFUlZBTCIsIkhFQVJUQkVBVF9VUkwiLCJfZ2xvYmFsc19LRURfY2ZnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJLRURfS0VFUF9BTElWRV9VUkwiLCJsYXN0QWN0aXZpdHkiLCJrZWVwU2Vzc2lvbkFsaXZlIiwic2V0SW50ZXJ2YWwiLCJvblRpbWVvdXQiLCJqcXVlcnlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwibW91c2Vtb3ZlIiwib25Vc2VyQWN0aXZlIiwia2V5cHJlc3MiLCJzY3JvbGwiLCJlcnJfMSIsImhlYXJ0YmVhdCIsImdldFVya3VuZFN0YXR1c0NsYXNzIiwiU3RhdHVzIiwiU3RhdGUiLCJnZXRVcmt1bmRIb3ZlclRleHQiLCJFeHRlcm5hbElkIiwiRXJyb3JDb2RlIiwiTWVzc2FnZSIsImdldFVya3VuZFNpZ25pZmljYW5jZUNsYXNzIiwicmVwb3J0IiwiUmVwb3J0IiwiU2lnbmlmaWNhbmNlIiwiQUxMT1dFRF9FWFRFTlNJT05TIiwiVVJLVU5EX0VYVEVOU0lPTlMiLCJ0YXNrX2Fzc2lnbm1lbnRzX1Rhc2tBc3NpZ25tZW50cyIsIlRhc2tBc3NpZ25tZW50cyIsImFzc2lnbm1lbnRzIiwibG9hZGluZyIsInNldFN0YXRlUHJvbWlzZWQiLCJhc3NpZ25tZW50IiwicmVmcmVzaEFzc2lnbm1lbnQiLCJpc1JlZnJlc2hpbmciLCJyZXNKc29uXzEiLCJtZXRhZGF0YSIsInVya3VuZFJlc3BvbnNlIiwicmVmcmVzaEVycm9yIiwiZV8xIiwidGVhY2hlckF0U2Nob29sIiwicmVmcmVzaGFibGVBc3NpZ21lbnRzIiwidXJrdW5kVXBsb2FkRXJyb3IiLCJ1cmt1bmRMYXN0UG9sbCIsInJlZnJlc2hhYmxlQXNzaWdtZW50c18xIiwicmVmcmVzaGFibGVBc3NpZ21lbnRzXzFfMSIsIm9uRHJhZyIsInZlcmlmeUFuZFVwbG9hZCIsImRyaXZlRmlsZSIsInVwbG9hZGluZ0ZpbGUiLCJlcnJvcl8yIiwic2VuZFRvVXJrdW5kIiwicmV2ZXJzZSIsIk1BWF9VUktVTkRfRklMRV9TSVpFX01CIiwiTUFYX05PTlVSS1VORF9GSUxFX1NJWkVfTUIiLCJsb3dlckZpbGVuYW1lIiwiZXh0IiwiRm9ybURhdGEiLCJhcHBlbmQiLCJxdWVyeVBhcmFtcyIsInZlcmlmeVdpdGhVcmt1bmQiLCJkcml2ZUZpbGVJZCIsImRyaXZlRmlsZVVybCIsImRyaXZlRmlsZUljb25VcmwiLCJkb3dubG9hZCIsIm1lZGlhTGluayIsImRvd25sb2FkX2RlZmF1bHQiLCJjb250ZW50VHlwZSIsImVycl8yIiwiZXJyXzMiLCJ0ZWFjaGVyQXRUaGlzU2Nob29sIiwic2hvd0dvb2dsZVBpY2tlciIsInZpcnR1YWxGaWxlXzEiLCJ1cGxvYWREYXRlIiwiaGFzT3duRG9jcyIsInNlbnNpdGl2aXR5IiwiRHJpdmVGaWxlTGlzdGluZyIsImNvbFNwYW4iLCJ1cmt1bmRSZXNwb25zZXMiLCJ1cmt1bmRFeHRlcm5hbElkIiwiUmVwb3J0VXJsIiwidG9GaXhlZCIsImlzX2VtcGxveWVlIiwiZ29vZ2xlX3BpY2tlciIsImdvb2dsZV9kcml2ZSIsInBpY2tlZEZpbGUiLCJsYXN0SW5kZXhPZiIsIi4vZW4tU0ciLCIuL2VuLVNHLmpzIiwiLi9lbi1hdSIsIi4vZW4tYXUuanMiLCIuL2VuLWNhIiwiLi9lbi1jYS5qcyIsIi4vZW4tZ2IiLCIuL2VuLWdiLmpzIiwiLi9lbi1pZSIsIi4vZW4taWUuanMiLCIuL2VuLWlsIiwiLi9lbi1pbC5qcyIsIi4vZW4tbnoiLCIuL2VuLW56LmpzIiwiLi9zdiIsIi4vc3YuanMiLCJ3ZWJwYWNrQ29udGV4dCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl91dGlsc19xdWVyeV9zdHJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImluY2x1ZGVDU1MiLCJjc3NGaWxlIiwidXJpIiwicExhc3RTbGFzaCIsIndyaXRlIiwicHJvdG9jb2wiLCJwYXRobmFtZSIsImluY2x1ZGVPcHRpb25hbENTUyIsInYxIiwidmVyc2lvbkZvbGRlciIsIk5PQ1NTIiwiY3NzVmVyIiwidmVyIiwiaXNLZWRTdGFmZiIsImFkZF90YWJfYnV0dG9uX0FkZFRhYkJ1dHRvbiIsIkFkZFRhYkJ1dHRvbiIsImVkaXRpbmdOYW1lIiwiY3JlYXRlVGFiIiwidGFiTmFtZSIsImRyYWZ0SWQiLCJoaXN0b3J5IiwidGFiVGVtcGxhdGUiLCJ0YWJUaXRsZSIsImxvY2tlZCIsIm5ld1RhYiIsInRhYkNsYXNzIiwiQWRkVGFiQnV0dG9uV2l0aFJvdXRlciIsIndpdGhSb3V0ZXIiLCJDT05URU5UX1RZUEVTIiwicmljaC10ZXh0IiwiYWRkX2NvbnRlbnRfYnV0dG9uX3RlbXBsYXRlT2JqZWN0XzEiLCJ5b3V0dWJlLW1vdmllIiwiYWRkX2NvbnRlbnRfYnV0dG9uX3RlbXBsYXRlT2JqZWN0XzIiLCJsZWFybmluZy1nb2FscyIsInJlc291cmNlLWxpc3QiLCJlbWJlZGRlZC1odG1sIiwidGVtcGxhdGVPYmplY3RfNSIsIndvcmQtYmFuayIsInRlbXBsYXRlT2JqZWN0XzYiLCJBRERfVElUTEVTIiwidGVtcGxhdGVPYmplY3RfNyIsInRlbXBsYXRlT2JqZWN0XzgiLCJ0ZW1wbGF0ZU9iamVjdF85IiwidGVtcGxhdGVPYmplY3RfMTAiLCJ0ZW1wbGF0ZU9iamVjdF8xMSIsInRlbXBsYXRlT2JqZWN0XzEyIiwiYWRkX2NvbnRlbnRfYnV0dG9uX0FkZENvbnRlbnRCdXR0b24iLCJBZGRDb250ZW50QnV0dG9uIiwiY3JlYXRlQ29udGVudCIsIm5ld0NvbnRlbnQiLCJuZXdSaWNoVGV4dCIsIm5ld0xlYXJuaW5nR29hbCIsIm5ld0VtYmVkZGVkSFRNTCIsIm5ld1dvcmRCYW5rIiwibmV3UmVzb3VyY2VMaXN0IiwibG9ja0RlbGV0ZSIsImhpZGRlbiIsInNlbGVjdGVkV29yZEJhbmsiLCJoYXNDb21tb25MZWFybmluZ0dvYWxzIiwiY29tbW9uTGVhcm5pbmdHb2FscyIsImhpZGRlblRhc2tzIiwidGVtcGxhdGVPYmplY3RfMTMiLCJ0ZW1wbGF0ZU9iamVjdF8xNCIsInRlbXBsYXRlT2JqZWN0XzE1IiwiQWxpZ25Ib3Jpem9udGFsIiwiY2xhc3NOYW1lcyIsImV4dGVybmFsX1JlYWN0X2RlZmF1bHQiLCJIb3Jpem9udGFsSXRlbSIsIkNvdXJzZVRhYkNsYXNzZXMiLCJpbnRyby10YWIiLCJ0YWJfY2xhc3Nlc190ZW1wbGF0ZU9iamVjdF8xIiwicnVuLXVwLXRhYiIsInRhYl9jbGFzc2VzX3RlbXBsYXRlT2JqZWN0XzIiLCJzdWJqZWN0LXRhYiIsInRhYl9jbGFzc2VzX3RlbXBsYXRlT2JqZWN0XzMiLCJtaXNzaW9uLXRhYiIsInRhYl9jbGFzc2VzX3RlbXBsYXRlT2JqZWN0XzQiLCJjb250ZW50LXRhYiIsInRhYl9jbGFzc2VzX3RlbXBsYXRlT2JqZWN0XzUiLCJ0ZWFjaGVyLXRhYiIsInRhYl9jbGFzc2VzX3RlbXBsYXRlT2JqZWN0XzYiLCJ3b3JkLWJhbmstdGFiIiwidGFiX2NsYXNzZXNfdGVtcGxhdGVPYmplY3RfNyIsIlRhYlR5cGVzUGVyQ291cnNlVHlwZSIsInN0ZXAtY291cnNlIiwidGhlbWUtY291cnNlIiwiVGFiU2V0dGluZ3MiLCJzdWJqZWN0Q29kZSIsInN1YmplY3ROYW1lIiwiY291cnNlU2Nob29sWWVhcnMiLCJjb3Vyc2VfaW5zdGFuY2VfdGFncyIsInRhYl9zZXR0aW5nc190ZW1wbGF0ZU9iamVjdF8xIiwidGFiX3NldHRpbmdzX3RlbXBsYXRlT2JqZWN0XzIiLCJ0YWJfc2V0dGluZ3NfdGVtcGxhdGVPYmplY3RfMyIsIkNPVVJTRV9DT05URU5UX1RZUEVTIiwiY291cnNlX2NvbnRlbnRfdHlwZXNfdGVtcGxhdGVPYmplY3RfMSIsImNvdXJzZV9jb250ZW50X3R5cGVzX3RlbXBsYXRlT2JqZWN0XzIiLCJjb3Vyc2VfY29udGVudF90eXBlc190ZW1wbGF0ZU9iamVjdF8zIiwiY291cnNlX2NvbnRlbnRfdHlwZXNfdGVtcGxhdGVPYmplY3RfNCIsImNvdXJzZV9jb250ZW50X3R5cGVzX3RlbXBsYXRlT2JqZWN0XzUiLCJjb3Vyc2VfY29udGVudF90eXBlc190ZW1wbGF0ZU9iamVjdF82IiwiUmljaFRleHRDb250ZW50Qm94IiwiZWRpdE1vZGUiLCJ1dGlsaXR5X2NvbXBvbmVudHNfd3lzaXd5ZyIsImFjdGlvbnNfc3YiLCJMZWFybmluZ1Rhc2tzU2V0dGluZ3MiLCJsZWFybmluZ190YXNrc19zZXR0aW5nc190ZW1wbGF0ZU9iamVjdF8xIiwibGVhcm5pbmdfdGFza3Nfc2V0dGluZ3NfdGVtcGxhdGVPYmplY3RfMiIsImxlYXJuaW5nX3Rhc2tzX3NldHRpbmdzX3RlbXBsYXRlT2JqZWN0XzMiLCJsZWFybmluZ190YXNrc19zZXR0aW5nc190ZW1wbGF0ZU9iamVjdF80IiwibGVhcm5pbmdfdGFza3Nfc2V0dGluZ3NfdGVtcGxhdGVPYmplY3RfNSIsImFkZF90YXNrX2J1dHRvbl9BZGRUYXNrQnV0dG9uIiwiQWRkVGFza0J1dHRvbiIsImNyZWF0ZVRhc2siLCJ0YXNrTmFtZSIsIm90aGVyU3ViamVjdFRhYnMiLCJzdWJqZWN0cyIsImNvbXB1dGVUYXNrVGFnc0FuZFN1YmplY3QiLCJuZXdUYXNrIiwiYWRkX3Rhc2tfYnV0dG9uX3RlbXBsYXRlT2JqZWN0XzMiLCJhZGRfdGFza19idXR0b25fdGVtcGxhdGVPYmplY3RfMSIsImFkZF90YXNrX2J1dHRvbl90ZW1wbGF0ZU9iamVjdF8yIiwiQWRkVGFza0J1dHRvbldpdGhSb3V0ZXIiLCJMZWFybmluZ1Rhc2tzV2l0aENvbW1vbkdvYWxzIiwiY291cnNlVGFiIiwidGFza19vcmRlciIsInN1YmplY3RUb1Rhc2tzTG9va3VwIiwibGVhcm5pbmdNb2R1bGVUYXNrcyIsImxpbmtUb1Rhc2siLCJzb3J0YWJsZV90YXNrX2xpc3QiLCJMaW5rIiwidXBkYXRlZE9yZGVyIiwidGFza19saXN0IiwiTGVhcm5pbmdUYXNrc1dpdGhTZXBhcmF0ZUdvYWxzIiwiY2F0aGVnb3JpemVkVGFza3MiLCJnb2FsVG9UYXNrc0xvb2t1cCIsImdvYWwiLCJ1bmNhdGhlZ29yaXplZFRhc2tzIiwibGVhcm5pbmdfdGFza3Nfd2l0aF9zZXBhcmF0ZV9nb2Fsc190ZW1wbGF0ZU9iamVjdF8xIiwibGVhcm5pbmdfdGFza3Nfd2l0aF9zZXBhcmF0ZV9nb2Fsc190ZW1wbGF0ZU9iamVjdF8yIiwiTGVhcm5pbmdUYXNrc0NvbnRlbnRCb3giLCJyZWZpbmVkTGVhcm5pbmdHb2FscyIsImxlYXJuaW5nX3Rhc2tzX2NvbnRlbnRfYm94X3RlbXBsYXRlT2JqZWN0XzEiLCJsZWFybmluZ190YXNrc19jb250ZW50X2JveF90ZW1wbGF0ZU9iamVjdF8yIiwiRW1iZWRkZWRIVE1MQ29udGVudEJveCIsImVtYmVkZGVkX2h0bWxfdGVtcGxhdGVPYmplY3RfMSIsImVtYmVkZGVkX2h0bWxfdGVtcGxhdGVPYmplY3RfMiIsIldvcmRCYW5rQ29udGVudFNldHRpbmdzIiwid29yZEJhbmtzQWxyZWFkeUFkZGVkIiwiYXBpVXJsIiwiS0VEX0VOVU1fV09SREJBTktTX1VSTCIsImF2YWlsYWJsZVdvcmRCYW5rcyIsImZldGNoX3N1c3BlbnNlX2RlZmF1bHQiLCJ3b3JkX2JhbmtfY29udGVudF9zZXR0aW5nc190ZW1wbGF0ZU9iamVjdF8xIiwicmVhY3Rfc2VsZWN0X2VzbSIsImlzTXVsdGkiLCJ3b3JkX2JhbmtfY29udGVudF9zZXR0aW5nc190ZW1wbGF0ZU9iamVjdF8yIiwibm9PcHRpb25zTWVzc2FnZSIsIndvcmRfYmFua19jb250ZW50X3NldHRpbmdzX3RlbXBsYXRlT2JqZWN0XzMiLCJXb3JkQmFua0NvbnRlbnRCb3giLCJzaWJsaW5nV29yZEJhbmtzIiwiaWZyYW1lU3JjIiwiS0VEX1dPUkRCQU5LU19VUkwiLCJpZnJhbWVIZWlnaHQiLCJzZXRJZnJhbWVIZWlnaHQiLCJpZnJhbWVSZWYiLCJTdXNwZW5zZSIsImZhbGxiYWNrIiwiZWxsaXBzaXNfbG9hZGVyIiwic2Nyb2xsaW5nIiwiZnJhbWVCb3JkZXIiLCJvbkxvYWQiLCJjb250ZW50V2luZG93Iiwic2Nyb2xsSGVpZ2h0IiwiRGlhbG9nc0NvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwiUmVzb3VyY2VMaXN0Q29udGVudEJveCIsInJlc291cmNlX2xpc3RfdGVtcGxhdGVPYmplY3RfMSIsImVkaXRfcmVzb3VyY2UiLCJyZXNvdXJjZV9saXN0X3RlbXBsYXRlT2JqZWN0XzIiLCJDb3Vyc2VDb250ZW50Qm94Iiwic2libGluZ0NvbnRlbnRzIiwicmVvcmRlciIsImRvY3NXaXRoSWR4Iiwic291cmNlV2l0aElkeCIsInRhcmdldFdpdGhJZHgiLCJ0YXJnZXRJZHgiLCJGaWVsZExpbWl0cyIsIk1BWF9DSEFSU19JTl9DT05URU5UUyIsIk1BWF9DSEFSU19UQVNLX05BTUVTIiwiTUFYX0NIQVJTX1RBU0tfSU5UUk9fVEVYVCIsImNvdXJzZV90YWJfY29udGVudF9ib3hfQ291cnNlVGFiQ29udGVudEJveCIsIkNvdXJzZVRhYkNvbnRlbnRCb3giLCJudW1DaGFyc09ic2VydmFibGUiLCJjb250ZW50T3JkZXJJbmRleCIsImNvbnRlbnRzIiwia2VkU3RhZmYiLCJjb3Vyc2VfdGFiX2NvbnRlbnRfYm94X3RlbXBsYXRlT2JqZWN0XzEiLCJjb3Vyc2VfdGFiX2NvbnRlbnRfYm94X3RlbXBsYXRlT2JqZWN0XzIiLCJudW1DaGFycyIsIm5ld09yZGVyIiwicmVtb3ZlX2l0ZW0iLCJjb3Vyc2VfdGFiX2NvbnRlbnRfYm94X3RlbXBsYXRlT2JqZWN0XzMiLCJjb3Vyc2VfdGFiX2NvbnRlbnRfYm94X3RlbXBsYXRlT2JqZWN0XzQiLCJjb3Vyc2VfdGFiX2NvbnRlbnRfYm94X3RlbXBsYXRlT2JqZWN0XzUiLCJsYXp5X2NvbnRlbnQiLCJjb3Vyc2VfdGFiX2NvbnRlbnRfYm94X3RlbXBsYXRlT2JqZWN0XzYiLCJUYWJSZXF1aXJlbWVudHMiLCJnZXRfc3RhbmRhcmRfY291cnNlc193aXRoX29yZGVyZWRfcmVxdWlyZW1lbnRzIiwiZ2V0X2NvdXJzZV9jb2Rlc19mcm9tX3RhZ3MiLCJjb3Vyc2VUZW1wbGF0ZXMiLCJ0YWJfc2V0dGluZ3NfcmVxdWlyZW1lbnRzX3RlbXBsYXRlT2JqZWN0XzEiLCJ0YWJfc2V0dGluZ3NfcmVxdWlyZW1lbnRzX3RlbXBsYXRlT2JqZWN0XzIiLCJ0YWJfc2V0dGluZ3NfcmVxdWlyZW1lbnRzX3RlbXBsYXRlT2JqZWN0XzMiLCJ0YWJzS3JzIiwia25vd2xlZGdlX21hdHJpeCIsIm1hcmtlZElkIiwiaW52YWxpZEtyIiwibWFya2VkRG9jIiwidGFiQWJpbGl0aWVzIiwic2VsZWN0X3JlbGF0ZWRfZG9jcyIsInRhYl9zZXR0aW5nc19yZXF1aXJlbWVudHNfdGVtcGxhdGVPYmplY3RfNCIsImludmFsaWRBYmlsaXR5IiwidGFic0NDcyIsInRhYl9zZXR0aW5nc19yZXF1aXJlbWVudHNfdGVtcGxhdGVPYmplY3RfNSIsImludmFsaWRDQyIsIlRhYlNldHRpbmdzQWRtaW4iLCJ0YWJfc2V0dGluZ3NfYWRtaW5fdGVtcGxhdGVPYmplY3RfMSIsInRhYl9zZXR0aW5nc19hZG1pbl90ZW1wbGF0ZU9iamVjdF8yIiwidGFiX3NldHRpbmdzX2FkbWluX3RlbXBsYXRlT2JqZWN0XzMiLCJ1cGRhdGVTdWJqZWN0QW5kU2Nob29sWWVhcnMiLCJ0YWJfc2V0dGluZ3NfYWRtaW5fdGVtcGxhdGVPYmplY3RfNCIsInRhYl9zZXR0aW5nc19hZG1pbl90ZW1wbGF0ZU9iamVjdF81IiwidGFiX3NldHRpbmdzX2FkbWluX3RlbXBsYXRlT2JqZWN0XzYiLCJ0YWJfc2V0dGluZ3NfYWRtaW5fdGVtcGxhdGVPYmplY3RfNyIsInRhYl9zZXR0aW5nc19hZG1pbl90ZW1wbGF0ZU9iamVjdF84IiwidGFiX3NldHRpbmdzX2FkbWluX3RlbXBsYXRlT2JqZWN0XzkiLCJ0YWJUYWdzIiwibGdDb250ZW50cyIsInRhc2tzXzEiLCJ0YXNrc18xXzEiLCJDb3Vyc2VUYWJBcmVhIiwibGl2ZV9xdWVyeV92aWV3IiwibGF6eUNvbnRlbnRzIiwiY291cnNlX3RhYl9hcmVhX3RlbXBsYXRlT2JqZWN0XzEiLCJjb3Vyc2VfdGFiX2FyZWFfdGVtcGxhdGVPYmplY3RfMiIsImNvdXJzZV90YWJfYXJlYV90ZW1wbGF0ZU9iamVjdF8zIiwiRWRpdG9yRm9vdGVyQnV0dG9ucyIsImNvdXJzZVR5cGUiLCJibG9ja0lkIiwiYWxsb3dSZW1vdmVUYWJzIiwiZWRpdG9yX2Zvb3Rlcl9idXR0b25zX3RlbXBsYXRlT2JqZWN0XzEiLCJlZGl0b3JfZm9vdGVyX2J1dHRvbnNfdGVtcGxhdGVPYmplY3RfMiIsImVkaXRvcl9mb290ZXJfYnV0dG9uc190ZW1wbGF0ZU9iamVjdF8zIiwicHVibGlzaF9jb3Vyc2UiLCJlZGl0b3JfZm9vdGVyX2J1dHRvbnNfdGVtcGxhdGVPYmplY3RfNCIsImVkaXRvcl9mb290ZXJfYnV0dG9uc190ZW1wbGF0ZU9iamVjdF81IiwiVGV4dCIsIkNoZWNrYm94IiwiT2JzY3VyZSIsIkhpZGRlbkNoYW5nZSIsIkh0bWwiLCJkZWx0YVR5cGVzIiwibW9kZWxOYW1lcyIsImVudGl0eVR5cGVzIiwibW9kZWxfZnJpZW5kbHlfbmFtZXNfdGVtcGxhdGVPYmplY3RfMSIsIm1vZGVsX2ZyaWVuZGx5X25hbWVzX3RlbXBsYXRlT2JqZWN0XzIiLCJtb2RlbF9mcmllbmRseV9uYW1lc190ZW1wbGF0ZU9iamVjdF8zIiwibW9kZWxfZnJpZW5kbHlfbmFtZXNfdGVtcGxhdGVPYmplY3RfNCIsIm1vZGVsX2ZyaWVuZGx5X25hbWVzX3RlbXBsYXRlT2JqZWN0XzUiLCJtb2RlbF9mcmllbmRseV9uYW1lc190ZW1wbGF0ZU9iamVjdF82IiwibW9kaWZpZWRMaW5rcyIsIm1vZGVsX2ZyaWVuZGx5X25hbWVzX3RlbXBsYXRlT2JqZWN0XzciLCJtb2RlbF9mcmllbmRseV9uYW1lc190ZW1wbGF0ZU9iamVjdF84IiwibW9kZWxfZnJpZW5kbHlfbmFtZXNfdGVtcGxhdGVPYmplY3RfOSIsIm1vZGVsX2ZyaWVuZGx5X25hbWVzX3RlbXBsYXRlT2JqZWN0XzEwIiwibW9kZWxfZnJpZW5kbHlfbmFtZXNfdGVtcGxhdGVPYmplY3RfMTEiLCJtb2RlbF9mcmllbmRseV9uYW1lc190ZW1wbGF0ZU9iamVjdF8xMiIsIm1vZGVsX2ZyaWVuZGx5X25hbWVzX3RlbXBsYXRlT2JqZWN0XzEzIiwibW9kZWxfZnJpZW5kbHlfbmFtZXNfdGVtcGxhdGVPYmplY3RfMTQiLCJtb2RlbF9mcmllbmRseV9uYW1lc190ZW1wbGF0ZU9iamVjdF8xNSIsInRlbXBsYXRlT2JqZWN0XzE2IiwidGVtcGxhdGVPYmplY3RfMTciLCJ0ZW1wbGF0ZU9iamVjdF8xOCIsInRlbXBsYXRlT2JqZWN0XzE5IiwidGVtcGxhdGVPYmplY3RfMjAiLCJwcm9wZXJ0eU5hbWVzIiwiYWxsb3dBZGRUYWJzIiwidGVtcGxhdGVPYmplY3RfMjEiLCJ0ZW1wbGF0ZU9iamVjdF8yMiIsImFsbG93UmVvcmRlclRhYnMiLCJ0ZW1wbGF0ZU9iamVjdF8yMyIsInRlbXBsYXRlT2JqZWN0XzI0IiwidGVtcGxhdGVPYmplY3RfMjUiLCJ0ZW1wbGF0ZU9iamVjdF8yNiIsInRlbXBsYXRlT2JqZWN0XzI3IiwidGVtcGxhdGVPYmplY3RfMjgiLCJ0ZW1wbGF0ZU9iamVjdF8yOSIsInRlbXBsYXRlT2JqZWN0XzMwIiwidGVtcGxhdGVPYmplY3RfMzEiLCJlbWJlZGRlZEh0bWwiLCJ0ZW1wbGF0ZU9iamVjdF8zMiIsInRlbXBsYXRlT2JqZWN0XzMzIiwidGVtcGxhdGVPYmplY3RfMzQiLCJ0ZW1wbGF0ZU9iamVjdF8zNSIsInRlbXBsYXRlT2JqZWN0XzM2IiwidGVtcGxhdGVPYmplY3RfMzciLCJ0ZW1wbGF0ZU9iamVjdF8zOCIsInRlbXBsYXRlT2JqZWN0XzM5IiwidGVtcGxhdGVPYmplY3RfNDAiLCJ0ZW1wbGF0ZU9iamVjdF80MSIsInRlbXBsYXRlT2JqZWN0XzQyIiwidGVtcGxhdGVPYmplY3RfNDMiLCJ0ZW1wbGF0ZU9iamVjdF80NCIsInRlbXBsYXRlT2JqZWN0XzQ1IiwidGVtcGxhdGVPYmplY3RfNDYiLCJ0ZW1wbGF0ZU9iamVjdF80NyIsInRlbXBsYXRlT2JqZWN0XzQ4IiwidGVtcGxhdGVPYmplY3RfNDkiLCJ0ZW1wbGF0ZU9iamVjdF81MCIsInN0ZXBOdW1iZXJzIiwidGVtcGxhdGVPYmplY3RfNTEiLCJ0ZW1wbGF0ZU9iamVjdF81MiIsInRlbXBsYXRlT2JqZWN0XzUzIiwidGVtcGxhdGVPYmplY3RfNTQiLCJ0ZW1wbGF0ZU9iamVjdF81NSIsInRlbXBsYXRlT2JqZWN0XzU2IiwidGVtcGxhdGVPYmplY3RfNTciLCJ3b3JraW5nUHJvY2VkdXJlIiwidGVtcGxhdGVPYmplY3RfNTgiLCJ5b3V0dWJlSWQiLCJ0ZW1wbGF0ZU9iamVjdF81OSIsImdldE1vZGlmaWVkTGlua0hlYWRpbmciLCJoZWFkaW5nU3BlYyIsInRlbXBsYXRlT2JqZWN0XzYzIiwidGVtcGxhdGVPYmplY3RfNjAiLCJ0ZW1wbGF0ZU9iamVjdF82MSIsInRlbXBsYXRlT2JqZWN0XzYyIiwiZ2V0UHJvcFZhbCIsInRlbXBsYXRlT2JqZWN0XzY0IiwidGVtcGxhdGVPYmplY3RfNjUiLCJ0ZW1wbGF0ZU9iamVjdF82NiIsInRlbXBsYXRlT2JqZWN0XzY3IiwidGVtcGxhdGVPYmplY3RfNjgiLCJ0ZW1wbGF0ZU9iamVjdF82OSIsInRlbXBsYXRlT2JqZWN0XzcwIiwidGVtcGxhdGVPYmplY3RfNzEiLCJ0ZW1wbGF0ZU9iamVjdF83MiIsInRlbXBsYXRlT2JqZWN0XzczIiwidGVtcGxhdGVPYmplY3RfNzQiLCJ0ZW1wbGF0ZU9iamVjdF83NSIsInRlbXBsYXRlT2JqZWN0Xzc2IiwidGVtcGxhdGVPYmplY3RfNzciLCJ0ZW1wbGF0ZU9iamVjdF83OCIsInRlbXBsYXRlT2JqZWN0Xzc5IiwidGVtcGxhdGVPYmplY3RfODAiLCJ0ZW1wbGF0ZU9iamVjdF84MSIsInJlbW92ZUh0bWxUYWdzIiwiRGVsdGFEb2NCb3giLCJlZGl0YWJsZSIsImVudGl0eU5hbWUiLCJmcmllbmRseUVudGl0eVR5cGUiLCJmcmllbmRseVByb3BzIiwicHJvcFNwZWMiLCJoYXNVbmtub3duUHJvcHMiLCJmcCIsInByb3BOYW1lIiwiZGVsdGFkb2NfYm94X3RlbXBsYXRlT2JqZWN0XzEiLCJjb3Vyc2VfYnVpbGRlcl91dGlscyIsIkRlbHRhTGlua0JveCIsImZyaWVuZGx5T3BlcmF0aW9uIiwiRGVsdGFWaWV3IiwiZGVsdGFfdmlld190ZW1wbGF0ZU9iamVjdF8xIiwiZGVsdGFfdmlld190ZW1wbGF0ZU9iamVjdF8yIiwiZGVsdGFLZXkiLCJ1bmRvRGVsdGFEb2MiLCJ1bmRvRGVsdGFSZWxhdGlvbiIsImRlbHRhX3ZpZXdfdGVtcGxhdGVPYmplY3RfMyIsImRlbHRhX3ZpZXdfdGVtcGxhdGVPYmplY3RfNCIsImRlbHRhc18xIiwiZGVsdGFzXzFfMSIsImRlbHRhX3ZpZXdfdGVtcGxhdGVPYmplY3RfNSIsImRlbHRhX3ZpZXdfdGVtcGxhdGVPYmplY3RfNiIsInVuZG9pbmdzIiwiVmVyc2lvbkhpc3RvcnlCb3giLCJicmFuY2hUeXBlIiwidmVyc2lvbl9oaXN0b3J5X2JveF90ZW1wbGF0ZU9iamVjdF8xIiwidmVyc2lvbl9oaXN0b3J5X2JveF90ZW1wbGF0ZU9iamVjdF8yIiwiaXNBZG1pbiIsIlJlc291cmNlTGlzdFZpZXciLCJjb250ZW50UmVzb3VyY2VzIiwicmVzb3VyY2VMaXN0IiwiQ291cnNlQXJlYSIsImVzX3dpdGhSb3V0ZXIiLCJjdXJyZW50VGFiUmVzb3VyY2VzIiwidHdvX2NvbHVtbnNfcGFnZSIsIndlZWtwbGFubmVyIiwiS0VEX0NPVVJTRV9WSUVXRVJfVVJMIiwiY291cnNlX2FyZWFfdGVtcGxhdGVPYmplY3RfMSIsImV4aXN0aW5nRHJhZnRJZCIsInNjaG9vbEVudGl0eSIsIm5ld0RyYWZ0SWQiLCJuZXdEcmFmdEJyYW5jaERvYyIsImNvdXJzZV9hcmVhX3RlbXBsYXRlT2JqZWN0XzIiLCJjb3Vyc2VfYXJlYV90ZW1wbGF0ZU9iamVjdF8zIiwiY291cnNlX2FyZWFfdGVtcGxhdGVPYmplY3RfNCIsImNvdXJzZV9hcmVhX3RlbXBsYXRlT2JqZWN0XzUiLCJjb3Vyc2VfYXJlYV90ZW1wbGF0ZU9iamVjdF82IiwiQmFzaWNFZGl0YWJsZVRhc2tGaWVsZHMiLCJ3cml0ZUFjY2VzcyIsImNvbnRlbnRJZCIsImJhc2ljX2VkaXRhYmxlX3Rhc2tfZmllbGRzX3RlbXBsYXRlT2JqZWN0XzEiLCJiYXNpY19lZGl0YWJsZV90YXNrX2ZpZWxkc190ZW1wbGF0ZU9iamVjdF8yIiwidGFza19taWdyYXRpb25fYm94IiwibGlua09yVW5saW5rIiwiYmFzaWNfZWRpdGFibGVfdGFza19maWVsZHNfdGVtcGxhdGVPYmplY3RfMyIsImJhc2ljX2VkaXRhYmxlX3Rhc2tfZmllbGRzX3RlbXBsYXRlT2JqZWN0XzQiLCJhdmFpbGFibGVHb2FscyIsImNoZWNrbGlzdCIsImdvYWxzIiwiYmFzaWNfZWRpdGFibGVfdGFza19maWVsZHNfdGVtcGxhdGVPYmplY3RfNSIsImJhc2ljX2VkaXRhYmxlX3Rhc2tfZmllbGRzX3RlbXBsYXRlT2JqZWN0XzYiLCJiYXNpY19lZGl0YWJsZV90YXNrX2ZpZWxkc190ZW1wbGF0ZU9iamVjdF83IiwiYmFzaWNfZWRpdGFibGVfdGFza19maWVsZHNfdGVtcGxhdGVPYmplY3RfOCIsImJhc2ljX2VkaXRhYmxlX3Rhc2tfZmllbGRzX3RlbXBsYXRlT2JqZWN0XzkiLCJjbGlja2VkS2V5IiwiVGFza0Zvb3RlckJ1dHRvbnMiLCJ0YWJJZCIsInRhc2tfZm9vdGVyX2J1dHRvbnNfdGVtcGxhdGVPYmplY3RfMSIsInRhc2tfZm9vdGVyX2J1dHRvbnNfdGVtcGxhdGVPYmplY3RfMiIsInRhc2tfZm9vdGVyX2J1dHRvbnNfdGVtcGxhdGVPYmplY3RfMyIsIkludHJvZHVjdGlvblRleHRFZGl0b3IiLCJpbnRyb2R1Y3Rpb25fdGV4dF9lZGl0b3JfdGVtcGxhdGVPYmplY3RfMSIsInRhc2tUeXBlSGVhZGluZ3MiLCJleGVyY2lzZSIsInRleHRzX3RlbXBsYXRlT2JqZWN0XzEiLCJ0ZXh0c190ZW1wbGF0ZU9iamVjdF8yIiwidGV4dHNfdGVtcGxhdGVPYmplY3RfMyIsIlRhc2tEZXNjcmlwdGlvbkVkaXRvciIsInNldE51bUNoYXJzIiwidGFza19kZXNjcmlwdGlvbl9lZGl0b3JfdGVtcGxhdGVPYmplY3RfMSIsInRhc2tfZGVzY3JpcHRpb25fZWRpdG9yX3RlbXBsYXRlT2JqZWN0XzIiLCJ0ZXh0QWxpZ24iLCJmb250U2l6ZSIsInRhc2tfZGVzY3JpcHRpb25fZWRpdG9yX3RlbXBsYXRlT2JqZWN0XzMiLCJTZWxlY3RXb3JkQmFuayIsIm9uU2VsZWN0IiwibWluSGVpZ2h0IiwiVGFza1dvcmtpbmdQcm9jZWR1cmVFZGl0b3IiLCJkaWFsb2dDdHgiLCJ0YXNrX3dvcmtpbmdfcHJvY2VkdXJlX2VkaXRvcl90ZW1wbGF0ZU9iamVjdF8xIiwid3lzaXd5ZyIsInNlbGVjdGlvbiIsImNyZWF0ZVJhbmdlIiwic2F2ZVNlbGVjdGlvbiIsInNlbGVjdCIsInJlc3RvcmVTZWxlY3Rpb24iLCJjcmVhdGVUZXh0Tm9kZSIsIm91dGVySFRNTCIsInVybE9iaiIsIlVSTCIsInVybFJlc3VsdHMiLCJSZWdFeHAiLCJ2YWx1ZUZyb21Db25maWciLCJ0YXNrX3dvcmtpbmdfcHJvY2VkdXJlX2VkaXRvcl90ZW1wbGF0ZU9iamVjdF8yIiwiVGFza0VtYmVkZGVkSFRNTEVkaXRvciIsInRhc2tfZW1iZWRkZWRfaHRtbF9lZGl0b3JfdGVtcGxhdGVPYmplY3RfMSIsInRhc2tfZW1iZWRkZWRfaHRtbF9lZGl0b3JfdGVtcGxhdGVPYmplY3RfMiIsInRhc2tfZW1iZWRkZWRfaHRtbF9lZGl0b3JfdGVtcGxhdGVPYmplY3RfMyIsIkVkaXRUYXNrRm9ybSIsIkVkaXRSZXF1aXJlbWVudHMiLCJ0YWJJZHMiLCJhbGxDb3ZlcmVkU2VudGVuY2VzIiwiRWRpdFJlcXVpcmVtZW50c0lubmVyIiwidGFiT3JCbG9jayIsImhhc011bHRpcGxlU3ViamVjdHMiLCJtYXJrQnlTZW50ZW5jZVZpZXdBY3RpdmUiLCJzZXRBY3RpdmUiLCJtYXJrUGFydGlhbEtScyIsIm9yZGVyZWRfcmVxdWlyZW1lbnRzIiwiZWRpdF9yZXF1aXJlbWVudHNfdGVtcGxhdGVPYmplY3RfMSIsImVkaXRfcmVxdWlyZW1lbnRzX3RlbXBsYXRlT2JqZWN0XzIiLCJwYXJ0aWFsQ29udGVudHMiLCJlZGl0X3JlcXVpcmVtZW50c190ZW1wbGF0ZU9iamVjdF8zIiwiZWRpdF9yZXF1aXJlbWVudHNfdGVtcGxhdGVPYmplY3RfNCIsImVkaXRfcmVxdWlyZW1lbnRzX3RlbXBsYXRlT2JqZWN0XzUiLCJrZWRfbW9kZWxzIiwic2VsZWN0ZWRGYXMiLCJUYXNrRWRpdG9yIiwidGhlbWVDb3Vyc2VUYWIiLCJpbnZvbHZlZFRhYklkcyIsImludm9sdmVkVGFicyIsImJ1c2luZXNzX2xvZ2ljIiwiZ2V0RHJhZnRJZCIsImNsaWNrYWJsZV9zY2hvb2xfZGl2X0NsaWNrYWJsZVNjaG9vbERpdldpdGhSb3V0ZXIiLCJDbGlja2FibGVTY2hvb2xEaXZXaXRoUm91dGVyIiwiY2xvc2UiLCJzZWxlY3RTY2hvb2wiLCJnZXRSb3V0ZSIsIm90aGVyRHJhZnRJZCIsImNhbkltcGVyc29uYXRlIiwibWF0Y2giLCJyb3V0ZSIsImNsaWNrYWJsZV9zY2hvb2xfZGl2X3RlbXBsYXRlT2JqZWN0XzMiLCJjbGlja2FibGVfc2Nob29sX2Rpdl90ZW1wbGF0ZU9iamVjdF80IiwiY2xpY2thYmxlX3NjaG9vbF9kaXZfdGVtcGxhdGVPYmplY3RfMSIsImNsaWNrYWJsZV9zY2hvb2xfZGl2X3RlbXBsYXRlT2JqZWN0XzIiLCJDbGlja2FibGVTY2hvb2xEaXYiLCJGdXR1cmVBYmlsaXRpZXNCb3giLCJzZWxlY3RlZEZBcyIsIlRhc2tWaWV3ZXIiLCJkZWFkbGluZVRvb0xhdGUiLCJjbGVhciIsInRhc2tfdmlld2VyX3RlbXBsYXRlT2JqZWN0XzEiLCJ0YXNrX3ZpZXdlcl90ZW1wbGF0ZU9iamVjdF8yIiwia3NBc3NpZ25tZW50cyIsInRhc2tfdmlld2VyX3RlbXBsYXRlT2JqZWN0XzMiLCJ0YXNrX2Fzc2lnbm1lbnRzIiwidGFza192aWV3ZXJfdGVtcGxhdGVPYmplY3RfNCIsImtub3dsZWRnZV9yZXF1aXJlbWVudHNfdGFibGUiLCJhYmlsaXRpZXNfYm94IiwiY2VudHJhbF9jb250ZW50X2JveCIsIlRhc2tWaWV3ZXJQYWdlIiwibGF6eVJlcG8iLCJUYXNrVmlld2VyUGFnZUlubmVyIiwidGFza192aWV3ZXJfcGFnZV90ZW1wbGF0ZU9iamVjdF8xIiwiQ291cnNlVmlld2VyUGFnZSIsInNjaG9vbE9ic2VydmFibGUiLCJicmFuY2hPYnNlcnZhYmxlIiwiaW50ZXJtZWRpYXRlT2JzZXJ2YWJsZSIsInZhbHMiLCJiYW5uZXJQcm9wc09ic2VydmFibGUiLCJhY3RpdmVUYWJPYmoiLCJiYW5uZXJUYWJzIiwiS0VEX1NVQkpFQ1RfUExBTk5FUl9BRE1JTl9VUkwiLCJjb3Vyc2Vfdmlld2VyX3BhZ2VfdGVtcGxhdGVPYmplY3RfMSIsInNvdXJjZVRhYiIsImdldENvdXJzZUJhbm5lclByb3BzIiwiYmFubmVyIiwiU3R1ZGVudENvdXJzZXNCb3giLCJMaXN0Q291cnNlcyIsInNob3dJbmFjdGl2ZSIsImxpc3RfY291cnNlX2luc3RhbmNlcyIsImFycmF5c0J5VHlwZSIsInRoZW1lQ291cnNlcyIsInN0ZXBDb3Vyc2VzIiwibGlzdF9jb3Vyc2VzX3RlbXBsYXRlT2JqZWN0XzEiLCJsaXN0X2NvdXJzZXNfdGVtcGxhdGVPYmplY3RfMiIsIlJlZGlyZWN0VG9TdGVwIiwiYnJhbmNoUmVwbyIsImZpcnN0VGFiIiwiUmVkaXJlY3QiLCJWZXJzaW9uSGlzdG9yeVBhZ2UiLCJkcmFmdE9ic2VydmFibGUiLCJ2ZXJzaW9uX2hpc3RvcnlfdGVtcGxhdGVPYmplY3RfMSIsInZlcnNpb25faGlzdG9yeV90ZW1wbGF0ZU9iamVjdF8yIiwia2VlcF9zZXNzaW9uX2FsaXZlIiwiR2V0TXlTY2hvb2wiLCJTdWJqZWN0UGxhbm5lclZpZXdlckFwcCIsIkhhc2hSb3V0ZXIiLCJSb3V0ZSIsImV4YWN0Iiwidmlld2VyX2VkaXRvcl90ZW1wbGF0ZU9iamVjdF8xIiwiZXJyb3Jfc3VjY2Vzc19mZWVkYmFjayIsImxvYWRpbmdfaW5kaWNhdG9yIiwiRGlhbG9nQ29udGVudCIsIlByb3ZpZGVyIiwiX3V0aWxzX2luY2x1ZGVfb3B0aW9uYWxfY3NzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18iLCJfdXRpbHNfaW5jbHVkZV9jc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyIsIl9BcHAiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX2NvbXBvbmVudHNfdXRpbGl0eV9jb21wb25lbnRzX0xhbmd1YWdlQ29udGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTJfXyIsIl9jb21wb25lbnRzX2NvdXJzZV9idWlsZGVyX2tzX3ZpZXdlcl9lZGl0b3JfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXyIsIl91dGlsc19jaG9vc2VfdXNlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiQXBwIiwiX2NvbXBvbmVudHNfdXRpbGl0eV9jb21wb25lbnRzX1NldHVwTGFuZ3VhZ2VJbnRsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xMF9fIiwicmVhY3RfaW50bF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMTFfXyJdLCJtYXBwaW5ncyI6IjJCQUNBLFNBQUFBLEVBQUFDLEdBUUEsSUFQQSxJQU1BQyxFQUFBQyxFQU5BQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FDQUssRUFBQUwsRUFBQSxHQUlBTSxFQUFBLEVBQUFDLEVBQUEsR0FDUUQsRUFBQUgsRUFBQUssT0FBb0JGLElBQzVCSixFQUFBQyxFQUFBRyxHQUNBRyxFQUFBUCxJQUNBSyxFQUFBRyxLQUFBRCxFQUFBUCxHQUFBLElBRUFPLEVBQUFQLEdBQUEsRUFFQSxJQUFBRCxLQUFBRyxFQUNBTyxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBVixFQUFBSCxLQUNBYyxFQUFBZCxHQUFBRyxFQUFBSCxJQUtBLElBRkFlLEtBQUFoQixHQUVBTyxFQUFBQyxRQUNBRCxFQUFBVSxPQUFBVixHQU9BLE9BSEFXLEVBQUFSLEtBQUFTLE1BQUFELEVBQUFiLEdBQUEsSUFHQWUsSUFFQSxTQUFBQSxJQUVBLElBREEsSUFBQUMsRUFDQWYsRUFBQSxFQUFpQkEsRUFBQVksRUFBQVYsT0FBNEJGLElBQUEsQ0FHN0MsSUFGQSxJQUFBZ0IsRUFBQUosRUFBQVosR0FDQWlCLEdBQUEsRUFDQUMsRUFBQSxFQUFrQkEsRUFBQUYsRUFBQWQsT0FBMkJnQixJQUFBLENBQzdDLElBQUFDLEVBQUFILEVBQUFFLEdBQ0EsSUFBQWYsRUFBQWdCLEtBQUFGLEdBQUEsR0FFQUEsSUFDQUwsRUFBQVEsT0FBQXBCLElBQUEsR0FDQWUsRUFBQU0sSUFBQUMsRUFBQU4sRUFBQSxLQUlBLE9BQUFELEVBSUEsSUFBQVEsRUFBQSxHQUtBcEIsRUFBQSxDQUNBcUIsRUFBQSxHQUdBWixFQUFBLEdBR0EsU0FBQVMsRUFBQTFCLEdBR0EsR0FBQTRCLEVBQUE1QixHQUNBLE9BQUE0QixFQUFBNUIsR0FBQThC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RixJQUNsQi82RSxFQUFBIiwiZmlsZSI6InRlc3RwYWdlc3AubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG4gXHRcdHZhciBleGVjdXRlTW9kdWxlcyA9IGRhdGFbMl07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gYWRkIGVudHJ5IG1vZHVsZXMgZnJvbSBsb2FkZWQgY2h1bmsgdG8gZGVmZXJyZWQgbGlzdFxuIFx0XHRkZWZlcnJlZE1vZHVsZXMucHVzaC5hcHBseShkZWZlcnJlZE1vZHVsZXMsIGV4ZWN1dGVNb2R1bGVzIHx8IFtdKTtcblxuIFx0XHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIGFsbCBjaHVua3MgcmVhZHlcbiBcdFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4gXHR9O1xuIFx0ZnVuY3Rpb24gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKSB7XG4gXHRcdHZhciByZXN1bHQ7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgZGVmZXJyZWRNb2R1bGUgPSBkZWZlcnJlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG4gXHRcdFx0Zm9yKHZhciBqID0gMTsgaiA8IGRlZmVycmVkTW9kdWxlLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgZGVwSWQgPSBkZWZlcnJlZE1vZHVsZVtqXTtcbiBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tkZXBJZF0gIT09IDApIGZ1bGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxmaWxsZWQpIHtcbiBcdFx0XHRcdGRlZmVycmVkTW9kdWxlcy5zcGxpY2UoaS0tLCAxKTtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZGVmZXJyZWRNb2R1bGVbMF0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdHJldHVybiByZXN1bHQ7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbiBcdC8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHQ5OiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wX25hbWVfXCJdID0gd2luZG93W1wid2VicGFja0pzb25wX25hbWVfXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFsyNjksMF0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0OyIsIlxyXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0IChzdHIpIHtcclxuICAgIGZvciAobGV0IGk9MCwgbD1zdHIubGVuZ3RoOyBpPGw7ICsraSkge1xyXG4gICAgICAgIGlmIChzdHIuY2hhckNvZGVBdChpKSA8IDB4MjAwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyLnN1YnN0cigwLCBpKSArIHN0cltpXS50b0xvY2FsZVVwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cihpICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0cjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChvYmosIGV4dGVuc2lvbikge1xyXG4gICAgaWYgKHR5cGVvZiBleHRlbnNpb24gIT09ICdvYmplY3QnKSByZXR1cm4gb2JqO1xyXG4gICAgT2JqZWN0LmtleXMoZXh0ZW5zaW9uKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgb2JqW2tleV0gPSBleHRlbnNpb25ba2V5XTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lPFQsRT4gKG9iaiA6IFQsIGV4dGVuc2lvbj86IEUpIHtcclxuICAgIGxldCBjbG9uZSA9IHt9O1xyXG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsb25lLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGV4dGVuc2lvbikgZXh0ZW5kKGNsb25lLCBleHRlbnNpb24pO1xyXG4gICAgcmV0dXJuIGNsb25lIGFzIChUICYgRSk7XHJcbn1cclxuXHJcbmNvbnN0IGNvbmNhdCA9IFtdLmNvbmNhdDtcclxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW48VD4gKGEgOiAoVCB8IFRbXSlbXSkge1xyXG4gICAgcmV0dXJuIGNvbmNhdC5hcHBseShbXSwgYSkgYXMgVFtdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVByb3A8VD4ocHJvcDprZXlvZiBUKSB7XHJcbiAgICByZXR1cm4gKGE6IFQsYjogVCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFQcm9wID0gYVtwcm9wXSwgYlByb3AgPSBiW3Byb3BdO1xyXG4gICAgICAgIHJldHVybiBhUHJvcCA+IGJQcm9wID8gMSA6IGFQcm9wIDwgYlByb3AgPyAtMSA6IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlUHJvcHMoXHJcbiAgICBwcm9wczogc3RyaW5nIHwgc3RyaW5nW10sXHJcbiAgICBsb2NhbGVzPzogc3RyaW5nIHwgc3RyaW5nW10sXHJcbiAgICBvcHRpb25zPzogSW50bC5Db2xsYXRvck9wdGlvbnMpOiAoYTogYW55LCBiOiBhbnkpID0+IG51bWJlclxyXG57XHJcbiAgICBwcm9wcyA9IEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdO1xyXG5cclxuICAgIGNvbnN0IGxvY2FsZUNvbXBhcmUgPSAoYSxiKSA9PlxyXG4gICAgICAgIHR5cGVvZiBhID09PSAnc3RyaW5nJyA/XHJcbiAgICAgICAgICAgIGEubG9jYWxlQ29tcGFyZShiLCBsb2NhbGVzLCBvcHRpb25zKSA6XHJcbiAgICAgICAgICAgIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNtcFBhcnQgKGEsYixmaXJzdFBhcnQ6IHN0cmluZyxyZXN0OiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGNvbnN0IGZpcnN0QSA9IGFbZmlyc3RQYXJ0XTtcclxuICAgICAgICBjb25zdCBmaXJzdEIgPSBiW2ZpcnN0UGFydF07XHJcbiAgICAgICAgaWYgKGZpcnN0QSA9PT0gZmlyc3RCKSByZXR1cm4gMDtcclxuICAgICAgICBpZiAoZmlyc3RBID09IG51bGwpIHJldHVybiAtMTtcclxuICAgICAgICBpZiAoZmlyc3RCID09IG51bGwpIHJldHVybiAxO1xyXG4gICAgICAgIHJldHVybiByZXN0Lmxlbmd0aCA9PT0gMCA/XHJcbiAgICAgICAgICAgIGxvY2FsZUNvbXBhcmUoZmlyc3RBLCBmaXJzdEIpIDpcclxuICAgICAgICAgICAgY21wUGFydChmaXJzdEEsIGZpcnN0QiwgcmVzdFswXSwgcmVzdC5zbGljZSgxKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByb3BzXHJcbiAgICAgICAgLm1hcChwcm9wID0+IHByb3Auc3BsaXQoJy4nKSlcclxuICAgICAgICAubWFwKChbZmlyc3RQYXJ0LCAuLi5yZXN0XSkgPT4gKGEsYikgPT4gY21wUGFydChhLGIsIGZpcnN0UGFydCwgcmVzdCkpXHJcbiAgICAgICAgLnJlZHVjZSgoY21wMSwgY21wMikgPT5cclxuICAgICAgICAgICAgKGEsYikgPT4gY21wMShhLGIpIHx8IGNtcDIoYSxiKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBMKHRleHQsIC4uLmFyZ3MpIHtcclxuICAgIGxldCBmaXJzdCA9IHRleHRbMF07XHJcbiAgICByZXR1cm4gYnVpbGRNZXNzYWdlKHRleHQsIGFyZ3MpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBidWlsZE1lc3NhZ2UgKHRleHQsIGFyZ3MpIHtcclxuICAgIGxldCBydiA9IHRleHRbMF07XHJcbiAgICBmb3IgKGxldCBpPTEsIGw9dGV4dC5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgcnYgKz0gYXJnc1tpLTFdICsgdGV4dFtpXTtcclxuICAgIH1cclxuICAgIHJldHVybiBydjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRDPFQ+IHtcclxuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBUKSB7XHJcbiAgICAgICAgZXh0ZW5kKHRoaXMsIHRlbXBsYXRlKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVUaW1lUmV2aXZlciAoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFyIGE7XHJcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGEgPSAvXFwvRGF0ZVxcKChcXGQqKVxcKVxcLy8uZXhlYyh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCthWzFdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcbi8vbGV0IGluZm9TZXJpYWwgPSAxO1xyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0luZm8gKG1zZykge1xyXG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpbmZvJywgeyAnZGV0YWlsJzogbXNnIH0pO1xyXG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hvd0Vycm9yIChlcnJNc2c6IHN0cmluZyB8IEVycm9yKSB7XHJcbiAgICBjb25zdCBtc2cgPSB0eXBlb2YgZXJyTXNnID09PSAnc3RyaW5nJyA/IGVyck1zZyA6IGVyck1zZy5tZXNzYWdlO1xyXG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdjdXN0b21lcnJvcicsIHsgJ2RldGFpbCc6IG1zZyB9KTtcclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcclxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1heExlbmd0aChzdHI6IHN0cmluZywgbWF4TGVuOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBzdHIubGVuZ3RoID4gbWF4TGVuID9cclxuICAgICAgICBzdHIuc3Vic3RyKDAsIG1heExlbiAtIDMpICsgXCIuLi5cIiA6XHJcbiAgICAgICAgc3RyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlUb0xvb2t1cDxUPihhOiBUW10sIGtleUFjY2Vzc29yOiAoaXRlbTogVCkgPT4gc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICBjb25zdCByZXN1bHQgOiB7W2tleTogc3RyaW5nXSA6IFRbXX0gPSB7fTtcclxuICAgIGZvciAobGV0IGk9MCwgbD1hLmxlbmd0aDsgaTxsOyArK2kpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gYVtpXTtcclxuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcclxuICAgICAgICBsZXQgYXJyYXkgPSByZXN1bHRba2V5XTtcclxuICAgICAgICBpZiAoYXJyYXkpIGFycmF5LnB1c2goaXRlbSk7XHJcbiAgICAgICAgZWxzZSByZXN1bHRba2V5XSA9IFtpdGVtXTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhcnJheVRvTWFwPFQ+KGE6IFRbXSwga2V5QWNjZXNzb3I6IChpdGVtOiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgIGNvbnN0IHJlc3VsdCA6IHtba2V5OiBzdHJpbmddIDogVH0gPSB7fTtcclxuICAgIGZvciAobGV0IGk9MCwgbD1hLmxlbmd0aDsgaTxsOyArK2kpIHtcclxuICAgICAgICBjb25zdCBpdGVtID0gYVtpXTtcclxuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcclxuICAgICAgICByZXN1bHRba2V5XSA9IGl0ZW07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlcnJ5UGlja1Byb3BzPFQ+IChvYmo6IFQsIHByb3BzVG9QaWNrOiBzdHJpbmdbXSk6IFBhcnRpYWw8VD4ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IHBhcmFtIG9mIHByb3BzVG9QaWNrKSB7XHJcbiAgICAgIGlmIChwYXJhbSBpbiBvYmopIHJlc3VsdFtwYXJhbV0gPSBvYmpbcGFyYW1dO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdCBhcyBQYXJ0aWFsPFQ+O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3Q8VD4gKGE6IFRbXSwga2V5QWNjZXNzb3I/OiAoaXRlbTogVCkgPT4gYW55KSB7XHJcbiAgICBjb25zdCBtYXAgPSBhcnJheVRvTWFwKGEsIGtleUFjY2Vzc29yIHx8ICh4ID0+IHgpKTtcclxuICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApLm1hcChrZXkgPT4gbWFwW2tleV0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0VxdWFscyhhOiBhbnksIGI6IGFueSkge1xyXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xyXG4gICAgaWYgKCFhIHx8ICFiKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xyXG4gICAgY29uc3Qga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcclxuICAgIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMoYik7XHJcbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcclxuICAgIGZvciAobGV0IGk9MCwgbD1rZXlzQS5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c0FbaV07XHJcbiAgICAgICAgaWYgKGtleXNCW2ldICE9PSBrZXkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAoYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbiIsImltcG9ydCB7VXNlciwgTGVhcm5pbmdNb2R1bGVUYXNrc30gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBCZWFyZXJQcm92aWRlciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHtVc2VyVGFza30gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQge0tlZFJlcG99IGZyb20gJy4uL3JlcG9zL2tlZC1yZXBvJztcclxuaW1wb3J0IHtFZHNDbGllbnR9IGZyb20gJy4uL2FwaXMvZWRzY2xpZW50JztcclxuaW1wb3J0IEtFRCBmcm9tICcuL2tlZCc7XHJcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJSZXBvIH0gZnJvbSAnLi4vcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwbyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEVudiB7XHJcbiAgICBjdXJyZW50VXNlcj86IFVzZXI7XHJcbiAgICBsZWFybmluZ01vZHVsZVRhc2tzPzogTGVhcm5pbmdNb2R1bGVUYXNrcztcclxuICAgIGJlYXJlclByb3ZpZGVyPzogQmVhcmVyUHJvdmlkZXI7XHJcbiAgICBnb29nbGVUb2tlblByb3ZpZGVyPzogQmVhcmVyUHJvdmlkZXI7XHJcbiAgICBrZWRCYWNrZW5kQ2xpZW50PzogS2VkQmFja2VuZENsaWVudDtcclxuICAgIGVkc0NsaWVudD86IEVkc0NsaWVudDtcclxuICAgIHVzZXJUYXNrc1JlcG8/O1xyXG4gICAgaGlkZGVuQ291cnNlc1JlcG8/O1xyXG4gICAgd2Vla05vdGVzUmVwbz87XHJcbiAgICBrZ1Rlcm1QbGFubmVyUmVwbz87XHJcbiAgICBrc1Rlcm1QbGFubmVyUmVwbz86IEtTVGVybVBsYW5uZXJSZXBvXHJcbiAgICB0dXRvcmVkOiBib29sZWFuO1xyXG4gICAgZXJyb3I/OiBFcnJvcjtcclxufVxyXG5cclxuaWYgKCFLRUQuZW52KSBLRUQuZW52ID0ge307XHJcblxyXG5leHBvcnQgZGVmYXVsdCBLRUQuZW52IGFzIEVudjtcclxuZXhwb3J0IGNvbnN0IGVudjogRW52ID0gS0VELmVudjtcclxuIiwiZXhwb3J0ICogZnJvbSAnLi9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudCc7IiwiaW1wb3J0IEtFRCBmcm9tICcuL0tFRCc7XHJcblxyXG4vKiBUaGlzIGRlZmF1bHQgY29uZmlndXJhdGlvbiBpcyB1c2VkIGFzIGEgZmFsbGJhY2suXHJcbk5vcm1hbGx5IGJvdGggdGVzdCBwYWdlcyBhbmQgcHJvZHVjdGlvbiBwYWdlcyB3aWxsIG92ZXJyaWRlIHRoZXNlIGNvbmZpZ3JhdGlvbnNcclxuKi9cclxuLypjb25zdCBkZWZhdWx0Q29uZmlndXJhdGlvbiA9IHtcclxuICAvLyBFbnZpcm9ubWVudFxyXG4gIEVOVklST05NRU5UOiAnZGV2ZWxvcG1lbnQnIGFzICdwcm9kdWN0aW9uJyB8ICdkZXZlbG9wbWVudCcgfCAndGVzdCcsXHJcbiAgLy8gQXV0aGVudGljYXRpb24gU2VydmVyOlxyXG4gIEtFRF9UT0tFTl9VUkw6ICdodHRwczovL2tlZGF1dGh0ZXN0LmF6dXJld2Vic2l0ZXMubmV0L3Rva2VuJyxcclxuICBLRURfVE9LRU5fUEFUSDogJy9hcGkvdG9rZW4uU2tyaXB0LnBvcnRsZXQ/c3YuY29udGVudHR5cGU9YXBwbGljYXRpb24vanNvbicsXHJcbiAgS0VEX0NMSUVOVF9JRDogJ2RldmNsaWVudCcsXHJcbiAgS0VEX0NMSUVOVF9TRUNSRVQ6ICc0ZlJkZlFwV3RKcWpUV2YnLFxyXG4gIC8vIFNlcnZpY2VzOlxyXG4gIEtFRF9BUElfVVJMOiAnaHR0cHM6Ly9rZWRiYWNrZW5kdGVzdC5henVyZXdlYnNpdGVzLm5ldC9hcGkvJywgIFxyXG4gIEVEU19BUElfVVJMOiAnaHR0cHM6Ly9lZHNwb3J0YWxvd2luYXBpLmF6dXJld2Vic2l0ZXMubmV0L2FwaS8nXHJcbn0qL1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJS2VkQ29uZmlndXJhdGlvbiB7XHJcbiAgRU5WSVJPTk1FTlQ6ICdwcm9kdWN0aW9uJyB8ICdkZXZlbG9wbWVudCcgfCAndGVzdCc7XHJcbiAgS0VEX1JFQUxNOiBzdHJpbmc7XHJcbiAgS0VEX1RPS0VOX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9UT0tFTl9QQVRIOiBzdHJpbmc7XHJcbiAgS0VEX0NMSUVOVF9JRDogc3RyaW5nO1xyXG4gIEtFRF9DTElFTlRfU0VDUkVUOiBzdHJpbmc7XHJcbiAgS0VEX0FQSV9VUkw6IHN0cmluZztcclxuICBFRFNfQVBJX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9MT0NBTEU6IHN0cmluZztcclxuICBLRURfU0NIT09MX0xPQ0FMRTogc3RyaW5nO1xyXG4gIEtFRF9DT1VSU0VfQlVJTERFUl9VUkw6IHN0cmluZztcclxuICBLRURfQ09VUlNFX1ZJRVdFUl9VUkw6IHN0cmluZztcclxuICBLRURfU1VCSkVDVF9QTEFOTkVSX0FETUlOX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9TVUJKRUNUX1BMQU5ORVJfVVJMOiBzdHJpbmc7XHJcbiAgS0VEX0ZFQVRVUkVTOiBzdHJpbmc7XHJcbiAgS0VEX0tFRVBfQUxJVkVfVVJMOiBzdHJpbmc7XHJcbiAgS0VEX0VOVU1fV09SREJBTktTX1VSTDogc3RyaW5nO1xyXG4gIEtFRF9XT1JEQkFOS1NfVVJMOiBzdHJpbmc7XHJcbiAgS0VEX1JFU09VUkNFU19VUkw6IHN0cmluZztcclxufTtcclxuXHJcbmlmICghS0VELmNmZykgS0VELmNmZyA9IHt9O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgS0VELmNmZyBhcyBJS2VkQ29uZmlndXJhdGlvbjtcclxuZXhwb3J0IGNvbnN0IGNmZzogSUtlZENvbmZpZ3VyYXRpb24gPSBLRUQuY2ZnO1xyXG4iLCJ2YXIgS2VkQmFja2VuZFN1YnNjcmlwdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRTdWJzY3JpcHRpb24oc3Vic2NyaWJlciwgY29sbGVjdGlvbikge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcclxuICAgIH1cclxuICAgIEtlZEJhY2tlbmRTdWJzY3JpcHRpb24ucHJvdG90eXBlLm5vdGlmeVN1YnNjcmliZXIgPSBmdW5jdGlvbiAoZGF0YSwgZXJyb3IpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIoW10sIGVycm9yLCB0aGlzKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YSAhPT0gdGhpcy5sYXN0Tm90aWZpZWREYXRhKSB7IC8vIFdpbGwgaW4tZmFjdCBiZSBlcXVhbCBieSByZWZlcmVuY2UgaWYgZGF0YSBpcyBzYW1lIGFzIGxhc3Qgbm90aWZpY2F0aW9uIChhcyB3ZSB1c2UgYW4gaW1tdXRhYmxlIGFwcHJvYWNoIG9uIGRhdGEpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3ROb3RpZmllZERhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyKGRhdGEsIGVycm9yLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXgpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcihbXSwgZXgsIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChleDIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSBub3RpZnlpbmcgS2VkQmFja2VuZFN1YnNjcmliZXI6XCIsIGV4MiwgJ29yaWdpbmFsbHkgbm90aWZpZWQgZXJyb3I6JywgZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi51bnN1YnNjcmliZSh0aGlzKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2VkQmFja2VuZFN1YnNjcmlwdGlvbjtcclxufSgpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZFN1YnNjcmlwdGlvbiB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLXN1YnNjcmlwdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyB0YWJsZXMgfSBmcm9tICdrZWRiYWNrZW5kLXNjaGVtYS9zY2hlbWEuanNvbic7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZUZyb21MYWJlbCh0YWJsZSwgbGFiZWwpIHtcclxuICAgIHJldHVybiB0YWJsZXNbdGFibGVdLnJlbGF0aW9uc2hpcHNbbGFiZWxdO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBxdWVyeUFycmF5KHF1ZXJ5LCBkYXRhKSB7XHJcbiAgICB2YXIgZmlsdGVyID0gZ2V0RmlsdGVyRnJvbVF1ZXJ5KHF1ZXJ5KTtcclxuICAgIHJldHVybiBkYXRhLmZpbHRlcihmaWx0ZXIpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBBTkQoZmlsdGVyMSwgZmlsdGVyMikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7IHJldHVybiBmaWx0ZXIxKHgpICYmIGZpbHRlcjIoeCk7IH07XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbHRlckZyb21RdWVyeShxdWVyeSkge1xyXG4gICAgdmFyIGZpbHRlciA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiB0cnVlOyB9O1xyXG4gICAgaWYgKHF1ZXJ5LmZyb20pXHJcbiAgICAgICAgcmV0dXJuIEFORChmaWx0ZXIsIGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmRhdGVUaW1lID49IHF1ZXJ5LmZyb207IH0pO1xyXG4gICAgaWYgKHF1ZXJ5LnRvKVxyXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5kYXRlVGltZSA8IHF1ZXJ5LnRvOyB9KTtcclxuICAgIGlmIChxdWVyeS5pZHMpXHJcbiAgICAgICAgcmV0dXJuIEFORChmaWx0ZXIsIGZ1bmN0aW9uICh4KSB7IHJldHVybiBxdWVyeS5pZHMuaW5jbHVkZXMoeC5pZCk7IH0pO1xyXG4gICAgaWYgKHF1ZXJ5Lm5hbWUpXHJcbiAgICAgICAgcmV0dXJuIEFORChmaWx0ZXIsIGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lm5hbWUgPT09IHF1ZXJ5Lm5hbWU7IH0pO1xyXG4gICAgaWYgKHF1ZXJ5LnRhZ3MpXHJcbiAgICAgICAgcmV0dXJuIEFORChmaWx0ZXIsIGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LnRhZ3MgJiYgW10uY29uY2F0KHF1ZXJ5LnRhZ3MgfHwgW10pLnNvbWUoZnVuY3Rpb24gKHRhZykgeyByZXR1cm4geC50YWdzLmluY2x1ZGVzKHRhZyk7IH0pOyB9KTtcclxuICAgIC8vIHF1ZXJ5Lmhhc0VkZ2VzRnJvbSBhbmQgcXVlcnkuaGFzRWRnZXNUbyBjYW5ub3QgYnkgZmlsdGVyZWQgaGVyZVxyXG4gICAgcmV0dXJuIGZpbHRlcjtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gYnJhbmNoU2Vuc2l0aXZlKG0pIHtcclxuICAgIHJldHVybiBtLm9wICE9PSAnZGVsZXRlJztcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZ2xvYmFsT3AobSkge1xyXG4gICAgcmV0dXJuIG0ub3AgPT09ICdjbGVhci1icmFuY2gnIHx8IG0ub3AgPT09ICdtZXJnZSc7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIiwiaW1wb3J0ICogYXMgSnNvblNjaGVtYSBmcm9tIFwia2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb25cIjtcclxuaW1wb3J0IHsgZ2V0VGFibGVGcm9tTGFiZWwgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG52YXIgQ2FjaGVCdXN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQ2FjaGVCdXN0KCkge1xyXG4gICAgfVxyXG4gICAgQ2FjaGVCdXN0LmdldENhY2hlQnVzdCA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnksIHVzZXIsIGluY2x1ZGVzKSB7XHJcbiAgICAgICAgdmFyIGludm9sdmVkSXRlbXMgPSBDYWNoZUJ1c3QuZ2V0SW52b2x2ZWRJdGVtcyh0YWJsZSwgcXVlcnksIGluY2x1ZGVzKTtcclxuICAgICAgICByZXR1cm4gaW52b2x2ZWRJdGVtc1xyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImNhY2hlLWJ1c3QtXCIgKyB1c2VyICsgXCItXCIgKyBpdGVtKTsgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuICEhdmFsdWU7IH0pXHJcbiAgICAgICAgICAgIC5qb2luKCcvJykgfHwgJ3N0YXRpYyc7XHJcbiAgICB9O1xyXG4gICAgQ2FjaGVCdXN0LmludmFsaWRhdGVDYWNoZSA9IGZ1bmN0aW9uIChyZXFzLCB1c2VyKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IENhY2hlQnVzdC5nZXRDYWNoZUludmFsaWRhdGlvbnMocmVxcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImNhY2hlLWJ1c3QtXCIgKyB1c2VyICsgXCItXCIgKyBpdGVtLCAnJyArIERhdGUubm93KCkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBDYWNoZUJ1c3QuZ2V0SW52b2x2ZWRJdGVtcyA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnksIGluY2x1ZGVzKSB7XHJcbiAgICAgICAgdmFyIGhhc0VkZ2VzRnJvbSA9IHF1ZXJ5Lmhhc0VkZ2VzRnJvbTtcclxuICAgICAgICB2YXIgcmVsYXRlZFRhYmxlcyA9IGluY2x1ZGVzXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiBKc29uU2NoZW1hLnRhYmxlc1t0YWJsZV0ucmVsYXRpb25zaGlwc1tsYWJlbF07IH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHRhYmxlKSB7IHJldHVybiAhIXRhYmxlOyB9KTtcclxuICAgICAgICBpZiAoaGFzRWRnZXNGcm9tKVxyXG4gICAgICAgICAgICByZWxhdGVkVGFibGVzLnB1c2goXCJoZWZcIiArIHRhYmxlKTtcclxuICAgICAgICByZXR1cm4gW3RhYmxlLCAnbWFzdGVyJywgcXVlcnkuYnJhbmNoSWRdLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4gISF4OyB9KS5jb25jYXQocmVsYXRlZFRhYmxlcykuc29ydCgpO1xyXG4gICAgfTtcclxuICAgIENhY2hlQnVzdC5nZXRDYWNoZUludmFsaWRhdGlvbnMgPSBmdW5jdGlvbiAocmVxcykge1xyXG4gICAgICAgIHZhciBpbnZhbGlkYXRpb25TZXQgPSB7fTtcclxuICAgICAgICByZXFzLmZvckVhY2goZnVuY3Rpb24gKHJlcSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHJlcS5vcCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3B1dCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkZWxldGUnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAndXBkYXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbcmVxLnRhYmxlXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsaW5rJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VubGluayc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd1bmRvLWxpbmsnOlxyXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGlvblNldFtyZXEuc291cmNlVGFibGVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbXCJoZWYtXCIgKyBnZXRUYWJsZUZyb21MYWJlbChyZXEuc291cmNlVGFibGUsIHJlcS5sYWJlbCldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NsZWFyLWJyYW5jaCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS5icmFuY2hJZF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbWVyZ2UnOlxyXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGlvblNldFtyZXEuYnJhbmNoSWRdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbcmVxLnRhcmdldEJyYW5jaElkIHx8IFwibWFzdGVyXCJdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhpbnZhbGlkYXRpb25TZXQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDYWNoZUJ1c3Q7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IENhY2hlQnVzdCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZS1idXN0LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseURlbHRhKGRvYywgZGVsdGEpIHtcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGVsdGEpO1xyXG4gICAgdmFyIHRhcmdldERvYyA9IGRvYztcclxuICAgIGZvciAodmFyIF9pID0gMCwga2V5c18xID0ga2V5czsgX2kgPCBrZXlzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGtleXNfMVtfaV07XHJcbiAgICAgICAgaWYgKHRhcmdldERvYyA9PT0gZG9jKVxyXG4gICAgICAgICAgICB0YXJnZXREb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MpO1xyXG4gICAgICAgIHZhciB2YWwgPSBkZWx0YVtrZXldO1xyXG4gICAgICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgdmFyIG1ldGFJbnN0cnVjdGlvbnMgPSBPYmplY3Qua2V5cyh2YWwpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleS5zdGFydHNXaXRoKCckJyk7IH0pO1xyXG4gICAgICAgICAgICBpZiAobWV0YUluc3RydWN0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChtaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaVZhbHVlID0gdmFsW21pXTtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkdW5zZXRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZyBvbiB0YXJnZXQgZG9jIVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RG9jLiR3YXNVbnNldCA9IHRydWU7IC8vIEp1c3QgbWFyayBpdCBmb3IgcmUtcmV0cmlldmFsIGFmdGVyIHN1Y2Nlc3NmdWwgcG9zdGluZyBjaGFuZ2VzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiRhZGRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlc1RvQWRkID0gbWlWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNUb0FkZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIkYWRkIGluc3RydWN0aW9uIG11c3QgY29udGFpbiBhcnJheVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRhcmdldERvY1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRhcmdldEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBcnJheSA9IHRhcmdldEFycmF5LnNsaWNlKCk7IC8vIE9uIEpTIHNpZGUsIHdlIG11c3QgYmUgaW1tdXRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREb2Nba2V5XSA9IHRhcmdldEFycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB2YWx1ZXNUb0FkZF8xID0gdmFsdWVzVG9BZGQ7IF9pIDwgdmFsdWVzVG9BZGRfMS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IHZhbHVlc1RvQWRkXzFbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0QXJyYXkuaW5jbHVkZXModikpIHsgLy8gYXZvaWQgZHVwc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBcnJheS5wdXNoKHYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkcmVtb3ZlXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNUb1JlbW92ZV8xID0gbWlWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNUb1JlbW92ZV8xKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIiRyZW1vdmUgaW5zdHJ1Y3Rpb24gbXVzdCBjb250YWluIGFycmF5XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEFycmF5ID0gdGFyZ2V0RG9jW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGFyZ2V0QXJyYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERvY1trZXldID0gdGFyZ2V0QXJyYXkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiAhdmFsdWVzVG9SZW1vdmVfMS5pbmNsdWRlcyh0KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIG1ldGFJbnN0cnVjdGlvbnNfMSA9IG1ldGFJbnN0cnVjdGlvbnM7IF9hIDwgbWV0YUluc3RydWN0aW9uc18xLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaSA9IG1ldGFJbnN0cnVjdGlvbnNfMVtfYV07XHJcbiAgICAgICAgICAgICAgICAgICAgX2xvb3BfMShtaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0YXJnZXREb2Nba2V5XSA9IHZhbDtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXREb2M7XHJcbn1cclxuLy8ge25hbWU6IFwiVWxsYVwifSwge25hbWU6IHskdW5zZXQ6MH1cclxuLy8ge3RhZ3M6IHskYWRkOiBcImhlalwifX0sIHt0YWdzOiB7JHVuc2V0OjB9XCJ9XHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURlbHRhcyhkZWx0YTEsIGRlbHRhMiwgX2EpIHtcclxuICAgIHZhciByZW1vdmVVbnNldFByb3BzID0gKF9hID09PSB2b2lkIDAgPyB7IHJlbW92ZVVuc2V0UHJvcHM6IGZhbHNlIH0gOiBfYSkucmVtb3ZlVW5zZXRQcm9wcztcclxuICAgIC8vcmV0dXJuIHsuLi5kZWx0YTEsIC4uLmRlbHRhMn07XHJcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlbHRhMik7XHJcbiAgICB2YXIgdGFyZ2V0RGVsdGEgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkZWx0YTEpO1xyXG4gICAgZm9yICh2YXIgX2kgPSAwLCBrZXlzXzIgPSBrZXlzOyBfaSA8IGtleXNfMi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICB2YXIga2V5ID0ga2V5c18yW19pXTtcclxuICAgICAgICB2YXIgdmFsID0gZGVsdGEyW2tleV07XHJcbiAgICAgICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICB2YXIgbWV0YUluc3RydWN0aW9ucyA9IE9iamVjdC5rZXlzKHZhbClcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoJyQnKTsgfSk7XHJcbiAgICAgICAgICAgIGlmIChtZXRhSW5zdHJ1Y3Rpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBfbG9vcF8yID0gZnVuY3Rpb24gKG1pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pVmFsdWUgPSB2YWxbbWldO1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobWkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiR1bnNldFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlVW5zZXRQcm9wcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXREZWx0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gbWF0dGVyIGlmIHRhcmdldERlbHRhIGlzIGVtcHR5IG9yIGhhcyB2YWx1ZS4gU2V0IGl0IHRvIHskdW5zZXQ6MH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0byBtYWtlIHN1cmUgdGhlIHZlcnkgZW5kIHJlc3VsdCB3aWxsIGhhdmUgeyR1bnNldDowfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERlbHRhW2tleV0gPSB7ICR1bnNldDogMCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiRhZGRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlc1RvQWRkXzIgPSBtaVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlc1RvQWRkXzIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJGFkZCBpbnN0cnVjdGlvbiBtdXN0IGNvbnRhaW4gYXJyYXlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YVByb3AgPSB0YXJnZXREZWx0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWV0YVByb3AgPSB0YXJnZXRNZXRhUHJvcCA/IHRzbGliXzEuX19hc3NpZ24oe30sIHRhcmdldE1ldGFQcm9wKSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RGVsdGFba2V5XSA9IHRhcmdldE1ldGFQcm9wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyc3QsIGp1c3QgY2hlY2sgaWYgdGFyZ2V0IG1ldGFQcm9wIGhhcyB7JHJlbW92ZTogWy4uLml0ZW1zXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHNvLCByZW1vdmUgYW55IGVxdWFsIGl0ZW1zIGZyb20gdGhlcmUgYmVmb3JlIG1lcmdpbmcgdGhlIHskYWRkOiBbLi4uXX0gYXJyYXlzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFJlbW92ZUFycmF5ID0gdGFyZ2V0TWV0YVByb3AuJHJlbW92ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldFJlbW92ZUFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wLiRyZW1vdmUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRSZW1vdmVBcnJheS5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuICF2YWx1ZXNUb0FkZF8yLmluY2x1ZGVzKHQpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWV0YVByb3AuJHJlbW92ZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgJHJlbW92ZSBhcnJheSBiZWNhbWUgZW10cHkuIFJlbW92ZSB0aGUgJHJlbW92ZSBwcm9wLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0TWV0YVByb3AuJHJlbW92ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3cgaXQncyB0aW1lIHRvIG1lcmdlIG9yIGNyZWF0ZSB0YXJnZXQgJGFkZCBhcnJheS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBZGRBcnJheSA9IHRhcmdldE1ldGFQcm9wLiRhZGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBZGRBcnJheSA9IHRhcmdldEFkZEFycmF5ID8gdGFyZ2V0QWRkQXJyYXkuY29uY2F0KHZhbHVlc1RvQWRkXzIpIDogdmFsdWVzVG9BZGRfMi5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWV0YVByb3AuJGFkZCA9IHRhcmdldEFkZEFycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiRyZW1vdmVcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlc1RvUmVtb3ZlXzIgPSBtaVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlc1RvUmVtb3ZlXzIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJHJlbW92ZSBpbnN0cnVjdGlvbiBtdXN0IGNvbnRhaW4gYXJyYXlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YVByb3AgPSB0YXJnZXREZWx0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWV0YVByb3AgPSB0YXJnZXRNZXRhUHJvcCA/IHRzbGliXzEuX19hc3NpZ24oe30sIHRhcmdldE1ldGFQcm9wKSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RGVsdGFba2V5XSA9IHRhcmdldE1ldGFQcm9wO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyc3QsIGp1c3QgY2hlY2sgaWYgdGFyZ2V0IG1ldGFQcm9wIGhhcyB7JGFkZDogWy4uLml0ZW1zXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHNvLCByZW1vdmUgYW55IGVxdWFsIGl0ZW1zIGZyb20gdGhlcmUgYmVmb3JlIG1lcmdpbmcgdGhlIHskcmVtb3ZlOiBbLi4uXX0gYXJyYXlzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEFkZEFycmF5ID0gdGFyZ2V0TWV0YVByb3AuJHJlbW92ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldEFkZEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wLiRhZGQgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBZGRBcnJheS5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuICF2YWx1ZXNUb1JlbW92ZV8yLmluY2x1ZGVzKHQpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWV0YVByb3AuJGFkZC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgJGFkZCBhcnJheSBiZWNhbWUgZW10cHkuIFJlbW92ZSB0aGUgJGFkZCBwcm9wLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0TWV0YVByb3AuJGFkZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3cgaXQncyB0aW1lIHRvIG1lcmdlIG9yIGNyZWF0ZSB0YXJnZXQgJHJlbW92ZSBhcnJheS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZW1vdmVBcnJheSA9IHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRSZW1vdmVBcnJheSA9IHRhcmdldFJlbW92ZUFycmF5ID8gdGFyZ2V0UmVtb3ZlQXJyYXkuY29uY2F0KHZhbHVlc1RvUmVtb3ZlXzIpIDogdmFsdWVzVG9SZW1vdmVfMi5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWV0YVByb3AuJHJlbW92ZSA9IHRhcmdldFJlbW92ZUFycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBtZXRhSW5zdHJ1Y3Rpb25zXzIgPSBtZXRhSW5zdHJ1Y3Rpb25zOyBfYiA8IG1ldGFJbnN0cnVjdGlvbnNfMi5sZW5ndGg7IF9iKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWkgPSBtZXRhSW5zdHJ1Y3Rpb25zXzJbX2JdO1xyXG4gICAgICAgICAgICAgICAgICAgIF9sb29wXzIobWkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0RGVsdGFba2V5XSA9IHZhbDtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXREZWx0YTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWx0YS1tZXJnZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyB1cGRhdGVBcnJheSB9IGZyb20gJy4uL2tlZC1iYWNrZW5kLWNsaWVudC91dGlscyc7XHJcbmltcG9ydCB7IGJyYW5jaFNlbnNpdGl2ZSwgZ2V0VGFibGVGcm9tTGFiZWwgfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHsgYXBwbHlEZWx0YSB9IGZyb20gJy4vZGVsdGEtbWVyZ2UnO1xyXG52YXIgS2VkQmFja2VuZFF1ZXJ5ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZFF1ZXJ5KHRhYmxlLCBxdWVyeSwgdXNlciwgcmVwbywgbXV0YXRpb25RdWV1ZSkge1xyXG4gICAgICAgIHRoaXMudGFibGUgPSB0YWJsZTtcclxuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XHJcbiAgICAgICAgdGhpcy51c2VyID0gdXNlcjtcclxuICAgICAgICB0aGlzLnJlcG8gPSByZXBvO1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IG11dGF0aW9uUXVldWU7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XHJcbiAgICAgICAgdGhpcy5kYXRhID0gW107XHJcbiAgICAgICAgdGhpcy5nb3RJbml0aWFsUmVzcG9uc2UgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmludmFsaWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmxvYWRlZFZlcnNpb24gPSAwO1xyXG4gICAgICAgIHRoaXMuX2xvYWRQcm9taXNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmluY2x1ZGVzID0gcXVlcnkuaW5jbHVkZSA/XHJcbiAgICAgICAgICAgIHR5cGVvZiBxdWVyeS5pbmNsdWRlID09PSAnc3RyaW5nJyA/XHJcbiAgICAgICAgICAgICAgICBbcXVlcnkuaW5jbHVkZV0gOlxyXG4gICAgICAgICAgICAgICAgcXVlcnkuaW5jbHVkZSA6XHJcbiAgICAgICAgICAgIFtdO1xyXG4gICAgfVxyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnF1ZXJ5S2V5ID0gZnVuY3Rpb24gKHRhYmxlLCBxdWVyeSkge1xyXG4gICAgICAgIHZhciBtdXRhdGlvbnNPbkVtcHR5ID0gcXVlcnkubXV0YXRpb25zT25FbXB0eSwgY29tcGFyYWJsZVByb3BzID0gdHNsaWJfMS5fX3Jlc3QocXVlcnksIFtcIm11dGF0aW9uc09uRW1wdHlcIl0pO1xyXG4gICAgICAgIHJldHVybiB0YWJsZSArIEpTT04uc3RyaW5naWZ5KGNvbXBhcmFibGVQcm9wcyk7XHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUsIFwicXVlcnlLZXlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gS2VkQmFja2VuZFF1ZXJ5LnF1ZXJ5S2V5KHRoaXMudGFibGUsIHRoaXMucXVlcnkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhLCBkYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuZ290SW5pdGlhbFJlc3BvbnNlICYmICF0aGlzLmludmFsaWQpKSByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkKHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKSwgdHJ1ZSwgdGhpcy5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeVN1YnNjcmliZXIoZGF0YSwgdGhpcy5lcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMucXVlcnlMb2NhbGx5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGF0YSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ubm90aWZ5U3Vic2NyaWJlcihkYXRhLCB0aGlzLmVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvYWQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGxvYWRQcm9taXNlO1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdvdEluaXRpYWxSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXV0YXRpb25zT25FbXB0eSBzaG91bGQgbmV2ZXIgYmUgdXNlZCB0d2ljZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnF1ZXJ5Lm11dGF0aW9uc09uRW1wdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIXZlcnNpb24gJiYgdGhpcy5fbG9hZFByb21pc2UpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5fbG9hZFByb21pc2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9hZGluZyBpcyBvbmdvaW5nLCBhbmQgY2FsbGVyIGRvZXMgbm90IHJlcXVpcmUgYSByZWNlbnQgcmVmcmVzaC5cclxuICAgICAgICAgICAgICAgICAgICAvLyB3YWl0IGZvciB0aGUgb25nb2luZyBsb2FkIHRvIGNvbXBsZXRlXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uID0gdmVyc2lvbiB8fCB0aGlzLnJlcG8ud3JpdGVyLnBlcnNpc3RlZFZlcnNpb24udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRQcm9taXNlID0gdGhpcy5fbG9hZFByb21pc2UgPSB0aGlzLl9sb2FkKHZlcnNpb24pLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fbG9hZFByb21pc2UgPT09IGxvYWRQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMubG9hZGVkVmVyc2lvbiA9IE1hdGgubWF4KF90aGlzLmxvYWRlZFZlcnNpb24sIHZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fbG9hZFByb21pc2UgPT09IGxvYWRQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9vbmUgaGFzIHJlZnJlc2hlZCBvdXIgbG9hZC4gVGhlIGVycm9yIGlzIHRoZSBmaW5hbCByZXN1bHQuIFNldCBpdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fbG9hZFByb21pc2UgPT09IGxvYWRQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9vbmUgaGFzIHJlZnJlc2hlZCBvdXIgbG9hZC4gV2UncmUgZmluaXNoZWQuIERhdGEgb3IgZXJyb3IgaXMgYWxyZWFkeSBzZXQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayBnb3RJbml0aWFsUmVzcG9uc2UgdG8gdHJ1ZSBhbmQgbm90aWZ5IHN1YnNjcmliZXJzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9sb2FkUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZ290SW5pdGlhbFJlc3BvbnNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZnlTdWJzY3JpYmVycyhfdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgbW9yZSByZWNlbnQgY2FsbCB0byBsb2FkKCkgaXMgb25nb2luZywgT1Igd2FzIG9uZ29pbmcgYnV0IHJlc3BvbmRlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGJlZm9yZSB1cy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJbiBhbnkgY2FzZSByZXR1cm4gdGhpcy5fbG9hZFByb21pc2UuIElmIGl0J3Mgb25nb2luZyB3ZSdsbCB3YWl0IGZvciBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGZpbmlzaC4gSWYgaXQncyBudWxsLCB3ZSdsbCBiZSByZXR1cm5pbmcgZmluYWxseSBoZXJlIHdpdGhvdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbnkgYWN0aW9uLCBiZWNhdXNlIHRoZSBhY3Rpb24gd2FzIHRha2VuIGJ5IHRoZSByZWZyZXNoZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLl9sb2FkUHJvbWlzZTsgLy8gV2FpdCBmb3IgdGhlIHJlZnJlc2hlZCBsb2FkIHRvIGNvbXBsZXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBsb2FkUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5fbG9hZCA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm11dGF0aW9uUXVldWUuYWZmZWN0c1F1ZXJ5KHRoaXMudGFibGUsIHRoaXMucXVlcnksIHRoaXMuaW5jbHVkZXMpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgYXJlIG91dGdvaW5nIG11dGF0aW9ucyB0aGF0IGFmZmVjdHMgdGhpcyBxdWVyeS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmVlZCB0byB3YWl0IHRpbGwgdGhleSByZWFjaCBzZXJ2ZXIgYW5kIHNlcnZlciByZXNwb25kcyB3aXRoIE9LIGJlZm9yZSBxdWVyeWluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VydmVyLiBPdGhlcndpc2UsIHdlIG1heSBnZXQgaW5hY2N1cmF0ZSBkYXRhIGZyb20gc2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlcG8ud3JpdGVyLndhaXRGb3JWZXJzaW9uVG9QZXJzaXN0KHZlcnNpb24pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBvdXRnb2luZyBtdXRhdGlvbnMgdGhhdCBhZmZlY3RzIHRoaXMgcXVlcnkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gd2FpdCB0aWxsIHRoZXkgcmVhY2ggc2VydmVyIGFuZCBzZXJ2ZXIgcmVzcG9uZHMgd2l0aCBPSyBiZWZvcmUgcXVlcnlpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHNlcnZlci4gT3RoZXJ3aXNlLCB3ZSBtYXkgZ2V0IGluYWNjdXJhdGUgZGF0YSBmcm9tIHNlcnZlci5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnF1ZXJ5U2VydmVyKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcyAhPT0gc3Vic2NyaXB0aW9uOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLmNvbW1pdE11dGF0aW9ucyA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIHZlcnNpb24pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9pLCBtdXRhdGlvbnNfMSwgbSwgZGF0YTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZGF0YSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pID0gMCwgbXV0YXRpb25zXzEgPSBtdXRhdGlvbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgbXV0YXRpb25zXzEubGVuZ3RoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBtdXRhdGlvbnNfMVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG0ub3AgPT09ICdjbGVhci1icmFuY2gnICYmIChtLmJyYW5jaElkID09PSB0aGlzLnF1ZXJ5LmJyYW5jaElkKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hPckludmFsaWRhdGUodmVyc2lvbildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtLm9wID09PSAnbWVyZ2UnICYmICghbS50YXJnZXRCcmFuY2hJZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5icmFuY2hJZCA9PT0gdGhpcy5xdWVyeS5icmFuY2hJZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS50YXJnZXRCcmFuY2hJZCA9PT0gdGhpcy5xdWVyeS5icmFuY2hJZCkpKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZWZyZXNoT3JJbnZhbGlkYXRlKHZlcnNpb24pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5vcCA9PT0gJ3VwZGF0ZScgJiYgKChtLmRlbHRhRG9jLnRhZ3MgJiYgdGhpcy5xdWVyeS50YWdzKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG0uZGVsdGFEb2MubmFtZSAmJiB0aGlzLnF1ZXJ5Lm5hbWUpKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBIHRhZyBtYXkgaGF2ZSBiZWVuIGFkZGVkLCBvciByZW5hbWVkLCBhbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHF1ZXJ5IGlzIGRlcGVuZGVudCBvbiB0aGUgc2FtZSBwcm9wZXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHF1ZXJ5IG11c3QgYmUgcmVmcmVzaGVkIGZyb20gc2VydmVyIGFzIHdlIGNhbm5vdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21taXQgdGhlIG11dGF0aW9ucyBsb2NhbGx5IGFzIHdlIGRvbid0IGhhdmUgYWxsIGluZm8uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaE9ySW52YWxpZGF0ZSh2ZXJzaW9uKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBIHRhZyBtYXkgaGF2ZSBiZWVuIGFkZGVkLCBvciByZW5hbWVkLCBhbmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhlIHF1ZXJ5IGlzIGRlcGVuZGVudCBvbiB0aGUgc2FtZSBwcm9wZXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHF1ZXJ5IG11c3QgYmUgcmVmcmVzaGVkIGZyb20gc2VydmVyIGFzIHdlIGNhbm5vdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21taXQgdGhlIG11dGF0aW9ucyBsb2NhbGx5IGFzIHdlIGRvbid0IGhhdmUgYWxsIGluZm8uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2krKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5nZXREYXRhV2l0aE11dGF0aW9uc0FwcGxpZWQobXV0YXRpb25zLCBmYWxzZSwgdGhpcy5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA5O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLnJlZnJlc2hPckludmFsaWRhdGUgPSBmdW5jdGlvbiAodmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuc3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApKSByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmxvYWQodmVyc2lvbildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUubm90aWZ5U3Vic2NyaWJlcnMgPSBmdW5jdGlvbiAob3B0aW1pc3RpY011dGF0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YSAmJiB0aGlzLmdvdEluaXRpYWxSZXNwb25zZSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YV8xID0gdGhpcy5nZXREYXRhV2l0aE11dGF0aW9uc0FwcGxpZWQob3B0aW1pc3RpY011dGF0aW9ucywgdHJ1ZSwgdGhpcy5kYXRhKTtcclxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgIHMubm90aWZ5U3Vic2NyaWJlcihkYXRhXzEsIF90aGlzLmVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUucXVlcnlMb2NhbGx5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlcG8ucXVlcnlTZXQucXVlcnlMb2NhbGx5KHRoaXMudGFibGUsIHRoaXMucXVlcnksIHRoaXMuaW5jbHVkZXMpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUucXVlcnlTZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVwby5nZXRDbGllbnQoKS5saXN0KHRoaXMudGFibGUsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMucXVlcnkpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgZGF0YV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkID0gZnVuY3Rpb24gKG11dGF0aW9ucywgb3B0aW1pc3RpYywgZGF0YSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBfdGhpcy5hcHBseU11dGF0aW9uc09uRGF0YShkYXRhLCBtdXRhdGlvbiwgb3B0aW1pc3RpYyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5hcHBseU11dGF0aW9uc09uRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCBtLCBvcHRpbWlzdGljKSB7XHJcbiAgICAgICAgaWYgKGJyYW5jaFNlbnNpdGl2ZShtKSAmJiBtLmJyYW5jaElkICE9IHRoaXMucXVlcnkuYnJhbmNoSWQpXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHRhYmxlID0gX2EudGFibGUsIGluY2x1ZGVzID0gX2EuaW5jbHVkZXMsIGxpc3RPcHRpb25zID0gX2EucXVlcnk7XHJcbiAgICAgICAgdmFyIHNvdXJjZUlkcyA9IGxpc3RPcHRpb25zLmhhc0VkZ2VzRnJvbSA/IFtdLmNvbmNhdChsaXN0T3B0aW9ucy5oYXNFZGdlc0Zyb20gfHwgW10pIDogW107XHJcbiAgICAgICAgdmFyIHJlcXVlc3RlZFRhZ3MgPSBsaXN0T3B0aW9ucy50YWdzID8gW10uY29uY2F0KGxpc3RPcHRpb25zLnRhZ3MgfHwgW10pIDogW107XHJcbiAgICAgICAgc3dpdGNoIChtLm9wKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRvYy5pZCA9PT0gbS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSBkZWx0YSBvbiB1cGRhdGVkIGRvY3VtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkRG9jID0gYXBwbHlEZWx0YShkb2MsIG0uZGVsdGFEb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW1pc3RpYylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWREb2MuJG1ldGEgPSAndXBkYXRpbmcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlZERvYztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgaWQgZG9lcyBub3QgYXBwbHkgdG8gdGhpcyBkb2MsIHNlYXJjaCBpbiBncmFwaHMgdGhlIGlkIGlzIGZvdW5kXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW1vbmcgZ3JhcGggaW5jbHVkZWQgZG9jcywgYW5kIGlmIHNvLCB1cGRhdGUgdGhhdCBvbmU6XHJcbiAgICAgICAgICAgICAgICAgICAgaW5jbHVkZXMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jbHVkZWREb2NzID0gZG9jW2xhYmVsXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluY2x1ZGVkRG9jcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRBcnJheSA9IHVwZGF0ZUFycmF5KGluY2x1ZGVkRG9jcywgZnVuY3Rpb24gKHJlbGF0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRlZC5pZCAhPT0gbS5pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbGF0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRSZWxhdGVkID0gYXBwbHlEZWx0YShyZWxhdGVkLCBtLmRlbHRhRG9jKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW1pc3RpYylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFJlbGF0ZWQuJG1ldGEgPSAndXBkYXRpbmcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVkUmVsYXRlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZWRBcnJheSAhPT0gaW5jbHVkZWREb2NzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZG9jLCAoX2EgPSB7fSwgX2FbbGFiZWxdID0gdXBkYXRlZEFycmF5LCBfYSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhc2UgJ2FkZC1yZWxhdGVkJzpcclxuICAgICAgICAgICAgICAgIGlmICh0YWJsZSA9PT0gbS50YWJsZSAmJiBpbmNsdWRlcy5pbmRleE9mKG0uZ3JhcGhQcm9wKSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBleHByZXNzaW9uIGlzIGBkYi5jb3Vyc2VCbG9ja3MuLi4ud2hhdGV2ZXIuLiAuaW5jbHVkZShcImFiaWxpdGllc1wiKWAsIGRldGVjdDogZGIuY291cnNlQmxvY2tzLmFkZFJlbGF0ZWQoYmxvY2tJZCwgJ2FiaWxpdGllcycsIC4uLilcclxuICAgICAgICAgICAgICAgICAgICAvLyAuLi5iZWNhdXNlIHRhYmxlID0gJ2NvdXJzZUJsb2NrcycgYW5kIGluY2x1ZGVzIGhhcyBcImFiaWxpdGllc1wiLlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvYy5pZCAhPT0gbS5pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGVkRG9jID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgbS5yZWxhdGVkRG9jKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGltaXN0aWMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkRG9jLiRtZXRhID0gJ2FkZGluZyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MsIChfYSA9IHt9LCBfYVttLmdyYXBoUHJvcF0gPSBkb2NbbS5ncmFwaFByb3BdLmNvbmNhdChbcmVsYXRlZERvY10pLCBfYSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RPcHRpb25zLmhhc0VkZ2VzRnJvbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VJZHMuaW5jbHVkZXMobS5pZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgZXhwcmVzc2lvbiBpczpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBgZGIuY291cnNlQmxvY2tzLmhhc0VkZ2VzRnJvbShbY291cnNlSWRdKWAgIChtZWFuaW5nIHRhYmxlPSdjb3Vyc2VCbG9ja3MnIGFuZCBzb3VyY2VJZHMgaW5jbHVkZXMgY291cnNlSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICwgZGV0ZWN0OiBkYi5jb3Vyc2VJbnN0YW5jZXMuYWRkUmVsYXRlZChjb3Vyc2VJZCwgJ2NvdXJzZUJsb2NrcycsIC4uLi4pIC8vIG0uZ3JhcGhQcm9wID09PSAnYmxvY2tzJy0tPiBnZXRUYWJsZUZyb21MYWJlbCAtLT4gJ2NvdXJzZUJsb2NrcydcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlID09PSBnZXRUYWJsZUZyb21MYWJlbChtLnRhYmxlLCBtLmdyYXBoUHJvcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGlzdE9wdGlvbnMudGFncylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb25jYXQodGhpcy5zZXRHcmFwaFByb3BzKG0ucmVsYXRlZERvYykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG0ucmVsYXRlZERvYy50YWdzICYmIHJlcXVlc3RlZFRhZ3Muc29tZShmdW5jdGlvbiAodGFnKSB7IHJldHVybiBtLnJlbGF0ZWREb2MudGFncy5pbmNsdWRlcyh0YWcpOyB9KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmNvbmNhdCh0aGlzLnNldEdyYXBoUHJvcHMobS5yZWxhdGVkRG9jKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobGlzdE9wdGlvbnMuaWRzICYmIGxpc3RPcHRpb25zLmlkcy5zb21lKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gaWQgPT09IG0ucmVsYXRlZERvYy5pZDsgfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBBIGNlcnRhaW4gSUQgaXMgb2JzZXJ2ZWQuIEEgZG9jIHdpdGggdGhpcyBpZCBpcyBiZWluZyBhZGRlZC5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGRvYyB0byB0aGUgcmVzdWx0LiBFeGFjdGx5IHRoaXMgV0lMTCBoYXBwZW4gaW4gdGhlIGZvbGxvd2luZyB0eXBpY2FsIHNjZW5hcmlvOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDEuIFVzZXIgYWRkcyBhIHJlbGF0ZWQgZG9jdW1lbnQgdG8gYSBsaXN0LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDIuIERvY3VtZW50IHJlbWFpbnMgd2l0aGluIHRoZSBNdXRhdGlvblF1ZXVlIHdoaWxlIGJhdGNoLXJlcXVlc3QgaXMgYmVpbmcgcHJvY2Vzc2VkIGJ5IHNlcnZlci5cclxuICAgICAgICAgICAgICAgICAgICAvLyAzLiBVc2VyIGNsaWNrcyB0aGUgYWRkZWQgaXRlbSB0byBlZGl0IG9yIHZpZXcgaXQgKG9yIG91ciBjb21wb25lbnQgcmVkaXJlY3RzIHRvIGl0cyBlZGl0b3IpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gNC4gQSBuZXcgcXVlcnkgb2YgdGhhdCBwYXJ0aWN1bGFyIElEIGlzIHN1YnNjcmliZWQgdG8ge2lkcz1bdGhlSWRdfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgIEtlZEJhY2tlbmRRdWVyeS5zdWJzY3JpYmUgdGhlbiBkb2VzIHRoaXM6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAxLiBDYWxsIHF1ZXJ5TG9jYWxseSgpIGJlZm9yZSBxdWVyeWluZyBzZXJ2ZXJcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgIDIuIHF1ZXJ5TG9jYWxseSgpIGluc3BlY3RzIG11dGF0aW9ucyBhbmQgZmluZHMgYSBtYXRjaCwgcmV0dXJuaW5nIGFuIGVtcHR5IGxpc3RcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIChhc3N1bWVzIGFzIHdlIGFyZSBhZGRpbmcgaXQsIGl0IGNhbid0IGV4aXN0IG9uIHRoZSBzZXJ2ZXIgYW55d2F5KVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgMy4gS2VkQmFja2VuZFFVZXJ5IGFwcGxpZXMgbXV0YXRpb25zIG9udG8gdGhlIGVtcHR5IGxpc3QsIGFuZCBlbmRzIHVwIGhlcmUgdG8gYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBpdCBvcHRpbWlzdGljYWxseS5cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgIDQuIFdoZW4gc2VydmVyIHJlc3BvbmRzIHdpdGggMjAwIE9LLCBjYWxscyB1cyBoZXJlIGFnYWluIHdpdGggb3B0aW1pc3RpYz1mYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgdG8gXCJwZXJzaXN0XCIgaXQgaW4gdGhlIHF1ZXJ5J3MgZGF0YSBhcnJheS5cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgIDRCOiBJZiBub3QgMjAwIE9LLCBtdXRhdGlvbiBtYXkgYmUgZ29uZSBhbmQgdGhlIHN1YnNjcmliZXIgd2lsbCBzZSBhbiBlcnJvciBwYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBcIkNvdWxkIG5vdCBmaW5kIGVudGl0eSB3aXRoIGlkIFguXCIgYWxvbmcgd2l0aCBhIHJlZCBlcnJvciBtZXNzYWdlIG9uIHRoZSBzY3JlZW5cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGFib3V0IHRoYXQgaXQgZmFpbGVkIHRvIHNhdmUgb24gc2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmNvbmNhdCh0aGlzLnNldEdyYXBoUHJvcHMobS5yZWxhdGVkRG9jKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgICAgY2FzZSAncmVtb3ZlLXJlbGF0ZWQnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlID09PSBtLnRhYmxlICYmIGluY2x1ZGVzLmluZGV4T2YobS5ncmFwaFByb3ApICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluY2x1ZGVkRG9jcyA9IGRvY1ttLmdyYXBoUHJvcF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZWREb2NzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvYy5pZCAhPT0gbS5pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MsIChfYSA9IHt9LCBfYVttLmdyYXBoUHJvcF0gPSBvcHRpbWlzdGljID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgcmVsYXRlZC1kb2MtdG8tcmVtb3ZlIHdpdGggJG1ldGE6ICdkZWxldGluZydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVkRG9jcy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgIT09IG0ucmVsYXRlZERvYy5pZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA6IHRzbGliXzEuX19hc3NpZ24oe30sIGQsIHsgJG1ldGE6ICdkZWxldGluZycgfSk7IH0pIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSByZWxhdGVkLWRvYy10by1yZW1vdmUgZnJvbSBkb2NbZ3JhcFByb3BdOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZWREb2NzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCAhPT0gbS5yZWxhdGVkRG9jLmlkOyB9KSwgX2EpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsaXN0T3B0aW9ucy5oYXNFZGdlc0Zyb20pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlSWRzLmluY2x1ZGVzKG0uaWQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW1pc3RpYyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCA9PT0gbS5yZWxhdGVkRG9jLmlkID8gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZCwgeyAkbWV0YTogJ2RlbGV0aW5nJyB9KSA6IGQ7IH0pIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmlkICE9PSBtLnJlbGF0ZWREb2MuaWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XHJcbiAgICAgICAgICAgICAgICBpZiAodGFibGUgPT09IG0udGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgIT09IG0uaWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobGlzdE9wdGlvbnMuaW5jbHVkZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmNsdWRlZFRhYmxlcyA9IGluY2x1ZGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiAoeyBsYWJlbDogbGFiZWwsIHRhYmxlOiBnZXRUYWJsZUZyb21MYWJlbCh0YWJsZSwgbGFiZWwpIH0pOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWxzXzEgPSBpbmNsdWRlZFRhYmxlcy5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IF9hLnRhYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgPT09IG0udGFibGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsc18xLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUFycmF5KGRhdGEsIGZ1bmN0aW9uIChkb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsc18xLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gX2EubGFiZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9iO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGVkRG9jcyA9IGRvY1tsYWJlbF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbGF0ZWREb2NzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRvYywgKF9iID0ge30sIF9iW2xhYmVsXSA9IG9wdGltaXN0aWMgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZERvY3MubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmlkID09PSBtLmlkID8gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZCwgeyAkbWV0YTogJ2RlbGV0aW5nJyB9KSA6IGQ7IH0pIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWREb2NzLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBfYS5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQgIT09IG0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgX2IpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuc2V0R3JhcGhQcm9wcyA9IGZ1bmN0aW9uIChkb2MpIHtcclxuICAgICAgICB2YXIgY29weSA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRvYyk7XHJcbiAgICAgICAgdGhpcy5pbmNsdWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gY29weVtsYWJlbF0gPSBjb3B5W2xhYmVsXSB8fCBbXTsgfSk7XHJcbiAgICAgICAgcmV0dXJuIGNvcHk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEtlZEJhY2tlbmRRdWVyeTtcclxufSgpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZFF1ZXJ5IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlZGJhY2tlbmQtcXVlcnkuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgQmF0Y2hSdW5uZXIgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4va2VkYmFja2VuZC1zdWJzY3JpcHRpb25cIjtcclxuaW1wb3J0IHsgQ2FjaGVCdXN0IH0gZnJvbSAnLi9jYWNoZS1idXN0JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFF1ZXJ5IH0gZnJvbSAnLi9rZWRiYWNrZW5kLXF1ZXJ5JztcclxuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uL29ic2VydmFibGUvY29sbGVjdGlvbic7XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIGEgXCJsaXZlXCIgcXVlcnkgYWdhaW5zdCBhIHRhYmxlIG9yIGZpbHRlcmVkIHRhYmxlLlxyXG4gKi9cclxudmFyIEtlZEJhY2tlbmRDb2xsZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoS2VkQmFja2VuZENvbGxlY3Rpb24sIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kQ29sbGVjdGlvbihyZXBvLCB0YWJsZSwgcXVlcnkpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uKG9ic2VydmVyLCBfdGhpcyk7XHJcbiAgICAgICAgICAgIF90aGlzLnJlcG8ucXVlcnlTZXQuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XHJcbiAgICAgICAgfSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5yZXBvID0gcmVwbztcclxuICAgICAgICBfdGhpcy50YWJsZSA9IHRhYmxlO1xyXG4gICAgICAgIF90aGlzLnF1ZXJ5ID0gcXVlcnk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZSwgXCJxdWVyeUtleVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZWRCYWNrZW5kUXVlcnkucXVlcnlLZXkodGhpcy50YWJsZSwgdGhpcy5xdWVyeSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLCBcImluY2x1ZGVzXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luY2x1ZGVzIHx8ICh0aGlzLl9pbmNsdWRlcyA9IFtdLmNvbmNhdCh0aGlzLnF1ZXJ5LmluY2x1ZGUgfHwgW10pKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5hcHBseVF1ZXJ5ID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBLZWRCYWNrZW5kQ29sbGVjdGlvbih0aGlzLnJlcG8sIHRoaXMudGFibGUsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMucXVlcnksIHF1ZXJ5KSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmFkZFRvUXVlcnlBcnJheVByb3AgPSBmdW5jdGlvbiAoYXJyYXlQcm9wLCBlbnRyaWVzKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoKF9hID0ge30sIF9hW2FycmF5UHJvcF0gPSAodGhpcy5xdWVyeVthcnJheVByb3BdIHx8IFtdKS5jb25jYXQoZW50cmllcyksIF9hKSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmFkZEZsYWdzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBmbGFncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGZsYWdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZFRvUXVlcnlBcnJheVByb3AoXCJmbGFnc1wiLCBmbGFncyk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmRlYnVnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBkZWJ1ZzogdHJ1ZSB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaWRzT25seSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRGbGFncyhcImlkc09ubHlcIik7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmlkc0FuZE5hbWVzT25seSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRGbGFncyhcImlkc0FuZE5hbWVzT25seVwiKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaW5jbHVkZUlkc09ubHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpbmNsdWRlSWRzT25seVwiKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaW5jbHVkZUlkc0FuZE5hbWVzT25seSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRGbGFncyhcImluY2x1ZGVJZHNBbmROYW1lc09ubHlcIik7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmJldHdlZW4gPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgZnJvbTogZnJvbSwgdG86IHRvIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5yb2xlID0gZnVuY3Rpb24gKHJvbGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgcm9sZTogcm9sZSB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaGFzRWRnZXNGcm9tID0gZnVuY3Rpb24gKGlkcykge1xyXG4gICAgICAgIGlmIChpZHMubGVuZ3RoID09PSAwIHx8IGlkcy5zb21lKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gIWlkOyB9KSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpZCBsaXN0IGdpdmVuIHRvIENvbGxlY3Rpb24uaGFzRWRnZXNGcm9tKFwiICsgSlNPTi5zdHJpbmdpZnkoaWRzKSArIFwiKVwiKTtcclxuICAgICAgICB2YXIgaGVmID0gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiaGFzRWRnZXNGcm9tXCIsIGlkcyk7XHJcbiAgICAgICAgcmV0dXJuIGhlZjtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaGFzRWRnZXNUbyA9IGZ1bmN0aW9uIChpZHMpIHtcclxuICAgICAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCB8fCBpZHMuc29tZShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICFpZDsgfSkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaWQgbGlzdCBnaXZlbiB0byBDb2xsZWN0aW9uLmhhc0VkZ2VzVG8oXCIgKyBKU09OLnN0cmluZ2lmeShpZHMpICsgXCIpXCIpO1xyXG4gICAgICAgIHZhciBoZXQgPSB0aGlzLmFkZFRvUXVlcnlBcnJheVByb3AoXCJoYXNFZGdlc1RvXCIsIGlkcyk7XHJcbiAgICAgICAgcmV0dXJuIGhldDtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaWQgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBpZHM6IFtpZF0gfSkuc2luZ2xlKHtcclxuICAgICAgICAgICAgb25aZXJvOiBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGVudGl0eSBpbiBcIiArIF90aGlzLnRhYmxlICsgXCIgd2l0aCBpZCBcIiArIGlkKTsgfSxcclxuICAgICAgICAgICAgb25NYW55OiBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBFcnJvcihcIk11bHRpcGxlIGVudHJpZXMgaW4gXCIgKyBfdGhpcy50YWJsZSArIFwiIHdpdGggaWQgXCIgKyBpZCk7IH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmlkcyA9IGZ1bmN0aW9uIChpZHMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgaWRzOiBpZHMgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBuYW1lOiBuYW1lIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS50YWdzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0YWdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdGFnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgdGFnczogdGFncyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuYnJhbmNoSWQgPSBmdW5jdGlvbiAoYnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5pbmNsdWRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBncmFwaHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBncmFwaHNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkVG9RdWVyeUFycmF5UHJvcChcImluY2x1ZGVcIiwgZ3JhcGhzKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuY2FjaGVPcHRpbWl6ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGNhY2hlQnVzdDogQ2FjaGVCdXN0LmdldENhY2hlQnVzdCh0aGlzLnRhYmxlLCB0aGlzLnF1ZXJ5LCB0aGlzLnJlcG8uZ2V0VXNlcigpLCB0aGlzLmluY2x1ZGVzKSB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUubXV0YXRpb25zT25FbXB0eSA9IGZ1bmN0aW9uIChtdXRhdGlvbkZhY3RvcnkpIHtcclxuICAgICAgICB2YXIgdHggPSBuZXcgQmF0Y2hSdW5uZXIoKTtcclxuICAgICAgICBtdXRhdGlvbkZhY3RvcnkodHgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBtdXRhdGlvbnNPbkVtcHR5OiB0eC5tdXRhdGlvblJlcXVlc3RzIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5zaW5nbGUgPSBmdW5jdGlvbiAodGhyb3dlcnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBfYSA9IHRocm93ZXJzIHx8IHt9LCBvblplcm8gPSBfYS5vblplcm8sIG9uTWFueSA9IF9hLm9uTWFueTtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChpdGVtcykge1xyXG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob25aZXJvKVxyXG4gICAgICAgICAgICAgICAgICAgIG9uWmVybygpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpbmdsZSBpdGVtIG9mIFwiICsgX3RoaXMudGFibGUgKyBcIiBleHBlY3RlZCB0byBiZSByZXR1cm5lZCBieSBxdWVyeSBcIiArIEpTT04uc3RyaW5naWZ5KF90aGlzLnF1ZXJ5KSArIFwiIGJ1dCBub25lIHdhcyBmb3VuZC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9uTWFueSlcclxuICAgICAgICAgICAgICAgICAgICBvbk1hbnkoKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNpbmdsZSBpdGVtIG9mIFwiICsgX3RoaXMudGFibGUgKyBcIiBleHBlY3RlZCB0byBiZSByZXR1cm5lZCBieSBxdWVyeSBcIiArIEpTT04uc3RyaW5naWZ5KF90aGlzLnF1ZXJ5KSArIFwiIGJ1dCBcIiArIGl0ZW1zLmxlbmd0aCArIFwiIHdhcyBmb3VuZC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zWzBdO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8qY29tYmluZUxhdGVzdDxUT3RoZXI+KG90aGVyOiBRdWVyeU9ic2VydmFibGU8VE90aGVyPikge1xyXG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXIoeCA9PiB4KS5jb21iaW5lTGF0ZXN0KG90aGVyKTtcclxuICAgIH0qL1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChkb2MsIGNoYW5nZXMsIGRlYm91bmNlKSB7XHJcbiAgICAgICAgaWYgKGRlYm91bmNlID09PSB2b2lkIDApIHsgZGVib3VuY2UgPSAxMDAwOyB9XHJcbiAgICAgICAgdGhpcy5yZXBvLndyaXRlci5tdXRhdGUoW3tcclxuICAgICAgICAgICAgICAgIG9wOiAndXBkYXRlJyxcclxuICAgICAgICAgICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxyXG4gICAgICAgICAgICAgICAgYnJhbmNoSWQ6IHRoaXMucXVlcnkuYnJhbmNoSWQsXHJcbiAgICAgICAgICAgICAgICBpZDogZG9jLmlkLFxyXG4gICAgICAgICAgICAgICAgZGVsdGFEb2M6IGNoYW5nZXMsXHJcbiAgICAgICAgICAgICAgICB0YXJnZXROYW1lOiBkb2MubmFtZVxyXG4gICAgICAgICAgICB9XSwgZGVib3VuY2UpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRSZWxhdGVkID0gZnVuY3Rpb24gKGlkLCBsYWJlbCwgcmVsYXRlZERvYykge1xyXG4gICAgICAgIHRoaXMucmVwby53cml0ZXIubXV0YXRlKFt7XHJcbiAgICAgICAgICAgICAgICBvcDogJ2FkZC1yZWxhdGVkJyxcclxuICAgICAgICAgICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxyXG4gICAgICAgICAgICAgICAgYnJhbmNoSWQ6IHRoaXMucXVlcnkuYnJhbmNoSWQsXHJcbiAgICAgICAgICAgICAgICBpZDogaWQsXHJcbiAgICAgICAgICAgICAgICBncmFwaFByb3A6IGxhYmVsLFxyXG4gICAgICAgICAgICAgICAgcmVsYXRlZERvYzogcmVsYXRlZERvY1xyXG4gICAgICAgICAgICB9XSwgMCk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnJlbW92ZVJlbGF0ZWQgPSBmdW5jdGlvbiAoaWQsIGxhYmVsLCByZWxhdGVkRG9jKSB7XHJcbiAgICAgICAgdGhpcy5yZXBvLndyaXRlci5tdXRhdGUoW3tcclxuICAgICAgICAgICAgICAgIG9wOiAncmVtb3ZlLXJlbGF0ZWQnLFxyXG4gICAgICAgICAgICAgICAgdGFibGU6IHRoaXMudGFibGUsXHJcbiAgICAgICAgICAgICAgICBicmFuY2hJZDogdGhpcy5xdWVyeS5icmFuY2hJZCxcclxuICAgICAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgIGdyYXBoUHJvcDogbGFiZWwsXHJcbiAgICAgICAgICAgICAgICByZWxhdGVkRG9jOiByZWxhdGVkRG9jXHJcbiAgICAgICAgICAgIH1dLCAwKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUudW5kb0xpbmsgPSBmdW5jdGlvbiAoaWQsIGxhYmVsLCByZWxhdGVkSWQpIHtcclxuICAgICAgICBpZiAoIXRoaXMucXVlcnkuYnJhbmNoSWQpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuZG8gbGlua3MgY2FuIG9ubHkgYmUgcGVyZm9ybWVkIG9uIGJyYW5jaGVzXCIpO1xyXG4gICAgICAgIHRoaXMucmVwby53cml0ZXIubXV0YXRlKFt7XHJcbiAgICAgICAgICAgICAgICBvcDogJ3VuZG8tbGluaycsXHJcbiAgICAgICAgICAgICAgICB0YWJsZTogdGhpcy50YWJsZSxcclxuICAgICAgICAgICAgICAgIGJyYW5jaElkOiB0aGlzLnF1ZXJ5LmJyYW5jaElkLFxyXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgZ3JhcGhQcm9wOiBsYWJlbCxcclxuICAgICAgICAgICAgICAgIHJlbGF0ZWRJZDogcmVsYXRlZElkXHJcbiAgICAgICAgICAgIH1dLCAwKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGlkcyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGlkc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlcG8ud3JpdGVyLm11dGF0ZShpZHMubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgb3A6ICdkZWxldGUnLFxyXG4gICAgICAgICAgICB0YWJsZTogX3RoaXMudGFibGUsXHJcbiAgICAgICAgICAgIGlkOiBpZFxyXG4gICAgICAgIH0pOyB9KSwgMCk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgIHRoaXMucmVwby5xdWVyeVNldC51bnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBLZWRCYWNrZW5kQ29sbGVjdGlvbjtcclxufShDb2xsZWN0aW9uKSk7XHJcbmV4cG9ydCB7IEtlZEJhY2tlbmRDb2xsZWN0aW9uIH07XHJcbi8qbWl4aW4oXHJcbiAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLFxyXG4gIE1hcHBlZENvbGxlY3Rpb24ucHJvdG90eXBlLFxyXG4gIFwibWFwXCIsIFwiZmxhdFwiLCBcImNvbmNhdFwiLCBcInJlbmRlclwiLCBcImxvYWRcIik7Ki9cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkYmFja2VuZC1jb2xsZWN0aW9uLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRRdWVyeSB9IGZyb20gJy4va2VkYmFja2VuZC1xdWVyeSc7XHJcbmltcG9ydCAqIGFzIEpzb25TY2hlbWEgZnJvbSAna2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb24nO1xyXG5pbXBvcnQgeyBxdWVyeUFycmF5IH0gZnJvbSAnLi91dGlscyc7XHJcbnZhciBRdWVyeVNldCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFF1ZXJ5U2V0KG11dGF0aW9uUXVldWUpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xyXG4gICAgICAgIHRoaXMucXVlcmllcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgUXVlcnlTZXQucHJvdG90eXBlLmNvbW1pdE11dGF0aW9ucyA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIHZlcnNpb24pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBQcm9taXNlLmFsbCh0aGlzLnF1ZXJpZXMubWFwKGZ1bmN0aW9uIChxKSB7IHJldHVybiBxLmNvbW1pdE11dGF0aW9ucyhtdXRhdGlvbnMsIHZlcnNpb24pOyB9KSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFudXBJbnZhbGlkUXVlcmllcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5jbGVhbnVwSW52YWxpZFF1ZXJpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5xdWVyaWVzID0gdGhpcy5xdWVyaWVzLmZpbHRlcihmdW5jdGlvbiAocSkge1xyXG4gICAgICAgICAgICBpZiAocS5pbnZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocS50aW1lb3V0SGFuZGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHEudGltZW91dEhhbmRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcS50aW1lb3V0SGFuZGxlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBRdWVyeVNldC5wcm90b3R5cGUubm90aWZ5U3Vic2NyaWJlcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9wdGltaXN0aWNNdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCk7XHJcbiAgICAgICAgdGhpcy5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKHEpIHtcclxuICAgICAgICAgICAgcS5ub3RpZnlTdWJzY3JpYmVycyhvcHRpbWlzdGljTXV0YXRpb25zKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBRdWVyeVNldC5wcm90b3R5cGUuZmluZFF1ZXJ5ID0gZnVuY3Rpb24gKHRhYmxlLCBxdWVyeSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJpZXMuZmluZChmdW5jdGlvbiAocSkgeyByZXR1cm4gcS5xdWVyeUtleSA9PT0gS2VkQmFja2VuZFF1ZXJ5LnF1ZXJ5S2V5KHRhYmxlLCBxdWVyeSk7IH0pO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5xdWVyeUxvY2FsbHkgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5LCBpbmNsdWRlcykge1xyXG4gICAgICAgIC8vIEZvciBub3csIG9ubHkgaGFuZGxlIHRoaXMgdmVyeSBjb21tb24gYW5kIHNwZWNpYWwgY2FzZSAod2hpY2hcclxuICAgICAgICAvLyB3aWxsIHNhdmUgYSBsb3Qgb2YgdW5uZXNjZXNzYXJ5IG5ldHdvcmsgdHJhZmZpYyBpZiBJIGFtIHRoaW5raW5nIHJpZ2h0Li4uKVxyXG4gICAgICAgIHZhciBtdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCk7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHF1ZXJ5IHdhbnRzIHRvIGdldCBhIHNpbmdsZSBlbnRpdHkgYnkgaXRzIElEOlxyXG4gICAgICAgIGlmIChxdWVyeS5pZHMgJiYgcXVlcnkuaWRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAvLyBBbmQgaWYgc28sIGlmIHdlIGhhdmUgYW4gb3V0Z29pbmcgbXV0YXRpb24gdG8gY3JlYXRlIHRoYXQgZW50aXR5OlxyXG4gICAgICAgICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ub3AgPT09ICdhZGQtcmVsYXRlZCcgJiYgbS5yZWxhdGVkRG9jLmlkID09PSBxdWVyeS5pZHNbMF07IH0pKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGVuIHJldHVybiBhbiBFTVBUWSByZXNwb25zZSwgc2lnbmFsbGluZyB0aGF0IHdlIGNhbiByZXNvbHZlIHRoaXMgbG9jYWxseSxcclxuICAgICAgICAgICAgICAgIC8vIGJ1dCBsZXQgdGhlIG9wdGlzdGljIGZlYXR1cmUgb2YgS2VkQmFja2VuZFF1ZXJ5IGFwcGx5IHRoZSBtdXRhdGlvbiBiZWZvcmVcclxuICAgICAgICAgICAgICAgIC8vIG5vdGlmeWluZyBzdWJzY3JpYmVycyAod2UgZG9uJ3Qgd2FudCBpdCB0byBiZSBwZXJzaXN0ZW50IGJlZm9yZSB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgICAgICAvLyBoYXMgYWNjZXB0ZWQgdGhlIG11dGF0aW9uKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIE9LLCBhbm90aGVyIHF1aXRlIGNvbW1vbiBjYXNlIGlzIHdoZW4gd2UgYXNrIGZvciBhIGNlcnRhaW4gSUQgYW5kIHRoYXQgSUQgcmVwbGllc1xyXG4gICAgICAgIC8vIHdpdGhpbiBhbm90aGVyIHF1ZXJ5XHJcbiAgICAgICAgaWYgKHF1ZXJ5Lmhhc0VkZ2VzRnJvbSB8fCBxdWVyeS5oYXNFZGdlc1RvKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gTm90IHBvc3NpYmxlIHRvIGhhbmRsZVxyXG4gICAgICAgIGlmICghcXVlcnkuaWRzKVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gRm9yIG5vdywganVzdCB0YWtlIGhpZ2h0IGZvciB0aGlzIHBhcnRpY3VsYXIgYW5kIG1vc3QgY29tbW9uIGNhc2UhXHJcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAocSkge1xyXG4gICAgICAgICAgICBpZiAoIXEuZ290SW5pdGlhbFJlc3BvbnNlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgaWYgKHEucXVlcnkuYnJhbmNoSWQgIT09IHF1ZXJ5LmJyYW5jaElkKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgaWYgKHEucXVlcnkuZmxhZ3MpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiOyAvLyBJdCB3b3VsZCBiZSBjb21wbGV4IHRvIHN1cHBvcnQgdmFyaW91cyBmbGFncy4gUXVlcnkncyBkYXRhIG1heSBpbmNsdWRlIGlkcyBvbmx5LiBDYW4ndCByZWx5IG9uIHRoZSBxdWVyeS5cclxuICAgICAgICAgICAgdmFyIHFJbmNsdWRlcyA9IHEuaW5jbHVkZXM7XHJcbiAgICAgICAgICAgIGlmIChxSW5jbHVkZXMubGVuZ3RoID4gMCAmJiAoIXF1ZXJ5LmluY2x1ZGUgfHwgcXVlcnkuaW5jbHVkZS5sZW5ndGggPT09IDApKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBpbmNsdWRlLCBidXQgdGhpcyBxdWVyeSBkb2VzLiBDaGVjayBpZiB3ZSBjYW4gZmluZCBvdXIgcmVzdWx0IHdpdGhpbiBpdC5cclxuICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IHFJbmNsdWRlcy5maW5kKGZ1bmN0aW9uIChsKSB7IHJldHVybiBKc29uU2NoZW1hLnRhYmxlc1txLnRhYmxlXVtcInJlbGF0aW9uc2hpcHNcIl1bbF0gPT09IHRhYmxlOyB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChsYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNfMSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBxLmRhdGE7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbnRpdHkgPSBfYVtfaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJEYXRhID0gcXVlcnlBcnJheShxdWVyeSwgZW50aXR5W2xhYmVsXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkRhdGEuZm9yRWFjaChmdW5jdGlvbiAocikgeyByZXR1cm4gcmVzXzFbci5pZF0gPSByOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdF8xID0gT2JqZWN0LmtleXMocmVzXzEpLm1hcChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIHJlc18xW2lkXTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSByZXR1cm4gcmVzdWx0IGlmIHdlIGNvdWxkIGxvb2sgdXAgZXZlcnkgcmVxdWVzdGVkIElEOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcXVlcnkuaWRzLmV2ZXJ5KGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gcmVzdWx0XzEuc29tZShmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5pZCA9PT0gaWQ7IH0pOyB9KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogcmVzdWx0XzEgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWluY2x1ZGVzLmV2ZXJ5KGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gcUluY2x1ZGVzLmluY2x1ZGVzKGxhYmVsKTsgfSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xyXG4gICAgICAgICAgICAvLyBMYXN0bHksIGlmIHRoZSBxdWVyeSBpbmNsdWRlcyBhbGwgZ3JhcGhzIHRoYXQgd2UgZG8sIHBpY2sgdGhlIHN1YnNldCBmcm9tIHRoYXQgcXVlcnkuXHJcbiAgICAgICAgICAgIC8vIENvbmNyZXRlIGV4YW1wbGU6IFdlIG9ic2VydmUgYSBjZXJ0YWluIFRhc2sgYnkgSUQgYW5kIHdhbnQgaXRzIGtub3dsZWRnZVJlcXVpcmVtZW50cyBhbG9uZyB3aXRoIGl0LFxyXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUncyBhbm90aGVyIHF1ZXJ5IG9mIGFsbCB0YXNrcyB0aGF0IGFsc28gaW5jbHVkZXMga25vd2xlZGdlUmVxdWlyZW1lbnRzLiBVc2UgaXQuIFxyXG4gICAgICAgICAgICBpZiAocS50YWJsZSA9PT0gdGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHRfMiA9IHF1ZXJ5QXJyYXkocXVlcnksIHEuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAvLyBPbmx5IHJldHVybiByZXN1bHQgaWYgd2UgY291bGQgbG9vayB1cCBldmVyeSByZXF1ZXN0ZWQgSUQ6XHJcbiAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5Lmlkcy5ldmVyeShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIHJlc3VsdF8yLnNvbWUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguaWQgPT09IGlkOyB9KTsgfSkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiByZXN1bHRfMiB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5xdWVyaWVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgcSA9IF9hW19pXTtcclxuICAgICAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKHEpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0YXRlXzEgPT09IFwib2JqZWN0XCIpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVfMS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgUXVlcnlTZXQucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICB2YXIgX2EgPSBzdWJzY3JpcHRpb24uY29sbGVjdGlvbiwgdGFibGUgPSBfYS50YWJsZSwgcXVlcnkgPSBfYS5xdWVyeSwgcmVwbyA9IF9hLnJlcG87XHJcbiAgICAgICAgdmFyIGtiUXVlcnkgPSB0aGlzLmZpbmRRdWVyeSh0YWJsZSwgcXVlcnkpO1xyXG4gICAgICAgIGlmICgha2JRdWVyeSkge1xyXG4gICAgICAgICAgICBrYlF1ZXJ5ID0gbmV3IEtlZEJhY2tlbmRRdWVyeSh0YWJsZSwgcXVlcnksIHJlcG8uZ2V0VXNlcigpLCByZXBvLCB0aGlzLm11dGF0aW9uUXVldWUpO1xyXG4gICAgICAgICAgICB0aGlzLnF1ZXJpZXMucHVzaChrYlF1ZXJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChrYlF1ZXJ5LnRpbWVvdXRIYW5kbGUpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChrYlF1ZXJ5LnRpbWVvdXRIYW5kbGUpO1xyXG4gICAgICAgICAgICAgICAga2JRdWVyeS50aW1lb3V0SGFuZGxlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBrYlF1ZXJ5LnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xyXG4gICAgfTtcclxuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBfYSA9IHN1YnNjcmlwdGlvbi5jb2xsZWN0aW9uLCB0YWJsZSA9IF9hLnRhYmxlLCBxdWVyeSA9IF9hLnF1ZXJ5LCByZXBvID0gX2EucmVwbztcclxuICAgICAgICB2YXIga2JRdWVyeSA9IHRoaXMuZmluZFF1ZXJ5KHRhYmxlLCBxdWVyeSk7XHJcbiAgICAgICAgaWYgKGtiUXVlcnkpIHtcclxuICAgICAgICAgICAgLy8gUHJvaGliaXQgZnVydGhlciBub3RpZmljYXRpb25zIHRvIHRoaXMgc3Vic2NyaXB0aW9uOlxyXG4gICAgICAgICAgICBrYlF1ZXJ5LnVuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIC8vIFJlbGVhc2UgdW5uZXNjZXNzYXJ5IG1lbW9yeSB3aGVuIHRoZXJlIGFyZSBubyBtb3JlIHN1YnNjcmlwdGlvbnMgb2YgdGhpcyBxdWVyeSwgYnkgcmVtb3ZpbmcgdGhlIHF1ZXJ5IGl0c2VsZlxyXG4gICAgICAgICAgICAvLyBUbyB0aGF0IGluIGEgZGVsYXllZCBtYW5uZXIsIHNvIHRoYXQgYW4gdW5zdWJzY3JpYmUoKSBmb2xsb3dlZCBieSBhbiBpbW1lZGlhdGUgc3Vic2NyaWJlKCkgZG9uJ3QgaGF2ZSB0byByZS1xdWVyeSB0aGUgc2VydmVyOlxyXG4gICAgICAgICAgICBpZiAoa2JRdWVyeS5zdWJzY3JpcHRpb25zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gU2NoZWR1bGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbiBpbiA1IG1pbnV0ZXM6XHJcbiAgICAgICAgICAgICAgICBrYlF1ZXJ5LnRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBrYlF1ZXJ5IHN0aWxsIGhhcyBubyBzdWJzY3JpcHRpb25zIChub3QgY2VydGFpbiEgQSBuZXcgc3Vic2NyaWJlciBtYXkgaGF2ZSBjb21lIGFsb25nLi4uKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrYlF1ZXJ5LnN1YnNjcmlwdGlvbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0aWxsIG5vIHN1YnNjcmlwdGlvbnMgb24gaXQsIHRpbWUgdG8gcmVsZWFzZSBzb21lIG1lbW9yeSBhbmQgZm9yZ2V0IHRoZSBpbi1tZW1vcnkgY2FjaGUgb2YgdGhlIHF1ZXJ5IHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5xdWVyaWVzID0gX3RoaXMucXVlcmllcy5maWx0ZXIoZnVuY3Rpb24gKHEpIHsgcmV0dXJuIHEgIT09IGtiUXVlcnk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRoaXMucXVlcmllcy5sZW5ndGggPiA1MCA/XHJcbiAgICAgICAgICAgICAgICAgICAgNTAwIDogLy8gRG9uJ3QgaG9zdCB0b28gbWFueSBxdWVyaWVzLiBHYXJiYWdlIGNvbGxlY3QgdGhpcyB3aXRoaW4gNTAwIG1zXHJcbiAgICAgICAgICAgICAgICAgICAgNSAqIDYwMDAwKTsgLy8gQWxsb3cgcXVlcnkgaW4gbWVtb3J5IGZvciBhbm90aGVyIDUgbWludXRlc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBRdWVyeVNldDtcclxufSgpKTtcclxuZXhwb3J0IHsgUXVlcnlTZXQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktc2V0LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IGdldFRhYmxlRnJvbUxhYmVsLCBicmFuY2hTZW5zaXRpdmUsIGdsb2JhbE9wIH0gZnJvbSAnLi91dGlscyc7XHJcbmltcG9ydCB7IG1lcmdlRGVsdGFzIH0gZnJvbSAnLi9kZWx0YS1tZXJnZSc7XHJcbnZhciBNdXRhdGlvblF1ZXVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gTXV0YXRpb25RdWV1ZSgpIHtcclxuICAgICAgICB0aGlzLnF1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5zYXZpbmdRdWV1ZSA9IFtdO1xyXG4gICAgfVxyXG4gICAgTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG11dGF0aW9ucykge1xyXG4gICAgICAgIHRoaXMucXVldWUgPSBNdXRhdGlvblF1ZXVlLm1lcmdlKHRoaXMucXVldWUsIG11dGF0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUubW92ZVRvU2F2aW5nUXVldWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zYXZpbmdRdWV1ZSA9IE11dGF0aW9uUXVldWUubWVyZ2UodGhpcy5zYXZpbmdRdWV1ZSwgdGhpcy5xdWV1ZSk7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xyXG4gICAgfTtcclxuICAgIE11dGF0aW9uUXVldWUucHJvdG90eXBlLmNsZWFyU2F2aW5nUXVldWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zYXZpbmdRdWV1ZSA9IFtdO1xyXG4gICAgfTtcclxuICAgIE11dGF0aW9uUXVldWUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zYXZpbmdRdWV1ZS5jb25jYXQodGhpcy5xdWV1ZSk7XHJcbiAgICB9O1xyXG4gICAgTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuYWZmZWN0c1F1ZXJ5ID0gZnVuY3Rpb24gKHRhYmxlLCBxdWVyeSwgaW5jbHVkZXMpIHtcclxuICAgICAgICB2YXIgbXV0YXRpb25zID0gdGhpcy5nZXQoKTtcclxuICAgICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ub3AgPT09ICdtZXJnZScgfHwgbS5vcCA9PT0gJ2NsZWFyLWJyYW5jaCc7IH0pKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAocXVlcnkuaWRzKSB7XHJcbiAgICAgICAgICAgIC8vIEEgcXVlcnkgd2l0aCBcImlkc1wiIGZpbHRlciB3aWxsIGJlIGVhc3kgdG8gZGV0ZWN0IGEgbm8tbWF0Y2ggb246XHJcbiAgICAgICAgICAgIHJldHVybiBtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobSkgeyByZXR1cm4gZ2xvYmFsT3AobSkgfHwgKCFicmFuY2hTZW5zaXRpdmUobSkgfHwgbS5icmFuY2hJZCA9PT0gcXVlcnkuYnJhbmNoSWQpICYmXHJcbiAgICAgICAgICAgICAgICBxdWVyeS5pZHMuaW5jbHVkZXMobS5pZCk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGlmIG11dGF0aW9ucyBhZmZlY3Qgc2FtZSBicmFuY2ggYW5kIHRhYmxlLiBDb3VsZCBiZSBkb25lIG1vcmUgZmluZSBncmFpbmVkLFxyXG4gICAgICAgIC8vIGJ1dCB0aGF0IHdvdWxkIG9ubHkgYmUgYSBzdWJvcHRpbWl6YXRpb24uXHJcbiAgICAgICAgcmV0dXJuIG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtLm9wID09PSAnZGVsZXRlJyA/XHJcbiAgICAgICAgICAgICAgICBtLnRhYmxlID09PSB0YWJsZSB8fCAoaW5jbHVkZXMuc29tZShmdW5jdGlvbiAobGFiZWwpIHsgcmV0dXJuIGdldFRhYmxlRnJvbUxhYmVsKHRhYmxlLCBsYWJlbCkgPT09IG0udGFibGU7IH0pKSA6XHJcbiAgICAgICAgICAgICAgICBnbG9iYWxPcChtKSA/IHRydWUgOlxyXG4gICAgICAgICAgICAgICAgICAgIG0uYnJhbmNoSWQgPT0gcXVlcnkuYnJhbmNoSWQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKG0udGFibGUgPT09IHRhYmxlIHx8IChtLm9wICE9PSAndXBkYXRlJyAmJiAoW3RhYmxlXS5jb25jYXQoaW5jbHVkZXMubWFwKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gZ2V0VGFibGVGcm9tTGFiZWwodGFibGUsIGxhYmVsKTsgfSkpLnNvbWUoZnVuY3Rpb24gKHRhYmxlKSB7IHJldHVybiBnZXRUYWJsZUZyb21MYWJlbChtLnRhYmxlLCBtLmdyYXBoUHJvcCkgPT09IHRhYmxlOyB9KSkpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBNdXRhdGlvblF1ZXVlLm1lcmdlID0gZnVuY3Rpb24gKHF1ZXVlMSwgcXVldWUyKSB7XHJcbiAgICAgICAgdmFyIG11dGFibGVRdWV1ZTEgPSBxdWV1ZTEuc2xpY2UoKTtcclxuICAgICAgICB2YXIgbXV0YWJsZVF1ZXVlMiA9IHF1ZXVlMi5zbGljZSgpO1xyXG4gICAgICAgIC8vaWYgKG11dGFibGVRdWV1ZTEubGVuZ3RoID4gMCkgZGVidWdnZXI7XHJcbiAgICAgICAgdmFyIGxlbiA9IHF1ZXVlMS5sZW5ndGg7XHJcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICB2YXIgbSA9IHF1ZXVlMVtpXTtcclxuICAgICAgICAgICAgaWYgKG0ub3AgPT09ICd1cGRhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3ZlcmxhcHBpbmdJZE9wSWR4ID0gbXV0YWJsZVF1ZXVlMi5maW5kSW5kZXgoZnVuY3Rpb24gKG5ld011dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdNdXQub3AgPT09ICd1cGRhdGUnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld011dC5icmFuY2hJZCA9PT0gbS5icmFuY2hJZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdNdXQuaWQgPT09IG0uaWQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChvdmVybGFwcGluZ0lkT3BJZHggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG11dGFibGVRdWV1ZTFbaV0gPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBtLCB7IGRlbHRhRG9jOiBtZXJnZURlbHRhcyhtLmRlbHRhRG9jLCBtdXRhYmxlUXVldWUyW292ZXJsYXBwaW5nSWRPcElkeF0uZGVsdGFEb2MpIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG11dGFibGVRdWV1ZTIuc3BsaWNlKG92ZXJsYXBwaW5nSWRPcElkeCwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcclxuICAgICAgICAgICAgX2xvb3BfMShpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG11dGFibGVRdWV1ZTEuY29uY2F0KG11dGFibGVRdWV1ZTIpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBNdXRhdGlvblF1ZXVlO1xyXG59KCkpO1xyXG5leHBvcnQgeyBNdXRhdGlvblF1ZXVlIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11dGF0aW9uLXF1ZXVlLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IG1lcmdlRGVsdGFzIH0gZnJvbSAnLi4vZGVsdGEtbWVyZ2UnO1xyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlNdXRhdGlvbnNPbkRlbHRhcyhicmFuY2hJZCwgZGVsdGFzLCBtdXRhdGlvbnMsIG9wdGltaXN0aWMsIHVzZXJEaXNwbGF5TmFtZSwgaGFzQWRkaXRpb25hbEZpbHRlcikge1xyXG4gICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAobSkge1xyXG4gICAgICAgIHN3aXRjaCAobS5vcCkge1xyXG4gICAgICAgICAgICBjYXNlICdhZGQtcmVsYXRlZCc6XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkUmVsYXRlZCBSZXBvTXV0YXRpb25cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpZiAoIWhhc0FkZGl0aW9uYWxGaWx0ZXIgJiYgbS5icmFuY2hJZCA9PT0gYnJhbmNoSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWx0YXMgPSBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2FkZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VJZDogbS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldElkOiBtLnJlbGF0ZWREb2MuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbS5ncmFwaFByb3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VUYWJsZTogbS50YWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtZXRhOiBvcHRpbWlzdGljID8gJ2FkZGluZycgOiAncGVyc2lzdGVkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogbS5yZWxhdGVkRG9jLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmlidXRvcjogdXNlckRpc3BsYXlOYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLmNvbmNhdChkZWx0YXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2NsZWFyLWJyYW5jaCc6XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gQ2xlYXJCcmFuY2ggUmVwb011dGF0aW9uXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgaWYgKG0uYnJhbmNoSWQgPT09IGJyYW5jaElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGFzID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBEZWxldGUgUmVwb011dGF0aW9uXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gVGhpcyB0eXBlIG9mIG11dGF0aW9uIGNhbiBub3QgYmUgcGVyZm9ybWVkIG9udG8gYnJhbmNoZXMuIFRoZXJlJ3Mgbm8gYnJhbmNoSWQgcHJvcGVydHkgb24gbS5cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdtZXJnZSc6XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gTWVyZ2UgUmVwb011dGF0aW9uXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgaWYgKG0uYnJhbmNoSWQgPT09IGJyYW5jaElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsdGFzID0gW107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtLnRhcmdldEJyYW5jaElkID09PSBicmFuY2hJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY2hhbmdlIHdpbGwgYXBwZW5kIG5ldyBkZWx0YXMgdG8gb3VyIGRlbHRhcyBhcnJheSBidXQgd2UgZG9uJ3Qga25vdyB3aGF0IHdvdWxkIGNvbWUuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTmVlZCB0byByZWZldGNoIGZyb20gc2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW1pc3RpYylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG51bGwgfTsgLy8gQ2FsbGVyIHNob3VsZCBjaGVjayBmb3IgbnVsbCBhbmQgcmUtZmV0Y2ggZGF0YSBmcm9tIHNlcnZlci5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdyZW1vdmUtcmVsYXRlZCc6XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlLVJlbGF0ZWQgUmVwb011dGF0aW9uXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc0FkZGl0aW9uYWxGaWx0ZXIgfHwgbS5icmFuY2hJZCAhPT0gYnJhbmNoSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgICAgIGRlbHRhcyA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdyZW1vdmUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VJZDogbS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SWQ6IG0ucmVsYXRlZERvYy5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogbS5yZWxhdGVkRG9jLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBtLmdyYXBoUHJvcCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlVGFibGU6IG0udGFibGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9yOiB1c2VyRGlzcGxheU5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkbWV0YTogb3B0aW1pc3RpYyA/ICdhZGRpbmcnIDogJ3BlcnNpc3RlZCdcclxuICAgICAgICAgICAgICAgICAgICB9XS5jb25jYXQoZGVsdGFzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd1bmRvLWxpbmsnOlxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vIFVuZG8tTGluayBSZXBvTXV0YXRpb25cclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICBpZiAobS5icmFuY2hJZCAhPT0gYnJhbmNoSWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gZGVsdGFzLmZpbmRJbmRleChmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGQudHlwZSA9PT0gJ2FkZCcgfHwgZC50eXBlID09PSAncmVtb3ZlJyB8fCBkLnR5cGUgPT09ICd1bmRvLWxpbmsnKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5zb3VyY2VJZCA9PT0gbS5pZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC50YXJnZXRJZCA9PT0gbS5yZWxhdGVkSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRm91bmQgYW4gXCJhZGRcIiBvciBcInJlbW92ZVwiIGRlbHRhIHRvIGNoYW5nZTpcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW1pc3RpYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGFSZWxhdGlvbiA9IGRlbHRhc1tpZHhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSBleGlzdGluZyBhZGQvcmVtb3ZlIGRlbHRhIGFzIGN1cnJlbmx0eSBiZWluZyBkZWxldGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhcyA9IGRlbHRhcy5zbGljZSgwLCBpZHgpLmNvbmNhdChbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0c2xpYl8xLl9fYXNzaWduKHt9LCBkZWx0YVJlbGF0aW9uLCB7ICRtZXRhOiBvcHRpbWlzdGljID8gJ3JlbW92aW5nJyA6ICdwZXJzaXN0ZWQnIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sIGRlbHRhcy5zbGljZShpZHggKyAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQZXJzaXN0ZWQuIEp1c3QgcmVtb3ZlIGl0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXMgPSBkZWx0YXMuc2xpY2UoMCwgaWR4KS5jb25jYXQoZGVsdGFzLnNsaWNlKGlkeCArIDEpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndXBkYXRlJzpcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgUmVwb011dGF0aW9uXHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgaWYgKG0uYnJhbmNoSWQgIT09IGJyYW5jaElkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IGRlbHRhcy5maW5kSW5kZXgoZnVuY3Rpb24gKGRlbHRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWx0YS50eXBlID09PSAnbW9kaWZ5JyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEudGFyZ2V0SWQgPT09IG0uaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkeCA8IDAgJiYgIWhhc0FkZGl0aW9uYWxGaWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbW9kaWZ5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogbS50YWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZDogbS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lOiBtLnRhcmdldE5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbS5kZWx0YURvYyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVGltZTogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmlidXRvcnM6IFt1c2VyRGlzcGxheU5hbWVdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtZXRhOiBvcHRpbWlzdGljID8gJ2FkZGluZycgOiAncGVyc2lzdGVkJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLmNvbmNhdChkZWx0YXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nRGVsdGFEb2MgPSBkZWx0YXNbaWR4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyaWJ1dG9ycyA9IGV4aXN0aW5nRGVsdGFEb2MuY29udHJpYnV0b3JzLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY29udHJpYnV0b3JzLmluY2x1ZGVzKHVzZXJEaXNwbGF5TmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9ycy5wdXNoKHVzZXJEaXNwbGF5TmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0RhdGEgPSBtZXJnZURlbHRhcyhleGlzdGluZ0RlbHRhRG9jLmRhdGEsIG0uZGVsdGFEb2MsIHsgcmVtb3ZlVW5zZXRQcm9wczogdHJ1ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpbWlzdGljICYmIE9iamVjdC5rZXlzKG5ld0RhdGEpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tbWl0dGVkIG11dGF0aW9uIHRoYXQgcmVzZXRzIGEgZGVsdGFEb2MuIFJlbW92ZSB0aGUgZGVsdGFEb2MgZW50aXJlbHk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWx0YXMgPSBkZWx0YXMuc2xpY2UoMCwgaWR4KS5jb25jYXQoZGVsdGFzLnNsaWNlKGlkeCArIDEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzID0gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21vZGlmeScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBtLnRhYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZDogbS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogbS50YXJnZXROYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBuZXdEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVGltZTogRGF0ZS5ub3coKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzOiBjb250cmlidXRvcnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtZXRhOiBvcHRpbWlzdGljID8gJ3VwZGF0aW5nJyA6ICdwZXJzaXN0ZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uY29uY2F0KGRlbHRhcy5zbGljZSgwLCBpZHgpLCBkZWx0YXMuc2xpY2UoaWR4ICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGZvciAodmFyIF9pID0gMCwgbXV0YXRpb25zXzEgPSBtdXRhdGlvbnM7IF9pIDwgbXV0YXRpb25zXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIG0gPSBtdXRhdGlvbnNfMVtfaV07XHJcbiAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKG0pO1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGVfMSA9PT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXzEudmFsdWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGVsdGFzO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcGx5LW11dGF0aW9ucy1vbi1kZWx0YXMuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgSHR0cEVycm9yIH0gZnJvbSAnLi4vLi4va2VkLWJhY2tlbmQtY2xpZW50JztcclxuaW1wb3J0IHsgYXBwbHlNdXRhdGlvbnNPbkRlbHRhcyB9IGZyb20gJy4vYXBwbHktbXV0YXRpb25zLW9uLWRlbHRhcyc7XHJcbnZhciBEZWx0YUNhY2hlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRGVsdGFDYWNoZShnZXRDbGllbnQsIGdldFVzZXIsIGdldFVzZXJEaXNwbGF5TmFtZSkge1xyXG4gICAgICAgIHRoaXMuZ2V0Q2xpZW50ID0gZ2V0Q2xpZW50O1xyXG4gICAgICAgIHRoaXMuZ2V0VXNlciA9IGdldFVzZXI7XHJcbiAgICAgICAgdGhpcy5nZXRVc2VyRGlzcGxheU5hbWUgPSBnZXRVc2VyRGlzcGxheU5hbWU7XHJcbiAgICAgICAgdGhpcy5sb29rdXAgPSB7fTtcclxuICAgIH1cclxuICAgIERlbHRhQ2FjaGUucHJvdG90eXBlLmFwcGx5TXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9ucywgX2EpIHtcclxuICAgICAgICB2YXIgb3B0aW1pc3RpYyA9IChfYSA9PT0gdm9pZCAwID8geyBvcHRpbWlzdGljOiBmYWxzZSB9IDogX2EpLm9wdGltaXN0aWM7XHJcbiAgICAgICAgLy8gQXBwbHkgbXV0YXRpb25zIGxvY2FsbHkgb250byB0aGUgRGVsdGFDYWNoZSBhbmQgbm90aWZ5IHRoZWlyIHN1YnNjcmliZXJzXHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IE9iamVjdC5rZXlzKHRoaXMubG9va3VwKTsgX2kgPCBfYi5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHF1ZXJ5S2V5ID0gX2JbX2ldO1xyXG4gICAgICAgICAgICB2YXIgY2FjaGVFbnRyeSA9IHRoaXMubG9va3VwW3F1ZXJ5S2V5XTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlRW50cnkudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIEluc3RlYWQgaGVyZTogU3RvcmUgdGhlIG11dGF0aW9ucyBvbiBjYWNoZUVudHJ5LiBObyBtYXR0ZXIgaWYgaXQgeWV0IGhhcyB2YWx1ZSBvciBub3QuXHJcbiAgICAgICAgICAgICAgICAvLyBUaGVuIGFwcGx5IG11dGF0aW9uIHdoZW5ldmVyIHN1YnNjcmliaW5nISAoQmV0dGVyIGhhbmRsaW5nIG9mIG11dGF0aW9ucyB0aGF0IGFycml2ZXMgYmVmb3JlIGZldGNoKCkgaXMgZG9uZSlcclxuICAgICAgICAgICAgICAgIC8vIChTZWUgaG93IEkgaGFuZGxlIHRoaXMgaW4gcXVlcnktc2V0LnRzKVxyXG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYXBwbHlNdXRhdGlvbnNPbkRlbHRhcyhjYWNoZUVudHJ5LnF1ZXJ5LmJyYW5jaElkLCBjYWNoZUVudHJ5LnZhbHVlLCBtdXRhdGlvbnMsIG9wdGltaXN0aWMsIHRoaXMuZ2V0VXNlckRpc3BsYXlOYW1lKCksICEhY2FjaGVFbnRyeS5xdWVyeS50YWdzKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBtdXRhdGlvbiByZXF1aXJlcyBjYWNoZUVudHJ5IHRvIGJlIHJlZmV0Y2hlZCBmcm9tIHNlcnZlclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW1pc3RpYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDYWxsZXIgaGFzIHN1Y2Nlc3NmdWxseSBwZXJmb3JtZWQgdGhlIG11dGF0aW9ucyBhbmQgZ290IHN1Y2Nlc3MgYmFjayBmcm9tIHNlcnZlci5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyBvayB0byByZWZldGNoIHRoZSBkZWx0YXMgZnJvbSBzZXJ2ZXIgbm93OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUVudHJ5LmZldGNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFmdGVyIGZldGNoIGNvbXBsZXRlcywgaXQgd2lsbCBub3RpZnkgdGhlIHN1YnNjcmliZXJzLlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gY2FjaGVFbnRyeS52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhY2hlRW50cnkub3B0aW1pc3RpY1ZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpbWlzdGljKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUVudHJ5LnZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVFbnRyeS5ub3RpZnkobmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIERlbHRhQ2FjaGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChxdWVyeSwgb2JzZXJ2ZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBjYWNoZUVudHJ5ID0gdGhpcy5sb29rdXBbcXVlcnkuYnJhbmNoSWQgKyBxdWVyeS50YWdzXTtcclxuICAgICAgICBpZiAoIWNhY2hlRW50cnkpIHtcclxuICAgICAgICAgICAgY2FjaGVFbnRyeSA9IG5ldyBEZWx0YUNhY2hlRW50cnkodGhpcy5nZXRDbGllbnQoKSwgcXVlcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmxvb2t1cFtxdWVyeS5icmFuY2hJZCArIHF1ZXJ5LnRhZ3NdID0gY2FjaGVFbnRyeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNhY2hlRW50cnkuY2xlYW51cFRpbWVyKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChjYWNoZUVudHJ5LmNsZWFudXBUaW1lcik7XHJcbiAgICAgICAgICAgIGNhY2hlRW50cnkuY2xlYW51cFRpbWVyID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcclxuICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNhY2hlRW50cnkuc3Vic2NyaWJlcnMgPSBjYWNoZUVudHJ5LnN1YnNjcmliZXJzLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbyA9IF9hLm9ic2VydmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvICE9PSBvYnNlcnZlcjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlRW50cnkuc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVFbnRyeS5jbGVhbnVwVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlRW50cnkuc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMubG9va3VwW3F1ZXJ5LmJyYW5jaElkICsgcXVlcnkudGFnc107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjYWNoZUVudHJ5LnN1YnNjcmliZXJzLnB1c2goeyBvYnNlcnZlcjogb2JzZXJ2ZXIsIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uIH0pO1xyXG4gICAgICAgIGlmIChjYWNoZUVudHJ5LnZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIFZhbHVlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSByZXRyaWV2ZWQgYWxyZWFkeS4gUGljayBmcm9tIGNhY2hlLlxyXG4gICAgICAgICAgICBvYnNlcnZlcihjYWNoZUVudHJ5Lm9wdGltaXN0aWNWYWx1ZSB8fCBjYWNoZUVudHJ5LnZhbHVlLCBudWxsLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjYWNoZUVudHJ5LmlzRmV0Y2hpbmcpIHtcclxuICAgICAgICAgICAgLy8gQSB2YWx1ZSBpcyBvbiBpdHMgd2F5LiBTaXQgYmFjayBhbmQgcmVsYXguIEFsbCByZWdpc3RlcmVkXHJcbiAgICAgICAgICAgIC8vIG9ic2VydmVycyAoaW5jbHVkaW5nIHRoaXMgb25lKSB3aWxsIGJlIG5vdGlmaWVkIHdoZW4gZGF0YSBhcnJpdmVzXHJcbiAgICAgICAgICAgIC8vIG9yIGZhaWxzLlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjYWNoZUVudHJ5LmVycm9yKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGNhY2hlRW50cnkuZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjYWNoZUVudHJ5LmZldGNoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERlbHRhQ2FjaGU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IERlbHRhQ2FjaGUgfTtcclxudmFyIERlbHRhQ2FjaGVFbnRyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERlbHRhQ2FjaGVFbnRyeShjbGllbnQsIHF1ZXJ5KSB7XHJcbiAgICAgICAgdGhpcy5mZXRjaE9wZXJhdGlvbklkID0gMDsgLy8gTWFrZXMgc3VyZSBhIHJlLWZldGNoIHdpbGwgZGlzY2FyZCB0aGUgcmVzdWx0IGZyb20gYW55IG9uZ29pbmcgZmV0Y2guXHJcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XHJcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBudWxsO1xyXG4gICAgICAgIHRoaXMub3B0aW1pc3RpY1ZhbHVlID0gbnVsbDtcclxuICAgICAgICB0aGlzLnN1YnNjcmliZXJzID0gW107XHJcbiAgICAgICAgdGhpcy5pc0ZldGNoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jbGVhbnVwVGltZXIgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgRGVsdGFDYWNoZUVudHJ5LnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBmZXRjaE9wZXJhdGlvbklkID0gKyt0aGlzLmZldGNoT3BlcmF0aW9uSWQ7XHJcbiAgICAgICAgdGhpcy5pc0ZldGNoaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmZldGNoRnJvbVNlcnZlcigpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIFN1Y2Nlc3NcclxuICAgICAgICAgICAgaWYgKGZldGNoT3BlcmF0aW9uSWQgPT09IF90aGlzLmZldGNoT3BlcmF0aW9uSWQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmlzRmV0Y2hpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHZhbHVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGIuZGF0ZVRpbWUgLSBhLmRhdGVUaW1lOyB9KTsgLy8gTGF0ZXN0IGZpcnN0XHJcbiAgICAgICAgICAgICAgICBfdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub3B0aW1pc3RpY1ZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZnkodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgIC8vIEZhaWxcclxuICAgICAgICAgICAgaWYgKGZldGNoT3BlcmF0aW9uSWQgPT09IF90aGlzLmZldGNoT3BlcmF0aW9uSWQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmlzRmV0Y2hpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmVycm9yID0gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5mYWlsKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIERlbHRhQ2FjaGVFbnRyeS5wcm90b3R5cGUuZmV0Y2hGcm9tU2VydmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnF1ZXJ5LmJyYW5jaElkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWx0YXMgb25seSBhdmFpbGFibGUgb24gYnJhbmNoZXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jbGllbnQuaHR0cC5nZXQoJ2RlbHRhcycsIHRoaXMucXVlcnkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyA+PSAzMDAgfHwgcmVzLnN0YXR1cyA8IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIERlbHRhQ2FjaGVFbnRyeS5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuc3Vic2NyaWJlcnM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBfYiA9IF9hW19pXSwgb2JzZXJ2ZXIgPSBfYi5vYnNlcnZlciwgc3Vic2NyaXB0aW9uID0gX2Iuc3Vic2NyaXB0aW9uO1xyXG4gICAgICAgICAgICBvYnNlcnZlcih2YWx1ZSwgbnVsbCwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgRGVsdGFDYWNoZUVudHJ5LnByb3RvdHlwZS5mYWlsID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdmFyIGNvcHkgPSB0aGlzLnN1YnNjcmliZXJzLnNsaWNlKCk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY29weV8xID0gY29weTsgX2kgPCBjb3B5XzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSA9IGNvcHlfMVtfaV0sIG9ic2VydmVyID0gX2Eub2JzZXJ2ZXIsIHN1YnNjcmlwdGlvbiA9IF9hLnN1YnNjcmlwdGlvbjtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBEZWx0YUNhY2hlRW50cnk7XHJcbn0oKSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbHRhLWNhY2hlLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IE11dGF0aW9uUXVldWUgfSBmcm9tICcuL211dGF0aW9uLXF1ZXVlJztcclxuaW1wb3J0IHsgQmF0Y2hSdW5uZXIgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xyXG5pbXBvcnQgeyB0YWJsZXMgfSBmcm9tICdrZWRiYWNrZW5kLXNjaGVtYS9zY2hlbWEuanNvbic7XHJcbmltcG9ydCB7IENhY2hlQnVzdCB9IGZyb20gJy4vY2FjaGUtYnVzdCc7XHJcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgRGVsdGFDYWNoZSB9IGZyb20gJy4vZGVsdGEtY29sbGVjdGlvbi9kZWx0YS1jYWNoZSc7XHJcbnZhciBLZWRCYWNrZW5kV3JpdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZFdyaXRlcihtdXRhdGlvblF1ZXVlLCBxdWVyeVNldCwgZ2V0Q2xpZW50LCBnZXRVc2VyLCBnZXRVc2VyRGlzcGxheU5hbWUpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xyXG4gICAgICAgIHRoaXMucXVlcnlTZXQgPSBxdWVyeVNldDtcclxuICAgICAgICB0aGlzLmdldENsaWVudCA9IGdldENsaWVudDtcclxuICAgICAgICB0aGlzLmdldFVzZXIgPSBnZXRVc2VyO1xyXG4gICAgICAgIHRoaXMuZ2V0VXNlckRpc3BsYXlOYW1lID0gZ2V0VXNlckRpc3BsYXlOYW1lO1xyXG4gICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5faXNTYXZpbmdQcm9taXNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRWZXJzaW9uID0gMDtcclxuICAgICAgICB0aGlzLnBlcnNpc3RlZFZlcnNpb24gPSBuZXcgRW1pdHRlcigwKTtcclxuICAgICAgICB0aGlzLmVycm9yU3Vic2NyaWJlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaWJlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLmRlbHRhQ2FjaGUgPSBuZXcgRGVsdGFDYWNoZShnZXRDbGllbnQsIGdldFVzZXIsIGdldFVzZXJEaXNwbGF5TmFtZSk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUsIFwiaXNTYXZpbmdcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gISF0aGlzLl9pc1NhdmluZ1Byb21pc2U7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLCBcImlzRWRpdGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKS5sZW5ndGggPiAwOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmVycm9yU3Vic2NyaWJlcnMucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdWJzY3JpYmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmVycm9yU3Vic2NyaWJlcnMgPSB0aGlzLmVycm9yU3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzICE9PSBjYWxsYmFjazsgfSk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN1YnNjcmliZXJzID0gdGhpcy5zdGF0ZVN1YnNjcmliZXJzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcyAhPT0gY2FsbGJhY2s7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLmRpc3BhdGNoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIHJldHJ5YWJsZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lcnJvclN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgcmV0cnlhYmxlLCBfdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKF8pIHsgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLmRpc3BhdGNoU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKF90aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoXykgeyB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUubXV0YXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgZGVib3VuY2UpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUuYWRkKG11dGF0aW9ucyk7XHJcbiAgICAgICAgKyt0aGlzLmN1cnJlbnRWZXJzaW9uO1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgIHRoaXMucXVlcnlTZXQubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICAgICAgICB0aGlzLmRlbHRhQ2FjaGUuYXBwbHlNdXRhdGlvbnModGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpLCB7IG9wdGltaXN0aWM6IHRydWUgfSk7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9pc1NhdmluZ1Byb21pc2UpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXRJZClcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0SWQpO1xyXG4gICAgICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSBzZXRUaW1lb3V0KHRoaXMuc2F2ZS5iaW5kKHRoaXMpLCBkZWJvdW5jZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIGlzU2F2aW5nLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nLCBiZWNhc2UgaXQgd2lsbCByZS1jaGVjayBpZiBhZGRpdGlvbmFsXHJcbiAgICAgICAgLy8gbXV0YXRpb25zIGhhdmUgY29tZSwgd2hlbiBzYXZpbmcgaXMgZG9uZS5cclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5yZXRyeVNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZSgpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLndhaXRGb3JWZXJzaW9uVG9QZXJzaXN0ID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBlcnNpc3RlZFZlcnNpb247XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wZXJzaXN0ZWRWZXJzaW9uLmxvYWQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJzaXN0ZWRWZXJzaW9uID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShwZXJzaXN0ZWRWZXJzaW9uIDwgdmVyc2lvbikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoKTsgLy8gQmUgbW9yZSBlYWdlciB0byBzYXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucGVyc2lzdGVkVmVyc2lvbi5maWx0ZXIoZnVuY3Rpb24gKHBlcnNpc3RlZFZlcnNpb24pIHsgcmV0dXJuIHBlcnNpc3RlZFZlcnNpb24gPj0gdmVyc2lvbjsgfSkubG9hZCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAzO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXRJZClcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXRJZCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX2lzU2F2aW5nUHJvbWlzZSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzU2F2aW5nUHJvbWlzZTtcclxuICAgICAgICBpZiAoIXRoaXMuaXNFZGl0ZWQpXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2lzU2F2aW5nUHJvbWlzZSA9IHRoaXMuX3NhdmUoKTtcclxuICAgICAgICB0aGlzLl9pc1NhdmluZ1Byb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkgeyB9KS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLl9pc1NhdmluZ1Byb21pc2UgPSBudWxsOyB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNTYXZpbmdQcm9taXNlO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLl9zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbXV0YXRpb25zLCB2ZXJzaW9uLCBtdXRhdGlvblJlcXVlc3RzLCByZXNfMSwgZXRhZ011dGF0aW9ucywgZXJyb3JfMTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoU3RhdGVDaGFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25zID0gdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uID0gdGhpcy5jdXJyZW50VmVyc2lvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlLm1vdmVUb1NhdmluZ1F1ZXVlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uUmVxdWVzdHMgPSB0aGlzLm1hcE11dGF0aW9ucyhtdXRhdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDYsIDExLCAxMl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmdldENsaWVudCgpLmJhdGNoKG11dGF0aW9uUmVxdWVzdHMpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc18xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldGFnTXV0YXRpb25zID0gT2JqZWN0LmtleXMocmVzXzEubmV3RXRhZ3MpLm1hcChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcDogJ3VwZGF0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhRG9jOiB7ICRldGFnOiByZXNfMS5uZXdFdGFnc1tpZF0gfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWU6IG51bGwgLy8gV2UgZG9uJ3QgaGF2ZSB0aGUgdGFyZ2V0IG5hbWUuIEJ1dCB0aGlzIG11dGF0aW9uIHdvbid0IGJlIHZpc2libGUgaW4gYSBEZWx0YUNvbGxlY3Rpb24gYW55d2F5LCBzbyBpdCB3b250IGJlIHVzZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSBjYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDYWNoZUJ1c3QuaW52YWxpZGF0ZUNhY2hlKG11dGF0aW9uUmVxdWVzdHMsIHRoaXMuZ2V0VXNlcigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tbW1pdCBtdXRhdGlvbnMgYWxvbmcgd2l0aCBldGFnTXV0YXRpb25zIGludG8gcXVlcmllcyBjYWNoZWQgZGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcnNpc3RlZFZlcnNpb24uZGlzcGF0Y2godmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsdGFDYWNoZS5hcHBseU11dGF0aW9ucyhtdXRhdGlvbnMsIHsgb3B0aW1pc3RpYzogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucXVlcnlTZXQuY29tbWl0TXV0YXRpb25zKE11dGF0aW9uUXVldWUubWVyZ2UobXV0YXRpb25zLCBldGFnTXV0YXRpb25zKSwgdmVyc2lvbildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbiBzdWNjZXNzLCBjbGVhciBzYXZpbmcgcXVldWUgYXMgdGhlIG11dGF0aW9ucyB3aWxsIG5vdyBiZSBjb21taXR0ZWQgdG8gYWxsIHF1ZXJ5J3MgZGF0YSBpbnN0ZWFkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUuY2xlYXJTYXZpbmdRdWV1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoU3RhdGVDaGFuZ2UoKTsgLy8gaXNFZGl0ZWQgbWF5IGhhdmUgdHVybmVkIHRvIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmFsbHksIG5vdGlmeSBzdWJzY3JpYmVycyBzbyB0aGF0IHZpZXdzIGdldCB1cGRhdGVkIHdpdGggY29tbWl0dGVkIHJlc3VsdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWVyeVNldC5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCkubGVuZ3RoID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRpdGlvbmFsIG11dGF0aW9ucyBoYXBwZW5kIHdoaWxlIHdlIHdlcmUgc2F2aW5nLiBIYW5kbGUgdGhlbSBhcyB3ZWxsLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLl9zYXZlKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkaXRpb25hbCBtdXRhdGlvbnMgaGFwcGVuZCB3aGlsZSB3ZSB3ZXJlIHNhdmluZy4gSGFuZGxlIHRoZW0gYXMgd2VsbC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzMgLypicmVhayovLCAxMl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcnNpc3RlZFZlcnNpb24uZGlzcGF0Y2hFcnJvcihlcnJvcl8xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoZXJyb3JfMSAmJiBlcnJvcl8xLm5hbWUgJiYgZXJyb3JfMS5uYW1lLnN0YXJ0c1dpdGgoXCJodHRwNFwiKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBY2Nlc3MgQ29udHJvbCBkZW5pZWQsIGJhZCByZXF1ZXN0IG9yIHNpbWlsYXIuIFRocm93IG11dGF0aW9ucyBhd2F5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXJyb3IoZXJyb3JfMSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUuY2xlYXJTYXZpbmdRdWV1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoU3RhdGVDaGFuZ2UoKTsgLy8gaXNFZGl0ZWQgbWF5IGhhdmUgdHVybmVkIHRvIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTZXQubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpLmxlbmd0aCA+IDApKSByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG8gaG8hIEFkZGl0aW9uYWwgbXV0YXRpb25zIGhhcHBlbmQgd2hpbGUgd2Ugd2VyZSBzYXZpbmcuIEhhbmRsZSB0aGVtIGFsb25lLiBUSGV5IG1pZ2h0IGJlIG1vcmUgbHVja3kuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX3NhdmUoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIbyBobyEgQWRkaXRpb25hbCBtdXRhdGlvbnMgaGFwcGVuZCB3aGlsZSB3ZSB3ZXJlIHNhdmluZy4gSGFuZGxlIHRoZW0gYWxvbmUuIFRIZXkgbWlnaHQgYmUgbW9yZSBsdWNreS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMgLypicmVhayovLCAxMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXJyb3IoZXJyb3JfMSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFszIC8qYnJlYWsqLywgMTJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUubWFwTXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9ucykge1xyXG4gICAgICAgIHZhciBiciA9IG5ldyBCYXRjaFJ1bm5lcigpO1xyXG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAobS5vcCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndXBkYXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBici51cGRhdGUobS50YWJsZSwgbS5pZCwgbS5kZWx0YURvYywgbS5icmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhZGQtcmVsYXRlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtLnJlbGF0ZWREb2MuJGV0YWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gJGV0YWcgbWVhbnMgdGhpcyBpcyBhIG5ldyBkb2N1bWVudC4gQWRkIGl0IGJlZm9yZSBsaW5raW5nIHRvIGl0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBici5hZGQodGFibGVzW20udGFibGVdLnJlbGF0aW9uc2hpcHNbbS5ncmFwaFByb3BdLCBtLnJlbGF0ZWREb2MsIG0uYnJhbmNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBici5saW5rMihtLnRhYmxlLCBtLmlkLCBtLmdyYXBoUHJvcCwgbS5yZWxhdGVkRG9jLmlkLCBtLmJyYW5jaElkKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JlbW92ZS1yZWxhdGVkJzpcclxuICAgICAgICAgICAgICAgICAgICBici51bmxpbmsyKG0udGFibGUsIG0uaWQsIG0uZ3JhcGhQcm9wLCBtLnJlbGF0ZWREb2MuaWQsIG0uYnJhbmNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndW5kby1saW5rJzpcclxuICAgICAgICAgICAgICAgICAgICBici51bmRvTGluayhtLnRhYmxlLCBtLmlkLCBtLmdyYXBoUHJvcCwgbS5yZWxhdGVkSWQsIG0uYnJhbmNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBici5kZWxldGUobS50YWJsZSwgbS5pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjbGVhci1icmFuY2gnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyLmNsZWFyQnJhbmNoKG0uYnJhbmNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbWVyZ2UnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyLm1lcmdlKG0uYnJhbmNoSWQsIG0udGFyZ2V0QnJhbmNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGJyLm11dGF0aW9uUmVxdWVzdHM7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEtlZEJhY2tlbmRXcml0ZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEtlZEJhY2tlbmRXcml0ZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkYmFja2VuZC13cml0ZXIuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uLy4uL29ic2VydmFibGUnO1xyXG52YXIgRGVsdGFDb2xsZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRGVsdGFDb2xsZWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRGVsdGFDb2xsZWN0aW9uKGRlbHRhQ2FjaGUsIHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBfdGhpcy5kZWx0YUNhY2hlLnN1YnNjcmliZShxdWVyeSwgb2JzZXJ2ZXIpOyB9KSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmRlbHRhQ2FjaGUgPSBkZWx0YUNhY2hlO1xyXG4gICAgICAgIF90aGlzLnF1ZXJ5ID0gcXVlcnk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzO1xyXG4gICAgfVxyXG4gICAgRGVsdGFDb2xsZWN0aW9uLnByb3RvdHlwZS50YWdzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0YWdzID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdGFnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IERlbHRhQ29sbGVjdGlvbih0aGlzLmRlbHRhQ2FjaGUsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMucXVlcnksIHsgdGFnczogdGFncyB9KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERlbHRhQ29sbGVjdGlvbjtcclxufShDb2xsZWN0aW9uKSk7XHJcbmV4cG9ydCB7IERlbHRhQ29sbGVjdGlvbiB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWx0YS1jb2xsZWN0aW9uLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IHRhYmxlcyB9IGZyb20gJ2tlZGJhY2tlbmQtc2NoZW1hL3NjaGVtYS5qc29uJztcclxuaW1wb3J0IHsgS2VkQmFja2VuZENvbGxlY3Rpb24gfSBmcm9tICcuL2tlZGJhY2tlbmQtY29sbGVjdGlvbic7XHJcbmltcG9ydCB7IFF1ZXJ5U2V0IH0gZnJvbSAnLi9xdWVyeS1zZXQnO1xyXG5pbXBvcnQgeyBNdXRhdGlvblF1ZXVlIH0gZnJvbSAnLi9tdXRhdGlvbi1xdWV1ZSc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRXcml0ZXIgfSBmcm9tICcuL2tlZGJhY2tlbmQtd3JpdGVyJztcclxuaW1wb3J0IHsgRGVsdGFDb2xsZWN0aW9uIH0gZnJvbSAnLi9kZWx0YS1jb2xsZWN0aW9uL2RlbHRhLWNvbGxlY3Rpb24nO1xyXG52YXIgS2VkQmFja2VuZFJlcG8gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kUmVwbyhnZXRDbGllbnQsIGdldFVzZXIsIGdldFVzZXJEaXNwbGF5TmFtZSwgZGVmYXVsdFF1ZXJ5T3B0aW9ucywgbXV0YXRpb25RdWV1ZSwgcXVlcnlTZXQsIHdyaXRlciwgY2FjaGVPcHRpbWl6ZWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZ2V0Q2xpZW50ID0gZ2V0Q2xpZW50O1xyXG4gICAgICAgIHRoaXMuZ2V0VXNlciA9IGdldFVzZXI7XHJcbiAgICAgICAgdGhpcy5nZXRVc2VyRGlzcGxheU5hbWUgPSBnZXRVc2VyRGlzcGxheU5hbWU7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zID0gZGVmYXVsdFF1ZXJ5T3B0aW9ucztcclxuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xyXG4gICAgICAgIHRoaXMucXVlcnlTZXQgPSBxdWVyeVNldDtcclxuICAgICAgICB0aGlzLndyaXRlciA9IHdyaXRlcjtcclxuICAgICAgICB0aGlzLmNhY2hlT3B0aW1pemVkID0gY2FjaGVPcHRpbWl6ZWQ7XHJcbiAgICAgICAgaWYgKCFkZWZhdWx0UXVlcnlPcHRpb25zKVxyXG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMgPSB7fTtcclxuICAgICAgICBpZiAoIW11dGF0aW9uUXVldWUpXHJcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IG5ldyBNdXRhdGlvblF1ZXVlKCk7XHJcbiAgICAgICAgaWYgKCFxdWVyeVNldClcclxuICAgICAgICAgICAgdGhpcy5xdWVyeVNldCA9IG5ldyBRdWVyeVNldCh0aGlzLm11dGF0aW9uUXVldWUpO1xyXG4gICAgICAgIGlmICghd3JpdGVyKVxyXG4gICAgICAgICAgICB0aGlzLndyaXRlciA9IG5ldyBLZWRCYWNrZW5kV3JpdGVyKHRoaXMubXV0YXRpb25RdWV1ZSwgdGhpcy5xdWVyeVNldCwgZ2V0Q2xpZW50LCBnZXRVc2VyLCBnZXRVc2VyRGlzcGxheU5hbWUpO1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHRhYmxlcykuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHtcclxuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBuZXcgS2VkQmFja2VuZENvbGxlY3Rpb24oX3RoaXMsIHRhYmxlLCBkZWZhdWx0UXVlcnlPcHRpb25zIHx8IHt9KTtcclxuICAgICAgICAgICAgaWYgKGNhY2hlT3B0aW1pemVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gY29sbGVjdGlvbi5jYWNoZU9wdGltaXplZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF90aGlzW3RhYmxlXSA9IGNvbGxlY3Rpb247XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kZWx0YXMgPSBuZXcgRGVsdGFDb2xsZWN0aW9uKHRoaXMud3JpdGVyLmRlbHRhQ2FjaGUsIHtcclxuICAgICAgICAgICAgYnJhbmNoSWQ6IHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucy5icmFuY2hJZCAvLyBJZiBicmFuY2hJZCBpcyB1bmRlZmluZWQuIERlbHRhQ29sbGVjdGlvbiB3aWxsIHJlc3BvbmQgd2l0aCBFcnJvciBvbiBzdWJzY3JpYmUoKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLnRhYmxlID0gZnVuY3Rpb24gKHRhYmxlTmFtZSkge1xyXG4gICAgICAgIHZhciBjb2xsZWN0aW9uID0gbmV3IEtlZEJhY2tlbmRDb2xsZWN0aW9uKHRoaXMsIHRhYmxlTmFtZSwgdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zKTtcclxuICAgICAgICBpZiAodGhpcy5jYWNoZU9wdGltaXplZClcclxuICAgICAgICAgICAgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb24uY2FjaGVPcHRpbWl6ZWQoKTtcclxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUuX2Nsb25lID0gZnVuY3Rpb24gKHF1ZXJ5T3B0aW9ucywgY2FjaGVPcHRpbWl6ZWQpIHtcclxuICAgICAgICB2YXIgY2xvbmUgPSBuZXcgS2VkQmFja2VuZFJlcG8odGhpcy5nZXRDbGllbnQsIHRoaXMuZ2V0VXNlciwgdGhpcy5nZXRVc2VyRGlzcGxheU5hbWUsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucywgcXVlcnlPcHRpb25zKSwgdGhpcy5tdXRhdGlvblF1ZXVlLCB0aGlzLnF1ZXJ5U2V0LCB0aGlzLndyaXRlciwgY2FjaGVPcHRpbWl6ZWQgPT09IHVuZGVmaW5lZCA/IHRoaXMuY2FjaGVPcHRpbWl6ZWQgOiBjYWNoZU9wdGltaXplZCk7XHJcbiAgICAgICAgcmV0dXJuIGNsb25lO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5icmFuY2ggPSBmdW5jdGlvbiAoYnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xvbmUoeyBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLnJvbGUgPSBmdW5jdGlvbiAocm9sZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9uZSh7IHJvbGU6IHJvbGUgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLm9wdGltaXplQ2FjaGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb25lKHt9LCB0cnVlKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUuY2xlYXJCcmFuY2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjbGVhciBtYXN0ZXIgYnJhbmNoXCIpO1xyXG4gICAgICAgIHRoaXMud3JpdGVyLm11dGF0ZShbeyBvcDogJ2NsZWFyLWJyYW5jaCcsIGJyYW5jaElkOiB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQgfV0sIDApO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uICh0YXJnZXRCcmFuY2hJZCkge1xyXG4gICAgICAgIGlmICghdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zLmJyYW5jaElkKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbWVyZ2UgZnJvbSBtYXN0ZXIgYnJhbmNoXCIpO1xyXG4gICAgICAgIHRoaXMud3JpdGVyLm11dGF0ZShbeyBvcDogJ21lcmdlJywgYnJhbmNoSWQ6IHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucy5icmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQ6IHRhcmdldEJyYW5jaElkIH1dLCAwKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUuc2F2ZU5vdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLndyaXRlci53YWl0Rm9yVmVyc2lvblRvUGVyc2lzdCh0aGlzLndyaXRlci5jdXJyZW50VmVyc2lvbildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBLZWRCYWNrZW5kUmVwbztcclxufSgpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZFJlcG8gfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkYmFja2VuZC1yZXBvLmpzLm1hcCIsImltcG9ydCBlbnYgZnJvbSAnLi9LRUQuZW52JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8gfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBnZXRHbG9iYWxJZCwgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IGNmZyBmcm9tICcuL0tFRC5jZmcnO1xyXG5pbXBvcnQgeyBTY2hvb2wsIEJyYW5jaCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgVmFsdWUgfSBmcm9tICdrZWRiYWNrZW5kL29ic2VydmFibGUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRiID0gbmV3IEtlZEJhY2tlbmRSZXBvKFxyXG4gICgpPT5lbnYua2VkQmFja2VuZENsaWVudCxcclxuICAoKT0+ZW52LmN1cnJlbnRVc2VyID9cclxuICAgIGVudi5jdXJyZW50VXNlci5tYWlsIDpcclxuICAgIFwiXCIsXHJcbiAgKCk9PmVudi5jdXJyZW50VXNlciA/XHJcbiAgICBlbnYuY3VycmVudFVzZXIuZGlzcGxheU5hbWUgfHwgZW52LmN1cnJlbnRVc2VyLm1haWwgOlxyXG4gICAgXCJcIik7XHJcblxyXG5leHBvcnQgY29uc3QgZ2xvYmFsSWQgPSBnZXRHbG9iYWxJZChjZmcuS0VEX1JFQUxNKTtcclxuZXhwb3J0IGNvbnN0IFNjaG9vbHMgPSB7XHJcbiAgc3RhbmRhcmRTY2hvb2w6IGRiLnNjaG9vbHMubmFtZShcInN0YW5kYXJkXCIpLmNhY2hlT3B0aW1pemVkKCkuc2luZ2xlKCksXHJcbiAgZ2V0IG15U2Nob29sICgpIHsgcmV0dXJuIGRiLnNjaG9vbHMubmFtZShlbnYuY3VycmVudFVzZXIuc2Nob29sKS5jYWNoZU9wdGltaXplZCgpLnNpbmdsZSgpOyB9XHJcbn07XHJcbmV4cG9ydCBjb25zdCBDb3Vyc2VJbnN0YW5jZXMgPSB7XHJcbiAgZ2V0QnJhbmNoSWQoc2Nob29sOiBWYWx1ZTxTY2hvb2w+LCBjb3Vyc2VJZDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gc2Nob29sLnN3aXRjaE1hcChzY2hvb2wgPT5cclxuICAgICAgZGIuYnJhbmNoZXNcclxuICAgICAgICAuaGFzRWRnZXNGcm9tKFtzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZF0pXHJcbiAgICAgICAgLm5hbWUoXCJkcmFmdFwiKVxyXG4gICAgICAgIC50YWdzKGNvdXJzZUlkKVxyXG4gICAgICAgIC5pZHNPbmx5KClcclxuICAgICAgICAubWFwKCh7aWR9KSA9PiBpZClcclxuICAgICAgICAudG9WYWx1ZSgpXHJcbiAgICAgICAgLm1hcChpZHMgPT4gaWRzLmxlbmd0aCA+IDAgPyBpZHNbMF0gOiB1bmRlZmluZWQpKTtcclxuICB9LFxyXG5cclxuICAvKiogR2V0IGEgRFJBRlQgYnJhbmNoIGZvciBnaXZlbiBjb3Vyc2UgSUQgYW5kIGdpdmVuIHNjaG9vbC5cclxuICAgKiBJZiB0aGVyZSBpcyBub3QgeWV0IHN1Y2ggYSBicmFuY2gsIGNyZWF0ZSBpdCB1c2luZyBtdXRhdGlvbnNPbkVtcHR5KCkgd2hpY2ggd2lsbFxyXG4gICAqIGxlYWQgdG8gdGhlIEMjIGNvZGUgRG9jdW1lbnRSZXBvc2l0b3J5LlJlYWRPck11dGF0ZSgpIHZpYSBEb2N1bWVudENvbnRyb2xsZXIuXHJcbiAgICovXHJcbiAgZ2V0T3JDcmVhdGVCcmFuY2hJZChzY2hvb2w6IFZhbHVlPFNjaG9vbD4sIGNvdXJzZUlkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBkYi5jb3Vyc2VJbnN0YW5jZXMuaWRzT25seSgpLmlkKGNvdXJzZUlkKS5zd2l0Y2hNYXAoKCk9PiAvLyBUSGlzIGZpcnN0IGxpbmUgdmVyaWZpZXMgY291cnNlIGV4aXN0cy4gSWYgZGVsZXRlZCwgZG9uJ3QgdHJ5IHRvIHJlY3JlYXRlIGl0cyBicmFuY2ghXHJcbiAgICAgIHNjaG9vbC5zd2l0Y2hNYXAoc2Nob29sID0+IFxyXG4gICAgICBkYi5icmFuY2hlc1xyXG4gICAgICAgIC5oYXNFZGdlc0Zyb20oW3NjaG9vbC5vZmZpY2lhbEJyYW5jaElkXSlcclxuICAgICAgICAubmFtZShcImRyYWZ0XCIpXHJcbiAgICAgICAgLnRhZ3MoY291cnNlSWQpXHJcbiAgICAgICAgLmlkc09ubHkoKVxyXG4gICAgICAgIC5tdXRhdGlvbnNPbkVtcHR5KHR4ID0+IHtcclxuICAgICAgICAgIC8vIFRoZXNlIDIgbXV0YXRpb25zIHdpbGwgb2NjdXIgc2VydmVyIHNpZGUsIGF0b21pY2FsbHkuXHJcbiAgICAgICAgICAvLyBXaWxsIGJlIHNlbnQgb24gZWFjaCByZXF1ZXN0IGluIHRoZSBxdWVyeSwgYnV0IHdpbGwgb25seSBleGVjdXRlIGlmIHF1ZXJ5IHJlc3VsdHMgaW4gemVybyBpdGVtcy5cclxuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJTY2hvb2w6XCIsIHNjaG9vbCk7XHJcbiAgICAgICAgICBjb25zdCBpZCA9IGNyZWF0ZVVVSUQoKTtcclxuICAgICAgICAgIHR4LmFkZChcImJyYW5jaGVzXCIsIHtcclxuICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgIGFjbDogW1xyXG4gICAgICAgICAgICAgIFwicm9sZTpVU0VSOlJcIixcclxuICAgICAgICAgICAgICBgc2Nob29sUm9sZToke3NjaG9vbC5uYW1lfS9FTVBMT1lFRTpTYFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBuYW1lOiAnZHJhZnQnLFxyXG4gICAgICAgICAgICBzY2hvb2xJZDogc2Nob29sLmlkLFxyXG4gICAgICAgICAgICB0cmVlUGFyZW50SWQ6IHNjaG9vbC5vZmZpY2lhbEJyYW5jaElkLFxyXG4gICAgICAgICAgICB0YWdzOiBbY291cnNlSWRdXHJcbiAgICAgICAgICB9IGFzIEJyYW5jaCk7XHJcbiAgICAgICAgICAvLyBBcHByb3ZpbmcgdGhlIGJyYW5jaCBtYWtlcyBzdXJlIHRoYXQgaXQgd2FzIGNyZWF0ZWQgYnkgYW4gRU1QTE9ZRUUgb24gZ2l2ZW4gc2Nob29sLlxyXG4gICAgICAgICAgdHgubGluazIoXCJicmFuY2hlc1wiLCBzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZCwgXCJhcHByb3ZlZENoaWxkcmVuXCIsIGlkKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zaW5nbGUoKVxyXG4gICAgICAgIC5tYXAoKHtpZH0pID0+IGlkKSkpO1xyXG4gIH0sXHJcblxyXG4gIGdldEFsbERlc2NlbmRhbnRJZHMoY291cnNlSWQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGRiLmNvdXJzZUJsb2Nrcy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkuY29uY2F0KFxyXG4gICAgICBkYi5jb3Vyc2VDb250ZW50cy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkpLmNvbmNhdChcclxuICAgICAgZGIuY291cnNlVGFicy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkpLmNvbmNhdChcclxuICAgICAgZGIudGFza3MudGFncyhjb3Vyc2VJZCkuaWRzT25seSgpKVxyXG4gICAgICAubWFwKHggPT4geC5pZCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IChjb21tYW5kLCB2YWx1ZSA9IG51bGwpID0+IHtcclxuICBkb2N1bWVudC5leGVjQ29tbWFuZChjb21tYW5kLCBmYWxzZSwgdmFsdWUpXHJcbn1cclxuIiwibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNwaW5uZXIgPSAoKT0+IDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXNwaW5uZXIgZmEtc3BpblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4mbmJzcDs8L3NwYW4+O1xyXG4iLCJpbXBvcnQgeyBBY2Nlc3NDbGFpbSwgRG9jdW1lbnRBY2Nlc3MsIGhhc0FjY2VzcyBhcyBfaGFzQWNjZXNzLCBBY2Nlc3NSaWdodCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBnZXRVc2VyQ2xhaW1zIGZyb20gJy4vZ2V0LXVzZXItY2xhaW1zJztcclxuaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZywgZ2VuZXJhdGVRdWVyeVN0cmluZyB9IGZyb20gXCIuLi91dGlscy9xdWVyeS1zdHJpbmdcIjtcclxuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcclxuZXhwb3J0IHsgZ2V0VXNlckNsYWltcyB9O1xyXG5cclxuZXhwb3J0IGNvbnN0IElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TID0gW1xyXG4gIFwidXNlclwiLFxyXG4gIFwicm9sZVwiLFxyXG4gIFwic2Nob29sXCIsXHJcbiAgXCJkZWJ1Z1wiLFxyXG4gIFwidGVzdFZlcnNpb25cIixcclxuICBcInRlc3R2ZXJzaW9uXCIsXHJcbiAgXCJmZWF0dXJlc1wiLFxyXG4gIFwic2Nob29sVHlwZVwiLFxyXG4gIFwic2Nob29sdHlwZVwiXTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCwgcmVxdWVzdGVkUmlnaHQ6IEFjY2Vzc1JpZ2h0KSB7XHJcbiAgdmFyIGNsYWltcyA9IGdldFVzZXJDbGFpbXModXNlcik7XHJcbiAgaWYgKHJlcXVlc3RlZFJpZ2h0ICE9PSAnUicgJiYgdXNlci50dXRvckZvcikge1xyXG4gICAgY2xhaW1zID0gY2xhaW1zLmZpbHRlcihjbGFpbSA9PiBjbGFpbS50eXBlICE9PSAnZW1haWwnKTtcclxuICB9XHJcbiAgdmFyIHJlc3VsdCA9IF9oYXNBY2Nlc3MoRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZ0FycmF5KGRvYy5hY2wgfHwgW10pLCBjbGFpbXMsIHJlcXVlc3RlZFJpZ2h0KTtcclxuICAvL2NvbnNvbGUubG9nKGBIYXMgJHtyZXF1ZXN0ZWRSaWdodH0gYWNjZXNzIHRvICR7ZG9jLm5hbWV9LyR7ZG9jLmlkfTogJHtyZXN1bHR9YCk7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlYWRBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xyXG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnUicpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFzV3JpdGVBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xyXG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnVycpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFzU2hhcmVBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xyXG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnUycpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNUZWFjaGVyQXRTY2hvb2wodXNlcjogVXNlciwgc2Nob29sOiBzdHJpbmcpIHtcclxuICBjb25zdCBpc1RlYWNoZXIgPSB1c2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSAnRU1QTE9ZRUUnIHx8IHJvbGUgPT09ICdBRE1JTicpO1xyXG4gIGNvbnN0IGJlbG9uZ3NUb1NjaG9vbCA9IChzY2hvb2x8fFwiXCIpLnRvTG93ZXJDYXNlKCkgPT09IHVzZXIuc2Nob29sLnRvTG93ZXJDYXNlKCk7XHJcbiAgcmV0dXJuIChpc1RlYWNoZXIgJiYgYmVsb25nc1RvU2Nob29sKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbCh1c2VyOiBVc2VyLCBzY2hvb2w6IHN0cmluZykge1xyXG4gIHJldHVybiB1c2VyLnJvbGVzLmluY2x1ZGVzKFwiQURNSU5cIikgfHwgaXNUZWFjaGVyQXRTY2hvb2wodXNlciwgc2Nob29sKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGltcGVyc29uYXRpb25FbnYgPSB7XHJcbiAgYWN0QXMgKG9wdGlvbnM6IHtyb2xlLCBzY2hvb2wsIHVybD99KSB7XHJcbiAgICBjb25zdCB7cm9sZSwgc2Nob29sLCB1cmx9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IGN1cnJlbnRRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoKTtcclxuICAgIGNvbnN0IG5ld1F1ZXJ5ID0gey4uLmN1cnJlbnRRdWVyeSwgcm9sZSwgc2Nob29sfTtcclxuICAgIGNvbnN0IG5ld1F1ZXJ5U3RyaW5nID0gZ2VuZXJhdGVRdWVyeVN0cmluZyhuZXdRdWVyeSk7XHJcbiAgICBpZiAodXJsKSB7XHJcbiAgICAgIGxvY2F0aW9uLmhyZWYgPSBgJHt1cmx9JHtuZXdRdWVyeVN0cmluZ31gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbG9jYXRpb24uaGFzaCA9IFwiI1wiO1xyXG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSBuZXdRdWVyeVN0cmluZztcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhY3RBcyhvcHRpb25zOiB7cm9sZSwgc2Nob29sLCB1cmw/fSkge1xyXG4gIGltcGVyc29uYXRpb25FbnYuYWN0QXMob3B0aW9ucyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSAodXJsOiBzdHJpbmcsIHF1ZXJ5OiB7W25hbWU6IHN0cmluZ10gOiBzdHJpbmd9KSB7XHJcbiAgY29uc3QgY3VycmVudFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gpO1xyXG4gIGNvbnN0IHByZXNlcnZlZFF1ZXJ5ID0ge307XHJcbiAgZm9yIChjb25zdCBwYXJhbSBvZiBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUykge1xyXG4gICAgaWYgKGN1cnJlbnRRdWVyeVtwYXJhbV0pIHByZXNlcnZlZFF1ZXJ5W3BhcmFtXSA9IGN1cnJlbnRRdWVyeVtwYXJhbV07XHJcbiAgfVxyXG4gIGNvbnN0IG5ld1F1ZXJ5U3RyaW5nID0gZ2VuZXJhdGVRdWVyeVN0cmluZyh7Li4ucHJlc2VydmVkUXVlcnksIC4uLnF1ZXJ5fSk7XHJcbiAgY29uc3QgcEhhc2ggPSB1cmwuaW5kZXhPZignIycpO1xyXG4gIHJldHVybiBwSGFzaCA+PSAwID9cclxuICAgIGAke3VybC5zdWJzdHIoMCxwSGFzaCl9JHtuZXdRdWVyeVN0cmluZ30ke3VybC5zdWJzdHIocEhhc2gpfWAgOlxyXG4gICAgYCR7dXJsfSR7bmV3UXVlcnlTdHJpbmd9YDtcclxufVxyXG4iLCJpbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVc2VyQ2xhaW1zICh1c2VyOiBVc2VyKSB7XHJcbiAgcmV0dXJuIFt7XHJcbiAgICB0eXBlOiBcImVtYWlsXCIsXHJcbiAgICB2YWx1ZTogdXNlci5tYWlsXHJcbiAgfSx7XHJcbiAgICB0eXBlOiBcInNjaG9vbFwiLFxyXG4gICAgdmFsdWU6IHVzZXIuc2Nob29sXHJcbiAgfV0uY29uY2F0KHVzZXIucm9sZXMubWFwKHJvbGUgPT4gKHtcclxuICAgIHR5cGU6IFwicm9sZVwiLFxyXG4gICAgdmFsdWU6IHJvbGVcclxuICB9KSkpLmNvbmNhdCh1c2VyLnJvbGVzLm1hcChyb2xlID0+ICh7XHJcbiAgICB0eXBlOiBcInNjaG9vbFJvbGVcIixcclxuICAgIHZhbHVlOiB1c2VyLnNjaG9vbCArIFwiL1wiICsgcm9sZVxyXG4gIH0pKSk7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVVSUQoKSB7XHJcbiAgICAvLyBEZWNlbnQgc29sdXRpb24gZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHRcclxuICAgIHZhciBkID0gRGF0ZS5ub3coKTtcclxuICAgIHZhciB1dWlkID0gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xyXG4gICAgICAgIHZhciByID0gKGQgKyBNYXRoLnJhbmRvbSgpICogMTYpICUgMTYgfCAwO1xyXG4gICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XHJcbiAgICAgICAgcmV0dXJuIChjID09PSAneCcgPyByIDogKHIgJiAweDcgfCAweDgpKS50b1N0cmluZygxNik7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB1dWlkO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBhdm9pZFNpbXVsdGFub3VzQ2FsbHMobWV0aG9kKSB7XHJcbiAgICB2YXIgb25nb2luZ1Byb21pc2UgPSBudWxsO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIW9uZ29pbmdQcm9taXNlKSB7XHJcbiAgICAgICAgICAgIG9uZ29pbmdQcm9taXNlID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBvbmdvaW5nUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9uZ29pbmdQcm9taXNlO1xyXG4gICAgfTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsSWQocmVhbG0pIHtcclxuICAgIHZhciBwcmVmaXggPSAnZWM5NmIzYmUtNDVmYy00MWQzLWI2OWUtJztcclxuICAgIHZhciBwYWQgPSBbJzUwJywgJzA4JywgJ2UxJywgJzQwJywgJ2U0JywgJ2U3J107XHJcbiAgICBpZiAocmVhbG0ubGVuZ3RoID4gNilcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb28gbG9uZyByZWFsbVwiKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVhbG0ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICB2YXIgaGV4ID0gcmVhbG0uY2hhckNvZGVBdChpKS50b1N0cmluZygxNik7XHJcbiAgICAgICAgcGFkW2ldID0gaGV4Lmxlbmd0aCA9PT0gMiA/XHJcbiAgICAgICAgICAgIGhleCA6XHJcbiAgICAgICAgICAgICcwJyArIGhleDtcclxuICAgIH1cclxuICAgIHJldHVybiBwcmVmaXggKyBwYWQuam9pbignJyk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVQcmVkZXN0aW5hdGVkSWQoaW5wdXQpIHtcclxuICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlbmNvZGVyLCBkYXRhLCBkaWdlc3QsIF9hLCBpO1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVyLmVuY29kZShpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBVaW50OEFycmF5LmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBkYXRhKV07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgZGlnZXN0ID0gbmV3IChfYS5hcHBseShVaW50OEFycmF5LCBbdm9pZCAwLCBfYi5zZW50KCldKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBpID0gMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5pYmJsZSA9IGRpZ2VzdFtpKytdICUgMTYgfCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdhc2hlZE5pYmJsZSA9IGMgPT09ICd4JyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmliYmxlIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaWJibGUgJiAweDcgfCAweDg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2FzaGVkTmliYmxlLnRvU3RyaW5nKDE2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vKmV4cG9ydCBmdW5jdGlvbiBidWYyaGV4KGJ1ZmZlcjogQXJyYXlCdWZmZXIpIHtcclxuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKFxyXG4gICAgbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSxcclxuICAgICh4OiBudW1iZXIpID0+ICgnMDAnICsgeC50b1N0cmluZygxNikpLnNsaWNlKC0yKSkuam9pbignJyk7XHJcbn0qL1xyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQXJyYXkoYSwgbWFwcGVyKSB7XHJcbiAgICB2YXIgcmV0dmFsID0gYTtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYS5sZW5ndGg7IGkgPCBsOyArK2kpIHtcclxuICAgICAgICB2YXIgdCA9IGFbaV07XHJcbiAgICAgICAgdmFyIG1hcHBlZCA9IG1hcHBlcih0KTtcclxuICAgICAgICBpZiAobWFwcGVkICE9PSB0KSB7XHJcbiAgICAgICAgICAgIGlmIChyZXR2YWwgPT09IGEpXHJcbiAgICAgICAgICAgICAgICByZXR2YWwgPSBhLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIHJldHZhbFtpXSA9IG1hcHBlZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmV0dmFsO1xyXG59XHJcbi8qXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVBcnJheTxUPihhOiBUW10sIG1hcHBlcjogKHQ6IFQpID0+IFQgfCBmYWxzZSk6IFRbXSB7XHJcbiAgbGV0IHJldHZhbCA9IGE7XHJcbiAgbGV0IGogPSAwO1xyXG4gIGZvciAobGV0IGk9MCxsPWEubGVuZ3RoOyBpPGw7ICsraSwgKytqKSB7XHJcbiAgICBjb25zdCB0ID0gYVtpXTtcclxuICAgIGNvbnN0IG1hcHBlZCA9IG1hcHBlcih0KTtcclxuICAgIGlmIChtYXBwZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgIC8vIE1hcHBlciB3YW50cyB0byBkZWxldGUgdGhpcyBkb2MuXHJcbiAgICAgIGlmIChyZXR2YWwgPT09IGEpIHJldHZhbCA9IGEuc2xpY2UoKTtcclxuICAgICAgcmV0dmFsLnNwbGljZShqLCAxKTtcclxuICAgICAgLS1qOyAvLyBjb21wZW5zYXRlIGZvciArK2pcclxuICAgIH0gZWxzZSBpZiAobWFwcGVkICE9PSB0KSB7XHJcbiAgICAgIGlmIChyZXR2YWwgPT09IGEpIHJldHZhbCA9IGEuc2xpY2UoKTtcclxuICAgICAgcmV0dmFsW2pdID0gbWFwcGVkO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcmV0dmFsO1xyXG59XHJcbiovIFxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCJleHBvcnQgaW50ZXJmYWNlIFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zIHtcclxuICB0b0xvd2VyPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb25TZWFyY2g6IHN0cmluZywgb3B0aW9ucz86IFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB7XHJcbiAgY29uc3Qge3RvTG93ZXJ9ID0gKG9wdGlvbnMgfHzCoHt9KSBhcyBQYXJzZVF1ZXJ5U3RyaW5nT3B0aW9ucztcclxuICBjb25zdCByZXN1bHQgPSB7fTtcclxuICBpZiAobG9jYXRpb25TZWFyY2ggJiYgbG9jYXRpb25TZWFyY2gubGVuZ3RoID4gMSlcclxuICAgIGxvY2F0aW9uU2VhcmNoLnN1YnN0cigxKVxyXG4gICAgICAuc3BsaXQoJyYnKVxyXG4gICAgICAubWFwKHBhcnQgPT4gcGFydC5zcGxpdCgnPScpLm1hcChzID0+IGRlY29kZVVSSUNvbXBvbmVudChzLnRyaW0oKSkpKVxyXG4gICAgICAuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiByZXN1bHRbdG9Mb3dlciA/IGtleS50b0xvd2VyQ2FzZSgpIDoga2V5XSA9IHZhbHVlKTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbmNvZGVQYXJhbXMocGFyYW1zOiB7W2tleTogc3RyaW5nXTpzdHJpbmd9KSB7XHJcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHBhcmFtcykuZmlsdGVyKGtleSA9PiBwYXJhbXNba2V5XSAhPT0gdW5kZWZpbmVkKS5tYXAoa2V5ID0+IGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSl9YCkuam9pbignJicpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVRdWVyeVN0cmluZyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcclxuICByZXR1cm4gXCI/XCIgKyBlbmNvZGVQYXJhbXMocGFyYW1zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSGFzaFF1ZXJ5U3RyaW5nKGxvY2F0aW9uSGFzaDogc3RyaW5nLCBvcHRpb25zPzogUGFyc2VRdWVyeVN0cmluZ09wdGlvbnMpIHtcclxuICByZXR1cm4gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbkhhc2gsIG9wdGlvbnMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVIYXNoUXVlcnlTdHJpbmcocGFyYW1zOiB7W2tleTogc3RyaW5nXTpzdHJpbmd9KSB7XHJcbiAgcmV0dXJuIFwiI1wiICsgZW5jb2RlUGFyYW1zKHBhcmFtcyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFVybEFuZFF1ZXJ5ICh1cmxXaXRoUG9zc2libGVRdWVyeTogc3RyaW5nKSB7XHJcbiAgY29uc3QgcFF1ZXJ5ID0gdXJsV2l0aFBvc3NpYmxlUXVlcnkuaW5kZXhPZignPycpO1xyXG4gIHJldHVybiBwUXVlcnkgPj0gMCA/XHJcbiAgICBbdXJsV2l0aFBvc3NpYmxlUXVlcnkuc3Vic3RyKDAsIHBRdWVyeSksIHVybFdpdGhQb3NzaWJsZVF1ZXJ5LnN1YnN0cihwUXVlcnkpXSA6XHJcbiAgICBbdXJsV2l0aFBvc3NpYmxlUXVlcnksIFwiXCJdO1xyXG59XHJcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgRG9jdW1lbnQsIFJlc291cmNlLCBNb2RpZmljYXRpb25UcmFja2VkLCBDb3Vyc2UsIFRhc2ssIFNvZnREb2N1bWVudEFjY2VzcyB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgQmF0Y2hSdW5uZXIsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB1cGRhdGUgZnJvbSAncmVhY3QtYWRkb25zLXVwZGF0ZSc7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSB9IGZyb20gJy4uLy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZURvY3VtZW50R3JhcGhzKG9sZERvYywgbmV3RG9jLCB0YWJsZTogc3RyaW5nLCBncmFwaHM6IHsgW2xhYmVsOiBzdHJpbmddOiBzdHJpbmcgfSwgYmF0Y2g6IEJhdGNoUnVubmVyKSB7XHJcbiAgY29uc3QgZG9jVXBkYXRlcyA9IHt9O1xyXG4gIGNvbnN0IGRvY0lkID0gbmV3RG9jLmlkO1xyXG4gIGZvciAobGV0IG5hdlByb3Agb2YgT2JqZWN0LmtleXMoZ3JhcGhzKSkge1xyXG4gICAgY29uc3QgZm9yZWlnblRhYmxlID0gZ3JhcGhzW25hdlByb3BdO1xyXG4gICAgY29uc3Qgb2xkTGlzdDogRG9jdW1lbnRbXSA9IG9sZERvY1tuYXZQcm9wXSB8fCBbXTtcclxuICAgIGNvbnN0IG5ld0xpc3Q6IERvY3VtZW50W10gPSBuZXdEb2NbbmF2UHJvcF07XHJcbiAgICBpZiAoIW5ld0xpc3QpIGNvbnRpbnVlO1xyXG4gICAgY29uc3QgdHVwbGVzID0gbmV3TGlzdFxyXG4gICAgICAubWFwKChkb2MsIGlkeCk9Pih7ZG9jLCBpZHh9KSk7IC8vIENyZWF0ZSB0dWJsZXMgb2Yge2RvYywgYXJyYXktaW5kZXh9IHNvIHdlIGNhbiB1cGRhdGUgcmVzdWx0XHJcbiAgICBjb25zdCBhZGRlZCA9IHR1cGxlcy5maWx0ZXIodHVwbGUgPT4gIW9sZExpc3Quc29tZShvID0+IG8uaWQgPT09IHR1cGxlLmRvYy5pZCkpOyAvLyBGaW5kIGFkZGVkIGl0ZW1zXHJcblxyXG4gICAgZm9yIChsZXQgYSBvZiBhZGRlZCkge1xyXG4gICAgICBjb25zdCBtdXRhdGVkU3ViRG9jID0gey4uLmEuZG9jfTtcclxuICAgICAgY29uc3QgbWV0YSA9IG11dGF0ZWRTdWJEb2MuJG1ldGE7XHJcbiAgICAgIGRlbGV0ZSBtdXRhdGVkU3ViRG9jLiRtZXRhOyAvLyBEZWxldGUgJG1ldGEgc28gdGhhdCBcImFkZFwiIG9yIFwidXBkYXRlXCIgZG9lcyBub3QgcGVyc2lzdGUgdG8gbmV4dCBzdGF0ZS5cclxuICAgICAgaWYgKG1ldGEgPT09ICdhZGQnKSB7XHJcbiAgICAgICAgaWYgKCFtdXRhdGVkU3ViRG9jLmlkKSBtdXRhdGVkU3ViRG9jLmlkID0gY3JlYXRlVVVJRCgpOyAvLyBHZW5lcmF0ZSBJRCBpZiBub3QgZG9uZSB5ZXQuXHJcbiAgICAgICAgLy8gTm93IHB1dCBhbiAnYWRkJyBtdXRhdGlvbiBpbiB0aGUgYmF0Y2ggcXVldWUuXHJcbiAgICAgICAgYmF0Y2guYWRkKGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XHJcbiAgICAgIH0gZWxzZSBpZiAobWV0YSA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgICBiYXRjaC5wdXQoZm9yZWlnblRhYmxlLCBtdXRhdGVkU3ViRG9jKTtcclxuICAgICAgfVxyXG4gICAgICBiYXRjaC5saW5rKHRhYmxlLCBkb2NJZCwgZm9yZWlnblRhYmxlLCBtdXRhdGVkU3ViRG9jLmlkLCBuYXZQcm9wKTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSByZXN1bHQgc28gdGhhdCBzdGF0ZSBpcyByZWZsZWN0ZWQgYWZ0ZXIgc3VjY2VzZnVsIFBPU1QgdG8gc2VydmVyLlxyXG4gICAgICBpZiAoIWRvY1VwZGF0ZXNbbmF2UHJvcF0pIGRvY1VwZGF0ZXNbbmF2UHJvcF0gPSB7fTtcclxuICAgICAgZG9jVXBkYXRlc1tuYXZQcm9wXVthLmlkeF0gPSB7JHNldDogbXV0YXRlZFN1YkRvY307XHJcbiAgICB9XHJcbiAgICBjb25zdCByZW1vdmVkID0gb2xkTGlzdC5maWx0ZXIobyA9PiAhbmV3TGlzdC5zb21lKG4gPT4gbi5pZCA9PT0gby5pZCkpO1xyXG4gICAgZm9yIChsZXQgciBvZiByZW1vdmVkKSB7XHJcbiAgICAgIGJhdGNoLnVubGluayh0YWJsZSwgZG9jSWQsIGZvcmVpZ25UYWJsZSwgci5pZCwgbmF2UHJvcCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB1cGRhdGVkID0gdHVwbGVzLmZpbHRlcih0dXBsZSA9PiBvbGRMaXN0LnNvbWUobyA9PiBvLmlkID09PSB0dXBsZS5kb2MuaWQgJiYgdHVwbGUuZG9jLiRtZXRhID09PSAndXBkYXRlJykpO1xyXG4gICAgZm9yIChsZXQgdSBvZiB1cGRhdGVkKSB7XHJcbiAgICAgIGNvbnN0IG11dGF0ZWRTdWJEb2MgPSB7Li4udS5kb2N9O1xyXG4gICAgICBkZWxldGUgbXV0YXRlZFN1YkRvYy4kbWV0YTtcclxuICAgICAgYmF0Y2gucHV0KGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XHJcblxyXG4gICAgICAvLyBVcGRhdGUgcmVzdWx0IHNvIHRoYXQgJG1ldGEgaXMgcmVtb3ZlZCBmcm9tIG5hdmlnYXRpb24gcHJvcCBhZnRlciBzdWNjZXNzZnVsIFBPU1QgdG8gc2VydmVyLlxyXG4gICAgICBpZiAoIWRvY1VwZGF0ZXNbbmF2UHJvcF0pIGRvY1VwZGF0ZXNbbmF2UHJvcF0gPSB7fTtcclxuICAgICAgZG9jVXBkYXRlc1tuYXZQcm9wXVt1LmlkeF0gPSB7JHNldDogbXV0YXRlZFN1YkRvY307XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB1cGRhdGUobmV3RG9jLCBkb2NVcGRhdGVzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGR0Rm9ybWF0KGRhdGVUaW1lOiBudW1iZXIgfCBEYXRlIHwgbW9tZW50Lk1vbWVudCkge1xyXG4gIHJldHVybiBtb21lbnQoZGF0ZVRpbWUpLmZvcm1hdCgnWVlNTUREIEhIOm1tJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaG9ydERhdGVGb3JtYXQoZGF0ZVRpbWU6IG51bWJlciB8IERhdGUgfCBtb21lbnQuTW9tZW50KSB7XHJcbiAgcmV0dXJuIG1vbWVudChkYXRlVGltZSkuZm9ybWF0KCdZWU1NREQnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3J0UGVyc29uTmFtZUZvcm1hdChuYW1lOiBzdHJpbmcpIHtcclxuICBpZiAoIW5hbWUpIHJldHVybiBcIlwiO1xyXG4gIGNvbnN0IG5hbWVzID0gbmFtZS5zcGxpdCgnICcpLmZpbHRlcihuID0+ICEhbik7XHJcbiAgY29uc3QgbGFzdE5hbWUgPSBuYW1lcy5wb3AoKTtcclxuICByZXR1cm4gbmFtZXMubWFwKG5hbWUgPT4gYCR7bmFtZVswXX0uYCkuY29uY2F0KGxhc3ROYW1lKS5qb2luKCcgJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVNb2RpZmljYXRpb25TdGFtcCAobm93OiBudW1iZXIsIG9iajogTW9kaWZpY2F0aW9uVHJhY2tlZCwgdXNlcjogVXNlcikge1xyXG4gIHJldHVybiB1cGRhdGUob2JqLCB7XHJcbiAgICBkYXRlVGltZTogeyRzZXQ6IG5vd30sIC8vIEZvciBxdWVyaWVzLi4uXHJcbiAgICBtb2RpZmllZERhdGU6IHskc2V0OiBub3d9LFxyXG4gICAgbW9kaWZpZWRCeToge1xyXG4gICAgICAkc2V0OiB7XHJcbiAgICAgICAgbmFtZTogdXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgICB1cmw6IFwibWFpbHRvOlwiICsgdXNlci5tYWlsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNyZWF0aW9uU3RhbXA8VCBleHRlbmRzIE1vZGlmaWNhdGlvblRyYWNrZWQ+IChub3c6IG51bWJlciwgb2JqOiBULCB1c2VyOiBVc2VyKTogVCB7XHJcbiAgcmV0dXJuIHVwZGF0ZShvYmosIHtcclxuICAgIGNyZWF0ZWREYXRlOiB7JHNldDogbm93fSxcclxuICAgIGNyZWF0ZWRCeToge1xyXG4gICAgICAkc2V0OiB7XHJcbiAgICAgICAgbmFtZTogdXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgICB1cmw6IFwibWFpbHRvOlwiICsgdXNlci5tYWlsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVtYWlsRnJvbURvY0FjY2VzcyAocmVzb3VyY2U6IFNvZnREb2N1bWVudEFjY2Vzcykge1xyXG4gIGlmIChyZXNvdXJjZS5lbWFpbCkgcmV0dXJuIHJlc291cmNlLmVtYWlsO1xyXG4gIHJldHVybiByZXNvdXJjZS51cmwgP1xyXG4gICAgcmVzb3VyY2UudXJsLnN0YXJ0c1dpdGgoJ21haWx0bzonKSA/XHJcbiAgICAgIHJlc291cmNlLnVybC5zdWJzdHJpbmcoJ21haWx0bzonLmxlbmd0aCkgOlxyXG4gICAgICByZXNvdXJjZS51cmwgOlxyXG4gICAgcmVzb3VyY2UudXJsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMob2JqOiBNb2RpZmljYXRpb25UcmFja2VkLCB1c2VyOiBVc2VyKSB7XHJcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICBvYmogPSB1cGRhdGVNb2RpZmljYXRpb25TdGFtcChub3csIG9iaiwgdXNlcik7XHJcbiAgaWYgKCFvYmouY3JlYXRlZEJ5KSBvYmogPSB1cGRhdGVDcmVhdGlvblN0YW1wKG5vdywgb2JqLCB1c2VyKTtcclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlFdGFncyhkb2M6IERvY3VtZW50LCBuZXdFdGFnczoge1tpZDogc3RyaW5nXTogc3RyaW5nfSwgZ3JhcGhzOiBzdHJpbmdbXSkge1xyXG4gIGNvbnN0IHJlcyA9IHsuLi5kb2N9O1xyXG4gIGNvbnN0IGV0YWcgPSBuZXdFdGFnc1tkb2MuaWRdO1xyXG4gIGlmIChldGFnKVxyXG4gICAgcmVzLiRldGFnID0gZXRhZztcclxuICBmb3IgKGxldCBsYWJlbCBvZiBncmFwaHMpIHtcclxuICAgIGNvbnN0IG5ld0xpc3QgPSBkb2NbbGFiZWxdLm1hcChkID0+IGFwcGx5RXRhZ3MoZCwgbmV3RXRhZ3MsIFtdKSk7XHJcbiAgICByZXNbbGFiZWxdID0gbmV3TGlzdDtcclxuICB9XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRCbG9iKGJsb2I6IEJsb2IsIG06IChyOkZpbGVSZWFkZXIpPT52b2lkKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICByZWFkZXIub25sb2FkID0gZXYgPT4gcmVzb2x2ZSgoZXYudGFyZ2V0IGFzIGFueSkucmVzdWx0KTtcclxuICAgIHJlYWRlci5vbmFib3J0ID0gZXYgPT4gcmVqZWN0KG5ldyBFcnJvcihcImZpbGUgcmVhZCBhYm9ydGVkXCIpKTtcclxuICAgIHJlYWRlci5vbmVycm9yID0gZXYgPT4gcmVqZWN0KChldi50YXJnZXQgYXMgYW55KS5lcnJvcik7XHJcbiAgICBtKHJlYWRlcik7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWFkQmxvYkFzVGV4dCAoYmxvYjogQmxvYikge1xyXG4gIHJldHVybiByZWFkQmxvYihibG9iLCByPT5yLnJlYWRBc1RleHQoYmxvYikpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVhZEJsb2JBc0RhdGFVcmwgKGJsb2I6IEJsb2IpIHtcclxuICByZXR1cm4gcmVhZEJsb2IoYmxvYiwgcj0+ci5yZWFkQXNEYXRhVVJMKGJsb2IpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93Q29weShlOiBSZWFjdC5EcmFnRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSB7XHJcbiAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5JztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoc3RhdHVzOiAndW5zYXZlZCcgfCAnc2F2ZWQnIHwgJ2Vycm9yJyB8ICcnKSB7XHJcbiAgY29uc3QgZGl2ID0gJCgnZGl2LmNvdXJzZS1idWlsZGVyJylbMF07XHJcbiAgaWYgKGRpdikgZGl2LmNsYXNzTmFtZSA9IFwiY291cnNlLWJ1aWxkZXJcIiArIChzdGF0dXMgPyBcIiBzdGF0dXMgXCIgKyBzdGF0dXMgOiBcIlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRDb3Vyc2UoaWQ6IHN0cmluZywgb3B0aW9ucz86IHtcclxuICAgIGluY2x1ZGVUZW1wbGF0ZUNoYWluPzogYm9vbGVhbixcclxuICAgIGluY2x1ZGU/OiBzdHJpbmdbXVxyXG4gIH0pOiBQcm9taXNlPENvdXJzZT5cclxue1xyXG4gIGNvbnN0IGNsaWVudCA9IGVudi5rZWRCYWNrZW5kQ2xpZW50O1xyXG4gIGNvbnN0IGluY2x1ZGVUZW1wbGF0ZUNoYWluID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGVUZW1wbGF0ZUNoYWluO1xyXG4gIGNvbnN0IGluY2x1ZGVUYXNrcyA9ICFvcHRpb25zIHx8ICFvcHRpb25zLmluY2x1ZGUgfHwgb3B0aW9ucy5pbmNsdWRlLmluZGV4T2YoXCJ0YXNrc1wiKSAhPT0gLTE7XHJcbiAgY29uc3QgW2NvdXJzZSwgY291cnNlVGFza3MsIHRlbXBsYXRlQ2hhaW5dID0gKGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgIGNsaWVudC5nZXQoXCJjb3Vyc2VzXCIsIGlkLCB7XHJcbiAgICAgIGluY2x1ZGU6IG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlID8gb3B0aW9ucy5pbmNsdWRlLmZpbHRlcihpID0+IGkgIT09IFwidGFza3NcIikgOiBbXHJcbiAgICAgICAgXCJjZW50cmFsQ29udGVudFwiLFxyXG4gICAgICAgIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsXHJcbiAgICAgICAgXCJhYmlsaXRpZXNcIixcclxuICAgICAgICBcImltYWdlc1wiLFxyXG4gICAgICAgIFwiYWNsXCIgLy8gRG9uJ3QgaW5jbHVkZSB0YXNrcyBoZXJlLi4uXHJcbiAgICAgIF1cclxuICAgIH0pLFxyXG4gICAgLy8gLi4uIGJ1dCBpbmNsdWRlIHRhc2tzIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHdlIGNhbiBsb2FkIHRoZSBncmFwaHMgZm9yIHRoZVxyXG4gICAgLy8gdGFza3MgYXMgd2VsbCFcclxuICAgIGluY2x1ZGVUYXNrcyAmJiBjbGllbnQubGlzdChcInRhc2tzXCIsIHtcclxuICAgICAgaGFzRWRnZXNGcm9tOiBpZCxcclxuICAgICAgaW5jbHVkZTogWydrbm93bGVkZ2VSZXF1aXJlbWVudHMnLCAnY2VudHJhbENvbnRlbnQnLCAnYWJpbGl0aWVzJywgJ2FjbCddLFxyXG4gICAgICBmbGFnczogWydpbmNsdWRlSWRzT25seSddIC8vIERvbid0IG5lZWQgcmVkdW5kYW50IGluZm8gdGhhdCdzIGFscmVhZHkgb24gY291cnNlXHJcbiAgICB9KSxcclxuICAgIGluY2x1ZGVUZW1wbGF0ZUNoYWluICYmIGNsaWVudC5saXN0KFwiY291cnNlc1wiLCB7XHJcbiAgICAgIGhhc0VkZ2VzRnJvbTogaWQsXHJcbiAgICAgIGZsYWdzOiBbJ2lkc09ubHknXVxyXG4gICAgfSlcclxuICBdKSkgYXMgW0NvdXJzZSwgVGFza1tdLCBDb3Vyc2VbXV07XHJcbiAgY291cnNlLnRhc2tzID0gY291cnNlVGFza3M7XHJcblxyXG4gIC8vIENvcnJlY3QgdGhlIG9yZGVyIG9mIEFiaWxpdGllc1xyXG4gIGlmIChjb3Vyc2UuYWJpbGl0aWVzICYmIGNvdXJzZS5hYmlsaXRpZXNPcmRlcikge1xyXG4gICAgY291cnNlLmFiaWxpdGllcyA9IGNvdXJzZS5hYmlsaXRpZXNPcmRlci5tYXAoaWQgPT5cclxuICAgICAgY291cnNlLmFiaWxpdGllcy5maW5kKGEgPT4gYS5pZCA9PT0gaWQpKTtcclxuICB9XHJcblxyXG4gIC8vIENvcnJlY3QgdGhlIG9yZGVyIG9mIEtub3dsZWRnZVJlcXVpcmVtZW50c1xyXG4gIGlmIChjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzICYmIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlcikge1xyXG4gICAgY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cyA9IGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlci5tYXAoaWQgPT5cclxuICAgICAgY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cy5maW5kKGMgPT4gYy5pZCA9PT0gaWQpKTtcclxuICB9XHJcblxyXG4gIC8vIENvcnJlY3QgdGhlIG9yZGVyIG9mIENlbnRyYWxDb250ZW50XHJcbiAgaWYgKGNvdXJzZS5jZW50cmFsQ29udGVudCAmJiBjb3Vyc2UuY2VudHJhbENvbnRlbnRPcmRlcikge1xyXG4gICAgY291cnNlLmNlbnRyYWxDb250ZW50ID0gY291cnNlLmNlbnRyYWxDb250ZW50T3JkZXIubWFwKGlkID0+XHJcbiAgICAgIGNvdXJzZS5jZW50cmFsQ29udGVudC5maW5kKGNjID0+IGNjLmlkID09PSBpZCkpOy8vLmZpbHRlcih4ID0+ICEheCk7Ly8gRGVidWdnaW5nIHNvbXRoaW4nIC4gTm9ybWFsbHkgdGhlIGxhc3QgLmZpbHRlcigpLi4uIHBhcnQgc2hvdWxkIG5vdCBiZSBuZXNjZXNzYXJ5Li4uXHJcbiAgfVxyXG4gIFxyXG4gIC8vIEluY2x1ZGUgdGVtcGxhdGUgY2hhaW4gaWYgcmVxdWVzdGVkLlxyXG4gIGlmIChpbmNsdWRlVGVtcGxhdGVDaGFpbikgY291cnNlLnRlbXBsYXRlQ2hhaW4gPSB0ZW1wbGF0ZUNoYWluO1xyXG4gIHJldHVybiBjb3Vyc2U7XHJcbn1cclxuXHJcbi8vIENoZWNrIGRpZmZlcmVuY2VzIGJldHdlZW4gdHdvIGFycmF5IG9mIHR5cGUgVFxyXG5leHBvcnQgZnVuY3Rpb24gaGFzQ2hhbmdlcyhvcmlnaW5hbFZhbHVlczogQXJyYXk8YW55PiwgY3VycmVudFZhbHVlczogQXJyYXk8YW55Pik6IGJvb2xlYW57XHJcbiAgcmV0dXJuIG9yaWdpbmFsVmFsdWVzID09PSB1bmRlZmluZWQgfHwgY3VycmVudFZhbHVlcy5maWx0ZXIoKHgpID0+ICFvcmlnaW5hbFZhbHVlcy5pbmNsdWRlcyh4KSkubGVuZ3RoID4gMCB8fCBvcmlnaW5hbFZhbHVlcy5maWx0ZXIoKHgpID0+ICFjdXJyZW50VmFsdWVzLmluY2x1ZGVzKHgpKS5sZW5ndGggPiAwO1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuZXhwb3J0IGNvbnN0IExhbmd1YWdlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe2ludGw6IG51bGx9KTsiLCIvKlxyXG5kZWNsYXJlIHZhciBCdWZmZXI7IC8vIG5vZGUgYnVpbHQtaW5cclxuXHJcblxyXG5mdW5jdGlvbiBiYXNpY0F1dGhIZWFkZXIodXNlcm5hbWUsIHBhc3N3b3JkKSB7XHJcbiAgICByZXR1cm4gXCJCYXNpYyBcIiArIG5ldyBCdWZmZXIodXNlcm5hbWUgKyBcIjpcIiArIHBhc3N3b3JkKS50b1N0cmluZyhcImJhc2U2NFwiKTtcclxufVxyXG4qL1xyXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL29ic2VydmFibGUvZW1pdHRlcic7XHJcbnZhciBSZXN0Q2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gUmVzdENsaWVudChpc29tb3JwaGljLCBiYXNlVXJsLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5pc29tb3JwaGljID0gaXNvbW9ycGhpYztcclxuICAgICAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnMgPSAwO1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IG5ldyBFbWl0dGVyKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZmV0Y2hPcHRpb25zID0geyBtb2RlOiAnY29ycycgfTtcclxuICAgICAgICB0aGlzLmF1dGhIZWFkZXIgPSBvcHRpb25zLmJlYXJlciA/XHJcbiAgICAgICAgICAgIFwiQmVhcmVyIFwiICsgb3B0aW9ucy5iZWFyZXIgOlxyXG4gICAgICAgICAgICBvcHRpb25zLnVzZXJuYW1lID9cclxuICAgICAgICAgICAgICAgIFwiQmFzaWMgXCIgKyBpc29tb3JwaGljLmJ0b2Eob3B0aW9ucy51c2VybmFtZSArIFwiOlwiICsgKG9wdGlvbnMucGFzc3dvcmQgfHwgXCJcIikpIDpcclxuICAgICAgICAgICAgICAgIG51bGw7XHJcbiAgICAgICAgdGhpcy5iZWFyZXJQcm92aWRlciA9IG9wdGlvbnMuYmVhcmVyUHJvdmlkZXIgfHwgbnVsbDtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXN0Q2xpZW50LnByb3RvdHlwZSwgXCJzdGF0dXNcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbiAocGF0aCwgbWV0aG9kLCBoZWFkZXJzLCBxdWVyeSwgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICArK3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cy5kaXNwYXRjaCh0aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZmV0Y2gocGF0aCwgbWV0aG9kLCBoZWFkZXJzLCBxdWVyeSwgZmV0Y2hPcHRpb25zKVxyXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgIC0tX3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xyXG4gICAgICAgICAgICBfdGhpcy5fc3RhdHVzLmRpc3BhdGNoKF90aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgIC0tX3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xyXG4gICAgICAgICAgICBfdGhpcy5fc3RhdHVzLmRpc3BhdGNoKF90aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuX2ZldGNoID0gZnVuY3Rpb24gKHBhdGgsIG1ldGhvZCwgaGVhZGVycywgcXVlcnksIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcXVlcnlTdHIsIF9hLCBhdXRoSGVhZGVyLCB0b2tlbkluZm8sIGJlYXJlclByb3ZpZGVyLCBfYiwgX2MsIHVybCwgcmVzLCB3d3dhdXRoLCBfZDtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9lKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9lLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmV0Y2hPcHRpb25zICYmIGZldGNoT3B0aW9ucy5jYWNoZSA9PT0gJ25vLWNhY2hlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgYmFjay1idXR0b24gbm90IHJlc3BlY3RpbmcgY2FjaGUgY29udHJvbCBpbiBDaHJvbWUvT3BlcmEuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgYSBxdWVyeSBwYXJhbWV0ZXIgdG8gZm9yY2UgYSBjYWNoZSBlbnRyeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBxdWVyeSwgeyBub2NhY2hlOiBjcmVhdGVVVUlEKCkgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlTdHIgPSBxdWVyeSAmJiBPYmplY3Qua2V5cyhxdWVyeSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHF1ZXJ5W2tleV0gIT09IHVuZGVmaW5lZDsgfSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI9XCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcmJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcywgYXV0aEhlYWRlciA9IF9hLmF1dGhIZWFkZXIsIHRva2VuSW5mbyA9IF9hLnRva2VuSW5mbywgYmVhcmVyUHJvdmlkZXIgPSBfYS5iZWFyZXJQcm92aWRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIWF1dGhIZWFkZXIgJiYgIXRva2VuSW5mbyAmJiBiZWFyZXJQcm92aWRlcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJlYXJlclByb3ZpZGVyLmdldEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRva2VuSW5mbyA9IHRva2VuSW5mbyA9IF9lLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSAyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2tlbkluZm8pIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0b2tlbkluZm8uZXhwaXJlcyA8IERhdGUubm93KCkpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUb2tlbiBleHBpcmVkLiBSZWZyZXNoIGl0OlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBiZWFyZXJQcm92aWRlci5yZWZyZXNoQmVhcmVyKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MudG9rZW5JbmZvID0gdG9rZW5JbmZvID0gX2Uuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoSGVhZGVyID0gXCJCZWFyZXIgXCIgKyB0b2tlbkluZm8udG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gNTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIG9uZSB3YXkgb3IgYW5vdGhlciwgd2UndmUgY29uY2x1ZGVkIGFuIEF1dGhvcml6YXRpb24gaGVhZGVyIHRvIHVzZTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF1dGhIZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGF1dGhIZWFkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdGhpcy5iYXNlVXJsICsgcGF0aCArIChxdWVyeVN0ciA/IFwiP1wiICsgcXVlcnlTdHIgOiBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5pc29tb3JwaGljLmZldGNoKHVybCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5mZXRjaE9wdGlvbnMsIHsgaGVhZGVyczogaGVhZGVycywgbWV0aG9kOiBtZXRob2QgfSwgZmV0Y2hPcHRpb25zKSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzID09IDQwMSAmJiB0aGlzLmJlYXJlclByb3ZpZGVyKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHd3d2F1dGggPSByZXMuaGVhZGVycy5nZXQoXCJ3d3ctYXV0aGVudGljYXRlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCBcIiArIHJlcy5zdGF0dXMgKyBcIiBmcm9tIFwiICsgKHRoaXMuYmFzZVVybCArIHBhdGgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEod3d3YXV0aCAmJiAvQmVhcmVyL2kudGVzdCh3d3dhdXRoKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYmVhcmVyUHJvdmlkZXIucmVmcmVzaEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLnRva2VuSW5mbyA9IF9lLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gXCJCZWFyZXIgXCIgKyB0aGlzLnRva2VuSW5mby50b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5pc29tb3JwaGljLmZldGNoKHVybCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5mZXRjaE9wdGlvbnMsIHsgaGVhZGVyczogaGVhZGVycywgbWV0aG9kOiBtZXRob2QgfSwgZmV0Y2hPcHRpb25zKSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OiByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHBhdGgsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChwYXRoLCBcIkdFVFwiLCB7IEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uOyB0ZXh0L3BsYWluXCIgfSwgcXVlcnksIGZldGNoT3B0aW9ucyk7XHJcbiAgICB9O1xyXG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChwYXRoLCBkYXRhLCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChwYXRoLCBcIlBPU1RcIiwge1xyXG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgICAgXCJBY2NlcHRcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcclxuICAgICAgICB9LCBudWxsLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBmZXRjaE9wdGlvbnMsIHsgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkgfSkpO1xyXG4gICAgfTtcclxuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChwYXRoLCBxdWVyeSwgYm9keSwgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2gocGF0aCwgXCJERUxFVEVcIiwgeyBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvbjsgdGV4dC9wbGFpblwiIH0sIHF1ZXJ5LCB0c2xpYl8xLl9fYXNzaWduKHt9LCBmZXRjaE9wdGlvbnMsIHsgYm9keTogYm9keSB9KSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFJlc3RDbGllbnQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFJlc3RDbGllbnQgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzdGNsaWVudC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBSZXN0Q2xpZW50IH0gZnJvbSAnLi9yZXN0Y2xpZW50JztcclxuaW1wb3J0IHsgYXZvaWRTaW11bHRhbm91c0NhbGxzIH0gZnJvbSAnLi91dGlscyc7XHJcbnZhciBLZWRCZWFyZXJQcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEtlZEJlYXJlclByb3ZpZGVyKGlzb21vcnBoaWMsIHN0b3JhZ2UsIHRva2VuSWQsIGNsaWVudElkLCBjbGllbnRTZWNyZXQsIHRva2VuVXJsLCB0b2tlblF1ZXJ5KSB7XHJcbiAgICAgICAgdGhpcy5pc29tb3JwaGljID0gaXNvbW9ycGhpYztcclxuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xyXG4gICAgICAgIHRoaXMudG9rZW5JZCA9IHRva2VuSWQ7XHJcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IGNsaWVudElkO1xyXG4gICAgICAgIHRoaXMuY2xpZW50U2VjcmV0ID0gY2xpZW50U2VjcmV0O1xyXG4gICAgICAgIHRoaXMudG9rZW5VcmwgPSB0b2tlblVybDtcclxuICAgICAgICB0aGlzLnRva2VuUXVlcnkgPSB0b2tlblF1ZXJ5O1xyXG4gICAgICAgIHRoaXMudG9rZW5JbmZvID0geyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9O1xyXG4gICAgICAgIHRoaXMuY2xpZW50ID0gbmV3IFJlc3RDbGllbnQoaXNvbW9ycGhpYywgXCJcIiwge1xyXG4gICAgICAgICAgICB1c2VybmFtZTogdGhpcy5jbGllbnRJZCxcclxuICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuY2xpZW50U2VjcmV0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5nZXRCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRCZWFyZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoQmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMucmVmcmVzaEJlYXJlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIEtlZEJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYSwgdG9rZW4sIGV4cGlyZXMsIF9iLCBlXzE7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzLnRva2VuSW5mbywgdG9rZW4gPSBfYS50b2tlbiwgZXhwaXJlcyA9IF9hLmV4cGlyZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiAmJiBleHBpcmVzID49IERhdGUubm93KCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzEsIDQsICwgNl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RvcmFnZS5sb2FkKHRoaXMuY2xpZW50SWQgKyBcIi9cIiArIHRoaXMudG9rZW5JZCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudG9rZW5JbmZvID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50b2tlbkluZm8udG9rZW4gJiYgdGhpcy50b2tlbkluZm8uZXhwaXJlcyA+PSBEYXRlLm5vdygpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZWZyZXNoQmVhcmVyKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hCZWFyZXIoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5yZWZyZXNoQmVhcmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzLCByZXRyaWVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cmllcyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJldHJpZXMgPCA2KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmV0cmlldmluZyB0b2tlbiBmb3IgXCIgKyB0aGlzLnRva2VuSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNsaWVudC5nZXQodGhpcy50b2tlblVybCwgdGhpcy50b2tlblF1ZXJ5LCB7IGNhY2hlOiAncmVsb2FkJyB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkdvdCBcIiArIHJlcy5zdGF0dXMgKyBcIiBcIiArIHJlcy5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50b2tlbkluZm8gPSAoX2IudG9rZW4gPSBfYy5zZW50KCksIF9iLmV4cGlyZXMgPSBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDEwMDAsIF9iKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJHb3QgdG9rZW4gZm9yIFwiICsgdGhpcy50b2tlbklkICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy50b2tlbkluZm8pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNhdmUodGhpcy5jbGllbnRJZCArIFwiL1wiICsgdGhpcy50b2tlbklkLCB0aGlzLnRva2VuSW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICArK3JldHJpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHJldHJpZXZlIHRva2VuIGZvciBcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMudG9rZW5JZCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2VkQmVhcmVyUHJvdmlkZXI7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEtlZEJlYXJlclByb3ZpZGVyIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlZC1iZWFyZXItcHJvdmlkZXIuanMubWFwIiwidmFyIERvY3VtZW50QWNjZXNzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRG9jdW1lbnRBY2Nlc3MoYWNjZXNzQ2xhaW1UeXBlLCBhY2Nlc3NDbGFpbVZhbHVlLCByaWdodCkge1xyXG4gICAgICAgIHRoaXMuYWNjZXNzQ2xhaW1UeXBlID0gYWNjZXNzQ2xhaW1UeXBlO1xyXG4gICAgICAgIHRoaXMuYWNjZXNzQ2xhaW1WYWx1ZSA9IGFjY2Vzc0NsYWltVmFsdWU7XHJcbiAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xyXG4gICAgfVxyXG4gICAgRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChhYykge1xyXG4gICAgICAgIGlmICghYWMpXHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIHZhciBzcGxpdCA9IGFjLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA8IDMpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYWNjZXNzIHN0cmluZzogXCIgKyBhYyk7XHJcbiAgICAgICAgdmFyIGNsYWltVHlwZSA9IERvY3VtZW50QWNjZXNzLnVuZXNjYXBlKHNwbGl0WzBdKTtcclxuICAgICAgICB2YXIgY2xhaW1WYWx1ZSA9IERvY3VtZW50QWNjZXNzLnVuZXNjYXBlKHNwbGl0WzFdKTtcclxuICAgICAgICB2YXIgcmlnaHQgPSBzcGxpdFsyXTtcclxuICAgICAgICBpZiAocmlnaHQgIT09ICdSJyAmJiByaWdodCAhPT0gJ1cnICYmIHJpZ2h0ICE9PSAnUycpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYWNjZXNzIHN0cmluZzogXCIgKyBhYyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEFjY2VzcyhjbGFpbVR5cGUsIGNsYWltVmFsdWUsIHJpZ2h0KTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudEFjY2Vzcy5lc2NhcGUgPSBmdW5jdGlvbiAoYWNjZXNzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGFjY2Vzc0NvbXBvbmVudC5yZXBsYWNlKC9cXCUvZywgXCIlMjVcIikucmVwbGFjZSgvXFw6L2csIFwiJTNBXCIpO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50QWNjZXNzLnVuZXNjYXBlID0gZnVuY3Rpb24gKGFjY2Vzc0NvbXBvbmVudCkge1xyXG4gICAgICAgIHJldHVybiBhY2Nlc3NDb21wb25lbnQucmVwbGFjZSgvXFwlM0EvZywgXCI6XCIpLnJlcGxhY2UoL1xcJTI1L2csIFwiJVwiKTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudEFjY2Vzcy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIERvY3VtZW50QWNjZXNzLmVzY2FwZSh0aGlzLmFjY2Vzc0NsYWltVHlwZSkgKyBcIjpcIiArXHJcbiAgICAgICAgICAgIERvY3VtZW50QWNjZXNzLmVzY2FwZSh0aGlzLmFjY2Vzc0NsYWltVmFsdWUpICsgXCI6XCIgK1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0O1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmdBcnJheSA9IGZ1bmN0aW9uIChhY2wpIHtcclxuICAgICAgICByZXR1cm4gYWNsXHJcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGFjKSB7IHJldHVybiBEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nKGFjKTsgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWMpIHsgcmV0dXJuIGFjOyB9KTtcclxuICAgIH07XHJcbiAgICBEb2N1bWVudEFjY2Vzcy50b1N0cmluZ0FycmF5ID0gZnVuY3Rpb24gKGFjbCkge1xyXG4gICAgICAgIHJldHVybiBhY2wubWFwKGZ1bmN0aW9uIChhYykgeyByZXR1cm4gYWMudG9TdHJpbmcoKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIERvY3VtZW50QWNjZXNzO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEb2N1bWVudEFjY2VzcyB9O1xyXG5leHBvcnQgZnVuY3Rpb24gaGFzQWNjZXNzKGFjbCwgdXNlckNsYWltcywgcmVxdWVzdGVkUmlnaHQpIHtcclxuICAgIGlmICh1c2VyQ2xhaW1zLnNvbWUoZnVuY3Rpb24gKGNsYWltKSB7IHJldHVybiBjbGFpbS50eXBlID09PSAncm9sZScgJiYgY2xhaW0udmFsdWUgPT09IFwiQURNSU5cIjsgfSkpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gYWNsLnNvbWUoZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICByZXR1cm4gdXNlckNsYWltcy5zb21lKGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLmFjY2Vzc0NsYWltVHlwZSA9PT0gYy50eXBlICYmXHJcbiAgICAgICAgICAgICAgICBhLmFjY2Vzc0NsYWltVmFsdWUgPT09IGMudmFsdWUgJiYgKChhLnJpZ2h0ID09PSAnUicgJiYgcmVxdWVzdGVkUmlnaHQgPT09ICdSJykgfHxcclxuICAgICAgICAgICAgICAgIChhLnJpZ2h0ID09PSAnVycgJiYgWydSJywgJ1cnXS5pbmRleE9mKHJlcXVlc3RlZFJpZ2h0KSA+PSAwKSB8fFxyXG4gICAgICAgICAgICAgICAgKGEucmlnaHQgPT09ICdTJykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjZXNzLWNvbnRyb2wuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxudmFyIEh0dHBFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKEh0dHBFcnJvciwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEh0dHBFcnJvcihjb2RlLCBtZXNzYWdlKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJIVFRQXCIgKyBjb2RlICsgXCIgXCIgKyBtZXNzYWdlKSB8fCB0aGlzO1xyXG4gICAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIF90aGlzLm5hbWUgPSBcImh0dHBcIiArIGNvZGU7XHJcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IFwiSFRUUFwiICsgY29kZSArIFwiIFwiICsgbWVzc2FnZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSHR0cEVycm9yO1xyXG59KEVycm9yKSk7XHJcbmV4cG9ydCB7IEh0dHBFcnJvciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwLWVycm9yLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICcuL3Jlc3RjbGllbnQnO1xyXG5leHBvcnQgKiBmcm9tICcuL3V0aWxzJztcclxuZXhwb3J0IHsgS2VkQmVhcmVyUHJvdmlkZXIgfSBmcm9tICcuL2tlZC1iZWFyZXItcHJvdmlkZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL2FjY2Vzcy1jb250cm9sJztcclxuZXhwb3J0IHsgUmVzdENsaWVudCB9O1xyXG5pbXBvcnQgeyBIdHRwRXJyb3IgfSBmcm9tICcuL2h0dHAtZXJyb3InO1xyXG5leHBvcnQgeyBIdHRwRXJyb3IgfTtcclxuZXhwb3J0ICogZnJvbSAnLi9yZXN0Y2xpZW50JztcclxuO1xyXG4vLyB8ICdvdGhlckZsYWcnIHwgJ3RoaXJkRmxhZyc7Li4uXHJcbnZhciBLZWRCYWNrZW5kQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENsaWVudChpc29tb3JwaGljLCBiZWFyZXJQcm92aWRlciwgYmFzZVVybCkge1xyXG4gICAgICAgIHRoaXMuaHR0cCA9IG5ldyBSZXN0Q2xpZW50KGlzb21vcnBoaWMsIGJhc2VVcmwsIHsgYmVhcmVyUHJvdmlkZXI6IGJlYXJlclByb3ZpZGVyIH0pO1xyXG4gICAgfVxyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZ2V0TXlDbGFpbXMgPSBmdW5jdGlvbiAodGFibGUsIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmdldChcIm1lL2NsYWltcy9cIiArICh0YWJsZSB8fCBcIlwiKSwgbnVsbCwgZmV0Y2hPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZ2V0KHRhYmxlICsgXCIvXCIgKyBpZCwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeSwgcmVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5tdXRhdGlvbnNPbkVtcHR5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkubXV0YXRpb25zT25FbXB0eSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMubXV0YXRpb25zT25FbXB0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQoXCJcIiArIHRhYmxlLCBxdWVyeSwgZmV0Y2hPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuYmF0Y2ggPSBmdW5jdGlvbiAocmVxcywgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW9yZGVyIG9wZXJhdGlvbnMgc28gdGhhdCAnYWRkJ3MgY29tZSBmaXJzdCBhbmQgJ2RlbGV0ZSdzIGNvbWUgbGFzdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxcyA9IHJlcXMuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChyZXExLCByZXEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxMS5vcCA9PT0gJ2FkZCcgPyAtMSA6IHJlcTIub3AgPT09ICdhZGQnID8gMSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxMS5vcCA9PT0gJ2RlbGV0ZScgPyAxIDogcmVxMi5vcCA9PT0gJ2RlbGV0ZScgPyAtMSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAucG9zdChcImJhdGNoXCIsIHJlcXMsIGZldGNoT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmRvID0gZnVuY3Rpb24gKHNjb3BlRm4pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJ1bm5lcjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uZXIgPSBuZXcgQmF0Y2hSdW5uZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVGbihydW5uZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmJhdGNoKHJ1bm5lci5tdXRhdGlvblJlcXVlc3RzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZGVsZXRlUmVhbG0gPSBmdW5jdGlvbiAocmVhbG0pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5kZWxldGUoXCJyZWFsbXMvXCIgKyByZWFsbSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmFkZCh0YWJsZSwgZG9jKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKHRhYmxlLCBkb2MpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5wdXQodGFibGUsIGRvYyk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGRlbHRhRG9jLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnVwZGF0ZSh0YWJsZSwgaWQsIGRlbHRhRG9jLCBicmFuY2hJZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKGJyYW5jaElkLCB0YXJnZXRCcmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLm1lcmdlKGJyYW5jaElkLCB0YXJnZXRCcmFuY2hJZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmNsZWFyQnJhbmNoID0gZnVuY3Rpb24gKGJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuY2xlYXJCcmFuY2goYnJhbmNoSWQpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodGFibGUsIGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGVsZXRlKHRhYmxlLCBpZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnNoYXJlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgYWNsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuc2hhcmUodGFibGUsIGlkLCBhY2wpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51bnNoYXJlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgYWNsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5zaGFyZSh0YWJsZSwgaWQsIGFjbCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmxpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIubGluayhzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5saW5rMiA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldElkLCBsYWJlbCwgYnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5saW5rMihzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51bmxpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5saW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRJZCwgbGFiZWwsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5saW5rMihzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51bmRvTGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldElkLCBsYWJlbCwgYnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmRvTGluayhzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpOyB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2VkQmFja2VuZENsaWVudDtcclxufSgpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZENsaWVudCB9O1xyXG52YXIgQmF0Y2hSdW5uZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCYXRjaFJ1bm5lcigpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMgPSBbXTtcclxuICAgIH1cclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGFibGUsIGRvYywgYnJhbmNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnYWRkJywgdGFibGU6IHRhYmxlLCBkb2M6IGRvYywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAodGFibGUsIGRvYykge1xyXG4gICAgICAgIGRvYyA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRvYyk7XHJcbiAgICAgICAgZGVsZXRlIGRvYy5hY2w7IC8vIEZvcmJpZGRlbiB0byBzZW5kIGFjbCB3aXRoIHB1dCgpIGNhbGxzLlxyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdwdXQnLCB0YWJsZTogdGFibGUsIGRvYzogZG9jIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpIHtcclxuICAgICAgICBkZWx0YURvYyA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRlbHRhRG9jKTtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndXBkYXRlJywgdGFibGU6IHRhYmxlLCBpZDogaWQsIGRlbHRhRG9jOiBkZWx0YURvYywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnbWVyZ2UnLCBicmFuY2hJZDogYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkOiB0YXJnZXRCcmFuY2hJZCB9KTtcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUuY2xlYXJCcmFuY2ggPSBmdW5jdGlvbiAoYnJhbmNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnY2xlYXItYnJhbmNoJywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodGFibGUsIGlkKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2RlbGV0ZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdzaGFyZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBhY2w6IGFjbCB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bnNoYXJlJywgdGFibGU6IHRhYmxlLCBpZDogaWQsIGFjbDogYWNsIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdsaW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldFRhYmxlOiB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdsaW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5saW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldFRhYmxlOiB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3VubGluaycsIHNvdXJjZVRhYmxlOiBzb3VyY2VUYWJsZSwgc291cmNlSWQ6IHNvdXJjZUlkLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCwgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51bmRvTGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5kby1saW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJhdGNoUnVubmVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBCYXRjaFJ1bm5lciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gICAgbnVtYmVyT2ZUYXNrczogbnVtYmVyO1xyXG4gICAgY29tcGxldGVkTnVtYmVyT2ZUYXNrczogbnVtYmVyO1xyXG4gICAgbWF4aW11bVRhc2tzRGlzcGxheWVkPzogbnVtYmVyO1xyXG4gICAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xyXG4gICAgcHJvZ3Jlc3NDb2xvcj86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEdvYWxQcm9ncmVzcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gICAgcHVibGljIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XHJcbiAgICAgICAgbnVtYmVyb2ZUYXNrczogMCxcclxuICAgICAgICBjb21wbGV0ZWROdW1iZXJPZlRhc2tzOiAwLFxyXG4gICAgICAgIG1heGltdW1UYXNrc0Rpc3BsYXllZDogMTAsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcImxpZ2h0Z3JleVwiLFxyXG4gICAgICAgIHByb2dyZXNzQ29sb3I6IFwiIzNkYmNhMlwiLFxyXG4gICAgfTtcclxuXHJcbiAgICBjcmVhdGVQcm9ncmVzcyA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCB7IG51bWJlck9mVGFza3MsIGNvbXBsZXRlZE51bWJlck9mVGFza3MsIG1heGltdW1UYXNrc0Rpc3BsYXllZCwgYmFja2dyb3VuZENvbG9yLCBwcm9ncmVzc0NvbG9yIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgICAgIGxldCBwcm9ncmVzcyA9IFtdO1xyXG4gICAgICAgIGlmKG51bWJlck9mVGFza3MgPiBtYXhpbXVtVGFza3NEaXNwbGF5ZWQpe1xyXG4gICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInByb2dyZXNzLW92ZXJ2aWV3XCI+IHtjb21wbGV0ZWROdW1iZXJPZlRhc2tzfSAvIHtudW1iZXJPZlRhc2tzfSA8L2Rpdj47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCB0YXNrTm8gPSAxOyB0YXNrTm8gPD0gbnVtYmVyT2ZUYXNrczsgdGFza05vKyspIHtcclxuICAgICAgICAgICAgcHJvZ3Jlc3MucHVzaChcclxuICAgICAgICAgICAgPHN2ZyBrZXk9e3Rhc2tOb30+XHJcbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGNsYXNzTmFtZT1cImNpcmNsZS1jaGFydC1iYWNrZ3JvdW5kXCIgZmlsbD17dGFza05vID4gY29tcGxldGVkTnVtYmVyT2ZUYXNrcyA/IGJhY2tncm91bmRDb2xvciA6IHByb2dyZXNzQ29sb3J9IGN4PVwiOFwiIGN5PVwiOFwiIHI9XCI4XCIgLz5cclxuICAgICAgICAgICAgPC9zdmc+XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBwcm9ncmVzcztcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKXsgIFxyXG4gICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImdvYWxzLXByb2dyZXNzXCI+e3RoaXMuY3JlYXRlUHJvZ3Jlc3MoKX08L2Rpdj5cclxuICAgIH1cclxufSIsIi8qIFJFRkFDVE9SOiBNb3ZlIHRoaXMgY29tcG9uZW50IG91dHNpZGUgY291cnNlYnVpbGRlciFcclxuICAgVGhpcyBpcyBhIGdlbmVyYWwtcHVycG9zZSBjb21wb25lbnRcclxuKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgR29hbFByb2dyZXNzIH0gZnJvbSAnLi4vY2hhcnRzL2dvYWwtcHJvZ3Jlc3MnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICB0aXRsZTogc3RyaW5nIHwgSlNYLkVsZW1lbnQ7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gIGhlYWRlckNsYXNzTmFtZT86IHN0cmluZztcclxuICBjb250ZW50Q2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gIGhlYWRlck9wZW4/OiBib29sZWFuO1xyXG4gIGluYWN0aXZhdGVkPzogYm9vbGVhbjtcclxuICBpbmFjdGl2YXRlZFJlbmRlcj86ICdjaGlsZHJlbicgfCAndGl0bGVBbmRDaGlsZHJlbic7XHJcbiAgb25PcGVuQ2xvc2U/OiAoYmVjYW1lT3BlbjogYm9vbGVhbikgPT4gdm9pZDtcclxuICBkaXNwbGF5UHJvZ3Jlc3M/OiBib29sZWFuO1xyXG4gIHByb2dyZXNzRGF0YT86IHtjb21wbGV0ZWROdW1iZXJPZlRhc2tzOiBudW1iZXIsIG51bWJlck9mVGFza3M6IG51bWJlcn07XHJcbiAgY2hpbGRyZW47XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgaGVhZGVyT3BlbjogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIE9wZW5DbG9zZUJveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgaGVhZGVyT3BlbjogcHJvcHMuaGVhZGVyT3BlbiB8fCBmYWxzZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgKG5leHRQcm9wczogUHJvcHMpIHtcclxuICAgIGlmIChuZXh0UHJvcHMuaGVhZGVyT3BlbiAhPT0gdGhpcy5wcm9wcy5oZWFkZXJPcGVuKSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2hlYWRlck9wZW46IG5leHRQcm9wcy5oZWFkZXJPcGVufSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IHRpdGxlLCBjbGFzc05hbWUsIGNoaWxkcmVuLCBoZWFkZXJDbGFzc05hbWUsIGNvbnRlbnRDbGFzc05hbWUsIGRpc3BsYXlQcm9ncmVzcywgcHJvZ3Jlc3NEYXRhLFxyXG4gICAgICBpbmFjdGl2YXRlZCwgaW5hY3RpdmF0ZWRSZW5kZXIgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7IGhlYWRlck9wZW4gfSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgaWYgKGluYWN0aXZhdGVkKSByZXR1cm4gaW5hY3RpdmF0ZWRSZW5kZXIgPT09ICd0aXRsZUFuZENoaWxkcmVuJyA/IDw+XHJcbiAgICAgIDw+e3RpdGxlfTwvPlxyXG4gICAgICA8PntjaGlsZHJlbn08Lz5cclxuICAgIDwvPiA6IDw+XHJcbiAgICAgIHtjaGlsZHJlbn1cclxuICAgIDwvPjtcclxuXHJcbiAgICAvL3ZhciBjdXJyZW50UHJvZ3Jlc3NEYXRhID0gLy9wcm9ncmVzc0RhdGEoKTtcclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17KGNsYXNzTmFtZXx8JycpICsgXCIgb3BlbkNsb3NlXCIgKyAoaGVhZGVyT3BlbiA/IFwiIG9wZW5cIiA6IFwiXCIpfT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkhlYWRlclwiICsgKGhlYWRlckNsYXNzTmFtZSA/IFwiIFwiICsgaGVhZGVyQ2xhc3NOYW1lIDogXCJcIil9XHJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHMub25PcGVuQ2xvc2UpIHRoaXMucHJvcHMub25PcGVuQ2xvc2UoIXRoaXMuc3RhdGUuaGVhZGVyT3Blbik7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGVhZGVyT3BlbjogIXRoaXMuc3RhdGUuaGVhZGVyT3BlbiB9KTtcclxuICAgICAgICB9fSA+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuSGVhZGVyQ29udGFpbmVyXCI+XHJcbiAgICAgICAgICA8ZGl2Pnt0aXRsZX08L2Rpdj5cclxuICAgICAgICAgIHtkaXNwbGF5UHJvZ3Jlc3MgJiYgPEdvYWxQcm9ncmVzcyB7Li4ucHJvZ3Jlc3NEYXRhfS8+fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkNvbnRlbnRcIiArIChjb250ZW50Q2xhc3NOYW1lID8gXCIgXCIgKyBjb250ZW50Q2xhc3NOYW1lIDogXCJcIil9PlxyXG4gICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj47XHJcbiAgfVxyXG59XHJcbiIsInZhciBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UoKSB7XHJcbiAgICB9XHJcbiAgICBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoaWQsIHRva2VuSW5mbykge1xyXG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJiZWFyZXItXCIgKyBpZCwgSlNPTi5zdHJpbmdpZnkodG9rZW5JbmZvKSk7XHJcbiAgICB9O1xyXG4gICAgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdmFyIGpzb24gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiYmVhcmVyLVwiICsgaWQpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGpzb24gPyBKU09OLnBhcnNlKGpzb24pIDogeyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZTtcclxufSgpKTtcclxuZXhwb3J0IHsgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJlYXJlci1zdG9yYWdlLXNlc3Npb25zdG9yYWdlLmpzLm1hcCIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGVUYXNrKHRhc2spIHtcclxuICAgIGlmICghdGFzay5yZXNvdXJjZXMpXHJcbiAgICAgICAgdGFzay5yZXNvdXJjZXMgPSBbXTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLXRhc2suanMubWFwIiwiaW1wb3J0IG1pZ3JhdGVDb3Vyc2UgZnJvbSAnLi9taWdyYXRlLWNvdXJzZSc7XHJcbmltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGUoZG9jLCB0YWJsZSwgZ3JhcGhzKSB7XHJcbiAgICBzd2l0Y2ggKHRhYmxlKSB7XHJcbiAgICAgICAgY2FzZSBcImNvdXJzZXNcIjpcclxuICAgICAgICAgICAgbWlncmF0ZUNvdXJzZShkb2MsIGdyYXBocyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ0YXNrc1wiOlxyXG4gICAgICAgICAgICBtaWdyYXRlVGFzayhkb2MpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLmpzLm1hcCIsImltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGVDb3Vyc2UoY291cnNlLCBncmFwaHMpIHtcclxuICAgIGlmICghY291cnNlLm1vZHVsZXMpXHJcbiAgICAgICAgY291cnNlLm1vZHVsZXMgPSBbXTtcclxuICAgIGNvdXJzZS5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xyXG4gICAgICAgIGlmICghbW9kdWxlLnJlc291cmNlcykge1xyXG4gICAgICAgICAgICBtb2R1bGUucmVzb3VyY2VzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghbW9kdWxlLnRhc2tJZHMpIHtcclxuICAgICAgICAgICAgbW9kdWxlLnRhc2tJZHMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGlmICghY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMpIHtcclxuICAgICAgICBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgLy8gRWFybGllciB3cm9uZyBzcGVsbGluZyBvZiByZXNvdXJjZXNcclxuICAgIGlmICgncmVzb3Vyc2VzJyBpbiBjb3Vyc2UgJiYgISgncmVzb3VyY2VzJyBpbiBjb3Vyc2UpKSB7XHJcbiAgICAgICAgY291cnNlLnJlc291cmNlcyA9IGNvdXJzZS5yZXNvdXJzZXM7XHJcbiAgICAgICAgZGVsZXRlIGNvdXJzZS5yZXNvdXJzZXM7XHJcbiAgICB9XHJcbiAgICBpZiAoIWNvdXJzZS5yZXNvdXJjZXMpIHtcclxuICAgICAgICBjb3Vyc2UucmVzb3VyY2VzID0gW107XHJcbiAgICB9XHJcbiAgICBpZiAoZ3JhcGhzKSB7XHJcbiAgICAgICAgZ3JhcGhzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAobGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3Rhc2tzJzpcclxuICAgICAgICAgICAgICAgICAgICBjb3Vyc2UudGFza3MuZm9yRWFjaChmdW5jdGlvbiAodGFzaykgeyByZXR1cm4gbWlncmF0ZVRhc2sodGFzayk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlncmF0ZS1jb3Vyc2UuanMubWFwIiwiaW1wb3J0IG1pZ3JhdGUgZnJvbSAnLi9taWdyYXRlJztcclxuZXhwb3J0IHZhciBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gPSBmdW5jdGlvbiAoY2xpZW50KSB7XHJcbiAgICBpZiAoY2xpZW50Ll9fbWlncmF0b3JfbWl4ZWRfaW4pXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgY2xpZW50Ll9fbWlncmF0b3JfbWl4ZWRfaW4gPSB0cnVlO1xyXG4gICAgdmFyIGdldCA9IGNsaWVudC5nZXQ7XHJcbiAgICB2YXIgbGlzdCA9IGNsaWVudC5saXN0O1xyXG4gICAgY2xpZW50LmdldCA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgaW5jbHVkZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlO1xyXG4gICAgICAgIHJldHVybiBnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgbWlncmF0ZShyZXN1bHQsIHRhYmxlLCBpbmNsdWRlICYmIGluY2x1ZGUudG9TdHJpbmcoKS5zcGxpdCgnLCcpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBjbGllbnQubGlzdCA9IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBpbmNsdWRlID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGU7XHJcbiAgICAgICAgcmV0dXJuIGxpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmZvckVhY2goZnVuY3Rpb24gKGRvYykgeyByZXR1cm4gbWlncmF0ZShkb2MsIHRhYmxlLCBpbmNsdWRlICYmIGluY2x1ZGUudG9TdHJpbmcoKS5zcGxpdCgnLCcpKTsgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGNsaWVudDtcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwidmFyIHJlZGlySGFzaCA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJyZWRpci1oYXNoXCIpO1xyXG5pZiAocmVkaXJIYXNoKVxyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgX2EgPSBKU09OLnBhcnNlKHJlZGlySGFzaCksIHRpbWUgPSBfYS50aW1lLCBoYXNoID0gX2EuaGFzaDtcclxuICAgICAgICBpZiAodGltZSAmJiB0aW1lID4gRGF0ZS5ub3coKSAtIDYwMDAwKSB7XHJcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJyZWRpci1oYXNoXCIpO1xyXG4gICAgICAgICAgICBsb2NhdGlvbi5oYXNoID0gaGFzaDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoXykgeyB9XHJcbmV4cG9ydCBmdW5jdGlvbiByZW1lbWJlckhhc2hMb2NhdGlvbigpIHtcclxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJyZWRpci1oYXNoXCIsIEpTT04uc3RyaW5naWZ5KHsgdGltZTogRGF0ZS5ub3coKSwgaGFzaDogbG9jYXRpb24uaGFzaCB9KSk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaC1yZXN0b3Jlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBIdHRwRXJyb3IgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xyXG5pbXBvcnQgeyBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UgfSBmcm9tIFwiLi9iZWFyZXItc3RvcmFnZS1zZXNzaW9uc3RvcmFnZVwiO1xyXG5pbXBvcnQgeyBhdm9pZFNpbXVsdGFub3VzQ2FsbHMgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMnO1xyXG5pbXBvcnQgeyBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gfSBmcm9tICcuLi9rZWQtbW9kZWwtbWlncmF0b3InO1xyXG5pbXBvcnQgJy4vaGFzaC1yZXN0b3Jlcic7XHJcbmltcG9ydCB7IHJlbWVtYmVySGFzaExvY2F0aW9uIH0gZnJvbSAnLi9oYXNoLXJlc3RvcmVyJztcclxuS2VkTW9kZWxNaWdyYXRvck1peGluKEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlKTtcclxuZXhwb3J0IHZhciBzdG9yYWdlID0gbmV3IEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSgpO1xyXG52YXIgdGltZU9mUGFnZUxvYWQgPSBEYXRlLm5vdygpO1xyXG52YXIgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcih0b2tlblBhdGgsIHRva2VuUmVzcG9uc2VNYXBwZXIsIHRva2VuSWQpIHtcclxuICAgICAgICB0aGlzLnRva2VuUGF0aCA9IHRva2VuUGF0aDtcclxuICAgICAgICB0aGlzLnRva2VuUmVzcG9uc2VNYXBwZXIgPSB0b2tlblJlc3BvbnNlTWFwcGVyO1xyXG4gICAgICAgIHRoaXMudG9rZW5JZCA9IHRva2VuSWQ7XHJcbiAgICAgICAgdGhpcy50b2tlbkluZm8gPSB7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH07XHJcbiAgICAgICAgdGhpcy5nZXRCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRCZWFyZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgdGhpcy5yZWZyZXNoQmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMucmVmcmVzaEJlYXJlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnRva2VuSW5mby50b2tlbikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy50b2tlbklkKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdG9yYWdlLmxvYWQodGhpcy50b2tlbklkKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50b2tlbkluZm8gPSBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMudG9rZW5JbmZvLmV4cGlyZXMgPCBEYXRlLm5vdygpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIucHJvdG90eXBlLnJlZnJlc2hCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYiwgX2MsIF9kO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHRoaXMudG9rZW5QYXRoLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogXCJ0ZXh0L3BsYWluOyBhcHBsaWNhdGlvbi9qc29uXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0OiAnbWFudWFsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfZS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSAzMDIgfHwgKCFyZXMuc3RhdHVzICYmIHJlcy50eXBlID09PSBcIm9wYXF1ZXJlZGlyZWN0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIHNlc3Npb24gdGltZWQgb3V0IGFuZCBzZXJ2ZXIgd2FudHMgdG8gcmVkaXJlY3QgZW50aXJlIHBhZ2UgdG8gbG9naW4gcGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGltZSB0byByZWxvYWQgY3VycmVudCBwYWdlIHRvIGZvcmNlIGEgcmVkaXJlY3Qgb2YgdGhlIGVudGlyZSBwYWdlIGluc3RlYWQgZm9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBqdXN0IHJlZGlyZWN0aW5nIHRvIC9hcGkvdG9rZW4gb3Igd2hhdGV2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRpbWVPZlBhZ2VMb2FkID4gNjAwMDApIHsgLy8gcHJvaGliaXQgZW5kbGVzcyBsb29wIG9mIHJlbG9hZGluZyBzZWxmLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2FudHNSZWRpcmVjdCA9IHRydWU7IC8vIFNvIHRoYXQgbGlzdGVuZXJzIHRvIG9uYmVmb3JldW5sb2FkIGNvdWxkIHNob3cgYWx0ZXJuYXRlIG1lc3NhZ2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWRpcmVjdCB3YW50ZWQuIFJlbG9hZCBwYWdlLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1lbWJlckhhc2hMb2NhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEh0dHBFcnJvcigzMDIsIFwiUmVkaXJlY3RlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gXCJIVFRQXCIgKyByZXMuc3RhdHVzICsgXCIgXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShFcnJvciwgW3ZvaWQgMCwgX2IgKyAoX2Uuc2VudCgpKV0pKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZCA9IHRoaXMudG9rZW5SZXNwb25zZU1hcHBlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50b2tlbkluZm8gPSBfZC5hcHBseSh0aGlzLCBbX2Uuc2VudCgpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2F2ZSh0aGlzLnRva2VuSWQsIHRoaXMudG9rZW5JbmZvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciB9O1xyXG5leHBvcnQgdmFyIGlzb21vcnBoaWMgPSB7IGZldGNoOiBmZXRjaC5iaW5kKHNlbGYpLCBidG9hOiBidG9hLmJpbmQoc2VsZikgfTtcclxudmFyIEtlZEJhY2tlbmRDbGllbnRXZWIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhLZWRCYWNrZW5kQ2xpZW50V2ViLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENsaWVudFdlYihhcGlCYXNlVXJsLCBwcm92aWRlck9yVG9rZW5QYXRoLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgYmVhcmVyUHJvdmlkZXIgPSB0eXBlb2YgcHJvdmlkZXJPclRva2VuUGF0aCAhPT0gJ3N0cmluZycgP1xyXG4gICAgICAgICAgICBwcm92aWRlck9yVG9rZW5QYXRoIDpcclxuICAgICAgICAgICAgbmV3IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKHByb3ZpZGVyT3JUb2tlblBhdGgsIChvcHRpb25zICYmIG9wdGlvbnMudG9rZW5SZXNwb25zZU1hcHBlcikgfHwgKGZ1bmN0aW9uICh4KSB7IHJldHVybiAoeyB0b2tlbjogeCwgZXhwaXJlczogRGF0ZS5ub3coKSArIDU5ICogNjAgKiA2MCB9KTsgfSksIG9wdGlvbnMgJiYgb3B0aW9ucy50b2tlbklkKTtcclxuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBhcGlCYXNlVXJsKSB8fCB0aGlzO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBLZWRCYWNrZW5kQ2xpZW50V2ViO1xyXG59KEtlZEJhY2tlbmRDbGllbnQpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZENsaWVudFdlYiB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgKiBmcm9tICcuL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYic7IiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBUZXJtLCBBY2FkZW1pY1llYXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNjaG9vbE1vbWVudCB7XHJcbiAgYWNhZGVtaWNZZWFyOiBBY2FkZW1pY1llYXI7XHJcbiAgdGVybTogVGVybTtcclxuICB3ZWVrPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSh0ZXJtOiBUZXJtKSB7XHJcbiAgcmV0dXJuIHRlcm0gPT09ICdBVCcgP1xyXG4gICAgWzMyLCA1MV0gOlxyXG4gICAgWzEsIDI1XTtcclxufVxyXG5cclxuLy9Ob3QgdXNlZCBhbnltb3JlXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtU3RhcnRBbmRFbmQobm93OiBtb21lbnQuTW9tZW50KSA6IG1vbWVudC5Nb21lbnRbXSB7XHJcbi8vICAgICByZXR1cm4gbm93Lm1vbnRoKCkgPj0gNiA/IC8vIDYgPSBKdWx5IGluIEpTIERhdGVzIGFuZCBpbiBtb21lbnQgYXMgd2VsbCFcclxuLy8gICAgIFttb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgNywgMSkpLCBtb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgMTEsIDMxKSldIDogLy8gYXVnMSAtIGRlYzMxXHJcbi8vICAgICBbbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDAsIDEpKSwgbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDYsIDMxKSldOyAvLyBqYW4xIC0ganVseTMxXHJcbi8vIH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtU3RhckVuZERhdGUoZGF0ZTogRGF0ZSwgaXNGaXJzdFRlcm06IGJvb2xlYW4pOiBtb21lbnQuTW9tZW50W10ge1xyXG4gIHZhciBhZGRZZWFyID0gZGF0ZS5nZXRNb250aCgpID49IDc7XHJcbiAgdmFyIHRlcm1ZZWFyID0gbnVsbDtcclxuXHJcbiAgaWYgKGFkZFllYXIpIHtcclxuICAgIHRlcm1ZZWFyID0gaXNGaXJzdFRlcm0gPyBkYXRlLmdldEZ1bGxZZWFyKCkgOiBkYXRlLmdldEZ1bGxZZWFyKCkgKyAxO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0ZXJtWWVhciA9IGlzRmlyc3RUZXJtID8gZGF0ZS5nZXRGdWxsWWVhcigpIC0gMSA6IGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICB9XHJcblxyXG4gIHZhciB0ZXJtWWVhck1vbWVudCA9IG1vbWVudCh0ZXJtWWVhci50b1N0cmluZygpLCBcIllZWVlcIik7XHJcblxyXG4gIGlmICh0ZXJtWWVhck1vbWVudC53ZWVrKCkgIT0gMSkge1xyXG4gICAgdGVybVllYXJNb21lbnQgPSB0ZXJtWWVhck1vbWVudC5jbG9uZSgpLmFkZCgxLCAnd2VlaycpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGlzRmlyc3RUZXJtID8gW21vbWVudCh0ZXJtWWVhck1vbWVudC5jbG9uZSgpKS53ZWVrKDMyKS5zdGFydE9mKCd3ZWVrJyksIG1vbWVudCh0ZXJtWWVhck1vbWVudC5jbG9uZSgpKS53ZWVrKDUxKS5lbmRPZignd2VlaycpXSA6XHJcbiAgICBbbW9tZW50KHRlcm1ZZWFyTW9tZW50LmNsb25lKCkpLCBtb21lbnQodGVybVllYXJNb21lbnQuY2xvbmUoKSkud2VlaygyNSkuZW5kT2YoJ3dlZWsnKV07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2hvb2xNb21lbnQobTogbW9tZW50Lk1vbWVudCk6IFNjaG9vbE1vbWVudCB7XHJcbiAgY29uc3QgdGhpc1llYXIgPSBtLnllYXIoKTtcclxuICBjb25zdCBpc0F1dHVtbiA9IG0ubW9udGgoKSA+PSA2OyAvLyBkZXRlcm1pbmUgXHJcbiAgY29uc3QgW2F1dHVtblllYXIsIHNwcmluZ1llYXJdID0gaXNBdXR1bW4gP1xyXG4gICAgW3RoaXNZZWFyLCB0aGlzWWVhciArIDFdIDpcclxuICAgIFt0aGlzWWVhciAtIDEsIHRoaXNZZWFyXTtcclxuICBjb25zdCBhY2FkZW1pY1llYXIgPSAnJyArIGF1dHVtblllYXIgKyAnLycgKyBzcHJpbmdZZWFyO1xyXG4gIGNvbnN0IHRlcm0gPSBpc0F1dHVtbiA/ICdBVCcgOiAnU1QnO1xyXG4gIGNvbnN0IHdlZWsgPSBtLndlZWsoKTtcclxuICByZXR1cm4geyBhY2FkZW1pY1llYXIsIHRlcm0sIHdlZWsgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFllYXIoYVllYXI6IEFjYWRlbWljWWVhciwgbnVtWWVhcnNUb0FkZDogbnVtYmVyKTogQWNhZGVtaWNZZWFyIHtcclxuICByZXR1cm4gYVllYXIuc3BsaXQoJy8nKVxyXG4gICAgLm1hcCh5ZWFyU3RyID0+IHBhcnNlSW50KHllYXJTdHIpICsgbnVtWWVhcnNUb0FkZClcclxuICAgIC5tYXAoeWVhciA9PiAnJyArIHllYXIpXHJcbiAgICAuam9pbignLycpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbmV4dEFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcclxuICByZXR1cm4gYWRkWWVhcihhWWVhciwgMSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmV2QWNhZGVtaWNZZWFyKGFZZWFyOiBBY2FkZW1pY1llYXIpOiBBY2FkZW1pY1llYXIge1xyXG4gIHJldHVybiBhZGRZZWFyKGFZZWFyLCAtMSk7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgTGl2ZVF1ZXJ5VmlldyB9IGZyb20gJy4vbGl2ZS1xdWVyeS12aWV3JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgY2hpbGRyZW46IE9ic2VydmFibGU8SlNYLkVsZW1lbnQ+O1xyXG4gIHNwaW5uZXI/OiBKU1guRWxlbWVudDtcclxuICBub0Vycm9yPzogYm9vbGVhbjtcclxuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gSlNYLkVsZW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBMYXp5Q29udGVudCh7Y2hpbGRyZW4sIHNwaW5uZXIsIG9uRXJyb3IsIG5vRXJyb3J9OiBQcm9wcykge1xyXG4gIHJldHVybiA8TGl2ZVF1ZXJ5Vmlld1xyXG4gICAgcHJvcHM9e2NoaWxkcmVufVxyXG4gICAgc3Bpbm5lcj17c3Bpbm5lcn1cclxuICAgIG5vRXJyb3I9e25vRXJyb3J9XHJcbiAgICBvbkVycm9yPXtvbkVycm9yfVxyXG4gICAgZm49e29ic2VydmFibGUgPT4gb2JzZXJ2YWJsZX0gLz47XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSAnLi9mZWF0dXJlcyc7XHJcbiIsIlxyXG5leHBvcnQgY29uc3QgS0VEX05BTUVTUEFDRSA9IFwiS0VEXCI7XHJcblxyXG5kZWNsYXJlIHZhciBLRUQ6IGFueTtcclxuXHJcbnZhciByZXN1bHQgPSB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJyA/IHt9IDogS0VEO1xyXG5cclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB3aW5kb3dbS0VEX05BTUVTUEFDRV0gPSByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBGb3JtRmllbGQgfSBmcm9tICcuL2Zvcm0tZmllbGQnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBsYWJlbDogYW55O1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgdmFsdWU6IHN0cmluZztcclxuICBwbGFjZWhvbGRlcj86IHN0cmluZztcclxuICBhdXRvRm9jdXM/OiBib29sZWFuO1xyXG4gIG9uQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRleHRJbnB1dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxGb3JtRmllbGQgbGFiZWw9e3RoaXMucHJvcHMubGFiZWx9PlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1cz17dGhpcy5wcm9wcy5hdXRvRm9jdXN9IGlkPXt0aGlzLnByb3BzLmlkfSBzaXplPXszNX0gdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMucHJvcHMub25DaGFuZ2UoZXYudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlcn0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0Zvcm1GaWVsZD5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IGxvY2FsTW9tZW50IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9tb21lbnQtc3YtbG9jYWxlJztcclxuXHJcbnR5cGUgTW9tZW50ID0gbW9tZW50Lk1vbWVudDtcclxuXHJcbmV4cG9ydCBjbGFzcyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIHtcclxuICBzdGF0aWMgRVhQSVJBVElPTl9IT1VSUyA9IDEyO1xyXG4gIHN0YXRpYyBWRVJTSU9OID0gMjtcclxuXHJcbiAgdXNlcjogc3RyaW5nO1xyXG4gIGxhc3RXcml0ZTogbnVtYmVyO1xyXG4gIHdlZWtEYXRlOiBudW1iZXI7XHJcbiAgb3BlbkNvdXJzZXM6IHsgW3BhdGg6IHN0cmluZ106IGJvb2xlYW4gfVxyXG5cclxuICBjb25zdHJ1Y3RvciAodXNlck9yQ29weTogc3RyaW5nIHwgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSkge1xyXG4gICAgaWYgKHR5cGVvZiB1c2VyT3JDb3B5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICB0aGlzLnVzZXIgPSB1c2VyT3JDb3B5O1xyXG4gICAgICB0aGlzLmxhc3RXcml0ZSA9IERhdGUubm93KCk7XHJcbiAgICAgIHRoaXMud2Vla0RhdGUgPSBsb2NhbE1vbWVudCgpLnN0YXJ0T2YoJ3dlZWsnKS52YWx1ZU9mKCk7XHJcbiAgICAgIHRoaXMub3BlbkNvdXJzZXMgPSB7fTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgdXNlck9yQ29weSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgbG9hZCh1c2VyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGNvb2tpZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlMicpO1xyXG4gICAgY29uc3Qgc3RvcmVkRGF0YSA9IGNvb2tpZSAmJiAoSlNPTi5wYXJzZShjb29raWUpIGFzIFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUpO1xyXG4gICAgY29uc3Qgc3RhdGUgPSBuZXcgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSh1c2VyKTtcclxuICAgIGlmIChzdG9yZWREYXRhKSBPYmplY3QuYXNzaWduKHN0YXRlLCBzdG9yZWREYXRhKTtcclxuXHJcbiAgICByZXR1cm4gc3RhdGUudXNlciA9PT0gdXNlciAmJiAhc3RhdGUuaXNFeHBpcmVkKG1vbWVudCgpKSA/XHJcbiAgICAgIHN0YXRlIDogbmV3IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUodXNlcik7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzYXZlKCkge1xyXG4gICAgdGhpcy5sYXN0V3JpdGUgPSBEYXRlLm5vdygpO1xyXG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KHRoaXMpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1dlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUyJywganNvbik7XHJcbiAgfVxyXG5cclxuICBpc0V4cGlyZWQgKGFzT2Y6IE1vbWVudCkge1xyXG4gICAgICByZXR1cm4gbW9tZW50KHRoaXMubGFzdFdyaXRlKVxyXG4gICAgICAgIC5pc0JlZm9yZShcclxuICAgICAgICAgICAgYXNPZi5hZGQoXHJcbiAgICAgICAgICAgICAgICAwLVdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUuRVhQSVJBVElPTl9IT1VSUywgJ2hvdXJzJylcclxuICAgICAgICApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge0tlZFJlcG99IGZyb20gJy4va2VkLXJlcG8nO1xyXG5pbXBvcnQgeyBVc2VyVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSB9IGZyb20gXCIuLi9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXBlcnNpc3RlZC1zdGF0ZVwiO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IGNyZWF0ZVVVSUQsIERvY3VtZW50QWNjZXNzLCBLZWRCYWNrZW5kQ2xpZW50IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBnZXRBZGp1c3RlZFdlZWssIEtFRFdlZWsgfSBmcm9tICcuLi91dGlscy93ZWVrdXRpbCc7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcblxyXG5leHBvcnQgbGV0IHVzZXJUYXNrc1JlcG8gPSBlbnYudXNlclRhc2tzUmVwbyBhcyBVc2VyVGFza3NSZXBvO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVzZXJUYXNrc1JlcG8gZXh0ZW5kcyBLZWRSZXBvPFVzZXJUYXNrPiB7XHJcbiAgcGVyc2lzdGVkU3RhdGU6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUgfCBudWxsO1xyXG4gIGdldEN1cnJlbnRVc2VyOiAoKT0+VXNlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoZ2V0Q2xpZW50OiAoKT0+S2VkQmFja2VuZENsaWVudCwgZ2V0Q3VycmVudFVzZXI6ICgpPT5Vc2VyKSB7ICAgIFxyXG4gICAgc3VwZXIoe1xyXG4gICAgICBnZXRDbGllbnQsXHJcbiAgICAgIG9wdGltaXN0aWM6IHRydWUsXHJcbiAgICAgIHRhYmxlOiBcInVzZXJ0YXNrc1wiLFxyXG4gICAgICB1c2VyOiBnZXRDdXJyZW50VXNlcigpID8gZ2V0Q3VycmVudFVzZXIoKS5tYWlsIDogXCJcIixcclxuICAgICAgZ2V0UXVlcnlPcHRpb25zOiBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudFVzZXIgPSBnZXRDdXJyZW50VXNlcigpO1xyXG4gICAgICAgIGNvbnN0IHVzZXJFbWFpbCA9IGN1cnJlbnRVc2VyID8gY3VycmVudFVzZXIubWFpbCA6IFwiXCI7XHJcbiAgICAgICAgaWYgKCF0aGlzLnBlcnNpc3RlZFN0YXRlKVxyXG4gICAgICAgICAgdGhpcy5wZXJzaXN0ZWRTdGF0ZSA9IGF3YWl0IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUubG9hZCh1c2VyRW1haWwpO1xyXG4gICAgICAgIGNvbnN0IHsgd2Vla0RhdGUgfSA9IHRoaXMucGVyc2lzdGVkU3RhdGU7XHJcbiAgICAgICAgY29uc3Qgd2Vla051bWJlciA9IG1vbWVudCh3ZWVrRGF0ZSkud2VlaygpO1xyXG4gICAgICAgIGNvbnN0IGtlZFdlZWsgPSBLRURXZWVrKG1vbWVudCh3ZWVrRGF0ZSkueWVhcigpLCB3ZWVrTnVtYmVyKTtcclxuICAgICAgICAvKmNvbnN0IFtmcm9tLCB0b10gPSBbbW9tZW50KHdlZWtEYXRlKS5zdGFydE9mKCd3ZWVrJyksIG1vbWVudCh3ZWVrRGF0ZSkuZW5kT2YoJ3dlZWsnKV1cclxuICAgICAgICAgIC5tYXAobSA9PiBtLnRvRGF0ZSgpLmdldFRpbWUoKSk7Ki9cclxuICAgICAgICBcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZyb206IGtlZFdlZWsubm90QmVmb3JlLFxyXG4gICAgICAgICAgICB0bzoga2VkV2Vlay5ub3RBZnRlcixcclxuICAgICAgICAgICAgcm9sZTogXCJVU0VSXCIsXHJcbiAgICAgICAgICAgIGluY2x1ZGU6IFtcInRhc2tcIiwgXCJjb3Vyc2VcIl0sXHJcbiAgICAgICAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXSxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnBlcnNpc3RlZFN0YXRlID0gbnVsbDtcclxuICAgIHRoaXMuZ2V0Q3VycmVudFVzZXIgPSBnZXRDdXJyZW50VXNlcjtcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZVBlcnNpc3RlZFN0YXRlKHN0YXRlQ2hhbmdlczogUGFydGlhbDxXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlPikge1xyXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLnBlcnNpc3RlZFN0YXRlLCBzdGF0ZUNoYW5nZXMpO1xyXG4gICAgYXdhaXQgdGhpcy5wZXJzaXN0ZWRTdGF0ZS5zYXZlKCk7XHJcbiAgICB0aGlzLm1lbS5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2V0VGFza0RvbmVTdGF0ZSh1c2VyVGFzazogVXNlclRhc2ssIGRvbmU6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IHtnZXRDbGllbnQsIG9wdGltaXN0aWMsIHRhYmxlfSA9IHRoaXMub3B0aW9ucztcclxuICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xyXG4gICAgY29uc3QgbW9kaWZpZWRJdGVtID0gT2JqZWN0LmFzc2lnbih7fSwgdXNlclRhc2ssIHtkb25lfSk7XHJcbiAgICBpZiAob3B0aW1pc3RpYykgYXdhaXQgdGhpcy5tZW0udXBkYXRlKE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVkSXRlbSwgeyRtZXRhOiAndXBkYXRpbmcnfSkpO1xyXG4gICAgLy8gTm93IG1ha2Ugc3VyZSB0byBjaGFuZ2UgdGhlIHN0YXRlIGZvciBvdGhlciB3ZWVrcyBhcyB3ZWxsOlxyXG4gICAgY29uc3Qgc2ltaWxhclRhc2tzID0gYXdhaXQgY2xpZW50Lmxpc3Q8VXNlclRhc2s+KCd1c2VydGFza3MnLCB7XHJcbiAgICAgIG5hbWU6IHVzZXJUYXNrLm5hbWUsXHJcbiAgICAgIHJvbGU6IFwiVVNFUlwiLFxyXG4gICAgICBpbmNsdWRlOiBbXCJ0YXNrXCIsXCJjb3Vyc2VcIl0sXHJcbiAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXSxcclxuICAgICAgZnJvbTogbW9tZW50KHRoaXMucGVyc2lzdGVkU3RhdGUud2Vla0RhdGUpLmFkZCgtMywgJ3dlZWtzJykudmFsdWVPZigpLFxyXG4gICAgICB0bzogbW9tZW50KHRoaXMucGVyc2lzdGVkU3RhdGUud2Vla0RhdGUpLmFkZCgzLCAnd2Vla3MnKS52YWx1ZU9mKClcclxuICAgIH0sIHtcclxuICAgICAgY2FjaGU6ICduby1jYWNoZSdcclxuICAgIH0pO1xyXG4gICAgY29uc3QgaWRlbnRpY2FsVGFza3MgPSBzaW1pbGFyVGFza3MuZmlsdGVyKHQgPT5cclxuICAgICAgdC5jb3Vyc2VOYW1lID09PSB1c2VyVGFzay5jb3Vyc2VOYW1lICYmXHJcbiAgICAgIHQubGVhcm5pbmdHb2FsID09PSB1c2VyVGFzay5sZWFybmluZ0dvYWwgJiZcclxuICAgICAgKCF1c2VyVGFzay50YXNrIHx8IHQudGFzay5tYXAodD0+dC5pZCkuam9pbignJykgPT09IHVzZXJUYXNrLnRhc2subWFwKHQ9PnQuaWQpLmpvaW4oJycpKSAmJlxyXG4gICAgICAoIXVzZXJUYXNrLmNvdXJzZSB8fCB0LmNvdXJzZS5tYXAoYz0+Yy5pZCkuam9pbignJykgPT09IHVzZXJUYXNrLmNvdXJzZS5tYXAoYz0+Yy5pZCkuam9pbignJykpKTtcclxuICAgIGlmIChpZGVudGljYWxUYXNrcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaXNzdWUgaW4gU3ViamVjdFBsYW5uZXIgbWlncmF0aW9uICh1c2VydGFza3Mgd2l0aCBsb25nIG5hbWVzIGlzIG5vdCBmb3VuZClcclxuICAgICAgaWRlbnRpY2FsVGFza3MucHVzaCh1c2VyVGFzaylcclxuICAgIH1cclxuICAgIGF3YWl0IHRoaXMudXBkYXRlKGlkZW50aWNhbFRhc2tzLCB0ID0+IHQuZG9uZSA9IGRvbmUpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2V0U3ViVGFza0RvbmVTdGF0ZSAodXNlclRhc2s6IFVzZXJUYXNrLCBzdWJUYXNrSWQ6IHN0cmluZywgZG9uZTogYm9vbGVhbikge1xyXG4gICAgY29uc3Qge2dldENsaWVudCwgb3B0aW1pc3RpYywgdGFibGV9ID0gdGhpcy5vcHRpb25zO1xyXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XHJcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShbdXNlclRhc2tdLFxyXG4gICAgICB0ID0+IHQuc3ViVGFza3MgJiYgdC5zdWJUYXNrcy5maWx0ZXIoc3QgPT4gc3QuaWQgPT09IHN1YlRhc2tJZClcclxuICAgICAgICAuZm9yRWFjaChzdCA9PiBzdC5kb25lID0gZG9uZSkpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2V0V2Vla1BsYW5uZXJCb3hPcGVuKGNvdXJzZU5hbWU6IHN0cmluZywgaXNPcGVuOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBvcGVuQ291cnNlcyA9IHsgLi4udGhpcy5wZXJzaXN0ZWRTdGF0ZS5vcGVuQ291cnNlcyB9O1xyXG4gICAgaWYgKGlzT3BlbilcclxuICAgICAgb3BlbkNvdXJzZXNbY291cnNlTmFtZV0gPSB0cnVlO1xyXG4gICAgZWxzZVxyXG4gICAgICBkZWxldGUgb3BlbkNvdXJzZXNbY291cnNlTmFtZV07XHJcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVBlcnNpc3RlZFN0YXRlKHtvcGVuQ291cnNlc30pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY2hhbmdlV2Vlayh3ZWVrRGF0ZTogRGF0ZSwga2VlcEN1cnJlbnREYXRlPzogYm9vbGVhbikge1xyXG4gICAgbGV0IHBlcnNpc3RlZFN0YXRlID0gdGhpcy5wZXJzaXN0ZWRTdGF0ZTtcclxuICAgIGlmICghcGVyc2lzdGVkU3RhdGUpIHtcclxuICAgICAgcGVyc2lzdGVkU3RhdGUgPSBhd2FpdCBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlLmxvYWQodGhpcy5vcHRpb25zLnVzZXIpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV3UGVyc2lzdGVkID0gbmV3IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUocGVyc2lzdGVkU3RhdGUpO1xyXG4gICAgbmV3UGVyc2lzdGVkLndlZWtEYXRlID0ga2VlcEN1cnJlbnREYXRlID8gbW9tZW50KHdlZWtEYXRlKS52YWx1ZU9mKCkgOiBtb21lbnQod2Vla0RhdGUpLnN0YXJ0T2YoJ3dlZWsnKS52YWx1ZU9mKCk7XHJcbiAgICBuZXdQZXJzaXN0ZWQuc2F2ZSgpO1xyXG4gICAgdGhpcy5wZXJzaXN0ZWRTdGF0ZSA9IG5ld1BlcnNpc3RlZDtcclxuICAgIGF3YWl0IHRoaXMubWVtLnJlZnJlc2hGcm9tU2VydmVyKCk7XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmUoc3Vic2NyaWJlcjogKHVzZXJUYXNrczogVXNlclRhc2tbXSwgcGVyc2lzdGVkU3RhdGU6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUsIHdlZWtUZXh0c1VUOiBVc2VyVGFzaykgPT4gdm9pZCkge1xyXG4gICAgY29uc3QgcHJveHlTdWJzY3JpYmVyID0gKHVzZXJUYXNrczogVXNlclRhc2tbXSkgPT4ge1xyXG4gICAgICBzdWJzY3JpYmVyKFxyXG4gICAgICAgIHVzZXJUYXNrcy5maWx0ZXIodXQgPT4gIXV0LndlZWtUZXh0cyksXHJcbiAgICAgICAgdGhpcy5wZXJzaXN0ZWRTdGF0ZSxcclxuICAgICAgICB1c2VyVGFza3MuZmlsdGVyKHV0ID0+ICEhdXQud2Vla1RleHRzKVswXSB8fCB7XHJcbiAgICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICAgICAgZGF0ZVRpbWU6IHRoaXMucGVyc2lzdGVkU3RhdGUud2Vla0RhdGUsXHJcbiAgICAgICAgICB3ZWVrVGV4dHM6IHthc3Nlc3NtZW50OicnLCBzdHJhdGVneTonJ30sXHJcbiAgICAgICAgICBhY2w6IFtcclxuICAgICAgICAgICAgLy8gRGVmYXVsdCBBQ0w6IExldCB1c2VyIHNlbGYgaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGlzIGl0ZW06XHJcbiAgICAgICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcImVtYWlsXCIsIHRoaXMuZ2V0Q3VycmVudFVzZXIoKS5tYWlsLCBcIlNcIiksXHJcbiAgICAgICAgICAgIC8vIEFkZGl0aW9uYWwgQUNMOiBMZXQgZW1wbG95ZWVzIG9uIHNhbWUgc2Nob29sIGhhdmUgcmVhZCBhY2Nlc3MgdG8gaXQuXHJcbiAgICAgICAgICAgIC8vIFRoaXMgY3VycmVudGx5IG9ubHkgYXBwbGllcyB0byB0YXNrcyB0aGF0IHJlZmVyIHRvIGNvdXJzZSB0YXNrcyAobm90IG93biB0YXNrcyEpXHJcbiAgICAgICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcInNjaG9vbFJvbGVcIiwgYCR7dGhpcy5nZXRDdXJyZW50VXNlcigpLnNjaG9vbH0vRU1QTE9ZRUVgLCBcIlJcIilcclxuICAgICAgICAgIF0ubWFwKGFjID0+IGFjLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcHJveHlTdWJzY3JpYmVyW1wic3Vic2NyaWJlclwiXSA9IHN1YnNjcmliZXI7XHJcbiAgICB0aGlzLm1lbS5zdWJzY3JpYmUocHJveHlTdWJzY3JpYmVyKTtcclxuICB9XHJcblxyXG4gIHVuc3Vic2NyaWJlKHN1YnNjcmliZXI6ICh1c2VyVGFza3M6IFVzZXJUYXNrW10sIHBlcnNpc3RlZFN0YXRlOiBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlLCB3ZWVrVGV4dHNVVDogVXNlclRhc2spID0+IHZvaWQpIHtcclxuICAgIHRoaXMubWVtLnN1YnNjcmliZXJzID0gdGhpcy5tZW0uc3Vic2NyaWJlcnMuZmlsdGVyIChzID0+IHNbXCJzdWJzY3JpYmVyXCJdICE9PSBzdWJzY3JpYmVyKTtcclxuICB9XHJcbiAgXHJcbn1cclxuXHJcbmlmICghdXNlclRhc2tzUmVwbykge1xyXG4gIHVzZXJUYXNrc1JlcG8gPSBlbnYudXNlclRhc2tzUmVwbyA9IG5ldyBVc2VyVGFza3NSZXBvKFxyXG4gICAgKCk9PmVudi5rZWRCYWNrZW5kQ2xpZW50LFxyXG4gICAgKCk9PmVudi5jdXJyZW50VXNlcik7XHJcbiAgdXNlclRhc2tzUmVwby5tZW0uZW5zdXJlSGFzRGF0YSgpO1xyXG59XHJcbiIsIlxyXG5leHBvcnQgY29uc3QgS0VEX05BTUVTUEFDRSA9IFwiS0VEXCI7XHJcblxyXG5kZWNsYXJlIHZhciBLRUQ6IGFueTtcclxuXHJcbnZhciByZXN1bHQgPSB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJyA/IHt9IDogS0VEO1xyXG5cclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB3aW5kb3dbS0VEX05BTUVTUEFDRV0gPSByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcclxuIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgVmFsdWUgfSBmcm9tIFwiLi92YWx1ZVwiO1xyXG52YXIgRW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKEVtaXR0ZXIsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBFbWl0dGVyKGluaXRpYWxWYWx1ZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnN1YnNjcmliZXJzID0gX3RoaXMuc3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gX2FbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMgIT09IG9ic2VydmVyO1xyXG4gICAgICAgICAgICAgICAgfSk7IH0sXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZXJzLnB1c2goW29ic2VydmVyLCBzdWJzY3JpcHRpb25dKTtcclxuICAgICAgICAgICAgaWYgKF90aGlzLmVycm9yKVxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgX3RoaXMuZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyKF90aGlzLnZhbHVlLCB1bmRlZmluZWQsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XHJcbiAgICAgICAgfSkgfHwgdGhpcztcclxuICAgICAgICBfdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xyXG4gICAgICAgIF90aGlzLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIEVtaXR0ZXIucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2goKTtcclxuICAgIH07XHJcbiAgICBFbWl0dGVyLnByb3RvdHlwZS5kaXNwYXRjaEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoKCk7XHJcbiAgICB9O1xyXG4gICAgRW1pdHRlci5wcm90b3R5cGUuX2Rpc3BhdGNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVswXSwgc3Vic2NyaXB0aW9uID0gX2FbMV07XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihfdGhpcy52YWx1ZSwgX3RoaXMuZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEVtaXR0ZXI7XHJcbn0oVmFsdWUpKTtcclxuZXhwb3J0IHsgRW1pdHRlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbWl0dGVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwiLi9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IGluaXRNYXBNZXRob2QgfSBmcm9tIFwiLi9tYXBcIjtcclxuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gXCIuL2NvbGxlY3Rpb25cIjtcclxuaW1wb3J0IHsgRmliZXJDb250ZXh0IH0gZnJvbSAnLi9maWJlci1jb250ZXh0JztcclxudmFyIFZhbHVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmFsdWUsIF9zdXBlcik7XHJcbiAgICBmdW5jdGlvbiBWYWx1ZShzdWJzY3JpYmUpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgc3Vic2NyaWJlKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgVmFsdWUuZnJvbSA9IGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgaWYgKHguc3Vic2NyaWJlKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsdWUuZnJvbSgpIGNhbiBvbmx5IHRha2Ugb2JzZXJ2YWJsZXNcIik7XHJcbiAgICB9O1xyXG4gICAgVmFsdWUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc29sdmVkID0gZmFsc2UsIHJlc3VsdCwgZXJyLCBub3RpZnk7XHJcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XHJcbiAgICAgICAgICAgIGVyciA9IGVycm9yO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgbm90aWZ5KVxyXG4gICAgICAgICAgICAgICAgbm90aWZ5KG51bGwsIGVycm9yLCBzdWJzY2lwdGlvbik7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG5vdGlmeSlcclxuICAgICAgICAgICAgICAgIG5vdGlmeSh2YWx1ZSwgbnVsbCwgc3Vic2NpcHRpb24pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChyZXNvbHZlZCkge1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudEZpYmVyID0gRmliZXJDb250ZXh0LmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGlmICghY3VycmVudEZpYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgRmliZXIgQ29udGV4dFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IGN1cnJlbnRGaWJlci5zdWJzY3JpcHRpb25zLCBvYnNlcnZlciA9IGN1cnJlbnRGaWJlci5vYnNlcnZlcjtcclxuICAgICAgICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIG5vdGlmeSA9IG9ic2VydmVyO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIG5vdGlmeSA9IGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY2lwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBzdWJzY2lwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoZm4odmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgIH0pOyB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKHByZWZpeCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwcmVmaXgsIHgpO1xyXG4gICAgICAgICAgICByZXR1cm4geDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUudG9Db2xsZWN0aW9uID0gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy5tYXAobWFwcGVyKS5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgfTtcclxuICAgIFZhbHVlLnByb3RvdHlwZS5jb21iaW5lTGF0ZXN0ID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gW251bGwsIG51bGxdO1xyXG4gICAgICAgICAgICB2YXIgbXlTdWJzY3JpcHRpb24sIG90aGVyU3Vic2NyaXB0aW9uO1xyXG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBteVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG90aGVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIG15U3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChpdGVtcywgZXJyb3IsIHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhbHVlc1swXSA9IGl0ZW1zO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1sxXSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcih2YWx1ZXMsIG51bGwsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBvdGhlclN1YnNjcmlwdGlvbiA9IG90aGVyLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YWx1ZXNbMV0gPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbMF0gIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWVzLCBudWxsLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBWYWx1ZS5wcm90b3R5cGUuc3dpdGNoTWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgdmFyIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgcmV0dXJuZWRTdWJzY3JpcHRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXBwZWRTdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKGl0ZW0sIGVycm9yLCBzKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBzO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1hcHBlZFN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHJldHVybmVkU3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlT3JWYWx1ZSA9IG1hcHBlcihpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9ic2VydmFibGVPclZhbHVlICYmIHR5cGVvZiBvYnNlcnZhYmxlT3JWYWx1ZS5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG9ic2VydmFibGVPclZhbHVlLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcih2YWx1ZSwgZXJyb3IsIHJldHVybmVkU3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIob2JzZXJ2YWJsZU9yVmFsdWUsIG51bGwsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5lZFN1YnNjcmlwdGlvbjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVmFsdWU7XHJcbn0oT2JzZXJ2YWJsZSkpO1xyXG5leHBvcnQgeyBWYWx1ZSB9O1xyXG5WYWx1ZS5wcm90b3R5cGUubWFwID0gaW5pdE1hcE1ldGhvZChWYWx1ZSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbHVlLmpzLm1hcCIsInZhciBPYnNlcnZhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy9zdGF0aWMgZ2V0IFtTeW1ib2wuc3BlY2llc10oKSB7IHJldHVybiB0aGlzOyB9XHJcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKF9zdWJzY3JpYmUpIHtcclxuICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBfc3Vic2NyaWJlO1xyXG4gICAgfVxyXG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShmdW5jdGlvbiAoaXRlbXMsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIoaXRlbXMsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVyciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgeyB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkgeyB9IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcclxufSgpKTtcclxuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgbGFiZWw6IGFueTtcclxuICBjaGlsZHJlbjogYW55O1xyXG4gIGlkPzogc3RyaW5nO1xyXG59XHJcblxyXG5mdW5jdGlvbiBmaW5kSWQobm9kZSkge1xyXG4gIGNvbnN0IHJlY3VjaGVjayA9IG5ldyBTZXQoKTtcclxuICByZXR1cm4gKGZ1bmN0aW9uIGZpbmRJZChub2RlKXtcclxuICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHJldHVybiBudWxsO1xyXG4gICAgaWYgKHJlY3VjaGVjay5oYXMobm9kZSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgcmVjdWNoZWNrLmFkZChub2RlKTtcclxuICAgIGlmIChub2RlLnByb3BzKSB7XHJcbiAgICAgIGlmIChub2RlLnByb3BzLmlkKSByZXR1cm4gbm9kZS5wcm9wcy5pZDtcclxuICAgICAgaWYgKG5vZGUucHJvcHMuY2hpbGRyZW4pIHtcclxuICAgICAgICByZXR1cm4gZmluZElkKG5vZGUucHJvcHMuY2hpbGRyZW4pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChub2RlLmxlbmd0aCkge1xyXG4gICAgICBmb3IgKGxldCBpPTA7aTxub2RlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSBub2RlW2ldO1xyXG4gICAgICAgIGlmIChjaGlsZCkge1xyXG4gICAgICAgICAgY29uc3QgY2hpbGRJZCA9IGZpbmRJZChjaGlsZCk7XHJcbiAgICAgICAgICBpZiAoY2hpbGRJZCkgcmV0dXJuIGNoaWxkSWQ7XHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKGNoaWxkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KShub2RlKTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZvcm1GaWVsZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiA8PlxyXG4gICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJrY2xhYmVsXCIgaHRtbEZvcj17dGhpcy5wcm9wcy5pZCB8fCBmaW5kSWQodGhpcy5wcm9wcy5jaGlsZHJlbil9Pnt0aGlzLnByb3BzLmxhYmVsfTwvbGFiZWw+XHJcbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XHJcbiAgICA8Lz5cclxuICB9XHJcbn1cclxuIiwiZXhwb3J0ICogZnJvbSAnLi9qcy9kaXN0L2pzL29ic2VydmFibGUnO1xyXG4iLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBpbml0TWFwTWV0aG9kIH0gZnJvbSBcIi4vbWFwXCI7XHJcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vdmFsdWVcIjtcclxuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCIuL2VtaXR0ZXJcIjtcclxudmFyIENvbGxlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb2xsZWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ29sbGVjdGlvbihzdWJzY3JpYmUpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgc3Vic2NyaWJlKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuX21hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcclxuICAgICAgICB0aHJvdyBcIm1peGVkaW5cIjtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLmZyb20gPSBmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgIGlmICh4LnN1YnNjcmliZSlcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcclxuICAgICAgICAgICAgdmFyIGVtaXR0ZXJfMSA9IG5ldyBFbWl0dGVyKHgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGVtaXR0ZXJfMS5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYnNlcnZhYmxlQ29sbGVjdGlvbi5mcm9tKCkgY2FuIG9ubHkgdGFrZSBhcnJheXMgb3Igb2JzZXJ2YWJsZXNcIik7XHJcbiAgICB9O1xyXG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7IHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIG1hcHBlcihpdGVtKTsgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgaXRlbXMpOyB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIGl0ZW1zLmZpbHRlcihmaWx0ZXIpOyB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gQ29sbGVjdGlvbi5mcm9tKHRoaXMudG9WYWx1ZSgpLmNvbWJpbmVMYXRlc3Qob3RoZXIpLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIG1lID0gX2FbMF0sIG90aGVyID0gX2FbMV07XHJcbiAgICAgICAgICAgIHJldHVybiBtZS5jb25jYXQob3RoZXIpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5vcmRlckJ5ID0gZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChhcnJheSkgeyByZXR1cm4gYXJyYXkuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHZhciBhUHJvcCA9IGEgJiYgYVtwcm9wXTtcclxuICAgICAgICAgICAgdmFyIGJQcm9wID0gYiAmJiBiW3Byb3BdO1xyXG4gICAgICAgICAgICByZXR1cm4gYVByb3AgPiBiUHJvcCA/IDEgOiBhUHJvcCA8IGJQcm9wID8gLTEgOiAwO1xyXG4gICAgICAgIH0pOyB9KS50b0NvbGxlY3Rpb24oZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLnRvVmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmdyb3VwQnkgPSBmdW5jdGlvbiAocHJvcCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBydiA9IHt9O1xyXG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHJ2W2l0ZW1bcHJvcF1dIHx8IChydltpdGVtW3Byb3BdXSA9IFtdKTtcclxuICAgICAgICAgICAgICAgIGxpc3QucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBydjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyclswXTsgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbGxlY3Rpb247XHJcbn0oT2JzZXJ2YWJsZSkpO1xyXG5leHBvcnQgeyBDb2xsZWN0aW9uIH07XHJcbkNvbGxlY3Rpb24ucHJvdG90eXBlLl9tYXAgPSBpbml0TWFwTWV0aG9kKENvbGxlY3Rpb24pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsZWN0aW9uLmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xyXG5pbXBvcnQgeyBzaGFsbG93RXF1YWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdrZWRiYWNrZW5kL29ic2VydmFibGUnO1xyXG5cclxuaW50ZXJmYWNlIE9wdGlvbnMge1xyXG4gIHNwaW5uZXI/OiBKU1guRWxlbWVudDtcclxuICBvbkVycm9yPzogKGVycm9yOiBFcnJvcikgPT4gSlNYLkVsZW1lbnQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsaXZlUXVlcnlWaWV3PFRQcm9wcz4oXHJcbiAgZm46IChwcm9wczogVFByb3BzKSA9PiBPYnNlcnZhYmxlPEpTWC5FbGVtZW50PixcclxuICBvcHRpb25zPzogT3B0aW9ucyk6IChwcm9wczogVFByb3BzKSA9PiBKU1guRWxlbWVudFxyXG57XHJcbiAgcmV0dXJuIChwcm9wczogVFByb3BzKT0+e1xyXG4gICAgcmV0dXJuIDxMaXZlUXVlcnlWaWV3IHByb3BzPXtwcm9wc30gZm49e2ZufSB7Li4ub3B0aW9uc30gLz47XHJcbiAgfVxyXG59XHJcblxyXG5pbnRlcmZhY2UgUHJvcHM8VFByb3BzPiB7XHJcbiAgcHJvcHM6IFRQcm9wcztcclxuICBzcGlubmVyPzogSlNYLkVsZW1lbnQ7XHJcbiAgbm9FcnJvcj86IGJvb2xlYW47XHJcbiAgb25FcnJvcj86IChlcnJvcjogRXJyb3IpID0+IEpTWC5FbGVtZW50O1xyXG4gIGZuOiAocHJvcHM6IFRQcm9wcykgPT4gT2JzZXJ2YWJsZTxKU1guRWxlbWVudD47XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgcmVzdWx0OiBKU1guRWxlbWVudDtcclxuICBlcnJvcj86IEVycm9yO1xyXG4gIGlzTG9hZGluZzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExpdmVRdWVyeVZpZXc8VFByb3BzPiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wczxUUHJvcHM+LCBTdGF0ZT4ge1xyXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uPzogU3Vic2NyaXB0aW9uO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHM8VFByb3BzPikge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgcmVzdWx0OiBudWxsLFxyXG4gICAgICBpc0xvYWRpbmc6IHRydWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMuc3Vic2NyaWJlKCk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcclxuICB9XHJcblxyXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHM6IFByb3BzPFRQcm9wcz4sIG5leHRTdGF0ZTogU3RhdGUpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHRoaXMuc3RhdGUuZXJyb3IgIT09IG5leHRTdGF0ZS5lcnJvciB8fFxyXG4gICAgICB0aGlzLnN0YXRlLmlzTG9hZGluZyAhPT0gbmV4dFN0YXRlLmlzTG9hZGluZyB8fFxyXG4gICAgICB0aGlzLnN0YXRlLnJlc3VsdCAhPT0gbmV4dFN0YXRlLnJlc3VsdCB8fFxyXG4gICAgICAhc2hhbGxvd0VxdWFscyhuZXh0UHJvcHMucHJvcHMsIHRoaXMucHJvcHMucHJvcHMpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogUHJvcHM8VFByb3BzPikge1xyXG4gICAgaWYgKCFzaGFsbG93RXF1YWxzKHByZXZQcm9wcy5wcm9wcywgdGhpcy5wcm9wcy5wcm9wcykpIHtcclxuICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICB0aGlzLnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlKCkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7aXNMb2FkaW5nOiB0cnVlfSBhcyBhbnkpO1xyXG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnByb3BzLmZuKHRoaXMucHJvcHMucHJvcHMpLnN1YnNjcmliZSgocmVzdWx0LCBlcnJvcikgPT4gdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHJlc3VsdCxcclxuICAgICAgZXJyb3IsXHJcbiAgICAgIGlzTG9hZGluZzogZmFsc2VcclxuICAgIH0pKTtcclxuICB9XHJcblxyXG4gIHVuc3Vic2NyaWJlKCkge1xyXG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIFxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHtyZXN1bHQsIGVycm9yLCBpc0xvYWRpbmd9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHtzcGlubmVyLCBvbkVycm9yLCBub0Vycm9yfSA9IHRoaXMucHJvcHM7XHJcbiAgICAvL2lmICghaXNMb2FkaW5nICYmICFyZXN1bHQpIGRlYnVnZ2VyO1xyXG4gICAgcmV0dXJuIGVycm9yID9cclxuICAgICAgbm9FcnJvciA/IFwiXCIgOiBvbkVycm9yID8gb25FcnJvcihlcnJvcikgOiA8cD5FcnJvcjoge2Vycm9yLm1lc3NhZ2V9PC9wPiA6XHJcbiAgICAgIGlzTG9hZGluZyA/XHJcbiAgICAgICAgc3Bpbm5lciA/IHNwaW5uZXIgOiBcIlwiIDpcclxuICAgICAgICByZXN1bHQgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiByZXN1bHQ7XHJcbiAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIG9uQ2xpY2ssXHJcbiAgY2xhc3NOYW1lPyxcclxuICBzdHlsZT8sXHJcbiAgdGl0bGU/XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUmVtb3ZlSXRlbSA9ICh7IG9uQ2xpY2ssIGNsYXNzTmFtZSwgc3R5bGUsIHRpdGxlIH06IFByb3BzKSA9PlxyXG5cclxuICA8ZGl2XHJcbiAgICB0aXRsZT17dGl0bGUgfHwgTGBSYWRlcmFgfVxyXG4gICAgY2xhc3NOYW1lPXtcInJlbW92ZUl0ZW0gXCIgKyAoY2xhc3NOYW1lIHx8IFwiXCIpfVxyXG4gICAgb25DbGljaz17b25DbGlja30gc3R5bGU9e3N0eWxlfSAvPlxyXG4iLCJpbXBvcnQgbW9tZW50LCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBLRURXZWVrICh5ZWFyOiBudW1iZXIsIHdlZWs6IG51bWJlcikge1xyXG4gIGNvbnN0IG0gPSBtb21lbnQobmV3IERhdGUoeWVhciwgMSwgMSkpLndlZWsod2Vlayk7XHJcbiAgY29uc3QgcmVzID0ge1xyXG4gICAgeWVhcixcclxuICAgIHdlZWssXHJcbiAgICBub3RCZWZvcmU6IG0uY2xvbmUoKS5zdGFydE9mKCd3ZWVrJykuYWRkKC0yLCAnZGF5cycpLnRvRGF0ZSgpLmdldFRpbWUoKSxcclxuICAgIG5vdEFmdGVyOiBtLmNsb25lKCkuc3RhcnRPZignd2VlaycpLmFkZCg1LCAnZGF5cycpLnRvRGF0ZSgpLmdldFRpbWUoKVxyXG4gIH07XHJcbiAgcmV0dXJuIHJlcztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRXZWVrRGF0ZShkYXRlOiBNb21lbnQpOiB7IGFkanVzdGVkOiBib29sZWFuLCBuZXh0RGF0ZTogRGF0ZSB9e1xyXG4gIHZhciBuZXh0RGF0ZSA9IG1vbWVudChkYXRlKS5hZGQoMSwgJ3dlZWsnKTtcclxuICAvL1NldCB0aGUgMDEuMDEgb2YgdGhlIG5leHQgeWVhciBpbiBjYXNlIHRoZSBuZXh0IHdlZWsgaXMgaW4gdGhlIHNhbWUgeWVhciBcclxuICAvL2FuZCB0aGUgcHJldmlvdXMgd2VlayBpcyB0aGUgbGFzdCB3ZWVrIG9mIHRoZSB5ZWFyXHJcbiAgaWYoZGF0ZS53ZWVrKCkgPT09IGRhdGUud2Vla3NJblllYXIoKSAmJiBuZXh0RGF0ZS55ZWFyKCkgPT09IGRhdGUueWVhcigpKXtcclxuICAgIHJldHVybiB7YWRqdXN0ZWQ6IHRydWUsIG5leHREYXRlOiBtb21lbnQoYCR7ZGF0ZS55ZWFyKCkgKyAxfS0wMS0wMWApLnRvRGF0ZSgpfTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7YWRqdXN0ZWQ6IGZhbHNlLCBuZXh0RGF0ZTogbmV4dERhdGUudG9EYXRlKCl9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJldldlZWtEYXRlKGRhdGU6IE1vbWVudCk6IHsgYWRqdXN0ZWQ6IGJvb2xlYW4sIG5leHREYXRlOiBEYXRlIH17XHJcbiAgdmFyIHByZXZEYXRlID0gbW9tZW50KGRhdGUpLmFkZCgtMSwgJ3dlZWsnKTtcclxuICAvL1NldCB0aGUgMDEuMDEgb2YgdGhlIGN1cnJlbnQgeWVhciBpbiBjYXNlIHRoZSBwcmV2IHdlZWsgaXMgaW4gdGhlIHByZXZpb3VzIHllYXJcclxuICBpZihkYXRlLndlZWsoKSA9PT0gMiAmJiBwcmV2RGF0ZS55ZWFyKCkgIT09IGRhdGUueWVhcigpKXtcclxuICAgIHJldHVybiB7YWRqdXN0ZWQ6IHRydWUsIG5leHREYXRlOiBtb21lbnQoYCR7ZGF0ZS55ZWFyKCl9LTAxLTAxYCkudG9EYXRlKCl9O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHthZGp1c3RlZDogZmFsc2UsIG5leHREYXRlOiBwcmV2RGF0ZS50b0RhdGUoKX07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBZGp1c3RlZFdlZWsobTogTW9tZW50KSB7XHJcbiAgY29uc3QgY2xvbmUgPSBtLmNsb25lKCk7XHJcbiAgcmV0dXJuIG0ud2Vla2RheSgpID49IDUgPyAvLyBMw7ZyZGFnIDAwOjAwIC8gU8O2bmRhZyAwMDowMD9cclxuICAgICAgbS53ZWVrKCkgKyAxIDogLy8gVGlsbGjDtnIgbsOkc3RhIHZlY2thXHJcbiAgICAgIG0ud2VlaygpO1xyXG59XHJcblxyXG4vKmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrTGltaXRzIChtOiBNb21lbnQpIHtcclxuICBjb25zdCBjbG9uZWRTd2VkaXNoID0gbS5jbG9uZSgpLmxvY2FsZSgnc3YnKTtcclxuICBjb25zdCBsaW1pdHMgPSB7XHJcbiAgICBub3RCZWZvcmU6IGNsb25lZFN3ZWRpc2guc3RhcnRPZignd2VlaycpLmFkZCgtMiwgJ2RheXMnKSxcclxuICAgIG5vdEFmdGVyOiBjbG9uZWRTd2VkaXNoLnN0YXJ0T2YoJ3dlZWsnKS5hZGQoNSwgJ2RheXMnKVxyXG4gIH07XHJcbn1cclxuKi9cclxuIiwiZXhwb3J0ICogZnJvbSAnLi9vYnNlcnZhYmxlJztcclxuZXhwb3J0ICogZnJvbSAnLi92YWx1ZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29sbGVjdGlvbic7XHJcbmV4cG9ydCAqIGZyb20gJy4vZW1pdHRlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vZmliZXItY29udGV4dCc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007IiwiZXhwb3J0IGZ1bmN0aW9uIGluaXRNYXBNZXRob2QoY3Rvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXBwZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgY3RvcihmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobWFwcGVyKHZhbHVlKSwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pOyB9KTtcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgU2Nob29sTW9tZW50LCBnZXRTY2hvb2xNb21lbnQsIGFkZFllYXIgfSBmcm9tICcuL3NjaG9vbC1tb21lbnQnO1xyXG5pbXBvcnQgeyBBY2FkZW1pY1llYXIsIFRlcm0gfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcbmltcG9ydCB7SW5qZWN0ZWRJbnRsfSBmcm9tICdyZWFjdC1pbnRsJztcclxuXHJcbnR5cGUgTW9tZW50ID0gbW9tZW50Lk1vbWVudDtcclxuXHJcbmZ1bmN0aW9uIGlzU2Nob29sTW9tZW50KG9iajogRGF0ZSB8IFNjaG9vbE1vbWVudCk6IG9iaiBpcyBTY2hvb2xNb21lbnQge1xyXG4gIHJldHVybiAnYWNhZGVtaWNZZWFyJyBpbiBvYmo7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTY2hvb2xUZXJtIHtcclxuICBhY2FkZW1pY1llYXI6IEFjYWRlbWljWWVhcjtcclxuICB0ZXJtOiBUZXJtO1xyXG5cclxuICBjb25zdHJ1Y3RvcihkYXRlT3JTY2hvb2xNb21lbnQ6IERhdGUgfCBTY2hvb2xNb21lbnQpIHtcclxuICAgIGNvbnN0IHNjaG9vbE1vbWVudCA9IGlzU2Nob29sTW9tZW50KGRhdGVPclNjaG9vbE1vbWVudCkgP1xyXG4gICAgICBkYXRlT3JTY2hvb2xNb21lbnQgOiBnZXRTY2hvb2xNb21lbnQobW9tZW50KGRhdGVPclNjaG9vbE1vbWVudCkpO1xyXG4gICAgdGhpcy5hY2FkZW1pY1llYXIgPSBzY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyO1xyXG4gICAgdGhpcy50ZXJtID0gc2Nob29sTW9tZW50LnRlcm07XHJcbiAgfVxyXG5cclxuICBnZXQgeWVhcigpIHtcclxuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmFjYWRlbWljWWVhclxyXG4gICAgICAgIC5zcGxpdCgnLycpW3RoaXMudGVybSA9PT0gJ0FUJyA/IDAgOiAxXSk7XHJcbiAgfVxyXG5cclxuICBuZXh0VGVybSgpIHtcclxuICAgIHJldHVybiBuZXcgU2Nob29sVGVybSh0aGlzLnRlcm0gPT09ICdBVCcgP1xyXG4gICAgICB7XHJcbiAgICAgICAgdGVybTogJ1NUJyxcclxuICAgICAgICBhY2FkZW1pY1llYXI6IHRoaXMuYWNhZGVtaWNZZWFyXHJcbiAgICAgIH0gOlxyXG4gICAgICB7XHJcbiAgICAgICAgdGVybTogJ0FUJyxcclxuICAgICAgICBhY2FkZW1pY1llYXI6IGFkZFllYXIodGhpcy5hY2FkZW1pY1llYXIsIDEpXHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJldlRlcm0oKSB7XHJcbiAgICByZXR1cm4gbmV3IFNjaG9vbFRlcm0odGhpcy50ZXJtID09PSAnQVQnID9cclxuICAgICAge1xyXG4gICAgICAgIHRlcm06ICdTVCcsXHJcbiAgICAgICAgYWNhZGVtaWNZZWFyOiBhZGRZZWFyKHRoaXMuYWNhZGVtaWNZZWFyLCAtMSlcclxuICAgICAgfSA6XHJcbiAgICAgIHtcclxuICAgICAgICB0ZXJtOiAnQVQnLFxyXG4gICAgICAgIGFjYWRlbWljWWVhcjogdGhpcy5hY2FkZW1pY1llYXJcclxuICAgICAgfSk7XHJcbiAgICBcclxuICB9XHJcblxyXG4gIHRvTG9jYWxlU3RyaW5nKGludGw6IEluamVjdGVkSW50bCwgc2hvcnRZZWFyPzogYm9vbGVhbikge1xyXG4gICAgbGV0IHllYXIgPSB0aGlzLnRlcm0gPT09ICdBVCcgP1xyXG4gICAgICB0aGlzLmFjYWRlbWljWWVhci5zcGxpdCgnLycpWzBdOlxyXG4gICAgICB0aGlzLmFjYWRlbWljWWVhci5zcGxpdCgnLycpWzFdO1xyXG5cclxuICAgIGlmIChzaG9ydFllYXIpXHJcbiAgICAgIHllYXIgPSB5ZWFyLnN1YnN0cigyKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy50ZXJtID09PSAnQVQnID8gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDondGVybXBsYW5uZXIuc2Vjb25kVGVybScsIGRlZmF1bHRNZXNzYWdlOidIVCB7eWVhcn0nfSwge3llYXI6IHllYXJ9KSA6IFxyXG4gICAgaW50bC5mb3JtYXRNZXNzYWdlKHtpZDondGVybXBsYW5uZXIuZmlyc3RUZXJtJywgZGVmYXVsdE1lc3NhZ2U6J1ZUIHt5ZWFyfSd9LCB7eWVhcjogeWVhcn0pO1xyXG4gIH1cclxufVxyXG4iLCJjb25zdCBERUZBVUxUX0NBQ0hFX0VYUElSQVRJT04gPSAzMCAqIDYwICogMTAwMDsgLy8gMzAgbWludXRlcy5cclxuXHJcbnR5cGUgUHJvbWlzZVJldHVybmluZ01ldGhvZE5hbWVzPEFQST4gPSB7XHJcbiAgW01FVEhPRCBpbiBrZXlvZiBBUEldOiBBUElbTUVUSE9EXSBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxhbnk+ID8gTUVUSE9EIDogbmV2ZXJcclxufVxyXG5cclxudHlwZSBDb252ZXJ0TWV0aG9kVG9TdXNwZW5zZTxGPiA9IEYgZXh0ZW5kcyAoLi4uYXJnczogaW5mZXIgQSkgPT4gUHJvbWlzZTxpbmZlciBSPiA/XHJcbiAgKC4uLmFyZ3M6IEEpID0+IFIgOlxyXG4gIEY7XHJcblxyXG5leHBvcnQgdHlwZSBTdXNwZW5zZUJhc2VkQVBJPEFQST4gPSB7XHJcbiAgW01FVEhPRCBpbiBrZXlvZiBQcm9taXNlUmV0dXJuaW5nTWV0aG9kTmFtZXM8QVBJPl06IENvbnZlcnRNZXRob2RUb1N1c3BlbnNlPEFQSVtNRVRIT0RdPlxyXG59XHJcblxyXG50eXBlIE9wdGlvbnMgPSB7XHJcbiAgaXNBcGlNZXRob2Q/OiAocHJvcDogc3RyaW5nKT0+Ym9vbGVhbixcclxuICBjYWNoZUV4cGlyYXRpb24/OiBudW1iZXJcclxufVxyXG5cclxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IE9wdGlvbnMgPSB7XHJcbiAgaXNBcGlNZXRob2Q6IGYgPT4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbicsXHJcbiAgY2FjaGVFeHBpcmF0aW9uOiBERUZBVUxUX0NBQ0hFX0VYUElSQVRJT05cclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlU3VzcGVuc2VBcGk8QVBJPihhcGk6IEFQSSwgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zKTogU3VzcGVuc2VCYXNlZEFQSTxBUEk+XHJcbntcclxuICBvcHRpb25zID0gey4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zfTtcclxuICBjb25zdCB7aXNBcGlNZXRob2QsIGNhY2hlRXhwaXJhdGlvbn0gPSBvcHRpb25zO1xyXG5cclxuICBjb25zdCBydjogU3VzcGVuc2VCYXNlZEFQSTxBUEk+ID0gT2JqZWN0LmNyZWF0ZShhcGkgYXMgYW55KSBhcyBTdXNwZW5zZUJhc2VkQVBJPEFQST47XHJcbiAgY29uc3QgY2FjaGU6IHtba2V5OiBzdHJpbmddOiB7dGltZW91dDogbnVtYmVyLCB2YWx1ZT86IGFueSwgZXJyb3I/OiBhbnksIHByb21pc2U/OiBQcm9taXNlPGFueT59fSA9IHt9O1xyXG5cclxuICAvLyBXYWxrIHRoZSBpbnN0YW5jZSArIHByb3RvdHlwZSBjaGFpbiB0byBnZW5lcmF0ZSBzdXNwZW5zZSB2ZXJzaW9uIG9mIGVhY2ggcHJvbWlzZSByZXR1cm5pbmcgbWV0aG9kXHJcbiAgZm9yIChsZXQgcHJvdG8gPSBhcGk7IHByb3RvICYmIHByb3RvICE9PSBPYmplY3QucHJvdG90eXBlOyBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykpIHtcclxuICAgIHN1c3BlbmRpZnkocHJvdG8pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3VzcGVuZGlmeShwcm90bykge1xyXG4gICAgT2JqZWN0LmtleXMocHJvdG8pLmZvckVhY2gocHJvcCA9PiB7XHJcbiAgICAgIGlmICghcnYuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgaXNBcGlNZXRob2QocHJvcCkpIHtcclxuICAgICAgICBydltwcm9wXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XHJcbiAgICAgICAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbcHJvcCwgLi4uYXJnc10pO1xyXG4gICAgICAgICAgY29uc3QgY2FjaGVkRW50cnkgPSBjYWNoZVtrZXldO1xyXG4gICAgICAgICAgaWYgKGNhY2hlZEVudHJ5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKGNhY2hlZEVudHJ5LnByb21pc2UpIHRocm93IGNhY2hlZEVudHJ5LnByb21pc2U7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZWRFbnRyeS5lcnJvcikgdGhyb3cgY2FjaGVkRW50cnkuZXJyb3I7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZWRFbnRyeS50aW1lb3V0ID4gRGF0ZS5ub3coKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZWRFbnRyeS52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHByb3RvW3Byb3BdLmFwcGx5KGFwaSwgYXJncykudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgdmFsdWU6IHJlc3VsdH07XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgICAgICAgICBjYWNoZVtrZXldID0ge3RpbWVvdXQ6IERhdGUubm93KCkgKyBjYWNoZUV4cGlyYXRpb24sIGVycm9yfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgcHJvbWlzZX07XHJcbiAgICAgICAgICAgIHRocm93IHByb21pc2U7XHJcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IudGhlbikgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgZXJyb3J9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gYXMgYW55O1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBydjtcclxufVxyXG4iLCJpbXBvcnQgeyBFRFNDb3Vyc2UsIEVEU0Fzc2Vzc21lbnQsIEVEU1N0dWR5UGxhbiwgRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHksIEVEU1N0dWRlbnQsIEVEU1R1aXRpb25Hcm91cCwgRURTVHVpdGlvblN0dWRlbnQsIEVEU1RlYWNoZXIsIE1vY2tFRFNBY2FkZW1pY1llYXIsIE1vY2tFRFNEYXRlUmFuZ2UgfSBmcm9tICcuLi9jb250cmFjdHMvZWRzJztcclxuaW1wb3J0IHsgUmVzdENsaWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgSXNvbW9ycGhpY0VudiwgQmVhcmVyUHJvdmlkZXIsIEh0dHBFcnJvciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgU2Nob29sTW9tZW50LCBnZXRUZXJtU3RhckVuZERhdGUgfSBmcm9tICcuLi91dGlscy9zY2hvb2wtbW9tZW50JztcclxuaW1wb3J0IHsgU2Nob29sVGVybSB9IGZyb20gJy4uL3V0aWxzL3NjaG9vbC10ZXJtJztcclxuaW1wb3J0IHsgZGF0ZVRpbWVSZXZpdmVyLCBMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgbW9ja0pzb25GaWxlIGZyb20gJy4vbW9jay9tb2NrLWVkcy1kYXRhLmpzb24nO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IFN1c3BlbnNlQmFzZWRBUEksIG1ha2VTdXNwZW5zZUFwaSB9IGZyb20gJy4uL3V0aWxzL21ha2Utc3VzcGVuc2UtYXBpJztcclxuXHJcbmV4cG9ydCBjbGFzcyBFZHNDbGllbnQge1xyXG4gIGh0dHA6IFJlc3RDbGllbnQ7XHJcbiAgdXNlckVtYWlsR2V0dGVyOiAoKT0+c3RyaW5nO1xyXG4gIHN1c3BlbnNlOiBTdXNwZW5zZUJhc2VkQVBJPEVkc0NsaWVudD47XHJcblxyXG4gIGNvbnN0cnVjdG9yIChcclxuICAgIGlzb21vcnBoaWM6IElzb21vcnBoaWNFbnYsXHJcbiAgICBiYXNlVXJsOiBzdHJpbmcsXHJcbiAgICBiZWFyZXJQcm92aWRlcjogQmVhcmVyUHJvdmlkZXIsXHJcbiAgICB1c2VyRW1haWxHZXR0ZXI6ICgpPT5zdHJpbmdcclxuICApIHtcclxuICAgIHRoaXMuaHR0cCA9IG5ldyBSZXN0Q2xpZW50IChpc29tb3JwaGljLCBiYXNlVXJsLCB7YmVhcmVyUHJvdmlkZXJ9KTtcclxuICAgIHRoaXMudXNlckVtYWlsR2V0dGVyID0gdXNlckVtYWlsR2V0dGVyO1xyXG4gICAgY29uc3QgaXNBcGlNZXRob2QgPSBtID0+XHJcbiAgICAgIHR5cGVvZiB0aGlzW21dID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgIG0gIT09ICdjb25zdHJ1Y3RvcicgJiYgLy8gU2luY2UgbWFrZVN1c3BlbnNlQXBpKCkgd2Fsa3MgcHJvdG90eXBlIGNoYWluXHJcbiAgICAgIG0gIT09ICdwcml2YXRpemluZ0NhY2hlQnVzdCcgJiZcclxuICAgICAgbSAhPT0gJ3VzZXJFbWFpbEdldHRlcicgLy8gTGlzdCBub24tQVBJIG1ldGhvZHMgaGVyZS4uLlxyXG4gICAgICA7XHJcblxyXG4gICAgT2JqZWN0LmtleXMoRWRzQ2xpZW50LnByb3RvdHlwZSkuZm9yRWFjaChtZXRob2QgPT4ge1xyXG4gICAgICBpZiAoaXNBcGlNZXRob2QobWV0aG9kKSkge1xyXG4gICAgICAgIHRoaXNbbWV0aG9kXSA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzW21ldGhvZF0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3VzcGVuc2UgPSBtYWtlU3VzcGVuc2VBcGkodGhpcywge2lzQXBpTWV0aG9kfSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByaXZhdGl6aW5nQ2FjaGVCdXN0KCkge1xyXG4gICAgcmV0dXJuIHt1c2VyOiB0aGlzLnVzZXJFbWFpbEdldHRlcigpfTtcclxuICB9XHJcblxyXG4vKipcclxuICAgKiBSZXRyaWV2ZSBhY3RpdmUgY291cnNlcyBmb3IgY3VycmVudCBsb2dnZWQgaW4gc3R1ZGVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb3Vyc2VDb2RlIFNob3J0LW5hbWUgb2YgdGhlIGNvdXJzZS4gT3B0aW9uYWwuXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0QWN0aXZlQ291cnNlcyhxOiB7Y291cnNlQ29kZT86IHN0cmluZywgcGVyaW9kTmFtZTogc3RyaW5nfSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xyXG4gICAgICBpZiAocSkge1xyXG4gICAgICAgIGlmIChxLmNvdXJzZUNvZGUpIHF1ZXJ5LkNvdXJzZUNvZGUgPSBxLmNvdXJzZUNvZGU7XHJcbiAgICAgICAgaWYgKHEucGVyaW9kTmFtZSkgcXVlcnkuUGVyaW9kTmFtZSA9IHEucGVyaW9kTmFtZTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGFjdGl2ZWNvdXJzZXNcIiwgcXVlcnkpO1xyXG4gICAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgICByZXR1cm4ganNvbi5jb3Vyc2VzIGFzIEVEU0NvdXJzZVtdO1xyXG4gICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZyb20gRURTOiBcIiArIGV4KTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKExgS3VuZGUgdHl2w6RyciBpbnRlIGxhZGRhIHRlcm1pbnNtw6VsIGVsbGVyIGF2a2xhcmFkZSBzdGVnIGZyw6VuIEVEUy4gRsO2cnPDtmsgaWdlbiBzZW5hcmUuLi5gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlIGxhdGVzdCBhc3Nlc3NtZW50cyBmb3IgY3VycmVudCBsb2dnZWQgaW4gdXNlci5cclxuICAgKiBcclxuICAgKiBAcGFyYW0gbGltaXQgT3B0aW9uYWwgbGltaXRcclxuICAgKi9cclxuICBhc3luYyBnZXRMYXRlc3RBc3Nlc3NtZW50cyhsaW1pdD86IG51bWJlcikge1xyXG4gICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xyXG4gICAgaWYgKCFpc05hTihsaW1pdCkpIHF1ZXJ5LkNvdW50ID0gbGltaXQ7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGFzc2Vzc21lbnRzXCIsIHF1ZXJ5KTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uYXNzZXNzbWVudHMgYXMgRURTQXNzZXNzbWVudFtdOyAgICBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlIHN0dWR5cGxhbnMgZm9yIGN1cnJlbnQgbG9nZ2VkLWluIHVzZXJcclxuICAgKi9cclxuICBhc3luYyBnZXRTdHVkZW50R29hbHMoKSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGdvYWxzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XHJcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgIHJldHVybiBqc29uLnN0dWRlbnRHb2FscyBhcyBFRFNTdHVkeVBsYW5bXTsgICAgXHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRTdHVkZW50RnV0dXJlQWJpbGl0aWVzKCkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRGdXR1cmVBYmlsaXRpZXNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudEZ1dHVyZUFiaWxpdGllcyBhcyBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eVtdO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMoKSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwidGVhY2hlcnR1dG9yc3R1ZGVudHNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudHMgYXMgRURTU3R1ZGVudFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0U2Nob29sVHVpdGlvbkdyb3VwcygpXHJcbiAgICogXHJcbiAgICogUmV0dXJuIHR1aXRpb25ncm91cHMgZm9yIHNjaG9vbFxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBzY2hvb2xOYW1lIC0gbmFtZSBvZiBzY2hvb2xcclxuICAgKiBAcGFyYW0gY291cnNlQ29kZSAtIFNrb2x2ZXJrZXRzIGNvZGUgZm9yIGNvdXJzZVxyXG4gICAqL1xyXG4gIGFzeW5jIGdldFNjaG9vbFR1aXRpb25Hcm91cHMocToge3NjaG9vbE5hbWU6IHN0cmluZywgY291cnNlQ29kZTogc3RyaW5nfSkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcIlNjaG9vbFR1aXRpb25Hcm91cHNcIiwgey4uLnRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSwgLi4ucX0pO1xyXG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XHJcbiAgICByZXR1cm4ganNvbi5zY2hvb2xUdWl0aW9uR3JvdXBzIGFzIEVEU1R1aXRpb25Hcm91cFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogZ2V0VHVpdGlvbkdyb3VwU3R1ZGVudHMoKVxyXG4gICAqIFxyXG4gICAqIFJldHVybiBuYW1lIGFuZCBtYWlsYWRyZXNzZXMgZm9yIHR1dGl0aW9uZ3JvdXBzIGluIHNjaG9vbHNcclxuICAgKiBcclxuICAgKiBAcGFyYW0gc2Nob29sTmFtZSAtIG5hbWUgb2Ygc2Nob29sXHJcbiAgICogQHBhcmFtIHR1aXRpb25Hcm91cE5hbWUgLSB0dWl0aW9uIGdydW9wIG5hbWUgaW4gRURTXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0VHVpdGlvbkdyb3VwU3R1ZGVudHMocToge3NjaG9vbE5hbWU6IHN0cmluZywgdHVpdGlvbkdyb3VwTmFtZTogc3RyaW5nfSkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcIlR1aXRpb25Hcm91cFN0dWRlbnRzXCIsIHsuLi50aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCksIC4uLnF9KTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24udHVpdGlvbkdyb3VwU3R1ZGVudHMgYXMgRURTVHVpdGlvblN0dWRlbnRbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldFNjaG9vbFRlYWNoZXJzKClcclxuICAgKiBcclxuICAgKiBSZXR1cm4gbmFtZSBhbmQgbWFpbGFkcmVzc2VzIGZvciB0dXRpdGlvbmdyb3VwcyBpbiBzY2hvb2xzXHJcbiAgICogXHJcbiAgICogQHBhcmFtIHNjaG9vbE5hbWUgLSBuYW1lIG9mIHNjaG9vbFxyXG4gICAqL1xyXG4gIGFzeW5jIGdldFNjaG9vbFRlYWNoZXJzKHE6IHtzY2hvb2xOYW1lOiBzdHJpbmd9KSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwiU2Nob29sVGVhY2hlcnNcIiwgey4uLnRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSwgLi4ucX0pO1xyXG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XHJcbiAgICByZXR1cm4ganNvbi5zY2hvb2xUZWFjaGVycyBhcyBFRFNUZWFjaGVyW107XHJcbiAgfVxyXG4gIC8vIHdlIGFzc3VtZSB0aGF0IHRoZSBFRFMgd2lsbCByZXR1cm4gdGhlIGN1cnJlbnQgYWNhZGVtaWMgeWVhciBkYXRlcyBkZXRlcm1pbmVkIGJ5IHRoZSBjdXJyZW50IGRhdGVcclxuICBhc3luYyBnZXRBY2FkZW1pY1llYXJUZXJtcyhzY2hvb2xMb2NhbGU6IHN0cmluZywgZGF0ZTogRGF0ZSkge1xyXG4gICAgLy8gbW9jayBkYXRhXHJcbiAgICBzd2l0Y2ggKHNjaG9vbExvY2FsZSkge1xyXG4gICAgICBjYXNlICdlbl9zaW4nOlxyXG4gICAgICByZXR1cm4gbW9ja0pzb25GaWxlLlNvdXRoSW5kaWEuZmlsdGVyKGYgPT4gbW9tZW50KGRhdGUpLmlzU2FtZU9yQWZ0ZXIoZi5maXJzdFRlcm0uc3RhcnREYXRlKSAmJiBtb21lbnQoZGF0ZSkuaXNTYW1lT3JCZWZvcmUoZi5zZWNvbmRUZXJtLmVuZERhdGUpKVswXSBhcyBNb2NrRURTQWNhZGVtaWNZZWFyO1xyXG4gICAgICBjYXNlICdlbl9uaW4nOlxyXG4gICAgICByZXR1cm4gbW9ja0pzb25GaWxlLk5vcnRoSW5kaWEuZmlsdGVyKGYgPT4gbW9tZW50KGRhdGUpLmlzU2FtZU9yQWZ0ZXIoZi5maXJzdFRlcm0uc3RhcnREYXRlKSAmJiBtb21lbnQoZGF0ZSkuaXNTYW1lT3JCZWZvcmUoZi5zZWNvbmRUZXJtLmVuZERhdGUpKVswXSBhcyBNb2NrRURTQWNhZGVtaWNZZWFyO1xyXG4gICAgICBjYXNlICdzdic6XHJcbiAgICAgIHtcclxuICAgICAgdmFyIGhvbGlkYXlzID0gW10gYXMgTW9ja0VEU0RhdGVSYW5nZVtdO1xyXG4gICAgICB2YXIgZmlyc3RUZXJtTW9tZW50ID0gZ2V0VGVybVN0YXJFbmREYXRlKGRhdGUsIHRydWUpO1xyXG4gICAgICB2YXIgc2Vjb25kVGVybU1vbWVudCA9IGdldFRlcm1TdGFyRW5kRGF0ZShkYXRlLCBmYWxzZSk7XHJcblxyXG4gICAgICB2YXIgc3RhcnRGaXJzdFRlcm1EYXRlID0gZmlyc3RUZXJtTW9tZW50WzBdO1xyXG4gICAgICB2YXIgc3RhcnRTZWNvbmRUZXJtRGF0ZSA9IHNlY29uZFRlcm1Nb21lbnRbMF07XHJcbiAgICAgIHZhciBlbmRGaXJzdFRlcm1EYXRlID0gZmlyc3RUZXJtTW9tZW50WzFdO1xyXG4gICAgICB2YXIgZW5kU2Vjb25kVGVybURhdGUgPSBzZWNvbmRUZXJtTW9tZW50WzFdO1xyXG5cclxuICAgICAgY29uc3QgZmlyc3RUZXJtID0ge3N0YXJ0RGF0ZTogbmV3IERhdGUoc3RhcnRGaXJzdFRlcm1EYXRlLnllYXIoKSwgc3RhcnRGaXJzdFRlcm1EYXRlLm1vbnRoKCksIHN0YXJ0Rmlyc3RUZXJtRGF0ZS5kYXRlKCkpLnRvRGF0ZVN0cmluZygpLCBlbmREYXRlOiBuZXcgRGF0ZShzdGFydEZpcnN0VGVybURhdGUueWVhcigpLCBlbmRGaXJzdFRlcm1EYXRlLm1vbnRoKCksIGVuZEZpcnN0VGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKX07XHJcbiAgICAgIGNvbnN0IHNlY29uZFRlcm0gPSB7c3RhcnREYXRlOiBuZXcgRGF0ZShzdGFydFNlY29uZFRlcm1EYXRlLnllYXIoKSwgc3RhcnRTZWNvbmRUZXJtRGF0ZS5tb250aCgpLCBzdGFydFNlY29uZFRlcm1EYXRlLmRhdGUoKSkudG9EYXRlU3RyaW5nKCksIGVuZERhdGU6IG5ldyBEYXRlKHN0YXJ0U2Vjb25kVGVybURhdGUueWVhcigpLCBlbmRTZWNvbmRUZXJtRGF0ZS5tb250aCgpLCBlbmRTZWNvbmRUZXJtRGF0ZS5kYXRlKCkpLnRvRGF0ZVN0cmluZygpfTtcclxuICAgICAgcmV0dXJuIHtmaXJzdFRlcm0sIHNlY29uZFRlcm0sIGhvbGlkYXlzfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgRURTUGVyaW9kIHtcclxuICBwZXJpb2Q6IHN0cmluZztcclxuICB0ZXJtOiAnQVQnIHwgJ1NUJztcclxuICB5ZWFyOiBudW1iZXI7XHJcbiAgY29uc3RydWN0b3IgKHBlcmlvZFN0cmluZ09yU2Nob29sVGVybTogc3RyaW5nIHwgU2Nob29sTW9tZW50KSB7XHJcbiAgICBpZiAodHlwZW9mIHBlcmlvZFN0cmluZ09yU2Nob29sVGVybSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdGhpcy5wZXJpb2QgPSBwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm07XHJcbiAgICAgIHRoaXMudGVybSA9IHRoaXMucGVyaW9kLnN0YXJ0c1dpdGgoJ0hUJykgPyAnQVQnIDogJ1NUJztcclxuICAgICAgdGhpcy55ZWFyID0gcGFyc2VJbnQodGhpcy5wZXJpb2Quc3Vic3RyKDIpKTtcclxuICAgICAgaWYgKGlzTmFOKHRoaXMueWVhcikpIHRocm93IG5ldyBFcnJvciAoYEludmFsaWQgcGVyaW9kOiAke3RoaXMucGVyaW9kfWApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3Qgc2Nob29sVGVybSA9IG5ldyBTY2hvb2xUZXJtKHBlcmlvZFN0cmluZ09yU2Nob29sVGVybSk7XHJcbiAgICAgIHRoaXMucGVyaW9kID0gKHNjaG9vbFRlcm0udGVybSA9PT0gJ0FUJyA/IFwiSFRcIiA6IFwiVlRcIikgKyBzY2hvb2xUZXJtLnllYXI7XHJcbiAgICAgIHRoaXMudGVybSA9IHNjaG9vbFRlcm0udGVybTtcclxuICAgICAgdGhpcy55ZWFyID0gc2Nob29sVGVybS55ZWFyO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0IHNjaG9vbFRlcm0gKCkgOiBTY2hvb2xUZXJtIHtcclxuICAgIHJldHVybiBuZXcgU2Nob29sVGVybSh7XHJcbiAgICAgIGFjYWRlbWljWWVhcjogdGhpcy50ZXJtID09PSAnQVQnID9cclxuICAgICAgICBgJHt0aGlzLnllYXJ9LyR7dGhpcy55ZWFyICsgMX1gIDpcclxuICAgICAgICBgJHt0aGlzLnllYXItMX0vJHt0aGlzLnllYXJ9YCxcclxuICAgICAgdGVybTogdGhpcy50ZXJtXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucGVyaW9kO1xyXG4gIH1cclxuXHJcbiAgdmFsdWVPZigpIHtcclxuICAgIHJldHVybiB0aGlzLnllYXIgKyBcIjpcIiArICh0aGlzLnRlcm0gPT09ICdTVCcgPyBcIjFcIiA6IFwiMlwiKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUpzb25EYXRlX29sZCAoanNvbkRhdGVTdHI6IHN0cmluZykgOiBEYXRlIHtcclxuICBjb25zdCBkYXRlID0gZGF0ZVRpbWVSZXZpdmVyKFwiXCIsIGpzb25EYXRlU3RyKTtcclxuICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlNPTiBkYXRlIHN0cmluZzogXCIgKyBqc29uRGF0ZVN0cik7XHJcbiAgcmV0dXJuIGRhdGU7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGF2b2lkU2ltdWx0YW5vdXNDYWxsczxULEE+KG1ldGhvZDogKC4uLmFyZ3M6QVtdKT0+UHJvbWlzZTxUPikgOiAoLi4uYXJnczpBW10pPT5Qcm9taXNlPFQ+IHtcclxuICBsZXQgb25nb2luZ1Byb21pc2VzOiB7W2FyZ3NKc29uOiBzdHJpbmddOiBQcm9taXNlPFQ+fSA9IHt9O1xyXG4gIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgIGNvbnN0IGFyZ3NKc29uID0gSlNPTi5zdHJpbmdpZnkoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcclxuICAgIGlmICghb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXSkge1xyXG4gICAgICBvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihyZXN1bHQ9PntcclxuICAgICAgICBkZWxldGUgb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDb2xsZWN0aW9uLCBFbWl0dGVyLCBWYWx1ZSB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IFRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9kYic7XHJcbmltcG9ydCB7IGZsYXR0ZW4sIGRpc3RpbmN0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBXaXRoR3JhcGhzIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuXHJcbi8qKiBDb3Vyc2UgKi9cclxuaW50ZXJmYWNlIE9yZGVyRGVmaW5pbmdEb2Mge1xyXG4gIGtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyPzogc3RyaW5nW10gICAvLyBDb3Vyc2VcclxuICBjZW50cmFsQ29udGVudE9yZGVyPzogc3RyaW5nW10gICAgICAgICAgLy8gQ291cnNlXHJcbiAgYWJpbGl0aWVzT3JkZXI/OiBzdHJpbmdbXSAgICAgICAgICAgICAgIC8vIENvdXJzZSArIFN1YmplY3RcclxufVxyXG5cclxuLyoqIENvdXJzZSwgQ291cnNlSW5zdGFuY2UsIFRhc2ssIExlYXJuaW5nR29hbHNDb250ZW50IG9yIENvdXJzZUJsb2NrICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVxdWlyZW1lbnRzQ29udGFpbmluZ0RvYyB7XHJcbiAgdGFnczogc3RyaW5nW107ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvdXJzZSArIENvdXJzZUluc3RhbmNlLCBUYXNrXHJcbiAgY2VudHJhbENvbnRlbnQ/OiB7aWQ6IHN0cmluZ31bXTsgICAgICAgIC8vIENvdXJzZSArIExlYXJuaW5nR29hbHNDb250ZW50ICsgQ291cnNlQmxvY2sgKyBUYXNrXHJcbiAga25vd2xlZGdlUmVxdWlyZW1lbnRzPzoge2lkOiBzdHJpbmd9W107IC8vIENvdXJzZSArIExlYXJuaW5nR29hbHNDb250ZW50ICsgQ291cnNlQmxvY2sgKyBUYXNrXHJcbiAgYWJpbGl0aWVzPzoge2lkOiBzdHJpbmd9W107IC8vIENvdXJzZSwgTGVhcm5pbmdHb2Fsc0NvbnRlbnQsIENvdXJzZUJsb2NrLCBUYXNrXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRPcmRlcmVkRG9jczxUIGV4dGVuZHMge2lkOiBzdHJpbmd9Pihkb2NzPzogVFtdLCBvcmRlcj86IHN0cmluZ1tdLCB7YXBwZW5kTGVmdG92ZXJzfSA9IHthcHBlbmRMZWZ0b3ZlcnM6ZmFsc2V9KSB7XHJcbiAgLy8gTWFyayBkb2MgSURzIHRoYXQgd2hlcmUgcHJlc2VudCBpbiBnaXZlbiAnb3JkZXInIGFycmF5LlxyXG4gIC8vIFdpbGwgYmUgdXNlZCB0byBmaW5kIGxlZnQtb3ZlcnMgdGhhdCB3ZXJlIG5vdCBwcmVzZW50IGluIHRoZSAnb3JkZXInIGFycmF5LlxyXG4gIGNvbnN0IG1hcmtlZERvY3M6IHtbaWQ6IHN0cmluZ106IHRydWV9ID0ge307XHJcblxyXG4gIGlmICghZG9jcyB8fCAhb3JkZXIpIHtcclxuICAgIC8vIFNwZWNpYWwgY2FzZTogbm8gZG9jcyBvciBubyBvcmRlci4gRG9uJ3QgZmFpbC4gSnVzdCByZXR1cm4gZG9jcyBhcyBpcy5cclxuICAgIHJldHVybiBkb2NzO1xyXG4gIH1cclxuXHJcbiAgLy8gTWFwIGdpdmVuICdvcmRlcicgYXJyYXkgdG8gY29ycmVzcG9uZGluZyBkb2NzLiBBbHNvIG1hcmsgaW4gbWFya2VkRG9jcy5cclxuICBjb25zdCByZXN1bHQgPSAoZG9jcyAmJiBvcmRlciA/XHJcbiAgICBvcmRlci5tYXAoaWQgPT4ge1xyXG4gICAgICBtYXJrZWREb2NzW2lkXSA9IHRydWU7XHJcbiAgICAgIHJldHVybiBkb2NzLmZpbmQoZG9jID0+IGRvYy5pZCA9PT0gaWQpO1xyXG4gICAgfSkuZmlsdGVyKGRvYyA9PiAhIWRvYykgOlxyXG4gICAgZG9jcyk7XHJcblxyXG4gIGlmIChhcHBlbmRMZWZ0b3ZlcnMpIHsgICAgICBcclxuICAgIC8vIElmIGFueSBsZWZ0b3ZlcnMgYXJlIHRoZXJlLCBjb25jYXQgdGhlbSBhdCB0aGUgZW5kOlxyXG4gICAgY29uc3QgbGVmdE92ZXJzID0gZG9jcy5maWx0ZXIoZG9jID0+ICFtYXJrZWREb2NzW2RvYy5pZF0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdC5jb25jYXQobGVmdE92ZXJzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUmVxdWlyZW1lbnRPcmRlcjxUIGV4dGVuZHMgUmVxdWlyZW1lbnRzQ29udGFpbmluZ0RvYz4ob2JqOiBULCBvcmRlckRlZmluZXI/OiBPcmRlckRlZmluaW5nRG9jKTogVmFsdWU8VD4ge1xyXG4gIGxldCBvcmRlckRlZmluaW5nRG9jT2JzZXJ2YWJsZTogVmFsdWU8T3JkZXJEZWZpbmluZ0RvY1tdPjtcclxuICBpZiAob3JkZXJEZWZpbmVyKSB7XHJcbiAgICAvLyBVc2VyIHByb3ZpZGVkIHRoZSBvcmRlckRlZmluaW5nIGRvYyAodXNlIGNhc2UgaXMgd2hlbiBvYmogaXMgYSBDb3Vyc2Ugb3IgU3ViamVjdCwgd2hpY2ggY29udGFpbnMgaXRzIG9yZGVyIGJ5IGl0c2VsZi4gVXNlciB0aGVuIHByb3ZpZGVzIHRoZSBDb3Vyc2Ugb3IgU3ViamVjdCBpbiBib3RoIGFyZ3MpXHJcbiAgICBvcmRlckRlZmluaW5nRG9jT2JzZXJ2YWJsZSA9IG5ldyBFbWl0dGVyKFtvcmRlckRlZmluZXJdKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgY291cnNlQ29kZXMgPSBvYmoudGFncy5maWx0ZXIodGFnID0+IHRhZy5zdGFydHNXaXRoKFwiY291cnNlOlwiKSk7XHJcbiAgICBpZiAoY291cnNlQ29kZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHJldHVybiBuZXcgRW1pdHRlcihvYmopOyAvLyBObyBjb3Vyc2UgdGFncy4gTm90IHBvc3NpYmxlIHRvIHJlc29sdmUgb3JkZXIuXHJcbiAgICB9XHJcbiAgICBvcmRlckRlZmluaW5nRG9jT2JzZXJ2YWJsZSA9IGRiLmNvdXJzZXMudGFncyguLi5jb3Vyc2VDb2RlcykudG9WYWx1ZSgpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9yZGVyRGVmaW5pbmdEb2NPYnNlcnZhYmxlLm1hcChvcmRlckhvbGRlcnMgPT4ge1xyXG4gICAgY29uc3QgYWJpbGl0aWVzT3JkZXIgPSBmbGF0dGVuKG9yZGVySG9sZGVycy5tYXAob3JkZXJIb2xkZXIgPT4gb3JkZXJIb2xkZXIuYWJpbGl0aWVzT3JkZXIgfHwgW10pKTtcclxuICAgIGNvbnN0IGNjT3JkZXIgPSBmbGF0dGVuKG9yZGVySG9sZGVycy5tYXAob3JkZXJIb2xkZXIgPT4gb3JkZXJIb2xkZXIuY2VudHJhbENvbnRlbnRPcmRlciB8fCBbXSkpO1xyXG4gICAgY29uc3Qga3JPcmRlciA9IGZsYXR0ZW4ob3JkZXJIb2xkZXJzLm1hcChvcmRlckhvbGRlciA9PiBvcmRlckhvbGRlci5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlciB8fCBbXSkpO1xyXG4gICAgY29uc3Qgb2JqQ2xvbmUgPSBPYmplY3QuYXNzaWduKHt9LCBvYmopO1xyXG4gICAgaWYgKG9iakNsb25lLmFiaWxpdGllcykgb2JqQ2xvbmUuYWJpbGl0aWVzID0gZ2V0T3JkZXJlZERvY3Mob2JqLmFiaWxpdGllcywgYWJpbGl0aWVzT3JkZXIpO1xyXG4gICAgaWYgKG9iakNsb25lLmNlbnRyYWxDb250ZW50KSBvYmpDbG9uZS5jZW50cmFsQ29udGVudCA9IGdldE9yZGVyZWREb2NzKG9iai5jZW50cmFsQ29udGVudCwgY2NPcmRlcik7XHJcbiAgICBpZiAob2JqQ2xvbmUua25vd2xlZGdlUmVxdWlyZW1lbnRzKSBvYmpDbG9uZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMgPSBnZXRPcmRlcmVkRG9jcyhvYmoua25vd2xlZGdlUmVxdWlyZW1lbnRzLCBrck9yZGVyKTtcclxuICAgIHJldHVybiBvYmpDbG9uZTtcclxuICB9KTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEZvcm1GaWVsZCB9IGZyb20gJy4vZm9ybS1maWVsZCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGxhYmVsOiBhbnk7XHJcbiAgaWQ6IHN0cmluZztcclxuICB2YWx1ZTogc3RyaW5nO1xyXG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xyXG4gIGF1dG9Gb2N1cz86IGJvb2xlYW47XHJcbiAgcm93cz86IG51bWJlcjtcclxuICBjaGlsZHJlbj87XHJcbiAgb25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVGV4dEFyZWFGb3JtRmllbGQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8Rm9ybUZpZWxkIGxhYmVsPXt0aGlzLnByb3BzLmxhYmVsfSBpZD17dGhpcy5wcm9wcy5pZH0+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICA8dGV4dGFyZWEgYXV0b0ZvY3VzPXt0aGlzLnByb3BzLmF1dG9Gb2N1c30gaWQ9e3RoaXMucHJvcHMuaWR9IGNvbHM9ezM1fSByb3dzPXt0aGlzLnByb3BzLnJvd3MgfHwgNX0gdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMucHJvcHMub25DaGFuZ2UoZXYudGFyZ2V0LnZhbHVlKX1cclxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlcn0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgeyEhdGhpcy5wcm9wcy5jaGlsZHJlbiAmJiA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XHJcbiAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L0Zvcm1GaWVsZD5cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG4iLCJ2YXIgc3RhY2sgPSBbXTtcclxudmFyIGN1cnJlbnRGaWJlciA9IG51bGw7XHJcbnZhciBwcm92aWRlcnMgPSBbZnVuY3Rpb24gKCkgeyByZXR1cm4gY3VycmVudEZpYmVyOyB9XTtcclxuZnVuY3Rpb24gcHVzaEZpYmVyKGZpYmVyKSB7XHJcbiAgICBzdGFjay5wdXNoKGN1cnJlbnRGaWJlcik7XHJcbiAgICBjdXJyZW50RmliZXIgPSBmaWJlcjtcclxufVxyXG5mdW5jdGlvbiBwb3BGaWJlcigpIHtcclxuICAgIGN1cnJlbnRGaWJlciA9IHN0YWNrLnBvcCgpO1xyXG59XHJcbmV4cG9ydCB2YXIgRmliZXJDb250ZXh0ID0ge1xyXG4gICAgZ2V0IGN1cnJlbnQoKSB7IHJldHVybiBjdXJyZW50RmliZXI7IH0sXHJcbiAgICAvKnJ1bjogZnVuY3Rpb24gcmVydW48Uj4oZmliZXI6IEZpYmVyLCBmbjogKCk9PlIpOiBSIHwgUHJvbWlzZTxSPiB7XHJcbiAgICAgIHB1c2hGaWJlcihmaWJlcik7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmbigpKTtcclxuICAgICAgfSBjYXRjaCAocCkge1xyXG4gICAgICAgIGlmIChwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgIHJldHVybiBwLnRoZW4oKCk9PnJlcnVuKGZpYmVyLCBmbikpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgIHBvcEZpYmVyKCk7XHJcbiAgICAgIH1cclxuICAgIH0sKi9cclxuICAgIGFkZFByb3ZpZGVyOiBmdW5jdGlvbiAoZ2V0Q3VycmVudEZpYmVyKSB7XHJcbiAgICAgICAgcHJvdmlkZXJzLnB1c2goZ2V0Q3VycmVudEZpYmVyKTtcclxuICAgICAgICBzZXRDdXJyZW50R2V0dGVyRnJvbVByb3ZpZGVycygpO1xyXG4gICAgfSxcclxuICAgIHJlbW92ZVByb3ZpZGVyOiBmdW5jdGlvbiAoZ2V0Q3VycmVudEZpYmVyKSB7XHJcbiAgICAgICAgcHJvdmlkZXJzID0gcHJvdmlkZXJzLmZpbHRlcihmdW5jdGlvbiAocCkgeyByZXR1cm4gcCAhPT0gZ2V0Q3VycmVudEZpYmVyOyB9KTtcclxuICAgICAgICBzZXRDdXJyZW50R2V0dGVyRnJvbVByb3ZpZGVycygpO1xyXG4gICAgfVxyXG59O1xyXG5mdW5jdGlvbiBzZXRDdXJyZW50R2V0dGVyRnJvbVByb3ZpZGVycygpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWJlckNvbnRleHQsIFwiY3VycmVudFwiLCB7XHJcbiAgICAgICAgZ2V0OiBwcm92aWRlcnMucmVkdWNlKGZ1bmN0aW9uIChwLCBjKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBwKCkgfHwgYygpOyB9OyB9KSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiVXNlIEZpYmVyQ29udGV4dC5wdXNoKCkgdG8gY2hhbmdlIGN1cnJlbnQgZmliZXJcIik7IH1cclxuICAgIH0pO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpYmVyLWNvbnRleHQuanMubWFwIiwiaW1wb3J0IHsgQ291cnNlSW5zdGFuY2UgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcclxuaW1wb3J0IHsgZGlzdGluY3QsIGZsYXR0ZW4gfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ViamVjdENvZGVzICh0YWdzOiBzdHJpbmdbXSkge1xyXG4gIHJldHVybiBkaXN0aW5jdCgodGFncyB8fMKgW10pXHJcbiAgICAuZmlsdGVyKHRhZyA9PiB0YWcuc3RhcnRzV2l0aChcInN1YjpcIikpXHJcbiAgICAubWFwKHRhZyA9PiB0YWcuc3Vic3RyKFwic3ViOlwiLmxlbmd0aCkpXHJcbiAgKTs7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2hvb2xZZWFycyh0YWdzOiBzdHJpbmdbXSkge1xyXG4gIHJldHVybiBkaXN0aW5jdCgodGFncyB8fCBbXSlcclxuICAgIC5maWx0ZXIodGFnID0+IHRhZy5zdGFydHNXaXRoKFwiY291cnNlOlwiKSlcclxuICAgIC5tYXAodGFnID0+IHRhZy5zdWJzdHIodGFnLmluZGV4T2YoXCJ8XCIpICsgMSkpIC8vIFNjaG9vbCB5ZWFyIGlzIGNvbmNhdGVuYXRlZCBhcyBwaXBlICsgc2Nob29seWVhci4gRXhhbXBsZTogXCJHUkdSRllTMDF8NC02XCJcclxuICApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUNvdXJzZUluc3RhbmNlVGFncyAodGFnczogc3RyaW5nW10sIHN1YmplY3RDb2Rlczogc3RyaW5nW10sIHNjaG9vbFllYXJzOiBzdHJpbmdbXSkge1xyXG4gIGNvbnN0IG90aGVyVGFncyA9ICh0YWdzIHx8IFtdKS5maWx0ZXIodGFnID0+ICF0YWcuc3RhcnRzV2l0aChcImNvdXJzZTpcIikgJiYgIXRhZy5zdGFydHNXaXRoKFwic3ViOlwiKSk7XHJcbiAgY29uc3Qgc3ViamVjdFRhZ3MgPSBzdWJqZWN0Q29kZXMubWFwKHN1YiA9PiBcInN1YjpcIiArIHN1Yik7XHJcbiAgY29uc3QgY291cnNlVGFncyA9IGZsYXR0ZW4oXHJcbiAgICAgICAgc3ViamVjdENvZGVzLm1hcChzdWIgPT5cclxuICAgICAgICAgIHNjaG9vbFllYXJzLm1hcChzY2hvb2xZZWFyID0+XHJcbiAgICAgICAgICAgIFwiY291cnNlOlwiICsgc3ViICsgXCJ8XCIgKyBzY2hvb2xZZWFyKSkpO1xyXG4gIHJldHVybiBvdGhlclRhZ3NcclxuICAgIC5jb25jYXQoc3ViamVjdFRhZ3MpXHJcbiAgICAuY29uY2F0KGNvdXJzZVRhZ3MpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVRhZ3NGcm9tU2Nob29sWWVhcnModGFnczogc3RyaW5nW10sIHNjaG9vbFllYXJzOiBzdHJpbmdbXSkge1xyXG4gIC8vc2Nob29sWWVhcnMgPSBzY2hvb2xZZWFycy5tYXAoYWZ0ZXJDb2xvbik7XHJcbiAgY29uc3Qgc3ViamVjdENvZGVzID0gZ2V0U3ViamVjdENvZGVzKHRhZ3MpO1xyXG4gIHJldHVybiBjb21wdXRlQ291cnNlSW5zdGFuY2VUYWdzKHRhZ3MsIHN1YmplY3RDb2Rlcywgc2Nob29sWWVhcnMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVRhZ3NGcm9tU3ViamVjdENvZGVzKHRhZ3M6IHN0cmluZ1tdLCBzdWJqZWN0Q29kZXM6IHN0cmluZ1tdKSB7XHJcbiAgLy9zdWJqZWN0Q29kZXMgPSBzdWJqZWN0Q29kZXMubWFwKGFmdGVyQ29sb24pO1xyXG4gIGNvbnN0IHNjaG9vbFllYXJzID0gZ2V0U2Nob29sWWVhcnModGFncyk7XHJcbiAgcmV0dXJuIGNvbXB1dGVDb3Vyc2VJbnN0YW5jZVRhZ3ModGFncywgc3ViamVjdENvZGVzLCBzY2hvb2xZZWFycyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFmdGVyQ29sb24gKHN0cjogc3RyaW5nKSB7XHJcbiAgY29uc3QgcENvbG9uID0gc3RyLmluZGV4T2YoJzonKTtcclxuICByZXR1cm4gcENvbG9uID49IDAgP1xyXG4gICAgc3RyLnN1YnN0cihwQ29sb24gKyAxKSA6XHJcbiAgICBzdHI7XHJcbn1cclxuIiwiaW1wb3J0IGV4ZWMgZnJvbSAnLi9leGVjJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBib2xkOiB7XHJcbiAgICBpY29uOiAnPGI+RjwvYj4nLFxyXG4gICAgdGl0bGU6ICdGZXRzdGlsJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnYm9sZCcpXHJcbiAgfSxcclxuICBpdGFsaWM6IHtcclxuICAgIGljb246ICc8aT5LPC9pPicsXHJcbiAgICB0aXRsZTogJ0t1cnNpdicsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2l0YWxpYycpXHJcbiAgfSxcclxuICB1bmRlcmxpbmU6IHtcclxuICAgIGljb246ICc8dT5VPC91PicsXHJcbiAgICB0aXRsZTogJ1VuZGVyc3RydWtlbicsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3VuZGVybGluZScpXHJcbiAgfSxcclxuICBzdHJpa2V0aHJvdWdoOiB7XHJcbiAgICBpY29uOiAnPHN0cmlrZT5TPC9zdHJpa2U+JyxcclxuICAgIHRpdGxlOiAnU3RydWtlbicsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3N0cmlrZVRocm91Z2gnKVxyXG4gIH0sXHJcbiAgaGVhZGluZzE6IHtcclxuICAgIGljb246ICc8Yj5IPHN1Yj4xPC9zdWI+PC9iPicsXHJcbiAgICB0aXRsZTogJ1J1YnJpayAxJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgxPicpXHJcbiAgfSxcclxuICBoZWFkaW5nMjoge1xyXG4gICAgaWNvbjogJzxiPkg8c3ViPjI8L3N1Yj48L2I+JyxcclxuICAgIHRpdGxlOiAnUnVicmlrIDInLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDI+JylcclxuICB9LFxyXG4gIGhlYWRpbmczOiB7XHJcbiAgICBpY29uOiAnPGI+SDxzdWI+Mzwvc3ViPjwvYj4nLFxyXG4gICAgdGl0bGU6ICdSdWJyaWsgMycsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMz4nKVxyXG4gIH0sXHJcbiAgcGFyYWdyYXBoOiB7XHJcbiAgICBpY29uOiAnJiMxODI7JyxcclxuICAgIHRpdGxlOiAnUGFyYWdyYWYnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8UD4nKVxyXG4gIH0sXHJcbiAgcXVvdGU6IHtcclxuICAgIGljb246ICcmIzgyMjA7ICYjODIyMTsnLFxyXG4gICAgdGl0bGU6ICdDaXRhdCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxCTE9DS1FVT1RFPicpXHJcbiAgfSxcclxuICBvbGlzdDoge1xyXG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtbGlzdC1vbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxyXG4gICAgdGl0bGU6ICdPcmRuYWQgbGlzdGEnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRPcmRlcmVkTGlzdCcpXHJcbiAgfSxcclxuICB1bGlzdDoge1xyXG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtbGlzdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxyXG4gICAgdGl0bGU6ICdQdW5rdGxpc3RhJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0VW5vcmRlcmVkTGlzdCcpXHJcbiAgfSxcclxuICBvdXRkZW50OiB7XHJcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1vdXRkZW50XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXHJcbiAgICB0aXRsZTogJ01pbnNrYSBpbmRyYWcnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKFwib3V0ZGVudFwiKVxyXG4gIH0sXHJcbiAgaW5kZW50OiB7XHJcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1pbmRlbnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcclxuICAgIHRpdGxlOiAnw5ZrYSBpbmRyYWcnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKFwiaW5kZW50XCIpLFxyXG4gIH0sXHJcbiAgY29kZToge1xyXG4gICAgaWNvbjogJyZsdDsvJmd0OycsXHJcbiAgICB0aXRsZTogJ1Byb2dyYW1rb2QnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8UFJFPicpXHJcbiAgfSxcclxuICBsaW5lOiB7XHJcbiAgICBpY29uOiAnJiM4MjEzOycsXHJcbiAgICB0aXRsZTogJ1bDpWdyw6R0IGxpbmplJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0SG9yaXpvbnRhbFJ1bGUnKVxyXG4gIH0sXHJcbiAgbGluazoge1xyXG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtbGlua1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxyXG4gICAgdGl0bGU6ICdJbmZvZ2EgbMOkbmsnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5wcm9tcHQoJ0FuZ2UgbMOkbmtlbnMgVVJMJylcclxuICAgICAgaWYgKHVybCkgZXhlYygnY3JlYXRlTGluaycsIHVybClcclxuICAgIH1cclxuICB9LFxyXG4gIGltYWdlOiB7XHJcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcclxuICAgIHRpdGxlOiAnSW5mb2dhIGJpbGQnLFxyXG4gICAgcHJvbXB0TXNnOiAnQW5nZSBiaWxkZW5zIFVSTCcsXHJcbiAgICByZXN1bHQgKGV2LCBjb21wb25lbnQpIHtcclxuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCh0aGlzLnByb21wdE1zZyk7XHJcbiAgICAgIGlmICh1cmwpIHtcclxuICAgICAgICAvL2V4ZWMoJ2luc2VydEltYWdlJywgdXJsKTtcclxuICAgICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xyXG4gICAgICAgIGltZy5zcmMgPSB1cmw7XHJcbiAgICAgICAgaW1nLnRhYkluZGV4ID0gMTtcclxuICAgICAgICBpbnNlcnRFbGVtZW50KGltZyk7XHJcbiAgICAgICAgaW1nLm9uZm9jdXMgPSBjb21wb25lbnQub25Gb2N1cztcclxuICAgICAgICBpbWcub25ibHVyID0gY29tcG9uZW50Lm9uQmx1cjtcclxuICAgICAgICBjb21wb25lbnQucHJvcHMub25DaGFuZ2UoY29tcG9uZW50LmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaW5zZXJ0RWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xyXG4gICAgdmFyIHNlbCwgcmFuZ2U7XHJcbiAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbiAmJiAoc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpKS5yYW5nZUNvdW50KSB7XHJcbiAgICAgICAgcmFuZ2UgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcclxuICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcclxuICAgICAgICByYW5nZS5pbnNlcnROb2RlKGVsZW1lbnQpO1xyXG4gICAgICAgIC8vIE1vdmUgdGhlIGNhcmV0IGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBpbnNlcnRlZCBzcGFuXHJcbiAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBZnRlcihlbGVtZW50KTtcclxuICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcclxuICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBSZXBvLCBSZXBvQ29tbXVuaWNhdG9yfSBmcm9tICcuL3JlcG8nO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBMaXN0T3B0aW9ucywgQmF0Y2hSdW5uZXIsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IERvY3VtZW50fSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEtlZFJlcG9PcHRpb25zPFQgZXh0ZW5kcyBEb2N1bWVudD4ge1xyXG4gIGdldENsaWVudDogKCk9PktlZEJhY2tlbmRDbGllbnQ7XHJcbiAgZ2V0UXVlcnlPcHRpb25zOiAoKT0+UHJvbWlzZTxMaXN0T3B0aW9ucz47XHJcbiAgb3B0aW1pc3RpYzogYm9vbGVhbjtcclxuICB0YWJsZTogc3RyaW5nO1xyXG4gIHVzZXI6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEtlZFJlcG88VCBleHRlbmRzIERvY3VtZW50PiB7XHJcbiAgbWVtOiBSZXBvPFQ+O1xyXG4gIG9wdGlvbnM6IEtlZFJlcG9PcHRpb25zPFQ+O1xyXG4gIFxyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEtlZFJlcG9PcHRpb25zPFQ+KSB7XHJcbiAgICBjb25zdCB7dGFibGUsIGdldENsaWVudCwgZ2V0UXVlcnlPcHRpb25zfSA9IG9wdGlvbnM7XHJcbiAgICB0aGlzLm1lbSA9IG5ldyBSZXBvPFQ+KHtxdWVyeTogYXN5bmMgKCk9PntcclxuICAgICAgY29uc3QgcXVlcnlPcHRpb25zID0gYXdhaXQgZ2V0UXVlcnlPcHRpb25zKCk7XHJcbiAgICAgIHJldHVybiBhd2FpdCBnZXRDbGllbnQoKS5saXN0PFQ+KHRhYmxlLCB7XHJcbiAgICAgICAgLi4ucXVlcnlPcHRpb25zLFxyXG4gICAgICAgIGNhY2hlQnVzdDogdGhpcy5nZXRDYWNoZUJ1c3QoKX0pO1xyXG4gICAgfX0pO1xyXG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Q2FjaGVCdXN0KCkge1xyXG4gICAgY29uc3Qge3RhYmxlLCB1c2VyfSA9IHRoaXMub3B0aW9ucztcclxuICAgIGNvbnN0IGNhY2hlQnVzdCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdjYWNoZS1idXN0LScgKyB0YWJsZSArICctJyArIHVzZXIpO1xyXG4gICAgcmV0dXJuIGNhY2hlQnVzdCB8fCB0aGlzLnJlZ2VuZXJhdGVDYWNoZUJ1c3QoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVnZW5lcmF0ZUNhY2hlQnVzdCgpIHtcclxuICAgIGNvbnN0IHt0YWJsZSwgdXNlcn0gPSB0aGlzLm9wdGlvbnM7XHJcbiAgICBjb25zdCBjYWNoZUJ1c3QgPSBjcmVhdGVVVUlEKCk7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnY2FjaGUtYnVzdC0nICsgdGFibGUgKyAnLScgKyB1c2VyLCBjYWNoZUJ1c3QpO1xyXG4gICAgcmV0dXJuIGNhY2hlQnVzdDtcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwc2VydChpdGVtOiBULCB1cGRhdGVyOiAoaXRlbTogVCkgPT4gdm9pZCkge1xyXG4gICAgaWYgKCFpdGVtLiRldGFnKSB7XHJcbiAgICAgIC8vIEl0ZW1zIHdpdGhvdXQgJGV0YWcgY2Fubm90IGJlIHJldHJpZXZlZCBmcm9tIHNlcnZlciwgc28gaXQgc2hvdWxkIGJlIGluc2VydGVkLlxyXG4gICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xyXG4gICAgICB1cGRhdGVyKHVwZGF0ZWRJdGVtKTtcclxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaW5zZXJ0KFt1cGRhdGVkSXRlbV0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gV2UgaGF2ZSBhbiAkZXRhZywgc28gd2UgY2FuIGV4cGVjdCBpdCB0byBsaXZlIG9uIHRoZSBzZXJ2ZXIuXHJcbiAgICAgIC8vIEhvd2V2ZXIsIHRha2UgY2FyZSBvZiB0aGUgdW5saWtlbHkgc2l0dWF0aW9uIHRoYXQgaXQgd2FzIGRlbGV0ZWQgZnJvbSBzZXJ2ZXIsXHJcbiAgICAgIC8vIGFuZCBpZiBzbywgaW5zZXJ0IGl0IGFnYWluLlxyXG4gICAgICBhd2FpdCB0aGlzLnVwZGF0ZShbaXRlbV0sIHVwZGF0ZXIpLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgIGlmIChlLm5hbWUgPT09IFwiaHR0cDQwNFwiKSB7XHJcbiAgICAgICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xyXG4gICAgICAgICAgdXBkYXRlcih1cGRhdGVkSXRlbSk7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbnNlcnQoW3VwZGF0ZWRJdGVtXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cGRhdGUoaXRlbXM6IFRbXSwgdXBkYXRlcjogKGl0ZW06IFQpID0+IHZvaWQpIHtcclxuICAgIGNvbnN0IHtnZXRDbGllbnQsIG9wdGltaXN0aWMsIHRhYmxlfSA9IHRoaXMub3B0aW9ucztcclxuICAgIGNvbnN0IGNsaWVudCA9IGdldENsaWVudCgpO1xyXG4gICAgY29uc3QgbW9kaWZpZWRJdGVtczogVFtdID0gaXRlbXMubWFwKGl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCBtZW1SZXBvSXRlbSA9IHRoaXMubWVtLml0ZW1zLmZpbmQoaXQgPT4gaXQuaWQgPT09IGl0ZW0uaWQpO1xyXG4gICAgICBpdGVtID0gT2JqZWN0LmFzc2lnbih7fSwgbWVtUmVwb0l0ZW0gfHwgaXRlbSk7XHJcbiAgICAgIHVwZGF0ZXIoaXRlbSk7XHJcbiAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfSk7XHJcbiAgICBpZiAob3B0aW1pc3RpYykgYXdhaXQgdGhpcy5tZW0udXBkYXRlKG1vZGlmaWVkSXRlbXMubWFwKHggPT4gT2JqZWN0LmFzc2lnbih7fSwgeCwgeyRtZXRhOiAndXBkYXRpbmcnfSkpKTtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5kbyAoYnIgPT4gbW9kaWZpZWRJdGVtcy5mb3JFYWNoKGl0ZW0gPT4gYnIucHV0KHRhYmxlLCBpdGVtKSkpXHJcbiAgICAuY2F0Y2goZSA9PiBlLm5hbWUgPT09IFwiaHR0cDQwOVwiID8gLy8gY29uZmxpY3RcclxuICAgICAgLy8gR2V0IGEgZnJlc2ggdmVyc2lvbiBmcm9tIHNlcnZlcjpcclxuICAgICAgY2xpZW50Lmxpc3Q8VD4odGFibGUsIHtpZHM6IGl0ZW1zLm1hcChpdGVtID0+IGl0ZW0uaWQpfSwge2NhY2hlOiAnbm8tY2FjaGUnfSkudGhlbihmcmVzaEl0ZW1zID0+IHtcclxuICAgICAgICAvLyBVcGRhdGUgbG9jYWwgdmVyc2lvbjpcclxuICAgICAgICBjb25zdCBtb2RpZmllZEl0ZW1zID0gZnJlc2hJdGVtcy5tYXAoZnJlc2hJdGVtID0+IHtcclxuICAgICAgICAgIC8vIENsb25lIHRoZSBmcmVzaCBpdGVtXHJcbiAgICAgICAgICBjb25zdCBtb2RpZmllZCA9IE9iamVjdC5hc3NpZ24oe30sIGZyZXNoSXRlbSk7XHJcbiAgICAgICAgICAvLyBSZS1ydW4gdGhlIHVwZGF0ZXIgb24gdGhlIGNsb25lOlxyXG4gICAgICAgICAgdXBkYXRlcihtb2RpZmllZCk7XHJcbiAgICAgICAgICByZXR1cm4gbW9kaWZpZWQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gUmUtZG8gdGhlIHRoZSBwdXQgb3BlcmF0aW9uIHRvd2FyZHMgdGhlIHNlcnZlci5cclxuICAgICAgICByZXR1cm4gY2xpZW50LmRvKGJyID0+IG1vZGlmaWVkSXRlbXMuZm9yRWFjaChpdGVtID0+IGJyLnB1dCh0YWJsZSwgaXRlbSkpKTtcclxuICAgICAgfSkgOlxyXG4gICAgICAvLyBPdGhlciB1bmV4cGVjdGVkIGVycm9yOlxyXG4gICAgICBQcm9taXNlLnJlc29sdmUob3B0aW1pc3RpYyAmJlxyXG4gICAgICAgIHRoaXMubWVtLnVwZGF0ZShpdGVtcykpIC8vIFVuZG8gb3B0aW1pc3RpYyB1cGRhdGVcclxuICAgICAgLnRoZW4oKCk9PntcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7IC8vIFJlamVjdCB3aXRoIHRoZSBlcnJvciBubyBtYXR0ZXIuXHJcbiAgICAgIH0pKTtcclxuICAgIHRoaXMucmVnZW5lcmF0ZUNhY2hlQnVzdCgpO1xyXG4gICAgbW9kaWZpZWRJdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICBpdGVtLiRldGFnID0gcmVzLm5ld0V0YWdzW2l0ZW0uaWRdO1xyXG4gICAgICBpdGVtLiRtZXRhID0gdW5kZWZpbmVkO1xyXG4gICAgfSk7XHJcbiAgICBhd2FpdCB0aGlzLm1lbS51cGRhdGUobW9kaWZpZWRJdGVtcyk7IC8vIEVuc3VyZXMgbmV3IGV0YWcgaXMgaXMgYXBwbGllZCBvbiBuZXh0IGFjdGlvbi5cclxuICB9XHJcblxyXG4gIHN0cmlwR3JhcGhzIChpdGVtczogVFtdLCBncmFwaHM6IHN0cmluZ1tdKSB7XHJcbiAgICByZXR1cm4gaXRlbXMubWFwKGl0ZW0gPT4ge1xyXG4gICAgICBjb25zdCBjbG9uZSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xyXG4gICAgICBncmFwaHMuZm9yRWFjaChncmFwaCA9PiB7XHJcbiAgICAgICAgaWYgKGl0ZW1bZ3JhcGhdKSB7XHJcbiAgICAgICAgICBjbG9uZVtncmFwaF0gPSAoaXRlbVtncmFwaF0gYXMge2lkOnN0cmluZ31bXSkubWFwIChkb2MgPT4gKHtpZDogZG9jLmlkfSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBjbG9uZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgaW5zZXJ0KGl0ZW1zOiBUW10pIHtcclxuICAgIGNvbnN0IHtnZXRDbGllbnQsIG9wdGltaXN0aWMsIHRhYmxlLCBnZXRRdWVyeU9wdGlvbnN9ID0gdGhpcy5vcHRpb25zO1xyXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XHJcbiAgICBjb25zdCBxdWVyeU9wdGlvbnMgPSBhd2FpdCBnZXRRdWVyeU9wdGlvbnMoKTtcclxuICAgIGNvbnN0IGdyYXBocyA9IFtdLmNvbmNhdChxdWVyeU9wdGlvbnMuaW5jbHVkZSk7XHJcbiAgICAvLyBHaXZlIElEcyB0byBlYWNoIGl0ZW06XHJcbiAgICBpdGVtcyA9IGl0ZW1zLm1hcChpdGVtID0+IGl0ZW0uaWQgPyBpdGVtIDogT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge2lkOiBjcmVhdGVVVUlEKCl9KSk7XHJcbiAgICBjb25zdCBzdHJpcHBlZCA9IHRoaXMuc3RyaXBHcmFwaHMoaXRlbXMsIGdyYXBocyk7XHJcbiAgICBpZiAob3B0aW1pc3RpYykgYXdhaXQgdGhpcy5tZW0uaW5zZXJ0KHN0cmlwcGVkLm1hcCh4ID0+IE9iamVjdC5hc3NpZ24oe30sIHgsIHskbWV0YTogJ2FkZGluZyd9KSkpO1xyXG4gICAgY29uc3QgYnIgPSBuZXcgQmF0Y2hSdW5uZXIoKTtcclxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBzdHJpcHBlZCkge1xyXG4gICAgICAvLyBBbHNvIGFkZCBsaW5rcyB0byBhbGwgZm9yZWlnbiByZWxhdGVkIGl0ZW1zOlxyXG4gICAgICBmb3IgKGNvbnN0IGdyYXBoIG9mIGdyYXBocykge1xyXG4gICAgICAgIGNvbnN0IGZvcmVpZ25JdGVtczogRG9jdW1lbnRbXSA9IGl0ZW1bZ3JhcGhdO1xyXG4gICAgICAgIGlmIChmb3JlaWduSXRlbXMpIHtcclxuICAgICAgICAgIGZvcmVpZ25JdGVtcy5mb3JFYWNoKGRvYyA9PiB7XHJcbiAgICAgICAgICAgIGJyLmxpbmsyKHRhYmxlLCBpdGVtLmlkLCBncmFwaCwgZG9jLmlkKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBici5hZGQodGFibGUsIGl0ZW0pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgY2xpZW50LmJhdGNoKGJyLm11dGF0aW9uUmVxdWVzdHMpLmNhdGNoKGUgPT4ge1xyXG4gICAgICBpZiAob3B0aW1pc3RpYykgdGhpcy5tZW0uZGVsZXRlKGl0ZW1zLm1hcChpdGVtID0+IGl0ZW0uaWQpKTtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xyXG4gICAgfSlcclxuICAgIHRoaXMucmVnZW5lcmF0ZUNhY2hlQnVzdCgpO1xyXG4gICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IGl0ZW0uJGV0YWcgPSByZXMubmV3RXRhZ3NbaXRlbS5pZF0pO1xyXG4gICAgaWYgKG9wdGltaXN0aWMpXHJcbiAgICAgIGF3YWl0IHRoaXMubWVtLnVwZGF0ZShpdGVtcyk7IC8vIFVwZGF0ZSB3aXRoIG5ldyAkZXRhZy5cclxuICAgIGVsc2VcclxuICAgICAgYXdhaXQgdGhpcy5tZW0uaW5zZXJ0KGl0ZW1zKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZSAoaWRzOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3Qge2dldENsaWVudCwgb3B0aW1pc3RpYywgdGFibGV9ID0gdGhpcy5vcHRpb25zO1xyXG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XHJcbiAgICBpZiAob3B0aW1pc3RpYykgYXdhaXQgdGhpcy5tZW0udXBkYXRlKGlkc1xyXG4gICAgICAubWFwKGlkID0+IHRoaXMubWVtLml0ZW1zLmZpbmQoeCA9PiB4LmlkID09PSBpZCkpXHJcbiAgICAgIC5maWx0ZXIoeCA9PiB4KVxyXG4gICAgICAubWFwKHggPT4gT2JqZWN0LmFzc2lnbih7fSwgeCwgeyRtZXRhOiAnZGVsZXRpbmcnfSkpKTtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5kbyAoYnIgPT4gaWRzLmZvckVhY2goaWQgPT4gYnIuZGVsZXRlKHRhYmxlLCBpZCkpKS5jYXRjaChhc3luYyBlID0+IHtcclxuICAgICAgaWYgKG9wdGltaXN0aWMpIHtcclxuICAgICAgICBhd2FpdCB0aGlzLm1lbS51cGRhdGUoaWRzXHJcbiAgICAgICAgICAubWFwKGlkID0+IHRoaXMubWVtLml0ZW1zLmZpbmQoeCA9PiB4LmlkID09PSBpZCkpXHJcbiAgICAgICAgICAuZmlsdGVyKHggPT4geClcclxuICAgICAgICAgIC5tYXAoeCA9PiB7XHJcbiAgICAgICAgICAgIHggPSBPYmplY3QuYXNzaWduKHt9LCB4KTtcclxuICAgICAgICAgICAgZGVsZXRlIHguJG1ldGE7XHJcbiAgICAgICAgICAgIHJldHVybiB4O1xyXG4gICAgICAgICAgfSkpO1xyXG4gICAgICB9XHJcbiAgICAgIHRocm93IGU7XHJcbiAgICB9KTtcclxuICAgIHRoaXMucmVnZW5lcmF0ZUNhY2hlQnVzdCgpO1xyXG4gICAgYXdhaXQgdGhpcy5tZW0uZGVsZXRlKGlkcyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5jb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XHJcblxyXG50eXBlIEhUTUxQb2xpY3kgPSB7W3RhZ05hbWVMb3dlcjogc3RyaW5nXToge1thdHRyaWJ1dGVMb3dlcjogc3RyaW5nXTogYm9vbGVhbn19O1xyXG5cclxuLyoqIFRhZ3MgLyBBdHRyaWJ1dGVzIFdoaXRlbGlzdFxyXG4gKiBcclxuICovXHJcbmNvbnN0IEhUTUxfV0FTSF9QT0xJQ1k6IEhUTUxQb2xpY3kgPSB7XHJcbiAgYjoge30sICAvLyBib2xkXHJcbiAgaToge30sICAvLyBpdGFsaWNcclxuICBwOiB7fSwgIC8vIHBhcmFncmFwaFxyXG4gIHU6IHt9LCAgLy8gdW5kZXJsaW5lXHJcbiAgc3RyaWtlOiB7fSwgLy8gc3RyaWtlLXRocm91Z2hcclxuICBwcmU6IHt9LCAvLyB1bmZvcm1hdHRlZFxyXG4gIGgxOiB7fSwgLy8gaGVhZGluZyAxXHJcbiAgaDI6IHt9LCAvLyBoZWFkaW5nIDJcclxuICBoMzoge30sIC8vIGhlYWRpbmcgM1xyXG4gIGg0OiB7fSwgLy8gaGVhZGluZyA0XHJcbiAgaDU6IHt9LCAvLyBoZWFkaW5nIDVcclxuICBpbWc6IHtzcmM6IHRydWUsIGNsYXNzOiB0cnVlLCBzdHlsZTogdHJ1ZSwgdGFiaW5kZXg6IHRydWV9LCAvLyBpbWFnZS4gV2Ugc2V0IHN0eWxlIGFuZCB0YWJpbmRleCBvdXJzZWx2ZXMuIEFjY2VwdCB0aGF0LlxyXG4gIGE6IHtocmVmOiB0cnVlLCB0YXJnZXQ6IHRydWUsIHRhYmluZGV4OiB0cnVlfSwgLy8gbGlua1xyXG4gIHVsOiB7fSwgLy8gVW5vcmRlcmVkIGxpc3RcclxuICBvbDoge30sIC8vIE9yZGVyZWQgbGlzdFxyXG4gIGxpOiB7fSwgLy8gbGlzdCBpdGVtXHJcbiAgaHI6IHt9LCAvLyBIb3Jpem9udGFsIHJ1bGVcclxuICBicjoge30sIC8vIEJyZWFrIGxpbmVcclxuICBkaXY6IHt9LC8vIE9mIHNvbWUgcmVhc29uLCBkaXZzIGFyZSBzb21ldGltZXMgaW5zZXJ0ZWQgd2hlbiBwcmVzc2luZyBFTlRFUiBpbiB0aGUgd3lzaXd5ZyBlZGl0b3IuXHJcbiAgc3Bhbjoge30sLy8gU3BhbnMgYXJlIGhhcm1sZXNzLCBqdXN0IHJlbW92ZSB0aGVpciBzdHlsZSBhbmQgb3RoZXIgYXR0cmlidXRlcyBhbmQgSSBmZWVsIGdyZWF0LlxyXG4gIC8vIHRhYmxlIHRhZ3M6XHJcbiAgdGFibGU6IHtib3JkZXI6IHRydWV9LFxyXG4gIHRib2R5OiB7fSxcclxuICB0aGVhZDoge30sXHJcbiAgdGZvb3Q6IHt9LFxyXG4gIHRyOiB7fSxcclxuICB0ZDoge2hlYWRlcnM6IHRydWUsIGNvbHNwYW46IHRydWUsIHJvd3NwYW46IHRydWV9LFxyXG4gIHRoOiB7YWJicjogdHJ1ZSwgaGVhZGVyczogdHJ1ZSwgc2NvcGU6IHRydWUsIHNvcnRlZDogdHJ1ZSwgY29sc3BhbjogdHJ1ZSwgcm93c3BhbjogdHJ1ZX1cclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3YXNoSHRtbCAoaHRtbDogc3RyaW5nKTogc3RyaW5nIHtcclxuICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpO1xyXG4gIGNvbnN0IHtjaGlsZE5vZGVzfSA9IGRvYy5ib2R5O1xyXG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xyXG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZiAod2FzaE5vZGUoY2hpbGROb2Rlcy5pdGVtKGkpKSkge1xyXG4gICAgICBtb2RpZmllZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtb2RpZmllZCA/XHJcbiAgICBkb2MuYm9keS5pbm5lckhUTUwgOlxyXG4gICAgaHRtbDsgLy8gQnkgcmV0dXJuaW5nIHRoZSBvcmlnaW5hbCBIVE1MIHN0cmluZywgd2Ugc3BhcmUgdGhlIHVzZXIgZnJvbSByZWZyZXNoaW5nIHRoZSBlZGl0IGFyZWEsXHJcbiAgICAgICAgICAvLyB3aGljaCB3b3VsZCBvdGhlcndpc2UgcHV0IHRoZSBjdXJzb3IgYXQgdGhlIHRvcCwgbG9zaW5nIHRoZSBwb3NpdGlvbiB3aGVyZSB1c2VyIHdoZXJlLlxyXG59XHJcblxyXG5mdW5jdGlvbiB3YXNoTm9kZShub2RlOiBOb2RlIHwgRWxlbWVudCB8IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XHJcbiAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XHJcbiAgaWYgKGlzRWxlbWVudChub2RlKSkge1xyXG4gICAgaWYgKHdhc2hFbGVtZW50KG5vZGUpKSB7XHJcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKHdhc2hDaGlsZE5vZGVzKG5vZGUpKSB7XHJcbiAgICBtb2RpZmllZCA9IHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBtb2RpZmllZDtcclxufVxyXG5cclxuZnVuY3Rpb24gd2FzaENoaWxkTm9kZXMobm9kZTogTm9kZSkge1xyXG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xyXG4gIGNvbnN0IHtjaGlsZE5vZGVzfSA9IG5vZGU7XHJcbiAgZm9yIChsZXQgaT0wOyBpPGNoaWxkTm9kZXMubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmICh3YXNoTm9kZShjaGlsZE5vZGVzLml0ZW0oaSkpKSB7XHJcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1vZGlmaWVkO1xyXG59IFxyXG5cclxuLyoqIFJlcGxhY2UgYW4gZWxlbWVudCB3aXRoIGl0cyBjaGlsZCBub2Rlcy5cclxuICogXHJcbiAqL1xyXG5mdW5jdGlvbiByZW1vdmVNaWRkbGVFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpIHtcclxuICBjb25zdCB7Y2hpbGROb2Rlc30gPSBlbGVtZW50O1xyXG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZXMuaXRlbShpKSwgZWxlbWVudCk7XHJcbiAgfVxyXG4gIGVsZW1lbnQucmVtb3ZlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdhc2hFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpOiBib29sZWFuIHtcclxuICBjb25zdCBwb2xpY3kgPSBlbGVtZW50LnRhZ05hbWUgJiYgSFRNTF9XQVNIX1BPTElDWVtlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV07XHJcbiAgaWYgKCFwb2xpY3kpIHtcclxuICAgIGNvbnNvbGUud2FybihcIld5c2l3eWc6IG5vdCBhbGxvd2VkIHRhZ1wiLCBlbGVtZW50LnRhZ05hbWUpO1xyXG4gICAgd2FzaENoaWxkTm9kZXMoZWxlbWVudCk7XHJcbiAgICByZW1vdmVNaWRkbGVFbGVtZW50KGVsZW1lbnQpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xyXG4gIGZvciAobGV0IGk9MDsgaTxlbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoOyArK2kpIHtcclxuICAgIGNvbnN0IGF0dHIgPSBlbGVtZW50LmF0dHJpYnV0ZXMuaXRlbShpKTtcclxuICAgIGNvbnN0IGFsbG93ZWQgPSBhdHRyLm5hbWUgJiYgISFwb2xpY3lbYXR0ci5uYW1lLnRvTG93ZXJDYXNlKCldO1xyXG4gICAgaWYgKCFhbGxvd2VkKSB7XHJcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcclxuICAgICAgY29uc29sZS53YXJuKFwiV3lzaXd5Zzogbm90IGFsbG93ZWQgYXR0cmlidXRlXCIsIGF0dHIubmFtZSwgXCJUYWc6IFwiLCBlbGVtZW50LnRhZ05hbWUpO1xyXG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyLm5hbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbW9kaWZpZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlOiBOb2RlKSA6IG5vZGUgaXMgRWxlbWVudCB7XHJcbiAgcmV0dXJuICEhKG5vZGUgYXMgRWxlbWVudCkudGFnTmFtZTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBleGVjIGZyb20gJy4vZXhlYyc7XHJcbmltcG9ydCB7d2FzaEh0bWx9IGZyb20gJy4vd2FzaC1odG1sJztcclxuaW1wb3J0IGltYWdlRWRpdEFjdGlvbnMgZnJvbSAnLi9pbWFnZS1lZGl0LWFjdGlvbnMnO1xyXG5pbXBvcnQgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb24ge1xyXG4gIG5hbWU/OiBzdHJpbmc7XHJcbiAgaWNvbjogc3RyaW5nO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgcHJvbXB0TXNnPzogc3RyaW5nO1xyXG4gIHJlc3VsdDogKGV2OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50PiwgY29tcG9uZW50OiBXeXNpd3lnKSA9PiB2b2lkO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxuICBodG1sOiBzdHJpbmc7XHJcbiAgb25DaGFuZ2U/OiAoaHRtbDogc3RyaW5nKSA9PiB2b2lkO1xyXG4gIHJlcG9ydE51bUNoYXJzPzogKG51bUNoYXJzOiBudW1iZXIpID0+IHZvaWQ7XHJcbiAgbWF4Q2hhcnM/OiBudW1iZXI7XHJcbiAgZGVmYXVsdEFjdGlvbnM/OiB7W25hbWU6IHN0cmluZ106IEFjdGlvbn07XHJcbiAgYWN0aW9ucz86IChQYXJ0aWFsPEFjdGlvbj4gfCBzdHJpbmcpW107XHJcbiAgcmVhZE9ubHk/OiBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGZvY3VzUmVjdDogQ2xpZW50UmVjdCB8IG51bGw7XHJcbn1cclxuXHJcbmNvbnN0IGNsYXNzZXMgPSB7XHJcbiAgYWN0aW9uYmFyOiAnd3lzaXd5Zy1hY3Rpb25iYXInLFxyXG4gIGJ1dHRvbjogJ3d5c2l3eWctYnV0dG9uJyxcclxuICBjb250ZW50OiAnd3lzaXd5Zy1jb250ZW50JyxcclxuICBmb2N1c3JlY3Q6ICd3eXNpd3lnLWZvY3VzcmVjdCcsXHJcbiAgZm9jdXNwb2ludDogJ3d5c2l3eWctZm9jdXNwb2ludCcsXHJcbiAgcmVhZG9ubHlDb250ZW50OiAnd3lzaXd5Zy1jb250ZW50IHJlYWRvbmx5J1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgV3lzaXd5ZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIGNvbnRlbnREaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gIGZvY3VzUmVjdERpdjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgZm9jdXNFbGVtOiBIVE1MRWxlbWVudCB8IG51bGw7XHJcbiAgY29ybmVyOiBzdHJpbmc7XHJcbiAgcmVzaXplU3RhcnRYOiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7Zm9jdXNSZWN0OiBudWxsfTtcclxuICAgIHRoaXMub25Gb2N1cyA9IHRoaXMub25Gb2N1cy5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbkJsdXIgPSB0aGlzLm9uQmx1ci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbk1vdXNlRG93biA9IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25Nb3VzZU1vdmUgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLm9uTW91c2VVcCA9IHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIGlmICghdGhpcy5wcm9wcy5yZWFkT25seSkge1xyXG4gICAgICBBcnJheS5mcm9tKHRoaXMuY29udGVudERpdi5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nLGFcIikpLm1hcChlbGVtID0+IChlbGVtIGFzIChIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTEFuY2hvckVsZW1lbnQpKSlcclxuICAgICAgLmZvckVhY2goZWxlbSA9PiB7XHJcbiAgICAgICAgZWxlbS50YWJJbmRleCA9IDE7XHJcbiAgICAgICAgZWxlbS5vbmZvY3VzID0gdGhpcy5vbkZvY3VzO1xyXG4gICAgICAgIGVsZW0ub25ibHVyID0gdGhpcy5vbkJsdXIgYXMgYW55O1xyXG4gICAgICB9KTtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3lzaXd5Zy1jb250ZW50XCIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnMpIHtcclxuICAgICAgdGhpcy5wcm9wcy5yZXBvcnROdW1DaGFycygodGhpcy5jb250ZW50RGl2ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQgJiYgdGhpcy5jb250ZW50RGl2LmlubmVyVGV4dC5sZW5ndGgpIHx8IDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xyXG4gICAgQXJyYXkuZnJvbSh0aGlzLmNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbChcImltZyxhXCIpKS5tYXAoZWxlbSA9PiAoZWxlbSBhcyAoSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50KSkpXHJcbiAgICAuZm9yRWFjaChlbGVtID0+IHtcclxuICAgICAgZWxlbS50YWJJbmRleCA9IDE7XHJcbiAgICAgIGVsZW0ub25mb2N1cyA9IHRoaXMub25Gb2N1cztcclxuICAgICAgZWxlbS5vbmJsdXIgPSB0aGlzLm9uQmx1ciBhcyBhbnk7XHJcbiAgICB9KTtcclxuICAgIGlmICh0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKSB7XHJcbiAgICAgIHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnMoKHRoaXMuY29udGVudERpdiAmJiB0aGlzLmNvbnRlbnREaXYuaW5uZXJUZXh0ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQubGVuZ3RoKSB8fCAwKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3lzaXd5Zy1jb250ZW50XCIpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcCk7XHJcbiAgfVxyXG5cclxuICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzOiBQcm9wcywgbmV4dFN0YXRlOiBTdGF0ZSkge1xyXG4gICAgLy90aGlzLmNvbnRlbnREaXYub25mb2N1cyA9IHRoaXMub25Gb2N1cztcclxuICAgIC8vdGhpcy5jb250ZW50RGl2Lm9uYmx1ciA9IHRoaXMub25CbHVyO1xyXG4gICAgcmV0dXJuICF0aGlzLmNvbnRlbnREaXYgfHxcclxuICAgICAgbmV4dFN0YXRlICE9IHRoaXMuc3RhdGUgfHxcclxuICAgICAgbmV4dFByb3BzLnJlYWRPbmx5ICE9PSB0aGlzLnByb3BzLnJlYWRPbmx5IHx8XHJcbiAgICAgIHdhc2hIdG1sKG5leHRQcm9wcy5odG1sKSAhPT0gd2FzaEh0bWwodGhpcy5jb250ZW50RGl2LmlubmVySFRNTCk7XHJcbiAgfVxyXG5cclxuICB0cmlnZ2VyT25DaGFuZ2UoaHRtbDogc3RyaW5nKSB7XHJcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmIHRoaXMucHJvcHMub25DaGFuZ2Uod2FzaEh0bWwoaHRtbCkpO1xyXG4gIH1cclxuXHJcbiAgb25Gb2N1cyhldjogRm9jdXNFdmVudCkge1xyXG4gICAgY29uc3QgZWxlbSA9IGV2LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAgIGlmICghZWxlbSB8fCAhZWxlbS50YWdOYW1lKSByZXR1cm47XHJcbiAgICBpZiAoZWxlbS50YWdOYW1lICE9PSAnSU1HJyAmJiBlbGVtLnRhZ05hbWUgIT09ICdBJykgcmV0dXJuO1xyXG4gICAgY29uc3QgY29udGVudFBhcmVudCA9IHRoaXMuY29udGVudERpdi5wYXJlbnRFbGVtZW50O1xyXG4gICAgY29uc3QgbmV3U3RhdGUgPSB7XHJcbiAgICAgIGZvY3VzUmVjdDogZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QoY29udGVudFBhcmVudCwgZWxlbSksXHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKGVsZW0udGFnTmFtZSkge1xyXG4gICAgICBjYXNlICdBJzpcclxuICAgICAgY2FzZSAnSU1HJzpcclxuXHJcbiAgICAgIGRlZmF1bHQ6IGJyZWFrO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSk7XHJcbiAgICB0aGlzLmZvY3VzRWxlbSA9IGVsZW07XHJcbiAgfVxyXG5cclxuICBvbkJsdXIoZXY6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSB7XHJcbiAgICAvKmlmIChldi5yZWxhdGVkVGFyZ2V0KSB7XHJcbiAgICAgIGNvbnN0IHJlbGF0ZWRUYXJnZXQgPSBldi5yZWxhdGVkVGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xyXG4gICAgICBpZiAocmVsYXRlZFRhcmdldC5jbGFzc05hbWUgJiYgcmVsYXRlZFRhcmdldC5jbGFzc05hbWUuc3BsaXQoJyAnKS5pbmRleE9mKGNsYXNzZXMuYnV0dG9uKSA+PSAwKSB7XHJcbiAgICAgICAgLy8gQSBpbWFnZSBhY3Rpb24gYnV0dG9uIHdhcyBwcmVzc2VkXHJcbiAgICAgICAgc2V0XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9Ki9cclxuICAgIGlmICgoZXYudGFyZ2V0ID09PSB0aGlzLmZvY3VzRWxlbSAmJiBldi5yZWxhdGVkVGFyZ2V0ICE9PSB0aGlzLmZvY3VzUmVjdERpdikgfHxcclxuICAgICAgZXYudGFyZ2V0ID09PSB0aGlzLmZvY3VzUmVjdERpdilcclxuICAgIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7Zm9jdXNSZWN0OiBudWxsfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBtYWtlQ2xpY2thYmxlKGVsZW06IEhUTUxFbGVtZW50KSB7XHJcbiAgICAgZWxlbS50YWJJbmRleCA9IDE7XHJcbiAgfVxyXG5cclxuICBvbk1vdXNlRG93bihldikge1xyXG4gICAgaWYgKChldi50YXJnZXQuY2xhc3NOYW1lIHx8IFwiXCIpLnNwbGl0KCcgJykuaW5kZXhPZihjbGFzc2VzLmZvY3VzcG9pbnQpID49IDApIHtcclxuICAgICAgY29uc3QgY29ybmVyID0gdGhpcy5nZXRSZWN0Q29ybmVyKGV2KTtcclxuICAgICAgdGhpcy5jb3JuZXIgPSBjb3JuZXI7XHJcbiAgICAgIHRoaXMucmVzaXplU3RhcnRYID0gZXYuY2xpZW50WDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uTW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KSB7XHJcbiAgICBpZiAodGhpcy5jb3JuZXIgJiYgdGhpcy5zdGF0ZS5mb2N1c1JlY3QgJiYgdGhpcy5mb2N1c0VsZW0pIHtcclxuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgLy8gVE9ETzogUsOka25hIHV0IGJhc2VyYXQgcMOlIHRoaXMuY29ybmVyIGh1ciBiaWxkZW5zIHN0b3JsZWsgYm9yZGUgw6RuZHJhcy5cclxuICAgICAgLy8gTGV0YSB1cHAgYmlsZGVuIHBlciBJRCBmcsOlbiB0aGlzLmNvbnRlbnREaXZcclxuICAgICAgLy8gU8OkdHQgRElWOmVucyBzdHlsZSBhdHRyaWJ1dCB3aWR0aCB0aWxsIG55IHdpZHRoLlxyXG4gICAgICAvLyBPbSBESVY6ZW4gcmVkYW4gaGFkZSBoZWlnaHQsIHPDpHR0IG55IGhlaWdodCBtZWQgc2FtbWEgYXNwZWN0IHJhdGlvIHNvbSBpbm5hbixcclxuICAgICAgLy8gYW5uYXJzLCBzw6R0dCBpbnRlIGhlaWdodCBhbGxzIChlbGxlciBtw7ZqbGlndHZpcyB0aWxsIGF1dG8pKVxyXG4gICAgICBjb25zdCBmb2N1c1JlY3QgPSB0aGlzLmZvY3VzUmVjdERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgaWYgKGZvY3VzUmVjdC53aWR0aCA8IDMyKSByZXR1cm47XHJcbiAgICAgIC8vY29uc3QgY3VycmVudFdpZHRoID0gZm9jdXNSZWN0LndpZHRoO1xyXG4gICAgICAvL2NvbnN0IGN1cnJlbnRIZWlnaHQgPSBmb2N1c1JlY3QuaGVpZ2h0O1xyXG4gICAgICAvL2NvbnN0IGhhc0hlaWdodFN0eWxlID0gIXRoaXMuZm9jdXNFbGVtLnN0eWxlLmhlaWdodCB8fCB0aGlzLmZvY3VzRWxlbS5zdHlsZS5oZWlnaHQgPT09IFwiYXV0b1wiO1xyXG4gICAgICBjb25zdCBuZXdXaWR0aCA9IE1hdGgubWF4KDMyLCB0aGlzLmNvcm5lci5lbmRzV2l0aCgnbCcpID9cclxuICAgICAgICBmb2N1c1JlY3Qud2lkdGggKyAodGhpcy5yZXNpemVTdGFydFggLSBldi5jbGllbnRYKSA6XHJcbiAgICAgICAgLy9mb2N1c1JlY3QucmlnaHQgLSBldi5jbGllbnRYIDpcclxuICAgICAgICBmb2N1c1JlY3Qud2lkdGggLSAodGhpcy5yZXNpemVTdGFydFggLSBldi5jbGllbnRYKSk7XHJcbiAgICAgIHRoaXMucmVzaXplU3RhcnRYID0gZXYuY2xpZW50WDtcclxuICAgICAgICAvL2V2LmNsaWVudFggLSBmb2N1c1JlY3QubGVmdDtcclxuICAgICAgY29uc3QgZmFjdG9yID0gbmV3V2lkdGggLyBmb2N1c1JlY3Qud2lkdGg7XHJcbiAgICAgIGNvbnN0IG5ld0hlaWdodCA9IGZvY3VzUmVjdC5oZWlnaHQgKiBmYWN0b3I7XHJcbiAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyBcInB4XCI7XHJcbiAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodCArIFwicHhcIjtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCh0aGlzLmNvbnRlbnREaXYucGFyZW50RWxlbWVudCwgdGhpcy5mb2N1c0VsZW0pLFxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uTW91c2VVcChldikge1xyXG4gICAgaWYgKHRoaXMuY29ybmVyICYmIHRoaXMuc3RhdGUuZm9jdXNSZWN0ICYmIHRoaXMuZm9jdXNFbGVtKSB7XHJcbiAgICAgIHRoaXMuY29ybmVyID0gbnVsbDtcclxuICAgICAgdGhpcy50cmlnZ2VyT25DaGFuZ2UodGhpcy5jb250ZW50RGl2LmlubmVySFRNTCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRSZWN0Q29ybmVyKGV2KSB7XHJcbiAgICBmb3IgKGNvbnN0IGNsYXNzTmFtZSBvZiAoZXYudGFyZ2V0LmNsYXNzTmFtZSB8fCAnJykuc3BsaXQoJyAnKSkge1xyXG4gICAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xyXG4gICAgICAgIGNhc2UgJ2ZwdWwnOlxyXG4gICAgICAgICAgcmV0dXJuICd1bCc7XHJcbiAgICAgICAgY2FzZSAnZnB1cic6XHJcbiAgICAgICAgICByZXR1cm4gJ2ZwdXInO1xyXG4gICAgICAgIGNhc2UgJ2ZwbHInOlxyXG4gICAgICAgICAgcmV0dXJuICdscic7XHJcbiAgICAgICAgY2FzZSAnZnBsbCc6XHJcbiAgICAgICAgICByZXR1cm4gJ2xsJztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBleGVjSW1hZ2VFZGl0QWN0aW9uIChjbWQ6IHN0cmluZykge1xyXG4gICAgLy9jb25zb2xlLmxvZyhjbWQpO1xyXG4gICAgaWYgKCF0aGlzLmZvY3VzRWxlbSkgcmV0dXJuO1xyXG4gICAgLy9jb25zb2xlLmxvZyhcImRvaW5nIGl0XCIpO1xyXG4gICAgc3dpdGNoIChjbWQpIHtcclxuICAgICAgY2FzZSAnZmxvYXQtbGVmdCc6XHJcbiAgICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuY3NzRmxvYXQgPSAnbGVmdCc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2Zsb2F0LXJpZ2h0JzpcclxuICAgICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS5jc3NGbG9hdCA9ICdyaWdodCc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3VuZmxvYXQnOlxyXG4gICAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLmNzc0Zsb2F0ID0gJyc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZSh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe2ZvY3VzUmVjdDogZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QodGhpcy5jb250ZW50RGl2LnBhcmVudEVsZW1lbnQsIHRoaXMuZm9jdXNFbGVtKX0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgZGVmYXVsdEFjdGlvbnMgPSB0aGlzLnByb3BzLmRlZmF1bHRBY3Rpb25zIHx8IGFjdGlvbnM7XHJcbiAgICBsZXQgYWN0aW9uc1RvVXNlID0gdGhpcy5wcm9wcy5hY3Rpb25zID8gdGhpcy5wcm9wcy5hY3Rpb25zLm1hcChhY3Rpb24gPT5cclxuICAgICAgdHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycgP1xyXG4gICAgICAgIGRlZmF1bHRBY3Rpb25zW2FjdGlvbl0gOlxyXG4gICAgICAgIGRlZmF1bHRBY3Rpb25zW2FjdGlvbi5uYW1lXSA/XHJcbiAgICAgICAgICB7IC4uLmRlZmF1bHRBY3Rpb25zW2FjdGlvbi5uYW1lXSwgLi4uYWN0aW9uIH0gOlxyXG4gICAgICAgICAgYWN0aW9uKVxyXG4gICAgOiBPYmplY3Qua2V5cyhkZWZhdWx0QWN0aW9ucykubWFwKGFjdGlvbiA9PiBkZWZhdWx0QWN0aW9uc1thY3Rpb25dKTtcclxuXHJcbiAgICBpZiAodGhpcy5zdGF0ZS5mb2N1c1JlY3QpIHtcclxuICAgICAgYWN0aW9uc1RvVXNlID0gYWN0aW9uc1RvVXNlLmNvbmNhdChpbWFnZUVkaXRBY3Rpb25zKGNtZCA9PiB0aGlzLmV4ZWNJbWFnZUVkaXRBY3Rpb24oY21kKSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHtmb2N1c1JlY3R9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHtyZWFkT25seSwgcmVwb3J0TnVtQ2hhcnMsIG1heENoYXJzfSA9IHRoaXMucHJvcHM7XHJcblxyXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX0+XHJcbiAgICAgIHshcmVhZE9ubHkgJiYgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuYWN0aW9uYmFyfT5cclxuICAgICAgICB7YWN0aW9uc1RvVXNlLm1hcCgoYWN0aW9uLCBpZHgpID0+XHJcbiAgICAgICAgICA8YnV0dG9uIGtleT17aWR4fSBjbGFzc05hbWU9e2NsYXNzZXMuYnV0dG9ufVxyXG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogYWN0aW9uLmljb259fVxyXG4gICAgICAgICAgICB0aXRsZT17YWN0aW9uLnRpdGxlfVxyXG4gICAgICAgICAgICBvbk1vdXNlRG93bj17ZXY9PnthY3Rpb24ucmVzdWx0KGV2LCB0aGlzKX19XHJcbiAgICAgICAgICAgIG9uTW91c2VVcD17ZXY9PnNldFRpbWVvdXQoKCk9PnRoaXMuY29udGVudERpdi5mb2N1cygpLCAxMCl9XHJcbiAgICAgICAgICAvPil9XHJcbiAgICAgIDwvZGl2Pn1cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e3JlYWRPbmx5ID8gY2xhc3Nlcy5yZWFkb25seUNvbnRlbnQgOiBjbGFzc2VzLmNvbnRlbnR9IHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZScsIHRvcDogMCwgbGVmdDogMH19PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yXCJcclxuICAgICAgICAgIHJlZj17ZGl2ID0+IHRoaXMuY29udGVudERpdiA9IGRpdn1cclxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiB3YXNoSHRtbCh0aGlzLnByb3BzLmh0bWwpfX1cclxuICAgICAgICAgIGNvbnRlbnRFZGl0YWJsZT17IXJlYWRPbmx5fVxyXG4gICAgICAgICAgb25QYXN0ZT17ZXYgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWlzTmFOKG1heENoYXJzKSkge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHt0YXJnZXQsIGN1cnJlbnRUYXJnZXR9ID0gZXY7XHJcbiAgICAgICAgICAgICAgLy9jb25zdCB0ZXh0QmVpbmdPdmVyd3JpdHRlbiA9ICh0YXJnZXQgYXMgYW55KS5pbm5lclRleHQgfHwgXCJcIjtcclxuICAgICAgICAgICAgICBjb25zdCBlZGl0b3JUZXh0ID0gKGN1cnJlbnRUYXJnZXQgJiYgY3VycmVudFRhcmdldC5pbm5lclRleHQpIHx8IFwiXCI7XHJcbiAgICAgICAgICAgICAgY29uc3QgdGV4dEJlaW5nUGFzdGVkID0gZXYuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwidGV4dC9wbGFpblwiKSB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgIGlmIChlZGl0b3JUZXh0Lmxlbmd0aCArIHRleHRCZWluZ1Bhc3RlZC5sZW5ndGggPiBtYXhDaGFycykge1xyXG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH19XHJcbiAgICAgICAgICBvbktleVVwPXtyZXBvcnROdW1DaGFycyA/IGV2ID0+IHtcclxuICAgICAgICAgICAgY29uc3Qge2lubmVyVGV4dH0gPSAoZXYudGFyZ2V0IGFzIGFueSk7XHJcbiAgICAgICAgICAgIHJlcG9ydE51bUNoYXJzKGlubmVyVGV4dCA/IGlubmVyVGV4dC5sZW5ndGggOiAwKTtcclxuICAgICAgICAgIH0gOiBudWxsfVxyXG4gICAgICAgICAgb25LZXlQcmVzcz17IWlzTmFOKG1heENoYXJzKSA/IGV2ID0+IHtcclxuICAgICAgICAgICAgY29uc3Qge2lubmVyVGV4dH0gPSAoZXYudGFyZ2V0IGFzIGFueSk7XHJcbiAgICAgICAgICAgIGlmIChpbm5lclRleHQgJiYgaW5uZXJUZXh0Lmxlbmd0aCA+PSBtYXhDaGFycykge1xyXG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gOiBudWxsfVxyXG4gICAgICAgICAgb25JbnB1dD17ZXYgPT4gdGhpcy50cmlnZ2VyT25DaGFuZ2UoKGV2LnRhcmdldCBhcyBhbnkpLmlubmVySFRNTCl9XHJcbiAgICAgICAgICBvbktleURvd249e2V2ID0+IHtcclxuICAgICAgICAgICAgaWYgKHJlYWRPbmx5KSByZXR1cm47XHJcbiAgICAgICAgICAgIGlmIChyZXBvcnROdW1DaGFycyAmJiBldi5jdXJyZW50VGFyZ2V0KSB7XHJcbiAgICAgICAgICAgICAgcmVwb3J0TnVtQ2hhcnMoKGV2LmN1cnJlbnRUYXJnZXQuaW5uZXJUZXh0IHx8IFwiXCIpLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJLZXk6IFwiICsgZXYud2hpY2gpO1xyXG4gICAgICAgICAgICBpZiAoZXYud2hpY2ggPj0gMzUgJiYgZXYud2hpY2ggPD0gNDApIHsvLyBob21lL2VuZC91cC9kb3duL2xlZnQvcmlnaHRcclxuICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgLy8gUHJldmVudCBlbnRpcmUgcGFnZSBmcm9tIHNjcm9sbGluZz8/XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGV2LndoaWNoID09PSA5KSB7XHJcbiAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsvLyBUQUJcclxuICAgICAgICAgICAgICBpZiAoZXYuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgICAgIGV4ZWMoXCJvdXRkZW50XCIpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBleGVjKFwiaW5kZW50XCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgIChldi5rZXlDb2RlID09PSA4IHx8IGV2LmtleUNvZGUgPT09IDQ2KSAmJiAvLyBEZWxldGUgb3IgQmFjayBidXR0b25zXHJcbiAgICAgICAgICAgICAgdGhpcy5mb2N1c0VsZW0gJiYgdGhpcy5zdGF0ZS5mb2N1c1JlY3QpXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBpZiAodGhpcy5mb2N1c0VsZW0gJiYgdGhpcy5mb2N1c0VsZW0ucGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c0VsZW0ucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmZvY3VzRWxlbSk7IC8vIFJlbW92ZSBtYXJrZWQgaW1hZ2VcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgdGhpcy5mb2N1c0VsZW0gPSBudWxsO1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2ZvY3VzUmVjdDogbnVsbH0pO1xyXG4gICAgICAgICAgICAgIHRoaXMudHJpZ2dlck9uQ2hhbmdlKHRoaXMuY29udGVudERpdi5pbm5lckhUTUwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAge2ZvY3VzUmVjdCAmJiA8ZGl2XHJcbiAgICAgICAgICByZWY9e2RpdiA9PiB0aGlzLmZvY3VzUmVjdERpdiA9IGRpdn1cclxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3JlY3R9XHJcbiAgICAgICAgICBvbkJsdXI9e3RoaXMub25CbHVyfVxyXG4gICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICBvdXRsaW5lOiAwLFxyXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuICAgICAgICAgICAgdG9wOiB0aGlzLnN0YXRlLmZvY3VzUmVjdC50b3AsXHJcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMuc3RhdGUuZm9jdXNSZWN0LmxlZnQsXHJcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLnN0YXRlLmZvY3VzUmVjdC53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnN0YXRlLmZvY3VzUmVjdC5oZWlnaHR9fT5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcHVsXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgdG9wOjAsIGxlZnQ6MH19IC8+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnB1clwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIHRvcDowLCByaWdodDowfX0gLz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcGxyXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgYm90dG9tOjAsIHJpZ2h0OjB9fSAvPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNwb2ludCArIFwiIGZwbGxcIn0gc3R5bGU9e3twb3NpdGlvbjonYWJzb2x1dGUnLCBib3R0b206MCwgbGVmdDowfX0gLz5cclxuICAgICAgICA8L2Rpdj59XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCAocGFyZW50OiBIVE1MRWxlbWVudCwgY2hpbGQ6IEhUTUxFbGVtZW50KSA6IENsaWVudFJlY3Qge1xyXG4gIGNvbnN0IHBhcmVudFJlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgY29uc3QgY2hpbGRSZWN0ID0gY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgcmV0dXJuIHtcclxuICAgIHRvcDogY2hpbGRSZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wICsgcGFyZW50LnNjcm9sbFRvcCxcclxuICAgIGxlZnQ6IGNoaWxkUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0ICsgcGFyZW50LnNjcm9sbExlZnQsXHJcbiAgICBib3R0b206IGNoaWxkUmVjdC5ib3R0b20gLSBwYXJlbnRSZWN0LnRvcCArIHBhcmVudC5zY3JvbGxUb3AsXHJcbiAgICByaWdodDogY2hpbGRSZWN0LnJpZ2h0IC0gcGFyZW50UmVjdC5sZWZ0ICsgcGFyZW50LnNjcm9sbExlZnQsXHJcbiAgICB3aWR0aDogY2hpbGRSZWN0LndpZHRoLFxyXG4gICAgaGVpZ2h0OiBjaGlsZFJlY3QuaGVpZ2h0XHJcbiAgfTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbWFnZUVkaXRBY3Rpb25zKGNiKSB7XHJcbiAgcmV0dXJuIFt7XHJcbiAgICBuYW1lOiAnZmxvYXQtbGVmdCcsXHJcbiAgICBpY29uOiBgPGRpdiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlXCI+XHJcbiAgICAgIDxpIGNsYXNzPVwiZmEgZmEtYWxpZ24tcmlnaHRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgbGVmdDotNHB4O3RvcDowOyB0cmFuc2Zvcm06IHNjYWxlKDAuNSk7IHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgdG9wXCI+XHJcbiAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YCxcclxuICAgIHRpdGxlOiAnTMOldCBiaWxkZW4gZmx5dGEgdsOkbnN0ZXIgb20gdGV4dCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGNiKCdmbG9hdC1sZWZ0JylcclxuICB9LCB7XHJcbiAgICBuYW1lOiAnZmxvYXQtcmlnaHQnLFxyXG4gICAgaWNvbjogYDxkaXYgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZVwiPlxyXG4gICAgICA8aSBjbGFzcz1cImZhIGZhLWFsaWduLWxlZnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgcmlnaHQ6LTRweDt0b3A6MDsgdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCB0b3BcIj5cclxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBpY3R1cmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5gLFxyXG4gICAgdGl0bGU6ICdMw6V0IGJpbGRlbiBmbHl0YSBow7ZnZXIgb20gdGV4dCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGNiKCdmbG9hdC1yaWdodCcpXHJcbiAgfSwge1xyXG4gICAgbmFtZTogJ3VuZmxvYXQnLFxyXG4gICAgaWNvbjogYDxkaXYgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTtcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cclxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MFwiPiYjODI1NDs8L2Rpdj5cclxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowOmxlZnQ6MDt0cmFuc2Zvcm06IHNjYWxlKDAuNSk7IHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tXCI+XHJcbiAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowXCI+XzwvZGl2PlxyXG4gICAgPC9kaXY+YCxcclxuICAgIHRpdGxlOiAnUGxhY2VyYSBiaWxkZW4gcMOlIGVnZW4gcmFkJyxcclxuICAgIHJlc3VsdDogKCkgPT4gY2IoJ3VuZmxvYXQnKVxyXG4gIH1dO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBEb2N1bWVudCwgQ291cnNlLCBLbm93bGVkZ2VSZXF1aXJlbWVudCwgQ291cnNlTW9kdWxlLCBUYXNrLCBTb2Z0RG9jdW1lbnRBY2Nlc3MgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGZsYXR0ZW4sIEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcclxuaW1wb3J0IHsgV2l0aEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IGdldEVtYWlsRnJvbURvY0FjY2VzcyB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMoY291cnNlOiBDb3Vyc2UpIHtcclxuICBjb25zdCB1bmNvdmVyZWRSZXF1aXJlbWVudHMgPSBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzLnJlZHVjZSgocmVzdWx0LCBpdGVtKSA9PiB7XHJcbiAgICByZXN1bHRbaXRlbS5pZF0gPSBpdGVtO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9LCB7fSBhcyB7IFtpZDogc3RyaW5nXTogS25vd2xlZGdlUmVxdWlyZW1lbnQgfSk7XHJcblxyXG4gIGNvdXJzZS50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xyXG4gICAgdGFzay5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZm9yRWFjaChrciA9PiB7XHJcbiAgICAgIGRlbGV0ZSB1bmNvdmVyZWRSZXF1aXJlbWVudHNba3IuaWRdO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG4gIHJldHVybiBPYmplY3Qua2V5cyh1bmNvdmVyZWRSZXF1aXJlbWVudHMpLm1hcChpZCA9PiB1bmNvdmVyZWRSZXF1aXJlbWVudHNbaWRdKTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSZXFzUmVmZXJlbmNpbmdEb2Mge1xyXG4gIGtub3dsZWRnZVJlcXVpcmVtZW50czogQXJyYXk8e2lkOiBzdHJpbmd9PlxyXG4gIGFiaWxpdGllczogQXJyYXk8e2lkOiBzdHJpbmd9PlxyXG4gIGNlbnRyYWxDb250ZW50OiBBcnJheTx7aWQ6IHN0cmluZ30+XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJZHNOb3RDb3ZlcmVkQnlUYXNrcyhjb3Vyc2U6IENvdXJzZSkgOiB7W2lkOiBzdHJpbmddOiB0cnVlfSB7XHJcbiAgcmV0dXJuIGdldElkc05vdENvdmVyZWRCeVJlcVJlZmVyZW5jaW5nRG9jcyhcclxuICAgIFtjb3Vyc2UgYXMgV2l0aEdyYXBoczxDb3Vyc2UsIFwiYWJpbGl0aWVzXCIgfCBcImNlbnRyYWxDb250ZW50XCIgfCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiPl0sXHJcbiAgICBjb3Vyc2UudGFza3MgYXMgV2l0aEdyYXBoczxUYXNrLCBcImFiaWxpdGllc1wiIHwgXCJjZW50cmFsQ29udGVudFwiIHwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIj5bXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJZHNOb3RDb3ZlcmVkQnlSZXFSZWZlcmVuY2luZ0RvY3MoXHJcbiAgdGVtcGxhdGVzOiBSZXFzUmVmZXJlbmNpbmdEb2NbXSxcclxuICBkb2NzQmVpbmdDaGVja2VkOiBSZXFzUmVmZXJlbmNpbmdEb2NbXSkgOiB7W2lkOiBzdHJpbmddOiB0cnVlfVxyXG57XHJcbiAgY29uc3QgdW5jb3ZlcmVkSWRzID0ge307XHJcbiAgLy8gMS4gTWFyayB0aGUgaWRzIG9mIGFsbCBrbm93bGVkZ2UgcmVxdWlyZW1lbnRzLCBhYmlsaXRpZXMgYW5kIGNlbnRyYWwgY29udGVudCBmb3IgdGhpcyBjb3Vyc2U6XHJcbiAgdGVtcGxhdGVzLmZvckVhY2goY291cnNlID0+IHtcclxuICAgIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZm9yRWFjaChyID0+IHtcclxuICAgICAgdW5jb3ZlcmVkSWRzW3IuaWRdID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgY291cnNlLmFiaWxpdGllcy5mb3JFYWNoKGEgPT4ge1xyXG4gICAgICB1bmNvdmVyZWRJZHNbYS5pZF0gPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgICBjb3Vyc2UuY2VudHJhbENvbnRlbnQuZm9yRWFjaChjYyA9PiB7XHJcbiAgICAgIHVuY292ZXJlZElkc1tjYy5pZF0gPSB0cnVlO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbiAgLy8gMi4gTGlzdCBhbGwgdGFza3MgYW5kIHVubWFyayBhbGwgaWRzIHRoYXQgdGhleSByZWZlciB0b1xyXG4gIGRvY3NCZWluZ0NoZWNrZWQuZm9yRWFjaChkb2MgPT4ge1xyXG4gICAgZG9jLmtub3dsZWRnZVJlcXVpcmVtZW50cy5mb3JFYWNoKGtyID0+IHtcclxuICAgICAgZGVsZXRlIHVuY292ZXJlZElkc1trci5pZF07XHJcbiAgICB9KTtcclxuICAgIGRvYy5hYmlsaXRpZXMuZm9yRWFjaChhID0+IHtcclxuICAgICAgZGVsZXRlIHVuY292ZXJlZElkc1thLmlkXTtcclxuICAgIH0pO1xyXG4gICAgZG9jLmNlbnRyYWxDb250ZW50LmZvckVhY2goY2MgPT4ge1xyXG4gICAgICBkZWxldGUgdW5jb3ZlcmVkSWRzW2NjLmlkXTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIHJldHVybiB1bmNvdmVyZWRJZHM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzYW5pdHlDaGVjayAoY291cnNlOiBDb3Vyc2UpIHtcclxuICBmdW5jdGlvbiBoYXNEdXBsaWNhdGVUYXNrcyhjb3Vyc2U6IENvdXJzZSkge1xyXG4gICAgY29uc3QgdGFza0lkczoge1tpZDpzdHJpbmddOiBib29sZWFufSA9IHt9O1xyXG4gICAgcmV0dXJuIGZsYXR0ZW4oY291cnNlLm1vZHVsZXMubWFwKG1vZHVsZSA9PiBtb2R1bGUudGFza0lkcy5tYXAodGFza0lkID0+IHtcclxuICAgICAgaWYgKHRhc2tJZHNbdGFza0lkXSkge1xyXG4gICAgICAgIGNvbnN0IHRhc2sgPSBjb3Vyc2UudGFza3MuZmluZCh0ID0+IHQuaWQgPT09IHRhc2tJZCk7XHJcbiAgICAgICAgcmV0dXJuIExgU2FtbWEgdXBwZ2lmdCBmw7ZyZWtvbW1lciBmbGVyYSBnw6VuZ2VyOiBcIiR7dGFzay5uYW1lfVwiYDtcclxuICAgICAgfVxyXG4gICAgICB0YXNrSWRzW3Rhc2tJZF0gPSB0cnVlO1xyXG4gICAgfSkuZmlsdGVyKHggPT4geCkpKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRhc2tzV2l0aFNhbWVVcmwoY291cnNlOiBDb3Vyc2UpIHtcclxuICAgIGNvbnN0IHRhc2tVcmxzOiB7W3VybDpzdHJpbmddOiBUYXNrfSA9IHt9O1xyXG4gICAgcmV0dXJuIGNvdXJzZS50YXNrcy5tYXAodGFzayA9PiB7XHJcbiAgICAgIGlmICh0YXNrLnVybCkge1xyXG4gICAgICAgIGlmICh0YXNrVXJsc1t0YXNrLnVybF0pIHtcclxuICAgICAgICAgIHJldHVybiBMYFR2w6UgdXBwZ2lmdGVyIHBla2FyIHDDpSBzYW1tYSBVUkw6IFwiJHt0YXNrVXJsc1t0YXNrLnVybF0ubmFtZX1cIiBzYW10IFwiJHt0YXNrLm5hbWV9XCJgO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0YXNrVXJsc1t0YXNrLnVybF0gPSB0YXNrO1xyXG4gICAgICB9XHJcbiAgICB9KS5maWx0ZXIoeCA9PiB4KTsgIFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFzRW1wdHlNb2R1bGVOYW1lcyhjb3Vyc2U6IENvdXJzZSkge1xyXG4gICAgcmV0dXJuIGNvdXJzZS5tb2R1bGVzLnNvbWUgKG1vZHVsZSA9PiBtb2R1bGUubmFtZSA9PT0gXCJcIikgJiZcclxuICAgICAgTGBEZXQgZmlubnMgbWluc3QgZW4gbW9kdWwgdXRhbiBhbmdpdmV0IG5hbW5gO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFzRHVwbGljYXRlTW9kdWxlTmFtZXMoY291cnNlOiBDb3Vyc2UpIHtcclxuICAgIGNvbnN0IG1vZHVsZU5hbWVzOiB7W25hbWU6IHN0cmluZ106IHRydWV9ID0ge307XHJcbiAgICByZXR1cm4gY291cnNlLm1vZHVsZXMubWFwKG1vZHVsZSA9PiB7XHJcbiAgICAgIGlmIChtb2R1bGUubmFtZSAmJiBtb2R1bGVOYW1lc1ttb2R1bGUubmFtZV0pIHtcclxuICAgICAgICByZXR1cm4gTGBNb2R1bGVuIG1lZCBuYW1uICR7bW9kdWxlLm5hbWV9IGbDtnJla29tbWVyIGZsZXJhIGfDpW5nZXJgO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChtb2R1bGUubmFtZSkgbW9kdWxlTmFtZXNbbW9kdWxlLm5hbWVdID0gdHJ1ZTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBjb25zdCBjaGVja3MgPSBmbGF0dGVuKFtcclxuICAgIGhhc0R1cGxpY2F0ZVRhc2tzKGNvdXJzZSksXHJcbiAgICB0YXNrc1dpdGhTYW1lVXJsKGNvdXJzZSksXHJcbiAgICBoYXNFbXB0eU1vZHVsZU5hbWVzKGNvdXJzZSksXHJcbiAgICBoYXNEdXBsaWNhdGVNb2R1bGVOYW1lcyhjb3Vyc2UpXHJcbiAgXSk7XHJcblxyXG4gIHJldHVybiBjaGVja3MuZmlsdGVyIChyZXN1bHQgPT4gcmVzdWx0KTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXNrc1BlcklkIChjb3Vyc2U6IENvdXJzZSkge1xyXG4gIGNvbnN0IHJlc3VsdDoge1tpZDogc3RyaW5nXTogVGFza1tdfSA9IHt9O1xyXG4gIGZ1bmN0aW9uIGFkZChpZDogc3RyaW5nLCB0YXNrOiBUYXNrKSB7XHJcbiAgICBjb25zdCBsaXN0ID0gcmVzdWx0W2lkXSB8fCAocmVzdWx0W2lkXSA9IFtdKTtcclxuICAgIGxpc3QucHVzaCh0YXNrKTtcclxuICB9XHJcbiAgY291cnNlLnRhc2tzLmZvckVhY2godGFzayA9PiB7XHJcbiAgICB0YXNrLmFiaWxpdGllcy5mb3JFYWNoKGEgPT4gYWRkKGEuaWQsIHRhc2spKTtcclxuICAgIHRhc2suY2VudHJhbENvbnRlbnQuZm9yRWFjaChjID0+IGFkZChjLmlkLCB0YXNrKSk7XHJcbiAgICB0YXNrLmZ1dHVyZUFiaWxpdGllcy5mb3JFYWNoKGZhID0+IGFkZChmYSwgdGFzaykpO1xyXG4gIH0pO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8qKiBSZXR1cm5zIGFuIGFjY2VzcyBsaXN0IGZvciBhIGNvdXJzZSBpbiBhIGJhY2t3YXJkIGNvbXBhdGlibGUgd2F5ICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTb2Z0QWNjZXNzTGlzdCAoY291cnNlOiBDb3Vyc2UpOiBTb2Z0RG9jdW1lbnRBY2Nlc3NbXSB7XHJcbiAgY29uc3Qge3Jlc3BvbnNpYmxlVGVhY2hlcnN9ID0gY291cnNlO1xyXG4gIGNvbnN0IHJlc3VsdCA9IHJlc3BvbnNpYmxlVGVhY2hlcnMubWFwKGRhID0+KHtcclxuICAgIG5hbWU6IGRhLm5hbWUsXHJcbiAgICBlbWFpbDogZ2V0RW1haWxGcm9tRG9jQWNjZXNzKGRhKSxcclxuICAgIGFjY2VzczogZGEuYWNjZXNzIHx8ICdlZGl0J1xyXG4gIH0gYXMgU29mdERvY3VtZW50QWNjZXNzKSk7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4iLCJpbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvcXVlcnktc3RyaW5nJztcclxuaW1wb3J0IEZlYXR1cmVEZXNjcmlwdGlvbnMgZnJvbSAnLi9mZWF0dXJlLWZsYWdzLmpzb24nO1xyXG5pbXBvcnQgeyBjZmcgfSBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5cclxudHlwZSBGZWF0dXJlRmxhZ3MgPSB7cmVhZG9ubHkgW1AgaW4ga2V5b2YgdHlwZW9mIEZlYXR1cmVEZXNjcmlwdGlvbnNdOiBib29sZWFufTtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgRmVhdHVyZXMgZXh0ZW5kcyBGZWF0dXJlRmxhZ3Mge31cclxuXHJcbmV4cG9ydCBjbGFzcyBGZWF0dXJlcyB7XHJcbiAgcHJpdmF0ZSBfZmVhdHVyZXM6IEZlYXR1cmVGbGFncztcclxuICBwcml2YXRlIF9pbml0aWFsaXplZCA9IGZhbHNlO1xyXG5cclxuICBpbml0KCkge1xyXG4gICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSByZXR1cm47XHJcbiAgICBsZXQgdHVybmVkT25GZWF0dXJlcyA9IChjZmcuS0VEX0ZFQVRVUkVTIHx8IFwiXCIpLnNwbGl0KCcsJykubWFwKG5hbWUgPT4gbmFtZS50cmltKCkudG9Mb3dlckNhc2UoKSk7XHJcbiAgICBjb25zdCBxdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoLCB7dG9Mb3dlcjogdHJ1ZX0pO1xyXG5cclxuICAgIGlmIChxdWVyeS50ZXN0dmVyc2lvbikge1xyXG4gICAgICB0dXJuZWRPbkZlYXR1cmVzID0gW1wiKlwiXTtcclxuICAgIH1cclxuICAgIGlmIChxdWVyeS5mZWF0dXJlcykge1xyXG4gICAgICB0dXJuZWRPbkZlYXR1cmVzID0gcXVlcnkuZmVhdHVyZXNcclxuICAgICAgICAuc3BsaXQoJywnKVxyXG4gICAgICAgIC5tYXAoZmVhdHVyZSA9PiBmZWF0dXJlLnRyaW0oKS50b0xvd2VyQ2FzZSgpKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHR1cm5PbkFsbCA9IHR1cm5lZE9uRmVhdHVyZXMuaW5jbHVkZXMoJyonKTtcclxuICAgIHRoaXMuX2ZlYXR1cmVzID0ge30gYXMgRmVhdHVyZUZsYWdzO1xyXG4gICAgZm9yIChjb25zdCBmZWF0dXJlTmFtZSBvZiBPYmplY3Qua2V5cyhGZWF0dXJlRGVzY3JpcHRpb25zKSkge1xyXG4gICAgICB0aGlzLl9mZWF0dXJlc1tmZWF0dXJlTmFtZV0gPSB0dXJuT25BbGwgfHxcclxuICAgICAgICB0dXJuZWRPbkZlYXR1cmVzLmluY2x1ZGVzKGZlYXR1cmVOYW1lLnRvTG93ZXJDYXNlKCkpXHJcbiAgICB9XHJcbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7ICAgIFxyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgZm9yIChjb25zdCBmZWF0dXJlTmFtZSBvZiBPYmplY3Qua2V5cyhGZWF0dXJlRGVzY3JpcHRpb25zKSkge1xyXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgZmVhdHVyZU5hbWUsIHtcclxuICAgICAgICBnZXQoKSB7XHJcbiAgICAgICAgICBpZiAoIXRoaXMuX2luaXRpYWxpemVkKSB0aGlzLmluaXQoKTtcclxuICAgICAgICAgIHJldHVybiB0aGlzLl9mZWF0dXJlc1tmZWF0dXJlTmFtZV07XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQodmFsdWUpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmVhdHVyZSBmbGFncyBjYW5ub3QgYmUgc2V0IGhlcmUnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZmVhdHVyZXMgPSBuZXcgRmVhdHVyZXMoKTtcclxuIiwiaW1wb3J0IHtJbnRsUHJvdmlkZXIsIGFkZExvY2FsZURhdGF9IGZyb20gJ3JlYWN0LWludGwnO1xyXG5pbXBvcnQgbG9jYWxlX2VuIGZyb20gJ3JlYWN0LWludGwvbG9jYWxlLWRhdGEvZW4nO1xyXG5pbXBvcnQgbG9jYWxlX3N2IGZyb20gJ3JlYWN0LWludGwvbG9jYWxlLWRhdGEvc3YnO1xyXG5pbXBvcnQgbWVzc2FnZXNfc3YgZnJvbSBcIi4uLy4uL3RyYW5zbGF0aW9ucy9zdi5qc29uXCI7XHJcbmltcG9ydCBtZXNzYWdlc19lbiBmcm9tIFwiLi4vLi4vdHJhbnNsYXRpb25zL2VuLmpzb25cIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2ZnIGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbmV4cG9ydCBjb25zdCBzZXR1cEludGwgPSA8UCBleHRlbmRzIG9iamVjdD4oQ29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPFA+KSA9PlxyXG4gICAgY2xhc3MgX1NldHVwTGFuZ3VhZ2VJbnRsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFA+e1xyXG4gICAgICAgIG1lc3NhZ2VzIDogb2JqZWN0O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XHJcbiAgICAgICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICAgICAgYWRkTG9jYWxlRGF0YShbLi4ubG9jYWxlX2VuLC4uLmxvY2FsZV9zdl0pO1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0ge1xyXG4gICAgICAgICAgICAnc3YnOiBtZXNzYWdlc19zdixcclxuICAgICAgICAgICAgJ2VuJzogbWVzc2FnZXNfZW5cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbW9tZW50KCkubG9jYWxlKGNmZy5LRURfTE9DQUxFKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlbmRlcigpe1xyXG4gICAgICAgICAgICByZXR1cm4gPEludGxQcm92aWRlciBsb2NhbGU9e2NmZy5LRURfTE9DQUxFfSBtZXNzYWdlcz17dGhpcy5tZXNzYWdlc1tjZmcuS0VEX0xPQ0FMRV19PlxyXG4gICAgICAgICAgICAgICAgPENvbXBvbmVudCB7Li4udGhpcy5wcm9wcyBhcyBQfSAvPlxyXG4gICAgICAgICAgICA8L0ludGxQcm92aWRlcj5cclxuICAgICAgICB9XHJcbiAgICB9IiwiLy8gQ2xpZW50IGlkIGZvciBHb29nbGVXZWJDbGllbnRcclxuZXhwb3J0IGNvbnN0IFdlYkNsaWVudElkID0gXCI0MjE1NzIyNjIyNjktdTY4djVsZjVvOHNzNXQ2OGw4Z2txM3BmYXJoNmRia3YuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIjtcclxuXHJcbi8vIEdvb2dsZSBEcml2ZSBGaWxlIElkIHRvIGpzb24gZmlsZSB3aXRoIFRhbXBsYXRlcyBmb3IgQ291cnNlIEJ1aWxkZXIgKENsYXNzcm9vbSlcclxuZXhwb3J0IGNvbnN0IFRlbXBsYXRlc0ZpbGVJZCA9ICdodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFWN2V4RzZ2TjgzU3E4a2I2dXoxQjZEYVpEVk85ZUxjSmJQN1hGMHZMNGRZL2V4cG9ydD9mb3JtYXQ9dHh0JztcclxuIiwiaW1wb3J0IHsgVXNlclRhc2sgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXNrVHlwZSAodXNlclRhc2s6IFVzZXJUYXNrKSA6ICdjb3Vyc2VCdWlsZGVyVGFzaycgfCAnc2l0ZVZpc2lvblRhc2snIHwgJ3N1YmplY3RQbGFubmVyVGFzaycgfCAnY3VzdG9tVGFzaycge1xyXG4gIHJldHVybiB1c2VyVGFzay5jb3Vyc2UgJiYgdXNlclRhc2sudGFzayAmJiB1c2VyVGFzay5jb3Vyc2UubGVuZ3RoID4gMCAmJiB1c2VyVGFzay50YXNrLmxlbmd0aCA+IDAgP1xyXG4gICAgJ2NvdXJzZUJ1aWxkZXJUYXNrJyA6XHJcbiAgICB1c2VyVGFzay5zaXRlVmlzaW9uUGFnZUlkID9cclxuICAgICAgJ3NpdGVWaXNpb25UYXNrJyA6XHJcbiAgICAgICAgdXNlclRhc2suY291cnNlSW5mbyA/XHJcbiAgICAgICAgICAnc3ViamVjdFBsYW5uZXJUYXNrJyA6XHJcbiAgICAgICAgICAnY3VzdG9tVGFzayc7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBVc2VyVGFzaywgVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveCc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSAnLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xyXG5pbXBvcnQgeyBjb3Vyc2VOYW1lVG9Dc3NDbGFzcyB9IGZyb20gJy4uL2NhbGVuZGFyL2NvdXJzZS1uYW1lLXRvLWNzcy1jbGFzcyc7XHJcbmltcG9ydCB7IGdldFRhc2tUeXBlIH0gZnJvbSAnLi9nZXQtdGFzay10eXBlJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBWaXJ0dWFsTGVhcm5pbmdHb2FsIH0gZnJvbSAnLi9yZWZpbmVyJztcclxuaW1wb3J0IHsgRmVhdHVyZXMgfSBmcm9tICcuLi8uLi9mZWF0dXJlcyc7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdyZWFjdC1pbnRsJztcclxuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VyVGFza3NCb3hQcm9wcyB7XHJcbiAgY291cnNlTmFtZTogc3RyaW5nO1xyXG4gIGxlYXJuaW5nR29hbHM6IFZpcnR1YWxMZWFybmluZ0dvYWxbXSxcclxuICB2aWV3Q291cnNlVXJsOiBzdHJpbmc7XHJcbiAgb3BlbkNvdXJzZXM/OiB7IFtwYXRoOiBzdHJpbmddOiBib29sZWFuIH07XHJcbiAgc2V0SXNPcGVuPzogKGNvdXJzZU5hbWU6IHN0cmluZywgaXNPcGVuOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIHNldFRhc2tEb25lPzogKHRhc2s6IFVzZXJUYXNrLCBkb25lOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIHNldFN1YlRhc2tEb25lOiAodGFzazogVXNlclRhc2ssIHN1YlRhc2s6IFVzZXJTdWJUYXNrLCBkb25lOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIGFkZE93blRhc2s/OiAoY291cnNlTmFtZTogc3RyaW5nLCBsZWFybmluZ0dvYWxOYW1lOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgZWRpdFRhc2s6ICh0YXNrOiBVc2VyVGFzaykgPT4gdm9pZDtcclxuICBlZGl0U3ViVGFzazogKHRhc2s6IFVzZXJUYXNrLCBzdWJUYXNrOiBVc2VyU3ViVGFzaykgPT4gdm9pZDtcclxuICByZW1vdmVMZWFybmluZ0dvYWw6IChsZzogVmlydHVhbExlYXJuaW5nR29hbCk9PnZvaWQ7XHJcbiAgZGlzcGxheVByb2dyZXNzOiBib29sZWFuO1xyXG4gIHByb2dyZXNzRGF0YToge2NvbXBsZXRlZE51bWJlck9mVGFza3M6IG51bWJlciwgbnVtYmVyT2ZUYXNrczogbnVtYmVyfTtcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBVc2VyVGFza3NCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VXNlclRhc2tzQm94UHJvcHM+IHtcclxuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFVzZXJUYXNrc0JveFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge1xyXG4gICAgICBjb3Vyc2VOYW1lLFxyXG4gICAgICBsZWFybmluZ0dvYWxzLCBcclxuICAgICAgcHJvZ3Jlc3NEYXRhLFxyXG4gICAgICBkaXNwbGF5UHJvZ3Jlc3NcclxuICAgIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgaXNPcGVuID0gISF0aGlzLnByb3BzLm9wZW5Db3Vyc2VzW2NvdXJzZU5hbWVdO1xyXG4gICAgY29uc3QgZmVhdHVyZXMgPSBuZXcgRmVhdHVyZXMoKTtcclxuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcclxuXHJcbiAgICByZXR1cm4gPE9wZW5DbG9zZUJveFxyXG4gIHRpdGxlPXs8aDU+e2NvdXJzZU5hbWUgfHwgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ1c2VyVGFza3MuZ29hbHNcIiAgZGVmYXVsdE1lc3NhZ2U9XCJFZ25hIGzDpHJhbmRlbcOlbFwiLz4gfTwvaDU+fVxyXG4gICAgICBoZWFkZXJPcGVuPXtpc09wZW59XHJcbiAgICAgIGNsYXNzTmFtZT17Y291cnNlTmFtZSAmJiBjb3Vyc2VOYW1lVG9Dc3NDbGFzcygnd3AtY291cnNlLScsIGNvdXJzZU5hbWUpfVxyXG4gICAgICBvbk9wZW5DbG9zZT17YmVjYW1lT3BlbiA9PiB0aGlzLnByb3BzLnNldElzT3Blbihjb3Vyc2VOYW1lLCBiZWNhbWVPcGVuKX1cclxuICAgICAgZGlzcGxheVByb2dyZXNzPSB7ZGlzcGxheVByb2dyZXNzfSAgICAgICBcclxuICAgICAgcHJvZ3Jlc3NEYXRhID0ge3Byb2dyZXNzRGF0YX1cclxuICAgICAgPlxyXG4gICAgICB7bGVhcm5pbmdHb2Fscy5tYXAobGcgPT5cclxuICAgICAgICA8ZGl2IGtleT17bGcubmFtZX0gY2xhc3NOYW1lPVwibGVhcm5pbmdHb2FsQ29udGFpbmVyXCI+XHJcbiAgICAgICAgICB7bGcuc3RlcCAmJiA8ZGl2IGNsYXNzTmFtZT1cInN0ZXBJbmRpY2F0b3JcIj57bGcuc3RlcH08L2Rpdj59XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxUZXh0IGhvcml6b250YWxJdGVtIHRvcFwiPntsZy5uYW1lfTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XHJcbiAgICAgICAgICAgICAgJm5ic3A7PGFcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRyYXNoXCJcclxuICAgICAgICAgICAgICAgIGhyZWY9XCIjXCJcclxuICAgICAgICAgICAgICAgICB0aXRsZT17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDondXNlclRhc2tzLmRlbGV0ZUxlYXJuaW5nR29hbCcsIGRlZmF1bHRNZXNzYWdlOiAnVGEgYm9ydCBsw6RyYW5kZW3DpWxldCBvY2ggZGVzcyB1cHBnaWZ0ZXInfSl9XHJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtldj0+e1xyXG4gICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnJlbW92ZUxlYXJuaW5nR29hbChsZyk7XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXRyYXNoXCIgLz5cclxuICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxUYXNrc1wiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cclxuICAgICAgICAgICAgICB7bGcudGFza3MubWFwKHVzZXJUYXNrID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzV29ya2luZyA9IHVzZXJUYXNrLiRtZXRhID09PSAnYWRkaW5nJyB8fCB1c2VyVGFzay4kbWV0YSA9PT0gJ2RlbGV0aW5nJyB8fCB1c2VyVGFzay4kbWV0YSA9PT0gJ3VwZGF0aW5nJztcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrVHlwZSA9IGdldFRhc2tUeXBlKHVzZXJUYXNrKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGV4cGlyZWQgPSBtb21lbnQodXNlclRhc2suZGVhZGxpbmUpLnN0YXJ0T2YoJ2RheScpIDwgbW9tZW50KCkuc3RhcnRPZignZGF5Jyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxkaXYga2V5PXt1c2VyVGFzay5pZH0gc3R5bGU9e2lzV29ya2luZyA/IHsgb3BhY2l0eTogMC41IH0gOiB7fX0+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJjaGVja0JveFwiICsgKHVzZXJUYXNrLmRvbmUgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXYgPT4gIWlzV29ya2luZyAmJiB0aGlzLnByb3BzLnNldFRhc2tEb25lKHVzZXJUYXNrLCAhdXNlclRhc2suZG9uZSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIHt0YXNrVHlwZSA9PT0gJ2NvdXJzZUJ1aWxkZXJUYXNrJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2dldFRhc2tVcmwodXNlclRhc2ssIHRoaXMucHJvcHMudmlld0NvdXJzZVVybCl9Pnt1c2VyVGFzay5uYW1lfTwvYT4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgIHRhc2tUeXBlID09PSAnc3ViamVjdFBsYW5uZXJUYXNrJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2dldFN1YmplY3RQbGFubmVyVGFza1VybCh1c2VyVGFzayl9Pnt1c2VyVGFzay5uYW1lfTwvYT4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrVHlwZSA9PT0gJ3NpdGVWaXNpb25UYXNrJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17dXNlclRhc2sudXJsfT57dXNlclRhc2submFtZX08L2E+IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXshdXNlclRhc2sudXJsID8gXCJsaW5rLWxlc3NcIjogXCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e3VzZXJUYXNrLnVybCB8fCB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9eyh1c2VyVGFzay51cmwrJycpLnRvTG93ZXJDYXNlKCkuc3RhcnRzV2l0aChsb2NhdGlvbi5ob3N0LnRvTG93ZXJDYXNlKCkpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfc2VsZlwiIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfYmxhbmtcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA+e3VzZXJUYXNrLm5hbWV9PC9hPn1cclxuICAgICAgICAgICAgICAgICAgICAgIHt1c2VyVGFzay5kZWFkbGluZSAmJiA8ZGl2IGNsYXNzTmFtZT17XCJkYXRlU2V0XCIgKyAoZXhwaXJlZCA/ICcgZXhwaXJlZCcgOiAnJyl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT17bW9tZW50KHVzZXJUYXNrLmRlYWRsaW5lKS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpfSBjbGFzc05hbWU9XCJmYSBmYS1jYWxlbmRhclwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9Pnt9fT48L2k+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgdGFza0VkaXRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLmVkaXRUYXNrKHVzZXJUYXNrKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PiBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICB7dXNlclRhc2suc3ViVGFza3MgJiYgPGRpdiBjbGFzc05hbWU9XCJzdWJ0YXNrc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIHt1c2VyVGFzay5zdWJUYXNrcy5tYXAoc3ViVGFzayA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e3N1YlRhc2suaWR9ID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiY2hlY2tCb3hcIiArIChzdWJUYXNrLmRvbmUgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2V2ID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpc1dvcmtpbmcgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXRTdWJUYXNrRG9uZSh1c2VyVGFzaywgc3ViVGFzaywgIXN1YlRhc2suZG9uZSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17c3ViVGFzay51cmwgfHwgdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PXsodXNlclRhc2sudXJsKycnKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgobG9jYXRpb24uaG9zdC50b0xvd2VyQ2FzZSgpKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9zZWxmXCIgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfYmxhbmtcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlRhc2sudXJsID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsaW5rLWxlc3MnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfT57c3ViVGFzay5uYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHRhc2tFZGl0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLmVkaXRTdWJUYXNrKHVzZXJUYXNrLCBzdWJUYXNrKX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pfVxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlYXJuaW5nR29hbFRvb2xzXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGFkZE93bkdvYWxcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMuYWRkT3duVGFzayh0aGlzLnByb3BzLmNvdXJzZU5hbWUsIGxnLm5hbWUpfT5cclxuICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiA8Rm9ybWF0dGVkTWVzc2FnZSBpZD0ndXNlclRhc2tzLmFkZExlYXJuaW5nR29hbCcgZGVmYXVsdE1lc3NhZ2U9J0VnZXQgYXJiZXRzbcOlbCcvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICl9XHJcbiAgICA8L09wZW5DbG9zZUJveD5cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRhc2tVcmwodXNlclRhc2s6IFVzZXJUYXNrLCB2aWV3Q291cnNlVXJsOiBzdHJpbmcpIHtcclxuICBpZiAodXNlclRhc2suY291cnNlICYmIHVzZXJUYXNrLmNvdXJzZS5sZW5ndGggPiAwICYmIHVzZXJUYXNrLnRhc2sgJiYgdXNlclRhc2sudGFzay5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCBjb3Vyc2VVcmwgPSBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSh2aWV3Q291cnNlVXJsLCB7IGNvdXJzZUlkOiB1c2VyVGFzay5jb3Vyc2VbMF0uaWQgfSk7XHJcbiAgICByZXR1cm4gYCR7Y291cnNlVXJsfSMvdGFzay8ke3VzZXJUYXNrLnRhc2tbMF0uaWR9YDtcclxuICB9XHJcbiAgcmV0dXJuIHVzZXJUYXNrLnVybDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3ViamVjdFBsYW5uZXJUYXNrVXJsKHVzZXJUYXNrOiBVc2VyVGFzaykge1xyXG4gIGlmICh1c2VyVGFzay5jb3Vyc2VJbmZvICYmIHVzZXJUYXNrLnRhc2sgJiYgdXNlclRhc2sudGFzay5sZW5ndGggPiAwKSB7XHJcbiAgICBjb25zdCB7c2Nob29sLCBjb3Vyc2UsIHRhYiB9ID0gdXNlclRhc2suY291cnNlSW5mbztcclxuICAgIGNvbnN0IGNvdXJzZVVybCA9IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5KGNmZy5LRURfU1VCSkVDVF9QTEFOTkVSX1VSTCwge30pO1xyXG4gICAgcmV0dXJuIGAke2NvdXJzZVVybH0jLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlfS90YWJzLyR7dGFifS90YXNrcy8ke3VzZXJUYXNrLnRhc2tbMF0uaWR9YDtcclxuICB9XHJcbiAgcmV0dXJuIHVzZXJUYXNrLnVybDtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAncmVhY3QtaW50bCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGxlYXJuaW5nR29hbD86IHN0cmluZztcclxuICBvblNhdmU6IChsZWFybmluZ0dvYWw6IHN0cmluZykgPT4gdm9pZDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBsZWFybmluZ0dvYWw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkZEN1c3RvbUdvYWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcylcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGxlYXJuaW5nR29hbDogcHJvcHMubGVhcm5pbmdHb2FsIHx8ICcnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7bGVhcm5pbmdHb2FsfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7b25TYXZlfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gPGRpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgICAgPGgyPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuYWRkTGVhcm5pbmdHb2FsVGl0bGVcIiBkZWZhdWx0TWVzc2FnZT1cIkzDpGdnIHRpbGwgZWdldCBsw6RyYW5kZW3DpWxcIi8+PC9oMj5cclxuICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuYWRkTGVhcm5pbmdHb2FsXCIgZGVmYXVsdE1lc3NhZ2U9XCJNw6VsXCIvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB0YWJJbmRleD17MX0gc2l6ZT17NTB9IGF1dG9Gb2N1c1xyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2xlYXJuaW5nR29hbH1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtlID0+IHRoaXMuc2V0U3RhdGUoe2xlYXJuaW5nR29hbDogZS50YXJnZXQudmFsdWV9KX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxiciAvPjwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XHJcbiAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCJcclxuICAgICAgICAgIG9uQ2xpY2s9eygpPT5vblNhdmUobGVhcm5pbmdHb2FsKX0+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZVwiIGRlZmF1bHRNZXNzYWdlPVwic2F2ZVwiLz48L2J1dHRvbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVGV4dElucHV0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dC1pbnB1dCc7XHJcbmltcG9ydCB7IFRleHRBcmVhRm9ybUZpZWxkIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dGFyZWEnO1xyXG5pbXBvcnQge0xhbmd1YWdlQ29udGV4dH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XHJcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAncmVhY3QtaW50bCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGlzVGFzazogYm9vbGVhblxyXG4gIG9uU2F2ZTogKG5hbWU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgdXJsOiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBZGRDdXN0b21UYXNrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpXHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBuYW1lOiAnJyxcclxuICAgICAgZGVzY3JpcHRpb246ICcnLFxyXG4gICAgICB1cmw6ICcnXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uLCB1cmwgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7IGlzVGFzaywgb25TYXZlIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3Qge2ludGx9ID0gdGhpcy5jb250ZXh0O1xyXG4gICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICA8aDI+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjdXN0b21UYXNrLmFkZFdvcmtHb2FsVGl0bGVcIiBkZWZhdWx0TWVzc2FnZT1cIkzDpGdnIHRpbGwgZWdldCBhcmJldHNtw6VsXCIvPjwvaDI+XHJcbiAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5uYW1lTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTogJ05hbW4nfSl9XHJcbiAgICAgICAgICBpZD1cIkFkZEN1c3RvbVRhc2s6bmFtZVwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY3VzdG9tVGFzay5lbnRlck5hbWVQbGhkJywgZGVmYXVsdE1lc3NhZ2U6ICdBbmdlIG5hbW4uLi4nfSl9XHJcbiAgICAgICAgICB2YWx1ZT17bmFtZX1cclxuICAgICAgICAgIGF1dG9Gb2N1c1xyXG4gICAgICAgICAgb25DaGFuZ2U9e25hbWUgPT4gdGhpcy5zZXRTdGF0ZSh7bmFtZX0pfSAvPlxyXG5cclxuICAgICAgICA8VGV4dEFyZWFGb3JtRmllbGRcclxuICAgICAgICAgIHJvd3M9ezd9XHJcbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5kZXNjcmlwdGlvbkxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6J0Jlc2tyaXZuaW5nJ30pfVxyXG4gICAgICAgICAgaWQ9XCJBZGRDdXN0b21UYXNrOmRlc2NyaXB0aW9uXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOidjb21tb24uYWRkRGVzY3JpcHRpb25QbGhkJywgZGVmYXVsdE1lc3NhZ2U6IFwiTMOkZ2cgdGlsbCBlbiBiZXNrcml2bmluZy4uLlwifSl9XHJcbiAgICAgICAgICB2YWx1ZT17ZGVzY3JpcHRpb259XHJcbiAgICAgICAgICBvbkNoYW5nZT17ZGVzY3JpcHRpb249PnRoaXMuc2V0U3RhdGUoe2Rlc2NyaXB0aW9ufSl9IC8+XHJcblxyXG4gICAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY29tbW9uLmxpbmtMYWJlbCcsIGRlZmF1bHRNZXNzYWdlOidMw6Ruayd9KX0gXHJcbiAgICAgICAgICBpZD1cIkFkZEN1c3RvbVRhc2s6dXJsXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiaHR0cDovL3d3dy4uLlwiXHJcbiAgICAgICAgICB2YWx1ZT17dXJsfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e3VybCA9PiB0aGlzLnNldFN0YXRlKHt1cmx9KX0gLz5cclxuXHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XHJcbiAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCJcclxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2F2ZShuYW1lLCBkZXNjcmlwdGlvbiwgdXJsKX0+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZVwiIGRlZmF1bHRNZXNzYWdlPVwiU3BhcmFcIi8+PC9idXR0b24+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRleHRJbnB1dCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHQtaW5wdXQnO1xyXG5pbXBvcnQgeyBUZXh0QXJlYUZvcm1GaWVsZCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHRhcmVhJztcclxuaW1wb3J0IHsgVXNlclRhc2ssIFVzZXJTdWJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBVc2VyVGFza3NSZXBvIH0gZnJvbSAnLi4vLi4vcmVwb3MvdXNlci10YXNrcy1yZXBvJztcclxuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdyZWFjdC1pbnRsJztcclxuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICAvLyBFZGl0IE1vZGVcclxuICBtb2RlOiAnYWRkJztcclxuICB1c2VyVGFzazogVXNlclRhc2s7XHJcbiAgY2xvc2VEaWFsb2c7XHJcbiAgdXNlclRhc2tzUmVwbzogVXNlclRhc2tzUmVwb1xyXG59IHwge1xyXG4gIG1vZGU6ICdlZGl0JztcclxuICB1c2VyVGFzazogVXNlclRhc2s7XHJcbiAgc3ViVGFzazogVXNlclN1YlRhc2s7XHJcbiAgY2xvc2VEaWFsb2c6ICgpPT52b2lkO1xyXG4gIHVzZXJUYXNrc1JlcG86IFVzZXJUYXNrc1JlcG9cclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICB1cmw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkZE9yRWRpdFN1YlRhc2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgaWYgKHByb3BzLm1vZGUgPT09ICdlZGl0Jykge1xyXG4gICAgICBjb25zdCB7c3ViVGFza30gPSBwcm9wcztcclxuICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICBuYW1lOiBzdWJUYXNrLm5hbWUgfHwgJycsXHJcbiAgICAgICAgZGVzY3JpcHRpb246IHN1YlRhc2suZGVzY3JpcHRpb24gfHwgJycsXHJcbiAgICAgICAgdXJsOiBzdWJUYXNrLnVybCB8fCAnJ1xyXG4gICAgICB9O1xyXG4gICAgfSBlbHNlIHsgIFxyXG4gICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgIG5hbWU6ICcnLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcclxuICAgICAgICB1cmw6ICcnXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzYXZlKCkge1xyXG4gICAgLy8gVXBkYXRlIHJlcG86XHJcbiAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcclxuICAgIGNvbnN0IHt1c2VyVGFzaywgY2xvc2VEaWFsb2csIHVzZXJUYXNrc1JlcG99ID0gcHJvcHM7XHJcbiAgICBjb25zdCB7bmFtZSwgZGVzY3JpcHRpb24sIHVybH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgaWYgKHByb3BzLm1vZGUgPT09ICdlZGl0Jykge1xyXG4gICAgICAvLyBFZGl0IGV4aXN0aW5nOlxyXG4gICAgICB1c2VyVGFza3NSZXBvLnVwZGF0ZShbdXNlclRhc2tdLCB1dCA9PiB7XHJcbiAgICAgICAgY29uc3Qge3N1YlRhc2tzfSA9IHV0O1xyXG4gICAgICAgIGlmIChzdWJUYXNrcykge1xyXG4gICAgICAgICAgdXQuc3ViVGFza3MgPSBzdWJUYXNrcy5tYXAoc3QgPT5cclxuICAgICAgICAgICAgc3QuaWQgPT09IHByb3BzLnN1YlRhc2suaWQgPyB7Li4uc3QsIG5hbWUsIGRlc2NyaXB0aW9uLCB1cmx9IDpcclxuICAgICAgICAgICAgey4uLnN0fVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gQ3JlYXRlIG5ldyB0YXNrXHJcbiAgICAgIGNvbnN0IG5ld1N1YlRhc2sgPSB7XHJcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICBuYW1lLFxyXG4gICAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICAgIHVybFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gVXBkYXRlIHJlcG86XHJcbiAgICAgIHVzZXJUYXNrc1JlcG8udXBkYXRlKFt1c2VyVGFza10sIHV0ID0+IHtcclxuICAgICAgICBpZiAoIXV0LnN1YlRhc2tzKSB7XHJcbiAgICAgICAgICB1dC5zdWJUYXNrcyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dC5zdWJUYXNrcyA9IHV0LnN1YlRhc2tzLmNvbmNhdChuZXdTdWJUYXNrKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2xvc2UgZGlhbG9nXHJcbiAgICBjbG9zZURpYWxvZygpOyAgICBcclxuICB9XHJcblxyXG4gIGRlbGV0ZSgpIHtcclxuICAgIC8vIFVwZGF0ZSByZXBvOlxyXG4gICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BzOyAgXHJcbiAgICBpZiAocHJvcHMubW9kZSAhPT0gJ2VkaXQnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBvbmx5IGRlbGV0ZSBpbiBlZGl0IG1vZGVcIik7XHJcbiAgICB9XHJcbiAgICBwcm9wcy51c2VyVGFza3NSZXBvLnVwZGF0ZShbcHJvcHMudXNlclRhc2tdLCB1dCA9PiB7XHJcbiAgICAgIGlmICh1dC5zdWJUYXNrcykge1xyXG4gICAgICAgIHV0LnN1YlRhc2tzID0gdXQuc3ViVGFza3MuZmlsdGVyKHQgPT4gdC5pZCAhPT0gcHJvcHMuc3ViVGFzay5pZCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIENsb3NlIGRpYWxvZzpcclxuICAgIHByb3BzLmNsb3NlRGlhbG9nKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7bmFtZSwgZGVzY3JpcHRpb24sIHVybH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qge3Byb3BzfSA9IHRoaXM7XHJcbiAgICBjb25zdCBpc0VkaXRNb2RlID0gcHJvcHMubW9kZSA9PT0gJ2VkaXQnO1xyXG4gICAgY29uc3Qge2ludGx9ID0gdGhpcy5jb250ZXh0O1xyXG4gICAgcmV0dXJuIDw+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICA8aDI+e2lzRWRpdE1vZGUgPyA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImFkZGVkaXRzdWJ0YXNrLmVkaXRTdWJ0YXNrXCIgZGVmYXVsdE1lc3NhZ2U9J1JlZGlnZXJhIHVuZGVydXBwZ2lmdCcvPiA6IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiYWRkZWRpdHN1YnRhc2suYWRkU3VidGFza1wiIGRlZmF1bHRNZXNzYWdlPSdMw6RnZyB0aWxsIHVuZGVydXBwZ2lmdCcvPiB9PC9oMj5cclxuICAgICAgICA8aHIgLz5cclxuICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonYWRkZWRpdHN1YnRhc2submFtZUxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6J1VuZGVydXBwZ2lmdGVucyBuYW1uJ30pfVxyXG4gICAgICAgICAgaWQ9XCJBZGRVc2VyU3ViVGFzazpuYW1lXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCJcclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm5hbWV9XHJcbiAgICAgICAgICBvbkNoYW5nZT17bmFtZSA9PiB0aGlzLnNldFN0YXRlKHtuYW1lfSl9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPFRleHRBcmVhRm9ybUZpZWxkXHJcbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5kZXNjcmlwdGlvbkxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6J0Jlc2tyaXZuaW5nJ30pfVxyXG4gICAgICAgICAgaWQ9XCJBZGRVc2VyU3ViVGFzazpkZXNjcmlwdGlvblwiXHJcbiAgICAgICAgICByb3dzPXs3fVxyXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIlxyXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZGVzY3JpcHRpb259XHJcbiAgICAgICAgICBvbkNoYW5nZT17ZGVzY3JpcHRpb24gPT4gdGhpcy5zZXRTdGF0ZSh7ZGVzY3JpcHRpb259KX1cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICA8VGV4dElucHV0XHJcbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5saW5rTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTonTMOkbmsnfSl9XHJcbiAgICAgICAgICBpZD1cIkFkZFVzZXJTdWJUYXNrOnVybFwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlwiXHJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS51cmx9XHJcbiAgICAgICAgICBvbkNoYW5nZT17dXJsID0+IHRoaXMuc2V0U3RhdGUoe3VybH0pfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgIDxiciAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxyXG4gICAgICAgIHtcclxuICAgICAgICAgIHByb3BzLm1vZGUgPT09ICdlZGl0JyAmJiA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiXHJcbiAgICAgICAgICBvbkNsaWNrPXtldiA9PiB0aGlzLmRlbGV0ZSgpfT5cclxuICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiYWRkZWRpdHN1YnRhc2suZGVsZXRlU3VidGFza1wiIGRlZmF1bHRNZXNzYWdlPVwiVGEgYm9ydCB1bmRlcnVwcGdpZnRcIi8+PC9idXR0b24+fVxyXG4gICAgICAgIDxidXR0b25cclxuICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiXHJcbiAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5zYXZlKCl9PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVcIiBkZWZhdWx0TWVzc2FnZT1cIlNwYXJhXCIvPjwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvPlxyXG4gIH1cclxufVxyXG5cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBVc2VyVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFJlbmFtZWFibGVUZXh0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3JlbmFtZWFibGUtdGV4dCc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IGdldFRhc2tUeXBlIH0gZnJvbSAnLi9nZXQtdGFzay10eXBlJztcclxuaW1wb3J0IFJlYWN0RGF0ZVBpY2tlciwgeyBSZWFjdERhdGVQaWNrZXJQcm9wcyB9IGZyb20gJ3JlYWN0LWRhdGVwaWNrZXInO1xyXG5pbXBvcnQgJy4uLy4uL2dsb2JhbHMvbW9tZW50LXN2LWxvY2FsZSc7XHJcbmltcG9ydCB7VGV4dElucHV0fSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC10ZXh0LWlucHV0JztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBGb3JtRmllbGQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZCc7XHJcbmltcG9ydCB7IEFkZE9yRWRpdFN1YlRhc2sgfSBmcm9tICcuL2FkZC1vci1lZGl0LXN1Yi10YXNrJztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcclxuaW1wb3J0IHsgVXNlclRhc2tzUmVwbyB9IGZyb20gJy4uLy4uL3JlcG9zL3VzZXItdGFza3MtcmVwbyc7XHJcbmltcG9ydCB7IFRleHRBcmVhRm9ybUZpZWxkIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dGFyZWEnO1xyXG5pbXBvcnQgeyBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCB7TGFuZ3VhZ2VDb250ZXh0fSBmcm9tIFwiLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dFwiXHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHVzZXJUYXNrOiBVc2VyVGFzaztcclxuICBvblVwZGF0ZTogKHVwZGF0ZXI6ICh1c2VyVGFzazogVXNlclRhc2spID0+IHZvaWQpID0+IHZvaWQ7XHJcbiAgb25EZWxldGU6ICh1c2VyVGFza0lkOiBzdHJpbmcpID0+IHZvaWQ7XHJcbiAgb3BlbkRpYWxvZzogKGRpYWxvZykgPT4gdm9pZDtcclxuICBjbG9zZURpYWxvZzogKCk9PnZvaWQ7XHJcbiAgdXNlclRhc2tzUmVwbzogVXNlclRhc2tzUmVwb1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIHVzZXJUYXNrOiBVc2VyVGFzaztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgZGVhZGxpbmU/OiBzdHJpbmc7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbiAgc3ViVGFza3M/OiBVc2VyU3ViVGFza1tdO1xyXG4gIHNob3dDYWxlbmRhcj86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFZGl0VXNlclRhc2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBkYXRlUGlja2VyOiBhbnk7XHJcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHVzZXJUYXNrOiBwcm9wcy51c2VyVGFzayxcclxuICAgICAgbmFtZTogcHJvcHMudXNlclRhc2submFtZSxcclxuICAgICAgZGVzY3JpcHRpb246IHByb3BzLnVzZXJUYXNrLmRlc2NyaXB0aW9uLFxyXG4gICAgICB1cmw6IHByb3BzLnVzZXJUYXNrLnVybCxcclxuICAgICAgZGVhZGxpbmU6IHByb3BzLnVzZXJUYXNrLmRlYWRsaW5lLFxyXG4gICAgICBzdWJUYXNrczogcHJvcHMudXNlclRhc2suc3ViVGFza3NcclxuICAgIH1cclxuICAgIHRoaXMub25Vc2VyVGFza3NDaGFuZ2VkID0gdGhpcy5vblVzZXJUYXNrc0NoYW5nZWQuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5wcm9wcy51c2VyVGFza3NSZXBvLnN1YnNjcmliZSh0aGlzLm9uVXNlclRhc2tzQ2hhbmdlZCk7XHJcbiAgfVxyXG5cclxuICBvblVzZXJUYXNrc0NoYW5nZWQodXNlclRhc2tzOiBVc2VyVGFza1tdKSB7XHJcbiAgICBjb25zdCBteVVzZXJUYXNrID0gdXNlclRhc2tzLmZpbmQodXQgPT4gdXQuaWQgPT09IHRoaXMucHJvcHMudXNlclRhc2suaWQpO1xyXG4gICAgaWYgKCFteVVzZXJUYXNrKSB7XHJcbiAgICAgIHRoaXMucHJvcHMuY2xvc2VEaWFsb2coKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIHVzZXJUYXNrOiBteVVzZXJUYXNrLFxyXG4gICAgICBzdWJUYXNrczogbXlVc2VyVGFzay5zdWJUYXNrc1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgIHRoaXMucHJvcHMudXNlclRhc2tzUmVwby51bnN1YnNjcmliZSh0aGlzLm9uVXNlclRhc2tzQ2hhbmdlZCk7XHJcbiAgfVxyXG5cclxuICBpc01vZGlmaWVkKCkge1xyXG4gICAgLy8gRG9uJ3QgY291bnQgc3VidGFzayBjaGFuZ2VzISBUaGV5IGxpdmUgdGhlaXIgb3duIGxpZmUgYW5kIGlzIG1haW50YWluZWRcclxuICAgIC8vIGluIGFkZC1vci1lZGl0LXN1Yi10YXNrLnRzeC4gUmVhc29uOiBVc2VyIHdvdWxkIGV4cGVjdCBhZGRlZCAvZWRpdGVkIHN1YnRhc2tzXHJcbiAgICAvLyB0byBiZSBwZXJzaXN0ZWQgcmlnaHQgYXdheS4gTWF5IGNsaWNrIGF3YXkgdGhpcyBkaWFsb2cuXHJcbiAgICAvLyBBbHNvIHJlYXNvbjogQ2FuIGludm9rZSB0aGF0IGRpYWxvZyBieSBpdHNlbGYgZnJvbSBvdGhlciBjb21wb25lbnRzLiBGcm9tIFdlZWtQbGFubmVyXHJcbiAgICAvLyB3aGVuIGNsaWNraW5nIHRoZSBzdWJ0YXNrIGZvciBleGFtcGxlIVxyXG5cclxuICAgIGNvbnN0IHtkZWFkbGluZSwgZGVzY3JpcHRpb24sIG5hbWUsIHVybCwgdXNlclRhc2t9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIGRlYWRsaW5lICE9PSB1c2VyVGFzay5kZWFkbGluZSB8fFxyXG4gICAgICBkZXNjcmlwdGlvbiAhPT0gdXNlclRhc2suZGVzY3JpcHRpb24gfHxcclxuICAgICAgbmFtZSAhPT0gdXNlclRhc2submFtZSB8fFxyXG4gICAgICB1cmwgIT09IHVzZXJUYXNrLnVybCk7XHJcbiAgfVxyXG5cclxuICBhZGRTdWJUYXNrKCk6IGFueSB7XHJcbiAgICB0aGlzLnByb3BzLm9wZW5EaWFsb2coPEFkZE9yRWRpdFN1YlRhc2tcclxuICAgICAgbW9kZT1cImFkZFwiXHJcbiAgICAgIHVzZXJUYXNrPXt0aGlzLnN0YXRlLnVzZXJUYXNrfVxyXG4gICAgICBjbG9zZURpYWxvZz17dGhpcy5wcm9wcy5jbG9zZURpYWxvZ31cclxuICAgICAgdXNlclRhc2tzUmVwbz17dGhpcy5wcm9wcy51c2VyVGFza3NSZXBvfVxyXG4gICAgLz4pO1xyXG4gIH1cclxuXHJcbiAgZWRpdFN1YlRhc2soc3ViVGFzazogVXNlclN1YlRhc2spIHtcclxuICAgIHRoaXMucHJvcHMub3BlbkRpYWxvZyg8QWRkT3JFZGl0U3ViVGFza1xyXG4gICAgICBtb2RlPVwiZWRpdFwiXHJcbiAgICAgIHN1YlRhc2s9e3N1YlRhc2t9XHJcbiAgICAgIHVzZXJUYXNrPXt0aGlzLnN0YXRlLnVzZXJUYXNrfVxyXG4gICAgICBjbG9zZURpYWxvZz17dGhpcy5wcm9wcy5jbG9zZURpYWxvZ31cclxuICAgICAgdXNlclRhc2tzUmVwbz17dGhpcy5wcm9wcy51c2VyVGFza3NSZXBvfVxyXG4gICAgLz4pO1xyXG4gIH1cclxuICBcclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uLCB1cmwsIGRlYWRsaW5lLCBzdWJUYXNrcywgc2hvd0NhbGVuZGFyLCB1c2VyVGFzayB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHsgaWQsIGNvdXJzZU5hbWUgfSA9IHVzZXJUYXNrO1xyXG4gICAgY29uc3QgeyBvblVwZGF0ZSwgb25EZWxldGUgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCBpc01vZGlmaWVkID0gdGhpcy5pc01vZGlmaWVkKCk7XHJcblxyXG4gICAgY29uc3QgdGFza1R5cGUgPSBnZXRUYXNrVHlwZSh1c2VyVGFzayk7XHJcbiAgICBjb25zdCBpc0N1c3RvbVRhc2sgPSB0YXNrVHlwZSA9PT0gJ2N1c3RvbVRhc2snO1xyXG4gICAgY29uc3QgZXhwaXJlZCA9IG1vbWVudCh1c2VyVGFzay5kZWFkbGluZSkgPCBtb21lbnQoKTtcclxuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcclxuXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJlZGl0VGFza0RpYWxvZyBzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICA8aDI+e2lzQ3VzdG9tVGFzayA/IFxyXG4gICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5lZGl0V29ya0dvYWxzXCIgZGVmYXVsdE1lc3NhZ2U9J1JlZGlnZXJhIGFyYmV0c23DpWwnLz4gOiBcclxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRhc2suZWRpdFRhc2tcIiBkZWZhdWx0TWVzc2FnZT0nUmVkaWdlcmEgdXBwZ2lmdCcvPn1cclxuICAgICAgPC9oMj5cclxuICAgICAgPGhyIC8+XHJcbiAgICAgIDxUZXh0SW5wdXRcclxuICAgICAgICBhdXRvRm9jdXNcclxuICAgICAgICBsYWJlbD17aXNDdXN0b21UYXNrID8gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogJ3Rhc2sudGFyZ2V0TmFtZUxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6ICdBcmJldHNtw6VsZXRzIG5hbW4nfSkgIDogaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogJ3Rhc2sudGFza05hbWVMYWJlbCcsIGRlZmF1bHRNZXNzYWdlOiAnVXBwZ2lmdGVucyBuYW1uJ30pfVxyXG4gICAgICAgIGlkPVwiRWRpdFVzZXJUYXNrOm5hbWVcIlxyXG4gICAgICAgIHBsYWNlaG9sZGVyPXtpc0N1c3RvbVRhc2sgPyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay53aGF0U2hvdWxkWW91RG9QbGhkJywgZGVmYXVsdE1lc3NhZ2U6ICdWYWQgc2thIGR1IGfDtnJhPyd9KSA6IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLmVudGVyVGFza05hbWVQbGhkJywgZGVmYXVsdE1lc3NhZ2U6ICdBbmdlIHVwcGdpZnRlbnMgbmFtbi4uLid9KSB9XHJcbiAgICAgICAgdmFsdWU9e25hbWV9XHJcbiAgICAgICAgb25DaGFuZ2U9e25hbWUgPT4gdGhpcy5zZXRTdGF0ZSh7bmFtZX0pfSAvPlxyXG4gICAgICBcclxuICAgICAge2lzQ3VzdG9tVGFzayAmJiA8PlxyXG4gICAgICAgIDxUZXh0QXJlYUZvcm1GaWVsZFxyXG4gICAgICAgICAgcm93cz17NX1cclxuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDogJ2NvbW1vbi5kZXNjcmlwdGlvbkxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6ICdCZXNrcml2bmluZyd9KX1cclxuICAgICAgICAgIGlkPVwiRWRpdFVzZXJUYXNrOmRlc2NyaXB0aW9uXCJcclxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAnY29tbW9uLmFkZERlc2NyaXB0aW9uUGxoZCcsIGRlZmF1bHRNZXNzYWdlOiAnTMOkZ2cgdGlsbCBlbiBiZXNrcml2bmluZy4uLid9KX1cclxuICAgICAgICAgIHZhbHVlPXtkZXNjcmlwdGlvbn1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtkZXNjcmlwdGlvbj0+dGhpcy5zZXRTdGF0ZSh7ZGVzY3JpcHRpb259KX0gLz5cclxuXHJcbiAgICAgICAgPFRleHRJbnB1dFxyXG4gICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5saW5rTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTpcIkzDpG5rXCJ9KX1cclxuICAgICAgICAgIGlkPVwiRWR1dFVzZXJUYXNrOnVybFwiXHJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cImh0dHAocyk6Ly8uLi5cIlxyXG4gICAgICAgICAgdmFsdWU9e3VybH1cclxuICAgICAgICAgIG9uQ2hhbmdlPXt1cmwgPT4gdGhpcy5zZXRTdGF0ZSh7dXJsfSl9ID5cclxuXHJcbiAgICAgICAgPC9UZXh0SW5wdXQ+PC8+fVxyXG5cclxuICAgICAgICA8Rm9ybUZpZWxkIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay5zZXREZWFkbGluZScsIGRlZmF1bHRNZXNzYWdlOiAnQW5nZSBkZWFkbGluZSd9KX0+XHJcbiAgICAgICAgICB7KGRlYWRsaW5lIHx8IHNob3dDYWxlbmRhcikgP1xyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAgPFJlYWN0RGF0ZVBpY2tlciByZWY9e2VsZW0gPT4gdGhpcy5kYXRlUGlja2VyID0gZWxlbX1cclxuICAgICAgICAgICAgICAgICAgaWQ9XCJFZGl0VXNlclRhc2s6ZGVhZGxpbmVcIlxyXG4gICAgICAgICAgICAgICAgICBuZXh0TW9udGhCdXR0b25MYWJlbD1cIlwiIFxyXG4gICAgICAgICAgICAgICAgICBwcmV2aW91c01vbnRoQnV0dG9uTGFiZWw9XCJcIiBcclxuICAgICAgICAgICAgICAgICAgc2hvd1dlZWtOdW1iZXJzPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZD17ZGVhZGxpbmUgJiYgbW9tZW50KGRlYWRsaW5lKS50b0RhdGUoKX1cclxuICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzPXtzaG93Q2FsZW5kYXJ9XHJcbiAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQ9XCJ5eXl5LU1NLWRkXCJcclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtleHBpcmVkID8gXCJleHBpcmVkXCIgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAgICAgIGxvY2FsZT17aW50bC5sb2NhbGV9XHJcbiAgICAgICAgICAgICAgICAgIHBvcHBlclBsYWNlbWVudD17aXNDdXN0b21UYXNrID8gXCJ0b3Atc3RhcnRcIiA6IFwiYm90dG9tLXN0YXJ0XCJ9XHJcbiAgICAgICAgICAgICAgICAgIG9uQmx1cj17KCk9PnRoaXMuc2V0U3RhdGUoe3Nob3dDYWxlbmRhcjogZmFsc2V9KX1cclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3ZhbHVlPT57XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICBkZWFkbGluZTogdmFsdWUgJiYgbW9tZW50KHZhbHVlKS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgc2hvd0NhbGVuZGFyOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZGVsZXRlRGF0ZVwiIGhyZWY9XCIjXCIgdGl0bGU9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLnJlbW92ZURlYWRsaW5lJywgZGVmYXVsdE1lc3NhZ2U6ICdUYSBib3J0IGRlYWRsaW5lJ30pfSBvbkNsaWNrPXtldj0+e1xyXG4gICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtkZWFkbGluZTogbnVsbCwgc2hvd0NhbGVuZGFyOiBmYWxzZX0pO1xyXG4gICAgICAgICAgICAgICAgfX0+PC9hPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj4gOlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcFwiIHJlZj17KCk9Pnt0aGlzLmRhdGVQaWNrZXIgPSBudWxsfX0+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXtldiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGVQaWNrZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGVQaWNrZXIuc2V0T3Blbih0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICBzaG93Q2FsZW5kYXI6IHRydWVcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNhbGVuZGFyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5zZXREZWFkbGluZUxhYmVsXCIgZGVmYXVsdE1lc3NhZ2U9XCJBbmdlIGRlYWRsaW5lLi4uXCIvPlxyXG4gICAgICAgICAgICAgIDwvYT4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgPC9Gb3JtRmllbGQ+XHJcbiAgICAgIDxGb3JtRmllbGQgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLnN1YlRhc2tzJywgZGVmYXVsdE1lc3NhZ2U6ICdVbmRlcnVwcGdpZnRlcid9KX0gPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVhcm5pbmdHb2FsVGFza3NcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxyXG5cclxuICAgICAgICAgICAgICB7c3ViVGFza3MgJiYgc3ViVGFza3MubWFwKHN1YlRhc2sgPT4gPGRpdiBrZXk9e3N1YlRhc2suaWR9IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+PGFcclxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9PnRoaXMuZWRpdFN1YlRhc2soc3ViVGFzayl9XHJcbiAgICAgICAgICAgICAgICAgIGhyZWY9XCIjXCI+e3N1YlRhc2submFtZX08L2E+PC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+KX1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3BcIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBpZD1cIkVkaXRVc2VyVGFzazphZGRTdWJUYXNrXCIgY2xhc3NOYW1lPVwiYnRuXCJcclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5hZGRTdWJUYXNrKCl9PlxyXG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5hZGRTdWJ0YXNrXCIgZGVmYXVsdE1lc3NhZ2U9XCJMw6RnZyB0aWxsIHVuZGVydXBwZ2lmdFwiLz5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9Gb3JtRmllbGQ+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGl2aWRlciBsYXJnZVwiIC8+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEJ1dHRvbiB0b3BcIj5cclxuICAgICAgICAgIDxidXR0b24gdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tZGVmYXVsdFwiXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpPT57XHJcbiAgICAgICAgICAgICAgaXNNb2RpZmllZCA/IG9uVXBkYXRlKHVzZXJUYXNrID0+IHtcclxuICAgICAgICAgICAgICAgIHVzZXJUYXNrLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICAgICAgdXNlclRhc2suZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIHVzZXJUYXNrLnVybCA9IHVybDtcclxuICAgICAgICAgICAgICAgIHVzZXJUYXNrLmRlYWRsaW5lID0gZGVhZGxpbmU7XHJcbiAgICAgICAgICAgICAgfSkgOiB0aGlzLnByb3BzLmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgICAgIH19PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVcIiBkZWZhdWx0TWVzc2FnZT1cIlNwYXJhXCIvPiBcclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsQnV0dG9uIHRvcFwiPlxyXG4gICAgICAgICAgPGJ1dHRvbiB0YWJJbmRleD17MX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuXCJcclxuICAgICAgICAgICAgb25DbGljaz17KCk9PntcclxuICAgICAgICAgICAgICB0aGlzLnByb3BzLmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgICAgIH19PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLmNhbmNlbFwiIGRlZmF1bHRNZXNzYWdlPVwiQXZicnl0XCIvPjwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29uZmlybSB0b3AgcHVsbC1yaWdodFwiPlxyXG4gICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICB0YWJJbmRleD17MX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nXCJcclxuICAgICAgICAgICAgb25DbGljaz17KCk9PntcclxuICAgICAgICAgICAgICBvbkRlbGV0ZShpZCk7XHJcbiAgICAgICAgICAgIH19Pntpc0N1c3RvbVRhc2sgP1xyXG4gICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5yZW1vdmVXb3JrR29hbHNcIiBkZWZhdWx0TWVzc2FnZT1cIlRhIGJvcnQgYXJiZXRzbcOlbFwiLz4gOlxyXG4gICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5yZW1vdmVUaGlzVGFza1wiIGRlZmF1bHRNZXNzYWdlPVwiVGEgYm9ydCBkZW4gaMOkciB1cHBnaWZ0ZW5cIi8+XHJcbiAgICAgICAgICB9PC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICBcclxuICAgICAgey8qPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiBvbkNsaWNrPXtldiA9PiBvbkRlbGV0ZShpZCl9PlxyXG4gICAgICAgIHtMYFRhIGJvcnQgYXJiZXRzbcOlbGB9PC9kaXY+XHJcbiAgICAgIHtpc01vZGlmaWVkICYmXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiXHJcbiAgICAgICAgICB0YWJJbmRleD17MH1cclxuICAgICAgICAgIG9uQ2xpY2s9eygpPT5vblVwZGF0ZSh1c2VyVGFzayA9PiB7XHJcbiAgICAgICAgICAgIHVzZXJUYXNrLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICB1c2VyVGFzay5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICB1c2VyVGFzay51cmwgPSB1cmw7XHJcbiAgICAgICAgICB9KX0+IFNwYXJhPC9kaXY+fSovfVxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gICAgcGVyY2VudGFnZTogbnVtYmVyO1xyXG4gICAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xyXG4gICAgcHJvZ3Jlc3NDb2xvcj86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFByb2dyZXNzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XHJcbiAgICBwdWJsaWMgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcclxuICAgICAgICBwZXJjZW50YWdlOiAwLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjRjFGNUY0XCIsXHJcbiAgICAgICAgcHJvZ3Jlc3NDb2xvcjogXCIjM2RiY2EyXCIsXHJcbiAgICB9O1xyXG5cclxuICAgIHJlbmRlcigpe1xyXG4gICAgICAgIGNvbnN0IHtwZXJjZW50YWdlLCBiYWNrZ3JvdW5kQ29sb3IsIHByb2dyZXNzQ29sb3J9ID0gdGhpcy5wcm9wcztcclxuICAgICAgICBjb25zdCByb3VuZGVkUGVyY2VudGFnZSA9IE1hdGgucm91bmQocGVyY2VudGFnZSk7XHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJwcm9ncmVzcy1jaGFydFwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjI1XCI+XHJcbiAgICAgICAgICAgIDxyZWN0IGZpbGw9e2JhY2tncm91bmRDb2xvcn0gIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiByeD1cIjRcIi8+XHJcbiAgICAgICAgICAgIDxyZWN0IGNsYXNzTmFtZT1cImZpbGxcIiBmaWxsPXtwcm9ncmVzc0NvbG9yfSB3aWR0aD17YCR7cm91bmRlZFBlcmNlbnRhZ2V9JWB9IGhlaWdodD1cIjEwMCVcIiByeD1cIjRcIi8+XHJcbiAgICAgICAgICAgIDx0ZXh0IGNsYXNzTmFtZT1cImZpbGxlZC10ZXh0XCIgdGV4dEFuY2hvcj1cIm1pZGRsZVwiIHg9XCI1MCVcIiB5PVwiNTAlXCIgZHk9XCIuM2VtXCI+e2Ake3JvdW5kZWRQZXJjZW50YWdlfSVgfTwvdGV4dD5cdFxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICApXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFVzZXJUYXNrc0JveCB9IGZyb20gJy4vdXNlci10YXNrcy1ib3gnO1xyXG5pbXBvcnQgeyBVc2VyVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGNyZWF0ZVVVSUQsIEh0dHBFcnJvciB9IGZyb20gXCJrZWRiYWNrZW5kL2NsaWVudFwiO1xyXG5pbXBvcnQgeyByZWZpbmUsIFZpcnR1YWxMZWFybmluZ0dvYWwgfSBmcm9tICcuL3JlZmluZXInO1xyXG5pbXBvcnQgeyBFbnYgfSBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBMLCBjb21wYXJlUHJvcCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG4vL2ltcG9ydCB7IEN1c3RvbUdvYWwgfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcbmltcG9ydCB7IFRTT04gfSBmcm9tICcuLi8uLi91dGlscy90c29uJztcclxuaW1wb3J0IHsgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSB9IGZyb20gJy4vd2Vla3BsYW5uZXItcGVyc2lzdGVkLXN0YXRlJztcclxuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtJztcclxuaW1wb3J0IHsgRGlhbG9ncyB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9kaWFsb2dzJztcclxuaW1wb3J0IHsgQWRkQ3VzdG9tR29hbCB9IGZyb20gJy4vYWRkLWN1c3RvbS1nb2FsJztcclxuaW1wb3J0IHsgQWRkQ3VzdG9tVGFzayB9IGZyb20gJy4vYWRkLWN1c3RvbS10YXNrJztcclxuaW1wb3J0IHsgRWRpdFVzZXJUYXNrIH0gZnJvbSAnLi9lZGl0LXVzZXItdGFzayc7XHJcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICcuLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zcGlubmVyJztcclxuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94JztcclxuaW1wb3J0IHsgUGVuZGluZ0pvYiB9IGZyb20gJy4uLy4uL3V0aWxzL3BlbmRpbmctam9iJztcclxuaW1wb3J0IHsgQWRkT3JFZGl0U3ViVGFzayB9IGZyb20gJy4vYWRkLW9yLWVkaXQtc3ViLXRhc2snO1xyXG5pbXBvcnQgeyBnZXRBZGp1c3RlZFdlZWssIEtFRFdlZWssIGdldE5leHRXZWVrRGF0ZSwgZ2V0UHJldldlZWtEYXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Vla3V0aWwnO1xyXG5pbXBvcnQgeyBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCB7TGFuZ3VhZ2VDb250ZXh0fSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcclxuaW1wb3J0IHsgUHJvZ3Jlc3MgfSBmcm9tICcuLi9jaGFydHMvcHJvZ3Jlc3MnO1xyXG5pbXBvcnQge2dldFdlZWtwbGFubmVyUHJvZ3Jlc3NEYXRhfSBmcm9tICcuLi9jaGFydHMvY2hhcnRzLXV0aWxzJ1xyXG5pbXBvcnQgeyBmZWF0dXJlcyB9IGZyb20gJy4uLy4uL2ZlYXR1cmVzJztcclxuXHJcbmNvbnN0IE1BWF9TVFJBVEVHWV9MRU5HVEggPSAxNjM4NDtcclxuY29uc3QgTUFYX0FTU0VTU01FTlRfTEVOR1RIID0gMTYzODQ7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcclxuICBlbnY6IEVudjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICB3ZWVrRGF0ZTogbnVtYmVyO1xyXG4gIGRpYWxvZ3M6IGFueVtdO1xyXG4gIHVzZXJUYXNrczogVXNlclRhc2tbXTtcclxuICBvcGVuQ291cnNlczogeyBbcGF0aDogc3RyaW5nXTogYm9vbGVhbiB9XHJcbiAgc3RyYXRlZ3k/OiBzdHJpbmc7XHJcbiAgYXNzZXNzbWVudD86IHN0cmluZztcclxuICB3ZWVrVGV4dHNVVDogVXNlclRhc2sgfCBudWxsO1xyXG4gIHNhdmluZzogYm9vbGVhbjtcclxuICBpc0xvYWRpbmc6IGJvb2xlYW47XHJcbiAgaXNDb3B5aW5nVGFza3M6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBXZWVrUGxhbm5lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcclxuICB3ZWVrVGV4dHNTYXZpbmdKb2I6IFBlbmRpbmdKb2I7XHJcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHVzZXJUYXNrczogW10sXHJcbiAgICAgIHdlZWtEYXRlOiBEYXRlLm5vdygpLFxyXG4gICAgICBvcGVuQ291cnNlczoge30sXHJcbiAgICAgIGRpYWxvZ3M6IFtdLFxyXG4gICAgICBzYXZpbmc6IGZhbHNlLFxyXG4gICAgICB3ZWVrVGV4dHNVVDogbnVsbCxcclxuICAgICAgaXNMb2FkaW5nOiB0cnVlLFxyXG4gICAgICBpc0NvcHlpbmdUYXNrczogZmFsc2VcclxuICAgIH1cclxuICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYiA9IG5ldyBQZW5kaW5nSm9iKCgpPT50aGlzLnNhdmVXZWVrVGV4dHMoKSk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uc3Vic2NyaWJlKHRoaXMub25DaGFuZ2UpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnVuc3Vic2NyaWJlKHRoaXMub25DaGFuZ2UpO1xyXG4gICAgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2Iuc3RvcCgpO1xyXG4gIH1cclxuXHJcbiAgb25DaGFuZ2UodXNlclRhc2tzOiBVc2VyVGFza1tdLCBwZXJzaXN0ZWQ6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUsIHdlZWtUZXh0c1VUOiBVc2VyVGFzaykge1xyXG4gICAgY29uc3QgbmV3U3RhdGUgOiBQYXJ0aWFsPFN0YXRlPiA9IHtcclxuICAgICAgdXNlclRhc2tzLFxyXG4gICAgICB3ZWVrRGF0ZTogcGVyc2lzdGVkLndlZWtEYXRlLFxyXG4gICAgICBvcGVuQ291cnNlczogcGVyc2lzdGVkLm9wZW5Db3Vyc2VzLFxyXG4gICAgICB3ZWVrVGV4dHNVVCxcclxuICAgICAgaXNMb2FkaW5nOiBmYWxzZVxyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLnN0YXRlLndlZWtUZXh0c1VUIHx8ICh3ZWVrVGV4dHNVVC5kYXRlVGltZSAhPT0gdGhpcy5zdGF0ZS53ZWVrVGV4dHNVVC5kYXRlVGltZSkpIHtcclxuICAgICAgLy8gQ2hhbmdpbmcgd2Vlay4gUmVzZXQgdG8gbmV3IHdlZWsncyB2YWx1ZXNcclxuICAgICAgbmV3U3RhdGUuc3RyYXRlZ3kgPSB3ZWVrVGV4dHNVVC53ZWVrVGV4dHMuc3RyYXRlZ3k7XHJcbiAgICAgIG5ld1N0YXRlLmFzc2Vzc21lbnQgPSB3ZWVrVGV4dHNVVC53ZWVrVGV4dHMuYXNzZXNzbWVudDtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUgYXMgYW55KTsgLy8gUmVhY3QncyB1c2Ugb2YgUGljayBpbnN0ZWFkIG9mIFBhcnRpYWwgbWFrZXMgdGhpbmdzIGNvbXBsZXggaGVyZS5cclxuICB9XHJcblxyXG4gIGlzV2Vla1RleHRzRWRpdGVkKCkge1xyXG4gICAgY29uc3QgeyBzdHJhdGVneSwgYXNzZXNzbWVudCwgd2Vla1RleHRzVVQgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICByZXR1cm4gISF3ZWVrVGV4dHNVVCAmJiAoc3RyYXRlZ3kgIT09IHdlZWtUZXh0c1VULndlZWtUZXh0cy5zdHJhdGVneSB8fCBhc3Nlc3NtZW50ICE9PSB3ZWVrVGV4dHNVVC53ZWVrVGV4dHMuYXNzZXNzbWVudCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIHNhdmVXZWVrVGV4dHMoKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIlNhdmluZyB0ZXh0cy4uLlwiKTtcclxuICAgIGNvbnN0IHsgc3RyYXRlZ3ksIGFzc2Vzc21lbnQsIHdlZWtUZXh0c1VUIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgaWYgKHRoaXMuaXNXZWVrVGV4dHNFZGl0ZWQoKSkge1xyXG4gICAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnVwc2VydCh3ZWVrVGV4dHNVVCwgdXQgPT4ge1xyXG4gICAgICAgIHV0LndlZWtUZXh0cyA9IHsgc3RyYXRlZ3ksIGFzc2Vzc21lbnQgfTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcmV2V2VlaygpIHtcclxuICAgIC8vdGhpcy5zYXZlV2Vla1RleHRzKCk7IFxyXG4gICAgdmFyIHByZXZXZWVrT2JqID0gZ2V0UHJldldlZWtEYXRlKG1vbWVudCh0aGlzLnN0YXRlLndlZWtEYXRlKSk7XHJcbiAgICB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLmNoYW5nZVdlZWsocHJldldlZWtPYmoubmV4dERhdGUsIHByZXZXZWVrT2JqLmFkanVzdGVkKTtcclxuICB9XHJcblxyXG4gIG5leHRXZWVrKCkge1xyXG4gICAgLy90aGlzLnNhdmVXZWVrVGV4dHMoKTtcclxuICAgIHZhciBuZXh0V2Vla09iaiA9IGdldE5leHRXZWVrRGF0ZShtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkpO1xyXG4gICAgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby5jaGFuZ2VXZWVrKG5leHRXZWVrT2JqLm5leHREYXRlLCBuZXh0V2Vla09iai5hZGp1c3RlZCk7XHJcbiAgfVxyXG5cclxuICBvcGVuRGlhbG9nKGRpYWxvZykge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRpYWxvZ3M6IFsuLi50aGlzLnN0YXRlLmRpYWxvZ3MsIGRpYWxvZ10gfSk7XHJcbiAgfVxyXG5cclxuICBvcGVuQWRkR29hbERpYWxvZygpIHtcclxuICAgIHRoaXMub3BlbkRpYWxvZyg8QWRkQ3VzdG9tR29hbFxyXG4gICAgICBvblNhdmU9e2FzeW5jIChsZWFybmluZ0dvYWw6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmICghbGVhcm5pbmdHb2FsKSB0aHJvdyBuZXcgRXJyb3IgKHRoaXMuY29udGV4dC5pbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOid3ZWVrcGxhbm5lci5lbXB0eUxlYXJuaW5nR29hbEVycicsIGRlZmF1bHRNZXNzYWdlOiAnTMOkcmFuZGVtw6VsZXQga2FuIGludGUgdmFyYSB0b210J30pKTtcclxuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuc2F2aW5nKSB7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2F2aW5nOiB0cnVlIH0pO1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGRDdXN0b21Hb2FsKGxlYXJuaW5nR29hbCk7XHJcbiAgICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2F2aW5nOiBmYWxzZSB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuY2xvc2VEaWFsb2coKTtcclxuICAgICAgICB9XHJcbiAgICAgIH19IC8+KTtcclxuICB9XHJcblxyXG4gIG9wZW5BZGRPd25UYXNrRGlhbG9nKGNvdXJzZU5hbWU6IHN0cmluZywgbGVhcm5pbmdHb2FsTmFtZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLm9wZW5EaWFsb2coPEFkZEN1c3RvbVRhc2tcclxuICAgICAgaXNUYXNrPXshY291cnNlTmFtZX1cclxuICAgICAgb25TYXZlPXthc3luYyAobmFtZTogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCB1cmw6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGlmICghbmFtZSkgdGhyb3cgbmV3IEVycm9yICh0aGlzLmNvbnRleHQuaW50bC5mb3JtYXRNZXNzYWdlKHtpZDond2Vla3BsYW5uZXIubmFtZUNhbm5vdEJlRW1wdHknLCBkZWZhdWx0TWVzc2FnZTogJ05hbW5ldCBrYW4gaW50ZSB2YXJhIHRvbXQnfSkpO1xyXG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5zYXZpbmcpIHtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzYXZpbmc6IHRydWUgfSk7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmFkZEN1c3RvbVRhc2soY291cnNlTmFtZSwgbGVhcm5pbmdHb2FsTmFtZSwgbmFtZSwgZGVzY3JpcHRpb24sIHVybCk7XHJcbiAgICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2F2aW5nOiBmYWxzZSB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuY2xvc2VEaWFsb2coKTtcclxuICAgICAgICB9XHJcbiAgICAgIH19IC8+KTtcclxuICB9XHJcblxyXG4gIGVkaXRUYXNrKHVzZXJUYXNrOiBVc2VyVGFzaykge1xyXG4gICAgdGhpcy5vcGVuRGlhbG9nKDxFZGl0VXNlclRhc2tcclxuICAgICAgdXNlclRhc2tzUmVwbz17dGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwb31cclxuICAgICAgdXNlclRhc2s9e3VzZXJUYXNrfVxyXG4gICAgICBvblVwZGF0ZT17YXN5bmMgKHVwZGF0ZXI6ICh1dDogVXNlclRhc2spID0+IHZvaWQpID0+IHtcclxuICAgICAgICBjb25zdCB0ZXN0ID0gey4uLnVzZXJUYXNrfTtcclxuICAgICAgICB1cGRhdGVyKHRlc3QpO1xyXG4gICAgICAgIGlmICghdGVzdC5uYW1lKSB0aHJvdyBuZXcgRXJyb3IgKHRoaXMuY29udGV4dC5pbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOid3ZWVrcGxhbm5lci5uYW1lTXVzdE5vdEJlRW1wdHknLCBkZWZhdWx0TWVzc2FnZTogJ05hbW5ldCBmw6VyIGludGUgdmFyYSB0b210J30pKTtcclxuICAgICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby51cGRhdGUoW3VzZXJUYXNrXSwgdXBkYXRlcik7XHJcbiAgICAgIH19XHJcbiAgICAgIG9uRGVsZXRlPXthc3luYyBpZCA9PiB7XHJcbiAgICAgICAgdGhpcy5jbG9zZURpYWxvZygpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uZGVsZXRlKFtpZF0pO1xyXG4gICAgICB9fVxyXG4gICAgICBvcGVuRGlhbG9nPXtkaWFsb2c9PnRoaXMub3BlbkRpYWxvZyhkaWFsb2cpfVxyXG4gICAgICBjbG9zZURpYWxvZz17KCk9PnRoaXMuY2xvc2VEaWFsb2coKX1cclxuICAgIC8+KTtcclxuICB9XHJcblxyXG4gIGVkaXRTdWJUYXNrKHVzZXJUYXNrOiBVc2VyVGFzaywgc3ViVGFzazogVXNlclN1YlRhc2spIHtcclxuICAgIHRoaXMub3BlbkRpYWxvZyg8QWRkT3JFZGl0U3ViVGFza1xyXG4gICAgICB1c2VyVGFza3NSZXBvPXt0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvfVxyXG4gICAgICBtb2RlPVwiZWRpdFwiXHJcbiAgICAgIHVzZXJUYXNrPXt1c2VyVGFza31cclxuICAgICAgc3ViVGFzaz17c3ViVGFza31cclxuICAgICAgY2xvc2VEaWFsb2c9eygpPT50aGlzLmNsb3NlRGlhbG9nKCl9XHJcbiAgICAvPik7XHJcbiAgfVxyXG5cclxuICBjbG9zZURpYWxvZygpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBkaWFsb2dzOiB0aGlzLnN0YXRlLmRpYWxvZ3Muc2xpY2UoMCwgdGhpcy5zdGF0ZS5kaWFsb2dzLmxlbmd0aCAtIDEpIH0pO1xyXG4gIH1cclxuXHJcblxyXG5cclxuICBhc3luYyBhZGRDdXN0b21Hb2FsKGxlYXJuaW5nR29hbDogc3RyaW5nKSB7XHJcbiAgICBsZXQgbGF0ZXN0VGltZVN0YW1wID0gTWF0aC5tYXguYXBwbHkoXHJcbiAgICAgIE1hdGgubWF4LFxyXG4gICAgICBbdGhpcy5zdGF0ZS53ZWVrRGF0ZV0uY29uY2F0KHRoaXMuc3RhdGUudXNlclRhc2tzLm1hcCh0ID0+IHQuZGF0ZVRpbWUpKSk7XHJcblxyXG4gICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby5pbnNlcnQoW3tcclxuICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgbGVhcm5pbmdHb2FsLFxyXG4gICAgICBkYXRlVGltZTogbGF0ZXN0VGltZVN0YW1wICsgMjAwMFxyXG4gICAgfV0pO1xyXG5cclxuICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uc2V0V2Vla1BsYW5uZXJCb3hPcGVuKFwiXCIsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcmVtb3ZlTGVhcm5pbmdHb2FsKGxlYXJuaW5nR29hbDogVmlydHVhbExlYXJuaW5nR29hbCkge1xyXG4gICAgaWYgKGxlYXJuaW5nR29hbC50YXNrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGlmICghY29uZmlybSh0aGlzLmNvbnRleHQuaW50bC5mb3JtYXRNZXNzYWdlKHtpZDond2Vla3BsYW5uZXIuY29uZmlybVJlbW92ZUxlYXJuaW5nT2JqZWN0aXZlcycsIGRlZmF1bHRNZXNzYWdlOiAnVGEgYm9ydCBsw6RyYW5kZW3DpWwgc2FtdCB7bGVhcm5pbmdHb2Fsc051bWJlcn0gdXBwZ2lmdGVyPyd9LCB7bGVhcm5pbmdHb2Fsc051bWJlcjogbGVhcm5pbmdHb2FsLnRhc2tzLmxlbmd0aH0pKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby5kZWxldGUobGVhcm5pbmdHb2FsLmFsbFRhc2tzLm1hcCh0ID0+IHQuaWQpKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGFkZEN1c3RvbVRhc2soY291cnNlTmFtZTogc3RyaW5nLCBsZWFybmluZ0dvYWw6IHN0cmluZywgbmFtZTogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCB1cmw6IHN0cmluZykge1xyXG4gICAgbGV0IGxhdGVzdFRpbWVTdGFtcCA9IE1hdGgubWF4LmFwcGx5KFxyXG4gICAgICBNYXRoLm1heCxcclxuICAgICAgW3RoaXMuc3RhdGUud2Vla0RhdGVdLmNvbmNhdCh0aGlzLnN0YXRlLnVzZXJUYXNrcy5tYXAodCA9PiB0LmRhdGVUaW1lKSkpO1xyXG5cclxuICAgIC8qY29uc3QgZW1wdHlMZWFybmluZ0dvYWxQbGFjZWhvbGRlciA9IHRoaXMuc3RhdGUudXNlclRhc2tzLmZpbmQodXQgPT5cclxuICAgICAgdXQubmFtZSA9PSBudWxsICYmXHJcbiAgICAgICF1dC5jb3Vyc2VOYW1lICYmXHJcbiAgICAgIHV0LmxlYXJuaW5nR29hbCA9PT0gbGVhcm5pbmdHb2FsKTtcclxuXHJcbiAgICBpZiAoZW1wdHlMZWFybmluZ0dvYWxQbGFjZWhvbGRlcikge1xyXG4gICAgICAvLyBIaWphY2sgbGVhcm5pbmctZ29hbCBwbGFjZWhvbGRlciBhbmQgbWFrZSBpdCB0aGUgcmVhbCB0YXNrLlxyXG4gICAgICAvLyBUaGlzIHdpbGwgbWFrZSB0aGUgbGVhcm5pbmcgZ29hbCBkaXNhcHBlYXIgb25jZSB0aGlzIHRhc2tcclxuICAgICAgLy8gaXMgZGVsZXRlZC5cclxuICAgICAgYXdhaXQgdXNlclRhc2tzUmVwby51cGRhdGUoW2VtcHR5TGVhcm5pbmdHb2FsUGxhY2Vob2xkZXJdLCB1dCA9PiB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih1dCwgeyBuYW1lLCBkZXNjcmlwdGlvbiwgdXJsIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7Ki9cclxuICAgICAgLy8gQWRkIGFub3RoZXIgdGFzayB0byBzYW1lIGxlYXJuaW5nLWdvYWxcclxuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby5pbnNlcnQoW3tcclxuICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICAgIGRhdGVUaW1lOiBsYXRlc3RUaW1lU3RhbXAgKyAyMDAwLFxyXG4gICAgICAgIGNvdXJzZU5hbWUsXHJcbiAgICAgICAgbGVhcm5pbmdHb2FsLFxyXG4gICAgICAgIG5hbWUsXHJcbiAgICAgICAgZGVzY3JpcHRpb24sXHJcbiAgICAgICAgdXJsXHJcbiAgICAgIH1dKTtcclxuICAgIC8vfVxyXG4gIH1cclxuXHJcbiAgc2V0SXNPcGVuKGNvdXJzZU5hbWU6IHN0cmluZywgaXNPcGVuOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFdlZWtQbGFubmVyQm94T3Blbihjb3Vyc2VOYW1lLCBpc09wZW4pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgc2V0VGFza0RvbmUodGFzazogVXNlclRhc2ssIGRvbmU6IGJvb2xlYW4pIHtcclxuICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uc2V0VGFza0RvbmVTdGF0ZSh0YXNrLCBkb25lKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNldFN1YlRhc2tEb25lKHRhc2s6IFVzZXJUYXNrLCBzdWJUYXNrOiBVc2VyU3ViVGFzaywgZG9uZTogYm9vbGVhbikge1xyXG4gICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby5zZXRTdWJUYXNrRG9uZVN0YXRlKHRhc2ssIHN1YlRhc2suaWQsIGRvbmUpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY29weUZyb21QcmV2aW91c1dlZWsoKSB7XHJcbiAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtpc0NvcHlpbmdUYXNrczogdHJ1ZX0pO1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgeyB1c2VyVGFza3MsIG9wZW5Db3Vyc2VzLCB3ZWVrRGF0ZSB9ID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICAgIGNvbnN0IHByZXZXZWVrID0gbW9tZW50KHdlZWtEYXRlKS5hZGQoLTEsICd3ZWVrJyk7XHJcbiAgICAgIGNvbnN0IHByZXZXZWVrTm8gPSBnZXRBZGp1c3RlZFdlZWsgKHByZXZXZWVrKTtcclxuICAgICAgY29uc3QgcHJldktFRFdlZWsgPSBLRURXZWVrKHByZXZXZWVrLnllYXIoKSwgcHJldldlZWtObyk7XHJcbiAgICAgIC8vIFJlYWQgbGFzdCB3ZWVrJ3MgZ29hbHMgYW5kIHRhc2tzXHJcbiAgICAgIGxldCBwcmV2VGFza3MgPSBhd2FpdCB0aGlzLnByb3BzLmVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8VXNlclRhc2s+KFwidXNlcnRhc2tzXCIsIHtcclxuICAgICAgICBmcm9tOiBwcmV2S0VEV2Vlay5ub3RCZWZvcmUsXHJcbiAgICAgICAgdG86IHByZXZLRURXZWVrLm5vdEFmdGVyLFxyXG4gICAgICAgIHJvbGU6IFwiVVNFUlwiLFxyXG4gICAgICAgIGluY2x1ZGU6IFtcInRhc2tcIiwgXCJjb3Vyc2VcIiwgXCJhY2xcIl0sXHJcbiAgICAgICAgZmxhZ3M6IFtcImluY2x1ZGVJZHNPbmx5XCJdXHJcbiAgICAgIH0pO1xyXG4gICAgICBwcmV2VGFza3MgPSBwcmV2VGFza3NcclxuICAgICAgICAuZmlsdGVyKHByZXZUYXNrID0+ICFwcmV2VGFzay5kb25lKSAgLy8gRG9uJ3QgY29weSBkb25lIHRhc2tzXHJcbiAgICAgICAgLmZpbHRlcihwcmV2VGFzayA9PiAhIXByZXZUYXNrLm5hbWUpIC8vIERvbid0IGNvcHkgZW1wdHkgbGVhcm5pbmcgZ29hbHNcclxuICAgICAgICAuZmlsdGVyKHByZXZUYXNrID0+ICF1c2VyVGFza3Muc29tZSh0YXNrT2ZDdXJyZW50V2VlayA9PlxyXG4gICAgICAgICAgdGFza09mQ3VycmVudFdlZWsubmFtZSA9PT0gcHJldlRhc2submFtZSAmJlxyXG4gICAgICAgICAgdGFza09mQ3VycmVudFdlZWsubGVhcm5pbmdHb2FsID09PSBwcmV2VGFzay5sZWFybmluZ0dvYWwgJiZcclxuICAgICAgICAgIHRhc2tPZkN1cnJlbnRXZWVrLmNvdXJzZU5hbWUgPT09IHByZXZUYXNrLmNvdXJzZU5hbWUpKTsgLy8gSWdub3JlIGlkZW50aWNhbCB0YXNrcyAoYWxyZWFkeSBjb3BpZWQpXHJcbiAgICAgICAgICBcclxuICAgICAgdmFyIHRlc3QgPSBbd2Vla0RhdGVdLmNvbmNhdCh1c2VyVGFza3MubWFwKHQgPT4gdC5kYXRlVGltZSkpO1xyXG4gICAgICAvLyBOb3cgY3JlYXRlIGNvcGllcyBidXQgcGxhY2UgdGhlbSBpbiB0aGUgY3VycmVudCB3ZWVrLlxyXG4gICAgICBsZXQgbGF0ZXN0VGltZVN0YW1wID0gTWF0aC5tYXguYXBwbHkoTWF0aC5tYXgsIFt3ZWVrRGF0ZV0uY29uY2F0KHVzZXJUYXNrcy5tYXAodCA9PiB0LmRhdGVUaW1lKSkpO1xyXG5cclxuICAgICAgY29uc3QgY29waWVzID0gcHJldlRhc2tzLnNvcnQoY29tcGFyZVByb3AoXCJkYXRlVGltZVwiKSkubWFwKHRhc2sgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNvcHk6IFVzZXJUYXNrID0geyAuLi50YXNrLCBkYXRlVGltZTogbGF0ZXN0VGltZVN0YW1wICs9IDEwMDAgfTtcclxuICAgICAgICBjb3B5LmlkID0gY3JlYXRlVVVJRCgpO1xyXG4gICAgICAgIGlmIChjb3B5LnN1YlRhc2tzKSB7XHJcbiAgICAgICAgICBjb3B5LnN1YlRhc2tzID0gY29weS5zdWJUYXNrcy5maWx0ZXIoc3QgPT4gIXN0LmRvbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxldGUgY29weS4kZXRhZztcclxuICAgICAgICByZXR1cm4gY29weTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvLyBTdG9yZSBpdFxyXG4gICAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLmluc2VydChjb3BpZXMpO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7aXNDb3B5aW5nVGFza3M6IGZhbHNlfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRIZWFkZXJUaXRsZSgpe1xyXG4gICAgcmV0dXJuIDxoND48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmxvZ0Jvb2tcIiAgZGVmYXVsdE1lc3NhZ2U9XCJMb2dnYm9rXCIvPjwvaDQ+O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qgd2Vla051bWJlciA9IG1vbWVudCh0aGlzLnN0YXRlLndlZWtEYXRlKS53ZWVrKCk7XHJcbiAgICBjb25zdCBzaG93UHJvZ3Jlc3NDaGFydHMgPSBmZWF0dXJlcy53ZWVrcGxhbm5lckNoYXJ0cztcclxuICAgIC8vY29uc29sZS5sb2coXCJXZWVreWRhdGU6IFwiICArIG5ldyBEYXRlKHRoaXMuc3RhdGUud2Vla0RhdGUpICsgXCIgd2hpY2ggaXMgd2VlayBubyBcIiArIHdlZWtOdW1iZXIpO1xyXG4gICAgY29uc3QgY3VycmVudFdlZWsgPSBtb21lbnQoKS53ZWVrKCk7XHJcbiAgICBjb25zdCB0YXNrU2V0cyA9IHJlZmluZSh0aGlzLnN0YXRlLnVzZXJUYXNrcyk7XHJcbiAgICBjb25zdCB7IGRpYWxvZ3MsIHdlZWtUZXh0c1VULCBzdHJhdGVneSwgYXNzZXNzbWVudCwgaXNMb2FkaW5nLCBpc0NvcHlpbmdUYXNrcyB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IGlzU2F2aW5nID0gd2Vla1RleHRzVVQgJiYgKHdlZWtUZXh0c1VULiRtZXRhID09PSAnYWRkaW5nJyB8fCB3ZWVrVGV4dHNVVC4kbWV0YSA9PT0gJ3VwZGF0aW5nJyk7XHJcbiAgICBjb25zdCBpc1N0cmF0ZWd5RWRpdGVkID0gISF3ZWVrVGV4dHNVVCAmJiAoc3RyYXRlZ3kgIT09IHdlZWtUZXh0c1VULndlZWtUZXh0cy5zdHJhdGVneSk7XHJcbiAgICBjb25zdCBpc0Fzc2Vzc21lbnRFZGl0ZWQgPSAhIXdlZWtUZXh0c1VUICYmIChhc3Nlc3NtZW50ICE9PSB3ZWVrVGV4dHNVVC53ZWVrVGV4dHMuYXNzZXNzbWVudCk7XHJcbiAgICBjb25zdCBlbmFibGVTYXZlQnV0dG9uID0gIWlzU2F2aW5nICYmIChpc1N0cmF0ZWd5RWRpdGVkIHx8IGlzQXNzZXNzbWVudEVkaXRlZCk7XHJcblxyXG4gICAgdmFyIGNoYXJ0VGFza3MgPSBnZXRXZWVrcGxhbm5lclByb2dyZXNzRGF0YSh0YXNrU2V0cyk7XHJcblxyXG4gICAgdmFyIHBlcmNlbnRhZ2UgPSB0YXNrU2V0cy5sZW5ndGggPiAwID8gY2hhcnRUYXNrcy5jb21wbGV0ZWRUYXNrcyAvIGNoYXJ0VGFza3MudG90YWxOdW1iZXJPZlRhc2tzICogMTAwIDogMDtcclxuICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YGtlZF9ib3hlZCB3ZWVrUGxhbm5lciR7d2Vla051bWJlciA9PT0gY3VycmVudFdlZWsgPyBcIiBjdXJyZW50V2Vla1wiIDogXCJcIn1gfVxyXG4gICAgICAgIG9uS2V5RG93bj17ZXYgPT4ge1xyXG4gICAgICAgICAgaWYgKGV2LndoaWNoID09PSA4MyAmJiBldi5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIGlmICghaXNTYXZpbmcgJiYgdGhpcy5pc1dlZWtUZXh0c0VkaXRlZCgpKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2IudHJpZ2dlckNoYW5nZSgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH19PlxyXG4gICAgICAgIHtzaG93UHJvZ3Jlc3NDaGFydHMgJiYgdGhpcy5nZXRIZWFkZXJUaXRsZSgpfVxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2lkZ2V0c1wiPlxyXG4gICAgICAgICAge3Nob3dQcm9ncmVzc0NoYXJ0cyA/IDxkaXYgY2xhc3NOYW1lPVwicHJvZ3Jlc3NCYXJcIj48UHJvZ3Jlc3MgcGVyY2VudGFnZSA9IHtwZXJjZW50YWdlfS8+PC9kaXY+IDogdGhpcy5nZXRIZWFkZXJUaXRsZSgpfVxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2B3ZWVrU2VsZWN0YH0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cclxuICAgICAgICAgICAgICA8cD48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLndlZWtOdW1iZXJcIiB2YWx1ZXM9e3t3ZWVrTnVtYmVyOiB3ZWVrTnVtYmVyfX0gZGVmYXVsdE1lc3NhZ2U9XCJWZWNrYSB7d2Vla051bWJlcn1cIi8+PC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpID0+IHRoaXMucHJldldlZWsoKX0+XHJcbiAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLWxlZnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCkgPT4gdGhpcy5uZXh0V2VlaygpfT5cclxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtcmlnaHRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAge3Rhc2tTZXRzLmxlbmd0aCA+IDAgJiYgPGhyIC8+fVxyXG5cclxuICAgICAgICB7dGFza1NldHMubWFwKHByb3BzID0+XHJcbiAgICAgICAgICA8VXNlclRhc2tzQm94XHJcbiAgICAgICAgICAgIGtleT17cHJvcHMuY291cnNlTmFtZX1cclxuICAgICAgICAgICAgey4uLnByb3BzfVxyXG4gICAgICAgICAgICBjb3Vyc2VOYW1lPXtwcm9wcy5jb3Vyc2VOYW1lfVxyXG4gICAgICAgICAgICBsZWFybmluZ0dvYWxzPXtwcm9wcy5sZWFybmluZ0dvYWxzfVxyXG4gICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XHJcbiAgICAgICAgICAgIG9wZW5Db3Vyc2VzPXt0aGlzLnN0YXRlLm9wZW5Db3Vyc2VzfVxyXG4gICAgICAgICAgICBhZGRPd25UYXNrPXsoY291cnNlTmFtZTogc3RyaW5nLCBsZWFybmluZ0dvYWxOYW1lOiBzdHJpbmcpID0+IHRoaXMub3BlbkFkZE93blRhc2tEaWFsb2coY291cnNlTmFtZSwgbGVhcm5pbmdHb2FsTmFtZSl9XHJcbiAgICAgICAgICAgIHNldElzT3Blbj17dGhpcy5zZXRJc09wZW4uYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgc2V0VGFza0RvbmU9e3RoaXMuc2V0VGFza0RvbmUuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgc2V0U3ViVGFza0RvbmU9e3RoaXMuc2V0U3ViVGFza0RvbmUuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgZWRpdFRhc2s9e3Rhc2sgPT4gdGhpcy5lZGl0VGFzayh0YXNrKX1cclxuICAgICAgICAgICAgZWRpdFN1YlRhc2s9eyh0YXNrLCBzdWJUYXNrKSA9PiB0aGlzLmVkaXRTdWJUYXNrKHRhc2ssIHN1YlRhc2spfVxyXG4gICAgICAgICAgICByZW1vdmVMZWFybmluZ0dvYWw9e2xnID0+IHRoaXMucmVtb3ZlTGVhcm5pbmdHb2FsKGxnKX0gXHJcbiAgICAgICAgICAgIGRpc3BsYXlQcm9ncmVzcyA9IHtzaG93UHJvZ3Jlc3NDaGFydHN9XHJcbiAgICAgICAgICAgIHByb2dyZXNzRGF0YSA9IHtjaGFydFRhc2tzLnN1YmplY3REYXRhW3Byb3BzLmNvdXJzZU5hbWVdfSAvPil9XHJcblxyXG4gICAgICAgIDxociAvPlxyXG5cclxuICAgICAgICB7aXNMb2FkaW5nID8gPFNwaW5uZXIgLz4gOiA8ZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXtldiA9PiB0aGlzLm9wZW5BZGRHb2FsRGlhbG9nKCl9PlxyXG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1saXN0LWFsdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5sZWFybmluZ0dvYWxcIiBkZWZhdWx0TWVzc2FnZT1cIkVnZXQgbMOkcmFuZGVtw6VsXCIvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0blwiIHN0eWxlPXtpc0NvcHlpbmdUYXNrcyA/IHtvcGFjaXR5OiAwLjV9IDogdW5kZWZpbmVkfSBvbkNsaWNrPXtldiA9PiAoIWlzQ29weWluZ1Rhc2tzKSAmJiB0aGlzLmNvcHlGcm9tUHJldmlvdXNXZWVrKCl9PlxyXG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1jbG9uZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5jb3B5UHJldmlvdXNXZWVrVGFrc1wiIGRlZmF1bHRNZXNzYWdlPVwiS29waWVyYSBlaiBrbGFyYSBmcsOlbiBmw7ZyZWfDpWVuZGUgdmVja2FcIi8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxPcGVuQ2xvc2VCb3hcclxuICAgICAgICAgICAgdGl0bGU9ezxoNT48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLnN0cmF0ZWd5QW5kRXZhbHVhdGlvblwiIGRlZmF1bHRNZXNzYWdlPVwiU3RyYXRlZ2kgJiBVdHbDpHJkZXJpbmdcIi8+PC9oNT59XHJcbiAgICAgICAgICAgIGhlYWRlck9wZW49e3RoaXMuc3RhdGUub3BlbkNvdXJzZXNbXCJTdHJhdFV0dlwiXX1cclxuICAgICAgICAgICAgb25PcGVuQ2xvc2U9e2JlY2FtZU9wZW4gPT4gdGhpcy5zZXRJc09wZW4oXCJTdHJhdFV0dlwiLCBiZWNhbWVPcGVuKX1cclxuICAgICAgICAgID5cclxuICAgICAgICAgICAgPGgzPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuc3RyYXRlZ3lcIiBkZWZhdWx0TWVzc2FnZT1cIlN0cmF0ZWdpXCIvPjwvaDM+XHJcbiAgICAgICAgICAgIDxwPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuc3RyYXRlZ3lEZXNjcmlwdGlvblwiIGRlZmF1bHRNZXNzYWdlPVwiSHVyIGphZyBza2EgZ8O2cmEgZsO2ciBhdHQgbMOkcmEgbWlnLlwiLz48L3A+XHJcbiAgICAgICAgICAgIDxoci8+XHJcbiAgICAgICAgICAgIDx0ZXh0YXJlYVxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIndlZWtwbGFubmVyLXRleHRhcmVhXCJcclxuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5lbnYudHV0b3JlZH1cclxuICAgICAgICAgICAgICB2YWx1ZT17c3RyYXRlZ3kgJiYgc3RyYXRlZ3kuc3Vic3RyKDAsIE1BWF9TVFJBVEVHWV9MRU5HVEgpfVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtzdHJhdGVneTogKGV2LnRhcmdldC52YWx1ZSB8fCAnJykuc3Vic3RyKDAsIE1BWF9TVFJBVEVHWV9MRU5HVEgpfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYi50cmlnZ2VyQ2hhbmdlKDUwMCk7XHJcbiAgICAgICAgICAgICAgfX0gLz5cclxuXHJcbiAgICAgICAgICAgIDxoMz48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmV2YWx1YXRpb25cIiBkZWZhdWx0TWVzc2FnZT1cIlV0dsOkcmRlcmluZ1wiLz48L2gzPlxyXG4gICAgICAgICAgICA8cD48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmV2YWx1YXRpb25EZXNjcmlwdGlvblwiIGRlZmF1bHRNZXNzYWdlPVwiUmVmbGVrdGlvbiBrcmluZyBkaW4gYXJiZXRzaW5zYXRzIG9jaCBkaW5hIHZhbGRhIHN0cmF0ZWdpZXIgdW5kZXIgdmVja2FuLlV0dsOkcmRlcmEgaSBmw7ZyaMOlbGxhbmRlIHRpbGwgZGluYSBtw6VsLlwiLz48L3A+XHJcbiAgICAgICAgICAgIDxoci8+XHJcbiAgICAgICAgICAgIDx0ZXh0YXJlYVxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIndlZWtwbGFubmVyLXRleHRhcmVhXCJcclxuICAgICAgICAgICAgICB2YWx1ZT17YXNzZXNzbWVudCAmJiBhc3Nlc3NtZW50LnN1YnN0cigwLCBNQVhfQVNTRVNTTUVOVF9MRU5HVEgpfVxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmVudi50dXRvcmVkfVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHthc3Nlc3NtZW50OiAoZXYudGFyZ2V0LnZhbHVlIHx8ICcnKS5zdWJzdHIoMCwgTUFYX0FTU0VTU01FTlRfTEVOR1RIKX0pXHJcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYi50cmlnZ2VyQ2hhbmdlKDUwMCk7XHJcbiAgICAgICAgICAgICAgfSB9Lz5cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0blwiXHJcbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezB9XHJcbiAgICAgICAgICAgICAgc3R5bGU9e2VuYWJsZVNhdmVCdXR0b24gPyB7fSA6IHtvcGFjaXR5OiAwLjV9fVxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT4haXNTYXZpbmcgJiYgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2IudHJpZ2dlckNoYW5nZSgwKX0+XHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1mbG9wcHktb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgIHtlbmFibGVTYXZlQnV0dG9uID8gPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZVwiIGRlZmF1bHRNZXNzYWdlPVwiIFNwYXJhXCIvPiA6IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVkXCIgZGVmYXVsdE1lc3NhZ2U9XCIgU3BhcmFkXCIvPn1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9PcGVuQ2xvc2VCb3g+XHJcblxyXG4gICAgICAgIDwvZGl2Pn1cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxEaWFsb2dzXHJcbiAgICAgICAgZGlhbG9ncz17ZGlhbG9nc31cclxuICAgICAgICBwb3BEaWFsb2c9eygpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShcclxuICAgICAgICAgICAgICAoe2RpYWxvZ3N9KSA9PiAoeyBkaWFsb2dzOiBkaWFsb2dzLnNsaWNlKDAsIGRpYWxvZ3MubGVuZ3RoIC0gMSkgfSkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gLz5cclxuICAgIDwvZGl2PlxyXG4gIH1cclxufSIsImltcG9ydCB7IFVzZXJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBVc2VyVGFza3NCb3hQcm9wcyB9IGZyb20gJy4vdXNlci10YXNrcy1ib3gnO1xyXG5pbXBvcnQgeyBhcnJheVRvTWFwLCBhcnJheVRvTG9va3VwLCBjb21wYXJlUHJvcCwgTCB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsc1wiO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWaXJ0dWFsTGVhcm5pbmdHb2FsIHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgYWxsVGFza3M6IFVzZXJUYXNrW107XHJcbiAgc3RlcD86IG51bWJlcjtcclxuICB1cmw/OiBzdHJpbmc7XHJcbiAgdGFza3M6IFVzZXJUYXNrW107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWZpbmUodGFza3M6IFVzZXJUYXNrW10pIHtcclxuICBjb25zdCByZXN1bHQgPSBbXSBhcyBQYXJ0aWFsPFVzZXJUYXNrc0JveFByb3BzPltdO1xyXG4gIGNvbnN0IG1hcHBlciA9IHt9IGFzIHsgW25hbWU6IHN0cmluZ106IFVzZXJUYXNrc0JveFByb3BzIH07XHJcbiAgY29uc3QgdGFza3NQZXJDb3Vyc2UgPSBhcnJheVRvTG9va3VwKHRhc2tzLCB0ID0+IHQuY291cnNlTmFtZSB8fCAnJyk7XHJcbiAgZm9yIChjb25zdCBjb3Vyc2VOYW1lIG9mIE9iamVjdC5rZXlzKHRhc2tzUGVyQ291cnNlKS5zb3J0KCkuZmlsdGVyKHggPT4geCkuY29uY2F0KHRhc2tzUGVyQ291cnNlWycnXSA/XHJcbiAgICBbJyddIDogW10pKSB7XHJcbiAgICBjb25zdCBjb3Vyc2VUYXNrcyA9IHRhc2tzUGVyQ291cnNlW2NvdXJzZU5hbWVdIHx8IHRhc2tzUGVyQ291cnNlWycnXTtcclxuICAgIGNvbnN0IHRhc2tzUGVyTGVhcm5pbmdHb2FsID0gYXJyYXlUb0xvb2t1cChjb3Vyc2VUYXNrcywgdCA9PiB0LmxlYXJuaW5nR29hbCk7XHJcbiAgICBjb25zdCByZXN1bHRMZWFybmluZ0dvYWxzOiBWaXJ0dWFsTGVhcm5pbmdHb2FsW10gPSBbXTtcclxuICAgIGZvciAoY29uc3QgbGVhcm5pbmdHb2FsIG9mIE9iamVjdC5rZXlzKHRhc2tzUGVyTGVhcm5pbmdHb2FsKSkge1xyXG4gICAgICBjb25zdCBsZ1Rhc2tzID0gdGFza3NQZXJMZWFybmluZ0dvYWxbbGVhcm5pbmdHb2FsXS5zb3J0KGNvbXBhcmVQcm9wKFwiZGF0ZVRpbWVcIikpO1xyXG4gICAgICBjb25zdCBsZWFybmluZ0dvYWxUYXNrID0gbGdUYXNrc1xyXG4gICAgICAgIC5maWx0ZXIodCA9PiB0Lm5hbWUgPT0gbnVsbCkgLy8gSWYgbmFtZSBpcyB1bmRlZmluZWQgb3IgbnVsbCwgdGhpcyByZXByZXNlbnRzIGEgbGVhcm5pbmcgZ29hbFxyXG4gICAgICAgIFswXTtcclxuICAgICAgY29uc3QgdXJsID0gbGVhcm5pbmdHb2FsVGFzayAmJiBsZWFybmluZ0dvYWxUYXNrLnVybDtcclxuICAgICAgcmVzdWx0TGVhcm5pbmdHb2Fscy5wdXNoKHtcclxuICAgICAgICBuYW1lOiBsZWFybmluZ0dvYWwsXHJcbiAgICAgICAgYWxsVGFza3M6IGxnVGFza3MsXHJcbiAgICAgICAgdXJsLFxyXG4gICAgICAgIHN0ZXA6IGxnVGFza3MubWFwKHQgPT4gdC5zdGVwKS5maWx0ZXIoc3RlcCA9PiBzdGVwKVswXSxcclxuICAgICAgICB0YXNrczogbGdUYXNrcy5maWx0ZXIodCA9PiB0Lm5hbWUpXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmVzdWx0LnB1c2goe1xyXG4gICAgICBjb3Vyc2VOYW1lLFxyXG4gICAgICBsZWFybmluZ0dvYWxzOiByZXN1bHRMZWFybmluZ0dvYWxzXHJcbiAgICB9KTtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG4iLCJpbXBvcnQgeyBVc2VyVGFza3NCb3hQcm9wcyB9IGZyb20gXCIuLi93ZWVrcGxhbm5lci91c2VyLXRhc2tzLWJveFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtwbGFubmVyUHJvZ3Jlc3NEYXRhKHRhc2tTZXRzOiBQYXJ0aWFsPFVzZXJUYXNrc0JveFByb3BzPltdKSB7XHJcbiAgICB2YXIgY2hhcnRUYXNrczoge1xyXG4gICAgICAgIGNvbXBsZXRlZFRhc2tzOiBudW1iZXIsIFxyXG4gICAgICAgIHRvdGFsTnVtYmVyT2ZUYXNrczogbnVtYmVyLFxyXG4gICAgICAgIHN1YmplY3REYXRhOiB7XHJcbiAgICAgICAgICAgIFtjb2x1bW5IZWFkZXI6IHN0cmluZ106IHsgY29tcGxldGVkTnVtYmVyT2ZUYXNrczogbnVtYmVyLCBudW1iZXJPZlRhc2tzOiBudW1iZXIgfVxyXG4gICAgICAgIH1cclxuICAgIH0gPSB7Y29tcGxldGVkVGFza3M6IDAsIHRvdGFsTnVtYmVyT2ZUYXNrczogMCAsIHN1YmplY3REYXRhOiB7fX07XHJcblxyXG4gICAgdGFza1NldHMuZm9yRWFjaChlbGVtID0+IGVsZW0ubGVhcm5pbmdHb2Fscy5mb3JFYWNoKHggPT4ge1xyXG4gICAgICAgIHZhciBzdWJqZWN0Q29tcGxldGVkVGFza3MgPSB4LnRhc2tzLmZpbHRlcih0ID0+IHQuZG9uZSkubGVuZ3RoO1xyXG4gICAgICAgIGxldCBjb3Vyc2VTdWJqZWN0RGF0YSA9IGNoYXJ0VGFza3Muc3ViamVjdERhdGFbZWxlbS5jb3Vyc2VOYW1lXTtcclxuICAgICAgICBpZiAoIWNvdXJzZVN1YmplY3REYXRhKSB7XHJcbiAgICAgICAgICAgIGNvdXJzZVN1YmplY3REYXRhID0gY2hhcnRUYXNrcy5zdWJqZWN0RGF0YVtlbGVtLmNvdXJzZU5hbWVdID0ge1xyXG4gICAgICAgICAgICAgICAgY29tcGxldGVkTnVtYmVyT2ZUYXNrczogMCxcclxuICAgICAgICAgICAgICAgIG51bWJlck9mVGFza3M6IDBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY291cnNlU3ViamVjdERhdGEuY29tcGxldGVkTnVtYmVyT2ZUYXNrcyArPSBzdWJqZWN0Q29tcGxldGVkVGFza3M7XHJcbiAgICAgICAgY291cnNlU3ViamVjdERhdGEubnVtYmVyT2ZUYXNrcyArPSB4LnRhc2tzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgY2hhcnRUYXNrcy5jb21wbGV0ZWRUYXNrcyArPSBzdWJqZWN0Q29tcGxldGVkVGFza3M7XHJcbiAgICAgICAgY2hhcnRUYXNrcy50b3RhbE51bWJlck9mVGFza3MgKz0geC50YXNrcy5sZW5ndGg7XHJcbiAgICB9KSk7XHJcbiAgICByZXR1cm4gY2hhcnRUYXNrcztcclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtJztcclxuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBkaWFsb2dzOiBSZWFjdC5Db21wb25lbnRbXTtcclxuICBwb3BEaWFsb2c6ICgpPT52b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRGlhbG9ncyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIGxhc3REaXY6IEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBQcm9wcykge1xyXG4gICAgaWYgKHRoaXMubGFzdERpdiAhPT0gbnVsbCAmJiBwcmV2UHJvcHMuZGlhbG9ncy5sZW5ndGggPiB0aGlzLnByb3BzLmRpYWxvZ3MubGVuZ3RoKSB7XHJcbiAgICAgIC8vIEEgZGlhbG9nIHdhcyBjbG9zZWQuIE5vdyBmb2N1cyB0aGUgbGFzdCBkaWFsb2c6XHJcbiAgICAgICQoZmluZERPTU5vZGUodGhpcy5sYXN0RGl2KSkuZmluZCgnOmlucHV0JykuZmlyc3QoKS5mb2N1cygpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyICgpIHtcclxuICAgIHRoaXMubGFzdERpdiA9IG51bGw7XHJcbiAgICBjb25zdCB7ZGlhbG9ncywgcG9wRGlhbG9nfSA9IHRoaXMucHJvcHM7XHJcbiAgICAkKCdib2R5JykuYXR0cignYXJpYS1kaXNhYmxlZCcsIGRpYWxvZ3MubGVuZ3RoID4gMCk7XHJcbiAgICAkKCdib2R5JykuY3NzKCdvdmVyZmxvdycsIGRpYWxvZ3MubGVuZ3RoID4gMCA/ICdoaWRkZW4nIDogJ2F1dG8nKTtcclxuXHJcbiAgICByZXR1cm4gZGlhbG9ncy5sZW5ndGggPiAwICYmIDxkaXY+XHJcbiAgICAgIHtkaWFsb2dzLm1hcCgoZGlhbG9nLCBpZHgpID0+IHtcclxuICAgICAgICBsZXQgZGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICBmdW5jdGlvbiBvbktleVByZXNzKGV2OiBSZWFjdC5LZXlib2FyZEV2ZW50PEhUTUxEaXZFbGVtZW50Pikge1xyXG4gICAgICAgICAgaWYgKGV2LndoaWNoID09PSAxMyAmJiAoIWV2LnRhcmdldCB8fCAoZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS50YWdOYW1lICE9PSAnVEVYVEFSRUEnKSkge1xyXG4gICAgICAgICAgICAkKGZpbmRET01Ob2RlKGRpdikpLmZpbmQoJy5idG4tZGVmYXVsdCcpLmNsaWNrKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gb25LZXlEb3duKGV2KSB7XHJcbiAgICAgICAgICBpZiAoZXYud2hpY2ggPT09IDI3KSB7IC8vIEVzY2FwZVxyXG4gICAgICAgICAgICBwb3BEaWFsb2coKTtcclxuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChldi53aGljaCA9PT0gODMgJiYgKGV2LmN0cmxLZXkgfHwgZXYubWV0YUtleSkpIHsgLy8gQ1RSTC1TXHJcbiAgICAgICAgICAgIGNvbnN0IGRvbU5vZGUgPSBmaW5kRE9NTm9kZShkaXYpO1xyXG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0QnV0dG9uID0gJChkb21Ob2RlKS5maW5kKCcuYnRuLWRlZmF1bHQnKTtcclxuICAgICAgICAgICAgZGVmYXVsdEJ1dHRvbi5jbGljaygpO1xyXG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDxkaXYga2V5PXtpZHh9PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImRhcmtlblwiIC8+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtcGFnZS13cmFwXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1wYWdlXCIgcmVmPXtlbGVtID0+IHtcclxuICAgICAgICAgIGRpdiA9IGVsZW07XHJcbiAgICAgICAgICBpZiAoaWR4ID09PSBkaWFsb2dzLmxlbmd0aCAtIDEpIHRoaXMubGFzdERpdiA9IGVsZW07XHJcbiAgICAgICAgfX1cclxuICAgICAgICAgICAgdGFiSW5kZXg9ezB9XHJcbiAgICAgICAgICAgIGFyaWEtZGlzYWJsZWQ9e2lkeCA8IGRpYWxvZ3MubGVuZ3RoIC0gMX1cclxuICAgICAgICAgICAgb25LZXlQcmVzcz17b25LZXlQcmVzc31cclxuICAgICAgICAgICAgb25LZXlEb3duPXtvbktleURvd259PlxyXG4gICAgICAgICAge2RpYWxvZ31cclxuICAgICAgICAgIDxSZW1vdmVJdGVtIG9uQ2xpY2s9e3BvcERpYWxvZ30gLz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3RvcEZsb2F0c1wiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2Pn0pfVxyXG4gIDwvZGl2PjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgR29vZ2xlQ2xpZW50IH0gZnJvbSAnLi9nb29nbGUtY2xpZW50JztcclxuXHJcbmludGVyZmFjZSBkb3dubG9hZEFyZ3Mge1xyXG4gIGZpbGU6IHNlbGVjdGVkRmlsZTtcclxuICBsaW1pdFNpemU/OiBudW1iZXI7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIHNlbGVjdGVkRmlsZSB7XHJcbiAgZmlsZUlkOiBzdHJpbmc7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbiAgbWltZVR5cGU6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgbW9kaWZpZWRUaW1lOiBudW1iZXI7XHJcbiAgY2FuRXhwb3J0PzogYm9vbGVhbjtcclxuICBpY29uVXJsPzogc3RyaW5nO1xyXG4gIHRodW1ibmFpbFVybD86IHN0cmluZztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBHb29nbGVEcml2ZSBleHRlbmRzIEdvb2dsZUNsaWVudCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Rpc2NvdmVyeS92MS9hcGlzL2RyaXZlL3YzL3Jlc3QnKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldEZpbGUoZmlsZUlkKSB7XHJcbiAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRlZCgpO1xyXG4gICAgcmV0dXJuIGdhcGkuY2xpZW50LmRyaXZlLmZpbGVzLmdldCg8YW55PntcclxuICAgICAgZmlsZUlkOiBmaWxlSWQsXHJcbiAgICAgIHN1cHBvcnRzQWxsRHJpdmVzOiB0cnVlLFxyXG4gICAgICBmaWVsZHM6ICdpZCxuYW1lLG1pbWVUeXBlLHdlYlZpZXdMaW5rLGljb25MaW5rLG1vZGlmaWVkVGltZSx0aHVtYm5haWxMaW5rJ1xyXG4gICAgfSkudGhlbihyZXNwID0+IHtcclxuICAgICAgaWYgKHJlc3AucmVzdWx0Lm5hbWUpIHtcclxuICAgICAgICB2YXIgZmlsZSA9IHJlc3AucmVzdWx0O1xyXG4gICAgICAgIHJldHVybiB7ZmlsZUlkOiBmaWxlLmlkLCB1cmw6IGZpbGUud2ViVmlld0xpbmssIG1pbWVUeXBlOiBmaWxlLm1pbWVUeXBlLCBuYW1lOiBmaWxlLm5hbWUsIG1vZGlpZmllZFRpbWU6IGZpbGUubW9kaWZpZWRUaW1lLCBpY29uVXJsOiBmaWxlLmljb25MaW5rLCB0aHVtYm5haWxVcmw6IGZpbGUudGh1bWJuYWlsTGlua307XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB1cGRhdGVQZXJtaXNzaW9ucygpXHJcbiAgICogXHJcbiAgICogQHBhcmFtIGZpbGVJZCBcclxuICAgKiBcclxuICAgKiBNYWtlIHRoZSBmaWxlIGFjY2Vzc2libGUgdG8gYWxsIGluIHRoZSBkb21haW4uIFNob3VsZCBiZSB1bm5lY2Vzc2FyeSBidXQgc29tZVxyXG4gICAqIHRlYWNoZXJzIGhhdmUgY2hhbmdlZCB0aGVpciBkZWZhdWx0IHBlcm1pc3Npb25zLlxyXG4gICAqIFdlIGRvbid0IGNhcmUgcmlnaHQgbm93IGlmIHRoaXMgZmFpbHMgYmVjYXVzZSB0aGlzIGlzIGp1c3QgYW4gZXh0cmEgcHJlY2F1dGlvbi5cclxuICAgKiBJZiB3ZSBwbGFuIG9uIHVzaW5nIHRoaXMgb24gb3RoZXIgZG9tYWlucyB0aGUgZG9tYWluLWF0dHJpYnV0ZSBuZWVkcyB0byBiZSBkeW5hbWljLlxyXG4gICAqIFxyXG4gICAqL1xyXG4gIGFzeW5jIHVwZGF0ZVBlcm1pc3Npb25zKGZpbGVJZCkge1xyXG4gICAgY29uc29sZS5sb2coJ3VwZGF0aW5nIHBlcm1pc3Npb25zJylcclxuICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGVkKCk7XHJcbiAgICBnYXBpLmNsaWVudC5kcml2ZS5wZXJtaXNzaW9ucy5jcmVhdGUoPGFueT57XHJcbiAgICAgIGZpbGVJZDogZmlsZUlkLFxyXG4gICAgICBzZW5kTm90aWZpY2F0aW9uRW1haWw6IGZhbHNlLFxyXG4gICAgICByb2xlOiAncmVhZGVyJyxcclxuICAgICAgdHlwZTogJ2FueW9uZScsIC8vIG9yIHNob3VsZCB3ZSBsaW1pdCB0byBkb21haW4gKGVycm9yIGlmIGluIEtlZHNjaG9vbHMuY29tKVxyXG4gICAgICAvLyB0eXBlOiAnZG9tYWluJywgXHJcbiAgICAgIC8vIGRvbWFpbjogJ2t1bnNrYXBzc2tvbGFuLnNlJ1xyXG4gICAgICBzdXBwb3J0c0FsbERyaXZlczogdHJ1ZVxyXG4gICAgfSkudGhlbihyZXNwID0+IGNvbnNvbGUubG9nKHJlc3ApKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNyZWF0ZUZvbGRlcihuYW1lLCBwYXJlbnQpwqB7XHJcbiAgICBjb25zb2xlLmxvZygnQ3JlYXRpbmcgZm9sZGVyICcgKyBuYW1lKTtcclxuICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGVkKCk7XHJcbiAgICByZXR1cm4gZ2FwaS5jbGllbnQuZHJpdmUuZmlsZXMuY3JlYXRlKDxhbnk+e1xyXG4gICAgICBuYW1lOiBuYW1lLFxyXG4gICAgICBtaW1lVHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5mb2xkZXInLFxyXG4gICAgICBwYXJlbnRzOiBbcGFyZW50XVxyXG4gICAgfSkudGhlbihyZXNwID0+IHJlc3AucmVzdWx0KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldElkRm9yRm9sZGVyUGF0aChwYXRoOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc29sZS5sb2coJ0dldHRpbmcgaWQgZm9yICcgKyBwYXRoLmpvaW4oJy8nKSk7XHJcbiAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRlZCgpO1xyXG4gICAgbGV0IHBhcmVudCA9ICdyb290JztcclxuICAgIGZvciAodmFyIGZvbGRlciBvZiBwYXRoKSB7XHJcbiAgICAgIGNvbnN0IGZvbGRlcklkID0gYXdhaXQgdGhpcy5nZXRJZEZvckZvbGRlcihmb2xkZXIsIHBhcmVudCk7XHJcbiAgICAgIGlmIChmb2xkZXJJZCkge1xyXG4gICAgICAgIHBhcmVudCA9IGZvbGRlcklkO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG5ld0ZvbGRlciA9IGF3YWl0IHRoaXMuY3JlYXRlRm9sZGVyKGZvbGRlciwgcGFyZW50KTtcclxuICAgICAgICBwYXJlbnQgPSBuZXdGb2xkZXIuaWQ7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJlbnQ7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRJZEZvckZvbGRlcihuYW1lOiBzdHJpbmcsIHBhcmVudDogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZygnR2V0dGluZyBpZCBmb3IgJyArIG5hbWUpO1xyXG4gICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0ZWQoKTtcclxuICAgIHJldHVybiBnYXBpLmNsaWVudC5kcml2ZS5maWxlcy5saXN0KHtcclxuICAgICAgY29ycG9yYTogJ3VzZXInLFxyXG4gICAgICBxOiBcIidcIitwYXJlbnQrXCInIGluIHBhcmVudHMgYW5kIG1pbWVUeXBlID0gJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5mb2xkZXInIGFuZCBuYW1lID0gJ1wiK25hbWUrXCInXCJcclxuICAgIH0pLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgIGlmIChyZXNwLnJlc3VsdC5maWxlcy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gcmVzcC5yZXN1bHQuZmlsZXNbMF0uaWQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNvcHlGaWxlKGZpbGUsIGRlc3RpbmF0aW9uKSB7XHJcbiAgICBjb25zb2xlLmxvZygnQ29weWluZyBmaWxlOiAnICsgZmlsZS5uYW1lKTtcclxuICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGVkKCk7XHJcbiAgICBpZiAoZGVzdGluYXRpb24pIHtcclxuICAgICAgY29uc3QgcGFyZW50ID0gYXdhaXQgdGhpcy5nZXRJZEZvckZvbGRlclBhdGgoZGVzdGluYXRpb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgcGFyZW50ID0gJ3Jvb3QnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGdhcGkuY2xpZW50LmRyaXZlLmZpbGVzLmNvcHkoPGFueT57XHJcbiAgICAgIGZpbGVJZDogZmlsZS5pZCxcclxuICAgICAgc3VwcG9ydHNBbGxEcml2ZXM6IHRydWUsXHJcbiAgICAgIHBhcmVudHM6IFtwYXJlbnRdLFxyXG4gICAgICBuYW1lOiBmaWxlLm5hbWUsXHJcbiAgICAgIGZpZWxkczogJ2lkLG5hbWUsbWltZVR5cGUsd2ViVmlld0xpbmssaWNvbkxpbmssbW9kaWZpZWRUaW1lLHRodW1ibmFpbExpbmsnXHJcbiAgICB9KS50aGVuKHJlc3AgPT4gcmVzcC5yZXN1bHQpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIGRvd25sb2FkRmlsZSgpXHJcbiAgICogQHBhcmFtIGZpbGUgXHJcbiAgICogXHJcbiAgICogV2hlbiBDbGFzc3Jvb20gaGFzIGJlZW4gaW50ZWdyYXRlZCB3ZSB3aWxsIHdhbnQgdG8gaGFuZGxlIG9ubHkgdGhlIGZpbGVJZDpzXHJcbiAgICogc28gdGhhdCBlZGl0aW5nIGNhcGFiaWxpdGllcyBhcmUgcGVzZXJ2ZWQgb24gdGhlIGZpbGUgKGlmIGl0IGlzIGEgZ29vZ2xlLWFwcHMgZmlsZSlcclxuICAgKiBSaWdodCBub3cgZ29vZ2xlLWFwcHMgZmlsZXMgYXJlIGNvbnZlcnRlZCB0byBwZGYgYW5kIHBhc3NlZCBpbnRvIHRoZSBjdXJyZW50IGZsb3cuXHJcbiAgICogXHJcbiAgICogVE9ETzogZXJyb3IgaGFuZGxpbmdcclxuICAgKi9cclxuXHJcbiAgYXN5bmMgZG93bmxvYWRGaWxlKHtmaWxlLCBsaW1pdFNpemV9OmRvd25sb2FkQXJncykge1xyXG4gICAgLy8gQSBmaWxlIHRoYXQgY2FuIGJlIGV4cG9ydGVkIHRvIFBERiBpcyByZXRyZWl2ZWQgd2l0aFxyXG4gICAgLy8gZmlsZS5leHBvcnQoKSBmcm9tIERyaXZlLCBjb252ZXJ0ZWQgdG8gYSBibG9iIGFuZCB0aGVuXHJcbiAgICAvLyB0byBhIEZpbGUuXHJcbiAgICAvLyBBIGZpbGUgdGhhdCBjYW4gbm90IGJlIGV4cG9ydGVkIHRvIFBERiBpcyByZXRyaWV2ZWRcclxuICAgIC8vIHRocm91Z2ggWEhSIGFuZCBjb252ZXJ0ZWQgdG8gYSBGaWxlLlxyXG5cclxuICAgIC8vIElmIHdlIGRvbid0IG5lZWQgdG8gaGFuZGxlIHRoZSBwaHlzaWNhbCBmaWxlcyBvbiB0aGUgY2xpZW50XHJcbiAgICAvLyB3ZSBjb3VsZCBzYXZlIG9ubHkgdGhlIGZpbGVJZDpzIGFuZCBkaXNwbGF5IGZpbGVuYW1lIGFuZCBtaW1lVHlwZVxyXG4gICAgLy8gZm9yIHRoZSBmaWxlIGluIG91ciBsaXN0aW5ncy4gV2hlbi9pZiB3ZSB1c2UgR29vZ2xlIENsYXNzcm9vbSBmb3JcclxuICAgIC8vIG91ciB0YXNrLWhhbmRsaW5nIHRoYXQgd291bGQgYmUgdGhlIHByZWZlcnJlZCBhcHByb2FjaCB0byBrZWVwXHJcbiAgICAvLyB0aGUgZmlsZSBhcyBhbiBlZGl0YWJsZSBHb29nbGUgZmlsZVxyXG5cclxuICAgIC8vIEluaXQgdGhlIGRyaXZlLWFwaSAob25seSBuZWVkZWQgZm9yIGRvd25sb2FkIHNvIG5vdCBsb2FkZWQgaW5pdGlhbGx5KVxyXG4gICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0ZWQoKTtcclxuXHJcbiAgICBpZiAoZmlsZS5jYW5FeHBvcnQpIHtcclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEZpbGU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBnYXBpLmNsaWVudC5kcml2ZS5maWxlcy5leHBvcnQoe1xyXG4gICAgICAgICAgZmlsZUlkOiBmaWxlLmZpbGVJZCxcclxuICAgICAgICAgIG1pbWVUeXBlOiAnYXBwbGljYXRpb24vcGRmJ31cclxuICAgICAgICApLnRoZW4ocmVzcCA9PiB7XHJcbiAgICAgICAgICBjb25zdCBsZW4gPSByZXNwLmJvZHkubGVuZ3RoO1xyXG4gICAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KG5ldyBBcnJheUJ1ZmZlcihsZW4pKTtcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgZGF0YVtpXSA9IHJlc3AuYm9keS5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtkYXRhXSwge3R5cGU6ICdhcHBsaWNhdGlvbi9wZGYnfSk7XHJcbiAgICAgICAgICBjb25zdCBmaWxlbmFtZSA9IGZpbGUubmFtZSsnLnBkZic7XHJcbiAgICAgICAgICByZXNvbHZlKG5ldyBGaWxlKFtibG9iXSwgZmlsZW5hbWUsIHt0eXBlOiAnYXBwbGljYXRpb24vcGRmJywgbGFzdE1vZGlmaWVkOiBmaWxlLm1vZGlmaWVkVGltZX0pKTtcclxuICAgICAgICB9KVxyXG4gICAgICB9KTsgIFxyXG4gICAgfSBlbHNlIHtcclxuXHJcbiAgICAgIC8vIGEgZmlsZSB0aGF0IGlzbid0IGEgZ29vZ2xlLWFwcHMgZmlsZSBuZWVkcyB0byBiZSBmZXRjaGVkIHZpYSBYSFJcclxuICAgICAgLy8gYmVjYXVzZSByZXNwb25zZVR5cGUgYW5kID9hbHQ9bWVkaWEgbmVlZHMgdG8gYmUgc2V0IHRvIGF2b2lkIENPUlNcclxuICAgICAgY29uc3QgeGhyRG93bmxvYWQgPSAoZmlsZTpzZWxlY3RlZEZpbGUpID0+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8RmlsZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICB4aHIub3BlbihcIkdFVFwiLCBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2RyaXZlL3YzL2ZpbGVzL1wiK2ZpbGUuZmlsZUlkKyc/YWx0PW1lZGlhJywgdHJ1ZSk7XHJcbiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsJ0JlYXJlciAnK3RoaXMudG9rZW4pO1xyXG4gICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xyXG4gICAgICAgICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJlc29sdmUobmV3IEZpbGUoW3hoci5yZXNwb25zZV0sIGZpbGUubmFtZSwge3R5cGU6IGZpbGUubWltZVR5cGUsIGxhc3RNb2RpZmllZDogZmlsZS5tb2RpZmllZFRpbWV9KSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgeGhyLnNlbmQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEZpbGU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICBpZiAobGltaXRTaXplICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIGdhcGkuY2xpZW50LmRyaXZlLmZpbGVzLmdldCh7XHJcbiAgICAgICAgICAgIGZpbGVJZDogZmlsZS5maWxlSWQsXHJcbiAgICAgICAgICAgIGZpZWxkczogJ3NpemUnXHJcbiAgICAgICAgICB9KS50aGVuKHJlc3AgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzaXplID0gTnVtYmVyKHJlc3AucmVzdWx0LnNpemUpO1xyXG4gICAgICAgICAgICBpZiAoc2l6ZSA+IGxpbWl0U2l6ZSoxMDI0KjEwMjQpIHtcclxuICAgICAgICAgICAgICByZWplY3QoJ0dvb2dsZVBpY2tlckVycm9yOiBGaWxzaXplIGlzIHRvbyBsYWFyZ2UnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgeGhyRG93bmxvYWQoZmlsZSkudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgICByZXNvbHZlKHJlc3ApO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeGhyRG93bmxvYWQoZmlsZSkudGhlbihyZXNwID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZShyZXNwKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHZpc2libGU6IGJvb2xlYW47XHJcbiAgdGV4dDogc3RyaW5nO1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxuICBvbkNvbmZpcm06ICgpPT52b2lkO1xyXG4gIG9uQ2FuY2VsOiAoKT0+dm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENvbmZpcm1hdGlvbiAocHJvcHM6IFByb3BzKSB7XHJcbiAgcmV0dXJuIDxkaXZcclxuICAgIGNsYXNzTmFtZT17YGNvbmZpcm1hdGlvbi1ib3ggJHtwcm9wcy5jbGFzc05hbWV9JHtwcm9wcy52aXNpYmxlID8gXCIgdmlzaWJsZVwiIDogXCJcIn1gfT5cclxuICAgIDxwPntwcm9wcy50ZXh0fTwvcD5cclxuICAgIDxidXR0b24gb25DbGljaz17KCk9PnByb3BzLm9uQ29uZmlybSgpfT5PSzwvYnV0dG9uPlxyXG4gICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+cHJvcHMub25DYW5jZWwoKX0+QXZicnl0PC9idXR0b24+XHJcbiAgPC9kaXY+O1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ291cnNlLCBDb3Vyc2VNb2R1bGUsIFRhc2ssIFVzZXJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUgfSBmcm9tIFwiLi4vLi4vd2Vla3BsYW5uZXIvd2Vla3BsYW5uZXItcGVyc2lzdGVkLXN0YXRlXCI7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCwgQmF0Y2hSdW5uZXIsIERvY3VtZW50QWNjZXNzIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyB1c2VyVGFza3NSZXBvIH0gZnJvbSAnLi4vLi4vLi4vcmVwb3MvdXNlci10YXNrcy1yZXBvJztcclxuaW1wb3J0IHsgYXJyYXlUb01hcCwgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xyXG5pbXBvcnQgeyBDb25maXJtYXRpb24gfSBmcm9tICcuL2NvbmZpcm1hdGlvbic7XHJcbmltcG9ydCB7IExhbmd1YWdlQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBsZWFybmluZ1Rhc2tzOiBMZWFybmluZ01vZHVsZVRhc2tbXVxyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIHdlZWtEYXRlOiBudW1iZXI7XHJcbiAgdXNlclRhc2tzOiBVc2VyVGFza1tdO1xyXG4gIGNvbmZpcm1hdGlvbnM6IHN0cmluZ1tdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExlYXJuaW5nTW9kdWxlVGFzayB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbiAgLyoqIGNvdXJzZU5hbWVcclxuICAgKiBGb3IgS0c6IGNvdXJzZU5hbWVcclxuICAgKiBGb3IgS1M6IFN1YmplY3QgbmFtZVxyXG4gICAqL1xyXG4gIGNvdXJzZU5hbWU6IHN0cmluZztcclxuICAvKiogbGVhcm5pbmdHb2FsXHJcbiAgICogRm9yIEtHOiBtb2R1bGUgbmFtZSBvciBsZWFybmluZyBnb2FsIG9mIHRoZSB0YXNrXHJcbiAgICogRm9yIEtTL3N0ZXAtY291cnNlOiBjb3Vyc2UgbmFtZVxyXG4gICAqIEZvciBLUy90aGVtZS1jb3Vyc2U6IGxlYXJuaW5nIGdvYWxcclxuICAgKi9cclxuICBsZWFybmluZ0dvYWw6IHN0cmluZztcclxuICAvKiogU3RlcFxyXG4gICAqIE9ubHkgcHJlc2VudCBpbiBLUy9zdGVwLWNvdXJzZVxyXG4gICAqL1xyXG4gIHN0ZXA/OiBudW1iZXI7XHJcbiAgLyoqIHRhc2tcclxuICAgKiBPbmx5IGZvciBjb3Vyc2VzIGJ1aWx0IGJ5IGNvdXJzZWJ1aWxkZXJcclxuICAgKi9cclxuICB0YXNrPzogVGFzaztcclxuICAvKiogY291cnNlXHJcbiAgICogT25seSBmb3IgY291cnNlcyBidWlsdCBieSBjb3Vyc2VidWlsZGVyXHJcbiAgICovXHJcbiAgY291cnNlPzogQ291cnNlO1xyXG4gIC8qKiBjb3Vyc2VJbmZvXHJcbiAgICogT25seSBmb3IgY291cnNlcyBidWlsZCBieSBzdWJqZWN0cGxhbm5lclxyXG4gICAqL1xyXG4gIGNvdXJzZUluZm8/OiB7XHJcbiAgICBzY2hvb2w6IHN0cmluZyAvLyBTY2hvb2wgbmFtZVxyXG4gICAgY291cnNlOiBzdHJpbmcgLy8gQ291cnNlIEluc3RhbmNlIElEXHJcbiAgICB0YWI6IHN0cmluZyAgICAvLyBDb3Vyc2VUYWIgSURcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUYXNrTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIHN0YXRpYyBjb250ZXh0VHlwZSA9IExhbmd1YWdlQ29udGV4dDtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHVzZXJUYXNrczogW10sXHJcbiAgICAgIHdlZWtEYXRlOiBEYXRlLm5vdygpLFxyXG4gICAgICBjb25maXJtYXRpb25zOiBbXVxyXG4gICAgfVxyXG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTsgICAgXHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZSAodXNlclRhc2tzOiBVc2VyVGFza1tdLCBwZXJzaXN0ZWQ6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUpIHtcclxuICAgIGlmIChwZXJzaXN0ZWQud2Vla0RhdGUgIT09IHRoaXMuc3RhdGUud2Vla0RhdGUpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgY29uZmlybWF0aW9uczogW11cclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICB1c2VyVGFza3MsXHJcbiAgICAgIHdlZWtEYXRlOiBwZXJzaXN0ZWQud2Vla0RhdGVcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB1c2VyVGFza3NSZXBvLnN1YnNjcmliZSh0aGlzLm9uQ2hhbmdlKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgdXNlclRhc2tzUmVwby51bnN1YnNjcmliZSh0aGlzLm9uQ2hhbmdlKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIHRvZ2dsZVRhc2sgKGxlYXJuaW5nVGFzazogTGVhcm5pbmdNb2R1bGVUYXNrKSB7XHJcbiAgICBjb25zdCB1c2VyVGFza3MgPSB0aGlzLnN0YXRlLnVzZXJUYXNrcy5maWx0ZXIodXQgPT4ge1xyXG4gICAgICByZXR1cm4gbGVhcm5pbmdUYXNrLnRhc2sgP1xyXG4gICAgICAgIHV0LnRhc2sgJiYgdXQudGFzay5zb21lKHQgPT4gdC5pZCA9PT0gbGVhcm5pbmdUYXNrLmlkKSA6XHJcbiAgICAgICAgdXQuc2l0ZVZpc2lvblBhZ2VJZCA9PT0gbGVhcm5pbmdUYXNrLmlkO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCB7d2Vla0RhdGV9ID0gdGhpcy5zdGF0ZTtcclxuICAgIFxyXG4gICAgaWYgKHVzZXJUYXNrcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgLy8gTm8gdGFzayBtYXRjaGVzIHRoaXMgbGVhcm5pbmdNb2R1bGVUYXNrIC0gbm90IHByZXNlbnQgaW4gd2Vla3BsYW5uZXIuXHJcbiAgICAgIGxldCBsYXRlc3RUaW1lU3RhbXAgPSBNYXRoLm1heC5hcHBseShcclxuICAgICAgICBNYXRoLm1heCxcclxuICAgICAgICBbd2Vla0RhdGVdLmNvbmNhdCh0aGlzLnN0YXRlLnVzZXJUYXNrcy5tYXAodCA9PiB0LmRhdGVUaW1lKSkpO1xyXG5cclxuICAgICAgY29uc3QgdXNlclRhc2s6IFVzZXJUYXNrID0ge1xyXG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgICAgY291cnNlTmFtZTogbGVhcm5pbmdUYXNrLmNvdXJzZU5hbWUsXHJcbiAgICAgICAgZGF0ZVRpbWU6IGxhdGVzdFRpbWVTdGFtcCArIDIwMDAsXHJcbiAgICAgICAgbGVhcm5pbmdHb2FsOiBsZWFybmluZ1Rhc2subGVhcm5pbmdHb2FsLFxyXG4gICAgICAgIG5hbWU6IGxlYXJuaW5nVGFzay5uYW1lLFxyXG4gICAgICAgIHVybDogbGVhcm5pbmdUYXNrLnVybCxcclxuICAgICAgICBhY2w6IFtcclxuICAgICAgICAgIC8vIERlZmF1bHQgQUNMOiBMZXQgdXNlciBzZWxmIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhpcyBpdGVtOlxyXG4gICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwiZW1haWxcIiwgZW52LmN1cnJlbnRVc2VyLm1haWwsIFwiU1wiKSxcclxuICAgICAgICAgIC8vIEFkZGl0aW9uYWwgQUNMOiBMZXQgZW1wbG95ZWVzIG9uIHNhbWUgc2Nob29sIGhhdmUgcmVhZCBhY2Nlc3MgdG8gaXQuXHJcbiAgICAgICAgICAvLyBUaGlzIGN1cnJlbnRseSBvbmx5IGFwcGxpZXMgdG8gdGFza3MgdGhhdCByZWZlciB0byBjb3Vyc2UgdGFza3MgKG5vdCBjdXN0b20gdGFza3MhKVxyXG4gICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwic2Nob29sUm9sZVwiLCBgJHtlbnYuY3VycmVudFVzZXIuc2Nob29sfS9FTVBMT1lFRWAsIFwiUlwiKVxyXG4gICAgICAgIF0ubWFwKGFjID0+IGFjLnRvU3RyaW5nKCkpXHJcbiAgICAgIH07XHJcbiAgICAgIGlmIChsZWFybmluZ1Rhc2sudGFzayAmJiBsZWFybmluZ1Rhc2sudGFzay5kZWFkbGluZSkge1xyXG4gICAgICAgIHVzZXJUYXNrLmRlYWRsaW5lID0gbGVhcm5pbmdUYXNrLnRhc2suZGVhZGxpbmU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGxlYXJuaW5nVGFzay50YXNrKSB7XHJcbiAgICAgICAgdXNlclRhc2sudGFzayA9IFtsZWFybmluZ1Rhc2sudGFza107XHJcbiAgICAgICAgaWYgKGxlYXJuaW5nVGFzay5jb3Vyc2UpIHtcclxuICAgICAgICAgIHVzZXJUYXNrLmNvdXJzZSA9IFtsZWFybmluZ1Rhc2suY291cnNlXTtcclxuICAgICAgICB9IGVsc2UgaWYgKGxlYXJuaW5nVGFzay5jb3Vyc2VJbmZvKSB7XHJcbiAgICAgICAgICB1c2VyVGFzay5jb3Vyc2VJbmZvID0gbGVhcm5pbmdUYXNrLmNvdXJzZUluZm87XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVzZXJUYXNrLnNpdGVWaXNpb25QYWdlSWQgPSBsZWFybmluZ1Rhc2suaWQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGxlYXJuaW5nVGFzay5zdGVwKSB7XHJcbiAgICAgICAgdXNlclRhc2suc3RlcCA9IGxlYXJuaW5nVGFzay5zdGVwO1xyXG4gICAgICB9XHJcbiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICB1c2VyVGFza3NSZXBvLnNldFdlZWtQbGFubmVyQm94T3BlbihsZWFybmluZ1Rhc2suY291cnNlTmFtZSwgdHJ1ZSksXHJcbiAgICAgICAgdXNlclRhc2tzUmVwby5pbnNlcnQoW3VzZXJUYXNrXSldKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIEFscmVhZHkgcHJlc2VudCBpbiB3ZWVrcGxhbm5lci4gSXQncyB0aW1lIHRvIGRlbGV0ZSB0aG9zZSB0aGF0IG1hdGNoZWQgdXMuXHJcbiAgICAgIGF3YWl0IHVzZXJUYXNrc1JlcG8uZGVsZXRlKHVzZXJUYXNrcy5tYXAodCA9PiB0LmlkKSk7XHJcbiAgICB9XHJcbiAgICBcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcclxuICAgIGNvbnN0IHtsZWFybmluZ1Rhc2tzfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB1c2VyVGFza3MgPSBhcnJheVRvTWFwKHRoaXMuc3RhdGUudXNlclRhc2tzLCB1dCA9PiB1dC50YXNrICYmIHV0LnRhc2subGVuZ3RoID4gMCA/XHJcbiAgICAgIHV0LnRhc2subWFwKHQgPT4gdC5pZClbMF0gOiAvLyBjb3Vyc2UtYnVpbGRlciB0YXNrcyBsb29rZWQgdXAgYnkgaWRcclxuICAgICAgdXQuc2l0ZVZpc2lvblBhZ2VJZCA/IHV0LnNpdGVWaXNpb25QYWdlSWQgOiAvLyBub24tY291cnNlLWJ1aWxkZXIgdGFza3NcclxuICAgICAgdXQudXJsKTtcclxuICAgIGNvbnN0IHtjb25maXJtYXRpb25zfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB3ZWVrUGxhbm5lcldlZWsgPSBtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkud2VlaygpO1xyXG4gICAgY29uc3QgY3VycmVudFdlZWsgPSBtb21lbnQoKS53ZWVrKCk7XHJcbiAgICBjb25zdCBmb3JXZWVrU3RyaW5nID0gd2Vla1BsYW5uZXJXZWVrID09PSBjdXJyZW50V2VlayA/IFwiXCIgOlxyXG4gICAgd2Vla1BsYW5uZXJXZWVrID09PSBjdXJyZW50V2VlayArIDEgPyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwidGFza0xpc3QubmV4dFdlZWtUYXNrXCIsIGRlZmF1bHRNZXNzYWdlOlwiZsO2ciBuw6RzdGEgdmVja2EgKHZ7d2Vla30pXCJ9LCB7d2Vlazogd2Vla1BsYW5uZXJXZWVrfSkgOlxyXG4gICAgd2Vla1BsYW5uZXJXZWVrID09PSBjdXJyZW50V2VlayAtIDEgPyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwidGFza0xpc3QubGFzdFdlZWtUYXNrXCIsIGRlZmF1bHRNZXNzYWdlOlwiZsO2ciBmw7ZycmEgdmVja2FuICh2e3dlZWt9KVwifSwge3dlZWs6IHdlZWtQbGFubmVyV2Vla30pIDpcclxuICAgIGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJ0YXNrTGlzdC5jdXJyZW50V2Vla1Rhc2tcIiwgZGVmYXVsdE1lc3NhZ2U6XCJmw7ZyIHZlY2thIHt3ZWVrfVwifSwge3dlZWs6IHdlZWtQbGFubmVyV2Vla30pO1xyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cclxuICAgICAge2xlYXJuaW5nVGFza3MubWFwKChsZWFybmluZ1Rhc2ssIGlkeCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhc2tMb29rdXBJZCA9IGxlYXJuaW5nVGFzay5pZDtcclxuICAgICAgICBjb25zdCB1c2VyVGFzayA9IHVzZXJUYXNrc1t0YXNrTG9va3VwSWRdIHx8IHskbWV0YTogJ2RlbGV0ZWQnfSBhcyBQYXJ0aWFsPFVzZXJUYXNrPjsgLy8gTm8gZXhpc3QgPSAkbWV0YTogJ2RlbGV0ZWQnXHJcbiAgICAgICAgY29uc3QgaXNXb3JraW5nID0gdXNlclRhc2suJG1ldGEgPT09ICdhZGRpbmcnIHx8IHVzZXJUYXNrLiRtZXRhID09PSAnZGVsZXRpbmcnO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdXNlclRhc2suJG1ldGEgIT09ICdkZWxldGVkJyAmJiB1c2VyVGFzay4kbWV0YSAhPT0gJ2RlbGV0aW5nJztcclxuICAgICAgICBjb25zdCBkZXNjcmliZWRBY3Rpb24gPSBzZWxlY3RlZCA/XHJcbiAgICAgICAgaW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcInRhc2tMaXN0LnJlbW92ZVRhc2tGcm9tV2Vla2x5UGxhbm5pbmdcIiwgZGVmYXVsdE1lc3NhZ2U6XCJUYSBib3J0IHVwcGdpZnRlbiBmcsOlbiBlZ2VuIHZlY2tvcGxhbmVyaW5nIHt3ZWVrfVwifSwge3dlZWs6IGZvcldlZWtTdHJpbmd9KTpcclxuICAgICAgICBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwidGFza0xpc3QuYWRkVGFza1RvV2Vla2x5UGxhbm5pbmdcIiwgZGVmYXVsdE1lc3NhZ2U6XCJMw6RnZyB0aWxsIHVwcGdpZnRlbiBpIGVnZW4gdmVja29wbGFuZXJpbmcge3dlZWt9XCJ9LCB7d2VlazogZm9yV2Vla1N0cmluZ30pXHJcbiAgICAgICAgY29uc3QgY29uZmlybWF0aW9uVmlzaWJsZSA9XHJcbiAgICAgICAgICBjb25maXJtYXRpb25zLnNvbWUodGlkID0+IHRhc2tMb29rdXBJZCA9PT0gdGlkKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIDxkaXYga2V5PXtsZWFybmluZ1Rhc2suaWR9PjxkaXYga2V5PXt0YXNrTG9va3VwSWR9IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgc2VsZWN0ZWRCb3gke3NlbGVjdGVkID8gJyBzZWxlY3RlZCcgOiAnJ31gfVxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e2lzV29ya2luZyA/IHtvcGFjaXR5OiAwLjV9OiB7fX1cclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT4haXNXb3JraW5nICYmIHdlZWtQbGFubmVyV2VlayA9PT0gY3VycmVudFdlZWsgP1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVRhc2sobGVhcm5pbmdUYXNrKSA6XHJcbiAgICAgICAgICAgICAgICAgIGNvbmZpcm1hdGlvblZpc2libGUgPyBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtjb25maXJtYXRpb25zOiBjb25maXJtYXRpb25zLmZpbHRlcih0aWQgPT4gdGlkICE9PSB0YXNrTG9va3VwSWQpfSkgOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NvbmZpcm1hdGlvbnM6IFsuLi5jb25maXJtYXRpb25zXS5jb25jYXQodGFza0xvb2t1cElkKX0pfVxyXG4gICAgICAgICAgICAgICAgdGl0bGU9e2Rlc2NyaWJlZEFjdGlvbn0+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDxhIGhyZWY9e2xlYXJuaW5nVGFzay51cmx9PntsZWFybmluZ1Rhc2submFtZX08L2E+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Q29uZmlybWF0aW9uXHJcbiAgICAgICAgICAgIHZpc2libGU9e2NvbmZpcm1hdGlvblZpc2libGV9XHJcbiAgICAgICAgICAgIHRleHQ9e2Rlc2NyaWJlZEFjdGlvbn1cclxuICAgICAgICAgICAgb25Db25maXJtPXsoKT0+e1xyXG4gICAgICAgICAgICAgIHRoaXMudG9nZ2xlVGFzayhsZWFybmluZ1Rhc2spO1xyXG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NvbmZpcm1hdGlvbnM6IGNvbmZpcm1hdGlvbnMuZmlsdGVyKHRpZCA9PiB0aWQgIT09IHRhc2tMb29rdXBJZCl9KTtcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgb25DYW5jZWw9eygpPT57XHJcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29uZmlybWF0aW9uczogY29uZmlybWF0aW9ucy5maWx0ZXIodGlkID0+IHRpZCAhPT0gdGFza0xvb2t1cElkKX0pO1xyXG4gICAgICAgICAgICB9fSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIH1cclxuICAgICAgKX1cclxuICAgIDwvZGl2PlxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvdXJzZSwgQ291cnNlTW9kdWxlLCBUYXNrLCBEb2N1bWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSBcIi4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveFwiO1xyXG5pbXBvcnQgeyBhcnJheVRvTG9va3VwIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMgfSBmcm9tICcuLi9jb3Vyc2VzL2J1c2luZXNzLWxvZ2ljJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgb3B0aW9uczogKERvY3VtZW50ICYge2dyb3VwPzogc3RyaW5nfSlbXTtcclxuICB0aXRsZTtcclxuICBtYXJrTW9kZTogYm9vbGVhbjtcclxuICBtYXJrZWRJZHM6IHN0cmluZ1tdO1xyXG4gIG1pZ3JhdGVkSWRzPzoge1tpZDogc3RyaW5nXTogYW55fTtcclxuICB1bmNvdmVyZWRJZHM/OiB7W2lkOiBzdHJpbmddOiB0cnVlfTtcclxuICBvbk1hcmtDaGFuZ2VkOiAoaWQ6IHN0cmluZywgaXNNYXJrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZWxlY3RSZWxhdGVkRG9jcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge29wdGlvbnMsIHRpdGxlLCBtYXJrZWRJZHMsIG1hcmtNb2RlLCBtaWdyYXRlZElkcywgdW5jb3ZlcmVkSWRzfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCBncm91cGVkT3B0aW9ucyA9IGFycmF5VG9Mb29rdXAob3B0aW9ucywgZCA9PiBkLmdyb3VwIHx8IFwiZGVmYXVsdFwiKTtcclxuICAgIGNvbnN0IGdyb3VwcyA9IE9iamVjdC5rZXlzKGdyb3VwZWRPcHRpb25zKTtcclxuICAgIHJldHVybiA8T3BlbkNsb3NlQm94IHRpdGxlPXs8cD57dGl0bGV9PC9wPn0gY2xhc3NOYW1lPVwibGFyZ2VyXCI+XHJcbiAgICAgICAge2dyb3Vwcy5tYXAoZ3JvdXAgPT4gPFJlYWN0LkZyYWdtZW50IGtleT17Z3JvdXB9PlxyXG4gICAgICAgICAge2dyb3Vwcy5sZW5ndGggPT09IDEgPyBudWxsIDogPD48YnIvPjxoNT57Z3JvdXB9PC9oNT48aHIvPjwvPn1cclxuICAgICAgICAgIHtncm91cGVkT3B0aW9uc1tncm91cF0ubWFwKG9wdGlvbiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkID0gbWFya2VkSWRzLnNvbWUoeCA9PiB4ID09PSBvcHRpb24uaWQpO1xyXG4gICAgICAgICAgICBjb25zdCBpc01pZ3JhdGVkID0gbWlncmF0ZWRJZHMgJiYgISFtaWdyYXRlZElkc1tvcHRpb24uaWRdO1xyXG4gICAgICAgICAgICBjb25zdCBpc1VuY292ZXJlZCA9IHVuY292ZXJlZElkcyAmJiB1bmNvdmVyZWRJZHNbb3B0aW9uLmlkXTtcclxuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17b3B0aW9uLmlkfSBvbkNsaWNrPXsoKT0+XHJcbiAgICAgICAgICAgICAgbWFya01vZGUgJiYgdGhpcy5wcm9wcy5vbk1hcmtDaGFuZ2VkKG9wdGlvbi5pZCwgIWlzTWFya2VkKX0+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiICtcclxuICAgICAgICAgICAgICAgIChtYXJrTW9kZSA/IFwiIHNlbGVjdGFibGVcIiA6IFwiXCIpICtcclxuICAgICAgICAgICAgICAgIChpc01hcmtlZCA/IFwiIG1hcmtlZEdyZWVuXCIgOiAoaXNVbmNvdmVyZWQgP1xyXG4gICAgICAgICAgICAgICAgICBcIiBtYXJrZWRSZWRcIjpcclxuICAgICAgICAgICAgICAgICAgXCJcIikpICtcclxuICAgICAgICAgICAgICAgIChpc01pZ3JhdGVkID8gXCIgbWlncmF0ZWRcIiA6IFwiXCIpfVxyXG4gICAgICAgICAgICAgICAgdGl0bGU9e2lzTWlncmF0ZWQgP1xyXG4gICAgICAgICAgICAgICAgICBtYXJrTW9kZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgYFNrb2x2ZXJrZXQgaGFyIHVwcGRhdGVyYXQgdGV4dGVucyBmb3JtdWxlcmluZy4gRHUga2FuIGdyYW5za2Egw6RuZHJpbmdlbiBnZW5vbSBhdHQgZsOkbGxhIHV0IHZhcm5pbmdzYm94ZW4gdGlsbCBow7ZnZXIsIG1lZCB0aXRlbCBcIlVwcGRhdGVyYWRlIGZvcm11bGVyaW5nYXIgZnLDpW4gU2tvbHZlcmtldFwiYCA6XHJcbiAgICAgICAgICAgICAgICAgICAgYFNrb2x2ZXJrZXQgaGFyIHVwcGRhdGVyYXQgdGV4dGVucyBmb3JtdWxlcmluZywgbWVuIGRldHRhIGhhciDDpG5udSBpbnRlIGdyYW5za2F0cyBhdiB1cHBnaWZ0ZW5zIHJlZGlnZXJpbmdzYmVow7ZyaWdlYCA6XHJcbiAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH0+XHJcbiAgICAgICAgICAgICAgICA8cCBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogb3B0aW9uLm5hbWV9fSAvPlxyXG4gICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PjtcclxuICAgICAgICAgIH0pfVxyXG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+KX1cclxuICAgIDwvT3BlbkNsb3NlQm94PlxyXG4gIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgbGVmdDogUmVhY3QuUmVhY3ROb2RlO1xyXG4gIHJpZ2h0OiBSZWFjdC5SZWFjdE5vZGU7XHJcbiAgcmlnaHRXaWR0aDogMSB8IDIgfCAzIHwgNCB8IDUgfCA2IHwgNyB8IDggfMKgOSB8IDEwIHwgMTE7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUd29Db2x1bW5zUGFnZSA9ICh7IGxlZnQsIHJpZ2h0LCByaWdodFdpZHRoIH06IFByb3BzKSA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0XCI+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tMTJcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1zcGFjZXItMjBweHZ0IHN2LXZlcnRpY2FsIHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytcm93IHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tJHsxMi1yaWdodFdpZHRofWB9PlxyXG4gICAgICAgICAgICAgIHtsZWZ0fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Bzdi1sYXlvdXQgc3YtY29sdW1uLSR7cmlnaHRXaWR0aH1gfT5cclxuICAgICAgICAgICAgICB7cmlnaHR9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+XHJcbik7XHJcbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgaXNUZWFjaGVyQXRTY2hvb2wgfSBmcm9tICcuLi8uLi8uLi9hY2Nlc3MtY29udHJvbCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNFbXBsb3llZShhdFNjaG9vbD86IHN0cmluZykge1xyXG4gIHJldHVybiBhdFNjaG9vbCA/XHJcbiAgICBpc1RlYWNoZXJBdFNjaG9vbChlbnYuY3VycmVudFVzZXIsIGF0U2Nob29sKSB8fCBlbnYuY3VycmVudFVzZXIucm9sZXMuaW5jbHVkZXMoXCJBRE1JTlwiKSA6XHJcbiAgICBlbnYuY3VycmVudFVzZXIucm9sZXMuc29tZShyb2xlID0+IHJvbGUgPT09ICdFTVBMT1lFRScgfHwgcm9sZSA9PT0gJ0FETUlOJyk7XHJcbn1cclxuIiwiaW1wb3J0IHtVc2VyfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcblxyXG5leHBvcnQgY29uc3QgdXNlcnMgOiBVc2VyW10gPSBbe1xyXG4gICAgZGlzcGxheU5hbWU6IFwiQWRtaW5pc3RyYXTDtnJcIixcclxuICAgIG1haWw6IFwidmVtZW5kb0BrZWRzY2hvb2xzLmNvbVwiLFxyXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRSddLFxyXG4gICAgc2Nob29sOiAnS0VEJyxcclxuICAgIHVzZXJuYW1lOiBcImFkbWluXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJEYXZpZFwiLFxyXG4gICAgbWFpbDogXCJkYXZpZC5mYWhsYW5kZXJAdmVtZW5kby5zZVwiLFxyXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRSddLFxyXG4gICAgc2Nob29sOiAnS0VEJyxcclxuICAgIHVzZXJuYW1lOiBcImRhdmlkXCJcclxufSxcclxue1xyXG4gICAgZGlzcGxheU5hbWU6IFwiQW5kcmVpXCIsXHJcbiAgICBtYWlsOiBcImFuZHJlaS5zcGF0YXJlbHVAdmVtZW5kby5zZVwiLFxyXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRScsJ1NUVURFTlQnXSxcclxuICAgIHNjaG9vbDogJ0tFRCcsXHJcbiAgICB1c2VybmFtZTogXCJhbmRyZWlcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIkNhcmwgSG9sbWJlcmdcIixcclxuICAgIG1haWw6IFwiY2FybC5ob2xtYmVyZ0BrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRSddLFxyXG4gICAgc2Nob29sOiAnTm9ycmvDtnBpbmcnLFxyXG4gICAgdXNlcm5hbWU6IFwiY2FybC5ob2xtYmVyZ0BrdW5za2Fwc2d5bW5hc2lldC5zZVwiXHJcbn0seyBcclxuICAgIGRpc3BsYXlOYW1lOiBcIkNhcmxcIixcclxuICAgIG1haWw6IFwiY2FybEBrZWRzY2hvb2xzLmNvbVwiLFxyXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRScsJ1NUVURFTlQnXSxcclxuICAgIHNjaG9vbDogJ0tFRCcsXHJcbiAgICB1c2VybmFtZTogXCJjYXJsXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJkYXZpZC5mYWhsYW5kZXJAa2Vkc2Nob29scy5jb21cIixcclxuICAgIG1haWw6IFwiZGF2aWQuZmFobGFuZGVyQGtlZHNjaG9vbHMuY29tXCIsXHJcbiAgICByb2xlczogW1wiQURNSU5cIiwgXCJFTVBMT1lFRVwiLCBcIlNUVURFTlRcIl0sXHJcbiAgICBzY2hvb2w6IFwiS0VEXCIsXHJcbiAgICB1c2VybmFtZTogXCJkYXZpZC5mYWhsYW5kZXJAa2Vkc2Nob29scy5jb21cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIlRlYWNoZXIgMVwiLFxyXG4gICAgbWFpbDogXCJ0ZWFjaGVyMS5jbGFzc3Jvb21Aa2Vkc2Nob29scy5jb21cIixcclxuICAgIHJvbGVzOiBbJ0VNUExPWUVFJ10sXHJcbiAgICBzY2hvb2w6ICdLRUQnLFxyXG4gICAgdXNlcm5hbWU6IFwidGVhY2hlcjEuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tXCJcclxufSx7IFxyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXYxXCIsXHJcbiAgICBtYWlsOiBcInVidzY3NTdAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXHJcbiAgICByb2xlczogWydTVFVERU5UJ10sXHJcbiAgICBzY2hvb2w6ICdVcHBzYWxhJyxcclxuICAgIHVzZXJuYW1lOiBcInVidzY3NTdAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjJcIixcclxuICAgIG1haWw6IFwidW1zNDMwMkBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIixcclxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcclxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxyXG4gICAgdXNlcm5hbWU6IFwidW1zNDMwMkBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2M1wiLFxyXG4gICAgbWFpbDogXCJ1aGgzNDYwQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxyXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXHJcbiAgICB1c2VybmFtZTogXCJ1aGgzNDYwQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY0KGZlbCBnb2FscyBpc3N1ZSlcIixcclxuICAgIG1haWw6IFwidW10NjgyNkBlZHUua3Vuc2thcHNza29sYW4uc2VcIixcclxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxyXG4gICAgc2Nob29sOiBcIlVwcHNhbGFcIixcclxuICAgIHVzZXJuYW1lOiBcInVtdDY4MjZAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjUoZnV0dXJlIGFiaWxpdGllcylcIixcclxuICAgIG1haWw6IFwidWpnMzgzM0BlZHUua3Vuc2thcHNza29sYW4uc2VcIixcclxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxyXG4gICAgc2Nob29sOiBcIlVwcHNhbGFcIixcclxuICAgIHVzZXJuYW1lOiBcInVqZzM4MzNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjYoZnV0dXJlIGFiaWxpdGllcylcIixcclxuICAgIG1haWw6IFwidWp0MTM2M0BlZHUua3Vuc2thcHNza29sYW4uc2VcIixcclxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxyXG4gICAgc2Nob29sOiBcIlVwcHNhbGFcIixcclxuICAgIHVzZXJuYW1lOiBcInVqdDEzNjNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtTMOkcmFyZTFcIixcclxuICAgIG1haWw6IFwicmlja2FyZC5hbGJlcnRzc29uQGt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXHJcbiAgICByb2xlczogWydFTVBMT1lFRSddLFxyXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXHJcbiAgICB1c2VybmFtZTogXCJyaWNrYXJkLmFsYmVydHNzb25Aa3Vuc2thcHNneW1uYXNpZXQuc2VcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIkVEU1Rlc3RVc2VyR3ltbmFzaXVtXCIsXHJcbiAgICBtYWlsOiBcInVoaDMyMDBAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXHJcbiAgICAvL21haWw6IFwiVUhIMzIwMEBFRFUuS1VOU0tBUFNHWU1OQVNJRVQuU0VcIixcclxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxyXG4gICAgdXNlcm5hbWU6IFwiRURTVGVzdFVzZXIxXCIsXHJcbiAgICBzY2hvb2w6IFwiS0VEXCIsXHJcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwidmVtZW5kby5lbGV2QGtlZHNjaG9vbHMuY29tXCIsXHJcbiAgICBtYWlsOiBcInZlbWVuZG8uZWxldkBrZWRzY2hvb2xzLmNvbVwiLFxyXG4gICAgcm9sZXM6IFtcIlNUVURFTlRcIl0sXHJcbiAgICB1c2VybmFtZTogXCJ2ZW1lbmRvLmVsZXZAa2Vkc2Nob29scy5jb21cIixcclxuICAgIHNjaG9vbDogXCJLRURcIixcclxuICAgIHNjaG9vbFR5cGU6IFwiR3ltbmFzaXVtXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJNZWRhcmJldGFyZSBOYWNrYVwiLFxyXG4gICAgbWFpbDogXCJtZWRhcmJldGFyZS5uYWNrYUBrdW5za2Fwc3Nrb2xhbi5zZVwiLFxyXG4gICAgcm9sZXM6IFtcIkVNUExPWUVFXCJdLFxyXG4gICAgdXNlcm5hbWU6IFwibWVkYXJiZXRhcmUubmFja2EvS1NcIixcclxuICAgIHNjaG9vbDogXCJOYWNrYVwiLFxyXG4gICAgc2Nob29sVHlwZTogXCJHcnVuZHNrb2xvclwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiTWVkYXJiZXRhcmUgR2xvYmVuXCIsXHJcbiAgICBtYWlsOiBcIm1lZGFyYmV0YXJlLmdsb2JlbkBrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgcm9sZXM6IFtcIkVNUExPWUVFXCJdLFxyXG4gICAgdXNlcm5hbWU6IFwibWVkYXJiZXRhcmUuZ2xvYmVuL0tTXCIsXHJcbiAgICBzY2hvb2w6IFwiR2xvYmVuXCIsXHJcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiRWxldiBHbG9iZW5cIixcclxuICAgIG1haWw6IFwiZWxldi5nbG9iZW5AZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXHJcbiAgICBzY2hvb2xHcmFkZTogMixcclxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcclxuICAgIHVzZXJuYW1lOiBcImVsZXYuZ2xvYmVuXCIsXHJcbiAgICBzY2hvb2w6IFwiR2xvYmVuXCIsXHJcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiRWxldiBCb3LDpXNcIixcclxuICAgIG1haWw6IFwiZWxldi5ib3Jhc0BlZHUua3Vuc2thcHNza29sYW4uc2VcIixcclxuICAgIHNjaG9vbEdyYWRlOiA3LFxyXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxyXG4gICAgdXNlcm5hbWU6IFwiZWxldi5ib3Jhc1wiLFxyXG4gICAgc2Nob29sOiBcIkJvcsOlc1wiLFxyXG4gICAgc2Nob29sVHlwZTogXCJHcnVuZHNrb2xvclwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiRWxldiBCb3Jsw6RuZ2VcIixcclxuICAgIG1haWw6IFwiZWxldi5ib3JsYW5nZUBlZHUua3Vuc2thcHNza29sYW4uc2VcIixcclxuICAgIHNjaG9vbEdyYWRlOiA5LFxyXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxyXG4gICAgdXNlcm5hbWU6ICdlbGV2LmJvcmxhbmdlL0tTJyxcclxuICAgIHNjaG9vbDogJ0JvcmzDpG5nZScsXHJcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiUm9sbC1sw7ZzXCIsXHJcbiAgICBtYWlsOiBcIm5vbmVAa3Vuc2thcHNza29sYW4uc2VcIixcclxuICAgIHVzZXJuYW1lOiBcIm5vbmVcIixcclxuICAgIHJvbGVzOiBbXVxyXG59XTtcclxuXHJcbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5cclxuaWYgKGNmZy5LRURfTE9DQUxFID09PSBcInN2XCIpIHtcclxuICAgIG1vbWVudC51cGRhdGVMb2NhbGUoJ3N2Jywge1xyXG4gICAgICAgIG1vbnRoczogJ2phbnVhcmlfZmVicnVhcmlfbWFyc19hcHJpbF9tYWpfanVuaV9qdWxpX2F1Z3VzdGlfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXHJcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcclxuICAgICAgICB3ZWVrZGF5czogJ3PDtm5kYWdfbcOlbmRhZ190aXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDtnJkYWcnLnNwbGl0KCdfJyksXHJcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ3PDtm5fbcOlbl90aXNfb25zX3Rvcl9mcmVfbMO2cicuc3BsaXQoJ18nKSxcclxuICAgICAgICB3ZWVrZGF5c01pbjogJ3PDtl9tw6VfdGlfb25fdG9fZnJfbMO2Jy5zcGxpdCgnXycpLFxyXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XHJcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxyXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXHJcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcclxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXHJcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcclxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxyXG4gICAgICAgICAgICBsbGw6ICdEIE1NTSBZWVlZIEhIOm1tJyxcclxuICAgICAgICAgICAgbGxsbDogJ2RkZCBEIE1NTSBZWVlZIEhIOm1tJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2FsZW5kYXI6IHtcclxuICAgICAgICAgICAgc2FtZURheTogJ1tJZGFnXSBMVCcsXHJcbiAgICAgICAgICAgIG5leHREYXk6ICdbSW1vcmdvbl0gTFQnLFxyXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0lnw6VyXSBMVCcsXHJcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW1DDpV0gZGRkZCBMVCcsXHJcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0ldIGRkZGRbc10gTFQnLFxyXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXHJcbiAgICAgICAgfSxcclxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcclxuICAgICAgICAgICAgZnV0dXJlOiAnb20gJXMnLFxyXG4gICAgICAgICAgICBwYXN0OiAnZsO2ciAlcyBzZWRhbicsXHJcbiAgICAgICAgICAgIHM6ICduw6VncmEgc2VrdW5kZXInLFxyXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGVyJyxcclxuICAgICAgICAgICAgbTogJ2VuIG1pbnV0JyxcclxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVyJyxcclxuICAgICAgICAgICAgaDogJ2VuIHRpbW1lJyxcclxuICAgICAgICAgICAgaGg6ICclZCB0aW1tYXInLFxyXG4gICAgICAgICAgICBkOiAnZW4gZGFnJyxcclxuICAgICAgICAgICAgZGQ6ICclZCBkYWdhcicsXHJcbiAgICAgICAgICAgIE06ICdlbiBtw6VuYWQnLFxyXG4gICAgICAgICAgICBNTTogJyVkIG3DpW5hZGVyJyxcclxuICAgICAgICAgICAgeTogJ2V0dCDDpXInLFxyXG4gICAgICAgICAgICB5eTogJyVkIMOlcidcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlfGEpLyxcclxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XHJcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXHJcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICdlJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ2EnIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ2EnIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdlJyA6ICdlJztcclxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHdlZWs6IHtcclxuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cclxuICAgICAgICAgICAgZG95OiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuZXhwb3J0IGNvbnN0IGxvY2FsTW9tZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIG1vbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmxvY2FsZShjZmcuS0VEX0xPQ0FMRSk7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge0x9IGZyb20gJy4vdXRpbHMnO1xyXG5pbXBvcnQge2RifSBmcm9tICcuLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFdyaXRlciB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IFJlbW92ZUl0ZW0gfSBmcm9tICcuLi9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtJztcclxuXHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGVycm9yczogRXJyb3JTdHJ1Y3RbXTtcclxuICBpbmZvczogc3RyaW5nW107XHJcbiAgLy9kYldyaXRlclJldHJ5YWJsZUVycm9yPzogRXJyb3I7XHJcbiAgZGJXcml0ZXJJc1NhdmluZz86IGJvb2xlYW47XHJcbiAgZGJXcml0ZXJJc0VkaXRlZD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmludGVyZmFjZSBFcnJvclN0cnVjdCB7XHJcbiAgbWVzc2FnZTogc3RyaW5nO1xyXG4gIHJldHJ5YWJsZT86IGJvb2xlYW47XHJcbiAgZGV0YWlscz86IEVycm9yO1xyXG4gIHNob3dEZXRhaWxzPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVycm9yU3VjY2Vzc0ZlZWRiYWNrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZT17XHJcbiAgICAgIGVycm9yczogW10sXHJcbiAgICAgIGluZm9zOiBbXVxyXG4gICAgfTtcclxuICAgIHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbiA9IHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbi5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fZXJyb3IgPSB0aGlzLl9lcnJvci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fY3VzdG9tRXJyb3IgPSB0aGlzLl9jdXN0b21FcnJvci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fb25JbmZvID0gdGhpcy5fb25JbmZvLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9kYldyaXRlckVycm9yID0gdGhpcy5fZGJXcml0ZXJFcnJvci5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5fZGJXcml0ZXJTdGF0ZUNoYW5nZWQgPSB0aGlzLl9kYldyaXRlclN0YXRlQ2hhbmdlZC5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfYWRkRXJyb3IobWVzc2FnZTogc3RyaW5nLCBkZXRhaWxzPzogRXJyb3IsIHJldHJ5YWJsZT86IGJvb2xlYW4pIHtcclxuICAgIC8vY29uc29sZS5lcnJvcihtZXNzYWdlLCB7cmV0cnlhYmxlOiAhIXJldHJ5YWJsZSwgZGV0YWlsc30pO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSgoe2Vycm9yc30pID0+IHtcclxuICAgICAgaWYgKGVycm9ycy5zb21lKGUgPT4gZS5tZXNzYWdlID09PSBtZXNzYWdlKSkgcmV0dXJuIHtlcnJvcnN9O1xyXG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDIpIGVycm9ycyA9IGVycm9ycy5zbGljZSgxKTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBlcnJvcnM6IGVycm9ycy5jb25jYXQoW3ttZXNzYWdlLCBkZXRhaWxzLCByZXRyeWFibGV9XSlcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgLy8gUmVtb3ZlIG5vbi1yZXRyeWFibGUgZXJyb3JzIGFmdGVyIDMwIHNlY29uZHM6XHJcbiAgICBpZiAoIXJldHJ5YWJsZSkgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4gKHtcclxuICAgICAgICBlcnJvcnM6IGVycm9ycy5maWx0ZXIoZSA9PiBlLm1lc3NhZ2UgIT09IG1lc3NhZ2UpXHJcbiAgICAgIH0pKTtcclxuICAgIH0sIDMwMDAwKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2FkZEluZm8obWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBpZiAobWVzc2FnZSA9PT0gXCJcIikge1xyXG4gICAgICAvLyBUdXJuIG9mZiBjdXJyZW50IGluZm8gbWVzc2FnZXNcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7aW5mb3M6IFtdfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuc2V0U3RhdGUoKHtpbmZvc30pID0+IHtcclxuICAgICAgaWYgKGluZm9zLnNvbWUoaW5mbyA9PiBpbmZvID09PSBtZXNzYWdlKSkgcmV0dXJuIHtpbmZvc307XHJcbiAgICAgIGlmIChpbmZvcy5sZW5ndGggPiAxKSBpbmZvcyA9IGluZm9zLnNsaWNlKDEpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGluZm9zOiBbbWVzc2FnZV0gLy8gd2FzOiBpbmZvcy5jb25jYXQobWVzc2FnZSkuIEJ1dCBpdCBzdWNrcyFcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgLy8gUmVtb3ZlIGluZm8gbWVzc2FnZSBhZnRlciAxMCBzZWNvbmRzOlxyXG4gICAgc2V0VGltZW91dCgoKT0+e1xyXG4gICAgICB0aGlzLnNldFN0YXRlKCh7aW5mb3N9KSA9PiAoe1xyXG4gICAgICAgIGluZm9zOiBpbmZvcy5maWx0ZXIobXNnID0+IG1zZyAhPT0gbWVzc2FnZSlcclxuICAgICAgfSkpO1xyXG4gICAgfSwgMTAwMDApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfZGJXcml0ZXJFcnJvciAoZXJyb3I6IEVycm9yLCByZXRyeWFibGU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuX2FkZEVycm9yKGBEZXQgZ8OlciBpbnRlIGF0dCBzcGFyYSB0aWxsIHNlcnZlcm5gLCBlcnJvciwgcmV0cnlhYmxlKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgX2RiV3JpdGVyU3RhdGVDaGFuZ2VkICh7aXNFZGl0ZWQsIGlzU2F2aW5nfTogS2VkQmFja2VuZFdyaXRlcikge1xyXG4gICAgaWYgKCFpc0VkaXRlZCkge1xyXG4gICAgICAvLyBJZiBpc0VkaXRlZCBpcyBmYWxzZSwgYSBzdWNjZXNzZnVsIHdyaXRlIG11c3QgaGF2ZSBoYXBwZW5lZCwgYW5kXHJcbiAgICAgIC8vIHRoZXJlIGNhbm5vdCBiZSBhbnkgcmV0cnlhYmxlIGVycm9yIGFueW1vcmVcclxuICAgICAgdGhpcy5zZXRTdGF0ZSgoe2Vycm9yc30pID0+IHtcclxuICAgICAgICBlcnJvcnMgPSBlcnJvcnMuZmlsdGVyKGUgPT4gIWUucmV0cnlhYmxlKTtcclxuICAgICAgICByZXR1cm4ge2Vycm9yc307XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgIGRiV3JpdGVySXNFZGl0ZWQ6IGlzRWRpdGVkLFxyXG4gICAgICBkYldyaXRlcklzU2F2aW5nOiBpc1NhdmluZ1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCB0aGlzLl91bmhhbmRsZWRSZWplY3Rpb24pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fZXJyb3IpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2N1c3RvbWVycm9yJywgdGhpcy5fY3VzdG9tRXJyb3IpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2luZm8nLCB0aGlzLl9vbkluZm8pO1xyXG4gICAgZGIud3JpdGVyLm9uRXJyb3IodGhpcy5fZGJXcml0ZXJFcnJvcik7XHJcbiAgICBkYi53cml0ZXIub25TdGF0ZUNoYW5nZSh0aGlzLl9kYldyaXRlclN0YXRlQ2hhbmdlZCk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcclxuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCB0aGlzLl91bmhhbmRsZWRSZWplY3Rpb24pO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fZXJyb3IpO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2N1c3RvbWVycm9yJywgdGhpcy5fY3VzdG9tRXJyb3IpO1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2luZm8nLCB0aGlzLl9vbkluZm8pO1xyXG4gICAgZGIud3JpdGVyLm9mZih0aGlzLl9kYldyaXRlckVycm9yKTtcclxuICAgIGRiLndyaXRlci5vZmYodGhpcy5fZGJXcml0ZXJTdGF0ZUNoYW5nZWQpO1xyXG4gIH1cclxuXHJcbiAgX3VuaGFuZGxlZFJlamVjdGlvbiAoZXY6IEV2ZW50ICYge3JlYXNvbjogRXJyb3J9KSB7XHJcbiAgICB0aGlzLl9hZGRFcnJvcihgRXR0IG9rw6RudCBmZWwgaW50csOkZmZhZGUuLi5gLCBldi5yZWFzb24pO1xyXG4gIH1cclxuXHJcbiAgX2Vycm9yIChldjogRXZlbnQgJiB7ZXJyb3I6IEVycm9yfSkge1xyXG4gICAgdGhpcy5fYWRkRXJyb3IoZXYuZXJyb3IgPyBldi5lcnJvci5tZXNzYWdlIDogYEV0dCBva8OkbnQgZmVsIGludHLDpGZmYWRlLi4uYCwgZXYuZXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgX2N1c3RvbUVycm9yIChldjogQ3VzdG9tRXZlbnQpIHtcclxuICAgIHRoaXMuX2FkZEVycm9yKGV2LmRldGFpbCk7XHJcbiAgfVxyXG5cclxuICBfb25JbmZvKGV2OiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5fYWRkSW5mbyhldi5kZXRhaWwpO1xyXG4gIH0gXHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHtlcnJvcnMsIGluZm9zLCBkYldyaXRlcklzU2F2aW5nfSA9IHRoaXMuc3RhdGU7XHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJlcnJvci1zdWNjZXNzLWZlZWRiYWNrXCIgc3R5bGU9e3tcclxuICAgICAgcG9zaXRpb246IFwiZml4ZWRcIixcclxuICAgICAgbGVmdDogMCxcclxuICAgICAgdG9wOiAwLFxyXG4gICAgICB3aWR0aDogXCIxMDAlXCIsXHJcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xyXG4gICAgfX0+XHJcbiAgICAgIDxkaXYgc3R5bGU9e3tkaXNwbGF5OiAndGFibGUnLCBtYXJnaW46IFwiMCBhdXRvXCJ9fT5cclxuICAgICAgICB7ZXJyb3JzLmZpbHRlcihlID0+ICFlLnJldHJ5YWJsZSB8fCAhZGJXcml0ZXJJc1NhdmluZylcclxuICAgICAgICAubWFwKCh7bWVzc2FnZSwgZGV0YWlscywgcmV0cnlhYmxlLCBzaG93RGV0YWlsc30pID0+IChcclxuICAgICAgICAgIDxkaXYga2V5PXttZXNzYWdlfSBjbGFzc05hbWU9XCJlcnJvclwiPlxyXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7ZmxvYXQ6J2xlZnQnfX0+e21lc3NhZ2V9PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3twb2ludGVyRXZlbnRzOiAnYXV0byd9fT5cclxuICAgICAgICAgICAgICA8UmVtb3ZlSXRlbSBvbkNsaWNrPXsoKT0+dGhpcy5yZW1vdmVFcnJvcihtZXNzYWdlKX0gLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIHtkZXRhaWxzIHx8IHJldHJ5YWJsZSA/IDxkaXYgc3R5bGU9e3twb2ludGVyRXZlbnRzOiAnYXV0byd9fT5cclxuICAgICAgICAgICAgICB7ZGV0YWlscyA/IDw+PGEgY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9PnRoaXMudG9nZ2xlRGV0YWlscyhtZXNzYWdlKX0+e3Nob3dEZXRhaWxzID8gXCJEw7ZsaiBkZXRhaWxlclwiIDogXCJWaXNhIGRldGFpbGplclwifTwvYT4mbmJzcDs8Lz4gOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAge3Nob3dEZXRhaWxzID8gPHA+eycnK2RldGFpbHN9PC9wPjogPD4mbmJzcDs8Lz59XHJcbiAgICAgICAgICAgICAge3JldHJ5YWJsZSA/IDxhIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpPT50aGlzLnJldHJ5U2F2ZSgpfT5Gw7Zyc8O2ayBzcGFyYSBudTwvYT4gOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgIDwvZGl2PjogdW5kZWZpbmVkfVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKSl9XHJcbiAgICAgICAge2luZm9zLm1hcChtZXNzYWdlID0+IFxyXG4gICAgICAgICAgPHAga2V5PXttZXNzYWdlfSBjbGFzc05hbWU9XCJpbmZvXCI+e21lc3NhZ2V9PC9wPlxyXG4gICAgICAgICl9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+O1xyXG4gIH1cclxuICByZW1vdmVFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiBhbnkge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSgoe2Vycm9yc30pID0+ICh7XHJcbiAgICAgIGVycm9yczogZXJyb3JzLmZpbHRlcihlID0+IGUubWVzc2FnZSAhPT0gbWVzc2FnZSlcclxuICAgIH0pKTtcclxuICB9XHJcblxyXG4gIHJldHJ5U2F2ZSgpIHtcclxuICAgIGRiLndyaXRlci5yZXRyeVNhdmUoKTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZURldGFpbHMobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4gKHtlcnJvcnM6IGVycm9ycy5tYXAoZXJyb3IgPT4gZXJyb3IubWVzc2FnZSA9PT0gbWVzc2FnZSA/XHJcbiAgICAgIHtcclxuICAgICAgICAuLi5lcnJvcixcclxuICAgICAgICBzaG93RGV0YWlsczogIWVycm9yLnNob3dEZXRhaWxzXHJcbiAgICAgIH0gOlxyXG4gICAgICBlcnJvcilcclxuICAgIH0pKTtcclxuICB9XHJcbn1cclxuIiwiXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9Db21tdW5pY2F0b3I8VCBleHRlbmRzIHtpZDogc3RyaW5nfT4ge1xyXG4gIHF1ZXJ5KCk6IFByb21pc2U8VFtdPjtcclxufVxyXG5cclxudHlwZSBTdWJzY3JpYmVyPFQ+ID0gKGl0ZW1zOlRbXSwgZXJyb3I6IHVuZGVmaW5lZCB8IEVycm9yKSA9PiBhbnk7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVwbzxUIGV4dGVuZHMge2lkOiBzdHJpbmd9PiB7XHJcbiAgbGlzdFByb21pc2U6IFByb21pc2U8dm9pZD47XHJcbiAgaXRlbXM6IFRbXTtcclxuICBlcnJvcj86IEVycm9yO1xyXG4gIHN1YnNjcmliZXJzOiBTdWJzY3JpYmVyPFQ+W107XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb21tOiBSZXBvQ29tbXVuaWNhdG9yPFQ+KSB7XHJcbiAgICB0aGlzLmxpc3RQcm9taXNlID0gbnVsbDtcclxuICAgIHRoaXMuaXRlbXMgPSBudWxsO1xyXG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgc3Vic2NyaWJlKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pIHtcclxuICAgIHJldHVybiB0aGlzLmVuc3VyZUhhc0RhdGEoKS50aGVuKCgpPT57XHJcbiAgICAgIHN1YnNjcmliZXIodGhpcy5pdGVtcywgdGhpcy5lcnJvcik7XHJcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdW5zdWJzY3JpYmUoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPikge1xyXG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnMuZmlsdGVyIChzID0+IHMgIT09IHN1YnNjcmliZXIpO1xyXG4gIH1cclxuXHJcbiAgbm90aWZ5U3Vic2NyaWJlcnMoKSB7XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2gocyA9PiBzKHRoaXMuaXRlbXMsIHRoaXMuZXJyb3IpKTtcclxuICB9XHJcblxyXG4gIGVuc3VyZUhhc0RhdGEoKSB7XHJcbiAgICBpZiAoIXRoaXMubGlzdFByb21pc2UpIHRoaXMucmVmcmVzaEZyb21TZXJ2ZXIoKTtcclxuICAgIHJldHVybiB0aGlzLmxpc3RQcm9taXNlO1xyXG4gIH1cclxuXHJcbiAgcmVmcmVzaEZyb21TZXJ2ZXIoKSB7XHJcbiAgICB0aGlzLmxpc3RQcm9taXNlID0gdGhpcy5jb21tLnF1ZXJ5KCkudGhlbihpdGVtcyA9PiB7XHJcbiAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcclxuICAgICAgdGhpcy5lcnJvciA9IG51bGw7XHJcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcclxuICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcyB8fCBbXTtcclxuICAgICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdGhpcy5saXN0UHJvbWlzZTtcclxuICB9XHJcbiAgXHJcbiAgYXN5bmMgdXBkYXRlKGl0ZW06IFQgfCBUW10pIHtcclxuICAgIGF3YWl0IHRoaXMuZW5zdXJlSGFzRGF0YSgpO1xyXG4gICAgY29uc3QgdXBkYXRlZEl0ZW1zID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBbaXRlbV07XHJcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5tYXAoaXQgPT4ge1xyXG4gICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IHVwZGF0ZWRJdGVtcy5maW5kKCh7aWR9KSA9PiBpdC5pZCA9PT0gaWQpO1xyXG4gICAgICByZXR1cm4gdXBkYXRlZEl0ZW0gP1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHVwZGF0ZWRJdGVtKSA6XHJcbiAgICAgICAgaXQ7XHJcbiAgICB9KTtcclxuICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICB9XHJcblxyXG4gIGluc2VydChpdGVtOiBUIHwgVFtdKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnN1cmVIYXNEYXRhKCkudGhlbigoKT0+e1xyXG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5jb25jYXQoaXRlbSk7XHJcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGlkOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgaWRzID0gQXJyYXkuaXNBcnJheShpZCkgPyBpZCA6IFtpZF07XHJcbiAgICByZXR1cm4gdGhpcy5lbnN1cmVIYXNEYXRhKCkudGhlbigoKT0+e1xyXG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5maWx0ZXIoaXQgPT4gIWlkcy5zb21lKGlkID0+IGl0LmlkID09PSBpZCkpO1xyXG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IGVudiB9IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XHJcblxyXG5leHBvcnQgY2xhc3MgR29vZ2xlQ2xpZW50IHtcclxuICB0b2tlbkV4cGlyYXRpb246IERhdGU7XHJcbiAgZ29vZ2xlVG9rZW5Qcm92aWRlcjogQmVhcmVyUHJvdmlkZXI7XHJcbiAgZGlzY292ZXJ5RG9jczogc3RyaW5nW107XHJcbiAgdG9rZW46IHN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IoZGlzY292ZXJ5RG9jczogc3RyaW5nKSB7XHJcbiAgICB0aGlzLmdvb2dsZVRva2VuUHJvdmlkZXIgPSBlbnYuZ29vZ2xlVG9rZW5Qcm92aWRlcjtcclxuICAgIHRoaXMuZGlzY292ZXJ5RG9jcyA9IFtdO1xyXG4gICAgdGhpcy5kaXNjb3ZlcnlEb2NzLnB1c2goZGlzY292ZXJ5RG9jcyk7XHJcbiAgfVxyXG5cclxuICBzZXRCZWFyZXJQcm92aWRlcihnb29nbGVUb2tlblByb3ZpZGVyOiBCZWFyZXJQcm92aWRlcikge1xyXG4gICAgdGhpcy5nb29nbGVUb2tlblByb3ZpZGVyID0gZ29vZ2xlVG9rZW5Qcm92aWRlcjtcclxuICB9XHJcblxyXG4gIGFzeW5jIGVuc3VyZUluaXRlZCgpIHtcclxuICAgIC8vIExvYWQgR0FQSVxyXG4gICAgaWYgKHR5cGVvZiBnYXBpID09PSAndW5kZWZpbmVkJykgYXdhaXQgdGhpcy5sb2FkR2FwaSgpO1xyXG5cclxuICAgIC8vIFNldCB0b2tlblxyXG4gICAgaWYgKCF0aGlzLnRva2VuRXhwaXJhdGlvbiB8fCB0aGlzLnRva2VuRXhwaXJhdGlvbiA8IG5ldyBEYXRlKCkpIHtcclxuICAgICAgY29uc3QgdG9rZW5SZXN1bHQgPSBhd2FpdCB0aGlzLmdvb2dsZVRva2VuUHJvdmlkZXIuZ2V0QmVhcmVyKCk7XHJcbiAgICAgIHRoaXMudG9rZW5FeHBpcmF0aW9uID0gbmV3IERhdGUodG9rZW5SZXN1bHQuZXhwaXJlcyk7XHJcbiAgICAgIHRoaXMudG9rZW4gPSB0b2tlblJlc3VsdC50b2tlbjtcclxuICAgICAgZ2FwaS5jbGllbnQuc2V0VG9rZW4oe1xyXG4gICAgICAgIGFjY2Vzc190b2tlbjogdG9rZW5SZXN1bHQudG9rZW5cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vIExvYWQgYWxsIGRpc2NvdnllckRvY3NcclxuICAgIGF3YWl0IGdhcGkuY2xpZW50LmluaXQoe1xyXG4gICAgICBkaXNjb3ZlcnlEb2NzOiB0aGlzLmRpc2NvdmVyeURvY3NcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgbG9hZEdhcGkoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgaWYgKHR5cGVvZiBnYXBpICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgIHNjcmlwdC5zcmMgPSBcImh0dHBzOi8vYXBpcy5nb29nbGUuY29tL2pzL2NsaWVudC5qcz9vbmxvYWQ9Z2FhcGlfbG9hZGVkXCI7XHJcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG4gICAgICAod2luZG93IGFzIGFueSkuZ2FhcGlfbG9hZGVkID0gcmVzb2x2ZTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBHb29nbGVXZWJDbGllbnQgfSBmcm9tICcuL2dvb2dsZS13ZWJjbGllbnQnO1xyXG5pbXBvcnQgeyBHb29nbGVEcml2ZSwgc2VsZWN0ZWRGaWxlIH0gZnJvbSAnLi9nb29nbGUtZHJpdmUnO1xyXG5cclxuaW50ZXJmYWNlIG9wdGlvbnMge1xyXG4gIHVwbG9hZD86IGJvb2xlYW47XHJcbiAgbXVsdGlwbGU/OiBib29sZWFuO1xyXG4gIGxpbWl0VHlwZT86IGZhbHNlIHwgJ2dvb2dsZS1hcHBzJyB8wqAncGRmJztcclxufVxyXG5cclxuY29uc3QgbWltZVR5cGVDb2xsZWN0aW9ucyA9IHtcclxuICAnZ29vZ2xlLWFwcHMnIDogJ2FwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5kb2N1bWVudCxhcHBsaWNhdGlvbi92bmQuZ29vZ2xlLWFwcHMucHJlc2VudGF0aW9uLGFwcGxpY2F0aW9uL3ZuZC5nb29nbGUtYXBwcy5zcHJlYWRzaGVldCcsXHJcbiAgJ3BkZic6ICdhcHBsaWNhdGlvbi9wZGYnXHJcbn07XHJcblxyXG4vKipcclxuICogR29vZ2xlUGlja2VyXHJcbiAqIEluY2x1ZGVzIHRoZSBpbml0aWF0aW9uIG9mIHRoZSBjb3JyZWN0IGFwaTpzLlxyXG4gKiBDZXJ0YWluIG9wdGlvbnMgY2FuIGJlIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3JcclxuICogYW5kIHRoZXJlIGNvdWxkIGJlIG90aGVycyB3b3J0aCBpbmNvcnBvcmF0aW5nIChpLmUuIFRlYW0gRHJpdmUtc3VwcG9ydCkuXHJcbiAqIFxyXG4gKiBSaWdodCBub3cgdHdvIG9wdGlvbnMgYXJlIGhhbmRsZWQ6XHJcbiAqIC0gdXBsb2FkOiBpZiBhIHVzZXIgY2FuIHVwbG9hZCB0byBEcml2ZSBpbiB0aGUgR29vZ2xlIERyaXZlIFBpY2tlclxyXG4gKiAtIG11bHRpcGxlOiBpZiBhIHVzZXIgY2FuIHNlbGVjdCBtdWx0aXBsZSBmaWxlc1xyXG4gKiAtIGxpbWl0VHlwZTogYWN0aXZlIGxpbWl0cyB0byBjZXJ0YWluIG1pbWVUeXBlc0NvbGxlY3Rpb25zXHJcbiAqIFxyXG4gKiBXZSBjb3VsZCBwcm9iYWJseSBzcGxpdCB0aGlzIGludG8gZ29vZ2xlLXBpY2tlciBhbmQgZ29vZ2xlLWRyaXZlIHdoZXJlIGdvb2dsZS1kcml2ZVxyXG4gKiBoYW5kbGVzIHRoZSBleHBsaWNpdCBjYWxscyB0byB0aGUgZ29vZ2xlIGRyaXZlIGFwaS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBHb29nbGVQaWNrZXIgZXh0ZW5kcyBHb29nbGVXZWJDbGllbnQge1xyXG4gIHBpY2tlcjogZ29vZ2xlLnBpY2tlci5QaWNrZXI7XHJcbiAgb3B0aW9uczogb3B0aW9ucztcclxuICBkcml2ZTogR29vZ2xlRHJpdmU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBvcHRpb25zKSB7XHJcbiAgICBzdXBlcihbJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZHJpdmUnXSk7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSB7dXBsb2FkOiBmYWxzZSwgbXVsdGlwbGU6IGZhbHNlLCBsaW1pdFR5cGU6IGZhbHNlfTtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMub3B0aW9ucyk7XHJcbiAgICB0aGlzLmRyaXZlID0gbmV3IEdvb2dsZURyaXZlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBzaG93KClcclxuICAgKiBcclxuICAgKiBJZiBhIHNpbmdsZSBmaWxlIGlzIHJlcXVlc3RlZCBmcm9tIHRoZSBwaWNrZXIgYSBsaXN0IG9mIGZpbGVzIHdpdGggb25lIGVsZW1lbnQgaXMgcmV0dXJuZWQuXHJcbiAgICogSXQgaXMgdXAgdG8gdGhlIGNhbGxlciB0byBoYW5kbGUgdGhlIGxpc3QgaW4gYSByZWxldmFudCBtYW5uZXIuXHJcbiAgICogXHJcbiAgICogTW9yZSBkYXRhIGZyb20gdGhlIGZpbGUgY291bGQgYmUgZXh0cmFjdGVkIGlmIGl0IGlzIGRlZW1lZCBuZWNlc3NhcnkuXHJcbiAgICogXHJcbiAgICovXHJcbiAgYXN5bmMgc2hvdygpIHtcclxuICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGVkKCk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8c2VsZWN0ZWRGaWxlW10+KChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgY29uc3QgY2FsbGJhY2sgPSAocmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAocmVzcG9uc2VbJ2FjdGlvbiddID09IGdvb2dsZS5waWNrZXIuQWN0aW9uLkNBTkNFTCkge1xyXG4gICAgICAgICAgICByZWplY3QoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJlc3BvbnNlWydhY3Rpb24nXSA9PSBnb29nbGUucGlja2VyLkFjdGlvbi5QSUNLRUQpIHtcclxuICAgICAgICAgIGxldCBzZWxlY3RlZCA9IFtdO1xyXG4gICAgICAgICAgcmVzcG9uc2UuZG9jcy5tYXAoZG9jID0+IHtcclxuICAgICAgICAgICAgY29uc3Qge2lkOiBmaWxlSWQsIG1pbWVUeXBlLCBuYW1lLCBtb2RpZmllZFRpbWUsIGljb25VcmwsIHVybH0gPSBkb2M7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhbkV4cG9ydCA9IG1pbWVUeXBlLmluY2x1ZGVzKCdnb29nbGUtYXBwcycpO1xyXG4gICAgICAgICAgICBzZWxlY3RlZC5wdXNoKHtmaWxlSWQsIG1pbWVUeXBlLCBuYW1lLCBtb2RpZmllZFRpbWUsIGNhbkV4cG9ydCwgaWNvblVybCwgdXJsfSk7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBwZXJtaXNzaW9ucyB0byByZWFkIGJ5IGFsbCBpbiBkb21haW5cclxuICAgICAgICAgICAgdGhpcy5kcml2ZS51cGRhdGVQZXJtaXNzaW9ucyhmaWxlSWQpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhzZWxlY3RlZCk7XHJcbiAgICAgICAgICByZXNvbHZlKHNlbGVjdGVkKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBjb25zdCBwaWNrZXJidWlsZGVyID0gbmV3IGdvb2dsZS5waWNrZXIuUGlja2VyQnVpbGRlcigpXHJcbiAgICAgICAgLmVuYWJsZUZlYXR1cmUoZ29vZ2xlLnBpY2tlci5GZWF0dXJlLlNVUFBPUlRfRFJJVkVTKVxyXG4gICAgICAgIC5lbmFibGVGZWF0dXJlKGdvb2dsZS5waWNrZXIuRmVhdHVyZS5TVVBQT1JUX1RFQU1fRFJJVkVTKVxyXG4gICAgICAgIC5hZGRWaWV3KFxyXG4gICAgICAgICAgbmV3IGdvb2dsZS5waWNrZXIuRG9jc1ZpZXcoKVxyXG4gICAgICAgICAgICAuc2V0T3duZWRCeU1lKHRydWUpIC8vIHNob3VsZCB0aGlzIGJlIGFuIG9wdGlvbj9cclxuICAgICAgICAgICAgLnNldEluY2x1ZGVGb2xkZXJzKHRydWUpXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC5hZGRWaWV3KFxyXG4gICAgICAgICAgbmV3IGdvb2dsZS5waWNrZXIuRG9jc1ZpZXcoKVxyXG4gICAgICAgICAgICAuc2V0SW5jbHVkZUZvbGRlcnModHJ1ZSlcclxuICAgICAgICAgICAgLnNldEVuYWJsZVRlYW1Ecml2ZXModHJ1ZSlcclxuICAgICAgICApXHJcbiAgICAgICAgLnNldExvY2FsZShcInN2XCIpIC8vIHNob3VsZCB0aGlzIGJlIGFuIG9wdGlvbj9cclxuICAgICAgICAuc2V0U2l6ZSgxMDUxLDY1MCkgLy8gc2hvdWxkIHRoaXMgYmUgYW4gb3B0aW9uP1xyXG4gICAgICAgIC5zZXRPQXV0aFRva2VuKHRoaXMuYXV0aFRva2VuKVxyXG4gICAgICAgIC5zZXRDYWxsYmFjayhjYWxsYmFjayk7XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXBsb2FkKSB7XHJcbiAgICAgICAgcGlja2VyYnVpbGRlci5hZGRWaWV3KG5ldyBnb29nbGUucGlja2VyLkRvY3NVcGxvYWRWaWV3KCkuc2V0SW5jbHVkZUZvbGRlcnModHJ1ZSkpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubXVsdGlwbGUpIHtcclxuICAgICAgICBwaWNrZXJidWlsZGVyLmVuYWJsZUZlYXR1cmUoZ29vZ2xlLnBpY2tlci5GZWF0dXJlLk1VTFRJU0VMRUNUX0VOQUJMRUQpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubGltaXRUeXBlKSB7XHJcbiAgICAgICAgdmFyIG1pbWVUeXBlcyA9IG1pbWVUeXBlQ29sbGVjdGlvbnNbdGhpcy5vcHRpb25zLmxpbWl0VHlwZV07XHJcbiAgICAgICAgY29uc29sZS5sb2cobWltZVR5cGVzKTtcclxuICAgICAgICBwaWNrZXJidWlsZGVyLnNldFNlbGVjdGFibGVNaW1lVHlwZXMobWltZVR5cGVzKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnBpY2tlciA9IHBpY2tlcmJ1aWxkZXIuYnVpbGQoKTtcclxuICAgICAgdGhpcy5waWNrZXIuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgZXhlYyBmcm9tICcuL2V4ZWMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGJvbGQ6IHtcclxuICAgIGljb246ICc8Yj5CPC9iPicsXHJcbiAgICB0aXRsZTogJ0JvbGQnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdib2xkJylcclxuICB9LFxyXG4gIGl0YWxpYzoge1xyXG4gICAgaWNvbjogJzxpPkk8L2k+JyxcclxuICAgIHRpdGxlOiAnSXRhbGljJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaXRhbGljJylcclxuICB9LFxyXG4gIHVuZGVybGluZToge1xyXG4gICAgaWNvbjogJzx1PlU8L3U+JyxcclxuICAgIHRpdGxlOiAnVW5kZXJsaW5lJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygndW5kZXJsaW5lJylcclxuICB9LFxyXG4gIHN0cmlrZXRocm91Z2g6IHtcclxuICAgIGljb246ICc8c3RyaWtlPlM8L3N0cmlrZT4nLFxyXG4gICAgdGl0bGU6ICdTdHJpa2UtdGhyb3VnaCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3N0cmlrZVRocm91Z2gnKVxyXG4gIH0sXHJcbiAgaGVhZGluZzE6IHtcclxuICAgIGljb246ICc8Yj5IPHN1Yj4xPC9zdWI+PC9iPicsXHJcbiAgICB0aXRsZTogJ0hlYWRpbmcgMScsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMT4nKVxyXG4gIH0sXHJcbiAgaGVhZGluZzI6IHtcclxuICAgIGljb246ICc8Yj5IPHN1Yj4yPC9zdWI+PC9iPicsXHJcbiAgICB0aXRsZTogJ0hlYWRpbmcgMicsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMj4nKVxyXG4gIH0sXHJcbiAgaGVhZGluZzM6IHtcclxuICAgIGljb246ICc8Yj5IPHN1Yj4zPC9zdWI+PC9iPicsXHJcbiAgICB0aXRsZTogJ0hlYWRpbmcgMycsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMz4nKVxyXG4gIH0sXHJcbiAgcGFyYWdyYXBoOiB7XHJcbiAgICBpY29uOiAnJiMxODI7JyxcclxuICAgIHRpdGxlOiAnUGFyYWdyYXBoJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFA+JylcclxuICB9LFxyXG4gIHF1b3RlOiB7XHJcbiAgICBpY29uOiAnJiM4MjIwOyAmIzgyMjE7JyxcclxuICAgIHRpdGxlOiAnUXVvdGUnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8QkxPQ0tRVU9URT4nKVxyXG4gIH0sXHJcbiAgb2xpc3Q6IHtcclxuICAgIGljb246ICcmIzM1OycsXHJcbiAgICB0aXRsZTogJ09yZGVyZWQgTGlzdCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydE9yZGVyZWRMaXN0JylcclxuICB9LFxyXG4gIHVsaXN0OiB7XHJcbiAgICBpY29uOiAnJiM4MjI2OycsXHJcbiAgICB0aXRsZTogJ1Vub3JkZXJlZCBMaXN0JyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0VW5vcmRlcmVkTGlzdCcpXHJcbiAgfSxcclxuICBvdXRkZW50OiB7XHJcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1vdXRkZW50XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXHJcbiAgICB0aXRsZTogJ091dGRlbnQnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKFwib3V0ZGVudFwiKVxyXG4gIH0sXHJcbiAgaW5kZW50OiB7XHJcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1pbmRlbnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcclxuICAgIHRpdGxlOiAnSW5kZW50JyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYyhcImluZGVudFwiKSxcclxuICB9LFxyXG4gIGNvZGU6IHtcclxuICAgIGljb246ICcmbHQ7LyZndDsnLFxyXG4gICAgdGl0bGU6ICdDb2RlJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFBSRT4nKVxyXG4gIH0sXHJcbiAgbGluZToge1xyXG4gICAgaWNvbjogJyYjODIxMzsnLFxyXG4gICAgdGl0bGU6ICdIb3Jpem9udGFsIExpbmUnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRIb3Jpem9udGFsUnVsZScpXHJcbiAgfSxcclxuICBsaW5rOiB7XHJcbiAgICBpY29uOiAnJiMxMjgyNzk7JyxcclxuICAgIHRpdGxlOiAnTGluaycsXHJcbiAgICByZXN1bHQ6ICgpID0+IHtcclxuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCgnRW50ZXIgdGhlIGxpbmsgVVJMJylcclxuICAgICAgaWYgKHVybCkgZXhlYygnY3JlYXRlTGluaycsIHVybClcclxuICAgIH1cclxuICB9LFxyXG4gIGltYWdlOiB7XHJcbiAgICBpY29uOiAnJiMxMjgyNDc7JyxcclxuICAgIHRpdGxlOiAnSW1hZ2UnLFxyXG4gICAgcHJvbXB0TXNnOiAnRW50ZXIgdGhlIFVSTCBvZiB0aGUgaW1hZ2UnLFxyXG4gICAgcmVzdWx0ICgpIHtcclxuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCh0aGlzLnByb21wdE1zZylcclxuICAgICAgaWYgKHVybCkgZXhlYygnaW5zZXJ0SW1hZ2UnLCB1cmwpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBjb3Vyc2VOYW1lVG9Dc3NDbGFzcyhjc3NQcmVmaXg6IHN0cmluZywgY291cnNlTmFtZTogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIGAke2Nzc1ByZWZpeH0ke2NvdXJzZU5hbWUuc3Vic3RyKDAsMykudG9Mb3dlckNhc2UoKX1gO1xyXG59XHJcbiIsIlxyXG5leHBvcnQgY2xhc3MgUGVuZGluZ0pvYiB7XHJcbiAgcHJpdmF0ZSB0aW1lb3V0SWQgPSBudWxsO1xyXG4gIHByaXZhdGUgY2FuY2VsbGVkID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBwZW5kaW5nID0gZmFsc2U7XHJcbiAgcHJpdmF0ZSBpc0pvYkV4ZWN1dGluZyA9IGZhbHNlO1xyXG4gIHByaXZhdGUgam9iQ2FsbGJhY2s6ICgpPT5Qcm9taXNlPGFueT47XHJcbiAgXHJcbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6ICgpPT5Qcm9taXNlPGFueT4pIHtcclxuICAgIHRoaXMuam9iQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICB9XHJcblxyXG4gIHRyaWdnZXJDaGFuZ2UodGhyb3R0bGU6IG51bWJlcik6IGFueSB7XHJcbiAgICBpZiAodGhpcy5jYW5jZWxsZWQpIHJldHVybjtcclxuICAgIHRoaXMucGVuZGluZyA9IHRydWU7XHJcbiAgICBpZiAodGhpcy50aW1lb3V0SWQgIT09IG51bGwpXHJcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XHJcbiAgICB0aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCk9PnRoaXMubGF1bmNoSm9iKCksIHRocm90dGxlKTtcclxuICB9XHJcblxyXG4gIHN0b3AoKSB7XHJcbiAgICBpZiAodGhpcy50aW1lb3V0SWQgIT09IG51bGwpXHJcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCk7XHJcbiAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XHJcbiAgICB0aGlzLmNhbmNlbGxlZCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGxhdW5jaEpvYigpIHtcclxuICAgIGlmICh0aGlzLmNhbmNlbGxlZCkgcmV0dXJuO1xyXG4gICAgaWYgKCF0aGlzLnBlbmRpbmcpIHJldHVybjtcclxuICAgIGlmICh0aGlzLmlzSm9iRXhlY3V0aW5nKSByZXR1cm47XHJcbiAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLmlzSm9iRXhlY3V0aW5nID0gdHJ1ZTtcclxuICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XHJcbiAgICAgIGF3YWl0IHRoaXMuam9iQ2FsbGJhY2soKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMuaXNKb2JFeGVjdXRpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnBlbmRpbmcpXHJcbiAgICAgIGF3YWl0IHRoaXMubGF1bmNoSm9iKCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgV2ViQ2xpZW50SWQgfSBmcm9tICcuL2NvbmZpZ3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdvb2dsZVdlYkNsaWVudCB7XHJcbiAgYXV0aFRva2VuOiBzdHJpbmc7XHJcbiAgc2NvcGVzOiBzdHJpbmdbXTtcclxuXHJcbiAgY29uc3RydWN0b3Ioc2NvcGVzKSB7XHJcbiAgICB0aGlzLnNjb3BlcyA9IFsnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC91c2VyaW5mby5lbWFpbCcsICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3VzZXJpbmZvLnByb2ZpbGUnXTtcclxuICAgIHRoaXMuc2NvcGVzLnB1c2goLi4uc2NvcGVzKTtcclxuICB9XHJcbiAgYXN5bmMgZW5zdXJlSW5pdGVkKCkge1xyXG4gICAgLy8gTG9hZCBHQVBJXHJcbiAgICBpZiAodHlwZW9mIGdhcGkgPT09IFwidW5kZWZpbmVkXCIpIGF3YWl0IHRoaXMubG9hZEdhcGkoKTtcclxuXHJcbiAgICAvLyBLRURTU2Nob29sc1xyXG4gICAgY29uc3QgU0NPUEVTID0gdGhpcy5zY29wZXMuam9pbignICcpO1xyXG4gICAgXHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSxyZWplY3QpID0+IHtcclxuICAgICAgZ2FwaS5sb2FkKFwiY2xpZW50OmF1dGgyXCIsICgpID0+IHtcclxuICAgICAgICAvLyBDYWxscyBhdXRob3JpemUgd2l0aG91dCBwcm9tcHRpbmcgdGhlIHVzZXIuIElmIGF1dGhvcml6YXRpb24gaGFzbid0IGJlZW4gZ2l2ZW4gYnlcclxuICAgICAgICAvLyB0aGUgdXNlciBhbiBlcnJvciBpcyByZXR1cm5lZCBhbmQgd2UgY2FsbCBhdXRob3JpemUgYWdhaW4gd2l0aCBjb25zZW50LXNjcmVlblxyXG4gICAgICAgIGxldCByZWF1dGhvcml6ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICByZXR1cm4gZ2FwaS5hdXRoMi5hdXRob3JpemUoe1xyXG4gICAgICAgICAgY2xpZW50X2lkOiBXZWJDbGllbnRJZCxcclxuICAgICAgICAgIHNjb3BlOiBTQ09QRVMsXHJcbiAgICAgICAgICByZXNwb25zZV90eXBlOiAncGVybWlzc2lvbicsXHJcbiAgICAgICAgICBsb2dpbl9oaW50OiBlbnYuY3VycmVudFVzZXIubWFpbCxcclxuICAgICAgICAgIHByb21wdDogJ25vbmUnXHJcbiAgICAgICAgfSwgKHJlc3ApID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3ApO1xyXG4gICAgICAgICAgaWYgKHJlc3AuZXJyb3IpIHtcclxuICAgICAgICAgICAgLy8gbm8gY29uc2VudCBnaXZlbiBzbyByZWF1dGhvcml6ZVxyXG4gICAgICAgICAgICByZWF1dGhvcml6ZSA9IHRydWU7ICAgICAgICAgICAgXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBjaGVjayBpZiB3ZSBoYXZlIGFsbCB0aGUgc2NvcGVzIHdlIHdhbnRcclxuICAgICAgICAgICAgY29uc3Qgc2NvcGVzZXQgPSBuZXcgU2V0KHJlc3Auc2NvcGUuc3BsaXQoJyAnKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pc3NpbmdTY29wZXMgPSB0aGlzLnNjb3Blcy5maWx0ZXIoeCA9PiAhc2NvcGVzZXQuaGFzKHgpKTtcclxuICAgICAgICAgICAgaWYgKG1pc3NpbmdTY29wZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdtaXNzaW5nIHNjb3BlcycpO1xyXG4gICAgICAgICAgICAgIC8vIHNjb3BlcyBhcmUgbWlzc2luZyBmcm9tIG91ciBjb25zZW50IHNvIHJlYXV0aG9yaXplXHJcbiAgICAgICAgICAgICAgcmVhdXRob3JpemUgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIC8vIGV2ZXJ5dGhpbmcgc2VlbXMgdG8gYmUgb2sgc28gc3RvcmUgb3VyIHRva2VuXHJcbiAgICAgICAgICAgICAgdGhpcy5hdXRoVG9rZW4gPSByZXNwLmFjY2Vzc190b2tlbjtcclxuICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAocmVhdXRob3JpemUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlYXV0aG9yaXplJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBnYXBpLmF1dGgyLmF1dGhvcml6ZSh7XHJcbiAgICAgICAgICAgICAgY2xpZW50X2lkOiBXZWJDbGllbnRJZCxcclxuICAgICAgICAgICAgICBzY29wZTogU0NPUEVTLFxyXG4gICAgICAgICAgICAgIHJlc3BvbnNlX3R5cGU6ICdwZXJtaXNzaW9uJyxcclxuICAgICAgICAgICAgICBsb2dpbl9oaW50OiBlbnYuY3VycmVudFVzZXIubWFpbCxcclxuICAgICAgICAgICAgICBwcm9tcHQ6ICdjb25zZW50J1xyXG4gICAgICAgICAgICB9LCAocmVzcCkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3ApO1xyXG4gICAgICAgICAgICAgIGlmIChyZXNwLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzb21ldGhpbmcgaXMgc3RpbGwgd3Jvbmcgc28gdGhyb3cgYW4gZXJyb3JcclxuICAgICAgICAgICAgICAgIHJlamVjdCgnR29vZ2xlIFdlYiBDbGllbnQ6IE5vIGFjY2VzcyB0b2tlbicpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBub3cgaGF2ZSBhIHRva2VuIChob3BlZnVsbHkgd2l0aCB0aGUgcmlnaHQgc2NvcGVzKVxyXG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIHdlIGNoZWNrIGFnYWluP1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoVG9rZW4gPSByZXNwLmFjY2Vzc190b2tlbjtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChyZXNwLmV4cGlyZXNfaW4gPCA1MDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdhcGkuYXV0aDIuYXV0aG9yaXplKHtcclxuICAgICAgICAgICAgICBjbGllbnRfaWQ6IFdlYkNsaWVudElkLFxyXG4gICAgICAgICAgICAgIHNjb3BlOiBTQ09QRVMsXHJcbiAgICAgICAgICAgICAgcmVzcG9uc2VfdHlwZTogJ3Blcm1pc3Npb24nLFxyXG4gICAgICAgICAgICAgIGxvZ2luX2hpbnQ6IGVudi5jdXJyZW50VXNlci5tYWlsLFxyXG4gICAgICAgICAgICAgIHByb21wdDogJ25vbmUnXHJcbiAgICAgICAgICAgIH0sIChyZXNwKSA9PiB7XHJcbiAgICAgICAgICAgICAgdGhpcy5hdXRoVG9rZW4gPSByZXNwLmFjY2Vzc190b2tlbjtcclxuICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIExvYWQgUGlja2VyIEFQSVxyXG4gICAgaWYgKHR5cGVvZiBnb29nbGUgPT09IFwidW5kZWZpbmVkXCIgfHwgdHlwZW9mIGdvb2dsZS5waWNrZXIgPT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgZ2FwaS5sb2FkKFwicGlja2VyXCIsICgpID0+IHsgcmVzb2x2ZSgpIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICBsb2FkR2FwaSgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGlmICh0eXBlb2YgZ2FwaSAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIHJlc29sdmUoKTtcclxuICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcclxuICAgICAgc2NyaXB0LnNyYyA9IFwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvY2xpZW50LmpzP29ubG9hZD1nYWFwaV9sb2FkZWRcIjtcclxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiAgICAgICh3aW5kb3cgYXMgYW55KS5nYWFwaV9sb2FkZWQgPSByZXNvbHZlO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmNvbnN0IEljb25Ecml2ZSA9ICh7IHNpemUgPSAzMCB9KSA9PiAoXHJcbiAgPHN2Z1xyXG4gICAgd2lkdGg9e3NpemV9XHJcbiAgICB2ZXJzaW9uPVwiMS4xXCJcclxuICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgeG1sbnNYbGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIlxyXG4gICAgdmlld0JveD1cIjAgMCA1MDguNTIgNTA4LjUyXCJcclxuICAgIGZpbGw9XCIjZmZmZmZmXCJcclxuICAgIHN0eWxlPXt7dmVydGljYWxBbGlnbjogXCJtaWRkbGVcIiwgbWFyZ2luUmlnaHQ6IFwiNHB4XCJ9fVxyXG4gID5cclxuICAgIDxwb2x5Z29uIHBvaW50cz1cIjQ4NC40OTIsMjg0LjU4IDMzOS4wMjQsMzIuNTc3IDE2OS40OTYsMzIuNTc3IDMxNC45OTYsMjg0LjU4XCIgLz5cclxuICAgIDxwb2x5Z29uIHBvaW50cz1cIjE0NS40MzcsNzQuMjc2IDAsMzI2LjI3OSA4NC43NjQsNDczLjA1IDIzMC4xNjksMjIxLjE0M1wiIC8+XHJcbiAgICA8cG9seWdvbiBwb2ludHM9XCIyMzQuMzk2LDMxNi4zNjMgMTQzLjM3MSw0NzUuOTQzIDQyMy43NTYsNDc1Ljk0MyA1MDguNTIsMzE2LjM2XCIgLz5cclxuICA8L3N2Zz5cclxuKTtcclxuXHJcbmNvbnN0IEljb25DbGFzc3Jvb20gPSAoeyBzaXplID0gMzAgfSkgPT4gKFxyXG4gIDxzdmdcclxuICAgIHdpZHRoPXtzaXplfVxyXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICB4bWxuc1hsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiXHJcbiAgICB2aWV3Qm94PVwiMCAwIDI0IDI0XCJcclxuICAgIHZlcnNpb249XCIxLjFcIlxyXG4gID5cclxuICAgIDxwYXRoIGQ9XCJNNSAyQzMuMzQ4IDIgMiAzLjM0OCAyIDV2MTRjMCAxLjY1MiAxLjM0OCAzIDMgM2gxNGMxLjY1MiAwIDMtMS4zNDggMy0zVjVjMC0xLjY1Mi0xLjM0OC0zLTMtM3ptMCAyaDE0Yy41NSAwIDEgLjQ1IDEgMXYxNGMwIC41NS0uNDUgMS0xIDFoLTF2LTJoLTV2Mkg1Yy0uNTUgMC0xLS40NS0xLTFWNWMwLS41NS40NS0xIDEtMXptNyAyYTEuOTk5IDEuOTk5IDAgMSAwIDAgNCAxLjk5OSAxLjk5OSAwIDEgMCAwLTR6TTcuNSA4YTEuNSAxLjUgMCAxIDAgMCAzIDEuNSAxLjUgMCAwIDAgMC0zem05IDBhMS41IDEuNSAwIDEgMCAwIDMgMS41IDEuNSAwIDAgMCAwLTN6TTEyIDExYy0yLjY2IDAtMy41IDIuNS0zLjUgMi41IDAtLjg0OC41LTEuNS41LTEuNS0uMy0uMTg4LTEuMDctLjMxMy0xLjQzOC0uMzEzLTEuMjE0IDAtMi41NjIgMS4xOTItMi41NjIgMlYxNmgxNHYtMi4zMTNjMC0uODA4LTEuNTEyLTItMi41NjMtMi0uMzY3IDAtMS4xMzYuMTI2LTEuNDM3LjMxMyAwIDAgLjUuNjUyLjUgMS41IDAgMC0uODQtMi41LTMuNS0yLjV6XCIgLz5cclxuICA8L3N2Zz5cclxuKTtcclxuXHJcbmV4cG9ydCBjb25zdCBEcml2ZUJ1dHRvbiA9ICh7bGFiZWw9J0dvb2dsZSBEcml2ZScsIGFjdGlvbn0pID0+IFxyXG4gIDxhIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9e2FjdGlvbn0+PEljb25Ecml2ZSBzaXplPXsxNn0gLz4ge2xhYmVsfTwvYT5cclxuIiwiaW1wb3J0IHsgS25vd2xlZGdlUmVxdWlyZW1lbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XHJcblxyXG4vL2dldCBzZW50ZW5jZXMgYnkgcmVxdWlyZW1lbnRcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJlcXVpcm1lbnRTZW50ZW5jZXMocmVxdWlyZW1lbnQ6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICByZXR1cm4gcmVxdWlyZW1lbnQuc3BsaXQoXCIuXCIpLmZpbHRlcihlID0+IHsgcmV0dXJuIGUgfSk7XHJcbn1cclxuXHJcbi8vcmV0cmlldmUgc2VudGVuY2VzXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTYXZlZFNlbnRlbmNlcyhwYXJ0aWFsUmVxdWlybWVudHM6IHN0cmluZyBbXSk6IHN0cmluZ1tdIHtcclxuICByZXR1cm4gcGFydGlhbFJlcXVpcm1lbnRzLm1hcChmdW5jdGlvbiAob2JqKSB7XHJcbiAgICByZXR1cm4gb2JqLnRyaW0oKTtcclxuICB9KSB8fCBbXTtcclxufVxyXG5cclxuLy9jaGVjayBhbGwgcmVxdWlyZW1lbnRzIGFyZSBtYXJrZWRcclxuZXhwb3J0IGZ1bmN0aW9uIGFsbFJlcXVpcmVtZW50U2VudGVjZXNNYXJrZWQocmVxdWlyZW1lbnROYW1lOiBzdHJpbmcsIHBhcnRpYWxSZXF1aXJlbWVudHM6IHN0cmluZ1tdKTogYm9vbGVhbiB7XHJcbiAgdmFyIHRleHRTZW50ZW5jZXMgPSBnZXRSZXF1aXJtZW50U2VudGVuY2VzKHJlcXVpcmVtZW50TmFtZSk7XHJcbiAgcmV0dXJuIHBhcnRpYWxSZXF1aXJlbWVudHMgJiYgcGFydGlhbFJlcXVpcmVtZW50cy5sZW5ndGggPT09IHRleHRTZW50ZW5jZXMubGVuZ3RoOztcclxufVxyXG5cclxuLy9nZXQgdGhlIHBhcnRpYWwgc2F2ZWQgc2VudGVuY2VzIGZvciB0aGUgZGVmYXVsdCB2aWV3XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJ0aWFsQ29udGVudERlZmF1bHRWaWV3KHJlcXVpcmVtZW50OiBLbm93bGVkZ2VSZXF1aXJlbWVudCwgcGFydGlhbFJlcXVpcm1lbnRzOnN0cmluZyBbXSwgYWxyZWFkeUNvdmVyZWRQYXJ0aWFsUmVxdWlybWVudHM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgW119W10sIHNraXBOb3RNYXJrZWQ6IGJvb2xlYW4pOiBzdHJpbmcge1xyXG4gIHZhciByZXN1bHRlZEh0bWwgPSByZXF1aXJlbWVudC5uYW1lO1xyXG4gIHZhciB0ZXh0U2VudGVuY2VzID0gZ2V0UmVxdWlybWVudFNlbnRlbmNlcyhyZXF1aXJlbWVudC5uYW1lKTtcclxuICB2YXIgcm93UmVxdWlybWVudHMgPSBwYXJ0aWFsUmVxdWlybWVudHMgJiYgZ2V0U2F2ZWRTZW50ZW5jZXMocGFydGlhbFJlcXVpcm1lbnRzKTtcclxuICB2YXIgYWxsUmVxQ292ZXJlZFNlbnRlbmNlID0gYWxyZWFkeUNvdmVyZWRQYXJ0aWFsUmVxdWlybWVudHMgJiYgZ2V0Q292ZXJlZFNlbnRlY2VzKGFscmVhZHlDb3ZlcmVkUGFydGlhbFJlcXVpcm1lbnRzLCByZXF1aXJlbWVudC5pZCk7XHJcbiAgdmFyIGFsbFJlcVNlbnRlbmNlc01hcmtlZCA9IGFsbFJlcXVpcmVtZW50U2VudGVjZXNNYXJrZWQocmVxdWlyZW1lbnQubmFtZSwgcm93UmVxdWlybWVudHMpO1xyXG5cclxuICB0ZXh0U2VudGVuY2VzLmZvckVhY2goc2VudGVuY2UgPT4ge1xyXG4gICAgLy90cmltbSBjdXJyZW50IHNlbnRlbmNlXHJcbiAgICB2YXIgdHJpbW1lZFNlbnRlbmNlID0gc2VudGVuY2UudHJpbSgpO1xyXG4gICAgdmFyIGZ1bGxTZW50ZW5jZSA9IHNlbnRlbmNlICsgXCIuXCI7XHJcbiAgICBpZiAocm93UmVxdWlybWVudHMgJiYgcm93UmVxdWlybWVudHMuaW5jbHVkZXModHJpbW1lZFNlbnRlbmNlKSAmJiAhYWxsUmVxU2VudGVuY2VzTWFya2VkKSB7XHJcbiAgICAgIHJlc3VsdGVkSHRtbCA9IHJlc3VsdGVkSHRtbC5yZXBsYWNlKGZ1bGxTZW50ZW5jZSwgYDxzcGFuIGNsYXNzPSR7XCJtYXJrZWRHcmVlblwifT4ke2Z1bGxTZW50ZW5jZX08L3NwYW4+YCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdmFyIGNvdmVyZWRTZW50ZWNlID0gYWxsUmVxQ292ZXJlZFNlbnRlbmNlICYmIGFsbFJlcUNvdmVyZWRTZW50ZW5jZS5pbmNsdWRlcyh0cmltbWVkU2VudGVuY2UpO1xyXG4gICAgICBpZihjb3ZlcmVkU2VudGVjZSl7XHJcbiAgICAgICAgcmVzdWx0ZWRIdG1sID0gcmVzdWx0ZWRIdG1sLnJlcGxhY2UoZnVsbFNlbnRlbmNlLCBgPHNwYW4+JHtmdWxsU2VudGVuY2V9PC9zcGFuPmApO1xyXG4gICAgICB9IGVsc2UgaWYgKCFhbGxSZXFTZW50ZW5jZXNNYXJrZWQgJiYgYWxsUmVxQ292ZXJlZFNlbnRlbmNlICYmIGFsbFJlcUNvdmVyZWRTZW50ZW5jZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgcmVzdWx0ZWRIdG1sID0gcmVzdWx0ZWRIdG1sLnJlcGxhY2UoZnVsbFNlbnRlbmNlLCBgPHNwYW4gY2xhc3M9JHtcIm1hcmtlZFJlZFwifT4ke2Z1bGxTZW50ZW5jZX08L3NwYW4+YCk7XHJcbiAgICAgIH0gXHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIHJlc3VsdGVkSHRtbDtcclxufVxyXG5cclxuLy9jaGVjayB0aGUgY3VycmVudCByZXF1aXJlbWVudCBpcyBhbHJlYWR5IGNvdmVyZWRcclxuZXhwb3J0IGZ1bmN0aW9uIGlzUGFydGlhbENvdmVyZWRSZXF1aXJtZW50KHJlcXVpcmVtZW50OiBLbm93bGVkZ2VSZXF1aXJlbWVudCwgYWxyZWFkeUNvdmVyZWRQYXJ0aWFsUmVxdWlybWVudHM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgW119W10pe1xyXG4gIHZhciB0ZXh0U2VudGVuY2VzID0gZ2V0UmVxdWlybWVudFNlbnRlbmNlcyhyZXF1aXJlbWVudC5uYW1lKTtcclxuICB2YXIgcmVzdWx0ID0gZmFsc2U7XHJcbiAgZm9yKHZhciBpPTA7IGkgPCB0ZXh0U2VudGVuY2VzLmxlbmd0aDsgaSsrKXtcclxuICAgIHZhciB0cmltbWVkU2VudGVuY2UgPSB0ZXh0U2VudGVuY2VzW2ldLnRyaW0oKTtcclxuICAgIHZhciBhbGxDb3ZlcmVkU2VudGVuY2VSZXEgPSBhbHJlYWR5Q292ZXJlZFBhcnRpYWxSZXF1aXJtZW50cyAmJiBnZXRDb3ZlcmVkU2VudGVjZXMoYWxyZWFkeUNvdmVyZWRQYXJ0aWFsUmVxdWlybWVudHMsIHJlcXVpcmVtZW50LmlkKTtcclxuICAgIHZhciBjb3ZlcmVkU2VudGVjZSA9IGFsbENvdmVyZWRTZW50ZW5jZVJlcSAmJiBhbGxDb3ZlcmVkU2VudGVuY2VSZXEuaW5jbHVkZXModHJpbW1lZFNlbnRlbmNlKTtcclxuICAgIGlmKGNvdmVyZWRTZW50ZWNlKXtcclxuICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbi8vY29tcHV0ZSB0aGUgY292ZXJlZCBzZW50ZWNlcyBleGNsdWRpbmcgdGhlIGN1cnJlbnQgcmVxdWlyZW1lbnRcclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvdmVyZWRTZW50ZWNlcyhhbGxSZXE6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgW119W10sIHJlcXVpcmVtZW50SWQ6IHN0cmluZyk6IHN0cmluZ1tdIHtcclxuICB2YXIgcmVzdWx0QXJyYXkgPSBbXTtcclxuICBhbGxSZXEuZm9yRWFjaChvYmogPT4ge1xyXG4gICAgdmFyIGFzc2lnbmVkUmVxID0gT2JqZWN0LmFzc2lnbihbXSwgT2JqZWN0LmtleXMob2JqKS5maWx0ZXIocmVxSWQgPT4gcmVxSWQgPT0gcmVxdWlyZW1lbnRJZCkubWFwKGsgPT4gb2JqW2tdLm1hcChlbGVtID0+IGVsZW0udHJpbSgpKSkpO1xyXG4gICAgcmVzdWx0QXJyYXkucHVzaCguLi5hc3NpZ25lZFJlcSk7XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGZsYXR0ZW48c3RyaW5nPihyZXN1bHRBcnJheSk7XHJcbn1cclxuXHJcbi8vc29ydCB0aGUgc2VsZWN0ZWQgc2VudGVuY2VzIGJ5IHRoZSBvcmRlciBvZiB0aGUgYXBwZWFyYW5jZSBpbiB0aGUgcmVxdWlyZW1lbnRcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNvcnRlZFJlcXVpcm1lbnRzKHRleHRTZW50ZW5jZXM6IHN0cmluZ1tdLCBwYXJ0aWFsUmVxdWlybWVudHM6IHN0cmluZ1tdKTogc3RyaW5nW117XHJcbiAgdmFyIG91dHB1dCA9IFtdO1xyXG4gIHZhciBpbmRleGVkU2VudGVuY2VzID0gdGV4dFNlbnRlbmNlcy5tYXAoKGUgLGkpID0+IHtyZXR1cm4ge2luZDogaSwgdmFsOiBlfX0pO1xyXG4gIG91dHB1dCA9IGluZGV4ZWRTZW50ZW5jZXMuZmlsdGVyKHM9PiBwYXJ0aWFsUmVxdWlybWVudHMuaW5jbHVkZXMocy52YWwpKTtcclxuICByZXR1cm4gb3V0cHV0ID8gb3V0cHV0LnNvcnQoKHgsIHkpID0+IHguaW5kID4geS5pbmQgPyAxIDogLTEpLm1hcChzPT4gcy52YWwpIDogW107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRNaWdyYXRpb25UaXRsZShpc01pZ3JhdGVkLCBtYXJrTW9kZSl7XHJcbiAgcmV0dXJuIGlzTWlncmF0ZWQgP1xyXG4gICAgbWFya01vZGUgP1xyXG4gICAgICBgU2tvbHZlcmtldCBoYXIgdXBwZGF0ZXJhdCB0ZXh0ZW5zIGZvcm11bGVyaW5nLiBEdSBrYW4gZ3JhbnNrYSDDpG5kcmluZ2VuIGdlbm9tIGF0dCBmw6RsbGEgdXQgdmFybmluZ3Nib3hlbiB0aWxsIGjDtmdlciwgbWVkIHRpdGVsIFwiVXBwZGF0ZXJhZGUgZm9ybXVsZXJpbmdhciBmcsOlbiBTa29sdmVya2V0XCJgIDpcclxuICAgICAgYFNrb2x2ZXJrZXQgaGFyIHVwcGRhdGVyYXQgdGV4dGVucyBmb3JtdWxlcmluZywgbWVuIGRldHRhIGhhciDDpG5udSBpbnRlIGdyYW5za2F0cyBhdiB1cHBnaWZ0ZW5zIHJlZGlnZXJpbmdzYmVow7ZyaWdlYCA6XHJcbiAgICB1bmRlZmluZWRcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7S25vd2xlZGdlUmVxdWlyZW1lbnR9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgZ2V0UGFydGlhbENvbnRlbnREZWZhdWx0VmlldywgZ2V0UmVxdWlybWVudFNlbnRlbmNlcywgZ2V0Q292ZXJlZFNlbnRlY2VzLCBnZXRTYXZlZFNlbnRlbmNlcywgXHJcbiAgaXNQYXJ0aWFsQ292ZXJlZFJlcXVpcm1lbnQsIGdldE1pZ3JhdGlvblRpdGxlLCBnZXRTb3J0ZWRSZXF1aXJtZW50cywgYWxsUmVxdWlyZW1lbnRTZW50ZWNlc01hcmtlZCB9IGZyb20gJy4uL2tub3dsZWRnZS1tYXRyaXgtcGFydGlhbC11dGlscyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGtub3dsZWRnZVJlcXVpcmVtZW50czogS25vd2xlZGdlUmVxdWlyZW1lbnRbXTtcclxuICBpZHNUb01hcmtOb3RPaz86IHtbaWQ6IHN0cmluZ106IHRydWV9O1xyXG4gIGV4cGxhaW5lZFJlcXVpcmVtZW50cz86IHtbcmVxdWlyZW1lbnRJZDogc3RyaW5nXTogc3RyaW5nfVxyXG4gIHBhcnRpYWxSZXF1aXJtZW50cz86IHtbaWQ6IHN0cmluZ106IHN0cmluZ1tdfVxyXG4gIC8vIFByb3BzIHVzZWQgaW4gZWRpdCBtb2RlIChlZGl0aW5nIGNvdXJzZSB0ZW1wbGF0ZXMpXHJcbiAgLy9jb3ZlcmVkSWRzPzogc3RyaW5nW107XHJcbiAgLy8gUHJvcHMgdXNlZCBpbiBtYXJrIG1vZGUgKGVkaXRpbmcgdGFza3MpXHJcbiAgbWFya01vZGU/OiBib29sZWFuO1xyXG4gIG1hcmtlZElkcz86IHN0cmluZ1tdO1xyXG4gIG1pZ3JhdGVkSWRzPzoge1tpZDogc3RyaW5nXTogYW55fTtcclxuICBvbk1hcmtDaGFuZ2VkOiAoaWQ6IHN0cmluZywgaXNNYXJrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbiAgb25FeHBsYWluZWRSZXF1aXJlbWVudHNDaGFuZ2VkPzogKHJlcUlkOiBzdHJpbmcsIHRleHQ6IHN0cmluZykgPT4gdm9pZDtcclxuICBvblVwZGF0ZVBhcnRpYWxLbm93bGVkZ2U/OiAocmVxSWQ6IHN0cmluZywgdGV4dDogc3RyaW5nW10pID0+IHZvaWQ7XHJcbiAgbWFya0J5U2VudGVuY2VWaWV3PzogYm9vbGVhbjtcclxuICBjb3ZlcmVkUGFydGlhbFJlcXVpcm1lbnRzPzoge1tpZDogc3RyaW5nXTogc3RyaW5nW119W107XHJcbiAgbWFya1BhcnRpYWxGZWF0dXJlRW5hYmxlZD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBLbm93bGVkZ2VNYXRyaXggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIHt9PiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICBnZXRLbm93bGVkZ2VTZW50ZW5jZXNDb250ZW50KHJlcXVpcmVtZW50OiBLbm93bGVkZ2VSZXF1aXJlbWVudCwgcGFydGlhbFJlcXVpcm1lbnRzOiBzdHJpbmdbXSwgaW5kZXg6IG51bWJlciwgbWFya2VkT2s6IGJvb2xlYW4sIGlzTWlncmF0ZWQ6IGJvb2xlYW4pIHtcclxuICAgIGNvbnN0IHtjb3ZlcmVkUGFydGlhbFJlcXVpcm1lbnRzLCBtYXJrTW9kZX0gPSB0aGlzLnByb3BzO1xyXG4gICAgLy9zcGxpdCB0ZXh0IGluIHNlbnRlY2VzXHJcbiAgICB2YXIgdGV4dFNlbnRlbmNlcyA9IGdldFJlcXVpcm1lbnRTZW50ZW5jZXMocmVxdWlyZW1lbnQubmFtZSk7XHJcblxyXG4gICAgLy9nZXQgc2F2ZWQgc2VuY2VudGVjZXMgZm9yIHRoZSBjdXJyZW50IHJlcXVpcmVtZW50XHJcbiAgICB2YXIgcm93UmVxdWlybWVudHMgPSBwYXJ0aWFsUmVxdWlybWVudHMgJiYgZ2V0U2F2ZWRTZW50ZW5jZXMocGFydGlhbFJlcXVpcm1lbnRzKTtcclxuICAgIC8vZ2V0IGFsbCBzYXZlZCBzZW50ZWNlcyBleGNsdWRpbmcgdGhlIGN1cnJlbnQgb25lc1xyXG4gICAgdmFyIGFsbENvdmVyZWRTZW50ZW5jZVJlcSA9IGNvdmVyZWRQYXJ0aWFsUmVxdWlybWVudHMgJiYgZ2V0Q292ZXJlZFNlbnRlY2VzKGNvdmVyZWRQYXJ0aWFsUmVxdWlybWVudHMsIHJlcXVpcmVtZW50LmlkKTtcclxuXHJcbiAgICByZXR1cm4gPHRkIGtleT17aW5kZXh9IHRpdGxlPXtnZXRNaWdyYXRpb25UaXRsZShpc01pZ3JhdGVkLCBtYXJrTW9kZSl9Pnt0ZXh0U2VudGVuY2VzLm1hcCgoc2VudGVuY2UsIGspID0+IHtcclxuICAgICAgdmFyIHRyaW1tZWRTZW50ZW5jZSA9IHNlbnRlbmNlLnRyaW0oKTtcclxuICAgICAgdmFyIGhhc1ZhbHVlID0gcm93UmVxdWlybWVudHMgJiYgcm93UmVxdWlybWVudHMuaW5jbHVkZXModHJpbW1lZFNlbnRlbmNlKSB8fCBtYXJrZWRPayAmJiAhcm93UmVxdWlybWVudHM7XHJcbiAgICAgIHZhciBzZW50ZW5jZU5vdE1hcmtlZCA9ICFhbGxDb3ZlcmVkU2VudGVuY2VSZXEuaW5jbHVkZXModHJpbW1lZFNlbnRlbmNlKTtcclxuXHJcbiAgICAgIHJldHVybiA8c3BhbiBrZXk9e2t9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogc2VudGVuY2UgPyBzZW50ZW5jZSArIFwiLlwiIDogXCJcIiB9fVxyXG4gICAgICAgIGNsYXNzTmFtZT17XCJzZWxlY3RhYmxlXCIgKyAoaGFzVmFsdWUgPyBcIiBtYXJrZWRHcmVlblwiIDogKHNlbnRlbmNlTm90TWFya2VkID8gXCIgbWFya2VkUmVkXCIgOiBcIlwiKSl9XHJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgdmFyIHVwZGF0ZWRSZXF1aXJtZW50cyA9IHBhcnRpYWxSZXF1aXJtZW50cyA/IE9iamVjdC5hc3NpZ24oW10sIHBhcnRpYWxSZXF1aXJtZW50cykgOiBbXTtcclxuICAgICAgICAgIHZhciBzaG91bGRCZVJlbW92ZWQgPSByb3dSZXF1aXJtZW50cyAmJiByb3dSZXF1aXJtZW50cy5pbmNsdWRlcyh0cmltbWVkU2VudGVuY2UpO1xyXG4gICAgICAgICAgLy9jaGVjayBpZiBubyBwYXJ0aWFsIGRhdGEgc2F2ZWQsIGJ1dCB0aGUgcmVxdWlybWVudCBpcyBtYXJrZWRPa1xyXG4gICAgICAgICAgaWYgKG1hcmtlZE9rICYmICghcm93UmVxdWlybWVudHMgfHwgcm93UmVxdWlybWVudHMubGVuZ3RoID09IDApKSB7XHJcbiAgICAgICAgICAgIC8vc2F2ZSBhbGwgZXhjZXB0aW5nIHRoZSBvbmUgdGhhdCBzaG91bGQgYmUgcmVtb3ZlZFxyXG4gICAgICAgICAgICB1cGRhdGVkUmVxdWlybWVudHMgPSB0ZXh0U2VudGVuY2VzLmZpbHRlcih4ID0+IHggIT0gc2VudGVuY2UpO1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uVXBkYXRlUGFydGlhbEtub3dsZWRnZShyZXF1aXJlbWVudC5pZCwgZ2V0U29ydGVkUmVxdWlybWVudHModGV4dFNlbnRlbmNlcywgdXBkYXRlZFJlcXVpcm1lbnRzKSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkQmVSZW1vdmVkKSB7XHJcbiAgICAgICAgICAgICAgdXBkYXRlZFJlcXVpcm1lbnRzID0gcGFydGlhbFJlcXVpcm1lbnRzLmZpbHRlcihyZXEgPT4gcmVxICE9IHNlbnRlbmNlKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHVwZGF0ZWRSZXF1aXJtZW50cy5wdXNoKHNlbnRlbmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uVXBkYXRlUGFydGlhbEtub3dsZWRnZShyZXF1aXJlbWVudC5pZCwgZ2V0U29ydGVkUmVxdWlybWVudHModGV4dFNlbnRlbmNlcywgdXBkYXRlZFJlcXVpcm1lbnRzKSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9fT48L3NwYW4+XHJcbiAgICB9KX08L3RkPlxyXG4gIH1cclxuXHJcbiAgb25SZXF1aXJlbWVudENoYW5nZWQocmVxdWlyZW1lbnQ6IEtub3dsZWRnZVJlcXVpcmVtZW50LCB2YWx1ZTogYm9vbGVhbiwgcGFydGlhbFZhbHVlczogc3RyaW5nW10sIGFsbFBhcnRpYWxNYXJrZWQ6IGJvb2xlYW4pIHtcclxuICAgIGlmICh0aGlzLnByb3BzLm9uVXBkYXRlUGFydGlhbEtub3dsZWRnZSkge1xyXG4gICAgICAvL3JlbW92ZSBhbGwgc2F2ZWQgc2VudGVjZXMgaWYgdGhlIHJlcXVpcmVtZW50IGlzIHVuY2hlY2tlZFxyXG4gICAgICAodmFsdWUgJiYgIXBhcnRpYWxWYWx1ZXMgfHwgYWxsUGFydGlhbE1hcmtlZCkgPyB0aGlzLnByb3BzLm9uVXBkYXRlUGFydGlhbEtub3dsZWRnZShyZXF1aXJlbWVudC5pZCwgW10pIDogdGhpcy5wcm9wcy5vblVwZGF0ZVBhcnRpYWxLbm93bGVkZ2UocmVxdWlyZW1lbnQuaWQsIGdldFJlcXVpcm1lbnRTZW50ZW5jZXMocmVxdWlyZW1lbnQubmFtZSkpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnByb3BzLm9uTWFya0NoYW5nZWQocmVxdWlyZW1lbnQuaWQsICF2YWx1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGtub3dsZWRnZVJlcXVpcmVtZW50cywgbWFya2VkSWRzLCBtaWdyYXRlZElkcywgZXhwbGFpbmVkUmVxdWlyZW1lbnRzLCBtYXJrQnlTZW50ZW5jZVZpZXcsIG1hcmtQYXJ0aWFsRmVhdHVyZUVuYWJsZWR9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHsgaWRzVG9NYXJrTm90T2ssIG1hcmtNb2RlLCBvbkV4cGxhaW5lZFJlcXVpcmVtZW50c0NoYW5nZWQsIHBhcnRpYWxSZXF1aXJtZW50cywgY292ZXJlZFBhcnRpYWxSZXF1aXJtZW50cyB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBjb25zdCBjb2x1bW5zID0gW1wiRVwiLCBcIkNcIiwgXCJBXCJdO1xyXG4gICAgY29uc3Qgcm93czogS25vd2xlZGdlUmVxdWlyZW1lbnRbXVtdID0gW107XHJcbiAgICBjb25zdCByZXFzID0ga25vd2xlZGdlUmVxdWlyZW1lbnRzLnNsaWNlKCk7XHJcbiAgICBsZXQgcm93OiBLbm93bGVkZ2VSZXF1aXJlbWVudFtdIHwgbnVsbCA9IG51bGw7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICByb3cgPSBjb2x1bW5zLm1hcChncmFkZSA9PiB7XHJcbiAgICAgICAgY29uc3QgcE5leHQgPSByZXFzLmZpbmRJbmRleChyID0+IHIuZ3JhZGVTdGVwICYmIHIuZ3JhZGVTdGVwLnRvVXBwZXJDYXNlKCkgPT09IGdyYWRlKTtcclxuICAgICAgICBpZiAocE5leHQgPCAwKSByZXR1cm4gbnVsbDtcclxuICAgICAgICBjb25zdCBydiA9IHJlcXNbcE5leHRdO1xyXG4gICAgICAgIHJlcXMuc3BsaWNlKHBOZXh0LCAxKTtcclxuICAgICAgICByZXR1cm4gcnY7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAocm93LmV2ZXJ5KHIgPT4gciA9PT0gbnVsbCkpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIHJvd3MucHVzaChyb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiA8dGFibGUgY2xhc3NOYW1lPVwia25vd2xlZGdlLW1hdHJpeFwiPlxyXG4gICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAge2NvbHVtbnMubWFwKGMgPT4gPHRoIGtleT17Y30+e2N9PC90aD4pfVxyXG4gICAgICAgICAgPC90cj5cclxuICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgIHtyb3dzLm1hcCgocm93LGkpID0+IDxSZWFjdC5GcmFnbWVudCBrZXk9e2l9PlxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAge3Jvdy5tYXAoKHJlcXVpcmVtZW50LGopID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkT0sgPSByZXF1aXJlbWVudCAmJiBtYXJrZWRJZHMgJiYgbWFya2VkSWRzLmluZGV4T2YocmVxdWlyZW1lbnQuaWQpID49IDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc01hcmtlZE5vdE9LID0gcmVxdWlyZW1lbnQgJiYgaWRzVG9NYXJrTm90T2sgJiYgaWRzVG9NYXJrTm90T2tbcmVxdWlyZW1lbnQuaWRdOy8vbm90IHVzZWQgYW55bW9yZVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNNaWdyYXRlZCA9IHJlcXVpcmVtZW50ICYmIG1pZ3JhdGVkSWRzICYmICEhbWlncmF0ZWRJZHNbcmVxdWlyZW1lbnQuaWRdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHJvd1BhcnRpYWxSZXF1aXJlbWVudHMgPSBwYXJ0aWFsUmVxdWlybWVudHMgJiYgcGFydGlhbFJlcXVpcm1lbnRzW3JlcXVpcmVtZW50LmlkXTtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJ0aWFsVmFsdWVzID0gcm93UGFydGlhbFJlcXVpcmVtZW50cyAmJiBnZXRTYXZlZFNlbnRlbmNlcyhyb3dQYXJ0aWFsUmVxdWlyZW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIHZhciBhbGxSZXFTZW50ZW5jZXNNYXJrZWQgPSBhbGxSZXF1aXJlbWVudFNlbnRlY2VzTWFya2VkKHJlcXVpcmVtZW50Lm5hbWUsIHBhcnRpYWxWYWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgaGFzUGFydGlhbENvdmVyZWQgPSBpc1BhcnRpYWxDb3ZlcmVkUmVxdWlybWVudChyZXF1aXJlbWVudCwgY292ZXJlZFBhcnRpYWxSZXF1aXJtZW50cyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFya2VkUmVkID0gIShwYXJ0aWFsVmFsdWVzICYmIHBhcnRpYWxWYWx1ZXMubGVuZ3RoID4gMCB8fCBoYXNQYXJ0aWFsQ292ZXJlZCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hcmtCeVNlbnRlbmNlVmlldyAmJiBtYXJrUGFydGlhbEZlYXR1cmVFbmFibGVkID8gdGhpcy5nZXRLbm93bGVkZ2VTZW50ZW5jZXNDb250ZW50KHJlcXVpcmVtZW50LCByb3dQYXJ0aWFsUmVxdWlyZW1lbnRzLCBqLCBpc01hcmtlZE9LLCBpc01pZ3JhdGVkKSA6XHJcbiAgICAgICAgICAgICAgICA8dGRcclxuICAgICAgICAgICAgICAgICAga2V5PXtqfVxyXG4gICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogcmVxdWlyZW1lbnQgPyAocm93UGFydGlhbFJlcXVpcmVtZW50cyAmJiByb3dQYXJ0aWFsUmVxdWlyZW1lbnRzLmxlbmd0aCB8fCBoYXNQYXJ0aWFsQ292ZXJlZCkgPyBcclxuICAgICAgICAgICAgICAgICAgICBnZXRQYXJ0aWFsQ29udGVudERlZmF1bHRWaWV3KHJlcXVpcmVtZW50LCByb3dQYXJ0aWFsUmVxdWlyZW1lbnRzLCBjb3ZlcmVkUGFydGlhbFJlcXVpcm1lbnRzLCBtYXJrZWRSZWQpIDogcmVxdWlyZW1lbnQubmFtZSA6IFwiXCJ9fVxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eyhtYXJrTW9kZSA/IFwic2VsZWN0YWJsZVwiIDogXCJcIikgK1xyXG4gICAgICAgICAgICAgICAgICAoaXNNaWdyYXRlZCA/IFwiIG1pZ3JhdGVkXCIgOiBcIlwiKSArXHJcbiAgICAgICAgICAgICAgICAgIChpc01hcmtlZE9LICYmICghcm93UGFydGlhbFJlcXVpcmVtZW50cyB8fCBhbGxSZXFTZW50ZW5jZXNNYXJrZWQpP1xyXG4gICAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZEdyZWVuXCIgOlxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlZFJlZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICBcIiBtYXJrZWRSZWRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgIFwiXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e21hcmtNb2RlICYmIHJlcXVpcmVtZW50ID9cclxuICAgICAgICAgICAgICAgICAgICAgICgpPT50aGlzLm9uUmVxdWlyZW1lbnRDaGFuZ2VkKHJlcXVpcmVtZW50LCBpc01hcmtlZE9LLCBwYXJ0aWFsVmFsdWVzLCBhbGxSZXFTZW50ZW5jZXNNYXJrZWQpIDpcclxuICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17Z2V0TWlncmF0aW9uVGl0bGUoaXNNaWdyYXRlZCwgbWFya01vZGUpfSAvPlxyXG4gICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICB7ZXhwbGFpbmVkUmVxdWlyZW1lbnRzICYmIDx0cj5cclxuICAgICAgICAgICAgICB7cm93Lm1hcCgocmVxdWlyZW1lbnQsaikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcnRpYWxTZW50ZW5jZXMgPSBwYXJ0aWFsUmVxdWlybWVudHMgJiYgcGFydGlhbFJlcXVpcm1lbnRzW3JlcXVpcmVtZW50LmlkXSAmJiBnZXRTYXZlZFNlbnRlbmNlcyhwYXJ0aWFsUmVxdWlybWVudHNbcmVxdWlyZW1lbnQuaWRdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkT0sgPSByZXF1aXJlbWVudCAmJiBtYXJrZWRJZHMgJiYgbWFya2VkSWRzLmluZGV4T2YocmVxdWlyZW1lbnQuaWQpID49IDAgfHwgcGFydGlhbFNlbnRlbmNlcyAmJiBwYXJ0aWFsU2VudGVuY2VzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPHRkIGtleT17an0+XHJcbiAgICAgICAgICAgICAgICAgIHtpc01hcmtlZE9LID8gPHRleHRhcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e0xgQmVza3JpdiBrcmF2ZXRgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0VGV4dEJveCBpbnB1dFRleHRMYXJnZVwiIHN0eWxlPXt7d2lkdGg6IFwiMTAwJVwifX1cclxuICAgICAgICAgICAgICAgICAgICByZWFkT25seT17IW1hcmtNb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtleHBsYWluZWRSZXF1aXJlbWVudHNbcmVxdWlyZW1lbnQuaWRdIHx8IFwiXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZCAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICBldiA9PiBvbkV4cGxhaW5lZFJlcXVpcmVtZW50c0NoYW5nZWQocmVxdWlyZW1lbnQuaWQsIGV2LnRhcmdldC52YWx1ZSkpfVxyXG4gICAgICAgICAgICAgICAgICAvPiA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICAgICAgPC90ZD59KX1cclxuICAgICAgICAgICAgPC90cj59XHJcbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvdGJvZHk+XHJcbiAgICAgIDwvdGFibGU+XHJcblxyXG4gICAgey8qcmV0dXJuIDxkaXY+XHJcbiAgICAgIDx0YWJsZT5cclxuICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgIDx0aD5FPC90aD5cclxuICAgICAgICAgICAgPHRoPkM8L3RoPlxyXG4gICAgICAgICAgICA8dGg+QTwvdGg+XHJcbiAgICAgICAgICA8L3RyPlxyXG4gICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAge3Rib2R5Lm1hcCgocm93LCBpKSA9PiBcclxuICAgICAgICAgIDx0ciBrZXk9e2l9Pntyb3cubWFwKChjZWxsLCBqKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkT0sgPSBwcm9wcy5tYXJrZWRJZHMgJiYgcHJvcHMubWFya2VkSWRzLmluZGV4T2YoY2VsbC5pZCkgPj0gMDtcclxuICAgICAgICAgICAgY29uc3QgaXNNYXJrZWROb3RPSyA9IHByb3BzLmlkc1RvTWFya05vdE9rICYmIHByb3BzLmlkc1RvTWFya05vdE9rW2NlbGwuaWRdO1xyXG4gICAgICAgICAgICByZXR1cm4gPHRkXHJcbiAgICAgICAgICAgICAga2V5PXtqfVxyXG4gICAgICAgICAgICAgIHJvd1NwYW49e2NlbGwucm93U3Bhbn1cclxuICAgICAgICAgICAgICBjbGFzc05hbWU9eyhwcm9wcy5tYXJrTW9kZSA/IFwic2VsZWN0YWJsZVwiIDogXCJcIikgK1xyXG4gICAgICAgICAgICAgICAgKGlzTWFya2VkT0sgP1xyXG4gICAgICAgICAgICAgICAgICBcIiBtYXJrZWRHcmVlblwiIDpcclxuICAgICAgICAgICAgICAgICAgKGlzTWFya2VkTm90T0sgP1xyXG4gICAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZFJlZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIFwiXCIpKX1cclxuICAgICAgICAgICAgICBvbkNsaWNrPXtwcm9wcy5tYXJrTW9kZSAmJiAoKCk9PnByb3BzLm9uTWFya0NoYW5nZWQoY2VsbC5pZCwgIWlzTWFya2VkT0spKX0+XHJcbiAgICAgICAgICAgICAge2NlbGwuaHRtbCAmJiA8ZGl2IHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZSd9fT5cclxuICAgICAgICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2VsbC50eXBlID09PSAnYWJpbGl0eScgPyAnYWJpbGl0eVRleHQnIDogJ2NyaXRlcmlhVGV4dCd9XHJcbiAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBjZWxsLmh0bWx9fSAvPlxyXG4gICAgICAgICAgICAgICAge3Byb3BzLmVkaXRNb2RlICYmIDxSZW1vdmVJdGVtIGNsYXNzTmFtZT1cInVwcGVyUmlnaHRcIiBvbkNsaWNrPXsoKT0+XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2VsbElkcyhcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5yb3dJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldENlbGxJZHMoXHJcbiAgICAgICAgICAgICAgICAgICAgICBjZWxsLnR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBjZWxsLnJvd0luZGV4KS5maWx0ZXIoaWQgPT4gaWQgIT0gY2VsbC5pZCkgKX0gLz4gfVxyXG4gICAgICAgICAgICAgIDwvZGl2Pn1cclxuICAgICAgICAgICAgPC90ZD59KX1cclxuICAgICAgICAgIDwvdHI+KX1cclxuICAgICAgICA8L3Rib2R5PlxyXG4gICAgICA8L3RhYmxlPlxyXG4gICAgPC9kaXY+Ki99XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuXHJcbmRlY2xhcmUgdmFyIHByb2Nlc3M6IGFueTtcclxuXHJcbmNmZy5FTlZJUk9OTUVOVCA9IHByb2Nlc3MuZW52LkVOVklST05NRU5UIGFzIFwicHJvZHVjdGlvblwiIHwgXCJkZXZlbG9wbWVudFwiIHwgXCJ0ZXN0XCI7XHJcbmNmZy5LRURfQVBJX1VSTCA9IHByb2Nlc3MuZW52LktFRF9BUElfVVJMOyAvLyBcImh0dHBzOi8va2VkYmFja2VuZHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL1wiXHJcbmNmZy5FRFNfQVBJX1VSTCA9IHByb2Nlc3MuZW52LkVEU19BUElfVVJMOyAvLyBcImh0dHBzOi8vZWRzcG9ydGFsb3dpbmFwaS5henVyZXdlYnNpdGVzLm5ldC9hcGkvXCJcclxuY2ZnLktFRF9UT0tFTl9VUkwgPSBwcm9jZXNzLmVudi5LRURfVE9LRU5fVVJMOyAvLyBcImh0dHBzOi8va2VkYXV0aHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvdG9rZW5cIlxyXG5jZmcuS0VEX0NMSUVOVF9JRCA9IHByb2Nlc3MuZW52LktFRF9DTElFTlRfSUQ7IC8vIFwiZGV2Y2xpZW50XCIsIFwidGVzdGNsaWVudFwiLCBcIi4uLlwiXHJcbmNmZy5LRURfQ0xJRU5UX1NFQ1JFVCA9IHByb2Nlc3MuZW52LktFRF9DTElFTlRfU0VDUkVUO1xyXG5jZmcuS0VEX1JFQUxNID0gcHJvY2Vzcy5lbnYuS0VEX1JFQUxNOyAvLyBcIlNFMVwiXHJcbmNmZy5LRURfTE9DQUxFID0gY2ZnLktFRF9MT0NBTEUgfHwgcHJvY2Vzcy5lbnYuS0VEX0xPQ0FMRTsgLy8gXCJzdlwiLCBcImVuXCIuIE9ubHkgc2V0IGZyb20gcHJvY2Vzcy5lbnYgaWYgbm90IHNldCBmcm9tIFNpdGVWaXNpb24gZWxlbWVudCBjb25maWcuXHJcbmNmZy5LRURfU0NIT09MX0xPQ0FMRSA9IGNmZy5LRURfU0NIT09MX0xPQ0FMRSB8fCBwcm9jZXNzLmVudi5LRURfU0NIT09MX0xPQ0FMRTsgLy8gXCJzdlwiLCBcImVuX3NpblwiLCBcImVuX25pblwiLiBPbmx5IHNldCBmcm9tIHByb2Nlc3MuZW52IGlmIG5vdCBzZXQgZnJvbSBTaXRlVmlzaW9uIGVsZW1lbnQgY29uZmlnLlxyXG5jZmcuS0VEX1JFU09VUkNFU19VUkwgPSBjZmcuS0VEX1JFU09VUkNFU19VUkwgfHwgcHJvY2Vzcy5lbnYuS0VEX1JFU09VUkNFU19VUkw7XHJcbiIsImltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcsIGdlbmVyYXRlUXVlcnlTdHJpbmcsIHNwbGl0VXJsQW5kUXVlcnkgfSBmcm9tIFwiLi4vdXRpbHMvcXVlcnktc3RyaW5nXCI7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRDbGllbnRXZWIsIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLCBpc29tb3JwaGljLCBzdG9yYWdlIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWInO1xyXG5pbXBvcnQgeyBCZWFyZXJQcm92aWRlciwgS2VkQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzXCI7XHJcbmltcG9ydCB7IElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TIH0gZnJvbSBcIi4uL2FjY2Vzcy1jb250cm9sL2luZGV4XCI7XHJcbmltcG9ydCB7IGNoZXJyeVBpY2tQcm9wcyB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xyXG5cclxuZnVuY3Rpb24gZ2V0TWVyZ2VkVG9rZW5QYXRoKHRva2VuUGF0aDogc3RyaW5nLCBsb2NhdGlvblNlYXJjaDogc3RyaW5nLCBzY29wZXM6IHN0cmluZ1tdKSB7XHJcbiAgLy8gTWVyZ2UgY29uZmlndXJlZCBxdWVyeSBwYXJhbXMgb2YgdG9rZW4gcGF0aCB3aXRoIHBhcmFtcyBnaXZlbiB0byBjdXJyZW50IHBhZ2VcclxuICBjb25zdCBjdXJyZW50UXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uU2VhcmNoKTtcclxuICBjb25zdCBpbXBlcnNvbmF0aW9uUHJvcHMgPSBjaGVycnlQaWNrUHJvcHMoY3VycmVudFF1ZXJ5LCBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyk7XHJcbiAgY29uc3QgW3Rva2VuUGF0aFdpdGhvdXRRdWVyeSwgdG9rZW5RdWVyeVN0cmluZ10gPSBzcGxpdFVybEFuZFF1ZXJ5KHRva2VuUGF0aCk7XHJcbiAgY29uc3QgdG9rZW5QYXRoUXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKHRva2VuUXVlcnlTdHJpbmcpO1xyXG4gIHJldHVybiB0b2tlblBhdGhXaXRob3V0UXVlcnkgKyBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKHtcclxuICAgIC4uLnRva2VuUGF0aFF1ZXJ5LFxyXG4gICAgLi4uaW1wZXJzb25hdGlvblByb3BzLFxyXG4gICAgc2NvcGVzOiBzY29wZXMuam9pbignLCcpXHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldFRva2VuSWQobWVyZ2VkVG9rZW5QYXRoOiBzdHJpbmcsIHVzZXJFbWFpbDogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIG1lcmdlZFRva2VuUGF0aCArIFwiL1wiICsgdXNlckVtYWlsO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzYXZlVXNlckluZm8odXNlcjogVXNlciwgdG9rZW5JZDogc3RyaW5nKSB7XHJcbiAgZW52LmN1cnJlbnRVc2VyID0gdXNlcjtcclxuICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwidXNlckluZm9cIiArIHRva2VuSWQsIEpTT04uc3RyaW5naWZ5KHVzZXIpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbG9hZFVzZXJJbmZvKHRva2VuSWQ6IHN0cmluZykge1xyXG4gIGNvbnN0IHN0b3JlZFNlc3Npb25Vc2VyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInVzZXJJbmZvXCIgKyB0b2tlbklkKTtcclxuICBpZiAoc3RvcmVkU2Vzc2lvblVzZXIpIHtcclxuICAgIGVudi5jdXJyZW50VXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkU2Vzc2lvblVzZXIpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoOiBzdHJpbmcsIHVzZXJFbWFpbDogc3RyaW5nKSB7XHJcbiAgY29uc3QgdG9rZW5JZCA9IGdldFRva2VuSWQobWVyZ2VkVG9rZW5QYXRoLCB1c2VyRW1haWwpO1xyXG4gIHJldHVybiBuZXcgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoLCByZXNwb25zZVRleHQgPT4ge1xyXG4gICAgY29uc3QgcmVzID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpIGFzIHsgb2s6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nLCB0b2tlbj86IHN0cmluZywgdXNlcj86IFVzZXIgfTtcclxuICAgIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzLmVycm9yKTtcclxuICAgIGlmIChyZXMudXNlcikge1xyXG4gICAgICBzYXZlVXNlckluZm8ocmVzLnVzZXIsIHRva2VuSWQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgdG9rZW46IHJlcy50b2tlbiwgZXhwaXJlczogRGF0ZS5ub3coKSArIDU5ICogNjAgKiAxMDAwIH07XHJcbiAgfSwgdG9rZW5JZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoOiBzdHJpbmcsIHVzZXJFbWFpbDogc3RyaW5nKSB7XHJcbiAgY29uc3QgdG9rZW5JZCA9IGdldFRva2VuSWQobWVyZ2VkVG9rZW5QYXRoLCB1c2VyRW1haWwpO1xyXG4gIHJldHVybiBuZXcgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoLCByZXNwb25zZVRleHQgPT4ge1xyXG4gICAgY29uc3QgcmVzID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpIGFzIHsgb2s6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nLCB0b2tlbj86IHN0cmluZywgdXNlcj86IFVzZXIgfTtcclxuICAgIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzLmVycm9yKTtcclxuICAgIHJldHVybiB7IHRva2VuOiByZXMudG9rZW4sIGV4cGlyZXM6IERhdGUubm93KCkgKyA1OSAqIDYwICogMTAwMCB9O1xyXG4gIH0sIHRva2VuSWQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcih0b2tlblVybDogc3RyaW5nLCB1c2VyOiBVc2VyLCBzY29wZXM6IHN0cmluZ1tdKSB7XHJcbiAgcmV0dXJuIG5ldyBLZWRCZWFyZXJQcm92aWRlcihcclxuICAgIGlzb21vcnBoaWMsXHJcbiAgICBzdG9yYWdlLFxyXG4gICAgdG9rZW5VcmwgKyB1c2VyLm1haWwgKyBsb2NhdGlvbi5zZWFyY2gsXHJcbiAgICBjZmcuS0VEX0NMSUVOVF9JRCxcclxuICAgIGNmZy5LRURfQ0xJRU5UX1NFQ1JFVCxcclxuICAgIHRva2VuVXJsLCB7XHJcbiAgICAgIGVtYWlsOiB1c2VyLm1haWwudG9Mb3dlckNhc2UoKSxcclxuICAgICAgcm9sZXM6IHVzZXIucm9sZXMsXHJcbiAgICAgIHNjaG9vbDogdXNlci5zY2hvb2wsXHJcbiAgICAgIHNjaG9vbFR5cGU6IHVzZXIuc2Nob29sVHlwZSxcclxuICAgICAgc2NvcGVzXHJcbiAgICB9KTtcclxufVxyXG5cclxuLy8gZW52LmN1cnJlbnRVc2VyLm1haWwgaXMgc2V0IGJ5IFNpdGVWaXNpb24gc2VydmVyIGluaXRpYWxseS5cclxuLy8gQSByZXNwb25zZSBmcm9tIC9hcGkvdG9rZW4gbWF5IGNoYW5nZSB0aGUgbWFpbCBhdHRyaWJ1dGUgb2YgdGhlIGN1cnJlbnRcclxuLy8gdXNlciwgc28gZW52LmN1cnJlbnRVc2VyLm1haWwgbWF5IGJlIGRpZmZlcmVudCBhZnRlciBnZXR0aW5nIGEgcmVzcG9uc2UuXHJcbi8vIEhvd2V2ZXIsIHRoZSBpbml0aWFsIHZhbHVlIGlzIHZhbHVhYmxlIGFsd2F5cyBpbiBvcmRlciB0byBkaXN0aW5ndWlzaCB0aGUgY2FzZVxyXG4vLyB3aGVuIG9uZSBub3JtYWwgdXNlciBsb2dzIG91dCBhbmQgYW5vdGhlciB1c2VyIGxvZ3MgaW4uXHJcbmNvbnN0IGluaXRpYWxVc2VyRW1haWwgPSBlbnYuY3VycmVudFVzZXIgJiYgZW52LmN1cnJlbnRVc2VyLm1haWw7IC8vIEluaXRpYWwgdmFsdWUgb2YgbWFpbC4gTWF5IGNoYW5nZS5cclxuaWYgKGluaXRpYWxVc2VyRW1haWwpIHtcclxuICAvLyBLRURcclxuICBpZiAoY2ZnLktFRF9UT0tFTl9QQVRIKSB7XHJcbiAgICAvL1xyXG4gICAgLy9cclxuICAgIC8vIFByb2R1Y3Rpb24gLyBTaXRlVmlzaW9uIHByb3hpZWQgL2FwaS90b2tlbiB0byByZXF1ZXN0IHRva2VucyBmcm9tOlxyXG4gICAgLy9cclxuICAgIC8vXHJcbiAgICBjb25zdCBtZXJnZWRUb2tlblBhdGggPSBnZXRNZXJnZWRUb2tlblBhdGgoXHJcbiAgICAgIGNmZy5LRURfVE9LRU5fUEFUSCxcclxuICAgICAgbG9jYXRpb24uc2VhcmNoLCBbXHJcbiAgICAgICAgXCJrZWRiYWNrZW5kXCIsXHJcbiAgICAgICAgXCJFRFNcIixcclxuICAgICAgXSk7XHJcbiAgICBlbnYuYmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGgsIGluaXRpYWxVc2VyRW1haWwpO1xyXG4gICAgbG9hZFVzZXJJbmZvKGdldFRva2VuSWQobWVyZ2VkVG9rZW5QYXRoLCBpbml0aWFsVXNlckVtYWlsKSk7XHJcblxyXG4gICAgLy8gR29vZ2xlXHJcbiAgICBjb25zdCBnb29nbGVNZXJnZWRQYXRoID0gZ2V0TWVyZ2VkVG9rZW5QYXRoKFxyXG4gICAgICBjZmcuS0VEX1RPS0VOX1BBVEgsXHJcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCwgW1xyXG4gICAgICAgIFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jYWxlbmRhci5yZWFkb25seVwiLFxyXG4gICAgICAgIFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9kcml2ZVwiXHJcbiAgICAgIF0pO1xyXG4gICAgZW52Lmdvb2dsZVRva2VuUHJvdmlkZXIgPSBjcmVhdGVHb29nbGVUb2tlblByb3ZpZGVyKGdvb2dsZU1lcmdlZFBhdGgsIGluaXRpYWxVc2VyRW1haWwpO1xyXG4gIH0gZWxzZSBpZiAoY2ZnLktFRF9UT0tFTl9VUkwgJiYgY2ZnLktFRF9DTElFTlRfSUQgJiYgY2ZnLktFRF9DTElFTlRfU0VDUkVUKSB7XHJcbiAgICAvL1xyXG4gICAgLy9cclxuICAgIC8vIFRlc3QgLSBnbyBkaXJlY3RseSB0byBLRURBVVRIIHNlcnZlciB0byByZXRyaWV2ZSB0b2tlbnNcclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgZW52LmJlYXJlclByb3ZpZGVyID0gY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIoY2ZnLktFRF9UT0tFTl9VUkwsIGVudi5jdXJyZW50VXNlciwgW1xyXG4gICAgICBcImtlZGJhY2tlbmRcIixcclxuICAgICAgXCJFRFNcIixcclxuICAgIF0pO1xyXG4gICAgZW52Lmdvb2dsZVRva2VuUHJvdmlkZXIgPSBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcihjZmcuS0VEX1RPS0VOX1VSTCArIFwiL2dvb2dsZVwiLCBlbnYuY3VycmVudFVzZXIsIFtcclxuICAgICAgXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2NhbGVuZGFyLnJlYWRvbmx5XCIsXHJcbiAgICAgIFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9kcml2ZVwiXHJcbiAgICBdKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyIEtFRF9UT0tFTl9QQVRIYCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50V2ViIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWInO1xyXG5cclxuZW52LmtlZEJhY2tlbmRDbGllbnQgPSBuZXcgS2VkQmFja2VuZENsaWVudFdlYiAoXHJcbiAgY2ZnLktFRF9BUElfVVJMLFxyXG4gIGVudi5iZWFyZXJQcm92aWRlcik7XHJcblxyXG4iLCJpbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IHsgaXNvbW9ycGhpYyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcclxuaW1wb3J0IHsgRWRzQ2xpZW50IH0gZnJvbSAnLi4vYXBpcy9lZHNjbGllbnQnO1xyXG5cclxuZW52LmVkc0NsaWVudCA9IG5ldyBFZHNDbGllbnQgKFxyXG4gIGlzb21vcnBoaWMsXHJcbiAgY2ZnLkVEU19BUElfVVJMLFxyXG4gIGVudi5iZWFyZXJQcm92aWRlcixcclxuICAoKT0+ZW52LmN1cnJlbnRVc2VyLm1haWwpO1xyXG5cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IFZhbHVlLCBFbWl0dGVyIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgbGl2ZVF1ZXJ5VmlldyB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9saXZlLXF1ZXJ5LXZpZXcnO1xyXG5pbXBvcnQgeyBMYXp5Q29udGVudCB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9sYXp5LWNvbnRlbnQnO1xyXG5pbXBvcnQgeyBFbGxpcHNpc0xvYWRlciB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2VsbGlwc2lzLWxvYWRlcic7XHJcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSAnLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCYW5uZXJQcm9wcyB7XHJcbiAgdGl0bGU6IHN0cmluZyxcclxuICBiYWNrZ3JvdW5kSW1hZ2U/OiBzdHJpbmcsXHJcbiAgdGFiczogeyBuYW1lOiBzdHJpbmcgfCBKU1guRWxlbWVudCwga2V5OiBzdHJpbmcsIGxpbms/OiBzdHJpbmcsIG9uQ2xpY2s/OiAoKSA9PiB2b2lkLCBkcmFnZ2FibGU/OiBib29sZWFuICB9W10sXHJcbiAgYnV0dG9ucz86IEpTWC5FbGVtZW50W10sXHJcbiAgYWN0aXZlVGFiOiBzdHJpbmc7XHJcbiAgY29ybmVyQm94Pzogc3RyaW5nIHwgSlNYLkVsZW1lbnQ7XHJcbiAgYmxvY2tzPzogQXJyYXk8eyBpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHN0ZXBzOiBBcnJheTx7IGxpbms6IHN0cmluZywgc3RlcE5vOiBudW1iZXIsIGlzQWN0aXZlOiBib29sZWFufT4gfT5cclxuICBzb3J0YWJsZVRhYnM/OiBib29sZWFuO1xyXG4gIG9uVGFiRHJvcD86IChzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcsIHBsYWNlbWVudDogJ2JlZm9yZScgfCAnYWZ0ZXInKSA9PiB2b2lkXHJcbn1cclxuXHJcbmludGVyZmFjZSBMYXp5QmFubmVyUHJvcHMge1xyXG4gIGxhenlQcm9wczogVmFsdWU8QmFubmVyUHJvcHM+XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBMYXp5QmFubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PExhenlCYW5uZXJQcm9wcz4ge1xyXG4gIGRyYWdTdGF0ZSA9IG5ldyBFbWl0dGVyKHsgdGFiQmVpbmdEcmFnZ2VkOiAnJywgdGFiQmVpbmdIb3ZlcmVkOiAnJywgaW5zZXJ0QmVmb3JlOiBmYWxzZSwgb3JpZ2luQ2xpZW50WDogLTEgfSk7XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgbGF6eVByb3BzIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyXCIgc3R5bGU9e3sgb3ZlcmZsb3c6IFwidmlzaWJsZVwiIH19PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyIHN2LWNvbHVtbi0xMlwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1zY3JpcHQtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICAgICAgICAgIDxMYXp5Q29udGVudCBub0Vycm9yPlxyXG4gICAgICAgICAgICAgIHtsYXp5UHJvcHMubWFwKCh7IGJhY2tncm91bmRJbWFnZSB9KSA9PiBiYWNrZ3JvdW5kSW1hZ2UgJiYgPHN0eWxlPntgXHJcbiAgICAgICAgICAgICAgLnBhZ2VIZWFkZXIge1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcke2JhY2tncm91bmRJbWFnZX0nKSAhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYH08L3N0eWxlPil9XHJcbiAgICAgICAgICAgIDwvTGF6eUNvbnRlbnQ+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZUhlYWRlclwiPlxyXG4gICAgICAgICAgICAgIDxhPlxyXG4gICAgICAgICAgICAgICAgPGgxPjxMYXp5Q29udGVudCBub0Vycm9yPntsYXp5UHJvcHMubWFwKHByb3BzID0+IDw+e3Byb3BzLnRpdGxlfTwvPil9PC9MYXp5Q29udGVudD48L2gxPlxyXG4gICAgICAgICAgICAgIDwvYT5cclxuICAgICAgICAgICAgICA8TGF6eUNvbnRlbnQgbm9FcnJvcj57bGF6eVByb3BzLm1hcCgoeyBjb3JuZXJCb3ggfSkgPT4gY29ybmVyQm94ICYmXHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2VIZWFkZXJDb3JuZXJCb3hcIj5cclxuICAgICAgICAgICAgICAgICAge2Nvcm5lckJveH1cclxuICAgICAgICAgICAgICAgIDwvZGl2Pil9XHJcbiAgICAgICAgICAgICAgPC9MYXp5Q29udGVudD5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25zRmllbGRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uc0NvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAgICA8TGF6eUNvbnRlbnQgc3Bpbm5lcj17PEVsbGlwc2lzTG9hZGVyIC8+fT57bGF6eVByb3BzLm1hcCgoeyB0YWJzLCBidXR0b25zLCBhY3RpdmVUYWIsIGJsb2Nrcywgc29ydGFibGVUYWJzLCBvblRhYkRyb3AgfSkgPT4gPD5cclxuICAgICAgICAgICAgICAgICAgICB7YmxvY2tzID8gPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7YmxvY2tzLm1hcChibG9jayA9PiA8ZGl2IGtleT17YmxvY2suaWR9IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLXZlcnRpY2FsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhPntibG9jay5uYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4tZ3JvdXBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Jsb2NrLnN0ZXBzLm1hcChzdGVwID0+IDxSZWFjdC5GcmFnbWVudCBrZXk9e3N0ZXAuc3RlcE5vfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGlua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG89e3N0ZXAubGlua31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJidG4gYnRuLXNtYWxsIHN0ZXAtYnV0dG9uXCIgKyAoc3RlcC5pc0FjdGl2ZSA/IFwiIGFjdGl2ZVBhZ2VcIiA6IFwiXCIpfSA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3RlcC5zdGVwTm99XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+KX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pil9XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+IDogbnVsbH1cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naG9yaXpvbnRhbE1lbnUnPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPExhenlDb250ZW50PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnU3RhdGUubWFwKCh7IHRhYkJlaW5nRHJhZ2dlZCwgdGFiQmVpbmdIb3ZlcmVkLCBpbnNlcnRCZWZvcmUsIG9yaWdpbkNsaWVudFggfSkgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c29ydGFibGVUYWJzID8gXCJzb3J0YWJsZVwiIDogbnVsbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJvcD17b25UYWJEcm9wID8gZXYgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiQmVpbmdIb3ZlcmVkICYmIHRhYkJlaW5nRHJhZ2dlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uVGFiRHJvcCh0YWJCZWluZ0RyYWdnZWQsIHRhYkJlaW5nSG92ZXJlZCwgaW5zZXJ0QmVmb3JlID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiZWZvcmUnIDogJ2FmdGVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnU3RhdGUuZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRoaXMuZHJhZ1N0YXRlLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkJlaW5nSG92ZXJlZDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiQmVpbmdEcmFnZ2VkOiAnJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBudWxsfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGFicy5tYXAoKHsgbmFtZSwga2V5LCBsaW5rLCBvbkNsaWNrLCBkcmFnZ2FibGUgfSwgaWR4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gYWN0aXZlVGFiID09PSBrZXkgfHwgKGFjdGl2ZVRhYiA9PT0gJyQnICYmIGlkeCA9PT0gMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtkcmFnU3RhdGV9ID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUgfHwgTGAoTmFtbmzDtnMgZmxpaylgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPFJlYWN0LkZyYWdtZW50IGtleT17a2V5fT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aW5zZXJ0QmVmb3JlICYmIHRhYkJlaW5nSG92ZXJlZCA9PT0ga2V5ID8gPGxpIGNsYXNzTmFtZT1cImRyb3AtdGFyZ2V0XCIgb25EcmFnT3Zlcj17ZXYgPT4gZXYucHJldmVudERlZmF1bHQoKX0+Jm5ic3A7PC9saT4gOiBudWxsfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17W1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSA/IFwiYWN0aXZlUGFnZVwiIDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ID09PSB0YWJCZWluZ0RyYWdnZWQgPyBcImRyYWctc291cmNlXCIgOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0YWJsZVRhYnMgJiYgZHJhZ2dhYmxlID8gXCJkcmFnZ2FibGVcIiA6IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uZmlsdGVyKHg9PngpLmpvaW4oJyAnKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZT17c29ydGFibGVUYWJzICYmIGRyYWdnYWJsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0PXtzb3J0YWJsZVRhYnMgJiYgZHJhZ2dhYmxlID8gZXYgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IFwibW92ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcmFnU3RhdGUuZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRyYWdTdGF0ZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW5DbGllbnRYOiBldi5jbGllbnRYLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkJlaW5nRHJhZ2dlZDoga2V5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdPdmVyPXtzb3J0YWJsZVRhYnMgPyBldiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJCZWluZ0RyYWdnZWQgPT09IGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdTdGF0ZS5kaXNwYXRjaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5kcmFnU3RhdGUudmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJCZWluZ0hvdmVyZWQ6ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFiQmVpbmdEcmFnZ2VkKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJtb3ZlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJvbkRyYWdPdmVyOiBcIiArIG5hbWUgKyBcIi4gaWR4OiBcIiArIGlkeCArIFwiLiBvdGhlcklkeDogXCIgKyBvdGhlcklkeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdTdGF0ZS5kaXNwYXRjaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uZHJhZ1N0YXRlLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkJlaW5nSG92ZXJlZDoga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydEJlZm9yZTogb3JpZ2luQ2xpZW50WCA+IGV2LmNsaWVudFh9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH06IG51bGx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkRyYWdFbmQ9e2V2ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmFnU3RhdGUuZGlzcGF0Y2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRyYWdTdGF0ZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJCZWluZ0hvdmVyZWQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYkJlaW5nRHJhZ2dlZDogJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsaW5rID8gbGluay5zdGFydHNXaXRoKFwiOlwiKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e3ByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5KGxpbmsuc3Vic3RyKDEpLCB7fSl9PntuYW1lfTwvYT4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz17bGlua30+e25hbWV9PC9MaW5rPiA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2sgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG9uQ2xpY2s9e29uQ2xpY2t9PntuYW1lfTwvYT4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHshaW5zZXJ0QmVmb3JlICYmIHRhYkJlaW5nSG92ZXJlZCA9PT0ga2V5ID8gPGxpIGNsYXNzTmFtZT1cImRyb3AtdGFyZ2V0XCIgIG9uRHJhZ092ZXI9e2V2ID0+IGV2LnByZXZlbnREZWZhdWx0KCl9PiZuYnNwOzwvbGk+IDogbnVsbH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge2J1dHRvbnMgJiYgYnV0dG9ucy5tYXAoKGJ0biwgaWR4KSA9PiA8bGkgY2xhc3NOYW1lPVwiYWN0aW9uLXRhYlwiIGtleT17YGJ0biR7aWR4fWB9PntidG59PC9saT4pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+KX1cclxuICAgICAgICAgICAgICAgICAgICAgIDwvTGF6eUNvbnRlbnQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvPil9XHJcbiAgICAgICAgICAgICAgICAgIDwvTGF6eUNvbnRlbnQ+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICApXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQmFubmVyID0gKHByb3BzOiBCYW5uZXJQcm9wcykgPT4gPExhenlCYW5uZXIgbGF6eVByb3BzPXtuZXcgRW1pdHRlcjxCYW5uZXJQcm9wcz4ocHJvcHMpfSAvPlxyXG5cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVsbGlwc2lzTG9hZGVyID0gKCkgPT5cclxuICA8aW1nXHJcbiAgICBzdHlsZT17e2JvcmRlcjogMCwgbWFyZ2luOiAwLCBwYWRkaW5nOiAwfX1cclxuICAgIGNsYXNzTmFtZT1cImVsbGlwc2lzLWxvYWRlclwiIC8+O1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEFiaWxpdHkgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgc3ViVGl0bGU/OiBzdHJpbmc7XHJcbiAgYWJpbGl0aWVzOiBBYmlsaXR5W107XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gIGhlYWRlck9wZW4/OiBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGhlYWRlck9wZW46IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBBYmlsaXRpZXNCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGhlYWRlck9wZW46IHByb3BzLmhlYWRlck9wZW4gfHwgZmFsc2VcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IHRpdGxlLCBzdWJUaXRsZSwgYWJpbGl0aWVzLCBjbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7IGhlYWRlck9wZW4gfSA9IHRoaXMuc3RhdGU7XHJcblxyXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXsoY2xhc3NOYW1lfHwnJykgKyBcIiBvcGVuQ2xvc2VcIiArIChoZWFkZXJPcGVuID8gXCIgb3BlblwiIDogXCJcIil9PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW5IZWFkZXJcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgaGVhZGVyT3BlbjogIXRoaXMuc3RhdGUuaGVhZGVyT3BlbiB9KX0+XHJcbiAgICAgICAgPHA+e3RpdGxlfTwvcD5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3BlbkNvbnRlbnRcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFiaWxpdHlMaXN0XCI+XHJcbiAgICAgICAgICB7c3ViVGl0bGUgJiYgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50SGVhZGVyXCI+XHJcbiAgICAgICAgICAgIDxoNT57c3ViVGl0bGV9PC9oNT5cclxuICAgICAgICAgIDwvZGl2Pn1cclxuICAgICAgICAgIHthYmlsaXRpZXMubWFwKGEgPT5cclxuICAgICAgICAgICAgPGRpdiBrZXk9e2EuaWR9IGNsYXNzTmFtZT1cImNvbnRlbnRQYXJ0XCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50VGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgPHAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IGEubmFtZX19IC8+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgKX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj47XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ2VudHJhbENvbnRlbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgc3ViVGl0bGU/OiBzdHJpbmc7XHJcbiAgY2VudHJhbENvbnRlbnQ6IENlbnRyYWxDb250ZW50W107XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gIGhlYWRlck9wZW4/OiBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGhlYWRlck9wZW46IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDZW50cmFsQ29udGVudEJveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgaGVhZGVyT3BlbjogcHJvcHMuaGVhZGVyT3BlbiB8fCBmYWxzZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgdGl0bGUsIHN1YlRpdGxlLCBjZW50cmFsQ29udGVudCwgY2xhc3NOYW1lIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyBoZWFkZXJPcGVuIH0gPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17KGNsYXNzTmFtZSB8fCAnJykgKyBcIiBvcGVuQ2xvc2VcIiArIChoZWFkZXJPcGVuID8gXCIgb3BlblwiIDogXCJcIil9PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW5IZWFkZXJcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgaGVhZGVyT3BlbjogIXRoaXMuc3RhdGUuaGVhZGVyT3BlbiB9KX0+XHJcbiAgICAgICAgPHA+e3RpdGxlfTwvcD5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3BlbkNvbnRlbnRcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFiaWxpdHlMaXN0XCI+XHJcbiAgICAgICAgICB7c3ViVGl0bGUgJiYgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50SGVhZGVyXCI+XHJcbiAgICAgICAgICAgIDxoNT57c3ViVGl0bGV9PC9oNT5cclxuICAgICAgICAgIDwvZGl2Pn1cclxuICAgICAgICAgIHtjZW50cmFsQ29udGVudC5tYXAoY2MgPT5cclxuICAgICAgICAgICAgPGRpdiBrZXk9e2NjLmlkfSBjbGFzc05hbWU9XCJjb250ZW50UGFydFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGVudFRleHRcIj5cclxuICAgICAgICAgICAgICAgIDxwIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBjYy5uYW1lfX0gLz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PjtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBLbm93bGVkZ2VSZXF1aXJlbWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSBcIi4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveFwiO1xyXG5pbXBvcnQgeyBhcnJheVRvTG9va3VwIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICB0aXRsZTogc3RyaW5nO1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxuICByZXF1aXJlbWVudHM6IEtub3dsZWRnZVJlcXVpcmVtZW50W107XHJcbiAgZXhwbGFpbmVkUmVxdWlyZW1lbnRzPzoge1tyZXF1aXJlbWVudElkOiBzdHJpbmddOiBzdHJpbmd9O1xyXG4gIGlkc1RvU3ViamVjdE1hcD86IHtbcmVxdWlyZW1lbmRJZDogc3RyaW5nXTogc3RyaW5nfTtcclxuICBpbmNsdWRlZElkcz86IHtbaWQ6IHN0cmluZ10gOiB0cnVlfTtcclxuICBoZWFkZXJPcGVuPzogYm9vbGVhbjtcclxuICBwYXJ0aWFsUmVxdWlybWVudHM/OiB7W2lkOiBzdHJpbmddOiBzdHJpbmdbXX07XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBLbm93bGVkZ2VSZXF1aXJlbWVudHNCb3ggPSAocHJvcHM6IFByb3BzKSA9PiB7XHJcbiAgY29uc3Qge3RpdGxlLCBjbGFzc05hbWUsIGhlYWRlck9wZW4sIGlkc1RvU3ViamVjdE1hcCwgcmVxdWlyZW1lbnRzfSA9IHByb3BzO1xyXG4gIGlmICghaWRzVG9TdWJqZWN0TWFwKSB7XHJcbiAgICAvLyBOb3JtYWwgY2FzZVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPE9wZW5DbG9zZUJveCB0aXRsZT17PHA+e3RpdGxlfTwvcD59IGNsYXNzTmFtZT17Y2xhc3NOYW1lfSBoZWFkZXJPcGVuPXtoZWFkZXJPcGVufT5cclxuICAgICAgICA8S25vd2xlZGdlUmVxdWlyZW1lbnRzVGFibGUgey4uLnsuLi5wcm9wc319IC8+XHJcbiAgICAgIDwvT3BlbkNsb3NlQm94PlxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8vIFNwZWNpYWwgY2FzZTogUmVxdWlyZW1lbnRzIHRoYXQgc3BhbnMgbXVsdGlwbGUgc3ViamVjdHM6XHJcbiAgY29uc3QgcmVxdWlyZW1lbnRzUGVyU3ViamVjdExvb2t1cCA9IGlkc1RvU3ViamVjdE1hcCA/XHJcbiAgICBhcnJheVRvTG9va3VwKHJlcXVpcmVtZW50cywgciA9PiBpZHNUb1N1YmplY3RNYXBbci5pZF0gfHwgXCJcIikgOiB7XCJcIjogcmVxdWlyZW1lbnRzfTtcclxuICBjb25zdCByZXFzUGVyU3ViamVjdCA9IE9iamVjdC5rZXlzKHJlcXVpcmVtZW50c1BlclN1YmplY3RMb29rdXApXHJcbiAgICAubWFwKHN1YmplY3QgPT4gKHtzdWJqZWN0LCByZXF1aXJlbWVudHM6IHJlcXVpcmVtZW50c1BlclN1YmplY3RMb29rdXBbc3ViamVjdF19KSk7XHJcblxyXG4gIHJldHVybiA8T3BlbkNsb3NlQm94IHRpdGxlPXs8cD57dGl0bGV9PC9wPn0gY2xhc3NOYW1lPXtjbGFzc05hbWV9IGhlYWRlck9wZW49e2hlYWRlck9wZW59PlxyXG4gICAge3JlcXNQZXJTdWJqZWN0Lm1hcCgoe3N1YmplY3QsIHJlcXVpcmVtZW50c30pID0+IDxLbm93bGVkZ2VSZXF1aXJlbWVudHNUYWJsZSB7Li4ue1xyXG4gICAgICAuLi5wcm9wcyxcclxuICAgICAga2V5OiBzdWJqZWN0LFxyXG4gICAgICBoZWFkaW5nOiBzdWJqZWN0LFxyXG4gICAgICByZXF1aXJlbWVudHNcclxuICAgIH19IC8+KX1cclxuICA8L09wZW5DbG9zZUJveD47XHJcbn1cclxuXHJcbmNvbnN0IEtub3dsZWRnZVJlcXVpcmVtZW50c1RhYmxlID0gKHtcclxuICByZXF1aXJlbWVudHMsXHJcbiAgaW5jbHVkZWRJZHMsXHJcbiAgZXhwbGFpbmVkUmVxdWlyZW1lbnRzLFxyXG4gIHBhcnRpYWxSZXF1aXJtZW50cyxcclxuICBoZWFkaW5nIH06IFByb3BzICYge2hlYWRpbmc/OiBzdHJpbmd9KSA9PlxyXG57XHJcbiAgY29uc3QgY29sdW1ucyA9IFtcIkVcIiwgXCJDXCIsIFwiQVwiXTtcclxuICBjb25zdCByb3dzOiBLbm93bGVkZ2VSZXF1aXJlbWVudFtdW10gPSBbXTtcclxuICBjb25zdCByZXFzID0gcmVxdWlyZW1lbnRzLnNsaWNlKCk7XHJcbiAgbGV0IHJvdzogS25vd2xlZGdlUmVxdWlyZW1lbnRbXSB8IG51bGwgPSBudWxsO1xyXG4gIHdoaWxlICh0cnVlKSB7XHJcbiAgICByb3cgPSBjb2x1bW5zLm1hcChncmFkZSA9PiB7XHJcbiAgICAgIGNvbnN0IHBOZXh0ID0gcmVxcy5maW5kSW5kZXgociA9PiByLmdyYWRlU3RlcC50b1VwcGVyQ2FzZSgpID09PSBncmFkZSk7XHJcbiAgICAgIGlmIChwTmV4dCA8IDApIHJldHVybiBudWxsO1xyXG4gICAgICBjb25zdCBydiA9IHJlcXNbcE5leHRdO1xyXG4gICAgICByZXFzLnNwbGljZShwTmV4dCwgMSk7XHJcbiAgICAgIHJldHVybiBpbmNsdWRlZElkcyA/XHJcbiAgICAgICAgKGluY2x1ZGVkSWRzW3J2LmlkXSA/IHJ2IDogdW5kZWZpbmVkKSA6XHJcbiAgICAgICAgcnY7XHJcbiAgICB9KTtcclxuICAgIGlmIChyb3cuZXZlcnkociA9PiByID09PSBudWxsKSlcclxuICAgICAgYnJlYWs7XHJcbiAgICBpZiAoIXJvdy5ldmVyeShyID0+ICFyKSkge1xyXG4gICAgICByb3dzLnB1c2gocm93KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiA8PlxyXG4gICAge2hlYWRpbmcgJiYgPGg0PntoZWFkaW5nfTwvaDQ+fVxyXG4gICAgPHRhYmxlPlxyXG4gICAgICA8dGhlYWQ+XHJcbiAgICAgICAgPHRyPlxyXG4gICAgICAgICAge2NvbHVtbnMubWFwKGMgPT4gPHRoIGtleT17Y30+e2N9PC90aD4pfVxyXG4gICAgICAgIDwvdHI+XHJcbiAgICAgIDwvdGhlYWQ+XHJcbiAgICAgIDx0Ym9keT5cclxuICAgICAgICB7cm93cy5tYXAoKHJvdyxpKSA9PiA8UmVhY3QuRnJhZ21lbnQga2V5PXtpfT5cclxuICAgICAgICAgICAgPHRyIGtleT17aX0+XHJcbiAgICAgICAgICAgICAge3Jvdy5tYXAoKGNvbHVtbixqKSA9PlxyXG4gICAgICAgICAgICAgICAge3ZhciBjb2x1bW5QYXJ0aWFsUmVxID0gY29sdW1uICYmIHBhcnRpYWxSZXF1aXJtZW50cyAmJiBwYXJ0aWFsUmVxdWlybWVudHNbY29sdW1uLmlkXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiA8dGQga2V5PXtqfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogY29sdW1uUGFydGlhbFJlcSA/IGNvbHVtblBhcnRpYWxSZXEuam9pbihcIi5cIikgOiBjb2x1bW4gPyBjb2x1bW4ubmFtZSA6IFwiXCJ9fSAvPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gPHRkIGtleT17an0+XHJcbiAgICAgICAgICAgICAgICAvLyB7cGFydGlhbFJlcXVpcm1lbnRzLm1hcCgocHIsIGspID0+IHByW2NvbHVtbi5pZF0gP1xyXG4gICAgICAgICAgICAgICAgLy8gICA8c3BhbiBrZXk9e2t9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7fX0vPlxyXG4gICAgICAgICAgICAgICAgLy8gKX1cclxuICAgICAgICAgICAgICAgIC8vIDwvdGQ+XHJcbiAgICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAge2V4cGxhaW5lZFJlcXVpcmVtZW50cyAmJiA8dHI+XHJcbiAgICAgICAgICAgICAge3Jvdy5tYXAoKGNvbHVtbixqKSA9PlxyXG4gICAgICAgICAgICAgICAgPHRkIGtleT17an0gY2xhc3NOYW1lPVwiZXhwbGFpbmVkLXJlcXVpcmVtZW50XCI+XHJcbiAgICAgICAgICAgICAgICAgIDxkaXY+eyhjb2x1bW4gJiYgZXhwbGFpbmVkUmVxdWlyZW1lbnRzW2NvbHVtbi5pZF0pIHx8IFwiXCJ9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L3RkPil9XHJcbiAgICAgICAgICAgIDwvdHI+fVxyXG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cclxuICAgICAgICApfVxyXG4gICAgICA8L3Rib2R5PlxyXG4gICAgPC90YWJsZT5cclxuICA8Lz47XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgYXZhaWxhYmxlOiB7bmFtZTogc3RyaW5nLCBrZXk6IHN0cmluZ31bXVxyXG4gIHNlbGVjdGVkOiBzdHJpbmdbXVxyXG4gIG9uQ2hhbmdlOiAoc2VsZWN0ZWQ6IHN0cmluZ1tdLCBjbGlja2VkS2V5OiBzdHJpbmcsIHdhc0NoZWNrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDaGVja2xpc3QgPSAoe2F2YWlsYWJsZSwgc2VsZWN0ZWQsIG9uQ2hhbmdlfTogUHJvcHMpID0+IDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxyXG4gIHtcclxuICAgIGF2YWlsYWJsZS5tYXAoKHtrZXksIG5hbWV9KSA9PiB7XHJcbiAgICAgIGNvbnN0IGNoZWNrZWQgPSBzZWxlY3RlZC5pbmNsdWRlcyhrZXkpO1xyXG4gICAgICByZXR1cm4gPGRpdiBrZXk9e2tleX0gY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIiBvbkNsaWNrPXsoKT0+XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlKGNoZWNrZWQgP1xyXG4gICAgICAgICAgICAgIHNlbGVjdGVkLmZpbHRlcihrID0+IGsgIT0ga2V5KSA6XHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWQuY29uY2F0KGtleSksXHJcbiAgICAgICAgICAgICAga2V5LFxyXG4gICAgICAgICAgICAgIGNoZWNrZWQpfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiY2hlY2tCb3hcIiArIChjaGVja2VkID8gXCIgY2hlY2tlZFwiIDogXCJcIil9PjwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPntuYW1lfTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICB9XHJcbiAgICApXHJcbiAgfVxyXG48L2Rpdj5cclxuIiwiaW1wb3J0IHsgVGFzaywgTGVhcm5pbmdHb2Fsc0NvbnRlbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGNvbXBhcmVQcm9wLCBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IGdldE9yZGVyZWREb2NzIH0gZnJvbSAnLi9vcmRlcmVkLXJlcXVpcmVtZW50cyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U29ydGVkVGFza3MoY29udGVudDogTGVhcm5pbmdHb2Fsc0NvbnRlbnQpIHtcclxuICByZXR1cm4gZ2V0T3JkZXJlZERvY3MoY29udGVudC50YXNrcywgY29udGVudC50YXNrT3JkZXIsIHthcHBlbmRMZWZ0b3ZlcnM6IHRydWV9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVVcGRhdGVkT3JkZXI8VCBleHRlbmRzIHtpZDogc3RyaW5nfT4oXHJcbiAgZG9jczogVFtdLFxyXG4gIGN1cnJlbnRPcmRlcjogc3RyaW5nW10gfCB1bmRlZmluZWQsXHJcbiAgc291cmNlOiBULFxyXG4gIHRhcmdldDogVCxcclxuICBwbGFjZW1lbnQ6ICdiZWZvcmUnIHwgJ2FmdGVyJyxcclxuICB7YXBwZW5kTGVmdG92ZXJzfSA9IHthcHBlbmRMZWZ0b3ZlcnM6IGZhbHNlfSkgOiBzdHJpbmdbXVxyXG57XHJcbiAgY29uc3Qgb3JkZXJlZElkcyA9IGdldE9yZGVyZWREb2NzKGRvY3MsIGN1cnJlbnRPcmRlciwge2FwcGVuZExlZnRvdmVyczogdHJ1ZX0pLm1hcCh0ID0+IHQuaWQpO1xyXG4gIGNvbnN0IHBsYWNlQmVmb3JlID0gcGxhY2VtZW50ID09PSAnYmVmb3JlJztcclxuXHJcbiAgY29uc3QgcmVzdWx0ID0gZmxhdHRlbihcclxuICAgIG9yZGVyZWRJZHNcclxuICAgICAgLmZpbHRlcihpZCA9PiBpZCAhPT0gc291cmNlLmlkKSAvLyBSZW1vdmUgc291cmNlIGlkXHJcbiAgICAgIC5tYXAoaWQgPT4gaWQgIT09IHRhcmdldC5pZCA/XHJcbiAgICAgICAgLy8gV2UncmUgbm90IG9uIHRhcmdldFxyXG4gICAgICAgIGlkIDpcclxuICAgICAgICAvLyBXZSdyZSBvbiB0YXJnZXQuIFBsYWNlIGJlZm9yZSBvciBhZnRlcj9cclxuICAgICAgICBwbGFjZUJlZm9yZSA/XHJcbiAgICAgICAgICBbc291cmNlLmlkLCBpZF0gOlxyXG4gICAgICAgICAgW2lkLCBzb3VyY2UuaWRdXHJcbiAgICAgIClcclxuICApO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuIiwiaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8gfSBmcm9tIFwia2VkYmFja2VuZC9yZXBvXCI7XHJcbmltcG9ydCB7IFJvdXRlQ29tcG9uZW50UHJvcHMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBkYiB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvZGInO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IENvdXJzZUluc3RhbmNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQdWJsaXNoQ291cnNlQXJndW1lbnRzIHtcclxuICBzY2hvb2w6IHN0cmluZztcclxuICBkcmFmdFJlcG86IEtlZEJhY2tlbmRSZXBvO1xyXG4gIGNvdXJzZTogQ291cnNlSW5zdGFuY2U7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdWJsaXNoQ291cnNlKHtzY2hvb2wsIGRyYWZ0UmVwbywgY291cnNlfTogUHVibGlzaENvdXJzZUFyZ3VtZW50cykge1xyXG4gIGxldCBkZXN0aW5hdGlvblJlcG86IEtlZEJhY2tlbmRSZXBvO1xyXG4gIGlmIChzY2hvb2wgPT09IFwic3RhbmRhcmRcIikge1xyXG4gICAgLy8gRWRpdGluZyBTdGFuZGFyZCBTY2hvb2wgc2hvdWxkIG1lcmdlIHRvIHJlYWxpdHkuXHJcbiAgICBkcmFmdFJlcG8ubWVyZ2UoKTtcclxuICAgIGRlc3RpbmF0aW9uUmVwbyA9IGRiO1xyXG4gIH1cclxuICBlbHNlIHtcclxuICAgIC8vIEVkaXRpbmcgY2VydGFpbiBzY2hvb2wgc2hvdWxkIG1lcmdlIHRvIHNjaG9vbCBicmFuY2guXHJcbiAgICBjb25zdCBzY2hvb2xCcmFuY2hJZCA9IGF3YWl0IGRiLnNjaG9vbHMubmFtZShzY2hvb2wpLnNpbmdsZSgpLm1hcChzY2hvb2wgPT4gc2Nob29sLm9mZmljaWFsQnJhbmNoSWQpLmxvYWQoKTtcclxuICAgIGRyYWZ0UmVwby5tZXJnZShzY2hvb2xCcmFuY2hJZCk7XHJcbiAgICBkZXN0aW5hdGlvblJlcG8gPSBkYi5icmFuY2goc2Nob29sQnJhbmNoSWQpO1xyXG4gIH1cclxuICBkZXN0aW5hdGlvblJlcG8uY291cnNlSW5zdGFuY2VzLnVwZGF0ZShjb3Vyc2UsIHtcclxuICAgIG1vZGlmaWVkRGF0ZTogRGF0ZS5ub3coKSxcclxuICAgIG1vZGlmaWVkQnk6IHtcclxuICAgICAgbmFtZTogZW52LmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lLFxyXG4gICAgICB1cmw6IGBtYWlsdG86JHtlbnYuY3VycmVudFVzZXIubWFpbH1gXHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgLy9hd2FpdCBkYi5zYXZlTm93KCk7XHJcbiAgLy9oaXN0b3J5LnB1c2goYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZUlkfS90YWJzLyR7YWN0aXZlVGFiIHx8ICckJ31gKTtcclxufVxyXG5cclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYXNrV2l0aE1ldGFkYXRhIHtcclxuICB0YXNrOiBUYXNrO1xyXG4gIGlzVGFza093bmVyOiBib29sZWFuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHRhc2tNZXRhczogVGFza1dpdGhNZXRhZGF0YVtdO1xyXG4gIG9uU29ydDogKHNvdXJjZTogVGFzaywgdGFyZ2V0OiBUYXNrLCBwbGFjZW1lbnQ6ICdiZWZvcmUnIHwgJ2FmdGVyJykgPT4gdm9pZDtcclxuICByZW5kZXJFZGl0TGluaz86ICh0YXNrTWV0YTogVGFza1dpdGhNZXRhZGF0YSkgPT4gYW55O1xyXG4gIHJlbmRlckxpbms6ICh0YXNrTWV0YTogVGFza1dpdGhNZXRhZGF0YSkgPT4gYW55O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdGFza0hhc01pZ3JhdGVkVGV4dHModGFzazogVGFzaykge1xyXG4gIHJldHVybiB0YXNrLm1pZ3JhdGVkVGV4dHMgJiYgT2JqZWN0LmtleXModGFzay5taWdyYXRlZFRleHRzKS5zb21lKHR5cGUgPT5cclxuICAgIE9iamVjdC5rZXlzKHRhc2subWlncmF0ZWRUZXh0c1t0eXBlXSkubGVuZ3RoID4gMCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBTb3J0YWJsZVRhc2tMaXN0KHt0YXNrTWV0YXMsIHJlbmRlckVkaXRMaW5rLCByZW5kZXJMaW5rLCBvblNvcnR9OiBQcm9wcykge1xyXG4gIGNvbnN0IFtkcmFnU3RhdGUsIHNldERyYWdTdGF0ZV0gPSB1c2VTdGF0ZSh7XHJcbiAgICB0YXNrQmVpbmdEcmFnZ2VkOiBudWxsIGFzIFRhc2sgfCBudWxsLFxyXG4gICAgdGFza0JlaW5nSG92ZXJlZDogbnVsbCBhcyBUYXNrIHwgbnVsbCxcclxuICAgIGluc2VydEJlZm9yZTogZmFsc2UsXHJcbiAgICBvcmlnaW5DbGllbnRZOiAtMVxyXG4gIH0pO1xyXG4gIGNvbnN0IHt0YXNrQmVpbmdEcmFnZ2VkLCB0YXNrQmVpbmdIb3ZlcmVkLCBpbnNlcnRCZWZvcmUsIG9yaWdpbkNsaWVudFl9ID0gZHJhZ1N0YXRlO1xyXG5cclxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyIHNvcnRhYmxlXCJcclxuICAgICAgb25Ecm9wPXtldiA9PiB7XHJcbiAgICAgICAgaWYgKHRhc2tCZWluZ0hvdmVyZWQgJiYgdGFza0JlaW5nRHJhZ2dlZCkge1xyXG4gICAgICAgICAgb25Tb3J0KHRhc2tCZWluZ0RyYWdnZWQsIHRhc2tCZWluZ0hvdmVyZWQsIGluc2VydEJlZm9yZSA/ICdiZWZvcmUnIDogJ2FmdGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNldERyYWdTdGF0ZSh7Li4uZHJhZ1N0YXRlLCB0YXNrQmVpbmdIb3ZlcmVkOiBudWxsLCB0YXNrQmVpbmdEcmFnZ2VkOiBudWxsfSk7XHJcbiAgICAgIH19XHJcbiAgICA+XHJcbiAge3Rhc2tNZXRhcy5tYXAodGFza01ldGEgPT4ge1xyXG4gICAgY29uc3Qge3Rhc2ssIGlzVGFza093bmVyfSA9IHRhc2tNZXRhO1xyXG4gICAgY29uc3QgaGFzTWlncmF0ZWRUZXh0cyA9IHRhc2tIYXNNaWdyYXRlZFRleHRzKHRhc2spO1xyXG4gICAgY29uc3QgdGFza0lkID0gdGFzay5pZDtcclxuXHJcbiAgICByZXR1cm4gPFJlYWN0LkZyYWdtZW50IGtleT17dGFza0lkfT5cclxuXHJcbiAgICAgIHtpbnNlcnRCZWZvcmUgJiYgdGFza0JlaW5nSG92ZXJlZCA9PT0gdGFzayA/XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wLXRhcmdldFwiIG9uRHJhZ092ZXI9e2V2ID0+IGV2LnByZXZlbnREZWZhdWx0KCl9PiZuYnNwOzwvZGl2PiA6XHJcbiAgICAgICAgbnVsbFxyXG4gICAgICB9XHJcblxyXG4gICAgICA8ZGl2XHJcbiAgICAgICAgY2xhc3NOYW1lPXtbXCJhbGlnbi1ob3Jpem9udGFsXCIsIFwiZHJhZ2dhYmxlXCIsIHRhc2sgPT09IHRhc2tCZWluZ0RyYWdnZWQgJiYgXCJkcmFnLXNvdXJjZVwiXS5maWx0ZXIoeD0+eCkuam9pbignICcpfVxyXG4gICAgICAgIGRyYWdnYWJsZT17dHJ1ZX1cclxuICAgICAgICBvbkRyYWdTdGFydD17ZXYgPT4ge1xyXG4gICAgICAgICAgZXYuZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgPSBcIm1vdmVcIjtcclxuICAgICAgICAgIHNldERyYWdTdGF0ZSh7Li4uZHJhZ1N0YXRlLCBvcmlnaW5DbGllbnRZOiBldi5jbGllbnRZLCB0YXNrQmVpbmdEcmFnZ2VkOiB0YXNrfSlcclxuICAgICAgICB9fVxyXG4gICAgICAgIG9uRHJhZ092ZXI9e2V2ID0+IHtcclxuICAgICAgICAgIGlmICghdGFza0JlaW5nRHJhZ2dlZCkgcmV0dXJuO1xyXG4gICAgICAgICAgaWYgKHRhc2tCZWluZ0RyYWdnZWQgPT09IHRhc2spIHtcclxuICAgICAgICAgICAgc2V0RHJhZ1N0YXRlKHsuLi5kcmFnU3RhdGUsIHRhc2tCZWluZ0hvdmVyZWQ6IG51bGx9KTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgIGV2LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJtb3ZlXCI7XHJcbiAgICAgICAgICBzZXREcmFnU3RhdGUoey4uLmRyYWdTdGF0ZSwgdGFza0JlaW5nSG92ZXJlZDogdGFzaywgaW5zZXJ0QmVmb3JlOiBvcmlnaW5DbGllbnRZID4gZXYuY2xpZW50WX0pO1xyXG4gICAgICAgIH19XHJcbiAgICAgICAgb25EcmFnRW5kPXtldiA9PiB7XHJcbiAgICAgICAgICBzZXREcmFnU3RhdGUoey4uLmRyYWdTdGF0ZSwgdGFza0JlaW5nSG92ZXJlZDogbnVsbCwgdGFza0JlaW5nRHJhZ2dlZDogbnVsbH0pO1xyXG4gICAgICAgIH19PlxyXG4gICAgICAgIHtpc1Rhc2tPd25lciAmJiBoYXNNaWdyYXRlZFRleHRzICYmIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICA8ZGl2IHN0eWxlPXt7cG9zaXRpb246J3JlbGF0aXZlJywgdG9wOicwLjJlbScsIGxlZnQ6ICctMC43ZW0nfX0+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBhZ2VsaW5lc1wiIHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgdG9wOiAwLCBsZWZ0OiAwLCBjb2xvcjonIzQ5YzM1YSd9fSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICB7cmVuZGVyRWRpdExpbmsodGFza01ldGEpfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICB7cmVuZGVyTGluayh0YXNrTWV0YSl9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgeyFpbnNlcnRCZWZvcmUgJiYgdGFza0JlaW5nSG92ZXJlZCA9PT0gdGFzayA/XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wLXRhcmdldFwiIG9uRHJhZ092ZXI9e2V2ID0+IGV2LnByZXZlbnREZWZhdWx0KCl9PiZuYnNwOzwvZGl2PiA6XHJcbiAgICAgICAgbnVsbFxyXG4gICAgICB9XHJcblxyXG4gICAgPC9SZWFjdC5GcmFnbWVudD47XHJcbiAgfSl9XHJcbiAgPC9kaXY+O1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgU2Nob29sQ291cnNlcyB9IGZyb20gJy4uL3N1Yi1jb21wb25lbnRzL3NjaG9vbC1jb3Vyc2VzJztcclxuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGR0Rm9ybWF0IH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBEaWFsb2cgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvdXJzZS1lZGl0b3ItaG9zdCc7XHJcbmltcG9ydCB2YWxpZFVybCBmcm9tICd2YWxpZC11cmwnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICByZXNvdXJjZT86IFJlc291cmNlO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgb25TYXZlOiAobmV3UmVzb3VyY2U6IFJlc291cmNlKSA9PiB2b2lkO1xyXG4gIG9uRGVsZXRlPzogKCk9PnZvaWQ7XHJcbn1cclxuXHJcbnR5cGUgU3RhdGUgPSBSZXNvdXJjZTtcclxuXHJcbmV4cG9ydCBjbGFzcyBFZGl0UmVzb3VyY2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IGltcGxlbWVudHMgRGlhbG9nIHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLnByb3BzLnJlc291cmNlIHx8IHtuYW1lOiAnJywgdXJsOiAnJ307XHJcbiAgfVxyXG5cclxuICBzYXZlKCkge1xyXG4gICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLnN0YXRlO1xyXG4gICAgaWYgKCF2YWxpZFVybC5pc1VyaShyZXNvdXJjZS51cmwpKSB0aHJvdyBuZXcgRXJyb3IoTGBBbmdpdmVuIFVSTCAnJHtyZXNvdXJjZS51cmx9JyDDpHIgb2dpbHRpZy4gU2thIGLDtnJqYSBtZWQgZXhlbXBlbHZpcyBodHRwOiwgaHR0cHM6IGVsbGVyIG1haWx0bzpgKTtcclxuICAgIHRoaXMucHJvcHMub25TYXZlKHJlc291cmNlKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHt0aXRsZSwgb25TYXZlLCBvbkRlbGV0ZX0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgaXNWYWxpZFVybCA9IHZhbGlkVXJsLmlzVXJpKHRoaXMuc3RhdGUudXJsKTtcclxuXHJcbiAgICByZXR1cm4gPGRpdj48ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICAgIDxoMj57dGl0bGV9PC9oMj5cclxuICAgICAgPGhyIC8+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+TmFtbjo8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgYXV0b0ZvY3VzXHJcbiAgICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgICBzaXplPXs1MH1cclxuICAgICAgICAgICAgdmFsdWU9e3Jlc291cmNlLm5hbWV9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtldj0+dGhpcy5zZXRTdGF0ZSh7bmFtZTogZXYudGFyZ2V0LnZhbHVlfSl9IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPkzDpG5rOjwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIFwiPlxyXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICAgIHNpemU9ezUwfVxyXG4gICAgICAgICAgICB2YWx1ZT17cmVzb3VyY2UudXJsfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17ZXY9PnRoaXMuc2V0U3RhdGUoe3VybDogZXYudGFyZ2V0LnZhbHVlfSl9IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8YnIgLz48L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxyXG4gICAgICAgIHsocmVzb3VyY2UuY3JlYXRlZERhdGUgfHwgcmVzb3VyY2UubW9kaWZpZWREYXRlKSAmJiA8ZGl2PlxyXG4gICAgICAgICAge3Jlc291cmNlLmNyZWF0ZWREYXRlICYmIDxwPlxyXG4gICAgICAgICAgICBSZXN1cnNlbi9Mw6Rua2VuIHNrYXBhZGVzIHtkdEZvcm1hdChyZXNvdXJjZS5jcmVhdGVkRGF0ZSl9IGF2IDxzdHJvbmc+e3Jlc291cmNlLmNyZWF0ZWRCeS5uYW1lfTwvc3Ryb25nPi5cclxuICAgICAgICAgIDwvcD59XHJcbiAgICAgICAgICB7cmVzb3VyY2UubW9kaWZpZWREYXRlICYmIDxwPlxyXG4gICAgICAgICAgICBSZXN1cnNlbi9Mw6Rua2VuIHJlZGlnZXJhZGVzIHNlbmFzdCB7ZHRGb3JtYXQocmVzb3VyY2UubW9kaWZpZWREYXRlKX0gYXYgPHN0cm9uZz57cmVzb3VyY2UubW9kaWZpZWRCeS5uYW1lfTwvc3Ryb25nPi5cclxuICAgICAgICAgIDwvcD59XHJcbiAgICAgICAgICA8YnIgLz48YnIvPlxyXG4gICAgICAgIDwvZGl2Pn1cclxuICAgICAgICB7b25EZWxldGUgJiYgPGRpdiB0YWJJbmRleD17Mn0gY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCk9Pm9uRGVsZXRlKCl9PlxyXG4gICAgICAgICAgVGEgYm9ydCByZXN1cnMvbMOkbmtcclxuICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgPGEgdGFiSW5kZXg9ezF9IGNsYXNzTmFtZT17XCJidG4gYnRuLWxhcmdlXCIgKyAoaXNWYWxpZFVybCA/IFwiXCIgOiBcIiBidG4taW5hY3RpdmVcIil9IG9uQ2xpY2s9e2lzVmFsaWRVcmwgJiYgKCgpID0+IG9uU2F2ZShyZXNvdXJjZSkpfT5TcGFyYTwvYT5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VycyB9IGZyb20gJy4uL2RhdGEvdXNlcnMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENob29zZVVzZXIoKSB7XHJcbiAgbGV0IHNlbGVjdDtcclxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1sYXlvdXRcIj5cclxuICAgIDxoMj5Ww6RsaiBhbnbDpG5kYXJlPC9oMj5cclxuICAgIDx0YWJsZSBjbGFzc05hbWU9XCJsb2dpbi10YWJsZVwiPjx0aGVhZD48dHI+XHJcbiAgICAgIDx0aD5OYW1uPC90aD5cclxuICAgICAgPHRoPlJvbGxlcjwvdGg+XHJcbiAgICAgIDx0aD5FLXBvc3Q8L3RoPlxyXG4gICAgICA8dGg+U2tvbGE8L3RoPlxyXG4gICAgPC90cj48L3RoZWFkPlxyXG4gICAgICA8dGJvZHk+XHJcbiAgICAgICAge3VzZXJzLm1hcCgoeyB1c2VybmFtZSwgZGlzcGxheU5hbWUsIG1haWwsIHNjaG9vbCwgcm9sZXMgfSkgPT5cclxuICAgICAgICAgIDx0ciBrZXk9e21haWx9IG9uQ2xpY2s9eygpID0+IGxvY2F0aW9uLnNlYXJjaCA9IGA/dXNlcj0ke3VzZXJuYW1lfWB9PlxyXG4gICAgICAgICAgICA8dGQ+e2Rpc3BsYXlOYW1lfTwvdGQ+XHJcbiAgICAgICAgICAgIDx0ZCBzdHlsZT17cm9sZXMubGVuZ3RoID09PSAwID8geyBmb250U3R5bGU6ICdpdGFsaWMnIH0gOiB7fX0+e3JvbGVzLmxlbmd0aCA9PT0gMCA/IFwic2FrbmFyIHJvbGxlclwiIDogcm9sZXMuam9pbignLCAnKX08L3RkPlxyXG4gICAgICAgICAgICA8dGQ+e21haWx9PC90ZD5cclxuICAgICAgICAgICAgPHRkIHN0eWxlPXtzY2hvb2wgPyB7fSA6IHsgZm9udFN0eWxlOiAnaXRhbGljJyB9fT57c2Nob29sIHx8IFwic2FrbmFyIHNrb2xhXCJ9PC90ZD5cclxuICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC90Ym9keT48L3RhYmxlPlxyXG4gIDwvZGl2PlxyXG59O1xyXG4iLCJpbXBvcnQgeyBkYiwgZ2xvYmFsSWQgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsaXN0Q291cnNlSW5zdGFuY2VzKCkge1xyXG4gIHJldHVybiBkYi5jb3Vyc2VJbnN0YW5jZXMuaGFzRWRnZXNGcm9tKFtnbG9iYWxJZF0pO1xyXG59XHJcbiIsIlxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q291cnNlQ29kZXNGcm9tVGFncyh0YWdzOiBzdHJpbmdbXSkge1xyXG4gIHJldHVybiAodGFncyB8fCBbXSlcclxuICAgIC5maWx0ZXIodGFnID0+IHRhZy5zdGFydHNXaXRoKFwiY291cnNlOlwiKSlcclxuICAgIC5tYXAoY291cnNlVGFnID0+IGNvdXJzZVRhZy5zdWJzdHIoXCJjb3Vyc2U6XCIubGVuZ3RoKSk7XHJcbn1cclxuIiwiaW1wb3J0IHsgQWJpbGl0eSwgQ2VudHJhbENvbnRlbnQsIEtub3dsZWRnZVJlcXVpcmVtZW50LCBDb3Vyc2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFZhbHVlLCBDb2xsZWN0aW9uLCBFbWl0dGVyIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgZ2V0T3JkZXJlZERvY3MgfSBmcm9tICcuL29yZGVyZWQtcmVxdWlyZW1lbnRzJztcclxuaW1wb3J0IHsgV2l0aEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcblxyXG5cclxuZXhwb3J0IHR5cGUgQ291cnNlV2l0aFJlcXVpcmVtZW50cyA9IFdpdGhHcmFwaHM8Q291cnNlLCBcImFiaWxpdGllc1wiIHwgXCJjZW50cmFsQ29udGVudFwiIHwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIj47XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhbmRhcmRDb3Vyc2VzV2l0aE9yZGVyZWRSZXF1aXJlbWVudHMoY291cnNlQ29kZXM6IHN0cmluZ1tdKTogVmFsdWU8Q291cnNlV2l0aFJlcXVpcmVtZW50c1tdPiB7XHJcbiAgY29uc3QgY291cnNlQ29kZVRhZ3MgPSBjb3Vyc2VDb2Rlcy5tYXAoY29kZSA9PiBjb2RlLnN0YXJ0c1dpdGgoJ2NvdXJzZTonKSA/IGNvZGUgOiBcImNvdXJzZTpcIiArIGNvZGUpO1xyXG4gIGlmIChjb3Vyc2VDb2RlVGFncy5sZW5ndGggPT09IDApIHJldHVybiBuZXcgRW1pdHRlcihbXSk7XHJcbiAgcmV0dXJuIGRiLmNvdXJzZXMuaW5jbHVkZShcImFiaWxpdGllc1wiLCBcImNlbnRyYWxDb250ZW50XCIsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIpXHJcbiAgICAudGFncyguLi5jb3Vyc2VDb2RlVGFncylcclxuICAgIC5maWx0ZXIoY291cnNlID0+IGNvdXJzZS5pc1RlbXBsYXRlKSAvLyBCVUdCVUc6IEluIEtHLCB3ZSB3b3VsZCBuZWVkIHRoaXMgZmlsdGVyLCBub3QgS1MuIE5lZWQgYW5vdGhlciBhdXRob3JpemVkIHdheSBvZiBnZXR0aW5nIHRoZSBzdGFuZGFyZCBjb3Vyc2Ugb25seSFcclxuICAgIC5tYXAoY291cnNlID0+ICh7XHJcbiAgICAgIC4uLmNvdXJzZSxcclxuICAgICAgYWJpbGl0aWVzOiBnZXRPcmRlcmVkRG9jcyhjb3Vyc2UuYWJpbGl0aWVzLCBjb3Vyc2UuYWJpbGl0aWVzT3JkZXIpLFxyXG4gICAgICBjZW50cmFsQ29udGVudDogZ2V0T3JkZXJlZERvY3MoY291cnNlLmNlbnRyYWxDb250ZW50LCBjb3Vyc2UuY2VudHJhbENvbnRlbnRPcmRlciksXHJcbiAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50czogZ2V0T3JkZXJlZERvY3MoY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cywgY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyKVxyXG4gICAgfSkpLnRvVmFsdWUoKVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgUmVzdENsaWVudFN0YXR1cyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgVmFsdWUgfSBmcm9tICdrZWRiYWNrZW5kL29ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBsaXZlUXVlcnlWaWV3IH0gZnJvbSAnLi9saXZlLXF1ZXJ5LXZpZXcnO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgRWxsaXBzaXNMb2FkZXIgfSBmcm9tICcuLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9lbGxpcHNpcy1sb2FkZXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IExvYWRpbmdJbmRpY2F0b3IgPSBsaXZlUXVlcnlWaWV3KCgpID0+XHJcbiAgZW52LmtlZEJhY2tlbmRDbGllbnQuaHR0cC5zdGF0dXMuY29tYmluZUxhdGVzdChlbnYuZWRzQ2xpZW50Lmh0dHAuc3RhdHVzKVxyXG4gIC5tYXAoKFtrZWRCYWNrZW5kU3RhdHVzLCBlZHNTdGF0dXNdKT0+PGRpdiBjbGFzc05hbWU9XCJsb2FkaW5nLWluZGljYXRvclwiPjxkaXYgY2xhc3NOYW1lPVwiaW5kaWNhdG9yXCI+XHJcbiAgICB7a2VkQmFja2VuZFN0YXR1cy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnMgPiAwIHx8IGVkc1N0YXR1cy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnMgPiAwID9cclxuICAgICAgPFNwaW5uZXIgLz4gOiB1bmRlZmluZWR9XHJcbjwvZGl2PjwvZGl2PikpO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7VGFzaywgQ291cnNlfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHRhc2s6IFRhc2s7XHJcbiAgY291cnNlOiBDb3Vyc2U7XHJcbiAgdXBkYXRlTGluazogKGlkOiBzdHJpbmcsIGxpbmtPclVubGluazogYm9vbGVhbikgPT4gdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFRhc2tNaWdyYXRpb25Cb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHt0YXNrLCBjb3Vyc2UsIHVwZGF0ZUxpbmt9ID0gdGhpcy5wcm9wcztcclxuICAgIGlmICghdGFzay5taWdyYXRlZFRleHRzKSByZXR1cm4gPD4mbmJzcDs8Lz47XHJcbiAgICBjb25zdCB7YWJpbGl0aWVzLCBjZW50cmFsQ29udGVudCwga25vd2xlZGdlUmVxdWlyZW1lbnRzfSA9IHRhc2subWlncmF0ZWRUZXh0cztcclxuICAgIGNvbnN0IGtycyA9IE9iamVjdC5rZXlzKGtub3dsZWRnZVJlcXVpcmVtZW50cyB8fCB7fSkubWFwKGlkID0+ICh7XHJcbiAgICAgIC4uLmNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZmluZCh0ID0+IHQuaWQgPT09IGlkKSxcclxuICAgICAgLi4ua25vd2xlZGdlUmVxdWlyZW1lbnRzW2lkXVxyXG4gICAgfSkpLy8uZmlsdGVyKCh7bmFtZX0pID0+ICEhbmFtZSk7XHJcbiAgICBjb25zdCBrckEgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhdCBrdW5za2Fwc2tyYXYgZsO2ciBiZXR5Z2V0IEFcIiwgdHlwZTogXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgaXRlbXM6IGtycy5maWx0ZXIoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSAnQScpfTtcclxuICAgIGNvbnN0IGtyQyA9IHt0aXRsZTogXCJVcHBkYXRlcmF0IEt1bnNrYXBza3JhdiBmw7ZyIGJldHlnZXQgQ1wiLCB0eXBlOiBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBpdGVtczoga3JzLmZpbHRlcihrciA9PiBrci5ncmFkZVN0ZXAgPT09ICdDJyl9O1xyXG4gICAgY29uc3Qga3JFID0ge3RpdGxlOiBcIlVwcGRhdGVyYXQga3Vuc2thcHNrcmF2IGbDtnIgYmV0eWdldCBFXCIsIHR5cGU6IFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIGl0ZW1zOiBrcnMuZmlsdGVyKGtyID0+IGtyLmdyYWRlU3RlcCA9PT0gJ0UnKX07XHJcbiAgICBjb25zdCBhYnMgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhZGUgZsO2cm3DpWdvclwiLCB0eXBlOiBcImFiaWxpdGllc1wiLCBpdGVtczogT2JqZWN0LmtleXMoYWJpbGl0aWVzIHx8IHt9KS5tYXAoaWQgPT4gKHtcclxuICAgICAgLi4uY291cnNlLmFiaWxpdGllcy5maW5kKHQgPT4gdC5pZCA9PT0gaWQpLFxyXG4gICAgICAuLi5hYmlsaXRpZXNbaWRdfSlcclxuICAgICl9Ly8uZmlsdGVyKCh7bmFtZX0pID0+ICEhbmFtZSl9O1xyXG4gICAgY29uc3QgY2NzID0ge3RpdGxlOiBcIlVwcGRhdGVyYXQgY2VudHJhbHQgaW5uZWjDpWxsXCIsIHR5cGU6IFwiY2VudHJhbENvbnRlbnRcIiwgaXRlbXM6IE9iamVjdC5rZXlzKGNlbnRyYWxDb250ZW50IHx8IHt9KS5tYXAoaWQgPT4gKHtcclxuICAgICAgLi4uY291cnNlLmNlbnRyYWxDb250ZW50LmZpbmQoY2MgPT4gY2MuaWQgPT0gaWQpLFxyXG4gICAgICAuLi5jZW50cmFsQ29udGVudFtpZF1cclxuICAgICAgfSlcclxuICAgICl9Ly8uZmlsdGVyKCh7bmFtZX0pID0+ICEhbmFtZSl9O1xyXG4gICAgY29uc3QgdGFibGVzVG9TaG93ID0gW2tyQSwga3JDLCBrckUsIGNjcywgYWJzXS5maWx0ZXIoYm94SW5mbyA9PiBib3hJbmZvLml0ZW1zLmxlbmd0aCA+IDApO1xyXG4gICAgaWYgKHRhYmxlc1RvU2hvdy5sZW5ndGggPT09IDApIHJldHVybiA8PiZuYnNwOzwvPjtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8T3BlbkNsb3NlQm94IGNsYXNzTmFtZT1cImxhcmdlclwiIHRpdGxlPXs8ZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2FybmluZ0ZsYWdcIj5cclxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxwPlVwcGRhdGVyYWRlIGZvcm11bGVyaW5nYXIgZnLDpW4gU2tvbHZlcmtldDwvcD5cclxuICAgICAgPC9kaXY+fT5cclxuICAgICAgICB7dGFibGVzVG9TaG93Lm1hcCgoe3RpdGxlLCB0eXBlLCBpdGVtc30pID0+IDxkaXYga2V5PXt0aXRsZX0+XHJcbiAgICAgICAgICA8aDU+e3RpdGxlfTwvaDU+XHJcbiAgICAgICAgICA8dGFibGU+XHJcbiAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICA8dGggc3R5bGU9e3t3aWR0aDogXCI0MCVcIn19PlVyc3BydW5nbGlnIGZvcm11bGVyaW5nPC90aD5cclxuICAgICAgICAgICAgICAgIDx0aCBzdHlsZT17e3dpZHRoOiBcIjQwJVwifX0+U2tvbHZlcmtldHMgbnlhIGZvcm11bGVyaW5nPC90aD5cclxuICAgICAgICAgICAgICAgIDx0aD5Uw6Rja2VyIHVwcGdpZnRlbiBkZW4gbnlhIGZvcm11bGVyaW5nZW4/PC90aD5cclxuICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAge2l0ZW1zLm1hcChpdGVtID0+IDx0ciBrZXk9e2l0ZW0uaWR9PlxyXG4gICAgICAgICAgICAgICAgPHRkIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBpdGVtLm9sZFRleHR9fSAvPlxyXG4gICAgICAgICAgICAgICAgPHRkIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBpdGVtLm5hbWV9fSAvPlxyXG4gICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpPT51cGRhdGVMaW5rKGl0ZW0uaWQsIHRydWUpfT5KYSAtIGJlaMOlbGwga29wcGxpbmdlbjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpPT51cGRhdGVMaW5rKGl0ZW0uaWQsIGZhbHNlKX0+TmVqIC0gdGEgYm9ydCBrb3BwbGluZ2VuPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgIDwvdHI+KX1cclxuICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgIDwvdGFibGU+XHJcbiAgICAgICAgPC9kaXY+KX1cclxuICAgICAgPC9PcGVuQ2xvc2VCb3g+XHJcblxyXG4gICAgKVxyXG4gIH1cclxufSIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuXHJcbmV4cG9ydCB0eXBlIFRlcm0gPSAnQVQnIHwgJ1NUJzsgLy8gc2hvdWxkIGJlIGNoYW5nZWQgaW50byBGaXJzdCBUZXJtIC8gU2Vjb25kIFRlcm1cclxuZXhwb3J0IHR5cGUgQWNhZGVtaWNZZWFyID0gc3RyaW5nOyAvLyBcIjIwMTYvMjAxN1wiLCBcIjIwMTcvMjAxOFwiLCAuLi5cclxuZXhwb3J0IHR5cGUgU2Nob29sR3JhZGUgPSBudW1iZXI7IC8vIDAtOSAoZ3J1bmRza29sYSksIDEwLTEzIChneW1uYXNpdW0pXHJcbmV4cG9ydCB0eXBlIEdyYWRlID0gJ0EnIHwgJ0InIHwgJ0MnIHwgJ0QnIHwgJ0UnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBVc2VyIHtcclxuICAgIHVzZXJuYW1lPzogc3RyaW5nO1xyXG4gICAgbWFpbDogc3RyaW5nO1xyXG4gICAgZGlzcGxheU5hbWU6IHN0cmluZztcclxuICAgIHJvbGVzOiBzdHJpbmdbXTtcclxuICAgIHNjaG9vbEdyYWRlPzogbnVtYmVyO1xyXG4gICAgc2Nob29sPzogc3RyaW5nO1xyXG4gICAgc2Nob29sVHlwZT86IHN0cmluZztcclxuICAgIHR1dG9yRm9yPzogc3RyaW5nO1xyXG4gICAgZ3JvdXBzPzogc3RyaW5nW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWNhZGVtaWNZZWFyU3RydWN0dXJlXHJcbntcclxuIGFjYWRlbWljWWVhciA6IEFjYWRlbWljWWVhcjtcclxuIHN0YXJ0RGF0ZTogbW9tZW50Lk1vbWVudDtcclxuIGVuZERhdGU6IG1vbWVudC5Nb21lbnQ7XHJcbiBhY2FkZW1pY1N0YXJ0V2VlazogbnVtYmVyO1xyXG4gYWNhZGVtaWNFbmRXZWVrOiBudW1iZXI7XHJcbiBob2xpZGF5czoge3N0YXJ0RGF0ZTogc3RyaW5nLCBlbmREYXRlOiBzdHJpbmd9W107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdNb2R1bGVUYXNrcyB7XHJcbiAgICBtb2R1bGVOYW1lOiBzdHJpbmc7XHJcbiAgICB1cmw/OiBzdHJpbmc7XHJcbiAgICBzdWJqZWN0OiBTY2hvb2xTdWJqZWN0O1xyXG4gICAgY29tbW9uVGFza3M/OiBMZWFybmluZ1Rhc2tbXTtcclxuICAgIGxlYXJuaW5nR29hbHM6IExlYXJuaW5nR29hbFtdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExlYXJuaW5nR29hbCB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICB0YXNrcz86IExlYXJuaW5nVGFza1tdO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbUdvYWwge1xyXG4gIG5hbWU6IHN0cmluZyxcclxuICB1cmw6IHN0cmluZyxcclxuICBjb3Vyc2U6IHN0cmluZyxcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nXHJcbn1cclxuXHJcblxyXG4vKmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdHb2FsIHtcclxuICAgIGlkPzogc3RyaW5nO1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgY291cnNlSWQ/OiBzdHJpbmc7XHJcbiAgICBzdWJqZWN0SWQ/OiBzdHJpbmc7XHJcbn0qL1xyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdUYXNrIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHVybD86IHN0cmluZztcclxuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xyXG4gICAgZG9uZT86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdDb3Vyc2Uge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgdXJsPzogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNjaG9vbFN1YmplY3Qge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgY291cnNlOiBMZWFybmluZ0NvdXJzZTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvdXJzZSB7XHJcbiAgICAvL1NjaGVtYTogXCJbeWVhcit0ZXJtK3NjaG9vbFllYXIrbmFtZV0sc29ydG9yZGVyXCI7XHJcbiAgICBpZD86IHN0cmluZztcclxuICAgIC8vYVllYXI6IHN0cmluZzsgLy8gQWNhZGVtaWMgWWVhciAvIEzDpHPDpXIgLyBcIjIwMTYvMjAxN1wiLCBcIjIwMTcvMjAxOFwiLCAuLi5cclxuICAgIC8vc2Nob29sR3JhZGU6IG51bWJlcjsgLy8gw4Vyc2t1cnMgKDAtOSBncnVuZHNrb2xhLCAxMC0xMyBneW1uYXNpdW0pLiAxMDAgPSBlaiBidW5kZXQgdGlsbCDDpXJza3Vycy5cclxuICAgIC8vdGVybT86IFRlcm07IC8vIEFUIChBdXR1bW4gVGVybSkgLyBTVCAoU3ByaW5nIFRlcm0pXHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBwb2ludHM/OiBudW1iZXI7XHJcbiAgICBtb2R1bGVzPzogQ291cnNlTW9kdWxlW107XHJcbiAgICBsZWFybmluZ0dvYWxzPzogTGVhcm5pbmdHb2FsW107XHJcbiAgICB1cmw/OiBzdHJpbmc7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENvdXJzZU1vZHVsZSB7XHJcbiAgICBpZD86IHN0cmluZztcclxuICAgIGNvdXJzZUlkOiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICByZWFkb25seSB1cmw6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYXJnZXRHcmFkZSB7XHJcbiAgICBpZD86IHN0cmluZztcclxuICAgIHVzZXI6IHN0cmluZztcclxuICAgIGNvdXJzZUlkPzogc3RyaW5nO1xyXG4gICAgc3ViamVjdElkPzogc3RyaW5nO1xyXG4gICAgYVllYXI/OiBBY2FkZW1pY1llYXI7IC8vIEzDpHPDpXIsIHRleCBcIjIwMTYvMjAxN1wiLiBudWxsIG1lYW5zIGZpbmFsIGdvYWwuXHJcbiAgICB0ZXJtPzogVGVybTsgLy8gbnVsbCBtZWFucyBmaW5hbCBnb2FsLlxyXG4gICAgZ3JhZGU6IEdyYWRlO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IGZ1dHVyZUFiaWxpdGllcyA9IFtcclxuICAgIFwiTMOkcmEgYXR0IGzDpHJhXCIsXHJcbiAgICBcIlNhbWFyYmV0YVwiLFxyXG4gICAgXCJBZ2VyYSBnbG9iYWx0XCIsXHJcbiAgICBcIlZpc2EgaGFuZGxpbmdza3JhZnRcIixcclxuICAgIFwiVmFyYSBpbm5vdmF0aXZcIixcclxuICAgIFwiTGV2YSBkaWdpdGFsdFwiXTtcclxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcclxuaW1wb3J0IHsgY2ZnIH0gZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuXHJcbmNvbnN0IEhFQVJUQkVBVF9JTlRFUlZBTCA9IDUgKiA2MCAqIDEwMDA7IC8vIDUgbWludXRlcy5cclxuY29uc3QgSEVBUlRCRUFUX1VSTCA9IGNmZy5LRURfS0VFUF9BTElWRV9VUkw7XHJcblxyXG5sZXQgbGFzdEFjdGl2aXR5ID0gRGF0ZS5ub3coKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBrZWVwU2Vzc2lvbkFsaXZlKCkge1xyXG4gIHNldEludGVydmFsKG9uVGltZW91dCwgSEVBUlRCRUFUX0lOVEVSVkFMKTtcclxuICBzZXRUaW1lb3V0KCgpPT4kKCdib2R5JylcclxuICAgIC5tb3VzZW1vdmUob25Vc2VyQWN0aXZlKVxyXG4gICAgLmtleXByZXNzKG9uVXNlckFjdGl2ZSlcclxuICAgIC5zY3JvbGwob25Vc2VyQWN0aXZlKSwgMTAwKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25Vc2VyQWN0aXZlKCkge1xyXG4gIGxhc3RBY3Rpdml0eSA9IERhdGUubm93KCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uVGltZW91dCgpIHtcclxuICBjb25zdCBpbmFjdGl2aXR5VGltZSA9IERhdGUubm93KCkgLSBsYXN0QWN0aXZpdHk7XHJcbiAgaWYgKGluYWN0aXZpdHlUaW1lIDwgSEVBUlRCRUFUX0lOVEVSVkFMKSB7XHJcbiAgICBoZWFydGJlYXQoKTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGhlYXJ0YmVhdCgpIHtcclxuICBjb25zb2xlLmxvZyhgU2VuZGluZyBoZWFydGJlYXQgcmVxdWVzdCB0byAke0hFQVJUQkVBVF9VUkx9YCk7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKEhFQVJUQkVBVF9VUkwsIHtcclxuICAgICAgY2FjaGU6ICduby1jYWNoZScsXHJcbiAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nXHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKGBSZXNwb25zZSBmcm9tICR7SEVBUlRCRUFUX1VSTH06ICR7cmVzLnN0YXR1c30gJHtyZXMuc3RhdHVzVGV4dH1gKTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIGNvbnNvbGUud2FybihgUmVxdWVzdCB0byAke0hFQVJUQkVBVF9VUkx9IGZhaWxlZDogJHtlcnJ9YCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7VXJrdW5kUmVzcG9uc2V9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVcmt1bmRTdGF0dXNDbGFzcyAocmVzOiBVcmt1bmRSZXNwb25zZSkge1xyXG4gIGlmICghcmVzIHx8ICFyZXMuU3RhdHVzKSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9IGVsc2Ugc3dpdGNoIChyZXMuU3RhdHVzLlN0YXRlKSB7XHJcbiAgICBjYXNlICdFcnJvcic6XHJcbiAgICAgIHJldHVybiBgdXJrdW5kLXN0YXR1cyB1cmt1bmQtc3RhdHVzLWVycm9yYDtcclxuICAgIGNhc2UgJ1N1Ym1pdHRlZCc6XHJcbiAgICAgIHJldHVybiBgdXJrdW5kLXN0YXR1cyB1cmt1bmQtc3RhdHVzLXN1Ym1pdHRlZGA7XHJcbiAgICBjYXNlICdBY2NlcHRlZCc6XHJcbiAgICAgIHJldHVybiBgdXJrdW5kLXN0YXR1cyB1cmt1bmQtc3RhdHVzLWFjY2VwdGVkYDtcclxuICAgIGNhc2UgJ0FuYWx5emVkJzpcclxuICAgICAgcmV0dXJuIGB1cmt1bmQtc3RhdHVzIHVya3VuZC1zdGF0dXMtYW5hbHl6ZWRgO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVya3VuZEhvdmVyVGV4dCAocmVzOiBVcmt1bmRSZXNwb25zZSkge1xyXG4gIGlmICghcmVzIHx8ICFyZXMuU3RhdHVzKSByZXR1cm4gbnVsbDtcclxuICBzd2l0Y2ggKHJlcy5TdGF0dXMuU3RhdGUpIHtcclxuICAgIGNhc2UgJ0Vycm9yJzpcclxuICAgICAgcmV0dXJuIHJlcy5FeHRlcm5hbElkID9cclxuICAgICAgICBgS3VuZGUgaW50ZSB0YXMgZW1vdCBhdiB1cmt1bmQuIEZlbGtvZDogJHtyZXMuU3RhdHVzLkVycm9yQ29kZX1cXG5gK1xyXG4gICAgICAgIGBFeHRlcm5hbCBJRDogJHtyZXMuRXh0ZXJuYWxJZH1cXG5GZWxtZWRkZWxhbmRlOiAke3Jlcy5TdGF0dXMuTWVzc2FnZX1gXHJcbiAgICAgICAgOlxyXG4gICAgICAgIHJlcy5TdGF0dXMuTWVzc2FnZTtcclxuICAgIGNhc2UgJ1N1Ym1pdHRlZCc6XHJcbiAgICAgIHJldHVybiBgRmlsZW4gw6RyIHVwcGxhZGRhZCB0aWxsIFVya3VuZC4gS2xpY2thIGbDtnIgYXR0IHVwcGRhdGVyYSBzdGF0dXMuYDtcclxuICAgIGNhc2UgJ0FjY2VwdGVkJzpcclxuICAgICAgcmV0dXJuIGBGaWxlbiBhbmFseXNlcmFzIGZvcnRmYXJhbmRlIGF2IFVya3VuZC4gS2xpY2thIGbDtnIgYXR0IHVwcGRhdGVyYSBzdGF0dXMuYDtcclxuICAgIGNhc2UgJ0FuYWx5emVkJzpcclxuICAgICAgcmV0dXJuIGBSYXBwb3J0IHNrYXBhZC4gS2xpY2thIGbDtnIgYXR0IMO2cHBuYSByYXBwb3J0ZW4gaSBueXR0IGbDtm5zdGVyYDtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVcmt1bmRTaWduaWZpY2FuY2VDbGFzcyAocmVzOiBVcmt1bmRSZXNwb25zZSkge1xyXG4gIGlmICghcmVzIHx8ICFyZXMuU3RhdHVzKSByZXR1cm4gJyc7XHJcblxyXG4gIHN3aXRjaCAocmVzLlN0YXR1cy5TdGF0ZSkge1xyXG4gICAgY2FzZSAnRXJyb3InOiByZXR1cm4gJ3Vya3VuZC1zaWduaWZpY2FuY2UtZXJyb3InO1xyXG4gICAgY2FzZSAnU3VibWl0dGVkJzogcmV0dXJuICd1cmt1bmQtc2lnbmlmaWNhbmNlLXN1Ym1pdHRlZCc7XHJcbiAgICBjYXNlICdBY2NlcHRlZCc6IHJldHVybiAndXJrdW5kLXNpZ25pZmljYW5jZS1hY2NlcHRlZCc7XHJcbiAgfVxyXG4gIGNvbnN0IHJlcG9ydCA9IHJlcy5SZXBvcnQ7XHJcbiAgaWYgKCFyZXBvcnQpIHtcclxuICAgIHJldHVybiBcIlwiO1xyXG4gIH1cclxuICBpZiAocmVwb3J0LlNpZ25pZmljYW5jZSA8IDEpXHJcbiAgICAvL3JldHVybiBgJHtjZG59L2ltYWdlcy91cmt1bmQvMC5naWZgO1xyXG4gICAgcmV0dXJuIFwidXJrdW5kLXNpZ25pZmljYW5jZSB1cmt1bmQtc2lnbmlmaWNhbmNlLTBcIjtcclxuICBpZiAocmVwb3J0LlNpZ25pZmljYW5jZSA8IDEwKVxyXG4gICAgLy9yZXR1cm4gYCR7Y2RufS9pbWFnZXMvdXJrdW5kLzEuZ2lmYDtcclxuICAgIHJldHVybiBcInVya3VuZC1zaWduaWZpY2FuY2UgdXJrdW5kLXNpZ25pZmljYW5jZS0xXCI7XHJcbiAgaWYgKHJlcG9ydC5TaWduaWZpY2FuY2UgPCAyNSlcclxuICAgIHJldHVybiBcInVya3VuZC1zaWduaWZpY2FuY2UgdXJrdW5kLXNpZ25pZmljYW5jZS0yXCI7XHJcbiAgICAvL3JldHVybiBgJHtjZG59L2ltYWdlcy91cmt1bmQvMi5naWZgO1xyXG4gIGlmIChyZXBvcnQuU2lnbmlmaWNhbmNlIDwgNDApXHJcbiAgICByZXR1cm4gXCJ1cmt1bmQtc2lnbmlmaWNhbmNlIHVya3VuZC1zaWduaWZpY2FuY2UtM1wiO1xyXG4gICAgLy9yZXR1cm4gYCR7Y2RufS9pbWFnZXMvdXJrdW5kLzMuZ2lmYDtcclxuICBpZiAocmVwb3J0LlNpZ25pZmljYW5jZSA8IDU1KVxyXG4gICAgcmV0dXJuIFwidXJrdW5kLXNpZ25pZmljYW5jZSB1cmt1bmQtc2lnbmlmaWNhbmNlLTRcIjtcclxuICAgIC8vcmV0dXJuIGAke2Nkbn0vaW1hZ2VzL3Vya3VuZC80LmdpZmA7XHJcbiAgaWYgKHJlcG9ydC5TaWduaWZpY2FuY2UgPCA3MClcclxuICAgIHJldHVybiBcInVya3VuZC1zaWduaWZpY2FuY2UgdXJrdW5kLXNpZ25pZmljYW5jZS01XCI7XHJcbiAgICAvL3JldHVybiBgJHtjZG59L2ltYWdlcy91cmt1bmQvNS5naWZgO1xyXG4gIGlmIChyZXBvcnQuU2lnbmlmaWNhbmNlIDwgODUpXHJcbiAgICByZXR1cm4gXCJ1cmt1bmQtc2lnbmlmaWNhbmNlIHVya3VuZC1zaWduaWZpY2FuY2UtNlwiO1xyXG4gICAgLy9yZXR1cm4gYCR7Y2RufS9pbWFnZXMvdXJrdW5kLzYuZ2lmYDtcclxuICBpZiAocmVwb3J0LlNpZ25pZmljYW5jZSA8IDk5LjkpXHJcbiAgICByZXR1cm4gXCJ1cmt1bmQtc2lnbmlmaWNhbmNlIHVya3VuZC1zaWduaWZpY2FuY2UtN1wiO1xyXG4gICAgLy9yZXR1cm4gYCR7Y2RufS9pbWFnZXMvdXJrdW5kLzcuZ2lmYDtcclxuICBpZiAocmVwb3J0LlNpZ25pZmljYW5jZSA+PSA5OS45KVxyXG4gICAgcmV0dXJuIFwidXJrdW5kLXNpZ25pZmljYW5jZSB1cmt1bmQtc2lnbmlmaWNhbmNlLThcIjtcclxuICAgIC8vcmV0dXJuIGAke2Nkbn0vaW1hZ2VzL3Vya3VuZC84LmdpZmA7XHJcbiAgcmV0dXJuIFwiXCI7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IEFzc2lnbm1lbnQsIFVya3VuZFJlc3BvbnNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBzaG93RXJyb3IsIGNvbXBhcmVQcm9wcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xyXG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XHJcbmltcG9ydCB7IEh0dHBFcnJvciwgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgaGFzV3JpdGVBY2Nlc3MsIGlzVGVhY2hlckF0U2Nob29sIH0gZnJvbSAnLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xyXG5pbXBvcnQgZG93bmxvYWQgZnJvbSAnZG93bmxvYWRqcyc7XHJcbmltcG9ydCB7XHJcbiAgZ2V0VXJrdW5kU2lnbmlmaWNhbmNlQ2xhc3MsXHJcbiAgZ2V0VXJrdW5kU3RhdHVzQ2xhc3MsXHJcbiAgZ2V0VXJrdW5kSG92ZXJUZXh0fSBmcm9tICcuL3Vya3VuZC11dGlscyc7XHJcbmltcG9ydCB7IGlzRW1wbG95ZWUgfSBmcm9tICcuLi8uLi9jb3Vyc2UtYnVpbGRlci1rcy9sb2dpYy9pcy1lbXBsb3llZSc7XHJcbmltcG9ydCB7IEdvb2dsZVBpY2tlciB9IGZyb20gJy4uLy4uLy4uL2FwaXMvZ29vZ2xlLXBpY2tlcic7XHJcbmltcG9ydCB7IERyaXZlQnV0dG9uIH0gZnJvbSBcIi4uLy4uLy4uL2FwaXMvYnV0dG9uc1wiO1xyXG5pbXBvcnQgeyBmZWF0dXJlcyB9IGZyb20gJy4uLy4uLy4uL2ZlYXR1cmVzJztcclxuaW1wb3J0IHsgR29vZ2xlRHJpdmUsIHNlbGVjdGVkRmlsZSB9IGZyb20gJy4uLy4uLy4uL2FwaXMvZ29vZ2xlLWRyaXZlJztcclxuXHJcbmNvbnN0IE1BWF9VUktVTkRfRklMRV9TSVpFX01CID0gNTA7XHJcbmNvbnN0IE1BWF9OT05VUktVTkRfRklMRV9TSVpFX01CID0gMTAwO1xyXG5jb25zdCBBTExPV0VEX0VYVEVOU0lPTlMgPSBbXHJcbiAgXCIucGRmXCIsXHJcbiAgXCIub2R0XCIsXHJcbiAgXCIuZG9jeFwiLFxyXG4gIFwiLmRvY1wiLFxyXG4gIFwiLmNhZFwiLFxyXG4gIFwiLndhdlwiLFxyXG4gIFwiLm1wM1wiLFxyXG4gIFwiLm1wZWc0XCIsXHJcbiAgXCIubXA0XCIsXHJcbiAgXCIuemlwXCIsXHJcbiAgXCIucG5nXCIsXHJcbiAgXCIuanBnXCIsXHJcbiAgXCIuanBlZ1wiLFxyXG4gIFwiLmdpZlwiXHJcbl07XHJcbmNvbnN0IFVSS1VORF9FWFRFTlNJT05TID0gW1xyXG4gIFwiLnBkZlwiLFxyXG4gIFwiLm9kdFwiLFxyXG4gIFwiLmRvY3hcIixcclxuICBcIi5kb2NcIlxyXG5dO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBjb3Vyc2VJZDogc3RyaW5nO1xyXG4gIHRhc2tJZDogc3RyaW5nO1xyXG4gIHNjaG9vbDogc3RyaW5nO1xyXG4gIHNlbmRUb1Vya3VuZDogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBhc3NpZ25tZW50czogQXNzaWdubWVudFtdO1xyXG4gIGxvYWRpbmc6IGJvb2xlYW47XHJcbiAgdXBsb2FkaW5nRmlsZT86IEZpbGU7XHJcbiAgZXJyb3I/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUYXNrQXNzaWdubWVudHMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBhc3NpZ25tZW50czogW10sXHJcbiAgICAgIGxvYWRpbmc6IHRydWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzZXRTdGF0ZVByb21pc2VkKGNiOiAocHJldlN0YXRlOiBSZWFkb25seTxTdGF0ZT4sIHByb3BzOiBQcm9wcykgPT4gUGFydGlhbDxTdGF0ZT4pIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHN1cGVyLnNldFN0YXRlKGNiIGFzIGFueSwgcmVzb2x2ZSkpO1xyXG4gIH0gIFxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMubG9hZCgpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IFByb3BzKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAobmV4dFByb3BzLnRhc2tJZCAhPT0gdGhpcy5wcm9wcy50YXNrSWQgfHxcclxuICAgICAgICAgIG5leHRQcm9wcy5jb3Vyc2VJZCAhPT0gdGhpcy5wcm9wcy5jb3Vyc2VJZClcclxuICAgICAge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGVQcm9taXNlZCgoKT0+KHtcclxuICAgICAgICAgIGFzc2lnbm1lbnRzOiBbXSxcclxuICAgICAgICAgIGxvYWRpbmc6IHRydWVcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkKCk7XHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBzaG93RXJyb3IoZXJyKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZShhc3NpZ25tZW50czogQXNzaWdubWVudFtdLCBhc3NpZ25tZW50OiBBc3NpZ25tZW50KTogQXNzaWdubWVudFtdIHtcclxuICAgIGNvbnN0IHJldHZhbCA9IFtcclxuICAgICAgYXNzaWdubWVudCxcclxuICAgICAgLi4uYXNzaWdubWVudHMuZmlsdGVyKCh7dXNlciwgZmlsZW5hbWV9KSA9PlxyXG4gICAgICAgIHVzZXIgIT09IGFzc2lnbm1lbnQudXNlciB8fFxyXG4gICAgICAgIGZpbGVuYW1lICE9PSBhc3NpZ25tZW50LmZpbGVuYW1lKV07XHJcbiAgICByZXR1cm4gcmV0dmFsO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcmVmcmVzaEFzc2lnbm1lbnQoYXNzaWdubWVudDogQXNzaWdubWVudCkge1xyXG4gICAgY29uc3QgY2xpZW50ID0gZW52LmtlZEJhY2tlbmRDbGllbnQuaHR0cDtcclxuICAgIGNvbnN0IHtjb3Vyc2VJZCwgdGFza0lkLCBzY2hvb2x9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHt1c2VyLCBmaWxlbmFtZX0gPSBhc3NpZ25tZW50O1xyXG4gICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSgoe2Fzc2lnbm1lbnRzfSkgPT4gKHtcclxuICAgICAgYXNzaWdubWVudHM6IHRoaXMudXBkYXRlKGFzc2lnbm1lbnRzLCB7Li4uYXNzaWdubWVudCwgaXNSZWZyZXNoaW5nOiB0cnVlfSlcclxuICAgIH0pKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlcSA9IGF3YWl0IGNsaWVudC5nZXQoYGFzc2lnbm1lbnRzL3Vya3VuZC8ke3NjaG9vbH0vJHtjb3Vyc2VJZH0vJHt0YXNrSWR9LyR7dXNlcn0vJHtmaWxlbmFtZX1gKTtcclxuICAgICAgaWYgKHJlcS5zdGF0dXMgPj0gNDAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcS5zdGF0dXMsIGF3YWl0IHJlcS50ZXh0KCkpO1xyXG4gICAgICBjb25zdCByZXNKc29uID0gYXdhaXQgcmVxLnRleHQoKTtcclxuICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSgoe2Fzc2lnbm1lbnRzfSkgPT4gKHtcclxuICAgICAgICBhc3NpZ25tZW50czogdGhpcy51cGRhdGUoYXNzaWdubWVudHMsIHsuLi5hc3NpZ25tZW50LCBpc1JlZnJlc2hpbmc6IGZhbHNlLCBtZXRhZGF0YToge1xyXG4gICAgICAgICAgLi4uYXNzaWdubWVudC5tZXRhZGF0YSxcclxuICAgICAgICAgIHVya3VuZFJlc3BvbnNlOiByZXNKc29uXHJcbiAgICAgICAgfX0pXHJcbiAgICAgIH0pKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSgoe2Fzc2lnbm1lbnRzfSkgPT4gKHtcclxuICAgICAgICBhc3NpZ25tZW50czogdGhpcy51cGRhdGUoYXNzaWdubWVudHMsIHtcclxuICAgICAgICAgIC4uLmFzc2lnbm1lbnQsXHJcbiAgICAgICAgICBpc1JlZnJlc2hpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgcmVmcmVzaEVycm9yOiBlXHJcbiAgICAgICAgfSlcclxuICAgICAgfSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZCgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IGNsaWVudCA9IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmh0dHA7XHJcbiAgICAgIGNvbnN0IHtjb3Vyc2VJZCwgdGFza0lkLCBzY2hvb2x9ID0gdGhpcy5wcm9wcztcclxuICAgICAgY29uc3QgdGVhY2hlckF0U2Nob29sID0gaXNUZWFjaGVyQXRTY2hvb2woZW52LmN1cnJlbnRVc2VyLCBzY2hvb2wpO1xyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCAodGVhY2hlckF0U2Nob29sID9cclxuICAgICAgICBjbGllbnQuZ2V0KGBhc3NpZ25tZW50cy8ke3NjaG9vbH0vJHtjb3Vyc2VJZH0vJHt0YXNrSWR9YCkgOlxyXG4gICAgICAgIGNsaWVudC5nZXQoYGFzc2lnbm1lbnRzLyR7c2Nob29sfS8ke2NvdXJzZUlkfS8ke3Rhc2tJZH0vJHtlbnYuY3VycmVudFVzZXIubWFpbH1gKSk7XHJcbiAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBhc3NpZ25tZW50cyA9IGF3YWl0IHJlcy5qc29uKCkgYXMgQXNzaWdubWVudFtdO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICBhc3NpZ25tZW50c1xyXG4gICAgICB9KTtcclxuICAgICAgaWYgKHRlYWNoZXJBdFNjaG9vbCkge1xyXG4gICAgICAgIGNvbnN0IHJlZnJlc2hhYmxlQXNzaWdtZW50cyA9IGFzc2lnbm1lbnRzLmZpbHRlcihhID0+XHJcbiAgICAgICAgICBhLm1ldGFkYXRhICYmIC8vIE11c3QgaGF2ZSBtZXRhZGF0YS51cmt1bmRFeHRlcm5hbElkIE90aGVyd2lzZSBub3QgcG9zc2libGUgdG8gcmVmcmVzaFxyXG4gICAgICAgICAgIWEubWV0YWRhdGEudXJrdW5kVXBsb2FkRXJyb3IgJiYgKCAvLyBOb3QgcG9zc2libGUgdG8gcmVmcmVzaCBpZiB1cGxvYWQgaGFzIGZhaWxlZFxyXG4gICAgICAgICAgICAhYS5tZXRhZGF0YS51cmt1bmRMYXN0UG9sbCB8fCAvLyBOZXZlciBjaGVja2VkIHN0YXR1cyB5ZXRcclxuICAgICAgICAgICAgKFxyXG4gICAgICAgICAgICAgIFsnQWNjZXB0ZWQnLCAnU3VibWl0dGVkJ10uaW5kZXhPZigoSlNPTi5wYXJzZShhLm1ldGFkYXRhLnVya3VuZFJlc3BvbnNlKVswXSBhcyBVcmt1bmRSZXNwb25zZSkuU3RhdHVzLlN0YXRlKSA+PSAwICYmXHJcbiAgICAgICAgICAgICAgcGFyc2VJbnQoYS5tZXRhZGF0YS51cmt1bmRMYXN0UG9sbCkgPCBtb21lbnQoKS5hZGQoLTE1LCBcInNlY29uZHNcIikudG9EYXRlKCkuZ2V0VGltZSgpKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIC8vIENoZWNrZWQgc3RhdHVzIGZvciBhIGxvbmcgdGltZSBhZ29cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgZm9yIChsZXQgYSBvZiByZWZyZXNoYWJsZUFzc2lnbWVudHMpIHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMucmVmcmVzaEFzc2lnbm1lbnQoYSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogYEt1bmRlIGludGUgbGFkZGEgaW5sw6RtbmluZ3N1cHBnaWZ0ZXJgLFxyXG4gICAgICAgIGFzc2lnbm1lbnRzOiBbXVxyXG4gICAgICB9KTtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkRyYWcgKGV2OiBSZWFjdC5EcmFnRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSB7XHJcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBldi5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5JztcclxuICB9XHJcbiAgXHJcbiAgYXN5bmMgdmVyaWZ5QW5kVXBsb2FkKGZpbGU6IEZpbGUsIGRyaXZlRmlsZT86IHNlbGVjdGVkRmlsZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKCFmaWxlKSByZXR1cm47XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlLmFzc2lnbm1lbnRzLnNvbWUoYSA9PlxyXG4gICAgICAgIGEudXNlciA9PT0gZW52LmN1cnJlbnRVc2VyLm1haWwgJiZcclxuICAgICAgICBhLmZpbGVuYW1lID09PSBmaWxlLm5hbWUpKVxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKCFjb25maXJtKGBFcnPDpHR0YSBiZWZpbnRsaWcgZmlsICgke2ZpbGUubmFtZX0pP2ApKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLnByb3BzLnNjaG9vbC50b0xvd2VyQ2FzZSgpICE9PSBlbnYuY3VycmVudFVzZXIuc2Nob29sLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgICBpZiAoIWNvbmZpcm0oYFVwcGdpZnRlbiB0aWxsaMO2ciBlbiBhbm5hbiBza29sYSAoJHt0aGlzLnByb3BzLnNjaG9vbH0pLlxcbmArXHJcbiAgICAgICAgICBgVmlsbCBkdSDDpG5kw6UgbMOkbW5hIGluIGRpdHQgYXJiZXRlIGjDpHI/YCkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNldFN0YXRlKHt1cGxvYWRpbmdGaWxlOiBmaWxlfSk7XHJcbiAgICAgIGF3YWl0IHRoaXMudXBsb2FkKGZpbGUsIGRyaXZlRmlsZSk7XHJcbiAgICAgIGF3YWl0IHRoaXMubG9hZCgpO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICB1cGxvYWRpbmdGaWxlOiBudWxsXHJcbiAgICAgIH0pO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgZXJyb3I6IFwiS3VuZGUgaW50ZSBsYWRkYSB1cHAgZmlsZW4uIFwiICsgKGVycm9yLm1lc3NhZ2UgfHwgZXJyb3IpLFxyXG4gICAgICAgIHVwbG9hZGluZ0ZpbGU6IG51bGxcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICBhc3luYyB1cGxvYWQoZmlsZTogRmlsZSwgZHJpdmVGaWxlPzogc2VsZWN0ZWRGaWxlKSB7XHJcbiAgICBjb25zdCBjbGllbnQgPSBlbnYua2VkQmFja2VuZENsaWVudC5odHRwO1xyXG4gICAgY29uc3Qge2NvdXJzZUlkLCB0YXNrSWQsIHNjaG9vbCwgc2VuZFRvVXJrdW5kfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7bWFpbH0gPSBlbnYuY3VycmVudFVzZXI7XHJcbiAgICBjb25zdCBpc1Vya3VuZEV4dGVuc2lvbiA9IFVSS1VORF9FWFRFTlNJT05TXHJcbiAgICAgIC5pbmRleE9mKFwiLlwiK2ZpbGUubmFtZS5zcGxpdCgnLicpLnJldmVyc2UoKVswXS50b0xvd2VyQ2FzZSgpKSA+PSAwO1xyXG4gICAgaWYgKGlzVXJrdW5kRXh0ZW5zaW9uKSB7XHJcbiAgICAgIGlmIChmaWxlLnNpemUgPiBNQVhfVVJLVU5EX0ZJTEVfU0laRV9NQiAqIDEwMjQgKiAxMDI0KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlciBhdiBkZW5uYSB0eXAgZsOlciBpbnRlIHZhcmEgc3TDtnJyZSDDpG4gJHtNQVhfVVJLVU5EX0ZJTEVfU0laRV9NQn0gTUJgKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGZpbGUuc2l6ZSA+IE1BWF9OT05VUktVTkRfRklMRV9TSVpFX01CICogMTAyNCAqIDEwMjQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpbGVuIGbDpXIgaW50ZSB2YXJhIHN0w7ZycmUgw6RuICR7TUFYX05PTlVSS1VORF9GSUxFX1NJWkVfTUJ9IE1CYCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGxvd2VyRmlsZW5hbWUgPSBmaWxlLm5hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgIGlmICghQUxMT1dFRF9FWFRFTlNJT05TLnNvbWUoZXh0ID0+IGxvd2VyRmlsZW5hbWUuZW5kc1dpdGgoZXh0KSkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWxlbnMgw6RuZGVsc2UgbcOlc3RlIHZhcmEgJHtBTExPV0VEX0VYVEVOU0lPTlMuam9pbignIC8gJyl9YCk7XHJcbiAgICB9IFxyXG4gICAgY29uc3QgYm9keSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgYm9keS5hcHBlbmQoJ2ZpbGVzJywgZmlsZSk7XHJcbiAgICBsZXQgcXVlcnlQYXJhbXM6YW55ID0ge1xyXG4gICAgICB1c2VyRGlzcGxheU5hbWU6IGVudi5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgdmVyaWZ5V2l0aFVya3VuZDogc2VuZFRvVXJrdW5kXHJcbiAgICB9O1xyXG4gICAgaWYgKGRyaXZlRmlsZSkge1xyXG4gICAgICBxdWVyeVBhcmFtcyA9IHtcclxuICAgICAgICAuLi5xdWVyeVBhcmFtcyxcclxuICAgICAgICBkcml2ZUZpbGVJZDogZHJpdmVGaWxlLmZpbGVJZCxcclxuICAgICAgICBkcml2ZUZpbGVVcmw6IGRyaXZlRmlsZS51cmwsXHJcbiAgICAgICAgZHJpdmVGaWxlSWNvblVybDogZHJpdmVGaWxlLmljb25VcmxcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuaHR0cC5mZXRjaChcclxuICAgICAgYGFzc2lnbm1lbnRzLyR7c2Nob29sfS8ke2NvdXJzZUlkfS8ke3Rhc2tJZH0vJHttYWlsfWAsXHJcbiAgICAgICdwdXQnLFxyXG4gICAgICB7fSxcclxuICAgICAgcXVlcnlQYXJhbXMsXHJcbiAgICAgIHtcclxuICAgICAgICBib2R5XHJcbiAgICAgIH0pO1xyXG4gICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCkge1xyXG4gICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZG93bmxvYWQoZmlsZTogQXNzaWdubWVudCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuaHR0cC5mZXRjaChmaWxlLm1lZGlhTGluaywgJ2dldCcsIHt9KTtcclxuICAgICAgaWYgKHJlcy5zdGF0dXMgPj0gNDAwKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBibG9iID0gYXdhaXQgcmVzLmJsb2IoKTtcclxuICAgICAgZG93bmxvYWQoYmxvYiwgZmlsZS5maWxlbmFtZSwgZmlsZS5jb250ZW50VHlwZSk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXJyb3I6IFwiS3VuZGUgaW50ZSBsYWRkYSBuZWQgZmlsZW4uIFwiICsgKGVyci5tZXNzYWdlIHx8IGVycil9KTtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgfSAgICBcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZSh1cmw6IHN0cmluZykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVByb21pc2VkKCh7YXNzaWdubWVudHN9KSA9PiAoe2Fzc2lnbm1lbnRzOiBhc3NpZ25tZW50cy5tYXAoYSA9PiBhLm1lZGlhTGluayA9PT0gdXJsID9cclxuICAgICAgICB7Li4uYSwgbWV0YWRhdGE6IHsuLi5hLm1ldGFkYXRhLCAkbWV0YTogJ2RlbGV0ZSd9fSA6IHsuLi5hfSl9KSk7XHJcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmh0dHAuZmV0Y2godXJsLCAnZGVsZXRlJywge30pO1xyXG4gICAgICBpZiAocmVzLnN0YXR1cyA+PSA0MDApIHtcclxuICAgICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xyXG4gICAgICB9XHJcbiAgICAgIGF3YWl0IHRoaXMubG9hZCgpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yOiBcIkt1bmRlIGludGUgdGEgYm9ydCBmaWxlbi4gXCIgKyAoZXJyLm1lc3NhZ2UgfHwgZXJyKX0pO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7Y291cnNlSWQsIHRhc2tJZCwgc2Nob29sfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7bG9hZGluZywgYXNzaWdubWVudHMsIGVycm9yLCB1cGxvYWRpbmdGaWxlfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB0ZWFjaGVyQXRUaGlzU2Nob29sID0gaXNUZWFjaGVyQXRTY2hvb2woZW52LmN1cnJlbnRVc2VyLCBzY2hvb2wpO1xyXG4gICAgbGV0IGZpbGVzID0gWy4uLmFzc2lnbm1lbnRzXTtcclxuICAgIGNvbnN0IHNob3dHb29nbGVQaWNrZXIgPSBmZWF0dXJlcy5waWNrZXI7XHJcbiAgICBcclxuICAgIGlmICh1cGxvYWRpbmdGaWxlKSB7XHJcbiAgICAgIGNvbnN0IHZpcnR1YWxGaWxlOiBBc3NpZ25tZW50ID0ge1xyXG4gICAgICAgIHNjaG9vbCxcclxuICAgICAgICBjb3Vyc2VJZCxcclxuICAgICAgICB0YXNrSWQsXHJcbiAgICAgICAgZmlsZW5hbWU6IHVwbG9hZGluZ0ZpbGUubmFtZSxcclxuICAgICAgICBzaXplOiB1cGxvYWRpbmdGaWxlLnNpemUsXHJcbiAgICAgICAgdXNlcjogZW52LmN1cnJlbnRVc2VyLm1haWwsXHJcbiAgICAgICAgY29udGVudFR5cGU6IHVwbG9hZGluZ0ZpbGUudHlwZSxcclxuICAgICAgICB1cGxvYWREYXRlOiBEYXRlLm5vdygpLFxyXG4gICAgICAgIG1lZGlhTGluazogYGFzc2lnbm1lbnRzLyR7c2Nob29sfS8ke2NvdXJzZUlkfS8ke3Rhc2tJZH0vJHtlbnYuY3VycmVudFVzZXIubWFpbH0vJHt1cGxvYWRpbmdGaWxlLm5hbWV9YCxcclxuICAgICAgICBtZXRhZGF0YToge1xyXG4gICAgICAgICAgJG1ldGE6ICdhZGQnLFxyXG4gICAgICAgICAgdXNlckRpc3BsYXlOYW1lOiBlbnYuY3VycmVudFVzZXIuZGlzcGxheU5hbWVcclxuICAgICAgICB9IGFzIEFzc2lnbm1lbnRbXCJtZXRhZGF0YVwiXVxyXG4gICAgICB9O1xyXG4gICAgICBmaWxlcyA9IGZpbGVzLmZpbHRlcihmaWxlID0+IGZpbGUubWVkaWFMaW5rICE9PSB2aXJ0dWFsRmlsZS5tZWRpYUxpbmspO1xyXG4gICAgICBmaWxlcyA9IFsuLi5maWxlcywgdmlydHVhbEZpbGVdO1xyXG4gICAgfVxyXG4gICAgZmlsZXMgPSBmaWxlcy5zb3J0KGNvbXBhcmVQcm9wcyhbXHJcbiAgICAgIFwibWV0YWRhdGEudXNlckRpc3BsYXlOYW1lXCIsXHJcbiAgICAgIFwiZmlsZW5hbWVcIixcclxuICAgICAgXCJ1cGxvYWREYXRlXCJcclxuICAgICAgXSwgW1wic3ZcIiwgXCJlblwiXSwge3NlbnNpdGl2aXR5OiAnYmFzZSd9KSk7XHJcbiAgICBjb25zdCBoYXNPd25Eb2NzID0gZmlsZXMuc29tZShmaWxlID0+IGZpbGUudXNlciA9PT0gZW52LmN1cnJlbnRVc2VyLm1haWwpO1xyXG4gICAgXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IG9uRHJhZ092ZXI9e2V2ID0+IHRoaXMub25EcmFnKGV2KX0gb25Ecm9wPXtldj0+e1xyXG4gICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy52ZXJpZnlBbmRVcGxvYWQoZXYuZGF0YVRyYW5zZmVyLmZpbGVzWzBdKTtcclxuICAgICAgfX0+XHJcbiAgICAgICAge2Vycm9yID8gPD5cclxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImVycm9yXCI+e2Vycm9yfTwvcD5cclxuICAgICAgICA8Lz46IHVuZGVmaW5lZH1cclxuICAgICAgICB7bG9hZGluZyA/IDw+XHJcbiAgICAgICAgICA8U3Bpbm5lciAvPiBMYWRkYXIgaW5sw6RtbmFkZSBmaWxlci4uLlxyXG4gICAgICAgIDwvPiA6IGZpbGVzLmxlbmd0aCA9PT0gMCA/XHJcbiAgICAgICAgICB0ZWFjaGVyQXRUaGlzU2Nob29sID9cclxuICAgICAgICAgICAgPHA+SW5nZW4gZWxldiBoYXIgbMOkbW5hdCBpbiBuw6Vnb3QgYXJiZXRlIMOkbm51LjwvcD4gOlxyXG4gICAgICAgICAgICB1bmRlZmluZWRcclxuICAgICAgICA6IDw+XHJcbiAgICAgICAgICA8dGFibGUgY2xhc3NOYW1lPVwidGFzay1hc3NpZ25tZW50cy10YWJsZVwiPjx0aGVhZD48dHI+XHJcbiAgICAgICAgICAgIHt0ZWFjaGVyQXRUaGlzU2Nob29sID8gPHRoPkVsZXY8L3RoPiA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgPHRoPkZpbG5hbW48L3RoPlxyXG4gICAgICAgICAgICA8dGg+SW5sw6RtbmF0IGRlbjwvdGg+XHJcbiAgICAgICAgICAgIHt0ZWFjaGVyQXRUaGlzU2Nob29sICYmIDw+XHJcbiAgICAgICAgICAgICAgPHRoPlJhcHBvcnQ8L3RoPlxyXG4gICAgICAgICAgICAgIDx0aD5OaXbDpTwvdGg+XHJcbiAgICAgICAgICAgIDwvPn1cclxuICAgICAgICAgICAge2hhc093bkRvY3MgJiYgPHRoIC8+fVxyXG4gICAgICAgICAgPC90cj48L3RoZWFkPjx0Ym9keT57XHJcbiAgICAgICAgICAgIGZpbGVzLm1hcChmaWxlID0+IDx0clxyXG4gICAgICAgICAgICAgIGtleT17ZmlsZS5tZWRpYUxpbmt9XHJcbiAgICAgICAgICAgICAgc3R5bGU9e2ZpbGUubWV0YWRhdGEuJG1ldGEgPyB7b3BhY2l0eTogMC41fToge319XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICB7dGVhY2hlckF0VGhpc1NjaG9vbCA/XHJcbiAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAvLyBUZWFjaGVyIFZpZXdcclxuICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICA8Pjx0ZD5cclxuICAgICAgICAgICAgICAgICAgPGEgaHJlZj17YG1haWx0bzoke2ZpbGUudXNlcn1gfT5cclxuICAgICAgICAgICAgICAgICAgICB7ZmlsZS5tZXRhZGF0YS51c2VyRGlzcGxheU5hbWUgfHwgZmlsZS51c2VyfVxyXG4gICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkPntmaWxlLm1ldGFkYXRhLmRyaXZlRmlsZUlkID9cclxuICAgICAgICAgICAgICAgICAgLy8gVGhlIGZpbGUgY2FuIGJlIGVkaXRlZCBvbiBkcml2ZS4gTGluayB0byBlZGl0aW5nIGl0LlxyXG4gICAgICAgICAgICAgICAgICA8RHJpdmVGaWxlTGlzdGluZyBmaWxlPXtmaWxlfSAvPiA6XHJcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBmaWxlIGNhbm5vdCBiZSBlZGl0ZWQgb24gZHJpdmUuIExpbmsgdG8gZG93bmxvYWRpbmcgaXQuXHJcbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtldiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvd25sb2FkKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH19PntmaWxlLmZpbGVuYW1lfTwvYT59XHJcbiAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImFzc2lnbm1lbnQtZGF0ZS1jb2xcIj57bW9tZW50KGZpbGUudXBsb2FkRGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyl9PC90ZD5cclxuICAgICAgICAgICAgICAgIHtmaWxlLm1ldGFkYXRhLiRtZXRhID09PSAnYWRkJyA/XHJcbiAgICAgICAgICAgICAgICAgIDx0ZCBjb2xTcGFuPXsyfT48U3Bpbm5lciAvPiBMYWRkYXIgdXBwLi4uPC90ZD46XHJcbiAgICAgICAgICAgICAgICAgIGZpbGUubWV0YWRhdGEuJG1ldGEgPT09ICdkZWxldGUnID9cclxuICAgICAgICAgICAgICAgICAgPHRkIGNvbFNwYW49ezJ9PjxTcGlubmVyIC8+IFRhciBib3J0Li4uPC90ZD4gOlxyXG4gICAgICAgICAgICAgICAgICAoKCk9PntcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7bWV0YWRhdGF9ID0gZmlsZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cmt1bmRSZXNwb25zZXM6IFVya3VuZFJlc3BvbnNlW10gPSBtZXRhZGF0YS51cmt1bmRSZXNwb25zZSAmJiBKU09OLnBhcnNlKG1ldGFkYXRhLnVya3VuZFJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdXJrdW5kUmVzcG9uc2UgPSB1cmt1bmRSZXNwb25zZXMgJiYgdXJrdW5kUmVzcG9uc2VzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdXJrdW5kUmVzcG9uc2UgJiYgZmlsZS5tZXRhZGF0YS51cmt1bmRVcGxvYWRFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgdXJrdW5kUmVzcG9uc2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXR1czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIEVycm9yQ29kZTogLTEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgTWVzc2FnZTogZmlsZS5tZXRhZGF0YS51cmt1bmRVcGxvYWRFcnJvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBTdGF0ZTogJ0Vycm9yJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBFeHRlcm5hbElkOiBmaWxlLm1ldGFkYXRhLnVya3VuZEV4dGVybmFsSWRcclxuICAgICAgICAgICAgICAgICAgICAgIH0gYXMgVXJrdW5kUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLmlzUmVmcmVzaGluZykgcmV0dXJuIDx0ZCBjb2xTcGFuPXsyfT5cclxuICAgICAgICAgICAgICAgICAgICAgIDxTcGlubmVyIC8+IFVwcGRhdGVyYXIuLi5cclxuICAgICAgICAgICAgICAgICAgICA8L3RkPjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJrdW5kUmVzcG9uc2UgPyA8PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInVya3VuZC1zdGF0dXMtY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17dXJrdW5kUmVzcG9uc2UuUmVwb3J0ICYmIHVya3VuZFJlc3BvbnNlLlJlcG9ydC5SZXBvcnRVcmx9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXY9PntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ0FjY2VwdGVkJywgJ1N1Ym1pdHRlZCddLmluZGV4T2YodXJrdW5kUmVzcG9uc2UuU3RhdHVzLlN0YXRlKSA9PT0gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgLy8gRm9sbG93IEhSRUYgaW5zdGVhZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaEFzc2lnbm1lbnQoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtnZXRVcmt1bmRIb3ZlclRleHQodXJrdW5kUmVzcG9uc2UpfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Z2V0VXJrdW5kU3RhdHVzQ2xhc3ModXJrdW5kUmVzcG9uc2UpfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2E+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cInVya3VuZC1zdGF0dXMtY29sXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtnZXRVcmt1bmRTaWduaWZpY2FuY2VDbGFzcyh1cmt1bmRSZXNwb25zZSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHt1cmt1bmRSZXNwb25zZS5SZXBvcnQgJiYgdHlwZW9mIHVya3VuZFJlc3BvbnNlLlJlcG9ydC5TaWduaWZpY2FuY2UgPT09ICdudW1iZXInID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke3Vya3VuZFJlc3BvbnNlLlJlcG9ydC5TaWduaWZpY2FuY2UudG9GaXhlZCgpfSVgIDogJyAnfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC8+IDogPHRkIGNvbFNwYW49ezJ9Lz5cclxuICAgICAgICAgICAgICAgICAgfSkoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIDwvPiA6XHJcbiAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAvLyBTVFVERU5UIFZJRVdcclxuICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgIHtmaWxlLm1ldGFkYXRhLmRyaXZlRmlsZUlkID9cclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZmlsZSBjYW4gYmUgZWRpdGVkIG9uIGRyaXZlLiBMaW5rIHRvIGVkaXRpbmcgaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgPERyaXZlRmlsZUxpc3RpbmcgZmlsZT17ZmlsZX0gLz4gOlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgZmlsZSBjYW5ub3QgYmUgZWRpdGVkIG9uIGRyaXZlLiBMaW5rIHRvIGRvd25sb2FkaW5nIGl0LlxyXG4gICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgb25DbGljaz17ZXYgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3dubG9hZChmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9fT57ZmlsZS5maWxlbmFtZX08L2E+fVxyXG4gICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJhc3NpZ25tZW50LWRhdGUtY29sXCI+e2ZpbGUubWV0YWRhdGEuJG1ldGEgPT09ICdhZGQnID9cclxuICAgICAgICAgICAgICAgICAgPD48U3Bpbm5lciAvPiBMYWRkYXIgdXBwLi4uPC8+IDpcclxuICAgICAgICAgICAgICAgICAgZmlsZS5tZXRhZGF0YS4kbWV0YSA9PT0gJ2RlbGV0ZScgP1xyXG4gICAgICAgICAgICAgICAgICA8PjxTcGlubmVyIC8+IFRhciBib3J0Li4uPC8+IDpcclxuICAgICAgICAgICAgICAgICAgbW9tZW50KGZpbGUudXBsb2FkRGF0ZSkuZm9ybWF0KCdZWVlZLU1NLUREIEhIOm1tJyl9PC90ZD5cclxuICAgICAgICAgICAgICA8Lz59XHJcbiAgICAgICAgICAgICAge2hhc093bkRvY3MgJiYgPHRkPnshZmlsZS5tZXRhZGF0YS4kbWV0YSAmJiBmaWxlLnVzZXIgPT09IGVudi5jdXJyZW50VXNlci5tYWlsICYmXHJcbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIG9uQ2xpY2s9e2V2ID0+IHtcclxuICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtKGBSYWRlcmEgaW5sw6RtbmFkIGZpbCAke2ZpbGUuZmlsZW5hbWV9P2ApKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlKGZpbGUubWVkaWFMaW5rKTtcclxuICAgICAgICAgICAgICAgIH19PjxpIGNsYXNzTmFtZT1cImZhIGZhLXRyYXNoXCIvPjwvYT59PC90ZD59XHJcbiAgICAgICAgICAgIDwvdHI+KVxyXG4gICAgICAgICAgfTwvdGJvZHk+PC90YWJsZT5cclxuICAgICAgICA8Lz59XHJcbiAgICAgICAge2lzRW1wbG95ZWUoKSA/IHVuZGVmaW5lZCA6IDw+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wLXpvbmUgdGFzay1hc3NpZ25tZW50LWRyb3Atem9uZVwiPlxyXG4gICAgICAgICAgICBEcm9wcGEgZGl0dCBmw6RyZGlnYSBhcmJldGUgaMOkci48YnIvPkRldCBnw6VyIG9ja3PDpSBicmEgYXR0IGFudsOkbmRhIGJsw6RkZHJhLWtuYXBwZW4gbmVkYW4uXHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZmlsZVwiIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnZlcmlmeUFuZFVwbG9hZChldi50YXJnZXQuZmlsZXNbMF0pfSAvPlxyXG4gICAgICAgICAge3Nob3dHb29nbGVQaWNrZXIgJiYgPERyaXZlQnV0dG9uIGxhYmVsPVwiSMOkbXRhIGZyw6VuIEdvb2dsZSBEcml2ZVwiIGFjdGlvbj17KCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwaWNrZXIgPSBuZXcgR29vZ2xlUGlja2VyKHt1cGxvYWQ6dHJ1ZX0pO1xyXG4gICAgICAgICAgICBjb25zdCBkcml2ZSA9IG5ldyBHb29nbGVEcml2ZSgpO1xyXG4gICAgICAgICAgICBwaWNrZXIuc2hvdygpLnRoZW4oZmlsZXMgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnN0IHBpY2tlZEZpbGUgPSBmaWxlc1swXTtcclxuICAgICAgICAgICAgICBpZiAoIXBpY2tlZEZpbGUpIHJldHVybjtcclxuICAgICAgICAgICAgICBkcml2ZS5kb3dubG9hZEZpbGUoe1xyXG4gICAgICAgICAgICAgICAgIGZpbGU6IHBpY2tlZEZpbGUsXHJcbiAgICAgICAgICAgICAgICBsaW1pdFNpemU6IE1BWF9OT05VUktVTkRfRklMRV9TSVpFX01CXHJcbiAgICAgICAgICAgICAgfSkudGhlbihmaWxlID0+IHRoaXMudmVyaWZ5QW5kVXBsb2FkKGZpbGUsIHBpY2tlZEZpbGUpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9fSAvPlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIDwvPn1cclxuICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG5cclxuICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBEcml2ZUZpbGVMaXN0aW5nICh7ZmlsZX06IHtmaWxlOiBBc3NpZ25tZW50fSkge1xyXG4gIGNvbnN0IHtkcml2ZUZpbGVJY29uVXJsLCBkcml2ZUZpbGVVcmx9ID0gZmlsZS5tZXRhZGF0YTtcclxuICBjb25zdCBmaWxlbmFtZSA9IGZpbGUuZmlsZW5hbWUuc3Vic3RyKDAsIGZpbGUuZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKSk7XHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbCBzcGFjZWRcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImZpbGUtaWNvblwiIHNyYz17ZHJpdmVGaWxlSWNvblVybH0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgPHA+PGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj17ZHJpdmVGaWxlVXJsfT57ZmlsZW5hbWV9PC9hPjwvcD5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59XHJcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9lbi1TR1wiOiA4Nyxcblx0XCIuL2VuLVNHLmpzXCI6IDg3LFxuXHRcIi4vZW4tYXVcIjogODgsXG5cdFwiLi9lbi1hdS5qc1wiOiA4OCxcblx0XCIuL2VuLWNhXCI6IDg5LFxuXHRcIi4vZW4tY2EuanNcIjogODksXG5cdFwiLi9lbi1nYlwiOiA5MCxcblx0XCIuL2VuLWdiLmpzXCI6IDkwLFxuXHRcIi4vZW4taWVcIjogOTEsXG5cdFwiLi9lbi1pZS5qc1wiOiA5MSxcblx0XCIuL2VuLWlsXCI6IDkyLFxuXHRcIi4vZW4taWwuanNcIjogOTIsXG5cdFwiLi9lbi1uelwiOiA5Myxcblx0XCIuL2VuLW56LmpzXCI6IDkzLFxuXHRcIi4vc3ZcIjogOTQsXG5cdFwiLi9zdi5qc1wiOiA5NFxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE0MjsiLCJpbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IHVzZXJzIH0gZnJvbSAnLi9kYXRhL3VzZXJzJztcclxuaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZyB9IGZyb20gJy4uL3V0aWxzL3F1ZXJ5LXN0cmluZyc7XHJcblxyXG5jb25zdCB1c2VybmFtZSA9IHBhcnNlUXVlcnlTdHJpbmcgKGxvY2F0aW9uLnNlYXJjaCkudXNlcjtcclxuaWYgKHVzZXJuYW1lKSB7XHJcbiAgY29uc3QgdXNlciA9IHVzZXJzLmZpbmQodSA9PiB1LnVzZXJuYW1lID09PSB1c2VybmFtZSk7XHJcbiAgaWYgKHVzZXIpIHtcclxuICAgIGVudi5jdXJyZW50VXNlciA9IHVzZXI7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCB7IHJvbGUsIHNjaG9vbCB9ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gpO1xyXG5pZiAoZW52LmN1cnJlbnRVc2VyKSB7XHJcbiAgaWYgKHJvbGUpIHtcclxuICAgIGVudi5jdXJyZW50VXNlci5yb2xlcyA9IHJvbGUuc3BsaXQoJywnKTtcclxuICB9XHJcbiAgaWYgKHNjaG9vbCkge1xyXG4gICAgZW52LmN1cnJlbnRVc2VyLnNjaG9vbCA9IHNjaG9vbDtcclxuICB9XHJcbn1cclxuIiwiZnVuY3Rpb24gcmVzb2x2ZSh1cmk6IHN0cmluZykge1xyXG4gIHZhciBocmVmID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0ICsgbG9jYXRpb24ucGF0aG5hbWU7XHJcbiAgdmFyIHBMYXN0U2xhc2ggPSBocmVmLmxhc3RJbmRleE9mKCcvJyk7XHJcbiAgcmV0dXJuIGhyZWYuc3Vic3RyKDAsIHBMYXN0U2xhc2ggKyAxKSArIHVyaTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluY2x1ZGVDU1MoY3NzRmlsZTogc3RyaW5nKSB7XHJcbiAgZG9jdW1lbnQud3JpdGUoJzxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiJytyZXNvbHZlKGNzc0ZpbGUpKydcIiAvPicpOyAgXHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluY2x1ZGVPcHRpb25hbENTUyAoe1xyXG4gIHYxLFxyXG4gIHZlcnNpb25Gb2xkZXIsXHJcbiAgdmVyc2lvbixcclxuICBpbmNsdWRlQ1NTLFxyXG4gIE5PQ1NTXHJcbn06IHt2MT86IHN0cmluZ1tdLCB2ZXJzaW9uRm9sZGVyPzogc3RyaW5nLCB2ZXJzaW9uOiBudW1iZXIsIGluY2x1ZGVDU1M6IChmaWxlOiBzdHJpbmcpID0+IHZvaWQsIE5PQ1NTPzogc3RyaW5nfSkge1xyXG4gIGlmICghTk9DU1MpIHtcclxuICAgIGlmICh2MSkgdjEuZm9yRWFjaChjc3NGaWxlID0+IGluY2x1ZGVDU1MoY3NzRmlsZSkpO1xyXG4gIH1cclxuICBsZXQgY3NzVmVyID0gcGFyc2VJbnQoTk9DU1MpO1xyXG4gIGlmIChpc05hTihjc3NWZXIpKSBjc3NWZXIgPSAxO1xyXG4gIGZvciAobGV0IHZlciA9IGNzc1ZlciArIDE7IHZlciA8PSB2ZXJzaW9uOyArK3Zlcikge1xyXG4gICAgaW5jbHVkZUNTUyhgJHt2ZXJzaW9uRm9sZGVyfS92JHt2ZXJ9LmNzc2ApO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcblxyXG5jZmcuS0VEX0xPQ0FMRSA9ICdzdic7XHJcbmNmZy5LRURfU0NIT09MX0xPQ0FMRSA9ICdzdic7XHJcbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52J1xyXG5pbXBvcnQgeyBpc0FkbWluT3JUZWFjaGVyQXRTY2hvb2wgfSBmcm9tICcuLi8uLi8uLi9hY2Nlc3MtY29udHJvbCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNLZWRTdGFmZigpIHtcclxuICByZXR1cm4gaXNBZG1pbk9yVGVhY2hlckF0U2Nob29sKGVudi5jdXJyZW50VXNlciwgXCJzdGFuZGFyZFwiKTtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvdXJzZVRhYiwgQ291cnNlSW5zdGFuY2UsIFJpY2hUZXh0Q29udGVudCwgQ291cnNlQmxvY2ssIFRoZW1lQ291cnNlVGFiLCBTdGVwQ291cnNlVGFiIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBTdHJpcEdyYXBocywgV2l0aEdyYXBocywgS2VkQmFja2VuZFJlcG8gfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBSZW5hbWVhYmxlVGV4dCB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9yZW5hbWVhYmxlLXRleHQnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyB3aXRoUm91dGVyLCBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgaXNLZWRTdGFmZiB9IGZyb20gJy4uL2xvZ2ljL2lzLWtlZC1zdGFmZic7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBSb3V0ZUNvbXBvbmVudFByb3BzIHtcclxuICB0eXBlOiBcInRoZW1lLWNvdXJzZS10YWJcIiB8IFwic3RlcC1jb3Vyc2UtdGFiXCI7XHJcbiAgY291cnNlOiBTdHJpcEdyYXBoczxDb3Vyc2VJbnN0YW5jZT47XHJcbiAgYnJhbmNoOiBLZWRCYWNrZW5kUmVwbztcclxuICBzY2hvb2w6IHN0cmluZztcclxuICBkcmFmdElkOiBzdHJpbmc7XHJcbiAgYmxvY2s/OiBDb3Vyc2VCbG9jaztcclxuICBzdGVwTm8/OiBudW1iZXI7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgZWRpdGluZ05hbWU6IGJvb2xlYW47XHJcbiAgbmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5jbGFzcyBBZGRUYWJCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBlZGl0aW5nTmFtZTogZmFsc2UsXHJcbiAgICAgIG5hbWU6IFwiXCJcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgY3JlYXRlVGFiKHRhYk5hbWU6IHN0cmluZykge1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7ZWRpdGluZ05hbWU6IGZhbHNlLCBuYW1lOiBcIlwifSk7XHJcbiAgICBjb25zdCB7dHlwZSwgYnJhbmNoLCBkcmFmdElkLCBjb3Vyc2UsIHNjaG9vbCwgaGlzdG9yeSwgYmxvY2ssIHN0ZXBOb30gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgdGFiVGVtcGxhdGUgPSB7XHJcbiAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgIHRhYlRpdGxlOiB0YWJOYW1lLCAvLyBEZXByZWNhdGVkLiBVc2UgbmFtZSBpbnN0ZWFkLlxyXG4gICAgICBuYW1lOiB0YWJOYW1lLFxyXG4gICAgICBvcmRlcjogRGF0ZS5ub3coKSxcclxuICAgICAgbG9ja2VkOiBpc0tlZFN0YWZmKCkgPyB0cnVlIDogZmFsc2UsXHJcbiAgICAgIGFjbDogWyBcInJvbGU6VVNFUjpSXCIsIGBzY2hvb2xSb2xlOiR7c2Nob29sfS9FTVBMT1lFRTpTYCBdLFxyXG4gICAgICAvL2FiaWxpdGllc09yZGVyOiBbXSxcclxuICAgICAgLy9rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlcjogW10sXHJcbiAgICAgIC8vY2VudHJhbENvbnRlbnRPcmRlcjogW11cclxuICAgIH07XHJcbiAgICBjb25zdCBuZXdUYWIgPSAodHlwZSA9PT0gJ3RoZW1lLWNvdXJzZS10YWInID9cclxuICAgICAge1xyXG4gICAgICAgIHR5cGU6ICd0aGVtZS1jb3Vyc2UtdGFiJyxcclxuICAgICAgICB0YWJDbGFzczogJ2NvbnRlbnQtdGFiJyxcclxuICAgICAgICB0YWdzOiBbdGhpcy5wcm9wcy5jb3Vyc2UuaWRdLFxyXG4gICAgICAgIC4uLnRhYlRlbXBsYXRlLFxyXG4gICAgICB9IGFzIFRoZW1lQ291cnNlVGFiIDpcclxuICAgICAge1xyXG4gICAgICAgIHR5cGU6ICdzdGVwLWNvdXJzZS10YWInLFxyXG4gICAgICAgIHRhYkNsYXNzOiAnY29udGVudC10YWInLFxyXG4gICAgICAgIHRhZ3M6IFsuLi5ibG9jay50YWdzXSwgLy8gQ29udGFpbnMgYm90aCBjb3Vyc2VJZCBhbmQgY291cnNlOmNvdXJzZUNvZGVcclxuICAgICAgICAuLi50YWJUZW1wbGF0ZSxcclxuICAgICAgICBzdGVwTm86IHN0ZXBOb1xyXG4gICAgICB9IGFzIFN0ZXBDb3Vyc2VUYWIpO1xyXG5cclxuICAgIC8qY29uc3QgdG9wQ29udGVudDogUmljaFRleHRDb250ZW50ID0ge1xyXG4gICAgICB0eXBlOiAncmljaC10ZXh0JyxcclxuICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgdGFnczogW3RoaXMucHJvcHMuY291cnNlLmlkXSxcclxuICAgICAgaHRtbDogYDxoMj4ke3RhYk5hbWV9PC9oMmAsXHJcbiAgICAgIG9yZGVyOiBEYXRlLm5vdygpLFxyXG4gICAgICBsb2NrZWQ6IHRydWUsXHJcbiAgICAgIGhpZGRlbjogZmFsc2VcclxuICAgIH07Ki9cclxuICAgIGlmIChuZXdUYWIudHlwZSA9PT0gJ3N0ZXAtY291cnNlLXRhYicpIHtcclxuICAgICAgYnJhbmNoLmNvdXJzZUJsb2Nrcy5hZGRSZWxhdGVkKGJsb2NrLmlkLCBcInRhYnNcIiwgbmV3VGFiKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGJyYW5jaC5jb3Vyc2VJbnN0YW5jZXMuYWRkUmVsYXRlZChjb3Vyc2UuaWQsIFwidGFic1wiLCBuZXdUYWIpO1xyXG4gICAgfVxyXG4gICAgLy9icmFuY2guY291cnNlVGFicy5hZGRSZWxhdGVkKG5ld1RhYi5pZCwgXCJjb250ZW50c1wiLCB0b3BDb250ZW50KTtcclxuICAgIGF3YWl0IGJyYW5jaC5zYXZlTm93KCk7XHJcbiAgICBoaXN0b3J5LnB1c2goYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZS5pZH0vdGFicy8ke25ld1RhYi5pZH0vZHJhZnRzLyR7ZHJhZnRJZH0vZWRpdGApO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge3NjaG9vbCwgY291cnNlLCBicmFuY2h9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHtlZGl0aW5nTmFtZSwgbmFtZX0gPSB0aGlzLnN0YXRlO1xyXG4gICAgcmV0dXJuIDw+XHJcbiAgICAgICAgPGFcclxuICAgICAgICAgIG9uQ2xpY2s9e2VkaXRpbmdOYW1lID8gbnVsbCA6IGV2ID0+IHRoaXMuc2V0U3RhdGUoe2VkaXRpbmdOYW1lOiB0cnVlLCBuYW1lOiAnJ30pfT5cclxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIiAvPlxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICAhZWRpdGluZ05hbWUgP1xyXG4gICAgICAgICAgICAgICcgJyArIExgTnkgZmxpa2A6XHJcbiAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICBzdHlsZT17e2NvbG9yOiBcImJsYWNrXCJ9fVxyXG4gICAgICAgICAgICAgIGF1dG9Gb2N1c1xyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtMYEZsaWtuYW1uYH1cclxuICAgICAgICAgICAgICB2YWx1ZT17bmFtZX1cclxuICAgICAgICAgICAgICBzaXplPXszMH1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7bmFtZTogZXYudGFyZ2V0LnZhbHVlfSl9XHJcbiAgICAgICAgICAgICAgb25LZXlQcmVzcz17ZXYgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2LmtleSA9PT0gJ0VudGVyJykge1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZVRhYihuYW1lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIG9uQmx1cj17KCk9PnRoaXMuc2V0U3RhdGUoe2VkaXRpbmdOYW1lOiBmYWxzZX0pfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIDwvYT5cclxuXHJcbiAgICAgICAgey8qICAgICBcclxuICAgICAgICA8UmVuYW1lYWJsZVRleHRcclxuICAgICAgICAgIGVhZ2VyPXtmYWxzZX1cclxuICAgICAgICAgIG1heENoYXJzPXs4MH1cclxuICAgICAgICAgIHRleHQ9e25hbWV9XHJcbiAgICAgICAgICBvbkNoYW5nZT17dmFsdWUgPT4ge1xyXG4gICAgICAgIH19Lz5cclxuICAgICAgICAqL31cclxuICAgIDwvPjtcclxuICB9XHJcbn1cclxuY29uc3QgQWRkVGFiQnV0dG9uV2l0aFJvdXRlciA9IHdpdGhSb3V0ZXIoQWRkVGFiQnV0dG9uKVxyXG5leHBvcnQge0FkZFRhYkJ1dHRvbldpdGhSb3V0ZXIgYXMgQWRkVGFiQnV0dG9ufTtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBTdHJpcEdyYXBocywgS2VkQmFja2VuZFJlcG8gfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBDb3Vyc2VJbnN0YW5jZSwgQ291cnNlVGFiLCBDb3Vyc2VDb250ZW50LCBSaWNoVGV4dENvbnRlbnQsIExlYXJuaW5nR29hbHNDb250ZW50LCBFbWJlZGRlZEhUTUxDb250ZW50LCBSZXNvdXJjZUxpc3QsIFdvcmRCYW5rQ29udGVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgaXNLZWRTdGFmZiB9IGZyb20gJy4uL2xvZ2ljL2lzLWtlZC1zdGFmZic7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGNvdXJzZTogU3RyaXBHcmFwaHM8Q291cnNlSW5zdGFuY2U+O1xyXG4gIHRhYjogU3RyaXBHcmFwaHM8Q291cnNlVGFiPjtcclxuICBicmFuY2g6IEtlZEJhY2tlbmRSZXBvO1xyXG4gIHR5cGU/OiBrZXlvZiB0eXBlb2YgQUREX1RJVExFU1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIG9wZW46IGJvb2xlYW47XHJcbiAgY29udGVudFR5cGU6IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgQ09OVEVOVF9UWVBFUyA9IHtcclxuICBcInJpY2gtdGV4dFwiOiBMYFRleHRydXRhYCxcclxuICBcInlvdXR1YmUtbW92aWVcIjogTGBZb3V0dWJlIGZpbG1gLFxyXG4gIFwibGVhcm5pbmctZ29hbHNcIjogTGBMw6RyYW5kZW3DpWwgb2NoIHVwcGdpZnRlcmAsXHJcbiAgXCJyZXNvdXJjZS1saXN0XCI6IExgUmVzdXJzbGlzdGFgLFxyXG4gIFwiZW1iZWRkZWQtaHRtbFwiOiBMYEluYsOkZGRhZCBIVE1MYCxcclxuICBcIndvcmQtYmFua1wiOiBMYE9yZGJhbmtgXHJcbn07XHJcblxyXG5jb25zdCBBRERfVElUTEVTOiB0eXBlb2YgQ09OVEVOVF9UWVBFUyA9IHtcclxuICBcInJpY2gtdGV4dFwiOiBMYEzDpGdnIHRpbGwgdGV4dGAsXHJcbiAgXCJ5b3V0dWJlLW1vdmllXCI6IExgTMOkZ2cgdGlsbCB5b3V0dWJlIGZpbG1gLFxyXG4gIFwibGVhcm5pbmctZ29hbHNcIjogTGBMw6RnZyB0aWxsIGzDpHJhbmRlbcOlbCBvY2ggdXBwZ2lmdGVyYCxcclxuICBcInJlc291cmNlLWxpc3RcIjogTGBMw6RnZyB0aWxsIHJlc3Vyc2xpc3RhYCxcclxuICBcImVtYmVkZGVkLWh0bWxcIjogTGBMw6RnZyB0aWxsIGluYsOkZGRhZCBIVE1MYCxcclxuICBcIndvcmQtYmFua1wiOiBMYEzDpGdnIHRpbGwgb3JkYmFua2BcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEFkZENvbnRlbnRCdXR0b24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIgKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIG9wZW46IGZhbHNlLFxyXG4gICAgICBjb250ZW50VHlwZTogJ3JpY2gtdGV4dCdcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjcmVhdGVDb250ZW50KCkge1xyXG4gICAgY29uc3Qge3RhYiwgYnJhbmNoLCB0eXBlfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCBuZXdDb250ZW50ID0gdGhpcy5uZXdDb250ZW50KHR5cGUgfHwgdGhpcy5zdGF0ZS5jb250ZW50VHlwZSk7XHJcbiAgICBicmFuY2guY291cnNlVGFicy5hZGRSZWxhdGVkKHRhYi5pZCwgXCJjb250ZW50c1wiLCBuZXdDb250ZW50KTtcclxuICAgIHRoaXMuc2V0U3RhdGUoe29wZW46IGZhbHNlfSk7XHJcbiAgfVxyXG5cclxuICBuZXdDb250ZW50KGNvbnRlbnRUeXBlOiBzdHJpbmcpIDpDb3Vyc2VDb250ZW50e1xyXG4gICAgc3dpdGNoIChjb250ZW50VHlwZSBhcyBrZXlvZiB0eXBlb2YgQ09OVEVOVF9UWVBFUykge1xyXG4gICAgICBjYXNlIFwicmljaC10ZXh0XCI6IHJldHVybiB0aGlzLm5ld1JpY2hUZXh0KCk7XHJcbiAgICAgIGNhc2UgXCJsZWFybmluZy1nb2Fsc1wiOiByZXR1cm4gdGhpcy5uZXdMZWFybmluZ0dvYWwoKTtcclxuICAgICAgY2FzZSBcImVtYmVkZGVkLWh0bWxcIjogcmV0dXJuIHRoaXMubmV3RW1iZWRkZWRIVE1MKCk7XHJcbiAgICAgIGNhc2UgXCJ3b3JkLWJhbmtcIjogcmV0dXJuIHRoaXMubmV3V29yZEJhbmsoKTtcclxuICAgICAgY2FzZSBcInJlc291cmNlLWxpc3RcIjogcmV0dXJuIHRoaXMubmV3UmVzb3VyY2VMaXN0KCk7XHJcbiAgICAgIGRlZmF1bHQ6IHRocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZFwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5ld1dvcmRCYW5rKCk6IFdvcmRCYW5rQ29udGVudCB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiAnd29yZC1iYW5rJyxcclxuICAgICAgdGFnczogW3RoaXMucHJvcHMuY291cnNlLmlkXSxcclxuICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgb3JkZXI6IERhdGUubm93KCksXHJcbiAgICAgIGxvY2tlZDogdGhpcy5wcm9wcy50YWIubG9ja2VkLFxyXG4gICAgICBsb2NrRGVsZXRlOiBpc0tlZFN0YWZmKCksXHJcbiAgICAgIGhpZGRlbjogZmFsc2UsXHJcbiAgICAgIHNlbGVjdGVkV29yZEJhbms6IG51bGxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBuZXdSaWNoVGV4dCgpOiBSaWNoVGV4dENvbnRlbnQge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdHlwZTogXCJyaWNoLXRleHRcIixcclxuICAgICAgdGFnczogW3RoaXMucHJvcHMuY291cnNlLmlkXSxcclxuICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgb3JkZXI6IERhdGUubm93KCksXHJcbiAgICAgIGxvY2tlZDogdGhpcy5wcm9wcy50YWIubG9ja2VkLFxyXG4gICAgICBsb2NrRGVsZXRlOiBpc0tlZFN0YWZmKCksIC8vIEJlY2F1c2UgaWYgYSB0ZWFjaGVyIHdhcyBhbGxvZWQgdG8gY3JlYXRlcyB0aGlzLCB3ZSBuZWVkIHRvIGFsbG93IGhlciB0byBkZWxldGUgaXQhXHJcbiAgICAgIGhpZGRlbjogZmFsc2UsXHJcbiAgICAgIGh0bWw6ICcnLFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmV3RW1iZWRkZWRIVE1MKCk6IEVtYmVkZGVkSFRNTENvbnRlbnQge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdHlwZTogXCJlbWJlZGRlZC1odG1sXCIsXHJcbiAgICAgIHRhZ3M6IFt0aGlzLnByb3BzLmNvdXJzZS5pZF0sXHJcbiAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgIG9yZGVyOiBEYXRlLm5vdygpLFxyXG4gICAgICBsb2NrZWQ6IHRoaXMucHJvcHMudGFiLmxvY2tlZCxcclxuICAgICAgbG9ja0RlbGV0ZTogaXNLZWRTdGFmZigpLFxyXG4gICAgICBoaWRkZW46IGZhbHNlLFxyXG4gICAgICBodG1sOiAnJ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmV3TGVhcm5pbmdHb2FsKCk6IExlYXJuaW5nR29hbHNDb250ZW50IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHR5cGU6IFwibGVhcm5pbmctZ29hbHNcIixcclxuICAgICAgdGFnczogW3RoaXMucHJvcHMuY291cnNlLmlkXSxcclxuICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgbG9ja2VkOiB0aGlzLnByb3BzLnRhYi5sb2NrZWQsXHJcbiAgICAgIGxvY2tEZWxldGU6IGlzS2VkU3RhZmYoKSwgLy8gQmVjYXVzZSBpZiBhIHRlYWNoZXIgd2FzIGFsbG9lZCB0byBjcmVhdGVzIHRoaXMsIHdlIG5lZWQgdG8gYWxsb3cgaGVyIHRvIGRlbGV0ZSBpdCFcclxuICAgICAgaGlkZGVuOiBmYWxzZSxcclxuICAgICAgaGFzQ29tbW9uTGVhcm5pbmdHb2FsczogdGhpcy5wcm9wcy5jb3Vyc2UudHlwZSA9PT0gJ3RoZW1lLWNvdXJzZScsXHJcbiAgICAgIGNvbW1vbkxlYXJuaW5nR29hbHM6IFtdLFxyXG4gICAgICBvcmRlcjogRGF0ZS5ub3coKSxcclxuICAgICAgaGlkZGVuVGFza3M6IFtdLFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbmV3UmVzb3VyY2VMaXN0KCk6IFJlc291cmNlTGlzdCB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0eXBlOiBcInJlc291cmNlLWxpc3RcIixcclxuICAgICAgdGFnczogW3RoaXMucHJvcHMuY291cnNlLmlkXSxcclxuICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgbG9ja2VkOiB0aGlzLnByb3BzLnRhYi5sb2NrZWQsXHJcbiAgICAgIGxvY2tEZWxldGU6IGlzS2VkU3RhZmYoKSxcclxuICAgICAgb3JkZXI6IERhdGUubm93KCksXHJcbiAgICAgIGhpZGRlbjogZmFsc2UsXHJcbiAgICAgIHJlc291cmNlczogW11cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGlmICh0aGlzLnN0YXRlLm9wZW4pIHtcclxuICAgICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAgPHNlbGVjdCBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7Y29udGVudFR5cGU6IGV2LnRhcmdldC52YWx1ZX0pfT5cclxuICAgICAgICAgIHtPYmplY3Qua2V5cyhDT05URU5UX1RZUEVTKS5tYXAoY29udGVudFR5cGUgPT5cclxuICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2NvbnRlbnRUeXBlfSB2YWx1ZT17Y29udGVudFR5cGV9PlxyXG4gICAgICAgICAgICAgIHtDT05URU5UX1RZUEVTW2NvbnRlbnRUeXBlXX1cclxuICAgICAgICAgICAgPC9vcHRpb24+KX1cclxuICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gcHVsbC1yaWdodFwiIG9uQ2xpY2s9eygpPT50aGlzLnNldFN0YXRlKHtvcGVuOiBmYWxzZX0pfT57TGBBdmJyeXRgfTwvYT5cclxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLWRlZmF1bHRcIiBvbkNsaWNrPXsoKT0+dGhpcy5jcmVhdGVDb250ZW50KCl9PntMYFNrYXBhYH08L2E+XHJcbiAgICAgIDwvZGl2PjtcclxuICAgIH1cclxuICAgIHJldHVybiA8PjxhXHJcbiAgICAgIGNsYXNzTmFtZT1cImJ0blwiXHJcbiAgICAgIG9uQ2xpY2s9eygpPT57XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudHlwZSkge1xyXG4gICAgICAgICAgdGhpcy5jcmVhdGVDb250ZW50KCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe29wZW46IHRydWV9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH19PlxyXG4gICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIiAvPlxyXG4gICAgICAgIHt0aGlzLnByb3BzLnR5cGUgPyBBRERfVElUTEVTW3RoaXMucHJvcHMudHlwZV3CoDogTGBMw6RnZyB0aWxsIGlubmVow6VsbGB9XHJcbiAgICA8L2E+Jm5ic3A7PC8+O1xyXG4gIH1cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgY29uc3QgQWxpZ25Ib3Jpem9udGFsID0gKHtjbGFzc05hbWUsIGNsYXNzTmFtZXMsIGNoaWxkcmVufToge2NsYXNzTmFtZT86IHN0cmluZywgY2xhc3NOYW1lcz86IHN0cmluZ1tdLCBjaGlsZHJlbjogYW55fSkgPT4gKFxyXG4gIDxkaXYgY2xhc3NOYW1lPXtbLi4uKGNsYXNzTmFtZXMgfHwgW10pLCAuLi4oY2xhc3NOYW1lID8gW2NsYXNzTmFtZV0gOiBbXSksIFwiYWxpZ24taG9yaXpvbnRhbFwiXS5qb2luKCcgJyl9PlxyXG4gICAge2NoaWxkcmVufVxyXG4gIDwvZGl2PlxyXG4pXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG5leHBvcnQgY29uc3QgSG9yaXpvbnRhbEl0ZW0gPSAoe2NsYXNzTmFtZSwgY2xhc3NOYW1lcywgY2hpbGRyZW59OiB7Y2xhc3NOYW1lPzogc3RyaW5nLCBjbGFzc05hbWVzPzogc3RyaW5nW10sIGNoaWxkcmVuOiBhbnl9KSA9PiAoXHJcbiAgPGRpdiBjbGFzc05hbWU9e1suLi4oY2xhc3NOYW1lcyB8fCBbXSksIC4uLihjbGFzc05hbWUgPyBbY2xhc3NOYW1lXSA6IFtdKSwgXCJob3Jpem9udGFsSXRlbVwiXS5qb2luKCcgJyl9PlxyXG4gICAge2NoaWxkcmVufVxyXG4gIDwvZGl2PlxyXG4pXHJcbiIsImltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IENvdXJzZUluc3RhbmNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IENvdXJzZVRhYkNsYXNzZXMgPSB7XHJcbiAgXCJpbnRyby10YWJcIjogTGBJbnRyb2R1a3Rpb25zZmxpa2AsXHJcbiAgXCJydW4tdXAtdGFiXCI6IExgVXBwdGFrdHNmbGlrYCxcclxuICBcInN1YmplY3QtdGFiXCI6IExgw4RtbmVzZmxpa2AsXHJcbiAgXCJtaXNzaW9uLXRhYlwiOiBMYFVwcGRyYWdzZmxpa2AsXHJcbiAgXCJjb250ZW50LXRhYlwiOiBMYEdlbmVyZWxsIGZsaWtgLFxyXG4gIFwidGVhY2hlci10YWJcIjogTGBMw6RyYXJzaWRhYCxcclxuICBcIndvcmQtYmFuay10YWJcIjogTGBPcmRiYW5rYFxyXG59XHJcblxyXG50eXBlIFRhYlR5cGVPcHRJbiA9IHtbVGFiVHlwZSBpbiBrZXlvZiB0eXBlb2YgQ291cnNlVGFiQ2xhc3Nlc10/OiBib29sZWFufTtcclxuXHJcbmV4cG9ydCBjb25zdCBUYWJUeXBlc1BlckNvdXJzZVR5cGU6IHtbQ291cnNlVHlwZSBpbiBDb3Vyc2VJbnN0YW5jZVtcInR5cGVcIl1dOiBBcnJheTxrZXlvZiB0eXBlb2YgQ291cnNlVGFiQ2xhc3Nlcz59ID0ge1xyXG4gIFwic3RlcC1jb3Vyc2VcIjogW1xyXG4gICAgXCJjb250ZW50LXRhYlwiLFxyXG4gICAgXCJpbnRyby10YWJcIixcclxuICAgIFwidGVhY2hlci10YWJcIixcclxuICAgIFwid29yZC1iYW5rLXRhYlwiXHJcbiAgXSxcclxuICBcInRoZW1lLWNvdXJzZVwiOiBbXHJcbiAgICBcImNvbnRlbnQtdGFiXCIsXHJcbiAgICBcInJ1bi11cC10YWJcIixcclxuICAgIFwic3ViamVjdC10YWJcIixcclxuICAgIFwibWlzc2lvbi10YWJcIixcclxuICAgIFwidGVhY2hlci10YWJcIlxyXG4gIF1cclxufTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQWxpZ25Ib3Jpem9udGFsIH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2FsaWduLWhvcml6b250YWwnO1xyXG5pbXBvcnQgeyBDb3Vyc2VJbnN0YW5jZSwgQ291cnNlVGFiIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBIb3Jpem9udGFsSXRlbSB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9ob3Jpem9udGFsLWl0ZW0nO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbywgU3RyaXBHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBDb3Vyc2VUYWJDbGFzc2VzLCBUYWJUeXBlc1BlckNvdXJzZVR5cGUgfSBmcm9tICcuL2NvdXJzZS10YWIvdGFiLWNsYXNzZXMnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBnZXRTY2hvb2xZZWFycywgY29tcHV0ZUNvdXJzZUluc3RhbmNlVGFncyB9IGZyb20gJy4uL2xvZ2ljL2NvdXJzZS1pbnN0YW5jZS10YWdzJztcclxuaW1wb3J0IHsgVGV4dElucHV0IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dC1pbnB1dCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGNvdXJzZTogQ291cnNlSW5zdGFuY2U7XHJcbiAgdGFiOiBTdHJpcEdyYXBoczxDb3Vyc2VUYWI+O1xyXG4gIHJlcG86IEtlZEJhY2tlbmRSZXBvO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVGFiU2V0dGluZ3MgPSAoeyB0YWIsIHJlcG8sIGNvdXJzZSB9OiBQcm9wcykgPT4ge1xyXG4gIGNvbnN0IHsgc3ViamVjdENvZGUsIHN1YmplY3ROYW1lIH0gPSB0YWIuc3ViamVjdCA/XHJcbiAgICB0YWIuc3ViamVjdCA6XHJcbiAgICBjb3Vyc2UudHlwZSA9PT0gJ3RoZW1lLWNvdXJzZScgJiYgY291cnNlLnN1YmplY3RzICYmIGNvdXJzZS5zdWJqZWN0cy5sZW5ndGggPiAwID9cclxuICAgICAgeyBzdWJqZWN0Q29kZTogY291cnNlLnN1YmplY3RzWzBdLmNvZGUsIHN1YmplY3ROYW1lOiBjb3Vyc2Uuc3ViamVjdHNbMF0ubmFtZSB9IDpcclxuICAgICAgeyBzdWJqZWN0Q29kZTogJycsIHN1YmplY3ROYW1lOiAnJyB9O1xyXG4gIGNvbnN0IGNvdXJzZVNjaG9vbFllYXJzID0gZ2V0U2Nob29sWWVhcnMoY291cnNlLnRhZ3MpO1xyXG4gIGNvbnN0IHNjaG9vbFllYXI6IG51bGwgfCBzdHJpbmcgPSBnZXRTY2hvb2xZZWFycyh0YWIudGFncylbMF0gfHwgY291cnNlU2Nob29sWWVhcnNbMF0gfHwgbnVsbDtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIC8vXHJcbiAgICAvLyBFZGl0IFwic3RhbmRhcmRcIiBzY2hvb2w6IENob29zZSB0YWIgdHlwZVxyXG4gICAgLy9cclxuICAgIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkXCI+XHJcbiAgICAgIDxwIGNsYXNzTmFtZT1cImJveC1taW5pLWxhYmVsXCI+e0xgSW5zdMOkbGxuaW5nYXIgZsO2ciBmbGlrZW4gJHt0YWIubmFtZSB8fCB0YWIudGFiVGl0bGV9YH08L3A+XHJcbiAgICAgIDxBbGlnbkhvcml6b250YWw+XHJcbiAgICAgICAgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImtjbGFiZWxcIj57TGBGbGlrZW5zIHR5cGB9PC9sYWJlbD5cclxuICAgICAgICA8L0hvcml6b250YWxJdGVtPlxyXG4gICAgICAgIDxIb3Jpem9udGFsSXRlbT5cclxuICAgICAgICAgIDxzZWxlY3RcclxuICAgICAgICAgICAgdmFsdWU9e3RhYi50YWJDbGFzc31cclxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+XHJcbiAgICAgICAgICAgICAgcmVwby5jb3Vyc2VUYWJzLnVwZGF0ZSh0YWIsIGV2LnRhcmdldC52YWx1ZSA9PT0gJ3N1YmplY3QtdGFiJyA/IHtcclxuICAgICAgICAgICAgICAgIHRhYkNsYXNzOiBldi50YXJnZXQudmFsdWUgYXMga2V5b2YgdHlwZW9mIENvdXJzZVRhYkNsYXNzZXMsXHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0OiB7IHN1YmplY3RDb2RlLCBzdWJqZWN0TmFtZSB9LFxyXG4gICAgICAgICAgICAgICAgdGFnczogY29tcHV0ZUNvdXJzZUluc3RhbmNlVGFncyh0YWIudGFncywgW3N1YmplY3RDb2RlXSwgW3NjaG9vbFllYXJdKVxyXG4gICAgICAgICAgICAgIH0gOiB7XHJcbiAgICAgICAgICAgICAgICAgIHRhYkNsYXNzOiBldi50YXJnZXQudmFsdWUgYXMga2V5b2YgdHlwZW9mIENvdXJzZVRhYkNsYXNzZXMsXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIHtUYWJUeXBlc1BlckNvdXJzZVR5cGVbY291cnNlLnR5cGVdLm1hcCh0YWJDbGFzcyA9PlxyXG4gICAgICAgICAgICAgIDxvcHRpb24ga2V5PXt0YWJDbGFzc30gdmFsdWU9e3RhYkNsYXNzfT5cclxuICAgICAgICAgICAgICAgIHtDb3Vyc2VUYWJDbGFzc2VzW3RhYkNsYXNzXX1cclxuICAgICAgICAgICAgICA8L29wdGlvbj4pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIDwvc2VsZWN0PlxyXG4gICAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgIDwvQWxpZ25Ib3Jpem9udGFsPlxyXG4gICAgICA8VGV4dElucHV0IGxhYmVsPXtMYEZsaWtlbnMgbmFtbmB9IGlkPVwiVGFiU2V0dGluZ3M6bmFtZVwiIHZhbHVlPXt0YWIubmFtZSB8fCB0YWIudGFiVGl0bGV9XHJcbiAgICAgICAgb25DaGFuZ2U9e25hbWUgPT5cclxuICAgICAgICAgIHJlcG8uY291cnNlVGFicy51cGRhdGUodGFiLCB7XHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIHRhYlRpdGxlOiBuYW1lIC8vIERlcHJlY2F0ZWQuIFRvZG86IHJlbW92ZS5cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSAvPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufVxyXG4iLCJpbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBDb3Vyc2VDb250ZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5cclxuZXhwb3J0IHR5cGUgQ291cnNlQ29udGVudFR5cGVzID0gQ291cnNlQ29udGVudFtcInR5cGVcIl07XHJcblxyXG5leHBvcnQgY29uc3QgQ09VUlNFX0NPTlRFTlRfVFlQRVM6IHtbdHlwZSBpbiBDb3Vyc2VDb250ZW50VHlwZXNdOiBzdHJpbmd9ID0ge1xyXG4gIFwicmljaC10ZXh0XCI6IExgVGV4dHJ1dGFgLFxyXG4gIFwieW91dHViZS1tb3ZpZVwiOiBMYFlvdXR1YmUgZmlsbWAsXHJcbiAgXCJsZWFybmluZy1nb2Fsc1wiOiBMYEzDpHJhbmRlbcOlbCBvY2ggdXBwZ2lmdGVyYCxcclxuICBcInJlc291cmNlLWxpc3RcIjogTGBSZXN1cnNsaXN0YWAsXHJcbiAgXCJlbWJlZGRlZC1odG1sXCI6IExgSW5iw6RkZGFkIEhUTUxgLFxyXG4gIFwid29yZC1iYW5rXCI6IExgT3JkYmFua2BcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgUmljaFRleHRDb250ZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBXeXNpd3lnIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcnO1xyXG5pbXBvcnQgYWN0aW9ucyBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLXN2JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8gfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgcmVwbzogS2VkQmFja2VuZFJlcG87XHJcbiAgY29udGVudDogUmljaFRleHRDb250ZW50O1xyXG4gIGVkaXRNb2RlOiBib29sZWFuO1xyXG4gIG1heENoYXJzPzogbnVtYmVyO1xyXG4gIHJlcG9ydE51bUNoYXJzPzogKG51bUNoYXJzOiBudW1iZXIpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBSaWNoVGV4dENvbnRlbnRCb3ggPSAoe2NvbnRlbnQsIHJlcG8sIGVkaXRNb2RlLCByZXBvcnROdW1DaGFycywgbWF4Q2hhcnN9OiBQcm9wcykgPT4gZWRpdE1vZGUgPyA8ZGl2PlxyXG4gIDxXeXNpd3lnXHJcbiAgICBodG1sPXtjb250ZW50Lmh0bWx9XHJcbiAgICBkZWZhdWx0QWN0aW9ucz17YWN0aW9uc31cclxuICAgIHJlYWRPbmx5PXshZWRpdE1vZGUgfHwgKGNvbnRlbnQubG9ja2VkICYmICFpc0tlZFN0YWZmKCkpIH1cclxuICAgIHJlcG9ydE51bUNoYXJzPXtyZXBvcnROdW1DaGFyc31cclxuICAgIG1heENoYXJzPXttYXhDaGFyc31cclxuICAgIGFjdGlvbnM9e1tcclxuICAgICAgXCJib2xkXCIsXHJcbiAgICAgIFwiaXRhbGljXCIsXHJcbiAgICAgIFwidW5kZXJsaW5lXCIsXHJcbiAgICAgIFwic3RyaWtldGhyb3VnaFwiLFxyXG4gICAgICBcImhlYWRpbmcyXCIsXHJcbiAgICAgIFwiaGVhZGluZzNcIixcclxuICAgICAgXCJvbGlzdFwiLFxyXG4gICAgICBcInVsaXN0XCIsXHJcbiAgICAgIFwib3V0ZGVudFwiLFxyXG4gICAgICBcImluZGVudFwiLFxyXG4gICAgICBcImxpbmVcIixcclxuICAgICAgXCJsaW5rXCIsXHJcbiAgICAgIFwiaW1hZ2VcIl19XHJcbiAgICBvbkNoYW5nZT17ZWRpdE1vZGUgJiYgKGh0bWwgPT4gcmVwby5jb3Vyc2VDb250ZW50cy51cGRhdGU8UmljaFRleHRDb250ZW50Pihjb250ZW50LCB7aHRtbH0pKX0gLz5cclxuXHJcbjwvZGl2PiA6IDxkaXY+XHJcbiAgPGRpdiBjbGFzc05hbWU9XCJyaWNoLXRleHQtcmVhZG9ubHlcIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogY29udGVudC5odG1sfX0gLz5cclxuPC9kaXY+O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMZWFybmluZ0dvYWxzQ29udGVudCwgQ291cnNlSW5zdGFuY2UsIENvdXJzZVRhYiB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8sIFN0cmlwR3JhcGhzIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgQWxpZ25Ib3Jpem9udGFsIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2FsaWduLWhvcml6b250YWwnO1xyXG5pbXBvcnQgeyBIb3Jpem9udGFsSXRlbSB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9ob3Jpem9udGFsLWl0ZW0nO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgY291cnNlOiBTdHJpcEdyYXBoczxDb3Vyc2VJbnN0YW5jZT4sXHJcbiAgY29udGVudDogTGVhcm5pbmdHb2Fsc0NvbnRlbnQ7XHJcbiAgcmVwbzogS2VkQmFja2VuZFJlcG87XHJcbiAgdGFiOiBTdHJpcEdyYXBoczxDb3Vyc2VUYWI+O1xyXG59XHJcbmV4cG9ydCBjb25zdCBMZWFybmluZ1Rhc2tzU2V0dGluZ3MgPSAoe3RhYiwgY29udGVudCwgcmVwb306IFByb3BzKSA9PiA8ZGl2PlxyXG4gIDxoMj57dGFiLnRhYkNsYXNzICE9PSAnbWlzc2lvbi10YWInID9cclxuICAgIExgTMOkcmFuZGVtw6VsIG9jaCB1cHBnaWZ0ZXJgIDpcclxuICAgIExgVXBwZHJhZ2B9PC9oMj5cclxuICB7aXNLZWRTdGFmZigpICYmIHRhYi50YWJDbGFzcyAhPT0gJ21pc3Npb24tdGFiJyA/IDw+XHJcbiAgICA8ZGl2PjxBbGlnbkhvcml6b250YWw+XHJcbiAgICAgIDxIb3Jpem9udGFsSXRlbT5cclxuICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZD17Y29udGVudC5oYXNDb21tb25MZWFybmluZ0dvYWxzfVxyXG4gICAgICAgIG9uQ2hhbmdlPXtldiA9PiByZXBvLmNvdXJzZUNvbnRlbnRzLnVwZGF0ZTxMZWFybmluZ0dvYWxzQ29udGVudD4oY29udGVudCwge2hhc0NvbW1vbkxlYXJuaW5nR29hbHM6ICEhZXYudGFyZ2V0LmNoZWNrZWR9KX0gLz5cclxuICAgICAgPC9Ib3Jpem9udGFsSXRlbT5cclxuICAgICAgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgIDxwPlxyXG4gICAgICAgICZuYnNwO3tMYFNwZWNpZmljZXJhIGdlbWVuc2FtbWEgbMOkcmFuZGVtw6VsIGbDtnIgc2FtdGxpZ2EgdXBwZ2lmdGVyYH1cclxuICAgICAgICA8L3A+XHJcbiAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+XHJcbiAgICA8L0FsaWduSG9yaXpvbnRhbD48L2Rpdj5cclxuXHJcbiAgICA8ZGl2PlxyXG4gICAgICA8cD5cclxuICAgICAgICAgIHtjb250ZW50Lmhhc0NvbW1vbkxlYXJuaW5nR29hbHMgP1xyXG4gICAgICAgICAgICBMYEFuZ2UgZGUgZ2VtZW5zYW1tYSBsw6RyYW5kZW3DpWxlbi4gQW5nZSBldHQgbMOkcmFuZGVtw6VsIHBlciByYWQuYCA6XHJcbiAgICAgICAgICAgIExgQW5nZSBldHQgbMOkcmFuZGVtw6VsIHBlciByYWQuYFxyXG4gICAgICAgICAgfVxyXG4gICAgICA8L3A+XHJcbiAgICAgICAgPHRleHRhcmVhIGNsYXNzTmFtZT1cImxlYXJuaW5nLWdvYWwtYm94XCIgdmFsdWU9e2NvbnRlbnQuY29tbW9uTGVhcm5pbmdHb2Fscy5qb2luKCdcXG4nKX1cclxuICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiByZXBvLmNvdXJzZUNvbnRlbnRzLnVwZGF0ZTxMZWFybmluZ0dvYWxzQ29udGVudD4oY29udGVudCwge1xyXG4gICAgICAgICAgICBjb21tb25MZWFybmluZ0dvYWxzOiBldi50YXJnZXQudmFsdWUuc3BsaXQoJ1xcbicpXHJcbiAgICAgICAgICB9KX0gLz5cclxuICAgIDwvZGl2PlxyXG4gIDwvPiA6IG51bGx9XHJcbjwvZGl2PlxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvdXJzZVRhYiwgQ291cnNlSW5zdGFuY2UsIFJpY2hUZXh0Q29udGVudCwgVGFzaywgTGVhcm5pbmdHb2Fsc0NvbnRlbnQsIFRoZW1lQ291cnNlVGFiLCBTdGVwQ291cnNlVGFiLCBDb3Vyc2VCbG9jaywgVGhlbWVDb3Vyc2VJbnN0YW5jZSwgU3RlcENvdXJzZUluc3RhbmNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBTdHJpcEdyYXBocywgV2l0aEdyYXBocywgS2VkQmFja2VuZFJlcG8gfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyB3aXRoUm91dGVyLCBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBkYiB9IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbHMvZGInO1xyXG5pbXBvcnQgeyBnZXRDb3Vyc2VDb2Rlc0Zyb21UYWdzIH0gZnJvbSAnLi4vLi4vbG9naWMvZ2V0LWNvdXJzZS1jb2Rlcy1mcm9tLXRhZ3MnO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuaW1wb3J0IHsgY29tcHV0ZVRhc2tUYWdzQW5kU3ViamVjdCB9IGZyb20gJy4uLy4uL2xvZ2ljL2NvbXB1dGUtdGFzay10YWdzLWFuZC1zdWJqZWN0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIFJvdXRlQ29tcG9uZW50UHJvcHMge1xyXG4gIGJyYW5jaDogS2VkQmFja2VuZFJlcG87XHJcbiAgc2Nob29sOiBzdHJpbmc7XHJcbiAgY291cnNlOiBTdHJpcEdyYXBoczxDb3Vyc2VJbnN0YW5jZT47XHJcbiAgdGFiOiBTdHJpcEdyYXBoczxUaGVtZUNvdXJzZVRhYiB8IFN0ZXBDb3Vyc2VUYWI+O1xyXG4gIGRyYWZ0SWQ6IHN0cmluZztcclxuICBjb250ZW50OiBMZWFybmluZ0dvYWxzQ29udGVudDtcclxuICBibG9jaz86IENvdXJzZUJsb2NrO1xyXG4gIGxlYXJuaW5nR29hbDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGVkaXRpbmdOYW1lOiBib29sZWFuO1xyXG4gIG5hbWU6IHN0cmluZztcclxufVxyXG5cclxuY2xhc3MgQWRkVGFza0J1dHRvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGVkaXRpbmdOYW1lOiBmYWxzZSxcclxuICAgICAgbmFtZTogXCJcIlxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBhc3luYyBjcmVhdGVUYXNrKHRhc2tOYW1lOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe2VkaXRpbmdOYW1lOiBmYWxzZSwgbmFtZTogXCJcIn0pO1xyXG4gICAgY29uc3Qge2JyYW5jaCwgZHJhZnRJZCwgY291cnNlLCB0YWIsIHNjaG9vbCwgY29udGVudCwgaGlzdG9yeSwgYmxvY2ssIGxlYXJuaW5nR29hbH0gPSB0aGlzLnByb3BzO1xyXG4gICAgLy9jb25zdCBjb3Vyc2UgPSBhd2FpdCBkYi5jb3Vyc2VJbnN0YW5jZXMuaWQoY291cnNlSWQpLmxvYWQoKTtcclxuICAgIC8vY29uc3QgY291cnNlVmlld2VyVXJsS1MgPSBlbnYuY291cnNlVmlld2VyVXJsS1M7XHJcbiAgICBjb25zdCB7IHRhZ3MsIHN1YmplY3QgfSA9IGNvbXB1dGVUYXNrVGFnc0FuZFN1YmplY3QoY291cnNlIGFzIENvdXJzZUluc3RhbmNlLCB0YWIgYXMgQ291cnNlVGFiLCBibG9jayk7XHJcbiAgICBjb25zdCBuZXdUYXNrOiBUYXNrID0ge1xyXG4gICAgICBpZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICB0YWdzLFxyXG4gICAgICBuYW1lOiB0YXNrTmFtZSxcclxuICAgICAgYWNsOiBbIFwicm9sZTpVU0VSOlJcIiwgYHNjaG9vbFJvbGU6JHtzY2hvb2x9L0VNUExPWUVFOlNgIF0sXHJcbiAgICAgIHVybDogXCJcIixcclxuICAgICAgdGFza1R5cGU6ICd0YXNrJyxcclxuICAgICAgbGVhcm5pbmdHb2FsOiBsZWFybmluZ0dvYWwsXHJcbiAgICAgIGZ1dHVyZUFiaWxpdGllczogW10sXHJcbiAgICAgIHJlc291cmNlczogW10sXHJcbiAgICAgIHN1YmplY3RcclxuICAgIH07XHJcbiAgICBicmFuY2guY291cnNlQ29udGVudHMuYWRkUmVsYXRlZChjb250ZW50LmlkLCBcInRhc2tzXCIsIG5ld1Rhc2spO1xyXG4gICAgYXdhaXQgYnJhbmNoLnNhdmVOb3coKTtcclxuICAgIGhpc3RvcnkucHVzaChgLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlLmlkfS90YWJzLyR7dGFiLmlkfS9jb250ZW50cy8ke2NvbnRlbnQuaWR9L3Rhc2tzLyR7bmV3VGFzay5pZH0vZHJhZnRzLyR7ZHJhZnRJZH0vZWRpdGApO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge2VkaXRpbmdOYW1lLCBuYW1lfSA9IHRoaXMuc3RhdGU7XHJcbiAgICByZXR1cm4gPD5cclxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidG5cIlxyXG4gICAgICAgICAgb25DbGljaz17ZWRpdGluZ05hbWUgPyBudWxsIDogZXYgPT4gdGhpcy5zZXRTdGF0ZSh7ZWRpdGluZ05hbWU6IHRydWUsIG5hbWU6ICcnfSl9PlxyXG4gICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGx1c1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIC8+XHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgICFlZGl0aW5nTmFtZSA/XHJcbiAgICAgICAgICAgICAgJyAnICsgKGlzS2VkU3RhZmYoKSA/IExgTMOkZ2cgdGlsbCB1cHBnaWZ0YCA6IExgTMOkZ2cgdGlsbCBlZ2VuIHVwcGdpZnRgKTpcclxuICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgIGF1dG9Gb2N1c1xyXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtMYFVwcGdpZnRlbnMgbmFtbmB9XHJcbiAgICAgICAgICAgICAgdmFsdWU9e25hbWV9XHJcbiAgICAgICAgICAgICAgc2l6ZT17NTB9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMuc2V0U3RhdGUoe25hbWU6IGV2LnRhcmdldC52YWx1ZX0pfVxyXG4gICAgICAgICAgICAgIG9uS2V5UHJlc3M9e2V2ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChldi5rZXkgPT09ICdFbnRlcicpIHtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVUYXNrKG5hbWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgb25CbHVyPXsoKT0+dGhpcy5zZXRTdGF0ZSh7ZWRpdGluZ05hbWU6IGZhbHNlfSl9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgPC9hPlxyXG4gICAgPC8+O1xyXG4gIH1cclxufVxyXG5jb25zdCBBZGRUYXNrQnV0dG9uV2l0aFJvdXRlciA9IHdpdGhSb3V0ZXIoQWRkVGFza0J1dHRvbilcclxuZXhwb3J0IHtBZGRUYXNrQnV0dG9uV2l0aFJvdXRlciBhcyBBZGRUYXNrQnV0dG9ufTtcclxuXHJcbiIsImltcG9ydCB7IENvdXJzZUluc3RhbmNlLCBDb3Vyc2VUYWIsIENvdXJzZUJsb2NrLCBTdGVwQ291cnNlSW5zdGFuY2UgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcclxuaW1wb3J0IHsgZmxhdHRlbiwgZGlzdGluY3QgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVRhc2tUYWdzQW5kU3ViamVjdChjb3Vyc2U6IENvdXJzZUluc3RhbmNlLCB0YWI6IENvdXJzZVRhYiwgYmxvY2s6IENvdXJzZUJsb2NrKSB7XHJcbiAgY29uc3QgdGFncyA9IFtjb3Vyc2UuaWRdOyAgXHJcbiAgXHJcbiAgaWYgKHRhYi50YWJDbGFzcyA9PT0gJ21pc3Npb24tdGFiJykge1xyXG4gICAgLy8gSWYgdGFzayBiZWxvbmdzIHRvIGEgbWlzc2lvbiB0YWIsXHJcbiAgICAvLyBpdCBzaG91bGQgYmUgdGFnZ2VkIHdpdGggYWxsIHRoZSBzdWJqZWN0cyBvZiB0aGUgY291cnNlXHJcbiAgICBjb25zdCBvdGhlclN1YmplY3RUYWJzID0gY291cnNlLnRhYnMhXHJcbiAgICAgIC5maWx0ZXIodGFiID0+IHRhYi50YWJDbGFzcyA9PT0gJ3N1YmplY3QtdGFiJyk7XHJcblxyXG4gICAgY29uc3Qgc3ViamVjdHMgPSBkaXN0aW5jdChvdGhlclN1YmplY3RUYWJzLm1hcCh0YWIgPT4gdGFiLnN1YmplY3QpLCBzID0+IHMuc3ViamVjdENvZGUpO1xyXG4gICAgY29uc3QgY291cnNlQ29kZVRhZ3MgPSBkaXN0aW5jdChmbGF0dGVuKFxyXG4gICAgICBvdGhlclN1YmplY3RUYWJzLm1hcChcclxuICAgICAgICB0YWIgPT4gdGFiLnRhZ3MuZmlsdGVyKHRhZyA9PiB0YWcuc3RhcnRzV2l0aChcImNvdXJzZTpcIikpXHJcbiAgICAgIClcclxuICAgICkpO1xyXG5cclxuICAgIHRhZ3MucHVzaCguLi5zdWJqZWN0cy5tYXAocyA9PiBcInN1YjpcIiArIHMuc3ViamVjdENvZGUpKTtcclxuICAgIHRhZ3MucHVzaCguLi5jb3Vyc2VDb2RlVGFncyk7XHJcbiAgICBjb25zdCBzdWJqZWN0ID0gc3ViamVjdHMubWFwKHMgPT4gcy5zdWJqZWN0TmFtZSkuam9pbignLCAnKTtcclxuICAgIHJldHVybiB7IHRhZ3MsIHN1YmplY3QgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGFncy5wdXNoKC4uLih0YWIgfHwgYmxvY2spLnRhZ3MuZmlsdGVyKHRhZyA9PiB0YWcuc3RhcnRzV2l0aChcImNvdXJzZTpcIikpKTtcclxuICAgIGlmIChjb3Vyc2UudHlwZSA9PT0gJ3RoZW1lLWNvdXJzZScpXHJcbiAgICAgIHRhZ3MucHVzaCguLi50YWIudGFncy5maWx0ZXIodGFnID0+IHRhZy5zdGFydHNXaXRoKFwic3ViOlwiKSkpO1xyXG4gICAgZWxzZVxyXG4gICAgICB0YWdzLnB1c2goLi4uYmxvY2sudGFncy5maWx0ZXIodGFnID0+IHRhZy5zdGFydHNXaXRoKFwic3ViOlwiKSkpO1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IGNvdXJzZS50eXBlID09PSAndGhlbWUtY291cnNlJyA/XHJcbiAgICAgIHRhYi5zdWJqZWN0LnN1YmplY3ROYW1lIDpcclxuICAgICAgKGNvdXJzZSBhcyBTdGVwQ291cnNlSW5zdGFuY2UpLnN1YmplY3Quc3ViamVjdE5hbWU7XHJcbiAgICByZXR1cm4geyB0YWdzLCBzdWJqZWN0IH07XHJcbiAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbywgV2l0aEdyYXBocywgU3RyaXBHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBMZWFybmluZ0dvYWxzQ29udGVudCwgQ291cnNlSW5zdGFuY2UsIENvdXJzZUJsb2NrLCBDb3Vyc2VUYWIsIFN0ZXBDb3Vyc2VUYWIsIFRoZW1lQ291cnNlVGFiLCBTdGVwQ291cnNlSW5zdGFuY2UsIFRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IEwsIGFycmF5VG9Mb29rdXAgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFRhc2tMaXN0LCBMZWFybmluZ01vZHVsZVRhc2sgfSBmcm9tICcuLi8uLi8uLi9jb3Vyc2Utdmlld2VyL3N1YmNvbXBvbmVudHMvdGFzay1saXN0JztcclxuaW1wb3J0IHsgQWRkVGFza0J1dHRvbiB9IGZyb20gJy4vYWRkLXRhc2stYnV0dG9uJztcclxuaW1wb3J0IHsgU29ydGFibGVUYXNrTGlzdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9zb3J0YWJsZS10YXNrLWxpc3QnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IGNvbXB1dGVVcGRhdGVkT3JkZXIsIGdldFNvcnRlZFRhc2tzIH0gZnJvbSAnLi4vLi4vbG9naWMvdGFzay1vcmRlcic7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHNjaG9vbDogc3RyaW5nO1xyXG4gIHJlcG86IEtlZEJhY2tlbmRSZXBvO1xyXG4gIGNvdXJzZTogU3RyaXBHcmFwaHM8Q291cnNlSW5zdGFuY2U+O1xyXG4gIGNvdXJzZVRhYjogU3RyaXBHcmFwaHM8Q291cnNlVGFiPjtcclxuICBjb250ZW50OiBXaXRoR3JhcGhzPExlYXJuaW5nR29hbHNDb250ZW50LCBcInRhc2tzXCI+O1xyXG4gIGRyYWZ0SWQ6IHN0cmluZztcclxuICBlZGl0TW9kZTogYm9vbGVhbjtcclxuICBsZWFybmluZ0dvYWxzOiBzdHJpbmdbXTtcclxuICBibG9jaz86IENvdXJzZUJsb2NrO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTGVhcm5pbmdUYXNrc1dpdGhDb21tb25Hb2FscyA9ICh7IHNjaG9vbCwgcmVwbywgY29udGVudCwgZHJhZnRJZCwgZWRpdE1vZGUsIGNvdXJzZSwgY291cnNlVGFiLCBsZWFybmluZ0dvYWxzLCBibG9jayB9OiBQcm9wcykgPT4ge1xyXG4gIGNvbnN0IHRhc2tzID0gZ2V0U29ydGVkVGFza3MoY29udGVudCk7XHJcbiAgY29uc3Qgc3ViamVjdFRvVGFza3NMb29rdXAgPSBhcnJheVRvTG9va3VwKHRhc2tzLCB0ID0+IHQuc3ViamVjdCB8fCBcIlwiKTtcclxuICBjb25zdCBzdWJqZWN0ID0gY291cnNlLnR5cGUgPT09ICdzdGVwLWNvdXJzZScgP1xyXG4gICAgKGNvdXJzZSBhcyBTdGVwQ291cnNlSW5zdGFuY2UpLnN1YmplY3QgOlxyXG4gICAgY291cnNlVGFiLnN1YmplY3Q7XHJcblxyXG4gIGlmIChzdWJqZWN0ICYmICFzdWJqZWN0VG9UYXNrc0xvb2t1cFtzdWJqZWN0LnN1YmplY3ROYW1lXSkge1xyXG4gICAgLy8gTWFrZSBzdXJlIHdlIGhhdmUgYXQgbGVhc3Qgb25lIHN1YmplY3QgaGVhZGluZyBpZiB0YXNrIGxpc3QgaXMgZW1wdHk6XHJcbiAgICBzdWJqZWN0VG9UYXNrc0xvb2t1cFtzdWJqZWN0LnN1YmplY3ROYW1lXSA9IFtdO1xyXG4gIH1cclxuICAvLyBUT0RPOiBLb2xsYSBow6RyIG9jaCBpIGxlYXJuaW5nLXRhc2tzLXdpdGgtc2VwYXJhdGUtZ29hbHMuXHJcbiAgLy8gICogQmVow7Z2cyBzdWJqZWN0LWxvb2t1cD9cclxuICAvLyAgKiBLYW4gdmkgYnJ5dGEgdnktdmFyaWFudGVuIGZyw6VuIGVkaXQgdmFyaWFudGVuPyAoaSBiw6VkYSBmYWxsZW4/KVxyXG4gIC8vIFNlZGFuOlxyXG4gIC8vICAqIEltcGxlbWVudGVyYSBlZGl0IHZhcmlhbnRlcm5hLiBMw6RnZyB0aWxsLlxyXG4gIC8vICAqIEltcGxlbWVudGVyYSBzb3J0ZXJpbmcgZnVua3Rpb25hbGl0ZXQgaSBTb3J0YWJsZVRhc2tMaXN0LlxyXG4gIC8vICAqIEkgYWxsIHZ5ZXIgYXYgdGFza3MgKHN1YmplY3QgcGxhbm5lciArIGNvdXJzZXZpZXdlcik6IFxyXG4gIC8vICAgICogR8OlIGlnZW5vbSBhbGxhIHRhc2sgaSBkZW4gb3JkbmluZ2VuIGRvbSByZWRhbiDDpHIgaVxyXG4gIC8vICAgICogXHJcbiAgcmV0dXJuIDw+XHJcbiAgICB7T2JqZWN0LmtleXMoc3ViamVjdFRvVGFza3NMb29rdXApLm1hcChzdWJqZWN0ID0+IHtcclxuICAgICAgY29uc3QgdGFza0xpc3QgPSBzdWJqZWN0VG9UYXNrc0xvb2t1cFtzdWJqZWN0XTtcclxuICAgICAgY29uc3QgbGVhcm5pbmdNb2R1bGVUYXNrczogTGVhcm5pbmdNb2R1bGVUYXNrW10gPSB0YXNrTGlzdC5tYXAodGFzayA9PiAoe1xyXG4gICAgICAgIGlkOiB0YXNrLmlkLFxyXG4gICAgICAgIG5hbWU6IHRhc2submFtZSxcclxuICAgICAgICB1cmw6IGVkaXRNb2RlID9cclxuICAgICAgICAgIGAjLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlLmlkfS90YWJzLyR7Y291cnNlVGFiLmlkfS9jb250ZW50cy8ke2NvbnRlbnQuaWR9L3Rhc2tzLyR7dGFzay5pZH0vZHJhZnRzLyR7ZHJhZnRJZH0vZWRpdGAgOlxyXG4gICAgICAgICAgZHJhZnRJZCA/XHJcbiAgICAgICAgICAgIGAjLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlLmlkfS90YWJzLyR7Y291cnNlVGFiLmlkfS9jb250ZW50cy8ke2NvbnRlbnQuaWR9L3Rhc2tzLyR7dGFzay5pZH0vZHJhZnRzLyR7ZHJhZnRJZH1gIDpcclxuICAgICAgICAgICAgYCMvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2UuaWR9L3RhYnMvJHtjb3Vyc2VUYWIuaWR9L3Rhc2tzLyR7dGFzay5pZH1gLFxyXG4gICAgICAgIGNvdXJzZU5hbWU6IGNvdXJzZS5uYW1lLFxyXG4gICAgICAgIGxlYXJuaW5nR29hbDogc3ViamVjdCxcclxuICAgICAgICBzdGVwOiBjb3Vyc2VUYWIudHlwZSA9PT0gJ3N0ZXAtY291cnNlLXRhYicgPyAoY291cnNlVGFiIGFzIFN0ZXBDb3Vyc2VUYWIpLnN0ZXBObyA6IHVuZGVmaW5lZCxcclxuICAgICAgICB0YXNrLFxyXG4gICAgICAgIGNvdXJzZUluZm86IHtcclxuICAgICAgICAgIHNjaG9vbCxcclxuICAgICAgICAgIGNvdXJzZTogY291cnNlLmlkLFxyXG4gICAgICAgICAgdGFiOiBjb3Vyc2VUYWIuaWRcclxuICAgICAgICB9XHJcbiAgICAgIH0pKTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGxpbmtUb1Rhc2sgKHRhc2s6IFRhc2spIHtcclxuICAgICAgICByZXR1cm4gYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZS5pZH0vdGFicy8ke2NvdXJzZVRhYi5pZH0vY29udGVudHMvJHtjb250ZW50LmlkfS90YXNrcy8ke3Rhc2suaWR9L2RyYWZ0cy8ke2RyYWZ0SWR9L2VkaXRgO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYga2V5PXtzdWJqZWN0fT5cclxuICAgICAgICAgIDxoNT57c3ViamVjdH08L2g1PlxyXG4gICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICB7bGVhcm5pbmdHb2Fscy5tYXAobGcgPT4gPGxpIGtleT17bGd9PntsZ308L2xpPil9XHJcbiAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgeyFlZGl0TW9kZSA/XHJcbiAgICAgICAgICAgIDxUYXNrTGlzdCBsZWFybmluZ1Rhc2tzPXtsZWFybmluZ01vZHVsZVRhc2tzfSAvPiA6IDw+XHJcbiAgICAgICAgICAgICAgPFNvcnRhYmxlVGFza0xpc3RcclxuICAgICAgICAgICAgICAgIHRhc2tNZXRhcz17bGVhcm5pbmdNb2R1bGVUYXNrcy5tYXAoKHt0YXNrfSkgPT4gKHt0YXNrLCBpc1Rhc2tPd25lcjogdHJ1ZX0pKX1cclxuICAgICAgICAgICAgICAgIHJlbmRlckVkaXRMaW5rPXsoe3Rhc2t9KSA9PiA8PjxMaW5rIHRvPXtsaW5rVG9UYXNrKHRhc2spfSBjbGFzc05hbWU9XCJlZGl0SXRlbVwiLz4mbmJzcDs8Lz59XHJcbiAgICAgICAgICAgICAgICByZW5kZXJMaW5rPXsoe3Rhc2t9KSA9PiA8TGluayB0bz17bGlua1RvVGFzayh0YXNrKX0+e3Rhc2submFtZX08L0xpbms+IH1cclxuICAgICAgICAgICAgICAgIG9uU29ydD17KHNvdXJjZSwgdGFyZ2V0LCBwbGFjZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZE9yZGVyID0gY29tcHV0ZVVwZGF0ZWRPcmRlciAoXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudC50YXNrcyxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LnRhc2tPcmRlcixcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICB7YXBwZW5kTGVmdG92ZXJzOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgIHJlcG8uY291cnNlQ29udGVudHMudXBkYXRlPExlYXJuaW5nR29hbHNDb250ZW50Pihjb250ZW50LCB7dGFza09yZGVyOiB1cGRhdGVkT3JkZXJ9KTsgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH19IC8+XHJcbiAgICAgICAgICAgICAgPEFkZFRhc2tCdXR0b25cclxuICAgICAgICAgICAgICAgIGJyYW5jaD17cmVwb31cclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ9e2NvbnRlbnR9XHJcbiAgICAgICAgICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cclxuICAgICAgICAgICAgICAgIHNjaG9vbD17c2Nob29sfVxyXG4gICAgICAgICAgICAgICAgZHJhZnRJZD17ZHJhZnRJZH1cclxuICAgICAgICAgICAgICAgIHRhYj17Y291cnNlVGFifVxyXG4gICAgICAgICAgICAgICAgYmxvY2s9e2Jsb2NrfVxyXG4gICAgICAgICAgICAgICAgbGVhcm5pbmdHb2FsPXtzdWJqZWN0fSAvPlxyXG5cclxuICAgICAgICAgICAgPC8+fVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApO1xyXG4gICAgfSl9PC8+O1xyXG59XHJcblxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbywgV2l0aEdyYXBocywgU3RyaXBHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBMZWFybmluZ0dvYWxzQ29udGVudCwgQ291cnNlSW5zdGFuY2UsIENvdXJzZUJsb2NrLCBDb3Vyc2VUYWIsIFN0ZXBDb3Vyc2VUYWIsIFRoZW1lQ291cnNlVGFiLCBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBMLCBhcnJheVRvTG9va3VwIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBUYXNrTGlzdCwgTGVhcm5pbmdNb2R1bGVUYXNrIH0gZnJvbSAnLi4vLi4vLi4vY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL3Rhc2stbGlzdCc7XHJcbmltcG9ydCB7IEFkZFRhc2tCdXR0b24gfSBmcm9tICcuL2FkZC10YXNrLWJ1dHRvbic7XHJcbmltcG9ydCB7IFNvcnRhYmxlVGFza0xpc3QgfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvc29ydGFibGUtdGFzay1saXN0JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBjb21wdXRlVXBkYXRlZE9yZGVyLCBnZXRTb3J0ZWRUYXNrcyB9IGZyb20gJy4uLy4uL2xvZ2ljL3Rhc2stb3JkZXInO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzY2hvb2w6IHN0cmluZztcclxuICByZXBvOiBLZWRCYWNrZW5kUmVwbztcclxuICBjb3Vyc2U6IFN0cmlwR3JhcGhzPENvdXJzZUluc3RhbmNlPjtcclxuICBjb3Vyc2VUYWI6IFN0cmlwR3JhcGhzPENvdXJzZVRhYj47XHJcbiAgY29udGVudDogV2l0aEdyYXBoczxMZWFybmluZ0dvYWxzQ29udGVudCwgXCJ0YXNrc1wiPjtcclxuICBkcmFmdElkOiBzdHJpbmc7XHJcbiAgZWRpdE1vZGU6IGJvb2xlYW47XHJcbiAgbGVhcm5pbmdHb2Fsczogc3RyaW5nW107XHJcbiAgYmxvY2s/OiBDb3Vyc2VCbG9jaztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IExlYXJuaW5nVGFza3NXaXRoU2VwYXJhdGVHb2FscyA9ICh7IHNjaG9vbCwgcmVwbywgY29udGVudCwgZHJhZnRJZCwgZWRpdE1vZGUsIGNvdXJzZSwgY291cnNlVGFiLCBsZWFybmluZ0dvYWxzLCBibG9jayB9OiBQcm9wcykgPT4ge1xyXG4gIGNvbnN0IHRhc2tzID0gZ2V0U29ydGVkVGFza3MoY29udGVudCk7XHJcbiAgY29uc3QgY2F0aGVnb3JpemVkVGFza3M6IHsgW2lkOiBzdHJpbmddOiB0cnVlIH0gPSB7fTtcclxuICBjb25zdCBnb2FsVG9UYXNrc0xvb2t1cCA9IGxlYXJuaW5nR29hbHMucmVkdWNlKChyZXMsIGdvYWwpID0+IHtcclxuICAgIHJlc1tnb2FsXSA9IHRhc2tzLmZpbHRlcih0YXNrID0+IHtcclxuICAgICAgaWYgKHRhc2subGVhcm5pbmdHb2FsICYmIHRhc2subGVhcm5pbmdHb2FsLnNwbGl0KCdcXG4nKVxyXG4gICAgICAgIC5tYXAobGluZSA9PiBsaW5lLnRyaW0oKS50b0xvd2VyQ2FzZSgpKVxyXG4gICAgICAgIC5pbmNsdWRlcyhnb2FsLnRvTG93ZXJDYXNlKCkpKSB7XHJcbiAgICAgICAgY2F0aGVnb3JpemVkVGFza3NbdGFzay5pZF0gPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXM7XHJcbiAgfSwge30gYXMgeyBbbGc6IHN0cmluZ106IFRhc2tbXSB9KTtcclxuXHJcbiAgY29uc3QgdW5jYXRoZWdvcml6ZWRUYXNrcyA9IHRhc2tzLmZpbHRlcih0ID0+ICFjYXRoZWdvcml6ZWRUYXNrc1t0LmlkXSk7XHJcbiAgaWYgKGNvdXJzZVRhYi50YWJDbGFzcyA9PT0gJ21pc3Npb24tdGFiJyB8fCB0YXNrcy5sZW5ndGggPT09IDApIHtcclxuICAgIGdvYWxUb1Rhc2tzTG9va3VwWycnXSA9IHVuY2F0aGVnb3JpemVkVGFza3M7XHJcbiAgfSBlbHNlIGlmICh1bmNhdGhlZ29yaXplZFRhc2tzLmxlbmd0aCA+IDApIHtcclxuICAgIGdvYWxUb1Rhc2tzTG9va3VwW0xgw5Z2ZXJncmlwYW5kZWBdID0gdW5jYXRoZWdvcml6ZWRUYXNrcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGxpbmtUb1Rhc2sodGFzazogVGFzaykge1xyXG4gICAgcmV0dXJuIGAvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2UuaWR9L3RhYnMvJHtjb3Vyc2VUYWIuaWR9L2NvbnRlbnRzLyR7Y29udGVudC5pZH0vdGFza3MvJHt0YXNrLmlkfS9kcmFmdHMvJHtkcmFmdElkfS9lZGl0YDtcclxuICB9XHJcblxyXG4gIHJldHVybiA8PlxyXG4gICAge09iamVjdC5rZXlzKGdvYWxUb1Rhc2tzTG9va3VwKS5tYXAoZ29hbCA9PiB7XHJcbiAgICAgIGNvbnN0IHRhc2tMaXN0ID0gZ29hbFRvVGFza3NMb29rdXBbZ29hbF07XHJcbiAgICAgIGNvbnN0IGxlYXJuaW5nTW9kdWxlVGFza3M6IExlYXJuaW5nTW9kdWxlVGFza1tdID0gdGFza0xpc3QubWFwKHRhc2sgPT4gKHtcclxuICAgICAgICBpZDogdGFzay5pZCxcclxuICAgICAgICBuYW1lOiB0YXNrLm5hbWUsXHJcbiAgICAgICAgdXJsOiBlZGl0TW9kZSA/XHJcbiAgICAgICAgICBgIy8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZS5pZH0vdGFicy8ke2NvdXJzZVRhYi5pZH0vY29udGVudHMvJHtjb250ZW50LmlkfS90YXNrcy8ke3Rhc2suaWR9L2RyYWZ0cy8ke2RyYWZ0SWR9L2VkaXRgIDpcclxuICAgICAgICAgIGRyYWZ0SWQgP1xyXG4gICAgICAgICAgICBgIy8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZS5pZH0vdGFicy8ke2NvdXJzZVRhYi5pZH0vY29udGVudHMvJHtjb250ZW50LmlkfS90YXNrcy8ke3Rhc2suaWR9L2RyYWZ0cy8ke2RyYWZ0SWR9YCA6XHJcbiAgICAgICAgICAgIGAjLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlLmlkfS90YWJzLyR7Y291cnNlVGFiLmlkfS90YXNrcy8ke3Rhc2suaWR9YCxcclxuICAgICAgICBjb3Vyc2VOYW1lOiBjb3Vyc2UubmFtZSxcclxuICAgICAgICBsZWFybmluZ0dvYWw6IGNvdXJzZVRhYi50YWJDbGFzcyA9PT0gJ21pc3Npb24tdGFiJyA/IExgVXBwZHJhZ2AgOiBnb2FsLFxyXG4gICAgICAgIHN0ZXA6IGNvdXJzZVRhYi50eXBlID09PSAnc3RlcC1jb3Vyc2UtdGFiJyA/IChjb3Vyc2VUYWIgYXMgU3RlcENvdXJzZVRhYikuc3RlcE5vIDogdW5kZWZpbmVkLFxyXG4gICAgICAgIHRhc2ssXHJcbiAgICAgICAgY291cnNlSW5mbzoge1xyXG4gICAgICAgICAgc2Nob29sLFxyXG4gICAgICAgICAgY291cnNlOiBjb3Vyc2UuaWQsXHJcbiAgICAgICAgICB0YWI6IGNvdXJzZVRhYi5pZFxyXG4gICAgICAgIH1cclxuICAgICAgfSkpO1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYga2V5PXtnb2FsfT5cclxuICAgICAgICAgIHtnb2FsICYmIDxoND57Z29hbH08L2g0Pn1cclxuICAgICAgICAgIHshZWRpdE1vZGUgP1xyXG4gICAgICAgICAgICA8VGFza0xpc3QgbGVhcm5pbmdUYXNrcz17bGVhcm5pbmdNb2R1bGVUYXNrc30gLz4gOlxyXG4gICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgIDxTb3J0YWJsZVRhc2tMaXN0XHJcbiAgICAgICAgICAgICAgICB0YXNrTWV0YXM9e2xlYXJuaW5nTW9kdWxlVGFza3MubWFwKCh7IHRhc2sgfSkgPT4gKHsgdGFzaywgaXNUYXNrT3duZXI6IHRydWUgfSkpfVxyXG4gICAgICAgICAgICAgICAgcmVuZGVyRWRpdExpbms9eyh7IHRhc2sgfSkgPT4gPD48TGluayB0bz17bGlua1RvVGFzayh0YXNrKX0gY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIiAvPiZuYnNwOzwvPn1cclxuICAgICAgICAgICAgICAgIHJlbmRlckxpbms9eyh7IHRhc2sgfSkgPT4gPExpbmsgdG89e2xpbmtUb1Rhc2sodGFzayl9Pnt0YXNrLm5hbWV9PC9MaW5rPn1cclxuICAgICAgICAgICAgICAgIG9uU29ydD17KHNvdXJjZSwgdGFyZ2V0LCBwbGFjZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZE9yZGVyID0gY29tcHV0ZVVwZGF0ZWRPcmRlcihcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LnRhc2tzLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQudGFza09yZGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSxcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHsgYXBwZW5kTGVmdG92ZXJzOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZUNvbnRlbnRzLnVwZGF0ZTxMZWFybmluZ0dvYWxzQ29udGVudD4oY29udGVudCwgeyB0YXNrT3JkZXI6IHVwZGF0ZWRPcmRlciB9KTtcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8QWRkVGFza0J1dHRvblxyXG4gICAgICAgICAgICAgICAgYnJhbmNoPXtyZXBvfVxyXG4gICAgICAgICAgICAgICAgY29udGVudD17Y29udGVudH1cclxuICAgICAgICAgICAgICAgIGNvdXJzZT17Y291cnNlfVxyXG4gICAgICAgICAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgICAgICAgICBkcmFmdElkPXtkcmFmdElkfVxyXG4gICAgICAgICAgICAgICAgdGFiPXtjb3Vyc2VUYWJ9XHJcbiAgICAgICAgICAgICAgICBibG9jaz17YmxvY2t9XHJcbiAgICAgICAgICAgICAgICBsZWFybmluZ0dvYWw9e2dvYWx9IC8+XHJcbiAgICAgICAgICAgIDwvPlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICApO1xyXG4gICAgfSl9PC8+O1xyXG59XHJcblxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbywgV2l0aEdyYXBocywgU3RyaXBHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBMZWFybmluZ0dvYWxzQ29udGVudCwgQ291cnNlSW5zdGFuY2UsIENvdXJzZVRhYiwgVGhlbWVDb3Vyc2VJbnN0YW5jZSwgQ291cnNlQmxvY2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IExlYXJuaW5nVGFza3NTZXR0aW5ncyB9IGZyb20gJy4vbGVhcm5pbmctdGFza3Mtc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuaW1wb3J0IHsgTGVhcm5pbmdUYXNrc1dpdGhDb21tb25Hb2FscyB9IGZyb20gJy4vbGVhcm5pbmctdGFza3Mtd2l0aC1jb21tb24tZ29hbHMnO1xyXG5pbXBvcnQgeyBMZWFybmluZ1Rhc2tzV2l0aFNlcGFyYXRlR29hbHMgfSBmcm9tICcuL2xlYXJuaW5nLXRhc2tzLXdpdGgtc2VwYXJhdGUtZ29hbHMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICByZXBvOiBLZWRCYWNrZW5kUmVwbztcclxuICBjb3Vyc2U6IFN0cmlwR3JhcGhzPENvdXJzZUluc3RhbmNlPjtcclxuICBjb250ZW50OiBXaXRoR3JhcGhzPExlYXJuaW5nR29hbHNDb250ZW50LCBcInRhc2tzXCI+O1xyXG4gIGVkaXRNb2RlOiBib29sZWFuO1xyXG4gIHNjaG9vbDogc3RyaW5nO1xyXG4gIGRyYWZ0SWQ6IHN0cmluZztcclxuICBjb3Vyc2VUYWI6IFN0cmlwR3JhcGhzPENvdXJzZVRhYj47XHJcbiAgYmxvY2s/OiBDb3Vyc2VCbG9jaztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBMZWFybmluZ1Rhc2tzQ29udGVudEJveCA9ICh7Y29udGVudCwgZWRpdE1vZGUsIHJlcG8sIGNvdXJzZSwgc2Nob29sLCBkcmFmdElkLCBjb3Vyc2VUYWIsIGJsb2NrfTogUHJvcHMpID0+IHtcclxuICBjb25zdCB7IGhhc0NvbW1vbkxlYXJuaW5nR29hbHMsIGNvbW1vbkxlYXJuaW5nR29hbHMsIHRhc2tzIH0gPSBjb250ZW50O1xyXG4gIGNvbnN0IHJlZmluZWRMZWFybmluZ0dvYWxzID0gY29tbW9uTGVhcm5pbmdHb2Fsc1xyXG4gICAgLm1hcChnb2FsID0+IGdvYWwudHJpbSgpKS5maWx0ZXIoZ29hbCA9PiAhIWdvYWwpO1xyXG4gIFxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxyXG4gICAge2VkaXRNb2RlICYmICghY29udGVudC5sb2NrZWQgfHwgaXNLZWRTdGFmZigpKSA/XHJcbiAgICAgIDxMZWFybmluZ1Rhc2tzU2V0dGluZ3MgY291cnNlPXtjb3Vyc2V9IGNvbnRlbnQ9e2NvbnRlbnR9IHJlcG89e3JlcG99IHRhYj17Y291cnNlVGFifSAvPjpcclxuICAgICAgY291cnNlVGFiLnRhYkNsYXNzICE9PSAnbWlzc2lvbi10YWInID9cclxuICAgICAgICA8aDI+e0xgTMOkcmFuZGVtw6VsIG9jaCB1cHBnaWZ0ZXJgfTwvaDI+IDpcclxuICAgICAgICA8aDI+e0xgVXBwZHJhZ2B9PC9oMj5cclxuICAgICAgfVxyXG4gICAgPGhyIC8+XHJcbiAgICB7aGFzQ29tbW9uTGVhcm5pbmdHb2FscyAmJiBjb3Vyc2VUYWIudGFiQ2xhc3MgIT09ICdtaXNzaW9uLXRhYicgP1xyXG4gICAgICA8TGVhcm5pbmdUYXNrc1dpdGhDb21tb25Hb2FscyB7Li4ue2NvbnRlbnQsIGVkaXRNb2RlLCByZXBvLCBjb3Vyc2UsIHNjaG9vbCwgZHJhZnRJZCwgY291cnNlVGFiLCBibG9jaywgbGVhcm5pbmdHb2FsczogcmVmaW5lZExlYXJuaW5nR29hbHN9fSAvPiA6XHJcbiAgICAgIDxMZWFybmluZ1Rhc2tzV2l0aFNlcGFyYXRlR29hbHMgey4uLntjb250ZW50LCBlZGl0TW9kZSwgcmVwbywgY291cnNlLCBzY2hvb2wsIGRyYWZ0SWQsIGNvdXJzZVRhYiwgYmxvY2ssIGxlYXJuaW5nR29hbHM6IHJlZmluZWRMZWFybmluZ0dvYWxzfX0gLz5cclxuICAgIH1cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRW1iZWRkZWRIVE1MQ29udGVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8gfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgcmVwbzogS2VkQmFja2VuZFJlcG87XHJcbiAgY29udGVudDogRW1iZWRkZWRIVE1MQ29udGVudDtcclxuICBlZGl0TW9kZTogYm9vbGVhbjtcclxuICBtYXhDaGFycz86IG51bWJlcjtcclxuICByZXBvcnROdW1DaGFycz86IChudW1DaGFyczogbnVtYmVyKSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRW1iZWRkZWRIVE1MQ29udGVudEJveCA9ICh7Y29udGVudCwgcmVwbywgZWRpdE1vZGUsIHJlcG9ydE51bUNoYXJzLCBtYXhDaGFyc306IFByb3BzKSA9PlxyXG4gIGVkaXRNb2RlICYmICghY29udGVudC5sb2NrZWQgfHwgaXNLZWRTdGFmZigpKSA/XHJcbiAgICA8ZGl2PlxyXG4gICAgICA8aDQ+e0xgSW5iw6RkZGF0IG1hdGVyaWFsYH08L2g0PlxyXG4gICAgICA8cD57TGBLbGlwcCBpbiBIVE1MIGtvZCBuZWRhbmB9PC9wPlxyXG4gICAgICA8dGV4dGFyZWEgc3R5bGU9e3t3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCIxMDBweFwifX1cclxuICAgICAgICB2YWx1ZT17Y29udGVudC5odG1sfVxyXG4gICAgICAgIG9uQ2hhbmdlPXsoe3RhcmdldDoge3ZhbHVlOiBodG1sfX0pID0+XHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmIChodG1sLmxlbmd0aCA+IG1heENoYXJzKSByZXR1cm47XHJcbiAgICAgICAgICAgIHJlcG8uY291cnNlQ29udGVudHMudXBkYXRlPEVtYmVkZGVkSFRNTENvbnRlbnQ+KGNvbnRlbnQsIHtodG1sfSk7XHJcbiAgICAgICAgICAgIHJlcG9ydE51bUNoYXJzKGh0bWwubGVuZ3RoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IC8+XHJcbiAgICA8L2Rpdj4gOlxyXG4gICAgPGRpdiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogY29udGVudC5odG1sfX0gLz47XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNmZyB9IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcbmltcG9ydCB1c2VGZXRjaCBmcm9tICdmZXRjaC1zdXNwZW5zZSc7XHJcbmltcG9ydCB7IENoZWNrbGlzdCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9jaGVja2xpc3QnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgU2VsZWN0IGZyb20gJ3JlYWN0LXNlbGVjdCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHN1YmplY3ROYW1lOiBzdHJpbmdcclxuICBzdGVwTm86IG51bWJlclxyXG4gIHNlbGVjdGVkV29yZEJhbms/OiB7bmFtZTogc3RyaW5nLCBrZXk6IHN0cmluZ31cclxuICB3b3JkQmFua3NBbHJlYWR5QWRkZWQ/OiBzdHJpbmdbXVxyXG4gIG9uQ2hhbmdlOiAod29yZEJhbms6IHtuYW1lOiBzdHJpbmcsIGtleTogc3RyaW5nfSkgPT4gdm9pZFxyXG59XHJcblxyXG5pbnRlcmZhY2UgQXZhaWxhYmxlV29yZEJhbmsge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIG9yZGVyOiBzdHJpbmc7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBXb3JkQmFua0NvbnRlbnRTZXR0aW5ncyAoe3N1YmplY3ROYW1lLCBzdGVwTm8sIHNlbGVjdGVkV29yZEJhbmssIHdvcmRCYW5rc0FscmVhZHlBZGRlZCwgb25DaGFuZ2V9OiBQcm9wcykge1xyXG4gIGNvbnN0IGFwaVVybCA9IGAke2NmZy5LRURfRU5VTV9XT1JEQkFOS1NfVVJMfT9zdi5jb250ZW50dHlwZT1hcHBsaWNhdGlvbi9qc29uJnN1YmplY3Q9JHtzdWJqZWN0TmFtZX0mc3RlcD0ke3N0ZXBOb31gO1xyXG4gIGxldCBhdmFpbGFibGVXb3JkQmFua3MgPSB1c2VGZXRjaChhcGlVcmwpIGFzIEF2YWlsYWJsZVdvcmRCYW5rW107XHJcblxyXG4gIC8vIEZpbHRlciBvdXQgd29yZCBiYW5rcyB0aGF0IHdhcyBhbHJlYWR5IGFkZGVkIHRvIHRoZSBzYW1lIHRhYlxyXG4gIGF2YWlsYWJsZVdvcmRCYW5rcyA9IGF2YWlsYWJsZVdvcmRCYW5rcy5maWx0ZXIoKHtvcmRlcn0pID0+XHJcbiAgICAoc2VsZWN0ZWRXb3JkQmFuayAmJiBvcmRlciA9PT0gc2VsZWN0ZWRXb3JkQmFuay5rZXkpIHx8XHJcbiAgICAhd29yZEJhbmtzQWxyZWFkeUFkZGVkIHx8XHJcbiAgICAhd29yZEJhbmtzQWxyZWFkeUFkZGVkLmluY2x1ZGVzKG9yZGVyKSk7XHJcbiAgXHJcbiAgcmV0dXJuIDxkaXY+XHJcbiAgICA8aDM+e3NlbGVjdGVkV29yZEJhbmsgPyBzZWxlY3RlZFdvcmRCYW5rLm5hbWUgOiBMYFbDpGxqIG9yZGJhbmtgfTwvaDM+XHJcbiAgICA8U2VsZWN0XHJcbiAgICAgIGlzTXVsdGk9e2ZhbHNlfVxyXG4gICAgICBwbGFjZWhvbGRlcj17TGBWw6RsaiBibGFuZCBvcmRiYW5rZXIgZsO2ciAke3N1YmplY3ROYW1lfSwgc3RlZyAke3N0ZXBOb31gfVxyXG4gICAgICBub09wdGlvbnNNZXNzYWdlPXsoKT0+TGBLdW5kZSBpbnRlIGhpdHRhIHRpbGxnw6RuZ2xpZ2Egb3JkYmFua2VyIGbDtnIgJHtzdWJqZWN0TmFtZX0sIHN0ZWcgJHtzdGVwTm99YH1cclxuICAgICAgb3B0aW9ucz17YXZhaWxhYmxlV29yZEJhbmtzLm1hcCgoe25hbWUsIGlkLCBvcmRlciwgdXJsfSkgPT4gKHtsYWJlbDogbmFtZSwgdmFsdWU6IG9yZGVyfSkpfVxyXG4gICAgICB2YWx1ZT17c2VsZWN0ZWRXb3JkQmFuayAmJiB7bGFiZWw6IHNlbGVjdGVkV29yZEJhbmsubmFtZSwgdmFsdWU6IHNlbGVjdGVkV29yZEJhbmsua2V5fX1cclxuICAgICAgb25DaGFuZ2U9eyhvcHRpb246IHtsYWJlbDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nfSkgPT4gb25DaGFuZ2Uoe25hbWU6IG9wdGlvbi5sYWJlbCwga2V5OiBvcHRpb24udmFsdWV9KX0gLz5cclxuICA8L2Rpdj47XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8sIFdpdGhHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBXb3JkQmFua0NvbnRlbnQsIFN0ZXBDb3Vyc2VJbnN0YW5jZSwgU3RlcENvdXJzZVRhYiB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgY2ZnIH0gZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IHsgV29yZEJhbmtDb250ZW50U2V0dGluZ3MgfSBmcm9tICcuL3dvcmQtYmFuay1jb250ZW50LXNldHRpbmdzJztcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xyXG5pbXBvcnQgeyBFbGxpcHNpc0xvYWRlciB9IGZyb20gJy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2VsbGlwc2lzLWxvYWRlcic7XHJcbmltcG9ydCB7IGlzS2VkU3RhZmYgfSBmcm9tICcuLi8uLi9sb2dpYy9pcy1rZWQtc3RhZmYnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICByZXBvOiBLZWRCYWNrZW5kUmVwb1xyXG4gIGNvbnRlbnQ6IFdvcmRCYW5rQ29udGVudFxyXG4gIHNpYmxpbmdXb3JkQmFua3M6IFdvcmRCYW5rQ29udGVudFtdXHJcbiAgZWRpdE1vZGU6IGJvb2xlYW5cclxuICBjb3Vyc2U6IFN0ZXBDb3Vyc2VJbnN0YW5jZVxyXG4gIGNvdXJzZVRhYjogU3RlcENvdXJzZVRhYlxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gV29yZEJhbmtDb250ZW50Qm94KHtyZXBvLCBjb250ZW50LCBzaWJsaW5nV29yZEJhbmtzLCBlZGl0TW9kZSwgY291cnNlLCBjb3Vyc2VUYWJ9OiBQcm9wcykge1xyXG4gIGNvbnN0IHtzZWxlY3RlZFdvcmRCYW5rfSA9IGNvbnRlbnQ7XHJcbiAgY29uc3Qge3N1YmplY3ROYW1lfSA9IGNvdXJzZS5zdWJqZWN0O1xyXG4gIGNvbnN0IHtzdGVwTm99ID0gY291cnNlVGFiO1xyXG4gIGNvbnN0IGlmcmFtZVNyYyA9IHNlbGVjdGVkV29yZEJhbmsgJiYgYCR7Y2ZnLktFRF9XT1JEQkFOS1NfVVJMfT9wcmV2aWV3PXRydWUmc3ViamVjdD0ke3N1YmplY3ROYW1lfSZzdGVwPSR7c3RlcE5vfSZsaXN0PSR7c2VsZWN0ZWRXb3JkQmFuay5rZXl9YDtcclxuICBjb25zdCBbaWZyYW1lSGVpZ2h0LCBzZXRJZnJhbWVIZWlnaHRdID0gdXNlU3RhdGUoMjAwKTtcclxuICBjb25zdCBpZnJhbWVSZWYgPSB1c2VSZWY8SFRNTElGcmFtZUVsZW1lbnQ+KCk7XHJcbiAgY29uc3Qgd29yZEJhbmtzQWxyZWFkeUFkZGVkID0gc2libGluZ1dvcmRCYW5rcy5tYXAoYyA9PiBjLnNlbGVjdGVkV29yZEJhbmsgJiYgYy5zZWxlY3RlZFdvcmRCYW5rLmtleSlcclxuICAgIC5maWx0ZXIoa2V5ID0+ICEha2V5KTtcclxuXHJcbiAgdXNlRWZmZWN0KCgpPT5zZXRJZnJhbWVIZWlnaHQoMjAwKSwgW3NlbGVjdGVkV29yZEJhbmsgJiYgc2VsZWN0ZWRXb3JkQmFuay5rZXldKTsvLyBSZXNldCBpZnJhbWUgaGVpZ2h0IHdoZW5ldmVyIHNlbGVjdGVkIHdvcmQgYmFuayBjaGFuZ2VzIGFuZCBsZXQgb25sb2FkIGZpeCBpdC5cclxuICAgIFxyXG4gIHJldHVybiA8PlxyXG4gICAge2VkaXRNb2RlICYmICghY29udGVudC5sb2NrZWQgfHwgaXNLZWRTdGFmZigpKSAmJiA8UmVhY3QuU3VzcGVuc2UgZmFsbGJhY2s9ezxFbGxpcHNpc0xvYWRlci8+fT5cclxuICAgICAgPFdvcmRCYW5rQ29udGVudFNldHRpbmdzIHsuLi57c3ViamVjdE5hbWUsIHN0ZXBObywgd29yZEJhbmtzQWxyZWFkeUFkZGVkIH19XHJcbiAgICAgICAgc2VsZWN0ZWRXb3JkQmFuaz17c2VsZWN0ZWRXb3JkQmFua31cclxuICAgICAgICBvbkNoYW5nZT17KHtuYW1lLCBrZXl9KSA9PiB7XHJcbiAgICAgICAgICByZXBvLmNvdXJzZUNvbnRlbnRzLnVwZGF0ZTxXb3JkQmFua0NvbnRlbnQ+KGNvbnRlbnQsIHtzZWxlY3RlZFdvcmRCYW5rOiB7bmFtZSwga2V5fX0pO1xyXG4gICAgICAgIH19XHJcbiAgICAgIC8+XHJcbiAgICA8L1JlYWN0LlN1c3BlbnNlPn1cclxuICAgIHtzZWxlY3RlZFdvcmRCYW5rICYmIFxyXG4gICAgICA8aWZyYW1lXHJcbiAgICAgICAgcmVmPXtpZnJhbWVSZWZ9XHJcbiAgICAgICAgc2Nyb2xsaW5nPVwibm9cIlxyXG4gICAgICAgIGZyYW1lQm9yZGVyPVwiMFwiXHJcbiAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcclxuICAgICAgICAgIGhlaWdodDogaWZyYW1lSGVpZ2h0LFxyXG4gICAgICAgICAgcGFkZGluZzogMCxcclxuICAgICAgICAgIG1hcmdpbjogMFxyXG4gICAgICAgIH19XHJcbiAgICAgICAgc3JjPXtpZnJhbWVTcmN9XHJcbiAgICAgICAgb25Mb2FkPXsoKT0+e1xyXG4gICAgICAgICAgc2V0SWZyYW1lSGVpZ2h0KGlmcmFtZVJlZi5jdXJyZW50LmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpO1xyXG4gICAgICAgIH19IC8+XHJcbiAgICB9XHJcbiAgPC8+O1xyXG59XHJcblxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5leHBvcnQgY29uc3QgRGlhbG9nc0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtvcGVuRGlhbG9nOiBudWxsLCBjbG9zZURpYWxvZzogbnVsbH0pOyIsImltcG9ydCBSZWFjdCwgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8gfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBSZXNvdXJjZUxpc3QgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IERpYWxvZ3NDb250ZXh0IH0gZnJvbSAnLi4vLi4vY29tbW9uL2RpYWxvZy1jb250ZXh0JztcclxuaW1wb3J0IHsgRWRpdFJlc291cmNlIH0gZnJvbSAnLi4vLi4vLi4vY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC1yZXNvdXJjZSc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gICAgcmVwbzogS2VkQmFja2VuZFJlcG87XHJcbiAgICBjb250ZW50OiBSZXNvdXJjZUxpc3Q7XHJcbiAgICBlZGl0TW9kZTogYm9vbGVhbjtcclxuICB9XHJcblxyXG5leHBvcnQgY29uc3QgUmVzb3VyY2VMaXN0Q29udGVudEJveCA9ICh7IGNvbnRlbnQsIGVkaXRNb2RlLCByZXBvIH06IFByb3BzKSA9PiB7XHJcbiAgICBjb25zdCB7IHJlc291cmNlcyB9ID0gY29udGVudDtcclxuICAgIGxldCBjb250ZXh0ID0gdXNlQ29udGV4dChEaWFsb2dzQ29udGV4dCk7XHJcbiAgICByZXR1cm4gZWRpdE1vZGUgJiYgKCFjb250ZW50LmxvY2tlZCB8fCBpc0tlZFN0YWZmKCkpID9cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIj5cclxuICAgICAgICAgICAgICAgIDxoND57TGBSZXN1cnNlcmB9PC9oND5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc291cmNlcy5tYXAoKHJlc291cmNlLCBpZHgpID0+IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIiBrZXk9e2lkeH0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgb25DbGljaz17KCk9PiBjb250ZXh0Lm9wZW5EaWFsb2coPEVkaXRSZXNvdXJjZSB0aXRsZT1cIkVkaXQgcmVzb3VyY2VcIiByZXNvdXJjZT17cmVzb3VyY2V9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNhdmU9eyhyZXMpPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXNbaWR4XSA9IHJlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwby5jb3Vyc2VDb250ZW50cy51cGRhdGU8UmVzb3VyY2VMaXN0Pihjb250ZW50LCB7cmVzb3VyY2VzOiBbLi4ucmVzb3VyY2VzXX0pOyBjb250ZXh0LmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25EZWxldGU9eygpPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcG8uY291cnNlQ29udGVudHMudXBkYXRlPFJlc291cmNlTGlzdD4oY29udGVudCwge3Jlc291cmNlczogWy4uLnJlc291cmNlc10gfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZURpYWxvZygpO31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4pfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID48L2E+Jm5ic3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtyZXNvdXJjZS51cmx9PntyZXNvdXJjZS5uYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+ICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gXHJcbiAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrID0geygpPT4gY29udGV4dC5vcGVuRGlhbG9nKDxFZGl0UmVzb3VyY2UgdGl0bGU9XCJSZXN1cnNcIiBvblNhdmU9eyhyZXNvdXJjZSkgPT4ge3JlcG8uY291cnNlQ29udGVudHMudXBkYXRlPFJlc291cmNlTGlzdD4oY29udGVudCwge3Jlc291cmNlczogWy4uLnJlc291cmNlcywgcmVzb3VyY2VdfSk7IGNvbnRleHQuY2xvc2VEaWFsb2coKTt9fS8+KX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtcGx1c1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIC8+e0xgTMOkZ2cgdGlsbCByZXN1cnNgfTwvYT5cclxuICAgICAgICAgICAgICAgIDwvZGl2PiA6IDxkaXY+PC9kaXY+ICAgICBcclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvdXJzZUNvbnRlbnQsIFJlc291cmNlTGlzdCwgQ291cnNlSW5zdGFuY2UsIFJpY2hUZXh0Q29udGVudCwgTGVhcm5pbmdHb2Fsc0NvbnRlbnQsIENvdXJzZVRhYiwgQ291cnNlQmxvY2ssIEVtYmVkZGVkSFRNTENvbnRlbnQsIFdvcmRCYW5rQ29udGVudCwgU3RlcENvdXJzZUluc3RhbmNlLCBTdGVwQ291cnNlVGFiIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbywgU3RyaXBHcmFwaHMsIFdpdGhHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBSaWNoVGV4dENvbnRlbnRCb3ggfSBmcm9tICcuL3JpY2gtdGV4dCc7XHJcbmltcG9ydCB7IExlYXJuaW5nVGFza3NDb250ZW50Qm94IH0gZnJvbSAnLi9sZWFybmluZy10YXNrcy1jb250ZW50LWJveCc7XHJcbmltcG9ydCB7IEVtYmVkZGVkSFRNTENvbnRlbnRCb3ggfSBmcm9tICcuL2VtYmVkZGVkLWh0bWwnO1xyXG5pbXBvcnQgeyBXb3JkQmFua0NvbnRlbnRCb3ggfSBmcm9tICcuL3dvcmQtYmFuay1jb250ZW50LWJveCc7XHJcbmltcG9ydCB7IFJlc291cmNlTGlzdENvbnRlbnRCb3ggfSBmcm9tICcuL3Jlc291cmNlLWxpc3QnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDb3Vyc2VDb250ZW50UHJvcHMge1xyXG4gIHJlcG86IEtlZEJhY2tlbmRSZXBvO1xyXG4gIGNvdXJzZTogU3RyaXBHcmFwaHM8Q291cnNlSW5zdGFuY2U+O1xyXG4gIGNvbnRlbnQ6IFdpdGhHcmFwaHM8Q291cnNlQ29udGVudCwgXCJ0YXNrc1wiPjtcclxuICBzaWJsaW5nQ29udGVudHM6IFdpdGhHcmFwaHM8Q291cnNlQ29udGVudCwgXCJ0YXNrc1wiPltdOyAvLyBTaWJsaW5nIGNvbnRlbnRzIGluY2x1ZGluZyBzZWxmXHJcbiAgZWRpdE1vZGU6IGJvb2xlYW47XHJcbiAgc2Nob29sOiBzdHJpbmc7XHJcbiAgY291cnNlVGFiOiBTdHJpcEdyYXBoczxDb3Vyc2VUYWI+O1xyXG4gIGRyYWZ0SWQ6IHN0cmluZztcclxuICByZXBvcnROdW1DaGFycz86IChudW1DaGFyczogbnVtYmVyKSA9PiB2b2lkO1xyXG4gIG1heENoYXJzPzogbnVtYmVyO1xyXG4gIGJsb2NrPzogQ291cnNlQmxvY2s7XHJcbn1cclxuXHJcbi8qZXhwb3J0IGNvbnN0IENvbnRlbnRCb3ggPSAoe3JlcG8sIGNvbnRlbnR9OiBDb3Vyc2VDb250ZW50UHJvcHMpPT4gKFxyXG4gIDxkaXYgY2xhc3NOYW1lPXtbXCJjb3Vyc2UtY29udGVudC1ib3hcIiwgXCJrZWRfYm94ZWRcIl0uam9pbignICcpfSBzdHlsZT17e3Bvc2l0aW9uOiAncmVsYXRpdmUnfX0+XHJcbiAgICA8Q29uY3JldGVDb21wb25lbnQgey4uLntyZXBvLCBjb250ZW50fX0gLz4gICAgXHJcbiAgICA8ZGl2IHN0eWxlPXt7cG9zaXRpb246ICdhYnNvbHV0ZScsIHRvcDogMCwgcmlnaHQ6IDB9fT5cclxuICAgICAgICB7bW9kdWxlT3JkZXJlZEluZGV4ID4gMCAmJiA8c3Bhbj5cclxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFycm93LWNpcmNsZS11cCBzZWxlY3RhYmxlXCJcclxuICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcclxuICAgICAgICAgICAgb25DbGljaz17KCk9PnRoaXMucHJvcHMub25SZW9yZGVyKC0xKX0gLz4gPC9zcGFuPn1cclxuICAgICAgICB7bW9kdWxlT3JkZXJlZEluZGV4IDwgY291cnNlLm1vZHVsZXMubGVuZ3RoIC0gMSAmJiA8c3Bhbj5cclxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFycm93LWNpcmNsZS1kb3duIHNlbGVjdGFibGVcIlxyXG4gICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxyXG4gICAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5wcm9wcy5vblJlb3JkZXIoMSl9IC8+IDwvc3Bhbj59XHJcbiAgICAgICAgPFJlbW92ZUl0ZW1cclxuICAgICAgICAgIHRpdGxlPVwiVGEgYm9ydCBtb2R1bGVuXCJcclxuICAgICAgICAgIHN0eWxlPXt7ZGlzcGxheTogJ2lubGluZS1ibG9jayd9fVxyXG4gICAgICAgICAgb25DbGljaz17KCk9PmNvbmZpcm0oTGBUYSBib3J0IG1vZHVsICR7bW9kdWxlLm5hbWV9P2ApICYmIGhvc3QudXBkYXRlKHttb2R1bGVzOiB7JHNwbGljZTogW1ttb2R1bGVJbmRleCwgMV1dfX0pfSAvPlxyXG4gICAgICA8L2Rpdj4gICAgXHJcbiAgPC9kaXY+XHJcbikqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIENvdXJzZUNvbnRlbnRCb3goe3JlcG8sIGNvbnRlbnQsIHNpYmxpbmdDb250ZW50cywgZWRpdE1vZGUsIGNvdXJzZSwgZHJhZnRJZCwgc2Nob29sLCBjb3Vyc2VUYWIsIHJlcG9ydE51bUNoYXJzLCBtYXhDaGFycywgYmxvY2t9OiBDb3Vyc2VDb250ZW50UHJvcHMpIHtcclxuICBzd2l0Y2ggKGNvbnRlbnQudHlwZSkge1xyXG4gICAgY2FzZSBcInJpY2gtdGV4dFwiOiByZXR1cm4gPFJpY2hUZXh0Q29udGVudEJveCB7Li4ue3JlcG8sIGNvbnRlbnQ6IGNvbnRlbnQgYXMgUmljaFRleHRDb250ZW50LCBlZGl0TW9kZSwgcmVwb3J0TnVtQ2hhcnMsIG1heENoYXJzfX0gLz5cclxuICAgIGNhc2UgXCJsZWFybmluZy1nb2Fsc1wiOiByZXR1cm4gPExlYXJuaW5nVGFza3NDb250ZW50Qm94IHsuLi57XHJcbiAgICAgIHJlcG8sXHJcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQgYXMgV2l0aEdyYXBoczxMZWFybmluZ0dvYWxzQ29udGVudCwgXCJ0YXNrc1wiPixcclxuICAgICAgZWRpdE1vZGUsXHJcbiAgICAgIGNvdXJzZSxcclxuICAgICAgZHJhZnRJZCxcclxuICAgICAgY291cnNlVGFiLFxyXG4gICAgICBzY2hvb2wsXHJcbiAgICAgIGJsb2NrfX0gLz5cclxuICAgIGNhc2UgXCJyZXNvdXJjZS1saXN0XCI6IHJldHVybiA8UmVzb3VyY2VMaXN0Q29udGVudEJveCB7Li4ue3JlcG8sIGNvbnRlbnQ6IGNvbnRlbnQgYXMgUmVzb3VyY2VMaXN0LCBlZGl0TW9kZX19IC8+XHJcbiAgICBjYXNlIFwiZW1iZWRkZWQtaHRtbFwiOiByZXR1cm4gPEVtYmVkZGVkSFRNTENvbnRlbnRCb3ggey4uLntyZXBvLCBjb250ZW50OiBjb250ZW50IGFzIEVtYmVkZGVkSFRNTENvbnRlbnQsIGVkaXRNb2RlLCByZXBvcnROdW1DaGFycywgbWF4Q2hhcnN9fSAvPlxyXG4gICAgY2FzZSBcIndvcmQtYmFua1wiOiByZXR1cm4gPFdvcmRCYW5rQ29udGVudEJveCB7Li4ue1xyXG4gICAgICByZXBvLFxyXG4gICAgICBlZGl0TW9kZSwgXHJcbiAgICAgIGNvbnRlbnQ6IGNvbnRlbnQgYXMgV29yZEJhbmtDb250ZW50LFxyXG4gICAgICBzaWJsaW5nV29yZEJhbmtzOiBzaWJsaW5nQ29udGVudHMuZmlsdGVyKGMgPT4gYy50eXBlID09PSAnd29yZC1iYW5rJyAmJiBjLmlkICE9PSBjb250ZW50LmlkKSBhcyBXb3JkQmFua0NvbnRlbnRbXSxcclxuICAgICAgY291cnNlOiBjb3Vyc2UgYXMgU3RlcENvdXJzZUluc3RhbmNlLFxyXG4gICAgICBjb3Vyc2VUYWI6IGNvdXJzZVRhYiBhcyBXaXRoR3JhcGhzPFN0ZXBDb3Vyc2VUYWIsIFwiY29udGVudHNcIj59fSAvPlxyXG4gICAgZGVmYXVsdDogcmV0dXJuIDxwPk9rw6RuZCBpbm5laMOlbGxzdHlwOiB7Y29udGVudC50eXBlfTwvcD47XHJcbiAgfVxyXG59IiwiaW50ZXJmYWNlIE9yZGVyZWREb2N1bWVudCB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBvcmRlcjogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVvcmRlcihkb2NzOiBPcmRlcmVkRG9jdW1lbnRbXSwgc291cmNlSWQ6IHN0cmluZywgdGFyZ2V0SWQ6IHN0cmluZywgcGxhY2VtZW50OiAnYmVmb3JlJyB8ICdhZnRlcicpIHtcclxuICBjb25zdCBkb2NzV2l0aElkeCA9IGRvY3MubWFwKChkb2MsIGlkeCkgPT4gKHtkb2MsIGlkeH0pKTtcclxuICBjb25zdCBzb3VyY2VXaXRoSWR4ID0gZG9jc1dpdGhJZHguZmlsdGVyKCh7ZG9jfSkgPT4gZG9jLmlkID09PSBzb3VyY2VJZClbMF07XHJcbiAgY29uc3QgdGFyZ2V0V2l0aElkeCA9IGRvY3NXaXRoSWR4LmZpbHRlcigoe2RvY30pID0+IGRvYy5pZCA9PT0gdGFyZ2V0SWQpWzBdO1xyXG4gIGlmIChzb3VyY2VXaXRoSWR4ICYmIHRhcmdldFdpdGhJZHgpIHtcclxuICAgIGNvbnN0IHRhcmdldElkeCA9IHRhcmdldFdpdGhJZHguaWR4O1xyXG4gICAgbGV0IG5ld09yZGVyID0gc291cmNlV2l0aElkeC5kb2Mub3JkZXI7XHJcbiAgICBpZiAocGxhY2VtZW50ID09PSAnYWZ0ZXInKSB7XHJcbiAgICAgIC8vIFBsYWNlIHNvdXJjZSBhZnRlciB0YXJnZXRcclxuICAgICAgaWYgKHRhcmdldElkeCA9PT0gZG9jcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgLy8gVGFyZ2V0IGlzIGxhc3RcclxuICAgICAgICBuZXdPcmRlciA9IERhdGUubm93KCk7IC8vIERhdGUubm93KCkgaXMgYWx3YXlzIGxhc3QgKHVubGVzcyBhIHRhYiBpcyBtZWFuaW5nZnVsbHkgZ2l2ZW4gYSBmdXR1cmUgb3JkZXIgLSB0aGVuIGxldCBpdCBzdGF5IGxhc3QhKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEdpdmUgYW4gb3JkZXIgYmV0d2VlbiB0YXJnZXQgYW5kIGl0cyBjdXJyZW50IG5laWdoYm91ciB0byB0aGUgcmlnaHRcclxuICAgICAgICBuZXdPcmRlciA9IGRvY3NbdGFyZ2V0SWR4XS5vcmRlciArIE1hdGgucmFuZG9tKCkgKiAoZG9jc1t0YXJnZXRJZHgrMV0ub3JkZXIgLSBkb2NzW3RhcmdldElkeF0ub3JkZXIpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBQbGFjZSBzb3VyY2UgYmVmb3JlIHRhcmdldFxyXG4gICAgICBpZiAodGFyZ2V0SWR4ID09PSAwKSB7XHJcbiAgICAgICAgLy8gVGFyZ2V0IGlzIGZpcnN0XHJcbiAgICAgICAgbmV3T3JkZXIgPSBNYXRoLnJvdW5kKGRvY3NbMF0ub3JkZXIgLSAxMDAgLSAxMDAwMCAqIE1hdGgucmFuZG9tKCkpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEdpdmUgYW4gb3JkZXIgYmV0d2VlbiB0YXJnZXQgYW5kIGl0cyBjdXJyZW50IG5laWdoYm9yIHRvIHRoZSBsZWZ0XHJcbiAgICAgICAgbmV3T3JkZXIgPSBkb2NzW3RhcmdldElkeC0xXS5vcmRlciArIE1hdGgucmFuZG9tKCkgKiAoZG9jc1t0YXJnZXRJZHhdLm9yZGVyIC0gZG9jc1t0YXJnZXRJZHgtMV0ub3JkZXIpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBuZXdPcmRlcjtcclxuICB9XHJcbiAgcmV0dXJuIDA7XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IEZpZWxkTGltaXRzID0ge1xyXG4gIE1BWF9DSEFSU19JTl9DT05URU5UUzogNDAwMCxcclxuICBNQVhfQ0hBUlNfVEFTS19OQU1FUzogNjQsXHJcbiAgTUFYX0NIQVJTX1RBU0tfSU5UUk9fVEVYVDogMjAwXHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFdpdGhHcmFwaHMsIEtlZEJhY2tlbmRSZXBvLCBTdHJpcEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IENvdXJzZUNvbnRlbnQsIENvdXJzZUluc3RhbmNlLCBDb3Vyc2VUYWIsIENvdXJzZUJsb2NrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuaW1wb3J0IHsgQ291cnNlQ29udGVudEJveCwgQ09VUlNFX0NPTlRFTlRfVFlQRVMgfSBmcm9tICcuL2NvdXJzZS1jb250ZW50cyc7XHJcbmltcG9ydCB7IEFsaWduSG9yaXpvbnRhbCB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9hbGlnbi1ob3Jpem9udGFsJztcclxuaW1wb3J0IHsgSG9yaXpvbnRhbEl0ZW0gfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvaG9yaXpvbnRhbC1pdGVtJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtJztcclxuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IHJlb3JkZXIgfSBmcm9tICcuLi9sb2dpYy9jaGFuZ2Utc29ydC1vcmRlcic7XHJcbmltcG9ydCB7IEZpZWxkTGltaXRzIH0gZnJvbSAnLi4vY29tbW9uL2ZpZWxkLWxpbWl0cyc7XHJcblxyXG5jb25zdCB7TUFYX0NIQVJTX0lOX0NPTlRFTlRTfSA9IEZpZWxkTGltaXRzO1xyXG5cclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgZWRpdE1vZGU6IGJvb2xlYW5cclxuICBjb250ZW50OiBXaXRoR3JhcGhzPENvdXJzZUNvbnRlbnQsIFwidGFza3NcIj5cclxuICBjb250ZW50czogV2l0aEdyYXBoczxDb3Vyc2VDb250ZW50LCBcInRhc2tzXCI+W11cclxuICBicmFuY2g6IEtlZEJhY2tlbmRSZXBvO1xyXG4gIGNvdXJzZTogV2l0aEdyYXBoczxDb3Vyc2VJbnN0YW5jZSwgXCJ0YWJzXCIgfCBcImJsb2Nrc1wiPjtcclxuICB0YWI6IFN0cmlwR3JhcGhzPENvdXJzZVRhYj47XHJcbiAgc2Nob29sOiBzdHJpbmc7XHJcbiAgZHJhZnRJZDogc3RyaW5nO1xyXG4gIGNvbnRlbnRPcmRlckluZGV4OiBudW1iZXI7XHJcbiAgYmxvY2s6IENvdXJzZUJsb2NrIHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvdXJzZVRhYkNvbnRlbnRCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICBudW1DaGFyc09ic2VydmFibGUgPSBuZXcgRW1pdHRlcigwKTsgLy8gRGVkaWNhdGVkIHN0YXRlIGZvciBhIHN1Yi1wYXJ0IG9mIHRoZSBnZW5lcmF0ZWQgRE9NIChhdm9pZCBpbmZpbml0ZSBsb29wKVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIC8vbnVtQ2hhcnM6IDBcclxuICAgIH1cclxuICB9XHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyBlZGl0TW9kZSwgY29udGVudCwgYnJhbmNoLCBjb3Vyc2UsIHRhYiwgc2Nob29sLCBkcmFmdElkLCBjb250ZW50T3JkZXJJbmRleCwgY29udGVudHMsIGJsb2NrIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3Qga2VkU3RhZmYgPSBpc0tlZFN0YWZmKCk7XHJcbiAgICAvL2NvbnN0IHsgbnVtQ2hhcnMgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7IG51bUNoYXJzT2JzZXJ2YWJsZSB9ID0gdGhpcztcclxuICAgIHJldHVybiAhZWRpdE1vZGUgfHwgKGNvbnRlbnQubG9ja2VkICYmICFrZWRTdGFmZikgP1xyXG4gICAgICAvL1xyXG4gICAgICAvLyBOb3QgZWRpdCBtb2RlOlxyXG4gICAgICAvL1xyXG4gICAgICA8Q291cnNlQ29udGVudEJveFxyXG4gICAgICAgIGtleT17Y29udGVudC5pZH1cclxuICAgICAgICByZXBvPXticmFuY2h9XHJcbiAgICAgICAgY29udGVudD17Y29udGVudH1cclxuICAgICAgICBzaWJsaW5nQ29udGVudHM9e2NvbnRlbnRzfVxyXG4gICAgICAgIGNvdXJzZT17Y291cnNlfVxyXG4gICAgICAgIGVkaXRNb2RlPXtlZGl0TW9kZX1cclxuICAgICAgICBjb3Vyc2VUYWI9e3RhYn1cclxuICAgICAgICBzY2hvb2w9e3NjaG9vbH1cclxuICAgICAgICBkcmFmdElkPXtkcmFmdElkfVxyXG4gICAgICAgIGJsb2NrPXtibG9ja30gLz4gOlxyXG4gICAgICAvL1xyXG4gICAgICAvLyBFZGl0IG1vZGU6XHJcbiAgICAgIC8vXHJcbiAgICAgIDxkaXYga2V5PXtjb250ZW50LmlkfSBjbGFzc05hbWU9e1tcImNvdXJzZS1jb250ZW50LWJveFwiLCBjb250ZW50LnR5cGUgIT09ICdsZWFybmluZy1nb2FscycgJiYgXCJrZWRfYm94ZWRcIl0uZmlsdGVyKHggPT4gISF4KS5qb2luKCcgJyl9IHN0eWxlPXt7IHBvc2l0aW9uOiAncmVsYXRpdmUnIH19PlxyXG4gICAgICAgIDxBbGlnbkhvcml6b250YWw+XHJcbiAgICAgICAgICA8SG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImJveC1taW5pLWxhYmVsXCI+e0NPVVJTRV9DT05URU5UX1RZUEVTW2NvbnRlbnQudHlwZV19PC9wPlxyXG4gICAgICAgICAgPC9Ib3Jpem9udGFsSXRlbT5cclxuICAgICAgICAgIDxIb3Jpem9udGFsSXRlbT5cclxuICAgICAgICAgICAge2tlZFN0YWZmID9cclxuICAgICAgICAgICAgICA8PlxyXG4gICAgICAgICAgICAgICAgJm5ic3A7XHJcbiAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZD17IWNvbnRlbnQubG9ja2VkfVxyXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gYnJhbmNoLmNvdXJzZUNvbnRlbnRzLnVwZGF0ZShjb250ZW50LCB7IGxvY2tlZDogIWV2LnRhcmdldC5jaGVja2VkIH0pfSAvPlxyXG4gICAgICAgICAgICAgICAge0xgVGlsbMOldCByZWRpZ2VyaW5nYH1cclxuICAgICAgICAgICAgICAgIHshY29udGVudC5sb2NrZWQgPyA8PlxyXG4gICAgICAgICAgICAgICAgICAmbmJzcDtcclxuICAgICAgICAgICAgPGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCIgY2hlY2tlZD17IWNvbnRlbnQubG9ja0RlbGV0ZX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gYnJhbmNoLmNvdXJzZUNvbnRlbnRzLnVwZGF0ZShjb250ZW50LCB7IGxvY2tEZWxldGU6ICFldi50YXJnZXQuY2hlY2tlZCB9KX0gLz5cclxuICAgICAgICAgICAgICAgICAge0xgVGlsbMOldCBkw7ZsamEgcnV0YW5gfVxyXG4gICAgICAgICAgICAgICAgPC8+IDogbnVsbH1cclxuICAgICAgICAgICAgICA8Lz4gOiBudWxsfVxyXG4gICAgICAgICAgPC9Ib3Jpem9udGFsSXRlbT5cclxuICAgICAgICA8L0FsaWduSG9yaXpvbnRhbD5cclxuICAgICAgICA8Q291cnNlQ29udGVudEJveFxyXG4gICAgICAgICAgcmVwbz17YnJhbmNofVxyXG4gICAgICAgICAgY29udGVudD17Y29udGVudH1cclxuICAgICAgICAgIHNpYmxpbmdDb250ZW50cz17Y29udGVudHN9XHJcbiAgICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cclxuICAgICAgICAgIGVkaXRNb2RlPXt0cnVlfVxyXG4gICAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgICBkcmFmdElkPXtkcmFmdElkfVxyXG4gICAgICAgICAgY291cnNlVGFiPXt0YWJ9XHJcbiAgICAgICAgICBtYXhDaGFycz17TUFYX0NIQVJTX0lOX0NPTlRFTlRTfVxyXG4gICAgICAgICAgcmVwb3J0TnVtQ2hhcnM9e251bUNoYXJzID0+IHtcclxuICAgICAgICAgICAgLy8gQXZvaWQgc2V0dGluZyBzdGF0ZSBiZWNhdXNlIGl0IHR1cm5zIG91dCB0byBiZSBpbmZpbml0ZSBsb29wLlxyXG4gICAgICAgICAgICAvLyAoc2V0U3RhdGUoKSBsZWFkcyB0byByZS1yZW5kZXIgb2YgdGhpcyB3aG9sZSBjb21wb25lbnQsIGxlYWRpbmcgdG9cclxuICAgICAgICAgICAgLy8gcmUtcmVuZGVyIG9mIENvdXJzZUNvbnRlbnRCb3gsIHRoYXQgY2FsbHMgcmVwb3J0TnVtQ2hhcnMgZXRjLi4uKVxyXG4gICAgICAgICAgICAvLyBJbnN0ZWFkIHdlIGNvbW11bmljYXRlIHRoaXMgcGFydGljdWxhciBzdGF0ZSB0byBhIGRlZGljYXRlZCBPYnNlcnZhYmxlXHJcbiAgICAgICAgICAgIC8vIHRoYXQgd2lsbCBvbmx5IHVwZGF0ZSB0aGUgcGFydGljdWxhciBjb21wb25lbnQgdGhhdCBpcyBhZmZlY3RlZCBieSBpdC5cclxuICAgICAgICAgICAgbnVtQ2hhcnNPYnNlcnZhYmxlLmRpc3BhdGNoKG51bUNoYXJzKTtcclxuICAgICAgICAgICAgLy90aGlzLnNldFN0YXRlKHsgbnVtQ2hhcnMgfSk7XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgICAgYmxvY2s9e2Jsb2NrfVxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPGRpdiBzdHlsZT17eyBwb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiAwLCByaWdodDogMCB9fT5cclxuICAgICAgICAgIHsoa2VkU3RhZmYgfHwgIWNvbnRlbnQubG9ja2VkKSAmJiBjb250ZW50T3JkZXJJbmRleCA+IDAgJiYgPHNwYW4+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFycm93LWNpcmNsZS11cCBzZWxlY3RhYmxlXCJcclxuICAgICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld09yZGVyID0gcmVvcmRlcihjb250ZW50cywgY29udGVudC5pZCwgY29udGVudHNbY29udGVudE9yZGVySW5kZXggLSAxXS5pZCwgXCJiZWZvcmVcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3T3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgYnJhbmNoLmNvdXJzZUNvbnRlbnRzLnVwZGF0ZShjb250ZW50LCB7IG9yZGVyOiBuZXdPcmRlciB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9fSAvPiA8L3NwYW4+fVxyXG4gICAgICAgICAgeyhrZWRTdGFmZiB8fCAhY29udGVudC5sb2NrZWQpICYmIGNvbnRlbnRPcmRlckluZGV4IDwgY29udGVudHMubGVuZ3RoIC0gMSAmJiA8c3Bhbj5cclxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYXJyb3ctY2lyY2xlLWRvd24gc2VsZWN0YWJsZVwiXHJcbiAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdPcmRlciA9IHJlb3JkZXIoY29udGVudHMsIGNvbnRlbnQuaWQsIGNvbnRlbnRzW2NvbnRlbnRPcmRlckluZGV4ICsgMV0uaWQsIFwiYWZ0ZXJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3T3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgYnJhbmNoLmNvdXJzZUNvbnRlbnRzLnVwZGF0ZShjb250ZW50LCB7IG9yZGVyOiBuZXdPcmRlciB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9fSAvPiA8L3NwYW4+fVxyXG4gICAgICAgICAge2tlZFN0YWZmIHx8ICFjb250ZW50LmxvY2tEZWxldGUgPyA8UmVtb3ZlSXRlbVxyXG4gICAgICAgICAgICB0aXRsZT17c2Nob29sID09PSAnc3RhbmRhcmQnID8gTGBUYSBib3J0IGlubmVow6VsbHNydXRhbmAgOiBMYETDtmxqIGlubmVow6VsbHNydXRhbmB9XHJcbiAgICAgICAgICAgIHN0eWxlPXt7IGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snIH19XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGNvbmZpcm0oTGBUYSBib3J0IGlubmVow6VsbD9gKSAmJiBicmFuY2guY291cnNlVGFicy5yZW1vdmVSZWxhdGVkKHRhYi5pZCwgXCJjb250ZW50c1wiLCBjb250ZW50KX0gLz5cclxuICAgICAgICAgICAgOiBudWxsfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIHtjb250ZW50LnR5cGUgPT09ICdyaWNoLXRleHQnID8gPExhenlDb250ZW50PntcclxuICAgICAgICAgIG51bUNoYXJzT2JzZXJ2YWJsZS5tYXAobnVtQ2hhcnMgPT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1tcImNoYXItY291bnRlci1ib3R0b21cIl0uY29uY2F0KG51bUNoYXJzID49IE1BWF9DSEFSU19JTl9DT05URU5UUyA/IFwib3ZlcmZsb3dlZFwiIDogW10pLmpvaW4oJyAnKX0+XHJcbiAgICAgICAgICAgICAge0xgVGV4dGVuIGlubmVow6VsbGVyICR7bnVtQ2hhcnN9IGF2IG1heCAke01BWF9DSEFSU19JTl9DT05URU5UU30gdGlsbMOldG5hIHRlY2tlbmB9XHJcbiAgICAgICAgICAgIDwvZGl2PilcclxuICAgICAgICAgIH08L0xhenlDb250ZW50PiA6XHJcbiAgICAgICAgICB1bmRlZmluZWR9XHJcbiAgICAgIDwvZGl2PlxyXG5cclxuICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbywgV2l0aEdyYXBocywgU3RyaXBHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBUYXNrLCBUaGVtZUNvdXJzZVRhYiwgQ291cnNlVGFiIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBLbm93bGVkZ2VNYXRyaXggfSBmcm9tICcuLi8uLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9rbm93bGVkZ2UtbWF0cml4JztcclxuaW1wb3J0IHsgTGF6eUNvbnRlbnQgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGF6eS1jb250ZW50JztcclxuaW1wb3J0IHsgZ2V0Q291cnNlQ29kZXNGcm9tVGFncyB9IGZyb20gJy4uL2xvZ2ljL2dldC1jb3Vyc2UtY29kZXMtZnJvbS10YWdzJztcclxuaW1wb3J0IHsgTCwgc2hvd0Vycm9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBnZXRTdGFuZGFyZENvdXJzZXNXaXRoT3JkZXJlZFJlcXVpcmVtZW50cyB9IGZyb20gJy4uL2xvZ2ljL2dldC1zdGFuZGFyZC1jb3Vyc2VzLXdpdGgtb3JkZXJlZC1yZXF1aXJlbWVudHMnO1xyXG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gnO1xyXG5pbXBvcnQgeyBTZWxlY3RSZWxhdGVkRG9jcyB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NlbGVjdC1yZWxhdGVkLWRvY3MnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICByZXBvOiBLZWRCYWNrZW5kUmVwb1xyXG4gIHRhYjogU3RyaXBHcmFwaHM8Q291cnNlVGFiPlxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVGFiUmVxdWlyZW1lbnRzID0gKHtcclxuICByZXBvLFxyXG4gIHRhYlxyXG59OiBQcm9wcykgPT4gPExhenlDb250ZW50PntcclxuICBnZXRTdGFuZGFyZENvdXJzZXNXaXRoT3JkZXJlZFJlcXVpcmVtZW50cyhcclxuICAgIGdldENvdXJzZUNvZGVzRnJvbVRhZ3ModGFiLnRhZ3MpKVxyXG4gIC5tYXAoY291cnNlVGVtcGxhdGVzID0+IGNvdXJzZVRlbXBsYXRlcy5sZW5ndGggPT09IDAgP1xyXG5cclxuICAgIDxwPntMYEZsaWtlbiDDpHIgaW50ZSBrb3BwbGFkIHRpbGwgbsOlZ290IMOkbW5lIC8gw6Vyc2t1cnNgfTwvcD5cclxuICAgIDpcclxuXHJcbiAgICA8ZGl2PlxyXG4gICAgICB7Y291cnNlVGVtcGxhdGVzLm1hcCgoe2lkLCBuYW1lLCBhYmlsaXRpZXMsIGNlbnRyYWxDb250ZW50LCBrbm93bGVkZ2VSZXF1aXJlbWVudHN9KSA9PiA8ZGl2IGtleT17aWR9PlxyXG4gICAgICAgIHtjb3Vyc2VUZW1wbGF0ZXMubGVuZ3RoID09PSAxID8gdW5kZWZpbmVkIDogPGgxPntuYW1lfTwvaDE+fVxyXG4gICAgICAgICAgPE9wZW5DbG9zZUJveCBjbGFzc05hbWU9XCJsYXJnZXJcIiB0aXRsZT17PHA+e0xgTMOlcyBmbGlrZW5zIGt1bnNrYXBza3JhdmB9PC9wPn0+XHJcbiAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAge0xgTWFya2VyYSBkZSBrdW5za2Fwc2tyYXYgc29tIMOkbW5lc2ZsaWtlbiBza2EgdMOkY2thLmB9XHJcbiAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgPExhenlDb250ZW50PntcclxuICAgICAgICAgICAgICByZXBvW1wia25vd2xlZGdlLXJlcXVpcmVtZW50c1wiXS5oYXNFZGdlc0Zyb20oW3RhYi5pZF0pLmlkc09ubHkoKS50b1ZhbHVlKCkubWFwKHRhYnNLcnMgPT4geyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHJldHVybiA8S25vd2xlZGdlTWF0cml4XHJcbiAgICAgICAgICAgICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50cz17a25vd2xlZGdlUmVxdWlyZW1lbnRzfVxyXG4gICAgICAgICAgICAgICAgICBtYXJrZWRJZHM9e3RhYnNLcnMubWFwKCh7aWR9KSA9PiBpZCl9XHJcbiAgICAgICAgICAgICAgICAgIGlkc1RvTWFya05vdE9rPXt7fX1cclxuICAgICAgICAgICAgICAgICAgbWFya01vZGU9e3RydWV9XHJcbiAgICAgICAgICAgICAgICAgIG9uTWFya0NoYW5nZWQ9eyhtYXJrZWRJZDogc3RyaW5nLCBpc01hcmtlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBpbnZhbGlkIGtub3dsZWRnZSByZXF1aXJlbWVudHMgKHRob3NlIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIHRoZSBzdGFuZGFyZCBjb3Vyc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FuIGhhcHBlbiBhZnRlciBjaGFuZ2luZyBzY2hvb2wgeWVhciAvIGNvdXJzZSBvciBzdWJqZWN0LlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGludmFsaWRLcnMgPSB0YWJzS3JzLmZpbHRlcihrciA9PiAha25vd2xlZGdlUmVxdWlyZW1lbnRzLnNvbWUoKHtpZH0pID0+IGtyLmlkID09PSBpZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRLcnMuZm9yRWFjaChpbnZhbGlkS3IgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgcmVwby5jb3Vyc2VUYWJzLnJlbW92ZVJlbGF0ZWQodGFiLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBpbnZhbGlkS3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlZERvYyA9IGtub3dsZWRnZVJlcXVpcmVtZW50cy5maWx0ZXIoKHtpZH0pID0+IGlkID09PSBtYXJrZWRJZClbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFya2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZVRhYnMuYWRkUmVsYXRlZCh0YWIuaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIG1hcmtlZERvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHJlcG8uY291cnNlVGFicy5yZW1vdmVSZWxhdGVkKHRhYi5pZCwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgbWFya2VkRG9jKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIH0pfTwvTGF6eUNvbnRlbnQ+XHJcbiAgICAgICAgICA8L09wZW5DbG9zZUJveD5cclxuXHJcbiAgICAgICAgICA8TGF6eUNvbnRlbnQ+e1xyXG4gICAgICAgICAgICByZXBvLmFiaWxpdGllcy5oYXNFZGdlc0Zyb20oW3RhYi5pZF0pLmlkc09ubHkoKS50b1ZhbHVlKCkubWFwKHRhYkFiaWxpdGllcyA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIDxTZWxlY3RSZWxhdGVkRG9jc1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucz17YWJpbGl0aWVzfVxyXG4gICAgICAgICAgICAgICAgdGl0bGU9e0xgTMOlcyBmbGlrZW5zIGbDtnJtw6Vnb3JgfVxyXG4gICAgICAgICAgICAgICAgbWFya2VkSWRzPXt0YWJBYmlsaXRpZXMubWFwKCh7aWR9KSA9PiBpZCl9XHJcbiAgICAgICAgICAgICAgICBtYXJrTW9kZT17dHJ1ZX1cclxuICAgICAgICAgICAgICAgIC8vbWlncmF0ZWRJZHM9e3Rhc2sgJiYgdGFzay5taWdyYXRlZFRleHRzICYmIHRhc2subWlncmF0ZWRUZXh0cy5hYmlsaXRpZXN9XHJcbiAgICAgICAgICAgICAgICBvbk1hcmtDaGFuZ2VkPXsobWFya2VkSWQsIGlzTWFya2VkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBpbnZhbGlkIGFiaWxpdGllcyAodGhvc2UgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIHN0YW5kYXJkIGNvdXJzZSlcclxuICAgICAgICAgICAgICAgICAgLy8gQ2FuIGhhcHBlbiBhZnRlciBjaGFuZ2luZyBzY2hvb2wgeWVhciAvIGNvdXJzZSBvciBzdWJqZWN0LlxyXG4gICAgICAgICAgICAgICAgICBjb25zdCBpbnZhbGlkQWJpbGl0aWVzID0gdGFiQWJpbGl0aWVzLmZpbHRlcihhID0+ICFhYmlsaXRpZXMuc29tZSgoe2lkfSkgPT4gYS5pZCA9PT0gaWQpKTtcclxuICAgICAgICAgICAgICAgICAgaW52YWxpZEFiaWxpdGllcy5mb3JFYWNoKGludmFsaWRBYmlsaXR5ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZVRhYnMucmVtb3ZlUmVsYXRlZCh0YWIuaWQsIFwiYWJpbGl0aWVzXCIsIGludmFsaWRBYmlsaXR5KTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlZERvYyA9IGFiaWxpdGllcy5maWx0ZXIoKHtpZH0pID0+IGlkID09PSBtYXJrZWRJZClbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTWFya2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICByZXBvLmNvdXJzZVRhYnMuYWRkUmVsYXRlZCh0YWIuaWQsIFwiYWJpbGl0aWVzXCIsIG1hcmtlZERvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgIHJlcG8uY291cnNlVGFicy5yZW1vdmVSZWxhdGVkKHRhYi5pZCwgXCJhYmlsaXRpZXNcIiwgbWFya2VkRG9jKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICB9KX08L0xhenlDb250ZW50PlxyXG5cclxuICAgICAgICAgIDxMYXp5Q29udGVudD57XHJcbiAgICAgICAgICAgIHJlcG9bXCJjZW50cmFsLWNvbnRlbnRcIl0uaGFzRWRnZXNGcm9tKFt0YWIuaWRdKS5pZHNPbmx5KCkudG9WYWx1ZSgpLm1hcCh0YWJzQ0NzID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIDxTZWxlY3RSZWxhdGVkRG9jc1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucz17Y2VudHJhbENvbnRlbnR9XHJcbiAgICAgICAgICAgICAgICB0aXRsZT17TGBMw6VzIGZsaWtlbnMgY2VudHJhbGEgaW5uZWjDpWxsYH1cclxuICAgICAgICAgICAgICAgIG1hcmtlZElkcz17dGFic0NDcy5tYXAoY2MgPT4gY2MuaWQpfVxyXG4gICAgICAgICAgICAgICAgbWFya01vZGU9e3RydWV9XHJcbiAgICAgICAgICAgICAgICAvL21pZ3JhdGVkSWRzPXt0YXNrICYmIHRhc2subWlncmF0ZWRUZXh0cyAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMuY2VudHJhbENvbnRlbnR9XHJcbiAgICAgICAgICAgICAgICBvbk1hcmtDaGFuZ2VkPXsobWFya2VkSWQsIGlzTWFya2VkKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBpbnZhbGlkIGNlbnRyYWwgY29udGVudHMgKHRob3NlIHRoYXQgYXJlIG5vdCBwYXJ0IG9mIHRoZSBzdGFuZGFyZCBjb3Vyc2UpXHJcbiAgICAgICAgICAgICAgICAgIC8vIENhbiBoYXBwZW4gYWZ0ZXIgY2hhbmdpbmcgc2Nob29sIHllYXIgLyBjb3Vyc2Ugb3Igc3ViamVjdC5cclxuICAgICAgICAgICAgICAgICAgY29uc3QgaW52YWxpZENlbnRyYWxDb250ZW50cyA9IHRhYnNDQ3MuZmlsdGVyKGNjID0+ICFjZW50cmFsQ29udGVudC5zb21lKCh7aWR9KSA9PiBjYy5pZCA9PT0gaWQpKTtcclxuICAgICAgICAgICAgICAgICAgaW52YWxpZENlbnRyYWxDb250ZW50cy5mb3JFYWNoKGludmFsaWRDQyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwby5jb3Vyc2VUYWJzLnJlbW92ZVJlbGF0ZWQodGFiLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIGludmFsaWRDQyk7XHJcbiAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZWREb2MgPSBjZW50cmFsQ29udGVudC5maWx0ZXIoKHtpZH0pID0+IGlkID09PSBtYXJrZWRJZClbMF07XHJcbiAgICAgICAgICAgICAgICAgIGlmIChpc01hcmtlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcG8uY291cnNlVGFicy5hZGRSZWxhdGVkKHRhYi5pZCwgXCJjZW50cmFsQ29udGVudFwiLCBtYXJrZWREb2MpO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcG8uY291cnNlVGFicy5yZW1vdmVSZWxhdGVkKHRhYi5pZCwgXCJjZW50cmFsQ29udGVudFwiLCBtYXJrZWREb2MpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgIC8+ICBcclxuICAgICAgICAgICAgfSl9PC9MYXp5Q29udGVudD5cclxuXHJcblxyXG4gICAgICA8L2Rpdj4pfVxyXG4gICAgPC9kaXY+XHJcbiAgKVxyXG59PC9MYXp5Q29udGVudD4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBBbGlnbkhvcml6b250YWwgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvYWxpZ24taG9yaXpvbnRhbCc7XHJcbmltcG9ydCB7IENvdXJzZUluc3RhbmNlLCBDb3Vyc2VUYWIsIENvdXJzZUJsb2NrLCBUaGVtZUNvdXJzZUluc3RhbmNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBIb3Jpem9udGFsSXRlbSB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9ob3Jpem9udGFsLWl0ZW0nO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbywgU3RyaXBHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBnZXRTY2hvb2xZZWFycywgY29tcHV0ZUNvdXJzZUluc3RhbmNlVGFncyB9IGZyb20gJy4uL2xvZ2ljL2NvdXJzZS1pbnN0YW5jZS10YWdzJztcclxuaW1wb3J0IHsgVGFiUmVxdWlyZW1lbnRzIH0gZnJvbSAnLi90YWItc2V0dGluZ3MtcmVxdWlyZW1lbnRzJztcclxuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgY291cnNlOiBDb3Vyc2VJbnN0YW5jZTtcclxuICB0YWI6IFN0cmlwR3JhcGhzPENvdXJzZVRhYj47XHJcbiAgYmxvY2s/OiBDb3Vyc2VCbG9jaztcclxuICByZXBvOiBLZWRCYWNrZW5kUmVwbztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFRhYlNldHRpbmdzQWRtaW4gPSAoeyB0YWIsIHJlcG8sIGNvdXJzZSwgYmxvY2sgfTogUHJvcHMpID0+IHtcclxuICBjb25zdCB7IHN1YmplY3RDb2RlLCBzdWJqZWN0TmFtZSB9ID0gdGFiLnN1YmplY3QgP1xyXG4gICAgdGFiLnN1YmplY3QgOlxyXG4gICAgY291cnNlLnR5cGUgPT09ICd0aGVtZS1jb3Vyc2UnICYmIGNvdXJzZS5zdWJqZWN0cyAmJiBjb3Vyc2Uuc3ViamVjdHMubGVuZ3RoID4gMCA/XHJcbiAgICAgIHsgc3ViamVjdENvZGU6IGNvdXJzZS5zdWJqZWN0c1swXS5jb2RlLCBzdWJqZWN0TmFtZTogY291cnNlLnN1YmplY3RzWzBdLm5hbWUgfSA6XHJcbiAgICAgIGNvdXJzZS50eXBlID09PSAnc3RlcC1jb3Vyc2UnID9cclxuICAgICAgICB7IHN1YmplY3RDb2RlOiBjb3Vyc2Uuc3ViamVjdC5zdWJqZWN0Q29kZSwgc3ViamVjdE5hbWU6IGNvdXJzZS5zdWJqZWN0LnN1YmplY3ROYW1lIH0gOlxyXG4gICAgICAgIHsgc3ViamVjdENvZGU6ICcnLCBzdWJqZWN0TmFtZTogJycgfTtcclxuICBjb25zdCBjb3Vyc2VTY2hvb2xZZWFycyA9IGdldFNjaG9vbFllYXJzKGNvdXJzZS50YWdzKTtcclxuICBjb25zdCBzY2hvb2xZZWFyOiBudWxsIHwgc3RyaW5nID0gZ2V0U2Nob29sWWVhcnModGFiLnRhZ3MpWzBdIHx8IGNvdXJzZVNjaG9vbFllYXJzWzBdIHx8IG51bGw7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICAvL1xyXG4gICAgLy8gRWRpdCBcInN0YW5kYXJkXCIgc2Nob29sOiBDaG9vc2UgdGFiIHR5cGVcclxuICAgIC8vXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxyXG4gICAgICA8cCBjbGFzc05hbWU9XCJib3gtbWluaS1sYWJlbFwiPntMYEFkbWluaXN0cmF0aXZhIEluc3TDpGxsbmluZ2FyIGbDtnIgZmxpa2VuICR7dGFiLm5hbWUgfHwgdGFiLnRhYlRpdGxlfWB9PC9wPlxyXG4gICAgICA8QWxpZ25Ib3Jpem9udGFsPlxyXG4gICAgICAgIDxIb3Jpem9udGFsSXRlbT5cclxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjaGVja2VkPXt0YWIubG9ja2VkfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gcmVwby5jb3Vyc2VUYWJzLnVwZGF0ZSh0YWIsIHsgbG9ja2VkOiAhIWV2LnRhcmdldC5jaGVja2VkIH0pfSAvPlxyXG4gICAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgICAgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAge0xgTMOlcyBmbGlrZW4gZnLDpW4gcmVkaWdlcmluZyBmw7ZydXRvbSBkw6RyIGRldCBleHBsaWNpdCB0aWxsw6V0c2B9XHJcbiAgICAgICAgPC9Ib3Jpem9udGFsSXRlbT5cclxuICAgICAgPC9BbGlnbkhvcml6b250YWw+XHJcbiAgICAgIHtjb3Vyc2UudHlwZSA9PT0gJ3N0ZXAtY291cnNlJyAmJiA8PlxyXG4gICAgICAgIDxici8+XHJcbiAgICAgICAgPE9wZW5DbG9zZUJveCB0aXRsZT17TGBBdmFuY2VyYXQuLi5gfT5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17YXN5bmMgKCk9PntcclxuICAgICAgICAgICAgY29uc3Qgc2Nob29sWWVhciA9IGdldFNjaG9vbFllYXJzKGJsb2NrLnRhZ3MpWzBdO1xyXG4gICAgICAgICAgICBhd2FpdCB1cGRhdGVTdWJqZWN0QW5kU2Nob29sWWVhcnMoY291cnNlLCBjb3Vyc2Uuc3ViamVjdC5zdWJqZWN0TmFtZSwgY291cnNlLnN1YmplY3Quc3ViamVjdENvZGUsIHNjaG9vbFllYXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgfT57TGBHw7ZyIG9tIGtvcHBsaW5nZW4gdGlsbCDDpG1uZSBvY2ggw6Vyc2t1cnNzcGFubmB9PC9idXR0b24+XHJcbiAgICAgICAgPC9PcGVuQ2xvc2VCb3g+XHJcbiAgICAgIDwvPn1cclxuICAgICAge2NvdXJzZS50eXBlID09PSAndGhlbWUtY291cnNlJyAmJiB0YWIudGFiQ2xhc3MgPT09ICdzdWJqZWN0LXRhYicgJiYgISFzdWJqZWN0Q29kZSAmJiA8PlxyXG4gICAgICAgIDxici8+XHJcbiAgICAgICAge2NvdXJzZS5zdWJqZWN0cy5sZW5ndGggPiAxICYmIDxBbGlnbkhvcml6b250YWw+XHJcbiAgICAgICAgICA8SG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJrY2xhYmVsXCI+e0xgw4RtbmVgfTwvbGFiZWw+XHJcbiAgICAgICAgICA8L0hvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAgICA8c2VsZWN0XHJcbiAgICAgICAgICAgICAgdmFsdWU9e3N1YmplY3RDb2RlfVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXthc3luYyBldiA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhpcyB0YWIncyBzdWJqZWN0IGFuZCB0YWdzXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJqZWN0Q29kZSA9IGV2LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN1YmplY3ROYW1lID0gY291cnNlLnN1YmplY3RzXHJcbiAgICAgICAgICAgICAgICAgIC5maWx0ZXIocyA9PiBzLmNvZGUgPT09IHN1YmplY3RDb2RlKVxyXG4gICAgICAgICAgICAgICAgICAubWFwKHMgPT4gcy5uYW1lKVswXSB8fCBzdWJqZWN0Q29kZTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHVwZGF0ZVN1YmplY3RBbmRTY2hvb2xZZWFycyhjb3Vyc2UsIHN1YmplY3ROYW1lLCBzdWJqZWN0Q29kZSwgc2Nob29sWWVhcik7XHJcbiAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAge2NvdXJzZS5zdWJqZWN0cy5tYXAoKHsgbmFtZSwgY29kZSB9KSA9PlxyXG4gICAgICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2NvZGV9IHZhbHVlPXtjb2RlfT57bmFtZX08L29wdGlvbj4pfVxyXG4gICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgICAgPC9BbGlnbkhvcml6b250YWw+fVxyXG4gICAgICAgIHtjb3Vyc2VTY2hvb2xZZWFycy5sZW5ndGggPiAxICYmIDw+XHJcblxyXG4gICAgICAgICAgPEFsaWduSG9yaXpvbnRhbD5cclxuICAgICAgICAgICAgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJrY2xhYmVsXCI+e0xgVsOkbGogw6Vyc2t1cnNgfTwvbGFiZWw+XHJcbiAgICAgICAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgICAgICAgIDxIb3Jpem9udGFsSXRlbT5cclxuICAgICAgICAgICAgICA8c2VsZWN0IHZhbHVlPXtzY2hvb2xZZWFyfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2FzeW5jIGV2ID0+IHtcclxuICAgICAgICAgICAgICAgICAgY29uc3Qgc2Nob29sWWVhciA9IGV2LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViamVjdE5hbWUgPSBjb3Vyc2Uuc3ViamVjdHNcclxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHMgPT4gcy5jb2RlID09PSBzdWJqZWN0Q29kZSlcclxuICAgICAgICAgICAgICAgICAgICAubWFwKHMgPT4gcy5uYW1lKVswXSB8fCBzdWJqZWN0Q29kZTtcclxuICAgICAgICAgICAgICAgICAgYXdhaXQgdXBkYXRlU3ViamVjdEFuZFNjaG9vbFllYXJzKGNvdXJzZSwgc3ViamVjdE5hbWUsIHN1YmplY3RDb2RlLCBzY2hvb2xZZWFyKTtcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAge2NvdXJzZVNjaG9vbFllYXJzLm1hcCh5ZWFyID0+IDxvcHRpb24ga2V5PXt5ZWFyfSB2YWx1ZT17eWVhcn0+e0xgw4Vyc2t1cnMgJHt5ZWFyfWB9PC9vcHRpb24+KX1cclxuICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgPC9Ib3Jpem9udGFsSXRlbT5cclxuICAgICAgICAgIDwvQWxpZ25Ib3Jpem9udGFsPlxyXG4gICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPFRhYlJlcXVpcmVtZW50cyByZXBvPXtyZXBvfSB0YWI9e3RhYn0gLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGJyLz5cclxuICAgICAgICAgIDxPcGVuQ2xvc2VCb3ggdGl0bGU9e0xgQXZhbmNlcmF0Li4uYH0+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17YXN5bmMgKCk9PntcclxuICAgICAgICAgICAgICBhd2FpdCB1cGRhdGVTdWJqZWN0QW5kU2Nob29sWWVhcnMoY291cnNlLCBzdWJqZWN0TmFtZSwgc3ViamVjdENvZGUsIHNjaG9vbFllYXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0+e0xgR8O2ciBvbSBrb3BwbGluZ2VuIHRpbGwgw6RtbmUgb2NoIMOlcnNrdXJzc3Bhbm5gfTwvYnV0dG9uPlxyXG4gICAgICAgICAgPC9PcGVuQ2xvc2VCb3g+XHJcblxyXG4gICAgICAgIDwvPn1cclxuICAgICAgPC8+fVxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxuXHJcbiAgYXN5bmMgZnVuY3Rpb24gdXBkYXRlU3ViamVjdEFuZFNjaG9vbFllYXJzKGNvdXJzZTogU3RyaXBHcmFwaHM8Q291cnNlSW5zdGFuY2U+LCBzdWJqZWN0TmFtZTogc3RyaW5nLCBzdWJqZWN0Q29kZTogc3RyaW5nLCBzY2hvb2xZZWFyOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHRhYlRhZ3MgPSBjb21wdXRlQ291cnNlSW5zdGFuY2VUYWdzKHRhYi50YWdzLCBbc3ViamVjdENvZGVdLCBbc2Nob29sWWVhcl0pO1xyXG5cclxuICAgIHJlcG8uY291cnNlVGFicy51cGRhdGUodGFiLCB7XHJcbiAgICAgIHN1YmplY3Q6IHtcclxuICAgICAgICBzdWJqZWN0Q29kZSxcclxuICAgICAgICBzdWJqZWN0TmFtZVxyXG4gICAgICB9LFxyXG4gICAgICB0YWdzOiB0YWJUYWdzXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBBbHNvIHVwZGF0ZSBhbGwgdGFza3MgY29ubmVjdGVkIHRvIHRoaXMgdGFiXHJcbiAgICAvLyBOZWVkIHRvIG1vdmUgdGhlbSB0byB0aGUgbmV3IHN1YmplY3RcclxuICAgIGNvbnN0IGxnQ29udGVudHMgPSBhd2FpdCByZXBvLmNvdXJzZUNvbnRlbnRzXHJcbiAgICAgIC5oYXNFZGdlc0Zyb20oW3RhYi5pZF0pXHJcbiAgICAgIC5pbmNsdWRlKFwidGFza3NcIilcclxuICAgICAgLmluY2x1ZGVJZHNBbmROYW1lc09ubHkoKVxyXG4gICAgICAudG9WYWx1ZSgpLmxvYWQoKTtcclxuICAgIGNvbnN0IHRhc2tzID0gZmxhdHRlbihsZ0NvbnRlbnRzLm1hcChjID0+IGMudGFza3MpKTtcclxuICAgIGZvciAoY29uc3QgdGFzayBvZiB0YXNrcykge1xyXG4gICAgICBjb25zdCB0YWdzID0gY29tcHV0ZUNvdXJzZUluc3RhbmNlVGFncyhbY291cnNlLmlkXSwgW3N1YmplY3RDb2RlXSwgW3NjaG9vbFllYXJdKTtcclxuICAgICAgcmVwby50YXNrcy51cGRhdGUodGFzaywge3RhZ3MsIHN1YmplY3Q6IHN1YmplY3ROYW1lfSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVmFsdWUsIEVtaXR0ZXIgfSBmcm9tICdrZWRiYWNrZW5kL29ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBDb3Vyc2VDb250ZW50LCBDb3Vyc2VJbnN0YW5jZSwgVGhlbWVDb3Vyc2VJbnN0YW5jZSwgVGhlbWVDb3Vyc2VUYWIsIENvdXJzZVRhYiwgQ291cnNlQmxvY2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGxpdmVRdWVyeVZpZXcgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGl2ZS1xdWVyeS12aWV3JztcclxuaW1wb3J0IHsgY29tcGFyZVByb3AsIEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRSZXBvLCBXaXRoR3JhcGhzLCBTdHJpcEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IEFkZENvbnRlbnRCdXR0b24gfSBmcm9tICcuL2FkZC1jb250ZW50LWJ1dHRvbic7XHJcbmltcG9ydCB7IENvdXJzZUNvbnRlbnRCb3gsIENPVVJTRV9DT05URU5UX1RZUEVTIH0gZnJvbSAnLi9jb3Vyc2UtY29udGVudHMnO1xyXG5pbXBvcnQgeyBSZW1vdmVJdGVtIH0gZnJvbSAnLi4vLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0nO1xyXG5pbXBvcnQgeyBBbGlnbkhvcml6b250YWwgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvYWxpZ24taG9yaXpvbnRhbCc7XHJcbmltcG9ydCB7IEhvcml6b250YWxJdGVtIH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2hvcml6b250YWwtaXRlbSc7XHJcbmltcG9ydCB7IENvdXJzZVRhYkNsYXNzZXMgfSBmcm9tICcuL2NvdXJzZS10YWIvdGFiLWNsYXNzZXMnO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuaW1wb3J0IHsgVGFiU2V0dGluZ3MgfSBmcm9tICcuL3RhYi1zZXR0aW5ncyc7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IENvdXJzZVRhYkNvbnRlbnRCb3ggfSBmcm9tICcuL2NvdXJzZS10YWItY29udGVudC1ib3gnO1xyXG5pbXBvcnQgeyBUYWJTZXR0aW5nc0FkbWluIH0gZnJvbSAnLi90YWItc2V0dGluZ3MtYWRtaW4nO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzY2hvb2w6IHN0cmluZztcclxuICBkcmFmdElkOiBzdHJpbmc7XHJcbiAgY291cnNlOiBXaXRoR3JhcGhzPENvdXJzZUluc3RhbmNlLCBcInRhYnNcIiB8IFwiYmxvY2tzXCI+O1xyXG4gIGJyYW5jaDogS2VkQmFja2VuZFJlcG87XHJcbiAgYmxvY2s6IENvdXJzZUJsb2NrIHwgbnVsbDtcclxuICB0YWI6IFN0cmlwR3JhcGhzPENvdXJzZVRhYj4sXHJcbiAgZWRpdE1vZGU/OiBib29sZWFuXHJcbiAgbGF6eUNvbnRlbnRzOiBWYWx1ZTxXaXRoR3JhcGhzPENvdXJzZUNvbnRlbnQsIFwidGFza3NcIj5bXT47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDb3Vyc2VUYWJBcmVhID0gbGl2ZVF1ZXJ5VmlldygoeyBjb3Vyc2UsIGJyYW5jaCwgYmxvY2ssIHRhYiwgZWRpdE1vZGUsIGxhenlDb250ZW50cywgc2Nob29sLCBkcmFmdElkIH06IFByb3BzKSA9PlxyXG4gIGxhenlDb250ZW50cy5tYXAoY29udGVudHMgPT4ge1xyXG4gICAgaWYgKCF0YWIpIHtcclxuICAgICAgaWYgKGVkaXRNb2RlKVxyXG4gICAgICAgIHJldHVybiA8cD57TGBEZW5uYSBrdXJzIHNha25hciBpbm5laMOlbGwuIFNrYXBhIG55IGZsaWsgZ2Vub20ga25hcHBlbiBvdmFuYH08L3A+XHJcbiAgICAgIGVsc2VcclxuICAgICAgICByZXR1cm4gaXNLZWRTdGFmZigpID9cclxuICAgICAgICAgIDxwPntMYERlbm5hIGt1cnMgc2FrbmFyIGlubmVow6VsbC4gVsOkbGogUmVkaWdlcmEga25hcHBlbiBmw7ZyIGF0dCBsw6RnZ2EgdGlsbCBmbGlrYXIuYH08L3A+IDpcclxuICAgICAgICAgIDxwPntMYERlbm5hIGt1cnMgc2FrbmFyIGlubmVow6VsbC5gfTwvcD5cclxuICAgIH1cclxuICAgIGNvbnRlbnRzID0gY29udGVudHMuc2xpY2UoKS5zb3J0KGNvbXBhcmVQcm9wKFwib3JkZXJcIikpO1xyXG4gICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgIHtlZGl0TW9kZSA/IDw+XHJcbiAgICAgICAge2lzS2VkU3RhZmYoKSB8fCAhdGFiLmxvY2tlZCA/XHJcbiAgICAgICAgICA8VGFiU2V0dGluZ3MgY291cnNlPXtjb3Vyc2UgYXMgQ291cnNlSW5zdGFuY2V9IHRhYj17dGFifSByZXBvPXticmFuY2h9IC8+IDpcclxuICAgICAgICAgIG51bGx9XHJcbiAgICAgICAge2lzS2VkU3RhZmYoKSA/XHJcbiAgICAgICAgICA8VGFiU2V0dGluZ3NBZG1pbiBjb3Vyc2U9e2NvdXJzZSBhcyBDb3Vyc2VJbnN0YW5jZX0gdGFiPXt0YWJ9IHJlcG89e2JyYW5jaH0gYmxvY2s9e2Jsb2NrfSAvPiA6XHJcbiAgICAgICAgICBudWxsfVxyXG4gICAgICA8Lz4gOiBudWxsXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHtjb250ZW50cy5tYXAoKGNvbnRlbnQsIGNvbnRlbnRPcmRlckluZGV4KSA9PiA8Q291cnNlVGFiQ29udGVudEJveFxyXG4gICAgICAgIGtleT17Y29udGVudC5pZH1cclxuICAgICAgICBjb250ZW50PXtjb250ZW50fVxyXG4gICAgICAgIGJyYW5jaD17YnJhbmNofVxyXG4gICAgICAgIGNvbnRlbnRPcmRlckluZGV4PXtjb250ZW50T3JkZXJJbmRleH1cclxuICAgICAgICBjb250ZW50cz17Y29udGVudHN9XHJcbiAgICAgICAgY291cnNlPXtjb3Vyc2V9XHJcbiAgICAgICAgZHJhZnRJZD17ZHJhZnRJZH1cclxuICAgICAgICBlZGl0TW9kZT17ZWRpdE1vZGV9XHJcbiAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgYmxvY2s9e2Jsb2NrfVxyXG4gICAgICAgIHRhYj17dGFifSAvPil9XHJcblxyXG4gICAgICAgIHshIWVkaXRNb2RlICYmIChpc0tlZFN0YWZmKCkgfHwgIXRhYi5sb2NrZWQpICYmIDw+XHJcblxyXG4gICAgICAgICAge3RhYi50YWJDbGFzcyA9PT0gJ3dvcmQtYmFuay10YWInICYmXHJcblxyXG4gICAgICAgICAgICAvLyBbIEFkZCBXb3JkIEJhbmsgXSBidXR0b25cclxuICAgICAgICAgICAgPEFkZENvbnRlbnRCdXR0b24gdHlwZT1cIndvcmQtYmFua1wiIHRhYj17dGFifSBicmFuY2g9e2JyYW5jaH0gY291cnNlPXtjb3Vyc2V9IC8+fVxyXG5cclxuICAgICAgICAgIHt0YWIudGFiQ2xhc3MgIT09ICd3b3JkLWJhbmstdGFiJyAmJlxyXG4gICAgICAgICAgICh0YWIudGFiQ2xhc3MgPT09ICdtaXNzaW9uLXRhYicgfHwgdGFiLnRhYkNsYXNzID09PSAnc3ViamVjdC10YWInIHx8IGNvdXJzZS50eXBlID09PSAnc3RlcC1jb3Vyc2UnKSAmJlxyXG4gICAgICAgICAgICFjb250ZW50cy5zb21lKGMgPT4gYy50eXBlID09PSAnbGVhcm5pbmctZ29hbHMnKSAmJlxyXG5cclxuICAgICAgICAgICAgLy8gWyBBZGQgTGVhcm5pbmcgR29hbHMgXSBidXR0b25cclxuICAgICAgICAgICAgPEFkZENvbnRlbnRCdXR0b24gdHlwZT1cImxlYXJuaW5nLWdvYWxzXCIgdGFiPXt0YWJ9IGJyYW5jaD17YnJhbmNofSBjb3Vyc2U9e2NvdXJzZX0gLz5cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB7IC8vIFsgQWRkIFRleHQgXSBidXR0b25cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIDxBZGRDb250ZW50QnV0dG9uIHR5cGU9XCJyaWNoLXRleHRcIiB0YWI9e3RhYn0gYnJhbmNoPXticmFuY2h9IGNvdXJzZT17Y291cnNlfSAvPlxyXG5cclxuICAgICAgICAgIHtjb250ZW50cy5maWx0ZXIoYz0+IGMudHlwZSA9PSBcInJlc291cmNlLWxpc3RcIikubGVuZ3RoID09IDAgJiZcclxuICAgICAgICAgICAgIC8vIFsgQWRkIFJlc291cmNlIF0gYnV0dG9uXHJcbiAgICAgICAgICAgICA8QWRkQ29udGVudEJ1dHRvbiB0eXBlPVwicmVzb3VyY2UtbGlzdFwiIHRhYj17dGFifSBicmFuY2g9e2JyYW5jaH0gY291cnNlPXtjb3Vyc2V9IC8+XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAge3RhYi50YWJDbGFzcyA9PT0gJ2ludHJvLXRhYicgfHwgdGFiLnRhYkNsYXNzID09PSAncnVuLXVwLXRhYicgJiZcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBbIEFkZCBFbWJlZGRlZCBIVE1MIF0gYnV0dG9uXHJcbiAgICAgICAgICAgIDxBZGRDb250ZW50QnV0dG9uIHR5cGU9XCJlbWJlZGRlZC1odG1sXCIgdGFiPXt0YWJ9IGJyYW5jaD17YnJhbmNofSBjb3Vyc2U9e2NvdXJzZX0gLz59XHJcbiAgICAgICAgPC8+XHJcbiAgICAgIH1cclxuICAgIDwvZGl2PlxyXG4gIH0pXHJcbilcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8sIFN0cmlwR3JhcGhzIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgd2l0aFJvdXRlciwgUm91dGVQcm9wcywgUm91dGVDb21wb25lbnRQcm9wcyB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBwdWJsaXNoQ291cnNlIH0gZnJvbSAnLi4vbG9naWMvcHVibGlzaC1jb3Vyc2UnO1xyXG5pbXBvcnQgeyBIb3Jpem9udGFsSXRlbSB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9ob3Jpem9udGFsLWl0ZW0nO1xyXG5pbXBvcnQgeyBBbGlnbkhvcml6b250YWwgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvYWxpZ24taG9yaXpvbnRhbCc7XHJcbmltcG9ydCB7IGlzS2VkU3RhZmYgfSBmcm9tICcuLi9sb2dpYy9pcy1rZWQtc3RhZmYnO1xyXG5pbXBvcnQgeyBDb3Vyc2VUYWIsIENvdXJzZUluc3RhbmNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBEb2N1bWVudEFjY2VzcywgaGFzQWNjZXNzIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgeyBoYXNXcml0ZUFjY2VzcywgaGFzU2hhcmVBY2Nlc3MgfSBmcm9tICcuLi8uLi8uLi9hY2Nlc3MtY29udHJvbCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHNjaG9vbDogc3RyaW5nO1xyXG4gIGNvdXJzZTogQ291cnNlSW5zdGFuY2U7XHJcbiAgdGFiOiBTdHJpcEdyYXBoczxDb3Vyc2VUYWI+O1xyXG4gIGFjdGl2ZVRhYjogc3RyaW5nO1xyXG4gIGRyYWZ0SWQ6IHN0cmluZztcclxuICBibG9ja0lkPzogc3RyaW5nO1xyXG4gIGNvdXJzZVR5cGU6ICd0aGVtZS1jb3Vyc2UnIHwgJ3N0ZXAtY291cnNlJ1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRWRpdG9yRm9vdGVyQnV0dG9ucyA9IHdpdGhSb3V0ZXIoKHsgc2Nob29sLCBjb3Vyc2UsIHRhYiwgYWN0aXZlVGFiLCBkcmFmdElkLCBoaXN0b3J5LCBjb3Vyc2VUeXBlLCBibG9ja0lkIH06IFByb3BzICYgUm91dGVDb21wb25lbnRQcm9wcykgPT4gPD5cclxuICB7dGFiICYmIChpc0tlZFN0YWZmKCkgfHwgIXRhYi5sb2NrZWQgfHwgY291cnNlLmFsbG93UmVtb3ZlVGFicykgPyA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBwdWxsLXJpZ2h0XCIgb25DbGljaz17YXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgZHJhZnRSZXBvID0gZGIuYnJhbmNoKGRyYWZ0SWQpO1xyXG4gICAgY29uc3QgY291cnNlVGFiID0gYXdhaXQgZHJhZnRSZXBvLmNvdXJzZVRhYnNcclxuICAgICAgLmluY2x1ZGUoXCJjb250ZW50c1wiKVxyXG4gICAgICAuaW5jbHVkZUlkc09ubHkoKVxyXG4gICAgICAuaWQoYWN0aXZlVGFiKVxyXG4gICAgICAubG9hZCgpO1xyXG4gICAgY29uc3QgY29udGVudHMgPSBhd2FpdCBkcmFmdFJlcG8uY291cnNlQ29udGVudHNcclxuICAgICAgLmluY2x1ZGUoXCJ0YXNrc1wiKVxyXG4gICAgICAuaW5jbHVkZUlkc09ubHkoKVxyXG4gICAgICAuaWRzKGNvdXJzZVRhYi5jb250ZW50cy5tYXAoKHtpZH0pID0+IGlkKSlcclxuICAgICAgLnRvVmFsdWUoKS5sb2FkKCk7XHJcbiAgICBcclxuICAgIGlmIChpc0tlZFN0YWZmKCkgJiYgc2Nob29sID09PSAnc3RhbmRhcmQnKSB7XHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIE9ubHkgcmVtb3ZlIHJlbGF0ZWQgY29udGVudHMgYW5kIHRhc2tzIGlmIHdlIGFyZSBkZWxldGluZyBhIHBoeXNpY2FsIHRhYiBoZXJlXHJcbiAgICAgIC8vXHJcbiAgICAgIGNvbnRlbnRzLmZvckVhY2goY29udGVudCA9PiB7XHJcbiAgICAgICAgY29udGVudC50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xyXG4gICAgICAgICAgZHJhZnRSZXBvLmNvdXJzZUNvbnRlbnRzLnJlbW92ZVJlbGF0ZWQoY29udGVudC5pZCwgXCJ0YXNrc1wiLCB0YXNrKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIGNvdXJzZVRhYi5jb250ZW50cy5mb3JFYWNoKGNvbnRlbnQgPT4ge1xyXG4gICAgICAgIGRyYWZ0UmVwby5jb3Vyc2VUYWJzLnJlbW92ZVJlbGF0ZWQoY291cnNlVGFiLmlkLCBcImNvbnRlbnRzXCIsIGNvbnRlbnQpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIGlmIChjb3Vyc2VUeXBlID09PSAndGhlbWUtY291cnNlJykge1xyXG4gICAgICBkcmFmdFJlcG8uY291cnNlSW5zdGFuY2VzLnJlbW92ZVJlbGF0ZWQoY291cnNlLmlkLCBcInRhYnNcIiwgY291cnNlVGFiKTtcclxuICAgIH0gZWxzZSBpZiAoYmxvY2tJZCkge1xyXG4gICAgICBkcmFmdFJlcG8uY291cnNlQmxvY2tzLnJlbW92ZVJlbGF0ZWQoYmxvY2tJZCwgXCJ0YWJzXCIsIGNvdXJzZVRhYik7XHJcbiAgICB9XHJcbiAgICBhd2FpdCBkYi5zYXZlTm93KCk7XHJcbiAgICBoaXN0b3J5LnB1c2goYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZS5pZH0vdGFicy8kL2RyYWZ0cy8ke2RyYWZ0SWR9L2VkaXRgKTtcclxuICB9fT5cclxuICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXRyYXNoXCIgYXJpYS1oaWRkZW49e3RydWV9IC8+Jm5ic3A7XHJcbiAgICAgICAge0xgVGEgYm9ydCBmbGlrZW5gfVxyXG4gIDwvZGl2PiA6IG51bGx9XHJcbiAgPGRpdj5cclxuICAgIDxBbGlnbkhvcml6b250YWw+XHJcbiAgICAgIDxIb3Jpem9udGFsSXRlbT5cclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG5cIlxyXG4gICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZS5pZH0vdGFicy8ke2FjdGl2ZVRhYiB8fCAnJCd9L2RyYWZ0cy8ke2RyYWZ0SWR9YCk7XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgID5cclxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWV5ZVwiIGFyaWEtaGlkZGVuPXt0cnVlfSAvPiZuYnNwO1xyXG4gICAgICAgICAge0xgRsO2cmhhbmRzZ3JhbnNrYWB9XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgIDxIb3Jpem9udGFsSXRlbT5cclxuICAgICAgICAmbmJzcDtcclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG5cIlxyXG4gICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZS5pZH0vaGlzdG9yeWApO1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1oaXN0b3J5XCIgYXJpYS1oaWRkZW49e3RydWV9IC8+Jm5ic3A7XHJcbiAgICAgICAgICB7TGBWZXJzaW9uc2hpc3RvcmlrYH1cclxuICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgPC9Ib3Jpem9udGFsSXRlbT5cclxuICAgICAgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICZuYnNwO1xyXG4gICAgICAgIDxidXR0b25cclxuICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZ1wiXHJcbiAgICAgICAgICBvbkNsaWNrPXthc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGF3YWl0IHB1Ymxpc2hDb3Vyc2Uoe1xyXG4gICAgICAgICAgICAgIHNjaG9vbCxcclxuICAgICAgICAgICAgICBjb3Vyc2UsXHJcbiAgICAgICAgICAgICAgZHJhZnRSZXBvOiBkYi5icmFuY2goZHJhZnRJZClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGF3YWl0IGRiLnNhdmVOb3coKTtcclxuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKGAvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2UuaWR9L3RhYnMvJHthY3RpdmVUYWIgfHwgJyQnfWApO1xyXG4gICAgICAgICAgfX1cclxuICA+XHJcbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1wbGF5XCIgYXJpYS1oaWRkZW49e3RydWV9IC8+Jm5ic3A7XHJcbiAgICAgICAgICB7TGBQdWJsaWNlcmFgfVxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICA8L0hvcml6b250YWxJdGVtPlxyXG4gICAgPC9BbGlnbkhvcml6b250YWw+XHJcbiAgPC9kaXY+XHJcbiAgPGJyLz5cclxuICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpPT5cclxuICAgICAgaGlzdG9yeS5wdXNoKGAvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2UuaWR9L3RhYnMvJHthY3RpdmVUYWIgfHwgJyQnfWApfT5cclxuICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFycm93LWxlZnRcIiBhcmlhLWhpZGRlbj17dHJ1ZX0gLz4mbmJzcDtcclxuICAgIHsvKnNjaG9vbCA9PT0gJ3N0YW5kYXJkJyA/XHJcbiAgICAgIExgVmlzYSBvZmZpY2llbGxhIHN0YW5kYXJkdmVyc2lvbmVuYCA6XHJcbiAgTGBWaXNhIHNrb2xhbnMgb2ZmaWNpZWxsYSB2ZXJzaW9uYCovIExgQXZzbHV0YSByZWRpZ2VyaW5nYH1cclxuXHJcbiAgPC9idXR0b24+XHJcblxyXG48Lz4pO1xyXG5cclxuIiwiaW1wb3J0IHsgS2VkVGFibGVOYW1lIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgTCwgbWF4TGVuZ3RoIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBDb3Vyc2VJbnN0YW5jZSwgQ291cnNlQmxvY2ssIENvdXJzZUNvbnRlbnQsIENvdXJzZVRhYiwgVGFzaywgRGVsdGFSZWxhdGlvbiB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuXHJcbmNvbnN0IFRleHQgPSBTeW1ib2woXCJUeXBlVGV4dFwiKTtcclxuY29uc3QgQ2hlY2tib3ggPSBTeW1ib2woXCJUeXBlQ2hlY2tib3hcIik7XHJcbmNvbnN0IE9ic2N1cmUgPSBTeW1ib2woXCJUeXBlT2JzdXJlXCIpO1xyXG5jb25zdCBIaWRkZW5DaGFuZ2UgPSBTeW1ib2woXCJUeXBlSGlkZGVuQ2hhbmdlXCIpO1xyXG5jb25zdCBIdG1sID0gU3ltYm9sKFwiVHlwZUh0bWxcIik7XHJcblxyXG5leHBvcnQgY29uc3QgZGVsdGFUeXBlcyA9IHtcclxuICBUZXh0LFxyXG4gIEh0bWwsXHJcbiAgQ2hlY2tib3gsXHJcbiAgT2JzY3VyZSxcclxuICBIaWRkZW5DaGFuZ2VcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEZyaWVuZGx5UHJvcFNwZWMgPSBbUHJvcGVydHlUeXBlLCBzdHJpbmddO1xyXG5cclxudHlwZSBQcm9wZXJ0eVR5cGUgPSB0eXBlb2YgZGVsdGFUeXBlc1trZXlvZiB0eXBlb2YgZGVsdGFUeXBlc107XHJcbnR5cGUgUHJvcGVydHlNYXA8VD4gPSB7W1AgaW4ga2V5b2YgVF0/OiBGcmllbmRseVByb3BTcGVjfTtcclxuXHJcbmludGVyZmFjZSBNb2RlbE5hbWVzIHtcclxuICBlbnRpdHlUeXBlczoge1t0YWJsZU5hbWVPckxhYmVsIGluIEtlZFRhYmxlTmFtZV0/OiBzdHJpbmd9XHJcbiAgbW9kaWZpZWRMaW5rczoge1tsYWJlbDogc3RyaW5nXTogW3N0cmluZywgc3RyaW5nXX1cclxuICBwcm9wZXJ0eU5hbWVzOlxyXG4gICAgUHJvcGVydHlNYXA8Q291cnNlSW5zdGFuY2U+ICZcclxuICAgIFByb3BlcnR5TWFwPENvdXJzZUJsb2NrPiAmXHJcbiAgICBQcm9wZXJ0eU1hcDxDb3Vyc2VDb250ZW50PiAmXHJcbiAgICBQcm9wZXJ0eU1hcDxDb3Vyc2VUYWI+ICZcclxuICAgIFByb3BlcnR5TWFwPFRhc2s+XHJcbiAgZ2V0TW9kaWZpZWRMaW5rSGVhZGluZyhkZWx0YVJlbGF0aW9uOiBEZWx0YVJlbGF0aW9uKTogc3RyaW5nO1xyXG4gIGdldFByb3BWYWwocDogYW55LCB0eXBlOiBQcm9wZXJ0eVR5cGUsIHByb3A6IHN0cmluZyk6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IG1vZGVsTmFtZXM6IE1vZGVsTmFtZXMgPSB7XHJcbiAgZW50aXR5VHlwZXM6IHtcclxuICAgIGNvdXJzZUJsb2NrczogTGBrdXJzYmxvY2tgLFxyXG4gICAgY291cnNlQ29udGVudHM6IExgaW5uZWjDpWxsc3J1dGFgLFxyXG4gICAgY291cnNlSW5zdGFuY2VzOiBMYGt1cnNgLFxyXG4gICAgY291cnNlVGFiczogTGBmbGlrYCxcclxuICAgIHNjaG9vbHM6IExgc2tvbGFgLFxyXG4gICAgdGFza3M6IExgdXBwZ2lmdGAsXHJcbiAgfSxcclxuICBtb2RpZmllZExpbmtzOiB7XHJcbiAgICB0YWJzOiBbTGBUaWxsYWdkIGZsaWtgLCBMYEJvcnR0YWdlbiBmbGlrYF0sXHJcbiAgICBibG9ja3M6IFtMYFRpbGxhZ3QgYmxvY2tgLCBMYEJvcnR0YWdldCBibG9ja2BdLFxyXG4gICAgYWJpbGl0aWVzOiBbTGBUaWxsYWdkIGbDtnJtw6VnYWAsIExgQm9ydHRhZ2VuIGbDtnJtw6VnYWBdLFxyXG4gICAgY2VudHJhbENvbnRlbnQ6IFtMYFRpbGxhZ3QgY2VudHJhbHQgaW5uZWjDpWxsYCwgTGBCb3J0dGFnZXQgY2VudHJhbHQgaW5uZWjDpWxsYF0sXHJcbiAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IFtMYFRpbGxhZ3Qga3Vuc2thcHNrcmF2YCwgTGBCb3J0dGFnZXQga3Vuc2thcHNrcmF2YF0sXHJcbiAgICB0YXNrczogW0xgVGlsbGFnZCB1cHBnaWZ0YCwgTGBCb3J0dGFnZW4gdXBwZ2lmdGBdLFxyXG4gICAgY29udGVudHM6IFtMYFRpbGxhZ2QgaW5uZWjDpWxsc3J1dGFgLCBMYEJvcnR0YWdlbiBpbm5laMOlbGxzcnV0YWBdXHJcbiAgfSxcclxuICBwcm9wZXJ0eU5hbWVzOiB7XHJcbiAgICBhbGxvd0FkZFRhYnM6IFtDaGVja2JveCwgTGDDhG5kcmF0IG9tIHRpbGzDpGdnIGF2IGZsaWsgc2thIHZhcmEgdGlsbMOldGV0YF0sXHJcbiAgICBhbGxvd1JlbW92ZVRhYnM6IFtDaGVja2JveCwgTGDDhG5kcmF0IG9tIGJvcnR0YWduaW5nIGF2IGZsaWsgc2thIHZhcmEgdGlsbMOldGV0YF0sXHJcbiAgICBhbGxvd1Jlb3JkZXJUYWJzOiBbQ2hlY2tib3gsIExgw4RuZHJhdCBvbSBkZXQgc2thIHZhIHRpbGzDpXRldCBhdHQgw6RuZHJhIG9yZG5pbmcgcMOlIGZsaWtgXSxcclxuICAgIGFzc2lnbm1lbnQ6IFtDaGVja2JveCwgTGDDhG5kcmFkIGZsYWdnYSBmw7ZyIGlubMOkbW5pbmdzdXBwZ2lmdGBdLFxyXG4gICAgY29tbW9uTGVhcm5pbmdHb2FsczogW1RleHQsIExgw4RuZHJhZGUgZ2VtZW5zYW1tYSBsw6RyYW5kZW3DpWxgXSxcclxuICAgIGNvbnRlbnQ6IFtIdG1sLCBMYMOEbmRyYWQgaW5uZWjDpWxsc3RleHRgXSxcclxuICAgIGNyZWF0ZWRCeTogW0hpZGRlbkNoYW5nZSwgTGBTa2FwYWQgYXZgXSxcclxuICAgIGNyZWF0ZWREYXRlOiBbSGlkZGVuQ2hhbmdlLCBMYFNrYXBhZCBkYXR1bWBdLFxyXG4gICAgZGF0ZVRpbWU6IFtPYnNjdXJlLCBMYMOEbmRhdCBkYXR1bSAvIHRpZGBdLFxyXG4gICAgZGVhZGxpbmU6IFtUZXh0LCBMYMOEbmRyYXQgaW5sw6RtbmluZ3NkYXR1bWBdLFxyXG4gICAgZGVzY3JpcHRpb246IFtIdG1sLCBMYMOEbmRyYWQgYmVza3Jpdm5pbmdgXSxcclxuICAgIGVtYmVkZGVkSHRtbDogW09ic2N1cmUsIExgTGFndCB0aWxsIGluYsOkZGRhZCBIVE1MYF0sXHJcbiAgICBleHBsYWluZWRSZXF1aXJlbWVudHM6IFtPYnNjdXJlLCBMYExhZ3QgdGlsbCBlZ25hIGbDtnJrbGFyaW5nYXIgYXYga3Vuc2thcHNrcmF2YF0sXHJcbiAgICBmdXR1cmVBYmlsaXRpZXM6IFtUZXh0LCBMYMOEbmRyYWRlIGZyYW10aWRzZsO2cm3DpWdvcmBdLFxyXG4gICAgaGFzQ29tbW9uTGVhcm5pbmdHb2FsczogW0NoZWNrYm94LCBMYMOEbmRyYWQgaW5zdMOkbGxuaW5nIGbDtnIgZ2VtZW5zYW1tYSBsw6RyYW5kZW3DpWxgXSxcclxuICAgIGhpZGRlbjogW0NoZWNrYm94LCBMYMOEbmRyYWQgZmxhZ2dhIFwiZ8O2bWRcImBdLCAvLyBUaGlzIHByb3Agc2hvdWxkIG5vdCBiZSB1c2VkIEkgdGhpbmtcclxuICAgIGhpZGRlblRhc2tzOiBbT2JzY3VyZSwgTGDDhG5kcmF0IGxpc3RhbiBww6UgZ8O2bWRhIHVwcGdpZnRlcmBdLCAvLyBJIHRoaW5rIHRoaXMgcHJvcCBzaG91bGQgbm90IGJlIHVzZWRcclxuICAgIGh0bWw6IFtPYnNjdXJlLCBMYMOEbmRyYXQgaW5uZWjDpWxsYF0sXHJcbiAgICBsZWFybmluZ0dvYWw6IFtUZXh0LCBMYEzDpHJhbmRlbcOlbGBdLFxyXG4gICAgbG9ja0RlbGV0ZTogW0NoZWNrYm94LCBMYMOEbmRyYXQgZmxhZ2dhOiBcImzDpXMgZnLDpW4gYm9ydHRhZ25pbmdcImBdLFxyXG4gICAgbG9ja2VkOiBbQ2hlY2tib3gsIExgw4RuZHJhZCBmbGFnZ2E6IFwiZsO2cmJqdWQgw6RuZHJpbmcgYXYgZmxpa2FyXCJgXSxcclxuICAgIG1pZ3JhdGVkVGV4dHM6IFtPYnNjdXJlLCBMYMOEbmRyaW5nYXIgaSBtaWdyZXJhZGUgdGV4dGVyIGZyw6VuIHNrb2x2ZXJrZXRgXSxcclxuICAgIG1vZGlmaWVkQnk6IFtIaWRkZW5DaGFuZ2UsIExgw4RuZHJhZCBhdmBdLFxyXG4gICAgbW9kaWZpZWREYXRlOiBbSGlkZGVuQ2hhbmdlLCBMYMOEbmRyaW5nc2RhdHVtYF0sXHJcbiAgICB0YXNrT3JkZXI6IFtPYnNjdXJlLCBMYMOEbmRyYWQgb3JkbmluZyBww6UgdXBwZ2lmdGVyYF0sXHJcbiAgICBuYW1lOiBbVGV4dCwgTGDDhG5kcmF0IG5hbW5gXSxcclxuICAgIG9yZGVyOiBbT2JzY3VyZSwgTGDDhG5kcmFkIG9yZG5pbmdgXSxcclxuICAgIHJlc291cmNlczogW09ic2N1cmUsIExgw4RuZHJhZGUgaSByZXN1cnNlcmBdLFxyXG4gICAgc2Nob29sOiBbVGV4dCwgTGBTa29sYWBdLCAvLyBNdXN0IG5ldmVyIGJlIHVuZG9uZSBpc29sYXRlZCB3aXRob3V0IGxvZ2ljXHJcbiAgICBzdGVwTm86IFtUZXh0LCBMYFN0ZWdudW1tZXJgXSwgLy8gTXVzdCBuZXZlciBiZSB1bmRvbmUgaXNvbGF0ZWQgd2l0aG91dCBsb2dpY1xyXG4gICAgc3RlcE51bWJlcnM6IFtUZXh0LCBMYFN0ZWdudW1tZXJgXSwvLyBNdXN0IG5ldmVyIGJlIHVuZG9uZSBpc29sYXRlZCB3aXRob3V0IGxvZ2ljXHJcbiAgICBzdWJqZWN0OiBbVGV4dCwgTGDDhG1uZWBdLCAvLyBNdXN0IG5ldmVyIGJlIHVuZG9uZSBpc29sYXRlZCB3aXRob3V0IGxvZ2ljXHJcbiAgICBzdWJqZWN0czogW09ic2N1cmUsIExgw4RtbmVuYF0sIC8vIE11c3QgbmV2ZXIgYmUgdW5kb25lIGlzb2xhdGVkIHdpdGhvdXQgbG9naWNcclxuICAgIHRhYkNsYXNzOiBbVGV4dCwgTGBUeXAgYXYgZmxpa2BdLCAvLyBNdXN0IG5ldmVyIGJlIHVuZG9uZSBpc29sYXRlZCB3aXRob3V0IGxvZ2ljXHJcbiAgICB0YWJUaXRsZTogW0hpZGRlbkNoYW5nZSwgTGBGbGlrbmFtbmBdLCAvLyBEZXByZWNhdGVkXHJcbiAgICB0YXNrVHlwZTogW1RleHQsIExgVXBwZ2lmdHN0eXBgXSxcclxuICAgIHVybDogW1RleHQsIExgVXJsYF0sXHJcbiAgICB3b3JraW5nUHJvY2VkdXJlOiBbSHRtbCwgTGBBcmJldHNwcm9jZXNzYF0sXHJcbiAgICB5b3V0dWJlSWQ6IFtPYnNjdXJlLCBMYFlvdXR1YmUgSURgXVxyXG4gIH0sXHJcbiAgZ2V0TW9kaWZpZWRMaW5rSGVhZGluZyhkZWx0YTogRGVsdGFSZWxhdGlvbikge1xyXG4gICAgY29uc3QgaGVhZGluZ1NwZWMgPSBtb2RlbE5hbWVzLm1vZGlmaWVkTGlua3NbZGVsdGEubGFiZWxdO1xyXG4gICAgaWYgKCFoZWFkaW5nU3BlYykge1xyXG4gICAgICByZXR1cm4gZGVsdGEudHlwZSA9PT0gJ2FkZCcgPyBMYFRpbGxhZ3Qgb2JqZWt0YCA6XHJcbiAgICAgICBkZWx0YS50eXBlID09PSAncmVtb3ZlJyA/IExgQm9ydHRhZ2V0IG9iamVrdGAgOlxyXG4gICAgICAgTGDDhW5ncmFkIGzDpG5rbmluZ2A7IC8vIFNob3VsZCBuZXZlciBiZVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRlbHRhLnR5cGUgPT09ICdhZGQnID9cclxuICAgICAgaGVhZGluZ1NwZWNbMF0gOiBkZWx0YS50eXBlID09PSAncmVtb3ZlJyA/XHJcbiAgICAgIGhlYWRpbmdTcGVjWzFdIDogTGDDhW5ncmFkIGzDpG5rbmluZ2A7IC8vIFNob3VsZCBuZXZlciBiZVxyXG4gIH0sXHJcbiAgZ2V0UHJvcFZhbChwOiBhbnksIHR5cGU6IFByb3BlcnR5VHlwZSwgcHJvcDogc3RyaW5nKSB7XHJcbiAgICBzd2l0Y2ggKHApIHtcclxuICAgICAgY2FzZSB0cnVlOiByZXR1cm4gTGBQw6VzbGFnZXRgO1xyXG4gICAgICBjYXNlIGZhbHNlOiByZXR1cm4gTGBBdnNsYWdldGA7XHJcbiAgICAgIGNhc2UgJ3ByaW1hcnknOiByZXR1cm4gTGBHcnVuZHNrb2xhYDtcclxuICAgICAgY2FzZSAnZ3ltbmFzaXVtJzogcmV0dXJuIExgR3ltbmFzaWVza29sYWA7XHJcbiAgICAgIGNhc2UgJ2V4ZXJjaXNlJzogcmV0dXJuIExgw5Z2bmluZ3N1cHBnaWZ0YDtcclxuICAgICAgY2FzZSAndGFzayc6IHJldHVybiBMYFVwcGdpZnRgO1xyXG4gICAgICBjYXNlICdhc3NpZ25tZW50JzogcmV0dXJuIExgSW5sw6RtbmluZ3N1cHBnaWZ0YDtcclxuICAgICAgY2FzZSAndGhlbWUtY291cnNlJzogcmV0dXJuIExgVGVtYWt1cnNgO1xyXG4gICAgICBjYXNlICdzdGVwLWNvdXJzZSc6IHJldHVybiBMYFN0ZWdrdXJzYDtcclxuICAgICAgY2FzZSAnaW50cm8tdGFiJzogcmV0dXJuIExgSW50cm9kdWt0aW9uc2ZsaWtgO1xyXG4gICAgICBjYXNlICdydW4tdXAtdGFiJzogcmV0dXJuIExgVXBwdGFrdGA7XHJcbiAgICAgIGNhc2UgJ3N1YmplY3QtdGFiJzogcmV0dXJuIExgw4RtbmVzZmxpa2A7XHJcbiAgICAgIGNhc2UgJ21pc3Npb24tdGFiJzogcmV0dXJuIExgVXBwZHJhZ3NmbGlrYDtcclxuICAgICAgY2FzZSAnY29udGVudC10YWInOiByZXR1cm4gTGBJbm5laMOlbGxzZmxpa2A7XHJcbiAgICAgIGNhc2UgJ3RlYWNoZXItdGFiJzogcmV0dXJuIExgTMOkcmFyc2lkYWA7XHJcbiAgICAgIGNhc2UgJ3dvcmQtYmFuay10YWInOiByZXR1cm4gTGBPcmRiYW5rYDtcclxuICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgIGlmIChwID09IG51bGwpIHJldHVybiBMYE5vbGxzdMOkbGx0YDtcclxuICAgICAgICBpZiAocCA9PT0gXCJcIikgcmV0dXJuIExgKHRvbXQpYDtcclxuICAgICAgICBpZiAodHlwZSA9PT0gSHRtbCkgcmV0dXJuIG1heExlbmd0aChyZW1vdmVIdG1sVGFncyhwKSwgMzAwKTtcclxuICAgICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKSByZXR1cm4gcDtcclxuICAgICAgICBpZiAocC5zdWJqZWN0TmFtZSkgcmV0dXJuIHAuc3ViamVjdE5hbWU7XHJcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHAsIG51bGwsIDIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSHRtbFRhZ3MoaHRtbDogc3RyaW5nKSB7XHJcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgZGl2LmlubmVySFRNTCA9IGh0bWw7XHJcbiAgcmV0dXJuIGRpdi5pbm5lclRleHQ7XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgRGVsdGFEb2MgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IG1heExlbmd0aCwgY2FwaXRhbGl6ZUZpcnN0LCBMIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBtb2RlbE5hbWVzLCBGcmllbmRseVByb3BTcGVjLCBkZWx0YVR5cGVzIH0gZnJvbSAnLi9tb2RlbC1mcmllbmRseS1uYW1lcyc7XHJcbmltcG9ydCB7IHNob3J0RGF0ZUZvcm1hdCB9IGZyb20gJy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL3V0aWxzJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgZGVsdGE6IERlbHRhRG9jXHJcbiAgZWRpdGFibGU6IGJvb2xlYW5cclxuICBvbkRlbGV0ZTogKCk9PnZvaWRcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIERlbHRhRG9jQm94ICh7ZGVsdGEsIGVkaXRhYmxlLCBvbkRlbGV0ZX06IFByb3BzKSB7XHJcbiAgY29uc3QgZW50aXR5TmFtZSA9IGRlbHRhLnRhcmdldE5hbWUgJiYgbWF4TGVuZ3RoKGRlbHRhLnRhcmdldE5hbWUsIDgwKTtcclxuICBjb25zdCBjbGFzc05hbWVzID0gW1wic2Nob29sQ291cnNlXCJdO1xyXG4gIGlmIChkZWx0YS4kbWV0YSkgY2xhc3NOYW1lcy5wdXNoKGBlbnRpdHltZXRhLSR7ZGVsdGEuJG1ldGF9YCk7XHJcblxyXG4gIGNvbnN0IGZyaWVuZGx5RW50aXR5VHlwZSA9IGNhcGl0YWxpemVGaXJzdChcclxuICAgIG1vZGVsTmFtZXMuZW50aXR5VHlwZXNbZGVsdGEudGFibGVdIHx8IGRlbHRhLnRhYmxlKTtcclxuXHJcbiAgY29uc3QgZnJpZW5kbHlQcm9wcyA9IE9iamVjdC5rZXlzKGRlbHRhLmRhdGEpLm1hcChwcm9wID0+XHJcbiAgICAoe1xyXG4gICAgICBwcm9wU3BlYzogbW9kZWxOYW1lcy5wcm9wZXJ0eU5hbWVzW3Byb3BdIGFzIEZyaWVuZGx5UHJvcFNwZWMsXHJcbiAgICAgIHByb3BcclxuICAgIH0pKTtcclxuICBjb25zdCBoYXNVbmtub3duUHJvcHMgPSBmcmllbmRseVByb3BzLnNvbWUoZnAgPT4gIWZwLnByb3BTcGVjKTtcclxuICBcclxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMuam9pbignICcpfT5cclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICB7ZWRpdGFibGUgPyA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBwdWxsLXJpZ2h0XCI+XHJcbiAgICAgICAgPGEgY2xhc3NOYW1lPVwicmVtb3ZlSXRlbVwiIG9uQ2xpY2s9e29uRGVsZXRlfT48L2E+XHJcbiAgICAgIDwvZGl2PiA6IG51bGx9XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAge2VudGl0eU5hbWUgP1xyXG4gICAgICAgICAgPGE+e2ZyaWVuZGx5RW50aXR5VHlwZX0gXCJ7ZW50aXR5TmFtZX1cIjwvYT4gOlxyXG4gICAgICAgICAgPGE+e2ZyaWVuZGx5RW50aXR5VHlwZX08L2E+fVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAge2ZyaWVuZGx5UHJvcHMuZmlsdGVyKCh7cHJvcFNwZWN9KSA9PiBwcm9wU3BlYykubWFwKCh7cHJvcFNwZWM6IFt0eXBlLCBwcm9wTmFtZV0sIHByb3B9KSA9PlxyXG4gICAgICA8ZGl2IGtleT17cHJvcH0+XHJcbiAgICAgICAge3R5cGUgPT09IGRlbHRhVHlwZXMuT2JzY3VyZSA/XHJcbiAgICAgICAgICA8cD57cHJvcE5hbWV9PC9wPiA6XHJcbiAgICAgICAgICB0eXBlID09PSBkZWx0YVR5cGVzLkhpZGRlbkNoYW5nZSA/IG51bGwgOlxyXG4gICAgICAgICAgPHA+e3Byb3BOYW1lfToge21vZGVsTmFtZXMuZ2V0UHJvcFZhbChkZWx0YS5kYXRhW3Byb3BdLCB0eXBlLCBwcm9wKX08L3A+fVxyXG4gICAgICA8L2Rpdj4pfVxyXG4gICAge2hhc1Vua25vd25Qcm9wcyA/IDxkaXY+XHJcbiAgICAgIDxwIHRpdGxlPXtKU09OLnN0cmluZ2lmeShkZWx0YS5kYXRhLCBudWxsLCA0KX0+e0xgw4RuZHJpbmdhciBpIGludGVybmEgZWdlbnNrYXBlcmB9PC9wPlxyXG4gICAgPC9kaXY+IDogbnVsbH1cclxuICAgIDxkaXY+XHJcbiAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XHJcbiAgICAgICAgICB7c2hvcnREYXRlRm9ybWF0KGRlbHRhLmRhdGVUaW1lKX0ge2RlbHRhLmNvbnRyaWJ1dG9ycy5qb2luKCcsICcpfVxyXG4gICAgICA8L3A+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj47XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBEZWx0YVJlbGF0aW9uIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBtYXhMZW5ndGgsIEwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IG1vZGVsTmFtZXMsIEZyaWVuZGx5UHJvcFNwZWMsIGRlbHRhVHlwZXMsIHJlbW92ZUh0bWxUYWdzIH0gZnJvbSAnLi9tb2RlbC1mcmllbmRseS1uYW1lcyc7XHJcbmltcG9ydCB7IHNob3J0RGF0ZUZvcm1hdCB9IGZyb20gJy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL3V0aWxzJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgZGVsdGE6IERlbHRhUmVsYXRpb25cclxuICBlZGl0YWJsZTogYm9vbGVhblxyXG4gIG9uRGVsZXRlOiAoKT0+dm9pZFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRGVsdGFMaW5rQm94ICh7ZGVsdGEsIGVkaXRhYmxlLCBvbkRlbGV0ZX06IFByb3BzKSB7XHJcbiAgY29uc3QgZW50aXR5TmFtZSA9IGRlbHRhLnRhcmdldE5hbWUgJiYgbWF4TGVuZ3RoKHJlbW92ZUh0bWxUYWdzKGRlbHRhLnRhcmdldE5hbWUpLCA4MCk7XHJcbiAgY29uc3QgY2xhc3NOYW1lcyA9IFtcInNjaG9vbENvdXJzZVwiXTtcclxuICBpZiAoZGVsdGEuJG1ldGEpIGNsYXNzTmFtZXMucHVzaChgZW50aXR5bWV0YS0ke2RlbHRhLiRtZXRhfWApO1xyXG5cclxuICBjb25zdCBmcmllbmRseU9wZXJhdGlvbiA9IG1vZGVsTmFtZXMuZ2V0TW9kaWZpZWRMaW5rSGVhZGluZyhkZWx0YSk7XHJcbiAgXHJcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbGFzc05hbWVzLmpvaW4oJyAnKX0+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAge2VkaXRhYmxlID8gPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgcHVsbC1yaWdodFwiPlxyXG4gICAgICAgIDxhIGNsYXNzTmFtZT1cInJlbW92ZUl0ZW1cIiBvbkNsaWNrPXtvbkRlbGV0ZX0+PC9hPlxyXG4gICAgICA8L2Rpdj4gOiBudWxsfVxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgIHtlbnRpdHlOYW1lID9cclxuICAgICAgICAgIDxhPntmcmllbmRseU9wZXJhdGlvbn0gXCJ7ZW50aXR5TmFtZX1cIjwvYT4gOlxyXG4gICAgICAgICAgPGE+e2ZyaWVuZGx5T3BlcmF0aW9ufTwvYT59XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2PlxyXG4gICAgICA8cCBjbGFzc05hbWU9XCJzbWFsbFwiPlxyXG4gICAgICAgICAge3Nob3J0RGF0ZUZvcm1hdChkZWx0YS5kYXRlVGltZSl9IHtkZWx0YS5jb250cmlidXRvcn1cclxuICAgICAgPC9wPlxyXG4gICAgPC9kaXY+XHJcbiAgPC9kaXY+O1xyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgTGF6eUNvbnRlbnQgfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGF6eS1jb250ZW50JztcclxuaW1wb3J0IHsgRGVsdGEsIERlbHRhRG9jLCBEZWx0YVJlbGF0aW9uIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBEZWx0YURvY0JveCB9IGZyb20gJy4vZGVsdGFkb2MtYm94JztcclxuaW1wb3J0IHsgRGVsdGFMaW5rQm94IH0gZnJvbSAnLi9kZWx0YWxpbmstYm94JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgYnJhbmNoSWQ6IHN0cmluZztcclxuICBlZGl0YWJsZTogYm9vbGVhbjtcclxuICB0YWc/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlbHRhS2V5KGRlbHRhOiBEZWx0YSkge1xyXG4gIGlmIChkZWx0YS50eXBlID09PSAnbW9kaWZ5JylcclxuICAgIHJldHVybiBkZWx0YS50YXJnZXRJZDtcclxuICByZXR1cm4gZGVsdGEuc291cmNlSWQgKyBkZWx0YS5sYWJlbCArIGRlbHRhLnRhcmdldElkO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gRGVsdGFWaWV3ICh7YnJhbmNoSWQsIHRhZywgZWRpdGFibGV9OiBQcm9wcykge1xyXG4gIGxldCBkZWx0YXMgPSBkYi5icmFuY2goYnJhbmNoSWQpLmRlbHRhcztcclxuICBpZiAodGFnKSB7XHJcbiAgICBkZWx0YXMgPSBkZWx0YXMudGFncyh0YWcpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIDxMYXp5Q29udGVudD5cclxuICAgIHtkZWx0YXMudG9WYWx1ZSgpLm1hcChkZWx0YXMgPT5cclxuICAgICAgZGVsdGFzLmxlbmd0aCA9PT0gMCA/IDxkaXY+XHJcbiAgICAgICAgPHAgc3R5bGU9e3tvcGFjaXR5OiAwLjUsIGZvbnRTdHlsZTogJ2l0YWxpYyd9fT57dGFnID9cclxuICAgICAgICAgIExgU2tvbGFucyB2ZXJzaW9uIMOkciBpZGVudGlzayBtZWQgb3JnaW5hbGV0YCA6XHJcbiAgICAgICAgICBMYERldCBmaW5ucyBpbmdhIMOkbmRyaW5nYXIgYXR0IHB1YmxpY2VyYS5gfTwvcD5cclxuICAgICAgPC9kaXY+IDpcclxuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIE5vcm1hbCB2aWV3IChsaXN0IGFsbCBjaGFuZ2VzICsgb3B0aW9uIHRvIGNsZWFyIGFsbClcclxuICAgICAgLy9cclxuICAgICAgPD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXIgb2RkLWV2ZW5cIj5cclxuICAgICAgICAgIHtkZWx0YXMubWFwKGRlbHRhID0+IHtcclxuICAgICAgICAgICAgY29uc3Qga2V5ID0gZGVsdGFLZXkoZGVsdGEpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVsdGEudHlwZSA9PT0gJ21vZGlmeScgP1xyXG4gICAgICAgICAgICAgIDxEZWx0YURvY0JveCBkZWx0YT17ZGVsdGF9IGVkaXRhYmxlPXtlZGl0YWJsZX0ga2V5PXtrZXl9IG9uRGVsZXRlPXsoKT0+e1xyXG4gICAgICAgICAgICAgICAgLy8gVW5kbyBEZWx0YURvY1xyXG4gICAgICAgICAgICAgICAgdW5kb0RlbHRhRG9jKGRlbHRhKTtcclxuICAgICAgICAgICAgICB9fSAvPiA6XHJcbiAgICAgICAgICAgICAgPERlbHRhTGlua0JveCBkZWx0YT17ZGVsdGF9IGVkaXRhYmxlPXtlZGl0YWJsZX0ga2V5PXtrZXl9IG9uRGVsZXRlPXsoKT0+e1xyXG4gICAgICAgICAgICAgICAgLy8gVW5kbyBMaW5rXHJcbiAgICAgICAgICAgICAgICB1bmRvRGVsdGFSZWxhdGlvbihkZWx0YSk7XHJcbiAgICAgICAgICAgICAgfX0gLz47XHJcbiAgICAgICAgICB9KX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2UgYnRuLXdhcm5pbmdcIlxyXG4gICAgICAgICAgb25DbGljaz17KCk9PntcclxuICAgICAgICAgICAgaWYgKGNvbmZpcm0odGFnID9cclxuICAgICAgICAgICAgICBMYMOFdGfDpHJkZW4gw6V0ZXJzdMOkbGxldCBrdXJzZW4gdGlsbCBzdGFuZGFyZC5cXG5cXG5WaWxsIGR1IGZvcnRzw6R0dGE/YCA6IFxyXG4gICAgICAgICAgICAgIExgw4V0Z8OkcmRlbiByYWRlcmFyIHNhbXRsaWdhIMOkbmRyaW5nYXIgc29tIMOkbm51IGludGUgw6RyIHB1YmxpY2VyYWRlLlxcblxcblZpbGwgZHUgZm9ydHPDpHR0YT9gKSlcclxuICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlbHRhIG9mIGRlbHRhcykge1xyXG4gICAgICAgICAgICAgICAgICBpZiAoZGVsdGEudHlwZSA9PT0gJ21vZGlmeScpIHtcclxuICAgICAgICAgICAgICAgICAgICB1bmRvRGVsdGFEb2MoZGVsdGEpO1xyXG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHVuZG9EZWx0YVJlbGF0aW9uKGRlbHRhKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH19XHJcbiAgICAgICAgPnt0YWcgP1xyXG4gICAgICAgICAgTGDDhXRlcnN0w6RsbCB0aWxsIG9yZ2luYWxldGA6XHJcbiAgICAgICAgICBMYFJhZGVyYSBhbGxhIG9wdWJsaWNlcmFkZSDDpG5kcmluZ2FyYFxyXG4gICAgICAgICAgfTwvYnV0dG9uPlxyXG4gICAgICA8Lz5cclxuICAgICl9XHJcbiAgPC9MYXp5Q29udGVudD5cclxuXHJcbiAgZnVuY3Rpb24gdW5kb0RlbHRhUmVsYXRpb24oZGVsdGE6IERlbHRhUmVsYXRpb24pIHtcclxuICAgIGRiLmJyYW5jaChicmFuY2hJZCkudGFibGUoZGVsdGEuc291cmNlVGFibGUpXHJcbiAgICAgIC51bmRvTGluayhkZWx0YS5zb3VyY2VJZCwgZGVsdGEubGFiZWwsIGRlbHRhLnRhcmdldElkKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHVuZG9EZWx0YURvYyhkZWx0YTogRGVsdGFEb2MpIHtcclxuICAgIGNvbnN0IHVuZG9pbmdzID0ge307XHJcbiAgICBPYmplY3Qua2V5cyhkZWx0YS5kYXRhKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIHVuZG9pbmdzW2tleV0gPSB7ICR1bnNldDogMCB9O1xyXG4gICAgfSk7XHJcbiAgICBkYi5icmFuY2goYnJhbmNoSWQpLnRhYmxlKGRlbHRhLnRhYmxlKS51cGRhdGUoe1xyXG4gICAgICBpZDogZGVsdGEudGFyZ2V0SWQsXHJcbiAgICAgIG5hbWU6IGRlbHRhLnRhcmdldE5hbWVcclxuICAgIH0sIHVuZG9pbmdzKTtcclxuICB9XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBEZWx0YVZpZXcgfSBmcm9tICcuL2RlbHRhLXZpZXcnO1xyXG5cclxudHlwZSBQcm9wcyA9IHtcclxuICBicmFuY2hJZDogc3RyaW5nXHJcbiAgYnJhbmNoVHlwZTogJ3NjaG9vbC1icmFuY2gnXHJcbiAgY291cnNlSWQ6IHN0cmluZ1xyXG4gIGlzQWRtaW46IGJvb2xlYW5cclxufSB8IHtcclxuICBicmFuY2hJZDogc3RyaW5nXHJcbiAgYnJhbmNoVHlwZTogJ2RyYWZ0LWJyYW5jaCdcclxuICBpc0FkbWluOiBib29sZWFuXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVmVyc2lvbkhpc3RvcnlCb3gocHJvcHM6IFByb3BzKSB7XHJcbiAgY29uc3QgdGl0bGUgPSBwcm9wcy5icmFuY2hUeXBlID09PSAnc2Nob29sLWJyYW5jaCcgP1xyXG4gICAgPGgyPntMYFNrb2xhbnMgw6RuZHJpbmdhcmB9PC9oMj4gOlxyXG4gICAgPGgzPntMYE9wdWJsaWNlcmFkZSDDpG5kcmluZ2FyYH08L2gzPjtcclxuXHJcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkXCI+XHJcbiAgICB7dGl0bGV9XHJcbiAgICA8RGVsdGFWaWV3XHJcbiAgICAgIGJyYW5jaElkPXtwcm9wcy5icmFuY2hJZH1cclxuICAgICAgZWRpdGFibGU9eyFwcm9wcy5pc0FkbWlufVxyXG4gICAgICB0YWc9e3Byb3BzLmJyYW5jaFR5cGUgPT09ICdzY2hvb2wtYnJhbmNoJyA/IHByb3BzLmNvdXJzZUlkIDogbnVsbH0gLz5cclxuICA8L2Rpdj47XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU3RyaXBHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBSZXNvdXJjZUxpc3QsIENvdXJzZUNvbnRlbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgbGl2ZVF1ZXJ5VmlldyB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9saXZlLXF1ZXJ5LXZpZXcnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIGNvbnRlbnQ6IFZhbHVlPFN0cmlwR3JhcGhzPENvdXJzZUNvbnRlbnQ+PjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJlc291cmNlTGlzdFZpZXcgPSBsaXZlUXVlcnlWaWV3KCh7IGNvbnRlbnQgfTogUHJvcHMpID0+XHJcbiAgICBjb250ZW50Lm1hcChjb250ZW50UmVzb3VyY2VzID0+IHtcclxuICAgICAgICB2YXIgcmVzb3VyY2VMaXN0ID0gKGNvbnRlbnRSZXNvdXJjZXMgYXMgUmVzb3VyY2VMaXN0IHwgdW5kZWZpbmVkKTtcclxuICAgICAgICByZXR1cm4gPGRpdj5cclxuICAgICAgICAgICAge3Jlc291cmNlTGlzdCAmJiByZXNvdXJjZUxpc3QucmVzb3VyY2VzLmxlbmd0aCA+IDAgJiYgPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWQga3BNZW51XCI+XHJcbiAgICAgICAgICAgICAgICA8aDI+UmVzdXJzZXI8L2gyPlxyXG4gICAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlTGlzdC5yZXNvdXJjZXMubWFwKHJlcyA9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17cmVzLnVybH0gdGFyZ2V0PVwiX2JsYW5rXCI+e3Jlcy5uYW1lfTwvYT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICB9KSlcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgQ291cnNlSW5zdGFuY2UsIEJyYW5jaCwgQ291cnNlQmxvY2ssIENvdXJzZVRhYiB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgV2l0aEdyYXBocywgS2VkQmFja2VuZFJlcG8gfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBDb3Vyc2VUYWJBcmVhIH0gZnJvbSAnLi9jb3Vyc2UtdGFiLWFyZWEnO1xyXG5pbXBvcnQgeyBDb3Vyc2VTZXR0aW5nc0FyZWEgfSBmcm9tICcuL2NvdXJzZS1zZXR0aW5ncy1hcmVhJztcclxuaW1wb3J0IHsgTCwgc2hvd0Vycm9yLCBjb21wYXJlUHJvcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgRWRpdG9yRm9vdGVyQnV0dG9ucyB9IGZyb20gJy4vZWRpdG9yLWZvb3Rlci1idXR0b25zJztcclxuaW1wb3J0IHsgVHdvQ29sdW1uc1BhZ2UgfSBmcm9tICcuLi9jb21tb24vdHdvLWNvbHVtbnMtcGFnZSc7XHJcbmltcG9ydCB7IFdlZWtQbGFubmVyIH0gZnJvbSAnLi4vLi4vd2Vla3BsYW5uZXIvd2Vla3BsYW5uZXInO1xyXG5pbXBvcnQgeyBpc1RlYWNoZXJBdFNjaG9vbCB9IGZyb20gJy4uLy4uLy4uL2FjY2Vzcy1jb250cm9sJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgY2ZnIGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcbmltcG9ydCB7IHdpdGhSb3V0ZXIsIFJvdXRlQ29tcG9uZW50UHJvcHMgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgSG9yaXpvbnRhbEl0ZW0gfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvaG9yaXpvbnRhbC1pdGVtJztcclxuaW1wb3J0IHsgQWxpZ25Ib3Jpem9udGFsIH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2FsaWduLWhvcml6b250YWwnO1xyXG5pbXBvcnQgeyBwdWJsaXNoQ291cnNlIH0gZnJvbSAnLi4vbG9naWMvcHVibGlzaC1jb3Vyc2UnO1xyXG5pbXBvcnQgeyBkYiwgQ291cnNlSW5zdGFuY2VzIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9kYic7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IGNvbXB1dGVQcmVkZXN0aW5hdGVkSWQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IFZlcnNpb25IaXN0b3J5Qm94IH0gZnJvbSAnLi92ZXJzaW9uLWhpc3RvcnkvdmVyc2lvbi1oaXN0b3J5LWJveCc7XHJcbmltcG9ydCB7IFJlc291cmNlTGlzdFZpZXcgfSBmcm9tICcuL2NvdXJzZS1jb250ZW50cy9yZXNvdXJjZS1saXN0LXZpZXcnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgUm91dGVDb21wb25lbnRQcm9wcyB7XHJcbiAgc2Nob29sOiBzdHJpbmc7XHJcbiAgY291cnNlSWQ6IHN0cmluZztcclxuICBkcmFmdElkOiBzdHJpbmc7XHJcbiAgY291cnNlOiBXaXRoR3JhcGhzPENvdXJzZUluc3RhbmNlLCBcInRhYnNcIiB8IFwiYmxvY2tzXCI+XHJcbiAgYnJhbmNoOiBLZWRCYWNrZW5kUmVwb1xyXG4gIHRhYnM6IENvdXJzZVRhYltdXHJcbiAgYWN0aXZlVGFiOiBzdHJpbmc7XHJcbiAgZWRpdE1vZGU/OiBib29sZWFuO1xyXG4gIGJsb2NrOiBDb3Vyc2VCbG9jayB8IG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDb3Vyc2VBcmVhID0gd2l0aFJvdXRlcigoe1xyXG4gIHNjaG9vbCxcclxuICBjb3Vyc2VJZCxcclxuICBkcmFmdElkLFxyXG4gIGNvdXJzZSxcclxuICBicmFuY2gsXHJcbiAgdGFicyxcclxuICBhY3RpdmVUYWIsXHJcbiAgZWRpdE1vZGUsXHJcbiAgaGlzdG9yeSxcclxuICBibG9ja1xyXG59OiBQcm9wcykgPT4ge1xyXG4gIGNvbnN0IHRhYiA9IHRhYnMuZmlsdGVyKHRhYiA9PiB0YWIuaWQgPT09IGFjdGl2ZVRhYilbMF0gfHwgdGFic1swXTtcclxuICB2YXIgY3VycmVudFRhYlJlc291cmNlcyA9IHRhYiAmJlxyXG4gICAgYnJhbmNoLmNvdXJzZUNvbnRlbnRzLmhhc0VkZ2VzRnJvbShbdGFiLmlkXSkuZmlsdGVyKHg9PiB4LnR5cGUgPT09IFwicmVzb3VyY2UtbGlzdFwiKS5maXJzdCgpO1xyXG5cclxuICByZXR1cm4gPFR3b0NvbHVtbnNQYWdlXHJcbiAgICByaWdodD17ZWRpdE1vZGUgJiYgZHJhZnRJZCA/XHJcbiAgICAgIC8vIEluIGVkaXQgbW9kZSwgc2hvdyB0aGUgZHJhZnQgZWRpdHMgdG8gdGhlIHJpZ2h0XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPFZlcnNpb25IaXN0b3J5Qm94IGlzQWRtaW49e3NjaG9vbCA9PT0gJ3N0YW5kYXJkJ30gYnJhbmNoSWQ9e2RyYWZ0SWR9IGJyYW5jaFR5cGU9XCJkcmFmdC1icmFuY2hcIiAvPlxyXG4gICAgICA8L2Rpdj4gOlxyXG4gICAgICAvLyBJbiB2aWV3IG1vZGUsIHNob3cgV2Vla1BsYW5uZXIgdG8gdGhlIHJpZ2h0XHJcbiAgICAgIC8vIEluIHZpZXcgbW9kZSwgc2hvdyBSZXNvdXJjZXMgdG8gdGhlIHJpZ2h0XHJcbiAgICAgIDw+XHJcbiAgICAgIDxXZWVrUGxhbm5lciBlbnY9e2Vudn0gdmlld0NvdXJzZVVybD17Y2ZnLktFRF9DT1VSU0VfVklFV0VSX1VSTH0gLz5cclxuICAgICAge2N1cnJlbnRUYWJSZXNvdXJjZXMgJiYgPFJlc291cmNlTGlzdFZpZXcgY29udGVudD17Y3VycmVudFRhYlJlc291cmNlc30vPn1cclxuICAgICAgPC8+fVxyXG4gICAgcmlnaHRXaWR0aD17NX1cclxuICAgIGxlZnQ9ezw+XHJcbiAgICAgIDxDb3Vyc2VUYWJBcmVhXHJcbiAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgY291cnNlPXtjb3Vyc2V9XHJcbiAgICAgICAgYnJhbmNoPXticmFuY2h9XHJcbiAgICAgICAgdGFiPXt0YWJ9XHJcbiAgICAgICAgZWRpdE1vZGU9e2VkaXRNb2RlfVxyXG4gICAgICAgIGRyYWZ0SWQ9e2RyYWZ0SWR9XHJcbiAgICAgICAgYmxvY2s9e2Jsb2NrfVxyXG4gICAgICAgIGxhenlDb250ZW50cz17dGFiID9cclxuICAgICAgICAgIGJyYW5jaC5jb3Vyc2VDb250ZW50cy5pbmNsdWRlKFwidGFza3NcIikuaGFzRWRnZXNGcm9tKFt0YWIuaWRdKS50b1ZhbHVlKCkgOlxyXG4gICAgICAgICAgbmV3IEVtaXR0ZXIoW10pfVxyXG4gICAgICAgIC8+XHJcbiAgICAgIHshZWRpdE1vZGUgPyBlbnYuY3VycmVudFVzZXIucm9sZXMuaW5jbHVkZXMoXCJBRE1JTlwiKSB8fCBpc1RlYWNoZXJBdFNjaG9vbChlbnYuY3VycmVudFVzZXIsIHNjaG9vbCkgPyA8PlxyXG4gICAgICAgIDxici8+XHJcbiAgICAgICAgPGhyLz5cclxuICAgICAgICA8QWxpZ25Ib3Jpem9udGFsPlxyXG4gICAgICAgICAge2RyYWZ0SWQgJiYgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4td2FybmluZ1wiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgcHVibGlzaENvdXJzZSh7XHJcbiAgICAgICAgICAgICAgICAgIHNjaG9vbCxcclxuICAgICAgICAgICAgICAgICAgY291cnNlOiBjb3Vyc2UgYXMgQ291cnNlSW5zdGFuY2UsXHJcbiAgICAgICAgICAgICAgICAgIGRyYWZ0UmVwbzogZGIuYnJhbmNoKGRyYWZ0SWQpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGRiLnNhdmVOb3coKTtcclxuICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaChgLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlSWR9L3RhYnMvJHt0YWIgPyB0YWIuaWQgOiAnJCd9YCk7XHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWxnIGZhLXBsYXlcIiBhcmlhLWhpZGRlbj17dHJ1ZX0gLz4mbmJzcDtcclxuICAgICAgICAgICAgICB7TGBQdWJsaWNlcmFgfVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICA8L0hvcml6b250YWxJdGVtPn1cclxuICAgICAgICAgIDxMYXp5Q29udGVudD57XHJcbiAgICAgICAgICAgICAgQ291cnNlSW5zdGFuY2VzLmdldEJyYW5jaElkKGRiLnNjaG9vbHMubmFtZShzY2hvb2wpLnNpbmdsZSgpLCBjb3Vyc2VJZCkubWFwKGV4aXN0aW5nRHJhZnRJZCA9PiA8PlxyXG4gICAgICAgICAgICAgICAgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXhpc3RpbmdEcmFmdElkID8gXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyBOYXZpZ2F0ZSB0byBlZGl0IGV4aXN0aW5nIGRyYWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAoKT0+aGlzdG9yeS5wdXNoKGAvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2VJZH0vdGFicy8ke3RhYiA/IHRhYi5pZCA6ICckJ30vZHJhZnRzLyR7ZXhpc3RpbmdEcmFmdElkfS9lZGl0YCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGEgZHJhZnQgZm9yIHRoZSBicmFuY2ggYW5kIHRoZW4gbmF2aWdhdGUgdG8gaXRcclxuICAgICAgICAgICAgICAgICAgICAgIGFzeW5jICgpPT57XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2Nob29sRW50aXR5ID0gYXdhaXQgZGIuc2Nob29scy5uYW1lKHNjaG9vbCkuc2luZ2xlKCkubG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RyYWZ0SWQgPSBhd2FpdCBjb21wdXRlUHJlZGVzdGluYXRlZElkKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nob29sRW50aXR5Lm9mZmljaWFsQnJhbmNoSWQgKyBjb3Vyc2VJZCArIFwiZHJhZnRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RyYWZ0QnJhbmNoRG9jOiBCcmFuY2ggPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbmV3RHJhZnRJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjbDogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJvbGU6VVNFUjpSXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBzY2hvb2xSb2xlOiR7c2Nob29sRW50aXR5Lm5hbWV9L0VNUExPWUVFOlNgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2RyYWZ0JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjaG9vbElkOiBzY2hvb2xFbnRpdHkuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmVlUGFyZW50SWQ6IHNjaG9vbEVudGl0eS5vZmZpY2lhbEJyYW5jaElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnczogW2NvdXJzZUlkXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGIuYnJhbmNoZXMuYWRkUmVsYXRlZChzY2hvb2xFbnRpdHkub2ZmaWNpYWxCcmFuY2hJZCwgXCJhcHByb3ZlZENoaWxkcmVuXCIsIG5ld0RyYWZ0QnJhbmNoRG9jKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBkYi5zYXZlTm93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKGAvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2VJZH0vdGFicy8ke3RhYiA/IHRhYi5pZCA6ICckJ30vZHJhZnRzLyR7bmV3RHJhZnRJZH0vZWRpdGApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge2V4aXN0aW5nRHJhZnRJZCA/IDw+XHJcbiAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1sZyBmYS1wZW5jaWxcIiAvPiB7ZHJhZnRJZCA/IExgRm9ydHPDpHR0IHJlZGlnZXJhYDogTGBSZWRpZ2VyYWB9XHJcbiAgICAgICAgICAgICAgICAgICAgPC8+IDogPD5cclxuICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWxnIGZhLXBsdXNcIiAvPiB7TGBTa2FwYSBza29sYW5zIHZlcnNpb24gYXYga3Vyc2VuYH1cclxuICAgICAgICAgICAgICAgICAgICA8Lz5cclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgICAgICAgICAgICB7ZHJhZnRJZCB8fCAhZXhpc3RpbmdEcmFmdElkID8gdW5kZWZpbmVkIDogPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9Pmhpc3RvcnkucHVzaChgLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlSWR9L3RhYnMvJHt0YWIgPyB0YWIuaWQgOiAnJCd9L2RyYWZ0cy8ke2V4aXN0aW5nRHJhZnRJZH1gKX1cclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWV5ZVwiIC8+IHtMYFZpc2EgcmVkaWdlcmFkIHZlcnNpb25gfVxyXG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+fVxyXG4gICAgICAgICAgICAgIDwvPilcclxuICAgICAgICAgIH08L0xhenlDb250ZW50PlxyXG4gICAgICAgICAge2RyYWZ0SWQgJiYgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZVwiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCk9PntcclxuICAgICAgICAgICAgICAgIGhpc3RvcnkucHVzaChgLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlSWR9L3RhYnMvJHt0YWIgPyB0YWIuaWQgOiAnJCd9YCk7XHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWxnIGZhLWFycm93LWxlZnRcIiAvPiB7TGBBdnNsdXRhIHJlZGlnZXJpbmdgfVxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+fVxyXG4gICAgICAgIDwvQWxpZ25Ib3Jpem9udGFsPlxyXG4gICAgICA8Lz46IHVuZGVmaW5lZCA6XHJcbiAgICAgICAgPD5cclxuICAgICAgICAgIDxici8+XHJcbiAgICAgICAgICA8aHIgLz5cclxuICAgICAgICAgIDxFZGl0b3JGb290ZXJCdXR0b25zXHJcbiAgICAgICAgICAgIHNjaG9vbD17c2Nob29sfVxyXG4gICAgICAgICAgICBjb3Vyc2U9e2NvdXJzZSBhcyBDb3Vyc2VJbnN0YW5jZX1cclxuICAgICAgICAgICAgdGFiPXt0YWJ9XHJcbiAgICAgICAgICAgIGFjdGl2ZVRhYj17YWN0aXZlVGFifVxyXG4gICAgICAgICAgICBkcmFmdElkPXtkcmFmdElkfVxyXG4gICAgICAgICAgICBjb3Vyc2VUeXBlPXtjb3Vyc2UudHlwZX1cclxuICAgICAgICAgICAgYmxvY2tJZD17YmxvY2sgJiYgYmxvY2suaWR9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvPlxyXG4gICAgICB9XHJcbiAgICA8Lz5cclxuICB9IC8+XHJcbn0pO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUYXNrLCBMZWFybmluZ0dvYWxzQ29udGVudCwgQ291cnNlSW5zdGFuY2UsIENvdXJzZVRhYiB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbywgV2l0aEdyYXBocywgU3RyaXBHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBUYXNrTWlncmF0aW9uQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL3Rhc2stbWlncmF0aW9uLWJveCc7XHJcbmltcG9ydCBSZWFjdERhdGVQaWNrZXIgZnJvbSAncmVhY3QtZGF0ZXBpY2tlcic7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgQ2hlY2tsaXN0IH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2NoZWNrbGlzdCc7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IEZpZWxkTGltaXRzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2ZpZWxkLWxpbWl0cyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHRhc2s6IFRhc2s7XHJcbiAgd3JpdGVBY2Nlc3M6IGJvb2xlYW47XHJcbiAgcmVwbzogS2VkQmFja2VuZFJlcG87XHJcbiAgY29udGVudElkOiBzdHJpbmc7XHJcbiAgdGFiOiBTdHJpcEdyYXBoczxDb3Vyc2VUYWI+O1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQmFzaWNFZGl0YWJsZVRhc2tGaWVsZHMgPSAoe3Rhc2ssIHdyaXRlQWNjZXNzLCByZXBvLCBjb250ZW50SWQsIHRhYn06IFByb3BzKSA9PiB7XHJcbiAgY29uc3QgdGFiQ2xhc3MgPSB0YWIgPyB0YWIudGFiQ2xhc3MgOiBudWxsOyAvLyB0YWIgaXMgdW5kZWZpbmVkIG9uIHN0ZXAgY291cnNlcy4gQnV0IHRoZXJlIGFyZSBubyBtaXNzaW9uIHRhYnMgb24gc3RlcCBjb3Vyc2VzLlxyXG4gIHJldHVybiA8ZGl2PlxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgIDxwPnt0YWJDbGFzcyA9PT0gJ21pc3Npb24tdGFiJyA/XHJcbiAgICAgICAgICBMYFVwcGRyYWdldHMgbmFtbjpgIDpcclxuICAgICAgICAgIExgVXBwZ2lmdGVucyBuYW1uOmB9PC9wPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICA8aW5wdXQgYXV0b0ZvY3VzIHR5cGU9XCJ0ZXh0XCIgc2l6ZT17MzV9IHZhbHVlPXt0YXNrLm5hbWV9IGRpc2FibGVkPXshd3JpdGVBY2Nlc3N9IHJlYWRPbmx5PXshd3JpdGVBY2Nlc3N9IG9uQ2hhbmdlPXtldiA9PiB7XHJcbiAgICAgICAgICByZXBvLnRhc2tzLnVwZGF0ZSh0YXNrLCB7bmFtZTogZXYudGFyZ2V0LnZhbHVlLnN1YnN0cigwLCBGaWVsZExpbWl0cy5NQVhfQ0hBUlNfVEFTS19OQU1FUyl9KTtcclxuICAgICAgICB9IH0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICB7dGFzay5taWdyYXRlZFRleHRzICYmIHdyaXRlQWNjZXNzICYmIDxUYXNrTWlncmF0aW9uQm94IHRhc2s9e3Rhc2t9IGNvdXJzZT17bnVsbH0gdXBkYXRlTGluaz17KGlkLCBsaW5rT3JVbmxpbmspID0+XHJcbiAgICAgICAge3Rocm93IG5ldyBFcnJvcihcIk5vdCBpbXBsZW1lbnRlZCB5ZXRcIik7fX0gLz59XHJcbiAgICBcclxuICAgIHt0YWJDbGFzcyAhPT0gJ21pc3Npb24tdGFiJyAmJiA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgPHA+e0xgTMOkcmFuZGVtw6VsOmB9PC9wPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICA8TGF6eUNvbnRlbnQ+e3JlcG8uY291cnNlQ29udGVudHMuaWQoY29udGVudElkKS5tYXAoY29udGVudCA9PiB7XHJcbiAgICAgICAgICBpZiAoY29udGVudC50eXBlICE9PSAnbGVhcm5pbmctZ29hbHMnKSByZXR1cm4gPHA+e0xgRWogdmFsYmFydGB9PC9wPjtcclxuICAgICAgICAgIGNvbnN0IHtoYXNDb21tb25MZWFybmluZ0dvYWxzfSA9IChjb250ZW50IGFzIExlYXJuaW5nR29hbHNDb250ZW50KTtcclxuICAgICAgICAgIGNvbnN0IGxlYXJuaW5nR29hbHMgPSAoY29udGVudCBhcyBMZWFybmluZ0dvYWxzQ29udGVudCkuY29tbW9uTGVhcm5pbmdHb2FscztcclxuICAgICAgICAgIGNvbnN0IGF2YWlsYWJsZUdvYWxzID0gbGVhcm5pbmdHb2Fscy5tYXAobGcgPT4gbGcudHJpbSgpKS5maWx0ZXIobGcgPT4gbGcpXHJcbiAgICAgICAgICAgICAgLm1hcChsZyA9PiAoe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbGcsXHJcbiAgICAgICAgICAgICAgICBrZXk6IGxnXHJcbiAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgcmV0dXJuIDxDaGVja2xpc3RcclxuICAgICAgICAgICAgICBhdmFpbGFibGU9e2F2YWlsYWJsZUdvYWxzfVxyXG4gICAgICAgICAgICAgIHNlbGVjdGVkPXt0YXNrLmxlYXJuaW5nR29hbC5zcGxpdCgnXFxuJyl9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9eyhnb2FscywgZ29hbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc0NvbW1vbkxlYXJuaW5nR29hbHMpIHtcclxuICAgICAgICAgICAgICAgICAgcmVwby50YXNrcy51cGRhdGUodGFzaywge2xlYXJuaW5nR29hbDogZ29hbHMuam9pbignXFxuJyl9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIHJlcG8udGFza3MudXBkYXRlKHRhc2ssIHtsZWFybmluZ0dvYWw6IGdvYWx9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgLz47XHJcbiAgICAgICAgfSl9PC9MYXp5Q29udGVudD4gICAgICBcclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj59XHJcbiAgICBcclxuXHJcbiAgICA8PjxoMj57dGFiQ2xhc3MgPT09ICdtaXNzaW9uLXRhYicgPyBMYFVwcGRyYWdzdHlwYCA6IExgVXBwZ2lmdHN0eXBgfTwvaDI+XHJcbiAgICAgIDxDaGVja2xpc3QgYXZhaWxhYmxlPXtbXHJcbiAgICAgICAgdGFiQ2xhc3MgIT09ICdtaXNzaW9uLXRhYicgJiYge25hbWU6IExgw5Z2bmluZ3N1cHBnaWZ0YCwga2V5OiAnZXhlcmNpc2UnfSxcclxuICAgICAgICB7bmFtZTogTGBVcHBnaWZ0YCwga2V5OiBcInRhc2tcIn0sXHJcbiAgICAgICAge25hbWU6IExgSW5sw6RtbmluZ3N1cHBnaWZ0YCwga2V5OiAnYXNzaWdubWVudCd9LFxyXG4gICAgICBdLmZpbHRlcih4PT54KX1cclxuICAgICAgICBzZWxlY3RlZD17W3Rhc2sudGFza1R5cGVdfVxyXG4gICAgICAgIG9uQ2hhbmdlPXsoXywgY2xpY2tlZEtleSkgPT4gcmVwby50YXNrcy51cGRhdGUodGFzaywge3Rhc2tUeXBlOiBjbGlja2VkS2V5IGFzIGFueX0pfVxyXG4gICAgICAvPlxyXG4gICAgICB7dGFzay50YXNrVHlwZSA9PT0gJ2Fzc2lnbm1lbnQnICYmIDw+XHJcbiAgICAgICAgPHA+SW5sw6RtbmluZ3NkYXR1bTwvcD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDxSZWFjdERhdGVQaWNrZXIgbmV4dE1vbnRoQnV0dG9uTGFiZWw9XCJcIiBzaG93V2Vla051bWJlcnM9e3RydWV9IHByZXZpb3VzTW9udGhCdXR0b25MYWJlbD1cIlwiIHNlbGVjdGVkPXt0YXNrLmRlYWRsaW5lICYmIG1vbWVudCh0YXNrLmRlYWRsaW5lKS50b0RhdGUoKX0gZGF0ZUZvcm1hdD1cInl5eXktTU0tZGRcIiBsb2NhbGU9e1wic3ZcIn0gcG9wcGVyUGxhY2VtZW50PVwiYm90dG9tLXN0YXJ0XCIgb25DaGFuZ2U9e3ZhbHVlID0+IHtcclxuICAgICAgICAgICAgICByZXBvLnRhc2tzLnVwZGF0ZSh0YXNrLCB7ZGVhZGxpbmU6IG1vbWVudCh2YWx1ZSkuZm9ybWF0KFwiWVlZWS1NTS1ERFwiKX0gKTtcclxuICAgICAgICAgICAgfSB9IC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIHt0YXNrLmRlYWRsaW5lICYmIDxhIGNsYXNzTmFtZT1cImRlbGV0ZURhdGVcIiBocmVmPVwiI1wiIHRpdGxlPVwiVGEgYm9ydCBpbmzDpG1uaW5nc2RhdHVtXCIgb25DbGljaz17ZXYgPT4ge1xyXG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgcmVwby50YXNrcy51cGRhdGUodGFzaywge2RlYWRsaW5lOiBudWxsfSk7XHJcbiAgICAgICAgICAgIH19PjwvYT59XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiIG9uQ2xpY2s9eygpPT5cclxuICAgICAgICAgICAgcmVwby50YXNrcy51cGRhdGUodGFzaywge3NlbmRUb1Vya3VuZDogdGFzay5zZW5kVG9Vcmt1bmQgPT0gbnVsbCA/IGZhbHNlIDogIXRhc2suc2VuZFRvVXJrdW5kfSl9PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiY2hlY2tCb3hcIiArICgodGFzay5zZW5kVG9Vcmt1bmQgPT0gbnVsbCA/IHRydWUgOiB0YXNrLnNlbmRUb1Vya3VuZCkgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX0+PC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlZlcmlmeSBhc3NpZ25tZW50cyB3aXRoIFVya3VuZDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvPn1cclxuICAgIDwvPlxyXG4gIDwvZGl2PjtcclxufVxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IHdpdGhSb3V0ZXIsIFJvdXRlUHJvcHMsIFJvdXRlQ29tcG9uZW50UHJvcHMgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vZ2xvYmFscy9kYic7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgcHVibGlzaENvdXJzZSB9IGZyb20gJy4uLy4uLy4uL2xvZ2ljL3B1Ymxpc2gtY291cnNlJztcclxuaW1wb3J0IHsgSG9yaXpvbnRhbEl0ZW0gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvaG9yaXpvbnRhbC1pdGVtJztcclxuaW1wb3J0IHsgQWxpZ25Ib3Jpem9udGFsIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2FsaWduLWhvcml6b250YWwnO1xyXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzY2hvb2w6IHN0cmluZztcclxuICBjb3Vyc2VJZDogc3RyaW5nO1xyXG4gIHRhYklkOiBzdHJpbmc7XHJcbiAgY29udGVudElkOiBzdHJpbmc7XHJcbiAgZHJhZnRJZDogc3RyaW5nO1xyXG4gIHRhc2s6IFRhc2s7XHJcbiAgcmVwbzogS2VkQmFja2VuZFJlcG87XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUYXNrRm9vdGVyQnV0dG9ucyA9IHdpdGhSb3V0ZXIoKHsgc2Nob29sLCBjb3Vyc2VJZCwgdGFiSWQsIGNvbnRlbnRJZCwgZHJhZnRJZCwgdGFzaywgcmVwbywgaGlzdG9yeSB9OiBQcm9wcyAmIFJvdXRlQ29tcG9uZW50UHJvcHMpID0+IDw+XHJcbiAgPGRpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgcHVsbC1yaWdodFwiIG9uQ2xpY2s9e2FzeW5jICgpID0+IHtcclxuICAgICAgcmVwby5jb3Vyc2VDb250ZW50cy5yZW1vdmVSZWxhdGVkKGNvbnRlbnRJZCwgXCJ0YXNrc1wiLCB0YXNrKTtcclxuICAgICAgYXdhaXQgZGIuc2F2ZU5vdygpO1xyXG4gICAgICBoaXN0b3J5LnB1c2goYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZUlkfS90YWJzLyR7dGFiSWR9L2RyYWZ0cy8ke2RyYWZ0SWR9L2VkaXRgKTtcclxuICAgIH19PlxyXG4gICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS10cmFzaFwiIGFyaWEtaGlkZGVuPXt0cnVlfSAvPiZuYnNwO1xyXG4gICAgICAgIHtMYFRhIGJvcnQgdXBwZ2lmdGVuYH1cclxuICAgIDwvZGl2PlxyXG4gICAgPEFsaWduSG9yaXpvbnRhbD5cclxuICAgICAgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgIDxidXR0b25cclxuICAgICAgICAgIGNsYXNzTmFtZT1cImJ0blwiXHJcbiAgICAgICAgICBvbkNsaWNrPXthc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIGF3YWl0IHJlcG8uc2F2ZU5vdygpO1xyXG4gICAgICAgICAgICBoaXN0b3J5LnB1c2goYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZUlkfS90YWJzLyR7dGFiSWQgfHwgJyQnfS9jb250ZW50cy8ke2NvbnRlbnRJZH0vdGFza3MvJHt0YXNrLmlkfS9kcmFmdHMvJHtkcmFmdElkfWApO1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1leWVcIiBhcmlhLWhpZGRlbj17dHJ1ZX0gLz4mbmJzcDtcclxuICAgICAgICAgIHtMYEbDtnJoYW5kc2dyYW5za2FgfVxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICA8L0hvcml6b250YWxJdGVtPlxyXG4gICAgICA8SG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuXCJcclxuICAgICAgICAgIG9uQ2xpY2s9e2FzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgaGlzdG9yeS5wdXNoKGAvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2VJZH0vdGFicy8ke3RhYklkIHx8ICckJ30vZHJhZnRzLyR7ZHJhZnRJZH0vZWRpdGApO1xyXG4gICAgICAgICAgfX1cclxuICAgICAgICA+XHJcbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hcnJvdy1sZWZ0XCIgYXJpYS1oaWRkZW49e3RydWV9IC8+Jm5ic3A7XHJcbiAgICAgICAgICB7TGDDhXRlcmfDpSB0aWxsIGZsaWtlbmB9XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgIHsvKjxIb3Jpem9udGFsSXRlbT5cclxuICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmdcIlxyXG4gICAgICAgICAgb25DbGljaz17YXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICBhd2FpdCBwdWJsaXNoQ291cnNlKHtcclxuICAgICAgICAgICAgICBzY2hvb2wsXHJcbiAgICAgICAgICAgICAgY291cnNlSWQsXHJcbiAgICAgICAgICAgICAgZHJhZnRSZXBvOiByZXBvXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBhd2FpdCBkYi5zYXZlTm93KCk7XHJcbiAgICAgICAgICAgIGhpc3RvcnkucHVzaChgLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlSWR9L3RhYnMvJHt0YWJJZCB8fCAnJCd9YCk7XHJcbiAgICAgICAgICB9fVxyXG4gID5cclxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsYXlcIiBhcmlhLWhpZGRlbj17dHJ1ZX0gLz4mbmJzcDtcclxuICAgICAgICAgIHtMYFB1YmxpY2VyYWB9XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgIDwvSG9yaXpvbnRhbEl0ZW0+Ki99XHJcbiAgICA8L0FsaWduSG9yaXpvbnRhbD5cclxuICA8L2Rpdj5cclxuICA8YnIvPlxyXG4gIHsvKjxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9PlxyXG4gICAgICBoaXN0b3J5LnB1c2goYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZUlkfS90YWJzLyR7dGFiSWQgfHwgJyQnfS90YXNrcy8ke3Rhc2tJZH1gKX0+XHJcbiAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hcnJvdy1sZWZ0XCIgYXJpYS1oaWRkZW49e3RydWV9IC8+Jm5ic3A7XHJcbiAgICB7TGBBdnNsdXRhIHJlZGlnZXJpbmdgfVxyXG5cclxuICA8L2J1dHRvbj4qL31cclxuPC8+KTtcclxuXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRSZXBvIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgVGFzayB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgV3lzaXd5ZyB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnJztcclxuaW1wb3J0IGFjdGlvbnNfc3dlZGlzaCBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLXN2JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgcmVwbzogS2VkQmFja2VuZFJlcG9cclxuICB0YXNrOiBUYXNrXHJcbiAgd3JpdGVBY2Nlc3M6IGJvb2xlYW5cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEludHJvZHVjdGlvblRleHRFZGl0b3IgPSAoe3JlcG8sIHRhc2ssIHdyaXRlQWNjZXNzfTogUHJvcHMpPT4gPD5cclxuICA8aDQ+e0xgSW50cm90ZXh0YH08L2g0PlxyXG4gIDxwIGNsYXNzTmFtZT1cInN1YkhlYWRlclwiPihTa3JpdiBlbiBpbnRyb2R1a3Rpb24gdGlsbCB1cHBnaWZ0ZW4pPC9wPlxyXG4gIDxXeXNpd3lnXHJcbiAgICBhY3Rpb25zPXtbXHJcbiAgICAgIFwiYm9sZFwiLFxyXG4gICAgICBcIml0YWxpY1wiLFxyXG4gICAgICBcInVuZGVybGluZVwiLFxyXG4gICAgICBcImxpbmtcIixcclxuICAgICAgXCJpbWFnZVwiXHJcbiAgICBdfVxyXG4gICAgZGVmYXVsdEFjdGlvbnM9e2FjdGlvbnNfc3dlZGlzaH1cclxuICAgIHJlYWRPbmx5PXshd3JpdGVBY2Nlc3N9XHJcbiAgICBodG1sPXt0YXNrLmNvbnRlbnQgfHwgXCJcIn1cclxuICAgIG9uQ2hhbmdlPXtodG1sID0+IHJlcG8udGFza3MudXBkYXRlKHRhc2ssIHtjb250ZW50OiBodG1sfSl9ICAvPlxyXG48Lz5cclxuIiwiaW1wb3J0IHsgVGFza1R5cGUgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmV4cG9ydCBjb25zdCB0YXNrVHlwZUhlYWRpbmdzID0ge1xyXG4gIGV4ZXJjaXNlOiBMYMOWdm5pbmdzdXBwZ2lmdGAsXHJcbiAgdGFzazogTGBVcHBnaWZ0YCxcclxuICBhc3NpZ25tZW50OiBMYElubMOkbW5pbmdzdXBwZ2lmdGBcclxufTtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBXeXNpd3lnIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcnO1xyXG5pbXBvcnQgYWN0aW9uc19zd2VkaXNoIGZyb20gJy4uLy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IHRhc2tUeXBlSGVhZGluZ3MgfSBmcm9tICcuLi90ZXh0cyc7XHJcbmltcG9ydCB7IEZpZWxkTGltaXRzIH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL2ZpZWxkLWxpbWl0cyc7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRhc2tEZXNjcmlwdGlvbkVkaXRvcih7IHdyaXRlQWNjZXNzLCB0YXNrLCByZXBvIH06IHsgd3JpdGVBY2Nlc3M6IGJvb2xlYW4sIHRhc2s6IFRhc2ssIHJlcG86IEtlZEJhY2tlbmRSZXBvIH0pIHtcclxuICAgIGNvbnN0IFtudW1DaGFycywgc2V0TnVtQ2hhcnNdID0gdXNlU3RhdGUoMCk7XHJcbiAgICByZXR1cm4gPD5cclxuICAgICAgICA8aDQ+e3Rhc2tUeXBlSGVhZGluZ3NbdGFzay50YXNrVHlwZV0gfHwgTGBVcHBnaWZ0YH08L2g0PlxyXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInN1YkhlYWRlclwiPntMYChTa3JpdiBpbiBlbiBrb3J0IGbDtnJrbGFyaW5nLCBtYXggJHtGaWVsZExpbWl0cy5NQVhfQ0hBUlNfVEFTS19JTlRST19URVhUfSB0ZWNrZW4sIHZhZCB1cHBnaWZ0ZW4gZ8OlciB1dCBww6UuKWB9PC9wPlxyXG4gICAgICAgIDxXeXNpd3lnIGFjdGlvbnM9e1tcclxuICAgICAgICAgICAgXCJib2xkXCIsXHJcbiAgICAgICAgXX1cclxuICAgICAgICAgICAgZGVmYXVsdEFjdGlvbnM9e2FjdGlvbnNfc3dlZGlzaH1cclxuICAgICAgICAgICAgcmVhZE9ubHk9eyF3cml0ZUFjY2Vzc31cclxuICAgICAgICAgICAgaHRtbD17dGFzay5kZXNjcmlwdGlvbiB8fCBcIlwifVxyXG4gICAgICAgICAgICBtYXhDaGFycz17RmllbGRMaW1pdHMuTUFYX0NIQVJTX1RBU0tfSU5UUk9fVEVYVH1cclxuICAgICAgICAgICAgcmVwb3J0TnVtQ2hhcnM9e251bUNoYXJzID0+IHNldE51bUNoYXJzKG51bUNoYXJzKX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e2h0bWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVwby50YXNrcy51cGRhdGUodGFzaywgeyBkZXNjcmlwdGlvbjogaHRtbCB9KTtcclxuICAgICAgICAgICAgfX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIDxkaXYgc3R5bGU9e3t0ZXh0QWxpZ246ICdyaWdodCcsIG9wYWNpdHk6IDAuNywgZm9udFNpemU6ICc4cHQnfX0+e0xgJHtudW1DaGFyc30gYXYgJHtGaWVsZExpbWl0cy5NQVhfQ0hBUlNfVEFTS19JTlRST19URVhUfWB9PC9kaXY+XHJcbiAgICA8Lz47XHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IFN1c3BlbnNlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBXb3JkQmFua0NvbnRlbnRTZXR0aW5ncyB9IGZyb20gJy4uL3ZpZXdlci1lZGl0b3IvY291cnNlLWNvbnRlbnRzL3dvcmQtYmFuay1jb250ZW50LXNldHRpbmdzJztcclxuaW1wb3J0IHsgRWxsaXBzaXNMb2FkZXIgfSBmcm9tICcuLi8uLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9lbGxpcHNpcy1sb2FkZXInO1xyXG5pbXBvcnQgeyBjZmcgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzdWJqZWN0OiBzdHJpbmc7XHJcbiAgc3RlcDogbnVtYmVyO1xyXG4gIG9uU2VsZWN0OiAoc2VsZWN0ZWRXb3JkQmFuazoge25hbWU6IHN0cmluZywgdXJsOiBzdHJpbmd9KSA9PiB2b2lkO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgU2VsZWN0V29yZEJhbmsgPSAoe3N1YmplY3QsIHN0ZXAsIG9uU2VsZWN0fTogUHJvcHMpID0+IDxkaXYgc3R5bGU9e3ttaW5IZWlnaHQ6IDQwMH19PjxTdXNwZW5zZSBmYWxsYmFjaz17PEVsbGlwc2lzTG9hZGVyIC8+fT5cclxuICAgIDxXb3JkQmFua0NvbnRlbnRTZXR0aW5ncyBzdWJqZWN0TmFtZT17c3ViamVjdH0gc3RlcE5vPXtzdGVwfSBvbkNoYW5nZT17KHtuYW1lLCBrZXl9KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYCR7Y2ZnLktFRF9XT1JEQkFOS1NfVVJMfT9zdWJqZWN0PSR7c3ViamVjdH0mc3RlcD0ke3N0ZXB9Jmxpc3Q9JHtrZXl9YDtcclxuICAgICAgICBvblNlbGVjdCh7bmFtZSwgdXJsfSk7XHJcbiAgICAgIH1cclxuICAgIH0gLz5cclxuICA8L1N1c3BlbnNlPlxyXG48L2Rpdj47XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgVGFzayB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgV3lzaXd5ZywgQWN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcnO1xyXG5pbXBvcnQgYWN0aW9uc19zd2VkaXNoIGZyb20gJy4uLy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IEwsIHNob3dFcnJvciB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgRGlhbG9nc0NvbnRleHQgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZGlhbG9nLWNvbnRleHQnO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vLi4vLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuaW1wb3J0IHsgU2VsZWN0V29yZEJhbmsgfSBmcm9tICcuLi8uLi8uLi9jb21tb24vc2VsZWN0LXdvcmQtYmFuayc7XHJcbmltcG9ydCB7IHNhdmVTZWxlY3Rpb24sIHJlc3RvcmVTZWxlY3Rpb24gfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9yZXN0b3JlLXNlbGVjdGlvbic7XHJcbmltcG9ydCB7IGNmZyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gVGFza1dvcmtpbmdQcm9jZWR1cmVFZGl0b3IoeyB3cml0ZUFjY2VzcywgdGFzaywgcmVwbywgc3RlcCB9OiB7IHdyaXRlQWNjZXNzOiBib29sZWFuLCB0YXNrOiBUYXNrLCByZXBvOiBLZWRCYWNrZW5kUmVwbywgc3RlcD86IG51bWJlciB9KSB7XHJcbiAgY29uc3QgZGlhbG9nQ3R4ID0gdXNlQ29udGV4dChEaWFsb2dzQ29udGV4dCk7XHJcblxyXG4gIGNvbnN0IGFjdGlvbnM6IChQYXJ0aWFsPEFjdGlvbj4gfCBzdHJpbmcpW10gPSBbXHJcbiAgICBcImJvbGRcIixcclxuICAgIFwiaXRhbGljXCIsXHJcbiAgICBcInVuZGVybGluZVwiLFxyXG4gICAgXCJvbGlzdFwiLFxyXG4gICAgXCJvdXRkZW50XCIsXHJcbiAgICBcImluZGVudFwiLFxyXG4gICAgXCJsaW5rXCIsXHJcbiAgICBcImltYWdlXCJcclxuICBdO1xyXG5cclxuICBpZiAod3JpdGVBY2Nlc3MgJiYgaXNLZWRTdGFmZigpICYmIHN0ZXAgIT0gbnVsbCkge1xyXG4gICAgLy8gVGhpcyB0YXNrIGlzIHB1dCBvbiBhIHN0ZXAuIFdlIGNvdWxkIGxpbmsgdG8gYSB3b3JkIGJhbms6XHJcbiAgICBhY3Rpb25zLnB1c2goe1xyXG4gICAgICBuYW1lOiBcImxpc3RXb3JkQmFua1wiLFxyXG4gICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1ib29rXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXHJcbiAgICAgIHRpdGxlOiBMYEzDpG5rYSB0aWxsIG9yZGJhbmtgLFxyXG4gICAgICByZXN1bHQoZXYsIHd5c2l3eWcpIHtcclxuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBzYXZlU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgZGlhbG9nQ3R4Lm9wZW5EaWFsb2coPFNlbGVjdFdvcmRCYW5rIHN1YmplY3Q9e3Rhc2suc3ViamVjdH0gc3RlcD17c3RlcH0gb25TZWxlY3Q9eyh7IG5hbWUsIHVybCB9KSA9PiB7XHJcbiAgICAgICAgICBkaWFsb2dDdHguY2xvc2VEaWFsb2coKTtcclxuICAgICAgICAgIHJlc3RvcmVTZWxlY3Rpb24oc2VsZWN0aW9uKTtcclxuICAgICAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcbiAgICAgICAgICBlbGVtLmhyZWYgPSB1cmw7XHJcbiAgICAgICAgICBlbGVtLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5hbWUpKTtcclxuICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdpbnNlcnRIVE1MJywgZmFsc2UsIGVsZW0ub3V0ZXJIVE1MKTtcclxuICAgICAgICB9IH0gLz4pO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLWxpbmtcIiBzdHlsZT1cImNvbG9yOnZhcigtLWNvbC1hY2NlbnQpXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXHJcbiAgICAgICAgdGl0bGU6ICdSZXN1cnMgbMOkbmsnLFxyXG4gICAgICAgIHJlc3VsdDogKCkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCgnQW5nZSBsw6Rua2VucyBVUkwgZsO2ciByZXN1cnNlbicpXHJcbiAgICAgICAgICBpZih1cmwpIHtcclxuICAgICAgICAgICAgLy9jaGVjayB0aGF0IHRoZSBlbnRlcmVkIFVSTCBpcyB0aGUgc2FtZSB3aXRoIHRoZSBjdXJyZW50IG9uZVxyXG4gICAgICAgICAgICBjb25zdCB1cmxPYmogPSBuZXcgVVJMKCcnLCB1cmwpO1xyXG4gICAgICAgICAgICBpZih1cmxPYmouaG9zdCAhPT0gd2luZG93LmxvY2F0aW9uLmhvc3QpIHtcclxuICAgICAgICAgICAgICBzaG93RXJyb3IoXCJPZ2lsdGlnIHJlc3Vyc2FkcmVzc1wiKTsgXHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL21hdGNoIHRoZSByZXNvdXJjZUlkXHJcbiAgICAgICAgICAgIHZhciByZWdleCA9IG5ldyBSZWdFeHAoXCIoW15cXC58L10rKS4oW15cXC5dKykoPz1cXC5odG1sKVwiKTtcclxuICAgICAgICAgICAgdmFyIHVybFJlc3VsdHMgPSByZWdleC5leGVjKHVybE9iai5wYXRobmFtZSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZighY2ZnLktFRF9SRVNPVVJDRVNfVVJMKSB7XHJcbiAgICAgICAgICAgICAgc2hvd0Vycm9yKFwiUmVzdXJzZXIgVVJMIMOkciBpbnRlIGtvbmZpZ3VyZXJhZFwiKTsgXHJcbiAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vcmVwbGFjZSBjZmcgdmFsdWUgd2l0aCB0aGUgb25lIGZyb20gdGhlIHByb3ZpZGVkIHVybFxyXG4gICAgICAgICAgICB2YXIgdmFsdWVGcm9tQ29uZmlnID0gY2ZnLktFRF9SRVNPVVJDRVNfVVJMLnJlcGxhY2UoXCJ7dmFsdWV9XCIsIHVybFJlc3VsdHNbMF0pO1xyXG4gICAgICAgICAgICBpZih2YWx1ZUZyb21Db25maWcpIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjcmVhdGVMaW5rJywgZmFsc2UsIHZhbHVlRnJvbUNvbmZpZylcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gPD5cclxuICAgIDxoND57TGBBcmJldHNwcm9jZXNzYH08L2g0PlxyXG4gICAgPFd5c2l3eWcgYWN0aW9ucz17YWN0aW9uc30gZGVmYXVsdEFjdGlvbnM9e2FjdGlvbnNfc3dlZGlzaH0gcmVhZE9ubHk9eyF3cml0ZUFjY2Vzc30gaHRtbD17dGFzay53b3JraW5nUHJvY2VkdXJlIHx8IFwiXCJ9IG9uQ2hhbmdlPXtodG1sID0+IHtcclxuICAgICAgcmVwby50YXNrcy51cGRhdGUodGFzaywgeyB3b3JraW5nUHJvY2VkdXJlOiBodG1sIH0pO1xyXG4gICAgfX0gLz5cclxuICA8Lz47XHJcbn1cclxuIiwiXHJcbmV4cG9ydCBmdW5jdGlvbiBzYXZlU2VsZWN0aW9uKCkge1xyXG4gIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XHJcbiAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgIGlmIChzZWwuZ2V0UmFuZ2VBdCAmJiBzZWwucmFuZ2VDb3VudCkge1xyXG4gICAgICAgICAgcmV0dXJuIHNlbC5nZXRSYW5nZUF0KDApO1xyXG4gICAgICB9XHJcbiAgfSBlbHNlIGlmIChkb2N1bWVudFtcInNlbGVjdGlvblwiXSAmJiBkb2N1bWVudFtcInNlbGVjdGlvblwiXS5jcmVhdGVSYW5nZSkge1xyXG4gICAgICByZXR1cm4gZG9jdW1lbnRbXCJzZWxlY3Rpb25cIl0uY3JlYXRlUmFuZ2UoKTtcclxuICB9XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXN0b3JlU2VsZWN0aW9uKHJhbmdlKSB7XHJcbiAgaWYgKHJhbmdlKSB7XHJcbiAgICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICB2YXIgc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgc2VsLmFkZFJhbmdlKHJhbmdlKTtcclxuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudFtcInNlbGVjdGlvblwiXSAmJiByYW5nZS5zZWxlY3QpIHtcclxuICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xyXG4gICAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IFRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRSZXBvIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgaXNLZWRTdGFmZiB9IGZyb20gJy4uLy4uLy4uL2xvZ2ljL2lzLWtlZC1zdGFmZic7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHdyaXRlQWNjZXNzOiBib29sZWFuXHJcbiAgdGFzazogVGFza1xyXG4gIHJlcG86IEtlZEJhY2tlbmRSZXBvXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBUYXNrRW1iZWRkZWRIVE1MRWRpdG9yID0gKHt0YXNrLCByZXBvfTogUHJvcHMpID0+IGlzS2VkU3RhZmYoKSA/IHRhc2suZW1iZWRkZWRIdG1sID8gPGRpdj5cclxuICA8aDQ+e0xgSW5iw6RkZGF0IG1hdGVyaWFsYH08L2g0PlxyXG4gIDxwPntMYEtsaXBwIGluIEhUTUwga29kIG5lZGFuYH08L3A+XHJcbiAgPHRleHRhcmVhIHN0eWxlPXt7d2lkdGg6IFwiMTAwJVwiLCBoZWlnaHQ6IFwiMTAwcHhcIn19XHJcbiAgICB2YWx1ZT17dGFzay5lbWJlZGRlZEh0bWx9XHJcbiAgICBvbkNoYW5nZT17ZXYgPT4gcmVwby50YXNrcy51cGRhdGUodGFzaywge2VtYmVkZGVkSHRtbDogZXYudGFyZ2V0LnZhbHVlfSl9IC8+XHJcbjwvZGl2PiA6XHJcbjxkaXY+XHJcbiAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIlxyXG4gICAgb25DbGljaz17KCk9PnJlcG8udGFza3MudXBkYXRlKHRhc2ssIHtlbWJlZGRlZEh0bWw6IFwiIFwifSl9XHJcbiAgPlxyXG4gICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtY29kZVwiIGFyaWEtaGlkZGVuIC8+Jm5ic3A7e0xgTMOkZ2cgdGlsbCBpbmLDpGRkYXQgbWF0ZXJpYWxgfVxyXG4gIDwvYnV0dG9uPlxyXG4gIDxici8+XHJcbiAgPGJyLz5cclxuPC9kaXY+IDpcclxuPGRpdiAvPjtcclxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRSZXBvLCBTdHJpcEdyYXBocywgV2l0aEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IFRhc2ssIENvdXJzZUluc3RhbmNlLCBTdGVwQ291cnNlVGFiLCBDb3Vyc2VUYWIsIFRoZW1lQ291cnNlVGFiIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBGb3JtRmllbGQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZCc7XHJcbmltcG9ydCB7IFRleHRJbnB1dCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHQtaW5wdXQnO1xyXG5pbXBvcnQgeyBMLCBjb21wYXJlUHJvcHMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IEJhc2ljRWRpdGFibGVUYXNrRmllbGRzIH0gZnJvbSAnLi9iYXNpYy1lZGl0YWJsZS10YXNrLWZpZWxkcyc7XHJcbmltcG9ydCB7IFRhc2tGb290ZXJCdXR0b25zIH0gZnJvbSAnLi90YXNrLWZvb3Rlci1idXR0b25zJztcclxuaW1wb3J0IHsgSW50cm9kdWN0aW9uVGV4dEVkaXRvciB9IGZyb20gJy4vaW50cm9kdWN0aW9uLXRleHQtZWRpdG9yJztcclxuaW1wb3J0IHsgVGFza0Rlc2NyaXB0aW9uRWRpdG9yIH0gZnJvbSAnLi90YXNrLWRlc2NyaXB0aW9uLWVkaXRvcic7XHJcbmltcG9ydCB7IFRhc2tXb3JraW5nUHJvY2VkdXJlRWRpdG9yIH0gZnJvbSAnLi90YXNrLXdvcmtpbmctcHJvY2VkdXJlLWVkaXRvcic7XHJcbmltcG9ydCB7IFRhc2tFbWJlZGRlZEhUTUxFZGl0b3IgfSBmcm9tICcuL3Rhc2stZW1iZWRkZWQtaHRtbC1lZGl0b3InO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICByZXBvOiBLZWRCYWNrZW5kUmVwbztcclxuICBjb3Vyc2U6IFdpdGhHcmFwaHM8Q291cnNlSW5zdGFuY2UsIFwidGFic1wiIHwgXCJibG9ja3NcIj47XHJcbiAgdGFiOiBDb3Vyc2VUYWI7XHJcbiAgdGFiSWQ6IHN0cmluZztcclxuICBjb250ZW50SWQ6IHN0cmluZztcclxuICB3cml0ZUFjY2VzczogYm9vbGVhbjtcclxuICBkcmFmdElkOiBzdHJpbmc7XHJcbiAgc2Nob29sOiBzdHJpbmc7XHJcbiAgdGFzazogU3RyaXBHcmFwaHM8VGFzaz47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBFZGl0VGFza0Zvcm0gPSAoe3JlcG8sIGNvdXJzZSwgZHJhZnRJZCwgdGFiSWQsIHRhYiwgY29udGVudElkLCB3cml0ZUFjY2VzcywgdGFzaywgc2Nob29sfTogUHJvcHMpID0+IHtcclxuICByZXR1cm4gPD5cclxuICAgIDxCYXNpY0VkaXRhYmxlVGFza0ZpZWxkcyByZXBvPXtyZXBvfSB0YXNrPXt0YXNrfSB3cml0ZUFjY2Vzcz17d3JpdGVBY2Nlc3N9IGNvbnRlbnRJZD17Y29udGVudElkfSB0YWI9e3RhYn0gLz5cclxuICAgIDxJbnRyb2R1Y3Rpb25UZXh0RWRpdG9yIHJlcG89e3JlcG99IHRhc2s9e3Rhc2t9IHdyaXRlQWNjZXNzPXt3cml0ZUFjY2Vzc30gLz5cclxuICAgIDxUYXNrRGVzY3JpcHRpb25FZGl0b3Igd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfSB0YXNrPXt0YXNrfSByZXBvPXtyZXBvfSAvPlxyXG4gICAgPFRhc2tXb3JraW5nUHJvY2VkdXJlRWRpdG9yIHdyaXRlQWNjZXNzPXt3cml0ZUFjY2Vzc30gdGFzaz17dGFza30gcmVwbz17cmVwb30gc3RlcD17dGFiICYmIHRhYi50eXBlID09PSAnc3RlcC1jb3Vyc2UtdGFiJyAmJiB0YWIuc3RlcE5vfSAvPlxyXG4gICAgPFRhc2tFbWJlZGRlZEhUTUxFZGl0b3Igd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfSB0YXNrPXt0YXNrfSByZXBvPXtyZXBvfSAvPlxyXG4gICAgPFRhc2tGb290ZXJCdXR0b25zIHJlcG89e3JlcG99IHRhc2s9e3Rhc2t9IGNvdXJzZUlkPXtjb3Vyc2UuaWR9IGRyYWZ0SWQ9e2RyYWZ0SWR9IHRhYklkPXt0YWJJZH0gY29udGVudElkPXtjb250ZW50SWR9IHNjaG9vbD17c2Nob29sfSAvPlxyXG4gIDwvPjtcclxufVxyXG5cclxuLypcclxuXHJcbiAgKiBJbnRlIGt1bm5hIMOkbmRyYSBvcmRuaW5nIHDDpSBsw6VzdGEgcnV0b3Igb20gaW50ZSBpc0tlZFN0YWZmKCkuXHJcbiAgKiBJbmdlbiBsw6RnZyB0aWxsIHVwcGdpZnRzLWtuYXBwIG9tIGludGUgZWRpdE1vZGUuXHJcbiAgKiBcclxuICAqIFJlZGlnZXJhIHVwcGdpZnRzaW5uZWjDpWxsXHJcbiAgKiBMw6VzIGzDpHJhbmRlbcOlbGVuIHRpbGwgYWRtaW4gYWxsdGlkXHJcbiAgKiBLdW5uYSBrbGlja2EgaW4gc2lnIHDDpSB1cHBnaWZ0ZW5cclxuICAqIEt1bm5hIHRhIGJvcnQgdXBwZ2lmdFxyXG4gICogS3VubmEgbm9sbHN0w6RsbGEgw6RuZHJpbmdhciBmw7ZyIHNrb2xhblxyXG5cclxuKi8iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRSZXBvLCBXaXRoR3JhcGhzLCBTdHJpcEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IFRhc2ssIENvdXJzZUJsb2NrLCBDb3Vyc2VUYWIgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IEtub3dsZWRnZU1hdHJpeCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2tub3dsZWRnZS1tYXRyaXgnO1xyXG5pbXBvcnQgeyBMYXp5Q29udGVudCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9sYXp5LWNvbnRlbnQnO1xyXG5pbXBvcnQgeyBnZXRDb3Vyc2VDb2Rlc0Zyb21UYWdzIH0gZnJvbSAnLi4vLi4vLi4vbG9naWMvZ2V0LWNvdXJzZS1jb2Rlcy1mcm9tLXRhZ3MnO1xyXG5pbXBvcnQgeyBMLCBzaG93RXJyb3IgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IGdldFN0YW5kYXJkQ291cnNlc1dpdGhPcmRlcmVkUmVxdWlyZW1lbnRzIH0gZnJvbSAnLi4vLi4vLi4vbG9naWMvZ2V0LXN0YW5kYXJkLWNvdXJzZXMtd2l0aC1vcmRlcmVkLXJlcXVpcmVtZW50cyc7XHJcbmltcG9ydCB7IHJlc29sdmVSZXF1aXJlbWVudE9yZGVyLCBSZXF1aXJlbWVudHNDb250YWluaW5nRG9jIH0gZnJvbSAnLi4vLi4vLi4vbG9naWMvb3JkZXJlZC1yZXF1aXJlbWVudHMnO1xyXG5pbXBvcnQgeyBTZWxlY3RSZWxhdGVkRG9jcyB9IGZyb20gJy4uLy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NlbGVjdC1yZWxhdGVkLWRvY3MnO1xyXG5pbXBvcnQgeyBDaGVja2xpc3QgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvY2hlY2tsaXN0JztcclxuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94JztcclxuaW1wb3J0IHsgZnV0dXJlQWJpbGl0aWVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBSZXFzUmVmZXJlbmNpbmdEb2MgfSBmcm9tICcuLi8uLi8uLi8uLi9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2J1c2luZXNzLWxvZ2ljJztcclxuaW1wb3J0IHsgZmVhdHVyZXMgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9mZWF0dXJlcyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHJlcG86IEtlZEJhY2tlbmRSZXBvXHJcbiAgdGFzazogU3RyaXBHcmFwaHM8VGFzaz4gJiBSZXFzUmVmZXJlbmNpbmdEb2NcclxuICB0YWJJZHM6IHN0cmluZ1tdLFxyXG4gIHVuY292ZXJlZElkczogeyBbaWQ6IHN0cmluZ106IHRydWUgfSxcclxuICBibG9ja0lkOiBzdHJpbmcgfCBudWxsXHJcbiAgYWxsQ292ZXJlZFNlbnRlbmNlcz86IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgW119W11cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEVkaXRSZXF1aXJlbWVudHMgPSAoe1xyXG4gIHJlcG8sXHJcbiAgdGFzayxcclxuICB0YWJJZHMsXHJcbiAgdW5jb3ZlcmVkSWRzLFxyXG4gIGJsb2NrSWQsXHJcbiAgYWxsQ292ZXJlZFNlbnRlbmNlc1xyXG59OiBQcm9wcykgPT4ge1xyXG4gIHJldHVybiA8TGF6eUNvbnRlbnQ+e1xyXG4gICAgYmxvY2tJZCA/XHJcblxyXG4gICAgICByZXBvLmNvdXJzZUJsb2Nrc1xyXG4gICAgICAgIC5pbmNsdWRlKFwiYWJpbGl0aWVzXCIsIFwiY2VudHJhbENvbnRlbnRcIiwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIilcclxuICAgICAgICAuaWQoYmxvY2tJZClcclxuICAgICAgICAubWFwKGJsb2NrID0+IDxkaXY+XHJcbiAgICAgICAgICA8RWRpdFJlcXVpcmVtZW50c0lubmVyIHsuLi57cmVwbywgdGFzaywgdW5jb3ZlcmVkSWRzLCB0YWJPckJsb2NrOiBibG9jaywgYWxsQ292ZXJlZFNlbnRlbmNlc319IC8+XHJcbiAgICAgICAgPC9kaXY+KSA6XHJcblxyXG4gICAgICByZXBvLmNvdXJzZVRhYnNcclxuICAgICAgICAuaW5jbHVkZShcImFiaWxpdGllc1wiLCBcImNlbnRyYWxDb250ZW50XCIsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIpXHJcbiAgICAgICAgLmlkcyh0YWJJZHMpXHJcbiAgICAgICAgLnRvVmFsdWUoKS5tYXAodGFicyA9PiA8ZGl2PlxyXG4gICAgICAgICAge3RhYnMubGVuZ3RoID09PSAxID9cclxuICAgICAgICAgICAgPEVkaXRSZXF1aXJlbWVudHNJbm5lciB7Li4ue3JlcG8sIHRhc2ssIHVuY292ZXJlZElkcywgdGFiT3JCbG9jazogdGFic1swXSwgYWxsQ292ZXJlZFNlbnRlbmNlc319IC8+IDpcclxuICAgICAgICAgIHRhYnMubWFwKHRhYiA9PiA8T3BlbkNsb3NlQm94IGtleT17dGFiLmlkfSB0aXRsZT17PGg0Pnt0YWIubmFtZSB8fCB0YWIudGFiVGl0bGV9e1xyXG4gICAgICAgICAgICB0YWIuc3ViamVjdCAmJiB0YWIuc3ViamVjdC5zdWJqZWN0TmFtZSAmJiB0YWIuc3ViamVjdC5zdWJqZWN0TmFtZSAhPT0gKHRhYi5uYW1lIHx8IHRhYi50YWJUaXRsZSkgP1xyXG4gICAgICAgICAgICAgIGAgKCR7dGFiLnN1YmplY3Quc3ViamVjdE5hbWV9KWA6ICcnXHJcbiAgICAgICAgICB9PC9oND59PlxyXG4gICAgICAgICAgICAgIDxFZGl0UmVxdWlyZW1lbnRzSW5uZXIgey4uLntyZXBvLCB0YXNrLCB1bmNvdmVyZWRJZHMsIHRhYk9yQmxvY2s6IHRhYiwgaGFzTXVsdGlwbGVTdWJqZWN0czogdHJ1ZSwgYWxsQ292ZXJlZFNlbnRlbmNlc319IC8+XHJcbiAgICAgICAgICAgIDwvT3BlbkNsb3NlQm94PiApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICA8L2Rpdj4pXHJcbiAgfTwvTGF6eUNvbnRlbnQ+XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBFZGl0UmVxdWlyZW1lbnRzSW5uZXIgPSAoe1xyXG4gIHRhYk9yQmxvY2s6IHRhYk9yQmxvY2ssXHJcbiAgcmVwbyxcclxuICB0YXNrLFxyXG4gIHVuY292ZXJlZElkcyxcclxuICBoYXNNdWx0aXBsZVN1YmplY3RzLFxyXG4gIGFsbENvdmVyZWRTZW50ZW5jZXNcclxufToge1xyXG4gIHJlcG86IEtlZEJhY2tlbmRSZXBvXHJcbiAgdGFzazogU3RyaXBHcmFwaHM8VGFzaz4gJiBSZXFzUmVmZXJlbmNpbmdEb2NcclxuICB1bmNvdmVyZWRJZHM6IHsgW2lkOiBzdHJpbmddOiB0cnVlIH0sXHJcbiAgdGFiT3JCbG9jazpcclxuICAgIFdpdGhHcmFwaHM8Q291cnNlVGFiLCBcImFiaWxpdGllc1wiIHwgXCJjZW50cmFsQ29udGVudFwiIHwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIj4gfFxyXG4gICAgV2l0aEdyYXBoczxDb3Vyc2VCbG9jaywgXCJhYmlsaXRpZXNcIiB8IFwiY2VudHJhbENvbnRlbnRcIiB8IFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCI+LFxyXG4gIGhhc011bHRpcGxlU3ViamVjdHM/OiBib29sZWFuLFxyXG4gIGFsbENvdmVyZWRTZW50ZW5jZXM6IHsgW2lkOiBzdHJpbmddOiBzdHJpbmcgW119W11cclxufSkgPT4gIHtcclxuY29uc3QgW21hcmtCeVNlbnRlbmNlVmlld0FjdGl2ZSwgc2V0QWN0aXZlXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuY29uc3Qge21hcmtQYXJ0aWFsS1JzfSA9IGZlYXR1cmVzO1xyXG5yZXR1cm4gPExhenlDb250ZW50PntcclxuICByZXNvbHZlUmVxdWlyZW1lbnRPcmRlcih0YWJPckJsb2NrKS5tYXAodGFiID0+IHtcclxuICAgIGNvbnN0IHN1YmplY3ROYW1lID0gJ3R5cGUnIGluIHRhYiAmJiB0YWIuc3ViamVjdCAmJiB0YWIuc3ViamVjdC5zdWJqZWN0TmFtZTtcclxuICAgIHJldHVybiA8PlxyXG4gICAgICB7dGFzay50YXNrVHlwZSAhPT0gJ2V4ZXJjaXNlJyAmJiA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxyXG4gICAgICAgIDxoMz57TGBWw6RsaiBrdW5za2Fwc2tyYXZgfTwvaDM+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXRyaXgta25vd2xlZGdlLXRpdGxlXCI+XHJcbiAgICAgICAgICA8cD57TGBNYXJrZXJhIGRlIGt1bnNrYXBza3JhdiBzb20gZGluIHVwcGdpZnQgdMOkY2tlci5gfTwvcD5cclxuICAgICAgICAgIHttYXJrUGFydGlhbEtScyAmJiA8cD48aSBjbGFzc05hbWU9e1wiZmFiIGZhLWNyZWF0aXZlLWNvbW1vbnMtbmQgXCIgKyAobWFya0J5U2VudGVuY2VWaWV3QWN0aXZlID8gXCJhY3RpdmVQYXJ0aWFsVmlld1wiIDogXCJcIil9IG9uQ2xpY2s9eygpPT4gc2V0QWN0aXZlKCFtYXJrQnlTZW50ZW5jZVZpZXdBY3RpdmUpfT48L2k+PC9wPn1cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8S25vd2xlZGdlTWF0cml4XHJcbiAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM9e3RhYi5rbm93bGVkZ2VSZXF1aXJlbWVudHN9XHJcbiAgICAgICAgICBtYXJrZWRJZHM9e3Rhc2sua25vd2xlZGdlUmVxdWlyZW1lbnRzLm1hcCgoeyBpZCB9KSA9PiBpZCl9XHJcbiAgICAgICAgICBleHBsYWluZWRSZXF1aXJlbWVudHM9e3Rhc2suZXhwbGFpbmVkUmVxdWlyZW1lbnRzIHx8IHt9fVxyXG4gICAgICAgICAgaWRzVG9NYXJrTm90T2s9e3VuY292ZXJlZElkc31cclxuICAgICAgICAgIG1hcmtNb2RlPXt0cnVlfVxyXG4gICAgICAgICAgbWFya0J5U2VudGVuY2VWaWV3ID0ge21hcmtCeVNlbnRlbmNlVmlld0FjdGl2ZX1cclxuICAgICAgICAgIG1pZ3JhdGVkSWRzPXt0YXNrICYmIHRhc2subWlncmF0ZWRUZXh0cyAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMua25vd2xlZGdlUmVxdWlyZW1lbnRzfVxyXG4gICAgICAgICAgcGFydGlhbFJlcXVpcm1lbnRzID0ge3Rhc2sucGFydGlhbFJlcXVpcm1lbnRzIHx8IHt9fVxyXG4gICAgICAgICAgY292ZXJlZFBhcnRpYWxSZXF1aXJtZW50cyA9IHthbGxDb3ZlcmVkU2VudGVuY2VzfVxyXG4gICAgICAgICAgbWFya1BhcnRpYWxGZWF0dXJlRW5hYmxlZCA9IHttYXJrUGFydGlhbEtSc31cclxuICAgICAgICAgIG9uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZD17KHJlcXVpcmVtZW50SWQsIHRleHQpID0+XHJcbiAgICAgICAgICAgIHJlcG8udGFza3MudXBkYXRlKHRhc2ssIHtcclxuICAgICAgICAgICAgICBleHBsYWluZWRSZXF1aXJlbWVudHM6IHtcclxuICAgICAgICAgICAgICAgIC4uLnRhc2suZXhwbGFpbmVkUmVxdWlyZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgW3JlcXVpcmVtZW50SWRdOiB0ZXh0XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICAgIG9uVXBkYXRlUGFydGlhbEtub3dsZWRnZSA9IHsocmVxdWlyZW1lbnRJZCwgcGFydGlhbENvbnRlbnRzKT0+IHtcclxuICAgICAgICAgICAgLy9pdCBtaWdodCBiZSB0aGUgY2FzZSB0aGF0IHRoZSBmZWF0dXJlIGZsYWcgaXMgYWN0aXZlLCB0aGUgcmVxdWlybWVudCBpcyBzZXQgYXMgbWFya2VkIGFuZCBubyBwYXJ0aWFsIGRhdGEgaXMgc2F2ZWRcclxuICAgICAgICAgICAgLy93aGVuIHVuc2VsZWN0aW5nIHRoZSByZXF1aXJtZW50LCB3ZSBzaG91bGQgZG8gbm90aGluZyBhcyBubyBwYXJ0aWFsIGRhdGEgaXMgc2F2ZWRcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAvLyB2YXIgcmVzdWx0ID0gc2hvdWxkUmVtb3ZlICYmIHRhc2sucGFydGlhbFJlcXVpcm1lbnRzLmZpbHRlcihwciA9PiBwYXJ0aWFsQ29udGVudHMuZmlsdGVyKHBjID0+ICFwcltyZXF1aXJlbWVudElkXS5pbmNsdWRlcyhwYykpKTtcclxuICAgICAgICAgICAgLy92YXIgZXhpc3RpbmdSZXF1aXJlbWVudHMgPSB0YXNrLnBhcnRpYWxSZXF1aXJtZW50c1tyZXF1aXJlbWVudElkXSB8fCBbXTtcclxuXHJcblxyXG4gICAgICAgICAgICByZXBvLnRhc2tzLnVwZGF0ZSh0YXNrLCB7XHJcbiAgICAgICAgICAgIHBhcnRpYWxSZXF1aXJtZW50czpcclxuICAgICAgICAgICAgeyBcclxuICAgICAgICAgICAgICAuLi50YXNrLnBhcnRpYWxSZXF1aXJtZW50cyxcclxuICAgICAgICAgICAgICBbcmVxdWlyZW1lbnRJZF06WyAuLi5wYXJ0aWFsQ29udGVudHNdXHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICBjb25zdCBtYXJrZWREb2MgPSB0YWIua25vd2xlZGdlUmVxdWlyZW1lbnRzLmZpbHRlcigoeyBpZCB9KSA9PiBpZCA9PT0gcmVxdWlyZW1lbnRJZClbMF07XHJcbiAgICAgICAgICBpZihwYXJ0aWFsQ29udGVudHMubGVuZ3RoID09PSAwKXtcclxuICAgICAgICAgICAgcmVwby50YXNrcy5yZW1vdmVSZWxhdGVkKHRhc2suaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIG1hcmtlZERvYyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYoIXRhc2sucGFydGlhbFJlcXVpcm1lbnRzIHx8ICF0YXNrLnBhcnRpYWxSZXF1aXJtZW50c1tyZXF1aXJlbWVudElkXSB8fCB0YXNrLnBhcnRpYWxSZXF1aXJtZW50c1tyZXF1aXJlbWVudElkXS5sZW5ndGggPT09IDApe1xyXG4gICAgICAgICAgICByZXBvLnRhc2tzLmFkZFJlbGF0ZWQodGFzay5pZCwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgbWFya2VkRG9jKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9fVxyXG4gICAgICAgICAgb25NYXJrQ2hhbmdlZD17KG1hcmtlZElkOiBzdHJpbmcsIGlzTWFya2VkOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1hcmtlZERvYyA9IHRhYi5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZmlsdGVyKCh7IGlkIH0pID0+IGlkID09PSBtYXJrZWRJZClbMF07XHJcbiAgICAgICAgICAgIGlmIChpc01hcmtlZCkge1xyXG4gICAgICAgICAgICAgIGlmIChoYXNNdWx0aXBsZVN1YmplY3RzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBNaXNzaW9uIHRhYnMgbmVlZHMgdG8gc3RvcmUgdGhlIHN1YmplY3QgbmFtZSBjb25uZWN0ZWQgdG8gZWFjaCBrbm93bGVkZ2UgcmVxdWlyZW1lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXBvLnRhc2tzLnVwZGF0ZSh0YXNrLCB7aWRzVG9TdWJqZWN0TWFwOiB7Li4udGFzay5pZHNUb1N1YmplY3RNYXAsIFttYXJrZWRJZF06IHN1YmplY3ROYW1lfX0pO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXBvLnRhc2tzLnVwZGF0ZSh0YXNrLCB7aWRzVG9TdWJqZWN0TWFwOiB1bmRlZmluZWR9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmVwby50YXNrcy5hZGRSZWxhdGVkKHRhc2suaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIG1hcmtlZERvYyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgaWYgKGhhc011bHRpcGxlU3ViamVjdHMpIHtcclxuICAgICAgICAgICAgICAgIC8vIE1pc3Npb24gdGFicyBuZWVkcyB0byBkZWxldGUgdGhlIHN1YmplY3QgbmFtZSBjb25uZWN0ZWQgdG8gZWFjaCBrbm93bGVkZ2UgcmVxdWlyZW1lbnQ6XHJcbiAgICAgICAgICAgICAgICByZXBvLnRhc2tzLnVwZGF0ZSh0YXNrLCB7aWRzVG9TdWJqZWN0TWFwOiB7Li4udGFzay5pZHNUb1N1YmplY3RNYXAsIFttYXJrZWRJZF06IHVuZGVmaW5lZH19KTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVwby50YXNrcy51cGRhdGUodGFzaywge2lkc1RvU3ViamVjdE1hcDogdW5kZWZpbmVkfSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHJlcG8udGFza3MucmVtb3ZlUmVsYXRlZCh0YXNrLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBtYXJrZWREb2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICB9XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cclxuICAgICAgICA8U2VsZWN0UmVsYXRlZERvY3NcclxuICAgICAgICAgIHRpdGxlPXtMYFbDpGxqIGbDtnJtw6Vnb3JgfVxyXG4gICAgICAgICAgb3B0aW9ucz17dGFiLmFiaWxpdGllc31cclxuICAgICAgICAgIG1hcmtlZElkcz17dGFzay5hYmlsaXRpZXMubWFwKGEgPT4gYS5pZCl9XHJcbiAgICAgICAgICBtYXJrTW9kZT17dHJ1ZX1cclxuICAgICAgICAgIG1pZ3JhdGVkSWRzPXt0YXNrICYmIHRhc2subWlncmF0ZWRUZXh0cyAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMuYWJpbGl0aWVzfVxyXG4gICAgICAgICAgb25NYXJrQ2hhbmdlZD17KG1hcmtlZElkLCBpc01hcmtlZCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtYXJrZWREb2MgPSB0YWIuYWJpbGl0aWVzLmZpbHRlcihhID0+IGEuaWQgPT09IG1hcmtlZElkKVswXTtcclxuICAgICAgICAgICAgaWYgKGlzTWFya2VkKSB7XHJcbiAgICAgICAgICAgICAgcmVwby50YXNrcy5hZGRSZWxhdGVkKHRhc2suaWQsIFwiYWJpbGl0aWVzXCIsIG1hcmtlZERvYyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmVwby50YXNrcy5yZW1vdmVSZWxhdGVkKHRhc2suaWQsIFwiYWJpbGl0aWVzXCIsIG1hcmtlZERvYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH19XHJcbiAgICAgICAgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cclxuICAgICAgICA8U2VsZWN0UmVsYXRlZERvY3NcclxuICAgICAgICAgIHRpdGxlPXtMYFbDpGxqIGNlbnRyYWx0IGlubmVow6VsbGB9XHJcbiAgICAgICAgICBvcHRpb25zPXt0YWIuY2VudHJhbENvbnRlbnR9XHJcbiAgICAgICAgICBtYXJrZWRJZHM9e3Rhc2suY2VudHJhbENvbnRlbnQubWFwKGNjID0+IGNjLmlkKX1cclxuICAgICAgICAgIG1hcmtNb2RlPXt0cnVlfVxyXG4gICAgICAgICAgbWlncmF0ZWRJZHM9e3Rhc2sgJiYgdGFzay5taWdyYXRlZFRleHRzICYmIHRhc2subWlncmF0ZWRUZXh0cy5jZW50cmFsQ29udGVudH1cclxuICAgICAgICAgIG9uTWFya0NoYW5nZWQ9eyhtYXJrZWRJZCwgaXNNYXJrZWQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWFya2VkRG9jID0gdGFiLmNlbnRyYWxDb250ZW50LmZpbHRlcihhID0+IGEuaWQgPT09IG1hcmtlZElkKVswXTtcclxuICAgICAgICAgICAgaWYgKGlzTWFya2VkKSB7XHJcbiAgICAgICAgICAgICAgcmVwby50YXNrcy5hZGRSZWxhdGVkKHRhc2suaWQsIFwiY2VudHJhbENvbnRlbnRcIiwgbWFya2VkRG9jKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByZXBvLnRhc2tzLnJlbW92ZVJlbGF0ZWQodGFzay5pZCwgXCJjZW50cmFsQ29udGVudFwiLCBtYXJrZWREb2MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XHJcbiAgICAgICAgPE9wZW5DbG9zZUJveCBjbGFzc05hbWU9XCJsYXJnZXJcIiB0aXRsZT17PHA+e0xgVsOkbGogZnJhbXRpZHNmw7ZybcOlZ29yYH08L3A+fT5cclxuICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgPENoZWNrbGlzdFxyXG4gICAgICAgICAgICBhdmFpbGFibGU9e2Z1dHVyZUFiaWxpdGllcy5tYXAoZmEgPT4gKHsgbmFtZTogZmEsIGtleTogZmEgfSkpfVxyXG4gICAgICAgICAgICBzZWxlY3RlZD17dGFzay5mdXR1cmVBYmlsaXRpZXN9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtzZWxlY3RlZEZhcyA9PiByZXBvLnRhc2tzLnVwZGF0ZSh0YXNrLCB7IGZ1dHVyZUFiaWxpdGllczogc2VsZWN0ZWRGYXMgfSl9XHJcbiAgICAgICAgICAvPlxyXG4gICAgICAgIDwvT3BlbkNsb3NlQm94PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvPjtcclxuICB9KVxyXG59PC9MYXp5Q29udGVudD5cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGxpdmVRdWVyeVZpZXcgfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGl2ZS1xdWVyeS12aWV3JztcclxuaW1wb3J0IHsgVmFsdWUgfSBmcm9tICdrZWRiYWNrZW5kL29ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBXaXRoR3JhcGhzLCBLZWRCYWNrZW5kUmVwbyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IENvdXJzZUluc3RhbmNlLCBUYXNrLCBDb3Vyc2VUYWIgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFR3b0NvbHVtbnNQYWdlIH0gZnJvbSAnLi4vLi4vY29tbW9uL3R3by1jb2x1bW5zLXBhZ2UnO1xyXG5pbXBvcnQgeyBFZGl0VGFza0Zvcm0gfSBmcm9tICcuL3JpZ2h0LWNvbHVtbi9lZGl0LXRhc2stZm9ybSc7XHJcbmltcG9ydCB7IFRhc2tWaWV3ZXIgfSBmcm9tICcuL3ZpZXdlci90YXNrLXZpZXdlcic7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IHJlc29sdmVSZXF1aXJlbWVudE9yZGVyIH0gZnJvbSAnLi4vLi4vbG9naWMvb3JkZXJlZC1yZXF1aXJlbWVudHMnO1xyXG5pbXBvcnQgeyBFZGl0UmVxdWlyZW1lbnRzIH0gZnJvbSAnLi9sZWZ0LWNvbHVtbi9lZGl0LXJlcXVpcmVtZW50cyc7XHJcbmltcG9ydCB7IGlzVGVhY2hlckF0U2Nob29sIH0gZnJvbSAnLi4vLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuaW1wb3J0IHsgaXNFbXBsb3llZSB9IGZyb20gJy4uLy4uL2xvZ2ljL2lzLWVtcGxveWVlJztcclxuXHJcbmltcG9ydCB7IGdldElkc05vdENvdmVyZWRCeVJlcVJlZmVyZW5jaW5nRG9jcyB9IGZyb20gJy4uLy4uLy4uL2NvdXJzZS1idWlsZGVyL2NvdXJzZXMvYnVzaW5lc3MtbG9naWMnO1xyXG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XHJcbiAgc2Nob29sOiBzdHJpbmc7XHJcbiAgY291cnNlOiBXaXRoR3JhcGhzPENvdXJzZUluc3RhbmNlLCBcInRhYnNcIiB8IFwiYmxvY2tzXCI+O1xyXG4gIGRyYWZ0SWQ6IHN0cmluZztcclxuICBicmFuY2g6IEtlZEJhY2tlbmRSZXBvXHJcbiAgYWN0aXZlVGFiOiBzdHJpbmc7XHJcbiAgY29udGVudElkOiBzdHJpbmc7XHJcbiAgdGFza0lkOiBzdHJpbmc7XHJcbiAgYmxvY2tJZDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgVGFza0VkaXRvciA9IGxpdmVRdWVyeVZpZXcoKHtcclxuICBzY2hvb2wsXHJcbiAgY291cnNlLFxyXG4gIGFjdGl2ZVRhYixcclxuICBkcmFmdElkLFxyXG4gIGJyYW5jaCxcclxuICBjb250ZW50SWQsXHJcbiAgdGFza0lkLFxyXG4gIGJsb2NrSWQgfTogUHJvcHMpID0+XHJcbntcclxuICBjb25zdCB0aGVtZUNvdXJzZVRhYiA9IGNvdXJzZS50YWJzLmZpbmQodCA9PiB0LmlkID09PSBhY3RpdmVUYWIpO1xyXG4gIGNvbnN0IGludm9sdmVkVGFiSWRzID0gKHRoZW1lQ291cnNlVGFiICYmIHRoZW1lQ291cnNlVGFiLnRhYkNsYXNzID09PSAnbWlzc2lvbi10YWInKSA/XHJcbiAgICBjb3Vyc2UudGFicy5maWx0ZXIodGFiID0+IHRhYi50YWJDbGFzcyA9PT0gJ3N1YmplY3QtdGFiJykubWFwKHRhYiA9PiB0YWIuaWQpIDpcclxuICAgIFthY3RpdmVUYWJdO1xyXG4gIHJldHVybiBicmFuY2gudGFza3NcclxuICAgIC5pbmNsdWRlKFwiYWJpbGl0aWVzXCIsIFwiY2VudHJhbENvbnRlbnRcIiwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIikuaW5jbHVkZUlkc09ubHkoKVxyXG4gICAgLy8uZGVidWcoKVxyXG4gICAgLmhhc0VkZ2VzRnJvbShbY29udGVudElkXSlcclxuICAgIC50b1ZhbHVlKClcclxuICAgIC5jb21iaW5lTGF0ZXN0KFxyXG4gICAgICBicmFuY2guY291cnNlVGFic1xyXG4gICAgICAgIC5pbmNsdWRlKFwiYWJpbGl0aWVzXCIsIFwiY2VudHJhbENvbnRlbnRcIiwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIilcclxuICAgICAgICAuaW5jbHVkZUlkc09ubHkoKVxyXG4gICAgICAgIC5pZHMoaW52b2x2ZWRUYWJJZHMpKVxyXG4gICAgLnN3aXRjaE1hcCgoW3Rhc2tzLCBpbnZvbHZlZFRhYnNdKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRhc2sgPSB0YXNrcy5maWx0ZXIodCA9PiB0LmlkID09PSB0YXNrSWQpWzBdO1xyXG4gICAgICBjb25zdCB1bmNvdmVyZWRJZHMgPSBnZXRJZHNOb3RDb3ZlcmVkQnlSZXFSZWZlcmVuY2luZ0RvY3MoaW52b2x2ZWRUYWJzLCB0YXNrcyk7XHJcbiAgICAgIC8vY29tcHV0ZSB1bmNvdmVyZWQgc2VudGVuY2VzXHJcbiAgICAgIGNvbnN0IGFsbENvdmVyZWRTZW50ZW5jZXMgPSB0YXNrcyAmJiBmbGF0dGVuPHtbaWQ6c3RyaW5nXTpzdHJpbmdbXX0+KHRhc2tzLmZpbHRlcihyZXEgPT4gcmVxLnBhcnRpYWxSZXF1aXJtZW50cyAhPSBudWxsKS5tYXAoKHtwYXJ0aWFsUmVxdWlybWVudHN9KT0+IHBhcnRpYWxSZXF1aXJtZW50cykpO1xyXG5cclxuICAgICAgcmV0dXJuIHJlc29sdmVSZXF1aXJlbWVudE9yZGVyKHRhc2spLm1hcCh0YXNrID0+IHtcclxuICAgICAgICByZXR1cm4gPFR3b0NvbHVtbnNQYWdlXHJcbiAgICAgICAgICBsZWZ0PXs8RWRpdFJlcXVpcmVtZW50c1xyXG4gICAgICAgICAgICByZXBvPXticmFuY2h9XHJcbiAgICAgICAgICAgIHRhc2s9e3Rhc2t9XHJcbiAgICAgICAgICAgIHVuY292ZXJlZElkcz17dW5jb3ZlcmVkSWRzfVxyXG4gICAgICAgICAgICB0YWJJZHM9e2ludm9sdmVkVGFiSWRzfVxyXG4gICAgICAgICAgICBibG9ja0lkPXtibG9ja0lkfSBcclxuICAgICAgICAgICAgYWxsQ292ZXJlZFNlbnRlbmNlcyA9IHthbGxDb3ZlcmVkU2VudGVuY2VzfS8+fSAvLyBWaWQgXCJVcHBkcmFnXCIsIHNraWNrYSBpbiBhbGxhIMOkbW5lc2ZsaWthcnMgSUQgaMOkciFcclxuICAgICAgICAgIHJpZ2h0PXs8RWRpdFRhc2tGb3JtXHJcbiAgICAgICAgICAgIHJlcG89e2JyYW5jaH1cclxuICAgICAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgICAgIGNvdXJzZT17Y291cnNlfVxyXG4gICAgICAgICAgICBkcmFmdElkPXtkcmFmdElkfVxyXG4gICAgICAgICAgICB0YWJJZD17YWN0aXZlVGFifVxyXG4gICAgICAgICAgICB0YWI9e2ludm9sdmVkVGFicy5maW5kKHQgPT4gdC5pZCA9PT0gYWN0aXZlVGFiKSBhcyBDb3Vyc2VUYWJ9XHJcbiAgICAgICAgICAgIGNvbnRlbnRJZD17Y29udGVudElkfVxyXG4gICAgICAgICAgICB3cml0ZUFjY2Vzcz17aXNFbXBsb3llZShzY2hvb2wpfVxyXG4gICAgICAgICAgICB0YXNrPXt0YXNrfVxyXG4gICAgICAgICAgLz59XHJcbiAgICAgICAgICByaWdodFdpZHRoPXs2fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG59KTtcclxuIiwiaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXREcmFmdElkKHNjaG9vbDogc3RyaW5nLCBjb3Vyc2VJZDogc3RyaW5nKSB7XHJcbiAgcmV0dXJuIGRiLnNjaG9vbHMubmFtZShzY2hvb2wpLnNpbmdsZSgpIC8vIEdldCB0aGUgc2Nob29sIE9ic2VydmFibGVcclxuICAgIC5zd2l0Y2hNYXAoc2Nob29sID0+XHJcbiAgICAgIGRiLmJyYW5jaGVzXHJcbiAgICAgICAgLmhhc0VkZ2VzRnJvbShbc2Nob29sLm9mZmljaWFsQnJhbmNoSWRdKSAvLyBUaGUgb2ZmaWNpYWwgZHJhZnQgaGFzIGVkZ2VzIGZyb20gdGhlIG9mZmljaWFsIHNjaG9vbCBicmFuY2hcclxuICAgICAgICAubmFtZShcImRyYWZ0XCIpIC8vIFRoZXJlIG1pZ2h0IGJlIG90aGVyIHBlcnNvbmFsIGRyYWZ0cyBpbiBmdXR1cmUuIFJlcXVpcmVtZW50IG9mIHRoZSBjb21tb24gZHJhZnQgaXMgdGhhdCBpdCBpcyBuYW1lZCBcImRyYWZ0XCJcclxuICAgICAgICAudGFncyhjb3Vyc2VJZCkgLy8gRmluZCB0aGUgb25lIHRhZ2dlZCB3aXRoIHRoZSBjb3Vyc2VJZC4gVGhlcmUgYXJlIHNldmVyYWwgZHJhZnRzIC0gb25lIGZvciBlYWNoIGNvdXJzZS5cclxuICAgICAgICAuaWRzT25seSgpXHJcbiAgICAgICAgLm1hcCgoe2lkfSkgPT4gaWQpXHJcbiAgICAgICAgLmZpcnN0KClcclxuICAgICk7XHJcbn1cclxuXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IGRiLCBDb3Vyc2VJbnN0YW5jZXMgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xyXG5pbXBvcnQgeyBSb3V0ZUNvbXBvbmVudFByb3BzLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuaW1wb3J0IHsgTCwgY29tcGFyZVByb3AgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IGlzVGVhY2hlckF0U2Nob29sLCBpc0FkbWluT3JUZWFjaGVyQXRTY2hvb2wsIHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSAnLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IGdldERyYWZ0SWQgfSBmcm9tICcuLi9sb2dpYy9nZXQtZHJhZnQtaWQnO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIFJvdXRlQ29tcG9uZW50UHJvcHMge1xyXG4gIHNjaG9vbDogc3RyaW5nO1xyXG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XHJcbiAgZHJhZnRJZDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIG9wZW46IGJvb2xlYW47XHJcbiAgc2Nob29scz86IEFycmF5PHtpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGRpc3BsYXlOYW1lOiBzdHJpbmd9PlxyXG59XHJcblxyXG5jbGFzcyBDbGlja2FibGVTY2hvb2xEaXZXaXRoUm91dGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xyXG4gIGRpdkVsZW07XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgb3BlbjogZmFsc2VcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIG9wZW4oKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtvcGVuOiB0cnVlfSk7XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUuc2Nob29scykge1xyXG4gICAgICBjb25zdCBzY2hvb2xzID0gYXdhaXQgZGIuc2Nob29sc1xyXG4gICAgICAgIC50YWdzKFwicHJpbWFyeVwiKVxyXG4gICAgICAgIC5tYXAoKHtpZCwgbmFtZSwgZGlzcGxheU5hbWV9KSA9PiAoe2lkLCBuYW1lLCBkaXNwbGF5TmFtZTogZGlzcGxheU5hbWUgfHwgbmFtZSB8fCBcIjxuYW1ubMO2cz5cIn0pKVxyXG4gICAgICAgIC50b1ZhbHVlKCkubG9hZCgpO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtzY2hvb2xzfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjbG9zZSgpIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoe29wZW46IGZhbHNlfSk7XHJcbiAgfVxyXG4gIFxyXG4gIGFzeW5jIHNlbGVjdFNjaG9vbCAoc2Nob29sOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHttYXRjaCwgaGlzdG9yeX0gPSB0aGlzLnByb3BzOyAgICAgICAgICAgXHJcbiAgICBjb25zdCB7Y291cnNlSWQsIHRhYklkLCBkcmFmdElkLCBjb250ZW50SWQsIHRhc2tJZH0gPSBtYXRjaC5wYXJhbXMgYXMgYW55O1xyXG4gICAgY29uc3QgY2FuSW1wZXJzb25hdGUgPVxyXG4gICAgICBlbnYuY3VycmVudFVzZXIucm9sZXMuaW5jbHVkZXMoXCJBRE1JTlwiKSB8fCAgLy8gSXMgYWRtaW5cclxuICAgICAgbG9jYXRpb24uc2VhcmNoLmluY2x1ZGVzKCdyb2xlPScpOyAgICAgICAgICAvLyBTZWVtcyB0byBiZSBpbXBlcnNvbmF0ZWQgYXMgbm9uLWFkbWluIChvbmx5IGFkbWlucyBjYW4gZG8gdGhhdClcclxuXHJcbiAgICBhc3luYyBmdW5jdGlvbiBnZXRSb3V0ZSgpIHtcclxuICAgICAgY29uc3Qgb3RoZXJEcmFmdElkID0gZHJhZnRJZCAmJiBhd2FpdCBnZXREcmFmdElkKHNjaG9vbCwgY291cnNlSWQpLmxvYWQoKTtcclxuICAgICAgaWYgKHRhc2tJZCAmJiBjb250ZW50SWQgJiYgb3RoZXJEcmFmdElkICYmIChpc0FkbWluT3JUZWFjaGVyQXRTY2hvb2woZW52LmN1cnJlbnRVc2VyLCBzY2hvb2wpIHx8IGNhbkltcGVyc29uYXRlKSkge1xyXG4gICAgICAgIHJldHVybiBgLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlSWR9L3RhYnMvJHt0YWJJZCB8fCBcIiRcIn0vY29udGVudHMvJHtjb250ZW50SWR9L3Rhc2tzLyR7dGFza0lkfS9kcmFmdHMvJHtvdGhlckRyYWZ0SWR9L2VkaXRgO1xyXG4gICAgICB9IGVsc2UgaWYgKHRhc2tJZCkge1xyXG4gICAgICAgIHJldHVybiBgLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlSWR9L3RhYnMvJHt0YWJJZCB8fCBcIiRcIn0vdGFza3MvJHt0YXNrSWR9YDtcclxuICAgICAgfSBlbHNlIGlmIChvdGhlckRyYWZ0SWQgJiYgKGlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbChlbnYuY3VycmVudFVzZXIsIHNjaG9vbCkgfHwgY2FuSW1wZXJzb25hdGUpKSB7XHJcbiAgICAgICAgcmV0dXJuIGAvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2VJZH0vdGFicy8ke3RhYklkIHx8wqBcIiRcIn0vZHJhZnRzLyR7b3RoZXJEcmFmdElkfS9lZGl0YDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZUlkfS90YWJzLyR7dGFiSWQgfHzCoFwiJFwifWA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2Nob29sICE9PSB0aGlzLnByb3BzLnNjaG9vbCkge1xyXG4gICAgICBjb25zdCByb3V0ZSA9IGF3YWl0IGdldFJvdXRlKCk7XHJcbiAgICAgIGlmIChjYW5JbXBlcnNvbmF0ZSkge1xyXG4gICAgICAgIC8vIElmIGN1cnJlbnQgdXNlciBjYW4gaW1wZXJzb25hdGUgKGlzIGFkbWluIG9yIGlzIGFscmVhZHkgaW1wZXJzb25hdGluZyBlbXBsb3llZSBhdCBzb21lIHNjaG9vbCksXHJcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRvIGltcGVyc29uYXRlIHRoZSBjb3JyZWN0IHNjaG9vbCB3aGVuIHN3aXRjaGluZyBzY2hvb2wsIHNvIHRoYXRcclxuICAgICAgICAvLyBhZG1pbnMgY2FuIGFjdCBhcyBhbiBlbXBsb3llZSBvbiB0aGF0IHNjaG9vbCB3aGVuIGxvb2tpbmcgYXQgdGhlaXIgY291cnNlcy5cclxuICAgICAgICAvLyBUaGlzIHdpbGwgbWFrZSBpdCBlYXNpZXIgZm9yIGFkbWlucyB0byB1bmRlcnN0YW5kIHdoYXQgZW1wbG95ZWVzIGF0IHRoZSBzY2hvb2xcclxuICAgICAgICAvLyBjYW4gZG8gd2l0aCB0aGUgY291cnNlc1xyXG4gICAgICAgIGNvbnN0IGJhc2VVcmwgPSBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeShsb2NhdGlvbi5wYXRobmFtZSwgc2Nob29sID09PSAnc3RhbmRhcmQnID9cclxuICAgICAgICAgIHtyb2xlOiB1bmRlZmluZWQsIHNjaG9vbH0gOlxyXG4gICAgICAgICAge3JvbGU6IFwiRU1QTE9ZRUVcIiwgc2Nob29sfSk7XHJcbiAgICAgICAgbG9jYXRpb24uaHJlZiA9IGAke2Jhc2VVcmx9IyR7cm91dGV9YDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBOb3QgYW4gYWRtaW4sIGp1c3QgcmVkaXJlY3QgdG8gdGhlIHJvdXRlIGFuZCBub3JtYWwgYWNjZXNzIGNvbnRyb2wgd2lsbCBhcHBseVxyXG4gICAgICAgIGhpc3RvcnkucHVzaChyb3V0ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMuY2xvc2UoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHtzY2hvb2wsIGRyYWZ0SWQsIGRpc3BsYXlOYW1lIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3Qge29wZW4sIHNjaG9vbHN9ID0gdGhpcy5zdGF0ZTtcclxuXHJcbiAgICByZXR1cm4gPGRpdiB0YWJJbmRleD17MX0gc3R5bGU9e3tvdXRsaW5lOiAwfX0gb25CbHVyPXsoKT0+dGhpcy5jbG9zZSgpfT5cclxuICAgICAgeyFvcGVuID8gPD5cclxuICAgICAgICA8aDUgb25DbGljaz17KCk9PnRoaXMub3BlbigpfT57c2Nob29sICE9PSBcInN0YW5kYXJkXCIgPyAoZGlzcGxheU5hbWUgfHwgc2Nob29sKSA6IExgU3RhbmRhcmRgfTwvaDU+XHJcbiAgICAgICAge2RyYWZ0SWQgJiYgPHAgY2xhc3NOYW1lPVwicGFnZVNpZGVUZXh0XCI+e0xgQXJiZXRzdmVyc2lvbmB9PC9wPn1cclxuICAgICAgPC8+IDogIXNjaG9vbHMgP1xyXG4gICAgICAgIDxTcGlubmVyIC8+IDogPD5cclxuICAgICAgICAgIDxoNSBvbkNsaWNrPXsoKT0+dGhpcy5jbG9zZSgpfT57TGBWw6R4bGEgc2tvbGFgfTwvaDU+XHJcbiAgICAgICAgICA8dWw+XHJcbiAgICAgICAgICAgIDxsaSBvbkNsaWNrPXsoKT0+dGhpcy5zZWxlY3RTY2hvb2woXCJzdGFuZGFyZFwiKX0+e0xgU3RhbmRhcmRgfTwvbGk+XHJcbiAgICAgICAgICAgIHtzY2hvb2xzLmZpbHRlcigoe25hbWV9KSA9PiBuYW1lICE9PSAnc3RhbmRhcmQnKVxyXG4gICAgICAgICAgICAgIC5zb3J0KChhLGIpID0+IGEuZGlzcGxheU5hbWUubG9jYWxlQ29tcGFyZShiLmRpc3BsYXlOYW1lLCBbXCJzdlwiLFwiZW5cIl0pKVxyXG4gICAgICAgICAgICAgIC5tYXAoKHtpZCwgbmFtZTogc2Nob29sLCBkaXNwbGF5TmFtZX0pID0+XHJcbiAgICAgICAgICAgICAgICA8bGkga2V5PXtpZH1cclxuICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9PnRoaXMuc2VsZWN0U2Nob29sKHNjaG9vbCl9PlxyXG4gICAgICAgICAgICAgICAge2Rpc3BsYXlOYW1lfVxyXG4gICAgICAgICAgICA8L2xpPil9XHJcbiAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvPn1cclxuICAgICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgQ2xpY2thYmxlU2Nob29sRGl2ID0gd2l0aFJvdXRlcihDbGlja2FibGVTY2hvb2xEaXZXaXRoUm91dGVyKTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgZnV0dXJlQWJpbGl0aWVzIH0gZnJvbSAnLi4vLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICB0aXRsZTogc3RyaW5nXHJcbiAgc2VsZWN0ZWRGQXM6IHN0cmluZ1tdXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBGdXR1cmVBYmlsaXRpZXNCb3ggPSAoe1xyXG4gIHRpdGxlLFxyXG4gIHNlbGVjdGVkRkFzXHJcbn06IFByb3BzKSA9PiA8T3BlbkNsb3NlQm94IHRpdGxlPXs8cD57dGl0bGV9PC9wPn0gY2xhc3NOYW1lPVwibGFyZ2VyXCI+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFiaWxpdHlMaXN0XCI+XHJcbiAgICAgIHtzZWxlY3RlZEZBcy5tYXAoZmEgPT5cclxuICAgICAgICA8ZGl2IGtleT17ZmF9IGNsYXNzTmFtZT1cImNvbnRlbnRQYXJ0XCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRlbnRUZXh0XCI+XHJcbiAgICAgICAgICAgIDxwPntmYX08L3A+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgKX1cclxuICAgIDwvZGl2PlxyXG48L09wZW5DbG9zZUJveD5cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFJlcG8gfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xyXG5pbXBvcnQgeyBUYXNrLCBBYmlsaXR5LCBDZW50cmFsQ29udGVudCwgS25vd2xlZGdlUmVxdWlyZW1lbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGlzRW1wbG95ZWUgfSBmcm9tICcuLi8uLi8uLi9sb2dpYy9pcy1lbXBsb3llZSc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgVGFza0Fzc2lnbm1lbnRzIH0gZnJvbSAnLi4vLi4vLi4vLi4vY291cnNlLXZpZXdlci9jb3Vyc2UtcGFnZS90YXNrLWFzc2lnbm1lbnRzJztcclxuaW1wb3J0IHsgQWJpbGl0aWVzQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL2FiaWxpdGllcy1ib3gnO1xyXG5pbXBvcnQgeyBDZW50cmFsQ29udGVudEJveCB9IGZyb20gJy4uLy4uLy4uLy4uL2NvdXJzZS12aWV3ZXIvc3ViY29tcG9uZW50cy9jZW50cmFsLWNvbnRlbnQtYm94JztcclxuaW1wb3J0IHsgS25vd2xlZGdlUmVxdWlyZW1lbnRzQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL2tub3dsZWRnZS1yZXF1aXJlbWVudHMtdGFibGUnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyB0YXNrVHlwZUhlYWRpbmdzIH0gZnJvbSAnLi4vdGV4dHMnO1xyXG5pbXBvcnQgeyBGdXR1cmVBYmlsaXRpZXNCb3ggfSBmcm9tICcuLi8uLi8uLi9jb21tb24vZnV0dXJlLWFiaWxpdGllcy1ib3gnO1xyXG5pbXBvcnQgeyBmZWF0dXJlcyB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmVzJztcclxuXHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHNjaG9vbDogc3RyaW5nO1xyXG4gIHRhc2s6IFRhc2s7XHJcbiAgY291cnNlSWQ6IHN0cmluZztcclxuICBhYmlsaXRpZXM6IEFiaWxpdHlbXTtcclxuICBjZW50cmFsQ29udGVudDogQ2VudHJhbENvbnRlbnRbXTtcclxuICByZXF1aXJlbWVudHM6IEtub3dsZWRnZVJlcXVpcmVtZW50W107XHJcbiAgZnV0dXJlQWJpbGl0aWVzOiBzdHJpbmdbXTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFRhc2tWaWV3ZXIgPSAoeyBzY2hvb2wsIHRhc2ssIGNvdXJzZUlkLCBhYmlsaXRpZXMsIGNlbnRyYWxDb250ZW50LCByZXF1aXJlbWVudHMsIGZ1dHVyZUFiaWxpdGllcyB9OiBQcm9wcykgPT4ge1xyXG4gIGNvbnN0IGRlYWRsaW5lVG9vTGF0ZSA9IHRhc2suZGVhZGxpbmUgJiYgbW9tZW50KHRhc2suZGVhZGxpbmUpLmVuZE9mKCdkYXknKSA8IG1vbWVudCgpO1xyXG4gIFxyXG4gIHJldHVybiA8ZGl2PlxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzdi10ZXh0LXBvcnRsZXQgc3YtdXNlLW1hcmdpbnMgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi10ZXh0LXBvcnRsZXQtY29udGVudFwiPlxyXG4gICAgICAgIDxoMSBjbGFzc05hbWU9XCJoMVwiPnt0YXNrLm5hbWV9PC9oMT5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cclxuICAgICAge3Rhc2suY29udGVudCAmJiA8PlxyXG4gICAgICAgIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0YXNrLmNvbnRlbnQgfX0gLz5cclxuICAgICAgPC8+fVxyXG4gICAgPC9kaXY+XHJcbiAgICB7dGFzay5kZXNjcmlwdGlvbiAmJiA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtbXCJrZWRfYm94ZWRcIiwgXCJ0YXNrQm94XCIsIHRhc2sudGFza1R5cGVdLmpvaW4oJyAnKX0gc3R5bGU9e3tjbGVhcjpcImJvdGhcIn19PlxyXG4gICAgICAgIDxoMj57dGFza1R5cGVIZWFkaW5nc1t0YXNrLnRhc2tUeXBlXSB8fCBMYFVwcGdpZnRgfTwvaDI+XHJcbiAgICAgICAgPGRpdiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogdGFzay5kZXNjcmlwdGlvbn19IC8+XHJcbiAgICAgIDwvZGl2PiAgICAgIFxyXG4gICAgPC9kaXY+fVxyXG4gICAge3Rhc2sud29ya2luZ1Byb2NlZHVyZSAmJiA8ZGl2PlxyXG4gICAgICA8aDMgY2xhc3NOYW1lPVwiaDNcIj57TGBBcmJldHNwcm9jZXNzYH08L2gzPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInJpY2gtdGV4dC1yZWFkb25seVwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiB0YXNrLndvcmtpbmdQcm9jZWR1cmV9fSAvPlxyXG4gICAgPC9kaXY+fVxyXG4gICAge3Rhc2suZW1iZWRkZWRIdG1sICYmIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHRhc2suZW1iZWRkZWRIdG1sfX0gLz59XHJcbiAgICA8YnIgLz5cclxuICAgIHt0YXNrLnRhc2tUeXBlID09PSAnYXNzaWdubWVudCcgJiYgZmVhdHVyZXMua3NBc3NpZ25tZW50cyA/IDw+XHJcbiAgICAgIDxoMj5JbmzDpG1uaW5nc3VwcGdpZnQ8L2gyPlxyXG4gICAgICB7aXNFbXBsb3llZShzY2hvb2wpID9cclxuICAgICAgICA8cD5Iw6RyIGthbiBkdSBzb20gbMOkcmFyZSBzZSBlbGV2ZXJuYXMgaW5sw6RtbmFkZSBhcmJldGVuLlxyXG4gICAgPC9wPiA6IGlzRW1wbG95ZWUoKSA/IDxwPlxyXG4gICAgICAgIHtMYERldHRhIMOkciBlbiBpbmzDpG1uaW5nc3VwcGdpZnQgbWVkIGlubMOkbW5pbmdzZGF0dW0gJHttb21lbnQodGFzay5kZWFkbGluZSkuZm9ybWF0KCdZWVlZLU1NLUREJyl9YH1cclxuICAgIDwvcD4gOiA8PlxyXG4gICAgICAgICAgPHA+LiBMw6RtbmEgaW4gZGl0dCBhcmJldGUgc29tIGVuIHBkZiwgZG9jIGVsbGVyIG9kdCBmaWxcclxuICAgICAgICAgICAgZ2Vub20gYXR0IGRyYSBkZXQgdGlsbCBmw6RsdGV0IHVuZGVyLlxyXG4gICAgICA8L3A+XHJcbiAgICAgICAgICB7dGFzay5kZWFkbGluZSA/IDxwPjxiPlxyXG4gICAgICAgICAgICBEZW4gaMOkciB1cHBnaWZ0ZW4ge2RlYWRsaW5lVG9vTGF0ZSA/ICdza3VsbGUgdmFyaXQgaW5sw6RtbmFkICcgOiAnc2thbGwgdmFyYSBpbmzDpG1uYWQgJ31cclxuICAgICAgICAgICAge21vbWVudCh0YXNrLmRlYWRsaW5lKS5mb3JtYXQoJ1lZWVktTU0tREQnKX1cclxuICAgICAgICAgIDwvYj48L3A+IDogdW5kZWZpbmVkfVxyXG4gICAgICAgIDwvPn1cclxuICAgICAgPFRhc2tBc3NpZ25tZW50c1xyXG4gICAgICAgIGNvdXJzZUlkPXtjb3Vyc2VJZH1cclxuICAgICAgICB0YXNrSWQ9e3Rhc2suaWR9XHJcbiAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgc2VuZFRvVXJrdW5kID0ge3Rhc2suc2VuZFRvVXJrdW5kfVxyXG4gICAgICAvPlxyXG4gICAgICA8YnIgLz5cclxuICAgIDwvPiA6IHVuZGVmaW5lZH1cclxuICAgIHtmdXR1cmVBYmlsaXRpZXMubGVuZ3RoID4gMCA/IDxGdXR1cmVBYmlsaXRpZXNCb3hcclxuICAgICAgICB0aXRsZT17TGBJIGRlbiBow6RyIHVwcGdpZnRlbiBiZWhhbmRsYXMgZsO2bGphbmRlIGZyYW10aWRzZsO2cm3DpWdvcmB9XHJcbiAgICAgICAgc2VsZWN0ZWRGQXM9e2Z1dHVyZUFiaWxpdGllc31cclxuICAgICAgLz46IG51bGx9XHJcblxyXG4gICAgICB7cmVxdWlyZW1lbnRzLmxlbmd0aCA+IDAgJiYgdGFzay50YXNrVHlwZSAhPT0gJ2V4ZXJjaXNlJyA/IDxLbm93bGVkZ2VSZXF1aXJlbWVudHNCb3hcclxuICAgICAgICB0aXRsZT1cIkkgZGVuIGjDpHIgdXBwZ2lmdGVuIGJlZMO2bXMgZsO2bGphbmRlIGt1bnNrYXBza3JhdlwiXHJcbiAgICAgICAgY2xhc3NOYW1lPVwibGFyZ2VyXCJcclxuICAgICAgICBoZWFkZXJPcGVuPXtmYWxzZX1cclxuICAgICAgICByZXF1aXJlbWVudHM9e3JlcXVpcmVtZW50c31cclxuICAgICAgICBpZHNUb1N1YmplY3RNYXA9e3Rhc2suaWRzVG9TdWJqZWN0TWFwfVxyXG4gICAgICAgIGV4cGxhaW5lZFJlcXVpcmVtZW50cz17dGFzay5leHBsYWluZWRSZXF1aXJlbWVudHN9XHJcbiAgICAgICAgcGFydGlhbFJlcXVpcm1lbnRzID0ge3Rhc2sucGFydGlhbFJlcXVpcm1lbnRzfVxyXG4gICAgICAvPiA6IG51bGx9XHJcbiAgICAgIFxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICB7YWJpbGl0aWVzLmxlbmd0aCA+IDAgPyA8QWJpbGl0aWVzQm94XHJcbiAgICAgICAgdGl0bGU9XCJEZW4gaMOkciB1cHBnaWZ0ZW4gYmVoYW5kbGFyIGbDtmxqYW5kZSBmw7ZybcOlZ29yXCJcclxuICAgICAgICBjbGFzc05hbWU9XCJsYXJnZXJcIlxyXG4gICAgICAgIGhlYWRlck9wZW49e2ZhbHNlfVxyXG4gICAgICAgIGFiaWxpdGllcz17YWJpbGl0aWVzfSAvPiA6IG51bGx9XHJcblxyXG4gICAgICB7Y2VudHJhbENvbnRlbnQubGVuZ3RoID4gMCA/IDxDZW50cmFsQ29udGVudEJveFxyXG4gICAgICAgIHRpdGxlPVwiRGVuIGjDpHIgdXBwZ2lmdGVuIGJlaGFuZGxhciBmw7ZsamFuZGUgY2VudHJhbGEgaW5uZWjDpWxsXCJcclxuICAgICAgICBjbGFzc05hbWU9XCJsYXJnZXJcIlxyXG4gICAgICAgIGhlYWRlck9wZW49e2ZhbHNlfVxyXG4gICAgICAgIGNlbnRyYWxDb250ZW50PXtjZW50cmFsQ29udGVudH0gLz4gOiBudWxsIH1cclxuICAgIDwvZGl2PlxyXG4gICAgPGhyIC8+XHJcbiAgICB7Lyp1c2VyVGFzayAhPT0gdW5kZWZpbmVkICYmIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICBjbGFzc05hbWU9e2BzZWxlY3RlZEJveCR7dXNlclRhc2sgJiYgdXNlclRhc2suJG1ldGEgIT09ICdkZWxldGluZycgPyAnIHNlbGVjdGVkJyA6ICcnfWB9XHJcbiAgICAgICAgICAgIHN0eWxlPXtpc1dvcmtpbmcgPyB7IG9wYWNpdHk6IDAuNSB9IDoge319XHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+ICFpc1dvcmtpbmcgJiYgdGhpcy50b2dnbGVUYXNrKCl9PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgIHt1c2VyVGFzayA/XHJcbiAgICAgICAgICAgIExgVGEgYm9ydCB1cHBnaWZ0ZW4gZnLDpW4gJHtmb3JXZWVrU3RyaW5nfWAgOlxyXG4gICAgICAgICAgICBMYEzDpGdnIHRpbGwgdXBwZ2lmdGVuIGkgJHtmb3JXZWVrU3RyaW5nfWB9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+Ki99XHJcbiAgICA8aHIgLz5cclxuICAgIHt0YXNrLnJlc291cmNlcyAmJiB0YXNrLnJlc291cmNlcy5sZW5ndGggPiAwICYmIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cclxuICAgICAgPGgyPlJlc3Vyc2VyIGtvcHBsYWRlIHRpbGwgdXBwZ2lmdGVuPC9oMj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyXCI+XHJcbiAgICAgICAge3Rhc2sucmVzb3VyY2VzLm1hcCgociwgaWR4KSA9PlxyXG4gICAgICAgICAgPGRpdiBrZXk9e2lkeH0gY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgIDxhIGhyZWY9e3IudXJsfT57ci5uYW1lfTwvYT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGJyIC8+XHJcbiAgICA8L2Rpdj59XHJcblxyXG4gICA8YnIgLz5cclxuICA8L2Rpdj5cclxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGxpdmVRdWVyeVZpZXcgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGl2ZS1xdWVyeS12aWV3JztcclxuaW1wb3J0IHsgVmFsdWUgfSBmcm9tICdrZWRiYWNrZW5kL29ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBXaXRoR3JhcGhzLCBLZWRCYWNrZW5kUmVwbyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IENvdXJzZUluc3RhbmNlLCBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBUd29Db2x1bW5zUGFnZSB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi90d28tY29sdW1ucy1wYWdlJztcclxuaW1wb3J0IHsgRWRpdFRhc2tGb3JtIH0gZnJvbSAnLi4vcmlnaHQtY29sdW1uL2VkaXQtdGFzay1mb3JtJztcclxuaW1wb3J0IHsgV2Vla1BsYW5uZXIgfSBmcm9tICcuLi8uLi8uLi8uLi93ZWVrcGxhbm5lci93ZWVrcGxhbm5lcic7XHJcbmltcG9ydCB7IFRhc2tWaWV3ZXIgfSBmcm9tICcuL3Rhc2stdmlld2VyJztcclxuaW1wb3J0IHsgTGF6eUNvbnRlbnQgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGF6eS1jb250ZW50JztcclxuaW1wb3J0IHsgcmVzb2x2ZVJlcXVpcmVtZW50T3JkZXIgfSBmcm9tICcuLi8uLi8uLi9sb2dpYy9vcmRlcmVkLXJlcXVpcmVtZW50cyc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFJvdXRlQ29tcG9uZW50UHJvcHMsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBBbGlnbkhvcml6b250YWwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvYWxpZ24taG9yaXpvbnRhbCc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi8uLi8uLi8uLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBQcm9wc3tcclxuICBzY2hvb2w6IHN0cmluZztcclxuICBjb3Vyc2VJZDogc3RyaW5nO1xyXG4gIGxhenlSZXBvOiBWYWx1ZTxLZWRCYWNrZW5kUmVwbz5cclxuICBhY3RpdmVUYWI6IHN0cmluZztcclxuICB0YXNrSWQ6IHN0cmluZztcclxuICBkcmFmdElkPzogc3RyaW5nO1xyXG4gIGNvbnRlbnRJZD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFRhc2tWaWV3ZXJQYWdlID0gbGl2ZVF1ZXJ5VmlldygocHJvcHM6IFByb3BzKSA9PlxyXG4gIHByb3BzLmxhenlSZXBvLm1hcChyZXBvID0+IDxUYXNrVmlld2VyUGFnZUlubmVyIHsuLi57Li4ucHJvcHMsIHJlcG99fSAvPikpO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRhc2tWaWV3ZXJQYWdlSW5uZXIgPSB3aXRoUm91dGVyKGxpdmVRdWVyeVZpZXcoKHtcclxuICBzY2hvb2wsIGNvdXJzZUlkLCBhY3RpdmVUYWIsIHJlcG8sIHRhc2tJZCwgZHJhZnRJZCwgY29udGVudElkLCBoaXN0b3J5fTogUHJvcHMgJiB7cmVwbzogS2VkQmFja2VuZFJlcG99ICYgUm91dGVDb21wb25lbnRQcm9wcykgPT4gKFxyXG4gICAgcmVwby50YXNrc1xyXG4gICAgICAuaW5jbHVkZShcImFiaWxpdGllc1wiLCBcImNlbnRyYWxDb250ZW50XCIsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIpXHJcbiAgICAgIC5pZCh0YXNrSWQpXHJcbiAgICAgIC5tYXAoKHRhc2spID0+IDxUd29Db2x1bW5zUGFnZVxyXG4gICAgICAgIGxlZnQ9ezxMYXp5Q29udGVudD57cmVzb2x2ZVJlcXVpcmVtZW50T3JkZXIodGFzaykubWFwKHRhc2sgPT4gPD5cclxuICAgICAgICAgICAgPFRhc2tWaWV3ZXJcclxuICAgICAgICAgICAgICBzY2hvb2w9e3NjaG9vbH1cclxuICAgICAgICAgICAgICB0YXNrPXt0YXNrfVxyXG4gICAgICAgICAgICAgIGNvdXJzZUlkPXtjb3Vyc2VJZH1cclxuICAgICAgICAgICAgICBhYmlsaXRpZXM9e3Rhc2suYWJpbGl0aWVzfVxyXG4gICAgICAgICAgICAgIGNlbnRyYWxDb250ZW50PXt0YXNrLmNlbnRyYWxDb250ZW50fVxyXG4gICAgICAgICAgICAgIHJlcXVpcmVtZW50cz17dGFzay5rbm93bGVkZ2VSZXF1aXJlbWVudHN9XHJcbiAgICAgICAgICAgICAgZnV0dXJlQWJpbGl0aWVzPXt0YXNrLmZ1dHVyZUFiaWxpdGllc31cclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAge2RyYWZ0SWQgJiYgY29udGVudElkICYmIDw+XHJcbiAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuXCJcclxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT5oaXN0b3J5LnB1c2goYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZUlkfS90YWJzLyR7YWN0aXZlVGFifS9jb250ZW50cy8ke2NvbnRlbnRJZH0vdGFza3MvJHt0YXNrSWR9L2RyYWZ0cy8ke2RyYWZ0SWR9L2VkaXRgKX1cclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1sZyBmYS1wZW5jaWxcIiAvPiB7TGBGb3J0c8OkdHQgcmVkaWdlcmFgfVxyXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8Lz59XHJcbiAgICAgICAgICA8Lz4pfVxyXG4gICAgICAgIDwvTGF6eUNvbnRlbnQ+fVxyXG4gICAgICAgIHJpZ2h0PXs8V2Vla1BsYW5uZXIgZW52PXtlbnZ9IHZpZXdDb3Vyc2VVcmw9e2NmZy5LRURfQ09VUlNFX1ZJRVdFUl9VUkx9IC8+fVxyXG4gICAgICAgIHJpZ2h0V2lkdGg9ezV9XHJcbiAgICAgIC8+KVxyXG4pKSk7XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgZGIsIENvdXJzZUluc3RhbmNlcyB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvZGInO1xyXG5pbXBvcnQgeyBCYW5uZXJQcm9wcywgTGF6eUJhbm5lciB9IGZyb20gJy4uL2NvbW1vbi9iYW5uZXInO1xyXG5pbXBvcnQgeyBFbWl0dGVyLCBDb2xsZWN0aW9uLCBPYnNlcnZhYmxlLCBWYWx1ZSB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IEwsIHNob3dFcnJvciwgY29tcGFyZVByb3AsIGNvbXBhcmVQcm9wcyB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgeyBpc1RlYWNoZXJBdFNjaG9vbCwgcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkgfSBmcm9tICcuLi8uLi8uLi9hY2Nlc3MtY29udHJvbCc7XHJcbmltcG9ydCB7IEFkZFRhYkJ1dHRvbiB9IGZyb20gJy4vYWRkLXRhYi1idXR0b24nO1xyXG5pbXBvcnQgeyB3aXRoUm91dGVyLCBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcclxuaW1wb3J0IHsgQ291cnNlQXJlYSB9IGZyb20gJy4vY291cnNlLWFyZWEnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IFRhc2tFZGl0b3IgfSBmcm9tICcuL3Rhc2svdGFzay1lZGl0b3InO1xyXG5pbXBvcnQgeyBDbGlja2FibGVTY2hvb2xEaXYgfSBmcm9tICcuL2NsaWNrYWJsZS1zY2hvb2wtZGl2JztcclxuaW1wb3J0IHsgaXNFbXBsb3llZSB9IGZyb20gJy4uL2xvZ2ljL2lzLWVtcGxveWVlJztcclxuaW1wb3J0IHsgVGFza1ZpZXdlclBhZ2UgfSBmcm9tICcuL3Rhc2svdmlld2VyL3Rhc2stdmlld2VyLXBhZ2UnO1xyXG5pbXBvcnQgeyBpc0tlZFN0YWZmIH0gZnJvbSAnLi4vbG9naWMvaXMta2VkLXN0YWZmJztcclxuaW1wb3J0IHsgQ291cnNlVGFiLCBUaGVtZUNvdXJzZVRhYiwgVGhlbWVDb3Vyc2VJbnN0YW5jZSwgQ291cnNlSW5zdGFuY2UsIENvdXJzZUJsb2NrLCBTdGVwQ291cnNlVGFiLCBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRSZXBvLCBXaXRoR3JhcGhzLCBTdHJpcEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IHJlb3JkZXIgfSBmcm9tICcuLi9sb2dpYy9jaGFuZ2Utc29ydC1vcmRlcic7XHJcbmltcG9ydCB7IEluamVjdGVkSW50bFByb3BzLCBpbmplY3RJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XHJcbmltcG9ydCB7IHNldHVwSW50bCB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9TZXR1cExhbmd1YWdlSW50bCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBSb3V0ZUNvbXBvbmVudFByb3BzPGFueT4ge1xyXG4gIHNjaG9vbDogc3RyaW5nO1xyXG4gIGNvdXJzZUlkOiBzdHJpbmc7XHJcbiAgYWN0aXZlVGFiPzogc3RyaW5nO1xyXG4gIGRyYWZ0SWQ/OiBzdHJpbmc7XHJcbiAgZWRpdE1vZGU/OiBib29sZWFuO1xyXG4gIGNvbnRlbnRJZD86IHN0cmluZztcclxuICB0YXNrSWQ/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDb3Vyc2VWaWV3ZXJQYWdlID0gd2l0aFJvdXRlcigoKHsgc2Nob29sLCBjb3Vyc2VJZCwgYWN0aXZlVGFiLCBkcmFmdElkLCBlZGl0TW9kZSwgaGlzdG9yeSwgY29udGVudElkLCB0YXNrSWQgfTogUHJvcHMgKSA9PiB7XHJcbiAgY29uc3QgcmVwbyA9IGVkaXRNb2RlID9cclxuICAgIGRiIDogLy8gSW4gZWRpdCBtb2RlLCBkbyBub3Qgb3B0aW1pemUgY2FjaGUsIGFzIGl0IHByb2hpYml0cyBjb2xsYWJvcmF0aW9uXHJcbiAgICBkYi5vcHRpbWl6ZUNhY2hlKCk7XHJcblxyXG4gIGNvbnN0IHNjaG9vbE9ic2VydmFibGUgPSByZXBvLnNjaG9vbHMubmFtZShzY2hvb2wpLnNpbmdsZSgpO1xyXG5cclxuICBjb25zdCBicmFuY2hPYnNlcnZhYmxlID0gZHJhZnRJZCA/IC8vIEluIGVkaXQgbW9kZSwgZHJhZnRJZCBpcyBkZWZpbmVkLlxyXG4gICAgbmV3IEVtaXR0ZXIocmVwby5icmFuY2goZHJhZnRJZCkpIDpcclxuICAgIHNjaG9vbE9ic2VydmFibGUubWFwKHNjaG9vbCA9PiByZXBvLmJyYW5jaChzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZCkpO1xyXG5cclxuICBjb25zdCBjb3Vyc2VPYnNlcnZhYmxlID0gYnJhbmNoT2JzZXJ2YWJsZS5zd2l0Y2hNYXAoYnJhbmNoID0+XHJcbiAgICBicmFuY2guY291cnNlSW5zdGFuY2VzLmluY2x1ZGUoXCJibG9ja3NcIiwgXCJ0YWJzXCIpLmlkKGNvdXJzZUlkKSk7XHJcblxyXG4gIGNvbnN0IGludGVybWVkaWF0ZU9ic2VydmFibGVVbnNvcnRlZDogVmFsdWU8e1xyXG4gICAgY291cnNlOiBXaXRoR3JhcGhzPENvdXJzZUluc3RhbmNlLCBcImJsb2Nrc1wiIHwgXCJ0YWJzXCI+XHJcbiAgICB0YWJzOiBDb3Vyc2VUYWJbXVxyXG4gICAgYnJhbmNoOiBLZWRCYWNrZW5kUmVwbyxcclxuICAgIGJsb2NrOiBDb3Vyc2VCbG9jayB8IG51bGwsXHJcbiAgICBzY2hvb2xFbnRpdHk6IFNjaG9vbFxyXG4gIH0+ID0gY291cnNlT2JzZXJ2YWJsZS5jb21iaW5lTGF0ZXN0KHNjaG9vbE9ic2VydmFibGUpXHJcbiAgICAuc3dpdGNoTWFwKChbY291cnNlLCBzY2hvb2xFbnRpdHldKSA9PiB7XHJcbiAgICAgIGNvbnN0IGJyYW5jaCA9IGRyYWZ0SWQgP1xyXG4gICAgICAgIHJlcG8uYnJhbmNoKGRyYWZ0SWQpIDpcclxuICAgICAgICByZXBvLmJyYW5jaChzY2hvb2xFbnRpdHkub2ZmaWNpYWxCcmFuY2hJZCk7XHJcblxyXG4gICAgICBpZiAoY291cnNlLnR5cGUgPT09ICd0aGVtZS1jb3Vyc2UnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBFbWl0dGVyKHtjb3Vyc2UsIHRhYnM6IGNvdXJzZS50YWJzLCBicmFuY2gsIGJsb2NrOiBudWxsLCBzY2hvb2xFbnRpdHl9KTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoYWN0aXZlVGFiICYmIGFjdGl2ZVRhYiAhPT0gJyQnKVxyXG4gICAgICAgIHJldHVybiBicmFuY2guY291cnNlQmxvY2tzLmhhc0VkZ2VzVG8oW2FjdGl2ZVRhYl0pLmluY2x1ZGUoXCJ0YWJzXCIpLnRvVmFsdWUoKVxyXG4gICAgICAgICAgLm1hcCgoW2Jsb2NrXSkgPT4gKHtcclxuICAgICAgICAgICAgY291cnNlLFxyXG4gICAgICAgICAgICB0YWJzOiBibG9jay50YWJzLFxyXG4gICAgICAgICAgICBicmFuY2gsXHJcbiAgICAgICAgICAgIGJsb2NrOiBibG9jayB8fCBjb3Vyc2UuYmxvY2tzWzBdLFxyXG4gICAgICAgICAgICBzY2hvb2xFbnRpdHlcclxuICAgICAgICAgIH0pKTtcclxuICAgICAgaWYgKGNvdXJzZS5ibG9ja3MubGVuZ3RoID4gMClcclxuICAgICAgICByZXR1cm4gYnJhbmNoLmNvdXJzZUJsb2Nrcy5pbmNsdWRlKFwidGFic1wiKS5pZChjb3Vyc2UuYmxvY2tzWzBdLmlkKVxyXG4gICAgICAgICAgLm1hcChibG9jayA9PiAoe1xyXG4gICAgICAgICAgICBjb3Vyc2UsXHJcbiAgICAgICAgICAgIHRhYnM6IGJsb2NrLnRhYnMsXHJcbiAgICAgICAgICAgIGJyYW5jaCxcclxuICAgICAgICAgICAgYmxvY2ssXHJcbiAgICAgICAgICAgIHNjaG9vbEVudGl0eVxyXG4gICAgICAgICAgfSkpO1xyXG4gICAgICByZXR1cm4gbmV3IEVtaXR0ZXIoe2NvdXJzZSwgdGFiczogW10sIGJyYW5jaCwgYmxvY2s6IG51bGwsIHNjaG9vbEVudGl0eX0pO1xyXG4gICAgfSk7XHJcblxyXG4gIGNvbnN0IGludGVybWVkaWF0ZU9ic2VydmFibGUgPSBpbnRlcm1lZGlhdGVPYnNlcnZhYmxlVW5zb3J0ZWQubWFwKHZhbHMgPT4gKHtcclxuICAgIC4uLnZhbHMsXHJcbiAgICB0YWJzOiB2YWxzLnRhYnMgJiYgdmFscy50YWJzLnNvcnQoY29tcGFyZVByb3BzKFtcInN0ZXBOb1wiLCBcIm9yZGVyXCJdKSlcclxuICB9KSk7XHJcblxyXG4gIGNvbnN0IGJhbm5lclByb3BzT2JzZXJ2YWJsZSA9IGludGVybWVkaWF0ZU9ic2VydmFibGVcclxuICAgIC5tYXA8QmFubmVyUHJvcHM+KCh7Y291cnNlLCB0YWJzLCBicmFuY2gsIGJsb2NrLCBzY2hvb2xFbnRpdHl9KSA9PiB7XHJcbiAgICAgIHJldHVybiBnZXRDb3Vyc2VCYW5uZXJQcm9wcyhcclxuICAgICAgICB0YWJzLFxyXG4gICAgICAgIGVkaXRNb2RlLFxyXG4gICAgICAgIHNjaG9vbCxcclxuICAgICAgICBzY2hvb2xFbnRpdHksXHJcbiAgICAgICAgZHJhZnRJZCxcclxuICAgICAgICBjb3Vyc2UgYXMgQ291cnNlSW5zdGFuY2UsXHJcbiAgICAgICAgYnJhbmNoLFxyXG4gICAgICAgIGFjdGl2ZVRhYixcclxuICAgICAgICBibG9jaylcclxuICAgIH0pO1xyXG5cclxuICByZXR1cm4gPD5cclxuICAgIDxMYXp5QmFubmVyXHJcbiAgICAgIGxhenlQcm9wcz17YmFubmVyUHJvcHNPYnNlcnZhYmxlfVxyXG4gICAgLz5cclxuICAgICAge1xyXG4gICAgICAgIHRhc2tJZCA/IGVkaXRNb2RlID9cclxuICAgICAgICAgIDxMYXp5Q29udGVudD5cclxuICAgICAgICAgICAge2ludGVybWVkaWF0ZU9ic2VydmFibGUubWFwKCh7YnJhbmNoLCBibG9jaywgY291cnNlLCB0YWJzfSkgPT4gPFRhc2tFZGl0b3JcclxuICAgICAgICAgICAgICBzY2hvb2w9e3NjaG9vbH1cclxuICAgICAgICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cclxuICAgICAgICAgICAgICBkcmFmdElkPXtkcmFmdElkfVxyXG4gICAgICAgICAgICAgIGJyYW5jaD17YnJhbmNofVxyXG4gICAgICAgICAgICAgIGFjdGl2ZVRhYj17YWN0aXZlVGFifVxyXG4gICAgICAgICAgICAgIGNvbnRlbnRJZD17Y29udGVudElkfVxyXG4gICAgICAgICAgICAgIHRhc2tJZD17dGFza0lkfVxyXG4gICAgICAgICAgICAgIGJsb2NrSWQ9e2Jsb2NrICYmIGJsb2NrLmlkfVxyXG4gICAgICAgICAgICAvPil9XHJcbiAgICAgICAgICA8L0xhenlDb250ZW50PiA6XHJcbiAgICAgICAgICA8VGFza1ZpZXdlclBhZ2VcclxuICAgICAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgICAgIGNvdXJzZUlkPXtjb3Vyc2VJZH1cclxuICAgICAgICAgICAgbGF6eVJlcG89e2JyYW5jaE9ic2VydmFibGV9XHJcbiAgICAgICAgICAgIGFjdGl2ZVRhYj17YWN0aXZlVGFifVxyXG4gICAgICAgICAgICB0YXNrSWQ9e3Rhc2tJZH1cclxuICAgICAgICAgICAgY29udGVudElkPXtjb250ZW50SWR9XHJcbiAgICAgICAgICAgIGRyYWZ0SWQ9e2RyYWZ0SWR9XHJcbiAgICAgICAgLz4gOlxyXG4gICAgICAgIDxMYXp5Q29udGVudD5cclxuICAgICAgICAgIHtpbnRlcm1lZGlhdGVPYnNlcnZhYmxlLm1hcCgoe2JyYW5jaCwgYmxvY2ssIGNvdXJzZSwgdGFic30pID0+IFxyXG4gICAgICAgICAgICA8Q291cnNlQXJlYVxyXG4gICAgICAgICAgICAgIHNjaG9vbD17c2Nob29sfVxyXG4gICAgICAgICAgICAgIGNvdXJzZUlkPXtjb3Vyc2VJZH1cclxuICAgICAgICAgICAgICBkcmFmdElkPXtkcmFmdElkfVxyXG4gICAgICAgICAgICAgIGNvdXJzZT17Y291cnNlfVxyXG4gICAgICAgICAgICAgIGJyYW5jaD17YnJhbmNofVxyXG4gICAgICAgICAgICAgIHRhYnM9e3RhYnN9XHJcbiAgICAgICAgICAgICAgYWN0aXZlVGFiPXthY3RpdmVUYWJ9XHJcbiAgICAgICAgICAgICAgZWRpdE1vZGU9e2VkaXRNb2RlfVxyXG4gICAgICAgICAgICAgIGJsb2NrPXtibG9ja31cclxuICAgICAgICAgIC8+KX1cclxuICAgICAgICA8L0xhenlDb250ZW50PlxyXG4gICAgICB9XHJcbiAgPC8+XHJcbn0pKTtcclxuXHJcbmZ1bmN0aW9uIGdldENvdXJzZUJhbm5lclByb3BzKFxyXG4gIHRhYnM6IENvdXJzZVRhYltdLFxyXG4gIGVkaXRNb2RlOiBib29sZWFuLFxyXG4gIHNjaG9vbDogc3RyaW5nLFxyXG4gIHNjaG9vbEVudGl0eTogU2Nob29sLFxyXG4gIGRyYWZ0SWQ6IHN0cmluZyxcclxuICBjb3Vyc2U6IENvdXJzZUluc3RhbmNlLFxyXG4gIGJyYW5jaDogS2VkQmFja2VuZFJlcG8sXHJcbiAgYWN0aXZlVGFiOiBzdHJpbmcsXHJcbiAgYmxvY2s/OiBDb3Vyc2VCbG9jaykgOiBCYW5uZXJQcm9wc1xyXG57XHJcbiAgY29uc3Qga2VkU3RhZmYgPSBpc0tlZFN0YWZmKCk7XHJcbiAgY29uc3QgY291cnNlSWQgPSBjb3Vyc2UuaWQ7XHJcbiAgY29uc3QgYWN0aXZlVGFiT2JqID0gdGFicy5maWx0ZXIodGFiID0+IHRhYi5pZCA9PT0gYWN0aXZlVGFiKVswXSB8fCB0YWJzWzBdO1xyXG4gIGlmIChjb3Vyc2UudHlwZSA9PT0gJ3N0ZXAtY291cnNlJyAmJiBhY3RpdmVUYWJPYmogJiYgYWN0aXZlVGFiT2JqLnR5cGUgPT09ICdzdGVwLWNvdXJzZS10YWInKSB7XHJcbiAgICB0YWJzID0gdGFicy5maWx0ZXIodGFiID0+IHRhYi50eXBlID09PSAnc3RlcC1jb3Vyc2UtdGFiJyAmJiB0YWIuc3RlcE5vID09PSBhY3RpdmVUYWJPYmouc3RlcE5vKTtcclxuICB9XHJcbiAgY29uc3QgYmFubmVyVGFicyA9IChpc0VtcGxveWVlKCkgPyB0YWJzIDogdGFicy5maWx0ZXIodGFiID0+IHRhYi50YWJDbGFzcyAhPT0gJ3RlYWNoZXItdGFiJykpXHJcbiAgICAubWFwPEJhbm5lclByb3BzW1widGFic1wiXVtudW1iZXJdPih0YWIgPT4gKHtcclxuICAgICAga2V5OiB0YWIuaWQsXHJcbiAgICAgIG5hbWU6IHRhYi50YWJUaXRsZSwgLy8gVE9ETzogUmVwbGFjZSB3aXRoIHRhYi5uYW1lIVxyXG4gICAgICBkcmFnZ2FibGU6IHRydWUsXHJcbiAgICAgIGxpbms6IGVkaXRNb2RlID9cclxuICAgICAgICBgLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlSWR9L3RhYnMvJHt0YWIuaWR9JHtkcmFmdElkID8gYC9kcmFmdHMvJHtkcmFmdElkfWAgOiAnJ30vZWRpdGAgOlxyXG4gICAgICAgIGAvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2VJZH0vdGFicy8ke3RhYi5pZH0ke2RyYWZ0SWQgPyBgL2RyYWZ0cy8ke2RyYWZ0SWR9YCA6ICcnfWBcclxuICAgIH0pKTtcclxuICBjb25zdCBidXR0b25zOiBKU1guRWxlbWVudFtdID0gW107XHJcbiAgaWYgKGVkaXRNb2RlICYmIChrZWRTdGFmZiB8fCBjb3Vyc2UuYWxsb3dBZGRUYWJzKSkge1xyXG4gICAgaWYgKGNvdXJzZS50eXBlID09PSAndGhlbWUtY291cnNlJykge1xyXG4gICAgICBidXR0b25zLnB1c2goPEFkZFRhYkJ1dHRvblxyXG4gICAgICAgICAgdHlwZT1cInRoZW1lLWNvdXJzZS10YWJcIlxyXG4gICAgICAgICAga2V5PVwiJGFkZFRhYlwiIHNjaG9vbD17c2Nob29sfSBjb3Vyc2U9e2NvdXJzZX0gYnJhbmNoPXticmFuY2h9IGRyYWZ0SWQ9e2RyYWZ0SWR9IC8+KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHN0ZXBObyA9IGFjdGl2ZVRhYk9iaiA/XHJcbiAgICAgICAgKGFjdGl2ZVRhYk9iaiBhcyBTdGVwQ291cnNlVGFiKS5zdGVwTm8gOlxyXG4gICAgICAgIGJsb2NrLnN0ZXBOdW1iZXJzWzBdIHx8IDE7XHJcbiAgICAgIGJ1dHRvbnMucHVzaCg8QWRkVGFiQnV0dG9uXHJcbiAgICAgICAgdHlwZT1cInN0ZXAtY291cnNlLXRhYlwiXHJcbiAgICAgICAga2V5PVwiJGFkZFRhYlwiXHJcbiAgICAgICAgc2Nob29sPXtzY2hvb2x9IGNvdXJzZT17Y291cnNlfSBicmFuY2g9e2JyYW5jaH0gZHJhZnRJZD17ZHJhZnRJZH0gYmxvY2s9e2Jsb2NrfSBzdGVwTm89e3N0ZXBOb31cclxuICAgICAgLz4pO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoa2VkU3RhZmYpIHtcclxuICAgIC8vIFJlbW92ZSB0aGUgXCJyb2xlXCIgYXR0cmlidXRlIGZyb20gcXVlcnksIGFzIHdlIHdhbnQgdG8gc3RvcCBpbXBlcnNvbmF0aW5nIGFuIEVtcGxveWVlIHdoZW4gdXNpbmcgdGhlIGFkbWluIGludGVyZmFjZVxyXG4gICAgYnV0dG9ucy5wdXNoKDxhXHJcbiAgICAgIGhyZWY9e3ByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5KGNmZy5LRURfU1VCSkVDVF9QTEFOTkVSX0FETUlOX1VSTCwge3JvbGU6IHVuZGVmaW5lZH0pICtcclxuICAgICAgICBgIy9hZG1pbi9jb3Vyc2VzLyR7Y291cnNlSWR9L3NldHRpbmdzYH1cclxuICAgICAga2V5PVwiJHNldHRpbmdzXCJcclxuICAgICAgdGl0bGU9e0xgSW5zdMOkbGxuaW5nYXJgfVxyXG4gICAgPlxyXG4gICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1jb2dcIiBhcmlhLWhpZGRlbj17dHJ1ZX0gLz4mbmJzcDtcclxuICAgIDwvYT4pO1xyXG4gIH1cclxuICBjb25zdCBiYW5uZXJQcm9wczogQmFubmVyUHJvcHMgPSB7XHJcbiAgICB0aXRsZTogY291cnNlLm5hbWUsXHJcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IG51bGwsXHJcbiAgICB0YWJzOiBiYW5uZXJUYWJzLFxyXG4gICAgY29ybmVyQm94OiA8Q2xpY2thYmxlU2Nob29sRGl2IHNjaG9vbD17c2Nob29sfSBkcmFmdElkPXtkcmFmdElkfSBkaXNwbGF5TmFtZT17c2Nob29sRW50aXR5LmRpc3BsYXlOYW1lIHx8IHNjaG9vbH0gLz4sXHJcbiAgICBidXR0b25zLFxyXG4gICAgYWN0aXZlVGFiOiBhY3RpdmVUYWIgfHwgKGJhbm5lclRhYnNbMF0gJiYgYmFubmVyVGFic1swXS5rZXkpLFxyXG4gICAgYmxvY2tzOiBjb3Vyc2UuYmxvY2tzICYmIGNvdXJzZS5ibG9ja3Muc29ydChjb21wYXJlUHJvcChcImJsb2NrTm9cIikpLm1hcCgoe2lkOiBibG9ja0lkLCBuYW1lLCBzdGVwTnVtYmVyc30pID0+ICh7XHJcbiAgICAgIGlkOiBibG9ja0lkLFxyXG4gICAgICBuYW1lLFxyXG4gICAgICBzdGVwczogc3RlcE51bWJlcnMubWFwKHN0ZXBObyA9PiAoe1xyXG4gICAgICAgIGlzQWN0aXZlOiBhY3RpdmVUYWJPYmogJiYgc3RlcE5vID09PSAoYWN0aXZlVGFiT2JqIGFzIFN0ZXBDb3Vyc2VUYWIpLnN0ZXBObyxcclxuICAgICAgICBzdGVwTm8sXHJcbiAgICAgICAgbGluazogYC8ke3NjaG9vbH0vY291cnNlcy8ke2NvdXJzZUlkfS9ibG9ja3MvJHtibG9ja0lkfS9zdGVwcy8ke3N0ZXBOb31gXHJcbiAgICAgIH0pKVxyXG4gICAgfSkpLFxyXG4gICAgc29ydGFibGVUYWJzOiBlZGl0TW9kZSAmJiAoa2VkU3RhZmYgfHwgY291cnNlLmFsbG93UmVvcmRlclRhYnMpLFxyXG4gICAgb25UYWJEcm9wOiBhc3luYyAoc291cmNlLCB0YXJnZXQsIHBsYWNlbWVudCkgPT4ge1xyXG4gICAgICBjb25zdCBuZXdPcmRlciA9IHJlb3JkZXIodGFicywgc291cmNlLCB0YXJnZXQsIHBsYWNlbWVudCk7XHJcbiAgICAgIGlmIChuZXdPcmRlcikge1xyXG4gICAgICAgIGNvbnN0IHNvdXJjZVRhYiA9IHRhYnMuZmluZCh0ID0+IHQuaWQgPT09IHNvdXJjZSk7XHJcbiAgICAgICAgaWYgKHNvdXJjZVRhYikge1xyXG4gICAgICAgICAgYnJhbmNoLmNvdXJzZVRhYnMudXBkYXRlKHNvdXJjZVRhYiwge29yZGVyOiBuZXdPcmRlcn0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcbiAgcmV0dXJuIGJhbm5lclByb3BzO1xyXG59XHJcblxyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IEFsaWduSG9yaXpvbnRhbCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9hbGlnbi1ob3Jpem9udGFsJztcclxuaW1wb3J0IHsgSG9yaXpvbnRhbEl0ZW0gfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvaG9yaXpvbnRhbC1pdGVtJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICBjb3Vyc2VzOiBBcnJheTx7XHJcbiAgICBuYW1lOiBzdHJpbmcsXHJcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nLFxyXG4gICAgdGFnczogc3RyaW5nW10sXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIGlkOiBzdHJpbmdcclxuICB9PjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFN0dWRlbnRDb3Vyc2VzQm94ID0gKHt0aXRsZSwgY291cnNlc306IFByb3BzKSA9PlxyXG4gIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkXCI+XHJcbiAgICA8aDM+e3RpdGxlfTwvaDM+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXIgb2RkLWV2ZW5cIj5cclxuICAgICAge2NvdXJzZXMubWFwKCh7aWQsIG5hbWUsIGRlc2NyaXB0aW9uLCB0YWdzfSkgPT5cclxuICAgICAgICA8QWxpZ25Ib3Jpem9udGFsPlxyXG4gICAgICAgICAgPEhvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0dWRlbnRDb3Vyc2VcIj5cclxuICAgICAgICAgICAgICA8TGluayB0bz17YC9jb3Vyc2VzLyR7aWR9YH0+e25hbWV9PC9MaW5rPlxyXG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+e2Rlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L0hvcml6b250YWxJdGVtPlxyXG4gICAgICAgICAge3RhZ3MuaW5jbHVkZXMoXCJhY3RpdmVcIikgPyB1bmRlZmluZWQgOiA8SG9yaXpvbnRhbEl0ZW0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGlsbCBpbmNvbXBsZXRlXCI+SW5ha3RpdjwvZGl2PlxyXG4gICAgICAgICAgPC9Ib3Jpem9udGFsSXRlbT59XHJcbiAgICAgICAgPC9BbGlnbkhvcml6b250YWw+XHJcbiAgICAgICl9XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgbGl2ZVF1ZXJ5VmlldyB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9saXZlLXF1ZXJ5LXZpZXcnO1xyXG5pbXBvcnQgeyBsaXN0Q291cnNlSW5zdGFuY2VzIH0gZnJvbSAnLi4vLi4vbG9naWMvbGlzdC1jb3Vyc2UtaW5zdGFuY2VzJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgU3R1ZGVudENvdXJzZXNCb3ggfSBmcm9tICcuL3N0dWRlbnQtY291cnNlcy1ib3gnO1xyXG4vL2ltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgc2hvd0luYWN0aXZlPzogYm9vbGVhblxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTGlzdENvdXJzZXMgPSBsaXZlUXVlcnlWaWV3KCh7c2hvd0luYWN0aXZlfTogUHJvcHMpPT5cclxuICAoc2hvd0luYWN0aXZlID9cclxuICAgIGxpc3RDb3Vyc2VJbnN0YW5jZXMoKSA6XHJcbiAgICBsaXN0Q291cnNlSW5zdGFuY2VzKCkudGFncyhcImFjdGl2ZVwiKVxyXG4gICkgLm9yZGVyQnkoXCJuYW1lXCIpXHJcbiAgICAubWFwKCh7aWQsIG5hbWUsIHR5cGUsIGRlc2NyaXB0aW9uLCB0YWdzfSkgPT4gKHtcclxuICAgICAgaWQsXHJcbiAgICAgIG5hbWUsXHJcbiAgICAgIHR5cGUsXHJcbiAgICAgIHRhZ3MsXHJcbiAgICAgIGRlc2NyaXB0aW9uLFxyXG4gICAgICB1cmw6IGAvY291cnNlcy8ke2lkfWBcclxuICAgIH0pKVxyXG4gICAgLmdyb3VwQnkoXCJ0eXBlXCIpXHJcbiAgICAubWFwKGFycmF5c0J5VHlwZSA9PiAoe1xyXG4gICAgICB0aGVtZUNvdXJzZXM6IGFycmF5c0J5VHlwZVtcInRoZW1lLWNvdXJzZVwiXSxcclxuICAgICAgc3RlcENvdXJzZXM6IGFycmF5c0J5VHlwZVtcInN0ZXAtY291cnNlXCJdXHJcbiAgICB9KSlcclxuICAgIC5tYXAoKHt0aGVtZUNvdXJzZXMsIHN0ZXBDb3Vyc2VzfSkgPT4gPD5cclxuXHJcbiAgICAgIHt0aGVtZUNvdXJzZXMgJiYgPFN0dWRlbnRDb3Vyc2VzQm94IFxyXG4gICAgICAgIHRpdGxlPXtMYFRlbWFrdXJzZXJgfVxyXG4gICAgICAgIGNvdXJzZXM9e3RoZW1lQ291cnNlc31cclxuICAgICAgLz59XHJcblxyXG4gICAgICB7c3RlcENvdXJzZXMgJiYgPFN0dWRlbnRDb3Vyc2VzQm94XHJcbiAgICAgICAgdGl0bGU9e0xgU3RlZ2t1cnNlcmB9XHJcbiAgICAgICAgY291cnNlcz17c3RlcENvdXJzZXN9XHJcbiAgICAgIC8+fVxyXG5cclxuPC8+KSk7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9kYic7XHJcbmltcG9ydCB7IGNvbXBhcmVQcm9wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzY2hvb2w6IHN0cmluZ1xyXG4gIGNvdXJzZUlkOiBzdHJpbmdcclxuICBibG9ja0lkOiBzdHJpbmdcclxuICBzdGVwTm86IHN0cmluZyB8IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgUmVkaXJlY3RUb1N0ZXAgPSAoe1xyXG4gIHNjaG9vbCxcclxuICBjb3Vyc2VJZCxcclxuICBibG9ja0lkLFxyXG4gIHN0ZXBOb1xyXG59OiBQcm9wcykgPT4gPExhenlDb250ZW50PntcclxuICBkYi5vcHRpbWl6ZUNhY2hlKCkuc2Nob29scy5uYW1lKHNjaG9vbCkuc2luZ2xlKClcclxuICAgIC5tYXAoc2Nob29sID0+IGRiLmJyYW5jaChzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZCkpXHJcbiAgICAuc3dpdGNoTWFwKGJyYW5jaFJlcG8gPT5cclxuICAgICAgYnJhbmNoUmVwby5jb3Vyc2VCbG9ja3MuaW5jbHVkZShcInRhYnNcIikuaWQoYmxvY2tJZClcclxuICAgICAgICAubWFwKGJsb2NrID0+IHtcclxuICAgICAgICAgIGNvbnN0IGZpcnN0VGFiID0gYmxvY2sudGFicy5maWx0ZXIodGFiID0+ICcnK3RhYi5zdGVwTm8gPT09ICcnK3N0ZXBObykuc29ydChjb21wYXJlUHJvcChcIm9yZGVyXCIpKVswXTtcclxuICAgICAgICAgIGlmIChmaXJzdFRhYilcclxuICAgICAgICAgICAgcmV0dXJuIDxSZWRpcmVjdFxyXG4gICAgICAgICAgICAgIHRvPXtgLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlSWR9L3RhYnMvJHtmaXJzdFRhYi5pZH1gfVxyXG4gICAgICAgICAgICAvPjtcclxuICAgICAgICAgIHJldHVybiA8UmVkaXJlY3RcclxuICAgICAgICAgICAgdG89e2AvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2VJZH1gfVxyXG4gICAgICAgICAgLz47XHJcbiAgICAgICAgfSkpXHJcbn08L0xhenlDb250ZW50PiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IExhenlDb250ZW50IH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL2xhenktY29udGVudCc7XHJcbmltcG9ydCB7IGRiLCBDb3Vyc2VJbnN0YW5jZXMgfSBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgTGF6eUJhbm5lciwgQmFubmVyUHJvcHMgfSBmcm9tICcuLi8uLi9jb21tb24vYmFubmVyJztcclxuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgVmVyc2lvbkhpc3RvcnlCb3ggfSBmcm9tICcuL3ZlcnNpb24taGlzdG9yeS1ib3gnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzY2hvb2w6IHN0cmluZ1xyXG4gIGNvdXJzZUlkOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFZlcnNpb25IaXN0b3J5UGFnZSA9ICh7c2Nob29sLCBjb3Vyc2VJZH06IFByb3BzKSA9PiB7XHJcbiAgY29uc3Qgc2Nob29sT2JzZXJ2YWJsZSA9IGRiLnNjaG9vbHMubmFtZShzY2hvb2wpLnNpbmdsZSgpO1xyXG4gIGNvbnN0IGRyYWZ0T2JzZXJ2YWJsZSA9XHJcbiAgICBDb3Vyc2VJbnN0YW5jZXMuZ2V0QnJhbmNoSWQoc2Nob29sT2JzZXJ2YWJsZSwgY291cnNlSWQpXHJcbiAgICAgIC5tYXAoZHJhZnRJZCA9PiBkYi5icmFuY2goZHJhZnRJZCkpO1xyXG5cclxuICBjb25zdCBicmFuY2hPYnNlcnZhYmxlID1cclxuICAgIHNjaG9vbE9ic2VydmFibGUubWFwKHNjaG9vbCA9PiBkYi5icmFuY2goc2Nob29sLm9mZmljaWFsQnJhbmNoSWQpKTtcclxuXHJcbiAgY29uc3QgYmFubmVyUHJvcHNPYnNlcnZhYmxlID1cclxuICAgIGRyYWZ0T2JzZXJ2YWJsZS5zd2l0Y2hNYXAocmVwbyA9PiByZXBvLmNvdXJzZUluc3RhbmNlcy5pZChjb3Vyc2VJZCkubWFwKGNvdXJzZSA9PiAoe1xyXG4gICAgICB0aXRsZTogY291cnNlLm5hbWUsXHJcbiAgICAgIHRhYnM6IFt7bmFtZTogTGBWZXJzaW9uc2hpc3RvcmlrYCwga2V5OmB2ZXJzaW9uaGlzdG9yeWB9XSxcclxuICAgICAgYnV0dG9uczogWzxMaW5rXHJcbiAgICAgICAgdG89e2AvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2VJZH1gfVxyXG4gICAgICAgIGtleT1cIiRzZXR0aW5nc1wiXHJcbiAgICAgICAgdGl0bGU9e0xgVmlzYSBrdXJzZW5gfVxyXG4gICAgICA+XHJcbiAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZXllXCIgYXJpYS1oaWRkZW49e3RydWV9IC8+Jm5ic3A7XHJcbiAgICAgIDwvTGluaz5dXHJcbiAgICB9IGFzIEJhbm5lclByb3BzKSkpO1xyXG4gIHJldHVybiA8PlxyXG4gICAgPExhenlCYW5uZXIgbGF6eVByb3BzPXtiYW5uZXJQcm9wc09ic2VydmFibGV9IC8+XHJcbiAgICA8TGF6eUNvbnRlbnQ+e1xyXG4gICAgICBzY2hvb2xPYnNlcnZhYmxlLm1hcCgoe2Rpc3BsYXlOYW1lOiBzY2hvb2xEaXNwbGF5TmFtZSwgb2ZmaWNpYWxCcmFuY2hJZH0pID0+IFxyXG4gICAgICAgIDxWZXJzaW9uSGlzdG9yeUJveFxyXG4gICAgICAgICAgYnJhbmNoVHlwZT1cInNjaG9vbC1icmFuY2hcIlxyXG4gICAgICAgICAgYnJhbmNoSWQ9e29mZmljaWFsQnJhbmNoSWR9XHJcbiAgICAgICAgICBjb3Vyc2VJZD17Y291cnNlSWR9XHJcbiAgICAgICAgICBpc0FkbWluPXtmYWxzZX1cclxuICAgICAgICAgIC8+XHJcbiAgICApXHJcbiAgfTwvTGF6eUNvbnRlbnQ+XHJcbiAgPC8+XHJcblxyXG4gIC8qPGJ1dHRvblxyXG4gICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4td2FybmluZ1wiXHJcbiAgICBvbkNsaWNrPXthc3luYyAoKT0+e1xyXG4gICAgICBpZiAoY29uZmlybShMYEFsbGEgbW9kaWZpZXJpbmdhciBzb20gZ2pvcnRzIGbDtnIgc2tvbGFuICR7c2Nob29sRGlzcGxheU5hbWV9IGtvbW1lciBhdHQgZsO2cnN2aW5uYS5cclxuICAgICAgXHJcbiAgICAgIEZvcnRzw6R0dD9gKSkge1xyXG4gICAgICAgIGNvbnN0IGJyYW5jaCA9IGF3YWl0IGJyYW5jaE9ic2VydmFibGUubG9hZCgpO1xyXG4gICAgICAgIGJyYW5jaC5jbGVhckJyYW5jaCgpO1xyXG4gICAgICAgIGRiLmJyYW5jaGVzLmRlbGV0ZSgpXHJcbiAgICAgIH1cclxuICAgIH19XHJcbiAgPntMYMOFdGVyc3TDpGxsIGt1cnNlbiB0aWxsIHN0YW5kYXJkYH08L2J1dHRvbj4gKi9cclxuXHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIExpbmssIFJlZGlyZWN0LCBSb3V0ZVByb3BzLCBSb3V0ZUNvbXBvbmVudFByb3BzIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IEVycm9yU3VjY2Vzc0ZlZWRiYWNrIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZXJyb3Itc3VjY2Vzcy1mZWVkYmFjayc7XHJcbmltcG9ydCB7IEJhbm5lciwgTGF6eUJhbm5lciwgQmFubmVyUHJvcHMgfSBmcm9tICcuLi9jb21tb24vYmFubmVyJztcclxuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvciB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9sb2FkaW5nLWluZGljYXRvcic7XHJcbmltcG9ydCB7IGxpdmVRdWVyeVZpZXcgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvbGl2ZS1xdWVyeS12aWV3JztcclxuaW1wb3J0IHsgU2Nob29scywgZGIgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcclxuaW1wb3J0IHsgU2Nob29sIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgQ291cnNlVmlld2VyUGFnZSB9IGZyb20gJy4vY291cnNlLXZpZXdlci1wYWdlJztcclxuaW1wb3J0IHsgVHdvQ29sdW1uc1BhZ2UgfSBmcm9tICcuLi9jb21tb24vdHdvLWNvbHVtbnMtcGFnZSc7XHJcbmltcG9ydCB7IFdlZWtQbGFubmVyIH0gZnJvbSAnLi4vLi4vd2Vla3BsYW5uZXIvd2Vla3BsYW5uZXInO1xyXG5pbXBvcnQgeyBMaXN0Q291cnNlcyB9IGZyb20gJy4vbGlzdC1jb3Vyc2VzJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgY2ZnIGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XHJcbmltcG9ydCB7IFJlZGlyZWN0VG9TdGVwIH0gZnJvbSAnLi9yZWRpcmVjdC10by1zdGVwJztcclxuaW1wb3J0IHsgVmVyc2lvbkhpc3RvcnlQYWdlIH0gZnJvbSAnLi92ZXJzaW9uLWhpc3RvcnknO1xyXG5pbXBvcnQgeyBrZWVwU2Vzc2lvbkFsaXZlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMva2VlcC1zZXNzaW9uLWFsaXZlJztcclxuaW1wb3J0IHsgc2V0dXBEaWFsb2dzIH0gZnJvbSAnLi4vY29tbW9uL2RpYWxvZy1jb250ZW50JztcclxuXHJcbi8vIEtlZXAgU2Vzc2lvbiBBbGl2ZVxyXG5rZWVwU2Vzc2lvbkFsaXZlKCk7XHJcblxyXG5jb25zdCBHZXRNeVNjaG9vbCA9IGxpdmVRdWVyeVZpZXc8e3JlbmRlcjogKHNjaG9vbDogU2Nob29sKSA9PiBhbnl9Pigoe3JlbmRlcn0pID0+XHJcbiAgU2Nob29scy5teVNjaG9vbC5tYXAoc2Nob29sID0+IHJlbmRlcihzY2hvb2wpKSk7XHJcblxyXG5leHBvcnQgY29uc3QgU3ViamVjdFBsYW5uZXJWaWV3ZXJBcHAgPSBzZXR1cERpYWxvZ3MoKCk9PiA8ZGl2XHJcbiAgb25LZXlEb3duPXtldiA9PiB7XHJcbiAgICBpZiAoZXYud2hpY2ggPT09IDgzICYmIChldi5jdHJsS2V5IHx8IGV2Lm1ldGFLZXkpKSB7IC8vIENUUkwtU1xyXG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBkYi5zYXZlTm93KCkudGhlbigoKT0+e1xyXG4gICAgICAgIC8qLy8gV2hlbiBzYXZlZCwgZXhpdCBlZGl0IG1vZGUgc28gdGhhdCBvbmUgY2FuIHZpZXcgdGhlIHJlc3VsdCBhcyB1c2VycyBzZWUgaXQuXHJcbiAgICAgICAgaWYgKGxvY2F0aW9uLmhhc2guZW5kc1dpdGgoJy9lZGl0JykpIHtcclxuICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBsb2NhdGlvbi5oYXNoLnN1YnN0cigwLCBsb2NhdGlvbi5oYXNoLmxlbmd0aCAtICcvZWRpdCcubGVuZ3RoKTtcclxuICAgICAgICB9Ki9cclxuICAgICAgfSk7XHJcbiAgICB9fX0+XHJcbiAgPFJvdXRlcj5cclxuICAgIDw+XHJcbiAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGV4YWN0IHJlbmRlcj17KCk9PjxSZWRpcmVjdCB0bz17YC9jb3Vyc2VzYH0gLz59IC8+XHJcbiAgICAgIDxSb3V0ZSBwYXRoPVwiL2NvdXJzZXNcIiBleGFjdCByZW5kZXI9eygpPT48PlxyXG4gICAgICAgIDxCYW5uZXJcclxuICAgICAgICAgIHRpdGxlPXtMYEt1cnNlcmB9XHJcbiAgICAgICAgICB0YWJzPXtbXX1cclxuICAgICAgICAgIGFjdGl2ZVRhYj1cIiRcIlxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPFR3b0NvbHVtbnNQYWdlXHJcbiAgICAgICAgICBsZWZ0PXs8TGlzdENvdXJzZXMgc2hvd0luYWN0aXZlPXt0cnVlfSAvPn1cclxuICAgICAgICAgIHJpZ2h0PXs8V2Vla1BsYW5uZXIgZW52PXtlbnZ9IHZpZXdDb3Vyc2VVcmw9e2NmZy5LRURfQ09VUlNFX1ZJRVdFUl9VUkx9IC8+fVxyXG4gICAgICAgICAgcmlnaHRXaWR0aD17NX1cclxuICAgICAgICAvPlxyXG4gICAgICA8Lz59Lz5cclxuXHJcbiAgICAgIHsvKiBSZWRpcmVjdCBmcm9tIFwiL2NvdXJzZXMvLi4uXCIgdG8gXCIve215U2Nob29sfS9jb3Vyc2VzLy4uLlwiICovfVxyXG4gICAgICA8Um91dGUgcGF0aD1cIi9jb3Vyc2VzLzpjb3Vyc2VJZFwiIGV4YWN0PXtmYWxzZX0gcmVuZGVyPXsoe21hdGNofSk9PlxyXG4gICAgICAgIDxHZXRNeVNjaG9vbCByZW5kZXI9eyhzY2hvb2w6IFNjaG9vbCkgPT5cclxuICAgICAgICAgIDxSZWRpcmVjdCB0bz17XHJcbiAgICAgICAgICAgIGAvJHtzY2hvb2wubmFtZX0vY291cnNlcy8ke21hdGNoLnBhcmFtcy5jb3Vyc2VJZH1gfVxyXG4gICAgICAgICAgLz59XHJcbiAgICAgICAgLz59XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICB7LyogVmlldyBDb3Vyc2Ugd2l0aG91dCBrbm93aW5nIHdoaWNoIHRhYiAqL31cclxuICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvOnNjaG9vbC9jb3Vyc2VzLzpjb3Vyc2VJZFwiIHJlbmRlcj17KHttYXRjaH0pID0+IHtcclxuICAgICAgICBjb25zdCB7c2Nob29sLCBjb3Vyc2VJZH0gPSBtYXRjaC5wYXJhbXM7XHJcbiAgICAgICAgcmV0dXJuIDxDb3Vyc2VWaWV3ZXJQYWdlXHJcbiAgICAgICAgICBzY2hvb2w9e3NjaG9vbH1cclxuICAgICAgICAgIGNvdXJzZUlkPXtjb3Vyc2VJZH0gLz47XHJcbiAgICAgICAgfX0gIC8+XHJcblxyXG4gICAgICB7Lyo8Um91dGUgcGF0aD1cIi86c2Nob29sL2NvdXJzZXMvOmNvdXJzZUlkL2VkaXRcIiByZW5kZXI9eyh7bWF0Y2h9KSA9PiB7XHJcbiAgICAgICAgY29uc3Qge3NjaG9vbCwgY291cnNlSWR9ID0gbWF0Y2gucGFyYW1zO1xyXG4gICAgICAgIHJldHVybiA8Q291cnNlSW5zdGFuY2VWaWV3XHJcbiAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgY291cnNlSWQ9e2NvdXJzZUlkfSAvPjtcclxuICAgICAgICB9fSAgLz4qL31cclxuXHJcbiAgICAgIHsvKiBWaWV3IENvdXJzZSB3aXRoIGNlcnRhaW4gYWN0aXZlIHRhYiAqL31cclxuICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvOnNjaG9vbC9jb3Vyc2VzLzpjb3Vyc2VJZC90YWJzLzp0YWJJZD9cIiByZW5kZXI9eyh7bWF0Y2h9KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7c2Nob29sLCBjb3Vyc2VJZCwgdGFiSWR9ID0gbWF0Y2gucGFyYW1zO1xyXG4gICAgICAgICAgcmV0dXJuIDxDb3Vyc2VWaWV3ZXJQYWdlXHJcbiAgICAgICAgICAgIHNjaG9vbD17c2Nob29sfVxyXG4gICAgICAgICAgICBjb3Vyc2VJZD17Y291cnNlSWR9XHJcbiAgICAgICAgICAgIGFjdGl2ZVRhYj17dGFiSWR9IC8+fX0gLz5cclxuXHJcbiAgICAgIHsvKiBWaWV3IGRyYWZ0IHdpdGhvdXQga25vd2luZyB0YWIgKi99XHJcbiAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiLzpzY2hvb2wvY291cnNlcy86Y291cnNlSWQvc2V0dGluZ3MvOmRyYWZ0SWRcIlxyXG4gICAgICAgIHJlbmRlcj17KHttYXRjaH0pID0+IHtcclxuICAgICAgICAgIGNvbnN0IHtzY2hvb2wsIGNvdXJzZUlkLCBkcmFmdElkfSA9IG1hdGNoLnBhcmFtcztcclxuICAgICAgICAgIHJldHVybiA8Q291cnNlVmlld2VyUGFnZVxyXG4gICAgICAgICAgICBzY2hvb2w9e3NjaG9vbH1cclxuICAgICAgICAgICAgY291cnNlSWQ9e2NvdXJzZUlkfVxyXG4gICAgICAgICAgICBhY3RpdmVUYWI9XCIkc2V0dGluZ3NcIlxyXG4gICAgICAgICAgICBkcmFmdElkPXtkcmFmdElkfSAvPn19IC8+XHJcblxyXG4gICAgICB7LyogVmlldyBkcmFmdCBhbmQgY2VydGFpbiB0YWIgKi99XHJcbiAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiLzpzY2hvb2wvY291cnNlcy86Y291cnNlSWQvdGFicy86dGFiSWQvZHJhZnRzLzpkcmFmdElkXCJcclxuICAgICAgICByZW5kZXI9eyh7bWF0Y2h9KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7c2Nob29sLCBjb3Vyc2VJZCwgdGFiSWQsIGRyYWZ0SWR9ID0gbWF0Y2gucGFyYW1zO1xyXG4gICAgICAgICAgcmV0dXJuIDxDb3Vyc2VWaWV3ZXJQYWdlXHJcbiAgICAgICAgICAgIHNjaG9vbD17c2Nob29sfVxyXG4gICAgICAgICAgICBjb3Vyc2VJZD17Y291cnNlSWR9XHJcbiAgICAgICAgICAgIGFjdGl2ZVRhYj17dGFiSWR9XHJcbiAgICAgICAgICAgIGRyYWZ0SWQ9e2RyYWZ0SWR9IC8+fX0gLz5cclxuXHJcbiAgICAgIHsvKiBFZGl0IGRyYWZ0IGFuZCBjZXJ0YWluIHRhYiAqL31cclxuICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvOnNjaG9vbC9jb3Vyc2VzLzpjb3Vyc2VJZC90YWJzLzp0YWJJZC9kcmFmdHMvOmRyYWZ0SWQvZWRpdFwiXHJcbiAgICAgICAgcmVuZGVyPXsoe21hdGNofSkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qge3NjaG9vbCwgY291cnNlSWQsIHRhYklkLCBkcmFmdElkfSA9IG1hdGNoLnBhcmFtcztcclxuICAgICAgICAgIHJldHVybiA8Q291cnNlVmlld2VyUGFnZVxyXG4gICAgICAgICAgICBzY2hvb2w9e3NjaG9vbH1cclxuICAgICAgICAgICAgY291cnNlSWQ9e2NvdXJzZUlkfVxyXG4gICAgICAgICAgICBhY3RpdmVUYWI9e3RhYklkfVxyXG4gICAgICAgICAgICBkcmFmdElkPXtkcmFmdElkfVxyXG4gICAgICAgICAgICBlZGl0TW9kZT17dHJ1ZX0gLz59fSAvPlxyXG5cclxuICAgICAgey8qIFZpZXcgdGFzayAqL31cclxuICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvOnNjaG9vbC9jb3Vyc2VzLzpjb3Vyc2VJZC90YWJzLzp0YWJJZC90YXNrcy86dGFza0lkXCJcclxuICAgICAgICByZW5kZXI9eyh7bWF0Y2h9KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7c2Nob29sLCBjb3Vyc2VJZCwgdGFiSWQsIHRhc2tJZH0gPSBtYXRjaC5wYXJhbXM7XHJcbiAgICAgICAgICByZXR1cm4gPENvdXJzZVZpZXdlclBhZ2VcclxuICAgICAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgICAgIGNvdXJzZUlkPXtjb3Vyc2VJZH1cclxuICAgICAgICAgICAgYWN0aXZlVGFiPXt0YWJJZH1cclxuICAgICAgICAgICAgdGFza0lkPXt0YXNrSWR9XHJcbiAgICAgICAgICAgIGVkaXRNb2RlPXtmYWxzZX0gLz59fSAvPlxyXG5cclxuICAgICAgey8qIFZpZXcgdGFzayBvbiBjZXJ0YWluIGRyYWZ0IChwcmV2aWV3IG1vZGUpICovfVxyXG4gICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi86c2Nob29sL2NvdXJzZXMvOmNvdXJzZUlkL3RhYnMvOnRhYklkL2NvbnRlbnRzLzpjb250ZW50SWQvdGFza3MvOnRhc2tJZC9kcmFmdHMvOmRyYWZ0SWRcIlxyXG4gICAgICAgIHJlbmRlcj17KHttYXRjaH0pID0+IHtcclxuICAgICAgICAgIGNvbnN0IHtzY2hvb2wsIGNvdXJzZUlkLCB0YWJJZCwgdGFza0lkLCBkcmFmdElkLCBjb250ZW50SWQgfSA9IG1hdGNoLnBhcmFtcztcclxuICAgICAgICAgIHJldHVybiA8Q291cnNlVmlld2VyUGFnZVxyXG4gICAgICAgICAgICBzY2hvb2w9e3NjaG9vbH1cclxuICAgICAgICAgICAgY291cnNlSWQ9e2NvdXJzZUlkfVxyXG4gICAgICAgICAgICBhY3RpdmVUYWI9e3RhYklkfVxyXG4gICAgICAgICAgICB0YXNrSWQ9e3Rhc2tJZH1cclxuICAgICAgICAgICAgY29udGVudElkPXtjb250ZW50SWR9XHJcbiAgICAgICAgICAgIGRyYWZ0SWQ9e2RyYWZ0SWR9XHJcbiAgICAgICAgICAgIGVkaXRNb2RlPXtmYWxzZX0gLz59fSAvPlxyXG5cclxuICAgICAgey8qIEVkaXQgdGFzayBvbiBjZXJ0YWluIGRyYWZ0ICovfVxyXG4gICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi86c2Nob29sL2NvdXJzZXMvOmNvdXJzZUlkL3RhYnMvOnRhYklkL2NvbnRlbnRzLzpjb250ZW50SWQvdGFza3MvOnRhc2tJZC9kcmFmdHMvOmRyYWZ0SWQvZWRpdFwiXHJcbiAgICAgICAgcmVuZGVyPXsoe21hdGNofSkgPT4ge1xyXG4gICAgICAgICAgY29uc3Qge3NjaG9vbCwgY291cnNlSWQsIHRhYklkLCBjb250ZW50SWQsIHRhc2tJZCwgZHJhZnRJZH0gPSBtYXRjaC5wYXJhbXM7XHJcbiAgICAgICAgICByZXR1cm4gPENvdXJzZVZpZXdlclBhZ2VcclxuICAgICAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgICAgIGNvdXJzZUlkPXtjb3Vyc2VJZH1cclxuICAgICAgICAgICAgYWN0aXZlVGFiPXt0YWJJZH1cclxuICAgICAgICAgICAgY29udGVudElkPXtjb250ZW50SWR9XHJcbiAgICAgICAgICAgIHRhc2tJZD17dGFza0lkfVxyXG4gICAgICAgICAgICBkcmFmdElkPXtkcmFmdElkfVxyXG4gICAgICAgICAgICBlZGl0TW9kZT17dHJ1ZX0gLz59fSAvPlxyXG4gICAgICBcclxuICAgICAgey8qIFN0ZXAgY291cnNlczogTGluayB0byBjZXJ0YWluIGJsb2NrIGFuZCBzdGVwICovfVxyXG4gICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi86c2Nob29sL2NvdXJzZXMvOmNvdXJzZUlkL2Jsb2Nrcy86YmxvY2tJZC9zdGVwcy86c3RlcE5vXCJcclxuICAgICAgICByZW5kZXI9eyh7bWF0Y2h9KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB7c2Nob29sLCBjb3Vyc2VJZCwgYmxvY2tJZCwgc3RlcE5vfSA9IG1hdGNoLnBhcmFtcztcclxuICAgICAgICAgIHJldHVybiA8UmVkaXJlY3RUb1N0ZXBcclxuICAgICAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgICAgIGNvdXJzZUlkPXtjb3Vyc2VJZH1cclxuICAgICAgICAgICAgYmxvY2tJZD17YmxvY2tJZH1cclxuICAgICAgICAgICAgc3RlcE5vPXtzdGVwTm99XHJcbiAgICAgICAgICAgLz47XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAvPlxyXG5cclxuICAgICAgey8qIEVkaXQgdmVyc2lvbiBoaXN0b3J5ICovfVxyXG4gICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi86c2Nob29sL2NvdXJzZXMvOmNvdXJzZUlkL2hpc3RvcnlcIlxyXG4gICAgICAgIHJlbmRlcj17KHttYXRjaH0pID0+IHtcclxuICAgICAgICAgIGNvbnN0IHtzY2hvb2wsIGNvdXJzZUlkLCBibG9ja0lkLCBzdGVwTm99ID0gbWF0Y2gucGFyYW1zO1xyXG4gICAgICAgICAgcmV0dXJuIDxWZXJzaW9uSGlzdG9yeVBhZ2VcclxuICAgICAgICAgICAgc2Nob29sPXtzY2hvb2x9XHJcbiAgICAgICAgICAgIGNvdXJzZUlkPXtjb3Vyc2VJZH1cclxuICAgICAgICAgICAvPjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIC8+XHJcblxyXG4gICAgICA8RXJyb3JTdWNjZXNzRmVlZGJhY2sgLz5cclxuICAgICAgPExvYWRpbmdJbmRpY2F0b3IgLz5cclxuICAgIDwvPlxyXG4gIDwvUm91dGVyPlxyXG48L2Rpdj4pXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IERpYWxvZ3MgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvZGlhbG9ncyc7XHJcbmltcG9ydCB7IFdpdGhHcmFwaHMsIEtlZEJhY2tlbmRSZXBvIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgQ291cnNlSW5zdGFuY2UsIENvdXJzZVRhYiwgQ291cnNlQmxvY2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IERpYWxvZ3NDb250ZXh0IH0gZnJvbSAnLi9kaWFsb2ctY29udGV4dCc7XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gICAgZGlhbG9nczogYW55W107XHJcbn1cclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBzZXR1cERpYWxvZ3MgPSA8UCBleHRlbmRzIG9iamVjdD4oQ29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPFA+KSA9PlxyXG4gIGNsYXNzIERpYWxvZ0NvbnRlbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgICAgc3VwZXIocHJvcHMpO1xyXG4gICAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICAgIGRpYWxvZ3M6IFtdXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMub3BlbkRpYWxvZyA9IHRoaXMub3BlbkRpYWxvZy5iaW5kKHRoaXMpO1xyXG4gICAgICB0aGlzLmNsb3NlRGlhbG9nID0gdGhpcy5jbG9zZURpYWxvZy5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIG9wZW5EaWFsb2coZGlhbG9nKSB7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBkaWFsb2dzOiBbLi4udGhpcy5zdGF0ZS5kaWFsb2dzLCBkaWFsb2ddIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb3NlRGlhbG9nKCkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogdGhpcy5zdGF0ZS5kaWFsb2dzLnNsaWNlKDAsIHRoaXMuc3RhdGUuZGlhbG9ncy5sZW5ndGggLSAxKSB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgIGNvbnN0IHsgZGlhbG9ncyB9ID0gdGhpcy5zdGF0ZTtcclxuICAgICAgcmV0dXJuIDxEaWFsb2dzQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e29wZW5EaWFsb2cgOiB0aGlzLm9wZW5EaWFsb2csIGNsb3NlRGlhbG9nOnRoaXMuY2xvc2VEaWFsb2d9fT5cclxuICAgICAgICA8Q29tcG9uZW50IHsuLi50aGlzLnByb3BzIGFzIFB9PjwvQ29tcG9uZW50PlxyXG4gICAgICAgIDxEaWFsb2dzIGRpYWxvZ3M9e2RpYWxvZ3N9IHBvcERpYWxvZz17dGhpcy5jbG9zZURpYWxvZ30gLz5cclxuICAgICA8L0RpYWxvZ3NDb250ZXh0LlByb3ZpZGVyPlxyXG4gICAgfVxyXG4gIH0iLCIvLyA8SW5pdGlhbGl6YXRpb24+XHJcbmltcG9ydCAnLi9zZXQtY3VycmVudC11c2VyJzsgLy8gRW11bGF0ZSBzZXJ2ZXItc2lkZSBzY3JpcHQgdG8gc2V0IGN1cnJlbnQgdXNlclxyXG5pbXBvcnQgJy4uL2dsb2JhbC1zZXR0ZXJzL3NldC1hbGwnOyAvLyBDbGllbnQtc2lkZSBpbml0aWFsaXphdGlvblxyXG5pbXBvcnQgJy4vdGVzdC1jb25maWcnO1xyXG4vLyA8L0luaXRpYWxpemF0aW9uPlxyXG5cclxuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENob29zZVVzZXIgfSBmcm9tICcuL3V0aWxzL2Nob29zZS11c2VyJztcclxuaW1wb3J0IHsgaW5jbHVkZUNTUyB9IGZyb20gJy4vdXRpbHMvaW5jbHVkZS1jc3MnO1xyXG5pbXBvcnQgeyBpbmNsdWRlT3B0aW9uYWxDU1MgfSBmcm9tICcuLi91dGlscy9pbmNsdWRlLW9wdGlvbmFsLWNzcyc7XHJcbmltcG9ydCB7IFN1YmplY3RQbGFubmVyVmlld2VyQXBwIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci1rcy92aWV3ZXItZWRpdG9yJztcclxuaW1wb3J0IHsgc2V0dXBJbnRsIH0gZnJvbSAnLi4vY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvU2V0dXBMYW5ndWFnZUludGwnO1xyXG5pbXBvcnQgeyBpbmplY3RJbnRsLCBJbmplY3RlZEludGxQcm9wcyB9IGZyb20gJ3JlYWN0LWludGwnO1xyXG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xyXG5cclxuaW5jbHVkZU9wdGlvbmFsQ1NTKHtcclxuICB2MTogW1xyXG4gICAgJ2Nzcy9jb3Vyc2V2aWV3ZXIuY3NzJyxcclxuICAgICdjc3MvZGlhbG9nLmNzcycsXHJcbiAgICAnY3NzL2dyaWQtY3NzLXBhdGNoLmNzcydcclxuICBdLFxyXG4gIGluY2x1ZGVDU1MsXHJcbiAgdmVyc2lvbjogNixcclxuICB2ZXJzaW9uRm9sZGVyOiAnY3NzL2RlbHRhLWNzcy9jb3Vyc2V2aWV3ZXInXHJcbn0pO1xyXG5cclxuY2xhc3MgX0FwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxJbmplY3RlZEludGxQcm9wcz4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIGlmICghbG9jYXRpb24uaGFzaCkgbG9jYXRpb24uaGFzaCA9IFwiIy9cIjtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gZW52LmN1cnJlbnRVc2VyID9cclxuICAgIDxMYW5ndWFnZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3tpbnRsfX0+XHJcbiAgICAgIDxTdWJqZWN0UGxhbm5lclZpZXdlckFwcCAvPiBcclxuICAgIDwvTGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyPiA6XHJcbiAgICAgIDxDaG9vc2VVc2VyIC8+XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBBcHAgPSBzZXR1cEludGwoaW5qZWN0SW50bChfQXBwKSk7XHJcbmV4cG9ydCBkZWZhdWx0IEFwcDtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==