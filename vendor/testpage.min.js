var testpage=function(e){function t(t){for(var r,o,i=t[0],u=t[1],l=t[2],d=0,m=[];d<i.length;d++)o=i[d],a[o]&&m.push(a[o][0]),a[o]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(c&&c(t);m.length;)m.shift()();return s.push.apply(s,l||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,i=1;i<n.length;i++){var u=n[i];0!==a[u]&&(r=!1)}r&&(s.splice(t--,1),e=o(o.s=n[0]))}return e}var r={},a={6:0},s=[];function o(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var i=window.webpackJsonp_name_=window.webpackJsonp_name_||[],u=i.push.bind(i);i.push=t,i=i.slice();for(var l=0;l<i.length;l++)t(i[l]);var c=u;return s.push([288,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return o}),n.d(t,"k",function(){return u}),n.d(t,"g",function(){return l}),n.d(t,"h",function(){return c}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return p}),n.d(t,"n",function(){return f}),n.d(t,"l",function(){return h}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return y});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function o(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var i=[].concat;function u(e){return i.apply([],e)}function l(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function c(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var o=t[r],i=n[r];return o===i?0:null==o?-1:null==i?1:0===s.length?a(o,i):e(o,i,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function f(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function h(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],o=t(s),i=n[o];i?i.push(s):n[o]=[s]}return n}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function b(e,t){var n,a,s={};try{for(var o=r.h(t),i=o.next();!i.done;i=o.next()){var u=i.value;u in e&&(s[u]=e[u])}}catch(e){n={error:e}}finally{try{i&&!i.done&&(a=o.return)&&a.call(o)}finally{if(n)throw n.error}}return s}function k(e,t){var n=v(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function y(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var o=n[a];if(r[a]!==o)return!1;if(e[o]!==t[o])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(31);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(27);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,,function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"}),"Â ")}},function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(15);n.d(t,"a",function(){return o}),n.d(t,"c",function(){return u}),n.d(t,"e",function(){return l}),n.d(t,"d",function(){return c}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return p});var o=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function i(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function u(e,t){return i(e,t,"W")}function l(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function c(e,t){return e.roles.includes("ADMIN")||l(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,o=Object(s.b)(location.search),i=r.a({},o,{role:t,school:n}),u=Object(s.a)(i);a?location.href=""+a+u:(location.hash="#",location.search=u)}};function m(e){d.actAs(e)}function p(e,t){var n,a,i=Object(s.b)(location.search),u={};try{for(var l=r.h(o),c=l.next();!c.done;c=l.next()){var d=c.value;i[d]&&(u[d]=i[d])}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}var m=Object(s.a)(r.a({},u,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+m+e.substr(p):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return i}),n.d(t,"e",function(){return u});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function o(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function i(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),o=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[o++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function u(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],o=t(s);o!==s&&(n===e&&(n=e.slice()),n[r]=o)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return o}),n.d(t,"c",function(){return i});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],o=t[1];return a[n?s.toLowerCase():s]=o}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function o(e){return"?"+s(e)}function i(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(14),s=n(32),o=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,o){return r.b(this,void 0,void 0,function(){var i,u,l,c,d,m,p,f,h,g,v;return r.d(this,function(b){switch(b.label){case 0:return o&&"no-cache"===o.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),i=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),l=(u=this).authHeader,c=u.tokenInfo,d=u.bearerProvider,l||c||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=c=b.sent(),b.label=2;case 2:return c?c.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=c=b.sent(),b.label=4;case 4:l="Bearer "+c.token,b.label=5;case 5:return l&&(n.Authorization=l),f=this.baseUrl+e+(i?"?"+i:""),[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 6:return 401==(h=b.sent()).status&&this.bearerProvider?(g=h.headers.get("www-authenticate"),console.log("Got "+h.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(v=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return v.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 8:h=b.sent(),b.label=9;case 9:return[2,h]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),i=function(){function e(e,t,n,r,s,i,u){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=i,this.tokenQuery=u,this.tokenInfo={token:null,expires:0},this.client=new o(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),u=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function l(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var c=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return i}),n.d(t,"b",function(){return u}),n.d(t,"j",function(){return l}),n.d(t,"f",function(){return o}),n.d(t,"c",function(){return c});var d=function(){function e(e,t,n){this.http=new o(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(c,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,o,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(o=c.bind,i=[void 0,s.status],[4,s.text()]);case 2:throw new(o.apply(c,i.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,o,i;return r.d(this,function(u){switch(u.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=u.sent()).status?[3,3]:(o=c.bind,i=[void 0,s.status],[4,s.text()]);case 2:throw new(o.apply(c,i.concat([u.sent()])));case 3:return[4,s.json()];case 4:return[2,u.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(c,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=c.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(c,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,o=e.backgroundColor,i=e.progressColor,u=[];if(n>s)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var l=1;l<=n;l++)u.push(a.createElement("svg",{key:l},a.createElement("circle",{className:"circle-chart-background",fill:l>r?o:i,cx:"8",cy:"8",r:"8"})));return u},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return o});var o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,o=t.className,i=t.children,u=t.headerClassName,l=t.contentClassName,c=t.displayProgress,d=t.progressData,m=t.inactivated,p=t.inactivatedRender,f=this.state.headerOpen;return m?"titleAndChildren"===p?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,n),a.createElement(a.Fragment,null,i)):a.createElement(a.Fragment,null,i):a.createElement("div",{className:(o||"")+" openClose"+(f?" open":"")},a.createElement("div",{className:"openHeader"+(u?" "+u:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),c&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(l?" "+l:"")},i))},t}(a.Component)},function(e,t,n){"use strict";var r=n(4),a=n(18),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),o=n(14);function i(e){e.resources||(e.resources=[])}function u(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return i(e)})}})}(e,n);break;case"tasks":i(e)}}var l=sessionStorage.getItem("redir-hash");if(l)try{var c=JSON.parse(l),d=c.time,m=c.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return u(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return u(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var p=new s,f=Date.now(),h=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(o.a)(this.getBearer.bind(this)),this.refreshBearer=Object(o.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,o;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-f>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,o=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=o.apply(this,[r.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},v=function(e){function t(t,n,r){var a="string"!=typeof n?n:new h(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return p}),n.d(t,"b",function(){return h}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return v})},,function(e,t,n){"use strict";n.d(t,"b",function(){return o}),n.d(t,"d",function(){return i}),n.d(t,"c",function(){return u}),n.d(t,"a",function(){return l});var r=n(1),a=n(6),s=n.n(a);function o(e){return"AT"===e?[32,51]:[1,25]}function i(e,t){var n=null;n=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var r=s()(n.toString(),"YYYY");return 1!=r.week()&&(r=r.clone().add(1,"week")),t?[s()(r.clone()).week(32).startOf("week"),s()(r.clone()).week(51).endOf("week")]:[s()(r.clone()),s()(r.clone()).week(25).endOf("week")]}function u(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function l(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},,,function(e,t,n){"use strict";var r=n(58);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b})},,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(35),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(55),s=n(3),o=n(6),i=n.n(o),u=n(75),l=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(u.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(i()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return i()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),c=n(5),d=n(40);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var m=s.a.userTasksRepo,p=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,o,u;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,l.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,o=i()(s).week(),[2,{from:(u=Object(d.a)(i()(s).year(),o)).notBefore,to:u.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,u,l,c;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,o=a(),u=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},u,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:i()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:i()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return l=r.sent(),0===(c=l.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&c.push(e),[4,this.update(c,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(r){switch(r.label){case 0:return(n=this.persistedState)?[3,2]:[4,l.load(this.options.user)];case 1:n=r.sent(),r.label=2;case 2:return(a=new l(n)).weekDate=t?i()(e).valueOf():i()(e).startOf("week").valueOf(),a.save(),this.persistedState=a,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(c.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new c.b("email",t.getCurrentUser().mail,"S"),new c.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);m||(m=s.a.userTasksRepo=new p(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(33).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(34),s=n(45),o=n(37),i=n(50),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,o){r=!0,e=a,t=s,s&&n?n(null,s,o):n&&n(a,null,o)});if(r){var s=i.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var o=s.subscriptions,u=s.observer;return o.push(a),n=u,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new o.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],o={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),s[0]=e,null!==s[1]&&t(s,null,o)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),s[1]=e,null!==s[0]&&t(s,null,o)}),o})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,o,i){if(a=i,r&&(r.unsubscribe(),r=null),o)t(null,o,s);else try{var u=e(n);u&&"function"==typeof u.subscribe?r=u.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(u,null,a)}catch(o){t(null,o,a)}}),s})},t}(a.a);u.prototype.map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(34),s=n(45),o=n(33),i=n(32),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new i.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new o.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);u.prototype._map=Object(s.a)(u)},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r,a=n(1),s=n(0),o=n(2),i=function(e){var t=e.onClick,n=e.className,i=e.style,u=e.title;return s.createElement("div",{title:u||Object(o.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:i})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"c",function(){return o}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return u});var r=n(6),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function o(e){var t=a()(e).add(1,"week");return e.week()===e.weeksInYear()&&t.year()===e.year()?{adjusted:!0,nextDate:a()(e.year()+1+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function i(e){var t=a()(e).add(-1,"week");return 2===e.week()&&t.year()!==e.year()?{adjusted:!0,nextDate:a()(e.year()+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function u(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},,,function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(22),o=n(6),i=n.n(o);var u=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(i()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),l=n(2),c=n(53),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return p}),n.d(t,"a",function(){return f});var m,p=function(){function e(t,n,s,o){var i=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=o;var u=function(e){return"function"==typeof i[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){u(e)&&(i[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(i[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),o={},i=e;i&&i!==Object.prototype;i=Object.getPrototypeOf(i))u(i);function u(t){Object.keys(t).forEach(function(i){!s.hasOwnProperty(i)&&n(i)&&(s[i]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var u=JSON.stringify(r.g([i],n)),l=o[u];if(void 0!==l){if(l.promise)throw l.promise;if(l.error)throw l.error;if(l.timeout>Date.now())return l.value}try{var c=t[i].apply(e,n).then(function(e){o[u]={timeout:Date.now()+a,value:e}}).catch(function(e){o[u]={timeout:Date.now()+a,error:e}});throw o[u]={timeout:Date.now()+a,promise:c},c}catch(e){if(e.then)throw e;o[u]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:u})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,o,i;return r.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,o.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw i=u.sent(),console.error("Error from EDS: "+i),new Error(Object(l.a)(m||(m=r.e(["Kunde tyvÃ¤rr inte ladda terminsmÃ¥l eller avklarade steg frÃ¥n EDS. FÃ¶rsÃ¶k igen senare..."],["Kunde tyvÃ¤rr inte ladda terminsmÃ¥l eller avklarade steg frÃ¥n EDS. FÃ¶rsÃ¶k igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,o;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,o.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,o,u,l,d,m,p,f;return r.d(this,function(r){switch(e){case"en_sin":return[2,c.SouthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,c.NorthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=Object(s.d)(t,!0),o=Object(s.d)(t,!1),u=a[0],l=o[0],d=a[1],m=o[1],p={startDate:new Date(u.year(),u.month(),u.date()).toDateString(),endDate:new Date(u.year(),d.month(),d.date()).toDateString()},f={startDate:new Date(l.year(),l.month(),l.date()).toDateString(),endDate:new Date(l.year(),m.month(),m.date()).toDateString()},[2,{firstTerm:p,secondTerm:f,holidays:n}]}return[2]})})},e}(),f=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new u(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new u({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(35),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),o()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),o()}};function o(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},,function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Minska indrag",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Ãka indrag",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"VÃ¥grÃ¤t linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga lÃ¤nk",result:function(){var e=window.prompt("Ange lÃ¤nkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,s=window.prompt(this.promptMsg);if(s){var o=document.createElement("img");o.src=s,o.tabIndex=1,n=o,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),o.onfocus=t.onFocus,o.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(77),s=n(5),o=function(){function e(e){var t=this,n=e.table,s=e.getClient,o=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,o()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,i,u,l,c=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,o=n.table,i=a(),u=e.map(function(e){var n=c.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(u.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.do(function(e){return u.forEach(function(t){return e.put(o,t)})}).catch(function(n){return"http409"===n.name?i.list(o,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return i.do(function(e){return n.forEach(function(t){return e.put(o,t)})})}):Promise.resolve(s&&c.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return l=r.sent(),this.regenerateCacheBust(),u.forEach(function(e){e.$etag=l.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(u)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,o,i,u,l,c,d,m,p,f,h,g,v,b,k,y=this;return r.d(this,function(E){switch(E.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,o=t.table,i=t.getQueryOptions,u=n(),[4,i()];case 1:return l=E.sent(),c=[].concat(l.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),d=this.stripGraphs(e,c),a?[4,this.mem.insert(d.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:E.sent(),E.label=3;case 3:m=new s.a,p=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){m.link2(o,e.id,t,n.id)})};try{for(var s=(t=void 0,r.h(c)),i=s.next();!i.done;i=s.next()){a(i.value)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}m.add(o,e)};try{for(f=r.h(d),h=f.next();!h.done;h=f.next())g=h.value,p(g)}catch(e){b={error:e}}finally{try{h&&!h.done&&(k=f.return)&&k.call(f)}finally{if(b)throw b.error}}return[4,u.batch(m.mutationRequests).catch(function(t){return a&&y.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return v=E.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=v.newEtags[e.id]}),a?[4,this.mem.update(e)]:[3,6];case 5:return E.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:E.sent(),E.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o,i=this;return r.d(this,function(u){switch(u.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,o=n(),a?[4,this.mem.update(e.map(function(e){return i.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:u.sent(),u.label=2;case 2:return[4,o.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(i,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return u.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return u.sent(),[2]}})})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(10),o=new DOMParser,i={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function u(e){for(var t=o.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)l(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function l(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&i[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),c(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),s=a.name&&!!t[a.name.toLowerCase()];s||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),c(e)&&(t=!0),t}function c(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)l(n.item(r))&&(t=!0);return t}var d=n(80);n.d(t,"a",function(){return b});var m="wysiwyg-actionbar",p="wysiwyg-button",f="wysiwyg-content",h="wysiwyg-focusrect",g="wysiwyg-focuspoint",v="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||u(e.html)!==u(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(u(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:k(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(g)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),s=a.next();!s.done;s=a.next()){switch(s.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,o=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(o=o.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"LÃ¥t bilden flyta vÃ¤nster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"LÃ¥t bilden flyta hÃ¶ger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden pÃ¥ egen rad",result:function(){return e("unfloat")}}])));var i=this.state.focusRect,l=this.props,c=l.readOnly,b=l.reportNumChars,k=l.maxChars;return a.createElement("div",{className:this.props.className},!c&&a.createElement("div",{className:m},o.map(function(e,n){return a.createElement("button",{key:n,className:p,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:c?v:f,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:u(this.props.html)},contentEditable:!c,onPaste:function(e){if(!isNaN(k)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>k&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:0)}:null,onKeyPress:isNaN(k)?null:function(e){var t=e.target.innerText;t&&t.length>=k&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){c||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(s.a)("outdent"):Object(s.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),i&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:h,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:g+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:g+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:g+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:g+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function k(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return u});var r=n(1),a=n(15),s=n(61),o=n(7),i=function(){function e(){var e,t;this._initialized=!1;var n=function(e){Object.defineProperty(a,e,{get:function(){return this._initialized||this.init(),this._features[e]},set:function(e){throw new Error("Feature flags cannot be set here")}})},a=this;try{for(var o=r.h(Object.keys(s)),i=o.next();!i.done;i=o.next()){n(i.value)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}}return e.prototype.init=function(){var e,t;if(!this._initialized){var n=(o.a.KED_FEATURES||"").split(",").map(function(e){return e.trim().toLowerCase()}),i=Object(a.b)(location.search,{toLower:!0});i.testversion&&(n=["*"]),i.features&&(n=i.features.split(",").map(function(e){return e.trim().toLowerCase()}));var u=n.includes("*");this._features={};try{for(var l=r.h(Object.keys(s)),c=l.next();!c.done;c=l.next()){var d=c.value;this._features[d]=u||n.includes(d.toLowerCase())}}catch(t){e={error:t}}finally{try{c&&!c.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}this._initialized=!0}},e}(),u=new i},function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r=n(1),a=n(8),s=n(95),o=n.n(s),i=n(96),u=n.n(i),l=n(63),c=n(64),d=n(0),m=n(7),p=n(6),f=n.n(p),h=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(o.a,u.a)),n.messages={sv:l,en:c},f()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},,function(e){e.exports={picker:"Integrate coursebuilder and subjectplanner with Google Picker",ksTutorComment:"Integrate KSTermplanner with tutor comments",kgTutorComment:"Integrate KSTermplanner  with tutor comments",termplannerCharts:"Integrate KSTermplanner with progress charts",weekplannerCharts:"Integrate Weekplanner with progress charts",teacherRights:"Activate course builder teacher rights",studyGroups:"Add study groups and google classroom functionality",cbCollapseBoxes:"Course Builder: Collapse modules by default",ksAssignments:"KS show hand-in assignments",markPartialKRs:"Activate mark partial knowledge requirments functionality"}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(19),o=n(13),i=n(81);function u(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var l=n(6),c=n.n(l),d=n(25),m=n(7),p=n(8),f=n(17),h=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,o=t.progressData,l=t.displayProgress,m=!!this.props.openCourses[n],f=(new d.a,this.context.intl);return a.createElement(s.a,{title:a.createElement("h5",null,n||a.createElement(p.a,{id:"userTasks.goals",defaultMessage:"Egna lÃ¤randemÃ¥l"})),headerOpen:m,className:n&&Object(i.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)},displayProgress:l,progressData:o},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"},"Â ",a.createElement("a",{className:"trash",href:"#",title:f.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lÃ¤randemÃ¥let och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=u(t),s=c()(t.deadline).startOf("day")<c()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:g(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:v(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:c()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmÃ¥l"}))),a.createElement("br",null))}))},t.contextType=f.a,t}(a.Component);function g(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(o.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function v(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(o.f)(m.b.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var b=n(5),k=n(2);var y=n(65),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"weekplanner.addLearningGoalTitle",defaultMessage:"LÃ¤gg till eget lÃ¤randemÃ¥l"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(p.a,{id:"weekplanner.addLearningGoal",defaultMessage:"MÃ¥l"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(p.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),w=n(29),T=n(49),N=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,o=this.props,i=(o.isTask,o.onSave),u=this.context.intl;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"customTask.addWorkGoalTitle",defaultMessage:"LÃ¤gg till eget arbetsmÃ¥l"})),a.createElement("hr",null),a.createElement(w.a,{label:u.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:u.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{rows:7,label:u.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:u.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"LÃ¤gg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:u.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return i(n,r,s)}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),C=n(97),D=(n(75),n(35)),S=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,o=s.name,i=s.description,u=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:o,description:i,url:u}):r.a({},t)}))});else{var l={id:Object(b.h)(),name:o,description:i,url:u};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(l)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(p.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(p.a,{id:"addeditsubtask.addSubtask",defaultMessage:"LÃ¤gg till underuppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(p.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(S,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(S,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,o=t.deadline,i=t.subTasks,l=t.showCalendar,d=t.userTask,m=d.id,f=(d.courseName,this.props),h=f.onUpdate,g=f.onDelete,v=this.isModified(),b="customTask"===u(d),k=c()(d.deadline)<c()(),y=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,b?a.createElement(p.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmÃ¥l"}):a.createElement(p.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:b?y.formatMessage({id:"task.targetNameLabel",defaultMessage:"ArbetsmÃ¥lets namn"}):y.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:b?y.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du gÃ¶ra?"}):y.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),b&&a.createElement(a.Fragment,null,a.createElement(T.a,{rows:5,label:y.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:y.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"LÃ¤gg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:y.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(D.a,{label:y.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},o||l?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(C.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",nextMonthButtonLabel:"",previousMonthButtonLabel:"",showWeekNumbers:!0,selected:o&&c()(o).toDate(),autoFocus:l,dateFormat:"yyyy-MM-dd",className:k?"expired":void 0,locale:y.locale,popperPlacement:b?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&c()(t).format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:y.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(p.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(D.a,{label:y.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},i&&i.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"task.addSubtask",defaultMessage:"LÃ¤gg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){v?h(function(e){e.name=n,e.description=r,e.url=s,e.deadline=o}):e.props.closeDialog()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(p.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){g(m)}},b?a.createElement(p.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmÃ¥l"}):a.createElement(p.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den hÃ¤r uppgiften"})))))},t.contextType=f.a,t}(a.Component),M=n(12),x=n(82),L=n(40),j=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.backgroundColor,r=e.progressColor,s=Math.round(t);return a.createElement("svg",{className:"progress-chart",width:"100%",height:"25"},a.createElement("rect",{fill:n,width:"100%",height:"100%",rx:"4"}),a.createElement("rect",{className:"fill",fill:r,width:s+"%",height:"100%",rx:"4"}),a.createElement("text",{className:"filled-text",textAnchor:"middle",x:"50%",y:"50%",dy:".3em"},s+"%"))},t.defaultProps={percentage:0,backgroundColor:"#F1F5F4",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return P});var P=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new x.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){var e=Object(L.d)(c()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.nextWeek=function(){var e=Object(L.c)(c()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(E,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"LÃ¤randemÃ¥let kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(N,{isTask:!e,onSave:function(a,s,o){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,o)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(O,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet fÃ¥r inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(S,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lÃ¤randemÃ¥l samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var o;return r.d(this,function(r){switch(r.label){case 0:return o=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),dateTime:o+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,o,i,u,l;return r.d(this,function(d){switch(d.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:d.sent(),d.label=2;case 2:return d.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=c()(n).add(-1,"week"),s=Object(L.b)(a),o=Object(L.a)(a.year(),s),[4,this.props.env.kedBackendClient.list("usertasks",{from:o.notBefore,to:o.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return i=(i=d.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),[n].concat(t.map(function(e){return e.dateTime})),u=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),l=i.sort(Object(k.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:u+=1e3});return t.id=Object(b.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(l)];case 4:return d.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.getHeaderTitle=function(){return a.createElement("h4",null,a.createElement(p.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"}))},t.prototype.render=function(){var e=this,t=c()(this.state.weekDate).week(),n=d.b.weekplannerCharts,o=c()().week(),i=function(e){var t,n,a,s,o=[],i=Object(k.b)(e,function(e){return e.courseName||""});try{for(var u=r.h(Object.keys(i).sort().filter(function(e){return e}).concat(i[""]?[""]:[])),l=u.next();!l.done;l=u.next()){var c=l.value,d=i[c]||i[""],m=Object(k.b)(d,function(e){return e.learningGoal}),p=[];try{for(var f=(a=void 0,r.h(Object.keys(m))),h=f.next();!h.done;h=f.next()){var g=h.value,v=m[g].sort(Object(k.g)("dateTime")),b=v.filter(function(e){return null==e.name})[0],y=b&&b.url;p.push({name:g,allTasks:v,url:y,step:v.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:v.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{h&&!h.done&&(s=f.return)&&s.call(f)}finally{if(a)throw a.error}}o.push({courseName:c,learningGoals:p})}}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return o}(this.state.userTasks),u=this.state,l=u.dialogs,m=u.weekTextsUT,f=u.strategy,g=u.assessment,v=u.isLoading,b=u.isCopyingTasks,E=m&&("adding"===m.$meta||"updating"===m.$meta),w=!!m&&f!==m.weekTexts.strategy,T=!!m&&g!==m.weekTexts.assessment,N=!E&&(w||T),C=function(e){var t={completedTasks:0,totalNumberOfTasks:0,subjectData:{}};return e.forEach(function(e){return e.learningGoals.forEach(function(n){var r=n.tasks.filter(function(e){return e.done}).length,a=t.subjectData[e.courseName];a||(a=t.subjectData[e.courseName]={completedNumberOfTasks:0,numberOfTasks:0}),a.completedNumberOfTasks+=r,a.numberOfTasks+=n.tasks.length,t.completedTasks+=r,t.totalNumberOfTasks+=n.tasks.length})}),t}(i),D=i.length>0?C.completedTasks/C.totalNumberOfTasks*100:0;return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===o?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!E&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},n&&this.getHeaderTitle(),a.createElement("div",{className:"widgets"},n?a.createElement("div",{className:"progressBar"},a.createElement(j,{percentage:D})):this.getHeaderTitle(),a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"})))))),i.length>0&&a.createElement("hr",null),i.map(function(t){return a.createElement(h,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)},displayProgress:n,progressData:C.subjectData[t.courseName]}))}),a.createElement("hr",null),v?a.createElement(M.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.learningGoal",defaultMessage:"Eget lÃ¤randemÃ¥l"})),a.createElement("div",{className:"btn",style:b?{opacity:.5}:void 0,onClick:function(t){return!b&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara frÃ¥n fÃ¶regÃ¥ende vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(p.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & UtvÃ¤rdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska gÃ¶ra fÃ¶r att lÃ¤ra mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:f&&f.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.evaluation",defaultMessage:"UtvÃ¤rdering"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.UtvÃ¤rdera i fÃ¶rhÃ¥llande till dina mÃ¥l."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:g&&g.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:N?{}:{opacity:.5},onClick:function(){return!E&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),N?a.createElement(p.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(p.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(y.a,{dialogs:l,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=f.a,t}(a.Component)},function(e){e.exports={"addeditsubtask.addSubtask":"LÃ¤gg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"LÃ¤gg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"FÃ¶r tillfÃ¤llet problem att spara data. Dina Ã¤ndringar sparades inte.","common.changesNotSavedUnauthorized":"Ãndringarna sparades inte p.g.a. otillrÃ¤cklig behÃ¶righet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"LÃ¤nk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"LÃ¤gg till eget arbetsmÃ¥l","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Ãvergripande","task.addSubtask":"LÃ¤gg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmÃ¥l","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den hÃ¤r uppgiften","task.removeWorkGoals":"Ta bort arbetsmÃ¥l","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"ArbetsmÃ¥lets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du gÃ¶ra?","taskList.nextWeekTask":"fÃ¶r nÃ¤sta vecka (v{week})","taskList.lastWeekTask":"fÃ¶r fÃ¶rra veckan (v{week})","taskList.currentWeekTask":"fÃ¶r vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften frÃ¥n egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"LÃ¤gg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"TerminsmÃ¥l","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vÃ¤nta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.sprÃ¥k","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgÃ¤ngligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Framsteg diagram","tutorNoteDialog.weekComment":"Kommentar fÃ¶r vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida fÃ¶r komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmÃ¥l","userTasks.deleteLearningGoal":"Ta bort lÃ¤randemÃ¥let och dess uppgifter","userTasks.goals":"Egna lÃ¤randemÃ¥l","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"MÃ¥l:","weekplanner.addLearningGoalTitle":"LÃ¤gg till eget lÃ¤randemÃ¥l","weekplanner.confirmRemoveLearningObjectives":"Ta bort lÃ¤randemÃ¥l samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara frÃ¥n fÃ¶regÃ¥ende vecka","weekplanner.emptyLearningGoalErr":"LÃ¤randemÃ¥let kan inte vara tomt","weekplanner.evaluation":"UtvÃ¤rdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.UtvÃ¤rdera i fÃ¶rhÃ¥llande till dina mÃ¥l.","weekplanner.learningGoal":"Eget lÃ¤randemÃ¥l","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet fÃ¥r inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & UtvÃ¤rdering","weekplanner.strategyDescription":"Hur jag ska gÃ¶ra fÃ¶r att lÃ¤ra mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"VÃ¥grÃ¤t linje","wysiwyg.link":"Infoga lÃ¤nk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(1),a=n(0),s=n(39),o=n(43),i=n(11),u=n.n(i),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&u()(Object(o.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return u()("body").attr("aria-disabled",n.length>0),u()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,i){var l;return a.createElement("div",{key:i},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){l=t,i===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":i<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||u()(Object(o.findDOMNode)(l)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(o.findDOMNode)(l);e.preventDefault(),u()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),o=n(6),i=n.n(o),u=n(5),l=n(30),c=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}var m=n(17);n.d(t,"a",function(){return p});var p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){l.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){l.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,o;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),o={id:Object(u.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new u.b("email",s.a.currentUser.mail,"S"),new u.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(o.deadline=e.task.deadline),e.task?(o.task=[e.task],e.course?o.course=[e.course]:e.courseInfo&&(o.courseInfo=e.courseInfo)):o.siteVisionPageId=e.id,e.step&&(o.step=e.step),[4,Promise.all([l.b.setWeekPlannerBoxOpen(e.courseName,!0),l.b.insert([o])])]);case 1:return r.sent(),[3,4];case 2:return[4,l.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.context.intl,n=this.props.learningTasks,s=Object(c.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),o=this.state.confirmations,u=i()(this.state.weekDate).week(),l=i()().week(),m=u===l?"":u===l+1?t.formatMessage({id:"taskList.nextWeekTask",defaultMessage:"fÃ¶r nÃ¤sta vecka (v{week})"},{week:u}):u===l-1?t.formatMessage({id:"taskList.lastWeekTask",defaultMessage:"fÃ¶r fÃ¶rra veckan (v{week})"},{week:u}):t.formatMessage({id:"taskList.currentWeekTask",defaultMessage:"fÃ¶r vecka {week}"},{week:u});return a.createElement("div",{className:"taskContainer"},n.map(function(n,i){var c=n.id,p=s[c]||{$meta:"deleted"},f="adding"===p.$meta||"deleting"===p.$meta,h="deleted"!==p.$meta&&"deleting"!==p.$meta,g=h?t.formatMessage({id:"taskList.removeTaskFromWeeklyPlanning",defaultMessage:"Ta bort uppgiften frÃ¥n egen veckoplanering {week}"},{week:m}):t.formatMessage({id:"taskList.addTaskToWeeklyPlanning",defaultMessage:"LÃ¤gg till uppgiften i egen veckoplanering {week}"},{week:m}),v=o.some(function(e){return c===e});return a.createElement("div",{key:n.id},a.createElement("div",{key:c,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"selectedBox"+(h?" selected":""),style:f?{opacity:.5}:{},onClick:function(){return f||u!==l?v?e.setState({confirmations:o.filter(function(e){return e!==c})}):e.setState({confirmations:r.g(o).concat(c)}):e.toggleTask(n)},title:g})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:n.url},n.name))),a.createElement(d,{visible:v,text:g,onConfirm:function(){e.toggleTask(n),e.setState({confirmations:o.filter(function(e){return e!==c})})},onCancel:function(){e.setState({confirmations:o.filter(function(e){return e!==c})})}}))}))},t.contextType=m.a,t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return m});var r=n(1),a=n(55),s=n(3),o=n(2),i=n(5),u=n(46),l=n(22),c=n(6),d=n.n(c),m=s.a.hiddenCoursesRepo,p=function(){function e(){var e=this;this.result=null,this.subscribers=[],this.fullCourse=!1,this.notifySubscriber=function(t,n){try{t(n.fullCourse?e.result:e.result.filter(function(e){return e.visible}))}catch(e){console.error(e)}},this.kedRepo=new a.a({getClient:function(){return s.a.kedBackendClient},optimistic:!0,table:"userhiddencourses",user:s.a.currentUser?s.a.currentUser.mail:"",getQueryOptions:function(){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}});var t=this.init();Promise.all([t,this.kedCoursesPromise,this.edsCoursesPromise]).catch(function(e){return Object(o.n)(e)})}return e.prototype.init=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a=this;return r.d(this,function(o){switch(o.label){case 0:return e=s.a.bearerProvider?s.a.bearerProvider.getBearer():Promise.resolve({}),this.kedCoursesPromise=e.then(function(){return a.listKedCourses()}),this.edsCoursesPromise=e.then(function(){return a.listEDSCourses()}),n=!1,this.userHiddenCoursesPromise=new Promise(function(e){return t=function(t){n?a.userHiddenCoursesPromise=Promise.resolve(t):(n=!0,e(t))}}),[4,e];case 1:return o.sent(),this.kedRepo.mem.subscribe(function(e){return r.b(a,void 0,void 0,function(){var n,a,s,o,i=this;return r.d(this,function(u){switch(u.label){case 0:return[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise])];case 1:return n=r.f.apply(void 0,[u.sent(),2]),a=n[0],s=n[1],o=this,[4,this.createCoursesList(s,e,a)];case 2:return o.result=u.sent(),this.subscribers.forEach(function(e){return i.notifySubscriber(e.subscriber,e.options)}),t(e),[2]}})})}),[2]}})})},e.prototype.listKedCourses=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:return e=this.fullCourse,console.log("FullCourse: "+e),[4,s.a.kedBackendClient.list("schools",{role:"USER",name:s.a.currentUser.school,include:"activeCourses",flags:e?[]:["includeIdsAndNamesOnly"],cacheBust:s.a.currentUser.username})];case 1:return t=n.sent(),[2,Object(o.k)(t.map(function(e){return e.activeCourses})).sort(Object(o.g)("name"))]}})})},e.prototype.listEDSCourses=function(){var e=new u.a(Object(l.c)(d()())).period;return-1===s.a.currentUser.roles.indexOf("EMPLOYEE")?s.a.edsClient.getActiveCourses({periodName:e}):null},e.prototype.createCoursesList=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,u,l,c=this;return r.d(this,function(d){switch(d.label){case 0:return a=Object(o.c)(t.filter(function(e){return!e.show}),function(e){return e.name}),i=Object(o.c)(t.filter(function(e){return e.show}),function(e){return e.name}),u=s.a.currentUser.roles.some(function(e){return"STUDENT"===e}),l=e?Object(o.c)(e,function(e){return e.name}):{},[4,Promise.all(n.map(function(e){var t=e.id,n=e.name,s=e.description,o=e.modifiedBy;return r.b(c,void 0,void 0,function(){var e,c,d;return r.d(this,function(r){return e=l[n],d=(c=!u||null!=e)?!a[t]:!!i[t],o&&o.name&&!s&&(s=o.name+"s version"),[2,{id:t,name:n,description:s,visible:d,defaultVisible:c}]})})}))];case 1:return[2,d.sent().sort(function(e,t){var n=e.name,r=t.name;return n<r?-1:n>r?1:0})]}})})},e.prototype.hideCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.insert([{id:Object(i.h)(),name:e.id}])]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.delete(t.map(function(e){return e.id}))];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.showCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.delete(t.map(function(e){return e.id}))]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.insert([{id:Object(i.h)(),name:e.id,show:!0}])];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.subscribe=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,i;return r.d(this,function(u){switch(u.label){case 0:return this.fullCourse||!t.fullCourse?[3,3]:(this.fullCourse=t.fullCourse,this.kedCoursesPromise=this.listKedCourses(),[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise,this.userHiddenCoursesPromise])]);case 1:return n=r.f.apply(void 0,[u.sent(),3]),a=n[0],s=n[1],o=n[2],i=this,[4,this.createCoursesList(s,o,a)];case 2:i.result=u.sent(),u.label=3;case 3:return[4,this.userHiddenCoursesPromise];case 4:return u.sent(),this.notifySubscriber(e,t),this.subscribers.push({subscriber:e,options:t}),[2]}})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t.subscriber!==e})},e}();m||(m=s.a.hiddenCoursesRepo=new p)},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"AdministratÃ¶r",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Andrei",mail:"andrei.spatarelu@vemendo.se",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"andrei"},{displayName:"Carl Holmberg",mail:"carl.holmberg@kunskapsgymnasiet.se",roles:["ADMIN","EMPLOYEE"],school:"NorrkÃ¶ping",username:"carl.holmberg@kunskapsgymnasiet.se"},{displayName:"Carl",mail:"carl@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"carl"},{displayName:"david.fahlander@kedschools.com",mail:"david.fahlander@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"david.fahlander@kedschools.com"},{displayName:"Teacher 1",mail:"teacher1.classroom@kedschools.com",roles:["EMPLOYEE"],school:"KED",username:"teacher1.classroom@kedschools.com"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-LÃ¤rare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev BorÃ¥s",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"BorÃ¥s",schoolType:"Grundskolor"},{displayName:"Elev BorlÃ¤nge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"BorlÃ¤nge",schoolType:"Gymnasium"},{displayName:"Roll-lÃ¶s",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(6),a=n.n(r),s=n(7);"sv"===s.b.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"sÃ¶ndag_mÃ¥ndag_tisdag_onsdag_torsdag_fredag_lÃ¶rdag".split("_"),weekdaysShort:"sÃ¶n_mÃ¥n_tis_ons_tor_fre_lÃ¶r".split("_"),weekdaysMin:"sÃ¶_mÃ¥_ti_on_to_fr_lÃ¶".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[IgÃ¥r] LT",nextWeek:"[PÃ¥] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"fÃ¶r %s sedan",s:"nÃ¥gra sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en mÃ¥nad",MM:"%d mÃ¥nader",y:"ett Ã¥r",yy:"%d Ã¥r"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var o=function(){return a.a.apply(this,arguments).locale(s.b.KED_LOCALE)}},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(3),s=function(){function e(e){this.googleTokenProvider=a.b.googleTokenProvider,this.discoveryDocs=[],this.discoveryDocs.push(e)}return e.prototype.setBearerProvider=function(e){this.googleTokenProvider=e},e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:t.sent(),t.label=2;case 2:return!this.tokenExpiration||this.tokenExpiration<new Date?[4,this.googleTokenProvider.getBearer()]:[3,4];case 3:e=t.sent(),this.tokenExpiration=new Date(e.expires),this.token=e.token,gapi.client.setToken({access_token:e.token}),t.label=4;case 4:return[4,gapi.client.init({discoveryDocs:this.discoveryDocs})];case 5:return t.sent(),[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e){if("undefined"!=typeof gapi)return e();var t=document.createElement("script");t.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(t),window.gaapi_loaded=e})},e}()},,function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Outdent",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Indent",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(r.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt(this.promptMsg);e&&Object(r.a)("insertImage",e)}}}},function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},,,,,,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var t=n(7);t.b.ENVIRONMENT="test",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,n(126))},function(e,t,n){"use strict";n(98);var r=n(1),a=n(15),s=n(20),o=n(5),i=n(7),u=n(3),l=n(13),c=n(2);function d(e,t,n){var s=Object(a.b)(t),o=Object(c.e)(s,l.a),i=r.f(Object(a.c)(e),2),u=i[0],d=i[1],m=Object(a.b)(d);return u+Object(a.a)(r.a({},m,o,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function p(e,t,n){return new o.e(s.c,s.d,e+t.mail+location.search,i.b.KED_CLIENT_ID,i.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var f,h,g=u.a.currentUser&&u.a.currentUser.mail;if(g)if(i.b.KED_TOKEN_PATH){var v=d(i.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);u.a.bearerProvider=(h=m(f=v,g),new s.b(f,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){u.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,h),{token:t.token,expires:Date.now()+354e4}},h)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(u.a.currentUser=JSON.parse(t))}(m(v,g));var b=d(i.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"]);u.a.googleTokenProvider=function(e,t){var n=m(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,g)}else{if(!(i.b.KED_TOKEN_URL&&i.b.KED_CLIENT_ID&&i.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");u.a.bearerProvider=p(i.b.KED_TOKEN_URL,u.a.currentUser,["kedbackend","EDS"]),u.a.googleTokenProvider=p(i.b.KED_TOKEN_URL+"/google",u.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"])}u.a.kedBackendClient=new s.a(i.b.KED_API_URL,u.a.bearerProvider);var k=n(46);u.a.edsClient=new k.b(s.c,i.b.EDS_API_URL,u.a.bearerProvider,function(){return u.a.currentUser.mail})},,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(3),o=n(139),i=function(e){function t(t){var n=e.call(this,t)||this;return n.onEnvUpdated=n.onEnvUpdated.bind(n),n.state={env:t.tutored?null:s.a},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.tutored&&o.a.subscribe(this.onEnvUpdated)},t.prototype.componentWillUnmount=function(){this.props.tutored&&o.a.unsubscribe(this.onEnvUpdated)},t.prototype.onEnvUpdated=function(e){this.setState({env:e})},t.prototype.render=function(){var e=this.state.env;return e?e.kedBackendClient?this.props.createComponent(e):a.createElement("div",null,"Laddar..."):a.createElement("div",null)},t}(a.Component)},,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(73);function s(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"VÃ¤lj anvÃ¤ndare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,s=e.school,o=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===o.length?{fontStyle:"italic"}:{}},0===o.length?"saknar roller":o.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:s?{}:{fontStyle:"italic"}},s||"saknar skola"))}))))}},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.myself=a.createRef(),n.state={text:t.text||""},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.tag,n=e.text,r=e.readOnly,s=t;return a.createElement(s,{contentEditable:!r,"data-placeholder":this.props.placeholder,ref:this.myself,className:this.props.className,onChange:this.onChange.bind(this),onKeyDown:this.onKeyDown.bind(this),onKeyUp:this.onKeyUp.bind(this),onBlur:this.onBlur.bind(this),onPaste:this.onPaste.bind(this),dangerouslySetInnerHTML:{__html:n}})},t.prototype.onChange=function(e){this.setState({text:this.myself.current.innerText})},t.prototype.onKeyDown=function(e){var t=this.myself.current.innerText;if("Escape"===e.key?(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.stopPropagation()):"Enter"===e.key?(e.preventDefault(),this.navigate(t,"down")):"Tab"===e.key?this.propagateOnChange(t):t.length>=this.props.maxChars&&/^[\d\w\s]$/.test(e.key)&&!e.metaKey&&!e.ctrlKey&&e.preventDefault(),!0===this.props.allowNavigation){var n=!!e.key.startsWith("Arrow")&&e.key.replace("Arrow","").toLowerCase(),r=document.getSelection().getRangeAt(0).endOffset;n&&0==t.length?this.navigate(t,n):!n||"up"!=n&&"down"!=n?n&&("left"==n&&0==r||"right"==n&&r==t.length)&&this.navigate(t,n):this.navigate(t,n)}},t.prototype.onKeyUp=function(e){var t=this.myself.current.innerText;void 0===this.props.validateValue||this.props.validateValue.test(t)||(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.preventDefault())},t.prototype.navigate=function(e,t){this.propagateOnChange(e),this.setState({text:e}),this.props.onNavigate(t)},t.prototype.onPaste=function(e){e.preventDefault();var t=e.clipboardData&&e.clipboardData.getData?e.clipboardData.getData("text/plain"):"";document.execCommand("insertHTML",!1,t)},t.prototype.onBlur=function(e){var t=this.myself.current.innerText;this.propagateOnChange(t),this.setState({text:t})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t}(a.PureComponent)},,,,,function(e,t){},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r,a,s=n(1),o=n(0),i=n(7),u=n(2),l=n(12),c=n(15),d=n(13),m=n(69),p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,courses:[],headerOpen:!1},n.updateHiddenCourses=n.updateHiddenCourses.bind(n),n}return s.c(t,e),t.prototype.componentWillMount=function(){m.a.subscribe(this.updateHiddenCourses,{fullCourse:!0})},t.prototype.componentWillUnmount=function(){m.a.unsubscribe(this.updateHiddenCourses)},t.prototype.updateHiddenCourses=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.hideCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(r||(r=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.hideCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.showCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(a||(a=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.showCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.render=function(){var e=this;if(this.state.isLoading)return o.createElement(l.a,null);var t=this.state.courses,n=t.filter(function(e){return e.visible}),r=t.filter(function(e){return!e.visible}),a=Object(c.b)(location.search),u=i.b.KED_COURSE_VIEWER_URL;return o.createElement("div",{className:"ked_boxed"},o.createElement("h3",null,"Skolans kurser"),o.createElement("div",{className:"taskContainer odd-even"},n.map(function(t){return o.createElement("div",{className:"studentCourse",key:t.id},o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top pull-right"},o.createElement("a",{className:"hideItem",onClick:function(){return e.hideCourse(t)}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{href:Object(d.f)(u,{courseId:t.id})},t.name))),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",{className:"small"},t.description)))})),o.createElement("div",{className:"openClose"+(this.state.headerOpen?" open":"")},o.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},o.createElement("h5",null,"Dolda kurser")),o.createElement("div",{className:"openContent"},o.createElement("div",{className:"taskContainer odd-even"},r.map(function(t){return o.createElement("div",{className:"studentCourse",key:t.id},o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top pull-right"},o.createElement("a",{className:"showItem",onClick:function(){return e.showCourse(t)}})),o.createElement("a",{href:Object(c.a)(s.a({},a,{courseId:t.id}))},t.name)),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",{className:"small"},t.description)))})))))},t}(o.Component)},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(67),o=n(17),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.commonTasks,n=e.learningGoals,r=this.context.intl;return a.createElement("div",null,n.map(function(e){return a.createElement("div",{key:e.name},a.createElement("h5",null,e.name),a.createElement(s.a,{learningTasks:e.learningTasks}))}),t.length>0&&a.createElement("div",null,n.length>0&&a.createElement("h5",null,r.formatMessage({id:"learningGoalsLost.overall",defaultMessage:"Ãvergripande"})),a.createElement(s.a,{learningTasks:t})))},t.contextType=o.a,t}(a.Component)},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(6),o=n.n(s);function i(e,t){var n=o()(new Date(t.firstTerm.startDate)),r=o()(new Date(t.firstTerm.endDate)),a=o()(new Date(t.secondTerm.startDate)),s=o()(new Date(t.secondTerm.endDate)),i=n.year().toString().substr(2)+"/"+s.year().toString().substr(2),l=u(t.holidays,n,r);if(e<r){var c=1,d=r.week()-n.week();return{term:"AT",academicYearStructure:{academicYear:i,startDate:n,endDate:r,academicStartWeek:c,academicEndWeek:d,holidays:l}}}var m=function(e){var t=0;return e.forEach(function(e){t+=o()(e.endDate).add(1,"week").week()-o()(e.startDate).week()}),t}(l);c=a.clone().add(1,"week").week()-n.week()-m,d=s.clone().add().add(1,"week").week()-n.week()-m;return{term:"ST",academicYearStructure:{academicYear:i,startDate:a,endDate:s,academicStartWeek:c,academicEndWeek:d,holidays:l=u(t.holidays,a,s)}}}function u(e,t,n){return e.filter(function(e){return o()(e.startDate).isBetween(t,n)})}function l(e){var t=e.shortName;return"MA"===t?"Ma":"EN"===t?"Eng":t.startsWith("SV")?"Sv/SvA":t.startsWith("M2")?"M.spr":null}var c=function(){function e(e,t,n){this.locale=t||"sv",this.selectedDate=e,this.schoolMoment=n?i(o()(e),n):null}return e.prototype.getTermStartAndEnd=function(e){var t=this.schoolMoment.academicYearStructure.startDate.clone().startOf("week");t.year()<this.schoolMoment.academicYearStructure.startDate.year()&&(t=this.schoolMoment.academicYearStructure.startDate);var n=this.schoolMoment.academicYearStructure.endDate;return"sv"===this.locale&&e&&"ST"===this.schoolMoment.term?n=n.clone().add(3,"weeks").endOf("week"):e&&("sv"!=this.locale&&(n=this.schoolMoment.academicYearStructure.endDate.clone()),n=this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").endOf("week")),[t,n]},e.prototype.getFirstAndLastWeekOfTerm=function(){return[this.schoolMoment.academicYearStructure.startDate.week(),this.schoolMoment.academicYearStructure.endDate.week()]},e.prototype.isCurrentWeek=function(e){var t=o()(e);return t.year()===o()().year()&&t.week()===o()().week()},e.prototype.getLastStepWeek=function(e){return"sv"===e?"ST"===this.schoolMoment.term?28:52:this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").week()},e.prototype.toLocaleString=function(e,t){if(this.schoolMoment){var n=this.schoolMoment.academicYearStructure.endDate.year().toString(),r=this.schoolMoment.academicYearStructure.academicYear;return n=t&&"sv"===e.locale?n.substr(2):r,"AT"===this.schoolMoment.term?e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"VT {year}"},{year:n})}return null},e.prototype.nextTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.endDate.clone():o()()).add(3,"months").toDate(),this.locale)},e.prototype.prevTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.startDate.clone():o()()).subtract(3,"months").toDate(),this.locale)},e.prototype.getEdsPeriodName=function(){return"AT"===this.schoolMoment.term?"HT":"VT"+this.schoolMoment.academicYearStructure.endDate.year()},e}(),d=n(5),m=n(40),p=function(){return function(e,t,n,a,s,i){var u,c,p,f,h,g=this;if(this.subjectProgress={},this.columns=[],this.weekPlansOrTutorNote=[],n.schoolMoment){var v=r.f(n.getTermStartAndEnd(),2),b=v[0],k=v[1];this.year=b.year();var y=function(e){switch(e){case"sv":return["M.spr","Ma","Sv/SvA","Eng"];case"en_sin":case"en_nin":return["MFL","Ma","Hi","Eng","Yoga","ICT"]}}(a);y.forEach(function(e){return g.columns.push({name:e})});var E=[{name:"Kurs",isFixed:!0},{name:"Kommentar",isFixed:!0}];i&&E.push({name:"TutorComment",isFixed:!0}),(u=this.columns).push.apply(u,r.g(E));var w=function(e,t){var n={};return n.Kurs=t.formatMessage({id:"termplanner.course",defaultMessage:"Kurs"}),n.Kommentar=t.formatMessage({id:"termplanner.comments",defaultMessage:"Kommentar"}),"sv"===e?(n["M.spr"]=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"M.spr"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Ma"}),n["Sv/SvA"]=t.formatMessage({id:"termplanner.swedishLanguage",defaultMessage:"Sv/SvA"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"Eng"})):(n.MFL=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"MFL"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Maths"}),n.Hi=t.formatMessage({id:"termplanner.hindiLanguage",defaultMessage:"Hindi"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"English"}),n.Yoga=t.formatMessage({id:"termplanner.yoga",defaultMessage:"Yoga"}),n.ICT=t.formatMessage({id:"termplanner.ict",defaultMessage:"ICT"})),n}(a,s);this.columns.forEach(function(e){e.translatedName=w[e.name]});for(var T=n.schoolMoment.academicYearStructure.holidays,N=n.schoolMoment.term,C=e.filter(function(e){return!e.type}),D=e.filter(function(e){return"tutor-note"===e.type}),S=n.schoolMoment.academicYearStructure.academicStartWeek,O=function(e){if(T.filter(function(t){return e.week()>=o()(t.startDate).startOf("week").week()&&e.week()<=o()(t.endDate).endOf("week").week()}).length>0)return"continue";var t=e.week(),n=Object(m.a)(e.year(),t),a=C.filter(function(e){return e.dateTime>=n.notBefore&&e.dateTime<=n.notAfter&&(!e.isFinalStep&&e.term===N||"sv"===s.locale)})[0],i=D.filter(function(e){return e.dateTime>=n.notBefore&&e.dateTime<=n.notAfter&&(e.term===N||"sv"===s.locale)})[0];M.weekPlansOrTutorNote.push(r.a({},a||{},{id:a?a.id:Object(d.h)(),dateTime:a?a.dateTime:e.valueOf(),cellValues:a?a.cellValues:{},weekNumber:t,academicWeekNumber:S++,term:N})),M.weekPlansOrTutorNote.push(r.a({},i||{},{id:i?i.id:Object(d.h)(),type:"tutor-note",dateTime:i?i.dateTime:e.valueOf(),content:i?i.content:"",weekNumber:t,term:N}))},M=this,x=b.clone();x.valueOf()<k.valueOf();x=x.clone().add(1,"week").startOf("week"))O(x);var L=n.getLastStepWeek(s.locale),j=Object(m.a)(k.year(),L);this.lastSteps=C.filter(function(e){return e.dateTime>=j.notBefore&&e.dateTime<=j.notAfter&&(e.isFinalStep&&e.term===N||"sv"===s.locale)})[0]||{id:Object(d.h)(),dateTime:o()(k).clone().week(L).startOf("week").valueOf(),cellValues:{},weekNumber:L,term:N,isFinalStep:!0},this.completedSteps={},this.termGoals={};var P={};try{for(var I=r.h(t),U=I.next();!U.done;U=I.next()){var R=U.value,A=l(R);try{for(var _=(f=void 0,r.h(R.courseSteps)),B=_.next();!B.done;B=_.next()){var G=B.value;if(G.isCompleted){this.completedSteps[A+G.shortName]=!0;var H=parseInt(G.shortName);!isNaN(H)&&H>(P[A]?P[A]:0)&&(P[A]=H)}}}catch(e){f={error:e}}finally{try{B&&!B.done&&(h=_.return)&&h.call(_)}finally{if(f)throw f.error}}this.termGoals[A]=R.periodGoalGrade}}catch(e){c={error:e}}finally{try{U&&!U.done&&(p=I.return)&&p.call(I)}finally{if(c)throw c.error}}t&&(y.forEach(function(e){g.subjectProgress[e]={finalStepCompleted:!1,value:0}}),Object.keys(this.lastSteps.cellValues).forEach(function(e){if(!E[e]){var t=isNaN(parseInt(g.lastSteps.cellValues[e]))||!g.lastSteps.cellValues[e],n=t?0:parseInt(g.lastSteps.cellValues[e]),r=n>0?100*P[e]/n:0;g.subjectProgress[e]={finalStepCompleted:!t,value:r}}}))}}}();var f=n(122),h=n(3),g=new(n(153).a)(function(){return h.a.kedBackendClient},function(){return h.a.currentUser});h.a.ksTermPlannerRepo=g;var v=n(17),b=n(8),k=n(7),y=n(12),E=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.errorMessage,r=e.backgroundColor,s=e.progressColor,o=100/6.28+2,i=Math.round(t),u=10;return a.createElement("svg",{className:"doughnut-chart",viewBox:"0 0 35.847133757961785 35.847133757961785",width:"100%",height:"100%"},a.createElement("circle",{className:"circle-chart-background",stroke:r,strokeWidth:3,fill:"none",cx:o,cy:o,r:100/6.28}),a.createElement("circle",{className:"circle-chart-circle",stroke:s,ref:"progressCircle",strokeWidth:2,style:{strokeDasharray:i+", 100"},strokeLinecap:"round",fill:"none",cx:o,cy:o,r:100/6.28}),a.createElement("g",{className:"circle-chart-info"},n?a.createElement("text",{className:"circle-chart-percent-error",x:o,y:o,alignmentBaseline:"central",fontSize:"5",textAnchor:"middle"},n.split(" ").map(function(e){var t=a.createElement("tspan",{key:e,x:o,y:u},e);return u+=5,t})):a.createElement("text",{className:"circle-chart-percent",x:o,y:o,alignmentBaseline:"central",textAnchor:"middle"},i+"%")))},t.defaultProps={backgroundColor:"#efefef",progressColor:"#3dbca2",errorMessage:null},t}(a.Component),w=n(65),T=n(152),N=n(25),C=n(19);n.d(t,"a",function(){return D});var D=function(e){function t(t){var n=e.call(this,t)||this;return n.unmounted=!1,n.state={schoolTerm:new c(t.initialDate),activeCourses:[],weekPlans:[],error:null,loadingActiveCourses:!1,loadingWeekPlans:!1,initialLoad:!0,dialogs:[]},n.flowId=1,n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,this.load(this.state.schoolTerm)];case 1:return e.sent(),this.unmounted||this.props.env.ksTermPlannerRepo.mem.subscribe(this.updateWeekPlans),[2]}})})},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.props.env.ksTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e,t){this.setState({weekPlans:e,loadingWeekPlans:!1,error:t||null})},t.prototype.load=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o,i;return r.d(this,function(r){switch(r.label){case 0:t=++this.flowId,this.fields=[],this.setState({loadingActiveCourses:!0}),n=this.props.env.ksTermPlannerRepo,r.label=1;case 1:return r.trys.push([1,4,,5]),[4,this.loadAcademicYearDates(e,k.b.KED_SCHOOL_LOCALE)];case 2:return a=r.sent(),this.flowId!==t?[2]:(s=new c(e.selectedDate,this.context.intl.locale,a),n.refreshData(s.getTermStartAndEnd(!0)),[4,this.loadActiveCourses(s)]);case 3:return o=r.sent(),this.flowId!==t?[2]:(this.setState({schoolTerm:s,initialLoad:!1,activeCourses:o,loadingActiveCourses:!1}),[3,5]);case 4:return i=r.sent(),this.flowId!==t?[2]:(this.setState({schoolTerm:s,loadingActiveCourses:!1,error:i}),[3,5]);case 5:return[2]}})})},t.prototype.loadAcademicYearDates=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.edsClient.getAcademicYearTerms(t,e.selectedDate)];case 1:return[2,n.sent()]}})})},t.prototype.loadActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=e.getEdsPeriodName(),[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return[2,n.sent()]}})})},t.prototype.updateCell=function(e,t,n){return r.b(this,void 0,void 0,function(){var a;return r.d(this,function(r){switch(r.label){case 0:if((e&&e.cellValues[t]||"")===n)return[2];r.label=1;case 1:return r.trys.push([1,3,,4]),e.cellValues[t]=n,[4,this.props.env.ksTermPlannerRepo.upsert(e,function(e){return e.cellValues[t]=n})];case 2:return[2,r.sent()];case 3:return a=r.sent(),console.error(a.stack||a),"http403"===a.name?this.setState({error:this.context.intl({id:"common.changesNotSavedUnauthorized",defaultMessage:"Ãndringarna sparades inte p.g.a. otillrÃ¤cklig behÃ¶righet."})}):this.setState({error:this.context.intl({id:"common.changesNotSavedErrorOccured",defaultMessage:"FÃ¶r tillfÃ¤llet problem att spara data. Dina Ã¤ndringar sparades inte."})}),[3,4];case 4:return[2]}})})},t.prototype.updateTutorNoteField=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if((e&&e.content||"")===t)return[2];n.label=1;case 1:return n.trys.push([1,3,,4]),e.content=t,e.acl=[new d.b("tutorFor",this.props.env.currentUser.mail,"S").toString(),new d.b("email",this.props.env.currentUser.mail,"R").toString()],[4,this.props.env.ksTermPlannerRepo.upsert(e,function(e){return e.content=t})];case 2:return[2,n.sent()];case 3:return n.sent(),[3,4];case 4:return[2]}})})},t.prototype.deleteTutorNoteField=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.props.env.ksTermPlannerRepo.delete([e])];case 1:return t.sent(),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}})})},t.prototype.onTutorClick=function(e){var t=this;this.openDialog(a.createElement(T.a,{weekNumber:e.weekNumber,comment:e.content,intl:this.context.intl,updateData:function(n){return t.updateTutorNoteField(e,n)},deleteNoteData:function(){return t.deleteTutorNoteField(e.id)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.navigate=function(e,t){var n=r.a({},e),a=this.fields.length,s=Math.max.apply(Math,r.g(this.fields.map(function(e){return e.length})));switch(t){case"up":n.row=Math.max(e.row-1,0);break;case"down":n.row=Math.min(e.row+1,a);break;case"left":n.col=Math.max(e.col-1,0);break;case"right":n.col=Math.min(e.col+1,s)}this.fields[n.row]&&this.fields[n.row][n.col]&&this.fields[n.row][n.col].myself.current.focus()},t.prototype.addField=function(e,t){void 0===this.fields[t.row]&&(this.fields[t.row]=[]),this.fields[t.row][t.col]=e},t.prototype.getTableCell=function(e,t,n,r,s,o,i){var u=this,l=r.completedSteps,c={row:e,col:t};if("Tutor"===i){var d=s,m=d.content;return this.props.tutored?a.createElement("td",{key:"tutornote"+t,onClick:function(){return u.onTutorClick(d)},className:"tutorCell"},m?a.createElement("div",{key:t,"data-tooltip":m},a.createElement("i",{key:t,className:"fas fa-comment-dots"})):a.createElement("div",{key:t},a.createElement("i",{key:t,className:"fas fa-comment-medical"}))):a.createElement("td",{key:"tutornote"+t,className:"tutorCell"},m&&a.createElement("div",{key:t,"data-tooltip":m},a.createElement("i",{key:t,className:"far fa-comment-dots"})))}var p=s.cellValues;return a.createElement("td",{className:this.getCellClassName(l,p,n)},a.createElement(f.a,{key:t,ref:function(e){return u.addField(e,c)},text:p[n],tag:"div",validateValue:"Step"==i?/^\d*$/:void 0,maxChars:"Comment"==i?100:"Course"==i?30:3,onChange:this.updateCell.bind(this,s,n),readOnly:o||"Tutor"==i,allowNavigation:!0,onNavigate:this.navigate.bind(this,c)}))},t.prototype.getCellClassName=function(e,t,n){var r=this.getColumnType(n);return"Step"==r&&e[n+t[n]]?"stepCell completedStep":r.toLowerCase()+"Cell"},t.prototype.getFooterCell=function(e,t,n,r,s){var o=this,i={row:e,col:t},u=this.getColumnType(n);return a.createElement("th",{className:u+"Footer"},a.createElement(f.a,{key:"stepFooterCell"+t,ref:function(e){return o.addField(e,i)},tag:"div",text:r.lastSteps.cellValues[n],onChange:this.updateCell.bind(this,r.lastSteps,n),readOnly:s,maxChars:10,allowNavigation:!0,onNavigate:this.navigate.bind(this,i)}))},t.prototype.getStepHeaderColumn=function(e,t,n){return a.createElement("th",{key:"stepHeaderCell_"+e,className:n.toLowerCase()+"Header"},"Tutor"!=n?t:"")},t.prototype.getColumnType=function(e){var t={Kommentar:"Comment",Kurs:"Course",TutorComment:"Tutor"};return t.hasOwnProperty(e)?t[e]:"Step"},t.prototype.openCloseProgressCharts=function(e){localStorage.setItem("TermplannerBoxCharts",e)},t.prototype.getStepCharts=function(e,t){var n=this,r=JSON.parse(localStorage.getItem("TermplannerBoxCharts"));return a.createElement(C.a,{headerOpen:r,onOpenClose:this.openCloseProgressCharts,title:this.context.intl.formatMessage({id:"termplanner.chartsBoxTitle",defaultMessage:"Framsteg diagram"})},a.createElement("div",{className:"charts-container"},e.map(function(e){if(!e.isFixed){var r=t[e.name]?t[e.name].value:0,s=t[e.name].finalStepCompleted?null:n.context.intl.formatMessage({id:"termplanner.noFinalStepAvailable",defaultMessage:"Inget slutsteg tillgÃ¤ngligt"}),o=function(e){var t={};return t["M.spr"]=e.formatMessage({id:"termplanner.modernLanguageFullname",defaultMessage:"M.sprÃ¥k"}),t.Ma=e.formatMessage({id:"termplanner.mathsFullname",defaultMessage:"Matematik"}),t["Sv/SvA"]=e.formatMessage({id:"termplanner.swedishLanguageFullName",defaultMessage:"Svenska"}),t.Eng=e.formatMessage({id:"termplanner.englishLanguageFullName",defaultMessage:"Engelska"}),t}(n.context.intl);return a.createElement("div",{key:e.name,className:"chart-box"},a.createElement("h4",null,o[e.name]),a.createElement("div",{key:e.name,className:"inner-chart-box"},a.createElement(E,{key:e.name,percentage:r,errorMessage:s})))}})))},t.prototype.getWeekTutorNote=function(e,t){return e.find(function(e){return"tutor-note"===e.type&&e.weekNumber===t})},t.prototype.render=function(){var e=this,t=this.context.intl,n=N.b.ksTutorComment,r=N.b.termplannerCharts,s=new p(this.state.weekPlans,this.state.activeCourses,this.state.schoolTerm,k.b.KED_SCHOOL_LOCALE,t,n),o=s.termGoals,i=s.columns,u=this.props.tutored,l=this.state,c=l.loadingWeekPlans,d=l.error,m=l.weekPlans,f=l.dialogs,h=0===m.length&&!!d||u||c,g=0,v=s.weekPlansOrTutorNote.filter(function(e){return!e.type});return this.state.initialLoad?a.createElement("p",null,a.createElement(y.a,null),a.createElement(b.a,{id:"termplanner.loadingTermplanner",defaultMessage:"V.g. vÃ¤nta medan terminsplaner laddas..."})):a.createElement("div",{className:"termplanner"+(this.state.loadingWeekPlans?" loading-weekplans":"")+(this.state.loadingActiveCourses?" loading-courses":"")},r&&this.state.activeCourses.length>0&&this.getStepCharts(i,s.subjectProgress),a.createElement("div",{className:"ked_boxed"},a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,this.state.schoolTerm.toLocaleString(t,!0))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.prevTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.nextTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))))),a.createElement(b.a,{id:"termplanner.termPlanning",defaultMessage:"Terminsplanering",tagName:"h4"}),a.createElement("hr",null),a.createElement("table",{className:"termplanner-table zebra"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{className:"weekColumn"},a.createElement(b.a,{id:"termplanner.weekNumber",defaultMessage:"Vecka"})),i.map(function(t,n){var r=e.getColumnType(t.name);return e.getStepHeaderColumn(n,t.translatedName,r)}))),a.createElement("tbody",null,v.filter(function(e){return e.cellValues}).map(function(r,o){g=o;var u=r.weekNumber,l=r.academicWeekNumber,c=u,d=e.state.schoolTerm.isCurrentWeek(r.dateTime);return a.createElement("tr",{key:s.year+":"+c,className:d?"currentWeek":""},a.createElement("td",null,"sv"===t.locale?c:l),i.map(function(t,a){var i=e.getColumnType(t.name),l=e.getWeekTutorNote(s.weekPlansOrTutorNote,u);return"Tutor"===i?l&&n&&e.getTableCell(o,a,t.name,s,l,h,i):e.getTableCell(o,a,t.name,s,r,h,i)}))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",null,a.createElement(b.a,{id:"termplanner.finalStep",defaultMessage:"Slutsteg"})),i.filter(function(e){return!e.isFixed}).map(function(t,n){return e.getFooterCell(g+1,n,t.name,s,h)}),a.createElement("th",null,"-"),a.createElement("th",null),n&&a.createElement("th",null)),a.createElement("tr",null,a.createElement("th",null,a.createElement(b.a,{id:"termplanner.edsGoalGrades",defaultMessage:"TerminsmÃ¥l"})),i.filter(function(e){return!e.isFixed}).map(function(t,n){var r=e.getColumnType(t.name).toLowerCase();return a.createElement("th",{key:"grades_"+n,className:r+"Footer"},o[t.name])}),a.createElement("th",null,"-"),a.createElement("th",null,this.state.error&&a.createElement("p",{className:"error"},""+this.state.error)),n&&a.createElement("th",null))))),a.createElement(w.a,{dialogs:f,popDialog:function(){return e.setState({dialogs:f.slice(0,f.length-1)})}}))},t.contextType=v.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(31),s=function(){function e(){this.subscribers=[],this.env=null,this.version=1}return e.prototype.subscribe=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){return this.subscribers.push(e),e(this.env),[2]})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){return this.subscribers.forEach(function(t){return t(e.env)}),[2]})})},e.prototype.setNewEnv=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(s){switch(s.label){case 0:return n=++this.version,this.env={currentUser:e,tutored:!0},this.notifySubscribers(),[4,t().catch(function(t){return{currentUser:e,tutored:!0,error:t}})];case 1:return a=s.sent(),n===this.version&&(++this.version,this.env=r.a({},a,{tutored:!0}),this.notifySubscribers()),[2]}})})},e}();a.a.tutorEnv||(a.a.tutorEnv=new s),t.a=a.a.tutorEnv},,,function(e,t,n){var r={"./en-SG":87,"./en-SG.js":87,"./en-au":88,"./en-au.js":88,"./en-ca":89,"./en-ca.js":89,"./en-gb":90,"./en-gb.js":90,"./en-ie":91,"./en-ie.js":91,"./en-il":92,"./en-il.js":92,"./en-nz":93,"./en-nz.js":93,"./sv":94,"./sv.js":94};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=142},function(e,t){},function(e,t){},function(e,t,n){"use strict";var r=n(62);n.d(t,"a",function(){return r.a})},,,,,,function(e,t,n){"use strict";var r=n(3),a=n(73),s=n(15),o=Object(s.b)(location.search).user;if(o){var i=a.a.find(function(e){return e.username===o});i&&(r.a.currentUser=i)}var u=Object(s.b)(location.search),l=u.role,c=u.school;r.a.currentUser&&(l&&(r.a.currentUser.roles=l.split(",")),c&&(r.a.currentUser.school=c))},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={comment:t.comment?t.comment:""},n}return r.c(t,e),t.prototype.delete=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return(0,this.props.closeDialog)(),this.props.deleteNoteData(),[2]})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){return e=this.props.closeDialog,t=this.state.comment,e(),this.props.updateData(t),[2]})})},t.prototype.render=function(){var e=this,t=this.props,n=t.weekNumber,r=t.intl,s=this.state.comment;return a.createElement("div",null,a.createElement("div",null,a.createElement("h2",null,r?r.formatMessage({id:"tutorNoteDialog.weekComment",defaultMessage:"Kommentar fÃ¶r vecka {weekNumber}"},{weekNumber:n}):"Kommentar fÃ¶r vecka "+n),a.createElement("hr",null),a.createElement("div",{className:"align-table"},a.createElement("div",{className:"fullWidth"},a.createElement("textarea",{autoFocus:!0,value:s,onChange:function(t){return e.setState({comment:t.target.value})}})))),a.createElement("div",null,a.createElement(a.Fragment,null,a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},r?r.formatMessage({id:"common.save",defaultMessage:"Spara"}):"Spara"," "),s&&a.createElement("a",{tabIndex:1,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.delete()}},r?r.formatMessage({id:"common.remove",defaultMessage:"Ta bort"}):"Ta bort"))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(55),s=n(6),o=n.n(s),i=function(e){function t(t,n){var a=this,s=n();return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans-ks",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t;return r.d(this,function(n){return e=this.startDate&&this.startDate.valueOf()||o()().valueOf(),t=this.endDate&&this.endDate.valueOf()||o()().valueOf(),[2,{from:e,to:t,role:"USER"}]})})}})||this}return r.c(t,e),t.prototype.refreshData=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=r.f(e,2),this.startDate=t[0],this.endDate=t[1],[4,this.mem.refreshFromServer()];case 1:return n.sent(),[2]}})})},t}(a.a)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(6),o=n.n(s);const i=6e4;var u,l=n(2);function c(e){e.id;var t=e.dayStart,n=e.startMoment,s=e.endMoment,c=e.text,d=e.location,m=e.description,p=e.width,f=e.pos,h=e.locale,g=e.zoom,v=e.htmlLink,b=e.className,k=o()(n).diff(t)/i*g,y=o()(s).diff(n)/i*g,E={hour:"numeric",minute:"2-digit"},w=n.toDate().toLocaleTimeString(h,E),T=s.toDate().toLocaleTimeString(h,E);return a.createElement("div",{className:"dayviewevent "+b,style:{position:"absolute",boxSizing:"border-box",top:k,left:(f||0)+"%",width:(p||100)+"%",height:y,maxHeight:y,overflow:"hidden"},title:w+" - "+T+" "+c+(d?"\n"+Object(l.a)(u||(u=r.e(["Plats: ",""],["Plats: ",""])),d):"")+(m?"\n"+m:"")},a.createElement("a",{className:"event-title",href:v,target:"calendar-event"},c),a.createElement("p",{className:"event-period"},w," - ",T),d&&a.createElement("p",{className:"event-location"},d),m&&a.createElement("p",{className:"event-description"},m))}function d(e){for(var t=e.dayStart,n=e.dayEnd,r=60*e.zoom,s=o()(t).hour(),i=o()(n).hour(),u=[],l=s;l<=i;++l)u.push(l);return a.createElement("div",null,u.map(function(e){return a.createElement("div",{key:e,className:"timeline",style:{width:"100%",boxSizing:"border-box",margin:r/2+"px 0 0 0",height:r/2}})}))}function m(e){var t=e.dayStart,n=e.dayEnd,s=e.events,u=e.locale,m=e.zoom,p=(e.isLastCall,o()(n).diff(t)/i*m),f=function(e,t){var n=[];return e.forEach(function(e,t){var a,s=n.filter(function(t){return t.startMoment&&t.endMoment&&t.startMoment<=e.startMoment&&t.endMoment>e.startMoment}),o=s.concat(Object(l.k)(s.map(function(e){return e.prevOverlaps})));(o=Object(l.j)(o,function(e){return e.index})).sort(Object(l.g)("startMoment"));var i=0;o.forEach(function(e,t){t%4==0&&(a=Math.max(25,Math.round(100/Math.max(o.length-t+1,1))),i=0),e.width=a,e.className=(e.className||"").split(" ").filter(function(e){return"splitted"!==e}).concat("splitted").join(" "),e.pos=i,i+=a}),n.push(r.a({},e,{index:t,pos:i,width:a,className:a<100?e.className?e.className+" splitted":"splitted":e.className,prevOverlaps:o}))}),n}(s);return a.createElement("div",{className:"dayview",style:{top:0,height:p,maxHeight:p,position:"relative",overflow:"hidden"}},a.createElement(d,{dayStart:t,dayEnd:n,zoom:m}),f.map(function(e){return a.createElement(c,{key:e.id,id:e.id,className:e.className,dayStart:t,startMoment:e.startMoment,endMoment:e.endMoment,text:e.text,location:e.location,description:e.description,width:e.width,pos:e.pos,locale:u,zoom:m,htmlLink:e.htmlLink})}))}function p(e){for(var t=e.startHour,n=e.endHour,r=e.locale,s=60*e.zoom,i=[],u=t;u<=n;++u)i.push(u);return a.createElement("div",{className:"hourmarker",style:{position:"relative",left:0,top:0,overflow:"visible",height:(n-t)*s}},i.map(function(e,t){var n=t*s;return a.createElement("span",{key:e},a.createElement("div",{style:{position:"absolute",left:0,top:n,marginTop:"-4px",padding:0}},o()().hour(e).minute(0).toDate().toLocaleString(r,{hour:"2-digit",minute:"2-digit"})))}))}function f(e){var t=e.status,n=e.error;return t||n?a.createElement("div",{className:"statusbar"},n?a.createElement("p",{className:"error"},""+n):a.createElement("p",{className:"status"},t)):null}var h=n(17),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.firstDay,n=e.startHour,r=e.endHour,s=e.numDays,i=e.events,u=e.locale,c=e.zoom,d=e.status,h=e.error,g=this.context.intl,v=[],b=o()(t),k=function(e){var t=o()(b).hour(n),a=o()(b).hour(r),s=o()(b).format("yyyy-MM-DD"),c=o()(t).startOf("day").valueOf()===o()().startOf("day").valueOf();v.push({name:Object(l.d)(t.toDate().toLocaleString(u,{weekday:"long",day:"numeric",month:"short"})),dayStart:t,dayEnd:a,isToday:c,events:i.filter(function(e){return e.start&&e.end&&e.start.dateTime&&e.end.dateTime&&(o()(e.start.dateTime).isBetween(t,a)||o()(e.end.dateTime).isBetween(t,a))}).map(function(e){return Object(l.f)(e,{startMoment:o()(e.start.dateTime),endMoment:o()(e.end.dateTime)})}).sort(function(e,t){return e.startMoment.valueOf>t.startMoment.valueOf?1:e.startMoment<t.startMoment?-1:0}),fullDayEvents:i.filter(function(e){return e.start&&e.end&&e.start.date&&e.end.date&&e.start.date<=s&&e.end.date>s}).map(function(e){return Object(l.f)(e,{startDate:e.start.date,endDate:e.end.date})})}),b=o()(b).add(1,"days")},y=0;y<s;++y)k();return a.createElement("div",{className:"vemendo-weekview"},a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",{style:{border:0}}),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement("p",{className:"dayname"},e.name))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement("p",{className:"week-number"},g.formatMessage({id:"calendar.weekNumber",defaultMessage:"V{weekNumber}"},{weekNumber:o()(t).week()}))),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},e.fullDayEvents.map(function(e){var t=e.id,n=e.text,r=e.location,s=e.description,o=e.htmlLink,i=e.className;return a.createElement("div",{key:t,className:"dayviewevent full-day "+i,title:n+(r?"\n"+g.formatMessage({id:"calendar.fullDayEventLocation",defaultMessage:"Plats: {location}"},{location:r}):"")+(s?"\n"+s:"")},a.createElement("a",{className:"event-title",href:o,target:"calendar-event"},n),r&&a.createElement("p",{className:"event-location"},r),s&&a.createElement("p",{className:"event-description"},s))}))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement(p,{startHour:n,endHour:r,locale:u,zoom:c})),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement(m,{key:e.dayStart.toISOString(),dayStart:e.dayStart,dayEnd:e.dayEnd,events:e.events,locale:u,zoom:c,isLastCall:""==d})," ")})),(d||h)&&(!h||"UnauthorizedError"!==h.name)&&a.createElement("tr",null,a.createElement("td",{style:{border:0}}),a.createElement("td",{style:{border:0},colSpan:s},a.createElement(f,{status:d,error:h}))))))},t.contextType=h.a,t}(a.Component),v=function(e){function t(t){var n=e.call(this,"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest")||this;return n.setBearerProvider(t),n}return r.c(t,e),t.prototype.listCalendars=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,this.ensureInited()];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,gapi.client.calendar.calendarList.list({})];case 3:return[2,e.sent().result.items];case 4:throw e.sent().error;case 5:return[2]}})})},t.prototype.batchEvents=function(e){var t=e.calendarList,n=e.timeMin,a=e.timeMax;return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:r.sent();try{return e=gapi.client.newBatch(),t.forEach(function(t){e.add(gapi.client.calendar.events.list({calendarId:t.id||"primary",timeMin:n&&new Date(n).toISOString(),timeMax:a&&new Date(a).toISOString(),showDeleted:!1,singleEvents:!0,fields:"items/id,items/start,items/end,items/summary,items/location,items/htmlLink,items/description",maxResults:2500,orderBy:"startTime"}),{id:t.id})}),[2,e.then(function(e){var n={};for(var r in t){var a=t[r].id,s=e.result[a].result.items;n[a]={calendar:t[r],events:s}}return n})]}catch(e){throw e.error}return[2]}})})},t}(n(78).a),b=n(81);var k=n(3);n.d(t,"a",function(){return y});var y=function(e){function t(t){var n=e.call(this,t)||this,r=t.firstDay,a=n.props,s=a.initialStartHour,o=a.initialEndHour,i=a.initialZoom;n.state={firstDay:r,startHour:s,endHour:o,zoom:i,calendars:{},calendarsBeingLoaded:[],status:"Loading calendars... (authenticating...)",error:null};var u=(t.env||k.a).googleTokenProvider;return n.gcal=new v(u),n.gcal.ensureInited().then(function(){return n.loadData(r)}).catch(function(e){n.handleError(e)}),n}return r.c(t,e),t.prototype.handleError=function(e){e||(e="Unknown error"),this.setState({error:e}),console.error(e.stack||e)},t.prototype.loadData=function(e){var t=this,n=this.props.numDays,r=this.context.intl;return this.setState({firstDay:e,calendars:{},calendarsBeingLoaded:[],error:null,status:r.formatMessage({id:"calendar.loadingCalendar",defaultMessage:"Loading calendars... (listing...)"})}),this.gcal.listCalendars().then(function(a){a=a.filter(function(e){return function(e){var t=e.summary||"",n=/owner/gi.test(e.accessRole),r=!!e.primary,a=/classroom/gi.test(e.id),s=/holiday/gi.test(e.id);return r||a||s||/schema/gi.test(t)&&n}(e)}),
//!/Week Numbers/ig.test(c.summary)
t.setState({status:r.formatMessage({id:"calendar.loadCalendarEvents",defaultMessage:"Load calendar events..."})}),t.gcal.batchEvents({calendarList:a,timeMin:o()(e).startOf("day"),timeMax:o()(e).add(n,"days").endOf("day")}).then(function(e){t.setState({calendars:e,status:""})})})},t.prototype.navigateToPreviousWeek=function(){var e=this;this.loadData(o()(this.state.firstDay).add(-1,"week")).catch(function(t){e.handleError(t)})},t.prototype.navigateToNextWeek=function(){var e=this;this.loadData(o()(this.state.firstDay).add(1,"week")).catch(function(t){e.handleError(t)})},t.prototype.render=function(){var e=this,t=this.props.numDays,n=this.context.intl,r=this.state,s=r.firstDay,i=r.startHour,u=r.endHour,c=r.zoom,d=r.calendars,m=r.status,p=r.error,f=Object.keys(d).map(function(e){return d[e]}).map(function(e){var t=e.calendar,n=e.events,r="Skolschema"===t.summary&&"Synchronized"===t.description,a=/holiday/.test(t.id),s=(/classroom/.test(t.id),[]);return t.colorId&&s.push("gcal-palette-"+t.colorId),r&&s.push("course-event"),a&&s.push("holiday-event"),n.map(function(e){return{id:e.id,start:e.start,end:e.end,text:e.summary,location:e.location,description:e.description,htmlLink:e.htmlLink,className:(r&&e.summary?s.concat(Object(b.a)("course-event-",e.summary)):s).join(" ")}})}),h=Object(l.k)(f);return a.createElement("div",{style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"btn-toolbar week-navigation"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.navigateToPreviousWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.navigateToNextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))),a.createElement("div",{className:"btn-group"},n.formatMessage({id:"calendar.currentDate",defaultMessage:"Vecka {week}, {year}"},{week:o()(s).week(),year:o()(s).year()}))),a.createElement(g,{locale:n.locale,firstDay:s,startHour:i,endHour:u,numDays:t,zoom:c,events:h,status:m,error:p}))},t.contextType=h.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(46),o=n(22),i=n(6),u=n.n(i),l=n(12),c=n(65),d=n(5),m=function(e){function t(t){var n=e.call(this,t)||this;return n.state={description:t.note?t.note.description:"",color:t.note?t.note.color:"yellow"},n}return r.c(t,e),t.prototype.delete=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,o;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,e.weekDate,t=e.courseName,n=e.weekPlan,e.note,a=e.closeDialog,s=e.env,o=this.state,o.description,o.color,a(),1!==Object.keys(n.plans).length?[3,2]:[4,s.kgTermPlannerRepo.delete([n.id])];case 1:return r.sent(),[3,4];case 2:return[4,s.kgTermPlannerRepo.update([n],function(e){delete e.plans[t]})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,o,i,u,l,c;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,t=e.weekDate,n=e.courseName,a=e.weekPlan,e.note,s=e.closeDialog,o=e.env,i=this.state,u=i.description,l=i.color,s(),0==u.length?[2]:a?[4,o.kgTermPlannerRepo.update([a],function(e){return e.plans[n]={description:u,color:l}})]:[3,2];case 1:return r.sent(),[3,4];case 2:return(c={})[n]={description:u,color:l},[4,o.kgTermPlannerRepo.insert([{id:Object(d.h)(),dateTime:t,plans:c}])];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.weekNumber,r=t.courseName,s=(t.weekPlan,t.note),o=t.env,i=this.state,u=i.description,l=i.color,c=o.tutored;return a.createElement("div",null,a.createElement("div",null,a.createElement("h2",null,"HÃ¤ndelse fÃ¶r vecka ",n," och ",r),a.createElement("hr",null),a.createElement("div",{className:"align-table"},a.createElement("div",null,"Beskrivning:"),a.createElement("div",{className:"fullWidth"},a.createElement("textarea",{autoFocus:!0,value:u,disabled:c,onChange:function(t){return e.setState({description:t.target.value})}}))),a.createElement("div",{className:"align-table"},a.createElement("div",null,"FÃ¤rg:"),a.createElement("div",null,a.createElement("select",{value:l,disabled:c,onChange:function(t){return e.setState({color:t.target.value})}},a.createElement("option",{value:"yellow"},"Gul"),a.createElement("option",{value:"yellowLight"},"Ljusgul"),a.createElement("option",{value:"cyan"},"GrÃ¶n"),a.createElement("option",{value:"cyanLight"},"LjusgrÃ¶n"),a.createElement("option",{value:"purple"},"Lila"),a.createElement("option",{value:"purpleLight"},"Ljuslila"),a.createElement("option",{value:"red"},"RÃ¶d"),a.createElement("option",{value:"redLight"},"Rosa"))))),a.createElement("div",null,c?a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.props.closeDialog()}},"Avbryt"):a.createElement(a.Fragment,null,a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},"Spara"),s&&a.createElement("a",{tabIndex:1,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.delete()}},"Ta bort"))))},t}(a.Component),p=n(2),f=n(40),h=n(152),g=n(25);n.d(t,"a",function(){return v});var v=function(e){function t(t){var n=e.call(this,t)||this,r=new Date;return n.state={now:r,courses:[],weekPlans:[],isLoadingCourses:!0,isLoadingWeekPlans:!0,dialogs:[]},n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.loadEDSCourses(),this.props.env.kgTermPlannerRepo.mem.subscribe(this.updateWeekPlans)},t.prototype.componentWillUnmount=function(){this.props.env.kgTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e){this.setState({weekPlans:e,isLoadingWeekPlans:!1})},t.prototype.loadEDSCourses=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,,2,3]),e=Object(o.c)(u()(this.state.now)),t=new s.a(e).period,a=p.j,[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return n=a.apply(void 0,[r.sent(),function(e){return e.name}]),this.setState({courses:n}),[3,3];case 2:return this.setState({isLoadingCourses:!1}),[7];case 3:return[2]}})})},t.prototype.onNoteClick=function(e,t,n,r,s){var o=this;this.openDialog(a.createElement(m,{weekNumber:e,weekDate:t,courseName:n,weekPlan:r,note:s,env:this.props.env,closeDialog:function(){return o.closeDialog()}}))},t.prototype.onTutorClick=function(e,t){var n=this;this.openDialog(a.createElement(h.a,{weekNumber:t,comment:e.value,updateData:function(t){return n.updateTutorNoteField(e,t)},deleteNoteData:function(){return n.deleteTutorNoteField(e.id)},closeDialog:function(){return n.closeDialog()}}))},t.prototype.deleteTutorNoteField=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.props.env.kgTermPlannerRepo.delete([e])];case 1:return t.sent(),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}})})},t.prototype.updateTutorNoteField=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if((e&&e.value||"")===t)return[2];n.label=1;case 1:return n.trys.push([1,3,,4]),e.value=t,e.acl=[new d.b("tutorFor",this.props.env.currentUser.mail,"S").toString(),new d.b("email",this.props.env.currentUser.mail,"R").toString()],[4,this.props.env.kgTermPlannerRepo.upsert(e,function(e){return e.value=t})];case 2:return[2,n.sent()];case 3:return n.sent(),[3,4];case 4:return[2]}})})},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.render=function(){for(var e=this,t=this.state,n=t.courses,s=t.now,i=t.isLoadingCourses,m=t.isLoadingWeekPlans,p=t.weekPlans,h=t.dialogs,v=i||m,b=[],k=[],y=Object(o.c)(u()(s)),E=r.f(Object(o.d)(s,"AT"===y.term),2),w=E[0],T=E[1],N=r.f(Object(o.b)(y.term),2),C=N[0],D=N[1],S=g.b.kgTutorComment,O=p.filter(function(e){return!e.type}),M=p.filter(function(e){return"tutor-note"===e.type}),x=function(e){var t=e.week(),n=e.year(),r=Object(f.a)(n,t);if(t>=C&&t<=D){var a=O.filter(function(e){return e.dateTime>=r.notBefore&&e.dateTime<=r.notAfter})[0],s=M.filter(function(e){return e.dateTime>=r.notBefore&&e.dateTime<=r.notAfter})[0],o=e.clone().startOf("week").valueOf();b.push({weekNumber:t,weekDate:o,weekPlan:a}),k.push({weekNumber:t,tutorValue:s||{value:"",dateTime:o,id:Object(d.h)(),type:"tutor-note"}})}},L=w.clone();L.valueOf()<T.valueOf();L=L.clone().add(1,"week").startOf("week"))x(L);return a.createElement("div",{className:"ked_boxed"},a.createElement("h4",null,"Terminsplanering"),a.createElement("hr",null),v?a.createElement(l.a,null):0===n.length?a.createElement("div",null,"Terminsplaneraren aktiveras nÃ¤r du skrivits in pÃ¥ dina kurser"):a.createElement("table",{className:"termplanner-table zebra"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Vecka"),n.map(function(e,t){return a.createElement("th",{key:t,className:"kgCourseHeader"},e.name)}),S&&a.createElement("th",{className:"tutorHeader"}))),a.createElement("tbody",null,b.map(function(t,r){var s=t.weekNumber===u()().week(),o=k&&k.find(function(e){return e.weekNumber===t.weekNumber});return a.createElement("tr",{key:r,className:s?"currentWeek":""},a.createElement("td",null,t.weekNumber),n.map(function(n,r){var s=t.weekPlan&&t.weekPlan.plans[n.name];return a.createElement("td",{key:r,className:s?"courseNote note-color-"+s.color:"courseNote","data-tooltip":s&&s.description,title:s&&s.description,onClick:function(){return e.onNoteClick(t.weekNumber,t.weekDate,n.name,t.weekPlan,s)}},s?a.createElement("i",{className:"fas fa-align-center"}):"")}),S&&(e.props.tutored?a.createElement("td",{key:r,onClick:function(){return e.onTutorClick(o.tutorValue,t.weekNumber)},className:"tutorCell"},o.tutorValue.value?a.createElement("div",{key:r,"data-tooltip":o.tutorValue.value},a.createElement("i",{className:"fas fa-comment-dots"})):a.createElement("div",{key:r},a.createElement("i",{className:"fas fa-comment-medical"}))):o.tutorValue.value?a.createElement("td",{className:"tutorCell"},a.createElement("div",{"data-tooltip":o.tutorValue.value},a.createElement("i",{className:"far fa-comment-dots"}))):a.createElement("td",null)))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",{key:"points"},"PoÃ¤ng"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.credits)})),a.createElement("tr",null,a.createElement("th",null,"BetygsmÃ¥l"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.periodGoalGrade)})))),a.createElement(c.a,{dialogs:h,popDialog:function(){return e.setState({dialogs:h.slice(0,h.length-1)})}}))},t}(a.Component)},,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(0),a=n(155),s=n(109);function o(){return r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0})}})}},function(e,t,n){"use strict";var r=n(1),a=n(3),s=n(0),o=n.n(s),i=n(2),u=n(12),l=n(139),c=n(7),d=n(5),m=n(46),p=n(20),f=n(153),h=n(55),g=n(22),v=function(e){function t(t,n){var a=this,s=n(),o=new Date,i=r.f(Object(g.d)(o,o.getMonth()>=7),2),u=i[0],l=i[1];return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){return r.d(this,function(e){return[2,{from:u.startOf("week").add(-2,"days").toDate().valueOf(),to:l.startOf("week").add(5,"days").toDate().valueOf(),role:"USER"}]})})}})||this}return r.c(t,e),t}(h.a),b=new v(function(){return a.a.kedBackendClient},function(){return a.a.currentUser});a.a.kgTermPlannerRepo=b;var k=n(30);function y(e,t){return r.b(this,void 0,void 0,function(){function n(t,n,a){var s=null;return{getBearer:function(){return s||this.refreshBearer()},refreshBearer:function(){return s=function(){return r.b(this,void 0,void 0,function(){var s,o,i,u;return r.d(this,function(r){switch(r.label){case 0:return[4,t.get(n,a)];case 1:return 200!==(s=r.sent()).status?[3,3]:[4,s.json()];case 2:return[2,r.sent()];case 3:return o=d.c.bind,i=[void 0,s.status],u="Could not retrieve tutor token for "+e+". Error Message: ",[4,s.text()];case 4:throw new(o.apply(d.c,i.concat([u+r.sent()])))}})})}()}}}var s,o,i,u,l,h;return r.d(this,function(r){switch(r.label){case 0:return s={mail:e,displayName:t,roles:["USER"],school:a.a.currentUser.school,tutorFor:e},o=n(a.a.kedBackendClient.http,"tutor/token",{userEmail:e}),i=new d.d(p.c,o,c.b.KED_API_URL),u=n(i.http,"tutor/convert-token/google"),l=new m.b(p.c,c.b.EDS_API_URL,o,function(){return e}),(h={currentUser:s,bearerProvider:o,edsClient:l,googleTokenProvider:u,kedBackendClient:i,tutored:!0}).ksTermPlannerRepo=new f.a(function(){return i},function(){return s}),h.kgTermPlannerRepo=new v(function(){return i},function(){return s}),h.userTasksRepo=new k.a(function(){return i},function(){return s}),[4,o.getBearer().catch(function(e){console.error(e)})];case 1:return r.sent(),[2,h]}})})}n.d(t,"a",function(){return E});var E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,students:[]},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,5,6]),[4,a.a.edsClient.getTeacherTutorStudents()];case 1:return(e=r.sent()).sort(Object(i.h)(["lastName","firstName"])),t=e.length>0?e.map(function(e){return{mail:e.email,displayName:e.firstName+" "+e.lastName}}):[a.a.currentUser],[4,this.setState({students:t})];case 2:return r.sent(),[3,6];case 3:return n=r.sent(),console.error("Could not list tutor students",n),[4,this.setState({students:[a.a.currentUser]})];case 4:return r.sent(),[3,6];case 5:return this.setState({isLoading:!1}),[7];case 6:return[2]}})})},t.prototype.onSelectUser=function(e){var t=this.state.students.filter(function(t){return t.mail===e})[0],n=r.a({},t,{roles:["USER"]});l.a.setNewEnv(n,function(){return y(e,e)})},t.prototype.render=function(){var e=this,t=this.state,n=t.isLoading,r=t.students;return n?o.a.createElement(u.a,null):o.a.createElement("div",{className:"tutors-select"},o.a.createElement("select",{onChange:function(t){return t.target.value&&e.onSelectUser(t.target.value)}},o.a.createElement("option",{value:""},"VÃ¤lj elev"),r.map(function(e){return o.a.createElement("option",{key:e.mail,value:e.mail},e.displayName," (",e.mail,")")})))},t}(o.a.Component)},,,,,,,function(e,t,n){"use strict";var r=n(7);r.b.KED_LOCALE="sv",r.b.KED_SCHOOL_LOCALE="sv"},,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r,a=n(1),s=n(0),o=n(2),i=n(3),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assessments:[],error:null,loading:!1},n}return a.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return a.b(this,void 0,void 0,function(){var e,t;return a.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,i.a.edsClient.getLatestAssessments(this.props.limit)];case 2:return e=n.sent(),this.setState({assessments:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=this.state.assessments.some(function(e){return!!e.gradeName});return s.createElement("div",{className:"ked_boxed"},s.createElement("h4",null,Object(o.a)(r||(r=a.e(["Senaste bedÃ¶mningar"],["Senaste bedÃ¶mningar"])))),s.createElement("hr",null),s.createElement("ul",{className:"latest-assesments zebra"},this.state.assessments.map(function(t,n){return s.createElement("li",{key:n},e&&""!=t.gradeName&&s.createElement("span",{className:"grade pill pull-right"},t.gradeName),s.createElement("span",{className:"date pill pull-left"},t.publishDateTime.substr(0,10)),t.courseName==t.courseUnitName?s.createElement("h5",null,s.createElement("strong",null,t.courseName)):s.createElement("h5",null,s.createElement("strong",null,t.courseName)," / ",s.createElement("em",null,t.courseUnitName)),s.createElement("br",null),s.createElement("p",null,t.text))})))},t}(s.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(0),a=n(155),s=n(3);function o(){return r.createElement(a.a,{env:s.a,tutored:!1})}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(138),s=n(109),o=n(17);function i(e){var t=e.intl;return r.createElement(o.a.Provider,{value:{intl:t}},r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0,initialDate:new Date})}}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(69),o=n(13),i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courses:[],isLoading:!0},n.updateHiddenCoursesState=n.updateHiddenCoursesState.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){s.a.subscribe(this.updateHiddenCoursesState,{fullCourse:!1})},t.prototype.updateHiddenCoursesState=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.componentWillUnmount=function(){s.a.unsubscribe(this.updateHiddenCoursesState)},t.prototype.getCourseUrl=function(e){return Object(o.f)(this.props.viewCourseUrl,{courseId:e})},t.prototype.render=function(){var e=this,t=(this.props.viewCourseUrl,this.state),n=t.isLoading,r=t.error,s=(t.courses,this.state.courses.filter(function(e){return e.visible}));return a.createElement(a.Fragment,null,n?a.createElement("li",{className:"lvl2 header"},a.createElement("a",null,"Laddar...")):r?a.createElement("li",{className:"lv12"},a.createElement("a",null,"Kunde inte ladda kurser.")):s.map(function(t){var n=t.name,r=t.id;return a.createElement("li",{key:r,className:"lvl2"},a.createElement("a",{href:e.getCourseUrl(r)},n))}))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n.n(a),o=n(55),i=n(3),u=i.a.weekNotesRepo,l=function(e){function t(){var t=e.call(this,{getClient:function(){return i.a.kedBackendClient},optimistic:!1,table:"notes",user:i.a.currentUser?i.a.currentUser.mail:"",getQueryOptions:function(){return r.b(t,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}})||this;return t}return r.c(t,e),t}(o.a);u||(u=i.a.weekNotesRepo=new l);var c=n(82),d=n(5),m=n(56),p=n(52),f=n(80),h=n(12);function g(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,o;return r.d(this,function(r){switch(r.label){case 0:return a=!1,s=setTimeout(function(){a=!0,n()},e),[4,t()];case 1:return o=r.sent(),a||clearTimeout(s),[2,o]}})})}var v=n(8),b=n(17),k=function(e){function t(t){var n=e.call(this,t)||this;return n.onChange=n.onChange.bind(n),n.autoSaver=new c.a(function(){return n.save()}),n.state={isLoading:!0,showLoadingProgress:!1,showSavingProgress:!1,everEdited:!1,notes:""},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.showProgressIfLoadingTakesTime(),u.mem.subscribe(this.onChange)},t.prototype.showProgressIfLoadingTakesTime=function(){var e=this;this.timeoutHandle=setTimeout(function(){return e.state.isLoading&&e.setState({showLoadingProgress:!0})},300)},t.prototype.componentWillUnmount=function(){u.mem.unsubscribe(this.onChange),this.autoSaver.stop(),clearTimeout(this.timeoutHandle)},t.prototype._save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:e=3,n.label=1;case 1:return this.isNotesEdited()&&e?[4,u.upsert(this.state.weekNote,function(e){e.content=t.state.notes})]:[3,4];case 2:n.sent(),n.label=3;case 3:return--e,[3,1];case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return this.state.showSavingProgress||this.state.isLoading||!this.isNotesEdited()?[3,8]:[4,this.setState({error:void 0})];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,4,6,8]),[4,g(300,function(){return t._save()},function(){return t.setState({showSavingProgress:!0})})];case 3:return n.sent(),[3,8];case 4:return e=n.sent(),console.error(e),[4,this.setState({error:this.context.intl.formatMessage({id:"common.errorSavingData",defaultMessage:"Kunde inte spara."})})];case 5:return n.sent(),[3,8];case 6:return[4,this.setState({showSavingProgress:!1})];case 7:return n.sent(),[7];case 8:return[2]}})})},t.prototype.isNotesEdited=function(){var e=this.state,t=e.weekNote,n=e.notes;return!!t&&n!==t.content},t.prototype.getTranslatedActions=function(e){var t=Object.assign({},"sv"===e.locale?p.a:f.a);return Object.keys(t).forEach(function(n){var r=p.a[n].title;t[n].title=e.formatMessage({id:"wysiwyg."+n,defaultMessage:r}),"image"===n&&(t[n].promptMsg=e.formatMessage({id:"wysiwyg.imagePromptMsg",defaultMessage:p.a[n].promptMsg}))}),t},t.prototype.onChange=function(e){var t=e.length>0?e[e.length-1]:{id:Object(d.h)(),dateTime:Date.now(),content:"",acl:[new d.b("email",i.a.currentUser.mail,"S")].map(function(e){return e.toString()})},n={weekNote:t,isLoading:!1,showLoadingProgress:!1};this.state.weekNote&&this.state.weekNote.id===t.id&&0!==e.length||(n.notes=t.content),this.setState(n)},t.prototype.render=function(){var e=this,t=this.state,n=t.notes,r=t.showLoadingProgress,a=t.isLoading,o=t.showSavingProgress,i=t.error,u=t.everEdited,l=this.context.intl;return s.a.createElement("div",null,s.a.createElement("div",{className:"ked_boxed kedNotepad"},s.a.createElement("h3",null,s.a.createElement(v.a,{id:"weekNotebook.title",defaultMessage:"Anteckningar"})),s.a.createElement(m.a,{actions:["bold","italic","underline","strikethrough","heading1","heading2","heading3","olist","ulist","outdent","indent","line"],defaultActions:this.getTranslatedActions(l),html:a?"<div></div>":n.substr(0,16384),onChange:!a&&function(t){e.setState({notes:t.substr(0,16384),everEdited:!0}),e.autoSaver.triggerChange(500)}}),s.a.createElement("hr",null),i?s.a.createElement("p",{className:"error"},i):r?s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.loading",defaultMessage:"Laddar..."}),s.a.createElement(h.a,null)):o?s.a.createElement(s.a.Fragment,null,s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.saving",defaultMessage:"Sparar..."})," Â  "),s.a.createElement(h.a,null)):this.isNotesEdited()?s.a.createElement(s.a.Fragment,null,"Â "):u?s.a.createElement(v.a,{id:"common.saved",defaultMessage:"Sparad"}):s.a.createElement(s.a.Fragment,null,"Â ")))},t.contextType=b.a,t}(s.a.Component);function y(e){var t=e.intl;return a.createElement(b.a.Provider,{value:{intl:t}},a.createElement(k,null))}n.d(t,"b",function(){return k}),n.d(t,"a",function(){return y})},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2),o=n(46),i=function(){return function(e){this.subjects=e.map(function(e){var t=e.periodGoals.map(function(e){return{period:new o.a(e.periodName),goal:e.gradeName}});return{name:e.courseUnitName,atGoal:t.filter(function(e){return"AT"===e.period.term}).map(function(e){return e.goal})[0],stGoal:t.filter(function(e){return"ST"===e.period.term}).map(function(e){return e.goal})[0],finalGoal:e.finalGoalGrade,strategies:e.strategyText}})}}(),u=n(3),l=function(){return function(e){var t={};e.forEach(function(e){return e.capabilities.forEach(function(e){return t[e.formName]=!0})});var n=Object.keys(t);this.columnHeaders=[{name:"FramtidsfÃ¶rmÃ¥ga",type:"header"},{name:"OmrÃ¥de",type:"header"}].concat(n.map(function(e){return{name:e,type:"year"}})),this.vtHts=Object(s.k)(n.map(function(e){return["HT","VT"]}));var r=[];e.forEach(function(e){var t=[{type:"ability",name:e.abilityName}],n={};e.capabilities.forEach(function(e){var a=[{type:"term",selected:!1!==e.htHasValue},{type:"term",selected:!1!==e.vtHasValue}];n[e.capabilityName]?t&&a.forEach(function(e){return t.push(e)}):(t.length>1&&(r.push(t),t=[]),n[e.capabilityName]=!0,t.push({type:"capability",name:e.capabilityName}),a.forEach(function(e){return t.push(e)}))}),t&&r.push(t)}),this.capabRows=r}}(),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loading:!1,data:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentFutureAbilities()];case 2:return e=n.sent(),this.setState({data:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=new l(this.state.data),t=e.columnHeaders,n=e.vtHts,r=e.capabRows;return a.createElement("div",null,a.createElement("h5",null,"FramtidsfÃ¶rmÃ¥gor"),a.createElement("div",{className:"partialEditStudyPlanViewMode"},a.createElement("table",{style:{width:"100%"},className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,t.map(function(e,t){var n=e.name;return"header"===e.type?a.createElement("th",{key:t,rowSpan:2},n):a.createElement("th",{key:t,colSpan:2},n)})),a.createElement("tr",{className:"header"},n.map(function(e,t){return a.createElement("th",{key:t},e)}))),a.createElement("tbody",null,r.map(function(e,t){return a.createElement("tr",{key:t,className:Math.floor(t/3)%2&&"tableOdd"},e.map(function(e,t){return"ability"===e.type?a.createElement("td",{key:t,rowSpan:3,className:"goalsSubject"},e.name):"capability"===e.type?a.createElement("td",{key:t,className:"goalsSubject"},e.name):e.selected?a.createElement("td",{key:t,className:"edsSelected"},a.createElement("div",{className:"markedItem"})):a.createElement("td",{key:t})}))})))))},t}(a.Component);n.d(t,"a",function(){return v});var d,m,p,f,h,g,v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loadingStudyPlans:!1,studyPlans:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loadingStudyPlans:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentGoals()];case 2:return e=n.sent(),this.setState({studyPlans:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loadingStudyPlans:!1}),[2]}})})},t.prototype.render=function(){var e=new i(this.state.studyPlans),t="gymnasium"!==(""+u.a.currentUser.schoolType).toLowerCase();return a.createElement("div",{className:"ked_boxed"},a.createElement("h4",null,Object(s.a)(d||(d=r.e(["MÃ¥l"],["MÃ¥l"])))),a.createElement("hr",null),a.createElement("table",{className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,Object(s.a)(m||(m=r.e(["Ãmne"],["Ãmne"])))),t&&a.createElement("th",null,Object(s.a)(p||(p=r.e(["HT"],["HT"])))),t&&a.createElement("th",null,Object(s.a)(f||(f=r.e(["VT"],["VT"])))),a.createElement("th",null,Object(s.a)(h||(h=r.e(["SlutmÃ¥l"],["SlutmÃ¥l"])))),a.createElement("th",null,Object(s.a)(g||(g=r.e(["Strategier"],["Strategier"])))))),a.createElement("tbody",null,e.subjects.map(function(e,n){return a.createElement("tr",{key:e.name,className:n%2&&"tableOdd"},a.createElement("td",{className:"goalsSubject"},e.name),t&&a.createElement("td",{className:"goalsTerm"},e.atGoal),t&&a.createElement("td",{className:"goalsTerm"},e.stGoal),a.createElement("td",{className:"goalsEnd"},e.finalGoal),a.createElement("td",null,e.strategies))}))),a.createElement("div",{className:"divider"}),a.createElement(c,null))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0);function s(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,fetch(e+"?nodeID="+t,{credentials:"same-origin"})];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()]}})})}var o=n(135),i=n(59),u=n(8),l=n(17);n.d(t,"a",function(){return d});var c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={data:null},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,s(this.props.apiPath,this.props.pageId)];case 1:return e=t.sent(),this.setState({data:e}),[2]}})})},t.prototype.render=function(){if(!this.state.data)return a.createElement("div",null);var e=this.state.data,t=e.moduleName,n=e.subject,r=e.commonTasks,s=e.learningGoals,i=e.step,u=this.props.intl,c=r.map(function(e){return{id:e.id,name:e.name,url:e.url,courseName:n.name,learningGoal:i&&s.length>0?t+" - Ã¶vergripande":t}}),d=s.map(function(e){return{name:e.name,learningTasks:e.tasks.map(function(t){return{id:t.id,name:t.name,url:t.url,courseName:n.name,learningGoal:e.name}})}});return i&&(c.forEach(function(e){return e.step=i}),d.forEach(function(e){return e.learningTasks.forEach(function(e){return e.step=i})})),a.createElement(l.a.Provider,{value:{intl:u}},a.createElement(o.a,{commonTasks:c,learningGoals:d}))},t}(a.Component),d=Object(i.a)(Object(u.d)(c))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(173),n(151),n(99),n(3)),s=n(0),o=n.n(s),i=[{moduleName:"Steg 22",subject:{name:"Spanska",course:{name:"Spanska",url:"/steg/spanska.4.4ae4e9d2159ef4e0120ad6d3.html"}},commonTasks:[],learningGoals:[{name:"Aktiviteter i hemmet",tasks:[{name:"Aktiviteter i hemmet hos en peruansk familj",url:"/steg/spanska/block5/steg22/uppgifter/aktiviteterihemmet/aktiviteterihemmethosenperuanskfamilj.4.4ae4e9d2159ef4e0120adb40.html"},{name:"Uppgift till aktiviteter i hemmet",url:"/steg/spanska/block5/steg22/uppgifter/aktiviteterihemmet/uppgifttillaktiviteterihemmet.4.4ae4e9d2159ef4e0120af887.html"}]},{name:"Familjeliv",tasks:[{name:"Vad pÃ¥gÃ¥r i din familj nu?",url:"/steg/spanska/block5/steg22/uppgifter/familjeliv/vadpagaridinfamiljnu.4.4ae4e9d2159ef4e0120b25e9.html"},{name:"Uppgift familjeliv",url:"/steg/spanska/block5/steg22/uppgifter/familjeliv/uppgiftfamiljeliv.4.4ae4e9d2159ef4e0120af73a.html"}]},{name:"Samtal om familjeliv",tasks:[{name:"Samtalsdokument familjeliv",url:"/steg/spanska/block5/steg22/uppgifter/samtalomfamiljeliv/samtalsdokumentfamiljeliv.4.4ae4e9d2159ef4e01209fe03.html"},{name:"Samtalskarta-familjeliv",url:"/steg/spanska/block5/steg22/uppgifter/samtalomfamiljeliv/samtalskartafamiljeliv.4.4ae4e9d2159ef4e0120af6fd.html"}]}]},{moduleName:"Teknik",subject:{name:"Teknik",course:{name:"TrÃ¥d 5",url:"/kurser/arskurs8/trad5.19.2d4f4005159f895477a15cc.html"}},commonTasks:[{name:"Tryck ",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/tryck.4.4ae4e9d2159ef4e01209dcde.html"},{name:"DiskussionsfrÃ¥gor till industriella revolutionen",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/diskussionsfragortillindustriellarevolutionen.4.4ae4e9d2159ef4e0120a6fab.html"},{name:"Hur fungerar en Ã¥ngmaskin",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/hurfungerarenangmaskin.4.4ae4e9d2159ef4e0120a1309.html"},{name:"Ãngmaskinens betydelse",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/angmaskinensbetydelse.4.4ae4e9d2159ef4e0120a3deb.html"}],learningGoals:[{name:"Identifiera och analysera Ã¥ngmaskinen utifrÃ¥n Ã¤ndamÃ¥lsenlighet och funktion,"},{name:"anvÃ¤nda teknikomrÃ¥dets begrepp och uttrycksform"},{name:"vÃ¤rdera konsekvenser av Ã¥ngmaskinen fÃ¶r individ, samhÃ¤lle och miljÃ¶, och"},{name:"analysera drivkrafter bakom teknikutveckling runt Ã¥ngmaskinen och hur tekniken har fÃ¶rÃ¤ndratsÃ¶ver tid."}]}],u=["testdata/learning-tasks/amnesintegrerad.json","testdata/learning-tasks/loopad.json","testdata/learning-tasks/steg-larandemal.json","testdata/learning-tasks/steg-matte.json","testdata/learning-tasks/vanlig-kurs.json"],l=n(145),c=n(6),d=n.n(c),m=n(154),p=n(180),f=n(175),h=n(176),g=n(165),v=n(138),b=n(177),k=n(62),y=n(181),E=n(178),w=n(128),T=n(179),N=n(166),C=n(109),D=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){return o.a.createElement("div",null,o.a.createElement(N.a,null),o.a.createElement(C.a,{tutored:!0,createComponent:function(e){return o.a.createElement(v.a,{key:e.currentUser.mail,env:e,tutored:!0,initialDate:new Date})}}),o.a.createElement(g.a,null),o.a.createElement(C.a,{tutored:!0,createComponent:function(e){return o.a.createElement(l.a,{key:e.currentUser.mail,env:e,viewCourseUrl:"https://www.svt.se"})}}),o.a.createElement(C.a,{tutored:!0,createComponent:function(e){return o.a.createElement(m.a,{env:e,firstDay:d()().startOf("week").weekday(1),initialStartHour:7,initialEndHour:18,initialZoom:.75,numDays:5})}}))},t}(o.a.Component),S={LatestAssessments:{component:f.a,props:function(){return{locale:navigator.language,limit:15}}},KSGoals:{component:p.a,props:function(){return{}}},KSTermPlanner:{component:v.a,props:function(){return{env:a.a,tutored:!1,initialDate:new Date}}},KSTermPlannerTutored:{component:b.a,props:function(){return{}}},KGTermPlanner:{component:h.a,props:function(){return{}}},KGTermPlannerTutored:{component:g.a,props:function(){return{}}},WeekPlanner:{component:k.a,props:function(){return{viewCourseUrl:"http://svt.se",env:a.a}}},TutorsView:{component:D,props:function(){return{}}},TutorsSelect:{component:N.a,props:function(){return{}}},Calendar:{component:m.a,props:function(){return{firstDay:d()().startOf("week").weekday(1),numDays:5,initialStartHour:7,initialEndHour:18,initialZoom:.75}}},LearningTasks:{component:y.a,props:function(){return{apiPath:localStorage.getItem("selectedLearningModuleUrl"),pageId:"dummy"}}},MyCourses:{component:E.a,props:function(){return{viewCourseUrl:"https://kg-test.sitevision.se/courseviewer"}}},ListCourses:{component:w.a,props:function(){return{viewCourseUrl:"https://kg-test.sitevision.se/courseviewer"}}},WeekNotes:{component:T.b,props:function(){return{}}}},O=n(11),M=n.n(O),x=n(117),L=n(8),j=n(59),P=n(17),I=function(e){function t(t){var n=e.call(this,t)||this,a=localStorage.getItem("selectedComponent")||Object.keys(S)[0],s=S[a].props();return n.state={selectedComponent:a,selectedLearningModule:parseInt(localStorage.getItem("selectedLearningModule")||"0"),selectedLearningModuleUrl:localStorage.getItem("selectedLearningModuleUrl")||"",selectedComponentReal:S[a].component,selectedCompProps:r.a({},s)},n}return r.c(t,e),t.prototype.componentDidUpdate=function(){this.renderTestComponent()},t.prototype.componentDidMount=function(){},t.prototype.renderTestComponent=function(){if(a.a.learningModuleTasks=i[this.state.selectedLearningModule],M()(this.componentArea).html(""),a.a.currentUser){var e=S[this.state.selectedComponent]||S[Object.keys(S)[0]];this.setState({selectedComponentReal:e.component,selectedCompProps:r.a({},e.props())})}},t.prototype.render=function(){var e=this,t=this.state.selectedComponentReal,n=this.props.intl;return a.a.currentUser?s.createElement(P.a.Provider,{value:{intl:n}},s.createElement("div",{className:"test-page"},s.createElement("div",{className:"header"},s.createElement("div",{className:"test-selects"},s.createElement("form",null,s.createElement("h4",null,s.createElement(L.a,{id:"test.pageDescription",defaultMessage:"Testsida fÃ¶r komponenter till nya startsidan"})),s.createElement("table",null,s.createElement("tbody",null,s.createElement("tr",null,s.createElement("td",null,s.createElement("label",{htmlFor:"testComponent"},s.createElement(L.a,{id:"test.chooseComponentLabel",defaultMessage:"Komponent"}))),s.createElement("td",null,s.createElement("select",{id:"testComponent",value:this.state.selectedComponent,onChange:function(t){e.setState({selectedComponent:t.target.value}),localStorage.setItem("selectedComponent",t.target.value),window.location.reload()}},Object.keys(S).map(function(e){return s.createElement("option",{key:e,value:e},e)})))),"LearningGoalsAndTasks"===this.state.selectedComponent&&s.createElement("tr",null,s.createElement("td",null,s.createElement("label",{htmlFor:"testLearningModule"},"Kursmodul")),s.createElement("td",null,s.createElement("select",{id:"testLearningModule",value:this.state.selectedLearningModule,onChange:function(e){localStorage.setItem("selectedLearningModule",e.target.value),window.location.reload()}},i.map(function(e,t){return s.createElement("option",{key:t,value:t},e.subject.course.name+"/"+e.subject.name+"/"+e.moduleName)})))),"LearningTasks"===this.state.selectedComponent&&s.createElement("tr",null,s.createElement("td",null,s.createElement("label",{htmlFor:"testLearningModuleUrl"},"Kursmodul")),s.createElement("td",null,s.createElement("select",{id:"testLearningModuleUrl",value:this.state.selectedLearningModuleUrl,onChange:function(e){localStorage.setItem("selectedLearningModuleUrl",e.target.value),window.location.reload()}},u.map(function(e,t){return s.createElement("option",{key:t,value:e},e)}))))))))),s.createElement("hr",null),s.createElement("div",{className:"componentRow"},s.createElement(t,r.a({},this.state.selectedCompProps)),s.createElement("div",{className:"componentArea",ref:function(t){return e.componentArea=t}}),s.createElement("div",{className:"week-planner"},"LearningTasks"===this.state.selectedComponent&&s.createElement(l.a,{viewCourseUrl:"http://www.svt.se/nyheter",env:a.a}))))):s.createElement(x.a,null)},t}(s.Component),U=Object(j.a)(Object(L.d)(I));t.default=U}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,