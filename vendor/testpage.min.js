var testpage=function(e){function t(t){for(var r,o,i=t[0],u=t[1],l=t[2],d=0,m=[];d<i.length;d++)o=i[d],a[o]&&m.push(a[o][0]),a[o]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(c&&c(t);m.length;)m.shift()();return s.push.apply(s,l||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,i=1;i<n.length;i++){var u=n[i];0!==a[u]&&(r=!1)}r&&(s.splice(t--,1),e=o(o.s=n[0]))}return e}var r={},a={6:0},s=[];function o(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=r,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var i=window.webpackJsonp_name_=window.webpackJsonp_name_||[],u=i.push.bind(i);i.push=t,i=i.slice();for(var l=0;l<i.length;l++)t(i[l]);var c=u;return s.push([288,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return o}),n.d(t,"k",function(){return u}),n.d(t,"g",function(){return l}),n.d(t,"h",function(){return c}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return p}),n.d(t,"n",function(){return f}),n.d(t,"l",function(){return h}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return y});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function o(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var i=[].concat;function u(e){return i.apply([],e)}function l(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function c(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var o=t[r],i=n[r];return o===i?0:null==o?-1:null==i?1:0===s.length?a(o,i):e(o,i,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function f(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function h(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],o=t(s),i=n[o];i?i.push(s):n[o]=[s]}return n}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function b(e,t){var n,a,s={};try{for(var o=r.h(t),i=o.next();!i.done;i=o.next()){var u=i.value;u in e&&(s[u]=e[u])}}catch(e){n={error:e}}finally{try{i&&!i.done&&(a=o.return)&&a.call(o)}finally{if(n)throw n.error}}return s}function k(e,t){var n=v(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function y(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var o=n[a];if(r[a]!==o)return!1;if(e[o]!==t[o])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(31);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(27);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,,function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"}),"Â ")}},function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(15);n.d(t,"a",function(){return o}),n.d(t,"c",function(){return u}),n.d(t,"e",function(){return l}),n.d(t,"d",function(){return c}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return p});var o=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function i(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function u(e,t){return i(e,t,"W")}function l(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function c(e,t){return e.roles.includes("ADMIN")||l(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,o=Object(s.b)(location.search),i=r.a({},o,{role:t,school:n}),u=Object(s.a)(i);a?location.href=""+a+u:(location.hash="#",location.search=u)}};function m(e){d.actAs(e)}function p(e,t){var n,a,i=Object(s.b)(location.search),u={};try{for(var l=r.h(o),c=l.next();!c.done;c=l.next()){var d=c.value;i[d]&&(u[d]=i[d])}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}var m=Object(s.a)(r.a({},u,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+m+e.substr(p):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return o}),n.d(t,"b",function(){return i}),n.d(t,"e",function(){return u});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function o(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function i(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),o=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[o++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function u(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],o=t(s);o!==s&&(n===e&&(n=e.slice()),n[r]=o)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return o}),n.d(t,"c",function(){return i});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],o=t[1];return a[n?s.toLowerCase():s]=o}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function o(e){return"?"+s(e)}function i(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(14),s=n(32),o=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,o){return r.b(this,void 0,void 0,function(){var i,u,l,c,d,m,p,f,h,g,v;return r.d(this,function(b){switch(b.label){case 0:return o&&"no-cache"===o.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),i=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),l=(u=this).authHeader,c=u.tokenInfo,d=u.bearerProvider,l||c||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=c=b.sent(),b.label=2;case 2:return c?c.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=c=b.sent(),b.label=4;case 4:l="Bearer "+c.token,b.label=5;case 5:return l&&(n.Authorization=l),f=this.baseUrl+e+(i?"?"+i:""),[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 6:return 401==(h=b.sent()).status&&this.bearerProvider?(g=h.headers.get("www-authenticate"),console.log("Got "+h.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(v=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return v.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(f,r.a({},this.fetchOptions,{headers:n,method:t},o))];case 8:h=b.sent(),b.label=9;case 9:return[2,h]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),i=function(){function e(e,t,n,r,s,i,u){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=i,this.tokenQuery=u,this.tokenInfo={token:null,expires:0},this.client=new o(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),u=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function l(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var c=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return i}),n.d(t,"b",function(){return u}),n.d(t,"j",function(){return l}),n.d(t,"f",function(){return o}),n.d(t,"c",function(){return c});var d=function(){function e(e,t,n){this.http=new o(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(c,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,o,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(o=c.bind,i=[void 0,s.status],[4,s.text()]);case 2:throw new(o.apply(c,i.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,o,i;return r.d(this,function(u){switch(u.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=u.sent()).status?[3,3]:(o=c.bind,i=[void 0,s.status],[4,s.text()]);case 2:throw new(o.apply(c,i.concat([u.sent()])));case 3:return[4,s.json()];case 4:return[2,u.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(c,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=c.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(c,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,o=e.backgroundColor,i=e.progressColor,u=[];if(n>s)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var l=1;l<=n;l++)u.push(a.createElement("svg",{key:l},a.createElement("circle",{className:"circle-chart-background",fill:l>r?o:i,cx:"8",cy:"8",r:"8"})));return u},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return o});var o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,o=t.className,i=t.children,u=t.headerClassName,l=t.contentClassName,c=t.displayProgress,d=t.progressData,m=t.inactivated,p=t.inactivatedRender,f=this.state.headerOpen;return m?"titleAndChildren"===p?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,n),a.createElement(a.Fragment,null,i)):a.createElement(a.Fragment,null,i):a.createElement("div",{className:(o||"")+" openClose"+(f?" open":"")},a.createElement("div",{className:"openHeader"+(u?" "+u:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),c&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(l?" "+l:"")},i))},t}(a.Component)},function(e,t,n){"use strict";var r=n(4),a=n(18),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),o=n(14);function i(e){e.resources||(e.resources=[])}function u(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return i(e)})}})}(e,n);break;case"tasks":i(e)}}var l=sessionStorage.getItem("redir-hash");if(l)try{var c=JSON.parse(l),d=c.time,m=c.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return u(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return u(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var p=new s,f=Date.now(),h=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(o.a)(this.getBearer.bind(this)),this.refreshBearer=Object(o.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,o;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-f>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,o=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=o.apply(this,[r.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},v=function(e){function t(t,n,r){var a="string"!=typeof n?n:new h(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return p}),n.d(t,"b",function(){return h}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return v})},,function(e,t,n){"use strict";n.d(t,"b",function(){return o}),n.d(t,"d",function(){return i}),n.d(t,"c",function(){return u}),n.d(t,"a",function(){return l});var r=n(1),a=n(6),s=n.n(a);function o(e){return"AT"===e?[32,51]:[1,25]}function i(e,t){var n=null;n=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var r=s()(n.toString(),"YYYY");return 1!=r.week()&&(r=r.clone().add(1,"week")),t?[s()(r.clone()).week(32).startOf("week"),s()(r.clone()).week(51).endOf("week")]:[s()(r.clone()),s()(r.clone()).week(25).endOf("week")]}function u(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function l(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},,,function(e,t,n){"use strict";var r=n(58);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b})},,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(35),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(55),s=n(3),o=n(6),i=n.n(o),u=n(75),l=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(u.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(i()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return i()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),c=n(5),d=n(40);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var m=s.a.userTasksRepo,p=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,o,u;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,l.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,o=i()(s).week(),[2,{from:(u=Object(d.a)(i()(s).year(),o)).notBefore,to:u.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,u,l,c;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,o=a(),u=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},u,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:i()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:i()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return l=r.sent(),0===(c=l.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&c.push(e),[4,this.update(c,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(r){switch(r.label){case 0:return(n=this.persistedState)?[3,2]:[4,l.load(this.options.user)];case 1:n=r.sent(),r.label=2;case 2:return(a=new l(n)).weekDate=t?i()(e).valueOf():i()(e).startOf("week").valueOf(),a.save(),this.persistedState=a,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(c.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new c.b("email",t.getCurrentUser().mail,"S"),new c.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);m||(m=s.a.userTasksRepo=new p(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(33).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(34),s=n(45),o=n(37),i=n(50),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,o){r=!0,e=a,t=s,s&&n?n(null,s,o):n&&n(a,null,o)});if(r){var s=i.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var o=s.subscriptions,u=s.observer;return o.push(a),n=u,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new o.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],o={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),s[0]=e,null!==s[1]&&t(s,null,o)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,o)),s[1]=e,null!==s[0]&&t(s,null,o)}),o})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,o,i){if(a=i,r&&(r.unsubscribe(),r=null),o)t(null,o,s);else try{var u=e(n);u&&"function"==typeof u.subscribe?r=u.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(u,null,a)}catch(o){t(null,o,a)}}),s})},t}(a.a);u.prototype.map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(34),s=n(45),o=n(33),i=n(32),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new i.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new o.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);u.prototype._map=Object(s.a)(u)},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r,a=n(1),s=n(0),o=n(2),i=function(e){var t=e.onClick,n=e.className,i=e.style,u=e.title;return s.createElement("div",{title:u||Object(o.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:i})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"c",function(){return o}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return u});var r=n(6),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function o(e){var t=a()(e).add(1,"week");return e.week()===e.weeksInYear()&&t.year()===e.year()?{adjusted:!0,nextDate:a()(e.year()+1+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function i(e){var t=a()(e).add(-1,"week");return 2===e.week()&&t.year()!==e.year()?{adjusted:!0,nextDate:a()(e.year()+"-01-01").toDate()}:{adjusted:!1,nextDate:t.toDate()}}function u(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},,,function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(22),o=n(6),i=n.n(o);var u=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(i()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),l=n(2),c=n(53),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return p}),n.d(t,"a",function(){return f});var m,p=function(){function e(t,n,s,o){var i=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=o;var u=function(e){return"function"==typeof i[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){u(e)&&(i[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(i[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),o={},i=e;i&&i!==Object.prototype;i=Object.getPrototypeOf(i))u(i);function u(t){Object.keys(t).forEach(function(i){!s.hasOwnProperty(i)&&n(i)&&(s[i]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var u=JSON.stringify(r.g([i],n)),l=o[u];if(void 0!==l){if(l.promise)throw l.promise;if(l.error)throw l.error;if(l.timeout>Date.now())return l.value}try{var c=t[i].apply(e,n).then(function(e){o[u]={timeout:Date.now()+a,value:e}}).catch(function(e){o[u]={timeout:Date.now()+a,error:e}});throw o[u]={timeout:Date.now()+a,promise:c},c}catch(e){if(e.then)throw e;o[u]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:u})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,o,i;return r.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,o.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw i=u.sent(),console.error("Error from EDS: "+i),new Error(Object(l.a)(m||(m=r.e(["Kunde tyvÃ¤rr inte ladda terminsmÃ¥l eller avklarade steg frÃ¥n EDS. FÃ¶rsÃ¶k igen senare..."],["Kunde tyvÃ¤rr inte ladda terminsmÃ¥l eller avklarade steg frÃ¥n EDS. FÃ¶rsÃ¶k igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,o;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,o=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,o.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(o){switch(o.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=o.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([o.sent()])));case 3:return[4,t.json()];case 4:return[2,o.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,o,u,l,d,m,p,f;return r.d(this,function(r){switch(e){case"en_sin":return[2,c.SouthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,c.NorthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=Object(s.d)(t,!0),o=Object(s.d)(t,!1),u=a[0],l=o[0],d=a[1],m=o[1],p={startDate:new Date(u.year(),u.month(),u.date()).toDateString(),endDate:new Date(u.year(),d.month(),d.date()).toDateString()},f={startDate:new Date(l.year(),l.month(),l.date()).toDateString(),endDate:new Date(l.year(),m.month(),m.date()).toDateString()},[2,{firstTerm:p,secondTerm:f,holidays:n}]}return[2]})})},e}(),f=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new u(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new u({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(35),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),o()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),o()}};function o(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},,function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Minska indrag",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Ãka indrag",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"VÃ¥grÃ¤t linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga lÃ¤nk",result:function(){var e=window.prompt("Ange lÃ¤nkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,s=window.prompt(this.promptMsg);if(s){var o=document.createElement("img");o.src=s,o.tabIndex=1,n=o,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),o.onfocus=t.onFocus,o.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(77),s=n(5),o=function(){function e(e){var t=this,n=e.table,s=e.getClient,o=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,o()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,i,u,l,c=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,o=n.table,i=a(),u=e.map(function(e){var n=c.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(u.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.do(function(e){return u.forEach(function(t){return e.put(o,t)})}).catch(function(n){return"http409"===n.name?i.list(o,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return i.do(function(e){return n.forEach(function(t){return e.put(o,t)})})}):Promise.resolve(s&&c.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return l=r.sent(),this.regenerateCacheBust(),u.forEach(function(e){e.$etag=l.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(u)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,o,i,u,l,c,d,m,p,f,h,g,v,b,k,y=this;return r.d(this,function(E){switch(E.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,o=t.table,i=t.getQueryOptions,u=n(),[4,i()];case 1:return l=E.sent(),c=[].concat(l.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),d=this.stripGraphs(e,c),a?[4,this.mem.insert(d.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:E.sent(),E.label=3;case 3:m=new s.a,p=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){m.link2(o,e.id,t,n.id)})};try{for(var s=(t=void 0,r.h(c)),i=s.next();!i.done;i=s.next()){a(i.value)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}m.add(o,e)};try{for(f=r.h(d),h=f.next();!h.done;h=f.next())g=h.value,p(g)}catch(e){b={error:e}}finally{try{h&&!h.done&&(k=f.return)&&k.call(f)}finally{if(b)throw b.error}}return[4,u.batch(m.mutationRequests).catch(function(t){return a&&y.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return v=E.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=v.newEtags[e.id]}),a?[4,this.mem.update(e)]:[3,6];case 5:return E.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:E.sent(),E.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o,i=this;return r.d(this,function(u){switch(u.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,o=n(),a?[4,this.mem.update(e.map(function(e){return i.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:u.sent(),u.label=2;case 2:return[4,o.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(i,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return u.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return u.sent(),[2]}})})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(10),o=new DOMParser,i={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function u(e){for(var t=o.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)l(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function l(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&i[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),c(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),s=a.name&&!!t[a.name.toLowerCase()];s||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),c(e)&&(t=!0),t}function c(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)l(n.item(r))&&(t=!0);return t}var d=n(80);n.d(t,"a",function(){return b});var m="wysiwyg-actionbar",p="wysiwyg-button",f="wysiwyg-content",h="wysiwyg-focusrect",g="wysiwyg-focuspoint",v="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||u(e.html)!==u(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(u(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:k(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(g)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),s=a.next();!s.done;s=a.next()){switch(s.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,o=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(o=o.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"LÃ¥t bilden flyta vÃ¤nster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"LÃ¥t bilden flyta hÃ¶ger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden pÃ¥ egen rad",result:function(){return e("unfloat")}}])));var i=this.state.focusRect,l=this.props,c=l.readOnly,b=l.reportNumChars,k=l.maxChars;return a.createElement("div",{className:this.props.className},!c&&a.createElement("div",{className:m},o.map(function(e,n){return a.createElement("button",{key:n,className:p,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:c?v:f,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:u(this.props.html)},contentEditable:!c,onPaste:function(e){if(!isNaN(k)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>k&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:0)}:null,onKeyPress:isNaN(k)?null:function(e){var t=e.target.innerText;t&&t.length>=k&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){c||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(s.a)("outdent"):Object(s.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),i&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:h,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:g+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:g+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:g+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:g+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function k(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i}),n.d(t,"b",function(){return u});var r=n(1),a=n(15),s=n(61),o=n(7),i=function(){function e(){var e,t;this._initialized=!1;var n=function(e){Object.defineProperty(a,e,{get:function(){return this._initialized||this.init(),this._features[e]},set:function(e){throw new Error("Feature flags cannot be set here")}})},a=this;try{for(var o=r.h(Object.keys(s)),i=o.next();!i.done;i=o.next()){n(i.value)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}}return e.prototype.init=function(){var e,t;if(!this._initialized){var n=(o.a.KED_FEATURES||"").split(",").map(function(e){return e.trim().toLowerCase()}),i=Object(a.b)(location.search,{toLower:!0});i.testversion&&(n=["*"]),i.features&&(n=i.features.split(",").map(function(e){return e.trim().toLowerCase()}));var u=n.includes("*");this._features={};try{for(var l=r.h(Object.keys(s)),c=l.next();!c.done;c=l.next()){var d=c.value;this._features[d]=u||n.includes(d.toLowerCase())}}catch(t){e={error:t}}finally{try{c&&!c.done&&(t=l.return)&&t.call(l)}finally{if(e)throw e.error}}this._initialized=!0}},e}(),u=new i},function(e,t,n){"use strict";n.d(t,"a",function(){return h});var r=n(1),a=n(8),s=n(95),o=n.n(s),i=n(96),u=n.n(i),l=n(63),c=n(64),d=n(0),m=n(7),p=n(6),f=n.n(p),h=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(o.a,u.a)),n.messages={sv:l,en:c},f()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},,function(e){e.exports={picker:"Integrate coursebuilder and subjectplanner with Google Picker",ksTutorComment:"Integrate KSTermplanner with tutor comments",kgTutorComment:"Integrate KSTermplanner  with tutor comments",termplannerCharts:"Integrate KSTermplanner with progress charts",weekplannerCharts:"Integrate Weekplanner with progress charts",teacherRights:"Activate course builder teacher rights",studyGroups:"Add study groups and google classroom functionality",cbCollapseBoxes:"Course Builder: Collapse modules by default",ksAssignments:"KS show hand-in assignments",markPartialKRs:"Activate mark partial knowledge requirments functionality"}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(19),o=n(13),i=n(81);function u(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var l=n(6),c=n.n(l),d=n(25),m=n(7),p=n(8),f=n(17),h=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,o=t.progressData,l=t.displayProgress,m=!!this.props.openCourses[n],f=(new d.a,this.context.intl);return a.createElement(s.a,{title:a.createElement("h5",null,n||a.createElement(p.a,{id:"userTasks.goals",defaultMessage:"Egna lÃ¤randemÃ¥l"})),headerOpen:m,className:n&&Object(i.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)},displayProgress:l,progressData:o},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"},"Â ",a.createElement("a",{className:"trash",href:"#",title:f.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lÃ¤randemÃ¥let och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=u(t),s=c()(t.deadline).startOf("day")<c()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:g(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:v(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:c()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmÃ¥l"}))),a.createElement("br",null))}))},t.contextType=f.a,t}(a.Component);function g(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(o.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function v(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(o.f)(m.b.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var b=n(5),k=n(2);var y=n(65),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"weekplanner.addLearningGoalTitle",defaultMessage:"LÃ¤gg till eget lÃ¤randemÃ¥l"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(p.a,{id:"weekplanner.addLearningGoal",defaultMessage:"MÃ¥l"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(p.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),w=n(29),T=n(49),N=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,o=this.props,i=(o.isTask,o.onSave),u=this.context.intl;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"customTask.addWorkGoalTitle",defaultMessage:"LÃ¤gg till eget arbetsmÃ¥l"})),a.createElement("hr",null),a.createElement(w.a,{label:u.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:u.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{rows:7,label:u.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:u.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"LÃ¤gg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:u.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return i(n,r,s)}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),C=n(97),D=(n(75),n(35)),S=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,o=s.name,i=s.description,u=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:o,description:i,url:u}):r.a({},t)}))});else{var l={id:Object(b.h)(),name:o,description:i,url:u};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(l)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(p.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(p.a,{id:"addeditsubtask.addSubtask",defaultMessage:"LÃ¤gg till underuppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(p.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=f.a,t}(a.Component),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(S,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(S,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,o=t.deadline,i=t.subTasks,l=t.showCalendar,d=t.userTask,m=d.id,f=(d.courseName,this.props),h=f.onUpdate,g=f.onDelete,v=this.isModified(),b="customTask"===u(d),k=c()(d.deadline)<c()(),y=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,b?a.createElement(p.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmÃ¥l"}):a.createElement(p.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:b?y.formatMessage({id:"task.targetNameLabel",defaultMessage:"ArbetsmÃ¥lets namn"}):y.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:b?y.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du gÃ¶ra?"}):y.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),b&&a.createElement(a.Fragment,null,a.createElement(T.a,{rows:5,label:y.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:y.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"LÃ¤gg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:y.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(D.a,{label:y.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},o||l?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(C.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",nextMonthButtonLabel:"",previousMonthButtonLabel:"",showWeekNumbers:!0,selected:o&&c()(o).toDate(),autoFocus:l,dateFormat:"yyyy-MM-dd",className:k?"expired":void 0,locale:y.locale,popperPlacement:b?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&c()(t).format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:y.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(p.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(D.a,{label:y.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},i&&i.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"task.addSubtask",defaultMessage:"LÃ¤gg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){v?h(function(e){e.name=n,e.description=r,e.url=s,e.deadline=o}):e.props.closeDialog()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(p.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){g(m)}},b?a.createElement(p.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmÃ¥l"}):a.createElement(p.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den hÃ¤r uppgiften"})))))},t.contextType=f.a,t}(a.Component),M=n(12),x=n(82),L=n(40),j=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.backgroundColor,r=e.progressColor,s=Math.round(t);return a.createElement("svg",{className:"progress-chart",width:"100%",height:"25"},a.createElement("rect",{fill:n,width:"100%",height:"100%",rx:"4"}),a.createElement("rect",{className:"fill",fill:r,width:s+"%",height:"100%",rx:"4"}),a.createElement("text",{className:"filled-text",textAnchor:"middle",x:"50%",y:"50%",dy:".3em"},s+"%"))},t.defaultProps={percentage:0,backgroundColor:"#F1F5F4",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return P});var P=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new x.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){var e=Object(L.d)(c()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.nextWeek=function(){var e=Object(L.c)(c()(this.state.weekDate));this.props.env.userTasksRepo.changeWeek(e.nextDate,e.adjusted)},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(E,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"LÃ¤randemÃ¥let kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(N,{isTask:!e,onSave:function(a,s,o){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,o)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(O,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet fÃ¥r inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(S,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lÃ¤randemÃ¥l samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var o;return r.d(this,function(r){switch(r.label){case 0:return o=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),dateTime:o+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,o,i,u,l;return r.d(this,function(d){switch(d.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:d.sent(),d.label=2;case 2:return d.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=c()(n).add(-1,"week"),s=Object(L.b)(a),o=Object(L.a)(a.year(),s),[4,this.props.env.kedBackendClient.list("usertasks",{from:o.notBefore,to:o.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return i=(i=d.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),[n].concat(t.map(function(e){return e.dateTime})),u=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),l=i.sort(Object(k.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:u+=1e3});return t.id=Object(b.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(l)];case 4:return d.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.getHeaderTitle=function(){return a.createElement("h4",null,a.createElement(p.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"}))},t.prototype.render=function(){var e=this,t=c()(this.state.weekDate).week(),n=d.b.weekplannerCharts,o=c()().week(),i=function(e){var t,n,a,s,o=[],i=Object(k.b)(e,function(e){return e.courseName||""});try{for(var u=r.h(Object.keys(i).sort().filter(function(e){return e}).concat(i[""]?[""]:[])),l=u.next();!l.done;l=u.next()){var c=l.value,d=i[c]||i[""],m=Object(k.b)(d,function(e){return e.learningGoal}),p=[];try{for(var f=(a=void 0,r.h(Object.keys(m))),h=f.next();!h.done;h=f.next()){var g=h.value,v=m[g].sort(Object(k.g)("dateTime")),b=v.filter(function(e){return null==e.name})[0],y=b&&b.url;p.push({name:g,allTasks:v,url:y,step:v.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:v.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{h&&!h.done&&(s=f.return)&&s.call(f)}finally{if(a)throw a.error}}o.push({courseName:c,learningGoals:p})}}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return o}(this.state.userTasks),u=this.state,l=u.dialogs,m=u.weekTextsUT,f=u.strategy,g=u.assessment,v=u.isLoading,b=u.isCopyingTasks,E=m&&("adding"===m.$meta||"updating"===m.$meta),w=!!m&&f!==m.weekTexts.strategy,T=!!m&&g!==m.weekTexts.assessment,N=!E&&(w||T),C=function(e){var t={completedTasks:0,totalNumberOfTasks:0,subjectData:{}};return e.forEach(function(e){return e.learningGoals.forEach(function(n){var r=n.tasks.filter(function(e){return e.done}).length,a=t.subjectData[e.courseName];a||(a=t.subjectData[e.courseName]={completedNumberOfTasks:0,numberOfTasks:0}),a.completedNumberOfTasks+=r,a.numberOfTasks+=n.tasks.length,t.completedTasks+=r,t.totalNumberOfTasks+=n.tasks.length})}),t}(i),D=i.length>0?C.completedTasks/C.totalNumberOfTasks*100:0;return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===o?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!E&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},n&&this.getHeaderTitle(),a.createElement("div",{className:"widgets"},n?a.createElement("div",{className:"progressBar"},a.createElement(j,{percentage:D})):this.getHeaderTitle(),a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"})))))),i.length>0&&a.createElement("hr",null),i.map(function(t){return a.createElement(h,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)},displayProgress:n,progressData:C.subjectData[t.courseName]}))}),a.createElement("hr",null),v?a.createElement(M.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.learningGoal",defaultMessage:"Eget lÃ¤randemÃ¥l"})),a.createElement("div",{className:"btn",style:b?{opacity:.5}:void 0,onClick:function(t){return!b&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara frÃ¥n fÃ¶regÃ¥ende vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(p.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & UtvÃ¤rdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska gÃ¶ra fÃ¶r att lÃ¤ra mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:f&&f.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.evaluation",defaultMessage:"UtvÃ¤rdering"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.UtvÃ¤rdera i fÃ¶rhÃ¥llande till dina mÃ¥l."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:g&&g.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:N?{}:{opacity:.5},onClick:function(){return!E&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),N?a.createElement(p.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(p.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(y.a,{dialogs:l,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=f.a,t}(a.Component)},function(e){e.exports={"addeditsubtask.addSubtask":"LÃ¤gg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"LÃ¤gg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"FÃ¶r tillfÃ¤llet problem att spara data. Dina Ã¤ndringar sparades inte.","common.changesNotSavedUnauthorized":"Ãndringarna sparades inte p.g.a. otillrÃ¤cklig behÃ¶righet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"LÃ¤nk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"LÃ¤gg till eget arbetsmÃ¥l","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Ãvergripande","task.addSubtask":"LÃ¤gg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmÃ¥l","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den hÃ¤r uppgiften","task.removeWorkGoals":"Ta bort arbetsmÃ¥l","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"ArbetsmÃ¥lets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du gÃ¶ra?","taskList.nextWeekTask":"fÃ¶r nÃ¤sta vecka (v{week})","taskList.lastWeekTask":"fÃ¶r fÃ¶rra veckan (v{week})","taskList.currentWeekTask":"fÃ¶r vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften frÃ¥n egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"LÃ¤gg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"TerminsmÃ¥l","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vÃ¤nta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.sprÃ¥k","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgÃ¤ngligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Framsteg diagram","tutorNoteDialog.weekComment":"Kommentar fÃ¶r vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida fÃ¶r komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmÃ¥l","userTasks.deleteLearningGoal":"Ta bort lÃ¤randemÃ¥let och dess uppgifter","userTasks.goals":"Egna lÃ¤randemÃ¥l","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"MÃ¥l:","weekplanner.addLearningGoalTitle":"LÃ¤gg till eget lÃ¤randemÃ¥l","weekplanner.confirmRemoveLearningObjectives":"Ta bort lÃ¤randemÃ¥l samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara frÃ¥n fÃ¶regÃ¥ende vecka","weekplanner.emptyLearningGoalErr":"LÃ¤randemÃ¥let kan inte vara tomt","weekplanner.evaluation":"UtvÃ¤rdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.UtvÃ¤rdera i fÃ¶rhÃ¥llande till dina mÃ¥l.","weekplanner.learningGoal":"Eget lÃ¤randemÃ¥l","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet fÃ¥r inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & UtvÃ¤rdering","weekplanner.strategyDescription":"Hur jag ska gÃ¶ra fÃ¶r att lÃ¤ra mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"VÃ¥grÃ¤t linje","wysiwyg.link":"Infoga lÃ¤nk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(1),a=n(0),s=n(39),o=n(43),i=n(11),u=n.n(i),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&u()(Object(o.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return u()("body").attr("aria-disabled",n.length>0),u()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,i){var l;return a.createElement("div",{key:i},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){l=t,i===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":i<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||u()(Object(o.findDOMNode)(l)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(o.findDOMNode)(l);e.preventDefault(),u()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),o=n(6),i=n.n(o),u=n(5),l=n(30),c=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}var m=n(17);n.d(t,"a",function(){return p});var p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){l.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){l.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,o;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),o={id:Object(u.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new u.b("email",s.a.currentUser.mail,"S"),new u.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(o.deadline=e.task.deadline),e.task?(o.task=[e.task],e.course?o.course=[e.course]:e.courseInfo&&(o.courseInfo=e.courseInfo)):o.siteVisionPageId=e.id,e.step&&(o.step=e.step),[4,Promise.all([l.b.setWeekPlannerBoxOpen(e.courseName,!0),l.b.insert([o])])]);case 1:return r.sent(),[3,4];case 2:return[4,l.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.context.intl,n=this.props.learningTasks,s=Object(c.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),o=this.state.confirmations,u=i()(this.state.weekDate).week(),l=i()().week(),m=u===l?"":u===l+1?t.formatMessage({id:"taskList.nextWeekTask",defaultMessage:"fÃ¶r nÃ¤sta vecka (v{week})"},{week:u}):u===l-1?t.formatMessage({id:"taskList.lastWeekTask",defaultMessage:"fÃ¶r fÃ¶rra veckan (v{week})"},{week:u}):t.formatMessage({id:"taskList.currentWeekTask",defaultMessage:"fÃ¶r vecka {week}"},{week:u});return a.createElement("div",{className:"taskContainer"},n.map(function(n,i){var c=n.id,p=s[c]||{$meta:"deleted"},f="adding"===p.$meta||"deleting"===p.$meta,h="deleted"!==p.$meta&&"deleting"!==p.$meta,g=h?t.formatMessage({id:"taskList.removeTaskFromWeeklyPlanning",defaultMessage:"Ta bort uppgiften frÃ¥n egen veckoplanering {week}"},{week:m}):t.formatMessage({id:"taskList.addTaskToWeeklyPlanning",defaultMessage:"LÃ¤gg till uppgiften i egen veckoplanering {week}"},{week:m}),v=o.some(function(e){return c===e});return a.createElement("div",{key:n.id},a.createElement("div",{key:c,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"selectedBox"+(h?" selected":""),style:f?{opacity:.5}:{},onClick:function(){return f||u!==l?v?e.setState({confirmations:o.filter(function(e){return e!==c})}):e.setState({confirmations:r.g(o).concat(c)}):e.toggleTask(n)},title:g})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:n.url},n.name))),a.createElement(d,{visible:v,text:g,onConfirm:function(){e.toggleTask(n),e.setState({confirmations:o.filter(function(e){return e!==c})})},onCancel:function(){e.setState({confirmations:o.filter(function(e){return e!==c})})}}))}))},t.contextType=m.a,t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return m});var r=n(1),a=n(55),s=n(3),o=n(2),i=n(5),u=n(46),l=n(22),c=n(6),d=n.n(c),m=s.a.hiddenCoursesRepo,p=function(){function e(){var e=this;this.result=null,this.subscribers=[],this.fullCourse=!1,this.notifySubscriber=function(t,n){try{t(n.fullCourse?e.result:e.result.filter(function(e){return e.visible}))}catch(e){console.error(e)}},this.kedRepo=new a.a({getClient:function(){return s.a.kedBackendClient},optimistic:!0,table:"userhiddencourses",user:s.a.currentUser?s.a.currentUser.mail:"",getQueryOptions:function(){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}});var t=this.init();Promise.all([t,this.kedCoursesPromise,this.edsCoursesPromise]).catch(function(e){return Object(o.n)(e)})}return e.prototype.init=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a=this;return r.d(this,function(o){switch(o.label){case 0:return e=s.a.bearerProvider?s.a.bearerProvider.getBearer():Promise.resolve({}),this.kedCoursesPromise=e.then(function(){return a.listKedCourses()}),this.edsCoursesPromise=e.then(function(){return a.listEDSCourses()}),n=!1,this.userHiddenCoursesPromise=new Promise(function(e){return t=function(t){n?a.userHiddenCoursesPromise=Promise.resolve(t):(n=!0,e(t))}}),[4,e];case 1:return o.sent(),this.kedRepo.mem.subscribe(function(e){return r.b(a,void 0,void 0,function(){var n,a,s,o,i=this;return r.d(this,function(u){switch(u.label){case 0:return[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise])];case 1:return n=r.f.apply(void 0,[u.sent(),2]),a=n[0],s=n[1],o=this,[4,this.createCoursesList(s,e,a)];case 2:return o.result=u.sent(),this.subscribers.forEach(function(e){return i.notifySubscriber(e.subscriber,e.options)}),t(e),[2]}})})}),[2]}})})},e.prototype.listKedCourses=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:return e=this.fullCourse,console.log("FullCourse: "+e),[4,s.a.kedBackendClient.list("schools",{role:"USER",name:s.a.currentUser.school,include:"activeCourses",flags:e?[]:["includeIdsAndNamesOnly"],cacheBust:s.a.currentUser.username})];case 1:return t=n.sent(),[2,Object(o.k)(t.map(function(e){return e.activeCourses})).sort(Object(o.g)("name"))]}})})},e.prototype.listEDSCourses=function(){var e=new u.a(Object(l.c)(d()())).period;return-1===s.a.currentUser.roles.indexOf("EMPLOYEE")?s.a.edsClient.getActiveCourses({periodName:e}):null},e.prototype.createCoursesList=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,u,l,c=this;return r.d(this,function(d){switch(d.label){case 0:return a=Object(o.c)(t.filter(function(e){return!e.show}),function(e){return e.name}),i=Object(o.c)(t.filter(function(e){return e.show}),function(e){return e.name}),u=s.a.currentUser.roles.some(function(e){return"STUDENT"===e}),l=e?Object(o.c)(e,function(e){return e.name}):{},[4,Promise.all(n.map(function(e){var t=e.id,n=e.name,s=e.description,o=e.modifiedBy;return r.b(c,void 0,void 0,function(){var e,c,d;return r.d(this,function(r){return e=l[n],d=(c=!u||null!=e)?!a[t]:!!i[t],o&&o.name&&!s&&(s=o.name+"s version"),[2,{id:t,name:n,description:s,visible:d,defaultVisible:c}]})})}))];case 1:return[2,d.sent().sort(function(e,t){var n=e.name,r=t.name;return n<r?-1:n>r?1:0})]}})})},e.prototype.hideCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.insert([{id:Object(i.h)(),name:e.id}])]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.delete(t.map(function(e){return e.id}))];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.showCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.delete(t.map(function(e){return e.id}))]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.insert([{id:Object(i.h)(),name:e.id,show:!0}])];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.subscribe=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,i;return r.d(this,function(u){switch(u.label){case 0:return this.fullCourse||!t.fullCourse?[3,3]:(this.fullCourse=t.fullCourse,this.kedCoursesPromise=this.listKedCourses(),[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise,this.userHiddenCoursesPromise])]);case 1:return n=r.f.apply(void 0,[u.sent(),3]),a=n[0],s=n[1],o=n[2],i=this,[4,this.createCoursesList(s,o,a)];case 2:i.result=u.sent(),u.label=3;case 3:return[4,this.userHiddenCoursesPromise];case 4:return u.sent(),this.notifySubscriber(e,t),this.subscribers.push({subscriber:e,options:t}),[2]}})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t.subscriber!==e})},e}();m||(m=s.a.hiddenCoursesRepo=new p)},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"AdministratÃ¶r",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Andrei",mail:"andrei.spatarelu@vemendo.se",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"andrei"},{displayName:"Carl Holmberg",mail:"carl.holmberg@kunskapsgymnasiet.se",roles:["ADMIN","EMPLOYEE"],school:"NorrkÃ¶ping",username:"carl.holmberg@kunskapsgymnasiet.se"},{displayName:"Carl",mail:"carl@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"carl"},{displayName:"david.fahlander@kedschools.com",mail:"david.fahlander@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"david.fahlander@kedschools.com"},{displayName:"Teacher 1",mail:"teacher1.classroom@kedschools.com",roles:["EMPLOYEE"],school:"KED",username:"teacher1.classroom@kedschools.com"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-LÃ¤rare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev BorÃ¥s",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"BorÃ¥s",schoolType:"Grundskolor"},{displayName:"Elev BorlÃ¤nge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"BorlÃ¤nge",schoolType:"Gymnasium"},{displayName:"Roll-lÃ¶s",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(6),a=n.n(r),s=n(7);"sv"===s.b.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"sÃ¶ndag_mÃ¥ndag_tisdag_onsdag_torsdag_fredag_lÃ¶rdag".split("_"),weekdaysShort:"sÃ¶n_mÃ¥n_tis_ons_tor_fre_lÃ¶r".split("_"),weekdaysMin:"sÃ¶_mÃ¥_ti_on_to_fr_lÃ¶".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[IgÃ¥r] LT",nextWeek:"[PÃ¥] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"fÃ¶r %s sedan",s:"nÃ¥gra sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en mÃ¥nad",MM:"%d mÃ¥nader",y:"ett Ã¥r",yy:"%d Ã¥r"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var o=function(){return a.a.apply(this,arguments).locale(s.b.KED_LOCALE)}},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(3),s=function(){function e(e){this.googleTokenProvider=a.b.googleTokenProvider,this.discoveryDocs=[],this.discoveryDocs.push(e)}return e.prototype.setBearerProvider=function(e){this.googleTokenProvider=e},e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:t.sent(),t.label=2;case 2:return!this.tokenExpiration||this.tokenExpiration<new Date?[4,this.googleTokenProvider.getBearer()]:[3,4];case 3:e=t.sent(),this.tokenExpiration=new Date(e.expires),this.token=e.token,gapi.client.setToken({access_token:e.token}),t.label=4;case 4:return[4,gapi.client.init({discoveryDocs:this.discoveryDocs})];case 5:return t.sent(),[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e){if("undefined"!=typeof gapi)return e();var t=document.createElement("script");t.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(t),window.gaapi_loaded=e})},e}()},,function(e,t,n){"use strict";var r=n(10);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Outdent",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Indent",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(r.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt(this.promptMsg);e&&Object(r.a)("insertImage",e)}}}},function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},,,,,,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var t=n(7);t.b.ENVIRONMENT="test",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,n(126))},function(e,t,n){"use strict";n(98);var r=n(1),a=n(15),s=n(20),o=n(5),i=n(7),u=n(3),l=n(13),c=n(2);function d(e,t,n){var s=Object(a.b)(t),o=Object(c.e)(s,l.a),i=r.f(Object(a.c)(e),2),u=i[0],d=i[1],m=Object(a.b)(d);return u+Object(a.a)(r.a({},m,o,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function p(e,t,n){return new o.e(s.c,s.d,e+t.mail+location.search,i.b.KED_CLIENT_ID,i.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var f,h,g=u.a.currentUser&&u.a.currentUser.mail;if(g)if(i.b.KED_TOKEN_PATH){var v=d(i.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);u.a.bearerProvider=(h=m(f=v,g),new s.b(f,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){u.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,h),{token:t.token,expires:Date.now()+354e4}},h)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(u.a.currentUser=JSON.parse(t))}(m(v,g));var b=d(i.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"]);u.a.googleTokenProvider=function(e,t){var n=m(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,g)}else{if(!(i.b.KED_TOKEN_URL&&i.b.KED_CLIENT_ID&&i.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");u.a.bearerProvider=p(i.b.KED_TOKEN_URL,u.a.currentUser,["kedbackend","EDS"]),u.a.googleTokenProvider=p(i.b.KED_TOKEN_URL+"/google",u.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"])}u.a.kedBackendClient=new s.a(i.b.KED_API_URL,u.a.bearerProvider);var k=n(46);u.a.edsClient=new k.b(s.c,i.b.EDS_API_URL,u.a.bearerProvider,function(){return u.a.currentUser.mail})},,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(3),o=n(139),i=function(e){function t(t){var n=e.call(this,t)||this;return n.onEnvUpdated=n.onEnvUpdated.bind(n),n.state={env:t.tutored?null:s.a},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.tutored&&o.a.subscribe(this.onEnvUpdated)},t.prototype.componentWillUnmount=function(){this.props.tutored&&o.a.unsubscribe(this.onEnvUpdated)},t.prototype.onEnvUpdated=function(e){this.setState({env:e})},t.prototype.render=function(){var e=this.state.env;return e?e.kedBackendClient?this.props.createComponent(e):a.createElement("div",null,"Laddar..."):a.createElement("div",null)},t}(a.Component)},,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(73);function s(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"VÃ¤lj anvÃ¤ndare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,s=e.school,o=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===o.length?{fontStyle:"italic"}:{}},0===o.length?"saknar roller":o.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:s?{}:{fontStyle:"italic"}},s||"saknar skola"))}))))}},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.myself=a.createRef(),n.state={text:t.text||""},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.tag,n=e.text,r=e.readOnly,s=t;return a.createElement(s,{contentEditable:!r,"data-placeholder":this.props.placeholder,ref:this.myself,className:this.props.className,onChange:this.onChange.bind(this),onKeyDown:this.onKeyDown.bind(this),onKeyUp:this.onKeyUp.bind(this),onBlur:this.onBlur.bind(this),onPaste:this.onPaste.bind(this),dangerouslySetInnerHTML:{__html:n}})},t.prototype.onChange=function(e){this.setState({text:this.myself.current.innerText})},t.prototype.onKeyDown=function(e){var t=this.myself.current.innerText;if("Escape"===e.key?(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.stopPropagation()):"Enter"===e.key?(e.preventDefault(),this.navigate(t,"down")):"Tab"===e.key?this.propagateOnChange(t):t.length>=this.props.maxChars&&/^[\d\w\s]$/.test(e.key)&&!e.metaKey&&!e.ctrlKey&&e.preventDefault(),!0===this.props.allowNavigation){var n=!!e.key.startsWith("Arrow")&&e.key.replace("Arrow","").toLowerCase(),r=document.getSelection().getRangeAt(0).endOffset;n&&0==t.length?this.navigate(t,n):!n||"up"!=n&&"down"!=n?n&&("left"==n&&0==r||"right"==n&&r==t.length)&&this.navigate(t,n):this.navigate(t,n)}},t.prototype.onKeyUp=function(e){var t=this.myself.current.innerText;void 0===this.props.validateValue||this.props.validateValue.test(t)||(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.preventDefault())},t.prototype.navigate=function(e,t){this.propagateOnChange(e),this.setState({text:e}),this.props.onNavigate(t)},t.prototype.onPaste=function(e){e.preventDefault();var t=e.clipboardData&&e.clipboardData.getData?e.clipboardData.getData("text/plain"):"";document.execCommand("insertHTML",!1,t)},t.prototype.onBlur=function(e){var t=this.myself.current.innerText;this.propagateOnChange(t),this.setState({text:t})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t}(a.PureComponent)},,,,,function(e,t){},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r,a,s=n(1),o=n(0),i=n(7),u=n(2),l=n(12),c=n(15),d=n(13),m=n(69),p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,courses:[],headerOpen:!1},n.updateHiddenCourses=n.updateHiddenCourses.bind(n),n}return s.c(t,e),t.prototype.componentWillMount=function(){m.a.subscribe(this.updateHiddenCourses,{fullCourse:!0})},t.prototype.componentWillUnmount=function(){m.a.unsubscribe(this.updateHiddenCourses)},t.prototype.updateHiddenCourses=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.hideCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(r||(r=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.hideCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.showCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(a||(a=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.showCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.render=function(){var e=this;if(this.state.isLoading)return o.createElement(l.a,null);var t=this.state.courses,n=t.filter(function(e){return e.visible}),r=t.filter(function(e){return!e.visible}),a=Object(c.b)(location.search),u=i.b.KED_COURSE_VIEWER_URL;return o.createElement("div",{className:"ked_boxed"},o.createElement("h3",null,"Skolans kurser"),o.createElement("div",{className:"taskContainer odd-even"},n.map(function(t){return o.createElement("div",{className:"studentCourse",key:t.id},o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top pull-right"},o.createElement("a",{className:"hideItem",onClick:function(){return e.hideCourse(t)}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{href:Object(d.f)(u,{courseId:t.id})},t.name))),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",{className:"small"},t.description)))})),o.createElement("div",{className:"openClose"+(this.state.headerOpen?" open":"")},o.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},o.createElement("h5",null,"Dolda kurser")),o.createElement("div",{className:"openContent"},o.createElement("div",{className:"taskContainer odd-even"},r.map(function(t){return o.createElement("div",{className:"studentCourse",key:t.id},o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top pull-right"},o.createElement("a",{className:"showItem",onClick:function(){return e.showCourse(t)}})),o.createElement("a",{href:Object(c.a)(s.a({},a,{courseId:t.id}))},t.name)),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",{className:"small"},t.description)))})))))},t}(o.Component)},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(67),o=n(17),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.commonTasks,n=e.learningGoals,r=this.context.intl;return a.createElement("div",null,n.map(function(e){return a.createElement("div",{key:e.name},a.createElement("h5",null,e.name),a.createElement(s.a,{learningTasks:e.learningTasks}))}),t.length>0&&a.createElement("div",null,n.length>0&&a.createElement("h5",null,r.formatMessage({id:"learningGoalsLost.overall",defaultMessage:"Ãvergripande"})),a.createElement(s.a,{learningTasks:t})))},t.contextType=o.a,t}(a.Component)},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(6),o=n.n(s);function i(e,t){var n=o()(new Date(t.firstTerm.startDate)),r=o()(new Date(t.firstTerm.endDate)),a=o()(new Date(t.secondTerm.startDate)),s=o()(new Date(t.secondTerm.endDate)),i=n.year().toString().substr(2)+"/"+s.year().toString().substr(2),l=u(t.holidays,n,r);if(e<r){var c=1,d=r.week()-n.week();return{term:"AT",academicYearStructure:{academicYear:i,startDate:n,endDate:r,academicStartWeek:c,academicEndWeek:d,holidays:l}}}var m=function(e){var t=0;return e.forEach(function(e){t+=o()(e.endDate).add(1,"week").week()-o()(e.startDate).week()}),t}(l);c=a.clone().add(1,"week").week()-n.week()-m,d=s.clone().add().add(1,"week").week()-n.week()-m;return{term:"ST",academicYearStructure:{academicYear:i,startDate:a,endDate:s,academicStartWeek:c,academicEndWeek:d,holidays:l=u(t.holidays,a,s)}}}function u(e,t,n){return e.filter(function(e){return o()(e.startDate).isBetween(t,n)})}function l(e){var t=e.shortName;return"MA"===t?"Ma":"EN"===t?"Eng":t.startsWith("SV")?"Sv/SvA":t.startsWith("M2")?"M.spr":null}var c=function(){function e(e,t,n){this.locale=t||"sv",this.selectedDate=e,this.schoolMoment=n?i(o()(e),n):null}return e.prototype.getTermStartAndEnd=function(e){var t=this.schoolMoment.academicYearStructure.startDate.clone().startOf("week");t.year()<this.schoolMoment.academicYearStructure.startDate.year()&&(t=this.schoolMoment.academicYearStructure.startDate);var n=this.schoolMoment.academicYearStructure.endDate;return"sv"===this.locale&&e&&"ST"===this.schoolMoment.term?n=n.clone().add(3,"weeks").endOf("week"):e&&("sv"!=this.locale&&(n=this.schoolMoment.academicYearStructure.endDate.clone()),n=this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").endOf("week")),[t,n]},e.prototype.getFirstAndLastWeekOfTerm=function(){return[this.schoolMoment.academicYearStructure.startDate.week(),this.schoolMoment.academicYearStructure.endDate.week()]},e.prototype.isCurrentWeek=function(e){var t=o()(e);return t.year()===o()().year()&&t.week()===o()().week()},e.prototype.getLastStepWeek=function(e){return"sv"===e?"ST"===this.schoolMoment.term?28:52:this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").week()},e.prototype.toLocaleString=function(e,t){if(this.schoolMoment){var n=this.schoolMoment.academicYearStructure.endDate.year().toString(),r=this.schoolMoment.academicYearStructure.academicYear;return n=t&&"sv"===e.locale?n.substr(2):r,"AT"===this.schoolMoment.term?e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"VT {year}"},{year:n})}return null},e.prototype.nextTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.endDate.clone():o()()).add(3,"months").toDate(),this.locale)},e.prototype.prevTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.startDate.clone():o()()).subtract(3,"months").toDate(),this.locale)},e.prototype.getEdsPeriodName=function(){return"AT"===this.schoolMoment.term?"HT":"VT"+this.schoolMoment.academicYearStructure.endDate.year()},e}(),d=n(5),m=n(40),p=function(){return function(e,t,n,a,s,i){var u,c,p,f,h,g=this;if(this.subjectProgress={},this.columns=[],this.weekPlansOrTutorNote=[],n.schoolMoment){var v=r.f(n.getTermStartAndEnd(),2),b=v[0],k=v[1];this.year=b.year();var y=function(e){switch(e){case"sv":return["M.spr","Ma","Sv/SvA","Eng"];case"en_sin":case"en_nin":return["MFL","Ma","Hi","Eng","Yoga","ICT"]}}(a);y.forEach(function(e){return g.columns.push({name:e})});var E=[{name:"Kurs",isFixed:!0},{name:"Kommentar",isFixed:!0}];i&&E.push({name:"TutorComment",isFixed:!0}),(u=this.columns).push.apply(u,r.g(E));var w=function(e,t){var n={};return n.Kurs=t.formatMessage({id:"termplanner.course",defaultMessage:"Kurs"}),n.Kommentar=t.formatMessage({id:"termplanner.comments",defaultMessage:"Kommentar"}),"sv"===e?(n["M.spr"]=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"M.spr"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Ma"}),n["Sv/SvA"]=t.formatMessage({id:"termplanner.swedishLanguage",defaultMessage:"Sv/SvA"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"Eng"})):(n.MFL=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"MFL"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Maths"}),n.Hi=t.formatMessage({id:"termplanner.hindiLanguage",defaultMessage:"Hindi"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"English"}),n.Yoga=t.formatMessage({id:"termplanner.yoga",defaultMessage:"Yoga"}),n.ICT=t.formatMessage({id:"termplanner.ict",defaultMessage:"ICT"})),n}(a,s);this.columns.forEach(function(e){e.translatedName=w[e.name]});for(var T=n.schoolMoment.academicYearStructure.holidays,N=n.schoolMoment.term,C=e.filter(function(e){return!e.type}),D=e.filter(function(e){return"tutor-note"===e.type}),S=n.schoolMoment.academicYearStructure.academicStartWeek,O=function(e){if(T.filter(function(t){return e.week()>=o()(t.startDate).startOf("week").week()&&e.week()<=o()(t.endDate).endOf("week").week()}).length>0)return"continue";var t=e.week(),n=Object(m.a)(e.year(),t),a=C.filter(function(e){return e.dateTime>=n.notBefore&&e.dateTime<=n.notAfter&&(!e.isFinalStep&&e.term===N||"sv"===s.locale)})[0],i=D.filter(function(e){return e.dateTime>=n.notBefore&&e.dateTime<=n.notAfter&&(e.term===N||"sv"===s.locale)})[0];M.weekPlansOrTutorNote.push(r.a({},a||{},{id:a?a.id:Object(d.h)(),dateTime:a?a.dateTime:e.valueOf(),cellValues:a?a.cellValues:{},weekNumber:t,academicWeekNumber:S++,term:N})),M.weekPlansOrTutorNote.push(r.a({},i||{},{id:i?i.id:Object(d.h)(),type:"tutor-note",dateTime:i?i.dateTime:e.valueOf(),content:i?i.content:"",weekNumber:t,term:N}))},M=this,x=b.clone();x.valueOf()<k.valueOf();x=x.clone().add(1,"week").startOf("week"))O(x);var L=n.getLastStepWeek(s.locale),j=Object(m.a)(k.year(),L);this.lastSteps=C.filter(function(e){return e.dateTime>=j.notBefore&&e.dateTime<=j.notAfter&&(e.isFinalStep&&e.term===N||"sv"===s.locale)})[0]||{id:Object(d.h)(),dateTime:o()(k).clone().week(L).startOf("week").valueOf(),cellValues:{},weekNumber:L,term:N,isFinalStep:!0},this.completedSteps={},this.termGoals={};var P={};try{for(var I=r.h(t),U=I.next();!U.done;U=I.next()){var R=U.value,A=l(R);try{for(var _=(f=void 0,r.h(R.courseSteps)),B=_.next();!B.done;B=_.next()){var G=B.value;if(G.isCompleted){this.completedSteps[A+G.shortName]=!0;var H=parseInt(G.shortName);!isNaN(H)&&H>(P[A]?P[A]:0)&&(P[A]=H)}}}catch(e){f={error:e}}finally{try{B&&!B.done&&(h=_.return)&&h.call(_)}finally{if(f)throw f.error}}this.termGoals[A]=R.periodGoalGrade}}catch(e){c={error:e}}finally{try{U&&!U.done&&(p=I.return)&&p.call(I)}finally{if(c)throw c.error}}t&&(y.forEach(function(e){g.subjectProgress[e]={finalStepCompleted:!1,value:0}}),Object.keys(this.lastSteps.cellValues).forEach(function(e){if(!E[e]){var t=isNaN(parseInt(g.lastSteps.cellValues[e]))||!g.lastSteps.cellValues[e],n=t?0:parseInt(g.lastSteps.cellValues[e]),r=n>0?100*P[e]/n:0;g.subjectProgress[e]={finalStepCompleted:!t,value:r}}}))}}}();var f=n(122),h=n(3),g=new(n(153).a)(function(){return h.a.kedBackendClient},function(){return h.a.currentUser});h.a.ksTermPlannerRepo=g;var v=n(17),b=n(8),k=n(7),y=n(12),E=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.percentage,n=e.errorMessage,r=e.backgroundColor,s=e.progressColor,o=100/6.28+2,i=Math.round(t),u=10;return a.createElement("svg",{className:"doughnut-chart",viewBox:"0 0 35.847133757961785 35.847133757961785",width:"100%",height:"100%"},a.createElement("circle",{className:"circle-chart-background",stroke:r,strokeWidth:3,fill:"none",cx:o,cy:o,r:100/6.28}),a.createElement("circle",{className:"circle-chart-circle",stroke:s,ref:"progressCircle",strokeWidth:2,style:{strokeDasharray:i+", 100"},strokeLinecap:"round",fill:"none",cx:o,cy:o,r:100/6.28}),a.createElement("g",{className:"circle-chart-info"},n?a.createElement("text",{className:"circle-chart-percent-error",x:o,y:o,alignmentBaseline:"central",fontSize:"5",textAnchor:"middle"},n.split(" ").map(function(e){var t=a.createElement("tspan",{key:e,x:o,y:u},e);return u+=5,t})):a.createElement("text",{className:"circle-chart-percent",x:o,y:o,alignmentBaseline:"central",textAnchor:"middle"},i+"%")))},t.defaultProps={backgroundColor:"#efefef",progressColor:"#3dbca2",errorMessage:null},t}(a.Component),w=n(65),T=n(152),N=n(25),C=n(19);n.d(t,"a",function(){return D});var D=function(e){function t(t){var n=e.call(this,t)||this;return n.unmounted=!1,n.state={schoolTerm:new c(t.initialDate),activeCourses:[],weekPlans:[],error:null,loadingActiveCourses:!1,loadingWeekPlans:!1,initialLoad:!0,dialogs:[]},n.flowId=1,n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,this.load(this.state.schoolTerm)];case 1:return e.sent(),this.unmounted||this.props.env.ksTermPlannerRepo.mem.subscribe(this.updateWeekPlans),[2]}})})},t.prototype.componentWillUnmount=function(){this.unmounted=!0,this.props.env.ksTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e,t){this.setState({weekPlans:e,loadingWeekPlans:!1,error:t||null})},t.prototype.load=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o,i;return r.d(this,function(r){switch(r.label){case 0:t=++this.flowId,this.fields=[],this.setState({loadingActiveCourses:!0}),n=this.props.env.ksTermPlannerRepo,r.label=1;case 1:return r.trys.push([1,4,,5]),[4,this.loadAcademicYearDates(e,k.b.KED_SCHOOL_LOCALE)];case 2:return a=r.sent(),this.flowId!==t?[2]:(s=new c(e.selectedDate,this.context.intl.locale,a),n.refreshData(s.getTermStartAndEnd(!0)),[4,this.loadActiveCourses(s)]);case 3:return o=r.sent(),this.flowId!==t?[2]:(this.setState({schoolTerm:s,initialLoad:!1,activeCourses:o,loadingActiveCourses:!1}),[3,5]);case 4:return i=r.sent(),this.flowId!==t?[2]:(this.setState({schoolTerm:s,loadingActiveCourses:!1,error:i}),[3,5]);case 5:return[2]}})})},t.prototype.loadAcademicYearDates=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.edsClient.getAcademicYearTerms(t,e.selectedDate)];case 1:return[2,n.sent()]}})})},t.prototype.loadActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=e.getEdsPeriodName(),[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return[2,n.sent()]}})})},t.prototype.updateCell=function(e,t,n){return r.b(this,void 0,void 0,function(){var a;return r.d(this,function(r){switch(r.label){case 0:if((e&&e.cellValues[t]||"")===n)return[2];r.label=1;case 1:return r.trys.push([1,3,,4]),e.cellValues[t]=n,[4,this.props.env.ksTermPlannerRepo.upsert(e,function(e){return e.cellValues[t]=n})];case 2:return[2,r.sent()];case 3:return a=r.sent(),console.error(a.stack||a),"http403"===a.name?this.setState({error:this.context.intl({id:"common.changesNotSavedUnauthorized",defaultMessage:"Ãndringarna sparades inte p.g.a. otillrÃ¤cklig behÃ¶righet."})}):this.setState({error:this.context.intl({id:"common.changesNotSavedErrorOccured",defaultMessage:"FÃ¶r tillfÃ¤llet problem att spara data. Dina Ã¤ndringar sparades inte."})}),[3,4];case 4:return[2]}})})},t.prototype.updateTutorNoteField=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if((e&&e.content||"")===t)return[2];n.label=1;case 1:return n.trys.push([1,3,,4]),e.content=t,e.acl=[new d.b("tutorFor",this.props.env.currentUser.mail,"S").toString(),new d.b("email",this.props.env.currentUser.mail,"R").toString()],[4,this.props.env.ksTermPlannerRepo.upsert(e,function(e){return e.content=t})];case 2:return[2,n.sent()];case 3:return n.sent(),[3,4];case 4:return[2]}})})},t.prototype.deleteTutorNoteField=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.props.env.ksTermPlannerRepo.delete([e])];case 1:return t.sent(),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}})})},t.prototype.onTutorClick=function(e){var t=this;this.openDialog(a.createElement(T.a,{weekNumber:e.weekNumber,comment:e.content,intl:this.context.intl,updateData:function(n){return t.updateTutorNoteField(e,n)},deleteNoteData:function(){return t.deleteTutorNoteField(e.id)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.navigate=function(e,t){var n=r.a({},e),a=this.fields.length,s=Math.max.apply(Math,r.g(this.fields.map(function(e){return e.length})));switch(t){case"up":n.row=Math.max(e.row-1,0);break;case"down":n.row=Math.min(e.row+1,a);break;case"left":n.col=Math.max(e.col-1,0);break;case"right":n.col=Math.min(e.col+1,s)}this.fields[n.row]&&this.fields[n.row][n.col]&&this.fields[n.row][n.col].myself.current.focus()},t.prototype.addField=function(e,t){void 0===this.fields[t.row]&&(this.fields[t.row]=[]),this.fields[t.row][t.col]=e},t.prototype.getTableCell=function(e,t,n,r,s,o,i){var u=this,l=r.completedSteps,c={row:e,col:t};if("Tutor"===i){var d=s,m=d.content;return this.props.tutored?a.createElement("td",{key:"tutornote"+t,onClick:function(){return u.onTutorClick(d)},className:"tutorCell"},m?a.createElement("div",{key:t,"data-tooltip":m},a.createElement("i",{key:t,className:"fas fa-comment-dots"})):a.createElement("div",{key:t},a.createElement("i",{key:t,className:"fas fa-comment-medical"}))):a.createElement("td",{key:"tutornote"+t,className:"tutorCell"},m&&a.createElement("div",{key:t,"data-tooltip":m},a.createElement("i",{key:t,className:"far fa-comment-dots"})))}var p=s.cellValues;return a.createElement("td",{className:this.getCellClassName(l,p,n)},a.createElement(f.a,{key:t,ref:function(e){return u.addField(e,c)},text:p[n],tag:"div",validateValue:"Step"==i?/^\d*$/:void 0,maxChars:"Comment"==i?100:"Course"==i?30:3,onChange:this.updateCell.bind(this,s,n),readOnly:o||"Tutor"==i,allowNavigation:!0,onNavigate:this.navigate.bind(this,c)}))},t.prototype.getCellClassName=function(e,t,n){var r=this.getColumnType(n);return"Step"==r&&e[n+t[n]]?"stepCell completedStep":r.toLowerCase()+"Cell"},t.prototype.getFooterCell=function(e,t,n,r,s){var o=this,i={row:e,col:t},u=this.getColumnType(n);return a.createElement("th",{className:u+"Footer"},a.createElement(f.a,{key:"stepFooterCell"+t,ref:function(e){return o.addField(e,i)},tag:"div",text:r.lastSteps.cellValues[n],onChange:this.updateCell.bind(this,r.lastSteps,n),readOnly:s,maxChars:10,allowNavigation:!0,onNavigate:this.navigate.bind(this,i)}))},t.prototype.getStepHeaderColumn=function(e,t,n){return a.createElement("th",{key:"stepHeaderCell_"+e,className:n.toLowerCase()+"Header"},"Tutor"!=n?t:"")},t.prototype.getColumnType=function(e){var t={Kommentar:"Comment",Kurs:"Course",TutorComment:"Tutor"};return t.hasOwnProperty(e)?t[e]:"Step"},t.prototype.openCloseProgressCharts=function(e){localStorage.setItem("TermplannerBoxCharts",e)},t.prototype.getStepCharts=function(e,t){var n=this,r=JSON.parse(localStorage.getItem("TermplannerBoxCharts"));return a.createElement(C.a,{headerOpen:r,onOpenClose:this.openCloseProgressCharts,title:this.context.intl.formatMessage({id:"termplanner.chartsBoxTitle",defaultMessage:"Framsteg diagram"})},a.createElement("div",{className:"charts-container"},e.map(function(e){if(!e.isFixed){var r=t[e.name]?t[e.name].value:0,s=t[e.name].finalStepCompleted?null:n.context.intl.formatMessage({id:"termplanner.noFinalStepAvailable",defaultMessage:"Inget slutsteg tillgÃ¤ngligt"}),o=function(e){var t={};return t["M.spr"]=e.formatMessage({id:"termplanner.modernLanguageFullname",defaultMessage:"M.sprÃ¥k"}),t.Ma=e.formatMessage({id:"termplanner.mathsFullname",defaultMessage:"Matematik"}),t["Sv/SvA"]=e.formatMessage({id:"termplanner.swedishLanguageFullName",defaultMessage:"Svenska"}),t.Eng=e.formatMessage({id:"termplanner.englishLanguageFullName",defaultMessage:"Engelska"}),t}(n.context.intl);return a.createElement("div",{key:e.name,className:"chart-box"},a.createElement("h4",null,o[e.name]),a.createElement("div",{key:e.name,className:"inner-chart-box"},a.createElement(E,{key:e.name,percentage:r,errorMessage:s})))}})))},t.prototype.getWeekTutorNote=function(e,t){return e.find(function(e){return"tutor-note"===e.type&&e.weekNumber===t})},t.prototype.render=function(){var e=this,t=this.context.intl,n=N.b.ksTutorComment,r=N.b.termplannerCharts,s=new p(this.state.weekPlans,this.state.activeCourses,this.state.schoolTerm,k.b.KED_SCHOOL_LOCALE,t,n),o=s.termGoals,i=s.columns,u=this.props.tutored,l=this.state,c=l.loadingWeekPlans,d=l.error,m=l.weekPlans,f=l.dialogs,h=0===m.length&&!!d||u||c,g=0,v=s.weekPlansOrTutorNote.filter(function(e){return!e.type});return this.state.initialLoad?a.createElement("p",null,a.createElement(y.a,null),a.createElement(b.a,{id:"termplanner.loadingTermplanner",defaultMessage:"V.g. vÃ¤nta medan terminsplaner laddas..."})):a.createElement("div",{className:"termplanner"+(this.state.loadingWeekPlans?" loading-weekplans":"")+(this.state.loadingActiveCourses?" loading-courses":"")},r&&this.state.activeCourses.length>0&&this.getStepCharts(i,s.subjectProgress),a.createElement("div",{className:"ked_boxed"},a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,this.state.schoolTerm.toLocaleString(t,!0))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.prevTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.nextTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))))),a.createElement(b.a,{id:"termplanner.termPlanning",defaultMessage:"Terminsplanering",tagName:"h4"}),a.createElement("hr",null),a.createElement("table",{className:"termplanner-table zebra"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{className:"weekColumn"},a.createElement(b.a,{id:"termplanner.weekNumber",defaultMessage:"Vecka"})),i.map(function(t,n){var r=e.getColumnType(t.name);return e.getStepHeaderColumn(n,t.translatedName,r)}))),a.createElement("tbody",null,v.filter(function(e){return e.cellValues}).map(function(r,o){g=o;var u=r.weekNumber,l=r.academicWeekNumber,c=u,d=e.state.schoolTerm.isCurrentWeek(r.dateTime);return a.createElement("tr",{key:s.year+":"+c,className:d?"currentWeek":""},a.createElement("td",null,"sv"===t.locale?c:l),i.map(function(t,a){var i=e.getColumnType(t.name),l=e.getWeekTutorNote(s.weekPlansOrTutorNote,u);return"Tutor"===i?l&&n&&e.getTableCell(o,a,t.name,s,l,h,i):e.getTableCell(o,a,t.name,s,r,h,i)}))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",null,a.createElement(b.a,{id:"termplanner.finalStep",defaultMessage:"Slutsteg"})),i.filter(function(e){return!e.isFixed}).map(function(t,n){return e.getFooterCell(g+1,n,t.name,s,h)}),a.createElement("th",null,"-"),a.createElement("th",null),n&&a.createElement("th",null)),a.createElement("tr",null,a.createElement("th",null,a.createElement(b.a,{id:"termplanner.edsGoalGrades",defaultMessage:"TerminsmÃ¥l"})),i.filter(function(e){return!e.isFixed}).map(function(t,n){var r=e.getColumnType(t.name).toLowerCase();return a.createElement("th",{key:"grades_"+n,className:r+"Footer"},o[t.name])}),a.createElement("th",null,"-"),a.createElement("th",null,this.state.error&&a.createElement("p",{className:"error"},""+this.state.error)),n&&a.createElement("th",null))))),a.createElement(w.a,{dialogs:f,popDialog:function(){return e.setState({dialogs:f.slice(0,f.length-1)})}}))},t.contextType=v.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(31),s=function(){function e(){this.subscribers=[],this.env=null,this.version=1}return e.prototype.subscribe=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){return this.subscribers.push(e),e(this.env),[2]})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){return this.subscribers.forEach(function(t){return t(e.env)}),[2]})})},e.prototype.setNewEnv=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(s){switch(s.label){case 0:return n=++this.version,this.env={currentUser:e,tutored:!0},this.notifySubscribers(),[4,t().catch(function(t){return{currentUser:e,tutored:!0,error:t}})];case 1:return a=s.sent(),n===this.version&&(++this.version,this.env=r.a({},a,{tutored:!0}),this.notifySubscribers()),[2]}})})},e}();a.a.tutorEnv||(a.a.tutorEnv=new s),t.a=a.a.tutorEnv},,,function(e,t,n){var r={"./en-SG":87,"./en-SG.js":87,"./en-au":88,"./en-au.js":88,"./en-ca":89,"./en-ca.js":89,"./en-gb":90,"./en-gb.js":90,"./en-ie":91,"./en-ie.js":91,"./en-il":92,"./en-il.js":92,"./en-nz":93,"./en-nz.js":93,"./sv":94,"./sv.js":94};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=142},function(e,t){},function(e,t){},function(e,t,n){"use strict";var r=n(62);n.d(t,"a",function(){return r.a})},,,,,,function(e,t,n){"use strict";var r=n(3),a=n(73),s=n(15),o=Object(s.b)(location.search).user;if(o){var i=a.a.find(function(e){return e.username===o});i&&(r.a.currentUser=i)}var u=Object(s.b)(location.search),l=u.role,c=u.school;r.a.currentUser&&(l&&(r.a.currentUser.roles=l.split(",")),c&&(r.a.currentUser.school=c))},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={comment:t.comment?t.comment:""},n}return r.c(t,e),t.prototype.delete=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){return(0,this.props.closeDialog)(),this.props.deleteNoteData(),[2]})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){return e=this.props.closeDialog,t=this.state.comment,e(),this.props.updateData(t),[2]})})},t.prototype.render=function(){var e=this,t=this.props,n=t.weekNumber,r=t.intl,s=this.state.comment;return a.createElement("div",null,a.createElement("div",null,a.createElement("h2",null,r?r.formatMessage({id:"tutorNoteDialog.weekComment",defaultMessage:"Kommentar fÃ¶r vecka {weekNumber}"},{weekNumber:n}):"Kommentar fÃ¶r vecka "+n),a.createElement("hr",null),a.createElement("div",{className:"align-table"},a.createElement("div",{className:"fullWidth"},a.createElement("textarea",{autoFocus:!0,value:s,onChange:function(t){return e.setState({comment:t.target.value})}})))),a.createElement("div",null,a.createElement(a.Fragment,null,a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},r?r.formatMessage({id:"common.save",defaultMessage:"Spara"}):"Spara"," "),s&&a.createElement("a",{tabIndex:1,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.delete()}},r?r.formatMessage({id:"common.remove",defaultMessage:"Ta bort"}):"Ta bort"))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(55),s=n(6),o=n.n(s),i=function(e){function t(t,n){var a=this,s=n();return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans-ks",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t;return r.d(this,function(n){return e=this.startDate&&this.startDate.valueOf()||o()().valueOf(),t=this.endDate&&this.endDate.valueOf()||o()().valueOf(),[2,{from:e,to:t,role:"USER"}]})})}})||this}return r.c(t,e),t.prototype.refreshData=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=r.f(e,2),this.startDate=t[0],this.endDate=t[1],[4,this.mem.refreshFromServer()];case 1:return n.sent(),[2]}})})},t}(a.a)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(6),o=n.n(s);const i=6e4;var u,l=n(2);function c(e){e.id;var t=e.dayStart,n=e.startMoment,s=e.endMoment,c=e.text,d=e.location,m=e.description,p=e.width,f=e.pos,h=e.locale,g=e.zoom,v=e.htmlLink,b=e.className,k=o()(n).diff(t)/i*g,y=o()(s).diff(n)/i*g,E={hour:"numeric",minute:"2-digit"},w=n.toDate().toLocaleTimeString(h,E),T=s.toDate().toLocaleTimeString(h,E);return a.createElement("div",{className:"dayviewevent "+b,style:{position:"absolute",boxSizing:"border-box",top:k,left:(f||0)+"%",width:(p||100)+"%",height:y,maxHeight:y,overflow:"hidden"},title:w+" - "+T+" "+c+(d?"\n"+Object(l.a)(u||(u=r.e(["Plats: ",""],["Plats: ",""])),d):"")+(m?"\n"+m:"")},a.createElement("a",{className:"event-title",href:v,target:"calendar-event"},c),a.createElement("p",{className:"event-period"},w," - ",T),d&&a.createElement("p",{className:"event-location"},d),m&&a.createElement("p",{className:"event-description"},m))}function d(e){for(var t=e.dayStart,n=e.dayEnd,r=60*e.zoom,s=o()(t).hour(),i=o()(n).hour(),u=[],l=s;l<=i;++l)u.push(l);return a.createElement("div",null,u.map(function(e){return a.createElement("div",{key:e,className:"timeline",style:{width:"100%",boxSizing:"border-box",margin:r/2+"px 0 0 0",height:r/2}})}))}function m(e){var t=e.dayStart,n=e.dayEnd,s=e.events,u=e.locale,m=e.zoom,p=(e.isLastCall,o()(n).diff(t)/i*m),f=function(e,t){var n=[];return e.forEach(function(e,t){var a,s=n.filter(function(t){return t.startMoment&&t.endMoment&&t.startMoment<=e.startMoment&&t.endMoment>e.startMoment}),o=s.concat(Object(l.k)(s.map(function(e){return e.prevOverlaps})));(o=Object(l.j)(o,function(e){return e.index})).sort(Object(l.g)("startMoment"));var i=0;o.forEach(function(e,t){t%4==0&&(a=Math.max(25,Math.round(100/Math.max(o.length-t+1,1))),i=0),e.width=a,e.className=(e.className||"").split(" ").filter(function(e){return"splitted"!==e}).concat("splitted").join(" "),e.pos=i,i+=a}),n.push(r.a({},e,{index:t,pos:i,width:a,className:a<100?e.className?e.className+" splitted":"splitted":e.className,prevOverlaps:o}))}),n}(s);return a.createElement("div",{className:"dayview",style:{top:0,height:p,maxHeight:p,position:"relative",overflow:"hidden"}},a.createElement(d,{dayStart:t,dayEnd:n,zoom:m}),f.map(function(e){return a.createElement(c,{key:e.id,id:e.id,className:e.className,dayStart:t,startMoment:e.startMoment,endMoment:e.endMoment,text:e.text,location:e.location,description:e.description,width:e.width,pos:e.pos,locale:u,zoom:m,htmlLink:e.htmlLink})}))}function p(e){for(var t=e.startHour,n=e.endHour,r=e.locale,s=60*e.zoom,i=[],u=t;u<=n;++u)i.push(u);return a.createElement("div",{className:"hourmarker",style:{position:"relative",left:0,top:0,overflow:"visible",height:(n-t)*s}},i.map(function(e,t){var n=t*s;return a.createElement("span",{key:e},a.createElement("div",{style:{position:"absolute",left:0,top:n,marginTop:"-4px",padding:0}},o()().hour(e).minute(0).toDate().toLocaleString(r,{hour:"2-digit",minute:"2-digit"})))}))}function f(e){var t=e.status,n=e.error;return t||n?a.createElement("div",{className:"statusbar"},n?a.createElement("p",{className:"error"},""+n):a.createElement("p",{className:"status"},t)):null}var h=n(17),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.firstDay,n=e.startHour,r=e.endHour,s=e.numDays,i=e.events,u=e.locale,c=e.zoom,d=e.status,h=e.error,g=this.context.intl,v=[],b=o()(t),k=function(e){var t=o()(b).hour(n),a=o()(b).hour(r),s=o()(b).format("yyyy-MM-DD"),c=o()(t).startOf("day").valueOf()===o()().startOf("day").valueOf();v.push({name:Object(l.d)(t.toDate().toLocaleString(u,{weekday:"long",day:"numeric",month:"short"})),dayStart:t,dayEnd:a,isToday:c,events:i.filter(function(e){return e.start&&e.end&&e.start.dateTime&&e.end.dateTime&&(o()(e.start.dateTime).isBetween(t,a)||o()(e.end.dateTime).isBetween(t,a))}).map(function(e){return Object(l.f)(e,{startMoment:o()(e.start.dateTime),endMoment:o()(e.end.dateTime)})}).sort(function(e,t){return e.startMoment.valueOf>t.startMoment.valueOf?1:e.startMoment<t.startMoment?-1:0}),fullDayEvents:i.filter(function(e){return e.start&&e.end&&e.start.date&&e.end.date&&e.start.date<=s&&e.end.date>s}).map(function(e){return Object(l.f)(e,{startDate:e.start.date,endDate:e.end.date})})}),b=o()(b).add(1,"days")},y=0;y<s;++y)k();return a.createElement("div",{className:"vemendo-weekview"},a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",{style:{border:0}}),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement("p",{className:"dayname"},e.name))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement("p",{className:"week-number"},g.formatMessage({id:"calendar.weekNumber",defaultMessage:"V{weekNumber}"},{weekNumber:o()(t).week()}))),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},e.fullDayEvents.map(function(e){var t=e.id,n=e.text,r=e.location,s=e.description,o=e.htmlLink,i=e.className;return a.createElement("div",{key:t,className:"dayviewevent full-day "+i,title:n+(r?"\n"+g.formatMessage({id:"calendar.fullDayEventLocation",defaultMessage:"Plats: {location}"},{location:r}):"")+(s?"\n"+s:"")},a.createElement("a",{className:"event-title",href:o,target:"calendar-event"},n),r&&a.createElement("p",{className:"event-location"},r),s&&a.createElement("p",{className:"event-description"},s))}))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement(p,{startHour:n,endHour:r,locale:u,zoom:c})),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement(m,{key:e.dayStart.toISOString(),dayStart:e.dayStart,dayEnd:e.dayEnd,events:e.events,locale:u,zoom:c,isLastCall:""==d})," ")})),(d||h)&&(!h||"UnauthorizedError"!==h.name)&&a.createElement("tr",null,a.createElement("td",{style:{border:0}}),a.createElement("td",{style:{border:0},colSpan:s},a.createElement(f,{status:d,error:h}))))))},t.contextType=h.a,t}(a.Component),v=function(e){function t(t){var n=e.call(this,"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest")||this;return n.setBearerProvider(t),n}return r.c(t,e),t.prototype.listCalendars=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,this.ensureInited()];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,gapi.client.calendar.calendarList.list({})];case 3:return[2,e.sent().result.items];case 4:throw e.sent().error;case 5:return[2]}})})},t.prototype.batchEvents=function(e){var t=e.calendarList,n=e.timeMin,a=e.timeMax;return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:r.sent();try{return e=gapi.client.newBatch(),t.forEach(function(t){e.add(gapi.client.calendar.events.list({calendarId:t.id||"primary",timeMin:n&&new Date(n).toISOString(),timeMax:a&&new Date(a).toISOString(),showDeleted:!1,singleEvents:!0,fields:"items/id,items/start,items/end,items/summary,items/location,items/htmlLink,items/description",maxResults:2500,orderBy:"startTime"}),{id:t.id})}),[2,e.then(function(e){var n={};for(var r in t){var a=t[r].id,s=e.result[a].result.items;n[a]={calendar:t[r],events:s}}return n})]}catch(e){throw e.error}return[2]}})})},t}(n(78).a),b=n(81);var k=n(3);n.d(t,"a",function(){return y});var y=function(e){function t(t){var n=e.call(this,t)||this,r=t.firstDay,a=n.props,s=a.initialStartHour,o=a.initialEndHour,i=a.initialZoom;n.state={firstDay:r,startHour:s,endHour:o,zoom:i,calendars:{},calendarsBeingLoaded:[],status:"Loading calendars... (authenticating...)",error:null};var u=(t.env||k.a).googleTokenProvider;return n.gcal=new v(u),n.gcal.ensureInited().then(function(){return n.loadData(r)}).catch(function(e){n.handleError(e)}),n}return r.c(t,e),t.prototype.handleError=function(e){e||(e="Unknown error"),this.setState({error:e}),console.error(e.stack||e)},t.prototype.loadData=function(e){var t=this,n=this.props.numDays,r=this.context.intl;return this.setState({firstDay:e,calendars:{},calendarsBeingLoaded:[],error:null,status:r.formatMessage({id:"calendar.loadingCalendar",defaultMessage:"Loading calendars... (listing...)"})}),this.gcal.listCalendars().then(function(a){a=a.filter(function(e){return function(e){var t=e.summary||"",n=/owner/gi.test(e.accessRole),r=!!e.primary,a=/classroom/gi.test(e.id),s=/holiday/gi.test(e.id);return r||a||s||/schema/gi.test(t)&&n}(e)}),
//!/Week Numbers/ig.test(c.summary)
t.setState({status:r.formatMessage({id:"calendar.loadCalendarEvents",defaultMessage:"Load calendar events..."})}),t.gcal.batchEvents({calendarList:a,timeMin:o()(e).startOf("day"),timeMax:o()(e).add(n,"days").endOf("day")}).then(function(e){t.setState({calendars:e,status:""})})})},t.prototype.navigateToPreviousWeek=function(){var e=this;this.loadData(o()(this.state.firstDay).add(-1,"week")).catch(function(t){e.handleError(t)})},t.prototype.navigateToNextWeek=function(){var e=this;this.loadData(o()(this.state.firstDay).add(1,"week")).catch(function(t){e.handleError(t)})},t.prototype.render=function(){var e=this,t=this.props.numDays,n=this.context.intl,r=this.state,s=r.firstDay,i=r.startHour,u=r.endHour,c=r.zoom,d=r.calendars,m=r.status,p=r.error,f=Object.keys(d).map(function(e){return d[e]}).map(function(e){var t=e.calendar,n=e.events,r="Skolschema"===t.summary&&"Synchronized"===t.description,a=/holiday/.test(t.id),s=(/classroom/.test(t.id),[]);return t.colorId&&s.push("gcal-palette-"+t.colorId),r&&s.push("course-event"),a&&s.push("holiday-event"),n.map(function(e){return{id:e.id,start:e.start,end:e.end,text:e.summary,location:e.location,description:e.description,htmlLink:e.htmlLink,className:(r&&e.summary?s.concat(Object(b.a)("course-event-",e.summary)):s).join(" ")}})}),h=Object(l.k)(f);return a.createElement("div",{style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"btn-toolbar week-navigation"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.navigateToPreviousWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.navigateToNextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))),a.createElement("div",{className:"btn-group"},n.formatMessage({id:"calendar.currentDate",defaultMessage:"Vecka {week}, {year}"},{week:o()(s).week(),year:o()(s).year()}))),a.createElement(g,{locale:n.locale,firstDay:s,startHour:i,endHour:u,numDays:t,zoom:c,events:h,status:m,error:p}))},t.contextType=h.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(46),o=n(22),i=n(6),u=n.n(i),l=n(12),c=n(65),d=n(5),m=function(e){function t(t){var n=e.call(this,t)||this;return n.state={description:t.note?t.note.description:"",color:t.note?t.note.color:"yellow"},n}return r.c(t,e),t.prototype.delete=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,o;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,e.weekDate,t=e.courseName,n=e.weekPlan,e.note,a=e.closeDialog,s=e.env,o=this.state,o.description,o.color,a(),1!==Object.keys(n.plans).length?[3,2]:[4,s.kgTermPlannerRepo.delete([n.id])];case 1:return r.sent(),[3,4];case 2:return[4,s.kgTermPlannerRepo.update([n],function(e){delete e.plans[t]})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,o,i,u,l,c;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,t=e.weekDate,n=e.courseName,a=e.weekPlan,e.note,s=e.closeDialog,o=e.env,i=this.state,u=i.description,l=i.color,s(),0==u.length?[2]:a?[4,o.kgTermPlannerRepo.update([a],function(e){return e.plans[n]={description:u,color:l}})]:[3,2];case 1:return r.sent(),[3,4];case 2:return(c={})[n]={description:u,color:l},[4,o.kgTermPlannerRepo.insert([{id:Object(d.h)(),dateTime:t,plans:c}])];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.weekNumber,r=t.courseName,s=(t.weekPlan,t.note),o=t.env,i=this.state,u=i.description,l=i.color,c=o.tutored;return a.createElement("div",null,a.createElement("div",null,a.createElement("h2",null,"HÃ¤ndelse fÃ¶r vecka ",n," och ",r),a.createElement("hr",null),a.createElement("div",{className:"align-table"},a.createElement("div",null,"Beskrivning:"),a.createElement("div",{className:"fullWidth"},a.createElement("textarea",{autoFocus:!0,value:u,disabled:c,onChange:function(t){return e.setState({description:t.target.value})}}))),a.createElement("div",{className:"align-table"},a.createElement("div",null,"FÃ¤rg:"),a.createElement("div",null,a.createElement("select",{value:l,disabled:c,onChange:function(t){return e.setState({color:t.target.value})}},a.createElement("option",{value:"yellow"},"Gul"),a.createElement("option",{value:"yellowLight"},"Ljusgul"),a.createElement("option",{value:"cyan"},"GrÃ¶n"),a.createElement("option",{value:"cyanLight"},"LjusgrÃ¶n"),a.createElement("option",{value:"purple"},"Lila"),a.createElement("option",{value:"purpleLight"},"Ljuslila"),a.createElement("option",{value:"red"},"RÃ¶d"),a.createElement("option",{value:"redLight"},"Rosa"))))),a.createElement("div",null,c?a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.props.closeDialog()}},"Avbryt"):a.createElement(a.Fragment,null,a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},"Spara"),s&&a.createElement("a",{tabIndex:1,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.delete()}},"Ta bort"))))},t}(a.Component),p=n(2),f=n(40),h=n(152),g=n(25);n.d(t,"a",function(){return v});var v=function(e){function t(t){var n=e.call(this,t)||this,r=new Date;return n.state={now:r,courses:[],weekPlans:[],isLoadingCourses:!0,isLoadingWeekPlans:!0,dialogs:[]},n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.loadEDSCourses(),this.props.env.kgTermPlannerRepo.mem.subscribe(this.updateWeekPlans)},t.prototype.componentWillUnmount=function(){this.props.env.kgTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e){this.setState({weekPlans:e,isLoadingWeekPlans:!1})},t.prototype.loadEDSCourses=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,,2,3]),e=Object(o.c)(u()(this.state.now)),t=new s.a(e).period,a=p.j,[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return n=a.apply(void 0,[r.sent(),function(e){return e.name}]),this.setState({courses:n}),[3,3];case 2:return this.setState({isLoadingCourses:!1}),[7];case 3:return[2]}})})},t.prototype.onNoteClick=function(e,t,n,r,s){var o=this;this.openDialog(a.createElement(m,{weekNumber:e,weekDate:t,courseName:n,weekPlan:r,note:s,env:this.props.env,closeDialog:function(){return o.closeDialog()}}))},t.prototype.onTutorClick=function(e,t){var n=this;this.openDialog(a.createElement(h.a,{weekNumber:t,comment:e.value,updateData:function(t){return n.updateTutorNoteField(e,t)},deleteNoteData:function(){return n.deleteTutorNoteField(e.id)},closeDialog:function(){return n.closeDialog()}}))},t.prototype.deleteTutorNoteField=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.props.env.kgTermPlannerRepo.delete([e])];case 1:return t.sent(),[3,3];case 2:return t.sent(),[3,3];case 3:return[2]}})})},t.prototype.updateTutorNoteField=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if((e&&e.value||"")===t)return[2];n.label=1;case 1:return n.trys.push([1,3,,4]),e.value=t,e.acl=[new d.b("tutorFor",this.props.env.currentUser.mail,"S").toString(),new d.b("email",this.props.env.currentUser.mail,"R").toString()],[4,this.props.env.kgTermPlannerRepo.upsert(e,function(e){return e.value=t})];case 2:return[2,n.sent()];case 3:return n.sent(),[3,4];case 4:return[2]}})})},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.render=function(){for(var e=this,t=this.state,n=t.courses,s=t.now,i=t.isLoadingCourses,m=t.isLoadingWeekPlans,p=t.weekPlans,h=t.dialogs,v=i||m,b=[],k=[],y=Object(o.c)(u()(s)),E=r.f(Object(o.d)(s,"AT"===y.term),2),w=E[0],T=E[1],N=r.f(Object(o.b)(y.term),2),C=N[0],D=N[1],S=g.b.kgTutorComment,O=p.filter(function(e){return!e.type}),M=p.filter(function(e){return"tutor-note"===e.type}),x=function(e){var t=e.week(),n=e.year(),r=Object(f.a)(n,t);if(t>=C&&t<=D){var a=O.filter(function(e){return e.dateTime>=r.notBefore&&e.dateTime<=r.notAfter})[0],s=M.filter(function(e){return e.dateTime>=r.notBefore&&e.dateTime<=r.notAfter})[0],o=e.clone().startOf("week").valueOf();b.push({weekNumber:t,weekDate:o,weekPlan:a}),k.push({weekNumber:t,tutorValue:s||{value:"",dateTime:o,id:Object(d.h)(),type:"tutor-note"}})}},L=w.clone();L.valueOf()<T.valueOf();L=L.clone().add(1,"week").startOf("week"))x(L);return a.createElement("div",{className:"ked_boxed"},a.createElement("h4",null,"Terminsplanering"),a.createElement("hr",null),v?a.createElement(l.a,null):0===n.length?a.createElement("div",null,"Terminsplaneraren aktiveras nÃ¤r du skrivits in pÃ¥ dina kurser"):a.createElement("table",{className:"termplanner-table zebra"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Vecka"),n.map(function(e,t){return a.createElement("th",{key:t,className:"kgCourseHeader"},e.name)}),S&&a.createElement("th",{className:"tutorHeader"}))),a.createElement("tbody",null,b.map(function(t,r){var s=t.weekNumber===u()().week(),o=k&&k.find(function(e){return e.weekNumber===t.weekNumber});return a.createElement("tr",{key:r,className:s?"currentWeek":""},a.createElement("td",null,t.weekNumber),n.map(function(n,r){var s=t.weekPlan&&t.weekPlan.plans[n.name];return a.createElement("td",{key:r,className:s?"courseNote note-color-"+s.color:"courseNote","data-tooltip":s&&s.description,title:s&&s.description,onClick:function(){return e.onNoteClick(t.weekNumber,t.weekDate,n.name,t.weekPlan,s)}},s?a.createElement("i",{className:"fas fa-align-center"}):"")}),S&&(e.props.tutored?a.createElement("td",{key:r,onClick:function(){return e.onTutorClick(o.tutorValue,t.weekNumber)},className:"tutorCell"},o.tutorValue.value?a.createElement("div",{key:r,"data-tooltip":o.tutorValue.value},a.createElement("i",{className:"fas fa-comment-dots"})):a.createElement("div",{key:r},a.createElement("i",{className:"fas fa-comment-medical"}))):o.tutorValue.value?a.createElement("td",{className:"tutorCell"},a.createElement("div",{"data-tooltip":o.tutorValue.value},a.createElement("i",{className:"far fa-comment-dots"}))):a.createElement("td",null)))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",{key:"points"},"PoÃ¤ng"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.credits)})),a.createElement("tr",null,a.createElement("th",null,"BetygsmÃ¥l"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.periodGoalGrade)})))),a.createElement(c.a,{dialogs:h,popDialog:function(){return e.setState({dialogs:h.slice(0,h.length-1)})}}))},t}(a.Component)},,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(0),a=n(155),s=n(109);function o(){return r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0})}})}},function(e,t,n){"use strict";var r=n(1),a=n(3),s=n(0),o=n.n(s),i=n(2),u=n(12),l=n(139),c=n(7),d=n(5),m=n(46),p=n(20),f=n(153),h=n(55),g=n(22),v=function(e){function t(t,n){var a=this,s=n(),o=new Date,i=r.f(Object(g.d)(o,o.getMonth()>=7),2),u=i[0],l=i[1];return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){return r.d(this,function(e){return[2,{from:u.startOf("week").add(-2,"days").toDate().valueOf(),to:l.startOf("week").add(5,"days").toDate().valueOf(),role:"USER"}]})})}})||this}return r.c(t,e),t}(h.a),b=new v(function(){return a.a.kedBackendClient},function(){return a.a.currentUser});a.a.kgTermPlannerRepo=b;var k=n(30);function y(e,t){return r.b(this,void 0,void 0,function(){function n(t,n,a){var s=null;return{getBearer:function(){return s||this.refreshBearer()},refreshBearer:function(){return s=function(){return r.b(this,void 0,void 0,function(){var s,o,i,u;return r.d(this,function(r){switch(r.label){case 0:return[4,t.get(n,a)];case 1:return 200!==(s=r.sent()).status?[3,3]:[4,s.json()];case 2:return[2,r.sent()];case 3:return o=d.c.bind,i=[void 0,s.status],u="Could not retrieve tutor token for "+e+". Error Message: ",[4,s.text()];case 4:throw new(o.apply(d.c,i.concat([u+r.sent()])))}})})}()}}}var s,o,i,u,l,h;return r.d(this,function(r){switch(r.label){case 0:return s={mail:e,displayName:t,roles:["USER"],school:a.a.currentUser.school,tutorFor:e},o=n(a.a.kedBackendClient.http,"tutor/token",{userEmail:e}),i=new d.d(p.c,o,c.b.KED_API_URL),u=n(i.http,"tutor/convert-token/google"),l=new m.b(p.c,c.b.EDS_API_URL,o,function(){return e}),(h={currentUser:s,bearerProvider:o,edsClient:l,googleTokenProvider:u,kedBackendClient:i,tutored:!0}).ksTermPlannerRepo=new f.a(function(){return i},function(){return s}),h.kgTermPlannerRepo=new v(function(){return i},function(){return s}),h.userTasksRepo=new k.a(function(){return i},function(){return s}),[4,o.getBearer().catch(function(e){console.error(e)})];case 1:return r.sent(),[2,h]}})})}n.d(t,"a",function(){return E});var E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,students:[]},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,5,6]),[4,a.a.edsClient.getTeacherTutorStudents()];case 1:return(e=r.sent()).sort(Object(i.h)(["lastName","firstName"])),t=e.length>0?e.map(function(e){return{mail:e.email,displayName:e.firstName+" "+e.lastName}}):[a.a.currentUser],[4,this.setState({students:t})];case 2:return r.sent(),[3,6];case 3:return n=r.sent(),console.error("Could not list tutor students",n),[4,this.setState({students:[a.a.currentUser]})];case 4:return r.sent(),[3,6];case 5:return this.setState({isLoading:!1}),[7];case 6:return[2]}})})},t.prototype.onSelectUser=function(e){var t=this.state.students.filter(function(t){return t.mail===e})[0],n=r.a({},t,{roles:["USER"]});l.a.setNewEnv(n,function(){return y(e,e)})},t.prototype.render=function(){var e=this,t=this.state,n=t.isLoading,r=t.students;return n?o.a.createElement(u.a,null):o.a.createElement("div",{className:"tutors-select"},o.a.createElement("select",{onChange:function(t){return t.target.value&&e.onSelectUser(t.target.value)}},o.a.createElement("option",{value:""},"VÃ¤lj elev"),r.map(function(e){return o.a.createElement("option",{key:e.mail,value:e.mail},e.displayName," (",e.mail,")")})))},t}(o.a.Component)},,,,,,,function(e,t,n){"use strict";var r=n(7);r.b.KED_LOCALE="sv",r.b.KED_SCHOOL_LOCALE="sv"},,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r,a=n(1),s=n(0),o=n(2),i=n(3),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assessments:[],error:null,loading:!1},n}return a.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return a.b(this,void 0,void 0,function(){var e,t;return a.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,i.a.edsClient.getLatestAssessments(this.props.limit)];case 2:return e=n.sent(),this.setState({assessments:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=this.state.assessments.some(function(e){return!!e.gradeName});return s.createElement("div",{className:"ked_boxed"},s.createElement("h4",null,Object(o.a)(r||(r=a.e(["Senaste bedÃ¶mningar"],["Senaste bedÃ¶mningar"])))),s.createElement("hr",null),s.createElement("ul",{className:"latest-assesments zebra"},this.state.assessments.map(function(t,n){return s.createElement("li",{key:n},e&&""!=t.gradeName&&s.createElement("span",{className:"grade pill pull-right"},t.gradeName),s.createElement("span",{className:"date pill pull-left"},t.publishDateTime.substr(0,10)),t.courseName==t.courseUnitName?s.createElement("h5",null,s.createElement("strong",null,t.courseName)):s.createElement("h5",null,s.createElement("strong",null,t.courseName)," / ",s.createElement("em",null,t.courseUnitName)),s.createElement("br",null),s.createElement("p",null,t.text))})))},t}(s.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(0),a=n(155),s=n(3);function o(){return r.createElement(a.a,{env:s.a,tutored:!1})}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(138),s=n(109),o=n(17);function i(e){var t=e.intl;return r.createElement(o.a.Provider,{value:{intl:t}},r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0,initialDate:new Date})}}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(69),o=n(13),i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courses:[],isLoading:!0},n.updateHiddenCoursesState=n.updateHiddenCoursesState.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){s.a.subscribe(this.updateHiddenCoursesState,{fullCourse:!1})},t.prototype.updateHiddenCoursesState=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.componentWillUnmount=function(){s.a.unsubscribe(this.updateHiddenCoursesState)},t.prototype.getCourseUrl=function(e){return Object(o.f)(this.props.viewCourseUrl,{courseId:e})},t.prototype.render=function(){var e=this,t=(this.props.viewCourseUrl,this.state),n=t.isLoading,r=t.error,s=(t.courses,this.state.courses.filter(function(e){return e.visible}));return a.createElement(a.Fragment,null,n?a.createElement("li",{className:"lvl2 header"},a.createElement("a",null,"Laddar...")):r?a.createElement("li",{className:"lv12"},a.createElement("a",null,"Kunde inte ladda kurser.")):s.map(function(t){var n=t.name,r=t.id;return a.createElement("li",{key:r,className:"lvl2"},a.createElement("a",{href:e.getCourseUrl(r)},n))}))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n.n(a),o=n(55),i=n(3),u=i.a.weekNotesRepo,l=function(e){function t(){var t=e.call(this,{getClient:function(){return i.a.kedBackendClient},optimistic:!1,table:"notes",user:i.a.currentUser?i.a.currentUser.mail:"",getQueryOptions:function(){return r.b(t,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}})||this;return t}return r.c(t,e),t}(o.a);u||(u=i.a.weekNotesRepo=new l);var c=n(82),d=n(5),m=n(56),p=n(52),f=n(80),h=n(12);function g(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,o;return r.d(this,function(r){switch(r.label){case 0:return a=!1,s=setTimeout(function(){a=!0,n()},e),[4,t()];case 1:return o=r.sent(),a||clearTimeout(s),[2,o]}})})}var v=n(8),b=n(17),k=function(e){function t(t){var n=e.call(this,t)||this;return n.onChange=n.onChange.bind(n),n.autoSaver=new c.a(function(){return n.save()}),n.state={isLoading:!0,showLoadingProgress:!1,showSavingProgress:!1,everEdited:!1,notes:""},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.showProgressIfLoadingTakesTime(),u.mem.subscribe(this.onChange)},t.prototype.showProgressIfLoadingTakesTime=function(){var e=this;this.timeoutHandle=setTimeout(function(){return e.state.isLoading&&e.setState({showLoadingProgress:!0})},300)},t.prototype.componentWillUnmount=function(){u.mem.unsubscribe(this.onChange),this.autoSaver.stop(),clearTimeout(this.timeoutHandle)},t.prototype._save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:e=3,n.label=1;case 1:return this.isNotesEdited()&&e?[4,u.upsert(this.state.weekNote,function(e){e.content=t.state.notes})]:[3,4];case 2:n.sent(),n.label=3;case 3:return--e,[3,1];case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return this.state.showSavingProgress||this.state.isLoading||!this.isNotesEdited()?[3,8]:[4,this.setState({error:void 0})];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,4,6,8]),[4,g(300,function(){return t._save()},function(){return t.setState({showSavingProgress:!0})})];case 3:return n.sent(),[3,8];case 4:return e=n.sent(),console.error(e),[4,this.setState({error:this.context.intl.formatMessage({id:"common.errorSavingData",defaultMessage:"Kunde inte spara."})})];case 5:return n.sent(),[3,8];case 6:return[4,this.setState({showSavingProgress:!1})];case 7:return n.sent(),[7];case 8:return[2]}})})},t.prototype.isNotesEdited=function(){var e=this.state,t=e.weekNote,n=e.notes;return!!t&&n!==t.content},t.prototype.getTranslatedActions=function(e){var t=Object.assign({},"sv"===e.locale?p.a:f.a);return Object.keys(t).forEach(function(n){var r=p.a[n].title;t[n].title=e.formatMessage({id:"wysiwyg."+n,defaultMessage:r}),"image"===n&&(t[n].promptMsg=e.formatMessage({id:"wysiwyg.imagePromptMsg",defaultMessage:p.a[n].promptMsg}))}),t},t.prototype.onChange=function(e){var t=e.length>0?e[e.length-1]:{id:Object(d.h)(),dateTime:Date.now(),content:"",acl:[new d.b("email",i.a.currentUser.mail,"S")].map(function(e){return e.toString()})},n={weekNote:t,isLoading:!1,showLoadingProgress:!1};this.state.weekNote&&this.state.weekNote.id===t.id&&0!==e.length||(n.notes=t.content),this.setState(n)},t.prototype.render=function(){var e=this,t=this.state,n=t.notes,r=t.showLoadingProgress,a=t.isLoading,o=t.showSavingProgress,i=t.error,u=t.everEdited,l=this.context.intl;return s.a.createElement("div",null,s.a.createElement("div",{className:"ked_boxed kedNotepad"},s.a.createElement("h3",null,s.a.createElement(v.a,{id:"weekNotebook.title",defaultMessage:"Anteckningar"})),s.a.createElement(m.a,{actions:["bold","italic","underline","strikethrough","heading1","heading2","heading3","olist","ulist","outdent","indent","line"],defaultActions:this.getTranslatedActions(l),html:a?"<div></div>":n.substr(0,16384),onChange:!a&&function(t){e.setState({notes:t.substr(0,16384),everEdited:!0}),e.autoSaver.triggerChange(500)}}),s.a.createElement("hr",null),i?s.a.createElement("p",{className:"error"},i):r?s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.loading",defaultMessage:"Laddar..."}),s.a.createElement(h.a,null)):o?s.a.createElement(s.a.Fragment,null,s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.saving",defaultMessage:"Sparar..."})," Â  "),s.a.createElement(h.a,null)):this.isNotesEdited()?s.a.createElement(s.a.Fragment,null,"Â "):u?s.a.createElement(v.a,{id:"common.saved",defaultMessage:"Sparad"}):s.a.createElement(s.a.Fragment,null,"Â ")))},t.contextType=b.a,t}(s.a.Component);function y(e){var t=e.intl;return a.createElement(b.a.Provider,{value:{intl:t}},a.createElement(k,null))}n.d(t,"b",function(){return k}),n.d(t,"a",function(){return y})},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2),o=n(46),i=function(){return function(e){this.subjects=e.map(function(e){var t=e.periodGoals.map(function(e){return{period:new o.a(e.periodName),goal:e.gradeName}});return{name:e.courseUnitName,atGoal:t.filter(function(e){return"AT"===e.period.term}).map(function(e){return e.goal})[0],stGoal:t.filter(function(e){return"ST"===e.period.term}).map(function(e){return e.goal})[0],finalGoal:e.finalGoalGrade,strategies:e.strategyText}})}}(),u=n(3),l=function(){return function(e){var t={};e.forEach(function(e){return e.capabilities.forEach(function(e){return t[e.formName]=!0})});var n=Object.keys(t);this.columnHeaders=[{name:"FramtidsfÃ¶rmÃ¥ga",type:"header"},{name:"OmrÃ¥de",type:"header"}].concat(n.map(function(e){return{name:e,type:"year"}})),this.vtHts=Object(s.k)(n.map(function(e){return["HT","VT"]}));var r=[];e.forEach(function(e){var t=[{type:"ability",name:e.abilityName}],n={};e.capabilities.forEach(function(e){var a=[{type:"term",selected:!1!==e.htHasValue},{type:"term",selected:!1!==e.vtHasValue}];n[e.capabilityName]?t&&a.forEach(function(e){return t.push(e)}):(t.length>1&&(r.push(t),t=[]),n[e.capabilityName]=!0,t.push({type:"capability",name:e.capabilityName}),a.forEach(function(e){return t.push(e)}))}),t&&r.push(t)}),this.capabRows=r}}(),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loading:!1,data:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentFutureAbilities()];case 2:return e=n.sent(),this.setState({data:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=new l(this.state.data),t=e.columnHeaders,n=e.vtHts,r=e.capabRows;return a.createElement("div",null,a.createElement("h5",null,"FramtidsfÃ¶rmÃ¥gor"),a.createElement("div",{className:"partialEditStudyPlanViewMode"},a.createElement("table",{style:{width:"100%"},className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,t.map(function(e,t){var n=e.name;return"header"===e.type?a.createElement("th",{key:t,rowSpan:2},n):a.createElement("th",{key:t,colSpan:2},n)})),a.createElement("tr",{className:"header"},n.map(function(e,t){return a.createElement("th",{key:t},e)}))),a.createElement("tbody",null,r.map(function(e,t){return a.createElement("tr",{key:t,className:Math.floor(t/3)%2&&"tableOdd"},e.map(function(e,t){return"ability"===e.type?a.createElement("td",{key:t,rowSpan:3,className:"goalsSubject"},e.name):"capability"===e.type?a.createElement("td",{key:t,className:"goalsSubject"},e.name):e.selected?a.createElement("td",{key:t,className:"edsSelected"},a.createElement("div",{className:"markedItem"})):a.createElement("td",{key:t})}))})))))},t}(a.Component);n.d(t,"a",function(){return v});var d,m,p,f,h,g,v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loadingStudyPlans:!1,studyPlans:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loadingStudyPlans:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentGoals()];case 2:return e=n.sent(),this.setState({studyPlans:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loadingStudyPlans:!1}),[2]}})})},t.prototype.render=function(){var e=new i(this.state.studyPlans),t="gymnasium"!==(""+u.a.currentUser.schoolType).toLowerCase();return a.createElement("div",{className:"ked_boxed"},a.createElement("h4",null,Object(s.a)(d||(d=r.e(["MÃ¥l"],["MÃ¥l"])))),a.createElement("hr",null),a.createElement("table",{className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,Object(s.a)(m||(m=r.e(["Ãmne"],["Ãmne"])))),t&&a.createElement("th",null,Object(s.a)(p||(p=r.e(["HT"],["HT"])))),t&&a.createElement("th",null,Object(s.a)(f||(f=r.e(["VT"],["VT"])))),a.createElement("th",null,Object(s.a)(h||(h=r.e(["SlutmÃ¥l"],["SlutmÃ¥l"])))),a.createElement("th",null,Object(s.a)(g||(g=r.e(["Strategier"],["Strategier"])))))),a.createElement("tbody",null,e.subjects.map(function(e,n){return a.createElement("tr",{key:e.name,className:n%2&&"tableOdd"},a.createElement("td",{className:"goalsSubject"},e.name),t&&a.createElement("td",{className:"goalsTerm"},e.atGoal),t&&a.createElement("td",{className:"goalsTerm"},e.stGoal),a.createElement("td",{className:"goalsEnd"},e.finalGoal),a.createElement("td",null,e.strategies))}))),a.createElement("div",{className:"divider"}),a.createElement(c,null))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0);function s(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,fetch(e+"?nodeID="+t,{credentials:"same-origin"})];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()]}})})}var o=n(135),i=n(59),u=n(8),l=n(17);n.d(t,"a",function(){return d});var c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={data:null},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,s(this.props.apiPath,this.props.pageId)];case 1:return e=t.sent(),this.setState({data:e}),[2]}})})},t.prototype.render=function(){if(!this.state.data)return a.createElement("div",null);var e=this.state.data,t=e.moduleName,n=e.subject,r=e.commonTasks,s=e.learningGoals,i=e.step,u=this.props.intl,c=r.map(function(e){return{id:e.id,name:e.name,url:e.url,courseName:n.name,learningGoal:i&&s.length>0?t+" - Ã¶vergripande":t}}),d=s.map(function(e){return{name:e.name,learningTasks:e.tasks.map(function(t){return{id:t.id,name:t.name,url:t.url,courseName:n.name,learningGoal:e.name}})}});return i&&(c.forEach(function(e){return e.step=i}),d.forEach(function(e){return e.learningTasks.forEach(function(e){return e.step=i})})),a.createElement(l.a.Provider,{value:{intl:u}},a.createElement(o.a,{commonTasks:c,learningGoals:d}))},t}(a.Component),d=Object(i.a)(Object(u.d)(c))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(173),n(151),n(99),n(3)),s=n(0),o=n.n(s),i=[{moduleName:"Steg 22",subject:{name:"Spanska",course:{name:"Spanska",url:"/steg/spanska.4.4ae4e9d2159ef4e0120ad6d3.html"}},commonTasks:[],learningGoals:[{name:"Aktiviteter i hemmet",tasks:[{name:"Aktiviteter i hemmet hos en peruansk familj",url:"/steg/spanska/block5/steg22/uppgifter/aktiviteterihemmet/aktiviteterihemmethosenperuanskfamilj.4.4ae4e9d2159ef4e0120adb40.html"},{name:"Uppgift till aktiviteter i hemmet",url:"/steg/spanska/block5/steg22/uppgifter/aktiviteterihemmet/uppgifttillaktiviteterihemmet.4.4ae4e9d2159ef4e0120af887.html"}]},{name:"Familjeliv",tasks:[{name:"Vad pÃ¥gÃ¥r i din familj nu?",url:"/steg/spanska/block5/steg22/uppgifter/familjeliv/vadpagaridinfamiljnu.4.4ae4e9d2159ef4e0120b25e9.html"},{name:"Uppgift familjeliv",url:"/steg/spanska/block5/steg22/uppgifter/familjeliv/uppgiftfamiljeliv.4.4ae4e9d2159ef4e0120af73a.html"}]},{name:"Samtal om familjeliv",tasks:[{name:"Samtalsdokument familjeliv",url:"/steg/spanska/block5/steg22/uppgifter/samtalomfamiljeliv/samtalsdokumentfamiljeliv.4.4ae4e9d2159ef4e01209fe03.html"},{name:"Samtalskarta-familjeliv",url:"/steg/spanska/block5/steg22/uppgifter/samtalomfamiljeliv/samtalskartafamiljeliv.4.4ae4e9d2159ef4e0120af6fd.html"}]}]},{moduleName:"Teknik",subject:{name:"Teknik",course:{name:"TrÃ¥d 5",url:"/kurser/arskurs8/trad5.19.2d4f4005159f895477a15cc.html"}},commonTasks:[{name:"Tryck ",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/tryck.4.4ae4e9d2159ef4e01209dcde.html"},{name:"DiskussionsfrÃ¥gor till industriella revolutionen",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/diskussionsfragortillindustriellarevolutionen.4.4ae4e9d2159ef4e0120a6fab.html"},{name:"Hur fungerar en Ã¥ngmaskin",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/hurfungerarenangmaskin.4.4ae4e9d2159ef4e0120a1309.html"},{name:"Ãngmaskinens betydelse",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/angmaskinensbetydelse.4.4ae4e9d2159ef4e0120a3deb.html"}],learningGoals:[{name:"Identifiera och analysera Ã¥ngmaskinen utifrÃ¥n Ã¤ndamÃ¥lsenlighet och funktion,"},{name:"anvÃ¤nda teknikomrÃ¥dets begrepp och uttrycksform"},{name:"vÃ¤rdera konsekvenser av Ã¥ngmaskinen fÃ¶r individ, samhÃ¤lle och miljÃ¶, och"},{name:"analysera drivkrafter bakom teknikutveckling runt Ã¥ngmaskinen och hur tekniken har fÃ¶rÃ¤ndratsÃ¶ver tid."}]}],u=["testdata/learning-tasks/amnesintegrerad.json","testdata/learning-tasks/loopad.json","testdata/learning-tasks/steg-larandemal.json","testdata/learning-tasks/steg-matte.json","testdata/learning-tasks/vanlig-kurs.json"],l=n(145),c=n(6),d=n.n(c),m=n(154),p=n(180),f=n(175),h=n(176),g=n(165),v=n(138),b=n(177),k=n(62),y=n(181),E=n(178),w=n(128),T=n(179),N=n(166),C=n(109),D=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){return o.a.createElement("div",null,o.a.createElement(N.a,null),o.a.createElement(C.a,{tutored:!0,createComponent:function(e){return o.a.createElement(v.a,{key:e.currentUser.mail,env:e,tutored:!0,initialDate:new Date})}}),o.a.createElement(g.a,null),o.a.createElement(C.a,{tutored:!0,createComponent:function(e){return o.a.createElement(l.a,{key:e.currentUser.mail,env:e,viewCourseUrl:"https://www.svt.se"})}}),o.a.createElement(C.a,{tutored:!0,createComponent:function(e){return o.a.createElement(m.a,{env:e,firstDay:d()().startOf("week").weekday(1),initialStartHour:7,initialEndHour:18,initialZoom:.75,numDays:5})}}))},t}(o.a.Component),S={LatestAssessments:{component:f.a,props:function(){return{locale:navigator.language,limit:15}}},KSGoals:{component:p.a,props:function(){return{}}},KSTermPlanner:{component:v.a,props:function(){return{env:a.a,tutored:!1,initialDate:new Date}}},KSTermPlannerTutored:{component:b.a,props:function(){return{}}},KGTermPlanner:{component:h.a,props:function(){return{}}},KGTermPlannerTutored:{component:g.a,props:function(){return{}}},WeekPlanner:{component:k.a,props:function(){return{viewCourseUrl:"http://svt.se",env:a.a}}},TutorsView:{component:D,props:function(){return{}}},TutorsSelect:{component:N.a,props:function(){return{}}},Calendar:{component:m.a,props:function(){return{firstDay:d()().startOf("week").weekday(1),numDays:5,initialStartHour:7,initialEndHour:18,initialZoom:.75}}},LearningTasks:{component:y.a,props:function(){return{apiPath:localStorage.getItem("selectedLearningModuleUrl"),pageId:"dummy"}}},MyCourses:{component:E.a,props:function(){return{viewCourseUrl:"https://kg-test.sitevision.se/courseviewer"}}},ListCourses:{component:w.a,props:function(){return{viewCourseUrl:"https://kg-test.sitevision.se/courseviewer"}}},WeekNotes:{component:T.b,props:function(){return{}}}},O=n(11),M=n.n(O),x=n(117),L=n(8),j=n(59),P=n(17),I=function(e){function t(t){var n=e.call(this,t)||this,a=localStorage.getItem("selectedComponent")||Object.keys(S)[0],s=S[a].props();return n.state={selectedComponent:a,selectedLearningModule:parseInt(localStorage.getItem("selectedLearningModule")||"0"),selectedLearningModuleUrl:localStorage.getItem("selectedLearningModuleUrl")||"",selectedComponentReal:S[a].component,selectedCompProps:r.a({},s)},n}return r.c(t,e),t.prototype.componentDidUpdate=function(){this.renderTestComponent()},t.prototype.componentDidMount=function(){},t.prototype.renderTestComponent=function(){if(a.a.learningModuleTasks=i[this.state.selectedLearningModule],M()(this.componentArea).html(""),a.a.currentUser){var e=S[this.state.selectedComponent]||S[Object.keys(S)[0]];this.setState({selectedComponentReal:e.component,selectedCompProps:r.a({},e.props())})}},t.prototype.render=function(){var e=this,t=this.state.selectedComponentReal,n=this.props.intl;return a.a.currentUser?s.createElement(P.a.Provider,{value:{intl:n}},s.createElement("div",{className:"test-page"},s.createElement("div",{className:"header"},s.createElement("div",{className:"test-selects"},s.createElement("form",null,s.createElement("h4",null,s.createElement(L.a,{id:"test.pageDescription",defaultMessage:"Testsida fÃ¶r komponenter till nya startsidan"})),s.createElement("table",null,s.createElement("tbody",null,s.createElement("tr",null,s.createElement("td",null,s.createElement("label",{htmlFor:"testComponent"},s.createElement(L.a,{id:"test.chooseComponentLabel",defaultMessage:"Komponent"}))),s.createElement("td",null,s.createElement("select",{id:"testComponent",value:this.state.selectedComponent,onChange:function(t){e.setState({selectedComponent:t.target.value}),localStorage.setItem("selectedComponent",t.target.value),window.location.reload()}},Object.keys(S).map(function(e){return s.createElement("option",{key:e,value:e},e)})))),"LearningGoalsAndTasks"===this.state.selectedComponent&&s.createElement("tr",null,s.createElement("td",null,s.createElement("label",{htmlFor:"testLearningModule"},"Kursmodul")),s.createElement("td",null,s.createElement("select",{id:"testLearningModule",value:this.state.selectedLearningModule,onChange:function(e){localStorage.setItem("selectedLearningModule",e.target.value),window.location.reload()}},i.map(function(e,t){return s.createElement("option",{key:t,value:t},e.subject.course.name+"/"+e.subject.name+"/"+e.moduleName)})))),"LearningTasks"===this.state.selectedComponent&&s.createElement("tr",null,s.createElement("td",null,s.createElement("label",{htmlFor:"testLearningModuleUrl"},"Kursmodul")),s.createElement("td",null,s.createElement("select",{id:"testLearningModuleUrl",value:this.state.selectedLearningModuleUrl,onChange:function(e){localStorage.setItem("selectedLearningModuleUrl",e.target.value),window.location.reload()}},u.map(function(e,t){return s.createElement("option",{key:t,value:e},e)}))))))))),s.createElement("hr",null),s.createElement("div",{className:"componentRow"},s.createElement(t,r.a({},this.state.selectedCompProps)),s.createElement("div",{className:"componentArea",ref:function(t){return e.componentArea=t}}),s.createElement("div",{className:"week-planner"},"LearningTasks"===this.state.selectedComponent&&s.createElement(l.a,{viewCourseUrl:"http://www.svt.se/nyheter",env:a.a}))))):s.createElement(x.a,null)},t}(s.Component),U=Object(j.a)(Object(L.d)(I));t.default=U}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmVudi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9LRUQuY2ZnLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2V4ZWMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwialF1ZXJ5XCIiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FjY2Vzcy1jb250cm9sL2luZGV4LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hY2Nlc3MtY29udHJvbC9nZXQtdXNlci1jbGFpbXMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC91dGlscy5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvcXVlcnktc3RyaW5nLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvcmVzdGNsaWVudC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2tlZC1iZWFyZXItcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9hY2Nlc3MtY29udHJvbC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2h0dHAtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jaGFydHMvZ29hbC1wcm9ncmVzcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYi9iZWFyZXItc3RvcmFnZS1zZXNzaW9uc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUtdGFzay5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1tb2RlbC1taWdyYXRvci9taWdyYXRlLWNvdXJzZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL2luZGV4LmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViL2hhc2gtcmVzdG9yZXIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC13ZWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9jbGllbnR3ZWIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3NjaG9vbC1tb21lbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2ZlYXR1cmVzL2luZGV4LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL0tFRC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC10ZXh0LWlucHV0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci93ZWVrcGxhbm5lci1wZXJzaXN0ZWQtc3RhdGUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3JlcG9zL3VzZXItdGFza3MtcmVwby50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9rZWQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvZW1pdHRlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS92YWx1ZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvd2Vla3V0aWwudHMiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RET01cIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9tYXAuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3NjaG9vbC10ZXJtLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9tYWtlLXN1c3BlbnNlLWFwaS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYXBpcy9lZHNjbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dGFyZWEudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL2ZpYmVyLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucy1zdi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3Mva2VkLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvd2FzaC1odG1sLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9pbWFnZS1lZGl0LWFjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2ZlYXR1cmVzL2ZlYXR1cmVzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9TZXR1cExhbmd1YWdlSW50bC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvZ2V0LXRhc2stdHlwZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci91c2VyLXRhc2tzLWJveC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvYWRkLWN1c3RvbS1nb2FsLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci9hZGQtY3VzdG9tLXRhc2sudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL2FkZC1vci1lZGl0LXN1Yi10YXNrLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci9lZGl0LXVzZXItdGFzay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2hhcnRzL3Byb2dyZXNzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci93ZWVrcGxhbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvcmVmaW5lci50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jaGFydHMvY2hhcnRzLXV0aWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9kaWFsb2dzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2Utdmlld2VyL3N1YmNvbXBvbmVudHMvY29uZmlybWF0aW9uLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2Utdmlld2VyL3N1YmNvbXBvbmVudHMvdGFzay1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3MvaGlkZGVuLWNvdXJzZXMtcmVwby50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC9kYXRhL3VzZXJzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL21vbWVudC1zdi1sb2NhbGUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3JlcG9zL3JlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMvZ29vZ2xlLWNsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL2NvdXJzZS1uYW1lLXRvLWNzcy1jbGFzcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvcGVuZGluZy1qb2IudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL2NvbmZpZ3VyZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFsLXNldHRlcnMvc2V0LWJlYXJlci1wcm92aWRlcnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL3NldC1rZWQtYmFja2VuZC1jbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL3NldC1lZHMtY2xpZW50LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy90dXRvcmFibGUtY29tcG9uZW50LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC91dGlscy9jaG9vc2UtdXNlci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2NvbnRlbnQtZWRpdGFibGUtZmllbGQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2xpc3QtY291cnNlcy9saXN0LWNvdXJzZXMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS12aWV3ZXIvc3ViY29tcG9uZW50cy9sZWFybmluZy1nb2Fscy1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvZ2VuZXJpYy1zY2hvb2wtdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtdGVybXBsYW5uZXIvdGVybXBsYW5uZXItdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2dlbmVyaWMtc2Nob29sLXRlcm0udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtdGVybXBsYW5uZXIvdmlld21vZGVsLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy9rcy10ZXJtcGxhbm5lci1yZXBvLWluc3RhbmNlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NoYXJ0cy9kb3VnaG51dC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtdGVybXBsYW5uZXIvdGVybXBsYW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL0tFRC50dXRvckVudi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIHN2fGVuIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL2luZGV4LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L3NldC1jdXJyZW50LXVzZXIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtdGVybXBsYW5uZXIvdHV0b3ItZGlhbG9nLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwby50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL2RheS12aWV3LWV2ZW50LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jYWxlbmRhci90aW1lLWxpbmVzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jYWxlbmRhci9kYXktdmlldy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2FsZW5kYXIvY3J1bmNoLWNvbGxpZGluZy1ldmVudHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2FsZW5kYXIvaG91ci1tYXJrZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL3N0YXR1cy1iYXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL3dlZWstdmlldy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMvZ29vZ2xlLWNhbGVuZGFyLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jYWxlbmRhci9zaG91bGQtaW5jbHVkZS1jYWxlbmRhci50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rZy10ZXJtcGxhbm5lci93ZWVrLW5vdGUtZGlhbG9nLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rZy10ZXJtcGxhbm5lci9rZy10ZXJtcGxhbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva2ctdGVybXBsYW5uZXIva2ctdGVybXBsYW5uZXItdHV0b3JlZC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3JlcG9zL2tnLXRlcm1wbGFubmVyLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3JlcXVlc3QtdHV0b3JlZC10b2tlbnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdHV0b3JzLXNlbGVjdC90dXRvcnMtc2VsZWN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC90ZXN0LWNvbmZpZy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9sYXRlc3QtYXNzZXNzbWVudHMvbGF0ZXN0LWFzc2Vzc21lbnRzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rZy10ZXJtcGxhbm5lci9rZy10ZXJtcGxhbm5lci1zZWxmLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rcy10ZXJtcGxhbm5lci9rcy10ZXJtcGxhbm5lci10dXRvcmVkLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9teS1jb3Vyc2VzL215LWNvdXJzZXMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy93ZWVrLW5vdGVzLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2lmLXRha2VzLXRpbWUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vlay1ub3RlYm9vay93ZWVrLW5vdGVib29rLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrLW5vdGVib29rL3Jvb3Qtd2Vlay1ub3RlYm9vay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vlay1ub3RlYm9vay9pbmRleC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rcy1nb2Fscy9nb2Fscy12aWV3bW9kZWwudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtZ29hbHMvZnV0dXJlLWFiaWxpdGllcy12aWV3bW9kZWwudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtZ29hbHMvZnV0dXJlLWFiaWxpdGllcy10YWJsZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtZ29hbHMvZ29hbHMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL2tlZC1sZWFybmluZ2dvYWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2xlYXJuaW5nLXRhc2tzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC9kYXRhL2xlYXJuaW5nTW9kdWxlcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC9kYXRhL2xlYXJuaW5nTW9kdWxlczIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdHV0b3JzLXZpZXcvdHV0b3JzLXZpZXcudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L2NvbXBvbmVudHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3Rlc3QvdGVzdHBhZ2UudHN4Il0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiNiIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiUmVhY3QiLCJjYXBpdGFsaXplRmlyc3QiLCJzdHIiLCJjaGFyQ29kZUF0Iiwic3Vic3RyIiwidG9Mb2NhbGVVcHBlckNhc2UiLCJleHRlbmQiLCJvYmoiLCJleHRlbnNpb24iLCJrZXlzIiwiZm9yRWFjaCIsImNsb25lIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmNhdCIsImZsYXR0ZW4iLCJhIiwiY29tcGFyZVByb3AiLCJwcm9wIiwiYiIsImFQcm9wIiwiYlByb3AiLCJjb21wYXJlUHJvcHMiLCJwcm9wcyIsImxvY2FsZXMiLCJvcHRpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwibG9jYWxlQ29tcGFyZSIsIm1hcCIsInNwbGl0IiwiX2EiLCJfYiIsInRzbGliX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJmaXJzdFBhcnQiLCJyZXN0IiwiY21wUGFydCIsImZpcnN0QSIsImZpcnN0QiIsInJlZHVjZSIsImNtcDEiLCJjbXAyIiwiTCIsInRleHQiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJydiIsImJ1aWxkTWVzc2FnZSIsImRhdGVUaW1lUmV2aXZlciIsImV4ZWMiLCJEYXRlIiwic2hvd0luZm8iLCJtc2ciLCJldmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsInNob3dFcnJvciIsImVyck1zZyIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJtYXhMZW5ndGgiLCJtYXhMZW4iLCJhcnJheVRvTG9va3VwIiwia2V5QWNjZXNzb3IiLCJpdGVtIiwiYXJyYXkiLCJhcnJheVRvTWFwIiwiY2hlcnJ5UGlja1Byb3BzIiwicHJvcHNUb1BpY2siLCJwcm9wc1RvUGlja18xIiwicHJvcHNUb1BpY2tfMV8xIiwibmV4dCIsImRvbmUiLCJwYXJhbSIsImRpc3RpbmN0IiwieCIsInNoYWxsb3dFcXVhbHMiLCJrZXlzQSIsImtleXNCIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImVudiIsIl9rZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9qc19kaXN0X2pzX2tlZF9iYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY2ZnIiwiX0tFRF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY29tbWFuZCIsImRvY3VtZW50IiwiZXhlY0NvbW1hbmQiLCJqUXVlcnkiLCJTcGlubmVyIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNsYXNzTmFtZSIsImFyaWEtaGlkZGVuIiwiSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMiLCJoYXNBY2Nlc3MiLCJ1c2VyIiwiZG9jIiwicmVxdWVzdGVkUmlnaHQiLCJjbGFpbXMiLCJ0eXBlIiwibWFpbCIsInNjaG9vbCIsInJvbGVzIiwicm9sZSIsImdldFVzZXJDbGFpbXMiLCJ0dXRvckZvciIsImZpbHRlciIsImNsYWltIiwiY2xpZW50IiwiZnJvbVN0cmluZ0FycmF5IiwiYWNsIiwiaGFzV3JpdGVBY2Nlc3MiLCJpc1RlYWNoZXJBdFNjaG9vbCIsImlzVGVhY2hlciIsInNvbWUiLCJiZWxvbmdzVG9TY2hvb2wiLCJ0b0xvd2VyQ2FzZSIsImlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbCIsImluY2x1ZGVzIiwiaW1wZXJzb25hdGlvbkVudiIsImFjdEFzIiwidXJsIiwiY3VycmVudFF1ZXJ5IiwicXVlcnlfc3RyaW5nIiwibG9jYXRpb24iLCJzZWFyY2giLCJuZXdRdWVyeSIsInRzbGliX2VzNiIsIm5ld1F1ZXJ5U3RyaW5nIiwiaHJlZiIsImhhc2giLCJwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSIsInF1ZXJ5IiwicHJlc2VydmVkUXVlcnkiLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNU18xIiwiSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVNfMV8xIiwicEhhc2giLCJpbmRleE9mIiwiY3JlYXRlVVVJRCIsImF2b2lkU2ltdWx0YW5vdXNDYWxscyIsImdldEdsb2JhbElkIiwiY29tcHV0ZVByZWRlc3RpbmF0ZWRJZCIsInVwZGF0ZUFycmF5Iiwibm93IiwicmVwbGFjZSIsIk1hdGgiLCJyYW5kb20iLCJmbG9vciIsInRvU3RyaW5nIiwibWV0aG9kIiwib25nb2luZ1Byb21pc2UiLCJ0aGlzIiwidGhlbiIsInJlYWxtIiwicGFkIiwiRXJyb3IiLCJoZXgiLCJqb2luIiwiaW5wdXQiLCJlbmNvZGVyIiwiZGlnZXN0IiwibGFiZWwiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJzdWJ0bGUiLCJzZW50IiwibmliYmxlIiwibWFwcGVyIiwicmV0dmFsIiwibWFwcGVkIiwicGFyc2VRdWVyeVN0cmluZyIsImxvY2F0aW9uU2VhcmNoIiwidG9Mb3dlciIsInBhcnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0cmltIiwiZW5jb2RlUGFyYW1zIiwicGFyYW1zIiwidW5kZWZpbmVkIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2VuZXJhdGVRdWVyeVN0cmluZyIsInNwbGl0VXJsQW5kUXVlcnkiLCJ1cmxXaXRoUG9zc2libGVRdWVyeSIsInBRdWVyeSIsIkxhbmd1YWdlQ29udGV4dCIsImludGwiLCJyZXN0Y2xpZW50X1Jlc3RDbGllbnQiLCJSZXN0Q2xpZW50IiwiaXNvbW9ycGhpYyIsImJhc2VVcmwiLCJudW1PdXRzdGFuZGluZ09wZXJhdGlvbnMiLCJfc3RhdHVzIiwiZW1pdHRlciIsImZldGNoT3B0aW9ucyIsImF1dGhIZWFkZXIiLCJiZWFyZXIiLCJ1c2VybmFtZSIsImJ0b2EiLCJwYXNzd29yZCIsImJlYXJlclByb3ZpZGVyIiwiY29uZmlndXJhYmxlIiwiZmV0Y2giLCJwYXRoIiwiaGVhZGVycyIsIl90aGlzIiwiZGlzcGF0Y2giLCJfZmV0Y2giLCJyZXMiLCJjYXRjaCIsImVyciIsIlByb21pc2UiLCJyZWplY3QiLCJxdWVyeVN0ciIsInRva2VuSW5mbyIsIl9jIiwid3d3YXV0aCIsIl9kIiwiX2UiLCJjYWNoZSIsIm5vY2FjaGUiLCJ1dGlscyIsImdldEJlYXJlciIsImV4cGlyZXMiLCJsb2ciLCJyZWZyZXNoQmVhcmVyIiwidG9rZW4iLCJBdXRob3JpemF0aW9uIiwic3RhdHVzIiwidGVzdCIsIkFjY2VwdCIsInBvc3QiLCJDb250ZW50LVR5cGUiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImRlbGV0ZSIsImtlZF9iZWFyZXJfcHJvdmlkZXJfS2VkQmVhcmVyUHJvdmlkZXIiLCJLZWRCZWFyZXJQcm92aWRlciIsInN0b3JhZ2UiLCJ0b2tlbklkIiwiY2xpZW50SWQiLCJjbGllbnRTZWNyZXQiLCJ0b2tlblVybCIsInRva2VuUXVlcnkiLCJ0cnlzIiwibG9hZCIsInJldHJpZXMiLCJ3YXJuIiwic3RhdHVzVGV4dCIsInNhdmUiLCJEb2N1bWVudEFjY2VzcyIsImFjY2Vzc0NsYWltVHlwZSIsImFjY2Vzc0NsYWltVmFsdWUiLCJyaWdodCIsImZyb21TdHJpbmciLCJhYyIsImNsYWltVHlwZSIsInVuZXNjYXBlIiwiY2xhaW1WYWx1ZSIsImVzY2FwZSIsImFjY2Vzc0NvbXBvbmVudCIsInRvU3RyaW5nQXJyYXkiLCJ1c2VyQ2xhaW1zIiwiaHR0cF9lcnJvcl9IdHRwRXJyb3IiLCJfc3VwZXIiLCJIdHRwRXJyb3IiLCJjb2RlIiwia2VkX2JhY2tlbmRfY2xpZW50X0tlZEJhY2tlbmRDbGllbnQiLCJrZWRfYmFja2VuZF9jbGllbnRfQmF0Y2hSdW5uZXIiLCJLZWRCYWNrZW5kQ2xpZW50IiwiaHR0cCIsImdldE15Q2xhaW1zIiwidGFibGUiLCJqc29uIiwiaWQiLCJsaXN0IiwibXV0YXRpb25zT25FbXB0eSIsImJhdGNoIiwicmVxcyIsInNvcnQiLCJyZXExIiwicmVxMiIsIm9wIiwiZG8iLCJzY29wZUZuIiwicnVubmVyIiwibXV0YXRpb25SZXF1ZXN0cyIsImRlbGV0ZVJlYWxtIiwiYWRkIiwiYnJhbmNoSWQiLCJwdXQiLCJ1cGRhdGUiLCJkZWx0YURvYyIsIm1lcmdlIiwidGFyZ2V0QnJhbmNoSWQiLCJjbGVhckJyYW5jaCIsInNoYXJlIiwidW5zaGFyZSIsImxpbmsiLCJzb3VyY2VUYWJsZSIsInNvdXJjZUlkIiwidGFyZ2V0VGFibGUiLCJ0YXJnZXRJZCIsImxpbmsyIiwidW5saW5rIiwidW5saW5rMiIsInVuZG9MaW5rIiwiQmF0Y2hSdW5uZXIiLCJnb2FsX3Byb2dyZXNzX0dvYWxQcm9ncmVzcyIsIkdvYWxQcm9ncmVzcyIsImNyZWF0ZVByb2dyZXNzIiwibnVtYmVyT2ZUYXNrcyIsImNvbXBsZXRlZE51bWJlck9mVGFza3MiLCJtYXhpbXVtVGFza3NEaXNwbGF5ZWQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwcm9ncmVzc0NvbG9yIiwicHJvZ3Jlc3MiLCJleHRlcm5hbF9SZWFjdF8iLCJ0YXNrTm8iLCJmaWxsIiwiY3giLCJjeSIsInJlbmRlciIsImRlZmF1bHRQcm9wcyIsIm51bWJlcm9mVGFza3MiLCJvcGVuX2Nsb3NlX2JveF9PcGVuQ2xvc2VCb3giLCJPcGVuQ2xvc2VCb3giLCJzdGF0ZSIsImhlYWRlck9wZW4iLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwic2V0U3RhdGUiLCJ0aXRsZSIsImNoaWxkcmVuIiwiaGVhZGVyQ2xhc3NOYW1lIiwiY29udGVudENsYXNzTmFtZSIsImRpc3BsYXlQcm9ncmVzcyIsInByb2dyZXNzRGF0YSIsImluYWN0aXZhdGVkIiwiaW5hY3RpdmF0ZWRSZW5kZXIiLCJvbkNsaWNrIiwib25PcGVuQ2xvc2UiLCJCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwicmVzb2x2ZSIsInBhcnNlIiwiZXgiLCJtaWdyYXRlVGFzayIsInRhc2siLCJyZXNvdXJjZXMiLCJtaWdyYXRlIiwiZ3JhcGhzIiwiY291cnNlIiwidGFza0lkcyIsInJlc3BvbnNpYmxlVGVhY2hlcnMiLCJyZXNvdXJzZXMiLCJ0YXNrcyIsIm1pZ3JhdGVDb3Vyc2UiLCJyZWRpckhhc2giLCJoYXNoX3Jlc3RvcmVyX2EiLCJ0aW1lIiwicmVtb3ZlSXRlbSIsIl8iLCJfX21pZ3JhdG9yX21peGVkX2luIiwiaW5jbHVkZSIsIktlZE1vZGVsTWlncmF0b3JNaXhpbiIsImtlZF9iYWNrZW5kX2NsaWVudCIsInRpbWVPZlBhZ2VMb2FkIiwia2VkX2JhY2tlbmRfY2xpZW50X3dlYl9XZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciIsIldlYlNlcnZlckJlYXJlclByb3ZpZGVyIiwidG9rZW5QYXRoIiwidG9rZW5SZXNwb25zZU1hcHBlciIsInJlZGlyZWN0IiwiY3JlZGVudGlhbHMiLCJ3YW50c1JlZGlyZWN0IiwicmVsb2FkIiwic2VsZiIsImtlZF9iYWNrZW5kX2NsaWVudF93ZWJfS2VkQmFja2VuZENsaWVudFdlYiIsIktlZEJhY2tlbmRDbGllbnRXZWIiLCJhcGlCYXNlVXJsIiwicHJvdmlkZXJPclRva2VuUGF0aCIsImdldEZpcnN0QW5kTGFzdFdlZWtPZlRlcm0iLCJ0ZXJtIiwiZ2V0VGVybVN0YXJFbmREYXRlIiwiZGF0ZSIsImlzRmlyc3RUZXJtIiwidGVybVllYXIiLCJnZXRNb250aCIsImdldEZ1bGxZZWFyIiwidGVybVllYXJNb21lbnQiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0Iiwid2VlayIsInN0YXJ0T2YiLCJlbmRPZiIsImdldFNjaG9vbE1vbWVudCIsInRoaXNZZWFyIiwieWVhciIsImlzQXV0dW1uIiwibW9udGgiLCJhY2FkZW1pY1llYXIiLCJhZGRZZWFyIiwiYVllYXIiLCJudW1ZZWFyc1RvQWRkIiwieWVhclN0ciIsInBhcnNlSW50IiwiX2ZlYXR1cmVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJLRUQiLCJUZXh0SW5wdXQiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX2Zvcm1fZmllbGRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImF1dG9Gb2N1cyIsInNpemUiLCJvbkNoYW5nZSIsImV2IiwidGFyZ2V0IiwicGxhY2Vob2xkZXIiLCJ3ZWVrcGxhbm5lcl9wZXJzaXN0ZWRfc3RhdGVfV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSIsIldlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUiLCJ1c2VyT3JDb3B5IiwibGFzdFdyaXRlIiwid2Vla0RhdGUiLCJtb21lbnRfc3ZfbG9jYWxlIiwidmFsdWVPZiIsIm9wZW5Db3Vyc2VzIiwiYXNzaWduIiwiY29va2llIiwibG9jYWxTdG9yYWdlIiwic3RvcmVkRGF0YSIsImlzRXhwaXJlZCIsIm1vbWVudF9kZWZhdWx0IiwiYXNPZiIsImlzQmVmb3JlIiwiRVhQSVJBVElPTl9IT1VSUyIsIlZFUlNJT04iLCJ1c2VyVGFza3NSZXBvIiwiS0VEX2VudiIsInVzZXJfdGFza3NfcmVwb19Vc2VyVGFza3NSZXBvIiwiVXNlclRhc2tzUmVwbyIsImdldENsaWVudCIsImdldEN1cnJlbnRVc2VyIiwib3B0aW1pc3RpYyIsImdldFF1ZXJ5T3B0aW9ucyIsImN1cnJlbnRVc2VyIiwidXNlckVtYWlsIiwicGVyc2lzdGVkU3RhdGUiLCJ3ZWVrTnVtYmVyIiwiZnJvbSIsImtlZFdlZWsiLCJ3ZWVrdXRpbCIsIm5vdEJlZm9yZSIsInRvIiwibm90QWZ0ZXIiLCJmbGFncyIsInVwZGF0ZVBlcnNpc3RlZFN0YXRlIiwic3RhdGVDaGFuZ2VzIiwibWVtIiwibm90aWZ5U3Vic2NyaWJlcnMiLCJzZXRUYXNrRG9uZVN0YXRlIiwidXNlclRhc2siLCJtb2RpZmllZEl0ZW0iLCIkbWV0YSIsInNpbWlsYXJUYXNrcyIsImlkZW50aWNhbFRhc2tzIiwiY291cnNlTmFtZSIsImxlYXJuaW5nR29hbCIsInNldFN1YlRhc2tEb25lU3RhdGUiLCJzdWJUYXNrSWQiLCJzdWJUYXNrcyIsInN0Iiwic2V0V2Vla1BsYW5uZXJCb3hPcGVuIiwiaXNPcGVuIiwiY2hhbmdlV2VlayIsImtlZXBDdXJyZW50RGF0ZSIsIm5ld1BlcnNpc3RlZCIsInJlZnJlc2hGcm9tU2VydmVyIiwic3Vic2NyaWJlIiwic3Vic2NyaWJlciIsInByb3h5U3Vic2NyaWJlciIsInVzZXJUYXNrcyIsInV0Iiwid2Vla1RleHRzIiwia2VkYmFja2VuZF9jbGllbnQiLCJkYXRlVGltZSIsImFzc2Vzc21lbnQiLCJzdHJhdGVneSIsInVuc3Vic2NyaWJlIiwic3Vic2NyaWJlcnMiLCJrZWRfcmVwbyIsImtlZEJhY2tlbmRDbGllbnQiLCJlbnN1cmVIYXNEYXRhIiwiRW1pdHRlciIsImluaXRpYWxWYWx1ZSIsIm9ic2VydmVyIiwic3Vic2NyaXB0aW9uIiwiX2Rpc3BhdGNoIiwiZGlzcGF0Y2hFcnJvciIsIlZhbHVlIiwiX29ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9tYXBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9jb2xsZWN0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfZmliZXJfY29udGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwicmVhZCIsIm5vdGlmeSIsInJlc29sdmVkIiwic3Vic2NpcHRpb24iLCJjdXJyZW50RmliZXIiLCJjdXJyZW50Iiwic3Vic2NyaXB0aW9ucyIsImZuIiwicHJlZml4IiwidG9Db2xsZWN0aW9uIiwiY29tYmluZUxhdGVzdCIsIm90aGVyIiwibXlTdWJzY3JpcHRpb24iLCJvdGhlclN1YnNjcmlwdGlvbiIsInZhbHVlcyIsIml0ZW1zIiwic3dpdGNoTWFwIiwibWFwcGVkU3Vic2NyaXB0aW9uIiwicmV0dXJuZWRTdWJzY3JpcHRpb24iLCJvYnNlcnZhYmxlT3JWYWx1ZSIsIk9ic2VydmFibGUiLCJfc3Vic2NyaWJlIiwiRm9ybUZpZWxkIiwiaHRtbEZvciIsIm5vZGUiLCJyZWN1Y2hlY2siLCJTZXQiLCJmaW5kSWQiLCJoYXMiLCJjaGlsZCIsImNoaWxkSWQiLCJDb2xsZWN0aW9uIiwiX3ZhbHVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfZW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX21hcCIsImVtaXR0ZXJfMSIsImZsYXQiLCJ0b1ZhbHVlIiwibWUiLCJvcmRlckJ5IiwiZ3JvdXBCeSIsImZpcnN0IiwiYXJyIiwiUmVtb3ZlSXRlbSIsInN0eWxlIiwiX3V0aWxzX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ0ZW1wbGF0ZU9iamVjdF8xIiwiS0VEV2VlayIsImdldE5leHRXZWVrRGF0ZSIsImdldFByZXZXZWVrRGF0ZSIsImdldEFkanVzdGVkV2VlayIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwibW9tZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsInRvRGF0ZSIsImdldFRpbWUiLCJuZXh0RGF0ZSIsIndlZWtzSW5ZZWFyIiwiYWRqdXN0ZWQiLCJwcmV2RGF0ZSIsIndlZWtkYXkiLCJSZWFjdERPTSIsImluaXRNYXBNZXRob2QiLCJjdG9yIiwic2Nob29sX3Rlcm1fU2Nob29sVGVybSIsIlNjaG9vbFRlcm0iLCJkYXRlT3JTY2hvb2xNb21lbnQiLCJzY2hvb2xNb21lbnQiLCJzY2hvb2xfbW9tZW50IiwibmV4dFRlcm0iLCJwcmV2VGVybSIsInRvTG9jYWxlU3RyaW5nIiwic2hvcnRZZWFyIiwiZm9ybWF0TWVzc2FnZSIsImRlZmF1bHRNZXNzYWdlIiwiZGVmYXVsdE9wdGlvbnMiLCJpc0FwaU1ldGhvZCIsImYiLCJjYWNoZUV4cGlyYXRpb24iLCJlZHNjbGllbnRfRWRzQ2xpZW50IiwiRWRzQ2xpZW50IiwidXNlckVtYWlsR2V0dGVyIiwib25nb2luZ1Byb21pc2VzIiwiYXJnc0pzb24iLCJzdXNwZW5zZSIsImFwaSIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzdXNwZW5kaWZ5IiwiY2FjaGVkRW50cnkiLCJwcm9taXNlIiwidGltZW91dCIsIm1ha2VTdXNwZW5zZUFwaSIsInByaXZhdGl6aW5nQ2FjaGVCdXN0IiwiZ2V0QWN0aXZlQ291cnNlcyIsInEiLCJjb3Vyc2VDb2RlIiwiQ291cnNlQ29kZSIsInBlcmlvZE5hbWUiLCJQZXJpb2ROYW1lIiwiY291cnNlcyIsImV4XzEiLCJnZXRMYXRlc3RBc3Nlc3NtZW50cyIsImxpbWl0IiwiaXNOYU4iLCJDb3VudCIsImFzc2Vzc21lbnRzIiwiZ2V0U3R1ZGVudEdvYWxzIiwic3R1ZGVudEdvYWxzIiwiZ2V0U3R1ZGVudEZ1dHVyZUFiaWxpdGllcyIsInN0dWRlbnRGdXR1cmVBYmlsaXRpZXMiLCJnZXRUZWFjaGVyVHV0b3JTdHVkZW50cyIsInN0dWRlbnRzIiwiZ2V0U2Nob29sVHVpdGlvbkdyb3VwcyIsInNjaG9vbFR1aXRpb25Hcm91cHMiLCJnZXRUdWl0aW9uR3JvdXBTdHVkZW50cyIsInR1aXRpb25Hcm91cFN0dWRlbnRzIiwiZ2V0U2Nob29sVGVhY2hlcnMiLCJzY2hvb2xUZWFjaGVycyIsImdldEFjYWRlbWljWWVhclRlcm1zIiwic2Nob29sTG9jYWxlIiwibW9ja19lZHNfZGF0YSIsIlNvdXRoSW5kaWEiLCJpc1NhbWVPckFmdGVyIiwiZmlyc3RUZXJtIiwic3RhcnREYXRlIiwiaXNTYW1lT3JCZWZvcmUiLCJzZWNvbmRUZXJtIiwiZW5kRGF0ZSIsIk5vcnRoSW5kaWEiLCJob2xpZGF5cyIsImZpcnN0VGVybU1vbWVudCIsInNlY29uZFRlcm1Nb21lbnQiLCJzdGFydEZpcnN0VGVybURhdGUiLCJzdGFydFNlY29uZFRlcm1EYXRlIiwiZW5kRmlyc3RUZXJtRGF0ZSIsImVuZFNlY29uZFRlcm1EYXRlIiwidG9EYXRlU3RyaW5nIiwiZWRzY2xpZW50X0VEU1BlcmlvZCIsIkVEU1BlcmlvZCIsInBlcmlvZFN0cmluZ09yU2Nob29sVGVybSIsInBlcmlvZCIsInN0YXJ0c1dpdGgiLCJzY2hvb2xUZXJtIiwiVGV4dEFyZWFGb3JtRmllbGQiLCJjb2xzIiwicm93cyIsIkZpYmVyQ29udGV4dCIsInByb3ZpZGVycyIsImFkZFByb3ZpZGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwic2V0Q3VycmVudEdldHRlckZyb21Qcm92aWRlcnMiLCJyZW1vdmVQcm92aWRlciIsInNldCIsIl9leGVjX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJib2xkIiwiaWNvbiIsIml0YWxpYyIsInVuZGVybGluZSIsInN0cmlrZXRocm91Z2giLCJoZWFkaW5nMSIsImhlYWRpbmcyIiwiaGVhZGluZzMiLCJwYXJhZ3JhcGgiLCJxdW90ZSIsIm9saXN0IiwidWxpc3QiLCJvdXRkZW50IiwiaW5kZW50IiwibGluZSIsInByb21wdCIsImltYWdlIiwicHJvbXB0TXNnIiwiY29tcG9uZW50IiwiZWxlbWVudCIsInNlbCIsInJhbmdlIiwiaW1nIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsInRhYkluZGV4IiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJjb2xsYXBzZSIsImluc2VydE5vZGUiLCJzZXRTdGFydEFmdGVyIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJvbmZvY3VzIiwib25Gb2N1cyIsIm9uYmx1ciIsIm9uQmx1ciIsImNvbnRlbnREaXYiLCJpbm5lckhUTUwiLCJLZWRSZXBvIiwiX3JlcG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInF1ZXJ5T3B0aW9ucyIsImNhY2hlQnVzdCIsImdldENhY2hlQnVzdCIsInJlZ2VuZXJhdGVDYWNoZUJ1c3QiLCJrZWRiYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwidXBzZXJ0IiwidXBkYXRlciIsIiRldGFnIiwidXBkYXRlZEl0ZW0iLCJpbnNlcnQiLCJlIiwibW9kaWZpZWRJdGVtcyIsIm1lbVJlcG9JdGVtIiwiZmluZCIsIml0IiwiYnIiLCJpZHMiLCJmcmVzaEl0ZW1zIiwiZnJlc2hJdGVtIiwibW9kaWZpZWQiLCJuZXdFdGFncyIsInN0cmlwR3JhcGhzIiwiZ3JhcGgiLCJzdHJpcHBlZCIsImZvcmVpZ25JdGVtcyIsImdyYXBoc18xIiwiZV8yIiwiZ3JhcGhzXzFfMSIsInN0cmlwcGVkXzEiLCJzdHJpcHBlZF8xXzEiLCJwYXJzZXIiLCJET01QYXJzZXIiLCJIVE1MX1dBU0hfUE9MSUNZIiwidSIsInN0cmlrZSIsInByZSIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJjbGFzcyIsInRhYmluZGV4IiwidWwiLCJvbCIsImxpIiwiaHIiLCJkaXYiLCJzcGFuIiwiYm9yZGVyIiwidGJvZHkiLCJ0aGVhZCIsInRmb290IiwidHIiLCJ0ZCIsImNvbHNwYW4iLCJyb3dzcGFuIiwidGgiLCJhYmJyIiwic2NvcGUiLCJzb3J0ZWQiLCJ3YXNoSHRtbCIsImh0bWwiLCJwYXJzZUZyb21TdHJpbmciLCJjaGlsZE5vZGVzIiwid2FzaE5vZGUiLCJ0YWdOYW1lIiwiaXNFbGVtZW50IiwicG9saWN5Iiwid2FzaENoaWxkTm9kZXMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlIiwicmVtb3ZlTWlkZGxlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJhdHRyIiwiYWxsb3dlZCIsInJlbW92ZUF0dHJpYnV0ZSIsIndhc2hFbGVtZW50IiwiY2xhc3NlcyIsInd5c2l3eWdfV3lzaXd5ZyIsIld5c2l3eWciLCJmb2N1c1JlY3QiLCJvbk1vdXNlRG93biIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZVVwIiwiY29tcG9uZW50RGlkTW91bnQiLCJyZWFkT25seSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbGVtIiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXBvcnROdW1DaGFycyIsImlubmVyVGV4dCIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIm5leHRTdGF0ZSIsInRyaWdnZXJPbkNoYW5nZSIsIm5ld1N0YXRlIiwiZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QiLCJwYXJlbnRFbGVtZW50IiwiZm9jdXNFbGVtIiwicmVsYXRlZFRhcmdldCIsImZvY3VzUmVjdERpdiIsIm1ha2VDbGlja2FibGUiLCJjb3JuZXIiLCJnZXRSZWN0Q29ybmVyIiwicmVzaXplU3RhcnRYIiwiY2xpZW50WCIsInByZXZlbnREZWZhdWx0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJuZXdXaWR0aCIsIm1heCIsImVuZHNXaXRoIiwiZmFjdG9yIiwibmV3SGVpZ2h0IiwiaGVpZ2h0IiwiZXhlY0ltYWdlRWRpdEFjdGlvbiIsImNtZCIsImNzc0Zsb2F0IiwiY2IiLCJkZWZhdWx0QWN0aW9ucyIsImFjdGlvbnMiLCJhY3Rpb25zVG9Vc2UiLCJhY3Rpb24iLCJtYXhDaGFycyIsImlkeCIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiX19odG1sIiwic2V0VGltZW91dCIsImZvY3VzIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwicmVmIiwiY29udGVudEVkaXRhYmxlIiwib25QYXN0ZSIsImN1cnJlbnRUYXJnZXQiLCJlZGl0b3JUZXh0IiwidGV4dEJlaW5nUGFzdGVkIiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJvbktleVVwIiwib25LZXlQcmVzcyIsIm9uSW5wdXQiLCJvbktleURvd24iLCJ3aGljaCIsInN0b3BQcm9wYWdhdGlvbiIsInNoaWZ0S2V5Iiwia2V5Q29kZSIsInJlbW92ZUNoaWxkIiwib3V0bGluZSIsImJvdHRvbSIsInBhcmVudCIsInBhcmVudFJlY3QiLCJjaGlsZFJlY3QiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiRmVhdHVyZXMiLCJfaW5pdGlhbGl6ZWQiLCJmZWF0dXJlTmFtZSIsInRoaXNfMSIsImluaXQiLCJfZmVhdHVyZXMiLCJfZmVhdHVyZV9mbGFnc19qc29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ0dXJuZWRPbkZlYXR1cmVzIiwiX2dsb2JhbHNfS0VEX2NmZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiS0VEX0ZFQVRVUkVTIiwiX3V0aWxzX3F1ZXJ5X3N0cmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwidGVzdHZlcnNpb24iLCJmZWF0dXJlcyIsImZlYXR1cmUiLCJ0dXJuT25BbGwiLCJzZXR1cEludGwiLCJDb21wb25lbnQiLCJfU2V0dXBMYW5ndWFnZUludGwiLCJyZWFjdF9pbnRsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJyZWFjdF9pbnRsX2xvY2FsZV9kYXRhX2VuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsInJlYWN0X2ludGxfbG9jYWxlX2RhdGFfc3ZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwibWVzc2FnZXMiLCJzdiIsIl90cmFuc2xhdGlvbnNfc3ZfanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiZW4iLCJfdHJhbnNsYXRpb25zX2VuX2pzb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fX2RlZmF1bHQiLCJsb2NhbGUiLCJfZ2xvYmFsc19LRURfY2ZnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJLRURfTE9DQUxFIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsImdldFRhc2tUeXBlIiwic2l0ZVZpc2lvblBhZ2VJZCIsImNvdXJzZUluZm8iLCJ1c2VyX3Rhc2tzX2JveF9Vc2VyVGFza3NCb3giLCJVc2VyVGFza3NCb3giLCJsZWFybmluZ0dvYWxzIiwic3JjX2ZlYXR1cmVzIiwiY29udGV4dCIsIm9wZW5fY2xvc2VfYm94IiwiaW5kZXhfZXMiLCJjb3Vyc2VfbmFtZV90b19jc3NfY2xhc3MiLCJiZWNhbWVPcGVuIiwic2V0SXNPcGVuIiwibGciLCJzdGVwIiwicmVtb3ZlTGVhcm5pbmdHb2FsIiwiaXNXb3JraW5nIiwidGFza1R5cGUiLCJleHBpcmVkIiwiZGVhZGxpbmUiLCJvcGFjaXR5Iiwic2V0VGFza0RvbmUiLCJnZXRUYXNrVXJsIiwidmlld0NvdXJzZVVybCIsImdldFN1YmplY3RQbGFubmVyVGFza1VybCIsImhvc3QiLCJmb3JtYXQiLCJlZGl0VGFzayIsInN1YlRhc2siLCJzZXRTdWJUYXNrRG9uZSIsImVkaXRTdWJUYXNrIiwiYWRkT3duVGFzayIsImNvbnRleHRUeXBlIiwiYWNjZXNzX2NvbnRyb2wiLCJjb3Vyc2VJZCIsInRhYiIsIktFRF9jZmciLCJLRURfU1VCSkVDVF9QTEFOTkVSX1VSTCIsImFkZF9jdXN0b21fZ29hbF9BZGRDdXN0b21Hb2FsIiwiQWRkQ3VzdG9tR29hbCIsIm9uU2F2ZSIsImFkZF9jdXN0b21fdGFza19BZGRDdXN0b21UYXNrIiwiQWRkQ3VzdG9tVGFzayIsImRlc2NyaXB0aW9uIiwiaXNUYXNrIiwiZm9ybV9maWVsZF90ZXh0X2lucHV0IiwiZm9ybV9maWVsZF90ZXh0YXJlYSIsImFkZF9vcl9lZGl0X3N1Yl90YXNrX0FkZE9yRWRpdFN1YlRhc2siLCJBZGRPckVkaXRTdWJUYXNrIiwiY2xvc2VEaWFsb2ciLCJuZXdTdWJUYXNrXzEiLCJpc0VkaXRNb2RlIiwiZWRpdF91c2VyX3Rhc2tfRWRpdFVzZXJUYXNrIiwiRWRpdFVzZXJUYXNrIiwib25Vc2VyVGFza3NDaGFuZ2VkIiwibXlVc2VyVGFzayIsImlzTW9kaWZpZWQiLCJhZGRTdWJUYXNrIiwib3BlbkRpYWxvZyIsInNob3dDYWxlbmRhciIsIm9uVXBkYXRlIiwib25EZWxldGUiLCJpc0N1c3RvbVRhc2siLCJmb3JtX2ZpZWxkIiwiZXMiLCJkYXRlUGlja2VyIiwibmV4dE1vbnRoQnV0dG9uTGFiZWwiLCJwcmV2aW91c01vbnRoQnV0dG9uTGFiZWwiLCJzaG93V2Vla051bWJlcnMiLCJzZWxlY3RlZCIsImRhdGVGb3JtYXQiLCJwb3BwZXJQbGFjZW1lbnQiLCJzZXRPcGVuIiwicHJvZ3Jlc3NfUHJvZ3Jlc3MiLCJQcm9ncmVzcyIsInBlcmNlbnRhZ2UiLCJyb3VuZGVkUGVyY2VudGFnZSIsInJvdW5kIiwicngiLCJ0ZXh0QW5jaG9yIiwieSIsImR5Iiwid2Vla3BsYW5uZXJfV2Vla1BsYW5uZXIiLCJXZWVrUGxhbm5lciIsImRpYWxvZ3MiLCJzYXZpbmciLCJ3ZWVrVGV4dHNVVCIsImlzTG9hZGluZyIsImlzQ29weWluZ1Rhc2tzIiwid2Vla1RleHRzU2F2aW5nSm9iIiwicGVuZGluZ19qb2IiLCJzYXZlV2Vla1RleHRzIiwic3RvcCIsInBlcnNpc3RlZCIsImlzV2Vla1RleHRzRWRpdGVkIiwicHJldldlZWsiLCJwcmV2V2Vla09iaiIsIm5leHRXZWVrIiwibmV4dFdlZWtPYmoiLCJkaWFsb2ciLCJvcGVuQWRkR29hbERpYWxvZyIsImFkZEN1c3RvbUdvYWwiLCJvcGVuQWRkT3duVGFza0RpYWxvZyIsImxlYXJuaW5nR29hbE5hbWUiLCJhZGRDdXN0b21UYXNrIiwibGF0ZXN0VGltZVN0YW1wIiwiY29uZmlybSIsImxlYXJuaW5nR29hbHNOdW1iZXIiLCJhbGxUYXNrcyIsImNvcHlGcm9tUHJldmlvdXNXZWVrIiwidXNlclRhc2tzXzEiLCJwcmV2V2Vla05vIiwicHJldktFRFdlZWsiLCJwcmV2VGFza3MiLCJwcmV2VGFzayIsInRhc2tPZkN1cnJlbnRXZWVrIiwibGF0ZXN0VGltZVN0YW1wXzEiLCJjb3BpZXMiLCJjb3B5IiwiZ2V0SGVhZGVyVGl0bGUiLCJzaG93UHJvZ3Jlc3NDaGFydHMiLCJ3ZWVrcGxhbm5lckNoYXJ0cyIsImN1cnJlbnRXZWVrIiwidGFza1NldHMiLCJ0YXNrc1BlckNvdXJzZSIsImNvdXJzZVRhc2tzIiwidGFza3NQZXJMZWFybmluZ0dvYWwiLCJyZXN1bHRMZWFybmluZ0dvYWxzIiwiX2YiLCJsZ1Rhc2tzIiwibGVhcm5pbmdHb2FsVGFzayIsInJlZmluZSIsImlzU2F2aW5nIiwiaXNTdHJhdGVneUVkaXRlZCIsImlzQXNzZXNzbWVudEVkaXRlZCIsImVuYWJsZVNhdmVCdXR0b24iLCJjaGFydFRhc2tzIiwiY29tcGxldGVkVGFza3MiLCJ0b3RhbE51bWJlck9mVGFza3MiLCJzdWJqZWN0RGF0YSIsInN1YmplY3RDb21wbGV0ZWRUYXNrcyIsImNvdXJzZVN1YmplY3REYXRhIiwiZ2V0V2Vla3BsYW5uZXJQcm9ncmVzc0RhdGEiLCJjdHJsS2V5IiwidHJpZ2dlckNoYW5nZSIsInNwaW5uZXIiLCJkaXNhYmxlZCIsInR1dG9yZWQiLCJ1dGlsaXR5X2NvbXBvbmVudHNfZGlhbG9ncyIsInBvcERpYWxvZyIsIkRpYWxvZ3MiLCJwcmV2UHJvcHMiLCJsYXN0RGl2IiwianF1ZXJ5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19fZGVmYXVsdCIsInJlYWN0X2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiY3NzIiwiYXJpYS1kaXNhYmxlZCIsImNsaWNrIiwibWV0YUtleSIsImRvbU5vZGUiLCJfY291cnNlX2J1aWxkZXJfc3ViX2NvbXBvbmVudHNfcmVtb3ZlX2l0ZW1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIkNvbmZpcm1hdGlvbiIsInZpc2libGUiLCJvbkNvbmZpcm0iLCJvbkNhbmNlbCIsInRhc2tfbGlzdF9UYXNrTGlzdCIsIlRhc2tMaXN0IiwiY29uZmlybWF0aW9ucyIsInVzZXJfdGFza3NfcmVwbyIsInRvZ2dsZVRhc2siLCJsZWFybmluZ1Rhc2siLCJhbGwiLCJsZWFybmluZ1Rhc2tzIiwid2Vla1BsYW5uZXJXZWVrIiwiZm9yV2Vla1N0cmluZyIsInRhc2tMb29rdXBJZCIsImRlc2NyaWJlZEFjdGlvbiIsImNvbmZpcm1hdGlvblZpc2libGUiLCJ0aWQiLCJoaWRkZW5Db3Vyc2VzUmVwbyIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIkhpZGRlbkNvdXJzZXNSZXBvIiwiZnVsbENvdXJzZSIsIm5vdGlmeVN1YnNjcmliZXIiLCJrZWRSZXBvIiwiX2tlZF9yZXBvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJpbml0UHJvbWlzZSIsImtlZENvdXJzZXNQcm9taXNlIiwiZWRzQ291cnNlc1Byb21pc2UiLCJfdXRpbHNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsImJlYXJlclByb21pc2UiLCJsaXN0S2VkQ291cnNlcyIsImxpc3RFRFNDb3Vyc2VzIiwidXNlckhpZGRlbkNvdXJzZXNSZXNvbHZlZCIsInVzZXJIaWRkZW5Db3Vyc2VzUHJvbWlzZSIsInJlc29sdmVVc2VySGlkZGVuQ291cnNlc1Byb21pc2UiLCJ1c2VySGlkZGVuQ291cnNlcyIsImFjdGl2ZUNvdXJzZXMiLCJlZHNBY3RpdmVDb3Vyc2VzIiwiY3JlYXRlQ291cnNlc0xpc3QiLCJzY2hvb2xzIiwiX2FwaXNfZWRzY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfdXRpbHNfc2Nob29sX21vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwibW9tZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19fZGVmYXVsdCIsImVkc0NsaWVudCIsImhpZGRlbkNvdXJzZXNNYXAiLCJoYyIsInNob3ciLCJ2aXNpYmxlQ291cnNlc01hcCIsImlzU3R1ZGVudCIsImVkc0NvdXJzZU1hcCIsIm1vZGlmaWVkQnkiLCJlZHNDb3Vyc2UiLCJkZWZhdWx0VmlzaWJsZSIsImhpZGVDb3Vyc2UiLCJvdmVycmlkZXMiLCJrZWRiYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwib3YiLCJzaG93Q291cnNlIiwidXNlcnMiLCJkaXNwbGF5TmFtZSIsInNjaG9vbFR5cGUiLCJzY2hvb2xHcmFkZSIsImxvY2FsTW9tZW50IiwiX2dsb2JhbHNfS0VEX2NmZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwidXBkYXRlTG9jYWxlIiwibW9udGhzIiwibW9udGhzU2hvcnQiLCJ3ZWVrZGF5cyIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5c01pbiIsImxvbmdEYXRlRm9ybWF0IiwiTFQiLCJMVFMiLCJMTCIsIkxMTCIsIkxMTEwiLCJsbGwiLCJsbGxsIiwiY2FsZW5kYXIiLCJzYW1lRGF5IiwibmV4dERheSIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwicmVsYXRpdmVUaW1lIiwiZnV0dXJlIiwicGFzdCIsInNzIiwibW0iLCJoIiwiaGgiLCJkZCIsIk0iLCJNTSIsInl5IiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIm9yZGluYWwiLCJudW1iZXIiLCJkb3ciLCJkb3kiLCJSZXBvIiwiY29tbSIsImxpc3RQcm9taXNlIiwidXBkYXRlZEl0ZW1zIiwiR29vZ2xlQ2xpZW50IiwiZGlzY292ZXJ5RG9jcyIsImdvb2dsZVRva2VuUHJvdmlkZXIiLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJzZXRCZWFyZXJQcm92aWRlciIsImVuc3VyZUluaXRlZCIsImdhcGkiLCJsb2FkR2FwaSIsInRva2VuRXhwaXJhdGlvbiIsInRva2VuUmVzdWx0Iiwic2V0VG9rZW4iLCJhY2Nlc3NfdG9rZW4iLCJzY3JpcHQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFwcGVuZENoaWxkIiwiZ2FhcGlfbG9hZGVkIiwiY291cnNlTmFtZVRvQ3NzQ2xhc3MiLCJjc3NQcmVmaXgiLCJQZW5kaW5nSm9iIiwiY2FsbGJhY2siLCJ0aW1lb3V0SWQiLCJjYW5jZWxsZWQiLCJwZW5kaW5nIiwiaXNKb2JFeGVjdXRpbmciLCJqb2JDYWxsYmFjayIsInRocm90dGxlIiwiY2xlYXJUaW1lb3V0IiwibGF1bmNoSm9iIiwicHJvY2VzcyIsIl9nbG9iYWxzX0tFRF9jZmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIkVOVklST05NRU5UIiwiS0VEX0FQSV9VUkwiLCJFRFNfQVBJX1VSTCIsIktFRF9UT0tFTl9VUkwiLCJLRURfQ0xJRU5UX0lEIiwiS0VEX0NMSUVOVF9TRUNSRVQiLCJLRURfUkVBTE0iLCJLRURfU0NIT09MX0xPQ0FMRSIsIktFRF9SRVNPVVJDRVNfVVJMIiwiZ2V0TWVyZ2VkVG9rZW5QYXRoIiwic2NvcGVzIiwiaW1wZXJzb25hdGlvblByb3BzIiwidG9rZW5QYXRoV2l0aG91dFF1ZXJ5IiwidG9rZW5RdWVyeVN0cmluZyIsInRva2VuUGF0aFF1ZXJ5IiwiZ2V0VG9rZW5JZCIsIm1lcmdlZFRva2VuUGF0aCIsImNyZWF0ZVRlc3RUb2tlblByb3ZpZGVyIiwiY2xpZW50d2ViIiwiZW1haWwiLCJpbml0aWFsVXNlckVtYWlsIiwiS0VEX1RPS0VOX1BBVEgiLCJzZXRfYmVhcmVyX3Byb3ZpZGVyc19tZXJnZWRUb2tlblBhdGgiLCJyZXNwb25zZVRleHQiLCJvayIsInNhdmVVc2VySW5mbyIsInN0b3JlZFNlc3Npb25Vc2VyIiwibG9hZFVzZXJJbmZvIiwiZ29vZ2xlTWVyZ2VkUGF0aCIsImNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIiLCJlZHNjbGllbnQiLCJUdXRvcmFibGVDb21wb25lbnQiLCJvbkVudlVwZGF0ZWQiLCJfZ2xvYmFsc19LRURfdHV0b3JFbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsImNyZWF0ZUNvbXBvbmVudCIsIkNob29zZVVzZXIiLCJfZGF0YV91c2Vyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiZm9udFN0eWxlIiwiQ29udGVudEVkaXRhYmxlRmllbGQiLCJteXNlbGYiLCJ0YWciLCJUYWdUeXBlIiwiZGF0YS1wbGFjZWhvbGRlciIsImJsdXIiLCJuYXZpZ2F0ZSIsInByb3BhZ2F0ZU9uQ2hhbmdlIiwiYWxsb3dOYXZpZ2F0aW9uIiwibmF2RGlyIiwiY2FyZXQiLCJlbmRPZmZzZXQiLCJ2YWxpZGF0ZVZhbHVlIiwiZGlyZWN0aW9uIiwib25OYXZpZ2F0ZSIsIm5ld1ZhbHVlIiwicHJvcGFnYXRlZE9uQ2hhbmdlIiwiTGlzdENvdXJzZXMiLCJ1cGRhdGVIaWRkZW5Db3Vyc2VzIiwiY29tcG9uZW50V2lsbE1vdW50IiwiX3JlcG9zX2hpZGRlbl9jb3Vyc2VzX3JlcG9fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyIsInRlbXBsYXRlT2JqZWN0XzIiLCJfY291cnNlX2J1aWxkZXJfc3ViX2NvbXBvbmVudHNfc3Bpbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwidmlzaWJsZUNvdXJzZXMiLCJoaWRkZW5Db3Vyc2VzIiwiX3V0aWxzX3F1ZXJ5X3N0cmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX2dsb2JhbHNfS0VEX2NmZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiS0VEX0NPVVJTRV9WSUVXRVJfVVJMIiwiX2FjY2Vzc19jb250cm9sX2luZGV4X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJMZWFybmluZ0dvYWxzTGlzdCIsImNvbW1vblRhc2tzIiwiX3Rhc2tfbGlzdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX3V0aWxpdHlfY29tcG9uZW50c19MYW5ndWFnZUNvbnRleHRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsImdldEN1cnJlbnRBY2FkZW1pY1llYXIiLCJjdXJyZW50RGF0ZSIsImZpcnN0VGVybVN0YXJ0RGF0ZSIsImZpcnN0VGVybUVuZERhdGUiLCJzZWNvbmRUZXJtU3RhcnREYXRlIiwic2Vjb25kVGVybUVuZERhdGUiLCJhY2FkZW1pY1BlcmlvZCIsIl9nZXRUZXJtSG9saWRheXMiLCJhY2FkZW1pY1N0YXJ0V2VlayIsImFjYWRlbWljRW5kV2VlayIsImFjYWRlbWljWWVhclN0cnVjdHVyZSIsIm51bWJlck9mSG9saWRheVdlZWtzIiwibnVtYmVyT2ZXZWVrcyIsIl9nZXRIb2xpZGF5V2Vla3NOdW1iZXIiLCJ0ZXJtU3RhcnREYXRlIiwidGVybUVuZERhdGUiLCJpc0JldHdlZW4iLCJnZXRDb2x1bW5IZWFkZXJGcm9tQ291cnNlIiwic2hvcnROYW1lIiwiZ2VuZXJpY19zY2hvb2xfdGVybV9HZW5lcmljU2Nob29sVGVybSIsIkdlbmVyaWNTY2hvb2xUZXJtIiwiY3VycmVudExvY2FsZSIsInNlbGVjdGVkRGF0ZSIsImdldFRlcm1TdGFydEFuZEVuZCIsImluY2x1ZGVFeHRyYVdlZWsiLCJzdGFydE9mVGVybVdlZWsiLCJlbmRPZlRlcm1XZWVrIiwiaXNDdXJyZW50V2VlayIsInRlcm1EYXRlIiwiZ2V0TGFzdFN0ZXBXZWVrIiwic3VidHJhY3QiLCJnZXRFZHNQZXJpb2ROYW1lIiwidmlld21vZGVsX1ZpZXdNb2RlbCIsImRiV2Vla1BsYW5zIiwiY3VycmVudFNjaG9vbFRlcm0iLCJjdXJyZW50U2Nob29sTG9jYWxlIiwic2hvd1R1dG9yQ29tbWVudEZpZWxkIiwic3ViamVjdFByb2dyZXNzIiwiY29sdW1ucyIsIndlZWtQbGFuc09yVHV0b3JOb3RlIiwidGVybVN0YXJ0IiwidGVybUVuZCIsImNvbHVtbkhlYWRlcnMiLCJnZXRDb2x1bW5zSGVhZGVyIiwiZml4ZWRDb2x1bW5zXzEiLCJpc0ZpeGVkIiwidHJhbnNsYXRlZENvbHVtbnMiLCJnZXRTY2hvb2xUcmFuc2xhdGVkU3ViamVjdHMiLCJ0cmFuc2xhdGVkTmFtZSIsImN1cnJlbnRUZXJtSG9saWRheXMiLCJjdXJyZW50VGVybV8xIiwid2Vla3BsYW5WYWx1ZXMiLCJ0dXRvclZhbHVlcyIsInciLCJzdGFydEFjYWRlbWljWWVhck51bWJlciIsIndlZWtNb21lbnQiLCJ3ZWVrUGxhbiIsIndwIiwiaXNGaW5hbFN0ZXAiLCJ0dXRvck5vdGUiLCJjZWxsVmFsdWVzIiwiYWNhZGVtaWNXZWVrTnVtYmVyIiwiY29udGVudCIsImxhc3RTdGVwV2VlayIsImxhc3RTdGVwS2VkV2Vla18xIiwibGFzdFN0ZXBzIiwiY29tcGxldGVkU3RlcHMiLCJ0ZXJtR29hbHMiLCJtYXhTdWJqZWN0U3RlcCIsImNvdXJzZXNfMSIsImNvdXJzZXNfMV8xIiwiY29sdW1uSGVhZGVyIiwiY291cnNlU3RlcHMiLCJpc0NvbXBsZXRlZCIsImN1cnJlbnRTdGVwVmFsdWUiLCJwZXJpb2RHb2FsR3JhZGUiLCJmaW5hbFN0ZXBDb21wbGV0ZWQiLCJ2YWwiLCJoYXNOb0ZpbmFsU3RlcFZhbHVlIiwiZmluYWxTdGVwVmFsdWUiLCJwZXJjZW5WYWx1ZSIsInRlcm1QbGFubmVyUmVwb0tTIiwia3NUZXJtUGxhbm5lclJlcG8iLCJkb3VnaG51dF9Eb3VnaG51dCIsIkRvdWdobnV0IiwiZXJyb3JNZXNzYWdlIiwiY2VudGVyIiwic3RhcnRFcnJvclRleHQiLCJ2aWV3Qm94Iiwic3Ryb2tlIiwic3Ryb2tlV2lkdGgiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VMaW5lY2FwIiwiYWxpZ25tZW50QmFzZWxpbmUiLCJmb250U2l6ZSIsInRzcGFuIiwidGVybXBsYW5uZXJfS1NUZXJtUGxhbm5lciIsIktTVGVybVBsYW5uZXIiLCJ1bm1vdW50ZWQiLCJpbml0aWFsRGF0ZSIsIndlZWtQbGFucyIsImxvYWRpbmdBY3RpdmVDb3Vyc2VzIiwibG9hZGluZ1dlZWtQbGFucyIsImluaXRpYWxMb2FkIiwiZmxvd0lkIiwidXBkYXRlV2Vla1BsYW5zIiwid2Vla1BsYW5zT3JUdXRvckNvbW0iLCJmaWVsZHMiLCJsb2FkQWNhZGVtaWNZZWFyRGF0ZXMiLCJyZWZyZXNoRGF0YSIsImxvYWRBY3RpdmVDb3Vyc2VzIiwiZXJyb3JfMSIsInVwZGF0ZUNlbGwiLCJjb2x1bW5OYW1lIiwiZXJyb3JfMiIsInN0YWNrIiwidXBkYXRlVHV0b3JOb3RlRmllbGQiLCJub3RlIiwiZGVsZXRlVHV0b3JOb3RlRmllbGQiLCJub3RlSWQiLCJvblR1dG9yQ2xpY2siLCJ0dXRvcl9kaWFsb2ciLCJjb21tZW50IiwidXBkYXRlRGF0YSIsImRlbGV0ZU5vdGVEYXRhIiwicG9zIiwibmV3cG9zIiwibWF4Um93cyIsIm1heENvbHMiLCJyb3ciLCJtaW4iLCJjb2wiLCJhZGRGaWVsZCIsImZpZWxkIiwiZ2V0VGFibGVDZWxsIiwicm93SW5kZXgiLCJjb2xJbmRleCIsInN1YmplY3ROYW1lIiwibW9kZWwiLCJyZWFkT25seUNlbGxzIiwiY29sVHlwZSIsInR1dG9yZWRXZWVrUGxhbiIsImRhdGEtdG9vbHRpcCIsImdldENlbGxDbGFzc05hbWUiLCJjb250ZW50X2VkaXRhYmxlX2ZpZWxkIiwiZ2V0Q29sdW1uVHlwZSIsImdldEZvb3RlckNlbGwiLCJnZXRTdGVwSGVhZGVyQ29sdW1uIiwiaW5kZXgiLCJ0cmFuc2xhdGVkQ29sdW1uSGVhZGVyIiwiY29sVHlwZXMiLCJLb21tZW50YXIiLCJLdXJzIiwiVHV0b3JDb21tZW50Iiwib3BlbkNsb3NlUHJvZ3Jlc3NDaGFydHMiLCJnZXRTdGVwQ2hhcnRzIiwiY2hhcnRzQm94U3RhdGUiLCJnZXRTY2hvb2xUcmFuc2xhdGVkU3ViamVjdEZ1bGxuYW1lIiwiZ2V0V2Vla1R1dG9yTm90ZSIsImtzVHV0b3JDb21tZW50Iiwic2hvd0RvdWdobnV0Q2hhcnRzIiwidGVybXBsYW5uZXJDaGFydHMiLCJyb3dPZmZzZXQiLCJmaWx0ZXJlZFdlZWtwbGFucyIsIndrIiwidHV0b3JWYWx1ZSIsIlR1dG9yRW52IiwidmVyc2lvbiIsInNldE5ld0VudiIsImVudkdldHRlciIsIl9rZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInR1dG9yRW52IiwiLi9lbi1TRyIsIi4vZW4tU0cuanMiLCIuL2VuLWF1IiwiLi9lbi1hdS5qcyIsIi4vZW4tY2EiLCIuL2VuLWNhLmpzIiwiLi9lbi1nYiIsIi4vZW4tZ2IuanMiLCIuL2VuLWllIiwiLi9lbi1pZS5qcyIsIi4vZW4taWwiLCIuL2VuLWlsLmpzIiwiLi9lbi1ueiIsIi4vZW4tbnouanMiLCIuL3N2IiwiLi9zdi5qcyIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX3dlZWtwbGFubmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfdXRpbHNfcXVlcnlfc3RyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJUdXRvckRpYWxvZyIsIktTVGVybVBsYW5uZXJSZXBvIiwic3RhcnREYXRlVmFsdWUiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwiZW5kRGF0ZVZhbHVlIiwiZGF0ZUludGVydmFsIiwiTUlOVVRFIiwiU0VDT05EIiwiRGF5Vmlld0V2ZW50IiwiZGF5U3RhcnQiLCJzdGFydE1vbWVudCIsImVuZE1vbWVudCIsInpvb20iLCJodG1sTGluayIsImRpZmYiLCJsb2NhbGVUaW1lT3B0aW9ucyIsImhvdXIiLCJtaW51dGUiLCJsb2NhbGVTdGFydFRpbWUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJsb2NhbGVFbmRUaW1lIiwiYm94U2l6aW5nIiwibWF4SGVpZ2h0Iiwib3ZlcmZsb3ciLCJUaW1lTGluZXMiLCJkYXlFbmQiLCJob3VyUGl4ZWxzIiwic3RhcnRIb3VyIiwiZW5kSG91ciIsImhvdXJzIiwibWFyZ2luIiwiRGF5VmlldyIsImV2ZW50cyIsImlzTGFzdENhbGwiLCJjcnVuY2hlZEV2ZW50cyIsImV2ZW50SW5kZXgiLCJvdmVybGFwcyIsImFsbE92ZXJsYXBzIiwicHJldk92ZXJsYXBzIiwib3ZlcmxhcCIsImNuIiwiY3J1bmNoQ29sbGlkaW5nRXZlbnRzIiwiSG91ck1hcmtlciIsInlwb3MiLCJtYXJnaW5Ub3AiLCJwYWRkaW5nIiwiU3RhdHVzQmFyIiwid2Vla192aWV3IiwiV2Vla1ZpZXciLCJmaXJzdERheSIsIm51bURheXMiLCJkYXlEYXRhcyIsImRheSIsImRheURhdGUiLCJpc1RvZGF5Iiwic3RhcnQiLCJlbmQiLCJmdWxsRGF5RXZlbnRzIiwidG9JU09TdHJpbmciLCJjb2xTcGFuIiwiZ29vZ2xlX2NhbGVuZGFyX0dvb2dsZUNhbGVuZGFyIiwiR29vZ2xlQ2FsZW5kYXIiLCJsaXN0Q2FsZW5kYXJzIiwiY2FsZW5kYXJMaXN0IiwiYmF0Y2hFdmVudHMiLCJ0aW1lTWluIiwidGltZU1heCIsImJhdGNoXzEiLCJuZXdCYXRjaCIsImNhbCIsImNhbGVuZGFySWQiLCJzaG93RGVsZXRlZCIsInNpbmdsZUV2ZW50cyIsIm1heFJlc3VsdHMiLCJyZXNwIiwibmV3Q2FscyIsImNhbElkIiwiY2FsZW5kYXJfQ2FsZW5kYXIiLCJDYWxlbmRhciIsImluaXRpYWxTdGFydEhvdXIiLCJpbml0aWFsRW5kSG91ciIsImluaXRpYWxab29tIiwiY2FsZW5kYXJzIiwiY2FsZW5kYXJzQmVpbmdMb2FkZWQiLCJnY2FsIiwibG9hZERhdGEiLCJoYW5kbGVFcnJvciIsInN1bW1hcnkiLCJpc093bmVyIiwiYWNjZXNzUm9sZSIsImlzUHJpbWFyeSIsInByaW1hcnkiLCJpc0NsYXNzcm9vbUNhbGVuZGFyIiwiaXNIb2xpZGF5Q2FsZW5kYXIiLCJzaG91bGRJbmNsdWRlQ2FsZW5kYXIiLCJuYXZpZ2F0ZVRvUHJldmlvdXNXZWVrIiwibmF2aWdhdGVUb05leHRXZWVrIiwiZXZlbnRTZXRzIiwiaXNTY2hlZHVsZSIsImlzSG9saWRheSIsImNsYXNzTmFtZXMiLCJjb2xvcklkIiwid2Vla19ub3RlX2RpYWxvZ19XZWVrTm90ZURpYWxvZyIsIldlZWtOb3RlRGlhbG9nIiwiY29sb3IiLCJwbGFucyIsImtnVGVybVBsYW5uZXJSZXBvIiwia2dfdGVybXBsYW5uZXJfS0dUZXJtUGxhbm5lciIsIktHVGVybVBsYW5uZXIiLCJpc0xvYWRpbmdDb3Vyc2VzIiwiaXNMb2FkaW5nV2Vla1BsYW5zIiwibG9hZEVEU0NvdXJzZXMiLCJvbk5vdGVDbGljayIsIndlZWtzIiwidHV0b3JOb3RlcyIsImZpcnN0V2VlayIsInNob3dLZ1R1dG9yQ29tbWVudEZpZWxkIiwia2dUdXRvckNvbW1lbnQiLCJjdXJyZW50V2Vla1BsYW5zIiwiY3VycmVudFR1dG9yTm90ZXMiLCJ3ZWVrWWVhciIsInN0YXJ0T2ZXZWVrIiwibm90ZVZhbHVlIiwidG4iLCJjcmVkaXRzIiwiS0dUZXJtUGxhbm5lclR1dG9yZWQiLCJfa2dfdGVybXBsYW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl91dGlsaXR5X2NvbXBvbmVudHNfdHV0b3JhYmxlX2NvbXBvbmVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwia2dfdGVybXBsYW5uZXJfcmVwb19LR1Rlcm1QbGFubmVyUmVwbyIsIktHVGVybVBsYW5uZXJSZXBvIiwidGVybVBsYW5uZXJSZXBvIiwicmVxdWVzdFR1dG9yZWRUb2tlbnMiLCJjcmVhdGVCZWFyZXJQcm92aWRlciIsInJldHJpZXZlVG9rZW4iLCJ0dXRvcmVkS2VkQmFja2VuZENsaWVudCIsImtzX3Rlcm1wbGFubmVyX3JlcG8iLCJ0dXRvcnNfc2VsZWN0X1R1dG9yc1NlbGVjdCIsIlR1dG9yc1NlbGVjdCIsImVkc1N0dWRlbnRzIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJvblNlbGVjdFVzZXIiLCJjaG9vc2VuU3R1ZGVudCIsIktFRF90dXRvckVudiIsImV4dGVybmFsX1JlYWN0X2RlZmF1bHQiLCJzdHVkZW50IiwiTGF0ZXN0QXNzZXNzbWVudHMiLCJsb2FkaW5nIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiaGFzR3JhZGVzIiwiZ3JhZGVOYW1lIiwicHVibGlzaERhdGVUaW1lIiwiY291cnNlVW5pdE5hbWUiLCJLR1Rlcm1QbGFubmVyU2VsZiIsIktTVGVybVBsYW5uZXJUdXRvcmVkIiwiX3Rlcm1wbGFubmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJQcm92aWRlciIsIk15Q291cnNlcyIsInVwZGF0ZUhpZGRlbkNvdXJzZXNTdGF0ZSIsIl9yZXBvc19oaWRkZW5fY291cnNlc19yZXBvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJnZXRDb3Vyc2VVcmwiLCJfYWNjZXNzX2NvbnRyb2xfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIndlZWtOb3Rlc1JlcG8iLCJ3ZWVrX25vdGVzX3JlcG9fV2Vla05vdGVzUmVwbyIsIldlZWtOb3Rlc1JlcG8iLCJpZlRha2VzVGltZSIsIm1zIiwidGltZW91dFJlYWNoZWQiLCJ3ZWVrX25vdGVib29rX1dlZWtOb3RlYm9vayIsIldlZWtOb3RlYm9vayIsImF1dG9TYXZlciIsInNob3dMb2FkaW5nUHJvZ3Jlc3MiLCJzaG93U2F2aW5nUHJvZ3Jlc3MiLCJldmVyRWRpdGVkIiwibm90ZXMiLCJzaG93UHJvZ3Jlc3NJZkxvYWRpbmdUYWtlc1RpbWUiLCJ0aW1lb3V0SGFuZGxlIiwiX3NhdmUiLCJtYXhJdGVyYXRpb25zIiwiaXNOb3Rlc0VkaXRlZCIsIndlZWtOb3RlIiwid24iLCJlcnJfMSIsImdldFRyYW5zbGF0ZWRBY3Rpb25zIiwibG9jYWxlQWN0aW9ucyIsImFjdGlvbnNfc3YiLCJjdXJyZW50VGl0bGUiLCJ3ZWVrTm90ZXMiLCJ3eXNpd3lnIiwiRnJhZ21lbnQiLCJSb290V2Vla05vdGVib29rIiwiZ29hbHNfdmlld21vZGVsX1ZpZXdNb2RlbCIsInN0dWR5UGxhbnMiLCJzdWJqZWN0cyIsInNwIiwicGVyaW9kR29hbHMiLCJnIiwiZ29hbCIsImF0R29hbCIsInN0R29hbCIsImZpbmFsR29hbCIsImZpbmFsR29hbEdyYWRlIiwic3RyYXRlZ2llcyIsInN0cmF0ZWd5VGV4dCIsImZ1dHVyZV9hYmlsaXRpZXNfdmlld21vZGVsX0Z1dHVyZUFiaWxpdGllc1ZpZXdNb2RlbCIsImZvcm1OYW1lcyIsImNhcGFiaWxpdGllcyIsImZvcm1OYW1lIiwieWVhcnMiLCJ2dEh0cyIsImFiaWxpdHlOYW1lIiwiYWRkZWRDYXBhYnMiLCJjZWxscyIsImh0SGFzVmFsdWUiLCJ2dEhhc1ZhbHVlIiwiY2FwYWJpbGl0eU5hbWUiLCJjZWxsIiwiY2FwYWJSb3dzIiwiZnV0dXJlX2FiaWxpdGllc190YWJsZV9GdXR1cmVBYmlsaXRpZXNUYWJsZSIsIkZ1dHVyZUFiaWxpdGllc1RhYmxlIiwidmlld01vZGVsIiwicm93U3BhbiIsInZ0SHQiLCJnb2Fsc19LU0dvYWxzIiwiS1NHb2FscyIsImxvYWRpbmdTdHVkeVBsYW5zIiwic2hvd1Rlcm1Hb2FscyIsInRlbXBsYXRlT2JqZWN0XzMiLCJ0ZW1wbGF0ZU9iamVjdF80IiwidGVtcGxhdGVPYmplY3RfNSIsInRlbXBsYXRlT2JqZWN0XzYiLCJnZXRMZWFybmluZ0dvYWxzQW5kVGFza3MiLCJhcGlQYXRoIiwicGFnZUlkIiwibGVhcm5pbmdfdGFza3NfTGVhcm5pbmdUYXNrcyIsIl9MZWFybmluZ1Rhc2tzIiwibW9kdWxlTmFtZSIsInN1YmplY3QiLCJjb21tb25UYXNrc0xpc3QiLCJsZWFybmluZ0dvYWxzTGlzdCIsImxlYXJuaW5nX2dvYWxzX2xpc3QiLCJMZWFybmluZ1Rhc2tzIiwiU2V0dXBMYW5ndWFnZUludGwiLCJsZWFybmluZ01vZHVsZXMiLCJsZWFybmluZ1BhZ2VVcmxzIiwidHV0b3JzX3ZpZXdfVHV0b3JzVmlld1Rlc3QiLCJUdXRvcnNWaWV3VGVzdCIsInR1dG9yc19zZWxlY3QiLCJ0dXRvcmFibGVfY29tcG9uZW50IiwidGVybXBsYW5uZXIiLCJrZ190ZXJtcGxhbm5lcl90dXRvcmVkIiwid2Vla3BsYW5uZXIiLCJjb21wb25lbnRzIiwibGF0ZXN0X2Fzc2Vzc21lbnRzIiwibmF2aWdhdG9yIiwibGFuZ3VhZ2UiLCJnb2FscyIsImtzX3Rlcm1wbGFubmVyX3R1dG9yZWQiLCJrZ190ZXJtcGxhbm5lcl9zZWxmIiwid2Vla3BsYW5uZXJfd2Vla3BsYW5uZXIiLCJUdXRvcnNWaWV3IiwibGVhcm5pbmdfdGFza3MiLCJteV9jb3Vyc2VzIiwibGlzdF9jb3Vyc2VzIiwiV2Vla05vdGVzIiwid2Vla19ub3RlYm9vayIsInRlc3RwYWdlX1Rlc3RQYWdlIiwiX1Rlc3RQYWdlIiwic2VsZWN0ZWRDb21wIiwic2VsZWN0Q29tcFByb3BzIiwic2VsZWN0ZWRDb21wb25lbnQiLCJzZWxlY3RlZExlYXJuaW5nTW9kdWxlIiwic2VsZWN0ZWRMZWFybmluZ01vZHVsZVVybCIsInNlbGVjdGVkQ29tcG9uZW50UmVhbCIsInNlbGVjdGVkQ29tcFByb3BzIiwicmVuZGVyVGVzdENvbXBvbmVudCIsImxlYXJuaW5nTW9kdWxlVGFza3MiLCJleHRlcm5hbF9qUXVlcnlfZGVmYXVsdCIsImNvbXBvbmVudEFyZWEiLCJTZWxlY3RlZENvbXBvbmVudCIsImxtIiwiY2hvb3NlX3VzZXIiLCJUZXN0UGFnZSJdLCJtYXBwaW5ncyI6InlCQUNBLFNBQUFBLEVBQUFDLEdBUUEsSUFQQSxJQU1BQyxFQUFBQyxFQU5BQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FDQUssRUFBQUwsRUFBQSxHQUlBTSxFQUFBLEVBQUFDLEVBQUEsR0FDUUQsRUFBQUgsRUFBQUssT0FBb0JGLElBQzVCSixFQUFBQyxFQUFBRyxHQUNBRyxFQUFBUCxJQUNBSyxFQUFBRyxLQUFBRCxFQUFBUCxHQUFBLElBRUFPLEVBQUFQLEdBQUEsRUFFQSxJQUFBRCxLQUFBRyxFQUNBTyxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBVixFQUFBSCxLQUNBYyxFQUFBZCxHQUFBRyxFQUFBSCxJQUtBLElBRkFlLEtBQUFoQixHQUVBTyxFQUFBQyxRQUNBRCxFQUFBVSxPQUFBVixHQU9BLE9BSEFXLEVBQUFSLEtBQUFTLE1BQUFELEVBQUFiLEdBQUEsSUFHQWUsSUFFQSxTQUFBQSxJQUVBLElBREEsSUFBQUMsRUFDQWYsRUFBQSxFQUFpQkEsRUFBQVksRUFBQVYsT0FBNEJGLElBQUEsQ0FHN0MsSUFGQSxJQUFBZ0IsRUFBQUosRUFBQVosR0FDQWlCLEdBQUEsRUFDQUMsRUFBQSxFQUFrQkEsRUFBQUYsRUFBQWQsT0FBMkJnQixJQUFBLENBQzdDLElBQUFDLEVBQUFILEVBQUFFLEdBQ0EsSUFBQWYsRUFBQWdCLEtBQUFGLEdBQUEsR0FFQUEsSUFDQUwsRUFBQVEsT0FBQXBCLElBQUEsR0FDQWUsRUFBQU0sSUFBQUMsRUFBQU4sRUFBQSxLQUlBLE9BQUFELEVBSUEsSUFBQVEsRUFBQSxHQUtBcEIsRUFBQSxDQUNBcUIsRUFBQSxHQUdBWixFQUFBLEdBR0EsU0FBQVMsRUFBQTFCLEdBR0EsR0FB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QkFBSUEsRUFBQSx3QkFBUTNDLEdBQUcsd0JBQXdCdlMsTUFBTzBLLEtBQUtrTCxNQUFNbzNDLDBCQUEyQjd4QyxTQUNsRixTQUFBQyxHQUNFYSxhQUFhcEYsUUFBUSw0QkFBNkJ1RSxFQUFHQyxPQUFPcmIsT0FDNURhLE9BQU9rSSxTQUFTK1AsV0FHakJzeUMsRUFBaUJ2b0QsSUFBSSxTQUFDK0YsRUFBS3BMLEdBQzFCLE9BQUEwWCxFQUFBLHdCQUFRNVUsSUFBSzlDLEVBQUd3QyxNQUFPNEksR0FBTUEsYUFRdkNzTSxFQUFBLHlCQUNBQSxFQUFBLHFCQUFLcE8sVUFBVSxnQkFDYm9PLEVBQUEsY0FBQ3E0QyxFQUFpQnJrRCxFQUFBLEtBQUt3QixLQUFLa0wsTUFBTXMzQyxvQkFDbENoNEMsRUFBQSxxQkFBS3BPLFVBQVUsZ0JBQWdCMnVCLElBQUssU0FBQTFGLEdBQU8sT0FBQTloQixFQUFLcS9DLGNBQWdCdjlCLEtBRWhFN2EsRUFBQSxxQkFBS3BPLFVBQVUsZ0JBQ3FCLGtCQUFqQzRELEtBQUtrTCxNQUFNazNDLG1CQUNWNTNDLEVBQUEsY0FBQ3kyQyxFQUFBLEVBQVcsQ0FBQ3B4QixjQUFjLDRCQUE0QnAwQixJQUFLdVcsRUFBQSxRQUt0Q3hILEVBQUEsY0FBQ3U0QyxFQUFBLEVBQVUsT0FFN0NkLEVBOUdBLENBQXdCejNDLEVBQUEsV0FnSGxCdzRDLEVBQVc3dkQsT0FBQXF0RCxFQUFBLEVBQUFydEQsQ0FBVUEsT0FBQTQ3QixFQUFBLEVBQUE1N0IsQ0FBVzZ1RCxJQUN2QnhtRCxFQUFBIiwiZmlsZSI6InRlc3RwYWdlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuIFx0XHR2YXIgZXhlY3V0ZU1vZHVsZXMgPSBkYXRhWzJdO1xuXG4gXHRcdC8vIGFkZCBcIm1vcmVNb2R1bGVzXCIgdG8gdGhlIG1vZHVsZXMgb2JqZWN0LFxuIFx0XHQvLyB0aGVuIGZsYWcgYWxsIFwiY2h1bmtJZHNcIiBhcyBsb2FkZWQgYW5kIGZpcmUgY2FsbGJhY2tcbiBcdFx0dmFyIG1vZHVsZUlkLCBjaHVua0lkLCBpID0gMCwgcmVzb2x2ZXMgPSBbXTtcbiBcdFx0Zm9yKDtpIDwgY2h1bmtJZHMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRjaHVua0lkID0gY2h1bmtJZHNbaV07XG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRyZXNvbHZlcy5wdXNoKGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSk7XG4gXHRcdFx0fVxuIFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdH1cbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcbiBcdFx0XHRcdG1vZHVsZXNbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZihwYXJlbnRKc29ucEZ1bmN0aW9uKSBwYXJlbnRKc29ucEZ1bmN0aW9uKGRhdGEpO1xuXG4gXHRcdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuIFx0XHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcbiBcdFx0fVxuXG4gXHRcdC8vIGFkZCBlbnRyeSBtb2R1bGVzIGZyb20gbG9hZGVkIGNodW5rIHRvIGRlZmVycmVkIGxpc3RcbiBcdFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2guYXBwbHkoZGVmZXJyZWRNb2R1bGVzLCBleGVjdXRlTW9kdWxlcyB8fCBbXSk7XG5cbiBcdFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiBhbGwgY2h1bmtzIHJlYWR5XG4gXHRcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIFx0fTtcbiBcdGZ1bmN0aW9uIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCkge1xuIFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVmZXJyZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0dmFyIGRlZmVycmVkTW9kdWxlID0gZGVmZXJyZWRNb2R1bGVzW2ldO1xuIFx0XHRcdHZhciBmdWxmaWxsZWQgPSB0cnVlO1xuIFx0XHRcdGZvcih2YXIgaiA9IDE7IGogPCBkZWZlcnJlZE1vZHVsZS5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0dmFyIGRlcElkID0gZGVmZXJyZWRNb2R1bGVbal07XG4gXHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbZGVwSWRdICE9PSAwKSBmdWxmaWxsZWQgPSBmYWxzZTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYoZnVsZmlsbGVkKSB7XG4gXHRcdFx0XHRkZWZlcnJlZE1vZHVsZXMuc3BsaWNlKGktLSwgMSk7XG4gXHRcdFx0XHRyZXN1bHQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IGRlZmVycmVkTW9kdWxlWzBdKTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0NjogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucF9uYW1lX1wiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucF9uYW1lX1wiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMjg4LDBdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCJcbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplRmlyc3QgKHN0cikge1xuICAgIGZvciAobGV0IGk9MCwgbD1zdHIubGVuZ3RoOyBpPGw7ICsraSkge1xuICAgICAgICBpZiAoc3RyLmNoYXJDb2RlQXQoaSkgPCAweDIwMDApIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIGkpICsgc3RyW2ldLnRvTG9jYWxlVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKGkgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iaiwgZXh0ZW5zaW9uKSB7XG4gICAgaWYgKHR5cGVvZiBleHRlbnNpb24gIT09ICdvYmplY3QnKSByZXR1cm4gb2JqO1xuICAgIE9iamVjdC5rZXlzKGV4dGVuc2lvbikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBvYmpba2V5XSA9IGV4dGVuc2lvbltrZXldO1xuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZTxULEU+IChvYmogOiBULCBleHRlbnNpb24/OiBFKSB7XG4gICAgbGV0IGNsb25lID0ge307XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbG9uZSwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSk7XG4gICAgfSk7XG4gICAgaWYgKGV4dGVuc2lvbikgZXh0ZW5kKGNsb25lLCBleHRlbnNpb24pO1xuICAgIHJldHVybiBjbG9uZSBhcyAoVCAmIEUpO1xufVxuXG5jb25zdCBjb25jYXQgPSBbXS5jb25jYXQ7XG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbjxUPiAoYSA6IChUIHwgVFtdKVtdKSB7XG4gICAgcmV0dXJuIGNvbmNhdC5hcHBseShbXSwgYSkgYXMgVFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVByb3A8VD4ocHJvcDprZXlvZiBUKSB7XG4gICAgcmV0dXJuIChhOiBULGI6IFQpID0+IHtcbiAgICAgICAgY29uc3QgYVByb3AgPSBhW3Byb3BdLCBiUHJvcCA9IGJbcHJvcF07XG4gICAgICAgIHJldHVybiBhUHJvcCA+IGJQcm9wID8gMSA6IGFQcm9wIDwgYlByb3AgPyAtMSA6IDA7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVByb3BzKFxuICAgIHByb3BzOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBsb2NhbGVzPzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgb3B0aW9ucz86IEludGwuQ29sbGF0b3JPcHRpb25zKTogKGE6IGFueSwgYjogYW55KSA9PiBudW1iZXJcbntcbiAgICBwcm9wcyA9IEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdO1xuXG4gICAgY29uc3QgbG9jYWxlQ29tcGFyZSA9IChhLGIpID0+XG4gICAgICAgIHR5cGVvZiBhID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICBhLmxvY2FsZUNvbXBhcmUoYiwgbG9jYWxlcywgb3B0aW9ucykgOlxuICAgICAgICAgICAgYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG5cbiAgICBmdW5jdGlvbiBjbXBQYXJ0IChhLGIsZmlyc3RQYXJ0OiBzdHJpbmcscmVzdDogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgZmlyc3RBID0gYVtmaXJzdFBhcnRdO1xuICAgICAgICBjb25zdCBmaXJzdEIgPSBiW2ZpcnN0UGFydF07XG4gICAgICAgIGlmIChmaXJzdEEgPT09IGZpcnN0QikgcmV0dXJuIDA7XG4gICAgICAgIGlmIChmaXJzdEEgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoZmlyc3RCID09IG51bGwpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gcmVzdC5sZW5ndGggPT09IDAgP1xuICAgICAgICAgICAgbG9jYWxlQ29tcGFyZShmaXJzdEEsIGZpcnN0QikgOlxuICAgICAgICAgICAgY21wUGFydChmaXJzdEEsIGZpcnN0QiwgcmVzdFswXSwgcmVzdC5zbGljZSgxKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzXG4gICAgICAgIC5tYXAocHJvcCA9PiBwcm9wLnNwbGl0KCcuJykpXG4gICAgICAgIC5tYXAoKFtmaXJzdFBhcnQsIC4uLnJlc3RdKSA9PiAoYSxiKSA9PiBjbXBQYXJ0KGEsYiwgZmlyc3RQYXJ0LCByZXN0KSlcbiAgICAgICAgLnJlZHVjZSgoY21wMSwgY21wMikgPT5cbiAgICAgICAgICAgIChhLGIpID0+IGNtcDEoYSxiKSB8fCBjbXAyKGEsYikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTCh0ZXh0LCAuLi5hcmdzKSB7XG4gICAgbGV0IGZpcnN0ID0gdGV4dFswXTtcbiAgICByZXR1cm4gYnVpbGRNZXNzYWdlKHRleHQsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBidWlsZE1lc3NhZ2UgKHRleHQsIGFyZ3MpIHtcbiAgICBsZXQgcnYgPSB0ZXh0WzBdO1xuICAgIGZvciAobGV0IGk9MSwgbD10ZXh0Lmxlbmd0aDsgaTxsOyArK2kpIHtcbiAgICAgICAgcnYgKz0gYXJnc1tpLTFdICsgdGV4dFtpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJ2O1xufVxuXG5leHBvcnQgY2xhc3MgVEM8VD4ge1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBUKSB7XG4gICAgICAgIGV4dGVuZCh0aGlzLCB0ZW1wbGF0ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRpbWVSZXZpdmVyIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGE7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYSA9IC9cXC9EYXRlXFwoKFxcZCopXFwpXFwvLy5leGVjKHZhbHVlKTtcbiAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgrYVsxXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4vL2xldCBpbmZvU2VyaWFsID0gMTtcbmV4cG9ydCBmdW5jdGlvbiBzaG93SW5mbyAobXNnKSB7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpbmZvJywgeyAnZGV0YWlsJzogbXNnIH0pO1xuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dFcnJvciAoZXJyTXNnOiBzdHJpbmcgfCBFcnJvcikge1xuICAgIGNvbnN0IG1zZyA9IHR5cGVvZiBlcnJNc2cgPT09ICdzdHJpbmcnID8gZXJyTXNnIDogZXJyTXNnLm1lc3NhZ2U7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdjdXN0b21lcnJvcicsIHsgJ2RldGFpbCc6IG1zZyB9KTtcbiAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF4TGVuZ3RoKHN0cjogc3RyaW5nLCBtYXhMZW46IG51bWJlcikge1xuICAgIHJldHVybiBzdHIubGVuZ3RoID4gbWF4TGVuID9cbiAgICAgICAgc3RyLnN1YnN0cigwLCBtYXhMZW4gLSAzKSArIFwiLi4uXCIgOlxuICAgICAgICBzdHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVRvTG9va3VwPFQ+KGE6IFRbXSwga2V5QWNjZXNzb3I6IChpdGVtOiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBjb25zdCByZXN1bHQgOiB7W2tleTogc3RyaW5nXSA6IFRbXX0gPSB7fTtcbiAgICBmb3IgKGxldCBpPTAsIGw9YS5sZW5ndGg7IGk8bDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhW2ldO1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcbiAgICAgICAgbGV0IGFycmF5ID0gcmVzdWx0W2tleV07XG4gICAgICAgIGlmIChhcnJheSkgYXJyYXkucHVzaChpdGVtKTtcbiAgICAgICAgZWxzZSByZXN1bHRba2V5XSA9IFtpdGVtXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9NYXA8VD4oYTogVFtdLCBrZXlBY2Nlc3NvcjogKGl0ZW06IFQpID0+IHN0cmluZyB8IG51bWJlcikge1xuICAgIGNvbnN0IHJlc3VsdCA6IHtba2V5OiBzdHJpbmddIDogVH0gPSB7fTtcbiAgICBmb3IgKGxldCBpPTAsIGw9YS5sZW5ndGg7IGk8bDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhW2ldO1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBpdGVtO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlcnJ5UGlja1Byb3BzPFQ+IChvYmo6IFQsIHByb3BzVG9QaWNrOiBzdHJpbmdbXSk6IFBhcnRpYWw8VD4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgcGFyYW0gb2YgcHJvcHNUb1BpY2spIHtcbiAgICAgIGlmIChwYXJhbSBpbiBvYmopIHJlc3VsdFtwYXJhbV0gPSBvYmpbcGFyYW1dO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0IGFzIFBhcnRpYWw8VD47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdDxUPiAoYTogVFtdLCBrZXlBY2Nlc3Nvcj86IChpdGVtOiBUKSA9PiBhbnkpIHtcbiAgICBjb25zdCBtYXAgPSBhcnJheVRvTWFwKGEsIGtleUFjY2Vzc29yIHx8ICh4ID0+IHgpKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoa2V5ID0+IG1hcFtrZXldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbHMoYTogYW55LCBiOiBhbnkpIHtcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gICAgaWYgKCFhIHx8ICFiKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaT0wLCBsPWtleXNBLmxlbmd0aDsgaTxsOyArK2kpIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c0FbaV07XG4gICAgICAgIGlmIChrZXlzQltpXSAhPT0ga2V5KSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7VXNlciwgTGVhcm5pbmdNb2R1bGVUYXNrc30gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCwgQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQge1VzZXJUYXNrfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQge0tlZFJlcG99IGZyb20gJy4uL3JlcG9zL2tlZC1yZXBvJztcbmltcG9ydCB7RWRzQ2xpZW50fSBmcm9tICcuLi9hcGlzL2Vkc2NsaWVudCc7XG5pbXBvcnQgS0VEIGZyb20gJy4va2VkJztcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJSZXBvIH0gZnJvbSAnLi4vcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwbyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW52IHtcbiAgICBjdXJyZW50VXNlcj86IFVzZXI7XG4gICAgbGVhcm5pbmdNb2R1bGVUYXNrcz86IExlYXJuaW5nTW9kdWxlVGFza3M7XG4gICAgYmVhcmVyUHJvdmlkZXI/OiBCZWFyZXJQcm92aWRlcjtcbiAgICBnb29nbGVUb2tlblByb3ZpZGVyPzogQmVhcmVyUHJvdmlkZXI7XG4gICAga2VkQmFja2VuZENsaWVudD86IEtlZEJhY2tlbmRDbGllbnQ7XG4gICAgZWRzQ2xpZW50PzogRWRzQ2xpZW50O1xuICAgIHVzZXJUYXNrc1JlcG8/O1xuICAgIGhpZGRlbkNvdXJzZXNSZXBvPztcbiAgICB3ZWVrTm90ZXNSZXBvPztcbiAgICBrZ1Rlcm1QbGFubmVyUmVwbz87XG4gICAga3NUZXJtUGxhbm5lclJlcG8/OiBLU1Rlcm1QbGFubmVyUmVwb1xuICAgIHR1dG9yZWQ6IGJvb2xlYW47XG4gICAgZXJyb3I/OiBFcnJvcjtcbn1cblxuaWYgKCFLRUQuZW52KSBLRUQuZW52ID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IEtFRC5lbnYgYXMgRW52O1xuZXhwb3J0IGNvbnN0IGVudjogRW52ID0gS0VELmVudjtcbiIsImV4cG9ydCAqIGZyb20gJy4vanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQnOyIsImltcG9ydCBLRUQgZnJvbSAnLi9LRUQnO1xuXG4vKiBUaGlzIGRlZmF1bHQgY29uZmlndXJhdGlvbiBpcyB1c2VkIGFzIGEgZmFsbGJhY2suXG5Ob3JtYWxseSBib3RoIHRlc3QgcGFnZXMgYW5kIHByb2R1Y3Rpb24gcGFnZXMgd2lsbCBvdmVycmlkZSB0aGVzZSBjb25maWdyYXRpb25zXG4qL1xuLypjb25zdCBkZWZhdWx0Q29uZmlndXJhdGlvbiA9IHtcbiAgLy8gRW52aXJvbm1lbnRcbiAgRU5WSVJPTk1FTlQ6ICdkZXZlbG9wbWVudCcgYXMgJ3Byb2R1Y3Rpb24nIHwgJ2RldmVsb3BtZW50JyB8ICd0ZXN0JyxcbiAgLy8gQXV0aGVudGljYXRpb24gU2VydmVyOlxuICBLRURfVE9LRU5fVVJMOiAnaHR0cHM6Ly9rZWRhdXRodGVzdC5henVyZXdlYnNpdGVzLm5ldC90b2tlbicsXG4gIEtFRF9UT0tFTl9QQVRIOiAnL2FwaS90b2tlbi5Ta3JpcHQucG9ydGxldD9zdi5jb250ZW50dHlwZT1hcHBsaWNhdGlvbi9qc29uJyxcbiAgS0VEX0NMSUVOVF9JRDogJ2RldmNsaWVudCcsXG4gIEtFRF9DTElFTlRfU0VDUkVUOiAnNGZSZGZRcFd0SnFqVFdmJyxcbiAgLy8gU2VydmljZXM6XG4gIEtFRF9BUElfVVJMOiAnaHR0cHM6Ly9rZWRiYWNrZW5kdGVzdC5henVyZXdlYnNpdGVzLm5ldC9hcGkvJywgIFxuICBFRFNfQVBJX1VSTDogJ2h0dHBzOi8vZWRzcG9ydGFsb3dpbmFwaS5henVyZXdlYnNpdGVzLm5ldC9hcGkvJ1xufSovXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUtlZENvbmZpZ3VyYXRpb24ge1xuICBFTlZJUk9OTUVOVDogJ3Byb2R1Y3Rpb24nIHwgJ2RldmVsb3BtZW50JyB8ICd0ZXN0JztcbiAgS0VEX1JFQUxNOiBzdHJpbmc7XG4gIEtFRF9UT0tFTl9VUkw6IHN0cmluZztcbiAgS0VEX1RPS0VOX1BBVEg6IHN0cmluZztcbiAgS0VEX0NMSUVOVF9JRDogc3RyaW5nO1xuICBLRURfQ0xJRU5UX1NFQ1JFVDogc3RyaW5nO1xuICBLRURfQVBJX1VSTDogc3RyaW5nO1xuICBFRFNfQVBJX1VSTDogc3RyaW5nO1xuICBLRURfTE9DQUxFOiBzdHJpbmc7XG4gIEtFRF9TQ0hPT0xfTE9DQUxFOiBzdHJpbmc7XG4gIEtFRF9DT1VSU0VfQlVJTERFUl9VUkw6IHN0cmluZztcbiAgS0VEX0NPVVJTRV9WSUVXRVJfVVJMOiBzdHJpbmc7XG4gIEtFRF9TVUJKRUNUX1BMQU5ORVJfQURNSU5fVVJMOiBzdHJpbmc7XG4gIEtFRF9TVUJKRUNUX1BMQU5ORVJfVVJMOiBzdHJpbmc7XG4gIEtFRF9GRUFUVVJFUzogc3RyaW5nO1xuICBLRURfS0VFUF9BTElWRV9VUkw6IHN0cmluZztcbiAgS0VEX0VOVU1fV09SREJBTktTX1VSTDogc3RyaW5nO1xuICBLRURfV09SREJBTktTX1VSTDogc3RyaW5nO1xuICBLRURfUkVTT1VSQ0VTX1VSTDogc3RyaW5nO1xufTtcblxuaWYgKCFLRUQuY2ZnKSBLRUQuY2ZnID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IEtFRC5jZmcgYXMgSUtlZENvbmZpZ3VyYXRpb247XG5leHBvcnQgY29uc3QgY2ZnOiBJS2VkQ29uZmlndXJhdGlvbiA9IEtFRC5jZmc7XG4iLCJleHBvcnQgZGVmYXVsdCAoY29tbWFuZCwgdmFsdWUgPSBudWxsKSA9PiB7XG4gIGRvY3VtZW50LmV4ZWNDb21tYW5kKGNvbW1hbmQsIGZhbHNlLCB2YWx1ZSlcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0galF1ZXJ5OyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IFNwaW5uZXIgPSAoKT0+IDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXNwaW5uZXIgZmEtc3BpblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4mbmJzcDs8L3NwYW4+O1xuIiwiaW1wb3J0IHsgQWNjZXNzQ2xhaW0sIERvY3VtZW50QWNjZXNzLCBoYXNBY2Nlc3MgYXMgX2hhc0FjY2VzcywgQWNjZXNzUmlnaHQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBEb2N1bWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCBnZXRVc2VyQ2xhaW1zIGZyb20gJy4vZ2V0LXVzZXItY2xhaW1zJztcbmltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcsIGdlbmVyYXRlUXVlcnlTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvcXVlcnktc3RyaW5nXCI7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuZXhwb3J0IHsgZ2V0VXNlckNsYWltcyB9O1xuXG5leHBvcnQgY29uc3QgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMgPSBbXG4gIFwidXNlclwiLFxuICBcInJvbGVcIixcbiAgXCJzY2hvb2xcIixcbiAgXCJkZWJ1Z1wiLFxuICBcInRlc3RWZXJzaW9uXCIsXG4gIFwidGVzdHZlcnNpb25cIixcbiAgXCJmZWF0dXJlc1wiLFxuICBcInNjaG9vbFR5cGVcIixcbiAgXCJzY2hvb2x0eXBlXCJdO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQsIHJlcXVlc3RlZFJpZ2h0OiBBY2Nlc3NSaWdodCkge1xuICB2YXIgY2xhaW1zID0gZ2V0VXNlckNsYWltcyh1c2VyKTtcbiAgaWYgKHJlcXVlc3RlZFJpZ2h0ICE9PSAnUicgJiYgdXNlci50dXRvckZvcikge1xuICAgIGNsYWltcyA9IGNsYWltcy5maWx0ZXIoY2xhaW0gPT4gY2xhaW0udHlwZSAhPT0gJ2VtYWlsJyk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IF9oYXNBY2Nlc3MoRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZ0FycmF5KGRvYy5hY2wgfHwgW10pLCBjbGFpbXMsIHJlcXVlc3RlZFJpZ2h0KTtcbiAgLy9jb25zb2xlLmxvZyhgSGFzICR7cmVxdWVzdGVkUmlnaHR9IGFjY2VzcyB0byAke2RvYy5uYW1lfS8ke2RvYy5pZH06ICR7cmVzdWx0fWApO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzUmVhZEFjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50KSB7XG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnUicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzV3JpdGVBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xuICByZXR1cm4gaGFzQWNjZXNzKHVzZXIsIGRvYywgJ1cnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1NoYXJlQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQpIHtcbiAgcmV0dXJuIGhhc0FjY2Vzcyh1c2VyLCBkb2MsICdTJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RlYWNoZXJBdFNjaG9vbCh1c2VyOiBVc2VyLCBzY2hvb2w6IHN0cmluZykge1xuICBjb25zdCBpc1RlYWNoZXIgPSB1c2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSAnRU1QTE9ZRUUnIHx8IHJvbGUgPT09ICdBRE1JTicpO1xuICBjb25zdCBiZWxvbmdzVG9TY2hvb2wgPSAoc2Nob29sfHxcIlwiKS50b0xvd2VyQ2FzZSgpID09PSB1c2VyLnNjaG9vbC50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKGlzVGVhY2hlciAmJiBiZWxvbmdzVG9TY2hvb2wpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBZG1pbk9yVGVhY2hlckF0U2Nob29sKHVzZXI6IFVzZXIsIHNjaG9vbDogc3RyaW5nKSB7XG4gIHJldHVybiB1c2VyLnJvbGVzLmluY2x1ZGVzKFwiQURNSU5cIikgfHwgaXNUZWFjaGVyQXRTY2hvb2wodXNlciwgc2Nob29sKTtcbn1cblxuZXhwb3J0IGNvbnN0IGltcGVyc29uYXRpb25FbnYgPSB7XG4gIGFjdEFzIChvcHRpb25zOiB7cm9sZSwgc2Nob29sLCB1cmw/fSkge1xuICAgIGNvbnN0IHtyb2xlLCBzY2hvb2wsIHVybH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGN1cnJlbnRRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoKTtcbiAgICBjb25zdCBuZXdRdWVyeSA9IHsuLi5jdXJyZW50UXVlcnksIHJvbGUsIHNjaG9vbH07XG4gICAgY29uc3QgbmV3UXVlcnlTdHJpbmcgPSBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKG5ld1F1ZXJ5KTtcbiAgICBpZiAodXJsKSB7XG4gICAgICBsb2NhdGlvbi5ocmVmID0gYCR7dXJsfSR7bmV3UXVlcnlTdHJpbmd9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9IFwiI1wiO1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gbmV3UXVlcnlTdHJpbmc7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RBcyhvcHRpb25zOiB7cm9sZSwgc2Nob29sLCB1cmw/fSkge1xuICBpbXBlcnNvbmF0aW9uRW52LmFjdEFzKG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkgKHVybDogc3RyaW5nLCBxdWVyeToge1tuYW1lOiBzdHJpbmddIDogc3RyaW5nfSkge1xuICBjb25zdCBjdXJyZW50UXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCk7XG4gIGNvbnN0IHByZXNlcnZlZFF1ZXJ5ID0ge307XG4gIGZvciAoY29uc3QgcGFyYW0gb2YgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMpIHtcbiAgICBpZiAoY3VycmVudFF1ZXJ5W3BhcmFtXSkgcHJlc2VydmVkUXVlcnlbcGFyYW1dID0gY3VycmVudFF1ZXJ5W3BhcmFtXTtcbiAgfVxuICBjb25zdCBuZXdRdWVyeVN0cmluZyA9IGdlbmVyYXRlUXVlcnlTdHJpbmcoey4uLnByZXNlcnZlZFF1ZXJ5LCAuLi5xdWVyeX0pO1xuICBjb25zdCBwSGFzaCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBwSGFzaCA+PSAwID9cbiAgICBgJHt1cmwuc3Vic3RyKDAscEhhc2gpfSR7bmV3UXVlcnlTdHJpbmd9JHt1cmwuc3Vic3RyKHBIYXNoKX1gIDpcbiAgICBgJHt1cmx9JHtuZXdRdWVyeVN0cmluZ31gO1xufVxuIiwiaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9jb250cmFjdHMva2VkLW1vZGVsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVc2VyQ2xhaW1zICh1c2VyOiBVc2VyKSB7XG4gIHJldHVybiBbe1xuICAgIHR5cGU6IFwiZW1haWxcIixcbiAgICB2YWx1ZTogdXNlci5tYWlsXG4gIH0se1xuICAgIHR5cGU6IFwic2Nob29sXCIsXG4gICAgdmFsdWU6IHVzZXIuc2Nob29sXG4gIH1dLmNvbmNhdCh1c2VyLnJvbGVzLm1hcChyb2xlID0+ICh7XG4gICAgdHlwZTogXCJyb2xlXCIsXG4gICAgdmFsdWU6IHJvbGVcbiAgfSkpKS5jb25jYXQodXNlci5yb2xlcy5tYXAocm9sZSA9PiAoe1xuICAgIHR5cGU6IFwic2Nob29sUm9sZVwiLFxuICAgIHZhbHVlOiB1c2VyLnNjaG9vbCArIFwiL1wiICsgcm9sZVxuICB9KSkpO1xufVxuIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVUlEKCkge1xuICAgIC8vIERlY2VudCBzb2x1dGlvbiBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxuICAgIHZhciBkID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgdXVpZCA9ICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgICAgIHJldHVybiAoYyA9PT0gJ3gnID8gciA6IChyICYgMHg3IHwgMHg4KSkudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIHJldHVybiB1dWlkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGF2b2lkU2ltdWx0YW5vdXNDYWxscyhtZXRob2QpIHtcbiAgICB2YXIgb25nb2luZ1Byb21pc2UgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghb25nb2luZ1Byb21pc2UpIHtcbiAgICAgICAgICAgIG9uZ29pbmdQcm9taXNlID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgb25nb2luZ1Byb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb25nb2luZ1Byb21pc2U7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxJZChyZWFsbSkge1xuICAgIHZhciBwcmVmaXggPSAnZWM5NmIzYmUtNDVmYy00MWQzLWI2OWUtJztcbiAgICB2YXIgcGFkID0gWyc1MCcsICcwOCcsICdlMScsICc0MCcsICdlNCcsICdlNyddO1xuICAgIGlmIChyZWFsbS5sZW5ndGggPiA2KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb28gbG9uZyByZWFsbVwiKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlYWxtLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBoZXggPSByZWFsbS5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcGFkW2ldID0gaGV4Lmxlbmd0aCA9PT0gMiA/XG4gICAgICAgICAgICBoZXggOlxuICAgICAgICAgICAgJzAnICsgaGV4O1xuICAgIH1cbiAgICByZXR1cm4gcHJlZml4ICsgcGFkLmpvaW4oJycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVQcmVkZXN0aW5hdGVkSWQoaW5wdXQpIHtcbiAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVuY29kZXIsIGRhdGEsIGRpZ2VzdCwgX2EsIGk7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gZW5jb2Rlci5lbmNvZGUoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBfYSA9IFVpbnQ4QXJyYXkuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBkYXRhKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBkaWdlc3QgPSBuZXcgKF9hLmFwcGx5KFVpbnQ4QXJyYXksIFt2b2lkIDAsIF9iLnNlbnQoKV0pKSgpO1xuICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmliYmxlID0gZGlnZXN0W2krK10gJSAxNiB8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdhc2hlZE5pYmJsZSA9IGMgPT09ICd4JyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pYmJsZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pYmJsZSAmIDB4NyB8IDB4ODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2FzaGVkTmliYmxlLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKmV4cG9ydCBmdW5jdGlvbiBidWYyaGV4KGJ1ZmZlcjogQXJyYXlCdWZmZXIpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChcbiAgICBuZXcgVWludDhBcnJheShidWZmZXIpLFxuICAgICh4OiBudW1iZXIpID0+ICgnMDAnICsgeC50b1N0cmluZygxNikpLnNsaWNlKC0yKSkuam9pbignJyk7XG59Ki9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVBcnJheShhLCBtYXBwZXIpIHtcbiAgICB2YXIgcmV0dmFsID0gYTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIHZhciB0ID0gYVtpXTtcbiAgICAgICAgdmFyIG1hcHBlZCA9IG1hcHBlcih0KTtcbiAgICAgICAgaWYgKG1hcHBlZCAhPT0gdCkge1xuICAgICAgICAgICAgaWYgKHJldHZhbCA9PT0gYSlcbiAgICAgICAgICAgICAgICByZXR2YWwgPSBhLnNsaWNlKCk7XG4gICAgICAgICAgICByZXR2YWxbaV0gPSBtYXBwZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldHZhbDtcbn1cbi8qXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQXJyYXk8VD4oYTogVFtdLCBtYXBwZXI6ICh0OiBUKSA9PiBUIHwgZmFsc2UpOiBUW10ge1xuICBsZXQgcmV0dmFsID0gYTtcbiAgbGV0IGogPSAwO1xuICBmb3IgKGxldCBpPTAsbD1hLmxlbmd0aDsgaTxsOyArK2ksICsraikge1xuICAgIGNvbnN0IHQgPSBhW2ldO1xuICAgIGNvbnN0IG1hcHBlZCA9IG1hcHBlcih0KTtcbiAgICBpZiAobWFwcGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gTWFwcGVyIHdhbnRzIHRvIGRlbGV0ZSB0aGlzIGRvYy5cbiAgICAgIGlmIChyZXR2YWwgPT09IGEpIHJldHZhbCA9IGEuc2xpY2UoKTtcbiAgICAgIHJldHZhbC5zcGxpY2UoaiwgMSk7XG4gICAgICAtLWo7IC8vIGNvbXBlbnNhdGUgZm9yICsralxuICAgIH0gZWxzZSBpZiAobWFwcGVkICE9PSB0KSB7XG4gICAgICBpZiAocmV0dmFsID09PSBhKSByZXR2YWwgPSBhLnNsaWNlKCk7XG4gICAgICByZXR2YWxbal0gPSBtYXBwZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXR2YWw7XG59XG4qLyBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImV4cG9ydCBpbnRlcmZhY2UgUGFyc2VRdWVyeVN0cmluZ09wdGlvbnMge1xuICB0b0xvd2VyPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb25TZWFyY2g6IHN0cmluZywgb3B0aW9ucz86IFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gIGNvbnN0IHt0b0xvd2VyfSA9IChvcHRpb25zIHx8wqB7fSkgYXMgUGFyc2VRdWVyeVN0cmluZ09wdGlvbnM7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBpZiAobG9jYXRpb25TZWFyY2ggJiYgbG9jYXRpb25TZWFyY2gubGVuZ3RoID4gMSlcbiAgICBsb2NhdGlvblNlYXJjaC5zdWJzdHIoMSlcbiAgICAgIC5zcGxpdCgnJicpXG4gICAgICAubWFwKHBhcnQgPT4gcGFydC5zcGxpdCgnPScpLm1hcChzID0+IGRlY29kZVVSSUNvbXBvbmVudChzLnRyaW0oKSkpKVxuICAgICAgLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4gcmVzdWx0W3RvTG93ZXIgPyBrZXkudG9Mb3dlckNhc2UoKSA6IGtleV0gPSB2YWx1ZSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZVBhcmFtcyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHBhcmFtcykuZmlsdGVyKGtleSA9PiBwYXJhbXNba2V5XSAhPT0gdW5kZWZpbmVkKS5tYXAoa2V5ID0+IGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSl9YCkuam9pbignJicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVRdWVyeVN0cmluZyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcbiAgcmV0dXJuIFwiP1wiICsgZW5jb2RlUGFyYW1zKHBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUhhc2hRdWVyeVN0cmluZyhsb2NhdGlvbkhhc2g6IHN0cmluZywgb3B0aW9ucz86IFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zKSB7XG4gIHJldHVybiBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uSGFzaCwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUhhc2hRdWVyeVN0cmluZyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcbiAgcmV0dXJuIFwiI1wiICsgZW5jb2RlUGFyYW1zKHBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFVybEFuZFF1ZXJ5ICh1cmxXaXRoUG9zc2libGVRdWVyeTogc3RyaW5nKSB7XG4gIGNvbnN0IHBRdWVyeSA9IHVybFdpdGhQb3NzaWJsZVF1ZXJ5LmluZGV4T2YoJz8nKTtcbiAgcmV0dXJuIHBRdWVyeSA+PSAwID9cbiAgICBbdXJsV2l0aFBvc3NpYmxlUXVlcnkuc3Vic3RyKDAsIHBRdWVyeSksIHVybFdpdGhQb3NzaWJsZVF1ZXJ5LnN1YnN0cihwUXVlcnkpXSA6XG4gICAgW3VybFdpdGhQb3NzaWJsZVF1ZXJ5LCBcIlwiXTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBjb25zdCBMYW5ndWFnZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtpbnRsOiBudWxsfSk7IiwiLypcbmRlY2xhcmUgdmFyIEJ1ZmZlcjsgLy8gbm9kZSBidWlsdC1pblxuXG5cbmZ1bmN0aW9uIGJhc2ljQXV0aEhlYWRlcih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICByZXR1cm4gXCJCYXNpYyBcIiArIG5ldyBCdWZmZXIodXNlcm5hbWUgKyBcIjpcIiArIHBhc3N3b3JkKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn1cbiovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9lbWl0dGVyJztcbnZhciBSZXN0Q2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc3RDbGllbnQoaXNvbW9ycGhpYywgYmFzZVVybCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmlzb21vcnBoaWMgPSBpc29tb3JwaGljO1xuICAgICAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IG5ldyBFbWl0dGVyKHRoaXMpO1xuICAgICAgICB0aGlzLmZldGNoT3B0aW9ucyA9IHsgbW9kZTogJ2NvcnMnIH07XG4gICAgICAgIHRoaXMuYXV0aEhlYWRlciA9IG9wdGlvbnMuYmVhcmVyID9cbiAgICAgICAgICAgIFwiQmVhcmVyIFwiICsgb3B0aW9ucy5iZWFyZXIgOlxuICAgICAgICAgICAgb3B0aW9ucy51c2VybmFtZSA/XG4gICAgICAgICAgICAgICAgXCJCYXNpYyBcIiArIGlzb21vcnBoaWMuYnRvYShvcHRpb25zLnVzZXJuYW1lICsgXCI6XCIgKyAob3B0aW9ucy5wYXNzd29yZCB8fCBcIlwiKSkgOlxuICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgIHRoaXMuYmVhcmVyUHJvdmlkZXIgPSBvcHRpb25zLmJlYXJlclByb3ZpZGVyIHx8IG51bGw7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXN0Q2xpZW50LnByb3RvdHlwZSwgXCJzdGF0dXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24gKHBhdGgsIG1ldGhvZCwgaGVhZGVycywgcXVlcnksIGZldGNoT3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICArK3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xuICAgICAgICB0aGlzLl9zdGF0dXMuZGlzcGF0Y2godGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9mZXRjaChwYXRoLCBtZXRob2QsIGhlYWRlcnMsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAtLV90aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucztcbiAgICAgICAgICAgIF90aGlzLl9zdGF0dXMuZGlzcGF0Y2goX3RoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgLS1fdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnM7XG4gICAgICAgICAgICBfdGhpcy5fc3RhdHVzLmRpc3BhdGNoKF90aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLl9mZXRjaCA9IGZ1bmN0aW9uIChwYXRoLCBtZXRob2QsIGhlYWRlcnMsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcXVlcnlTdHIsIF9hLCBhdXRoSGVhZGVyLCB0b2tlbkluZm8sIGJlYXJlclByb3ZpZGVyLCBfYiwgX2MsIHVybCwgcmVzLCB3d3dhdXRoLCBfZDtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZldGNoT3B0aW9ucyAmJiBmZXRjaE9wdGlvbnMuY2FjaGUgPT09ICduby1jYWNoZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBiYWNrLWJ1dHRvbiBub3QgcmVzcGVjdGluZyBjYWNoZSBjb250cm9sIGluIENocm9tZS9PcGVyYS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgYSBxdWVyeSBwYXJhbWV0ZXIgdG8gZm9yY2UgYSBjYWNoZSBlbnRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgcXVlcnksIHsgbm9jYWNoZTogY3JlYXRlVVVJRCgpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlTdHIgPSBxdWVyeSAmJiBPYmplY3Qua2V5cyhxdWVyeSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHF1ZXJ5W2tleV0gIT09IHVuZGVmaW5lZDsgfSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIj1cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeVtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcywgYXV0aEhlYWRlciA9IF9hLmF1dGhIZWFkZXIsIHRva2VuSW5mbyA9IF9hLnRva2VuSW5mbywgYmVhcmVyUHJvdmlkZXIgPSBfYS5iZWFyZXJQcm92aWRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCFhdXRoSGVhZGVyICYmICF0b2tlbkluZm8gJiYgYmVhcmVyUHJvdmlkZXIpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJlYXJlclByb3ZpZGVyLmdldEJlYXJlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudG9rZW5JbmZvID0gdG9rZW5JbmZvID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRva2VuSW5mbykgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0b2tlbkluZm8uZXhwaXJlcyA8IERhdGUubm93KCkpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVG9rZW4gZXhwaXJlZC4gUmVmcmVzaCBpdDpcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBiZWFyZXJQcm92aWRlci5yZWZyZXNoQmVhcmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50b2tlbkluZm8gPSB0b2tlbkluZm8gPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhIZWFkZXIgPSBcIkJlYXJlciBcIiArIHRva2VuSW5mby50b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gNTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW4gb25lIHdheSBvciBhbm90aGVyLCB3ZSd2ZSBjb25jbHVkZWQgYW4gQXV0aG9yaXphdGlvbiBoZWFkZXIgdG8gdXNlOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF1dGhIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBhdXRoSGVhZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdGhpcy5iYXNlVXJsICsgcGF0aCArIChxdWVyeVN0ciA/IFwiP1wiICsgcXVlcnlTdHIgOiBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaXNvbW9ycGhpYy5mZXRjaCh1cmwsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuZmV0Y2hPcHRpb25zLCB7IGhlYWRlcnM6IGhlYWRlcnMsIG1ldGhvZDogbWV0aG9kIH0sIGZldGNoT3B0aW9ucykpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyA9PSA0MDEgJiYgdGhpcy5iZWFyZXJQcm92aWRlcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3d3YXV0aCA9IHJlcy5oZWFkZXJzLmdldChcInd3dy1hdXRoZW50aWNhdGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCBcIiArIHJlcy5zdGF0dXMgKyBcIiBmcm9tIFwiICsgKHRoaXMuYmFzZVVybCArIHBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHd3d2F1dGggJiYgL0JlYXJlci9pLnRlc3Qod3d3YXV0aCkpKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYmVhcmVyUHJvdmlkZXIucmVmcmVzaEJlYXJlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgX2QudG9rZW5JbmZvID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gXCJCZWFyZXIgXCIgKyB0aGlzLnRva2VuSW5mby50b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaXNvbW9ycGhpYy5mZXRjaCh1cmwsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuZmV0Y2hPcHRpb25zLCB7IGhlYWRlcnM6IGhlYWRlcnMsIG1ldGhvZDogbWV0aG9kIH0sIGZldGNoT3B0aW9ucykpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSA5O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMiAvKnJldHVybiovLCByZXNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXRoLCBxdWVyeSwgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKHBhdGgsIFwiR0VUXCIsIHsgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb247IHRleHQvcGxhaW5cIiB9LCBxdWVyeSwgZmV0Y2hPcHRpb25zKTtcbiAgICB9O1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbiAocGF0aCwgZGF0YSwgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKHBhdGgsIFwiUE9TVFwiLCB7XG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIFwiQWNjZXB0XCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIH0sIG51bGwsIHRzbGliXzEuX19hc3NpZ24oe30sIGZldGNoT3B0aW9ucywgeyBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSB9KSk7XG4gICAgfTtcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAocGF0aCwgcXVlcnksIGJvZHksIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChwYXRoLCBcIkRFTEVURVwiLCB7IEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uOyB0ZXh0L3BsYWluXCIgfSwgcXVlcnksIHRzbGliXzEuX19hc3NpZ24oe30sIGZldGNoT3B0aW9ucywgeyBib2R5OiBib2R5IH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXN0Q2xpZW50O1xufSgpKTtcbmV4cG9ydCB7IFJlc3RDbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3RjbGllbnQuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICcuL3Jlc3RjbGllbnQnO1xuaW1wb3J0IHsgYXZvaWRTaW11bHRhbm91c0NhbGxzIH0gZnJvbSAnLi91dGlscyc7XG52YXIgS2VkQmVhcmVyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gS2VkQmVhcmVyUHJvdmlkZXIoaXNvbW9ycGhpYywgc3RvcmFnZSwgdG9rZW5JZCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCwgdG9rZW5VcmwsIHRva2VuUXVlcnkpIHtcbiAgICAgICAgdGhpcy5pc29tb3JwaGljID0gaXNvbW9ycGhpYztcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gc3RvcmFnZTtcbiAgICAgICAgdGhpcy50b2tlbklkID0gdG9rZW5JZDtcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IGNsaWVudElkO1xuICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IGNsaWVudFNlY3JldDtcbiAgICAgICAgdGhpcy50b2tlblVybCA9IHRva2VuVXJsO1xuICAgICAgICB0aGlzLnRva2VuUXVlcnkgPSB0b2tlblF1ZXJ5O1xuICAgICAgICB0aGlzLnRva2VuSW5mbyA9IHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfTtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgUmVzdENsaWVudChpc29tb3JwaGljLCBcIlwiLCB7XG4gICAgICAgICAgICB1c2VybmFtZTogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLmNsaWVudFNlY3JldFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRCZWFyZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMucmVmcmVzaEJlYXJlciA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzLnJlZnJlc2hCZWFyZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIEtlZEJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCB0b2tlbiwgZXhwaXJlcywgX2IsIGVfMTtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzLnRva2VuSW5mbywgdG9rZW4gPSBfYS50b2tlbiwgZXhwaXJlcyA9IF9hLmV4cGlyZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gJiYgZXhwaXJlcyA+PSBEYXRlLm5vdygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMSwgNCwgLCA2XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0b3JhZ2UubG9hZCh0aGlzLmNsaWVudElkICsgXCIvXCIgKyB0aGlzLnRva2VuSWQpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudG9rZW5JbmZvID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5JbmZvLnRva2VuICYmIHRoaXMudG9rZW5JbmZvLmV4cGlyZXMgPj0gRGF0ZS5ub3coKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZWZyZXNoQmVhcmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hCZWFyZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5yZWZyZXNoQmVhcmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXMsIHJldHJpZXMsIF9hLCBfYjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cmllcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJldHJpZXMgPCA2KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJldHJpZXZpbmcgdG9rZW4gZm9yIFwiICsgdGhpcy50b2tlbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2xpZW50LmdldCh0aGlzLnRva2VuVXJsLCB0aGlzLnRva2VuUXVlcnksIHsgY2FjaGU6ICdyZWxvYWQnIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkdvdCBcIiArIHJlcy5zdGF0dXMgKyBcIiBcIiArIHJlcy5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudG9rZW5JbmZvID0gKF9iLnRva2VuID0gX2Muc2VudCgpLCBfYi5leHBpcmVzID0gRGF0ZS5ub3coKSArIDU5ICogNjAgKiAxMDAwLCBfYik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCB0b2tlbiBmb3IgXCIgKyB0aGlzLnRva2VuSWQgKyBcIjogXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnRva2VuSW5mbykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNhdmUodGhpcy5jbGllbnRJZCArIFwiL1wiICsgdGhpcy50b2tlbklkLCB0aGlzLnRva2VuSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICArK3JldHJpZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmV0cmlldmUgdG9rZW4gZm9yIFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy50b2tlbklkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEtlZEJlYXJlclByb3ZpZGVyO1xufSgpKTtcbmV4cG9ydCB7IEtlZEJlYXJlclByb3ZpZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWQtYmVhcmVyLXByb3ZpZGVyLmpzLm1hcCIsInZhciBEb2N1bWVudEFjY2VzcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb2N1bWVudEFjY2VzcyhhY2Nlc3NDbGFpbVR5cGUsIGFjY2Vzc0NsYWltVmFsdWUsIHJpZ2h0KSB7XG4gICAgICAgIHRoaXMuYWNjZXNzQ2xhaW1UeXBlID0gYWNjZXNzQ2xhaW1UeXBlO1xuICAgICAgICB0aGlzLmFjY2Vzc0NsYWltVmFsdWUgPSBhY2Nlc3NDbGFpbVZhbHVlO1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfVxuICAgIERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmcgPSBmdW5jdGlvbiAoYWMpIHtcbiAgICAgICAgaWYgKCFhYylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgc3BsaXQgPSBhYy5zcGxpdCgnOicpO1xuICAgICAgICBpZiAoc3BsaXQubGVuZ3RoIDwgMylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYWNjZXNzIHN0cmluZzogXCIgKyBhYyk7XG4gICAgICAgIHZhciBjbGFpbVR5cGUgPSBEb2N1bWVudEFjY2Vzcy51bmVzY2FwZShzcGxpdFswXSk7XG4gICAgICAgIHZhciBjbGFpbVZhbHVlID0gRG9jdW1lbnRBY2Nlc3MudW5lc2NhcGUoc3BsaXRbMV0pO1xuICAgICAgICB2YXIgcmlnaHQgPSBzcGxpdFsyXTtcbiAgICAgICAgaWYgKHJpZ2h0ICE9PSAnUicgJiYgcmlnaHQgIT09ICdXJyAmJiByaWdodCAhPT0gJ1MnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhY2Nlc3Mgc3RyaW5nOiBcIiArIGFjKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEFjY2VzcyhjbGFpbVR5cGUsIGNsYWltVmFsdWUsIHJpZ2h0KTtcbiAgICB9O1xuICAgIERvY3VtZW50QWNjZXNzLmVzY2FwZSA9IGZ1bmN0aW9uIChhY2Nlc3NDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGFjY2Vzc0NvbXBvbmVudC5yZXBsYWNlKC9cXCUvZywgXCIlMjVcIikucmVwbGFjZSgvXFw6L2csIFwiJTNBXCIpO1xuICAgIH07XG4gICAgRG9jdW1lbnRBY2Nlc3MudW5lc2NhcGUgPSBmdW5jdGlvbiAoYWNjZXNzQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBhY2Nlc3NDb21wb25lbnQucmVwbGFjZSgvXFwlM0EvZywgXCI6XCIpLnJlcGxhY2UoL1xcJTI1L2csIFwiJVwiKTtcbiAgICB9O1xuICAgIERvY3VtZW50QWNjZXNzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERvY3VtZW50QWNjZXNzLmVzY2FwZSh0aGlzLmFjY2Vzc0NsYWltVHlwZSkgKyBcIjpcIiArXG4gICAgICAgICAgICBEb2N1bWVudEFjY2Vzcy5lc2NhcGUodGhpcy5hY2Nlc3NDbGFpbVZhbHVlKSArIFwiOlwiICtcbiAgICAgICAgICAgIHRoaXMucmlnaHQ7XG4gICAgfTtcbiAgICBEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nQXJyYXkgPSBmdW5jdGlvbiAoYWNsKSB7XG4gICAgICAgIHJldHVybiBhY2xcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGFjKSB7IHJldHVybiBEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nKGFjKTsgfSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjKSB7IHJldHVybiBhYzsgfSk7XG4gICAgfTtcbiAgICBEb2N1bWVudEFjY2Vzcy50b1N0cmluZ0FycmF5ID0gZnVuY3Rpb24gKGFjbCkge1xuICAgICAgICByZXR1cm4gYWNsLm1hcChmdW5jdGlvbiAoYWMpIHsgcmV0dXJuIGFjLnRvU3RyaW5nKCk7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIERvY3VtZW50QWNjZXNzO1xufSgpKTtcbmV4cG9ydCB7IERvY3VtZW50QWNjZXNzIH07XG5leHBvcnQgZnVuY3Rpb24gaGFzQWNjZXNzKGFjbCwgdXNlckNsYWltcywgcmVxdWVzdGVkUmlnaHQpIHtcbiAgICBpZiAodXNlckNsYWltcy5zb21lKGZ1bmN0aW9uIChjbGFpbSkgeyByZXR1cm4gY2xhaW0udHlwZSA9PT0gJ3JvbGUnICYmIGNsYWltLnZhbHVlID09PSBcIkFETUlOXCI7IH0pKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gYWNsLnNvbWUoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJDbGFpbXMuc29tZShmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIGEuYWNjZXNzQ2xhaW1UeXBlID09PSBjLnR5cGUgJiZcbiAgICAgICAgICAgICAgICBhLmFjY2Vzc0NsYWltVmFsdWUgPT09IGMudmFsdWUgJiYgKChhLnJpZ2h0ID09PSAnUicgJiYgcmVxdWVzdGVkUmlnaHQgPT09ICdSJykgfHxcbiAgICAgICAgICAgICAgICAoYS5yaWdodCA9PT0gJ1cnICYmIFsnUicsICdXJ10uaW5kZXhPZihyZXF1ZXN0ZWRSaWdodCkgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAoYS5yaWdodCA9PT0gJ1MnKSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjZXNzLWNvbnRyb2wuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbnZhciBIdHRwRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSHR0cEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEh0dHBFcnJvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFwiSFRUUFwiICsgY29kZSArIFwiIFwiICsgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBfdGhpcy5uYW1lID0gXCJodHRwXCIgKyBjb2RlO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gXCJIVFRQXCIgKyBjb2RlICsgXCIgXCIgKyBtZXNzYWdlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBIdHRwRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBIdHRwRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAtZXJyb3IuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICcuL3Jlc3RjbGllbnQnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscyc7XG5leHBvcnQgeyBLZWRCZWFyZXJQcm92aWRlciB9IGZyb20gJy4va2VkLWJlYXJlci1wcm92aWRlcic7XG5leHBvcnQgKiBmcm9tICcuL2FjY2Vzcy1jb250cm9sJztcbmV4cG9ydCB7IFJlc3RDbGllbnQgfTtcbmltcG9ydCB7IEh0dHBFcnJvciB9IGZyb20gJy4vaHR0cC1lcnJvcic7XG5leHBvcnQgeyBIdHRwRXJyb3IgfTtcbmV4cG9ydCAqIGZyb20gJy4vcmVzdGNsaWVudCc7XG47XG4vLyB8ICdvdGhlckZsYWcnIHwgJ3RoaXJkRmxhZyc7Li4uXG52YXIgS2VkQmFja2VuZENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kQ2xpZW50KGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBiYXNlVXJsKSB7XG4gICAgICAgIHRoaXMuaHR0cCA9IG5ldyBSZXN0Q2xpZW50KGlzb21vcnBoaWMsIGJhc2VVcmwsIHsgYmVhcmVyUHJvdmlkZXI6IGJlYXJlclByb3ZpZGVyIH0pO1xuICAgIH1cbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5nZXRNeUNsYWltcyA9IGZ1bmN0aW9uICh0YWJsZSwgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQoXCJtZS9jbGFpbXMvXCIgKyAodGFibGUgfHwgXCJcIiksIG51bGwsIGZldGNoT3B0aW9ucyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQodGFibGUgKyBcIi9cIiArIGlkLCBvcHRpb25zLCBmZXRjaE9wdGlvbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMsIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBxdWVyeSwgcmVzLCBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm11dGF0aW9uc09uRW1wdHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkubXV0YXRpb25zT25FbXB0eSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMubXV0YXRpb25zT25FbXB0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZ2V0KFwiXCIgKyB0YWJsZSwgcXVlcnksIGZldGNoT3B0aW9ucyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuYmF0Y2ggPSBmdW5jdGlvbiAocmVxcywgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW9yZGVyIG9wZXJhdGlvbnMgc28gdGhhdCAnYWRkJ3MgY29tZSBmaXJzdCBhbmQgJ2RlbGV0ZSdzIGNvbWUgbGFzdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXMgPSByZXFzLnNsaWNlKCkuc29ydChmdW5jdGlvbiAocmVxMSwgcmVxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXExLm9wID09PSAnYWRkJyA/IC0xIDogcmVxMi5vcCA9PT0gJ2FkZCcgPyAxIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxMS5vcCA9PT0gJ2RlbGV0ZScgPyAxIDogcmVxMi5vcCA9PT0gJ2RlbGV0ZScgPyAtMSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5wb3N0KFwiYmF0Y2hcIiwgcmVxcywgZmV0Y2hPcHRpb25zKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChzY29wZUZuKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJ1bm5lcjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmVyID0gbmV3IEJhdGNoUnVubmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZUZuKHJ1bm5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmJhdGNoKHJ1bm5lci5tdXRhdGlvblJlcXVlc3RzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZGVsZXRlUmVhbG0gPSBmdW5jdGlvbiAocmVhbG0pIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmRlbGV0ZShcInJlYWxtcy9cIiArIHJlYWxtKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGFibGUsIGRvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuYWRkKHRhYmxlLCBkb2MpOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnB1dCh0YWJsZSwgZG9jKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudXBkYXRlKHRhYmxlLCBpZCwgZGVsdGFEb2MsIGJyYW5jaElkKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIubWVyZ2UoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5jbGVhckJyYW5jaCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5jbGVhckJyYW5jaChicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5kZWxldGUodGFibGUsIGlkKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5zaGFyZSh0YWJsZSwgaWQsIGFjbCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bnNoYXJlKHRhYmxlLCBpZCwgYWNsKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5saW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRJZCwgbGFiZWwsIGJyYW5jaElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmxpbmsyKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmxpbmsoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51bmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIGxhYmVsLCBicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmxpbmsyKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5kb0xpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRJZCwgbGFiZWwsIGJyYW5jaElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnVuZG9MaW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEtlZEJhY2tlbmRDbGllbnQ7XG59KCkpO1xuZXhwb3J0IHsgS2VkQmFja2VuZENsaWVudCB9O1xudmFyIEJhdGNoUnVubmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhdGNoUnVubmVyKCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMgPSBbXTtcbiAgICB9XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jLCBicmFuY2hJZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnYWRkJywgdGFibGU6IHRhYmxlLCBkb2M6IGRvYywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAodGFibGUsIGRvYykge1xuICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MpO1xuICAgICAgICBkZWxldGUgZG9jLmFjbDsgLy8gRm9yYmlkZGVuIHRvIHNlbmQgYWNsIHdpdGggcHV0KCkgY2FsbHMuXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdwdXQnLCB0YWJsZTogdGFibGUsIGRvYzogZG9jIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgZGVsdGFEb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkZWx0YURvYyk7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1cGRhdGUnLCB0YWJsZTogdGFibGUsIGlkOiBpZCwgZGVsdGFEb2M6IGRlbHRhRG9jLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdtZXJnZScsIGJyYW5jaElkOiBicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQ6IHRhcmdldEJyYW5jaElkIH0pO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmNsZWFyQnJhbmNoID0gZnVuY3Rpb24gKGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdjbGVhci1icmFuY2gnLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnZGVsZXRlJywgdGFibGU6IHRhYmxlLCBpZDogaWQgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnNoYXJlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgYWNsKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdzaGFyZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBhY2w6IGFjbCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5zaGFyZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBhY2w6IGFjbCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2xpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0VGFibGU6IHRhcmdldFRhYmxlLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdsaW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5saW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldFRhYmxlOiB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bmxpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5kb0xpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bmRvLWxpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcbiAgICB9O1xuICAgIHJldHVybiBCYXRjaFJ1bm5lcjtcbn0oKSk7XG5leHBvcnQgeyBCYXRjaFJ1bm5lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIG51bWJlck9mVGFza3M6IG51bWJlcjtcbiAgICBjb21wbGV0ZWROdW1iZXJPZlRhc2tzOiBudW1iZXI7XG4gICAgbWF4aW11bVRhc2tzRGlzcGxheWVkPzogbnVtYmVyO1xuICAgIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgICBwcm9ncmVzc0NvbG9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgR29hbFByb2dyZXNzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gICAgcHVibGljIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIG51bWJlcm9mVGFza3M6IDAsXG4gICAgICAgIGNvbXBsZXRlZE51bWJlck9mVGFza3M6IDAsXG4gICAgICAgIG1heGltdW1UYXNrc0Rpc3BsYXllZDogMTAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJsaWdodGdyZXlcIixcbiAgICAgICAgcHJvZ3Jlc3NDb2xvcjogXCIjM2RiY2EyXCIsXG4gICAgfTtcblxuICAgIGNyZWF0ZVByb2dyZXNzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IG51bWJlck9mVGFza3MsIGNvbXBsZXRlZE51bWJlck9mVGFza3MsIG1heGltdW1UYXNrc0Rpc3BsYXllZCwgYmFja2dyb3VuZENvbG9yLCBwcm9ncmVzc0NvbG9yIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBbXTtcbiAgICAgICAgaWYobnVtYmVyT2ZUYXNrcyA+IG1heGltdW1UYXNrc0Rpc3BsYXllZCl7XG4gICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInByb2dyZXNzLW92ZXJ2aWV3XCI+IHtjb21wbGV0ZWROdW1iZXJPZlRhc2tzfSAvIHtudW1iZXJPZlRhc2tzfSA8L2Rpdj47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCB0YXNrTm8gPSAxOyB0YXNrTm8gPD0gbnVtYmVyT2ZUYXNrczsgdGFza05vKyspIHtcbiAgICAgICAgICAgIHByb2dyZXNzLnB1c2goXG4gICAgICAgICAgICA8c3ZnIGtleT17dGFza05vfT5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGNsYXNzTmFtZT1cImNpcmNsZS1jaGFydC1iYWNrZ3JvdW5kXCIgZmlsbD17dGFza05vID4gY29tcGxldGVkTnVtYmVyT2ZUYXNrcyA/IGJhY2tncm91bmRDb2xvciA6IHByb2dyZXNzQ29sb3J9IGN4PVwiOFwiIGN5PVwiOFwiIHI9XCI4XCIgLz5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfVxuXG4gICAgcmVuZGVyKCl7ICBcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiZ29hbHMtcHJvZ3Jlc3NcIj57dGhpcy5jcmVhdGVQcm9ncmVzcygpfTwvZGl2PlxuICAgIH1cbn0iLCIvKiBSRUZBQ1RPUjogTW92ZSB0aGlzIGNvbXBvbmVudCBvdXRzaWRlIGNvdXJzZWJ1aWxkZXIhXG4gICBUaGlzIGlzIGEgZ2VuZXJhbC1wdXJwb3NlIGNvbXBvbmVudFxuKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR29hbFByb2dyZXNzIH0gZnJvbSAnLi4vY2hhcnRzL2dvYWwtcHJvZ3Jlc3MnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB0aXRsZTogc3RyaW5nIHwgSlNYLkVsZW1lbnQ7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaGVhZGVyQ2xhc3NOYW1lPzogc3RyaW5nO1xuICBjb250ZW50Q2xhc3NOYW1lPzogc3RyaW5nO1xuICBoZWFkZXJPcGVuPzogYm9vbGVhbjtcbiAgaW5hY3RpdmF0ZWQ/OiBib29sZWFuO1xuICBpbmFjdGl2YXRlZFJlbmRlcj86ICdjaGlsZHJlbicgfCAndGl0bGVBbmRDaGlsZHJlbic7XG4gIG9uT3BlbkNsb3NlPzogKGJlY2FtZU9wZW46IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGRpc3BsYXlQcm9ncmVzcz86IGJvb2xlYW47XG4gIHByb2dyZXNzRGF0YT86IHtjb21wbGV0ZWROdW1iZXJPZlRhc2tzOiBudW1iZXIsIG51bWJlck9mVGFza3M6IG51bWJlcn07XG4gIGNoaWxkcmVuO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBoZWFkZXJPcGVuOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgT3BlbkNsb3NlQm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaGVhZGVyT3BlbjogcHJvcHMuaGVhZGVyT3BlbiB8fCBmYWxzZVxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHM6IFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5oZWFkZXJPcGVuICE9PSB0aGlzLnByb3BzLmhlYWRlck9wZW4pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2hlYWRlck9wZW46IG5leHRQcm9wcy5oZWFkZXJPcGVufSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGl0bGUsIGNsYXNzTmFtZSwgY2hpbGRyZW4sIGhlYWRlckNsYXNzTmFtZSwgY29udGVudENsYXNzTmFtZSwgZGlzcGxheVByb2dyZXNzLCBwcm9ncmVzc0RhdGEsXG4gICAgICBpbmFjdGl2YXRlZCwgaW5hY3RpdmF0ZWRSZW5kZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBoZWFkZXJPcGVuIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGluYWN0aXZhdGVkKSByZXR1cm4gaW5hY3RpdmF0ZWRSZW5kZXIgPT09ICd0aXRsZUFuZENoaWxkcmVuJyA/IDw+XG4gICAgICA8Pnt0aXRsZX08Lz5cbiAgICAgIDw+e2NoaWxkcmVufTwvPlxuICAgIDwvPiA6IDw+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC8+O1xuXG4gICAgLy92YXIgY3VycmVudFByb2dyZXNzRGF0YSA9IC8vcHJvZ3Jlc3NEYXRhKCk7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXsoY2xhc3NOYW1lfHwnJykgKyBcIiBvcGVuQ2xvc2VcIiArIChoZWFkZXJPcGVuID8gXCIgb3BlblwiIDogXCJcIil9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkhlYWRlclwiICsgKGhlYWRlckNsYXNzTmFtZSA/IFwiIFwiICsgaGVhZGVyQ2xhc3NOYW1lIDogXCJcIil9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vbk9wZW5DbG9zZSkgdGhpcy5wcm9wcy5vbk9wZW5DbG9zZSghdGhpcy5zdGF0ZS5oZWFkZXJPcGVuKTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGVhZGVyT3BlbjogIXRoaXMuc3RhdGUuaGVhZGVyT3BlbiB9KTtcbiAgICAgICAgfX0gPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW5IZWFkZXJDb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2Pnt0aXRsZX08L2Rpdj5cbiAgICAgICAgICB7ZGlzcGxheVByb2dyZXNzICYmIDxHb2FsUHJvZ3Jlc3Mgey4uLnByb2dyZXNzRGF0YX0vPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcIm9wZW5Db250ZW50XCIgKyAoY29udGVudENsYXNzTmFtZSA/IFwiIFwiICsgY29udGVudENsYXNzTmFtZSA6IFwiXCIpfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+O1xuICB9XG59XG4iLCJ2YXIgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSgpIHtcbiAgICB9XG4gICAgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKGlkLCB0b2tlbkluZm8pIHtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImJlYXJlci1cIiArIGlkLCBKU09OLnN0cmluZ2lmeSh0b2tlbkluZm8pKTtcbiAgICB9O1xuICAgIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGpzb24gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiYmVhcmVyLVwiICsgaWQpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShqc29uID8gSlNPTi5wYXJzZShqc29uKSA6IHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2U7XG59KCkpO1xuZXhwb3J0IHsgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZWFyZXItc3RvcmFnZS1zZXNzaW9uc3RvcmFnZS5qcy5tYXAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlVGFzayh0YXNrKSB7XG4gICAgaWYgKCF0YXNrLnJlc291cmNlcylcbiAgICAgICAgdGFzay5yZXNvdXJjZXMgPSBbXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pZ3JhdGUtdGFzay5qcy5tYXAiLCJpbXBvcnQgbWlncmF0ZUNvdXJzZSBmcm9tICcuL21pZ3JhdGUtY291cnNlJztcbmltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlKGRvYywgdGFibGUsIGdyYXBocykge1xuICAgIHN3aXRjaCAodGFibGUpIHtcbiAgICAgICAgY2FzZSBcImNvdXJzZXNcIjpcbiAgICAgICAgICAgIG1pZ3JhdGVDb3Vyc2UoZG9jLCBncmFwaHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ0YXNrc1wiOlxuICAgICAgICAgICAgbWlncmF0ZVRhc2soZG9jKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pZ3JhdGUuanMubWFwIiwiaW1wb3J0IG1pZ3JhdGVUYXNrIGZyb20gJy4vbWlncmF0ZS10YXNrJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGVDb3Vyc2UoY291cnNlLCBncmFwaHMpIHtcbiAgICBpZiAoIWNvdXJzZS5tb2R1bGVzKVxuICAgICAgICBjb3Vyc2UubW9kdWxlcyA9IFtdO1xuICAgIGNvdXJzZS5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgICAgICBpZiAoIW1vZHVsZS5yZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIG1vZHVsZS5yZXNvdXJjZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vZHVsZS50YXNrSWRzKSB7XG4gICAgICAgICAgICBtb2R1bGUudGFza0lkcyA9IFtdO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycykge1xuICAgICAgICBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycyA9IFtdO1xuICAgIH1cbiAgICAvLyBFYXJsaWVyIHdyb25nIHNwZWxsaW5nIG9mIHJlc291cmNlc1xuICAgIGlmICgncmVzb3Vyc2VzJyBpbiBjb3Vyc2UgJiYgISgncmVzb3VyY2VzJyBpbiBjb3Vyc2UpKSB7XG4gICAgICAgIGNvdXJzZS5yZXNvdXJjZXMgPSBjb3Vyc2UucmVzb3Vyc2VzO1xuICAgICAgICBkZWxldGUgY291cnNlLnJlc291cnNlcztcbiAgICB9XG4gICAgaWYgKCFjb3Vyc2UucmVzb3VyY2VzKSB7XG4gICAgICAgIGNvdXJzZS5yZXNvdXJjZXMgPSBbXTtcbiAgICB9XG4gICAgaWYgKGdyYXBocykge1xuICAgICAgICBncmFwaHMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd0YXNrcyc6XG4gICAgICAgICAgICAgICAgICAgIGNvdXJzZS50YXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0YXNrKSB7IHJldHVybiBtaWdyYXRlVGFzayh0YXNrKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLWNvdXJzZS5qcy5tYXAiLCJpbXBvcnQgbWlncmF0ZSBmcm9tICcuL21pZ3JhdGUnO1xuZXhwb3J0IHZhciBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gPSBmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgaWYgKGNsaWVudC5fX21pZ3JhdG9yX21peGVkX2luKVxuICAgICAgICByZXR1cm47XG4gICAgY2xpZW50Ll9fbWlncmF0b3JfbWl4ZWRfaW4gPSB0cnVlO1xuICAgIHZhciBnZXQgPSBjbGllbnQuZ2V0O1xuICAgIHZhciBsaXN0ID0gY2xpZW50Lmxpc3Q7XG4gICAgY2xpZW50LmdldCA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGluY2x1ZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZTtcbiAgICAgICAgcmV0dXJuIGdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgbWlncmF0ZShyZXN1bHQsIHRhYmxlLCBpbmNsdWRlICYmIGluY2x1ZGUudG9TdHJpbmcoKS5zcGxpdCgnLCcpKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY2xpZW50Lmxpc3QgPSBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGluY2x1ZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZTtcbiAgICAgICAgcmV0dXJuIGxpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChkb2MpIHsgcmV0dXJuIG1pZ3JhdGUoZG9jLCB0YWJsZSwgaW5jbHVkZSAmJiBpbmNsdWRlLnRvU3RyaW5nKCkuc3BsaXQoJywnKSk7IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gY2xpZW50O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsInZhciByZWRpckhhc2ggPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicmVkaXItaGFzaFwiKTtcbmlmIChyZWRpckhhc2gpXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIF9hID0gSlNPTi5wYXJzZShyZWRpckhhc2gpLCB0aW1lID0gX2EudGltZSwgaGFzaCA9IF9hLmhhc2g7XG4gICAgICAgIGlmICh0aW1lICYmIHRpbWUgPiBEYXRlLm5vdygpIC0gNjAwMDApIHtcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJyZWRpci1oYXNoXCIpO1xuICAgICAgICAgICAgbG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKF8pIHsgfVxuZXhwb3J0IGZ1bmN0aW9uIHJlbWVtYmVySGFzaExvY2F0aW9uKCkge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJyZWRpci1oYXNoXCIsIEpTT04uc3RyaW5naWZ5KHsgdGltZTogRGF0ZS5ub3coKSwgaGFzaDogbG9jYXRpb24uaGFzaCB9KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoLXJlc3RvcmVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBIdHRwRXJyb3IgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIH0gZnJvbSBcIi4vYmVhcmVyLXN0b3JhZ2Utc2Vzc2lvbnN0b3JhZ2VcIjtcbmltcG9ydCB7IGF2b2lkU2ltdWx0YW5vdXNDYWxscyB9IGZyb20gJy4uL2tlZC1iYWNrZW5kLWNsaWVudC91dGlscyc7XG5pbXBvcnQgeyBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gfSBmcm9tICcuLi9rZWQtbW9kZWwtbWlncmF0b3InO1xuaW1wb3J0ICcuL2hhc2gtcmVzdG9yZXInO1xuaW1wb3J0IHsgcmVtZW1iZXJIYXNoTG9jYXRpb24gfSBmcm9tICcuL2hhc2gtcmVzdG9yZXInO1xuS2VkTW9kZWxNaWdyYXRvck1peGluKEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlKTtcbmV4cG9ydCB2YXIgc3RvcmFnZSA9IG5ldyBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UoKTtcbnZhciB0aW1lT2ZQYWdlTG9hZCA9IERhdGUubm93KCk7XG52YXIgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIodG9rZW5QYXRoLCB0b2tlblJlc3BvbnNlTWFwcGVyLCB0b2tlbklkKSB7XG4gICAgICAgIHRoaXMudG9rZW5QYXRoID0gdG9rZW5QYXRoO1xuICAgICAgICB0aGlzLnRva2VuUmVzcG9uc2VNYXBwZXIgPSB0b2tlblJlc3BvbnNlTWFwcGVyO1xuICAgICAgICB0aGlzLnRva2VuSWQgPSB0b2tlbklkO1xuICAgICAgICB0aGlzLnRva2VuSW5mbyA9IHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfTtcbiAgICAgICAgdGhpcy5nZXRCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRCZWFyZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMucmVmcmVzaEJlYXJlciA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzLnJlZnJlc2hCZWFyZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnRva2VuSW5mby50b2tlbikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudG9rZW5JZCkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdG9yYWdlLmxvYWQodGhpcy50b2tlbklkKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRva2VuSW5mbyA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy50b2tlbkluZm8uZXhwaXJlcyA8IERhdGUubm93KCkpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaEJlYXJlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA0O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIucHJvdG90eXBlLnJlZnJlc2hCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9lLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godGhpcy50b2tlblBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogXCJ0ZXh0L3BsYWluOyBhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdDogJ21hbnVhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6ICduby1jYWNoZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMzAyIHx8ICghcmVzLnN0YXR1cyAmJiByZXMudHlwZSA9PT0gXCJvcGFxdWVyZWRpcmVjdFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZXIgc2Vzc2lvbiB0aW1lZCBvdXQgYW5kIHNlcnZlciB3YW50cyB0byByZWRpcmVjdCBlbnRpcmUgcGFnZSB0byBsb2dpbiBwYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGltZSB0byByZWxvYWQgY3VycmVudCBwYWdlIHRvIGZvcmNlIGEgcmVkaXJlY3Qgb2YgdGhlIGVudGlyZSBwYWdlIGluc3RlYWQgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVzdCByZWRpcmVjdGluZyB0byAvYXBpL3Rva2VuIG9yIHdoYXRldmVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gdGltZU9mUGFnZUxvYWQgPiA2MDAwMCkgeyAvLyBwcm9oaWJpdCBlbmRsZXNzIGxvb3Agb2YgcmVsb2FkaW5nIHNlbGYuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2FudHNSZWRpcmVjdCA9IHRydWU7IC8vIFNvIHRoYXQgbGlzdGVuZXJzIHRvIG9uYmVmb3JldW5sb2FkIGNvdWxkIHNob3cgYWx0ZXJuYXRlIG1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVkaXJlY3Qgd2FudGVkLiBSZWxvYWQgcGFnZS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWVtYmVySGFzaExvY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBIdHRwRXJyb3IoMzAyLCBcIlJlZGlyZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gXCJIVFRQXCIgKyByZXMuc3RhdHVzICsgXCIgXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEVycm9yLCBbdm9pZCAwLCBfYiArIChfZS5zZW50KCkpXSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kID0gdGhpcy50b2tlblJlc3BvbnNlTWFwcGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnRva2VuSW5mbyA9IF9kLmFwcGx5KHRoaXMsIFtfZS5zZW50KCldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2F2ZSh0aGlzLnRva2VuSWQsIHRoaXMudG9rZW5JbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyO1xufSgpKTtcbmV4cG9ydCB7IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyIH07XG5leHBvcnQgdmFyIGlzb21vcnBoaWMgPSB7IGZldGNoOiBmZXRjaC5iaW5kKHNlbGYpLCBidG9hOiBidG9hLmJpbmQoc2VsZikgfTtcbnZhciBLZWRCYWNrZW5kQ2xpZW50V2ViID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEtlZEJhY2tlbmRDbGllbnRXZWIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENsaWVudFdlYihhcGlCYXNlVXJsLCBwcm92aWRlck9yVG9rZW5QYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBiZWFyZXJQcm92aWRlciA9IHR5cGVvZiBwcm92aWRlck9yVG9rZW5QYXRoICE9PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICBwcm92aWRlck9yVG9rZW5QYXRoIDpcbiAgICAgICAgICAgIG5ldyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcihwcm92aWRlck9yVG9rZW5QYXRoLCAob3B0aW9ucyAmJiBvcHRpb25zLnRva2VuUmVzcG9uc2VNYXBwZXIpIHx8IChmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHsgdG9rZW46IHgsIGV4cGlyZXM6IERhdGUubm93KCkgKyA1OSAqIDYwICogNjAgfSk7IH0pLCBvcHRpb25zICYmIG9wdGlvbnMudG9rZW5JZCk7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaXNvbW9ycGhpYywgYmVhcmVyUHJvdmlkZXIsIGFwaUJhc2VVcmwpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEtlZEJhY2tlbmRDbGllbnRXZWI7XG59KEtlZEJhY2tlbmRDbGllbnQpKTtcbmV4cG9ydCB7IEtlZEJhY2tlbmRDbGllbnRXZWIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCAqIGZyb20gJy4vanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViJzsiLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBUZXJtLCBBY2FkZW1pY1llYXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Nob29sTW9tZW50IHtcbiAgYWNhZGVtaWNZZWFyOiBBY2FkZW1pY1llYXI7XG4gIHRlcm06IFRlcm07XG4gIHdlZWs/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaXJzdEFuZExhc3RXZWVrT2ZUZXJtKHRlcm06IFRlcm0pIHtcbiAgcmV0dXJuIHRlcm0gPT09ICdBVCcgP1xuICAgIFszMiwgNTFdIDpcbiAgICBbMSwgMjVdO1xufVxuXG4vL05vdCB1c2VkIGFueW1vcmVcbi8vIGV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtU3RhcnRBbmRFbmQobm93OiBtb21lbnQuTW9tZW50KSA6IG1vbWVudC5Nb21lbnRbXSB7XG4vLyAgICAgcmV0dXJuIG5vdy5tb250aCgpID49IDYgPyAvLyA2ID0gSnVseSBpbiBKUyBEYXRlcyBhbmQgaW4gbW9tZW50IGFzIHdlbGwhXG4vLyAgICAgW21vbWVudChuZXcgRGF0ZShub3cueWVhcigpLCA3LCAxKSksIG1vbWVudChuZXcgRGF0ZShub3cueWVhcigpLCAxMSwgMzEpKV0gOiAvLyBhdWcxIC0gZGVjMzFcbi8vICAgICBbbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDAsIDEpKSwgbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDYsIDMxKSldOyAvLyBqYW4xIC0ganVseTMxXG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtU3RhckVuZERhdGUoZGF0ZTogRGF0ZSwgaXNGaXJzdFRlcm06IGJvb2xlYW4pOiBtb21lbnQuTW9tZW50W10ge1xuICB2YXIgYWRkWWVhciA9IGRhdGUuZ2V0TW9udGgoKSA+PSA3O1xuICB2YXIgdGVybVllYXIgPSBudWxsO1xuXG4gIGlmIChhZGRZZWFyKSB7XG4gICAgdGVybVllYXIgPSBpc0ZpcnN0VGVybSA/IGRhdGUuZ2V0RnVsbFllYXIoKSA6IGRhdGUuZ2V0RnVsbFllYXIoKSArIDE7XG4gIH0gZWxzZSB7XG4gICAgdGVybVllYXIgPSBpc0ZpcnN0VGVybSA/IGRhdGUuZ2V0RnVsbFllYXIoKSAtIDEgOiBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gIH1cblxuICB2YXIgdGVybVllYXJNb21lbnQgPSBtb21lbnQodGVybVllYXIudG9TdHJpbmcoKSwgXCJZWVlZXCIpO1xuXG4gIGlmICh0ZXJtWWVhck1vbWVudC53ZWVrKCkgIT0gMSkge1xuICAgIHRlcm1ZZWFyTW9tZW50ID0gdGVybVllYXJNb21lbnQuY2xvbmUoKS5hZGQoMSwgJ3dlZWsnKTtcbiAgfVxuXG4gIHJldHVybiBpc0ZpcnN0VGVybSA/IFttb21lbnQodGVybVllYXJNb21lbnQuY2xvbmUoKSkud2VlaygzMikuc3RhcnRPZignd2VlaycpLCBtb21lbnQodGVybVllYXJNb21lbnQuY2xvbmUoKSkud2Vlayg1MSkuZW5kT2YoJ3dlZWsnKV0gOlxuICAgIFttb21lbnQodGVybVllYXJNb21lbnQuY2xvbmUoKSksIG1vbWVudCh0ZXJtWWVhck1vbWVudC5jbG9uZSgpKS53ZWVrKDI1KS5lbmRPZignd2VlaycpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaG9vbE1vbWVudChtOiBtb21lbnQuTW9tZW50KTogU2Nob29sTW9tZW50IHtcbiAgY29uc3QgdGhpc1llYXIgPSBtLnllYXIoKTtcbiAgY29uc3QgaXNBdXR1bW4gPSBtLm1vbnRoKCkgPj0gNjsgLy8gZGV0ZXJtaW5lIFxuICBjb25zdCBbYXV0dW1uWWVhciwgc3ByaW5nWWVhcl0gPSBpc0F1dHVtbiA/XG4gICAgW3RoaXNZZWFyLCB0aGlzWWVhciArIDFdIDpcbiAgICBbdGhpc1llYXIgLSAxLCB0aGlzWWVhcl07XG4gIGNvbnN0IGFjYWRlbWljWWVhciA9ICcnICsgYXV0dW1uWWVhciArICcvJyArIHNwcmluZ1llYXI7XG4gIGNvbnN0IHRlcm0gPSBpc0F1dHVtbiA/ICdBVCcgOiAnU1QnO1xuICBjb25zdCB3ZWVrID0gbS53ZWVrKCk7XG4gIHJldHVybiB7IGFjYWRlbWljWWVhciwgdGVybSwgd2VlayB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyLCBudW1ZZWFyc1RvQWRkOiBudW1iZXIpOiBBY2FkZW1pY1llYXIge1xuICByZXR1cm4gYVllYXIuc3BsaXQoJy8nKVxuICAgIC5tYXAoeWVhclN0ciA9PiBwYXJzZUludCh5ZWFyU3RyKSArIG51bVllYXJzVG9BZGQpXG4gICAgLm1hcCh5ZWFyID0+ICcnICsgeWVhcilcbiAgICAuam9pbignLycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dEFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldkFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIC0xKTtcbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vZmVhdHVyZXMnO1xuIiwiXG5leHBvcnQgY29uc3QgS0VEX05BTUVTUEFDRSA9IFwiS0VEXCI7XG5cbmRlY2xhcmUgdmFyIEtFRDogYW55O1xuXG52YXIgcmVzdWx0ID0gdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcgPyB7fSA6IEtFRDtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93W0tFRF9OQU1FU1BBQ0VdID0gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtRmllbGQgfSBmcm9tICcuL2Zvcm0tZmllbGQnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBsYWJlbDogYW55O1xuICBpZDogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgYXV0b0ZvY3VzPzogYm9vbGVhbjtcbiAgb25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgVGV4dElucHV0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxGb3JtRmllbGQgbGFiZWw9e3RoaXMucHJvcHMubGFiZWx9PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgYXV0b0ZvY3VzPXt0aGlzLnByb3BzLmF1dG9Gb2N1c30gaWQ9e3RoaXMucHJvcHMuaWR9IHNpemU9ezM1fSB2YWx1ZT17dGhpcy5wcm9wcy52YWx1ZX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMucHJvcHMub25DaGFuZ2UoZXYudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICA8L0Zvcm1GaWVsZD5cbiAgICApO1xuICB9XG59XG5cbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IGxvY2FsTW9tZW50IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9tb21lbnQtc3YtbG9jYWxlJztcblxudHlwZSBNb21lbnQgPSBtb21lbnQuTW9tZW50O1xuXG5leHBvcnQgY2xhc3MgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSB7XG4gIHN0YXRpYyBFWFBJUkFUSU9OX0hPVVJTID0gMTI7XG4gIHN0YXRpYyBWRVJTSU9OID0gMjtcblxuICB1c2VyOiBzdHJpbmc7XG4gIGxhc3RXcml0ZTogbnVtYmVyO1xuICB3ZWVrRGF0ZTogbnVtYmVyO1xuICBvcGVuQ291cnNlczogeyBbcGF0aDogc3RyaW5nXTogYm9vbGVhbiB9XG5cbiAgY29uc3RydWN0b3IgKHVzZXJPckNvcHk6IHN0cmluZyB8IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUpIHtcbiAgICBpZiAodHlwZW9mIHVzZXJPckNvcHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnVzZXIgPSB1c2VyT3JDb3B5O1xuICAgICAgdGhpcy5sYXN0V3JpdGUgPSBEYXRlLm5vdygpO1xuICAgICAgdGhpcy53ZWVrRGF0ZSA9IGxvY2FsTW9tZW50KCkuc3RhcnRPZignd2VlaycpLnZhbHVlT2YoKTtcbiAgICAgIHRoaXMub3BlbkNvdXJzZXMgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB1c2VyT3JDb3B5KTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgYXN5bmMgbG9hZCh1c2VyOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjb29raWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZTInKTtcbiAgICBjb25zdCBzdG9yZWREYXRhID0gY29va2llICYmIChKU09OLnBhcnNlKGNvb2tpZSkgYXMgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSk7XG4gICAgY29uc3Qgc3RhdGUgPSBuZXcgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSh1c2VyKTtcbiAgICBpZiAoc3RvcmVkRGF0YSkgT2JqZWN0LmFzc2lnbihzdGF0ZSwgc3RvcmVkRGF0YSk7XG5cbiAgICByZXR1cm4gc3RhdGUudXNlciA9PT0gdXNlciAmJiAhc3RhdGUuaXNFeHBpcmVkKG1vbWVudCgpKSA/XG4gICAgICBzdGF0ZSA6IG5ldyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlKHVzZXIpO1xuICB9XG5cbiAgYXN5bmMgc2F2ZSgpIHtcbiAgICB0aGlzLmxhc3RXcml0ZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QganNvbiA9IEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlMicsIGpzb24pO1xuICB9XG5cbiAgaXNFeHBpcmVkIChhc09mOiBNb21lbnQpIHtcbiAgICAgIHJldHVybiBtb21lbnQodGhpcy5sYXN0V3JpdGUpXG4gICAgICAgIC5pc0JlZm9yZShcbiAgICAgICAgICAgIGFzT2YuYWRkKFxuICAgICAgICAgICAgICAgIDAtV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZS5FWFBJUkFUSU9OX0hPVVJTLCAnaG91cnMnKVxuICAgICAgICApO1xuICB9XG59XG4iLCJpbXBvcnQge0tlZFJlcG99IGZyb20gJy4va2VkLXJlcG8nO1xuaW1wb3J0IHsgVXNlclRhc2ssIFVzZXJTdWJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSB9IGZyb20gXCIuLi9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXBlcnNpc3RlZC1zdGF0ZVwiO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCwgRG9jdW1lbnRBY2Nlc3MsIEtlZEJhY2tlbmRDbGllbnQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBnZXRBZGp1c3RlZFdlZWssIEtFRFdlZWsgfSBmcm9tICcuLi91dGlscy93ZWVrdXRpbCc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuXG5leHBvcnQgbGV0IHVzZXJUYXNrc1JlcG8gPSBlbnYudXNlclRhc2tzUmVwbyBhcyBVc2VyVGFza3NSZXBvO1xuXG5leHBvcnQgY2xhc3MgVXNlclRhc2tzUmVwbyBleHRlbmRzIEtlZFJlcG88VXNlclRhc2s+IHtcbiAgcGVyc2lzdGVkU3RhdGU6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUgfCBudWxsO1xuICBnZXRDdXJyZW50VXNlcjogKCk9PlVzZXI7XG5cbiAgY29uc3RydWN0b3IoZ2V0Q2xpZW50OiAoKT0+S2VkQmFja2VuZENsaWVudCwgZ2V0Q3VycmVudFVzZXI6ICgpPT5Vc2VyKSB7ICAgIFxuICAgIHN1cGVyKHtcbiAgICAgIGdldENsaWVudCxcbiAgICAgIG9wdGltaXN0aWM6IHRydWUsXG4gICAgICB0YWJsZTogXCJ1c2VydGFza3NcIixcbiAgICAgIHVzZXI6IGdldEN1cnJlbnRVc2VyKCkgPyBnZXRDdXJyZW50VXNlcigpLm1haWwgOiBcIlwiLFxuICAgICAgZ2V0UXVlcnlPcHRpb25zOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gZ2V0Q3VycmVudFVzZXIoKTtcbiAgICAgICAgY29uc3QgdXNlckVtYWlsID0gY3VycmVudFVzZXIgPyBjdXJyZW50VXNlci5tYWlsIDogXCJcIjtcbiAgICAgICAgaWYgKCF0aGlzLnBlcnNpc3RlZFN0YXRlKVxuICAgICAgICAgIHRoaXMucGVyc2lzdGVkU3RhdGUgPSBhd2FpdCBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlLmxvYWQodXNlckVtYWlsKTtcbiAgICAgICAgY29uc3QgeyB3ZWVrRGF0ZSB9ID0gdGhpcy5wZXJzaXN0ZWRTdGF0ZTtcbiAgICAgICAgY29uc3Qgd2Vla051bWJlciA9IG1vbWVudCh3ZWVrRGF0ZSkud2VlaygpO1xuICAgICAgICBjb25zdCBrZWRXZWVrID0gS0VEV2Vlayhtb21lbnQod2Vla0RhdGUpLnllYXIoKSwgd2Vla051bWJlcik7XG4gICAgICAgIC8qY29uc3QgW2Zyb20sIHRvXSA9IFttb21lbnQod2Vla0RhdGUpLnN0YXJ0T2YoJ3dlZWsnKSwgbW9tZW50KHdlZWtEYXRlKS5lbmRPZignd2VlaycpXVxuICAgICAgICAgIC5tYXAobSA9PiBtLnRvRGF0ZSgpLmdldFRpbWUoKSk7Ki9cbiAgICAgICAgXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZyb206IGtlZFdlZWsubm90QmVmb3JlLFxuICAgICAgICAgICAgdG86IGtlZFdlZWsubm90QWZ0ZXIsXG4gICAgICAgICAgICByb2xlOiBcIlVTRVJcIixcbiAgICAgICAgICAgIGluY2x1ZGU6IFtcInRhc2tcIiwgXCJjb3Vyc2VcIl0sXG4gICAgICAgICAgICBmbGFnczogW1wiaW5jbHVkZUlkc09ubHlcIl0sXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMucGVyc2lzdGVkU3RhdGUgPSBudWxsO1xuICAgIHRoaXMuZ2V0Q3VycmVudFVzZXIgPSBnZXRDdXJyZW50VXNlcjtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVBlcnNpc3RlZFN0YXRlKHN0YXRlQ2hhbmdlczogUGFydGlhbDxXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlPikge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcy5wZXJzaXN0ZWRTdGF0ZSwgc3RhdGVDaGFuZ2VzKTtcbiAgICBhd2FpdCB0aGlzLnBlcnNpc3RlZFN0YXRlLnNhdmUoKTtcbiAgICB0aGlzLm1lbS5ub3RpZnlTdWJzY3JpYmVycygpO1xuICB9XG5cbiAgYXN5bmMgc2V0VGFza0RvbmVTdGF0ZSh1c2VyVGFzazogVXNlclRhc2ssIGRvbmU6IGJvb2xlYW4pIHtcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgY29uc3QgbW9kaWZpZWRJdGVtID0gT2JqZWN0LmFzc2lnbih7fSwgdXNlclRhc2ssIHtkb25lfSk7XG4gICAgaWYgKG9wdGltaXN0aWMpIGF3YWl0IHRoaXMubWVtLnVwZGF0ZShPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllZEl0ZW0sIHskbWV0YTogJ3VwZGF0aW5nJ30pKTtcbiAgICAvLyBOb3cgbWFrZSBzdXJlIHRvIGNoYW5nZSB0aGUgc3RhdGUgZm9yIG90aGVyIHdlZWtzIGFzIHdlbGw6XG4gICAgY29uc3Qgc2ltaWxhclRhc2tzID0gYXdhaXQgY2xpZW50Lmxpc3Q8VXNlclRhc2s+KCd1c2VydGFza3MnLCB7XG4gICAgICBuYW1lOiB1c2VyVGFzay5uYW1lLFxuICAgICAgcm9sZTogXCJVU0VSXCIsXG4gICAgICBpbmNsdWRlOiBbXCJ0YXNrXCIsXCJjb3Vyc2VcIl0sXG4gICAgICBmbGFnczogW1wiaW5jbHVkZUlkc09ubHlcIl0sXG4gICAgICBmcm9tOiBtb21lbnQodGhpcy5wZXJzaXN0ZWRTdGF0ZS53ZWVrRGF0ZSkuYWRkKC0zLCAnd2Vla3MnKS52YWx1ZU9mKCksXG4gICAgICB0bzogbW9tZW50KHRoaXMucGVyc2lzdGVkU3RhdGUud2Vla0RhdGUpLmFkZCgzLCAnd2Vla3MnKS52YWx1ZU9mKClcbiAgICB9LCB7XG4gICAgICBjYWNoZTogJ25vLWNhY2hlJ1xuICAgIH0pO1xuICAgIGNvbnN0IGlkZW50aWNhbFRhc2tzID0gc2ltaWxhclRhc2tzLmZpbHRlcih0ID0+XG4gICAgICB0LmNvdXJzZU5hbWUgPT09IHVzZXJUYXNrLmNvdXJzZU5hbWUgJiZcbiAgICAgIHQubGVhcm5pbmdHb2FsID09PSB1c2VyVGFzay5sZWFybmluZ0dvYWwgJiZcbiAgICAgICghdXNlclRhc2sudGFzayB8fCB0LnRhc2subWFwKHQ9PnQuaWQpLmpvaW4oJycpID09PSB1c2VyVGFzay50YXNrLm1hcCh0PT50LmlkKS5qb2luKCcnKSkgJiZcbiAgICAgICghdXNlclRhc2suY291cnNlIHx8IHQuY291cnNlLm1hcChjPT5jLmlkKS5qb2luKCcnKSA9PT0gdXNlclRhc2suY291cnNlLm1hcChjPT5jLmlkKS5qb2luKCcnKSkpO1xuICAgIGlmIChpZGVudGljYWxUYXNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIFdvcmthcm91bmQgZm9yIGlzc3VlIGluIFN1YmplY3RQbGFubmVyIG1pZ3JhdGlvbiAodXNlcnRhc2tzIHdpdGggbG9uZyBuYW1lcyBpcyBub3QgZm91bmQpXG4gICAgICBpZGVudGljYWxUYXNrcy5wdXNoKHVzZXJUYXNrKVxuICAgIH1cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShpZGVudGljYWxUYXNrcywgdCA9PiB0LmRvbmUgPSBkb25lKTtcbiAgfVxuXG4gIGFzeW5jIHNldFN1YlRhc2tEb25lU3RhdGUgKHVzZXJUYXNrOiBVc2VyVGFzaywgc3ViVGFza0lkOiBzdHJpbmcsIGRvbmU6IGJvb2xlYW4pIHtcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgYXdhaXQgdGhpcy51cGRhdGUoW3VzZXJUYXNrXSxcbiAgICAgIHQgPT4gdC5zdWJUYXNrcyAmJiB0LnN1YlRhc2tzLmZpbHRlcihzdCA9PiBzdC5pZCA9PT0gc3ViVGFza0lkKVxuICAgICAgICAuZm9yRWFjaChzdCA9PiBzdC5kb25lID0gZG9uZSkpO1xuICB9XG5cbiAgYXN5bmMgc2V0V2Vla1BsYW5uZXJCb3hPcGVuKGNvdXJzZU5hbWU6IHN0cmluZywgaXNPcGVuOiBib29sZWFuKSB7XG4gICAgY29uc3Qgb3BlbkNvdXJzZXMgPSB7IC4uLnRoaXMucGVyc2lzdGVkU3RhdGUub3BlbkNvdXJzZXMgfTtcbiAgICBpZiAoaXNPcGVuKVxuICAgICAgb3BlbkNvdXJzZXNbY291cnNlTmFtZV0gPSB0cnVlO1xuICAgIGVsc2VcbiAgICAgIGRlbGV0ZSBvcGVuQ291cnNlc1tjb3Vyc2VOYW1lXTtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVBlcnNpc3RlZFN0YXRlKHtvcGVuQ291cnNlc30pO1xuICB9XG5cbiAgYXN5bmMgY2hhbmdlV2Vlayh3ZWVrRGF0ZTogRGF0ZSwga2VlcEN1cnJlbnREYXRlPzogYm9vbGVhbikge1xuICAgIGxldCBwZXJzaXN0ZWRTdGF0ZSA9IHRoaXMucGVyc2lzdGVkU3RhdGU7XG4gICAgaWYgKCFwZXJzaXN0ZWRTdGF0ZSkge1xuICAgICAgcGVyc2lzdGVkU3RhdGUgPSBhd2FpdCBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlLmxvYWQodGhpcy5vcHRpb25zLnVzZXIpO1xuICAgIH1cbiAgICBjb25zdCBuZXdQZXJzaXN0ZWQgPSBuZXcgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZShwZXJzaXN0ZWRTdGF0ZSk7XG4gICAgbmV3UGVyc2lzdGVkLndlZWtEYXRlID0ga2VlcEN1cnJlbnREYXRlID8gbW9tZW50KHdlZWtEYXRlKS52YWx1ZU9mKCkgOiBtb21lbnQod2Vla0RhdGUpLnN0YXJ0T2YoJ3dlZWsnKS52YWx1ZU9mKCk7XG4gICAgbmV3UGVyc2lzdGVkLnNhdmUoKTtcbiAgICB0aGlzLnBlcnNpc3RlZFN0YXRlID0gbmV3UGVyc2lzdGVkO1xuICAgIGF3YWl0IHRoaXMubWVtLnJlZnJlc2hGcm9tU2VydmVyKCk7XG4gIH1cblxuICBzdWJzY3JpYmUoc3Vic2NyaWJlcjogKHVzZXJUYXNrczogVXNlclRhc2tbXSwgcGVyc2lzdGVkU3RhdGU6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUsIHdlZWtUZXh0c1VUOiBVc2VyVGFzaykgPT4gdm9pZCkge1xuICAgIGNvbnN0IHByb3h5U3Vic2NyaWJlciA9ICh1c2VyVGFza3M6IFVzZXJUYXNrW10pID0+IHtcbiAgICAgIHN1YnNjcmliZXIoXG4gICAgICAgIHVzZXJUYXNrcy5maWx0ZXIodXQgPT4gIXV0LndlZWtUZXh0cyksXG4gICAgICAgIHRoaXMucGVyc2lzdGVkU3RhdGUsXG4gICAgICAgIHVzZXJUYXNrcy5maWx0ZXIodXQgPT4gISF1dC53ZWVrVGV4dHMpWzBdIHx8IHtcbiAgICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICAgIGRhdGVUaW1lOiB0aGlzLnBlcnNpc3RlZFN0YXRlLndlZWtEYXRlLFxuICAgICAgICAgIHdlZWtUZXh0czoge2Fzc2Vzc21lbnQ6JycsIHN0cmF0ZWd5OicnfSxcbiAgICAgICAgICBhY2w6IFtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgQUNMOiBMZXQgdXNlciBzZWxmIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhpcyBpdGVtOlxuICAgICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwiZW1haWxcIiwgdGhpcy5nZXRDdXJyZW50VXNlcigpLm1haWwsIFwiU1wiKSxcbiAgICAgICAgICAgIC8vIEFkZGl0aW9uYWwgQUNMOiBMZXQgZW1wbG95ZWVzIG9uIHNhbWUgc2Nob29sIGhhdmUgcmVhZCBhY2Nlc3MgdG8gaXQuXG4gICAgICAgICAgICAvLyBUaGlzIGN1cnJlbnRseSBvbmx5IGFwcGxpZXMgdG8gdGFza3MgdGhhdCByZWZlciB0byBjb3Vyc2UgdGFza3MgKG5vdCBvd24gdGFza3MhKVxuICAgICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwic2Nob29sUm9sZVwiLCBgJHt0aGlzLmdldEN1cnJlbnRVc2VyKCkuc2Nob29sfS9FTVBMT1lFRWAsIFwiUlwiKVxuICAgICAgICAgIF0ubWFwKGFjID0+IGFjLnRvU3RyaW5nKCkpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcHJveHlTdWJzY3JpYmVyW1wic3Vic2NyaWJlclwiXSA9IHN1YnNjcmliZXI7XG4gICAgdGhpcy5tZW0uc3Vic2NyaWJlKHByb3h5U3Vic2NyaWJlcik7XG4gIH1cblxuICB1bnN1YnNjcmliZShzdWJzY3JpYmVyOiAodXNlclRhc2tzOiBVc2VyVGFza1tdLCBwZXJzaXN0ZWRTdGF0ZTogV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSwgd2Vla1RleHRzVVQ6IFVzZXJUYXNrKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5tZW0uc3Vic2NyaWJlcnMgPSB0aGlzLm1lbS5zdWJzY3JpYmVycy5maWx0ZXIgKHMgPT4gc1tcInN1YnNjcmliZXJcIl0gIT09IHN1YnNjcmliZXIpO1xuICB9XG4gIFxufVxuXG5pZiAoIXVzZXJUYXNrc1JlcG8pIHtcbiAgdXNlclRhc2tzUmVwbyA9IGVudi51c2VyVGFza3NSZXBvID0gbmV3IFVzZXJUYXNrc1JlcG8oXG4gICAgKCk9PmVudi5rZWRCYWNrZW5kQ2xpZW50LFxuICAgICgpPT5lbnYuY3VycmVudFVzZXIpO1xuICB1c2VyVGFza3NSZXBvLm1lbS5lbnN1cmVIYXNEYXRhKCk7XG59XG4iLCJcbmV4cG9ydCBjb25zdCBLRURfTkFNRVNQQUNFID0gXCJLRURcIjtcblxuZGVjbGFyZSB2YXIgS0VEOiBhbnk7XG5cbnZhciByZXN1bHQgPSB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJyA/IHt9IDogS0VEO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3dbS0VEX05BTUVTUEFDRV0gPSByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gXCIuL3ZhbHVlXCI7XG52YXIgRW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhFbWl0dGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVtaXR0ZXIoaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlcnMgPSBfdGhpcy5zdWJzY3JpYmVycy5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gX2FbMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzICE9PSBvYnNlcnZlcjtcbiAgICAgICAgICAgICAgICB9KTsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmVycy5wdXNoKFtvYnNlcnZlciwgc3Vic2NyaXB0aW9uXSk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuZXJyb3IpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgX3RoaXMuZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIoX3RoaXMudmFsdWUsIHVuZGVmaW5lZCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH0pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZXJzID0gW107XG4gICAgICAgIF90aGlzLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEVtaXR0ZXIucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2goKTtcbiAgICB9O1xuICAgIEVtaXR0ZXIucHJvdG90eXBlLmRpc3BhdGNoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLl9kaXNwYXRjaCgpO1xuICAgIH07XG4gICAgRW1pdHRlci5wcm90b3R5cGUuX2Rpc3BhdGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVswXSwgc3Vic2NyaXB0aW9uID0gX2FbMV07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyKF90aGlzLnZhbHVlLCBfdGhpcy5lcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnIsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEVtaXR0ZXI7XG59KFZhbHVlKSk7XG5leHBvcnQgeyBFbWl0dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbWl0dGVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgaW5pdE1hcE1ldGhvZCB9IGZyb20gXCIuL21hcFwiO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gXCIuL2NvbGxlY3Rpb25cIjtcbmltcG9ydCB7IEZpYmVyQ29udGV4dCB9IGZyb20gJy4vZmliZXItY29udGV4dCc7XG52YXIgVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmFsdWUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmFsdWUoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBzdWJzY3JpYmUpIHx8IHRoaXM7XG4gICAgfVxuICAgIFZhbHVlLmZyb20gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeC5zdWJzY3JpYmUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlLmZyb20oKSBjYW4gb25seSB0YWtlIG9ic2VydmFibGVzXCIpO1xuICAgIH07XG4gICAgVmFsdWUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXNvbHZlZCA9IGZhbHNlLCByZXN1bHQsIGVyciwgbm90aWZ5O1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NpcHRpb24pIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgZXJyID0gZXJyb3I7XG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgbm90aWZ5KVxuICAgICAgICAgICAgICAgIG5vdGlmeShudWxsLCBlcnJvciwgc3Vic2NpcHRpb24pO1xuICAgICAgICAgICAgZWxzZSBpZiAobm90aWZ5KVxuICAgICAgICAgICAgICAgIG5vdGlmeSh2YWx1ZSwgbnVsbCwgc3Vic2NpcHRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEZpYmVyID0gRmliZXJDb250ZXh0LmN1cnJlbnQ7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRGaWJlcikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgRmliZXIgQ29udGV4dFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IGN1cnJlbnRGaWJlci5zdWJzY3JpcHRpb25zLCBvYnNlcnZlciA9IGN1cnJlbnRGaWJlci5vYnNlcnZlcjtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgbm90aWZ5ID0gb2JzZXJ2ZXI7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIG5vdGlmeSA9IGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY2lwdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWUoZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBlbHNlIGlmIChmbih2YWx1ZSkpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICB9KTsgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByZWZpeCwgeCk7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUudG9Db2xsZWN0aW9uID0gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIF90aGlzLm1hcChtYXBwZXIpLnN1YnNjcmliZShzKTsgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUuY29tYmluZUxhdGVzdCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtudWxsLCBudWxsXTtcbiAgICAgICAgICAgIHZhciBteVN1YnNjcmlwdGlvbiwgb3RoZXJTdWJzY3JpcHRpb247XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIG15U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG15U3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChpdGVtcywgZXJyb3IsIHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWVzWzBdID0gaXRlbXM7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1sxXSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWVzLCBudWxsLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvdGhlclN1YnNjcmlwdGlvbiA9IG90aGVyLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlc1sxXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbMF0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlcywgbnVsbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUuc3dpdGNoTWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHZhciByZXR1cm5lZFN1YnNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcHBlZFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoaXRlbSwgZXJyb3IsIHMpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBzO1xuICAgICAgICAgICAgICAgIGlmIChtYXBwZWRTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHJldHVybmVkU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlT3JWYWx1ZSA9IG1hcHBlcihpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlT3JWYWx1ZSAmJiB0eXBlb2Ygb2JzZXJ2YWJsZU9yVmFsdWUuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZU9yVmFsdWUuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWUsIGVycm9yLCByZXR1cm5lZFN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihvYnNlcnZhYmxlT3JWYWx1ZSwgbnVsbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuZWRTdWJzY3JpcHRpb247XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFZhbHVlO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBWYWx1ZSB9O1xuVmFsdWUucHJvdG90eXBlLm1hcCA9IGluaXRNYXBNZXRob2QoVmFsdWUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsdWUuanMubWFwIiwidmFyIE9ic2VydmFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLy9zdGF0aWMgZ2V0IFtTeW1ib2wuc3BlY2llc10oKSB7IHJldHVybiB0aGlzOyB9XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShfc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IF9zdWJzY3JpYmU7XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShmdW5jdGlvbiAoaXRlbXMsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihpdGVtcywgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHsgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHsgfSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGxhYmVsOiBhbnk7XG4gIGNoaWxkcmVuOiBhbnk7XG4gIGlkPzogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBmaW5kSWQobm9kZSkge1xuICBjb25zdCByZWN1Y2hlY2sgPSBuZXcgU2V0KCk7XG4gIHJldHVybiAoZnVuY3Rpb24gZmluZElkKG5vZGUpe1xuICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHJldHVybiBudWxsO1xuICAgIGlmIChyZWN1Y2hlY2suaGFzKG5vZGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlY3VjaGVjay5hZGQobm9kZSk7XG4gICAgaWYgKG5vZGUucHJvcHMpIHtcbiAgICAgIGlmIChub2RlLnByb3BzLmlkKSByZXR1cm4gbm9kZS5wcm9wcy5pZDtcbiAgICAgIGlmIChub2RlLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybiBmaW5kSWQobm9kZS5wcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaT0wO2k8bm9kZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVbaV07XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkSWQgPSBmaW5kSWQoY2hpbGQpO1xuICAgICAgICAgIGlmIChjaGlsZElkKSByZXR1cm4gY2hpbGRJZDtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSkobm9kZSk7XG59XG5cbmV4cG9ydCBjbGFzcyBGb3JtRmllbGQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPD5cbiAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImtjbGFiZWxcIiBodG1sRm9yPXt0aGlzLnByb3BzLmlkIHx8IGZpbmRJZCh0aGlzLnByb3BzLmNoaWxkcmVuKX0+e3RoaXMucHJvcHMubGFiZWx9PC9sYWJlbD5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgPC8+XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgaW5pdE1hcE1ldGhvZCB9IGZyb20gXCIuL21hcFwiO1xuaW1wb3J0IHsgVmFsdWUgfSBmcm9tIFwiLi92YWx1ZVwiO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCIuL2VtaXR0ZXJcIjtcbnZhciBDb2xsZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKENvbGxlY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29sbGVjdGlvbihzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHN1YnNjcmliZSkgfHwgdGhpcztcbiAgICB9XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuX21hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgdGhyb3cgXCJtaXhlZGluXCI7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLmZyb20gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeC5zdWJzY3JpYmUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHguc3Vic2NyaWJlKHMpOyB9KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICAgICAgICAgIHZhciBlbWl0dGVyXzEgPSBuZXcgRW1pdHRlcih4KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbihmdW5jdGlvbiAocykgeyByZXR1cm4gZW1pdHRlcl8xLnN1YnNjcmliZShzKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT2JzZXJ2YWJsZUNvbGxlY3Rpb24uZnJvbSgpIGNhbiBvbmx5IHRha2UgYXJyYXlzIG9yIG9ic2VydmFibGVzXCIpO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwKGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBtYXBwZXIoaXRlbSk7IH0pOyB9KTtcbiAgICB9O1xuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7IHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGl0ZW1zKTsgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7IHJldHVybiBpdGVtcy5maWx0ZXIoZmlsdGVyKTsgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIENvbGxlY3Rpb24uZnJvbSh0aGlzLnRvVmFsdWUoKS5jb21iaW5lTGF0ZXN0KG90aGVyKS5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgbWUgPSBfYVswXSwgb3RoZXIgPSBfYVsxXTtcbiAgICAgICAgICAgIHJldHVybiBtZS5jb25jYXQob3RoZXIpO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5vcmRlckJ5ID0gZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9WYWx1ZSgpLm1hcChmdW5jdGlvbiAoYXJyYXkpIHsgcmV0dXJuIGFycmF5LnNsaWNlKCkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgdmFyIGFQcm9wID0gYSAmJiBhW3Byb3BdO1xuICAgICAgICAgICAgdmFyIGJQcm9wID0gYiAmJiBiW3Byb3BdO1xuICAgICAgICAgICAgcmV0dXJuIGFQcm9wID4gYlByb3AgPyAxIDogYVByb3AgPCBiUHJvcCA/IC0xIDogMDtcbiAgICAgICAgfSk7IH0pLnRvQ29sbGVjdGlvbihmdW5jdGlvbiAoeCkgeyByZXR1cm4geDsgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS50b1ZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUocyk7IH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuZ3JvdXBCeSA9IGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgICAgICAgICB2YXIgcnYgPSB7fTtcbiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHJ2W2l0ZW1bcHJvcF1dIHx8IChydltpdGVtW3Byb3BdXSA9IFtdKTtcbiAgICAgICAgICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9WYWx1ZSgpLm1hcChmdW5jdGlvbiAoYXJyKSB7IHJldHVybiBhcnJbMF07IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIENvbGxlY3Rpb247XG59KE9ic2VydmFibGUpKTtcbmV4cG9ydCB7IENvbGxlY3Rpb24gfTtcbkNvbGxlY3Rpb24ucHJvdG90eXBlLl9tYXAgPSBpbml0TWFwTWV0aG9kKENvbGxlY3Rpb24pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sbGVjdGlvbi5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIG9uQ2xpY2ssXG4gIGNsYXNzTmFtZT8sXG4gIHN0eWxlPyxcbiAgdGl0bGU/XG59O1xuXG5leHBvcnQgY29uc3QgUmVtb3ZlSXRlbSA9ICh7IG9uQ2xpY2ssIGNsYXNzTmFtZSwgc3R5bGUsIHRpdGxlIH06IFByb3BzKSA9PlxuXG4gIDxkaXZcbiAgICB0aXRsZT17dGl0bGUgfHwgTGBSYWRlcmFgfVxuICAgIGNsYXNzTmFtZT17XCJyZW1vdmVJdGVtIFwiICsgKGNsYXNzTmFtZSB8fCBcIlwiKX1cbiAgICBvbkNsaWNrPXtvbkNsaWNrfSBzdHlsZT17c3R5bGV9IC8+XG4iLCJpbXBvcnQgbW9tZW50LCB7IE1vbWVudCB9IGZyb20gXCJtb21lbnRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIEtFRFdlZWsgKHllYXI6IG51bWJlciwgd2VlazogbnVtYmVyKSB7XG4gIGNvbnN0IG0gPSBtb21lbnQobmV3IERhdGUoeWVhciwgMSwgMSkpLndlZWsod2Vlayk7XG4gIGNvbnN0IHJlcyA9IHtcbiAgICB5ZWFyLFxuICAgIHdlZWssXG4gICAgbm90QmVmb3JlOiBtLmNsb25lKCkuc3RhcnRPZignd2VlaycpLmFkZCgtMiwgJ2RheXMnKS50b0RhdGUoKS5nZXRUaW1lKCksXG4gICAgbm90QWZ0ZXI6IG0uY2xvbmUoKS5zdGFydE9mKCd3ZWVrJykuYWRkKDUsICdkYXlzJykudG9EYXRlKCkuZ2V0VGltZSgpXG4gIH07XG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0V2Vla0RhdGUoZGF0ZTogTW9tZW50KTogeyBhZGp1c3RlZDogYm9vbGVhbiwgbmV4dERhdGU6IERhdGUgfXtcbiAgdmFyIG5leHREYXRlID0gbW9tZW50KGRhdGUpLmFkZCgxLCAnd2VlaycpO1xuICAvL1NldCB0aGUgMDEuMDEgb2YgdGhlIG5leHQgeWVhciBpbiBjYXNlIHRoZSBuZXh0IHdlZWsgaXMgaW4gdGhlIHNhbWUgeWVhciBcbiAgLy9hbmQgdGhlIHByZXZpb3VzIHdlZWsgaXMgdGhlIGxhc3Qgd2VlayBvZiB0aGUgeWVhclxuICBpZihkYXRlLndlZWsoKSA9PT0gZGF0ZS53ZWVrc0luWWVhcigpICYmIG5leHREYXRlLnllYXIoKSA9PT0gZGF0ZS55ZWFyKCkpe1xuICAgIHJldHVybiB7YWRqdXN0ZWQ6IHRydWUsIG5leHREYXRlOiBtb21lbnQoYCR7ZGF0ZS55ZWFyKCkgKyAxfS0wMS0wMWApLnRvRGF0ZSgpfTtcbiAgfVxuXG4gIHJldHVybiB7YWRqdXN0ZWQ6IGZhbHNlLCBuZXh0RGF0ZTogbmV4dERhdGUudG9EYXRlKCl9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJldldlZWtEYXRlKGRhdGU6IE1vbWVudCk6IHsgYWRqdXN0ZWQ6IGJvb2xlYW4sIG5leHREYXRlOiBEYXRlIH17XG4gIHZhciBwcmV2RGF0ZSA9IG1vbWVudChkYXRlKS5hZGQoLTEsICd3ZWVrJyk7XG4gIC8vU2V0IHRoZSAwMS4wMSBvZiB0aGUgY3VycmVudCB5ZWFyIGluIGNhc2UgdGhlIHByZXYgd2VlayBpcyBpbiB0aGUgcHJldmlvdXMgeWVhclxuICBpZihkYXRlLndlZWsoKSA9PT0gMiAmJiBwcmV2RGF0ZS55ZWFyKCkgIT09IGRhdGUueWVhcigpKXtcbiAgICByZXR1cm4ge2FkanVzdGVkOiB0cnVlLCBuZXh0RGF0ZTogbW9tZW50KGAke2RhdGUueWVhcigpfS0wMS0wMWApLnRvRGF0ZSgpfTtcbiAgfVxuXG4gIHJldHVybiB7YWRqdXN0ZWQ6IGZhbHNlLCBuZXh0RGF0ZTogcHJldkRhdGUudG9EYXRlKCl9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRqdXN0ZWRXZWVrKG06IE1vbWVudCkge1xuICBjb25zdCBjbG9uZSA9IG0uY2xvbmUoKTtcbiAgcmV0dXJuIG0ud2Vla2RheSgpID49IDUgPyAvLyBMw7ZyZGFnIDAwOjAwIC8gU8O2bmRhZyAwMDowMD9cbiAgICAgIG0ud2VlaygpICsgMSA6IC8vIFRpbGxow7ZyIG7DpHN0YSB2ZWNrYVxuICAgICAgbS53ZWVrKCk7XG59XG5cbi8qZXhwb3J0IGZ1bmN0aW9uIGdldFdlZWtMaW1pdHMgKG06IE1vbWVudCkge1xuICBjb25zdCBjbG9uZWRTd2VkaXNoID0gbS5jbG9uZSgpLmxvY2FsZSgnc3YnKTtcbiAgY29uc3QgbGltaXRzID0ge1xuICAgIG5vdEJlZm9yZTogY2xvbmVkU3dlZGlzaC5zdGFydE9mKCd3ZWVrJykuYWRkKC0yLCAnZGF5cycpLFxuICAgIG5vdEFmdGVyOiBjbG9uZWRTd2VkaXNoLnN0YXJ0T2YoJ3dlZWsnKS5hZGQoNSwgJ2RheXMnKVxuICB9O1xufVxuKi9cbiIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007IiwiZXhwb3J0IGZ1bmN0aW9uIGluaXRNYXBNZXRob2QoY3Rvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWFwcGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgY3RvcihmdW5jdGlvbiAob2JzZXJ2ZXIpIHsgcmV0dXJuIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihtYXBwZXIodmFsdWUpLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnIsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9KTsgfSk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBTY2hvb2xNb21lbnQsIGdldFNjaG9vbE1vbWVudCwgYWRkWWVhciB9IGZyb20gJy4vc2Nob29sLW1vbWVudCc7XG5pbXBvcnQgeyBBY2FkZW1pY1llYXIsIFRlcm0gfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQge0luamVjdGVkSW50bH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbnR5cGUgTW9tZW50ID0gbW9tZW50Lk1vbWVudDtcblxuZnVuY3Rpb24gaXNTY2hvb2xNb21lbnQob2JqOiBEYXRlIHwgU2Nob29sTW9tZW50KTogb2JqIGlzIFNjaG9vbE1vbWVudCB7XG4gIHJldHVybiAnYWNhZGVtaWNZZWFyJyBpbiBvYmo7XG59XG5cbmV4cG9ydCBjbGFzcyBTY2hvb2xUZXJtIHtcbiAgYWNhZGVtaWNZZWFyOiBBY2FkZW1pY1llYXI7XG4gIHRlcm06IFRlcm07XG5cbiAgY29uc3RydWN0b3IoZGF0ZU9yU2Nob29sTW9tZW50OiBEYXRlIHwgU2Nob29sTW9tZW50KSB7XG4gICAgY29uc3Qgc2Nob29sTW9tZW50ID0gaXNTY2hvb2xNb21lbnQoZGF0ZU9yU2Nob29sTW9tZW50KSA/XG4gICAgICBkYXRlT3JTY2hvb2xNb21lbnQgOiBnZXRTY2hvb2xNb21lbnQobW9tZW50KGRhdGVPclNjaG9vbE1vbWVudCkpO1xuICAgIHRoaXMuYWNhZGVtaWNZZWFyID0gc2Nob29sTW9tZW50LmFjYWRlbWljWWVhcjtcbiAgICB0aGlzLnRlcm0gPSBzY2hvb2xNb21lbnQudGVybTtcbiAgfVxuXG4gIGdldCB5ZWFyKCkge1xuICAgIHJldHVybiBwYXJzZUludCh0aGlzLmFjYWRlbWljWWVhclxuICAgICAgICAuc3BsaXQoJy8nKVt0aGlzLnRlcm0gPT09ICdBVCcgPyAwIDogMV0pO1xuICB9XG5cbiAgbmV4dFRlcm0oKSB7XG4gICAgcmV0dXJuIG5ldyBTY2hvb2xUZXJtKHRoaXMudGVybSA9PT0gJ0FUJyA/XG4gICAgICB7XG4gICAgICAgIHRlcm06ICdTVCcsXG4gICAgICAgIGFjYWRlbWljWWVhcjogdGhpcy5hY2FkZW1pY1llYXJcbiAgICAgIH0gOlxuICAgICAge1xuICAgICAgICB0ZXJtOiAnQVQnLFxuICAgICAgICBhY2FkZW1pY1llYXI6IGFkZFllYXIodGhpcy5hY2FkZW1pY1llYXIsIDEpXG4gICAgICB9KTtcbiAgfVxuXG4gIHByZXZUZXJtKCkge1xuICAgIHJldHVybiBuZXcgU2Nob29sVGVybSh0aGlzLnRlcm0gPT09ICdBVCcgP1xuICAgICAge1xuICAgICAgICB0ZXJtOiAnU1QnLFxuICAgICAgICBhY2FkZW1pY1llYXI6IGFkZFllYXIodGhpcy5hY2FkZW1pY1llYXIsIC0xKVxuICAgICAgfSA6XG4gICAgICB7XG4gICAgICAgIHRlcm06ICdBVCcsXG4gICAgICAgIGFjYWRlbWljWWVhcjogdGhpcy5hY2FkZW1pY1llYXJcbiAgICAgIH0pO1xuICAgIFxuICB9XG5cbiAgdG9Mb2NhbGVTdHJpbmcoaW50bDogSW5qZWN0ZWRJbnRsLCBzaG9ydFllYXI/OiBib29sZWFuKSB7XG4gICAgbGV0IHllYXIgPSB0aGlzLnRlcm0gPT09ICdBVCcgP1xuICAgICAgdGhpcy5hY2FkZW1pY1llYXIuc3BsaXQoJy8nKVswXTpcbiAgICAgIHRoaXMuYWNhZGVtaWNZZWFyLnNwbGl0KCcvJylbMV07XG5cbiAgICBpZiAoc2hvcnRZZWFyKVxuICAgICAgeWVhciA9IHllYXIuc3Vic3RyKDIpO1xuXG4gICAgcmV0dXJuIHRoaXMudGVybSA9PT0gJ0FUJyA/IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J3Rlcm1wbGFubmVyLnNlY29uZFRlcm0nLCBkZWZhdWx0TWVzc2FnZTonSFQge3llYXJ9J30sIHt5ZWFyOiB5ZWFyfSkgOiBcbiAgICBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOid0ZXJtcGxhbm5lci5maXJzdFRlcm0nLCBkZWZhdWx0TWVzc2FnZTonVlQge3llYXJ9J30sIHt5ZWFyOiB5ZWFyfSk7XG4gIH1cbn1cbiIsImNvbnN0IERFRkFVTFRfQ0FDSEVfRVhQSVJBVElPTiA9IDMwICogNjAgKiAxMDAwOyAvLyAzMCBtaW51dGVzLlxuXG50eXBlIFByb21pc2VSZXR1cm5pbmdNZXRob2ROYW1lczxBUEk+ID0ge1xuICBbTUVUSE9EIGluIGtleW9mIEFQSV06IEFQSVtNRVRIT0RdIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBQcm9taXNlPGFueT4gPyBNRVRIT0QgOiBuZXZlclxufVxuXG50eXBlIENvbnZlcnRNZXRob2RUb1N1c3BlbnNlPEY+ID0gRiBleHRlbmRzICguLi5hcmdzOiBpbmZlciBBKSA9PiBQcm9taXNlPGluZmVyIFI+ID9cbiAgKC4uLmFyZ3M6IEEpID0+IFIgOlxuICBGO1xuXG5leHBvcnQgdHlwZSBTdXNwZW5zZUJhc2VkQVBJPEFQST4gPSB7XG4gIFtNRVRIT0QgaW4ga2V5b2YgUHJvbWlzZVJldHVybmluZ01ldGhvZE5hbWVzPEFQST5dOiBDb252ZXJ0TWV0aG9kVG9TdXNwZW5zZTxBUElbTUVUSE9EXT5cbn1cblxudHlwZSBPcHRpb25zID0ge1xuICBpc0FwaU1ldGhvZD86IChwcm9wOiBzdHJpbmcpPT5ib29sZWFuLFxuICBjYWNoZUV4cGlyYXRpb24/OiBudW1iZXJcbn1cblxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IE9wdGlvbnMgPSB7XG4gIGlzQXBpTWV0aG9kOiBmID0+IHR5cGVvZiBmID09PSAnZnVuY3Rpb24nLFxuICBjYWNoZUV4cGlyYXRpb246IERFRkFVTFRfQ0FDSEVfRVhQSVJBVElPTlxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VTdXNwZW5zZUFwaTxBUEk+KGFwaTogQVBJLCBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnMpOiBTdXNwZW5zZUJhc2VkQVBJPEFQST5cbntcbiAgb3B0aW9ucyA9IHsuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9uc307XG4gIGNvbnN0IHtpc0FwaU1ldGhvZCwgY2FjaGVFeHBpcmF0aW9ufSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgcnY6IFN1c3BlbnNlQmFzZWRBUEk8QVBJPiA9IE9iamVjdC5jcmVhdGUoYXBpIGFzIGFueSkgYXMgU3VzcGVuc2VCYXNlZEFQSTxBUEk+O1xuICBjb25zdCBjYWNoZToge1trZXk6IHN0cmluZ106IHt0aW1lb3V0OiBudW1iZXIsIHZhbHVlPzogYW55LCBlcnJvcj86IGFueSwgcHJvbWlzZT86IFByb21pc2U8YW55Pn19ID0ge307XG5cbiAgLy8gV2FsayB0aGUgaW5zdGFuY2UgKyBwcm90b3R5cGUgY2hhaW4gdG8gZ2VuZXJhdGUgc3VzcGVuc2UgdmVyc2lvbiBvZiBlYWNoIHByb21pc2UgcmV0dXJuaW5nIG1ldGhvZFxuICBmb3IgKGxldCBwcm90byA9IGFwaTsgcHJvdG8gJiYgcHJvdG8gIT09IE9iamVjdC5wcm90b3R5cGU7IHByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKSkge1xuICAgIHN1c3BlbmRpZnkocHJvdG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gc3VzcGVuZGlmeShwcm90bykge1xuICAgIE9iamVjdC5rZXlzKHByb3RvKS5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgaWYgKCFydi5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJiBpc0FwaU1ldGhvZChwcm9wKSkge1xuICAgICAgICBydltwcm9wXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgY29uc3Qga2V5ID0gSlNPTi5zdHJpbmdpZnkoW3Byb3AsIC4uLmFyZ3NdKTtcbiAgICAgICAgICBjb25zdCBjYWNoZWRFbnRyeSA9IGNhY2hlW2tleV07XG4gICAgICAgICAgaWYgKGNhY2hlZEVudHJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChjYWNoZWRFbnRyeS5wcm9taXNlKSB0aHJvdyBjYWNoZWRFbnRyeS5wcm9taXNlO1xuICAgICAgICAgICAgaWYgKGNhY2hlZEVudHJ5LmVycm9yKSB0aHJvdyBjYWNoZWRFbnRyeS5lcnJvcjtcbiAgICAgICAgICAgIGlmIChjYWNoZWRFbnRyeS50aW1lb3V0ID4gRGF0ZS5ub3coKSkge1xuICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkRW50cnkudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBwcm9taXNlID0gcHJvdG9bcHJvcF0uYXBwbHkoYXBpLCBhcmdzKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgdmFsdWU6IHJlc3VsdH07XG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgZXJyb3J9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjYWNoZVtrZXldID0ge3RpbWVvdXQ6IERhdGUubm93KCkgKyBjYWNoZUV4cGlyYXRpb24sIHByb21pc2V9O1xuICAgICAgICAgICAgdGhyb3cgcHJvbWlzZTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKGVycm9yLnRoZW4pIHRocm93IGVycm9yO1xuICAgICAgICAgICAgY2FjaGVba2V5XSA9IHt0aW1lb3V0OiBEYXRlLm5vdygpICsgY2FjaGVFeHBpcmF0aW9uLCBlcnJvcn07XG4gICAgICAgICAgfVxuICAgICAgICB9IGFzIGFueTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBydjtcbn1cbiIsImltcG9ydCB7IEVEU0NvdXJzZSwgRURTQXNzZXNzbWVudCwgRURTU3R1ZHlQbGFuLCBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eSwgRURTU3R1ZGVudCwgRURTVHVpdGlvbkdyb3VwLCBFRFNUdWl0aW9uU3R1ZGVudCwgRURTVGVhY2hlciwgTW9ja0VEU0FjYWRlbWljWWVhciwgTW9ja0VEU0RhdGVSYW5nZSB9IGZyb20gJy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IHsgUmVzdENsaWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IElzb21vcnBoaWNFbnYsIEJlYXJlclByb3ZpZGVyLCBIdHRwRXJyb3IgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBTY2hvb2xNb21lbnQsIGdldFRlcm1TdGFyRW5kRGF0ZSB9IGZyb20gJy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xuaW1wb3J0IHsgU2Nob29sVGVybSB9IGZyb20gJy4uL3V0aWxzL3NjaG9vbC10ZXJtJztcbmltcG9ydCB7IGRhdGVUaW1lUmV2aXZlciwgTCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBtb2NrSnNvbkZpbGUgZnJvbSAnLi9tb2NrL21vY2stZWRzLWRhdGEuanNvbic7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBTdXNwZW5zZUJhc2VkQVBJLCBtYWtlU3VzcGVuc2VBcGkgfSBmcm9tICcuLi91dGlscy9tYWtlLXN1c3BlbnNlLWFwaSc7XG5cbmV4cG9ydCBjbGFzcyBFZHNDbGllbnQge1xuICBodHRwOiBSZXN0Q2xpZW50O1xuICB1c2VyRW1haWxHZXR0ZXI6ICgpPT5zdHJpbmc7XG4gIHN1c3BlbnNlOiBTdXNwZW5zZUJhc2VkQVBJPEVkc0NsaWVudD47XG5cbiAgY29uc3RydWN0b3IgKFxuICAgIGlzb21vcnBoaWM6IElzb21vcnBoaWNFbnYsXG4gICAgYmFzZVVybDogc3RyaW5nLFxuICAgIGJlYXJlclByb3ZpZGVyOiBCZWFyZXJQcm92aWRlcixcbiAgICB1c2VyRW1haWxHZXR0ZXI6ICgpPT5zdHJpbmdcbiAgKSB7XG4gICAgdGhpcy5odHRwID0gbmV3IFJlc3RDbGllbnQgKGlzb21vcnBoaWMsIGJhc2VVcmwsIHtiZWFyZXJQcm92aWRlcn0pO1xuICAgIHRoaXMudXNlckVtYWlsR2V0dGVyID0gdXNlckVtYWlsR2V0dGVyO1xuICAgIGNvbnN0IGlzQXBpTWV0aG9kID0gbSA9PlxuICAgICAgdHlwZW9mIHRoaXNbbV0gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIG0gIT09ICdjb25zdHJ1Y3RvcicgJiYgLy8gU2luY2UgbWFrZVN1c3BlbnNlQXBpKCkgd2Fsa3MgcHJvdG90eXBlIGNoYWluXG4gICAgICBtICE9PSAncHJpdmF0aXppbmdDYWNoZUJ1c3QnICYmXG4gICAgICBtICE9PSAndXNlckVtYWlsR2V0dGVyJyAvLyBMaXN0IG5vbi1BUEkgbWV0aG9kcyBoZXJlLi4uXG4gICAgICA7XG5cbiAgICBPYmplY3Qua2V5cyhFZHNDbGllbnQucHJvdG90eXBlKS5mb3JFYWNoKG1ldGhvZCA9PiB7XG4gICAgICBpZiAoaXNBcGlNZXRob2QobWV0aG9kKSkge1xuICAgICAgICB0aGlzW21ldGhvZF0gPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpc1ttZXRob2RdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLnN1c3BlbnNlID0gbWFrZVN1c3BlbnNlQXBpKHRoaXMsIHtpc0FwaU1ldGhvZH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBwcml2YXRpemluZ0NhY2hlQnVzdCgpIHtcbiAgICByZXR1cm4ge3VzZXI6IHRoaXMudXNlckVtYWlsR2V0dGVyKCl9O1xuICB9XG5cbi8qKlxuICAgKiBSZXRyaWV2ZSBhY3RpdmUgY291cnNlcyBmb3IgY3VycmVudCBsb2dnZWQgaW4gc3R1ZGVudC5cbiAgICpcbiAgICogQHBhcmFtIGNvdXJzZUNvZGUgU2hvcnQtbmFtZSBvZiB0aGUgY291cnNlLiBPcHRpb25hbC5cbiAgICovXG4gIGFzeW5jIGdldEFjdGl2ZUNvdXJzZXMocToge2NvdXJzZUNvZGU/OiBzdHJpbmcsIHBlcmlvZE5hbWU6IHN0cmluZ30pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgaWYgKHEuY291cnNlQ29kZSkgcXVlcnkuQ291cnNlQ29kZSA9IHEuY291cnNlQ29kZTtcbiAgICAgICAgaWYgKHEucGVyaW9kTmFtZSkgcXVlcnkuUGVyaW9kTmFtZSA9IHEucGVyaW9kTmFtZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJzdHVkZW50YWN0aXZlY291cnNlc1wiLCBxdWVyeSk7XG4gICAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgIHJldHVybiBqc29uLmNvdXJzZXMgYXMgRURTQ291cnNlW107XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmcm9tIEVEUzogXCIgKyBleCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTGBLdW5kZSB0eXbDpHJyIGludGUgbGFkZGEgdGVybWluc23DpWwgZWxsZXIgYXZrbGFyYWRlIHN0ZWcgZnLDpW4gRURTLiBGw7Zyc8O2ayBpZ2VuIHNlbmFyZS4uLmApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBsYXRlc3QgYXNzZXNzbWVudHMgZm9yIGN1cnJlbnQgbG9nZ2VkIGluIHVzZXIuXG4gICAqIFxuICAgKiBAcGFyYW0gbGltaXQgT3B0aW9uYWwgbGltaXRcbiAgICovXG4gIGFzeW5jIGdldExhdGVzdEFzc2Vzc21lbnRzKGxpbWl0PzogbnVtYmVyKSB7XG4gICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xuICAgIGlmICghaXNOYU4obGltaXQpKSBxdWVyeS5Db3VudCA9IGxpbWl0O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJzdHVkZW50YXNzZXNzbWVudHNcIiwgcXVlcnkpO1xuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ganNvbi5hc3Nlc3NtZW50cyBhcyBFRFNBc3Nlc3NtZW50W107ICAgIFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHN0dWR5cGxhbnMgZm9yIGN1cnJlbnQgbG9nZ2VkLWluIHVzZXJcbiAgICovXG4gIGFzeW5jIGdldFN0dWRlbnRHb2FscygpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGdvYWxzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnN0dWRlbnRHb2FscyBhcyBFRFNTdHVkeVBsYW5bXTsgICAgXG4gIH1cblxuICBhc3luYyBnZXRTdHVkZW50RnV0dXJlQWJpbGl0aWVzKCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJzdHVkZW50RnV0dXJlQWJpbGl0aWVzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnN0dWRlbnRGdXR1cmVBYmlsaXRpZXMgYXMgRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHlbXTtcbiAgfVxuXG4gIGFzeW5jIGdldFRlYWNoZXJUdXRvclN0dWRlbnRzKCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJ0ZWFjaGVydHV0b3JzdHVkZW50c1wiLCB0aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCkpO1xuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ganNvbi5zdHVkZW50cyBhcyBFRFNTdHVkZW50W107XG4gIH1cblxuICAvKipcbiAgICogZ2V0U2Nob29sVHVpdGlvbkdyb3VwcygpXG4gICAqIFxuICAgKiBSZXR1cm4gdHVpdGlvbmdyb3VwcyBmb3Igc2Nob29sXG4gICAqIFxuICAgKiBAcGFyYW0gc2Nob29sTmFtZSAtIG5hbWUgb2Ygc2Nob29sXG4gICAqIEBwYXJhbSBjb3Vyc2VDb2RlIC0gU2tvbHZlcmtldHMgY29kZSBmb3IgY291cnNlXG4gICAqL1xuICBhc3luYyBnZXRTY2hvb2xUdWl0aW9uR3JvdXBzKHE6IHtzY2hvb2xOYW1lOiBzdHJpbmcsIGNvdXJzZUNvZGU6IHN0cmluZ30pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwiU2Nob29sVHVpdGlvbkdyb3Vwc1wiLCB7Li4udGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpLCAuLi5xfSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnNjaG9vbFR1aXRpb25Hcm91cHMgYXMgRURTVHVpdGlvbkdyb3VwW107XG4gIH1cblxuICAvKipcbiAgICogZ2V0VHVpdGlvbkdyb3VwU3R1ZGVudHMoKVxuICAgKiBcbiAgICogUmV0dXJuIG5hbWUgYW5kIG1haWxhZHJlc3NlcyBmb3IgdHV0aXRpb25ncm91cHMgaW4gc2Nob29sc1xuICAgKiBcbiAgICogQHBhcmFtIHNjaG9vbE5hbWUgLSBuYW1lIG9mIHNjaG9vbFxuICAgKiBAcGFyYW0gdHVpdGlvbkdyb3VwTmFtZSAtIHR1aXRpb24gZ3J1b3AgbmFtZSBpbiBFRFNcbiAgICovXG4gIGFzeW5jIGdldFR1aXRpb25Hcm91cFN0dWRlbnRzKHE6IHtzY2hvb2xOYW1lOiBzdHJpbmcsIHR1aXRpb25Hcm91cE5hbWU6IHN0cmluZ30pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwiVHVpdGlvbkdyb3VwU3R1ZGVudHNcIiwgey4uLnRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSwgLi4ucX0pO1xuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ganNvbi50dWl0aW9uR3JvdXBTdHVkZW50cyBhcyBFRFNUdWl0aW9uU3R1ZGVudFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldFNjaG9vbFRlYWNoZXJzKClcbiAgICogXG4gICAqIFJldHVybiBuYW1lIGFuZCBtYWlsYWRyZXNzZXMgZm9yIHR1dGl0aW9uZ3JvdXBzIGluIHNjaG9vbHNcbiAgICogXG4gICAqIEBwYXJhbSBzY2hvb2xOYW1lIC0gbmFtZSBvZiBzY2hvb2xcbiAgICovXG4gIGFzeW5jIGdldFNjaG9vbFRlYWNoZXJzKHE6IHtzY2hvb2xOYW1lOiBzdHJpbmd9KSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcIlNjaG9vbFRlYWNoZXJzXCIsIHsuLi50aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCksIC4uLnF9KTtcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24uc2Nob29sVGVhY2hlcnMgYXMgRURTVGVhY2hlcltdO1xuICB9XG4gIC8vIHdlIGFzc3VtZSB0aGF0IHRoZSBFRFMgd2lsbCByZXR1cm4gdGhlIGN1cnJlbnQgYWNhZGVtaWMgeWVhciBkYXRlcyBkZXRlcm1pbmVkIGJ5IHRoZSBjdXJyZW50IGRhdGVcbiAgYXN5bmMgZ2V0QWNhZGVtaWNZZWFyVGVybXMoc2Nob29sTG9jYWxlOiBzdHJpbmcsIGRhdGU6IERhdGUpIHtcbiAgICAvLyBtb2NrIGRhdGFcbiAgICBzd2l0Y2ggKHNjaG9vbExvY2FsZSkge1xuICAgICAgY2FzZSAnZW5fc2luJzpcbiAgICAgIHJldHVybiBtb2NrSnNvbkZpbGUuU291dGhJbmRpYS5maWx0ZXIoZiA9PiBtb21lbnQoZGF0ZSkuaXNTYW1lT3JBZnRlcihmLmZpcnN0VGVybS5zdGFydERhdGUpICYmIG1vbWVudChkYXRlKS5pc1NhbWVPckJlZm9yZShmLnNlY29uZFRlcm0uZW5kRGF0ZSkpWzBdIGFzIE1vY2tFRFNBY2FkZW1pY1llYXI7XG4gICAgICBjYXNlICdlbl9uaW4nOlxuICAgICAgcmV0dXJuIG1vY2tKc29uRmlsZS5Ob3J0aEluZGlhLmZpbHRlcihmID0+IG1vbWVudChkYXRlKS5pc1NhbWVPckFmdGVyKGYuZmlyc3RUZXJtLnN0YXJ0RGF0ZSkgJiYgbW9tZW50KGRhdGUpLmlzU2FtZU9yQmVmb3JlKGYuc2Vjb25kVGVybS5lbmREYXRlKSlbMF0gYXMgTW9ja0VEU0FjYWRlbWljWWVhcjtcbiAgICAgIGNhc2UgJ3N2JzpcbiAgICAgIHtcbiAgICAgIHZhciBob2xpZGF5cyA9IFtdIGFzIE1vY2tFRFNEYXRlUmFuZ2VbXTtcbiAgICAgIHZhciBmaXJzdFRlcm1Nb21lbnQgPSBnZXRUZXJtU3RhckVuZERhdGUoZGF0ZSwgdHJ1ZSk7XG4gICAgICB2YXIgc2Vjb25kVGVybU1vbWVudCA9IGdldFRlcm1TdGFyRW5kRGF0ZShkYXRlLCBmYWxzZSk7XG5cbiAgICAgIHZhciBzdGFydEZpcnN0VGVybURhdGUgPSBmaXJzdFRlcm1Nb21lbnRbMF07XG4gICAgICB2YXIgc3RhcnRTZWNvbmRUZXJtRGF0ZSA9IHNlY29uZFRlcm1Nb21lbnRbMF07XG4gICAgICB2YXIgZW5kRmlyc3RUZXJtRGF0ZSA9IGZpcnN0VGVybU1vbWVudFsxXTtcbiAgICAgIHZhciBlbmRTZWNvbmRUZXJtRGF0ZSA9IHNlY29uZFRlcm1Nb21lbnRbMV07XG5cbiAgICAgIGNvbnN0IGZpcnN0VGVybSA9IHtzdGFydERhdGU6IG5ldyBEYXRlKHN0YXJ0Rmlyc3RUZXJtRGF0ZS55ZWFyKCksIHN0YXJ0Rmlyc3RUZXJtRGF0ZS5tb250aCgpLCBzdGFydEZpcnN0VGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKSwgZW5kRGF0ZTogbmV3IERhdGUoc3RhcnRGaXJzdFRlcm1EYXRlLnllYXIoKSwgZW5kRmlyc3RUZXJtRGF0ZS5tb250aCgpLCBlbmRGaXJzdFRlcm1EYXRlLmRhdGUoKSkudG9EYXRlU3RyaW5nKCl9O1xuICAgICAgY29uc3Qgc2Vjb25kVGVybSA9IHtzdGFydERhdGU6IG5ldyBEYXRlKHN0YXJ0U2Vjb25kVGVybURhdGUueWVhcigpLCBzdGFydFNlY29uZFRlcm1EYXRlLm1vbnRoKCksIHN0YXJ0U2Vjb25kVGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKSwgZW5kRGF0ZTogbmV3IERhdGUoc3RhcnRTZWNvbmRUZXJtRGF0ZS55ZWFyKCksIGVuZFNlY29uZFRlcm1EYXRlLm1vbnRoKCksIGVuZFNlY29uZFRlcm1EYXRlLmRhdGUoKSkudG9EYXRlU3RyaW5nKCl9O1xuICAgICAgcmV0dXJuIHtmaXJzdFRlcm0sIHNlY29uZFRlcm0sIGhvbGlkYXlzfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5cbmV4cG9ydCBjbGFzcyBFRFNQZXJpb2Qge1xuICBwZXJpb2Q6IHN0cmluZztcbiAgdGVybTogJ0FUJyB8ICdTVCc7XG4gIHllYXI6IG51bWJlcjtcbiAgY29uc3RydWN0b3IgKHBlcmlvZFN0cmluZ09yU2Nob29sVGVybTogc3RyaW5nIHwgU2Nob29sTW9tZW50KSB7XG4gICAgaWYgKHR5cGVvZiBwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLnBlcmlvZCA9IHBlcmlvZFN0cmluZ09yU2Nob29sVGVybTtcbiAgICAgIHRoaXMudGVybSA9IHRoaXMucGVyaW9kLnN0YXJ0c1dpdGgoJ0hUJykgPyAnQVQnIDogJ1NUJztcbiAgICAgIHRoaXMueWVhciA9IHBhcnNlSW50KHRoaXMucGVyaW9kLnN1YnN0cigyKSk7XG4gICAgICBpZiAoaXNOYU4odGhpcy55ZWFyKSkgdGhyb3cgbmV3IEVycm9yIChgSW52YWxpZCBwZXJpb2Q6ICR7dGhpcy5wZXJpb2R9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNjaG9vbFRlcm0gPSBuZXcgU2Nob29sVGVybShwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm0pO1xuICAgICAgdGhpcy5wZXJpb2QgPSAoc2Nob29sVGVybS50ZXJtID09PSAnQVQnID8gXCJIVFwiIDogXCJWVFwiKSArIHNjaG9vbFRlcm0ueWVhcjtcbiAgICAgIHRoaXMudGVybSA9IHNjaG9vbFRlcm0udGVybTtcbiAgICAgIHRoaXMueWVhciA9IHNjaG9vbFRlcm0ueWVhcjtcbiAgICB9XG4gIH1cblxuICBnZXQgc2Nob29sVGVybSAoKSA6IFNjaG9vbFRlcm0ge1xuICAgIHJldHVybiBuZXcgU2Nob29sVGVybSh7XG4gICAgICBhY2FkZW1pY1llYXI6IHRoaXMudGVybSA9PT0gJ0FUJyA/XG4gICAgICAgIGAke3RoaXMueWVhcn0vJHt0aGlzLnllYXIgKyAxfWAgOlxuICAgICAgICBgJHt0aGlzLnllYXItMX0vJHt0aGlzLnllYXJ9YCxcbiAgICAgIHRlcm06IHRoaXMudGVybVxuICAgIH0pO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMucGVyaW9kO1xuICB9XG5cbiAgdmFsdWVPZigpIHtcbiAgICByZXR1cm4gdGhpcy55ZWFyICsgXCI6XCIgKyAodGhpcy50ZXJtID09PSAnU1QnID8gXCIxXCIgOiBcIjJcIik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSnNvbkRhdGVfb2xkIChqc29uRGF0ZVN0cjogc3RyaW5nKSA6IERhdGUge1xuICBjb25zdCBkYXRlID0gZGF0ZVRpbWVSZXZpdmVyKFwiXCIsIGpzb25EYXRlU3RyKTtcbiAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEpTT04gZGF0ZSBzdHJpbmc6IFwiICsganNvbkRhdGVTdHIpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gYXZvaWRTaW11bHRhbm91c0NhbGxzPFQsQT4obWV0aG9kOiAoLi4uYXJnczpBW10pPT5Qcm9taXNlPFQ+KSA6ICguLi5hcmdzOkFbXSk9PlByb21pc2U8VD4ge1xuICBsZXQgb25nb2luZ1Byb21pc2VzOiB7W2FyZ3NKc29uOiBzdHJpbmddOiBQcm9taXNlPFQ+fSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgYXJnc0pzb24gPSBKU09OLnN0cmluZ2lmeShbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xuICAgIGlmICghb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXSkge1xuICAgICAgb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXSA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLnRoZW4ocmVzdWx0PT57XG4gICAgICAgIGRlbGV0ZSBvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtRmllbGQgfSBmcm9tICcuL2Zvcm0tZmllbGQnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBsYWJlbDogYW55O1xuICBpZDogc3RyaW5nO1xuICB2YWx1ZTogc3RyaW5nO1xuICBwbGFjZWhvbGRlcj86IHN0cmluZztcbiAgYXV0b0ZvY3VzPzogYm9vbGVhbjtcbiAgcm93cz86IG51bWJlcjtcbiAgY2hpbGRyZW4/O1xuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBUZXh0QXJlYUZvcm1GaWVsZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Rm9ybUZpZWxkIGxhYmVsPXt0aGlzLnByb3BzLmxhYmVsfSBpZD17dGhpcy5wcm9wcy5pZH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICA8dGV4dGFyZWEgYXV0b0ZvY3VzPXt0aGlzLnByb3BzLmF1dG9Gb2N1c30gaWQ9e3RoaXMucHJvcHMuaWR9IGNvbHM9ezM1fSByb3dzPXt0aGlzLnByb3BzLnJvd3MgfHwgNX0gdmFsdWU9e3RoaXMucHJvcHMudmFsdWV9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnByb3BzLm9uQ2hhbmdlKGV2LnRhcmdldC52YWx1ZSl9XG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlaG9sZGVyfSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIHshIXRoaXMucHJvcHMuY2hpbGRyZW4gJiYgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxuICAgICAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgICAgPC9kaXY+fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRm9ybUZpZWxkPlxuICAgICk7XG4gIH1cbn1cblxuIiwidmFyIHN0YWNrID0gW107XG52YXIgY3VycmVudEZpYmVyID0gbnVsbDtcbnZhciBwcm92aWRlcnMgPSBbZnVuY3Rpb24gKCkgeyByZXR1cm4gY3VycmVudEZpYmVyOyB9XTtcbmZ1bmN0aW9uIHB1c2hGaWJlcihmaWJlcikge1xuICAgIHN0YWNrLnB1c2goY3VycmVudEZpYmVyKTtcbiAgICBjdXJyZW50RmliZXIgPSBmaWJlcjtcbn1cbmZ1bmN0aW9uIHBvcEZpYmVyKCkge1xuICAgIGN1cnJlbnRGaWJlciA9IHN0YWNrLnBvcCgpO1xufVxuZXhwb3J0IHZhciBGaWJlckNvbnRleHQgPSB7XG4gICAgZ2V0IGN1cnJlbnQoKSB7IHJldHVybiBjdXJyZW50RmliZXI7IH0sXG4gICAgLypydW46IGZ1bmN0aW9uIHJlcnVuPFI+KGZpYmVyOiBGaWJlciwgZm46ICgpPT5SKTogUiB8IFByb21pc2U8Uj4ge1xuICAgICAgcHVzaEZpYmVyKGZpYmVyKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZm4oKSk7XG4gICAgICB9IGNhdGNoIChwKSB7XG4gICAgICAgIGlmIChwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gcC50aGVuKCgpPT5yZXJ1bihmaWJlciwgZm4pKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocCk7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHBvcEZpYmVyKCk7XG4gICAgICB9XG4gICAgfSwqL1xuICAgIGFkZFByb3ZpZGVyOiBmdW5jdGlvbiAoZ2V0Q3VycmVudEZpYmVyKSB7XG4gICAgICAgIHByb3ZpZGVycy5wdXNoKGdldEN1cnJlbnRGaWJlcik7XG4gICAgICAgIHNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzKCk7XG4gICAgfSxcbiAgICByZW1vdmVQcm92aWRlcjogZnVuY3Rpb24gKGdldEN1cnJlbnRGaWJlcikge1xuICAgICAgICBwcm92aWRlcnMgPSBwcm92aWRlcnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwICE9PSBnZXRDdXJyZW50RmliZXI7IH0pO1xuICAgICAgICBzZXRDdXJyZW50R2V0dGVyRnJvbVByb3ZpZGVycygpO1xuICAgIH1cbn07XG5mdW5jdGlvbiBzZXRDdXJyZW50R2V0dGVyRnJvbVByb3ZpZGVycygpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmliZXJDb250ZXh0LCBcImN1cnJlbnRcIiwge1xuICAgICAgICBnZXQ6IHByb3ZpZGVycy5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHAoKSB8fCBjKCk7IH07IH0pLFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiVXNlIEZpYmVyQ29udGV4dC5wdXNoKCkgdG8gY2hhbmdlIGN1cnJlbnQgZmliZXJcIik7IH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpYmVyLWNvbnRleHQuanMubWFwIiwiaW1wb3J0IGV4ZWMgZnJvbSAnLi9leGVjJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBib2xkOiB7XG4gICAgaWNvbjogJzxiPkY8L2I+JyxcbiAgICB0aXRsZTogJ0ZldHN0aWwnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnYm9sZCcpXG4gIH0sXG4gIGl0YWxpYzoge1xuICAgIGljb246ICc8aT5LPC9pPicsXG4gICAgdGl0bGU6ICdLdXJzaXYnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaXRhbGljJylcbiAgfSxcbiAgdW5kZXJsaW5lOiB7XG4gICAgaWNvbjogJzx1PlU8L3U+JyxcbiAgICB0aXRsZTogJ1VuZGVyc3RydWtlbicsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCd1bmRlcmxpbmUnKVxuICB9LFxuICBzdHJpa2V0aHJvdWdoOiB7XG4gICAgaWNvbjogJzxzdHJpa2U+Uzwvc3RyaWtlPicsXG4gICAgdGl0bGU6ICdTdHJ1a2VuJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3N0cmlrZVRocm91Z2gnKVxuICB9LFxuICBoZWFkaW5nMToge1xuICAgIGljb246ICc8Yj5IPHN1Yj4xPC9zdWI+PC9iPicsXG4gICAgdGl0bGU6ICdSdWJyaWsgMScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDE+JylcbiAgfSxcbiAgaGVhZGluZzI6IHtcbiAgICBpY29uOiAnPGI+SDxzdWI+Mjwvc3ViPjwvYj4nLFxuICAgIHRpdGxlOiAnUnVicmlrIDInLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgyPicpXG4gIH0sXG4gIGhlYWRpbmczOiB7XG4gICAgaWNvbjogJzxiPkg8c3ViPjM8L3N1Yj48L2I+JyxcbiAgICB0aXRsZTogJ1J1YnJpayAzJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMz4nKVxuICB9LFxuICBwYXJhZ3JhcGg6IHtcbiAgICBpY29uOiAnJiMxODI7JyxcbiAgICB0aXRsZTogJ1BhcmFncmFmJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxQPicpXG4gIH0sXG4gIHF1b3RlOiB7XG4gICAgaWNvbjogJyYjODIyMDsgJiM4MjIxOycsXG4gICAgdGl0bGU6ICdDaXRhdCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8QkxPQ0tRVU9URT4nKVxuICB9LFxuICBvbGlzdDoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLWxpc3Qtb2xcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcbiAgICB0aXRsZTogJ09yZG5hZCBsaXN0YScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRPcmRlcmVkTGlzdCcpXG4gIH0sXG4gIHVsaXN0OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtbGlzdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxuICAgIHRpdGxlOiAnUHVua3RsaXN0YScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRVbm9yZGVyZWRMaXN0JylcbiAgfSxcbiAgb3V0ZGVudDoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLW91dGRlbnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcbiAgICB0aXRsZTogJ01pbnNrYSBpbmRyYWcnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYyhcIm91dGRlbnRcIilcbiAgfSxcbiAgaW5kZW50OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtaW5kZW50XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXG4gICAgdGl0bGU6ICfDlmthIGluZHJhZycsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKFwiaW5kZW50XCIpLFxuICB9LFxuICBjb2RlOiB7XG4gICAgaWNvbjogJyZsdDsvJmd0OycsXG4gICAgdGl0bGU6ICdQcm9ncmFta29kJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxQUkU+JylcbiAgfSxcbiAgbGluZToge1xuICAgIGljb246ICcmIzgyMTM7JyxcbiAgICB0aXRsZTogJ1bDpWdyw6R0IGxpbmplJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydEhvcml6b250YWxSdWxlJylcbiAgfSxcbiAgbGluazoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLWxpbmtcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcbiAgICB0aXRsZTogJ0luZm9nYSBsw6RuaycsXG4gICAgcmVzdWx0OiAoKSA9PiB7XG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KCdBbmdlIGzDpG5rZW5zIFVSTCcpXG4gICAgICBpZiAodXJsKSBleGVjKCdjcmVhdGVMaW5rJywgdXJsKVxuICAgIH1cbiAgfSxcbiAgaW1hZ2U6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcbiAgICB0aXRsZTogJ0luZm9nYSBiaWxkJyxcbiAgICBwcm9tcHRNc2c6ICdBbmdlIGJpbGRlbnMgVVJMJyxcbiAgICByZXN1bHQgKGV2LCBjb21wb25lbnQpIHtcbiAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5wcm9tcHQodGhpcy5wcm9tcHRNc2cpO1xuICAgICAgaWYgKHVybCkge1xuICAgICAgICAvL2V4ZWMoJ2luc2VydEltYWdlJywgdXJsKTtcbiAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICAgICAgaW1nLnRhYkluZGV4ID0gMTtcbiAgICAgICAgaW5zZXJ0RWxlbWVudChpbWcpO1xuICAgICAgICBpbWcub25mb2N1cyA9IGNvbXBvbmVudC5vbkZvY3VzO1xuICAgICAgICBpbWcub25ibHVyID0gY29tcG9uZW50Lm9uQmx1cjtcbiAgICAgICAgY29tcG9uZW50LnByb3BzLm9uQ2hhbmdlKGNvbXBvbmVudC5jb250ZW50RGl2LmlubmVySFRNTCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydEVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICB2YXIgc2VsLCByYW5nZTtcbiAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbiAmJiAoc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpKS5yYW5nZUNvdW50KSB7XG4gICAgICAgIHJhbmdlID0gc2VsLmdldFJhbmdlQXQoMCk7XG4gICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICByYW5nZS5pbnNlcnROb2RlKGVsZW1lbnQpO1xuICAgICAgICAvLyBNb3ZlIHRoZSBjYXJldCBpbW1lZGlhdGVseSBhZnRlciB0aGUgaW5zZXJ0ZWQgc3BhblxuICAgICAgICByYW5nZS5zZXRTdGFydEFmdGVyKGVsZW1lbnQpO1xuICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFJlcG8sIFJlcG9Db21tdW5pY2F0b3J9IGZyb20gJy4vcmVwbyc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBMaXN0T3B0aW9ucywgQmF0Y2hSdW5uZXIsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBEb2N1bWVudH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEtlZFJlcG9PcHRpb25zPFQgZXh0ZW5kcyBEb2N1bWVudD4ge1xuICBnZXRDbGllbnQ6ICgpPT5LZWRCYWNrZW5kQ2xpZW50O1xuICBnZXRRdWVyeU9wdGlvbnM6ICgpPT5Qcm9taXNlPExpc3RPcHRpb25zPjtcbiAgb3B0aW1pc3RpYzogYm9vbGVhbjtcbiAgdGFibGU6IHN0cmluZztcbiAgdXNlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgS2VkUmVwbzxUIGV4dGVuZHMgRG9jdW1lbnQ+IHtcbiAgbWVtOiBSZXBvPFQ+O1xuICBvcHRpb25zOiBLZWRSZXBvT3B0aW9uczxUPjtcbiAgXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEtlZFJlcG9PcHRpb25zPFQ+KSB7XG4gICAgY29uc3Qge3RhYmxlLCBnZXRDbGllbnQsIGdldFF1ZXJ5T3B0aW9uc30gPSBvcHRpb25zO1xuICAgIHRoaXMubWVtID0gbmV3IFJlcG88VD4oe3F1ZXJ5OiBhc3luYyAoKT0+e1xuICAgICAgY29uc3QgcXVlcnlPcHRpb25zID0gYXdhaXQgZ2V0UXVlcnlPcHRpb25zKCk7XG4gICAgICByZXR1cm4gYXdhaXQgZ2V0Q2xpZW50KCkubGlzdDxUPih0YWJsZSwge1xuICAgICAgICAuLi5xdWVyeU9wdGlvbnMsXG4gICAgICAgIGNhY2hlQnVzdDogdGhpcy5nZXRDYWNoZUJ1c3QoKX0pO1xuICAgIH19KTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDYWNoZUJ1c3QoKSB7XG4gICAgY29uc3Qge3RhYmxlLCB1c2VyfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBjYWNoZUJ1c3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2FjaGUtYnVzdC0nICsgdGFibGUgKyAnLScgKyB1c2VyKTtcbiAgICByZXR1cm4gY2FjaGVCdXN0IHx8IHRoaXMucmVnZW5lcmF0ZUNhY2hlQnVzdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWdlbmVyYXRlQ2FjaGVCdXN0KCkge1xuICAgIGNvbnN0IHt0YWJsZSwgdXNlcn0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY2FjaGVCdXN0ID0gY3JlYXRlVVVJRCgpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjYWNoZS1idXN0LScgKyB0YWJsZSArICctJyArIHVzZXIsIGNhY2hlQnVzdCk7XG4gICAgcmV0dXJuIGNhY2hlQnVzdDtcbiAgfVxuXG4gIGFzeW5jIHVwc2VydChpdGVtOiBULCB1cGRhdGVyOiAoaXRlbTogVCkgPT4gdm9pZCkge1xuICAgIGlmICghaXRlbS4kZXRhZykge1xuICAgICAgLy8gSXRlbXMgd2l0aG91dCAkZXRhZyBjYW5ub3QgYmUgcmV0cmlldmVkIGZyb20gc2VydmVyLCBzbyBpdCBzaG91bGQgYmUgaW5zZXJ0ZWQuXG4gICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgdXBkYXRlcih1cGRhdGVkSXRlbSk7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5pbnNlcnQoW3VwZGF0ZWRJdGVtXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIGhhdmUgYW4gJGV0YWcsIHNvIHdlIGNhbiBleHBlY3QgaXQgdG8gbGl2ZSBvbiB0aGUgc2VydmVyLlxuICAgICAgLy8gSG93ZXZlciwgdGFrZSBjYXJlIG9mIHRoZSB1bmxpa2VseSBzaXR1YXRpb24gdGhhdCBpdCB3YXMgZGVsZXRlZCBmcm9tIHNlcnZlcixcbiAgICAgIC8vIGFuZCBpZiBzbywgaW5zZXJ0IGl0IGFnYWluLlxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoW2l0ZW1dLCB1cGRhdGVyKS5jYXRjaChlID0+IHtcbiAgICAgICAgaWYgKGUubmFtZSA9PT0gXCJodHRwNDA0XCIpIHtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgICAgIHVwZGF0ZXIodXBkYXRlZEl0ZW0pO1xuICAgICAgICAgIHJldHVybiB0aGlzLmluc2VydChbdXBkYXRlZEl0ZW1dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB1cGRhdGUoaXRlbXM6IFRbXSwgdXBkYXRlcjogKGl0ZW06IFQpID0+IHZvaWQpIHtcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgY29uc3QgbW9kaWZpZWRJdGVtczogVFtdID0gaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgbWVtUmVwb0l0ZW0gPSB0aGlzLm1lbS5pdGVtcy5maW5kKGl0ID0+IGl0LmlkID09PSBpdGVtLmlkKTtcbiAgICAgIGl0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCBtZW1SZXBvSXRlbSB8fCBpdGVtKTtcbiAgICAgIHVwZGF0ZXIoaXRlbSk7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KTtcbiAgICBpZiAob3B0aW1pc3RpYykgYXdhaXQgdGhpcy5tZW0udXBkYXRlKG1vZGlmaWVkSXRlbXMubWFwKHggPT4gT2JqZWN0LmFzc2lnbih7fSwgeCwgeyRtZXRhOiAndXBkYXRpbmcnfSkpKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZG8gKGJyID0+IG1vZGlmaWVkSXRlbXMuZm9yRWFjaChpdGVtID0+IGJyLnB1dCh0YWJsZSwgaXRlbSkpKVxuICAgIC5jYXRjaChlID0+IGUubmFtZSA9PT0gXCJodHRwNDA5XCIgPyAvLyBjb25mbGljdFxuICAgICAgLy8gR2V0IGEgZnJlc2ggdmVyc2lvbiBmcm9tIHNlcnZlcjpcbiAgICAgIGNsaWVudC5saXN0PFQ+KHRhYmxlLCB7aWRzOiBpdGVtcy5tYXAoaXRlbSA9PiBpdGVtLmlkKX0sIHtjYWNoZTogJ25vLWNhY2hlJ30pLnRoZW4oZnJlc2hJdGVtcyA9PiB7XG4gICAgICAgIC8vIFVwZGF0ZSBsb2NhbCB2ZXJzaW9uOlxuICAgICAgICBjb25zdCBtb2RpZmllZEl0ZW1zID0gZnJlc2hJdGVtcy5tYXAoZnJlc2hJdGVtID0+IHtcbiAgICAgICAgICAvLyBDbG9uZSB0aGUgZnJlc2ggaXRlbVxuICAgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gT2JqZWN0LmFzc2lnbih7fSwgZnJlc2hJdGVtKTtcbiAgICAgICAgICAvLyBSZS1ydW4gdGhlIHVwZGF0ZXIgb24gdGhlIGNsb25lOlxuICAgICAgICAgIHVwZGF0ZXIobW9kaWZpZWQpO1xuICAgICAgICAgIHJldHVybiBtb2RpZmllZDtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFJlLWRvIHRoZSB0aGUgcHV0IG9wZXJhdGlvbiB0b3dhcmRzIHRoZSBzZXJ2ZXIuXG4gICAgICAgIHJldHVybiBjbGllbnQuZG8oYnIgPT4gbW9kaWZpZWRJdGVtcy5mb3JFYWNoKGl0ZW0gPT4gYnIucHV0KHRhYmxlLCBpdGVtKSkpO1xuICAgICAgfSkgOlxuICAgICAgLy8gT3RoZXIgdW5leHBlY3RlZCBlcnJvcjpcbiAgICAgIFByb21pc2UucmVzb2x2ZShvcHRpbWlzdGljICYmXG4gICAgICAgIHRoaXMubWVtLnVwZGF0ZShpdGVtcykpIC8vIFVuZG8gb3B0aW1pc3RpYyB1cGRhdGVcbiAgICAgIC50aGVuKCgpPT57XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTsgLy8gUmVqZWN0IHdpdGggdGhlIGVycm9yIG5vIG1hdHRlci5cbiAgICAgIH0pKTtcbiAgICB0aGlzLnJlZ2VuZXJhdGVDYWNoZUJ1c3QoKTtcbiAgICBtb2RpZmllZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpdGVtLiRldGFnID0gcmVzLm5ld0V0YWdzW2l0ZW0uaWRdO1xuICAgICAgaXRlbS4kbWV0YSA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLm1lbS51cGRhdGUobW9kaWZpZWRJdGVtcyk7IC8vIEVuc3VyZXMgbmV3IGV0YWcgaXMgaXMgYXBwbGllZCBvbiBuZXh0IGFjdGlvbi5cbiAgfVxuXG4gIHN0cmlwR3JhcGhzIChpdGVtczogVFtdLCBncmFwaHM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGNsb25lID0gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSk7XG4gICAgICBncmFwaHMuZm9yRWFjaChncmFwaCA9PiB7XG4gICAgICAgIGlmIChpdGVtW2dyYXBoXSkge1xuICAgICAgICAgIGNsb25lW2dyYXBoXSA9IChpdGVtW2dyYXBoXSBhcyB7aWQ6c3RyaW5nfVtdKS5tYXAgKGRvYyA9PiAoe2lkOiBkb2MuaWR9KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgaW5zZXJ0KGl0ZW1zOiBUW10pIHtcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZSwgZ2V0UXVlcnlPcHRpb25zfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcbiAgICBjb25zdCBxdWVyeU9wdGlvbnMgPSBhd2FpdCBnZXRRdWVyeU9wdGlvbnMoKTtcbiAgICBjb25zdCBncmFwaHMgPSBbXS5jb25jYXQocXVlcnlPcHRpb25zLmluY2x1ZGUpO1xuICAgIC8vIEdpdmUgSURzIHRvIGVhY2ggaXRlbTpcbiAgICBpdGVtcyA9IGl0ZW1zLm1hcChpdGVtID0+IGl0ZW0uaWQgPyBpdGVtIDogT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge2lkOiBjcmVhdGVVVUlEKCl9KSk7XG4gICAgY29uc3Qgc3RyaXBwZWQgPSB0aGlzLnN0cmlwR3JhcGhzKGl0ZW1zLCBncmFwaHMpO1xuICAgIGlmIChvcHRpbWlzdGljKSBhd2FpdCB0aGlzLm1lbS5pbnNlcnQoc3RyaXBwZWQubWFwKHggPT4gT2JqZWN0LmFzc2lnbih7fSwgeCwgeyRtZXRhOiAnYWRkaW5nJ30pKSk7XG4gICAgY29uc3QgYnIgPSBuZXcgQmF0Y2hSdW5uZXIoKTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3RyaXBwZWQpIHtcbiAgICAgIC8vIEFsc28gYWRkIGxpbmtzIHRvIGFsbCBmb3JlaWduIHJlbGF0ZWQgaXRlbXM6XG4gICAgICBmb3IgKGNvbnN0IGdyYXBoIG9mIGdyYXBocykge1xuICAgICAgICBjb25zdCBmb3JlaWduSXRlbXM6IERvY3VtZW50W10gPSBpdGVtW2dyYXBoXTtcbiAgICAgICAgaWYgKGZvcmVpZ25JdGVtcykge1xuICAgICAgICAgIGZvcmVpZ25JdGVtcy5mb3JFYWNoKGRvYyA9PiB7XG4gICAgICAgICAgICBici5saW5rMih0YWJsZSwgaXRlbS5pZCwgZ3JhcGgsIGRvYy5pZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyLmFkZCh0YWJsZSwgaXRlbSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5iYXRjaChici5tdXRhdGlvblJlcXVlc3RzKS5jYXRjaChlID0+IHtcbiAgICAgIGlmIChvcHRpbWlzdGljKSB0aGlzLm1lbS5kZWxldGUoaXRlbXMubWFwKGl0ZW0gPT4gaXRlbS5pZCkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgIH0pXG4gICAgdGhpcy5yZWdlbmVyYXRlQ2FjaGVCdXN0KCk7XG4gICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IGl0ZW0uJGV0YWcgPSByZXMubmV3RXRhZ3NbaXRlbS5pZF0pO1xuICAgIGlmIChvcHRpbWlzdGljKVxuICAgICAgYXdhaXQgdGhpcy5tZW0udXBkYXRlKGl0ZW1zKTsgLy8gVXBkYXRlIHdpdGggbmV3ICRldGFnLlxuICAgIGVsc2VcbiAgICAgIGF3YWl0IHRoaXMubWVtLmluc2VydChpdGVtcyk7XG4gIH1cblxuICBhc3luYyBkZWxldGUgKGlkczogc3RyaW5nW10pIHtcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgaWYgKG9wdGltaXN0aWMpIGF3YWl0IHRoaXMubWVtLnVwZGF0ZShpZHNcbiAgICAgIC5tYXAoaWQgPT4gdGhpcy5tZW0uaXRlbXMuZmluZCh4ID0+IHguaWQgPT09IGlkKSlcbiAgICAgIC5maWx0ZXIoeCA9PiB4KVxuICAgICAgLm1hcCh4ID0+IE9iamVjdC5hc3NpZ24oe30sIHgsIHskbWV0YTogJ2RlbGV0aW5nJ30pKSk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY2xpZW50LmRvIChiciA9PiBpZHMuZm9yRWFjaChpZCA9PiBici5kZWxldGUodGFibGUsIGlkKSkpLmNhdGNoKGFzeW5jIGUgPT4ge1xuICAgICAgaWYgKG9wdGltaXN0aWMpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5tZW0udXBkYXRlKGlkc1xuICAgICAgICAgIC5tYXAoaWQgPT4gdGhpcy5tZW0uaXRlbXMuZmluZCh4ID0+IHguaWQgPT09IGlkKSlcbiAgICAgICAgICAuZmlsdGVyKHggPT4geClcbiAgICAgICAgICAubWFwKHggPT4ge1xuICAgICAgICAgICAgeCA9IE9iamVjdC5hc3NpZ24oe30sIHgpO1xuICAgICAgICAgICAgZGVsZXRlIHguJG1ldGE7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH0pO1xuICAgIHRoaXMucmVnZW5lcmF0ZUNhY2hlQnVzdCgpO1xuICAgIGF3YWl0IHRoaXMubWVtLmRlbGV0ZShpZHMpO1xuICB9XG59XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuXG5jb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbnR5cGUgSFRNTFBvbGljeSA9IHtbdGFnTmFtZUxvd2VyOiBzdHJpbmddOiB7W2F0dHJpYnV0ZUxvd2VyOiBzdHJpbmddOiBib29sZWFufX07XG5cbi8qKiBUYWdzIC8gQXR0cmlidXRlcyBXaGl0ZWxpc3RcbiAqIFxuICovXG5jb25zdCBIVE1MX1dBU0hfUE9MSUNZOiBIVE1MUG9saWN5ID0ge1xuICBiOiB7fSwgIC8vIGJvbGRcbiAgaToge30sICAvLyBpdGFsaWNcbiAgcDoge30sICAvLyBwYXJhZ3JhcGhcbiAgdToge30sICAvLyB1bmRlcmxpbmVcbiAgc3RyaWtlOiB7fSwgLy8gc3RyaWtlLXRocm91Z2hcbiAgcHJlOiB7fSwgLy8gdW5mb3JtYXR0ZWRcbiAgaDE6IHt9LCAvLyBoZWFkaW5nIDFcbiAgaDI6IHt9LCAvLyBoZWFkaW5nIDJcbiAgaDM6IHt9LCAvLyBoZWFkaW5nIDNcbiAgaDQ6IHt9LCAvLyBoZWFkaW5nIDRcbiAgaDU6IHt9LCAvLyBoZWFkaW5nIDVcbiAgaW1nOiB7c3JjOiB0cnVlLCBjbGFzczogdHJ1ZSwgc3R5bGU6IHRydWUsIHRhYmluZGV4OiB0cnVlfSwgLy8gaW1hZ2UuIFdlIHNldCBzdHlsZSBhbmQgdGFiaW5kZXggb3Vyc2VsdmVzLiBBY2NlcHQgdGhhdC5cbiAgYToge2hyZWY6IHRydWUsIHRhcmdldDogdHJ1ZSwgdGFiaW5kZXg6IHRydWV9LCAvLyBsaW5rXG4gIHVsOiB7fSwgLy8gVW5vcmRlcmVkIGxpc3RcbiAgb2w6IHt9LCAvLyBPcmRlcmVkIGxpc3RcbiAgbGk6IHt9LCAvLyBsaXN0IGl0ZW1cbiAgaHI6IHt9LCAvLyBIb3Jpem9udGFsIHJ1bGVcbiAgYnI6IHt9LCAvLyBCcmVhayBsaW5lXG4gIGRpdjoge30sLy8gT2Ygc29tZSByZWFzb24sIGRpdnMgYXJlIHNvbWV0aW1lcyBpbnNlcnRlZCB3aGVuIHByZXNzaW5nIEVOVEVSIGluIHRoZSB3eXNpd3lnIGVkaXRvci5cbiAgc3Bhbjoge30sLy8gU3BhbnMgYXJlIGhhcm1sZXNzLCBqdXN0IHJlbW92ZSB0aGVpciBzdHlsZSBhbmQgb3RoZXIgYXR0cmlidXRlcyBhbmQgSSBmZWVsIGdyZWF0LlxuICAvLyB0YWJsZSB0YWdzOlxuICB0YWJsZToge2JvcmRlcjogdHJ1ZX0sXG4gIHRib2R5OiB7fSxcbiAgdGhlYWQ6IHt9LFxuICB0Zm9vdDoge30sXG4gIHRyOiB7fSxcbiAgdGQ6IHtoZWFkZXJzOiB0cnVlLCBjb2xzcGFuOiB0cnVlLCByb3dzcGFuOiB0cnVlfSxcbiAgdGg6IHthYmJyOiB0cnVlLCBoZWFkZXJzOiB0cnVlLCBzY29wZTogdHJ1ZSwgc29ydGVkOiB0cnVlLCBjb2xzcGFuOiB0cnVlLCByb3dzcGFuOiB0cnVlfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHdhc2hIdG1sIChodG1sOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpO1xuICBjb25zdCB7Y2hpbGROb2Rlc30gPSBkb2MuYm9keTtcbiAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHdhc2hOb2RlKGNoaWxkTm9kZXMuaXRlbShpKSkpIHtcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkID9cbiAgICBkb2MuYm9keS5pbm5lckhUTUwgOlxuICAgIGh0bWw7IC8vIEJ5IHJldHVybmluZyB0aGUgb3JpZ2luYWwgSFRNTCBzdHJpbmcsIHdlIHNwYXJlIHRoZSB1c2VyIGZyb20gcmVmcmVzaGluZyB0aGUgZWRpdCBhcmVhLFxuICAgICAgICAgIC8vIHdoaWNoIHdvdWxkIG90aGVyd2lzZSBwdXQgdGhlIGN1cnNvciBhdCB0aGUgdG9wLCBsb3NpbmcgdGhlIHBvc2l0aW9uIHdoZXJlIHVzZXIgd2hlcmUuXG59XG5cbmZ1bmN0aW9uIHdhc2hOb2RlKG5vZGU6IE5vZGUgfCBFbGVtZW50IHwgSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XG4gIGlmIChpc0VsZW1lbnQobm9kZSkpIHtcbiAgICBpZiAod2FzaEVsZW1lbnQobm9kZSkpIHtcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHdhc2hDaGlsZE5vZGVzKG5vZGUpKSB7XG4gICAgbW9kaWZpZWQgPSB0cnVlO1xuICB9XG4gIHJldHVybiBtb2RpZmllZDtcbn1cblxuZnVuY3Rpb24gd2FzaENoaWxkTm9kZXMobm9kZTogTm9kZSkge1xuICBsZXQgbW9kaWZpZWQgPSBmYWxzZTtcbiAgY29uc3Qge2NoaWxkTm9kZXN9ID0gbm9kZTtcbiAgZm9yIChsZXQgaT0wOyBpPGNoaWxkTm9kZXMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAod2FzaE5vZGUoY2hpbGROb2Rlcy5pdGVtKGkpKSkge1xuICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWQ7XG59IFxuXG4vKiogUmVwbGFjZSBhbiBlbGVtZW50IHdpdGggaXRzIGNoaWxkIG5vZGVzLlxuICogXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZU1pZGRsZUVsZW1lbnQoZWxlbWVudDogRWxlbWVudCkge1xuICBjb25zdCB7Y2hpbGROb2Rlc30gPSBlbGVtZW50O1xuICBmb3IgKGxldCBpPTA7IGk8Y2hpbGROb2Rlcy5sZW5ndGg7ICsraSkge1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2Rlcy5pdGVtKGkpLCBlbGVtZW50KTtcbiAgfVxuICBlbGVtZW50LnJlbW92ZSgpO1xufVxuXG5mdW5jdGlvbiB3YXNoRWxlbWVudChlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbiB7XG4gIGNvbnN0IHBvbGljeSA9IGVsZW1lbnQudGFnTmFtZSAmJiBIVE1MX1dBU0hfUE9MSUNZW2VsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgaWYgKCFwb2xpY3kpIHtcbiAgICBjb25zb2xlLndhcm4oXCJXeXNpd3lnOiBub3QgYWxsb3dlZCB0YWdcIiwgZWxlbWVudC50YWdOYW1lKTtcbiAgICB3YXNoQ2hpbGROb2RlcyhlbGVtZW50KTtcbiAgICByZW1vdmVNaWRkbGVFbGVtZW50KGVsZW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICBmb3IgKGxldCBpPTA7IGk8ZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgYXR0ciA9IGVsZW1lbnQuYXR0cmlidXRlcy5pdGVtKGkpO1xuICAgIGNvbnN0IGFsbG93ZWQgPSBhdHRyLm5hbWUgJiYgISFwb2xpY3lbYXR0ci5uYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgIGlmICghYWxsb3dlZCkge1xuICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS53YXJuKFwiV3lzaXd5Zzogbm90IGFsbG93ZWQgYXR0cmlidXRlXCIsIGF0dHIubmFtZSwgXCJUYWc6IFwiLCBlbGVtZW50LnRhZ05hbWUpO1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZTogTm9kZSkgOiBub2RlIGlzIEVsZW1lbnQge1xuICByZXR1cm4gISEobm9kZSBhcyBFbGVtZW50KS50YWdOYW1lO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGV4ZWMgZnJvbSAnLi9leGVjJztcbmltcG9ydCB7d2FzaEh0bWx9IGZyb20gJy4vd2FzaC1odG1sJztcbmltcG9ydCBpbWFnZUVkaXRBY3Rpb25zIGZyb20gJy4vaW1hZ2UtZWRpdC1hY3Rpb25zJztcbmltcG9ydCBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uIHtcbiAgbmFtZT86IHN0cmluZztcbiAgaWNvbjogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBwcm9tcHRNc2c/OiBzdHJpbmc7XG4gIHJlc3VsdDogKGV2OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50PiwgY29tcG9uZW50OiBXeXNpd3lnKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGh0bWw6IHN0cmluZztcbiAgb25DaGFuZ2U/OiAoaHRtbDogc3RyaW5nKSA9PiB2b2lkO1xuICByZXBvcnROdW1DaGFycz86IChudW1DaGFyczogbnVtYmVyKSA9PiB2b2lkO1xuICBtYXhDaGFycz86IG51bWJlcjtcbiAgZGVmYXVsdEFjdGlvbnM/OiB7W25hbWU6IHN0cmluZ106IEFjdGlvbn07XG4gIGFjdGlvbnM/OiAoUGFydGlhbDxBY3Rpb24+IHwgc3RyaW5nKVtdO1xuICByZWFkT25seT86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGZvY3VzUmVjdDogQ2xpZW50UmVjdCB8IG51bGw7XG59XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gIGFjdGlvbmJhcjogJ3d5c2l3eWctYWN0aW9uYmFyJyxcbiAgYnV0dG9uOiAnd3lzaXd5Zy1idXR0b24nLFxuICBjb250ZW50OiAnd3lzaXd5Zy1jb250ZW50JyxcbiAgZm9jdXNyZWN0OiAnd3lzaXd5Zy1mb2N1c3JlY3QnLFxuICBmb2N1c3BvaW50OiAnd3lzaXd5Zy1mb2N1c3BvaW50JyxcbiAgcmVhZG9ubHlDb250ZW50OiAnd3lzaXd5Zy1jb250ZW50IHJlYWRvbmx5J1xufVxuXG5leHBvcnQgY2xhc3MgV3lzaXd5ZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb250ZW50RGl2OiBIVE1MRGl2RWxlbWVudDtcbiAgZm9jdXNSZWN0RGl2OiBIVE1MRGl2RWxlbWVudDtcbiAgZm9jdXNFbGVtOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gIGNvcm5lcjogc3RyaW5nO1xuICByZXNpemVTdGFydFg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7Zm9jdXNSZWN0OiBudWxsfTtcbiAgICB0aGlzLm9uRm9jdXMgPSB0aGlzLm9uRm9jdXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQmx1ciA9IHRoaXMub25CbHVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1vdXNlRG93biA9IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VNb3ZlID0gdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZVVwID0gdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5yZWFkT25seSkge1xuICAgICAgQXJyYXkuZnJvbSh0aGlzLmNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbChcImltZyxhXCIpKS5tYXAoZWxlbSA9PiAoZWxlbSBhcyAoSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50KSkpXG4gICAgICAuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgZWxlbS50YWJJbmRleCA9IDE7XG4gICAgICAgIGVsZW0ub25mb2N1cyA9IHRoaXMub25Gb2N1cztcbiAgICAgICAgZWxlbS5vbmJsdXIgPSB0aGlzLm9uQmx1ciBhcyBhbnk7XG4gICAgICB9KTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3lzaXd5Zy1jb250ZW50XCIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5yZXBvcnROdW1DaGFycykge1xuICAgICAgdGhpcy5wcm9wcy5yZXBvcnROdW1DaGFycygodGhpcy5jb250ZW50RGl2ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQgJiYgdGhpcy5jb250ZW50RGl2LmlubmVyVGV4dC5sZW5ndGgpIHx8IDApO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICBBcnJheS5mcm9tKHRoaXMuY29udGVudERpdi5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nLGFcIikpLm1hcChlbGVtID0+IChlbGVtIGFzIChIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTEFuY2hvckVsZW1lbnQpKSlcbiAgICAuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgIGVsZW0udGFiSW5kZXggPSAxO1xuICAgICAgZWxlbS5vbmZvY3VzID0gdGhpcy5vbkZvY3VzO1xuICAgICAgZWxlbS5vbmJsdXIgPSB0aGlzLm9uQmx1ciBhcyBhbnk7XG4gICAgfSk7XG4gICAgaWYgKHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnMpIHtcbiAgICAgIHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnMoKHRoaXMuY29udGVudERpdiAmJiB0aGlzLmNvbnRlbnREaXYuaW5uZXJUZXh0ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQubGVuZ3RoKSB8fCAwKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wczogUHJvcHMsIG5leHRTdGF0ZTogU3RhdGUpIHtcbiAgICAvL3RoaXMuY29udGVudERpdi5vbmZvY3VzID0gdGhpcy5vbkZvY3VzO1xuICAgIC8vdGhpcy5jb250ZW50RGl2Lm9uYmx1ciA9IHRoaXMub25CbHVyO1xuICAgIHJldHVybiAhdGhpcy5jb250ZW50RGl2IHx8XG4gICAgICBuZXh0U3RhdGUgIT0gdGhpcy5zdGF0ZSB8fFxuICAgICAgbmV4dFByb3BzLnJlYWRPbmx5ICE9PSB0aGlzLnByb3BzLnJlYWRPbmx5IHx8XG4gICAgICB3YXNoSHRtbChuZXh0UHJvcHMuaHRtbCkgIT09IHdhc2hIdG1sKHRoaXMuY29udGVudERpdi5pbm5lckhUTUwpO1xuICB9XG5cbiAgdHJpZ2dlck9uQ2hhbmdlKGh0bWw6IHN0cmluZykge1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiYgdGhpcy5wcm9wcy5vbkNoYW5nZSh3YXNoSHRtbChodG1sKSk7XG4gIH1cblxuICBvbkZvY3VzKGV2OiBGb2N1c0V2ZW50KSB7XG4gICAgY29uc3QgZWxlbSA9IGV2LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAoIWVsZW0gfHwgIWVsZW0udGFnTmFtZSkgcmV0dXJuO1xuICAgIGlmIChlbGVtLnRhZ05hbWUgIT09ICdJTUcnICYmIGVsZW0udGFnTmFtZSAhPT0gJ0EnKSByZXR1cm47XG4gICAgY29uc3QgY29udGVudFBhcmVudCA9IHRoaXMuY29udGVudERpdi5wYXJlbnRFbGVtZW50O1xuICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgZm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdChjb250ZW50UGFyZW50LCBlbGVtKSxcbiAgICB9XG4gICAgc3dpdGNoIChlbGVtLnRhZ05hbWUpIHtcbiAgICAgIGNhc2UgJ0EnOlxuICAgICAgY2FzZSAnSU1HJzpcblxuICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICAgIHRoaXMuZm9jdXNFbGVtID0gZWxlbTtcbiAgfVxuXG4gIG9uQmx1cihldjogUmVhY3QuRm9jdXNFdmVudDxIVE1MRGl2RWxlbWVudD4pIHtcbiAgICAvKmlmIChldi5yZWxhdGVkVGFyZ2V0KSB7XG4gICAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0gZXYucmVsYXRlZFRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGlmIChyZWxhdGVkVGFyZ2V0LmNsYXNzTmFtZSAmJiByZWxhdGVkVGFyZ2V0LmNsYXNzTmFtZS5zcGxpdCgnICcpLmluZGV4T2YoY2xhc3Nlcy5idXR0b24pID49IDApIHtcbiAgICAgICAgLy8gQSBpbWFnZSBhY3Rpb24gYnV0dG9uIHdhcyBwcmVzc2VkXG4gICAgICAgIHNldFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSovXG4gICAgaWYgKChldi50YXJnZXQgPT09IHRoaXMuZm9jdXNFbGVtICYmIGV2LnJlbGF0ZWRUYXJnZXQgIT09IHRoaXMuZm9jdXNSZWN0RGl2KSB8fFxuICAgICAgZXYudGFyZ2V0ID09PSB0aGlzLmZvY3VzUmVjdERpdilcbiAgICB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtmb2N1c1JlY3Q6IG51bGx9KTtcbiAgICB9XG4gIH1cblxuICBtYWtlQ2xpY2thYmxlKGVsZW06IEhUTUxFbGVtZW50KSB7XG4gICAgIGVsZW0udGFiSW5kZXggPSAxO1xuICB9XG5cbiAgb25Nb3VzZURvd24oZXYpIHtcbiAgICBpZiAoKGV2LnRhcmdldC5jbGFzc05hbWUgfHwgXCJcIikuc3BsaXQoJyAnKS5pbmRleE9mKGNsYXNzZXMuZm9jdXNwb2ludCkgPj0gMCkge1xuICAgICAgY29uc3QgY29ybmVyID0gdGhpcy5nZXRSZWN0Q29ybmVyKGV2KTtcbiAgICAgIHRoaXMuY29ybmVyID0gY29ybmVyO1xuICAgICAgdGhpcy5yZXNpemVTdGFydFggPSBldi5jbGllbnRYO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY29ybmVyICYmIHRoaXMuc3RhdGUuZm9jdXNSZWN0ICYmIHRoaXMuZm9jdXNFbGVtKSB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gVE9ETzogUsOka25hIHV0IGJhc2VyYXQgcMOlIHRoaXMuY29ybmVyIGh1ciBiaWxkZW5zIHN0b3JsZWsgYm9yZGUgw6RuZHJhcy5cbiAgICAgIC8vIExldGEgdXBwIGJpbGRlbiBwZXIgSUQgZnLDpW4gdGhpcy5jb250ZW50RGl2XG4gICAgICAvLyBTw6R0dCBESVY6ZW5zIHN0eWxlIGF0dHJpYnV0IHdpZHRoIHRpbGwgbnkgd2lkdGguXG4gICAgICAvLyBPbSBESVY6ZW4gcmVkYW4gaGFkZSBoZWlnaHQsIHPDpHR0IG55IGhlaWdodCBtZWQgc2FtbWEgYXNwZWN0IHJhdGlvIHNvbSBpbm5hbixcbiAgICAgIC8vIGFubmFycywgc8OkdHQgaW50ZSBoZWlnaHQgYWxscyAoZWxsZXIgbcO2amxpZ3R2aXMgdGlsbCBhdXRvKSlcbiAgICAgIGNvbnN0IGZvY3VzUmVjdCA9IHRoaXMuZm9jdXNSZWN0RGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKGZvY3VzUmVjdC53aWR0aCA8IDMyKSByZXR1cm47XG4gICAgICAvL2NvbnN0IGN1cnJlbnRXaWR0aCA9IGZvY3VzUmVjdC53aWR0aDtcbiAgICAgIC8vY29uc3QgY3VycmVudEhlaWdodCA9IGZvY3VzUmVjdC5oZWlnaHQ7XG4gICAgICAvL2NvbnN0IGhhc0hlaWdodFN0eWxlID0gIXRoaXMuZm9jdXNFbGVtLnN0eWxlLmhlaWdodCB8fCB0aGlzLmZvY3VzRWxlbS5zdHlsZS5oZWlnaHQgPT09IFwiYXV0b1wiO1xuICAgICAgY29uc3QgbmV3V2lkdGggPSBNYXRoLm1heCgzMiwgdGhpcy5jb3JuZXIuZW5kc1dpdGgoJ2wnKSA/XG4gICAgICAgIGZvY3VzUmVjdC53aWR0aCArICh0aGlzLnJlc2l6ZVN0YXJ0WCAtIGV2LmNsaWVudFgpIDpcbiAgICAgICAgLy9mb2N1c1JlY3QucmlnaHQgLSBldi5jbGllbnRYIDpcbiAgICAgICAgZm9jdXNSZWN0LndpZHRoIC0gKHRoaXMucmVzaXplU3RhcnRYIC0gZXYuY2xpZW50WCkpO1xuICAgICAgdGhpcy5yZXNpemVTdGFydFggPSBldi5jbGllbnRYO1xuICAgICAgICAvL2V2LmNsaWVudFggLSBmb2N1c1JlY3QubGVmdDtcbiAgICAgIGNvbnN0IGZhY3RvciA9IG5ld1dpZHRoIC8gZm9jdXNSZWN0LndpZHRoO1xuICAgICAgY29uc3QgbmV3SGVpZ2h0ID0gZm9jdXNSZWN0LmhlaWdodCAqIGZhY3RvcjtcbiAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyBcInB4XCI7XG4gICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS5oZWlnaHQgPSBuZXdIZWlnaHQgKyBcInB4XCI7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCh0aGlzLmNvbnRlbnREaXYucGFyZW50RWxlbWVudCwgdGhpcy5mb2N1c0VsZW0pLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgb25Nb3VzZVVwKGV2KSB7XG4gICAgaWYgKHRoaXMuY29ybmVyICYmIHRoaXMuc3RhdGUuZm9jdXNSZWN0ICYmIHRoaXMuZm9jdXNFbGVtKSB7XG4gICAgICB0aGlzLmNvcm5lciA9IG51bGw7XG4gICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZSh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcbiAgICB9XG4gIH1cblxuICBnZXRSZWN0Q29ybmVyKGV2KSB7XG4gICAgZm9yIChjb25zdCBjbGFzc05hbWUgb2YgKGV2LnRhcmdldC5jbGFzc05hbWUgfHwgJycpLnNwbGl0KCcgJykpIHtcbiAgICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAgIGNhc2UgJ2ZwdWwnOlxuICAgICAgICAgIHJldHVybiAndWwnO1xuICAgICAgICBjYXNlICdmcHVyJzpcbiAgICAgICAgICByZXR1cm4gJ2ZwdXInO1xuICAgICAgICBjYXNlICdmcGxyJzpcbiAgICAgICAgICByZXR1cm4gJ2xyJztcbiAgICAgICAgY2FzZSAnZnBsbCc6XG4gICAgICAgICAgcmV0dXJuICdsbCc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZXhlY0ltYWdlRWRpdEFjdGlvbiAoY21kOiBzdHJpbmcpIHtcbiAgICAvL2NvbnNvbGUubG9nKGNtZCk7XG4gICAgaWYgKCF0aGlzLmZvY3VzRWxlbSkgcmV0dXJuO1xuICAgIC8vY29uc29sZS5sb2coXCJkb2luZyBpdFwiKTtcbiAgICBzd2l0Y2ggKGNtZCkge1xuICAgICAgY2FzZSAnZmxvYXQtbGVmdCc6XG4gICAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLmNzc0Zsb2F0ID0gJ2xlZnQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Zsb2F0LXJpZ2h0JzpcbiAgICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuY3NzRmxvYXQgPSAncmlnaHQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3VuZmxvYXQnOlxuICAgICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS5jc3NGbG9hdCA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdGhpcy50cmlnZ2VyT25DaGFuZ2UodGhpcy5jb250ZW50RGl2LmlubmVySFRNTCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7Zm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCh0aGlzLmNvbnRlbnREaXYucGFyZW50RWxlbWVudCwgdGhpcy5mb2N1c0VsZW0pfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgZGVmYXVsdEFjdGlvbnMgPSB0aGlzLnByb3BzLmRlZmF1bHRBY3Rpb25zIHx8IGFjdGlvbnM7XG4gICAgbGV0IGFjdGlvbnNUb1VzZSA9IHRoaXMucHJvcHMuYWN0aW9ucyA/IHRoaXMucHJvcHMuYWN0aW9ucy5tYXAoYWN0aW9uID0+XG4gICAgICB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyA/XG4gICAgICAgIGRlZmF1bHRBY3Rpb25zW2FjdGlvbl0gOlxuICAgICAgICBkZWZhdWx0QWN0aW9uc1thY3Rpb24ubmFtZV0gP1xuICAgICAgICAgIHsgLi4uZGVmYXVsdEFjdGlvbnNbYWN0aW9uLm5hbWVdLCAuLi5hY3Rpb24gfSA6XG4gICAgICAgICAgYWN0aW9uKVxuICAgIDogT2JqZWN0LmtleXMoZGVmYXVsdEFjdGlvbnMpLm1hcChhY3Rpb24gPT4gZGVmYXVsdEFjdGlvbnNbYWN0aW9uXSk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5mb2N1c1JlY3QpIHtcbiAgICAgIGFjdGlvbnNUb1VzZSA9IGFjdGlvbnNUb1VzZS5jb25jYXQoaW1hZ2VFZGl0QWN0aW9ucyhjbWQgPT4gdGhpcy5leGVjSW1hZ2VFZGl0QWN0aW9uKGNtZCkpKTtcbiAgICB9XG5cbiAgICBjb25zdCB7Zm9jdXNSZWN0fSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge3JlYWRPbmx5LCByZXBvcnROdW1DaGFycywgbWF4Q2hhcnN9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9PlxuICAgICAgeyFyZWFkT25seSAmJiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5hY3Rpb25iYXJ9PlxuICAgICAgICB7YWN0aW9uc1RvVXNlLm1hcCgoYWN0aW9uLCBpZHgpID0+XG4gICAgICAgICAgPGJ1dHRvbiBrZXk9e2lkeH0gY2xhc3NOYW1lPXtjbGFzc2VzLmJ1dHRvbn1cbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBhY3Rpb24uaWNvbn19XG4gICAgICAgICAgICB0aXRsZT17YWN0aW9uLnRpdGxlfVxuICAgICAgICAgICAgb25Nb3VzZURvd249e2V2PT57YWN0aW9uLnJlc3VsdChldiwgdGhpcyl9fVxuICAgICAgICAgICAgb25Nb3VzZVVwPXtldj0+c2V0VGltZW91dCgoKT0+dGhpcy5jb250ZW50RGl2LmZvY3VzKCksIDEwKX1cbiAgICAgICAgICAvPil9XG4gICAgICA8L2Rpdj59XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17cmVhZE9ubHkgPyBjbGFzc2VzLnJlYWRvbmx5Q29udGVudCA6IGNsYXNzZXMuY29udGVudH0gc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJywgdG9wOiAwLCBsZWZ0OiAwfX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yXCJcbiAgICAgICAgICByZWY9e2RpdiA9PiB0aGlzLmNvbnRlbnREaXYgPSBkaXZ9XG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHdhc2hIdG1sKHRoaXMucHJvcHMuaHRtbCl9fVxuICAgICAgICAgIGNvbnRlbnRFZGl0YWJsZT17IXJlYWRPbmx5fVxuICAgICAgICAgIG9uUGFzdGU9e2V2ID0+IHtcbiAgICAgICAgICAgIGlmICghaXNOYU4obWF4Q2hhcnMpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHt0YXJnZXQsIGN1cnJlbnRUYXJnZXR9ID0gZXY7XG4gICAgICAgICAgICAgIC8vY29uc3QgdGV4dEJlaW5nT3ZlcndyaXR0ZW4gPSAodGFyZ2V0IGFzIGFueSkuaW5uZXJUZXh0IHx8IFwiXCI7XG4gICAgICAgICAgICAgIGNvbnN0IGVkaXRvclRleHQgPSAoY3VycmVudFRhcmdldCAmJiBjdXJyZW50VGFyZ2V0LmlubmVyVGV4dCkgfHwgXCJcIjtcbiAgICAgICAgICAgICAgY29uc3QgdGV4dEJlaW5nUGFzdGVkID0gZXYuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwidGV4dC9wbGFpblwiKSB8fCBcIlwiO1xuICAgICAgICAgICAgICBpZiAoZWRpdG9yVGV4dC5sZW5ndGggKyB0ZXh0QmVpbmdQYXN0ZWQubGVuZ3RoID4gbWF4Q2hhcnMpIHtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBvbktleVVwPXtyZXBvcnROdW1DaGFycyA/IGV2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtpbm5lclRleHR9ID0gKGV2LnRhcmdldCBhcyBhbnkpO1xuICAgICAgICAgICAgcmVwb3J0TnVtQ2hhcnMoaW5uZXJUZXh0ID8gaW5uZXJUZXh0Lmxlbmd0aCA6IDApO1xuICAgICAgICAgIH0gOiBudWxsfVxuICAgICAgICAgIG9uS2V5UHJlc3M9eyFpc05hTihtYXhDaGFycykgPyBldiA9PiB7XG4gICAgICAgICAgICBjb25zdCB7aW5uZXJUZXh0fSA9IChldi50YXJnZXQgYXMgYW55KTtcbiAgICAgICAgICAgIGlmIChpbm5lclRleHQgJiYgaW5uZXJUZXh0Lmxlbmd0aCA+PSBtYXhDaGFycykge1xuICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gOiBudWxsfVxuICAgICAgICAgIG9uSW5wdXQ9e2V2ID0+IHRoaXMudHJpZ2dlck9uQ2hhbmdlKChldi50YXJnZXQgYXMgYW55KS5pbm5lckhUTUwpfVxuICAgICAgICAgIG9uS2V5RG93bj17ZXYgPT4ge1xuICAgICAgICAgICAgaWYgKHJlYWRPbmx5KSByZXR1cm47XG4gICAgICAgICAgICBpZiAocmVwb3J0TnVtQ2hhcnMgJiYgZXYuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgICByZXBvcnROdW1DaGFycygoZXYuY3VycmVudFRhcmdldC5pbm5lclRleHQgfHwgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIktleTogXCIgKyBldi53aGljaCk7XG4gICAgICAgICAgICBpZiAoZXYud2hpY2ggPj0gMzUgJiYgZXYud2hpY2ggPD0gNDApIHsvLyBob21lL2VuZC91cC9kb3duL2xlZnQvcmlnaHRcbiAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFByZXZlbnQgZW50aXJlIHBhZ2UgZnJvbSBzY3JvbGxpbmc/P1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2LndoaWNoID09PSA5KSB7XG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7Ly8gVEFCXG4gICAgICAgICAgICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIGV4ZWMoXCJvdXRkZW50XCIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4ZWMoXCJpbmRlbnRcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoZXYua2V5Q29kZSA9PT0gOCB8fCBldi5rZXlDb2RlID09PSA0NikgJiYgLy8gRGVsZXRlIG9yIEJhY2sgYnV0dG9uc1xuICAgICAgICAgICAgICB0aGlzLmZvY3VzRWxlbSAmJiB0aGlzLnN0YXRlLmZvY3VzUmVjdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNFbGVtICYmIHRoaXMuZm9jdXNFbGVtLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzRWxlbS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZm9jdXNFbGVtKTsgLy8gUmVtb3ZlIG1hcmtlZCBpbWFnZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtID0gbnVsbDtcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Zm9jdXNSZWN0OiBudWxsfSk7XG4gICAgICAgICAgICAgIHRoaXMudHJpZ2dlck9uQ2hhbmdlKHRoaXMuY29udGVudERpdi5pbm5lckhUTUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIHtmb2N1c1JlY3QgJiYgPGRpdlxuICAgICAgICAgIHJlZj17ZGl2ID0+IHRoaXMuZm9jdXNSZWN0RGl2ID0gZGl2fVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3JlY3R9XG4gICAgICAgICAgb25CbHVyPXt0aGlzLm9uQmx1cn1cbiAgICAgICAgICB0YWJJbmRleD17MX1cbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgb3V0bGluZTogMCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOiB0aGlzLnN0YXRlLmZvY3VzUmVjdC50b3AsXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLnN0YXRlLmZvY3VzUmVjdC5sZWZ0LFxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuc3RhdGUuZm9jdXNSZWN0LndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnN0YXRlLmZvY3VzUmVjdC5oZWlnaHR9fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnB1bFwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIHRvcDowLCBsZWZ0OjB9fSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcHVyXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgdG9wOjAsIHJpZ2h0OjB9fSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcGxyXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgYm90dG9tOjAsIHJpZ2h0OjB9fSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcGxsXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgYm90dG9tOjAsIGxlZnQ6MH19IC8+XG4gICAgICAgIDwvZGl2Pn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlbGF0YXRpdmVDbGllbnRSZWN0IChwYXJlbnQ6IEhUTUxFbGVtZW50LCBjaGlsZDogSFRNTEVsZW1lbnQpIDogQ2xpZW50UmVjdCB7XG4gIGNvbnN0IHBhcmVudFJlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGNoaWxkUmVjdCA9IGNoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHRvcDogY2hpbGRSZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wICsgcGFyZW50LnNjcm9sbFRvcCxcbiAgICBsZWZ0OiBjaGlsZFJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCArIHBhcmVudC5zY3JvbGxMZWZ0LFxuICAgIGJvdHRvbTogY2hpbGRSZWN0LmJvdHRvbSAtIHBhcmVudFJlY3QudG9wICsgcGFyZW50LnNjcm9sbFRvcCxcbiAgICByaWdodDogY2hpbGRSZWN0LnJpZ2h0IC0gcGFyZW50UmVjdC5sZWZ0ICsgcGFyZW50LnNjcm9sbExlZnQsXG4gICAgd2lkdGg6IGNoaWxkUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkUmVjdC5oZWlnaHRcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGltYWdlRWRpdEFjdGlvbnMoY2IpIHtcbiAgcmV0dXJuIFt7XG4gICAgbmFtZTogJ2Zsb2F0LWxlZnQnLFxuICAgIGljb246IGA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmVcIj5cbiAgICAgIDxpIGNsYXNzPVwiZmEgZmEtYWxpZ24tcmlnaHRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7IGxlZnQ6LTRweDt0b3A6MDsgdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IHRvcFwiPlxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBpY3R1cmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmAsXG4gICAgdGl0bGU6ICdMw6V0IGJpbGRlbiBmbHl0YSB2w6Ruc3RlciBvbSB0ZXh0JyxcbiAgICByZXN1bHQ6ICgpID0+IGNiKCdmbG9hdC1sZWZ0JylcbiAgfSwge1xuICAgIG5hbWU6ICdmbG9hdC1yaWdodCcsXG4gICAgaWNvbjogYDxkaXYgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZVwiPlxuICAgICAgPGkgY2xhc3M9XCJmYSBmYS1hbGlnbi1sZWZ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlOyByaWdodDotNHB4O3RvcDowOyB0cmFuc2Zvcm06IHNjYWxlKDAuNSk7IHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IHRvcFwiPlxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBpY3R1cmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmAsXG4gICAgdGl0bGU6ICdMw6V0IGJpbGRlbiBmbHl0YSBow7ZnZXIgb20gdGV4dCcsXG4gICAgcmVzdWx0OiAoKSA9PiBjYignZmxvYXQtcmlnaHQnKVxuICB9LCB7XG4gICAgbmFtZTogJ3VuZmxvYXQnLFxuICAgIGljb246IGA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowXCI+JiM4MjU0OzwvZGl2PlxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowOmxlZnQ6MDt0cmFuc2Zvcm06IHNjYWxlKDAuNSk7IHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tXCI+XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowXCI+XzwvZGl2PlxuICAgIDwvZGl2PmAsXG4gICAgdGl0bGU6ICdQbGFjZXJhIGJpbGRlbiBww6UgZWdlbiByYWQnLFxuICAgIHJlc3VsdDogKCkgPT4gY2IoJ3VuZmxvYXQnKVxuICB9XTtcbn1cblxuIiwiaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZyB9IGZyb20gJy4uL3V0aWxzL3F1ZXJ5LXN0cmluZyc7XG5pbXBvcnQgRmVhdHVyZURlc2NyaXB0aW9ucyBmcm9tICcuL2ZlYXR1cmUtZmxhZ3MuanNvbic7XG5pbXBvcnQgeyBjZmcgfSBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuXG50eXBlIEZlYXR1cmVGbGFncyA9IHtyZWFkb25seSBbUCBpbiBrZXlvZiB0eXBlb2YgRmVhdHVyZURlc2NyaXB0aW9uc106IGJvb2xlYW59O1xuXG5leHBvcnQgaW50ZXJmYWNlIEZlYXR1cmVzIGV4dGVuZHMgRmVhdHVyZUZsYWdzIHt9XG5cbmV4cG9ydCBjbGFzcyBGZWF0dXJlcyB7XG4gIHByaXZhdGUgX2ZlYXR1cmVzOiBGZWF0dXJlRmxhZ3M7XG4gIHByaXZhdGUgX2luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgaW5pdCgpIHtcbiAgICBpZiAodGhpcy5faW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBsZXQgdHVybmVkT25GZWF0dXJlcyA9IChjZmcuS0VEX0ZFQVRVUkVTIHx8IFwiXCIpLnNwbGl0KCcsJykubWFwKG5hbWUgPT4gbmFtZS50cmltKCkudG9Mb3dlckNhc2UoKSk7XG4gICAgY29uc3QgcXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCwge3RvTG93ZXI6IHRydWV9KTtcblxuICAgIGlmIChxdWVyeS50ZXN0dmVyc2lvbikge1xuICAgICAgdHVybmVkT25GZWF0dXJlcyA9IFtcIipcIl07XG4gICAgfVxuICAgIGlmIChxdWVyeS5mZWF0dXJlcykge1xuICAgICAgdHVybmVkT25GZWF0dXJlcyA9IHF1ZXJ5LmZlYXR1cmVzXG4gICAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAgIC5tYXAoZmVhdHVyZSA9PiBmZWF0dXJlLnRyaW0oKS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG4gICAgY29uc3QgdHVybk9uQWxsID0gdHVybmVkT25GZWF0dXJlcy5pbmNsdWRlcygnKicpO1xuICAgIHRoaXMuX2ZlYXR1cmVzID0ge30gYXMgRmVhdHVyZUZsYWdzO1xuICAgIGZvciAoY29uc3QgZmVhdHVyZU5hbWUgb2YgT2JqZWN0LmtleXMoRmVhdHVyZURlc2NyaXB0aW9ucykpIHtcbiAgICAgIHRoaXMuX2ZlYXR1cmVzW2ZlYXR1cmVOYW1lXSA9IHR1cm5PbkFsbCB8fFxuICAgICAgICB0dXJuZWRPbkZlYXR1cmVzLmluY2x1ZGVzKGZlYXR1cmVOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgfVxuICAgIHRoaXMuX2luaXRpYWxpemVkID0gdHJ1ZTsgICAgXG4gIH1cblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgZm9yIChjb25zdCBmZWF0dXJlTmFtZSBvZiBPYmplY3Qua2V5cyhGZWF0dXJlRGVzY3JpcHRpb25zKSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIGZlYXR1cmVOYW1lLCB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX2luaXRpYWxpemVkKSB0aGlzLmluaXQoKTtcbiAgICAgICAgICByZXR1cm4gdGhpcy5fZmVhdHVyZXNbZmVhdHVyZU5hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZlYXR1cmUgZmxhZ3MgY2Fubm90IGJlIHNldCBoZXJlJyk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBmZWF0dXJlcyA9IG5ldyBGZWF0dXJlcygpO1xuIiwiaW1wb3J0IHtJbnRsUHJvdmlkZXIsIGFkZExvY2FsZURhdGF9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IGxvY2FsZV9lbiBmcm9tICdyZWFjdC1pbnRsL2xvY2FsZS1kYXRhL2VuJztcbmltcG9ydCBsb2NhbGVfc3YgZnJvbSAncmVhY3QtaW50bC9sb2NhbGUtZGF0YS9zdic7XG5pbXBvcnQgbWVzc2FnZXNfc3YgZnJvbSBcIi4uLy4uL3RyYW5zbGF0aW9ucy9zdi5qc29uXCI7XG5pbXBvcnQgbWVzc2FnZXNfZW4gZnJvbSBcIi4uLy4uL3RyYW5zbGF0aW9ucy9lbi5qc29uXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2ZnIGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmV4cG9ydCBjb25zdCBzZXR1cEludGwgPSA8UCBleHRlbmRzIG9iamVjdD4oQ29tcG9uZW50OiBSZWFjdC5Db21wb25lbnRUeXBlPFA+KSA9PlxuICAgIGNsYXNzIF9TZXR1cExhbmd1YWdlSW50bCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQPntcbiAgICAgICAgbWVzc2FnZXMgOiBvYmplY3Q7XG5cbiAgICAgICAgY29uc3RydWN0b3IocHJvcHMpe1xuICAgICAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgICAgYWRkTG9jYWxlRGF0YShbLi4ubG9jYWxlX2VuLC4uLmxvY2FsZV9zdl0pO1xuICAgICAgICAgICAgdGhpcy5tZXNzYWdlcyA9IHtcbiAgICAgICAgICAgICdzdic6IG1lc3NhZ2VzX3N2LFxuICAgICAgICAgICAgJ2VuJzogbWVzc2FnZXNfZW5cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtb21lbnQoKS5sb2NhbGUoY2ZnLktFRF9MT0NBTEUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyKCl7XG4gICAgICAgICAgICByZXR1cm4gPEludGxQcm92aWRlciBsb2NhbGU9e2NmZy5LRURfTE9DQUxFfSBtZXNzYWdlcz17dGhpcy5tZXNzYWdlc1tjZmcuS0VEX0xPQ0FMRV19PlxuICAgICAgICAgICAgICAgIDxDb21wb25lbnQgey4uLnRoaXMucHJvcHMgYXMgUH0gLz5cbiAgICAgICAgICAgIDwvSW50bFByb3ZpZGVyPlxuICAgICAgICB9XG4gICAgfSIsImltcG9ydCB7IFVzZXJUYXNrIH0gZnJvbSBcImtlZGJhY2tlbmQvbW9kZWxzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXNrVHlwZSAodXNlclRhc2s6IFVzZXJUYXNrKSA6ICdjb3Vyc2VCdWlsZGVyVGFzaycgfCAnc2l0ZVZpc2lvblRhc2snIHwgJ3N1YmplY3RQbGFubmVyVGFzaycgfCAnY3VzdG9tVGFzaycge1xuICByZXR1cm4gdXNlclRhc2suY291cnNlICYmIHVzZXJUYXNrLnRhc2sgJiYgdXNlclRhc2suY291cnNlLmxlbmd0aCA+IDAgJiYgdXNlclRhc2sudGFzay5sZW5ndGggPiAwID9cbiAgICAnY291cnNlQnVpbGRlclRhc2snIDpcbiAgICB1c2VyVGFzay5zaXRlVmlzaW9uUGFnZUlkID9cbiAgICAgICdzaXRlVmlzaW9uVGFzaycgOlxuICAgICAgICB1c2VyVGFzay5jb3Vyc2VJbmZvID9cbiAgICAgICAgICAnc3ViamVjdFBsYW5uZXJUYXNrJyA6XG4gICAgICAgICAgJ2N1c3RvbVRhc2snO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVXNlclRhc2ssIFRhc2ssIFVzZXJTdWJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSB9IGZyb20gJy4uLy4uL2FjY2Vzcy1jb250cm9sJztcbmltcG9ydCB7IGNvdXJzZU5hbWVUb0Nzc0NsYXNzIH0gZnJvbSAnLi4vY2FsZW5kYXIvY291cnNlLW5hbWUtdG8tY3NzLWNsYXNzJztcbmltcG9ydCB7IGdldFRhc2tUeXBlIH0gZnJvbSAnLi9nZXQtdGFzay10eXBlJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IFZpcnR1YWxMZWFybmluZ0dvYWwgfSBmcm9tICcuL3JlZmluZXInO1xuaW1wb3J0IHsgRmVhdHVyZXMgfSBmcm9tICcuLi8uLi9mZWF0dXJlcyc7XG5pbXBvcnQgY2ZnIGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJUYXNrc0JveFByb3BzIHtcbiAgY291cnNlTmFtZTogc3RyaW5nO1xuICBsZWFybmluZ0dvYWxzOiBWaXJ0dWFsTGVhcm5pbmdHb2FsW10sXG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcbiAgb3BlbkNvdXJzZXM/OiB7IFtwYXRoOiBzdHJpbmddOiBib29sZWFuIH07XG4gIHNldElzT3Blbj86IChjb3Vyc2VOYW1lOiBzdHJpbmcsIGlzT3BlbjogYm9vbGVhbikgPT4gdm9pZDtcbiAgc2V0VGFza0RvbmU/OiAodGFzazogVXNlclRhc2ssIGRvbmU6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIHNldFN1YlRhc2tEb25lOiAodGFzazogVXNlclRhc2ssIHN1YlRhc2s6IFVzZXJTdWJUYXNrLCBkb25lOiBib29sZWFuKSA9PiB2b2lkO1xuICBhZGRPd25UYXNrPzogKGNvdXJzZU5hbWU6IHN0cmluZywgbGVhcm5pbmdHb2FsTmFtZTogc3RyaW5nKSA9PiB2b2lkO1xuICBlZGl0VGFzazogKHRhc2s6IFVzZXJUYXNrKSA9PiB2b2lkO1xuICBlZGl0U3ViVGFzazogKHRhc2s6IFVzZXJUYXNrLCBzdWJUYXNrOiBVc2VyU3ViVGFzaykgPT4gdm9pZDtcbiAgcmVtb3ZlTGVhcm5pbmdHb2FsOiAobGc6IFZpcnR1YWxMZWFybmluZ0dvYWwpPT52b2lkO1xuICBkaXNwbGF5UHJvZ3Jlc3M6IGJvb2xlYW47XG4gIHByb2dyZXNzRGF0YToge2NvbXBsZXRlZE51bWJlck9mVGFza3M6IG51bWJlciwgbnVtYmVyT2ZUYXNrczogbnVtYmVyfTtcbn07XG5cbmV4cG9ydCBjbGFzcyBVc2VyVGFza3NCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8VXNlclRhc2tzQm94UHJvcHM+IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xuICBjb25zdHJ1Y3Rvcihwcm9wczogVXNlclRhc2tzQm94UHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBjb3Vyc2VOYW1lLFxuICAgICAgbGVhcm5pbmdHb2FscywgXG4gICAgICBwcm9ncmVzc0RhdGEsXG4gICAgICBkaXNwbGF5UHJvZ3Jlc3NcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBpc09wZW4gPSAhIXRoaXMucHJvcHMub3BlbkNvdXJzZXNbY291cnNlTmFtZV07XG4gICAgY29uc3QgZmVhdHVyZXMgPSBuZXcgRmVhdHVyZXMoKTtcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gPE9wZW5DbG9zZUJveFxuICB0aXRsZT17PGg1Pntjb3Vyc2VOYW1lIHx8IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidXNlclRhc2tzLmdvYWxzXCIgIGRlZmF1bHRNZXNzYWdlPVwiRWduYSBsw6RyYW5kZW3DpWxcIi8+IH08L2g1Pn1cbiAgICAgIGhlYWRlck9wZW49e2lzT3Blbn1cbiAgICAgIGNsYXNzTmFtZT17Y291cnNlTmFtZSAmJiBjb3Vyc2VOYW1lVG9Dc3NDbGFzcygnd3AtY291cnNlLScsIGNvdXJzZU5hbWUpfVxuICAgICAgb25PcGVuQ2xvc2U9e2JlY2FtZU9wZW4gPT4gdGhpcy5wcm9wcy5zZXRJc09wZW4oY291cnNlTmFtZSwgYmVjYW1lT3Blbil9XG4gICAgICBkaXNwbGF5UHJvZ3Jlc3M9IHtkaXNwbGF5UHJvZ3Jlc3N9ICAgICAgIFxuICAgICAgcHJvZ3Jlc3NEYXRhID0ge3Byb2dyZXNzRGF0YX1cbiAgICAgID5cbiAgICAgIHtsZWFybmluZ0dvYWxzLm1hcChsZyA9PlxuICAgICAgICA8ZGl2IGtleT17bGcubmFtZX0gY2xhc3NOYW1lPVwibGVhcm5pbmdHb2FsQ29udGFpbmVyXCI+XG4gICAgICAgICAge2xnLnN0ZXAgJiYgPGRpdiBjbGFzc05hbWU9XCJzdGVwSW5kaWNhdG9yXCI+e2xnLnN0ZXB9PC9kaXY+fVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxUZXh0IGhvcml6b250YWxJdGVtIHRvcFwiPntsZy5uYW1lfTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxuICAgICAgICAgICAgICAmbmJzcDs8YVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRyYXNoXCJcbiAgICAgICAgICAgICAgICBocmVmPVwiI1wiXG4gICAgICAgICAgICAgICAgIHRpdGxlPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOid1c2VyVGFza3MuZGVsZXRlTGVhcm5pbmdHb2FsJywgZGVmYXVsdE1lc3NhZ2U6ICdUYSBib3J0IGzDpHJhbmRlbcOlbGV0IG9jaCBkZXNzIHVwcGdpZnRlcid9KX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtldj0+e1xuICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMucmVtb3ZlTGVhcm5pbmdHb2FsKGxnKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtdHJhc2hcIiAvPlxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVhcm5pbmdHb2FsVGFza3NcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxuICAgICAgICAgICAgICB7bGcudGFza3MubWFwKHVzZXJUYXNrID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc1dvcmtpbmcgPSB1c2VyVGFzay4kbWV0YSA9PT0gJ2FkZGluZycgfHwgdXNlclRhc2suJG1ldGEgPT09ICdkZWxldGluZycgfHwgdXNlclRhc2suJG1ldGEgPT09ICd1cGRhdGluZyc7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0YXNrVHlwZSA9IGdldFRhc2tUeXBlKHVzZXJUYXNrKTtcbiAgICAgICAgICAgICAgICBjb25zdCBleHBpcmVkID0gbW9tZW50KHVzZXJUYXNrLmRlYWRsaW5lKS5zdGFydE9mKCdkYXknKSA8IG1vbWVudCgpLnN0YXJ0T2YoJ2RheScpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxkaXYga2V5PXt1c2VyVGFzay5pZH0gc3R5bGU9e2lzV29ya2luZyA/IHsgb3BhY2l0eTogMC41IH0gOiB7fX0+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJjaGVja0JveFwiICsgKHVzZXJUYXNrLmRvbmUgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2V2ID0+ICFpc1dvcmtpbmcgJiYgdGhpcy5wcm9wcy5zZXRUYXNrRG9uZSh1c2VyVGFzaywgIXVzZXJUYXNrLmRvbmUpfT5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAge3Rhc2tUeXBlID09PSAnY291cnNlQnVpbGRlclRhc2snID9cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2dldFRhc2tVcmwodXNlclRhc2ssIHRoaXMucHJvcHMudmlld0NvdXJzZVVybCl9Pnt1c2VyVGFzay5uYW1lfTwvYT4gOlxuICAgICAgICAgICAgICAgICAgICAgICB0YXNrVHlwZSA9PT0gJ3N1YmplY3RQbGFubmVyVGFzaycgP1xuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17Z2V0U3ViamVjdFBsYW5uZXJUYXNrVXJsKHVzZXJUYXNrKX0+e3VzZXJUYXNrLm5hbWV9PC9hPiA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrVHlwZSA9PT0gJ3NpdGVWaXNpb25UYXNrJyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e3VzZXJUYXNrLnVybH0+e3VzZXJUYXNrLm5hbWV9PC9hPiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXshdXNlclRhc2sudXJsID8gXCJsaW5rLWxlc3NcIjogXCJcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPXt1c2VyVGFzay51cmwgfHwgdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD17KHVzZXJUYXNrLnVybCsnJykudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGxvY2F0aW9uLmhvc3QudG9Mb3dlckNhc2UoKSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfc2VsZlwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX2JsYW5rXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID57dXNlclRhc2submFtZX08L2E+fVxuICAgICAgICAgICAgICAgICAgICAgIHt1c2VyVGFzay5kZWFkbGluZSAmJiA8ZGl2IGNsYXNzTmFtZT17XCJkYXRlU2V0XCIgKyAoZXhwaXJlZCA/ICcgZXhwaXJlZCcgOiAnJyl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGkgdGl0bGU9e21vbWVudCh1c2VyVGFzay5kZWFkbGluZSkuZm9ybWF0KFwiWVlZWS1NTS1ERFwiKX0gY2xhc3NOYW1lPVwiZmEgZmEtY2FsZW5kYXJcIiBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+e319PjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj59XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgdGFza0VkaXRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5lZGl0VGFzayh1c2VyVGFzayl9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIHt1c2VyVGFzay5zdWJUYXNrcyAmJiA8ZGl2IGNsYXNzTmFtZT1cInN1YnRhc2tzXCI+XG4gICAgICAgICAgICAgICAgICAgIHt1c2VyVGFzay5zdWJUYXNrcy5tYXAoc3ViVGFzayA9PlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtzdWJUYXNrLmlkfSA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImNoZWNrQm94XCIgKyAoc3ViVGFzay5kb25lID8gXCIgY2hlY2tlZFwiIDogXCJcIil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXYgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpc1dvcmtpbmcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2V0U3ViVGFza0RvbmUodXNlclRhc2ssIHN1YlRhc2ssICFzdWJUYXNrLmRvbmUpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17c3ViVGFzay51cmwgfHwgdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD17KHVzZXJUYXNrLnVybCsnJykudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGxvY2F0aW9uLmhvc3QudG9Mb3dlckNhc2UoKSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiX3NlbGZcIiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfYmxhbmtcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViVGFzay51cmwgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGluay1sZXNzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9PntzdWJUYXNrLm5hbWV9PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCB0YXNrRWRpdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJlZGl0SXRlbVwiIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMuZWRpdFN1YlRhc2sodXNlclRhc2ssIHN1YlRhc2spfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGVhcm5pbmdHb2FsVG9vbHNcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGFkZE93bkdvYWxcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLmFkZE93blRhc2sodGhpcy5wcm9wcy5jb3Vyc2VOYW1lLCBsZy5uYW1lKX0+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPSd1c2VyVGFza3MuYWRkTGVhcm5pbmdHb2FsJyBkZWZhdWx0TWVzc2FnZT0nRWdldCBhcmJldHNtw6VsJy8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgIDwvT3BlbkNsb3NlQm94PlxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRhc2tVcmwodXNlclRhc2s6IFVzZXJUYXNrLCB2aWV3Q291cnNlVXJsOiBzdHJpbmcpIHtcbiAgaWYgKHVzZXJUYXNrLmNvdXJzZSAmJiB1c2VyVGFzay5jb3Vyc2UubGVuZ3RoID4gMCAmJiB1c2VyVGFzay50YXNrICYmIHVzZXJUYXNrLnRhc2subGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGNvdXJzZVVybCA9IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5KHZpZXdDb3Vyc2VVcmwsIHsgY291cnNlSWQ6IHVzZXJUYXNrLmNvdXJzZVswXS5pZCB9KTtcbiAgICByZXR1cm4gYCR7Y291cnNlVXJsfSMvdGFzay8ke3VzZXJUYXNrLnRhc2tbMF0uaWR9YDtcbiAgfVxuICByZXR1cm4gdXNlclRhc2sudXJsO1xufVxuXG5mdW5jdGlvbiBnZXRTdWJqZWN0UGxhbm5lclRhc2tVcmwodXNlclRhc2s6IFVzZXJUYXNrKSB7XG4gIGlmICh1c2VyVGFzay5jb3Vyc2VJbmZvICYmIHVzZXJUYXNrLnRhc2sgJiYgdXNlclRhc2sudGFzay5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qge3NjaG9vbCwgY291cnNlLCB0YWIgfSA9IHVzZXJUYXNrLmNvdXJzZUluZm87XG4gICAgY29uc3QgY291cnNlVXJsID0gcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkoY2ZnLktFRF9TVUJKRUNUX1BMQU5ORVJfVVJMLCB7fSk7XG4gICAgcmV0dXJuIGAke2NvdXJzZVVybH0jLyR7c2Nob29sfS9jb3Vyc2VzLyR7Y291cnNlfS90YWJzLyR7dGFifS90YXNrcy8ke3VzZXJUYXNrLnRhc2tbMF0uaWR9YDtcbiAgfVxuICByZXR1cm4gdXNlclRhc2sudXJsO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdyZWFjdC1pbnRsJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgbGVhcm5pbmdHb2FsPzogc3RyaW5nO1xuICBvblNhdmU6IChsZWFybmluZ0dvYWw6IHN0cmluZykgPT4gdm9pZDtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgbGVhcm5pbmdHb2FsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBBZGRDdXN0b21Hb2FsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbGVhcm5pbmdHb2FsOiBwcm9wcy5sZWFybmluZ0dvYWwgfHwgJydcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xlYXJuaW5nR29hbH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtvblNhdmV9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gPGRpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgICA8aDI+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5hZGRMZWFybmluZ0dvYWxUaXRsZVwiIGRlZmF1bHRNZXNzYWdlPVwiTMOkZ2cgdGlsbCBlZ2V0IGzDpHJhbmRlbcOlbFwiLz48L2gyPlxuICAgICAgICAgIDxociAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuYWRkTGVhcm5pbmdHb2FsXCIgZGVmYXVsdE1lc3NhZ2U9XCJNw6VsXCIvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiB0YWJJbmRleD17MX0gc2l6ZT17NTB9IGF1dG9Gb2N1c1xuICAgICAgICAgICAgICAgIHZhbHVlPXtsZWFybmluZ0dvYWx9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2UgPT4gdGhpcy5zZXRTdGF0ZSh7bGVhcm5pbmdHb2FsOiBlLnRhcmdldC52YWx1ZX0pfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBzcGFjZWRcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxiciAvPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiXG4gICAgICAgICAgb25DbGljaz17KCk9Pm9uU2F2ZShsZWFybmluZ0dvYWwpfT48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImNvbW1vbi5zYXZlXCIgZGVmYXVsdE1lc3NhZ2U9XCJzYXZlXCIvPjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH1cbn1cblxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVGV4dElucHV0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dC1pbnB1dCc7XG5pbXBvcnQgeyBUZXh0QXJlYUZvcm1GaWVsZCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHRhcmVhJztcbmltcG9ydCB7TGFuZ3VhZ2VDb250ZXh0fSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGlzVGFzazogYm9vbGVhblxuICBvblNhdmU6IChuYW1lOiBzdHJpbmcsIGRlc2NyaXB0aW9uOiBzdHJpbmcsIHVybDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQWRkQ3VzdG9tVGFzayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBuYW1lOiAnJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAgICAgIHVybDogJydcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBuYW1lLCBkZXNjcmlwdGlvbiwgdXJsIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgaXNUYXNrLCBvblNhdmUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2ludGx9ID0gdGhpcy5jb250ZXh0O1xuICAgIHJldHVybiA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgICA8aDI+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjdXN0b21UYXNrLmFkZFdvcmtHb2FsVGl0bGVcIiBkZWZhdWx0TWVzc2FnZT1cIkzDpGdnIHRpbGwgZWdldCBhcmJldHNtw6VsXCIvPjwvaDI+XG4gICAgICAgIDxociAvPlxuICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5uYW1lTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTogJ05hbW4nfSl9XG4gICAgICAgICAgaWQ9XCJBZGRDdXN0b21UYXNrOm5hbWVcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOidjdXN0b21UYXNrLmVudGVyTmFtZVBsaGQnLCBkZWZhdWx0TWVzc2FnZTogJ0FuZ2UgbmFtbi4uLid9KX1cbiAgICAgICAgICB2YWx1ZT17bmFtZX1cbiAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICBvbkNoYW5nZT17bmFtZSA9PiB0aGlzLnNldFN0YXRlKHtuYW1lfSl9IC8+XG5cbiAgICAgICAgPFRleHRBcmVhRm9ybUZpZWxkXG4gICAgICAgICAgcm93cz17N31cbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5kZXNjcmlwdGlvbkxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6J0Jlc2tyaXZuaW5nJ30pfVxuICAgICAgICAgIGlkPVwiQWRkQ3VzdG9tVGFzazpkZXNjcmlwdGlvblwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5hZGREZXNjcmlwdGlvblBsaGQnLCBkZWZhdWx0TWVzc2FnZTogXCJMw6RnZyB0aWxsIGVuIGJlc2tyaXZuaW5nLi4uXCJ9KX1cbiAgICAgICAgICB2YWx1ZT17ZGVzY3JpcHRpb259XG4gICAgICAgICAgb25DaGFuZ2U9e2Rlc2NyaXB0aW9uPT50aGlzLnNldFN0YXRlKHtkZXNjcmlwdGlvbn0pfSAvPlxuXG4gICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5saW5rTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTonTMOkbmsnfSl9IFxuICAgICAgICAgIGlkPVwiQWRkQ3VzdG9tVGFzazp1cmxcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiaHR0cDovL3d3dy4uLlwiXG4gICAgICAgICAgdmFsdWU9e3VybH1cbiAgICAgICAgICBvbkNoYW5nZT17dXJsID0+IHRoaXMuc2V0U3RhdGUoe3VybH0pfSAvPlxuXG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2UgYnRuLWRlZmF1bHRcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uU2F2ZShuYW1lLCBkZXNjcmlwdGlvbiwgdXJsKX0+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZVwiIGRlZmF1bHRNZXNzYWdlPVwiU3BhcmFcIi8+PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUZXh0SW5wdXQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC10ZXh0LWlucHV0JztcbmltcG9ydCB7IFRleHRBcmVhRm9ybUZpZWxkIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dGFyZWEnO1xuaW1wb3J0IHsgVXNlclRhc2ssIFVzZXJTdWJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IFVzZXJUYXNrc1JlcG8gfSBmcm9tICcuLi8uLi9yZXBvcy91c2VyLXRhc2tzLXJlcG8nO1xuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7TGFuZ3VhZ2VDb250ZXh0fSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcblxudHlwZSBQcm9wcyA9IHtcbiAgLy8gRWRpdCBNb2RlXG4gIG1vZGU6ICdhZGQnO1xuICB1c2VyVGFzazogVXNlclRhc2s7XG4gIGNsb3NlRGlhbG9nO1xuICB1c2VyVGFza3NSZXBvOiBVc2VyVGFza3NSZXBvXG59IHwge1xuICBtb2RlOiAnZWRpdCc7XG4gIHVzZXJUYXNrOiBVc2VyVGFzaztcbiAgc3ViVGFzazogVXNlclN1YlRhc2s7XG4gIGNsb3NlRGlhbG9nOiAoKT0+dm9pZDtcbiAgdXNlclRhc2tzUmVwbzogVXNlclRhc2tzUmVwb1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQWRkT3JFZGl0U3ViVGFzayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgaWYgKHByb3BzLm1vZGUgPT09ICdlZGl0Jykge1xuICAgICAgY29uc3Qge3N1YlRhc2t9ID0gcHJvcHM7XG4gICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICBuYW1lOiBzdWJUYXNrLm5hbWUgfHwgJycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBzdWJUYXNrLmRlc2NyaXB0aW9uIHx8ICcnLFxuICAgICAgICB1cmw6IHN1YlRhc2sudXJsIHx8ICcnXG4gICAgICB9O1xuICAgIH0gZWxzZSB7ICBcbiAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJycsXG4gICAgICAgIHVybDogJydcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgc2F2ZSgpIHtcbiAgICAvLyBVcGRhdGUgcmVwbzpcbiAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcbiAgICBjb25zdCB7dXNlclRhc2ssIGNsb3NlRGlhbG9nLCB1c2VyVGFza3NSZXBvfSA9IHByb3BzO1xuICAgIGNvbnN0IHtuYW1lLCBkZXNjcmlwdGlvbiwgdXJsfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKHByb3BzLm1vZGUgPT09ICdlZGl0Jykge1xuICAgICAgLy8gRWRpdCBleGlzdGluZzpcbiAgICAgIHVzZXJUYXNrc1JlcG8udXBkYXRlKFt1c2VyVGFza10sIHV0ID0+IHtcbiAgICAgICAgY29uc3Qge3N1YlRhc2tzfSA9IHV0O1xuICAgICAgICBpZiAoc3ViVGFza3MpIHtcbiAgICAgICAgICB1dC5zdWJUYXNrcyA9IHN1YlRhc2tzLm1hcChzdCA9PlxuICAgICAgICAgICAgc3QuaWQgPT09IHByb3BzLnN1YlRhc2suaWQgPyB7Li4uc3QsIG5hbWUsIGRlc2NyaXB0aW9uLCB1cmx9IDpcbiAgICAgICAgICAgIHsuLi5zdH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3JlYXRlIG5ldyB0YXNrXG4gICAgICBjb25zdCBuZXdTdWJUYXNrID0ge1xuICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICBuYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgdXJsXG4gICAgICB9O1xuXG4gICAgICAvLyBVcGRhdGUgcmVwbzpcbiAgICAgIHVzZXJUYXNrc1JlcG8udXBkYXRlKFt1c2VyVGFza10sIHV0ID0+IHtcbiAgICAgICAgaWYgKCF1dC5zdWJUYXNrcykge1xuICAgICAgICAgIHV0LnN1YlRhc2tzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdXQuc3ViVGFza3MgPSB1dC5zdWJUYXNrcy5jb25jYXQobmV3U3ViVGFzayk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBDbG9zZSBkaWFsb2dcbiAgICBjbG9zZURpYWxvZygpOyAgICBcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICAvLyBVcGRhdGUgcmVwbzpcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7ICBcbiAgICBpZiAocHJvcHMubW9kZSAhPT0gJ2VkaXQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4gb25seSBkZWxldGUgaW4gZWRpdCBtb2RlXCIpO1xuICAgIH1cbiAgICBwcm9wcy51c2VyVGFza3NSZXBvLnVwZGF0ZShbcHJvcHMudXNlclRhc2tdLCB1dCA9PiB7XG4gICAgICBpZiAodXQuc3ViVGFza3MpIHtcbiAgICAgICAgdXQuc3ViVGFza3MgPSB1dC5zdWJUYXNrcy5maWx0ZXIodCA9PiB0LmlkICE9PSBwcm9wcy5zdWJUYXNrLmlkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIENsb3NlIGRpYWxvZzpcbiAgICBwcm9wcy5jbG9zZURpYWxvZygpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtuYW1lLCBkZXNjcmlwdGlvbiwgdXJsfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge3Byb3BzfSA9IHRoaXM7XG4gICAgY29uc3QgaXNFZGl0TW9kZSA9IHByb3BzLm1vZGUgPT09ICdlZGl0JztcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgcmV0dXJuIDw+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICAgIDxoMj57aXNFZGl0TW9kZSA/IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiYWRkZWRpdHN1YnRhc2suZWRpdFN1YnRhc2tcIiBkZWZhdWx0TWVzc2FnZT0nUmVkaWdlcmEgdW5kZXJ1cHBnaWZ0Jy8+IDogPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJhZGRlZGl0c3VidGFzay5hZGRTdWJ0YXNrXCIgZGVmYXVsdE1lc3NhZ2U9J0zDpGdnIHRpbGwgdW5kZXJ1cHBnaWZ0Jy8+IH08L2gyPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPFRleHRJbnB1dFxuICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonYWRkZWRpdHN1YnRhc2submFtZUxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6J1VuZGVydXBwZ2lmdGVucyBuYW1uJ30pfVxuICAgICAgICAgIGlkPVwiQWRkVXNlclN1YlRhc2s6bmFtZVwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIlxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLm5hbWV9XG4gICAgICAgICAgb25DaGFuZ2U9e25hbWUgPT4gdGhpcy5zZXRTdGF0ZSh7bmFtZX0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPFRleHRBcmVhRm9ybUZpZWxkXG4gICAgICAgICAgbGFiZWw9IHtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOidjb21tb24uZGVzY3JpcHRpb25MYWJlbCcsIGRlZmF1bHRNZXNzYWdlOidCZXNrcml2bmluZyd9KX1cbiAgICAgICAgICBpZD1cIkFkZFVzZXJTdWJUYXNrOmRlc2NyaXB0aW9uXCJcbiAgICAgICAgICByb3dzPXs3fVxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5kZXNjcmlwdGlvbn1cbiAgICAgICAgICBvbkNoYW5nZT17ZGVzY3JpcHRpb24gPT4gdGhpcy5zZXRTdGF0ZSh7ZGVzY3JpcHRpb259KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5saW5rTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTonTMOkbmsnfSl9XG4gICAgICAgICAgaWQ9XCJBZGRVc2VyU3ViVGFzazp1cmxcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiXCJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS51cmx9XG4gICAgICAgICAgb25DaGFuZ2U9e3VybCA9PiB0aGlzLnNldFN0YXRlKHt1cmx9KX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDxiciAvPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XG4gICAgICAgIHtcbiAgICAgICAgICBwcm9wcy5tb2RlID09PSAnZWRpdCcgJiYgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIlxuICAgICAgICAgIG9uQ2xpY2s9e2V2ID0+IHRoaXMuZGVsZXRlKCl9PlxuICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiYWRkZWRpdHN1YnRhc2suZGVsZXRlU3VidGFza1wiIGRlZmF1bHRNZXNzYWdlPVwiVGEgYm9ydCB1bmRlcnVwcGdpZnRcIi8+PC9idXR0b24+fVxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiXG4gICAgICAgICAgb25DbGljaz17KCk9PnRoaXMuc2F2ZSgpfT48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImNvbW1vbi5zYXZlXCIgZGVmYXVsdE1lc3NhZ2U9XCJTcGFyYVwiLz48L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICB9XG59XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVzZXJUYXNrLCBVc2VyU3ViVGFzayB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IFJlbmFtZWFibGVUZXh0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3JlbmFtZWFibGUtdGV4dCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0VGFza1R5cGUgfSBmcm9tICcuL2dldC10YXNrLXR5cGUnO1xuaW1wb3J0IFJlYWN0RGF0ZVBpY2tlciwgeyBSZWFjdERhdGVQaWNrZXJQcm9wcyB9IGZyb20gJ3JlYWN0LWRhdGVwaWNrZXInO1xuaW1wb3J0ICcuLi8uLi9nbG9iYWxzL21vbWVudC1zdi1sb2NhbGUnO1xuaW1wb3J0IHtUZXh0SW5wdXR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHQtaW5wdXQnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgRm9ybUZpZWxkIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgQWRkT3JFZGl0U3ViVGFzayB9IGZyb20gJy4vYWRkLW9yLWVkaXQtc3ViLXRhc2snO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB1cGRhdGUgZnJvbSAncmVhY3QtYWRkb25zLXVwZGF0ZSc7XG5pbXBvcnQgeyBVc2VyVGFza3NSZXBvIH0gZnJvbSAnLi4vLi4vcmVwb3MvdXNlci10YXNrcy1yZXBvJztcbmltcG9ydCB7IFRleHRBcmVhRm9ybUZpZWxkIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dGFyZWEnO1xuaW1wb3J0IHsgRm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gXCIuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0XCJcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdXNlclRhc2s6IFVzZXJUYXNrO1xuICBvblVwZGF0ZTogKHVwZGF0ZXI6ICh1c2VyVGFzazogVXNlclRhc2spID0+IHZvaWQpID0+IHZvaWQ7XG4gIG9uRGVsZXRlOiAodXNlclRhc2tJZDogc3RyaW5nKSA9PiB2b2lkO1xuICBvcGVuRGlhbG9nOiAoZGlhbG9nKSA9PiB2b2lkO1xuICBjbG9zZURpYWxvZzogKCk9PnZvaWQ7XG4gIHVzZXJUYXNrc1JlcG86IFVzZXJUYXNrc1JlcG9cbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgdXNlclRhc2s6IFVzZXJUYXNrO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICBkZWFkbGluZT86IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG4gIHN1YlRhc2tzPzogVXNlclN1YlRhc2tbXTtcbiAgc2hvd0NhbGVuZGFyPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEVkaXRVc2VyVGFzayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBkYXRlUGlja2VyOiBhbnk7XG4gIHN0YXRpYyBjb250ZXh0VHlwZSA9IExhbmd1YWdlQ29udGV4dDtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHVzZXJUYXNrOiBwcm9wcy51c2VyVGFzayxcbiAgICAgIG5hbWU6IHByb3BzLnVzZXJUYXNrLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogcHJvcHMudXNlclRhc2suZGVzY3JpcHRpb24sXG4gICAgICB1cmw6IHByb3BzLnVzZXJUYXNrLnVybCxcbiAgICAgIGRlYWRsaW5lOiBwcm9wcy51c2VyVGFzay5kZWFkbGluZSxcbiAgICAgIHN1YlRhc2tzOiBwcm9wcy51c2VyVGFzay5zdWJUYXNrc1xuICAgIH1cbiAgICB0aGlzLm9uVXNlclRhc2tzQ2hhbmdlZCA9IHRoaXMub25Vc2VyVGFza3NDaGFuZ2VkLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLnVzZXJUYXNrc1JlcG8uc3Vic2NyaWJlKHRoaXMub25Vc2VyVGFza3NDaGFuZ2VkKTtcbiAgfVxuXG4gIG9uVXNlclRhc2tzQ2hhbmdlZCh1c2VyVGFza3M6IFVzZXJUYXNrW10pIHtcbiAgICBjb25zdCBteVVzZXJUYXNrID0gdXNlclRhc2tzLmZpbmQodXQgPT4gdXQuaWQgPT09IHRoaXMucHJvcHMudXNlclRhc2suaWQpO1xuICAgIGlmICghbXlVc2VyVGFzaykge1xuICAgICAgdGhpcy5wcm9wcy5jbG9zZURpYWxvZygpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHVzZXJUYXNrOiBteVVzZXJUYXNrLFxuICAgICAgc3ViVGFza3M6IG15VXNlclRhc2suc3ViVGFza3NcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMudXNlclRhc2tzUmVwby51bnN1YnNjcmliZSh0aGlzLm9uVXNlclRhc2tzQ2hhbmdlZCk7XG4gIH1cblxuICBpc01vZGlmaWVkKCkge1xuICAgIC8vIERvbid0IGNvdW50IHN1YnRhc2sgY2hhbmdlcyEgVGhleSBsaXZlIHRoZWlyIG93biBsaWZlIGFuZCBpcyBtYWludGFpbmVkXG4gICAgLy8gaW4gYWRkLW9yLWVkaXQtc3ViLXRhc2sudHN4LiBSZWFzb246IFVzZXIgd291bGQgZXhwZWN0IGFkZGVkIC9lZGl0ZWQgc3VidGFza3NcbiAgICAvLyB0byBiZSBwZXJzaXN0ZWQgcmlnaHQgYXdheS4gTWF5IGNsaWNrIGF3YXkgdGhpcyBkaWFsb2cuXG4gICAgLy8gQWxzbyByZWFzb246IENhbiBpbnZva2UgdGhhdCBkaWFsb2cgYnkgaXRzZWxmIGZyb20gb3RoZXIgY29tcG9uZW50cy4gRnJvbSBXZWVrUGxhbm5lclxuICAgIC8vIHdoZW4gY2xpY2tpbmcgdGhlIHN1YnRhc2sgZm9yIGV4YW1wbGUhXG5cbiAgICBjb25zdCB7ZGVhZGxpbmUsIGRlc2NyaXB0aW9uLCBuYW1lLCB1cmwsIHVzZXJUYXNrfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIChcbiAgICAgIGRlYWRsaW5lICE9PSB1c2VyVGFzay5kZWFkbGluZSB8fFxuICAgICAgZGVzY3JpcHRpb24gIT09IHVzZXJUYXNrLmRlc2NyaXB0aW9uIHx8XG4gICAgICBuYW1lICE9PSB1c2VyVGFzay5uYW1lIHx8XG4gICAgICB1cmwgIT09IHVzZXJUYXNrLnVybCk7XG4gIH1cblxuICBhZGRTdWJUYXNrKCk6IGFueSB7XG4gICAgdGhpcy5wcm9wcy5vcGVuRGlhbG9nKDxBZGRPckVkaXRTdWJUYXNrXG4gICAgICBtb2RlPVwiYWRkXCJcbiAgICAgIHVzZXJUYXNrPXt0aGlzLnN0YXRlLnVzZXJUYXNrfVxuICAgICAgY2xvc2VEaWFsb2c9e3RoaXMucHJvcHMuY2xvc2VEaWFsb2d9XG4gICAgICB1c2VyVGFza3NSZXBvPXt0aGlzLnByb3BzLnVzZXJUYXNrc1JlcG99XG4gICAgLz4pO1xuICB9XG5cbiAgZWRpdFN1YlRhc2soc3ViVGFzazogVXNlclN1YlRhc2spIHtcbiAgICB0aGlzLnByb3BzLm9wZW5EaWFsb2coPEFkZE9yRWRpdFN1YlRhc2tcbiAgICAgIG1vZGU9XCJlZGl0XCJcbiAgICAgIHN1YlRhc2s9e3N1YlRhc2t9XG4gICAgICB1c2VyVGFzaz17dGhpcy5zdGF0ZS51c2VyVGFza31cbiAgICAgIGNsb3NlRGlhbG9nPXt0aGlzLnByb3BzLmNsb3NlRGlhbG9nfVxuICAgICAgdXNlclRhc2tzUmVwbz17dGhpcy5wcm9wcy51c2VyVGFza3NSZXBvfVxuICAgIC8+KTtcbiAgfVxuICBcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbmFtZSwgZGVzY3JpcHRpb24sIHVybCwgZGVhZGxpbmUsIHN1YlRhc2tzLCBzaG93Q2FsZW5kYXIsIHVzZXJUYXNrIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgaWQsIGNvdXJzZU5hbWUgfSA9IHVzZXJUYXNrO1xuICAgIGNvbnN0IHsgb25VcGRhdGUsIG9uRGVsZXRlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGlzTW9kaWZpZWQgPSB0aGlzLmlzTW9kaWZpZWQoKTtcblxuICAgIGNvbnN0IHRhc2tUeXBlID0gZ2V0VGFza1R5cGUodXNlclRhc2spO1xuICAgIGNvbnN0IGlzQ3VzdG9tVGFzayA9IHRhc2tUeXBlID09PSAnY3VzdG9tVGFzayc7XG4gICAgY29uc3QgZXhwaXJlZCA9IG1vbWVudCh1c2VyVGFzay5kZWFkbGluZSkgPCBtb21lbnQoKTtcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJlZGl0VGFza0RpYWxvZyBzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgPGgyPntpc0N1c3RvbVRhc2sgPyBcbiAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ0YXNrLmVkaXRXb3JrR29hbHNcIiBkZWZhdWx0TWVzc2FnZT0nUmVkaWdlcmEgYXJiZXRzbcOlbCcvPiA6IFxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRhc2suZWRpdFRhc2tcIiBkZWZhdWx0TWVzc2FnZT0nUmVkaWdlcmEgdXBwZ2lmdCcvPn1cbiAgICAgIDwvaDI+XG4gICAgICA8aHIgLz5cbiAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgIGxhYmVsPXtpc0N1c3RvbVRhc2sgPyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay50YXJnZXROYW1lTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTogJ0FyYmV0c23DpWxldHMgbmFtbid9KSAgOiBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay50YXNrTmFtZUxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6ICdVcHBnaWZ0ZW5zIG5hbW4nfSl9XG4gICAgICAgIGlkPVwiRWRpdFVzZXJUYXNrOm5hbWVcIlxuICAgICAgICBwbGFjZWhvbGRlcj17aXNDdXN0b21UYXNrID8gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogJ3Rhc2sud2hhdFNob3VsZFlvdURvUGxoZCcsIGRlZmF1bHRNZXNzYWdlOiAnVmFkIHNrYSBkdSBnw7ZyYT8nfSkgOiBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay5lbnRlclRhc2tOYW1lUGxoZCcsIGRlZmF1bHRNZXNzYWdlOiAnQW5nZSB1cHBnaWZ0ZW5zIG5hbW4uLi4nfSkgfVxuICAgICAgICB2YWx1ZT17bmFtZX1cbiAgICAgICAgb25DaGFuZ2U9e25hbWUgPT4gdGhpcy5zZXRTdGF0ZSh7bmFtZX0pfSAvPlxuICAgICAgXG4gICAgICB7aXNDdXN0b21UYXNrICYmIDw+XG4gICAgICAgIDxUZXh0QXJlYUZvcm1GaWVsZFxuICAgICAgICAgIHJvd3M9ezV9XG4gICAgICAgICAgbGFiZWw9IHtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAnY29tbW9uLmRlc2NyaXB0aW9uTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTogJ0Jlc2tyaXZuaW5nJ30pfVxuICAgICAgICAgIGlkPVwiRWRpdFVzZXJUYXNrOmRlc2NyaXB0aW9uXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDogJ2NvbW1vbi5hZGREZXNjcmlwdGlvblBsaGQnLCBkZWZhdWx0TWVzc2FnZTogJ0zDpGdnIHRpbGwgZW4gYmVza3Jpdm5pbmcuLi4nfSl9XG4gICAgICAgICAgdmFsdWU9e2Rlc2NyaXB0aW9ufVxuICAgICAgICAgIG9uQ2hhbmdlPXtkZXNjcmlwdGlvbj0+dGhpcy5zZXRTdGF0ZSh7ZGVzY3JpcHRpb259KX0gLz5cblxuICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5saW5rTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTpcIkzDpG5rXCJ9KX1cbiAgICAgICAgICBpZD1cIkVkdXRVc2VyVGFzazp1cmxcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiaHR0cChzKTovLy4uLlwiXG4gICAgICAgICAgdmFsdWU9e3VybH1cbiAgICAgICAgICBvbkNoYW5nZT17dXJsID0+IHRoaXMuc2V0U3RhdGUoe3VybH0pfSA+XG5cbiAgICAgICAgPC9UZXh0SW5wdXQ+PC8+fVxuXG4gICAgICAgIDxGb3JtRmllbGQgbGFiZWw9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLnNldERlYWRsaW5lJywgZGVmYXVsdE1lc3NhZ2U6ICdBbmdlIGRlYWRsaW5lJ30pfT5cbiAgICAgICAgICB7KGRlYWRsaW5lIHx8IHNob3dDYWxlbmRhcikgP1xuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgPFJlYWN0RGF0ZVBpY2tlciByZWY9e2VsZW0gPT4gdGhpcy5kYXRlUGlja2VyID0gZWxlbX1cbiAgICAgICAgICAgICAgICAgIGlkPVwiRWRpdFVzZXJUYXNrOmRlYWRsaW5lXCJcbiAgICAgICAgICAgICAgICAgIG5leHRNb250aEJ1dHRvbkxhYmVsPVwiXCIgXG4gICAgICAgICAgICAgICAgICBwcmV2aW91c01vbnRoQnV0dG9uTGFiZWw9XCJcIiBcbiAgICAgICAgICAgICAgICAgIHNob3dXZWVrTnVtYmVycz17dHJ1ZX1cbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkPXtkZWFkbGluZSAmJiBtb21lbnQoZGVhZGxpbmUpLnRvRGF0ZSgpfVxuICAgICAgICAgICAgICAgICAgYXV0b0ZvY3VzPXtzaG93Q2FsZW5kYXJ9XG4gICAgICAgICAgICAgICAgICBkYXRlRm9ybWF0PVwieXl5eS1NTS1kZFwiXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2V4cGlyZWQgPyBcImV4cGlyZWRcIiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgIGxvY2FsZT17aW50bC5sb2NhbGV9XG4gICAgICAgICAgICAgICAgICBwb3BwZXJQbGFjZW1lbnQ9e2lzQ3VzdG9tVGFzayA/IFwidG9wLXN0YXJ0XCIgOiBcImJvdHRvbS1zdGFydFwifVxuICAgICAgICAgICAgICAgICAgb25CbHVyPXsoKT0+dGhpcy5zZXRTdGF0ZSh7c2hvd0NhbGVuZGFyOiBmYWxzZX0pfVxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3ZhbHVlPT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgIGRlYWRsaW5lOiB2YWx1ZSAmJiBtb21lbnQodmFsdWUpLmZvcm1hdChcIllZWVktTU0tRERcIiksXG4gICAgICAgICAgICAgICAgICAgICAgc2hvd0NhbGVuZGFyOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZGVsZXRlRGF0ZVwiIGhyZWY9XCIjXCIgdGl0bGU9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLnJlbW92ZURlYWRsaW5lJywgZGVmYXVsdE1lc3NhZ2U6ICdUYSBib3J0IGRlYWRsaW5lJ30pfSBvbkNsaWNrPXtldj0+e1xuICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2RlYWRsaW5lOiBudWxsLCBzaG93Q2FsZW5kYXI6IGZhbHNlfSk7XG4gICAgICAgICAgICAgICAgfX0+PC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PiA6XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcFwiIHJlZj17KCk9Pnt0aGlzLmRhdGVQaWNrZXIgPSBudWxsfX0+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17ZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZVBpY2tlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGVQaWNrZXIuc2V0T3Blbih0cnVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBzaG93Q2FsZW5kYXI6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNhbGVuZGFyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5zZXREZWFkbGluZUxhYmVsXCIgZGVmYXVsdE1lc3NhZ2U9XCJBbmdlIGRlYWRsaW5lLi4uXCIvPlxuICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICBcbiAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgPC9Gb3JtRmllbGQ+XG4gICAgICA8Rm9ybUZpZWxkIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay5zdWJUYXNrcycsIGRlZmF1bHRNZXNzYWdlOiAnVW5kZXJ1cHBnaWZ0ZXInfSl9ID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxUYXNrc1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxuXG4gICAgICAgICAgICAgIHtzdWJUYXNrcyAmJiBzdWJUYXNrcy5tYXAoc3ViVGFzayA9PiA8ZGl2IGtleT17c3ViVGFzay5pZH0gY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+PGFcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT50aGlzLmVkaXRTdWJUYXNrKHN1YlRhc2spfVxuICAgICAgICAgICAgICAgICAgaHJlZj1cIiNcIj57c3ViVGFzay5uYW1lfTwvYT48L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwiRWRpdFVzZXJUYXNrOmFkZFN1YlRhc2tcIiBjbGFzc05hbWU9XCJidG5cIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5hZGRTdWJUYXNrKCl9PlxuICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRhc2suYWRkU3VidGFza1wiIGRlZmF1bHRNZXNzYWdlPVwiTMOkZ2cgdGlsbCB1bmRlcnVwcGdpZnRcIi8+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0Zvcm1GaWVsZD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGl2aWRlciBsYXJnZVwiIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsQnV0dG9uIHRvcFwiPlxuICAgICAgICAgIDxidXR0b24gdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWRlZmF1bHRcIlxuICAgICAgICAgICAgb25DbGljaz17KCk9PntcbiAgICAgICAgICAgICAgaXNNb2RpZmllZCA/IG9uVXBkYXRlKHVzZXJUYXNrID0+IHtcbiAgICAgICAgICAgICAgICB1c2VyVGFzay5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICB1c2VyVGFzay5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIHVzZXJUYXNrLnVybCA9IHVybDtcbiAgICAgICAgICAgICAgICB1c2VyVGFzay5kZWFkbGluZSA9IGRlYWRsaW5lO1xuICAgICAgICAgICAgICB9KSA6IHRoaXMucHJvcHMuY2xvc2VEaWFsb2coKTtcbiAgICAgICAgICAgIH19PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVcIiBkZWZhdWx0TWVzc2FnZT1cIlNwYXJhXCIvPiBcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsQnV0dG9uIHRvcFwiPlxuICAgICAgICAgIDxidXR0b24gdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJidG5cIlxuICAgICAgICAgICAgb25DbGljaz17KCk9PntcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jbG9zZURpYWxvZygpO1xuICAgICAgICAgICAgfX0+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uY2FuY2VsXCIgZGVmYXVsdE1lc3NhZ2U9XCJBdmJyeXRcIi8+PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0gdG9wIHB1bGwtcmlnaHRcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0YWJJbmRleD17MX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZ1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKT0+e1xuICAgICAgICAgICAgICBvbkRlbGV0ZShpZCk7XG4gICAgICAgICAgICB9fT57aXNDdXN0b21UYXNrID9cbiAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ0YXNrLnJlbW92ZVdvcmtHb2Fsc1wiIGRlZmF1bHRNZXNzYWdlPVwiVGEgYm9ydCBhcmJldHNtw6VsXCIvPiA6XG4gICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5yZW1vdmVUaGlzVGFza1wiIGRlZmF1bHRNZXNzYWdlPVwiVGEgYm9ydCBkZW4gaMOkciB1cHBnaWZ0ZW5cIi8+XG4gICAgICAgICAgfTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgXG4gICAgICB7Lyo8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9e2V2ID0+IG9uRGVsZXRlKGlkKX0+XG4gICAgICAgIHtMYFRhIGJvcnQgYXJiZXRzbcOlbGB9PC9kaXY+XG4gICAgICB7aXNNb2RpZmllZCAmJlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiXG4gICAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgICAgb25DbGljaz17KCk9Pm9uVXBkYXRlKHVzZXJUYXNrID0+IHtcbiAgICAgICAgICAgIHVzZXJUYXNrLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgdXNlclRhc2suZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIHVzZXJUYXNrLnVybCA9IHVybDtcbiAgICAgICAgICB9KX0+IFNwYXJhPC9kaXY+fSovfVxuICAgIDwvZGl2PlxuICB9XG59XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgICBwZXJjZW50YWdlOiBudW1iZXI7XG4gICAgYmFja2dyb3VuZENvbG9yPzogc3RyaW5nO1xuICAgIHByb2dyZXNzQ29sb3I/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9ncmVzcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBwZXJjZW50YWdlOiAwLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI0YxRjVGNFwiLFxuICAgICAgICBwcm9ncmVzc0NvbG9yOiBcIiMzZGJjYTJcIixcbiAgICB9O1xuXG4gICAgcmVuZGVyKCl7XG4gICAgICAgIGNvbnN0IHtwZXJjZW50YWdlLCBiYWNrZ3JvdW5kQ29sb3IsIHByb2dyZXNzQ29sb3J9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3Qgcm91bmRlZFBlcmNlbnRhZ2UgPSBNYXRoLnJvdW5kKHBlcmNlbnRhZ2UpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9XCJwcm9ncmVzcy1jaGFydFwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjI1XCI+XG4gICAgICAgICAgICA8cmVjdCBmaWxsPXtiYWNrZ3JvdW5kQ29sb3J9ICB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgcng9XCI0XCIvPlxuICAgICAgICAgICAgPHJlY3QgY2xhc3NOYW1lPVwiZmlsbFwiIGZpbGw9e3Byb2dyZXNzQ29sb3J9IHdpZHRoPXtgJHtyb3VuZGVkUGVyY2VudGFnZX0lYH0gaGVpZ2h0PVwiMTAwJVwiIHJ4PVwiNFwiLz5cbiAgICAgICAgICAgIDx0ZXh0IGNsYXNzTmFtZT1cImZpbGxlZC10ZXh0XCIgdGV4dEFuY2hvcj1cIm1pZGRsZVwiIHg9XCI1MCVcIiB5PVwiNTAlXCIgZHk9XCIuM2VtXCI+e2Ake3JvdW5kZWRQZXJjZW50YWdlfSVgfTwvdGV4dD5cdFxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgIClcbiAgICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVXNlclRhc2tzQm94IH0gZnJvbSAnLi91c2VyLXRhc2tzLWJveCc7XG5pbXBvcnQgeyBVc2VyVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBjcmVhdGVVVUlELCBIdHRwRXJyb3IgfSBmcm9tIFwia2VkYmFja2VuZC9jbGllbnRcIjtcbmltcG9ydCB7IHJlZmluZSwgVmlydHVhbExlYXJuaW5nR29hbCB9IGZyb20gJy4vcmVmaW5lcic7XG5pbXBvcnQgeyBFbnYgfSBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgTCwgY29tcGFyZVByb3AgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG4vL2ltcG9ydCB7IEN1c3RvbUdvYWwgfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQgeyBUU09OIH0gZnJvbSAnLi4vLi4vdXRpbHMvdHNvbic7XG5pbXBvcnQgeyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIH0gZnJvbSAnLi93ZWVrcGxhbm5lci1wZXJzaXN0ZWQtc3RhdGUnO1xuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtJztcbmltcG9ydCB7IERpYWxvZ3MgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZGlhbG9ncyc7XG5pbXBvcnQgeyBBZGRDdXN0b21Hb2FsIH0gZnJvbSAnLi9hZGQtY3VzdG9tLWdvYWwnO1xuaW1wb3J0IHsgQWRkQ3VzdG9tVGFzayB9IGZyb20gJy4vYWRkLWN1c3RvbS10YXNrJztcbmltcG9ydCB7IEVkaXRVc2VyVGFzayB9IGZyb20gJy4vZWRpdC11c2VyLXRhc2snO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94JztcbmltcG9ydCB7IFBlbmRpbmdKb2IgfSBmcm9tICcuLi8uLi91dGlscy9wZW5kaW5nLWpvYic7XG5pbXBvcnQgeyBBZGRPckVkaXRTdWJUYXNrIH0gZnJvbSAnLi9hZGQtb3ItZWRpdC1zdWItdGFzayc7XG5pbXBvcnQgeyBnZXRBZGp1c3RlZFdlZWssIEtFRFdlZWssIGdldE5leHRXZWVrRGF0ZSwgZ2V0UHJldldlZWtEYXRlIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Vla3V0aWwnO1xuaW1wb3J0IHsgRm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuaW1wb3J0IHsgUHJvZ3Jlc3MgfSBmcm9tICcuLi9jaGFydHMvcHJvZ3Jlc3MnO1xuaW1wb3J0IHtnZXRXZWVrcGxhbm5lclByb2dyZXNzRGF0YX0gZnJvbSAnLi4vY2hhcnRzL2NoYXJ0cy11dGlscydcbmltcG9ydCB7IGZlYXR1cmVzIH0gZnJvbSAnLi4vLi4vZmVhdHVyZXMnO1xuXG5jb25zdCBNQVhfU1RSQVRFR1lfTEVOR1RIID0gMTYzODQ7XG5jb25zdCBNQVhfQVNTRVNTTUVOVF9MRU5HVEggPSAxNjM4NDtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdmlld0NvdXJzZVVybDogc3RyaW5nO1xuICBlbnY6IEVudjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgd2Vla0RhdGU6IG51bWJlcjtcbiAgZGlhbG9nczogYW55W107XG4gIHVzZXJUYXNrczogVXNlclRhc2tbXTtcbiAgb3BlbkNvdXJzZXM6IHsgW3BhdGg6IHN0cmluZ106IGJvb2xlYW4gfVxuICBzdHJhdGVneT86IHN0cmluZztcbiAgYXNzZXNzbWVudD86IHN0cmluZztcbiAgd2Vla1RleHRzVVQ6IFVzZXJUYXNrIHwgbnVsbDtcbiAgc2F2aW5nOiBib29sZWFuO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIGlzQ29weWluZ1Rhc2tzOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgV2Vla1BsYW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHdlZWtUZXh0c1NhdmluZ0pvYjogUGVuZGluZ0pvYjtcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdXNlclRhc2tzOiBbXSxcbiAgICAgIHdlZWtEYXRlOiBEYXRlLm5vdygpLFxuICAgICAgb3BlbkNvdXJzZXM6IHt9LFxuICAgICAgZGlhbG9nczogW10sXG4gICAgICBzYXZpbmc6IGZhbHNlLFxuICAgICAgd2Vla1RleHRzVVQ6IG51bGwsXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICBpc0NvcHlpbmdUYXNrczogZmFsc2VcbiAgICB9XG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYiA9IG5ldyBQZW5kaW5nSm9iKCgpPT50aGlzLnNhdmVXZWVrVGV4dHMoKSk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnN1YnNjcmliZSh0aGlzLm9uQ2hhbmdlKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8udW5zdWJzY3JpYmUodGhpcy5vbkNoYW5nZSk7XG4gICAgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2Iuc3RvcCgpO1xuICB9XG5cbiAgb25DaGFuZ2UodXNlclRhc2tzOiBVc2VyVGFza1tdLCBwZXJzaXN0ZWQ6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUsIHdlZWtUZXh0c1VUOiBVc2VyVGFzaykge1xuICAgIGNvbnN0IG5ld1N0YXRlIDogUGFydGlhbDxTdGF0ZT4gPSB7XG4gICAgICB1c2VyVGFza3MsXG4gICAgICB3ZWVrRGF0ZTogcGVyc2lzdGVkLndlZWtEYXRlLFxuICAgICAgb3BlbkNvdXJzZXM6IHBlcnNpc3RlZC5vcGVuQ291cnNlcyxcbiAgICAgIHdlZWtUZXh0c1VULFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZVxuICAgIH1cbiAgICBpZiAoIXRoaXMuc3RhdGUud2Vla1RleHRzVVQgfHwgKHdlZWtUZXh0c1VULmRhdGVUaW1lICE9PSB0aGlzLnN0YXRlLndlZWtUZXh0c1VULmRhdGVUaW1lKSkge1xuICAgICAgLy8gQ2hhbmdpbmcgd2Vlay4gUmVzZXQgdG8gbmV3IHdlZWsncyB2YWx1ZXNcbiAgICAgIG5ld1N0YXRlLnN0cmF0ZWd5ID0gd2Vla1RleHRzVVQud2Vla1RleHRzLnN0cmF0ZWd5O1xuICAgICAgbmV3U3RhdGUuYXNzZXNzbWVudCA9IHdlZWtUZXh0c1VULndlZWtUZXh0cy5hc3Nlc3NtZW50O1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlIGFzIGFueSk7IC8vIFJlYWN0J3MgdXNlIG9mIFBpY2sgaW5zdGVhZCBvZiBQYXJ0aWFsIG1ha2VzIHRoaW5ncyBjb21wbGV4IGhlcmUuXG4gIH1cblxuICBpc1dlZWtUZXh0c0VkaXRlZCgpIHtcbiAgICBjb25zdCB7IHN0cmF0ZWd5LCBhc3Nlc3NtZW50LCB3ZWVrVGV4dHNVVCB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gISF3ZWVrVGV4dHNVVCAmJiAoc3RyYXRlZ3kgIT09IHdlZWtUZXh0c1VULndlZWtUZXh0cy5zdHJhdGVneSB8fCBhc3Nlc3NtZW50ICE9PSB3ZWVrVGV4dHNVVC53ZWVrVGV4dHMuYXNzZXNzbWVudCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNhdmVXZWVrVGV4dHMoKSB7XG4gICAgY29uc29sZS5sb2coXCJTYXZpbmcgdGV4dHMuLi5cIik7XG4gICAgY29uc3QgeyBzdHJhdGVneSwgYXNzZXNzbWVudCwgd2Vla1RleHRzVVQgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKHRoaXMuaXNXZWVrVGV4dHNFZGl0ZWQoKSkge1xuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby51cHNlcnQod2Vla1RleHRzVVQsIHV0ID0+IHtcbiAgICAgICAgdXQud2Vla1RleHRzID0geyBzdHJhdGVneSwgYXNzZXNzbWVudCB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJldldlZWsoKSB7XG4gICAgLy90aGlzLnNhdmVXZWVrVGV4dHMoKTsgXG4gICAgdmFyIHByZXZXZWVrT2JqID0gZ2V0UHJldldlZWtEYXRlKG1vbWVudCh0aGlzLnN0YXRlLndlZWtEYXRlKSk7XG4gICAgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby5jaGFuZ2VXZWVrKHByZXZXZWVrT2JqLm5leHREYXRlLCBwcmV2V2Vla09iai5hZGp1c3RlZCk7XG4gIH1cblxuICBuZXh0V2VlaygpIHtcbiAgICAvL3RoaXMuc2F2ZVdlZWtUZXh0cygpO1xuICAgIHZhciBuZXh0V2Vla09iaiA9IGdldE5leHRXZWVrRGF0ZShtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkpO1xuICAgIHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uY2hhbmdlV2VlayhuZXh0V2Vla09iai5uZXh0RGF0ZSwgbmV4dFdlZWtPYmouYWRqdXN0ZWQpO1xuICB9XG5cbiAgb3BlbkRpYWxvZyhkaWFsb2cpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogWy4uLnRoaXMuc3RhdGUuZGlhbG9ncywgZGlhbG9nXSB9KTtcbiAgfVxuXG4gIG9wZW5BZGRHb2FsRGlhbG9nKCkge1xuICAgIHRoaXMub3BlbkRpYWxvZyg8QWRkQ3VzdG9tR29hbFxuICAgICAgb25TYXZlPXthc3luYyAobGVhcm5pbmdHb2FsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKCFsZWFybmluZ0dvYWwpIHRocm93IG5ldyBFcnJvciAodGhpcy5jb250ZXh0LmludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J3dlZWtwbGFubmVyLmVtcHR5TGVhcm5pbmdHb2FsRXJyJywgZGVmYXVsdE1lc3NhZ2U6ICdMw6RyYW5kZW3DpWxldCBrYW4gaW50ZSB2YXJhIHRvbXQnfSkpO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuc2F2aW5nKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNhdmluZzogdHJ1ZSB9KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGRDdXN0b21Hb2FsKGxlYXJuaW5nR29hbCk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzYXZpbmc6IGZhbHNlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIH1cbiAgICAgIH19IC8+KTtcbiAgfVxuXG4gIG9wZW5BZGRPd25UYXNrRGlhbG9nKGNvdXJzZU5hbWU6IHN0cmluZywgbGVhcm5pbmdHb2FsTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vcGVuRGlhbG9nKDxBZGRDdXN0b21UYXNrXG4gICAgICBpc1Rhc2s9eyFjb3Vyc2VOYW1lfVxuICAgICAgb25TYXZlPXthc3luYyAobmFtZTogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCB1cmw6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoIW5hbWUpIHRocm93IG5ldyBFcnJvciAodGhpcy5jb250ZXh0LmludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J3dlZWtwbGFubmVyLm5hbWVDYW5ub3RCZUVtcHR5JywgZGVmYXVsdE1lc3NhZ2U6ICdOYW1uZXQga2FuIGludGUgdmFyYSB0b210J30pKTtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnNhdmluZykge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzYXZpbmc6IHRydWUgfSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkQ3VzdG9tVGFzayhjb3Vyc2VOYW1lLCBsZWFybmluZ0dvYWxOYW1lLCBuYW1lLCBkZXNjcmlwdGlvbiwgdXJsKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNhdmluZzogZmFsc2UgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY2xvc2VEaWFsb2coKTtcbiAgICAgICAgfVxuICAgICAgfX0gLz4pO1xuICB9XG5cbiAgZWRpdFRhc2sodXNlclRhc2s6IFVzZXJUYXNrKSB7XG4gICAgdGhpcy5vcGVuRGlhbG9nKDxFZGl0VXNlclRhc2tcbiAgICAgIHVzZXJUYXNrc1JlcG89e3RoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG99XG4gICAgICB1c2VyVGFzaz17dXNlclRhc2t9XG4gICAgICBvblVwZGF0ZT17YXN5bmMgKHVwZGF0ZXI6ICh1dDogVXNlclRhc2spID0+IHZvaWQpID0+IHtcbiAgICAgICAgY29uc3QgdGVzdCA9IHsuLi51c2VyVGFza307XG4gICAgICAgIHVwZGF0ZXIodGVzdCk7XG4gICAgICAgIGlmICghdGVzdC5uYW1lKSB0aHJvdyBuZXcgRXJyb3IgKHRoaXMuY29udGV4dC5pbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOid3ZWVrcGxhbm5lci5uYW1lTXVzdE5vdEJlRW1wdHknLCBkZWZhdWx0TWVzc2FnZTogJ05hbW5ldCBmw6VyIGludGUgdmFyYSB0b210J30pKTtcbiAgICAgICAgdGhpcy5jbG9zZURpYWxvZygpO1xuICAgICAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnVwZGF0ZShbdXNlclRhc2tdLCB1cGRhdGVyKTtcbiAgICAgIH19XG4gICAgICBvbkRlbGV0ZT17YXN5bmMgaWQgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uZGVsZXRlKFtpZF0pO1xuICAgICAgfX1cbiAgICAgIG9wZW5EaWFsb2c9e2RpYWxvZz0+dGhpcy5vcGVuRGlhbG9nKGRpYWxvZyl9XG4gICAgICBjbG9zZURpYWxvZz17KCk9PnRoaXMuY2xvc2VEaWFsb2coKX1cbiAgICAvPik7XG4gIH1cblxuICBlZGl0U3ViVGFzayh1c2VyVGFzazogVXNlclRhc2ssIHN1YlRhc2s6IFVzZXJTdWJUYXNrKSB7XG4gICAgdGhpcy5vcGVuRGlhbG9nKDxBZGRPckVkaXRTdWJUYXNrXG4gICAgICB1c2VyVGFza3NSZXBvPXt0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvfVxuICAgICAgbW9kZT1cImVkaXRcIlxuICAgICAgdXNlclRhc2s9e3VzZXJUYXNrfVxuICAgICAgc3ViVGFzaz17c3ViVGFza31cbiAgICAgIGNsb3NlRGlhbG9nPXsoKT0+dGhpcy5jbG9zZURpYWxvZygpfVxuICAgIC8+KTtcbiAgfVxuXG4gIGNsb3NlRGlhbG9nKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBkaWFsb2dzOiB0aGlzLnN0YXRlLmRpYWxvZ3Muc2xpY2UoMCwgdGhpcy5zdGF0ZS5kaWFsb2dzLmxlbmd0aCAtIDEpIH0pO1xuICB9XG5cblxuXG4gIGFzeW5jIGFkZEN1c3RvbUdvYWwobGVhcm5pbmdHb2FsOiBzdHJpbmcpIHtcbiAgICBsZXQgbGF0ZXN0VGltZVN0YW1wID0gTWF0aC5tYXguYXBwbHkoXG4gICAgICBNYXRoLm1heCxcbiAgICAgIFt0aGlzLnN0YXRlLndlZWtEYXRlXS5jb25jYXQodGhpcy5zdGF0ZS51c2VyVGFza3MubWFwKHQgPT4gdC5kYXRlVGltZSkpKTtcblxuICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uaW5zZXJ0KFt7XG4gICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgbGVhcm5pbmdHb2FsLFxuICAgICAgZGF0ZVRpbWU6IGxhdGVzdFRpbWVTdGFtcCArIDIwMDBcbiAgICB9XSk7XG5cbiAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFdlZWtQbGFubmVyQm94T3BlbihcIlwiLCB0cnVlKTtcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUxlYXJuaW5nR29hbChsZWFybmluZ0dvYWw6IFZpcnR1YWxMZWFybmluZ0dvYWwpIHtcbiAgICBpZiAobGVhcm5pbmdHb2FsLnRhc2tzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICghY29uZmlybSh0aGlzLmNvbnRleHQuaW50bC5mb3JtYXRNZXNzYWdlKHtpZDond2Vla3BsYW5uZXIuY29uZmlybVJlbW92ZUxlYXJuaW5nT2JqZWN0aXZlcycsIGRlZmF1bHRNZXNzYWdlOiAnVGEgYm9ydCBsw6RyYW5kZW3DpWwgc2FtdCB7bGVhcm5pbmdHb2Fsc051bWJlcn0gdXBwZ2lmdGVyPyd9LCB7bGVhcm5pbmdHb2Fsc051bWJlcjogbGVhcm5pbmdHb2FsLnRhc2tzLmxlbmd0aH0pKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uZGVsZXRlKGxlYXJuaW5nR29hbC5hbGxUYXNrcy5tYXAodCA9PiB0LmlkKSk7XG4gIH1cblxuICBhc3luYyBhZGRDdXN0b21UYXNrKGNvdXJzZU5hbWU6IHN0cmluZywgbGVhcm5pbmdHb2FsOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcbiAgICBsZXQgbGF0ZXN0VGltZVN0YW1wID0gTWF0aC5tYXguYXBwbHkoXG4gICAgICBNYXRoLm1heCxcbiAgICAgIFt0aGlzLnN0YXRlLndlZWtEYXRlXS5jb25jYXQodGhpcy5zdGF0ZS51c2VyVGFza3MubWFwKHQgPT4gdC5kYXRlVGltZSkpKTtcblxuICAgIC8qY29uc3QgZW1wdHlMZWFybmluZ0dvYWxQbGFjZWhvbGRlciA9IHRoaXMuc3RhdGUudXNlclRhc2tzLmZpbmQodXQgPT5cbiAgICAgIHV0Lm5hbWUgPT0gbnVsbCAmJlxuICAgICAgIXV0LmNvdXJzZU5hbWUgJiZcbiAgICAgIHV0LmxlYXJuaW5nR29hbCA9PT0gbGVhcm5pbmdHb2FsKTtcblxuICAgIGlmIChlbXB0eUxlYXJuaW5nR29hbFBsYWNlaG9sZGVyKSB7XG4gICAgICAvLyBIaWphY2sgbGVhcm5pbmctZ29hbCBwbGFjZWhvbGRlciBhbmQgbWFrZSBpdCB0aGUgcmVhbCB0YXNrLlxuICAgICAgLy8gVGhpcyB3aWxsIG1ha2UgdGhlIGxlYXJuaW5nIGdvYWwgZGlzYXBwZWFyIG9uY2UgdGhpcyB0YXNrXG4gICAgICAvLyBpcyBkZWxldGVkLlxuICAgICAgYXdhaXQgdXNlclRhc2tzUmVwby51cGRhdGUoW2VtcHR5TGVhcm5pbmdHb2FsUGxhY2Vob2xkZXJdLCB1dCA9PiB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odXQsIHsgbmFtZSwgZGVzY3JpcHRpb24sIHVybCB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7Ki9cbiAgICAgIC8vIEFkZCBhbm90aGVyIHRhc2sgdG8gc2FtZSBsZWFybmluZy1nb2FsXG4gICAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLmluc2VydChbe1xuICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICBkYXRlVGltZTogbGF0ZXN0VGltZVN0YW1wICsgMjAwMCxcbiAgICAgICAgY291cnNlTmFtZSxcbiAgICAgICAgbGVhcm5pbmdHb2FsLFxuICAgICAgICBuYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgdXJsXG4gICAgICB9XSk7XG4gICAgLy99XG4gIH1cblxuICBzZXRJc09wZW4oY291cnNlTmFtZTogc3RyaW5nLCBpc09wZW46IGJvb2xlYW4pIHtcbiAgICB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFdlZWtQbGFubmVyQm94T3Blbihjb3Vyc2VOYW1lLCBpc09wZW4pO1xuICB9XG5cbiAgYXN5bmMgc2V0VGFza0RvbmUodGFzazogVXNlclRhc2ssIGRvbmU6IGJvb2xlYW4pIHtcbiAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFRhc2tEb25lU3RhdGUodGFzaywgZG9uZSk7XG4gIH1cblxuICBhc3luYyBzZXRTdWJUYXNrRG9uZSh0YXNrOiBVc2VyVGFzaywgc3ViVGFzazogVXNlclN1YlRhc2ssIGRvbmU6IGJvb2xlYW4pIHtcbiAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFN1YlRhc2tEb25lU3RhdGUodGFzaywgc3ViVGFzay5pZCwgZG9uZSk7XG4gIH1cblxuICBhc3luYyBjb3B5RnJvbVByZXZpb3VzV2VlaygpIHtcbiAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtpc0NvcHlpbmdUYXNrczogdHJ1ZX0pO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHVzZXJUYXNrcywgb3BlbkNvdXJzZXMsIHdlZWtEYXRlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICBjb25zdCBwcmV2V2VlayA9IG1vbWVudCh3ZWVrRGF0ZSkuYWRkKC0xLCAnd2VlaycpO1xuICAgICAgY29uc3QgcHJldldlZWtObyA9IGdldEFkanVzdGVkV2VlayAocHJldldlZWspO1xuICAgICAgY29uc3QgcHJldktFRFdlZWsgPSBLRURXZWVrKHByZXZXZWVrLnllYXIoKSwgcHJldldlZWtObyk7XG4gICAgICAvLyBSZWFkIGxhc3Qgd2VlaydzIGdvYWxzIGFuZCB0YXNrc1xuICAgICAgbGV0IHByZXZUYXNrcyA9IGF3YWl0IHRoaXMucHJvcHMuZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxVc2VyVGFzaz4oXCJ1c2VydGFza3NcIiwge1xuICAgICAgICBmcm9tOiBwcmV2S0VEV2Vlay5ub3RCZWZvcmUsXG4gICAgICAgIHRvOiBwcmV2S0VEV2Vlay5ub3RBZnRlcixcbiAgICAgICAgcm9sZTogXCJVU0VSXCIsXG4gICAgICAgIGluY2x1ZGU6IFtcInRhc2tcIiwgXCJjb3Vyc2VcIiwgXCJhY2xcIl0sXG4gICAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXVxuICAgICAgfSk7XG4gICAgICBwcmV2VGFza3MgPSBwcmV2VGFza3NcbiAgICAgICAgLmZpbHRlcihwcmV2VGFzayA9PiAhcHJldlRhc2suZG9uZSkgIC8vIERvbid0IGNvcHkgZG9uZSB0YXNrc1xuICAgICAgICAuZmlsdGVyKHByZXZUYXNrID0+ICEhcHJldlRhc2submFtZSkgLy8gRG9uJ3QgY29weSBlbXB0eSBsZWFybmluZyBnb2Fsc1xuICAgICAgICAuZmlsdGVyKHByZXZUYXNrID0+ICF1c2VyVGFza3Muc29tZSh0YXNrT2ZDdXJyZW50V2VlayA9PlxuICAgICAgICAgIHRhc2tPZkN1cnJlbnRXZWVrLm5hbWUgPT09IHByZXZUYXNrLm5hbWUgJiZcbiAgICAgICAgICB0YXNrT2ZDdXJyZW50V2Vlay5sZWFybmluZ0dvYWwgPT09IHByZXZUYXNrLmxlYXJuaW5nR29hbCAmJlxuICAgICAgICAgIHRhc2tPZkN1cnJlbnRXZWVrLmNvdXJzZU5hbWUgPT09IHByZXZUYXNrLmNvdXJzZU5hbWUpKTsgLy8gSWdub3JlIGlkZW50aWNhbCB0YXNrcyAoYWxyZWFkeSBjb3BpZWQpXG4gICAgICAgICAgXG4gICAgICB2YXIgdGVzdCA9IFt3ZWVrRGF0ZV0uY29uY2F0KHVzZXJUYXNrcy5tYXAodCA9PiB0LmRhdGVUaW1lKSk7XG4gICAgICAvLyBOb3cgY3JlYXRlIGNvcGllcyBidXQgcGxhY2UgdGhlbSBpbiB0aGUgY3VycmVudCB3ZWVrLlxuICAgICAgbGV0IGxhdGVzdFRpbWVTdGFtcCA9IE1hdGgubWF4LmFwcGx5KE1hdGgubWF4LCBbd2Vla0RhdGVdLmNvbmNhdCh1c2VyVGFza3MubWFwKHQgPT4gdC5kYXRlVGltZSkpKTtcblxuICAgICAgY29uc3QgY29waWVzID0gcHJldlRhc2tzLnNvcnQoY29tcGFyZVByb3AoXCJkYXRlVGltZVwiKSkubWFwKHRhc2sgPT4ge1xuICAgICAgICBjb25zdCBjb3B5OiBVc2VyVGFzayA9IHsgLi4udGFzaywgZGF0ZVRpbWU6IGxhdGVzdFRpbWVTdGFtcCArPSAxMDAwIH07XG4gICAgICAgIGNvcHkuaWQgPSBjcmVhdGVVVUlEKCk7XG4gICAgICAgIGlmIChjb3B5LnN1YlRhc2tzKSB7XG4gICAgICAgICAgY29weS5zdWJUYXNrcyA9IGNvcHkuc3ViVGFza3MuZmlsdGVyKHN0ID0+ICFzdC5kb25lKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgY29weS4kZXRhZztcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU3RvcmUgaXRcbiAgICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uaW5zZXJ0KGNvcGllcyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2lzQ29weWluZ1Rhc2tzOiBmYWxzZX0pO1xuICAgIH1cbiAgfVxuXG4gIGdldEhlYWRlclRpdGxlKCl7XG4gICAgcmV0dXJuIDxoND48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmxvZ0Jvb2tcIiAgZGVmYXVsdE1lc3NhZ2U9XCJMb2dnYm9rXCIvPjwvaDQ+O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHdlZWtOdW1iZXIgPSBtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkud2VlaygpO1xuICAgIGNvbnN0IHNob3dQcm9ncmVzc0NoYXJ0cyA9IGZlYXR1cmVzLndlZWtwbGFubmVyQ2hhcnRzO1xuICAgIC8vY29uc29sZS5sb2coXCJXZWVreWRhdGU6IFwiICArIG5ldyBEYXRlKHRoaXMuc3RhdGUud2Vla0RhdGUpICsgXCIgd2hpY2ggaXMgd2VlayBubyBcIiArIHdlZWtOdW1iZXIpO1xuICAgIGNvbnN0IGN1cnJlbnRXZWVrID0gbW9tZW50KCkud2VlaygpO1xuICAgIGNvbnN0IHRhc2tTZXRzID0gcmVmaW5lKHRoaXMuc3RhdGUudXNlclRhc2tzKTtcbiAgICBjb25zdCB7IGRpYWxvZ3MsIHdlZWtUZXh0c1VULCBzdHJhdGVneSwgYXNzZXNzbWVudCwgaXNMb2FkaW5nLCBpc0NvcHlpbmdUYXNrcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpc1NhdmluZyA9IHdlZWtUZXh0c1VUICYmICh3ZWVrVGV4dHNVVC4kbWV0YSA9PT0gJ2FkZGluZycgfHwgd2Vla1RleHRzVVQuJG1ldGEgPT09ICd1cGRhdGluZycpO1xuICAgIGNvbnN0IGlzU3RyYXRlZ3lFZGl0ZWQgPSAhIXdlZWtUZXh0c1VUICYmIChzdHJhdGVneSAhPT0gd2Vla1RleHRzVVQud2Vla1RleHRzLnN0cmF0ZWd5KTtcbiAgICBjb25zdCBpc0Fzc2Vzc21lbnRFZGl0ZWQgPSAhIXdlZWtUZXh0c1VUICYmIChhc3Nlc3NtZW50ICE9PSB3ZWVrVGV4dHNVVC53ZWVrVGV4dHMuYXNzZXNzbWVudCk7XG4gICAgY29uc3QgZW5hYmxlU2F2ZUJ1dHRvbiA9ICFpc1NhdmluZyAmJiAoaXNTdHJhdGVneUVkaXRlZCB8fCBpc0Fzc2Vzc21lbnRFZGl0ZWQpO1xuXG4gICAgdmFyIGNoYXJ0VGFza3MgPSBnZXRXZWVrcGxhbm5lclByb2dyZXNzRGF0YSh0YXNrU2V0cyk7XG5cbiAgICB2YXIgcGVyY2VudGFnZSA9IHRhc2tTZXRzLmxlbmd0aCA+IDAgPyBjaGFydFRhc2tzLmNvbXBsZXRlZFRhc2tzIC8gY2hhcnRUYXNrcy50b3RhbE51bWJlck9mVGFza3MgKiAxMDAgOiAwO1xuICAgIHJldHVybiA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2BrZWRfYm94ZWQgd2Vla1BsYW5uZXIke3dlZWtOdW1iZXIgPT09IGN1cnJlbnRXZWVrID8gXCIgY3VycmVudFdlZWtcIiA6IFwiXCJ9YH1cbiAgICAgICAgb25LZXlEb3duPXtldiA9PiB7XG4gICAgICAgICAgaWYgKGV2LndoaWNoID09PSA4MyAmJiBldi5jdHJsS2V5KSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKCFpc1NhdmluZyAmJiB0aGlzLmlzV2Vla1RleHRzRWRpdGVkKCkpIHtcbiAgICAgICAgICAgICAgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2IudHJpZ2dlckNoYW5nZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH19PlxuICAgICAgICB7c2hvd1Byb2dyZXNzQ2hhcnRzICYmIHRoaXMuZ2V0SGVhZGVyVGl0bGUoKX1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aWRnZXRzXCI+XG4gICAgICAgICAge3Nob3dQcm9ncmVzc0NoYXJ0cyA/IDxkaXYgY2xhc3NOYW1lPVwicHJvZ3Jlc3NCYXJcIj48UHJvZ3Jlc3MgcGVyY2VudGFnZSA9IHtwZXJjZW50YWdlfS8+PC9kaXY+IDogdGhpcy5nZXRIZWFkZXJUaXRsZSgpfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgd2Vla1NlbGVjdGB9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxuICAgICAgICAgICAgICA8cD48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLndlZWtOdW1iZXJcIiB2YWx1ZXM9e3t3ZWVrTnVtYmVyOiB3ZWVrTnVtYmVyfX0gZGVmYXVsdE1lc3NhZ2U9XCJWZWNrYSB7d2Vla051bWJlcn1cIi8+PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnByZXZXZWVrKCl9PlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtbGVmdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpID0+IHRoaXMubmV4dFdlZWsoKX0+XG4gICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1yaWdodFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAge3Rhc2tTZXRzLmxlbmd0aCA+IDAgJiYgPGhyIC8+fVxuXG4gICAgICAgIHt0YXNrU2V0cy5tYXAocHJvcHMgPT5cbiAgICAgICAgICA8VXNlclRhc2tzQm94XG4gICAgICAgICAgICBrZXk9e3Byb3BzLmNvdXJzZU5hbWV9XG4gICAgICAgICAgICB7Li4ucHJvcHN9XG4gICAgICAgICAgICBjb3Vyc2VOYW1lPXtwcm9wcy5jb3Vyc2VOYW1lfVxuICAgICAgICAgICAgbGVhcm5pbmdHb2Fscz17cHJvcHMubGVhcm5pbmdHb2Fsc31cbiAgICAgICAgICAgIHZpZXdDb3Vyc2VVcmw9e3RoaXMucHJvcHMudmlld0NvdXJzZVVybH1cbiAgICAgICAgICAgIG9wZW5Db3Vyc2VzPXt0aGlzLnN0YXRlLm9wZW5Db3Vyc2VzfVxuICAgICAgICAgICAgYWRkT3duVGFzaz17KGNvdXJzZU5hbWU6IHN0cmluZywgbGVhcm5pbmdHb2FsTmFtZTogc3RyaW5nKSA9PiB0aGlzLm9wZW5BZGRPd25UYXNrRGlhbG9nKGNvdXJzZU5hbWUsIGxlYXJuaW5nR29hbE5hbWUpfVxuICAgICAgICAgICAgc2V0SXNPcGVuPXt0aGlzLnNldElzT3Blbi5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgc2V0VGFza0RvbmU9e3RoaXMuc2V0VGFza0RvbmUuYmluZCh0aGlzKX1cbiAgICAgICAgICAgIHNldFN1YlRhc2tEb25lPXt0aGlzLnNldFN1YlRhc2tEb25lLmJpbmQodGhpcyl9XG4gICAgICAgICAgICBlZGl0VGFzaz17dGFzayA9PiB0aGlzLmVkaXRUYXNrKHRhc2spfVxuICAgICAgICAgICAgZWRpdFN1YlRhc2s9eyh0YXNrLCBzdWJUYXNrKSA9PiB0aGlzLmVkaXRTdWJUYXNrKHRhc2ssIHN1YlRhc2spfVxuICAgICAgICAgICAgcmVtb3ZlTGVhcm5pbmdHb2FsPXtsZyA9PiB0aGlzLnJlbW92ZUxlYXJuaW5nR29hbChsZyl9IFxuICAgICAgICAgICAgZGlzcGxheVByb2dyZXNzID0ge3Nob3dQcm9ncmVzc0NoYXJ0c31cbiAgICAgICAgICAgIHByb2dyZXNzRGF0YSA9IHtjaGFydFRhc2tzLnN1YmplY3REYXRhW3Byb3BzLmNvdXJzZU5hbWVdfSAvPil9XG5cbiAgICAgICAgPGhyIC8+XG5cbiAgICAgICAge2lzTG9hZGluZyA/IDxTcGlubmVyIC8+IDogPGRpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9e2V2ID0+IHRoaXMub3BlbkFkZEdvYWxEaWFsb2coKX0+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1saXN0LWFsdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIubGVhcm5pbmdHb2FsXCIgZGVmYXVsdE1lc3NhZ2U9XCJFZ2V0IGzDpHJhbmRlbcOlbFwiLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0blwiIHN0eWxlPXtpc0NvcHlpbmdUYXNrcyA/IHtvcGFjaXR5OiAwLjV9IDogdW5kZWZpbmVkfSBvbkNsaWNrPXtldiA9PiAoIWlzQ29weWluZ1Rhc2tzKSAmJiB0aGlzLmNvcHlGcm9tUHJldmlvdXNXZWVrKCl9PlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtY2xvbmVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmNvcHlQcmV2aW91c1dlZWtUYWtzXCIgZGVmYXVsdE1lc3NhZ2U9XCJLb3BpZXJhIGVqIGtsYXJhIGZyw6VuIGbDtnJlZ8OlZW5kZSB2ZWNrYVwiLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8T3BlbkNsb3NlQm94XG4gICAgICAgICAgICB0aXRsZT17PGg1PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuc3RyYXRlZ3lBbmRFdmFsdWF0aW9uXCIgZGVmYXVsdE1lc3NhZ2U9XCJTdHJhdGVnaSAmIFV0dsOkcmRlcmluZ1wiLz48L2g1Pn1cbiAgICAgICAgICAgIGhlYWRlck9wZW49e3RoaXMuc3RhdGUub3BlbkNvdXJzZXNbXCJTdHJhdFV0dlwiXX1cbiAgICAgICAgICAgIG9uT3BlbkNsb3NlPXtiZWNhbWVPcGVuID0+IHRoaXMuc2V0SXNPcGVuKFwiU3RyYXRVdHZcIiwgYmVjYW1lT3Blbil9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGgzPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuc3RyYXRlZ3lcIiBkZWZhdWx0TWVzc2FnZT1cIlN0cmF0ZWdpXCIvPjwvaDM+XG4gICAgICAgICAgICA8cD48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLnN0cmF0ZWd5RGVzY3JpcHRpb25cIiBkZWZhdWx0TWVzc2FnZT1cIkh1ciBqYWcgc2thIGfDtnJhIGbDtnIgYXR0IGzDpHJhIG1pZy5cIi8+PC9wPlxuICAgICAgICAgICAgPGhyLz5cbiAgICAgICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3ZWVrcGxhbm5lci10ZXh0YXJlYVwiXG4gICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmVudi50dXRvcmVkfVxuICAgICAgICAgICAgICB2YWx1ZT17c3RyYXRlZ3kgJiYgc3RyYXRlZ3kuc3Vic3RyKDAsIE1BWF9TVFJBVEVHWV9MRU5HVEgpfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3N0cmF0ZWd5OiAoZXYudGFyZ2V0LnZhbHVlIHx8ICcnKS5zdWJzdHIoMCwgTUFYX1NUUkFURUdZX0xFTkdUSCl9KTtcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYi50cmlnZ2VyQ2hhbmdlKDUwMCk7XG4gICAgICAgICAgICAgIH19IC8+XG5cbiAgICAgICAgICAgIDxoMz48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmV2YWx1YXRpb25cIiBkZWZhdWx0TWVzc2FnZT1cIlV0dsOkcmRlcmluZ1wiLz48L2gzPlxuICAgICAgICAgICAgPHA+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5ldmFsdWF0aW9uRGVzY3JpcHRpb25cIiBkZWZhdWx0TWVzc2FnZT1cIlJlZmxla3Rpb24ga3JpbmcgZGluIGFyYmV0c2luc2F0cyBvY2ggZGluYSB2YWxkYSBzdHJhdGVnaWVyIHVuZGVyIHZlY2thbi5VdHbDpHJkZXJhIGkgZsO2cmjDpWxsYW5kZSB0aWxsIGRpbmEgbcOlbC5cIi8+PC9wPlxuICAgICAgICAgICAgPGhyLz5cbiAgICAgICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJ3ZWVrcGxhbm5lci10ZXh0YXJlYVwiXG4gICAgICAgICAgICAgIHZhbHVlPXthc3Nlc3NtZW50ICYmIGFzc2Vzc21lbnQuc3Vic3RyKDAsIE1BWF9BU1NFU1NNRU5UX0xFTkdUSCl9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnByb3BzLmVudi50dXRvcmVkfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2Fzc2Vzc21lbnQ6IChldi50YXJnZXQudmFsdWUgfHwgJycpLnN1YnN0cigwLCBNQVhfQVNTRVNTTUVOVF9MRU5HVEgpfSlcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYi50cmlnZ2VyQ2hhbmdlKDUwMCk7XG4gICAgICAgICAgICAgIH0gfS8+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0blwiXG4gICAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgICAgICBzdHlsZT17ZW5hYmxlU2F2ZUJ1dHRvbiA/IHt9IDoge29wYWNpdHk6IDAuNX19XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT4haXNTYXZpbmcgJiYgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2IudHJpZ2dlckNoYW5nZSgwKX0+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZmxvcHB5LW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIiAvPlxuICAgICAgICAgICAgICAgICAge2VuYWJsZVNhdmVCdXR0b24gPyA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImNvbW1vbi5zYXZlXCIgZGVmYXVsdE1lc3NhZ2U9XCIgU3BhcmFcIi8+IDogPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZWRcIiBkZWZhdWx0TWVzc2FnZT1cIiBTcGFyYWRcIi8+fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvT3BlbkNsb3NlQm94PlxuXG4gICAgICAgIDwvZGl2Pn1cbiAgICAgIDwvZGl2PlxuICAgICAgPERpYWxvZ3NcbiAgICAgICAgZGlhbG9ncz17ZGlhbG9nc31cbiAgICAgICAgcG9wRGlhbG9nPXsoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKFxuICAgICAgICAgICAgICAoe2RpYWxvZ3N9KSA9PiAoeyBkaWFsb2dzOiBkaWFsb2dzLnNsaWNlKDAsIGRpYWxvZ3MubGVuZ3RoIC0gMSkgfSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvPlxuICAgIDwvZGl2PlxuICB9XG59IiwiaW1wb3J0IHsgVXNlclRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBVc2VyVGFza3NCb3hQcm9wcyB9IGZyb20gJy4vdXNlci10YXNrcy1ib3gnO1xuaW1wb3J0IHsgYXJyYXlUb01hcCwgYXJyYXlUb0xvb2t1cCwgY29tcGFyZVByb3AsIEwgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBWaXJ0dWFsTGVhcm5pbmdHb2FsIHtcbiAgbmFtZTogc3RyaW5nO1xuICBhbGxUYXNrczogVXNlclRhc2tbXTtcbiAgc3RlcD86IG51bWJlcjtcbiAgdXJsPzogc3RyaW5nO1xuICB0YXNrczogVXNlclRhc2tbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZmluZSh0YXNrczogVXNlclRhc2tbXSkge1xuICBjb25zdCByZXN1bHQgPSBbXSBhcyBQYXJ0aWFsPFVzZXJUYXNrc0JveFByb3BzPltdO1xuICBjb25zdCBtYXBwZXIgPSB7fSBhcyB7IFtuYW1lOiBzdHJpbmddOiBVc2VyVGFza3NCb3hQcm9wcyB9O1xuICBjb25zdCB0YXNrc1BlckNvdXJzZSA9IGFycmF5VG9Mb29rdXAodGFza3MsIHQgPT4gdC5jb3Vyc2VOYW1lIHx8ICcnKTtcbiAgZm9yIChjb25zdCBjb3Vyc2VOYW1lIG9mIE9iamVjdC5rZXlzKHRhc2tzUGVyQ291cnNlKS5zb3J0KCkuZmlsdGVyKHggPT4geCkuY29uY2F0KHRhc2tzUGVyQ291cnNlWycnXSA/XG4gICAgWycnXSA6IFtdKSkge1xuICAgIGNvbnN0IGNvdXJzZVRhc2tzID0gdGFza3NQZXJDb3Vyc2VbY291cnNlTmFtZV0gfHwgdGFza3NQZXJDb3Vyc2VbJyddO1xuICAgIGNvbnN0IHRhc2tzUGVyTGVhcm5pbmdHb2FsID0gYXJyYXlUb0xvb2t1cChjb3Vyc2VUYXNrcywgdCA9PiB0LmxlYXJuaW5nR29hbCk7XG4gICAgY29uc3QgcmVzdWx0TGVhcm5pbmdHb2FsczogVmlydHVhbExlYXJuaW5nR29hbFtdID0gW107XG4gICAgZm9yIChjb25zdCBsZWFybmluZ0dvYWwgb2YgT2JqZWN0LmtleXModGFza3NQZXJMZWFybmluZ0dvYWwpKSB7XG4gICAgICBjb25zdCBsZ1Rhc2tzID0gdGFza3NQZXJMZWFybmluZ0dvYWxbbGVhcm5pbmdHb2FsXS5zb3J0KGNvbXBhcmVQcm9wKFwiZGF0ZVRpbWVcIikpO1xuICAgICAgY29uc3QgbGVhcm5pbmdHb2FsVGFzayA9IGxnVGFza3NcbiAgICAgICAgLmZpbHRlcih0ID0+IHQubmFtZSA9PSBudWxsKSAvLyBJZiBuYW1lIGlzIHVuZGVmaW5lZCBvciBudWxsLCB0aGlzIHJlcHJlc2VudHMgYSBsZWFybmluZyBnb2FsXG4gICAgICAgIFswXTtcbiAgICAgIGNvbnN0IHVybCA9IGxlYXJuaW5nR29hbFRhc2sgJiYgbGVhcm5pbmdHb2FsVGFzay51cmw7XG4gICAgICByZXN1bHRMZWFybmluZ0dvYWxzLnB1c2goe1xuICAgICAgICBuYW1lOiBsZWFybmluZ0dvYWwsXG4gICAgICAgIGFsbFRhc2tzOiBsZ1Rhc2tzLFxuICAgICAgICB1cmwsXG4gICAgICAgIHN0ZXA6IGxnVGFza3MubWFwKHQgPT4gdC5zdGVwKS5maWx0ZXIoc3RlcCA9PiBzdGVwKVswXSxcbiAgICAgICAgdGFza3M6IGxnVGFza3MuZmlsdGVyKHQgPT4gdC5uYW1lKVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgIGNvdXJzZU5hbWUsXG4gICAgICBsZWFybmluZ0dvYWxzOiByZXN1bHRMZWFybmluZ0dvYWxzXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCB7IFVzZXJUYXNrc0JveFByb3BzIH0gZnJvbSBcIi4uL3dlZWtwbGFubmVyL3VzZXItdGFza3MtYm94XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrcGxhbm5lclByb2dyZXNzRGF0YSh0YXNrU2V0czogUGFydGlhbDxVc2VyVGFza3NCb3hQcm9wcz5bXSkge1xuICAgIHZhciBjaGFydFRhc2tzOiB7XG4gICAgICAgIGNvbXBsZXRlZFRhc2tzOiBudW1iZXIsIFxuICAgICAgICB0b3RhbE51bWJlck9mVGFza3M6IG51bWJlcixcbiAgICAgICAgc3ViamVjdERhdGE6IHtcbiAgICAgICAgICAgIFtjb2x1bW5IZWFkZXI6IHN0cmluZ106IHsgY29tcGxldGVkTnVtYmVyT2ZUYXNrczogbnVtYmVyLCBudW1iZXJPZlRhc2tzOiBudW1iZXIgfVxuICAgICAgICB9XG4gICAgfSA9IHtjb21wbGV0ZWRUYXNrczogMCwgdG90YWxOdW1iZXJPZlRhc2tzOiAwICwgc3ViamVjdERhdGE6IHt9fTtcblxuICAgIHRhc2tTZXRzLmZvckVhY2goZWxlbSA9PiBlbGVtLmxlYXJuaW5nR29hbHMuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgdmFyIHN1YmplY3RDb21wbGV0ZWRUYXNrcyA9IHgudGFza3MuZmlsdGVyKHQgPT4gdC5kb25lKS5sZW5ndGg7XG4gICAgICAgIGxldCBjb3Vyc2VTdWJqZWN0RGF0YSA9IGNoYXJ0VGFza3Muc3ViamVjdERhdGFbZWxlbS5jb3Vyc2VOYW1lXTtcbiAgICAgICAgaWYgKCFjb3Vyc2VTdWJqZWN0RGF0YSkge1xuICAgICAgICAgICAgY291cnNlU3ViamVjdERhdGEgPSBjaGFydFRhc2tzLnN1YmplY3REYXRhW2VsZW0uY291cnNlTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgY29tcGxldGVkTnVtYmVyT2ZUYXNrczogMCxcbiAgICAgICAgICAgICAgICBudW1iZXJPZlRhc2tzOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvdXJzZVN1YmplY3REYXRhLmNvbXBsZXRlZE51bWJlck9mVGFza3MgKz0gc3ViamVjdENvbXBsZXRlZFRhc2tzO1xuICAgICAgICBjb3Vyc2VTdWJqZWN0RGF0YS5udW1iZXJPZlRhc2tzICs9IHgudGFza3MubGVuZ3RoO1xuXG4gICAgICAgIGNoYXJ0VGFza3MuY29tcGxldGVkVGFza3MgKz0gc3ViamVjdENvbXBsZXRlZFRhc2tzO1xuICAgICAgICBjaGFydFRhc2tzLnRvdGFsTnVtYmVyT2ZUYXNrcyArPSB4LnRhc2tzLmxlbmd0aDtcbiAgICB9KSk7XG4gICAgcmV0dXJuIGNoYXJ0VGFza3M7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtJztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGRpYWxvZ3M6IFJlYWN0LkNvbXBvbmVudFtdO1xuICBwb3BEaWFsb2c6ICgpPT52b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgRGlhbG9ncyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBsYXN0RGl2OiBIVE1MRGl2RWxlbWVudCB8IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogUHJvcHMpIHtcbiAgICBpZiAodGhpcy5sYXN0RGl2ICE9PSBudWxsICYmIHByZXZQcm9wcy5kaWFsb2dzLmxlbmd0aCA+IHRoaXMucHJvcHMuZGlhbG9ncy5sZW5ndGgpIHtcbiAgICAgIC8vIEEgZGlhbG9nIHdhcyBjbG9zZWQuIE5vdyBmb2N1cyB0aGUgbGFzdCBkaWFsb2c6XG4gICAgICAkKGZpbmRET01Ob2RlKHRoaXMubGFzdERpdikpLmZpbmQoJzppbnB1dCcpLmZpcnN0KCkuZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIgKCkge1xuICAgIHRoaXMubGFzdERpdiA9IG51bGw7XG4gICAgY29uc3Qge2RpYWxvZ3MsIHBvcERpYWxvZ30gPSB0aGlzLnByb3BzO1xuICAgICQoJ2JvZHknKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgZGlhbG9ncy5sZW5ndGggPiAwKTtcbiAgICAkKCdib2R5JykuY3NzKCdvdmVyZmxvdycsIGRpYWxvZ3MubGVuZ3RoID4gMCA/ICdoaWRkZW4nIDogJ2F1dG8nKTtcblxuICAgIHJldHVybiBkaWFsb2dzLmxlbmd0aCA+IDAgJiYgPGRpdj5cbiAgICAgIHtkaWFsb2dzLm1hcCgoZGlhbG9nLCBpZHgpID0+IHtcbiAgICAgICAgbGV0IGRpdjogSFRNTERpdkVsZW1lbnQ7XG4gICAgICAgIGZ1bmN0aW9uIG9uS2V5UHJlc3MoZXY6IFJlYWN0LktleWJvYXJkRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSB7XG4gICAgICAgICAgaWYgKGV2LndoaWNoID09PSAxMyAmJiAoIWV2LnRhcmdldCB8fCAoZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50KS50YWdOYW1lICE9PSAnVEVYVEFSRUEnKSkge1xuICAgICAgICAgICAgJChmaW5kRE9NTm9kZShkaXYpKS5maW5kKCcuYnRuLWRlZmF1bHQnKS5jbGljaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvbktleURvd24oZXYpIHtcbiAgICAgICAgICBpZiAoZXYud2hpY2ggPT09IDI3KSB7IC8vIEVzY2FwZVxuICAgICAgICAgICAgcG9wRGlhbG9nKCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGV2LndoaWNoID09PSA4MyAmJiAoZXYuY3RybEtleSB8fCBldi5tZXRhS2V5KSkgeyAvLyBDVFJMLVNcbiAgICAgICAgICAgIGNvbnN0IGRvbU5vZGUgPSBmaW5kRE9NTm9kZShkaXYpO1xuICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRCdXR0b24gPSAkKGRvbU5vZGUpLmZpbmQoJy5idG4tZGVmYXVsdCcpO1xuICAgICAgICAgICAgZGVmYXVsdEJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiA8ZGl2IGtleT17aWR4fT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGFya2VuXCIgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtcGFnZS13cmFwXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibW9kYWwtcGFnZVwiIHJlZj17ZWxlbSA9PiB7XG4gICAgICAgICAgZGl2ID0gZWxlbTtcbiAgICAgICAgICBpZiAoaWR4ID09PSBkaWFsb2dzLmxlbmd0aCAtIDEpIHRoaXMubGFzdERpdiA9IGVsZW07XG4gICAgICAgIH19XG4gICAgICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgICAgIGFyaWEtZGlzYWJsZWQ9e2lkeCA8IGRpYWxvZ3MubGVuZ3RoIC0gMX1cbiAgICAgICAgICAgIG9uS2V5UHJlc3M9e29uS2V5UHJlc3N9XG4gICAgICAgICAgICBvbktleURvd249e29uS2V5RG93bn0+XG4gICAgICAgICAge2RpYWxvZ31cbiAgICAgICAgICA8UmVtb3ZlSXRlbSBvbkNsaWNrPXtwb3BEaWFsb2d9IC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdG9wRmxvYXRzXCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+fSl9XG4gIDwvZGl2PjtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB2aXNpYmxlOiBib29sZWFuO1xuICB0ZXh0OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgb25Db25maXJtOiAoKT0+dm9pZDtcbiAgb25DYW5jZWw6ICgpPT52b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29uZmlybWF0aW9uIChwcm9wczogUHJvcHMpIHtcbiAgcmV0dXJuIDxkaXZcbiAgICBjbGFzc05hbWU9e2Bjb25maXJtYXRpb24tYm94ICR7cHJvcHMuY2xhc3NOYW1lfSR7cHJvcHMudmlzaWJsZSA/IFwiIHZpc2libGVcIiA6IFwiXCJ9YH0+XG4gICAgPHA+e3Byb3BzLnRleHR9PC9wPlxuICAgIDxidXR0b24gb25DbGljaz17KCk9PnByb3BzLm9uQ29uZmlybSgpfT5PSzwvYnV0dG9uPlxuICAgIDxidXR0b24gb25DbGljaz17KCk9PnByb3BzLm9uQ2FuY2VsKCl9PkF2YnJ5dDwvYnV0dG9uPlxuICA8L2Rpdj47XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb3Vyc2UsIENvdXJzZU1vZHVsZSwgVGFzaywgVXNlclRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIH0gZnJvbSBcIi4uLy4uL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXBlcnNpc3RlZC1zdGF0ZVwiO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCwgQmF0Y2hSdW5uZXIsIERvY3VtZW50QWNjZXNzIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgdXNlclRhc2tzUmVwbyB9IGZyb20gJy4uLy4uLy4uL3JlcG9zL3VzZXItdGFza3MtcmVwbyc7XG5pbXBvcnQgeyBhcnJheVRvTWFwLCBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xuaW1wb3J0IHsgQ29uZmlybWF0aW9uIH0gZnJvbSAnLi9jb25maXJtYXRpb24nO1xuaW1wb3J0IHsgTGFuZ3VhZ2VDb250ZXh0IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGxlYXJuaW5nVGFza3M6IExlYXJuaW5nTW9kdWxlVGFza1tdXG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHdlZWtEYXRlOiBudW1iZXI7XG4gIHVzZXJUYXNrczogVXNlclRhc2tbXTtcbiAgY29uZmlybWF0aW9uczogc3RyaW5nW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdNb2R1bGVUYXNrIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbiAgLyoqIGNvdXJzZU5hbWVcbiAgICogRm9yIEtHOiBjb3Vyc2VOYW1lXG4gICAqIEZvciBLUzogU3ViamVjdCBuYW1lXG4gICAqL1xuICBjb3Vyc2VOYW1lOiBzdHJpbmc7XG4gIC8qKiBsZWFybmluZ0dvYWxcbiAgICogRm9yIEtHOiBtb2R1bGUgbmFtZSBvciBsZWFybmluZyBnb2FsIG9mIHRoZSB0YXNrXG4gICAqIEZvciBLUy9zdGVwLWNvdXJzZTogY291cnNlIG5hbWVcbiAgICogRm9yIEtTL3RoZW1lLWNvdXJzZTogbGVhcm5pbmcgZ29hbFxuICAgKi9cbiAgbGVhcm5pbmdHb2FsOiBzdHJpbmc7XG4gIC8qKiBTdGVwXG4gICAqIE9ubHkgcHJlc2VudCBpbiBLUy9zdGVwLWNvdXJzZVxuICAgKi9cbiAgc3RlcD86IG51bWJlcjtcbiAgLyoqIHRhc2tcbiAgICogT25seSBmb3IgY291cnNlcyBidWlsdCBieSBjb3Vyc2VidWlsZGVyXG4gICAqL1xuICB0YXNrPzogVGFzaztcbiAgLyoqIGNvdXJzZVxuICAgKiBPbmx5IGZvciBjb3Vyc2VzIGJ1aWx0IGJ5IGNvdXJzZWJ1aWxkZXJcbiAgICovXG4gIGNvdXJzZT86IENvdXJzZTtcbiAgLyoqIGNvdXJzZUluZm9cbiAgICogT25seSBmb3IgY291cnNlcyBidWlsZCBieSBzdWJqZWN0cGxhbm5lclxuICAgKi9cbiAgY291cnNlSW5mbz86IHtcbiAgICBzY2hvb2w6IHN0cmluZyAvLyBTY2hvb2wgbmFtZVxuICAgIGNvdXJzZTogc3RyaW5nIC8vIENvdXJzZSBJbnN0YW5jZSBJRFxuICAgIHRhYjogc3RyaW5nICAgIC8vIENvdXJzZVRhYiBJRFxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUYXNrTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdXNlclRhc2tzOiBbXSxcbiAgICAgIHdlZWtEYXRlOiBEYXRlLm5vdygpLFxuICAgICAgY29uZmlybWF0aW9uczogW11cbiAgICB9XG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTsgICAgXG4gIH1cblxuICBvbkNoYW5nZSAodXNlclRhc2tzOiBVc2VyVGFza1tdLCBwZXJzaXN0ZWQ6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUpIHtcbiAgICBpZiAocGVyc2lzdGVkLndlZWtEYXRlICE9PSB0aGlzLnN0YXRlLndlZWtEYXRlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY29uZmlybWF0aW9uczogW11cbiAgICAgIH0pXG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdXNlclRhc2tzLFxuICAgICAgd2Vla0RhdGU6IHBlcnNpc3RlZC53ZWVrRGF0ZVxuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdXNlclRhc2tzUmVwby5zdWJzY3JpYmUodGhpcy5vbkNoYW5nZSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB1c2VyVGFza3NSZXBvLnVuc3Vic2NyaWJlKHRoaXMub25DaGFuZ2UpO1xuICB9XG5cbiAgYXN5bmMgdG9nZ2xlVGFzayAobGVhcm5pbmdUYXNrOiBMZWFybmluZ01vZHVsZVRhc2spIHtcbiAgICBjb25zdCB1c2VyVGFza3MgPSB0aGlzLnN0YXRlLnVzZXJUYXNrcy5maWx0ZXIodXQgPT4ge1xuICAgICAgcmV0dXJuIGxlYXJuaW5nVGFzay50YXNrID9cbiAgICAgICAgdXQudGFzayAmJiB1dC50YXNrLnNvbWUodCA9PiB0LmlkID09PSBsZWFybmluZ1Rhc2suaWQpIDpcbiAgICAgICAgdXQuc2l0ZVZpc2lvblBhZ2VJZCA9PT0gbGVhcm5pbmdUYXNrLmlkO1xuICAgIH0pO1xuICAgIGNvbnN0IHt3ZWVrRGF0ZX0gPSB0aGlzLnN0YXRlO1xuICAgIFxuICAgIGlmICh1c2VyVGFza3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBObyB0YXNrIG1hdGNoZXMgdGhpcyBsZWFybmluZ01vZHVsZVRhc2sgLSBub3QgcHJlc2VudCBpbiB3ZWVrcGxhbm5lci5cbiAgICAgIGxldCBsYXRlc3RUaW1lU3RhbXAgPSBNYXRoLm1heC5hcHBseShcbiAgICAgICAgTWF0aC5tYXgsXG4gICAgICAgIFt3ZWVrRGF0ZV0uY29uY2F0KHRoaXMuc3RhdGUudXNlclRhc2tzLm1hcCh0ID0+IHQuZGF0ZVRpbWUpKSk7XG5cbiAgICAgIGNvbnN0IHVzZXJUYXNrOiBVc2VyVGFzayA9IHtcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgY291cnNlTmFtZTogbGVhcm5pbmdUYXNrLmNvdXJzZU5hbWUsXG4gICAgICAgIGRhdGVUaW1lOiBsYXRlc3RUaW1lU3RhbXAgKyAyMDAwLFxuICAgICAgICBsZWFybmluZ0dvYWw6IGxlYXJuaW5nVGFzay5sZWFybmluZ0dvYWwsXG4gICAgICAgIG5hbWU6IGxlYXJuaW5nVGFzay5uYW1lLFxuICAgICAgICB1cmw6IGxlYXJuaW5nVGFzay51cmwsXG4gICAgICAgIGFjbDogW1xuICAgICAgICAgIC8vIERlZmF1bHQgQUNMOiBMZXQgdXNlciBzZWxmIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhpcyBpdGVtOlxuICAgICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcImVtYWlsXCIsIGVudi5jdXJyZW50VXNlci5tYWlsLCBcIlNcIiksXG4gICAgICAgICAgLy8gQWRkaXRpb25hbCBBQ0w6IExldCBlbXBsb3llZXMgb24gc2FtZSBzY2hvb2wgaGF2ZSByZWFkIGFjY2VzcyB0byBpdC5cbiAgICAgICAgICAvLyBUaGlzIGN1cnJlbnRseSBvbmx5IGFwcGxpZXMgdG8gdGFza3MgdGhhdCByZWZlciB0byBjb3Vyc2UgdGFza3MgKG5vdCBjdXN0b20gdGFza3MhKVxuICAgICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcInNjaG9vbFJvbGVcIiwgYCR7ZW52LmN1cnJlbnRVc2VyLnNjaG9vbH0vRU1QTE9ZRUVgLCBcIlJcIilcbiAgICAgICAgXS5tYXAoYWMgPT4gYWMudG9TdHJpbmcoKSlcbiAgICAgIH07XG4gICAgICBpZiAobGVhcm5pbmdUYXNrLnRhc2sgJiYgbGVhcm5pbmdUYXNrLnRhc2suZGVhZGxpbmUpIHtcbiAgICAgICAgdXNlclRhc2suZGVhZGxpbmUgPSBsZWFybmluZ1Rhc2sudGFzay5kZWFkbGluZTtcbiAgICAgIH1cbiAgICAgIGlmIChsZWFybmluZ1Rhc2sudGFzaykge1xuICAgICAgICB1c2VyVGFzay50YXNrID0gW2xlYXJuaW5nVGFzay50YXNrXTtcbiAgICAgICAgaWYgKGxlYXJuaW5nVGFzay5jb3Vyc2UpIHtcbiAgICAgICAgICB1c2VyVGFzay5jb3Vyc2UgPSBbbGVhcm5pbmdUYXNrLmNvdXJzZV07XG4gICAgICAgIH0gZWxzZSBpZiAobGVhcm5pbmdUYXNrLmNvdXJzZUluZm8pIHtcbiAgICAgICAgICB1c2VyVGFzay5jb3Vyc2VJbmZvID0gbGVhcm5pbmdUYXNrLmNvdXJzZUluZm87XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVzZXJUYXNrLnNpdGVWaXNpb25QYWdlSWQgPSBsZWFybmluZ1Rhc2suaWQ7XG4gICAgICB9XG4gICAgICBpZiAobGVhcm5pbmdUYXNrLnN0ZXApIHtcbiAgICAgICAgdXNlclRhc2suc3RlcCA9IGxlYXJuaW5nVGFzay5zdGVwO1xuICAgICAgfVxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICB1c2VyVGFza3NSZXBvLnNldFdlZWtQbGFubmVyQm94T3BlbihsZWFybmluZ1Rhc2suY291cnNlTmFtZSwgdHJ1ZSksXG4gICAgICAgIHVzZXJUYXNrc1JlcG8uaW5zZXJ0KFt1c2VyVGFza10pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFscmVhZHkgcHJlc2VudCBpbiB3ZWVrcGxhbm5lci4gSXQncyB0aW1lIHRvIGRlbGV0ZSB0aG9zZSB0aGF0IG1hdGNoZWQgdXMuXG4gICAgICBhd2FpdCB1c2VyVGFza3NSZXBvLmRlbGV0ZSh1c2VyVGFza3MubWFwKHQgPT4gdC5pZCkpO1xuICAgIH1cbiAgICBcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3Qge2xlYXJuaW5nVGFza3N9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB1c2VyVGFza3MgPSBhcnJheVRvTWFwKHRoaXMuc3RhdGUudXNlclRhc2tzLCB1dCA9PiB1dC50YXNrICYmIHV0LnRhc2subGVuZ3RoID4gMCA/XG4gICAgICB1dC50YXNrLm1hcCh0ID0+IHQuaWQpWzBdIDogLy8gY291cnNlLWJ1aWxkZXIgdGFza3MgbG9va2VkIHVwIGJ5IGlkXG4gICAgICB1dC5zaXRlVmlzaW9uUGFnZUlkID8gdXQuc2l0ZVZpc2lvblBhZ2VJZCA6IC8vIG5vbi1jb3Vyc2UtYnVpbGRlciB0YXNrc1xuICAgICAgdXQudXJsKTtcbiAgICBjb25zdCB7Y29uZmlybWF0aW9uc30gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHdlZWtQbGFubmVyV2VlayA9IG1vbWVudCh0aGlzLnN0YXRlLndlZWtEYXRlKS53ZWVrKCk7XG4gICAgY29uc3QgY3VycmVudFdlZWsgPSBtb21lbnQoKS53ZWVrKCk7XG4gICAgY29uc3QgZm9yV2Vla1N0cmluZyA9IHdlZWtQbGFubmVyV2VlayA9PT0gY3VycmVudFdlZWsgPyBcIlwiIDpcbiAgICB3ZWVrUGxhbm5lcldlZWsgPT09IGN1cnJlbnRXZWVrICsgMSA/IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJ0YXNrTGlzdC5uZXh0V2Vla1Rhc2tcIiwgZGVmYXVsdE1lc3NhZ2U6XCJmw7ZyIG7DpHN0YSB2ZWNrYSAodnt3ZWVrfSlcIn0sIHt3ZWVrOiB3ZWVrUGxhbm5lcldlZWt9KSA6XG4gICAgd2Vla1BsYW5uZXJXZWVrID09PSBjdXJyZW50V2VlayAtIDEgPyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwidGFza0xpc3QubGFzdFdlZWtUYXNrXCIsIGRlZmF1bHRNZXNzYWdlOlwiZsO2ciBmw7ZycmEgdmVja2FuICh2e3dlZWt9KVwifSwge3dlZWs6IHdlZWtQbGFubmVyV2Vla30pIDpcbiAgICBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwidGFza0xpc3QuY3VycmVudFdlZWtUYXNrXCIsIGRlZmF1bHRNZXNzYWdlOlwiZsO2ciB2ZWNrYSB7d2Vla31cIn0sIHt3ZWVrOiB3ZWVrUGxhbm5lcldlZWt9KTtcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cbiAgICAgIHtsZWFybmluZ1Rhc2tzLm1hcCgobGVhcm5pbmdUYXNrLCBpZHgpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0xvb2t1cElkID0gbGVhcm5pbmdUYXNrLmlkO1xuICAgICAgICBjb25zdCB1c2VyVGFzayA9IHVzZXJUYXNrc1t0YXNrTG9va3VwSWRdIHx8IHskbWV0YTogJ2RlbGV0ZWQnfSBhcyBQYXJ0aWFsPFVzZXJUYXNrPjsgLy8gTm8gZXhpc3QgPSAkbWV0YTogJ2RlbGV0ZWQnXG4gICAgICAgIGNvbnN0IGlzV29ya2luZyA9IHVzZXJUYXNrLiRtZXRhID09PSAnYWRkaW5nJyB8fCB1c2VyVGFzay4kbWV0YSA9PT0gJ2RlbGV0aW5nJztcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB1c2VyVGFzay4kbWV0YSAhPT0gJ2RlbGV0ZWQnICYmIHVzZXJUYXNrLiRtZXRhICE9PSAnZGVsZXRpbmcnO1xuICAgICAgICBjb25zdCBkZXNjcmliZWRBY3Rpb24gPSBzZWxlY3RlZCA/XG4gICAgICAgIGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJ0YXNrTGlzdC5yZW1vdmVUYXNrRnJvbVdlZWtseVBsYW5uaW5nXCIsIGRlZmF1bHRNZXNzYWdlOlwiVGEgYm9ydCB1cHBnaWZ0ZW4gZnLDpW4gZWdlbiB2ZWNrb3BsYW5lcmluZyB7d2Vla31cIn0sIHt3ZWVrOiBmb3JXZWVrU3RyaW5nfSk6XG4gICAgICAgIGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJ0YXNrTGlzdC5hZGRUYXNrVG9XZWVrbHlQbGFubmluZ1wiLCBkZWZhdWx0TWVzc2FnZTpcIkzDpGdnIHRpbGwgdXBwZ2lmdGVuIGkgZWdlbiB2ZWNrb3BsYW5lcmluZyB7d2Vla31cIn0sIHt3ZWVrOiBmb3JXZWVrU3RyaW5nfSlcbiAgICAgICAgY29uc3QgY29uZmlybWF0aW9uVmlzaWJsZSA9XG4gICAgICAgICAgY29uZmlybWF0aW9ucy5zb21lKHRpZCA9PiB0YXNrTG9va3VwSWQgPT09IHRpZCk7XG5cbiAgICAgICAgcmV0dXJuIDxkaXYga2V5PXtsZWFybmluZ1Rhc2suaWR9PjxkaXYga2V5PXt0YXNrTG9va3VwSWR9IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgc2VsZWN0ZWRCb3gke3NlbGVjdGVkID8gJyBzZWxlY3RlZCcgOiAnJ31gfVxuICAgICAgICAgICAgICAgIHN0eWxlPXtpc1dvcmtpbmcgPyB7b3BhY2l0eTogMC41fToge319XG4gICAgICAgICAgICAgICAgb25DbGljaz17KCk9PiFpc1dvcmtpbmcgJiYgd2Vla1BsYW5uZXJXZWVrID09PSBjdXJyZW50V2VlayA/XG4gICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVRhc2sobGVhcm5pbmdUYXNrKSA6XG4gICAgICAgICAgICAgICAgICBjb25maXJtYXRpb25WaXNpYmxlID8gXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NvbmZpcm1hdGlvbnM6IGNvbmZpcm1hdGlvbnMuZmlsdGVyKHRpZCA9PiB0aWQgIT09IHRhc2tMb29rdXBJZCl9KSA6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NvbmZpcm1hdGlvbnM6IFsuLi5jb25maXJtYXRpb25zXS5jb25jYXQodGFza0xvb2t1cElkKX0pfVxuICAgICAgICAgICAgICAgIHRpdGxlPXtkZXNjcmliZWRBY3Rpb259PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgPGEgaHJlZj17bGVhcm5pbmdUYXNrLnVybH0+e2xlYXJuaW5nVGFzay5uYW1lfTwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxDb25maXJtYXRpb25cbiAgICAgICAgICAgIHZpc2libGU9e2NvbmZpcm1hdGlvblZpc2libGV9XG4gICAgICAgICAgICB0ZXh0PXtkZXNjcmliZWRBY3Rpb259XG4gICAgICAgICAgICBvbkNvbmZpcm09eygpPT57XG4gICAgICAgICAgICAgIHRoaXMudG9nZ2xlVGFzayhsZWFybmluZ1Rhc2spO1xuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtjb25maXJtYXRpb25zOiBjb25maXJtYXRpb25zLmZpbHRlcih0aWQgPT4gdGlkICE9PSB0YXNrTG9va3VwSWQpfSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25DYW5jZWw9eygpPT57XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NvbmZpcm1hdGlvbnM6IGNvbmZpcm1hdGlvbnMuZmlsdGVyKHRpZCA9PiB0aWQgIT09IHRhc2tMb29rdXBJZCl9KTtcbiAgICAgICAgICAgIH19IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB9XG4gICAgICApfVxuICAgIDwvZGl2PlxuICB9XG59XG4iLCJpbXBvcnQgeyBLZWRSZXBvIH0gZnJvbSAnLi9rZWQtcmVwbyc7XG5pbXBvcnQgeyBVc2VySGlkZGVuQ291cnNlLCBTY2hvb2wsIENvdXJzZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IEVEU0NvdXJzZSB9IGZyb20gJy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IHsgc2hvd0Vycm9yLCBmbGF0dGVuLCBjb21wYXJlUHJvcCwgYXJyYXlUb01hcCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBFRFNQZXJpb2QgfSBmcm9tICcuLi9hcGlzL2Vkc2NsaWVudCc7XG5pbXBvcnQgeyBnZXRTY2hvb2xNb21lbnQgfSBmcm9tICcuLi91dGlscy9zY2hvb2wtbW9tZW50JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmV4cG9ydCBsZXQgaGlkZGVuQ291cnNlc1JlcG8gPSBlbnYuaGlkZGVuQ291cnNlc1JlcG8gYXMgSGlkZGVuQ291cnNlc1JlcG87XG5cblxuZXhwb3J0IGludGVyZmFjZSBDb3Vyc2VXaXRoSGlkZGVuU3RhdGUge1xuICBpZDogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICB2aXNpYmxlOiBib29sZWFuO1xuICBkZWZhdWx0VmlzaWJsZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgSGlkZGVuQ291cnNlc1N1YnNjcmliZXIgPSAoY291cnNlczogQ291cnNlV2l0aEhpZGRlblN0YXRlW10pID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaWJlck9wdGlvbnMge1xuICBmdWxsQ291cnNlOiBib29sZWFuO1xufVxuXG5jbGFzcyBIaWRkZW5Db3Vyc2VzUmVwbyB7XG4gIHJlc3VsdDogQ291cnNlV2l0aEhpZGRlblN0YXRlW10gfCBudWxsID0gbnVsbDtcbiAgc3Vic2NyaWJlcnM6IHtzdWJzY3JpYmVyOiBIaWRkZW5Db3Vyc2VzU3Vic2NyaWJlciwgb3B0aW9uczogU3Vic2NyaWJlck9wdGlvbnN9W10gPSBbXTtcbiAgZnVsbENvdXJzZTogYm9vbGVhbiA9IGZhbHNlO1xuICBrZWRDb3Vyc2VzUHJvbWlzZTogUHJvbWlzZTxQYXJ0aWFsPENvdXJzZT5bXT47XG4gIGVkc0NvdXJzZXNQcm9taXNlOiBQcm9taXNlPEVEU0NvdXJzZVtdPjtcbiAgdXNlckhpZGRlbkNvdXJzZXNQcm9taXNlOiBQcm9taXNlPFVzZXJIaWRkZW5Db3Vyc2VbXT47XG4gIGtlZFJlcG86IEtlZFJlcG88VXNlckhpZGRlbkNvdXJzZT47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5rZWRSZXBvID0gbmV3IEtlZFJlcG88VXNlckhpZGRlbkNvdXJzZT4oe1xuICAgICAgZ2V0Q2xpZW50OiAoKSA9PiBlbnYua2VkQmFja2VuZENsaWVudCxcbiAgICAgIG9wdGltaXN0aWM6IHRydWUsXG4gICAgICB0YWJsZTogXCJ1c2VyaGlkZGVuY291cnNlc1wiLFxuICAgICAgdXNlcjogZW52LmN1cnJlbnRVc2VyID8gZW52LmN1cnJlbnRVc2VyLm1haWwgOiBcIlwiLFxuICAgICAgZ2V0UXVlcnlPcHRpb25zOiBhc3luYyAoKSA9PiAoe3JvbGU6IFwiVVNFUlwifSksXG4gICAgfSk7XG5cbiAgICBjb25zdCBpbml0UHJvbWlzZSA9IHRoaXMuaW5pdCgpO1xuXG4gICAgUHJvbWlzZS5hbGwoW1xuICAgICAgaW5pdFByb21pc2UsXG4gICAgICB0aGlzLmtlZENvdXJzZXNQcm9taXNlLFxuICAgICAgdGhpcy5lZHNDb3Vyc2VzUHJvbWlzZVxuICAgIF0pLmNhdGNoKGVyciA9PiBzaG93RXJyb3IoZXJyKSk7XG4gIH1cblxuICBhc3luYyBpbml0KCkge1xuICAgIC8vIFdhaXQgdGlsbCB3ZSBoYXZlIGEgY3VycmVudFVzZXIgdGhhdCBpcyBhY2N1cmF0ZSBhbHNvIGZvciBpbXBlcnNvbmF0ZWQgdXNlcnMuXG4gICAgY29uc3QgYmVhcmVyUHJvbWlzZSA9IGVudi5iZWFyZXJQcm92aWRlciA/IGVudi5iZWFyZXJQcm92aWRlci5nZXRCZWFyZXIoKSA6IFByb21pc2UucmVzb2x2ZSh7fSk7XG5cbiAgICAvLyBJbiBwYXJhbGxlbGwsIHdlIHJlcXVlc3Q6XG4gICAgLy8gIDEpIEtFREJhY2tlbmQ6IFNjaG9vbHMuYWN0aXZlQ291cnNlc1xuICAgIC8vICAyKSBFRFMuZ2V0QWN0aXZlQWNvdXJzZXMoKVxuICAgIC8vICAzKSAodmlhIHN1YnNjcmlwdGlvbik6IEtFREJhY2tlbmQ6IHVzZXJIaWRkZW5Db3Vyc2VzXG4gICAgXG4gICAgdGhpcy5rZWRDb3Vyc2VzUHJvbWlzZSA9IGJlYXJlclByb21pc2UudGhlbigoKT0+dGhpcy5saXN0S2VkQ291cnNlcygpKTtcbiAgICB0aGlzLmVkc0NvdXJzZXNQcm9taXNlID0gYmVhcmVyUHJvbWlzZS50aGVuKCgpPT50aGlzLmxpc3RFRFNDb3Vyc2VzKCkpO1xuICAgIGxldCByZXNvbHZlVXNlckhpZGRlbkNvdXJzZXNQcm9taXNlOiAoeDogVXNlckhpZGRlbkNvdXJzZVtdKT0+dm9pZDtcbiAgICBsZXQgdXNlckhpZGRlbkNvdXJzZXNSZXNvbHZlZCA9IGZhbHNlO1xuICAgIHRoaXMudXNlckhpZGRlbkNvdXJzZXNQcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiByZXNvbHZlVXNlckhpZGRlbkNvdXJzZXNQcm9taXNlID0geCA9PiB7XG4gICAgICBpZiAodXNlckhpZGRlbkNvdXJzZXNSZXNvbHZlZCkge1xuICAgICAgICB0aGlzLnVzZXJIaWRkZW5Db3Vyc2VzUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh4KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVzZXJIaWRkZW5Db3Vyc2VzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgICByZXNvbHZlKHgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGF3YWl0IGJlYXJlclByb21pc2U7XG5cbiAgICB0aGlzLmtlZFJlcG8ubWVtLnN1YnNjcmliZShhc3luYyB1c2VySGlkZGVuQ291cnNlcyA9PiB7XG4gICAgICAvLyBDaGFuZ2Ugb3IgaW5pdGlhbCB2YWx1ZSByZWFkeSB0byBiZSBub3RpZmllZCBvdXQuXG4gICAgICAvLyBCdXQgZmlyc3QsIGNoZWNrIHdlIGhhdmUgYWxsIHRoZSByZWxhdGVkIGRhdGEgcmVzcG9uc2VzIHdlIG5lZWQuXG4gICAgICBjb25zdCBbYWN0aXZlQ291cnNlcywgZWRzQWN0aXZlQ291cnNlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHRoaXMua2VkQ291cnNlc1Byb21pc2UsIFxuICAgICAgICB0aGlzLmVkc0NvdXJzZXNQcm9taXNlXSk7XG4gICAgICBcbiAgICAgIC8vIFJlZmluZSB0aGUgdGhyZWUgcmVzdWx0cyBpbnRvIGEgc2luZ2xlIHJlc3VsdFxuICAgICAgdGhpcy5yZXN1bHQgPSBhd2FpdCB0aGlzLmNyZWF0ZUNvdXJzZXNMaXN0KGVkc0FjdGl2ZUNvdXJzZXMsIHVzZXJIaWRkZW5Db3Vyc2VzLCBhY3RpdmVDb3Vyc2VzKTtcbiAgICAgIC8vIE5vdGlmeSBvdXIgc3Vic2NyaWJlcnM6XG4gICAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goc3Vic2NyaWJlciA9PiB0aGlzLm5vdGlmeVN1YnNjcmliZXIoc3Vic2NyaWJlci5zdWJzY3JpYmVyLCBzdWJzY3JpYmVyLm9wdGlvbnMpKTtcbiAgICAgIHJlc29sdmVVc2VySGlkZGVuQ291cnNlc1Byb21pc2UodXNlckhpZGRlbkNvdXJzZXMpO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgbGlzdEtlZENvdXJzZXMoKSB7XG4gICAgY29uc3QgZnVsbENvdXJzZSA9IHRoaXMuZnVsbENvdXJzZTtcbiAgICBjb25zb2xlLmxvZyhcIkZ1bGxDb3Vyc2U6IFwiKyBmdWxsQ291cnNlKTtcbiAgICBjb25zdCBzY2hvb2xzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTY2hvb2w+KCdzY2hvb2xzJywge1xuICAgICAgcm9sZTogXCJVU0VSXCIsIC8vIFdvcmthcm91bmQgZnJvbSBzaG93aW5nIGFjdGl2YXRlZCB0ZW1wbGF0ZXMgYW1vbmcgY291cnNlcyBvZiB0aGUgc2Nob29sXG4gICAgICBuYW1lOiBlbnYuY3VycmVudFVzZXIuc2Nob29sLFxuICAgICAgaW5jbHVkZTogXCJhY3RpdmVDb3Vyc2VzXCIsXG4gICAgICBmbGFnczogZnVsbENvdXJzZSA/IFtdIDogW1wiaW5jbHVkZUlkc0FuZE5hbWVzT25seVwiXSxcbiAgICAgIGNhY2hlQnVzdDogZW52LmN1cnJlbnRVc2VyLnVzZXJuYW1lXG4gICAgfSk7XG4gICAgY29uc3QgYWN0aXZlQ291cnNlcyA9IGZsYXR0ZW4oc2Nob29scy5tYXAoc2Nob29sID0+IHNjaG9vbC5hY3RpdmVDb3Vyc2VzKSkuc29ydChjb21wYXJlUHJvcChcIm5hbWVcIikpXG4gICAgcmV0dXJuIGFjdGl2ZUNvdXJzZXM7XG4gIH1cblxuICBsaXN0RURTQ291cnNlcygpOiBQcm9taXNlPEVEU0NvdXJzZVtdIHwgbnVsbD4ge1xuICAgIGNvbnN0IHBlcmlvZE5hbWUgPSBuZXcgRURTUGVyaW9kKGdldFNjaG9vbE1vbWVudChtb21lbnQoKSkpLnBlcmlvZDtcbiAgICByZXR1cm4gZW52LmN1cnJlbnRVc2VyLnJvbGVzLmluZGV4T2YoJ0VNUExPWUVFJykgPT09IC0xID9cbiAgICAgIC8vIFNUVURFTlRzIHNob3VsZCwgYnkgZGVmYXVsdCwgb25seSBzaG93IGNvdXJzZXMgdGhhdCBpcyBsaXN0ZWQgaW4gRURTXG4gICAgICBlbnYuZWRzQ2xpZW50LmdldEFjdGl2ZUNvdXJzZXMoe3BlcmlvZE5hbWV9KSA6XG4gICAgICAvLyBFTVBMT1lFRXMgc2hvdWxkLCBieSBkZWZhdWx0LCBzaG93IGFsbCBjb3Vyc2VzIG9uIHNjaG9vbCAtIG5vIG5lZWQgdG8gcXVlcnkgRURTXG4gICAgICBudWxsO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlQ291cnNlc0xpc3QoXG4gICAgZWRzQWN0aXZlQ291cnNlczogRURTQ291cnNlW10gfCBudWxsLFxuICAgIHVzZXJIaWRkZW5Db3Vyc2VzOiBVc2VySGlkZGVuQ291cnNlW10sXG4gICAgYWN0aXZlQ291cnNlczogUGFydGlhbDxDb3Vyc2U+W10pIDogUHJvbWlzZTxDb3Vyc2VXaXRoSGlkZGVuU3RhdGVbXT5cbiAge1xuICAgIGNvbnN0IGhpZGRlbkNvdXJzZXNNYXAgPSBhcnJheVRvTWFwKHVzZXJIaWRkZW5Db3Vyc2VzLmZpbHRlcihoYyA9PiAhaGMuc2hvdyksIGhjID0+IGhjLm5hbWUpO1xuICAgIGNvbnN0IHZpc2libGVDb3Vyc2VzTWFwID0gYXJyYXlUb01hcCh1c2VySGlkZGVuQ291cnNlcy5maWx0ZXIoaGMgPT4gaGMuc2hvdyksIGhjID0+IGhjLm5hbWUpO1xuXG4gICAgY29uc3QgaXNTdHVkZW50ID0gZW52LmN1cnJlbnRVc2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSAnU1RVREVOVCcpO1xuXG4gICAgY29uc3QgZWRzQ291cnNlTWFwID0gZWRzQWN0aXZlQ291cnNlcyA/XG4gICAgICBhcnJheVRvTWFwKGVkc0FjdGl2ZUNvdXJzZXMsIGMgPT4gYy5uYW1lKSA6XG4gICAgICB7fTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IFByb21pc2UuYWxsKGFjdGl2ZUNvdXJzZXMubWFwKGFzeW5jICh7aWQsIG5hbWUsIGRlc2NyaXB0aW9uLCBtb2RpZmllZEJ5fSkgPT4ge1xuXG4gICAgICBsZXQgZWRzQ291cnNlID0gZWRzQ291cnNlTWFwW25hbWVdO1xuXG4gICAgICBsZXQgZGVmYXVsdFZpc2libGUgPSBpc1N0dWRlbnQgP1xuICAgICAgICBlZHNDb3Vyc2UgIT0gbnVsbCA6IC8vIENvdXJzZSBuYW1lIGFsc28gbGlzdGVkIGluIEVEU1xuICAgICAgICB0cnVlOyAvLyBUZWFjaGVycyBub3QgZGVwZW5kZW50IG9uIEVEUyBsaXN0aW5nXG5cbiAgICAgIGxldCB2aXNpYmxlID0gZGVmYXVsdFZpc2libGUgP1xuICAgICAgICAhaGlkZGVuQ291cnNlc01hcFtpZF0gOiAvLyBWaXNpYmxlIHVubGVzcyB1c2VyIGhhcyBvdmVycmlkZGVuIHRoYXQuXG4gICAgICAgICEhdmlzaWJsZUNvdXJzZXNNYXBbaWRdOyAvLyBIaWRkZW4gdW5sZXNzIHVzZXIgaGFzIG92ZXJyaWRkZW4gdGhhdC5cbiAgICAgIFxuICAgICAgLy8gUmVzb2x2ZSBkZXNjcmlwdGlvbjpcbiAgICAgIGlmIChtb2RpZmllZEJ5ICYmIG1vZGlmaWVkQnkubmFtZSAmJiAhZGVzY3JpcHRpb24pIHtcbiAgICAgICAgZGVzY3JpcHRpb24gPSBgJHttb2RpZmllZEJ5Lm5hbWV9cyB2ZXJzaW9uYDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaWQsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICB2aXNpYmxlLFxuICAgICAgICBkZWZhdWx0VmlzaWJsZVxuICAgICAgfTtcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gcmVzdWx0LnNvcnQoKHtuYW1lOiBhfSwge25hbWU6IGJ9KSA9PiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMCk7XG4gIH1cblxuICBhc3luYyBoaWRlQ291cnNlKGM6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZSkge1xuICAgIGNvbnN0IG92ZXJyaWRlcyA9IHRoaXMua2VkUmVwby5tZW0uaXRlbXMuZmlsdGVyKGhjID0+IGhjLm5hbWUgPT09IGMuaWQpO1xuICAgIGlmIChjLmRlZmF1bHRWaXNpYmxlKSB7XG4gICAgICBhd2FpdCB0aGlzLmtlZFJlcG8uaW5zZXJ0KFt7XG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXG4gICAgICAgIG5hbWU6IGMuaWRcbiAgICAgIH1dKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgdGhpcy5rZWRSZXBvLmRlbGV0ZShvdmVycmlkZXMubWFwKG92ID0+IG92LmlkKSk7ICAgICAgXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2hvd0NvdXJzZShjOiBDb3Vyc2VXaXRoSGlkZGVuU3RhdGUpIHtcbiAgICBjb25zdCBvdmVycmlkZXMgPSB0aGlzLmtlZFJlcG8ubWVtLml0ZW1zLmZpbHRlcihoYyA9PiBoYy5uYW1lID09PSBjLmlkKTtcbiAgICBpZiAoYy5kZWZhdWx0VmlzaWJsZSkge1xuICAgICAgYXdhaXQgdGhpcy5rZWRSZXBvLmRlbGV0ZShvdmVycmlkZXMubWFwKG92ID0+IG92LmlkKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IHRoaXMua2VkUmVwby5pbnNlcnQoW3tcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgbmFtZTogYy5pZCxcbiAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgfV0pO1xuICAgIH1cbiAgfVxuXG4gIG5vdGlmeVN1YnNjcmliZXIgPSAoc3Vic2NyaWJlcjogSGlkZGVuQ291cnNlc1N1YnNjcmliZXIsIG9wdGlvbnM6IFN1YnNjcmliZXJPcHRpb25zKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIHN1YnNjcmliZXIob3B0aW9ucy5mdWxsQ291cnNlID8gdGhpcy5yZXN1bHQgOiB0aGlzLnJlc3VsdC5maWx0ZXIoYyA9PiBjLnZpc2libGUpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBzdWJzY3JpYmUgKHN1YnNjcmliZXI6IEhpZGRlbkNvdXJzZXNTdWJzY3JpYmVyLCBvcHRpb25zOiBTdWJzY3JpYmVyT3B0aW9ucykge1xuICAgIGlmICghdGhpcy5mdWxsQ291cnNlICYmIG9wdGlvbnMuZnVsbENvdXJzZSkge1xuICAgICAgLy8gVGhlIHN1YnNjcmliZXIgZGVtYW5kcyBmdWxsIGNvdXJzZXNcbiAgICAgIC8vIE5lZWQgdG8gcXVlcnkgdGhhdCBiZWZvcmUgbm90aWZ5aW5nXG4gICAgICAvLyBBbHNvIGFmZmVjdCBzdGF0ZSBmb3IgZnV0dXJlIGludGVybmFsIG5vdGlmaWNhdGlvblxuICAgICAgdGhpcy5mdWxsQ291cnNlID0gb3B0aW9ucy5mdWxsQ291cnNlO1xuICAgICAgdGhpcy5rZWRDb3Vyc2VzUHJvbWlzZSA9IHRoaXMubGlzdEtlZENvdXJzZXMoKTsgLy8gUmVkbyB0aGlzIGNhbGwsIG5vdyBsb2FkaW5nIGZ1bGwgY291cnNlc1xuICAgICAgLy8gV2FpdCBmb3IgYWxsIG91dHN0YW5kaW5nIGZldGNoKCkgY2FsbHMgdG8gY29tcGxldGU6XG4gICAgICBjb25zdCBbYWN0aXZlQ291cnNlcywgZWRzQWN0aXZlQ291cnNlcywgdXNlckhpZGRlbkNvdXJzZXNdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICB0aGlzLmtlZENvdXJzZXNQcm9taXNlLCBcbiAgICAgICAgdGhpcy5lZHNDb3Vyc2VzUHJvbWlzZSxcbiAgICAgICAgdGhpcy51c2VySGlkZGVuQ291cnNlc1Byb21pc2VdKTtcbiAgICAgIC8vIEFzc2VtYmxlIHJlc3VsdDpcbiAgICAgIHRoaXMucmVzdWx0ID0gYXdhaXQgdGhpcy5jcmVhdGVDb3Vyc2VzTGlzdChlZHNBY3RpdmVDb3Vyc2VzLCB1c2VySGlkZGVuQ291cnNlcywgYWN0aXZlQ291cnNlcyk7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMudXNlckhpZGRlbkNvdXJzZXNQcm9taXNlOyAvLyBTbyB3ZSBrbm93IHRoYXQgdGhpcy5yZXN1bHQgaXMgdGhlcmUuXG4gICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVyKHN1YnNjcmliZXIsIG9wdGlvbnMpO1xuICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaCh7c3Vic2NyaWJlciwgb3B0aW9uc30pO1xuICB9XG5cbiAgdW5zdWJzY3JpYmUgKHN1YnNjcmliZXI6IEhpZGRlbkNvdXJzZXNTdWJzY3JpYmVyKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnMuZmlsdGVyKHMgPT4gcy5zdWJzY3JpYmVyICE9PSBzdWJzY3JpYmVyKTtcbiAgfVxufVxuXG5pZiAoIWhpZGRlbkNvdXJzZXNSZXBvKSB7XG4gIGhpZGRlbkNvdXJzZXNSZXBvID0gZW52LmhpZGRlbkNvdXJzZXNSZXBvID0gbmV3IEhpZGRlbkNvdXJzZXNSZXBvKCk7XG59XG4iLCJpbXBvcnQge1VzZXJ9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcblxuZXhwb3J0IGNvbnN0IHVzZXJzIDogVXNlcltdID0gW3tcbiAgICBkaXNwbGF5TmFtZTogXCJBZG1pbmlzdHJhdMO2clwiLFxuICAgIG1haWw6IFwidmVtZW5kb0BrZWRzY2hvb2xzLmNvbVwiLFxuICAgIHJvbGVzOiBbJ0FETUlOJywnRU1QTE9ZRUUnXSxcbiAgICBzY2hvb2w6ICdLRUQnLFxuICAgIHVzZXJuYW1lOiBcImFkbWluXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIkRhdmlkXCIsXG4gICAgbWFpbDogXCJkYXZpZC5mYWhsYW5kZXJAdmVtZW5kby5zZVwiLFxuICAgIHJvbGVzOiBbJ0FETUlOJywnRU1QTE9ZRUUnXSxcbiAgICBzY2hvb2w6ICdLRUQnLFxuICAgIHVzZXJuYW1lOiBcImRhdmlkXCJcbn0sXG57XG4gICAgZGlzcGxheU5hbWU6IFwiQW5kcmVpXCIsXG4gICAgbWFpbDogXCJhbmRyZWkuc3BhdGFyZWx1QHZlbWVuZG8uc2VcIixcbiAgICByb2xlczogWydBRE1JTicsJ0VNUExPWUVFJywnU1RVREVOVCddLFxuICAgIHNjaG9vbDogJ0tFRCcsXG4gICAgdXNlcm5hbWU6IFwiYW5kcmVpXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIkNhcmwgSG9sbWJlcmdcIixcbiAgICBtYWlsOiBcImNhcmwuaG9sbWJlcmdAa3Vuc2thcHNneW1uYXNpZXQuc2VcIixcbiAgICByb2xlczogWydBRE1JTicsJ0VNUExPWUVFJ10sXG4gICAgc2Nob29sOiAnTm9ycmvDtnBpbmcnLFxuICAgIHVzZXJuYW1lOiBcImNhcmwuaG9sbWJlcmdAa3Vuc2thcHNneW1uYXNpZXQuc2VcIlxufSx7IFxuICAgIGRpc3BsYXlOYW1lOiBcIkNhcmxcIixcbiAgICBtYWlsOiBcImNhcmxAa2Vkc2Nob29scy5jb21cIixcbiAgICByb2xlczogWydBRE1JTicsJ0VNUExPWUVFJywnU1RVREVOVCddLFxuICAgIHNjaG9vbDogJ0tFRCcsXG4gICAgdXNlcm5hbWU6IFwiY2FybFwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJkYXZpZC5mYWhsYW5kZXJAa2Vkc2Nob29scy5jb21cIixcbiAgICBtYWlsOiBcImRhdmlkLmZhaGxhbmRlckBrZWRzY2hvb2xzLmNvbVwiLFxuICAgIHJvbGVzOiBbXCJBRE1JTlwiLCBcIkVNUExPWUVFXCIsIFwiU1RVREVOVFwiXSxcbiAgICBzY2hvb2w6IFwiS0VEXCIsXG4gICAgdXNlcm5hbWU6IFwiZGF2aWQuZmFobGFuZGVyQGtlZHNjaG9vbHMuY29tXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIlRlYWNoZXIgMVwiLFxuICAgIG1haWw6IFwidGVhY2hlcjEuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tXCIsXG4gICAgcm9sZXM6IFsnRU1QTE9ZRUUnXSxcbiAgICBzY2hvb2w6ICdLRUQnLFxuICAgIHVzZXJuYW1lOiBcInRlYWNoZXIxLmNsYXNzcm9vbUBrZWRzY2hvb2xzLmNvbVwiXG59LHsgXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXYxXCIsXG4gICAgbWFpbDogXCJ1Ync2NzU3QGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICBzY2hvb2w6ICdVcHBzYWxhJyxcbiAgICB1c2VybmFtZTogXCJ1Ync2NzU3QGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjJcIixcbiAgICBtYWlsOiBcInVtczQzMDJAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxuICAgIHVzZXJuYW1lOiBcInVtczQzMDJAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2M1wiLFxuICAgIG1haWw6IFwidWhoMzQ2MEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIixcbiAgICByb2xlczogWydTVFVERU5UJ10sXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXG4gICAgdXNlcm5hbWU6IFwidWhoMzQ2MEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY0KGZlbCBnb2FscyBpc3N1ZSlcIixcbiAgICBtYWlsOiBcInVtdDY4MjZAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgcm9sZXM6IFtcIlNUVURFTlRcIl0sXG4gICAgc2Nob29sOiBcIlVwcHNhbGFcIixcbiAgICB1c2VybmFtZTogXCJ1bXQ2ODI2QGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjUoZnV0dXJlIGFiaWxpdGllcylcIixcbiAgICBtYWlsOiBcInVqZzM4MzNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgcm9sZXM6IFtcIlNUVURFTlRcIl0sXG4gICAgc2Nob29sOiBcIlVwcHNhbGFcIixcbiAgICB1c2VybmFtZTogXCJ1amczODMzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjYoZnV0dXJlIGFiaWxpdGllcylcIixcbiAgICBtYWlsOiBcInVqdDEzNjNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgcm9sZXM6IFtcIlNUVURFTlRcIl0sXG4gICAgc2Nob29sOiBcIlVwcHNhbGFcIixcbiAgICB1c2VybmFtZTogXCJ1anQxMzYzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtTMOkcmFyZTFcIixcbiAgICBtYWlsOiBcInJpY2thcmQuYWxiZXJ0c3NvbkBrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbJ0VNUExPWUVFJ10sXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXG4gICAgdXNlcm5hbWU6IFwicmlja2FyZC5hbGJlcnRzc29uQGt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIkVEU1Rlc3RVc2VyR3ltbmFzaXVtXCIsXG4gICAgbWFpbDogXCJ1aGgzMjAwQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIC8vbWFpbDogXCJVSEgzMjAwQEVEVS5LVU5TS0FQU0dZTU5BU0lFVC5TRVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHVzZXJuYW1lOiBcIkVEU1Rlc3RVc2VyMVwiLFxuICAgIHNjaG9vbDogXCJLRURcIixcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJ2ZW1lbmRvLmVsZXZAa2Vkc2Nob29scy5jb21cIixcbiAgICBtYWlsOiBcInZlbWVuZG8uZWxldkBrZWRzY2hvb2xzLmNvbVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHVzZXJuYW1lOiBcInZlbWVuZG8uZWxldkBrZWRzY2hvb2xzLmNvbVwiLFxuICAgIHNjaG9vbDogXCJLRURcIixcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJNZWRhcmJldGFyZSBOYWNrYVwiLFxuICAgIG1haWw6IFwibWVkYXJiZXRhcmUubmFja2FAa3Vuc2thcHNza29sYW4uc2VcIixcbiAgICByb2xlczogW1wiRU1QTE9ZRUVcIl0sXG4gICAgdXNlcm5hbWU6IFwibWVkYXJiZXRhcmUubmFja2EvS1NcIixcbiAgICBzY2hvb2w6IFwiTmFja2FcIixcbiAgICBzY2hvb2xUeXBlOiBcIkdydW5kc2tvbG9yXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIk1lZGFyYmV0YXJlIEdsb2JlblwiLFxuICAgIG1haWw6IFwibWVkYXJiZXRhcmUuZ2xvYmVuQGt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXG4gICAgcm9sZXM6IFtcIkVNUExPWUVFXCJdLFxuICAgIHVzZXJuYW1lOiBcIm1lZGFyYmV0YXJlLmdsb2Jlbi9LU1wiLFxuICAgIHNjaG9vbDogXCJHbG9iZW5cIixcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJFbGV2IEdsb2JlblwiLFxuICAgIG1haWw6IFwiZWxldi5nbG9iZW5AZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXG4gICAgc2Nob29sR3JhZGU6IDIsXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxuICAgIHVzZXJuYW1lOiBcImVsZXYuZ2xvYmVuXCIsXG4gICAgc2Nob29sOiBcIkdsb2JlblwiLFxuICAgIHNjaG9vbFR5cGU6IFwiR3ltbmFzaXVtXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgQm9yw6VzXCIsXG4gICAgbWFpbDogXCJlbGV2LmJvcmFzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHNjaG9vbEdyYWRlOiA3LFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICB1c2VybmFtZTogXCJlbGV2LmJvcmFzXCIsXG4gICAgc2Nob29sOiBcIkJvcsOlc1wiLFxuICAgIHNjaG9vbFR5cGU6IFwiR3J1bmRza29sb3JcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiRWxldiBCb3Jsw6RuZ2VcIixcbiAgICBtYWlsOiBcImVsZXYuYm9ybGFuZ2VAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgc2Nob29sR3JhZGU6IDksXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxuICAgIHVzZXJuYW1lOiAnZWxldi5ib3JsYW5nZS9LUycsXG4gICAgc2Nob29sOiAnQm9ybMOkbmdlJyxcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJSb2xsLWzDtnNcIixcbiAgICBtYWlsOiBcIm5vbmVAa3Vuc2thcHNza29sYW4uc2VcIixcbiAgICB1c2VybmFtZTogXCJub25lXCIsXG4gICAgcm9sZXM6IFtdXG59XTtcblxuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuXG5pZiAoY2ZnLktFRF9MT0NBTEUgPT09IFwic3ZcIikge1xuICAgIG1vbWVudC51cGRhdGVMb2NhbGUoJ3N2Jywge1xuICAgICAgICBtb250aHM6ICdqYW51YXJpX2ZlYnJ1YXJpX21hcnNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3RpX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ2phbl9mZWJfbWFyX2Fwcl9tYWpfanVuX2p1bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5czogJ3PDtm5kYWdfbcOlbmRhZ190aXNkYWdfb25zZGFnX3RvcnNkYWdfZnJlZGFnX2zDtnJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICdzw7ZuX23DpW5fdGlzX29uc190b3JfZnJlX2zDtnInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnc8O2X23DpV90aV9vbl90b19mcl9sw7YnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQgRCBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgbGxsOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsOiAnZGRkIEQgTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0lkYWddIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbSW1vcmdvbl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJZ8Olcl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbUMOlXSBkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW0ldIGRkZGRbc10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICdmw7ZyICVzIHNlZGFuJyxcbiAgICAgICAgICAgIHM6ICduw6VncmEgc2VrdW5kZXInLFxuICAgICAgICAgICAgc3M6ICclZCBzZWt1bmRlcicsXG4gICAgICAgICAgICBtOiAnZW4gbWludXQnLFxuICAgICAgICAgICAgbW06ICclZCBtaW51dGVyJyxcbiAgICAgICAgICAgIGg6ICdlbiB0aW1tZScsXG4gICAgICAgICAgICBoaDogJyVkIHRpbW1hcicsXG4gICAgICAgICAgICBkOiAnZW4gZGFnJyxcbiAgICAgICAgICAgIGRkOiAnJWQgZGFnYXInLFxuICAgICAgICAgICAgTTogJ2VuIG3DpW5hZCcsXG4gICAgICAgICAgICBNTTogJyVkIG3DpW5hZGVyJyxcbiAgICAgICAgICAgIHk6ICdldHQgw6VyJyxcbiAgICAgICAgICAgIHl5OiAnJWQgw6VyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXxhKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAnZScgOlxuICAgICAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnYScgOlxuICAgICAgICAgICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ2EnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAnZScgOiAnZSc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydCBjb25zdCBsb2NhbE1vbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbW9tZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykubG9jYWxlKGNmZy5LRURfTE9DQUxFKTtcbn1cbiIsIlxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9Db21tdW5pY2F0b3I8VCBleHRlbmRzIHtpZDogc3RyaW5nfT4ge1xuICBxdWVyeSgpOiBQcm9taXNlPFRbXT47XG59XG5cbnR5cGUgU3Vic2NyaWJlcjxUPiA9IChpdGVtczpUW10sIGVycm9yOiB1bmRlZmluZWQgfCBFcnJvcikgPT4gYW55O1xuXG5leHBvcnQgY2xhc3MgUmVwbzxUIGV4dGVuZHMge2lkOiBzdHJpbmd9PiB7XG4gIGxpc3RQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuICBpdGVtczogVFtdO1xuICBlcnJvcj86IEVycm9yO1xuICBzdWJzY3JpYmVyczogU3Vic2NyaWJlcjxUPltdO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb21tOiBSZXBvQ29tbXVuaWNhdG9yPFQ+KSB7XG4gICAgdGhpcy5saXN0UHJvbWlzZSA9IG51bGw7XG4gICAgdGhpcy5pdGVtcyA9IG51bGw7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xuICB9XG5cbiAgc3Vic2NyaWJlKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pIHtcbiAgICByZXR1cm4gdGhpcy5lbnN1cmVIYXNEYXRhKCkudGhlbigoKT0+e1xuICAgICAgc3Vic2NyaWJlcih0aGlzLml0ZW1zLCB0aGlzLmVycm9yKTtcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gdGhpcy5zdWJzY3JpYmVycy5maWx0ZXIgKHMgPT4gcyAhPT0gc3Vic2NyaWJlcik7XG4gIH1cblxuICBub3RpZnlTdWJzY3JpYmVycygpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2gocyA9PiBzKHRoaXMuaXRlbXMsIHRoaXMuZXJyb3IpKTtcbiAgfVxuXG4gIGVuc3VyZUhhc0RhdGEoKSB7XG4gICAgaWYgKCF0aGlzLmxpc3RQcm9taXNlKSB0aGlzLnJlZnJlc2hGcm9tU2VydmVyKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdFByb21pc2U7XG4gIH1cblxuICByZWZyZXNoRnJvbVNlcnZlcigpIHtcbiAgICB0aGlzLmxpc3RQcm9taXNlID0gdGhpcy5jb21tLnF1ZXJ5KCkudGhlbihpdGVtcyA9PiB7XG4gICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcyB8fCBbXTtcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5saXN0UHJvbWlzZTtcbiAgfVxuICBcbiAgYXN5bmMgdXBkYXRlKGl0ZW06IFQgfCBUW10pIHtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZUhhc0RhdGEoKTtcbiAgICBjb25zdCB1cGRhdGVkSXRlbXMgPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbSA6IFtpdGVtXTtcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5tYXAoaXQgPT4ge1xuICAgICAgY29uc3QgdXBkYXRlZEl0ZW0gPSB1cGRhdGVkSXRlbXMuZmluZCgoe2lkfSkgPT4gaXQuaWQgPT09IGlkKTtcbiAgICAgIHJldHVybiB1cGRhdGVkSXRlbSA/XG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHVwZGF0ZWRJdGVtKSA6XG4gICAgICAgIGl0O1xuICAgIH0pO1xuICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgfVxuXG4gIGluc2VydChpdGVtOiBUIHwgVFtdKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlSGFzRGF0YSgpLnRoZW4oKCk9PntcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmNvbmNhdChpdGVtKTtcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZShpZDogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICBjb25zdCBpZHMgPSBBcnJheS5pc0FycmF5KGlkKSA/IGlkIDogW2lkXTtcbiAgICByZXR1cm4gdGhpcy5lbnN1cmVIYXNEYXRhKCkudGhlbigoKT0+e1xuICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuZmlsdGVyKGl0ID0+ICFpZHMuc29tZShpZCA9PiBpdC5pZCA9PT0gaWQpKTtcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBlbnYgfSBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuXG5leHBvcnQgY2xhc3MgR29vZ2xlQ2xpZW50IHtcbiAgdG9rZW5FeHBpcmF0aW9uOiBEYXRlO1xuICBnb29nbGVUb2tlblByb3ZpZGVyOiBCZWFyZXJQcm92aWRlcjtcbiAgZGlzY292ZXJ5RG9jczogc3RyaW5nW107XG4gIHRva2VuOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoZGlzY292ZXJ5RG9jczogc3RyaW5nKSB7XG4gICAgdGhpcy5nb29nbGVUb2tlblByb3ZpZGVyID0gZW52Lmdvb2dsZVRva2VuUHJvdmlkZXI7XG4gICAgdGhpcy5kaXNjb3ZlcnlEb2NzID0gW107XG4gICAgdGhpcy5kaXNjb3ZlcnlEb2NzLnB1c2goZGlzY292ZXJ5RG9jcyk7XG4gIH1cblxuICBzZXRCZWFyZXJQcm92aWRlcihnb29nbGVUb2tlblByb3ZpZGVyOiBCZWFyZXJQcm92aWRlcikge1xuICAgIHRoaXMuZ29vZ2xlVG9rZW5Qcm92aWRlciA9IGdvb2dsZVRva2VuUHJvdmlkZXI7XG4gIH1cblxuICBhc3luYyBlbnN1cmVJbml0ZWQoKSB7XG4gICAgLy8gTG9hZCBHQVBJXG4gICAgaWYgKHR5cGVvZiBnYXBpID09PSAndW5kZWZpbmVkJykgYXdhaXQgdGhpcy5sb2FkR2FwaSgpO1xuXG4gICAgLy8gU2V0IHRva2VuXG4gICAgaWYgKCF0aGlzLnRva2VuRXhwaXJhdGlvbiB8fCB0aGlzLnRva2VuRXhwaXJhdGlvbiA8IG5ldyBEYXRlKCkpIHtcbiAgICAgIGNvbnN0IHRva2VuUmVzdWx0ID0gYXdhaXQgdGhpcy5nb29nbGVUb2tlblByb3ZpZGVyLmdldEJlYXJlcigpO1xuICAgICAgdGhpcy50b2tlbkV4cGlyYXRpb24gPSBuZXcgRGF0ZSh0b2tlblJlc3VsdC5leHBpcmVzKTtcbiAgICAgIHRoaXMudG9rZW4gPSB0b2tlblJlc3VsdC50b2tlbjtcbiAgICAgIGdhcGkuY2xpZW50LnNldFRva2VuKHtcbiAgICAgICAgYWNjZXNzX3Rva2VuOiB0b2tlblJlc3VsdC50b2tlblxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8vIExvYWQgYWxsIGRpc2NvdnllckRvY3NcbiAgICBhd2FpdCBnYXBpLmNsaWVudC5pbml0KHtcbiAgICAgIGRpc2NvdmVyeURvY3M6IHRoaXMuZGlzY292ZXJ5RG9jc1xuICAgIH0pO1xuICB9XG5cbiAgbG9hZEdhcGkoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGdhcGkgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICBzY3JpcHQuc3JjID0gXCJodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9jbGllbnQuanM/b25sb2FkPWdhYXBpX2xvYWRlZFwiO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAod2luZG93IGFzIGFueSkuZ2FhcGlfbG9hZGVkID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IGV4ZWMgZnJvbSAnLi9leGVjJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBib2xkOiB7XG4gICAgaWNvbjogJzxiPkI8L2I+JyxcbiAgICB0aXRsZTogJ0JvbGQnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnYm9sZCcpXG4gIH0sXG4gIGl0YWxpYzoge1xuICAgIGljb246ICc8aT5JPC9pPicsXG4gICAgdGl0bGU6ICdJdGFsaWMnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaXRhbGljJylcbiAgfSxcbiAgdW5kZXJsaW5lOiB7XG4gICAgaWNvbjogJzx1PlU8L3U+JyxcbiAgICB0aXRsZTogJ1VuZGVybGluZScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCd1bmRlcmxpbmUnKVxuICB9LFxuICBzdHJpa2V0aHJvdWdoOiB7XG4gICAgaWNvbjogJzxzdHJpa2U+Uzwvc3RyaWtlPicsXG4gICAgdGl0bGU6ICdTdHJpa2UtdGhyb3VnaCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdzdHJpa2VUaHJvdWdoJylcbiAgfSxcbiAgaGVhZGluZzE6IHtcbiAgICBpY29uOiAnPGI+SDxzdWI+MTwvc3ViPjwvYj4nLFxuICAgIHRpdGxlOiAnSGVhZGluZyAxJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMT4nKVxuICB9LFxuICBoZWFkaW5nMjoge1xuICAgIGljb246ICc8Yj5IPHN1Yj4yPC9zdWI+PC9iPicsXG4gICAgdGl0bGU6ICdIZWFkaW5nIDInLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgyPicpXG4gIH0sXG4gIGhlYWRpbmczOiB7XG4gICAgaWNvbjogJzxiPkg8c3ViPjM8L3N1Yj48L2I+JyxcbiAgICB0aXRsZTogJ0hlYWRpbmcgMycsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDM+JylcbiAgfSxcbiAgcGFyYWdyYXBoOiB7XG4gICAgaWNvbjogJyYjMTgyOycsXG4gICAgdGl0bGU6ICdQYXJhZ3JhcGgnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFA+JylcbiAgfSxcbiAgcXVvdGU6IHtcbiAgICBpY29uOiAnJiM4MjIwOyAmIzgyMjE7JyxcbiAgICB0aXRsZTogJ1F1b3RlJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxCTE9DS1FVT1RFPicpXG4gIH0sXG4gIG9saXN0OiB7XG4gICAgaWNvbjogJyYjMzU7JyxcbiAgICB0aXRsZTogJ09yZGVyZWQgTGlzdCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRPcmRlcmVkTGlzdCcpXG4gIH0sXG4gIHVsaXN0OiB7XG4gICAgaWNvbjogJyYjODIyNjsnLFxuICAgIHRpdGxlOiAnVW5vcmRlcmVkIExpc3QnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0VW5vcmRlcmVkTGlzdCcpXG4gIH0sXG4gIG91dGRlbnQ6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1vdXRkZW50XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXG4gICAgdGl0bGU6ICdPdXRkZW50JyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoXCJvdXRkZW50XCIpXG4gIH0sXG4gIGluZGVudDoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLWluZGVudFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxuICAgIHRpdGxlOiAnSW5kZW50JyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoXCJpbmRlbnRcIiksXG4gIH0sXG4gIGNvZGU6IHtcbiAgICBpY29uOiAnJmx0Oy8mZ3Q7JyxcbiAgICB0aXRsZTogJ0NvZGUnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFBSRT4nKVxuICB9LFxuICBsaW5lOiB7XG4gICAgaWNvbjogJyYjODIxMzsnLFxuICAgIHRpdGxlOiAnSG9yaXpvbnRhbCBMaW5lJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydEhvcml6b250YWxSdWxlJylcbiAgfSxcbiAgbGluazoge1xuICAgIGljb246ICcmIzEyODI3OTsnLFxuICAgIHRpdGxlOiAnTGluaycsXG4gICAgcmVzdWx0OiAoKSA9PiB7XG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KCdFbnRlciB0aGUgbGluayBVUkwnKVxuICAgICAgaWYgKHVybCkgZXhlYygnY3JlYXRlTGluaycsIHVybClcbiAgICB9XG4gIH0sXG4gIGltYWdlOiB7XG4gICAgaWNvbjogJyYjMTI4MjQ3OycsXG4gICAgdGl0bGU6ICdJbWFnZScsXG4gICAgcHJvbXB0TXNnOiAnRW50ZXIgdGhlIFVSTCBvZiB0aGUgaW1hZ2UnLFxuICAgIHJlc3VsdCAoKSB7XG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KHRoaXMucHJvbXB0TXNnKVxuICAgICAgaWYgKHVybCkgZXhlYygnaW5zZXJ0SW1hZ2UnLCB1cmwpXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY291cnNlTmFtZVRvQ3NzQ2xhc3MoY3NzUHJlZml4OiBzdHJpbmcsIGNvdXJzZU5hbWU6IHN0cmluZykge1xuICByZXR1cm4gYCR7Y3NzUHJlZml4fSR7Y291cnNlTmFtZS5zdWJzdHIoMCwzKS50b0xvd2VyQ2FzZSgpfWA7XG59XG4iLCJcbmV4cG9ydCBjbGFzcyBQZW5kaW5nSm9iIHtcbiAgcHJpdmF0ZSB0aW1lb3V0SWQgPSBudWxsO1xuICBwcml2YXRlIGNhbmNlbGxlZCA9IGZhbHNlO1xuICBwcml2YXRlIHBlbmRpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBpc0pvYkV4ZWN1dGluZyA9IGZhbHNlO1xuICBwcml2YXRlIGpvYkNhbGxiYWNrOiAoKT0+UHJvbWlzZTxhbnk+O1xuICBcbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6ICgpPT5Qcm9taXNlPGFueT4pIHtcbiAgICB0aGlzLmpvYkNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cblxuICB0cmlnZ2VyQ2hhbmdlKHRocm90dGxlOiBudW1iZXIpOiBhbnkge1xuICAgIGlmICh0aGlzLmNhbmNlbGxlZCkgcmV0dXJuO1xuICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgaWYgKHRoaXMudGltZW91dElkICE9PSBudWxsKVxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTtcbiAgICB0aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCk9PnRoaXMubGF1bmNoSm9iKCksIHRocm90dGxlKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgaWYgKHRoaXMudGltZW91dElkICE9PSBudWxsKVxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTtcbiAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsYXVuY2hKb2IoKSB7XG4gICAgaWYgKHRoaXMuY2FuY2VsbGVkKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLnBlbmRpbmcpIHJldHVybjtcbiAgICBpZiAodGhpcy5pc0pvYkV4ZWN1dGluZykgcmV0dXJuO1xuICAgIHRoaXMudGltZW91dElkID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgdGhpcy5pc0pvYkV4ZWN1dGluZyA9IHRydWU7XG4gICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgIGF3YWl0IHRoaXMuam9iQ2FsbGJhY2soKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5pc0pvYkV4ZWN1dGluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5wZW5kaW5nKVxuICAgICAgYXdhaXQgdGhpcy5sYXVuY2hKb2IoKTtcbiAgfVxufVxuIiwiaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuXG5kZWNsYXJlIHZhciBwcm9jZXNzOiBhbnk7XG5cbmNmZy5FTlZJUk9OTUVOVCA9IHByb2Nlc3MuZW52LkVOVklST05NRU5UIGFzIFwicHJvZHVjdGlvblwiIHwgXCJkZXZlbG9wbWVudFwiIHwgXCJ0ZXN0XCI7XG5jZmcuS0VEX0FQSV9VUkwgPSBwcm9jZXNzLmVudi5LRURfQVBJX1VSTDsgLy8gXCJodHRwczovL2tlZGJhY2tlbmR0ZXN0LmF6dXJld2Vic2l0ZXMubmV0L2FwaS9cIlxuY2ZnLkVEU19BUElfVVJMID0gcHJvY2Vzcy5lbnYuRURTX0FQSV9VUkw7IC8vIFwiaHR0cHM6Ly9lZHNwb3J0YWxvd2luYXBpLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9cIlxuY2ZnLktFRF9UT0tFTl9VUkwgPSBwcm9jZXNzLmVudi5LRURfVE9LRU5fVVJMOyAvLyBcImh0dHBzOi8va2VkYXV0aHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvdG9rZW5cIlxuY2ZnLktFRF9DTElFTlRfSUQgPSBwcm9jZXNzLmVudi5LRURfQ0xJRU5UX0lEOyAvLyBcImRldmNsaWVudFwiLCBcInRlc3RjbGllbnRcIiwgXCIuLi5cIlxuY2ZnLktFRF9DTElFTlRfU0VDUkVUID0gcHJvY2Vzcy5lbnYuS0VEX0NMSUVOVF9TRUNSRVQ7XG5jZmcuS0VEX1JFQUxNID0gcHJvY2Vzcy5lbnYuS0VEX1JFQUxNOyAvLyBcIlNFMVwiXG5jZmcuS0VEX0xPQ0FMRSA9IGNmZy5LRURfTE9DQUxFIHx8IHByb2Nlc3MuZW52LktFRF9MT0NBTEU7IC8vIFwic3ZcIiwgXCJlblwiLiBPbmx5IHNldCBmcm9tIHByb2Nlc3MuZW52IGlmIG5vdCBzZXQgZnJvbSBTaXRlVmlzaW9uIGVsZW1lbnQgY29uZmlnLlxuY2ZnLktFRF9TQ0hPT0xfTE9DQUxFID0gY2ZnLktFRF9TQ0hPT0xfTE9DQUxFIHx8IHByb2Nlc3MuZW52LktFRF9TQ0hPT0xfTE9DQUxFOyAvLyBcInN2XCIsIFwiZW5fc2luXCIsIFwiZW5fbmluXCIuIE9ubHkgc2V0IGZyb20gcHJvY2Vzcy5lbnYgaWYgbm90IHNldCBmcm9tIFNpdGVWaXNpb24gZWxlbWVudCBjb25maWcuXG5jZmcuS0VEX1JFU09VUkNFU19VUkwgPSBjZmcuS0VEX1JFU09VUkNFU19VUkwgfHwgcHJvY2Vzcy5lbnYuS0VEX1JFU09VUkNFU19VUkw7XG4iLCJpbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nLCBnZW5lcmF0ZVF1ZXJ5U3RyaW5nLCBzcGxpdFVybEFuZFF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxzL3F1ZXJ5LXN0cmluZ1wiO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudFdlYiwgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIsIGlzb21vcnBoaWMsIHN0b3JhZ2UgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudHdlYic7XG5pbXBvcnQgeyBCZWFyZXJQcm92aWRlciwgS2VkQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XG5pbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzXCI7XG5pbXBvcnQgeyBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyB9IGZyb20gXCIuLi9hY2Nlc3MtY29udHJvbC9pbmRleFwiO1xuaW1wb3J0IHsgY2hlcnJ5UGlja1Byb3BzIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCI7XG5cbmZ1bmN0aW9uIGdldE1lcmdlZFRva2VuUGF0aCh0b2tlblBhdGg6IHN0cmluZywgbG9jYXRpb25TZWFyY2g6IHN0cmluZywgc2NvcGVzOiBzdHJpbmdbXSkge1xuICAvLyBNZXJnZSBjb25maWd1cmVkIHF1ZXJ5IHBhcmFtcyBvZiB0b2tlbiBwYXRoIHdpdGggcGFyYW1zIGdpdmVuIHRvIGN1cnJlbnQgcGFnZVxuICBjb25zdCBjdXJyZW50UXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uU2VhcmNoKTtcbiAgY29uc3QgaW1wZXJzb25hdGlvblByb3BzID0gY2hlcnJ5UGlja1Byb3BzKGN1cnJlbnRRdWVyeSwgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMpO1xuICBjb25zdCBbdG9rZW5QYXRoV2l0aG91dFF1ZXJ5LCB0b2tlblF1ZXJ5U3RyaW5nXSA9IHNwbGl0VXJsQW5kUXVlcnkodG9rZW5QYXRoKTtcbiAgY29uc3QgdG9rZW5QYXRoUXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKHRva2VuUXVlcnlTdHJpbmcpO1xuICByZXR1cm4gdG9rZW5QYXRoV2l0aG91dFF1ZXJ5ICsgZ2VuZXJhdGVRdWVyeVN0cmluZyh7XG4gICAgLi4udG9rZW5QYXRoUXVlcnksXG4gICAgLi4uaW1wZXJzb25hdGlvblByb3BzLFxuICAgIHNjb3Blczogc2NvcGVzLmpvaW4oJywnKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VG9rZW5JZChtZXJnZWRUb2tlblBhdGg6IHN0cmluZywgdXNlckVtYWlsOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG1lcmdlZFRva2VuUGF0aCArIFwiL1wiICsgdXNlckVtYWlsO1xufVxuXG5mdW5jdGlvbiBzYXZlVXNlckluZm8odXNlcjogVXNlciwgdG9rZW5JZDogc3RyaW5nKSB7XG4gIGVudi5jdXJyZW50VXNlciA9IHVzZXI7XG4gIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJ1c2VySW5mb1wiICsgdG9rZW5JZCwgSlNPTi5zdHJpbmdpZnkodXNlcikpO1xufVxuXG5mdW5jdGlvbiBsb2FkVXNlckluZm8odG9rZW5JZDogc3RyaW5nKSB7XG4gIGNvbnN0IHN0b3JlZFNlc3Npb25Vc2VyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInVzZXJJbmZvXCIgKyB0b2tlbklkKTtcbiAgaWYgKHN0b3JlZFNlc3Npb25Vc2VyKSB7XG4gICAgZW52LmN1cnJlbnRVc2VyID0gSlNPTi5wYXJzZShzdG9yZWRTZXNzaW9uVXNlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoOiBzdHJpbmcsIHVzZXJFbWFpbDogc3RyaW5nKSB7XG4gIGNvbnN0IHRva2VuSWQgPSBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgdXNlckVtYWlsKTtcbiAgcmV0dXJuIG5ldyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGgsIHJlc3BvbnNlVGV4dCA9PiB7XG4gICAgY29uc3QgcmVzID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpIGFzIHsgb2s6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nLCB0b2tlbj86IHN0cmluZywgdXNlcj86IFVzZXIgfTtcbiAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcik7XG4gICAgaWYgKHJlcy51c2VyKSB7XG4gICAgICBzYXZlVXNlckluZm8ocmVzLnVzZXIsIHRva2VuSWQpO1xuICAgIH1cbiAgICByZXR1cm4geyB0b2tlbjogcmVzLnRva2VuLCBleHBpcmVzOiBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDEwMDAgfTtcbiAgfSwgdG9rZW5JZCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoOiBzdHJpbmcsIHVzZXJFbWFpbDogc3RyaW5nKSB7XG4gIGNvbnN0IHRva2VuSWQgPSBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgdXNlckVtYWlsKTtcbiAgcmV0dXJuIG5ldyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGgsIHJlc3BvbnNlVGV4dCA9PiB7XG4gICAgY29uc3QgcmVzID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpIGFzIHsgb2s6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nLCB0b2tlbj86IHN0cmluZywgdXNlcj86IFVzZXIgfTtcbiAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcik7XG4gICAgcmV0dXJuIHsgdG9rZW46IHJlcy50b2tlbiwgZXhwaXJlczogRGF0ZS5ub3coKSArIDU5ICogNjAgKiAxMDAwIH07XG4gIH0sIHRva2VuSWQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcih0b2tlblVybDogc3RyaW5nLCB1c2VyOiBVc2VyLCBzY29wZXM6IHN0cmluZ1tdKSB7XG4gIHJldHVybiBuZXcgS2VkQmVhcmVyUHJvdmlkZXIoXG4gICAgaXNvbW9ycGhpYyxcbiAgICBzdG9yYWdlLFxuICAgIHRva2VuVXJsICsgdXNlci5tYWlsICsgbG9jYXRpb24uc2VhcmNoLFxuICAgIGNmZy5LRURfQ0xJRU5UX0lELFxuICAgIGNmZy5LRURfQ0xJRU5UX1NFQ1JFVCxcbiAgICB0b2tlblVybCwge1xuICAgICAgZW1haWw6IHVzZXIubWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgcm9sZXM6IHVzZXIucm9sZXMsXG4gICAgICBzY2hvb2w6IHVzZXIuc2Nob29sLFxuICAgICAgc2Nob29sVHlwZTogdXNlci5zY2hvb2xUeXBlLFxuICAgICAgc2NvcGVzXG4gICAgfSk7XG59XG5cbi8vIGVudi5jdXJyZW50VXNlci5tYWlsIGlzIHNldCBieSBTaXRlVmlzaW9uIHNlcnZlciBpbml0aWFsbHkuXG4vLyBBIHJlc3BvbnNlIGZyb20gL2FwaS90b2tlbiBtYXkgY2hhbmdlIHRoZSBtYWlsIGF0dHJpYnV0ZSBvZiB0aGUgY3VycmVudFxuLy8gdXNlciwgc28gZW52LmN1cnJlbnRVc2VyLm1haWwgbWF5IGJlIGRpZmZlcmVudCBhZnRlciBnZXR0aW5nIGEgcmVzcG9uc2UuXG4vLyBIb3dldmVyLCB0aGUgaW5pdGlhbCB2YWx1ZSBpcyB2YWx1YWJsZSBhbHdheXMgaW4gb3JkZXIgdG8gZGlzdGluZ3Vpc2ggdGhlIGNhc2Vcbi8vIHdoZW4gb25lIG5vcm1hbCB1c2VyIGxvZ3Mgb3V0IGFuZCBhbm90aGVyIHVzZXIgbG9ncyBpbi5cbmNvbnN0IGluaXRpYWxVc2VyRW1haWwgPSBlbnYuY3VycmVudFVzZXIgJiYgZW52LmN1cnJlbnRVc2VyLm1haWw7IC8vIEluaXRpYWwgdmFsdWUgb2YgbWFpbC4gTWF5IGNoYW5nZS5cbmlmIChpbml0aWFsVXNlckVtYWlsKSB7XG4gIC8vIEtFRFxuICBpZiAoY2ZnLktFRF9UT0tFTl9QQVRIKSB7XG4gICAgLy9cbiAgICAvL1xuICAgIC8vIFByb2R1Y3Rpb24gLyBTaXRlVmlzaW9uIHByb3hpZWQgL2FwaS90b2tlbiB0byByZXF1ZXN0IHRva2VucyBmcm9tOlxuICAgIC8vXG4gICAgLy9cbiAgICBjb25zdCBtZXJnZWRUb2tlblBhdGggPSBnZXRNZXJnZWRUb2tlblBhdGgoXG4gICAgICBjZmcuS0VEX1RPS0VOX1BBVEgsXG4gICAgICBsb2NhdGlvbi5zZWFyY2gsIFtcbiAgICAgICAgXCJrZWRiYWNrZW5kXCIsXG4gICAgICAgIFwiRURTXCIsXG4gICAgICBdKTtcbiAgICBlbnYuYmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGgsIGluaXRpYWxVc2VyRW1haWwpO1xuICAgIGxvYWRVc2VySW5mbyhnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgaW5pdGlhbFVzZXJFbWFpbCkpO1xuXG4gICAgLy8gR29vZ2xlXG4gICAgY29uc3QgZ29vZ2xlTWVyZ2VkUGF0aCA9IGdldE1lcmdlZFRva2VuUGF0aChcbiAgICAgIGNmZy5LRURfVE9LRU5fUEFUSCxcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCwgW1xuICAgICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXIucmVhZG9ubHlcIixcbiAgICAgICAgXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlXCJcbiAgICAgIF0pO1xuICAgIGVudi5nb29nbGVUb2tlblByb3ZpZGVyID0gY3JlYXRlR29vZ2xlVG9rZW5Qcm92aWRlcihnb29nbGVNZXJnZWRQYXRoLCBpbml0aWFsVXNlckVtYWlsKTtcbiAgfSBlbHNlIGlmIChjZmcuS0VEX1RPS0VOX1VSTCAmJiBjZmcuS0VEX0NMSUVOVF9JRCAmJiBjZmcuS0VEX0NMSUVOVF9TRUNSRVQpIHtcbiAgICAvL1xuICAgIC8vXG4gICAgLy8gVGVzdCAtIGdvIGRpcmVjdGx5IHRvIEtFREFVVEggc2VydmVyIHRvIHJldHJpZXZlIHRva2Vuc1xuICAgIC8vXG4gICAgLy9cbiAgICBlbnYuYmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcihjZmcuS0VEX1RPS0VOX1VSTCwgZW52LmN1cnJlbnRVc2VyLCBbXG4gICAgICBcImtlZGJhY2tlbmRcIixcbiAgICAgIFwiRURTXCIsXG4gICAgXSk7XG4gICAgZW52Lmdvb2dsZVRva2VuUHJvdmlkZXIgPSBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcihjZmcuS0VEX1RPS0VOX1VSTCArIFwiL2dvb2dsZVwiLCBlbnYuY3VycmVudFVzZXIsIFtcbiAgICAgIFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jYWxlbmRhci5yZWFkb25seVwiLFxuICAgICAgXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlXCJcbiAgICBdKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIgS0VEX1RPS0VOX1BBVEhgKTtcbiAgfVxufVxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudFdlYiB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcblxuZW52LmtlZEJhY2tlbmRDbGllbnQgPSBuZXcgS2VkQmFja2VuZENsaWVudFdlYiAoXG4gIGNmZy5LRURfQVBJX1VSTCxcbiAgZW52LmJlYXJlclByb3ZpZGVyKTtcblxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0IHsgaXNvbW9ycGhpYyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcbmltcG9ydCB7IEVkc0NsaWVudCB9IGZyb20gJy4uL2FwaXMvZWRzY2xpZW50JztcblxuZW52LmVkc0NsaWVudCA9IG5ldyBFZHNDbGllbnQgKFxuICBpc29tb3JwaGljLFxuICBjZmcuRURTX0FQSV9VUkwsXG4gIGVudi5iZWFyZXJQcm92aWRlcixcbiAgKCk9PmVudi5jdXJyZW50VXNlci5tYWlsKTtcblxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGN1cnJlbnRVc2VyRW52LCB7IEVudiB9IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgdHV0b3JFbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQudHV0b3JFbnYnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB0dXRvcmVkOiBib29sZWFuO1xuICBjcmVhdGVDb21wb25lbnQ6IChlbnY6IEVudik9PlJlYWN0LlJlYWN0Tm9kZVxufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBlbnY6IEVudjtcbn1cblxuZXhwb3J0IGNsYXNzIFR1dG9yYWJsZUNvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25FbnZVcGRhdGVkID0gdGhpcy5vbkVudlVwZGF0ZWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZW52OiBwcm9wcy50dXRvcmVkID8gbnVsbCA6IGN1cnJlbnRVc2VyRW52XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudHV0b3JlZCkge1xuICAgICAgdHV0b3JFbnYuc3Vic2NyaWJlKHRoaXMub25FbnZVcGRhdGVkKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy50dXRvcmVkKSB7XG4gICAgICB0dXRvckVudi51bnN1YnNjcmliZSh0aGlzLm9uRW52VXBkYXRlZCk7XG4gICAgfVxuICB9XG5cbiAgb25FbnZVcGRhdGVkKGVudjogRW52KSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7ZW52fSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2Vudn0gPSB0aGlzLnN0YXRlO1xuICAgIGlmICghZW52KSByZXR1cm4gPGRpdj48L2Rpdj47XG4gICAgaWYgKCFlbnYua2VkQmFja2VuZENsaWVudCkge1xuICAgICAgcmV0dXJuIDxkaXY+TGFkZGFyLi4uPC9kaXY+O1xuICAgIH1cbiAgICAvL2NvbnN0IHtjdXJyZW50VXNlciwgZWRzQ2xpZW50LCBrZWRCYWNrZW5kQ2xpZW50LCBrZ1Rlcm1QbGFubmVyUmVwb30gPSBlbnY7XG4gICAgLy9jb25zdCB7dHV0b3JlZH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNyZWF0ZUNvbXBvbmVudChlbnYpO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VycyB9IGZyb20gJy4uL2RhdGEvdXNlcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2hvb3NlVXNlcigpIHtcbiAgbGV0IHNlbGVjdDtcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0XCI+XG4gICAgPGgyPlbDpGxqIGFudsOkbmRhcmU8L2gyPlxuICAgIDx0YWJsZSBjbGFzc05hbWU9XCJsb2dpbi10YWJsZVwiPjx0aGVhZD48dHI+XG4gICAgICA8dGg+TmFtbjwvdGg+XG4gICAgICA8dGg+Um9sbGVyPC90aD5cbiAgICAgIDx0aD5FLXBvc3Q8L3RoPlxuICAgICAgPHRoPlNrb2xhPC90aD5cbiAgICA8L3RyPjwvdGhlYWQ+XG4gICAgICA8dGJvZHk+XG4gICAgICAgIHt1c2Vycy5tYXAoKHsgdXNlcm5hbWUsIGRpc3BsYXlOYW1lLCBtYWlsLCBzY2hvb2wsIHJvbGVzIH0pID0+XG4gICAgICAgICAgPHRyIGtleT17bWFpbH0gb25DbGljaz17KCkgPT4gbG9jYXRpb24uc2VhcmNoID0gYD91c2VyPSR7dXNlcm5hbWV9YH0+XG4gICAgICAgICAgICA8dGQ+e2Rpc3BsYXlOYW1lfTwvdGQ+XG4gICAgICAgICAgICA8dGQgc3R5bGU9e3JvbGVzLmxlbmd0aCA9PT0gMCA/IHsgZm9udFN0eWxlOiAnaXRhbGljJyB9IDoge319Pntyb2xlcy5sZW5ndGggPT09IDAgPyBcInNha25hciByb2xsZXJcIiA6IHJvbGVzLmpvaW4oJywgJyl9PC90ZD5cbiAgICAgICAgICAgIDx0ZD57bWFpbH08L3RkPlxuICAgICAgICAgICAgPHRkIHN0eWxlPXtzY2hvb2wgPyB7fSA6IHsgZm9udFN0eWxlOiAnaXRhbGljJyB9fT57c2Nob29sIHx8IFwic2FrbmFyIHNrb2xhXCJ9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICApfVxuICAgICAgPC90Ym9keT48L3RhYmxlPlxuICA8L2Rpdj5cbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBDRVByb3BzIHtcbiAgICB0ZXh0OiBzdHJpbmc7IC8vIFRleHQgdG8gYmUgc2hvd24gaW4gZmllbGRcbiAgICB0YWc/OiAndGQnIHwgJ3RoJyB8ICdkaXYnIHwgJ3NwYW4nIHwgJ3AnIHwgJ2gxJyB8ICdoMicgfCAnaDMnOyAvLyBhbGxvd2QgdGFncyAtLSBzaG91bGQgd2UgYWRkIG1vcmU/XG4gICAgb25DaGFuZ2U6IChuZXdOYW1lOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7IC8vIElmIHRleHQgaXMgZW1wdHksIHRoaXMgd2lsbCBiZSB0aGUgcGxhY2Vob2xkZXJcbiAgICBtYXhDaGFycz86IG51bWJlcjtcbiAgICByZWFkT25seT86IGJvb2xlYW47XG4gICAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICAgIHBsYWNlSG9sZGVyPzogc3RyaW5nO1xuXG4gICAgdmFsaWRhdGVWYWx1ZT86IFJlZ0V4cDtcblxuICAgIC8vIEZvciBuYXZpZ2F0aW9uXG4gICAgYWxsb3dOYXZpZ2F0aW9uPzogYm9vbGVhbjsgLy8gdG8gYWN0aXZhdGUgbmF2aWdhdGlvblxuICAgIG9uTmF2aWdhdGU/OiAoZGlyZWN0aW9uOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBDb250ZW50RWRpdGFibGVGaWVsZCBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8Q0VQcm9wcz4ge1xuICAgIG15c2VsZjogUmVhY3QuUmVmT2JqZWN0PGFueT47XG4gICAgcHJvcGFnYXRlZE9uQ2hhbmdlOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogQ0VQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMubXlzZWxmID0gUmVhY3QuY3JlYXRlUmVmPEhUTUxFbGVtZW50PigpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgdGV4dDogcHJvcHMudGV4dCB8fCAnJ1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7dGFnLCB0ZXh0LCByZWFkT25seX0gPSB0aGlzLnByb3BzO1xuICAgICAgICBjb25zdCBUYWdUeXBlID0gdGFnO1xuICAgICAgICByZXR1cm4gPFRhZ1R5cGVcbiAgICAgICAgICAgIGNvbnRlbnRFZGl0YWJsZT17IXJlYWRPbmx5fVxuICAgICAgICAgICAgZGF0YS1wbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlcn1cbiAgICAgICAgICAgIHJlZj17dGhpcy5teXNlbGZ9XG4gICAgICAgICAgICBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzKX1cbiAgICAgICAgICAgIG9uS2V5RG93bj17dGhpcy5vbktleURvd24uYmluZCh0aGlzKX1cbiAgICAgICAgICAgIG9uS2V5VXA9e3RoaXMub25LZXlVcC5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgb25CbHVyPXt0aGlzLm9uQmx1ci5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgb25QYXN0ZT17dGhpcy5vblBhc3RlLmJpbmQodGhpcyl9XG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogdGV4dH19IC8+XG4gICAgfVxuXG4gICAgb25DaGFuZ2UoZTogRXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRleHQ6IHRoaXMubXlzZWxmLmN1cnJlbnQuaW5uZXJUZXh0IH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRha2UgYWN0aW9uIGRlcGVuZGluZyBvbiBrZXktZXZlbnRcbiAgICAgKiBAcGFyYW0gZSBldmVudCBmcm9tIGZpZWxkXG4gICAgICogXG4gICAgICogSWYgYWxsb3dOYXZpZ2F0aW9uIHRoZW4gbGlzdGVuIHRvIGFycm93LWtleXNcbiAgICAgKiBMaW1pdHMgdG8gbWF4Q2hhcnNcbiAgICAgKi9cbiAgICBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5teXNlbGYuY3VycmVudC5pbm5lclRleHQ7XG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgICAgICAgIHRoaXMubXlzZWxmLmN1cnJlbnQuaW5uZXJUZXh0ID0gdGhpcy5wcm9wcy50ZXh0IHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLm15c2VsZi5jdXJyZW50LmJsdXIoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0gZWxzZSBpZihlLmtleSA9PT0gJ0VudGVyJyl7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRlKHRleHQsICdkb3duJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXkgPT09ICdUYWInKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BhZ2F0ZU9uQ2hhbmdlKHRleHQpO1xuICAgICAgICB9ICBlbHNlIGlmKHRleHQubGVuZ3RoID49IHRoaXMucHJvcHMubWF4Q2hhcnMgJiYgKFxuICAgICAgICAgICAgL15bXFxkXFx3XFxzXSQvLnRlc3QoZS5rZXkpICYmICEoZS5tZXRhS2V5IHx8IGUuY3RybEtleSlcbiAgICAgICAgKSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmFsbG93TmF2aWdhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgbmF2RGlyID0gZS5rZXkuc3RhcnRzV2l0aCgnQXJyb3cnKSA/IGUua2V5LnJlcGxhY2UoJ0Fycm93JywgJycpLnRvTG93ZXJDYXNlKCkgOiBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IGNhcmV0ID0gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKS5lbmRPZmZzZXQ7IC8vIG9ubHkgd29ya3MgZm9yIHBsYWludGV4dFxuICAgICAgICAgICAgaWYgKG5hdkRpciAmJiB0ZXh0Lmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZSh0ZXh0LCBuYXZEaXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuYXZEaXIgJiYgKG5hdkRpciA9PSAndXAnIHx8IG5hdkRpciA9PSAnZG93bicpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZSh0ZXh0LCBuYXZEaXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuYXZEaXIgJiYgKFxuICAgICAgICAgICAgICAgIChuYXZEaXIgPT0gJ2xlZnQnICYmIGNhcmV0ID09IDApIHx8XG4gICAgICAgICAgICAgICAgKG5hdkRpciA9PSAncmlnaHQnICYmIGNhcmV0ID09IHRleHQubGVuZ3RoKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGUodGV4dCwgbmF2RGlyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSBlIGV2ZW50IGZyb20gZmllbGRcbiAgICAgKiBTb2xlbHkgdXNlZCB0byBoYW5kZSB2YWxpZGF0aW9ucy1pc3N1ZXNcbiAgICAgKi9cbiAgICBvbktleVVwKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMubXlzZWxmLmN1cnJlbnQuaW5uZXJUZXh0O1xuICAgICAgICBpZiAodGhpcy5wcm9wcy52YWxpZGF0ZVZhbHVlICE9PSB1bmRlZmluZWQgJiYgIXRoaXMucHJvcHMudmFsaWRhdGVWYWx1ZS50ZXN0KHRleHQpKSB7XG4gICAgICAgICAgICB0aGlzLm15c2VsZi5jdXJyZW50LmlubmVyVGV4dCA9IHRoaXMucHJvcHMudGV4dCB8fCBcIlwiO1xuICAgICAgICAgICAgdGhpcy5teXNlbGYuY3VycmVudC5ibHVyKCk7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdmFsdWUgYW5kIHBhc3MgdG8gcGFyZW50cyBuYXZpZ2F0ZS1mdW5jaXRvblxuICAgICAqIEBwYXJhbSB0ZXh0IFxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gXG4gICAgICovXG4gICAgbmF2aWdhdGUodGV4dDogc3RyaW5nLCBkaXJlY3Rpb246IHN0cmluZykge1xuICAgICAgICAvLyBmaXJzdCB1cGRhdGUgY2VsbFxuICAgICAgICB0aGlzLnByb3BhZ2F0ZU9uQ2hhbmdlKHRleHQpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdGV4dDogdGV4dH0gKTtcbiAgICAgICAgLy8gdGhlbiBuYXZpZ2F0ZSBhd2F5XG4gICAgICAgIHRoaXMucHJvcHMub25OYXZpZ2F0ZShkaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2Ugc3VyZSBwYXN0ZWQgdGV4dCBpcyBwdXJlIHRleHRcbiAgICAgKiBAcGFyYW0gZSB0aGUgcGFzZXQgZXZlbnRcbiAgICAgKi9cbiAgICBvblBhc3RlKGU6IENsaXBib2FyZEV2ZW50KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgdGV4dCA9IChlLmNsaXBib2FyZERhdGEgJiYgZS5jbGlwYm9hcmREYXRhLmdldERhdGEpPyAgZS5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpIDogJyc7XG4gICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiaW5zZXJ0SFRNTFwiLCBmYWxzZSwgdGV4dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHZhbHVlIG9uIGV4aXQgZnJvbSBmaWVsZFxuICAgICAqIEBwYXJhbSBlIFxuICAgICAqL1xuICAgIG9uQmx1cihlOiBFdmVudCkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5teXNlbGYuY3VycmVudC5pbm5lclRleHQ7XG4gICAgICAgIHRoaXMucHJvcGFnYXRlT25DaGFuZ2UodGV4dCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0ZXh0OiB0ZXh0IH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9ubHkgdXBkYXRlIHZhbHVlIGlmIGl0IGhhcyBjaGFuZ2VkXG4gICAgICogQHBhcmFtIG5ld1ZhbHVlIFxuICAgICAqL1xuICAgIHByb3BhZ2F0ZU9uQ2hhbmdlKG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BhZ2F0ZWRPbkNoYW5nZSAhPSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVkT25DaGFuZ2UgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UobmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvdXJzZSwgU2Nob29sLCBVc2VySGlkZGVuQ291cnNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0IHsgc2hvd0Vycm9yLCBmbGF0dGVuLCBjb21wYXJlUHJvcCwgc2hvd0luZm8sIEwgfSBmcm9tIFwiLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcbmltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcsIGdlbmVyYXRlUXVlcnlTdHJpbmcgfSBmcm9tIFwiLi4vLi4vdXRpbHMvcXVlcnktc3RyaW5nXCI7XG5pbXBvcnQgeyBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSB9IGZyb20gJy4uLy4uL2FjY2Vzcy1jb250cm9sL2luZGV4JztcbmltcG9ydCB7IGhpZGRlbkNvdXJzZXNSZXBvLCBDb3Vyc2VXaXRoSGlkZGVuU3RhdGUgfSBmcm9tICcuLi8uLi9yZXBvcy9oaWRkZW4tY291cnNlcy1yZXBvJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgaXNMb2FkaW5nOiBib29sZWFuXG4gIGNvdXJzZXM6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZVtdXG4gIGhlYWRlck9wZW46IGJvb2xlYW5cbn1cblxuZXhwb3J0IGNsYXNzIExpc3RDb3Vyc2VzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgY291cnNlczogW10sXG4gICAgICBoZWFkZXJPcGVuOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy51cGRhdGVIaWRkZW5Db3Vyc2VzID0gdGhpcy51cGRhdGVIaWRkZW5Db3Vyc2VzLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgaGlkZGVuQ291cnNlc1JlcG8uc3Vic2NyaWJlKHRoaXMudXBkYXRlSGlkZGVuQ291cnNlcywge2Z1bGxDb3Vyc2U6IHRydWV9KTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGhpZGRlbkNvdXJzZXNSZXBvLnVuc3Vic2NyaWJlKHRoaXMudXBkYXRlSGlkZGVuQ291cnNlcyk7XG4gIH1cblxuICB1cGRhdGVIaWRkZW5Db3Vyc2VzKGNvdXJzZXM6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZVtdKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7Y291cnNlcywgaXNMb2FkaW5nOiBmYWxzZX0pO1xuICB9XG5cbiAgYXN5bmMgaGlkZUNvdXJzZShjb3Vyc2U6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZSkge1xuICAgIHNob3dJbmZvKExgU3BhcmFyLi4uYCk7XG4gICAgYXdhaXQgaGlkZGVuQ291cnNlc1JlcG8uaGlkZUNvdXJzZShjb3Vyc2UpO1xuICAgIHNob3dJbmZvKFwiXCIpO1xuICB9XG5cbiAgYXN5bmMgc2hvd0NvdXJzZShjb3Vyc2U6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZSkge1xuICAgIHNob3dJbmZvKExgU3BhcmFyLi4uYCk7XG4gICAgYXdhaXQgaGlkZGVuQ291cnNlc1JlcG8uc2hvd0NvdXJzZShjb3Vyc2UpO1xuICAgIHNob3dJbmZvKFwiXCIpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmlzTG9hZGluZykgcmV0dXJuIDxTcGlubmVyIC8+O1xuICAgIGNvbnN0IHtjb3Vyc2VzfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgdmlzaWJsZUNvdXJzZXMgPSBjb3Vyc2VzLmZpbHRlcihjb3Vyc2UgPT4gY291cnNlLnZpc2libGUpO1xuICAgIGNvbnN0IGhpZGRlbkNvdXJzZXMgPSBjb3Vyc2VzLmZpbHRlcihjb3Vyc2UgPT4gIWNvdXJzZS52aXNpYmxlKTtcbiAgICBjb25zdCBxdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoKTtcbiAgICBjb25zdCB2aWV3Q291cnNlVXJsID0gY2ZnLktFRF9DT1VSU0VfVklFV0VSX1VSTDtcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxuICAgICAgPGgzPlNrb2xhbnMga3Vyc2VyPC9oMz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lciBvZGQtZXZlblwiPlxuICAgICAgICB7dmlzaWJsZUNvdXJzZXMubWFwKGNvdXJzZSA9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3R1ZGVudENvdXJzZVwiIGtleT17Y291cnNlLmlkfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBwdWxsLXJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiaGlkZUl0ZW1cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLmhpZGVDb3Vyc2UoY291cnNlKX0gLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj17cHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkodmlld0NvdXJzZVVybCwge2NvdXJzZUlkOiBjb3Vyc2UuaWR9KX0+e2NvdXJzZS5uYW1lfTwvYT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+e2NvdXJzZS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcIm9wZW5DbG9zZVwiICsgKHRoaXMuc3RhdGUuaGVhZGVyT3BlbiA/IFwiIG9wZW5cIiA6IFwiXCIpfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuSGVhZGVyXCIgb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZSh7IGhlYWRlck9wZW46ICF0aGlzLnN0YXRlLmhlYWRlck9wZW4gfSl9PlxuICAgICAgICAgIDxoNT5Eb2xkYSBrdXJzZXI8L2g1PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuQ29udGVudFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lciBvZGQtZXZlblwiPlxuICAgICAgICAgICAge2hpZGRlbkNvdXJzZXMubWFwKGNvdXJzZSA9PiBcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3R1ZGVudENvdXJzZVwiIGtleT17Y291cnNlLmlkfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgcHVsbC1yaWdodFwiPlxuICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwic2hvd0l0ZW1cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnNob3dDb3Vyc2UoY291cnNlKX0+PC9hPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9e2dlbmVyYXRlUXVlcnlTdHJpbmcoey4uLnF1ZXJ5LCBjb3Vyc2VJZDogY291cnNlLmlkfSl9Pntjb3Vyc2UubmFtZX08L2E+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+e2NvdXJzZS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGVhcm5pbmdNb2R1bGVUYXNrLCBUYXNrTGlzdCB9IGZyb20gJy4vdGFzay1saXN0JztcbmltcG9ydCB7IExhbmd1YWdlQ29udGV4dCB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjb21tb25UYXNrczogTGVhcm5pbmdNb2R1bGVUYXNrW11cbiAgbGVhcm5pbmdHb2FsczogTGVhcm5pbmdHb2FsW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBMZWFybmluZ0dvYWwge1xuICBuYW1lOiBzdHJpbmc7XG4gIGxlYXJuaW5nVGFza3M6IExlYXJuaW5nTW9kdWxlVGFza1tdO1xufVxuXG5leHBvcnQgY2xhc3MgTGVhcm5pbmdHb2Fsc0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2NvbW1vblRhc2tzLCBsZWFybmluZ0dvYWxzfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2ludGx9ID0gdGhpcy5jb250ZXh0O1xuICAgIHJldHVybiA8ZGl2PntsZWFybmluZ0dvYWxzLm1hcChsZyA9PiA8ZGl2IGtleT17bGcubmFtZX0+XG4gICAgICA8aDU+e2xnLm5hbWV9PC9oNT5cbiAgICAgIDxUYXNrTGlzdCBsZWFybmluZ1Rhc2tzPXtsZy5sZWFybmluZ1Rhc2tzfSAvPlxuICAgIDwvZGl2Pil9XG4gICAge2NvbW1vblRhc2tzLmxlbmd0aCA+IDAgJiYgPGRpdj5cbiAgICAgIHtsZWFybmluZ0dvYWxzLmxlbmd0aCA+IDAgJiYgPGg1PntpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwibGVhcm5pbmdHb2Fsc0xvc3Qub3ZlcmFsbFwiLCBkZWZhdWx0TWVzc2FnZTpcIsOWdmVyZ3JpcGFuZGVcIn0pIH08L2g1Pn0gXG4gICAgICA8VGFza0xpc3QgbGVhcm5pbmdUYXNrcz17Y29tbW9uVGFza3N9IC8+XG4gICAgPC9kaXY+fVxuICAgIDwvZGl2PjtcbiAgfVxufSIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7TW9ja0VEU0FjYWRlbWljWWVhciwgTW9ja0VEU0RhdGVSYW5nZX0gZnJvbSAnLi4vY29udHJhY3RzL2Vkcyc7XG5pbXBvcnQge0FjYWRlbWljWWVhclN0cnVjdHVyZSwgIFRlcm0gfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQgeyBJbmplY3RlZEludGwgfSBmcm9tICdyZWFjdC1pbnRsJzsgIFxuXG5leHBvcnQgaW50ZXJmYWNlIEdlbmVyaWNTY2hvb2xNb21lbnQge1xuICAgIGFjYWRlbWljWWVhclN0cnVjdHVyZTogQWNhZGVtaWNZZWFyU3RydWN0dXJlO1xuICAgIHRlcm06IFRlcm07XG4gIH1cbiAgXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3VycmVudEFjYWRlbWljWWVhcihjdXJyZW50RGF0ZTogbW9tZW50Lk1vbWVudCwgYWNhZGVtaWNZZWFyOiBNb2NrRURTQWNhZGVtaWNZZWFyKSA6IEdlbmVyaWNTY2hvb2xNb21lbnRcbntcbiAgdmFyIGZpcnN0VGVybVN0YXJ0RGF0ZSA9IG1vbWVudChuZXcgRGF0ZShhY2FkZW1pY1llYXIuZmlyc3RUZXJtLnN0YXJ0RGF0ZSkpO1xuICB2YXIgZmlyc3RUZXJtRW5kRGF0ZSA9IG1vbWVudChuZXcgRGF0ZShhY2FkZW1pY1llYXIuZmlyc3RUZXJtLmVuZERhdGUpKTtcbiAgdmFyIHNlY29uZFRlcm1TdGFydERhdGUgPSBtb21lbnQobmV3IERhdGUoYWNhZGVtaWNZZWFyLnNlY29uZFRlcm0uc3RhcnREYXRlKSk7XG4gIHZhciBzZWNvbmRUZXJtRW5kRGF0ZSA9IG1vbWVudChuZXcgRGF0ZShhY2FkZW1pY1llYXIuc2Vjb25kVGVybS5lbmREYXRlKSk7XG4gIHZhciBhY2FkZW1pY1BlcmlvZCA9IGZpcnN0VGVybVN0YXJ0RGF0ZS55ZWFyKCkudG9TdHJpbmcoKS5zdWJzdHIoMikgKyBcIi9cIiArIHNlY29uZFRlcm1FbmREYXRlLnllYXIoKS50b1N0cmluZygpLnN1YnN0cigyKTtcblxuICB2YXIgaG9saWRheXMgPSBfZ2V0VGVybUhvbGlkYXlzKGFjYWRlbWljWWVhci5ob2xpZGF5cywgZmlyc3RUZXJtU3RhcnREYXRlLCBmaXJzdFRlcm1FbmREYXRlKTsgXG4gIGlmKGN1cnJlbnREYXRlIDwgZmlyc3RUZXJtRW5kRGF0ZSlcbiAge1xuICAgIC8vY29tcHV0ZSBhY2FkZW1pYyB3ZWVrIG51bWJlcnNcbiAgICB2YXIgYWNhZGVtaWNTdGFydFdlZWsgPSAxO1xuICAgIHZhciBhY2FkZW1pY0VuZFdlZWsgPSBmaXJzdFRlcm1FbmREYXRlLndlZWsoKSAtIGZpcnN0VGVybVN0YXJ0RGF0ZS53ZWVrKCk7XG4gICAgLy9nZXQgY3VycmVudCB0ZXJtIGhvbGlkYXlzXG4gICAgcmV0dXJuIHt0ZXJtOiAnQVQnLCBhY2FkZW1pY1llYXJTdHJ1Y3R1cmU6IHthY2FkZW1pY1llYXI6IGFjYWRlbWljUGVyaW9kLCBzdGFydERhdGU6IGZpcnN0VGVybVN0YXJ0RGF0ZSwgZW5kRGF0ZTogZmlyc3RUZXJtRW5kRGF0ZSxhY2FkZW1pY1N0YXJ0V2VlaywgYWNhZGVtaWNFbmRXZWVrLCBob2xpZGF5c319O1xuICB9XG5cbiAgLy9jb21wdXRlIHRoZSBudW1iZXIgb2YgZmlyc3QgdGVybSBob2xpZGF5cyB3ZWVrIG51bWJlcnNcbiAgdmFyIG51bWJlck9mSG9saWRheVdlZWtzID0gX2dldEhvbGlkYXlXZWVrc051bWJlcihob2xpZGF5cyk7XG4gIC8vY29tcHV0ZSBhY2FkZW1pYyB3ZWVrIG51bWJlcnNcbiAgdmFyIGFjYWRlbWljU3RhcnRXZWVrID0gc2Vjb25kVGVybVN0YXJ0RGF0ZS5jbG9uZSgpLmFkZCgxLCAnd2VlaycpLndlZWsoKSAtIGZpcnN0VGVybVN0YXJ0RGF0ZS53ZWVrKCkgLSBudW1iZXJPZkhvbGlkYXlXZWVrcztcbiAgdmFyIGFjYWRlbWljRW5kV2VlayA9IHNlY29uZFRlcm1FbmREYXRlLmNsb25lKCkuYWRkKCkuYWRkKDEsICd3ZWVrJykud2VlaygpIC0gZmlyc3RUZXJtU3RhcnREYXRlLndlZWsoKSAtIG51bWJlck9mSG9saWRheVdlZWtzO1xuICAvL2dldCBjdXJyZW50IHRlcm0gaG9saWRheXNcbiAgdmFyIGhvbGlkYXlzID0gX2dldFRlcm1Ib2xpZGF5cyhhY2FkZW1pY1llYXIuaG9saWRheXMsIHNlY29uZFRlcm1TdGFydERhdGUsIHNlY29uZFRlcm1FbmREYXRlKTtcbiAgcmV0dXJuIHt0ZXJtOiAnU1QnLCBhY2FkZW1pY1llYXJTdHJ1Y3R1cmU6IHthY2FkZW1pY1llYXI6IGFjYWRlbWljUGVyaW9kLCBzdGFydERhdGU6IHNlY29uZFRlcm1TdGFydERhdGUsIGVuZERhdGU6IHNlY29uZFRlcm1FbmREYXRlLCBhY2FkZW1pY1N0YXJ0V2VlaywgYWNhZGVtaWNFbmRXZWVrLCBob2xpZGF5c319O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2hvb2xUcmFuc2xhdGVkU3ViamVjdHMoc2Nob29sTG9jYWxlOiBzdHJpbmcsIGludGw6IEluamVjdGVkSW50bCl7XG4gIHZhciB0cmFuc2xhdGVkQ29sdW1ucyA9IHt9O1xuICAvL3RoZXNlIGFyZSBmaXhlZCBmb3IgYWxsIHNjaG9vbCBsb2NhbGVzXG4gIHRyYW5zbGF0ZWRDb2x1bW5zW1wiS3Vyc1wiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuY291cnNlXCIsIGRlZmF1bHRNZXNzYWdlOiBcIkt1cnNcIn0pO1xuICB0cmFuc2xhdGVkQ29sdW1uc1tcIktvbW1lbnRhclwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuY29tbWVudHNcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiS29tbWVudGFyXCJ9KTtcblxuICBpZihzY2hvb2xMb2NhbGUgPT09ICdzdicpe1xuICAgIHRyYW5zbGF0ZWRDb2x1bW5zW1wiTS5zcHJcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLm1vZGVybkxhbmd1YWdlXCIsIGRlZmF1bHRNZXNzYWdlOiBcIk0uc3ByXCJ9KTtcbiAgICB0cmFuc2xhdGVkQ29sdW1uc1tcIk1hXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5tYXRoc1wiLCBkZWZhdWx0TWVzc2FnZTogXCJNYVwifSk7XG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJTdi9TdkFcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLnN3ZWRpc2hMYW5ndWFnZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJTdi9TdkFcIn0pO1xuICAgIHRyYW5zbGF0ZWRDb2x1bW5zW1wiRW5nXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5lbmdsaXNoTGFuZ3VhZ2VcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiRW5nXCJ9KTtcbiAgfVxuICBlbHNlIHtcbiAgICB0cmFuc2xhdGVkQ29sdW1uc1tcIk1GTFwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIubW9kZXJuTGFuZ3VhZ2VcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiTUZMXCJ9KTtcbiAgICB0cmFuc2xhdGVkQ29sdW1uc1tcIk1hXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5tYXRoc1wiLCBkZWZhdWx0TWVzc2FnZTogXCJNYXRoc1wifSk7XG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJIaVwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuaGluZGlMYW5ndWFnZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJIaW5kaVwifSk7XG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJFbmdcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLmVuZ2xpc2hMYW5ndWFnZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJFbmdsaXNoXCJ9KTtcbiAgICB0cmFuc2xhdGVkQ29sdW1uc1tcIllvZ2FcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLnlvZ2FcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiWW9nYVwifSk7XG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJJQ1RcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLmljdFwiLCBkZWZhdWx0TWVzc2FnZTogXCJJQ1RcIn0pO1xuICB9XG4gIHJldHVybiB0cmFuc2xhdGVkQ29sdW1ucztcbn1cblxuLy90aGlzIGlzIHJlbGF0ZWQgdG8gY2hhcnRzLiBJdCBpcyB1c2VkIG9ubHkgZm9yIHN2IGxvY2FsZVxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaG9vbFRyYW5zbGF0ZWRTdWJqZWN0RnVsbG5hbWUoaW50bDogSW5qZWN0ZWRJbnRsKXtcbiAgdmFyIHRyYW5zbGF0ZWRDb2x1bW5zID0ge307XG5cbiAgdHJhbnNsYXRlZENvbHVtbnNbXCJNLnNwclwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIubW9kZXJuTGFuZ3VhZ2VGdWxsbmFtZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJNLnNwcsOla1wifSk7XG4gIHRyYW5zbGF0ZWRDb2x1bW5zW1wiTWFcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLm1hdGhzRnVsbG5hbWVcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiTWF0ZW1hdGlrXCJ9KTtcbiAgdHJhbnNsYXRlZENvbHVtbnNbXCJTdi9TdkFcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLnN3ZWRpc2hMYW5ndWFnZUZ1bGxOYW1lXCIsIGRlZmF1bHRNZXNzYWdlOiBcIlN2ZW5za2FcIn0pO1xuICB0cmFuc2xhdGVkQ29sdW1uc1tcIkVuZ1wiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuZW5nbGlzaExhbmd1YWdlRnVsbE5hbWVcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiRW5nZWxza2FcIn0pO1xuXG4gIHJldHVybiB0cmFuc2xhdGVkQ29sdW1ucztcbn1cblxuZnVuY3Rpb24gX2dldFRlcm1Ib2xpZGF5cyhob2xpZGF5czogTW9ja0VEU0RhdGVSYW5nZVtdLCB0ZXJtU3RhcnREYXRlOiBtb21lbnQuTW9tZW50LCB0ZXJtRW5kRGF0ZTogbW9tZW50Lk1vbWVudCl7XG4gIHJldHVybiBob2xpZGF5cy5maWx0ZXIoZWxlbSA9PiB7XG4gICAgcmV0dXJuIG1vbWVudChlbGVtLnN0YXJ0RGF0ZSkuaXNCZXR3ZWVuKHRlcm1TdGFydERhdGUsIHRlcm1FbmREYXRlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIF9nZXRIb2xpZGF5V2Vla3NOdW1iZXIoaG9saWRheXM6TW9ja0VEU0RhdGVSYW5nZVtdKXtcbiAgdmFyIG51bWJlck9mV2Vla3MgPSAwO1xuICBob2xpZGF5cy5mb3JFYWNoKGVsZW0gPT4ge1xuICAgIC8vdGhlIG51bWJlciBvZiB3ZWVrcyBpcyB0aGUgZGlmZmVyZW5jZSArIDFcbiAgICBudW1iZXJPZldlZWtzKz0gbW9tZW50KGVsZW0uZW5kRGF0ZSkuYWRkKDEsICd3ZWVrJykud2VlaygpIC0gbW9tZW50KGVsZW0uc3RhcnREYXRlKS53ZWVrKCk7XG4gIH0pO1xuICByZXR1cm4gbnVtYmVyT2ZXZWVrcztcbn0iLCJpbXBvcnQge1Rlcm19IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmltcG9ydCB7RURTQ291cnNlfSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcnN0QW5kTGFzdFdlZWsodGVybTogVGVybSkge1xuICByZXR1cm4gdGVybSA9PT0gJ0FUJyA/XG4gICAgWzMzLCA1MF0gOiAgLy8gVGhpcyBpcyBhIGd1ZXNzISBOZWVkIGRhdGEhIFNob3VsZCBiZSBwb3NzaWJsZSB0byBnZXQgZnJvbSBza29sYTI0P1xuICAgIFsyLCAyM107ICAgIC8vIFRoaXMgaXMgYSBndWVzcyEgTmVlZCBkYXRhIVxufVxuXG5leHBvcnQgY29uc3QgTEFTVF9TVEVQX1NQUklORyA9IDI4OyAvLyBXZWVrIDI4IGlzIGluIHN1bW1lci4gVXNlIGl0IGFzIHBsYWNlaG9sZGVyIGZvciBcImxhc3Qgc3RlcFwiXG5leHBvcnQgY29uc3QgTEFTVF9TVEVQX0FVVFVNTiA9IDUyOyAvLyBXZWVrIG11c3QgYmUgdmFsaWQuIFVzZSBpdCBhcyBwbGFjZWhvbGRlciBmb3IgXCJsYXN0IHN0ZXBcIlxuXG4vKipcbiAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIHRpZ2h0bHkgY291cGxlZCB0byB0aGUgc3dlZGlzaCBzY2hvb2wuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQ291cnNlRnJvbUNvbHVtbkhlYWRlcihcbiAgY291cnNlczogRURTQ291cnNlW10sXG4gIGNvbHVtbkhlYWRlcjogc3RyaW5nKSA6IEVEU0NvdXJzZSB8IG51bGxcbntcbiAgc3dpdGNoIChjb2x1bW5IZWFkZXIpIHtcbiAgICBjYXNlICdNLnNwcic6IHJldHVybiBjb3Vyc2VzXG4gICAgICAuZmlsdGVyKGNvdXJzZSA9PiBjb3Vyc2Uuc2hvcnROYW1lICE9PSAnTUEnICYmIGNvdXJzZS5zaG9ydE5hbWUuc3RhcnRzV2l0aCgnTScpKVswXSB8fCBudWxsO1xuICAgIGNhc2UgJ01hJzogcmV0dXJuIGNvdXJzZXMuZmlsdGVyKGMgPT4gYy5zaG9ydE5hbWUgPT09IFwiTUFcIilbMF0gfHwgbnVsbDtcbiAgICBjYXNlICdTdi9TdkEnOiByZXR1cm4gY291cnNlcy5maWx0ZXIoYyA9PiBjLnNob3J0TmFtZS5zdGFydHNXaXRoKFwiU1ZcIikpWzBdIHx8IG51bGw7XG4gICAgY2FzZSAnRW5nJzogcmV0dXJuIGNvdXJzZXMuZmlsdGVyKGMgPT4gYy5zaG9ydE5hbWUgPT09IFwiRU5cIilbMF0gfHwgbnVsbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbHVtbnNIZWFkZXIobG9jYWxlOiBzdHJpbmcpOiBzdHJpbmdbXVxue1xuICBzd2l0Y2gobG9jYWxlKVxuICB7XG4gICAgY2FzZSAnc3YnOlxuICAgIHJldHVybiBbJ00uc3ByJywnTWEnLCAnU3YvU3ZBJywgJ0VuZyddO1xuICAgIGNhc2UgJ2VuX3Npbic6XG4gICAgcmV0dXJuIFsnTUZMJywnTWEnLCAnSGknLCAnRW5nJywgJ1lvZ2EnLCAnSUNUJ107XG4gICAgY2FzZSAnZW5fbmluJzpcbiAgICByZXR1cm4gWydNRkwnLCdNYScsICdIaScsICdFbmcnLCAnWW9nYScsICdJQ1QnXTtcbiAgfVxufVxuXG4vKipcbiAqIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uIGlzIHRpZ2h0bHkgY291cGxlZCB0byB0aGUgc3dlZGlzaCBzY2hvb2wuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2x1bW5IZWFkZXJGcm9tQ291cnNlKGNvdXJzZTogRURTQ291cnNlKSA6IHN0cmluZ1xue1xuICBjb25zdCBzaG9ydE5hbWUgPSBjb3Vyc2Uuc2hvcnROYW1lO1xuICBpZiAoc2hvcnROYW1lID09PSBcIk1BXCIpIHJldHVybiAnTWEnO1xuICBpZiAoc2hvcnROYW1lID09PSBcIkVOXCIpIHJldHVybiAnRW5nJztcbiAgaWYgKHNob3J0TmFtZS5zdGFydHNXaXRoKFwiU1ZcIikpIHJldHVybiAnU3YvU3ZBJztcbiAgaWYgKHNob3J0TmFtZS5zdGFydHNXaXRoKFwiTTJcIikpIHJldHVybiAnTS5zcHInO1xuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IEFjYWRlbWljWWVhclN0cnVjdHVyZSwgVGVybSB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmltcG9ydCB7IE1vY2tFRFNBY2FkZW1pY1llYXIgfSBmcm9tICcuLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7IEdlbmVyaWNTY2hvb2xNb21lbnQsIGdldEN1cnJlbnRBY2FkZW1pY1llYXIgfSBmcm9tICcuL2dlbmVyaWMtc2Nob29sLXV0aWxzJztcbmltcG9ydCB7IEluamVjdGVkSW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgTEFTVF9TVEVQX1NQUklORywgTEFTVF9TVEVQX0FVVFVNTiB9IGZyb20gJy4uL2NvbXBvbmVudHMva3MtdGVybXBsYW5uZXIvdGVybXBsYW5uZXItdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgR2VuZXJpY1NjaG9vbFRlcm0ge1xuICBzY2hvb2xNb21lbnQ6IEdlbmVyaWNTY2hvb2xNb21lbnQ7XG4gIHNlbGVjdGVkRGF0ZTogRGF0ZTtcbiAgbG9jYWxlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoY3VycmVudERhdGU6IERhdGUsIGN1cnJlbnRMb2NhbGU/OiBzdHJpbmcsIGFjYWRlbWljWWVhclN0cnVjdHVyZT86IE1vY2tFRFNBY2FkZW1pY1llYXIpIHtcbiAgICB0aGlzLmxvY2FsZSA9IGN1cnJlbnRMb2NhbGUgfHwgXCJzdlwiO1xuICAgIHRoaXMuc2VsZWN0ZWREYXRlID0gY3VycmVudERhdGU7XG4gICAgdGhpcy5zY2hvb2xNb21lbnQgPSBhY2FkZW1pY1llYXJTdHJ1Y3R1cmUgPyBnZXRDdXJyZW50QWNhZGVtaWNZZWFyKG1vbWVudChjdXJyZW50RGF0ZSksIGFjYWRlbWljWWVhclN0cnVjdHVyZSkgOiBudWxsO1xuICB9XG5cbiAgZ2V0VGVybVN0YXJ0QW5kRW5kKGluY2x1ZGVFeHRyYVdlZWs/OiBib29sZWFuKTogbW9tZW50Lk1vbWVudFtdIHtcbiAgICAvL0luIGNhc2UgdGhhdCB0aGUgd2VlayBzdGFydCBkYXRlIGlzIGEgZGF0ZSBmcm9tIHRoZSBwcmV2aW91cyB5ZWFyXG4gICAgLy9Db25zaWRlciB0aGUgc3RhcnQgb2YgdGhlIHdlZWsgKCBzdGFydCBkYXRlKSBhcyB0aGUgZGF5IG9mIHRoZSAwMS4wMS55ZWFyXG4gICAgdmFyIHN0YXJ0T2ZUZXJtV2VlayA9IHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5zdGFydERhdGUuY2xvbmUoKS5zdGFydE9mKCd3ZWVrJyk7XG5cbiAgICBpZiAoc3RhcnRPZlRlcm1XZWVrLnllYXIoKSA8IHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5zdGFydERhdGUueWVhcigpKSB7XG4gICAgICBzdGFydE9mVGVybVdlZWsgPSB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuc3RhcnREYXRlO1xuICAgIH1cblxuICAgIHZhciBlbmRPZlRlcm1XZWVrID0gdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGU7XG5cbiAgICBpZih0aGlzLmxvY2FsZSA9PT0gXCJzdlwiICYmIGluY2x1ZGVFeHRyYVdlZWsgJiYgdGhpcy5zY2hvb2xNb21lbnQudGVybSA9PT0gXCJTVFwiKXtcbiAgICAgIGVuZE9mVGVybVdlZWsgPSBlbmRPZlRlcm1XZWVrLmNsb25lKCkuYWRkKDMsICd3ZWVrcycpLmVuZE9mKCd3ZWVrJyk7XG4gICAgfVxuICAgIGVsc2UgaWYoaW5jbHVkZUV4dHJhV2Vlayl7XG4gICAgICBpZih0aGlzLmxvY2FsZSAhPSBcInN2XCIpe1xuICAgICAgICAvLyBmb3IgaW5kaWEgdGhlIGVuZCBkYXRlIGNhbiBiZSBpbiB0aGUgbWlkZGxlIG9mIHRoZSB3ZWVrXG4gICAgICAgIGVuZE9mVGVybVdlZWs9IHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5lbmREYXRlLmNsb25lKCk7XG4gICAgICB9XG4gICAgICBlbmRPZlRlcm1XZWVrID0gIHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5lbmREYXRlLmNsb25lKCkuYWRkKDEsICd3ZWVrJykuZW5kT2YoJ3dlZWsnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3N0YXJ0T2ZUZXJtV2VlaywgZW5kT2ZUZXJtV2Vla107XG4gIH1cblxuICBnZXRGaXJzdEFuZExhc3RXZWVrT2ZUZXJtKCkge1xuICAgIHJldHVybiBbdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLnN0YXJ0RGF0ZS53ZWVrKCksIHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5lbmREYXRlLndlZWsoKV07XG4gIH1cblxuICBpc0N1cnJlbnRXZWVrKGRhdGVUaW1lOiBudW1iZXIpIDogYm9vbGVhbiB7XG4gICAgdmFyIHRlcm1EYXRlID0gbW9tZW50KGRhdGVUaW1lKVxuICAgIHJldHVybiB0ZXJtRGF0ZS55ZWFyKCkgPT09IG1vbWVudCgpLnllYXIoKSAmJiB0ZXJtRGF0ZS53ZWVrKCkgPT09IG1vbWVudCgpLndlZWsoKTtcbiAgfVxuXG4gIGdldExhc3RTdGVwV2Vlayhsb2NhbGU6IHN0cmluZykge1xuICAgIC8vVE9ETzogdGhpcyBzaG91bGQgYmUgcmVmYWN0b3JlZC4gVGhlIGdlbmVyaWMgbWV0aG9kIHNob3VsZCBiZSB1c2VkXG4gICAgaWYobG9jYWxlID09PSBcInN2XCIpe1xuICAgICAgcmV0dXJuIHRoaXMuc2Nob29sTW9tZW50LnRlcm0gPT09IFwiU1RcIiA/IExBU1RfU1RFUF9TUFJJTkcgOiBMQVNUX1NURVBfQVVUVU1OO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGUuY2xvbmUoKS5hZGQoMSwgXCJ3ZWVrXCIpLndlZWsoKTtcbiAgfVxuXG4gIHRvTG9jYWxlU3RyaW5nKGludGw6IEluamVjdGVkSW50bCwgc2hvcnRZZWFyPzogYm9vbGVhbikge1xuICAgIGlmKHRoaXMuc2Nob29sTW9tZW50KVxuICAgIHtcbiAgICBsZXQgeWVhciA9IHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5lbmREYXRlLnllYXIoKS50b1N0cmluZygpO1xuICAgIGxldCBhY2FkZW1pY1llYXIgPSB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuYWNhZGVtaWNZZWFyO1xuICAgIGlmIChzaG9ydFllYXIgJiYgaW50bC5sb2NhbGUgPT09ICdzdicpIHtcbiAgICAgIHllYXIgPSB5ZWFyLnN1YnN0cigyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgeWVhciA9IGFjYWRlbWljWWVhcjtcbiAgICB9XG5cblxuICAgIHJldHVybiB0aGlzLnNjaG9vbE1vbWVudC50ZXJtID09PSAnQVQnID8gaW50bC5mb3JtYXRNZXNzYWdlKHsgaWQ6ICd0ZXJtcGxhbm5lci5maXJzdFRlcm0nLCBkZWZhdWx0TWVzc2FnZTogJ0hUIHt5ZWFyfScgfSwgeyB5ZWFyOiB5ZWFyIH0pIDpcbiAgICAgIGludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAndGVybXBsYW5uZXIuc2Vjb25kVGVybScsIGRlZmF1bHRNZXNzYWdlOiAnVlQge3llYXJ9JyB9LCB7IHllYXI6IHllYXIgfSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbmV4dFRlcm0oKSB7XG4gICAgLy9zd2l0Y2ggdG8gbmV4dCBzZW1lc3Rlciwgd2Ugc2V0IHRoZSBjdXJyZW50IGRhdGUgYXMgYWRkaW5nIDMgbW9udGhzIHRvIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgc2VtZXN0ZXJcbiAgICB2YXIgZW5kRGF0ZSA9IHRoaXMuc2Nob29sTW9tZW50ID8gdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGUuY2xvbmUoKSA6IG1vbWVudCgpO1xuICAgIHZhciBuZXh0RGF0ZSA9IGVuZERhdGUuYWRkKDMsICdtb250aHMnKTtcbiAgICByZXR1cm4gbmV3IEdlbmVyaWNTY2hvb2xUZXJtKG5leHREYXRlLnRvRGF0ZSgpLCB0aGlzLmxvY2FsZSk7XG4gIH1cblxuICBwcmV2VGVybSgpIHtcbiAgICAvL3RvIHN3aXRjaCB0byBuZXh0IHNlbWVzdGVyLCB3ZSBzZXQgdGhlIGN1cnJlbnQgZGF0ZSBhcyBzdWJ0cmFjdGluZyAzIG1vbnRocyBmcm9tIHRoZSBzdGFydCBvZiB0aGUgY3VycmVudCBzZW1lc3RlclxuICAgIHZhciBzdGFydERhdGUgPSB0aGlzLnNjaG9vbE1vbWVudCA/ICB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuc3RhcnREYXRlLmNsb25lKCkgOiBtb21lbnQoKTtcbiAgICB2YXIgcHJldkRhdGUgPSBzdGFydERhdGUuc3VidHJhY3QoMywgJ21vbnRocycpO1xuICAgIHJldHVybiBuZXcgR2VuZXJpY1NjaG9vbFRlcm0ocHJldkRhdGUudG9EYXRlKCksIHRoaXMubG9jYWxlKTtcbiAgfVxuXG4gIGdldEVkc1BlcmlvZE5hbWUoKXtcbiAgICByZXR1cm4gdGhpcy5zY2hvb2xNb21lbnQudGVybSA9PT0gJ0FUJyA/IFwiSFRcIiA6IFwiVlRcIiArIHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5lbmREYXRlLnllYXIoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgS1NUZXJtUGxhbm5lcldlZWtQbGFuLCBUZXJtUGxhbm5lclR1dG9yTm90ZSwgVGVybXBsYW5uZXJXZWVrT3JUdXRvciB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IEVEU0NvdXJzZSB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IHtcbiAgZ2V0Q29sdW1uc0hlYWRlcixcbiAgZ2V0Q29sdW1uSGVhZGVyRnJvbUNvdXJzZSxcbn0gZnJvbSAnLi90ZXJtcGxhbm5lci11dGlscyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgS0VEV2VlayB9IGZyb20gJy4uLy4uL3V0aWxzL3dlZWt1dGlsJztcbmltcG9ydCB7SW5qZWN0ZWRJbnRsfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IEdlbmVyaWNTY2hvb2xUZXJtIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2VuZXJpYy1zY2hvb2wtdGVybSc7XG5pbXBvcnQgeyBnZXRTY2hvb2xUcmFuc2xhdGVkU3ViamVjdHMgfSBmcm9tICcuLi8uLi91dGlscy9nZW5lcmljLXNjaG9vbC11dGlscyc7XG5cbmludGVyZmFjZSBDb2x1bW4ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHRyYW5zbGF0ZWROYW1lPzogc3RyaW5nO1xuICBpc0ZpeGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFZpZXdNb2RlbCB7XG4gIHdlZWtQbGFuc09yVHV0b3JOb3RlOiBUZXJtcGxhbm5lcldlZWtPclR1dG9yW107XG4gIC8vd2Vla1R1dG9yTm90ZXM6IFRlcm1QbGFubmVyVHV0b3JOb3RlW107XG4gIGxhc3RTdGVwczogS1NUZXJtUGxhbm5lcldlZWtQbGFuO1xuICBjb21wbGV0ZWRTdGVwczogeyBbY29sdW1uSGVhZGVyQW5kc3RlcDogc3RyaW5nXTogdHJ1ZSB9O1xuICB0ZXJtR29hbHM6IHsgW2NvbHVtbkhlYWRlcjogc3RyaW5nXTogc3RyaW5nIH07XG4gIHllYXI6IG51bWJlcjtcbiAgc3ViamVjdFByb2dyZXNzOiB7W2NvbHVtbkhlYWRlcjogc3RyaW5nXToge2ZpbmFsU3RlcENvbXBsZXRlZDogYm9vbGVhbiwgdmFsdWU6IG51bWJlcn19ID0ge307XG4gIGNvbHVtbnM6IENvbHVtbltdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZGJXZWVrUGxhbnM6IFRlcm1wbGFubmVyV2Vla09yVHV0b3JbXSxcbiAgICAvL2RiVHV0b3JOb3RlczogVGVybVBsYW5uZXJUdXRvck5vdGVbXSxcbiAgICBjb3Vyc2VzOiBFRFNDb3Vyc2VbXSxcbiAgICBjdXJyZW50U2Nob29sVGVybTogR2VuZXJpY1NjaG9vbFRlcm0sXG4gICAgY3VycmVudFNjaG9vbExvY2FsZTogc3RyaW5nLFxuICAgIGludGw6IEluamVjdGVkSW50bCxcbiAgICBzaG93VHV0b3JDb21tZW50RmllbGQ6IGJvb2xlYW5cbiAgKSB7XG4gICAgdGhpcy53ZWVrUGxhbnNPclR1dG9yTm90ZSA9IFtdO1xuICAgIGlmIChjdXJyZW50U2Nob29sVGVybS5zY2hvb2xNb21lbnQpIHtcbiAgICAgIGNvbnN0IFt0ZXJtU3RhcnQsIHRlcm1FbmRdID0gY3VycmVudFNjaG9vbFRlcm0uZ2V0VGVybVN0YXJ0QW5kRW5kKCk7XG4gICAgICB0aGlzLnllYXIgPSB0ZXJtU3RhcnQueWVhcigpO1xuICAgICAgLy9pbml0IGNvbHVtbnNcbiAgICAgIHZhciBjb2x1bW5IZWFkZXJzID0gZ2V0Q29sdW1uc0hlYWRlcihjdXJyZW50U2Nob29sTG9jYWxlKTtcbiAgICAgIGNvbHVtbkhlYWRlcnMuZm9yRWFjaChjID0+IHRoaXMuY29sdW1ucy5wdXNoKHsgbmFtZTogYyB9KSk7XG4gICAgICAvL2RlZmluZSBmaXhlZCBjb2x1bW5zIC0gd2Uga2VlcCB0aGVzZSBzZXBhcmF0ZWQsIGluIGNhc2UgdGhhdCB0aGUgb3RoZXIgY29sdW1ucyB3aWxsIGJlIGR5bmFtaWNhbGx5IHJldHJpZXZlZFxuICAgICAgY29uc3QgZml4ZWRDb2x1bW5zID0gW3sgbmFtZTogXCJLdXJzXCIsIGlzRml4ZWQ6IHRydWUgfSwgeyBuYW1lOiBcIktvbW1lbnRhclwiLCBpc0ZpeGVkOiB0cnVlIH1dO1xuICAgICAgaWYoc2hvd1R1dG9yQ29tbWVudEZpZWxkKXtcbiAgICAgICAgZml4ZWRDb2x1bW5zLnB1c2goIHsgbmFtZTogXCJUdXRvckNvbW1lbnRcIiwgaXNGaXhlZDogdHJ1ZX0pO1xuICAgICAgfVxuICAgICAgLy9BZGQgZml4ZWQgY29sdW1ucyBuYW1lc1xuICAgICAgdGhpcy5jb2x1bW5zLnB1c2goLi4uZml4ZWRDb2x1bW5zKTtcbiAgICAgIC8vcG9wdWxhdGUgdHJhbnNsYXRpb25zXG4gICAgICB2YXIgdHJhbnNsYXRlZENvbHVtbnMgPSBnZXRTY2hvb2xUcmFuc2xhdGVkU3ViamVjdHMoY3VycmVudFNjaG9vbExvY2FsZSwgaW50bCk7XG4gICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgZWxlbWVudC50cmFuc2xhdGVkTmFtZSA9IHRyYW5zbGF0ZWRDb2x1bW5zW2VsZW1lbnQubmFtZV07XG4gICAgICB9KTtcblxuICAgICAgdmFyIGN1cnJlbnRUZXJtSG9saWRheXMgPSBjdXJyZW50U2Nob29sVGVybS5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmhvbGlkYXlzO1xuICAgICAgY29uc3QgY3VycmVudFRlcm0gPSBjdXJyZW50U2Nob29sVGVybS5zY2hvb2xNb21lbnQudGVybTtcbiAgICAgIC8vXG4gICAgICAvLyB3ZWVrUGxhbnNcbiAgICAgIC8vXG4gICAgIGxldCB3ZWVrcGxhblZhbHVlczogS1NUZXJtUGxhbm5lcldlZWtQbGFuW10gPSBkYldlZWtQbGFucy5maWx0ZXIoKHg6IEtTVGVybVBsYW5uZXJXZWVrUGxhbikgPT4gIXgudHlwZSkgYXMgS1NUZXJtUGxhbm5lcldlZWtQbGFuW107XG4gICAgIGxldCB0dXRvclZhbHVlcyA6IFRlcm1QbGFubmVyVHV0b3JOb3RlW10gPSBkYldlZWtQbGFucy5maWx0ZXIoKHc6IFRlcm1QbGFubmVyVHV0b3JOb3RlKSA9PiB3LnR5cGUgPT09ICd0dXRvci1ub3RlJykgYXMgVGVybVBsYW5uZXJUdXRvck5vdGVbXTtcblxuICAgICAgdmFyIHN0YXJ0QWNhZGVtaWNZZWFyTnVtYmVyID0gY3VycmVudFNjaG9vbFRlcm0uc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5hY2FkZW1pY1N0YXJ0V2VlaztcbiAgICAgIGZvciAobGV0IHdlZWtNb21lbnQgPSB0ZXJtU3RhcnQuY2xvbmUoKTtcbiAgICAgICAgd2Vla01vbWVudC52YWx1ZU9mKCkgPCB0ZXJtRW5kLnZhbHVlT2YoKTtcbiAgICAgICAgd2Vla01vbWVudCA9IHdlZWtNb21lbnQuY2xvbmUoKS5hZGQoMSwgJ3dlZWsnKS5zdGFydE9mKCd3ZWVrJykpIHtcblxuICAgICAgICB2YXIgaG9saWRheVBlcmlvZCA9IGN1cnJlbnRUZXJtSG9saWRheXMuZmlsdGVyKGg9PiB3ZWVrTW9tZW50LndlZWsoKSA+PSBtb21lbnQoaC5zdGFydERhdGUpLnN0YXJ0T2YoXCJ3ZWVrXCIpLndlZWsoKSAmJiBcbiAgICAgICAgd2Vla01vbWVudC53ZWVrKCkgPD0gbW9tZW50KGguZW5kRGF0ZSkuZW5kT2YoJ3dlZWsnKS53ZWVrKCkpO1xuICAgICAgICAvL2lmIHRoZSBjdXJyZW50IHdlZWsgaXMgYSBob2xpZGF5IHdlZWssIHNraXAgaXRcbiAgICAgICAgaWYoaG9saWRheVBlcmlvZC5sZW5ndGggPiAwKXtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB3ZWVrTnVtYmVyID0gd2Vla01vbWVudC53ZWVrKCk7XG4gICAgICAgIGNvbnN0IGtlZFdlZWsgPSBLRURXZWVrKHdlZWtNb21lbnQueWVhcigpLCB3ZWVrTnVtYmVyKTtcbiAgICAgICAgLy9BIHRlcm0gY2FuIGVuZCBhbmQgc3RhcnQgb24gdGhlIHNhbWUgd2VlayBmb3IgSW5kaWFcbiAgICAgICAgLy9pbiB0aGlzIGNhc2Ugd2Ugc2hvdWxkIGZpbHRlciB0aGVtIGJ5IHRoZSB0ZXJtXG4gICAgICAgIC8vVGhpcyBpcyBub3QgdGhlIGNhc2UgZm9yIHN2IGxvY2FsZSBhbmQgd2Ugd2FudCB0byBza2lwIHRoaXMgY2hlY2sgXG4gICAgICAgIC8vYmVjYXVzZSBkYXRhIGlzIGFscmVhZHkgc2F2ZWQgaW4gdGhlIGRhdGFiYXNlXG4gICAgICAgIGNvbnN0IHdlZWtQbGFuID0gd2Vla3BsYW5WYWx1ZXMuZmlsdGVyKHdwID0+XG4gICAgICAgICAgd3AuZGF0ZVRpbWUgPj0ga2VkV2Vlay5ub3RCZWZvcmUgJiZcbiAgICAgICAgICB3cC5kYXRlVGltZSA8PSBrZWRXZWVrLm5vdEFmdGVyICYmXG4gICAgICAgICAgKCF3cC5pc0ZpbmFsU3RlcCAmJlxuICAgICAgICAgIHdwLnRlcm0gPT09IGN1cnJlbnRUZXJtIHx8IGludGwubG9jYWxlID09PSBcInN2XCIpKVswXTtcblxuICAgICAgICBjb25zdCB0dXRvck5vdGUgPSB0dXRvclZhbHVlcy5maWx0ZXIod3AgPT4gXG4gICAgICAgICAgd3AuZGF0ZVRpbWUgPj0ga2VkV2Vlay5ub3RCZWZvcmUgJiZcbiAgICAgICAgICB3cC5kYXRlVGltZSA8PSBrZWRXZWVrLm5vdEFmdGVyICYmXG4gICAgICAgICAgKHdwLnRlcm0gPT09IGN1cnJlbnRUZXJtIHx8IGludGwubG9jYWxlID09PSBcInN2XCIpKVswXTtcblxuICAgICAgICB0aGlzLndlZWtQbGFuc09yVHV0b3JOb3RlLnB1c2goe1xuICAgICAgICAgIC4uLndlZWtQbGFuIHx8IHt9LFxuICAgICAgICAgIGlkOiB3ZWVrUGxhbiA/IHdlZWtQbGFuLmlkIDogY3JlYXRlVVVJRCgpLFxuICAgICAgICAgIGRhdGVUaW1lOiB3ZWVrUGxhbiA/IHdlZWtQbGFuLmRhdGVUaW1lIDogd2Vla01vbWVudC52YWx1ZU9mKCksXG4gICAgICAgICAgY2VsbFZhbHVlczogd2Vla1BsYW4gPyB3ZWVrUGxhbi5jZWxsVmFsdWVzIDoge30sXG4gICAgICAgICAgd2Vla051bWJlcixcbiAgICAgICAgICBhY2FkZW1pY1dlZWtOdW1iZXI6IHN0YXJ0QWNhZGVtaWNZZWFyTnVtYmVyKyssXG4gICAgICAgICAgdGVybTogY3VycmVudFRlcm1cbiAgICAgICAgfSBhcyBLU1Rlcm1QbGFubmVyV2Vla1BsYW4pO1xuXG4gICAgICAgIHRoaXMud2Vla1BsYW5zT3JUdXRvck5vdGUucHVzaCh7XG4gICAgICAgICAgLi4udHV0b3JOb3RlIHx8IHt9LFxuICAgICAgICAgIGlkOiB0dXRvck5vdGUgPyB0dXRvck5vdGUuaWQgOiBjcmVhdGVVVUlEKCksXG4gICAgICAgICAgdHlwZTogJ3R1dG9yLW5vdGUnLFxuICAgICAgICAgIGRhdGVUaW1lOiB0dXRvck5vdGUgPyB0dXRvck5vdGUuZGF0ZVRpbWUgOiB3ZWVrTW9tZW50LnZhbHVlT2YoKSxcbiAgICAgICAgICBjb250ZW50OiB0dXRvck5vdGUgPyB0dXRvck5vdGUuY29udGVudCA6ICcnLFxuICAgICAgICAgIHdlZWtOdW1iZXIsXG4gICAgICAgICAgdGVybTogY3VycmVudFRlcm0gIFxuICAgICAgICB9IGFzIFRlcm1QbGFubmVyVHV0b3JOb3RlKTtcbiAgICAgIH1cblxuICAgICAgLy9cbiAgICAgIC8vIGxhc3RTdGVwc1xuICAgICAgLy9cbiAgICAgIGNvbnN0IGxhc3RTdGVwV2VlayA9IGN1cnJlbnRTY2hvb2xUZXJtLmdldExhc3RTdGVwV2VlayhpbnRsLmxvY2FsZSk7XG4gICAgICBjb25zdCBsYXN0U3RlcEtlZFdlZWsgPSBLRURXZWVrKHRlcm1FbmQueWVhcigpLCBsYXN0U3RlcFdlZWspO1xuICAgICAgdGhpcy5sYXN0U3RlcHMgPSB3ZWVrcGxhblZhbHVlcy5maWx0ZXIod3AgPT5cbiAgICAgICAgd3AuZGF0ZVRpbWUgPj0gbGFzdFN0ZXBLZWRXZWVrLm5vdEJlZm9yZSAmJlxuICAgICAgICB3cC5kYXRlVGltZSA8PSBsYXN0U3RlcEtlZFdlZWsubm90QWZ0ZXIgJiYgXG4gICAgICAgICh3cC5pc0ZpbmFsU3RlcCAmJlxuICAgICAgICB3cC50ZXJtID09PSBjdXJyZW50VGVybSB8fCBpbnRsLmxvY2FsZSA9PT0gXCJzdlwiKSlbMF0gfHwge1xuICAgICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXG4gICAgICAgICAgZGF0ZVRpbWU6IG1vbWVudCh0ZXJtRW5kKS5jbG9uZSgpLndlZWsobGFzdFN0ZXBXZWVrKS5zdGFydE9mKCd3ZWVrJykudmFsdWVPZigpLFxuICAgICAgICAgIGNlbGxWYWx1ZXM6IHt9LFxuICAgICAgICAgIHdlZWtOdW1iZXI6IGxhc3RTdGVwV2VlayxcbiAgICAgICAgICB0ZXJtOiBjdXJyZW50VGVybSxcbiAgICAgICAgICBpc0ZpbmFsU3RlcDogdHJ1ZVxuICAgICAgICB9O1xuXG5cbiAgICAgIHRoaXMuY29tcGxldGVkU3RlcHMgPSB7fTtcbiAgICAgIHRoaXMudGVybUdvYWxzID0ge307XG4gICAgICB2YXIgbWF4U3ViamVjdFN0ZXAgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgY291cnNlIG9mIGNvdXJzZXMpIHtcbiAgICAgICAgY29uc3QgY29sdW1uSGVhZGVyID0gZ2V0Q29sdW1uSGVhZGVyRnJvbUNvdXJzZShjb3Vyc2UpO1xuICAgICAgICAvL1xuICAgICAgICAvLyBjb21wbGV0ZWRTdGVwc1xuICAgICAgICAvL1xuICAgICAgICBmb3IgKGNvbnN0IHN0ZXAgb2YgY291cnNlLmNvdXJzZVN0ZXBzKSB7XG4gICAgICAgICAgaWYgKHN0ZXAuaXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkU3RlcHNbY29sdW1uSGVhZGVyICsgc3RlcC5zaG9ydE5hbWVdID0gdHJ1ZTtcblxuICAgICAgICAgICAgLy9zZXQgdGhlIG1heGltdW0gdmFsdWUgb2YgdGhlIGNvbXBsZXRlZCBzdGVwIGZvciBlYWNoIHN1YmplY3RcbiAgICAgICAgICAgIHZhciBjdXJyZW50U3RlcFZhbHVlID0gcGFyc2VJbnQoc3RlcC5zaG9ydE5hbWUpO1xuICAgICAgICAgICAgaWYgKCFpc05hTihjdXJyZW50U3RlcFZhbHVlKSAmJiBjdXJyZW50U3RlcFZhbHVlID4gKG1heFN1YmplY3RTdGVwW2NvbHVtbkhlYWRlcl0gPyBtYXhTdWJqZWN0U3RlcFtjb2x1bW5IZWFkZXJdIDogMCkpIHtcbiAgICAgICAgICAgICAgbWF4U3ViamVjdFN0ZXBbY29sdW1uSGVhZGVyXSA9IGN1cnJlbnRTdGVwVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8qY29uc3Qgd2Vla1BsYW5zID0gZmluZFdlZWtQbGFuc0J5U3RlcCh0aGlzLndlZWtQbGFucywgc3RlcC5TaG9ydE5hbWUpO1xuICAgICAgICAgICAgd2Vla1BsYW5zLmZvckVhY2god2Vla1BsYW4gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVkU3RlcHNbd2Vla1BsYW4ud2VlayArIGNvbHVtbkhlYWRlcl0gPSB0cnVlO1xuICAgICAgICAgICAgfSkqL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyB0ZXJtR29hbHNcbiAgICAgICAgLy9cbiAgICAgICAgdGhpcy50ZXJtR29hbHNbY29sdW1uSGVhZGVyXSA9IGNvdXJzZS5wZXJpb2RHb2FsR3JhZGU7XG4gICAgICB9XG5cbiAgICAgIGlmKGNvdXJzZXMpIHtcbiAgICAgICAgLy9pbml0XG4gICAgICAgIGNvbHVtbkhlYWRlcnMuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgICB0aGlzLnN1YmplY3RQcm9ncmVzc1tlbGVtXSA9IHtmaW5hbFN0ZXBDb21wbGV0ZWQ6ZmFsc2UsIHZhbHVlOiAwfTtcbiAgICAgICAgfSlcbiAgICAgICAgLy9jb21wdXRlIGNoYXJ0cyBieSBjb21wdXRpbmcgIGNvbXBsZXRlZCBnb2FsIChzYXZlZCBkYXRhIGZyb20ga2VkYmFja2VuZCBpcyBub3QgdGFrZW4gaW50byBhY2NvdW50KS9sYXN0U3RlcFZhbHVlXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMubGFzdFN0ZXBzLmNlbGxWYWx1ZXMpLmZvckVhY2goKHZhbCkgPT4ge1xuICAgICAgICAgIC8vZXhjbHVkZSB0aGUgZml4ZWQgY29sdW1ucy4gQ2hhcnRzIHNob3VsZCBub3QgYmUgZGlzcGxheWVkIGZvciB0aG9zZVxuICAgICAgICAgIGlmICghZml4ZWRDb2x1bW5zW3ZhbF0pIHtcbiAgICAgICAgICB2YXIgaGFzTm9GaW5hbFN0ZXBWYWx1ZSA9IGlzTmFOKHBhcnNlSW50KHRoaXMubGFzdFN0ZXBzLmNlbGxWYWx1ZXNbdmFsXSkpIHx8ICF0aGlzLmxhc3RTdGVwcy5jZWxsVmFsdWVzW3ZhbF07XG4gICAgICAgICAgdmFyIGZpbmFsU3RlcFZhbHVlID0gaGFzTm9GaW5hbFN0ZXBWYWx1ZSA/IDAgOiBwYXJzZUludCh0aGlzLmxhc3RTdGVwcy5jZWxsVmFsdWVzW3ZhbF0pO1xuICAgICAgICAgIHZhciBwZXJjZW5WYWx1ZSA9IGZpbmFsU3RlcFZhbHVlID4gMCA/IG1heFN1YmplY3RTdGVwW3ZhbF0gKiAxMDAgLyBmaW5hbFN0ZXBWYWx1ZSA6IDA7XG4gICAgICAgICAgdGhpcy5zdWJqZWN0UHJvZ3Jlc3NbdmFsXSA9IHtmaW5hbFN0ZXBDb21wbGV0ZWQ6ICFoYXNOb0ZpbmFsU3RlcFZhbHVlLCB2YWx1ZTogcGVyY2VuVmFsdWV9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRXZWVrUGxhbnNCeVN0ZXAod2Vla1BsYW5zOiBLU1Rlcm1QbGFubmVyV2Vla1BsYW5bXSwgc3RlcDogc3RyaW5nKTogS1NUZXJtUGxhbm5lcldlZWtQbGFuW10ge1xuICByZXR1cm4gd2Vla1BsYW5zLmZpbHRlcih3cCA9PiBPYmplY3Qua2V5cyh3cC5jZWxsVmFsdWVzKS5tYXAoY29sdW1uID0+IHdwLmNlbGxWYWx1ZXNbY29sdW1uXSA9PT0gc3RlcCkpO1xufVxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgS1NUZXJtUGxhbm5lclJlcG8gfSBmcm9tICcuL2tzLXRlcm1wbGFubmVyLXJlcG8nO1xuXG5leHBvcnQgY29uc3QgdGVybVBsYW5uZXJSZXBvS1MgPSBuZXcgS1NUZXJtUGxhbm5lclJlcG8oKCk9PmVudi5rZWRCYWNrZW5kQ2xpZW50LCAoKT0+ZW52LmN1cnJlbnRVc2VyKTtcbmVudi5rc1Rlcm1QbGFubmVyUmVwbyA9IHRlcm1QbGFubmVyUmVwb0tTO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIHBlcmNlbnRhZ2U6IG51bWJlcjtcbiAgICBiYWNrZ3JvdW5kQ29sb3I/OiBzdHJpbmc7XG4gICAgcHJvZ3Jlc3NDb2xvcj86IHN0cmluZztcbiAgICBlcnJvck1lc3NhZ2U/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBEb3VnaG51dCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICAgIHB1YmxpYyBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiI2VmZWZlZlwiLFxuICAgICAgICBwcm9ncmVzc0NvbG9yOiBcIiMzZGJjYTJcIixcbiAgICAgICAgZXJyb3JNZXNzYWdlOiBudWxsXG4gICAgfTtcblxuICAgIHJlbmRlcigpe1xuICAgICAgICBjb25zdCB7cGVyY2VudGFnZSwgZXJyb3JNZXNzYWdlLCBiYWNrZ3JvdW5kQ29sb3IsIHByb2dyZXNzQ29sb3J9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgLy9kZWZhdWx0IHZhbHVlc1xuICAgICAgICB2YXIgc3Ryb2tlID0gMjtcbiAgICAgICAgLy9lcXVhbHMgd2l0aCBoZSBjaXJjdW1mZXJlbmNlLzJJSVxuICAgICAgICB2YXIgcmFkaXVzID0gMTAwIC8gKDIgKiAzLjE0KTtcbiAgICAgICAgLy90YWtlIGludG8gYWNjb3VudCB0aGUgc3Ryb2tlXG4gICAgICAgIHZhciBjZW50ZXIgPSByYWRpdXMgKyBzdHJva2U7IFxuICAgICAgICB2YXIgdmlld2JveFcgPSBjZW50ZXIgKiAyO1xuICAgICAgICB2YXIgdmlld3Zib3hIID0gY2VudGVyICogMjtcbiAgICAgICAgY29uc3Qgcm91bmRlZFBlcmNlbnRhZ2UgPSBNYXRoLnJvdW5kKHBlcmNlbnRhZ2UpO1xuICAgICAgICB2YXIgc3RhcnRFcnJvclRleHQgPSAxMDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8c3ZnIGNsYXNzTmFtZT1cImRvdWdobnV0LWNoYXJ0XCIgdmlld0JveD17YDAgMCAke3ZpZXdib3hXfSAke3ZpZXd2Ym94SH1gfSB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCI+XG4gICAgICAgICAgICAgICAgPGNpcmNsZSBjbGFzc05hbWU9XCJjaXJjbGUtY2hhcnQtYmFja2dyb3VuZFwiIHN0cm9rZT17YmFja2dyb3VuZENvbG9yfSBzdHJva2VXaWR0aD17c3Ryb2tlICsgMX0gZmlsbD1cIm5vbmVcIiBjeD17Y2VudGVyfSBjeT17Y2VudGVyfSByPXtyYWRpdXN9IC8+XG4gICAgICAgICAgICAgICAgPGNpcmNsZSBjbGFzc05hbWU9XCJjaXJjbGUtY2hhcnQtY2lyY2xlXCIgc3Ryb2tlPXtwcm9ncmVzc0NvbG9yfSByZWY9XCJwcm9ncmVzc0NpcmNsZVwiIHN0cm9rZVdpZHRoPXtzdHJva2V9IHN0eWxlPXt7IHN0cm9rZURhc2hhcnJheTogYCR7cm91bmRlZFBlcmNlbnRhZ2V9LCAxMDBgIH19IHN0cm9rZUxpbmVjYXA9XCJyb3VuZFwiIGZpbGw9XCJub25lXCIgY3g9e2NlbnRlcn0gY3k9e2NlbnRlcn0gcj17cmFkaXVzfSAvPlxuICAgICAgICAgICAgICAgIDxnIGNsYXNzTmFtZT1cImNpcmNsZS1jaGFydC1pbmZvXCI+XG4gICAgICAgICAgICAgICAgICAgIHshZXJyb3JNZXNzYWdlID8gPHRleHQgY2xhc3NOYW1lPVwiY2lyY2xlLWNoYXJ0LXBlcmNlbnRcIiB4PXtjZW50ZXJ9IHk9e2NlbnRlcn0gYWxpZ25tZW50QmFzZWxpbmU9XCJjZW50cmFsXCIgdGV4dEFuY2hvcj1cIm1pZGRsZVwiPntgJHtyb3VuZGVkUGVyY2VudGFnZX0lYH08L3RleHQ+IDpcbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0IGNsYXNzTmFtZT1cImNpcmNsZS1jaGFydC1wZXJjZW50LWVycm9yXCIgeD17Y2VudGVyfSB5PXtjZW50ZXJ9IGFsaWdubWVudEJhc2VsaW5lPVwiY2VudHJhbFwiIGZvbnRTaXplPVwiNVwiIHRleHRBbmNob3I9XCJtaWRkbGVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZS5zcGxpdCgnICcpLm1hcChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0c3BhbiA9IDx0c3BhbiBrZXk9e2VsZW1lbnR9IHg9e2NlbnRlcn0geT17c3RhcnRFcnJvclRleHR9PntlbGVtZW50fTwvdHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEVycm9yVGV4dCArPSA1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRzcGFuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGV4dD59XG4gICAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgIClcbiAgICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2VuZXJpY1NjaG9vbFRlcm0gfSBmcm9tICcuLi8uLi91dGlscy9nZW5lcmljLXNjaG9vbC10ZXJtJztcbmltcG9ydCB7RURTQ291cnNlfSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7Vmlld01vZGVsfSBmcm9tICcuL3ZpZXdtb2RlbCc7XG5pbXBvcnQgeyBDb250ZW50RWRpdGFibGVGaWVsZH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2NvbnRlbnQtZWRpdGFibGUtZmllbGQnO1xuaW1wb3J0ICB7IEVudiB9IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBLU1Rlcm1QbGFubmVyV2Vla1BsYW4sIFRlcm1QbGFubmVyVHV0b3JOb3RlLCBUZXJtcGxhbm5lcldlZWtPclR1dG9yIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0ICcuLi8uLi9yZXBvcy9rcy10ZXJtcGxhbm5lci1yZXBvLWluc3RhbmNlJztcbmltcG9ydCB7TGFuZ3VhZ2VDb250ZXh0fSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgY2ZnIGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XG5pbXBvcnQgeyBEb3VnaG51dCB9IGZyb20gJy4uL2NoYXJ0cy9kb3VnaG51dCc7XG5pbXBvcnQgeyBnZXRTY2hvb2xUcmFuc2xhdGVkU3ViamVjdEZ1bGxuYW1lIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2VuZXJpYy1zY2hvb2wtdXRpbHMnO1xuaW1wb3J0IHsgRGlhbG9ncyB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9kaWFsb2dzJztcbmltcG9ydCB7IFR1dG9yRGlhbG9nIH0gZnJvbSAnLi90dXRvci1kaWFsb2cnO1xuaW1wb3J0IHsgRG9jdW1lbnRBY2Nlc3MgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBmZWF0dXJlcyB9IGZyb20gJy4uLy4uL2ZlYXR1cmVzJztcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGluaXRpYWxEYXRlOiBEYXRlO1xuICB0dXRvcmVkOiBib29sZWFuO1xuICBlbnY6IEVudjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgc2Nob29sVGVybTogR2VuZXJpY1NjaG9vbFRlcm07XG4gIHdlZWtQbGFuczogVGVybXBsYW5uZXJXZWVrT3JUdXRvcltdO1xuICBhY3RpdmVDb3Vyc2VzOiBFRFNDb3Vyc2VbXTtcbiAgbG9hZGluZ1dlZWtQbGFuczogYm9vbGVhbjtcbiAgbG9hZGluZ0FjdGl2ZUNvdXJzZXM6IGJvb2xlYW47XG4gIGVycm9yOiBFcnJvciB8IHN0cmluZyB8IG51bGw7XG4gIGluaXRpYWxMb2FkOiBib29sZWFuO1xuICBkaWFsb2dzOiBhbnlbXTtcbn1cblxuXG5leHBvcnQgY2xhc3MgS1NUZXJtUGxhbm5lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICB0YWJsZTogSFRNTFRhYmxlRWxlbWVudDtcbiAgZmxvd0lkOiBudW1iZXI7XG4gIHN0YXRpYyBjb250ZXh0VHlwZSA9IExhbmd1YWdlQ29udGV4dDtcbiAgZmllbGRzOiBDb250ZW50RWRpdGFibGVGaWVsZFtdW107XG4gIHVubW91bnRlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2Nob29sVGVybTogbmV3IEdlbmVyaWNTY2hvb2xUZXJtKHByb3BzLmluaXRpYWxEYXRlKSxcbiAgICAgIGFjdGl2ZUNvdXJzZXM6IFtdLFxuICAgICAgd2Vla1BsYW5zOiBbXSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgbG9hZGluZ0FjdGl2ZUNvdXJzZXM6IGZhbHNlLFxuICAgICAgbG9hZGluZ1dlZWtQbGFuczogZmFsc2UsXG4gICAgICBpbml0aWFsTG9hZDogdHJ1ZSxcbiAgICAgIGRpYWxvZ3M6IFtdXG4gICAgfVxuICAgIHRoaXMuZmxvd0lkID0gMTtcbiAgICB0aGlzLnVwZGF0ZVdlZWtQbGFucyA9IHRoaXMudXBkYXRlV2Vla1BsYW5zLmJpbmQodGhpcyk7XG4gIH1cblxuICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWQodGhpcy5zdGF0ZS5zY2hvb2xUZXJtKTtcbiAgICBpZiAoIXRoaXMudW5tb3VudGVkKSB0aGlzLnByb3BzLmVudi5rc1Rlcm1QbGFubmVyUmVwby5tZW0uc3Vic2NyaWJlKHRoaXMudXBkYXRlV2Vla1BsYW5zKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMudW5tb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnByb3BzLmVudi5rc1Rlcm1QbGFubmVyUmVwby5tZW0udW5zdWJzY3JpYmUodGhpcy51cGRhdGVXZWVrUGxhbnMpO1xuICB9ICBcblxuICB1cGRhdGVXZWVrUGxhbnMod2Vla1BsYW5zT3JUdXRvckNvbW06IFRlcm1wbGFubmVyV2Vla09yVHV0b3JbXSwgZXJyb3I/OiBFcnJvcikge1xuICAgIHRoaXMuc2V0U3RhdGUoe3dlZWtQbGFuczogd2Vla1BsYW5zT3JUdXRvckNvbW0sIGxvYWRpbmdXZWVrUGxhbnM6IGZhbHNlLCBlcnJvcjogZXJyb3IgfHwgbnVsbH0pO1xuICB9XG5cbiAgYXN5bmMgbG9hZChzY2hvb2xUZXJtOiBHZW5lcmljU2Nob29sVGVybSkge1xuICAgIGNvbnN0IGZsb3dJZCA9ICsrdGhpcy5mbG93SWQ7XG4gICAgdGhpcy5maWVsZHMgPSBbXTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgLy9sb2FkaW5nV2Vla1BsYW5zOiB0cnVlLFxuICAgICAgbG9hZGluZ0FjdGl2ZUNvdXJzZXM6IHRydWVcbiAgICB9KTtcbiAgICBjb25zdCB7a3NUZXJtUGxhbm5lclJlcG99ID0gdGhpcy5wcm9wcy5lbnY7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgdGVybSA9IGF3YWl0IHRoaXMubG9hZEFjYWRlbWljWWVhckRhdGVzKHNjaG9vbFRlcm0sIGNmZy5LRURfU0NIT09MX0xPQ0FMRSk7XG4gICAgICBpZiAodGhpcy5mbG93SWQgIT09IGZsb3dJZCkgcmV0dXJuO1xuICAgICAgdmFyIGN1cnJlbnRTY2hvb2xUZXJtID0gbmV3IEdlbmVyaWNTY2hvb2xUZXJtKHNjaG9vbFRlcm0uc2VsZWN0ZWREYXRlLCB0aGlzLmNvbnRleHQuaW50bC5sb2NhbGUsIHRlcm0pO1xuICAgICAgLy9yZWZyZXNoIHNhdmVkIGRhdGFcbiAgICAgIGtzVGVybVBsYW5uZXJSZXBvLnJlZnJlc2hEYXRhKGN1cnJlbnRTY2hvb2xUZXJtLmdldFRlcm1TdGFydEFuZEVuZCh0cnVlKSk7XG5cbiAgICAgIC8vcmVsb2FkIGNvdXJzZXMgYmFzZWQgb24gdGhlIGN1cnJlbnQgZGF0ZVxuICAgICAgY29uc3QgYWN0aXZlQ291cnNlcyA9IGF3YWl0IHRoaXMubG9hZEFjdGl2ZUNvdXJzZXMoY3VycmVudFNjaG9vbFRlcm0pO1xuICAgICAgaWYgKHRoaXMuZmxvd0lkICE9PSBmbG93SWQpIHJldHVybjtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3NjaG9vbFRlcm06IGN1cnJlbnRTY2hvb2xUZXJtLCBpbml0aWFsTG9hZDogZmFsc2UsIGFjdGl2ZUNvdXJzZXMsIGxvYWRpbmdBY3RpdmVDb3Vyc2VzOiBmYWxzZX0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAodGhpcy5mbG93SWQgIT09IGZsb3dJZCkgcmV0dXJuO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7c2Nob29sVGVybTogY3VycmVudFNjaG9vbFRlcm0sIGxvYWRpbmdBY3RpdmVDb3Vyc2VzOiBmYWxzZSwgZXJyb3J9KTsgIFxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGxvYWRBY2FkZW1pY1llYXJEYXRlcyhzY2hvb2xUZXJtOiBHZW5lcmljU2Nob29sVGVybSwgc2Nob29sTG9jYWxlOnN0cmluZyl7XG4gICAgY29uc3QgdGVybURhdGVzID0gYXdhaXQgdGhpcy5wcm9wcy5lbnYuZWRzQ2xpZW50LmdldEFjYWRlbWljWWVhclRlcm1zKHNjaG9vbExvY2FsZSwgc2Nob29sVGVybS5zZWxlY3RlZERhdGUpO1xuICAgIHJldHVybiB0ZXJtRGF0ZXM7XG4gIH1cblxuICBhc3luYyBsb2FkQWN0aXZlQ291cnNlcyhzY2hvb2xUZXJtOiBHZW5lcmljU2Nob29sVGVybSkge1xuICAgIC8vQ3VzdG9tIGZvciBub3cgaW4gb3JkZXIgdG8gY2hhbmdlIEVEU1BlcmlvZFxuICAgIC8vY29uc3QgcGVyaW9kTmFtZSA9IG5ldyBFRFNQZXJpb2Qoc2Nob29sVGVybSkucGVyaW9kOyBcbiAgICBjb25zdCBwZXJpb2ROYW1lID0gc2Nob29sVGVybS5nZXRFZHNQZXJpb2ROYW1lKCk7IC8vdGVtcG9yYXJ5IGZpeCBcbiAgICBjb25zdCBhY3RpdmVDb3Vyc2VzID0gYXdhaXQgdGhpcy5wcm9wcy5lbnYuZWRzQ2xpZW50LmdldEFjdGl2ZUNvdXJzZXMoe3BlcmlvZE5hbWV9KTtcbiAgICByZXR1cm4gYWN0aXZlQ291cnNlcztcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNlbGwod2Vla1BsYW46IEtTVGVybVBsYW5uZXJXZWVrUGxhbiwgY29sdW1uTmFtZTogc3RyaW5nLCBuZXdWYWx1ZTogc3RyaW5nKSB7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSAod2Vla1BsYW4gJiYgd2Vla1BsYW4uY2VsbFZhbHVlc1tjb2x1bW5OYW1lXSkgfHwgXCJcIjtcbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XG4gICAgdHJ5IHtcbiAgICAgIHdlZWtQbGFuLmNlbGxWYWx1ZXNbY29sdW1uTmFtZV0gPSBuZXdWYWx1ZTtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3BzLmVudi5rc1Rlcm1QbGFubmVyUmVwby51cHNlcnQgKFxuICAgICAgICB3ZWVrUGxhbixcbiAgICAgICAgKHdwIDogS1NUZXJtUGxhbm5lcldlZWtQbGFuKSA9PiAgd3AuY2VsbFZhbHVlc1tjb2x1bW5OYW1lXSA9IG5ld1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnJvci5zdGFjayB8fCBlcnJvcik7XG4gICAgICBpZiAoZXJyb3IubmFtZSA9PT0gXCJodHRwNDAzXCIpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXJyb3I6ICB0aGlzLmNvbnRleHQuaW50bCh7aWQ6XCJjb21tb24uY2hhbmdlc05vdFNhdmVkVW5hdXRob3JpemVkXCIsIGRlZmF1bHRNZXNzYWdlOlwiw4RuZHJpbmdhcm5hIHNwYXJhZGVzIGludGUgcC5nLmEuIG90aWxscsOkY2tsaWcgYmVow7ZyaWdoZXQuXCJ9KX0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXJyb3I6IHRoaXMuY29udGV4dC5pbnRsKHtpZDpcImNvbW1vbi5jaGFuZ2VzTm90U2F2ZWRFcnJvck9jY3VyZWRcIiwgZGVmYXVsdE1lc3NhZ2U6XCJGw7ZyIHRpbGxmw6RsbGV0IHByb2JsZW0gYXR0IHNwYXJhIGRhdGEuIERpbmEgw6RuZHJpbmdhciBzcGFyYWRlcyBpbnRlLlwifSl9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogXG4gICAqIEBwYXJhbSB0dXRvck5vdGUgXG4gICAqIEBwYXJhbSBuZXdWYWx1ZSBcbiAgICogXG4gICAqIFVwZGF0ZSB0dXRvciBmaWVsZCB2YWx1ZVxuICAgKi9cbiAgYXN5bmMgdXBkYXRlVHV0b3JOb3RlRmllbGQodHV0b3JOb3RlOiBUZXJtUGxhbm5lclR1dG9yTm90ZSwgbmV3VmFsdWU6IHN0cmluZyl7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSAodHV0b3JOb3RlICYmIHR1dG9yTm90ZS5jb250ZW50KSB8fCBcIlwiO1xuICAgIGlmIChvbGRWYWx1ZSA9PT0gbmV3VmFsdWUpIHJldHVybjtcbiAgICB0cnkge1xuICAgICAgdHV0b3JOb3RlLmNvbnRlbnQgPSBuZXdWYWx1ZTtcbiAgICAgIC8vc2V0IGRvY3VtZW50IEFDTFxuICAgICAgdHV0b3JOb3RlLmFjbCA9IFtcbiAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwidHV0b3JGb3JcIiwgdGhpcy5wcm9wcy5lbnYuY3VycmVudFVzZXIubWFpbCwgXCJTXCIpLnRvU3RyaW5nKCksXG4gICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcImVtYWlsXCIsIHRoaXMucHJvcHMuZW52LmN1cnJlbnRVc2VyLm1haWwsIFwiUlwiKS50b1N0cmluZygpLFxuICAgICAgXTtcblxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucHJvcHMuZW52LmtzVGVybVBsYW5uZXJSZXBvLnVwc2VydCh0dXRvck5vdGUsIFxuICAgICAgICAobm90ZSA6IFRlcm1QbGFubmVyVHV0b3JOb3RlKSA9PiBub3RlLmNvbnRlbnQgPSBuZXdWYWx1ZSk7XG4gICAgICB9IGNhdGNoIChzaG93RXJyb3Ipe31cbiAgfVxuXG4gIC8qKlxuICAgKiBEZWxldGUgdHV0b3IgY29tbWVudCBieSBJZFxuICAgKiBAcGFyYW0gbm90ZUlkXG4gICAqL1xuICBhc3luYyBkZWxldGVUdXRvck5vdGVGaWVsZChub3RlSWQ6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnByb3BzLmVudi5rc1Rlcm1QbGFubmVyUmVwby5kZWxldGUoW25vdGVJZF0pO1xuICAgIH0gY2F0Y2ggKHNob3dFcnJvcil7fVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGNvbW1lbnQgZnJvbSB0dXRvclxuICAgKiBAcGFyYW0gd2Vla051bWJlciBcbiAgICogQHBhcmFtIGNvbW1lbnQgXG4gICAqIFxuICAgKi9cbiAgb25UdXRvckNsaWNrKG5vdGU6IFRlcm1QbGFubmVyVHV0b3JOb3RlKSB7XG4gICAgdGhpcy5vcGVuRGlhbG9nKDxUdXRvckRpYWxvZ1xuICAgICAgd2Vla051bWJlcj17bm90ZS53ZWVrTnVtYmVyfVxuICAgICAgY29tbWVudD17bm90ZS5jb250ZW50fVxuICAgICAgaW50bD17dGhpcy5jb250ZXh0LmludGx9XG4gICAgICB1cGRhdGVEYXRhID0ge3ZhbCA9PiB0aGlzLnVwZGF0ZVR1dG9yTm90ZUZpZWxkKG5vdGUsIHZhbCl9XG4gICAgICBkZWxldGVOb3RlRGF0YSA9IHsoKSA9PiB0aGlzLmRlbGV0ZVR1dG9yTm90ZUZpZWxkKG5vdGUuaWQpfVxuICAgICAgY2xvc2VEaWFsb2c9eygpPT50aGlzLmNsb3NlRGlhbG9nKCl9IC8+KTtcbiAgfVxuXG4gIG9wZW5EaWFsb2coZGlhbG9nKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRpYWxvZ3M6IFsuLi50aGlzLnN0YXRlLmRpYWxvZ3MsIGRpYWxvZ10gfSk7XG4gIH1cblxuICBjbG9zZURpYWxvZygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogdGhpcy5zdGF0ZS5kaWFsb2dzLnNsaWNlKDAsIHRoaXMuc3RhdGUuZGlhbG9ncy5sZW5ndGggLSAxKSB9KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIE5hdmlnYXRlIHRvIGFkamFjZW50IGZpZWxkIGRlcGVuZGluZyBvbiBkaXJlY3Rpb25cbiAgICogQHBhcmFtIHBvcyBjdXJyZW50IHBvc2l0aW9uIGluIGZpZWxkLW1hdHJpeFxuICAgKiBAcGFyYW0gZGlyZWN0aW9uIGRpcmVjdGlvbiB0byB0YWtlXG4gICAqL1xuICBuYXZpZ2F0ZShwb3M6IHtyb3c6bnVtYmVyLCBjb2w6bnVtYmVyfSwgZGlyZWN0aW9uOnN0cmluZykge1xuICAgIGxldCBuZXdwb3MgPSB7Li4ucG9zfTtcbiAgICBsZXQgbWF4Um93cyA9IHRoaXMuZmllbGRzLmxlbmd0aDtcbiAgICBsZXQgbWF4Q29scyA9IE1hdGgubWF4KC4uLiB0aGlzLmZpZWxkcy5tYXAocm93ID0+IHJvdy5sZW5ndGgpKTtcblxuICAgIHN3aXRjaChkaXJlY3Rpb24pIHtcbiAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgbmV3cG9zLnJvdyA9IE1hdGgubWF4KHBvcy5yb3cgLSAxLCAwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdkb3duJzpcbiAgICAgICAgbmV3cG9zLnJvdyA9IE1hdGgubWluKHBvcy5yb3cgKyAxLCBtYXhSb3dzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgbmV3cG9zLmNvbCA9IE1hdGgubWF4KHBvcy5jb2wgLSAxLCAwKVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgbmV3cG9zLmNvbCA9IE1hdGgubWluKHBvcy5jb2wgKyAxLCBtYXhDb2xzKVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKHRoaXMuZmllbGRzW25ld3Bvcy5yb3ddICYmIHRoaXMuZmllbGRzW25ld3Bvcy5yb3ddW25ld3Bvcy5jb2xdKVxuICAgICAgdGhpcy5maWVsZHNbbmV3cG9zLnJvd11bbmV3cG9zLmNvbF0ubXlzZWxmLmN1cnJlbnQuZm9jdXMoKTtcbiAgfVxuXG4gIFxuICAvKipcbiAgICogQWRkcyBmaWVsZCB0byBmaWVsZC1tYXRyaXggdG8gZW5hYmxlIG5hdmlnYXRpb24gaW4gdGhlZSB0YWJsZVxuICAgKiBAcGFyYW0gZmllbGQgY3VycmVudCBmaWVsZFxuICAgKiBAcGFyYW0gcG9zIHBvc2l0aW9uIG9mIGZpZWxkIGluIGZpZWxkLW1hdHJpeFxuICAgKi9cbiAgYWRkRmllbGQoZmllbGQ6Q29udGVudEVkaXRhYmxlRmllbGQsIHBvczp7cm93Om51bWJlciwgY29sOm51bWJlcn0pIHtcbiAgICBpZiAodGhpcy5maWVsZHNbcG9zLnJvd10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5maWVsZHNbcG9zLnJvd10gPSBbXTtcbiAgICB9XG4gICAgdGhpcy5maWVsZHNbcG9zLnJvd11bcG9zLmNvbF0gPSBmaWVsZDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIGNlbGwgaW4gdGhlIHRlcm1wbGFubmVyIHRhYmxlXG4gICAqIEBwYXJhbSByb3dJbmRleCBpbmRleCBvZiByb3cgaW4gdGFibGVcbiAgICogQHBhcmFtIGNvbEluZGV4IGluZGV4IG9mIGNvbHVtbiBpbiB0YWJsZVxuICAgKiBAcGFyYW0gc3ViamVjdE5hbWUgbmFtZSBmaWVsZFxuICAgKiBAcGFyYW0gbW9kZWwgLS11bnVzZWQ/XG4gICAqIEBwYXJhbSB3ZWVrUGxhbiBjdXJyZW50IHJvdyBmcm9tIHdlZWtQbGFuXG4gICAqIEBwYXJhbSByZWFkT25seUNlbGxzIGlmIGNlbGxzIGFyZSByZWFkb25seVxuICAgKi9cbiAgZ2V0VGFibGVDZWxsKHJvd0luZGV4OiBudW1iZXIsIGNvbEluZGV4OiBudW1iZXIsIHN1YmplY3ROYW1lOiBzdHJpbmcsIG1vZGVsOiBWaWV3TW9kZWwsIFxuICAgIHdlZWtQbGFuOiBUZXJtcGxhbm5lcldlZWtPclR1dG9yLCByZWFkT25seUNlbGxzOiBib29sZWFuLCBjb2xUeXBlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB7IGNvbXBsZXRlZFN0ZXBzIH0gPSBtb2RlbDtcbiAgICBjb25zdCBwb3MgPSB7cm93OiByb3dJbmRleCwgY29sOiBjb2xJbmRleH07XG4gICAgXG4gICAgaWYgKGNvbFR5cGUgPT09ICdUdXRvcicpIHtcbiAgICAgIHZhciB0dXRvcmVkV2Vla1BsYW4gPSB3ZWVrUGxhbiBhcyBUZXJtUGxhbm5lclR1dG9yTm90ZTtcbiAgICAgIGNvbnN0IHtjb250ZW50fSA9IHR1dG9yZWRXZWVrUGxhbjtcbiAgICAgIGlmICh0aGlzLnByb3BzLnR1dG9yZWQpIHtcbiAgICAgICAgcmV0dXJuIDx0ZCBrZXk9e1widHV0b3Jub3RlXCIgKyBjb2xJbmRleH0gb25DbGljaz17KCkgPT4gdGhpcy5vblR1dG9yQ2xpY2sodHV0b3JlZFdlZWtQbGFuKX0gY2xhc3NOYW1lPVwidHV0b3JDZWxsXCI+XG4gICAgICAgICAge1xuICAgICAgICAgICAgY29udGVudCA/IDxkaXYga2V5PXtjb2xJbmRleH0gZGF0YS10b29sdGlwPXtjb250ZW50fT48aSBrZXk9e2NvbEluZGV4fSBjbGFzc05hbWU9XCJmYXMgZmEtY29tbWVudC1kb3RzXCI+PC9pPjwvZGl2PiA6IFxuICAgICAgICAgICAgPGRpdiBrZXk9e2NvbEluZGV4fT48aSBrZXk9e2NvbEluZGV4fSBjbGFzc05hbWU9XCJmYXMgZmEtY29tbWVudC1tZWRpY2FsXCI+PC9pPjwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgPC90ZD5cbiAgICAgIH1cblxuICAgIHJldHVybiA8dGQga2V5PXtcInR1dG9ybm90ZVwiICsgY29sSW5kZXh9IGNsYXNzTmFtZT1cInR1dG9yQ2VsbFwiPntjb250ZW50ICYmIDxkaXYga2V5PXtjb2xJbmRleH0gZGF0YS10b29sdGlwPXtjb250ZW50fT48aSBrZXk9e2NvbEluZGV4fSBjbGFzc05hbWU9XCJmYXIgZmEtY29tbWVudC1kb3RzXCI+PC9pPjwvZGl2Pn08L3RkPlxuICAgIH1cbiAgICBlbHNlIHtcbiAgICB2YXIgY3VycmVudFdlZWtQbGFuID0gd2Vla1BsYW4gYXMgS1NUZXJtUGxhbm5lcldlZWtQbGFuO1xuICAgIGNvbnN0IHtjZWxsVmFsdWVzfSA9IGN1cnJlbnRXZWVrUGxhbjtcbiAgICAvLyBhbiBvdXRlciB0ZCBjZWxsIGFuZCBpbm5lciBkaXYgaXMgdXNlZCB0byByZWd1bGF0ZSB0aGUgaGVpZ2h0IGFuZCBhbGxvdyBmb3IgZWxsaXBzZXMgb24gdGV4dC1vdmVyZmxvd1xuICAgIHJldHVybiA8dGQgY2xhc3NOYW1lPXt0aGlzLmdldENlbGxDbGFzc05hbWUoY29tcGxldGVkU3RlcHMsIGNlbGxWYWx1ZXMsIHN1YmplY3ROYW1lKX0+XG4gICAgICA8Q29udGVudEVkaXRhYmxlRmllbGRcbiAgICAgICAga2V5PXtjb2xJbmRleH1cbiAgICAgICAgcmVmPXtmaWVsZCA9PiB0aGlzLmFkZEZpZWxkKGZpZWxkLCBwb3MpfVxuICAgICAgICB0ZXh0PXtjZWxsVmFsdWVzW3N1YmplY3ROYW1lXX1cbiAgICAgICAgdGFnPSdkaXYnXG4gICAgICAgIHZhbGlkYXRlVmFsdWU9e2NvbFR5cGUgPT0gJ1N0ZXAnID8gL15cXGQqJC8gOiB1bmRlZmluZWR9XG4gICAgICAgIG1heENoYXJzPXtjb2xUeXBlID09ICdDb21tZW50Jz8gMTAwOiAoY29sVHlwZSA9PSAnQ291cnNlJyA/IDMwIDogMyl9XG4gICAgICAgIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZUNlbGwuYmluZCh0aGlzLCB3ZWVrUGxhbiwgc3ViamVjdE5hbWUpfVxuICAgICAgICByZWFkT25seT17cmVhZE9ubHlDZWxscyB8fCBjb2xUeXBlID09ICdUdXRvcid9XG4gICAgICAgIGFsbG93TmF2aWdhdGlvbj17dHJ1ZX1cbiAgICAgICAgb25OYXZpZ2F0ZT17dGhpcy5uYXZpZ2F0ZS5iaW5kKHRoaXMsIHBvcyl9XG4gICAgICAvPlxuICAgIDwvdGQ+XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBjbGFzc25hbWUgZm9yIGNlbGxcbiAgICogQHBhcmFtIGNvbXBsZXRlZFN0ZXBzIFxuICAgKiBAcGFyYW0gY2VsbFZhbHVlcyBcbiAgICogQHBhcmFtIHN1YmplY3ROYW1lIFxuICAgKi9cbiAgZ2V0Q2VsbENsYXNzTmFtZShjb21wbGV0ZWRTdGVwcywgY2VsbFZhbHVlcywgc3ViamVjdE5hbWUpe1xuICAgIGNvbnN0IGNvbFR5cGUgPSB0aGlzLmdldENvbHVtblR5cGUoc3ViamVjdE5hbWUpO1xuICAgIGlmIChjb2xUeXBlID09ICdTdGVwJyAmJiBjb21wbGV0ZWRTdGVwc1tzdWJqZWN0TmFtZSArIGNlbGxWYWx1ZXNbc3ViamVjdE5hbWVdXSkge1xuICAgICAgcmV0dXJuICdzdGVwQ2VsbCBjb21wbGV0ZWRTdGVwJztcbiAgICB9XG4gICAgcmV0dXJuIGNvbFR5cGUudG9Mb3dlckNhc2UoKSArICdDZWxsJztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRoZSBjZWxsIGluIHRoZSB0ZXJtcGxhbm5lciB0YWJsZXMgZm9vdGVyXG4gICAqIEBwYXJhbSByb3dJbmRleCBpbmRleCBvZiByb3cgaW4gdGFibGVcbiAgICogQHBhcmFtIGNvbEluZGV4IGluZGV4IG9mIGNvbHVtbiBpbiB0YWJsZVxuICAgKiBAcGFyYW0gc3ViamVjdE5hbWUgbmFtZSBmaWVsZFxuICAgKiBAcGFyYW0gbW9kZWxcbiAgICogQHBhcmFtIHJlYWRPbmx5Q2VsbHMgaWYgY2VsbHMgYXJlIHJlYWRvbmx5XG4gICAqL1xuICBnZXRGb290ZXJDZWxsKHJvd0luZGV4OiBudW1iZXIsIGNvbEluZGV4OiBudW1iZXIsIHN1YmplY3ROYW1lOiBzdHJpbmcsIG1vZGVsOiBWaWV3TW9kZWwsIHJlYWRPbmx5Q2VsbHM6IGJvb2xlYW4pe1xuICAgIGNvbnN0IHBvcyA9IHtyb3c6IHJvd0luZGV4LCBjb2w6IGNvbEluZGV4fTtcbiAgICBjb25zdCBjb2xUeXBlID0gdGhpcy5nZXRDb2x1bW5UeXBlKHN1YmplY3ROYW1lKTtcbiAgICByZXR1cm4gPHRoIGNsYXNzTmFtZT17YCR7Y29sVHlwZX1Gb290ZXJgfVxuICAgID48Q29udGVudEVkaXRhYmxlRmllbGRcbiAgICAgIGtleT17XCJzdGVwRm9vdGVyQ2VsbFwiICsgY29sSW5kZXh9XG4gICAgICByZWY9e2ZpZWxkID0+IHRoaXMuYWRkRmllbGQoZmllbGQsIHBvcyl9XG4gICAgICB0YWc9J2RpdidcbiAgICAgIHRleHQ9e21vZGVsLmxhc3RTdGVwcy5jZWxsVmFsdWVzW3N1YmplY3ROYW1lXX1cbiAgICAgIG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZUNlbGwuYmluZCh0aGlzLCBtb2RlbC5sYXN0U3RlcHMsIHN1YmplY3ROYW1lKX1cbiAgICAgIHJlYWRPbmx5PXtyZWFkT25seUNlbGxzfVxuICAgICAgbWF4Q2hhcnM9ezEwfVxuICAgICAgYWxsb3dOYXZpZ2F0aW9uPXt0cnVlfVxuICAgICAgb25OYXZpZ2F0ZT17dGhpcy5uYXZpZ2F0ZS5iaW5kKHRoaXMsIHBvcyl9XG4gICAgLz48L3RoPlxuICB9XG5cbiAgZ2V0U3RlcEhlYWRlckNvbHVtbihpbmRleDogbnVtYmVyLCB0cmFuc2xhdGVkQ29sdW1uSGVhZGVyOiBzdHJpbmcsIGNvbFR5cGU6IHN0cmluZyl7XG4gICAgcmV0dXJuIDx0aCBrZXk9e2BzdGVwSGVhZGVyQ2VsbF8ke2luZGV4fWB9IGNsYXNzTmFtZT17YCR7Y29sVHlwZS50b0xvd2VyQ2FzZSgpfUhlYWRlcmB9Pntjb2xUeXBlICE9ICdUdXRvcicgPyB0cmFuc2xhdGVkQ29sdW1uSGVhZGVyOiAnJ308L3RoPlxuICB9XG5cbiAgZ2V0Q29sdW1uVHlwZShuYW1lKSB7XG4gICAgY29uc3QgY29sVHlwZXMgPSB7J0tvbW1lbnRhcic6ICdDb21tZW50JywgJ0t1cnMnOiAnQ291cnNlJywgJ1R1dG9yQ29tbWVudCc6ICdUdXRvcicgfTtcbiAgICByZXR1cm4gY29sVHlwZXMuaGFzT3duUHJvcGVydHkobmFtZSk/IGNvbFR5cGVzW25hbWVdIDogJ1N0ZXAnO1xuICB9XG5cbiAgb3BlbkNsb3NlUHJvZ3Jlc3NDaGFydHModmFsdWUpeyAgIFxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdUZXJtcGxhbm5lckJveENoYXJ0cycsIHZhbHVlKTtcbiAgfVxuXG4gIGdldFN0ZXBDaGFydHMoY29sdW1uczogeyBuYW1lOiBzdHJpbmcsIHRyYW5zbGF0ZWROYW1lPzogc3RyaW5nLCBpc0ZpeGVkPzogYm9vbGVhbiB9W10sIHN1YmplY3RQcm9ncmVzczoge1tjb2x1bW5IZWFkZXI6IHN0cmluZ106IHtmaW5hbFN0ZXBDb21wbGV0ZWQ6IGJvb2xlYW4sIHZhbHVlOiBudW1iZXJ9fSkge1xuICAgIHZhciBjaGFydHNCb3hTdGF0ZSA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ1Rlcm1wbGFubmVyQm94Q2hhcnRzJykpIGFzIGJvb2xlYW47XG4gICAgcmV0dXJuIDxPcGVuQ2xvc2VCb3ggaGVhZGVyT3Blbj17Y2hhcnRzQm94U3RhdGV9IG9uT3BlbkNsb3NlPXt0aGlzLm9wZW5DbG9zZVByb2dyZXNzQ2hhcnRzfSB0aXRsZT17dGhpcy5jb250ZXh0LmludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJ0ZXJtcGxhbm5lci5jaGFydHNCb3hUaXRsZVwiLCBkZWZhdWx0TWVzc2FnZTpcIkZyYW1zdGVnIGRpYWdyYW1cIn0pfT48ZGl2IGNsYXNzTmFtZT1cImNoYXJ0cy1jb250YWluZXJcIj5cbiAgICAgIHtcbiAgICAgICAgY29sdW1ucy5tYXAoZWxlbWVudCA9PiB7XG4gICAgICAgICAgaWYgKCFlbGVtZW50LmlzRml4ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBzdWJqZWN0UHJvZ3Jlc3NbZWxlbWVudC5uYW1lXSA/IHN1YmplY3RQcm9ncmVzc1tlbGVtZW50Lm5hbWVdLnZhbHVlIDogMDtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IHN1YmplY3RQcm9ncmVzc1tlbGVtZW50Lm5hbWVdLmZpbmFsU3RlcENvbXBsZXRlZCA/IG51bGwgOiBcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5pbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLm5vRmluYWxTdGVwQXZhaWxhYmxlXCIsIGRlZmF1bHRNZXNzYWdlOlwiSW5nZXQgc2x1dHN0ZWcgdGlsbGfDpG5nbGlndFwifSk7XG5cbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVkQ29sdW1ucyA9IGdldFNjaG9vbFRyYW5zbGF0ZWRTdWJqZWN0RnVsbG5hbWUodGhpcy5jb250ZXh0LmludGwpO1xuICAgICAgICAgICAgcmV0dXJuIDxkaXYga2V5PXtlbGVtZW50Lm5hbWV9IGNsYXNzTmFtZT1cImNoYXJ0LWJveFwiPlxuICAgICAgICAgICAgICA8aDQ+e3RyYW5zbGF0ZWRDb2x1bW5zW2VsZW1lbnQubmFtZV19PC9oND5cbiAgICAgICAgICAgICAgPGRpdiBrZXk9e2VsZW1lbnQubmFtZX0gY2xhc3NOYW1lPVwiaW5uZXItY2hhcnQtYm94XCI+XG4gICAgICAgICAgICAgICAgPERvdWdobnV0IGtleT17ZWxlbWVudC5uYW1lfSBwZXJjZW50YWdlPXtwZXJjZW50YWdlfSBlcnJvck1lc3NhZ2U9e2Vycm9yTWVzc2FnZX0gLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgPC9kaXY+XG4gICAgPC9PcGVuQ2xvc2VCb3g+XG59XG5cbiAgZ2V0V2Vla1R1dG9yTm90ZSh3ZWVrUGxhbnNPclR1dG9yTm90ZTogVGVybXBsYW5uZXJXZWVrT3JUdXRvcltdLCB3ZWVrTnVtYmVyOiBudW1iZXIpe1xuICAgIHJldHVybiB3ZWVrUGxhbnNPclR1dG9yTm90ZS5maW5kKCh4OiBUZXJtUGxhbm5lclR1dG9yTm90ZSkgPT4geC50eXBlID09PSBcInR1dG9yLW5vdGVcIiAmJiB4LndlZWtOdW1iZXIgPT09IHdlZWtOdW1iZXIpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCBzaG93VHV0b3JDb21tZW50RmllbGQgPSBmZWF0dXJlcy5rc1R1dG9yQ29tbWVudDtcbiAgICBjb25zdCBzaG93RG91Z2hudXRDaGFydHMgPSBmZWF0dXJlcy50ZXJtcGxhbm5lckNoYXJ0cztcbiAgICBjb25zdCBtb2RlbCA9IG5ldyBWaWV3TW9kZWwoXG4gICAgICB0aGlzLnN0YXRlLndlZWtQbGFucyxcbiAgICAgIHRoaXMuc3RhdGUuYWN0aXZlQ291cnNlcyxcbiAgICAgIHRoaXMuc3RhdGUuc2Nob29sVGVybSxcbiAgICAgIGNmZy5LRURfU0NIT09MX0xPQ0FMRSxcbiAgICAgIGludGwsXG4gICAgICBzaG93VHV0b3JDb21tZW50RmllbGQpO1xuXG4gICAgY29uc3Qge3Rlcm1Hb2FscywgY29sdW1uc30gPSBtb2RlbDtcbiAgICBjb25zdCB7dHV0b3JlZH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtsb2FkaW5nV2Vla1BsYW5zLCBlcnJvciwgd2Vla1BsYW5zOiBkYldlZWtQbGFucywgZGlhbG9nc30gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGZhaWxlZEluaXRpYWxMb2FkID0gZGJXZWVrUGxhbnMubGVuZ3RoID09PSAwICYmICEhZXJyb3I7XG4gICAgY29uc3QgcmVhZE9ubHlDZWxscyA9IGZhaWxlZEluaXRpYWxMb2FkIHx8IHR1dG9yZWQgfHwgbG9hZGluZ1dlZWtQbGFucztcbiAgICBsZXQgcm93T2Zmc2V0ID0gMDtcbiAgICB2YXIgZmlsdGVyZWRXZWVrcGxhbnMgPSAgbW9kZWwud2Vla1BsYW5zT3JUdXRvck5vdGUuZmlsdGVyKCh4OiBLU1Rlcm1QbGFubmVyV2Vla1BsYW4pPT4gIXgudHlwZSkgYXMgS1NUZXJtUGxhbm5lcldlZWtQbGFuW107XG5cbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5pbml0aWFsTG9hZCA/IDxwPjxTcGlubmVyLz48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRlcm1wbGFubmVyLmxvYWRpbmdUZXJtcGxhbm5lclwiIGRlZmF1bHRNZXNzYWdlPVwiVi5nLiB2w6RudGEgbWVkYW4gdGVybWluc3BsYW5lciBsYWRkYXMuLi5cIi8+PC9wPiA6XG4gICAgIDxkaXYgY2xhc3NOYW1lPXtcbiAgICAgICAgXCJ0ZXJtcGxhbm5lclwiICsgXG4gICAgICAgICh0aGlzLnN0YXRlLmxvYWRpbmdXZWVrUGxhbnMgPyBcIiBsb2FkaW5nLXdlZWtwbGFuc1wiIDogXCJcIikgK1xuICAgICAgICAodGhpcy5zdGF0ZS5sb2FkaW5nQWN0aXZlQ291cnNlcyA/IFwiIGxvYWRpbmctY291cnNlc1wiIDogXCJcIilcbiAgICAgIH0+XG4gICAgICB7c2hvd0RvdWdobnV0Q2hhcnRzICYmIHRoaXMuc3RhdGUuYWN0aXZlQ291cnNlcy5sZW5ndGggPiAwICAmJiB0aGlzLmdldFN0ZXBDaGFydHMoY29sdW1ucywgbW9kZWwuc3ViamVjdFByb2dyZXNzKX1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2Vla1NlbGVjdFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cbiAgICAgICAgICAgIDxwPnt0aGlzLnN0YXRlLnNjaG9vbFRlcm0udG9Mb2NhbGVTdHJpbmcoaW50bCwgdHJ1ZSl9PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciB0ZXJtID0gdGhpcy5zdGF0ZS5zY2hvb2xUZXJtLnByZXZUZXJtKCk7XG4gICAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGVybSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1sZWZ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHRlcm0gPSB0aGlzLnN0YXRlLnNjaG9vbFRlcm0ubmV4dFRlcm0oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGVybSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1yaWdodFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGVybXBsYW5uZXIudGVybVBsYW5uaW5nXCIgZGVmYXVsdE1lc3NhZ2U9XCJUZXJtaW5zcGxhbmVyaW5nXCIgdGFnTmFtZT1cImg0XCIvPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInRlcm1wbGFubmVyLXRhYmxlIHplYnJhXCI+XG4gICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJ3ZWVrQ29sdW1uXCI+XG4gICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRlcm1wbGFubmVyLndlZWtOdW1iZXJcIiBkZWZhdWx0TWVzc2FnZT1cIlZlY2thXCIgLz5cbiAgICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29sdW1ucy5tYXAoIChlbGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgY29sVHlwZSA9IHRoaXMuZ2V0Q29sdW1uVHlwZShlbGVtLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RlcEhlYWRlckNvbHVtbihpbmRleCwgZWxlbS50cmFuc2xhdGVkTmFtZSwgY29sVHlwZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIHtmaWx0ZXJlZFdlZWtwbGFucy5maWx0ZXIod2sgPT4gd2suY2VsbFZhbHVlcykubWFwKCh3ZWVrUGxhbiwgcm93SW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgcm93T2Zmc2V0ID0gcm93SW5kZXg7XG4gICAgICAgICAgICAgIGNvbnN0IHt3ZWVrTnVtYmVyLCBhY2FkZW1pY1dlZWtOdW1iZXJ9ID0gd2Vla1BsYW47XG4gICAgICAgICAgICAgIGNvbnN0IHdlZWsgPSB3ZWVrTnVtYmVyO1xuICAgICAgICAgICAgICBjb25zdCBpc0N1cnJlbnRXZWVrID0gdGhpcy5zdGF0ZS5zY2hvb2xUZXJtLmlzQ3VycmVudFdlZWsod2Vla1BsYW4uZGF0ZVRpbWUpO1xuICAgICAgICAgICAgICByZXR1cm4gPHRyIGtleT17bW9kZWwueWVhciArICc6JyArIHdlZWt9IGNsYXNzTmFtZT17aXNDdXJyZW50V2VlayA/IFwiY3VycmVudFdlZWtcIiA6IFwiXCJ9PlxuICAgICAgICAgICAgICA8dGQ+e2ludGwubG9jYWxlID09PSBcInN2XCIgPyB3ZWVrIDogYWNhZGVtaWNXZWVrTnVtYmVyfTwvdGQ+XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLm1hcCgoZWxlbSwgY29sSW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbFR5cGUgPSB0aGlzLmdldENvbHVtblR5cGUoZWxlbS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgIHZhciB0dXRvclZhbHVlID0gdGhpcy5nZXRXZWVrVHV0b3JOb3RlKG1vZGVsLndlZWtQbGFuc09yVHV0b3JOb3RlLCB3ZWVrTnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xUeXBlID09PSBcIlR1dG9yXCIgPyBcbiAgICAgICAgICAgICAgICAgIHR1dG9yVmFsdWUgJiYgc2hvd1R1dG9yQ29tbWVudEZpZWxkICYmIHRoaXMuZ2V0VGFibGVDZWxsKHJvd0luZGV4LCBjb2xJbmRleCwgZWxlbS5uYW1lLCBtb2RlbCwgdHV0b3JWYWx1ZSwgcmVhZE9ubHlDZWxscywgY29sVHlwZSkgOiAgICAgICBcbiAgICAgICAgICAgICAgICAgICB0aGlzLmdldFRhYmxlQ2VsbChyb3dJbmRleCwgY29sSW5kZXgsIGVsZW0ubmFtZSwgbW9kZWwsIHdlZWtQbGFuLCByZWFkT25seUNlbGxzLCBjb2xUeXBlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvdHI+IFxuICAgICAgICAgICAgfSl9XG5cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgIDx0Zm9vdD5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRoPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGVybXBsYW5uZXIuZmluYWxTdGVwXCIgZGVmYXVsdE1lc3NhZ2U9XCJTbHV0c3RlZ1wiLz48L3RoPlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29sdW1ucy5maWx0ZXIoYyA9PiAhYy5pc0ZpeGVkKS5tYXAoKGVsZW0sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRGb290ZXJDZWxsKHJvd09mZnNldCArIDEsIGluZGV4LCBlbGVtLm5hbWUsIG1vZGVsLCByZWFkT25seUNlbGxzKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDx0aD4tPC90aD5cbiAgICAgICAgICAgICAgPHRoPjwvdGg+XG4gICAgICAgICAgICAgIHtzaG93VHV0b3JDb21tZW50RmllbGQgJiYgPHRoPjwvdGg+fSAgICAgICAgICBcbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0aD48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRlcm1wbGFubmVyLmVkc0dvYWxHcmFkZXNcIiBkZWZhdWx0TWVzc2FnZT1cIlRlcm1pbnNtw6VsXCIvPjwvdGg+XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2x1bW5zLmZpbHRlcihjID0+ICFjLmlzRml4ZWQpLm1hcCgoZWxlbSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbFR5cGUgPSB0aGlzLmdldENvbHVtblR5cGUoZWxlbS5uYW1lKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIDx0aCBrZXk9e2BncmFkZXNfJHtpbmRleH1gfSBjbGFzc05hbWU9e2Ake2NvbFR5cGV9Rm9vdGVyYH0+e3Rlcm1Hb2Fsc1tlbGVtLm5hbWVdfTwvdGg+O1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPHRoPi08L3RoPlxuICAgICAgICAgICAgICA8dGg+e3RoaXMuc3RhdGUuZXJyb3IgJiYgPHAgY2xhc3NOYW1lPVwiZXJyb3JcIj57JycrdGhpcy5zdGF0ZS5lcnJvcn08L3A+fTwvdGg+XG4gICAgICAgICAgICAgIHtzaG93VHV0b3JDb21tZW50RmllbGQgJiYgPHRoPjwvdGg+fSAgICAgXG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDwvdGZvb3Q+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPERpYWxvZ3NcbiAgICAgICAgZGlhbG9ncz17ZGlhbG9nc31cbiAgICAgICAgcG9wRGlhbG9nPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogZGlhbG9ncy5zbGljZSgwLCBkaWFsb2dzLmxlbmd0aCAtIDEpIH0pfSAvPiAgICBcbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0IHtVc2VyLCBMZWFybmluZ01vZHVsZVRhc2tzfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBCZWFyZXJQcm92aWRlciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCBLRUQgZnJvbSAnLi9rZWQnO1xuaW1wb3J0IGVudiwge0Vudn0gZnJvbSAnLi9LRUQuZW52JztcblxuZXhwb3J0IGNsYXNzIFR1dG9yRW52IHtcbiAgc3Vic2NyaWJlcnM6IEFycmF5PChlbnY6IEVudik9PnZvaWQ+ID0gW107XG4gIGVudjogRW52IHwgbnVsbCA9IG51bGw7XG4gIHZlcnNpb24gPSAxO1xuICAvL3Byb21pc2U6IFByb21pc2U8RW52IHwgbnVsbD4gPSBQcm9taXNlLnJlc29sdmUobnVsbCk7XG5cbiAgYXN5bmMgc3Vic2NyaWJlKHN1YnNjcmliZXI6IChlbnY6IEVudikgPT4gdm9pZCkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICBzdWJzY3JpYmVyKHRoaXMuZW52KTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKHN1YnNjcmliZXI6IChlbnY6IEVudikgPT4gdm9pZCkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSB0aGlzLnN1YnNjcmliZXJzLmZpbHRlciAocyA9PiBzICE9PSBzdWJzY3JpYmVyKTtcbiAgfVxuXG4gIGFzeW5jIG5vdGlmeVN1YnNjcmliZXJzKCkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChzID0+IHModGhpcy5lbnYpKTtcbiAgfVxuXG4gIGFzeW5jIHNldE5ld0Vudih1c2VyOiBVc2VyLCBlbnZHZXR0ZXI6ICgpPT5Qcm9taXNlPEVudj4pIHtcbiAgICBsZXQgdmVyc2lvbiA9ICsrdGhpcy52ZXJzaW9uO1xuICAgIHRoaXMuZW52ID0ge2N1cnJlbnRVc2VyOiB1c2VyLCB0dXRvcmVkOiB0cnVlfTtcbiAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7IC8vIE1ha2Ugc3Vic2NyaWJlciBkaXNwbGF5IFwiTG9hZGluZy4uLiB1c2VyIG5hbWVcIlxuICAgIGNvbnN0IGVudjogRW52ID0gYXdhaXQgZW52R2V0dGVyKCkuY2F0Y2goZXJyID0+ICh7XG4gICAgICBjdXJyZW50VXNlcjogdXNlcixcbiAgICAgIHR1dG9yZWQ6IHRydWUsXG4gICAgICBlcnJvcjogZXJyXG4gICAgfSkpO1xuICAgIGlmICh2ZXJzaW9uID09PSB0aGlzLnZlcnNpb24pIHtcbiAgICAgIC8vIE5vIG9uZSBlbHNlIGhhcyBjYWxsZWQgc2V0RW52IGR1cmluZyB0aGlzIGNhbGwuXG4gICAgICArK3RoaXMudmVyc2lvbjtcbiAgICAgIHRoaXMuZW52ID0gey4uLmVudiwgdHV0b3JlZDogdHJ1ZX07XG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7IC8vIE1ha2Ugc3Vic2NyaWJlcnMgZGlzcGxheSB0aGUgZGF0YS5cbiAgICB9XG4gIH1cbn1cblxuaWYgKCFLRUQudHV0b3JFbnYpIEtFRC50dXRvckVudiA9IG5ldyBUdXRvckVudigpO1xuXG5leHBvcnQgZGVmYXVsdCBLRUQudHV0b3JFbnYgYXMgVHV0b3JFbnY7XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vZW4tU0dcIjogODcsXG5cdFwiLi9lbi1TRy5qc1wiOiA4Nyxcblx0XCIuL2VuLWF1XCI6IDg4LFxuXHRcIi4vZW4tYXUuanNcIjogODgsXG5cdFwiLi9lbi1jYVwiOiA4OSxcblx0XCIuL2VuLWNhLmpzXCI6IDg5LFxuXHRcIi4vZW4tZ2JcIjogOTAsXG5cdFwiLi9lbi1nYi5qc1wiOiA5MCxcblx0XCIuL2VuLWllXCI6IDkxLFxuXHRcIi4vZW4taWUuanNcIjogOTEsXG5cdFwiLi9lbi1pbFwiOiA5Mixcblx0XCIuL2VuLWlsLmpzXCI6IDkyLFxuXHRcIi4vZW4tbnpcIjogOTMsXG5cdFwiLi9lbi1uei5qc1wiOiA5Myxcblx0XCIuL3N2XCI6IDk0LFxuXHRcIi4vc3YuanNcIjogOTRcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxNDI7IiwiZXhwb3J0IHtXZWVrUGxhbm5lcn0gZnJvbSAnLi93ZWVrcGxhbm5lcic7XG4iLCJpbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyB1c2VycyB9IGZyb20gJy4vZGF0YS91c2Vycyc7XG5pbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvcXVlcnktc3RyaW5nJztcblxuY29uc3QgdXNlcm5hbWUgPSBwYXJzZVF1ZXJ5U3RyaW5nIChsb2NhdGlvbi5zZWFyY2gpLnVzZXI7XG5pZiAodXNlcm5hbWUpIHtcbiAgY29uc3QgdXNlciA9IHVzZXJzLmZpbmQodSA9PiB1LnVzZXJuYW1lID09PSB1c2VybmFtZSk7XG4gIGlmICh1c2VyKSB7XG4gICAgZW52LmN1cnJlbnRVc2VyID0gdXNlcjtcbiAgfVxufVxuXG5jb25zdCB7IHJvbGUsIHNjaG9vbCB9ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gpO1xuaWYgKGVudi5jdXJyZW50VXNlcikge1xuICBpZiAocm9sZSkge1xuICAgIGVudi5jdXJyZW50VXNlci5yb2xlcyA9IHJvbGUuc3BsaXQoJywnKTtcbiAgfVxuICBpZiAoc2Nob29sKSB7XG4gICAgZW52LmN1cnJlbnRVc2VyLnNjaG9vbCA9IHNjaG9vbDtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybWF0dGVkTWVzc2FnZSwgSW5qZWN0ZWRJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHdlZWtOdW1iZXI6IG51bWJlcjtcbiAgY29tbWVudDogc3RyaW5nO1xuICBjbG9zZURpYWxvZzogKCk9PiB2b2lkO1xuICB1cGRhdGVEYXRhOiAodmFsdWU6IHN0cmluZyk9PiB2b2lkO1xuICBkZWxldGVOb3RlRGF0YTogKCkgPT4gdm9pZDtcbiAgaW50bD86IEluamVjdGVkSW50bFxufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBjb21tZW50OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBUdXRvckRpYWxvZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY29tbWVudDogcHJvcHMuY29tbWVudCA/IHByb3BzLmNvbW1lbnQgOiAnJ1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZSgpIHtcbiAgICBjb25zdCB7IGNsb3NlRGlhbG9nfSA9IHRoaXMucHJvcHM7XG4gICAgY2xvc2VEaWFsb2coKTtcbiAgICB0aGlzLnByb3BzLmRlbGV0ZU5vdGVEYXRhKCk7XG4gIH1cblxuXG4gIGFzeW5jIHNhdmUoKSB7XG4gICAgY29uc3QgeyBjbG9zZURpYWxvZ30gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgY29tbWVudCB9ID0gdGhpcy5zdGF0ZTsgIFxuICAgIGNsb3NlRGlhbG9nKCk7XG4gICAgdGhpcy5wcm9wcy51cGRhdGVEYXRhKGNvbW1lbnQpO1xuXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB3ZWVrTnVtYmVyLCBpbnRsfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBjb21tZW50IH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8aDI+e2ludGw/IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJ0dXRvck5vdGVEaWFsb2cud2Vla0NvbW1lbnRcIiwgZGVmYXVsdE1lc3NhZ2U6XCJLb21tZW50YXIgZsO2ciB2ZWNrYSB7d2Vla051bWJlcn1cIn0sIHt3ZWVrTnVtYmVyfSk6IGBLb21tZW50YXIgZsO2ciB2ZWNrYSAke3dlZWtOdW1iZXJ9YH08L2gyPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi10YWJsZVwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVsbFdpZHRoXCI+XG4gICAgICAgICAgICA8dGV4dGFyZWEgYXV0b0ZvY3VzIHZhbHVlPXtjb21tZW50fSBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7Y29tbWVudDogZXYudGFyZ2V0LnZhbHVlfSl9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICB7XG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxidXR0b24gdGFiSW5kZXg9ezF9IGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2UgYnRuLWRlZmF1bHRcIiBvbkNsaWNrPXsoKT0+dGhpcy5zYXZlKCl9PntpbnRsID8gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcImNvbW1vbi5zYXZlXCIsIGRlZmF1bHRNZXNzYWdlOlwiU3BhcmFcIn0pIDogJ1NwYXJhJ30gPC9idXR0b24+XG4gICAgICAgICAgICB7Y29tbWVudCAmJiA8YSB0YWJJbmRleD17MX0gY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCk9PnRoaXMuZGVsZXRlKCl9PntpbnRsID8gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcImNvbW1vbi5yZW1vdmVcIiwgZGVmYXVsdE1lc3NhZ2U6XCJUYSBib3J0XCJ9KTogXCJUYSBib3J0XCIgfTwvYT59XG4gICAgICAgICAgPC8+XG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59XG4iLCJpbXBvcnQgeyBLZWRSZXBvIH0gZnJvbSAnLi9rZWQtcmVwbyc7XG5pbXBvcnQgeyBLU1Rlcm1QbGFubmVyV2Vla1BsYW4sIFRlcm1QbGFubmVyVHV0b3JOb3RlLCBUZXJtcGxhbm5lcldlZWtPclR1dG9yIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5cblxuZXhwb3J0IGNsYXNzIEtTVGVybVBsYW5uZXJSZXBvIGV4dGVuZHMgS2VkUmVwbzxUZXJtcGxhbm5lcldlZWtPclR1dG9yPiB7XG4gIHN0YXJ0RGF0ZTogbW9tZW50Lk1vbWVudDtcbiAgZW5kRGF0ZTogbW9tZW50Lk1vbWVudDtcblxuICAgYXN5bmMgcmVmcmVzaERhdGEoZGF0ZUludGVydmFsIDogbW9tZW50Lk1vbWVudFtdKXtcbiAgICBbdGhpcy5zdGFydERhdGUsIHRoaXMuZW5kRGF0ZV0gID0gZGF0ZUludGVydmFsO1xuICAgICBhd2FpdCB0aGlzLm1lbS5yZWZyZXNoRnJvbVNlcnZlcigpO1xuICAgfVxuXG4gIGNvbnN0cnVjdG9yKGdldENsaWVudDogKCk9PktlZEJhY2tlbmRDbGllbnQsIGdldEN1cnJlbnRVc2VyOiAoKT0+VXNlcikge1xuICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gZ2V0Q3VycmVudFVzZXIoKTtcbiAgICBzdXBlcih7XG4gICAgICBnZXRDbGllbnQsXG4gICAgICBvcHRpbWlzdGljOiB0cnVlLFxuICAgICAgdGFibGU6IFwid2Vla3BsYW5zLWtzXCIsXG4gICAgICB1c2VyOiBjdXJyZW50VXNlciA/IGN1cnJlbnRVc2VyLm1haWwgOiBcIlwiLFxuICAgICAgZ2V0UXVlcnlPcHRpb25zOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZVZhbHVlID0gKHRoaXMuc3RhcnREYXRlICYmIHRoaXMuc3RhcnREYXRlLnZhbHVlT2YoKSkgfHwgbW9tZW50KCkudmFsdWVPZigpO1xuICAgICAgICBjb25zdCBlbmREYXRlVmFsdWUgPSAodGhpcy5lbmREYXRlICYmIHRoaXMuZW5kRGF0ZS52YWx1ZU9mKCkpIHx8IG1vbWVudCgpLnZhbHVlT2YoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBmcm9tOiBzdGFydERhdGVWYWx1ZSxcbiAgICAgICAgICB0bzogZW5kRGF0ZVZhbHVlLFxuICAgICAgICAgIHJvbGU6IFwiVVNFUlwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuIiwiXG5leHBvcnQgY29uc3QgU0VDT05EID0gMTAwMDtcbmV4cG9ydCBjb25zdCBNSU5VVEUgPSBTRUNPTkQgKiA2MDtcbmV4cG9ydCBjb25zdCBIT1VSID0gTUlOVVRFICogNjA7XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7TUlOVVRFfSBmcm9tICcuLi8uLi91dGlscy9jb25zdGFudHMnO1xuaW1wb3J0IHtMfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gICAgaWQ6IHN0cmluZyxcbiAgICBkYXlTdGFydCxcbiAgICBzdGFydE1vbWVudDogbW9tZW50Lk1vbWVudCxcbiAgICBlbmRNb21lbnQ6IG1vbWVudC5Nb21lbnQsXG4gICAgdGV4dDogc3RyaW5nLFxuICAgIGxvY2F0aW9uOiBzdHJpbmcsXG4gICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIHBvczogbnVtYmVyLFxuICAgIGxvY2FsZTogc3RyaW5nLFxuICAgIHpvb206IG51bWJlcixcbiAgICBodG1sTGluazogc3RyaW5nLFxuICAgIGNsYXNzTmFtZTogc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERheVZpZXdFdmVudCAoe1xuICAgIGlkLFxuICAgIGRheVN0YXJ0LFxuICAgIHN0YXJ0TW9tZW50LFxuICAgIGVuZE1vbWVudCxcbiAgICB0ZXh0LFxuICAgIGxvY2F0aW9uLFxuICAgIGRlc2NyaXB0aW9uLFxuICAgIHdpZHRoLFxuICAgIHBvcyxcbiAgICBsb2NhbGUsXG4gICAgem9vbSxcbiAgICBodG1sTGluayxcbiAgICBjbGFzc05hbWVcbn06IFByb3BzKSB7XG4gICAgY29uc3QgdG9wID0gKG1vbWVudChzdGFydE1vbWVudCkuZGlmZihkYXlTdGFydCkgLyBNSU5VVEUpICogem9vbTtcbiAgICBjb25zdCBoZWlnaHQgPSAobW9tZW50KGVuZE1vbWVudCkuZGlmZihzdGFydE1vbWVudCkgLyBNSU5VVEUpICogem9vbTtcbiAgICBjb25zdCBsb2NhbGVUaW1lT3B0aW9ucyA9IHtob3VyOiAnbnVtZXJpYycsIG1pbnV0ZTogJzItZGlnaXQnfTtcbiAgICBjb25zdCBsb2NhbGVTdGFydFRpbWUgPSBzdGFydE1vbWVudC50b0RhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcobG9jYWxlLCBsb2NhbGVUaW1lT3B0aW9ucyk7XG4gICAgY29uc3QgbG9jYWxlRW5kVGltZSA9IGVuZE1vbWVudC50b0RhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcobG9jYWxlLCBsb2NhbGVUaW1lT3B0aW9ucyk7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e1wiZGF5dmlld2V2ZW50IFwiICsgY2xhc3NOYW1lfSBzdHlsZT17e1xuICAgICAgICBwb3NpdGlvbjonYWJzb2x1dGUnLFxuICAgICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgICAgdG9wLFxuICAgICAgICBsZWZ0OiAocG9zIHx8IDApICsgXCIlXCIsXG4gICAgICAgIHdpZHRoOiAod2lkdGggfHwgMTAwKSArICclJyxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICBtYXhIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nfX1cblxuICAgICAgICB0aXRsZT17YCR7bG9jYWxlU3RhcnRUaW1lfSAtICR7bG9jYWxlRW5kVGltZX0gJHt0ZXh0fWAgK1xuICAgICAgICAgICAgKGxvY2F0aW9uID9cbiAgICAgICAgICAgICAgICBcIlxcblwiICsgTGBQbGF0czogJHtsb2NhdGlvbn1gIDpcbiAgICAgICAgICAgICAgICBcIlwiICkgK1xuICAgICAgICAgICAgKGRlc2NyaXB0aW9uID9cbiAgICAgICAgICAgICAgICBcIlxcblwiICsgZGVzY3JpcHRpb24gOlxuICAgICAgICAgICAgICAgIFwiXCIgKVxuICAgICAgICB9XG4gICAgICAgID5cbiAgICAgICAgPGEgY2xhc3NOYW1lPVwiZXZlbnQtdGl0bGVcIiBocmVmPXtodG1sTGlua30gdGFyZ2V0PVwiY2FsZW5kYXItZXZlbnRcIj5cbiAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICA8L2E+XG4gICAgICAgIDxwIGNsYXNzTmFtZT1cImV2ZW50LXBlcmlvZFwiPlxuICAgICAgICAgICAge2xvY2FsZVN0YXJ0VGltZX0gLSB7bG9jYWxlRW5kVGltZX1cbiAgICAgICAgPC9wPlxuICAgICAgICB7bG9jYXRpb24gJiZcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImV2ZW50LWxvY2F0aW9uXCI+XG4gICAgICAgICAgICAgICAge2xvY2F0aW9ufVxuICAgICAgICAgICAgPC9wPlxuICAgICAgICB9XG4gICAgICAgIHtkZXNjcmlwdGlvbiAmJlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXZlbnQtZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICB7ZGVzY3JpcHRpb259XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgIH1cbiAgICA8L2Rpdj47XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRpbWVMaW5lcyAoe2RheVN0YXJ0LCBkYXlFbmQsIHpvb219KSB7XG4gICAgY29uc3QgaG91clBpeGVscyA9IDYwICogem9vbTtcbiAgICBjb25zdCBzdGFydEhvdXIgPSBtb21lbnQoZGF5U3RhcnQpLmhvdXIoKTtcbiAgICBjb25zdCBlbmRIb3VyID0gbW9tZW50KGRheUVuZCkuaG91cigpO1xuXG4gICAgY29uc3QgaG91cnMgPSBbXTtcbiAgICBmb3IgKGxldCBob3VyID0gc3RhcnRIb3VyOyBob3VyIDw9IGVuZEhvdXI7ICsraG91cikge1xuICAgICAgICBob3Vycy5wdXNoKGhvdXIpO1xuICAgIH1cblxuICAgIHJldHVybiA8ZGl2PlxuICAgICAgICB7aG91cnMubWFwKGhvdXIgPT4gXG4gICAgICAgICAgICA8ZGl2IGtleT17aG91cn0gY2xhc3NOYW1lPVwidGltZWxpbmVcIiBzdHlsZT17e1xuICAgICAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgICAgICAgbWFyZ2luOiBgJHtob3VyUGl4ZWxzIC8gMn1weCAwIDAgMGAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBob3VyUGl4ZWxzIC8gMlxuICAgICAgICB9fSAvPiApfVxuICAgIDwvZGl2Pjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBEYXlWaWV3RXZlbnQgZnJvbSAnLi9kYXktdmlldy1ldmVudCc7XG5pbXBvcnQgVGltZUxpbmVzIGZyb20gJy4vdGltZS1saW5lcyc7XG5pbXBvcnQge01JTlVURX0gZnJvbSAnLi4vLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7Y3J1bmNoQ29sbGlkaW5nRXZlbnRzfSBmcm9tICcuL2NydW5jaC1jb2xsaWRpbmctZXZlbnRzJztcbmltcG9ydCB7IFN0dWRlbnRDYWxlbmRhckV2ZW50IH0gZnJvbSAnLi9tb2RlbHMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIGRheVN0YXJ0OiBtb21lbnQuTW9tZW50OyAgIC8vIE1pbGxpc2Vjb25kcyBhdCBzdGFydCBvZiB0aGUgZGF5IChmb3IgZXhhbXBsZSAwODowMCB0aGUgZGF5KVxuICAgIGRheUVuZDogbW9tZW50Lk1vbWVudDsgICAgIC8vIE1pbGxpc2Vjb25kcyBhdCBlbmQgb2YgdGhlIGRheSAoZm9yIGV4YW1wbGUgMTc6MDAgdGhlIGRheSlcbiAgICBldmVudHM6IFN0dWRlbnRDYWxlbmRhckV2ZW50W10sICAgICAvLyBFdmVudHMgdG8gc2hvd1xuICAgIGxvY2FsZTogc3RyaW5nLFxuICAgIHpvb206IG51bWJlcixcbiAgICBpc0xhc3RDYWxsOiBib29sZWFuXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIERheVZpZXcgKHtcbiAgICBkYXlTdGFydCwgICAvLyBNaWxsaXNlY29uZHMgYXQgc3RhcnQgb2YgdGhlIGRheSAoZm9yIGV4YW1wbGUgMDg6MDAgdGhlIGRheSlcbiAgICBkYXlFbmQsICAgICAvLyBNaWxsaXNlY29uZHMgYXQgZW5kIG9mIHRoZSBkYXkgKGZvciBleGFtcGxlIDE3OjAwIHRoZSBkYXkpXG4gICAgZXZlbnRzLCAgICAgLy8gRXZlbnRzIHRvIHNob3dcbiAgICBsb2NhbGUsXG4gICAgem9vbSxcbiAgICBpc0xhc3RDYWxsXG59OiBQcm9wcykge1xuICAgIGNvbnN0IGhlaWdodCA9IChtb21lbnQoZGF5RW5kKS5kaWZmKGRheVN0YXJ0KSAvIE1JTlVURSkgKiB6b29tO1xuXG4gICAgY29uc3QgY3J1bmNoZWRFdmVudHMgPSBjcnVuY2hDb2xsaWRpbmdFdmVudHMoZXZlbnRzLCBpc0xhc3RDYWxsKTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGF5dmlld1wiIHN0eWxlPXt7XG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICBtYXhIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgICAgIH19PlxuXG4gICAgICAgICAgICA8VGltZUxpbmVzIGRheVN0YXJ0PXtkYXlTdGFydH0gZGF5RW5kPXtkYXlFbmR9IHpvb209e3pvb219IC8+XG5cbiAgICAgICAgICAgIHtjcnVuY2hlZEV2ZW50cy5tYXAgKGV2ID0+IDxEYXlWaWV3RXZlbnRcbiAgICAgICAgICAgICAgICBrZXk9e2V2LmlkfVxuICAgICAgICAgICAgICAgIGlkPXtldi5pZH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2V2LmNsYXNzTmFtZX1cbiAgICAgICAgICAgICAgICBkYXlTdGFydD17ZGF5U3RhcnR9XG4gICAgICAgICAgICAgICAgc3RhcnRNb21lbnQ9e2V2LnN0YXJ0TW9tZW50fVxuICAgICAgICAgICAgICAgIGVuZE1vbWVudD17ZXYuZW5kTW9tZW50fVxuICAgICAgICAgICAgICAgIHRleHQ9e2V2LnRleHR9XG4gICAgICAgICAgICAgICAgbG9jYXRpb249e2V2LmxvY2F0aW9ufVxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uPXtldi5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICB3aWR0aD17ZXYud2lkdGh9XG4gICAgICAgICAgICAgICAgcG9zPXtldi5wb3N9XG4gICAgICAgICAgICAgICAgbG9jYWxlPXtsb2NhbGV9XG4gICAgICAgICAgICAgICAgem9vbT17em9vbX1cbiAgICAgICAgICAgICAgICBodG1sTGluaz17ZXYuaHRtbExpbmt9XG4gICAgICAgICAgICAvPil9XG4gICAgICAgIDwvZGl2PlxuICAgICk7XG59XG5cbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IGZsYXR0ZW4sIGRpc3RpbmN0LCBjb21wYXJlUHJvcCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IFN0dWRlbnRDYWxlbmRhckV2ZW50IH0gZnJvbSAnLi9tb2RlbHMnO1xuXG5pbnRlcmZhY2UgRXZlbnRNZXRhIHtcbiAgaW5kZXg/OiBudW1iZXIsXG4gIHByZXZPdmVybGFwcz86IFN0dWRlbnRDYWxlbmRhckV2ZW50W10gIFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3J1bmNoQ29sbGlkaW5nRXZlbnRzIChcbiAgZXZlbnRzOiBTdHVkZW50Q2FsZW5kYXJFdmVudFtdLFxuICBpc0xhc3RDYWxsPzogYm9vbGVhbilcbjogU3R1ZGVudENhbGVuZGFyRXZlbnRbXVxue1xuICBjb25zdCByZXN1bHQ6IChTdHVkZW50Q2FsZW5kYXJFdmVudCAmIEV2ZW50TWV0YSlbXSA9IFtdO1xuICBldmVudHMuZm9yRWFjaCgoZXZlbnQsIGV2ZW50SW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IG92ZXJsYXBzID0gcmVzdWx0LmZpbHRlcih4ID0+IHguc3RhcnRNb21lbnQgJiYgeC5lbmRNb21lbnQgJiZcbiAgICAgICAgICAoeC5zdGFydE1vbWVudCA8PSBldmVudC5zdGFydE1vbWVudCkgJiZcbiAgICAgICAgICAoeC5lbmRNb21lbnQgPiBldmVudC5zdGFydE1vbWVudCkpO1xuICAgICAgbGV0IGFsbE92ZXJsYXBzID0gb3ZlcmxhcHMuY29uY2F0KGZsYXR0ZW4gKG92ZXJsYXBzLm1hcChvID0+IG8ucHJldk92ZXJsYXBzKSkpO1xuICAgICAgYWxsT3ZlcmxhcHMgPSBkaXN0aW5jdChhbGxPdmVybGFwcywgbyA9PiBvLmluZGV4KTtcbiAgICAgIGFsbE92ZXJsYXBzLnNvcnQoY29tcGFyZVByb3AoXCJzdGFydE1vbWVudFwiKSk7XG4gICAgICBsZXQgd2lkdGg7Ly8gPSBNYXRoLnJvdW5kKDEwMCAvIE1hdGgubWF4KChhbGxPdmVybGFwcy5sZW5ndGggKyAxKSwgMSkpO1xuICAgICAgbGV0IHBvcyA9IDA7XG4gICAgICBhbGxPdmVybGFwcy5mb3JFYWNoKChvdmVybGFwLCBpKSA9PiB7XG4gICAgICAgIGlmIChpICUgNCA9PT0gMCkge1xuICAgICAgICAgIHdpZHRoID0gTWF0aC5tYXgoMjUsIE1hdGgucm91bmQoMTAwIC8gTWF0aC5tYXgoYWxsT3ZlcmxhcHMubGVuZ3RoIC0gaSArIDEsIDEpKSk7XG4gICAgICAgICAgcG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICBvdmVybGFwLndpZHRoID0gd2lkdGg7XG4gICAgICAgIG92ZXJsYXAuY2xhc3NOYW1lID0gKG92ZXJsYXAuY2xhc3NOYW1lIHx8IFwiXCIpLnNwbGl0KCcgJylcbiAgICAgICAgICAuZmlsdGVyKGNuID0+IGNuICE9PSAnc3BsaXR0ZWQnKVxuICAgICAgICAgIC5jb25jYXQoXCJzcGxpdHRlZFwiKVxuICAgICAgICAgIC5qb2luKCcgJyksXG4gICAgICAgIG92ZXJsYXAucG9zID0gcG9zO1xuICAgICAgICBwb3MgKz0gd2lkdGg7XG4gICAgICB9KTtcbiAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgLi4uZXZlbnQsXG4gICAgICAgIGluZGV4OiBldmVudEluZGV4LFxuICAgICAgICBwb3M6IHBvcyxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGNsYXNzTmFtZTogd2lkdGggPCAxMDAgP1xuICAgICAgICAgIChldmVudC5jbGFzc05hbWUgPyBldmVudC5jbGFzc05hbWUgKyBcIiBzcGxpdHRlZFwiIDogXCJzcGxpdHRlZFwiKSA6XG4gICAgICAgICAgZXZlbnQuY2xhc3NOYW1lLFxuICAgICAgICBwcmV2T3ZlcmxhcHM6IGFsbE92ZXJsYXBzXG4gICAgICB9KTtcbiAgICAgIC8qaWYgKGlzTGFzdENhbGwgJiYgbW9tZW50KGV2ZW50LnN0YXJ0KS5kYXkoKSA9PT0gMSkge1xuICAgICAgICBpZiAoL1N2ZTIvLnRlc3QoZXZlbnQudGV4dCkpIHtcbiAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoL0ZyYW5za2EvLnRlc3QoZXZlbnQudGV4dCkpIHtcbiAgICAgICAgICBkZWJ1Z2dlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoL1R5c2thLy50ZXN0KGV2ZW50LnRleHQpKSB7XG4gICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9zcGFuc2svLnRlc3QoZXZlbnQudGV4dCkpIGRlYnVnZ2VyO1xuICAgICAgICBpZiAoL0VuZzYvLnRlc3QoZXZlbnQudGV4dCkpIGRlYnVnZ2VyO1xuICAgICAgfSovXG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb3VyTWFya2VyICh7c3RhcnRIb3VyLCBlbmRIb3VyLCBsb2NhbGUsIHpvb219KSB7XG4gICAgY29uc3QgaG91clBpeGVscyA9IDYwICogem9vbTtcblxuICAgIGNvbnN0IGhvdXJzID0gW107XG4gICAgZm9yIChsZXQgaG91ciA9IHN0YXJ0SG91cjsgaG91ciA8PSBlbmRIb3VyOyArK2hvdXIpIHtcbiAgICAgICAgaG91cnMucHVzaChob3VyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJob3VybWFya2VyXCIgc3R5bGU9e3tcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgICAgaGVpZ2h0OiAoZW5kSG91ciAtIHN0YXJ0SG91cikgKiBob3VyUGl4ZWxzXG4gICAgfX0+XG4gICAgICB7aG91cnMubWFwKChob3VyLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IHlwb3MgPSBpICogaG91clBpeGVscztcbiAgICAgICAgcmV0dXJuIDxzcGFuIGtleT17aG91cn0+PGRpdiBzdHlsZT17e1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICAgICAgdG9wOiB5cG9zLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogJy00cHgnLCAvLyBDU1MhXG4gICAgICAgICAgICAgICAgcGFkZGluZzogMFxuICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAge21vbWVudCgpLmhvdXIoaG91cikubWludXRlKDApLnRvRGF0ZSgpLnRvTG9jYWxlU3RyaW5nKGxvY2FsZSwge2hvdXI6IFwiMi1kaWdpdFwiLCBtaW51dGU6IFwiMi1kaWdpdFwifSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsvKjxkaXYgY2xhc3NOYW1lPVwiaG91cmxpbmVcIlxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNlZWVlRjInLCAvLyBDU1MhXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAnMjRweCcsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNnB4JyxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxcHgnLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IHlwb3NcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIHtob3VyIDwgZW5kSG91ciAmJiA8ZGl2IGNsYXNzTmFtZT1cImhhbHZob3VybGluZVwiXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnI2VlZWVGMicsIC8vIENTUyFcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6ICcyNnB4JyxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc0cHgnLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogJzFweCcsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogeXBvcyArIChob3VyUGl4ZWxzIC8gMikgKyAxXG4gICAgICAgICAgICB9fSAvPiB9ICovfVxuICAgICAgICA8L3NwYW4+O1xuICAgIH0pfTwvZGl2Pjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3RhdHVzQmFyICh7c3RhdHVzLCBlcnJvcn0pIHtcbiAgICBpZiAoIXN0YXR1cyAmJiAhZXJyb3IpIHJldHVybiBudWxsO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN0YXR1c2JhclwiPlxuICAgICAgICB7ZXJyb3IgP1xuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXJyb3JcIj57JycrZXJyb3J9PC9wPiA6XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzdGF0dXNcIj57c3RhdHVzfTwvcD59XG4gICAgPC9kaXY+XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgRGF5VmlldyBmcm9tICcuL2RheS12aWV3JztcbmltcG9ydCBIb3VyTWFya2VyIGZyb20gJy4vaG91ci1tYXJrZXInO1xuaW1wb3J0IHtjYXBpdGFsaXplRmlyc3QsIGNsb25lLCBMfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgU3RhdHVzQmFyIGZyb20gJy4vc3RhdHVzLWJhcic7XG5pbXBvcnQgeyBTdHVkZW50Q2FsZW5kYXJFdmVudCwgRGF5RGF0YSB9IGZyb20gJy4vbW9kZWxzJztcbmltcG9ydCB7IExhbmd1YWdlQ29udGV4dCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIGZpcnN0RGF5OiBtb21lbnQuTW9tZW50LCAgLy8ge21vbWVudH0gVGhlIGRheSB0byBzdGFydCB3aXRoIChub3JtYWxseSBhIG1vbmRheSlcbiAgICBzdGFydEhvdXI6IG51bWJlciwgLy8ge251bWJlcn0gVGhlIGhvdXIgdG8gc3RhcnQgb25cbiAgICBlbmRIb3VyOiBudW1iZXIsICAgLy8ge251bWJlcn0gVGhlIGhvdXIgdG8gZW5kIHJlbmRlcmluZyBwZXIgZGF5XG4gICAgbnVtRGF5czogbnVtYmVyLCAgIC8vIHtudW1iZXJ9IE51bWJlciBvZiBkYXlzLCBub3JtYWxseSA1LlxuICAgIGV2ZW50czogU3R1ZGVudENhbGVuZGFyRXZlbnRbXSwgICAgLy8gQXJyYXkgb2YgZXZlbnRzIHRvIGRpc3BsYXkgaW4gdGhlIHdlZWsuXG4gICAgbG9jYWxlOiBzdHJpbmcsICAgIC8vIExvY2FsZSB0byB1c2UgZm9yIHNob3dpbmcgd2VlayBkYXlzIGFuZCBob3VyIG1hcmtzLlxuICAgIHpvb206IG51bWJlciwgICAgICAvLyB7bnVtYmVyfSBab29tIHdoZXJlIDEgbWVhbnMgdGhhdCAxIG1pbnV0ZSA9IDEgcGl4ZWwuICBcbiAgICBzdGF0dXM/OiBzdHJpbmcsXG4gICAgZXJyb3I/OiBFcnJvclxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWVrVmlldyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICAgIHN0YXRpYyBjb250ZXh0VHlwZSA9IExhbmd1YWdlQ29udGV4dDtcbiAgICByZW5kZXIgKCkge1xuICAgICAgICAvLyBQcm9wczpcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgZmlyc3REYXksICAvLyB7bW9tZW50fSBUaGUgZGF5IHRvIHN0YXJ0IHdpdGggKG5vcm1hbGx5IGEgbW9uZGF5KVxuICAgICAgICAgICAgc3RhcnRIb3VyLCAvLyB7bnVtYmVyfSBUaGUgaG91ciB0byBzdGFydCBvblxuICAgICAgICAgICAgZW5kSG91ciwgICAvLyB7bnVtYmVyfSBUaGUgaG91ciB0byBlbmQgcmVuZGVyaW5nIHBlciBkYXlcbiAgICAgICAgICAgIG51bURheXMsICAgLy8ge251bWJlcn0gTnVtYmVyIG9mIGRheXMsIG5vcm1hbGx5IDUuXG4gICAgICAgICAgICBldmVudHMsICAgIC8vIEFycmF5IG9mIGV2ZW50cyB0byBkaXNwbGF5IGluIHRoZSB3ZWVrLlxuICAgICAgICAgICAgbG9jYWxlLCAgICAvLyBMb2NhbGUgdG8gdXNlIGZvciBzaG93aW5nIHdlZWsgZGF5cyBhbmQgaG91ciBtYXJrcy5cbiAgICAgICAgICAgIHpvb20sICAgICAgLy8ge251bWJlcn0gWm9vbSB3aGVyZSAxIG1lYW5zIHRoYXQgMSBtaW51dGUgPSAxIHBpeGVsLiAgXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICAgICAgLy8gUHJlcGFyZSBEYXlWaWV3IGRhdGFzIFxuICAgICAgICBjb25zdCBkYXlEYXRhczogRGF5RGF0YVtdID0gW107XG4gICAgICAgIGxldCBkYXkgPSBtb21lbnQoZmlyc3REYXkpO1xuICAgICAgICBmb3IgKGxldCBpPTA7aTxudW1EYXlzOyArK2kpIHtcbiAgICAgICAgICAgIGNvbnN0IGRheVN0YXJ0ID0gbW9tZW50KGRheSkuaG91cihzdGFydEhvdXIpO1xuICAgICAgICAgICAgY29uc3QgZGF5RW5kID0gbW9tZW50KGRheSkuaG91cihlbmRIb3VyKTtcbiAgICAgICAgICAgIGNvbnN0IGRheURhdGUgPSBtb21lbnQoZGF5KS5mb3JtYXQoJ3l5eXktTU0tREQnKTtcbiAgICAgICAgICAgIGNvbnN0IGlzVG9kYXkgPSBtb21lbnQoZGF5U3RhcnQpLnN0YXJ0T2YoXCJkYXlcIikudmFsdWVPZigpID09PSBtb21lbnQoKS5zdGFydE9mKFwiZGF5XCIpLnZhbHVlT2YoKTtcbiAgICAgICAgICAgIGRheURhdGFzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IGNhcGl0YWxpemVGaXJzdChkYXlTdGFydC50b0RhdGUoKS50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHtcbiAgICAgICAgICAgICAgICAgICAgd2Vla2RheTogJ2xvbmcnLFxuICAgICAgICAgICAgICAgICAgICBkYXk6J251bWVyaWMnLFxuICAgICAgICAgICAgICAgICAgICBtb250aDogJ3Nob3J0J30pKSxcbiAgICAgICAgICAgICAgICBkYXlTdGFydCxcbiAgICAgICAgICAgICAgICBkYXlFbmQsXG4gICAgICAgICAgICAgICAgaXNUb2RheSxcbiAgICAgICAgICAgICAgICBldmVudHM6IGV2ZW50cy5maWx0ZXIoZXZlbnQgPT5cbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RhcnQgJiYgZXZlbnQuZW5kICYmIGV2ZW50LnN0YXJ0LmRhdGVUaW1lICYmIGV2ZW50LmVuZC5kYXRlVGltZSAmJlxuICAgICAgICAgICAgICAgICAgICAobW9tZW50KGV2ZW50LnN0YXJ0LmRhdGVUaW1lKS5pc0JldHdlZW4oZGF5U3RhcnQsIGRheUVuZCkgfHxcbiAgICAgICAgICAgICAgICAgICAgIG1vbWVudChldmVudC5lbmQuZGF0ZVRpbWUpLmlzQmV0d2VlbihkYXlTdGFydCwgZGF5RW5kKSkpXG4gICAgICAgICAgICAgICAgICAgICAvLyBDaGFuZ2Ugc3RhcnQgLyBlbmQgdG8gZGlyZWN0bHkgcG9pbnQgdG8gdGhlIGRhdGVUaW1lXG4gICAgICAgICAgICAgICAgICAgICAubWFwKGV2ZW50ID0+IGNsb25lKGV2ZW50LCB7c3RhcnRNb21lbnQ6IG1vbWVudChldmVudC5zdGFydC5kYXRlVGltZSksIGVuZE1vbWVudDogbW9tZW50KGV2ZW50LmVuZC5kYXRlVGltZSl9KSlcbiAgICAgICAgICAgICAgICAgICAgIC5zb3J0KChhLGIpID0+IGEuc3RhcnRNb21lbnQudmFsdWVPZiA+IGIuc3RhcnRNb21lbnQudmFsdWVPZiA/IDEgOiBhLnN0YXJ0TW9tZW50IDwgYi5zdGFydE1vbWVudCA/IC0xIDogMCksXG4gICAgICAgICAgICAgICAgZnVsbERheUV2ZW50czogZXZlbnRzLmZpbHRlcihldmVudCA9PlxuICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZnkgdGhhdCBpdCBpcyBhIGZ1bGwtZGF5LWV2ZW50XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0YXJ0ICYmIGV2ZW50LmVuZCAmJiBldmVudC5zdGFydC5kYXRlICYmIGV2ZW50LmVuZC5kYXRlICYmXG4gICAgICAgICAgICAgICAgICAgIC8vIFZlcmlmeSBpdCBhcHBsaWVzIHRvIGN1cnJlbnQgZGF5XG4gICAgICAgICAgICAgICAgICAgIChldmVudC5zdGFydC5kYXRlIDw9IGRheURhdGUgJiYgZXZlbnQuZW5kLmRhdGUgPiBkYXlEYXRlKSkgXG4gICAgICAgICAgICAgICAgICAgICAvLyBDaGFuZ2Ugc3RhcnQgLyBlbmQgdG8gZGlyZWN0bHkgcG9pbnQgdG8gdGhlIGRhdGUgb2JqZWN0XG4gICAgICAgICAgICAgICAgICAgIC5tYXAoZXZlbnQgPT4gY2xvbmUoZXZlbnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0RGF0ZTogZXZlbnQuc3RhcnQuZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZERhdGU6IGV2ZW50LmVuZC5kYXRlfSkpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRheSA9IG1vbWVudChkYXkpIC8vIGNsb25lIGl0XG4gICAgICAgICAgICAgICAgLmFkZCgxLCAnZGF5cycpOyAvLyBBZGQgYW5vdGhlciBkYXlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbmRlclxuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJ2ZW1lbmRvLXdlZWt2aWV3XCI+XG4gICAgICAgICAgPHRhYmxlPjx0Ym9keT5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9e3tib3JkZXI6IDB9fT48L3RkPlxuICAgICAgICAgICAgICAgIHtkYXlEYXRhcy5tYXAoZCA9PiA8dGQga2V5PXtkLmRheVN0YXJ0LnRvSVNPU3RyaW5nKCl9IGNsYXNzTmFtZT17ZC5pc1RvZGF5ID8gXCJ0b2RheVwiIDogbnVsbH0+XG4gICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImRheW5hbWVcIj57ZC5uYW1lfTwvcD5cbiAgICAgICAgICAgICAgICA8L3RkPil9XG4gICAgICAgICAgICA8L3RyPjx0cj5cbiAgICAgICAgICAgICAgICA8dGQgc3R5bGU9e3tib3JkZXI6IDB9fT48cCBjbGFzc05hbWU9XCJ3ZWVrLW51bWJlclwiPntpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwiY2FsZW5kYXIud2Vla051bWJlclwiLCBkZWZhdWx0TWVzc2FnZTpcIlZ7d2Vla051bWJlcn1cIn0sIHt3ZWVrTnVtYmVyOm1vbWVudChmaXJzdERheSkud2VlaygpfSl9PC9wPjwvdGQ+XG4gICAgICAgICAgICAgICAge2RheURhdGFzLm1hcChkYXkgPT5cbiAgICAgICAgICAgICAgICAgICAgPHRkIGtleT17ZGF5LmRheVN0YXJ0LnRvSVNPU3RyaW5nKCl9IGNsYXNzTmFtZT17ZGF5LmlzVG9kYXkgPyBcInRvZGF5XCIgOiBudWxsfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtkYXkuZnVsbERheUV2ZW50cy5tYXAoKHtpZCwgdGV4dCwgbG9jYXRpb24sIGRlc2NyaXB0aW9uLCBodG1sTGluaywgY2xhc3NOYW1lfSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17aWR9IGNsYXNzTmFtZT17XCJkYXl2aWV3ZXZlbnQgZnVsbC1kYXkgXCIgKyBjbGFzc05hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtgJHt0ZXh0fWAgKyAobG9jYXRpb24gP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG5cIiArIGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJjYWxlbmRhci5mdWxsRGF5RXZlbnRMb2NhdGlvblwiLCBkZWZhdWx0TWVzc2FnZTpcIlBsYXRzOiB7bG9jYXRpb259XCJ9LCB7bG9jYXRpb246bG9jYXRpb259KSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlwiKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVzY3JpcHRpb24gP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuXCIgKyBkZXNjcmlwdGlvbiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJldmVudC10aXRsZVwiIGhyZWY9e2h0bWxMaW5rfSB0YXJnZXQ9XCJjYWxlbmRhci1ldmVudFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RleHR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xvY2F0aW9uICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJldmVudC1sb2NhdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsb2NhdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZGVzY3JpcHRpb24gJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImV2ZW50LWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Rlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvdHI+PHRyPlxuICAgICAgICAgICAgPHRkIHN0eWxlPXt7Ym9yZGVyOiAwfX0+XG4gICAgICAgICAgICAgICAgPEhvdXJNYXJrZXJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRIb3VyPXtzdGFydEhvdXJ9XG4gICAgICAgICAgICAgICAgICAgIGVuZEhvdXI9e2VuZEhvdXJ9XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsZT17bG9jYWxlfVxuICAgICAgICAgICAgICAgICAgICB6b29tPXt6b29tfSAvPlxuICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICB7ZGF5RGF0YXMubWFwKGRheSA9PiA8dGQga2V5PXtkYXkuZGF5U3RhcnQudG9JU09TdHJpbmcoKX0gY2xhc3NOYW1lPXtkYXkuaXNUb2RheSA/IFwidG9kYXlcIiA6IG51bGx9PjxEYXlWaWV3XG4gICAgICAgICAgICAgICAgICAgIGtleT17ZGF5LmRheVN0YXJ0LnRvSVNPU3RyaW5nKCl9XG4gICAgICAgICAgICAgICAgICAgIGRheVN0YXJ0PXtkYXkuZGF5U3RhcnR9XG4gICAgICAgICAgICAgICAgICAgIGRheUVuZD17ZGF5LmRheUVuZH1cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzPXtkYXkuZXZlbnRzfVxuICAgICAgICAgICAgICAgICAgICBsb2NhbGU9e2xvY2FsZX1cbiAgICAgICAgICAgICAgICAgICAgem9vbT17em9vbX1cbiAgICAgICAgICAgICAgICAgICAgaXNMYXN0Q2FsbD17c3RhdHVzID09ICcnfSAvPiA8L3RkPil9XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIChzdGF0dXMgfHwgZXJyb3IpICYmICghZXJyb3IgfHwgZXJyb3IubmFtZSAhPT0gXCJVbmF1dGhvcml6ZWRFcnJvclwiKSAmJlxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyBTaG93IHN0YXR1cyAvIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIDx0cj48dGQgc3R5bGU9e3tib3JkZXI6IDB9fT48L3RkPjx0ZCBzdHlsZT17e2JvcmRlcjogMH19IGNvbFNwYW49e251bURheXN9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPFN0YXR1c0JhciBzdGF0dXM9e3N0YXR1c30gZXJyb3I9e2Vycm9yfSAvPlxuICAgICAgICAgICAgICAgICAgICA8L3RkPjwvdHI+XG4gICAgICAgICAgICB9XG4gICAgICAgICAgPC90Ym9keT48L3RhYmxlPlxuICAgICAgICA8L2Rpdj5cbiAgICB9XG59IiwiaW1wb3J0IHsgQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBHb29nbGVDbGllbnQgfSBmcm9tICcuL2dvb2dsZS1jbGllbnQnO1xuXG5leHBvcnQgY2xhc3MgR29vZ2xlQ2FsZW5kYXIgZXh0ZW5kcyBHb29nbGVDbGllbnQge1xuXG4gIGNvbnN0cnVjdG9yKGdvb2dsZVRva2VuUHJvdmlkZXI6IEJlYXJlclByb3ZpZGVyKSB7XG4gICAgc3VwZXIoJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2Rpc2NvdmVyeS92MS9hcGlzL2NhbGVuZGFyL3YzL3Jlc3QnKTtcbiAgICB0aGlzLnNldEJlYXJlclByb3ZpZGVyKGdvb2dsZVRva2VuUHJvdmlkZXIpO1xuICB9XG5cbiAgYXN5bmMgbGlzdENhbGVuZGFycygpIHtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRlZCgpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBnYXBpLmNsaWVudC5jYWxlbmRhci5jYWxlbmRhckxpc3QubGlzdCh7fSk7XG4gICAgICAvLyBUT0RPOiBXaGF0IGlzIHRoZSBub3JtYWwgcmVzLnN0YXR1cz8gMjAwPyBUaHJvdyBpZiBub3QgMjAwP1xuICAgICAgcmV0dXJuIHJlcy5yZXN1bHQuaXRlbXM7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBUT0RPOiBQYXJzZSBvdXQgZXJyb3IgZnJvbSBlcnIgKHdoaWNoIGlzIGFuIG9iamVjdCEpXG4gICAgICB0aHJvdyBlcnIuZXJyb3I7IC8vIElzIHRoaXMgY29ycmVjdD8gVGVzdCFcbiAgICB9XG4gIH1cblxuICBhc3luYyBiYXRjaEV2ZW50cyh7IGNhbGVuZGFyTGlzdCwgdGltZU1pbiwgdGltZU1heCB9KSB7XG4gICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0ZWQoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYmF0Y2ggPSBnYXBpLmNsaWVudC5uZXdCYXRjaCgpO1xuICAgICAgY2FsZW5kYXJMaXN0LmZvckVhY2goKGNhbCkgPT4ge1xuICAgICAgICBiYXRjaC5hZGQoZ2FwaS5jbGllbnQuY2FsZW5kYXIuZXZlbnRzLmxpc3Qoe1xuICAgICAgICAgICdjYWxlbmRhcklkJzogY2FsLmlkIHx8ICdwcmltYXJ5JyxcbiAgICAgICAgICAndGltZU1pbic6IHRpbWVNaW4gJiYgKG5ldyBEYXRlKHRpbWVNaW4pKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICd0aW1lTWF4JzogdGltZU1heCAmJiAobmV3IERhdGUodGltZU1heCkpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgJ3Nob3dEZWxldGVkJzogZmFsc2UsXG4gICAgICAgICAgJ3NpbmdsZUV2ZW50cyc6IHRydWUsXG4gICAgICAgICAgJ2ZpZWxkcyc6ICdpdGVtcy9pZCxpdGVtcy9zdGFydCxpdGVtcy9lbmQsaXRlbXMvc3VtbWFyeSxpdGVtcy9sb2NhdGlvbixpdGVtcy9odG1sTGluayxpdGVtcy9kZXNjcmlwdGlvbicsXG4gICAgICAgICAgJ21heFJlc3VsdHMnOiAyNTAwLFxuICAgICAgICAgICdvcmRlckJ5JzogJ3N0YXJ0VGltZSdcbiAgICAgICAgfSksIDxhbnk+eydpZCc6IGNhbC5pZH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmF0Y2gudGhlbihyZXNwID0+IHtcbiAgICAgICAgbGV0IG5ld0NhbHMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBjYWxlbmRhckxpc3QpIHtcbiAgICAgICAgICBjb25zdCBjYWxJZCA9IGNhbGVuZGFyTGlzdFtpXS5pZDtcbiAgICAgICAgICBjb25zdCBldmVudHMgPSAocmVzcC5yZXN1bHRbY2FsSWRdLnJlc3VsdCAgYXMgZ2FwaS5jbGllbnQuY2FsZW5kYXIuRXZlbnRzKS5pdGVtcztcbiAgICAgICAgICBuZXdDYWxzW2NhbElkXSA9IHtjYWxlbmRhcjogY2FsZW5kYXJMaXN0W2ldLCBldmVudHN9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdDYWxzO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIHRocm93IGVyci5lcnJvcjtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBXZWVrVmlldyBmcm9tICcuL3dlZWstdmlldyc7XG5pbXBvcnQge0dvb2dsZUNhbGVuZGFyfSBmcm9tICcuLi8uLi9hcGlzL2dvb2dsZS1jYWxlbmRhcic7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQge2Nsb25lLCBmbGF0dGVuLCBMfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgU3RhdHVzQmFyIGZyb20gJy4vc3RhdHVzLWJhcic7XG5pbXBvcnQge2NvdXJzZU5hbWVUb0Nzc0NsYXNzfSBmcm9tICcuL2NvdXJzZS1uYW1lLXRvLWNzcy1jbGFzcyc7XG5pbXBvcnQge3Nob3VsZEluY2x1ZGVDYWxlbmRhcn0gZnJvbSAnLi9zaG91bGQtaW5jbHVkZS1jYWxlbmRhcic7XG5pbXBvcnQgeyBsb2NhbE1vbWVudCB9IGZyb20gJy4uLy4uL2dsb2JhbHMvbW9tZW50LXN2LWxvY2FsZSc7XG5pbXBvcnQgZW52LCB7IEVudiB9IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgICBmaXJzdERheTogbW9tZW50Lk1vbWVudDtcbiAgICBudW1EYXlzOiBudW1iZXI7XG4gICAgaW5pdGlhbFN0YXJ0SG91cjogbnVtYmVyO1xuICAgIGluaXRpYWxFbmRIb3VyOiBudW1iZXI7XG4gICAgaW5pdGlhbFpvb206IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgICBmaXJzdERheTogbW9tZW50Lk1vbWVudCxcbiAgICBzdGFydEhvdXI6IG51bWJlcixcbiAgICBlbmRIb3VyOiBudW1iZXIsXG4gICAgem9vbTogbnVtYmVyLFxuICAgIGNhbGVuZGFyczoge1tjYWxlbmRhcklkOiBzdHJpbmddOiB7XG4gICAgICAgIGNhbGVuZGFyOiBnYXBpLmNsaWVudC5jYWxlbmRhci5DYWxlbmRhckxpc3RFbnRyeSxcbiAgICAgICAgZXZlbnRzOiBnYXBpLmNsaWVudC5jYWxlbmRhci5FdmVudFtdIH19LFxuICAgIGNhbGVuZGFyc0JlaW5nTG9hZGVkOiBzdHJpbmdbXSxcbiAgICBzdGF0dXM6IHN0cmluZyxcbiAgICBlcnJvcjogRXJyb3IgfCBudWxsIFxufVxuICBcbmV4cG9ydCBjbGFzcyBDYWxlbmRhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyAmIHtlbnY6IEVudn0sIFN0YXRlPiB7XG4gICAgZ2NhbDogR29vZ2xlQ2FsZW5kYXI7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xuXG4gICAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcyAmIHtlbnY6IEVudn0pIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAvLyBQcm9wc1xuICAgICAgICBjb25zdCB7Zmlyc3REYXl9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGluaXRpYWxTdGFydEhvdXIsXG4gICAgICAgICAgICBpbml0aWFsRW5kSG91cixcbiAgICAgICAgICAgIGluaXRpYWxab29tXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBcbiAgICAgICAgLy8gU3RhdGVcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGZpcnN0RGF5OiBmaXJzdERheSxcbiAgICAgICAgICAgIHN0YXJ0SG91cjogaW5pdGlhbFN0YXJ0SG91cixcbiAgICAgICAgICAgIGVuZEhvdXI6IGluaXRpYWxFbmRIb3VyLFxuICAgICAgICAgICAgem9vbTogaW5pdGlhbFpvb20sXG4gICAgICAgICAgICBjYWxlbmRhcnM6IHt9LFxuICAgICAgICAgICAgY2FsZW5kYXJzQmVpbmdMb2FkZWQ6IFtdLFxuICAgICAgICAgICAgc3RhdHVzOiAnTG9hZGluZyBjYWxlbmRhcnMuLi4gKGF1dGhlbnRpY2F0aW5nLi4uKScsXG4gICAgICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7Z29vZ2xlVG9rZW5Qcm92aWRlcn0gPSBwcm9wcy5lbnYgfHwgZW52O1xuICAgICAgICB0aGlzLmdjYWwgPSBuZXcgR29vZ2xlQ2FsZW5kYXIoZ29vZ2xlVG9rZW5Qcm92aWRlcik7XG5cbiAgICAgICAgLy8gU3RhcnQgY2FsbGluZyBvbiBHb29nbGUgQVBJIHJpZ2h0IGF3YXkuIFN0b3JlIHByb21pc2UgaW4gcHJvcGVydHkuXG4gICAgICAgIHRoaXMuZ2NhbC5lbnN1cmVJbml0ZWQoKS50aGVuKCgpPT57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkRGF0YShmaXJzdERheSk7XG4gICAgICAgIH0pLmNhdGNoIChlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBcIlVua25vd24gZXJyb3JcIjtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXJyb3J9KTtcbiAgICAgICAgY29uc29sZS5lcnJvciAoZXJyb3Iuc3RhY2sgfHwgZXJyb3IpOyAvLyBLZWVwIVxuICAgIH1cblxuICAgIGxvYWREYXRhKGZpcnN0RGF5KSB7XG4gICAgICAgIC8vIFByb3BzXG4gICAgICAgIGNvbnN0IHtudW1EYXlzfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBmaXJzdERheSxcbiAgICAgICAgICAgIGNhbGVuZGFyczoge30sXG4gICAgICAgICAgICBjYWxlbmRhcnNCZWluZ0xvYWRlZDogW10sXG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgIHN0YXR1czogaW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcImNhbGVuZGFyLmxvYWRpbmdDYWxlbmRhclwiLCBkZWZhdWx0TWVzc2FnZTogXCJMb2FkaW5nIGNhbGVuZGFycy4uLiAobGlzdGluZy4uLilcIn0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEltcG9ydGFudCB0byByZXR1cm4gdGhlIFByb21pc2Ugc28gdGhhdCBjYWxsZXIgd2lsbCBjYXRjaCBhbnkgZXJyb3IuXG4gICAgICAgIHJldHVybiB0aGlzLmdjYWwubGlzdENhbGVuZGFycygpLnRoZW4oY2FsZW5kYXJzID0+IHtcbiAgICAgICAgICAgIC8vIElnbm9yZSB0aGUgXCJ3ZWVrIG51bWJlcnNcIiBjYWxlbmRhciBhcyB3ZSBhbHJlYWR5IGluY2x1ZGUgd2VlayBudW1iZXJzIGluIG91ciB2aWV3XG4gICAgICAgICAgICBjYWxlbmRhcnMgPSBjYWxlbmRhcnMuZmlsdGVyKGNhbCA9PiBzaG91bGRJbmNsdWRlQ2FsZW5kYXIoY2FsKSk7XG4gICAgICAgICAgICAvLyEvV2VlayBOdW1iZXJzL2lnLnRlc3QoYy5zdW1tYXJ5KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhjYWxlbmRhcnMubWFwKGMgPT4gKHtiZ0NvbG9yOiBjLmJhY2tncm91bmRDb2xvciwgcHJpbWFyeTogYy5wcmltYXJ5LCBzdW1tYXJ5OiBjLnN1bW1hcnksIHg6IGN9KSkpO1xuICAgICAgICAgICAgLy8gQ2FsZW5kYXJzIFN1Y2Nlc3NmdWxseSBsaXN0ZWQuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJjYWxlbmRhci5sb2FkQ2FsZW5kYXJFdmVudHNcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiTG9hZCBjYWxlbmRhciBldmVudHMuLi5cIn0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZ2NhbC5iYXRjaEV2ZW50cyh7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXJMaXN0OiBjYWxlbmRhcnMsXG4gICAgICAgICAgICAgICAgdGltZU1pbjogbW9tZW50KGZpcnN0RGF5KS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgICAgICB0aW1lTWF4OiBtb21lbnQoZmlyc3REYXkpLmFkZChudW1EYXlzLCAnZGF5cycpLmVuZE9mKCdkYXknKVxuICAgICAgICAgICAgfSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NhbGVuZGFyczogcmVzdWx0LCBzdGF0dXM6ICcnfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmF2aWdhdGVUb1ByZXZpb3VzV2VlaygpIHtcbiAgICAgICAgdGhpcy5sb2FkRGF0YShtb21lbnQodGhpcy5zdGF0ZS5maXJzdERheSkuYWRkKC0xLCBcIndlZWtcIikpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuYXZpZ2F0ZVRvTmV4dFdlZWsoKSB7XG4gICAgICAgIHRoaXMubG9hZERhdGEobW9tZW50KHRoaXMuc3RhdGUuZmlyc3REYXkpLmFkZCgxLCBcIndlZWtcIikpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIgKCkge1xuICAgICAgICAvLyBQcm9wc1xuICAgICAgICBjb25zdCB7IG51bURheXMgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgXG4gICAgICAgIC8vIFN0YXRlXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGZpcnN0RGF5LFxuICAgICAgICAgICAgc3RhcnRIb3VyLFxuICAgICAgICAgICAgZW5kSG91cixcbiAgICAgICAgICAgIHpvb20sXG4gICAgICAgICAgICBjYWxlbmRhcnMsXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICBjb25zdCBldmVudFNldHMgPSBPYmplY3Qua2V5cyhjYWxlbmRhcnMpXG4gICAgICAgICAgICAubWFwKGNhbGVuZGFySWQgPT4gY2FsZW5kYXJzW2NhbGVuZGFySWRdKVxuICAgICAgICAgICAgLm1hcCgoe2NhbGVuZGFyLCBldmVudHN9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNTY2hlZHVsZSA9IGNhbGVuZGFyLnN1bW1hcnkgPT09ICdTa29sc2NoZW1hJyAmJiBjYWxlbmRhci5kZXNjcmlwdGlvbiA9PT0gXCJTeW5jaHJvbml6ZWRcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0hvbGlkYXkgPSAvaG9saWRheS8udGVzdChjYWxlbmRhci5pZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNDbGFzc1Jvb20gPSAvY2xhc3Nyb29tLy50ZXN0KGNhbGVuZGFyLmlkKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsZW5kYXIuY29sb3JJZCkgY2xhc3NOYW1lcy5wdXNoKFwiZ2NhbC1wYWxldHRlLVwiICsgY2FsZW5kYXIuY29sb3JJZCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzU2NoZWR1bGUpIGNsYXNzTmFtZXMucHVzaChcImNvdXJzZS1ldmVudFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNIb2xpZGF5KSBjbGFzc05hbWVzLnB1c2goXCJob2xpZGF5LWV2ZW50XCIpO1xuICAgICAgICAgICAgICAgIC8vIE1hcCBHb29nbGUgQ2FsZW5kYXIgZXZlbnRzIHRvIG91ciBvd24gZm9ybWF0OlxuICAgICAgICAgICAgICAgIHJldHVybiBldmVudHMubWFwKGV2ZW50ID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBldmVudC5pZCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGV2ZW50LnN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGV2ZW50LmVuZCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogZXZlbnQuc3VtbWFyeSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGV2ZW50LmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXZlbnQuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIC8vYmdDb2xvcjogY2FsZW5kYXIuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAvL2ZnQ29sb3I6IGNhbGVuZGFyLmZvcmVncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgaHRtbExpbms6IGV2ZW50Lmh0bWxMaW5rLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IChpc1NjaGVkdWxlICYmIGV2ZW50LnN1bW1hcnkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5jb25jYXQoY291cnNlTmFtZVRvQ3NzQ2xhc3MoJ2NvdXJzZS1ldmVudC0nLCBldmVudC5zdW1tYXJ5KSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lcykuam9pbihcIiBcIilcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICBjb25zdCBldmVudHMgPSBmbGF0dGVuKGV2ZW50U2V0cyk7XG5cbiAgICAgICAgLy8gRWxzZSwgcmVuZGVyIHRoZSBXZWVrVmlldyBub3cuIEFueSBlcnJvciBzaG91bGQgYmUgZGlzcGxheWVkIGFzIHJlZCBzdGF0dXNcbiAgICAgICAgcmV0dXJuIDxkaXYgc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJywgdG9wOiAwLCBsZWZ0OiAwfX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi10b29sYmFyIHdlZWstbmF2aWdhdGlvblwiID5cbiAgICAgICAgICAgICAgICB7Lyo8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge0xgSWRhZ2B9XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PiovfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9PnRoaXMubmF2aWdhdGVUb1ByZXZpb3VzV2VlaygpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLWxlZnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpPT50aGlzLm5hdmlnYXRlVG9OZXh0V2VlaygpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLXJpZ2h0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPiAgXG4gICAgICAgICAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwiY2FsZW5kYXIuY3VycmVudERhdGVcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiVmVja2Ege3dlZWt9LCB7eWVhcn1cIn0sIHt3ZWVrOiBtb21lbnQoZmlyc3REYXkpLndlZWsoKSwgeWVhcjptb21lbnQoZmlyc3REYXkpLnllYXIoKX0pfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8V2Vla1ZpZXdcbiAgICAgICAgICAgICAgICBsb2NhbGU9e2ludGwubG9jYWxlfVxuICAgICAgICAgICAgICAgIGZpcnN0RGF5PXtmaXJzdERheX1cbiAgICAgICAgICAgICAgICBzdGFydEhvdXI9e3N0YXJ0SG91cn1cbiAgICAgICAgICAgICAgICBlbmRIb3VyPXtlbmRIb3VyfVxuICAgICAgICAgICAgICAgIG51bURheXM9e251bURheXN9XG4gICAgICAgICAgICAgICAgem9vbT17em9vbX1cbiAgICAgICAgICAgICAgICBldmVudHM9e2V2ZW50c31cbiAgICAgICAgICAgICAgICBzdGF0dXM9e3N0YXR1c31cbiAgICAgICAgICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICB9XG59XG4iLCIvKiBDYWxlbmRhcnMgdG8gc2hvdzpcblxuICAgIHN1bW1hcnk6IFwiTWF0c2VkZWxcIixcbiAgICBzdW1tYXJ5OiBcIlNrb2xzY2hlbWFcIixcbiAgICBwcmltYXJ5OiB0cnVlXG4gICAgaWQuaW5jbHVkZXMoJ2NsYXNzcm9vbScpXG4gICAgaWQuaW5jbHVkZXMoJ2hvbGlkYXknKVxuKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkSW5jbHVkZUNhbGVuZGFyIChjYWw6IGdhcGkuY2xpZW50LmNhbGVuZGFyLkNhbGVuZGFyTGlzdEVudHJ5KSB7XG4gIGNvbnN0IHN1bW1hcnkgPSBjYWwuc3VtbWFyeSB8fCBcIlwiO1xuICBjb25zdCBpc093bmVyID0gL293bmVyL2lnLnRlc3QoY2FsLmFjY2Vzc1JvbGUpO1xuICBjb25zdCBpc1ByaW1hcnkgPSAhIWNhbC5wcmltYXJ5O1xuICBjb25zdCBpc0NsYXNzcm9vbUNhbGVuZGFyID0gL2NsYXNzcm9vbS9pZy50ZXN0KGNhbC5pZCk7XG4gIGNvbnN0IGlzSG9saWRheUNhbGVuZGFyID0gL2hvbGlkYXkvaWcudGVzdChjYWwuaWQpO1xuXG4gIHJldHVybiAoXG4gICAgaXNQcmltYXJ5IHx8XG4gICAgaXNDbGFzc3Jvb21DYWxlbmRhciB8fFxuICAgIGlzSG9saWRheUNhbGVuZGFyIHx8XG4gICAgLy8vbWF0c2VkZWwvaWcudGVzdChzdW1tYXJ5KSB8fFxuICAgICgvc2NoZW1hL2lnLnRlc3Qoc3VtbWFyeSkgJiYgaXNPd25lcilcbiAgKTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEtHVGVybVBsYW5uZXJXZWVrUGxhbiwgS0dUZXJtUGxhbm5lcldlZWtQbGFuRW50cnkgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgRW52IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgd2Vla051bWJlcjogbnVtYmVyO1xuICB3ZWVrRGF0ZTogbnVtYmVyO1xuICBjb3Vyc2VOYW1lOiBzdHJpbmc7XG4gIHdlZWtQbGFuPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuO1xuICBub3RlPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuRW50cnk7XG4gIGNsb3NlRGlhbG9nOiAoKT0+dm9pZDtcbiAgZW52OiBFbnY7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGNvbG9yOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBXZWVrTm90ZURpYWxvZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkZXNjcmlwdGlvbjogcHJvcHMubm90ZSA/IHByb3BzLm5vdGUuZGVzY3JpcHRpb24gOiAnJyxcbiAgICAgIGNvbG9yOiBwcm9wcy5ub3RlID8gcHJvcHMubm90ZS5jb2xvciA6ICd5ZWxsb3cnXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVsZXRlKCkge1xuICAgIGNvbnN0IHsgd2Vla051bWJlciwgd2Vla0RhdGUsIGNvdXJzZU5hbWUsIHdlZWtQbGFuLCBub3RlLCBjbG9zZURpYWxvZywgZW52IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgZGVzY3JpcHRpb24sIGNvbG9yfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBjbG9zZURpYWxvZygpO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKHdlZWtQbGFuLnBsYW5zKS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGF3YWl0IGVudi5rZ1Rlcm1QbGFubmVyUmVwby5kZWxldGUoW3dlZWtQbGFuLmlkXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IGVudi5rZ1Rlcm1QbGFubmVyUmVwby51cGRhdGUoW3dlZWtQbGFuXSwgd3AgPT4ge1xuICAgICAgICBkZWxldGUgd3AucGxhbnNbY291cnNlTmFtZV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNhdmUoKSB7XG4gICAgY29uc3QgeyB3ZWVrTnVtYmVyLCB3ZWVrRGF0ZSwgY291cnNlTmFtZSwgd2Vla1BsYW4sIG5vdGUsIGNsb3NlRGlhbG9nLCBlbnYgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgY29sb3J9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNsb3NlRGlhbG9nKCk7XG5cbiAgICBpZiAoZGVzY3JpcHRpb24ubGVuZ3RoID09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHdlZWtQbGFuKSB7XG4gICAgICBhd2FpdCBlbnYua2dUZXJtUGxhbm5lclJlcG8udXBkYXRlKFt3ZWVrUGxhbl0sIHdwID0+IHdwLnBsYW5zW2NvdXJzZU5hbWVdID0ge2Rlc2NyaXB0aW9uLCBjb2xvcn0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwbGFucyA9IHt9O1xuICAgICAgcGxhbnNbY291cnNlTmFtZV0gPSB7ZGVzY3JpcHRpb24sIGNvbG9yfTtcbiAgICAgIGF3YWl0IGVudi5rZ1Rlcm1QbGFubmVyUmVwby5pbnNlcnQoW3tcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgZGF0ZVRpbWU6IHdlZWtEYXRlLFxuICAgICAgICBwbGFuc1xuICAgICAgfV0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHdlZWtOdW1iZXIsIGNvdXJzZU5hbWUsIHdlZWtQbGFuLCBub3RlLCBlbnYgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgY29sb3IgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgcmVhZE9ubHkgPSBlbnYudHV0b3JlZDtcblxuICAgIHJldHVybiA8ZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAgPGgyPkjDpG5kZWxzZSBmw7ZyIHZlY2thIHt3ZWVrTnVtYmVyfSBvY2gge2NvdXJzZU5hbWV9PC9oMj5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24tdGFibGVcIj5cbiAgICAgICAgICA8ZGl2PkJlc2tyaXZuaW5nOjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVsbFdpZHRoXCI+XG4gICAgICAgICAgICA8dGV4dGFyZWEgYXV0b0ZvY3VzIHZhbHVlPXtkZXNjcmlwdGlvbn0gZGlzYWJsZWQ9e3JlYWRPbmx5fSBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7ZGVzY3JpcHRpb246IGV2LnRhcmdldC52YWx1ZX0pfSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi10YWJsZVwiPlxuICAgICAgICAgIDxkaXY+RsOkcmc6PC9kaXY+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxzZWxlY3QgdmFsdWU9e2NvbG9yfSBkaXNhYmxlZD17cmVhZE9ubHl9IG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHtjb2xvcjogZXYudGFyZ2V0LnZhbHVlfSl9PlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwieWVsbG93XCI+R3VsPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ5ZWxsb3dMaWdodFwiPkxqdXNndWw8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImN5YW5cIj5HcsO2bjwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY3lhbkxpZ2h0XCI+TGp1c2dyw7ZuPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJwdXJwbGVcIj5MaWxhPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJwdXJwbGVMaWdodFwiPkxqdXNsaWxhPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZWRcIj5Sw7ZkPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJyZWRMaWdodFwiPlJvc2E8L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdj5cbiAgICAgICAge3JlYWRPbmx5ID9cbiAgICAgICAgICA8YnV0dG9uIHRhYkluZGV4PXsxfSBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCIgb25DbGljaz17KCk9PnRoaXMucHJvcHMuY2xvc2VEaWFsb2coKX0+QXZicnl0PC9idXR0b24+IDpcbiAgICAgICAgICA8PlxuICAgICAgICAgICAgPGJ1dHRvbiB0YWJJbmRleD17MX0gY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiIG9uQ2xpY2s9eygpPT50aGlzLnNhdmUoKX0+U3BhcmE8L2J1dHRvbj5cbiAgICAgICAgICAgIHtub3RlICYmIDxhIHRhYkluZGV4PXsxfSBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiBvbkNsaWNrPXsoKT0+dGhpcy5kZWxldGUoKX0+VGEgYm9ydDwvYT59XG4gICAgICAgICAgPC8+XG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4vL2ltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IEVEU0NvdXJzZSwgRURTU3R1ZHlQbGFuIH0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2Vkcyc7XG5pbXBvcnQgeyBFRFNQZXJpb2QgfSBmcm9tICcuLi8uLi9hcGlzL2Vkc2NsaWVudCc7XG5pbXBvcnQgeyBnZXRTY2hvb2xNb21lbnQsIGdldEZpcnN0QW5kTGFzdFdlZWtPZlRlcm0sIGdldFRlcm1TdGFyRW5kRGF0ZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xuaW1wb3J0IHsgS0dUZXJtUGxhbm5lcldlZWtQbGFuLCBLR1Rlcm1QbGFubmVyV2Vla1BsYW5FbnRyeSwgS0dUZXJtUGxhbm5lclR1dG9yTm90ZSwgS0dUZXJtUGxhbm5lcldlZWtQbGFuT3JUdXRvck5vdGUgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBEaWFsb2dzIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2RpYWxvZ3MnO1xuaW1wb3J0IHsgV2Vla05vdGVEaWFsb2cgfSBmcm9tICcuL3dlZWstbm90ZS1kaWFsb2cnO1xuaW1wb3J0IHsgS0dUZXJtUGxhbm5lclJlcG8gfSBmcm9tICcuLi8uLi9yZXBvcy9rZy10ZXJtcGxhbm5lci1yZXBvJztcbmltcG9ydCB7IGRpc3RpbmN0LCBzaG93RXJyb3IgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBLRURXZWVrIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Vla3V0aWwnO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCwgRG9jdW1lbnRBY2Nlc3MsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuaW1wb3J0IHsgRW52IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IFR1dG9yRGlhbG9nIH0gZnJvbSAnLi4va3MtdGVybXBsYW5uZXIvdHV0b3ItZGlhbG9nJztcbmltcG9ydCB7IGZlYXR1cmVzIH0gZnJvbSAnLi4vLi4vZmVhdHVyZXMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBlbnY6IEVudjtcbiAgdHV0b3JlZDogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgbm93OiBEYXRlLFxuICBjb3Vyc2VzOiBFRFNDb3Vyc2VbXTtcbiAgd2Vla1BsYW5zOiBLR1Rlcm1QbGFubmVyV2Vla1BsYW5PclR1dG9yTm90ZVtdO1xuICBpc0xvYWRpbmdDb3Vyc2VzOiBib29sZWFuO1xuICBpc0xvYWRpbmdXZWVrUGxhbnM6IGJvb2xlYW47XG4gIGRpYWxvZ3M6IGFueVtdO1xuICAvL2dvYWxzOiBFRFNTdHVkeVBsYW5bXTtcbn1cblxuZXhwb3J0IGNsYXNzIEtHVGVybVBsYW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBub3csXG4gICAgICBjb3Vyc2VzOiBbXSxcbiAgICAgIHdlZWtQbGFuczogW10sXG4gICAgICBpc0xvYWRpbmdDb3Vyc2VzOiB0cnVlLFxuICAgICAgaXNMb2FkaW5nV2Vla1BsYW5zOiB0cnVlLFxuICAgICAgZGlhbG9nczogW11cbiAgICAgIC8vZ29hbHM6IFtdXG4gICAgfVxuICAgIHRoaXMudXBkYXRlV2Vla1BsYW5zID0gdGhpcy51cGRhdGVXZWVrUGxhbnMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubG9hZEVEU0NvdXJzZXMoKTtcbiAgICB0aGlzLnByb3BzLmVudi5rZ1Rlcm1QbGFubmVyUmVwby5tZW0uc3Vic2NyaWJlKHRoaXMudXBkYXRlV2Vla1BsYW5zKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZW52LmtnVGVybVBsYW5uZXJSZXBvLm1lbS51bnN1YnNjcmliZSh0aGlzLnVwZGF0ZVdlZWtQbGFucyk7XG4gIH1cblxuICB1cGRhdGVXZWVrUGxhbnMod2Vla1BsYW5zOiBLR1Rlcm1QbGFubmVyV2Vla1BsYW5bXSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe3dlZWtQbGFucywgaXNMb2FkaW5nV2Vla1BsYW5zOiBmYWxzZX0pO1xuICB9XG5cbiAgYXN5bmMgbG9hZEVEU0NvdXJzZXMoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNjaG9vbE1vbWVudCA9IGdldFNjaG9vbE1vbWVudChtb21lbnQodGhpcy5zdGF0ZS5ub3cpKTtcbiAgICAgIGNvbnN0IHBlcmlvZE5hbWUgPSBuZXcgRURTUGVyaW9kKHNjaG9vbE1vbWVudCkucGVyaW9kO1xuICAgICAgY29uc3QgY291cnNlcyA9IGRpc3RpbmN0KGF3YWl0IHRoaXMucHJvcHMuZW52LmVkc0NsaWVudC5nZXRBY3RpdmVDb3Vyc2VzKHtwZXJpb2ROYW1lfSksIGNvdXJzZSA9PiBjb3Vyc2UubmFtZSk7XG4gICAgICAvL2NvbnNvbGUubG9nKFwiY291cnNlczpcIiArIEpTT04uc3RyaW5naWZ5KGNvdXJzZXMsIG51bGwsIDIpKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb3Vyc2VzIH0pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nQ291cnNlczogZmFsc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgb25Ob3RlQ2xpY2sod2Vla051bWJlcjogbnVtYmVyLCB3ZWVrRGF0ZTogbnVtYmVyLCBjb3Vyc2VOYW1lOiBzdHJpbmcsIHdlZWtQbGFuPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuLCBub3RlPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuRW50cnkpIHtcbiAgICB0aGlzLm9wZW5EaWFsb2coPFdlZWtOb3RlRGlhbG9nXG4gICAgICB3ZWVrTnVtYmVyPXt3ZWVrTnVtYmVyfVxuICAgICAgd2Vla0RhdGU9e3dlZWtEYXRlfVxuICAgICAgY291cnNlTmFtZT17Y291cnNlTmFtZX1cbiAgICAgIHdlZWtQbGFuPXt3ZWVrUGxhbn1cbiAgICAgIG5vdGU9e25vdGV9XG4gICAgICBlbnY9e3RoaXMucHJvcHMuZW52fVxuICAgICAgY2xvc2VEaWFsb2c9eygpPT50aGlzLmNsb3NlRGlhbG9nKCl9IC8+KTtcbiAgfVxuXG4gICAgLyoqXG4gICAqIFxuICAgKiBAcGFyYW0gd2Vla051bWJlciBcbiAgICogQHBhcmFtIGNvbW1lbnQgXG4gICAqIFxuICAgKiBBZGQgYSBjb21tZW50IGZyb20gdHV0b3JcbiAgICovXG4gIG9uVHV0b3JDbGljayh0dXRvck5vdGU6IEtHVGVybVBsYW5uZXJUdXRvck5vdGUsIHdlZWtOdW1iZXI6IG51bWJlcikge1xuICAgIHRoaXMub3BlbkRpYWxvZyg8VHV0b3JEaWFsb2dcbiAgICAgIHdlZWtOdW1iZXI9e3dlZWtOdW1iZXJ9XG4gICAgICBjb21tZW50PXt0dXRvck5vdGUudmFsdWV9XG4gICAgICB1cGRhdGVEYXRhID0ge25ld1ZhbHVlID0+IHRoaXMudXBkYXRlVHV0b3JOb3RlRmllbGQodHV0b3JOb3RlLCBuZXdWYWx1ZSl9XG4gICAgICBkZWxldGVOb3RlRGF0YSA9IHsoKSA9PiB0aGlzLmRlbGV0ZVR1dG9yTm90ZUZpZWxkKHR1dG9yTm90ZS5pZCl9XG4gICAgICBjbG9zZURpYWxvZz17KCk9PnRoaXMuY2xvc2VEaWFsb2coKX0gLz4pO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlVHV0b3JOb3RlRmllbGQobm90ZUlkOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYua2dUZXJtUGxhbm5lclJlcG8uZGVsZXRlKFtub3RlSWRdKTtcbiAgICB9IGNhdGNoIChzaG93RXJyb3Ipe31cbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVR1dG9yTm90ZUZpZWxkKHR1dG9yTm90ZTogS0dUZXJtUGxhbm5lclR1dG9yTm90ZSwgbmV3VmFsdWU6IHN0cmluZyl7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSAodHV0b3JOb3RlICYmIHR1dG9yTm90ZS52YWx1ZSkgfHwgXCJcIjtcbiAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSByZXR1cm47XG5cbiAgICB0cnkge1xuICAgICAgdHV0b3JOb3RlLnZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAvL3NldCBkb2N1bWVudCBBQ0xcbiAgICAgIHR1dG9yTm90ZS5hY2wgPSBbXG4gICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcInR1dG9yRm9yXCIsIHRoaXMucHJvcHMuZW52LmN1cnJlbnRVc2VyLm1haWwsIFwiU1wiKS50b1N0cmluZygpLFxuICAgICAgICBuZXcgRG9jdW1lbnRBY2Nlc3MoXCJlbWFpbFwiLCB0aGlzLnByb3BzLmVudi5jdXJyZW50VXNlci5tYWlsLCBcIlJcIikudG9TdHJpbmcoKSxcbiAgICAgIF07XG5cbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnByb3BzLmVudi5rZ1Rlcm1QbGFubmVyUmVwby51cHNlcnQodHV0b3JOb3RlLCBcbiAgICAgICAgKG5vdGUgOiBLR1Rlcm1QbGFubmVyVHV0b3JOb3RlKSA9PiBub3RlLnZhbHVlID0gbmV3VmFsdWUpO1xuICAgICAgfSBjYXRjaCAoc2hvd0Vycm9yKXt9XG4gIH1cblxuICBcbiAgb3BlbkRpYWxvZyhkaWFsb2cpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogWy4uLnRoaXMuc3RhdGUuZGlhbG9ncywgZGlhbG9nXSB9KTtcbiAgfVxuXG4gIGNsb3NlRGlhbG9nKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBkaWFsb2dzOiB0aGlzLnN0YXRlLmRpYWxvZ3Muc2xpY2UoMCwgdGhpcy5zdGF0ZS5kaWFsb2dzLmxlbmd0aCAtIDEpIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY291cnNlcywgbm93LCBpc0xvYWRpbmdDb3Vyc2VzLCBpc0xvYWRpbmdXZWVrUGxhbnMsIHdlZWtQbGFucywgZGlhbG9ncyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpc0xvYWRpbmcgPSBpc0xvYWRpbmdDb3Vyc2VzIHx8IGlzTG9hZGluZ1dlZWtQbGFucztcbiAgICBjb25zdCB3ZWVrczogeyB3ZWVrTnVtYmVyOiBudW1iZXIsIHdlZWtEYXRlOiBudW1iZXIsIHdlZWtQbGFuOiBLR1Rlcm1QbGFubmVyV2Vla1BsYW4gfVtdID0gW107XG4gICAgY29uc3QgdHV0b3JOb3RlczogeyB3ZWVrTnVtYmVyOiBudW1iZXIsIHR1dG9yVmFsdWU6IEtHVGVybVBsYW5uZXJUdXRvck5vdGUgfVtdID0gW107XG4gICAgY29uc3Qgc2Nob29sTW9tZW50ID0gZ2V0U2Nob29sTW9tZW50KG1vbWVudChub3cpKTtcbiAgICBjb25zdCBbdGVybVN0YXJ0LCB0ZXJtRW5kXSA9IGdldFRlcm1TdGFyRW5kRGF0ZShub3csIHNjaG9vbE1vbWVudC50ZXJtID09PSAnQVQnKTtcbiAgICBjb25zdCBbZmlyc3RXZWVrLCBsYXN0V2Vla10gPSBnZXRGaXJzdEFuZExhc3RXZWVrT2ZUZXJtKHNjaG9vbE1vbWVudC50ZXJtKTtcbiAgICBjb25zdCBzaG93S2dUdXRvckNvbW1lbnRGaWVsZCA9IGZlYXR1cmVzLmtnVHV0b3JDb21tZW50O1xuXG4gICAgbGV0IGN1cnJlbnRXZWVrUGxhbnMgOiBLR1Rlcm1QbGFubmVyV2Vla1BsYW5bXSA9IHdlZWtQbGFucy5maWx0ZXIoKHggOiBLR1Rlcm1QbGFubmVyV2Vla1BsYW4pID0+ICF4LnR5cGUpIGFzIEtHVGVybVBsYW5uZXJXZWVrUGxhbltdO1xuICAgIGxldCBjdXJyZW50VHV0b3JOb3RlcyA6IEtHVGVybVBsYW5uZXJUdXRvck5vdGVbXSA9IHdlZWtQbGFucy5maWx0ZXIoKHggOiBLR1Rlcm1QbGFubmVyVHV0b3JOb3RlKSA9PiB4LnR5cGUgPT09ICd0dXRvci1ub3RlJykgYXMgS0dUZXJtUGxhbm5lclR1dG9yTm90ZVtdO1xuXG4gICAgZm9yIChsZXQgd2Vla01vbWVudCA9IHRlcm1TdGFydC5jbG9uZSgpO1xuICAgICAgd2Vla01vbWVudC52YWx1ZU9mKCkgPCB0ZXJtRW5kLnZhbHVlT2YoKTtcbiAgICAgIHdlZWtNb21lbnQgPSB3ZWVrTW9tZW50LmNsb25lKCkuYWRkKDEsICd3ZWVrJykuc3RhcnRPZignd2VlaycpKVxuICAgIHtcbiAgICAgIGNvbnN0IHdlZWtOdW1iZXIgPSB3ZWVrTW9tZW50LndlZWsoKTtcbiAgICAgIGNvbnN0IHdlZWtZZWFyID0gd2Vla01vbWVudC55ZWFyKCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGtlZFdlZWsgPSBLRURXZWVrKHdlZWtZZWFyLCB3ZWVrTnVtYmVyKTtcbiAgICAgIGlmICh3ZWVrTnVtYmVyID49IGZpcnN0V2VlayAmJiB3ZWVrTnVtYmVyIDw9IGxhc3RXZWVrKSB7XG4gICAgICAgIGNvbnN0IHdlZWtQbGFuID0gY3VycmVudFdlZWtQbGFucy5maWx0ZXIod3AgPT5cbiAgICAgICAgICB3cC5kYXRlVGltZSA+PSBrZWRXZWVrLm5vdEJlZm9yZSAmJlxuICAgICAgICAgIHdwLmRhdGVUaW1lIDw9IGtlZFdlZWsubm90QWZ0ZXIpWzBdO1xuXG4gICAgICAgIGNvbnN0IHR1dG9yTm90ZSA9IGN1cnJlbnRUdXRvck5vdGVzLmZpbHRlcih3cCA9PlxuICAgICAgICAgIHdwLmRhdGVUaW1lID49IGtlZFdlZWsubm90QmVmb3JlICYmXG4gICAgICAgICAgd3AuZGF0ZVRpbWUgPD0ga2VkV2Vlay5ub3RBZnRlcilbMF07XG5cbiAgICAgICAgY29uc3Qgc3RhcnRPZldlZWsgPSB3ZWVrTW9tZW50LmNsb25lKCkuc3RhcnRPZignd2VlaycpLnZhbHVlT2YoKTtcbiAgICAgICAgd2Vla3MucHVzaCh7XG4gICAgICAgICAgd2Vla051bWJlcixcbiAgICAgICAgICB3ZWVrRGF0ZTogc3RhcnRPZldlZWssXG4gICAgICAgICAgd2Vla1BsYW5cbiAgICAgICAgfSk7XG4gICAgICAgIHR1dG9yTm90ZXMucHVzaCh7XG4gICAgICAgICAgd2Vla051bWJlcixcbiAgICAgICAgICB0dXRvclZhbHVlOiB0dXRvck5vdGUgfHwge3ZhbHVlOiAnJywgZGF0ZVRpbWU6IHN0YXJ0T2ZXZWVrLCBpZDogY3JlYXRlVVVJRCgpLCB0eXBlOiAndHV0b3Itbm90ZSd9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICBcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxuICAgICAgPGg0PlxuICAgICAgICBUZXJtaW5zcGxhbmVyaW5nXG4gICAgICAgPC9oND5cbiAgICAgIDxociAvPlxuICAgICAge2lzTG9hZGluZyA/XG4gICAgICAgIDxTcGlubmVyIC8+IDogY291cnNlcy5sZW5ndGggPT09IDAgPyA8ZGl2PlxuICAgICAgICAgIFRlcm1pbnNwbGFuZXJhcmVuIGFrdGl2ZXJhcyBuw6RyIGR1IHNrcml2aXRzIGluIHDDpSBkaW5hIGt1cnNlclxuICAgICAgICAgIDwvZGl2PiA6IFxuICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJ0ZXJtcGxhbm5lci10YWJsZSB6ZWJyYVwiPlxuICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgPHRoPlZlY2thPC90aD5cbiAgICAgICAgICAgICAgICB7Lypnb2Fscy5tYXAoKHtjb3Vyc2VVbml0SWQsIGNvdXJzZVVuaXROYW1lfSkgPT5cbiAgICAgICAgICAgICAgICAgIDx0aCBrZXk9e2NvdXJzZVVuaXRJZH0gY2xhc3NOYW1lPVwidGVybUNvdXJzZUhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRlcm1Db3Vyc2VUZXh0XCI+e2NvdXJzZVVuaXROYW1lfTwvZGl2PjwvdGg+KSovfVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGNvdXJzZXMubWFwKChjLCBpZHgpID0+IDx0aCBrZXk9e2lkeH0gY2xhc3NOYW1lPVwia2dDb3Vyc2VIZWFkZXJcIj57Yy5uYW1lfTwvdGg+KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB7c2hvd0tnVHV0b3JDb21tZW50RmllbGQgJiYgPHRoIGNsYXNzTmFtZT1cInR1dG9ySGVhZGVyXCI+PC90aD59XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICB7d2Vla3MubWFwKCh3LCBpZHgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0N1cnJlbnRXZWVrID0gdy53ZWVrTnVtYmVyID09PSBtb21lbnQoKS53ZWVrKCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm90ZVZhbHVlID0gdHV0b3JOb3RlcyAmJiB0dXRvck5vdGVzLmZpbmQodG4gPT4gdG4ud2Vla051bWJlciA9PT0gdy53ZWVrTnVtYmVyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJldHVybiA8dHIga2V5PXtpZHh9IGNsYXNzTmFtZT17aXNDdXJyZW50V2VlayA/IFwiY3VycmVudFdlZWtcIiA6IFwiXCJ9PlxuICAgICAgICAgICAgICAgICAgPHRkPnt3LndlZWtOdW1iZXJ9PC90ZD5cbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY291cnNlcy5tYXAoKGMsaWR4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vdGUgPSB3LndlZWtQbGFuICYmIHcud2Vla1BsYW4ucGxhbnNbYy5uYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDx0ZFxuICAgICAgICAgICAgICAgICAgICAgIGtleT17aWR4fVxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17bm90ZT8gYGNvdXJzZU5vdGUgbm90ZS1jb2xvci0ke25vdGUuY29sb3J9YCA6IFwiY291cnNlTm90ZVwifVxuICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9vbHRpcD17bm90ZSAmJiBub3RlLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgIHRpdGxlPXtub3RlICYmIG5vdGUuZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9PnRoaXMub25Ob3RlQ2xpY2sody53ZWVrTnVtYmVyLCB3LndlZWtEYXRlLCBjLm5hbWUsIHcud2Vla1BsYW4sIG5vdGUpfT5cbiAgICAgICAgICAgICAgICAgICAgICB7bm90ZT8gPGkgY2xhc3NOYW1lPVwiZmFzIGZhLWFsaWduLWNlbnRlclwiLz4gOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgPC90ZD59XG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHNob3dLZ1R1dG9yQ29tbWVudEZpZWxkICYmICh0aGlzLnByb3BzLnR1dG9yZWQgP1xuICAgICAgICAgICAgICAgICAgIDx0ZCBrZXk9e2lkeH0gb25DbGljaz17KCkgPT4gdGhpcy5vblR1dG9yQ2xpY2sobm90ZVZhbHVlLnR1dG9yVmFsdWUsIHcud2Vla051bWJlcil9IGNsYXNzTmFtZT1cInR1dG9yQ2VsbFwiPlxuICAgICAgICAgICAgICAgICAgICB7bm90ZVZhbHVlLnR1dG9yVmFsdWUudmFsdWUgPyA8ZGl2IGtleT17aWR4fSBkYXRhLXRvb2x0aXA9e25vdGVWYWx1ZS50dXRvclZhbHVlLnZhbHVlfT48aSBjbGFzc05hbWU9XCJmYXMgZmEtY29tbWVudC1kb3RzXCI+PC9pPjwvZGl2PjogPGRpdiBrZXk9e2lkeH0+PGkgY2xhc3NOYW1lPVwiZmFzIGZhLWNvbW1lbnQtbWVkaWNhbFwiPjwvaT48L2Rpdj59XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgbm90ZVZhbHVlLnR1dG9yVmFsdWUudmFsdWUgPyA8dGQgY2xhc3NOYW1lPVwidHV0b3JDZWxsXCI+PGRpdiBkYXRhLXRvb2x0aXA9e25vdGVWYWx1ZS50dXRvclZhbHVlLnZhbHVlfT48aSBjbGFzc05hbWU9XCJmYXIgZmEtY29tbWVudC1kb3RzXCI+PC9pPjwvZGl2PjwvdGQ+IDogPHRkPjwvdGQ+XG4gICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDx0Zm9vdD5cbiAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0aCBrZXk9XCJwb2ludHNcIj5Qb8Okbmc8L3RoPlxuICAgICAgICAgICAgICAgIHtjb3Vyc2VzLm1hcCgoYywgaWR4KSA9PiA8dGgga2V5PXtpZHh9IGNsYXNzTmFtZT1cInN0ZXBDZWxsXCI+e2MuY3JlZGl0c308L3RoPil9XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGg+QmV0eWdzbcOlbDwvdGg+XG4gICAgICAgICAgICAgICAgey8qZ29hbHMubWFwKGcgPT5cbiAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwic3RlcENlbGxcIj57Zy5wZXJpb2RHb2Fscy5maWx0ZXIocGcgPT4gcGcucGVyaW9kTmFtZSA9PT0gIHBlcmlvZC5wZXJpb2QpXG4gICAgICAgICAgICAgICAgICAubWFwKHBnPT5wZy5ncmFkZU5hbWUpWzBdIHx8IGcuZmluYWxHb2FsR3JhZGV9PC90aD4pKi99XG4gICAgICAgICAgICAgICAge2NvdXJzZXMubWFwKChjLCBpZHgpID0+XG4gICAgICAgICAgICAgICAgICA8dGgga2V5PXtpZHh9IGNsYXNzTmFtZT1cInN0ZXBDZWxsXCI+e2MucGVyaW9kR29hbEdyYWRlfTwvdGg+KX1cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDwvdGZvb3Q+XG4gICAgICAgICAgPC90YWJsZT59XG4gICAgICAgICAgPERpYWxvZ3NcbiAgICAgICAgZGlhbG9ncz17ZGlhbG9nc31cbiAgICAgICAgcG9wRGlhbG9nPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogZGlhbG9ncy5zbGljZSgwLCBkaWFsb2dzLmxlbmd0aCAtIDEpIH0pfSAvPlxuICAgICAgICAgIFxuICAgIDwvZGl2PlxuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtLR1Rlcm1QbGFubmVyfSBmcm9tICcuL2tnLXRlcm1wbGFubmVyJztcbmltcG9ydCB7IFR1dG9yYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy90dXRvcmFibGUtY29tcG9uZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIEtHVGVybVBsYW5uZXJUdXRvcmVkICgpIHtcbiAgcmV0dXJuIDxUdXRvcmFibGVDb21wb25lbnRcbiAgICB0dXRvcmVkPXt0cnVlfVxuICAgIGNyZWF0ZUNvbXBvbmVudD17ZW52ID0+XG4gICAgICA8S0dUZXJtUGxhbm5lclxuICAgICAgICBrZXk9e2Vudi5jdXJyZW50VXNlci5tYWlsfVxuICAgICAgICBlbnY9e2Vudn1cbiAgICAgICAgdHV0b3JlZD17dHJ1ZX0gLz5cbiAgICB9XG4gIC8+O1xufVxuIiwiaW1wb3J0IHtLZWRSZXBvfSBmcm9tICcuL2tlZC1yZXBvJztcbmltcG9ydCB7IEtHVGVybVBsYW5uZXJXZWVrUGxhbk9yVHV0b3JOb3RlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgZ2V0VGVybVN0YXJFbmREYXRlIH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLW1vbWVudCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcblxuZXhwb3J0IGNsYXNzIEtHVGVybVBsYW5uZXJSZXBvIGV4dGVuZHMgS2VkUmVwbzxLR1Rlcm1QbGFubmVyV2Vla1BsYW5PclR1dG9yTm90ZT4ge1xuICBjb25zdHJ1Y3RvcihnZXRDbGllbnQ6ICgpPT5LZWRCYWNrZW5kQ2xpZW50LCBnZXRDdXJyZW50VXNlcjogKCk9PlVzZXIpIHtcbiAgICBjb25zdCBjdXJyZW50VXNlciA9IGdldEN1cnJlbnRVc2VyKCk7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICBjb25zdCBbdGVybVN0YXJ0LCB0ZXJtRW5kXSA9IGdldFRlcm1TdGFyRW5kRGF0ZShub3csIG5vdy5nZXRNb250aCgpID49IDcpO1xuICAgIHN1cGVyKHtcbiAgICAgIGdldENsaWVudCxcbiAgICAgIG9wdGltaXN0aWM6IHRydWUsXG4gICAgICB0YWJsZTogXCJ3ZWVrcGxhbnNcIixcbiAgICAgIHVzZXI6IGN1cnJlbnRVc2VyID8gY3VycmVudFVzZXIubWFpbCA6IFwiXCIsXG4gICAgICBnZXRRdWVyeU9wdGlvbnM6IGFzeW5jICgpPT57XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZnJvbTogdGVybVN0YXJ0LnN0YXJ0T2YoJ3dlZWsnKS5hZGQoLTIsICdkYXlzJykudG9EYXRlKCkudmFsdWVPZigpLFxuICAgICAgICAgIHRvOiB0ZXJtRW5kLnN0YXJ0T2YoJ3dlZWsnKS5hZGQoNSwgJ2RheXMnKS50b0RhdGUoKS52YWx1ZU9mKCksXG4gICAgICAgICAgcm9sZTogXCJVU0VSXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0ZXJtUGxhbm5lclJlcG8gPSBuZXcgS0dUZXJtUGxhbm5lclJlcG8oKCk9PmVudi5rZWRCYWNrZW5kQ2xpZW50LCgpPT5lbnYuY3VycmVudFVzZXIpO1xuZW52LmtnVGVybVBsYW5uZXJSZXBvID0gdGVybVBsYW5uZXJSZXBvO1xuIiwiaW1wb3J0IGVudiwgeyBFbnYgfSBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmltcG9ydCB7IEJlYXJlclRva2VuSW5mbywgS2VkQmFja2VuZENsaWVudCwgSHR0cEVycm9yIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgRWRzQ2xpZW50IH0gZnJvbSAnLi4vYXBpcy9lZHNjbGllbnQnO1xuaW1wb3J0IHsgaXNvbW9ycGhpYywgS2VkQmFja2VuZENsaWVudFdlYiB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJSZXBvIH0gZnJvbSAnLi4vcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwbyc7XG5pbXBvcnQgeyBLR1Rlcm1QbGFubmVyUmVwbyB9IGZyb20gJy4uL3JlcG9zL2tnLXRlcm1wbGFubmVyLXJlcG8nO1xuaW1wb3J0IHsgVXNlclRhc2tzUmVwbyB9IGZyb20gJy4uL3JlcG9zL3VzZXItdGFza3MtcmVwbyc7XG5pbXBvcnQgeyBSZXN0Q2xpZW50IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVxdWVzdFR1dG9yZWRUb2tlbnModXNlckVtYWlsOiBzdHJpbmcsIGRpc3BsYXlOYW1lOiBzdHJpbmcpOiBQcm9taXNlPEVudj4ge1xuICAvL2xldCBiZWFyZXJQcm9taXNlOiBQcm9taXNlPEJlYXJlclRva2VuSW5mbz4gfCBudWxsID0gbnVsbDtcbiAgLy9sZXQgZ29vZ2xlQmVhcmVyUHJvbWlzZTogUHJvbWlzZTxCZWFyZXJUb2tlbkluZm8+IHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3QgY3VycmVudFVzZXI6IFVzZXIgPSB7XG4gICAgbWFpbDogdXNlckVtYWlsLFxuICAgIGRpc3BsYXlOYW1lLFxuICAgIHJvbGVzOiBbXCJVU0VSXCJdLFxuICAgIHNjaG9vbDogZW52LmN1cnJlbnRVc2VyLnNjaG9vbCxcbiAgICB0dXRvckZvcjogdXNlckVtYWlsXG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlQmVhcmVyUHJvdmlkZXIgKGNsaWVudDogUmVzdENsaWVudCwgdG9rZW5Vcmw6IHN0cmluZywgcXVlcnk/KSB7XG4gICAgbGV0IGJlYXJlclByb21pc2U6IFByb21pc2U8QmVhcmVyVG9rZW5JbmZvPiB8IG51bGwgPSBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldEJlYXJlcigpOiBQcm9taXNlPEJlYXJlclRva2VuSW5mbz4ge1xuICAgICAgICByZXR1cm4gYmVhcmVyUHJvbWlzZSB8fCB0aGlzLnJlZnJlc2hCZWFyZXIoKTtcbiAgICAgIH0sXG4gICAgICByZWZyZXNoQmVhcmVyKCk6IFByb21pc2U8QmVhcmVyVG9rZW5JbmZvPiB7XG4gICAgICAgIHJldHVybiAoYmVhcmVyUHJvbWlzZSA9IHJldHJpZXZlVG9rZW4oKSk7XG4gICAgICB9LFxuICAgIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIHJldHJpZXZlVG9rZW4oKTogUHJvbWlzZTxCZWFyZXJUb2tlbkluZm8+IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5nZXQodG9rZW5VcmwsIHF1ZXJ5KTtcbiAgICAgIGlmIChyZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgcmV0dXJuIChhd2FpdCByZXMuanNvbigpKSBhcyBCZWFyZXJUb2tlbkluZm87XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsXG4gICAgICAgIFwiQ291bGQgbm90IHJldHJpZXZlIHR1dG9yIHRva2VuIGZvciBcIiArXG4gICAgICAgIHVzZXJFbWFpbCArXG4gICAgICAgIFwiLiBFcnJvciBNZXNzYWdlOiBcIiArIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRoZSBtYWluIGJlYXJlcnByb3ZpZGVyIHdpbGwgcmVxdWVzdCBhIHR1dG9yLXRva2VuIGJhc2VkIG9uIHRoZSB1c2VyJ3Mgbm9ybWFsIHRva2VuLlxuICBjb25zdCBiZWFyZXJQcm92aWRlciA9IGNyZWF0ZUJlYXJlclByb3ZpZGVyKGVudi5rZWRCYWNrZW5kQ2xpZW50Lmh0dHAsIFwidHV0b3IvdG9rZW5cIiwge3VzZXJFbWFpbH0pO1xuICBjb25zdCB0dXRvcmVkS2VkQmFja2VuZENsaWVudCA9IG5ldyBLZWRCYWNrZW5kQ2xpZW50KGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBjZmcuS0VEX0FQSV9VUkwpO1xuICAvLyBOb3csIGNyZWF0ZSBiZWFyZXIgcHJvdmlkZXJzIGZvciBFRFMgYW5kIEdvb2dsZSB0aGF0IGdlbmVyYXRlcyB0b2tlbiBieSBjb252ZXJ0aW5nIHRoZSB0dXRvci10b2tlblxuICAvLyB0byBhbiBFRFMtIG9yIEdvb2dsZSB0b2tlbjpcbiAgLy9jb25zdCBlZHNCZWFyZXJQcm92aWRlciA9IGNyZWF0ZUJlYXJlclByb3ZpZGVyKHR1dG9yZWRLZWRCYWNrZW5kQ2xpZW50Lmh0dHAsIFwidHV0b3IvY29udmVydC10b2tlbi9lZHNcIik7XG4gIGNvbnN0IGdvb2dsZVRva2VuUHJvdmlkZXIgPSBjcmVhdGVCZWFyZXJQcm92aWRlcih0dXRvcmVkS2VkQmFja2VuZENsaWVudC5odHRwLCBcInR1dG9yL2NvbnZlcnQtdG9rZW4vZ29vZ2xlXCIpO1xuXG4gIGNvbnN0IGVkc0NsaWVudCA9IG5ldyBFZHNDbGllbnQoaXNvbW9ycGhpYywgY2ZnLkVEU19BUElfVVJMLCBiZWFyZXJQcm92aWRlciwgKCk9PnVzZXJFbWFpbCk7XG4gIFxuICBjb25zdCB0dXRvckVudjogRW52ID0ge1xuICAgIGN1cnJlbnRVc2VyLFxuICAgIGJlYXJlclByb3ZpZGVyLFxuICAgIGVkc0NsaWVudCxcbiAgICBnb29nbGVUb2tlblByb3ZpZGVyLFxuICAgIGtlZEJhY2tlbmRDbGllbnQ6IHR1dG9yZWRLZWRCYWNrZW5kQ2xpZW50LFxuICAgIHR1dG9yZWQ6IHRydWVcbiAgfTtcbiAgdHV0b3JFbnYua3NUZXJtUGxhbm5lclJlcG8gPSBuZXcgS1NUZXJtUGxhbm5lclJlcG8oKCk9PnR1dG9yZWRLZWRCYWNrZW5kQ2xpZW50LCAoKT0+Y3VycmVudFVzZXIpO1xuICB0dXRvckVudi5rZ1Rlcm1QbGFubmVyUmVwbyA9IG5ldyBLR1Rlcm1QbGFubmVyUmVwbygoKT0+dHV0b3JlZEtlZEJhY2tlbmRDbGllbnQsICgpPT5jdXJyZW50VXNlcik7XG4gIHR1dG9yRW52LnVzZXJUYXNrc1JlcG8gPSBuZXcgVXNlclRhc2tzUmVwbygoKT0+dHV0b3JlZEtlZEJhY2tlbmRDbGllbnQsICgpPT5jdXJyZW50VXNlcik7XG5cbiAgYXdhaXQgYmVhcmVyUHJvdmlkZXIuZ2V0QmVhcmVyKCkuY2F0Y2goZXJyb3IgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICB9KTtcblxuICByZXR1cm4gdHV0b3JFbnY7ICBcbn1cbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBFRFNTdHVkZW50IH0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2Vkcyc7XG5pbXBvcnQgeyBjb21wYXJlUHJvcHMgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XG5pbXBvcnQgdHV0b3JFbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQudHV0b3JFbnYnO1xuaW1wb3J0IHtyZXF1ZXN0VHV0b3JlZFRva2Vuc30gZnJvbSAnLi4vLi4vdXRpbHMvcmVxdWVzdC10dXRvcmVkLXRva2Vucyc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuXG5pbnRlcmZhY2UgU3R1ZGVudEluZm8ge1xuICBtYWlsOiBzdHJpbmc7XG4gIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBQcm9wcyB7XG5cbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBzdHVkZW50czogU3R1ZGVudEluZm9bXTtcbn1cblxuZXhwb3J0IGNsYXNzIFR1dG9yc1NlbGVjdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcblxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICBzdHVkZW50czogW11cbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmxvYWQoKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGVkc1N0dWRlbnRzID0gYXdhaXQgZW52LmVkc0NsaWVudC5nZXRUZWFjaGVyVHV0b3JTdHVkZW50cygpO1xuICAgICAgZWRzU3R1ZGVudHMuc29ydChjb21wYXJlUHJvcHMoW1wibGFzdE5hbWVcIiwgXCJmaXJzdE5hbWVcIl0pKTtcbiAgICAgIGNvbnN0IHN0dWRlbnRzID0gZWRzU3R1ZGVudHMubGVuZ3RoID4gMCA/XG4gICAgICAgIGVkc1N0dWRlbnRzLm1hcCgoe2VtYWlsLCBmaXJzdE5hbWUsIGxhc3ROYW1lfSk9Pih7XG4gICAgICAgICAgbWFpbDogZW1haWwsXG4gICAgICAgICAgZGlzcGxheU5hbWU6IGAke2ZpcnN0TmFtZX0gJHtsYXN0TmFtZX1gXG4gICAgICAgIH0pKSA6XG4gICAgICAgIFtlbnYuY3VycmVudFVzZXJdO1xuICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7c3R1ZGVudHN9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBsaXN0IHR1dG9yIHN0dWRlbnRzXCIsIGVycm9yKTtcbiAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGUoe3N0dWRlbnRzOiBbZW52LmN1cnJlbnRVc2VyXX0pXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2lzTG9hZGluZzogZmFsc2V9KTtcbiAgICB9XG4gIH1cblxuICBvblNlbGVjdFVzZXIoZW1haWw6IHN0cmluZykge1xuICAgIGNvbnN0IGNob29zZW5TdHVkZW50ID0gdGhpcy5zdGF0ZS5zdHVkZW50cy5maWx0ZXIocyA9PiBzLm1haWwgPT09IGVtYWlsKVswXTtcbiAgICBjb25zdCB1c2VyOiBVc2VyID0ge1xuICAgICAgLi4uY2hvb3NlblN0dWRlbnQsXG4gICAgICByb2xlczogW1wiVVNFUlwiXSxcblxuICAgIH1cbiAgICBcbiAgICB0dXRvckVudi5zZXROZXdFbnYodXNlciwgKCk9PnJlcXVlc3RUdXRvcmVkVG9rZW5zKGVtYWlsLCBlbWFpbCkpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2lzTG9hZGluZywgc3R1ZGVudHN9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoaXNMb2FkaW5nKSByZXR1cm4gPFNwaW5uZXIgLz47XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJ0dXRvcnMtc2VsZWN0XCI+XG4gICAgICA8c2VsZWN0IG9uQ2hhbmdlPXtldiA9PiBldi50YXJnZXQudmFsdWUgJiYgdGhpcy5vblNlbGVjdFVzZXIoZXYudGFyZ2V0LnZhbHVlKX0+XG4gICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj5Ww6RsaiBlbGV2PC9vcHRpb24+XG4gICAgICAgIHtzdHVkZW50cy5tYXAoc3R1ZGVudCA9PlxuICAgICAgICAgIDxvcHRpb24ga2V5PXtzdHVkZW50Lm1haWx9IHZhbHVlPXtzdHVkZW50Lm1haWx9PlxuICAgICAgICAgICAge3N0dWRlbnQuZGlzcGxheU5hbWV9ICh7c3R1ZGVudC5tYWlsfSlcbiAgICAgICAgICA8L29wdGlvbj4pfVxuICAgICAgPC9zZWxlY3Q+XG4gICAgPC9kaXY+O1xuICB9XG59XG4iLCJpbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XG5cbmNmZy5LRURfTE9DQUxFID0gJ3N2JztcbmNmZy5LRURfU0NIT09MX0xPQ0FMRSA9ICdzdic7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgRURTQXNzZXNzbWVudCB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBsaW1pdD86IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgbG9hZGluZzogYm9vbGVhbixcbiAgYXNzZXNzbWVudHM6IEVEU0Fzc2Vzc21lbnRbXSxcbiAgZXJyb3I6IHN0cmluZyB8IG51bGxcbn1cblxuZXhwb3J0IGNsYXNzIExhdGVzdEFzc2Vzc21lbnRzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFzc2Vzc21lbnRzOiBbXSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgbG9hZGluZzogZmFsc2VcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5sb2FkKCk7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe2xvYWRpbmc6IHRydWV9KTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYXNzZXNzbWVudHMgPSBhd2FpdCBlbnYuZWRzQ2xpZW50LmdldExhdGVzdEFzc2Vzc21lbnRzKHRoaXMucHJvcHMubGltaXQpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7YXNzZXNzbWVudHN9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXJyb3J9KTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7bG9hZGluZzogZmFsc2V9KTsgICAgXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgaGFzR3JhZGVzID0gdGhpcy5zdGF0ZS5hc3Nlc3NtZW50cy5zb21lKGEgPT4gISFhLmdyYWRlTmFtZSk7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkXCI+XG4gICAgICA8aDQ+e0xgU2VuYXN0ZSBiZWTDtm1uaW5nYXJgfTwvaDQ+XG4gICAgICA8aHIgLz5cbiAgICAgIDx1bCBjbGFzc05hbWU9XCJsYXRlc3QtYXNzZXNtZW50cyB6ZWJyYVwiPlxuICAgICAge3RoaXMuc3RhdGUuYXNzZXNzbWVudHMubWFwKChhLCBpKSA9PiBcbiAgICAgICAgICAgIDxsaSBrZXk9e2l9PlxuICAgICAgICAgICAgICB7KGhhc0dyYWRlcyAmJiAgYS5ncmFkZU5hbWUgIT0gXCJcIikgJiYgPHNwYW4gY2xhc3NOYW1lPVwiZ3JhZGUgcGlsbCBwdWxsLXJpZ2h0XCI+e2EuZ3JhZGVOYW1lfTwvc3Bhbj59XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImRhdGUgcGlsbCBwdWxsLWxlZnRcIj57YS5wdWJsaXNoRGF0ZVRpbWUuc3Vic3RyKDAsIDEwKX08L3NwYW4+XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhLmNvdXJzZU5hbWUgPT0gYS5jb3Vyc2VVbml0TmFtZSA/IFxuICAgICAgICAgICAgICAgICAgPGg1PjxzdHJvbmc+e2EuY291cnNlTmFtZX08L3N0cm9uZz48L2g1PiA6IDxoNT48c3Ryb25nPnthLmNvdXJzZU5hbWV9PC9zdHJvbmc+IC8gPGVtPnthLmNvdXJzZVVuaXROYW1lfTwvZW0+PC9oNT5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPHA+e2EudGV4dH08L3A+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICl9XG4gICAgICA8L3VsPlxuICAgIDwvZGl2PjtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtLR1Rlcm1QbGFubmVyfSBmcm9tICcuL2tnLXRlcm1wbGFubmVyJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcblxuZXhwb3J0IGZ1bmN0aW9uIEtHVGVybVBsYW5uZXJTZWxmICgpIHtcbiAgcmV0dXJuIDxLR1Rlcm1QbGFubmVyIGVudj17ZW52fSB0dXRvcmVkPXtmYWxzZX0gLz47XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0tTVGVybVBsYW5uZXJ9IGZyb20gJy4vdGVybXBsYW5uZXInO1xuaW1wb3J0IHsgVHV0b3JhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3R1dG9yYWJsZS1jb21wb25lbnQnO1xuaW1wb3J0IHsgSW5qZWN0ZWRJbnRsUHJvcHMgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IExhbmd1YWdlQ29udGV4dCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBJbmplY3RlZEludGxQcm9wc3tcbiAgdmlld0NvdXJzZVVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gS1NUZXJtUGxhbm5lclR1dG9yZWQgKHByb3BzOiBQcm9wcykge1xuICBjb25zdCB7aW50bH0gPSBwcm9wcztcbiAgcmV0dXJuIDxMYW5ndWFnZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3tpbnRsfX0+XG4gIDxUdXRvcmFibGVDb21wb25lbnRcbiAgICB0dXRvcmVkPXt0cnVlfVxuICAgIGNyZWF0ZUNvbXBvbmVudD17ZW52ID0+XG4gICAgICA8S1NUZXJtUGxhbm5lclxuICAgICAgICBrZXk9e2Vudi5jdXJyZW50VXNlci5tYWlsfVxuICAgICAgICBlbnY9e2Vudn1cbiAgICAgICAgdHV0b3JlZD17dHJ1ZX0gXG4gICAgICAgIGluaXRpYWxEYXRlPXtuZXcgRGF0ZSgpfS8+XG4gICAgfVxuICAvPjwvTGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyPjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvdXJzZSwgVXNlckhpZGRlbkNvdXJzZSwgU2Nob29sIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgaGlkZGVuQ291cnNlc1JlcG8sIENvdXJzZVdpdGhIaWRkZW5TdGF0ZSB9IGZyb20gJy4uLy4uL3JlcG9zL2hpZGRlbi1jb3Vyc2VzLXJlcG8nO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgZmxhdHRlbiwgY29tcGFyZVByb3AsIGFycmF5VG9NYXAsIGFycmF5VG9Mb29rdXAgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSB9IGZyb20gJy4uLy4uL2FjY2Vzcy1jb250cm9sJztcblxuZXhwb3J0IGludGVyZmFjZSBQcm9wcyB7XG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0ZSB7XG4gIGNvdXJzZXM6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZVtdO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIGVycm9yPzogRXJyb3I7XG59XG5cbmV4cG9ydCBjbGFzcyBNeUNvdXJzZXMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY291cnNlczogW10sXG4gICAgICBpc0xvYWRpbmc6IHRydWVcbiAgICB9XG4gICAgdGhpcy51cGRhdGVIaWRkZW5Db3Vyc2VzU3RhdGUgPSB0aGlzLnVwZGF0ZUhpZGRlbkNvdXJzZXNTdGF0ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaGlkZGVuQ291cnNlc1JlcG8uc3Vic2NyaWJlKHRoaXMudXBkYXRlSGlkZGVuQ291cnNlc1N0YXRlLCB7ZnVsbENvdXJzZTogZmFsc2V9KTtcbiAgfVxuXG4gIHVwZGF0ZUhpZGRlbkNvdXJzZXNTdGF0ZShjb3Vyc2VzOiBDb3Vyc2VXaXRoSGlkZGVuU3RhdGVbXSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe2NvdXJzZXMsIGlzTG9hZGluZzogZmFsc2V9KTtcbiAgfVxuXG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaGlkZGVuQ291cnNlc1JlcG8udW5zdWJzY3JpYmUodGhpcy51cGRhdGVIaWRkZW5Db3Vyc2VzU3RhdGUpO1xuICB9XG5cbiAgZ2V0Q291cnNlVXJsKGNvdXJzZUlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkodGhpcy5wcm9wcy52aWV3Q291cnNlVXJsLCB7IGNvdXJzZUlkIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHt2aWV3Q291cnNlVXJsfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2lzTG9hZGluZywgZXJyb3IsIGNvdXJzZXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgdmlzaWJsZUNvdXJzZXMgPSB0aGlzLnN0YXRlLmNvdXJzZXMuZmlsdGVyKGMgPT4gYy52aXNpYmxlKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7aXNMb2FkaW5nID8gKFxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJsdmwyIGhlYWRlclwiPlxuICAgICAgICAgICAgPGE+TGFkZGFyLi4uPC9hPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICkgOiBlcnJvciA/IChcbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibHYxMlwiPlxuICAgICAgICAgICAgPGE+S3VuZGUgaW50ZSBsYWRkYSBrdXJzZXIuPC9hPlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICApIDogKFxuICAgICAgICAgIHZpc2libGVDb3Vyc2VzLm1hcCgoe25hbWUsIGlkfSkgPT4gKFxuICAgICAgICAgICAgPGxpIGtleT17aWR9IGNsYXNzTmFtZT1cImx2bDJcIj5cbiAgICAgICAgICAgICAgPGEgaHJlZj17dGhpcy5nZXRDb3Vyc2VVcmwoaWQpfT57bmFtZX08L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIClcbiAgICAgICAgKSlcbiAgICAgICAgfVxuXHRcdFx0PC8+XG4gICAgKTtcbiAgfVxufSIsImltcG9ydCB7IEtlZFJlcG8gfSBmcm9tICcuL2tlZC1yZXBvJztcbmltcG9ydCB7IFdlZWtOb3RlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCwgRG9jdW1lbnRBY2Nlc3MgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBnZXRBZGp1c3RlZFdlZWssIEtFRFdlZWsgfSBmcm9tICcuLi91dGlscy93ZWVrdXRpbCc7XG5cbmV4cG9ydCBsZXQgd2Vla05vdGVzUmVwbyA9IGVudi53ZWVrTm90ZXNSZXBvIGFzIFdlZWtOb3Rlc1JlcG87XG5cbmV4cG9ydCBjbGFzcyBXZWVrTm90ZXNSZXBvIGV4dGVuZHMgS2VkUmVwbzxXZWVrTm90ZT4ge1xuICAvKnByaXZhdGUgY3VycmVudFdlZWs6IG1vbWVudC5Nb21lbnQ7XG5cbiAgZ2V0Q3VycmVudFdlZWsoKSB7XG4gICAgaWYgKCF0aGlzLmN1cnJlbnRXZWVrKSB7XG4gICAgICBjb25zdCB7d2Vla01pbGxpcywgZXhwaXJlfSA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcIndlZWstbm90ZXMtd2Vla1wiKSB8fCBcInt9XCIpIGFzIHt3ZWVrTWlsbGlzPzogbnVtYmVyLCBleHBpcmU/OiBudW1iZXJ9O1xuICAgICAgdGhpcy5jdXJyZW50V2VlayA9IHdlZWtNaWxsaXMgJiYgZXhwaXJlICYmIGV4cGlyZSA+IERhdGUubm93KCkgP1xuICAgICAgICBtb21lbnQobmV3IERhdGUod2Vla01pbGxpcykpIDpcbiAgICAgICAgbW9tZW50KCkuc3RhcnRPZignd2VlaycpLmFkZCgxLCAnZGF5cycpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jdXJyZW50V2Vlay5jbG9uZSgpO1xuICB9XG5cbiAgc2V0Q3VycmVudFdlZWsobmV3V2Vla01vbWVudDogbW9tZW50Lk1vbWVudCkge1xuICAgIHRoaXMuY3VycmVudFdlZWsgPSBuZXdXZWVrTW9tZW50O1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJ3ZWVrLW5vdGVzLXdlZWtcIiwgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgd2Vla01pbGxpczogbmV3V2Vla01vbWVudC50b0RhdGUoKS5nZXRUaW1lKCksXG4gICAgICBleHBpcmU6IG1vbWVudCgpLmFkZCg4LCBcImhvdXJzXCIpLnRvRGF0ZSgpLmdldFRpbWUoKVxuICAgIH0pKVxuICB9Ki9cbiAgXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKHtcbiAgICAgIGdldENsaWVudCgpIHsgcmV0dXJuIGVudi5rZWRCYWNrZW5kQ2xpZW50OyB9LFxuICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgICB0YWJsZTogXCJub3Rlc1wiLCAvLyBcIndlZWstbm90ZXNcIlxuICAgICAgdXNlcjogZW52LmN1cnJlbnRVc2VyID8gZW52LmN1cnJlbnRVc2VyLm1haWwgOiBcIlwiLFxuICAgICAgZ2V0UXVlcnlPcHRpb25zOiBhc3luYyAoKSA9PiB7XG4gICAgICAgIC8vY29uc3QgdXNlckVtYWlsID0gZW52LmN1cnJlbnRVc2VyID8gZW52LmN1cnJlbnRVc2VyLm1haWwgOiBcIlwiO1xuICAgICAgICAvL2NvbnN0IGN1cnJlbnRXZWVrID0gdGhpcy5nZXRDdXJyZW50V2VlaygpO1xuICAgICAgICAvL2NvbnN0IHdlZWtOdW1iZXIgPSBjdXJyZW50V2Vlay53ZWVrKCk7XG4gICAgICAgIC8vY29uc3Qga2VkV2VlayA9IEtFRFdlZWsoY3VycmVudFdlZWsueWVhcigpLCB3ZWVrTnVtYmVyKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAvL2Zyb206IGtlZFdlZWsubm90QmVmb3JlLFxuICAgICAgICAgIC8vdG86IGtlZFdlZWsubm90QWZ0ZXIsXG4gICAgICAgICAgcm9sZTogXCJVU0VSXCJcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvL3RoaXMuY3VycmVudFdlZWsgPSBudWxsO1xuICB9XG5cbiAgLyphc3luYyBjaGFuZ2VXZWVrKHdlZWtzVG9BZGQ6IG51bWJlcikge1xuICAgIHRoaXMuc2V0Q3VycmVudFdlZWsodGhpcy5nZXRDdXJyZW50V2VlaygpLmFkZCh3ZWVrc1RvQWRkLCBcIndlZWtzXCIpKTtcbiAgICBhd2FpdCB0aGlzLm1lbS5yZWZyZXNoRnJvbVNlcnZlcigpO1xuICB9Ki9cbn1cblxuaWYgKCF3ZWVrTm90ZXNSZXBvKSB7XG4gIHdlZWtOb3Rlc1JlcG8gPSBlbnYud2Vla05vdGVzUmVwbyA9IG5ldyBXZWVrTm90ZXNSZXBvKCk7XG59XG4iLCJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpZlRha2VzVGltZShtczogbnVtYmVyLCB0YXNrOiAoKT0+UHJvbWlzZTxhbnk+LCBhY3Rpb246ICgpPT5hbnkpIHtcbiAgbGV0IHRpbWVvdXRSZWFjaGVkID0gZmFsc2U7XG4gIGNvbnN0IHRoID0gc2V0VGltZW91dCgoKT0+e1xuICAgIHRpbWVvdXRSZWFjaGVkID0gdHJ1ZTtcbiAgICBhY3Rpb24oKTtcbiAgfSwgbXMpO1xuICBjb25zdCBydiA9IGF3YWl0IHRhc2soKTtcbiAgaWYgKCF0aW1lb3V0UmVhY2hlZCkgY2xlYXJUaW1lb3V0KHRoKTtcbiAgcmV0dXJuIHJ2O1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHdlZWtOb3Rlc1JlcG8gfSBmcm9tICcuLi8uLi9yZXBvcy93ZWVrLW5vdGVzLXJlcG8nO1xuaW1wb3J0IHsgV2Vla05vdGUgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBQZW5kaW5nSm9iIH0gZnJvbSAnLi4vLi4vdXRpbHMvcGVuZGluZy1qb2InO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCwgRG9jdW1lbnRBY2Nlc3MgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBXeXNpd3lnIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcnO1xuaW1wb3J0IGFjdGlvbnNfc3dlZGlzaCBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLXN2JztcbmltcG9ydCBhY3Rpb25zX2VuIGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMnO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xuaW1wb3J0IHsgaWZUYWtlc1RpbWUgfSBmcm9tICcuLi8uLi91dGlscy9pZi10YWtlcy10aW1lJztcbmltcG9ydCB7IEluamVjdGVkSW50bCwgRm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgTGFuZ3VhZ2VDb250ZXh0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XG5cbmNvbnN0IE1BWF9OT1RFX0xFTkdUSCA9IDE2Mzg0O1xuXG5cbmludGVyZmFjZSBQcm9wcyB7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHdlZWtOb3RlPzogV2Vla05vdGU7XG4gIG5vdGVzOiBzdHJpbmc7XG4gIC8vd2VlazogbnVtYmVyO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIHNob3dMb2FkaW5nUHJvZ3Jlc3M6IGJvb2xlYW47XG4gIHNob3dTYXZpbmdQcm9ncmVzczogYm9vbGVhbjtcbiAgZXZlckVkaXRlZDogYm9vbGVhbjtcbiAgZXJyb3I/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBXZWVrTm90ZWJvb2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIGF1dG9TYXZlcjogUGVuZGluZ0pvYjtcbiAgdGltZW91dEhhbmRsZTogYW55O1xuICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25DaGFuZ2UgPSB0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hdXRvU2F2ZXIgPSBuZXcgUGVuZGluZ0pvYigoKT0+dGhpcy5zYXZlKCkpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICBzaG93TG9hZGluZ1Byb2dyZXNzOiBmYWxzZSxcbiAgICAgIHNob3dTYXZpbmdQcm9ncmVzczogZmFsc2UsXG4gICAgICBldmVyRWRpdGVkOiBmYWxzZSxcbiAgICAgIG5vdGVzOiBcIlwiLFxuICAgICAgLy93ZWVrOiBtb21lbnQoKS53ZWVrKClcbiAgICB9XG4gIH1cbiAgXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc2hvd1Byb2dyZXNzSWZMb2FkaW5nVGFrZXNUaW1lKCk7XG4gICAgd2Vla05vdGVzUmVwby5tZW0uc3Vic2NyaWJlKHRoaXMub25DaGFuZ2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93UHJvZ3Jlc3NJZkxvYWRpbmdUYWtlc1RpbWUoKSB7XG4gICAgdGhpcy50aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dCgoKT0+dGhpcy5zdGF0ZS5pc0xvYWRpbmcgJiYgdGhpcy5zZXRTdGF0ZSh7c2hvd0xvYWRpbmdQcm9ncmVzczogdHJ1ZX0pLCAzMDApOyAgICBcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdlZWtOb3Rlc1JlcG8ubWVtLnVuc3Vic2NyaWJlKHRoaXMub25DaGFuZ2UpO1xuICAgIHRoaXMuYXV0b1NhdmVyLnN0b3AoKTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SGFuZGxlKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgX3NhdmUoKSB7XG4gICAgZm9yIChsZXQgbWF4SXRlcmF0aW9ucz0zOyB0aGlzLmlzTm90ZXNFZGl0ZWQoKSAmJiBtYXhJdGVyYXRpb25zOyAtLW1heEl0ZXJhdGlvbnMpIHtcbiAgICAgIGF3YWl0IHdlZWtOb3Rlc1JlcG8udXBzZXJ0KHRoaXMuc3RhdGUud2Vla05vdGUsIHduID0+IHtcbiAgICAgICAgd24uY29udGVudCA9IHRoaXMuc3RhdGUubm90ZXM7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNhdmUoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnNob3dTYXZpbmdQcm9ncmVzcyAmJiAhdGhpcy5zdGF0ZS5pc0xvYWRpbmcgJiYgdGhpcy5pc05vdGVzRWRpdGVkKCkpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGUoe2Vycm9yOiB1bmRlZmluZWR9KTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGF3YWl0IGlmVGFrZXNUaW1lKDMwMCwgKCk9PnRoaXMuX3NhdmUoKSwgKCk9PnRoaXMuc2V0U3RhdGUoe3Nob3dTYXZpbmdQcm9ncmVzczogdHJ1ZX0pKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGUoe2Vycm9yOiB0aGlzLmNvbnRleHQuaW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcImNvbW1vbi5lcnJvclNhdmluZ0RhdGFcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiS3VuZGUgaW50ZSBzcGFyYS5cIn0pfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtzaG93U2F2aW5nUHJvZ3Jlc3M6IGZhbHNlfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaXNOb3Rlc0VkaXRlZCgpIHtcbiAgICBjb25zdCB7IHdlZWtOb3RlLCBub3RlcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gISF3ZWVrTm90ZSAmJiAobm90ZXMgIT09IHdlZWtOb3RlLmNvbnRlbnQpO1xuICB9ICBcblxuICAvL0lmIHRoZSBub3RlYm9vayBzaG91bGQgYmUgdXNlZCBpbiBtdWx0aXBsZSBtb2R1bGVzLCBtb3ZlIHRoaXMgZnVuY3Rpb25zIGludG8gYW4gdXRpbGl0eSBmaWxlXG4gIGdldFRyYW5zbGF0ZWRBY3Rpb25zKGludGw6IEluamVjdGVkSW50bCl7XG4gICAgLy9hY3Rpb25zIG1pZ2h0IGhhdmUgZGlmZmVyZW50IGljb25zIGZvciBlYWNoIGxhbmd1YWdlXG4gICAgLy93ZSBrZWVwIHRoZSBzYW1lIHN0cnVjdHVyZSBvZiB0aGUgYWN0aW9ucywgYnV0IHdlIHJlcGxhY2UgdGhlIHRleHRzIHdpdGggdGhlIG9uZXMgZnJvbSB0aGUgdHJhbnNsYXRlZCBmaWxlc1xuICAgIHZhciBsb2NhbGVBY3Rpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgaW50bC5sb2NhbGUgPT09IFwic3ZcIiA/IGFjdGlvbnNfc3dlZGlzaCA6IGFjdGlvbnNfZW4pO1xuICAgIE9iamVjdC5rZXlzKGxvY2FsZUFjdGlvbnMpLmZvckVhY2goZWxlbSA9PiB7XG4gICAgICBjb25zdCBjdXJyZW50VGl0bGUgPSBhY3Rpb25zX3N3ZWRpc2hbZWxlbV0udGl0bGU7XG4gICAgICBsb2NhbGVBY3Rpb25zW2VsZW1dLnRpdGxlID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDpgd3lzaXd5Zy4ke2VsZW19YCwgZGVmYXVsdE1lc3NhZ2U6IGN1cnJlbnRUaXRsZX0pO1xuICAgICAgXG4gICAgICAvL2JlY2F1c2UgdGhlIGltYWdlIGFjdGlvbiBuZWVkcyBhIGN1c3RvbSB0cmFuc2xhdGlvbiwgd2UgdHJlYXQgdGhpcyBzZXBhcmF0ZWx5XG4gICAgICBpZihlbGVtID09PSBcImltYWdlXCIpe1xuICAgICAgICBsb2NhbGVBY3Rpb25zW2VsZW1dLnByb21wdE1zZyA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJ3eXNpd3lnLmltYWdlUHJvbXB0TXNnXCIsIGRlZmF1bHRNZXNzYWdlOiBhY3Rpb25zX3N3ZWRpc2hbZWxlbV0ucHJvbXB0TXNnfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGxvY2FsZUFjdGlvbnM7XG4gIH1cblxuICBvbkNoYW5nZSh3ZWVrTm90ZXM6IFdlZWtOb3RlW10pIHtcbiAgICBjb25zdCB3ZWVrTm90ZSA9IHdlZWtOb3Rlcy5sZW5ndGggPiAwID9cbiAgICAgIHdlZWtOb3Rlc1t3ZWVrTm90ZXMubGVuZ3RoIC0gMV0gOlxuICAgICAge1xuICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICBkYXRlVGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgLy9kYXRlVGltZTogd2Vla05vdGVzUmVwby5nZXRDdXJyZW50V2VlaygpLnRvRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgY29udGVudDogXCJcIixcbiAgICAgICAgYWNsOiBbXG4gICAgICAgICAgLy8gRGVmYXVsdCBBQ0w6IExldCB1c2VyIHNlbGYgaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGlzIGl0ZW06XG4gICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwiZW1haWxcIiwgZW52LmN1cnJlbnRVc2VyLm1haWwsIFwiU1wiKVxuICAgICAgICBdLm1hcChhYyA9PiBhYy50b1N0cmluZygpKVxuICAgICAgfTtcbiAgICBcbiAgICBjb25zdCBuZXdTdGF0ZTogUGFydGlhbDxTdGF0ZT4gPSB7XG4gICAgICB3ZWVrTm90ZSxcbiAgICAgIC8vd2Vlazogd2Vla05vdGVzUmVwby5nZXRDdXJyZW50V2VlaygpLndlZWsoKSxcbiAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICBzaG93TG9hZGluZ1Byb2dyZXNzOiBmYWxzZVxuICAgIH07XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUud2Vla05vdGUgfHwgdGhpcy5zdGF0ZS53ZWVrTm90ZS5pZCAhPT0gd2Vla05vdGUuaWQgfHwgd2Vla05vdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbmV3U3RhdGUubm90ZXMgPSB3ZWVrTm90ZS5jb250ZW50O1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlIGFzIFN0YXRlKTtcbiAgfVxuXG4gIC8qYXN5bmMgY2hhbmdlV2VlayhkaXJlY3Rpb246IG51bWJlcikge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgICBldmVyRWRpdGVkOiBmYWxzZSxcbiAgICAgICAgd2Vla05vdGU6IG51bGwsXG4gICAgICAgIGVycm9yOiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgICAgdGhpcy5zaG93UHJvZ3Jlc3NJZkxvYWRpbmdUYWtlc1RpbWUoKTtcbiAgICAgIGF3YWl0IHdlZWtOb3Rlc1JlcG8uY2hhbmdlV2VlayhkaXJlY3Rpb24pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7ZXJyb3I6IFwiS3VuZGUgaW50ZSBsYWRkYSBkYXRhXCJ9KTtcbiAgICB9IFxuICB9XG5cbiAgcHJldldlZWsoKSB7XG4gICAgdGhpcy5jaGFuZ2VXZWVrKC0xKTtcbiAgfVxuXG4gIG5leHRXZWVrKCkge1xuICAgIHRoaXMuY2hhbmdlV2VlaygxKTtcbiAgfSovXG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtub3Rlcywgc2hvd0xvYWRpbmdQcm9ncmVzcywgaXNMb2FkaW5nLCBzaG93U2F2aW5nUHJvZ3Jlc3MsIGVycm9yLCBldmVyRWRpdGVkfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIHsvKjxkaXYgY2xhc3NOYW1lPXtga2VkX2JveGVkIGtlZE5vdGVwYWQke3dlZWtOdW1iZXIgPT09IGN1cnJlbnRXZWVrID8gXCIgY3VycmVudFdlZWtcIiA6IFwiXCJ9YH0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHdlZWtTZWxlY3RgfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxuICAgICAgICAgICAgICAgIDxwPntMYFZlY2thICR7d2Vla051bWJlcn1gfTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnByZXZXZWVrKCl9PlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1sZWZ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpID0+IHRoaXMubmV4dFdlZWsoKX0+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLXJpZ2h0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICovXG4gICAgICAgIH1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2BrZWRfYm94ZWQga2VkTm90ZXBhZGB9PlxuICAgICAgICAgIDxoMz48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtOb3RlYm9vay50aXRsZVwiIGRlZmF1bHRNZXNzYWdlPVwiQW50ZWNrbmluZ2FyXCIvPjwvaDM+XG4gICAgICAgICAgPFd5c2l3eWdcbiAgICAgICAgICAgIGFjdGlvbnM9e1tcbiAgICAgICAgICAgICAgXCJib2xkXCIsXG4gICAgICAgICAgICAgIFwiaXRhbGljXCIsXG4gICAgICAgICAgICAgIFwidW5kZXJsaW5lXCIsXG4gICAgICAgICAgICAgIFwic3RyaWtldGhyb3VnaFwiLFxuICAgICAgICAgICAgICBcImhlYWRpbmcxXCIsXG4gICAgICAgICAgICAgIFwiaGVhZGluZzJcIixcbiAgICAgICAgICAgICAgXCJoZWFkaW5nM1wiLFxuICAgICAgICAgICAgICBcIm9saXN0XCIsXG4gICAgICAgICAgICAgIFwidWxpc3RcIixcbiAgICAgICAgICAgICAgXCJvdXRkZW50XCIsXG4gICAgICAgICAgICAgIFwiaW5kZW50XCIsXG4gICAgICAgICAgICAgIFwibGluZVwiXX1cbiAgICAgICAgICAgIGRlZmF1bHRBY3Rpb25zPXt0aGlzLmdldFRyYW5zbGF0ZWRBY3Rpb25zKGludGwpfVxuICAgICAgICAgICAgaHRtbD17aXNMb2FkaW5nID8gXCI8ZGl2PjwvZGl2PlwiIDogbm90ZXMuc3Vic3RyKDAsIE1BWF9OT1RFX0xFTkdUSCl9XG4gICAgICAgICAgICBvbkNoYW5nZT17IWlzTG9hZGluZyAmJiAoaHRtbCA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgIG5vdGVzOiBodG1sLnN1YnN0cigwLCBNQVhfTk9URV9MRU5HVEgpLFxuICAgICAgICAgICAgICAgIGV2ZXJFZGl0ZWQ6IHRydWVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHRoaXMuYXV0b1NhdmVyLnRyaWdnZXJDaGFuZ2UoNTAwKTtcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPGhyLz5cbiAgICAgICAgICB7ZXJyb3IgP1xuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXJyb3JcIj57ZXJyb3J9PC9wPiA6XG4gICAgICAgICAgICBzaG93TG9hZGluZ1Byb2dyZXNzID9cbiAgICAgICAgICAgICAgPHNwYW4+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24ubG9hZGluZ1wiIGRlZmF1bHRNZXNzYWdlPVwiTGFkZGFyLi4uXCIvPjxTcGlubmVyIC8+PC9zcGFuPiA6XG4gICAgICAgICAgICAgIHNob3dTYXZpbmdQcm9ncmVzcyA/IDw+XG4gICAgICAgICAgICAgICAgPHNwYW4+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2aW5nXCIgZGVmYXVsdE1lc3NhZ2U9XCJTcGFyYXIuLi5cIi8+ICZuYnNwOyA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPFNwaW5uZXIgLz5cbiAgICAgICAgICAgICAgPC8+IDpcbiAgICAgICAgICAgICAgdGhpcy5pc05vdGVzRWRpdGVkKCkgPyBcbiAgICAgICAgICAgICAgICA8PiZuYnNwOzwvPiA6XG4gICAgICAgICAgICAgICAgICBldmVyRWRpdGVkID9cbiAgICAgICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVkXCIgZGVmYXVsdE1lc3NhZ2U9XCJTcGFyYWRcIi8+IDpcbiAgICAgICAgICAgICAgICAgICAgPD4mbmJzcDs8Lz59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEluamVjdGVkSW50bFByb3BzIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcbmltcG9ydCB7IFdlZWtOb3RlYm9vayB9IGZyb20gJy4nO1xuXG5leHBvcnQgZnVuY3Rpb24gUm9vdFdlZWtOb3RlYm9vayAocHJvcHMgOiBJbmplY3RlZEludGxQcm9wcykge1xuICAgIGNvbnN0IHtpbnRsfSA9IHByb3BzO1xuICAgIHJldHVybiA8TGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7aW50bH19PlxuICAgICAgICAgICAgICA8V2Vla05vdGVib29rIC8+XG4gICAgICAgICAgIDwvTGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyPjtcbiAgfSIsImV4cG9ydCAqIGZyb20gJy4vd2Vlay1ub3RlYm9vayc7XG5leHBvcnQgKiBmcm9tICcuL3Jvb3Qtd2Vlay1ub3RlYm9vayc7XG4iLCJpbXBvcnQge0VEU1N0dWR5UGxhbn0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2Vkcyc7XG5pbXBvcnQgeyBFRFNQZXJpb2QgfSBmcm9tICcuLi8uLi9hcGlzL2Vkc2NsaWVudCc7XG5cbmV4cG9ydCBjbGFzcyBWaWV3TW9kZWwge1xuICAgIHN1YmplY3RzOiBBcnJheTx7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgYXRHb2FsOiBzdHJpbmc7XG4gICAgICAgIHN0R29hbDogc3RyaW5nO1xuICAgICAgICBmaW5hbEdvYWw6IHN0cmluZztcbiAgICAgICAgc3RyYXRlZ2llczogc3RyaW5nO1xuICAgIH0+O1xuXG4gICAgY29uc3RydWN0b3IgKHN0dWR5UGxhbnM6IEVEU1N0dWR5UGxhbltdKSB7XG4gICAgICAgIHRoaXMuc3ViamVjdHMgPSBzdHVkeVBsYW5zLm1hcChzcCA9PiB7XG4gICAgICAgICAgICBjb25zdCBwZXJpb2RHb2FscyA9IHNwLnBlcmlvZEdvYWxzXG4gICAgICAgICAgICAgICAgLm1hcChnID0+ICh7cGVyaW9kOiBuZXcgRURTUGVyaW9kKGcucGVyaW9kTmFtZSksIGdvYWw6IGcuZ3JhZGVOYW1lfSkpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBzcC5jb3Vyc2VVbml0TmFtZSxcbiAgICAgICAgICAgICAgICBhdEdvYWw6IHBlcmlvZEdvYWxzLmZpbHRlciAoKHtwZXJpb2R9KT0+IHBlcmlvZC50ZXJtID09PSAnQVQnKS5tYXAoKHtnb2FsfSkgPT4gZ29hbClbMF0sXG4gICAgICAgICAgICAgICAgc3RHb2FsOiBwZXJpb2RHb2Fscy5maWx0ZXIgKCh7cGVyaW9kfSk9PiBwZXJpb2QudGVybSA9PT0gJ1NUJykubWFwKCh7Z29hbH0pID0+IGdvYWwpWzBdLFxuICAgICAgICAgICAgICAgIGZpbmFsR29hbDogc3AuZmluYWxHb2FsR3JhZGUsXG4gICAgICAgICAgICAgICAgc3RyYXRlZ2llczogc3Auc3RyYXRlZ3lUZXh0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eSB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxudHlwZSBBYmlsaXR5Q2VsbCA9IHsgdHlwZTogJ2FiaWxpdHknLCBuYW1lOiBzdHJpbmcgfTtcbnR5cGUgQ2FwYWJDZWxsID0geyB0eXBlOiAnY2FwYWJpbGl0eScsIG5hbWU6IHN0cmluZyB9O1xudHlwZSBUZXJtQ2VsbCA9IHsgdHlwZTogJ3Rlcm0nLCBzZWxlY3RlZDogYm9vbGVhbiB9O1xudHlwZSBDZWxsID0gQWJpbGl0eUNlbGwgfCBDYXBhYkNlbGwgfCBUZXJtQ2VsbDtcblxuZXhwb3J0IGNsYXNzIEZ1dHVyZUFiaWxpdGllc1ZpZXdNb2RlbCB7XG4gIGNvbHVtbkhlYWRlcnM6IHtuYW1lOiBzdHJpbmcsIHR5cGU6IHN0cmluZ31bXTtcbiAgdnRIdHM6IHN0cmluZ1tdO1xuICBjYXBhYlJvd3M6IENlbGxbXVtdO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IEVEU1N0dWRlbnRGdXR1cmVBYmlsaXR5W10pIHtcbiAgICAvLyBXaWxsIGJ1aWxkIHRoZSB0b3RhbCB5ZWFyc1xuICAgIGNvbnN0IGZvcm1OYW1lczoge1tuYW1lOiBzdHJpbmddOiB0cnVlfSA9IHt9O1xuICAgIGRhdGEuZm9yRWFjaChhID0+IGEuY2FwYWJpbGl0aWVzLmZvckVhY2goYyA9PiBmb3JtTmFtZXNbYy5mb3JtTmFtZV0gPSB0cnVlKSk7XG4gICAgY29uc3QgeWVhcnMgPSBPYmplY3Qua2V5cyhmb3JtTmFtZXMpO1xuICAgIFxuICAgIC8vIGNvbHVtbkhlYWRlcnNcbiAgICB0aGlzLmNvbHVtbkhlYWRlcnMgPSBbe1xuICAgICAgbmFtZTogXCJGcmFtdGlkc2bDtnJtw6VnYVwiLFxuICAgICAgdHlwZTogXCJoZWFkZXJcIlxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwiT21yw6VkZVwiLFxuICAgICAgdHlwZTogXCJoZWFkZXJcIlxuICAgIH1dLmNvbmNhdCh5ZWFycy5tYXAoeWVhciA9PiAoe1xuICAgICAgbmFtZTogeWVhcixcbiAgICAgIHR5cGU6ICd5ZWFyJ1xuICAgIH0pKSk7XG5cbiAgICAvLyB2dEh0c1xuICAgIHRoaXMudnRIdHMgPSBmbGF0dGVuKHllYXJzLm1hcCh5ZWFyID0+IFtcIkhUXCIsIFwiVlRcIl0pKTtcblxuICAgIC8vIGNhYmFiUm93c1xuICAgIGNvbnN0IHJvd3M6IENlbGxbXVtdID0gW107XG4gICAgZGF0YS5mb3JFYWNoKGEgPT4ge1xuICAgICAgbGV0IHJvdzogQ2VsbFtdID0gW3t0eXBlOiAnYWJpbGl0eScsIG5hbWU6IGEuYWJpbGl0eU5hbWV9XTtcbiAgICAgIGNvbnN0IGFkZGVkQ2FwYWJzIDoge1tuYW1lOiBzdHJpbmddOiB0cnVlfSA9IHt9O1xuICAgICAgYS5jYXBhYmlsaXRpZXMuZm9yRWFjaChjID0+IHtcbiAgICAgICAgY29uc3QgY2VsbHM6IFRlcm1DZWxsW10gPSBbXG4gICAgICAgICAge3R5cGU6ICd0ZXJtJywgc2VsZWN0ZWQ6IGMuaHRIYXNWYWx1ZSAhPT0gZmFsc2V9LFxuICAgICAgICAgIHt0eXBlOiAndGVybScsIHNlbGVjdGVkOiBjLnZ0SGFzVmFsdWUgIT09IGZhbHNlfVxuICAgICAgICBdO1xuICAgICAgICAvL2lmIChjLmh0SGFzVmFsdWUgfHwgYy52dEhhc1ZhbHVlKSBkZWJ1Z2dlcjtcblxuICAgICAgICBpZiAoIWFkZGVkQ2FwYWJzW2MuY2FwYWJpbGl0eU5hbWVdKSB7XG4gICAgICAgICAgLy9pZiAoIWlzRmlyc3RDYXBhYmlsaXR5KSByb3dzLnB1c2gocm93KTtcbiAgICAgICAgICBpZiAocm93Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgICAgICAgICAgcm93ID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIGFkZGVkQ2FwYWJzW2MuY2FwYWJpbGl0eU5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICByb3cucHVzaCh7dHlwZTogJ2NhcGFiaWxpdHknLCBuYW1lOiBjLmNhcGFiaWxpdHlOYW1lfSk7XG4gICAgICAgICAgY2VsbHMuZm9yRWFjaChjZWxsID0+IHJvdy5wdXNoKGNlbGwpKTtcbiAgICAgICAgfSBlbHNlIGlmIChyb3cpIHtcbiAgICAgICAgICAvL2FkZGVkQ2FwYWJzW2MuY2FwYWJpbGl0eU5hbWVdLmNvbmNhdChjZWxscyk7XG4gICAgICAgICAgY2VsbHMuZm9yRWFjaChjZWxsID0+IHJvdy5wdXNoKGNlbGwpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAocm93KSByb3dzLnB1c2gocm93KTtcbiAgICB9KTtcblxuICAgIHRoaXMuY2FwYWJSb3dzID0gcm93cztcbiAgfVxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEVEU1N0dWRlbnRGdXR1cmVBYmlsaXR5IH0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2Vkcyc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgRnV0dXJlQWJpbGl0aWVzVmlld01vZGVsIH0gZnJvbSAnLi9mdXR1cmUtYWJpbGl0aWVzLXZpZXdtb2RlbCc7XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGxvYWRpbmc6IGJvb2xlYW4sXG4gIGRhdGE6IEVEU1N0dWRlbnRGdXR1cmVBYmlsaXR5W10sXG4gIGVycm9yOiBzdHJpbmcgfCBudWxsXG59XG5cbmV4cG9ydCBjbGFzcyBGdXR1cmVBYmlsaXRpZXNUYWJsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fSwgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgZGF0YTogW10sXG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5sb2FkKCk7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlIH0pO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgZW52LmVkc0NsaWVudC5nZXRTdHVkZW50RnV0dXJlQWJpbGl0aWVzKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZGF0YSB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yIH0pO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogZmFsc2UgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qgdmlld01vZGVsID0gbmV3IEZ1dHVyZUFiaWxpdGllc1ZpZXdNb2RlbCAodGhpcy5zdGF0ZS5kYXRhKTtcbiAgICBjb25zdCB7Y29sdW1uSGVhZGVycywgdnRIdHMsIGNhcGFiUm93c30gPSB2aWV3TW9kZWw7XG5cbiAgICByZXR1cm4gPGRpdj5cbiAgICAgIDxoNT5GcmFtdGlkc2bDtnJtw6Vnb3I8L2g1PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYXJ0aWFsRWRpdFN0dWR5UGxhblZpZXdNb2RlXCI+XG4gICAgICAgIDx0YWJsZSBzdHlsZT17eyB3aWR0aDogJzEwMCUnIH19IGNsYXNzTmFtZT1cInNtYWxsRm9udFwiPlxuICAgICAgICAgIDx0aGVhZD5cbiAgICAgICAgICAgIDx0cj57Y29sdW1uSGVhZGVycy5tYXAoKHsgbmFtZSwgdHlwZSB9LCBpKSA9PlxuICAgICAgICAgICAgICB0eXBlID09PSAnaGVhZGVyJyA/XG4gICAgICAgICAgICAgICAgPHRoIGtleT17aX0gcm93U3Bhbj17Mn0+e25hbWV9PC90aD4gOlxuICAgICAgICAgICAgICAgIDx0aCBrZXk9e2l9IGNvbFNwYW49ezJ9PntuYW1lfTwvdGg+KX08L3RyPlxuICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImhlYWRlclwiPlxuICAgICAgICAgICAgICB7dnRIdHMubWFwKCh2dEh0LCBpKSA9PiA8dGgga2V5PXtpfT57dnRIdH08L3RoPil9XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICAgIDwvdGhlYWQ+XG4gICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAge2NhcGFiUm93cy5tYXAoKHJvdywgaSkgPT4gPHRyIGtleT17aX0gY2xhc3NOYW1lPXsoTWF0aC5mbG9vcihpLzMpICUgMikgJiYgJ3RhYmxlT2RkJ30+XG4gICAgICAgICAgICAgIHtyb3cubWFwKChjb2wsIGkpID0+IGNvbC50eXBlID09PSAnYWJpbGl0eScgP1xuICAgICAgICAgICAgICAgIDx0ZCBrZXk9e2l9IHJvd1NwYW49ezN9IGNsYXNzTmFtZT1cImdvYWxzU3ViamVjdFwiPntjb2wubmFtZX08L3RkPiA6XG4gICAgICAgICAgICAgICAgY29sLnR5cGUgPT09ICdjYXBhYmlsaXR5JyA/XG4gICAgICAgICAgICAgICAgICA8dGQga2V5PXtpfSBjbGFzc05hbWU9XCJnb2Fsc1N1YmplY3RcIj57Y29sLm5hbWV9PC90ZD4gOlxuICAgICAgICAgICAgICAgICAgY29sLnNlbGVjdGVkID9cbiAgICAgICAgICAgICAgICAgICAgPHRkIGtleT17aX0gY2xhc3NOYW1lPVwiZWRzU2VsZWN0ZWRcIj48ZGl2IGNsYXNzTmFtZT1cIm1hcmtlZEl0ZW1cIj48L2Rpdj48L3RkPiA6XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBrZXk9e2l9IC8+KX1cbiAgICAgICAgICAgIDwvdHI+KX1cbiAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICA8L3RhYmxlPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+O1xuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IFZpZXdNb2RlbCB9IGZyb20gJy4vZ29hbHMtdmlld21vZGVsJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IEVEU1N0dWR5UGxhbiB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IHsgRnV0dXJlQWJpbGl0aWVzVGFibGUgfSBmcm9tICcuL2Z1dHVyZS1hYmlsaXRpZXMtdGFibGUnO1xuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBsb2FkaW5nU3R1ZHlQbGFuczogYm9vbGVhbixcbiAgc3R1ZHlQbGFuczogRURTU3R1ZHlQbGFuW10sXG4gIGVycm9yOiBzdHJpbmcgfCBudWxsXG59XG5cbmV4cG9ydCBjbGFzcyBLU0dvYWxzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9LCBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9hZGluZ1N0dWR5UGxhbnM6IGZhbHNlLFxuICAgICAgc3R1ZHlQbGFuczogW10sXG4gICAgICBlcnJvcjogbnVsbFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmxvYWQoKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7bG9hZGluZ1N0dWR5UGxhbnM6IHRydWV9KTtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3R1ZHlQbGFucyA9IGF3YWl0IGVudi5lZHNDbGllbnQuZ2V0U3R1ZGVudEdvYWxzKCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHtzdHVkeVBsYW5zfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yfSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe2xvYWRpbmdTdHVkeVBsYW5zOiBmYWxzZX0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHZpZXdNb2RlbCA9IG5ldyBWaWV3TW9kZWwodGhpcy5zdGF0ZS5zdHVkeVBsYW5zKTtcbiAgICBjb25zdCBzaG93VGVybUdvYWxzID1cbiAgICAgICAoJycrZW52LmN1cnJlbnRVc2VyLnNjaG9vbFR5cGUpLnRvTG93ZXJDYXNlKCkgIT09IFwiZ3ltbmFzaXVtXCI7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIj5cbiAgICAgIDxoND5cbiAgICAgICAge0xgTcOlbGB9XG4gICAgICA8L2g0PlxuICAgICAgPGhyIC8+XG4gICAgICA8dGFibGUgY2xhc3NOYW1lPVwic21hbGxGb250XCI+XG4gICAgICAgIDx0aGVhZD5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+e0xgw4RtbmVgfTwvdGg+XG4gICAgICAgICAgICB7c2hvd1Rlcm1Hb2FscyAmJiA8dGg+e0xgSFRgfTwvdGg+fVxuICAgICAgICAgICAge3Nob3dUZXJtR29hbHMgJiYgPHRoPntMYFZUYH08L3RoPn1cbiAgICAgICAgICAgIDx0aD57TGBTbHV0bcOlbGB9PC90aD5cbiAgICAgICAgICAgIDx0aD57TGBTdHJhdGVnaWVyYH08L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICB7dmlld01vZGVsLnN1YmplY3RzLm1hcCgocywgaSkgPT5cbiAgICAgICAgICA8dHIga2V5PXtzLm5hbWV9IGNsYXNzTmFtZT17aSAlIDIgJiYgXCJ0YWJsZU9kZFwifT5cbiAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJnb2Fsc1N1YmplY3RcIj57cy5uYW1lfTwvdGQ+XG4gICAgICAgICAgICB7c2hvd1Rlcm1Hb2FscyAmJiA8dGQgY2xhc3NOYW1lPVwiZ29hbHNUZXJtXCI+e3MuYXRHb2FsfTwvdGQ+fVxuICAgICAgICAgICAge3Nob3dUZXJtR29hbHMgJiYgPHRkIGNsYXNzTmFtZT1cImdvYWxzVGVybVwiPntzLnN0R29hbH08L3RkPn1cbiAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJnb2Fsc0VuZFwiPntzLmZpbmFsR29hbH08L3RkPlxuICAgICAgICAgICAgPHRkPntzLnN0cmF0ZWdpZXN9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICAgICl9XG4gICAgICAgIDwvdGJvZHk+PC90YWJsZT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkaXZpZGVyXCIgLz5cbiAgICAgICAgPEZ1dHVyZUFiaWxpdGllc1RhYmxlIC8+XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsIlxuZXhwb3J0IGludGVyZmFjZSBLZWRMZWFybmluZ0dvYWxzRGF0YSB7XG4gIG1vZHVsZU5hbWU6IHN0cmluZ1xuICBzdWJqZWN0OiB7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgY291cnNlOiB7XG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICAgIHVybDogc3RyaW5nXG4gICAgfVxuICB9XG4gIHN0ZXA/OiBudW1iZXJcbiAgY29tbW9uVGFza3M6IEtlZExlYXJuaW5nVGFza1tdXG4gIGxlYXJuaW5nR29hbHM6IEtlZExlYXJuaW5nR29hbFtdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2VkTGVhcm5pbmdUYXNrIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBLZWRMZWFybmluZ0dvYWwge1xuICBuYW1lOiBzdHJpbmc7XG4gIHRhc2tzOiBLZWRMZWFybmluZ1Rhc2tbXTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldExlYXJuaW5nR29hbHNBbmRUYXNrcyhhcGlQYXRoOiBzdHJpbmcsIHBhZ2VJZDogc3RyaW5nKSB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoIChgJHthcGlQYXRofT9ub2RlSUQ9JHtwYWdlSWR9YCwge2NyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJ9KTtcbiAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XG4gIHJldHVybiBkYXRhIGFzIEtlZExlYXJuaW5nR29hbHNEYXRhO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZ2V0TGVhcm5pbmdHb2Fsc0FuZFRhc2tzLCBLZWRMZWFybmluZ0dvYWxzRGF0YSB9IGZyb20gJy4uLy4uL2FwaXMva2VkLWxlYXJuaW5nZ29hbHMnO1xuaW1wb3J0IHsgTGVhcm5pbmdNb2R1bGVUYXNrLCBUYXNrTGlzdCB9IGZyb20gJy4uL2NvdXJzZS12aWV3ZXIvc3ViY29tcG9uZW50cy90YXNrLWxpc3QnO1xuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IExlYXJuaW5nR29hbCwgTGVhcm5pbmdHb2Fsc0xpc3QgfSBmcm9tICcuLi9jb3Vyc2Utdmlld2VyL3N1YmNvbXBvbmVudHMvbGVhcm5pbmctZ29hbHMtbGlzdCc7XG5pbXBvcnQgeyBzZXR1cEludGwgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvU2V0dXBMYW5ndWFnZUludGwnO1xuaW1wb3J0IHsgaW5qZWN0SW50bCwgSW5qZWN0ZWRJbnRsUHJvcHMgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IExhbmd1YWdlQ29udGV4dCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBJbmplY3RlZEludGxQcm9wc3tcbiAgYXBpUGF0aDogc3RyaW5nOyAvLyBcIi80LjU2NjdjNjMxMTVlZDZjMDM3OTBhNGM4Yy8xMi4xZjk1YTY3YTE1ZWUzMWVhMWM0NDQ3YjIuanNvblwiXG4gIHBhZ2VJZDogc3RyaW5nOyAvLyBzdi5QYWdlQ29udGV4dC5wYWdlSWRcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgZGF0YTogS2VkTGVhcm5pbmdHb2Fsc0RhdGEgfCBudWxsXG59XG5cbmNsYXNzIF9MZWFybmluZ1Rhc2tzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRhdGE6IG51bGxcbiAgICB9XG4gIH1cblxuICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0TGVhcm5pbmdHb2Fsc0FuZFRhc2tzKFxuICAgICAgdGhpcy5wcm9wcy5hcGlQYXRoLFxuICAgICAgdGhpcy5wcm9wcy5wYWdlSWQpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRhdGEgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLmRhdGEpIHJldHVybiA8ZGl2PjwvZGl2PjtcbiAgICBjb25zdCB7IG1vZHVsZU5hbWUsIHN1YmplY3QsIGNvbW1vblRhc2tzLCBsZWFybmluZ0dvYWxzLCBzdGVwIH0gPSB0aGlzLnN0YXRlLmRhdGE7XG4gICAgY29uc3Qge2ludGx9ID0gdGhpcy5wcm9wcztcbiAgICAvL2NvbnN0IHN0ZXAgPSB1bmRlZmluZWQ7IC8vIG1vZHVsZU5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKFwic3RlZyBcIikgJiYgcGFyc2VJbnQobW9kdWxlTmFtZS5zdWJzdHIoNSkpO1xuICAgIGNvbnN0IGNvbW1vblRhc2tzTGlzdDogTGVhcm5pbmdNb2R1bGVUYXNrW10gPVxuICAgICAgY29tbW9uVGFza3MubWFwKHRhc2sgPT4gKHtcbiAgICAgICAgaWQ6IHRhc2suaWQsXG4gICAgICAgIG5hbWU6IHRhc2submFtZSxcbiAgICAgICAgdXJsOiB0YXNrLnVybCxcbiAgICAgICAgY291cnNlTmFtZTogc3ViamVjdC5uYW1lLFxuICAgICAgICBsZWFybmluZ0dvYWw6IHN0ZXAgJiYgbGVhcm5pbmdHb2Fscy5sZW5ndGggPiAwID8gYCR7bW9kdWxlTmFtZX0gLSDDtnZlcmdyaXBhbmRlYCA6IG1vZHVsZU5hbWVcbiAgICAgIH0pKTtcbiAgICAgIFxuICAgIGNvbnN0IGxlYXJuaW5nR29hbHNMaXN0OiBMZWFybmluZ0dvYWxbXSA9IGxlYXJuaW5nR29hbHMubWFwKGxlYXJuaW5nR29hbCA9PiAoe1xuICAgICAgbmFtZTogbGVhcm5pbmdHb2FsLm5hbWUsXG4gICAgICBsZWFybmluZ1Rhc2tzOiBsZWFybmluZ0dvYWwudGFza3MubWFwKHRhc2sgPT4gKHtcbiAgICAgICAgaWQ6IHRhc2suaWQsXG4gICAgICAgIG5hbWU6IHRhc2submFtZSxcbiAgICAgICAgdXJsOiB0YXNrLnVybCxcbiAgICAgICAgY291cnNlTmFtZTogc3ViamVjdC5uYW1lLFxuICAgICAgICBsZWFybmluZ0dvYWw6IGxlYXJuaW5nR29hbC5uYW1lXG4gICAgICB9KSlcbiAgICB9KSk7XG5cbiAgICBpZiAoc3RlcCkge1xuICAgICAgY29tbW9uVGFza3NMaXN0LmZvckVhY2godGFzayA9PiB0YXNrLnN0ZXAgPSBzdGVwKTtcbiAgICAgIGxlYXJuaW5nR29hbHNMaXN0LmZvckVhY2gobGcgPT4gbGcubGVhcm5pbmdUYXNrcy5mb3JFYWNoKHRhc2sgPT4gdGFzay5zdGVwID0gc3RlcCkpO1xuICAgIH1cblxuICAgIHJldHVybiA8TGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGludGwgfX0+XG4gICAgICA8TGVhcm5pbmdHb2Fsc0xpc3RcbiAgICAgICAgY29tbW9uVGFza3M9e2NvbW1vblRhc2tzTGlzdH1cbiAgICAgICAgbGVhcm5pbmdHb2Fscz17bGVhcm5pbmdHb2Fsc0xpc3R9IC8+XG4gICAgPC9MYW5ndWFnZUNvbnRleHQuUHJvdmlkZXI+XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IExlYXJuaW5nVGFza3MgPSBzZXR1cEludGwoaW5qZWN0SW50bChfTGVhcm5pbmdUYXNrcykpO1xuIiwiaW1wb3J0IHsgTGVhcm5pbmdNb2R1bGVUYXNrcyB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcblxuZXhwb3J0IGNvbnN0IGxlYXJuaW5nTW9kdWxlczogTGVhcm5pbmdNb2R1bGVUYXNrc1tdID0gW3tcbiAgICBtb2R1bGVOYW1lOiBcIlN0ZWcgMjJcIixcbiAgICBzdWJqZWN0OiB7XG4gICAgICAgIG5hbWU6IFwiU3BhbnNrYVwiLFxuICAgICAgICBjb3Vyc2U6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiU3BhbnNrYVwiLFxuICAgICAgICAgICAgdXJsOiBcIi9zdGVnL3NwYW5za2EuNC40YWU0ZTlkMjE1OWVmNGUwMTIwYWQ2ZDMuaHRtbFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1vblRhc2tzOiBbXSxcbiAgICBsZWFybmluZ0dvYWxzOiBbe1xuICAgICAgICBuYW1lOiBcIkFrdGl2aXRldGVyIGkgaGVtbWV0XCIsXG4gICAgICAgIHRhc2tzOiBbe1xuICAgICAgICAgICAgbmFtZTogXCJBa3Rpdml0ZXRlciBpIGhlbW1ldCBob3MgZW4gcGVydWFuc2sgZmFtaWxqXCIsXG4gICAgICAgICAgICB1cmw6IFwiL3N0ZWcvc3BhbnNrYS9ibG9jazUvc3RlZzIyL3VwcGdpZnRlci9ha3Rpdml0ZXRlcmloZW1tZXQvYWt0aXZpdGV0ZXJpaGVtbWV0aG9zZW5wZXJ1YW5za2ZhbWlsai40LjRhZTRlOWQyMTU5ZWY0ZTAxMjBhZGI0MC5odG1sXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogXCJVcHBnaWZ0IHRpbGwgYWt0aXZpdGV0ZXIgaSBoZW1tZXRcIixcbiAgICAgICAgICAgIHVybDogXCIvc3RlZy9zcGFuc2thL2Jsb2NrNS9zdGVnMjIvdXBwZ2lmdGVyL2FrdGl2aXRldGVyaWhlbW1ldC91cHBnaWZ0dGlsbGFrdGl2aXRldGVyaWhlbW1ldC40LjRhZTRlOWQyMTU5ZWY0ZTAxMjBhZjg4Ny5odG1sXCJcbiAgICAgICAgfV1cbiAgICB9LCB7XG4gICAgICAgIG5hbWU6IFwiRmFtaWxqZWxpdlwiLFxuICAgICAgICB0YXNrczogW3tcbiAgICAgICAgICAgIG5hbWU6IFwiVmFkIHDDpWfDpXIgaSBkaW4gZmFtaWxqIG51P1wiLFxuICAgICAgICAgICAgdXJsOiBcIi9zdGVnL3NwYW5za2EvYmxvY2s1L3N0ZWcyMi91cHBnaWZ0ZXIvZmFtaWxqZWxpdi92YWRwYWdhcmlkaW5mYW1pbGpudS40LjRhZTRlOWQyMTU5ZWY0ZTAxMjBiMjVlOS5odG1sXCJcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgbmFtZTogXCJVcHBnaWZ0IGZhbWlsamVsaXZcIixcbiAgICAgICAgICAgIHVybDogXCIvc3RlZy9zcGFuc2thL2Jsb2NrNS9zdGVnMjIvdXBwZ2lmdGVyL2ZhbWlsamVsaXYvdXBwZ2lmdGZhbWlsamVsaXYuNC40YWU0ZTlkMjE1OWVmNGUwMTIwYWY3M2EuaHRtbFwiXG4gICAgICAgIH1dXG4gICAgfSwge1xuICAgICAgICBuYW1lOiBcIlNhbXRhbCBvbSBmYW1pbGplbGl2XCIsXG4gICAgICAgIHRhc2tzOiBbe1xuICAgICAgICAgICAgbmFtZTogXCJTYW10YWxzZG9rdW1lbnQgZmFtaWxqZWxpdlwiLFxuICAgICAgICAgICAgdXJsOiBcIi9zdGVnL3NwYW5za2EvYmxvY2s1L3N0ZWcyMi91cHBnaWZ0ZXIvc2FtdGFsb21mYW1pbGplbGl2L3NhbXRhbHNkb2t1bWVudGZhbWlsamVsaXYuNC40YWU0ZTlkMjE1OWVmNGUwMTIwOWZlMDMuaHRtbFwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6IFwiU2FtdGFsc2thcnRhLWZhbWlsamVsaXZcIixcbiAgICAgICAgICAgIHVybDogXCIvc3RlZy9zcGFuc2thL2Jsb2NrNS9zdGVnMjIvdXBwZ2lmdGVyL3NhbXRhbG9tZmFtaWxqZWxpdi9zYW10YWxza2FydGFmYW1pbGplbGl2LjQuNGFlNGU5ZDIxNTllZjRlMDEyMGFmNmZkLmh0bWxcIlxuICAgICAgICB9XVxuICAgIH1cbiAgICBdXG59LCB7XG4gICAgbW9kdWxlTmFtZTogXCJUZWtuaWtcIixcbiAgICBzdWJqZWN0OiB7XG4gICAgICAgIG5hbWU6IFwiVGVrbmlrXCIsXG4gICAgICAgIGNvdXJzZToge1xuICAgICAgICAgICAgbmFtZTogXCJUcsOlZCA1XCIsXG4gICAgICAgICAgICB1cmw6IFwiL2t1cnNlci9hcnNrdXJzOC90cmFkNS4xOS4yZDRmNDAwNTE1OWY4OTU0NzdhMTVjYy5odG1sXCJcbiAgICAgICAgfVxuICAgIH0sXG4gICAgY29tbW9uVGFza3M6IFt7XG4gICAgICAgIG5hbWU6IFwiVHJ5Y2sgXCIsXG4gICAgICAgIHVybDogXCIva3Vyc2VyL2Fyc2t1cnM4L3RyYWQ1L2ZvcmJlcmVkZWxzZS90ZWtuaWsvdXBwZ2lmdGVyL3RyeWNrLjQuNGFlNGU5ZDIxNTllZjRlMDEyMDlkY2RlLmh0bWxcIlxuICAgIH0sIHtcbiAgICAgICAgbmFtZTogXCJEaXNrdXNzaW9uc2Zyw6Vnb3IgdGlsbCBpbmR1c3RyaWVsbGEgcmV2b2x1dGlvbmVuXCIsXG4gICAgICAgIHVybDogXCIva3Vyc2VyL2Fyc2t1cnM4L3RyYWQ1L2ZvcmJlcmVkZWxzZS90ZWtuaWsvdXBwZ2lmdGVyL2Rpc2t1c3Npb25zZnJhZ29ydGlsbGluZHVzdHJpZWxsYXJldm9sdXRpb25lbi40LjRhZTRlOWQyMTU5ZWY0ZTAxMjBhNmZhYi5odG1sXCJcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6IFwiSHVyIGZ1bmdlcmFyIGVuIMOlbmdtYXNraW5cIixcbiAgICAgICAgdXJsOiBcIi9rdXJzZXIvYXJza3VyczgvdHJhZDUvZm9yYmVyZWRlbHNlL3Rla25pay91cHBnaWZ0ZXIvaHVyZnVuZ2VyYXJlbmFuZ21hc2tpbi40LjRhZTRlOWQyMTU5ZWY0ZTAxMjBhMTMwOS5odG1sXCJcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6IFwiw4VuZ21hc2tpbmVucyBiZXR5ZGVsc2VcIixcbiAgICAgICAgdXJsOiBcIi9rdXJzZXIvYXJza3VyczgvdHJhZDUvZm9yYmVyZWRlbHNlL3Rla25pay91cHBnaWZ0ZXIvYW5nbWFza2luZW5zYmV0eWRlbHNlLjQuNGFlNGU5ZDIxNTllZjRlMDEyMGEzZGViLmh0bWxcIlxuICAgIH1dLFxuICAgIGxlYXJuaW5nR29hbHM6IFt7XG4gICAgICAgIG5hbWU6IFwiSWRlbnRpZmllcmEgb2NoIGFuYWx5c2VyYSDDpW5nbWFza2luZW4gdXRpZnLDpW4gw6RuZGFtw6Vsc2VubGlnaGV0IG9jaCBmdW5rdGlvbixcIlxuICAgIH0sIHtcbiAgICAgICAgbmFtZTogXCJhbnbDpG5kYSB0ZWtuaWtvbXLDpWRldHMgYmVncmVwcCBvY2ggdXR0cnlja3Nmb3JtXCJcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6IFwidsOkcmRlcmEga29uc2VrdmVuc2VyIGF2IMOlbmdtYXNraW5lbiBmw7ZyIGluZGl2aWQsIHNhbWjDpGxsZSBvY2ggbWlsasO2LCBvY2hcIlxuICAgIH0sIHtcbiAgICAgICAgbmFtZTogXCJhbmFseXNlcmEgZHJpdmtyYWZ0ZXIgYmFrb20gdGVrbmlrdXR2ZWNrbGluZyBydW50IMOlbmdtYXNraW5lbiBvY2ggaHVyIHRla25pa2VuIGhhciBmw7Zyw6RuZHJhdHPDtnZlciB0aWQuXCJcbiAgICB9XVxufV1cblxuIiwiZXhwb3J0IGNvbnN0IGxlYXJuaW5nUGFnZVVybHMgPSBbXG4gIFwidGVzdGRhdGEvbGVhcm5pbmctdGFza3MvYW1uZXNpbnRlZ3JlcmFkLmpzb25cIixcbiAgXCJ0ZXN0ZGF0YS9sZWFybmluZy10YXNrcy9sb29wYWQuanNvblwiLFxuICBcInRlc3RkYXRhL2xlYXJuaW5nLXRhc2tzL3N0ZWctbGFyYW5kZW1hbC5qc29uXCIsXG4gIFwidGVzdGRhdGEvbGVhcm5pbmctdGFza3Mvc3RlZy1tYXR0ZS5qc29uXCIsXG4gIFwidGVzdGRhdGEvbGVhcm5pbmctdGFza3MvdmFubGlnLWt1cnMuanNvblwiXG5dO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7VHV0b3JzU2VsZWN0fSBmcm9tICcuLi90dXRvcnMtc2VsZWN0L3R1dG9ycy1zZWxlY3QnO1xuaW1wb3J0IHtLU1Rlcm1QbGFubmVyfSBmcm9tICcuLi9rcy10ZXJtcGxhbm5lci90ZXJtcGxhbm5lcic7XG5pbXBvcnQgeyBLR1Rlcm1QbGFubmVyVHV0b3JlZCB9IGZyb20gJy4uL2tnLXRlcm1wbGFubmVyL2tnLXRlcm1wbGFubmVyLXR1dG9yZWQnO1xuaW1wb3J0IHsgV2Vla1BsYW5uZXJUdXRvcmVkIH0gZnJvbSAnLi4vd2Vla3BsYW5uZXIvd2Vla3BsYW5uZXItdHV0b3JlZCc7XG5pbXBvcnQgeyBDYWxlbmRhciB9IGZyb20gJy4uL2NhbGVuZGFyJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IFdlZWtQbGFubmVyIH0gZnJvbSAnLi4vd2Vla3BsYW5uZXInO1xuaW1wb3J0IHsgVHV0b3JhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3R1dG9yYWJsZS1jb21wb25lbnQnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuXG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG5cbn1cblxuZXhwb3J0IGNsYXNzIFR1dG9yc1ZpZXdUZXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8VHV0b3JzU2VsZWN0IC8+XG4gICAgICA8VHV0b3JhYmxlQ29tcG9uZW50XG4gICAgICAgIHR1dG9yZWQ9e3RydWV9XG4gICAgICAgIGNyZWF0ZUNvbXBvbmVudD17ZW52ID0+XG4gICAgICAgICAgPEtTVGVybVBsYW5uZXJcbiAgICAgICAgICAgIGtleT17ZW52LmN1cnJlbnRVc2VyLm1haWx9XG4gICAgICAgICAgICBlbnY9e2Vudn1cbiAgICAgICAgICAgIHR1dG9yZWQ9e3RydWV9XG4gICAgICAgICAgICBpbml0aWFsRGF0ZT17bmV3IERhdGUoKX0gLz5cbiAgICAgICAgfVxuICAgICAgLz5cbiAgICAgIDxLR1Rlcm1QbGFubmVyVHV0b3JlZCAvPlxuICAgICAgPFR1dG9yYWJsZUNvbXBvbmVudFxuICAgICAgICAgICAgICB0dXRvcmVkPXt0cnVlfVxuICAgICAgICAgICAgICBjcmVhdGVDb21wb25lbnQ9e2VudiA9PlxuICAgICAgICAgICAgICAgIDxXZWVrUGxhbm5lclxuICAgICAgICAgICAgICAgICAga2V5PXtlbnYuY3VycmVudFVzZXIubWFpbH1cbiAgICAgICAgICAgICAgICAgIGVudj17ZW52fVxuICAgICAgICAgICAgICAgICAgdmlld0NvdXJzZVVybD1cImh0dHBzOi8vd3d3LnN2dC5zZVwiLz5cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgPFR1dG9yYWJsZUNvbXBvbmVudFxuICAgICAgdHV0b3JlZD17dHJ1ZX1cbiAgICAgIGNyZWF0ZUNvbXBvbmVudD17ZW52ID0+XG4gICAgICAgIDxDYWxlbmRhclxuICAgICAgICBlbnYgPSB7ZW52fVxuICAgICAgICBmaXJzdERheSA9IHttb21lbnQoKS5zdGFydE9mKCd3ZWVrJykud2Vla2RheSgxKX1cbiAgICAgICAgaW5pdGlhbFN0YXJ0SG91cj17N31cbiAgICAgICAgaW5pdGlhbEVuZEhvdXI9ezE4fVxuICAgICAgICBpbml0aWFsWm9vbT17MC43NX1cbiAgICAgICAgbnVtRGF5cz17NX1cbiAgICAgICAgIC8+XG4gICAgICB9XG4gICAgLz5cbiAgICA8L2Rpdj47XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IENhbGVuZGFyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jYWxlbmRhcic7XG5pbXBvcnQgeyBLU0dvYWxzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9rcy1nb2Fscy9nb2Fscyc7XG5pbXBvcnQgeyBMYXRlc3RBc3Nlc3NtZW50cyB9IGZyb20gJy4uL2NvbXBvbmVudHMvbGF0ZXN0LWFzc2Vzc21lbnRzL2xhdGVzdC1hc3Nlc3NtZW50cyc7XG5pbXBvcnQgeyBLR1Rlcm1QbGFubmVyU2VsZiBhcyBLR1Rlcm1QbGFubmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9rZy10ZXJtcGxhbm5lci9rZy10ZXJtcGxhbm5lci1zZWxmJztcbmltcG9ydCB7IEtHVGVybVBsYW5uZXJUdXRvcmVkIH0gZnJvbSAnLi4vY29tcG9uZW50cy9rZy10ZXJtcGxhbm5lci9rZy10ZXJtcGxhbm5lci10dXRvcmVkJztcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJ9IGZyb20gJy4uL2NvbXBvbmVudHMva3MtdGVybXBsYW5uZXIvdGVybXBsYW5uZXInO1xuaW1wb3J0IHsgS1NUZXJtUGxhbm5lclR1dG9yZWQgfSBmcm9tICcuLi9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL2tzLXRlcm1wbGFubmVyLXR1dG9yZWQnO1xuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgV2Vla1BsYW5uZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyJztcbmltcG9ydCB7IFdlZWtQbGFubmVyVHV0b3JlZCB9IGZyb20gJy4uL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvd2Vla3BsYW5uZXItdHV0b3JlZCc7XG5pbXBvcnQgeyBMZWFybmluZ1Rhc2tzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9sZWFybmluZy10YXNrcyc7XG5pbXBvcnQgeyBNeUNvdXJzZXMgfSBmcm9tICcuLi9jb21wb25lbnRzL215LWNvdXJzZXMvbXktY291cnNlcyc7XG5pbXBvcnQgeyBMaXN0Q291cnNlcyB9IGZyb20gJy4uL2NvbXBvbmVudHMvbGlzdC1jb3Vyc2VzL2xpc3QtY291cnNlcyc7XG5pbXBvcnQgeyBXZWVrTm90ZWJvb2sgfSBmcm9tICcuLi9jb21wb25lbnRzL3dlZWstbm90ZWJvb2snO1xuaW1wb3J0IHsgVHV0b3JzU2VsZWN0IH0gZnJvbSAnLi4vY29tcG9uZW50cy90dXRvcnMtc2VsZWN0L3R1dG9ycy1zZWxlY3QnO1xuaW1wb3J0IHsgVHV0b3JzVmlld1Rlc3R9IGZyb20gJy4uL2NvbXBvbmVudHMvdHV0b3JzLXZpZXcnO1xuXG5leHBvcnQgY29uc3QgY29tcG9uZW50cyA9IHtcbiAgTGF0ZXN0QXNzZXNzbWVudHM6IHtcbiAgICBjb21wb25lbnQ6IExhdGVzdEFzc2Vzc21lbnRzLFxuICAgIHByb3BzOiAoKSA9PiAoe1xuICAgICAgbG9jYWxlOiBuYXZpZ2F0b3IubGFuZ3VhZ2UsXG4gICAgICBsaW1pdDogMTVcbiAgICB9KVxuICB9LFxuICBLU0dvYWxzOiB7XG4gICAgY29tcG9uZW50OiBLU0dvYWxzLFxuICAgIHByb3BzOiAoKSA9PiAoe30pXG4gIH0sXG4gIEtTVGVybVBsYW5uZXI6IHtcbiAgICBjb21wb25lbnQ6IEtTVGVybVBsYW5uZXIsXG4gICAgcHJvcHM6ICgpID0+ICh7XG4gICAgICBlbnY6IGVudixcbiAgICAgIHR1dG9yZWQ6IGZhbHNlLFxuICAgICAgaW5pdGlhbERhdGU6bmV3IERhdGUoKSxcbiAgICB9KVxuICB9LFxuICBLU1Rlcm1QbGFubmVyVHV0b3JlZDoge1xuICAgIGNvbXBvbmVudDogS1NUZXJtUGxhbm5lclR1dG9yZWQsXG4gICAgcHJvcHM6ICgpID0+ICh7fSlcbiAgfSxcbiAgS0dUZXJtUGxhbm5lcjoge1xuICAgIGNvbXBvbmVudDogS0dUZXJtUGxhbm5lcixcbiAgICBwcm9wczogKCkgPT4gKHt9KVxuICB9LFxuICBLR1Rlcm1QbGFubmVyVHV0b3JlZDoge1xuICAgIGNvbXBvbmVudDogS0dUZXJtUGxhbm5lclR1dG9yZWQsXG4gICAgcHJvcHM6ICgpID0+ICh7fSlcbiAgfSxcbiAgV2Vla1BsYW5uZXI6IHtcbiAgICBjb21wb25lbnQ6IFdlZWtQbGFubmVyLFxuICAgIHByb3BzOiAoKSA9PiAoe1xuICAgICAgdmlld0NvdXJzZVVybDogJ2h0dHA6Ly9zdnQuc2UnLFxuICAgICAgZW52OiBlbnZcbiAgICB9KVxuICB9LFxuICBUdXRvcnNWaWV3OiB7XG4gICAgY29tcG9uZW50OiBUdXRvcnNWaWV3VGVzdCxcbiAgICBwcm9wczogKCk9Pih7fSlcbiAgfSxcbiAgVHV0b3JzU2VsZWN0OiB7XG4gICAgY29tcG9uZW50OiBUdXRvcnNTZWxlY3QsXG4gICAgcHJvcHM6ICgpID0+ICh7fSlcbiAgfSxcbiAgQ2FsZW5kYXI6IHtcbiAgICBjb21wb25lbnQ6IENhbGVuZGFyLFxuICAgIHByb3BzOiAoKSA9PiAoe1xuICAgICAgZmlyc3REYXk6IG1vbWVudCgpLnN0YXJ0T2YoJ3dlZWsnKS53ZWVrZGF5KDEpLFxuICAgICAgbnVtRGF5czogNSxcbiAgICAgIGluaXRpYWxTdGFydEhvdXI6IDcsXG4gICAgICBpbml0aWFsRW5kSG91cjogMTgsXG4gICAgICBpbml0aWFsWm9vbTogMC43NVxuICAgIH0pXG4gIH0sXG4gIC8qQ291cnNlT3ZlcnZpZXc6IHtcbiAgICBjb21wb25lbnQ6IENvdXJzZU92ZXJ2aWV3LFxuICAgIHByb3BzOiAoKT0+KHtcbiAgICAgIGxvY2FsZTogbmF2aWdhdG9yLmxhbmd1YWdlLFxuICAgIH0pXG4gIH0sKi9cbiAgTGVhcm5pbmdUYXNrczoge1xuICAgIGNvbXBvbmVudDogTGVhcm5pbmdUYXNrcyxcbiAgICBwcm9wczogKCkgPT4gKHtcbiAgICAgIGFwaVBhdGg6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdzZWxlY3RlZExlYXJuaW5nTW9kdWxlVXJsJyksXG4gICAgICBwYWdlSWQ6IFwiZHVtbXlcIlxuICAgIH0pXG4gIH0sXG4gIE15Q291cnNlczoge1xuICAgIGNvbXBvbmVudDogTXlDb3Vyc2VzLFxuICAgIHByb3BzOiAoKT0+ICh7XG4gICAgICB2aWV3Q291cnNlVXJsOiAnaHR0cHM6Ly9rZy10ZXN0LnNpdGV2aXNpb24uc2UvY291cnNldmlld2VyJ1xuICAgIH0pXG4gIH0sXG4gIExpc3RDb3Vyc2VzOiB7XG4gICAgY29tcG9uZW50OiBMaXN0Q291cnNlcyxcbiAgICBwcm9wczogKCkgPT4gKHtcbiAgICAgIHZpZXdDb3Vyc2VVcmw6ICdodHRwczovL2tnLXRlc3Quc2l0ZXZpc2lvbi5zZS9jb3Vyc2V2aWV3ZXInXG4gICAgfSlcbiAgfSxcbiAgV2Vla05vdGVzOiB7XG4gICAgY29tcG9uZW50OiBXZWVrTm90ZWJvb2ssXG4gICAgcHJvcHM6ICgpID0+ICh7fSlcbiAgfVxufTtcbiIsIi8vIDxJbml0aWFsaXphdGlvbj5cbmltcG9ydCAnLi90ZXN0LWNvbmZpZyc7XG5pbXBvcnQgJy4vc2V0LWN1cnJlbnQtdXNlcic7IC8vIEVtdWxhdGUgc2VydmVyLXNpZGUgc2NyaXB0IHRvIHNldCBjdXJyZW50IHVzZXJcbmltcG9ydCAnLi4vZ2xvYmFsLXNldHRlcnMvc2V0LWFsbCc7IC8vIENsaWVudC1zaWRlIGluaXRpYWxpemF0aW9uXG4vLyA8L0luaXRpYWxpemF0aW9uPlxuXG5pbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmltcG9ydCB7IGxlYXJuaW5nTW9kdWxlcyB9IGZyb20gJy4vZGF0YS9sZWFybmluZ01vZHVsZXMnO1xuaW1wb3J0IHsgbGVhcm5pbmdQYWdlVXJscyB9IGZyb20gJy4vZGF0YS9sZWFybmluZ01vZHVsZXMyJztcbmltcG9ydCB7IHVzZXJzIH0gZnJvbSAnLi9kYXRhL3VzZXJzJztcbmltcG9ydCB7IFdlZWtQbGFubmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy93ZWVrcGxhbm5lcic7XG5pbXBvcnQgeyBjb21wb25lbnRzIH0gZnJvbSAnLi9jb21wb25lbnRzJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQge0tlZEJhY2tlbmRDbGllbnRXZWJUZXN0fSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudHdlYnRlc3QnO1xuaW1wb3J0IHsgQ2hvb3NlVXNlciB9IGZyb20gJy4vdXRpbHMvY2hvb3NlLXVzZXInO1xuaW1wb3J0IHsgRm9ybWF0dGVkTWVzc2FnZSwgaW5qZWN0SW50bCwgSW5qZWN0ZWRJbnRsUHJvcHMgfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCB7IHNldHVwSW50bCB9IGZyb20gXCIuLi9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9TZXR1cExhbmd1YWdlSW50bFwiO1xuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHNlbGVjdGVkQ29tcG9uZW50OiBzdHJpbmcsXG4gIHNlbGVjdGVkTGVhcm5pbmdNb2R1bGU6IG51bWJlcixcbiAgc2VsZWN0ZWRMZWFybmluZ01vZHVsZVVybDogc3RyaW5nLFxuICBzZWxlY3RlZENvbXBvbmVudFJlYWw6IFJlYWN0LlJlYWN0VHlwZSxcbiAgc2VsZWN0ZWRDb21wUHJvcHM6IGFueVxufVxuXG5jbGFzcyBfVGVzdFBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8SW5qZWN0ZWRJbnRsUHJvcHMsIFN0YXRlPiB7XG4gIGNvbXBvbmVudEFyZWE6IEhUTUxFbGVtZW50O1xuICBtZXNzYWdlcyA6IG9iamVjdDtcblxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIGNvbnN0IHNlbGVjdGVkQ29tcCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic2VsZWN0ZWRDb21wb25lbnRcIikgfHwgT2JqZWN0LmtleXMoY29tcG9uZW50cylbMF07XG4gICAgdmFyIHNlbGVjdENvbXBQcm9wcyA9IGNvbXBvbmVudHNbc2VsZWN0ZWRDb21wXS5wcm9wcygpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzZWxlY3RlZENvbXBvbmVudDogc2VsZWN0ZWRDb21wLFxuICAgICAgc2VsZWN0ZWRMZWFybmluZ01vZHVsZTogcGFyc2VJbnQobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzZWxlY3RlZExlYXJuaW5nTW9kdWxlXCIpIHx8IFwiMFwiKSxcbiAgICAgIHNlbGVjdGVkTGVhcm5pbmdNb2R1bGVVcmw6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic2VsZWN0ZWRMZWFybmluZ01vZHVsZVVybFwiKSB8fCBcIlwiLFxuICAgICAgc2VsZWN0ZWRDb21wb25lbnRSZWFsOiBjb21wb25lbnRzW3NlbGVjdGVkQ29tcF0uY29tcG9uZW50LFxuICAgICAgc2VsZWN0ZWRDb21wUHJvcHMgOiB7Li4uc2VsZWN0Q29tcFByb3BzfVxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICB0aGlzLnJlbmRlclRlc3RDb21wb25lbnQoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vdGhpcy5yZW5kZXJUZXN0Q29tcG9uZW50KCk7XG4gIH1cblxuICByZW5kZXJUZXN0Q29tcG9uZW50KCkge1xuICAgIGVudi5sZWFybmluZ01vZHVsZVRhc2tzID0gbGVhcm5pbmdNb2R1bGVzW3RoaXMuc3RhdGUuc2VsZWN0ZWRMZWFybmluZ01vZHVsZV07XG4gICAgJCh0aGlzLmNvbXBvbmVudEFyZWEpLmh0bWwoXCJcIik7XG5cbiAgICBpZiAoZW52LmN1cnJlbnRVc2VyKSB7XG4gICAgICBjb25zdCBzZWxlY3RlZCA9IGNvbXBvbmVudHNbdGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudF0gfHxcbiAgICAgICAgY29tcG9uZW50c1tPYmplY3Qua2V5cyhjb21wb25lbnRzKVswXV07XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2VsZWN0ZWRDb21wb25lbnRSZWFsOiBzZWxlY3RlZC5jb21wb25lbnQsXG4gICAgICAgIHNlbGVjdGVkQ29tcFByb3BzIDogey4uLnNlbGVjdGVkLnByb3BzKCl9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBTZWxlY3RlZENvbXBvbmVudCA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnRSZWFsIGFzIFJlYWN0LlJlYWN0VHlwZTtcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBlbnYuY3VycmVudFVzZXIgPyBcbiAgICA8TGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7aW50bH19PlxuICAgIDxkaXYgY2xhc3NOYW1lPVwidGVzdC1wYWdlXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhlYWRlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRlc3Qtc2VsZWN0c1wiPlxuICAgICAgICAgIDxmb3JtPlxuICAgICAgICAgICAgPGg0PlxuICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRlc3QucGFnZURlc2NyaXB0aW9uXCIgZGVmYXVsdE1lc3NhZ2U9XCJUZXN0c2lkYSBmw7ZyIGtvbXBvbmVudGVyIHRpbGwgbnlhIHN0YXJ0c2lkYW5cIi8+IFxuICAgICAgICAgICAgPC9oND5cbiAgICAgICAgICAgIDx0YWJsZT48dGJvZHk+PHRyPlxuICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cInRlc3RDb21wb25lbnRcIj5cbiAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRlc3QuY2hvb3NlQ29tcG9uZW50TGFiZWxcIiBkZWZhdWx0TWVzc2FnZT1cIktvbXBvbmVudFwiLz5cbiAgICAgICAgICAgICAgPC9sYWJlbD48L3RkPlxuICAgICAgICAgICAgPHRkPjxzZWxlY3QgaWQ9XCJ0ZXN0Q29tcG9uZW50XCIgdmFsdWU9e3RoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnR9IG9uQ2hhbmdlPXtldiA9PiB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZENvbXBvbmVudDogZXYudGFyZ2V0LnZhbHVlIH0pO1xuICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInNlbGVjdGVkQ29tcG9uZW50XCIsIGV2LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICB7T2JqZWN0LmtleXMoY29tcG9uZW50cykubWFwKGMgPT4gPG9wdGlvbiBrZXk9e2N9IHZhbHVlPXtjfT57Y308L29wdGlvbj4pfVxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8L3RkPjwvdHI+XG5cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50ID09PSAnTGVhcm5pbmdHb2Fsc0FuZFRhc2tzJyAmJiA8dHI+PHRkPjxsYWJlbCBodG1sRm9yPVwidGVzdExlYXJuaW5nTW9kdWxlXCI+S3Vyc21vZHVsPC9sYWJlbD48L3RkPlxuICAgICAgICAgICAgPHRkPjxzZWxlY3QgaWQ9XCJ0ZXN0TGVhcm5pbmdNb2R1bGVcIiB2YWx1ZT17dGhpcy5zdGF0ZS5zZWxlY3RlZExlYXJuaW5nTW9kdWxlfSBvbkNoYW5nZT17XG4gICAgICAgICAgICAgIGV2ID0+IHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInNlbGVjdGVkTGVhcm5pbmdNb2R1bGVcIiwgZXYudGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0+XG4gICAgICAgICAgICAgIHtsZWFybmluZ01vZHVsZXMubWFwKChsbSwgaSkgPT5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17aX0gdmFsdWU9e2l9PntcbiAgICAgICAgICAgICAgICAgIGxtLnN1YmplY3QuY291cnNlLm5hbWUgKyBcIi9cIiArXG4gICAgICAgICAgICAgICAgICBsbS5zdWJqZWN0Lm5hbWUgKyBcIi9cIiArXG4gICAgICAgICAgICAgICAgICBsbS5tb2R1bGVOYW1lfTwvb3B0aW9uPilcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9zZWxlY3Q+PC90ZD48L3RyPn1cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50ID09PSAnTGVhcm5pbmdUYXNrcycgJiYgPHRyPjx0ZD48bGFiZWwgaHRtbEZvcj1cInRlc3RMZWFybmluZ01vZHVsZVVybFwiPkt1cnNtb2R1bDwvbGFiZWw+PC90ZD5cbiAgICAgICAgICAgIDx0ZD48c2VsZWN0IGlkPVwidGVzdExlYXJuaW5nTW9kdWxlVXJsXCIgdmFsdWU9e3RoaXMuc3RhdGUuc2VsZWN0ZWRMZWFybmluZ01vZHVsZVVybH0gb25DaGFuZ2U9e1xuICAgICAgICAgICAgICBldiA9PiB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzZWxlY3RlZExlYXJuaW5nTW9kdWxlVXJsXCIsIGV2LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9PlxuICAgICAgICAgICAgICB7bGVhcm5pbmdQYWdlVXJscy5tYXAoKHVybCwgaSkgPT5cbiAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17aX0gdmFsdWU9e3VybH0+e3VybH08L29wdGlvbj4pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvc2VsZWN0PjwvdGQ+PC90cj59XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8aHIgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tcG9uZW50Um93XCI+XG4gICAgICAgIDxTZWxlY3RlZENvbXBvbmVudCB7Li4udGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBQcm9wc30gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb21wb25lbnRBcmVhXCIgcmVmPXtkaXYgPT4gdGhpcy5jb21wb25lbnRBcmVhID0gZGl2fT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2Vlay1wbGFubmVyXCI+XG4gICAgICAgICAge3RoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnQgPT09ICdMZWFybmluZ1Rhc2tzJyAmJlxuICAgICAgICAgICAgPFdlZWtQbGFubmVyIHZpZXdDb3Vyc2VVcmw9XCJodHRwOi8vd3d3LnN2dC5zZS9ueWhldGVyXCIgZW52PXtlbnZ9Lz5cbiAgICAgICAgICB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPC9MYW5ndWFnZUNvbnRleHQuUHJvdmlkZXI+IDogPENob29zZVVzZXIgLz5cbiAgfVxufVxuXG5jb25zdCBUZXN0UGFnZSA9IHNldHVwSW50bChpbmplY3RJbnRsKF9UZXN0UGFnZSkpO1xuZXhwb3J0IGRlZmF1bHQgVGVzdFBhZ2U7Il0sInNvdXJjZVJvb3QiOiIifQ==