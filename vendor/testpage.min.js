var testpage=function(e){function t(t){for(var r,i,o=t[0],u=t[1],l=t[2],d=0,m=[];d<o.length;d++)i=o[d],a[i]&&m.push(a[i][0]),a[i]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(e[r]=u[r]);for(c&&c(t);m.length;)m.shift()();return s.push.apply(s,l||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var u=n[o];0!==a[u]&&(r=!1)}r&&(s.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={6:0},s=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],u=o.push.bind(o);o.push=t,o=o.slice();for(var l=0;l<o.length;l++)t(o[l]);var c=u;return s.push([212,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return i}),n.d(t,"k",function(){return u}),n.d(t,"g",function(){return l}),n.d(t,"h",function(){return c}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return p}),n.d(t,"n",function(){return h}),n.d(t,"l",function(){return f}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return y});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function i(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var o=[].concat;function u(e){return o.apply([],e)}function l(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function c(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var i=t[r];if(null==i)return-1;var o=n[r];return null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function h(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function f(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],i=t(s),o=n[i];o?o.push(s):n[i]=[s]}return n}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function b(e,t){var n,a,s={};try{for(var i=r.h(t),o=i.next();!o.done;o=i.next()){var u=o.value;u in e&&(s[u]=e[u])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(n)throw n.error}}return s}function k(e,t){var n=v(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function y(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var i=n[a];if(r[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(28);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,,function(e,t,n){"use strict";var r=n(18);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(24);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,,,function(e,t){e.exports=jQuery},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"}),"Â ")}},function(e,t,n){"use strict";var r=n(1),a=n(6);var s=n(16);n.d(t,"a",function(){return i}),n.d(t,"c",function(){return u}),n.d(t,"e",function(){return l}),n.d(t,"d",function(){return c}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return p});var i=["user","role","school","debug","testVersion","testversion","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function u(e,t){return o(e,t,"W")}function l(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function c(e,t){return e.roles.includes("ADMIN")||l(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,i=Object(s.b)(location.search),o=r.a({},i,{role:t,school:n}),u=Object(s.a)(o);a?location.href=""+a+u:(location.hash="#",location.search=u)}};function m(e){d.actAs(e)}function p(e,t){var n,a,o=Object(s.b)(location.search),u={};try{for(var l=r.h(i),c=l.next();!c.done;c=l.next()){var d=c.value;o[d]&&(u[d]=o[d])}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}var m=Object(s.a)(r.a({},u,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+m+e.substr(p):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return u});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function u(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],i=t(s);i!==s&&(n===e&&(n=e.slice()),n[r]=i)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],i=t[1];return a[n?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},,function(e,t,n){"use strict";var r=n(4),a=n(15),s=n(29),i=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,i){return r.b(this,void 0,void 0,function(){var o,u,l,c,d,m,p,h,f,g,v;return r.d(this,function(b){switch(b.label){case 0:return i&&"no-cache"===i.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),l=(u=this).authHeader,c=u.tokenInfo,d=u.bearerProvider,l||c||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=c=b.sent(),b.label=2;case 2:return c?c.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=c=b.sent(),b.label=4;case 4:l="Bearer "+c.token,b.label=5;case 5:return l&&(n.Authorization=l),h=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 6:return 401==(f=b.sent()).status&&this.bearerProvider?(g=f.headers.get("www-authenticate"),console.log("Got "+f.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(v=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return v.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 8:f=b.sent(),b.label=9;case 9:return[2,f]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,s,o,u){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=u,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),u=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function l(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var c=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return u}),n.d(t,"j",function(){return l}),n.d(t,"f",function(){return i}),n.d(t,"c",function(){return c});var d=function(){function e(e,t,n){this.http=new i(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(c,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(i=c.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(c,o.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=u.sent()).status?[3,3]:(i=c.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(c,o.concat([u.sent()])));case 3:return[4,s.json()];case 4:return[2,u.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(c,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=c.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(c,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(18),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=n(15);function o(e){e.resources||(e.resources=[])}function u(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var l=sessionStorage.getItem("redir-hash");if(l)try{var c=JSON.parse(l),d=c.time,m=c.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return u(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return u(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var p=new s,h=Date.now(),f=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-h>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[r.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},v=function(e){function t(t,n,r){var a="string"!=typeof n?n:new f(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return p}),n.d(t,"b",function(){return f}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return v})},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.className,s=t.children,i=t.headerClassName,o=t.contentClassName,u=this.state.headerOpen;return a.createElement("div",{className:(r||"")+" openClose"+(u?" open":"")},a.createElement("div",{className:"openHeader"+(i?" "+i:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},n),a.createElement("div",{className:"openContent"+(o?" "+o:"")},s))},t}(a.Component)},,,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return u}),n.d(t,"a",function(){return l});var r=n(1),a=n(5),s=n.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e){return e.month()>=6?[s()(new Date(e.year(),7,1)),s()(new Date(e.year(),11,31))]:[s()(new Date(e.year(),0,1)),s()(new Date(e.year(),6,31))]}function u(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function l(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(32),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label},a.createElement("div",null,a.createElement("input",{type:"text",autoFocus:this.props.autoFocus,id:this.props.id,size:35,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(52),s=n(3),i=n(5),o=n.n(i),u=n(66),l=function(){function e(e){"string"==typeof e?(this.user=e,this.lastWrite=Date.now(),this.weekDate=Object(u.a)().startOf("week").valueOf(),this.openCourses={}):Object.assign(this,e)}return e.load=function(t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){return n=localStorage.getItem("WeekPlannerPersistedState2"),a=n&&JSON.parse(n),s=new e(t),a&&Object.assign(s,a),[2,s.user!==t||s.isExpired(o()())?new e(t):s]})})},e.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){return this.lastWrite=Date.now(),e=JSON.stringify(this),localStorage.setItem("WeekPlannerPersistedState2",e),[2]})})},e.prototype.isExpired=function(t){return o()(this.lastWrite).isBefore(t.add(0-e.EXPIRATION_HOURS,"hours"))},e.EXPIRATION_HOURS=12,e.VERSION=2,e}(),c=n(6),d=n(47);n.d(t,"b",function(){return m}),n.d(t,"a",function(){return p});var m=s.a.userTasksRepo,p=function(e){function t(t,n){var a=e.call(this,{getClient:t,optimistic:!0,table:"usertasks",user:n()?n().mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t,a,s,i,u;return r.d(this,function(r){switch(r.label){case 0:return e=n(),t=e?e.mail:"",this.persistedState?[3,2]:(a=this,[4,l.load(t)]);case 1:a.persistedState=r.sent(),r.label=2;case 2:return s=this.persistedState.weekDate,i=o()(s).week(),[2,{from:(u=Object(d.a)(o()(s).year(),i)).notBefore,to:u.notAfter,role:"USER",include:["task","course"],flags:["includeIdsOnly"]}]}})})}})||this;return a.persistedState=null,a.getCurrentUser=n,a}return r.c(t,e),t.prototype.updatePersistedState=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return Object.assign(this.persistedState,e),[4,this.persistedState.save()];case 1:return t.sent(),this.mem.notifySubscribers(),[2]}})})},t.prototype.setTaskDoneState=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,u,l,c;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,n.table,i=a(),u=Object.assign({},e,{done:t}),s?[4,this.mem.update(Object.assign({},u,{$meta:"updating"}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,i.list("usertasks",{name:e.name,role:"USER",include:["task","course"],flags:["includeIdsOnly"],from:o()(this.persistedState.weekDate).add(-3,"weeks").valueOf(),to:o()(this.persistedState.weekDate).add(3,"weeks").valueOf()},{cache:"no-cache"})];case 3:return l=r.sent(),0===(c=l.filter(function(t){return!(t.courseName!==e.courseName||t.learningGoal!==e.learningGoal||e.task&&t.task.map(function(e){return e.id}).join("")!==e.task.map(function(e){return e.id}).join("")||e.course&&t.course.map(function(e){return e.id}).join("")!==e.course.map(function(e){return e.id}).join(""))})).length&&c.push(e),[4,this.update(c,function(e){return e.done=t})];case 4:return r.sent(),[2]}})})},t.prototype.setSubTaskDoneState=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s;return r.d(this,function(r){switch(r.label){case 0:return a=this.options,s=a.getClient,a.optimistic,a.table,s(),[4,this.update([e],function(e){return e.subTasks&&e.subTasks.filter(function(e){return e.id===t}).forEach(function(e){return e.done=n})})];case 1:return r.sent(),[2]}})})},t.prototype.setWeekPlannerBoxOpen=function(e,t){return r.b(this,void 0,void 0,function(){var n;return r.d(this,function(a){switch(a.label){case 0:return n=r.a({},this.persistedState.openCourses),t?n[e]=!0:delete n[e],[4,this.updatePersistedState({openCourses:n})];case 1:return a.sent(),[2]}})})},t.prototype.changeWeek=function(e){return r.b(this,void 0,void 0,function(){var t,n;return r.d(this,function(r){switch(r.label){case 0:return(t=this.persistedState)?[3,2]:[4,l.load(this.options.user)];case 1:t=r.sent(),r.label=2;case 2:return(n=new l(t)).weekDate=o()(e).startOf("week").valueOf(),n.save(),this.persistedState=n,[4,this.mem.refreshFromServer()];case 3:return r.sent(),[2]}})})},t.prototype.subscribe=function(e){var t=this,n=function(n){e(n.filter(function(e){return!e.weekTexts}),t.persistedState,n.filter(function(e){return!!e.weekTexts})[0]||{id:Object(c.h)(),dateTime:t.persistedState.weekDate,weekTexts:{assessment:"",strategy:""},acl:[new c.b("email",t.getCurrentUser().mail,"S"),new c.b("schoolRole",t.getCurrentUser().school+"/EMPLOYEE","R")].map(function(e){return e.toString()})})};n.subscriber=e,this.mem.subscribe(n)},t.prototype.unsubscribe=function(e){this.mem.subscribers=this.mem.subscribers.filter(function(t){return t.subscriber!==e})},t}(a.a);m||(m=s.a.userTasksRepo=new p(function(){return s.a.kedBackendClient},function(){return s.a.currentUser})).mem.ensureHasData()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(30).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(41),i=n(34),o=n(46),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,i){r=!0,e=a,t=s,s&&n?n(null,s,i):n&&n(a,null,i)});if(r){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,u=s.observer;return i.push(a),n=u,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],i={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,i,o){if(a=o,r&&(r.unsubscribe(),r=null),i)t(null,i,s);else try{var u=e(n);u&&"function"==typeof u.subscribe?r=u.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(u,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);u.prototype.map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0);var s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){return a.createElement(a.Fragment,null,a.createElement("label",{className:"kclabel",htmlFor:this.props.id||(e=this.props.children,t=new Set,function e(n){if("string"==typeof n)return null;if(!t.has(n)){if(t.add(n),n.props)return n.props.id?n.props.id:n.props.children?e(n.props.children):void 0;if(n.length)for(var r=0;r<n.length;++r){var a=n[r];if(a){var s=e(a);if(s)return s}}}}(e))},this.props.label),this.props.children);var e,t},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(4),a=n(31),s=n(41),i=n(30),o=n(29),u=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);u.prototype._map=Object(s.a)(u)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,u=e.title;return s.createElement("div",{title:u||Object(i.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},,,,function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(6),s=n(5),i=n.n(s),o=n(25);var u=function(){function e(e){var t="academicYear"in e?e:Object(o.c)(i()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(o.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(o.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),l=n(2),c=n(50),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return p}),n.d(t,"a",function(){return h});var m,p=function(){function e(t,n,s,i){var o=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=i;var u=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){u(e)&&(o[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),i={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))u(o);function u(t){Object.keys(t).forEach(function(o){!s.hasOwnProperty(o)&&n(o)&&(s[o]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var u=JSON.stringify(r.g([o],n)),l=i[u];if(void 0!==l){if(l.promise)throw l.promise;if(l.error)throw l.error;if(l.timeout>Date.now())return l.value}try{var c=t[o].apply(e,n).then(function(e){i[u]={timeout:Date.now()+a,value:e}}).catch(function(e){i[u]={timeout:Date.now()+a,error:e}});throw i[u]={timeout:Date.now()+a,promise:c},c}catch(e){if(e.then)throw e;i[u]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:u})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw o=u.sent(),console.error("Error from EDS: "+o),new Error(Object(l.a)(m||(m=r.e(["Kunde tyvÃ¤rr inte ladda terminsmÃ¥l eller avklarade steg frÃ¥n EDS. FÃ¶rsÃ¶k igen senare..."],["Kunde tyvÃ¤rr inte ladda terminsmÃ¥l eller avklarade steg frÃ¥n EDS. FÃ¶rsÃ¶k igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,o,u,l,d,m,p,h,f,g;return r.d(this,function(r){switch(e){case"en_sin":return[2,c.SouthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,c.NorthIndia.filter(function(e){return i()(t).isSameOrAfter(e.firstTerm.startDate)&&i()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=t.getMonth()>=6,s=a?t.getFullYear():t.getFullYear()-1,o=a?t.getFullYear()+1:t.getFullYear(),u=i()(s.toString(),"YYYY"),l=i()(o.toString(),"YYYY"),1!=u.week()&&(u=u.clone().add(1,"week")),1!=l.week()&&(l=l.clone().add(1,"week")),d=i()(u.clone()).week(32).startOf("week"),m=i()(u.clone()).week(51).endOf("week"),p=i()(l.clone()),h=i()(l.clone()).week(25).endOf("week"),f={startDate:new Date(s,d.month(),d.date()).toDateString(),endDate:new Date(s,m.month(),m.date()).toDateString()},g={startDate:new Date(o,p.month(),p.date()).toDateString(),endDate:new Date(o,h.month(),h.date()).toDateString()},[2,{firstTerm:f,secondTerm:g,holidays:n}]}return[2]})})},e}(),h=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new u(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new u({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(32),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this;return a.createElement(s.a,{label:this.props.label,id:this.props.id},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("textarea",{autoFocus:this.props.autoFocus,id:this.props.id,cols:35,rows:this.props.rows||5,value:this.props.value,onChange:function(t){return e.props.onChange(t.target.value)},placeholder:this.props.placeholder})),!!this.props.children&&a.createElement("div",{className:"horizontalItem"},this.props.children)))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"b",function(){return i});var r=n(5),a=n.n(r);function s(e,t){var n=a()(new Date(e,1,1)).week(t);return{year:e,week:t,notBefore:n.clone().startOf("week").add(-2,"days").toDate().getTime(),notAfter:n.clone().startOf("week").add(5,"days").toDate().getTime()}}function i(e){e.clone();return e.weekday()>=5?e.week()+1:e.week()}},,function(e,t,n){"use strict";var r=n(12);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"VÃ¥grÃ¤t linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga lÃ¤nk",result:function(){var e=window.prompt("Ange lÃ¤nkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,s=window.prompt((void 0).promptMsg);if(s){var i=document.createElement("img");i.src=s,i.tabIndex=1,n=i,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),i.onfocus=t.onFocus,i.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(68),s=n(6),i=function(){function e(e){var t=this,n=e.table,s=e.getClient,i=e.getQueryOptions;this.mem=new a.a({query:function(){return r.b(t,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i()];case 1:return e=t.sent(),[4,s().list(n,r.a({},e,{cacheBust:this.getCacheBust()}))];case 2:return[2,t.sent()]}})})}}),this.options=e}return e.prototype.getCacheBust=function(){var e=this.options,t=e.table,n=e.user;return localStorage.getItem("cache-bust-"+t+"-"+n)||this.regenerateCacheBust()},e.prototype.regenerateCacheBust=function(){var e=this.options,t=e.table,n=e.user,r=Object(s.h)();return localStorage.setItem("cache-bust-"+t+"-"+n,r),r},e.prototype.upsert=function(e,t){return r.b(this,void 0,void 0,function(){var n,a=this;return r.d(this,function(r){switch(r.label){case 0:return e.$etag?[3,2]:(n=Object.assign({},e),t(n),[4,this.insert([n])]);case 1:return[2,r.sent()];case 2:return[4,this.update([e],t).catch(function(n){if("http404"===n.name){var r=Object.assign({},e);return t(r),a.insert([r])}return Promise.reject(n)})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.update=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,u,l,c=this;return r.d(this,function(r){switch(r.label){case 0:return n=this.options,a=n.getClient,s=n.optimistic,i=n.table,o=a(),u=e.map(function(e){var n=c.mem.items.find(function(t){return t.id===e.id});return e=Object.assign({},n||e),t(e),e}),s?[4,this.mem.update(u.map(function(e){return Object.assign({},e,{$meta:"updating"})}))]:[3,2];case 1:r.sent(),r.label=2;case 2:return[4,o.do(function(e){return u.forEach(function(t){return e.put(i,t)})}).catch(function(n){return"http409"===n.name?o.list(i,{ids:e.map(function(e){return e.id})},{cache:"no-cache"}).then(function(e){var n=e.map(function(e){var n=Object.assign({},e);return t(n),n});return o.do(function(e){return n.forEach(function(t){return e.put(i,t)})})}):Promise.resolve(s&&c.mem.update(e)).then(function(){return Promise.reject(n)})})];case 3:return l=r.sent(),this.regenerateCacheBust(),u.forEach(function(e){e.$etag=l.newEtags[e.id],e.$meta=void 0}),[4,this.mem.update(u)];case 4:return r.sent(),[2]}})})},e.prototype.stripGraphs=function(e,t){return e.map(function(e){var n=Object.assign({},e);return t.forEach(function(t){e[t]&&(n[t]=e[t].map(function(e){return{id:e.id}}))}),n})},e.prototype.insert=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,u,l,c,d,m,p,h,f,g,v,b,k,y=this;return r.d(this,function(E){switch(E.label){case 0:return a=this.options,i=a.getClient,o=a.optimistic,u=a.table,l=a.getQueryOptions,c=i(),[4,l()];case 1:return d=E.sent(),m=[].concat(d.include),e=e.map(function(e){return e.id?e:Object.assign({},e,{id:Object(s.h)()})}),p=this.stripGraphs(e,m),o?[4,this.mem.insert(p.map(function(e){return Object.assign({},e,{$meta:"adding"})}))]:[3,3];case 2:E.sent(),E.label=3;case 3:h=new s.a,f=function(e){var t,n,a=function(t){var n=e[t];n&&n.forEach(function(n){h.link2(u,e.id,t,n.id)})};try{for(var s=r.h(m),i=s.next();!i.done;i=s.next()){a(i.value)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(t)throw t.error}}h.add(u,e)};try{for(g=r.h(p),v=g.next();!v.done;v=g.next())b=v.value,f(b)}catch(e){t={error:e}}finally{try{v&&!v.done&&(n=g.return)&&n.call(g)}finally{if(t)throw t.error}}return[4,c.batch(h.mutationRequests).catch(function(t){return o&&y.mem.delete(e.map(function(e){return e.id})),Promise.reject(t)})];case 4:return k=E.sent(),this.regenerateCacheBust(),e.forEach(function(e){return e.$etag=k.newEtags[e.id]}),o?[4,this.mem.update(e)]:[3,6];case 5:return E.sent(),[3,8];case 6:return[4,this.mem.insert(e)];case 7:E.sent(),E.label=8;case 8:return[2]}})})},e.prototype.delete=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i,o=this;return r.d(this,function(u){switch(u.label){case 0:return t=this.options,n=t.getClient,a=t.optimistic,s=t.table,i=n(),a?[4,this.mem.update(e.map(function(e){return o.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return Object.assign({},e,{$meta:"deleting"})}))]:[3,2];case 1:u.sent(),u.label=2;case 2:return[4,i.do(function(t){return e.forEach(function(e){return t.delete(s,e)})}).catch(function(t){return r.b(o,void 0,void 0,function(){var n=this;return r.d(this,function(r){switch(r.label){case 0:return a?[4,this.mem.update(e.map(function(e){return n.mem.items.find(function(t){return t.id===e})}).filter(function(e){return e}).map(function(e){return delete(e=Object.assign({},e)).$meta,e}))]:[3,2];case 1:r.sent(),r.label=2;case 2:throw t}})})})];case 3:return u.sent(),this.regenerateCacheBust(),[4,this.mem.delete(e)];case 4:return u.sent(),[2]}})})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(12),i=new DOMParser,o={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function u(e){for(var t=i.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)l(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function l(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&o[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),c(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),s=a.name&&!!t[a.name.toLowerCase()];s||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),c(e)&&(t=!0),t}function c(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)l(n.item(r))&&(t=!0);return t}var d=n(71);n.d(t,"a",function(){return b});var m="wysiwyg-actionbar",p="wysiwyg-button",h="wysiwyg-content",f="wysiwyg-focusrect",g="wysiwyg-focuspoint",v="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||u(e.html)!==u(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(u(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:k(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(g)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),s=a.next();!s.done;s=a.next()){switch(s.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,i=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(i=i.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"LÃ¥t bilden flyta vÃ¤nster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"LÃ¥t bilden flyta hÃ¶ger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden pÃ¥ egen rad",result:function(){return e("unfloat")}}])));var o=this.state.focusRect,l=this.props,c=l.readOnly,b=l.reportNumChars,k=l.maxChars;return a.createElement("div",{className:this.props.className},!c&&a.createElement("div",{className:m},i.map(function(e,n){return a.createElement("button",{key:n,className:p,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:c?v:h,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:u(this.props.html)},contentEditable:!c,onPaste:function(e){if(!isNaN(k)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>k&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:NaN)}:null,onKeyPress:isNaN(k)?null:function(e){var t=e.target.innerText;t&&t.length>=k&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){c||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(s.a)("outdent"):Object(s.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),o&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:f,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:g+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:g+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:g+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:g+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function k(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(21),i=n(14),o=n(72);function u(e){return e.course&&e.task&&e.course.length>0&&e.task.length>0?"courseBuilderTask":e.siteVisionPageId?"siteVisionTask":e.courseInfo?"subjectPlannerTask":"customTask"}var l=n(5),c=n.n(l),d=n(69),m=n(7),p=n(9),h=n(19),f=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.courseName,r=t.learningGoals,i=!!this.props.openCourses[n],l=(new d.a,this.context.intl);return a.createElement(s.a,{title:a.createElement("h5",null,n||a.createElement(p.a,{id:"userTasks.goals",defaultMessage:"Egna lÃ¤randemÃ¥l"})),headerOpen:i,className:n&&Object(o.a)("wp-course-",n),onOpenClose:function(t){return e.props.setIsOpen(n,t)}},r.map(function(t){return a.createElement("div",{key:t.name,className:"learningGoalContainer"},t.step&&a.createElement("div",{className:"stepIndicator"},t.step),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"learningGoalText horizontalItem top"},t.name),a.createElement("div",{className:"horizontalItem"},"Â ",a.createElement("a",{className:"trash",href:"#",title:l.formatMessage({id:"userTasks.deleteLearningGoal",defaultMessage:"Ta bort lÃ¤randemÃ¥let och dess uppgifter"}),onClick:function(n){n.preventDefault(),e.props.removeLearningGoal(t)}},a.createElement("i",{className:"fa fa-trash"})))),a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},t.tasks.map(function(t){var n="adding"===t.$meta||"deleting"===t.$meta||"updating"===t.$meta,r=u(t),s=c()(t.deadline).startOf("day")<c()().startOf("day");return a.createElement("div",{key:t.id,style:n?{opacity:.5}:{}},a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(t.done?" checked":""),onClick:function(r){return!n&&e.props.setTaskDone(t,!t.done)}})),a.createElement("div",{className:"horizontalItem top"},"courseBuilderTask"===r?a.createElement("a",{href:g(t,e.props.viewCourseUrl)},t.name):"subjectPlannerTask"===r?a.createElement("a",{href:v(t)},t.name):"siteVisionTask"===r?a.createElement("a",{href:t.url},t.name):a.createElement("a",{className:t.url?"":"link-less",href:t.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank"},t.name),t.deadline&&a.createElement("div",{className:"dateSet"+(s?" expired":"")},a.createElement("i",{title:c()(t.deadline).format("YYYY-MM-DD"),className:"fa fa-calendar","aria-hidden":"true",onClick:function(){}}))),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editTask(t)}}))),t.subTasks&&a.createElement("div",{className:"subtasks"},t.subTasks.map(function(r){return a.createElement("div",{key:r.id},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"checkBox"+(r.done?" checked":""),onClick:function(a){return!n&&e.props.setSubTaskDone(t,r,!r.done)}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:r.url||void 0,target:(t.url+"").toLowerCase().startsWith(location.host.toLowerCase())?"_self":"_blank",className:r.url?void 0:"link-less"},r.name)),a.createElement("div",{className:"horizontalItem top taskEdit"},a.createElement("a",{className:"editItem",onClick:function(){return e.props.editSubTask(t,r)}})))})))}))),a.createElement("div",{className:"learningGoalTools"},a.createElement("div",{className:"btn addOwnGoal",onClick:function(){return e.props.addOwnTask(e.props.courseName,t.name)}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"userTasks.addLearningGoal",defaultMessage:"Eget arbetsmÃ¥l"}))),a.createElement("br",null))}))},t.contextType=h.a,t}(a.Component);function g(e,t){return e.course&&e.course.length>0&&e.task&&e.task.length>0?Object(i.f)(t,{courseId:e.course[0].id})+"#/task/"+e.task[0].id:e.url}function v(e){if(e.courseInfo&&e.task&&e.task.length>0){var t=e.courseInfo,n=t.school,r=t.course,a=t.tab;return Object(i.f)(m.b.KED_SUBJECT_PLANNER_URL,{})+"#/"+n+"/courses/"+r+"/tabs/"+a+"/tasks/"+e.task[0].id}return e.url}var b=n(6),k=n(2);var y=n(73),E=function(e){function t(t){var n=e.call(this,t)||this;return n.state={learningGoal:t.learningGoal||""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state.learningGoal,n=this.props.onSave;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"weekplanner.addLearningGoalTitle",defaultMessage:"LÃ¤gg till eget lÃ¤randemÃ¥l"})),a.createElement("hr",null),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(p.a,{id:"weekplanner.addLearningGoal",defaultMessage:"MÃ¥l"})),a.createElement("div",{className:"horizontalItem top"},a.createElement("input",{type:"text",tabIndex:1,size:50,autoFocus:!0,value:t,onChange:function(t){return e.setState({learningGoal:t.target.value})}})),a.createElement("div",{className:"horizontalItem top spaced"})),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return n(t)}},a.createElement(p.a,{id:"common.save",defaultMessage:"save"}))))},t}(a.Component),w=n(26),T=n(45),S=function(e){function t(t){var n=e.call(this,t)||this;return n.state={name:"",description:"",url:""},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=this.props,o=(i.isTask,i.onSave),u=this.context.intl;return a.createElement("div",null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,a.createElement(p.a,{id:"customTask.addWorkGoalTitle",defaultMessage:"LÃ¤gg till eget arbetsmÃ¥l"})),a.createElement("hr",null),a.createElement(w.a,{label:u.formatMessage({id:"common.nameLabel",defaultMessage:"Namn"}),id:"AddCustomTask:name",placeholder:u.formatMessage({id:"customTask.enterNamePlhd",defaultMessage:"Ange namn..."}),value:n,autoFocus:!0,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{rows:7,label:u.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddCustomTask:description",placeholder:u.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"LÃ¤gg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:u.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"AddCustomTask:url",placeholder:"http://www...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement("div",{className:"sv-html-portlet sv-portlet"},a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return o(n,r,s)}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=h.a,t}(a.Component),D=n(88),N=(n(66),n(32)),C=function(e){function t(t){var n=e.call(this,t)||this;if("edit"===t.mode){var r=t.subTask;n.state={name:r.name||"",description:r.description||"",url:r.url||""}}else n.state={name:"",description:"",url:""};return n}return r.c(t,e),t.prototype.save=function(){var e=this.props,t=e.userTask,n=e.closeDialog,a=e.userTasksRepo,s=this.state,i=s.name,o=s.description,u=s.url;if("edit"===e.mode)a.update([t],function(t){var n=t.subTasks;n&&(t.subTasks=n.map(function(t){return t.id===e.subTask.id?r.a({},t,{name:i,description:o,url:u}):r.a({},t)}))});else{var l={id:Object(b.h)(),name:i,description:o,url:u};a.update([t],function(e){e.subTasks||(e.subTasks=[]),e.subTasks=e.subTasks.concat(l)})}n()},t.prototype.delete=function(){var e=this.props;if("edit"!==e.mode)throw new Error("Can only delete in edit mode");e.userTasksRepo.update([e.userTask],function(t){t.subTasks&&(t.subTasks=t.subTasks.filter(function(t){return t.id!==e.subTask.id}))}),e.closeDialog()},t.prototype.render=function(){var e=this,t=this.state,n=(t.name,t.description,t.url,this.props),r="edit"===n.mode,s=this.context.intl;return a.createElement(a.Fragment,null,a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,r?a.createElement(p.a,{id:"addeditsubtask.editSubtask",defaultMessage:"Redigera underuppgift"}):a.createElement(p.a,{id:"addeditsubtask.addSubtask",defaultMessage:"LÃ¤gg till underuppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:s.formatMessage({id:"addeditsubtask.nameLabel",defaultMessage:"Underuppgiftens namn"}),id:"AddUserSubTask:name",placeholder:"",value:this.state.name,onChange:function(t){return e.setState({name:t})}}),a.createElement(T.a,{label:s.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"AddUserSubTask:description",rows:7,placeholder:"",value:this.state.description,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:s.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"AddUserSubTask:url",placeholder:"",value:this.state.url,onChange:function(t){return e.setState({url:t})}}),a.createElement("br",null)),a.createElement("div",{className:"sv-html-portlet sv-portlet"},"edit"===n.mode&&a.createElement("button",{className:"btn btn-warning btn-large pull-right",onClick:function(t){return e.delete()}},a.createElement(p.a,{id:"addeditsubtask.deleteSubtask",defaultMessage:"Ta bort underuppgift"})),a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))))},t.contextType=h.a,t}(a.Component),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTask:t.userTask,name:t.userTask.name,description:t.userTask.description,url:t.userTask.url,deadline:t.userTask.deadline,subTasks:t.userTask.subTasks},n.onUserTasksChanged=n.onUserTasksChanged.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.userTasksRepo.subscribe(this.onUserTasksChanged)},t.prototype.onUserTasksChanged=function(e){var t=this,n=e.find(function(e){return e.id===t.props.userTask.id});n?this.setState({userTask:n,subTasks:n.subTasks}):this.props.closeDialog()},t.prototype.componentWillUnmount=function(){this.props.userTasksRepo.unsubscribe(this.onUserTasksChanged)},t.prototype.isModified=function(){var e=this.state,t=e.deadline,n=e.description,r=e.name,a=e.url,s=e.userTask;return t!==s.deadline||n!==s.description||r!==s.name||a!==s.url},t.prototype.addSubTask=function(){this.props.openDialog(a.createElement(C,{mode:"add",userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.editSubTask=function(e){this.props.openDialog(a.createElement(C,{mode:"edit",subTask:e,userTask:this.state.userTask,closeDialog:this.props.closeDialog,userTasksRepo:this.props.userTasksRepo}))},t.prototype.render=function(){var e=this,t=this.state,n=t.name,r=t.description,s=t.url,i=t.deadline,o=t.subTasks,l=t.showCalendar,d=t.userTask,m=d.id,h=(d.courseName,this.props),f=h.onUpdate,g=h.onDelete,v=this.isModified(),b="customTask"===u(d),k=c()(d.deadline)<c()(),y=this.context.intl;return a.createElement("div",{className:"editTaskDialog sv-html-portlet sv-portlet sv-skip-spacer"},a.createElement("h2",null,b?a.createElement(p.a,{id:"task.editWorkGoals",defaultMessage:"Redigera arbetsmÃ¥l"}):a.createElement(p.a,{id:"task.editTask",defaultMessage:"Redigera uppgift"})),a.createElement("hr",null),a.createElement(w.a,{autoFocus:!0,label:b?y.formatMessage({id:"task.targetNameLabel",defaultMessage:"ArbetsmÃ¥lets namn"}):y.formatMessage({id:"task.taskNameLabel",defaultMessage:"Uppgiftens namn"}),id:"EditUserTask:name",placeholder:b?y.formatMessage({id:"task.whatShouldYouDoPlhd",defaultMessage:"Vad ska du gÃ¶ra?"}):y.formatMessage({id:"task.enterTaskNamePlhd",defaultMessage:"Ange uppgiftens namn..."}),value:n,onChange:function(t){return e.setState({name:t})}}),b&&a.createElement(a.Fragment,null,a.createElement(T.a,{rows:5,label:y.formatMessage({id:"common.descriptionLabel",defaultMessage:"Beskrivning"}),id:"EditUserTask:description",placeholder:y.formatMessage({id:"common.addDescriptionPlhd",defaultMessage:"LÃ¤gg till en beskrivning..."}),value:r,onChange:function(t){return e.setState({description:t})}}),a.createElement(w.a,{label:y.formatMessage({id:"common.linkLabel",defaultMessage:"LÃ¤nk"}),id:"EdutUserTask:url",placeholder:"http(s)://...",value:s,onChange:function(t){return e.setState({url:t})}})),a.createElement(N.a,{label:y.formatMessage({id:"task.setDeadline",defaultMessage:"Ange deadline"})},i||l?a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement(D.a,{ref:function(t){return e.datePicker=t},id:"EditUserTask:deadline",selected:i&&c()(i),autoFocus:l,dateFormat:"YYYY-MM-DD",className:k?"expired":void 0,showWeekNumbers:!0,locale:y.locale,popperPlacement:b?"top-start":"bottom-start",onBlur:function(){return e.setState({showCalendar:!1})},onChange:function(t){e.setState({deadline:t&&t.format("YYYY-MM-DD"),showCalendar:!1})}})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{className:"deleteDate",href:"#",title:y.formatMessage({id:"task.removeDeadline",defaultMessage:"Ta bort deadline"}),onClick:function(t){t.preventDefault(),e.setState({deadline:null,showCalendar:!1})}}))):a.createElement("div",{className:"top",ref:function(){e.datePicker=null}},a.createElement("a",{className:"btn",onClick:function(t){e.datePicker&&e.datePicker.setOpen(!0),e.setState({showCalendar:!0})}},a.createElement("i",{className:"fa fa-calendar","aria-hidden":"true"}),a.createElement(p.a,{id:"task.setDeadlineLabel",defaultMessage:"Ange deadline..."})))),a.createElement(N.a,{label:y.formatMessage({id:"task.subTasks",defaultMessage:"Underuppgifter"})},a.createElement("div",{className:"learningGoalTasks"},a.createElement("div",{className:"taskContainer"},o&&o.map(function(t){return a.createElement("div",{key:t.id,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{onClick:function(){return e.editSubTask(t)},href:"#"},t.name)))}))),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"top"},a.createElement("button",{id:"EditUserTask:addSubTask",className:"btn",onClick:function(){return e.addSubTask()}},a.createElement("i",{className:"fa fa-plus","aria-hidden":"true"})," ",a.createElement(p.a,{id:"task.addSubtask",defaultMessage:"LÃ¤gg till underuppgift"}))))),a.createElement("div",{className:"divider large"}),a.createElement("div",{className:"align-horizontal"},a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn btn-default",onClick:function(){v?f(function(e){e.name=n,e.description=r,e.url=s,e.deadline=i}):e.props.closeDialog()}},a.createElement(p.a,{id:"common.save",defaultMessage:"Spara"}))),a.createElement("div",{className:"horizontalButton top"},a.createElement("button",{tabIndex:1,className:"btn",onClick:function(){e.props.closeDialog()}},a.createElement(p.a,{id:"common.cancel",defaultMessage:"Avbryt"}))),a.createElement("div",{className:"confirm top pull-right"},a.createElement("button",{tabIndex:1,className:"btn btn-warning",onClick:function(){g(m)}},b?a.createElement(p.a,{id:"task.removeWorkGoals",defaultMessage:"Ta bort arbetsmÃ¥l"}):a.createElement(p.a,{id:"task.removeThisTask",defaultMessage:"Ta bort den hÃ¤r uppgiften"})))))},t.contextType=h.a,t}(a.Component),M=n(13),x=n(74),L=n(47);n.d(t,"a",function(){return j});var j=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),openCourses:{},dialogs:[],saving:!1,weekTextsUT:null,isLoading:!0,isCopyingTasks:!1},n.onChange=n.onChange.bind(n),n.weekTextsSavingJob=new x.a(function(){return n.saveWeekTexts()}),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.env.userTasksRepo.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){this.props.env.userTasksRepo.unsubscribe(this.onChange),this.weekTextsSavingJob.stop()},t.prototype.onChange=function(e,t,n){var r={userTasks:e,weekDate:t.weekDate,openCourses:t.openCourses,weekTextsUT:n,isLoading:!1};this.state.weekTextsUT&&n.dateTime===this.state.weekTextsUT.dateTime||(r.strategy=n.weekTexts.strategy,r.assessment=n.weekTexts.assessment),this.setState(r)},t.prototype.isWeekTextsEdited=function(){var e=this.state,t=e.strategy,n=e.assessment,r=e.weekTextsUT;return!!r&&(t!==r.weekTexts.strategy||n!==r.weekTexts.assessment)},t.prototype.saveWeekTexts=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return console.log("Saving texts..."),e=this.state,t=e.strategy,n=e.assessment,a=e.weekTextsUT,this.isWeekTextsEdited()?[4,this.props.env.userTasksRepo.upsert(a,function(e){e.weekTexts={strategy:t,assessment:n}})]:[3,2];case 1:r.sent(),r.label=2;case 2:return[2]}})})},t.prototype.prevWeek=function(){this.props.env.userTasksRepo.changeWeek(c()(this.state.weekDate).add(-1,"week").toDate())},t.prototype.nextWeek=function(){this.props.env.userTasksRepo.changeWeek(c()(this.state.weekDate).add(1,"week").toDate())},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.openAddGoalDialog=function(){var e=this;this.openDialog(a.createElement(E,{onSave:function(t){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(!t)throw new Error(this.context.intl.formatMessage({id:"weekplanner.emptyLearningGoalErr",defaultMessage:"LÃ¤randemÃ¥let kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),e.label=1;case 1:return e.trys.push([1,,3,4]),[4,this.addCustomGoal(t)];case 2:return e.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),e.label=5;case 5:return[2]}})})}}))},t.prototype.openAddOwnTaskDialog=function(e,t){var n=this;this.openDialog(a.createElement(S,{isTask:!e,onSave:function(a,s,i){return r.b(n,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:if(!a)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameCannotBeEmpty",defaultMessage:"Namnet kan inte vara tomt"}));if(this.state.saving)return[3,5];this.setState({saving:!0}),n.label=1;case 1:return n.trys.push([1,,3,4]),[4,this.addCustomTask(e,t,a,s,i)];case 2:return n.sent(),[3,4];case 3:return this.setState({saving:!1}),[7];case 4:this.closeDialog(),n.label=5;case 5:return[2]}})})}}))},t.prototype.editTask=function(e){var t=this;this.openDialog(a.createElement(O,{userTasksRepo:this.props.env.userTasksRepo,userTask:e,onUpdate:function(n){return r.b(t,void 0,void 0,function(){var t;return r.d(this,function(a){switch(a.label){case 0:if(t=r.a({},e),n(t),!t.name)throw new Error(this.context.intl.formatMessage({id:"weekplanner.nameMustNotBeEmpty",defaultMessage:"Namnet fÃ¥r inte vara tomt"}));return this.closeDialog(),[4,this.props.env.userTasksRepo.update([e],n)];case 1:return a.sent(),[2]}})})},onDelete:function(e){return r.b(t,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return this.closeDialog(),[4,this.props.env.userTasksRepo.delete([e])];case 1:return t.sent(),[2]}})})},openDialog:function(e){return t.openDialog(e)},closeDialog:function(){return t.closeDialog()}}))},t.prototype.editSubTask=function(e,t){var n=this;this.openDialog(a.createElement(C,{userTasksRepo:this.props.env.userTasksRepo,mode:"edit",userTask:e,subTask:t,closeDialog:function(){return n.closeDialog()}}))},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.addCustomGoal=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),learningGoal:e,dateTime:t+2e3}])];case 1:return n.sent(),[4,this.props.env.userTasksRepo.setWeekPlannerBoxOpen("",!0)];case 2:return n.sent(),[2]}})})},t.prototype.removeLearningGoal=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return e.tasks.length>0&&!confirm(this.context.intl.formatMessage({id:"weekplanner.confirmRemoveLearningObjectives",defaultMessage:"Ta bort lÃ¤randemÃ¥l samt {learningGoalsNumber} uppgifter?"},{learningGoalsNumber:e.tasks.length}))?[2]:[4,this.props.env.userTasksRepo.delete(e.allTasks.map(function(e){return e.id}))];case 1:return t.sent(),[2]}})})},t.prototype.addCustomTask=function(e,t,n,a,s){return r.b(this,void 0,void 0,function(){var i;return r.d(this,function(r){switch(r.label){case 0:return i=Math.max.apply(Math.max,[this.state.weekDate].concat(this.state.userTasks.map(function(e){return e.dateTime}))),[4,this.props.env.userTasksRepo.insert([{id:Object(b.h)(),dateTime:i+2e3,courseName:e,learningGoal:t,name:n,description:a,url:s}])];case 1:return r.sent(),[2]}})})},t.prototype.setIsOpen=function(e,t){this.props.env.userTasksRepo.setWeekPlannerBoxOpen(e,t)},t.prototype.setTaskDone=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.userTasksRepo.setTaskDoneState(e,t)];case 1:return n.sent(),[2]}})})},t.prototype.setSubTaskDone=function(e,t,n){return r.b(this,void 0,void 0,function(){return r.d(this,function(r){switch(r.label){case 0:return[4,this.props.env.userTasksRepo.setSubTaskDoneState(e,t.id,n)];case 1:return r.sent(),[2]}})})},t.prototype.copyFromPreviousWeek=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,u;return r.d(this,function(l){switch(l.label){case 0:return[4,this.setState({isCopyingTasks:!0})];case 1:l.sent(),l.label=2;case 2:return l.trys.push([2,,5,6]),e=this.state,t=e.userTasks,e.openCourses,n=e.weekDate,a=Object(L.b)(c()(n).add(-1,"week")),s=Object(L.a)(c()(n).year(),a),[4,this.props.env.kedBackendClient.list("usertasks",{from:s.notBefore,to:s.notAfter,role:"USER",include:["task","course","acl"],flags:["includeIdsOnly"]})];case 3:return i=(i=l.sent()).filter(function(e){return!e.done}).filter(function(e){return!!e.name}).filter(function(e){return!t.some(function(t){return t.name===e.name&&t.learningGoal===e.learningGoal&&t.courseName===e.courseName})}),o=Math.max.apply(Math.max,[n].concat(t.map(function(e){return e.dateTime}))),u=i.sort(Object(k.g)("dateTime")).map(function(e){var t=r.a({},e,{dateTime:o+=1e3});return t.id=Object(b.h)(),t.subTasks&&(t.subTasks=t.subTasks.filter(function(e){return!e.done})),delete t.$etag,t}),[4,this.props.env.userTasksRepo.insert(u)];case 4:return l.sent(),[3,6];case 5:return this.setState({isCopyingTasks:!1}),[7];case 6:return[2]}})})},t.prototype.render=function(){var e=this,t=c()(this.state.weekDate).week(),n=c()().week(),i=function(e){var t,n,a,s,i=[],o=Object(k.b)(e,function(e){return e.courseName||""});try{for(var u=r.h(Object.keys(o).sort().filter(function(e){return e}).concat(o[""]?[""]:[])),l=u.next();!l.done;l=u.next()){var c=l.value,d=o[c]||o[""],m=Object(k.b)(d,function(e){return e.learningGoal}),p=[];try{for(var h=r.h(Object.keys(m)),f=h.next();!f.done;f=h.next()){var g=f.value,v=m[g].sort(Object(k.g)("dateTime")),b=v.filter(function(e){return null==e.name})[0],y=b&&b.url;p.push({name:g,allTasks:v,url:y,step:v.map(function(e){return e.step}).filter(function(e){return e})[0],tasks:v.filter(function(e){return e.name})})}}catch(e){a={error:e}}finally{try{f&&!f.done&&(s=h.return)&&s.call(h)}finally{if(a)throw a.error}}i.push({courseName:c,learningGoals:p})}}catch(e){t={error:e}}finally{try{l&&!l.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return i}(this.state.userTasks),o=this.state,u=o.dialogs,l=o.weekTextsUT,d=o.strategy,m=o.assessment,h=o.isLoading,g=o.isCopyingTasks,v=l&&("adding"===l.$meta||"updating"===l.$meta),b=!!l&&d!==l.weekTexts.strategy,E=!!l&&m!==l.weekTexts.assessment,w=!v&&(b||E);return a.createElement("div",null,a.createElement("div",{className:"ked_boxed weekPlanner"+(t===n?" currentWeek":""),onKeyDown:function(t){83===t.which&&t.ctrlKey&&(t.preventDefault(),!v&&e.isWeekTextsEdited()&&e.weekTextsSavingJob.triggerChange(0))}},a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.weekNumber",values:{weekNumber:t},defaultMessage:"Vecka {weekNumber}"}))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.prevWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.nextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))))),a.createElement("h4",null,a.createElement(p.a,{id:"weekplanner.logBook",defaultMessage:"Loggbok"})),i.length>0&&a.createElement("hr",null),i.map(function(t){return a.createElement(f,r.a({key:t.courseName},t,{courseName:t.courseName,learningGoals:t.learningGoals,viewCourseUrl:e.props.viewCourseUrl,openCourses:e.state.openCourses,addOwnTask:function(t,n){return e.openAddOwnTaskDialog(t,n)},setIsOpen:e.setIsOpen.bind(e),setTaskDone:e.setTaskDone.bind(e),setSubTaskDone:e.setSubTaskDone.bind(e),editTask:function(t){return e.editTask(t)},editSubTask:function(t,n){return e.editSubTask(t,n)},removeLearningGoal:function(t){return e.removeLearningGoal(t)}}))}),a.createElement("hr",null),h?a.createElement(M.a,null):a.createElement("div",null,a.createElement("div",{className:"btn",onClick:function(t){return e.openAddGoalDialog()}},a.createElement("i",{className:"fa fa-list-alt","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.learningGoal",defaultMessage:"Eget lÃ¤randemÃ¥l"})),a.createElement("div",{className:"btn",style:g?{opacity:.5}:void 0,onClick:function(t){return!g&&e.copyFromPreviousWeek()}},a.createElement("i",{className:"fa fa-clone","aria-hidden":"true"}),a.createElement(p.a,{id:"weekplanner.copyPreviousWeekTaks",defaultMessage:"Kopiera ej klara frÃ¥n fÃ¶regÃ¥ende vecka"})),a.createElement(s.a,{title:a.createElement("h5",null,a.createElement(p.a,{id:"weekplanner.strategyAndEvaluation",defaultMessage:"Strategi & UtvÃ¤rdering"})),headerOpen:this.state.openCourses.StratUtv,onOpenClose:function(t){return e.setIsOpen("StratUtv",t)}},a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.strategy",defaultMessage:"Strategi"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.strategyDescription",defaultMessage:"Hur jag ska gÃ¶ra fÃ¶r att lÃ¤ra mig."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",disabled:this.props.env.tutored,value:d&&d.substr(0,16384),onChange:function(t){e.setState({strategy:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("h3",null,a.createElement(p.a,{id:"weekplanner.evaluation",defaultMessage:"UtvÃ¤rdering"})),a.createElement("p",null,a.createElement(p.a,{id:"weekplanner.evaluationDescription",defaultMessage:"Reflektion kring din arbetsinsats och dina valda strategier under veckan.UtvÃ¤rdera i fÃ¶rhÃ¥llande till dina mÃ¥l."})),a.createElement("hr",null),a.createElement("textarea",{className:"weekplanner-textarea",value:m&&m.substr(0,16384),disabled:this.props.env.tutored,onChange:function(t){e.setState({assessment:(t.target.value||"").substr(0,16384)}),e.weekTextsSavingJob.triggerChange(500)}}),a.createElement("div",{className:"btn",tabIndex:0,style:w?{}:{opacity:.5},onClick:function(){return!v&&e.weekTextsSavingJob.triggerChange(0)}},a.createElement("i",{className:"fa fa-floppy-o","aria-hidden":"true"}),w?a.createElement(p.a,{id:"common.save",defaultMessage:" Spara"}):a.createElement(p.a,{id:"common.saved",defaultMessage:" Sparad"}))))),a.createElement(y.a,{dialogs:u,popDialog:function(){e.setState(function(e){var t=e.dialogs;return{dialogs:t.slice(0,t.length-1)}})}}))},t.contextType=h.a,t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return f});var r=n(1),a=n(9),s=n(86),i=n.n(s),o=n(87),u=n.n(o),l=n(57),c=n(58),d=n(0),m=n(7),p=n(5),h=n.n(p),f=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(i.a,u.a)),n.messages={sv:l,en:c},h()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},function(e){e.exports={"addeditsubtask.addSubtask":"LÃ¤gg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"LÃ¤gg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"FÃ¶r tillfÃ¤llet problem att spara data. Dina Ã¤ndringar sparades inte.","common.changesNotSavedUnauthorized":"Ãndringarna sparades inte p.g.a. otillrÃ¤cklig behÃ¶righet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"LÃ¤nk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","customTask.addWorkGoalTitle":"LÃ¤gg till eget arbetsmÃ¥l","customTask.enterNamePlhd":"Ange namn...","task.addSubtask":"LÃ¤gg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmÃ¥l","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den hÃ¤r uppgiften","task.removeWorkGoals":"Ta bort arbetsmÃ¥l","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"ArbetsmÃ¥lets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du gÃ¶ra?","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"TerminsmÃ¥l","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"VT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vÃ¤nta medan terminsplaner laddas...","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"HT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida fÃ¶r komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmÃ¥l","userTasks.deleteLearningGoal":"Ta bort lÃ¤randemÃ¥let och dess uppgifter","userTasks.goals":"Egna lÃ¤randemÃ¥l","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"MÃ¥l:","weekplanner.addLearningGoalTitle":"LÃ¤gg till eget lÃ¤randemÃ¥l","weekplanner.confirmRemoveLearningObjectives":"Ta bort lÃ¤randemÃ¥l samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara frÃ¥n fÃ¶regÃ¥ende vecka","weekplanner.emptyLearningGoalErr":"LÃ¤randemÃ¥let kan inte vara tomt","weekplanner.evaluation":"UtvÃ¤rdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.UtvÃ¤rdera i fÃ¶rhÃ¥llande till dina mÃ¥l.","weekplanner.learningGoal":"Eget lÃ¤randemÃ¥l","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet fÃ¥r inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi &amp; UtvÃ¤rdering","weekplanner.strategyDescription":"Hur jag ska gÃ¶ra fÃ¶r att lÃ¤ra mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"VÃ¥grÃ¤t linje","wysiwyg.link":"Infoga lÃ¤nk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.yoga":"Yoga","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy &amp; Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(3),i=n(5),o=n.n(i),u=n(6),l=n(27),c=n(2);function d(e){return a.createElement("div",{className:"confirmation-box "+e.className+(e.visible?" visible":"")},a.createElement("p",null,e.text),a.createElement("button",{onClick:function(){return e.onConfirm()}},"OK"),a.createElement("button",{onClick:function(){return e.onCancel()}},"Avbryt"))}n.d(t,"a",function(){return v});var m,p,h,f,g,v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={userTasks:[],weekDate:Date.now(),confirmations:[]},n.onChange=n.onChange.bind(n),n}return r.c(t,e),t.prototype.onChange=function(e,t){t.weekDate!==this.state.weekDate&&this.setState({confirmations:[]}),this.setState({userTasks:e,weekDate:t.weekDate})},t.prototype.componentDidMount=function(){l.b.subscribe(this.onChange)},t.prototype.componentWillUnmount=function(){l.b.unsubscribe(this.onChange)},t.prototype.toggleTask=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.state.userTasks.filter(function(t){return e.task?t.task&&t.task.some(function(t){return t.id===e.id}):t.siteVisionPageId===e.id}),n=this.state.weekDate,0!==t.length?[3,2]:(a=Math.max.apply(Math.max,[n].concat(this.state.userTasks.map(function(e){return e.dateTime}))),i={id:Object(u.h)(),courseName:e.courseName,dateTime:a+2e3,learningGoal:e.learningGoal,name:e.name,url:e.url,acl:[new u.b("email",s.a.currentUser.mail,"S"),new u.b("schoolRole",s.a.currentUser.school+"/EMPLOYEE","R")].map(function(e){return e.toString()})},e.task&&e.task.deadline&&(i.deadline=e.task.deadline),e.task?(i.task=[e.task],e.course?i.course=[e.course]:e.courseInfo&&(i.courseInfo=e.courseInfo)):i.siteVisionPageId=e.id,e.step&&(i.step=e.step),[4,Promise.all([l.b.setWeekPlannerBoxOpen(e.courseName,!0),l.b.insert([i])])]);case 1:return r.sent(),[3,4];case 2:return[4,l.b.delete(t.map(function(e){return e.id}))];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props.learningTasks,n=Object(c.c)(this.state.userTasks,function(e){return e.task&&e.task.length>0?e.task.map(function(e){return e.id})[0]:e.siteVisionPageId?e.siteVisionPageId:e.url}),s=this.state.confirmations,i=o()(this.state.weekDate).week(),u=o()().week(),l=i===u?"":i===u+1?Object(c.a)(m||(m=r.e(["fÃ¶r nÃ¤sta vecka (v",")"],["fÃ¶r nÃ¤sta vecka (v",")"])),i):i===u-1?Object(c.a)(p||(p=r.e(["fÃ¶r fÃ¶rra veckan (v",")"],["fÃ¶r fÃ¶rra veckan (v",")"])),i):Object(c.a)(h||(h=r.e(["fÃ¶r vecka ",""],["fÃ¶r vecka ",""])),i);return a.createElement("div",{className:"taskContainer"},t.map(function(t,o){var m=t.id,p=n[m]||{$meta:"deleted"},h="adding"===p.$meta||"deleting"===p.$meta,v="deleted"!==p.$meta&&"deleting"!==p.$meta,b=v?Object(c.a)(f||(f=r.e(["Ta bort uppgiften frÃ¥n egen veckoplanering ",""],["Ta bort uppgiften frÃ¥n egen veckoplanering ",""])),l):Object(c.a)(g||(g=r.e(["LÃ¤gg till uppgiften i egen veckoplanering ",""],["LÃ¤gg till uppgiften i egen veckoplanering ",""])),l),k=s.some(function(e){return m===e});return a.createElement("div",{key:t.id},a.createElement("div",{key:m,className:"align-horizontal"},a.createElement("div",{className:"horizontalItem top"},a.createElement("div",{className:"selectedBox"+(v?" selected":""),style:h?{opacity:.5}:{},onClick:function(){return h||i!==u?k?e.setState({confirmations:s.filter(function(e){return e!==m})}):e.setState({confirmations:r.g(s).concat(m)}):e.toggleTask(t)},title:b})),a.createElement("div",{className:"horizontalItem top"},a.createElement("a",{href:t.url},t.name))),a.createElement(d,{visible:k,text:b,onConfirm:function(){e.toggleTask(t),e.setState({confirmations:s.filter(function(e){return e!==m})})},onCancel:function(){e.setState({confirmations:s.filter(function(e){return e!==m})})}}))}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return m});var r=n(1),a=n(52),s=n(3),i=n(2),o=n(6),u=n(42),l=n(25),c=n(5),d=n.n(c),m=s.a.hiddenCoursesRepo,p=function(){function e(){var e=this;this.result=null,this.subscribers=[],this.fullCourse=!1,this.notifySubscriber=function(t,n){try{t(n.fullCourse?e.result:e.result.filter(function(e){return e.visible}))}catch(e){console.error(e)}},this.kedRepo=new a.a({getClient:function(){return s.a.kedBackendClient},optimistic:!0,table:"userhiddencourses",user:s.a.currentUser?s.a.currentUser.mail:"",getQueryOptions:function(){return r.b(e,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}});var t=this.init();Promise.all([t,this.kedCoursesPromise,this.edsCoursesPromise]).catch(function(e){return Object(i.n)(e)})}return e.prototype.init=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a=this;return r.d(this,function(i){switch(i.label){case 0:return e=s.a.bearerProvider?s.a.bearerProvider.getBearer():Promise.resolve({}),this.kedCoursesPromise=e.then(function(){return a.listKedCourses()}),this.edsCoursesPromise=e.then(function(){return a.listEDSCourses()}),n=!1,this.userHiddenCoursesPromise=new Promise(function(e){return t=function(t){n?a.userHiddenCoursesPromise=Promise.resolve(t):(n=!0,e(t))}}),[4,e];case 1:return i.sent(),this.kedRepo.mem.subscribe(function(e){return r.b(a,void 0,void 0,function(){var n,a,s,i,o=this;return r.d(this,function(u){switch(u.label){case 0:return[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise])];case 1:return n=r.f.apply(void 0,[u.sent(),2]),a=n[0],s=n[1],i=this,[4,this.createCoursesList(s,e,a)];case 2:return i.result=u.sent(),this.subscribers.forEach(function(e){return o.notifySubscriber(e.subscriber,e.options)}),t(e),[2]}})})}),[2]}})})},e.prototype.listKedCourses=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:return e=this.fullCourse,console.log("FullCourse: "+e),[4,s.a.kedBackendClient.list("schools",{role:"USER",name:s.a.currentUser.school,include:"activeCourses",flags:e?[]:["includeIdsAndNamesOnly"],cacheBust:s.a.currentUser.username})];case 1:return t=n.sent(),[2,Object(i.k)(t.map(function(e){return e.activeCourses})).sort(Object(i.g)("name"))]}})})},e.prototype.listEDSCourses=function(){var e=new u.a(Object(l.c)(d()())).period;return-1===s.a.currentUser.roles.indexOf("EMPLOYEE")?s.a.edsClient.getActiveCourses({periodName:e}):null},e.prototype.createCoursesList=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,o,u,l,c=this;return r.d(this,function(d){switch(d.label){case 0:return a=Object(i.c)(t.filter(function(e){return!e.show}),function(e){return e.name}),o=Object(i.c)(t.filter(function(e){return e.show}),function(e){return e.name}),u=s.a.currentUser.roles.some(function(e){return"STUDENT"===e}),l=e?Object(i.c)(e,function(e){return e.name}):{},[4,Promise.all(n.map(function(e){var t=e.id,n=e.name,s=e.description,i=e.modifiedBy;return r.b(c,void 0,void 0,function(){var e,c,d;return r.d(this,function(r){return e=l[n],d=(c=!u||null!=e)?!a[t]:!!o[t],i&&i.name&&!s&&(s=i.name+"s version"),[2,{id:t,name:n,description:s,visible:d,defaultVisible:c}]})})}))];case 1:return[2,d.sent().sort(function(e,t){var n=e.name,r=t.name;return n<r?-1:n>r?1:0})]}})})},e.prototype.hideCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.insert([{id:Object(o.h)(),name:e.id}])]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.delete(t.map(function(e){return e.id}))];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.showCourse=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=this.kedRepo.mem.items.filter(function(t){return t.name===e.id}),e.defaultVisible?[4,this.kedRepo.delete(t.map(function(e){return e.id}))]:[3,2];case 1:return n.sent(),[3,4];case 2:return[4,this.kedRepo.insert([{id:Object(o.h)(),name:e.id,show:!0}])];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.subscribe=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o;return r.d(this,function(u){switch(u.label){case 0:return this.fullCourse||!t.fullCourse?[3,3]:(this.fullCourse=t.fullCourse,this.kedCoursesPromise=this.listKedCourses(),[4,Promise.all([this.kedCoursesPromise,this.edsCoursesPromise,this.userHiddenCoursesPromise])]);case 1:return n=r.f.apply(void 0,[u.sent(),3]),a=n[0],s=n[1],i=n[2],o=this,[4,this.createCoursesList(s,i,a)];case 2:o.result=u.sent(),u.label=3;case 3:return[4,this.userHiddenCoursesPromise];case 4:return u.sent(),this.notifySubscriber(e,t),this.subscribers.push({subscriber:e,options:t}),[2]}})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t.subscriber!==e})},e}();m||(m=s.a.hiddenCoursesRepo=new p)},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"AdministratÃ¶r",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Carl Holmberg",mail:"carl.holmberg@kunskapsgymnasiet.se",roles:["ADMIN","EMPLOYEE"],school:"NorrkÃ¶ping",username:"carl.holmberg@kunskapsgymnasiet.se"},{displayName:"Carl",mail:"carl@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"carl"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-LÃ¤rare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev BorÃ¥s",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"BorÃ¥s",schoolType:"Grundskolor"},{displayName:"Elev BorlÃ¤nge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"BorlÃ¤nge",schoolType:"Gymnasium"},{displayName:"Roll-lÃ¶s",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(5),a=n.n(r),s=n(7);"sv"===s.b.KED_LOCALE&&a.a.updateLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"sÃ¶ndag_mÃ¥ndag_tisdag_onsdag_torsdag_fredag_lÃ¶rdag".split("_"),weekdaysShort:"sÃ¶n_mÃ¥n_tis_ons_tor_fre_lÃ¶r".split("_"),weekdaysMin:"sÃ¶_mÃ¥_ti_on_to_fr_lÃ¶".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[IgÃ¥r] LT",nextWeek:"[PÃ¥] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"fÃ¶r %s sedan",s:"nÃ¥gra sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en mÃ¥nad",MM:"%d mÃ¥nader",y:"ett Ã¥r",yy:"%d Ã¥r"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t?"a":2===t?"a":"e")},week:{dow:1,doy:4}});var i=function(){return a.a.apply(this,arguments).locale(s.b.KED_LOCALE)}},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";var r=n(16),a=n(3),s=function(){return function(){a.a.currentUser,(Object(r.b)(location.search,{toLower:!0}).features||"").split(",").map(function(e){return e.toLowerCase()})}}();n.d(t,"a",function(){return s})},,function(e,t,n){"use strict";var r=n(12);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(r.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt((void 0).promptMsg);e&&Object(r.a)("insertImage",e)}}}},function(e,t,n){"use strict";function r(e,t){return""+e+t.substr(0,3).toLowerCase()}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(1),a=n(0),s=n(35),i=n(39),o=n(11),u=n.n(o),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.componentDidUpdate=function(e){null!==this.lastDiv&&e.dialogs.length>this.props.dialogs.length&&u()(Object(i.findDOMNode)(this.lastDiv)).find(":input").first().focus()},t.prototype.render=function(){var e=this;this.lastDiv=null;var t=this.props,n=t.dialogs,r=t.popDialog;return u()("body").attr("aria-disabled",n.length>0),u()("body").css("overflow",n.length>0?"hidden":"auto"),n.length>0&&a.createElement("div",null,n.map(function(t,o){var l;return a.createElement("div",{key:o},a.createElement("div",{className:"darken"}),a.createElement("div",{className:"modal-page-wrap"},a.createElement("div",{className:"modal-page",ref:function(t){l=t,o===n.length-1&&(e.lastDiv=t)},tabIndex:0,"aria-disabled":o<n.length-1,onKeyPress:function(e){13!==e.which||e.target&&"TEXTAREA"===e.target.tagName||u()(Object(i.findDOMNode)(l)).find(".btn-default").click(),e.stopPropagation()},onKeyDown:function(e){if(27===e.which)return r(),void e.stopPropagation();if(83===e.which&&(e.ctrlKey||e.metaKey)){var t=Object(i.findDOMNode)(l);e.preventDefault(),u()(t).find(".btn-default").click(),e.stopPropagation()}}},t,a.createElement(s.a,{onClick:r}),a.createElement("div",{className:"stopFloats"}))))}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.timeoutId=null,this.cancelled=!1,this.pending=!1,this.isJobExecuting=!1,this.jobCallback=e}return e.prototype.triggerChange=function(e){var t=this;this.cancelled||(this.pending=!0,null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=setTimeout(function(){return t.launchJob()},e))},e.prototype.stop=function(){null!==this.timeoutId&&clearTimeout(this.timeoutId),this.timeoutId=null,this.cancelled=!0},e.prototype.launchJob=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:if(this.cancelled)return[2];if(!this.pending)return[2];if(this.isJobExecuting)return[2];this.timeoutId=null,e.label=1;case 1:return e.trys.push([1,,3,4]),this.isJobExecuting=!0,this.pending=!1,[4,this.jobCallback()];case 2:return e.sent(),[3,4];case 3:return this.isJobExecuting=!1,[7];case 4:return this.pending?[4,this.launchJob()]:[3,6];case 5:e.sent(),e.label=6;case 6:return[2]}})})},e}()},,,,,,,,,,,,,,,function(e,t,n){"use strict";var r=n(7);r.b.ENVIRONMENT="test",r.b.KED_API_URL="https://backend.kedschools.com/kedbackend/api/",r.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",r.b.KED_TOKEN_URL="",r.b.KED_CLIENT_ID="",r.b.KED_CLIENT_SECRET="",r.b.KED_REALM="SE1",r.b.KED_LOCALE=r.b.KED_LOCALE||"sv",r.b.KED_SCHOOL_LOCALE=r.b.KED_SCHOOL_LOCALE||"sv";var a=n(1),s=n(16),i=n(20),o=n(6),u=n(3),l=n(14),c=n(2);function d(e,t,n){var r=Object(s.b)(t),i=Object(c.e)(r,l.a),o=a.f(Object(s.c)(e),2),u=o[0],d=o[1],m=Object(s.b)(d);return u+Object(s.a)(a.a({},m,i,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function p(e,t,n){return new o.e(i.c,i.d,e+t.mail+location.search,r.b.KED_CLIENT_ID,r.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var h,f,g=u.a.currentUser&&u.a.currentUser.mail;if(g)if(r.b.KED_TOKEN_PATH){var v=d(r.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);u.a.bearerProvider=(f=m(h=v,g),new i.b(h,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){u.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,f),{token:t.token,expires:Date.now()+354e4}},f)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(u.a.currentUser=JSON.parse(t))}(m(v,g));var b=d(r.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);u.a.googleTokenProvider=function(e,t){var n=m(e,t);return new i.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,g)}else{if(!(r.b.KED_TOKEN_URL&&r.b.KED_CLIENT_ID&&r.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");u.a.bearerProvider=p(r.b.KED_TOKEN_URL,u.a.currentUser,["kedbackend","EDS"]),u.a.googleTokenProvider=p(r.b.KED_TOKEN_URL+"/google",u.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}u.a.kedBackendClient=new i.a(r.b.KED_API_URL,u.a.bearerProvider);var k=n(42);u.a.edsClient=new k.b(i.c,r.b.EDS_API_URL,u.a.bearerProvider,function(){return u.a.currentUser.mail})},,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(3),i=n(121),o=function(e){function t(t){var n=e.call(this,t)||this;return n.onEnvUpdated=n.onEnvUpdated.bind(n),n.state={env:t.tutored?null:s.a},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.props.tutored&&i.a.subscribe(this.onEnvUpdated)},t.prototype.componentWillUnmount=function(){this.props.tutored&&i.a.unsubscribe(this.onEnvUpdated)},t.prototype.onEnvUpdated=function(e){this.setState({env:e})},t.prototype.render=function(){var e=this.state.env;return e?e.kedBackendClient?this.props.createComponent(e):a.createElement("div",null,"Laddar..."):a.createElement("div",null)},t}(a.Component)},,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(65);function s(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"VÃ¤lj anvÃ¤ndare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,s=e.school,i=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===i.length?{fontStyle:"italic"}:{}},0===i.length?"saknar roller":i.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:s?{}:{fontStyle:"italic"}},s||"saknar skola"))}))))}},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(11),i=n.n(s),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editMode:!1,runtimeStyle:null,text:t.text||""},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){this.props.text!==e.text&&this.setState({text:e.text||""})},t.prototype.render=function(){var e=this,t=this.state.text||"";return a.createElement("div",{className:"renameable-text"+(t?"":" unnamed")+(this.props.readOnly?" disabled":""),tabIndex:this.state.editMode?void 0:0,onFocus:function(t){e.rename()},style:{width:"100%"}},a.createElement("div",{ref:function(t){return e.label=t},style:{display:this.state.editMode?"none":""}},t||this.props.clickAdvertiseText),"textarea"===this.props.tag?a.createElement("textarea",{ref:function(t){return e.input=t},maxLength:this.props.maxChars,style:r.a({},this.state.runtimeStyle,{display:this.state.editMode?"":"none"}),onFocus:function(e){return i()(e.target).select()},onBlur:this.onBlur.bind(this),value:t,onKeyDown:this.onKeyDown.bind(this),onChange:this.onChange.bind(this),tabIndex:this.state.editMode?0:void 0,placeholder:this.props.placeholder}):a.createElement("input",{ref:function(t){return e.input=t},type:"text",maxLength:this.props.maxChars,style:r.a({},this.state.runtimeStyle,{display:this.state.editMode?"":"none"}),onFocus:function(e){return i()(e.target).select()},onBlur:this.onBlur.bind(this),value:t,onKeyDown:this.onKeyDown.bind(this),onChange:this.onChange.bind(this),tabIndex:this.state.editMode?0:void 0,placeholder:this.props.placeholder}))},t.prototype.onKeyDown=function(e){27===e.keyCode?(this.input.value=this.props.text||"",this.input.blur(),e.stopPropagation()):13===e.keyCode&&(this.propagateOnChange(this.input.value),this.setState({editMode:!1,text:this.input.value}))},t.prototype.onBlur=function(e){this.propagateOnChange(this.input.value),this.setState({editMode:!1,text:this.input.value})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t.prototype.onChange=function(e){this.setState({text:this.input.value}),this.props.eager&&this.propagateOnChange(this.input.value)},t.prototype.rename=function(e){var t=this;if(!this.state.editMode&&!this.props.readOnly){e=e||this.state.text||"";var n=i()(this.label);this.setState({text:e,editMode:!0,runtimeStyle:{textAlign:n.css("textAlign"),fontSize:n.css("font-size"),paddingTop:n.css("paddingTop"),paddingBottom:n.css("paddingBottom"),paddingLeft:n.css("paddingLeft"),paddingRight:n.css("paddingRight"),marginTop:n.css("marginTop"),marginBottom:n.css("marginBottom"),marginLeft:n.css("marginLeft"),marginRight:n.css("marginRight"),borderRadius:n.css("borderRadius"),backgroundColor:n.css("backgroundColor"),lineHeight:n.css("lineHeight"),fontWeight:n.css("fontWeight"),outLine:0,borderStyle:"none",height:"100%",width:"100%",boxSizing:"border-box"}},function(){return i()(t.input).focus()})}},t}(a.Component)},,function(e,t){},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r,a,s=n(1),i=n(0),o=n(7),u=n(2),l=n(13),c=n(16),d=n(14),m=n(61),p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,courses:[],headerOpen:!1},n.updateHiddenCourses=n.updateHiddenCourses.bind(n),n}return s.c(t,e),t.prototype.componentWillMount=function(){m.a.subscribe(this.updateHiddenCourses,{fullCourse:!0})},t.prototype.componentWillUnmount=function(){m.a.unsubscribe(this.updateHiddenCourses)},t.prototype.updateHiddenCourses=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.hideCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(r||(r=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.hideCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.showCourse=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return Object(u.o)(Object(u.a)(a||(a=s.e(["Sparar..."],["Sparar..."])))),[4,m.a.showCourse(e)];case 1:return t.sent(),Object(u.o)(""),[2]}})})},t.prototype.render=function(){var e=this;if(this.state.isLoading)return i.createElement(l.a,null);var t=this.state.courses,n=t.filter(function(e){return e.visible}),r=t.filter(function(e){return!e.visible}),a=Object(c.b)(location.search),u=o.b.KED_COURSE_VIEWER_URL;return i.createElement("div",{className:"ked_boxed"},i.createElement("h3",null,"Skolans kurser"),i.createElement("div",{className:"taskContainer odd-even"},n.map(function(t){return i.createElement("div",{className:"studentCourse",key:t.id},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top pull-right"},i.createElement("a",{className:"hideItem",onClick:function(){return e.hideCourse(t)}})),i.createElement("div",{className:"horizontalItem top"},i.createElement("a",{href:Object(d.f)(u,{courseId:t.id})},t.name))),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",{className:"small"},t.description)))})),i.createElement("div",{className:"openClose"+(this.state.headerOpen?" open":"")},i.createElement("div",{className:"openHeader",onClick:function(){return e.setState({headerOpen:!e.state.headerOpen})}},i.createElement("h5",null,"Dolda kurser")),i.createElement("div",{className:"openContent"},i.createElement("div",{className:"taskContainer odd-even"},r.map(function(t){return i.createElement("div",{className:"studentCourse",key:t.id},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top pull-right"},i.createElement("a",{className:"showItem",onClick:function(){return e.showCourse(t)}})),i.createElement("a",{href:Object(c.a)(s.a({},a,{courseId:t.id}))},t.name)),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",{className:"small"},t.description)))})))))},t}(i.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(59),i=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.commonTasks,n=e.learningGoals;return a.createElement("div",null,n.map(function(e){return a.createElement("div",{key:e.name},a.createElement("h5",null,e.name),a.createElement(s.a,{learningTasks:e.learningTasks}))}),t.length>0&&a.createElement("div",null,n.length>0&&a.createElement("h5",null,"Ãvergripande"),a.createElement(s.a,{learningTasks:t})))},t}(a.Component)},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(5),i=n.n(s);function o(e,t){var n=i()(new Date(t.firstTerm.startDate)),r=i()(new Date(t.firstTerm.endDate)),a=i()(new Date(t.secondTerm.startDate)),s=i()(new Date(t.secondTerm.endDate)),o=n.year()+"/"+s.year(),l=u(t.holidays,n,r);if(e<r){var c=1,d=r.week()-n.week();return{term:"AT",academicYearStructure:{academicYear:o,startDate:n,endDate:r,academicStartWeek:c,academicEndWeek:d,holidays:l}}}var m=function(e){var t=0;return e.forEach(function(e){t+=i()(e.endDate).add(1,"week").week()-i()(e.startDate).week()}),t}(l);c=a.clone().add(1,"week").week()-n.week()-m,d=s.clone().add().add(1,"week").week()-n.week()-m;return{term:"ST",academicYearStructure:{academicYear:o,startDate:a,endDate:s,academicStartWeek:c,academicEndWeek:d,holidays:l=u(t.holidays,a,s)}}}function u(e,t,n){return e.filter(function(e){return i()(e.startDate).isBetween(t,n)})}function l(e){var t=e.shortName;return"MA"===t?"Ma":"EN"===t?"Eng":t.startsWith("SV")?"Sv/SvA":t.startsWith("M2")?"M.spr":null}var c=function(){function e(e,t,n){this.locale=t||"sv",this.selectedDate=e,this.schoolMoment=n?o(i()(e),n):null}return e.prototype.getTermStartAndEnd=function(e){var t=this.schoolMoment.academicYearStructure.startDate.clone().startOf("week");t.year()<this.schoolMoment.academicYearStructure.startDate.year()&&(t=this.schoolMoment.academicYearStructure.startDate);var n=this.schoolMoment.academicYearStructure.endDate;return"sv"===this.locale&&e&&"ST"===this.schoolMoment.term?n=n.clone().add(3,"weeks").endOf("week"):e&&("sv"!=this.locale&&(n=this.schoolMoment.academicYearStructure.endDate.clone()),n=this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").endOf("week")),[t,n]},e.prototype.getFirstAndLastWeekOfTerm=function(){return[this.schoolMoment.academicYearStructure.startDate.week(),this.schoolMoment.academicYearStructure.endDate.week()]},e.prototype.isCurrentWeek=function(e){var t=i()(e);return t.year()===i()().year()&&t.week()===i()().week()},e.prototype.getLastStepWeek=function(e){return"sv"===e?"ST"===this.schoolMoment.term?28:52:this.schoolMoment.academicYearStructure.endDate.clone().add(1,"week").week()},e.prototype.toLocaleString=function(e,t){if(this.schoolMoment){var n=this.schoolMoment.academicYearStructure.endDate.year().toString();return t&&(n=n.substr(2)),"AT"===this.schoolMoment.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})}return null},e.prototype.nextTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.endDate.clone():i()()).add(3,"months").toDate(),this.locale)},e.prototype.prevTerm=function(){return new e((this.schoolMoment?this.schoolMoment.academicYearStructure.startDate.clone():i()()).subtract(3,"months").toDate(),this.locale)},e.prototype.getPeriodName=function(){return this.schoolMoment.term+this.schoolMoment.academicYearStructure.endDate.year()},e}(),d=n(11),m=n.n(d),p=n(6),h=n(47),f=function(){return function(e,t,n,a,s){var o,u,c,d,m,f=this;if(this.columns=[],this.weekPlans=[],n.schoolMoment){var g=r.f(n.getTermStartAndEnd(),2),v=g[0],b=g[1];this.year=v.year(),function(e){switch(e){case"sv":return["M.spr","Ma","Sv/SvA","Eng"];case"en_sin":case"en_nin":return["MFL","Ma","Hi","Eng","Yoga","ICT"]}}(a).forEach(function(e){return f.columns.push({name:e})}),(o=this.columns).push.apply(o,r.g([{name:"Kurs",isFixed:!0},{name:"Kommentar",isFixed:!0}]));var k=function(e,t){var n={};return n.Kurs=t.formatMessage({id:"termplanner.course",defaultMessage:"Kurs"}),n.Kommentar=t.formatMessage({id:"termplanner.comments",defaultMessage:"Kommentar"}),"sv"===e?(n["M.spr"]=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"M.spr"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Ma"}),n["Sv/SvA"]=t.formatMessage({id:"termplanner.swedishLanguage",defaultMessage:"Sv/SvA"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"Eng"})):(n.MFL=t.formatMessage({id:"termplanner.modernLanguage",defaultMessage:"MFL"}),n.Ma=t.formatMessage({id:"termplanner.maths",defaultMessage:"Maths"}),n.Hi=t.formatMessage({id:"termplanner.hindiLanguage",defaultMessage:"Hindi"}),n.Eng=t.formatMessage({id:"termplanner.englishLanguage",defaultMessage:"English"}),n.Yoga=t.formatMessage({id:"termplanner.yoga",defaultMessage:"Yoga"}),n.ICT=t.formatMessage({id:"termplanner.ict",defaultMessage:"ICT"})),n}(a,s);this.columns.forEach(function(e){e.translatedName=k[e.name]});for(var y=n.schoolMoment.academicYearStructure.holidays,E=n.schoolMoment.term,w=n.schoolMoment.academicYearStructure.academicStartWeek,T=function(t){if(y.filter(function(e){return t.week()>=i()(e.startDate).startOf("week").week()&&t.week()<=i()(e.endDate).endOf("week").week()}).length>0)return"continue";var n=t.week(),a=Object(h.a)(t.year(),n),o=e.filter(function(e){return e.dateTime>=a.notBefore&&e.dateTime<=a.notAfter&&(!e.isFinalStep&&e.term===E||"sv"===s.locale)})[0];S.weekPlans.push(r.a({},o||{},{id:o?o.id:Object(p.h)(),dateTime:o?o.dateTime:t.valueOf(),cellValues:o?o.cellValues:{},weekNumber:n,academicWeekNumber:w++,term:E}))},S=this,D=v.clone();D.valueOf()<b.valueOf();D=D.clone().add(1,"week").startOf("week"))T(D);var N=n.getLastStepWeek(s.locale),C=Object(h.a)(b.year(),N);this.lastSteps=e.filter(function(e){return e.dateTime>=C.notBefore&&e.dateTime<=C.notAfter&&(e.isFinalStep&&e.term===E||"sv"===s.locale)})[0]||{id:Object(p.h)(),dateTime:i()(b).clone().week(N).startOf("week").valueOf(),cellValues:{},weekNumber:N,term:E,isFinalStep:!0},this.completedSteps={},this.termGoals={};try{for(var O=r.h(t),M=O.next();!M.done;M=O.next()){var x=M.value,L=l(x);try{for(var j=r.h(x.courseSteps),P=j.next();!P.done;P=j.next()){var I=P.value;I.isCompleted&&(this.completedSteps[L+I.shortName]=!0)}}catch(e){d={error:e}}finally{try{P&&!P.done&&(m=j.return)&&m.call(j)}finally{if(d)throw d.error}}this.termGoals[L]=x.periodGoalGrade}}catch(e){u={error:e}}finally{try{M&&!M.done&&(c=O.return)&&c.call(O)}finally{if(u)throw u.error}}}}}();var g=n(109);var v=n(3),b=new(n(127).a)(function(){return v.a.kedBackendClient},function(){return v.a.currentUser});v.a.ksTermPlannerRepo=b;var k=n(19),y=n(9),E=n(7),w=n(13);n.d(t,"a",function(){return T});var T=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schoolTerm:new c(t.initialDate),activeCourses:[],weekPlans:[],error:null,loadingActiveCourses:!1,loadingWeekPlans:!1,initialLoad:!0},n.flowId=1,n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load(this.state.schoolTerm)},t.prototype.componentDidMount=function(){this.props.env.ksTermPlannerRepo.mem.subscribe(this.updateWeekPlans)},t.prototype.componentWillUnmount=function(){this.props.env.ksTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e,t){this.setState({weekPlans:e,loadingWeekPlans:!1,error:t||null})},t.prototype.load=function(e){var t=this,n=++this.flowId;this.setState({loadingActiveCourses:!0});var r=this.props.env.ksTermPlannerRepo;this.loadAcademicYearDates(e,E.b.KED_SCHOOL_LOCALE).then(function(a){if(t.flowId===n){var s=new c(e.selectedDate,t.context.intl.locale,a);r.refreshData(s.getTermStartAndEnd(!0)),t.loadActiveCourses(s).then(function(e){t.flowId===n&&t.setState({schoolTerm:s,initialLoad:!1,activeCourses:e,loadingActiveCourses:!1},function(){var e;e=m()(t.table),m()(e).keydown(function(t){var n=m()(t.target);if(13!==t.which||n.is("textarea")){if(38==t.which||40==t.which){var r,a=38==t.which,s=n.closest("td,th"),i=s.closest("tr"),o=i.children().toArray().indexOf(s[0]),u=m()(e).find("tr").toArray(),l=u.indexOf(i[0]);a&&l>0&&(!n.is("textarea")||0===n[0].selectionStart)?r=m()(u[l-1]):!a&&l>-1&&l<u.length-1&&(!n.is("textarea")||n[0].selectionEnd===n.val().length)&&(r=m()(u[l+1])),r&&(r.children().eq(o).find("[tabIndex=0]").focus(),t.stopPropagation(),t.preventDefault())}else if((37===t.which||39===t.which)&&n.is(":input")){var c,d,p=n[0],h=p.selectionStart,f=p.selectionEnd,g=p.value;if(h===f)if(-1!==(d=(c=m()(e).find("[tabIndex=0]:visible:not([type=checkbox])").toArray()).indexOf(t.target))&&d>0&&37===t.which&&0===h){var v=c[d-1];m()(v).focus(),t.stopPropagation(),t.preventDefault()}else if(-1!==d&&d<c.length-1&&39===t.which&&f===g.length){var b=c[d+1];m()(b).focus(),t.stopPropagation(),t.preventDefault()}}}else if(-1!==(d=(c=m()(e).find("[tabIndex=0]:visible:not([type=checkbox])").toArray()).indexOf(t.target))){var k=c[(d+1)%c.length];m()(k).focus()}})})}).catch(function(e){t.flowId===n&&t.setState({schoolTerm:s,loadingActiveCourses:!1,error:e})})}})},t.prototype.loadAcademicYearDates=function(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,this.props.env.edsClient.getAcademicYearTerms(t,e.selectedDate)];case 1:return[2,n.sent()]}})})},t.prototype.loadActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=e.getPeriodName(),[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return[2,n.sent()]}})})},t.prototype.updateCell=function(e,t,n){return r.b(this,void 0,void 0,function(){var a;return r.d(this,function(r){switch(r.label){case 0:if((e&&e.cellValues[t]||"")===n)return[2];r.label=1;case 1:return r.trys.push([1,3,,4]),e.cellValues[t]=n,[4,this.props.env.ksTermPlannerRepo.upsert(e,function(e){return e.cellValues[t]=n})];case 2:return[2,r.sent()];case 3:return a=r.sent(),console.error(a.stack||a),"http403"===a.name?this.setState({error:this.context.intl({id:"common.changesNotSavedUnauthorized",defaultMessage:"Ãndringarna sparades inte p.g.a. otillrÃ¤cklig behÃ¶righet."})}):this.setState({error:this.context.intl({id:"common.changesNotSavedErrorOccured",defaultMessage:"FÃ¶r tillfÃ¤llet problem att spara data. Dina Ã¤ndringar sparades inte."})}),[3,4];case 4:return[2]}})})},t.prototype.getStepColumn=function(e,t,n,r,s,i,o,u){var l=r.completedSteps,c=s.cellValues;return a.createElement("td",{key:"stepCell_"+e,className:this.getStepColumnClassName(l,c,t,o),onClick:function(){return n[e].rename()}},a.createElement(g.a,{ref:function(e){return n.push(e)},tag:u,text:c[t],onChange:this.updateCell.bind(this,s,t),readOnly:i}))},t.prototype.getStepColumnClassName=function(e,t,n,r){var a="Kurs"===n;if(!r){var s="stepCell";return e[n+t[n]]&&(s+=" completedStep"),s}return a?"courseCell":null},t.prototype.getStepFooterColumn=function(e,t,n,r,s){return a.createElement("th",{key:"stepFooterCell_"+e,className:"stepCell",onClick:function(){return n[e].rename()}},a.createElement(g.a,{ref:function(e){return n.push(e)},text:r.lastSteps.cellValues[t],onChange:this.updateCell.bind(this,r.lastSteps,t),readOnly:s}))},t.prototype.getStepHeaderColumn=function(e,t,n){return a.createElement("th",{key:"stepHeaderCell_"+e,className:n?"nowrap":""},t)},t.prototype.render=function(){var e=this,t=this.context.intl,n=new f(this.state.weekPlans,this.state.activeCourses,this.state.schoolTerm,E.b.KED_SCHOOL_LOCALE,t),r=n.termGoals,s=n.columns,i=[],o=this.props.tutored,u=this.state,l=u.loadingWeekPlans,c=u.error,d=0===u.weekPlans.length&&!!c||o||l;return this.state.initialLoad?a.createElement("p",null,a.createElement(w.a,null),a.createElement(y.a,{id:"termplanner.loadingTermplanner",defaultMessage:"V.g. vÃ¤nta medan terminsplaner laddas..."})):a.createElement("div",{className:"termplanner"+(this.state.loadingWeekPlans?" loading-weekplans":"")+(this.state.loadingActiveCourses?" loading-courses":"")},a.createElement("div",{className:"ked_boxed"},a.createElement("div",{className:"weekSelect"},a.createElement("div",{className:"horizontalItem"},a.createElement("p",null,this.state.schoolTerm.toLocaleString(t,!0))),a.createElement("div",{className:"horizontalItem"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.prevTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){var t=e.state.schoolTerm.nextTerm();e.load(t)}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))))),a.createElement(y.a,{id:"termplanner.termPlanning",defaultMessage:"Terminsplanering",tagName:"h4"}),a.createElement("hr",null),a.createElement("table",{className:"smallFont termplanner-table",ref:function(t){return e.table=t},style:{}},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{className:"nowrap"},a.createElement(y.a,{id:"termplanner.weekNumber",defaultMessage:"Vecka"})),s.map(function(t,n){var r=t===s[s.length-1];return e.getStepHeaderColumn(n,t.translatedName,!r)}))),a.createElement("tbody",null,n.weekPlans.map(function(r,i){var o=r.weekNumber,u=r.academicWeekNumber,l=o,c=e.state.schoolTerm.isCurrentWeek(r.dateTime),m=[],p=c?"currentWeek":i%2?"tableOdd":"";return a.createElement("tr",{key:n.year+":"+l,className:p},a.createElement("td",null,"sv"===t.locale?l:u),s.map(function(t,a){var i=t===s[s.length-1];return e.getStepColumn(a,t.name,m,n,r,d,t.isFixed,i?"textarea":"input")}))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",null,a.createElement(y.a,{id:"termplanner.finalStep",defaultMessage:"Slutsteg"})),s.filter(function(e){return!e.isFixed}).map(function(t,r){return e.getStepFooterColumn(r,t.name,i,n,d)}),a.createElement("th",null,"-"),a.createElement("th",null)),a.createElement("tr",null,a.createElement("th",null,a.createElement(y.a,{id:"termplanner.edsGoalGrades",defaultMessage:"TerminsmÃ¥l"})),s.filter(function(e){return!e.isFixed}).map(function(e,t){return a.createElement("th",{key:"grades_"+t,className:"stepCell"},r[e.name])}),a.createElement("th",null,"-"),a.createElement("th",null,this.state.error&&a.createElement("p",{className:"error"},""+this.state.error)))))))},t.contextType=k.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(28),s=function(){function e(){this.subscribers=[],this.env=null,this.version=1}return e.prototype.subscribe=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){return this.subscribers.push(e),e(this.env),[2]})})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){return this.subscribers.forEach(function(t){return t(e.env)}),[2]})})},e.prototype.setNewEnv=function(e,t){return r.b(this,void 0,void 0,function(){var n,a;return r.d(this,function(s){switch(s.label){case 0:return n=++this.version,this.env={currentUser:e,tutored:!0},this.notifySubscribers(),[4,t().catch(function(t){return{currentUser:e,tutored:!0,error:t}})];case 1:return a=s.sent(),n===this.version&&(++this.version,this.env=r.a({},a,{tutored:!0}),this.notifySubscribers()),[2]}})})},e}();a.a.tutorEnv||(a.a.tutorEnv=new s),t.a=a.a.tutorEnv},function(e,t,n){var r={"./en-SG":78,"./en-SG.js":78,"./en-au":79,"./en-au.js":79,"./en-ca":80,"./en-ca.js":80,"./en-gb":81,"./en-gb.js":81,"./en-ie":82,"./en-ie.js":82,"./en-il":83,"./en-il.js":83,"./en-nz":84,"./en-nz.js":84,"./sv":85,"./sv.js":85};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=122},function(e,t){},function(e,t){},function(e,t,n){"use strict";var r=n(55);n.d(t,"a",function(){return r.a})},function(e,t,n){"use strict";var r=n(3),a=n(65),s=n(16),i=Object(s.b)(location.search).user;if(i){var o=a.a.find(function(e){return e.username===i});o&&(r.a.currentUser=o)}var u=Object(s.b)(location.search),l=u.role,c=u.school;r.a.currentUser&&(l&&(r.a.currentUser.roles=l.split(",")),c&&(r.a.currentUser.school=c))},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(52),s=n(5),i=n.n(s),o=function(e){function t(t,n){var a=this,s=n();return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans-ks",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){var e,t;return r.d(this,function(n){return e=this.startDate&&this.startDate.valueOf()||i()().valueOf(),t=this.endDate&&this.endDate.valueOf()||i()().valueOf(),[2,{from:e,to:t,role:"USER"}]})})}})||this}return r.c(t,e),t.prototype.refreshData=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=r.f(e,2),this.startDate=t[0],this.endDate=t[1],[4,this.mem.refreshFromServer()];case 1:return n.sent(),[2]}})})},t}(a.a)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(5),i=n.n(s);const o=6e4;var u,l=n(2);function c(e){e.id;var t=e.dayStart,n=e.startMoment,s=e.endMoment,c=e.text,d=e.location,m=e.description,p=e.width,h=e.pos,f=e.locale,g=e.zoom,v=e.htmlLink,b=e.className,k=i()(n).diff(t)/o*g,y=i()(s).diff(n)/o*g,E={hour:"numeric",minute:"2-digit"},w=n.toDate().toLocaleTimeString(f,E),T=s.toDate().toLocaleTimeString(f,E);return a.createElement("div",{className:"dayviewevent "+b,style:{position:"absolute",boxSizing:"border-box",top:k,left:(h||0)+"%",width:(p||100)+"%",height:y,maxHeight:y,overflow:"hidden"},title:w+" - "+T+" "+c+(d?"\n"+Object(l.a)(u||(u=r.e(["Plats: ",""],["Plats: ",""])),d):"")+(m?"\n"+m:"")},a.createElement("a",{className:"event-title",href:v,target:"calendar-event"},c),a.createElement("p",{className:"event-period"},w," - ",T),d&&a.createElement("p",{className:"event-location"},d),m&&a.createElement("p",{className:"event-description"},m))}function d(e){for(var t=e.dayStart,n=e.dayEnd,r=60*e.zoom,s=i()(t).hour(),o=i()(n).hour(),u=[],l=s;l<=o;++l)u.push(l);return a.createElement("div",null,u.map(function(e){return a.createElement("div",{key:e,className:"timeline",style:{width:"100%",boxSizing:"border-box",margin:r/2+"px 0 0 0",height:r/2}})}))}function m(e){var t=e.dayStart,n=e.dayEnd,s=e.events,u=e.locale,m=e.zoom,p=(e.isLastCall,i()(n).diff(t)/o*m),h=function(e,t){var n=[];return e.forEach(function(e,t){var a,s=n.filter(function(t){return t.startMoment&&t.endMoment&&t.startMoment<=e.startMoment&&t.endMoment>e.startMoment}),i=s.concat(Object(l.k)(s.map(function(e){return e.prevOverlaps})));(i=Object(l.j)(i,function(e){return e.index})).sort(Object(l.g)("startMoment"));var o=0;i.forEach(function(e,t){t%4==0&&(a=Math.max(25,Math.round(100/Math.max(i.length-t+1,1))),o=0),e.width=a,e.className=(e.className||"").split(" ").filter(function(e){return"splitted"!==e}).concat("splitted").join(" "),e.pos=o,o+=a}),n.push(r.a({},e,{index:t,pos:o,width:a,className:a<100?e.className?e.className+" splitted":"splitted":e.className,prevOverlaps:i}))}),n}(s);return a.createElement("div",{className:"dayview",style:{top:0,height:p,maxHeight:p,position:"relative",overflow:"hidden"}},a.createElement(d,{dayStart:t,dayEnd:n,zoom:m}),h.map(function(e){return a.createElement(c,{key:e.id,id:e.id,className:e.className,dayStart:t,startMoment:e.startMoment,endMoment:e.endMoment,text:e.text,location:e.location,description:e.description,width:e.width,pos:e.pos,locale:u,zoom:m,htmlLink:e.htmlLink})}))}function p(e){for(var t=e.startHour,n=e.endHour,r=e.locale,s=60*e.zoom,o=[],u=t;u<=n;++u)o.push(u);return a.createElement("div",{className:"hourmarker",style:{position:"relative",left:0,top:0,overflow:"visible",height:(n-t)*s}},o.map(function(e,t){var n=t*s;return a.createElement("span",{key:e},a.createElement("div",{style:{position:"absolute",left:0,top:n,marginTop:"-4px",padding:0}},i()().hour(e).minute(0).toDate().toLocaleString(r,{hour:"2-digit",minute:"2-digit"})))}))}function h(e){var t=e.status,n=e.error;return t||n?a.createElement("div",{className:"statusbar"},n?a.createElement("p",{className:"error"},""+n):a.createElement("p",{className:"status"},t)):null}var f=n(19),g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.firstDay,n=e.startHour,r=e.endHour,s=e.numDays,o=e.events,u=e.locale,c=e.zoom,d=e.status,f=e.error,g=this.context.intl,v=[],b=i()(t),k=function(e){var t=i()(b).hour(n),a=i()(b).hour(r),s=i()(b).format("YYYY-MM-DD"),c=i()(t).startOf("day").valueOf()===i()().startOf("day").valueOf();v.push({name:Object(l.d)(t.toDate().toLocaleString(u,{weekday:"long",day:"numeric",month:"short"})),dayStart:t,dayEnd:a,isToday:c,events:o.filter(function(e){return e.start&&e.end&&e.start.dateTime&&e.end.dateTime&&(i()(e.start.dateTime).isBetween(t,a)||i()(e.end.dateTime).isBetween(t,a))}).map(function(e){return Object(l.f)(e,{startMoment:i()(e.start.dateTime),endMoment:i()(e.end.dateTime)})}).sort(function(e,t){return e.startMoment.valueOf>t.startMoment.valueOf?1:e.startMoment<t.startMoment?-1:0}),fullDayEvents:o.filter(function(e){return e.start&&e.end&&e.start.date&&e.end.date&&e.start.date<=s&&e.end.date>s}).map(function(e){return Object(l.f)(e,{startDate:e.start.date,endDate:e.end.date})})}),b=i()(b).add(1,"days")},y=0;y<s;++y)k();return a.createElement("div",{className:"vemendo-weekview"},a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",{style:{border:0}}),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement("p",{className:"dayname"},e.name))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement("p",{className:"week-number"},g.formatMessage({id:"calendar.weekNumber",defaultMessage:"V{weekNumber}"},{weekNumber:i()(t).week()}))),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},e.fullDayEvents.map(function(e){var t=e.id,n=e.text,r=e.location,s=e.description,i=e.htmlLink,o=e.className;return a.createElement("div",{key:t,className:"dayviewevent full-day "+o,title:n+(r?"\n"+g.formatMessage({id:"calendar.fullDayEventLocation",defaultMessage:"Plats: {location}"},{location:r}):"")+(s?"\n"+s:"")},a.createElement("a",{className:"event-title",href:i,target:"calendar-event"},n),r&&a.createElement("p",{className:"event-location"},r),s&&a.createElement("p",{className:"event-description"},s))}))})),a.createElement("tr",null,a.createElement("td",{style:{border:0}},a.createElement(p,{startHour:n,endHour:r,locale:u,zoom:c})),v.map(function(e){return a.createElement("td",{key:e.dayStart.toISOString(),className:e.isToday?"today":null},a.createElement(m,{key:e.dayStart.toISOString(),dayStart:e.dayStart,dayEnd:e.dayEnd,events:e.events,locale:u,zoom:c,isLastCall:""==d})," ")})),(d||f)&&(!f||"UnauthorizedError"!==f.name)&&a.createElement("tr",null,a.createElement("td",{style:{border:0}}),a.createElement("td",{style:{border:0},colSpan:s},a.createElement(h,{status:d,error:f}))))))},t.contextType=f.a,t}(a.Component),v=function(){function e(e){this.googleTokenProvider=e}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:t.sent(),t.label=2;case 2:return!this.tokenExpiration||this.tokenExpiration<new Date?[4,this.googleTokenProvider.getBearer()]:[3,4];case 3:e=t.sent(),this.tokenExpiration=new Date(e.expires),gapi.client.setToken({access_token:e.token}),t.label=4;case 4:return void 0!==gapi.client.calendar?[3,6]:[4,gapi.client.load("calendar","v3")];case 5:t.sent(),t.label=6;case 6:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e.prototype.listCalendars=function(){return r.b(this,void 0,void 0,function(){return r.d(this,function(e){switch(e.label){case 0:return[4,this.ensureInited()];case 1:e.sent(),e.label=2;case 2:return e.trys.push([2,4,,5]),[4,gapi.client.calendar.calendarList.list({})];case 3:return[2,e.sent().result.items];case 4:throw e.sent().error;case 5:return[2]}})})},e.prototype.batchEvents=function(e){var t=e.calendarList,n=e.timeMin,a=e.timeMax;return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:r.sent();try{return e=gapi.client.newBatch(),t.forEach(function(t){e.add(gapi.client.calendar.events.list({calendarId:t.id||"primary",timeMin:n&&new Date(n).toISOString(),timeMax:a&&new Date(a).toISOString(),showDeleted:!1,singleEvents:!0,fields:"items/id,items/start,items/end,items/summary,items/location,items/htmlLink,items/description",maxResults:2500,orderBy:"startTime"}),{id:t.id})}),[2,e.then(function(e){var n={};for(var r in t){var a=t[r].id,s=e.result[a].result.items;n[a]={calendar:t[r],events:s}}return n})]}catch(e){throw e.error}return[2]}})})},e}(),b=n(72);var k=n(3);n.d(t,"a",function(){return y});var y=function(e){function t(t){var n=e.call(this,t)||this,r=t.firstDay,a=n.props,s=a.initialStartHour,i=a.initialEndHour,o=a.initialZoom;n.state={firstDay:r,startHour:s,endHour:i,zoom:o,calendars:{},calendarsBeingLoaded:[],status:"Loading calendars... (authenticating...)",error:null};var u=(t.env||k.a).googleTokenProvider;return n.gcal=new v(u),n.gcal.ensureInited().then(function(){return n.loadData(r)}).catch(function(e){n.handleError(e)}),n}return r.c(t,e),t.prototype.handleError=function(e){e||(e="Unknown error"),this.setState({error:e}),console.error(e.stack||e)},t.prototype.loadData=function(e){var t=this,n=this.props.numDays,r=this.context.intl;return this.setState({firstDay:e,calendars:{},calendarsBeingLoaded:[],error:null,status:r.formatMessage({id:"calendar.loadingCalendar",defaultMessage:"Loading calendars... (listing...)"})}),this.gcal.listCalendars().then(function(a){a=a.filter(function(e){return function(e){var t=e.summary||"",n=/owner/gi.test(e.accessRole),r=!!e.primary,a=/classroom/gi.test(e.id),s=/holiday/gi.test(e.id);return r||a||s||/schema/gi.test(t)&&n}(e)}),
//!/Week Numbers/ig.test(c.summary)
t.setState({status:r.formatMessage({id:"calendar.loadCalendarEvents",defaultMessage:"Load calendar events..."})}),t.gcal.batchEvents({calendarList:a,timeMin:i()(e).startOf("day"),timeMax:i()(e).add(n,"days").endOf("day")}).then(function(e){t.setState({calendars:e,status:""})})})},t.prototype.navigateToPreviousWeek=function(){var e=this;this.loadData(i()(this.state.firstDay).add(-1,"week")).catch(function(t){e.handleError(t)})},t.prototype.navigateToNextWeek=function(){var e=this;this.loadData(i()(this.state.firstDay).add(1,"week")).catch(function(t){e.handleError(t)})},t.prototype.render=function(){var e=this,t=this.props.numDays,n=this.context.intl,r=this.state,s=r.firstDay,o=r.startHour,u=r.endHour,c=r.zoom,d=r.calendars,m=r.status,p=r.error,h=Object.keys(d).map(function(e){return d[e]}).map(function(e){var t=e.calendar,n=e.events,r="Skolschema"===t.summary&&"Synchronized"===t.description,a=/holiday/.test(t.id),s=(/classroom/.test(t.id),[]);return t.colorId&&s.push("gcal-palette-"+t.colorId),r&&s.push("course-event"),a&&s.push("holiday-event"),n.map(function(e){return{id:e.id,start:e.start,end:e.end,text:e.summary,location:e.location,description:e.description,htmlLink:e.htmlLink,className:(r&&e.summary?s.concat(Object(b.a)("course-event-",e.summary)):s).join(" ")}})}),f=Object(l.k)(h);return a.createElement("div",{style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"btn-toolbar week-navigation"},a.createElement("div",{className:"btn-group"},a.createElement("button",{className:"btn",onClick:function(){return e.navigateToPreviousWeek()}},a.createElement("i",{className:"fa fa-angle-left","aria-hidden":"true"})),a.createElement("button",{className:"btn",onClick:function(){return e.navigateToNextWeek()}},a.createElement("i",{className:"fa fa-angle-right","aria-hidden":"true"}))),a.createElement("div",{className:"btn-group"},n.formatMessage({id:"calendar.currentDate",defaultMessage:"Vecka {week}, {year}"},{week:i()(s).week(),year:i()(s).year()}))),a.createElement(g,{locale:n.locale,firstDay:s,startHour:o,endHour:u,numDays:t,zoom:c,events:f,status:m,error:p}))},t.contextType=f.a,t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(42),i=n(25),o=n(5),u=n.n(o),l=n(13),c=n(73),d=n(6),m=function(e){function t(t){var n=e.call(this,t)||this;return n.state={description:t.note?t.note.description:"",color:t.note?t.note.color:"yellow"},n}return r.c(t,e),t.prototype.delete=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,e.weekDate,t=e.courseName,n=e.weekPlan,e.note,a=e.closeDialog,s=e.env,i=this.state,i.description,i.color,a(),1!==Object.keys(n.plans).length?[3,2]:[4,s.kgTermPlannerRepo.delete([n.id])];case 1:return r.sent(),[3,4];case 2:return[4,s.kgTermPlannerRepo.update([n],function(e){delete e.plans[t]})];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a,s,i,o,u,l,c;return r.d(this,function(r){switch(r.label){case 0:return e=this.props,e.weekNumber,t=e.weekDate,n=e.courseName,a=e.weekPlan,e.note,s=e.closeDialog,i=e.env,o=this.state,u=o.description,l=o.color,s(),a?[4,i.kgTermPlannerRepo.update([a],function(e){return e.plans[n]={description:u,color:l}})]:[3,2];case 1:return r.sent(),[3,4];case 2:return(c={})[n]={description:u,color:l},[4,i.kgTermPlannerRepo.insert([{id:Object(d.h)(),dateTime:t,plans:c}])];case 3:r.sent(),r.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.weekNumber,r=t.courseName,s=(t.weekPlan,t.note),i=t.env,o=this.state,u=o.description,l=o.color,c=i.tutored;return a.createElement("div",null,a.createElement("div",null,a.createElement("h2",null,"HÃ¤ndelse fÃ¶r vecka ",n," och ",r),a.createElement("hr",null),a.createElement("div",{className:"align-table"},a.createElement("div",null,"Beskrivning:"),a.createElement("div",{className:"fullWidth"},a.createElement("textarea",{autoFocus:!0,value:u,disabled:c,onChange:function(t){return e.setState({description:t.target.value})}}))),a.createElement("div",{className:"align-table"},a.createElement("div",null,"FÃ¤rg:"),a.createElement("div",null,a.createElement("select",{value:l,disabled:c,onChange:function(t){return e.setState({color:t.target.value})}},a.createElement("option",{value:"yellow"},"Gul"),a.createElement("option",{value:"yellowLight"},"Ljusgul"),a.createElement("option",{value:"cyan"},"GrÃ¶n"),a.createElement("option",{value:"cyanLight"},"LjusgrÃ¶n"),a.createElement("option",{value:"purple"},"Lila"),a.createElement("option",{value:"purpleLight"},"Ljuslila"),a.createElement("option",{value:"red"},"RÃ¶d"),a.createElement("option",{value:"redLight"},"Rosa"))))),a.createElement("div",null,c?a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.props.closeDialog()}},"Avbryt"):a.createElement(a.Fragment,null,a.createElement("button",{tabIndex:1,className:"btn btn-large btn-default",onClick:function(){return e.save()}},"Spara"),s&&a.createElement("a",{tabIndex:1,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.delete()}},"Ta bort"))))},t}(a.Component),p=n(2),h=n(47);n.d(t,"a",function(){return f});var f=function(e){function t(t){var n=e.call(this,t)||this,r=new Date;return n.state={now:r,courses:[],weekPlans:[],isLoadingCourses:!0,isLoadingWeekPlans:!0,dialogs:[]},n.updateWeekPlans=n.updateWeekPlans.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){this.loadEDSCourses(),this.props.env.kgTermPlannerRepo.mem.subscribe(this.updateWeekPlans)},t.prototype.componentWillUnmount=function(){this.props.env.kgTermPlannerRepo.mem.unsubscribe(this.updateWeekPlans)},t.prototype.updateWeekPlans=function(e){this.setState({weekPlans:e,isLoadingWeekPlans:!1})},t.prototype.loadEDSCourses=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,,2,3]),e=Object(i.c)(u()(this.state.now)),t=new s.a(e).period,a=p.j,[4,this.props.env.edsClient.getActiveCourses({periodName:t})];case 1:return n=a.apply(void 0,[r.sent(),function(e){return e.name}]),this.setState({courses:n}),[3,3];case 2:return this.setState({isLoadingCourses:!1}),[7];case 3:return[2]}})})},t.prototype.onNoteClick=function(e,t,n,r,s){var i=this;this.openDialog(a.createElement(m,{weekNumber:e,weekDate:t,courseName:n,weekPlan:r,note:s,env:this.props.env,closeDialog:function(){return i.closeDialog()}}))},t.prototype.openDialog=function(e){this.setState({dialogs:r.g(this.state.dialogs,[e])})},t.prototype.closeDialog=function(){this.setState({dialogs:this.state.dialogs.slice(0,this.state.dialogs.length-1)})},t.prototype.render=function(){for(var e=this,t=this.state,n=t.courses,s=t.now,o=t.isLoadingCourses,d=t.isLoadingWeekPlans,m=t.weekPlans,p=t.dialogs,f=o||d,g=[],v=Object(i.c)(u()(s)),b=r.f(Object(i.d)(u()(s)),2),k=b[0],y=b[1],E=r.f(Object(i.b)(v.term),2),w=E[0],T=E[1],S=function(e){var t=e.week(),n=Object(h.a)(e.year(),t);if(t>=w&&t<=T){var r=m.filter(function(e){return e.dateTime>=n.notBefore&&e.dateTime<=n.notAfter})[0];g.push({weekNumber:t,weekDate:e.clone().startOf("week").valueOf(),weekPlan:r})}},D=k.clone().startOf("week");D.valueOf()<y.valueOf();D=D.clone().add(1,"week").startOf("week"))S(D);return a.createElement("div",{className:"ked_boxed termPlanContainer"},a.createElement("h4",null,"Terminsplanering"),a.createElement("hr",null),f?a.createElement(l.a,null):0===n.length?a.createElement("div",null,"Terminsplaneraren aktiveras nÃ¤r du skrivits in pÃ¥ dina kurser"):a.createElement("table",{className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{className:"nowrap"},"Vecka"),n.map(function(e,t){return a.createElement("th",{key:t,className:"termCourseHeader"},a.createElement("div",{className:"termCourseText"},e.name))}))),a.createElement("tbody",null,g.map(function(t,r){return a.createElement("tr",{key:r,className:r%2&&"tableOdd"},a.createElement("td",null,t.weekNumber),n.map(function(n,r){var s=t.weekPlan&&t.weekPlan.plans[n.name];return a.createElement("td",{key:r,className:"courseNote",title:s&&s.description,onClick:function(){return e.onNoteClick(t.weekNumber,t.weekDate,n.name,t.weekPlan,s)}},a.createElement("div",{className:"note"+(s?" noted note-color-"+s.color:"")}))}))})),a.createElement("tfoot",null,a.createElement("tr",null,a.createElement("th",{key:"points"},"PoÃ¤ng"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.credits)})),a.createElement("tr",null,a.createElement("th",null,"BetygsmÃ¥l"),n.map(function(e,t){return a.createElement("th",{key:t,className:"stepCell"},e.periodGoalGrade)})))),a.createElement(c.a,{dialogs:p,popDialog:function(){return e.setState({dialogs:p.slice(0,p.length-1)})}}))},t}(a.Component)},,,,,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(129),s=n(99);function i(){return r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0})}})}},function(e,t,n){"use strict";var r=n(1),a=n(3),s=n(0),i=n.n(s),o=n(2),u=n(13),l=n(121),c=n(7),d=n(6),m=n(42),p=n(20),h=n(127),f=n(52),g=n(25),v=n(5),b=n.n(v),k=function(e){function t(t,n){var a=this,s=n(),i=Date.now(),o=r.f(Object(g.d)(b()(i)),2),u=o[0],l=o[1];return a=e.call(this,{getClient:t,optimistic:!0,table:"weekplans",user:s?s.mail:"",getQueryOptions:function(){return r.b(a,void 0,void 0,function(){return r.d(this,function(e){return[2,{from:u.valueOf(),to:l.valueOf(),role:"USER"}]})})}})||this}return r.c(t,e),t}(f.a),y=new k(function(){return a.a.kedBackendClient},function(){return a.a.currentUser});a.a.kgTermPlannerRepo=y;var E=n(27);function w(e,t){return r.b(this,void 0,void 0,function(){function n(t,n,a){var s=null;return{getBearer:function(){return s||this.refreshBearer()},refreshBearer:function(){return s=function(){return r.b(this,void 0,void 0,function(){var s,i,o,u;return r.d(this,function(r){switch(r.label){case 0:return[4,t.get(n,a)];case 1:return 200!==(s=r.sent()).status?[3,3]:[4,s.json()];case 2:return[2,r.sent()];case 3:return i=d.c.bind,o=[void 0,s.status],u="Could not retrieve tutor token for "+e+". Error Message: ",[4,s.text()];case 4:throw new(i.apply(d.c,o.concat([u+r.sent()])))}})})}()}}}var s,i,o,u,l,f;return r.d(this,function(r){switch(r.label){case 0:return s={mail:e,displayName:t,roles:["USER"],school:a.a.currentUser.school,tutorFor:e},i=n(a.a.kedBackendClient.http,"tutor/token",{userEmail:e}),o=new d.d(p.c,i,c.b.KED_API_URL),u=n(o.http,"tutor/convert-token/google"),l=new m.b(p.c,c.b.EDS_API_URL,i,function(){return e}),(f={currentUser:s,bearerProvider:i,edsClient:l,googleTokenProvider:u,kedBackendClient:o,tutored:!0}).ksTermPlannerRepo=new h.a(function(){return o},function(){return s}),f.kgTermPlannerRepo=new k(function(){return o},function(){return s}),f.userTasksRepo=new E.a(function(){return o},function(){return s}),[4,i.getBearer().catch(function(e){console.error(e)})];case 1:return r.sent(),[2,f]}})})}n.d(t,"a",function(){return T});var T=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isLoading:!0,students:[]},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return r.trys.push([0,3,5,6]),[4,a.a.edsClient.getTeacherTutorStudents()];case 1:return(e=r.sent()).sort(Object(o.h)(["lastName","firstName"])),t=e.length>0?e.map(function(e){return{mail:e.email,displayName:e.firstName+" "+e.lastName}}):[a.a.currentUser],[4,this.setState({students:t})];case 2:return r.sent(),[3,6];case 3:return n=r.sent(),console.error("Could not list tutor students",n),[4,this.setState({students:[a.a.currentUser]})];case 4:return r.sent(),[3,6];case 5:return this.setState({isLoading:!1}),[7];case 6:return[2]}})})},t.prototype.onSelectUser=function(e){var t=this.state.students.filter(function(t){return t.mail===e})[0],n=r.a({},t,{roles:["USER"]});l.a.setNewEnv(n,function(){return w(e,e)})},t.prototype.render=function(){var e=this,t=this.state,n=t.isLoading,r=t.students;return n?i.a.createElement(u.a,null):i.a.createElement("div",{className:"tutors-select"},i.a.createElement("select",{onChange:function(t){return t.target.value&&e.onSelectUser(t.target.value)}},i.a.createElement("option",{value:""},"VÃ¤lj elev"),r.map(function(e){return i.a.createElement("option",{key:e.mail,value:e.mail},e.displayName," (",e.mail,")")})))},t}(i.a.Component)},,,,function(e,t,n){"use strict";var r=n(7);r.b.KED_LOCALE="sv",r.b.KED_SCHOOL_LOCALE="sv"},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var r,a,s,i,o,u,l=n(1),c=n(0),d=n(2),m=n(3),p=function(e){function t(t){var n=e.call(this,t)||this;return n.state={assessments:[],error:null,loading:!1},n}return l.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return l.b(this,void 0,void 0,function(){var e,t;return l.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,m.a.edsClient.getLatestAssessments(this.props.limit)];case 2:return e=n.sent(),this.setState({assessments:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=this.state.assessments.some(function(e){return!!e.gradeName});return c.createElement("div",{className:"ked_boxed"},c.createElement("div",{className:"weekSelect"},c.createElement("div",{className:"horizontalItem"}),c.createElement("div",{className:"horizontalItem"})),c.createElement("h4",null,Object(d.a)(r||(r=l.e(["Senaste bedÃ¶mningar"],["Senaste bedÃ¶mningar"])))),c.createElement("hr",null),c.createElement("table",{className:"smallFont"},c.createElement("thead",null,c.createElement("tr",null,c.createElement("th",{className:"nowrap"},Object(d.a)(a||(a=l.e(["Datum"],["Datum"])))),c.createElement("th",{className:"nowrap"},Object(d.a)(s||(s=l.e(["Kurs"],["Kurs"])))),c.createElement("th",{className:"nowrap"},Object(d.a)(i||(i=l.e(["Del"],["Del"])))),e&&c.createElement("th",{className:"nowrap"},Object(d.a)(o||(o=l.e(["Betyg"],["Betyg"])))),c.createElement("th",{className:"nowrap",colSpan:2},Object(d.a)(u||(u=l.e(["BedÃ¶mningar"],["BedÃ¶mningar"])))))),c.createElement("tbody",null,this.state.assessments.map(function(t,n){return c.createElement("tr",{key:n,className:n%2&&"tableOdd"},c.createElement("td",null,t.publishDateTime.substr(0,10)),c.createElement("td",{className:"amneCell"},t.courseName),c.createElement("td",{className:"delCell"},t.courseUnitName),e&&c.createElement("td",null,t.gradeName),c.createElement("td",null,c.createElement("pre",null,t.text)))}))))},t}(c.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(129),s=n(3);function i(){return r.createElement(a.a,{env:s.a,tutored:!1})}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(0),a=n(120),s=n(99),i=n(19);function o(e){var t=e.intl;return r.createElement(i.a.Provider,{value:{intl:t}},r.createElement(s.a,{tutored:!0,createComponent:function(e){return r.createElement(a.a,{key:e.currentUser.mail,env:e,tutored:!0,initialDate:new Date})}}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(61),i=n(14),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courses:[],isLoading:!0},n.updateHiddenCoursesState=n.updateHiddenCoursesState.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){s.a.subscribe(this.updateHiddenCoursesState,{fullCourse:!1})},t.prototype.updateHiddenCoursesState=function(e){this.setState({courses:e,isLoading:!1})},t.prototype.componentWillUnmount=function(){s.a.unsubscribe(this.updateHiddenCoursesState)},t.prototype.getCourseUrl=function(e){return Object(i.f)(this.props.viewCourseUrl,{courseId:e})},t.prototype.render=function(){var e=this,t=(this.props.viewCourseUrl,this.state),n=t.isLoading,r=t.error,s=(t.courses,this.state.courses.filter(function(e){return e.visible}));return a.createElement(a.Fragment,null,n?a.createElement("li",{className:"lvl2 header"},a.createElement("a",null,"Laddar...")):r?a.createElement("li",{className:"lv12"},a.createElement("a",null,"Kunde inte ladda kurser.")):s.map(function(t){var n=t.name,r=t.id;return a.createElement("li",{key:r,className:"lvl2"},a.createElement("a",{href:e.getCourseUrl(r)},n))}))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n.n(a),i=n(52),o=n(3),u=o.a.weekNotesRepo,l=function(e){function t(){var t=e.call(this,{getClient:function(){return o.a.kedBackendClient},optimistic:!1,table:"notes",user:o.a.currentUser?o.a.currentUser.mail:"",getQueryOptions:function(){return r.b(t,void 0,void 0,function(){return r.d(this,function(e){return[2,{role:"USER"}]})})}})||this;return t}return r.c(t,e),t}(i.a);u||(u=o.a.weekNotesRepo=new l);var c=n(74),d=n(6),m=n(53),p=n(49),h=n(71),f=n(13);function g(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i;return r.d(this,function(r){switch(r.label){case 0:return a=!1,s=setTimeout(function(){a=!0,n()},e),[4,t()];case 1:return i=r.sent(),a||clearTimeout(s),[2,i]}})})}var v=n(9),b=n(19),k=function(e){function t(t){var n=e.call(this,t)||this;return n.onChange=n.onChange.bind(n),n.autoSaver=new c.a(function(){return n.save()}),n.state={isLoading:!0,showLoadingProgress:!1,showSavingProgress:!1,everEdited:!1,notes:""},n}return r.c(t,e),t.prototype.componentDidMount=function(){this.showProgressIfLoadingTakesTime(),u.mem.subscribe(this.onChange)},t.prototype.showProgressIfLoadingTakesTime=function(){var e=this;this.timeoutHandle=setTimeout(function(){return e.state.isLoading&&e.setState({showLoadingProgress:!0})},300)},t.prototype.componentWillUnmount=function(){u.mem.unsubscribe(this.onChange),this.autoSaver.stop(),clearTimeout(this.timeoutHandle)},t.prototype._save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:e=3,n.label=1;case 1:return this.isNotesEdited()&&e?[4,u.upsert(this.state.weekNote,function(e){e.content=t.state.notes})]:[3,4];case 2:n.sent(),n.label=3;case 3:return--e,[3,1];case 4:return[2]}})})},t.prototype.save=function(){return r.b(this,void 0,void 0,function(){var e,t=this;return r.d(this,function(n){switch(n.label){case 0:return this.state.showSavingProgress||this.state.isLoading||!this.isNotesEdited()?[3,8]:[4,this.setState({error:void 0})];case 1:n.sent(),n.label=2;case 2:return n.trys.push([2,4,6,8]),[4,g(300,function(){return t._save()},function(){return t.setState({showSavingProgress:!0})})];case 3:return n.sent(),[3,8];case 4:return e=n.sent(),console.error(e),[4,this.setState({error:this.context.intl.formatMessage({id:"common.errorSavingData",defaultMessage:"Kunde inte spara."})})];case 5:return n.sent(),[3,8];case 6:return[4,this.setState({showSavingProgress:!1})];case 7:return n.sent(),[7];case 8:return[2]}})})},t.prototype.isNotesEdited=function(){var e=this.state,t=e.weekNote,n=e.notes;return!!t&&n!==t.content},t.prototype.getTranslatedActions=function(e){var t=Object.assign({},"sv"===e.locale?p.a:h.a);return Object.keys(t).forEach(function(n){var r=p.a[n].title;t[n].title=e.formatMessage({id:"wysiwyg."+n,defaultMessage:r}),"image"===n&&(t[n].promptMsg=e.formatMessage({id:"wysiwyg.imagePromptMsg",defaultMessage:p.a[n].promptMsg}))}),t},t.prototype.onChange=function(e){var t=e.length>0?e[e.length-1]:{id:Object(d.h)(),dateTime:Date.now(),content:"",acl:[new d.b("email",o.a.currentUser.mail,"S")].map(function(e){return e.toString()})},n={weekNote:t,isLoading:!1,showLoadingProgress:!1};this.state.weekNote&&this.state.weekNote.id===t.id&&0!==e.length||(n.notes=t.content),this.setState(n)},t.prototype.render=function(){var e=this,t=this.state,n=t.notes,r=t.showLoadingProgress,a=t.isLoading,i=t.showSavingProgress,o=t.error,u=t.everEdited,l=this.context.intl;return s.a.createElement("div",null,s.a.createElement("div",{className:"ked_boxed kedNotepad"},s.a.createElement("h3",null,s.a.createElement(v.a,{id:"weekNotebook.title",defaultMessage:"Anteckningar"})),s.a.createElement(m.a,{actions:["bold","italic","underline","strikethrough","heading1","heading2","heading3","olist","ulist","line"],defaultActions:this.getTranslatedActions(l),html:a?"<div></div>":n.substr(0,16384),onChange:!a&&function(t){e.setState({notes:t.substr(0,16384),everEdited:!0}),e.autoSaver.triggerChange(500)}}),s.a.createElement("hr",null),o?s.a.createElement("p",{className:"error"},o):r?s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.loading",defaultMessage:"Laddar..."}),s.a.createElement(f.a,null)):i?s.a.createElement(s.a.Fragment,null,s.a.createElement("span",null,s.a.createElement(v.a,{id:"common.saving",defaultMessage:"Sparar..."})," Â  "),s.a.createElement(f.a,null)):this.isNotesEdited()?s.a.createElement(s.a.Fragment,null,"Â "):u?s.a.createElement(v.a,{id:"common.saved",defaultMessage:"Sparad"}):s.a.createElement(s.a.Fragment,null,"Â ")))},t.contextType=b.a,t}(s.a.Component);function y(e){var t=e.intl;return a.createElement(b.a.Provider,{value:{intl:t}},a.createElement(k,null))}n.d(t,"b",function(){return k}),n.d(t,"a",function(){return y})},function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2),i=n(42),o=function(){return function(e){this.subjects=e.map(function(e){var t=e.periodGoals.map(function(e){return{period:new i.a(e.periodName),goal:e.gradeName}});return{name:e.courseUnitName,atGoal:t.filter(function(e){return"AT"===e.period.term}).map(function(e){return e.goal})[0],stGoal:t.filter(function(e){return"ST"===e.period.term}).map(function(e){return e.goal})[0],finalGoal:e.finalGoalGrade,strategies:e.strategyText}})}}(),u=n(3),l=function(){return function(e){var t={};e.forEach(function(e){return e.capabilities.forEach(function(e){return t[e.formName]=!0})});var n=Object.keys(t);this.columnHeaders=[{name:"FramtidsfÃ¶rmÃ¥ga",type:"header"},{name:"OmrÃ¥de",type:"header"}].concat(n.map(function(e){return{name:e,type:"year"}})),this.vtHts=Object(s.k)(n.map(function(e){return["HT","VT"]}));var r=[];e.forEach(function(e){var t=[{type:"ability",name:e.abilityName}],n={};e.capabilities.forEach(function(e){var a=[{type:"term",selected:!1!==e.htHasValue},{type:"term",selected:!1!==e.vtHasValue}];n[e.capabilityName]?t&&a.forEach(function(e){return t.push(e)}):(t.length>1&&(r.push(t),t=[]),n[e.capabilityName]=!0,t.push({type:"capability",name:e.capabilityName}),a.forEach(function(e){return t.push(e)}))}),t&&r.push(t)}),this.capabRows=r}}(),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loading:!1,data:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loading:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentFutureAbilities()];case 2:return e=n.sent(),this.setState({data:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loading:!1}),[2]}})})},t.prototype.render=function(){var e=new l(this.state.data),t=e.columnHeaders,n=e.vtHts,r=e.capabRows;return a.createElement("div",null,a.createElement("h5",null,"FramtidsfÃ¶rmÃ¥gor"),a.createElement("div",{className:"partialEditStudyPlanViewMode"},a.createElement("table",{style:{width:"100%"},className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,t.map(function(e,t){var n=e.name;return"header"===e.type?a.createElement("th",{key:t,rowSpan:2},n):a.createElement("th",{key:t,colSpan:2},n)})),a.createElement("tr",{className:"header"},n.map(function(e,t){return a.createElement("th",{key:t},e)}))),a.createElement("tbody",null,r.map(function(e,t){return a.createElement("tr",{key:t,className:Math.floor(t/3)%2&&"tableOdd"},e.map(function(e,t){return"ability"===e.type?a.createElement("td",{key:t,rowSpan:3,className:"goalsSubject"},e.name):"capability"===e.type?a.createElement("td",{key:t,className:"goalsSubject"},e.name):e.selected?a.createElement("td",{key:t,className:"edsSelected"},a.createElement("div",{className:"markedItem"})):a.createElement("td",{key:t})}))})))))},t}(a.Component);n.d(t,"a",function(){return v});var d,m,p,h,f,g,v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loadingStudyPlans:!1,studyPlans:[],error:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:this.setState({loadingStudyPlans:!0}),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,u.a.edsClient.getStudentGoals()];case 2:return e=n.sent(),this.setState({studyPlans:e}),[3,4];case 3:return t=n.sent(),this.setState({error:t}),[3,4];case 4:return this.setState({loadingStudyPlans:!1}),[2]}})})},t.prototype.render=function(){var e=new o(this.state.studyPlans),t="gymnasium"!==(""+u.a.currentUser.schoolType).toLowerCase();return a.createElement("div",{className:"ked_boxed"},a.createElement("h4",null,Object(s.a)(d||(d=r.e(["MÃ¥l"],["MÃ¥l"])))),a.createElement("hr",null),a.createElement("table",{className:"smallFont"},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,Object(s.a)(m||(m=r.e(["Ãmne"],["Ãmne"])))),t&&a.createElement("th",null,Object(s.a)(p||(p=r.e(["HT"],["HT"])))),t&&a.createElement("th",null,Object(s.a)(h||(h=r.e(["VT"],["VT"])))),a.createElement("th",null,Object(s.a)(f||(f=r.e(["SlutmÃ¥l"],["SlutmÃ¥l"])))),a.createElement("th",null,Object(s.a)(g||(g=r.e(["Strategier"],["Strategier"])))))),a.createElement("tbody",null,e.subjects.map(function(e,n){return a.createElement("tr",{key:e.name,className:n%2&&"tableOdd"},a.createElement("td",{className:"goalsSubject"},e.name),t&&a.createElement("td",{className:"goalsTerm"},e.atGoal),t&&a.createElement("td",{className:"goalsTerm"},e.stGoal),a.createElement("td",{className:"goalsEnd"},e.finalGoal),a.createElement("td",null,e.strategies))}))),a.createElement("div",{className:"divider"}),a.createElement(c,null))},t}(a.Component)},function(e,t,n){"use strict";var r=n(1),a=n(0);function s(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return[4,fetch(e+"?nodeID="+t,{credentials:"same-origin"})];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()]}})})}var i=n(117);n.d(t,"a",function(){return o});var o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={data:null},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,s(this.props.apiPath,this.props.pageId)];case 1:return e=t.sent(),this.setState({data:e}),[2]}})})},t.prototype.render=function(){if(!this.state.data)return a.createElement("div",null);var e=this.state.data,t=e.moduleName,n=e.subject,r=e.commonTasks,s=e.learningGoals,o=e.step,u=r.map(function(e){return{id:e.id,name:e.name,url:e.url,courseName:n.name,learningGoal:o&&s.length>0?t+" - Ã¶vergripande":t}}),l=s.map(function(e){return{name:e.name,learningTasks:e.tasks.map(function(t){return{id:t.id,name:t.name,url:t.url,courseName:n.name,learningGoal:e.name}})}});return o&&(u.forEach(function(e){return e.step=o}),l.forEach(function(e){return e.learningTasks.forEach(function(e){return e.step=o})})),a.createElement(i.a,{commonTasks:u,learningGoals:l})},t}(a.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(144),n(126),n(89),n(3)),s=n(0),i=n.n(s),o=[{moduleName:"Steg 22",subject:{name:"Spanska",course:{name:"Spanska",url:"/steg/spanska.4.4ae4e9d2159ef4e0120ad6d3.html"}},commonTasks:[],learningGoals:[{name:"Aktiviteter i hemmet",tasks:[{name:"Aktiviteter i hemmet hos en peruansk familj",url:"/steg/spanska/block5/steg22/uppgifter/aktiviteterihemmet/aktiviteterihemmethosenperuanskfamilj.4.4ae4e9d2159ef4e0120adb40.html"},{name:"Uppgift till aktiviteter i hemmet",url:"/steg/spanska/block5/steg22/uppgifter/aktiviteterihemmet/uppgifttillaktiviteterihemmet.4.4ae4e9d2159ef4e0120af887.html"}]},{name:"Familjeliv",tasks:[{name:"Vad pÃ¥gÃ¥r i din familj nu?",url:"/steg/spanska/block5/steg22/uppgifter/familjeliv/vadpagaridinfamiljnu.4.4ae4e9d2159ef4e0120b25e9.html"},{name:"Uppgift familjeliv",url:"/steg/spanska/block5/steg22/uppgifter/familjeliv/uppgiftfamiljeliv.4.4ae4e9d2159ef4e0120af73a.html"}]},{name:"Samtal om familjeliv",tasks:[{name:"Samtalsdokument familjeliv",url:"/steg/spanska/block5/steg22/uppgifter/samtalomfamiljeliv/samtalsdokumentfamiljeliv.4.4ae4e9d2159ef4e01209fe03.html"},{name:"Samtalskarta-familjeliv",url:"/steg/spanska/block5/steg22/uppgifter/samtalomfamiljeliv/samtalskartafamiljeliv.4.4ae4e9d2159ef4e0120af6fd.html"}]}]},{moduleName:"Teknik",subject:{name:"Teknik",course:{name:"TrÃ¥d 5",url:"/kurser/arskurs8/trad5.19.2d4f4005159f895477a15cc.html"}},commonTasks:[{name:"Tryck ",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/tryck.4.4ae4e9d2159ef4e01209dcde.html"},{name:"DiskussionsfrÃ¥gor till industriella revolutionen",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/diskussionsfragortillindustriellarevolutionen.4.4ae4e9d2159ef4e0120a6fab.html"},{name:"Hur fungerar en Ã¥ngmaskin",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/hurfungerarenangmaskin.4.4ae4e9d2159ef4e0120a1309.html"},{name:"Ãngmaskinens betydelse",url:"/kurser/arskurs8/trad5/forberedelse/teknik/uppgifter/angmaskinensbetydelse.4.4ae4e9d2159ef4e0120a3deb.html"}],learningGoals:[{name:"Identifiera och analysera Ã¥ngmaskinen utifrÃ¥n Ã¤ndamÃ¥lsenlighet och funktion,"},{name:"anvÃ¤nda teknikomrÃ¥dets begrepp och uttrycksform"},{name:"vÃ¤rdera konsekvenser av Ã¥ngmaskinen fÃ¶r individ, samhÃ¤lle och miljÃ¶, och"},{name:"analysera drivkrafter bakom teknikutveckling runt Ã¥ngmaskinen och hur tekniken har fÃ¶rÃ¤ndratsÃ¶ver tid."}]}],u=["testdata/learning-tasks/amnesintegrerad.json","testdata/learning-tasks/loopad.json","testdata/learning-tasks/steg-larandemal.json","testdata/learning-tasks/steg-matte.json","testdata/learning-tasks/vanlig-kurs.json"],l=n(125),c=n(5),d=n.n(c),m=n(128),p=n(150),h=n(145),f=n(146),g=n(139),v=n(120),b=n(147),k=n(55),y=n(151),E=n(148),w=n(112),T=n(149),S=n(140),D=n(99),N=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.c(t,e),t.prototype.render=function(){return i.a.createElement("div",null,i.a.createElement(S.a,null),i.a.createElement(D.a,{tutored:!0,createComponent:function(e){return i.a.createElement(v.a,{key:e.currentUser.mail,env:e,tutored:!0,initialDate:new Date})}}),i.a.createElement(g.a,null),i.a.createElement(D.a,{tutored:!0,createComponent:function(e){return i.a.createElement(l.a,{key:e.currentUser.mail,env:e,viewCourseUrl:"https://www.svt.se"})}}),i.a.createElement(D.a,{tutored:!0,createComponent:function(e){return i.a.createElement(m.a,{env:e,firstDay:d()().startOf("week").weekday(1),initialStartHour:7,initialEndHour:18,initialZoom:.75,numDays:5})}}))},t}(i.a.Component),C={LatestAssessments:{component:h.a,props:function(){return{locale:navigator.language,limit:15}}},KSGoals:{component:p.a,props:function(){return{}}},KSTermPlanner:{component:v.a,props:function(){return{env:a.a,tutored:!1,initialDate:new Date}}},KSTermPlannerTutored:{component:b.a,props:function(){return{}}},KGTermPlanner:{component:f.a,props:function(){return{}}},KGTermPlannerTutored:{component:g.a,props:function(){return{}}},WeekPlanner:{component:k.a,props:function(){return{viewCourseUrl:"http://svt.se",env:a.a}}},TutorsView:{component:N,props:function(){return{}}},TutorsSelect:{component:S.a,props:function(){return{}}},Calendar:{component:m.a,props:function(){return{firstDay:d()().startOf("week").weekday(1),numDays:5,initialStartHour:7,initialEndHour:18,initialZoom:.75}}},LearningTasks:{component:y.a,props:function(){return{apiPath:localStorage.getItem("selectedLearningModuleUrl"),pageId:"dummy"}}},MyCourses:{component:E.a,props:function(){return{viewCourseUrl:"https://kg-test.sitevision.se/courseviewer"}}},ListCourses:{component:w.a,props:function(){return{viewCourseUrl:"https://kg-test.sitevision.se/courseviewer"}}},WeekNotes:{component:T.b,props:function(){return{}}}},O=n(11),M=n.n(O),x=n(105),L=n(9),j=n(56),P=n(19),I=function(e){function t(t){var n=e.call(this,t)||this,a=localStorage.getItem("selectedComponent")||Object.keys(C)[0],s=C[a].props();return n.state={selectedComponent:a,selectedLearningModule:parseInt(localStorage.getItem("selectedLearningModule")||"0"),selectedLearningModuleUrl:localStorage.getItem("selectedLearningModuleUrl")||"",selectedComponentReal:C[a].component,selectedCompProps:r.a({},s)},n}return r.c(t,e),t.prototype.componentDidUpdate=function(){this.renderTestComponent()},t.prototype.componentDidMount=function(){},t.prototype.renderTestComponent=function(){if(a.a.learningModuleTasks=o[this.state.selectedLearningModule],M()(this.componentArea).html(""),a.a.currentUser){var e=C[this.state.selectedComponent]||C[Object.keys(C)[0]];this.setState({selectedComponentReal:e.component,selectedCompProps:r.a({},e.props())})}},t.prototype.render=function(){var e=this,t=this.state.selectedComponentReal,n=this.props.intl;return a.a.currentUser?s.createElement(P.a.Provider,{value:{intl:n}},s.createElement("div",{className:"test-page"},s.createElement("div",{className:"header"},s.createElement("div",{className:"test-selects"},s.createElement("form",null,s.createElement("h4",null,s.createElement(L.a,{id:"test.pageDescription",defaultMessage:"Testsida fÃ¶r komponenter till nya startsidan"})),s.createElement("table",null,s.createElement("tbody",null,s.createElement("tr",null,s.createElement("td",null,s.createElement("label",{htmlFor:"testComponent"},s.createElement(L.a,{id:"test.chooseComponentLabel",defaultMessage:"Komponent"}))),s.createElement("td",null,s.createElement("select",{id:"testComponent",value:this.state.selectedComponent,onChange:function(t){e.setState({selectedComponent:t.target.value}),localStorage.setItem("selectedComponent",t.target.value),window.location.reload()}},Object.keys(C).map(function(e){return s.createElement("option",{key:e,value:e},e)})))),"LearningGoalsAndTasks"===this.state.selectedComponent&&s.createElement("tr",null,s.createElement("td",null,s.createElement("label",{htmlFor:"testLearningModule"},"Kursmodul")),s.createElement("td",null,s.createElement("select",{id:"testLearningModule",value:this.state.selectedLearningModule,onChange:function(e){localStorage.setItem("selectedLearningModule",e.target.value),window.location.reload()}},o.map(function(e,t){return s.createElement("option",{key:t,value:t},e.subject.course.name+"/"+e.subject.name+"/"+e.moduleName)})))),"LearningTasks"===this.state.selectedComponent&&s.createElement("tr",null,s.createElement("td",null,s.createElement("label",{htmlFor:"testLearningModuleUrl"},"Kursmodul")),s.createElement("td",null,s.createElement("select",{id:"testLearningModuleUrl",value:this.state.selectedLearningModuleUrl,onChange:function(e){localStorage.setItem("selectedLearningModuleUrl",e.target.value),window.location.reload()}},u.map(function(e,t){return s.createElement("option",{key:t,value:e},e)}))))))))),s.createElement("hr",null),s.createElement("div",{className:"componentRow"},s.createElement(t,r.a({},this.state.selectedCompProps)),s.createElement("div",{className:"componentArea",ref:function(t){return e.componentArea=t}}),s.createElement("div",{className:"week-planner"},"LearningTasks"===this.state.selectedComponent&&s.createElement(l.a,{viewCourseUrl:"http://www.svt.se/nyheter",env:a.a}))))):s.createElement(x.a,null)},t}(s.Component),U=Object(j.a)(Object(L.d)(I));t.default=U}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmVudi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmNmZy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9leGVjLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hY2Nlc3MtY29udHJvbC9pbmRleC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYWNjZXNzLWNvbnRyb2wvZ2V0LXVzZXItY2xhaW1zLnRzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L3V0aWxzLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9xdWVyeS1zdHJpbmcudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvcmVzdGNsaWVudC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9rZWQtYmVhcmVyLXByb3ZpZGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2FjY2Vzcy1jb250cm9sLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2h0dHAtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViL2JlYXJlci1zdG9yYWdlLXNlc3Npb25zdG9yYWdlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUtdGFzay5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1tb2RlbC1taWdyYXRvci9taWdyYXRlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUtY291cnNlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL2luZGV4LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYi9oYXNoLXJlc3RvcmVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9jbGllbnR3ZWIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9LRUQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3NjaG9vbC1tb21lbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dC1pbnB1dC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvd2Vla3BsYW5uZXItcGVyc2lzdGVkLXN0YXRlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy91c2VyLXRhc2tzLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMva2VkLnRzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9lbWl0dGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS92YWx1ZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0udHN4Iiwid2VicGFjazovL1tuYW1lXS9leHRlcm5hbCBcIlJlYWN0RE9NXCIiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL21hcC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvc2Nob29sLXRlcm0udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL21ha2Utc3VzcGVuc2UtYXBpLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL2Vkc2NsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC10ZXh0YXJlYS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL2ZpYmVyLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3dlZWt1dGlsLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3JlcG9zL2tlZC1yZXBvLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL3dhc2gtaHRtbC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvaW1hZ2UtZWRpdC1hY3Rpb25zLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL2dldC10YXNrLXR5cGUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvdXNlci10YXNrcy1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL2FkZC1jdXN0b20tZ29hbC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvYWRkLWN1c3RvbS10YXNrLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci9hZGQtb3ItZWRpdC1zdWItdGFzay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvZWRpdC11c2VyLXRhc2sudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrcGxhbm5lci9yZWZpbmVyLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9TZXR1cExhbmd1YWdlSW50bC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL2NvbmZpcm1hdGlvbi50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL3Rhc2stbGlzdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3JlcG9zL2hpZGRlbi1jb3Vyc2VzLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3Rlc3QvZGF0YS91c2Vycy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9tb21lbnQtc3YtbG9jYWxlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy9yZXBvLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9mZWF0dXJlcy9mZWF0dXJlcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZmVhdHVyZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jYWxlbmRhci9jb3Vyc2UtbmFtZS10by1jc3MtY2xhc3MudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2RpYWxvZ3MudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9wZW5kaW5nLWpvYi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFsLXNldHRlcnMvY29uZmlndXJlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9zZXQtYmVhcmVyLXByb3ZpZGVycy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFsLXNldHRlcnMvc2V0LWtlZC1iYWNrZW5kLWNsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFsLXNldHRlcnMvc2V0LWVkcy1jbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3R1dG9yYWJsZS1jb21wb25lbnQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L3V0aWxzL2Nob29zZS11c2VyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvcmVuYW1lYWJsZS10ZXh0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9saXN0LWNvdXJzZXMvbGlzdC1jb3Vyc2VzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2Utdmlld2VyL3N1YmNvbXBvbmVudHMvbGVhcm5pbmctZ29hbHMtbGlzdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2dlbmVyaWMtc2Nob29sLXV0aWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL3Rlcm1wbGFubmVyLXV0aWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9nZW5lcmljLXNjaG9vbC10ZXJtLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL3ZpZXdtb2RlbC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwby1pbnN0YW5jZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rcy10ZXJtcGxhbm5lci90ZXJtcGxhbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3RhYmxlLXdhbGsudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELnR1dG9yRW52LnRzIiwid2VicGFjazovL1tuYW1lXS8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlIHN5bmMgc3Z8ZW4iLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3Rlc3Qvc2V0LWN1cnJlbnQtdXNlci50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwby50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL2RheS12aWV3LWV2ZW50LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jYWxlbmRhci90aW1lLWxpbmVzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jYWxlbmRhci9kYXktdmlldy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2FsZW5kYXIvY3J1bmNoLWNvbGxpZGluZy1ldmVudHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY2FsZW5kYXIvaG91ci1tYXJrZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL3N0YXR1cy1iYXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL3dlZWstdmlldy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMvZ29vZ2xlLWNhbGVuZGFyLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NhbGVuZGFyL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jYWxlbmRhci9zaG91bGQtaW5jbHVkZS1jYWxlbmRhci50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rZy10ZXJtcGxhbm5lci93ZWVrLW5vdGUtZGlhbG9nLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rZy10ZXJtcGxhbm5lci9rZy10ZXJtcGxhbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva2ctdGVybXBsYW5uZXIva2ctdGVybXBsYW5uZXItdHV0b3JlZC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3JlcG9zL2tnLXRlcm1wbGFubmVyLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3JlcXVlc3QtdHV0b3JlZC10b2tlbnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdHV0b3JzLXNlbGVjdC90dXRvcnMtc2VsZWN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC90ZXN0LWNvbmZpZy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9sYXRlc3QtYXNzZXNzbWVudHMvbGF0ZXN0LWFzc2Vzc21lbnRzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rZy10ZXJtcGxhbm5lci9rZy10ZXJtcGxhbm5lci1zZWxmLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rcy10ZXJtcGxhbm5lci9rcy10ZXJtcGxhbm5lci10dXRvcmVkLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9teS1jb3Vyc2VzL215LWNvdXJzZXMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy93ZWVrLW5vdGVzLXJlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2lmLXRha2VzLXRpbWUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vlay1ub3RlYm9vay93ZWVrLW5vdGVib29rLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy93ZWVrLW5vdGVib29rL3Jvb3Qtd2Vlay1ub3RlYm9vay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvd2Vlay1ub3RlYm9vay9pbmRleC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9rcy1nb2Fscy9nb2Fscy12aWV3bW9kZWwudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtZ29hbHMvZnV0dXJlLWFiaWxpdGllcy12aWV3bW9kZWwudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtZ29hbHMvZnV0dXJlLWFiaWxpdGllcy10YWJsZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMva3MtZ29hbHMvZ29hbHMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL2tlZC1sZWFybmluZ2dvYWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2xlYXJuaW5nLXRhc2tzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC9kYXRhL2xlYXJuaW5nTW9kdWxlcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC9kYXRhL2xlYXJuaW5nTW9kdWxlczIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdHV0b3JzLXZpZXcvdHV0b3JzLXZpZXcudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L2NvbXBvbmVudHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3Rlc3QvdGVzdHBhZ2UudHN4Il0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiNiIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiUmVhY3QiLCJjYXBpdGFsaXplRmlyc3QiLCJzdHIiLCJjaGFyQ29kZUF0Iiwic3Vic3RyIiwidG9Mb2NhbGVVcHBlckNhc2UiLCJleHRlbmQiLCJvYmoiLCJleHRlbnNpb24iLCJrZXlzIiwiZm9yRWFjaCIsImNsb25lIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmNhdCIsImZsYXR0ZW4iLCJhIiwiY29tcGFyZVByb3AiLCJwcm9wIiwiYiIsImFQcm9wIiwiYlByb3AiLCJjb21wYXJlUHJvcHMiLCJwcm9wcyIsImxvY2FsZXMiLCJvcHRpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwibG9jYWxlQ29tcGFyZSIsIm1hcCIsInNwbGl0IiwiX2EiLCJfYiIsInRzbGliX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJmaXJzdFBhcnQiLCJyZXN0IiwiY21wUGFydCIsImZpcnN0QSIsImZpcnN0QiIsInJlZHVjZSIsImNtcDEiLCJjbXAyIiwiTCIsInRleHQiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJydiIsImJ1aWxkTWVzc2FnZSIsImRhdGVUaW1lUmV2aXZlciIsImV4ZWMiLCJEYXRlIiwic2hvd0luZm8iLCJtc2ciLCJldmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsInNob3dFcnJvciIsImVyck1zZyIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJtYXhMZW5ndGgiLCJtYXhMZW4iLCJhcnJheVRvTG9va3VwIiwia2V5QWNjZXNzb3IiLCJpdGVtIiwiYXJyYXkiLCJhcnJheVRvTWFwIiwiY2hlcnJ5UGlja1Byb3BzIiwicHJvcHNUb1BpY2siLCJwcm9wc1RvUGlja18xIiwicHJvcHNUb1BpY2tfMV8xIiwibmV4dCIsImRvbmUiLCJwYXJhbSIsImRpc3RpbmN0IiwieCIsInNoYWxsb3dFcXVhbHMiLCJrZXlzQSIsImtleXNCIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImVudiIsIl9rZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl9qc19kaXN0X2pzX2tlZF9iYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY2ZnIiwiX0tFRF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwialF1ZXJ5IiwiY29tbWFuZCIsImRvY3VtZW50IiwiZXhlY0NvbW1hbmQiLCJTcGlubmVyIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNsYXNzTmFtZSIsImFyaWEtaGlkZGVuIiwiSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMiLCJoYXNBY2Nlc3MiLCJ1c2VyIiwiZG9jIiwicmVxdWVzdGVkUmlnaHQiLCJjbGFpbXMiLCJ0eXBlIiwibWFpbCIsInNjaG9vbCIsInJvbGVzIiwicm9sZSIsImdldFVzZXJDbGFpbXMiLCJ0dXRvckZvciIsImZpbHRlciIsImNsYWltIiwiY2xpZW50IiwiZnJvbVN0cmluZ0FycmF5IiwiYWNsIiwiaGFzV3JpdGVBY2Nlc3MiLCJpc1RlYWNoZXJBdFNjaG9vbCIsImlzVGVhY2hlciIsInNvbWUiLCJiZWxvbmdzVG9TY2hvb2wiLCJ0b0xvd2VyQ2FzZSIsImlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbCIsImluY2x1ZGVzIiwiaW1wZXJzb25hdGlvbkVudiIsImFjdEFzIiwidXJsIiwiY3VycmVudFF1ZXJ5IiwicXVlcnlfc3RyaW5nIiwibG9jYXRpb24iLCJzZWFyY2giLCJuZXdRdWVyeSIsInRzbGliX2VzNiIsIm5ld1F1ZXJ5U3RyaW5nIiwiaHJlZiIsImhhc2giLCJwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSIsInF1ZXJ5IiwicHJlc2VydmVkUXVlcnkiLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNU18xIiwiSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVNfMV8xIiwicEhhc2giLCJpbmRleE9mIiwiY3JlYXRlVVVJRCIsImF2b2lkU2ltdWx0YW5vdXNDYWxscyIsImdldEdsb2JhbElkIiwiY29tcHV0ZVByZWRlc3RpbmF0ZWRJZCIsInVwZGF0ZUFycmF5Iiwibm93IiwicmVwbGFjZSIsIk1hdGgiLCJyYW5kb20iLCJmbG9vciIsInRvU3RyaW5nIiwibWV0aG9kIiwib25nb2luZ1Byb21pc2UiLCJ0aGlzIiwidGhlbiIsInJlYWxtIiwicGFkIiwiRXJyb3IiLCJoZXgiLCJqb2luIiwiaW5wdXQiLCJlbmNvZGVyIiwiZGlnZXN0IiwibGFiZWwiLCJUZXh0RW5jb2RlciIsImVuY29kZSIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJzdWJ0bGUiLCJzZW50IiwibmliYmxlIiwibWFwcGVyIiwicmV0dmFsIiwibWFwcGVkIiwicGFyc2VRdWVyeVN0cmluZyIsImxvY2F0aW9uU2VhcmNoIiwidG9Mb3dlciIsInBhcnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0cmltIiwiZW5jb2RlUGFyYW1zIiwicGFyYW1zIiwidW5kZWZpbmVkIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2VuZXJhdGVRdWVyeVN0cmluZyIsInNwbGl0VXJsQW5kUXVlcnkiLCJ1cmxXaXRoUG9zc2libGVRdWVyeSIsInBRdWVyeSIsInJlc3RjbGllbnRfUmVzdENsaWVudCIsIlJlc3RDbGllbnQiLCJpc29tb3JwaGljIiwiYmFzZVVybCIsIm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucyIsIl9zdGF0dXMiLCJlbWl0dGVyIiwiZmV0Y2hPcHRpb25zIiwiYXV0aEhlYWRlciIsImJlYXJlciIsInVzZXJuYW1lIiwiYnRvYSIsInBhc3N3b3JkIiwiYmVhcmVyUHJvdmlkZXIiLCJjb25maWd1cmFibGUiLCJmZXRjaCIsInBhdGgiLCJoZWFkZXJzIiwiX3RoaXMiLCJkaXNwYXRjaCIsIl9mZXRjaCIsInJlcyIsImNhdGNoIiwiZXJyIiwiUHJvbWlzZSIsInJlamVjdCIsInF1ZXJ5U3RyIiwidG9rZW5JbmZvIiwiX2MiLCJ3d3dhdXRoIiwiX2QiLCJfZSIsImNhY2hlIiwibm9jYWNoZSIsInV0aWxzIiwiZ2V0QmVhcmVyIiwiZXhwaXJlcyIsImxvZyIsInJlZnJlc2hCZWFyZXIiLCJ0b2tlbiIsIkF1dGhvcml6YXRpb24iLCJzdGF0dXMiLCJ0ZXN0IiwiQWNjZXB0IiwicG9zdCIsIkNvbnRlbnQtVHlwZSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVsZXRlIiwia2VkX2JlYXJlcl9wcm92aWRlcl9LZWRCZWFyZXJQcm92aWRlciIsIktlZEJlYXJlclByb3ZpZGVyIiwic3RvcmFnZSIsInRva2VuSWQiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsInRva2VuVXJsIiwidG9rZW5RdWVyeSIsInRyeXMiLCJsb2FkIiwicmV0cmllcyIsIndhcm4iLCJzdGF0dXNUZXh0Iiwic2F2ZSIsIkRvY3VtZW50QWNjZXNzIiwiYWNjZXNzQ2xhaW1UeXBlIiwiYWNjZXNzQ2xhaW1WYWx1ZSIsInJpZ2h0IiwiZnJvbVN0cmluZyIsImFjIiwiY2xhaW1UeXBlIiwidW5lc2NhcGUiLCJjbGFpbVZhbHVlIiwiZXNjYXBlIiwiYWNjZXNzQ29tcG9uZW50IiwidG9TdHJpbmdBcnJheSIsInVzZXJDbGFpbXMiLCJodHRwX2Vycm9yX0h0dHBFcnJvciIsIl9zdXBlciIsIkh0dHBFcnJvciIsImNvZGUiLCJrZWRfYmFja2VuZF9jbGllbnRfS2VkQmFja2VuZENsaWVudCIsImtlZF9iYWNrZW5kX2NsaWVudF9CYXRjaFJ1bm5lciIsIktlZEJhY2tlbmRDbGllbnQiLCJodHRwIiwiZ2V0TXlDbGFpbXMiLCJ0YWJsZSIsImpzb24iLCJpZCIsImxpc3QiLCJtdXRhdGlvbnNPbkVtcHR5IiwiYmF0Y2giLCJyZXFzIiwic29ydCIsInJlcTEiLCJyZXEyIiwib3AiLCJkbyIsInNjb3BlRm4iLCJydW5uZXIiLCJtdXRhdGlvblJlcXVlc3RzIiwiZGVsZXRlUmVhbG0iLCJhZGQiLCJicmFuY2hJZCIsInB1dCIsInVwZGF0ZSIsImRlbHRhRG9jIiwibWVyZ2UiLCJ0YXJnZXRCcmFuY2hJZCIsImNsZWFyQnJhbmNoIiwic2hhcmUiLCJ1bnNoYXJlIiwibGluayIsInNvdXJjZVRhYmxlIiwic291cmNlSWQiLCJ0YXJnZXRUYWJsZSIsInRhcmdldElkIiwibGluazIiLCJ1bmxpbmsiLCJ1bmxpbmsyIiwidW5kb0xpbmsiLCJCYXRjaFJ1bm5lciIsIkxhbmd1YWdlQ29udGV4dCIsImludGwiLCJCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UiLCJzZXNzaW9uU3RvcmFnZSIsInNldEl0ZW0iLCJnZXRJdGVtIiwicmVzb2x2ZSIsInBhcnNlIiwiZXgiLCJtaWdyYXRlVGFzayIsInRhc2siLCJyZXNvdXJjZXMiLCJtaWdyYXRlIiwiZ3JhcGhzIiwiY291cnNlIiwidGFza0lkcyIsInJlc3BvbnNpYmxlVGVhY2hlcnMiLCJyZXNvdXJzZXMiLCJ0YXNrcyIsIm1pZ3JhdGVDb3Vyc2UiLCJyZWRpckhhc2giLCJoYXNoX3Jlc3RvcmVyX2EiLCJ0aW1lIiwicmVtb3ZlSXRlbSIsIl8iLCJfX21pZ3JhdG9yX21peGVkX2luIiwiaW5jbHVkZSIsIktlZE1vZGVsTWlncmF0b3JNaXhpbiIsImtlZF9iYWNrZW5kX2NsaWVudCIsInRpbWVPZlBhZ2VMb2FkIiwia2VkX2JhY2tlbmRfY2xpZW50X3dlYl9XZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciIsIldlYlNlcnZlckJlYXJlclByb3ZpZGVyIiwidG9rZW5QYXRoIiwidG9rZW5SZXNwb25zZU1hcHBlciIsInJlZGlyZWN0IiwiY3JlZGVudGlhbHMiLCJ3YW50c1JlZGlyZWN0IiwicmVsb2FkIiwic2VsZiIsImtlZF9iYWNrZW5kX2NsaWVudF93ZWJfS2VkQmFja2VuZENsaWVudFdlYiIsIktlZEJhY2tlbmRDbGllbnRXZWIiLCJhcGlCYXNlVXJsIiwicHJvdmlkZXJPclRva2VuUGF0aCIsIk9wZW5DbG9zZUJveCIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJzdGF0ZSIsImhlYWRlck9wZW4iLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwic2V0U3RhdGUiLCJyZW5kZXIiLCJ0aXRsZSIsImNoaWxkcmVuIiwiaGVhZGVyQ2xhc3NOYW1lIiwiY29udGVudENsYXNzTmFtZSIsIm9uQ2xpY2siLCJvbk9wZW5DbG9zZSIsIktFRCIsImdldEZpcnN0QW5kTGFzdFdlZWtPZlRlcm0iLCJ0ZXJtIiwiZ2V0VGVybVN0YXJ0QW5kRW5kIiwibW9udGgiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwieWVhciIsImdldFNjaG9vbE1vbWVudCIsInRoaXNZZWFyIiwiaXNBdXR1bW4iLCJhY2FkZW1pY1llYXIiLCJ3ZWVrIiwiYWRkWWVhciIsImFZZWFyIiwibnVtWWVhcnNUb0FkZCIsInllYXJTdHIiLCJwYXJzZUludCIsIlRleHRJbnB1dCIsIl9mb3JtX2ZpZWxkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJhdXRvRm9jdXMiLCJzaXplIiwib25DaGFuZ2UiLCJldiIsInRhcmdldCIsInBsYWNlaG9sZGVyIiwid2Vla3BsYW5uZXJfcGVyc2lzdGVkX3N0YXRlX1dlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUiLCJXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIiwidXNlck9yQ29weSIsImxhc3RXcml0ZSIsIndlZWtEYXRlIiwibW9tZW50X3N2X2xvY2FsZSIsInN0YXJ0T2YiLCJ2YWx1ZU9mIiwib3BlbkNvdXJzZXMiLCJhc3NpZ24iLCJjb29raWUiLCJsb2NhbFN0b3JhZ2UiLCJzdG9yZWREYXRhIiwiaXNFeHBpcmVkIiwibW9tZW50X2RlZmF1bHQiLCJhc09mIiwiaXNCZWZvcmUiLCJFWFBJUkFUSU9OX0hPVVJTIiwiVkVSU0lPTiIsInVzZXJUYXNrc1JlcG8iLCJLRURfZW52IiwidXNlcl90YXNrc19yZXBvX1VzZXJUYXNrc1JlcG8iLCJVc2VyVGFza3NSZXBvIiwiZ2V0Q2xpZW50IiwiZ2V0Q3VycmVudFVzZXIiLCJvcHRpbWlzdGljIiwiZ2V0UXVlcnlPcHRpb25zIiwiY3VycmVudFVzZXIiLCJ1c2VyRW1haWwiLCJwZXJzaXN0ZWRTdGF0ZSIsIndlZWtOdW1iZXIiLCJmcm9tIiwia2VkV2VlayIsIndlZWt1dGlsIiwibm90QmVmb3JlIiwidG8iLCJub3RBZnRlciIsImZsYWdzIiwidXBkYXRlUGVyc2lzdGVkU3RhdGUiLCJzdGF0ZUNoYW5nZXMiLCJtZW0iLCJub3RpZnlTdWJzY3JpYmVycyIsInNldFRhc2tEb25lU3RhdGUiLCJ1c2VyVGFzayIsIm1vZGlmaWVkSXRlbSIsIiRtZXRhIiwic2ltaWxhclRhc2tzIiwiaWRlbnRpY2FsVGFza3MiLCJjb3Vyc2VOYW1lIiwibGVhcm5pbmdHb2FsIiwic2V0U3ViVGFza0RvbmVTdGF0ZSIsInN1YlRhc2tJZCIsInN1YlRhc2tzIiwic3QiLCJzZXRXZWVrUGxhbm5lckJveE9wZW4iLCJpc09wZW4iLCJjaGFuZ2VXZWVrIiwibmV3UGVyc2lzdGVkIiwicmVmcmVzaEZyb21TZXJ2ZXIiLCJzdWJzY3JpYmUiLCJzdWJzY3JpYmVyIiwicHJveHlTdWJzY3JpYmVyIiwidXNlclRhc2tzIiwidXQiLCJ3ZWVrVGV4dHMiLCJrZWRiYWNrZW5kX2NsaWVudCIsImRhdGVUaW1lIiwiYXNzZXNzbWVudCIsInN0cmF0ZWd5IiwidW5zdWJzY3JpYmUiLCJzdWJzY3JpYmVycyIsImtlZF9yZXBvIiwia2VkQmFja2VuZENsaWVudCIsImVuc3VyZUhhc0RhdGEiLCJFbWl0dGVyIiwiaW5pdGlhbFZhbHVlIiwib2JzZXJ2ZXIiLCJzdWJzY3JpcHRpb24iLCJfZGlzcGF0Y2giLCJkaXNwYXRjaEVycm9yIiwiVmFsdWUiLCJfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX21hcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX2NvbGxlY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl9maWJlcl9jb250ZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJyZWFkIiwibm90aWZ5IiwicmVzb2x2ZWQiLCJzdWJzY2lwdGlvbiIsImN1cnJlbnRGaWJlciIsImN1cnJlbnQiLCJzdWJzY3JpcHRpb25zIiwiZm4iLCJwcmVmaXgiLCJ0b0NvbGxlY3Rpb24iLCJjb21iaW5lTGF0ZXN0Iiwib3RoZXIiLCJteVN1YnNjcmlwdGlvbiIsIm90aGVyU3Vic2NyaXB0aW9uIiwidmFsdWVzIiwiaXRlbXMiLCJzd2l0Y2hNYXAiLCJtYXBwZWRTdWJzY3JpcHRpb24iLCJyZXR1cm5lZFN1YnNjcmlwdGlvbiIsIm9ic2VydmFibGVPclZhbHVlIiwiT2JzZXJ2YWJsZSIsIl9zdWJzY3JpYmUiLCJGb3JtRmllbGQiLCJodG1sRm9yIiwibm9kZSIsInJlY3VjaGVjayIsIlNldCIsImZpbmRJZCIsImhhcyIsImNoaWxkIiwiY2hpbGRJZCIsIkNvbGxlY3Rpb24iLCJfdmFsdWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl9lbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfbWFwIiwiZW1pdHRlcl8xIiwiZmxhdCIsInRvVmFsdWUiLCJtZSIsIm9yZGVyQnkiLCJncm91cEJ5IiwiZmlyc3QiLCJhcnIiLCJSZW1vdmVJdGVtIiwic3R5bGUiLCJfdXRpbHNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInRlbXBsYXRlT2JqZWN0XzEiLCJSZWFjdERPTSIsImluaXRNYXBNZXRob2QiLCJjdG9yIiwic2Nob29sX3Rlcm1fU2Nob29sVGVybSIsIlNjaG9vbFRlcm0iLCJkYXRlT3JTY2hvb2xNb21lbnQiLCJzY2hvb2xNb21lbnQiLCJzY2hvb2xfbW9tZW50IiwibmV4dFRlcm0iLCJwcmV2VGVybSIsInRvTG9jYWxlU3RyaW5nIiwic2hvcnRZZWFyIiwiZm9ybWF0TWVzc2FnZSIsImRlZmF1bHRNZXNzYWdlIiwiZGVmYXVsdE9wdGlvbnMiLCJpc0FwaU1ldGhvZCIsImYiLCJjYWNoZUV4cGlyYXRpb24iLCJlZHNjbGllbnRfRWRzQ2xpZW50IiwiRWRzQ2xpZW50IiwidXNlckVtYWlsR2V0dGVyIiwib25nb2luZ1Byb21pc2VzIiwiYXJnc0pzb24iLCJzdXNwZW5zZSIsImFwaSIsInByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzdXNwZW5kaWZ5IiwiY2FjaGVkRW50cnkiLCJwcm9taXNlIiwidGltZW91dCIsIm1ha2VTdXNwZW5zZUFwaSIsInByaXZhdGl6aW5nQ2FjaGVCdXN0IiwiZ2V0QWN0aXZlQ291cnNlcyIsInEiLCJjb3Vyc2VDb2RlIiwiQ291cnNlQ29kZSIsInBlcmlvZE5hbWUiLCJQZXJpb2ROYW1lIiwiY291cnNlcyIsImV4XzEiLCJnZXRMYXRlc3RBc3Nlc3NtZW50cyIsImxpbWl0IiwiaXNOYU4iLCJDb3VudCIsImFzc2Vzc21lbnRzIiwiZ2V0U3R1ZGVudEdvYWxzIiwic3R1ZGVudEdvYWxzIiwiZ2V0U3R1ZGVudEZ1dHVyZUFiaWxpdGllcyIsInN0dWRlbnRGdXR1cmVBYmlsaXRpZXMiLCJnZXRUZWFjaGVyVHV0b3JTdHVkZW50cyIsInN0dWRlbnRzIiwiZ2V0U2Nob29sVHVpdGlvbkdyb3VwcyIsInNjaG9vbFR1aXRpb25Hcm91cHMiLCJnZXRUdWl0aW9uR3JvdXBTdHVkZW50cyIsInR1aXRpb25Hcm91cFN0dWRlbnRzIiwiZ2V0U2Nob29sVGVhY2hlcnMiLCJzY2hvb2xUZWFjaGVycyIsImdldEFjYWRlbWljWWVhclRlcm1zIiwic2Nob29sTG9jYWxlIiwiZGF0ZSIsIm1vY2tfZWRzX2RhdGEiLCJTb3V0aEluZGlhIiwiaXNTYW1lT3JBZnRlciIsImZpcnN0VGVybSIsInN0YXJ0RGF0ZSIsImlzU2FtZU9yQmVmb3JlIiwic2Vjb25kVGVybSIsImVuZERhdGUiLCJOb3J0aEluZGlhIiwiaG9saWRheXMiLCJnZXRNb250aCIsImZpcnN0VGVybVllYXIiLCJnZXRGdWxsWWVhciIsInNlY29uZFRlcm1ZZWFyIiwiZmlyc3RUZXJtWWVhck1vbWVudCIsInNlY29uZFRlcm1ZZWFyTW9tZW50Iiwic3RhcnRGaXJzdFRlcm1EYXRlIiwiZW5kRmlyc3RUZXJtRGF0ZSIsImVuZE9mIiwic3RhcnRTZWNvbmRUZXJtRGF0ZSIsImVuZFNlY29uZFRlcm1EYXRlIiwidG9EYXRlU3RyaW5nIiwiZWRzY2xpZW50X0VEU1BlcmlvZCIsIkVEU1BlcmlvZCIsInBlcmlvZFN0cmluZ09yU2Nob29sVGVybSIsInBlcmlvZCIsInN0YXJ0c1dpdGgiLCJzY2hvb2xUZXJtIiwiVGV4dEFyZWFGb3JtRmllbGQiLCJjb2xzIiwicm93cyIsIkZpYmVyQ29udGV4dCIsInByb3ZpZGVycyIsImFkZFByb3ZpZGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwic2V0Q3VycmVudEdldHRlckZyb21Qcm92aWRlcnMiLCJyZW1vdmVQcm92aWRlciIsInNldCIsIktFRFdlZWsiLCJnZXRBZGp1c3RlZFdlZWsiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJ0b0RhdGUiLCJnZXRUaW1lIiwid2Vla2RheSIsIl9leGVjX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJib2xkIiwiaWNvbiIsIml0YWxpYyIsInVuZGVybGluZSIsInN0cmlrZXRocm91Z2giLCJoZWFkaW5nMSIsImhlYWRpbmcyIiwiaGVhZGluZzMiLCJwYXJhZ3JhcGgiLCJxdW90ZSIsIm9saXN0IiwidWxpc3QiLCJsaW5lIiwicHJvbXB0IiwiaW1hZ2UiLCJwcm9tcHRNc2ciLCJjb21wb25lbnQiLCJlbGVtZW50Iiwic2VsIiwicmFuZ2UiLCJpbWciLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwidGFiSW5kZXgiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImNvbGxhcHNlIiwiaW5zZXJ0Tm9kZSIsInNldFN0YXJ0QWZ0ZXIiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsIm9uZm9jdXMiLCJvbkZvY3VzIiwib25ibHVyIiwib25CbHVyIiwiY29udGVudERpdiIsImlubmVySFRNTCIsIktlZFJlcG8iLCJfcmVwb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicXVlcnlPcHRpb25zIiwiY2FjaGVCdXN0IiwiZ2V0Q2FjaGVCdXN0IiwicmVnZW5lcmF0ZUNhY2hlQnVzdCIsImtlZGJhY2tlbmRfY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ1cHNlcnQiLCJ1cGRhdGVyIiwiJGV0YWciLCJ1cGRhdGVkSXRlbSIsImluc2VydCIsImUiLCJtb2RpZmllZEl0ZW1zIiwibWVtUmVwb0l0ZW0iLCJmaW5kIiwiaXQiLCJiciIsImlkcyIsImZyZXNoSXRlbXMiLCJmcmVzaEl0ZW0iLCJtb2RpZmllZCIsIm5ld0V0YWdzIiwic3RyaXBHcmFwaHMiLCJncmFwaCIsInN0cmlwcGVkIiwiZm9yZWlnbkl0ZW1zIiwiZ3JhcGhzXzEiLCJncmFwaHNfMV8xIiwic3RyaXBwZWRfMSIsInN0cmlwcGVkXzFfMSIsInBhcnNlciIsIkRPTVBhcnNlciIsIkhUTUxfV0FTSF9QT0xJQ1kiLCJ1Iiwic3RyaWtlIiwicHJlIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImNsYXNzIiwidGFiaW5kZXgiLCJ1bCIsIm9sIiwibGkiLCJociIsImRpdiIsInNwYW4iLCJib3JkZXIiLCJ0Ym9keSIsInRoZWFkIiwidGZvb3QiLCJ0ciIsInRkIiwiY29sc3BhbiIsInJvd3NwYW4iLCJ0aCIsImFiYnIiLCJzY29wZSIsInNvcnRlZCIsIndhc2hIdG1sIiwiaHRtbCIsInBhcnNlRnJvbVN0cmluZyIsImNoaWxkTm9kZXMiLCJ3YXNoTm9kZSIsInRhZ05hbWUiLCJpc0VsZW1lbnQiLCJwb2xpY3kiLCJ3YXNoQ2hpbGROb2RlcyIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJyZW1vdmUiLCJyZW1vdmVNaWRkbGVFbGVtZW50IiwiYXR0cmlidXRlcyIsImF0dHIiLCJhbGxvd2VkIiwicmVtb3ZlQXR0cmlidXRlIiwid2FzaEVsZW1lbnQiLCJjbGFzc2VzIiwid3lzaXd5Z19XeXNpd3lnIiwiV3lzaXd5ZyIsImZvY3VzUmVjdCIsIm9uTW91c2VEb3duIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJjb21wb25lbnREaWRNb3VudCIsInJlYWRPbmx5IiwicXVlcnlTZWxlY3RvckFsbCIsImVsZW0iLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlcG9ydE51bUNoYXJzIiwiaW5uZXJUZXh0IiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFN0YXRlIiwidHJpZ2dlck9uQ2hhbmdlIiwibmV3U3RhdGUiLCJnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCIsInBhcmVudEVsZW1lbnQiLCJmb2N1c0VsZW0iLCJyZWxhdGVkVGFyZ2V0IiwiZm9jdXNSZWN0RGl2IiwibWFrZUNsaWNrYWJsZSIsImNvcm5lciIsImdldFJlY3RDb3JuZXIiLCJyZXNpemVTdGFydFgiLCJjbGllbnRYIiwicHJldmVudERlZmF1bHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsIm5ld1dpZHRoIiwibWF4IiwiZW5kc1dpdGgiLCJmYWN0b3IiLCJuZXdIZWlnaHQiLCJoZWlnaHQiLCJleGVjSW1hZ2VFZGl0QWN0aW9uIiwiY21kIiwiY3NzRmxvYXQiLCJjYiIsImRlZmF1bHRBY3Rpb25zIiwiYWN0aW9ucyIsImFjdGlvbnNUb1VzZSIsImFjdGlvbiIsIm1heENoYXJzIiwiZXh0ZXJuYWxfUmVhY3RfIiwiaWR4IiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX2h0bWwiLCJzZXRUaW1lb3V0IiwiZm9jdXMiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJyZWYiLCJjb250ZW50RWRpdGFibGUiLCJvblBhc3RlIiwiY3VycmVudFRhcmdldCIsImVkaXRvclRleHQiLCJ0ZXh0QmVpbmdQYXN0ZWQiLCJjbGlwYm9hcmREYXRhIiwiZ2V0RGF0YSIsIm9uS2V5VXAiLCJOYU4iLCJvbktleVByZXNzIiwib25JbnB1dCIsIm9uS2V5RG93biIsIndoaWNoIiwic3RvcFByb3BhZ2F0aW9uIiwic2hpZnRLZXkiLCJrZXlDb2RlIiwicmVtb3ZlQ2hpbGQiLCJvdXRsaW5lIiwiYm90dG9tIiwicGFyZW50IiwicGFyZW50UmVjdCIsImNoaWxkUmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJnZXRUYXNrVHlwZSIsInNpdGVWaXNpb25QYWdlSWQiLCJjb3Vyc2VJbmZvIiwidXNlcl90YXNrc19ib3hfVXNlclRhc2tzQm94IiwiVXNlclRhc2tzQm94IiwibGVhcm5pbmdHb2FscyIsInNyY19mZWF0dXJlcyIsImNvbnRleHQiLCJvcGVuX2Nsb3NlX2JveCIsImluZGV4X2VzIiwiY291cnNlX25hbWVfdG9fY3NzX2NsYXNzIiwiYmVjYW1lT3BlbiIsInNldElzT3BlbiIsImxnIiwic3RlcCIsInJlbW92ZUxlYXJuaW5nR29hbCIsImlzV29ya2luZyIsInRhc2tUeXBlIiwiZXhwaXJlZCIsImRlYWRsaW5lIiwib3BhY2l0eSIsInNldFRhc2tEb25lIiwiZ2V0VGFza1VybCIsInZpZXdDb3Vyc2VVcmwiLCJnZXRTdWJqZWN0UGxhbm5lclRhc2tVcmwiLCJob3N0IiwiZm9ybWF0IiwiZWRpdFRhc2siLCJzdWJUYXNrIiwic2V0U3ViVGFza0RvbmUiLCJlZGl0U3ViVGFzayIsImFkZE93blRhc2siLCJjb250ZXh0VHlwZSIsImFjY2Vzc19jb250cm9sIiwiY291cnNlSWQiLCJ0YWIiLCJLRURfY2ZnIiwiS0VEX1NVQkpFQ1RfUExBTk5FUl9VUkwiLCJhZGRfY3VzdG9tX2dvYWxfQWRkQ3VzdG9tR29hbCIsIkFkZEN1c3RvbUdvYWwiLCJvblNhdmUiLCJhZGRfY3VzdG9tX3Rhc2tfQWRkQ3VzdG9tVGFzayIsIkFkZEN1c3RvbVRhc2siLCJkZXNjcmlwdGlvbiIsImlzVGFzayIsImZvcm1fZmllbGRfdGV4dF9pbnB1dCIsImZvcm1fZmllbGRfdGV4dGFyZWEiLCJhZGRfb3JfZWRpdF9zdWJfdGFza19BZGRPckVkaXRTdWJUYXNrIiwiQWRkT3JFZGl0U3ViVGFzayIsImNsb3NlRGlhbG9nIiwibmV3U3ViVGFza18xIiwiaXNFZGl0TW9kZSIsImVkaXRfdXNlcl90YXNrX0VkaXRVc2VyVGFzayIsIkVkaXRVc2VyVGFzayIsIm9uVXNlclRhc2tzQ2hhbmdlZCIsIm15VXNlclRhc2siLCJpc01vZGlmaWVkIiwiYWRkU3ViVGFzayIsIm9wZW5EaWFsb2ciLCJzaG93Q2FsZW5kYXIiLCJvblVwZGF0ZSIsIm9uRGVsZXRlIiwiaXNDdXN0b21UYXNrIiwiZm9ybV9maWVsZCIsImVzIiwiZGF0ZVBpY2tlciIsInNlbGVjdGVkIiwiZGF0ZUZvcm1hdCIsInNob3dXZWVrTnVtYmVycyIsImxvY2FsZSIsInBvcHBlclBsYWNlbWVudCIsInNldE9wZW4iLCJ3ZWVrcGxhbm5lcl9XZWVrUGxhbm5lciIsIldlZWtQbGFubmVyIiwiZGlhbG9ncyIsInNhdmluZyIsIndlZWtUZXh0c1VUIiwiaXNMb2FkaW5nIiwiaXNDb3B5aW5nVGFza3MiLCJ3ZWVrVGV4dHNTYXZpbmdKb2IiLCJwZW5kaW5nX2pvYiIsInNhdmVXZWVrVGV4dHMiLCJzdG9wIiwicGVyc2lzdGVkIiwiaXNXZWVrVGV4dHNFZGl0ZWQiLCJwcmV2V2VlayIsIm5leHRXZWVrIiwiZGlhbG9nIiwib3BlbkFkZEdvYWxEaWFsb2ciLCJhZGRDdXN0b21Hb2FsIiwib3BlbkFkZE93blRhc2tEaWFsb2ciLCJsZWFybmluZ0dvYWxOYW1lIiwiYWRkQ3VzdG9tVGFzayIsImxhdGVzdFRpbWVTdGFtcCIsImNvbmZpcm0iLCJsZWFybmluZ0dvYWxzTnVtYmVyIiwiYWxsVGFza3MiLCJjb3B5RnJvbVByZXZpb3VzV2VlayIsInVzZXJUYXNrc18xIiwicHJldldlZWtObyIsInByZXZLRURXZWVrIiwicHJldlRhc2tzIiwicHJldlRhc2siLCJ0YXNrT2ZDdXJyZW50V2VlayIsImxhdGVzdFRpbWVTdGFtcF8xIiwiY29waWVzIiwiY29weSIsImN1cnJlbnRXZWVrIiwidGFza1NldHMiLCJ0YXNrc1BlckNvdXJzZSIsImNvdXJzZVRhc2tzIiwidGFza3NQZXJMZWFybmluZ0dvYWwiLCJyZXN1bHRMZWFybmluZ0dvYWxzIiwiX2YiLCJsZ1Rhc2tzIiwibGVhcm5pbmdHb2FsVGFzayIsInJlZmluZSIsImlzU2F2aW5nIiwiaXNTdHJhdGVneUVkaXRlZCIsImlzQXNzZXNzbWVudEVkaXRlZCIsImVuYWJsZVNhdmVCdXR0b24iLCJjdHJsS2V5IiwidHJpZ2dlckNoYW5nZSIsInNwaW5uZXIiLCJkaXNhYmxlZCIsInR1dG9yZWQiLCJ1dGlsaXR5X2NvbXBvbmVudHNfZGlhbG9ncyIsInBvcERpYWxvZyIsInNldHVwSW50bCIsIkNvbXBvbmVudCIsIl9TZXR1cExhbmd1YWdlSW50bCIsInJlYWN0X2ludGxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInJlYWN0X2ludGxfbG9jYWxlX2RhdGFfZW5fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0IiwicmVhY3RfaW50bF9sb2NhbGVfZGF0YV9zdl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJtZXNzYWdlcyIsInN2IiwiX3RyYW5zbGF0aW9uc19zdl9qc29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJlbiIsIl90cmFuc2xhdGlvbnNfZW5fanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwibW9tZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X19fZGVmYXVsdCIsIl9nbG9iYWxzX0tFRF9jZmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyIsIktFRF9MT0NBTEUiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiQ29uZmlybWF0aW9uIiwidmlzaWJsZSIsIm9uQ29uZmlybSIsIm9uQ2FuY2VsIiwidGFza19saXN0X1Rhc2tMaXN0IiwiVGFza0xpc3QiLCJjb25maXJtYXRpb25zIiwidXNlcl90YXNrc19yZXBvIiwidG9nZ2xlVGFzayIsImxlYXJuaW5nVGFzayIsImFsbCIsImxlYXJuaW5nVGFza3MiLCJ3ZWVrUGxhbm5lcldlZWsiLCJmb3JXZWVrU3RyaW5nIiwidGVtcGxhdGVPYmplY3RfMiIsInRlbXBsYXRlT2JqZWN0XzMiLCJ0YXNrTG9va3VwSWQiLCJkZXNjcmliZWRBY3Rpb24iLCJ0ZW1wbGF0ZU9iamVjdF80IiwidGVtcGxhdGVPYmplY3RfNSIsImNvbmZpcm1hdGlvblZpc2libGUiLCJ0aWQiLCJoaWRkZW5Db3Vyc2VzUmVwbyIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIkhpZGRlbkNvdXJzZXNSZXBvIiwiZnVsbENvdXJzZSIsIm5vdGlmeVN1YnNjcmliZXIiLCJrZWRSZXBvIiwiX2tlZF9yZXBvX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJpbml0UHJvbWlzZSIsImluaXQiLCJrZWRDb3Vyc2VzUHJvbWlzZSIsImVkc0NvdXJzZXNQcm9taXNlIiwiX3V0aWxzX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJiZWFyZXJQcm9taXNlIiwibGlzdEtlZENvdXJzZXMiLCJsaXN0RURTQ291cnNlcyIsInVzZXJIaWRkZW5Db3Vyc2VzUmVzb2x2ZWQiLCJ1c2VySGlkZGVuQ291cnNlc1Byb21pc2UiLCJyZXNvbHZlVXNlckhpZGRlbkNvdXJzZXNQcm9taXNlIiwidXNlckhpZGRlbkNvdXJzZXMiLCJhY3RpdmVDb3Vyc2VzIiwiZWRzQWN0aXZlQ291cnNlcyIsImNyZWF0ZUNvdXJzZXNMaXN0Iiwic2Nob29scyIsIl9hcGlzX2Vkc2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX3V0aWxzX3NjaG9vbF9tb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fX2RlZmF1bHQiLCJlZHNDbGllbnQiLCJoaWRkZW5Db3Vyc2VzTWFwIiwiaGMiLCJzaG93IiwidmlzaWJsZUNvdXJzZXNNYXAiLCJpc1N0dWRlbnQiLCJlZHNDb3Vyc2VNYXAiLCJtb2RpZmllZEJ5IiwiZWRzQ291cnNlIiwiZGVmYXVsdFZpc2libGUiLCJoaWRlQ291cnNlIiwib3ZlcnJpZGVzIiwia2VkYmFja2VuZF9jbGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIm92Iiwic2hvd0NvdXJzZSIsInVzZXJzIiwiZGlzcGxheU5hbWUiLCJzY2hvb2xUeXBlIiwic2Nob29sR3JhZGUiLCJsb2NhbE1vbWVudCIsIl9nbG9iYWxzX0tFRF9jZmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInVwZGF0ZUxvY2FsZSIsIm1vbnRocyIsIm1vbnRoc1Nob3J0Iiwid2Vla2RheXMiLCJ3ZWVrZGF5c1Nob3J0Iiwid2Vla2RheXNNaW4iLCJsb25nRGF0ZUZvcm1hdCIsIkxUIiwiTFRTIiwiTEwiLCJMTEwiLCJMTExMIiwibGxsIiwibGxsbCIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJsYXN0RGF5IiwibGFzdFdlZWsiLCJzYW1lRWxzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaCIsImhoIiwiZGQiLCJNIiwiTU0iLCJ5IiwieXkiLCJkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIiwib3JkaW5hbCIsIm51bWJlciIsImRvdyIsImRveSIsIlJlcG8iLCJjb21tIiwibGlzdFByb21pc2UiLCJ1cGRhdGVkSXRlbXMiLCJmZWF0dXJlc19GZWF0dXJlcyIsImZlYXR1cmVzIiwiZmVhdHVyZSIsImNvdXJzZU5hbWVUb0Nzc0NsYXNzIiwiY3NzUHJlZml4IiwiRGlhbG9ncyIsInByZXZQcm9wcyIsImxhc3REaXYiLCJqcXVlcnlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX19kZWZhdWx0IiwicmVhY3RfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJjc3MiLCJhcmlhLWRpc2FibGVkIiwiY2xpY2siLCJtZXRhS2V5IiwiZG9tTm9kZSIsIl9jb3Vyc2VfYnVpbGRlcl9zdWJfY29tcG9uZW50c19yZW1vdmVfaXRlbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiUGVuZGluZ0pvYiIsImNhbGxiYWNrIiwidGltZW91dElkIiwiY2FuY2VsbGVkIiwicGVuZGluZyIsImlzSm9iRXhlY3V0aW5nIiwiam9iQ2FsbGJhY2siLCJ0aHJvdHRsZSIsImNsZWFyVGltZW91dCIsImxhdW5jaEpvYiIsIkVOVklST05NRU5UIiwiS0VEX0FQSV9VUkwiLCJFRFNfQVBJX1VSTCIsIktFRF9UT0tFTl9VUkwiLCJLRURfQ0xJRU5UX0lEIiwiS0VEX0NMSUVOVF9TRUNSRVQiLCJLRURfUkVBTE0iLCJLRURfU0NIT09MX0xPQ0FMRSIsImdldE1lcmdlZFRva2VuUGF0aCIsInNjb3BlcyIsImltcGVyc29uYXRpb25Qcm9wcyIsInRva2VuUGF0aFdpdGhvdXRRdWVyeSIsInRva2VuUXVlcnlTdHJpbmciLCJ0b2tlblBhdGhRdWVyeSIsImdldFRva2VuSWQiLCJtZXJnZWRUb2tlblBhdGgiLCJjcmVhdGVUZXN0VG9rZW5Qcm92aWRlciIsImNsaWVudHdlYiIsImVtYWlsIiwiaW5pdGlhbFVzZXJFbWFpbCIsIktFRF9UT0tFTl9QQVRIIiwic2V0X2JlYXJlcl9wcm92aWRlcnNfbWVyZ2VkVG9rZW5QYXRoIiwicmVzcG9uc2VUZXh0Iiwib2siLCJzYXZlVXNlckluZm8iLCJzdG9yZWRTZXNzaW9uVXNlciIsImxvYWRVc2VySW5mbyIsImdvb2dsZU1lcmdlZFBhdGgiLCJnb29nbGVUb2tlblByb3ZpZGVyIiwiY3JlYXRlR29vZ2xlVG9rZW5Qcm92aWRlciIsImVkc2NsaWVudCIsIlR1dG9yYWJsZUNvbXBvbmVudCIsIm9uRW52VXBkYXRlZCIsIl9nbG9iYWxzX0tFRF90dXRvckVudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiY3JlYXRlQ29tcG9uZW50IiwiQ2hvb3NlVXNlciIsIl9kYXRhX3VzZXJzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJmb250U3R5bGUiLCJSZW5hbWVhYmxlVGV4dCIsImVkaXRNb2RlIiwicnVudGltZVN0eWxlIiwicmVuYW1lIiwiZGlzcGxheSIsImNsaWNrQWR2ZXJ0aXNlVGV4dCIsInRhZyIsImpxdWVyeV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJzZWxlY3QiLCJibHVyIiwicHJvcGFnYXRlT25DaGFuZ2UiLCJuZXdWYWx1ZSIsInByb3BhZ2F0ZWRPbkNoYW5nZSIsImVhZ2VyIiwidHh0IiwidGV4dEFsaWduIiwiZm9udFNpemUiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwibWFyZ2luVG9wIiwibWFyZ2luQm90dG9tIiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiYm9yZGVyUmFkaXVzIiwiYmFja2dyb3VuZENvbG9yIiwibGluZUhlaWdodCIsImZvbnRXZWlnaHQiLCJvdXRMaW5lIiwiYm9yZGVyU3R5bGUiLCJib3hTaXppbmciLCJMaXN0Q291cnNlcyIsInVwZGF0ZUhpZGRlbkNvdXJzZXMiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfcmVwb3NfaGlkZGVuX2NvdXJzZXNfcmVwb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fIiwiX2NvdXJzZV9idWlsZGVyX3N1Yl9jb21wb25lbnRzX3NwaW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsInZpc2libGVDb3Vyc2VzIiwiaGlkZGVuQ291cnNlcyIsIl91dGlsc19xdWVyeV9zdHJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIl9nbG9iYWxzX0tFRF9jZmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIktFRF9DT1VSU0VfVklFV0VSX1VSTCIsIl9hY2Nlc3NfY29udHJvbF9pbmRleF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiTGVhcm5pbmdHb2Fsc0xpc3QiLCJjb21tb25UYXNrcyIsIl90YXNrX2xpc3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImdldEN1cnJlbnRBY2FkZW1pY1llYXIiLCJjdXJyZW50RGF0ZSIsImZpcnN0VGVybVN0YXJ0RGF0ZSIsImZpcnN0VGVybUVuZERhdGUiLCJzZWNvbmRUZXJtU3RhcnREYXRlIiwic2Vjb25kVGVybUVuZERhdGUiLCJhY2FkZW1pY1BlcmlvZCIsIl9nZXRUZXJtSG9saWRheXMiLCJhY2FkZW1pY1N0YXJ0V2VlayIsImFjYWRlbWljRW5kV2VlayIsImFjYWRlbWljWWVhclN0cnVjdHVyZSIsIm51bWJlck9mSG9saWRheVdlZWtzIiwibnVtYmVyT2ZXZWVrcyIsIl9nZXRIb2xpZGF5V2Vla3NOdW1iZXIiLCJ0ZXJtU3RhcnREYXRlIiwidGVybUVuZERhdGUiLCJpc0JldHdlZW4iLCJnZXRDb2x1bW5IZWFkZXJGcm9tQ291cnNlIiwic2hvcnROYW1lIiwiZ2VuZXJpY19zY2hvb2xfdGVybV9HZW5lcmljU2Nob29sVGVybSIsIkdlbmVyaWNTY2hvb2xUZXJtIiwiY3VycmVudExvY2FsZSIsInNlbGVjdGVkRGF0ZSIsImluY2x1ZGVFeHRyYVdlZWsiLCJzdGFydE9mVGVybVdlZWsiLCJlbmRPZlRlcm1XZWVrIiwiaXNDdXJyZW50V2VlayIsInRlcm1EYXRlIiwiZ2V0TGFzdFN0ZXBXZWVrIiwic3VidHJhY3QiLCJnZXRQZXJpb2ROYW1lIiwidmlld21vZGVsX1ZpZXdNb2RlbCIsImRiV2Vla1BsYW5zIiwiY3VycmVudFNjaG9vbFRlcm0iLCJjdXJyZW50U2Nob29sTG9jYWxlIiwiY29sdW1ucyIsIndlZWtQbGFucyIsInRlcm1TdGFydCIsInRlcm1FbmQiLCJnZXRDb2x1bW5zSGVhZGVyIiwiaXNGaXhlZCIsInRyYW5zbGF0ZWRDb2x1bW5zIiwiZ2V0U2Nob29sVHJhbnNsYXRlZENvbHVtbnMiLCJ0cmFuc2xhdGVkTmFtZSIsImN1cnJlbnRUZXJtSG9saWRheXMiLCJjdXJyZW50VGVybV8xIiwic3RhcnRBY2FkZW1pY1llYXJOdW1iZXIiLCJ3ZWVrTW9tZW50Iiwid2Vla1BsYW4iLCJ3cCIsImlzRmluYWxTdGVwIiwidGhpc18xIiwiY2VsbFZhbHVlcyIsImFjYWRlbWljV2Vla051bWJlciIsImxhc3RTdGVwV2VlayIsImxhc3RTdGVwS2VkV2Vla18xIiwibGFzdFN0ZXBzIiwiY29tcGxldGVkU3RlcHMiLCJ0ZXJtR29hbHMiLCJjb3Vyc2VzXzEiLCJjb3Vyc2VzXzFfMSIsImNvbHVtbkhlYWRlciIsImNvdXJzZVN0ZXBzIiwiaXNDb21wbGV0ZWQiLCJwZXJpb2RHb2FsR3JhZGUiLCJ0ZXJtUGxhbm5lclJlcG9LUyIsImtzVGVybVBsYW5uZXJSZXBvIiwidGVybXBsYW5uZXJfS1NUZXJtUGxhbm5lciIsIktTVGVybVBsYW5uZXIiLCJpbml0aWFsRGF0ZSIsImxvYWRpbmdBY3RpdmVDb3Vyc2VzIiwibG9hZGluZ1dlZWtQbGFucyIsImluaXRpYWxMb2FkIiwiZmxvd0lkIiwidXBkYXRlV2Vla1BsYW5zIiwibG9hZEFjYWRlbWljWWVhckRhdGVzIiwicmVmcmVzaERhdGEiLCJsb2FkQWN0aXZlQ291cnNlcyIsInRhYmxlRWxlbSIsImV4dGVybmFsX2pRdWVyeV9kZWZhdWx0Iiwia2V5ZG93biIsImlzIiwibmV4dFRyIiwiaXNVcCIsImNsb3Nlc3QiLCJpbmRleCIsInRvQXJyYXkiLCJhbGxUcnMiLCJ0ckluZGV4Iiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJ2YWwiLCJlcSIsInRhYmFibGVzIiwicHJldkVsZW1lbnQiLCJuZXh0RWxlbWVudF8xIiwibmV4dEVsZW1lbnQiLCJ1cGRhdGVDZWxsIiwiY29sdW1uTmFtZSIsImVycm9yXzEiLCJzdGFjayIsImdldFN0ZXBDb2x1bW4iLCJjb2xJbmRleCIsInN1YmplY3ROYW1lIiwicnR4dHMiLCJtb2RlbCIsInJlYWRPbmx5Q2VsbHMiLCJpc0ZpeGVkQ29sdW1uIiwiY29sdW1uVGFnIiwiZ2V0U3RlcENvbHVtbkNsYXNzTmFtZSIsInJlbmFtZWFibGVfdGV4dCIsInJ0IiwiaXNDb3Vyc2VDb2x1bW4iLCJjc3NDbGFzcyIsImdldFN0ZXBGb290ZXJDb2x1bW4iLCJsYXN0VHJEYXRhcyIsImdldFN0ZXBIZWFkZXJDb2x1bW4iLCJ0cmFuc2xhdGVkQ29sdW1uSGVhZGVyIiwibmVlZFdyYXBDbGFzcyIsImlzTGFzdCIsIlR1dG9yRW52IiwidmVyc2lvbiIsInNldE5ld0VudiIsImVudkdldHRlciIsIl9rZWRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsInR1dG9yRW52IiwiLi9lbi1TRyIsIi4vZW4tU0cuanMiLCIuL2VuLWF1IiwiLi9lbi1hdS5qcyIsIi4vZW4tY2EiLCIuL2VuLWNhLmpzIiwiLi9lbi1nYiIsIi4vZW4tZ2IuanMiLCIuL2VuLWllIiwiLi9lbi1pZS5qcyIsIi4vZW4taWwiLCIuL2VuLWlsLmpzIiwiLi9lbi1ueiIsIi4vZW4tbnouanMiLCIuL3N2IiwiLi9zdi5qcyIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX3dlZWtwbGFubmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfdXRpbHNfcXVlcnlfc3RyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJLU1Rlcm1QbGFubmVyUmVwbyIsInN0YXJ0RGF0ZVZhbHVlIiwibW9tZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsImVuZERhdGVWYWx1ZSIsImRhdGVJbnRlcnZhbCIsIk1JTlVURSIsIlNFQ09ORCIsIkRheVZpZXdFdmVudCIsImRheVN0YXJ0Iiwic3RhcnRNb21lbnQiLCJlbmRNb21lbnQiLCJwb3MiLCJ6b29tIiwiaHRtbExpbmsiLCJkaWZmIiwibG9jYWxlVGltZU9wdGlvbnMiLCJob3VyIiwibWludXRlIiwibG9jYWxlU3RhcnRUaW1lIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwibG9jYWxlRW5kVGltZSIsIm1heEhlaWdodCIsIm92ZXJmbG93IiwiVGltZUxpbmVzIiwiZGF5RW5kIiwiaG91clBpeGVscyIsInN0YXJ0SG91ciIsImVuZEhvdXIiLCJob3VycyIsIm1hcmdpbiIsIkRheVZpZXciLCJldmVudHMiLCJpc0xhc3RDYWxsIiwiY3J1bmNoZWRFdmVudHMiLCJldmVudEluZGV4Iiwib3ZlcmxhcHMiLCJhbGxPdmVybGFwcyIsInByZXZPdmVybGFwcyIsIm92ZXJsYXAiLCJyb3VuZCIsImNuIiwiY3J1bmNoQ29sbGlkaW5nRXZlbnRzIiwiSG91ck1hcmtlciIsInlwb3MiLCJwYWRkaW5nIiwiU3RhdHVzQmFyIiwid2Vla192aWV3IiwiV2Vla1ZpZXciLCJmaXJzdERheSIsIm51bURheXMiLCJkYXlEYXRhcyIsImRheSIsImRheURhdGUiLCJpc1RvZGF5Iiwic3RhcnQiLCJlbmQiLCJmdWxsRGF5RXZlbnRzIiwidG9JU09TdHJpbmciLCJjb2xTcGFuIiwiZ29vZ2xlX2NhbGVuZGFyX0dvb2dsZUNhbGVuZGFyIiwiR29vZ2xlQ2FsZW5kYXIiLCJlbnN1cmVJbml0ZWQiLCJnYXBpIiwibG9hZEdhcGkiLCJ0b2tlbkV4cGlyYXRpb24iLCJ0b2tlblJlc3VsdCIsInNldFRva2VuIiwiYWNjZXNzX3Rva2VuIiwic2NyaXB0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhcHBlbmRDaGlsZCIsImdhYXBpX2xvYWRlZCIsImxpc3RDYWxlbmRhcnMiLCJjYWxlbmRhckxpc3QiLCJiYXRjaEV2ZW50cyIsInRpbWVNaW4iLCJ0aW1lTWF4IiwiYmF0Y2hfMSIsIm5ld0JhdGNoIiwiY2FsIiwiY2FsZW5kYXJJZCIsInNob3dEZWxldGVkIiwic2luZ2xlRXZlbnRzIiwiZmllbGRzIiwibWF4UmVzdWx0cyIsInJlc3AiLCJuZXdDYWxzIiwiY2FsSWQiLCJjYWxlbmRhcl9DYWxlbmRhciIsIkNhbGVuZGFyIiwiaW5pdGlhbFN0YXJ0SG91ciIsImluaXRpYWxFbmRIb3VyIiwiaW5pdGlhbFpvb20iLCJjYWxlbmRhcnMiLCJjYWxlbmRhcnNCZWluZ0xvYWRlZCIsImdjYWwiLCJsb2FkRGF0YSIsImhhbmRsZUVycm9yIiwic3VtbWFyeSIsImlzT3duZXIiLCJhY2Nlc3NSb2xlIiwiaXNQcmltYXJ5IiwicHJpbWFyeSIsImlzQ2xhc3Nyb29tQ2FsZW5kYXIiLCJpc0hvbGlkYXlDYWxlbmRhciIsInNob3VsZEluY2x1ZGVDYWxlbmRhciIsIm5hdmlnYXRlVG9QcmV2aW91c1dlZWsiLCJuYXZpZ2F0ZVRvTmV4dFdlZWsiLCJldmVudFNldHMiLCJpc1NjaGVkdWxlIiwiaXNIb2xpZGF5IiwiY2xhc3NOYW1lcyIsImNvbG9ySWQiLCJ3ZWVrX25vdGVfZGlhbG9nX1dlZWtOb3RlRGlhbG9nIiwiV2Vla05vdGVEaWFsb2ciLCJub3RlIiwiY29sb3IiLCJwbGFucyIsImtnVGVybVBsYW5uZXJSZXBvIiwia2dfdGVybXBsYW5uZXJfS0dUZXJtUGxhbm5lciIsIktHVGVybVBsYW5uZXIiLCJpc0xvYWRpbmdDb3Vyc2VzIiwiaXNMb2FkaW5nV2Vla1BsYW5zIiwibG9hZEVEU0NvdXJzZXMiLCJvbk5vdGVDbGljayIsIndlZWtzIiwiZmlyc3RXZWVrIiwidyIsImNyZWRpdHMiLCJLR1Rlcm1QbGFubmVyVHV0b3JlZCIsIl9rZ190ZXJtcGxhbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3V0aWxpdHlfY29tcG9uZW50c190dXRvcmFibGVfY29tcG9uZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJrZ190ZXJtcGxhbm5lcl9yZXBvX0tHVGVybVBsYW5uZXJSZXBvIiwiS0dUZXJtUGxhbm5lclJlcG8iLCJ0ZXJtUGxhbm5lclJlcG8iLCJyZXF1ZXN0VHV0b3JlZFRva2VucyIsImNyZWF0ZUJlYXJlclByb3ZpZGVyIiwicmV0cmlldmVUb2tlbiIsInR1dG9yZWRLZWRCYWNrZW5kQ2xpZW50Iiwia3NfdGVybXBsYW5uZXJfcmVwbyIsInR1dG9yc19zZWxlY3RfVHV0b3JzU2VsZWN0IiwiVHV0b3JzU2VsZWN0IiwiZWRzU3R1ZGVudHMiLCJmaXJzdE5hbWUiLCJsYXN0TmFtZSIsIm9uU2VsZWN0VXNlciIsImNob29zZW5TdHVkZW50IiwiS0VEX3R1dG9yRW52IiwiZXh0ZXJuYWxfUmVhY3RfZGVmYXVsdCIsInN0dWRlbnQiLCJfZ2xvYmFsc19LRURfY2ZnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJMYXRlc3RBc3Nlc3NtZW50cyIsImxvYWRpbmciLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJoYXNHcmFkZXMiLCJncmFkZU5hbWUiLCJ0ZW1wbGF0ZU9iamVjdF82IiwicHVibGlzaERhdGVUaW1lIiwiY291cnNlVW5pdE5hbWUiLCJLR1Rlcm1QbGFubmVyU2VsZiIsIktTVGVybVBsYW5uZXJUdXRvcmVkIiwiX3Rlcm1wbGFubmVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfdXRpbGl0eV9jb21wb25lbnRzX0xhbmd1YWdlQ29udGV4dF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiUHJvdmlkZXIiLCJNeUNvdXJzZXMiLCJ1cGRhdGVIaWRkZW5Db3Vyc2VzU3RhdGUiLCJfcmVwb3NfaGlkZGVuX2NvdXJzZXNfcmVwb19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiZ2V0Q291cnNlVXJsIiwiX2FjY2Vzc19jb250cm9sX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJ3ZWVrTm90ZXNSZXBvIiwid2Vla19ub3Rlc19yZXBvX1dlZWtOb3Rlc1JlcG8iLCJXZWVrTm90ZXNSZXBvIiwiaWZUYWtlc1RpbWUiLCJtcyIsInRpbWVvdXRSZWFjaGVkIiwid2Vla19ub3RlYm9va19XZWVrTm90ZWJvb2siLCJXZWVrTm90ZWJvb2siLCJhdXRvU2F2ZXIiLCJzaG93TG9hZGluZ1Byb2dyZXNzIiwic2hvd1NhdmluZ1Byb2dyZXNzIiwiZXZlckVkaXRlZCIsIm5vdGVzIiwic2hvd1Byb2dyZXNzSWZMb2FkaW5nVGFrZXNUaW1lIiwidGltZW91dEhhbmRsZSIsIl9zYXZlIiwibWF4SXRlcmF0aW9ucyIsImlzTm90ZXNFZGl0ZWQiLCJ3ZWVrTm90ZSIsInduIiwiY29udGVudCIsImVycl8xIiwiZ2V0VHJhbnNsYXRlZEFjdGlvbnMiLCJsb2NhbGVBY3Rpb25zIiwiYWN0aW9uc19zdiIsImN1cnJlbnRUaXRsZSIsIndlZWtOb3RlcyIsInd5c2l3eWciLCJGcmFnbWVudCIsIlJvb3RXZWVrTm90ZWJvb2siLCJnb2Fsc192aWV3bW9kZWxfVmlld01vZGVsIiwic3R1ZHlQbGFucyIsInN1YmplY3RzIiwic3AiLCJwZXJpb2RHb2FscyIsImciLCJnb2FsIiwiYXRHb2FsIiwic3RHb2FsIiwiZmluYWxHb2FsIiwiZmluYWxHb2FsR3JhZGUiLCJzdHJhdGVnaWVzIiwic3RyYXRlZ3lUZXh0IiwiZnV0dXJlX2FiaWxpdGllc192aWV3bW9kZWxfRnV0dXJlQWJpbGl0aWVzVmlld01vZGVsIiwiZm9ybU5hbWVzIiwiY2FwYWJpbGl0aWVzIiwiZm9ybU5hbWUiLCJ5ZWFycyIsImNvbHVtbkhlYWRlcnMiLCJ2dEh0cyIsInJvdyIsImFiaWxpdHlOYW1lIiwiYWRkZWRDYXBhYnMiLCJjZWxscyIsImh0SGFzVmFsdWUiLCJ2dEhhc1ZhbHVlIiwiY2FwYWJpbGl0eU5hbWUiLCJjZWxsIiwiY2FwYWJSb3dzIiwiZnV0dXJlX2FiaWxpdGllc190YWJsZV9GdXR1cmVBYmlsaXRpZXNUYWJsZSIsIkZ1dHVyZUFiaWxpdGllc1RhYmxlIiwidmlld01vZGVsIiwicm93U3BhbiIsInZ0SHQiLCJjb2wiLCJnb2Fsc19LU0dvYWxzIiwiS1NHb2FscyIsImxvYWRpbmdTdHVkeVBsYW5zIiwic2hvd1Rlcm1Hb2FscyIsImdldExlYXJuaW5nR29hbHNBbmRUYXNrcyIsImFwaVBhdGgiLCJwYWdlSWQiLCJsZWFybmluZ190YXNrc19MZWFybmluZ1Rhc2tzIiwiTGVhcm5pbmdUYXNrcyIsIm1vZHVsZU5hbWUiLCJzdWJqZWN0IiwiY29tbW9uVGFza3NMaXN0IiwibGVhcm5pbmdHb2Fsc0xpc3QiLCJsZWFybmluZ19nb2Fsc19saXN0IiwibGVhcm5pbmdNb2R1bGVzIiwibGVhcm5pbmdQYWdlVXJscyIsInR1dG9yc192aWV3X1R1dG9yc1ZpZXdUZXN0IiwiVHV0b3JzVmlld1Rlc3QiLCJ0dXRvcnNfc2VsZWN0IiwidHV0b3JhYmxlX2NvbXBvbmVudCIsInRlcm1wbGFubmVyIiwia2dfdGVybXBsYW5uZXJfdHV0b3JlZCIsIndlZWtwbGFubmVyIiwiY29tcG9uZW50cyIsImxhdGVzdF9hc3Nlc3NtZW50cyIsIm5hdmlnYXRvciIsImxhbmd1YWdlIiwiZ29hbHMiLCJrc190ZXJtcGxhbm5lcl90dXRvcmVkIiwia2dfdGVybXBsYW5uZXJfc2VsZiIsIndlZWtwbGFubmVyX3dlZWtwbGFubmVyIiwiVHV0b3JzVmlldyIsImxlYXJuaW5nX3Rhc2tzIiwibXlfY291cnNlcyIsImxpc3RfY291cnNlcyIsIldlZWtOb3RlcyIsIndlZWtfbm90ZWJvb2siLCJ0ZXN0cGFnZV9UZXN0UGFnZSIsIl9UZXN0UGFnZSIsInNlbGVjdGVkQ29tcCIsInNlbGVjdENvbXBQcm9wcyIsInNlbGVjdGVkQ29tcG9uZW50Iiwic2VsZWN0ZWRMZWFybmluZ01vZHVsZSIsInNlbGVjdGVkTGVhcm5pbmdNb2R1bGVVcmwiLCJzZWxlY3RlZENvbXBvbmVudFJlYWwiLCJzZWxlY3RlZENvbXBQcm9wcyIsInJlbmRlclRlc3RDb21wb25lbnQiLCJsZWFybmluZ01vZHVsZVRhc2tzIiwiY29tcG9uZW50QXJlYSIsIlNlbGVjdGVkQ29tcG9uZW50IiwibG0iLCJjaG9vc2VfdXNlciIsIlRlc3RQYWdlIiwiU2V0dXBMYW5ndWFnZUludGwiXSwibWFwcGluZ3MiOiJ5QkFDQSxTQUFBQSxFQUFBQyxHQVFBLElBUEEsSUFNQUMsRUFBQUMsRUFOQUMsRUFBQUgsRUFBQSxHQUNBSSxFQUFBSixFQUFBLEdBQ0FLLEVBQUFMLEVBQUEsR0FJQU0sRUFBQSxFQUFBQyxFQUFBLEdBQ1FELEVBQUFILEVBQUFLLE9BQW9CRixJQUM1QkosRUFBQUMsRUFBQUcsR0FDQUcsRUFBQVAsSUFDQUssRUFBQUcsS0FBQUQsRUFBQVAsR0FBQSxJQUVBTyxFQUFBUCxHQUFBLEVBRUEsSUFBQUQsS0FB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MkJqdEMsU0FDbEYsU0FBQUMsR0FDRWMsYUFBYXpGLFFBQVEsNEJBQTZCMkUsRUFBR0MsT0FBT3ZaLE9BQzVEYSxPQUFPa0ksU0FBUzZOLFdBR2pCOHRDLEVBQWlCN2hELElBQUksU0FBQytGLEVBQUtwTCxHQUMxQixPQUFBdzFCLEVBQUEsd0JBQVExeUIsSUFBSzlDLEVBQUd3QyxNQUFPNEksR0FBTUEsYUFRdkNvcUIsRUFBQSx5QkFDQUEsRUFBQSxxQkFBS2xzQixVQUFVLGdCQUNia3NCLEVBQUEsY0FBQzR6QixFQUFpQjE5QyxFQUFBLEtBQUt3QixLQUFLME0sTUFBTW92QyxvQkFDbEN4ekIsRUFBQSxxQkFBS2xzQixVQUFVLGdCQUFnQjJzQixJQUFLLFNBQUEzRixHQUFPLE9BQUEvZixFQUFLNDRDLGNBQWdCNzRCLEtBRWhFa0YsRUFBQSxxQkFBS2xzQixVQUFVLGdCQUNxQixrQkFBakM0RCxLQUFLME0sTUFBTWd2QyxtQkFDVnB6QixFQUFBLGNBQUNpeUIsRUFBQSxFQUFXLENBQUN4dUIsY0FBYyw0QkFBNEJ0d0IsSUFBSzBVLEVBQUEsUUFLdENtWSxFQUFBLGNBQUM4ekIsRUFBQSxFQUFVLE9BRTdDYixFQTlHQSxDQUF3Qmp6QixFQUFBLFdBZ0hsQit6QixFQUFXbHBELE9BQUFtcEQsRUFBQSxFQUFBbnBELENBQVVBLE9BQUE4M0IsRUFBQSxFQUFBOTNCLENBQVdtb0QsSUFDdkI5L0MsRUFBQSIsImZpbGUiOiJ0ZXN0cGFnZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdHJldHVybiByZXN1bHQ7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbiBcdC8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHQ2OiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wX25hbWVfXCJdID0gd2luZG93W1wid2VicGFja0pzb25wX25hbWVfXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFsyMTIsMF0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0OyIsIlxuZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdCAoc3RyKSB7XG4gICAgZm9yIChsZXQgaT0wLCBsPXN0ci5sZW5ndGg7IGk8bDsgKytpKSB7XG4gICAgICAgIGlmIChzdHIuY2hhckNvZGVBdChpKSA8IDB4MjAwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5zdWJzdHIoMCwgaSkgKyBzdHJbaV0udG9Mb2NhbGVVcHBlckNhc2UoKSArIHN0ci5zdWJzdHIoaSArIDEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQob2JqLCBleHRlbnNpb24pIHtcbiAgICBpZiAodHlwZW9mIGV4dGVuc2lvbiAhPT0gJ29iamVjdCcpIHJldHVybiBvYmo7XG4gICAgT2JqZWN0LmtleXMoZXh0ZW5zaW9uKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIG9ialtrZXldID0gZXh0ZW5zaW9uW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lPFQsRT4gKG9iaiA6IFQsIGV4dGVuc2lvbj86IEUpIHtcbiAgICBsZXQgY2xvbmUgPSB7fTtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsb25lLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpKTtcbiAgICB9KTtcbiAgICBpZiAoZXh0ZW5zaW9uKSBleHRlbmQoY2xvbmUsIGV4dGVuc2lvbik7XG4gICAgcmV0dXJuIGNsb25lIGFzIChUICYgRSk7XG59XG5cbmNvbnN0IGNvbmNhdCA9IFtdLmNvbmNhdDtcbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuPFQ+IChhIDogKFQgfCBUW10pW10pIHtcbiAgICByZXR1cm4gY29uY2F0LmFwcGx5KFtdLCBhKSBhcyBUW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlUHJvcDxUPihwcm9wOmtleW9mIFQpIHtcbiAgICByZXR1cm4gKGE6IFQsYjogVCkgPT4ge1xuICAgICAgICBjb25zdCBhUHJvcCA9IGFbcHJvcF0sIGJQcm9wID0gYltwcm9wXTtcbiAgICAgICAgcmV0dXJuIGFQcm9wID4gYlByb3AgPyAxIDogYVByb3AgPCBiUHJvcCA/IC0xIDogMDtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlUHJvcHMoXG4gICAgcHJvcHM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIGxvY2FsZXM/OiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBvcHRpb25zPzogSW50bC5Db2xsYXRvck9wdGlvbnMpOiAoYTogYW55LCBiOiBhbnkpID0+IG51bWJlclxue1xuICAgIHByb3BzID0gQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc107XG5cbiAgICBjb25zdCBsb2NhbGVDb21wYXJlID0gKGEsYikgPT5cbiAgICAgICAgdHlwZW9mIGEgPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAgIGEubG9jYWxlQ29tcGFyZShiLCBsb2NhbGVzLCBvcHRpb25zKSA6XG4gICAgICAgICAgICBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogMDtcblxuICAgIGZ1bmN0aW9uIGNtcFBhcnQgKGEsYixmaXJzdFBhcnQ6IHN0cmluZyxyZXN0OiBzdHJpbmdbXSkge1xuICAgICAgICBjb25zdCBmaXJzdEEgPSBhW2ZpcnN0UGFydF07XG4gICAgICAgIGlmIChmaXJzdEEgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgICAgICBjb25zdCBmaXJzdEIgPSBiW2ZpcnN0UGFydF07XG4gICAgICAgIGlmIChmaXJzdEIgPT0gbnVsbCkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiByZXN0Lmxlbmd0aCA9PT0gMCA/XG4gICAgICAgICAgICBsb2NhbGVDb21wYXJlKGZpcnN0QSwgZmlyc3RCKSA6XG4gICAgICAgICAgICBjbXBQYXJ0KGZpcnN0QSwgZmlyc3RCLCByZXN0WzBdLCByZXN0LnNsaWNlKDEpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcHNcbiAgICAgICAgLm1hcChwcm9wID0+IHByb3Auc3BsaXQoJy4nKSlcbiAgICAgICAgLm1hcCgoW2ZpcnN0UGFydCwgLi4ucmVzdF0pID0+IChhLGIpID0+IGNtcFBhcnQoYSxiLCBmaXJzdFBhcnQsIHJlc3QpKVxuICAgICAgICAucmVkdWNlKChjbXAxLCBjbXAyKSA9PlxuICAgICAgICAgICAgKGEsYikgPT4gY21wMShhLGIpIHx8IGNtcDIoYSxiKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMKHRleHQsIC4uLmFyZ3MpIHtcbiAgICBsZXQgZmlyc3QgPSB0ZXh0WzBdO1xuICAgIHJldHVybiBidWlsZE1lc3NhZ2UodGV4dCwgYXJncyk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTWVzc2FnZSAodGV4dCwgYXJncykge1xuICAgIGxldCBydiA9IHRleHRbMF07XG4gICAgZm9yIChsZXQgaT0xLCBsPXRleHQubGVuZ3RoOyBpPGw7ICsraSkge1xuICAgICAgICBydiArPSBhcmdzW2ktMV0gKyB0ZXh0W2ldO1xuICAgIH1cbiAgICByZXR1cm4gcnY7XG59XG5cbmV4cG9ydCBjbGFzcyBUQzxUPiB7XG4gICAgY29uc3RydWN0b3IodGVtcGxhdGU6IFQpIHtcbiAgICAgICAgZXh0ZW5kKHRoaXMsIHRlbXBsYXRlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkYXRlVGltZVJldml2ZXIgKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgYTtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICBhID0gL1xcL0RhdGVcXCgoXFxkKilcXClcXC8vLmV4ZWModmFsdWUpO1xuICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKCthWzFdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbi8vbGV0IGluZm9TZXJpYWwgPSAxO1xuZXhwb3J0IGZ1bmN0aW9uIHNob3dJbmZvIChtc2cpIHtcbiAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2luZm8nLCB7ICdkZXRhaWwnOiBtc2cgfSk7XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvd0Vycm9yIChlcnJNc2c6IHN0cmluZyB8IEVycm9yKSB7XG4gICAgY29uc3QgbXNnID0gdHlwZW9mIGVyck1zZyA9PT0gJ3N0cmluZycgPyBlcnJNc2cgOiBlcnJNc2cubWVzc2FnZTtcbiAgICB2YXIgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoJ2N1c3RvbWVycm9yJywgeyAnZGV0YWlsJzogbXNnIH0pO1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyTXNnKTtcbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXhMZW5ndGgoc3RyOiBzdHJpbmcsIG1heExlbjogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHN0ci5sZW5ndGggPiBtYXhMZW4gP1xuICAgICAgICBzdHIuc3Vic3RyKDAsIG1heExlbiAtIDMpICsgXCIuLi5cIiA6XG4gICAgICAgIHN0cjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9Mb29rdXA8VD4oYTogVFtdLCBrZXlBY2Nlc3NvcjogKGl0ZW06IFQpID0+IHN0cmluZyB8IG51bWJlcikge1xuICAgIGNvbnN0IHJlc3VsdCA6IHtba2V5OiBzdHJpbmddIDogVFtdfSA9IHt9O1xuICAgIGZvciAobGV0IGk9MCwgbD1hLmxlbmd0aDsgaTxsOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGFbaV07XG4gICAgICAgIGNvbnN0IGtleSA9IGtleUFjY2Vzc29yKGl0ZW0pO1xuICAgICAgICBsZXQgYXJyYXkgPSByZXN1bHRba2V5XTtcbiAgICAgICAgaWYgKGFycmF5KSBhcnJheS5wdXNoKGl0ZW0pO1xuICAgICAgICBlbHNlIHJlc3VsdFtrZXldID0gW2l0ZW1dO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlUb01hcDxUPihhOiBUW10sIGtleUFjY2Vzc29yOiAoaXRlbTogVCkgPT4gc3RyaW5nIHwgbnVtYmVyKSB7XG4gICAgY29uc3QgcmVzdWx0IDoge1trZXk6IHN0cmluZ10gOiBUfSA9IHt9O1xuICAgIGZvciAobGV0IGk9MCwgbD1hLmxlbmd0aDsgaTxsOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGFbaV07XG4gICAgICAgIGNvbnN0IGtleSA9IGtleUFjY2Vzc29yKGl0ZW0pO1xuICAgICAgICByZXN1bHRba2V5XSA9IGl0ZW07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVycnlQaWNrUHJvcHM8VD4gKG9iajogVCwgcHJvcHNUb1BpY2s6IHN0cmluZ1tdKTogUGFydGlhbDxUPiB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBwYXJhbSBvZiBwcm9wc1RvUGljaykge1xuICAgICAgaWYgKHBhcmFtIGluIG9iaikgcmVzdWx0W3BhcmFtXSA9IG9ialtwYXJhbV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQgYXMgUGFydGlhbDxUPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0PFQ+IChhOiBUW10sIGtleUFjY2Vzc29yPzogKGl0ZW06IFQpID0+IGFueSkge1xuICAgIGNvbnN0IG1hcCA9IGFycmF5VG9NYXAoYSwga2V5QWNjZXNzb3IgfHwgKHggPT4geCkpO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApLm1hcChrZXkgPT4gbWFwW2tleV0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0VxdWFscyhhOiBhbnksIGI6IGFueSkge1xuICAgIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoIWEgfHwgIWIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAodHlwZW9mIGEgIT09ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICAgIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMoYSk7XG4gICAgY29uc3Qga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpPTAsIGw9a2V5c0EubGVuZ3RoOyBpPGw7ICsraSkge1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlzQVtpXTtcbiAgICAgICAgaWYgKGtleXNCW2ldICE9PSBrZXkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuIiwiaW1wb3J0IHtVc2VyLCBMZWFybmluZ01vZHVsZVRhc2tzfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBCZWFyZXJQcm92aWRlciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7VXNlclRhc2t9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7S2VkUmVwb30gZnJvbSAnLi4vcmVwb3Mva2VkLXJlcG8nO1xuaW1wb3J0IHtFZHNDbGllbnR9IGZyb20gJy4uL2FwaXMvZWRzY2xpZW50JztcbmltcG9ydCBLRUQgZnJvbSAnLi9rZWQnO1xuaW1wb3J0IHsgS1NUZXJtUGxhbm5lclJlcG8gfSBmcm9tICcuLi9yZXBvcy9rcy10ZXJtcGxhbm5lci1yZXBvJztcblxuZXhwb3J0IGludGVyZmFjZSBFbnYge1xuICAgIGN1cnJlbnRVc2VyPzogVXNlcjtcbiAgICBsZWFybmluZ01vZHVsZVRhc2tzPzogTGVhcm5pbmdNb2R1bGVUYXNrcztcbiAgICBiZWFyZXJQcm92aWRlcj86IEJlYXJlclByb3ZpZGVyO1xuICAgIGdvb2dsZVRva2VuUHJvdmlkZXI/OiBCZWFyZXJQcm92aWRlcjtcbiAgICBrZWRCYWNrZW5kQ2xpZW50PzogS2VkQmFja2VuZENsaWVudDtcbiAgICBlZHNDbGllbnQ/OiBFZHNDbGllbnQ7XG4gICAgdXNlclRhc2tzUmVwbz87XG4gICAgaGlkZGVuQ291cnNlc1JlcG8/O1xuICAgIHdlZWtOb3Rlc1JlcG8/O1xuICAgIGtnVGVybVBsYW5uZXJSZXBvPztcbiAgICBrc1Rlcm1QbGFubmVyUmVwbz86IEtTVGVybVBsYW5uZXJSZXBvXG4gICAgdHV0b3JlZDogYm9vbGVhbjtcbiAgICBlcnJvcj86IEVycm9yO1xufVxuXG5pZiAoIUtFRC5lbnYpIEtFRC5lbnYgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgS0VELmVudiBhcyBFbnY7XG5leHBvcnQgY29uc3QgZW52OiBFbnYgPSBLRUQuZW52O1xuIiwiZXhwb3J0ICogZnJvbSAnLi9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudCc7IiwiaW1wb3J0IEtFRCBmcm9tICcuL0tFRCc7XG5cbi8qIFRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uIGlzIHVzZWQgYXMgYSBmYWxsYmFjay5cbk5vcm1hbGx5IGJvdGggdGVzdCBwYWdlcyBhbmQgcHJvZHVjdGlvbiBwYWdlcyB3aWxsIG92ZXJyaWRlIHRoZXNlIGNvbmZpZ3JhdGlvbnNcbiovXG4vKmNvbnN0IGRlZmF1bHRDb25maWd1cmF0aW9uID0ge1xuICAvLyBFbnZpcm9ubWVudFxuICBFTlZJUk9OTUVOVDogJ2RldmVsb3BtZW50JyBhcyAncHJvZHVjdGlvbicgfCAnZGV2ZWxvcG1lbnQnIHwgJ3Rlc3QnLFxuICAvLyBBdXRoZW50aWNhdGlvbiBTZXJ2ZXI6XG4gIEtFRF9UT0tFTl9VUkw6ICdodHRwczovL2tlZGF1dGh0ZXN0LmF6dXJld2Vic2l0ZXMubmV0L3Rva2VuJyxcbiAgS0VEX1RPS0VOX1BBVEg6ICcvYXBpL3Rva2VuLlNrcmlwdC5wb3J0bGV0P3N2LmNvbnRlbnR0eXBlPWFwcGxpY2F0aW9uL2pzb24nLFxuICBLRURfQ0xJRU5UX0lEOiAnZGV2Y2xpZW50JyxcbiAgS0VEX0NMSUVOVF9TRUNSRVQ6ICc0ZlJkZlFwV3RKcWpUV2YnLFxuICAvLyBTZXJ2aWNlczpcbiAgS0VEX0FQSV9VUkw6ICdodHRwczovL2tlZGJhY2tlbmR0ZXN0LmF6dXJld2Vic2l0ZXMubmV0L2FwaS8nLCAgXG4gIEVEU19BUElfVVJMOiAnaHR0cHM6Ly9lZHNwb3J0YWxvd2luYXBpLmF6dXJld2Vic2l0ZXMubmV0L2FwaS8nXG59Ki9cblxuZXhwb3J0IGludGVyZmFjZSBJS2VkQ29uZmlndXJhdGlvbiB7XG4gIEVOVklST05NRU5UOiAncHJvZHVjdGlvbicgfCAnZGV2ZWxvcG1lbnQnIHwgJ3Rlc3QnO1xuICBLRURfUkVBTE06IHN0cmluZztcbiAgS0VEX1RPS0VOX1VSTDogc3RyaW5nO1xuICBLRURfVE9LRU5fUEFUSDogc3RyaW5nO1xuICBLRURfQ0xJRU5UX0lEOiBzdHJpbmc7XG4gIEtFRF9DTElFTlRfU0VDUkVUOiBzdHJpbmc7XG4gIEtFRF9BUElfVVJMOiBzdHJpbmc7XG4gIEVEU19BUElfVVJMOiBzdHJpbmc7XG4gIEtFRF9MT0NBTEU6IHN0cmluZztcbiAgS0VEX1NDSE9PTF9MT0NBTEU6IHN0cmluZztcbiAgS0VEX0NPVVJTRV9CVUlMREVSX1VSTDogc3RyaW5nO1xuICBLRURfQ09VUlNFX1ZJRVdFUl9VUkw6IHN0cmluZztcbiAgS0VEX1NVQkpFQ1RfUExBTk5FUl9BRE1JTl9VUkw6IHN0cmluZztcbiAgS0VEX1NVQkpFQ1RfUExBTk5FUl9VUkw6IHN0cmluZztcbn07XG5cbmlmICghS0VELmNmZykgS0VELmNmZyA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBLRUQuY2ZnIGFzIElLZWRDb25maWd1cmF0aW9uO1xuZXhwb3J0IGNvbnN0IGNmZzogSUtlZENvbmZpZ3VyYXRpb24gPSBLRUQuY2ZnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7IiwiZXhwb3J0IGRlZmF1bHQgKGNvbW1hbmQsIHZhbHVlID0gbnVsbCkgPT4ge1xuICBkb2N1bWVudC5leGVjQ29tbWFuZChjb21tYW5kLCBmYWxzZSwgdmFsdWUpXG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBTcGlubmVyID0gKCk9PiA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYSBmYS1zcGlubmVyIGZhLXNwaW5cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+Jm5ic3A7PC9zcGFuPjtcbiIsImltcG9ydCB7IEFjY2Vzc0NsYWltLCBEb2N1bWVudEFjY2VzcywgaGFzQWNjZXNzIGFzIF9oYXNBY2Nlc3MsIEFjY2Vzc1JpZ2h0IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgZ2V0VXNlckNsYWltcyBmcm9tICcuL2dldC11c2VyLWNsYWltcyc7XG5pbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nLCBnZW5lcmF0ZVF1ZXJ5U3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL3F1ZXJ5LXN0cmluZ1wiO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmV4cG9ydCB7IGdldFVzZXJDbGFpbXMgfTtcblxuZXhwb3J0IGNvbnN0IElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TID0gW1widXNlclwiLFwicm9sZVwiLFwic2Nob29sXCIsXCJkZWJ1Z1wiLFwidGVzdFZlcnNpb25cIixcInRlc3R2ZXJzaW9uXCIsXCJzY2hvb2xUeXBlXCIsXCJzY2hvb2x0eXBlXCJdO1xuXG5leHBvcnQgZnVuY3Rpb24gaGFzQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQsIHJlcXVlc3RlZFJpZ2h0OiBBY2Nlc3NSaWdodCkge1xuICB2YXIgY2xhaW1zID0gZ2V0VXNlckNsYWltcyh1c2VyKTtcbiAgaWYgKHJlcXVlc3RlZFJpZ2h0ICE9PSAnUicgJiYgdXNlci50dXRvckZvcikge1xuICAgIGNsYWltcyA9IGNsYWltcy5maWx0ZXIoY2xhaW0gPT4gY2xhaW0udHlwZSAhPT0gJ2VtYWlsJyk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IF9oYXNBY2Nlc3MoRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZ0FycmF5KGRvYy5hY2wgfHwgW10pLCBjbGFpbXMsIHJlcXVlc3RlZFJpZ2h0KTtcbiAgLy9jb25zb2xlLmxvZyhgSGFzICR7cmVxdWVzdGVkUmlnaHR9IGFjY2VzcyB0byAke2RvYy5uYW1lfS8ke2RvYy5pZH06ICR7cmVzdWx0fWApO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzUmVhZEFjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50KSB7XG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnUicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzV3JpdGVBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xuICByZXR1cm4gaGFzQWNjZXNzKHVzZXIsIGRvYywgJ1cnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1NoYXJlQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQpIHtcbiAgcmV0dXJuIGhhc0FjY2Vzcyh1c2VyLCBkb2MsICdTJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RlYWNoZXJBdFNjaG9vbCh1c2VyOiBVc2VyLCBzY2hvb2w6IHN0cmluZykge1xuICBjb25zdCBpc1RlYWNoZXIgPSB1c2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSAnRU1QTE9ZRUUnIHx8IHJvbGUgPT09ICdBRE1JTicpO1xuICBjb25zdCBiZWxvbmdzVG9TY2hvb2wgPSAoc2Nob29sfHxcIlwiKS50b0xvd2VyQ2FzZSgpID09PSB1c2VyLnNjaG9vbC50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKGlzVGVhY2hlciAmJiBiZWxvbmdzVG9TY2hvb2wpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBZG1pbk9yVGVhY2hlckF0U2Nob29sKHVzZXI6IFVzZXIsIHNjaG9vbDogc3RyaW5nKSB7XG4gIHJldHVybiB1c2VyLnJvbGVzLmluY2x1ZGVzKFwiQURNSU5cIikgfHwgaXNUZWFjaGVyQXRTY2hvb2wodXNlciwgc2Nob29sKTtcbn1cblxuZXhwb3J0IGNvbnN0IGltcGVyc29uYXRpb25FbnYgPSB7XG4gIGFjdEFzIChvcHRpb25zOiB7cm9sZSwgc2Nob29sLCB1cmw/fSkge1xuICAgIGNvbnN0IHtyb2xlLCBzY2hvb2wsIHVybH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGN1cnJlbnRRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoKTtcbiAgICBjb25zdCBuZXdRdWVyeSA9IHsuLi5jdXJyZW50UXVlcnksIHJvbGUsIHNjaG9vbH07XG4gICAgY29uc3QgbmV3UXVlcnlTdHJpbmcgPSBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKG5ld1F1ZXJ5KTtcbiAgICBpZiAodXJsKSB7XG4gICAgICBsb2NhdGlvbi5ocmVmID0gYCR7dXJsfSR7bmV3UXVlcnlTdHJpbmd9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9IFwiI1wiO1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gbmV3UXVlcnlTdHJpbmc7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY3RBcyhvcHRpb25zOiB7cm9sZSwgc2Nob29sLCB1cmw/fSkge1xuICBpbXBlcnNvbmF0aW9uRW52LmFjdEFzKG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkgKHVybDogc3RyaW5nLCBxdWVyeToge1tuYW1lOiBzdHJpbmddIDogc3RyaW5nfSkge1xuICBjb25zdCBjdXJyZW50UXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCk7XG4gIGNvbnN0IHByZXNlcnZlZFF1ZXJ5ID0ge307XG4gIGZvciAoY29uc3QgcGFyYW0gb2YgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMpIHtcbiAgICBpZiAoY3VycmVudFF1ZXJ5W3BhcmFtXSkgcHJlc2VydmVkUXVlcnlbcGFyYW1dID0gY3VycmVudFF1ZXJ5W3BhcmFtXTtcbiAgfVxuICBjb25zdCBuZXdRdWVyeVN0cmluZyA9IGdlbmVyYXRlUXVlcnlTdHJpbmcoey4uLnByZXNlcnZlZFF1ZXJ5LCAuLi5xdWVyeX0pO1xuICBjb25zdCBwSGFzaCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBwSGFzaCA+PSAwID9cbiAgICBgJHt1cmwuc3Vic3RyKDAscEhhc2gpfSR7bmV3UXVlcnlTdHJpbmd9JHt1cmwuc3Vic3RyKHBIYXNoKX1gIDpcbiAgICBgJHt1cmx9JHtuZXdRdWVyeVN0cmluZ31gO1xufVxuIiwiaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9jb250cmFjdHMva2VkLW1vZGVsc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVc2VyQ2xhaW1zICh1c2VyOiBVc2VyKSB7XG4gIHJldHVybiBbe1xuICAgIHR5cGU6IFwiZW1haWxcIixcbiAgICB2YWx1ZTogdXNlci5tYWlsXG4gIH0se1xuICAgIHR5cGU6IFwic2Nob29sXCIsXG4gICAgdmFsdWU6IHVzZXIuc2Nob29sXG4gIH1dLmNvbmNhdCh1c2VyLnJvbGVzLm1hcChyb2xlID0+ICh7XG4gICAgdHlwZTogXCJyb2xlXCIsXG4gICAgdmFsdWU6IHJvbGVcbiAgfSkpKS5jb25jYXQodXNlci5yb2xlcy5tYXAocm9sZSA9PiAoe1xuICAgIHR5cGU6IFwic2Nob29sUm9sZVwiLFxuICAgIHZhbHVlOiB1c2VyLnNjaG9vbCArIFwiL1wiICsgcm9sZVxuICB9KSkpO1xufVxuIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVUlEKCkge1xuICAgIC8vIERlY2VudCBzb2x1dGlvbiBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxuICAgIHZhciBkID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgdXVpZCA9ICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgICAgIHJldHVybiAoYyA9PT0gJ3gnID8gciA6IChyICYgMHg3IHwgMHg4KSkudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIHJldHVybiB1dWlkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGF2b2lkU2ltdWx0YW5vdXNDYWxscyhtZXRob2QpIHtcbiAgICB2YXIgb25nb2luZ1Byb21pc2UgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghb25nb2luZ1Byb21pc2UpIHtcbiAgICAgICAgICAgIG9uZ29pbmdQcm9taXNlID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgb25nb2luZ1Byb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb25nb2luZ1Byb21pc2U7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxJZChyZWFsbSkge1xuICAgIHZhciBwcmVmaXggPSAnZWM5NmIzYmUtNDVmYy00MWQzLWI2OWUtJztcbiAgICB2YXIgcGFkID0gWyc1MCcsICcwOCcsICdlMScsICc0MCcsICdlNCcsICdlNyddO1xuICAgIGlmIChyZWFsbS5sZW5ndGggPiA2KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb28gbG9uZyByZWFsbVwiKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlYWxtLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBoZXggPSByZWFsbS5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcGFkW2ldID0gaGV4Lmxlbmd0aCA9PT0gMiA/XG4gICAgICAgICAgICBoZXggOlxuICAgICAgICAgICAgJzAnICsgaGV4O1xuICAgIH1cbiAgICByZXR1cm4gcHJlZml4ICsgcGFkLmpvaW4oJycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVQcmVkZXN0aW5hdGVkSWQoaW5wdXQpIHtcbiAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVuY29kZXIsIGRhdGEsIGRpZ2VzdCwgX2EsIGk7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gZW5jb2Rlci5lbmNvZGUoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBfYSA9IFVpbnQ4QXJyYXkuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBkYXRhKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBkaWdlc3QgPSBuZXcgKF9hLmFwcGx5KFVpbnQ4QXJyYXksIFt2b2lkIDAsIF9iLnNlbnQoKV0pKSgpO1xuICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmliYmxlID0gZGlnZXN0W2krK10gJSAxNiB8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdhc2hlZE5pYmJsZSA9IGMgPT09ICd4JyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pYmJsZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pYmJsZSAmIDB4NyB8IDB4ODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2FzaGVkTmliYmxlLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKmV4cG9ydCBmdW5jdGlvbiBidWYyaGV4KGJ1ZmZlcjogQXJyYXlCdWZmZXIpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChcbiAgICBuZXcgVWludDhBcnJheShidWZmZXIpLFxuICAgICh4OiBudW1iZXIpID0+ICgnMDAnICsgeC50b1N0cmluZygxNikpLnNsaWNlKC0yKSkuam9pbignJyk7XG59Ki9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVBcnJheShhLCBtYXBwZXIpIHtcbiAgICB2YXIgcmV0dmFsID0gYTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIHZhciB0ID0gYVtpXTtcbiAgICAgICAgdmFyIG1hcHBlZCA9IG1hcHBlcih0KTtcbiAgICAgICAgaWYgKG1hcHBlZCAhPT0gdCkge1xuICAgICAgICAgICAgaWYgKHJldHZhbCA9PT0gYSlcbiAgICAgICAgICAgICAgICByZXR2YWwgPSBhLnNsaWNlKCk7XG4gICAgICAgICAgICByZXR2YWxbaV0gPSBtYXBwZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldHZhbDtcbn1cbi8qXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQXJyYXk8VD4oYTogVFtdLCBtYXBwZXI6ICh0OiBUKSA9PiBUIHwgZmFsc2UpOiBUW10ge1xuICBsZXQgcmV0dmFsID0gYTtcbiAgbGV0IGogPSAwO1xuICBmb3IgKGxldCBpPTAsbD1hLmxlbmd0aDsgaTxsOyArK2ksICsraikge1xuICAgIGNvbnN0IHQgPSBhW2ldO1xuICAgIGNvbnN0IG1hcHBlZCA9IG1hcHBlcih0KTtcbiAgICBpZiAobWFwcGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gTWFwcGVyIHdhbnRzIHRvIGRlbGV0ZSB0aGlzIGRvYy5cbiAgICAgIGlmIChyZXR2YWwgPT09IGEpIHJldHZhbCA9IGEuc2xpY2UoKTtcbiAgICAgIHJldHZhbC5zcGxpY2UoaiwgMSk7XG4gICAgICAtLWo7IC8vIGNvbXBlbnNhdGUgZm9yICsralxuICAgIH0gZWxzZSBpZiAobWFwcGVkICE9PSB0KSB7XG4gICAgICBpZiAocmV0dmFsID09PSBhKSByZXR2YWwgPSBhLnNsaWNlKCk7XG4gICAgICByZXR2YWxbal0gPSBtYXBwZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXR2YWw7XG59XG4qLyBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImV4cG9ydCBpbnRlcmZhY2UgUGFyc2VRdWVyeVN0cmluZ09wdGlvbnMge1xuICB0b0xvd2VyPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb25TZWFyY2g6IHN0cmluZywgb3B0aW9ucz86IFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gIGNvbnN0IHt0b0xvd2VyfSA9IChvcHRpb25zIHx8wqB7fSkgYXMgUGFyc2VRdWVyeVN0cmluZ09wdGlvbnM7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBpZiAobG9jYXRpb25TZWFyY2ggJiYgbG9jYXRpb25TZWFyY2gubGVuZ3RoID4gMSlcbiAgICBsb2NhdGlvblNlYXJjaC5zdWJzdHIoMSlcbiAgICAgIC5zcGxpdCgnJicpXG4gICAgICAubWFwKHBhcnQgPT4gcGFydC5zcGxpdCgnPScpLm1hcChzID0+IGRlY29kZVVSSUNvbXBvbmVudChzLnRyaW0oKSkpKVxuICAgICAgLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4gcmVzdWx0W3RvTG93ZXIgPyBrZXkudG9Mb3dlckNhc2UoKSA6IGtleV0gPSB2YWx1ZSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZVBhcmFtcyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHBhcmFtcykuZmlsdGVyKGtleSA9PiBwYXJhbXNba2V5XSAhPT0gdW5kZWZpbmVkKS5tYXAoa2V5ID0+IGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSl9YCkuam9pbignJicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVRdWVyeVN0cmluZyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcbiAgcmV0dXJuIFwiP1wiICsgZW5jb2RlUGFyYW1zKHBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUhhc2hRdWVyeVN0cmluZyhsb2NhdGlvbkhhc2g6IHN0cmluZywgb3B0aW9ucz86IFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zKSB7XG4gIHJldHVybiBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uSGFzaCwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUhhc2hRdWVyeVN0cmluZyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcbiAgcmV0dXJuIFwiI1wiICsgZW5jb2RlUGFyYW1zKHBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFVybEFuZFF1ZXJ5ICh1cmxXaXRoUG9zc2libGVRdWVyeTogc3RyaW5nKSB7XG4gIGNvbnN0IHBRdWVyeSA9IHVybFdpdGhQb3NzaWJsZVF1ZXJ5LmluZGV4T2YoJz8nKTtcbiAgcmV0dXJuIHBRdWVyeSA+PSAwID9cbiAgICBbdXJsV2l0aFBvc3NpYmxlUXVlcnkuc3Vic3RyKDAsIHBRdWVyeSksIHVybFdpdGhQb3NzaWJsZVF1ZXJ5LnN1YnN0cihwUXVlcnkpXSA6XG4gICAgW3VybFdpdGhQb3NzaWJsZVF1ZXJ5LCBcIlwiXTtcbn1cbiIsIi8qXG5kZWNsYXJlIHZhciBCdWZmZXI7IC8vIG5vZGUgYnVpbHQtaW5cblxuXG5mdW5jdGlvbiBiYXNpY0F1dGhIZWFkZXIodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgcmV0dXJuIFwiQmFzaWMgXCIgKyBuZXcgQnVmZmVyKHVzZXJuYW1lICsgXCI6XCIgKyBwYXNzd29yZCkudG9TdHJpbmcoXCJiYXNlNjRcIik7XG59XG4qL1xuaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tIFwiLi91dGlsc1wiO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gJy4uL29ic2VydmFibGUvZW1pdHRlcic7XG52YXIgUmVzdENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSZXN0Q2xpZW50KGlzb21vcnBoaWMsIGJhc2VVcmwsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5pc29tb3JwaGljID0gaXNvbW9ycGhpYztcbiAgICAgICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnMgPSAwO1xuICAgICAgICB0aGlzLl9zdGF0dXMgPSBuZXcgRW1pdHRlcih0aGlzKTtcbiAgICAgICAgdGhpcy5mZXRjaE9wdGlvbnMgPSB7IG1vZGU6ICdjb3JzJyB9O1xuICAgICAgICB0aGlzLmF1dGhIZWFkZXIgPSBvcHRpb25zLmJlYXJlciA/XG4gICAgICAgICAgICBcIkJlYXJlciBcIiArIG9wdGlvbnMuYmVhcmVyIDpcbiAgICAgICAgICAgIG9wdGlvbnMudXNlcm5hbWUgP1xuICAgICAgICAgICAgICAgIFwiQmFzaWMgXCIgKyBpc29tb3JwaGljLmJ0b2Eob3B0aW9ucy51c2VybmFtZSArIFwiOlwiICsgKG9wdGlvbnMucGFzc3dvcmQgfHwgXCJcIikpIDpcbiAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICB0aGlzLmJlYXJlclByb3ZpZGVyID0gb3B0aW9ucy5iZWFyZXJQcm92aWRlciB8fCBudWxsO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVzdENsaWVudC5wcm90b3R5cGUsIFwic3RhdHVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHVzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uIChwYXRoLCBtZXRob2QsIGhlYWRlcnMsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgKyt0aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucztcbiAgICAgICAgdGhpcy5fc3RhdHVzLmRpc3BhdGNoKHRoaXMpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZmV0Y2gocGF0aCwgbWV0aG9kLCBoZWFkZXJzLCBxdWVyeSwgZmV0Y2hPcHRpb25zKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgLS1fdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnM7XG4gICAgICAgICAgICBfdGhpcy5fc3RhdHVzLmRpc3BhdGNoKF90aGlzKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIC0tX3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xuICAgICAgICAgICAgX3RoaXMuX3N0YXR1cy5kaXNwYXRjaChfdGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5fZmV0Y2ggPSBmdW5jdGlvbiAocGF0aCwgbWV0aG9kLCBoZWFkZXJzLCBxdWVyeSwgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5U3RyLCBfYSwgYXV0aEhlYWRlciwgdG9rZW5JbmZvLCBiZWFyZXJQcm92aWRlciwgX2IsIF9jLCB1cmwsIHJlcywgd3d3YXV0aCwgX2Q7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9lLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZXRjaE9wdGlvbnMgJiYgZmV0Y2hPcHRpb25zLmNhY2hlID09PSAnbm8tY2FjaGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgYmFjay1idXR0b24gbm90IHJlc3BlY3RpbmcgY2FjaGUgY29udHJvbCBpbiBDaHJvbWUvT3BlcmEuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIGEgcXVlcnkgcGFyYW1ldGVyIHRvIGZvcmNlIGEgY2FjaGUgZW50cnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSA9IHRzbGliXzEuX19hc3NpZ24oe30sIHF1ZXJ5LCB7IG5vY2FjaGU6IGNyZWF0ZVVVSUQoKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5U3RyID0gcXVlcnkgJiYgT2JqZWN0LmtleXMocXVlcnkpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBxdWVyeVtrZXldICE9PSB1bmRlZmluZWQ7IH0pLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI9XCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQocXVlcnlba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKCcmJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMsIGF1dGhIZWFkZXIgPSBfYS5hdXRoSGVhZGVyLCB0b2tlbkluZm8gPSBfYS50b2tlbkluZm8sIGJlYXJlclByb3ZpZGVyID0gX2EuYmVhcmVyUHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISghYXV0aEhlYWRlciAmJiAhdG9rZW5JbmZvICYmIGJlYXJlclByb3ZpZGVyKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBiZWFyZXJQcm92aWRlci5nZXRCZWFyZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRva2VuSW5mbyA9IHRva2VuSW5mbyA9IF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0b2tlbkluZm8pIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodG9rZW5JbmZvLmV4cGlyZXMgPCBEYXRlLm5vdygpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRva2VuIGV4cGlyZWQuIFJlZnJlc2ggaXQ6XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYmVhcmVyUHJvdmlkZXIucmVmcmVzaEJlYXJlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2MudG9rZW5JbmZvID0gdG9rZW5JbmZvID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSA0O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRoSGVhZGVyID0gXCJCZWFyZXIgXCIgKyB0b2tlbkluZm8udG9rZW47XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDU7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIG9uZSB3YXkgb3IgYW5vdGhlciwgd2UndmUgY29uY2x1ZGVkIGFuIEF1dGhvcml6YXRpb24gaGVhZGVyIHRvIHVzZTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdXRoSGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gYXV0aEhlYWRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuYmFzZVVybCArIHBhdGggKyAocXVlcnlTdHIgPyBcIj9cIiArIHF1ZXJ5U3RyIDogXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmlzb21vcnBoaWMuZmV0Y2godXJsLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLmZldGNoT3B0aW9ucywgeyBoZWFkZXJzOiBoZWFkZXJzLCBtZXRob2Q6IG1ldGhvZCB9LCBmZXRjaE9wdGlvbnMpKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgPT0gNDAxICYmIHRoaXMuYmVhcmVyUHJvdmlkZXIpKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHd3d2F1dGggPSByZXMuaGVhZGVycy5nZXQoXCJ3d3ctYXV0aGVudGljYXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJHb3QgXCIgKyByZXMuc3RhdHVzICsgXCIgZnJvbSBcIiArICh0aGlzLmJhc2VVcmwgKyBwYXRoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh3d3dhdXRoICYmIC9CZWFyZXIvaS50ZXN0KHd3d2F1dGgpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XG4gICAgICAgICAgICAgICAgICAgICAgICBfZCA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmJlYXJlclByb3ZpZGVyLnJlZnJlc2hCZWFyZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kLnRva2VuSW5mbyA9IF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IFwiQmVhcmVyIFwiICsgdGhpcy50b2tlbkluZm8udG9rZW47XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmlzb21vcnBoaWMuZmV0Y2godXJsLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLmZldGNoT3B0aW9ucywgeyBoZWFkZXJzOiBoZWFkZXJzLCBtZXRob2Q6IG1ldGhvZCB9LCBmZXRjaE9wdGlvbnMpKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gOTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OiByZXR1cm4gWzIgLypyZXR1cm4qLywgcmVzXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocGF0aCwgcXVlcnksIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChwYXRoLCBcIkdFVFwiLCB7IEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uOyB0ZXh0L3BsYWluXCIgfSwgcXVlcnksIGZldGNoT3B0aW9ucyk7XG4gICAgfTtcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24gKHBhdGgsIGRhdGEsIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChwYXRoLCBcIlBPU1RcIiwge1xuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICBcIkFjY2VwdFwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgICB9LCBudWxsLCB0c2xpYl8xLl9fYXNzaWduKHt9LCBmZXRjaE9wdGlvbnMsIHsgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSkgfSkpO1xuICAgIH07XG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHBhdGgsIHF1ZXJ5LCBib2R5LCBmZXRjaE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2gocGF0aCwgXCJERUxFVEVcIiwgeyBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvbjsgdGV4dC9wbGFpblwiIH0sIHF1ZXJ5LCB0c2xpYl8xLl9fYXNzaWduKHt9LCBmZXRjaE9wdGlvbnMsIHsgYm9keTogYm9keSB9KSk7XG4gICAgfTtcbiAgICByZXR1cm4gUmVzdENsaWVudDtcbn0oKSk7XG5leHBvcnQgeyBSZXN0Q2xpZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXN0Y2xpZW50LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBSZXN0Q2xpZW50IH0gZnJvbSAnLi9yZXN0Y2xpZW50JztcbmltcG9ydCB7IGF2b2lkU2ltdWx0YW5vdXNDYWxscyB9IGZyb20gJy4vdXRpbHMnO1xudmFyIEtlZEJlYXJlclByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEtlZEJlYXJlclByb3ZpZGVyKGlzb21vcnBoaWMsIHN0b3JhZ2UsIHRva2VuSWQsIGNsaWVudElkLCBjbGllbnRTZWNyZXQsIHRva2VuVXJsLCB0b2tlblF1ZXJ5KSB7XG4gICAgICAgIHRoaXMuaXNvbW9ycGhpYyA9IGlzb21vcnBoaWM7XG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XG4gICAgICAgIHRoaXMudG9rZW5JZCA9IHRva2VuSWQ7XG4gICAgICAgIHRoaXMuY2xpZW50SWQgPSBjbGllbnRJZDtcbiAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBjbGllbnRTZWNyZXQ7XG4gICAgICAgIHRoaXMudG9rZW5VcmwgPSB0b2tlblVybDtcbiAgICAgICAgdGhpcy50b2tlblF1ZXJ5ID0gdG9rZW5RdWVyeTtcbiAgICAgICAgdGhpcy50b2tlbkluZm8gPSB7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH07XG4gICAgICAgIHRoaXMuY2xpZW50ID0gbmV3IFJlc3RDbGllbnQoaXNvbW9ycGhpYywgXCJcIiwge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHRoaXMuY2xpZW50SWQsXG4gICAgICAgICAgICBwYXNzd29yZDogdGhpcy5jbGllbnRTZWNyZXRcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZ2V0QmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMuZ2V0QmVhcmVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnJlZnJlc2hCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5yZWZyZXNoQmVhcmVyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBLZWRCZWFyZXJQcm92aWRlci5wcm90b3R5cGUuZ2V0QmVhcmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgdG9rZW4sIGV4cGlyZXMsIF9iLCBlXzE7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcy50b2tlbkluZm8sIHRva2VuID0gX2EudG9rZW4sIGV4cGlyZXMgPSBfYS5leHBpcmVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuICYmIGV4cGlyZXMgPj0gRGF0ZS5ub3coKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50cnlzLnB1c2goWzEsIDQsICwgNl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdG9yYWdlLmxvYWQodGhpcy5jbGllbnRJZCArIFwiL1wiICsgdGhpcy50b2tlbklkKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRva2VuSW5mbyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRva2VuSW5mby50b2tlbiAmJiB0aGlzLnRva2VuSW5mby5leHBpcmVzID49IERhdGUubm93KCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaEJlYXJlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgZV8xID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZWZyZXNoQmVhcmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCZWFyZXJQcm92aWRlci5wcm90b3R5cGUucmVmcmVzaEJlYXJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzLCByZXRyaWVzLCBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHJpZXMgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXRyaWVzIDwgNikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZXRyaWV2aW5nIHRva2VuIGZvciBcIiArIHRoaXMudG9rZW5JZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmNsaWVudC5nZXQodGhpcy50b2tlblVybCwgdGhpcy50b2tlblF1ZXJ5LCB7IGNhY2hlOiAncmVsb2FkJyB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJHb3QgXCIgKyByZXMuc3RhdHVzICsgXCIgXCIgKyByZXMuc3RhdHVzVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRva2VuSW5mbyA9IChfYi50b2tlbiA9IF9jLnNlbnQoKSwgX2IuZXhwaXJlcyA9IERhdGUubm93KCkgKyA1OSAqIDYwICogMTAwMCwgX2IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJHb3QgdG9rZW4gZm9yIFwiICsgdGhpcy50b2tlbklkICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy50b2tlbkluZm8pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zYXZlKHRoaXMuY2xpZW50SWQgKyBcIi9cIiArIHRoaXMudG9rZW5JZCwgdGhpcy50b2tlbkluZm8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgKytyZXRyaWVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHJldHJpZXZlIHRva2VuIGZvciBcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMudG9rZW5JZCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBLZWRCZWFyZXJQcm92aWRlcjtcbn0oKSk7XG5leHBvcnQgeyBLZWRCZWFyZXJQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkLWJlYXJlci1wcm92aWRlci5qcy5tYXAiLCJ2YXIgRG9jdW1lbnRBY2Nlc3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnRBY2Nlc3MoYWNjZXNzQ2xhaW1UeXBlLCBhY2Nlc3NDbGFpbVZhbHVlLCByaWdodCkge1xuICAgICAgICB0aGlzLmFjY2Vzc0NsYWltVHlwZSA9IGFjY2Vzc0NsYWltVHlwZTtcbiAgICAgICAgdGhpcy5hY2Nlc3NDbGFpbVZhbHVlID0gYWNjZXNzQ2xhaW1WYWx1ZTtcbiAgICAgICAgdGhpcy5yaWdodCA9IHJpZ2h0O1xuICAgIH1cbiAgICBEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKGFjKSB7XG4gICAgICAgIGlmICghYWMpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgdmFyIHNwbGl0ID0gYWMuc3BsaXQoJzonKTtcbiAgICAgICAgaWYgKHNwbGl0Lmxlbmd0aCA8IDMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFjY2VzcyBzdHJpbmc6IFwiICsgYWMpO1xuICAgICAgICB2YXIgY2xhaW1UeXBlID0gRG9jdW1lbnRBY2Nlc3MudW5lc2NhcGUoc3BsaXRbMF0pO1xuICAgICAgICB2YXIgY2xhaW1WYWx1ZSA9IERvY3VtZW50QWNjZXNzLnVuZXNjYXBlKHNwbGl0WzFdKTtcbiAgICAgICAgdmFyIHJpZ2h0ID0gc3BsaXRbMl07XG4gICAgICAgIGlmIChyaWdodCAhPT0gJ1InICYmIHJpZ2h0ICE9PSAnVycgJiYgcmlnaHQgIT09ICdTJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYWNjZXNzIHN0cmluZzogXCIgKyBhYyk7XG4gICAgICAgIHJldHVybiBuZXcgRG9jdW1lbnRBY2Nlc3MoY2xhaW1UeXBlLCBjbGFpbVZhbHVlLCByaWdodCk7XG4gICAgfTtcbiAgICBEb2N1bWVudEFjY2Vzcy5lc2NhcGUgPSBmdW5jdGlvbiAoYWNjZXNzQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBhY2Nlc3NDb21wb25lbnQucmVwbGFjZSgvXFwlL2csIFwiJTI1XCIpLnJlcGxhY2UoL1xcOi9nLCBcIiUzQVwiKTtcbiAgICB9O1xuICAgIERvY3VtZW50QWNjZXNzLnVuZXNjYXBlID0gZnVuY3Rpb24gKGFjY2Vzc0NvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gYWNjZXNzQ29tcG9uZW50LnJlcGxhY2UoL1xcJTNBL2csIFwiOlwiKS5yZXBsYWNlKC9cXCUyNS9nLCBcIiVcIik7XG4gICAgfTtcbiAgICBEb2N1bWVudEFjY2Vzcy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBEb2N1bWVudEFjY2Vzcy5lc2NhcGUodGhpcy5hY2Nlc3NDbGFpbVR5cGUpICsgXCI6XCIgK1xuICAgICAgICAgICAgRG9jdW1lbnRBY2Nlc3MuZXNjYXBlKHRoaXMuYWNjZXNzQ2xhaW1WYWx1ZSkgKyBcIjpcIiArXG4gICAgICAgICAgICB0aGlzLnJpZ2h0O1xuICAgIH07XG4gICAgRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZ0FycmF5ID0gZnVuY3Rpb24gKGFjbCkge1xuICAgICAgICByZXR1cm4gYWNsXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChhYykgeyByZXR1cm4gRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZyhhYyk7IH0pXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhYykgeyByZXR1cm4gYWM7IH0pO1xuICAgIH07XG4gICAgRG9jdW1lbnRBY2Nlc3MudG9TdHJpbmdBcnJheSA9IGZ1bmN0aW9uIChhY2wpIHtcbiAgICAgICAgcmV0dXJuIGFjbC5tYXAoZnVuY3Rpb24gKGFjKSB7IHJldHVybiBhYy50b1N0cmluZygpOyB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEb2N1bWVudEFjY2Vzcztcbn0oKSk7XG5leHBvcnQgeyBEb2N1bWVudEFjY2VzcyB9O1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0FjY2VzcyhhY2wsIHVzZXJDbGFpbXMsIHJlcXVlc3RlZFJpZ2h0KSB7XG4gICAgaWYgKHVzZXJDbGFpbXMuc29tZShmdW5jdGlvbiAoY2xhaW0pIHsgcmV0dXJuIGNsYWltLnR5cGUgPT09ICdyb2xlJyAmJiBjbGFpbS52YWx1ZSA9PT0gXCJBRE1JTlwiOyB9KSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGFjbC5zb21lKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiB1c2VyQ2xhaW1zLnNvbWUoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBhLmFjY2Vzc0NsYWltVHlwZSA9PT0gYy50eXBlICYmXG4gICAgICAgICAgICAgICAgYS5hY2Nlc3NDbGFpbVZhbHVlID09PSBjLnZhbHVlICYmICgoYS5yaWdodCA9PT0gJ1InICYmIHJlcXVlc3RlZFJpZ2h0ID09PSAnUicpIHx8XG4gICAgICAgICAgICAgICAgKGEucmlnaHQgPT09ICdXJyAmJiBbJ1InLCAnVyddLmluZGV4T2YocmVxdWVzdGVkUmlnaHQpID49IDApIHx8XG4gICAgICAgICAgICAgICAgKGEucmlnaHQgPT09ICdTJykpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjY2Vzcy1jb250cm9sLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG52YXIgSHR0cEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEh0dHBFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBIdHRwRXJyb3IoY29kZSwgbWVzc2FnZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBcIkhUVFBcIiArIGNvZGUgKyBcIiBcIiArIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgX3RoaXMubmFtZSA9IFwiaHR0cFwiICsgY29kZTtcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IFwiSFRUUFwiICsgY29kZSArIFwiIFwiICsgbWVzc2FnZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSHR0cEVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0IHsgSHR0cEVycm9yIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwLWVycm9yLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBSZXN0Q2xpZW50IH0gZnJvbSAnLi9yZXN0Y2xpZW50JztcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMnO1xuZXhwb3J0IHsgS2VkQmVhcmVyUHJvdmlkZXIgfSBmcm9tICcuL2tlZC1iZWFyZXItcHJvdmlkZXInO1xuZXhwb3J0ICogZnJvbSAnLi9hY2Nlc3MtY29udHJvbCc7XG5leHBvcnQgeyBSZXN0Q2xpZW50IH07XG5pbXBvcnQgeyBIdHRwRXJyb3IgfSBmcm9tICcuL2h0dHAtZXJyb3InO1xuZXhwb3J0IHsgSHR0cEVycm9yIH07XG5leHBvcnQgKiBmcm9tICcuL3Jlc3RjbGllbnQnO1xuO1xudmFyIEtlZEJhY2tlbmRDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENsaWVudChpc29tb3JwaGljLCBiZWFyZXJQcm92aWRlciwgYmFzZVVybCkge1xuICAgICAgICB0aGlzLmh0dHAgPSBuZXcgUmVzdENsaWVudChpc29tb3JwaGljLCBiYXNlVXJsLCB7IGJlYXJlclByb3ZpZGVyOiBiZWFyZXJQcm92aWRlciB9KTtcbiAgICB9XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZ2V0TXlDbGFpbXMgPSBmdW5jdGlvbiAodGFibGUsIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZ2V0KFwibWUvY2xhaW1zL1wiICsgKHRhYmxlIHx8IFwiXCIpLCBudWxsLCBmZXRjaE9wdGlvbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIG9wdGlvbnMsIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZ2V0KHRhYmxlICsgXCIvXCIgKyBpZCwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5saXN0ID0gZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zLCBmZXRjaE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcXVlcnksIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSA9IHRzbGliXzEuX19hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5tdXRhdGlvbnNPbkVtcHR5KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5Lm11dGF0aW9uc09uRW1wdHkgPSBKU09OLnN0cmluZ2lmeShvcHRpb25zLm11dGF0aW9uc09uRW1wdHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmdldChcIlwiICsgdGFibGUsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmJhdGNoID0gZnVuY3Rpb24gKHJlcXMsIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVvcmRlciBvcGVyYXRpb25zIHNvIHRoYXQgJ2FkZCdzIGNvbWUgZmlyc3QgYW5kICdkZWxldGUncyBjb21lIGxhc3Q6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXFzID0gcmVxcy5zbGljZSgpLnNvcnQoZnVuY3Rpb24gKHJlcTEsIHJlcTIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxMS5vcCA9PT0gJ2FkZCcgPyAtMSA6IHJlcTIub3AgPT09ICdhZGQnID8gMSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcTEub3AgPT09ICdkZWxldGUnID8gMSA6IHJlcTIub3AgPT09ICdkZWxldGUnID8gLTEgOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAucG9zdChcImJhdGNoXCIsIHJlcXMsIGZldGNoT3B0aW9ucyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZG8gPSBmdW5jdGlvbiAoc2NvcGVGbikge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBydW5uZXI7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5lciA9IG5ldyBCYXRjaFJ1bm5lcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVGbihydW5uZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5iYXRjaChydW5uZXIubXV0YXRpb25SZXF1ZXN0cyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmRlbGV0ZVJlYWxtID0gZnVuY3Rpb24gKHJlYWxtKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5kZWxldGUoXCJyZWFsbXMvXCIgKyByZWFsbSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRhYmxlLCBkb2MsIGJyYW5jaElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmFkZCh0YWJsZSwgZG9jKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAodGFibGUsIGRvYykge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5wdXQodGFibGUsIGRvYyk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgZGVsdGFEb2MsIGJyYW5jaElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnVwZGF0ZSh0YWJsZSwgaWQsIGRlbHRhRG9jLCBicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLm1lcmdlKGJyYW5jaElkLCB0YXJnZXRCcmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuY2xlYXJCcmFuY2ggPSBmdW5jdGlvbiAoYnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuY2xlYXJCcmFuY2goYnJhbmNoSWQpOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGVsZXRlKHRhYmxlLCBpZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuc2hhcmUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBhY2wpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuc2hhcmUodGFibGUsIGlkLCBhY2wpOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVuc2hhcmUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBhY2wpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5zaGFyZSh0YWJsZSwgaWQsIGFjbCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIubGluayhzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIGxhYmVsLCBicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5saW5rMihzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5saW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5saW5rMiA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldElkLCBsYWJlbCwgYnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5saW5rMihzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVuZG9MaW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIGxhYmVsLCBicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmRvTGluayhzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpOyB9KTtcbiAgICB9O1xuICAgIHJldHVybiBLZWRCYWNrZW5kQ2xpZW50O1xufSgpKTtcbmV4cG9ydCB7IEtlZEJhY2tlbmRDbGllbnQgfTtcbnZhciBCYXRjaFJ1bm5lciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXRjaFJ1bm5lcigpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzID0gW107XG4gICAgfVxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGFibGUsIGRvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2FkZCcsIHRhYmxlOiB0YWJsZSwgZG9jOiBkb2MsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKHRhYmxlLCBkb2MpIHtcbiAgICAgICAgZG9jID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZG9jKTtcbiAgICAgICAgZGVsZXRlIGRvYy5hY2w7IC8vIEZvcmJpZGRlbiB0byBzZW5kIGFjbCB3aXRoIHB1dCgpIGNhbGxzLlxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAncHV0JywgdGFibGU6IHRhYmxlLCBkb2M6IGRvYyB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgZGVsdGFEb2MsIGJyYW5jaElkKSB7XG4gICAgICAgIGRlbHRhRG9jID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZGVsdGFEb2MpO1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndXBkYXRlJywgdGFibGU6IHRhYmxlLCBpZDogaWQsIGRlbHRhRG9jOiBkZWx0YURvYywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKGJyYW5jaElkLCB0YXJnZXRCcmFuY2hJZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnbWVyZ2UnLCBicmFuY2hJZDogYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkOiB0YXJnZXRCcmFuY2hJZCB9KTtcbiAgICB9O1xuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5jbGVhckJyYW5jaCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnY2xlYXItYnJhbmNoJywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2RlbGV0ZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnc2hhcmUnLCB0YWJsZTogdGFibGUsIGlkOiBpZCwgYWNsOiBhY2wgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVuc2hhcmUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBhY2wpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3Vuc2hhcmUnLCB0YWJsZTogdGFibGUsIGlkOiBpZCwgYWNsOiBhY2wgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmxpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdsaW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldFRhYmxlOiB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnbGluaycsIHNvdXJjZVRhYmxlOiBzb3VyY2VUYWJsZSwgc291cmNlSWQ6IHNvdXJjZUlkLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCwgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3VubGluaycsIHNvdXJjZVRhYmxlOiBzb3VyY2VUYWJsZSwgc291cmNlSWQ6IHNvdXJjZUlkLCB0YXJnZXRUYWJsZTogdGFyZ2V0VGFibGUsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51bmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5saW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVuZG9MaW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5kby1saW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmF0Y2hSdW5uZXI7XG59KCkpO1xuZXhwb3J0IHsgQmF0Y2hSdW5uZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBjb25zdCBMYW5ndWFnZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KHtpbnRsOiBudWxsfSk7IiwidmFyIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UoKSB7XG4gICAgfVxuICAgIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZS5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIChpZCwgdG9rZW5JbmZvKSB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJiZWFyZXItXCIgKyBpZCwgSlNPTi5zdHJpbmdpZnkodG9rZW5JbmZvKSk7XG4gICAgfTtcbiAgICBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBqc29uID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImJlYXJlci1cIiArIGlkKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoanNvbiA/IEpTT04ucGFyc2UoanNvbikgOiB7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlO1xufSgpKTtcbmV4cG9ydCB7IEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmVhcmVyLXN0b3JhZ2Utc2Vzc2lvbnN0b3JhZ2UuanMubWFwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWlncmF0ZVRhc2sodGFzaykge1xuICAgIGlmICghdGFzay5yZXNvdXJjZXMpXG4gICAgICAgIHRhc2sucmVzb3VyY2VzID0gW107XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLXRhc2suanMubWFwIiwiaW1wb3J0IG1pZ3JhdGVDb3Vyc2UgZnJvbSAnLi9taWdyYXRlLWNvdXJzZSc7XG5pbXBvcnQgbWlncmF0ZVRhc2sgZnJvbSAnLi9taWdyYXRlLXRhc2snO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWlncmF0ZShkb2MsIHRhYmxlLCBncmFwaHMpIHtcbiAgICBzd2l0Y2ggKHRhYmxlKSB7XG4gICAgICAgIGNhc2UgXCJjb3Vyc2VzXCI6XG4gICAgICAgICAgICBtaWdyYXRlQ291cnNlKGRvYywgZ3JhcGhzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidGFza3NcIjpcbiAgICAgICAgICAgIG1pZ3JhdGVUYXNrKGRvYyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLmpzLm1hcCIsImltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlQ291cnNlKGNvdXJzZSwgZ3JhcGhzKSB7XG4gICAgaWYgKCFjb3Vyc2UubW9kdWxlcylcbiAgICAgICAgY291cnNlLm1vZHVsZXMgPSBbXTtcbiAgICBjb3Vyc2UubW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgICAgICAgaWYgKCFtb2R1bGUucmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBtb2R1bGUucmVzb3VyY2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb2R1bGUudGFza0lkcykge1xuICAgICAgICAgICAgbW9kdWxlLnRhc2tJZHMgPSBbXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMpIHtcbiAgICAgICAgY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMgPSBbXTtcbiAgICB9XG4gICAgLy8gRWFybGllciB3cm9uZyBzcGVsbGluZyBvZiByZXNvdXJjZXNcbiAgICBpZiAoJ3Jlc291cnNlcycgaW4gY291cnNlICYmICEoJ3Jlc291cmNlcycgaW4gY291cnNlKSkge1xuICAgICAgICBjb3Vyc2UucmVzb3VyY2VzID0gY291cnNlLnJlc291cnNlcztcbiAgICAgICAgZGVsZXRlIGNvdXJzZS5yZXNvdXJzZXM7XG4gICAgfVxuICAgIGlmICghY291cnNlLnJlc291cmNlcykge1xuICAgICAgICBjb3Vyc2UucmVzb3VyY2VzID0gW107XG4gICAgfVxuICAgIGlmIChncmFwaHMpIHtcbiAgICAgICAgZ3JhcGhzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndGFza3MnOlxuICAgICAgICAgICAgICAgICAgICBjb3Vyc2UudGFza3MuZm9yRWFjaChmdW5jdGlvbiAodGFzaykgeyByZXR1cm4gbWlncmF0ZVRhc2sodGFzayk7IH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlncmF0ZS1jb3Vyc2UuanMubWFwIiwiaW1wb3J0IG1pZ3JhdGUgZnJvbSAnLi9taWdyYXRlJztcbmV4cG9ydCB2YXIgS2VkTW9kZWxNaWdyYXRvck1peGluID0gZnVuY3Rpb24gKGNsaWVudCkge1xuICAgIGlmIChjbGllbnQuX19taWdyYXRvcl9taXhlZF9pbilcbiAgICAgICAgcmV0dXJuO1xuICAgIGNsaWVudC5fX21pZ3JhdG9yX21peGVkX2luID0gdHJ1ZTtcbiAgICB2YXIgZ2V0ID0gY2xpZW50LmdldDtcbiAgICB2YXIgbGlzdCA9IGNsaWVudC5saXN0O1xuICAgIGNsaWVudC5nZXQgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBpbmNsdWRlID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGU7XG4gICAgICAgIHJldHVybiBnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIG1pZ3JhdGUocmVzdWx0LCB0YWJsZSwgaW5jbHVkZSAmJiBpbmNsdWRlLnRvU3RyaW5nKCkuc3BsaXQoJywnKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNsaWVudC5saXN0ID0gZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBpbmNsdWRlID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGU7XG4gICAgICAgIHJldHVybiBsaXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAoZG9jKSB7IHJldHVybiBtaWdyYXRlKGRvYywgdGFibGUsIGluY2x1ZGUgJiYgaW5jbHVkZS50b1N0cmluZygpLnNwbGl0KCcsJykpOyB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIGNsaWVudDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJ2YXIgcmVkaXJIYXNoID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInJlZGlyLWhhc2hcIik7XG5pZiAocmVkaXJIYXNoKVxuICAgIHRyeSB7XG4gICAgICAgIHZhciBfYSA9IEpTT04ucGFyc2UocmVkaXJIYXNoKSwgdGltZSA9IF9hLnRpbWUsIGhhc2ggPSBfYS5oYXNoO1xuICAgICAgICBpZiAodGltZSAmJiB0aW1lID4gRGF0ZS5ub3coKSAtIDYwMDAwKSB7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFwicmVkaXItaGFzaFwiKTtcbiAgICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChfKSB7IH1cbmV4cG9ydCBmdW5jdGlvbiByZW1lbWJlckhhc2hMb2NhdGlvbigpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicmVkaXItaGFzaFwiLCBKU09OLnN0cmluZ2lmeSh7IHRpbWU6IERhdGUubm93KCksIGhhc2g6IGxvY2F0aW9uLmhhc2ggfSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaC1yZXN0b3Jlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCwgSHR0cEVycm9yIH0gZnJvbSAnLi4va2VkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSB9IGZyb20gXCIuL2JlYXJlci1zdG9yYWdlLXNlc3Npb25zdG9yYWdlXCI7XG5pbXBvcnQgeyBhdm9pZFNpbXVsdGFub3VzQ2FsbHMgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMnO1xuaW1wb3J0IHsgS2VkTW9kZWxNaWdyYXRvck1peGluIH0gZnJvbSAnLi4va2VkLW1vZGVsLW1pZ3JhdG9yJztcbmltcG9ydCAnLi9oYXNoLXJlc3RvcmVyJztcbmltcG9ydCB7IHJlbWVtYmVySGFzaExvY2F0aW9uIH0gZnJvbSAnLi9oYXNoLXJlc3RvcmVyJztcbktlZE1vZGVsTWlncmF0b3JNaXhpbihLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZSk7XG5leHBvcnQgdmFyIHN0b3JhZ2UgPSBuZXcgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlKCk7XG52YXIgdGltZU9mUGFnZUxvYWQgPSBEYXRlLm5vdygpO1xudmFyIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKHRva2VuUGF0aCwgdG9rZW5SZXNwb25zZU1hcHBlciwgdG9rZW5JZCkge1xuICAgICAgICB0aGlzLnRva2VuUGF0aCA9IHRva2VuUGF0aDtcbiAgICAgICAgdGhpcy50b2tlblJlc3BvbnNlTWFwcGVyID0gdG9rZW5SZXNwb25zZU1hcHBlcjtcbiAgICAgICAgdGhpcy50b2tlbklkID0gdG9rZW5JZDtcbiAgICAgICAgdGhpcy50b2tlbkluZm8gPSB7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH07XG4gICAgICAgIHRoaXMuZ2V0QmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMuZ2V0QmVhcmVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnJlZnJlc2hCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5yZWZyZXNoQmVhcmVyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlci5wcm90b3R5cGUuZ2V0QmVhcmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy50b2tlbkluZm8udG9rZW4pIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRva2VuSWQpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RvcmFnZS5sb2FkKHRoaXMudG9rZW5JZCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50b2tlbkluZm8gPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMudG9rZW5JbmZvLmV4cGlyZXMgPCBEYXRlLm5vdygpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hCZWFyZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5yZWZyZXNoQmVhcmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9lKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHRoaXMudG9rZW5QYXRoLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeyBBY2NlcHQ6IFwidGV4dC9wbGFpbjsgYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q6ICdtYW51YWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDMwMiB8fCAoIXJlcy5zdGF0dXMgJiYgcmVzLnR5cGUgPT09IFwib3BhcXVlcmVkaXJlY3RcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIHNlc3Npb24gdGltZWQgb3V0IGFuZCBzZXJ2ZXIgd2FudHMgdG8gcmVkaXJlY3QgZW50aXJlIHBhZ2UgdG8gbG9naW4gcGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRpbWUgdG8gcmVsb2FkIGN1cnJlbnQgcGFnZSB0byBmb3JjZSBhIHJlZGlyZWN0IG9mIHRoZSBlbnRpcmUgcGFnZSBpbnN0ZWFkIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGp1c3QgcmVkaXJlY3RpbmcgdG8gL2FwaS90b2tlbiBvciB3aGF0ZXZlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRpbWVPZlBhZ2VMb2FkID4gNjAwMDApIHsgLy8gcHJvaGliaXQgZW5kbGVzcyBsb29wIG9mIHJlbG9hZGluZyBzZWxmLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndhbnRzUmVkaXJlY3QgPSB0cnVlOyAvLyBTbyB0aGF0IGxpc3RlbmVycyB0byBvbmJlZm9yZXVubG9hZCBjb3VsZCBzaG93IGFsdGVybmF0ZSBtZXNzYWdlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlZGlyZWN0IHdhbnRlZC4gUmVsb2FkIHBhZ2UuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1lbWJlckhhc2hMb2NhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKDMwMiwgXCJSZWRpcmVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEVycm9yLmJpbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFwiSFRUUFwiICsgcmVzLnN0YXR1cyArIFwiIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShFcnJvciwgW3ZvaWQgMCwgX2IgKyAoX2Uuc2VudCgpKV0pKSgpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZCA9IHRoaXMudG9rZW5SZXNwb25zZU1hcHBlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50b2tlbkluZm8gPSBfZC5hcHBseSh0aGlzLCBbX2Uuc2VudCgpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNhdmUodGhpcy50b2tlbklkLCB0aGlzLnRva2VuSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcjtcbn0oKSk7XG5leHBvcnQgeyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciB9O1xuZXhwb3J0IHZhciBpc29tb3JwaGljID0geyBmZXRjaDogZmV0Y2guYmluZChzZWxmKSwgYnRvYTogYnRvYS5iaW5kKHNlbGYpIH07XG52YXIgS2VkQmFja2VuZENsaWVudFdlYiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhLZWRCYWNrZW5kQ2xpZW50V2ViLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRDbGllbnRXZWIoYXBpQmFzZVVybCwgcHJvdmlkZXJPclRva2VuUGF0aCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYmVhcmVyUHJvdmlkZXIgPSB0eXBlb2YgcHJvdmlkZXJPclRva2VuUGF0aCAhPT0gJ3N0cmluZycgP1xuICAgICAgICAgICAgcHJvdmlkZXJPclRva2VuUGF0aCA6XG4gICAgICAgICAgICBuZXcgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIocHJvdmlkZXJPclRva2VuUGF0aCwgKG9wdGlvbnMgJiYgb3B0aW9ucy50b2tlblJlc3BvbnNlTWFwcGVyKSB8fCAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh7IHRva2VuOiB4LCBleHBpcmVzOiBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDYwIH0pOyB9KSwgb3B0aW9ucyAmJiBvcHRpb25zLnRva2VuSWQpO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBhcGlCYXNlVXJsKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBLZWRCYWNrZW5kQ2xpZW50V2ViO1xufShLZWRCYWNrZW5kQ2xpZW50KSk7XG5leHBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50V2ViIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgKiBmcm9tICcuL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYic7IiwiLyogUkVGQUNUT1I6IE1vdmUgdGhpcyBjb21wb25lbnQgb3V0c2lkZSBjb3Vyc2VidWlsZGVyIVxuICAgVGhpcyBpcyBhIGdlbmVyYWwtcHVycG9zZSBjb21wb25lbnRcbiovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdGl0bGU6IHN0cmluZyB8IEpTWC5FbGVtZW50O1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGhlYWRlckNsYXNzTmFtZT86IHN0cmluZztcbiAgY29udGVudENsYXNzTmFtZT86IHN0cmluZztcbiAgaGVhZGVyT3Blbj86IGJvb2xlYW47XG4gIG9uT3BlbkNsb3NlPzogKGJlY2FtZU9wZW46IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGNoaWxkcmVuO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBoZWFkZXJPcGVuOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgT3BlbkNsb3NlQm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaGVhZGVyT3BlbjogcHJvcHMuaGVhZGVyT3BlbiB8fCBmYWxzZVxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHM6IFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5oZWFkZXJPcGVuICE9PSB0aGlzLnByb3BzLmhlYWRlck9wZW4pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2hlYWRlck9wZW46IG5leHRQcm9wcy5oZWFkZXJPcGVufSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGl0bGUsIGNsYXNzTmFtZSwgY2hpbGRyZW4sIGhlYWRlckNsYXNzTmFtZSwgY29udGVudENsYXNzTmFtZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGhlYWRlck9wZW4gfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9eyhjbGFzc05hbWV8fCcnKSArIFwiIG9wZW5DbG9zZVwiICsgKGhlYWRlck9wZW4gPyBcIiBvcGVuXCIgOiBcIlwiKX0+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17XCJvcGVuSGVhZGVyXCIgKyAoaGVhZGVyQ2xhc3NOYW1lID8gXCIgXCIgKyBoZWFkZXJDbGFzc05hbWUgOiBcIlwiKX1cbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLnByb3BzLm9uT3BlbkNsb3NlKSB0aGlzLnByb3BzLm9uT3BlbkNsb3NlKCF0aGlzLnN0YXRlLmhlYWRlck9wZW4pO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBoZWFkZXJPcGVuOiAhdGhpcy5zdGF0ZS5oZWFkZXJPcGVuIH0pO1xuICAgICAgICB9fSA+XG4gICAgICAgIHt0aXRsZX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkNvbnRlbnRcIiArIChjb250ZW50Q2xhc3NOYW1lID8gXCIgXCIgKyBjb250ZW50Q2xhc3NOYW1lIDogXCJcIil9PlxuICAgICAgICB7Y2hpbGRyZW59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj47XG4gIH1cbn1cbiIsIlxuZXhwb3J0IGNvbnN0IEtFRF9OQU1FU1BBQ0UgPSBcIktFRFwiO1xuXG5kZWNsYXJlIHZhciBLRUQ6IGFueTtcblxudmFyIHJlc3VsdCA9IHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnID8ge30gOiBLRUQ7XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJykge1xuICAgIHdpbmRvd1tLRURfTkFNRVNQQUNFXSA9IHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgVGVybSwgQWNhZGVtaWNZZWFyIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNjaG9vbE1vbWVudCB7XG4gIGFjYWRlbWljWWVhcjogQWNhZGVtaWNZZWFyO1xuICB0ZXJtOiBUZXJtO1xuICB3ZWVrPzogbnVtYmVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSh0ZXJtOiBUZXJtKSB7XG4gIHJldHVybiB0ZXJtID09PSAnQVQnID9cbiAgICBbMzIsIDUxXSA6XG4gICAgWzEsIDI1XTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRlcm1TdGFydEFuZEVuZChub3c6IG1vbWVudC5Nb21lbnQpIDogbW9tZW50Lk1vbWVudFtdIHtcbiAgICByZXR1cm4gbm93Lm1vbnRoKCkgPj0gNiA/IC8vIDYgPSBKdWx5IGluIEpTIERhdGVzIGFuZCBpbiBtb21lbnQgYXMgd2VsbCFcbiAgICBbbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDcsIDEpKSwgbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDExLCAzMSkpXSA6IC8vIGF1ZzEgLSBkZWMzMVxuICAgIFttb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgMCwgMSkpLCBtb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgNiwgMzEpKV07IC8vIGphbjEgLSBqdWx5MzFcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaG9vbE1vbWVudChtOiBtb21lbnQuTW9tZW50KTogU2Nob29sTW9tZW50IHtcbiAgY29uc3QgdGhpc1llYXIgPSBtLnllYXIoKTtcbiAgY29uc3QgaXNBdXR1bW4gPSBtLm1vbnRoKCkgPj0gNjsgLy8gZGV0ZXJtaW5lIFxuICBjb25zdCBbYXV0dW1uWWVhciwgc3ByaW5nWWVhcl0gPSBpc0F1dHVtbiA/XG4gICAgW3RoaXNZZWFyLCB0aGlzWWVhciArIDFdIDpcbiAgICBbdGhpc1llYXIgLSAxLCB0aGlzWWVhcl07XG4gIGNvbnN0IGFjYWRlbWljWWVhciA9ICcnICsgYXV0dW1uWWVhciArICcvJyArIHNwcmluZ1llYXI7XG4gIGNvbnN0IHRlcm0gPSBpc0F1dHVtbiA/ICdBVCcgOiAnU1QnO1xuICBjb25zdCB3ZWVrID0gbS53ZWVrKCk7XG4gIHJldHVybiB7IGFjYWRlbWljWWVhciwgdGVybSwgd2VlayB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyLCBudW1ZZWFyc1RvQWRkOiBudW1iZXIpOiBBY2FkZW1pY1llYXIge1xuICByZXR1cm4gYVllYXIuc3BsaXQoJy8nKVxuICAgIC5tYXAoeWVhclN0ciA9PiBwYXJzZUludCh5ZWFyU3RyKSArIG51bVllYXJzVG9BZGQpXG4gICAgLm1hcCh5ZWFyID0+ICcnICsgeWVhcilcbiAgICAuam9pbignLycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dEFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldkFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIC0xKTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm1GaWVsZCB9IGZyb20gJy4vZm9ybS1maWVsZCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGxhYmVsOiBhbnk7XG4gIGlkOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICBhdXRvRm9jdXM/OiBib29sZWFuO1xuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBUZXh0SW5wdXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZvcm1GaWVsZCBsYWJlbD17dGhpcy5wcm9wcy5sYWJlbH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBhdXRvRm9jdXM9e3RoaXMucHJvcHMuYXV0b0ZvY3VzfSBpZD17dGhpcy5wcm9wcy5pZH0gc2l6ZT17MzV9IHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5wcm9wcy5vbkNoYW5nZShldi50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlcn0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgIDwvRm9ybUZpZWxkPlxuICAgICk7XG4gIH1cbn1cblxuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgbG9jYWxNb21lbnQgfSBmcm9tICcuLi8uLi9nbG9iYWxzL21vbWVudC1zdi1sb2NhbGUnO1xuXG50eXBlIE1vbWVudCA9IG1vbWVudC5Nb21lbnQ7XG5cbmV4cG9ydCBjbGFzcyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIHtcbiAgc3RhdGljIEVYUElSQVRJT05fSE9VUlMgPSAxMjtcbiAgc3RhdGljIFZFUlNJT04gPSAyO1xuXG4gIHVzZXI6IHN0cmluZztcbiAgbGFzdFdyaXRlOiBudW1iZXI7XG4gIHdlZWtEYXRlOiBudW1iZXI7XG4gIG9wZW5Db3Vyc2VzOiB7IFtwYXRoOiBzdHJpbmddOiBib29sZWFuIH1cblxuICBjb25zdHJ1Y3RvciAodXNlck9yQ29weTogc3RyaW5nIHwgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSkge1xuICAgIGlmICh0eXBlb2YgdXNlck9yQ29weSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMudXNlciA9IHVzZXJPckNvcHk7XG4gICAgICB0aGlzLmxhc3RXcml0ZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLndlZWtEYXRlID0gbG9jYWxNb21lbnQoKS5zdGFydE9mKCd3ZWVrJykudmFsdWVPZigpO1xuICAgICAgdGhpcy5vcGVuQ291cnNlcyA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHVzZXJPckNvcHkpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBhc3luYyBsb2FkKHVzZXI6IHN0cmluZykge1xuICAgIGNvbnN0IGNvb2tpZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlMicpO1xuICAgIGNvbnN0IHN0b3JlZERhdGEgPSBjb29raWUgJiYgKEpTT04ucGFyc2UoY29va2llKSBhcyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlKTtcbiAgICBjb25zdCBzdGF0ZSA9IG5ldyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlKHVzZXIpO1xuICAgIGlmIChzdG9yZWREYXRhKSBPYmplY3QuYXNzaWduKHN0YXRlLCBzdG9yZWREYXRhKTtcblxuICAgIHJldHVybiBzdGF0ZS51c2VyID09PSB1c2VyICYmICFzdGF0ZS5pc0V4cGlyZWQobW9tZW50KCkpID9cbiAgICAgIHN0YXRlIDogbmV3IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUodXNlcik7XG4gIH1cblxuICBhc3luYyBzYXZlKCkge1xuICAgIHRoaXMubGFzdFdyaXRlID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ1dlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUyJywganNvbik7XG4gIH1cblxuICBpc0V4cGlyZWQgKGFzT2Y6IE1vbWVudCkge1xuICAgICAgcmV0dXJuIG1vbWVudCh0aGlzLmxhc3RXcml0ZSlcbiAgICAgICAgLmlzQmVmb3JlKFxuICAgICAgICAgICAgYXNPZi5hZGQoXG4gICAgICAgICAgICAgICAgMC1XZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlLkVYUElSQVRJT05fSE9VUlMsICdob3VycycpXG4gICAgICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7S2VkUmVwb30gZnJvbSAnLi9rZWQtcmVwbyc7XG5pbXBvcnQgeyBVc2VyVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIH0gZnJvbSBcIi4uL2NvbXBvbmVudHMvd2Vla3BsYW5uZXIvd2Vla3BsYW5uZXItcGVyc2lzdGVkLXN0YXRlXCI7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBjcmVhdGVVVUlELCBEb2N1bWVudEFjY2VzcywgS2VkQmFja2VuZENsaWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IGdldEFkanVzdGVkV2VlaywgS0VEV2VlayB9IGZyb20gJy4uL3V0aWxzL3dlZWt1dGlsJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5cbmV4cG9ydCBsZXQgdXNlclRhc2tzUmVwbyA9IGVudi51c2VyVGFza3NSZXBvIGFzIFVzZXJUYXNrc1JlcG87XG5cbmV4cG9ydCBjbGFzcyBVc2VyVGFza3NSZXBvIGV4dGVuZHMgS2VkUmVwbzxVc2VyVGFzaz4ge1xuICBwZXJzaXN0ZWRTdGF0ZTogV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSB8IG51bGw7XG4gIGdldEN1cnJlbnRVc2VyOiAoKT0+VXNlcjtcblxuICBjb25zdHJ1Y3RvcihnZXRDbGllbnQ6ICgpPT5LZWRCYWNrZW5kQ2xpZW50LCBnZXRDdXJyZW50VXNlcjogKCk9PlVzZXIpIHsgICAgXG4gICAgc3VwZXIoe1xuICAgICAgZ2V0Q2xpZW50LFxuICAgICAgb3B0aW1pc3RpYzogdHJ1ZSxcbiAgICAgIHRhYmxlOiBcInVzZXJ0YXNrc1wiLFxuICAgICAgdXNlcjogZ2V0Q3VycmVudFVzZXIoKSA/IGdldEN1cnJlbnRVc2VyKCkubWFpbCA6IFwiXCIsXG4gICAgICBnZXRRdWVyeU9wdGlvbnM6IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgY3VycmVudFVzZXIgPSBnZXRDdXJyZW50VXNlcigpO1xuICAgICAgICBjb25zdCB1c2VyRW1haWwgPSBjdXJyZW50VXNlciA/IGN1cnJlbnRVc2VyLm1haWwgOiBcIlwiO1xuICAgICAgICBpZiAoIXRoaXMucGVyc2lzdGVkU3RhdGUpXG4gICAgICAgICAgdGhpcy5wZXJzaXN0ZWRTdGF0ZSA9IGF3YWl0IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUubG9hZCh1c2VyRW1haWwpO1xuICAgICAgICBjb25zdCB7IHdlZWtEYXRlIH0gPSB0aGlzLnBlcnNpc3RlZFN0YXRlO1xuICAgICAgICBjb25zdCB3ZWVrTnVtYmVyID0gbW9tZW50KHdlZWtEYXRlKS53ZWVrKCk7XG4gICAgICAgIGNvbnN0IGtlZFdlZWsgPSBLRURXZWVrKG1vbWVudCh3ZWVrRGF0ZSkueWVhcigpLCB3ZWVrTnVtYmVyKTtcbiAgICAgICAgLypjb25zdCBbZnJvbSwgdG9dID0gW21vbWVudCh3ZWVrRGF0ZSkuc3RhcnRPZignd2VlaycpLCBtb21lbnQod2Vla0RhdGUpLmVuZE9mKCd3ZWVrJyldXG4gICAgICAgICAgLm1hcChtID0+IG0udG9EYXRlKCkuZ2V0VGltZSgpKTsqL1xuICAgICAgICBcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnJvbToga2VkV2Vlay5ub3RCZWZvcmUsXG4gICAgICAgICAgICB0bzoga2VkV2Vlay5ub3RBZnRlcixcbiAgICAgICAgICAgIHJvbGU6IFwiVVNFUlwiLFxuICAgICAgICAgICAgaW5jbHVkZTogW1widGFza1wiLCBcImNvdXJzZVwiXSxcbiAgICAgICAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXSxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5wZXJzaXN0ZWRTdGF0ZSA9IG51bGw7XG4gICAgdGhpcy5nZXRDdXJyZW50VXNlciA9IGdldEN1cnJlbnRVc2VyO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlUGVyc2lzdGVkU3RhdGUoc3RhdGVDaGFuZ2VzOiBQYXJ0aWFsPFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGU+KSB7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLnBlcnNpc3RlZFN0YXRlLCBzdGF0ZUNoYW5nZXMpO1xuICAgIGF3YWl0IHRoaXMucGVyc2lzdGVkU3RhdGUuc2F2ZSgpO1xuICAgIHRoaXMubWVtLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gIH1cblxuICBhc3luYyBzZXRUYXNrRG9uZVN0YXRlKHVzZXJUYXNrOiBVc2VyVGFzaywgZG9uZTogYm9vbGVhbikge1xuICAgIGNvbnN0IHtnZXRDbGllbnQsIG9wdGltaXN0aWMsIHRhYmxlfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcbiAgICBjb25zdCBtb2RpZmllZEl0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCB1c2VyVGFzaywge2RvbmV9KTtcbiAgICBpZiAob3B0aW1pc3RpYykgYXdhaXQgdGhpcy5tZW0udXBkYXRlKE9iamVjdC5hc3NpZ24oe30sIG1vZGlmaWVkSXRlbSwgeyRtZXRhOiAndXBkYXRpbmcnfSkpO1xuICAgIC8vIE5vdyBtYWtlIHN1cmUgdG8gY2hhbmdlIHRoZSBzdGF0ZSBmb3Igb3RoZXIgd2Vla3MgYXMgd2VsbDpcbiAgICBjb25zdCBzaW1pbGFyVGFza3MgPSBhd2FpdCBjbGllbnQubGlzdDxVc2VyVGFzaz4oJ3VzZXJ0YXNrcycsIHtcbiAgICAgIG5hbWU6IHVzZXJUYXNrLm5hbWUsXG4gICAgICByb2xlOiBcIlVTRVJcIixcbiAgICAgIGluY2x1ZGU6IFtcInRhc2tcIixcImNvdXJzZVwiXSxcbiAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXSxcbiAgICAgIGZyb206IG1vbWVudCh0aGlzLnBlcnNpc3RlZFN0YXRlLndlZWtEYXRlKS5hZGQoLTMsICd3ZWVrcycpLnZhbHVlT2YoKSxcbiAgICAgIHRvOiBtb21lbnQodGhpcy5wZXJzaXN0ZWRTdGF0ZS53ZWVrRGF0ZSkuYWRkKDMsICd3ZWVrcycpLnZhbHVlT2YoKVxuICAgIH0sIHtcbiAgICAgIGNhY2hlOiAnbm8tY2FjaGUnXG4gICAgfSk7XG4gICAgY29uc3QgaWRlbnRpY2FsVGFza3MgPSBzaW1pbGFyVGFza3MuZmlsdGVyKHQgPT5cbiAgICAgIHQuY291cnNlTmFtZSA9PT0gdXNlclRhc2suY291cnNlTmFtZSAmJlxuICAgICAgdC5sZWFybmluZ0dvYWwgPT09IHVzZXJUYXNrLmxlYXJuaW5nR29hbCAmJlxuICAgICAgKCF1c2VyVGFzay50YXNrIHx8IHQudGFzay5tYXAodD0+dC5pZCkuam9pbignJykgPT09IHVzZXJUYXNrLnRhc2subWFwKHQ9PnQuaWQpLmpvaW4oJycpKSAmJlxuICAgICAgKCF1c2VyVGFzay5jb3Vyc2UgfHwgdC5jb3Vyc2UubWFwKGM9PmMuaWQpLmpvaW4oJycpID09PSB1c2VyVGFzay5jb3Vyc2UubWFwKGM9PmMuaWQpLmpvaW4oJycpKSk7XG4gICAgaWYgKGlkZW50aWNhbFRhc2tzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaXNzdWUgaW4gU3ViamVjdFBsYW5uZXIgbWlncmF0aW9uICh1c2VydGFza3Mgd2l0aCBsb25nIG5hbWVzIGlzIG5vdCBmb3VuZClcbiAgICAgIGlkZW50aWNhbFRhc2tzLnB1c2godXNlclRhc2spXG4gICAgfVxuICAgIGF3YWl0IHRoaXMudXBkYXRlKGlkZW50aWNhbFRhc2tzLCB0ID0+IHQuZG9uZSA9IGRvbmUpO1xuICB9XG5cbiAgYXN5bmMgc2V0U3ViVGFza0RvbmVTdGF0ZSAodXNlclRhc2s6IFVzZXJUYXNrLCBzdWJUYXNrSWQ6IHN0cmluZywgZG9uZTogYm9vbGVhbikge1xuICAgIGNvbnN0IHtnZXRDbGllbnQsIG9wdGltaXN0aWMsIHRhYmxlfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZShbdXNlclRhc2tdLFxuICAgICAgdCA9PiB0LnN1YlRhc2tzICYmIHQuc3ViVGFza3MuZmlsdGVyKHN0ID0+IHN0LmlkID09PSBzdWJUYXNrSWQpXG4gICAgICAgIC5mb3JFYWNoKHN0ID0+IHN0LmRvbmUgPSBkb25lKSk7XG4gIH1cblxuICBhc3luYyBzZXRXZWVrUGxhbm5lckJveE9wZW4oY291cnNlTmFtZTogc3RyaW5nLCBpc09wZW46IGJvb2xlYW4pIHtcbiAgICBjb25zdCBvcGVuQ291cnNlcyA9IHsgLi4udGhpcy5wZXJzaXN0ZWRTdGF0ZS5vcGVuQ291cnNlcyB9O1xuICAgIGlmIChpc09wZW4pXG4gICAgICBvcGVuQ291cnNlc1tjb3Vyc2VOYW1lXSA9IHRydWU7XG4gICAgZWxzZVxuICAgICAgZGVsZXRlIG9wZW5Db3Vyc2VzW2NvdXJzZU5hbWVdO1xuICAgIGF3YWl0IHRoaXMudXBkYXRlUGVyc2lzdGVkU3RhdGUoe29wZW5Db3Vyc2VzfSk7XG4gIH1cblxuICBhc3luYyBjaGFuZ2VXZWVrKHdlZWtEYXRlOiBEYXRlKSB7XG4gICAgbGV0IHBlcnNpc3RlZFN0YXRlID0gdGhpcy5wZXJzaXN0ZWRTdGF0ZTtcbiAgICBpZiAoIXBlcnNpc3RlZFN0YXRlKSB7XG4gICAgICBwZXJzaXN0ZWRTdGF0ZSA9IGF3YWl0IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUubG9hZCh0aGlzLm9wdGlvbnMudXNlcik7XG4gICAgfVxuICAgIGNvbnN0IG5ld1BlcnNpc3RlZCA9IG5ldyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlKHBlcnNpc3RlZFN0YXRlKTtcbiAgICBuZXdQZXJzaXN0ZWQud2Vla0RhdGUgPSBtb21lbnQod2Vla0RhdGUpLnN0YXJ0T2YoJ3dlZWsnKS52YWx1ZU9mKCk7XG4gICAgbmV3UGVyc2lzdGVkLnNhdmUoKTtcbiAgICB0aGlzLnBlcnNpc3RlZFN0YXRlID0gbmV3UGVyc2lzdGVkO1xuICAgIGF3YWl0IHRoaXMubWVtLnJlZnJlc2hGcm9tU2VydmVyKCk7XG4gIH1cblxuICBzdWJzY3JpYmUoc3Vic2NyaWJlcjogKHVzZXJUYXNrczogVXNlclRhc2tbXSwgcGVyc2lzdGVkU3RhdGU6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUsIHdlZWtUZXh0c1VUOiBVc2VyVGFzaykgPT4gdm9pZCkge1xuICAgIGNvbnN0IHByb3h5U3Vic2NyaWJlciA9ICh1c2VyVGFza3M6IFVzZXJUYXNrW10pID0+IHtcbiAgICAgIHN1YnNjcmliZXIoXG4gICAgICAgIHVzZXJUYXNrcy5maWx0ZXIodXQgPT4gIXV0LndlZWtUZXh0cyksXG4gICAgICAgIHRoaXMucGVyc2lzdGVkU3RhdGUsXG4gICAgICAgIHVzZXJUYXNrcy5maWx0ZXIodXQgPT4gISF1dC53ZWVrVGV4dHMpWzBdIHx8IHtcbiAgICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICAgIGRhdGVUaW1lOiB0aGlzLnBlcnNpc3RlZFN0YXRlLndlZWtEYXRlLFxuICAgICAgICAgIHdlZWtUZXh0czoge2Fzc2Vzc21lbnQ6JycsIHN0cmF0ZWd5OicnfSxcbiAgICAgICAgICBhY2w6IFtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgQUNMOiBMZXQgdXNlciBzZWxmIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhpcyBpdGVtOlxuICAgICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwiZW1haWxcIiwgdGhpcy5nZXRDdXJyZW50VXNlcigpLm1haWwsIFwiU1wiKSxcbiAgICAgICAgICAgIC8vIEFkZGl0aW9uYWwgQUNMOiBMZXQgZW1wbG95ZWVzIG9uIHNhbWUgc2Nob29sIGhhdmUgcmVhZCBhY2Nlc3MgdG8gaXQuXG4gICAgICAgICAgICAvLyBUaGlzIGN1cnJlbnRseSBvbmx5IGFwcGxpZXMgdG8gdGFza3MgdGhhdCByZWZlciB0byBjb3Vyc2UgdGFza3MgKG5vdCBvd24gdGFza3MhKVxuICAgICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwic2Nob29sUm9sZVwiLCBgJHt0aGlzLmdldEN1cnJlbnRVc2VyKCkuc2Nob29sfS9FTVBMT1lFRWAsIFwiUlwiKVxuICAgICAgICAgIF0ubWFwKGFjID0+IGFjLnRvU3RyaW5nKCkpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcHJveHlTdWJzY3JpYmVyW1wic3Vic2NyaWJlclwiXSA9IHN1YnNjcmliZXI7XG4gICAgdGhpcy5tZW0uc3Vic2NyaWJlKHByb3h5U3Vic2NyaWJlcik7XG4gIH1cblxuICB1bnN1YnNjcmliZShzdWJzY3JpYmVyOiAodXNlclRhc2tzOiBVc2VyVGFza1tdLCBwZXJzaXN0ZWRTdGF0ZTogV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSwgd2Vla1RleHRzVVQ6IFVzZXJUYXNrKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5tZW0uc3Vic2NyaWJlcnMgPSB0aGlzLm1lbS5zdWJzY3JpYmVycy5maWx0ZXIgKHMgPT4gc1tcInN1YnNjcmliZXJcIl0gIT09IHN1YnNjcmliZXIpO1xuICB9XG4gIFxufVxuXG5pZiAoIXVzZXJUYXNrc1JlcG8pIHtcbiAgdXNlclRhc2tzUmVwbyA9IGVudi51c2VyVGFza3NSZXBvID0gbmV3IFVzZXJUYXNrc1JlcG8oXG4gICAgKCk9PmVudi5rZWRCYWNrZW5kQ2xpZW50LFxuICAgICgpPT5lbnYuY3VycmVudFVzZXIpO1xuICB1c2VyVGFza3NSZXBvLm1lbS5lbnN1cmVIYXNEYXRhKCk7XG59XG4iLCJcbmV4cG9ydCBjb25zdCBLRURfTkFNRVNQQUNFID0gXCJLRURcIjtcblxuZGVjbGFyZSB2YXIgS0VEOiBhbnk7XG5cbnZhciByZXN1bHQgPSB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJyA/IHt9IDogS0VEO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3dbS0VEX05BTUVTUEFDRV0gPSByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gXCIuL3ZhbHVlXCI7XG52YXIgRW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhFbWl0dGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVtaXR0ZXIoaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlcnMgPSBfdGhpcy5zdWJzY3JpYmVycy5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gX2FbMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzICE9PSBvYnNlcnZlcjtcbiAgICAgICAgICAgICAgICB9KTsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmVycy5wdXNoKFtvYnNlcnZlciwgc3Vic2NyaXB0aW9uXSk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuZXJyb3IpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgX3RoaXMuZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIoX3RoaXMudmFsdWUsIHVuZGVmaW5lZCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH0pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZXJzID0gW107XG4gICAgICAgIF90aGlzLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEVtaXR0ZXIucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2goKTtcbiAgICB9O1xuICAgIEVtaXR0ZXIucHJvdG90eXBlLmRpc3BhdGNoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLl9kaXNwYXRjaCgpO1xuICAgIH07XG4gICAgRW1pdHRlci5wcm90b3R5cGUuX2Rpc3BhdGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVswXSwgc3Vic2NyaXB0aW9uID0gX2FbMV07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyKF90aGlzLnZhbHVlLCBfdGhpcy5lcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnIsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEVtaXR0ZXI7XG59KFZhbHVlKSk7XG5leHBvcnQgeyBFbWl0dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbWl0dGVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgaW5pdE1hcE1ldGhvZCB9IGZyb20gXCIuL21hcFwiO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gXCIuL2NvbGxlY3Rpb25cIjtcbmltcG9ydCB7IEZpYmVyQ29udGV4dCB9IGZyb20gJy4vZmliZXItY29udGV4dCc7XG52YXIgVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmFsdWUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmFsdWUoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBzdWJzY3JpYmUpIHx8IHRoaXM7XG4gICAgfVxuICAgIFZhbHVlLmZyb20gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeC5zdWJzY3JpYmUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlLmZyb20oKSBjYW4gb25seSB0YWtlIG9ic2VydmFibGVzXCIpO1xuICAgIH07XG4gICAgVmFsdWUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXNvbHZlZCA9IGZhbHNlLCByZXN1bHQsIGVyciwgbm90aWZ5O1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NpcHRpb24pIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgZXJyID0gZXJyb3I7XG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgbm90aWZ5KVxuICAgICAgICAgICAgICAgIG5vdGlmeShudWxsLCBlcnJvciwgc3Vic2NpcHRpb24pO1xuICAgICAgICAgICAgZWxzZSBpZiAobm90aWZ5KVxuICAgICAgICAgICAgICAgIG5vdGlmeSh2YWx1ZSwgbnVsbCwgc3Vic2NpcHRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEZpYmVyID0gRmliZXJDb250ZXh0LmN1cnJlbnQ7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRGaWJlcikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgRmliZXIgQ29udGV4dFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IGN1cnJlbnRGaWJlci5zdWJzY3JpcHRpb25zLCBvYnNlcnZlciA9IGN1cnJlbnRGaWJlci5vYnNlcnZlcjtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgbm90aWZ5ID0gb2JzZXJ2ZXI7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIG5vdGlmeSA9IGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY2lwdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWUoZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBlbHNlIGlmIChmbih2YWx1ZSkpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICB9KTsgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByZWZpeCwgeCk7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUudG9Db2xsZWN0aW9uID0gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIF90aGlzLm1hcChtYXBwZXIpLnN1YnNjcmliZShzKTsgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUuY29tYmluZUxhdGVzdCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtudWxsLCBudWxsXTtcbiAgICAgICAgICAgIHZhciBteVN1YnNjcmlwdGlvbiwgb3RoZXJTdWJzY3JpcHRpb247XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIG15U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG15U3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChpdGVtcywgZXJyb3IsIHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWVzWzBdID0gaXRlbXM7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1sxXSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWVzLCBudWxsLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvdGhlclN1YnNjcmlwdGlvbiA9IG90aGVyLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlc1sxXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbMF0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlcywgbnVsbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUuc3dpdGNoTWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHZhciByZXR1cm5lZFN1YnNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcHBlZFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoaXRlbSwgZXJyb3IsIHMpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBzO1xuICAgICAgICAgICAgICAgIGlmIChtYXBwZWRTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHJldHVybmVkU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlT3JWYWx1ZSA9IG1hcHBlcihpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlT3JWYWx1ZSAmJiB0eXBlb2Ygb2JzZXJ2YWJsZU9yVmFsdWUuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZU9yVmFsdWUuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWUsIGVycm9yLCByZXR1cm5lZFN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihvYnNlcnZhYmxlT3JWYWx1ZSwgbnVsbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuZWRTdWJzY3JpcHRpb247XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFZhbHVlO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBWYWx1ZSB9O1xuVmFsdWUucHJvdG90eXBlLm1hcCA9IGluaXRNYXBNZXRob2QoVmFsdWUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsdWUuanMubWFwIiwidmFyIE9ic2VydmFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLy9zdGF0aWMgZ2V0IFtTeW1ib2wuc3BlY2llc10oKSB7IHJldHVybiB0aGlzOyB9XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShfc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IF9zdWJzY3JpYmU7XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShmdW5jdGlvbiAoaXRlbXMsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihpdGVtcywgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHsgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHsgfSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGxhYmVsOiBhbnk7XG4gIGNoaWxkcmVuOiBhbnk7XG4gIGlkPzogc3RyaW5nO1xufVxuXG5mdW5jdGlvbiBmaW5kSWQobm9kZSkge1xuICBjb25zdCByZWN1Y2hlY2sgPSBuZXcgU2V0KCk7XG4gIHJldHVybiAoZnVuY3Rpb24gZmluZElkKG5vZGUpe1xuICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHJldHVybiBudWxsO1xuICAgIGlmIChyZWN1Y2hlY2suaGFzKG5vZGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlY3VjaGVjay5hZGQobm9kZSk7XG4gICAgaWYgKG5vZGUucHJvcHMpIHtcbiAgICAgIGlmIChub2RlLnByb3BzLmlkKSByZXR1cm4gbm9kZS5wcm9wcy5pZDtcbiAgICAgIGlmIChub2RlLnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVybiBmaW5kSWQobm9kZS5wcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChub2RlLmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaT0wO2k8bm9kZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5vZGVbaV07XG4gICAgICAgIGlmIChjaGlsZCkge1xuICAgICAgICAgIGNvbnN0IGNoaWxkSWQgPSBmaW5kSWQoY2hpbGQpO1xuICAgICAgICAgIGlmIChjaGlsZElkKSByZXR1cm4gY2hpbGRJZDtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSkobm9kZSk7XG59XG5cbmV4cG9ydCBjbGFzcyBGb3JtRmllbGQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPD5cbiAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cImtjbGFiZWxcIiBodG1sRm9yPXt0aGlzLnByb3BzLmlkIHx8IGZpbmRJZCh0aGlzLnByb3BzLmNoaWxkcmVuKX0+e3RoaXMucHJvcHMubGFiZWx9PC9sYWJlbD5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgPC8+XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgaW5pdE1hcE1ldGhvZCB9IGZyb20gXCIuL21hcFwiO1xuaW1wb3J0IHsgVmFsdWUgfSBmcm9tIFwiLi92YWx1ZVwiO1xuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCIuL2VtaXR0ZXJcIjtcbnZhciBDb2xsZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKENvbGxlY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQ29sbGVjdGlvbihzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHN1YnNjcmliZSkgfHwgdGhpcztcbiAgICB9XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuX21hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgdGhyb3cgXCJtaXhlZGluXCI7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLmZyb20gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeC5zdWJzY3JpYmUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHguc3Vic2NyaWJlKHMpOyB9KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICAgICAgICAgIHZhciBlbWl0dGVyXzEgPSBuZXcgRW1pdHRlcih4KTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29sbGVjdGlvbihmdW5jdGlvbiAocykgeyByZXR1cm4gZW1pdHRlcl8xLnN1YnNjcmliZShzKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiT2JzZXJ2YWJsZUNvbGxlY3Rpb24uZnJvbSgpIGNhbiBvbmx5IHRha2UgYXJyYXlzIG9yIG9ic2VydmFibGVzXCIpO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwKGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBtYXBwZXIoaXRlbSk7IH0pOyB9KTtcbiAgICB9O1xuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7IHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGl0ZW1zKTsgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7IHJldHVybiBpdGVtcy5maWx0ZXIoZmlsdGVyKTsgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIENvbGxlY3Rpb24uZnJvbSh0aGlzLnRvVmFsdWUoKS5jb21iaW5lTGF0ZXN0KG90aGVyKS5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgbWUgPSBfYVswXSwgb3RoZXIgPSBfYVsxXTtcbiAgICAgICAgICAgIHJldHVybiBtZS5jb25jYXQob3RoZXIpO1xuICAgICAgICB9KSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5vcmRlckJ5ID0gZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9WYWx1ZSgpLm1hcChmdW5jdGlvbiAoYXJyYXkpIHsgcmV0dXJuIGFycmF5LnNsaWNlKCkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgdmFyIGFQcm9wID0gYSAmJiBhW3Byb3BdO1xuICAgICAgICAgICAgdmFyIGJQcm9wID0gYiAmJiBiW3Byb3BdO1xuICAgICAgICAgICAgcmV0dXJuIGFQcm9wID4gYlByb3AgPyAxIDogYVByb3AgPCBiUHJvcCA/IC0xIDogMDtcbiAgICAgICAgfSk7IH0pLnRvQ29sbGVjdGlvbihmdW5jdGlvbiAoeCkgeyByZXR1cm4geDsgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS50b1ZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUocyk7IH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuZ3JvdXBCeSA9IGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgICAgICAgICB2YXIgcnYgPSB7fTtcbiAgICAgICAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHJ2W2l0ZW1bcHJvcF1dIHx8IChydltpdGVtW3Byb3BdXSA9IFtdKTtcbiAgICAgICAgICAgICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBydjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9WYWx1ZSgpLm1hcChmdW5jdGlvbiAoYXJyKSB7IHJldHVybiBhcnJbMF07IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIENvbGxlY3Rpb247XG59KE9ic2VydmFibGUpKTtcbmV4cG9ydCB7IENvbGxlY3Rpb24gfTtcbkNvbGxlY3Rpb24ucHJvdG90eXBlLl9tYXAgPSBpbml0TWFwTWV0aG9kKENvbGxlY3Rpb24pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29sbGVjdGlvbi5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIG9uQ2xpY2ssXG4gIGNsYXNzTmFtZT8sXG4gIHN0eWxlPyxcbiAgdGl0bGU/XG59O1xuXG5leHBvcnQgY29uc3QgUmVtb3ZlSXRlbSA9ICh7IG9uQ2xpY2ssIGNsYXNzTmFtZSwgc3R5bGUsIHRpdGxlIH06IFByb3BzKSA9PlxuXG4gIDxkaXZcbiAgICB0aXRsZT17dGl0bGUgfHwgTGBSYWRlcmFgfVxuICAgIGNsYXNzTmFtZT17XCJyZW1vdmVJdGVtIFwiICsgKGNsYXNzTmFtZSB8fCBcIlwiKX1cbiAgICBvbkNsaWNrPXtvbkNsaWNrfSBzdHlsZT17c3R5bGV9IC8+XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NOyIsImV4cG9ydCBmdW5jdGlvbiBpbml0TWFwTWV0aG9kKGN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IGN0b3IoZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobWFwcGVyKHZhbHVlKSwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfSk7IH0pO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgU2Nob29sTW9tZW50LCBnZXRTY2hvb2xNb21lbnQsIGFkZFllYXIgfSBmcm9tICcuL3NjaG9vbC1tb21lbnQnO1xuaW1wb3J0IHsgQWNhZGVtaWNZZWFyLCBUZXJtIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuaW1wb3J0IHtJbmplY3RlZEludGx9IGZyb20gJ3JlYWN0LWludGwnO1xuXG50eXBlIE1vbWVudCA9IG1vbWVudC5Nb21lbnQ7XG5cbmZ1bmN0aW9uIGlzU2Nob29sTW9tZW50KG9iajogRGF0ZSB8IFNjaG9vbE1vbWVudCk6IG9iaiBpcyBTY2hvb2xNb21lbnQge1xuICByZXR1cm4gJ2FjYWRlbWljWWVhcicgaW4gb2JqO1xufVxuXG5leHBvcnQgY2xhc3MgU2Nob29sVGVybSB7XG4gIGFjYWRlbWljWWVhcjogQWNhZGVtaWNZZWFyO1xuICB0ZXJtOiBUZXJtO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGVPclNjaG9vbE1vbWVudDogRGF0ZSB8IFNjaG9vbE1vbWVudCkge1xuICAgIGNvbnN0IHNjaG9vbE1vbWVudCA9IGlzU2Nob29sTW9tZW50KGRhdGVPclNjaG9vbE1vbWVudCkgP1xuICAgICAgZGF0ZU9yU2Nob29sTW9tZW50IDogZ2V0U2Nob29sTW9tZW50KG1vbWVudChkYXRlT3JTY2hvb2xNb21lbnQpKTtcbiAgICB0aGlzLmFjYWRlbWljWWVhciA9IHNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXI7XG4gICAgdGhpcy50ZXJtID0gc2Nob29sTW9tZW50LnRlcm07XG4gIH1cblxuICBnZXQgeWVhcigpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5hY2FkZW1pY1llYXJcbiAgICAgICAgLnNwbGl0KCcvJylbdGhpcy50ZXJtID09PSAnQVQnID8gMCA6IDFdKTtcbiAgfVxuXG4gIG5leHRUZXJtKCkge1xuICAgIHJldHVybiBuZXcgU2Nob29sVGVybSh0aGlzLnRlcm0gPT09ICdBVCcgP1xuICAgICAge1xuICAgICAgICB0ZXJtOiAnU1QnLFxuICAgICAgICBhY2FkZW1pY1llYXI6IHRoaXMuYWNhZGVtaWNZZWFyXG4gICAgICB9IDpcbiAgICAgIHtcbiAgICAgICAgdGVybTogJ0FUJyxcbiAgICAgICAgYWNhZGVtaWNZZWFyOiBhZGRZZWFyKHRoaXMuYWNhZGVtaWNZZWFyLCAxKVxuICAgICAgfSk7XG4gIH1cblxuICBwcmV2VGVybSgpIHtcbiAgICByZXR1cm4gbmV3IFNjaG9vbFRlcm0odGhpcy50ZXJtID09PSAnQVQnID9cbiAgICAgIHtcbiAgICAgICAgdGVybTogJ1NUJyxcbiAgICAgICAgYWNhZGVtaWNZZWFyOiBhZGRZZWFyKHRoaXMuYWNhZGVtaWNZZWFyLCAtMSlcbiAgICAgIH0gOlxuICAgICAge1xuICAgICAgICB0ZXJtOiAnQVQnLFxuICAgICAgICBhY2FkZW1pY1llYXI6IHRoaXMuYWNhZGVtaWNZZWFyXG4gICAgICB9KTtcbiAgICBcbiAgfVxuXG4gIHRvTG9jYWxlU3RyaW5nKGludGw6IEluamVjdGVkSW50bCwgc2hvcnRZZWFyPzogYm9vbGVhbikge1xuICAgIGxldCB5ZWFyID0gdGhpcy50ZXJtID09PSAnQVQnID9cbiAgICAgIHRoaXMuYWNhZGVtaWNZZWFyLnNwbGl0KCcvJylbMF06XG4gICAgICB0aGlzLmFjYWRlbWljWWVhci5zcGxpdCgnLycpWzFdO1xuXG4gICAgaWYgKHNob3J0WWVhcilcbiAgICAgIHllYXIgPSB5ZWFyLnN1YnN0cigyKTtcblxuICAgIHJldHVybiB0aGlzLnRlcm0gPT09ICdBVCcgPyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOid0ZXJtcGxhbm5lci5zZWNvbmRUZXJtJywgZGVmYXVsdE1lc3NhZ2U6J0hUIHt5ZWFyfSd9LCB7eWVhcjogeWVhcn0pIDogXG4gICAgaW50bC5mb3JtYXRNZXNzYWdlKHtpZDondGVybXBsYW5uZXIuZmlyc3RUZXJtJywgZGVmYXVsdE1lc3NhZ2U6J1ZUIHt5ZWFyfSd9LCB7eWVhcjogeWVhcn0pO1xuICB9XG59XG4iLCJjb25zdCBERUZBVUxUX0NBQ0hFX0VYUElSQVRJT04gPSAzMCAqIDYwICogMTAwMDsgLy8gMzAgbWludXRlcy5cblxudHlwZSBQcm9taXNlUmV0dXJuaW5nTWV0aG9kTmFtZXM8QVBJPiA9IHtcbiAgW01FVEhPRCBpbiBrZXlvZiBBUEldOiBBUElbTUVUSE9EXSBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gUHJvbWlzZTxhbnk+ID8gTUVUSE9EIDogbmV2ZXJcbn1cblxudHlwZSBDb252ZXJ0TWV0aG9kVG9TdXNwZW5zZTxGPiA9IEYgZXh0ZW5kcyAoLi4uYXJnczogaW5mZXIgQSkgPT4gUHJvbWlzZTxpbmZlciBSPiA/XG4gICguLi5hcmdzOiBBKSA9PiBSIDpcbiAgRjtcblxuZXhwb3J0IHR5cGUgU3VzcGVuc2VCYXNlZEFQSTxBUEk+ID0ge1xuICBbTUVUSE9EIGluIGtleW9mIFByb21pc2VSZXR1cm5pbmdNZXRob2ROYW1lczxBUEk+XTogQ29udmVydE1ldGhvZFRvU3VzcGVuc2U8QVBJW01FVEhPRF0+XG59XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgaXNBcGlNZXRob2Q/OiAocHJvcDogc3RyaW5nKT0+Ym9vbGVhbixcbiAgY2FjaGVFeHBpcmF0aW9uPzogbnVtYmVyXG59XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBPcHRpb25zID0ge1xuICBpc0FwaU1ldGhvZDogZiA9PiB0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJyxcbiAgY2FjaGVFeHBpcmF0aW9uOiBERUZBVUxUX0NBQ0hFX0VYUElSQVRJT05cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlU3VzcGVuc2VBcGk8QVBJPihhcGk6IEFQSSwgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zKTogU3VzcGVuc2VCYXNlZEFQSTxBUEk+XG57XG4gIG9wdGlvbnMgPSB7Li4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnN9O1xuICBjb25zdCB7aXNBcGlNZXRob2QsIGNhY2hlRXhwaXJhdGlvbn0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IHJ2OiBTdXNwZW5zZUJhc2VkQVBJPEFQST4gPSBPYmplY3QuY3JlYXRlKGFwaSBhcyBhbnkpIGFzIFN1c3BlbnNlQmFzZWRBUEk8QVBJPjtcbiAgY29uc3QgY2FjaGU6IHtba2V5OiBzdHJpbmddOiB7dGltZW91dDogbnVtYmVyLCB2YWx1ZT86IGFueSwgZXJyb3I/OiBhbnksIHByb21pc2U/OiBQcm9taXNlPGFueT59fSA9IHt9O1xuXG4gIC8vIFdhbGsgdGhlIGluc3RhbmNlICsgcHJvdG90eXBlIGNoYWluIHRvIGdlbmVyYXRlIHN1c3BlbnNlIHZlcnNpb24gb2YgZWFjaCBwcm9taXNlIHJldHVybmluZyBtZXRob2RcbiAgZm9yIChsZXQgcHJvdG8gPSBhcGk7IHByb3RvICYmIHByb3RvICE9PSBPYmplY3QucHJvdG90eXBlOyBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykpIHtcbiAgICBzdXNwZW5kaWZ5KHByb3RvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN1c3BlbmRpZnkocHJvdG8pIHtcbiAgICBPYmplY3Qua2V5cyhwcm90bykuZm9yRWFjaChwcm9wID0+IHtcbiAgICAgIGlmICghcnYuaGFzT3duUHJvcGVydHkocHJvcCkgJiYgaXNBcGlNZXRob2QocHJvcCkpIHtcbiAgICAgICAgcnZbcHJvcF0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgIGNvbnN0IGtleSA9IEpTT04uc3RyaW5naWZ5KFtwcm9wLCAuLi5hcmdzXSk7XG4gICAgICAgICAgY29uc3QgY2FjaGVkRW50cnkgPSBjYWNoZVtrZXldO1xuICAgICAgICAgIGlmIChjYWNoZWRFbnRyeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoY2FjaGVkRW50cnkucHJvbWlzZSkgdGhyb3cgY2FjaGVkRW50cnkucHJvbWlzZTtcbiAgICAgICAgICAgIGlmIChjYWNoZWRFbnRyeS5lcnJvcikgdGhyb3cgY2FjaGVkRW50cnkuZXJyb3I7XG4gICAgICAgICAgICBpZiAoY2FjaGVkRW50cnkudGltZW91dCA+IERhdGUubm93KCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZEVudHJ5LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHByb3RvW3Byb3BdLmFwcGx5KGFwaSwgYXJncykudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICBjYWNoZVtrZXldID0ge3RpbWVvdXQ6IERhdGUubm93KCkgKyBjYWNoZUV4cGlyYXRpb24sIHZhbHVlOiByZXN1bHR9O1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICBjYWNoZVtrZXldID0ge3RpbWVvdXQ6IERhdGUubm93KCkgKyBjYWNoZUV4cGlyYXRpb24sIGVycm9yfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FjaGVba2V5XSA9IHt0aW1lb3V0OiBEYXRlLm5vdygpICsgY2FjaGVFeHBpcmF0aW9uLCBwcm9taXNlfTtcbiAgICAgICAgICAgIHRocm93IHByb21pc2U7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci50aGVuKSB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgZXJyb3J9O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBhcyBhbnk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcnY7XG59XG4iLCJpbXBvcnQgeyBFRFNDb3Vyc2UsIEVEU0Fzc2Vzc21lbnQsIEVEU1N0dWR5UGxhbiwgRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHksIEVEU1N0dWRlbnQsIEVEU1R1aXRpb25Hcm91cCwgRURTVHVpdGlvblN0dWRlbnQsIEVEU1RlYWNoZXIsIE1vY2tFRFNBY2FkZW1pY1llYXIsIE1vY2tFRFNEYXRlUmFuZ2UgfSBmcm9tICcuLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBJc29tb3JwaGljRW52LCBCZWFyZXJQcm92aWRlciwgSHR0cEVycm9yIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgU2Nob29sTW9tZW50IH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLW1vbWVudCc7XG5pbXBvcnQgeyBTY2hvb2xUZXJtIH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLXRlcm0nO1xuaW1wb3J0IHsgZGF0ZVRpbWVSZXZpdmVyLCBMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IG1vY2tKc29uRmlsZSBmcm9tICcuL21vY2svbW9jay1lZHMtZGF0YS5qc29uJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IFN1c3BlbnNlQmFzZWRBUEksIG1ha2VTdXNwZW5zZUFwaSB9IGZyb20gJy4uL3V0aWxzL21ha2Utc3VzcGVuc2UtYXBpJztcblxuZXhwb3J0IGNsYXNzIEVkc0NsaWVudCB7XG4gIGh0dHA6IFJlc3RDbGllbnQ7XG4gIHVzZXJFbWFpbEdldHRlcjogKCk9PnN0cmluZztcbiAgc3VzcGVuc2U6IFN1c3BlbnNlQmFzZWRBUEk8RWRzQ2xpZW50PjtcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgaXNvbW9ycGhpYzogSXNvbW9ycGhpY0VudixcbiAgICBiYXNlVXJsOiBzdHJpbmcsXG4gICAgYmVhcmVyUHJvdmlkZXI6IEJlYXJlclByb3ZpZGVyLFxuICAgIHVzZXJFbWFpbEdldHRlcjogKCk9PnN0cmluZ1xuICApIHtcbiAgICB0aGlzLmh0dHAgPSBuZXcgUmVzdENsaWVudCAoaXNvbW9ycGhpYywgYmFzZVVybCwge2JlYXJlclByb3ZpZGVyfSk7XG4gICAgdGhpcy51c2VyRW1haWxHZXR0ZXIgPSB1c2VyRW1haWxHZXR0ZXI7XG4gICAgY29uc3QgaXNBcGlNZXRob2QgPSBtID0+XG4gICAgICB0eXBlb2YgdGhpc1ttXSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgbSAhPT0gJ2NvbnN0cnVjdG9yJyAmJiAvLyBTaW5jZSBtYWtlU3VzcGVuc2VBcGkoKSB3YWxrcyBwcm90b3R5cGUgY2hhaW5cbiAgICAgIG0gIT09ICdwcml2YXRpemluZ0NhY2hlQnVzdCcgJiZcbiAgICAgIG0gIT09ICd1c2VyRW1haWxHZXR0ZXInIC8vIExpc3Qgbm9uLUFQSSBtZXRob2RzIGhlcmUuLi5cbiAgICAgIDtcblxuICAgIE9iamVjdC5rZXlzKEVkc0NsaWVudC5wcm90b3R5cGUpLmZvckVhY2gobWV0aG9kID0+IHtcbiAgICAgIGlmIChpc0FwaU1ldGhvZChtZXRob2QpKSB7XG4gICAgICAgIHRoaXNbbWV0aG9kXSA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzW21ldGhvZF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc3VzcGVuc2UgPSBtYWtlU3VzcGVuc2VBcGkodGhpcywge2lzQXBpTWV0aG9kfSk7XG4gIH1cblxuICBwcml2YXRlIHByaXZhdGl6aW5nQ2FjaGVCdXN0KCkge1xuICAgIHJldHVybiB7dXNlcjogdGhpcy51c2VyRW1haWxHZXR0ZXIoKX07XG4gIH1cblxuLyoqXG4gICAqIFJldHJpZXZlIGFjdGl2ZSBjb3Vyc2VzIGZvciBjdXJyZW50IGxvZ2dlZCBpbiBzdHVkZW50LlxuICAgKlxuICAgKiBAcGFyYW0gY291cnNlQ29kZSBTaG9ydC1uYW1lIG9mIHRoZSBjb3Vyc2UuIE9wdGlvbmFsLlxuICAgKi9cbiAgYXN5bmMgZ2V0QWN0aXZlQ291cnNlcyhxOiB7Y291cnNlQ29kZT86IHN0cmluZywgcGVyaW9kTmFtZTogc3RyaW5nfSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBxdWVyeTphbnkgPSB0aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCk7XG4gICAgICBpZiAocSkge1xuICAgICAgICBpZiAocS5jb3Vyc2VDb2RlKSBxdWVyeS5Db3Vyc2VDb2RlID0gcS5jb3Vyc2VDb2RlO1xuICAgICAgICBpZiAocS5wZXJpb2ROYW1lKSBxdWVyeS5QZXJpb2ROYW1lID0gcS5wZXJpb2ROYW1lO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRhY3RpdmVjb3Vyc2VzXCIsIHF1ZXJ5KTtcbiAgICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgcmV0dXJuIGpzb24uY291cnNlcyBhcyBFRFNDb3Vyc2VbXTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZyb20gRURTOiBcIiArIGV4KTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihMYEt1bmRlIHR5dsOkcnIgaW50ZSBsYWRkYSB0ZXJtaW5zbcOlbCBlbGxlciBhdmtsYXJhZGUgc3RlZyBmcsOlbiBFRFMuIEbDtnJzw7ZrIGlnZW4gc2VuYXJlLi4uYCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGxhdGVzdCBhc3Nlc3NtZW50cyBmb3IgY3VycmVudCBsb2dnZWQgaW4gdXNlci5cbiAgICogXG4gICAqIEBwYXJhbSBsaW1pdCBPcHRpb25hbCBsaW1pdFxuICAgKi9cbiAgYXN5bmMgZ2V0TGF0ZXN0QXNzZXNzbWVudHMobGltaXQ/OiBudW1iZXIpIHtcbiAgICBjb25zdCBxdWVyeTphbnkgPSB0aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCk7XG4gICAgaWYgKCFpc05hTihsaW1pdCkpIHF1ZXJ5LkNvdW50ID0gbGltaXQ7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRhc3Nlc3NtZW50c1wiLCBxdWVyeSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLmFzc2Vzc21lbnRzIGFzIEVEU0Fzc2Vzc21lbnRbXTsgICAgXG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgc3R1ZHlwbGFucyBmb3IgY3VycmVudCBsb2dnZWQtaW4gdXNlclxuICAgKi9cbiAgYXN5bmMgZ2V0U3R1ZGVudEdvYWxzKCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJzdHVkZW50Z29hbHNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudEdvYWxzIGFzIEVEU1N0dWR5UGxhbltdOyAgICBcbiAgfVxuXG4gIGFzeW5jIGdldFN0dWRlbnRGdXR1cmVBYmlsaXRpZXMoKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRGdXR1cmVBYmlsaXRpZXNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudEZ1dHVyZUFiaWxpdGllcyBhcyBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eVtdO1xuICB9XG5cbiAgYXN5bmMgZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMoKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInRlYWNoZXJ0dXRvcnN0dWRlbnRzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnN0dWRlbnRzIGFzIEVEU1N0dWRlbnRbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXRTY2hvb2xUdWl0aW9uR3JvdXBzKClcbiAgICogXG4gICAqIFJldHVybiB0dWl0aW9uZ3JvdXBzIGZvciBzY2hvb2xcbiAgICogXG4gICAqIEBwYXJhbSBzY2hvb2xOYW1lIC0gbmFtZSBvZiBzY2hvb2xcbiAgICogQHBhcmFtIGNvdXJzZUNvZGUgLSBTa29sdmVya2V0cyBjb2RlIGZvciBjb3Vyc2VcbiAgICovXG4gIGFzeW5jIGdldFNjaG9vbFR1aXRpb25Hcm91cHMocToge3NjaG9vbE5hbWU6IHN0cmluZywgY291cnNlQ29kZTogc3RyaW5nfSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJTY2hvb2xUdWl0aW9uR3JvdXBzXCIsIHsuLi50aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCksIC4uLnF9KTtcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24uc2Nob29sVHVpdGlvbkdyb3VwcyBhcyBFRFNUdWl0aW9uR3JvdXBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXRUdWl0aW9uR3JvdXBTdHVkZW50cygpXG4gICAqIFxuICAgKiBSZXR1cm4gbmFtZSBhbmQgbWFpbGFkcmVzc2VzIGZvciB0dXRpdGlvbmdyb3VwcyBpbiBzY2hvb2xzXG4gICAqIFxuICAgKiBAcGFyYW0gc2Nob29sTmFtZSAtIG5hbWUgb2Ygc2Nob29sXG4gICAqIEBwYXJhbSB0dWl0aW9uR3JvdXBOYW1lIC0gdHVpdGlvbiBncnVvcCBuYW1lIGluIEVEU1xuICAgKi9cbiAgYXN5bmMgZ2V0VHVpdGlvbkdyb3VwU3R1ZGVudHMocToge3NjaG9vbE5hbWU6IHN0cmluZywgdHVpdGlvbkdyb3VwTmFtZTogc3RyaW5nfSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJUdWl0aW9uR3JvdXBTdHVkZW50c1wiLCB7Li4udGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpLCAuLi5xfSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnR1aXRpb25Hcm91cFN0dWRlbnRzIGFzIEVEU1R1aXRpb25TdHVkZW50W107XG4gIH1cblxuICAvKipcbiAgICogZ2V0U2Nob29sVGVhY2hlcnMoKVxuICAgKiBcbiAgICogUmV0dXJuIG5hbWUgYW5kIG1haWxhZHJlc3NlcyBmb3IgdHV0aXRpb25ncm91cHMgaW4gc2Nob29sc1xuICAgKiBcbiAgICogQHBhcmFtIHNjaG9vbE5hbWUgLSBuYW1lIG9mIHNjaG9vbFxuICAgKi9cbiAgYXN5bmMgZ2V0U2Nob29sVGVhY2hlcnMocToge3NjaG9vbE5hbWU6IHN0cmluZ30pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwiU2Nob29sVGVhY2hlcnNcIiwgey4uLnRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSwgLi4ucX0pO1xuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ganNvbi5zY2hvb2xUZWFjaGVycyBhcyBFRFNUZWFjaGVyW107XG4gIH1cbiAgLy8gd2UgYXNzdW1lIHRoYXQgdGhlIEVEUyB3aWxsIHJldHVybiB0aGUgY3VycmVudCBhY2FkZW1pYyB5ZWFyIGRhdGVzIGRldGVybWluZWQgYnkgdGhlIGN1cnJlbnQgZGF0ZVxuICBhc3luYyBnZXRBY2FkZW1pY1llYXJUZXJtcyhzY2hvb2xMb2NhbGU6IHN0cmluZywgZGF0ZTogRGF0ZSkge1xuICAgIC8vIG1vY2sgZGF0YVxuICAgIHN3aXRjaCAoc2Nob29sTG9jYWxlKSB7XG4gICAgICBjYXNlICdlbl9zaW4nOlxuICAgICAgcmV0dXJuIG1vY2tKc29uRmlsZS5Tb3V0aEluZGlhLmZpbHRlcihmID0+IG1vbWVudChkYXRlKS5pc1NhbWVPckFmdGVyKGYuZmlyc3RUZXJtLnN0YXJ0RGF0ZSkgJiYgbW9tZW50KGRhdGUpLmlzU2FtZU9yQmVmb3JlKGYuc2Vjb25kVGVybS5lbmREYXRlKSlbMF0gYXMgTW9ja0VEU0FjYWRlbWljWWVhcjtcbiAgICAgIGNhc2UgJ2VuX25pbic6XG4gICAgICByZXR1cm4gbW9ja0pzb25GaWxlLk5vcnRoSW5kaWEuZmlsdGVyKGYgPT4gbW9tZW50KGRhdGUpLmlzU2FtZU9yQWZ0ZXIoZi5maXJzdFRlcm0uc3RhcnREYXRlKSAmJiBtb21lbnQoZGF0ZSkuaXNTYW1lT3JCZWZvcmUoZi5zZWNvbmRUZXJtLmVuZERhdGUpKVswXSBhcyBNb2NrRURTQWNhZGVtaWNZZWFyO1xuICAgICAgY2FzZSAnc3YnOlxuICAgICAge1xuICAgICAgdmFyIGhvbGlkYXlzID0gW10gYXMgTW9ja0VEU0RhdGVSYW5nZVtdO1xuICAgICAgdmFyIGFkZFllYXIgPSBkYXRlLmdldE1vbnRoKCkgPj0gNjtcbiAgICAgIFxuICAgICAgdmFyIGZpcnN0VGVybVllYXIgPSBhZGRZZWFyID8gZGF0ZS5nZXRGdWxsWWVhcigpIDogZGF0ZS5nZXRGdWxsWWVhcigpIC0gMTtcbiAgICAgIHZhciBzZWNvbmRUZXJtWWVhciA9IGFkZFllYXIgPyBkYXRlLmdldEZ1bGxZZWFyKCkgKyAxIDogZGF0ZS5nZXRGdWxsWWVhcigpO1xuXG4gICAgICAvL1RoZSBzdGFydCBkYXRlIGNhbiBiZSBpbiB0aGUgbGFzdCB3ZWVrIG9mIHRoZSBwcmV2aW91cyB5ZWFyXG4gICAgICAgdmFyIGZpcnN0VGVybVllYXJNb21lbnQgPSBtb21lbnQoZmlyc3RUZXJtWWVhci50b1N0cmluZygpLCBcIllZWVlcIik7XG4gICAgICAgdmFyIHNlY29uZFRlcm1ZZWFyTW9tZW50ID0gbW9tZW50KHNlY29uZFRlcm1ZZWFyLnRvU3RyaW5nKCksIFwiWVlZWVwiKTtcblxuICAgICAgIGlmKGZpcnN0VGVybVllYXJNb21lbnQud2VlaygpICE9IDEpXG4gICAgICAge1xuICAgICAgICBmaXJzdFRlcm1ZZWFyTW9tZW50ID0gZmlyc3RUZXJtWWVhck1vbWVudC5jbG9uZSgpLmFkZCgxLCAnd2VlaycpO1xuICAgICAgIH1cblxuICAgICAgICBpZihzZWNvbmRUZXJtWWVhck1vbWVudC53ZWVrKCkgIT0gMSlcbiAgICAgICB7XG4gICAgICAgIHNlY29uZFRlcm1ZZWFyTW9tZW50ID0gc2Vjb25kVGVybVllYXJNb21lbnQuY2xvbmUoKS5hZGQoMSwgJ3dlZWsnKTtcbiAgICAgICB9XG5cbiAgICAgIHZhciBzdGFydEZpcnN0VGVybURhdGUgPSBtb21lbnQoZmlyc3RUZXJtWWVhck1vbWVudC5jbG9uZSgpKS53ZWVrKDMyKS5zdGFydE9mKCd3ZWVrJyk7XG4gICAgICB2YXIgZW5kRmlyc3RUZXJtRGF0ZSA9IG1vbWVudChmaXJzdFRlcm1ZZWFyTW9tZW50LmNsb25lKCkpLndlZWsoNTEpLmVuZE9mKCd3ZWVrJyk7XG5cbiAgICAgIHZhciBzdGFydFNlY29uZFRlcm1EYXRlID0gbW9tZW50KHNlY29uZFRlcm1ZZWFyTW9tZW50LmNsb25lKCkpOyAvLyBkb24ndCBzZXQgYXMgdGhlIHN0YXJ0IG9mIHRoZSB3ZWVrIGJlY2F1c2UgaXQgY2FuIGJlIGluIHRoZSBwcmV2aW91cyB5ZWFyXG4gICAgICB2YXIgZW5kU2Vjb25kVGVybURhdGUgPSBtb21lbnQoc2Vjb25kVGVybVllYXJNb21lbnQuY2xvbmUoKSkud2VlaygyNSkuZW5kT2YoJ3dlZWsnKTtcblxuICAgICAgY29uc3QgZmlyc3RUZXJtID0ge3N0YXJ0RGF0ZTogbmV3IERhdGUoZmlyc3RUZXJtWWVhciwgc3RhcnRGaXJzdFRlcm1EYXRlLm1vbnRoKCksIHN0YXJ0Rmlyc3RUZXJtRGF0ZS5kYXRlKCkpLnRvRGF0ZVN0cmluZygpLCBlbmREYXRlOiBuZXcgRGF0ZShmaXJzdFRlcm1ZZWFyLCBlbmRGaXJzdFRlcm1EYXRlLm1vbnRoKCksIGVuZEZpcnN0VGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKX07XG4gICAgICBjb25zdCBzZWNvbmRUZXJtID0ge3N0YXJ0RGF0ZTogbmV3IERhdGUoc2Vjb25kVGVybVllYXIsIHN0YXJ0U2Vjb25kVGVybURhdGUubW9udGgoKSwgc3RhcnRTZWNvbmRUZXJtRGF0ZS5kYXRlKCkpLnRvRGF0ZVN0cmluZygpLCBlbmREYXRlOiBuZXcgRGF0ZShzZWNvbmRUZXJtWWVhciwgZW5kU2Vjb25kVGVybURhdGUubW9udGgoKSwgZW5kU2Vjb25kVGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKX07XG4gICAgICByZXR1cm4ge2ZpcnN0VGVybSwgc2Vjb25kVGVybSwgaG9saWRheXN9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRURTUGVyaW9kIHtcbiAgcGVyaW9kOiBzdHJpbmc7XG4gIHRlcm06ICdBVCcgfCAnU1QnO1xuICB5ZWFyOiBudW1iZXI7XG4gIGNvbnN0cnVjdG9yIChwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm06IHN0cmluZyB8IFNjaG9vbE1vbWVudCkge1xuICAgIGlmICh0eXBlb2YgcGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5wZXJpb2QgPSBwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm07XG4gICAgICB0aGlzLnRlcm0gPSB0aGlzLnBlcmlvZC5zdGFydHNXaXRoKCdIVCcpID8gJ0FUJyA6ICdTVCc7XG4gICAgICB0aGlzLnllYXIgPSBwYXJzZUludCh0aGlzLnBlcmlvZC5zdWJzdHIoMikpO1xuICAgICAgaWYgKGlzTmFOKHRoaXMueWVhcikpIHRocm93IG5ldyBFcnJvciAoYEludmFsaWQgcGVyaW9kOiAke3RoaXMucGVyaW9kfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzY2hvb2xUZXJtID0gbmV3IFNjaG9vbFRlcm0ocGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtKTtcbiAgICAgIHRoaXMucGVyaW9kID0gKHNjaG9vbFRlcm0udGVybSA9PT0gJ0FUJyA/IFwiSFRcIiA6IFwiVlRcIikgKyBzY2hvb2xUZXJtLnllYXI7XG4gICAgICB0aGlzLnRlcm0gPSBzY2hvb2xUZXJtLnRlcm07XG4gICAgICB0aGlzLnllYXIgPSBzY2hvb2xUZXJtLnllYXI7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHNjaG9vbFRlcm0gKCkgOiBTY2hvb2xUZXJtIHtcbiAgICByZXR1cm4gbmV3IFNjaG9vbFRlcm0oe1xuICAgICAgYWNhZGVtaWNZZWFyOiB0aGlzLnRlcm0gPT09ICdBVCcgP1xuICAgICAgICBgJHt0aGlzLnllYXJ9LyR7dGhpcy55ZWFyICsgMX1gIDpcbiAgICAgICAgYCR7dGhpcy55ZWFyLTF9LyR7dGhpcy55ZWFyfWAsXG4gICAgICB0ZXJtOiB0aGlzLnRlcm1cbiAgICB9KTtcbiAgfVxuXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLnBlcmlvZDtcbiAgfVxuXG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMueWVhciArIFwiOlwiICsgKHRoaXMudGVybSA9PT0gJ1NUJyA/IFwiMVwiIDogXCIyXCIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUpzb25EYXRlX29sZCAoanNvbkRhdGVTdHI6IHN0cmluZykgOiBEYXRlIHtcbiAgY29uc3QgZGF0ZSA9IGRhdGVUaW1lUmV2aXZlcihcIlwiLCBqc29uRGF0ZVN0cik7XG4gIGlmICghKGRhdGUgaW5zdGFuY2VvZiBEYXRlKSkgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBKU09OIGRhdGUgc3RyaW5nOiBcIiArIGpzb25EYXRlU3RyKTtcbiAgcmV0dXJuIGRhdGU7XG59XG5cbmZ1bmN0aW9uIGF2b2lkU2ltdWx0YW5vdXNDYWxsczxULEE+KG1ldGhvZDogKC4uLmFyZ3M6QVtdKT0+UHJvbWlzZTxUPikgOiAoLi4uYXJnczpBW10pPT5Qcm9taXNlPFQ+IHtcbiAgbGV0IG9uZ29pbmdQcm9taXNlczoge1thcmdzSnNvbjogc3RyaW5nXTogUHJvbWlzZTxUPn0gPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGFyZ3NKc29uID0gSlNPTi5zdHJpbmdpZnkoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICBpZiAoIW9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl0pIHtcbiAgICAgIG9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl0gPSBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKHJlc3VsdD0+e1xuICAgICAgICBkZWxldGUgb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXTtcbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybUZpZWxkIH0gZnJvbSAnLi9mb3JtLWZpZWxkJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgbGFiZWw6IGFueTtcbiAgaWQ6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIGF1dG9Gb2N1cz86IGJvb2xlYW47XG4gIHJvd3M/OiBudW1iZXI7XG4gIGNoaWxkcmVuPztcbiAgb25DaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgVGV4dEFyZWFGb3JtRmllbGQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEZvcm1GaWVsZCBsYWJlbD17dGhpcy5wcm9wcy5sYWJlbH0gaWQ9e3RoaXMucHJvcHMuaWR9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgPHRleHRhcmVhIGF1dG9Gb2N1cz17dGhpcy5wcm9wcy5hdXRvRm9jdXN9IGlkPXt0aGlzLnByb3BzLmlkfSBjb2xzPXszNX0gcm93cz17dGhpcy5wcm9wcy5yb3dzIHx8IDV9IHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5wcm9wcy5vbkNoYW5nZShldi50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcy5wbGFjZWhvbGRlcn0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB7ISF0aGlzLnByb3BzLmNoaWxkcmVuICYmIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cbiAgICAgICAgICAgIHt0aGlzLnByb3BzLmNoaWxkcmVufVxuICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0Zvcm1GaWVsZD5cbiAgICApO1xuICB9XG59XG5cbiIsInZhciBzdGFjayA9IFtdO1xudmFyIGN1cnJlbnRGaWJlciA9IG51bGw7XG52YXIgcHJvdmlkZXJzID0gW2Z1bmN0aW9uICgpIHsgcmV0dXJuIGN1cnJlbnRGaWJlcjsgfV07XG5mdW5jdGlvbiBwdXNoRmliZXIoZmliZXIpIHtcbiAgICBzdGFjay5wdXNoKGN1cnJlbnRGaWJlcik7XG4gICAgY3VycmVudEZpYmVyID0gZmliZXI7XG59XG5mdW5jdGlvbiBwb3BGaWJlcigpIHtcbiAgICBjdXJyZW50RmliZXIgPSBzdGFjay5wb3AoKTtcbn1cbmV4cG9ydCB2YXIgRmliZXJDb250ZXh0ID0ge1xuICAgIGdldCBjdXJyZW50KCkgeyByZXR1cm4gY3VycmVudEZpYmVyOyB9LFxuICAgIC8qcnVuOiBmdW5jdGlvbiByZXJ1bjxSPihmaWJlcjogRmliZXIsIGZuOiAoKT0+Uik6IFIgfCBQcm9taXNlPFI+IHtcbiAgICAgIHB1c2hGaWJlcihmaWJlcik7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZuKCkpO1xuICAgICAgfSBjYXRjaCAocCkge1xuICAgICAgICBpZiAocCAmJiB0eXBlb2YgcC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIHAudGhlbigoKT0+cmVydW4oZmliZXIsIGZuKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHApO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBwb3BGaWJlcigpO1xuICAgICAgfVxuICAgIH0sKi9cbiAgICBhZGRQcm92aWRlcjogZnVuY3Rpb24gKGdldEN1cnJlbnRGaWJlcikge1xuICAgICAgICBwcm92aWRlcnMucHVzaChnZXRDdXJyZW50RmliZXIpO1xuICAgICAgICBzZXRDdXJyZW50R2V0dGVyRnJvbVByb3ZpZGVycygpO1xuICAgIH0sXG4gICAgcmVtb3ZlUHJvdmlkZXI6IGZ1bmN0aW9uIChnZXRDdXJyZW50RmliZXIpIHtcbiAgICAgICAgcHJvdmlkZXJzID0gcHJvdmlkZXJzLmZpbHRlcihmdW5jdGlvbiAocCkgeyByZXR1cm4gcCAhPT0gZ2V0Q3VycmVudEZpYmVyOyB9KTtcbiAgICAgICAgc2V0Q3VycmVudEdldHRlckZyb21Qcm92aWRlcnMoKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gc2V0Q3VycmVudEdldHRlckZyb21Qcm92aWRlcnMoKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZpYmVyQ29udGV4dCwgXCJjdXJyZW50XCIsIHtcbiAgICAgICAgZ2V0OiBwcm92aWRlcnMucmVkdWNlKGZ1bmN0aW9uIChwLCBjKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBwKCkgfHwgYygpOyB9OyB9KSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBFcnJvcihcIlVzZSBGaWJlckNvbnRleHQucHVzaCgpIHRvIGNoYW5nZSBjdXJyZW50IGZpYmVyXCIpOyB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWJlci1jb250ZXh0LmpzLm1hcCIsImltcG9ydCBtb21lbnQsIHsgTW9tZW50IH0gZnJvbSBcIm1vbWVudFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gS0VEV2VlayAoeWVhcjogbnVtYmVyLCB3ZWVrOiBudW1iZXIpIHtcbiAgY29uc3QgbSA9IG1vbWVudChuZXcgRGF0ZSh5ZWFyLCAxLCAxKSkud2Vlayh3ZWVrKTtcbiAgY29uc3QgcmVzID0ge1xuICAgIHllYXIsXG4gICAgd2VlayxcbiAgICBub3RCZWZvcmU6IG0uY2xvbmUoKS5zdGFydE9mKCd3ZWVrJykuYWRkKC0yLCAnZGF5cycpLnRvRGF0ZSgpLmdldFRpbWUoKSxcbiAgICBub3RBZnRlcjogbS5jbG9uZSgpLnN0YXJ0T2YoJ3dlZWsnKS5hZGQoNSwgJ2RheXMnKS50b0RhdGUoKS5nZXRUaW1lKClcbiAgfTtcbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFkanVzdGVkV2VlayhtOiBNb21lbnQpIHtcbiAgY29uc3QgY2xvbmUgPSBtLmNsb25lKCk7XG4gIHJldHVybiBtLndlZWtkYXkoKSA+PSA1ID8gLy8gTMO2cmRhZyAwMDowMCAvIFPDtm5kYWcgMDA6MDA/XG4gICAgICBtLndlZWsoKSArIDEgOiAvLyBUaWxsaMO2ciBuw6RzdGEgdmVja2FcbiAgICAgIG0ud2VlaygpO1xufVxuXG4vKmV4cG9ydCBmdW5jdGlvbiBnZXRXZWVrTGltaXRzIChtOiBNb21lbnQpIHtcbiAgY29uc3QgY2xvbmVkU3dlZGlzaCA9IG0uY2xvbmUoKS5sb2NhbGUoJ3N2Jyk7XG4gIGNvbnN0IGxpbWl0cyA9IHtcbiAgICBub3RCZWZvcmU6IGNsb25lZFN3ZWRpc2guc3RhcnRPZignd2VlaycpLmFkZCgtMiwgJ2RheXMnKSxcbiAgICBub3RBZnRlcjogY2xvbmVkU3dlZGlzaC5zdGFydE9mKCd3ZWVrJykuYWRkKDUsICdkYXlzJylcbiAgfTtcbn1cbiovXG4iLCJpbXBvcnQgZXhlYyBmcm9tICcuL2V4ZWMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGJvbGQ6IHtcbiAgICBpY29uOiAnPGI+RjwvYj4nLFxuICAgIHRpdGxlOiAnRmV0c3RpbCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdib2xkJylcbiAgfSxcbiAgaXRhbGljOiB7XG4gICAgaWNvbjogJzxpPks8L2k+JyxcbiAgICB0aXRsZTogJ0t1cnNpdicsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpdGFsaWMnKVxuICB9LFxuICB1bmRlcmxpbmU6IHtcbiAgICBpY29uOiAnPHU+VTwvdT4nLFxuICAgIHRpdGxlOiAnVW5kZXJzdHJ1a2VuJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3VuZGVybGluZScpXG4gIH0sXG4gIHN0cmlrZXRocm91Z2g6IHtcbiAgICBpY29uOiAnPHN0cmlrZT5TPC9zdHJpa2U+JyxcbiAgICB0aXRsZTogJ1N0cnVrZW4nLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnc3RyaWtlVGhyb3VnaCcpXG4gIH0sXG4gIGhlYWRpbmcxOiB7XG4gICAgaWNvbjogJzxiPkg8c3ViPjE8L3N1Yj48L2I+JyxcbiAgICB0aXRsZTogJ1J1YnJpayAxJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMT4nKVxuICB9LFxuICBoZWFkaW5nMjoge1xuICAgIGljb246ICc8Yj5IPHN1Yj4yPC9zdWI+PC9iPicsXG4gICAgdGl0bGU6ICdSdWJyaWsgMicsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDI+JylcbiAgfSxcbiAgaGVhZGluZzM6IHtcbiAgICBpY29uOiAnPGI+SDxzdWI+Mzwvc3ViPjwvYj4nLFxuICAgIHRpdGxlOiAnUnVicmlrIDMnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgzPicpXG4gIH0sXG4gIHBhcmFncmFwaDoge1xuICAgIGljb246ICcmIzE4MjsnLFxuICAgIHRpdGxlOiAnUGFyYWdyYWYnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFA+JylcbiAgfSxcbiAgcXVvdGU6IHtcbiAgICBpY29uOiAnJiM4MjIwOyAmIzgyMjE7JyxcbiAgICB0aXRsZTogJ0NpdGF0JyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxCTE9DS1FVT1RFPicpXG4gIH0sXG4gIG9saXN0OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtbGlzdC1vbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxuICAgIHRpdGxlOiAnT3JkbmFkIGxpc3RhJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydE9yZGVyZWRMaXN0JylcbiAgfSxcbiAgdWxpc3Q6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1saXN0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXG4gICAgdGl0bGU6ICdQdW5rdGxpc3RhJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydFVub3JkZXJlZExpc3QnKVxuICB9LFxuICBjb2RlOiB7XG4gICAgaWNvbjogJyZsdDsvJmd0OycsXG4gICAgdGl0bGU6ICdQcm9ncmFta29kJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxQUkU+JylcbiAgfSxcbiAgbGluZToge1xuICAgIGljb246ICcmIzgyMTM7JyxcbiAgICB0aXRsZTogJ1bDpWdyw6R0IGxpbmplJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydEhvcml6b250YWxSdWxlJylcbiAgfSxcbiAgbGluazoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLWxpbmtcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcbiAgICB0aXRsZTogJ0luZm9nYSBsw6RuaycsXG4gICAgcmVzdWx0OiAoKSA9PiB7XG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KCdBbmdlIGzDpG5rZW5zIFVSTCcpXG4gICAgICBpZiAodXJsKSBleGVjKCdjcmVhdGVMaW5rJywgdXJsKVxuICAgIH1cbiAgfSxcbiAgaW1hZ2U6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcbiAgICB0aXRsZTogJ0luZm9nYSBiaWxkJyxcbiAgICBwcm9tcHRNc2c6ICdBbmdlIGJpbGRlbnMgVVJMJyxcbiAgICByZXN1bHQ6IChldiwgY29tcG9uZW50KSA9PiB7XG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KHRoaXMucHJvbXB0TXNnKVxuICAgICAgaWYgKHVybCkge1xuICAgICAgICAvL2V4ZWMoJ2luc2VydEltYWdlJywgdXJsKTtcbiAgICAgICAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgaW1nLnNyYyA9IHVybDtcbiAgICAgICAgaW1nLnRhYkluZGV4ID0gMTtcbiAgICAgICAgaW5zZXJ0RWxlbWVudChpbWcpO1xuICAgICAgICBpbWcub25mb2N1cyA9IGNvbXBvbmVudC5vbkZvY3VzO1xuICAgICAgICBpbWcub25ibHVyID0gY29tcG9uZW50Lm9uQmx1cjtcbiAgICAgICAgY29tcG9uZW50LnByb3BzLm9uQ2hhbmdlKGNvbXBvbmVudC5jb250ZW50RGl2LmlubmVySFRNTCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydEVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICB2YXIgc2VsLCByYW5nZTtcbiAgICBpZiAod2luZG93LmdldFNlbGVjdGlvbiAmJiAoc2VsID0gd2luZG93LmdldFNlbGVjdGlvbigpKS5yYW5nZUNvdW50KSB7XG4gICAgICAgIHJhbmdlID0gc2VsLmdldFJhbmdlQXQoMCk7XG4gICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICByYW5nZS5pbnNlcnROb2RlKGVsZW1lbnQpO1xuICAgICAgICAvLyBNb3ZlIHRoZSBjYXJldCBpbW1lZGlhdGVseSBhZnRlciB0aGUgaW5zZXJ0ZWQgc3BhblxuICAgICAgICByYW5nZS5zZXRTdGFydEFmdGVyKGVsZW1lbnQpO1xuICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcbiAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFJlcG8sIFJlcG9Db21tdW5pY2F0b3J9IGZyb20gJy4vcmVwbyc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBMaXN0T3B0aW9ucywgQmF0Y2hSdW5uZXIsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBEb2N1bWVudH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEtlZFJlcG9PcHRpb25zPFQgZXh0ZW5kcyBEb2N1bWVudD4ge1xuICBnZXRDbGllbnQ6ICgpPT5LZWRCYWNrZW5kQ2xpZW50O1xuICBnZXRRdWVyeU9wdGlvbnM6ICgpPT5Qcm9taXNlPExpc3RPcHRpb25zPjtcbiAgb3B0aW1pc3RpYzogYm9vbGVhbjtcbiAgdGFibGU6IHN0cmluZztcbiAgdXNlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgS2VkUmVwbzxUIGV4dGVuZHMgRG9jdW1lbnQ+IHtcbiAgbWVtOiBSZXBvPFQ+O1xuICBvcHRpb25zOiBLZWRSZXBvT3B0aW9uczxUPjtcbiAgXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IEtlZFJlcG9PcHRpb25zPFQ+KSB7XG4gICAgY29uc3Qge3RhYmxlLCBnZXRDbGllbnQsIGdldFF1ZXJ5T3B0aW9uc30gPSBvcHRpb25zO1xuICAgIHRoaXMubWVtID0gbmV3IFJlcG88VD4oe3F1ZXJ5OiBhc3luYyAoKT0+e1xuICAgICAgY29uc3QgcXVlcnlPcHRpb25zID0gYXdhaXQgZ2V0UXVlcnlPcHRpb25zKCk7XG4gICAgICByZXR1cm4gYXdhaXQgZ2V0Q2xpZW50KCkubGlzdDxUPih0YWJsZSwge1xuICAgICAgICAuLi5xdWVyeU9wdGlvbnMsXG4gICAgICAgIGNhY2hlQnVzdDogdGhpcy5nZXRDYWNoZUJ1c3QoKX0pO1xuICAgIH19KTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDYWNoZUJ1c3QoKSB7XG4gICAgY29uc3Qge3RhYmxlLCB1c2VyfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBjYWNoZUJ1c3QgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnY2FjaGUtYnVzdC0nICsgdGFibGUgKyAnLScgKyB1c2VyKTtcbiAgICByZXR1cm4gY2FjaGVCdXN0IHx8IHRoaXMucmVnZW5lcmF0ZUNhY2hlQnVzdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWdlbmVyYXRlQ2FjaGVCdXN0KCkge1xuICAgIGNvbnN0IHt0YWJsZSwgdXNlcn0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY2FjaGVCdXN0ID0gY3JlYXRlVVVJRCgpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdjYWNoZS1idXN0LScgKyB0YWJsZSArICctJyArIHVzZXIsIGNhY2hlQnVzdCk7XG4gICAgcmV0dXJuIGNhY2hlQnVzdDtcbiAgfVxuXG4gIGFzeW5jIHVwc2VydChpdGVtOiBULCB1cGRhdGVyOiAoaXRlbTogVCkgPT4gdm9pZCkge1xuICAgIGlmICghaXRlbS4kZXRhZykge1xuICAgICAgLy8gSXRlbXMgd2l0aG91dCAkZXRhZyBjYW5ub3QgYmUgcmV0cmlldmVkIGZyb20gc2VydmVyLCBzbyBpdCBzaG91bGQgYmUgaW5zZXJ0ZWQuXG4gICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgdXBkYXRlcih1cGRhdGVkSXRlbSk7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5pbnNlcnQoW3VwZGF0ZWRJdGVtXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIGhhdmUgYW4gJGV0YWcsIHNvIHdlIGNhbiBleHBlY3QgaXQgdG8gbGl2ZSBvbiB0aGUgc2VydmVyLlxuICAgICAgLy8gSG93ZXZlciwgdGFrZSBjYXJlIG9mIHRoZSB1bmxpa2VseSBzaXR1YXRpb24gdGhhdCBpdCB3YXMgZGVsZXRlZCBmcm9tIHNlcnZlcixcbiAgICAgIC8vIGFuZCBpZiBzbywgaW5zZXJ0IGl0IGFnYWluLlxuICAgICAgYXdhaXQgdGhpcy51cGRhdGUoW2l0ZW1dLCB1cGRhdGVyKS5jYXRjaChlID0+IHtcbiAgICAgICAgaWYgKGUubmFtZSA9PT0gXCJodHRwNDA0XCIpIHtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkSXRlbSA9IE9iamVjdC5hc3NpZ24oe30sIGl0ZW0pO1xuICAgICAgICAgIHVwZGF0ZXIodXBkYXRlZEl0ZW0pO1xuICAgICAgICAgIHJldHVybiB0aGlzLmluc2VydChbdXBkYXRlZEl0ZW1dKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB1cGRhdGUoaXRlbXM6IFRbXSwgdXBkYXRlcjogKGl0ZW06IFQpID0+IHZvaWQpIHtcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgY29uc3QgbW9kaWZpZWRJdGVtczogVFtdID0gaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgbWVtUmVwb0l0ZW0gPSB0aGlzLm1lbS5pdGVtcy5maW5kKGl0ID0+IGl0LmlkID09PSBpdGVtLmlkKTtcbiAgICAgIGl0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCBtZW1SZXBvSXRlbSB8fCBpdGVtKTtcbiAgICAgIHVwZGF0ZXIoaXRlbSk7XG4gICAgICByZXR1cm4gaXRlbTtcbiAgICB9KTtcbiAgICBpZiAob3B0aW1pc3RpYykgYXdhaXQgdGhpcy5tZW0udXBkYXRlKG1vZGlmaWVkSXRlbXMubWFwKHggPT4gT2JqZWN0LmFzc2lnbih7fSwgeCwgeyRtZXRhOiAndXBkYXRpbmcnfSkpKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZG8gKGJyID0+IG1vZGlmaWVkSXRlbXMuZm9yRWFjaChpdGVtID0+IGJyLnB1dCh0YWJsZSwgaXRlbSkpKVxuICAgIC5jYXRjaChlID0+IGUubmFtZSA9PT0gXCJodHRwNDA5XCIgPyAvLyBjb25mbGljdFxuICAgICAgLy8gR2V0IGEgZnJlc2ggdmVyc2lvbiBmcm9tIHNlcnZlcjpcbiAgICAgIGNsaWVudC5saXN0PFQ+KHRhYmxlLCB7aWRzOiBpdGVtcy5tYXAoaXRlbSA9PiBpdGVtLmlkKX0sIHtjYWNoZTogJ25vLWNhY2hlJ30pLnRoZW4oZnJlc2hJdGVtcyA9PiB7XG4gICAgICAgIC8vIFVwZGF0ZSBsb2NhbCB2ZXJzaW9uOlxuICAgICAgICBjb25zdCBtb2RpZmllZEl0ZW1zID0gZnJlc2hJdGVtcy5tYXAoZnJlc2hJdGVtID0+IHtcbiAgICAgICAgICAvLyBDbG9uZSB0aGUgZnJlc2ggaXRlbVxuICAgICAgICAgIGNvbnN0IG1vZGlmaWVkID0gT2JqZWN0LmFzc2lnbih7fSwgZnJlc2hJdGVtKTtcbiAgICAgICAgICAvLyBSZS1ydW4gdGhlIHVwZGF0ZXIgb24gdGhlIGNsb25lOlxuICAgICAgICAgIHVwZGF0ZXIobW9kaWZpZWQpO1xuICAgICAgICAgIHJldHVybiBtb2RpZmllZDtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFJlLWRvIHRoZSB0aGUgcHV0IG9wZXJhdGlvbiB0b3dhcmRzIHRoZSBzZXJ2ZXIuXG4gICAgICAgIHJldHVybiBjbGllbnQuZG8oYnIgPT4gbW9kaWZpZWRJdGVtcy5mb3JFYWNoKGl0ZW0gPT4gYnIucHV0KHRhYmxlLCBpdGVtKSkpO1xuICAgICAgfSkgOlxuICAgICAgLy8gT3RoZXIgdW5leHBlY3RlZCBlcnJvcjpcbiAgICAgIFByb21pc2UucmVzb2x2ZShvcHRpbWlzdGljICYmXG4gICAgICAgIHRoaXMubWVtLnVwZGF0ZShpdGVtcykpIC8vIFVuZG8gb3B0aW1pc3RpYyB1cGRhdGVcbiAgICAgIC50aGVuKCgpPT57XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTsgLy8gUmVqZWN0IHdpdGggdGhlIGVycm9yIG5vIG1hdHRlci5cbiAgICAgIH0pKTtcbiAgICB0aGlzLnJlZ2VuZXJhdGVDYWNoZUJ1c3QoKTtcbiAgICBtb2RpZmllZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBpdGVtLiRldGFnID0gcmVzLm5ld0V0YWdzW2l0ZW0uaWRdO1xuICAgICAgaXRlbS4kbWV0YSA9IHVuZGVmaW5lZDtcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLm1lbS51cGRhdGUobW9kaWZpZWRJdGVtcyk7IC8vIEVuc3VyZXMgbmV3IGV0YWcgaXMgaXMgYXBwbGllZCBvbiBuZXh0IGFjdGlvbi5cbiAgfVxuXG4gIHN0cmlwR3JhcGhzIChpdGVtczogVFtdLCBncmFwaHM6IHN0cmluZ1tdKSB7XG4gICAgcmV0dXJuIGl0ZW1zLm1hcChpdGVtID0+IHtcbiAgICAgIGNvbnN0IGNsb25lID0gT2JqZWN0LmFzc2lnbih7fSwgaXRlbSk7XG4gICAgICBncmFwaHMuZm9yRWFjaChncmFwaCA9PiB7XG4gICAgICAgIGlmIChpdGVtW2dyYXBoXSkge1xuICAgICAgICAgIGNsb25lW2dyYXBoXSA9IChpdGVtW2dyYXBoXSBhcyB7aWQ6c3RyaW5nfVtdKS5tYXAgKGRvYyA9PiAoe2lkOiBkb2MuaWR9KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgaW5zZXJ0KGl0ZW1zOiBUW10pIHtcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZSwgZ2V0UXVlcnlPcHRpb25zfSA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBjbGllbnQgPSBnZXRDbGllbnQoKTtcbiAgICBjb25zdCBxdWVyeU9wdGlvbnMgPSBhd2FpdCBnZXRRdWVyeU9wdGlvbnMoKTtcbiAgICBjb25zdCBncmFwaHMgPSBbXS5jb25jYXQocXVlcnlPcHRpb25zLmluY2x1ZGUpO1xuICAgIC8vIEdpdmUgSURzIHRvIGVhY2ggaXRlbTpcbiAgICBpdGVtcyA9IGl0ZW1zLm1hcChpdGVtID0+IGl0ZW0uaWQgPyBpdGVtIDogT2JqZWN0LmFzc2lnbih7fSwgaXRlbSwge2lkOiBjcmVhdGVVVUlEKCl9KSk7XG4gICAgY29uc3Qgc3RyaXBwZWQgPSB0aGlzLnN0cmlwR3JhcGhzKGl0ZW1zLCBncmFwaHMpO1xuICAgIGlmIChvcHRpbWlzdGljKSBhd2FpdCB0aGlzLm1lbS5pbnNlcnQoc3RyaXBwZWQubWFwKHggPT4gT2JqZWN0LmFzc2lnbih7fSwgeCwgeyRtZXRhOiAnYWRkaW5nJ30pKSk7XG4gICAgY29uc3QgYnIgPSBuZXcgQmF0Y2hSdW5uZXIoKTtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc3RyaXBwZWQpIHtcbiAgICAgIC8vIEFsc28gYWRkIGxpbmtzIHRvIGFsbCBmb3JlaWduIHJlbGF0ZWQgaXRlbXM6XG4gICAgICBmb3IgKGNvbnN0IGdyYXBoIG9mIGdyYXBocykge1xuICAgICAgICBjb25zdCBmb3JlaWduSXRlbXM6IERvY3VtZW50W10gPSBpdGVtW2dyYXBoXTtcbiAgICAgICAgaWYgKGZvcmVpZ25JdGVtcykge1xuICAgICAgICAgIGZvcmVpZ25JdGVtcy5mb3JFYWNoKGRvYyA9PiB7XG4gICAgICAgICAgICBici5saW5rMih0YWJsZSwgaXRlbS5pZCwgZ3JhcGgsIGRvYy5pZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyLmFkZCh0YWJsZSwgaXRlbSk7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGNsaWVudC5iYXRjaChici5tdXRhdGlvblJlcXVlc3RzKS5jYXRjaChlID0+IHtcbiAgICAgIGlmIChvcHRpbWlzdGljKSB0aGlzLm1lbS5kZWxldGUoaXRlbXMubWFwKGl0ZW0gPT4gaXRlbS5pZCkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgIH0pXG4gICAgdGhpcy5yZWdlbmVyYXRlQ2FjaGVCdXN0KCk7XG4gICAgaXRlbXMuZm9yRWFjaChpdGVtID0+IGl0ZW0uJGV0YWcgPSByZXMubmV3RXRhZ3NbaXRlbS5pZF0pO1xuICAgIGlmIChvcHRpbWlzdGljKVxuICAgICAgYXdhaXQgdGhpcy5tZW0udXBkYXRlKGl0ZW1zKTsgLy8gVXBkYXRlIHdpdGggbmV3ICRldGFnLlxuICAgIGVsc2VcbiAgICAgIGF3YWl0IHRoaXMubWVtLmluc2VydChpdGVtcyk7XG4gIH1cblxuICBhc3luYyBkZWxldGUgKGlkczogc3RyaW5nW10pIHtcbiAgICBjb25zdCB7Z2V0Q2xpZW50LCBvcHRpbWlzdGljLCB0YWJsZX0gPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgY2xpZW50ID0gZ2V0Q2xpZW50KCk7XG4gICAgaWYgKG9wdGltaXN0aWMpIGF3YWl0IHRoaXMubWVtLnVwZGF0ZShpZHNcbiAgICAgIC5tYXAoaWQgPT4gdGhpcy5tZW0uaXRlbXMuZmluZCh4ID0+IHguaWQgPT09IGlkKSlcbiAgICAgIC5maWx0ZXIoeCA9PiB4KVxuICAgICAgLm1hcCh4ID0+IE9iamVjdC5hc3NpZ24oe30sIHgsIHskbWV0YTogJ2RlbGV0aW5nJ30pKSk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgY2xpZW50LmRvIChiciA9PiBpZHMuZm9yRWFjaChpZCA9PiBici5kZWxldGUodGFibGUsIGlkKSkpLmNhdGNoKGFzeW5jIGUgPT4ge1xuICAgICAgaWYgKG9wdGltaXN0aWMpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5tZW0udXBkYXRlKGlkc1xuICAgICAgICAgIC5tYXAoaWQgPT4gdGhpcy5tZW0uaXRlbXMuZmluZCh4ID0+IHguaWQgPT09IGlkKSlcbiAgICAgICAgICAuZmlsdGVyKHggPT4geClcbiAgICAgICAgICAubWFwKHggPT4ge1xuICAgICAgICAgICAgeCA9IE9iamVjdC5hc3NpZ24oe30sIHgpO1xuICAgICAgICAgICAgZGVsZXRlIHguJG1ldGE7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBlO1xuICAgIH0pO1xuICAgIHRoaXMucmVnZW5lcmF0ZUNhY2hlQnVzdCgpO1xuICAgIGF3YWl0IHRoaXMubWVtLmRlbGV0ZShpZHMpO1xuICB9XG59XG4iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuXG5jb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG5cbnR5cGUgSFRNTFBvbGljeSA9IHtbdGFnTmFtZUxvd2VyOiBzdHJpbmddOiB7W2F0dHJpYnV0ZUxvd2VyOiBzdHJpbmddOiBib29sZWFufX07XG5cbi8qKiBUYWdzIC8gQXR0cmlidXRlcyBXaGl0ZWxpc3RcbiAqIFxuICovXG5jb25zdCBIVE1MX1dBU0hfUE9MSUNZOiBIVE1MUG9saWN5ID0ge1xuICBiOiB7fSwgIC8vIGJvbGRcbiAgaToge30sICAvLyBpdGFsaWNcbiAgcDoge30sICAvLyBwYXJhZ3JhcGhcbiAgdToge30sICAvLyB1bmRlcmxpbmVcbiAgc3RyaWtlOiB7fSwgLy8gc3RyaWtlLXRocm91Z2hcbiAgcHJlOiB7fSwgLy8gdW5mb3JtYXR0ZWRcbiAgaDE6IHt9LCAvLyBoZWFkaW5nIDFcbiAgaDI6IHt9LCAvLyBoZWFkaW5nIDJcbiAgaDM6IHt9LCAvLyBoZWFkaW5nIDNcbiAgaDQ6IHt9LCAvLyBoZWFkaW5nIDRcbiAgaDU6IHt9LCAvLyBoZWFkaW5nIDVcbiAgaW1nOiB7c3JjOiB0cnVlLCBjbGFzczogdHJ1ZSwgc3R5bGU6IHRydWUsIHRhYmluZGV4OiB0cnVlfSwgLy8gaW1hZ2UuIFdlIHNldCBzdHlsZSBhbmQgdGFiaW5kZXggb3Vyc2VsdmVzLiBBY2NlcHQgdGhhdC5cbiAgYToge2hyZWY6IHRydWUsIHRhcmdldDogdHJ1ZSwgdGFiaW5kZXg6IHRydWV9LCAvLyBsaW5rXG4gIHVsOiB7fSwgLy8gVW5vcmRlcmVkIGxpc3RcbiAgb2w6IHt9LCAvLyBPcmRlcmVkIGxpc3RcbiAgbGk6IHt9LCAvLyBsaXN0IGl0ZW1cbiAgaHI6IHt9LCAvLyBIb3Jpem9udGFsIHJ1bGVcbiAgYnI6IHt9LCAvLyBCcmVhayBsaW5lXG4gIGRpdjoge30sLy8gT2Ygc29tZSByZWFzb24sIGRpdnMgYXJlIHNvbWV0aW1lcyBpbnNlcnRlZCB3aGVuIHByZXNzaW5nIEVOVEVSIGluIHRoZSB3eXNpd3lnIGVkaXRvci5cbiAgc3Bhbjoge30sLy8gU3BhbnMgYXJlIGhhcm1sZXNzLCBqdXN0IHJlbW92ZSB0aGVpciBzdHlsZSBhbmQgb3RoZXIgYXR0cmlidXRlcyBhbmQgSSBmZWVsIGdyZWF0LlxuICAvLyB0YWJsZSB0YWdzOlxuICB0YWJsZToge2JvcmRlcjogdHJ1ZX0sXG4gIHRib2R5OiB7fSxcbiAgdGhlYWQ6IHt9LFxuICB0Zm9vdDoge30sXG4gIHRyOiB7fSxcbiAgdGQ6IHtoZWFkZXJzOiB0cnVlLCBjb2xzcGFuOiB0cnVlLCByb3dzcGFuOiB0cnVlfSxcbiAgdGg6IHthYmJyOiB0cnVlLCBoZWFkZXJzOiB0cnVlLCBzY29wZTogdHJ1ZSwgc29ydGVkOiB0cnVlLCBjb2xzcGFuOiB0cnVlLCByb3dzcGFuOiB0cnVlfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHdhc2hIdG1sIChodG1sOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpO1xuICBjb25zdCB7Y2hpbGROb2Rlc30gPSBkb2MuYm9keTtcbiAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHdhc2hOb2RlKGNoaWxkTm9kZXMuaXRlbShpKSkpIHtcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkID9cbiAgICBkb2MuYm9keS5pbm5lckhUTUwgOlxuICAgIGh0bWw7IC8vIEJ5IHJldHVybmluZyB0aGUgb3JpZ2luYWwgSFRNTCBzdHJpbmcsIHdlIHNwYXJlIHRoZSB1c2VyIGZyb20gcmVmcmVzaGluZyB0aGUgZWRpdCBhcmVhLFxuICAgICAgICAgIC8vIHdoaWNoIHdvdWxkIG90aGVyd2lzZSBwdXQgdGhlIGN1cnNvciBhdCB0aGUgdG9wLCBsb3NpbmcgdGhlIHBvc2l0aW9uIHdoZXJlIHVzZXIgd2hlcmUuXG59XG5cbmZ1bmN0aW9uIHdhc2hOb2RlKG5vZGU6IE5vZGUgfCBFbGVtZW50IHwgSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XG4gIGlmIChpc0VsZW1lbnQobm9kZSkpIHtcbiAgICBpZiAod2FzaEVsZW1lbnQobm9kZSkpIHtcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHdhc2hDaGlsZE5vZGVzKG5vZGUpKSB7XG4gICAgbW9kaWZpZWQgPSB0cnVlO1xuICB9XG4gIHJldHVybiBtb2RpZmllZDtcbn1cblxuZnVuY3Rpb24gd2FzaENoaWxkTm9kZXMobm9kZTogTm9kZSkge1xuICBsZXQgbW9kaWZpZWQgPSBmYWxzZTtcbiAgY29uc3Qge2NoaWxkTm9kZXN9ID0gbm9kZTtcbiAgZm9yIChsZXQgaT0wOyBpPGNoaWxkTm9kZXMubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAod2FzaE5vZGUoY2hpbGROb2Rlcy5pdGVtKGkpKSkge1xuICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWQ7XG59IFxuXG4vKiogUmVwbGFjZSBhbiBlbGVtZW50IHdpdGggaXRzIGNoaWxkIG5vZGVzLlxuICogXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZU1pZGRsZUVsZW1lbnQoZWxlbWVudDogRWxlbWVudCkge1xuICBjb25zdCB7Y2hpbGROb2Rlc30gPSBlbGVtZW50O1xuICBmb3IgKGxldCBpPTA7IGk8Y2hpbGROb2Rlcy5sZW5ndGg7ICsraSkge1xuICAgIGVsZW1lbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGROb2Rlcy5pdGVtKGkpLCBlbGVtZW50KTtcbiAgfVxuICBlbGVtZW50LnJlbW92ZSgpO1xufVxuXG5mdW5jdGlvbiB3YXNoRWxlbWVudChlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbiB7XG4gIGNvbnN0IHBvbGljeSA9IGVsZW1lbnQudGFnTmFtZSAmJiBIVE1MX1dBU0hfUE9MSUNZW2VsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgaWYgKCFwb2xpY3kpIHtcbiAgICBjb25zb2xlLndhcm4oXCJXeXNpd3lnOiBub3QgYWxsb3dlZCB0YWdcIiwgZWxlbWVudC50YWdOYW1lKTtcbiAgICB3YXNoQ2hpbGROb2RlcyhlbGVtZW50KTtcbiAgICByZW1vdmVNaWRkbGVFbGVtZW50KGVsZW1lbnQpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICBmb3IgKGxldCBpPTA7IGk8ZWxlbWVudC5hdHRyaWJ1dGVzLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgYXR0ciA9IGVsZW1lbnQuYXR0cmlidXRlcy5pdGVtKGkpO1xuICAgIGNvbnN0IGFsbG93ZWQgPSBhdHRyLm5hbWUgJiYgISFwb2xpY3lbYXR0ci5uYW1lLnRvTG93ZXJDYXNlKCldO1xuICAgIGlmICghYWxsb3dlZCkge1xuICAgICAgbW9kaWZpZWQgPSB0cnVlO1xuICAgICAgY29uc29sZS53YXJuKFwiV3lzaXd5Zzogbm90IGFsbG93ZWQgYXR0cmlidXRlXCIsIGF0dHIubmFtZSwgXCJUYWc6IFwiLCBlbGVtZW50LnRhZ05hbWUpO1xuICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ci5uYW1lKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZTogTm9kZSkgOiBub2RlIGlzIEVsZW1lbnQge1xuICByZXR1cm4gISEobm9kZSBhcyBFbGVtZW50KS50YWdOYW1lO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGV4ZWMgZnJvbSAnLi9leGVjJztcbmltcG9ydCB7d2FzaEh0bWx9IGZyb20gJy4vd2FzaC1odG1sJztcbmltcG9ydCBpbWFnZUVkaXRBY3Rpb25zIGZyb20gJy4vaW1hZ2UtZWRpdC1hY3Rpb25zJztcbmltcG9ydCBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uIHtcbiAgbmFtZT86IHN0cmluZztcbiAgaWNvbjogc3RyaW5nO1xuICB0aXRsZTogc3RyaW5nO1xuICBwcm9tcHRNc2c/OiBzdHJpbmc7XG4gIHJlc3VsdDogKGV2OiBSZWFjdC5Nb3VzZUV2ZW50PEhUTUxCdXR0b25FbGVtZW50PiwgY29tcG9uZW50OiBXeXNpd3lnKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGh0bWw6IHN0cmluZztcbiAgb25DaGFuZ2U/OiAoaHRtbDogc3RyaW5nKSA9PiB2b2lkO1xuICByZXBvcnROdW1DaGFycz86IChudW1DaGFyczogbnVtYmVyKSA9PiB2b2lkO1xuICBtYXhDaGFycz86IG51bWJlcjtcbiAgZGVmYXVsdEFjdGlvbnM/OiB7W25hbWU6IHN0cmluZ106IEFjdGlvbn07XG4gIGFjdGlvbnM/OiAoUGFydGlhbDxBY3Rpb24+IHwgc3RyaW5nKVtdO1xuICByZWFkT25seT86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGZvY3VzUmVjdDogQ2xpZW50UmVjdCB8IG51bGw7XG59XG5cbmNvbnN0IGNsYXNzZXMgPSB7XG4gIGFjdGlvbmJhcjogJ3d5c2l3eWctYWN0aW9uYmFyJyxcbiAgYnV0dG9uOiAnd3lzaXd5Zy1idXR0b24nLFxuICBjb250ZW50OiAnd3lzaXd5Zy1jb250ZW50JyxcbiAgZm9jdXNyZWN0OiAnd3lzaXd5Zy1mb2N1c3JlY3QnLFxuICBmb2N1c3BvaW50OiAnd3lzaXd5Zy1mb2N1c3BvaW50JyxcbiAgcmVhZG9ubHlDb250ZW50OiAnd3lzaXd5Zy1jb250ZW50IHJlYWRvbmx5J1xufVxuXG5leHBvcnQgY2xhc3MgV3lzaXd5ZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb250ZW50RGl2OiBIVE1MRGl2RWxlbWVudDtcbiAgZm9jdXNSZWN0RGl2OiBIVE1MRGl2RWxlbWVudDtcbiAgZm9jdXNFbGVtOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gIGNvcm5lcjogc3RyaW5nO1xuICByZXNpemVTdGFydFg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7Zm9jdXNSZWN0OiBudWxsfTtcbiAgICB0aGlzLm9uRm9jdXMgPSB0aGlzLm9uRm9jdXMuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQmx1ciA9IHRoaXMub25CbHVyLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1vdXNlRG93biA9IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VNb3ZlID0gdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZVVwID0gdGhpcy5vbk1vdXNlVXAuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5yZWFkT25seSkge1xuICAgICAgQXJyYXkuZnJvbSh0aGlzLmNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbChcImltZyxhXCIpKS5tYXAoZWxlbSA9PiAoZWxlbSBhcyAoSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50KSkpXG4gICAgICAuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgICAgZWxlbS50YWJJbmRleCA9IDE7XG4gICAgICAgIGVsZW0ub25mb2N1cyA9IHRoaXMub25Gb2N1cztcbiAgICAgICAgZWxlbS5vbmJsdXIgPSB0aGlzLm9uQmx1ciBhcyBhbnk7XG4gICAgICB9KTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3lzaXd5Zy1jb250ZW50XCIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5yZXBvcnROdW1DaGFycykge1xuICAgICAgdGhpcy5wcm9wcy5yZXBvcnROdW1DaGFycyh0aGlzLmNvbnRlbnREaXYgJiYgdGhpcy5jb250ZW50RGl2LmlubmVyVGV4dCAmJiB0aGlzLmNvbnRlbnREaXYuaW5uZXJUZXh0Lmxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIEFycmF5LmZyb20odGhpcy5jb250ZW50RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWcsYVwiKSkubWFwKGVsZW0gPT4gKGVsZW0gYXMgKEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MQW5jaG9yRWxlbWVudCkpKVxuICAgIC5mb3JFYWNoKGVsZW0gPT4ge1xuICAgICAgZWxlbS50YWJJbmRleCA9IDE7XG4gICAgICBlbGVtLm9uZm9jdXMgPSB0aGlzLm9uRm9jdXM7XG4gICAgICBlbGVtLm9uYmx1ciA9IHRoaXMub25CbHVyIGFzIGFueTtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5wcm9wcy5yZXBvcnROdW1DaGFycykge1xuICAgICAgdGhpcy5wcm9wcy5yZXBvcnROdW1DaGFycyh0aGlzLmNvbnRlbnREaXYgJiYgdGhpcy5jb250ZW50RGl2LmlubmVyVGV4dCAmJiB0aGlzLmNvbnRlbnREaXYuaW5uZXJUZXh0Lmxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHM6IFByb3BzLCBuZXh0U3RhdGU6IFN0YXRlKSB7XG4gICAgLy90aGlzLmNvbnRlbnREaXYub25mb2N1cyA9IHRoaXMub25Gb2N1cztcbiAgICAvL3RoaXMuY29udGVudERpdi5vbmJsdXIgPSB0aGlzLm9uQmx1cjtcbiAgICByZXR1cm4gIXRoaXMuY29udGVudERpdiB8fFxuICAgICAgbmV4dFN0YXRlICE9IHRoaXMuc3RhdGUgfHxcbiAgICAgIG5leHRQcm9wcy5yZWFkT25seSAhPT0gdGhpcy5wcm9wcy5yZWFkT25seSB8fFxuICAgICAgd2FzaEh0bWwobmV4dFByb3BzLmh0bWwpICE9PSB3YXNoSHRtbCh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcbiAgfVxuXG4gIHRyaWdnZXJPbkNoYW5nZShodG1sOiBzdHJpbmcpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmIHRoaXMucHJvcHMub25DaGFuZ2Uod2FzaEh0bWwoaHRtbCkpO1xuICB9XG5cbiAgb25Gb2N1cyhldjogRm9jdXNFdmVudCkge1xuICAgIGNvbnN0IGVsZW0gPSBldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKCFlbGVtIHx8ICFlbGVtLnRhZ05hbWUpIHJldHVybjtcbiAgICBpZiAoZWxlbS50YWdOYW1lICE9PSAnSU1HJyAmJiBlbGVtLnRhZ05hbWUgIT09ICdBJykgcmV0dXJuO1xuICAgIGNvbnN0IGNvbnRlbnRQYXJlbnQgPSB0aGlzLmNvbnRlbnREaXYucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IHtcbiAgICAgIGZvY3VzUmVjdDogZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QoY29udGVudFBhcmVudCwgZWxlbSksXG4gICAgfVxuICAgIHN3aXRjaCAoZWxlbS50YWdOYW1lKSB7XG4gICAgICBjYXNlICdBJzpcbiAgICAgIGNhc2UgJ0lNRyc6XG5cbiAgICAgIGRlZmF1bHQ6IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICB0aGlzLmZvY3VzRWxlbSA9IGVsZW07XG4gIH1cblxuICBvbkJsdXIoZXY6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSB7XG4gICAgLyppZiAoZXYucmVsYXRlZFRhcmdldCkge1xuICAgICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IGV2LnJlbGF0ZWRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBpZiAocmVsYXRlZFRhcmdldC5jbGFzc05hbWUgJiYgcmVsYXRlZFRhcmdldC5jbGFzc05hbWUuc3BsaXQoJyAnKS5pbmRleE9mKGNsYXNzZXMuYnV0dG9uKSA+PSAwKSB7XG4gICAgICAgIC8vIEEgaW1hZ2UgYWN0aW9uIGJ1dHRvbiB3YXMgcHJlc3NlZFxuICAgICAgICBzZXRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0qL1xuICAgIGlmICgoZXYudGFyZ2V0ID09PSB0aGlzLmZvY3VzRWxlbSAmJiBldi5yZWxhdGVkVGFyZ2V0ICE9PSB0aGlzLmZvY3VzUmVjdERpdikgfHxcbiAgICAgIGV2LnRhcmdldCA9PT0gdGhpcy5mb2N1c1JlY3REaXYpXG4gICAge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7Zm9jdXNSZWN0OiBudWxsfSk7XG4gICAgfVxuICB9XG5cbiAgbWFrZUNsaWNrYWJsZShlbGVtOiBIVE1MRWxlbWVudCkge1xuICAgICBlbGVtLnRhYkluZGV4ID0gMTtcbiAgfVxuXG4gIG9uTW91c2VEb3duKGV2KSB7XG4gICAgaWYgKChldi50YXJnZXQuY2xhc3NOYW1lIHx8IFwiXCIpLnNwbGl0KCcgJykuaW5kZXhPZihjbGFzc2VzLmZvY3VzcG9pbnQpID49IDApIHtcbiAgICAgIGNvbnN0IGNvcm5lciA9IHRoaXMuZ2V0UmVjdENvcm5lcihldik7XG4gICAgICB0aGlzLmNvcm5lciA9IGNvcm5lcjtcbiAgICAgIHRoaXMucmVzaXplU3RhcnRYID0gZXYuY2xpZW50WDtcbiAgICB9XG4gIH1cblxuICBvbk1vdXNlTW92ZShldjogTW91c2VFdmVudCkge1xuICAgIGlmICh0aGlzLmNvcm5lciAmJiB0aGlzLnN0YXRlLmZvY3VzUmVjdCAmJiB0aGlzLmZvY3VzRWxlbSkge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIFRPRE86IFLDpGtuYSB1dCBiYXNlcmF0IHDDpSB0aGlzLmNvcm5lciBodXIgYmlsZGVucyBzdG9ybGVrIGJvcmRlIMOkbmRyYXMuXG4gICAgICAvLyBMZXRhIHVwcCBiaWxkZW4gcGVyIElEIGZyw6VuIHRoaXMuY29udGVudERpdlxuICAgICAgLy8gU8OkdHQgRElWOmVucyBzdHlsZSBhdHRyaWJ1dCB3aWR0aCB0aWxsIG55IHdpZHRoLlxuICAgICAgLy8gT20gRElWOmVuIHJlZGFuIGhhZGUgaGVpZ2h0LCBzw6R0dCBueSBoZWlnaHQgbWVkIHNhbW1hIGFzcGVjdCByYXRpbyBzb20gaW5uYW4sXG4gICAgICAvLyBhbm5hcnMsIHPDpHR0IGludGUgaGVpZ2h0IGFsbHMgKGVsbGVyIG3DtmpsaWd0dmlzIHRpbGwgYXV0bykpXG4gICAgICBjb25zdCBmb2N1c1JlY3QgPSB0aGlzLmZvY3VzUmVjdERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmIChmb2N1c1JlY3Qud2lkdGggPCAzMikgcmV0dXJuO1xuICAgICAgLy9jb25zdCBjdXJyZW50V2lkdGggPSBmb2N1c1JlY3Qud2lkdGg7XG4gICAgICAvL2NvbnN0IGN1cnJlbnRIZWlnaHQgPSBmb2N1c1JlY3QuaGVpZ2h0O1xuICAgICAgLy9jb25zdCBoYXNIZWlnaHRTdHlsZSA9ICF0aGlzLmZvY3VzRWxlbS5zdHlsZS5oZWlnaHQgfHwgdGhpcy5mb2N1c0VsZW0uc3R5bGUuaGVpZ2h0ID09PSBcImF1dG9cIjtcbiAgICAgIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoMzIsIHRoaXMuY29ybmVyLmVuZHNXaXRoKCdsJykgP1xuICAgICAgICBmb2N1c1JlY3Qud2lkdGggKyAodGhpcy5yZXNpemVTdGFydFggLSBldi5jbGllbnRYKSA6XG4gICAgICAgIC8vZm9jdXNSZWN0LnJpZ2h0IC0gZXYuY2xpZW50WCA6XG4gICAgICAgIGZvY3VzUmVjdC53aWR0aCAtICh0aGlzLnJlc2l6ZVN0YXJ0WCAtIGV2LmNsaWVudFgpKTtcbiAgICAgIHRoaXMucmVzaXplU3RhcnRYID0gZXYuY2xpZW50WDtcbiAgICAgICAgLy9ldi5jbGllbnRYIC0gZm9jdXNSZWN0LmxlZnQ7XG4gICAgICBjb25zdCBmYWN0b3IgPSBuZXdXaWR0aCAvIGZvY3VzUmVjdC53aWR0aDtcbiAgICAgIGNvbnN0IG5ld0hlaWdodCA9IGZvY3VzUmVjdC5oZWlnaHQgKiBmYWN0b3I7XG4gICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgXCJweFwiO1xuICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgXCJweFwiO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzUmVjdDogZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QodGhpcy5jb250ZW50RGl2LnBhcmVudEVsZW1lbnQsIHRoaXMuZm9jdXNFbGVtKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VVcChldikge1xuICAgIGlmICh0aGlzLmNvcm5lciAmJiB0aGlzLnN0YXRlLmZvY3VzUmVjdCAmJiB0aGlzLmZvY3VzRWxlbSkge1xuICAgICAgdGhpcy5jb3JuZXIgPSBudWxsO1xuICAgICAgdGhpcy50cmlnZ2VyT25DaGFuZ2UodGhpcy5jb250ZW50RGl2LmlubmVySFRNTCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0UmVjdENvcm5lcihldikge1xuICAgIGZvciAoY29uc3QgY2xhc3NOYW1lIG9mIChldi50YXJnZXQuY2xhc3NOYW1lIHx8ICcnKS5zcGxpdCgnICcpKSB7XG4gICAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgICBjYXNlICdmcHVsJzpcbiAgICAgICAgICByZXR1cm4gJ3VsJztcbiAgICAgICAgY2FzZSAnZnB1cic6XG4gICAgICAgICAgcmV0dXJuICdmcHVyJztcbiAgICAgICAgY2FzZSAnZnBscic6XG4gICAgICAgICAgcmV0dXJuICdscic7XG4gICAgICAgIGNhc2UgJ2ZwbGwnOlxuICAgICAgICAgIHJldHVybiAnbGwnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGV4ZWNJbWFnZUVkaXRBY3Rpb24gKGNtZDogc3RyaW5nKSB7XG4gICAgLy9jb25zb2xlLmxvZyhjbWQpO1xuICAgIGlmICghdGhpcy5mb2N1c0VsZW0pIHJldHVybjtcbiAgICAvL2NvbnNvbGUubG9nKFwiZG9pbmcgaXRcIik7XG4gICAgc3dpdGNoIChjbWQpIHtcbiAgICAgIGNhc2UgJ2Zsb2F0LWxlZnQnOlxuICAgICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS5jc3NGbG9hdCA9ICdsZWZ0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdmbG9hdC1yaWdodCc6XG4gICAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLmNzc0Zsb2F0ID0gJ3JpZ2h0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1bmZsb2F0JzpcbiAgICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuY3NzRmxvYXQgPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMudHJpZ2dlck9uQ2hhbmdlKHRoaXMuY29udGVudERpdi5pbm5lckhUTUwpO1xuICAgIHRoaXMuc2V0U3RhdGUoe2ZvY3VzUmVjdDogZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QodGhpcy5jb250ZW50RGl2LnBhcmVudEVsZW1lbnQsIHRoaXMuZm9jdXNFbGVtKX0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGRlZmF1bHRBY3Rpb25zID0gdGhpcy5wcm9wcy5kZWZhdWx0QWN0aW9ucyB8fCBhY3Rpb25zO1xuICAgIGxldCBhY3Rpb25zVG9Vc2UgPSB0aGlzLnByb3BzLmFjdGlvbnMgPyB0aGlzLnByb3BzLmFjdGlvbnMubWFwKGFjdGlvbiA9PlxuICAgICAgdHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycgP1xuICAgICAgICBkZWZhdWx0QWN0aW9uc1thY3Rpb25dIDpcbiAgICAgICAgZGVmYXVsdEFjdGlvbnNbYWN0aW9uLm5hbWVdID9cbiAgICAgICAgICB7IC4uLmRlZmF1bHRBY3Rpb25zW2FjdGlvbi5uYW1lXSwgLi4uYWN0aW9uIH0gOlxuICAgICAgICAgIGFjdGlvbilcbiAgICA6IE9iamVjdC5rZXlzKGRlZmF1bHRBY3Rpb25zKS5tYXAoYWN0aW9uID0+IGRlZmF1bHRBY3Rpb25zW2FjdGlvbl0pO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuZm9jdXNSZWN0KSB7XG4gICAgICBhY3Rpb25zVG9Vc2UgPSBhY3Rpb25zVG9Vc2UuY29uY2F0KGltYWdlRWRpdEFjdGlvbnMoY21kID0+IHRoaXMuZXhlY0ltYWdlRWRpdEFjdGlvbihjbWQpKSk7XG4gICAgfVxuXG4gICAgY29uc3Qge2ZvY3VzUmVjdH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtyZWFkT25seSwgcmVwb3J0TnVtQ2hhcnMsIG1heENoYXJzfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfT5cbiAgICAgIHshcmVhZE9ubHkgJiYgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuYWN0aW9uYmFyfT5cbiAgICAgICAge2FjdGlvbnNUb1VzZS5tYXAoKGFjdGlvbiwgaWR4KSA9PlxuICAgICAgICAgIDxidXR0b24ga2V5PXtpZHh9IGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259XG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogYWN0aW9uLmljb259fVxuICAgICAgICAgICAgdGl0bGU9e2FjdGlvbi50aXRsZX1cbiAgICAgICAgICAgIG9uTW91c2VEb3duPXtldj0+e2FjdGlvbi5yZXN1bHQoZXYsIHRoaXMpfX1cbiAgICAgICAgICAgIG9uTW91c2VVcD17ZXY9PnNldFRpbWVvdXQoKCk9PnRoaXMuY29udGVudERpdi5mb2N1cygpLCAxMCl9XG4gICAgICAgICAgLz4pfVxuICAgICAgPC9kaXY+fVxuICAgICAgPGRpdiBjbGFzc05hbWU9e3JlYWRPbmx5ID8gY2xhc3Nlcy5yZWFkb25seUNvbnRlbnQgOiBjbGFzc2VzLmNvbnRlbnR9IHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZScsIHRvcDogMCwgbGVmdDogMH19PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXRvclwiXG4gICAgICAgICAgcmVmPXtkaXYgPT4gdGhpcy5jb250ZW50RGl2ID0gZGl2fVxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiB3YXNoSHRtbCh0aGlzLnByb3BzLmh0bWwpfX1cbiAgICAgICAgICBjb250ZW50RWRpdGFibGU9eyFyZWFkT25seX1cbiAgICAgICAgICBvblBhc3RlPXtldiA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKG1heENoYXJzKSkge1xuICAgICAgICAgICAgICBjb25zdCB7dGFyZ2V0LCBjdXJyZW50VGFyZ2V0fSA9IGV2O1xuICAgICAgICAgICAgICAvL2NvbnN0IHRleHRCZWluZ092ZXJ3cml0dGVuID0gKHRhcmdldCBhcyBhbnkpLmlubmVyVGV4dCB8fCBcIlwiO1xuICAgICAgICAgICAgICBjb25zdCBlZGl0b3JUZXh0ID0gKGN1cnJlbnRUYXJnZXQgJiYgY3VycmVudFRhcmdldC5pbm5lclRleHQpIHx8IFwiXCI7XG4gICAgICAgICAgICAgIGNvbnN0IHRleHRCZWluZ1Bhc3RlZCA9IGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikgfHwgXCJcIjtcbiAgICAgICAgICAgICAgaWYgKGVkaXRvclRleHQubGVuZ3RoICsgdGV4dEJlaW5nUGFzdGVkLmxlbmd0aCA+IG1heENoYXJzKSB7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgb25LZXlVcD17cmVwb3J0TnVtQ2hhcnMgPyBldiA9PiB7XG4gICAgICAgICAgICBjb25zdCB7aW5uZXJUZXh0fSA9IChldi50YXJnZXQgYXMgYW55KTtcbiAgICAgICAgICAgIHJlcG9ydE51bUNoYXJzKGlubmVyVGV4dCA/IGlubmVyVGV4dC5sZW5ndGggOiBOYU4pO1xuICAgICAgICAgIH0gOiBudWxsfVxuICAgICAgICAgIG9uS2V5UHJlc3M9eyFpc05hTihtYXhDaGFycykgPyBldiA9PiB7XG4gICAgICAgICAgICBjb25zdCB7aW5uZXJUZXh0fSA9IChldi50YXJnZXQgYXMgYW55KTtcbiAgICAgICAgICAgIGlmIChpbm5lclRleHQgJiYgaW5uZXJUZXh0Lmxlbmd0aCA+PSBtYXhDaGFycykge1xuICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gOiBudWxsfVxuICAgICAgICAgIG9uSW5wdXQ9e2V2ID0+IHRoaXMudHJpZ2dlck9uQ2hhbmdlKChldi50YXJnZXQgYXMgYW55KS5pbm5lckhUTUwpfVxuICAgICAgICAgIG9uS2V5RG93bj17ZXYgPT4ge1xuICAgICAgICAgICAgaWYgKHJlYWRPbmx5KSByZXR1cm47XG4gICAgICAgICAgICBpZiAocmVwb3J0TnVtQ2hhcnMgJiYgZXYuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgICByZXBvcnROdW1DaGFycygoZXYuY3VycmVudFRhcmdldC5pbm5lclRleHQgfHwgXCJcIikubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIktleTogXCIgKyBldi53aGljaCk7XG4gICAgICAgICAgICBpZiAoZXYud2hpY2ggPj0gMzUgJiYgZXYud2hpY2ggPD0gNDApIHsvLyBob21lL2VuZC91cC9kb3duL2xlZnQvcmlnaHRcbiAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFByZXZlbnQgZW50aXJlIHBhZ2UgZnJvbSBzY3JvbGxpbmc/P1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGV2LndoaWNoID09PSA5KSB7XG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7Ly8gVEFCXG4gICAgICAgICAgICAgIGlmIChldi5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIGV4ZWMoXCJvdXRkZW50XCIpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGV4ZWMoXCJpbmRlbnRcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAoZXYua2V5Q29kZSA9PT0gOCB8fCBldi5rZXlDb2RlID09PSA0NikgJiYgLy8gRGVsZXRlIG9yIEJhY2sgYnV0dG9uc1xuICAgICAgICAgICAgICB0aGlzLmZvY3VzRWxlbSAmJiB0aGlzLnN0YXRlLmZvY3VzUmVjdClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNFbGVtICYmIHRoaXMuZm9jdXNFbGVtLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzRWxlbS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuZm9jdXNFbGVtKTsgLy8gUmVtb3ZlIG1hcmtlZCBpbWFnZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtID0gbnVsbDtcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Zm9jdXNSZWN0OiBudWxsfSk7XG4gICAgICAgICAgICAgIHRoaXMudHJpZ2dlck9uQ2hhbmdlKHRoaXMuY29udGVudERpdi5pbm5lckhUTUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICAgIHtmb2N1c1JlY3QgJiYgPGRpdlxuICAgICAgICAgIHJlZj17ZGl2ID0+IHRoaXMuZm9jdXNSZWN0RGl2ID0gZGl2fVxuICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3JlY3R9XG4gICAgICAgICAgb25CbHVyPXt0aGlzLm9uQmx1cn1cbiAgICAgICAgICB0YWJJbmRleD17MX1cbiAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgb3V0bGluZTogMCxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgdG9wOiB0aGlzLnN0YXRlLmZvY3VzUmVjdC50b3AsXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLnN0YXRlLmZvY3VzUmVjdC5sZWZ0LFxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuc3RhdGUuZm9jdXNSZWN0LndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLnN0YXRlLmZvY3VzUmVjdC5oZWlnaHR9fT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnB1bFwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIHRvcDowLCBsZWZ0OjB9fSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcHVyXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgdG9wOjAsIHJpZ2h0OjB9fSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcGxyXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgYm90dG9tOjAsIHJpZ2h0OjB9fSAvPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcGxsXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgYm90dG9tOjAsIGxlZnQ6MH19IC8+XG4gICAgICAgIDwvZGl2Pn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFJlbGF0YXRpdmVDbGllbnRSZWN0IChwYXJlbnQ6IEhUTUxFbGVtZW50LCBjaGlsZDogSFRNTEVsZW1lbnQpIDogQ2xpZW50UmVjdCB7XG4gIGNvbnN0IHBhcmVudFJlY3QgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGNoaWxkUmVjdCA9IGNoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHRvcDogY2hpbGRSZWN0LnRvcCAtIHBhcmVudFJlY3QudG9wICsgcGFyZW50LnNjcm9sbFRvcCxcbiAgICBsZWZ0OiBjaGlsZFJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCArIHBhcmVudC5zY3JvbGxMZWZ0LFxuICAgIGJvdHRvbTogY2hpbGRSZWN0LmJvdHRvbSAtIHBhcmVudFJlY3QudG9wICsgcGFyZW50LnNjcm9sbFRvcCxcbiAgICByaWdodDogY2hpbGRSZWN0LnJpZ2h0IC0gcGFyZW50UmVjdC5sZWZ0ICsgcGFyZW50LnNjcm9sbExlZnQsXG4gICAgd2lkdGg6IGNoaWxkUmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IGNoaWxkUmVjdC5oZWlnaHRcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGltYWdlRWRpdEFjdGlvbnMoY2IpIHtcbiAgcmV0dXJuIFt7XG4gICAgbmFtZTogJ2Zsb2F0LWxlZnQnLFxuICAgIGljb246IGA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmVcIj5cbiAgICAgIDxpIGNsYXNzPVwiZmEgZmEtYWxpZ24tcmlnaHRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7IGxlZnQ6LTRweDt0b3A6MDsgdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IHRvcFwiPlxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBpY3R1cmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmAsXG4gICAgdGl0bGU6ICdMw6V0IGJpbGRlbiBmbHl0YSB2w6Ruc3RlciBvbSB0ZXh0JyxcbiAgICByZXN1bHQ6ICgpID0+IGNiKCdmbG9hdC1sZWZ0JylcbiAgfSwge1xuICAgIG5hbWU6ICdmbG9hdC1yaWdodCcsXG4gICAgaWNvbjogYDxkaXYgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZVwiPlxuICAgICAgPGkgY2xhc3M9XCJmYSBmYS1hbGlnbi1sZWZ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlOyByaWdodDotNHB4O3RvcDowOyB0cmFuc2Zvcm06IHNjYWxlKDAuNSk7IHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IHRvcFwiPlxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBpY3R1cmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PmAsXG4gICAgdGl0bGU6ICdMw6V0IGJpbGRlbiBmbHl0YSBow7ZnZXIgb20gdGV4dCcsXG4gICAgcmVzdWx0OiAoKSA9PiBjYignZmxvYXQtcmlnaHQnKVxuICB9LCB7XG4gICAgbmFtZTogJ3VuZmxvYXQnLFxuICAgIGljb246IGA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowXCI+JiM4MjU0OzwvZGl2PlxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowOmxlZnQ6MDt0cmFuc2Zvcm06IHNjYWxlKDAuNSk7IHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgYm90dG9tXCI+XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowXCI+XzwvZGl2PlxuICAgIDwvZGl2PmAsXG4gICAgdGl0bGU6ICdQbGFjZXJhIGJpbGRlbiBww6UgZWdlbiByYWQnLFxuICAgIHJlc3VsdDogKCkgPT4gY2IoJ3VuZmxvYXQnKVxuICB9XTtcbn1cblxuIiwiaW1wb3J0IHsgVXNlclRhc2sgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhc2tUeXBlICh1c2VyVGFzazogVXNlclRhc2spIDogJ2NvdXJzZUJ1aWxkZXJUYXNrJyB8ICdzaXRlVmlzaW9uVGFzaycgfCAnc3ViamVjdFBsYW5uZXJUYXNrJyB8ICdjdXN0b21UYXNrJyB7XG4gIHJldHVybiB1c2VyVGFzay5jb3Vyc2UgJiYgdXNlclRhc2sudGFzayAmJiB1c2VyVGFzay5jb3Vyc2UubGVuZ3RoID4gMCAmJiB1c2VyVGFzay50YXNrLmxlbmd0aCA+IDAgP1xuICAgICdjb3Vyc2VCdWlsZGVyVGFzaycgOlxuICAgIHVzZXJUYXNrLnNpdGVWaXNpb25QYWdlSWQgP1xuICAgICAgJ3NpdGVWaXNpb25UYXNrJyA6XG4gICAgICAgIHVzZXJUYXNrLmNvdXJzZUluZm8gP1xuICAgICAgICAgICdzdWJqZWN0UGxhbm5lclRhc2snIDpcbiAgICAgICAgICAnY3VzdG9tVGFzayc7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBVc2VyVGFzaywgVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSAnLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xuaW1wb3J0IHsgY291cnNlTmFtZVRvQ3NzQ2xhc3MgfSBmcm9tICcuLi9jYWxlbmRhci9jb3Vyc2UtbmFtZS10by1jc3MtY2xhc3MnO1xuaW1wb3J0IHsgZ2V0VGFza1R5cGUgfSBmcm9tICcuL2dldC10YXNrLXR5cGUnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgVmlydHVhbExlYXJuaW5nR29hbCB9IGZyb20gJy4vcmVmaW5lcic7XG5pbXBvcnQgeyBGZWF0dXJlcyB9IGZyb20gJy4uLy4uL2ZlYXR1cmVzJztcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcbmltcG9ydCB7Rm9ybWF0dGVkTWVzc2FnZX0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQge0xhbmd1YWdlQ29udGV4dH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlclRhc2tzQm94UHJvcHMge1xuICBjb3Vyc2VOYW1lOiBzdHJpbmc7XG4gIGxlYXJuaW5nR29hbHM6IFZpcnR1YWxMZWFybmluZ0dvYWxbXSxcbiAgdmlld0NvdXJzZVVybDogc3RyaW5nO1xuICBvcGVuQ291cnNlcz86IHsgW3BhdGg6IHN0cmluZ106IGJvb2xlYW4gfTtcbiAgc2V0SXNPcGVuPzogKGNvdXJzZU5hbWU6IHN0cmluZywgaXNPcGVuOiBib29sZWFuKSA9PiB2b2lkO1xuICBzZXRUYXNrRG9uZT86ICh0YXNrOiBVc2VyVGFzaywgZG9uZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgc2V0U3ViVGFza0RvbmU6ICh0YXNrOiBVc2VyVGFzaywgc3ViVGFzazogVXNlclN1YlRhc2ssIGRvbmU6IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGFkZE93blRhc2s/OiAoY291cnNlTmFtZTogc3RyaW5nLCBsZWFybmluZ0dvYWxOYW1lOiBzdHJpbmcpID0+IHZvaWQ7XG4gIGVkaXRUYXNrOiAodGFzazogVXNlclRhc2spID0+IHZvaWQ7XG4gIGVkaXRTdWJUYXNrOiAodGFzazogVXNlclRhc2ssIHN1YlRhc2s6IFVzZXJTdWJUYXNrKSA9PiB2b2lkO1xuICByZW1vdmVMZWFybmluZ0dvYWw6IChsZzogVmlydHVhbExlYXJuaW5nR29hbCk9PnZvaWQ7XG59O1xuXG5leHBvcnQgY2xhc3MgVXNlclRhc2tzQm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFVzZXJUYXNrc0JveFByb3BzPiB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZSA9IExhbmd1YWdlQ29udGV4dDtcbiAgY29uc3RydWN0b3IocHJvcHM6IFVzZXJUYXNrc0JveFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvdXJzZU5hbWUsXG4gICAgICBsZWFybmluZ0dvYWxzLCBcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBpc09wZW4gPSAhIXRoaXMucHJvcHMub3BlbkNvdXJzZXNbY291cnNlTmFtZV07XG4gICAgY29uc3QgZmVhdHVyZXMgPSBuZXcgRmVhdHVyZXMoKTtcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XG5cbiAgICByZXR1cm4gPE9wZW5DbG9zZUJveFxuICB0aXRsZT17PGg1Pntjb3Vyc2VOYW1lIHx8IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidXNlclRhc2tzLmdvYWxzXCIgIGRlZmF1bHRNZXNzYWdlPVwiRWduYSBsw6RyYW5kZW3DpWxcIi8+IH08L2g1Pn1cbiAgICAgIGhlYWRlck9wZW49e2lzT3Blbn1cbiAgICAgIGNsYXNzTmFtZT17Y291cnNlTmFtZSAmJiBjb3Vyc2VOYW1lVG9Dc3NDbGFzcygnd3AtY291cnNlLScsIGNvdXJzZU5hbWUpfVxuICAgICAgb25PcGVuQ2xvc2U9e2JlY2FtZU9wZW4gPT4gdGhpcy5wcm9wcy5zZXRJc09wZW4oY291cnNlTmFtZSwgYmVjYW1lT3Blbil9PlxuICAgICAge2xlYXJuaW5nR29hbHMubWFwKGxnID0+XG4gICAgICAgIDxkaXYga2V5PXtsZy5uYW1lfSBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxDb250YWluZXJcIj5cbiAgICAgICAgICB7bGcuc3RlcCAmJiA8ZGl2IGNsYXNzTmFtZT1cInN0ZXBJbmRpY2F0b3JcIj57bGcuc3RlcH08L2Rpdj59XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxlYXJuaW5nR29hbFRleHQgaG9yaXpvbnRhbEl0ZW0gdG9wXCI+e2xnLm5hbWV9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XG4gICAgICAgICAgICAgICZuYnNwOzxhXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidHJhc2hcIlxuICAgICAgICAgICAgICAgIGhyZWY9XCIjXCJcbiAgICAgICAgICAgICAgICAgdGl0bGU9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J3VzZXJUYXNrcy5kZWxldGVMZWFybmluZ0dvYWwnLCBkZWZhdWx0TWVzc2FnZTogJ1RhIGJvcnQgbMOkcmFuZGVtw6VsZXQgb2NoIGRlc3MgdXBwZ2lmdGVyJ30pfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2V2PT57XG4gICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yZW1vdmVMZWFybmluZ0dvYWwobGcpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS10cmFzaFwiIC8+XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxUYXNrc1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyXCI+XG4gICAgICAgICAgICAgIHtsZy50YXNrcy5tYXAodXNlclRhc2sgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzV29ya2luZyA9IHVzZXJUYXNrLiRtZXRhID09PSAnYWRkaW5nJyB8fCB1c2VyVGFzay4kbWV0YSA9PT0gJ2RlbGV0aW5nJyB8fCB1c2VyVGFzay4kbWV0YSA9PT0gJ3VwZGF0aW5nJztcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRhc2tUeXBlID0gZ2V0VGFza1R5cGUodXNlclRhc2spO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4cGlyZWQgPSBtb21lbnQodXNlclRhc2suZGVhZGxpbmUpLnN0YXJ0T2YoJ2RheScpIDwgbW9tZW50KCkuc3RhcnRPZignZGF5Jyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBrZXk9e3VzZXJUYXNrLmlkfSBzdHlsZT17aXNXb3JraW5nID8geyBvcGFjaXR5OiAwLjUgfSA6IHt9fT5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImNoZWNrQm94XCIgKyAodXNlclRhc2suZG9uZSA/IFwiIGNoZWNrZWRcIiA6IFwiXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17ZXYgPT4gIWlzV29ya2luZyAmJiB0aGlzLnByb3BzLnNldFRhc2tEb25lKHVzZXJUYXNrLCAhdXNlclRhc2suZG9uZSl9PlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICAgICAgICB7dGFza1R5cGUgPT09ICdjb3Vyc2VCdWlsZGVyVGFzaycgP1xuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17Z2V0VGFza1VybCh1c2VyVGFzaywgdGhpcy5wcm9wcy52aWV3Q291cnNlVXJsKX0+e3VzZXJUYXNrLm5hbWV9PC9hPiA6XG4gICAgICAgICAgICAgICAgICAgICAgIHRhc2tUeXBlID09PSAnc3ViamVjdFBsYW5uZXJUYXNrJyA/XG4gICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtnZXRTdWJqZWN0UGxhbm5lclRhc2tVcmwodXNlclRhc2spfT57dXNlclRhc2submFtZX08L2E+IDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tUeXBlID09PSAnc2l0ZVZpc2lvblRhc2snID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj17dXNlclRhc2sudXJsfT57dXNlclRhc2submFtZX08L2E+IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eyF1c2VyVGFzay51cmwgPyBcImxpbmstbGVzc1wiOiBcIlwifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9e3VzZXJUYXNrLnVybCB8fCB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PXsodXNlclRhc2sudXJsKycnKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgobG9jYXRpb24uaG9zdC50b0xvd2VyQ2FzZSgpKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9zZWxmXCIgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfYmxhbmtcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPnt1c2VyVGFzay5uYW1lfTwvYT59XG4gICAgICAgICAgICAgICAgICAgICAge3VzZXJUYXNrLmRlYWRsaW5lICYmIDxkaXYgY2xhc3NOYW1lPXtcImRhdGVTZXRcIiArIChleHBpcmVkID8gJyBleHBpcmVkJyA6ICcnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aSB0aXRsZT17bW9tZW50KHVzZXJUYXNrLmRlYWRsaW5lKS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpfSBjbGFzc05hbWU9XCJmYSBmYS1jYWxlbmRhclwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT57fX0+PC9pPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCB0YXNrRWRpdFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnByb3BzLmVkaXRUYXNrKHVzZXJUYXNrKX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAge3VzZXJUYXNrLnN1YlRhc2tzICYmIDxkaXYgY2xhc3NOYW1lPVwic3VidGFza3NcIj5cbiAgICAgICAgICAgICAgICAgICAge3VzZXJUYXNrLnN1YlRhc2tzLm1hcChzdWJUYXNrID0+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e3N1YlRhc2suaWR9ID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiY2hlY2tCb3hcIiArIChzdWJUYXNrLmRvbmUgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXtldiA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWlzV29ya2luZyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zZXRTdWJUYXNrRG9uZSh1c2VyVGFzaywgc3ViVGFzaywgIXN1YlRhc2suZG9uZSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmPXtzdWJUYXNrLnVybCB8fCB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PXsodXNlclRhc2sudXJsKycnKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgobG9jYXRpb24uaG9zdC50b0xvd2VyQ2FzZSgpKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJfc2VsZlwiIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9ibGFua1wifVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJUYXNrLnVybCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsaW5rLWxlc3MnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0+e3N1YlRhc2submFtZX08L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHRhc2tFZGl0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgb25DbGljaz17KCkgPT4gdGhpcy5wcm9wcy5lZGl0U3ViVGFzayh1c2VyVGFzaywgc3ViVGFzayl9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAgICAgICAgPC9kaXY+fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxUb29sc1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYWRkT3duR29hbFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMucHJvcHMuYWRkT3duVGFzayh0aGlzLnByb3BzLmNvdXJzZU5hbWUsIGxnLm5hbWUpfT5cbiAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGx1c1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4gPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9J3VzZXJUYXNrcy5hZGRMZWFybmluZ0dvYWwnIGRlZmF1bHRNZXNzYWdlPSdFZ2V0IGFyYmV0c23DpWwnLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxiciAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgPC9PcGVuQ2xvc2VCb3g+XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFza1VybCh1c2VyVGFzazogVXNlclRhc2ssIHZpZXdDb3Vyc2VVcmw6IHN0cmluZykge1xuICBpZiAodXNlclRhc2suY291cnNlICYmIHVzZXJUYXNrLmNvdXJzZS5sZW5ndGggPiAwICYmIHVzZXJUYXNrLnRhc2sgJiYgdXNlclRhc2sudGFzay5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgY291cnNlVXJsID0gcHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkodmlld0NvdXJzZVVybCwgeyBjb3Vyc2VJZDogdXNlclRhc2suY291cnNlWzBdLmlkIH0pO1xuICAgIHJldHVybiBgJHtjb3Vyc2VVcmx9Iy90YXNrLyR7dXNlclRhc2sudGFza1swXS5pZH1gO1xuICB9XG4gIHJldHVybiB1c2VyVGFzay51cmw7XG59XG5cbmZ1bmN0aW9uIGdldFN1YmplY3RQbGFubmVyVGFza1VybCh1c2VyVGFzazogVXNlclRhc2spIHtcbiAgaWYgKHVzZXJUYXNrLmNvdXJzZUluZm8gJiYgdXNlclRhc2sudGFzayAmJiB1c2VyVGFzay50YXNrLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCB7c2Nob29sLCBjb3Vyc2UsIHRhYiB9ID0gdXNlclRhc2suY291cnNlSW5mbztcbiAgICBjb25zdCBjb3Vyc2VVcmwgPSBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeShjZmcuS0VEX1NVQkpFQ1RfUExBTk5FUl9VUkwsIHt9KTtcbiAgICByZXR1cm4gYCR7Y291cnNlVXJsfSMvJHtzY2hvb2x9L2NvdXJzZXMvJHtjb3Vyc2V9L3RhYnMvJHt0YWJ9L3Rhc2tzLyR7dXNlclRhc2sudGFza1swXS5pZH1gO1xuICB9XG4gIHJldHVybiB1c2VyVGFzay51cmw7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ3JlYWN0LWludGwnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBsZWFybmluZ0dvYWw/OiBzdHJpbmc7XG4gIG9uU2F2ZTogKGxlYXJuaW5nR29hbDogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBsZWFybmluZ0dvYWw6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIEFkZEN1c3RvbUdvYWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsZWFybmluZ0dvYWw6IHByb3BzLmxlYXJuaW5nR29hbCB8fCAnJ1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7bGVhcm5pbmdHb2FsfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge29uU2F2ZX0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgICAgIDxoMj48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmFkZExlYXJuaW5nR29hbFRpdGxlXCIgZGVmYXVsdE1lc3NhZ2U9XCJMw6RnZyB0aWxsIGVnZXQgbMOkcmFuZGVtw6VsXCIvPjwvaDI+XG4gICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5hZGRMZWFybmluZ0dvYWxcIiBkZWZhdWx0TWVzc2FnZT1cIk3DpWxcIi8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHRhYkluZGV4PXsxfSBzaXplPXs1MH0gYXV0b0ZvY3VzXG4gICAgICAgICAgICAgICAgdmFsdWU9e2xlYXJuaW5nR29hbH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZSA9PiB0aGlzLnNldFN0YXRlKHtsZWFybmluZ0dvYWw6IGUudGFyZ2V0LnZhbHVlfSl9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGJyIC8+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0YWJJbmRleD17MX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKT0+b25TYXZlKGxlYXJuaW5nR29hbCl9PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVcIiBkZWZhdWx0TWVzc2FnZT1cInNhdmVcIi8+PC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUZXh0SW5wdXQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC10ZXh0LWlucHV0JztcbmltcG9ydCB7IFRleHRBcmVhRm9ybUZpZWxkIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dGFyZWEnO1xuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuaW1wb3J0IHtGb3JtYXR0ZWRNZXNzYWdlfSBmcm9tICdyZWFjdC1pbnRsJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgaXNUYXNrOiBib29sZWFuXG4gIG9uU2F2ZTogKG5hbWU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgdXJsOiBzdHJpbmcpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBBZGRDdXN0b21UYXNrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZSA9IExhbmd1YWdlQ29udGV4dDtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgZGVzY3JpcHRpb246ICcnLFxuICAgICAgdXJsOiAnJ1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uLCB1cmwgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBpc1Rhc2ssIG9uU2F2ZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICAgIDxoMj48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImN1c3RvbVRhc2suYWRkV29ya0dvYWxUaXRsZVwiIGRlZmF1bHRNZXNzYWdlPVwiTMOkZ2cgdGlsbCBlZ2V0IGFyYmV0c23DpWxcIi8+PC9oMj5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY29tbW9uLm5hbWVMYWJlbCcsIGRlZmF1bHRNZXNzYWdlOiAnTmFtbid9KX1cbiAgICAgICAgICBpZD1cIkFkZEN1c3RvbVRhc2s6bmFtZVwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2N1c3RvbVRhc2suZW50ZXJOYW1lUGxoZCcsIGRlZmF1bHRNZXNzYWdlOiAnQW5nZSBuYW1uLi4uJ30pfVxuICAgICAgICAgIHZhbHVlPXtuYW1lfVxuICAgICAgICAgIGF1dG9Gb2N1c1xuICAgICAgICAgIG9uQ2hhbmdlPXtuYW1lID0+IHRoaXMuc2V0U3RhdGUoe25hbWV9KX0gLz5cblxuICAgICAgICA8VGV4dEFyZWFGb3JtRmllbGRcbiAgICAgICAgICByb3dzPXs3fVxuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY29tbW9uLmRlc2NyaXB0aW9uTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTonQmVza3Jpdm5pbmcnfSl9XG4gICAgICAgICAgaWQ9XCJBZGRDdXN0b21UYXNrOmRlc2NyaXB0aW9uXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY29tbW9uLmFkZERlc2NyaXB0aW9uUGxoZCcsIGRlZmF1bHRNZXNzYWdlOiBcIkzDpGdnIHRpbGwgZW4gYmVza3Jpdm5pbmcuLi5cIn0pfVxuICAgICAgICAgIHZhbHVlPXtkZXNjcmlwdGlvbn1cbiAgICAgICAgICBvbkNoYW5nZT17ZGVzY3JpcHRpb249PnRoaXMuc2V0U3RhdGUoe2Rlc2NyaXB0aW9ufSl9IC8+XG5cbiAgICAgICAgPFRleHRJbnB1dFxuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY29tbW9uLmxpbmtMYWJlbCcsIGRlZmF1bHRNZXNzYWdlOidMw6Ruayd9KX0gXG4gICAgICAgICAgaWQ9XCJBZGRDdXN0b21UYXNrOnVybFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJodHRwOi8vd3d3Li4uXCJcbiAgICAgICAgICB2YWx1ZT17dXJsfVxuICAgICAgICAgIG9uQ2hhbmdlPXt1cmwgPT4gdGhpcy5zZXRTdGF0ZSh7dXJsfSl9IC8+XG5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gb25TYXZlKG5hbWUsIGRlc2NyaXB0aW9uLCB1cmwpfT48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImNvbW1vbi5zYXZlXCIgZGVmYXVsdE1lc3NhZ2U9XCJTcGFyYVwiLz48L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRleHRJbnB1dCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9mb3JtLWZpZWxkLXRleHQtaW5wdXQnO1xuaW1wb3J0IHsgVGV4dEFyZWFGb3JtRmllbGQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC10ZXh0YXJlYSc7XG5pbXBvcnQgeyBVc2VyVGFzaywgVXNlclN1YlRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgVXNlclRhc2tzUmVwbyB9IGZyb20gJy4uLy4uL3JlcG9zL3VzZXItdGFza3MtcmVwbyc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuXG50eXBlIFByb3BzID0ge1xuICAvLyBFZGl0IE1vZGVcbiAgbW9kZTogJ2FkZCc7XG4gIHVzZXJUYXNrOiBVc2VyVGFzaztcbiAgY2xvc2VEaWFsb2c7XG4gIHVzZXJUYXNrc1JlcG86IFVzZXJUYXNrc1JlcG9cbn0gfCB7XG4gIG1vZGU6ICdlZGl0JztcbiAgdXNlclRhc2s6IFVzZXJUYXNrO1xuICBzdWJUYXNrOiBVc2VyU3ViVGFzaztcbiAgY2xvc2VEaWFsb2c6ICgpPT52b2lkO1xuICB1c2VyVGFza3NSZXBvOiBVc2VyVGFza3NSZXBvXG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBBZGRPckVkaXRTdWJUYXNrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIHN0YXRpYyBjb250ZXh0VHlwZSA9IExhbmd1YWdlQ29udGV4dDtcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBpZiAocHJvcHMubW9kZSA9PT0gJ2VkaXQnKSB7XG4gICAgICBjb25zdCB7c3ViVGFza30gPSBwcm9wcztcbiAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgIG5hbWU6IHN1YlRhc2submFtZSB8fCAnJyxcbiAgICAgICAgZGVzY3JpcHRpb246IHN1YlRhc2suZGVzY3JpcHRpb24gfHwgJycsXG4gICAgICAgIHVybDogc3ViVGFzay51cmwgfHwgJydcbiAgICAgIH07XG4gICAgfSBlbHNlIHsgIFxuICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgbmFtZTogJycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAgICAgICAgdXJsOiAnJ1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBzYXZlKCkge1xuICAgIC8vIFVwZGF0ZSByZXBvOlxuICAgIGNvbnN0IHtwcm9wc30gPSB0aGlzO1xuICAgIGNvbnN0IHt1c2VyVGFzaywgY2xvc2VEaWFsb2csIHVzZXJUYXNrc1JlcG99ID0gcHJvcHM7XG4gICAgY29uc3Qge25hbWUsIGRlc2NyaXB0aW9uLCB1cmx9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAocHJvcHMubW9kZSA9PT0gJ2VkaXQnKSB7XG4gICAgICAvLyBFZGl0IGV4aXN0aW5nOlxuICAgICAgdXNlclRhc2tzUmVwby51cGRhdGUoW3VzZXJUYXNrXSwgdXQgPT4ge1xuICAgICAgICBjb25zdCB7c3ViVGFza3N9ID0gdXQ7XG4gICAgICAgIGlmIChzdWJUYXNrcykge1xuICAgICAgICAgIHV0LnN1YlRhc2tzID0gc3ViVGFza3MubWFwKHN0ID0+XG4gICAgICAgICAgICBzdC5pZCA9PT0gcHJvcHMuc3ViVGFzay5pZCA/IHsuLi5zdCwgbmFtZSwgZGVzY3JpcHRpb24sIHVybH0gOlxuICAgICAgICAgICAgey4uLnN0fVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgbmV3IHRhc2tcbiAgICAgIGNvbnN0IG5ld1N1YlRhc2sgPSB7XG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgICB1cmxcbiAgICAgIH07XG5cbiAgICAgIC8vIFVwZGF0ZSByZXBvOlxuICAgICAgdXNlclRhc2tzUmVwby51cGRhdGUoW3VzZXJUYXNrXSwgdXQgPT4ge1xuICAgICAgICBpZiAoIXV0LnN1YlRhc2tzKSB7XG4gICAgICAgICAgdXQuc3ViVGFza3MgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB1dC5zdWJUYXNrcyA9IHV0LnN1YlRhc2tzLmNvbmNhdChuZXdTdWJUYXNrKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENsb3NlIGRpYWxvZ1xuICAgIGNsb3NlRGlhbG9nKCk7ICAgIFxuICB9XG5cbiAgZGVsZXRlKCkge1xuICAgIC8vIFVwZGF0ZSByZXBvOlxuICAgIGNvbnN0IHByb3BzID0gdGhpcy5wcm9wczsgIFxuICAgIGlmIChwcm9wcy5tb2RlICE9PSAnZWRpdCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbiBvbmx5IGRlbGV0ZSBpbiBlZGl0IG1vZGVcIik7XG4gICAgfVxuICAgIHByb3BzLnVzZXJUYXNrc1JlcG8udXBkYXRlKFtwcm9wcy51c2VyVGFza10sIHV0ID0+IHtcbiAgICAgIGlmICh1dC5zdWJUYXNrcykge1xuICAgICAgICB1dC5zdWJUYXNrcyA9IHV0LnN1YlRhc2tzLmZpbHRlcih0ID0+IHQuaWQgIT09IHByb3BzLnN1YlRhc2suaWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gQ2xvc2UgZGlhbG9nOlxuICAgIHByb3BzLmNsb3NlRGlhbG9nKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge25hbWUsIGRlc2NyaXB0aW9uLCB1cmx9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7cHJvcHN9ID0gdGhpcztcbiAgICBjb25zdCBpc0VkaXRNb2RlID0gcHJvcHMubW9kZSA9PT0gJ2VkaXQnO1xuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcbiAgICByZXR1cm4gPD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgPGgyPntpc0VkaXRNb2RlID8gPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJhZGRlZGl0c3VidGFzay5lZGl0U3VidGFza1wiIGRlZmF1bHRNZXNzYWdlPSdSZWRpZ2VyYSB1bmRlcnVwcGdpZnQnLz4gOiA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImFkZGVkaXRzdWJ0YXNrLmFkZFN1YnRhc2tcIiBkZWZhdWx0TWVzc2FnZT0nTMOkZ2cgdGlsbCB1bmRlcnVwcGdpZnQnLz4gfTwvaDI+XG4gICAgICAgIDxociAvPlxuICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgYXV0b0ZvY3VzXG4gICAgICAgICAgbGFiZWw9IHtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOidhZGRlZGl0c3VidGFzay5uYW1lTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTonVW5kZXJ1cHBnaWZ0ZW5zIG5hbW4nfSl9XG4gICAgICAgICAgaWQ9XCJBZGRVc2VyU3ViVGFzazpuYW1lXCJcbiAgICAgICAgICBwbGFjZWhvbGRlcj1cIlwiXG4gICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUubmFtZX1cbiAgICAgICAgICBvbkNoYW5nZT17bmFtZSA9PiB0aGlzLnNldFN0YXRlKHtuYW1lfSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8VGV4dEFyZWFGb3JtRmllbGRcbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J2NvbW1vbi5kZXNjcmlwdGlvbkxhYmVsJywgZGVmYXVsdE1lc3NhZ2U6J0Jlc2tyaXZuaW5nJ30pfVxuICAgICAgICAgIGlkPVwiQWRkVXNlclN1YlRhc2s6ZGVzY3JpcHRpb25cIlxuICAgICAgICAgIHJvd3M9ezd9XG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIlxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmRlc2NyaXB0aW9ufVxuICAgICAgICAgIG9uQ2hhbmdlPXtkZXNjcmlwdGlvbiA9PiB0aGlzLnNldFN0YXRlKHtkZXNjcmlwdGlvbn0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPFRleHRJbnB1dFxuICAgICAgICAgIGxhYmVsPSB7aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY29tbW9uLmxpbmtMYWJlbCcsIGRlZmF1bHRNZXNzYWdlOidMw6Ruayd9KX1cbiAgICAgICAgICBpZD1cIkFkZFVzZXJTdWJUYXNrOnVybFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJcIlxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnVybH1cbiAgICAgICAgICBvbkNoYW5nZT17dXJsID0+IHRoaXMuc2V0U3RhdGUoe3VybH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgPGJyIC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cbiAgICAgICAge1xuICAgICAgICAgIHByb3BzLm1vZGUgPT09ICdlZGl0JyAmJiA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiXG4gICAgICAgICAgb25DbGljaz17ZXYgPT4gdGhpcy5kZWxldGUoKX0+XG4gICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJhZGRlZGl0c3VidGFzay5kZWxldGVTdWJ0YXNrXCIgZGVmYXVsdE1lc3NhZ2U9XCJUYSBib3J0IHVuZGVydXBwZ2lmdFwiLz48L2J1dHRvbj59XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0YWJJbmRleD17MX1cbiAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCJcbiAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5zYXZlKCl9PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVcIiBkZWZhdWx0TWVzc2FnZT1cIlNwYXJhXCIvPjwvYnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgPC8+XG4gIH1cbn1cblxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVXNlclRhc2ssIFVzZXJTdWJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgUmVuYW1lYWJsZVRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvcmVuYW1lYWJsZS10ZXh0JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBnZXRUYXNrVHlwZSB9IGZyb20gJy4vZ2V0LXRhc2stdHlwZSc7XG5pbXBvcnQgUmVhY3REYXRlUGlja2VyLCB7IFJlYWN0RGF0ZVBpY2tlclByb3BzIH0gZnJvbSAncmVhY3QtZGF0ZXBpY2tlcic7XG5pbXBvcnQgJy4uLy4uL2dsb2JhbHMvbW9tZW50LXN2LWxvY2FsZSc7XG5pbXBvcnQge1RleHRJbnB1dH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2Zvcm0tZmllbGQtdGV4dC1pbnB1dCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBGb3JtRmllbGQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZCc7XG5pbXBvcnQgeyBBZGRPckVkaXRTdWJUYXNrIH0gZnJvbSAnLi9hZGQtb3ItZWRpdC1zdWItdGFzayc7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcbmltcG9ydCB7IFVzZXJUYXNrc1JlcG8gfSBmcm9tICcuLi8uLi9yZXBvcy91c2VyLXRhc2tzLXJlcG8nO1xuaW1wb3J0IHsgVGV4dEFyZWFGb3JtRmllbGQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvZm9ybS1maWVsZC10ZXh0YXJlYSc7XG5pbXBvcnQgeyBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQge0xhbmd1YWdlQ29udGV4dH0gZnJvbSBcIi4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHRcIlxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB1c2VyVGFzazogVXNlclRhc2s7XG4gIG9uVXBkYXRlOiAodXBkYXRlcjogKHVzZXJUYXNrOiBVc2VyVGFzaykgPT4gdm9pZCkgPT4gdm9pZDtcbiAgb25EZWxldGU6ICh1c2VyVGFza0lkOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9wZW5EaWFsb2c6IChkaWFsb2cpID0+IHZvaWQ7XG4gIGNsb3NlRGlhbG9nOiAoKT0+dm9pZDtcbiAgdXNlclRhc2tzUmVwbzogVXNlclRhc2tzUmVwb1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICB1c2VyVGFzazogVXNlclRhc2s7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIGRlYWRsaW5lPzogc3RyaW5nO1xuICB1cmw6IHN0cmluZztcbiAgc3ViVGFza3M/OiBVc2VyU3ViVGFza1tdO1xuICBzaG93Q2FsZW5kYXI/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgRWRpdFVzZXJUYXNrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGRhdGVQaWNrZXI6IGFueTtcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdXNlclRhc2s6IHByb3BzLnVzZXJUYXNrLFxuICAgICAgbmFtZTogcHJvcHMudXNlclRhc2submFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBwcm9wcy51c2VyVGFzay5kZXNjcmlwdGlvbixcbiAgICAgIHVybDogcHJvcHMudXNlclRhc2sudXJsLFxuICAgICAgZGVhZGxpbmU6IHByb3BzLnVzZXJUYXNrLmRlYWRsaW5lLFxuICAgICAgc3ViVGFza3M6IHByb3BzLnVzZXJUYXNrLnN1YlRhc2tzXG4gICAgfVxuICAgIHRoaXMub25Vc2VyVGFza3NDaGFuZ2VkID0gdGhpcy5vblVzZXJUYXNrc0NoYW5nZWQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucHJvcHMudXNlclRhc2tzUmVwby5zdWJzY3JpYmUodGhpcy5vblVzZXJUYXNrc0NoYW5nZWQpO1xuICB9XG5cbiAgb25Vc2VyVGFza3NDaGFuZ2VkKHVzZXJUYXNrczogVXNlclRhc2tbXSkge1xuICAgIGNvbnN0IG15VXNlclRhc2sgPSB1c2VyVGFza3MuZmluZCh1dCA9PiB1dC5pZCA9PT0gdGhpcy5wcm9wcy51c2VyVGFzay5pZCk7XG4gICAgaWYgKCFteVVzZXJUYXNrKSB7XG4gICAgICB0aGlzLnByb3BzLmNsb3NlRGlhbG9nKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdXNlclRhc2s6IG15VXNlclRhc2ssXG4gICAgICBzdWJUYXNrczogbXlVc2VyVGFzay5zdWJUYXNrc1xuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy51c2VyVGFza3NSZXBvLnVuc3Vic2NyaWJlKHRoaXMub25Vc2VyVGFza3NDaGFuZ2VkKTtcbiAgfVxuXG4gIGlzTW9kaWZpZWQoKSB7XG4gICAgLy8gRG9uJ3QgY291bnQgc3VidGFzayBjaGFuZ2VzISBUaGV5IGxpdmUgdGhlaXIgb3duIGxpZmUgYW5kIGlzIG1haW50YWluZWRcbiAgICAvLyBpbiBhZGQtb3ItZWRpdC1zdWItdGFzay50c3guIFJlYXNvbjogVXNlciB3b3VsZCBleHBlY3QgYWRkZWQgL2VkaXRlZCBzdWJ0YXNrc1xuICAgIC8vIHRvIGJlIHBlcnNpc3RlZCByaWdodCBhd2F5LiBNYXkgY2xpY2sgYXdheSB0aGlzIGRpYWxvZy5cbiAgICAvLyBBbHNvIHJlYXNvbjogQ2FuIGludm9rZSB0aGF0IGRpYWxvZyBieSBpdHNlbGYgZnJvbSBvdGhlciBjb21wb25lbnRzLiBGcm9tIFdlZWtQbGFubmVyXG4gICAgLy8gd2hlbiBjbGlja2luZyB0aGUgc3VidGFzayBmb3IgZXhhbXBsZSFcblxuICAgIGNvbnN0IHtkZWFkbGluZSwgZGVzY3JpcHRpb24sIG5hbWUsIHVybCwgdXNlclRhc2t9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gKFxuICAgICAgZGVhZGxpbmUgIT09IHVzZXJUYXNrLmRlYWRsaW5lIHx8XG4gICAgICBkZXNjcmlwdGlvbiAhPT0gdXNlclRhc2suZGVzY3JpcHRpb24gfHxcbiAgICAgIG5hbWUgIT09IHVzZXJUYXNrLm5hbWUgfHxcbiAgICAgIHVybCAhPT0gdXNlclRhc2sudXJsKTtcbiAgfVxuXG4gIGFkZFN1YlRhc2soKTogYW55IHtcbiAgICB0aGlzLnByb3BzLm9wZW5EaWFsb2coPEFkZE9yRWRpdFN1YlRhc2tcbiAgICAgIG1vZGU9XCJhZGRcIlxuICAgICAgdXNlclRhc2s9e3RoaXMuc3RhdGUudXNlclRhc2t9XG4gICAgICBjbG9zZURpYWxvZz17dGhpcy5wcm9wcy5jbG9zZURpYWxvZ31cbiAgICAgIHVzZXJUYXNrc1JlcG89e3RoaXMucHJvcHMudXNlclRhc2tzUmVwb31cbiAgICAvPik7XG4gIH1cblxuICBlZGl0U3ViVGFzayhzdWJUYXNrOiBVc2VyU3ViVGFzaykge1xuICAgIHRoaXMucHJvcHMub3BlbkRpYWxvZyg8QWRkT3JFZGl0U3ViVGFza1xuICAgICAgbW9kZT1cImVkaXRcIlxuICAgICAgc3ViVGFzaz17c3ViVGFza31cbiAgICAgIHVzZXJUYXNrPXt0aGlzLnN0YXRlLnVzZXJUYXNrfVxuICAgICAgY2xvc2VEaWFsb2c9e3RoaXMucHJvcHMuY2xvc2VEaWFsb2d9XG4gICAgICB1c2VyVGFza3NSZXBvPXt0aGlzLnByb3BzLnVzZXJUYXNrc1JlcG99XG4gICAgLz4pO1xuICB9XG4gIFxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBuYW1lLCBkZXNjcmlwdGlvbiwgdXJsLCBkZWFkbGluZSwgc3ViVGFza3MsIHNob3dDYWxlbmRhciwgdXNlclRhc2sgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBpZCwgY291cnNlTmFtZSB9ID0gdXNlclRhc2s7XG4gICAgY29uc3QgeyBvblVwZGF0ZSwgb25EZWxldGUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgaXNNb2RpZmllZCA9IHRoaXMuaXNNb2RpZmllZCgpO1xuXG4gICAgY29uc3QgdGFza1R5cGUgPSBnZXRUYXNrVHlwZSh1c2VyVGFzayk7XG4gICAgY29uc3QgaXNDdXN0b21UYXNrID0gdGFza1R5cGUgPT09ICdjdXN0b21UYXNrJztcbiAgICBjb25zdCBleHBpcmVkID0gbW9tZW50KHVzZXJUYXNrLmRlYWRsaW5lKSA8IG1vbWVudCgpO1xuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImVkaXRUYXNrRGlhbG9nIHN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICA8aDI+e2lzQ3VzdG9tVGFzayA/IFxuICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRhc2suZWRpdFdvcmtHb2Fsc1wiIGRlZmF1bHRNZXNzYWdlPSdSZWRpZ2VyYSBhcmJldHNtw6VsJy8+IDogXG4gICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5lZGl0VGFza1wiIGRlZmF1bHRNZXNzYWdlPSdSZWRpZ2VyYSB1cHBnaWZ0Jy8+fVxuICAgICAgPC9oMj5cbiAgICAgIDxociAvPlxuICAgICAgPFRleHRJbnB1dFxuICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgbGFiZWw9e2lzQ3VzdG9tVGFzayA/IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLnRhcmdldE5hbWVMYWJlbCcsIGRlZmF1bHRNZXNzYWdlOiAnQXJiZXRzbcOlbGV0cyBuYW1uJ30pICA6IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLnRhc2tOYW1lTGFiZWwnLCBkZWZhdWx0TWVzc2FnZTogJ1VwcGdpZnRlbnMgbmFtbid9KX1cbiAgICAgICAgaWQ9XCJFZGl0VXNlclRhc2s6bmFtZVwiXG4gICAgICAgIHBsYWNlaG9sZGVyPXtpc0N1c3RvbVRhc2sgPyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay53aGF0U2hvdWxkWW91RG9QbGhkJywgZGVmYXVsdE1lc3NhZ2U6ICdWYWQgc2thIGR1IGfDtnJhPyd9KSA6IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLmVudGVyVGFza05hbWVQbGhkJywgZGVmYXVsdE1lc3NhZ2U6ICdBbmdlIHVwcGdpZnRlbnMgbmFtbi4uLid9KSB9XG4gICAgICAgIHZhbHVlPXtuYW1lfVxuICAgICAgICBvbkNoYW5nZT17bmFtZSA9PiB0aGlzLnNldFN0YXRlKHtuYW1lfSl9IC8+XG4gICAgICBcbiAgICAgIHtpc0N1c3RvbVRhc2sgJiYgPD5cbiAgICAgICAgPFRleHRBcmVhRm9ybUZpZWxkXG4gICAgICAgICAgcm93cz17NX1cbiAgICAgICAgICBsYWJlbD0ge2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICdjb21tb24uZGVzY3JpcHRpb25MYWJlbCcsIGRlZmF1bHRNZXNzYWdlOiAnQmVza3Jpdm5pbmcnfSl9XG4gICAgICAgICAgaWQ9XCJFZGl0VXNlclRhc2s6ZGVzY3JpcHRpb25cIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAnY29tbW9uLmFkZERlc2NyaXB0aW9uUGxoZCcsIGRlZmF1bHRNZXNzYWdlOiAnTMOkZ2cgdGlsbCBlbiBiZXNrcml2bmluZy4uLid9KX1cbiAgICAgICAgICB2YWx1ZT17ZGVzY3JpcHRpb259XG4gICAgICAgICAgb25DaGFuZ2U9e2Rlc2NyaXB0aW9uPT50aGlzLnNldFN0YXRlKHtkZXNjcmlwdGlvbn0pfSAvPlxuXG4gICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDonY29tbW9uLmxpbmtMYWJlbCcsIGRlZmF1bHRNZXNzYWdlOlwiTMOkbmtcIn0pfVxuICAgICAgICAgIGlkPVwiRWR1dFVzZXJUYXNrOnVybFwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJodHRwKHMpOi8vLi4uXCJcbiAgICAgICAgICB2YWx1ZT17dXJsfVxuICAgICAgICAgIG9uQ2hhbmdlPXt1cmwgPT4gdGhpcy5zZXRTdGF0ZSh7dXJsfSl9ID5cblxuICAgICAgICA8L1RleHRJbnB1dD48Lz59XG5cbiAgICAgICAgPEZvcm1GaWVsZCBsYWJlbD17aW50bC5mb3JtYXRNZXNzYWdlKHtpZDogJ3Rhc2suc2V0RGVhZGxpbmUnLCBkZWZhdWx0TWVzc2FnZTogJ0FuZ2UgZGVhZGxpbmUnfSl9PlxuICAgICAgICAgIHsoZGVhZGxpbmUgfHwgc2hvd0NhbGVuZGFyKSA/XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICA8UmVhY3REYXRlUGlja2VyIHJlZj17ZWxlbSA9PiB0aGlzLmRhdGVQaWNrZXIgPSBlbGVtfVxuICAgICAgICAgICAgICAgICAgaWQ9XCJFZGl0VXNlclRhc2s6ZGVhZGxpbmVcIlxuICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ9e2RlYWRsaW5lICYmIG1vbWVudChkZWFkbGluZSl9XG4gICAgICAgICAgICAgICAgICBhdXRvRm9jdXM9e3Nob3dDYWxlbmRhcn1cbiAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQ9XCJZWVlZLU1NLUREXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17ZXhwaXJlZCA/IFwiZXhwaXJlZFwiIDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgICAgICAgc2hvd1dlZWtOdW1iZXJzPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgbG9jYWxlPXtpbnRsLmxvY2FsZX1cbiAgICAgICAgICAgICAgICAgIHBvcHBlclBsYWNlbWVudD17aXNDdXN0b21UYXNrID8gXCJ0b3Atc3RhcnRcIiA6IFwiYm90dG9tLXN0YXJ0XCJ9XG4gICAgICAgICAgICAgICAgICBvbkJsdXI9eygpPT50aGlzLnNldFN0YXRlKHtzaG93Q2FsZW5kYXI6IGZhbHNlfSl9XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dmFsdWU9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgZGVhZGxpbmU6IHZhbHVlICYmIHZhbHVlLmZvcm1hdChcIllZWVktTU0tRERcIiksXG4gICAgICAgICAgICAgICAgICAgICAgc2hvd0NhbGVuZGFyOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZGVsZXRlRGF0ZVwiIGhyZWY9XCIjXCIgdGl0bGU9e2ludGwuZm9ybWF0TWVzc2FnZSh7aWQ6ICd0YXNrLnJlbW92ZURlYWRsaW5lJywgZGVmYXVsdE1lc3NhZ2U6ICdUYSBib3J0IGRlYWRsaW5lJ30pfSBvbkNsaWNrPXtldj0+e1xuICAgICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2RlYWRsaW5lOiBudWxsLCBzaG93Q2FsZW5kYXI6IGZhbHNlfSk7XG4gICAgICAgICAgICAgICAgfX0+PC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PiA6XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcFwiIHJlZj17KCk9Pnt0aGlzLmRhdGVQaWNrZXIgPSBudWxsfX0+XG4gICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17ZXYgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0ZVBpY2tlcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGVQaWNrZXIuc2V0T3Blbih0cnVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICBzaG93Q2FsZW5kYXI6IHRydWVcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNhbGVuZGFyXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5zZXREZWFkbGluZUxhYmVsXCIgZGVmYXVsdE1lc3NhZ2U9XCJBbmdlIGRlYWRsaW5lLi4uXCIvPlxuICAgICAgICAgICAgICA8L2E+ICAgICAgICAgICAgICBcbiAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgPC9Gb3JtRmllbGQ+XG4gICAgICA8Rm9ybUZpZWxkIGxhYmVsPXtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiAndGFzay5zdWJUYXNrcycsIGRlZmF1bHRNZXNzYWdlOiAnVW5kZXJ1cHBnaWZ0ZXInfSl9ID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJsZWFybmluZ0dvYWxUYXNrc1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxuXG4gICAgICAgICAgICAgIHtzdWJUYXNrcyAmJiBzdWJUYXNrcy5tYXAoc3ViVGFzayA9PiA8ZGl2IGtleT17c3ViVGFzay5pZH0gY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+PGFcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT50aGlzLmVkaXRTdWJUYXNrKHN1YlRhc2spfVxuICAgICAgICAgICAgICAgICAgaHJlZj1cIiNcIj57c3ViVGFzay5uYW1lfTwvYT48L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidG9wXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGlkPVwiRWRpdFVzZXJUYXNrOmFkZFN1YlRhc2tcIiBjbGFzc05hbWU9XCJidG5cIlxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5hZGRTdWJUYXNrKCl9PlxuICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRhc2suYWRkU3VidGFza1wiIGRlZmF1bHRNZXNzYWdlPVwiTMOkZ2cgdGlsbCB1bmRlcnVwcGdpZnRcIi8+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L0Zvcm1GaWVsZD5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGl2aWRlciBsYXJnZVwiIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsQnV0dG9uIHRvcFwiPlxuICAgICAgICAgIDxidXR0b24gdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWRlZmF1bHRcIlxuICAgICAgICAgICAgb25DbGljaz17KCk9PntcbiAgICAgICAgICAgICAgaXNNb2RpZmllZCA/IG9uVXBkYXRlKHVzZXJUYXNrID0+IHtcbiAgICAgICAgICAgICAgICB1c2VyVGFzay5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICB1c2VyVGFzay5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIHVzZXJUYXNrLnVybCA9IHVybDtcbiAgICAgICAgICAgICAgICB1c2VyVGFzay5kZWFkbGluZSA9IGRlYWRsaW5lO1xuICAgICAgICAgICAgICB9KSA6IHRoaXMucHJvcHMuY2xvc2VEaWFsb2coKTtcbiAgICAgICAgICAgIH19PjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVcIiBkZWZhdWx0TWVzc2FnZT1cIlNwYXJhXCIvPiBcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsQnV0dG9uIHRvcFwiPlxuICAgICAgICAgIDxidXR0b24gdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICBjbGFzc05hbWU9XCJidG5cIlxuICAgICAgICAgICAgb25DbGljaz17KCk9PntcbiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jbG9zZURpYWxvZygpO1xuICAgICAgICAgICAgfX0+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uY2FuY2VsXCIgZGVmYXVsdE1lc3NhZ2U9XCJBdmJyeXRcIi8+PC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbmZpcm0gdG9wIHB1bGwtcmlnaHRcIj5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0YWJJbmRleD17MX1cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZ1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKT0+e1xuICAgICAgICAgICAgICBvbkRlbGV0ZShpZCk7XG4gICAgICAgICAgICB9fT57aXNDdXN0b21UYXNrID9cbiAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ0YXNrLnJlbW92ZVdvcmtHb2Fsc1wiIGRlZmF1bHRNZXNzYWdlPVwiVGEgYm9ydCBhcmJldHNtw6VsXCIvPiA6XG4gICAgICAgICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGFzay5yZW1vdmVUaGlzVGFza1wiIGRlZmF1bHRNZXNzYWdlPVwiVGEgYm9ydCBkZW4gaMOkciB1cHBnaWZ0ZW5cIi8+XG4gICAgICAgICAgfTwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgXG4gICAgICB7Lyo8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9e2V2ID0+IG9uRGVsZXRlKGlkKX0+XG4gICAgICAgIHtMYFRhIGJvcnQgYXJiZXRzbcOlbGB9PC9kaXY+XG4gICAgICB7aXNNb2RpZmllZCAmJlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZSBidG4tZGVmYXVsdFwiXG4gICAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgICAgb25DbGljaz17KCk9Pm9uVXBkYXRlKHVzZXJUYXNrID0+IHtcbiAgICAgICAgICAgIHVzZXJUYXNrLm5hbWUgPSBuYW1lO1xuICAgICAgICAgICAgdXNlclRhc2suZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgICAgICAgICAgIHVzZXJUYXNrLnVybCA9IHVybDtcbiAgICAgICAgICB9KX0+IFNwYXJhPC9kaXY+fSovfVxuICAgIDwvZGl2PlxuICB9XG59XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFVzZXJUYXNrc0JveCB9IGZyb20gJy4vdXNlci10YXNrcy1ib3gnO1xuaW1wb3J0IHsgVXNlclRhc2ssIFVzZXJTdWJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCwgSHR0cEVycm9yIH0gZnJvbSBcImtlZGJhY2tlbmQvY2xpZW50XCI7XG5pbXBvcnQgeyByZWZpbmUsIFZpcnR1YWxMZWFybmluZ0dvYWwgfSBmcm9tICcuL3JlZmluZXInO1xuaW1wb3J0IHsgRW52IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IEwsIGNvbXBhcmVQcm9wIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuLy9pbXBvcnQgeyBDdXN0b21Hb2FsIH0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuaW1wb3J0IHsgVFNPTiB9IGZyb20gJy4uLy4uL3V0aWxzL3Rzb24nO1xuaW1wb3J0IHsgV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSB9IGZyb20gJy4vd2Vla3BsYW5uZXItcGVyc2lzdGVkLXN0YXRlJztcbmltcG9ydCB7IFJlbW92ZUl0ZW0gfSBmcm9tICcuLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9yZW1vdmUtaXRlbSc7XG5pbXBvcnQgeyBEaWFsb2dzIH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL2RpYWxvZ3MnO1xuaW1wb3J0IHsgQWRkQ3VzdG9tR29hbCB9IGZyb20gJy4vYWRkLWN1c3RvbS1nb2FsJztcbmltcG9ydCB7IEFkZEN1c3RvbVRhc2sgfSBmcm9tICcuL2FkZC1jdXN0b20tdGFzayc7XG5pbXBvcnQgeyBFZGl0VXNlclRhc2sgfSBmcm9tICcuL2VkaXQtdXNlci10YXNrJztcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICcuLi9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zcGlubmVyJztcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveCc7XG5pbXBvcnQgeyBQZW5kaW5nSm9iIH0gZnJvbSAnLi4vLi4vdXRpbHMvcGVuZGluZy1qb2InO1xuaW1wb3J0IHsgQWRkT3JFZGl0U3ViVGFzayB9IGZyb20gJy4vYWRkLW9yLWVkaXQtc3ViLXRhc2snO1xuaW1wb3J0IHsgZ2V0QWRqdXN0ZWRXZWVrLCBLRURXZWVrIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Vla3V0aWwnO1xuaW1wb3J0IHsgRm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHtMYW5ndWFnZUNvbnRleHR9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuXG5jb25zdCBNQVhfU1RSQVRFR1lfTEVOR1RIID0gMTYzODQ7XG5jb25zdCBNQVhfQVNTRVNTTUVOVF9MRU5HVEggPSAxNjM4NDtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdmlld0NvdXJzZVVybDogc3RyaW5nO1xuICBlbnY6IEVudjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgd2Vla0RhdGU6IG51bWJlcjtcbiAgZGlhbG9nczogYW55W107XG4gIHVzZXJUYXNrczogVXNlclRhc2tbXTtcbiAgb3BlbkNvdXJzZXM6IHsgW3BhdGg6IHN0cmluZ106IGJvb2xlYW4gfVxuICBzdHJhdGVneT86IHN0cmluZztcbiAgYXNzZXNzbWVudD86IHN0cmluZztcbiAgd2Vla1RleHRzVVQ6IFVzZXJUYXNrIHwgbnVsbDtcbiAgc2F2aW5nOiBib29sZWFuO1xuICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gIGlzQ29weWluZ1Rhc2tzOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgV2Vla1BsYW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHdlZWtUZXh0c1NhdmluZ0pvYjogUGVuZGluZ0pvYjtcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdXNlclRhc2tzOiBbXSxcbiAgICAgIHdlZWtEYXRlOiBEYXRlLm5vdygpLFxuICAgICAgb3BlbkNvdXJzZXM6IHt9LFxuICAgICAgZGlhbG9nczogW10sXG4gICAgICBzYXZpbmc6IGZhbHNlLFxuICAgICAgd2Vla1RleHRzVVQ6IG51bGwsXG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICBpc0NvcHlpbmdUYXNrczogZmFsc2VcbiAgICB9XG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLndlZWtUZXh0c1NhdmluZ0pvYiA9IG5ldyBQZW5kaW5nSm9iKCgpPT50aGlzLnNhdmVXZWVrVGV4dHMoKSk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnN1YnNjcmliZSh0aGlzLm9uQ2hhbmdlKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8udW5zdWJzY3JpYmUodGhpcy5vbkNoYW5nZSk7XG4gICAgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2Iuc3RvcCgpO1xuICB9XG5cbiAgb25DaGFuZ2UodXNlclRhc2tzOiBVc2VyVGFza1tdLCBwZXJzaXN0ZWQ6IFdlZWtQbGFubmVyUGVyc2lzdGVkU3RhdGUsIHdlZWtUZXh0c1VUOiBVc2VyVGFzaykge1xuICAgIGNvbnN0IG5ld1N0YXRlIDogUGFydGlhbDxTdGF0ZT4gPSB7XG4gICAgICB1c2VyVGFza3MsXG4gICAgICB3ZWVrRGF0ZTogcGVyc2lzdGVkLndlZWtEYXRlLFxuICAgICAgb3BlbkNvdXJzZXM6IHBlcnNpc3RlZC5vcGVuQ291cnNlcyxcbiAgICAgIHdlZWtUZXh0c1VULFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZVxuICAgIH1cbiAgICBpZiAoIXRoaXMuc3RhdGUud2Vla1RleHRzVVQgfHwgKHdlZWtUZXh0c1VULmRhdGVUaW1lICE9PSB0aGlzLnN0YXRlLndlZWtUZXh0c1VULmRhdGVUaW1lKSkge1xuICAgICAgLy8gQ2hhbmdpbmcgd2Vlay4gUmVzZXQgdG8gbmV3IHdlZWsncyB2YWx1ZXNcbiAgICAgIG5ld1N0YXRlLnN0cmF0ZWd5ID0gd2Vla1RleHRzVVQud2Vla1RleHRzLnN0cmF0ZWd5O1xuICAgICAgbmV3U3RhdGUuYXNzZXNzbWVudCA9IHdlZWtUZXh0c1VULndlZWtUZXh0cy5hc3Nlc3NtZW50O1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlIGFzIGFueSk7IC8vIFJlYWN0J3MgdXNlIG9mIFBpY2sgaW5zdGVhZCBvZiBQYXJ0aWFsIG1ha2VzIHRoaW5ncyBjb21wbGV4IGhlcmUuXG4gIH1cblxuICBpc1dlZWtUZXh0c0VkaXRlZCgpIHtcbiAgICBjb25zdCB7IHN0cmF0ZWd5LCBhc3Nlc3NtZW50LCB3ZWVrVGV4dHNVVCB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gISF3ZWVrVGV4dHNVVCAmJiAoc3RyYXRlZ3kgIT09IHdlZWtUZXh0c1VULndlZWtUZXh0cy5zdHJhdGVneSB8fCBhc3Nlc3NtZW50ICE9PSB3ZWVrVGV4dHNVVC53ZWVrVGV4dHMuYXNzZXNzbWVudCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNhdmVXZWVrVGV4dHMoKSB7XG4gICAgY29uc29sZS5sb2coXCJTYXZpbmcgdGV4dHMuLi5cIik7XG4gICAgY29uc3QgeyBzdHJhdGVneSwgYXNzZXNzbWVudCwgd2Vla1RleHRzVVQgfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKHRoaXMuaXNXZWVrVGV4dHNFZGl0ZWQoKSkge1xuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby51cHNlcnQod2Vla1RleHRzVVQsIHV0ID0+IHtcbiAgICAgICAgdXQud2Vla1RleHRzID0geyBzdHJhdGVneSwgYXNzZXNzbWVudCB9O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJldldlZWsoKSB7XG4gICAgLy90aGlzLnNhdmVXZWVrVGV4dHMoKTtcbiAgICB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLmNoYW5nZVdlZWsobW9tZW50KHRoaXMuc3RhdGUud2Vla0RhdGUpLmFkZCgtMSwgJ3dlZWsnKS50b0RhdGUoKSk7XG4gIH1cblxuICBuZXh0V2VlaygpIHtcbiAgICAvL3RoaXMuc2F2ZVdlZWtUZXh0cygpO1xuICAgIHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uY2hhbmdlV2Vlayhtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkuYWRkKDEsICd3ZWVrJykudG9EYXRlKCkpO1xuICB9XG5cbiAgb3BlbkRpYWxvZyhkaWFsb2cpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogWy4uLnRoaXMuc3RhdGUuZGlhbG9ncywgZGlhbG9nXSB9KTtcbiAgfVxuXG4gIG9wZW5BZGRHb2FsRGlhbG9nKCkge1xuICAgIHRoaXMub3BlbkRpYWxvZyg8QWRkQ3VzdG9tR29hbFxuICAgICAgb25TYXZlPXthc3luYyAobGVhcm5pbmdHb2FsOiBzdHJpbmcpID0+IHtcbiAgICAgICAgaWYgKCFsZWFybmluZ0dvYWwpIHRocm93IG5ldyBFcnJvciAodGhpcy5jb250ZXh0LmludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J3dlZWtwbGFubmVyLmVtcHR5TGVhcm5pbmdHb2FsRXJyJywgZGVmYXVsdE1lc3NhZ2U6ICdMw6RyYW5kZW3DpWxldCBrYW4gaW50ZSB2YXJhIHRvbXQnfSkpO1xuICAgICAgICBpZiAoIXRoaXMuc3RhdGUuc2F2aW5nKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNhdmluZzogdHJ1ZSB9KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hZGRDdXN0b21Hb2FsKGxlYXJuaW5nR29hbCk7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzYXZpbmc6IGZhbHNlIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIH1cbiAgICAgIH19IC8+KTtcbiAgfVxuXG4gIG9wZW5BZGRPd25UYXNrRGlhbG9nKGNvdXJzZU5hbWU6IHN0cmluZywgbGVhcm5pbmdHb2FsTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vcGVuRGlhbG9nKDxBZGRDdXN0b21UYXNrXG4gICAgICBpc1Rhc2s9eyFjb3Vyc2VOYW1lfVxuICAgICAgb25TYXZlPXthc3luYyAobmFtZTogc3RyaW5nLCBkZXNjcmlwdGlvbjogc3RyaW5nLCB1cmw6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoIW5hbWUpIHRocm93IG5ldyBFcnJvciAodGhpcy5jb250ZXh0LmludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J3dlZWtwbGFubmVyLm5hbWVDYW5ub3RCZUVtcHR5JywgZGVmYXVsdE1lc3NhZ2U6ICdOYW1uZXQga2FuIGludGUgdmFyYSB0b210J30pKTtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnNhdmluZykge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzYXZpbmc6IHRydWUgfSk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkQ3VzdG9tVGFzayhjb3Vyc2VOYW1lLCBsZWFybmluZ0dvYWxOYW1lLCBuYW1lLCBkZXNjcmlwdGlvbiwgdXJsKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHNhdmluZzogZmFsc2UgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuY2xvc2VEaWFsb2coKTtcbiAgICAgICAgfVxuICAgICAgfX0gLz4pO1xuICB9XG5cbiAgZWRpdFRhc2sodXNlclRhc2s6IFVzZXJUYXNrKSB7XG4gICAgdGhpcy5vcGVuRGlhbG9nKDxFZGl0VXNlclRhc2tcbiAgICAgIHVzZXJUYXNrc1JlcG89e3RoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG99XG4gICAgICB1c2VyVGFzaz17dXNlclRhc2t9XG4gICAgICBvblVwZGF0ZT17YXN5bmMgKHVwZGF0ZXI6ICh1dDogVXNlclRhc2spID0+IHZvaWQpID0+IHtcbiAgICAgICAgY29uc3QgdGVzdCA9IHsuLi51c2VyVGFza307XG4gICAgICAgIHVwZGF0ZXIodGVzdCk7XG4gICAgICAgIGlmICghdGVzdC5uYW1lKSB0aHJvdyBuZXcgRXJyb3IgKHRoaXMuY29udGV4dC5pbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOid3ZWVrcGxhbm5lci5uYW1lTXVzdE5vdEJlRW1wdHknLCBkZWZhdWx0TWVzc2FnZTogJ05hbW5ldCBmw6VyIGludGUgdmFyYSB0b210J30pKTtcbiAgICAgICAgdGhpcy5jbG9zZURpYWxvZygpO1xuICAgICAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnVwZGF0ZShbdXNlclRhc2tdLCB1cGRhdGVyKTtcbiAgICAgIH19XG4gICAgICBvbkRlbGV0ZT17YXN5bmMgaWQgPT4ge1xuICAgICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uZGVsZXRlKFtpZF0pO1xuICAgICAgfX1cbiAgICAgIG9wZW5EaWFsb2c9e2RpYWxvZz0+dGhpcy5vcGVuRGlhbG9nKGRpYWxvZyl9XG4gICAgICBjbG9zZURpYWxvZz17KCk9PnRoaXMuY2xvc2VEaWFsb2coKX1cbiAgICAvPik7XG4gIH1cblxuICBlZGl0U3ViVGFzayh1c2VyVGFzazogVXNlclRhc2ssIHN1YlRhc2s6IFVzZXJTdWJUYXNrKSB7XG4gICAgdGhpcy5vcGVuRGlhbG9nKDxBZGRPckVkaXRTdWJUYXNrXG4gICAgICB1c2VyVGFza3NSZXBvPXt0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvfVxuICAgICAgbW9kZT1cImVkaXRcIlxuICAgICAgdXNlclRhc2s9e3VzZXJUYXNrfVxuICAgICAgc3ViVGFzaz17c3ViVGFza31cbiAgICAgIGNsb3NlRGlhbG9nPXsoKT0+dGhpcy5jbG9zZURpYWxvZygpfVxuICAgIC8+KTtcbiAgfVxuXG4gIGNsb3NlRGlhbG9nKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBkaWFsb2dzOiB0aGlzLnN0YXRlLmRpYWxvZ3Muc2xpY2UoMCwgdGhpcy5zdGF0ZS5kaWFsb2dzLmxlbmd0aCAtIDEpIH0pO1xuICB9XG5cblxuXG4gIGFzeW5jIGFkZEN1c3RvbUdvYWwobGVhcm5pbmdHb2FsOiBzdHJpbmcpIHtcbiAgICBsZXQgbGF0ZXN0VGltZVN0YW1wID0gTWF0aC5tYXguYXBwbHkoXG4gICAgICBNYXRoLm1heCxcbiAgICAgIFt0aGlzLnN0YXRlLndlZWtEYXRlXS5jb25jYXQodGhpcy5zdGF0ZS51c2VyVGFza3MubWFwKHQgPT4gdC5kYXRlVGltZSkpKTtcblxuICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uaW5zZXJ0KFt7XG4gICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgbGVhcm5pbmdHb2FsLFxuICAgICAgZGF0ZVRpbWU6IGxhdGVzdFRpbWVTdGFtcCArIDIwMDBcbiAgICB9XSk7XG5cbiAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFdlZWtQbGFubmVyQm94T3BlbihcIlwiLCB0cnVlKTtcbiAgfVxuXG4gIGFzeW5jIHJlbW92ZUxlYXJuaW5nR29hbChsZWFybmluZ0dvYWw6IFZpcnR1YWxMZWFybmluZ0dvYWwpIHtcbiAgICBpZiAobGVhcm5pbmdHb2FsLnRhc2tzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICghY29uZmlybSh0aGlzLmNvbnRleHQuaW50bC5mb3JtYXRNZXNzYWdlKHtpZDond2Vla3BsYW5uZXIuY29uZmlybVJlbW92ZUxlYXJuaW5nT2JqZWN0aXZlcycsIGRlZmF1bHRNZXNzYWdlOiAnVGEgYm9ydCBsw6RyYW5kZW3DpWwgc2FtdCB7bGVhcm5pbmdHb2Fsc051bWJlcn0gdXBwZ2lmdGVyPyd9LCB7bGVhcm5pbmdHb2Fsc051bWJlcjogbGVhcm5pbmdHb2FsLnRhc2tzLmxlbmd0aH0pKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGF3YWl0IHRoaXMucHJvcHMuZW52LnVzZXJUYXNrc1JlcG8uZGVsZXRlKGxlYXJuaW5nR29hbC5hbGxUYXNrcy5tYXAodCA9PiB0LmlkKSk7XG4gIH1cblxuICBhc3luYyBhZGRDdXN0b21UYXNrKGNvdXJzZU5hbWU6IHN0cmluZywgbGVhcm5pbmdHb2FsOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgdXJsOiBzdHJpbmcpIHtcbiAgICBsZXQgbGF0ZXN0VGltZVN0YW1wID0gTWF0aC5tYXguYXBwbHkoXG4gICAgICBNYXRoLm1heCxcbiAgICAgIFt0aGlzLnN0YXRlLndlZWtEYXRlXS5jb25jYXQodGhpcy5zdGF0ZS51c2VyVGFza3MubWFwKHQgPT4gdC5kYXRlVGltZSkpKTtcblxuICAgIC8qY29uc3QgZW1wdHlMZWFybmluZ0dvYWxQbGFjZWhvbGRlciA9IHRoaXMuc3RhdGUudXNlclRhc2tzLmZpbmQodXQgPT5cbiAgICAgIHV0Lm5hbWUgPT0gbnVsbCAmJlxuICAgICAgIXV0LmNvdXJzZU5hbWUgJiZcbiAgICAgIHV0LmxlYXJuaW5nR29hbCA9PT0gbGVhcm5pbmdHb2FsKTtcblxuICAgIGlmIChlbXB0eUxlYXJuaW5nR29hbFBsYWNlaG9sZGVyKSB7XG4gICAgICAvLyBIaWphY2sgbGVhcm5pbmctZ29hbCBwbGFjZWhvbGRlciBhbmQgbWFrZSBpdCB0aGUgcmVhbCB0YXNrLlxuICAgICAgLy8gVGhpcyB3aWxsIG1ha2UgdGhlIGxlYXJuaW5nIGdvYWwgZGlzYXBwZWFyIG9uY2UgdGhpcyB0YXNrXG4gICAgICAvLyBpcyBkZWxldGVkLlxuICAgICAgYXdhaXQgdXNlclRhc2tzUmVwby51cGRhdGUoW2VtcHR5TGVhcm5pbmdHb2FsUGxhY2Vob2xkZXJdLCB1dCA9PiB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24odXQsIHsgbmFtZSwgZGVzY3JpcHRpb24sIHVybCB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7Ki9cbiAgICAgIC8vIEFkZCBhbm90aGVyIHRhc2sgdG8gc2FtZSBsZWFybmluZy1nb2FsXG4gICAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLmluc2VydChbe1xuICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICBkYXRlVGltZTogbGF0ZXN0VGltZVN0YW1wICsgMjAwMCxcbiAgICAgICAgY291cnNlTmFtZSxcbiAgICAgICAgbGVhcm5pbmdHb2FsLFxuICAgICAgICBuYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbixcbiAgICAgICAgdXJsXG4gICAgICB9XSk7XG4gICAgLy99XG4gIH1cblxuICBzZXRJc09wZW4oY291cnNlTmFtZTogc3RyaW5nLCBpc09wZW46IGJvb2xlYW4pIHtcbiAgICB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFdlZWtQbGFubmVyQm94T3Blbihjb3Vyc2VOYW1lLCBpc09wZW4pO1xuICB9XG5cbiAgYXN5bmMgc2V0VGFza0RvbmUodGFzazogVXNlclRhc2ssIGRvbmU6IGJvb2xlYW4pIHtcbiAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFRhc2tEb25lU3RhdGUodGFzaywgZG9uZSk7XG4gIH1cblxuICBhc3luYyBzZXRTdWJUYXNrRG9uZSh0YXNrOiBVc2VyVGFzaywgc3ViVGFzazogVXNlclN1YlRhc2ssIGRvbmU6IGJvb2xlYW4pIHtcbiAgICBhd2FpdCB0aGlzLnByb3BzLmVudi51c2VyVGFza3NSZXBvLnNldFN1YlRhc2tEb25lU3RhdGUodGFzaywgc3ViVGFzay5pZCwgZG9uZSk7XG4gIH1cblxuICBhc3luYyBjb3B5RnJvbVByZXZpb3VzV2VlaygpIHtcbiAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtpc0NvcHlpbmdUYXNrczogdHJ1ZX0pO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHVzZXJUYXNrcywgb3BlbkNvdXJzZXMsIHdlZWtEYXRlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgICBjb25zdCBwcmV2V2Vla05vID0gZ2V0QWRqdXN0ZWRXZWVrIChtb21lbnQod2Vla0RhdGUpLmFkZCgtMSwgJ3dlZWsnKSwgKTtcbiAgICAgIGNvbnN0IHByZXZLRURXZWVrID0gS0VEV2Vlayhtb21lbnQod2Vla0RhdGUpLnllYXIoKSwgcHJldldlZWtObyk7XG4gICAgICAvLyBSZWFkIGxhc3Qgd2VlaydzIGdvYWxzIGFuZCB0YXNrc1xuICAgICAgbGV0IHByZXZUYXNrcyA9IGF3YWl0IHRoaXMucHJvcHMuZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxVc2VyVGFzaz4oXCJ1c2VydGFza3NcIiwge1xuICAgICAgICBmcm9tOiBwcmV2S0VEV2Vlay5ub3RCZWZvcmUsXG4gICAgICAgIHRvOiBwcmV2S0VEV2Vlay5ub3RBZnRlcixcbiAgICAgICAgcm9sZTogXCJVU0VSXCIsXG4gICAgICAgIGluY2x1ZGU6IFtcInRhc2tcIiwgXCJjb3Vyc2VcIiwgXCJhY2xcIl0sXG4gICAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXVxuICAgICAgfSk7XG4gICAgICBwcmV2VGFza3MgPSBwcmV2VGFza3NcbiAgICAgICAgLmZpbHRlcihwcmV2VGFzayA9PiAhcHJldlRhc2suZG9uZSkgIC8vIERvbid0IGNvcHkgZG9uZSB0YXNrc1xuICAgICAgICAuZmlsdGVyKHByZXZUYXNrID0+ICEhcHJldlRhc2submFtZSkgLy8gRG9uJ3QgY29weSBlbXB0eSBsZWFybmluZyBnb2Fsc1xuICAgICAgICAuZmlsdGVyKHByZXZUYXNrID0+ICF1c2VyVGFza3Muc29tZSh0YXNrT2ZDdXJyZW50V2VlayA9PlxuICAgICAgICAgIHRhc2tPZkN1cnJlbnRXZWVrLm5hbWUgPT09IHByZXZUYXNrLm5hbWUgJiZcbiAgICAgICAgICB0YXNrT2ZDdXJyZW50V2Vlay5sZWFybmluZ0dvYWwgPT09IHByZXZUYXNrLmxlYXJuaW5nR29hbCAmJlxuICAgICAgICAgIHRhc2tPZkN1cnJlbnRXZWVrLmNvdXJzZU5hbWUgPT09IHByZXZUYXNrLmNvdXJzZU5hbWUpKTsgLy8gSWdub3JlIGlkZW50aWNhbCB0YXNrcyAoYWxyZWFkeSBjb3BpZWQpXG5cbiAgICAgIC8vIE5vdyBjcmVhdGUgY29waWVzIGJ1dCBwbGFjZSB0aGVtIGluIHRoZSBjdXJyZW50IHdlZWsuXG4gICAgICBsZXQgbGF0ZXN0VGltZVN0YW1wID0gTWF0aC5tYXguYXBwbHkoTWF0aC5tYXgsIFt3ZWVrRGF0ZV0uY29uY2F0KHVzZXJUYXNrcy5tYXAodCA9PiB0LmRhdGVUaW1lKSkpO1xuXG4gICAgICBjb25zdCBjb3BpZXMgPSBwcmV2VGFza3Muc29ydChjb21wYXJlUHJvcChcImRhdGVUaW1lXCIpKS5tYXAodGFzayA9PiB7XG4gICAgICAgIGNvbnN0IGNvcHk6IFVzZXJUYXNrID0geyAuLi50YXNrLCBkYXRlVGltZTogbGF0ZXN0VGltZVN0YW1wICs9IDEwMDAgfTtcbiAgICAgICAgY29weS5pZCA9IGNyZWF0ZVVVSUQoKTtcbiAgICAgICAgaWYgKGNvcHkuc3ViVGFza3MpIHtcbiAgICAgICAgICBjb3B5LnN1YlRhc2tzID0gY29weS5zdWJUYXNrcy5maWx0ZXIoc3QgPT4gIXN0LmRvbmUpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBjb3B5LiRldGFnO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBTdG9yZSBpdFxuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5lbnYudXNlclRhc2tzUmVwby5pbnNlcnQoY29waWVzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7aXNDb3B5aW5nVGFza3M6IGZhbHNlfSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHdlZWtOdW1iZXIgPSBtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkud2VlaygpO1xuICAgIC8vY29uc29sZS5sb2coXCJXZWVreWRhdGU6IFwiICArIG5ldyBEYXRlKHRoaXMuc3RhdGUud2Vla0RhdGUpICsgXCIgd2hpY2ggaXMgd2VlayBubyBcIiArIHdlZWtOdW1iZXIpO1xuICAgIGNvbnN0IGN1cnJlbnRXZWVrID0gbW9tZW50KCkud2VlaygpO1xuICAgIGNvbnN0IHRhc2tTZXRzID0gcmVmaW5lKHRoaXMuc3RhdGUudXNlclRhc2tzKTtcbiAgICBjb25zdCB7IGRpYWxvZ3MsIHdlZWtUZXh0c1VULCBzdHJhdGVneSwgYXNzZXNzbWVudCwgaXNMb2FkaW5nLCBpc0NvcHlpbmdUYXNrcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpc1NhdmluZyA9IHdlZWtUZXh0c1VUICYmICh3ZWVrVGV4dHNVVC4kbWV0YSA9PT0gJ2FkZGluZycgfHwgd2Vla1RleHRzVVQuJG1ldGEgPT09ICd1cGRhdGluZycpO1xuICAgIGNvbnN0IGlzU3RyYXRlZ3lFZGl0ZWQgPSAhIXdlZWtUZXh0c1VUICYmIChzdHJhdGVneSAhPT0gd2Vla1RleHRzVVQud2Vla1RleHRzLnN0cmF0ZWd5KTtcbiAgICBjb25zdCBpc0Fzc2Vzc21lbnRFZGl0ZWQgPSAhIXdlZWtUZXh0c1VUICYmIChhc3Nlc3NtZW50ICE9PSB3ZWVrVGV4dHNVVC53ZWVrVGV4dHMuYXNzZXNzbWVudCk7XG4gICAgY29uc3QgZW5hYmxlU2F2ZUJ1dHRvbiA9ICFpc1NhdmluZyAmJiAoaXNTdHJhdGVneUVkaXRlZCB8fCBpc0Fzc2Vzc21lbnRFZGl0ZWQpO1xuICAgIHJldHVybiA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2BrZWRfYm94ZWQgd2Vla1BsYW5uZXIke3dlZWtOdW1iZXIgPT09IGN1cnJlbnRXZWVrID8gXCIgY3VycmVudFdlZWtcIiA6IFwiXCJ9YH1cbiAgICAgICAgb25LZXlEb3duPXtldiA9PiB7XG4gICAgICAgICAgaWYgKGV2LndoaWNoID09PSA4MyAmJiBldi5jdHJsS2V5KSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKCFpc1NhdmluZyAmJiB0aGlzLmlzV2Vla1RleHRzRWRpdGVkKCkpIHtcbiAgICAgICAgICAgICAgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2IudHJpZ2dlckNoYW5nZSgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH19PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YHdlZWtTZWxlY3RgfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XG4gICAgICAgICAgICA8cD48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLndlZWtOdW1iZXJcIiB2YWx1ZXM9e3t3ZWVrTnVtYmVyOiB3ZWVrTnVtYmVyfX0gZGVmYXVsdE1lc3NhZ2U9XCJWZWNrYSB7d2Vla051bWJlcn1cIi8+PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCkgPT4gdGhpcy5wcmV2V2VlaygpfT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1sZWZ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKSA9PiB0aGlzLm5leHRXZWVrKCl9PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLXJpZ2h0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8aDQ+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5sb2dCb29rXCIgIGRlZmF1bHRNZXNzYWdlPVwiTG9nZ2Jva1wiLz48L2g0PlxuICAgICAgICB7dGFza1NldHMubGVuZ3RoID4gMCAmJiA8aHIgLz59XG5cbiAgICAgICAge3Rhc2tTZXRzLm1hcChwcm9wcyA9PlxuICAgICAgICAgIDxVc2VyVGFza3NCb3hcbiAgICAgICAgICAgIGtleT17cHJvcHMuY291cnNlTmFtZX1cbiAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgIGNvdXJzZU5hbWU9e3Byb3BzLmNvdXJzZU5hbWV9XG4gICAgICAgICAgICBsZWFybmluZ0dvYWxzPXtwcm9wcy5sZWFybmluZ0dvYWxzfVxuICAgICAgICAgICAgdmlld0NvdXJzZVVybD17dGhpcy5wcm9wcy52aWV3Q291cnNlVXJsfVxuICAgICAgICAgICAgb3BlbkNvdXJzZXM9e3RoaXMuc3RhdGUub3BlbkNvdXJzZXN9XG4gICAgICAgICAgICBhZGRPd25UYXNrPXsoY291cnNlTmFtZTogc3RyaW5nLCBsZWFybmluZ0dvYWxOYW1lOiBzdHJpbmcpID0+IHRoaXMub3BlbkFkZE93blRhc2tEaWFsb2coY291cnNlTmFtZSwgbGVhcm5pbmdHb2FsTmFtZSl9XG4gICAgICAgICAgICBzZXRJc09wZW49e3RoaXMuc2V0SXNPcGVuLmJpbmQodGhpcyl9XG4gICAgICAgICAgICBzZXRUYXNrRG9uZT17dGhpcy5zZXRUYXNrRG9uZS5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgc2V0U3ViVGFza0RvbmU9e3RoaXMuc2V0U3ViVGFza0RvbmUuYmluZCh0aGlzKX1cbiAgICAgICAgICAgIGVkaXRUYXNrPXt0YXNrID0+IHRoaXMuZWRpdFRhc2sodGFzayl9XG4gICAgICAgICAgICBlZGl0U3ViVGFzaz17KHRhc2ssIHN1YlRhc2spID0+IHRoaXMuZWRpdFN1YlRhc2sodGFzaywgc3ViVGFzayl9XG4gICAgICAgICAgICByZW1vdmVMZWFybmluZ0dvYWw9e2xnID0+IHRoaXMucmVtb3ZlTGVhcm5pbmdHb2FsKGxnKX0gLz4pfVxuXG4gICAgICAgIDxociAvPlxuXG4gICAgICAgIHtpc0xvYWRpbmcgPyA8U3Bpbm5lciAvPiA6IDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXtldiA9PiB0aGlzLm9wZW5BZGRHb2FsRGlhbG9nKCl9PlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtbGlzdC1hbHRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLmxlYXJuaW5nR29hbFwiIGRlZmF1bHRNZXNzYWdlPVwiRWdldCBsw6RyYW5kZW3DpWxcIi8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG5cIiBzdHlsZT17aXNDb3B5aW5nVGFza3MgPyB7b3BhY2l0eTogMC41fSA6IHVuZGVmaW5lZH0gb25DbGljaz17ZXYgPT4gKCFpc0NvcHlpbmdUYXNrcykgJiYgdGhpcy5jb3B5RnJvbVByZXZpb3VzV2VlaygpfT5cbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWNsb25lXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5jb3B5UHJldmlvdXNXZWVrVGFrc1wiIGRlZmF1bHRNZXNzYWdlPVwiS29waWVyYSBlaiBrbGFyYSBmcsOlbiBmw7ZyZWfDpWVuZGUgdmVja2FcIi8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPE9wZW5DbG9zZUJveFxuICAgICAgICAgICAgdGl0bGU9ezxoNT48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLnN0cmF0ZWd5QW5kRXZhbHVhdGlvblwiIGRlZmF1bHRNZXNzYWdlPVwiU3RyYXRlZ2kgJiBVdHbDpHJkZXJpbmdcIi8+PC9oNT59XG4gICAgICAgICAgICBoZWFkZXJPcGVuPXt0aGlzLnN0YXRlLm9wZW5Db3Vyc2VzW1wiU3RyYXRVdHZcIl19XG4gICAgICAgICAgICBvbk9wZW5DbG9zZT17YmVjYW1lT3BlbiA9PiB0aGlzLnNldElzT3BlbihcIlN0cmF0VXR2XCIsIGJlY2FtZU9wZW4pfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxoMz48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cIndlZWtwbGFubmVyLnN0cmF0ZWd5XCIgZGVmYXVsdE1lc3NhZ2U9XCJTdHJhdGVnaVwiLz48L2gzPlxuICAgICAgICAgICAgPHA+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5zdHJhdGVneURlc2NyaXB0aW9uXCIgZGVmYXVsdE1lc3NhZ2U9XCJIdXIgamFnIHNrYSBnw7ZyYSBmw7ZyIGF0dCBsw6RyYSBtaWcuXCIvPjwvcD5cbiAgICAgICAgICAgIDxoci8+XG4gICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwid2Vla3BsYW5uZXItdGV4dGFyZWFcIlxuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5lbnYudHV0b3JlZH1cbiAgICAgICAgICAgICAgdmFsdWU9e3N0cmF0ZWd5ICYmIHN0cmF0ZWd5LnN1YnN0cigwLCBNQVhfU1RSQVRFR1lfTEVOR1RIKX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtzdHJhdGVneTogKGV2LnRhcmdldC52YWx1ZSB8fCAnJykuc3Vic3RyKDAsIE1BWF9TVFJBVEVHWV9MRU5HVEgpfSk7XG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2IudHJpZ2dlckNoYW5nZSg1MDApO1xuICAgICAgICAgICAgICB9fSAvPlxuXG4gICAgICAgICAgICA8aDM+PEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ3ZWVrcGxhbm5lci5ldmFsdWF0aW9uXCIgZGVmYXVsdE1lc3NhZ2U9XCJVdHbDpHJkZXJpbmdcIi8+PC9oMz5cbiAgICAgICAgICAgIDxwPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla3BsYW5uZXIuZXZhbHVhdGlvbkRlc2NyaXB0aW9uXCIgZGVmYXVsdE1lc3NhZ2U9XCJSZWZsZWt0aW9uIGtyaW5nIGRpbiBhcmJldHNpbnNhdHMgb2NoIGRpbmEgdmFsZGEgc3RyYXRlZ2llciB1bmRlciB2ZWNrYW4uVXR2w6RyZGVyYSBpIGbDtnJow6VsbGFuZGUgdGlsbCBkaW5hIG3DpWwuXCIvPjwvcD5cbiAgICAgICAgICAgIDxoci8+XG4gICAgICAgICAgICA8dGV4dGFyZWFcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwid2Vla3BsYW5uZXItdGV4dGFyZWFcIlxuICAgICAgICAgICAgICB2YWx1ZT17YXNzZXNzbWVudCAmJiBhc3Nlc3NtZW50LnN1YnN0cigwLCBNQVhfQVNTRVNTTUVOVF9MRU5HVEgpfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5lbnYudHV0b3JlZH1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHthc3Nlc3NtZW50OiAoZXYudGFyZ2V0LnZhbHVlIHx8ICcnKS5zdWJzdHIoMCwgTUFYX0FTU0VTU01FTlRfTEVOR1RIKX0pXG4gICAgICAgICAgICAgICAgdGhpcy53ZWVrVGV4dHNTYXZpbmdKb2IudHJpZ2dlckNoYW5nZSg1MDApO1xuICAgICAgICAgICAgICB9IH0vPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG5cIlxuICAgICAgICAgICAgICB0YWJJbmRleD17MH1cbiAgICAgICAgICAgICAgc3R5bGU9e2VuYWJsZVNhdmVCdXR0b24gPyB7fSA6IHtvcGFjaXR5OiAwLjV9fVxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+IWlzU2F2aW5nICYmIHRoaXMud2Vla1RleHRzU2F2aW5nSm9iLnRyaWdnZXJDaGFuZ2UoMCl9PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWZsb3BweS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgLz5cbiAgICAgICAgICAgICAgICAgIHtlbmFibGVTYXZlQnV0dG9uID8gPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJjb21tb24uc2F2ZVwiIGRlZmF1bHRNZXNzYWdlPVwiIFNwYXJhXCIvPiA6IDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmVkXCIgZGVmYXVsdE1lc3NhZ2U9XCIgU3BhcmFkXCIvPn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L09wZW5DbG9zZUJveD5cblxuICAgICAgICA8L2Rpdj59XG4gICAgICA8L2Rpdj5cbiAgICAgIDxEaWFsb2dzXG4gICAgICAgIGRpYWxvZ3M9e2RpYWxvZ3N9XG4gICAgICAgIHBvcERpYWxvZz17KCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgICAgICAgKHtkaWFsb2dzfSkgPT4gKHsgZGlhbG9nczogZGlhbG9ncy5zbGljZSgwLCBkaWFsb2dzLmxlbmd0aCAtIDEpIH0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLz5cbiAgICA8L2Rpdj5cbiAgfVxufSIsImltcG9ydCB7IFVzZXJUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgVXNlclRhc2tzQm94UHJvcHMgfSBmcm9tICcuL3VzZXItdGFza3MtYm94JztcbmltcG9ydCB7IGFycmF5VG9NYXAsIGFycmF5VG9Mb29rdXAsIGNvbXBhcmVQcm9wLCBMIH0gZnJvbSBcIi4uLy4uL3V0aWxzL3V0aWxzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlydHVhbExlYXJuaW5nR29hbCB7XG4gIG5hbWU6IHN0cmluZztcbiAgYWxsVGFza3M6IFVzZXJUYXNrW107XG4gIHN0ZXA/OiBudW1iZXI7XG4gIHVybD86IHN0cmluZztcbiAgdGFza3M6IFVzZXJUYXNrW107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWZpbmUodGFza3M6IFVzZXJUYXNrW10pIHtcbiAgY29uc3QgcmVzdWx0ID0gW10gYXMgUGFydGlhbDxVc2VyVGFza3NCb3hQcm9wcz5bXTtcbiAgY29uc3QgbWFwcGVyID0ge30gYXMgeyBbbmFtZTogc3RyaW5nXTogVXNlclRhc2tzQm94UHJvcHMgfTtcbiAgY29uc3QgdGFza3NQZXJDb3Vyc2UgPSBhcnJheVRvTG9va3VwKHRhc2tzLCB0ID0+IHQuY291cnNlTmFtZSB8fCAnJyk7XG4gIGZvciAoY29uc3QgY291cnNlTmFtZSBvZiBPYmplY3Qua2V5cyh0YXNrc1BlckNvdXJzZSkuc29ydCgpLmZpbHRlcih4ID0+IHgpLmNvbmNhdCh0YXNrc1BlckNvdXJzZVsnJ10gP1xuICAgIFsnJ10gOiBbXSkpIHtcbiAgICBjb25zdCBjb3Vyc2VUYXNrcyA9IHRhc2tzUGVyQ291cnNlW2NvdXJzZU5hbWVdIHx8IHRhc2tzUGVyQ291cnNlWycnXTtcbiAgICBjb25zdCB0YXNrc1BlckxlYXJuaW5nR29hbCA9IGFycmF5VG9Mb29rdXAoY291cnNlVGFza3MsIHQgPT4gdC5sZWFybmluZ0dvYWwpO1xuICAgIGNvbnN0IHJlc3VsdExlYXJuaW5nR29hbHM6IFZpcnR1YWxMZWFybmluZ0dvYWxbXSA9IFtdO1xuICAgIGZvciAoY29uc3QgbGVhcm5pbmdHb2FsIG9mIE9iamVjdC5rZXlzKHRhc2tzUGVyTGVhcm5pbmdHb2FsKSkge1xuICAgICAgY29uc3QgbGdUYXNrcyA9IHRhc2tzUGVyTGVhcm5pbmdHb2FsW2xlYXJuaW5nR29hbF0uc29ydChjb21wYXJlUHJvcChcImRhdGVUaW1lXCIpKTtcbiAgICAgIGNvbnN0IGxlYXJuaW5nR29hbFRhc2sgPSBsZ1Rhc2tzXG4gICAgICAgIC5maWx0ZXIodCA9PiB0Lm5hbWUgPT0gbnVsbCkgLy8gSWYgbmFtZSBpcyB1bmRlZmluZWQgb3IgbnVsbCwgdGhpcyByZXByZXNlbnRzIGEgbGVhcm5pbmcgZ29hbFxuICAgICAgICBbMF07XG4gICAgICBjb25zdCB1cmwgPSBsZWFybmluZ0dvYWxUYXNrICYmIGxlYXJuaW5nR29hbFRhc2sudXJsO1xuICAgICAgcmVzdWx0TGVhcm5pbmdHb2Fscy5wdXNoKHtcbiAgICAgICAgbmFtZTogbGVhcm5pbmdHb2FsLFxuICAgICAgICBhbGxUYXNrczogbGdUYXNrcyxcbiAgICAgICAgdXJsLFxuICAgICAgICBzdGVwOiBsZ1Rhc2tzLm1hcCh0ID0+IHQuc3RlcCkuZmlsdGVyKHN0ZXAgPT4gc3RlcClbMF0sXG4gICAgICAgIHRhc2tzOiBsZ1Rhc2tzLmZpbHRlcih0ID0+IHQubmFtZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXN1bHQucHVzaCh7XG4gICAgICBjb3Vyc2VOYW1lLFxuICAgICAgbGVhcm5pbmdHb2FsczogcmVzdWx0TGVhcm5pbmdHb2Fsc1xuICAgIH0pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQge0ludGxQcm92aWRlciwgYWRkTG9jYWxlRGF0YX0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgbG9jYWxlX2VuIGZyb20gJ3JlYWN0LWludGwvbG9jYWxlLWRhdGEvZW4nO1xuaW1wb3J0IGxvY2FsZV9zdiBmcm9tICdyZWFjdC1pbnRsL2xvY2FsZS1kYXRhL3N2JztcbmltcG9ydCBtZXNzYWdlc19zdiBmcm9tIFwiLi4vLi4vdHJhbnNsYXRpb25zL3N2Lmpzb25cIjtcbmltcG9ydCBtZXNzYWdlc19lbiBmcm9tIFwiLi4vLi4vdHJhbnNsYXRpb25zL2VuLmpzb25cIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuZXhwb3J0IGNvbnN0IHNldHVwSW50bCA9IDxQIGV4dGVuZHMgb2JqZWN0PihDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8UD4pID0+XG4gICAgY2xhc3MgX1NldHVwTGFuZ3VhZ2VJbnRsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFA+e1xuICAgICAgICBtZXNzYWdlcyA6IG9iamVjdDtcblxuICAgICAgICBjb25zdHJ1Y3Rvcihwcm9wcyl7XG4gICAgICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgICAgICBhZGRMb2NhbGVEYXRhKFsuLi5sb2NhbGVfZW4sLi4ubG9jYWxlX3N2XSk7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0ge1xuICAgICAgICAgICAgJ3N2JzogbWVzc2FnZXNfc3YsXG4gICAgICAgICAgICAnZW4nOiBtZXNzYWdlc19lblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG1vbWVudCgpLmxvY2FsZShjZmcuS0VEX0xPQ0FMRSk7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXIoKXtcbiAgICAgICAgICAgIHJldHVybiA8SW50bFByb3ZpZGVyIGxvY2FsZT17Y2ZnLktFRF9MT0NBTEV9IG1lc3NhZ2VzPXt0aGlzLm1lc3NhZ2VzW2NmZy5LRURfTE9DQUxFXX0+XG4gICAgICAgICAgICAgICAgPENvbXBvbmVudCB7Li4udGhpcy5wcm9wcyBhcyBQfSAvPlxuICAgICAgICAgICAgPC9JbnRsUHJvdmlkZXI+XG4gICAgICAgIH1cbiAgICB9IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB2aXNpYmxlOiBib29sZWFuO1xuICB0ZXh0OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgb25Db25maXJtOiAoKT0+dm9pZDtcbiAgb25DYW5jZWw6ICgpPT52b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQ29uZmlybWF0aW9uIChwcm9wczogUHJvcHMpIHtcbiAgcmV0dXJuIDxkaXZcbiAgICBjbGFzc05hbWU9e2Bjb25maXJtYXRpb24tYm94ICR7cHJvcHMuY2xhc3NOYW1lfSR7cHJvcHMudmlzaWJsZSA/IFwiIHZpc2libGVcIiA6IFwiXCJ9YH0+XG4gICAgPHA+e3Byb3BzLnRleHR9PC9wPlxuICAgIDxidXR0b24gb25DbGljaz17KCk9PnByb3BzLm9uQ29uZmlybSgpfT5PSzwvYnV0dG9uPlxuICAgIDxidXR0b24gb25DbGljaz17KCk9PnByb3BzLm9uQ2FuY2VsKCl9PkF2YnJ5dDwvYnV0dG9uPlxuICA8L2Rpdj47XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb3Vyc2UsIENvdXJzZU1vZHVsZSwgVGFzaywgVXNlclRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBXZWVrUGxhbm5lclBlcnNpc3RlZFN0YXRlIH0gZnJvbSBcIi4uLy4uL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXBlcnNpc3RlZC1zdGF0ZVwiO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCwgQmF0Y2hSdW5uZXIsIERvY3VtZW50QWNjZXNzIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgdXNlclRhc2tzUmVwbyB9IGZyb20gJy4uLy4uLy4uL3JlcG9zL3VzZXItdGFza3MtcmVwbyc7XG5pbXBvcnQgeyBhcnJheVRvTWFwLCBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xuaW1wb3J0IHsgQ29uZmlybWF0aW9uIH0gZnJvbSAnLi9jb25maXJtYXRpb24nO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBsZWFybmluZ1Rhc2tzOiBMZWFybmluZ01vZHVsZVRhc2tbXVxufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICB3ZWVrRGF0ZTogbnVtYmVyO1xuICB1c2VyVGFza3M6IFVzZXJUYXNrW107XG4gIGNvbmZpcm1hdGlvbnM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlYXJuaW5nTW9kdWxlVGFzayB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG4gIC8qKiBjb3Vyc2VOYW1lXG4gICAqIEZvciBLRzogY291cnNlTmFtZVxuICAgKiBGb3IgS1M6IFN1YmplY3QgbmFtZVxuICAgKi9cbiAgY291cnNlTmFtZTogc3RyaW5nO1xuICAvKiogbGVhcm5pbmdHb2FsXG4gICAqIEZvciBLRzogbW9kdWxlIG5hbWUgb3IgbGVhcm5pbmcgZ29hbCBvZiB0aGUgdGFza1xuICAgKiBGb3IgS1Mvc3RlcC1jb3Vyc2U6IGNvdXJzZSBuYW1lXG4gICAqIEZvciBLUy90aGVtZS1jb3Vyc2U6IGxlYXJuaW5nIGdvYWxcbiAgICovXG4gIGxlYXJuaW5nR29hbDogc3RyaW5nO1xuICAvKiogU3RlcFxuICAgKiBPbmx5IHByZXNlbnQgaW4gS1Mvc3RlcC1jb3Vyc2VcbiAgICovXG4gIHN0ZXA/OiBudW1iZXI7XG4gIC8qKiB0YXNrXG4gICAqIE9ubHkgZm9yIGNvdXJzZXMgYnVpbHQgYnkgY291cnNlYnVpbGRlclxuICAgKi9cbiAgdGFzaz86IFRhc2s7XG4gIC8qKiBjb3Vyc2VcbiAgICogT25seSBmb3IgY291cnNlcyBidWlsdCBieSBjb3Vyc2VidWlsZGVyXG4gICAqL1xuICBjb3Vyc2U/OiBDb3Vyc2U7XG4gIC8qKiBjb3Vyc2VJbmZvXG4gICAqIE9ubHkgZm9yIGNvdXJzZXMgYnVpbGQgYnkgc3ViamVjdHBsYW5uZXJcbiAgICovXG4gIGNvdXJzZUluZm8/OiB7XG4gICAgc2Nob29sOiBzdHJpbmcgLy8gU2Nob29sIG5hbWVcbiAgICBjb3Vyc2U6IHN0cmluZyAvLyBDb3Vyc2UgSW5zdGFuY2UgSURcbiAgICB0YWI6IHN0cmluZyAgICAvLyBDb3Vyc2VUYWIgSURcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFza0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB1c2VyVGFza3M6IFtdLFxuICAgICAgd2Vla0RhdGU6IERhdGUubm93KCksXG4gICAgICBjb25maXJtYXRpb25zOiBbXVxuICAgIH1cbiAgICB0aGlzLm9uQ2hhbmdlID0gdGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpOyAgICBcbiAgfVxuXG4gIG9uQ2hhbmdlICh1c2VyVGFza3M6IFVzZXJUYXNrW10sIHBlcnNpc3RlZDogV2Vla1BsYW5uZXJQZXJzaXN0ZWRTdGF0ZSkge1xuICAgIGlmIChwZXJzaXN0ZWQud2Vla0RhdGUgIT09IHRoaXMuc3RhdGUud2Vla0RhdGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjb25maXJtYXRpb25zOiBbXVxuICAgICAgfSlcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB1c2VyVGFza3MsXG4gICAgICB3ZWVrRGF0ZTogcGVyc2lzdGVkLndlZWtEYXRlXG4gICAgfSk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB1c2VyVGFza3NSZXBvLnN1YnNjcmliZSh0aGlzLm9uQ2hhbmdlKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHVzZXJUYXNrc1JlcG8udW5zdWJzY3JpYmUodGhpcy5vbkNoYW5nZSk7XG4gIH1cblxuICBhc3luYyB0b2dnbGVUYXNrIChsZWFybmluZ1Rhc2s6IExlYXJuaW5nTW9kdWxlVGFzaykge1xuICAgIGNvbnN0IHVzZXJUYXNrcyA9IHRoaXMuc3RhdGUudXNlclRhc2tzLmZpbHRlcih1dCA9PiB7XG4gICAgICByZXR1cm4gbGVhcm5pbmdUYXNrLnRhc2sgP1xuICAgICAgICB1dC50YXNrICYmIHV0LnRhc2suc29tZSh0ID0+IHQuaWQgPT09IGxlYXJuaW5nVGFzay5pZCkgOlxuICAgICAgICB1dC5zaXRlVmlzaW9uUGFnZUlkID09PSBsZWFybmluZ1Rhc2suaWQ7XG4gICAgfSk7XG4gICAgY29uc3Qge3dlZWtEYXRlfSA9IHRoaXMuc3RhdGU7XG4gICAgXG4gICAgaWYgKHVzZXJUYXNrcy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIE5vIHRhc2sgbWF0Y2hlcyB0aGlzIGxlYXJuaW5nTW9kdWxlVGFzayAtIG5vdCBwcmVzZW50IGluIHdlZWtwbGFubmVyLlxuICAgICAgbGV0IGxhdGVzdFRpbWVTdGFtcCA9IE1hdGgubWF4LmFwcGx5KFxuICAgICAgICBNYXRoLm1heCxcbiAgICAgICAgW3dlZWtEYXRlXS5jb25jYXQodGhpcy5zdGF0ZS51c2VyVGFza3MubWFwKHQgPT4gdC5kYXRlVGltZSkpKTtcblxuICAgICAgY29uc3QgdXNlclRhc2s6IFVzZXJUYXNrID0ge1xuICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICBjb3Vyc2VOYW1lOiBsZWFybmluZ1Rhc2suY291cnNlTmFtZSxcbiAgICAgICAgZGF0ZVRpbWU6IGxhdGVzdFRpbWVTdGFtcCArIDIwMDAsXG4gICAgICAgIGxlYXJuaW5nR29hbDogbGVhcm5pbmdUYXNrLmxlYXJuaW5nR29hbCxcbiAgICAgICAgbmFtZTogbGVhcm5pbmdUYXNrLm5hbWUsXG4gICAgICAgIHVybDogbGVhcm5pbmdUYXNrLnVybCxcbiAgICAgICAgYWNsOiBbXG4gICAgICAgICAgLy8gRGVmYXVsdCBBQ0w6IExldCB1c2VyIHNlbGYgaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGlzIGl0ZW06XG4gICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwiZW1haWxcIiwgZW52LmN1cnJlbnRVc2VyLm1haWwsIFwiU1wiKSxcbiAgICAgICAgICAvLyBBZGRpdGlvbmFsIEFDTDogTGV0IGVtcGxveWVlcyBvbiBzYW1lIHNjaG9vbCBoYXZlIHJlYWQgYWNjZXNzIHRvIGl0LlxuICAgICAgICAgIC8vIFRoaXMgY3VycmVudGx5IG9ubHkgYXBwbGllcyB0byB0YXNrcyB0aGF0IHJlZmVyIHRvIGNvdXJzZSB0YXNrcyAobm90IGN1c3RvbSB0YXNrcyEpXG4gICAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwic2Nob29sUm9sZVwiLCBgJHtlbnYuY3VycmVudFVzZXIuc2Nob29sfS9FTVBMT1lFRWAsIFwiUlwiKVxuICAgICAgICBdLm1hcChhYyA9PiBhYy50b1N0cmluZygpKVxuICAgICAgfTtcbiAgICAgIGlmIChsZWFybmluZ1Rhc2sudGFzayAmJiBsZWFybmluZ1Rhc2sudGFzay5kZWFkbGluZSkge1xuICAgICAgICB1c2VyVGFzay5kZWFkbGluZSA9IGxlYXJuaW5nVGFzay50YXNrLmRlYWRsaW5lO1xuICAgICAgfVxuICAgICAgaWYgKGxlYXJuaW5nVGFzay50YXNrKSB7XG4gICAgICAgIHVzZXJUYXNrLnRhc2sgPSBbbGVhcm5pbmdUYXNrLnRhc2tdO1xuICAgICAgICBpZiAobGVhcm5pbmdUYXNrLmNvdXJzZSkge1xuICAgICAgICAgIHVzZXJUYXNrLmNvdXJzZSA9IFtsZWFybmluZ1Rhc2suY291cnNlXTtcbiAgICAgICAgfSBlbHNlIGlmIChsZWFybmluZ1Rhc2suY291cnNlSW5mbykge1xuICAgICAgICAgIHVzZXJUYXNrLmNvdXJzZUluZm8gPSBsZWFybmluZ1Rhc2suY291cnNlSW5mbztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXNlclRhc2suc2l0ZVZpc2lvblBhZ2VJZCA9IGxlYXJuaW5nVGFzay5pZDtcbiAgICAgIH1cbiAgICAgIGlmIChsZWFybmluZ1Rhc2suc3RlcCkge1xuICAgICAgICB1c2VyVGFzay5zdGVwID0gbGVhcm5pbmdUYXNrLnN0ZXA7XG4gICAgICB9XG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHVzZXJUYXNrc1JlcG8uc2V0V2Vla1BsYW5uZXJCb3hPcGVuKGxlYXJuaW5nVGFzay5jb3Vyc2VOYW1lLCB0cnVlKSxcbiAgICAgICAgdXNlclRhc2tzUmVwby5pbnNlcnQoW3VzZXJUYXNrXSldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWxyZWFkeSBwcmVzZW50IGluIHdlZWtwbGFubmVyLiBJdCdzIHRpbWUgdG8gZGVsZXRlIHRob3NlIHRoYXQgbWF0Y2hlZCB1cy5cbiAgICAgIGF3YWl0IHVzZXJUYXNrc1JlcG8uZGVsZXRlKHVzZXJUYXNrcy5tYXAodCA9PiB0LmlkKSk7XG4gICAgfVxuICAgIFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtsZWFybmluZ1Rhc2tzfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdXNlclRhc2tzID0gYXJyYXlUb01hcCh0aGlzLnN0YXRlLnVzZXJUYXNrcywgdXQgPT4gdXQudGFzayAmJiB1dC50YXNrLmxlbmd0aCA+IDAgP1xuICAgICAgdXQudGFzay5tYXAodCA9PiB0LmlkKVswXSA6IC8vIGNvdXJzZS1idWlsZGVyIHRhc2tzIGxvb2tlZCB1cCBieSBpZFxuICAgICAgdXQuc2l0ZVZpc2lvblBhZ2VJZCA/IHV0LnNpdGVWaXNpb25QYWdlSWQgOiAvLyBub24tY291cnNlLWJ1aWxkZXIgdGFza3NcbiAgICAgIHV0LnVybCk7XG4gICAgY29uc3Qge2NvbmZpcm1hdGlvbnN9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB3ZWVrUGxhbm5lcldlZWsgPSBtb21lbnQodGhpcy5zdGF0ZS53ZWVrRGF0ZSkud2VlaygpO1xuICAgIGNvbnN0IGN1cnJlbnRXZWVrID0gbW9tZW50KCkud2VlaygpO1xuICAgIGNvbnN0IGZvcldlZWtTdHJpbmcgPSB3ZWVrUGxhbm5lcldlZWsgPT09IGN1cnJlbnRXZWVrID8gXCJcIiA6XG4gICAgd2Vla1BsYW5uZXJXZWVrID09PSBjdXJyZW50V2VlayArIDEgPyBMYGbDtnIgbsOkc3RhIHZlY2thICh2JHt3ZWVrUGxhbm5lcldlZWt9KWAgOlxuICAgIHdlZWtQbGFubmVyV2VlayA9PT0gY3VycmVudFdlZWsgLSAxID8gTGBmw7ZyIGbDtnJyYSB2ZWNrYW4gKHYke3dlZWtQbGFubmVyV2Vla30pYCA6XG4gICAgTGBmw7ZyIHZlY2thICR7d2Vla1BsYW5uZXJXZWVrfWA7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyXCI+XG4gICAgICB7bGVhcm5pbmdUYXNrcy5tYXAoKGxlYXJuaW5nVGFzaywgaWR4KSA9PiB7XG4gICAgICAgIGNvbnN0IHRhc2tMb29rdXBJZCA9IGxlYXJuaW5nVGFzay5pZDtcbiAgICAgICAgY29uc3QgdXNlclRhc2sgPSB1c2VyVGFza3NbdGFza0xvb2t1cElkXSB8fCB7JG1ldGE6ICdkZWxldGVkJ30gYXMgUGFydGlhbDxVc2VyVGFzaz47IC8vIE5vIGV4aXN0ID0gJG1ldGE6ICdkZWxldGVkJ1xuICAgICAgICBjb25zdCBpc1dvcmtpbmcgPSB1c2VyVGFzay4kbWV0YSA9PT0gJ2FkZGluZycgfHwgdXNlclRhc2suJG1ldGEgPT09ICdkZWxldGluZyc7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdXNlclRhc2suJG1ldGEgIT09ICdkZWxldGVkJyAmJiB1c2VyVGFzay4kbWV0YSAhPT0gJ2RlbGV0aW5nJztcbiAgICAgICAgY29uc3QgZGVzY3JpYmVkQWN0aW9uID0gc2VsZWN0ZWQgP1xuICAgICAgICAgICAgICAgICAgTGBUYSBib3J0IHVwcGdpZnRlbiBmcsOlbiBlZ2VuIHZlY2tvcGxhbmVyaW5nICR7Zm9yV2Vla1N0cmluZ31gIDpcbiAgICAgICAgICAgICAgICAgIExgTMOkZ2cgdGlsbCB1cHBnaWZ0ZW4gaSBlZ2VuIHZlY2tvcGxhbmVyaW5nICR7Zm9yV2Vla1N0cmluZ31gO1xuICAgICAgICBjb25zdCBjb25maXJtYXRpb25WaXNpYmxlID1cbiAgICAgICAgICBjb25maXJtYXRpb25zLnNvbWUodGlkID0+IHRhc2tMb29rdXBJZCA9PT0gdGlkKTtcblxuICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2xlYXJuaW5nVGFzay5pZH0+PGRpdiBrZXk9e3Rhc2tMb29rdXBJZH0gY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BzZWxlY3RlZEJveCR7c2VsZWN0ZWQgPyAnIHNlbGVjdGVkJyA6ICcnfWB9XG4gICAgICAgICAgICAgICAgc3R5bGU9e2lzV29ya2luZyA/IHtvcGFjaXR5OiAwLjV9OiB7fX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+IWlzV29ya2luZyAmJiB3ZWVrUGxhbm5lcldlZWsgPT09IGN1cnJlbnRXZWVrID9cbiAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlVGFzayhsZWFybmluZ1Rhc2spIDpcbiAgICAgICAgICAgICAgICAgIGNvbmZpcm1hdGlvblZpc2libGUgPyBcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29uZmlybWF0aW9uczogY29uZmlybWF0aW9ucy5maWx0ZXIodGlkID0+IHRpZCAhPT0gdGFza0xvb2t1cElkKX0pIDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29uZmlybWF0aW9uczogWy4uLmNvbmZpcm1hdGlvbnNdLmNvbmNhdCh0YXNrTG9va3VwSWQpfSl9XG4gICAgICAgICAgICAgICAgdGl0bGU9e2Rlc2NyaWJlZEFjdGlvbn0+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICA8YSBocmVmPXtsZWFybmluZ1Rhc2sudXJsfT57bGVhcm5pbmdUYXNrLm5hbWV9PC9hPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPENvbmZpcm1hdGlvblxuICAgICAgICAgICAgdmlzaWJsZT17Y29uZmlybWF0aW9uVmlzaWJsZX1cbiAgICAgICAgICAgIHRleHQ9e2Rlc2NyaWJlZEFjdGlvbn1cbiAgICAgICAgICAgIG9uQ29uZmlybT17KCk9PntcbiAgICAgICAgICAgICAgdGhpcy50b2dnbGVUYXNrKGxlYXJuaW5nVGFzayk7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NvbmZpcm1hdGlvbnM6IGNvbmZpcm1hdGlvbnMuZmlsdGVyKHRpZCA9PiB0aWQgIT09IHRhc2tMb29rdXBJZCl9KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbkNhbmNlbD17KCk9PntcbiAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29uZmlybWF0aW9uczogY29uZmlybWF0aW9ucy5maWx0ZXIodGlkID0+IHRpZCAhPT0gdGFza0xvb2t1cElkKX0pO1xuICAgICAgICAgICAgfX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIH1cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsImltcG9ydCB7IEtlZFJlcG8gfSBmcm9tICcuL2tlZC1yZXBvJztcbmltcG9ydCB7IFVzZXJIaWRkZW5Db3Vyc2UsIFNjaG9vbCwgQ291cnNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgRURTQ291cnNlIH0gZnJvbSAnLi4vY29udHJhY3RzL2Vkcyc7XG5pbXBvcnQgeyBzaG93RXJyb3IsIGZsYXR0ZW4sIGNvbXBhcmVQcm9wLCBhcnJheVRvTWFwIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IEVEU1BlcmlvZCB9IGZyb20gJy4uL2FwaXMvZWRzY2xpZW50JztcbmltcG9ydCB7IGdldFNjaG9vbE1vbWVudCB9IGZyb20gJy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuZXhwb3J0IGxldCBoaWRkZW5Db3Vyc2VzUmVwbyA9IGVudi5oaWRkZW5Db3Vyc2VzUmVwbyBhcyBIaWRkZW5Db3Vyc2VzUmVwbztcblxuXG5leHBvcnQgaW50ZXJmYWNlIENvdXJzZVdpdGhIaWRkZW5TdGF0ZSB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHZpc2libGU6IGJvb2xlYW47XG4gIGRlZmF1bHRWaXNpYmxlOiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSBIaWRkZW5Db3Vyc2VzU3Vic2NyaWJlciA9IChjb3Vyc2VzOiBDb3Vyc2VXaXRoSGlkZGVuU3RhdGVbXSkgPT4gdm9pZDtcblxuZXhwb3J0IGludGVyZmFjZSBTdWJzY3JpYmVyT3B0aW9ucyB7XG4gIGZ1bGxDb3Vyc2U6IGJvb2xlYW47XG59XG5cbmNsYXNzIEhpZGRlbkNvdXJzZXNSZXBvIHtcbiAgcmVzdWx0OiBDb3Vyc2VXaXRoSGlkZGVuU3RhdGVbXSB8IG51bGwgPSBudWxsO1xuICBzdWJzY3JpYmVyczoge3N1YnNjcmliZXI6IEhpZGRlbkNvdXJzZXNTdWJzY3JpYmVyLCBvcHRpb25zOiBTdWJzY3JpYmVyT3B0aW9uc31bXSA9IFtdO1xuICBmdWxsQ291cnNlOiBib29sZWFuID0gZmFsc2U7XG4gIGtlZENvdXJzZXNQcm9taXNlOiBQcm9taXNlPFBhcnRpYWw8Q291cnNlPltdPjtcbiAgZWRzQ291cnNlc1Byb21pc2U6IFByb21pc2U8RURTQ291cnNlW10+O1xuICB1c2VySGlkZGVuQ291cnNlc1Byb21pc2U6IFByb21pc2U8VXNlckhpZGRlbkNvdXJzZVtdPjtcbiAga2VkUmVwbzogS2VkUmVwbzxVc2VySGlkZGVuQ291cnNlPjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmtlZFJlcG8gPSBuZXcgS2VkUmVwbzxVc2VySGlkZGVuQ291cnNlPih7XG4gICAgICBnZXRDbGllbnQ6ICgpID0+IGVudi5rZWRCYWNrZW5kQ2xpZW50LFxuICAgICAgb3B0aW1pc3RpYzogdHJ1ZSxcbiAgICAgIHRhYmxlOiBcInVzZXJoaWRkZW5jb3Vyc2VzXCIsXG4gICAgICB1c2VyOiBlbnYuY3VycmVudFVzZXIgPyBlbnYuY3VycmVudFVzZXIubWFpbCA6IFwiXCIsXG4gICAgICBnZXRRdWVyeU9wdGlvbnM6IGFzeW5jICgpID0+ICh7cm9sZTogXCJVU0VSXCJ9KSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGluaXRQcm9taXNlID0gdGhpcy5pbml0KCk7XG5cbiAgICBQcm9taXNlLmFsbChbXG4gICAgICBpbml0UHJvbWlzZSxcbiAgICAgIHRoaXMua2VkQ291cnNlc1Byb21pc2UsXG4gICAgICB0aGlzLmVkc0NvdXJzZXNQcm9taXNlXG4gICAgXSkuY2F0Y2goZXJyID0+IHNob3dFcnJvcihlcnIpKTtcbiAgfVxuXG4gIGFzeW5jIGluaXQoKSB7XG4gICAgLy8gV2FpdCB0aWxsIHdlIGhhdmUgYSBjdXJyZW50VXNlciB0aGF0IGlzIGFjY3VyYXRlIGFsc28gZm9yIGltcGVyc29uYXRlZCB1c2Vycy5cbiAgICBjb25zdCBiZWFyZXJQcm9taXNlID0gZW52LmJlYXJlclByb3ZpZGVyID8gZW52LmJlYXJlclByb3ZpZGVyLmdldEJlYXJlcigpIDogUHJvbWlzZS5yZXNvbHZlKHt9KTtcblxuICAgIC8vIEluIHBhcmFsbGVsbCwgd2UgcmVxdWVzdDpcbiAgICAvLyAgMSkgS0VEQmFja2VuZDogU2Nob29scy5hY3RpdmVDb3Vyc2VzXG4gICAgLy8gIDIpIEVEUy5nZXRBY3RpdmVBY291cnNlcygpXG4gICAgLy8gIDMpICh2aWEgc3Vic2NyaXB0aW9uKTogS0VEQmFja2VuZDogdXNlckhpZGRlbkNvdXJzZXNcbiAgICBcbiAgICB0aGlzLmtlZENvdXJzZXNQcm9taXNlID0gYmVhcmVyUHJvbWlzZS50aGVuKCgpPT50aGlzLmxpc3RLZWRDb3Vyc2VzKCkpO1xuICAgIHRoaXMuZWRzQ291cnNlc1Byb21pc2UgPSBiZWFyZXJQcm9taXNlLnRoZW4oKCk9PnRoaXMubGlzdEVEU0NvdXJzZXMoKSk7XG4gICAgbGV0IHJlc29sdmVVc2VySGlkZGVuQ291cnNlc1Byb21pc2U6ICh4OiBVc2VySGlkZGVuQ291cnNlW10pPT52b2lkO1xuICAgIGxldCB1c2VySGlkZGVuQ291cnNlc1Jlc29sdmVkID0gZmFsc2U7XG4gICAgdGhpcy51c2VySGlkZGVuQ291cnNlc1Byb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHJlc29sdmVVc2VySGlkZGVuQ291cnNlc1Byb21pc2UgPSB4ID0+IHtcbiAgICAgIGlmICh1c2VySGlkZGVuQ291cnNlc1Jlc29sdmVkKSB7XG4gICAgICAgIHRoaXMudXNlckhpZGRlbkNvdXJzZXNQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXNlckhpZGRlbkNvdXJzZXNSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmUoeCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgYXdhaXQgYmVhcmVyUHJvbWlzZTtcblxuICAgIHRoaXMua2VkUmVwby5tZW0uc3Vic2NyaWJlKGFzeW5jIHVzZXJIaWRkZW5Db3Vyc2VzID0+IHtcbiAgICAgIC8vIENoYW5nZSBvciBpbml0aWFsIHZhbHVlIHJlYWR5IHRvIGJlIG5vdGlmaWVkIG91dC5cbiAgICAgIC8vIEJ1dCBmaXJzdCwgY2hlY2sgd2UgaGF2ZSBhbGwgdGhlIHJlbGF0ZWQgZGF0YSByZXNwb25zZXMgd2UgbmVlZC5cbiAgICAgIGNvbnN0IFthY3RpdmVDb3Vyc2VzLCBlZHNBY3RpdmVDb3Vyc2VzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgdGhpcy5rZWRDb3Vyc2VzUHJvbWlzZSwgXG4gICAgICAgIHRoaXMuZWRzQ291cnNlc1Byb21pc2VdKTtcbiAgICAgIFxuICAgICAgLy8gUmVmaW5lIHRoZSB0aHJlZSByZXN1bHRzIGludG8gYSBzaW5nbGUgcmVzdWx0XG4gICAgICB0aGlzLnJlc3VsdCA9IGF3YWl0IHRoaXMuY3JlYXRlQ291cnNlc0xpc3QoZWRzQWN0aXZlQ291cnNlcywgdXNlckhpZGRlbkNvdXJzZXMsIGFjdGl2ZUNvdXJzZXMpO1xuICAgICAgLy8gTm90aWZ5IG91ciBzdWJzY3JpYmVyczpcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChzdWJzY3JpYmVyID0+IHRoaXMubm90aWZ5U3Vic2NyaWJlcihzdWJzY3JpYmVyLnN1YnNjcmliZXIsIHN1YnNjcmliZXIub3B0aW9ucykpO1xuICAgICAgcmVzb2x2ZVVzZXJIaWRkZW5Db3Vyc2VzUHJvbWlzZSh1c2VySGlkZGVuQ291cnNlcyk7XG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBsaXN0S2VkQ291cnNlcygpIHtcbiAgICBjb25zdCBmdWxsQ291cnNlID0gdGhpcy5mdWxsQ291cnNlO1xuICAgIGNvbnNvbGUubG9nKFwiRnVsbENvdXJzZTogXCIrIGZ1bGxDb3Vyc2UpO1xuICAgIGNvbnN0IHNjaG9vbHMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFNjaG9vbD4oJ3NjaG9vbHMnLCB7XG4gICAgICByb2xlOiBcIlVTRVJcIiwgLy8gV29ya2Fyb3VuZCBmcm9tIHNob3dpbmcgYWN0aXZhdGVkIHRlbXBsYXRlcyBhbW9uZyBjb3Vyc2VzIG9mIHRoZSBzY2hvb2xcbiAgICAgIG5hbWU6IGVudi5jdXJyZW50VXNlci5zY2hvb2wsXG4gICAgICBpbmNsdWRlOiBcImFjdGl2ZUNvdXJzZXNcIixcbiAgICAgIGZsYWdzOiBmdWxsQ291cnNlID8gW10gOiBbXCJpbmNsdWRlSWRzQW5kTmFtZXNPbmx5XCJdLFxuICAgICAgY2FjaGVCdXN0OiBlbnYuY3VycmVudFVzZXIudXNlcm5hbWVcbiAgICB9KTtcbiAgICBjb25zdCBhY3RpdmVDb3Vyc2VzID0gZmxhdHRlbihzY2hvb2xzLm1hcChzY2hvb2wgPT4gc2Nob29sLmFjdGl2ZUNvdXJzZXMpKS5zb3J0KGNvbXBhcmVQcm9wKFwibmFtZVwiKSlcbiAgICByZXR1cm4gYWN0aXZlQ291cnNlcztcbiAgfVxuXG4gIGxpc3RFRFNDb3Vyc2VzKCk6IFByb21pc2U8RURTQ291cnNlW10gfCBudWxsPiB7XG4gICAgY29uc3QgcGVyaW9kTmFtZSA9IG5ldyBFRFNQZXJpb2QoZ2V0U2Nob29sTW9tZW50KG1vbWVudCgpKSkucGVyaW9kO1xuICAgIHJldHVybiBlbnYuY3VycmVudFVzZXIucm9sZXMuaW5kZXhPZignRU1QTE9ZRUUnKSA9PT0gLTEgP1xuICAgICAgLy8gU1RVREVOVHMgc2hvdWxkLCBieSBkZWZhdWx0LCBvbmx5IHNob3cgY291cnNlcyB0aGF0IGlzIGxpc3RlZCBpbiBFRFNcbiAgICAgIGVudi5lZHNDbGllbnQuZ2V0QWN0aXZlQ291cnNlcyh7cGVyaW9kTmFtZX0pIDpcbiAgICAgIC8vIEVNUExPWUVFcyBzaG91bGQsIGJ5IGRlZmF1bHQsIHNob3cgYWxsIGNvdXJzZXMgb24gc2Nob29sIC0gbm8gbmVlZCB0byBxdWVyeSBFRFNcbiAgICAgIG51bGw7XG4gIH1cblxuICBhc3luYyBjcmVhdGVDb3Vyc2VzTGlzdChcbiAgICBlZHNBY3RpdmVDb3Vyc2VzOiBFRFNDb3Vyc2VbXSB8IG51bGwsXG4gICAgdXNlckhpZGRlbkNvdXJzZXM6IFVzZXJIaWRkZW5Db3Vyc2VbXSxcbiAgICBhY3RpdmVDb3Vyc2VzOiBQYXJ0aWFsPENvdXJzZT5bXSkgOiBQcm9taXNlPENvdXJzZVdpdGhIaWRkZW5TdGF0ZVtdPlxuICB7XG4gICAgY29uc3QgaGlkZGVuQ291cnNlc01hcCA9IGFycmF5VG9NYXAodXNlckhpZGRlbkNvdXJzZXMuZmlsdGVyKGhjID0+ICFoYy5zaG93KSwgaGMgPT4gaGMubmFtZSk7XG4gICAgY29uc3QgdmlzaWJsZUNvdXJzZXNNYXAgPSBhcnJheVRvTWFwKHVzZXJIaWRkZW5Db3Vyc2VzLmZpbHRlcihoYyA9PiBoYy5zaG93KSwgaGMgPT4gaGMubmFtZSk7XG5cbiAgICBjb25zdCBpc1N0dWRlbnQgPSBlbnYuY3VycmVudFVzZXIucm9sZXMuc29tZShyb2xlID0+IHJvbGUgPT09ICdTVFVERU5UJyk7XG5cbiAgICBjb25zdCBlZHNDb3Vyc2VNYXAgPSBlZHNBY3RpdmVDb3Vyc2VzID9cbiAgICAgIGFycmF5VG9NYXAoZWRzQWN0aXZlQ291cnNlcywgYyA9PiBjLm5hbWUpIDpcbiAgICAgIHt9O1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5hbGwoYWN0aXZlQ291cnNlcy5tYXAoYXN5bmMgKHtpZCwgbmFtZSwgZGVzY3JpcHRpb24sIG1vZGlmaWVkQnl9KSA9PiB7XG5cbiAgICAgIGxldCBlZHNDb3Vyc2UgPSBlZHNDb3Vyc2VNYXBbbmFtZV07XG5cbiAgICAgIGxldCBkZWZhdWx0VmlzaWJsZSA9IGlzU3R1ZGVudCA/XG4gICAgICAgIGVkc0NvdXJzZSAhPSBudWxsIDogLy8gQ291cnNlIG5hbWUgYWxzbyBsaXN0ZWQgaW4gRURTXG4gICAgICAgIHRydWU7IC8vIFRlYWNoZXJzIG5vdCBkZXBlbmRlbnQgb24gRURTIGxpc3RpbmdcblxuICAgICAgbGV0IHZpc2libGUgPSBkZWZhdWx0VmlzaWJsZSA/XG4gICAgICAgICFoaWRkZW5Db3Vyc2VzTWFwW2lkXSA6IC8vIFZpc2libGUgdW5sZXNzIHVzZXIgaGFzIG92ZXJyaWRkZW4gdGhhdC5cbiAgICAgICAgISF2aXNpYmxlQ291cnNlc01hcFtpZF07IC8vIEhpZGRlbiB1bmxlc3MgdXNlciBoYXMgb3ZlcnJpZGRlbiB0aGF0LlxuICAgICAgXG4gICAgICAvLyBSZXNvbHZlIGRlc2NyaXB0aW9uOlxuICAgICAgaWYgKG1vZGlmaWVkQnkgJiYgbW9kaWZpZWRCeS5uYW1lICYmICFkZXNjcmlwdGlvbikge1xuICAgICAgICBkZXNjcmlwdGlvbiA9IGAke21vZGlmaWVkQnkubmFtZX1zIHZlcnNpb25gO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpZCxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgIHZpc2libGUsXG4gICAgICAgIGRlZmF1bHRWaXNpYmxlXG4gICAgICB9O1xuICAgIH0pKTtcblxuICAgIHJldHVybiByZXN1bHQuc29ydCgoe25hbWU6IGF9LCB7bmFtZTogYn0pID0+IGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwKTtcbiAgfVxuXG4gIGFzeW5jIGhpZGVDb3Vyc2UoYzogQ291cnNlV2l0aEhpZGRlblN0YXRlKSB7XG4gICAgY29uc3Qgb3ZlcnJpZGVzID0gdGhpcy5rZWRSZXBvLm1lbS5pdGVtcy5maWx0ZXIoaGMgPT4gaGMubmFtZSA9PT0gYy5pZCk7XG4gICAgaWYgKGMuZGVmYXVsdFZpc2libGUpIHtcbiAgICAgIGF3YWl0IHRoaXMua2VkUmVwby5pbnNlcnQoW3tcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgbmFtZTogYy5pZFxuICAgICAgfV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB0aGlzLmtlZFJlcG8uZGVsZXRlKG92ZXJyaWRlcy5tYXAob3YgPT4gb3YuaWQpKTsgICAgICBcbiAgICB9XG4gIH1cblxuICBhc3luYyBzaG93Q291cnNlKGM6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZSkge1xuICAgIGNvbnN0IG92ZXJyaWRlcyA9IHRoaXMua2VkUmVwby5tZW0uaXRlbXMuZmlsdGVyKGhjID0+IGhjLm5hbWUgPT09IGMuaWQpO1xuICAgIGlmIChjLmRlZmF1bHRWaXNpYmxlKSB7XG4gICAgICBhd2FpdCB0aGlzLmtlZFJlcG8uZGVsZXRlKG92ZXJyaWRlcy5tYXAob3YgPT4gb3YuaWQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgdGhpcy5rZWRSZXBvLmluc2VydChbe1xuICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICBuYW1lOiBjLmlkLFxuICAgICAgICBzaG93OiB0cnVlXG4gICAgICB9XSk7XG4gICAgfVxuICB9XG5cbiAgbm90aWZ5U3Vic2NyaWJlciA9IChzdWJzY3JpYmVyOiBIaWRkZW5Db3Vyc2VzU3Vic2NyaWJlciwgb3B0aW9uczogU3Vic2NyaWJlck9wdGlvbnMpID0+IHtcbiAgICB0cnkge1xuICAgICAgc3Vic2NyaWJlcihvcHRpb25zLmZ1bGxDb3Vyc2UgPyB0aGlzLnJlc3VsdCA6IHRoaXMucmVzdWx0LmZpbHRlcihjID0+IGMudmlzaWJsZSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHN1YnNjcmliZSAoc3Vic2NyaWJlcjogSGlkZGVuQ291cnNlc1N1YnNjcmliZXIsIG9wdGlvbnM6IFN1YnNjcmliZXJPcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLmZ1bGxDb3Vyc2UgJiYgb3B0aW9ucy5mdWxsQ291cnNlKSB7XG4gICAgICAvLyBUaGUgc3Vic2NyaWJlciBkZW1hbmRzIGZ1bGwgY291cnNlc1xuICAgICAgLy8gTmVlZCB0byBxdWVyeSB0aGF0IGJlZm9yZSBub3RpZnlpbmdcbiAgICAgIC8vIEFsc28gYWZmZWN0IHN0YXRlIGZvciBmdXR1cmUgaW50ZXJuYWwgbm90aWZpY2F0aW9uXG4gICAgICB0aGlzLmZ1bGxDb3Vyc2UgPSBvcHRpb25zLmZ1bGxDb3Vyc2U7XG4gICAgICB0aGlzLmtlZENvdXJzZXNQcm9taXNlID0gdGhpcy5saXN0S2VkQ291cnNlcygpOyAvLyBSZWRvIHRoaXMgY2FsbCwgbm93IGxvYWRpbmcgZnVsbCBjb3Vyc2VzXG4gICAgICAvLyBXYWl0IGZvciBhbGwgb3V0c3RhbmRpbmcgZmV0Y2goKSBjYWxscyB0byBjb21wbGV0ZTpcbiAgICAgIGNvbnN0IFthY3RpdmVDb3Vyc2VzLCBlZHNBY3RpdmVDb3Vyc2VzLCB1c2VySGlkZGVuQ291cnNlc10gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIHRoaXMua2VkQ291cnNlc1Byb21pc2UsIFxuICAgICAgICB0aGlzLmVkc0NvdXJzZXNQcm9taXNlLFxuICAgICAgICB0aGlzLnVzZXJIaWRkZW5Db3Vyc2VzUHJvbWlzZV0pO1xuICAgICAgLy8gQXNzZW1ibGUgcmVzdWx0OlxuICAgICAgdGhpcy5yZXN1bHQgPSBhd2FpdCB0aGlzLmNyZWF0ZUNvdXJzZXNMaXN0KGVkc0FjdGl2ZUNvdXJzZXMsIHVzZXJIaWRkZW5Db3Vyc2VzLCBhY3RpdmVDb3Vyc2VzKTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy51c2VySGlkZGVuQ291cnNlc1Byb21pc2U7IC8vIFNvIHdlIGtub3cgdGhhdCB0aGlzLnJlc3VsdCBpcyB0aGVyZS5cbiAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3B0aW9ucyk7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5wdXNoKHtzdWJzY3JpYmVyLCBvcHRpb25zfSk7XG4gIH1cblxuICB1bnN1YnNjcmliZSAoc3Vic2NyaWJlcjogSGlkZGVuQ291cnNlc1N1YnNjcmliZXIpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gdGhpcy5zdWJzY3JpYmVycy5maWx0ZXIocyA9PiBzLnN1YnNjcmliZXIgIT09IHN1YnNjcmliZXIpO1xuICB9XG59XG5cbmlmICghaGlkZGVuQ291cnNlc1JlcG8pIHtcbiAgaGlkZGVuQ291cnNlc1JlcG8gPSBlbnYuaGlkZGVuQ291cnNlc1JlcG8gPSBuZXcgSGlkZGVuQ291cnNlc1JlcG8oKTtcbn1cbiIsImltcG9ydCB7VXNlcn0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuXG5leHBvcnQgY29uc3QgdXNlcnMgOiBVc2VyW10gPSBbe1xuICAgIGRpc3BsYXlOYW1lOiBcIkFkbWluaXN0cmF0w7ZyXCIsXG4gICAgbWFpbDogXCJ2ZW1lbmRvQGtlZHNjaG9vbHMuY29tXCIsXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRSddLFxuICAgIHNjaG9vbDogJ0tFRCcsXG4gICAgdXNlcm5hbWU6IFwiYWRtaW5cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiRGF2aWRcIixcbiAgICBtYWlsOiBcImRhdmlkLmZhaGxhbmRlckB2ZW1lbmRvLnNlXCIsXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRSddLFxuICAgIHNjaG9vbDogJ0tFRCcsXG4gICAgdXNlcm5hbWU6IFwiZGF2aWRcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiQ2FybCBIb2xtYmVyZ1wiLFxuICAgIG1haWw6IFwiY2FybC5ob2xtYmVyZ0BrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbJ0FETUlOJywnRU1QTE9ZRUUnXSxcbiAgICBzY2hvb2w6ICdOb3Jya8O2cGluZycsXG4gICAgdXNlcm5hbWU6IFwiY2FybC5ob2xtYmVyZ0BrdW5za2Fwc2d5bW5hc2lldC5zZVwiXG59LHsgXG4gICAgZGlzcGxheU5hbWU6IFwiQ2FybFwiLFxuICAgIG1haWw6IFwiY2FybEBrZWRzY2hvb2xzLmNvbVwiLFxuICAgIHJvbGVzOiBbJ0FETUlOJywnRU1QTE9ZRUUnLCdTVFVERU5UJ10sXG4gICAgc2Nob29sOiAnS0VEJyxcbiAgICB1c2VybmFtZTogXCJjYXJsXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2MVwiLFxuICAgIG1haWw6IFwidWJ3Njc1N0BlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIixcbiAgICByb2xlczogWydTVFVERU5UJ10sXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXG4gICAgdXNlcm5hbWU6IFwidWJ3Njc1N0BlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXYyXCIsXG4gICAgbWFpbDogXCJ1bXM0MzAyQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICBzY2hvb2w6ICdVcHBzYWxhJyxcbiAgICB1c2VybmFtZTogXCJ1bXM0MzAyQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjNcIixcbiAgICBtYWlsOiBcInVoaDM0NjBAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxuICAgIHVzZXJuYW1lOiBcInVoaDM0NjBAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2NChmZWwgZ29hbHMgaXNzdWUpXCIsXG4gICAgbWFpbDogXCJ1bXQ2ODI2QGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXG4gICAgdXNlcm5hbWU6IFwidW10NjgyNkBlZHUua3Vuc2thcHNza29sYW4uc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY1KGZ1dHVyZSBhYmlsaXRpZXMpXCIsXG4gICAgbWFpbDogXCJ1amczODMzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXG4gICAgdXNlcm5hbWU6IFwidWpnMzgzM0BlZHUua3Vuc2thcHNza29sYW4uc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY2KGZ1dHVyZSBhYmlsaXRpZXMpXCIsXG4gICAgbWFpbDogXCJ1anQxMzYzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXG4gICAgdXNlcm5hbWU6IFwidWp0MTM2M0BlZHUua3Vuc2thcHNza29sYW4uc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUzDpHJhcmUxXCIsXG4gICAgbWFpbDogXCJyaWNrYXJkLmFsYmVydHNzb25Aa3Vuc2thcHNneW1uYXNpZXQuc2VcIixcbiAgICByb2xlczogWydFTVBMT1lFRSddLFxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxuICAgIHVzZXJuYW1lOiBcInJpY2thcmQuYWxiZXJ0c3NvbkBrdW5za2Fwc2d5bW5hc2lldC5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJFRFNUZXN0VXNlckd5bW5hc2l1bVwiLFxuICAgIG1haWw6IFwidWhoMzIwMEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIixcbiAgICAvL21haWw6IFwiVUhIMzIwMEBFRFUuS1VOU0tBUFNHWU1OQVNJRVQuU0VcIixcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcbiAgICB1c2VybmFtZTogXCJFRFNUZXN0VXNlcjFcIixcbiAgICBzY2hvb2w6IFwiS0VEXCIsXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwidmVtZW5kby5lbGV2QGtlZHNjaG9vbHMuY29tXCIsXG4gICAgbWFpbDogXCJ2ZW1lbmRvLmVsZXZAa2Vkc2Nob29scy5jb21cIixcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcbiAgICB1c2VybmFtZTogXCJ2ZW1lbmRvLmVsZXZAa2Vkc2Nob29scy5jb21cIixcbiAgICBzY2hvb2w6IFwiS0VEXCIsXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiTWVkYXJiZXRhcmUgTmFja2FcIixcbiAgICBtYWlsOiBcIm1lZGFyYmV0YXJlLm5hY2thQGt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgcm9sZXM6IFtcIkVNUExPWUVFXCJdLFxuICAgIHVzZXJuYW1lOiBcIm1lZGFyYmV0YXJlLm5hY2thL0tTXCIsXG4gICAgc2Nob29sOiBcIk5hY2thXCIsXG4gICAgc2Nob29sVHlwZTogXCJHcnVuZHNrb2xvclwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJNZWRhcmJldGFyZSBHbG9iZW5cIixcbiAgICBtYWlsOiBcIm1lZGFyYmV0YXJlLmdsb2JlbkBrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbXCJFTVBMT1lFRVwiXSxcbiAgICB1c2VybmFtZTogXCJtZWRhcmJldGFyZS5nbG9iZW4vS1NcIixcbiAgICBzY2hvb2w6IFwiR2xvYmVuXCIsXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiRWxldiBHbG9iZW5cIixcbiAgICBtYWlsOiBcImVsZXYuZ2xvYmVuQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHNjaG9vbEdyYWRlOiAyLFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICB1c2VybmFtZTogXCJlbGV2Lmdsb2JlblwiLFxuICAgIHNjaG9vbDogXCJHbG9iZW5cIixcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJFbGV2IEJvcsOlc1wiLFxuICAgIG1haWw6IFwiZWxldi5ib3Jhc0BlZHUua3Vuc2thcHNza29sYW4uc2VcIixcbiAgICBzY2hvb2xHcmFkZTogNyxcbiAgICByb2xlczogWydTVFVERU5UJ10sXG4gICAgdXNlcm5hbWU6IFwiZWxldi5ib3Jhc1wiLFxuICAgIHNjaG9vbDogXCJCb3LDpXNcIixcbiAgICBzY2hvb2xUeXBlOiBcIkdydW5kc2tvbG9yXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgQm9ybMOkbmdlXCIsXG4gICAgbWFpbDogXCJlbGV2LmJvcmxhbmdlQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHNjaG9vbEdyYWRlOiA5LFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICB1c2VybmFtZTogJ2VsZXYuYm9ybGFuZ2UvS1MnLFxuICAgIHNjaG9vbDogJ0JvcmzDpG5nZScsXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiUm9sbC1sw7ZzXCIsXG4gICAgbWFpbDogXCJub25lQGt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgdXNlcm5hbWU6IFwibm9uZVwiLFxuICAgIHJvbGVzOiBbXVxufV07XG5cbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcblxuaWYgKGNmZy5LRURfTE9DQUxFID09PSBcInN2XCIpIHtcbiAgICBtb21lbnQudXBkYXRlTG9jYWxlKCdzdicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyaV9mZWJydWFyaV9tYXJzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0aV9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdzw7ZuZGFnX23DpW5kYWdfdGlzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7ZyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnc8O2bl9tw6VuX3Rpc19vbnNfdG9yX2ZyZV9sw7ZyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ3PDtl9tw6VfdGlfb25fdG9fZnJfbMO2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbDogJ0QgTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbDogJ2RkZCBEIE1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJZGFnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0ltb3Jnb25dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWfDpXJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnW1DDpV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tJXSBkZGRkW3NdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0OiAnZsO2ciAlcyBzZWRhbicsXG4gICAgICAgICAgICBzOiAnbsOlZ3JhIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbTogJ2VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tOiAnJWQgbWludXRlcicsXG4gICAgICAgICAgICBoOiAnZW4gdGltbWUnLFxuICAgICAgICAgICAgaGg6ICclZCB0aW1tYXInLFxuICAgICAgICAgICAgZDogJ2VuIGRhZycsXG4gICAgICAgICAgICBkZDogJyVkIGRhZ2FyJyxcbiAgICAgICAgICAgIE06ICdlbiBtw6VuYWQnLFxuICAgICAgICAgICAgTU06ICclZCBtw6VuYWRlcicsXG4gICAgICAgICAgICB5OiAnZXR0IMOlcicsXG4gICAgICAgICAgICB5eTogJyVkIMOlcidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGV8YSkvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ2UnIDpcbiAgICAgICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ2EnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICdhJyA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ2UnIDogJ2UnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnQgY29uc3QgbG9jYWxNb21lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG1vbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLmxvY2FsZShjZmcuS0VEX0xPQ0FMRSk7XG59XG4iLCJcblxuZXhwb3J0IGludGVyZmFjZSBSZXBvQ29tbXVuaWNhdG9yPFQgZXh0ZW5kcyB7aWQ6IHN0cmluZ30+IHtcbiAgcXVlcnkoKTogUHJvbWlzZTxUW10+O1xufVxuXG50eXBlIFN1YnNjcmliZXI8VD4gPSAoaXRlbXM6VFtdLCBlcnJvcjogdW5kZWZpbmVkIHwgRXJyb3IpID0+IGFueTtcblxuZXhwb3J0IGNsYXNzIFJlcG88VCBleHRlbmRzIHtpZDogc3RyaW5nfT4ge1xuICBsaXN0UHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcbiAgaXRlbXM6IFRbXTtcbiAgZXJyb3I/OiBFcnJvcjtcbiAgc3Vic2NyaWJlcnM6IFN1YnNjcmliZXI8VD5bXTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29tbTogUmVwb0NvbW11bmljYXRvcjxUPikge1xuICAgIHRoaXMubGlzdFByb21pc2UgPSBudWxsO1xuICAgIHRoaXMuaXRlbXMgPSBudWxsO1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBbXTtcbiAgfVxuXG4gIHN1YnNjcmliZShzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPFQ+KSB7XG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlSGFzRGF0YSgpLnRoZW4oKCk9PntcbiAgICAgIHN1YnNjcmliZXIodGhpcy5pdGVtcywgdGhpcy5lcnJvcik7XG4gICAgICB0aGlzLnN1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgfSk7XG4gIH1cblxuICB1bnN1YnNjcmliZShzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPFQ+KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnMuZmlsdGVyIChzID0+IHMgIT09IHN1YnNjcmliZXIpO1xuICB9XG5cbiAgbm90aWZ5U3Vic2NyaWJlcnMoKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHMgPT4gcyh0aGlzLml0ZW1zLCB0aGlzLmVycm9yKSk7XG4gIH1cblxuICBlbnN1cmVIYXNEYXRhKCkge1xuICAgIGlmICghdGhpcy5saXN0UHJvbWlzZSkgdGhpcy5yZWZyZXNoRnJvbVNlcnZlcigpO1xuICAgIHJldHVybiB0aGlzLmxpc3RQcm9taXNlO1xuICB9XG5cbiAgcmVmcmVzaEZyb21TZXJ2ZXIoKSB7XG4gICAgdGhpcy5saXN0UHJvbWlzZSA9IHRoaXMuY29tbS5xdWVyeSgpLnRoZW4oaXRlbXMgPT4ge1xuICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMgfHwgW107XG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMubGlzdFByb21pc2U7XG4gIH1cbiAgXG4gIGFzeW5jIHVwZGF0ZShpdGVtOiBUIHwgVFtdKSB7XG4gICAgYXdhaXQgdGhpcy5lbnN1cmVIYXNEYXRhKCk7XG4gICAgY29uc3QgdXBkYXRlZEl0ZW1zID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBbaXRlbV07XG4gICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMubWFwKGl0ID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRJdGVtID0gdXBkYXRlZEl0ZW1zLmZpbmQoKHtpZH0pID0+IGl0LmlkID09PSBpZCk7XG4gICAgICByZXR1cm4gdXBkYXRlZEl0ZW0gP1xuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCB1cGRhdGVkSXRlbSkgOlxuICAgICAgICBpdDtcbiAgICB9KTtcbiAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gIH1cblxuICBpbnNlcnQoaXRlbTogVCB8IFRbXSkge1xuICAgIHJldHVybiB0aGlzLmVuc3VyZUhhc0RhdGEoKS50aGVuKCgpPT57XG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5jb25jYXQoaXRlbSk7XG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgfSk7XG4gIH1cblxuICBkZWxldGUoaWQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgaWRzID0gQXJyYXkuaXNBcnJheShpZCkgPyBpZCA6IFtpZF07XG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlSGFzRGF0YSgpLnRoZW4oKCk9PntcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcihpdCA9PiAhaWRzLnNvbWUoaWQgPT4gaXQuaWQgPT09IGlkKSk7XG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvcXVlcnktc3RyaW5nJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcblxuZXhwb3J0IGNsYXNzIEZlYXR1cmVzIHtcbiAgLy9FZGl0VXNlclRhc2tzVmlhUGVuT25seT86IGJvb2xlYW47XG4gIC8vU3ViVGFza3M/OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yICgpIHtcbiAgICBjb25zdCB1c2VyID0gZW52LmN1cnJlbnRVc2VyITtcbiAgICBjb25zdCBxdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoLCB7dG9Mb3dlcjogdHJ1ZX0pO1xuICAgIGNvbnN0IGZlYXR1cmVzID0gKChxdWVyeS5mZWF0dXJlc3x8JycpLnNwbGl0KCcsJykgYXMgc3RyaW5nW10pXG4gICAgICAubWFwKGZlYXR1cmUgPT4gZmVhdHVyZS50b0xvd2VyQ2FzZSgpKTsgLy8gQ2FuIGJlIHVzZWQgb24gZm9yd2FyZHMuLi5cblxuICAgIC8qdGhpcy5FZGl0VXNlclRhc2tzVmlhUGVuT25seSA9XG4gICAgICB1c2VyLnNjaG9vbFR5cGUgIT09ICdHcnVuZHNrb2xvcicgJiYgcXVlcnkuc2Nob29sdHlwZSAhPT0gXCJHcnVuZHNrb2xvclwiOyovXG4gICAgLyp0aGlzLlN1YlRhc2tzID1cbiAgICAgIHVzZXIuc2Nob29sVHlwZSAhPT0gJ0dydW5kc2tvbG9yJyAmJiBxdWVyeS5zY2hvb2x0eXBlICE9PSBcIkdydW5kc2tvbG9yXCI7Ki9cbiAgICAvL3RoaXMuQXNzaWdubWVudFRhc2tzID0gISFxdWVyeS50ZXN0dmVyc2lvbjtcbiAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSAnLi9mZWF0dXJlcyc7XG4iLCJpbXBvcnQgZXhlYyBmcm9tICcuL2V4ZWMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGJvbGQ6IHtcbiAgICBpY29uOiAnPGI+QjwvYj4nLFxuICAgIHRpdGxlOiAnQm9sZCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdib2xkJylcbiAgfSxcbiAgaXRhbGljOiB7XG4gICAgaWNvbjogJzxpPkk8L2k+JyxcbiAgICB0aXRsZTogJ0l0YWxpYycsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpdGFsaWMnKVxuICB9LFxuICB1bmRlcmxpbmU6IHtcbiAgICBpY29uOiAnPHU+VTwvdT4nLFxuICAgIHRpdGxlOiAnVW5kZXJsaW5lJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3VuZGVybGluZScpXG4gIH0sXG4gIHN0cmlrZXRocm91Z2g6IHtcbiAgICBpY29uOiAnPHN0cmlrZT5TPC9zdHJpa2U+JyxcbiAgICB0aXRsZTogJ1N0cmlrZS10aHJvdWdoJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3N0cmlrZVRocm91Z2gnKVxuICB9LFxuICBoZWFkaW5nMToge1xuICAgIGljb246ICc8Yj5IPHN1Yj4xPC9zdWI+PC9iPicsXG4gICAgdGl0bGU6ICdIZWFkaW5nIDEnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgxPicpXG4gIH0sXG4gIGhlYWRpbmcyOiB7XG4gICAgaWNvbjogJzxiPkg8c3ViPjI8L3N1Yj48L2I+JyxcbiAgICB0aXRsZTogJ0hlYWRpbmcgMicsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDI+JylcbiAgfSxcbiAgaGVhZGluZzM6IHtcbiAgICBpY29uOiAnPGI+SDxzdWI+Mzwvc3ViPjwvYj4nLFxuICAgIHRpdGxlOiAnSGVhZGluZyAzJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMz4nKVxuICB9LFxuICBwYXJhZ3JhcGg6IHtcbiAgICBpY29uOiAnJiMxODI7JyxcbiAgICB0aXRsZTogJ1BhcmFncmFwaCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8UD4nKVxuICB9LFxuICBxdW90ZToge1xuICAgIGljb246ICcmIzgyMjA7ICYjODIyMTsnLFxuICAgIHRpdGxlOiAnUXVvdGUnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEJMT0NLUVVPVEU+JylcbiAgfSxcbiAgb2xpc3Q6IHtcbiAgICBpY29uOiAnJiMzNTsnLFxuICAgIHRpdGxlOiAnT3JkZXJlZCBMaXN0JyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydE9yZGVyZWRMaXN0JylcbiAgfSxcbiAgdWxpc3Q6IHtcbiAgICBpY29uOiAnJiM4MjI2OycsXG4gICAgdGl0bGU6ICdVbm9yZGVyZWQgTGlzdCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRVbm9yZGVyZWRMaXN0JylcbiAgfSxcbiAgY29kZToge1xuICAgIGljb246ICcmbHQ7LyZndDsnLFxuICAgIHRpdGxlOiAnQ29kZScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8UFJFPicpXG4gIH0sXG4gIGxpbmU6IHtcbiAgICBpY29uOiAnJiM4MjEzOycsXG4gICAgdGl0bGU6ICdIb3Jpem9udGFsIExpbmUnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0SG9yaXpvbnRhbFJ1bGUnKVxuICB9LFxuICBsaW5rOiB7XG4gICAgaWNvbjogJyYjMTI4Mjc5OycsXG4gICAgdGl0bGU6ICdMaW5rJyxcbiAgICByZXN1bHQ6ICgpID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5wcm9tcHQoJ0VudGVyIHRoZSBsaW5rIFVSTCcpXG4gICAgICBpZiAodXJsKSBleGVjKCdjcmVhdGVMaW5rJywgdXJsKVxuICAgIH1cbiAgfSxcbiAgaW1hZ2U6IHtcbiAgICBpY29uOiAnJiMxMjgyNDc7JyxcbiAgICB0aXRsZTogJ0ltYWdlJyxcbiAgICBwcm9tcHRNc2c6ICdFbnRlciB0aGUgVVJMIG9mIHRoZSBpbWFnZScsXG4gICAgcmVzdWx0OiAoKSA9PiB7XG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KHRoaXMucHJvbXB0TXNnKVxuICAgICAgaWYgKHVybCkgZXhlYygnaW5zZXJ0SW1hZ2UnLCB1cmwpXG4gICAgfVxuICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY291cnNlTmFtZVRvQ3NzQ2xhc3MoY3NzUHJlZml4OiBzdHJpbmcsIGNvdXJzZU5hbWU6IHN0cmluZykge1xuICByZXR1cm4gYCR7Y3NzUHJlZml4fSR7Y291cnNlTmFtZS5zdWJzdHIoMCwzKS50b0xvd2VyQ2FzZSgpfWA7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZW1vdmVJdGVtIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0nO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgZGlhbG9nczogUmVhY3QuQ29tcG9uZW50W107XG4gIHBvcERpYWxvZzogKCk9PnZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEaWFsb2dzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIGxhc3REaXY6IEhUTUxEaXZFbGVtZW50IHwgbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzOiBQcm9wcykge1xuICAgIGlmICh0aGlzLmxhc3REaXYgIT09IG51bGwgJiYgcHJldlByb3BzLmRpYWxvZ3MubGVuZ3RoID4gdGhpcy5wcm9wcy5kaWFsb2dzLmxlbmd0aCkge1xuICAgICAgLy8gQSBkaWFsb2cgd2FzIGNsb3NlZC4gTm93IGZvY3VzIHRoZSBsYXN0IGRpYWxvZzpcbiAgICAgICQoZmluZERPTU5vZGUodGhpcy5sYXN0RGl2KSkuZmluZCgnOmlucHV0JykuZmlyc3QoKS5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgdGhpcy5sYXN0RGl2ID0gbnVsbDtcbiAgICBjb25zdCB7ZGlhbG9ncywgcG9wRGlhbG9nfSA9IHRoaXMucHJvcHM7XG4gICAgJCgnYm9keScpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCBkaWFsb2dzLmxlbmd0aCA+IDApO1xuICAgICQoJ2JvZHknKS5jc3MoJ292ZXJmbG93JywgZGlhbG9ncy5sZW5ndGggPiAwID8gJ2hpZGRlbicgOiAnYXV0bycpO1xuXG4gICAgcmV0dXJuIGRpYWxvZ3MubGVuZ3RoID4gMCAmJiA8ZGl2PlxuICAgICAge2RpYWxvZ3MubWFwKChkaWFsb2csIGlkeCkgPT4ge1xuICAgICAgICBsZXQgZGl2OiBIVE1MRGl2RWxlbWVudDtcbiAgICAgICAgZnVuY3Rpb24gb25LZXlQcmVzcyhldjogUmVhY3QuS2V5Ym9hcmRFdmVudDxIVE1MRGl2RWxlbWVudD4pIHtcbiAgICAgICAgICBpZiAoZXYud2hpY2ggPT09IDEzICYmICghZXYudGFyZ2V0IHx8IChldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnRhZ05hbWUgIT09ICdURVhUQVJFQScpKSB7XG4gICAgICAgICAgICAkKGZpbmRET01Ob2RlKGRpdikpLmZpbmQoJy5idG4tZGVmYXVsdCcpLmNsaWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIG9uS2V5RG93bihldikge1xuICAgICAgICAgIGlmIChldi53aGljaCA9PT0gMjcpIHsgLy8gRXNjYXBlXG4gICAgICAgICAgICBwb3BEaWFsb2coKTtcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXYud2hpY2ggPT09IDgzICYmIChldi5jdHJsS2V5IHx8IGV2Lm1ldGFLZXkpKSB7IC8vIENUUkwtU1xuICAgICAgICAgICAgY29uc3QgZG9tTm9kZSA9IGZpbmRET01Ob2RlKGRpdik7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdEJ1dHRvbiA9ICQoZG9tTm9kZSkuZmluZCgnLmJ0bi1kZWZhdWx0Jyk7XG4gICAgICAgICAgICBkZWZhdWx0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDxkaXYga2V5PXtpZHh9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXJrZW5cIiAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1wYWdlLXdyYXBcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1wYWdlXCIgcmVmPXtlbGVtID0+IHtcbiAgICAgICAgICBkaXYgPSBlbGVtO1xuICAgICAgICAgIGlmIChpZHggPT09IGRpYWxvZ3MubGVuZ3RoIC0gMSkgdGhpcy5sYXN0RGl2ID0gZWxlbTtcbiAgICAgICAgfX1cbiAgICAgICAgICAgIHRhYkluZGV4PXswfVxuICAgICAgICAgICAgYXJpYS1kaXNhYmxlZD17aWR4IDwgZGlhbG9ncy5sZW5ndGggLSAxfVxuICAgICAgICAgICAgb25LZXlQcmVzcz17b25LZXlQcmVzc31cbiAgICAgICAgICAgIG9uS2V5RG93bj17b25LZXlEb3dufT5cbiAgICAgICAgICB7ZGlhbG9nfVxuICAgICAgICAgIDxSZW1vdmVJdGVtIG9uQ2xpY2s9e3BvcERpYWxvZ30gLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN0b3BGbG9hdHNcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj59KX1cbiAgPC9kaXY+O1xuICB9XG59XG4iLCJcbmV4cG9ydCBjbGFzcyBQZW5kaW5nSm9iIHtcbiAgcHJpdmF0ZSB0aW1lb3V0SWQgPSBudWxsO1xuICBwcml2YXRlIGNhbmNlbGxlZCA9IGZhbHNlO1xuICBwcml2YXRlIHBlbmRpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBpc0pvYkV4ZWN1dGluZyA9IGZhbHNlO1xuICBwcml2YXRlIGpvYkNhbGxiYWNrOiAoKT0+UHJvbWlzZTxhbnk+O1xuICBcbiAgY29uc3RydWN0b3IoY2FsbGJhY2s6ICgpPT5Qcm9taXNlPGFueT4pIHtcbiAgICB0aGlzLmpvYkNhbGxiYWNrID0gY2FsbGJhY2s7XG4gIH1cblxuICB0cmlnZ2VyQ2hhbmdlKHRocm90dGxlOiBudW1iZXIpOiBhbnkge1xuICAgIGlmICh0aGlzLmNhbmNlbGxlZCkgcmV0dXJuO1xuICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgaWYgKHRoaXMudGltZW91dElkICE9PSBudWxsKVxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTtcbiAgICB0aGlzLnRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCk9PnRoaXMubGF1bmNoSm9iKCksIHRocm90dGxlKTtcbiAgfVxuXG4gIHN0b3AoKSB7XG4gICAgaWYgKHRoaXMudGltZW91dElkICE9PSBudWxsKVxuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTtcbiAgICB0aGlzLnRpbWVvdXRJZCA9IG51bGw7XG4gICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsYXVuY2hKb2IoKSB7XG4gICAgaWYgKHRoaXMuY2FuY2VsbGVkKSByZXR1cm47XG4gICAgaWYgKCF0aGlzLnBlbmRpbmcpIHJldHVybjtcbiAgICBpZiAodGhpcy5pc0pvYkV4ZWN1dGluZykgcmV0dXJuO1xuICAgIHRoaXMudGltZW91dElkID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgdGhpcy5pc0pvYkV4ZWN1dGluZyA9IHRydWU7XG4gICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgIGF3YWl0IHRoaXMuam9iQ2FsbGJhY2soKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5pc0pvYkV4ZWN1dGluZyA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5wZW5kaW5nKVxuICAgICAgYXdhaXQgdGhpcy5sYXVuY2hKb2IoKTtcbiAgfVxufVxuIiwiaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuXG5kZWNsYXJlIHZhciBwcm9jZXNzOiBhbnk7XG5cbmNmZy5FTlZJUk9OTUVOVCA9IHByb2Nlc3MuZW52LkVOVklST05NRU5UIGFzIFwicHJvZHVjdGlvblwiIHwgXCJkZXZlbG9wbWVudFwiIHwgXCJ0ZXN0XCI7XG5jZmcuS0VEX0FQSV9VUkwgPSBwcm9jZXNzLmVudi5LRURfQVBJX1VSTDsgLy8gXCJodHRwczovL2tlZGJhY2tlbmR0ZXN0LmF6dXJld2Vic2l0ZXMubmV0L2FwaS9cIlxuY2ZnLkVEU19BUElfVVJMID0gcHJvY2Vzcy5lbnYuRURTX0FQSV9VUkw7IC8vIFwiaHR0cHM6Ly9lZHNwb3J0YWxvd2luYXBpLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9cIlxuY2ZnLktFRF9UT0tFTl9VUkwgPSBwcm9jZXNzLmVudi5LRURfVE9LRU5fVVJMOyAvLyBcImh0dHBzOi8va2VkYXV0aHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvdG9rZW5cIlxuY2ZnLktFRF9DTElFTlRfSUQgPSBwcm9jZXNzLmVudi5LRURfQ0xJRU5UX0lEOyAvLyBcImRldmNsaWVudFwiLCBcInRlc3RjbGllbnRcIiwgXCIuLi5cIlxuY2ZnLktFRF9DTElFTlRfU0VDUkVUID0gcHJvY2Vzcy5lbnYuS0VEX0NMSUVOVF9TRUNSRVQ7XG5jZmcuS0VEX1JFQUxNID0gcHJvY2Vzcy5lbnYuS0VEX1JFQUxNOyAvLyBcIlNFMVwiXG5jZmcuS0VEX0xPQ0FMRSA9IGNmZy5LRURfTE9DQUxFIHx8IHByb2Nlc3MuZW52LktFRF9MT0NBTEU7IC8vIFwic3ZcIiwgXCJlblwiLiBPbmx5IHNldCBmcm9tIHByb2Nlc3MuZW52IGlmIG5vdCBzZXQgZnJvbSBTaXRlVmlzaW9uIGVsZW1lbnQgY29uZmlnLlxuY2ZnLktFRF9TQ0hPT0xfTE9DQUxFID0gY2ZnLktFRF9TQ0hPT0xfTE9DQUxFIHx8IHByb2Nlc3MuZW52LktFRF9TQ0hPT0xfTE9DQUxFOyAvLyBcInN2XCIsIFwiZW5fc2luXCIsIFwiZW5fbmluXCIuIE9ubHkgc2V0IGZyb20gcHJvY2Vzcy5lbnYgaWYgbm90IHNldCBmcm9tIFNpdGVWaXNpb24gZWxlbWVudCBjb25maWcuXG4iLCJpbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nLCBnZW5lcmF0ZVF1ZXJ5U3RyaW5nLCBzcGxpdFVybEFuZFF1ZXJ5IH0gZnJvbSBcIi4uL3V0aWxzL3F1ZXJ5LXN0cmluZ1wiO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudFdlYiwgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIsIGlzb21vcnBoaWMsIHN0b3JhZ2UgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudHdlYic7XG5pbXBvcnQgeyBCZWFyZXJQcm92aWRlciwgS2VkQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XG5pbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzXCI7XG5pbXBvcnQgeyBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyB9IGZyb20gXCIuLi9hY2Nlc3MtY29udHJvbC9pbmRleFwiO1xuaW1wb3J0IHsgY2hlcnJ5UGlja1Byb3BzIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCI7XG5cbmZ1bmN0aW9uIGdldE1lcmdlZFRva2VuUGF0aCh0b2tlblBhdGg6IHN0cmluZywgbG9jYXRpb25TZWFyY2g6IHN0cmluZywgc2NvcGVzOiBzdHJpbmdbXSkge1xuICAvLyBNZXJnZSBjb25maWd1cmVkIHF1ZXJ5IHBhcmFtcyBvZiB0b2tlbiBwYXRoIHdpdGggcGFyYW1zIGdpdmVuIHRvIGN1cnJlbnQgcGFnZVxuICBjb25zdCBjdXJyZW50UXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uU2VhcmNoKTtcbiAgY29uc3QgaW1wZXJzb25hdGlvblByb3BzID0gY2hlcnJ5UGlja1Byb3BzKGN1cnJlbnRRdWVyeSwgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMpO1xuICBjb25zdCBbdG9rZW5QYXRoV2l0aG91dFF1ZXJ5LCB0b2tlblF1ZXJ5U3RyaW5nXSA9IHNwbGl0VXJsQW5kUXVlcnkodG9rZW5QYXRoKTtcbiAgY29uc3QgdG9rZW5QYXRoUXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKHRva2VuUXVlcnlTdHJpbmcpO1xuICByZXR1cm4gdG9rZW5QYXRoV2l0aG91dFF1ZXJ5ICsgZ2VuZXJhdGVRdWVyeVN0cmluZyh7XG4gICAgLi4udG9rZW5QYXRoUXVlcnksXG4gICAgLi4uaW1wZXJzb25hdGlvblByb3BzLFxuICAgIHNjb3Blczogc2NvcGVzLmpvaW4oJywnKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VG9rZW5JZChtZXJnZWRUb2tlblBhdGg6IHN0cmluZywgdXNlckVtYWlsOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG1lcmdlZFRva2VuUGF0aCArIFwiL1wiICsgdXNlckVtYWlsO1xufVxuXG5mdW5jdGlvbiBzYXZlVXNlckluZm8odXNlcjogVXNlciwgdG9rZW5JZDogc3RyaW5nKSB7XG4gIGVudi5jdXJyZW50VXNlciA9IHVzZXI7XG4gIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJ1c2VySW5mb1wiICsgdG9rZW5JZCwgSlNPTi5zdHJpbmdpZnkodXNlcikpO1xufVxuXG5mdW5jdGlvbiBsb2FkVXNlckluZm8odG9rZW5JZDogc3RyaW5nKSB7XG4gIGNvbnN0IHN0b3JlZFNlc3Npb25Vc2VyID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInVzZXJJbmZvXCIgKyB0b2tlbklkKTtcbiAgaWYgKHN0b3JlZFNlc3Npb25Vc2VyKSB7XG4gICAgZW52LmN1cnJlbnRVc2VyID0gSlNPTi5wYXJzZShzdG9yZWRTZXNzaW9uVXNlcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoOiBzdHJpbmcsIHVzZXJFbWFpbDogc3RyaW5nKSB7XG4gIGNvbnN0IHRva2VuSWQgPSBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgdXNlckVtYWlsKTtcbiAgcmV0dXJuIG5ldyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGgsIHJlc3BvbnNlVGV4dCA9PiB7XG4gICAgY29uc3QgcmVzID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpIGFzIHsgb2s6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nLCB0b2tlbj86IHN0cmluZywgdXNlcj86IFVzZXIgfTtcbiAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcik7XG4gICAgaWYgKHJlcy51c2VyKSB7XG4gICAgICBzYXZlVXNlckluZm8ocmVzLnVzZXIsIHRva2VuSWQpO1xuICAgIH1cbiAgICByZXR1cm4geyB0b2tlbjogcmVzLnRva2VuLCBleHBpcmVzOiBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDEwMDAgfTtcbiAgfSwgdG9rZW5JZCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoOiBzdHJpbmcsIHVzZXJFbWFpbDogc3RyaW5nKSB7XG4gIGNvbnN0IHRva2VuSWQgPSBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgdXNlckVtYWlsKTtcbiAgcmV0dXJuIG5ldyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGgsIHJlc3BvbnNlVGV4dCA9PiB7XG4gICAgY29uc3QgcmVzID0gSlNPTi5wYXJzZShyZXNwb25zZVRleHQpIGFzIHsgb2s6IGJvb2xlYW4sIGVycm9yPzogc3RyaW5nLCB0b2tlbj86IHN0cmluZywgdXNlcj86IFVzZXIgfTtcbiAgICBpZiAoIXJlcy5vaykgdGhyb3cgbmV3IEVycm9yKHJlcy5lcnJvcik7XG4gICAgcmV0dXJuIHsgdG9rZW46IHJlcy50b2tlbiwgZXhwaXJlczogRGF0ZS5ub3coKSArIDU5ICogNjAgKiAxMDAwIH07XG4gIH0sIHRva2VuSWQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcih0b2tlblVybDogc3RyaW5nLCB1c2VyOiBVc2VyLCBzY29wZXM6IHN0cmluZ1tdKSB7XG4gIHJldHVybiBuZXcgS2VkQmVhcmVyUHJvdmlkZXIoXG4gICAgaXNvbW9ycGhpYyxcbiAgICBzdG9yYWdlLFxuICAgIHRva2VuVXJsICsgdXNlci5tYWlsICsgbG9jYXRpb24uc2VhcmNoLFxuICAgIGNmZy5LRURfQ0xJRU5UX0lELFxuICAgIGNmZy5LRURfQ0xJRU5UX1NFQ1JFVCxcbiAgICB0b2tlblVybCwge1xuICAgICAgZW1haWw6IHVzZXIubWFpbC50b0xvd2VyQ2FzZSgpLFxuICAgICAgcm9sZXM6IHVzZXIucm9sZXMsXG4gICAgICBzY2hvb2w6IHVzZXIuc2Nob29sLFxuICAgICAgc2Nob29sVHlwZTogdXNlci5zY2hvb2xUeXBlLFxuICAgICAgc2NvcGVzXG4gICAgfSk7XG59XG5cbi8vIGVudi5jdXJyZW50VXNlci5tYWlsIGlzIHNldCBieSBTaXRlVmlzaW9uIHNlcnZlciBpbml0aWFsbHkuXG4vLyBBIHJlc3BvbnNlIGZyb20gL2FwaS90b2tlbiBtYXkgY2hhbmdlIHRoZSBtYWlsIGF0dHJpYnV0ZSBvZiB0aGUgY3VycmVudFxuLy8gdXNlciwgc28gZW52LmN1cnJlbnRVc2VyLm1haWwgbWF5IGJlIGRpZmZlcmVudCBhZnRlciBnZXR0aW5nIGEgcmVzcG9uc2UuXG4vLyBIb3dldmVyLCB0aGUgaW5pdGlhbCB2YWx1ZSBpcyB2YWx1YWJsZSBhbHdheXMgaW4gb3JkZXIgdG8gZGlzdGluZ3Vpc2ggdGhlIGNhc2Vcbi8vIHdoZW4gb25lIG5vcm1hbCB1c2VyIGxvZ3Mgb3V0IGFuZCBhbm90aGVyIHVzZXIgbG9ncyBpbi5cbmNvbnN0IGluaXRpYWxVc2VyRW1haWwgPSBlbnYuY3VycmVudFVzZXIgJiYgZW52LmN1cnJlbnRVc2VyLm1haWw7IC8vIEluaXRpYWwgdmFsdWUgb2YgbWFpbC4gTWF5IGNoYW5nZS5cbmlmIChpbml0aWFsVXNlckVtYWlsKSB7XG4gIC8vIEtFRFxuICBpZiAoY2ZnLktFRF9UT0tFTl9QQVRIKSB7XG4gICAgLy9cbiAgICAvL1xuICAgIC8vIFByb2R1Y3Rpb24gLyBTaXRlVmlzaW9uIHByb3hpZWQgL2FwaS90b2tlbiB0byByZXF1ZXN0IHRva2VucyBmcm9tOlxuICAgIC8vXG4gICAgLy9cbiAgICBjb25zdCBtZXJnZWRUb2tlblBhdGggPSBnZXRNZXJnZWRUb2tlblBhdGgoXG4gICAgICBjZmcuS0VEX1RPS0VOX1BBVEgsXG4gICAgICBsb2NhdGlvbi5zZWFyY2gsIFtcbiAgICAgICAgXCJrZWRiYWNrZW5kXCIsXG4gICAgICAgIFwiRURTXCIsXG4gICAgICBdKTtcbiAgICBlbnYuYmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGgsIGluaXRpYWxVc2VyRW1haWwpO1xuICAgIGxvYWRVc2VySW5mbyhnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aCwgaW5pdGlhbFVzZXJFbWFpbCkpO1xuXG4gICAgLy8gR29vZ2xlXG4gICAgY29uc3QgZ29vZ2xlTWVyZ2VkUGF0aCA9IGdldE1lcmdlZFRva2VuUGF0aChcbiAgICAgIGNmZy5LRURfVE9LRU5fUEFUSCxcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCwgW1xuICAgICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXIucmVhZG9ubHlcIixcbiAgICAgIF0pO1xuICAgIGVudi5nb29nbGVUb2tlblByb3ZpZGVyID0gY3JlYXRlR29vZ2xlVG9rZW5Qcm92aWRlcihnb29nbGVNZXJnZWRQYXRoLCBpbml0aWFsVXNlckVtYWlsKTtcbiAgfSBlbHNlIGlmIChjZmcuS0VEX1RPS0VOX1VSTCAmJiBjZmcuS0VEX0NMSUVOVF9JRCAmJiBjZmcuS0VEX0NMSUVOVF9TRUNSRVQpIHtcbiAgICAvL1xuICAgIC8vXG4gICAgLy8gVGVzdCAtIGdvIGRpcmVjdGx5IHRvIEtFREFVVEggc2VydmVyIHRvIHJldHJpZXZlIHRva2Vuc1xuICAgIC8vXG4gICAgLy9cbiAgICBlbnYuYmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcihjZmcuS0VEX1RPS0VOX1VSTCwgZW52LmN1cnJlbnRVc2VyLCBbXG4gICAgICBcImtlZGJhY2tlbmRcIixcbiAgICAgIFwiRURTXCIsXG4gICAgXSk7XG4gICAgZW52Lmdvb2dsZVRva2VuUHJvdmlkZXIgPSBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcihjZmcuS0VEX1RPS0VOX1VSTCArIFwiL2dvb2dsZVwiLCBlbnYuY3VycmVudFVzZXIsIFtcbiAgICAgIFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jYWxlbmRhci5yZWFkb25seVwiLFxuICAgIF0pO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgTWlzc2luZyBjb25maWd1cmF0aW9uIHBhcmFtZXRlciBLRURfVE9LRU5fUEFUSGApO1xuICB9XG59XG4iLCJpbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50V2ViIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWInO1xuXG5lbnYua2VkQmFja2VuZENsaWVudCA9IG5ldyBLZWRCYWNrZW5kQ2xpZW50V2ViIChcbiAgY2ZnLktFRF9BUElfVVJMLFxuICBlbnYuYmVhcmVyUHJvdmlkZXIpO1xuXG4iLCJpbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XG5pbXBvcnQgeyBpc29tb3JwaGljIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWInO1xuaW1wb3J0IHsgRWRzQ2xpZW50IH0gZnJvbSAnLi4vYXBpcy9lZHNjbGllbnQnO1xuXG5lbnYuZWRzQ2xpZW50ID0gbmV3IEVkc0NsaWVudCAoXG4gIGlzb21vcnBoaWMsXG4gIGNmZy5FRFNfQVBJX1VSTCxcbiAgZW52LmJlYXJlclByb3ZpZGVyLFxuICAoKT0+ZW52LmN1cnJlbnRVc2VyLm1haWwpO1xuXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY3VycmVudFVzZXJFbnYsIHsgRW52IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB0dXRvckVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC50dXRvckVudic7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHR1dG9yZWQ6IGJvb2xlYW47XG4gIGNyZWF0ZUNvbXBvbmVudDogKGVudjogRW52KT0+UmVhY3QuUmVhY3ROb2RlXG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGVudjogRW52O1xufVxuXG5leHBvcnQgY2xhc3MgVHV0b3JhYmxlQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkVudlVwZGF0ZWQgPSB0aGlzLm9uRW52VXBkYXRlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlbnY6IHByb3BzLnR1dG9yZWQgPyBudWxsIDogY3VycmVudFVzZXJFbnZcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy50dXRvcmVkKSB7XG4gICAgICB0dXRvckVudi5zdWJzY3JpYmUodGhpcy5vbkVudlVwZGF0ZWQpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLnR1dG9yZWQpIHtcbiAgICAgIHR1dG9yRW52LnVuc3Vic2NyaWJlKHRoaXMub25FbnZVcGRhdGVkKTtcbiAgICB9XG4gIH1cblxuICBvbkVudlVwZGF0ZWQoZW52OiBFbnYpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtlbnZ9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7ZW52fSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKCFlbnYpIHJldHVybiA8ZGl2PjwvZGl2PjtcbiAgICBpZiAoIWVudi5rZWRCYWNrZW5kQ2xpZW50KSB7XG4gICAgICByZXR1cm4gPGRpdj5MYWRkYXIuLi48L2Rpdj47XG4gICAgfVxuICAgIC8vY29uc3Qge2N1cnJlbnRVc2VyLCBlZHNDbGllbnQsIGtlZEJhY2tlbmRDbGllbnQsIGtnVGVybVBsYW5uZXJSZXBvfSA9IGVudjtcbiAgICAvL2NvbnN0IHt0dXRvcmVkfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuY3JlYXRlQ29tcG9uZW50KGVudik7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZXJzIH0gZnJvbSAnLi4vZGF0YS91c2Vycyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBDaG9vc2VVc2VyKCkge1xuICBsZXQgc2VsZWN0O1xuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1sYXlvdXRcIj5cbiAgICA8aDI+VsOkbGogYW52w6RuZGFyZTwvaDI+XG4gICAgPHRhYmxlIGNsYXNzTmFtZT1cImxvZ2luLXRhYmxlXCI+PHRoZWFkPjx0cj5cbiAgICAgIDx0aD5OYW1uPC90aD5cbiAgICAgIDx0aD5Sb2xsZXI8L3RoPlxuICAgICAgPHRoPkUtcG9zdDwvdGg+XG4gICAgICA8dGg+U2tvbGE8L3RoPlxuICAgIDwvdHI+PC90aGVhZD5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAge3VzZXJzLm1hcCgoeyB1c2VybmFtZSwgZGlzcGxheU5hbWUsIG1haWwsIHNjaG9vbCwgcm9sZXMgfSkgPT5cbiAgICAgICAgICA8dHIga2V5PXttYWlsfSBvbkNsaWNrPXsoKSA9PiBsb2NhdGlvbi5zZWFyY2ggPSBgP3VzZXI9JHt1c2VybmFtZX1gfT5cbiAgICAgICAgICAgIDx0ZD57ZGlzcGxheU5hbWV9PC90ZD5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT17cm9sZXMubGVuZ3RoID09PSAwID8geyBmb250U3R5bGU6ICdpdGFsaWMnIH0gOiB7fX0+e3JvbGVzLmxlbmd0aCA9PT0gMCA/IFwic2FrbmFyIHJvbGxlclwiIDogcm9sZXMuam9pbignLCAnKX08L3RkPlxuICAgICAgICAgICAgPHRkPnttYWlsfTwvdGQ+XG4gICAgICAgICAgICA8dGQgc3R5bGU9e3NjaG9vbCA/IHt9IDogeyBmb250U3R5bGU6ICdpdGFsaWMnIH19PntzY2hvb2wgfHwgXCJzYWtuYXIgc2tvbGFcIn08L3RkPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICl9XG4gICAgICA8L3Rib2R5PjwvdGFibGU+XG4gIDwvZGl2PlxufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICB0YWc/OiAnaW5wdXQnIHwgJ3RleHRhcmVhJ1xuICAgIGVhZ2VyPzogYm9vbGVhbjtcbiAgICBvbkNoYW5nZTogKG5ld05hbWU6IHN0cmluZykgPT4gdm9pZDtcbiAgICBwbGFjZWhvbGRlcj86IHN0cmluZzsgLy8gSWYgdGV4dCBpcyBlbXB0eSwgdGhpcyB3aWxsIGJlIHRoZSBwbGFjZWhvbGRlclxuICAgIGNsaWNrQWR2ZXJ0aXNlVGV4dD86IHN0cmluZztcbiAgICBtYXhDaGFycz86IG51bWJlcjtcbiAgICByZWFkT25seT86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gICAgZWRpdE1vZGU6IGJvb2xlYW47XG4gICAgcnVudGltZVN0eWxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xuICAgIHRleHQ6IHN0cmluZyB8IG51bGw7XG59XG5cbi8qKiBcbiAqIE1ha2VzIGEgdGV4dCBlbGVtZW50IChzdWNoIGFzIGFuIEEgb3IgUCB0YWcpIHBvc3NpYmxlIHRvIHJlcGxhY2Ugd2l0aCBhbiBpbnB1dCBlbGVtZW50IG9mIHRoZSBzYW1lIENTUyBzdHlsZSwgZm9yIGV4YW1wbGUgYnkgY2xpY2tpbmcgb24gaXQuXG4gKiBcbiovXG5leHBvcnQgY2xhc3MgUmVuYW1lYWJsZVRleHQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgICBsYWJlbDogSFRNTEVsZW1lbnQ7XG4gICAgaW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBIVE1MVGV4dEFyZWFFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGVkaXRNb2RlOiBmYWxzZSxcbiAgICAgICAgICAgIHJ1bnRpbWVTdHlsZTogbnVsbCxcbiAgICAgICAgICAgIHRleHQ6IHByb3BzLnRleHQgfHwgXCJcIlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudGV4dCAhPT0gbmV4dFByb3BzLnRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3RleHQ6IG5leHRQcm9wcy50ZXh0IHx8IFwiXCJ9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuc3RhdGUudGV4dCB8fCBcIlwiO1xuICAgICAgICByZXR1cm4gPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJyZW5hbWVhYmxlLXRleHRcIiArICh0ZXh0ID8gXCJcIiA6IFwiIHVubmFtZWRcIikgKyAodGhpcy5wcm9wcy5yZWFkT25seSA/IFwiIGRpc2FibGVkXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICB0YWJJbmRleD17dGhpcy5zdGF0ZS5lZGl0TW9kZSA/IHVuZGVmaW5lZCA6IDB9XG4gICAgICAgICAgICAgICAgb25Gb2N1cz17KGUpPT57dGhpcy5yZW5hbWUoKX19XG4gICAgICAgICAgICAgICAgc3R5bGU9e3t3aWR0aDogXCIxMDAlXCJ9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHJlZj17bGFiZWwgPT4gdGhpcy5sYWJlbCA9IGxhYmVsfSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0aGlzLnN0YXRlLmVkaXRNb2RlID8gJ25vbmUnIDogJydcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHt0ZXh0IHx8IHRoaXMucHJvcHMuY2xpY2tBZHZlcnRpc2VUZXh0fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy50YWcgPT09ICd0ZXh0YXJlYScgP1xuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSByZWY9e2lucHV0ID0+IHRoaXMuaW5wdXQgPSBpbnB1dH1cbiAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoPXt0aGlzLnByb3BzLm1heENoYXJzfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnRoaXMuc3RhdGUucnVudGltZVN0eWxlLCBkaXNwbGF5OiB0aGlzLnN0YXRlLmVkaXRNb2RlID8gJycgOiAnbm9uZSd9fVxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzPXtldj0+JChldi50YXJnZXQpLnNlbGVjdCgpfVxuICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e3RoaXMub25CbHVyLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0ZXh0fVxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMub25LZXlEb3duLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PXt0aGlzLnN0YXRlLmVkaXRNb2RlID8gMCA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgLz4gOiBcbiAgICAgICAgICAgICAgICA8aW5wdXQgcmVmPXtpbnB1dCA9PiB0aGlzLmlucHV0ID0gaW5wdXR9XG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgbWF4TGVuZ3RoPXt0aGlzLnByb3BzLm1heENoYXJzfVxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17ey4uLnRoaXMuc3RhdGUucnVudGltZVN0eWxlLCBkaXNwbGF5OiB0aGlzLnN0YXRlLmVkaXRNb2RlID8gJycgOiAnbm9uZSd9fVxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzPXtldj0+JChldi50YXJnZXQpLnNlbGVjdCgpfVxuICAgICAgICAgICAgICAgICAgICBvbkJsdXI9e3RoaXMub25CbHVyLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0ZXh0fVxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMub25LZXlEb3duLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgICAgIHRhYkluZGV4PXt0aGlzLnN0YXRlLmVkaXRNb2RlID8gMCA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIH1cbiAgICAgICAgPC9kaXY+XG4gICAgfVxuXG4gICAgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHsgLy8gRVNDXG4gICAgICAgICAgICB0aGlzLmlucHV0LnZhbHVlID0gdGhpcy5wcm9wcy50ZXh0IHx8IFwiXCI7XG4gICAgICAgICAgICB0aGlzLmlucHV0LmJsdXIoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAxMykgeyAvLyBFTlRFUlxuICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVPbkNoYW5nZSh0aGlzLmlucHV0LnZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0TW9kZTogZmFsc2UsIHRleHQ6IHRoaXMuaW5wdXQudmFsdWUgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkJsdXIoZTogRXZlbnQpIHtcbiAgICAgICAgdGhpcy5wcm9wYWdhdGVPbkNoYW5nZSh0aGlzLmlucHV0LnZhbHVlKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVkaXRNb2RlOiBmYWxzZSwgdGV4dDogdGhpcy5pbnB1dC52YWx1ZSB9KTtcbiAgICB9XG5cbiAgICBwcm9wYWdhdGVkT25DaGFuZ2U6IHN0cmluZztcblxuICAgIHByb3BhZ2F0ZU9uQ2hhbmdlKG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BhZ2F0ZWRPbkNoYW5nZSAhPSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVkT25DaGFuZ2UgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UobmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25DaGFuZ2UoZTogRXZlbnQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRleHQ6IHRoaXMuaW5wdXQudmFsdWUgfSk7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmVhZ2VyKSB0aGlzLnByb3BhZ2F0ZU9uQ2hhbmdlKHRoaXMuaW5wdXQudmFsdWUpO1xuICAgIH1cblxuICAgIHJlbmFtZSh0eHQ/OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZWRpdE1vZGUgfHwgdGhpcy5wcm9wcy5yZWFkT25seSkgcmV0dXJuO1xuICAgICAgICB0eHQgPSB0eHQgfHwgdGhpcy5zdGF0ZS50ZXh0IHx8IFwiXCI7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gJCh0aGlzLmxhYmVsKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB0ZXh0OiB0eHQsXG4gICAgICAgICAgICBlZGl0TW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIHJ1bnRpbWVTdHlsZToge1xuICAgICAgICAgICAgICAgIHRleHRBbGlnbjogbGFiZWwuY3NzKCd0ZXh0QWxpZ24nKSxcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogbGFiZWwuY3NzKCdmb250LXNpemUnKSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nVG9wOiBsYWJlbC5jc3MoJ3BhZGRpbmdUb3AnKSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nQm90dG9tOiBsYWJlbC5jc3MoJ3BhZGRpbmdCb3R0b20nKSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogbGFiZWwuY3NzKCdwYWRkaW5nTGVmdCcpLFxuICAgICAgICAgICAgICAgIHBhZGRpbmdSaWdodDogbGFiZWwuY3NzKCdwYWRkaW5nUmlnaHQnKSxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IGxhYmVsLmNzcygnbWFyZ2luVG9wJyksXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBsYWJlbC5jc3MoJ21hcmdpbkJvdHRvbScpLFxuICAgICAgICAgICAgICAgIG1hcmdpbkxlZnQ6IGxhYmVsLmNzcygnbWFyZ2luTGVmdCcpLFxuICAgICAgICAgICAgICAgIG1hcmdpblJpZ2h0OiBsYWJlbC5jc3MoJ21hcmdpblJpZ2h0JyksXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBsYWJlbC5jc3MoJ2JvcmRlclJhZGl1cycpLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogbGFiZWwuY3NzKCdiYWNrZ3JvdW5kQ29sb3InKSxcbiAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0OiBsYWJlbC5jc3MoJ2xpbmVIZWlnaHQnKSxcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBsYWJlbC5jc3MoJ2ZvbnRXZWlnaHQnKSxcbiAgICAgICAgICAgICAgICBvdXRMaW5lOiAwLFxuICAgICAgICAgICAgICAgIGJvcmRlclN0eWxlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcbiAgICAgICAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICAgICAgICAgICAgYm94U2l6aW5nOiBcImJvcmRlci1ib3hcIixcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgKCk9PiQodGhpcy5pbnB1dCkuZm9jdXMoKSk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ291cnNlLCBTY2hvb2wsIFVzZXJIaWRkZW5Db3Vyc2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgY2ZnIGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmNmZyc7XG5pbXBvcnQgeyBzaG93RXJyb3IsIGZsYXR0ZW4sIGNvbXBhcmVQcm9wLCBzaG93SW5mbywgTCB9IGZyb20gXCIuLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xuaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZywgZ2VuZXJhdGVRdWVyeVN0cmluZyB9IGZyb20gXCIuLi8uLi91dGlscy9xdWVyeS1zdHJpbmdcIjtcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSAnLi4vLi4vYWNjZXNzLWNvbnRyb2wvaW5kZXgnO1xuaW1wb3J0IHsgaGlkZGVuQ291cnNlc1JlcG8sIENvdXJzZVdpdGhIaWRkZW5TdGF0ZSB9IGZyb20gJy4uLy4uL3JlcG9zL2hpZGRlbi1jb3Vyc2VzLXJlcG8nO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBpc0xvYWRpbmc6IGJvb2xlYW5cbiAgY291cnNlczogQ291cnNlV2l0aEhpZGRlblN0YXRlW11cbiAgaGVhZGVyT3BlbjogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgTGlzdENvdXJzZXMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICBjb3Vyc2VzOiBbXSxcbiAgICAgIGhlYWRlck9wZW46IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLnVwZGF0ZUhpZGRlbkNvdXJzZXMgPSB0aGlzLnVwZGF0ZUhpZGRlbkNvdXJzZXMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBoaWRkZW5Db3Vyc2VzUmVwby5zdWJzY3JpYmUodGhpcy51cGRhdGVIaWRkZW5Db3Vyc2VzLCB7ZnVsbENvdXJzZTogdHJ1ZX0pO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaGlkZGVuQ291cnNlc1JlcG8udW5zdWJzY3JpYmUodGhpcy51cGRhdGVIaWRkZW5Db3Vyc2VzKTtcbiAgfVxuXG4gIHVwZGF0ZUhpZGRlbkNvdXJzZXMoY291cnNlczogQ291cnNlV2l0aEhpZGRlblN0YXRlW10pIHtcbiAgICB0aGlzLnNldFN0YXRlKHtjb3Vyc2VzLCBpc0xvYWRpbmc6IGZhbHNlfSk7XG4gIH1cblxuICBhc3luYyBoaWRlQ291cnNlKGNvdXJzZTogQ291cnNlV2l0aEhpZGRlblN0YXRlKSB7XG4gICAgc2hvd0luZm8oTGBTcGFyYXIuLi5gKTtcbiAgICBhd2FpdCBoaWRkZW5Db3Vyc2VzUmVwby5oaWRlQ291cnNlKGNvdXJzZSk7XG4gICAgc2hvd0luZm8oXCJcIik7XG4gIH1cblxuICBhc3luYyBzaG93Q291cnNlKGNvdXJzZTogQ291cnNlV2l0aEhpZGRlblN0YXRlKSB7XG4gICAgc2hvd0luZm8oTGBTcGFyYXIuLi5gKTtcbiAgICBhd2FpdCBoaWRkZW5Db3Vyc2VzUmVwby5zaG93Q291cnNlKGNvdXJzZSk7XG4gICAgc2hvd0luZm8oXCJcIik7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuaXNMb2FkaW5nKSByZXR1cm4gPFNwaW5uZXIgLz47XG4gICAgY29uc3Qge2NvdXJzZXN9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB2aXNpYmxlQ291cnNlcyA9IGNvdXJzZXMuZmlsdGVyKGNvdXJzZSA9PiBjb3Vyc2UudmlzaWJsZSk7XG4gICAgY29uc3QgaGlkZGVuQ291cnNlcyA9IGNvdXJzZXMuZmlsdGVyKGNvdXJzZSA9PiAhY291cnNlLnZpc2libGUpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gpO1xuICAgIGNvbnN0IHZpZXdDb3Vyc2VVcmwgPSBjZmcuS0VEX0NPVVJTRV9WSUVXRVJfVVJMO1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkXCI+XG4gICAgICA8aDM+U2tvbGFucyBrdXJzZXI8L2gzPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyIG9kZC1ldmVuXCI+XG4gICAgICAgIHt2aXNpYmxlQ291cnNlcy5tYXAoY291cnNlID0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHVkZW50Q291cnNlXCIga2V5PXtjb3Vyc2UuaWR9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHB1bGwtcmlnaHRcIj5cbiAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJoaWRlSXRlbVwiIG9uQ2xpY2s9eygpID0+IHRoaXMuaGlkZUNvdXJzZShjb3Vyc2UpfSAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICA8YSBocmVmPXtwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSh2aWV3Q291cnNlVXJsLCB7Y291cnNlSWQ6IGNvdXJzZS5pZH0pfT57Y291cnNlLm5hbWV9PC9hPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj57Y291cnNlLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2Pil9XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkNsb3NlXCIgKyAodGhpcy5zdGF0ZS5oZWFkZXJPcGVuID8gXCIgb3BlblwiIDogXCJcIil9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW5IZWFkZXJcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgaGVhZGVyT3BlbjogIXRoaXMuc3RhdGUuaGVhZGVyT3BlbiB9KX0+XG4gICAgICAgICAgPGg1PkRvbGRhIGt1cnNlcjwvaDU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW5Db250ZW50XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyIG9kZC1ldmVuXCI+XG4gICAgICAgICAgICB7aGlkZGVuQ291cnNlcy5tYXAoY291cnNlID0+IFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdHVkZW50Q291cnNlXCIga2V5PXtjb3Vyc2UuaWR9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBwdWxsLXJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJzaG93SXRlbVwiIG9uQ2xpY2s9eygpID0+IHRoaXMuc2hvd0NvdXJzZShjb3Vyc2UpfT48L2E+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj17Z2VuZXJhdGVRdWVyeVN0cmluZyh7Li4ucXVlcnksIGNvdXJzZUlkOiBjb3Vyc2UuaWR9KX0+e2NvdXJzZS5uYW1lfTwvYT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj57Y291cnNlLmRlc2NyaXB0aW9ufTwvcD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMZWFybmluZ01vZHVsZVRhc2ssIFRhc2tMaXN0IH0gZnJvbSAnLi90YXNrLWxpc3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjb21tb25UYXNrczogTGVhcm5pbmdNb2R1bGVUYXNrW11cbiAgbGVhcm5pbmdHb2FsczogTGVhcm5pbmdHb2FsW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBMZWFybmluZ0dvYWwge1xuICBuYW1lOiBzdHJpbmc7XG4gIGxlYXJuaW5nVGFza3M6IExlYXJuaW5nTW9kdWxlVGFza1tdO1xufVxuXG5leHBvcnQgY2xhc3MgTGVhcm5pbmdHb2Fsc0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtjb21tb25UYXNrcywgbGVhcm5pbmdHb2Fsc30gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiA8ZGl2PntsZWFybmluZ0dvYWxzLm1hcChsZyA9PiA8ZGl2IGtleT17bGcubmFtZX0+XG4gICAgICA8aDU+e2xnLm5hbWV9PC9oNT5cbiAgICAgIDxUYXNrTGlzdCBsZWFybmluZ1Rhc2tzPXtsZy5sZWFybmluZ1Rhc2tzfSAvPlxuICAgIDwvZGl2Pil9XG4gICAge2NvbW1vblRhc2tzLmxlbmd0aCA+IDAgJiYgPGRpdj5cbiAgICAgIHtsZWFybmluZ0dvYWxzLmxlbmd0aCA+IDAgJiYgPGg1PsOWdmVyZ3JpcGFuZGU8L2g1Pn1cbiAgICAgIDxUYXNrTGlzdCBsZWFybmluZ1Rhc2tzPXtjb21tb25UYXNrc30gLz5cbiAgICA8L2Rpdj59XG4gICAgPC9kaXY+O1xuICB9XG59IiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHtNb2NrRURTQWNhZGVtaWNZZWFyLCBNb2NrRURTRGF0ZVJhbmdlfSBmcm9tICcuLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7QWNhZGVtaWNZZWFyU3RydWN0dXJlLCAgVGVybSB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmltcG9ydCB7IEluamVjdGVkSW50bCB9IGZyb20gJ3JlYWN0LWludGwnOyAgXG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJpY1NjaG9vbE1vbWVudCB7XG4gICAgYWNhZGVtaWNZZWFyU3RydWN0dXJlOiBBY2FkZW1pY1llYXJTdHJ1Y3R1cmU7XG4gICAgdGVybTogVGVybTtcbiAgfVxuICBcbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50QWNhZGVtaWNZZWFyKGN1cnJlbnREYXRlOiBtb21lbnQuTW9tZW50LCBhY2FkZW1pY1llYXI6IE1vY2tFRFNBY2FkZW1pY1llYXIpIDogR2VuZXJpY1NjaG9vbE1vbWVudFxue1xuICB2YXIgZmlyc3RUZXJtU3RhcnREYXRlID0gbW9tZW50KG5ldyBEYXRlKGFjYWRlbWljWWVhci5maXJzdFRlcm0uc3RhcnREYXRlKSk7XG4gIHZhciBmaXJzdFRlcm1FbmREYXRlID0gbW9tZW50KG5ldyBEYXRlKGFjYWRlbWljWWVhci5maXJzdFRlcm0uZW5kRGF0ZSkpO1xuICB2YXIgc2Vjb25kVGVybVN0YXJ0RGF0ZSA9IG1vbWVudChuZXcgRGF0ZShhY2FkZW1pY1llYXIuc2Vjb25kVGVybS5zdGFydERhdGUpKTtcbiAgdmFyIHNlY29uZFRlcm1FbmREYXRlID0gbW9tZW50KG5ldyBEYXRlKGFjYWRlbWljWWVhci5zZWNvbmRUZXJtLmVuZERhdGUpKTtcbiAgdmFyIGFjYWRlbWljUGVyaW9kID0gZmlyc3RUZXJtU3RhcnREYXRlLnllYXIoKSArIFwiL1wiICsgc2Vjb25kVGVybUVuZERhdGUueWVhcigpO1xuXG4gIHZhciBob2xpZGF5cyA9IF9nZXRUZXJtSG9saWRheXMoYWNhZGVtaWNZZWFyLmhvbGlkYXlzLCBmaXJzdFRlcm1TdGFydERhdGUsIGZpcnN0VGVybUVuZERhdGUpOyBcbiAgaWYoY3VycmVudERhdGUgPCBmaXJzdFRlcm1FbmREYXRlKVxuICB7XG4gICAgLy9jb21wdXRlIGFjYWRlbWljIHdlZWsgbnVtYmVyc1xuICAgIHZhciBhY2FkZW1pY1N0YXJ0V2VlayA9IDE7XG4gICAgdmFyIGFjYWRlbWljRW5kV2VlayA9IGZpcnN0VGVybUVuZERhdGUud2VlaygpIC0gZmlyc3RUZXJtU3RhcnREYXRlLndlZWsoKTtcbiAgICAvL2dldCBjdXJyZW50IHRlcm0gaG9saWRheXNcbiAgICByZXR1cm4ge3Rlcm06ICdBVCcsIGFjYWRlbWljWWVhclN0cnVjdHVyZToge2FjYWRlbWljWWVhcjogYWNhZGVtaWNQZXJpb2QsIHN0YXJ0RGF0ZTogZmlyc3RUZXJtU3RhcnREYXRlLCBlbmREYXRlOiBmaXJzdFRlcm1FbmREYXRlLGFjYWRlbWljU3RhcnRXZWVrLCBhY2FkZW1pY0VuZFdlZWssIGhvbGlkYXlzfX07XG4gIH1cblxuICAvL2NvbXB1dGUgdGhlIG51bWJlciBvZiBmaXJzdCB0ZXJtIGhvbGlkYXlzIHdlZWsgbnVtYmVyc1xuICB2YXIgbnVtYmVyT2ZIb2xpZGF5V2Vla3MgPSBfZ2V0SG9saWRheVdlZWtzTnVtYmVyKGhvbGlkYXlzKTtcbiAgLy9jb21wdXRlIGFjYWRlbWljIHdlZWsgbnVtYmVyc1xuICB2YXIgYWNhZGVtaWNTdGFydFdlZWsgPSBzZWNvbmRUZXJtU3RhcnREYXRlLmNsb25lKCkuYWRkKDEsICd3ZWVrJykud2VlaygpIC0gZmlyc3RUZXJtU3RhcnREYXRlLndlZWsoKSAtIG51bWJlck9mSG9saWRheVdlZWtzO1xuICB2YXIgYWNhZGVtaWNFbmRXZWVrID0gc2Vjb25kVGVybUVuZERhdGUuY2xvbmUoKS5hZGQoKS5hZGQoMSwgJ3dlZWsnKS53ZWVrKCkgLSBmaXJzdFRlcm1TdGFydERhdGUud2VlaygpIC0gbnVtYmVyT2ZIb2xpZGF5V2Vla3M7XG4gIC8vZ2V0IGN1cnJlbnQgdGVybSBob2xpZGF5c1xuICB2YXIgaG9saWRheXMgPSBfZ2V0VGVybUhvbGlkYXlzKGFjYWRlbWljWWVhci5ob2xpZGF5cywgc2Vjb25kVGVybVN0YXJ0RGF0ZSwgc2Vjb25kVGVybUVuZERhdGUpO1xuICByZXR1cm4ge3Rlcm06ICdTVCcsIGFjYWRlbWljWWVhclN0cnVjdHVyZToge2FjYWRlbWljWWVhcjogYWNhZGVtaWNQZXJpb2QsIHN0YXJ0RGF0ZTogc2Vjb25kVGVybVN0YXJ0RGF0ZSwgZW5kRGF0ZTogc2Vjb25kVGVybUVuZERhdGUsIGFjYWRlbWljU3RhcnRXZWVrLCBhY2FkZW1pY0VuZFdlZWssIGhvbGlkYXlzfX07XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaG9vbFRyYW5zbGF0ZWRDb2x1bW5zKHNjaG9vbExvY2FsZTogc3RyaW5nLCBpbnRsOiBJbmplY3RlZEludGwgKXtcbiAgdmFyIHRyYW5zbGF0ZWRDb2x1bW5zID0ge307XG4gIC8vdGhlc2UgYXJlIGZpeGVkIGZvciBhbGwgc2Nob29sIGxvY2FsZXNcbiAgdHJhbnNsYXRlZENvbHVtbnNbXCJLdXJzXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5jb3Vyc2VcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiS3Vyc1wifSk7XG4gIHRyYW5zbGF0ZWRDb2x1bW5zW1wiS29tbWVudGFyXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5jb21tZW50c1wiLCBkZWZhdWx0TWVzc2FnZTogXCJLb21tZW50YXJcIn0pO1xuXG4gIGlmKHNjaG9vbExvY2FsZSA9PT0gJ3N2Jyl7XG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJNLnNwclwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIubW9kZXJuTGFuZ3VhZ2VcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiTS5zcHJcIn0pO1xuICAgIHRyYW5zbGF0ZWRDb2x1bW5zW1wiTWFcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLm1hdGhzXCIsIGRlZmF1bHRNZXNzYWdlOiBcIk1hXCJ9KTtcbiAgICB0cmFuc2xhdGVkQ29sdW1uc1tcIlN2L1N2QVwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuc3dlZGlzaExhbmd1YWdlXCIsIGRlZmF1bHRNZXNzYWdlOiBcIlN2L1N2QVwifSk7XG4gICAgdHJhbnNsYXRlZENvbHVtbnNbXCJFbmdcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLmVuZ2xpc2hMYW5ndWFnZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJFbmdcIn0pO1xuICB9XG4gIGVsc2Uge1xuICAgIHRyYW5zbGF0ZWRDb2x1bW5zW1wiTUZMXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5tb2Rlcm5MYW5ndWFnZVwiLCBkZWZhdWx0TWVzc2FnZTogXCJNRkxcIn0pO1xuICAgIHRyYW5zbGF0ZWRDb2x1bW5zW1wiTWFcIl0gPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOiBcInRlcm1wbGFubmVyLm1hdGhzXCIsIGRlZmF1bHRNZXNzYWdlOiBcIk1hdGhzXCJ9KTtcbiAgICB0cmFuc2xhdGVkQ29sdW1uc1tcIkhpXCJdID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDogXCJ0ZXJtcGxhbm5lci5oaW5kaUxhbmd1YWdlXCIsIGRlZmF1bHRNZXNzYWdlOiBcIkhpbmRpXCJ9KTtcbiAgICB0cmFuc2xhdGVkQ29sdW1uc1tcIkVuZ1wiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuZW5nbGlzaExhbmd1YWdlXCIsIGRlZmF1bHRNZXNzYWdlOiBcIkVuZ2xpc2hcIn0pO1xuICAgIHRyYW5zbGF0ZWRDb2x1bW5zW1wiWW9nYVwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIueW9nYVwiLCBkZWZhdWx0TWVzc2FnZTogXCJZb2dhXCJ9KTtcbiAgICB0cmFuc2xhdGVkQ29sdW1uc1tcIklDVFwiXSA9IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6IFwidGVybXBsYW5uZXIuaWN0XCIsIGRlZmF1bHRNZXNzYWdlOiBcIklDVFwifSk7XG4gIH1cbiAgcmV0dXJuIHRyYW5zbGF0ZWRDb2x1bW5zO1xufVxuXG5mdW5jdGlvbiBfZ2V0VGVybUhvbGlkYXlzKGhvbGlkYXlzOiBNb2NrRURTRGF0ZVJhbmdlW10sIHRlcm1TdGFydERhdGU6IG1vbWVudC5Nb21lbnQsIHRlcm1FbmREYXRlOiBtb21lbnQuTW9tZW50KXtcbiAgcmV0dXJuIGhvbGlkYXlzLmZpbHRlcihlbGVtID0+IHtcbiAgICByZXR1cm4gbW9tZW50KGVsZW0uc3RhcnREYXRlKS5pc0JldHdlZW4odGVybVN0YXJ0RGF0ZSwgdGVybUVuZERhdGUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gX2dldEhvbGlkYXlXZWVrc051bWJlcihob2xpZGF5czpNb2NrRURTRGF0ZVJhbmdlW10pe1xuICB2YXIgbnVtYmVyT2ZXZWVrcyA9IDA7XG4gIGhvbGlkYXlzLmZvckVhY2goZWxlbSA9PiB7XG4gICAgLy90aGUgbnVtYmVyIG9mIHdlZWtzIGlzIHRoZSBkaWZmZXJlbmNlICsgMVxuICAgIG51bWJlck9mV2Vla3MrPSBtb21lbnQoZWxlbS5lbmREYXRlKS5hZGQoMSwgJ3dlZWsnKS53ZWVrKCkgLSBtb21lbnQoZWxlbS5zdGFydERhdGUpLndlZWsoKTtcbiAgfSk7XG4gIHJldHVybiBudW1iZXJPZldlZWtzO1xufSIsImltcG9ydCB7VGVybX0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuaW1wb3J0IHtFRFNDb3Vyc2V9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RBbmRMYXN0V2Vlayh0ZXJtOiBUZXJtKSB7XG4gIHJldHVybiB0ZXJtID09PSAnQVQnID9cbiAgICBbMzMsIDUwXSA6ICAvLyBUaGlzIGlzIGEgZ3Vlc3MhIE5lZWQgZGF0YSEgU2hvdWxkIGJlIHBvc3NpYmxlIHRvIGdldCBmcm9tIHNrb2xhMjQ/XG4gICAgWzIsIDIzXTsgICAgLy8gVGhpcyBpcyBhIGd1ZXNzISBOZWVkIGRhdGEhXG59XG5cbmV4cG9ydCBjb25zdCBMQVNUX1NURVBfU1BSSU5HID0gMjg7IC8vIFdlZWsgMjggaXMgaW4gc3VtbWVyLiBVc2UgaXQgYXMgcGxhY2Vob2xkZXIgZm9yIFwibGFzdCBzdGVwXCJcbmV4cG9ydCBjb25zdCBMQVNUX1NURVBfQVVUVU1OID0gNTI7IC8vIFdlZWsgbXVzdCBiZSB2YWxpZC4gVXNlIGl0IGFzIHBsYWNlaG9sZGVyIGZvciBcImxhc3Qgc3RlcFwiXG5cbi8qKlxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBzd2VkaXNoIHNjaG9vbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRDb3Vyc2VGcm9tQ29sdW1uSGVhZGVyKFxuICBjb3Vyc2VzOiBFRFNDb3Vyc2VbXSxcbiAgY29sdW1uSGVhZGVyOiBzdHJpbmcpIDogRURTQ291cnNlIHwgbnVsbFxue1xuICBzd2l0Y2ggKGNvbHVtbkhlYWRlcikge1xuICAgIGNhc2UgJ00uc3ByJzogcmV0dXJuIGNvdXJzZXNcbiAgICAgIC5maWx0ZXIoY291cnNlID0+IGNvdXJzZS5zaG9ydE5hbWUgIT09ICdNQScgJiYgY291cnNlLnNob3J0TmFtZS5zdGFydHNXaXRoKCdNJykpWzBdIHx8IG51bGw7XG4gICAgY2FzZSAnTWEnOiByZXR1cm4gY291cnNlcy5maWx0ZXIoYyA9PiBjLnNob3J0TmFtZSA9PT0gXCJNQVwiKVswXSB8fCBudWxsO1xuICAgIGNhc2UgJ1N2L1N2QSc6IHJldHVybiBjb3Vyc2VzLmZpbHRlcihjID0+IGMuc2hvcnROYW1lLnN0YXJ0c1dpdGgoXCJTVlwiKSlbMF0gfHwgbnVsbDtcbiAgICBjYXNlICdFbmcnOiByZXR1cm4gY291cnNlcy5maWx0ZXIoYyA9PiBjLnNob3J0TmFtZSA9PT0gXCJFTlwiKVswXSB8fCBudWxsO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29sdW1uc0hlYWRlcihsb2NhbGU6IHN0cmluZyk6IHN0cmluZ1tdXG57XG4gIHN3aXRjaChsb2NhbGUpXG4gIHtcbiAgICBjYXNlICdzdic6XG4gICAgcmV0dXJuIFsnTS5zcHInLCdNYScsICdTdi9TdkEnLCAnRW5nJ107XG4gICAgY2FzZSAnZW5fc2luJzpcbiAgICByZXR1cm4gWydNRkwnLCdNYScsICdIaScsICdFbmcnLCAnWW9nYScsICdJQ1QnXTtcbiAgICBjYXNlICdlbl9uaW4nOlxuICAgIHJldHVybiBbJ01GTCcsJ01hJywgJ0hpJywgJ0VuZycsICdZb2dhJywgJ0lDVCddO1xuICB9XG59XG5cbi8qKlxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBzd2VkaXNoIHNjaG9vbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbHVtbkhlYWRlckZyb21Db3Vyc2UoY291cnNlOiBFRFNDb3Vyc2UpIDogc3RyaW5nXG57XG4gIGNvbnN0IHNob3J0TmFtZSA9IGNvdXJzZS5zaG9ydE5hbWU7XG4gIGlmIChzaG9ydE5hbWUgPT09IFwiTUFcIikgcmV0dXJuICdNYSc7XG4gIGlmIChzaG9ydE5hbWUgPT09IFwiRU5cIikgcmV0dXJuICdFbmcnO1xuICBpZiAoc2hvcnROYW1lLnN0YXJ0c1dpdGgoXCJTVlwiKSkgcmV0dXJuICdTdi9TdkEnO1xuICBpZiAoc2hvcnROYW1lLnN0YXJ0c1dpdGgoXCJNMlwiKSkgcmV0dXJuICdNLnNwcic7XG4gIHJldHVybiBudWxsO1xufVxuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgQWNhZGVtaWNZZWFyU3RydWN0dXJlLCBUZXJtIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuaW1wb3J0IHsgTW9ja0VEU0FjYWRlbWljWWVhciB9IGZyb20gJy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IHsgR2VuZXJpY1NjaG9vbE1vbWVudCwgZ2V0Q3VycmVudEFjYWRlbWljWWVhciB9IGZyb20gJy4vZ2VuZXJpYy1zY2hvb2wtdXRpbHMnO1xuaW1wb3J0IHsgSW5qZWN0ZWRJbnRsIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgeyBMQVNUX1NURVBfU1BSSU5HLCBMQVNUX1NURVBfQVVUVU1OIH0gZnJvbSAnLi4vY29tcG9uZW50cy9rcy10ZXJtcGxhbm5lci90ZXJtcGxhbm5lci11dGlscyc7XG5cbmV4cG9ydCBjbGFzcyBHZW5lcmljU2Nob29sVGVybSB7XG4gIHNjaG9vbE1vbWVudDogR2VuZXJpY1NjaG9vbE1vbWVudDtcbiAgc2VsZWN0ZWREYXRlOiBEYXRlO1xuICBsb2NhbGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihjdXJyZW50RGF0ZTogRGF0ZSwgY3VycmVudExvY2FsZT86IHN0cmluZywgYWNhZGVtaWNZZWFyU3RydWN0dXJlPzogTW9ja0VEU0FjYWRlbWljWWVhcikge1xuICAgIHRoaXMubG9jYWxlID0gY3VycmVudExvY2FsZSB8fCBcInN2XCI7XG4gICAgdGhpcy5zZWxlY3RlZERhdGUgPSBjdXJyZW50RGF0ZTtcbiAgICB0aGlzLnNjaG9vbE1vbWVudCA9IGFjYWRlbWljWWVhclN0cnVjdHVyZSA/IGdldEN1cnJlbnRBY2FkZW1pY1llYXIobW9tZW50KGN1cnJlbnREYXRlKSwgYWNhZGVtaWNZZWFyU3RydWN0dXJlKSA6IG51bGw7XG4gIH1cblxuICBnZXRUZXJtU3RhcnRBbmRFbmQoaW5jbHVkZUV4dHJhV2Vlaz86IGJvb2xlYW4pOiBtb21lbnQuTW9tZW50W10ge1xuICAgIC8vSW4gY2FzZSB0aGF0IHRoZSB3ZWVrIHN0YXJ0IGRhdGUgaXMgYSBkYXRlIGZyb20gdGhlIHByZXZpb3VzIHllYXJcbiAgICAvL0NvbnNpZGVyIHRoZSBzdGFydCBvZiB0aGUgd2VlayAoIHN0YXJ0IGRhdGUpIGFzIHRoZSBkYXkgb2YgdGhlIDAxLjAxLnllYXJcbiAgICB2YXIgc3RhcnRPZlRlcm1XZWVrID0gdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLnN0YXJ0RGF0ZS5jbG9uZSgpLnN0YXJ0T2YoJ3dlZWsnKTtcblxuICAgIGlmIChzdGFydE9mVGVybVdlZWsueWVhcigpIDwgdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLnN0YXJ0RGF0ZS55ZWFyKCkpIHtcbiAgICAgIHN0YXJ0T2ZUZXJtV2VlayA9IHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5zdGFydERhdGU7XG4gICAgfVxuXG4gICAgdmFyIGVuZE9mVGVybVdlZWsgPSB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuZW5kRGF0ZTtcblxuICAgIGlmKHRoaXMubG9jYWxlID09PSBcInN2XCIgJiYgaW5jbHVkZUV4dHJhV2VlayAmJiB0aGlzLnNjaG9vbE1vbWVudC50ZXJtID09PSBcIlNUXCIpe1xuICAgICAgZW5kT2ZUZXJtV2VlayA9IGVuZE9mVGVybVdlZWsuY2xvbmUoKS5hZGQoMywgJ3dlZWtzJykuZW5kT2YoJ3dlZWsnKTtcbiAgICB9XG4gICAgZWxzZSBpZihpbmNsdWRlRXh0cmFXZWVrKXtcbiAgICAgIGlmKHRoaXMubG9jYWxlICE9IFwic3ZcIil7XG4gICAgICAgIC8vIGZvciBpbmRpYSB0aGUgZW5kIGRhdGUgY2FuIGJlIGluIHRoZSBtaWRkbGUgb2YgdGhlIHdlZWtcbiAgICAgICAgZW5kT2ZUZXJtV2Vlaz0gdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGUuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIGVuZE9mVGVybVdlZWsgPSAgdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGUuY2xvbmUoKS5hZGQoMSwgJ3dlZWsnKS5lbmRPZignd2VlaycpO1xuICAgIH1cblxuICAgIHJldHVybiBbc3RhcnRPZlRlcm1XZWVrLCBlbmRPZlRlcm1XZWVrXTtcbiAgfVxuXG4gIGdldEZpcnN0QW5kTGFzdFdlZWtPZlRlcm0oKSB7XG4gICAgcmV0dXJuIFt0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuc3RhcnREYXRlLndlZWsoKSwgdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGUud2VlaygpXTtcbiAgfVxuXG4gIGlzQ3VycmVudFdlZWsoZGF0ZVRpbWU6IG51bWJlcikgOiBib29sZWFuIHtcbiAgICB2YXIgdGVybURhdGUgPSBtb21lbnQoZGF0ZVRpbWUpXG4gICAgcmV0dXJuIHRlcm1EYXRlLnllYXIoKSA9PT0gbW9tZW50KCkueWVhcigpICYmIHRlcm1EYXRlLndlZWsoKSA9PT0gbW9tZW50KCkud2VlaygpO1xuICB9XG5cbiAgZ2V0TGFzdFN0ZXBXZWVrKGxvY2FsZTogc3RyaW5nKSB7XG4gICAgLy9UT0RPOiB0aGlzIHNob3VsZCBiZSByZWZhY3RvcmVkLiBUaGUgZ2VuZXJpYyBtZXRob2Qgc2hvdWxkIGJlIHVzZWRcbiAgICBpZihsb2NhbGUgPT09IFwic3ZcIil7XG4gICAgICByZXR1cm4gdGhpcy5zY2hvb2xNb21lbnQudGVybSA9PT0gXCJTVFwiID8gTEFTVF9TVEVQX1NQUklORyA6IExBU1RfU1RFUF9BVVRVTU47XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuZW5kRGF0ZS5jbG9uZSgpLmFkZCgxLCBcIndlZWtcIikud2VlaygpO1xuICB9XG5cbiAgdG9Mb2NhbGVTdHJpbmcoaW50bDogSW5qZWN0ZWRJbnRsLCBzaG9ydFllYXI/OiBib29sZWFuKSB7XG4gICAgaWYodGhpcy5zY2hvb2xNb21lbnQpXG4gICAge1xuICAgIGxldCB5ZWFyID0gdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGUueWVhcigpLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAoc2hvcnRZZWFyKVxuICAgICAgeWVhciA9IHllYXIuc3Vic3RyKDIpO1xuXG4gICAgcmV0dXJuIHRoaXMuc2Nob29sTW9tZW50LnRlcm0gPT09ICdBVCcgPyBpbnRsLmZvcm1hdE1lc3NhZ2UoeyBpZDogJ3Rlcm1wbGFubmVyLnNlY29uZFRlcm0nLCBkZWZhdWx0TWVzc2FnZTogJ0hUIHt5ZWFyfScgfSwgeyB5ZWFyOiB5ZWFyIH0pIDpcbiAgICAgIGludGwuZm9ybWF0TWVzc2FnZSh7IGlkOiAndGVybXBsYW5uZXIuZmlyc3RUZXJtJywgZGVmYXVsdE1lc3NhZ2U6ICdWVCB7eWVhcn0nIH0sIHsgeWVhcjogeWVhciB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBuZXh0VGVybSgpIHtcbiAgICAvL3N3aXRjaCB0byBuZXh0IHNlbWVzdGVyLCB3ZSBzZXQgdGhlIGN1cnJlbnQgZGF0ZSBhcyBhZGRpbmcgMyBtb250aHMgdG8gdGhlIGVuZCBvZiB0aGUgY3VycmVudCBzZW1lc3RlclxuICAgIHZhciBlbmREYXRlID0gdGhpcy5zY2hvb2xNb21lbnQgPyB0aGlzLnNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXJTdHJ1Y3R1cmUuZW5kRGF0ZS5jbG9uZSgpIDogbW9tZW50KCk7XG4gICAgdmFyIG5leHREYXRlID0gZW5kRGF0ZS5hZGQoMywgJ21vbnRocycpO1xuICAgIHJldHVybiBuZXcgR2VuZXJpY1NjaG9vbFRlcm0obmV4dERhdGUudG9EYXRlKCksIHRoaXMubG9jYWxlKTtcbiAgfVxuXG4gIHByZXZUZXJtKCkge1xuICAgIC8vdG8gc3dpdGNoIHRvIG5leHQgc2VtZXN0ZXIsIHdlIHNldCB0aGUgY3VycmVudCBkYXRlIGFzIHN1YnRyYWN0aW5nIDMgbW9udGhzIGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBjdXJyZW50IHNlbWVzdGVyXG4gICAgdmFyIHN0YXJ0RGF0ZSA9IHRoaXMuc2Nob29sTW9tZW50ID8gIHRoaXMuc2Nob29sTW9tZW50LmFjYWRlbWljWWVhclN0cnVjdHVyZS5zdGFydERhdGUuY2xvbmUoKSA6IG1vbWVudCgpO1xuICAgIHZhciBwcmV2RGF0ZSA9IHN0YXJ0RGF0ZS5zdWJ0cmFjdCgzLCAnbW9udGhzJyk7XG4gICAgcmV0dXJuIG5ldyBHZW5lcmljU2Nob29sVGVybShwcmV2RGF0ZS50b0RhdGUoKSwgdGhpcy5sb2NhbGUpO1xuICB9XG5cbiAgZ2V0UGVyaW9kTmFtZSgpe1xuICAgIHJldHVybiB0aGlzLnNjaG9vbE1vbWVudC50ZXJtICsgdGhpcy5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmVuZERhdGUueWVhcigpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBLU1Rlcm1QbGFubmVyV2Vla1BsYW4gfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBFRFNDb3Vyc2UgfSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7IEVEU1BlcmlvZCB9IGZyb20gJy4uLy4uL2FwaXMvZWRzY2xpZW50JztcbmltcG9ydCB7IFRlcm0gfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQge1xuICBnZXRDb2x1bW5zSGVhZGVyLFxuICBnZXRDb2x1bW5IZWFkZXJGcm9tQ291cnNlLFxufSBmcm9tICcuL3Rlcm1wbGFubmVyLXV0aWxzJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBLRURXZWVrIH0gZnJvbSAnLi4vLi4vdXRpbHMvd2Vla3V0aWwnO1xuaW1wb3J0IHtJbmplY3RlZEludGx9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgR2VuZXJpY1NjaG9vbFRlcm0gfSBmcm9tICcuLi8uLi91dGlscy9nZW5lcmljLXNjaG9vbC10ZXJtJztcbmltcG9ydCB7IGdldFNjaG9vbFRyYW5zbGF0ZWRDb2x1bW5zIH0gZnJvbSAnLi4vLi4vdXRpbHMvZ2VuZXJpYy1zY2hvb2wtdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgVmlld01vZGVsIHtcbiAgd2Vla1BsYW5zOiBLU1Rlcm1QbGFubmVyV2Vla1BsYW5bXTtcbiAgbGFzdFN0ZXBzOiBLU1Rlcm1QbGFubmVyV2Vla1BsYW47XG4gIGNvbXBsZXRlZFN0ZXBzOiB7IFtjb2x1bW5IZWFkZXJBbmRzdGVwOiBzdHJpbmddOiB0cnVlIH07XG4gIHRlcm1Hb2FsczogeyBbY29sdW1uSGVhZGVyOiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgeWVhcjogbnVtYmVyO1xuICBjb2x1bW5zOiB7IG5hbWU6IHN0cmluZywgdHJhbnNsYXRlZE5hbWU/OiBzdHJpbmcsIGlzRml4ZWQ/OiBib29sZWFuIH1bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGRiV2Vla1BsYW5zOiBLU1Rlcm1QbGFubmVyV2Vla1BsYW5bXSxcbiAgICBjb3Vyc2VzOiBFRFNDb3Vyc2VbXSxcbiAgICBjdXJyZW50U2Nob29sVGVybTogR2VuZXJpY1NjaG9vbFRlcm0sXG4gICAgY3VycmVudFNjaG9vbExvY2FsZTogc3RyaW5nLFxuICAgIGludGw6IEluamVjdGVkSW50bCxcbiAgKSB7XG4gICAgdGhpcy53ZWVrUGxhbnMgPSBbXTtcbiAgICBpZiAoY3VycmVudFNjaG9vbFRlcm0uc2Nob29sTW9tZW50KSB7XG4gICAgICBjb25zdCBbdGVybVN0YXJ0LCB0ZXJtRW5kXSA9IGN1cnJlbnRTY2hvb2xUZXJtLmdldFRlcm1TdGFydEFuZEVuZCgpO1xuICAgICAgdGhpcy55ZWFyID0gdGVybVN0YXJ0LnllYXIoKTtcbiAgICAgIC8vaW5pdCBjb2x1bW5zXG4gICAgICBnZXRDb2x1bW5zSGVhZGVyKGN1cnJlbnRTY2hvb2xMb2NhbGUpLmZvckVhY2goYyA9PiB0aGlzLmNvbHVtbnMucHVzaCh7IG5hbWU6IGMgfSkpO1xuICAgICAgLy9kZWZpbmUgZml4ZWQgY29sdW1ucyAtIHdlIGtlZXAgdGhlc2Ugc2VwYXJhdGVkLCBpbiBjYXNlIHRoYXQgdGhlIG90aGVyIGNvbHVtbnMgd2lsbCBiZSBkeW5hbWljYWxseSByZXRyaWV2ZWRcbiAgICAgIGNvbnN0IGZpeGVkQ29sdW1ucyA9IFt7IG5hbWU6IFwiS3Vyc1wiLCBpc0ZpeGVkOiB0cnVlIH0sIHsgbmFtZTogXCJLb21tZW50YXJcIiwgaXNGaXhlZDogdHJ1ZSB9XTtcbiAgICAgIC8vQWRkIGZpeGVkIGNvbHVtbnMgbmFtZXNcbiAgICAgIHRoaXMuY29sdW1ucy5wdXNoKC4uLmZpeGVkQ29sdW1ucyk7XG4gICAgICAvL3BvcHVsYXRlIHRyYW5zbGF0aW9uc1xuICAgICAgdmFyIHRyYW5zbGF0ZWRDb2x1bW5zID0gZ2V0U2Nob29sVHJhbnNsYXRlZENvbHVtbnMoY3VycmVudFNjaG9vbExvY2FsZSwgaW50bCk7XG4gICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgZWxlbWVudC50cmFuc2xhdGVkTmFtZSA9IHRyYW5zbGF0ZWRDb2x1bW5zW2VsZW1lbnQubmFtZV07XG4gICAgICB9KTtcblxuICAgICAgdmFyIGN1cnJlbnRUZXJtSG9saWRheXMgPSBjdXJyZW50U2Nob29sVGVybS5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmhvbGlkYXlzO1xuICAgICAgY29uc3QgY3VycmVudFRlcm0gPSBjdXJyZW50U2Nob29sVGVybS5zY2hvb2xNb21lbnQudGVybTtcbiAgICAgIC8vXG4gICAgICAvLyB3ZWVrUGxhbnNcbiAgICAgIC8vXG4gICAgICB2YXIgc3RhcnRBY2FkZW1pY1llYXJOdW1iZXIgPSBjdXJyZW50U2Nob29sVGVybS5zY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyU3RydWN0dXJlLmFjYWRlbWljU3RhcnRXZWVrO1xuICAgICAgZm9yIChsZXQgd2Vla01vbWVudCA9IHRlcm1TdGFydC5jbG9uZSgpO1xuICAgICAgICB3ZWVrTW9tZW50LnZhbHVlT2YoKSA8IHRlcm1FbmQudmFsdWVPZigpO1xuICAgICAgICB3ZWVrTW9tZW50ID0gd2Vla01vbWVudC5jbG9uZSgpLmFkZCgxLCAnd2VlaycpLnN0YXJ0T2YoJ3dlZWsnKSkge1xuXG4gICAgICAgIHZhciBob2xpZGF5UGVyaW9kID0gY3VycmVudFRlcm1Ib2xpZGF5cy5maWx0ZXIoaD0+IHdlZWtNb21lbnQud2VlaygpID49IG1vbWVudChoLnN0YXJ0RGF0ZSkuc3RhcnRPZihcIndlZWtcIikud2VlaygpICYmIFxuICAgICAgICB3ZWVrTW9tZW50LndlZWsoKSA8PSBtb21lbnQoaC5lbmREYXRlKS5lbmRPZignd2VlaycpLndlZWsoKSk7XG4gICAgICAgIC8vaWYgdGhlIGN1cnJlbnQgd2VlayBpcyBhIGhvbGlkYXkgd2Vlaywgc2tpcCBpdFxuICAgICAgICBpZihob2xpZGF5UGVyaW9kLmxlbmd0aCA+IDApe1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdlZWtOdW1iZXIgPSB3ZWVrTW9tZW50LndlZWsoKTtcbiAgICAgICAgY29uc3Qga2VkV2VlayA9IEtFRFdlZWsod2Vla01vbWVudC55ZWFyKCksIHdlZWtOdW1iZXIpO1xuICAgICAgICAvL0EgdGVybSBjYW4gZW5kIGFuZCBzdGFydCBvbiB0aGUgc2FtZSB3ZWVrIGZvciBJbmRpYVxuICAgICAgICAvL2luIHRoaXMgY2FzZSB3ZSBzaG91bGQgZmlsdGVyIHRoZW0gYnkgdGhlIHRlcm1cbiAgICAgICAgLy9UaGlzIGlzIG5vdCB0aGUgY2FzZSBmb3Igc3YgbG9jYWxlIGFuZCB3ZSB3YW50IHRvIHNraXAgdGhpcyBjaGVjayBcbiAgICAgICAgLy9iZWNhdXNlIGRhdGEgaXMgYWxyZWFkeSBzYXZlZCBpbiB0aGUgZGF0YWJhc2VcbiAgICAgICAgY29uc3Qgd2Vla1BsYW4gPSBkYldlZWtQbGFucy5maWx0ZXIod3AgPT5cbiAgICAgICAgICB3cC5kYXRlVGltZSA+PSBrZWRXZWVrLm5vdEJlZm9yZSAmJlxuICAgICAgICAgIHdwLmRhdGVUaW1lIDw9IGtlZFdlZWsubm90QWZ0ZXIgJiZcbiAgICAgICAgICAoIXdwLmlzRmluYWxTdGVwICYmXG4gICAgICAgICAgd3AudGVybSA9PT0gY3VycmVudFRlcm0gfHwgaW50bC5sb2NhbGUgPT09IFwic3ZcIikpWzBdO1xuXG4gICAgICAgIHRoaXMud2Vla1BsYW5zLnB1c2goe1xuICAgICAgICAgIC4uLndlZWtQbGFuIHx8IHt9LFxuICAgICAgICAgIGlkOiB3ZWVrUGxhbiA/IHdlZWtQbGFuLmlkIDogY3JlYXRlVVVJRCgpLFxuICAgICAgICAgIGRhdGVUaW1lOiB3ZWVrUGxhbiA/IHdlZWtQbGFuLmRhdGVUaW1lIDogd2Vla01vbWVudC52YWx1ZU9mKCksXG4gICAgICAgICAgY2VsbFZhbHVlczogd2Vla1BsYW4gPyB3ZWVrUGxhbi5jZWxsVmFsdWVzIDoge30sXG4gICAgICAgICAgd2Vla051bWJlcixcbiAgICAgICAgICBhY2FkZW1pY1dlZWtOdW1iZXI6IHN0YXJ0QWNhZGVtaWNZZWFyTnVtYmVyKyssXG4gICAgICAgICAgdGVybTogY3VycmVudFRlcm1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vXG4gICAgICAvLyBsYXN0U3RlcHNcbiAgICAgIC8vXG4gICAgICBjb25zdCBsYXN0U3RlcFdlZWsgPSBjdXJyZW50U2Nob29sVGVybS5nZXRMYXN0U3RlcFdlZWsoaW50bC5sb2NhbGUpO1xuICAgICAgY29uc3QgbGFzdFN0ZXBLZWRXZWVrID0gS0VEV2Vlayh0ZXJtRW5kLnllYXIoKSwgbGFzdFN0ZXBXZWVrKTtcbiAgICAgIHRoaXMubGFzdFN0ZXBzID0gZGJXZWVrUGxhbnMuZmlsdGVyKHdwID0+XG4gICAgICAgIHdwLmRhdGVUaW1lID49IGxhc3RTdGVwS2VkV2Vlay5ub3RCZWZvcmUgJiZcbiAgICAgICAgd3AuZGF0ZVRpbWUgPD0gbGFzdFN0ZXBLZWRXZWVrLm5vdEFmdGVyICYmIFxuICAgICAgICAod3AuaXNGaW5hbFN0ZXAgJiZcbiAgICAgICAgd3AudGVybSA9PT0gY3VycmVudFRlcm0gfHwgaW50bC5sb2NhbGUgPT09IFwic3ZcIikpWzBdIHx8IHtcbiAgICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICAgIGRhdGVUaW1lOiBtb21lbnQodGVybUVuZCkuY2xvbmUoKS53ZWVrKGxhc3RTdGVwV2Vlaykuc3RhcnRPZignd2VlaycpLnZhbHVlT2YoKSxcbiAgICAgICAgICBjZWxsVmFsdWVzOiB7fSxcbiAgICAgICAgICB3ZWVrTnVtYmVyOiBsYXN0U3RlcFdlZWssXG4gICAgICAgICAgdGVybTogY3VycmVudFRlcm0sXG4gICAgICAgICAgaXNGaW5hbFN0ZXA6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgdGhpcy5jb21wbGV0ZWRTdGVwcyA9IHt9O1xuICAgICAgdGhpcy50ZXJtR29hbHMgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgY291cnNlIG9mIGNvdXJzZXMpIHtcbiAgICAgICAgY29uc3QgY29sdW1uSGVhZGVyID0gZ2V0Q29sdW1uSGVhZGVyRnJvbUNvdXJzZShjb3Vyc2UpO1xuICAgICAgICAvL1xuICAgICAgICAvLyBjb21wbGV0ZWRTdGVwc1xuICAgICAgICAvL1xuICAgICAgICBmb3IgKGNvbnN0IHN0ZXAgb2YgY291cnNlLmNvdXJzZVN0ZXBzKSB7XG4gICAgICAgICAgaWYgKHN0ZXAuaXNDb21wbGV0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkU3RlcHNbY29sdW1uSGVhZGVyICsgc3RlcC5zaG9ydE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgIC8qY29uc3Qgd2Vla1BsYW5zID0gZmluZFdlZWtQbGFuc0J5U3RlcCh0aGlzLndlZWtQbGFucywgc3RlcC5TaG9ydE5hbWUpO1xuICAgICAgICAgICAgd2Vla1BsYW5zLmZvckVhY2god2Vla1BsYW4gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVkU3RlcHNbd2Vla1BsYW4ud2VlayArIGNvbHVtbkhlYWRlcl0gPSB0cnVlO1xuICAgICAgICAgICAgfSkqL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvL1xuICAgICAgICAvLyB0ZXJtR29hbHNcbiAgICAgICAgLy9cbiAgICAgICAgdGhpcy50ZXJtR29hbHNbY29sdW1uSGVhZGVyXSA9IGNvdXJzZS5wZXJpb2RHb2FsR3JhZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRXZWVrUGxhbnNCeVN0ZXAod2Vla1BsYW5zOiBLU1Rlcm1QbGFubmVyV2Vla1BsYW5bXSwgc3RlcDogc3RyaW5nKTogS1NUZXJtUGxhbm5lcldlZWtQbGFuW10ge1xuICByZXR1cm4gd2Vla1BsYW5zLmZpbHRlcih3cCA9PiBPYmplY3Qua2V5cyh3cC5jZWxsVmFsdWVzKS5tYXAoY29sdW1uID0+IHdwLmNlbGxWYWx1ZXNbY29sdW1uXSA9PT0gc3RlcCkpO1xufVxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgS1NUZXJtUGxhbm5lclJlcG8gfSBmcm9tICcuL2tzLXRlcm1wbGFubmVyLXJlcG8nO1xuXG5leHBvcnQgY29uc3QgdGVybVBsYW5uZXJSZXBvS1MgPSBuZXcgS1NUZXJtUGxhbm5lclJlcG8oKCk9PmVudi5rZWRCYWNrZW5kQ2xpZW50LCAoKT0+ZW52LmN1cnJlbnRVc2VyKTtcbmVudi5rc1Rlcm1QbGFubmVyUmVwbyA9IHRlcm1QbGFubmVyUmVwb0tTO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR2VuZXJpY1NjaG9vbFRlcm0gfSBmcm9tICcuLi8uLi91dGlscy9nZW5lcmljLXNjaG9vbC10ZXJtJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQge0VEU0NvdXJzZX0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2Vkcyc7XG5pbXBvcnQge1ZpZXdNb2RlbH0gZnJvbSAnLi92aWV3bW9kZWwnO1xuaW1wb3J0IHtSZW5hbWVhYmxlVGV4dH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3JlbmFtZWFibGUtdGV4dCc7XG5pbXBvcnQge3RhYmxlV2Fsa30gZnJvbSAnLi4vLi4vdXRpbHMvdGFibGUtd2Fsayc7XG5pbXBvcnQgIHsgRW52IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJXZWVrUGxhbiB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCAnLi4vLi4vcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwby1pbnN0YW5jZSc7XG5pbXBvcnQge0xhbmd1YWdlQ29udGV4dH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XG5pbXBvcnQge0Zvcm1hdHRlZE1lc3NhZ2V9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBpbml0aWFsRGF0ZTogRGF0ZTtcbiAgdHV0b3JlZDogYm9vbGVhbjtcbiAgZW52OiBFbnY7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHNjaG9vbFRlcm06IEdlbmVyaWNTY2hvb2xUZXJtO1xuICB3ZWVrUGxhbnM6IEtTVGVybVBsYW5uZXJXZWVrUGxhbltdO1xuICBhY3RpdmVDb3Vyc2VzOiBFRFNDb3Vyc2VbXTtcbiAgbG9hZGluZ1dlZWtQbGFuczogYm9vbGVhbjtcbiAgbG9hZGluZ0FjdGl2ZUNvdXJzZXM6IGJvb2xlYW47XG4gIGVycm9yOiBFcnJvciB8IHN0cmluZyB8IG51bGw7XG4gIGluaXRpYWxMb2FkOiBib29sZWFuO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBLU1Rlcm1QbGFubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIHRhYmxlOiBIVE1MVGFibGVFbGVtZW50O1xuICBmbG93SWQ6IG51bWJlcjtcbiAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2Nob29sVGVybTogbmV3IEdlbmVyaWNTY2hvb2xUZXJtKHByb3BzLmluaXRpYWxEYXRlKSxcbiAgICAgIGFjdGl2ZUNvdXJzZXM6IFtdLFxuICAgICAgd2Vla1BsYW5zOiBbXSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgICAgbG9hZGluZ0FjdGl2ZUNvdXJzZXM6IGZhbHNlLFxuICAgICAgbG9hZGluZ1dlZWtQbGFuczogZmFsc2UsXG4gICAgICBpbml0aWFsTG9hZDogdHJ1ZVxuICAgIH1cbiAgICB0aGlzLmZsb3dJZCA9IDE7XG4gICAgdGhpcy51cGRhdGVXZWVrUGxhbnMgPSB0aGlzLnVwZGF0ZVdlZWtQbGFucy5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMubG9hZCh0aGlzLnN0YXRlLnNjaG9vbFRlcm0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5lbnYua3NUZXJtUGxhbm5lclJlcG8ubWVtLnN1YnNjcmliZSh0aGlzLnVwZGF0ZVdlZWtQbGFucyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmVudi5rc1Rlcm1QbGFubmVyUmVwby5tZW0udW5zdWJzY3JpYmUodGhpcy51cGRhdGVXZWVrUGxhbnMpO1xuICB9ICBcblxuICB1cGRhdGVXZWVrUGxhbnMod2Vla1BsYW5zOiBLU1Rlcm1QbGFubmVyV2Vla1BsYW5bXSwgZXJyb3I/OiBFcnJvcikge1xuICAgIHRoaXMuc2V0U3RhdGUoe3dlZWtQbGFucywgbG9hZGluZ1dlZWtQbGFuczogZmFsc2UsIGVycm9yOiBlcnJvciB8fCBudWxsfSk7XG4gIH1cblxuICBsb2FkKHNjaG9vbFRlcm06IEdlbmVyaWNTY2hvb2xUZXJtKSB7XG4gICAgY29uc3QgZmxvd0lkID0gKyt0aGlzLmZsb3dJZDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIC8vbG9hZGluZ1dlZWtQbGFuczogdHJ1ZSxcbiAgICAgIGxvYWRpbmdBY3RpdmVDb3Vyc2VzOiB0cnVlXG4gICAgfSk7XG4gICAgY29uc3Qge2tzVGVybVBsYW5uZXJSZXBvfSA9IHRoaXMucHJvcHMuZW52O1xuXG4gICAgdGhpcy5sb2FkQWNhZGVtaWNZZWFyRGF0ZXMoc2Nob29sVGVybSwgY2ZnLktFRF9TQ0hPT0xfTE9DQUxFKVxuICAgIC50aGVuKHRlcm0gPT4ge1xuICAgICAgaWYgKHRoaXMuZmxvd0lkID09PSBmbG93SWQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTY2hvb2xUZXJtID0gbmV3IEdlbmVyaWNTY2hvb2xUZXJtKHNjaG9vbFRlcm0uc2VsZWN0ZWREYXRlLCB0aGlzLmNvbnRleHQuaW50bC5sb2NhbGUsIHRlcm0pO1xuICAgICAgICAvL3JlZnJlc2ggc2F2ZWQgZGF0YVxuICAgICAgICBrc1Rlcm1QbGFubmVyUmVwby5yZWZyZXNoRGF0YShjdXJyZW50U2Nob29sVGVybS5nZXRUZXJtU3RhcnRBbmRFbmQodHJ1ZSkpO1xuXG4gICAgICAgIC8vcmVsb2FkIGNvdXJzZXMgYmFzZWQgb24gdGhlIGN1cnJlbnQgZGF0ZVxuICAgICAgICB0aGlzLmxvYWRBY3RpdmVDb3Vyc2VzKGN1cnJlbnRTY2hvb2xUZXJtKS50aGVuKGFjdGl2ZUNvdXJzZXMgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmZsb3dJZCA9PT0gZmxvd0lkKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtzY2hvb2xUZXJtOiBjdXJyZW50U2Nob29sVGVybSwgaW5pdGlhbExvYWQ6ZmFsc2UsIGFjdGl2ZUNvdXJzZXMsIGxvYWRpbmdBY3RpdmVDb3Vyc2VzOiBmYWxzZX0sICgpID0+IHt0YWJsZVdhbGsoJCh0aGlzLnRhYmxlKSl9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5mbG93SWQgPT09IGZsb3dJZCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c2Nob29sVGVybTogY3VycmVudFNjaG9vbFRlcm0sIGxvYWRpbmdBY3RpdmVDb3Vyc2VzOiBmYWxzZSwgZXJyb3J9KTsgIFxuICAgICAgICAgIH1cbiAgICAgICAgfSk7OyAgIFxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgbG9hZEFjYWRlbWljWWVhckRhdGVzKHNjaG9vbFRlcm06IEdlbmVyaWNTY2hvb2xUZXJtLCBzY2hvb2xMb2NhbGU6c3RyaW5nKXtcbiAgICBjb25zdCB0ZXJtRGF0ZXMgPSBhd2FpdCB0aGlzLnByb3BzLmVudi5lZHNDbGllbnQuZ2V0QWNhZGVtaWNZZWFyVGVybXMoc2Nob29sTG9jYWxlLCBzY2hvb2xUZXJtLnNlbGVjdGVkRGF0ZSk7XG4gICAgcmV0dXJuIHRlcm1EYXRlcztcbiAgfVxuXG4gIGFzeW5jIGxvYWRBY3RpdmVDb3Vyc2VzKHNjaG9vbFRlcm06IEdlbmVyaWNTY2hvb2xUZXJtKSB7XG4gICAgLy9DdXN0b20gZm9yIG5vdyBpbiBvcmRlciB0byBjaGFuZ2UgRURTUGVyaW9kXG4gICAgLy9jb25zdCBwZXJpb2ROYW1lID0gbmV3IEVEU1BlcmlvZChzY2hvb2xUZXJtKS5wZXJpb2Q7IFxuICAgIGNvbnN0IHBlcmlvZE5hbWUgPSBzY2hvb2xUZXJtLmdldFBlcmlvZE5hbWUoKTtcbiAgICBjb25zdCBhY3RpdmVDb3Vyc2VzID0gYXdhaXQgdGhpcy5wcm9wcy5lbnYuZWRzQ2xpZW50LmdldEFjdGl2ZUNvdXJzZXMoe3BlcmlvZE5hbWV9KTtcbiAgICByZXR1cm4gYWN0aXZlQ291cnNlcztcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZUNlbGwgKHdlZWtQbGFuOiBLU1Rlcm1QbGFubmVyV2Vla1BsYW4sIGNvbHVtbk5hbWU6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZykge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gKHdlZWtQbGFuICYmIHdlZWtQbGFuLmNlbGxWYWx1ZXNbY29sdW1uTmFtZV0pIHx8IFwiXCI7XG4gICAgaWYgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xuICAgIHRyeSB7XG4gICAgICB3ZWVrUGxhbi5jZWxsVmFsdWVzW2NvbHVtbk5hbWVdID0gbmV3VmFsdWU7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5wcm9wcy5lbnYua3NUZXJtUGxhbm5lclJlcG8udXBzZXJ0IChcbiAgICAgICAgd2Vla1BsYW4sXG4gICAgICAgIHdwID0+IHdwLmNlbGxWYWx1ZXNbY29sdW1uTmFtZV0gPSBuZXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3Iuc3RhY2sgfHwgZXJyb3IpO1xuICAgICAgaWYgKGVycm9yLm5hbWUgPT09IFwiaHR0cDQwM1wiKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yOiAgdGhpcy5jb250ZXh0LmludGwoe2lkOlwiY29tbW9uLmNoYW5nZXNOb3RTYXZlZFVuYXV0aG9yaXplZFwiLCBkZWZhdWx0TWVzc2FnZTpcIsOEbmRyaW5nYXJuYSBzcGFyYWRlcyBpbnRlIHAuZy5hLiBvdGlsbHLDpGNrbGlnIGJlaMO2cmlnaGV0LlwifSl9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yOiB0aGlzLmNvbnRleHQuaW50bCh7aWQ6XCJjb21tb24uY2hhbmdlc05vdFNhdmVkRXJyb3JPY2N1cmVkXCIsIGRlZmF1bHRNZXNzYWdlOlwiRsO2ciB0aWxsZsOkbGxldCBwcm9ibGVtIGF0dCBzcGFyYSBkYXRhLiBEaW5hIMOkbmRyaW5nYXIgc3BhcmFkZXMgaW50ZS5cIn0pfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0U3RlcENvbHVtbihjb2xJbmRleDogbnVtYmVyLCBzdWJqZWN0TmFtZTogc3RyaW5nLCBydHh0czogUmVuYW1lYWJsZVRleHRbXSwgbW9kZWw6IFZpZXdNb2RlbCwgXG4gICAgd2Vla1BsYW46IEtTVGVybVBsYW5uZXJXZWVrUGxhbiwgcmVhZE9ubHlDZWxsczogYm9vbGVhbiwgaXNGaXhlZENvbHVtbjogYm9vbGVhbiwgY29sdW1uVGFnOiAnaW5wdXQnIHwgJ3RleHRhcmVhJykge1xuICAgIGNvbnN0IHsgY29tcGxldGVkU3RlcHMgfSA9IG1vZGVsO1xuICAgIGNvbnN0IHtjZWxsVmFsdWVzfSA9IHdlZWtQbGFuO1xuICAgIHJldHVybiA8dGQga2V5PXtgc3RlcENlbGxfJHtjb2xJbmRleH1gfSBjbGFzc05hbWU9IHt0aGlzLmdldFN0ZXBDb2x1bW5DbGFzc05hbWUoY29tcGxldGVkU3RlcHMsIGNlbGxWYWx1ZXMsIHN1YmplY3ROYW1lLCBpc0ZpeGVkQ29sdW1uKX1cbiAgICAgIG9uQ2xpY2s9eygpID0+IHJ0eHRzW2NvbEluZGV4XS5yZW5hbWUoKX0+XG4gICAgICA8UmVuYW1lYWJsZVRleHRcbiAgICAgICAgcmVmPXtydCA9PiBydHh0cy5wdXNoKHJ0KX1cbiAgICAgICAgdGFnPXtjb2x1bW5UYWd9XG4gICAgICAgIHRleHQ9e2NlbGxWYWx1ZXNbc3ViamVjdE5hbWVdfVxuICAgICAgICBvbkNoYW5nZT17dGhpcy51cGRhdGVDZWxsLmJpbmQodGhpcywgd2Vla1BsYW4sIHN1YmplY3ROYW1lKX1cbiAgICAgICAgcmVhZE9ubHk9e3JlYWRPbmx5Q2VsbHN9XG4gICAgICAvPlxuICAgIDwvdGQ+XG4gIH1cblxuICBnZXRTdGVwQ29sdW1uQ2xhc3NOYW1lKGNvbXBsZXRlZFN0ZXBzLCBjZWxsVmFsdWVzLCBzdWJqZWN0TmFtZSwgaXNGaXhlZENvbHVtbil7XG4gICAgY29uc3QgaXNDb3Vyc2VDb2x1bW4gPSBzdWJqZWN0TmFtZSA9PT0gXCJLdXJzXCI7XG4gICAgaWYoIWlzRml4ZWRDb2x1bW4pXG4gICAge1xuICAgICAgdmFyIGNzc0NsYXNzID0gXCJzdGVwQ2VsbFwiO1xuICAgICAgaWYgKGNvbXBsZXRlZFN0ZXBzW3N1YmplY3ROYW1lICsgY2VsbFZhbHVlc1tzdWJqZWN0TmFtZV1dKVxuICAgICAge1xuICAgICAgICBjc3NDbGFzcyArPSBcIiBjb21wbGV0ZWRTdGVwXCI7XG4gICAgICB9XG4gICAgICByZXR1cm4gY3NzQ2xhc3M7XG4gICAgfVxuICAgIGVsc2UgaWYoaXNDb3Vyc2VDb2x1bW4pXG4gICAge1xuICAgICAgcmV0dXJuIFwiY291cnNlQ2VsbFwiO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldFN0ZXBGb290ZXJDb2x1bW4oaW5kZXg6IG51bWJlciwgc3ViamVjdE5hbWU6IHN0cmluZywgbGFzdFRyRGF0YXM6IFJlbmFtZWFibGVUZXh0W10sIG1vZGVsOiBWaWV3TW9kZWwsIHJlYWRPbmx5Q2VsbHM6IGJvb2xlYW4pe1xuICAgIHJldHVybiA8dGgga2V5PXtgc3RlcEZvb3RlckNlbGxfJHtpbmRleH1gfSBjbGFzc05hbWU9XCJzdGVwQ2VsbFwiIG9uQ2xpY2s9eygpPT5sYXN0VHJEYXRhc1tpbmRleF0ucmVuYW1lKCl9PlxuICAgICAgPFJlbmFtZWFibGVUZXh0XG4gICAgICAgIHJlZj17cnQgPT4gbGFzdFRyRGF0YXMucHVzaChydCl9XG4gICAgICAgIHRleHQ9e21vZGVsLmxhc3RTdGVwcy5jZWxsVmFsdWVzW3N1YmplY3ROYW1lXX1cbiAgICAgICAgb25DaGFuZ2U9e3RoaXMudXBkYXRlQ2VsbC5iaW5kKHRoaXMsIG1vZGVsLmxhc3RTdGVwcywgc3ViamVjdE5hbWUpfVxuICAgICAgICByZWFkT25seT17cmVhZE9ubHlDZWxsc31cbiAgICAvPlxuICAgIDwvdGg+XG4gIH1cblxuICBnZXRTdGVwSGVhZGVyQ29sdW1uKGluZGV4OiBudW1iZXIsIHRyYW5zbGF0ZWRDb2x1bW5IZWFkZXI6IHN0cmluZywgbmVlZFdyYXBDbGFzczogYm9vbGVhbil7XG4gICAgcmV0dXJuIDx0aCBrZXk9e2BzdGVwSGVhZGVyQ2VsbF8ke2luZGV4fWB9IGNsYXNzTmFtZT17bmVlZFdyYXBDbGFzcyA/IFwibm93cmFwXCIgOiBcIlwifT57dHJhbnNsYXRlZENvbHVtbkhlYWRlcn08L3RoPiBcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7aW50bH0gPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3QgbW9kZWwgPSBuZXcgVmlld01vZGVsKFxuICAgICAgdGhpcy5zdGF0ZS53ZWVrUGxhbnMsXG4gICAgICB0aGlzLnN0YXRlLmFjdGl2ZUNvdXJzZXMsXG4gICAgICB0aGlzLnN0YXRlLnNjaG9vbFRlcm0sXG4gICAgICBjZmcuS0VEX1NDSE9PTF9MT0NBTEUsXG4gICAgICBpbnRsKTtcblxuICAgIGNvbnN0IHt0ZXJtR29hbHMsIGNvbHVtbnN9ID0gbW9kZWw7XG4gICAgY29uc3QgbGFzdFRyRGF0YXMgPSBbXTtcbiAgICBjb25zdCB7dHV0b3JlZH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHtsb2FkaW5nV2Vla1BsYW5zLCBlcnJvciwgd2Vla1BsYW5zOiBkYldlZWtQbGFuc30gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGZhaWxlZEluaXRpYWxMb2FkID0gZGJXZWVrUGxhbnMubGVuZ3RoID09PSAwICYmICEhZXJyb3I7XG4gICAgY29uc3QgcmVhZE9ubHlDZWxscyA9IGZhaWxlZEluaXRpYWxMb2FkIHx8IHR1dG9yZWQgfHwgbG9hZGluZ1dlZWtQbGFucztcblxuICAgIHJldHVybiB0aGlzLnN0YXRlLmluaXRpYWxMb2FkID8gPHA+PFNwaW5uZXIvPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGVybXBsYW5uZXIubG9hZGluZ1Rlcm1wbGFubmVyXCIgZGVmYXVsdE1lc3NhZ2U9XCJWLmcuIHbDpG50YSBtZWRhbiB0ZXJtaW5zcGxhbmVyIGxhZGRhcy4uLlwiLz48L3A+IDpcbiAgICAgPGRpdiBjbGFzc05hbWU9e1xuICAgICAgICBcInRlcm1wbGFubmVyXCIgKyBcbiAgICAgICAgKHRoaXMuc3RhdGUubG9hZGluZ1dlZWtQbGFucyA/IFwiIGxvYWRpbmctd2Vla3BsYW5zXCIgOiBcIlwiKSArXG4gICAgICAgICh0aGlzLnN0YXRlLmxvYWRpbmdBY3RpdmVDb3Vyc2VzID8gXCIgbG9hZGluZy1jb3Vyc2VzXCIgOiBcIlwiKVxuICAgICAgfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2Vla1NlbGVjdFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cbiAgICAgICAgICAgIDxwPnt0aGlzLnN0YXRlLnNjaG9vbFRlcm0udG9Mb2NhbGVTdHJpbmcoaW50bCwgdHJ1ZSl9PC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciB0ZXJtID0gdGhpcy5zdGF0ZS5zY2hvb2xUZXJtLnByZXZUZXJtKCk7XG4gICAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGVybSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1sZWZ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIHRlcm0gPSB0aGlzLnN0YXRlLnNjaG9vbFRlcm0ubmV4dFRlcm0oKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQodGVybSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hbmdsZS1yaWdodFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGVybXBsYW5uZXIudGVybVBsYW5uaW5nXCIgZGVmYXVsdE1lc3NhZ2U9XCJUZXJtaW5zcGxhbmVyaW5nXCIgdGFnTmFtZT1cImg0XCIvPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInNtYWxsRm9udCB0ZXJtcGxhbm5lci10YWJsZVwiIHJlZj17dGFibGUgPT4gdGhpcy50YWJsZSA9IHRhYmxlfSBzdHlsZT17e1xuICAgICAgICB9fT5cbiAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cIm5vd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRlcm1wbGFubmVyLndlZWtOdW1iZXJcIiBkZWZhdWx0TWVzc2FnZT1cIlZlY2thXCIgLz5cbiAgICAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29sdW1ucy5tYXAoIChlbGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdmFyIGlzTGFzdCA9IGVsZW0gPT09IGNvbHVtbnNbY29sdW1ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0ZXBIZWFkZXJDb2x1bW4oaW5kZXgsIGVsZW0udHJhbnNsYXRlZE5hbWUsICFpc0xhc3QpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICB7bW9kZWwud2Vla1BsYW5zLm1hcCgod2Vla1BsYW4sIGkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3Qge3dlZWtOdW1iZXIsIGFjYWRlbWljV2Vla051bWJlcn0gPSB3ZWVrUGxhbjtcbiAgICAgICAgICAgICAgY29uc3Qgd2VlayA9IHdlZWtOdW1iZXI7XG4gICAgICAgICAgICAgIGNvbnN0IGlzQ3VycmVudFdlZWsgPSB0aGlzLnN0YXRlLnNjaG9vbFRlcm0uaXNDdXJyZW50V2Vlayh3ZWVrUGxhbi5kYXRlVGltZSk7XG4gICAgICAgICAgICAgIGxldCBydHh0cyA9IFtdO1xuICAgICAgICAgICAgICB2YXIgY3NzQ2xhc3MgPSBpc0N1cnJlbnRXZWVrID8gXCJjdXJyZW50V2Vla1wiIDogKGkgJSAyKSA/IFwidGFibGVPZGRcIiA6IFwiXCI7XG4gICAgICAgICAgICAgIHJldHVybiA8dHIga2V5PXttb2RlbC55ZWFyICsgJzonICsgd2Vla30gY2xhc3NOYW1lPXtjc3NDbGFzc30+XG4gICAgICAgICAgICAgIDx0ZD57aW50bC5sb2NhbGUgPT09IFwic3ZcIiA/IHdlZWsgOiBhY2FkZW1pY1dlZWtOdW1iZXJ9PC90ZD5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbHVtbnMubWFwKChlbGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgdmFyIGlzTGFzdCA9IGVsZW0gPT09IGNvbHVtbnNbY29sdW1ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0ZXBDb2x1bW4oaW5kZXgsIGVsZW0ubmFtZSwgcnR4dHMsIG1vZGVsLCB3ZWVrUGxhbiwgcmVhZE9ubHlDZWxscywgZWxlbS5pc0ZpeGVkLCBpc0xhc3QgPyAndGV4dGFyZWEnIDogJ2lucHV0Jyk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3RyPiBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICA8dGZvb3Q+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIDx0aD48Rm9ybWF0dGVkTWVzc2FnZSBpZD1cInRlcm1wbGFubmVyLmZpbmFsU3RlcFwiIGRlZmF1bHRNZXNzYWdlPVwiU2x1dHN0ZWdcIi8+PC90aD5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbHVtbnMuZmlsdGVyKGMgPT4gIWMuaXNGaXhlZCkubWFwKChlbGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RlcEZvb3RlckNvbHVtbihpbmRleCwgZWxlbS5uYW1lLCBsYXN0VHJEYXRhcywgbW9kZWwsIHJlYWRPbmx5Q2VsbHMpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgPHRoPi08L3RoPlxuICAgICAgICAgICAgICA8dGg+PC90aD4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgPHRoPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwidGVybXBsYW5uZXIuZWRzR29hbEdyYWRlc1wiIGRlZmF1bHRNZXNzYWdlPVwiVGVybWluc23DpWxcIi8+PC90aD5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbHVtbnMuZmlsdGVyKGMgPT4gIWMuaXNGaXhlZCkubWFwKChlbGVtLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIDx0aCBrZXk9e2BncmFkZXNfJHtpbmRleH1gfSBjbGFzc05hbWU9XCJzdGVwQ2VsbFwiPnt0ZXJtR29hbHNbZWxlbS5uYW1lXX08L3RoPjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDx0aD4tPC90aD5cbiAgICAgICAgICAgICAgPHRoPnt0aGlzLnN0YXRlLmVycm9yICYmIDxwIGNsYXNzTmFtZT1cImVycm9yXCI+eycnK3RoaXMuc3RhdGUuZXJyb3J9PC9wPn08L3RoPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICA8L3Rmb290PlxuICAgICAgICAgIDwvdGFibGU+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHRhYmxlV2Fsayh0YWJsZUVsZW06IEhUTUxUYWJsZUVsZW1lbnQpIHtcbiAgICAkKHRhYmxlRWxlbSkua2V5ZG93bihldiA9PiB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9ICQoZXYudGFyZ2V0KTtcblxuICAgICAgICBpZiAoZXYud2hpY2ggPT09IDEzICYmICF0YXJnZXQuaXMoJ3RleHRhcmVhJykpIHtcbiAgICAgICAgICAgIHZhciB0YWJhYmxlcyA9ICQodGFibGVFbGVtKVxuICAgICAgICAgICAgICAgIC5maW5kKCdbdGFiSW5kZXg9MF06dmlzaWJsZTpub3QoW3R5cGU9Y2hlY2tib3hdKScpLnRvQXJyYXkoKSBhcyBhbnlbXTtcblxuICAgICAgICAgICAgdmFyIGkgPSB0YWJhYmxlcy5pbmRleE9mKGV2LnRhcmdldCk7XG4gICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEVsZW1lbnQgPSB0YWJhYmxlc1soaSArIDEpICUgdGFiYWJsZXMubGVuZ3RoXTtcbiAgICAgICAgICAgICAgICAkKG5leHRFbGVtZW50KS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2LndoaWNoID09IDM4IHx8IGV2LndoaWNoID09IDQwKSB7IC8vIHVwIG9yIGRvd25cbiAgICAgICAgICAgIHZhciBpc1VwID0gKGV2LndoaWNoID09IDM4KTtcbiAgICAgICAgICAgIHZhciB0ZCA9IHRhcmdldC5jbG9zZXN0KCd0ZCx0aCcpO1xuICAgICAgICAgICAgdmFyIHRyID0gdGQuY2xvc2VzdCgndHInKTtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRyLmNoaWxkcmVuKCkudG9BcnJheSgpLmluZGV4T2YodGRbMF0pO1xuICAgICAgICAgICAgbGV0IGFsbFRycyA9ICQodGFibGVFbGVtKS5maW5kKCd0cicpLnRvQXJyYXkoKTtcbiAgICAgICAgICAgIGxldCB0ckluZGV4ID0gYWxsVHJzLmluZGV4T2YodHJbMF0pO1xuICAgICAgICAgICAgdmFyIG5leHRUcjtcbiAgICAgICAgICAgIGlmIChpc1VwICYmIHRySW5kZXggPiAwICYmICghdGFyZ2V0LmlzKCd0ZXh0YXJlYScpIHx8IHRhcmdldFswXS5zZWxlY3Rpb25TdGFydCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICBuZXh0VHIgPSAkKGFsbFRyc1t0ckluZGV4IC0gMV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNVcCAmJiB0ckluZGV4ID4gLTEgJiYgdHJJbmRleCA8IGFsbFRycy5sZW5ndGggLSAxICYmICghdGFyZ2V0LmlzKCd0ZXh0YXJlYScpIHx8IHRhcmdldFswXS5zZWxlY3Rpb25FbmQgPT09IHRhcmdldC52YWwoKS5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgbmV4dFRyID0gJChhbGxUcnNbdHJJbmRleCArIDFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0VHIpIHtcbiAgICAgICAgICAgICAgICBuZXh0VHIuY2hpbGRyZW4oKS5lcShpbmRleCkuZmluZCgnW3RhYkluZGV4PTBdJykuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGV2LndoaWNoID09PSAzNyB8fCBldi53aGljaCA9PT0gMzkpIHsgLy8gbGVmdCBvciByaWdodFxuICAgICAgICAgICAgaWYgKHRhcmdldC5pcygnOmlucHV0JykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7c2VsZWN0aW9uU3RhcnQsIHNlbGVjdGlvbkVuZCwgdmFsdWV9ID0gdGFyZ2V0WzBdO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb25TdGFydCA9PT0gc2VsZWN0aW9uRW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJhYmxlcyA9ICQodGFibGVFbGVtKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ1t0YWJJbmRleD0wXTp2aXNpYmxlOm5vdChbdHlwZT1jaGVja2JveF0pJykudG9BcnJheSgpIGFzIGFueVtdO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gdGFiYWJsZXMuaW5kZXhPZihldi50YXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gLTEgJiYgaSA+IDAgJiYgZXYud2hpY2ggPT09IDM3ICYmIHNlbGVjdGlvblN0YXJ0ID09PSAwKSB7IC8vIGxlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmV2RWxlbWVudCA9IHRhYmFibGVzW2kgLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQocHJldkVsZW1lbnQpLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSAhPT0gLTEgJiYgaSA8IHRhYmFibGVzLmxlbmd0aCAtIDEgJiYgZXYud2hpY2ggPT09IDM5ICYmIHNlbGVjdGlvbkVuZCA9PT0gdmFsdWUubGVuZ3RoKSB7IC8vIHJpZ2h0XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dEVsZW1lbnQgPSB0YWJhYmxlc1tpICsgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAkKG5leHRFbGVtZW50KS5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG4iLCJpbXBvcnQge1VzZXIsIExlYXJuaW5nTW9kdWxlVGFza3N9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmltcG9ydCB7IEtlZEJhY2tlbmRDbGllbnQsIEJlYXJlclByb3ZpZGVyIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IEtFRCBmcm9tICcuL2tlZCc7XG5pbXBvcnQgZW52LCB7RW52fSBmcm9tICcuL0tFRC5lbnYnO1xuXG5leHBvcnQgY2xhc3MgVHV0b3JFbnYge1xuICBzdWJzY3JpYmVyczogQXJyYXk8KGVudjogRW52KT0+dm9pZD4gPSBbXTtcbiAgZW52OiBFbnYgfCBudWxsID0gbnVsbDtcbiAgdmVyc2lvbiA9IDE7XG4gIC8vcHJvbWlzZTogUHJvbWlzZTxFbnYgfCBudWxsPiA9IFByb21pc2UucmVzb2x2ZShudWxsKTtcblxuICBhc3luYyBzdWJzY3JpYmUoc3Vic2NyaWJlcjogKGVudjogRW52KSA9PiB2b2lkKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5wdXNoKHN1YnNjcmliZXIpO1xuICAgIHN1YnNjcmliZXIodGhpcy5lbnYpO1xuICB9XG5cbiAgdW5zdWJzY3JpYmUoc3Vic2NyaWJlcjogKGVudjogRW52KSA9PiB2b2lkKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnMuZmlsdGVyIChzID0+IHMgIT09IHN1YnNjcmliZXIpO1xuICB9XG5cbiAgYXN5bmMgbm90aWZ5U3Vic2NyaWJlcnMoKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHMgPT4gcyh0aGlzLmVudikpO1xuICB9XG5cbiAgYXN5bmMgc2V0TmV3RW52KHVzZXI6IFVzZXIsIGVudkdldHRlcjogKCk9PlByb21pc2U8RW52Pikge1xuICAgIGxldCB2ZXJzaW9uID0gKyt0aGlzLnZlcnNpb247XG4gICAgdGhpcy5lbnYgPSB7Y3VycmVudFVzZXI6IHVzZXIsIHR1dG9yZWQ6IHRydWV9O1xuICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTsgLy8gTWFrZSBzdWJzY3JpYmVyIGRpc3BsYXkgXCJMb2FkaW5nLi4uIHVzZXIgbmFtZVwiXG4gICAgY29uc3QgZW52OiBFbnYgPSBhd2FpdCBlbnZHZXR0ZXIoKS5jYXRjaChlcnIgPT4gKHtcbiAgICAgIGN1cnJlbnRVc2VyOiB1c2VyLFxuICAgICAgdHV0b3JlZDogdHJ1ZSxcbiAgICAgIGVycm9yOiBlcnJcbiAgICB9KSk7XG4gICAgaWYgKHZlcnNpb24gPT09IHRoaXMudmVyc2lvbikge1xuICAgICAgLy8gTm8gb25lIGVsc2UgaGFzIGNhbGxlZCBzZXRFbnYgZHVyaW5nIHRoaXMgY2FsbC5cbiAgICAgICsrdGhpcy52ZXJzaW9uO1xuICAgICAgdGhpcy5lbnYgPSB7Li4uZW52LCB0dXRvcmVkOiB0cnVlfTtcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTsgLy8gTWFrZSBzdWJzY3JpYmVycyBkaXNwbGF5IHRoZSBkYXRhLlxuICAgIH1cbiAgfVxufVxuXG5pZiAoIUtFRC50dXRvckVudikgS0VELnR1dG9yRW52ID0gbmV3IFR1dG9yRW52KCk7XG5cbmV4cG9ydCBkZWZhdWx0IEtFRC50dXRvckVudiBhcyBUdXRvckVudjtcbiIsInZhciBtYXAgPSB7XG5cdFwiLi9lbi1TR1wiOiA3OCxcblx0XCIuL2VuLVNHLmpzXCI6IDc4LFxuXHRcIi4vZW4tYXVcIjogNzksXG5cdFwiLi9lbi1hdS5qc1wiOiA3OSxcblx0XCIuL2VuLWNhXCI6IDgwLFxuXHRcIi4vZW4tY2EuanNcIjogODAsXG5cdFwiLi9lbi1nYlwiOiA4MSxcblx0XCIuL2VuLWdiLmpzXCI6IDgxLFxuXHRcIi4vZW4taWVcIjogODIsXG5cdFwiLi9lbi1pZS5qc1wiOiA4Mixcblx0XCIuL2VuLWlsXCI6IDgzLFxuXHRcIi4vZW4taWwuanNcIjogODMsXG5cdFwiLi9lbi1uelwiOiA4NCxcblx0XCIuL2VuLW56LmpzXCI6IDg0LFxuXHRcIi4vc3ZcIjogODUsXG5cdFwiLi9zdi5qc1wiOiA4NVxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDEyMjsiLCJleHBvcnQge1dlZWtQbGFubmVyfSBmcm9tICcuL3dlZWtwbGFubmVyJztcbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IHVzZXJzIH0gZnJvbSAnLi9kYXRhL3VzZXJzJztcbmltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcgfSBmcm9tICcuLi91dGlscy9xdWVyeS1zdHJpbmcnO1xuXG5jb25zdCB1c2VybmFtZSA9IHBhcnNlUXVlcnlTdHJpbmcgKGxvY2F0aW9uLnNlYXJjaCkudXNlcjtcbmlmICh1c2VybmFtZSkge1xuICBjb25zdCB1c2VyID0gdXNlcnMuZmluZCh1ID0+IHUudXNlcm5hbWUgPT09IHVzZXJuYW1lKTtcbiAgaWYgKHVzZXIpIHtcbiAgICBlbnYuY3VycmVudFVzZXIgPSB1c2VyO1xuICB9XG59XG5cbmNvbnN0IHsgcm9sZSwgc2Nob29sIH0gPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCk7XG5pZiAoZW52LmN1cnJlbnRVc2VyKSB7XG4gIGlmIChyb2xlKSB7XG4gICAgZW52LmN1cnJlbnRVc2VyLnJvbGVzID0gcm9sZS5zcGxpdCgnLCcpO1xuICB9XG4gIGlmIChzY2hvb2wpIHtcbiAgICBlbnYuY3VycmVudFVzZXIuc2Nob29sID0gc2Nob29sO1xuICB9XG59XG4iLCJpbXBvcnQgeyBLZWRSZXBvIH0gZnJvbSAnLi9rZWQtcmVwbyc7XG5pbXBvcnQgeyBLU1Rlcm1QbGFubmVyV2Vla1BsYW4gfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcblxuXG5leHBvcnQgY2xhc3MgS1NUZXJtUGxhbm5lclJlcG8gZXh0ZW5kcyBLZWRSZXBvPEtTVGVybVBsYW5uZXJXZWVrUGxhbj4ge1xuICBzdGFydERhdGU6IG1vbWVudC5Nb21lbnQ7XG4gIGVuZERhdGU6IG1vbWVudC5Nb21lbnQ7XG5cbiAgIGFzeW5jIHJlZnJlc2hEYXRhKGRhdGVJbnRlcnZhbCA6IG1vbWVudC5Nb21lbnRbXSl7XG4gICAgW3RoaXMuc3RhcnREYXRlLCB0aGlzLmVuZERhdGVdICA9IGRhdGVJbnRlcnZhbDtcbiAgICAgYXdhaXQgdGhpcy5tZW0ucmVmcmVzaEZyb21TZXJ2ZXIoKTtcbiAgIH1cblxuICBjb25zdHJ1Y3RvcihnZXRDbGllbnQ6ICgpPT5LZWRCYWNrZW5kQ2xpZW50LCBnZXRDdXJyZW50VXNlcjogKCk9PlVzZXIpIHtcbiAgICBjb25zdCBjdXJyZW50VXNlciA9IGdldEN1cnJlbnRVc2VyKCk7XG4gICAgc3VwZXIoe1xuICAgICAgZ2V0Q2xpZW50LFxuICAgICAgb3B0aW1pc3RpYzogdHJ1ZSxcbiAgICAgIHRhYmxlOiBcIndlZWtwbGFucy1rc1wiLFxuICAgICAgdXNlcjogY3VycmVudFVzZXIgPyBjdXJyZW50VXNlci5tYWlsIDogXCJcIixcbiAgICAgIGdldFF1ZXJ5T3B0aW9uczogYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBzdGFydERhdGVWYWx1ZSA9ICh0aGlzLnN0YXJ0RGF0ZSAmJiB0aGlzLnN0YXJ0RGF0ZS52YWx1ZU9mKCkpIHx8IG1vbWVudCgpLnZhbHVlT2YoKTtcbiAgICAgICAgY29uc3QgZW5kRGF0ZVZhbHVlID0gKHRoaXMuZW5kRGF0ZSAmJiB0aGlzLmVuZERhdGUudmFsdWVPZigpKSB8fCBtb21lbnQoKS52YWx1ZU9mKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZnJvbTogc3RhcnREYXRlVmFsdWUsXG4gICAgICAgICAgdG86IGVuZERhdGVWYWx1ZSxcbiAgICAgICAgICByb2xlOiBcIlVTRVJcIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsIlxuZXhwb3J0IGNvbnN0IFNFQ09ORCA9IDEwMDA7XG5leHBvcnQgY29uc3QgTUlOVVRFID0gU0VDT05EICogNjA7XG5leHBvcnQgY29uc3QgSE9VUiA9IE1JTlVURSAqIDYwO1xuXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQge01JTlVURX0gZnJvbSAnLi4vLi4vdXRpbHMvY29uc3RhbnRzJztcbmltcG9ydCB7TH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIGlkOiBzdHJpbmcsXG4gICAgZGF5U3RhcnQsXG4gICAgc3RhcnRNb21lbnQ6IG1vbWVudC5Nb21lbnQsXG4gICAgZW5kTW9tZW50OiBtb21lbnQuTW9tZW50LFxuICAgIHRleHQ6IHN0cmluZyxcbiAgICBsb2NhdGlvbjogc3RyaW5nLFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmcsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBwb3M6IG51bWJlcixcbiAgICBsb2NhbGU6IHN0cmluZyxcbiAgICB6b29tOiBudW1iZXIsXG4gICAgaHRtbExpbms6IHN0cmluZyxcbiAgICBjbGFzc05hbWU6IHN0cmluZ1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXlWaWV3RXZlbnQgKHtcbiAgICBpZCxcbiAgICBkYXlTdGFydCxcbiAgICBzdGFydE1vbWVudCxcbiAgICBlbmRNb21lbnQsXG4gICAgdGV4dCxcbiAgICBsb2NhdGlvbixcbiAgICBkZXNjcmlwdGlvbixcbiAgICB3aWR0aCxcbiAgICBwb3MsXG4gICAgbG9jYWxlLFxuICAgIHpvb20sXG4gICAgaHRtbExpbmssXG4gICAgY2xhc3NOYW1lXG59OiBQcm9wcykge1xuICAgIGNvbnN0IHRvcCA9IChtb21lbnQoc3RhcnRNb21lbnQpLmRpZmYoZGF5U3RhcnQpIC8gTUlOVVRFKSAqIHpvb207XG4gICAgY29uc3QgaGVpZ2h0ID0gKG1vbWVudChlbmRNb21lbnQpLmRpZmYoc3RhcnRNb21lbnQpIC8gTUlOVVRFKSAqIHpvb207XG4gICAgY29uc3QgbG9jYWxlVGltZU9wdGlvbnMgPSB7aG91cjogJ251bWVyaWMnLCBtaW51dGU6ICcyLWRpZ2l0J307XG4gICAgY29uc3QgbG9jYWxlU3RhcnRUaW1lID0gc3RhcnRNb21lbnQudG9EYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKGxvY2FsZSwgbG9jYWxlVGltZU9wdGlvbnMpO1xuICAgIGNvbnN0IGxvY2FsZUVuZFRpbWUgPSBlbmRNb21lbnQudG9EYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKGxvY2FsZSwgbG9jYWxlVGltZU9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtcImRheXZpZXdldmVudCBcIiArIGNsYXNzTmFtZX0gc3R5bGU9e3tcbiAgICAgICAgcG9zaXRpb246J2Fic29sdXRlJyxcbiAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgIHRvcCxcbiAgICAgICAgbGVmdDogKHBvcyB8fCAwKSArIFwiJVwiLFxuICAgICAgICB3aWR0aDogKHdpZHRoIHx8IDEwMCkgKyAnJScsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgbWF4SGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ319XG5cbiAgICAgICAgdGl0bGU9e2Ake2xvY2FsZVN0YXJ0VGltZX0gLSAke2xvY2FsZUVuZFRpbWV9ICR7dGV4dH1gICtcbiAgICAgICAgICAgIChsb2NhdGlvbiA/XG4gICAgICAgICAgICAgICAgXCJcXG5cIiArIExgUGxhdHM6ICR7bG9jYXRpb259YCA6XG4gICAgICAgICAgICAgICAgXCJcIiApICtcbiAgICAgICAgICAgIChkZXNjcmlwdGlvbiA/XG4gICAgICAgICAgICAgICAgXCJcXG5cIiArIGRlc2NyaXB0aW9uIDpcbiAgICAgICAgICAgICAgICBcIlwiIClcbiAgICAgICAgfVxuICAgICAgICA+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImV2ZW50LXRpdGxlXCIgaHJlZj17aHRtbExpbmt9IHRhcmdldD1cImNhbGVuZGFyLWV2ZW50XCI+XG4gICAgICAgICAgICB7dGV4dH1cbiAgICAgICAgPC9hPlxuICAgICAgICA8cCBjbGFzc05hbWU9XCJldmVudC1wZXJpb2RcIj5cbiAgICAgICAgICAgIHtsb2NhbGVTdGFydFRpbWV9IC0ge2xvY2FsZUVuZFRpbWV9XG4gICAgICAgIDwvcD5cbiAgICAgICAge2xvY2F0aW9uICYmXG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJldmVudC1sb2NhdGlvblwiPlxuICAgICAgICAgICAgICAgIHtsb2NhdGlvbn1cbiAgICAgICAgICAgIDwvcD5cbiAgICAgICAgfVxuICAgICAgICB7ZGVzY3JpcHRpb24gJiZcbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImV2ZW50LWRlc2NyaXB0aW9uXCI+XG4gICAgICAgICAgICAgICAge2Rlc2NyaXB0aW9ufVxuICAgICAgICAgICAgPC9wPlxuICAgICAgICB9XG4gICAgPC9kaXY+O1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUaW1lTGluZXMgKHtkYXlTdGFydCwgZGF5RW5kLCB6b29tfSkge1xuICAgIGNvbnN0IGhvdXJQaXhlbHMgPSA2MCAqIHpvb207XG4gICAgY29uc3Qgc3RhcnRIb3VyID0gbW9tZW50KGRheVN0YXJ0KS5ob3VyKCk7XG4gICAgY29uc3QgZW5kSG91ciA9IG1vbWVudChkYXlFbmQpLmhvdXIoKTtcblxuICAgIGNvbnN0IGhvdXJzID0gW107XG4gICAgZm9yIChsZXQgaG91ciA9IHN0YXJ0SG91cjsgaG91ciA8PSBlbmRIb3VyOyArK2hvdXIpIHtcbiAgICAgICAgaG91cnMucHVzaChob3VyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gPGRpdj5cbiAgICAgICAge2hvdXJzLm1hcChob3VyID0+IFxuICAgICAgICAgICAgPGRpdiBrZXk9e2hvdXJ9IGNsYXNzTmFtZT1cInRpbWVsaW5lXCIgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgICAgICAgIG1hcmdpbjogYCR7aG91clBpeGVscyAvIDJ9cHggMCAwIDBgLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaG91clBpeGVscyAvIDJcbiAgICAgICAgfX0gLz4gKX1cbiAgICA8L2Rpdj47XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgRGF5Vmlld0V2ZW50IGZyb20gJy4vZGF5LXZpZXctZXZlbnQnO1xuaW1wb3J0IFRpbWVMaW5lcyBmcm9tICcuL3RpbWUtbGluZXMnO1xuaW1wb3J0IHtNSU5VVEV9IGZyb20gJy4uLy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQge2NydW5jaENvbGxpZGluZ0V2ZW50c30gZnJvbSAnLi9jcnVuY2gtY29sbGlkaW5nLWV2ZW50cyc7XG5pbXBvcnQgeyBTdHVkZW50Q2FsZW5kYXJFdmVudCB9IGZyb20gJy4vbW9kZWxzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgICBkYXlTdGFydDogbW9tZW50Lk1vbWVudDsgICAvLyBNaWxsaXNlY29uZHMgYXQgc3RhcnQgb2YgdGhlIGRheSAoZm9yIGV4YW1wbGUgMDg6MDAgdGhlIGRheSlcbiAgICBkYXlFbmQ6IG1vbWVudC5Nb21lbnQ7ICAgICAvLyBNaWxsaXNlY29uZHMgYXQgZW5kIG9mIHRoZSBkYXkgKGZvciBleGFtcGxlIDE3OjAwIHRoZSBkYXkpXG4gICAgZXZlbnRzOiBTdHVkZW50Q2FsZW5kYXJFdmVudFtdLCAgICAgLy8gRXZlbnRzIHRvIHNob3dcbiAgICBsb2NhbGU6IHN0cmluZyxcbiAgICB6b29tOiBudW1iZXIsXG4gICAgaXNMYXN0Q2FsbDogYm9vbGVhblxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBEYXlWaWV3ICh7XG4gICAgZGF5U3RhcnQsICAgLy8gTWlsbGlzZWNvbmRzIGF0IHN0YXJ0IG9mIHRoZSBkYXkgKGZvciBleGFtcGxlIDA4OjAwIHRoZSBkYXkpXG4gICAgZGF5RW5kLCAgICAgLy8gTWlsbGlzZWNvbmRzIGF0IGVuZCBvZiB0aGUgZGF5IChmb3IgZXhhbXBsZSAxNzowMCB0aGUgZGF5KVxuICAgIGV2ZW50cywgICAgIC8vIEV2ZW50cyB0byBzaG93XG4gICAgbG9jYWxlLFxuICAgIHpvb20sXG4gICAgaXNMYXN0Q2FsbFxufTogUHJvcHMpIHtcbiAgICBjb25zdCBoZWlnaHQgPSAobW9tZW50KGRheUVuZCkuZGlmZihkYXlTdGFydCkgLyBNSU5VVEUpICogem9vbTtcblxuICAgIGNvbnN0IGNydW5jaGVkRXZlbnRzID0gY3J1bmNoQ29sbGlkaW5nRXZlbnRzKGV2ZW50cywgaXNMYXN0Q2FsbCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRheXZpZXdcIiBzdHlsZT17e1xuICAgICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgbWF4SGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIG92ZXJmbG93OiAnaGlkZGVuJ1xuICAgICAgICB9fT5cblxuICAgICAgICAgICAgPFRpbWVMaW5lcyBkYXlTdGFydD17ZGF5U3RhcnR9IGRheUVuZD17ZGF5RW5kfSB6b29tPXt6b29tfSAvPlxuXG4gICAgICAgICAgICB7Y3J1bmNoZWRFdmVudHMubWFwIChldiA9PiA8RGF5Vmlld0V2ZW50XG4gICAgICAgICAgICAgICAga2V5PXtldi5pZH1cbiAgICAgICAgICAgICAgICBpZD17ZXYuaWR9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtldi5jbGFzc05hbWV9XG4gICAgICAgICAgICAgICAgZGF5U3RhcnQ9e2RheVN0YXJ0fVxuICAgICAgICAgICAgICAgIHN0YXJ0TW9tZW50PXtldi5zdGFydE1vbWVudH1cbiAgICAgICAgICAgICAgICBlbmRNb21lbnQ9e2V2LmVuZE1vbWVudH1cbiAgICAgICAgICAgICAgICB0ZXh0PXtldi50ZXh0fVxuICAgICAgICAgICAgICAgIGxvY2F0aW9uPXtldi5sb2NhdGlvbn1cbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbj17ZXYuZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgd2lkdGg9e2V2LndpZHRofVxuICAgICAgICAgICAgICAgIHBvcz17ZXYucG9zfVxuICAgICAgICAgICAgICAgIGxvY2FsZT17bG9jYWxlfVxuICAgICAgICAgICAgICAgIHpvb209e3pvb219XG4gICAgICAgICAgICAgICAgaHRtbExpbms9e2V2Lmh0bWxMaW5rfVxuICAgICAgICAgICAgLz4pfVxuICAgICAgICA8L2Rpdj5cbiAgICApO1xufVxuXG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBmbGF0dGVuLCBkaXN0aW5jdCwgY29tcGFyZVByb3AgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBTdHVkZW50Q2FsZW5kYXJFdmVudCB9IGZyb20gJy4vbW9kZWxzJztcblxuaW50ZXJmYWNlIEV2ZW50TWV0YSB7XG4gIGluZGV4PzogbnVtYmVyLFxuICBwcmV2T3ZlcmxhcHM/OiBTdHVkZW50Q2FsZW5kYXJFdmVudFtdICBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNydW5jaENvbGxpZGluZ0V2ZW50cyAoXG4gIGV2ZW50czogU3R1ZGVudENhbGVuZGFyRXZlbnRbXSxcbiAgaXNMYXN0Q2FsbD86IGJvb2xlYW4pXG46IFN0dWRlbnRDYWxlbmRhckV2ZW50W11cbntcbiAgY29uc3QgcmVzdWx0OiAoU3R1ZGVudENhbGVuZGFyRXZlbnQgJiBFdmVudE1ldGEpW10gPSBbXTtcbiAgZXZlbnRzLmZvckVhY2goKGV2ZW50LCBldmVudEluZGV4KSA9PiB7XG4gICAgICBjb25zdCBvdmVybGFwcyA9IHJlc3VsdC5maWx0ZXIoeCA9PiB4LnN0YXJ0TW9tZW50ICYmIHguZW5kTW9tZW50ICYmXG4gICAgICAgICAgKHguc3RhcnRNb21lbnQgPD0gZXZlbnQuc3RhcnRNb21lbnQpICYmXG4gICAgICAgICAgKHguZW5kTW9tZW50ID4gZXZlbnQuc3RhcnRNb21lbnQpKTtcbiAgICAgIGxldCBhbGxPdmVybGFwcyA9IG92ZXJsYXBzLmNvbmNhdChmbGF0dGVuIChvdmVybGFwcy5tYXAobyA9PiBvLnByZXZPdmVybGFwcykpKTtcbiAgICAgIGFsbE92ZXJsYXBzID0gZGlzdGluY3QoYWxsT3ZlcmxhcHMsIG8gPT4gby5pbmRleCk7XG4gICAgICBhbGxPdmVybGFwcy5zb3J0KGNvbXBhcmVQcm9wKFwic3RhcnRNb21lbnRcIikpO1xuICAgICAgbGV0IHdpZHRoOy8vID0gTWF0aC5yb3VuZCgxMDAgLyBNYXRoLm1heCgoYWxsT3ZlcmxhcHMubGVuZ3RoICsgMSksIDEpKTtcbiAgICAgIGxldCBwb3MgPSAwO1xuICAgICAgYWxsT3ZlcmxhcHMuZm9yRWFjaCgob3ZlcmxhcCwgaSkgPT4ge1xuICAgICAgICBpZiAoaSAlIDQgPT09IDApIHtcbiAgICAgICAgICB3aWR0aCA9IE1hdGgubWF4KDI1LCBNYXRoLnJvdW5kKDEwMCAvIE1hdGgubWF4KGFsbE92ZXJsYXBzLmxlbmd0aCAtIGkgKyAxLCAxKSkpO1xuICAgICAgICAgIHBvcyA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgb3ZlcmxhcC53aWR0aCA9IHdpZHRoO1xuICAgICAgICBvdmVybGFwLmNsYXNzTmFtZSA9IChvdmVybGFwLmNsYXNzTmFtZSB8fCBcIlwiKS5zcGxpdCgnICcpXG4gICAgICAgICAgLmZpbHRlcihjbiA9PiBjbiAhPT0gJ3NwbGl0dGVkJylcbiAgICAgICAgICAuY29uY2F0KFwic3BsaXR0ZWRcIilcbiAgICAgICAgICAuam9pbignICcpLFxuICAgICAgICBvdmVybGFwLnBvcyA9IHBvcztcbiAgICAgICAgcG9zICs9IHdpZHRoO1xuICAgICAgfSk7XG4gICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgIC4uLmV2ZW50LFxuICAgICAgICBpbmRleDogZXZlbnRJbmRleCxcbiAgICAgICAgcG9zOiBwb3MsXG4gICAgICAgIHdpZHRoLFxuICAgICAgICBjbGFzc05hbWU6IHdpZHRoIDwgMTAwID9cbiAgICAgICAgICAoZXZlbnQuY2xhc3NOYW1lID8gZXZlbnQuY2xhc3NOYW1lICsgXCIgc3BsaXR0ZWRcIiA6IFwic3BsaXR0ZWRcIikgOlxuICAgICAgICAgIGV2ZW50LmNsYXNzTmFtZSxcbiAgICAgICAgcHJldk92ZXJsYXBzOiBhbGxPdmVybGFwc1xuICAgICAgfSk7XG4gICAgICAvKmlmIChpc0xhc3RDYWxsICYmIG1vbWVudChldmVudC5zdGFydCkuZGF5KCkgPT09IDEpIHtcbiAgICAgICAgaWYgKC9TdmUyLy50ZXN0KGV2ZW50LnRleHQpKSB7XG4gICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9GcmFuc2thLy50ZXN0KGV2ZW50LnRleHQpKSB7XG4gICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9UeXNrYS8udGVzdChldmVudC50ZXh0KSkge1xuICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvc3BhbnNrLy50ZXN0KGV2ZW50LnRleHQpKSBkZWJ1Z2dlcjtcbiAgICAgICAgaWYgKC9Fbmc2Ly50ZXN0KGV2ZW50LnRleHQpKSBkZWJ1Z2dlcjtcbiAgICAgIH0qL1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSG91ck1hcmtlciAoe3N0YXJ0SG91ciwgZW5kSG91ciwgbG9jYWxlLCB6b29tfSkge1xuICAgIGNvbnN0IGhvdXJQaXhlbHMgPSA2MCAqIHpvb207XG5cbiAgICBjb25zdCBob3VycyA9IFtdO1xuICAgIGZvciAobGV0IGhvdXIgPSBzdGFydEhvdXI7IGhvdXIgPD0gZW5kSG91cjsgKytob3VyKSB7XG4gICAgICAgIGhvdXJzLnB1c2goaG91cik7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiaG91cm1hcmtlclwiIHN0eWxlPXt7XG4gICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICAgIGhlaWdodDogKGVuZEhvdXIgLSBzdGFydEhvdXIpICogaG91clBpeGVsc1xuICAgIH19PlxuICAgICAge2hvdXJzLm1hcCgoaG91ciwgaSkgPT4ge1xuICAgICAgICBjb25zdCB5cG9zID0gaSAqIGhvdXJQaXhlbHM7XG4gICAgICAgIHJldHVybiA8c3BhbiBrZXk9e2hvdXJ9PjxkaXYgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogeXBvcyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6ICctNHB4JywgLy8gQ1NTIVxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICAgIHttb21lbnQoKS5ob3VyKGhvdXIpLm1pbnV0ZSgwKS50b0RhdGUoKS50b0xvY2FsZVN0cmluZyhsb2NhbGUsIHtob3VyOiBcIjItZGlnaXRcIiwgbWludXRlOiBcIjItZGlnaXRcIn0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7Lyo8ZGl2IGNsYXNzTmFtZT1cImhvdXJsaW5lXCJcbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjZWVlZUYyJywgLy8gQ1NTIVxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogJzI0cHgnLFxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogJzZweCcsXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAnMXB4JyxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB5cG9zXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7aG91ciA8IGVuZEhvdXIgJiYgPGRpdiBjbGFzc05hbWU9XCJoYWx2aG91cmxpbmVcIlxuICAgICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJyNlZWVlRjInLCAvLyBDU1MhXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiAnMjZweCcsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnNHB4JyxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICcxcHgnLFxuICAgICAgICAgICAgICAgICAgICB0b3A6IHlwb3MgKyAoaG91clBpeGVscyAvIDIpICsgMVxuICAgICAgICAgICAgfX0gLz4gfSAqL31cbiAgICAgICAgPC9zcGFuPjtcbiAgICB9KX08L2Rpdj47XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0YXR1c0JhciAoe3N0YXR1cywgZXJyb3J9KSB7XG4gICAgaWYgKCFzdGF0dXMgJiYgIWVycm9yKSByZXR1cm4gbnVsbDtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdGF0dXNiYXJcIj5cbiAgICAgICAge2Vycm9yID9cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImVycm9yXCI+eycnK2Vycm9yfTwvcD4gOlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic3RhdHVzXCI+e3N0YXR1c308L3A+fVxuICAgIDwvZGl2PlxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IERheVZpZXcgZnJvbSAnLi9kYXktdmlldyc7XG5pbXBvcnQgSG91ck1hcmtlciBmcm9tICcuL2hvdXItbWFya2VyJztcbmltcG9ydCB7Y2FwaXRhbGl6ZUZpcnN0LCBjbG9uZSwgTH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IFN0YXR1c0JhciBmcm9tICcuL3N0YXR1cy1iYXInO1xuaW1wb3J0IHsgU3R1ZGVudENhbGVuZGFyRXZlbnQsIERheURhdGEgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgICBmaXJzdERheTogbW9tZW50Lk1vbWVudCwgIC8vIHttb21lbnR9IFRoZSBkYXkgdG8gc3RhcnQgd2l0aCAobm9ybWFsbHkgYSBtb25kYXkpXG4gICAgc3RhcnRIb3VyOiBudW1iZXIsIC8vIHtudW1iZXJ9IFRoZSBob3VyIHRvIHN0YXJ0IG9uXG4gICAgZW5kSG91cjogbnVtYmVyLCAgIC8vIHtudW1iZXJ9IFRoZSBob3VyIHRvIGVuZCByZW5kZXJpbmcgcGVyIGRheVxuICAgIG51bURheXM6IG51bWJlciwgICAvLyB7bnVtYmVyfSBOdW1iZXIgb2YgZGF5cywgbm9ybWFsbHkgNS5cbiAgICBldmVudHM6IFN0dWRlbnRDYWxlbmRhckV2ZW50W10sICAgIC8vIEFycmF5IG9mIGV2ZW50cyB0byBkaXNwbGF5IGluIHRoZSB3ZWVrLlxuICAgIGxvY2FsZTogc3RyaW5nLCAgICAvLyBMb2NhbGUgdG8gdXNlIGZvciBzaG93aW5nIHdlZWsgZGF5cyBhbmQgaG91ciBtYXJrcy5cbiAgICB6b29tOiBudW1iZXIsICAgICAgLy8ge251bWJlcn0gWm9vbSB3aGVyZSAxIG1lYW5zIHRoYXQgMSBtaW51dGUgPSAxIHBpeGVsLiAgXG4gICAgc3RhdHVzPzogc3RyaW5nLFxuICAgIGVycm9yPzogRXJyb3Jcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2Vla1ZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgICBzdGF0aWMgY29udGV4dFR5cGUgPSBMYW5ndWFnZUNvbnRleHQ7XG4gICAgcmVuZGVyICgpIHtcbiAgICAgICAgLy8gUHJvcHM6XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGZpcnN0RGF5LCAgLy8ge21vbWVudH0gVGhlIGRheSB0byBzdGFydCB3aXRoIChub3JtYWxseSBhIG1vbmRheSlcbiAgICAgICAgICAgIHN0YXJ0SG91ciwgLy8ge251bWJlcn0gVGhlIGhvdXIgdG8gc3RhcnQgb25cbiAgICAgICAgICAgIGVuZEhvdXIsICAgLy8ge251bWJlcn0gVGhlIGhvdXIgdG8gZW5kIHJlbmRlcmluZyBwZXIgZGF5XG4gICAgICAgICAgICBudW1EYXlzLCAgIC8vIHtudW1iZXJ9IE51bWJlciBvZiBkYXlzLCBub3JtYWxseSA1LlxuICAgICAgICAgICAgZXZlbnRzLCAgICAvLyBBcnJheSBvZiBldmVudHMgdG8gZGlzcGxheSBpbiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGxvY2FsZSwgICAgLy8gTG9jYWxlIHRvIHVzZSBmb3Igc2hvd2luZyB3ZWVrIGRheXMgYW5kIGhvdXIgbWFya3MuXG4gICAgICAgICAgICB6b29tLCAgICAgIC8vIHtudW1iZXJ9IFpvb20gd2hlcmUgMSBtZWFucyB0aGF0IDEgbWludXRlID0gMSBwaXhlbC4gIFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgZXJyb3JcbiAgICAgICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgY29uc3Qge2ludGx9ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgICAgIC8vIFByZXBhcmUgRGF5VmlldyBkYXRhcyBcbiAgICAgICAgY29uc3QgZGF5RGF0YXM6IERheURhdGFbXSA9IFtdO1xuICAgICAgICBsZXQgZGF5ID0gbW9tZW50KGZpcnN0RGF5KTtcbiAgICAgICAgZm9yIChsZXQgaT0wO2k8bnVtRGF5czsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBkYXlTdGFydCA9IG1vbWVudChkYXkpLmhvdXIoc3RhcnRIb3VyKTtcbiAgICAgICAgICAgIGNvbnN0IGRheUVuZCA9IG1vbWVudChkYXkpLmhvdXIoZW5kSG91cik7XG4gICAgICAgICAgICBjb25zdCBkYXlEYXRlID0gbW9tZW50KGRheSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG4gICAgICAgICAgICBjb25zdCBpc1RvZGF5ID0gbW9tZW50KGRheVN0YXJ0KS5zdGFydE9mKFwiZGF5XCIpLnZhbHVlT2YoKSA9PT0gbW9tZW50KCkuc3RhcnRPZihcImRheVwiKS52YWx1ZU9mKCk7XG4gICAgICAgICAgICBkYXlEYXRhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBjYXBpdGFsaXplRmlyc3QoZGF5U3RhcnQudG9EYXRlKCkudG9Mb2NhbGVTdHJpbmcobG9jYWxlLCB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXk6ICdsb25nJyxcbiAgICAgICAgICAgICAgICAgICAgZGF5OidudW1lcmljJyxcbiAgICAgICAgICAgICAgICAgICAgbW9udGg6ICdzaG9ydCd9KSksXG4gICAgICAgICAgICAgICAgZGF5U3RhcnQsXG4gICAgICAgICAgICAgICAgZGF5RW5kLFxuICAgICAgICAgICAgICAgIGlzVG9kYXksXG4gICAgICAgICAgICAgICAgZXZlbnRzOiBldmVudHMuZmlsdGVyKGV2ZW50ID0+XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0YXJ0ICYmIGV2ZW50LmVuZCAmJiBldmVudC5zdGFydC5kYXRlVGltZSAmJiBldmVudC5lbmQuZGF0ZVRpbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgKG1vbWVudChldmVudC5zdGFydC5kYXRlVGltZSkuaXNCZXR3ZWVuKGRheVN0YXJ0LCBkYXlFbmQpIHx8XG4gICAgICAgICAgICAgICAgICAgICBtb21lbnQoZXZlbnQuZW5kLmRhdGVUaW1lKS5pc0JldHdlZW4oZGF5U3RhcnQsIGRheUVuZCkpKVxuICAgICAgICAgICAgICAgICAgICAgLy8gQ2hhbmdlIHN0YXJ0IC8gZW5kIHRvIGRpcmVjdGx5IHBvaW50IHRvIHRoZSBkYXRlVGltZVxuICAgICAgICAgICAgICAgICAgICAgLm1hcChldmVudCA9PiBjbG9uZShldmVudCwge3N0YXJ0TW9tZW50OiBtb21lbnQoZXZlbnQuc3RhcnQuZGF0ZVRpbWUpLCBlbmRNb21lbnQ6IG1vbWVudChldmVudC5lbmQuZGF0ZVRpbWUpfSkpXG4gICAgICAgICAgICAgICAgICAgICAuc29ydCgoYSxiKSA9PiBhLnN0YXJ0TW9tZW50LnZhbHVlT2YgPiBiLnN0YXJ0TW9tZW50LnZhbHVlT2YgPyAxIDogYS5zdGFydE1vbWVudCA8IGIuc3RhcnRNb21lbnQgPyAtMSA6IDApLFxuICAgICAgICAgICAgICAgIGZ1bGxEYXlFdmVudHM6IGV2ZW50cy5maWx0ZXIoZXZlbnQgPT5cbiAgICAgICAgICAgICAgICAgICAgLy8gVmVyaWZ5IHRoYXQgaXQgaXMgYSBmdWxsLWRheS1ldmVudFxuICAgICAgICAgICAgICAgICAgICBldmVudC5zdGFydCAmJiBldmVudC5lbmQgJiYgZXZlbnQuc3RhcnQuZGF0ZSAmJiBldmVudC5lbmQuZGF0ZSAmJlxuICAgICAgICAgICAgICAgICAgICAvLyBWZXJpZnkgaXQgYXBwbGllcyB0byBjdXJyZW50IGRheVxuICAgICAgICAgICAgICAgICAgICAoZXZlbnQuc3RhcnQuZGF0ZSA8PSBkYXlEYXRlICYmIGV2ZW50LmVuZC5kYXRlID4gZGF5RGF0ZSkpIFxuICAgICAgICAgICAgICAgICAgICAgLy8gQ2hhbmdlIHN0YXJ0IC8gZW5kIHRvIGRpcmVjdGx5IHBvaW50IHRvIHRoZSBkYXRlIG9iamVjdFxuICAgICAgICAgICAgICAgICAgICAubWFwKGV2ZW50ID0+IGNsb25lKGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydERhdGU6IGV2ZW50LnN0YXJ0LmRhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmREYXRlOiBldmVudC5lbmQuZGF0ZX0pKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkYXkgPSBtb21lbnQoZGF5KSAvLyBjbG9uZSBpdFxuICAgICAgICAgICAgICAgIC5hZGQoMSwgJ2RheXMnKTsgLy8gQWRkIGFub3RoZXIgZGF5XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW5kZXJcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwidmVtZW5kby13ZWVrdmlld1wiPlxuICAgICAgICAgIDx0YWJsZT48dGJvZHk+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPXt7Ym9yZGVyOiAwfX0+PC90ZD5cbiAgICAgICAgICAgICAgICB7ZGF5RGF0YXMubWFwKGQgPT4gPHRkIGtleT17ZC5kYXlTdGFydC50b0lTT1N0cmluZygpfSBjbGFzc05hbWU9e2QuaXNUb2RheSA/IFwidG9kYXlcIiA6IG51bGx9PlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJkYXluYW1lXCI+e2QubmFtZX08L3A+XG4gICAgICAgICAgICAgICAgPC90ZD4pfVxuICAgICAgICAgICAgPC90cj48dHI+XG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPXt7Ym9yZGVyOiAwfX0+PHAgY2xhc3NOYW1lPVwid2Vlay1udW1iZXJcIj57aW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcImNhbGVuZGFyLndlZWtOdW1iZXJcIiwgZGVmYXVsdE1lc3NhZ2U6XCJWe3dlZWtOdW1iZXJ9XCJ9LCB7d2Vla051bWJlcjptb21lbnQoZmlyc3REYXkpLndlZWsoKX0pfTwvcD48L3RkPlxuICAgICAgICAgICAgICAgIHtkYXlEYXRhcy5tYXAoZGF5ID0+XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBrZXk9e2RheS5kYXlTdGFydC50b0lTT1N0cmluZygpfSBjbGFzc05hbWU9e2RheS5pc1RvZGF5ID8gXCJ0b2RheVwiIDogbnVsbH0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7ZGF5LmZ1bGxEYXlFdmVudHMubWFwKCh7aWQsIHRleHQsIGxvY2F0aW9uLCBkZXNjcmlwdGlvbiwgaHRtbExpbmssIGNsYXNzTmFtZX0pID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBrZXk9e2lkfSBjbGFzc05hbWU9e1wiZGF5dmlld2V2ZW50IGZ1bGwtZGF5IFwiICsgY2xhc3NOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17YCR7dGV4dH1gICsgKGxvY2F0aW9uID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuXCIgKyBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwiY2FsZW5kYXIuZnVsbERheUV2ZW50TG9jYXRpb25cIiwgZGVmYXVsdE1lc3NhZ2U6XCJQbGF0czoge2xvY2F0aW9ufVwifSwge2xvY2F0aW9uOmxvY2F0aW9ufSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcIikgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlc2NyaXB0aW9uID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcblwiICsgZGVzY3JpcHRpb24gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZXZlbnQtdGl0bGVcIiBocmVmPXtodG1sTGlua30gdGFyZ2V0PVwiY2FsZW5kYXItZXZlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHt0ZXh0fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsb2NhdGlvbiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwiZXZlbnQtbG9jYXRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bG9jYXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Rlc2NyaXB0aW9uICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJldmVudC1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L3RyPjx0cj5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT17e2JvcmRlcjogMH19PlxuICAgICAgICAgICAgICAgIDxIb3VyTWFya2VyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0SG91cj17c3RhcnRIb3VyfVxuICAgICAgICAgICAgICAgICAgICBlbmRIb3VyPXtlbmRIb3VyfVxuICAgICAgICAgICAgICAgICAgICBsb2NhbGU9e2xvY2FsZX1cbiAgICAgICAgICAgICAgICAgICAgem9vbT17em9vbX0gLz5cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAge2RheURhdGFzLm1hcChkYXkgPT4gPHRkIGtleT17ZGF5LmRheVN0YXJ0LnRvSVNPU3RyaW5nKCl9IGNsYXNzTmFtZT17ZGF5LmlzVG9kYXkgPyBcInRvZGF5XCIgOiBudWxsfT48RGF5Vmlld1xuICAgICAgICAgICAgICAgICAgICBrZXk9e2RheS5kYXlTdGFydC50b0lTT1N0cmluZygpfVxuICAgICAgICAgICAgICAgICAgICBkYXlTdGFydD17ZGF5LmRheVN0YXJ0fVxuICAgICAgICAgICAgICAgICAgICBkYXlFbmQ9e2RheS5kYXlFbmR9XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50cz17ZGF5LmV2ZW50c31cbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlPXtsb2NhbGV9XG4gICAgICAgICAgICAgICAgICAgIHpvb209e3pvb219XG4gICAgICAgICAgICAgICAgICAgIGlzTGFzdENhbGw9e3N0YXR1cyA9PSAnJ30gLz4gPC90ZD4pfVxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAoc3RhdHVzIHx8IGVycm9yKSAmJiAoIWVycm9yIHx8IGVycm9yLm5hbWUgIT09IFwiVW5hdXRob3JpemVkRXJyb3JcIikgJiZcbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBzdGF0dXMgLyBlcnJvclxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICA8dHI+PHRkIHN0eWxlPXt7Ym9yZGVyOiAwfX0+PC90ZD48dGQgc3R5bGU9e3tib3JkZXI6IDB9fSBjb2xTcGFuPXtudW1EYXlzfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTdGF0dXNCYXIgc3RhdHVzPXtzdGF0dXN9IGVycm9yPXtlcnJvcn0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC90ZD48L3RyPlxuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvdGJvZHk+PC90YWJsZT5cbiAgICAgICAgPC9kaXY+XG4gICAgfVxufSIsImltcG9ydCB7IEJlYXJlclByb3ZpZGVyIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuXG5leHBvcnQgY2xhc3MgR29vZ2xlQ2FsZW5kYXIge1xuICB0b2tlbkV4cGlyYXRpb246IERhdGU7XG4gIGdvb2dsZVRva2VuUHJvdmlkZXI6IEJlYXJlclByb3ZpZGVyO1xuXG4gIGNvbnN0cnVjdG9yKGdvb2dsZVRva2VuUHJvdmlkZXI6IEJlYXJlclByb3ZpZGVyKSB7XG4gICAgdGhpcy5nb29nbGVUb2tlblByb3ZpZGVyID0gZ29vZ2xlVG9rZW5Qcm92aWRlcjtcbiAgfVxuXG4gIGFzeW5jIGVuc3VyZUluaXRlZCgpIHtcbiAgICAvLyBMb2FkIEdBUElcbiAgICBpZiAodHlwZW9mIGdhcGkgPT09ICd1bmRlZmluZWQnKSBhd2FpdCB0aGlzLmxvYWRHYXBpKCk7XG4gICAgLy8gU2V0IHRva2VuXG4gICAgaWYgKCF0aGlzLnRva2VuRXhwaXJhdGlvbiB8fCB0aGlzLnRva2VuRXhwaXJhdGlvbiA8IG5ldyBEYXRlKCkpIHtcbiAgICAgIGNvbnN0IHRva2VuUmVzdWx0ID0gYXdhaXQgdGhpcy5nb29nbGVUb2tlblByb3ZpZGVyLmdldEJlYXJlcigpO1xuICAgICAgdGhpcy50b2tlbkV4cGlyYXRpb24gPSBuZXcgRGF0ZSh0b2tlblJlc3VsdC5leHBpcmVzKTtcbiAgICAgIGdhcGkuY2xpZW50LnNldFRva2VuKHtcbiAgICAgICAgYWNjZXNzX3Rva2VuOiB0b2tlblJlc3VsdC50b2tlblxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIExvYWQgQ2FsZW5kYXIgQVBJXG4gICAgaWYgKHR5cGVvZiBnYXBpLmNsaWVudC5jYWxlbmRhciA9PT0gJ3VuZGVmaW5lZCcpIGF3YWl0IGdhcGkuY2xpZW50LmxvYWQoJ2NhbGVuZGFyJywgJ3YzJyk7XG4gIH1cblxuICBsb2FkR2FwaSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBnYXBpICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgc2NyaXB0LnNyYyA9IFwiaHR0cHM6Ly9hcGlzLmdvb2dsZS5jb20vanMvY2xpZW50LmpzP29ubG9hZD1nYWFwaV9sb2FkZWRcIjtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgKHdpbmRvdyBhcyBhbnkpLmdhYXBpX2xvYWRlZCA9IHJlc29sdmU7XG4gICAgfSk7XG4gIH1cblxuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMTE2ODY4OC9nb29nbGUtb2F1dGgyLXVzaW5nLWV4dGVybmFsbHktZ2VuZXJhdGVkLWFjY2Vzcy10b2tlbi13aXRoLWpzLWNsaWVudC1saWJyYXJ5XG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FwaS1jbGllbnQtbGlicmFyeS9qYXZhc2NyaXB0L3JlZmVyZW5jZS9yZWZlcmVuY2Vkb2NzI2dhcGljbGllbnRzZXR0b2tlbnRva2Vub2JqZWN0XG4gIC8qZ2FwaS5hdXRoLnNldFRva2VuKHtcbiAgICAgIGFjY2Vzc190b2tlbjogJ2FjY2Vzc1Rva2VuPycsXG4gICAgICBleHBpcmVzX2luOiBcIjM2MDBcIixcbiAgICAgIHN0YXRlOiBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXIucmVhZG9ubHlcIlxuICB9KSovXG5cbiAgYXN5bmMgbGlzdENhbGVuZGFycygpIHtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRlZCgpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBnYXBpLmNsaWVudC5jYWxlbmRhci5jYWxlbmRhckxpc3QubGlzdCh7fSk7XG4gICAgICAvLyBUT0RPOiBXaGF0IGlzIHRoZSBub3JtYWwgcmVzLnN0YXR1cz8gMjAwPyBUaHJvdyBpZiBub3QgMjAwP1xuICAgICAgcmV0dXJuIHJlcy5yZXN1bHQuaXRlbXM7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAvLyBUT0RPOiBQYXJzZSBvdXQgZXJyb3IgZnJvbSBlcnIgKHdoaWNoIGlzIGFuIG9iamVjdCEpXG4gICAgICB0aHJvdyBlcnIuZXJyb3I7IC8vIElzIHRoaXMgY29ycmVjdD8gVGVzdCFcbiAgICB9XG4gIH1cblxuICBhc3luYyBiYXRjaEV2ZW50cyh7IGNhbGVuZGFyTGlzdCwgdGltZU1pbiwgdGltZU1heCB9KSB7XG4gICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0ZWQoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYmF0Y2ggPSBnYXBpLmNsaWVudC5uZXdCYXRjaCgpO1xuICAgICAgY2FsZW5kYXJMaXN0LmZvckVhY2goKGNhbCkgPT4ge1xuICAgICAgICBiYXRjaC5hZGQoZ2FwaS5jbGllbnQuY2FsZW5kYXIuZXZlbnRzLmxpc3Qoe1xuICAgICAgICAgICdjYWxlbmRhcklkJzogY2FsLmlkIHx8ICdwcmltYXJ5JyxcbiAgICAgICAgICAndGltZU1pbic6IHRpbWVNaW4gJiYgKG5ldyBEYXRlKHRpbWVNaW4pKS50b0lTT1N0cmluZygpLFxuICAgICAgICAgICd0aW1lTWF4JzogdGltZU1heCAmJiAobmV3IERhdGUodGltZU1heCkpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgJ3Nob3dEZWxldGVkJzogZmFsc2UsXG4gICAgICAgICAgJ3NpbmdsZUV2ZW50cyc6IHRydWUsXG4gICAgICAgICAgJ2ZpZWxkcyc6ICdpdGVtcy9pZCxpdGVtcy9zdGFydCxpdGVtcy9lbmQsaXRlbXMvc3VtbWFyeSxpdGVtcy9sb2NhdGlvbixpdGVtcy9odG1sTGluayxpdGVtcy9kZXNjcmlwdGlvbicsXG4gICAgICAgICAgJ21heFJlc3VsdHMnOiAyNTAwLFxuICAgICAgICAgICdvcmRlckJ5JzogJ3N0YXJ0VGltZSdcbiAgICAgICAgfSksIDxhbnk+eydpZCc6IGNhbC5pZH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmF0Y2gudGhlbihyZXNwID0+IHtcbiAgICAgICAgbGV0IG5ld0NhbHMgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSBpbiBjYWxlbmRhckxpc3QpIHtcbiAgICAgICAgICBjb25zdCBjYWxJZCA9IGNhbGVuZGFyTGlzdFtpXS5pZDtcbiAgICAgICAgICBjb25zdCBldmVudHMgPSAocmVzcC5yZXN1bHRbY2FsSWRdLnJlc3VsdCAgYXMgZ2FwaS5jbGllbnQuY2FsZW5kYXIuRXZlbnRzKS5pdGVtcztcbiAgICAgICAgICBuZXdDYWxzW2NhbElkXSA9IHtjYWxlbmRhcjogY2FsZW5kYXJMaXN0W2ldLCBldmVudHN9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdDYWxzO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgIHRocm93IGVyci5lcnJvcjtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBXZWVrVmlldyBmcm9tICcuL3dlZWstdmlldyc7XG5pbXBvcnQge0dvb2dsZUNhbGVuZGFyfSBmcm9tICcuLi8uLi9hcGlzL2dvb2dsZS1jYWxlbmRhcic7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQge2Nsb25lLCBmbGF0dGVuLCBMfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgU3RhdHVzQmFyIGZyb20gJy4vc3RhdHVzLWJhcic7XG5pbXBvcnQge2NvdXJzZU5hbWVUb0Nzc0NsYXNzfSBmcm9tICcuL2NvdXJzZS1uYW1lLXRvLWNzcy1jbGFzcyc7XG5pbXBvcnQge3Nob3VsZEluY2x1ZGVDYWxlbmRhcn0gZnJvbSAnLi9zaG91bGQtaW5jbHVkZS1jYWxlbmRhcic7XG5pbXBvcnQgeyBsb2NhbE1vbWVudCB9IGZyb20gJy4uLy4uL2dsb2JhbHMvbW9tZW50LXN2LWxvY2FsZSc7XG5pbXBvcnQgZW52LCB7IEVudiB9IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgICBmaXJzdERheTogbW9tZW50Lk1vbWVudDtcbiAgICBudW1EYXlzOiBudW1iZXI7XG4gICAgaW5pdGlhbFN0YXJ0SG91cjogbnVtYmVyO1xuICAgIGluaXRpYWxFbmRIb3VyOiBudW1iZXI7XG4gICAgaW5pdGlhbFpvb206IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgICBmaXJzdERheTogbW9tZW50Lk1vbWVudCxcbiAgICBzdGFydEhvdXI6IG51bWJlcixcbiAgICBlbmRIb3VyOiBudW1iZXIsXG4gICAgem9vbTogbnVtYmVyLFxuICAgIGNhbGVuZGFyczoge1tjYWxlbmRhcklkOiBzdHJpbmddOiB7XG4gICAgICAgIGNhbGVuZGFyOiBnYXBpLmNsaWVudC5jYWxlbmRhci5DYWxlbmRhckxpc3RFbnRyeSxcbiAgICAgICAgZXZlbnRzOiBnYXBpLmNsaWVudC5jYWxlbmRhci5FdmVudFtdIH19LFxuICAgIGNhbGVuZGFyc0JlaW5nTG9hZGVkOiBzdHJpbmdbXSxcbiAgICBzdGF0dXM6IHN0cmluZyxcbiAgICBlcnJvcjogRXJyb3IgfCBudWxsIFxufVxuICBcbmV4cG9ydCBjbGFzcyBDYWxlbmRhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyAmIHtlbnY6IEVudn0sIFN0YXRlPiB7XG4gICAgZ2NhbDogR29vZ2xlQ2FsZW5kYXI7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gTGFuZ3VhZ2VDb250ZXh0O1xuXG4gICAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcyAmIHtlbnY6IEVudn0pIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAvLyBQcm9wc1xuICAgICAgICBjb25zdCB7Zmlyc3REYXl9ID0gcHJvcHM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGluaXRpYWxTdGFydEhvdXIsXG4gICAgICAgICAgICBpbml0aWFsRW5kSG91cixcbiAgICAgICAgICAgIGluaXRpYWxab29tXG4gICAgICAgIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBcbiAgICAgICAgLy8gU3RhdGVcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIGZpcnN0RGF5OiBmaXJzdERheSxcbiAgICAgICAgICAgIHN0YXJ0SG91cjogaW5pdGlhbFN0YXJ0SG91cixcbiAgICAgICAgICAgIGVuZEhvdXI6IGluaXRpYWxFbmRIb3VyLFxuICAgICAgICAgICAgem9vbTogaW5pdGlhbFpvb20sXG4gICAgICAgICAgICBjYWxlbmRhcnM6IHt9LFxuICAgICAgICAgICAgY2FsZW5kYXJzQmVpbmdMb2FkZWQ6IFtdLFxuICAgICAgICAgICAgc3RhdHVzOiAnTG9hZGluZyBjYWxlbmRhcnMuLi4gKGF1dGhlbnRpY2F0aW5nLi4uKScsXG4gICAgICAgICAgICBlcnJvcjogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7Z29vZ2xlVG9rZW5Qcm92aWRlcn0gPSBwcm9wcy5lbnYgfHwgZW52O1xuICAgICAgICB0aGlzLmdjYWwgPSBuZXcgR29vZ2xlQ2FsZW5kYXIoZ29vZ2xlVG9rZW5Qcm92aWRlcik7XG5cbiAgICAgICAgLy8gU3RhcnQgY2FsbGluZyBvbiBHb29nbGUgQVBJIHJpZ2h0IGF3YXkuIFN0b3JlIHByb21pc2UgaW4gcHJvcGVydHkuXG4gICAgICAgIHRoaXMuZ2NhbC5lbnN1cmVJbml0ZWQoKS50aGVuKCgpPT57XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2FkRGF0YShmaXJzdERheSk7XG4gICAgICAgIH0pLmNhdGNoIChlcnJvciA9PiB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaGFuZGxlRXJyb3IoZXJyb3IpIHtcbiAgICAgICAgaWYgKCFlcnJvcikgZXJyb3IgPSBcIlVua25vd24gZXJyb3JcIjtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7ZXJyb3J9KTtcbiAgICAgICAgY29uc29sZS5lcnJvciAoZXJyb3Iuc3RhY2sgfHwgZXJyb3IpOyAvLyBLZWVwIVxuICAgIH1cblxuICAgIGxvYWREYXRhKGZpcnN0RGF5KSB7XG4gICAgICAgIC8vIFByb3BzXG4gICAgICAgIGNvbnN0IHtudW1EYXlzfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBmaXJzdERheSxcbiAgICAgICAgICAgIGNhbGVuZGFyczoge30sXG4gICAgICAgICAgICBjYWxlbmRhcnNCZWluZ0xvYWRlZDogW10sXG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgIHN0YXR1czogaW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcImNhbGVuZGFyLmxvYWRpbmdDYWxlbmRhclwiLCBkZWZhdWx0TWVzc2FnZTogXCJMb2FkaW5nIGNhbGVuZGFycy4uLiAobGlzdGluZy4uLilcIn0pXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEltcG9ydGFudCB0byByZXR1cm4gdGhlIFByb21pc2Ugc28gdGhhdCBjYWxsZXIgd2lsbCBjYXRjaCBhbnkgZXJyb3IuXG4gICAgICAgIHJldHVybiB0aGlzLmdjYWwubGlzdENhbGVuZGFycygpLnRoZW4oY2FsZW5kYXJzID0+IHtcbiAgICAgICAgICAgIC8vIElnbm9yZSB0aGUgXCJ3ZWVrIG51bWJlcnNcIiBjYWxlbmRhciBhcyB3ZSBhbHJlYWR5IGluY2x1ZGUgd2VlayBudW1iZXJzIGluIG91ciB2aWV3XG4gICAgICAgICAgICBjYWxlbmRhcnMgPSBjYWxlbmRhcnMuZmlsdGVyKGNhbCA9PiBzaG91bGRJbmNsdWRlQ2FsZW5kYXIoY2FsKSk7XG4gICAgICAgICAgICAvLyEvV2VlayBOdW1iZXJzL2lnLnRlc3QoYy5zdW1tYXJ5KVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhjYWxlbmRhcnMubWFwKGMgPT4gKHtiZ0NvbG9yOiBjLmJhY2tncm91bmRDb2xvciwgcHJpbWFyeTogYy5wcmltYXJ5LCBzdW1tYXJ5OiBjLnN1bW1hcnksIHg6IGN9KSkpO1xuICAgICAgICAgICAgLy8gQ2FsZW5kYXJzIFN1Y2Nlc3NmdWxseSBsaXN0ZWQuXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBzdGF0dXM6IGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6XCJjYWxlbmRhci5sb2FkQ2FsZW5kYXJFdmVudHNcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiTG9hZCBjYWxlbmRhciBldmVudHMuLi5cIn0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZ2NhbC5iYXRjaEV2ZW50cyh7XG4gICAgICAgICAgICAgICAgY2FsZW5kYXJMaXN0OiBjYWxlbmRhcnMsXG4gICAgICAgICAgICAgICAgdGltZU1pbjogbW9tZW50KGZpcnN0RGF5KS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgICAgICB0aW1lTWF4OiBtb21lbnQoZmlyc3REYXkpLmFkZChudW1EYXlzLCAnZGF5cycpLmVuZE9mKCdkYXknKVxuICAgICAgICAgICAgfSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NhbGVuZGFyczogcmVzdWx0LCBzdGF0dXM6ICcnfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmF2aWdhdGVUb1ByZXZpb3VzV2VlaygpIHtcbiAgICAgICAgdGhpcy5sb2FkRGF0YShtb21lbnQodGhpcy5zdGF0ZS5maXJzdERheSkuYWRkKC0xLCBcIndlZWtcIikpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBuYXZpZ2F0ZVRvTmV4dFdlZWsoKSB7XG4gICAgICAgIHRoaXMubG9hZERhdGEobW9tZW50KHRoaXMuc3RhdGUuZmlyc3REYXkpLmFkZCgxLCBcIndlZWtcIikpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXIgKCkge1xuICAgICAgICAvLyBQcm9wc1xuICAgICAgICBjb25zdCB7IG51bURheXMgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgXG4gICAgICAgIC8vIFN0YXRlXG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGZpcnN0RGF5LFxuICAgICAgICAgICAgc3RhcnRIb3VyLFxuICAgICAgICAgICAgZW5kSG91cixcbiAgICAgICAgICAgIHpvb20sXG4gICAgICAgICAgICBjYWxlbmRhcnMsXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICBlcnJvclxuICAgICAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICBjb25zdCBldmVudFNldHMgPSBPYmplY3Qua2V5cyhjYWxlbmRhcnMpXG4gICAgICAgICAgICAubWFwKGNhbGVuZGFySWQgPT4gY2FsZW5kYXJzW2NhbGVuZGFySWRdKVxuICAgICAgICAgICAgLm1hcCgoe2NhbGVuZGFyLCBldmVudHN9KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNTY2hlZHVsZSA9IGNhbGVuZGFyLnN1bW1hcnkgPT09ICdTa29sc2NoZW1hJyAmJiBjYWxlbmRhci5kZXNjcmlwdGlvbiA9PT0gXCJTeW5jaHJvbml6ZWRcIjtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0hvbGlkYXkgPSAvaG9saWRheS8udGVzdChjYWxlbmRhci5pZCk7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNDbGFzc1Jvb20gPSAvY2xhc3Nyb29tLy50ZXN0KGNhbGVuZGFyLmlkKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoY2FsZW5kYXIuY29sb3JJZCkgY2xhc3NOYW1lcy5wdXNoKFwiZ2NhbC1wYWxldHRlLVwiICsgY2FsZW5kYXIuY29sb3JJZCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzU2NoZWR1bGUpIGNsYXNzTmFtZXMucHVzaChcImNvdXJzZS1ldmVudFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNIb2xpZGF5KSBjbGFzc05hbWVzLnB1c2goXCJob2xpZGF5LWV2ZW50XCIpO1xuICAgICAgICAgICAgICAgIC8vIE1hcCBHb29nbGUgQ2FsZW5kYXIgZXZlbnRzIHRvIG91ciBvd24gZm9ybWF0OlxuICAgICAgICAgICAgICAgIHJldHVybiBldmVudHMubWFwKGV2ZW50ID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBldmVudC5pZCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGV2ZW50LnN0YXJ0LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IGV2ZW50LmVuZCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogZXZlbnQuc3VtbWFyeSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb246IGV2ZW50LmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZXZlbnQuZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgICAgIC8vYmdDb2xvcjogY2FsZW5kYXIuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAvL2ZnQ29sb3I6IGNhbGVuZGFyLmZvcmVncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgaHRtbExpbms6IGV2ZW50Lmh0bWxMaW5rLFxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6IChpc1NjaGVkdWxlICYmIGV2ZW50LnN1bW1hcnkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lcy5jb25jYXQoY291cnNlTmFtZVRvQ3NzQ2xhc3MoJ2NvdXJzZS1ldmVudC0nLCBldmVudC5zdW1tYXJ5KSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lcykuam9pbihcIiBcIilcbiAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICBjb25zdCBldmVudHMgPSBmbGF0dGVuKGV2ZW50U2V0cyk7XG5cbiAgICAgICAgLy8gRWxzZSwgcmVuZGVyIHRoZSBXZWVrVmlldyBub3cuIEFueSBlcnJvciBzaG91bGQgYmUgZGlzcGxheWVkIGFzIHJlZCBzdGF0dXNcbiAgICAgICAgcmV0dXJuIDxkaXYgc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJywgdG9wOiAwLCBsZWZ0OiAwfX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi10b29sYmFyIHdlZWstbmF2aWdhdGlvblwiID5cbiAgICAgICAgICAgICAgICB7Lyo8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiPlxuICAgICAgICAgICAgICAgICAgICAgICAge0xgSWRhZ2B9XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvZGl2PiovfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9PnRoaXMubmF2aWdhdGVUb1ByZXZpb3VzV2VlaygpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLWxlZnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpPT50aGlzLm5hdmlnYXRlVG9OZXh0V2VlaygpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLXJpZ2h0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0bi1ncm91cFwiPiAgXG4gICAgICAgICAgICAgICAgICAgIHtpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwiY2FsZW5kYXIuY3VycmVudERhdGVcIiwgZGVmYXVsdE1lc3NhZ2U6IFwiVmVja2Ege3dlZWt9LCB7eWVhcn1cIn0sIHt3ZWVrOiBtb21lbnQoZmlyc3REYXkpLndlZWsoKSwgeWVhcjptb21lbnQoZmlyc3REYXkpLnllYXIoKX0pfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8V2Vla1ZpZXdcbiAgICAgICAgICAgICAgICBsb2NhbGU9e2ludGwubG9jYWxlfVxuICAgICAgICAgICAgICAgIGZpcnN0RGF5PXtmaXJzdERheX1cbiAgICAgICAgICAgICAgICBzdGFydEhvdXI9e3N0YXJ0SG91cn1cbiAgICAgICAgICAgICAgICBlbmRIb3VyPXtlbmRIb3VyfVxuICAgICAgICAgICAgICAgIG51bURheXM9e251bURheXN9XG4gICAgICAgICAgICAgICAgem9vbT17em9vbX1cbiAgICAgICAgICAgICAgICBldmVudHM9e2V2ZW50c31cbiAgICAgICAgICAgICAgICBzdGF0dXM9e3N0YXR1c31cbiAgICAgICAgICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICB9XG59XG4iLCIvKiBDYWxlbmRhcnMgdG8gc2hvdzpcblxuICAgIHN1bW1hcnk6IFwiTWF0c2VkZWxcIixcbiAgICBzdW1tYXJ5OiBcIlNrb2xzY2hlbWFcIixcbiAgICBwcmltYXJ5OiB0cnVlXG4gICAgaWQuaW5jbHVkZXMoJ2NsYXNzcm9vbScpXG4gICAgaWQuaW5jbHVkZXMoJ2hvbGlkYXknKVxuKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkSW5jbHVkZUNhbGVuZGFyIChjYWw6IGdhcGkuY2xpZW50LmNhbGVuZGFyLkNhbGVuZGFyTGlzdEVudHJ5KSB7XG4gIGNvbnN0IHN1bW1hcnkgPSBjYWwuc3VtbWFyeSB8fCBcIlwiO1xuICBjb25zdCBpc093bmVyID0gL293bmVyL2lnLnRlc3QoY2FsLmFjY2Vzc1JvbGUpO1xuICBjb25zdCBpc1ByaW1hcnkgPSAhIWNhbC5wcmltYXJ5O1xuICBjb25zdCBpc0NsYXNzcm9vbUNhbGVuZGFyID0gL2NsYXNzcm9vbS9pZy50ZXN0KGNhbC5pZCk7XG4gIGNvbnN0IGlzSG9saWRheUNhbGVuZGFyID0gL2hvbGlkYXkvaWcudGVzdChjYWwuaWQpO1xuXG4gIHJldHVybiAoXG4gICAgaXNQcmltYXJ5IHx8XG4gICAgaXNDbGFzc3Jvb21DYWxlbmRhciB8fFxuICAgIGlzSG9saWRheUNhbGVuZGFyIHx8XG4gICAgLy8vbWF0c2VkZWwvaWcudGVzdChzdW1tYXJ5KSB8fFxuICAgICgvc2NoZW1hL2lnLnRlc3Qoc3VtbWFyeSkgJiYgaXNPd25lcilcbiAgKTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEtHVGVybVBsYW5uZXJXZWVrUGxhbiwgS0dUZXJtUGxhbm5lcldlZWtQbGFuRW50cnkgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgRW52IH0gZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgd2Vla051bWJlcjogbnVtYmVyO1xuICB3ZWVrRGF0ZTogbnVtYmVyO1xuICBjb3Vyc2VOYW1lOiBzdHJpbmc7XG4gIHdlZWtQbGFuPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuO1xuICBub3RlPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuRW50cnk7XG4gIGNsb3NlRGlhbG9nOiAoKT0+dm9pZDtcbiAgZW52OiBFbnY7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGNvbG9yOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBXZWVrTm90ZURpYWxvZyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkZXNjcmlwdGlvbjogcHJvcHMubm90ZSA/IHByb3BzLm5vdGUuZGVzY3JpcHRpb24gOiAnJyxcbiAgICAgIGNvbG9yOiBwcm9wcy5ub3RlID8gcHJvcHMubm90ZS5jb2xvciA6ICd5ZWxsb3cnXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVsZXRlKCkge1xuICAgIGNvbnN0IHsgd2Vla051bWJlciwgd2Vla0RhdGUsIGNvdXJzZU5hbWUsIHdlZWtQbGFuLCBub3RlLCBjbG9zZURpYWxvZywgZW52IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgZGVzY3JpcHRpb24sIGNvbG9yfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBjbG9zZURpYWxvZygpO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKHdlZWtQbGFuLnBsYW5zKS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGF3YWl0IGVudi5rZ1Rlcm1QbGFubmVyUmVwby5kZWxldGUoW3dlZWtQbGFuLmlkXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IGVudi5rZ1Rlcm1QbGFubmVyUmVwby51cGRhdGUoW3dlZWtQbGFuXSwgd3AgPT4ge1xuICAgICAgICBkZWxldGUgd3AucGxhbnNbY291cnNlTmFtZV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNhdmUoKSB7XG4gICAgY29uc3QgeyB3ZWVrTnVtYmVyLCB3ZWVrRGF0ZSwgY291cnNlTmFtZSwgd2Vla1BsYW4sIG5vdGUsIGNsb3NlRGlhbG9nLCBlbnYgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBkZXNjcmlwdGlvbiwgY29sb3J9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNsb3NlRGlhbG9nKCk7XG5cbiAgICBpZiAod2Vla1BsYW4pIHtcbiAgICAgIGF3YWl0IGVudi5rZ1Rlcm1QbGFubmVyUmVwby51cGRhdGUoW3dlZWtQbGFuXSwgd3AgPT4gd3AucGxhbnNbY291cnNlTmFtZV0gPSB7ZGVzY3JpcHRpb24sIGNvbG9yfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHBsYW5zID0ge307XG4gICAgICBwbGFuc1tjb3Vyc2VOYW1lXSA9IHtkZXNjcmlwdGlvbiwgY29sb3J9O1xuICAgICAgYXdhaXQgZW52LmtnVGVybVBsYW5uZXJSZXBvLmluc2VydChbe1xuICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICBkYXRlVGltZTogd2Vla0RhdGUsXG4gICAgICAgIHBsYW5zXG4gICAgICB9XSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgd2Vla051bWJlciwgY291cnNlTmFtZSwgd2Vla1BsYW4sIG5vdGUsIGVudiB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGRlc2NyaXB0aW9uLCBjb2xvciB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCByZWFkT25seSA9IGVudi50dXRvcmVkO1xuXG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICA8aDI+SMOkbmRlbHNlIGbDtnIgdmVja2Ege3dlZWtOdW1iZXJ9IG9jaCB7Y291cnNlTmFtZX08L2gyPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi10YWJsZVwiPlxuICAgICAgICAgIDxkaXY+QmVza3Jpdm5pbmc6PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmdWxsV2lkdGhcIj5cbiAgICAgICAgICAgIDx0ZXh0YXJlYSBhdXRvRm9jdXMgdmFsdWU9e2Rlc2NyaXB0aW9ufSBkaXNhYmxlZD17cmVhZE9ubHl9IG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHtkZXNjcmlwdGlvbjogZXYudGFyZ2V0LnZhbHVlfSl9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLXRhYmxlXCI+XG4gICAgICAgICAgPGRpdj5Gw6RyZzo8L2Rpdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPHNlbGVjdCB2YWx1ZT17Y29sb3J9IGRpc2FibGVkPXtyZWFkT25seX0gb25DaGFuZ2U9e2V2ID0+IHRoaXMuc2V0U3RhdGUoe2NvbG9yOiBldi50YXJnZXQudmFsdWV9KX0+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJ5ZWxsb3dcIj5HdWw8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInllbGxvd0xpZ2h0XCI+TGp1c2d1bDwvb3B0aW9uPlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiY3lhblwiPkdyw7ZuPC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJjeWFuTGlnaHRcIj5ManVzZ3LDtm48L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInB1cnBsZVwiPkxpbGE8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInB1cnBsZUxpZ2h0XCI+TGp1c2xpbGE8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInJlZFwiPlLDtmQ8L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cInJlZExpZ2h0XCI+Um9zYTwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2PlxuICAgICAgICB7cmVhZE9ubHkgP1xuICAgICAgICAgIDxidXR0b24gdGFiSW5kZXg9ezF9IGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2UgYnRuLWRlZmF1bHRcIiBvbkNsaWNrPXsoKT0+dGhpcy5wcm9wcy5jbG9zZURpYWxvZygpfT5BdmJyeXQ8L2J1dHRvbj4gOlxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8YnV0dG9uIHRhYkluZGV4PXsxfSBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlIGJ0bi1kZWZhdWx0XCIgb25DbGljaz17KCk9PnRoaXMuc2F2ZSgpfT5TcGFyYTwvYnV0dG9uPlxuICAgICAgICAgICAge25vdGUgJiYgPGEgdGFiSW5kZXg9ezF9IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9eygpPT50aGlzLmRlbGV0ZSgpfT5UYSBib3J0PC9hPn1cbiAgICAgICAgICA8Lz5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8vaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgRURTQ291cnNlLCBFRFNTdHVkeVBsYW4gfSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7IEVEU1BlcmlvZCB9IGZyb20gJy4uLy4uL2FwaXMvZWRzY2xpZW50JztcbmltcG9ydCB7IGdldFNjaG9vbE1vbWVudCwgZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSwgZ2V0VGVybVN0YXJ0QW5kRW5kIH0gZnJvbSAnLi4vLi4vdXRpbHMvc2Nob29sLW1vbWVudCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XG5pbXBvcnQgeyBLR1Rlcm1QbGFubmVyV2Vla1BsYW4sIEtHVGVybVBsYW5uZXJXZWVrUGxhbkVudHJ5IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgRGlhbG9ncyB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy9kaWFsb2dzJztcbmltcG9ydCB7IFdlZWtOb3RlRGlhbG9nIH0gZnJvbSAnLi93ZWVrLW5vdGUtZGlhbG9nJztcbmltcG9ydCB7IEtHVGVybVBsYW5uZXJSZXBvIH0gZnJvbSAnLi4vLi4vcmVwb3Mva2ctdGVybXBsYW5uZXItcmVwbyc7XG5pbXBvcnQgeyBkaXN0aW5jdCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IEtFRFdlZWsgfSBmcm9tICcuLi8uLi91dGlscy93ZWVrdXRpbCc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmltcG9ydCB7IEVudiB9IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGVudjogRW52O1xuICB0dXRvcmVkOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBub3c6IERhdGUsXG4gIGNvdXJzZXM6IEVEU0NvdXJzZVtdO1xuICB3ZWVrUGxhbnM6IEtHVGVybVBsYW5uZXJXZWVrUGxhbltdO1xuICBpc0xvYWRpbmdDb3Vyc2VzOiBib29sZWFuO1xuICBpc0xvYWRpbmdXZWVrUGxhbnM6IGJvb2xlYW47XG4gIGRpYWxvZ3M6IGFueVtdO1xuICAvL2dvYWxzOiBFRFNTdHVkeVBsYW5bXTtcbn1cblxuZXhwb3J0IGNsYXNzIEtHVGVybVBsYW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBub3csXG4gICAgICBjb3Vyc2VzOiBbXSxcbiAgICAgIHdlZWtQbGFuczogW10sXG4gICAgICBpc0xvYWRpbmdDb3Vyc2VzOiB0cnVlLFxuICAgICAgaXNMb2FkaW5nV2Vla1BsYW5zOiB0cnVlLFxuICAgICAgZGlhbG9nczogW11cbiAgICAgIC8vZ29hbHM6IFtdXG4gICAgfVxuICAgIHRoaXMudXBkYXRlV2Vla1BsYW5zID0gdGhpcy51cGRhdGVXZWVrUGxhbnMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubG9hZEVEU0NvdXJzZXMoKTtcbiAgICB0aGlzLnByb3BzLmVudi5rZ1Rlcm1QbGFubmVyUmVwby5tZW0uc3Vic2NyaWJlKHRoaXMudXBkYXRlV2Vla1BsYW5zKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMucHJvcHMuZW52LmtnVGVybVBsYW5uZXJSZXBvLm1lbS51bnN1YnNjcmliZSh0aGlzLnVwZGF0ZVdlZWtQbGFucyk7XG4gIH1cblxuICB1cGRhdGVXZWVrUGxhbnMod2Vla1BsYW5zOiBLR1Rlcm1QbGFubmVyV2Vla1BsYW5bXSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe3dlZWtQbGFucywgaXNMb2FkaW5nV2Vla1BsYW5zOiBmYWxzZX0pO1xuICB9XG5cbiAgYXN5bmMgbG9hZEVEU0NvdXJzZXMoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNjaG9vbE1vbWVudCA9IGdldFNjaG9vbE1vbWVudChtb21lbnQodGhpcy5zdGF0ZS5ub3cpKTtcbiAgICAgIGNvbnN0IHBlcmlvZE5hbWUgPSBuZXcgRURTUGVyaW9kKHNjaG9vbE1vbWVudCkucGVyaW9kO1xuICAgICAgY29uc3QgY291cnNlcyA9IGRpc3RpbmN0KGF3YWl0IHRoaXMucHJvcHMuZW52LmVkc0NsaWVudC5nZXRBY3RpdmVDb3Vyc2VzKHtwZXJpb2ROYW1lfSksIGNvdXJzZSA9PiBjb3Vyc2UubmFtZSk7XG4gICAgICAvL2NvbnNvbGUubG9nKFwiY291cnNlczpcIiArIEpTT04uc3RyaW5naWZ5KGNvdXJzZXMsIG51bGwsIDIpKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjb3Vyc2VzIH0pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkaW5nQ291cnNlczogZmFsc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgb25Ob3RlQ2xpY2sod2Vla051bWJlcjogbnVtYmVyLCB3ZWVrRGF0ZTogbnVtYmVyLCBjb3Vyc2VOYW1lOiBzdHJpbmcsIHdlZWtQbGFuPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuLCBub3RlPzogS0dUZXJtUGxhbm5lcldlZWtQbGFuRW50cnkpIHtcbiAgICB0aGlzLm9wZW5EaWFsb2coPFdlZWtOb3RlRGlhbG9nXG4gICAgICB3ZWVrTnVtYmVyPXt3ZWVrTnVtYmVyfVxuICAgICAgd2Vla0RhdGU9e3dlZWtEYXRlfVxuICAgICAgY291cnNlTmFtZT17Y291cnNlTmFtZX1cbiAgICAgIHdlZWtQbGFuPXt3ZWVrUGxhbn1cbiAgICAgIG5vdGU9e25vdGV9XG4gICAgICBlbnY9e3RoaXMucHJvcHMuZW52fVxuICAgICAgY2xvc2VEaWFsb2c9eygpPT50aGlzLmNsb3NlRGlhbG9nKCl9IC8+KTtcbiAgfVxuXG4gIG9wZW5EaWFsb2coZGlhbG9nKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGRpYWxvZ3M6IFsuLi50aGlzLnN0YXRlLmRpYWxvZ3MsIGRpYWxvZ10gfSk7XG4gIH1cblxuICBjbG9zZURpYWxvZygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogdGhpcy5zdGF0ZS5kaWFsb2dzLnNsaWNlKDAsIHRoaXMuc3RhdGUuZGlhbG9ncy5sZW5ndGggLSAxKSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvdXJzZXMsIG5vdywgaXNMb2FkaW5nQ291cnNlcywgaXNMb2FkaW5nV2Vla1BsYW5zLCB3ZWVrUGxhbnMsIGRpYWxvZ3MgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgaXNMb2FkaW5nID0gaXNMb2FkaW5nQ291cnNlcyB8fCBpc0xvYWRpbmdXZWVrUGxhbnM7XG5cbiAgICBjb25zdCB3ZWVrczogeyB3ZWVrTnVtYmVyOiBudW1iZXIsIHdlZWtEYXRlOiBudW1iZXIsIHdlZWtQbGFuOiBLR1Rlcm1QbGFubmVyV2Vla1BsYW4gfVtdID0gW107XG4gICAgY29uc3Qgc2Nob29sTW9tZW50ID0gZ2V0U2Nob29sTW9tZW50KG1vbWVudChub3cpKTtcbiAgICBjb25zdCBbdGVybVN0YXJ0LCB0ZXJtRW5kXSA9IGdldFRlcm1TdGFydEFuZEVuZChtb21lbnQobm93KSk7XG4gICAgY29uc3QgW2ZpcnN0V2VlaywgbGFzdFdlZWtdID0gZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybShzY2hvb2xNb21lbnQudGVybSk7XG5cbiAgICBmb3IgKGxldCB3ZWVrTW9tZW50ID0gdGVybVN0YXJ0LmNsb25lKCkuc3RhcnRPZignd2VlaycpO1xuICAgICAgd2Vla01vbWVudC52YWx1ZU9mKCkgPCB0ZXJtRW5kLnZhbHVlT2YoKTtcbiAgICAgIHdlZWtNb21lbnQgPSB3ZWVrTW9tZW50LmNsb25lKCkuYWRkKDEsICd3ZWVrJykuc3RhcnRPZignd2VlaycpKVxuICAgIHtcbiAgICAgIGNvbnN0IHdlZWtOdW1iZXIgPSB3ZWVrTW9tZW50LndlZWsoKTtcbiAgICAgIGNvbnN0IGtlZFdlZWsgPSBLRURXZWVrKHdlZWtNb21lbnQueWVhcigpLCB3ZWVrTnVtYmVyKTtcbiAgICAgIGlmICh3ZWVrTnVtYmVyID49IGZpcnN0V2VlayAmJiB3ZWVrTnVtYmVyIDw9IGxhc3RXZWVrKSB7XG4gICAgICAgIGNvbnN0IHdlZWtQbGFuID0gd2Vla1BsYW5zLmZpbHRlcih3cCA9PlxuICAgICAgICAgIHdwLmRhdGVUaW1lID49IGtlZFdlZWsubm90QmVmb3JlICYmXG4gICAgICAgICAgd3AuZGF0ZVRpbWUgPD0ga2VkV2Vlay5ub3RBZnRlcilbMF07XG5cbiAgICAgICAgd2Vla3MucHVzaCh7XG4gICAgICAgICAgd2Vla051bWJlcixcbiAgICAgICAgICB3ZWVrRGF0ZTogd2Vla01vbWVudC5jbG9uZSgpLnN0YXJ0T2YoJ3dlZWsnKS52YWx1ZU9mKCksXG4gICAgICAgICAgd2Vla1BsYW5cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkIHRlcm1QbGFuQ29udGFpbmVyXCI+XG4gICAgICA8aDQ+XG4gICAgICAgIFRlcm1pbnNwbGFuZXJpbmdcbiAgICAgICA8L2g0PlxuICAgICAgPGhyIC8+XG4gICAgICB7aXNMb2FkaW5nID9cbiAgICAgICAgPFNwaW5uZXIgLz4gOiBjb3Vyc2VzLmxlbmd0aCA9PT0gMCA/IDxkaXY+XG4gICAgICAgICAgVGVybWluc3BsYW5lcmFyZW4gYWt0aXZlcmFzIG7DpHIgZHUgc2tyaXZpdHMgaW4gcMOlIGRpbmEga3Vyc2VyXG4gICAgICAgICAgPC9kaXY+IDogPHRhYmxlIGNsYXNzTmFtZT1cInNtYWxsRm9udFwiPlxuICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cIm5vd3JhcFwiPlZlY2thPC90aD5cbiAgICAgICAgICAgICAgICB7Lypnb2Fscy5tYXAoKHtjb3Vyc2VVbml0SWQsIGNvdXJzZVVuaXROYW1lfSkgPT5cbiAgICAgICAgICAgICAgICAgIDx0aCBrZXk9e2NvdXJzZVVuaXRJZH0gY2xhc3NOYW1lPVwidGVybUNvdXJzZUhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRlcm1Db3Vyc2VUZXh0XCI+e2NvdXJzZVVuaXROYW1lfTwvZGl2PjwvdGg+KSovfVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGNvdXJzZXMubWFwKChjLCBpZHgpID0+IDx0aCBrZXk9e2lkeH0gY2xhc3NOYW1lPVwidGVybUNvdXJzZUhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRlcm1Db3Vyc2VUZXh0XCI+e2MubmFtZX08L2Rpdj48L3RoPilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICB7d2Vla3MubWFwKCh3LCBpZHgpID0+IFxuICAgICAgICAgICAgICAgIDx0ciBrZXk9e2lkeH0gY2xhc3NOYW1lPXtpZHggJSAyICYmICd0YWJsZU9kZCd9PlxuICAgICAgICAgICAgICAgICAgPHRkPnt3LndlZWtOdW1iZXJ9PC90ZD5cbiAgICAgICAgICAgICAgICAgIHtjb3Vyc2VzLm1hcCgoYyxpZHgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90ZSA9IHcud2Vla1BsYW4gJiYgdy53ZWVrUGxhbi5wbGFuc1tjLm5hbWVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPHRkXG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtpZHh9XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY291cnNlTm90ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGU9e25vdGUgJiYgbm90ZS5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+dGhpcy5vbk5vdGVDbGljayh3LndlZWtOdW1iZXIsIHcud2Vla0RhdGUsIGMubmFtZSwgdy53ZWVrUGxhbiwgbm90ZSl9PlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YG5vdGUke25vdGUgPyBgIG5vdGVkIG5vdGUtY29sb3ItJHtub3RlLmNvbG9yfWAgOiAnJ31gfVxuICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+fVxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDx0Zm9vdD5cbiAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgIDx0aCBrZXk9XCJwb2ludHNcIj5Qb8Okbmc8L3RoPlxuICAgICAgICAgICAgICAgIHtjb3Vyc2VzLm1hcCgoYywgaWR4KSA9PiA8dGgga2V5PXtpZHh9IGNsYXNzTmFtZT1cInN0ZXBDZWxsXCI+e2MuY3JlZGl0c308L3RoPil9XG4gICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGg+QmV0eWdzbcOlbDwvdGg+XG4gICAgICAgICAgICAgICAgey8qZ29hbHMubWFwKGcgPT5cbiAgICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwic3RlcENlbGxcIj57Zy5wZXJpb2RHb2Fscy5maWx0ZXIocGcgPT4gcGcucGVyaW9kTmFtZSA9PT0gIHBlcmlvZC5wZXJpb2QpXG4gICAgICAgICAgICAgICAgICAubWFwKHBnPT5wZy5ncmFkZU5hbWUpWzBdIHx8IGcuZmluYWxHb2FsR3JhZGV9PC90aD4pKi99XG4gICAgICAgICAgICAgICAge2NvdXJzZXMubWFwKChjLCBpZHgpID0+XG4gICAgICAgICAgICAgICAgICA8dGgga2V5PXtpZHh9IGNsYXNzTmFtZT1cInN0ZXBDZWxsXCI+e2MucGVyaW9kR29hbEdyYWRlfTwvdGg+KX1cbiAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIDwvdGZvb3Q+XG4gICAgICAgICAgPC90YWJsZT59XG4gICAgICAgICAgPERpYWxvZ3NcbiAgICAgICAgZGlhbG9ncz17ZGlhbG9nc31cbiAgICAgICAgcG9wRGlhbG9nPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgZGlhbG9nczogZGlhbG9ncy5zbGljZSgwLCBkaWFsb2dzLmxlbmd0aCAtIDEpIH0pfSAvPlxuICAgICAgICAgIFxuICAgIDwvZGl2PlxuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtLR1Rlcm1QbGFubmVyfSBmcm9tICcuL2tnLXRlcm1wbGFubmVyJztcbmltcG9ydCB7IFR1dG9yYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy90dXRvcmFibGUtY29tcG9uZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIEtHVGVybVBsYW5uZXJUdXRvcmVkICgpIHtcbiAgcmV0dXJuIDxUdXRvcmFibGVDb21wb25lbnRcbiAgICB0dXRvcmVkPXt0cnVlfVxuICAgIGNyZWF0ZUNvbXBvbmVudD17ZW52ID0+XG4gICAgICA8S0dUZXJtUGxhbm5lclxuICAgICAgICBrZXk9e2Vudi5jdXJyZW50VXNlci5tYWlsfVxuICAgICAgICBlbnY9e2Vudn1cbiAgICAgICAgdHV0b3JlZD17dHJ1ZX0gLz5cbiAgICB9XG4gIC8+O1xufVxuIiwiaW1wb3J0IHtLZWRSZXBvfSBmcm9tICcuL2tlZC1yZXBvJztcbmltcG9ydCB7IEtHVGVybVBsYW5uZXJXZWVrUGxhbiB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IGdldFRlcm1TdGFydEFuZEVuZCB9IGZyb20gJy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5cbmV4cG9ydCBjbGFzcyBLR1Rlcm1QbGFubmVyUmVwbyBleHRlbmRzIEtlZFJlcG88S0dUZXJtUGxhbm5lcldlZWtQbGFuPiB7XG4gIGNvbnN0cnVjdG9yKGdldENsaWVudDogKCk9PktlZEJhY2tlbmRDbGllbnQsIGdldEN1cnJlbnRVc2VyOiAoKT0+VXNlcikge1xuICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gZ2V0Q3VycmVudFVzZXIoKTtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGNvbnN0IFt0ZXJtU3RhcnQsIHRlcm1FbmRdID0gZ2V0VGVybVN0YXJ0QW5kRW5kKG1vbWVudChub3cpKTtcbiAgICBzdXBlcih7XG4gICAgICBnZXRDbGllbnQsXG4gICAgICBvcHRpbWlzdGljOiB0cnVlLFxuICAgICAgdGFibGU6IFwid2Vla3BsYW5zXCIsXG4gICAgICB1c2VyOiBjdXJyZW50VXNlciA/IGN1cnJlbnRVc2VyLm1haWwgOiBcIlwiLFxuICAgICAgZ2V0UXVlcnlPcHRpb25zOiBhc3luYyAoKT0+e1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGZyb206IHRlcm1TdGFydC52YWx1ZU9mKCksXG4gICAgICAgICAgdG86IHRlcm1FbmQudmFsdWVPZigpLFxuICAgICAgICAgIHJvbGU6IFwiVVNFUlwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgdGVybVBsYW5uZXJSZXBvID0gbmV3IEtHVGVybVBsYW5uZXJSZXBvKCgpPT5lbnYua2VkQmFja2VuZENsaWVudCwoKT0+ZW52LmN1cnJlbnRVc2VyKTtcbmVudi5rZ1Rlcm1QbGFubmVyUmVwbyA9IHRlcm1QbGFubmVyUmVwbztcbiIsImltcG9ydCBlbnYsIHsgRW52IH0gZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQgeyBCZWFyZXJUb2tlbkluZm8sIEtlZEJhY2tlbmRDbGllbnQsIEh0dHBFcnJvciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IEVkc0NsaWVudCB9IGZyb20gJy4uL2FwaXMvZWRzY2xpZW50JztcbmltcG9ydCB7IGlzb21vcnBoaWMsIEtlZEJhY2tlbmRDbGllbnRXZWIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudHdlYic7XG5pbXBvcnQgeyBLU1Rlcm1QbGFubmVyUmVwbyB9IGZyb20gJy4uL3JlcG9zL2tzLXRlcm1wbGFubmVyLXJlcG8nO1xuaW1wb3J0IHsgS0dUZXJtUGxhbm5lclJlcG8gfSBmcm9tICcuLi9yZXBvcy9rZy10ZXJtcGxhbm5lci1yZXBvJztcbmltcG9ydCB7IFVzZXJUYXNrc1JlcG8gfSBmcm9tICcuLi9yZXBvcy91c2VyLXRhc2tzLXJlcG8nO1xuaW1wb3J0IHsgUmVzdENsaWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcXVlc3RUdXRvcmVkVG9rZW5zKHVzZXJFbWFpbDogc3RyaW5nLCBkaXNwbGF5TmFtZTogc3RyaW5nKTogUHJvbWlzZTxFbnY+IHtcbiAgLy9sZXQgYmVhcmVyUHJvbWlzZTogUHJvbWlzZTxCZWFyZXJUb2tlbkluZm8+IHwgbnVsbCA9IG51bGw7XG4gIC8vbGV0IGdvb2dsZUJlYXJlclByb21pc2U6IFByb21pc2U8QmVhcmVyVG9rZW5JbmZvPiB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0IGN1cnJlbnRVc2VyOiBVc2VyID0ge1xuICAgIG1haWw6IHVzZXJFbWFpbCxcbiAgICBkaXNwbGF5TmFtZSxcbiAgICByb2xlczogW1wiVVNFUlwiXSxcbiAgICBzY2hvb2w6IGVudi5jdXJyZW50VXNlci5zY2hvb2wsXG4gICAgdHV0b3JGb3I6IHVzZXJFbWFpbFxuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUJlYXJlclByb3ZpZGVyIChjbGllbnQ6IFJlc3RDbGllbnQsIHRva2VuVXJsOiBzdHJpbmcsIHF1ZXJ5Pykge1xuICAgIGxldCBiZWFyZXJQcm9taXNlOiBQcm9taXNlPEJlYXJlclRva2VuSW5mbz4gfCBudWxsID0gbnVsbDtcblxuICAgIHJldHVybiB7XG4gICAgICBnZXRCZWFyZXIoKTogUHJvbWlzZTxCZWFyZXJUb2tlbkluZm8+IHtcbiAgICAgICAgcmV0dXJuIGJlYXJlclByb21pc2UgfHwgdGhpcy5yZWZyZXNoQmVhcmVyKCk7XG4gICAgICB9LFxuICAgICAgcmVmcmVzaEJlYXJlcigpOiBQcm9taXNlPEJlYXJlclRva2VuSW5mbz4ge1xuICAgICAgICByZXR1cm4gKGJlYXJlclByb21pc2UgPSByZXRyaWV2ZVRva2VuKCkpO1xuICAgICAgfSxcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiByZXRyaWV2ZVRva2VuKCk6IFByb21pc2U8QmVhcmVyVG9rZW5JbmZvPiB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBjbGllbnQuZ2V0KHRva2VuVXJsLCBxdWVyeSk7XG4gICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgIHJldHVybiAoYXdhaXQgcmVzLmpzb24oKSkgYXMgQmVhcmVyVG9rZW5JbmZvO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLFxuICAgICAgICBcIkNvdWxkIG5vdCByZXRyaWV2ZSB0dXRvciB0b2tlbiBmb3IgXCIgK1xuICAgICAgICB1c2VyRW1haWwgK1xuICAgICAgICBcIi4gRXJyb3IgTWVzc2FnZTogXCIgKyBhd2FpdCByZXMudGV4dCgpKTtcbiAgICB9XG4gIH1cblxuICAvLyBUaGUgbWFpbiBiZWFyZXJwcm92aWRlciB3aWxsIHJlcXVlc3QgYSB0dXRvci10b2tlbiBiYXNlZCBvbiB0aGUgdXNlcidzIG5vcm1hbCB0b2tlbi5cbiAgY29uc3QgYmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVCZWFyZXJQcm92aWRlcihlbnYua2VkQmFja2VuZENsaWVudC5odHRwLCBcInR1dG9yL3Rva2VuXCIsIHt1c2VyRW1haWx9KTtcbiAgY29uc3QgdHV0b3JlZEtlZEJhY2tlbmRDbGllbnQgPSBuZXcgS2VkQmFja2VuZENsaWVudChpc29tb3JwaGljLCBiZWFyZXJQcm92aWRlciwgY2ZnLktFRF9BUElfVVJMKTtcbiAgLy8gTm93LCBjcmVhdGUgYmVhcmVyIHByb3ZpZGVycyBmb3IgRURTIGFuZCBHb29nbGUgdGhhdCBnZW5lcmF0ZXMgdG9rZW4gYnkgY29udmVydGluZyB0aGUgdHV0b3ItdG9rZW5cbiAgLy8gdG8gYW4gRURTLSBvciBHb29nbGUgdG9rZW46XG4gIC8vY29uc3QgZWRzQmVhcmVyUHJvdmlkZXIgPSBjcmVhdGVCZWFyZXJQcm92aWRlcih0dXRvcmVkS2VkQmFja2VuZENsaWVudC5odHRwLCBcInR1dG9yL2NvbnZlcnQtdG9rZW4vZWRzXCIpO1xuICBjb25zdCBnb29nbGVUb2tlblByb3ZpZGVyID0gY3JlYXRlQmVhcmVyUHJvdmlkZXIodHV0b3JlZEtlZEJhY2tlbmRDbGllbnQuaHR0cCwgXCJ0dXRvci9jb252ZXJ0LXRva2VuL2dvb2dsZVwiKTtcblxuICBjb25zdCBlZHNDbGllbnQgPSBuZXcgRWRzQ2xpZW50KGlzb21vcnBoaWMsIGNmZy5FRFNfQVBJX1VSTCwgYmVhcmVyUHJvdmlkZXIsICgpPT51c2VyRW1haWwpO1xuICBcbiAgY29uc3QgdHV0b3JFbnY6IEVudiA9IHtcbiAgICBjdXJyZW50VXNlcixcbiAgICBiZWFyZXJQcm92aWRlcixcbiAgICBlZHNDbGllbnQsXG4gICAgZ29vZ2xlVG9rZW5Qcm92aWRlcixcbiAgICBrZWRCYWNrZW5kQ2xpZW50OiB0dXRvcmVkS2VkQmFja2VuZENsaWVudCxcbiAgICB0dXRvcmVkOiB0cnVlXG4gIH07XG4gIHR1dG9yRW52LmtzVGVybVBsYW5uZXJSZXBvID0gbmV3IEtTVGVybVBsYW5uZXJSZXBvKCgpPT50dXRvcmVkS2VkQmFja2VuZENsaWVudCwgKCk9PmN1cnJlbnRVc2VyKTtcbiAgdHV0b3JFbnYua2dUZXJtUGxhbm5lclJlcG8gPSBuZXcgS0dUZXJtUGxhbm5lclJlcG8oKCk9PnR1dG9yZWRLZWRCYWNrZW5kQ2xpZW50LCAoKT0+Y3VycmVudFVzZXIpO1xuICB0dXRvckVudi51c2VyVGFza3NSZXBvID0gbmV3IFVzZXJUYXNrc1JlcG8oKCk9PnR1dG9yZWRLZWRCYWNrZW5kQ2xpZW50LCAoKT0+Y3VycmVudFVzZXIpO1xuXG4gIGF3YWl0IGJlYXJlclByb3ZpZGVyLmdldEJlYXJlcigpLmNhdGNoKGVycm9yID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHR1dG9yRW52OyAgXG59XG4iLCJpbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRURTU3R1ZGVudCB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IHsgY29tcGFyZVByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xuaW1wb3J0IHR1dG9yRW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELnR1dG9yRW52JztcbmltcG9ydCB7cmVxdWVzdFR1dG9yZWRUb2tlbnN9IGZyb20gJy4uLy4uL3V0aWxzL3JlcXVlc3QtdHV0b3JlZC10b2tlbnMnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcblxuaW50ZXJmYWNlIFN0dWRlbnRJbmZvIHtcbiAgbWFpbDogc3RyaW5nO1xuICBkaXNwbGF5TmFtZTogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuXG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgc3R1ZGVudHM6IFN0dWRlbnRJbmZvW107XG59XG5cbmV4cG9ydCBjbGFzcyBUdXRvcnNTZWxlY3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG5cbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgc3R1ZGVudHM6IFtdXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5sb2FkKCk7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBlZHNTdHVkZW50cyA9IGF3YWl0IGVudi5lZHNDbGllbnQuZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMoKTtcbiAgICAgIGVkc1N0dWRlbnRzLnNvcnQoY29tcGFyZVByb3BzKFtcImxhc3ROYW1lXCIsIFwiZmlyc3ROYW1lXCJdKSk7XG4gICAgICBjb25zdCBzdHVkZW50cyA9IGVkc1N0dWRlbnRzLmxlbmd0aCA+IDAgP1xuICAgICAgICBlZHNTdHVkZW50cy5tYXAoKHtlbWFpbCwgZmlyc3ROYW1lLCBsYXN0TmFtZX0pPT4oe1xuICAgICAgICAgIG1haWw6IGVtYWlsLFxuICAgICAgICAgIGRpc3BsYXlOYW1lOiBgJHtmaXJzdE5hbWV9ICR7bGFzdE5hbWV9YFxuICAgICAgICB9KSkgOlxuICAgICAgICBbZW52LmN1cnJlbnRVc2VyXTtcbiAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGUoe3N0dWRlbnRzfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgbGlzdCB0dXRvciBzdHVkZW50c1wiLCBlcnJvcik7XG4gICAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtzdHVkZW50czogW2Vudi5jdXJyZW50VXNlcl19KVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtpc0xvYWRpbmc6IGZhbHNlfSk7XG4gICAgfVxuICB9XG5cbiAgb25TZWxlY3RVc2VyKGVtYWlsOiBzdHJpbmcpIHtcbiAgICBjb25zdCBjaG9vc2VuU3R1ZGVudCA9IHRoaXMuc3RhdGUuc3R1ZGVudHMuZmlsdGVyKHMgPT4gcy5tYWlsID09PSBlbWFpbClbMF07XG4gICAgY29uc3QgdXNlcjogVXNlciA9IHtcbiAgICAgIC4uLmNob29zZW5TdHVkZW50LFxuICAgICAgcm9sZXM6IFtcIlVTRVJcIl0sXG5cbiAgICB9XG4gICAgXG4gICAgdHV0b3JFbnYuc2V0TmV3RW52KHVzZXIsICgpPT5yZXF1ZXN0VHV0b3JlZFRva2VucyhlbWFpbCwgZW1haWwpKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtpc0xvYWRpbmcsIHN0dWRlbnRzfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKGlzTG9hZGluZykgcmV0dXJuIDxTcGlubmVyIC8+O1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwidHV0b3JzLXNlbGVjdFwiPlxuICAgICAgPHNlbGVjdCBvbkNoYW5nZT17ZXYgPT4gZXYudGFyZ2V0LnZhbHVlICYmIHRoaXMub25TZWxlY3RVc2VyKGV2LnRhcmdldC52YWx1ZSl9PlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+VsOkbGogZWxldjwvb3B0aW9uPlxuICAgICAgICB7c3R1ZGVudHMubWFwKHN0dWRlbnQgPT5cbiAgICAgICAgICA8b3B0aW9uIGtleT17c3R1ZGVudC5tYWlsfSB2YWx1ZT17c3R1ZGVudC5tYWlsfT5cbiAgICAgICAgICAgIHtzdHVkZW50LmRpc3BsYXlOYW1lfSAoe3N0dWRlbnQubWFpbH0pXG4gICAgICAgICAgPC9vcHRpb24+KX1cbiAgICAgIDwvc2VsZWN0PlxuICAgIDwvZGl2PjtcbiAgfVxufVxuIiwiaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuXG5jZmcuS0VEX0xPQ0FMRSA9ICdzdic7XG5jZmcuS0VEX1NDSE9PTF9MT0NBTEUgPSAnc3YnO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IEVEU0Fzc2Vzc21lbnQgfSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgbGltaXQ/OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGxvYWRpbmc6IGJvb2xlYW4sXG4gIGFzc2Vzc21lbnRzOiBFRFNBc3Nlc3NtZW50W10sXG4gIGVycm9yOiBzdHJpbmcgfCBudWxsXG59XG5cbmV4cG9ydCBjbGFzcyBMYXRlc3RBc3Nlc3NtZW50cyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBhc3Nlc3NtZW50czogW10sXG4gICAgICBlcnJvcjogbnVsbCxcbiAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMubG9hZCgpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtsb2FkaW5nOiB0cnVlfSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFzc2Vzc21lbnRzID0gYXdhaXQgZW52LmVkc0NsaWVudC5nZXRMYXRlc3RBc3Nlc3NtZW50cyh0aGlzLnByb3BzLmxpbWl0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2Fzc2Vzc21lbnRzfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yfSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe2xvYWRpbmc6IGZhbHNlfSk7ICAgIFxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGhhc0dyYWRlcyA9IHRoaXMuc3RhdGUuYXNzZXNzbWVudHMuc29tZShhID0+ICEhYS5ncmFkZU5hbWUpO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3ZWVrU2VsZWN0XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW1cIj5cblxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxuXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxoND57TGBTZW5hc3RlIGJlZMO2bW5pbmdhcmB9PC9oND5cbiAgICAgIDxociAvPlxuICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInNtYWxsRm9udFwiPlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cIm5vd3JhcFwiPntMYERhdHVtYH08L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cIm5vd3JhcFwiPntMYEt1cnNgfTwvdGg+XG4gICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwibm93cmFwXCI+e0xgRGVsYH08L3RoPlxuICAgICAgICAgICAge2hhc0dyYWRlcyAmJiA8dGggY2xhc3NOYW1lPVwibm93cmFwXCI+e0xgQmV0eWdgfTwvdGg+fVxuICAgICAgICAgICAgPHRoIGNsYXNzTmFtZT1cIm5vd3JhcFwiIGNvbFNwYW49ezJ9PntMYEJlZMO2bW5pbmdhcmB9PC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuXG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICB7dGhpcy5zdGF0ZS5hc3Nlc3NtZW50cy5tYXAoKGEsIGkpID0+IFxuICAgICAgICAgICAgPHRyIGtleT17aX0gY2xhc3NOYW1lPXtpICUgMiAmJiBcInRhYmxlT2RkXCJ9PlxuICAgICAgICAgICAgICA8dGQ+e2EucHVibGlzaERhdGVUaW1lLnN1YnN0cigwLCAxMCl9PC90ZD5cbiAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImFtbmVDZWxsXCI+e2EuY291cnNlTmFtZX08L3RkPlxuICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZGVsQ2VsbFwiPnthLmNvdXJzZVVuaXROYW1lfTwvdGQ+XG4gICAgICAgICAgICAgIHtoYXNHcmFkZXMgJiYgPHRkPnthLmdyYWRlTmFtZX08L3RkPn1cbiAgICAgICAgICAgICAgPHRkPjxwcmU+e2EudGV4dH08L3ByZT48L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICApfVxuICAgICAgICA8L3Rib2R5PjwvdGFibGU+XG4gICAgPC9kaXY+O1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0tHVGVybVBsYW5uZXJ9IGZyb20gJy4va2ctdGVybXBsYW5uZXInO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuXG5leHBvcnQgZnVuY3Rpb24gS0dUZXJtUGxhbm5lclNlbGYgKCkge1xuICByZXR1cm4gPEtHVGVybVBsYW5uZXIgZW52PXtlbnZ9IHR1dG9yZWQ9e2ZhbHNlfSAvPjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7S1NUZXJtUGxhbm5lcn0gZnJvbSAnLi90ZXJtcGxhbm5lcic7XG5pbXBvcnQgeyBUdXRvcmFibGVDb21wb25lbnQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvdHV0b3JhYmxlLWNvbXBvbmVudCc7XG5pbXBvcnQgeyBJbmplY3RlZEludGxQcm9wcyB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgTGFuZ3VhZ2VDb250ZXh0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XG5cbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIEluamVjdGVkSW50bFByb3Bze1xuICB2aWV3Q291cnNlVXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBLU1Rlcm1QbGFubmVyVHV0b3JlZCAocHJvcHM6IFByb3BzKSB7XG4gIGNvbnN0IHtpbnRsfSA9IHByb3BzO1xuICByZXR1cm4gPExhbmd1YWdlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e2ludGx9fT5cbiAgPFR1dG9yYWJsZUNvbXBvbmVudFxuICAgIHR1dG9yZWQ9e3RydWV9XG4gICAgY3JlYXRlQ29tcG9uZW50PXtlbnYgPT5cbiAgICAgIDxLU1Rlcm1QbGFubmVyXG4gICAgICAgIGtleT17ZW52LmN1cnJlbnRVc2VyLm1haWx9XG4gICAgICAgIGVudj17ZW52fVxuICAgICAgICB0dXRvcmVkPXt0cnVlfSBcbiAgICAgICAgaW5pdGlhbERhdGU9e25ldyBEYXRlKCl9Lz5cbiAgICB9XG4gIC8+PC9MYW5ndWFnZUNvbnRleHQuUHJvdmlkZXI+O1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ291cnNlLCBVc2VySGlkZGVuQ291cnNlLCBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBoaWRkZW5Db3Vyc2VzUmVwbywgQ291cnNlV2l0aEhpZGRlblN0YXRlIH0gZnJvbSAnLi4vLi4vcmVwb3MvaGlkZGVuLWNvdXJzZXMtcmVwbyc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBmbGF0dGVuLCBjb21wYXJlUHJvcCwgYXJyYXlUb01hcCwgYXJyYXlUb0xvb2t1cCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSAnLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFByb3BzIHtcbiAgdmlld0NvdXJzZVVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRlIHtcbiAgY291cnNlczogQ291cnNlV2l0aEhpZGRlblN0YXRlW107XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgZXJyb3I/OiBFcnJvcjtcbn1cblxuZXhwb3J0IGNsYXNzIE15Q291cnNlcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjb3Vyc2VzOiBbXSxcbiAgICAgIGlzTG9hZGluZzogdHJ1ZVxuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUhpZGRlbkNvdXJzZXNTdGF0ZSA9IHRoaXMudXBkYXRlSGlkZGVuQ291cnNlc1N0YXRlLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBoaWRkZW5Db3Vyc2VzUmVwby5zdWJzY3JpYmUodGhpcy51cGRhdGVIaWRkZW5Db3Vyc2VzU3RhdGUsIHtmdWxsQ291cnNlOiBmYWxzZX0pO1xuICB9XG5cbiAgdXBkYXRlSGlkZGVuQ291cnNlc1N0YXRlKGNvdXJzZXM6IENvdXJzZVdpdGhIaWRkZW5TdGF0ZVtdKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7Y291cnNlcywgaXNMb2FkaW5nOiBmYWxzZX0pO1xuICB9XG5cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBoaWRkZW5Db3Vyc2VzUmVwby51bnN1YnNjcmliZSh0aGlzLnVwZGF0ZUhpZGRlbkNvdXJzZXNTdGF0ZSk7XG4gIH1cblxuICBnZXRDb3Vyc2VVcmwoY291cnNlSWQ6IHN0cmluZykge1xuICAgIHJldHVybiBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSh0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmwsIHsgY291cnNlSWQgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3ZpZXdDb3Vyc2VVcmx9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7aXNMb2FkaW5nLCBlcnJvciwgY291cnNlcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB2aXNpYmxlQ291cnNlcyA9IHRoaXMuc3RhdGUuY291cnNlcy5maWx0ZXIoYyA9PiBjLnZpc2libGUpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIHtpc0xvYWRpbmcgPyAoXG4gICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImx2bDIgaGVhZGVyXCI+XG4gICAgICAgICAgICA8YT5MYWRkYXIuLi48L2E+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKSA6IGVycm9yID8gKFxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJsdjEyXCI+XG4gICAgICAgICAgICA8YT5LdW5kZSBpbnRlIGxhZGRhIGt1cnNlci48L2E+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgICkgOiAoXG4gICAgICAgICAgdmlzaWJsZUNvdXJzZXMubWFwKCh7bmFtZSwgaWR9KSA9PiAoXG4gICAgICAgICAgICA8bGkga2V5PXtpZH0gY2xhc3NOYW1lPVwibHZsMlwiPlxuICAgICAgICAgICAgICA8YSBocmVmPXt0aGlzLmdldENvdXJzZVVybChpZCl9PntuYW1lfTwvYT5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgKVxuICAgICAgICApKVxuICAgICAgICB9XG5cdFx0XHQ8Lz5cbiAgICApO1xuICB9XG59IiwiaW1wb3J0IHsgS2VkUmVwbyB9IGZyb20gJy4va2VkLXJlcG8nO1xuaW1wb3J0IHsgV2Vla05vdGUgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBjcmVhdGVVVUlELCBEb2N1bWVudEFjY2VzcyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IGdldEFkanVzdGVkV2VlaywgS0VEV2VlayB9IGZyb20gJy4uL3V0aWxzL3dlZWt1dGlsJztcblxuZXhwb3J0IGxldCB3ZWVrTm90ZXNSZXBvID0gZW52LndlZWtOb3Rlc1JlcG8gYXMgV2Vla05vdGVzUmVwbztcblxuZXhwb3J0IGNsYXNzIFdlZWtOb3Rlc1JlcG8gZXh0ZW5kcyBLZWRSZXBvPFdlZWtOb3RlPiB7XG4gIC8qcHJpdmF0ZSBjdXJyZW50V2VlazogbW9tZW50Lk1vbWVudDtcblxuICBnZXRDdXJyZW50V2VlaygpIHtcbiAgICBpZiAoIXRoaXMuY3VycmVudFdlZWspIHtcbiAgICAgIGNvbnN0IHt3ZWVrTWlsbGlzLCBleHBpcmV9ID0gSlNPTi5wYXJzZShzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwid2Vlay1ub3Rlcy13ZWVrXCIpIHx8IFwie31cIikgYXMge3dlZWtNaWxsaXM/OiBudW1iZXIsIGV4cGlyZT86IG51bWJlcn07XG4gICAgICB0aGlzLmN1cnJlbnRXZWVrID0gd2Vla01pbGxpcyAmJiBleHBpcmUgJiYgZXhwaXJlID4gRGF0ZS5ub3coKSA/XG4gICAgICAgIG1vbWVudChuZXcgRGF0ZSh3ZWVrTWlsbGlzKSkgOlxuICAgICAgICBtb21lbnQoKS5zdGFydE9mKCd3ZWVrJykuYWRkKDEsICdkYXlzJyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmN1cnJlbnRXZWVrLmNsb25lKCk7XG4gIH1cblxuICBzZXRDdXJyZW50V2VlayhuZXdXZWVrTW9tZW50OiBtb21lbnQuTW9tZW50KSB7XG4gICAgdGhpcy5jdXJyZW50V2VlayA9IG5ld1dlZWtNb21lbnQ7XG4gICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcIndlZWstbm90ZXMtd2Vla1wiLCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICB3ZWVrTWlsbGlzOiBuZXdXZWVrTW9tZW50LnRvRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgIGV4cGlyZTogbW9tZW50KCkuYWRkKDgsIFwiaG91cnNcIikudG9EYXRlKCkuZ2V0VGltZSgpXG4gICAgfSkpXG4gIH0qL1xuICBcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoe1xuICAgICAgZ2V0Q2xpZW50KCkgeyByZXR1cm4gZW52LmtlZEJhY2tlbmRDbGllbnQ7IH0sXG4gICAgICBvcHRpbWlzdGljOiBmYWxzZSxcbiAgICAgIHRhYmxlOiBcIm5vdGVzXCIsIC8vIFwid2Vlay1ub3Rlc1wiXG4gICAgICB1c2VyOiBlbnYuY3VycmVudFVzZXIgPyBlbnYuY3VycmVudFVzZXIubWFpbCA6IFwiXCIsXG4gICAgICBnZXRRdWVyeU9wdGlvbnM6IGFzeW5jICgpID0+IHtcbiAgICAgICAgLy9jb25zdCB1c2VyRW1haWwgPSBlbnYuY3VycmVudFVzZXIgPyBlbnYuY3VycmVudFVzZXIubWFpbCA6IFwiXCI7XG4gICAgICAgIC8vY29uc3QgY3VycmVudFdlZWsgPSB0aGlzLmdldEN1cnJlbnRXZWVrKCk7XG4gICAgICAgIC8vY29uc3Qgd2Vla051bWJlciA9IGN1cnJlbnRXZWVrLndlZWsoKTtcbiAgICAgICAgLy9jb25zdCBrZWRXZWVrID0gS0VEV2VlayhjdXJyZW50V2Vlay55ZWFyKCksIHdlZWtOdW1iZXIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC8vZnJvbToga2VkV2Vlay5ub3RCZWZvcmUsXG4gICAgICAgICAgLy90bzoga2VkV2Vlay5ub3RBZnRlcixcbiAgICAgICAgICByb2xlOiBcIlVTRVJcIlxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICAgIC8vdGhpcy5jdXJyZW50V2VlayA9IG51bGw7XG4gIH1cblxuICAvKmFzeW5jIGNoYW5nZVdlZWsod2Vla3NUb0FkZDogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXRDdXJyZW50V2Vlayh0aGlzLmdldEN1cnJlbnRXZWVrKCkuYWRkKHdlZWtzVG9BZGQsIFwid2Vla3NcIikpO1xuICAgIGF3YWl0IHRoaXMubWVtLnJlZnJlc2hGcm9tU2VydmVyKCk7XG4gIH0qL1xufVxuXG5pZiAoIXdlZWtOb3Rlc1JlcG8pIHtcbiAgd2Vla05vdGVzUmVwbyA9IGVudi53ZWVrTm90ZXNSZXBvID0gbmV3IFdlZWtOb3Rlc1JlcG8oKTtcbn1cbiIsIlxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGlmVGFrZXNUaW1lKG1zOiBudW1iZXIsIHRhc2s6ICgpPT5Qcm9taXNlPGFueT4sIGFjdGlvbjogKCk9PmFueSkge1xuICBsZXQgdGltZW91dFJlYWNoZWQgPSBmYWxzZTtcbiAgY29uc3QgdGggPSBzZXRUaW1lb3V0KCgpPT57XG4gICAgdGltZW91dFJlYWNoZWQgPSB0cnVlO1xuICAgIGFjdGlvbigpO1xuICB9LCBtcyk7XG4gIGNvbnN0IHJ2ID0gYXdhaXQgdGFzaygpO1xuICBpZiAoIXRpbWVvdXRSZWFjaGVkKSBjbGVhclRpbWVvdXQodGgpO1xuICByZXR1cm4gcnY7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgd2Vla05vdGVzUmVwbyB9IGZyb20gJy4uLy4uL3JlcG9zL3dlZWstbm90ZXMtcmVwbyc7XG5pbXBvcnQgeyBXZWVrTm90ZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IFBlbmRpbmdKb2IgfSBmcm9tICcuLi8uLi91dGlscy9wZW5kaW5nLWpvYic7XG5pbXBvcnQgeyBjcmVhdGVVVUlELCBEb2N1bWVudEFjY2VzcyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IFd5c2l3eWcgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zyc7XG5pbXBvcnQgYWN0aW9uc19zd2VkaXNoIGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YnO1xuaW1wb3J0IGFjdGlvbnNfZW4gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucyc7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XG5pbXBvcnQgeyBpZlRha2VzVGltZSB9IGZyb20gJy4uLy4uL3V0aWxzL2lmLXRha2VzLXRpbWUnO1xuaW1wb3J0IHsgSW5qZWN0ZWRJbnRsLCBGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgeyBMYW5ndWFnZUNvbnRleHQgfSBmcm9tICcuLi91dGlsaXR5LWNvbXBvbmVudHMvTGFuZ3VhZ2VDb250ZXh0JztcblxuY29uc3QgTUFYX05PVEVfTEVOR1RIID0gMTYzODQ7XG5cblxuaW50ZXJmYWNlIFByb3BzIHtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgd2Vla05vdGU/OiBXZWVrTm90ZTtcbiAgbm90ZXM6IHN0cmluZztcbiAgLy93ZWVrOiBudW1iZXI7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgc2hvd0xvYWRpbmdQcm9ncmVzczogYm9vbGVhbjtcbiAgc2hvd1NhdmluZ1Byb2dyZXNzOiBib29sZWFuO1xuICBldmVyRWRpdGVkOiBib29sZWFuO1xuICBlcnJvcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFdlZWtOb3RlYm9vayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgYXV0b1NhdmVyOiBQZW5kaW5nSm9iO1xuICB0aW1lb3V0SGFuZGxlOiBhbnk7XG4gIHN0YXRpYyBjb250ZXh0VHlwZSA9IExhbmd1YWdlQ29udGV4dDtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5vbkNoYW5nZSA9IHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLmF1dG9TYXZlciA9IG5ldyBQZW5kaW5nSm9iKCgpPT50aGlzLnNhdmUoKSk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzTG9hZGluZzogdHJ1ZSxcbiAgICAgIHNob3dMb2FkaW5nUHJvZ3Jlc3M6IGZhbHNlLFxuICAgICAgc2hvd1NhdmluZ1Byb2dyZXNzOiBmYWxzZSxcbiAgICAgIGV2ZXJFZGl0ZWQ6IGZhbHNlLFxuICAgICAgbm90ZXM6IFwiXCIsXG4gICAgICAvL3dlZWs6IG1vbWVudCgpLndlZWsoKVxuICAgIH1cbiAgfVxuICBcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zaG93UHJvZ3Jlc3NJZkxvYWRpbmdUYWtlc1RpbWUoKTtcbiAgICB3ZWVrTm90ZXNSZXBvLm1lbS5zdWJzY3JpYmUodGhpcy5vbkNoYW5nZSk7XG4gIH1cblxuICBwcml2YXRlIHNob3dQcm9ncmVzc0lmTG9hZGluZ1Rha2VzVGltZSgpIHtcbiAgICB0aGlzLnRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KCgpPT50aGlzLnN0YXRlLmlzTG9hZGluZyAmJiB0aGlzLnNldFN0YXRlKHtzaG93TG9hZGluZ1Byb2dyZXNzOiB0cnVlfSksIDMwMCk7ICAgIFxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2Vla05vdGVzUmVwby5tZW0udW5zdWJzY3JpYmUodGhpcy5vbkNoYW5nZSk7XG4gICAgdGhpcy5hdXRvU2F2ZXIuc3RvcCgpO1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRIYW5kbGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBfc2F2ZSgpIHtcbiAgICBmb3IgKGxldCBtYXhJdGVyYXRpb25zPTM7IHRoaXMuaXNOb3Rlc0VkaXRlZCgpICYmIG1heEl0ZXJhdGlvbnM7IC0tbWF4SXRlcmF0aW9ucykge1xuICAgICAgYXdhaXQgd2Vla05vdGVzUmVwby51cHNlcnQodGhpcy5zdGF0ZS53ZWVrTm90ZSwgd24gPT4ge1xuICAgICAgICB3bi5jb250ZW50ID0gdGhpcy5zdGF0ZS5ub3RlcztcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2F2ZSgpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuc2hvd1NhdmluZ1Byb2dyZXNzICYmICF0aGlzLnN0YXRlLmlzTG9hZGluZyAmJiB0aGlzLmlzTm90ZXNFZGl0ZWQoKSkge1xuICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7ZXJyb3I6IHVuZGVmaW5lZH0pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgaWZUYWtlc1RpbWUoMzAwLCAoKT0+dGhpcy5fc2F2ZSgpLCAoKT0+dGhpcy5zZXRTdGF0ZSh7c2hvd1NhdmluZ1Byb2dyZXNzOiB0cnVlfSkpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZSh7ZXJyb3I6IHRoaXMuY29udGV4dC5pbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOlwiY29tbW9uLmVycm9yU2F2aW5nRGF0YVwiLCBkZWZhdWx0TWVzc2FnZTogXCJLdW5kZSBpbnRlIHNwYXJhLlwifSl9KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGUoe3Nob3dTYXZpbmdQcm9ncmVzczogZmFsc2V9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpc05vdGVzRWRpdGVkKCkge1xuICAgIGNvbnN0IHsgd2Vla05vdGUsIG5vdGVzIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiAhIXdlZWtOb3RlICYmIChub3RlcyAhPT0gd2Vla05vdGUuY29udGVudCk7XG4gIH0gIFxuXG4gIC8vSWYgdGhlIG5vdGVib29rIHNob3VsZCBiZSB1c2VkIGluIG11bHRpcGxlIG1vZHVsZXMsIG1vdmUgdGhpcyBmdW5jdGlvbnMgaW50byBhbiB1dGlsaXR5IGZpbGVcbiAgZ2V0VHJhbnNsYXRlZEFjdGlvbnMoaW50bDogSW5qZWN0ZWRJbnRsKXtcbiAgICAvL2FjdGlvbnMgbWlnaHQgaGF2ZSBkaWZmZXJlbnQgaWNvbnMgZm9yIGVhY2ggbGFuZ3VhZ2VcbiAgICAvL3dlIGtlZXAgdGhlIHNhbWUgc3RydWN0dXJlIG9mIHRoZSBhY3Rpb25zLCBidXQgd2UgcmVwbGFjZSB0aGUgdGV4dHMgd2l0aCB0aGUgb25lcyBmcm9tIHRoZSB0cmFuc2xhdGVkIGZpbGVzXG4gICAgdmFyIGxvY2FsZUFjdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBpbnRsLmxvY2FsZSA9PT0gXCJzdlwiID8gYWN0aW9uc19zd2VkaXNoIDogYWN0aW9uc19lbik7XG4gICAgT2JqZWN0LmtleXMobG9jYWxlQWN0aW9ucykuZm9yRWFjaChlbGVtID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnRUaXRsZSA9IGFjdGlvbnNfc3dlZGlzaFtlbGVtXS50aXRsZTtcbiAgICAgIGxvY2FsZUFjdGlvbnNbZWxlbV0udGl0bGUgPSBpbnRsLmZvcm1hdE1lc3NhZ2Uoe2lkOmB3eXNpd3lnLiR7ZWxlbX1gLCBkZWZhdWx0TWVzc2FnZTogY3VycmVudFRpdGxlfSk7XG4gICAgICBcbiAgICAgIC8vYmVjYXVzZSB0aGUgaW1hZ2UgYWN0aW9uIG5lZWRzIGEgY3VzdG9tIHRyYW5zbGF0aW9uLCB3ZSB0cmVhdCB0aGlzIHNlcGFyYXRlbHlcbiAgICAgIGlmKGVsZW0gPT09IFwiaW1hZ2VcIil7XG4gICAgICAgIGxvY2FsZUFjdGlvbnNbZWxlbV0ucHJvbXB0TXNnID0gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDpcInd5c2l3eWcuaW1hZ2VQcm9tcHRNc2dcIiwgZGVmYXVsdE1lc3NhZ2U6IGFjdGlvbnNfc3dlZGlzaFtlbGVtXS5wcm9tcHRNc2d9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbG9jYWxlQWN0aW9ucztcbiAgfVxuXG4gIG9uQ2hhbmdlKHdlZWtOb3RlczogV2Vla05vdGVbXSkge1xuICAgIGNvbnN0IHdlZWtOb3RlID0gd2Vla05vdGVzLmxlbmd0aCA+IDAgP1xuICAgICAgd2Vla05vdGVzW3dlZWtOb3Rlcy5sZW5ndGggLSAxXSA6XG4gICAgICB7XG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXG4gICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpLFxuICAgICAgICAvL2RhdGVUaW1lOiB3ZWVrTm90ZXNSZXBvLmdldEN1cnJlbnRXZWVrKCkudG9EYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgICBjb250ZW50OiBcIlwiLFxuICAgICAgICBhY2w6IFtcbiAgICAgICAgICAvLyBEZWZhdWx0IEFDTDogTGV0IHVzZXIgc2VsZiBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoaXMgaXRlbTpcbiAgICAgICAgICBuZXcgRG9jdW1lbnRBY2Nlc3MoXCJlbWFpbFwiLCBlbnYuY3VycmVudFVzZXIubWFpbCwgXCJTXCIpXG4gICAgICAgIF0ubWFwKGFjID0+IGFjLnRvU3RyaW5nKCkpXG4gICAgICB9O1xuICAgIFxuICAgIGNvbnN0IG5ld1N0YXRlOiBQYXJ0aWFsPFN0YXRlPiA9IHtcbiAgICAgIHdlZWtOb3RlLFxuICAgICAgLy93ZWVrOiB3ZWVrTm90ZXNSZXBvLmdldEN1cnJlbnRXZWVrKCkud2VlaygpLFxuICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgIHNob3dMb2FkaW5nUHJvZ3Jlc3M6IGZhbHNlXG4gICAgfTtcblxuICAgIGlmICghdGhpcy5zdGF0ZS53ZWVrTm90ZSB8fCB0aGlzLnN0YXRlLndlZWtOb3RlLmlkICE9PSB3ZWVrTm90ZS5pZCB8fCB3ZWVrTm90ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBuZXdTdGF0ZS5ub3RlcyA9IHdlZWtOb3RlLmNvbnRlbnQ7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUgYXMgU3RhdGUpO1xuICB9XG5cbiAgLyphc3luYyBjaGFuZ2VXZWVrKGRpcmVjdGlvbjogbnVtYmVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0xvYWRpbmc6IHRydWUsXG4gICAgICAgIGV2ZXJFZGl0ZWQ6IGZhbHNlLFxuICAgICAgICB3ZWVrTm90ZTogbnVsbCxcbiAgICAgICAgZXJyb3I6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICB0aGlzLnNob3dQcm9ncmVzc0lmTG9hZGluZ1Rha2VzVGltZSgpO1xuICAgICAgYXdhaXQgd2Vla05vdGVzUmVwby5jaGFuZ2VXZWVrKGRpcmVjdGlvbik7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICBhd2FpdCB0aGlzLnNldFN0YXRlKHtlcnJvcjogXCJLdW5kZSBpbnRlIGxhZGRhIGRhdGFcIn0pO1xuICAgIH0gXG4gIH1cblxuICBwcmV2V2VlaygpIHtcbiAgICB0aGlzLmNoYW5nZVdlZWsoLTEpO1xuICB9XG5cbiAgbmV4dFdlZWsoKSB7XG4gICAgdGhpcy5jaGFuZ2VXZWVrKDEpO1xuICB9Ki9cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge25vdGVzLCBzaG93TG9hZGluZ1Byb2dyZXNzLCBpc0xvYWRpbmcsIHNob3dTYXZpbmdQcm9ncmVzcywgZXJyb3IsIGV2ZXJFZGl0ZWR9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMuY29udGV4dDtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgey8qPGRpdiBjbGFzc05hbWU9e2BrZWRfYm94ZWQga2VkTm90ZXBhZCR7d2Vla051bWJlciA9PT0gY3VycmVudFdlZWsgPyBcIiBjdXJyZW50V2Vla1wiIDogXCJcIn1gfT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtgd2Vla1NlbGVjdGB9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCI+XG4gICAgICAgICAgICAgICAgPHA+e0xgVmVja2EgJHt3ZWVrTnVtYmVyfWB9PC9wPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuLWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpID0+IHRoaXMucHJldldlZWsoKX0+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFuZ2xlLWxlZnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCkgPT4gdGhpcy5uZXh0V2VlaygpfT5cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYW5nbGUtcmlnaHRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKi9cbiAgICAgICAgfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17YGtlZF9ib3hlZCBrZWROb3RlcGFkYH0+XG4gICAgICAgICAgPGgzPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwid2Vla05vdGVib29rLnRpdGxlXCIgZGVmYXVsdE1lc3NhZ2U9XCJBbnRlY2tuaW5nYXJcIi8+PC9oMz5cbiAgICAgICAgICA8V3lzaXd5Z1xuICAgICAgICAgICAgYWN0aW9ucz17W1xuICAgICAgICAgICAgICBcImJvbGRcIixcbiAgICAgICAgICAgICAgXCJpdGFsaWNcIixcbiAgICAgICAgICAgICAgXCJ1bmRlcmxpbmVcIixcbiAgICAgICAgICAgICAgXCJzdHJpa2V0aHJvdWdoXCIsXG4gICAgICAgICAgICAgIFwiaGVhZGluZzFcIixcbiAgICAgICAgICAgICAgXCJoZWFkaW5nMlwiLFxuICAgICAgICAgICAgICBcImhlYWRpbmczXCIsXG4gICAgICAgICAgICAgIFwib2xpc3RcIixcbiAgICAgICAgICAgICAgXCJ1bGlzdFwiLFxuICAgICAgICAgICAgICBcImxpbmVcIl19XG4gICAgICAgICAgICBkZWZhdWx0QWN0aW9ucz17dGhpcy5nZXRUcmFuc2xhdGVkQWN0aW9ucyhpbnRsKX1cbiAgICAgICAgICAgIGh0bWw9e2lzTG9hZGluZyA/IFwiPGRpdj48L2Rpdj5cIiA6IG5vdGVzLnN1YnN0cigwLCBNQVhfTk9URV9MRU5HVEgpfVxuICAgICAgICAgICAgb25DaGFuZ2U9eyFpc0xvYWRpbmcgJiYgKGh0bWwgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICBub3RlczogaHRtbC5zdWJzdHIoMCwgTUFYX05PVEVfTEVOR1RIKSxcbiAgICAgICAgICAgICAgICBldmVyRWRpdGVkOiB0cnVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aGlzLmF1dG9TYXZlci50cmlnZ2VyQ2hhbmdlKDUwMCk7XG4gICAgICAgICAgICB9KX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAge2Vycm9yID9cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImVycm9yXCI+e2Vycm9yfTwvcD4gOlxuICAgICAgICAgICAgc2hvd0xvYWRpbmdQcm9ncmVzcyA/XG4gICAgICAgICAgICAgIDxzcGFuPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLmxvYWRpbmdcIiBkZWZhdWx0TWVzc2FnZT1cIkxhZGRhci4uLlwiLz48U3Bpbm5lciAvPjwvc3Bhbj4gOlxuICAgICAgICAgICAgICBzaG93U2F2aW5nUHJvZ3Jlc3MgPyA8PlxuICAgICAgICAgICAgICAgIDxzcGFuPjxGb3JtYXR0ZWRNZXNzYWdlIGlkPVwiY29tbW9uLnNhdmluZ1wiIGRlZmF1bHRNZXNzYWdlPVwiU3BhcmFyLi4uXCIvPiAmbmJzcDsgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDxTcGlubmVyIC8+XG4gICAgICAgICAgICAgIDwvPiA6XG4gICAgICAgICAgICAgIHRoaXMuaXNOb3Rlc0VkaXRlZCgpID8gXG4gICAgICAgICAgICAgICAgPD4mbmJzcDs8Lz4gOlxuICAgICAgICAgICAgICAgICAgZXZlckVkaXRlZCA/XG4gICAgICAgICAgICAgICAgICA8Rm9ybWF0dGVkTWVzc2FnZSBpZD1cImNvbW1vbi5zYXZlZFwiIGRlZmF1bHRNZXNzYWdlPVwiU3BhcmFkXCIvPiA6XG4gICAgICAgICAgICAgICAgICAgIDw+Jm5ic3A7PC8+fVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBJbmplY3RlZEludGxQcm9wcyB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgTGFuZ3VhZ2VDb250ZXh0IH0gZnJvbSAnLi4vdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XG5pbXBvcnQgeyBXZWVrTm90ZWJvb2sgfSBmcm9tICcuJztcblxuZXhwb3J0IGZ1bmN0aW9uIFJvb3RXZWVrTm90ZWJvb2sgKHByb3BzIDogSW5qZWN0ZWRJbnRsUHJvcHMpIHtcbiAgICBjb25zdCB7aW50bH0gPSBwcm9wcztcbiAgICByZXR1cm4gPExhbmd1YWdlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e2ludGx9fT5cbiAgICAgICAgICAgICAgPFdlZWtOb3RlYm9vayAvPlxuICAgICAgICAgICA8L0xhbmd1YWdlQ29udGV4dC5Qcm92aWRlcj47XG4gIH0iLCJleHBvcnQgKiBmcm9tICcuL3dlZWstbm90ZWJvb2snO1xuZXhwb3J0ICogZnJvbSAnLi9yb290LXdlZWstbm90ZWJvb2snO1xuIiwiaW1wb3J0IHtFRFNTdHVkeVBsYW59IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IHsgRURTUGVyaW9kIH0gZnJvbSAnLi4vLi4vYXBpcy9lZHNjbGllbnQnO1xuXG5leHBvcnQgY2xhc3MgVmlld01vZGVsIHtcbiAgICBzdWJqZWN0czogQXJyYXk8e1xuICAgICAgICBuYW1lOiBzdHJpbmc7XG4gICAgICAgIGF0R29hbDogc3RyaW5nO1xuICAgICAgICBzdEdvYWw6IHN0cmluZztcbiAgICAgICAgZmluYWxHb2FsOiBzdHJpbmc7XG4gICAgICAgIHN0cmF0ZWdpZXM6IHN0cmluZztcbiAgICB9PjtcblxuICAgIGNvbnN0cnVjdG9yIChzdHVkeVBsYW5zOiBFRFNTdHVkeVBsYW5bXSkge1xuICAgICAgICB0aGlzLnN1YmplY3RzID0gc3R1ZHlQbGFucy5tYXAoc3AgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGVyaW9kR29hbHMgPSBzcC5wZXJpb2RHb2Fsc1xuICAgICAgICAgICAgICAgIC5tYXAoZyA9PiAoe3BlcmlvZDogbmV3IEVEU1BlcmlvZChnLnBlcmlvZE5hbWUpLCBnb2FsOiBnLmdyYWRlTmFtZX0pKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogc3AuY291cnNlVW5pdE5hbWUsXG4gICAgICAgICAgICAgICAgYXRHb2FsOiBwZXJpb2RHb2Fscy5maWx0ZXIgKCh7cGVyaW9kfSk9PiBwZXJpb2QudGVybSA9PT0gJ0FUJykubWFwKCh7Z29hbH0pID0+IGdvYWwpWzBdLFxuICAgICAgICAgICAgICAgIHN0R29hbDogcGVyaW9kR29hbHMuZmlsdGVyICgoe3BlcmlvZH0pPT4gcGVyaW9kLnRlcm0gPT09ICdTVCcpLm1hcCgoe2dvYWx9KSA9PiBnb2FsKVswXSxcbiAgICAgICAgICAgICAgICBmaW5hbEdvYWw6IHNwLmZpbmFsR29hbEdyYWRlLFxuICAgICAgICAgICAgICAgIHN0cmF0ZWdpZXM6IHNwLnN0cmF0ZWd5VGV4dFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHkgfSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5cbnR5cGUgQWJpbGl0eUNlbGwgPSB7IHR5cGU6ICdhYmlsaXR5JywgbmFtZTogc3RyaW5nIH07XG50eXBlIENhcGFiQ2VsbCA9IHsgdHlwZTogJ2NhcGFiaWxpdHknLCBuYW1lOiBzdHJpbmcgfTtcbnR5cGUgVGVybUNlbGwgPSB7IHR5cGU6ICd0ZXJtJywgc2VsZWN0ZWQ6IGJvb2xlYW4gfTtcbnR5cGUgQ2VsbCA9IEFiaWxpdHlDZWxsIHwgQ2FwYWJDZWxsIHwgVGVybUNlbGw7XG5cbmV4cG9ydCBjbGFzcyBGdXR1cmVBYmlsaXRpZXNWaWV3TW9kZWwge1xuICBjb2x1bW5IZWFkZXJzOiB7bmFtZTogc3RyaW5nLCB0eXBlOiBzdHJpbmd9W107XG4gIHZ0SHRzOiBzdHJpbmdbXTtcbiAgY2FwYWJSb3dzOiBDZWxsW11bXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhOiBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eVtdKSB7XG4gICAgLy8gV2lsbCBidWlsZCB0aGUgdG90YWwgeWVhcnNcbiAgICBjb25zdCBmb3JtTmFtZXM6IHtbbmFtZTogc3RyaW5nXTogdHJ1ZX0gPSB7fTtcbiAgICBkYXRhLmZvckVhY2goYSA9PiBhLmNhcGFiaWxpdGllcy5mb3JFYWNoKGMgPT4gZm9ybU5hbWVzW2MuZm9ybU5hbWVdID0gdHJ1ZSkpO1xuICAgIGNvbnN0IHllYXJzID0gT2JqZWN0LmtleXMoZm9ybU5hbWVzKTtcbiAgICBcbiAgICAvLyBjb2x1bW5IZWFkZXJzXG4gICAgdGhpcy5jb2x1bW5IZWFkZXJzID0gW3tcbiAgICAgIG5hbWU6IFwiRnJhbXRpZHNmw7ZybcOlZ2FcIixcbiAgICAgIHR5cGU6IFwiaGVhZGVyXCJcbiAgICB9LCB7XG4gICAgICBuYW1lOiBcIk9tcsOlZGVcIixcbiAgICAgIHR5cGU6IFwiaGVhZGVyXCJcbiAgICB9XS5jb25jYXQoeWVhcnMubWFwKHllYXIgPT4gKHtcbiAgICAgIG5hbWU6IHllYXIsXG4gICAgICB0eXBlOiAneWVhcidcbiAgICB9KSkpO1xuXG4gICAgLy8gdnRIdHNcbiAgICB0aGlzLnZ0SHRzID0gZmxhdHRlbih5ZWFycy5tYXAoeWVhciA9PiBbXCJIVFwiLCBcIlZUXCJdKSk7XG5cbiAgICAvLyBjYWJhYlJvd3NcbiAgICBjb25zdCByb3dzOiBDZWxsW11bXSA9IFtdO1xuICAgIGRhdGEuZm9yRWFjaChhID0+IHtcbiAgICAgIGxldCByb3c6IENlbGxbXSA9IFt7dHlwZTogJ2FiaWxpdHknLCBuYW1lOiBhLmFiaWxpdHlOYW1lfV07XG4gICAgICBjb25zdCBhZGRlZENhcGFicyA6IHtbbmFtZTogc3RyaW5nXTogdHJ1ZX0gPSB7fTtcbiAgICAgIGEuY2FwYWJpbGl0aWVzLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGxzOiBUZXJtQ2VsbFtdID0gW1xuICAgICAgICAgIHt0eXBlOiAndGVybScsIHNlbGVjdGVkOiBjLmh0SGFzVmFsdWUgIT09IGZhbHNlfSxcbiAgICAgICAgICB7dHlwZTogJ3Rlcm0nLCBzZWxlY3RlZDogYy52dEhhc1ZhbHVlICE9PSBmYWxzZX1cbiAgICAgICAgXTtcbiAgICAgICAgLy9pZiAoYy5odEhhc1ZhbHVlIHx8IGMudnRIYXNWYWx1ZSkgZGVidWdnZXI7XG5cbiAgICAgICAgaWYgKCFhZGRlZENhcGFic1tjLmNhcGFiaWxpdHlOYW1lXSkge1xuICAgICAgICAgIC8vaWYgKCFpc0ZpcnN0Q2FwYWJpbGl0eSkgcm93cy5wdXNoKHJvdyk7XG4gICAgICAgICAgaWYgKHJvdy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICByb3dzLnB1c2gocm93KTtcbiAgICAgICAgICAgIHJvdyA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRlZENhcGFic1tjLmNhcGFiaWxpdHlOYW1lXSA9IHRydWU7XG4gICAgICAgICAgcm93LnB1c2goe3R5cGU6ICdjYXBhYmlsaXR5JywgbmFtZTogYy5jYXBhYmlsaXR5TmFtZX0pO1xuICAgICAgICAgIGNlbGxzLmZvckVhY2goY2VsbCA9PiByb3cucHVzaChjZWxsKSk7XG4gICAgICAgIH0gZWxzZSBpZiAocm93KSB7XG4gICAgICAgICAgLy9hZGRlZENhcGFic1tjLmNhcGFiaWxpdHlOYW1lXS5jb25jYXQoY2VsbHMpO1xuICAgICAgICAgIGNlbGxzLmZvckVhY2goY2VsbCA9PiByb3cucHVzaChjZWxsKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHJvdykgcm93cy5wdXNoKHJvdyk7XG4gICAgfSk7XG5cbiAgICB0aGlzLmNhcGFiUm93cyA9IHJvd3M7XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eSB9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9lZHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IEZ1dHVyZUFiaWxpdGllc1ZpZXdNb2RlbCB9IGZyb20gJy4vZnV0dXJlLWFiaWxpdGllcy12aWV3bW9kZWwnO1xuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBsb2FkaW5nOiBib29sZWFuLFxuICBkYXRhOiBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eVtdLFxuICBlcnJvcjogc3RyaW5nIHwgbnVsbFxufVxuXG5leHBvcnQgY2xhc3MgRnV0dXJlQWJpbGl0aWVzVGFibGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30sIFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgIGRhdGE6IFtdLFxuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMubG9hZCgpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KTtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGVudi5lZHNDbGllbnQuZ2V0U3R1ZGVudEZ1dHVyZUFiaWxpdGllcygpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRhdGEgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvciB9KTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHZpZXdNb2RlbCA9IG5ldyBGdXR1cmVBYmlsaXRpZXNWaWV3TW9kZWwgKHRoaXMuc3RhdGUuZGF0YSk7XG4gICAgY29uc3Qge2NvbHVtbkhlYWRlcnMsIHZ0SHRzLCBjYXBhYlJvd3N9ID0gdmlld01vZGVsO1xuXG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8aDU+RnJhbXRpZHNmw7ZybcOlZ29yPC9oNT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFydGlhbEVkaXRTdHVkeVBsYW5WaWV3TW9kZVwiPlxuICAgICAgICA8dGFibGUgc3R5bGU9e3sgd2lkdGg6ICcxMDAlJyB9fSBjbGFzc05hbWU9XCJzbWFsbEZvbnRcIj5cbiAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICA8dHI+e2NvbHVtbkhlYWRlcnMubWFwKCh7IG5hbWUsIHR5cGUgfSwgaSkgPT5cbiAgICAgICAgICAgICAgdHlwZSA9PT0gJ2hlYWRlcicgP1xuICAgICAgICAgICAgICAgIDx0aCBrZXk9e2l9IHJvd1NwYW49ezJ9PntuYW1lfTwvdGg+IDpcbiAgICAgICAgICAgICAgICA8dGgga2V5PXtpfSBjb2xTcGFuPXsyfT57bmFtZX08L3RoPil9PC90cj5cbiAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9XCJoZWFkZXJcIj5cbiAgICAgICAgICAgICAge3Z0SHRzLm1hcCgodnRIdCwgaSkgPT4gPHRoIGtleT17aX0+e3Z0SHR9PC90aD4pfVxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgIHtjYXBhYlJvd3MubWFwKChyb3csIGkpID0+IDx0ciBrZXk9e2l9IGNsYXNzTmFtZT17KE1hdGguZmxvb3IoaS8zKSAlIDIpICYmICd0YWJsZU9kZCd9PlxuICAgICAgICAgICAgICB7cm93Lm1hcCgoY29sLCBpKSA9PiBjb2wudHlwZSA9PT0gJ2FiaWxpdHknID9cbiAgICAgICAgICAgICAgICA8dGQga2V5PXtpfSByb3dTcGFuPXszfSBjbGFzc05hbWU9XCJnb2Fsc1N1YmplY3RcIj57Y29sLm5hbWV9PC90ZD4gOlxuICAgICAgICAgICAgICAgIGNvbC50eXBlID09PSAnY2FwYWJpbGl0eScgP1xuICAgICAgICAgICAgICAgICAgPHRkIGtleT17aX0gY2xhc3NOYW1lPVwiZ29hbHNTdWJqZWN0XCI+e2NvbC5uYW1lfTwvdGQ+IDpcbiAgICAgICAgICAgICAgICAgIGNvbC5zZWxlY3RlZCA/XG4gICAgICAgICAgICAgICAgICAgIDx0ZCBrZXk9e2l9IGNsYXNzTmFtZT1cImVkc1NlbGVjdGVkXCI+PGRpdiBjbGFzc05hbWU9XCJtYXJrZWRJdGVtXCI+PC9kaXY+PC90ZD4gOlxuICAgICAgICAgICAgICAgICAgICA8dGQga2V5PXtpfSAvPil9XG4gICAgICAgICAgICA8L3RyPil9XG4gICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PjtcbiAgfVxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBWaWV3TW9kZWwgfSBmcm9tICcuL2dvYWxzLXZpZXdtb2RlbCc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBFRFNTdHVkeVBsYW4gfSBmcm9tICcuLi8uLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7IEZ1dHVyZUFiaWxpdGllc1RhYmxlIH0gZnJvbSAnLi9mdXR1cmUtYWJpbGl0aWVzLXRhYmxlJztcblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgbG9hZGluZ1N0dWR5UGxhbnM6IGJvb2xlYW4sXG4gIHN0dWR5UGxhbnM6IEVEU1N0dWR5UGxhbltdLFxuICBlcnJvcjogc3RyaW5nIHwgbnVsbFxufVxuXG5leHBvcnQgY2xhc3MgS1NHb2FscyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDx7fSwgU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvYWRpbmdTdHVkeVBsYW5zOiBmYWxzZSxcbiAgICAgIHN0dWR5UGxhbnM6IFtdLFxuICAgICAgZXJyb3I6IG51bGxcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5sb2FkKCk7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe2xvYWRpbmdTdHVkeVBsYW5zOiB0cnVlfSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHN0dWR5UGxhbnMgPSBhd2FpdCBlbnYuZWRzQ2xpZW50LmdldFN0dWRlbnRHb2FscygpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7c3R1ZHlQbGFuc30pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtlcnJvcn0pO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtsb2FkaW5nU3R1ZHlQbGFuczogZmFsc2V9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB2aWV3TW9kZWwgPSBuZXcgVmlld01vZGVsKHRoaXMuc3RhdGUuc3R1ZHlQbGFucyk7XG4gICAgY29uc3Qgc2hvd1Rlcm1Hb2FscyA9XG4gICAgICAgKCcnK2Vudi5jdXJyZW50VXNlci5zY2hvb2xUeXBlKS50b0xvd2VyQ2FzZSgpICE9PSBcImd5bW5hc2l1bVwiO1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwia2VkX2JveGVkXCI+XG4gICAgICA8aDQ+XG4gICAgICAgIHtMYE3DpWxgfVxuICAgICAgPC9oND5cbiAgICAgIDxociAvPlxuICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInNtYWxsRm9udFwiPlxuICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoPntMYMOEbW5lYH08L3RoPlxuICAgICAgICAgICAge3Nob3dUZXJtR29hbHMgJiYgPHRoPntMYEhUYH08L3RoPn1cbiAgICAgICAgICAgIHtzaG93VGVybUdvYWxzICYmIDx0aD57TGBWVGB9PC90aD59XG4gICAgICAgICAgICA8dGg+e0xgU2x1dG3DpWxgfTwvdGg+XG4gICAgICAgICAgICA8dGg+e0xgU3RyYXRlZ2llcmB9PC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAge3ZpZXdNb2RlbC5zdWJqZWN0cy5tYXAoKHMsIGkpID0+XG4gICAgICAgICAgPHRyIGtleT17cy5uYW1lfSBjbGFzc05hbWU9e2kgJSAyICYmIFwidGFibGVPZGRcIn0+XG4gICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZ29hbHNTdWJqZWN0XCI+e3MubmFtZX08L3RkPlxuICAgICAgICAgICAge3Nob3dUZXJtR29hbHMgJiYgPHRkIGNsYXNzTmFtZT1cImdvYWxzVGVybVwiPntzLmF0R29hbH08L3RkPn1cbiAgICAgICAgICAgIHtzaG93VGVybUdvYWxzICYmIDx0ZCBjbGFzc05hbWU9XCJnb2Fsc1Rlcm1cIj57cy5zdEdvYWx9PC90ZD59XG4gICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZ29hbHNFbmRcIj57cy5maW5hbEdvYWx9PC90ZD5cbiAgICAgICAgICAgIDx0ZD57cy5zdHJhdGVnaWVzfTwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgICApfVxuICAgICAgICA8L3Rib2R5PjwvdGFibGU+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGl2aWRlclwiIC8+XG4gICAgICAgIDxGdXR1cmVBYmlsaXRpZXNUYWJsZSAvPlxuICAgIDwvZGl2PlxuICB9XG59XG4iLCJcbmV4cG9ydCBpbnRlcmZhY2UgS2VkTGVhcm5pbmdHb2Fsc0RhdGEge1xuICBtb2R1bGVOYW1lOiBzdHJpbmdcbiAgc3ViamVjdDoge1xuICAgIG5hbWU6IHN0cmluZ1xuICAgIGNvdXJzZToge1xuICAgICAgbmFtZTogc3RyaW5nXG4gICAgICB1cmw6IHN0cmluZ1xuICAgIH1cbiAgfVxuICBzdGVwPzogbnVtYmVyXG4gIGNvbW1vblRhc2tzOiBLZWRMZWFybmluZ1Rhc2tbXVxuICBsZWFybmluZ0dvYWxzOiBLZWRMZWFybmluZ0dvYWxbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEtlZExlYXJuaW5nVGFzayB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgdXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2VkTGVhcm5pbmdHb2FsIHtcbiAgbmFtZTogc3RyaW5nO1xuICB0YXNrczogS2VkTGVhcm5pbmdUYXNrW107XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRMZWFybmluZ0dvYWxzQW5kVGFza3MoYXBpUGF0aDogc3RyaW5nLCBwYWdlSWQ6IHN0cmluZykge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCAoYCR7YXBpUGF0aH0/bm9kZUlEPSR7cGFnZUlkfWAsIHtjcmVkZW50aWFsczogXCJzYW1lLW9yaWdpblwifSk7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICByZXR1cm4gZGF0YSBhcyBLZWRMZWFybmluZ0dvYWxzRGF0YTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldExlYXJuaW5nR29hbHNBbmRUYXNrcywgS2VkTGVhcm5pbmdHb2Fsc0RhdGEgfSBmcm9tICcuLi8uLi9hcGlzL2tlZC1sZWFybmluZ2dvYWxzJztcbmltcG9ydCB7IExlYXJuaW5nTW9kdWxlVGFzaywgVGFza0xpc3QgfSBmcm9tICcuLi9jb3Vyc2Utdmlld2VyL3N1YmNvbXBvbmVudHMvdGFzay1saXN0JztcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBMZWFybmluZ0dvYWwsIExlYXJuaW5nR29hbHNMaXN0IH0gZnJvbSAnLi4vY291cnNlLXZpZXdlci9zdWJjb21wb25lbnRzL2xlYXJuaW5nLWdvYWxzLWxpc3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBhcGlQYXRoOiBzdHJpbmc7IC8vIFwiLzQuNTY2N2M2MzExNWVkNmMwMzc5MGE0YzhjLzEyLjFmOTVhNjdhMTVlZTMxZWExYzQ0NDdiMi5qc29uXCJcbiAgcGFnZUlkOiBzdHJpbmc7IC8vIHN2LlBhZ2VDb250ZXh0LnBhZ2VJZFxufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBkYXRhOiBLZWRMZWFybmluZ0dvYWxzRGF0YSB8IG51bGxcbn1cblxuZXhwb3J0IGNsYXNzIExlYXJuaW5nVGFza3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZGF0YTogbnVsbFxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXRMZWFybmluZ0dvYWxzQW5kVGFza3MoXG4gICAgICB0aGlzLnByb3BzLmFwaVBhdGgsXG4gICAgICB0aGlzLnByb3BzLnBhZ2VJZCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZGF0YSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuZGF0YSkgcmV0dXJuIDxkaXY+PC9kaXY+O1xuICAgIGNvbnN0IHsgbW9kdWxlTmFtZSwgc3ViamVjdCwgY29tbW9uVGFza3MsIGxlYXJuaW5nR29hbHMsIHN0ZXAgfSA9IHRoaXMuc3RhdGUuZGF0YTtcbiAgICAvL2NvbnN0IHN0ZXAgPSB1bmRlZmluZWQ7IC8vIG1vZHVsZU5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKFwic3RlZyBcIikgJiYgcGFyc2VJbnQobW9kdWxlTmFtZS5zdWJzdHIoNSkpO1xuICAgIGNvbnN0IGNvbW1vblRhc2tzTGlzdDogTGVhcm5pbmdNb2R1bGVUYXNrW10gPVxuICAgICAgY29tbW9uVGFza3MubWFwKHRhc2sgPT4gKHtcbiAgICAgICAgaWQ6IHRhc2suaWQsXG4gICAgICAgIG5hbWU6IHRhc2submFtZSxcbiAgICAgICAgdXJsOiB0YXNrLnVybCxcbiAgICAgICAgY291cnNlTmFtZTogc3ViamVjdC5uYW1lLFxuICAgICAgICBsZWFybmluZ0dvYWw6IHN0ZXAgJiYgbGVhcm5pbmdHb2Fscy5sZW5ndGggPiAwID8gYCR7bW9kdWxlTmFtZX0gLSDDtnZlcmdyaXBhbmRlYCA6IG1vZHVsZU5hbWVcbiAgICAgIH0pKTtcbiAgICAgIFxuICAgIGNvbnN0IGxlYXJuaW5nR29hbHNMaXN0OiBMZWFybmluZ0dvYWxbXSA9IGxlYXJuaW5nR29hbHMubWFwKGxlYXJuaW5nR29hbCA9PiAoe1xuICAgICAgbmFtZTogbGVhcm5pbmdHb2FsLm5hbWUsXG4gICAgICBsZWFybmluZ1Rhc2tzOiBsZWFybmluZ0dvYWwudGFza3MubWFwKHRhc2sgPT4gKHtcbiAgICAgICAgaWQ6IHRhc2suaWQsXG4gICAgICAgIG5hbWU6IHRhc2submFtZSxcbiAgICAgICAgdXJsOiB0YXNrLnVybCxcbiAgICAgICAgY291cnNlTmFtZTogc3ViamVjdC5uYW1lLFxuICAgICAgICBsZWFybmluZ0dvYWw6IGxlYXJuaW5nR29hbC5uYW1lXG4gICAgICB9KSlcbiAgICB9KSk7XG5cbiAgICBpZiAoc3RlcCkge1xuICAgICAgY29tbW9uVGFza3NMaXN0LmZvckVhY2godGFzayA9PiB0YXNrLnN0ZXAgPSBzdGVwKTtcbiAgICAgIGxlYXJuaW5nR29hbHNMaXN0LmZvckVhY2gobGcgPT4gbGcubGVhcm5pbmdUYXNrcy5mb3JFYWNoKHRhc2sgPT4gdGFzay5zdGVwID0gc3RlcCkpO1xuICAgIH1cblxuICAgIHJldHVybiA8TGVhcm5pbmdHb2Fsc0xpc3RcbiAgICAgIGNvbW1vblRhc2tzPXtjb21tb25UYXNrc0xpc3R9XG4gICAgICBsZWFybmluZ0dvYWxzPXtsZWFybmluZ0dvYWxzTGlzdH0gLz47XG4gIH1cbn1cbiIsImltcG9ydCB7IExlYXJuaW5nTW9kdWxlVGFza3MgfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5cbmV4cG9ydCBjb25zdCBsZWFybmluZ01vZHVsZXM6IExlYXJuaW5nTW9kdWxlVGFza3NbXSA9IFt7XG4gICAgbW9kdWxlTmFtZTogXCJTdGVnIDIyXCIsXG4gICAgc3ViamVjdDoge1xuICAgICAgICBuYW1lOiBcIlNwYW5za2FcIixcbiAgICAgICAgY291cnNlOiB7XG4gICAgICAgICAgICBuYW1lOiBcIlNwYW5za2FcIixcbiAgICAgICAgICAgIHVybDogXCIvc3RlZy9zcGFuc2thLjQuNGFlNGU5ZDIxNTllZjRlMDEyMGFkNmQzLmh0bWxcIlxuICAgICAgICB9XG4gICAgfSxcbiAgICBjb21tb25UYXNrczogW10sXG4gICAgbGVhcm5pbmdHb2FsczogW3tcbiAgICAgICAgbmFtZTogXCJBa3Rpdml0ZXRlciBpIGhlbW1ldFwiLFxuICAgICAgICB0YXNrczogW3tcbiAgICAgICAgICAgIG5hbWU6IFwiQWt0aXZpdGV0ZXIgaSBoZW1tZXQgaG9zIGVuIHBlcnVhbnNrIGZhbWlsalwiLFxuICAgICAgICAgICAgdXJsOiBcIi9zdGVnL3NwYW5za2EvYmxvY2s1L3N0ZWcyMi91cHBnaWZ0ZXIvYWt0aXZpdGV0ZXJpaGVtbWV0L2FrdGl2aXRldGVyaWhlbW1ldGhvc2VucGVydWFuc2tmYW1pbGouNC40YWU0ZTlkMjE1OWVmNGUwMTIwYWRiNDAuaHRtbFwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6IFwiVXBwZ2lmdCB0aWxsIGFrdGl2aXRldGVyIGkgaGVtbWV0XCIsXG4gICAgICAgICAgICB1cmw6IFwiL3N0ZWcvc3BhbnNrYS9ibG9jazUvc3RlZzIyL3VwcGdpZnRlci9ha3Rpdml0ZXRlcmloZW1tZXQvdXBwZ2lmdHRpbGxha3Rpdml0ZXRlcmloZW1tZXQuNC40YWU0ZTlkMjE1OWVmNGUwMTIwYWY4ODcuaHRtbFwiXG4gICAgICAgIH1dXG4gICAgfSwge1xuICAgICAgICBuYW1lOiBcIkZhbWlsamVsaXZcIixcbiAgICAgICAgdGFza3M6IFt7XG4gICAgICAgICAgICBuYW1lOiBcIlZhZCBww6Vnw6VyIGkgZGluIGZhbWlsaiBudT9cIixcbiAgICAgICAgICAgIHVybDogXCIvc3RlZy9zcGFuc2thL2Jsb2NrNS9zdGVnMjIvdXBwZ2lmdGVyL2ZhbWlsamVsaXYvdmFkcGFnYXJpZGluZmFtaWxqbnUuNC40YWU0ZTlkMjE1OWVmNGUwMTIwYjI1ZTkuaHRtbFwiXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG5hbWU6IFwiVXBwZ2lmdCBmYW1pbGplbGl2XCIsXG4gICAgICAgICAgICB1cmw6IFwiL3N0ZWcvc3BhbnNrYS9ibG9jazUvc3RlZzIyL3VwcGdpZnRlci9mYW1pbGplbGl2L3VwcGdpZnRmYW1pbGplbGl2LjQuNGFlNGU5ZDIxNTllZjRlMDEyMGFmNzNhLmh0bWxcIlxuICAgICAgICB9XVxuICAgIH0sIHtcbiAgICAgICAgbmFtZTogXCJTYW10YWwgb20gZmFtaWxqZWxpdlwiLFxuICAgICAgICB0YXNrczogW3tcbiAgICAgICAgICAgIG5hbWU6IFwiU2FtdGFsc2Rva3VtZW50IGZhbWlsamVsaXZcIixcbiAgICAgICAgICAgIHVybDogXCIvc3RlZy9zcGFuc2thL2Jsb2NrNS9zdGVnMjIvdXBwZ2lmdGVyL3NhbXRhbG9tZmFtaWxqZWxpdi9zYW10YWxzZG9rdW1lbnRmYW1pbGplbGl2LjQuNGFlNGU5ZDIxNTllZjRlMDEyMDlmZTAzLmh0bWxcIlxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBuYW1lOiBcIlNhbXRhbHNrYXJ0YS1mYW1pbGplbGl2XCIsXG4gICAgICAgICAgICB1cmw6IFwiL3N0ZWcvc3BhbnNrYS9ibG9jazUvc3RlZzIyL3VwcGdpZnRlci9zYW10YWxvbWZhbWlsamVsaXYvc2FtdGFsc2thcnRhZmFtaWxqZWxpdi40LjRhZTRlOWQyMTU5ZWY0ZTAxMjBhZjZmZC5odG1sXCJcbiAgICAgICAgfV1cbiAgICB9XG4gICAgXVxufSwge1xuICAgIG1vZHVsZU5hbWU6IFwiVGVrbmlrXCIsXG4gICAgc3ViamVjdDoge1xuICAgICAgICBuYW1lOiBcIlRla25pa1wiLFxuICAgICAgICBjb3Vyc2U6IHtcbiAgICAgICAgICAgIG5hbWU6IFwiVHLDpWQgNVwiLFxuICAgICAgICAgICAgdXJsOiBcIi9rdXJzZXIvYXJza3VyczgvdHJhZDUuMTkuMmQ0ZjQwMDUxNTlmODk1NDc3YTE1Y2MuaHRtbFwiXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbW1vblRhc2tzOiBbe1xuICAgICAgICBuYW1lOiBcIlRyeWNrIFwiLFxuICAgICAgICB1cmw6IFwiL2t1cnNlci9hcnNrdXJzOC90cmFkNS9mb3JiZXJlZGVsc2UvdGVrbmlrL3VwcGdpZnRlci90cnljay40LjRhZTRlOWQyMTU5ZWY0ZTAxMjA5ZGNkZS5odG1sXCJcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6IFwiRGlza3Vzc2lvbnNmcsOlZ29yIHRpbGwgaW5kdXN0cmllbGxhIHJldm9sdXRpb25lblwiLFxuICAgICAgICB1cmw6IFwiL2t1cnNlci9hcnNrdXJzOC90cmFkNS9mb3JiZXJlZGVsc2UvdGVrbmlrL3VwcGdpZnRlci9kaXNrdXNzaW9uc2ZyYWdvcnRpbGxpbmR1c3RyaWVsbGFyZXZvbHV0aW9uZW4uNC40YWU0ZTlkMjE1OWVmNGUwMTIwYTZmYWIuaHRtbFwiXG4gICAgfSwge1xuICAgICAgICBuYW1lOiBcIkh1ciBmdW5nZXJhciBlbiDDpW5nbWFza2luXCIsXG4gICAgICAgIHVybDogXCIva3Vyc2VyL2Fyc2t1cnM4L3RyYWQ1L2ZvcmJlcmVkZWxzZS90ZWtuaWsvdXBwZ2lmdGVyL2h1cmZ1bmdlcmFyZW5hbmdtYXNraW4uNC40YWU0ZTlkMjE1OWVmNGUwMTIwYTEzMDkuaHRtbFwiXG4gICAgfSwge1xuICAgICAgICBuYW1lOiBcIsOFbmdtYXNraW5lbnMgYmV0eWRlbHNlXCIsXG4gICAgICAgIHVybDogXCIva3Vyc2VyL2Fyc2t1cnM4L3RyYWQ1L2ZvcmJlcmVkZWxzZS90ZWtuaWsvdXBwZ2lmdGVyL2FuZ21hc2tpbmVuc2JldHlkZWxzZS40LjRhZTRlOWQyMTU5ZWY0ZTAxMjBhM2RlYi5odG1sXCJcbiAgICB9XSxcbiAgICBsZWFybmluZ0dvYWxzOiBbe1xuICAgICAgICBuYW1lOiBcIklkZW50aWZpZXJhIG9jaCBhbmFseXNlcmEgw6VuZ21hc2tpbmVuIHV0aWZyw6VuIMOkbmRhbcOlbHNlbmxpZ2hldCBvY2ggZnVua3Rpb24sXCJcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6IFwiYW52w6RuZGEgdGVrbmlrb21yw6VkZXRzIGJlZ3JlcHAgb2NoIHV0dHJ5Y2tzZm9ybVwiXG4gICAgfSwge1xuICAgICAgICBuYW1lOiBcInbDpHJkZXJhIGtvbnNla3ZlbnNlciBhdiDDpW5nbWFza2luZW4gZsO2ciBpbmRpdmlkLCBzYW1ow6RsbGUgb2NoIG1pbGrDtiwgb2NoXCJcbiAgICB9LCB7XG4gICAgICAgIG5hbWU6IFwiYW5hbHlzZXJhIGRyaXZrcmFmdGVyIGJha29tIHRla25pa3V0dmVja2xpbmcgcnVudCDDpW5nbWFza2luZW4gb2NoIGh1ciB0ZWtuaWtlbiBoYXIgZsO2csOkbmRyYXRzw7Z2ZXIgdGlkLlwiXG4gICAgfV1cbn1dXG5cbiIsImV4cG9ydCBjb25zdCBsZWFybmluZ1BhZ2VVcmxzID0gW1xuICBcInRlc3RkYXRhL2xlYXJuaW5nLXRhc2tzL2FtbmVzaW50ZWdyZXJhZC5qc29uXCIsXG4gIFwidGVzdGRhdGEvbGVhcm5pbmctdGFza3MvbG9vcGFkLmpzb25cIixcbiAgXCJ0ZXN0ZGF0YS9sZWFybmluZy10YXNrcy9zdGVnLWxhcmFuZGVtYWwuanNvblwiLFxuICBcInRlc3RkYXRhL2xlYXJuaW5nLXRhc2tzL3N0ZWctbWF0dGUuanNvblwiLFxuICBcInRlc3RkYXRhL2xlYXJuaW5nLXRhc2tzL3ZhbmxpZy1rdXJzLmpzb25cIlxuXTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1R1dG9yc1NlbGVjdH0gZnJvbSAnLi4vdHV0b3JzLXNlbGVjdC90dXRvcnMtc2VsZWN0JztcbmltcG9ydCB7S1NUZXJtUGxhbm5lcn0gZnJvbSAnLi4va3MtdGVybXBsYW5uZXIvdGVybXBsYW5uZXInO1xuaW1wb3J0IHsgS0dUZXJtUGxhbm5lclR1dG9yZWQgfSBmcm9tICcuLi9rZy10ZXJtcGxhbm5lci9rZy10ZXJtcGxhbm5lci10dXRvcmVkJztcbmltcG9ydCB7IFdlZWtQbGFubmVyVHV0b3JlZCB9IGZyb20gJy4uL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXR1dG9yZWQnO1xuaW1wb3J0IHsgQ2FsZW5kYXIgfSBmcm9tICcuLi9jYWxlbmRhcic7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBXZWVrUGxhbm5lciB9IGZyb20gJy4uL3dlZWtwbGFubmVyJztcbmltcG9ydCB7IFR1dG9yYWJsZUNvbXBvbmVudCB9IGZyb20gJy4uL3V0aWxpdHktY29tcG9uZW50cy90dXRvcmFibGUtY29tcG9uZW50JztcblxuaW50ZXJmYWNlIFByb3BzIHtcblxufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuXG59XG5cbmV4cG9ydCBjbGFzcyBUdXRvcnNWaWV3VGVzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8ZGl2PlxuICAgICAgPFR1dG9yc1NlbGVjdCAvPlxuICAgICAgPFR1dG9yYWJsZUNvbXBvbmVudFxuICAgICAgICB0dXRvcmVkPXt0cnVlfVxuICAgICAgICBjcmVhdGVDb21wb25lbnQ9e2VudiA9PlxuICAgICAgICAgIDxLU1Rlcm1QbGFubmVyXG4gICAgICAgICAgICBrZXk9e2Vudi5jdXJyZW50VXNlci5tYWlsfVxuICAgICAgICAgICAgZW52PXtlbnZ9XG4gICAgICAgICAgICB0dXRvcmVkPXt0cnVlfVxuICAgICAgICAgICAgaW5pdGlhbERhdGU9e25ldyBEYXRlKCl9IC8+XG4gICAgICAgIH1cbiAgICAgIC8+XG4gICAgICA8S0dUZXJtUGxhbm5lclR1dG9yZWQgLz5cbiAgICAgIDxUdXRvcmFibGVDb21wb25lbnRcbiAgICAgICAgICAgICAgdHV0b3JlZD17dHJ1ZX1cbiAgICAgICAgICAgICAgY3JlYXRlQ29tcG9uZW50PXtlbnYgPT5cbiAgICAgICAgICAgICAgICA8V2Vla1BsYW5uZXJcbiAgICAgICAgICAgICAgICAgIGtleT17ZW52LmN1cnJlbnRVc2VyLm1haWx9XG4gICAgICAgICAgICAgICAgICBlbnY9e2Vudn1cbiAgICAgICAgICAgICAgICAgIHZpZXdDb3Vyc2VVcmw9XCJodHRwczovL3d3dy5zdnQuc2VcIi8+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8+XG4gICAgIDxUdXRvcmFibGVDb21wb25lbnRcbiAgICAgIHR1dG9yZWQ9e3RydWV9XG4gICAgICBjcmVhdGVDb21wb25lbnQ9e2VudiA9PlxuICAgICAgICA8Q2FsZW5kYXJcbiAgICAgICAgZW52ID0ge2Vudn1cbiAgICAgICAgZmlyc3REYXkgPSB7bW9tZW50KCkuc3RhcnRPZignd2VlaycpLndlZWtkYXkoMSl9XG4gICAgICAgIGluaXRpYWxTdGFydEhvdXI9ezd9XG4gICAgICAgIGluaXRpYWxFbmRIb3VyPXsxOH1cbiAgICAgICAgaW5pdGlhbFpvb209ezAuNzV9XG4gICAgICAgIG51bURheXM9ezV9XG4gICAgICAgICAvPlxuICAgICAgfVxuICAgIC8+XG4gICAgPC9kaXY+O1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBDYWxlbmRhciB9IGZyb20gJy4uL2NvbXBvbmVudHMvY2FsZW5kYXInO1xuaW1wb3J0IHsgS1NHb2FscyB9IGZyb20gJy4uL2NvbXBvbmVudHMva3MtZ29hbHMvZ29hbHMnO1xuaW1wb3J0IHsgTGF0ZXN0QXNzZXNzbWVudHMgfSBmcm9tICcuLi9jb21wb25lbnRzL2xhdGVzdC1hc3Nlc3NtZW50cy9sYXRlc3QtYXNzZXNzbWVudHMnO1xuaW1wb3J0IHsgS0dUZXJtUGxhbm5lclNlbGYgYXMgS0dUZXJtUGxhbm5lciB9IGZyb20gJy4uL2NvbXBvbmVudHMva2ctdGVybXBsYW5uZXIva2ctdGVybXBsYW5uZXItc2VsZic7XG5pbXBvcnQgeyBLR1Rlcm1QbGFubmVyVHV0b3JlZCB9IGZyb20gJy4uL2NvbXBvbmVudHMva2ctdGVybXBsYW5uZXIva2ctdGVybXBsYW5uZXItdHV0b3JlZCc7XG5pbXBvcnQgeyBLU1Rlcm1QbGFubmVyfSBmcm9tICcuLi9jb21wb25lbnRzL2tzLXRlcm1wbGFubmVyL3Rlcm1wbGFubmVyJztcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJUdXRvcmVkIH0gZnJvbSAnLi4vY29tcG9uZW50cy9rcy10ZXJtcGxhbm5lci9rcy10ZXJtcGxhbm5lci10dXRvcmVkJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IFdlZWtQbGFubmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy93ZWVrcGxhbm5lci93ZWVrcGxhbm5lcic7XG5pbXBvcnQgeyBXZWVrUGxhbm5lclR1dG9yZWQgfSBmcm9tICcuLi9jb21wb25lbnRzL3dlZWtwbGFubmVyL3dlZWtwbGFubmVyLXR1dG9yZWQnO1xuaW1wb3J0IHsgTGVhcm5pbmdUYXNrcyB9IGZyb20gJy4uL2NvbXBvbmVudHMvbGVhcm5pbmctdGFza3MnO1xuaW1wb3J0IHsgTXlDb3Vyc2VzIH0gZnJvbSAnLi4vY29tcG9uZW50cy9teS1jb3Vyc2VzL215LWNvdXJzZXMnO1xuaW1wb3J0IHsgTGlzdENvdXJzZXMgfSBmcm9tICcuLi9jb21wb25lbnRzL2xpc3QtY291cnNlcy9saXN0LWNvdXJzZXMnO1xuaW1wb3J0IHsgV2Vla05vdGVib29rIH0gZnJvbSAnLi4vY29tcG9uZW50cy93ZWVrLW5vdGVib29rJztcbmltcG9ydCB7IFR1dG9yc1NlbGVjdCB9IGZyb20gJy4uL2NvbXBvbmVudHMvdHV0b3JzLXNlbGVjdC90dXRvcnMtc2VsZWN0JztcbmltcG9ydCB7IFR1dG9yc1ZpZXdUZXN0fSBmcm9tICcuLi9jb21wb25lbnRzL3R1dG9ycy12aWV3JztcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHMgPSB7XG4gIExhdGVzdEFzc2Vzc21lbnRzOiB7XG4gICAgY29tcG9uZW50OiBMYXRlc3RBc3Nlc3NtZW50cyxcbiAgICBwcm9wczogKCkgPT4gKHtcbiAgICAgIGxvY2FsZTogbmF2aWdhdG9yLmxhbmd1YWdlLFxuICAgICAgbGltaXQ6IDE1XG4gICAgfSlcbiAgfSxcbiAgS1NHb2Fsczoge1xuICAgIGNvbXBvbmVudDogS1NHb2FscyxcbiAgICBwcm9wczogKCkgPT4gKHt9KVxuICB9LFxuICBLU1Rlcm1QbGFubmVyOiB7XG4gICAgY29tcG9uZW50OiBLU1Rlcm1QbGFubmVyLFxuICAgIHByb3BzOiAoKSA9PiAoe1xuICAgICAgZW52OiBlbnYsXG4gICAgICB0dXRvcmVkOiBmYWxzZSxcbiAgICAgIGluaXRpYWxEYXRlOm5ldyBEYXRlKCksXG4gICAgfSlcbiAgfSxcbiAgS1NUZXJtUGxhbm5lclR1dG9yZWQ6IHtcbiAgICBjb21wb25lbnQ6IEtTVGVybVBsYW5uZXJUdXRvcmVkLFxuICAgIHByb3BzOiAoKSA9PiAoe30pXG4gIH0sXG4gIEtHVGVybVBsYW5uZXI6IHtcbiAgICBjb21wb25lbnQ6IEtHVGVybVBsYW5uZXIsXG4gICAgcHJvcHM6ICgpID0+ICh7fSlcbiAgfSxcbiAgS0dUZXJtUGxhbm5lclR1dG9yZWQ6IHtcbiAgICBjb21wb25lbnQ6IEtHVGVybVBsYW5uZXJUdXRvcmVkLFxuICAgIHByb3BzOiAoKSA9PiAoe30pXG4gIH0sXG4gIFdlZWtQbGFubmVyOiB7XG4gICAgY29tcG9uZW50OiBXZWVrUGxhbm5lcixcbiAgICBwcm9wczogKCkgPT4gKHtcbiAgICAgIHZpZXdDb3Vyc2VVcmw6ICdodHRwOi8vc3Z0LnNlJyxcbiAgICAgIGVudjogZW52XG4gICAgfSlcbiAgfSxcbiAgVHV0b3JzVmlldzoge1xuICAgIGNvbXBvbmVudDogVHV0b3JzVmlld1Rlc3QsXG4gICAgcHJvcHM6ICgpPT4oe30pXG4gIH0sXG4gIFR1dG9yc1NlbGVjdDoge1xuICAgIGNvbXBvbmVudDogVHV0b3JzU2VsZWN0LFxuICAgIHByb3BzOiAoKSA9PiAoe30pXG4gIH0sXG4gIENhbGVuZGFyOiB7XG4gICAgY29tcG9uZW50OiBDYWxlbmRhcixcbiAgICBwcm9wczogKCkgPT4gKHtcbiAgICAgIGZpcnN0RGF5OiBtb21lbnQoKS5zdGFydE9mKCd3ZWVrJykud2Vla2RheSgxKSxcbiAgICAgIG51bURheXM6IDUsXG4gICAgICBpbml0aWFsU3RhcnRIb3VyOiA3LFxuICAgICAgaW5pdGlhbEVuZEhvdXI6IDE4LFxuICAgICAgaW5pdGlhbFpvb206IDAuNzVcbiAgICB9KVxuICB9LFxuICAvKkNvdXJzZU92ZXJ2aWV3OiB7XG4gICAgY29tcG9uZW50OiBDb3Vyc2VPdmVydmlldyxcbiAgICBwcm9wczogKCk9Pih7XG4gICAgICBsb2NhbGU6IG5hdmlnYXRvci5sYW5ndWFnZSxcbiAgICB9KVxuICB9LCovXG4gIExlYXJuaW5nVGFza3M6IHtcbiAgICBjb21wb25lbnQ6IExlYXJuaW5nVGFza3MsXG4gICAgcHJvcHM6ICgpID0+ICh7XG4gICAgICBhcGlQYXRoOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2VsZWN0ZWRMZWFybmluZ01vZHVsZVVybCcpLFxuICAgICAgcGFnZUlkOiBcImR1bW15XCJcbiAgICB9KVxuICB9LFxuICBNeUNvdXJzZXM6IHtcbiAgICBjb21wb25lbnQ6IE15Q291cnNlcyxcbiAgICBwcm9wczogKCk9PiAoe1xuICAgICAgdmlld0NvdXJzZVVybDogJ2h0dHBzOi8va2ctdGVzdC5zaXRldmlzaW9uLnNlL2NvdXJzZXZpZXdlcidcbiAgICB9KVxuICB9LFxuICBMaXN0Q291cnNlczoge1xuICAgIGNvbXBvbmVudDogTGlzdENvdXJzZXMsXG4gICAgcHJvcHM6ICgpID0+ICh7XG4gICAgICB2aWV3Q291cnNlVXJsOiAnaHR0cHM6Ly9rZy10ZXN0LnNpdGV2aXNpb24uc2UvY291cnNldmlld2VyJ1xuICAgIH0pXG4gIH0sXG4gIFdlZWtOb3Rlczoge1xuICAgIGNvbXBvbmVudDogV2Vla05vdGVib29rLFxuICAgIHByb3BzOiAoKSA9PiAoe30pXG4gIH1cbn07XG4iLCIvLyA8SW5pdGlhbGl6YXRpb24+XG5pbXBvcnQgJy4vdGVzdC1jb25maWcnO1xuaW1wb3J0ICcuL3NldC1jdXJyZW50LXVzZXInOyAvLyBFbXVsYXRlIHNlcnZlci1zaWRlIHNjcmlwdCB0byBzZXQgY3VycmVudCB1c2VyXG5pbXBvcnQgJy4uL2dsb2JhbC1zZXR0ZXJzL3NldC1hbGwnOyAvLyBDbGllbnQtc2lkZSBpbml0aWFsaXphdGlvblxuLy8gPC9Jbml0aWFsaXphdGlvbj5cblxuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQgeyBsZWFybmluZ01vZHVsZXMgfSBmcm9tICcuL2RhdGEvbGVhcm5pbmdNb2R1bGVzJztcbmltcG9ydCB7IGxlYXJuaW5nUGFnZVVybHMgfSBmcm9tICcuL2RhdGEvbGVhcm5pbmdNb2R1bGVzMic7XG5pbXBvcnQgeyB1c2VycyB9IGZyb20gJy4vZGF0YS91c2Vycyc7XG5pbXBvcnQgeyBXZWVrUGxhbm5lciB9IGZyb20gJy4uL2NvbXBvbmVudHMvd2Vla3BsYW5uZXInO1xuaW1wb3J0IHsgY29tcG9uZW50cyB9IGZyb20gJy4vY29tcG9uZW50cyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHtLZWRCYWNrZW5kQ2xpZW50V2ViVGVzdH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWJ0ZXN0JztcbmltcG9ydCB7IENob29zZVVzZXIgfSBmcm9tICcuL3V0aWxzL2Nob29zZS11c2VyJztcbmltcG9ydCB7IEZvcm1hdHRlZE1lc3NhZ2UsIGluamVjdEludGwsIEluamVjdGVkSW50bFByb3BzIH0gZnJvbSAncmVhY3QtaW50bCc7XG5pbXBvcnQgeyBzZXR1cEludGwgfSBmcm9tIFwiLi4vY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvU2V0dXBMYW5ndWFnZUludGxcIjtcbmltcG9ydCB7TGFuZ3VhZ2VDb250ZXh0fSBmcm9tICcuLi9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9MYW5ndWFnZUNvbnRleHQnO1xuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBzZWxlY3RlZENvbXBvbmVudDogc3RyaW5nLFxuICBzZWxlY3RlZExlYXJuaW5nTW9kdWxlOiBudW1iZXIsXG4gIHNlbGVjdGVkTGVhcm5pbmdNb2R1bGVVcmw6IHN0cmluZyxcbiAgc2VsZWN0ZWRDb21wb25lbnRSZWFsOiBSZWFjdC5SZWFjdFR5cGUsXG4gIHNlbGVjdGVkQ29tcFByb3BzOiBhbnlcbn1cblxuY2xhc3MgX1Rlc3RQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEluamVjdGVkSW50bFByb3BzLCBTdGF0ZT4ge1xuICBjb21wb25lbnRBcmVhOiBIVE1MRWxlbWVudDtcbiAgbWVzc2FnZXMgOiBvYmplY3Q7XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBjb25zdCBzZWxlY3RlZENvbXAgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNlbGVjdGVkQ29tcG9uZW50XCIpIHx8IE9iamVjdC5rZXlzKGNvbXBvbmVudHMpWzBdO1xuICAgIHZhciBzZWxlY3RDb21wUHJvcHMgPSBjb21wb25lbnRzW3NlbGVjdGVkQ29tcF0ucHJvcHMoKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2VsZWN0ZWRDb21wb25lbnQ6IHNlbGVjdGVkQ29tcCxcbiAgICAgIHNlbGVjdGVkTGVhcm5pbmdNb2R1bGU6IHBhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwic2VsZWN0ZWRMZWFybmluZ01vZHVsZVwiKSB8fCBcIjBcIiksXG4gICAgICBzZWxlY3RlZExlYXJuaW5nTW9kdWxlVXJsOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNlbGVjdGVkTGVhcm5pbmdNb2R1bGVVcmxcIikgfHwgXCJcIixcbiAgICAgIHNlbGVjdGVkQ29tcG9uZW50UmVhbDogY29tcG9uZW50c1tzZWxlY3RlZENvbXBdLmNvbXBvbmVudCxcbiAgICAgIHNlbGVjdGVkQ29tcFByb3BzIDogey4uLnNlbGVjdENvbXBQcm9wc31cbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5yZW5kZXJUZXN0Q29tcG9uZW50KCk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvL3RoaXMucmVuZGVyVGVzdENvbXBvbmVudCgpO1xuICB9XG5cbiAgcmVuZGVyVGVzdENvbXBvbmVudCgpIHtcbiAgICBlbnYubGVhcm5pbmdNb2R1bGVUYXNrcyA9IGxlYXJuaW5nTW9kdWxlc1t0aGlzLnN0YXRlLnNlbGVjdGVkTGVhcm5pbmdNb2R1bGVdO1xuICAgICQodGhpcy5jb21wb25lbnRBcmVhKS5odG1sKFwiXCIpO1xuXG4gICAgaWYgKGVudi5jdXJyZW50VXNlcikge1xuICAgICAgY29uc3Qgc2VsZWN0ZWQgPSBjb21wb25lbnRzW3RoaXMuc3RhdGUuc2VsZWN0ZWRDb21wb25lbnRdIHx8XG4gICAgICAgIGNvbXBvbmVudHNbT2JqZWN0LmtleXMoY29tcG9uZW50cylbMF1dO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHNlbGVjdGVkQ29tcG9uZW50UmVhbDogc2VsZWN0ZWQuY29tcG9uZW50LFxuICAgICAgICBzZWxlY3RlZENvbXBQcm9wcyA6IHsuLi5zZWxlY3RlZC5wcm9wcygpfVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgU2VsZWN0ZWRDb21wb25lbnQgPSB0aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50UmVhbCBhcyBSZWFjdC5SZWFjdFR5cGU7XG4gICAgY29uc3Qge2ludGx9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gZW52LmN1cnJlbnRVc2VyID8gXG4gICAgPExhbmd1YWdlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17e2ludGx9fT5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cInRlc3QtcGFnZVwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0ZXN0LXNlbGVjdHNcIj5cbiAgICAgICAgICA8Zm9ybT5cbiAgICAgICAgICAgIDxoND5cbiAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ0ZXN0LnBhZ2VEZXNjcmlwdGlvblwiIGRlZmF1bHRNZXNzYWdlPVwiVGVzdHNpZGEgZsO2ciBrb21wb25lbnRlciB0aWxsIG55YSBzdGFydHNpZGFuXCIvPiBcbiAgICAgICAgICAgIDwvaDQ+XG4gICAgICAgICAgICA8dGFibGU+PHRib2R5Pjx0cj5cbiAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJ0ZXN0Q29tcG9uZW50XCI+XG4gICAgICAgICAgICAgICAgPEZvcm1hdHRlZE1lc3NhZ2UgaWQ9XCJ0ZXN0LmNob29zZUNvbXBvbmVudExhYmVsXCIgZGVmYXVsdE1lc3NhZ2U9XCJLb21wb25lbnRcIi8+XG4gICAgICAgICAgICAgIDwvbGFiZWw+PC90ZD5cbiAgICAgICAgICAgIDx0ZD48c2VsZWN0IGlkPVwidGVzdENvbXBvbmVudFwiIHZhbHVlPXt0aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50fSBvbkNoYW5nZT17ZXYgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc2VsZWN0ZWRDb21wb25lbnQ6IGV2LnRhcmdldC52YWx1ZSB9KTtcbiAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzZWxlY3RlZENvbXBvbmVudFwiLCBldi50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICB9fT5cbiAgICAgICAgICAgICAge09iamVjdC5rZXlzKGNvbXBvbmVudHMpLm1hcChjID0+IDxvcHRpb24ga2V5PXtjfSB2YWx1ZT17Y30+e2N9PC9vcHRpb24+KX1cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgICAgPC90ZD48L3RyPlxuXG4gICAgICAgICAgICB7dGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudCA9PT0gJ0xlYXJuaW5nR29hbHNBbmRUYXNrcycgJiYgPHRyPjx0ZD48bGFiZWwgaHRtbEZvcj1cInRlc3RMZWFybmluZ01vZHVsZVwiPkt1cnNtb2R1bDwvbGFiZWw+PC90ZD5cbiAgICAgICAgICAgIDx0ZD48c2VsZWN0IGlkPVwidGVzdExlYXJuaW5nTW9kdWxlXCIgdmFsdWU9e3RoaXMuc3RhdGUuc2VsZWN0ZWRMZWFybmluZ01vZHVsZX0gb25DaGFuZ2U9e1xuICAgICAgICAgICAgICBldiA9PiB7XG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJzZWxlY3RlZExlYXJuaW5nTW9kdWxlXCIsIGV2LnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9PlxuICAgICAgICAgICAgICB7bGVhcm5pbmdNb2R1bGVzLm1hcCgobG0sIGkpID0+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXtpfT57XG4gICAgICAgICAgICAgICAgICBsbS5zdWJqZWN0LmNvdXJzZS5uYW1lICsgXCIvXCIgK1xuICAgICAgICAgICAgICAgICAgbG0uc3ViamVjdC5uYW1lICsgXCIvXCIgK1xuICAgICAgICAgICAgICAgICAgbG0ubW9kdWxlTmFtZX08L29wdGlvbj4pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvc2VsZWN0PjwvdGQ+PC90cj59XG4gICAgICAgICAgICB7dGhpcy5zdGF0ZS5zZWxlY3RlZENvbXBvbmVudCA9PT0gJ0xlYXJuaW5nVGFza3MnICYmIDx0cj48dGQ+PGxhYmVsIGh0bWxGb3I9XCJ0ZXN0TGVhcm5pbmdNb2R1bGVVcmxcIj5LdXJzbW9kdWw8L2xhYmVsPjwvdGQ+XG4gICAgICAgICAgICA8dGQ+PHNlbGVjdCBpZD1cInRlc3RMZWFybmluZ01vZHVsZVVybFwiIHZhbHVlPXt0aGlzLnN0YXRlLnNlbGVjdGVkTGVhcm5pbmdNb2R1bGVVcmx9IG9uQ2hhbmdlPXtcbiAgICAgICAgICAgICAgZXYgPT4ge1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwic2VsZWN0ZWRMZWFybmluZ01vZHVsZVVybFwiLCBldi50YXJnZXQudmFsdWUpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfT5cbiAgICAgICAgICAgICAge2xlYXJuaW5nUGFnZVVybHMubWFwKCh1cmwsIGkpID0+XG4gICAgICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2l9IHZhbHVlPXt1cmx9Pnt1cmx9PC9vcHRpb24+KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA8L3NlbGVjdD48L3RkPjwvdHI+fVxuICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGhyIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbXBvbmVudFJvd1wiPlxuICAgICAgICA8U2VsZWN0ZWRDb21wb25lbnQgey4uLnRoaXMuc3RhdGUuc2VsZWN0ZWRDb21wUHJvcHN9IC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tcG9uZW50QXJlYVwiIHJlZj17ZGl2ID0+IHRoaXMuY29tcG9uZW50QXJlYSA9IGRpdn0+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndlZWstcGxhbm5lclwiPlxuICAgICAgICAgIHt0aGlzLnN0YXRlLnNlbGVjdGVkQ29tcG9uZW50ID09PSAnTGVhcm5pbmdUYXNrcycgJiZcbiAgICAgICAgICAgIDxXZWVrUGxhbm5lciB2aWV3Q291cnNlVXJsPVwiaHR0cDovL3d3dy5zdnQuc2UvbnloZXRlclwiIGVudj17ZW52fS8+XG4gICAgICAgICAgfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDwvTGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyPiA6IDxDaG9vc2VVc2VyIC8+XG4gIH1cbn1cblxuY29uc3QgVGVzdFBhZ2UgPSBzZXR1cEludGwoaW5qZWN0SW50bChfVGVzdFBhZ2UpKTtcbmV4cG9ydCBkZWZhdWx0IFRlc3RQYWdlOyJdLCJzb3VyY2VSb290IjoiIn0=