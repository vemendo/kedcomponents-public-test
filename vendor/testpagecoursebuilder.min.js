var testpagecoursebuilder=function(e){function t(t){for(var r,i,o=t[0],l=t[1],c=t[2],d=0,m=[];d<o.length;d++)i=o[d],a[i]&&m.push(a[i][0]),a[i]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(u&&u(t);m.length;)m.shift()();return s.push.apply(s,c||[]),n()}function n(){for(var e,t=0;t<s.length;t++){for(var n=s[t],r=!0,o=1;o<n.length;o++){var l=n[o];0!==a[l]&&(r=!1)}r&&(s.splice(t--,1),e=i(i.s=n[0]))}return e}var r={},a={7:0},s=[];function i(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],l=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var u=l;return s.push([223,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return i}),n.d(t,"k",function(){return l}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return p}),n.d(t,"n",function(){return h}),n.d(t,"l",function(){return f}),n.d(t,"b",function(){return g}),n.d(t,"c",function(){return v}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return k}),n.d(t,"m",function(){return y});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function i(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(n,t),n}var o=[].concat;function l(e){return o.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function u(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],s=t.slice(1);return function(e,t){return function e(t,n,r,s){var i=t[r],o=n[r];return i===o?0:null==i?-1:null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,n,s)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function h(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function f(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r],i=t(s),o=n[i];o?o.push(s):n[i]=[s]}return n}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var s=e[r];n[t(s)]=s}return n}function b(e,t){var n,a,s={};try{for(var i=r.h(t),o=i.next();!o.done;o=i.next()){var l=o.value;l in e&&(s[l]=e[l])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(n)throw n.error}}return s}function k(e,t){var n=v(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function y(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,s=n.length;a<s;++a){var i=n[a];if(r[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},function(e,t,n){"use strict";n.d(t,"b",function(){return a});var r=n(29);r.a.env||(r.a.env={}),t.a=r.a.env;var a=r.a.env},,function(e,t,n){"use strict";var r=n(19);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(26);r.a.cfg||(r.a.cfg={}),t.b=r.a.cfg;var a=r.a.cfg},,,function(e,t,n){"use strict";var r=n(3),a=n(4),s=n(19),i=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(24);function l(e,t){return o.a[e].relationships[t]}function c(e,t){var n=function(e){var t=function(e){return!0};return e.from?u(t,function(t){return t.dateTime>=e.from}):e.to?u(t,function(t){return t.dateTime<e.to}):e.ids?u(t,function(t){return e.ids.includes(t.id)}):e.name?u(t,function(t){return t.name===e.name}):e.tags?u(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function u(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var p=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var s=a[r];localStorage.setItem("cache-bust-"+n+"-"+s,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+l(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),h=n(15);function f(e,t){for(var n=Object.keys(t),r=e,s=0,i=n;s<i.length;s++){var o=i[s];r===e&&(r=a.a({},e));var l=t[o];if(l&&"object"==typeof l){var c=Object.keys(l).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var u=function(e){var t=l[e];switch(e){case"$unset":r.$wasUnset=!0;break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var s=0,i=n;s<i.length;s++){var c=i[s];a.includes(c)||a.push(c)}break;case"$remove":var u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!u.includes(e)})}},d=0,m=c;d<m.length;d++){u(m[d])}continue}}r[o]=l}return r}function g(e,t,n){for(var r=(void 0===n?{removeUnsetProps:!1}:n).removeUnsetProps,s=Object.keys(t),i=a.a({},e),o=0,l=s;o<l.length;o++){var c=l[o],u=t[c];if(u&&"object"==typeof u){var d=Object.keys(u).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var m=function(e){var t=u[e];switch(e){case"$unset":r?delete i[c]:i[c]={$unset:0};break;case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var s=o.$remove;Array.isArray(s)&&(o.$remove=s.filter(function(e){return!n.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(n):n.slice(),o.$add=d;break;case"$remove":var o,l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!l.includes(e)}),0===o.$add.length&&delete o.$add),s=(s=o.$remove)?s.concat(l):l.slice(),o.$remove=s}},p=0,h=d;p<h.length;p++){m(h[p])}continue}}i[c]=u}return i}var v=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(s=r[n]).op||s.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==s.op||s.targetBranchId&&s.branchId!==this.query.branchId&&s.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===s.op&&(s.deltaDoc.tags&&this.query.tags||s.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:i=this.getDataWithMutationsApplied(e,!1,this.data),this.data=i,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,s=this.includes,i=this.query,o=i.hasEdgesFrom?[].concat(i.hasEdgesFrom||[]):[],c=i.tags?[].concat(i.tags||[]):[];switch(t.op){case"update":return Object(h.e)(e,function(e){if(e.id===t.id){var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return s.forEach(function(r){var s,i=e[r];if(i){var o=Object(h.e)(i,function(e){if(e.id!==t.id)return e;var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==i&&(e=a.a({},e,((s={})[r]=o,s)))}}),e});case"add-related":if(r===t.table&&-1!==s.indexOf(t.graphProp))return Object(h.e)(e,function(e){var r;if(e.id!==t.id)return e;var s=a.a({},t.relatedDoc);return n&&(s.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([s]),r))});if(i.hasEdgesFrom&&o.includes(t.id)&&r===l(t.table,t.graphProp)){if(!i.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return i.ids&&i.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==s.indexOf(t.graphProp)?Object(h.e)(e,function(e){var r,s=e[t.graphProp];return s?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?s.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):s.filter(function(e){return e.id!==t.relatedDoc.id}),r)):e}):i.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(i.include){var u=s.map(function(e){return{label:e,table:l(r,e)}}).filter(function(e){return e.table===t.table});if(u.length>0)return Object(h.e)(e,function(e){return u.forEach(function(r){var s,i=r.label,o=e[i];o&&(e=a.a({},e,((s={})[i]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),s)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),b=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new i(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return v.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesFrom",e)},t.prototype.hasEdgesTo=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesTo",e)},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:p.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new s.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.undoLink=function(e,t,n){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(35).a),k=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===v.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var s=a.find(function(t){return o.a[r.table].relationships[t]===e});if(s){for(var i={},l=0,u=r.data;l<u.length;l++){var d=u[l];c(t,d[s]).forEach(function(e){return i[e.id]=e})}var m=Object.keys(i).map(function(e){return i[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var p=c(t,r.data);return t.ids.every(function(e){return p.some(function(t){return t.id===e})})?{value:p}:"continue"}},s=0,i=this.queries;s<i.length;s++){var l=a(i[s]);if("object"==typeof l)return l.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,s=this.findQuery(n,r);s?s.timeoutHandle&&(clearTimeout(s.timeoutHandle),s.timeoutHandle=null):(s=new v(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(s)),s.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,s=(n.repo,this.findQuery(r,a));s&&(s.unsubscribe(e),0===s.subscriptions.length&&(s.timeoutHandle=setTimeout(function(){0===s.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==s}))},this.queries.length>50?500:3e5)))},e}(),y=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return l(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return l(e,t)})).some(function(e){return l(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),s=e.length,i=function(t){var s=e[t];if("update"===s.op){var i=r.findIndex(function(e){return"update"===e.op&&e.branchId===s.branchId&&e.id===s.id});i>=0&&(n[t]=a.a({},s,{deltaDoc:g(s.deltaDoc,r[i].deltaDoc)}),r.splice(i,1))}},o=0;o<s;++o)i(o);return n.concat(r)},e}(),E=n(40);function w(e,t,n,r,s,i){for(var o=function(n){switch(n.op){case"add-related":i||n.branchId!==e||(t=[{type:"add",sourceId:n.id,targetId:n.relatedDoc.id,label:n.graphProp,sourceTable:n.table,$meta:r?"adding":"persisted",dateTime:Date.now(),targetName:n.relatedDoc.name,contributor:s}].concat(t));break;case"clear-branch":n.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(n.branchId===e)t=[];else if(n.targetBranchId===e&&!r)return{value:null};break;case"remove-related":if(i||n.branchId!==e)return"continue";t=[{type:"remove",sourceId:n.id,targetId:n.relatedDoc.id,targetName:n.relatedDoc.name,label:n.graphProp,sourceTable:n.table,contributor:s,dateTime:Date.now(),$meta:r?"adding":"persisted"}].concat(t);break;case"undo-link":if(n.branchId!==e)return"continue";if((l=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===n.id&&e.targetId===n.relatedId}))<0)return"continue";if(r){var o=t[l];t=t.slice(0,l).concat([a.a({},o,{$meta:r?"removing":"persisted"})],t.slice(l+1))}else t=t.slice(0,l).concat(t.slice(l+1));break;case"update":if(n.branchId!==e)return"continue";var l;if((l=t.findIndex(function(e){return"modify"===e.type&&e.targetId===n.id}))<0&&!i)t=[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:n.deltaDoc,dateTime:Date.now(),contributors:[s],$meta:r?"adding":"persisted"}].concat(t);else{var c=t[l],u=c.contributors.slice();u.includes(s)||u.push(s);var d=g(c.data,n.deltaDoc,{removeUnsetProps:!0});t=r||0!==Object.keys(d).length?[{type:"modify",table:n.table,targetId:n.id,targetName:n.targetName,data:d,dateTime:Date.now(),contributors:u,$meta:r?"updating":"persisted"}].concat(t.slice(0,l),t.slice(l+1)):t.slice(0,l).concat(t.slice(l+1))}}},l=0,c=n;l<c.length;l++){var u=o(c[l]);if("object"==typeof u)return u.value}return t}var T=function(){function e(e,t,n){this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var n=(void 0===t?{optimistic:!1}:t).optimistic,r=0,a=Object.keys(this.lookup);r<a.length;r++){var s=a[r],i=this.lookup[s];if(i.value){var o=w(i.query.branchId,i.value,e,n,this.getUserDisplayName(),!!i.query.tags);null===o&&(n||i.fetch()),o!==i.value&&(i.optimisticValue=o,n||(i.value=o),i.notify(o))}}},e.prototype.subscribe=function(e,t){var n=this,r=this.lookup[e.branchId+e.tags];r||(r=new S(this.getClient(),e),this.lookup[e.branchId+e.tags]=r),r.cleanupTimer&&(clearTimeout(r.cleanupTimer),r.cleanupTimer=null);var a={unsubscribe:function(){r.subscribers=r.subscribers.filter(function(e){return e.observer!==t}),0===r.subscribers.length&&(r.cleanupTimer=setTimeout(function(){0===r.subscribers.length&&delete n.lookup[e.branchId+e.tags]},100))}};return r.subscribers.push({observer:t,subscription:a}),r.value?t(r.optimisticValue||r.value,null,a):r.isFetching||(r.error?t(null,r.error,a):r.fetch()),a},e}(),S=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(n){t===e.fetchOperationId&&(e.isFetching=!1,n.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=n,e.optimisticValue=n,e.notify(n))}).catch(function(n){t===e.fetchOperationId&&(e.isFetching=!1,e.error=n,e.fail(n))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=r.sent()).status>=300||e.status<200?(t=s.c.bind,n=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(s.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent()]}})})},e.prototype.notify=function(e){for(var t=0,n=this.subscribers;t<n.length;t++){var r=n[t];(0,r.observer)(e,null,r.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var n=0,r=t;n<r.length;n++){var a=r[n];(0,a.observer)(null,e,a.subscription)}},e}(),C=function(){function e(e,t,n,r,a){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new T(n,r,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,s,i;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),s=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]},targetName:null}}),p.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(y.merge(e,s),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return i=a.sent(),this.persistedVersion.dispatchError(i),i&&i.name&&i.name.startsWith("http4")?(this.dispatchError(i,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(i,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new s.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),N=function(e){function t(t,n){var r=e.call(this,function(e){return r.deltaCache.subscribe(n,e)})||this;return r.deltaCache=t,r.query=n,r}return a.c(t,e),t.prototype.tags=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),O=function(){function e(e,t,n,r,a,s,i,l){var c=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=n,this.defaultQueryOptions=r,this.mutationQueue=a,this.querySet=s,this.writer=i,this.cacheOptimized=l,r||(this.defaultQueryOptions={}),a||(this.mutationQueue=new y),s||(this.querySet=new k(this.mutationQueue)),i||(this.writer=new C(this.mutationQueue,this.querySet,e,t,n)),Object.keys(o.a).forEach(function(e){var t=new b(c,e,r||{});l&&(t=t.cacheOptimized()),c[e]=t}),this.deltas=new N(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new b(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var D=n(5),I=n(7);n.d(t,"c",function(){return x}),n.d(t,"d",function(){return j}),n.d(t,"b",function(){return R}),n.d(t,"a",function(){return U});var x=new O(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""},function(){return r.a.currentUser?r.a.currentUser.displayName||r.a.currentUser.mail:""}),j=Object(D.i)(I.b.KED_REALM),R={standardSchool:x.schools.name("standard").cacheOptimized().single(),get mySchool(){return x.schools.name(r.a.currentUser.school).cacheOptimized().single()}},U={getBranchId:function(e,t){return e.switchMap(function(e){return x.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return x.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return x.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(D.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return x.courseBlocks.tags(e).idsOnly().concat(x.courseContents.tags(e).idsOnly()).concat(x.courseTabs.tags(e).idsOnly()).concat(x.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";var r=n(1),a=n(5);var s=n(16);n.d(t,"a",function(){return i}),n.d(t,"c",function(){return l}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return p});var i=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function l(e,t){return o(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function u(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,i=Object(s.b)(location.search),o=r.a({},i,{role:t,school:n}),l=Object(s.a)(o);a?location.href=""+a+l:(location.hash="#",location.search=l)}};function m(e){d.actAs(e)}function p(e,t){var n,a,o=Object(s.b)(location.search),l={};try{for(var c=r.h(i),u=c.next();!u.done;u=c.next()){var d=u.value;o[d]&&(l[d]=o[d])}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var m=Object(s.a)(r.a({},l,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+m+e.substr(p):""+e+m}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return l});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(s.apply(Uint8Array,[void 0,r.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function l(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var s=e[r],i=t(s);i!==s&&(n===e&&(n=e.slice()),n[r]=i)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),s=t[0],i=t[1];return a[n?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"l",function(){return m}),n.d(t,"c",function(){return p}),n.d(t,"h",function(){return h}),n.d(t,"i",function(){return f}),n.d(t,"n",function(){return g}),n.d(t,"k",function(){return v}),n.d(t,"d",function(){return b}),n.d(t,"m",function(){return k}),n.d(t,"b",function(){return y}),n.d(t,"g",function(){return w}),n.d(t,"a",function(){return T}),n.d(t,"j",function(){return S}),n.d(t,"f",function(){return C}),n.d(t,"e",function(){return N});var r=n(1),a=n(6),s=n.n(a),i=n(5),o=n(39),l=n.n(o),c=n(12),u=n.n(c),d=n(3);function m(e,t,n,a,s){var o,c,u={},d=t.id,m=function(o){var l,c,m,p,h,f,g=a[o],v=e[o]||[],b=t[o];if(!b)return"continue";var k=b.map(function(e,t){return{doc:e,idx:t}}),y=k.filter(function(e){return!v.some(function(t){return t.id===e.doc.id})});try{for(var E=r.h(y),w=E.next();!w.done;w=E.next()){var T=w.value,S=(R=r.a({},T.doc)).$meta;delete R.$meta,"add"===S?(R.id||(R.id=Object(i.h)()),s.add(g,R)):"update"===S&&s.put(g,R),s.link(n,d,g,R.id,o),u[o]||(u[o]={}),u[o][T.idx]={$set:R}}}catch(e){l={error:e}}finally{try{w&&!w.done&&(c=E.return)&&c.call(E)}finally{if(l)throw l.error}}var C=v.filter(function(e){return!b.some(function(t){return t.id===e.id})});try{for(var N=r.h(C),O=N.next();!O.done;O=N.next()){var D=O.value;s.unlink(n,d,g,D.id,o)}}catch(e){m={error:e}}finally{try{O&&!O.done&&(p=N.return)&&p.call(N)}finally{if(m)throw m.error}}var I=k.filter(function(e){return v.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var x=r.h(I),j=x.next();!j.done;j=x.next()){var R,U=j.value;delete(R=r.a({},U.doc)).$meta,s.put(g,R),u[o]||(u[o]={}),u[o][U.idx]={$set:R}}}catch(e){h={error:e}}finally{try{j&&!j.done&&(f=x.return)&&f.call(x)}finally{if(h)throw h.error}}};try{for(var p=r.h(Object.keys(a)),h=p.next();!h.done;h=p.next()){m(h.value)}}catch(e){o={error:e}}finally{try{h&&!h.done&&(c=p.return)&&c.call(p)}finally{if(o)throw o.error}}return l()(t,u)}function p(e){return s()(e).format("YYMMDD HH:mm")}function h(e){return s()(e).format("YYMMDD")}function f(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function g(e,t,n){return l()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function v(e,t,n){return l()(t,{createdDate:{$set:e},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function b(e){return e.email?e.email:e.url&&e.url.startsWith("mailto:")?e.url.substring("mailto:".length):e.url}function k(e,t){var n=Date.now();return(e=g(n,e,t)).createdBy||(e=v(n,e,t)),e}function y(e,t,n){var a,s,i=r.a({},e),o=t[e.id];o&&(i.$etag=o);try{for(var l=r.h(n),c=l.next();!c.done;c=l.next()){var u=c.value,d=e[u].map(function(e){return y(e,t,[])});i[u]=d}}catch(e){a={error:e}}finally{try{c&&!c.done&&(s=l.return)&&s.call(l)}finally{if(a)throw a.error}}return i}function E(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function w(e){return E(0,function(t){return t.readAsText(e)})}function T(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function S(e){var t=u()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function C(e,t){return r.b(this,void 0,void 0,function(){var n,a,s,i,o,l,c;return r.d(this,function(u){switch(u.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,s=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),s&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return i=r.f.apply(void 0,[u.sent(),3]),o=i[0],l=i[1],c=i[2],o.tasks=l,o.abilities&&o.abilitiesOrder&&(o.abilities=o.abilitiesOrder.map(function(e){return o.abilities.find(function(t){return t.id===e})})),o.knowledgeRequirements&&o.knowledgeRequirementsOrder&&(o.knowledgeRequirements=o.knowledgeRequirementsOrder.map(function(e){return o.knowledgeRequirements.find(function(t){return t.id===e})})),o.centralContent&&o.centralContentOrder&&(o.centralContent=o.centralContentOrder.map(function(e){return o.centralContent.find(function(t){return t.id===e})})),a&&(o.templateChain=c),[2,o]}})})}function N(e,t){return t.filter(function(t){return!e.includes(t)}).length>0||e.filter(function(e){return!t.includes(e)}).length>0}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=r.createContext({intl:null})},function(e,t,n){"use strict";var r=n(4),a=n(15),s=n(30),i=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,s,i){return r.b(this,void 0,void 0,function(){var o,l,c,u,d,m,p,h,f,g,v;return r.d(this,function(b){switch(b.label){case 0:return i&&"no-cache"===i.cache&&(s=r.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),c=(l=this).authHeader,u=l.tokenInfo,d=l.bearerProvider,c||u||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=u=b.sent(),b.label=2;case 2:return u?u.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=u=b.sent(),b.label=4;case 4:c="Bearer "+u.token,b.label=5;case 5:return c&&(n.Authorization=c),h=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 6:return 401==(f=b.sent()).status&&this.bearerProvider?(g=f.headers.get("www-authenticate"),console.log("Got "+f.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(v=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return v.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(h,r.a({},this.fetchOptions,{headers:n,method:t},i))];case 8:f=b.sent(),b.label=9;case 9:return[2,f]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,s,o,l){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=l,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),l=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),s=n[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(r,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var u=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return l}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return i}),n.d(t,"c",function(){return u});var d=function(){function e(e,t,n){this.http=new i(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var s,i,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(s=r.sent()).status?[3,3]:(i=u.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(u,o.concat([r.sent()])));case 3:return[4,s.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,i,o;return r.d(this,function(l){switch(l.label){case 0:return a=r.a({},t),location.search.includes("useSP")&&(a.flags=(a.flags||[]).concat(["useSP"])),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(s=l.sent()).status?[3,3]:(i=u.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(u,o.concat([l.sent()])));case 3:return[4,s.json()];case 4:return[2,l.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,s;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,s.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=u.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(u,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(s){return s.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(s){return s.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(s){return s.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(s){return s.unlink2(e,t,r,n,a)})},e.prototype.undoLink=function(e,t,n,r,a){return this.do(function(s){return s.undoLink(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e.prototype.undoLink=function(e,t,n,r,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e}()},function(e,t,n){"use strict";var r=n(1),a=n(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,n=e.numberOfTasks,r=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,i=e.backgroundColor,o=e.progressColor,l=[];if(n>s)return a.createElement("div",{className:"progress-overview"}," ",r," / ",n," ");for(var c=1;c<=n;c++)l.push(a.createElement("svg",{key:c},a.createElement("circle",{className:"circle-chart-background",fill:c>r?i:o,cx:"8",cy:"8",r:"8"})));return l},t}return r.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);n.d(t,"a",function(){return i});var i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,i=t.className,o=t.children,l=t.headerClassName,c=t.contentClassName,u=t.displayProgress,d=t.progressData,m=t.inactivated,p=t.inactivatedRender,h=this.state.headerOpen;return m?"titleAndChildren"===p?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,n),a.createElement(a.Fragment,null,o)):a.createElement(a.Fragment,null,o):a.createElement("div",{className:(i||"")+" openClose"+(h?" open":"")},a.createElement("div",{className:"openHeader"+(l?" "+l:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,n),u&&a.createElement(s,r.a({},d)))),a.createElement("div",{className:"openContent"+(c?" "+c:"")},o))},t}(a.Component)},function(e,t,n){"use strict";var r=n(4),a=n(19),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=n(15);function o(e){e.resources||(e.resources=[])}function l(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var u=JSON.parse(c),d=u.time,m=u.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return l(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return l(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var p=new s,h=Date.now(),f=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-h>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[r.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},v=function(e){function t(t,n,r){var a="string"!=typeof n?n:new f(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,g,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return p}),n.d(t,"b",function(){return f}),n.d(t,"c",function(){return g}),n.d(t,"a",function(){return v})},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return l}),n.d(t,"a",function(){return c});var r=n(1),a=n(6),s=n.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e,t){var n=null;n=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var r=s()(n.toString(),"YYYY");return 1!=r.week()&&(r=r.clone().add(1,"week")),t?[s()(r.clone()).week(32).startOf("week"),s()(r.clone()).week(51).endOf("week")]:[s()(r.clone()),s()(r.clone()).week(25).endOf("week")]}function l(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},,function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},function(e,t,n){"use strict";var r=n(56);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b})},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},,,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(31).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(4),a=n(32),s=n(43),i=n(35),o=n(48),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,n,r=!1,a=this.subscribe(function(a,s,i){r=!0,e=a,t=s,s&&n?n(null,s,i):n&&n(a,null,i)});if(r){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,l=s.observer;return i.push(a),n=l,e}throw new Promise(function(e,t){n=function(n,r,a){a.unsubscribe(),r?t(r):e(n)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,s=[null,null],i={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,s={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,i,o){if(a=o,r&&(r.unsubscribe(),r=null),i)t(null,i,s);else try{var l=e(n);l&&"function"==typeof l.subscribe?r=l.subscribe(function(e,n,a){r=a,t(e,n,s)}):t(l,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);l.prototype.map=Object(s.a)(l)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},,function(e,t,n){"use strict";var r=n(40);n.d(t,"a",function(){return r.b}),n.d(t,"b",function(){return r.c})},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(4),a=n(32),s=n(43),i=n(31),o=n(30),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);l.prototype._map=Object(s.a)(l)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,l=e.title;return s.createElement("div",{title:l||Object(i.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},,,function(e,t,n){"use strict";n(32),n(31);var r=n(35);n.d(t,"a",function(){return r.a});var a=n(30);n.d(t,"b",function(){return a.a});var s=n(48);n.d(t,"c",function(){return s.a})},function(e,t){e.exports=ReactDOM},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r=n(1),a=n(5),s=n(22),i=n(6),o=n.n(i);var l=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(n=n.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:n}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:n})},e}(),c=n(2),u=n(51),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};n.d(t,"b",function(){return p}),n.d(t,"a",function(){return h});var m,p=function(){function e(t,n,s,i){var o=this;this.http=new a.f(t,n,{bearerProvider:s}),this.userEmailGetter=i;var l=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){l(e)&&(o[e]=function(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var n=(t=r.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),i={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))l(o);function l(t){Object.keys(t).forEach(function(o){!s.hasOwnProperty(o)&&n(o)&&(s[o]=function(){for(var n=[],s=0;s<arguments.length;s++)n[s]=arguments[s];var l=JSON.stringify(r.g([o],n)),c=i[l];if(void 0!==c){if(c.promise)throw c.promise;if(c.error)throw c.error;if(c.timeout>Date.now())return c.value}try{var u=t[o].apply(e,n).then(function(e){i[l]={timeout:Date.now()+a,value:e}}).catch(function(e){i[l]={timeout:Date.now()+a,error:e}});throw i[l]={timeout:Date.now()+a,promise:u},u}catch(e){if(e.then)throw e;i[l]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:l})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i,o;return r.d(this,function(l){switch(l.label){case 0:return l.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=l.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([l.sent()])));case 3:return[4,n.json()];case 4:return[2,l.sent().courses];case 5:throw o=l.sent(),console.error("Error from EDS: "+o),new Error(Object(c.a)(m||(m=r.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return r.b(this,void 0,void 0,function(){var t,n,s,i;return r.d(this,function(r){switch(r.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=r.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(a.c,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=a.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTuitionGroups",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("TuitionGroupStudents",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return r.b(this,void 0,void 0,function(){var t,n,s;return r.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTeachers",r.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(n=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,l,c,d,m,p,h;return r.d(this,function(r){switch(e){case"en_sin":return[2,u.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,u.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return n=[],a=Object(s.d)(t,!0),i=Object(s.d)(t,!1),l=a[0],c=i[0],d=a[1],m=i[1],p={startDate:new Date(l.year(),l.month(),l.date()).toDateString(),endDate:new Date(l.year(),d.month(),d.date()).toDateString()},h={startDate:new Date(c.year(),c.month(),c.date()).toDateString(),endDate:new Date(c.year(),m.month(),m.date()).toDateString()},[2,{firstTerm:p,secondTerm:h,holidays:n}]}return[2]})})},e}(),h=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new l(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new l({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},function(e,t,n){"use strict";n.d(t,"b",function(){return m}),n.d(t,"a",function(){return y});var r=n(1),a=n(0),s=n(105),i=n(17),o=n(2),l=n(5),c=n(3),u=[{name:"schools",text:Object(o.a)(p||(p=r.e(["Skolor"],["Skolor"]))),route:"/schools"},{name:"subjects",text:Object(o.a)(h||(h=r.e(["Ämnen"],["Ämnen"]))),route:"/subjects"}],d=[{name:"courseBuilder",text:Object(o.a)(f||(f=r.e(["Kursbyggaren"],["Kursbyggaren"]))),route:"/courses/new"},{name:"studentPage",text:Object(o.a)(g||(g=r.e(["Elevsida"],["Elevsida"]))),route:""},{name:"feedback",text:a.createElement("span",null,a.createElement("i",{className:"fa fa-commenting-o","aria-hidden":"true"})," Feedback"),route:"https://kg.kunskapsporten.se/kursbyggaren/"}];function m(e,t,n,r){var a=Object(l.h)();n.update({imageId:{$set:a},images:{$set:[{id:a,url:r,acl:["role:USER:R","schoolRole:"+c.a.currentUser.school+"/EMPLOYEE:S"],$meta:"add"}]}})}var p,h,f,g,v,b,k,y=function(e){var t=e.title,n=(e.isTemplate,e.host),l=e.course,p=(e.origCourse,e.backgroundImage),h=e.activePage,f=c.a.currentUser.roles.some(function(e){return"ADMIN"===e}),g=d;return f&&(g=u.concat(g)),a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},p&&a.createElement("style",null,"\n        .pageHeader {\n          background-image: url('"+p+"') !important;\n        }\n      "),a.createElement("div",{className:"pageHeader",onDragOver:l&&i.a,onDrop:l&&function(e){return function(e,t,n,a){return r.b(this,void 0,void 0,function(){var n,a,s,i,l,u,d,p;return r.d(this,function(h){switch(h.label){case 0:return e.stopPropagation(),e.preventDefault(),n=e.dataTransfer.files,a=null,s=Array.from(e.dataTransfer.items),n.length>0?(i=n[0]).size>2097152?(Object(o.n)(Object(o.a)(v||(v=r.e(["Kan inte ladda upp bilder större än 2 MB"],["Kan inte ladda upp bilder större än 2 MB"])))),[2]):((l=new FormData).append("files",i),[4,c.a.kedBackendClient.http.fetch("web-upload","put",{},{},{body:l})]):[3,3];case 1:return 200!==(u=h.sent()).status?(Object(o.n)(Object(o.a)(b||(b=r.e(["Kunde inte ladda upp filen till Google Storage"],["Kunde inte ladda upp filen till Google Storage"])))),[2]):[4,u.text()];case 2:return a=h.sent(),[3,7];case 3:d=function(e){var t;return r.d(this,function(n){switch(n.label){case 0:return(t=s[e]).type.match("^text/uri-list")?[4,new Promise(function(e){return t.getAsString(e)})]:[3,2];case 1:a=n.sent(),n.label=2;case 2:return[2]}})},p=0,h.label=4;case 4:return p<s.length?[5,d(p)]:[3,7];case 5:h.sent(),h.label=6;case 6:return++p,[3,4];case 7:return null==a?(Object(o.n)(Object(o.a)(k||(k=r.e(["Kunde inte hitta någon bild i innehållet"],["Kunde inte hitta någon bild i innehållet"])))),[2]):(m(0,0,t,a),[2])}})})}(e,n)}},a.createElement("a",null,a.createElement("h1",null,t)),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement("div",{className:"align-horizontal"}),a.createElement("div",{className:"horizontalMenu"},a.createElement("ul",null,g.map(function(t){return{item:t,isActive:h===t.name,callback:e.callbacks&&e.callbacks[t.name],givenRoute:e.routes&&e.routes[t.name],defaultRoute:t.route}}).filter(function(e){return e.callback||e.defaultRoute||e.givenRoute}).map(function(e){var t=e.item,n=e.isActive,r=e.callback,i=e.defaultRoute,o=e.givenRoute;return a.createElement("li",{key:t.name,className:n?"activePage":"",onClick:r},r?a.createElement("a",null,t.text):i||o?o||/^http[s]\:\/\//i.test(i)?a.createElement("a",{href:o||i},t.text):a.createElement(s.a,{to:i},t.text):a.createElement("a",null,t.text))})))))))))}},function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return l});var r=n(1),a=n(34),s=n(10),i=n(2);function o(e,t,n){var r=(void 0===n?{appendLeftovers:!1}:n).appendLeftovers,a={};if(!e||!t)return e;var s=e&&t?t.map(function(t){return a[t]=!0,e.find(function(e){return e.id===t})}).filter(function(e){return!!e}):e;if(r){var i=e.filter(function(e){return!a[e.id]});return s.concat(i)}return s}function l(e,t){var n,l;if(t)l=new a.a([t]);else{var c=e.tags.filter(function(e){return e.startsWith("course:")});if(0===c.length)return new a.a(e);l=(n=s.c.courses).tags.apply(n,r.g(c)).toValue()}return l.map(function(t){var n=Object(i.k)(t.map(function(e){return e.abilitiesOrder||[]})),r=Object(i.k)(t.map(function(e){return e.centralContentOrder||[]})),a=Object(i.k)(t.map(function(e){return e.knowledgeRequirementsOrder||[]})),s=Object.assign({},e);return s.abilities&&(s.abilities=o(e.abilities,n)),s.centralContent&&(s.centralContent=o(e.centralContent,r)),s.knowledgeRequirements&&(s.knowledgeRequirements=o(e.knowledgeRequirements,a)),s})}},,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=null,a=[function(){return r}];var s={get current(){return r},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},,function(e,t,n){"use strict";var r=n(11);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Minska indrag",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Öka indrag",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Vågrät linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga länk",result:function(){var e=window.prompt("Ange länkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",promptMsg:"Ange bildens URL",result:function(e,t){var n,r,a,s=window.prompt(this.promptMsg);if(s){var i=document.createElement("img");i.src=s,i.tabIndex=1,n=i,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),i.onfocus=t.onFocus,i.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},function(e){e.exports={SouthIndia:[{firstTerm:{startDate:"2015-06-01T00:00:00.000Z",endDate:"2015-10-31T00:00:00.000Z"},secondTerm:{startDate:"2015-11-01T00:00:00.000Z",endDate:"2016-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-06-23T00:00:00.000Z",endDate:"2016-10-31T00:00:00.000Z"},secondTerm:{startDate:"2016-11-01T00:00:00.000Z",endDate:"2017-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-06-05T00:00:00.000Z",endDate:"2017-10-31T00:00:00.000Z"},secondTerm:{startDate:"2017-11-01T00:00:00.000Z",endDate:"2018-03-30T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2018-06-04T00:00:00.000Z",endDate:"2018-10-31T00:00:00.000Z"},secondTerm:{startDate:"2018-11-01T00:00:00.000Z",endDate:"2019-04-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2019-06-03T00:00:00.000Z",endDate:"2019-10-31T00:00:00.000Z"},secondTerm:{startDate:"2019-11-01T00:00:00.000Z",endDate:"2020-03-27T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-06-01T00:00:00.000Z",endDate:"2020-10-31T00:00:00.000Z"},secondTerm:{startDate:"2020-11-01T00:00:00.000Z",endDate:"2021-03-26T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-06-06T00:00:00.000Z",endDate:"2021-10-31T00:00:00.000Z"},secondTerm:{startDate:"2021-11-01T00:00:00.000Z",endDate:"2022-03-25T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-06-05T00:00:00.000Z",endDate:"2022-10-31T00:00:00.000Z"},secondTerm:{startDate:"2022-11-01T00:00:00.000Z",endDate:"2023-03-31T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-06-04T00:00:00.000Z",endDate:"2023-10-31T00:00:00.000Z"},secondTerm:{startDate:"2023-11-01T00:00:00.000Z",endDate:"2024-03-29T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2024-06-03T00:00:00.000Z",endDate:"2024-10-31T00:00:00.000Z"},secondTerm:{startDate:"2024-11-01T00:00:00.000Z",endDate:"2025-03-28T00:00:00.000Z"},holidays:[]}],NorthIndia:[{firstTerm:{startDate:"2024-04-03T00:00:00.000Z",endDate:"2024-09-30T00:00:00.000Z"},secondTerm:{startDate:"2024-10-01T00:00:00.000Z",endDate:"2025-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2023-04-05T00:00:00.000Z",endDate:"2023-10-01T00:00:00.000Z"},secondTerm:{startDate:"2023-10-02T00:00:00.000Z",endDate:"2024-04-02T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2022-04-06T00:00:00.000Z",endDate:"2022-10-03T00:00:00.000Z"},secondTerm:{startDate:"2022-10-04T00:00:00.000Z",endDate:"2023-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2021-04-01T00:00:00.000Z",endDate:"2021-10-04T00:00:00.000Z"},secondTerm:{startDate:"2021-10-05T00:00:00.000Z",endDate:"2022-04-05T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2020-04-01T00:00:00.000Z",endDate:"2020-09-28T00:00:00.000Z"},secondTerm:{startDate:"2020-09-29T00:00:00.000Z",endDate:"2021-03-31T00:00:00.000Z"},holidays:[{startDate:"2020-05-17",endDate:"2020-06-28"}]},{firstTerm:{startDate:"2019-04-04T00:00:00.000Z",endDate:"2019-09-30T00:00:00.000Z"},secondTerm:{startDate:"2019-10-01T00:00:00.000Z",endDate:"2020-03-31T00:00:00.000Z"},holidays:[{startDate:"2019-05-19",endDate:"2019-06-29"}]},{firstTerm:{startDate:"2018-04-04T00:00:00.000Z",endDate:"2018-09-30T00:00:00.000Z"},secondTerm:{startDate:"2018-10-01T00:00:00.000Z",endDate:"2019-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2017-04-05T00:00:00.000Z",endDate:"2017-10-02T00:00:00.000Z"},secondTerm:{startDate:"2017-10-03T00:00:00.000Z",endDate:"2018-04-03T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2016-04-06T00:00:00.000Z",endDate:"2016-10-03T00:00:00.000Z"},secondTerm:{startDate:"2016-10-04T00:00:00.000Z",endDate:"2017-04-04T00:00:00.000Z"},holidays:[]},{firstTerm:{startDate:"2015-04-01T00:00:00.000Z",endDate:"2015-10-05T00:00:00.000Z"},secondTerm:{startDate:"2015-10-06T00:00:00.000Z",endDate:"2016-04-05T00:00:00.000Z"},holidays:[]}]}},,,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(11),i=new DOMParser,o={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function l(e){for(var t=i.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)c(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function c(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&o[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),u(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),s=a.name&&!!t[a.name.toLowerCase()];s||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),u(e)&&(t=!0),t}function u(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)c(n.item(r))&&(t=!0);return t}var d=n(75);n.d(t,"a",function(){return b});var m="wysiwyg-actionbar",p="wysiwyg-button",h="wysiwyg-content",f="wysiwyg-focusrect",g="wysiwyg-focuspoint",v="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.querySelector(".wysiwyg-content").addEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").addEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length||0)},t.prototype.componentWillUnmount=function(){document.querySelector(".wysiwyg-content").removeEventListener("mousedown",this.onMouseDown),document.querySelector(".wysiwyg-content").removeEventListener("mousemove",this.onMouseMove),document.querySelector(".wysiwyg-content").removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||l(e.html)!==l(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(l(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:k(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(g)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),s=a.next();!s.done;s=a.next()){switch(s.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:k(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d.a,i=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(i=i.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta vänster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta höger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden på egen rad",result:function(){return e("unfloat")}}])));var o=this.state.focusRect,c=this.props,u=c.readOnly,b=c.reportNumChars,k=c.maxChars;return a.createElement("div",{className:this.props.className},!u&&a.createElement("div",{className:m},i.map(function(e,n){return a.createElement("button",{key:n,className:p,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:u?v:h,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:l(this.props.html)},contentEditable:!u,onPaste:function(e){if(!isNaN(k)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>k&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:0)}:null,onKeyPress:isNaN(k)?null:function(e){var t=e.target.innerText;t&&t.length>=k&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){u||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(s.a)("outdent"):Object(s.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),o&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:f,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:g+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:g+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:g+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:g+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function k(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},function(e,t,n){"use strict";n.d(t,"e",function(){return u}),n.d(t,"b",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"f",function(){return p}),n.d(t,"d",function(){return h}),n.d(t,"c",function(){return f});var r,a,s,i,o=n(1),l=n(2),c=n(17);function u(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function d(e){return m([e],e.tasks)}function m(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function p(e){return Object(l.k)([function(e){var t={};return Object(l.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(l.a)(r||(r=o.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(l.a)(a||(a=o.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(l.a)(s||(s=o.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(l.a)(i||(i=o.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function h(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}function f(e){return e.responsibleTeachers.map(function(e){return{name:e.name,email:Object(c.d)(e),access:e.access||"edit"}})}},function(e,t,n){"use strict";n.d(t,"a",function(){return o}),n.d(t,"b",function(){return l});var r=n(1),a=n(16),s=n(58),i=n(7),o=function(){function e(){var e,t;this._initialized=!1;var n=function(e){Object.defineProperty(a,e,{get:function(){return this._initialized||this.init(),this._features[e]},set:function(e){throw new Error("Feature flags cannot be set here")}})},a=this;try{for(var i=r.h(Object.keys(s)),o=i.next();!o.done;o=i.next()){n(o.value)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}}return e.prototype.init=function(){var e,t;if(!this._initialized){var n=(i.a.KED_FEATURES||"").split(",").map(function(e){return e.trim().toLowerCase()}),o=Object(a.b)(location.search,{toLower:!0});o.testversion&&(n=["*"]),o.features&&(n=o.features.split(",").map(function(e){return e.trim().toLowerCase()}));var l=n.includes("*");this._features={};try{for(var c=r.h(Object.keys(s)),u=c.next();!u.done;u=c.next()){var d=u.value;this._features[d]=l||n.includes(d.toLowerCase())}}catch(t){e={error:t}}finally{try{u&&!u.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}this._initialized=!0}},e}(),l=new o},function(e,t,n){"use strict";n.d(t,"a",function(){return f});var r=n(1),a=n(9),s=n(90),i=n.n(s),o=n(91),l=n.n(o),c=n(60),u=n(61),d=n(0),m=n(7),p=n(6),h=n.n(p),f=function(e){return function(t){function n(e){var n=t.call(this,e)||this;return Object(a.c)(r.g(i.a,l.a)),n.messages={sv:c,en:u},h()().locale(m.b.KED_LOCALE),n}return r.c(n,t),n.prototype.render=function(){return d.createElement(a.b,{locale:m.b.KED_LOCALE,messages:this.messages[m.b.KED_LOCALE]},d.createElement(e,r.a({},this.props)))},n}(d.Component)}},function(e){e.exports={picker:"Integrate coursebuilder and subjectplanner with Google Picker",ksTutorComment:"Integrate KSTermplanner with tutor comments",kgTutorComment:"Integrate KSTermplanner  with tutor comments",termplannerCharts:"Integrate KSTermplanner with progress charts",weekplannerCharts:"Integrate Weekplanner with progress charts",teacherRights:"Activate course builder teacher rights",studyGroups:"Add study groups and google classroom functionality",cbCollapseBoxes:"Course Builder: Collapse modules by default",ksAssignments:"KS show hand-in assignments"}},,function(e){e.exports={"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalTitle":"Lägg till eget arbetsmål","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Framsteg diagram","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.goals":"Egna lärandemål","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoal":"Mål:","weekplanner.addLearningGoalTitle":"Lägg till eget lärandemål","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoal":"Eget lärandemål","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken"}},function(e){e.exports={"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.goals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoal":"Goal:","weekplanner.addLearningGoalTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoal":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline"}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(20),i=n(2),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,o=t.markedIds,l=t.markMode,c=t.migratedIds,u=t.uncoveredIds,d=Object(i.b)(n,function(e){return e.group||"default"}),m=Object.keys(d);return a.createElement(s.a,{title:a.createElement("p",null,r),className:"larger"},m.map(function(t){return a.createElement(a.Fragment,{key:t},1===m.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=o.some(function(e){return e===t.id}),r=c&&!!c[t.id],s=u&&u[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return l&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(l?" selectable":"")+(n?" markedGreen":s?" markedRed":"")+(r?" migrated":""),title:r?l?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"Administratör",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Andrei",mail:"andrei.spatarelu@vemendo.se",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"andrei"},{displayName:"Carl Holmberg",mail:"carl.holmberg@kunskapsgymnasiet.se",roles:["ADMIN","EMPLOYEE"],school:"Norrköping",username:"carl.holmberg@kunskapsgymnasiet.se"},{displayName:"Carl",mail:"carl@kedschools.com",roles:["ADMIN","EMPLOYEE","STUDENT"],school:"KED",username:"carl"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-Lärare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Borås",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"Borås",schoolType:"Grundskolor"},{displayName:"Elev Borlänge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"Borlänge",schoolType:"Gymnasium"},{displayName:"Roll-lös",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(10),i=n(37),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>1&&(n=n.slice(1)),{infos:[e]})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),s.c.writer.onError(this._dbWriterError),s.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),s.c.writer.off(this._dbWriterError),s.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,s=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!s}).map(function(t){var n=t.message,r=t.details,s=t.retryable,o=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(i.a,{onClick:function(){return e.removeError(n)}})),r||s?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},o?"Dölj detailer":"Visa detailjer")," "):void 0,o?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),s?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){s.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),s=n(0),i=n(2),o=function(e){function t(t){return e.call(this,t)||this}return a.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.knowledgeRequirements,n=e.markedIds,o=e.migratedIds,l=e.explainedRequirements,c=this.props,u=c.idsToMarkNotOk,d=c.markMode,m=c.onMarkChanged,p=c.onExplainedRequirementsChanged,h=["E","C","A"],f=[],g=t.slice(),v=null;!(v=h.map(function(e){var t=g.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=g[t];return g.splice(t,1),n})).every(function(e){return null===e});)f.push(v);return s.createElement("div",null,s.createElement("table",null,s.createElement("thead",null,s.createElement("tr",null,h.map(function(e){return s.createElement("th",{key:e},e)}))),s.createElement("tbody",null,f.map(function(e,t){return s.createElement(s.Fragment,{key:t},s.createElement("tr",null,e.map(function(e,t){var r=e&&n&&n.indexOf(e.id)>=0,a=e&&u&&u[e.id],i=e&&o&&!!o[e.id];return s.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:e?e.name:""},className:(d?"selectable":"")+(i?" migrated":"")+(r?" markedGreen":a?" markedRed":""),onClick:d&&e?function(){return m(e.id,!r)}:void 0,title:i?d?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0})})),l&&s.createElement("tr",null,e.map(function(e,t){var o=e&&n&&n.indexOf(e.id)>=0;return s.createElement("td",{key:t},o?s.createElement("textarea",{placeholder:Object(i.a)(r||(r=a.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!d,value:l[e.id]||"",onChange:p&&function(t){return p(e.id,t.target.value)}}):void 0)})))}))))},t}(s.Component)},function(e,t,n){"use strict";var r=n(11);t.a={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(r.a)("insertUnorderedList")}},outdent:{icon:'<i class="fa fa-outdent" aria-hidden="true"></i>',title:"Outdent",result:function(){return Object(r.a)("outdent")}},indent:{icon:'<i class="fa fa-indent" aria-hidden="true"></i>',title:"Indent",result:function(){return Object(r.a)("indent")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(r.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",promptMsg:"Enter the URL of the image",result:function(){var e=window.prompt(this.promptMsg);e&&Object(r.a)("insertImage",e)}}}},,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(e){function t(t){var n=e.call(this,["https://www.googleapis.com/auth/drive"])||this;return n.options=t||{upload:!1,multiple:!1},n}return r.c(t,e),t.prototype.show=function(){return r.b(this,void 0,void 0,function(){var e=this;return r.d(this,function(t){switch(t.label){case 0:return[4,this.ensureInited()];case 1:return t.sent(),[2,new Promise(function(t,n){var r=(new google.picker.PickerBuilder).addView((new google.picker.DocsView).setOwnedByMe(!0).setIncludeFolders(!0)).setLocale("sv").setSize(1051,650).setOAuthToken(e.authToken).setCallback(function(r){if(r.action==google.picker.Action.CANCEL)n();else if(r.action==google.picker.Action.PICKED){var a=[];r.docs.forEach(function(t){var n=t.id,r=t.mimeType,s=t.name,i=t.modifiedTime,o=t.iconUrl,l=t.url,c=r.includes("google-apps");a.push({fileId:n,mimeType:r,name:s,modifiedTime:i,canExport:c,iconUrl:o,url:l}),e.updatePermissions(n)}),console.log(a),t(a)}});e.options.upload&&r.addView((new google.picker.DocsUploadView).setIncludeFolders(!0)),e.options.multiple&&r.enableFeature(google.picker.Feature.MULTISELECT_ENABLED),e.picker=r.build(),e.picker.setVisible(!0)})]}})})},t.prototype.updatePermissions=function(e){return r.b(this,void 0,void 0,function(){return r.d(this,function(t){switch(t.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return t.sent(),gapi.client.drive.permissions.create({fileId:e,sendNotificationEmail:!1,role:"reader",type:"domain",domain:"kunskapsskolan.se"}),[2]}})})},t.prototype.downloadFile=function(e){var t=e.file,n=e.limitSize;return r.b(this,void 0,void 0,function(){var e,a=this;return r.d(this,function(r){switch(r.label){case 0:return[4,gapi.client.init({discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})];case 1:return r.sent(),t.canExport?[2,new Promise(function(e,n){gapi.client.drive.files.export({fileId:t.fileId,mimeType:"application/pdf"}).then(function(n){for(var r=n.body.length,a=new Uint8Array(new ArrayBuffer(r)),s=0;s<r;s++)a[s]=n.body.charCodeAt(s);var i=new Blob([a],{type:"application/pdf"}),o=t.name+".pdf";e(new File([i],o,{type:"application/pdf",lastModified:t.modifiedTime}))})})]:(e=function(e){return new Promise(function(t,n){var r=new XMLHttpRequest;r.open("GET","https://www.googleapis.com/drive/v3/files/"+e.fileId+"?alt=media",!0),r.setRequestHeader("Authorization","Bearer "+a.authToken),r.responseType="blob",r.onload=function(){t(new File([r.response],e.name,{type:e.mimeType,lastModified:e.modifiedTime}))},r.send()})},[2,new Promise(function(r,a){void 0!==n?gapi.client.drive.files.get({fileId:t.fileId,fields:"size"}).then(function(e){Number(e.result.size)>1024*n*1024&&a("GooglePickerError: Filsize is too laarge")}).then(function(){e(t).then(function(e){r(e)})}):e(t).then(function(e){r(e)})})])}})})},t}(n(79).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(3),s=function(){function e(e){var t;this.scopes=["https://www.googleapis.com/auth/userinfo.email","https://www.googleapis.com/auth/userinfo.profile"],(t=this.scopes).push.apply(t,r.g(e))}return e.prototype.ensureInited=function(){return r.b(this,void 0,void 0,function(){var e,t,n=this;return r.d(this,function(r){switch(r.label){case 0:return"undefined"!=typeof gapi?[3,2]:[4,this.loadGapi()];case 1:r.sent(),r.label=2;case 2:return e="421572262269-u68v5lf5o8ss5t68l8gkq3pfarh6dbkv.apps.googleusercontent.com",t=this.scopes.join(" "),[4,new Promise(function(r,s){gapi.load("client:auth2",function(){var i=!1;return console.log("loading client:auth2"),gapi.auth2.authorize({client_id:e,scope:t,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"none"},function(o){if(console.log(o),o.error)i=!0;else{var l=new Set(o.scope.split(" "));n.scopes.filter(function(e){return!l.has(e)}).length>0?(console.log("missing scopes"),i=!0):(n.authToken=o.access_token,r())}if(i)return console.log("reauthorize"),gapi.auth2.authorize({client_id:e,scope:t,response_type:"permission",login_hint:a.a.currentUser.mail,prompt:"consent"},function(e){console.log(e),e.error?s("Google Web Client: No access token"):(n.authToken=e.access_token,r())})})})})];case 3:return r.sent(),"undefined"!=typeof google&&void 0!==google.picker?[3,5]:[4,new Promise(function(e){gapi.load("picker",function(){e()})})];case 4:r.sent(),r.label=5;case 5:return[2]}})})},e.prototype.loadGapi=function(){return new Promise(function(e,t){if("undefined"!=typeof gapi)return e();var n=document.createElement("script");n.src="https://apis.google.com/js/client.js?onload=gaapi_loaded",document.getElementsByTagName("head")[0].appendChild(n),window.gaapi_loaded=e})},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n.n(r),s=function(e){var t=e.size,n=void 0===t?30:t;return a.a.createElement("svg",{width:n,version:"1.1",xmlns:"http://www.w3.org/2000/svg",xmlnsXlink:"http://www.w3.org/1999/xlink",viewBox:"0 0 508.52 508.52",fill:"#ffffff",style:{verticalAlign:"middle",marginRight:"4px"}},a.a.createElement("polygon",{points:"484.492,284.58 339.024,32.577 169.496,32.577 314.996,284.58"}),a.a.createElement("polygon",{points:"145.437,74.276 0,326.279 84.764,473.05 230.169,221.143"}),a.a.createElement("polygon",{points:"234.396,316.363 143.371,475.943 423.756,475.943 508.52,316.36"}))},i=function(e){var t=e.label,n=void 0===t?"Google Drive":t,r=e.action;return a.a.createElement("a",{className:"btn",onClick:r},a.a.createElement(s,{size:16})," ",n)}},,,,,,,,,,,,,function(e,t,n){"use strict";(function(e){var t=n(7);t.b.ENVIRONMENT="test",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,n(119))},function(e,t,n){"use strict";n(93);var r=n(1),a=n(16),s=n(21),i=n(5),o=n(7),l=n(3),c=n(14),u=n(2);function d(e,t,n){var s=Object(a.b)(t),i=Object(u.e)(s,c.a),o=r.f(Object(a.c)(e),2),l=o[0],d=o[1],m=Object(a.b)(d);return l+Object(a.a)(r.a({},m,i,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function p(e,t,n){return new i.e(s.c,s.d,e+t.mail+location.search,o.b.KED_CLIENT_ID,o.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var h,f,g=l.a.currentUser&&l.a.currentUser.mail;if(g)if(o.b.KED_TOKEN_PATH){var v=d(o.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);l.a.bearerProvider=(f=m(h=v,g),new s.b(h,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){l.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,f),{token:t.token,expires:Date.now()+354e4}},f)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(l.a.currentUser=JSON.parse(t))}(m(v,g));var b=d(o.b.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);l.a.googleTokenProvider=function(e,t){var n=m(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,g)}else{if(!(o.b.KED_TOKEN_URL&&o.b.KED_CLIENT_ID&&o.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");l.a.bearerProvider=p(o.b.KED_TOKEN_URL,l.a.currentUser,["kedbackend","EDS"]),l.a.googleTokenProvider=p(o.b.KED_TOKEN_URL+"/google",l.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}l.a.kedBackendClient=new s.a(o.b.KED_API_URL,l.a.bearerProvider);var k=n(44);l.a.edsClient=new k.b(s.c,o.b.EDS_API_URL,l.a.bearerProvider,function(){return l.a.currentUser.mail})},,,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return p}),n.d(t,"b",function(){return h});var r,a,s,i=n(1),o=n(0),l=n(45),c=n(2),u=n(3),d=n(5),m=n(105),p=function(e){return o.createElement("div",{style:{outline:0}},o.createElement(l.a,{title:"Skolor",activePage:"schools",callbacks:{schools:function(){return location.hash="#/schools"}},routes:{feedback:e.feedbackUrl}}),o.createElement(h,i.a({},e)))},h=function(e){function t(t){var n=e.call(this,t)||this;return n.state=null,n}return i.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(c.n)(e)})},t.prototype.load=function(){return i.b(this,void 0,void 0,function(){var e,t;return i.d(this,function(n){switch(n.label){case 0:return this.props.id?(e=this.props.id,[4,u.a.kedBackendClient.get("schools",e)]):[3,2];case 1:return t=n.sent(),this.origSchool=i.a({},t),this.setState(i.a({},t)),[3,3];case 2:this.setState({id:Object(d.h)(),officialBranchId:Object(d.h)(),isGymnasium:"gymnasium"===this.props.type,isPrimarySchool:"primary"===this.props.type}),n.label=3;case 3:return[2]}})})},t.prototype.save=function(){return i.b(this,void 0,void 0,function(){var e,t;return i.d(this,function(n){switch(n.label){case 0:if(e=new d.a,(t=i.a({},this.state,{tags:(this.state.tags||[]).filter(function(e){return["primary","gymnasium"].indexOf(e)<0})})).isPrimarySchool&&t.tags.push("primary"),t.isGymnasium&&t.tags.push("gymnasium"),!t.isGymnasium&&!t.isPrimarySchool)throw new Error(Object(c.a)(r||(r=i.e(["Skolan måste antingen vara gymnasium eller grundskola"],["Skolan måste antingen vara gymnasium eller grundskola"]))));if(this.origSchool){if(this.origSchool.name!==this.state.name)throw new Error("Skolans namn får inte ändras. Kontakta Vemendo AB.");t.officialBranchId||(t.officialBranchId=Object(d.h)(),this.addSchoolBranch(t,e)),e.put("schools",t)}else t.acl=["role:USER:R"],t.acl.push(new d.b("schoolRole",t.name+"/EMPLOYEE","W").toString()),e.add("schools",t),this.addSchoolBranch(t,e);return[4,u.a.kedBackendClient.batch(e.mutationRequests)];case 1:return n.sent(),location.hash="#/schools",[2]}})})},t.prototype.addSchoolBranch=function(e,t){var n={id:e.officialBranchId,name:e.name,schoolId:e.id,acl:["role:USER:R",new d.b("schoolRole",e.name+"/EMPLOYEE","W").toString()]};t.add("branches",n)},t.prototype.deleteSchool=function(){return i.b(this,void 0,void 0,function(){var e,t;return i.d(this,function(n){switch(n.label){case 0:return prompt(Object(c.a)(a||(a=i.e(['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'],['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'])),this.state.name))!==this.state.name?[3,3]:[4,u.a.kedBackendClient.list("branches",{ids:[this.state.officialBranchId],include:"approvedChildren",flags:["includeIdsOnly"]})];case 1:return e=n.sent(),(t=new d.a).delete("schools",this.state.id),e[0].approvedChildren.forEach(function(e){var n=e.id;t.delete("branches",n)}),t.delete("branches",this.state.officialBranchId),[4,u.a.kedBackendClient.batch(t.mutationRequests)];case 2:return n.sent(),location.hash="#/schools",[3,4];case 3:alert("Skolan togs inte bort eftersom det namn du angav inte stämmer."),n.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=!!t.id,a=this.state,l=this.origSchool,d=u.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},o.createElement("h2",null,n),o.createElement("hr",null),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Namn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:!a||!a.name,disabled:!d||r,tabIndex:1,size:50,value:a?a.name:"",onChange:function(t){return e.setState({name:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Visningsnamn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:a&&!a.displayName,disabled:!d,tabIndex:1,size:50,value:a?a.displayName:"",onChange:function(t){return e.setState({displayName:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),a&&a.isGymnasium?o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"EDS namn (gymnasium):"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNameGymn:"",onChange:function(t){return e.setState({edsSchoolNameGymn:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})):null,a&&a.isPrimarySchool?o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"EDS namn (grundskola):"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",disabled:!d,tabIndex:1,size:50,value:a?a.edsSchoolNamePrim:"",onChange:function(t){return e.setState({edsSchoolNamePrim:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})):null,o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Typ:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"checkbox",name:"schoolTypePrimary",disabled:!d,checked:a&&a.isPrimarySchool,tabIndex:1,value:"primary",onChange:function(t){return e.setState({isPrimarySchool:t.target.checked})}})," Grundskola"),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"}),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"checkbox",name:"schoolTypeGymnasium",disabled:!d,checked:a&&a.isGymnasium,tabIndex:1,value:"gymnasium",onChange:function(t){return e.setState({isGymnasium:t.target.checked})}})," Gymnasium"),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("br",null),d&&r&&o.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.deleteSchool().catch(c.n)}},"Ta bort skola"),o.createElement("div",{className:"pull-right"}," "),o.createElement(m.a,{className:"btn btn-warning btn-large pull-right",to:"/schools"},"Avbryt"),d&&o.createElement("a",{tabIndex:1,className:"btn btn-large",onClick:function(){l&&l.name!==a.name&&!confirm(Object(c.a)(s||(s=i.e(["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."],["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."]))))||e.save().catch(c.n)}},"Spara")))},t}(o.Component)},function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"a",function(){return i});var r=n(2),a=n(46);function s(e){return Object(a.a)(e.tasks,e.taskOrder,{appendLeftovers:!0})}function i(e,t,n,s,i,o){(void 0===o?{appendLeftovers:!1}:o).appendLeftovers;var l=Object(a.a)(e,t,{appendLeftovers:!0}).map(function(e){return e.id}),c="before"===i;return Object(r.k)(l.filter(function(e){return e!==n.id}).map(function(e){return e!==s.id?e:c?[n.id,e]:[e,n.id]}))}},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),s=n(3),i=n(45),o=n(13),l=n(108),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,s.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(o.a,null));var e=this.state.subject,t=e.name;e.code,e.courseTemplates,e.schoolType;return a.createElement("div",null,a.createElement(i.a,{title:t,activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),a.createElement(l.a,{id:this.props.id}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),s=n(3),i=n(13),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,s.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(i.a,null));var e=this.state.subject,t=e.name,n=e.code,r=e.courseTemplates,s=e.schoolType;return a.createElement("div",null,"primary"===s?a.createElement(a.Fragment,null,a.createElement("h2",null,"Grundskoleämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var n=e.id,r=(e.code,e.publishable,e.points,e.schoolGrade);return a.createElement("li",{key:n,className:"complete"},t," för årskurs ",r)}))):a.createElement(a.Fragment,null,a.createElement("h2",null,"Kurser för ämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var t=e.id,n=e.name,r=(e.code,e.publishable,e.points);return a.createElement("li",{key:t,className:"complete"},n," - ",r,"p")}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n.n(a);function i(e){var t=e.taskMetas,n=e.renderEditLink,i=e.renderLink,o=e.onSort,l=r.f(Object(a.useState)({taskBeingDragged:null,taskBeingHovered:null,insertBefore:!1,originClientY:-1}),2),c=l[0],u=l[1],d=c.taskBeingDragged,m=c.taskBeingHovered,p=c.insertBefore,h=c.originClientY;return s.a.createElement("div",{className:"taskContainer sortable",onDrop:function(e){m&&d&&o(d,m,p?"before":"after"),u(r.a({},c,{taskBeingHovered:null,taskBeingDragged:null}))}},t.map(function(e){var t=e.task,a=e.isTaskOwner,o=function(e){return e.migratedTexts&&Object.keys(e.migratedTexts).some(function(t){return Object.keys(e.migratedTexts[t]).length>0})}(t),l=t.id;return s.a.createElement(s.a.Fragment,{key:l},p&&m===t?s.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "):null,s.a.createElement("div",{className:["align-horizontal","draggable",t===d&&"drag-source"].filter(function(e){return e}).join(" "),draggable:!0,onDragStart:function(e){e.dataTransfer.effectAllowed="move",u(r.a({},c,{originClientY:e.clientY,taskBeingDragged:t}))},onDragOver:function(e){d&&(d!==t?(e.preventDefault(),e.dataTransfer.dropEffect="move",u(r.a({},c,{taskBeingHovered:t,insertBefore:h>e.clientY}))):u(r.a({},c,{taskBeingHovered:null})))},onDragEnd:function(e){u(r.a({},c,{taskBeingHovered:null,taskBeingDragged:null}))}},a&&o&&s.a.createElement("div",{className:"horizontalItem top"},s.a.createElement("div",{style:{position:"relative",top:"0.2em",left:"-0.7em"}},s.a.createElement("i",{className:"fa fa-pagelines",style:{position:"absolute",top:0,left:0,color:"#49c35a"}}))),s.a.createElement("div",{className:"horizontalItem top"},n(e)),s.a.createElement("div",{className:"horizontalItem top"},i(e))),p||m!==t?null:s.a.createElement("div",{className:"drop-target",onDragOver:function(e){return e.preventDefault()}}," "))}))}},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=["Lära att lära","Samarbeta","Agera globalt","Visa handlingskraft","Vara innovativ","Leva digitalt"]},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r,a=n(1),s=n(0),i=n(2),o=n(17),l=n(70),c=n.n(l),u=function(e){function t(t){var n=e.call(this,t)||this;return n.state=n.props.resource||{name:"",url:""},n}return a.c(t,e),t.prototype.save=function(){var e=this.state;if(!c.a.isUri(e.url))throw new Error(Object(i.a)(r||(r=a.e(["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"],["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"])),e.url));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.onSave,a=t.onDelete,i=this.state,l=c.a.isUri(this.state.url);return s.createElement("div",null,s.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},s.createElement("h2",null,n),s.createElement("hr",null),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Namn:"),s.createElement("div",{className:"horizontalItem top"},s.createElement("input",{type:"text",autoFocus:!0,tabIndex:1,size:50,value:i.name,onChange:function(t){return e.setState({name:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("div",{className:"align-horizontal"},s.createElement("div",{className:"horizontalItem top"},"Länk:"),s.createElement("div",{className:"horizontalItem top "},s.createElement("input",{type:"text",tabIndex:1,size:50,value:i.url,onChange:function(t){return e.setState({url:t.target.value})}})),s.createElement("div",{className:"horizontalItem top spaced"})),s.createElement("br",null)),s.createElement("div",{className:"sv-html-portlet sv-portlet"},(i.createdDate||i.modifiedDate)&&s.createElement("div",null,i.createdDate&&s.createElement("p",null,"Resursen/Länken skapades ",Object(o.c)(i.createdDate)," av ",s.createElement("strong",null,i.createdBy.name),"."),i.modifiedDate&&s.createElement("p",null,"Resursen/Länken redigerades senast ",Object(o.c)(i.modifiedDate)," av ",s.createElement("strong",null,i.modifiedBy.name),"."),s.createElement("br",null),s.createElement("br",null)),a&&s.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return a()}},"Ta bort resurs/länk"),s.createElement("a",{tabIndex:1,className:"btn btn-large"+(l?"":" btn-inactive"),onClick:l&&function(){return r(i)}},"Spara")))},t}(s.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(0),a=n(69);function s(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"Välj användare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,s=e.school,i=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===i.length?{fontStyle:"italic"}:{}},0===i.length?"saknar roller":i.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:s?{}:{fontStyle:"italic"}},s||"saknar skola"))}))))}},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),s=function(e){function t(t){var n=e.call(this,t)||this;return n.myself=a.createRef(),n.state={text:t.text||""},n}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.tag,n=e.text,r=e.readOnly,s=t;return a.createElement(s,{contentEditable:!r,"data-placeholder":this.props.placeholder,ref:this.myself,className:this.props.className,onChange:this.onChange.bind(this),onKeyDown:this.onKeyDown.bind(this),onKeyUp:this.onKeyUp.bind(this),onBlur:this.onBlur.bind(this),onPaste:this.onPaste.bind(this),dangerouslySetInnerHTML:{__html:n}})},t.prototype.onChange=function(e){this.setState({text:this.myself.current.innerText})},t.prototype.onKeyDown=function(e){var t=this.myself.current.innerText;if("Escape"===e.key?(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.stopPropagation()):"Enter"===e.key?(e.preventDefault(),this.navigate(t,"down")):"Tab"===e.key?this.propagateOnChange(t):t.length>=this.props.maxChars&&/^[\d\w\s]$/.test(e.key)&&!e.metaKey&&!e.ctrlKey&&e.preventDefault(),!0===this.props.allowNavigation){var n=!!e.key.startsWith("Arrow")&&e.key.replace("Arrow","").toLowerCase(),r=document.getSelection().getRangeAt(0).endOffset;n&&0==t.length?this.navigate(t,n):!n||"up"!=n&&"down"!=n?n&&("left"==n&&0==r||"right"==n&&r==t.length)&&this.navigate(t,n):this.navigate(t,n)}},t.prototype.onKeyUp=function(e){var t=this.myself.current.innerText;void 0===this.props.validateValue||this.props.validateValue.test(t)||(this.myself.current.innerText=this.props.text||"",this.myself.current.blur(),e.preventDefault())},t.prototype.navigate=function(e,t){this.propagateOnChange(e),this.setState({text:e}),this.props.onNavigate(t)},t.prototype.onPaste=function(e){e.preventDefault();var t=e.clipboardData&&e.clipboardData.getData?e.clipboardData.getData("text/plain"):"";document.execCommand("insertHTML",!1,t)},t.prototype.onBlur=function(e){var t=this.myself.current.innerText;this.propagateOnChange(t),this.setState({text:t})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t}(a.PureComponent)},function(e,t,n){"use strict";var r,a,s,i=n(1),o=n(0),l=n(45),c=n(3),u=n(2),d=n(105),m=n(14),p=n(13),h=function(e){var t=e.schools,n=e.viewCourseUrl,l=c.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"editable-school-list"},o.createElement("div",null,t?o.createElement("table",null,o.createElement("tbody",null,t.map(function(e){return o.createElement("tr",{className:"align-horizontal",key:e.id},o.createElement("td",null,o.createElement(d.a,{className:"editItem",to:"/schools/"+e.id+"/edit"})),o.createElement("td",null,o.createElement("p",null,e.name)),o.createElement("td",null,o.createElement("p",null,o.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"EMPLOYEE",school:e.name})}},"Agera som lärare på denna skola"))),o.createElement("td",null,o.createElement("p",null,o.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"STUDENT",school:e.name,url:n})}},"Agera som elev på denna skola"))))}))):o.createElement("p",null,o.createElement(p.a,null),"V.g. vänta medan skolor laddas")),o.createElement("br",null),t&&l&&o.createElement(d.a,{to:"/schools/new/"+e.type,className:"btn"},"gymnasium"==e.type?Object(u.a)(r||(r=i.e(["Lägg till gymnasieskola"],["Lägg till gymnasieskola"]))):"primary"==e.type?Object(u.a)(a||(a=i.e(["Lägg till grundskola"],["Lägg till grundskola"]))):Object(u.a)(s||(s=i.e(["Lägg till skola"],["Lägg till skola"])))))};n.d(t,"a",function(){return f}),n.d(t,"b",function(){return g});var f=function(e){return o.createElement("div",{style:{outline:0}},o.createElement(l.a,{title:"Skolor",activePage:"schools",routes:{feedback:e.feedbackUrl}}),o.createElement(g,{viewCourseUrl:e.viewCourseUrl}))},g=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schools:null},n}return i.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(u.n)(e.message||e)})},t.prototype.load=function(){return i.b(this,void 0,void 0,function(){var e;return i.d(this,function(t){switch(t.label){case 0:return[4,c.a.kedBackendClient.list("schools")];case 1:return e=t.sent(),this.setState({schools:e}),[2]}})})},t.prototype.render=function(){var e=this.state.schools;return e&&e.sort(Object(u.g)("name")),o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},e?o.createElement(o.Fragment,null,o.createElement("div",null,o.createElement("h2",null,"Gymnasieskolor"),o.createElement(h,{schools:e.filter(function(e){return e.isGymnasium}),viewCourseUrl:this.props.viewCourseUrl,type:"gymnasium"})),o.createElement("div",null,o.createElement("h2",null,"Grundskolor"),o.createElement(h,{schools:e.filter(function(e){return e.isPrimarySchool}),viewCourseUrl:this.props.viewCourseUrl,type:"primary"}))):o.createElement(p.a,null)))},t}(o.Component)},,,function(e,t){},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),s=n(20),i=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.task,n=e.course,i=e.updateLink;if(!t.migratedTexts)return a.createElement(a.Fragment,null," ");var o=t.migratedTexts,l=o.abilities,c=o.centralContent,u=o.knowledgeRequirements,d=Object.keys(u||{}).map(function(e){return r.a({},n.knowledgeRequirements.find(function(t){return t.id===e}),u[e])}),m={title:"Uppdaterat kunskapskrav för betyget A",type:"knowledgeRequirements",items:d.filter(function(e){return"A"===e.gradeStep})},p={title:"Uppdaterat Kunskapskrav för betyget C",type:"knowledgeRequirements",items:d.filter(function(e){return"C"===e.gradeStep})},h={title:"Uppdaterat kunskapskrav för betyget E",type:"knowledgeRequirements",items:d.filter(function(e){return"E"===e.gradeStep})},f={title:"Uppdaterade förmågor",type:"abilities",items:Object.keys(l||{}).map(function(e){return r.a({},n.abilities.find(function(t){return t.id===e}),l[e])})},g=[m,p,h,{title:"Uppdaterat centralt innehåll",type:"centralContent",items:Object.keys(c||{}).map(function(e){return r.a({},n.centralContent.find(function(t){return t.id==e}),c[e])})},f].filter(function(e){return e.items.length>0});return 0===g.length?a.createElement(a.Fragment,null," "):a.createElement(s.a,{className:"larger",title:a.createElement("div",null,a.createElement("div",{className:"warningFlag"},a.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),a.createElement("p",null,"Uppdaterade formuleringar från Skolverket"))},g.map(function(e){var t=e.title,n=(e.type,e.items);return a.createElement("div",{key:t},a.createElement("h5",null,t),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{width:"40%"}},"Ursprunglig formulering"),a.createElement("th",{style:{width:"40%"}},"Skolverkets nya formulering"),a.createElement("th",null,"Täcker uppgiften den nya formuleringen?"))),a.createElement("tbody",null,n.map(function(e){return a.createElement("tr",{key:e.id},a.createElement("td",{dangerouslySetInnerHTML:{__html:e.oldText}}),a.createElement("td",{dangerouslySetInnerHTML:{__html:e.name}}),a.createElement("td",null,a.createElement("button",{onClick:function(){return i(e.id,!0)}},"Ja - behåll kopplingen"),a.createElement("button",{onClick:function(){return i(e.id,!1)}},"Nej - ta bort kopplingen")))}))))}))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var r=n(1),a=n(12),s=n.n(a),i=n(7),o=3e5,l=i.a.KED_KEEP_ALIVE_URL,c=Date.now();function u(){setInterval(m,o),setTimeout(function(){return s()("body").mousemove(d).keypress(d).scroll(d)},100)}function d(){c=Date.now()}function m(){Date.now()-c<o&&function(){r.b(this,void 0,void 0,function(){var e,t;return r.d(this,function(n){switch(n.label){case 0:console.log("Sending heartbeat request to "+l),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,fetch(l,{cache:"no-cache",credentials:"same-origin"})];case 2:return e=n.sent(),console.log("Response from "+l+": "+e.status+" "+e.statusText),[3,4];case 3:return t=n.sent(),console.warn("Request to "+l+" failed: "+t),[3,4];case 4:return[2]}})})}()}},,function(e,t,n){"use strict";var r=n(1),a=n(0),s=n(2),i=n(3),o=n(12),l=n.n(o);function c(e){switch(e.trim()){case"3":case"1-3":return["1-3"];case"6":case"4-6":return["4-6"];case"7-9":case"9":return["7-9"];case"1":case"1s":return["1-3"];case"1-6":return["1-3","4-6"];case"4-9":return["4-6","7-9"];default:throw new Error("Unexpected year in Skolverket XML: "+e+". Expecting 3,6,9 or 1-3, 4-6, 7-9")}}var u=n(5);function d(e,t){var n,a,s=new Set,i=new Map,o=new Set;t.forEach(function(t){if(t=t.trim(),e.has(t))i.set(t,e.get(t));else{var n=Object(u.h)();console.log("New id: "+n+". Text: "+t),i.set(t,n),o.add(n)}});try{for(var l=r.h(e.entries()),c=l.next();!c.done;c=l.next()){var d=r.f(c.value,2),m=d[0],p=d[1];-1===t.indexOf(m)&&s.add(p)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}return{removedIds:s,newTexts:i,idsToAdd:o}}var m=1;var p=new Set("alla allt att av blev bli blir blivit de dem den denna deras dess dessa det detta dig din dina ditt du där då efter ej eller en er era ert ett från för ha hade han hans har henne hennes hon honom hur här i icke ingen inom inte jag ju kan kunde man med mellan men mig min mina mitt mot mycket ni nu när någon något några och om oss på samma sedan sig sin sina sitta själv skulle som så sådan sådana sådant till under upp ut utan vad var vara varför varit varje vars vart vem vi vid vilka vilkas vilken vilket vår våra vårt än är åt över kring".split(" "));function h(e){return new Set(function(e){var t=document.createElement("div");return t.innerHTML=e,""+t.innerText}(e).replace(/[^\w\såäö]/gi,"").toLowerCase().split(/\s/).map(function(e){return e.trim()}).filter(function(e){return!!e}).filter(function(e){return!p.has(e)}))}function f(e,t,n,a,s){var i=new Map;e=e.map(function(e){return r.a({},e,{name:e.name.trim()})}).filter(function(e){return!!e.name});var o=new Map;t.forEach(function(e){return o.set(e.html,e)});var l=new Map;e.forEach(function(e){return l.set(e.name,e)}),e=e.filter(function(e){return!o.has(e.name)}),t=t.filter(function(e){return!l.has(e.html)}),e.forEach(function(e){return i.set(e.id,{gradeStep:e.gradeStep,oldText:e.name,lexemes:h(e.name),matchLevel:0})});for(var c=[];t.length>0;){var u=t[0],d=f(u);if(d){d.newText&&t.push({html:d.newText,gradeStep:d.gradeStep});var p=i.get(d.id);p.newText=u.html,p.matchLevel=d.myMatchLevel,p.newId=n.get(u.html)}else c.push(u);t.shift()}return c.forEach(function(e){i.set("fictiveOldId"+ ++m,{newId:n.get(e.html),newText:e.html,gradeStep:e.gradeStep,matchLevel:0,lexemes:new Set})}),i.forEach(function(e){var t=e.oldText,n=e.newText;t&&n&&r.g(h(t)).join(" ")===r.g(h(n)).join(" ")&&(e.isTypoFix=!0)}),console.log("IdsToMigrate",r.g(i.values()).map(function(e){var t=e.oldText,n=e.lexemes;return r.g(n).join(" ")+": "+t})),i;function f(e){var t=h(e.html);return r.g(i.entries()).filter(function(t){var n=r.f(t,2);n[0];return n[1].gradeStep===e.gradeStep}).map(function(e){var n=r.f(e,2),a=n[0],s=n[1],i=s.gradeStep,o=s.matchLevel,l=s.newText,c=s.lexemes;return{id:a,gradeStep:i,matchLevel:o,newText:l,myMatchLevel:g(t,c)}}).filter(function(e){return e.myMatchLevel>=50&&(!e.matchLevel||e.matchLevel<e.myMatchLevel)}).sort(function(e,t){return t.myMatchLevel-e.myMatchLevel})[0]}function g(e,t){if(0===e.size||0===t.size)return 0;var n=0,r=0;return e.forEach(function(e){t.has(e)&&++n}),t.forEach(function(t){e.has(t)&&++r}),Math.round(100*Math.max(n/e.size,r/t.size))}}function g(e,t,n,a){return r.b(this,void 0,void 0,function(){function o(e,t,r){var s=!$.has(e.name);$.add(e.name),G.forEach(function(t,n){var r=t.newId,s=t.oldText;a.push({mutations:function(t){s&&t.unlink2("courses",e.id,"abilities",n),r&&t.link2("courses",e.id,"abilities",r)}})}),e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)});var i=r.ccsToMigrate,o=r.krsToMigrate;i.forEach(function(t,n){var r=t.newId,i=t.newText,o=t.oldText,l=t.isTypoFix;a.push({change:s&&(o?i?l?"Tryckfelsrättning Centralt Innehåll":"Uppdaterat Centralt Innehåll":"Borttaget Centralt Innehåll":"Nytt Centralt Innehåll"),content:"<h4>"+e.name+"</h4><strike>"+(o||"")+"</strike><br/>"+(i||""),mutations:function(t){if(r&&B.has(r)&&!V.has(r)){var a={id:r,name:i,acl:["role:USER:R"],dateTime:Date.now()};t.add("central-content",a),V.add(r)}o&&t.unlink2("courses",e.id,"centralContent",n),r&&t.link2("courses",e.id,"centralContent",r)}})}),e.centralContentOrder=t.centralContent.map(function(e){var t=e.html;return _.get(t)}),o.forEach(function(t,n){var r=t.newId,i=t.newText,o=t.gradeStep,l=t.oldText,c=t.isTypoFix;a.push({change:s&&(l?i?c?"Tryckfelsrättning Kunskapskrav":"Uppdaterat Kunskapskrav":"Borttaget Kunskapskrav":"Nytt Kunskapskrav"),content:"<h4>"+e.name+"</h4><strike>"+(l||"")+"</strike><br/>"+(i||""),mutations:function(t){if(r&&z.has(r)&&!V.has(r)){var a={id:r,name:i,gradeStep:o,acl:["role:USER:R"],dateTime:Date.now()};console.log("Adding Knowledge-Requirement "+r+": "+i),t.add("knowledge-requirements",a),V.add(r)}l&&t.unlink2("courses",e.id,"knowledgeRequirements",n),r&&t.link2("courses",e.id,"knowledgeRequirements",r)}})}),e.knowledgeRequirementsOrder=t.knowledgeRequirements.map(function(e){return q.get(e.html)}),(G.size>0||i.size>0||o.size>0)&&a.push({change:e.isTemplate?"Uppdaterad Kursmall":"Uppdaterad Kursinstans",content:e.isTemplate?""+e.name:e.name+". Skola: "+(e.school||"ej angiven")+". Beskrivning: "+(e.description||""),mutations:function(t){return t.put("courses",e)}})}function l(){return r.b(this,void 0,void 0,function(){function e(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return 0===e.length?[2,[]]:(new Map,console.log("Number of ids: "+e.length),[4,i.a.kedBackendClient.list("tasks",r.a({},t,{hasEdgesTo:e}))]);case 1:return[2,n.sent()]}})})}var t,n,o,l,c,u,d,m,p;return r.d(this,function(i){switch(i.label){case 0:return o=r.g(G.keys(),Object(s.k)(F.map(function(e){return r.g(e.ccsToMigrate.keys(),e.krsToMigrate.keys())}))).filter(function(e){return!e.startsWith("fictiveOldId")}),l=Date.now(),[4,e(o,{include:["abilities","knowledgeRequirements","centralContent"],flags:["includeIdsOnly"]})];case 1:c=i.sent(),u=function(e){var t,n,s,i,o,c,u,d,m=e.migratedTexts||{abilities:{},centralContent:{},knowledgeRequirements:{}};e.migratedTexts={abilities:{},centralContent:{},knowledgeRequirements:{}};var p=[],h=[],f=function(t){var n=G.get(t);if(n){var r=n.newId,a=n.newText,s=n.isTypoFix,i=n.oldText,o=t;m.abilities[t]&&(i=m.abilities[t].oldText,o=m.abilities[t].oldId),r&&i!==a&&(s||(e.migratedTexts.abilities[r]={oldId:o,oldText:i,importDate:l})),p.push(function(n){n.unlink2("tasks",e.id,"abilities",t),r&&n.link2("tasks",e.id,"abilities",r)}),h.push("<strike>"+i+"</strike>"),r&&h.push(a)}};try{for(var g=r.h(e.abilities),v=g.next();!v.done;v=g.next()){f(v.value.id)}}catch(e){t={error:e}}finally{try{v&&!v.done&&(n=g.return)&&n.call(g)}finally{if(t)throw t.error}}var b=new Set(e.tags?e.tags.filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)}):[]),k=new Set;try{for(var y=r.h(F),E=y.next();!E.done;E=y.next()){var w=E.value,T=w.krsToMigrate,S=w.ccsToMigrate,C=w.courseCode;if(0===b.size||b.has(C)){var N=function(t){var n=S.get(t);if(n){var r=n.newId,a=n.newText,s=n.oldText,i=n.isTypoFix,o=t;m.centralContent[t]&&(s=m.centralContent[t].oldText,o=m.centralContent[t].oldId),r&&s!==a&&(i||(e.migratedTexts.centralContent[r]={oldId:o,oldText:s,importDate:l})),r&&k.has(r)||(p.push(function(n){n.unlink2("tasks",e.id,"centralContent",t),r&&n.link2("tasks",e.id,"centralContent",r)}),h.push("<strike>"+s+"</strike>"),r&&(h.push(a),k.add(r)))}};try{for(var O=r.h(e.centralContent),D=O.next();!D.done;D=O.next()){N(D.value.id)}}catch(e){o={error:e}}finally{try{D&&!D.done&&(c=O.return)&&c.call(O)}finally{if(o)throw o.error}}var I=function(t){var n=T.get(t);if(n){var r=n.newId,a=n.newText,s=n.oldText,i=n.isTypoFix,o=t;m.knowledgeRequirements[t]&&(s=m.knowledgeRequirements[t].oldText,o=m.knowledgeRequirements[t].oldId),r&&s!==a&&(i||(e.migratedTexts.knowledgeRequirements[r]={oldId:o,oldText:s,importDate:l})),r&&k.has(r)||(p.push(function(n){n.unlink2("tasks",e.id,"knowledgeRequirements",t),r&&n.link2("tasks",e.id,"knowledgeRequirements",r)}),h.push("<strike>"+s+"</strike>"),r&&(h.push(a),k.add(r)))}};try{for(var x=r.h(e.knowledgeRequirements),j=x.next();!j.done;j=x.next()){I(j.value.id)}}catch(e){u={error:e}}finally{try{j&&!j.done&&(d=x.return)&&d.call(x)}finally{if(u)throw u.error}}}}}catch(e){s={error:e}}finally{try{E&&!E.done&&(i=y.return)&&i.call(y)}finally{if(s)throw s.error}}a.push({change:"Migrerad Uppgift",content:"<h4>"+e.name+" "+(e.school?"("+e.school+") ":"(skola ej angiven)")+"</h4>\n          <p>Kurskod: "+r.g(b).join(",")+"</p>\n          "+h.map(function(e){return"<p>"+e+"</p>"}).join(""),mutations:function(t){t.put("tasks",e),p.forEach(function(e){return e(t)})}})};try{for(d=r.h(c),m=d.next();!m.done;m=d.next())p=m.value,u(p)}catch(e){t={error:e}}finally{try{m&&!m.done&&(n=d.return)&&n.call(d)}finally{if(t)throw t.error}}return[2]}})})}var c,u,m,p,h,g,v,b,k,y,E,w,T,S,C,N,O,D,I,x,j,R,U,L,A,M,P,_,B,K,q,z,G,F,V,$,H,W,Y,Z,Q,J;return r.d(this,function(i){switch(i.label){case 0:E=new Map,w=e.abilitiesOrder?e.abilitiesOrder.map(function(t){return e.abilities.find(function(e){return e.id===t})}):e.abilities;try{for(T=r.h(w),S=T.next();!S.done;S=T.next())C=S.value,E.set(C.name.trim(),C.id)}catch(e){c={error:e}}finally{try{S&&!S.done&&(u=T.return)&&u.call(T)}finally{if(c)throw c.error}}try{for(N=r.h(t),O=N.next();!O.done;O=N.next()){Q=O.value.template;try{for(D=r.h(Q.centralContent),I=D.next();!I.done;I=D.next())x=I.value,E.set(x.name.trim(),x.id)}catch(e){h={error:e}}finally{try{I&&!I.done&&(g=D.return)&&g.call(D)}finally{if(h)throw h.error}}try{for(j=r.h(Q.knowledgeRequirements),R=j.next();!R.done;R=j.next())U=R.value,E.set(U.name.trim(),U.id)}catch(e){v={error:e}}finally{try{R&&!R.done&&(b=j.return)&&b.call(j)}finally{if(v)throw v.error}}}}catch(e){m={error:e}}finally{try{O&&!O.done&&(p=N.return)&&p.call(N)}finally{if(m)throw m.error}}L=d(E,n.abilities),A=L.newTexts,M=L.idsToAdd,P=d(E,Object(s.k)(n.courses.map(function(e){return e.centralContent.map(function(e){return e.html})}))),_=P.newTexts,B=P.idsToAdd,K=d(E,Object(s.k)(n.courses.map(function(e){return e.knowledgeRequirements.map(function(e){return e.html})}))),q=K.newTexts,z=K.idsToAdd,console.log("Abilities to add: "+M.size),console.log("CCs to add: "+B.size),console.log("KRs to add: "+z.size),G=f(w,n.abilities.map(function(e){return{html:e}}),A),F=t.map(function(e,t){var r=e.template;console.log("Course: "+r.name);var a=n.courses.find(function(e){return e.name===r.name})||n.courses.find(function(e){return e.code===r.code});return{courseCode:r.code,ccsToMigrate:a?f(r.centralContent,a.centralContent.map(function(e){return{html:e.html}}),_,0,r.name):new Map,krsToMigrate:a?f(r.knowledgeRequirements,a.knowledgeRequirements,q,0,r.name):new Map}}),G.forEach(function(t,n){var r=t.newText,s=t.newId,i=t.oldText,o=t.isTypoFix;a.push({change:i?r?o?"Tryckfelsrättning Förmåga":"Uppdaterad Förmåga":"Borttagen Förmåga":"Ny Förmåga",content:"<strike>"+(i||"")+"</strike><br/>"+(r||""),mutations:function(t){if(s&&M.has(s)){var a={id:s,name:r,acl:["role:USER:R"],dateTime:Date.now()};t.add("abilities",a)}i&&t.unlink2("subjects",e.id,"abilities",n),s&&t.link2("subjects",e.id,"abilities",s)}})}),(!e.abilitiesOrder||G.size>0)&&(e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)}),a.push({mutations:function(t){return t.put("subjects",e)},change:e.abilitiesOrder?null:"Inför en ordnad lista på förmågor i databasen"})),V=new Set,a.push({mutations:function(){return V.clear()}}),$=new Set,a.push({mutations:function(){return $.clear()}}),H=function(e,t){var a,s,i=n.courses.find(function(t){return t.name===e.name})||n.courses.find(function(t){return t.code===e.code}),l=F.find(function(t){return t.courseCode===e.code}),c=l.ccsToMigrate,u=l.krsToMigrate;try{for(var d=r.h(t),m=d.next();!m.done;m=d.next()){o(m.value,i,{ccsToMigrate:c,krsToMigrate:u})}}catch(e){a={error:e}}finally{try{m&&!m.done&&(s=d.return)&&s.call(d)}finally{if(a)throw a.error}}};try{for(W=r.h(t),Y=W.next();!Y.done;Y=W.next())Z=Y.value,Q=Z.template,J=Z.instances,H(Q,J)}catch(e){k={error:e}}finally{try{Y&&!Y.done&&(y=W.return)&&y.call(W)}finally{if(k)throw k.error}}return[4,l()];case 1:return i.sent(),[2]}})})}var v=n(17);function b(e,t,n){return r.b(this,void 0,void 0,function(){var a,s,o=this;return r.d(this,function(l){switch(l.label){case 0:return[4,i.a.kedBackendClient.get("subjects",e.id,{include:["courseTemplates","abilities"]})];case 1:return e=l.sent(),[4,Promise.all(e.courseTemplates.map(function(e){return Object(v.f)(e.id,{include:["centralContent","knowledgeRequirements"]})}))];case 2:return a=l.sent(),console.log("Subject: "+e.name+". Courses: "+a.map(function(e){return e.name})),[4,Promise.all(a.map(function(e){return r.b(o,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t={template:e},[4,i.a.kedBackendClient.list("courses",{name:e.name,include:["abilities"],flags:["includeIdsOnly"]})];case 1:return[2,(t.instances=n.sent(),t)]}})})}))];case 3:return s=l.sent(),[4,g(e,s,t,n)];case 4:return l.sent(),[2]}})})}var k,y,E,w=function(e){function t(t){var n=e.call(this,t)||this;return n.coursesElems={},n.centralContentElems=[],n.knowledgeRequirementElems=[],n.state={showFullText:!1,changes:[],isWorking:!0,isImporting:!1},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:this.addClassesForCherryPickedElements(),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,this.diffWithExisting()];case 2:return e=r.sent(),t=e.changes,n=e.subjectToImport,this.setState({changes:t,subjectToImport:n}),[3,5];case 3:return a=r.sent(),this.setState({error:""+a}),[3,5];case 4:return this.setState({isWorking:!1}),[7];case 5:return[2]}})})},t.prototype.addClassesForCherryPickedElements=function(){var e=l()(this.purposeElem).find("li").first().parent().children("li");e.addClass("ability");var t=l()(this.centralContentElems).find("li");t.addClass("central-content");var n=l()(this.knowledgeRequirementElems).find("p");n.addClass("knowledge-requirement"),l()([e,t,n]).addClass("marked-area")},t.prototype.cherryPickData=function(){var e=this,t=this.props.subject,n=Array.from(l()(this.purposeElem).find("li").first().parent().children("li")).map(function(e,t){return(t+1+". "+l()(e).html()).trim()}).filter(function(e){return!!e});return{name:t.name,code:t.code,schoolType:t.schoolType,abilities:n,courses:Object.keys(this.coursesElems).map(function(t){return e.coursesElems[t]}).map(function(e){var t=e.course,n=e.elem;return{name:t.name,year:t.year,code:t.code,points:t.points,centralContent:Array.from(l()(n).find(".central-content")).map(function(e){return{html:l()(e).html().trim(),group:l()(e).parent("ul").prev("h4").text().trim()}}).filter(function(e){return!!e.html}),knowledgeRequirements:Array.from(l()(n).find(".grade-step-none .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:null,html:e}}).concat(Array.from(l()(n).find(".grade-step-E .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"E",html:e}}).concat(Array.from(l()(n).find(".grade-step-C .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"C",html:e}})).concat(Array.from(l()(n).find(".grade-step-A .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"A",html:e}})))}})}},t.prototype.diffWithExisting=function(){return r.b(this,void 0,void 0,function(){function e(){var e=h;return h+=2,e}var t,n,a,s,o,l,c,d,m,p,h,f,g,v,k,y,E,w,T,S,C,N=this;return r.d(this,function(O){switch(O.label){case 0:return o=this.cherryPickData(),l=[],[4,i.a.kedBackendClient.list("subjects")];case 1:return c=O.sent(),d=c.filter(function(e){return e.code===N.props.subject.code})[0],m=[],p=[],h=Date.now(),d?[4,b(d,o,l)]:[3,3];case 2:return O.sent(),[3,4];case 3:f=d={id:Object(u.h)(),schoolType:o.schoolType,tags:["schoolType:"+o.schoolType],acl:["role:USER:R"],code:o.code,name:o.name,abilitiesOrder:[],publishable:!1,dateTime:e()},l.push({change:"Nytt ämne",content:o.name+" ("+o.code+")",mutations:function(e){return e.add("subjects",f)}}),g=[],v=function(t){var n={id:Object(u.h)(),name:t,acl:["role:USER:R"],dateTime:e()};g.push(n),l.push({change:"Ny förmåga",content:t,mutations:function(e){e.add("abilities",n),e.link("subjects",f.id,"abilities",n.id,"abilities")}})};try{for(k=r.h(o.abilities),y=k.next();!y.done;y=k.next())E=y.value,v(E)}catch(e){t={error:e}}finally{try{y&&!y.done&&(n=k.return)&&n.call(k)}finally{if(t)throw t.error}}f.abilitiesOrder=g.map(function(e){return e.id}),w=function(t){var n,a,s,o,c,d,h={id:Object(u.h)(),subjectCode:f.code,schoolType:f.schoolType,tags:["sub:"+f.code,"course:"+t.code,"schoolType:"+f.schoolType],dateTime:e(),isTemplate:!0,acl:["role:EMPLOYEE:R"],name:t.name,code:t.code,points:t.points,modules:[],subjectId:f.id,resources:[],createdBy:{name:i.a.currentUser.displayName,url:"mailto:"+i.a.currentUser.mail},createdDate:Date.now(),knowledgeRequirementsOrder:[],centralContentOrder:[],abilitiesOrder:g.map(function(e){return e.id})};t.year&&(h.schoolGrade=t.year),l.push({change:"Ny kurs",content:t.name,mutations:function(e){e.add("courses",h),e.link("subjects",f.id,"courses",h.id,"courseTemplates")}});var v=function(t,n){var r=m.filter(function(e){return e.name===n})[0];r?l.push({mutations:function(e){e.link("courses",h.id,"central-content",r.id,"centralContent")}}):(r={id:Object(u.h)(),dateTime:e(),name:n,acl:["role:USER:R"]},t&&(r.group=t),m.push(r),l.push({change:"Nytt centralt innehåll",content:"<h4>"+t+"</h4>"+n,mutations:function(e){e.add("central-content",r),e.link("courses",h.id,"central-content",r.id,"centralContent")}})),h.centralContentOrder.push(r.id)};try{for(var b=r.h(t.centralContent),k=b.next();!k.done;k=b.next()){var y=k.value;v(y.group,y.html)}}catch(e){n={error:e}}finally{try{k&&!k.done&&(a=b.return)&&a.call(b)}finally{if(n)throw n.error}}var E=function(t){var n=p.filter(function(e){return e.name===t.html&&e.gradeStep===t.gradeStep})[0];n?l.push({mutations:function(e){e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}}):(n={id:Object(u.h)(),dateTime:e(),name:t.html,gradeStep:t.gradeStep,acl:["role:USER:R"]},p.push(n),l.push({change:"Nytt kunskapskrav för betyget "+t.gradeStep,content:t.html,mutations:function(e){e.add("knowledge-requirements",n),e.link("courses",h.id,"knowledge-requirements",n.id,"knowledgeRequirements")}})),h.knowledgeRequirementsOrder.push(n.id)};try{for(var w=r.h(t.knowledgeRequirements),T=w.next();!T.done;T=w.next()){E(T.value)}}catch(e){s={error:e}}finally{try{T&&!T.done&&(o=w.return)&&o.call(w)}finally{if(s)throw s.error}}var S=function(e){l.push({mutations:function(t){t.link("courses",h.id,"abilities",e.id,"abilities")}})};try{for(var C=r.h(g),N=C.next();!N.done;N=C.next()){S(N.value)}}catch(e){c={error:e}}finally{try{N&&!N.done&&(d=C.return)&&d.call(C)}finally{if(c)throw c.error}}};try{for(T=r.h(o.courses),S=T.next();!S.done;S=T.next())C=S.value,w(C)}catch(e){a={error:e}}finally{try{S&&!S.done&&(s=T.return)&&s.call(T)}finally{if(a)throw a.error}}O.label=4;case 4:return[2,{changes:l,subjectToImport:o}]}})})},t.prototype.cancel=function(){this.props.onCancel()},t.prototype.import=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:this.setState({isWorking:!0,isImporting:!0}),e=this.state.changes.map(function(e){return e.mutations}),t.label=1;case 1:return t.trys.push([1,,3,4]),[4,i.a.kedBackendClient.do(function(t){e.forEach(function(e){return e(t)})})];case 2:return t.sent(),[3,4];case 3:return this.setState({isWorking:!1,isImporting:!1}),[7];case 4:return this.props.onImportSuccess(this.props.subject.name),[2]}})})},t.prototype.fixL=function(e){return e},t.prototype.render=function(){var e=this,t=this.state.subjectToImport,n=this.props.subject;return a.createElement("div",null,a.createElement("h1",null,Object(s.a)(k||(k=r.e(["Uppladdat Ämne ",""],["Uppladdat Ämne ",""])),t?t.name:"")),this.state.error?a.createElement("p",null,"Fel: ",this.state.error):this.state.isWorking?a.createElement("p",null,"Arbetar..."):this.state.isImporting?a.createElement("p",null,"Importerar..."):this.state.changes.every(function(e){return!e.change})?a.createElement("div",null,a.createElement("p",null,"Kunde inte finna några förändringar från befintligt data. Klicka OK för att avbryta och återgå."),a.createElement("button",{onClick:function(){return e.cancel()}}," OK ")):a.createElement("div",null,a.createElement("table",{style:{border:"1px solid gray",padding:"2px"}},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{colSpan:2},"Granskning av ändringar i grund-data")),a.createElement("tr",null,a.createElement("th",null,"Ändring"),a.createElement("th",null,"Innehåll"))),a.createElement("tbody",null,this.state.changes.filter(function(e){return e.change}).map(function(e,t){return a.createElement("tr",{key:t},a.createElement("td",{style:{padding:"2px"}},e.change),a.createElement("td",{style:{padding:"2px"},dangerouslySetInnerHTML:{__html:e.content}}))}))),a.createElement("button",{onClick:function(){return e.cancel()},disabled:this.state.isImporting},"Avbryt"),a.createElement("button",{onClick:function(){return e.import()},disabled:this.state.isImporting},"Importera"),a.createElement("br",null)),a.createElement("button",{onClick:function(){return e.setState({showFullText:!e.state.showFullText})}},this.state.showFullText?Object(s.a)(y||(y=r.e(["Dölj nedan"],["Dölj nedan"]))):Object(s.a)(E||(E=r.e(["Visa hela texten från Skolverket"],["Visa hela texten från Skolverket"])))),a.createElement("table",{style:{display:this.state.showFullText?"":"none"}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Namn"),a.createElement("td",null,n.name)),a.createElement("tr",null,a.createElement("th",null,"Ämneskod"),a.createElement("td",null,n.code)),a.createElement("tr",null,a.createElement("th",null,"Syfte"),a.createElement("td",{ref:function(t){return e.purposeElem=t},dangerouslySetInnerHTML:{__html:this.fixL(n.purpose)}})),a.createElement("tr",null,a.createElement("th",null,"Kurser"),a.createElement("td",null,n.courses.map(function(t){return a.createElement("table",{key:t.code,ref:function(n){return e.coursesElems[t.code]={course:t,elem:n}}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Kursens namn"),a.createElement("td",null,t.name)),a.createElement("tr",null,a.createElement("th",null,"Kurskod"),a.createElement("td",null,t.code)),a.createElement("tr",null,a.createElement("th",null,"Poäng"),a.createElement("td",null,t.points)),a.createElement("tr",null,a.createElement("th",null,"Centralt innehåll"),a.createElement("td",{ref:function(t){return e.centralContentElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.centralContent)}})),t.knownledgeRequirements.some(function(e){return!e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav utan betygsättning"),a.createElement("td",{className:"grade-step-none",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return!e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"E"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg E"),a.createElement("td",{className:"grade-step-E",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"E"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"C"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg C"),a.createElement("td",{className:"grade-step-C",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"C"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"A"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg A"),a.createElement("td",{className:"grade-step-A",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"A"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0))}))))))},t}(a.Component),T=(n(106),n(105)),S=n(13);n.d(t,"a",function(){return x});var C,N,O,D,I,x=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,gymnasiumSubjects:[],primarySchoolSubjects:[],uploadedSubject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,i.a.kedBackendClient.list("subjects")];case 1:return(e=r.sent()).sort(Object(s.g)("name")),t=e.filter(function(e){return"primary"!==e.schoolType}),n=e.filter(function(e){return"primary"===e.schoolType}),this.setState({gymnasiumSubjects:t,primarySchoolSubjects:n,isListingSubjects:!1}),[2]}})})},t.prototype.handleFileSelect=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,o,u,d,m,p,h,f,g,b,k,y,E,w;return r.d(this,function(T){switch(T.label){case 0:return e.stopPropagation(),e.preventDefault(),t=e.dataTransfer.files,[4,Object(v.g)(t[0])];case 1:if(n=T.sent(),a=l()(l.a.parseXML(n)),i=a.find("subject>originatorTypeOfSchooling").text().trim()||a.find("subject>typeOfSchooling").text().trim(),"gymnasium"===("COMPULSORY_SCHOOL"===i?"primary":"UPPER_SECONDARY_EDUCATION"===i?"gymnasium":null)){for(w={name:a.find("subject>name").text().trim(),code:a.find("subject>code").text().trim(),purpose:a.find("subject>purpose").text().trim(),courses:[],schoolType:"gymnasium"},o=a.find("subject>courses"),u=0;u<o.length;++u)d=l()(o[u]),m=[].slice.call(d.find("knowledgeRequirements")).map(function(e){return{gradeStep:l()(e).find("gradeStep").text().trim(),text:l()(e).find("text").text().trim()}}),w.courses.push({name:d.find("name").text().trim(),code:d.find("code").text().trim(),centralContent:d.find("centralContent").text().trim(),points:parseInt(d.find("point").text().trim()),knownledgeRequirements:m});this.setState({uploadedSubject:w})}else p=Object(s.k)(Array.from(a.find("subject>centralContent")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfCentralContent").text().trim())throw new Error(Object(s.a)(C||(C=r.e(["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim()}})})),h=Object(s.k)(Array.from(a.find("subject>knowledgeRequirement")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfRequirement").text().trim())throw new Error(Object(s.a)(N||(N=r.e(["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim(),gradeStep:l()(e).find("gradeStep").text().trim()}})})),f=Object(s.b)(p,function(e){return e.year}),g=Object(s.b)(h,function(e){return e.year}),b=a.find("subject>name").text().trim(),k=a.find("subject>code").text().trim(),y=a.find("subject>purpose").text().trim(),E=["1-3","4-6","7-9"].map(function(e){return{name:b+" "+e,code:k+"|"+e,points:0,year:e,centralContent:(f[e]||[]).map(function(e){return e.text}).join("\n"),knownledgeRequirements:(g[e]||[]).map(function(e){return{gradeStep:e.gradeStep,text:e.text}})}}),w={name:b,code:k,purpose:y,schoolType:"primary",courses:E},this.setState({uploadedSubject:w});return[2]}})})},t.prototype.onImportSuccess=function(e){Object(s.o)(Object(s.a)(O||(O=r.e(["Importen av "," lyckades"],["Importen av "," lyckades"])),e)),this.setState({uploadedSubject:null}),this.load()},t.prototype.render=function(){var e=this,t=this.props.linkPrefix;return a.createElement("div",null,this.state.uploadedSubject?a.createElement(w,{onCancel:function(){return e.setState({uploadedSubject:null})},onImportSuccess:function(t){return e.onImportSuccess(t)},subject:this.state.uploadedSubject}):this.state.isListingSubjects?a.createElement("div",null,a.createElement("p",null,a.createElement(S.a,null),"Var god vänta medan ämnen hämtas...")):a.createElement("div",null,a.createElement("h2",null,Object(s.a)(D||(D=r.e(["Gymnasieämnen"],["Gymnasieämnen"])))),a.createElement("ul",null,this.state.gymnasiumSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(T.a,{to:t+e.id},e.name))})),a.createElement("h2",null,Object(s.a)(I||(I=r.e(["Grundskoleämnen"],["Grundskoleämnen"])))),a.createElement("ul",null,this.state.primarySchoolSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(T.a,{to:t+e.id},e.name))})),a.createElement("div",{className:"drop-zone",onDragOver:v.a,onDrop:function(t){return e.handleFileSelect(t)}},"Droppa Subject-fil här från skolverket (Hämtas från ",a.createElement("a",{href:"http://opendata.skolverket.se",target:"skolverket"},"opendata.skolverket.se"),")")))},t}(a.Component)},,,,function(e,t,n){var r={"./en-SG":82,"./en-SG.js":82,"./en-au":83,"./en-au.js":83,"./en-ca":84,"./en-ca.js":84,"./en-gb":85,"./en-gb.js":85,"./en-ie":86,"./en-ie.js":86,"./en-il":87,"./en-il.js":87,"./en-nz":88,"./en-nz.js":88,"./sv":89,"./sv.js":89};function a(e){var t=s(e);return n(t)}function s(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=s,e.exports=a,a.id=132},function(e,t){},function(e,t){},,,function(e,t,n){"use strict";var r=n(3),a=n(69),s=n(16),i=Object(s.b)(location.search).user;if(i){var o=a.a.find(function(e){return e.username===i});o&&(r.a.currentUser=o)}var l=Object(s.b)(location.search),c=l.role,u=l.school;r.a.currentUser&&(c&&(r.a.currentUser.roles=c.split(",")),u&&(r.a.currentUser.school=u))},,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r,a,s=n(1),i=n(0),o=n.n(i),l=n(2),c=n(234),u=n(233),d=n(72),m=n(117),p=n(101),h=function(e){return i.createElement(p.a,{title:Object(l.a)(r||(r=s.e(["Lägg till skola"],["Lägg till skola"]))),type:e.type,feedbackUrl:e.feedbackUrl})},f=n(3),g=n(106),v=n(45),b=n(128),k=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,primarySchoolSubjects:[],uploadedSubject:null},n}return s.c(t,e),t.prototype.render=function(){return i.createElement("div",null,i.createElement(v.a,{title:Object(l.a)(a||(a=s.e(["Ämnen"],["Ämnen"]))),activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),i.createElement(b.a,{linkPrefix:"/subjects/"}))},t}(i.Component),y=n(41),E=n(17),w=n(5),T=n(111),S=n(80),C=n(78),N=n(25),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return s.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.resources,a=N.b.picker;return i.createElement("div",null,i.createElement("div",{className:"taskContainer"},r.map(function(e,r){return i.createElement("div",{className:"align-horizontal",key:r},i.createElement("div",{className:"horizontalItem top"},i.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:T.a,props:{title:"Redigera resurs",resource:e,onSave:function(e){var a=Object(E.m)(e,f.a.currentUser);n({$splice:[[r,1,a]]}),t.closeDialog()},onDelete:function(){n({$splice:[[r,1]]}),t.closeDialog()}}})}})),i.createElement("div",{className:"horizontalItem top"},i.createElement("a",{href:e.url,target:"_blank"},e.name)))})),i.createElement("div",{className:"horizontal-align spaced"},i.createElement("div",{className:"horizontaItem top"},i.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:T.a,props:{title:"Lägg till resurs",onSave:function(e){var r=Object(E.m)(e,f.a.currentUser);n({$push:[r]}),t.closeDialog()}}})}},i.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Lägg till resurs")),a&&i.createElement("div",{className:"horizontaItem top"},i.createElement(S.a,{label:"Lägg till från Drive",action:function(){new C.a({upload:!0,multiple:!0}).show().then(function(e){e.forEach(function(e){var t={url:e.url,name:e.name},r=Object(E.m)(t,f.a.currentUser);n({$push:[r]})})})}}))))},t}(i.Component),D=n(74),I=n(39),x=n.n(I),j=n(14),R=n(64),U=n(70),L=n.n(U),A=function(){function e(e){this.queryer=e,this.promise=null,this.result=null}return e.prototype.query=function(){var e=this;return this.promise?this.promise:this.promise=this.queryer().then(function(t){return e.result=t})},e.prototype.reset=function(){this.promise=null},e}(),M=n(110),P=n(13);function _(e){var t=e.searchMarkedIds,n=e.searchResult,r=e.task,a=e.editTask;e.writeAccess,e.taskCustomization;return i.createElement("div",{className:"task-search-result"+(a.state.task||a.state.previewTaskContent?"":" fixed")},0===t.length?i.createElement("h2",null,"Samtliga uppgifter för kursen"):i.createElement("h2",null,"Uppgifter som täcker valda filter"),i.createElement("table",null,i.createElement("tbody",null,n.filter(r?function(e){return e.id===r.id}:function(){return!0}).map(function(e){return i.createElement(i.Fragment,{key:e.id},i.createElement("tr",null,i.createElement("td",null,i.createElement("div",{tabIndex:1,className:"checkBox"+(r&&r.id===e.id?" checked":""),onClick:function(){return s(e)}})),i.createElement("td",null,e.content?i.createElement("a",{href:"#",onClick:function(t){s(e),t.preventDefault(),t.stopPropagation()}},e.name):i.createElement("a",{href:e.url,target:"_blank"},e.name)),i.createElement("td",null,Object(E.i)(e.modifiedBy.name)),i.createElement("td",null,e.school||"Standard"),i.createElement("td",null,Object(E.h)(e.modifiedDate))))}))),i.createElement("br",null),i.createElement("hr",null));function s(e){r&&r.id===e.id?a.updateSearchMarkedIds(t):(Object(y.findDOMNode)(a).parentElement.scrollTop=0,a.setStatePromised({task:e,previewTaskContent:null}))}}var B=n(92),K=n(6),q=n.n(K),z=n(125);function G(e){var t=e.task,n=e.course,r=e.writeAccess,a=e.features,o=e.editTask,l=a.picker;return i.createElement("div",null,i.createElement("h2",null,"Uppgiftens namn och länk"),i.createElement("div",{className:"align-horizontal spaced"},i.createElement("div",{className:"horizontalItem top"},i.createElement("p",null,"Uppgiftens namn:")),i.createElement("div",{className:"horizontalItem top"},i.createElement("input",{autoFocus:!0,type:"text",size:35,value:t.name,disabled:!r,readOnly:!r,onChange:function(e){var n=s.a({},t);n.name=e.target.value,o.setStatePromised({task:n})}}))),i.createElement("div",{className:"align-horizontal spaced"},i.createElement("div",{className:"horizontalItem top"},i.createElement("p",null,"URL:")),i.createElement("div",{className:"horizontalItem top align-horizontal"},i.createElement("div",{className:"horizontalItem top"},i.createElement("input",{className:"horizontalItem",type:"text",size:35,value:t.url,disabled:!r,readOnly:!r,onChange:function(e){var n=s.a({},t);n.url=e.target.value,o.setStatePromised({task:n})}})),i.createElement("div",{className:"horizontalItem top"},l&&i.createElement(S.a,{label:"",action:function(){new C.a({upload:!0}).show().then(function(e){var n=e[0].url,r=n.substr(0,n.lastIndexOf("/"))+"/view";if(r!=t.url){var a=s.a({},t);a.url=r,o.setStatePromised({task:a})}})}})))),t.migratedTexts&&r&&i.createElement(z.a,{task:t,course:n,updateLink:function(e,t){return o.updateLink(e,t)}}),i.createElement(i.Fragment,null,i.createElement("h2",null,"Inlämningsuppgift"),i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top"},i.createElement("div",{className:"checkBox"+(o.getTaskProp("assignment")?" checked":""),onClick:function(){o.updateTaskOrCustomization("assignment",{$set:!o.getTaskProp("assignment")})}})),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",null,"Den här uppgiften är en inlämningsuppgift"))),o.getTaskProp("assignment")&&i.createElement(i.Fragment,null,i.createElement("p",null,"Inlämningsdatum"),i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top"},i.createElement(B.a,{nextMonthButtonLabel:"",previousMonthButtonLabel:"",showWeekNumbers:!0,selected:o.getTaskProp("deadline")&&q()(o.getTaskProp("deadline")).toDate(),dateFormat:"YYYY-MM-dd",locale:"sv",popperPlacement:"bottom-start",onChange:function(e){o.updateTaskOrCustomization("deadline",{$set:q()(e).format("YYYY-MM-DD")})}})),i.createElement("div",{className:"horizontalItem top"},o.getTaskProp("deadline")&&i.createElement("a",{className:"deleteDate",href:"#",title:"Ta bort inlämningsdatum",onClick:function(e){e.preventDefault(),o.updateTaskOrCustomization("deadline",{$set:null})}}))),i.createElement("div",{className:"taskContainer"},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top"},i.createElement("div",{className:"checkBox"+(null==t.sendToUrkund||t.sendToUrkund?" checked":""),onClick:function(){return o.updateTaskOrCustomization("sendToUrkund",{$set:null!=t.sendToUrkund&&!t.sendToUrkund})}})),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",null,"Verify assignments with Urkund")))))))}function F(e){var t=e.task;return i.createElement(i.Fragment,null,i.createElement("h3",null,"Uppgiftens status"),t.createdBy&&t.createdDate&&i.createElement("p",null,"Uppgiften skapades ",Object(E.c)(t.createdDate)," av ",i.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&i.createElement("p",null,"Uppgiften redigerades senast ",Object(E.c)(t.modifiedDate)," av ",i.createElement("strong",null,t.modifiedBy.name),"."))}function V(e){var t=e.writeAccess,n=e.editTask;return i.createElement(i.Fragment,null,!!n.props.onDelete&&i.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onDelete()}},"Ta bort från kursmodul"),i.createElement("div",{className:"pull-right"}," "),i.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onCancel()}},"Avbryt"),i.createElement("div",{className:"btn btn-large",onClick:function(){return n.save().catch(l.n)}},"Spara"),!t&&i.createElement("div",{className:"btn btn-large",onClick:function(){return n.copyTask().catch(l.n)}},"Skapa kopia av den här uppgiften"))}var $=n(54),H=n(50);function W(e){var t=e.writeAccess,n=e.task,r=e.editTask;return i.createElement(i.Fragment,null,i.createElement("h3",null,"Uppgiftens innehåll"),t&&i.createElement("p",null,"Om uppgiften inte länkar till något dokument kan du lägga innehåll här."),i.createElement($.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","outdent","indent","line","link","image"],defaultActions:H.a,readOnly:!t,html:n.content,onChange:function(e){var t=s.a({},n);t.content=e,r.setState({task:t})}}))}function Y(e){var t=e.writeAccess,n=e.task,r=e.taskCustomization,a=e.editTask;return i.createElement(i.Fragment,null,i.createElement(i.Fragment,null,i.createElement("h3",null,"Uppgiftens lärandemål"),i.createElement("div",null,i.createElement("textarea",{className:"inputTextBox learning-goal-box",disabled:!t,value:n.learningGoal,onChange:function(e){var t=s.a({},n);t.learningGoal=e.target.value,a.setStatePromised({task:t})}}))),i.createElement("br",null),i.createElement(i.Fragment,null,(t||!!n.content)&&i.createElement(W,{writeAccess:t,task:n,editTask:a})),i.createElement(i.Fragment,null,r&&r.resources?i.createElement("h3",null,"Resurser för uppgiften (modifierad för denna kursinstans)"):i.createElement("h3",null,"Resurser kopplade till uppgiften"),i.createElement(O,{resources:r&&r.resources||n.resources,host:a.props.host,onUpdate:function(e){a.updateTaskOrCustomization("resources",e)}})))}var Z,Q,J,X,ee,te,ne,re,ae,se,ie,oe,le,ce,ue,de=function(e){function t(t){var n=e.call(this,t)||this;n.features=new N.a;var r=!t.task||Object(j.c)(f.a.currentUser,t.task);return n.state={title:t.task?r?Object(l.a)(Z||(Z=s.e(['Redigera uppgift till "','"'],['Redigera uppgift till "','"'])),t.module.name):Object(l.a)(Q||(Q=s.e(['Visa uppgift till "','"'],['Visa uppgift till "','"'])),t.module.name):t.searchMode?Object(l.a)(J||(J=s.e(['Sök ny uppgift till "','"'],['Sök ny uppgift till "','"'])),t.module.name):Object(l.a)(X||(X=s.e(['Lägg till egen uppgift till "','"'],['Lägg till egen uppgift till "','"'])),t.module.name),futureAbilitiesOpen:!1,taskCustomization:t.taskCustomization||{},task:t.task?s.a({$meta:t.task.$meta||"update"},t.task):t.searchMode?null:{id:Object(w.h)(),$meta:"add",tags:["sub:"+t.course.subjectCode,"course:"+t.course.code],school:!t.course.isTemplate&&f.a.currentUser.school,resources:[],abilities:[],centralContent:[],futureAbilities:[],knowledgeRequirements:[],name:"",url:"",acl:t.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+f.a.currentUser.school+"/EMPLOYEE:S"]},searchMarkedIds:t.searchMode&&[],searchResult:t.searchMode&&[],isSearching:t.searchMode},t.searchMode&&(n.searchResponse=new A(function(){return f.a.kedBackendClient.list("tasks",{tags:"course:"+t.course.code,include:["knowledgeRequirements","abilities","centralContent"],flags:["includeIdsOnly"]})})),n}return s.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentDidMount=function(){return s.b(this,void 0,void 0,function(){var e;return s.d(this,function(t){switch(t.label){case 0:if(!this.props.searchMode)return[3,8];this.setStatePromised({isSearching:!0}),t.label=1;case 1:return t.trys.push([1,5,6,8]),[4,this.searchResponse.query()];case 2:return t.sent(),this.state.searchMarkedIds&&0===this.state.searchMarkedIds.length?[4,this.updateSearchResult(this.state.searchMarkedIds)]:[3,4];case 3:t.sent(),t.label=4;case 4:return[3,8];case 5:return e=t.sent(),Object(l.n)(e),[3,8];case 6:return[4,this.setStatePromised({isSearching:!1})];case 7:return t.sent(),[7];case 8:return[2]}})})},t.prototype.updateSearchMarkedIds=function(e){return s.b(this,void 0,void 0,function(){var t;return s.d(this,function(n){switch(n.label){case 0:return t=this.setStatePromised({task:null,searchMarkedIds:e,previewTaskContent:null}),this.searchResponse.result?[3,3]:[4,this.searchResponse.promise];case 1:return n.sent(),[4,t];case 2:n.sent(),e=this.state.searchMarkedIds,n.label=3;case 3:return[4,this.updateSearchResult(e)];case 4:return n.sent(),[2]}})})},t.prototype.updateSearchResult=function(e){return s.b(this,void 0,void 0,function(){var t,n;return s.d(this,function(r){switch(r.label){case 0:return[4,this.searchResponse.query()];case 1:return t=r.sent(),n=t.filter(function(t){return e.every(function(e){return t.knowledgeRequirements.some(function(t){return t.id===e})||t.abilities.some(function(t){return t.id===e})||t.centralContent.some(function(t){return t.id===e})})}),this.setStatePromised({searchResult:n}),[2]}})})},t.prototype.onMarkChanged=function(e,t){if(this.props.searchMode){var n=this.state.searchMarkedIds;this.updateSearchMarkedIds(t?n.concat(e):n.filter(function(t){return t!==e})).catch(l.n)}else this.updateLink(e,t)},t.prototype.updateLink=function(e,t){var n=this.props.course,r=this.state.task,a=n.abilities.find(function(t){return t.id===e}),i=n.knowledgeRequirements.find(function(t){return t.id===e}),o=n.centralContent.find(function(t){return t.id===e}),l=s.f(a?["abilities",a]:i?["knowledgeRequirements",i]:o?["centralContent",o]:[null,null],2),c=l[0],u=l[1];if(c){var d=r[c].slice(),m=d.findIndex(function(t){return t.id===e});t?m<0&&d.push(u):m>=0&&d.splice(m,1);var p=s.a({},r);p[c]=d,r&&r.migratedTexts&&(p.migratedTexts=s.a({},r.migratedTexts),r.migratedTexts[c]&&(p.migratedTexts[c]=s.a({},r.migratedTexts[c]),delete p.migratedTexts[c][e])),this.setStatePromised({task:p})}else console.error("Could not find marked id "+e)},t.prototype.save=function(){return s.b(this,void 0,void 0,function(){var e,t,n;return s.d(this,function(r){switch(r.label){case 0:if(e=this.state,t=e.task,n=e.taskCustomization,!Object(j.c)(f.a.currentUser,t))return[3,5];if(!t.url&&!t.content)throw new Error(Object(l.a)(ee||(ee=s.e(["Uppgiften måste antingen ha en URL eller ett innehåll"],["Uppgiften måste antingen ha en URL eller ett innehåll"]))));if(t.url&&!L.a.isUri(t.url))throw new Error(Object(l.a)(te||(te=s.e(["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"])),t.url));return this.props.task&&this.props.task.id!==t.id?[4,this.props.onReplace(this.props.task.id,t)]:[3,2];case 1:return r.sent(),[3,4];case 2:return[4,this.props.onSave(t,null)];case 3:r.sent(),r.label=4;case 4:return[3,9];case 5:return this.props.searchMode?[4,this.props.onSave(t,n)]:[3,7];case 6:return r.sent(),[3,9];case 7:if(this.props.course.isTemplate&&"add"===t.$meta)throw new Error(Object(l.a)(ne||(ne=s.e(["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"],["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"]))));return[4,this.props.onSaveCustomization(n)];case 8:r.sent(),r.label=9;case 9:return[2]}})})},t.prototype.copyTask=function(){return s.b(this,void 0,void 0,function(){var e;return s.d(this,function(t){switch(t.label){case 0:return(e=s.a({},this.state.task,this.state.taskCustomization||{},{id:Object(w.h)(),acl:this.props.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+f.a.currentUser.school+"/EMPLOYEE:S"],school:this.props.course.school})).$meta="add",[4,this.setStatePromised({task:e,title:Object(l.a)(re||(re=s.e(['Redigera kopierad uppgift till "','"'],['Redigera kopierad uppgift till "','"'])),this.props.module.name),taskCustomization:void 0})];case 1:return t.sent(),[2]}})})},t.prototype.getTaskProp=function(e){var t=this.state,n=t.task,r=t.taskCustomization,a=r&&r[e];return void 0!==a?a:n[e]},t.prototype.updateTaskOrCustomization=function(e,t){var n=this.state,r=n.task,a=n.taskCustomization;if(!(r&&Object(j.c)(f.a.currentUser,r))||a&&void 0!==a[e]){var i=s.a({},a);i[e]=x()(i[e]||r[e],t),this.setStatePromised({taskCustomization:i})}else{var o=s.a({},r);o[e]=x()(r[e],t),this.setStatePromised({task:o})}},t.prototype.render=function(){var e=this,t=this.props,n=t.course,r=(t.module,t.onCancel,t.onDelete,t.idsNotCoveredByAnyTask),a=t.searchMode,o=this.state,l=o.task,c=o.taskCustomization,u=o.title,d=o.searchResult,m=o.searchMarkedIds,p=o.isSearching,h=a?m:l.centralContent.map(function(e){return e.id}).concat(l.abilities.map(function(e){return e.id})).concat(l.knowledgeRequirements.map(function(e){return e.id})),g=l&&Object(j.c)(f.a.currentUser,l),v=(l&&L.a.isUri(l.url),this.features);return i.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},i.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},i.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},i.createElement("div",{className:"sv-text-portlet-content"},i.createElement("h1",{className:"h1"},u))),i.createElement("div",{className:"sv-fluid-grid sv-grid-ksgs12 sv-layout"},i.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-6"},i.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},i.createElement("div",{className:"ked_boxed"},i.createElement("h3",null,a?"Filtrera på kunskapskrav":g?"Välj kunskapskrav":"Kunskapskrav"),a?i.createElement("p",null,"Markera de kunskapskrav som uppgiften måste täcka."):g&&i.createElement("p",null,"Markera de kunskapskrav som din uppgift täcker."),i.createElement(D.a,{knowledgeRequirements:n.knowledgeRequirements,markedIds:h,idsToMarkNotOk:r,markMode:a||g,migratedIds:l&&l.migratedTexts&&l.migratedTexts.knowledgeRequirements,onMarkChanged:this.onMarkChanged.bind(this)}))),i.createElement("div",{className:"sv-html-portlet sv-portlet"},i.createElement(R.a,{options:n.abilities,title:g||a?"Välj förmågor":"Förmågor",markedIds:h,markMode:g||a,migratedIds:l&&l.migratedTexts&&l.migratedTexts.abilities,onMarkChanged:this.onMarkChanged.bind(this)})),i.createElement("div",{className:"sv-html-portlet sv-portlet"},i.createElement(R.a,{options:n.centralContent,title:g||a?"Välj centralt innehåll":"Centralt innehåll",markedIds:h,markMode:g||a,migratedIds:l&&l.migratedTexts&&l.migratedTexts.centralContent,onMarkChanged:this.onMarkChanged.bind(this)})),!a&&i.createElement("div",{className:"sv-html-portlet sv-portlet"},i.createElement("div",{className:"openClose larger"+(this.state.futureAbilitiesOpen?" open":"")},i.createElement("div",{className:"openHeader",onClick:function(){return e.setStatePromised({futureAbilitiesOpen:!e.state.futureAbilitiesOpen})}},g?i.createElement("p",null,"Välj ytterligare alternativ"):i.createElement("p",null,"Ytterligare alternativ")),i.createElement("div",{className:"openContent"},i.createElement("h4",null,"Framtidsförmågor"),i.createElement("div",{className:"taskContainer"},M.a.map(function(t){var n=l.futureAbilities.indexOf(t)>=0;return i.createElement("div",{className:"align-horizontal",key:t},i.createElement("div",{className:"horizontalItem top"},i.createElement("div",{className:"checkBox"+(n?" checked":""),onClick:g?function(){var r=s.a({},l);r.futureAbilities=n?l.futureAbilities.filter(function(e){return e!=t}):l.futureAbilities.concat(t),e.setStatePromised({task:r})}:void 0})),i.createElement("div",{className:"horizontalItem top"},t))})))))),i.createElement("div",{className:"sv-layout sv-column-6"},i.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},p&&i.createElement("p",null,i.createElement(P.a,null)," Laddar uppgifter..."),d?i.createElement(i.Fragment,null,i.createElement(_,{searchMarkedIds:m,searchResult:d,task:l,writeAccess:g,taskCustomization:c,editTask:this}),this.state.previewTaskContent?i.createElement("div",{dangerouslySetInnerHTML:{__html:this.state.previewTaskContent}}):l&&i.createElement(Y,{writeAccess:g,task:l,taskCustomization:c,editTask:this}),l&&i.createElement(F,{task:l})):i.createElement(i.Fragment,null,l&&i.createElement(G,{task:l,course:n,writeAccess:g,features:v,editTask:this}),l&&i.createElement(Y,{writeAccess:g,task:l,taskCustomization:c,editTask:this}),l&&i.createElement(F,{task:l}))),l&&i.createElement("div",{className:"sv-html-portlet sv-portlet"},i.createElement("hr",null),i.createElement("br",null),i.createElement(V,{writeAccess:g,editTask:this})))),i.createElement("div",{className:"sv-layout"},i.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"}))))},t}(i.Component),me=n(109),pe=n(46),he=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return s.c(t,e),t.prototype.openTaskDialog=function(e){var t=this.props,n=t.taskCustomizations,r=t.course,a=t.host,s=t.module,i=(t.taskIds,t.onTaskAdded,t.onTaskUpdated),o=t.onTaskCustomizationUpdated,l=t.onTaskDeleted,c=t.idsNotCoveredByAnyTask,u=t.onTaskReplaced;a.openDialog({Component:de,props:{task:e,taskCustomization:n&&n[e.id],module:s,course:r,host:a,idsNotCoveredByAnyTask:c,onSave:function(e){var t=Object(E.m)(e,f.a.currentUser);i(t),a.closeDialog()},onSaveCustomization:function(t){o(e.id,t),a.closeDialog()},onDelete:function(){l(e.id),a.closeDialog()},onReplace:function(e,t){u(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})},t.prototype.render=function(){var e=this,t=this.props,n=Object(pe.a)(t.course.tasks,t.taskIds,{appendLeftovers:!1});return i.createElement("div",null,i.createElement(me.a,{taskMetas:n.map(function(e){return{task:e,isTaskOwner:Object(j.c)(f.a.currentUser,e)}}),renderEditLink:function(t){var n=t.task,r=t.isTaskOwner;return i.createElement("div",{className:r?"editItem":"viewItem",onClick:function(){return e.openTaskDialog(n)}})},renderLink:function(t){var n=t.task;return n.content?i.createElement("a",{href:"#",onClick:function(t){t.preventDefault(),e.openTaskDialog(n)}},n.name):i.createElement("a",{href:n.url,target:"_blank"},n.name)},onSort:function(t,n,r){e.props.onTasksReordered(t,n,r)}}),i.createElement("br",null),i.createElement("a",{className:"btn",onClick:function(){var n=e.props,r=n.course,a=n.host,s=n.idsNotCoveredByAnyTask,i=n.module,o=n.onTaskAdded;n.onTaskCustomizationUpdated;t.host.openDialog({Component:de,props:{searchMode:!0,module:i,course:r,host:a,idsNotCoveredByAnyTask:s,onSave:function(e,t){e=Object(E.m)(e,f.a.currentUser),o(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})}},i.createElement("i",{className:"fa fa-search","aria-hidden":!0})," Sök uppgift")," ",i.createElement("a",{onClick:function(){var t=e.props,n=t.course,r=t.host,a=t.module,s=(t.taskIds,t.onTaskAdded),i=(t.onTaskUpdated,t.onTaskDeleted,t.idsNotCoveredByAnyTask);r.openDialog({Component:de,props:{module:a,course:n,host:r,idsNotCoveredByAnyTask:i,onSave:function(e){e=Object(E.m)(e,f.a.currentUser),s(e),r.closeDialog()},onCancel:function(){return r.closeDialog()}}})},className:"btn"},i.createElement("i",{className:"fa fa-plus","aria-hidden":!0})," Lägg till egen uppgift"))},t}(i.Component),fe=n(37),ge=n(20),ve=n(116),be=n(102),ke=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editMandatoryContent:!1},n}return s.c(t,e),t.prototype.getModuleIndex=function(){var e=this.props,t=e.course,n=e.module;return t.modules.findIndex(function(e){return e.id===n.id})},t.prototype.getModuleOrderIndex=function(){var e=this.props,t=(e.course,e.module);return this.props.getOrderedModules().findIndex(function(e){return e.id===t.id})},t.prototype.updateModule=function(e){var t=this.props.module,n=x()(t,e),r=this.getModuleIndex();this.props.host.update({modules:{$splice:[[r,1,n]]}})},t.prototype.onTaskAdded=function(e,t){var n={},r=this.props.module.taskIds.slice();r.push(e.id),this.props.course.tasks.some(function(t){return t.id===e.id})||(n.tasks={$push:[e]});var a=s.a({},this.props.module.taskCustomizations||{});t&&(a[e.id]=t);var i=this.getModuleIndex();n.modules={},n.modules[i]={taskIds:{$set:r},taskCustomizations:{$set:a}},this.props.host.update(n)},t.prototype.onTaskUpdated=function(e){if(!e.$meta)throw new Error(Object(l.a)(ae||(ae=s.e(["Hoppsan, blev lite knas. Fel ID: ",""],["Hoppsan, blev lite knas. Fel ID: ",""])),"Pa7Dq"));var t=this.props.course.tasks.findIndex(function(t){return t.id===e.id});t>=0&&this.props.host.update({tasks:{$splice:[[t,1,e]]}})},t.prototype.onTaskCustomized=function(e,t){var n=s.a({},this.props.module.taskCustomizations||{});n[e]=t,this.updateModule({taskCustomizations:{$set:n}})},t.prototype.onTaskDeleted=function(e){this.updateModule({taskIds:{$set:this.props.module.taskIds.filter(function(t){return t!==e})},taskCustomizations:{$apply:function(t){var n=s.a({},t);return delete n[e],n}}})},t.prototype.onTaskReplaced=function(e,t){var n=this.props.module.taskIds.indexOf(e);if(n<0)Object(l.n)(Object(l.a)(se||(se=s.e(["Kunde inte spara uppgift. Felkod d72kQ"],["Kunde inte spara uppgift. Felkod d72kQ"]))));else{var r={taskIds:{$splice:[[n,1,t.id]]},taskCustomizations:{$apply:function(t){var n=s.a({},t);return delete n[e],n}}},a=x()(this.props.module,r),i=this.getModuleIndex();this.props.host.update({modules:{$splice:[[i,1,a]]},tasks:{$set:this.props.course.tasks.concat(t)}})}},t.prototype.onTasksReordered=function(e,t,n){var r=Object(be.a)(this.props.course.tasks,this.props.module.taskIds,e,t,n,{appendLeftovers:!1});this.updateModule({taskIds:{$set:r}})},t.prototype.render=function(){for(var e=this,t=this.props,n=t.course,r=t.host,a=t.module,o=t.idsNotCoveredByAnyTask,c=this.getModuleIndex(),u=this.getModuleOrderIndex(),d=this.updateModule.bind(this),m=1,p=["--"],h=["--"],f=0;f<51;++f)p.push(""+m),h.push(""+ ++m);return i.createElement(ge.a,{inactivated:!N.b.cbCollapseBoxes,title:i.createElement(i.Fragment,null,i.createElement("div",{style:{float:"right"}},u>0&&i.createElement("span",null,i.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(t){t.stopPropagation(),e.props.onReorder(-1)}})," "),u<n.modules.length-1&&i.createElement("span",null,i.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(t){t.stopPropagation(),e.props.onReorder(1)}})," "),i.createElement(fe.a,{title:"Ta bort modulen",style:{display:"inline-block"},onClick:function(e){e.stopPropagation(),confirm(Object(l.a)(ie||(ie=s.e(["Ta bort modul ","?"],["Ta bort modul ","?"])),a.name))&&r.update({modules:{$splice:[[c,1]]}})}})),i.createElement("p",null,a.name)),headerOpen:"Ny kursmodul"==a.name},i.createElement("div",{className:"course-module ked_boxed",style:{position:"relative"}},i.createElement(ve.a,{text:a.name,tag:"h3",className:"renameable-text",maxChars:100,placeholder:"Namnlös modul",onChange:function(e){return d({name:{$set:e}})}}),i.createElement("div",{className:"align-horizontal spaced"},i.createElement("div",{className:"horizontalItem center"},i.createElement("p",null,"Startvecka")),i.createElement("div",{className:"horizontalItem center"},i.createElement("select",{value:a.startWeek||"--",onChange:function(e){return d({startWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},p.map(function(e){return i.createElement("option",{key:e,value:e},e)}))),i.createElement("div",{className:"horizontalItem center"},i.createElement("p",null,"Slutvecka")),i.createElement("div",{className:"horizontalItem center"},i.createElement("select",{value:a.endWeek||"--",onChange:function(e){return d({endWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},h.map(function(e){return i.createElement("option",{key:e,value:e},e)})))),i.createElement("h4",null,"Kursmodulens introduktion"),i.createElement($.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","outdent","indent","line","link","image"],defaultActions:H.a,html:a.mandatoryContent,onChange:function(e){d({mandatoryContent:{$set:e}})}}),i.createElement("h4",null,"Uppgifter"),i.createElement(he,{taskIds:a.taskIds,taskCustomizations:a.taskCustomizations,course:n,module:a,host:r,idsNotCoveredByAnyTask:o,onTaskAdded:function(t,n){return e.onTaskAdded(t,n)},onTaskUpdated:function(t){return e.onTaskUpdated(t)},onTaskCustomizationUpdated:function(t,n){return e.onTaskCustomized(t,n)},onTaskDeleted:function(t){return e.onTaskDeleted(t)},onTaskReplaced:function(t,n){return e.onTaskReplaced(t,n)},onTasksReordered:function(t,n,r){return e.onTasksReordered(t,n,r)}}),i.createElement("h4",null,"Modulresurser"),i.createElement("p",{className:"subHeader"},"(Eventuella resuser för redovisning av modulen samt för modulen som helhet)"),i.createElement(O,{resources:a.resources,onUpdate:function(e){return d({resources:e})},host:r}),i.createElement("div",{style:{position:"absolute",top:0,right:0}},u>0&&i.createElement("span",null,i.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(-1)}})," "),u<n.modules.length-1&&i.createElement("span",null,i.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(1)}})," "),i.createElement(fe.a,{title:"Ta bort modulen",style:{display:"inline-block"},onClick:function(){return confirm(Object(l.a)(oe||(oe=s.e(["Ta bort modul ","?"],["Ta bort modul ","?"])),a.name))&&r.update({modules:{$splice:[[c,1]]}})}})),i.createElement("div",{className:"horizontal-align"},i.createElement("div",{className:"horizontaItem activateCourseModule"},i.createElement("div",{className:"btn btn-info"+(a.inactive?" btn-activate":" btn-inactivate"),onClick:function(){return d({inactive:{$set:!a.inactive}})}},a.inactive?"Aktivera modulen":"Inaktivera modulen")))))},t}(i.Component),ye=function(e){function t(t){var n=e.call(this,t)||this;return n._moduleRefs={},n.state={},n}return s.c(t,e),t.prototype.addModule=function(){this.props.host.update({modules:{$push:[{name:"Ny kursmodul",id:Object(w.h)(),resources:[],taskIds:[]}]}})},t.prototype.getOrderedModules=function(){var e=this.props.course,t=e.moduleOrder||e.modules.map(function(e){return e.id});return t.map(function(t){return e.modules.find(function(e){return e.id===t})}).filter(function(e){return!!e}).concat(e.modules.filter(function(e){return!t.find(function(t){return e.id===t})}))},t.prototype.reorder=function(e,t){return s.b(this,void 0,void 0,function(){var n,r,a,i,o,l,c;return s.d(this,function(s){switch(s.label){case 0:return this.props.course,n=this.getOrderedModules(),r=n.findIndex(function(t){return t.id===e}),(a=r+t)<0||a>=n.length?[2]:(i=n[a],(o=n.map(function(e){return e.id}))[a]=e,o[r]=i.id,l=document.documentElement.scrollTop,[4,this.props.host.update({moduleOrder:{$set:o}})]);case 1:if(s.sent(),c=Object(y.findDOMNode)(this._moduleRefs[e]))try{window.scrollTo({top:l}),(c.getBoundingClientRect().top<0||c.getBoundingClientRect().bottom>document.documentElement.scrollHeight)&&c.scrollIntoView({behavior:"smooth",block:"start"})}catch(e){window.scrollTo(null,l),(c.getBoundingClientRect().top<0||c.getBoundingClientRect().bottom>document.documentElement.scrollHeight)&&c.scrollIntoView(!0)}return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.course,r=t.host,a=t.idsNotCoveredByAnyTask,s=(n.moduleOrder||n.modules.map(function(e){return e.id}),this.getOrderedModules());return i.createElement("div",{className:"sv-html-portlet sv-portlet",ref:function(t){return e._elem=t}},s.map(function(t){return i.createElement(ke,{ref:function(n){return e._moduleRefs[t.id]=n},key:t.id,course:n,module:t,onReorder:function(n){return e.reorder(t.id,n)},getOrderedModules:function(){return e.getOrderedModules()},host:r,idsNotCoveredByAnyTask:a})}),i.createElement("div",{className:"btn btn-large",onClick:function(){return e.addModule()}},"Lägg till kursmodul"))},t}(i.Component),Ee=new(function(e){function t(t){var n=e.call(this,{query:function(){return s.b(n,void 0,void 0,function(){var e,n;return s.d(this,function(r){switch(r.label){case 0:return e=t(),[4,f.a.kedBackendClient.list("schools",{name:e,include:["courses"]})];case 1:if(n=r.sent(),this._schoolId=n.length>0&&n[0].id,!this._schoolId)throw new Error(Object(l.a)(le||(le=s.e(["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'],["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'])),e,e));return[2,Object(l.k)(n.map(function(e){return e.courses}))]}})})}})||this;return n}return s.c(t,e),t.prototype.getSchoolId=function(){var e=this;return this.ensureHasData().then(function(){return e._schoolId})},t}(n(73).a))(function(){return f.a.currentUser.school}),we=n(105),Te=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schoolCourses:null},n.onSchoolCoursesUpdated=n.onSchoolCoursesUpdated.bind(n),n}return s.c(t,e),t.prototype.componentDidMount=function(){Ee.subscribe(this.onSchoolCoursesUpdated).catch(l.n)},t.prototype.componentWillUnmount=function(){Ee.unsubscribe(this.onSchoolCoursesUpdated)},t.prototype.onSchoolCoursesUpdated=function(e){var t=Object(l.g)("name"),n=Object(l.g)("createdDate");e.sort(function(e,r){return t(e,r)||n(e,r)}),this.setState({schoolCourses:e})},t.prototype.outputCourses=function(e,t,n){return i.createElement(ge.a,{title:i.createElement("p",null,t),headerOpen:n,contentClassName:"odd-even"},e.map(function(e){return i.createElement("div",{className:"schoolCourse",key:e.id},i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top pull-right"},i.createElement(we.a,{to:"/courses/"+e.id+"/edit",className:"editItem"})),i.createElement("div",{className:"horizontalItem top"},i.createElement(we.a,{to:"/courses/"+e.id+"/edit"},e.name)),i.createElement("div",{className:"horizontalItem top"},e.active&&i.createElement("div",{className:"pill active"},"Aktiv")),e.active&&!e.publishable&&i.createElement("div",{className:"horizontalItem top"},i.createElement("div",{className:"pill incomplete"},"Inkomplett"))),i.createElement("div",{className:"horizontalItem top"},i.createElement("p",null,e.description)),i.createElement("div",{className:"horizontalItem top"},e.modifiedBy?i.createElement("p",{className:"small"},"Redigerad av ",e.modifiedBy.name," / ",Object(E.h)(e.modifiedDate)):i.createElement("p",{className:"small",style:{fontStyle:"italic"}}," ")))}))},t.prototype.render=function(){var e=this.state.schoolCourses,t=[],n=[];if(e){var r=f.a.currentUser.mail;e.forEach(function(e){e.activatedBy&&e.activatedBy.url==r?t.push(e):e.responsibleTeachers.filter(function(e){return e.url==r}).length>0?t.push(e):n.push(e)})}return i.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},i.createElement("div",{className:"ked_boxed"},i.createElement("h3",null,"Skolans kurser"),i.createElement("div",{className:"taskContainer odd-even"},e?i.createElement(i.Fragment,null,this.outputCourses(t,"Mina kurser",!0),this.outputCourses(n,"Andra kurser",!1)):i.createElement("p",null,i.createElement(P.a,null)," Laddar skolans kurser")),"#/courses/new"!==location.hash&&i.createElement(we.a,{className:"btn",to:"/courses/new",onClick:function(){return window.scroll(0,0)}},"Skapa ny kurs")))},t}(i.Component),Se=n(55),Ce=n(10),Ne=n(7),Oe=n(118),De=function(e,t,n){for(var r=[],a=t;a<=n;a++)r.push({schoolName:"KED",tuitionGroupName:e,studentFirstName:"Student "+a,studentLastName:"Classroom",studentEmailAddress:"student"+a+".classroom@kedschools.com"});return r},Ie=[{schoolName:"KED",teacherFirstName:"Teacher 1",teacherLastName:"Classroom",teacherEmailAddress:"teacher1.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 2",teacherLastName:"Classroom",teacherEmailAddress:"teacher2.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 3",teacherLastName:"Classroom",teacherEmailAddress:"teacher3.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Carl",teacherLastName:"Holmberg",teacherEmailAddress:"carl@kedschools.com"},{schoolName:"KED",teacherFirstName:"David",teacherLastName:"Fahlander",teacherEmailAddress:"david.fahlander@kedschools.com"}],xe={"DJUSÄL01":[{schoolName:"KED",tuitionGroupName:"IDR1_Gr1 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"IDR1_Gr2 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"IDR1_Gr3 (180816-190614)",courseCode:"DJUSÄL01"}],KEMKEM01:[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",courseCode:"KEMKEM01"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",courseCode:"KEMKEM01"}],BIOBIO01:[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",courseCode:"BIOBIO01"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",courseCode:"BIOBIO01"}],SVESVE03:[{schoolName:"KED",tuitionGroupName:"SVE3_Gr1 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr2 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr3 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr4 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr5 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr6 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr7 (180816-190614)",courseCode:"SVESVE03"}]},je={"IDR1_Gr1 (180816-190614)":De("IDR1_Gr1 (180816-190614)",1,12),"IDR1_Gr2 (180816-190614)":De("IDR1_Gr2 (180816-190614)",13,22),"IDR1_Gr3 (180816-190614)":De("IDR1_Gr3 (180816-190614)",23,34),"KEM1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 9",studentLastName:"Classroom",studentEmailAddress:"student9.classroom@kedschools.com"}],"KEM1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 5",studentLastName:"Classroom",studentEmailAddress:"student5.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"}],"BIO1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 4",studentLastName:"Classroom",studentEmailAddress:"student4.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 10",studentLastName:"Classroom",studentEmailAddress:"student10.classroom@kedschools.com"}],"BIO1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 7",studentLastName:"Classroom",studentEmailAddress:"student7.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"}],"SVE3_Gr1 (180816-190614)":De("SVE3_Gr1 (180816-190614)",1,21),"SVE3_Gr2 (180816-190614)":De("SVE3_Gr2 (180816-190614)",22,44),"SVE3_Gr3 (180816-190614)":De("SVE3_Gr3 (180816-190614)",45,61),"SVE3_Gr4 (180816-190614)":De("SVE3_Gr4 (180816-190614)",62,78),"SVE3_Gr5 (180816-190614)":De("SVE3_Gr5 (180816-190614)",83,107),"SVE3_Gr6 (180816-190614)":De("SVE3_Gr6 (180816-190614)",108,124),"SVE3_Gr7 (180816-190614)":De("SVE3_Gr7 (180816-190614)",125,150)};function Re(e){var t=e.school,n=e.selectedTeachers,r=e.onSelect,a=e.onBlur,i="KED"===t?Ie:[],c=Ce.c.schools.cacheOptimized().name(t).single().read().edsSchoolNameGymn,u=(c?f.b.edsClient.suspense.getSchoolTeachers({schoolName:c}):i).map(function(e){return{label:e.teacherFirstName+" "+e.teacherLastName,value:e.teacherEmailAddress}});Object(j.d)(f.b.currentUser,t)&&!u.some(function(e){return e.value===f.b.currentUser.mail})&&u.push({label:f.b.currentUser.displayName,value:f.b.currentUser.mail});var d=Object(l.b)(n,function(e){return e.email});return u=u.filter(function(e){return!d[e.value]}).sort(Object(l.h)(["label"],Ne.a.KED_LOCALE)),o.a.createElement(Oe.a,{isMulti:!1,options:u,defaultMenuIsOpen:!0,autoFocus:!0,onBlur:function(){return a()},placeholder:Object(l.a)(ce||(ce=s.e(["Välj bland skolans lärare..."],["Välj bland skolans lärare..."]))),noOptionsMessage:function(){return Object(l.a)(ue||(ue=s.e(["Det finns inga fler lärare att välja från"],["Det finns inga fler lärare att välja från"])))},onChange:function(e){var t=e,n=t.label,a=t.value;r({name:n,email:a})}})}var Ue=n(34),Le=o.a.createContext(null);Ue.b.addProvider(function(){return Le._currentValue});var Ae,Me,Pe,_e,Be,Ke,qe,ze,Ge,Fe=function(e){function t(t){var n=e.call(this,t)||this;return n.subscriptions=[],n.outerSubscription={unsubscribe:function(){n.subscriptions.forEach(function(e){return e.unsubscribe()}),n.subscriptions=[]}},n.observer=function(e,t,r){t?n.setState({error:t}):n.setState(function(e){return{counter:e.counter+1,error:t}})},n.state={counter:0,error:null},n}return s.c(t,e),t.prototype.componentDidCatch=function(e,t){e&&e.name||(e=new Error(""+e)),this.setState({error:e,info:t}),console.log(e,t)},t.prototype.componentWillMount=function(){this.outerSubscription.unsubscribe()},t.prototype.render=function(){return this.state.error?this.props.errorFallback||o.a.createElement("p",null,Object(l.a)(Ae||(Ae=s.e(["Kunde inte ladda innehållet"],["Kunde inte ladda innehållet"])))):(this.outerSubscription.unsubscribe(),o.a.createElement(i.Suspense,{fallback:this.props.fallback||null},o.a.createElement(Le.Provider,{value:this},this.props.children)))},t}(o.a.Component);function Ve(e){var t=e.school,n=e.teachers,r=e.onUpdate,a=Object(i.useRef)(),c=s.f(Object(i.useState)(!1),2),u=c[0],d=c[1],m=N.b.teacherRights;return o.a.createElement("div",{className:"teachers-list"},o.a.createElement("h3",null,"Ansvariga lärare"),o.a.createElement("table",{style:{width:"100%"}},o.a.createElement("thead",null,n.length>0&&o.a.createElement("tr",null,o.a.createElement("th",{style:{width:"15%"}},Object(l.a)(Me||(Me=s.e(["Namn"],["Namn"])))),o.a.createElement("th",null,Object(l.a)(Pe||(Pe=s.e(["E-postadress"],["E-postadress"])))),m&&o.a.createElement("th",{style:{width:"24px"}},Object(l.a)(_e||(_e=s.e(["Behörighet"],["Behörighet"])))),o.a.createElement("th",{style:{width:"24px"}}))),o.a.createElement("tbody",null,n.map(function(e,t){return o.a.createElement("tr",{key:t},o.a.createElement("td",null,o.a.createElement("input",{type:"text",ref:a,value:e.name,autoFocus:!e.name&&t>0,onChange:function(a){if(a.target.value||e.email){var i=s.g(n);i[t]=s.a({},e,{name:a.target.value}),r(i)}else r(s.g(n.slice(0,t),n.slice(t+1)))}})),o.a.createElement("td",null,o.a.createElement("input",{type:"text",style:{width:"100%"},value:e.email||e.url,onKeyDown:function(e){9===e.which&&!e.shiftKey&&t===n.length-1&&(n.length<1||n[n.length-1].name)&&(d(!0),e.preventDefault())},onChange:function(a){var i=s.a({},e,{url:a.target.value,email:a.target.value});if(a.target.value||e.name){var o=s.g(n);o[t]=i,r(o)}else r(s.g(n.slice(0,t),n.slice(t+1)))}})),m&&o.a.createElement("td",null,o.a.createElement("select",{disabled:!(e.email||e.url),value:e.access||"edit",onChange:function(a){var i=s.g(n);i[t]=s.a({},e,{access:a.target.value}),r(i)}},o.a.createElement("option",{value:"read"},Object(l.a)(Be||(Be=s.e(["Läsa"],["Läsa"])))),o.a.createElement("option",{value:"edit"},Object(l.a)(Ke||(Ke=s.e(["Redigera"],["Redigera"])))),o.a.createElement("option",{value:"full"},Object(l.a)(qe||(qe=s.e(["Full"],["Full"])))))),o.a.createElement("td",null,o.a.createElement(fe.a,{onClick:function(){r(s.g(n.slice(0,t),n.slice(t+1)))}})))}))),o.a.createElement("br",null),u?o.a.createElement(Fe,{fallback:o.a.createElement(P.a,null),errorFallback:Object(l.a)(ze||(ze=s.e(["Kunder inte hämta skolans lärare från EDS"],["Kunder inte hämta skolans lärare från EDS"])))},o.a.createElement(Re,{school:t,selectedTeachers:n,onBlur:function(){return d(!1)},onSelect:function(e){var t=e.name,a=e.email,i={name:t,email:a,url:a,access:"edit"},o=s.g(n);o.push(i),r(o),d(!1)}})):o.a.createElement("a",{className:"btn",onClick:function(){d(!0)}},o.a.createElement("i",{className:"fa fa-user-plus","aria-hidden":!0}),Object(l.a)(Ge||(Ge=s.e([" Lägg till ansvarig lärare"],[" Lägg till ansvarig lärare"])))))}var $e,He,We,Ye=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isOpen:!1},n}return s.c(t,e),t.prototype.render=function(){var e=this.props.course,t=(this.state.isOpen,[]),n=Object(Se.d)(e);return t.push(i.createElement("tr",{key:"centralContent",className:"covered-item-label"},i.createElement("td",{colSpan:2},"Centralt innehåll"))),e.centralContent.forEach(function(e,r){return t.push(i.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},i.createElement("td",null,i.createElement("p",{className:"criteriaText",dangerouslySetInnerHTML:{__html:e.name}})),i.createElement("td",null,i.createElement("p",null,(n[e.id]||[]).length))))}),t.push(i.createElement("tr",{key:"abilities",className:"covered-item-label"},i.createElement("td",{colSpan:2},"Förmågor"))),e.abilities.forEach(function(e,r){return t.push(i.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},i.createElement("td",null,i.createElement("p",{className:"abilityText",dangerouslySetInnerHTML:{__html:e.name}})),i.createElement("td",null,i.createElement("p",null,(n[e.id]||[]).length))))}),t.push(i.createElement("tr",{key:"futureAbilities",className:"covered-item-label"},i.createElement("td",{colSpan:2},"Framtidsförmågor"))),M.a.forEach(function(e,r){return t.push(i.createElement("tr",{key:e,className:r%2?"tableOdd":""},i.createElement("td",null,i.createElement("p",{className:"abilityText"},e)),i.createElement("td",null,i.createElement("p",null,(n[e]||[]).length))))}),i.createElement(ge.a,{className:"larger",title:i.createElement("p",null,"Kursens täckningstabell"),contentClassName:"weighted-items-table"},i.createElement("p",null,"Tabellen anger hur många uppgifter som berör varje del."),i.createElement("table",null,i.createElement("tbody",null,t)))},t}(i.Component),Ze=function(e){function t(t){var n=e.call(this,t)||this;return n.state={url:n.props.url||""},n}return s.c(t,e),t.prototype.save=function(){var e=this.state.url;if(!L.a.isUri(e))throw new Error(Object(l.a)($e||($e=s.e(["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"])),e));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.onSave,r=t.onDelete,a=this.state,s=L.a.isUri(this.state.url);return i.createElement("div",null,i.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},i.createElement("h2",null,"Koppla en arbetsgång till kursen"),i.createElement("p",null,"Det går bara att lägga in en arbetsgång per kurs."),i.createElement("br",null),i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top"},"Länk:"),i.createElement("div",{className:"horizontalItem top "},i.createElement("input",{type:"text",tabIndex:1,size:50,value:a.url,onChange:function(t){return e.setState({url:t.target.value})}})),i.createElement("div",{className:"horizontalItem top spaced"})),i.createElement("br",null)),i.createElement("div",{className:"sv-html-portlet sv-portlet",id:"svid12_492422d515badf36646e4ff1"},r&&i.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return r()}},"Ta bort arbetsgång"),i.createElement("a",{tabIndex:1,className:"btn btn-large"+(s?"":" btn-inactive"),onClick:s&&function(){return n(a.url)}},"Spara")))},t}(i.Component),Qe=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return s.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.url;return i.createElement("div",null,i.createElement("div",{className:"taskContainer"},r&&i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top"},i.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:Ze,props:{url:r,onSave:function(e){n({$set:e}),t.closeDialog()},onDelete:function(){n({$set:void 0}),t.closeDialog()}}})}})),i.createElement("div",{className:"horizontalItem top"},i.createElement("a",{href:r,target:"_blank"},"Nuvarande arbetsgång")))),!r&&i.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:Ze,props:{onSave:function(e){n({$set:e}),t.closeDialog()}}})}},i.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Koppla en arbetsgång till kursen"))},t}(i.Component);function Je(){return f.a.currentUser}function Xe(e){var t=e.school,n=e.courseCode,r=e.selectedStudyGroups,a=e.onUpdate,i="KED"===t&&xe[n]?xe[n]:[],c=Ce.c.schools.cacheOptimized().name(t).single().read().edsSchoolNameGymn,u=(c?f.b.edsClient.suspense.getSchoolTuitionGroups({schoolName:c,courseCode:n}):i).map(function(e){return{label:e.tuitionGroupName,value:e.tuitionGroupName}});return o.a.createElement(Oe.a,{isMulti:!0,options:u,value:r.map(function(e){return{label:e,value:e}}),placeholder:Object(l.a)(He||(He=s.e(["Koppla studiegrupper till kursen..."],["Koppla studiegrupper till kursen..."]))),noOptionsMessage:function(){return Object(l.a)(We||(We=s.e(["Kunde inte hitta studiegrupper för denna kurs"],["Kunde inte hitta studiegrupper för denna kurs"])))},onChange:function(e){a(e.map(function(e){return e.value}))}})}var et,tt,nt,rt,at,st,it,ot,lt,ct,ut,dt,mt,pt,ht,ft,gt,vt,bt,kt=function(e){function t(t){var n=e.call(this,t)||this;return n.state={changeImageUrl:!1},n}return s.c(t,e),t.prototype.setImageUrl=function(e){this.props.course.imageId},t.prototype.render=function(){var e=this.props,t=e.course,n=e.origCourse,r=e.host,a=Object(Se.e)(t),o=Object(Se.b)(t),c=Object(Se.f)(t),u=t.images.find(function(e){return e.id===t.imageId}),d=u&&u.url.startsWith("data:"),m=u&&u.url.indexOf("storage.googleapis.com")>0,p=Object(Se.c)(t),h=Je(),f=!N.b.teacherRights||p.some(function(e){return e.email===h.mail&&"full"===e.access}),g=N.b.studyGroups;return i.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},i.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},i.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},t.isTemplate&&i.createElement("h1",null,"Kursmall"),i.createElement("h2",null,"Kursövergripande"),i.createElement(ge.a,{title:i.createElement("p",null,"Kursövergripande"),headerOpen:!0,inactivated:!N.b.cbCollapseBoxes},i.createElement("div",{className:"ked_boxed"},i.createElement("div",null,i.createElement("h3",null,"Kursens bild"),d?i.createElement("p",null,"Kursens bild ligger i databasen. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):m?i.createElement("p",null,"Kursens bild ligger i Kunskapsskolans Google moln. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):u?i.createElement("div",null,i.createElement("textarea",{value:u.url,style:{width:"100%",height:"30px"},onChange:function(e){return Object(v.b)(t,n,r,e.target.value)}}),i.createElement("p",null,"Bilden som visas högst upp hämtas från angiven URL. För att ändra bild kan du redigera URL ovan. Ett annat sätt att ändra bild är att dra och släppa en ny bild över den gamla högst upp på sidan.")):i.createElement("p",null,"Kursen saknar egen bild. Lägg till en bild genom att dra och släppa en bild på kurs-bannern högst upp på den här sidan."),i.createElement("br",null)),!t.isTemplate&&i.createElement("div",null,i.createElement("h3",null,"Beskrivning"),i.createElement("p",{className:"subHeader"},"(Beskrivning av kursen. För att skilja mellan olika varianter av samma gymnasiekurs)"),i.createElement("textarea",{className:"inputTextBox inputTextSmall",value:t.description,onChange:function(e){return r.update({description:{$set:e.target.value}})}}),i.createElement("br",null)),i.createElement("div",null,i.createElement("h3",null,"Upptaktstext"),i.createElement("p",{className:"subHeader"},"(texten ska visas på kursens upptaktssektion)"),i.createElement($.a,{html:t.runUpText,defaultActions:H.a,actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","outdent","indent","line","link","image"],onChange:function(e){return r.update({runUpText:{$set:e}})}}),i.createElement("br",null)),i.createElement("h3",null,"Kursresurser"),i.createElement("p",{className:"subHeader"},"(Resurser för upptakt och kursen som helhet)"),i.createElement(O,{resources:t.resources,onUpdate:function(e){return r.update({resources:e})},host:r}),i.createElement("br",null),i.createElement("h3",null,"Arbetsgång"),i.createElement("p",{className:"subHeader"},"(Eventuell länk till arbetsgång för kursen)"),i.createElement(Qe,{url:t.workFlowLink,onUpdate:function(e){return r.update({workFlowLink:e})},host:r}),i.createElement("br",null),!t.isTemplate&&i.createElement("div",null,i.createElement("h3",null,"Google Classroom"),g?i.createElement("div",{className:"align-horizontal"},i.createElement("div",{className:"horizontalItem top"},i.createElement("div",{className:"checkBox"+(t.googleCreateClassrooms?" checked":""),onClick:function(){r.update({googleCreateClassrooms:{$set:!t.googleCreateClassrooms}})}})),i.createElement("div",{className:"horizontalItem top"},"Skapa klassrum för kursen")):i.createElement("div",{className:"align-horizontal spaced"},i.createElement("div",{className:"horizontalItem top"},i.createElement("input",{placeholder:"Google classroom URL",type:"text",size:30,value:t.googleClassRoomURL,onChange:function(e){return r.update({googleClassRoomURL:{$set:e.target.value}})}})),i.createElement("div",{className:"horizontalItem top"},i.createElement("input",{placeholder:"kod",type:"text",size:8,value:t.googleClassRoomCode,onChange:function(e){return r.update({googleClassRoomCode:{$set:e.target.value}})}})))),t.isTemplate?null:i.createElement(i.Fragment,null,i.createElement(Ve,{school:t.school,teachers:t.responsibleTeachers,onUpdate:function(e){r.update({responsibleTeachers:{$set:e}})}}),i.createElement("br",null),g&&i.createElement("div",{className:"select-studygroups"},i.createElement("h3",null,Object(l.a)(et||(et=s.e(["Studiegrupper"],["Studiegrupper"])))),i.createElement(Fe,{fallback:i.createElement(P.a,null),errorFallback:Object(l.a)(tt||(tt=s.e(["Kunde inte ladda studiegrupper från EDS"],["Kunde inte ladda studiegrupper från EDS"])))},i.createElement(Xe,{school:t.school,courseCode:t.code,selectedStudyGroups:t.studyGroups||[],onUpdate:function(e){return r.update({studyGroups:{$set:e}})}})))))),i.createElement("div",{className:"sv-html-portlet sv-portlet"},i.createElement("div",{id:"Kursensmoduler"}),i.createElement("h2",null,"Kursens moduler"),i.createElement("hr",null)),i.createElement(ye,{host:r,course:t,idsNotCoveredByAnyTask:o}),i.createElement("div",null,i.createElement("br",null),i.createElement(Ye,{course:t})),i.createElement("div",{className:"sv-html-portlet sv-portlet"},i.createElement("h2",null,"Kursens status"),i.createElement("hr",null),t.createdBy&&t.createdDate&&i.createElement("p",null,"Kursen skapades ",Object(E.c)(t.createdDate)," av ",i.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&i.createElement("p",null,"Kursen redigerades senast ",Object(E.c)(t.modifiedDate)," av ",i.createElement("strong",null,t.modifiedBy.name),"."),t.active?i.createElement("p",null,"Kursen är ",i.createElement("strong",null,"AKTIV")," sedan ",Object(E.c)(t.activatedDate)," av ",i.createElement("strong",null,t.activatedBy.name),"."):i.createElement("p",null,"Kursen är ",i.createElement("strong",null,"INAKTIV"),t.inactivatedBy?i.createElement("span",null,"sedan ",Object(E.c)(t.inactivatedDate)," av ",i.createElement("strong",null,t.inactivatedBy.name),"."):i.createElement("span",null,".")),0===a.length?i.createElement("p",{className:"markedGreen"},"Modulernas kunskapskrav täcker skolverkets krav för denna kurs"):i.createElement("div",{className:"markedRed warning-box"},i.createElement("div",{className:"warningFlag"},i.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),i.createElement("p",null,"Modulernas kunskapskrav täcker inte skolverkets krav för denna kurs.")),c.map(function(e){return i.createElement("div",{key:e,className:"markedRed warning-box"},i.createElement("div",{className:"warningFlag"},i.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),i.createElement("p",null,e))}),i.createElement("br",null),i.createElement("div",{className:"btn btn-large",onClick:function(){return r.confirmSaveAndSync()}},"Spara"),t.active?i.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.inactivateAndSave()}},"Inaktivera och spara"):i.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.activateAndSave()}},"Aktivera och spara")),i.createElement("br",null),i.createElement("div",{className:"sv-html-portlet sv-portlet"},f&&!t.isTemplate&&(n?i.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){confirm(Object(l.a)(nt||(nt=s.e(['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\n\nKursen kommar att raderas helt!\n\nÄr du säker?"],['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\\n\\nKursen kommar att raderas helt!\\n\\nÄr du säker?"])),t.name,t.description,t.school))&&r.deleteCourse().catch(l.n)}},"Ta bort kurs"):i.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return history.go(-1)}},"Avbryt")),t.googleCreateClassrooms&&g&&i.createElement("div",{className:"btn btn-primary btn-large pull-right",onClick:function(){return r.syncWithClassroomAndSave()}},r.syncInProgress()?i.createElement(P.a,null):t.inSyncWithClassroom?i.createElement("span",null,i.createElement("i",{className:"fas fa-check","aria-hidden":"true"})):i.createElement("span",null,i.createElement("i",{className:"fas fa-code-branch"}))," Sync med klassrum")))),i.createElement("div",{className:"sv-layout sv-column-5"},i.createElement(Te,null)))},t}(i.Component),yt=n(56),Et=function(e){function t(){return e.call(this,["https://www.googleapis.com/auth/drive","https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.profile.photos","https://www.googleapis.com/auth/classroom.profile.emails","https://www.googleapis.com/auth/classroom.rosters","https://www.googleapis.com/auth/classroom.rosters.readonly","https://www.googleapis.com/auth/classroom.coursework.students","https://www.googleapis.com/auth/script.external_request"])||this}return s.c(t,e),t.prototype.callSync=function(e,t){return s.b(this,void 0,void 0,function(){var n;return s.d(this,function(r){switch(r.label){case 0:return[4,this.ensureInited()];case 1:return r.sent(),(n=t?{function:e,parameters:t}:{function:e}).devMode=!0,[4,fetch("https://script.googleapis.com/v1/scripts/M1H0BlTkv983PNVTJjDXjNqXLxmQiBgGz:run?alt=json",{method:"post",headers:{Accept:"application/json","Content-Type":"application/json",Authorization:"Bearer "+this.authToken},body:JSON.stringify(n)}).then(function(e){return e.json()})];case 2:return[2,r.sent()]}})})},t.prototype.initSync=function(e,t,n){return s.b(this,void 0,void 0,function(){var r,a,i,o,l,c,u,d,m,p,h,g,v,b,k,y,E,w,T;return s.d(this,function(S){switch(S.label){case 0:if(l={},"KED"===e.school)try{for(c=s.h(e.studyGroups),u=c.next();!u.done;u=c.next())v=u.value,l[v]=je[v]?je[v].map(function(e){return e.studentEmailAddress}):[]}catch(e){r={error:e}}finally{try{u&&!u.done&&(a=c.return)&&a.call(c)}finally{if(r)throw r.error}}return[4,f.b.kedBackendClient.http.get("schools",{cacheBust:"static",name:e.school}).then(function(e){return e.json()})];case 1:if(d=S.sent(),m=d[0].edsSchoolNameGymn,p=m?{}:l,!e.studyGroups)return[3,9];if(!m)return[3,9];S.label=2;case 2:S.trys.push([2,7,8,9]),h=s.h(e.studyGroups),g=h.next(),S.label=3;case 3:return g.done?[3,6]:(v=g.value,[4,f.b.edsClient.getTuitionGroupStudents({schoolName:m,tuitionGroupName:v})]);case 4:b=S.sent(),p[v]=b.map(function(e){return e.studentEmailAddress}),S.label=5;case 5:return g=h.next(),[3,3];case 6:return[3,9];case 7:return k=S.sent(),i={error:k},[3,9];case 8:try{g&&!g.done&&(o=h.return)&&o.call(h)}finally{if(i)throw i.error}return[7];case 9:return y=this.diffCourse(e,t,n),E=y.subset,w=y.changes,T=y.action,console.log(E),console.log(w),console.log(p),"full"==T?[2,this.createClassroom(E,p)]:"update"==T?[2,this.updateClassroom({course:E,changes:w,studyGroupStudents:p})]:[2]}})})},t.prototype.archive=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){return console.log("archiving"),[2,this.callSync("archive",[e])]})})},t.prototype.diffCourse=function(e,t,n){var r,a=function(e){return e.filter(function(e){return!0===e.assignment}).map(function(e){return{assignment:e.assignment,deadline:e.deadline,id:e.id,name:e.name}})},s={id:(r=e).id,school:r.school,code:r.code,name:r.name,description:r.description,tasks:r.tasks,responsibleTeachers:r.responsibleTeachers,studyGroups:r.studyGroups};return s.tasks=a(s.tasks),{subset:s,changes:!!t&&{tasks:a(t.tasks),responsibleTeachers:t.responsibleTeachers,studyGroups:t.studyGroups},action:"update"}},t.prototype.createClassroom=function(e,t){return s.b(this,void 0,void 0,function(){return s.d(this,function(n){return[2,this.callSync("createClassrooms",[e,t])]})})},t.prototype.updateClassroom=function(e){var t=e.course,n=e.changes,r=e.studyGroupStudents;return s.b(this,void 0,void 0,function(){return s.d(this,function(e){return[2,this.callSync("updateClassrooms",[t,n,r])]})})},t}(n(79).a),wt="production"===Ne.b.ENVIRONMENT?l.n:null,Tt=Object(l.a)(rt||(rt=s.e(["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."],["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."]))),St={origCourse:null,origTemplate:null,course:null,dialogContainers:[],hasUnsavedData:!1,view:"courseBuilder",classroomSyncInProgress:!1},Ct=function(e){function t(t){var n=e.call(this,t)||this;return n.state=s.a({},St),n.update=n.update.bind(n),n.refDialog=n.refDialog.bind(n),n.contentYPos=0,n.onKeyDown=n.onKeyDown.bind(n),n.beforeUnload=n.beforeUnload.bind(n),n.onClickPreventUnload=n.onClickPreventUnload.bind(n),n.isSaving=!1,n.dialogs=[],t.view&&(n.state=s.a({},n.state,{view:t.view})),n}return s.c(t,e),t.prototype.setStatePromised=function(e){return this._setState(s.a({hasUnsavedData:!0},e))},t.prototype.setNonSaveableDataState=function(e){return this._setState(e)},t.prototype._setState=function(t){var n=this;if(t.course){var r=t.course,a=r.tasks,i=r.modules,o={};i.forEach(function(e){return e.taskIds.forEach(function(e){return o[e]=!0})});var l=a.filter(function(e){return o[e.id]}),c=s.a({},t.course);c.tasks=l,t=s.a({},t,{course:c})}var u=t.allCourses||this.state.allCourses,d=t.course||this.state.course;if(u){var m=u.findIndex(function(e){return e.id===n.props.id});u=x()(u,{$splice:[[m,1,d]]}),(t=s.a({},t)).allCourses=u}return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentWillMount=function(){this.load().catch(wt),window.addEventListener("keydown",this.onKeyDown),window.addEventListener("beforeunload",this.beforeUnload),document.body.addEventListener("click",this.onClickPreventUnload)},t.prototype.componentWillUnmount=function(){window.removeEventListener("keydown",this.onKeyDown),window.removeEventListener("beforeunload",this.beforeUnload),document.body.removeEventListener("click",this.onClickPreventUnload),Object(E.j)("")},t.prototype.componentWillReceiveProps=function(e){this.state&&this.state.course&&(e.id===this.props.id&&e.templateId===this.props.templateId||this.setStatePromised(St)),e.view!==this.props.view&&this.setNonSaveableDataState({view:e.view})},t.prototype.componentDidUpdate=function(e,t){if(this.contentDiv){var n=Object(y.findDOMNode)(this.contentDiv);n&&(this.contentYPos=n.getBoundingClientRect().top)}t&&t.course&&(this.props.id===e.id&&this.props.templateId===e.templateId||this.load().catch(wt)),!t.hasUnsavedData&&this.state.hasUnsavedData&&Object(E.j)("unsaved")},t.prototype.loadFromTemplate=function(e){return s.b(this,void 0,void 0,function(){var t,n,r;return s.d(this,function(a){switch(a.label){case 0:return Object(l.o)("Laddar data från mall..."),[4,Object(E.f)(e,{includeTemplateChain:!0})];case 1:return t=a.sent(),(n=Object(E.k)(Date.now(),t,f.a.currentUser)).id=Object(w.h)(),n.parentId=e,n.active=!1,n.isTemplate=!1,n.templateChain=s.g(n.templateChain),n.templateChain.push({id:e,$meta:"ref"}),r=f.a.currentUser.school,n.school=r,n.description="",n.responsibleTeachers=[{name:f.a.currentUser.displayName,email:f.a.currentUser.mail,access:"full",url:f.a.currentUser.mail}],delete n.studyGroups,n.acl=["role:USER:R","schoolRole:"+r+"/EMPLOYEE:S"],delete n.$etag,delete n.createdBy,delete n.createdDate,delete n.modifiedBy,delete n.modifiedDate,delete n.activatedBy,delete n.activatedDate,delete n.googleClassRoomCode,delete n.googleClassRoomURL,delete n.googleCreateClassrooms,[4,this.setStatePromised({course:n,origCourse:null,origTemplate:t})];case 2:return a.sent(),Object(l.o)(""),[2]}})})},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){return s.d(this,function(e){switch(e.label){case 0:return Object(E.j)(""),this.props.id?[4,this.loadExistingCourse(this.props.id)]:[3,2];case 1:return e.sent(),[3,5];case 2:return this.props.templateId?[4,this.loadFromTemplate(this.props.templateId)]:[3,4];case 3:return e.sent(),[3,5];case 4:throw new Error(Object(l.a)(at||(at=s.e(["Ogiltig parameter. id eller templateId måste anges"],["Ogiltig parameter. id eller templateId måste anges"]))));case 5:return[2]}})})},t.prototype.loadExistingCourse=function(e){return s.b(this,void 0,void 0,function(){var t;return s.d(this,function(n){switch(n.label){case 0:return Object(l.o)("Laddar kurs"),[4,Object(E.f)(e)];case 1:return(t=n.sent()).responsibleTeachers||(t.responsibleTeachers=[{name:f.a.currentUser.displayName,email:f.a.currentUser.mail,access:"full",url:f.a.currentUser.mail}]),[4,this.setNonSaveableDataState({course:t,origCourse:t})];case 2:return n.sent(),Object(l.o)(""),[2]}})})},t.prototype.update=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return[4,this.setStatePromised({course:x()(this.state.course,e)})];case 1:return t.sent(),yt.b.studyGroups&&this._checkClassroomChanges(),[2]}})})},t.prototype.deleteCourse=function(){return s.b(this,void 0,void 0,function(){var e,t,n,r,a,i,o,c;return s.d(this,function(u){switch(u.label){case 0:return Object(l.o)("Raderar kursen..."),n=this.state.course.school,this.state.course.parentId,r=this.props.id,[4,f.a.kedBackendClient.list("courses",{hasEdgesTo:[this.props.id]})];case 1:a=u.sent(),i=new w.a;try{for(o=s.h(a),c=o.next();!c.done;c=o.next())c.value}catch(t){e={error:t}}finally{try{c&&!c.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}return i.delete("courses",r),[4,f.a.kedBackendClient.batch(i.mutationRequests)];case 2:return u.sent(),n===f.a.currentUser.school&&Ee.delete(r),Object(l.o)(""),location.hash="#/courses/new",[2]}})})},t.prototype.confirmSaveAndSync=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:return e=this.state.course,t=!1,e.googleCreateClassrooms&&!e.inSyncWithClassroom&&yt.b.studyGroups&&(t=confirm(Object(l.a)(st||(st=s.e(["Synkurs kurs med klassrum?"],["Synkurs kurs med klassrum?"]))))),[4,t];case 1:return n.sent()?this.syncWithClassroomAndSave():this.save(),[2]}})})},t.prototype.save=function(){return s.b(this,void 0,void 0,function(){var e,t,n,r,a,i,o,c,u;return s.d(this,function(d){switch(d.label){case 0:if(e=this.state,t=e.course,n=e.origCourse,!(yt.b.studyGroups&&n&&n.googleCreateClassrooms)||t.googleCreateClassrooms)return[3,4];d.label=1;case 1:return d.trys.push([1,3,,4]),[4,(new Et).archive(t)];case 2:return d.sent().done||Object(l.n)(Object(l.a)(it||(it=s.e(["Classroom course could not be archived"],["Classroom course could not be archived"])))),[3,4];case 3:return d.sent(),[3,4];case 4:if(r=yt.b.teacherRights,a=this.state.origCourse?Object(Se.c)(this.state.origCourse):[],i=Object(Se.c)(this.state.course),o=Je(),r&&!o.roles.includes("ADMIN")&&!s.g(a,i).some(function(e){var t=e.email,n=e.url,r=e.access;return(t||n)===o.mail&&(!r||"edit"===r||"full"===r)}))return Object(l.n)(Object(l.a)(ot||(ot=s.e(["Kursen kunde inte sparas. Lägg till dig själv i listan på ansvariga lärare"],["Kursen kunde inte sparas. Lägg till dig själv i listan på ansvariga lärare"])))),[2];if(this.isSaving)return[2];d.label=5;case 5:return d.trys.push([5,7,8,9]),this.isSaving=!0,[4,this._save()];case 6:return d.sent(),[3,9];case 7:return c=d.sent(),u=c&&c.message?c.message:Object(l.a)(lt||(lt=s.e(["Ett okänt fel har inträffat..."],["Ett okänt fel har inträffat..."]))),c&&("http409"===c.name||"http412"===c.name||"http404"===c.name?u=Object(l.a)(ct||(ct=s.e(["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."],["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."]))):"http403"===c.name&&(this.state.course.isTemplate?u=Object(l.a)(ut||(ut=s.e(["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."],["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."]))):this.state.course.school&&(u=Object(l.a)(dt||(dt=s.e(["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""],["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""])),this.state.course.name,this.state.course.school)))),Object(l.n)(u),Object(E.j)("error"),[3,9];case 8:return this.isSaving=!1,[7];case 9:return[2]}})})},t.prototype.syncInProgress=function(){return this.state.classroomSyncInProgress},t.prototype.syncWithClassroomAndSave=function(){return s.b(this,void 0,void 0,function(){var e,t,n,r,a;return s.d(this,function(i){switch(i.label){case 0:return e=this.state,t=e.course,n=e.origCourse,console.log(t),console.log(n),[4,this.save()];case 1:if(i.sent(),this.state.hasUnsavedData)return Object(l.n)(Object(l.a)(mt||(mt=s.e(["Synkronisering med klassrummet skulle inte ske"],["Synkronisering med klassrummet skulle inte ske"])))),[2];i.label=2;case 2:return i.trys.push([2,7,,8]),this.setState({classroomSyncInProgress:!0}),r=new Et,t.googleCreateClassrooms?(a=null==t.inSyncWithClassroom,[4,r.initSync(t,n,a)]):[3,6];case 3:return i.sent().done?(this.update({inSyncWithClassroom:{$set:!0}}),this.setState({classroomSyncInProgress:!1}),[4,this._save(!0)]):[3,5];case 4:return i.sent(),Object(l.o)(Object(l.a)(pt||(pt=s.e(["Synkronisering med framgång"],["Synkronisering med framgång"])))),[3,6];case 5:Object(l.n)(Object(l.a)(ht||(ht=s.e(["Fel synkroniserat klassrum"],["Fel synkroniserat klassrum"])))),this.setState({classroomSyncInProgress:!1}),i.label=6;case 6:return[3,8];case 7:return i.sent(),[3,8];case 8:return[2]}})})},t.prototype._save=function(e){return void 0===e&&(e=!1),s.b(this,void 0,void 0,function(){var t,n,r,a,i,o,c,u,d,m,p,h;return s.d(this,function(g){switch(g.label){case 0:return t=this.state,n=t.course,r=t.origCourse,a=t.origTemplate,i=0===Object(Se.e)(n).length,!e&&Object(l.o)(Object(l.a)(ft||(ft=s.e(["Sparar..."],["Sparar..."])))),o=Object(E.n)(Date.now(),n,f.a.currentUser),c=new w.a,u=r||a,d=o.tasks.map(function(e){if("add"===e.$meta||"update"===e.$meta){var t=u.tasks.find(function(t){return t.id===e.id});return Object(E.l)(t||{},e,"tasks",{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"},c)}var n=s.a({},e);return delete n.$meta,n}),o=x()(o,{tasks:{$set:d}}),o=Object(E.l)(r||{},o,"courses",{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"},c),(o=s.a({},o)).publishable=i,m=(o.tags||[]).filter(function(e){return"incomplete"!==e}),o.tags=o.publishable?m:m.concat("incomplete"),r?[3,3]:(c.add("courses",o),n.school?[4,Ee.getSchoolId()]:[3,2]);case 1:p=g.sent(),c.link("schools",p,"courses",n.id,"courses"),n.active&&c.link("schools",p,"courses",n.id,"activeCourses"),g.label=2;case 2:return[3,7];case 3:return c.put("courses",o),r.active||!n.active?[3,5]:[4,Ee.getSchoolId()];case 4:return p=g.sent(),c.link("schools",p,"courses",n.id,"activeCourses"),[3,7];case 5:return!r.active||n.active?[3,7]:[4,Ee.getSchoolId()];case 6:p=g.sent(),c.unlink("schools",p,"courses",n.id,"activeCourses"),g.label=7;case 7:return[4,f.a.kedBackendClient.batch(c.mutationRequests)];case 8:return h=g.sent(),!e&&Object(l.o)(r?Object(l.a)(gt||(gt=s.e(["Ändringarna har sparats"],["Ändringarna har sparats"]))):Object(l.a)(vt||(vt=s.e(["Kursen har skapats"],["Kursen har skapats"])))),h&&h.newEtags&&(o=Object(E.b)(o,h.newEtags,["images","tasks"])),n.school===f.a.currentUser.school&&(r?Ee.update(o):Ee.insert(o)),[4,this.setNonSaveableDataState({course:o,origCourse:o,hasUnsavedData:!1})];case 9:return g.sent(),Object(E.j)(""),r||(location.hash="#/courses/"+o.id+"/edit"),[2]}})})},t.prototype._checkClassroomChanges=function(){var e=this.state,t=e.course,n=e.origCourse,r=t.tasks.filter(function(e){return e.assignment});if(!n)return t.inSyncWithClassroom=!1,void this.setStatePromised({course:t});var a=n.tasks.filter(function(e){return e.assignment}),s=Object(E.e)(n.responsibleTeachers,t.responsibleTeachers),i=r.filter(function(e){return!a.find(function(t){return t.id==e.id})}).length>0||a.filter(function(e){return!r.find(function(t){return t.id==e.id})}).length>0;i||(i=r.some(function(e){return null!=a.find(function(t){return t.id===e.id&&t.name!==e.name})}));var o=Object(E.e)(n.studyGroups,t.studyGroups),l=t.inSyncWithClassroom;t.inSyncWithClassroom=!(s||i||o),l!=t.inSyncWithClassroom&&this.setStatePromised({course:t})},t.prototype.activateAndSave=function(){var e=this,t=s.a({},this.state.course);t.active||(t.active=!0,t.activatedBy={name:f.a.currentUser.displayName,url:"mailto:"+f.a.currentUser.mail},t.activatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(wt))},t.prototype.inactivateAndSave=function(){var e=this,t=s.a({},this.state.course);t.active&&(t.active=!1,t.inactivatedBy={name:f.a.currentUser.displayName,url:"mailto:"+f.a.currentUser.mail},t.inactivatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(wt))},t.prototype.openDialog=function(e){this.setNonSaveableDataState({dialogContainers:this.state.dialogContainers.concat(e)})},t.prototype.closeDialog=function(){var e=this.state.dialogContainers,t=e.length;for(t&&this.setNonSaveableDataState({dialogContainers:e.slice(0,t-1)});this.dialogs.length>=t;)this.dialogs.pop()},t.prototype.refDialog=function(e,t){this.dialogs[t]=e},t.prototype.onKeyDown=function(e){if(83===e.which&&(e.ctrlKey||e.metaKey)){if(e.preventDefault(),this.state.dialogContainers.length>0)return void this.saveDialog();this.save()}else if(27===e.which&&this.state.dialogContainers.length>0)this.closeDialog(),e.preventDefault();else if(13===e.which){var t=e.target;this.state.dialogContainers.length>0&&"TEXTAREA"!==t.tagName&&"INPUT"!==t.tagName&&"SELECT"!==t.tagName&&"OPTION"!==t.tagName&&!t.contentEditable&&this.saveDialog()}},t.prototype.beforeUnload=function(e){if((this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!f.a.kedBackendClient.http.bearerProvider.wantsRedirect)return e.returnValue=Tt,e.returnValue},t.prototype.onClickPreventUnload=function(e){if(e.target&&"a"===(""+e.target.tagName).toLowerCase()){var t=e.target;if(t.href&&"#"!==t.getAttribute("href")&&!t.target&&(this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!confirm(Tt))return e.preventDefault(),e.stopPropagation(),!1}},t.prototype.saveDialog=function(){if(this.state.dialogContainers.length>0){var e=this.dialogs[this.state.dialogContainers.length-1];e&&e.save()}},t.prototype.render=function(){var e=this,t=(f.a.currentUser.roles.indexOf("ADMIN"),this.state.course);return this.state.course?i.createElement("div",{style:{outline:0}},i.createElement(v.a,{title:t.name+" - "+t.points+"p",activePage:this.state.view,routes:{studentPage:Object(j.f)(this.props.viewCourseUrl,{courseId:this.props.id}),feedback:this.props.feedbackUrl},host:this,course:t,origCourse:this.state.origCourse,backgroundImage:t.images.filter(function(e){return e.id===t.imageId}).map(function(e){return e.url})[0],isTemplate:t.isTemplate}),i.createElement("div",{className:"sv-row sv-layout"},i.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},i.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},i.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer",ref:function(t){return e.contentDiv=t}},i.createElement(kt,{course:this.state.course,origCourse:this.state.origCourse,host:this}),i.createElement("br",null),this.state.dialogContainers.map(function(t,n){var r=t.Component,a=t.props;return i.createElement("div",{key:n},i.createElement("div",{className:"darken"}),i.createElement("div",{className:"modal-page-wrap"},i.createElement("div",{className:"modal-page"},i.createElement(r,s.a({ref:function(t){return e.refDialog(t,n)}},a)),i.createElement(fe.a,{onClick:function(){return e.closeDialog()}}))))})))))):i.createElement("div",{style:{outline:0}},i.createElement(v.a,{title:"",activePage:this.state.view,routes:{feedback:this.props.feedbackUrl}}),i.createElement("p",null,i.createElement(P.a,null),"V.g. vänta medan kursen laddas..."))},t}(i.Component),Nt=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courseOptions:null,selectedTemplateId:"--",courses:null,selectedCourseId:""},n}return s.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(l.n)},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){var e,t,n;return s.d(this,function(r){switch(r.label){case 0:return Object(l.o)("Laddar kurser"),[4,f.a.kedBackendClient.list("subjects",{tags:["schoolType:gymnasium"],include:"courseTemplates"})];case 1:return e=r.sent(),t=Object(l.k)(e.map(function(e){return e.courseTemplates})).sort(Object(l.g)("name")),n=[{id:"--",name:"--"}].concat(t),Object(l.o)(""),this.setState({courseOptions:n}),[2]}})})},t.prototype.onSelectCourse=function(e){return s.b(this,void 0,void 0,function(){var t,n,r,a,i;return s.d(this,function(o){switch(o.label){case 0:return[4,f.a.kedBackendClient.list("courses",{hasEdgesTo:[e]})];case 1:return t=o.sent(),n=t.filter(function(e){return e.active}).map(function(e){var t=e.id,n=e.school,r=e.description,a=e.createdBy,s=e.modifiedBy;r&&(r=Object(l.l)(r,80));var i=r||(a?a.name+"s version":s&&s.name+"s version");return{id:t,name:"standard"===n?r?"Standard - "+r:"Standard":n+" - "+Object(l.l)(i,90),school:n}}).sort(Object(l.g)("name")),r=n.filter(function(e){return"standard"===e.school}),a=n.filter(function(e){return"standard"!==e.school}),i=s.g(r,[{id:e,name:"Tom"}],a),this.setState({courses:i,selectedTemplateId:e,selectedCourseId:i[0].id}),[2]}})})},t.prototype.render=function(){var e=this,t=this.state,n=t.courseOptions,r=(t.selectedTemplateId,t.courses),a=t.selectedCourseId;return i.createElement("div",{style:{outline:0}},i.createElement(v.a,{title:Object(l.a)(bt||(bt=s.e(["Kursbyggaren"],["Kursbyggaren"]))),activePage:"courseBuilder",routes:{feedback:this.props.feedbackUrl}}),i.createElement("div",{className:"sv-row sv-layout"},i.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},i.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},i.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},i.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},i.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},i.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},i.createElement("h2",null,"Skapa ny kurs"),i.createElement("hr",null),i.createElement("div",{className:"align-horizontal spaced"},i.createElement("div",{className:"horizontalItem top"},i.createElement("p",null,"Välj gymnasiekurs :"))),i.createElement("div",{className:"align-horizontal spaced"},i.createElement("div",{className:"horizontalItem top"},n?i.createElement("select",{value:this.state.selectedTemplateId,onChange:function(t){return e.onSelectCourse(t.target.value).catch(l.n)}},n.map(function(e){return i.createElement("option",{key:e.id,value:e.id},e.name)})):i.createElement("div",null,i.createElement(P.a,null),i.createElement("select",{disabled:!0,value:""},i.createElement("option",null,"--"))))),r&&i.createElement("div",{className:"align-horizontal spaced"},i.createElement("div",{className:"horizontalItem top"},i.createElement("p",null,"Utgå från version: "))),r&&i.createElement("div",{className:"align-horizontal spaced"},i.createElement("div",{className:"horizontalItem top"},i.createElement("select",{value:a,onChange:function(t){return e.setState({selectedCourseId:t.target.value})}},r.map(function(e){return i.createElement("option",{key:e.id,value:e.id},e.name)})))),i.createElement("br",null),i.createElement("br",null),r&&a&&i.createElement(we.a,{to:"/courses/create-from-template/"+this.state.selectedCourseId,className:"btn btn-large"},"Skapa"))),i.createElement("div",{className:"sv-layout sv-column-5"},i.createElement(Te,null))))))))},t}(i.Component),Ot=n(126);n.d(t,"a",function(){return It}),Object(Ot.a)();var Dt,It=function(e){function t(t){return e.call(this,t)||this}return s.c(t,e),t.prototype.render=function(){var e=this,t=f.a.currentUser.roles.some(function(e){return"ADMIN"===e||"EMPLOYEE"===e}),n=f.a.currentUser.roles.some(function(e){return"ADMIN"===e});return i.createElement("div",{className:"course-builder"},i.createElement(c.a,null,t?i.createElement("div",null,i.createElement(u.a,{exact:!0,path:"/",render:function(t){t.match;return n?i.createElement(m.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl}):i.createElement(Nt,{feedbackUrl:e.props.feedbackUrl})}}),i.createElement(u.a,{exact:!0,path:"/schools",render:function(t){t.match;return i.createElement(m.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),i.createElement(u.a,{exact:!0,path:"/schools/new/gymnasium",render:function(){return i.createElement(h,{type:"gymnasium",feedbackUrl:e.props.feedbackUrl})}}),i.createElement(u.a,{exact:!0,path:"/schools/new/primary",render:function(){return i.createElement(h,{type:"primary",feedbackUrl:e.props.feedbackUrl})}}),i.createElement(u.a,{exact:!0,path:"/schools/:id/edit",render:function(t){var n=t.match;return i.createElement(p.a,{id:n.params.id,title:Object(l.a)(Dt||(Dt=s.e(["Editera skola"],["Editera skola"]))),feedbackUrl:e.props.feedbackUrl})}}),i.createElement(u.a,{exact:!0,path:"/subjects",render:function(){return i.createElement(k,{feedbackUrl:e.props.feedbackUrl})}}),i.createElement(u.a,{path:"/subjects/:id",render:function(t){var n=t.match;return i.createElement(g.a,{id:n.params.id,feedbackUrl:e.props.feedbackUrl})}}),i.createElement(u.a,{exact:!0,path:"/courses/new",render:function(){return i.createElement(Nt,{feedbackUrl:e.props.feedbackUrl})}}),i.createElement(u.a,{path:"/courses/create-from-template/:templateId",render:function(t){var n=t.match;return i.createElement(Ct,{templateId:n.params.templateId,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),i.createElement(u.a,{path:"/courses/:id/edit",render:function(t){var n=t.match;return i.createElement(Ct,{id:n.params.id,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}})):i.createElement("div",null,i.createElement(u.a,{path:"/",render:function(){return i.createElement("div",null,i.createElement(v.a,{title:"Kursbyggaren",activePage:"courseBuilder",routes:{feedback:e.props.feedbackUrl}}),i.createElement("h2",null,"Behörighet saknas"),i.createElement("p",null,"Detta verktyg är endast till för anställda på Kunskapsskolan."),i.createElement("h3",null,"Användarattribut"),i.createElement("table",{className:"ked_boxed",style:{border:"1px solid #eee"}},i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Attribut"),i.createElement("th",null,"Värde"))),i.createElement("tbody",null,Object.keys(f.a.currentUser).map(function(e){return i.createElement("tr",{key:e},i.createElement("td",null,e),i.createElement("td",null,f.a.currentUser[e]))}))))}}))),i.createElement(d.a,null))},t}(i.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(137),n(94),n(3)),s=n(0),i=n(163),o=n(112),l=n(18),c=n(9),u=n(57),d=function(e){function t(t){var n=e.call(this,t)||this;return location.hash||(location.hash="#/"),n}return r.c(t,e),t.prototype.render=function(){var e=this.props.intl;return a.a.currentUser?s.createElement(l.a.Provider,{value:{intl:e}},s.createElement(i.a,{viewCourseUrl:"courseviewer.html",feedbackUrl:"http://svt.se/nyheter"})):s.createElement(o.a,null)},t}(s.Component),m=Object(u.a)(Object(c.d)(d));t.default=m}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmVudi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9LRUQuY2ZnLnRzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2tlZGJhY2tlbmQtc3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL3V0aWxzLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2NhY2hlLWJ1c3QuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8vZGVsdGEtbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1xdWVyeS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9rZWRiYWNrZW5kLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8vcXVlcnktc2V0LmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL211dGF0aW9uLXF1ZXVlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2RlbHRhLWNvbGxlY3Rpb24vYXBwbHktbXV0YXRpb25zLW9uLWRlbHRhcy5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9kZWx0YS1jb2xsZWN0aW9uL2RlbHRhLWNhY2hlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2tlZGJhY2tlbmQtd3JpdGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL2RlbHRhLWNvbGxlY3Rpb24vZGVsdGEtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9rZWRiYWNrZW5kLXJlcG8uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvZGIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvZXhlYy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zcGlubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYWNjZXNzLWNvbnRyb2wvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FjY2Vzcy1jb250cm9sL2dldC11c2VyLWNsYWltcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L3V0aWxzLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9xdWVyeS1zdHJpbmcudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9yZXN0Y2xpZW50LmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQva2VkLWJlYXJlci1wcm92aWRlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2FjY2Vzcy1jb250cm9sLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvaHR0cC1lcnJvci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2luZGV4LmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NoYXJ0cy9nb2FsLXByb2dyZXNzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViL2JlYXJlci1zdG9yYWdlLXNlc3Npb25zdG9yYWdlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvbWlncmF0ZS10YXNrLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvbWlncmF0ZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUtY291cnNlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC13ZWIvaGFzaC1yZXN0b3Jlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2NsaWVudHdlYi5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvc2Nob29sLW1vbWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZmVhdHVyZXMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL2tlZC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9lbWl0dGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL3ZhbHVlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL29ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0udHN4Iiwid2VicGFjazovL1tuYW1lXS8uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL2luZGV4LmpzIiwid2VicGFjazovL1tuYW1lXS9leHRlcm5hbCBcIlJlYWN0RE9NXCIiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvbWFwLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9zY2hvb2wtdGVybS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvbWFrZS1zdXNwZW5zZS1hcGkudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMvZWRzY2xpZW50LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL2NvdXJzZXMvY291cnNlLWJhbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIta3MvbG9naWMvb3JkZXJlZC1yZXF1aXJlbWVudHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvZmliZXItY29udGV4dC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLXN2LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL3dhc2gtaHRtbC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvaW1hZ2UtZWRpdC1hY3Rpb25zLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL2NvdXJzZXMvYnVzaW5lc3MtbG9naWMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2ZlYXR1cmVzL2ZlYXR1cmVzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9TZXR1cExhbmd1YWdlSW50bC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc2VsZWN0LXJlbGF0ZWQtZG9jcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3Rlc3QvZGF0YS91c2Vycy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvZXJyb3Itc3VjY2Vzcy1mZWVkYmFjay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3JlcG9zL3JlcG8udHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMva25vd2xlZGdlLW1hdHJpeC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvYXBpcy9nb29nbGUtcGlja2VyLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL2dvb2dsZS13ZWJjbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FwaXMvYnV0dG9ucy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL2NvbmZpZ3VyZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFsLXNldHRlcnMvc2V0LWJlYXJlci1wcm92aWRlcnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL3NldC1rZWQtYmFja2VuZC1jbGllbnQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL3NldC1lZHMtY2xpZW50LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3NjaG9vbHMvZWRpdC1zY2hvb2wudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyLWtzL2xvZ2ljL3Rhc2stb3JkZXIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvc2hvdy1zdWJqZWN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy9zaG93LXN1YmplY3QtaW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy9zb3J0YWJsZS10YXNrLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb250cmFjdHMva2VkLW1vZGVscy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXJlc291cmNlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC91dGlscy9jaG9vc2UtdXNlci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL2NvbnRlbnQtZWRpdGFibGUtZmllbGQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3NjaG9vbHMvZWRpdGFibGUtc2Nob29sLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3NjaG9vbHMvaW5kZXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL21vZGFsLXBhZ2VzL2VkaXQtdGFzay90YXNrLW1pZ3JhdGlvbi1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9rZWVwLXNlc3Npb24tYWxpdmUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvc2tvbHZlcmtldC1zdWJqZWN0LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL2RpZmYvbWlncmF0ZS1zdWJqZWN0LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL2RpZmYvZGlmZi14bWwtd2l0aC1kYXRhYmFzZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy91cGxvYWRlZC1zdWJqZWN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy9zdWJqZWN0cy1pbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUgc3luYyBzdnxlbiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC9zZXQtY3VycmVudC11c2VyLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3NjaG9vbHMvbmV3LXNjaG9vbC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvaW5kZXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXJlc291cmNlLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9jYWNoZWQtcmVzcG9uc2UudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL3NlYXJjaC1yZXN1bHRzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svYmFzaWMtZWRpdGFibGUtdGFzay1maWVsZHMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL21vZGFsLXBhZ2VzL2VkaXQtdGFzay90YXNrLXN0YXR1cy1mcmFnbWVudC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL3NhdmUtb3ItY2FuY2VsLWJ1dHRvbnMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL21vZGFsLXBhZ2VzL2VkaXQtdGFzay90YXNrLWNvbnRlbnQtZnJhZ21lbnQudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL21vZGFsLXBhZ2VzL2VkaXQtdGFzay9wcmV2aWV3YWJsZS10YXNrLWZpZWxkcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL2VkaXQtdGFzay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtdGFzay1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2NvdXJzZS1tb2R1bGUudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL2NvdXJzZXMvY291cnNlLW1vZHVsZS1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3Mvc2Nob29sLWNvdXJzZXMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc2Nob29sLWNvdXJzZXMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL21vY2svbW9jay1jbGFzc3Jvb20tZGF0YS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zZWxlY3QtdGVhY2hlci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL29ic2VydmUudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXRlYWNoZXItbGlzdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvd2VpZ2h0ZWQtaXRlbXMtdGFibGUudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL21vZGFsLXBhZ2VzL2VkaXQtd29ya2Zsb3ctbGluay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtd29ya2Zsb3ctbGluay50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvY3VycmVudC11c2VyLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL3NlbGVjdC1zdHVkeS1ncm91cHMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL2NvdXJzZXMvaW5uZXItZWRpdC1jb3Vyc2UudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL2dvb2dsZS1jbGFzc3Jvb20tc3luYy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2VkaXQtY291cnNlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2NyZWF0ZS1uZXcudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC90ZXN0cGFnZS1jb3Vyc2VidWlsZGVyLnRzeCJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiZXhlY3V0ZU1vZHVsZXMiLCJpIiwicmVzb2x2ZXMiLCJsZW5ndGgiLCJpbnN0YWxsZWRDaHVua3MiLCJwdXNoIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibW9kdWxlcyIsInBhcmVudEpzb25wRnVuY3Rpb24iLCJzaGlmdCIsImRlZmVycmVkTW9kdWxlcyIsImFwcGx5IiwiY2hlY2tEZWZlcnJlZE1vZHVsZXMiLCJyZXN1bHQiLCJkZWZlcnJlZE1vZHVsZSIsImZ1bGZpbGxlZCIsImoiLCJkZXBJZCIsInNwbGljZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIjciLCJleHBvcnRzIiwibW9kdWxlIiwibCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsIlJlYWN0IiwiY2FwaXRhbGl6ZUZpcnN0Iiwic3RyIiwiY2hhckNvZGVBdCIsInN1YnN0ciIsInRvTG9jYWxlVXBwZXJDYXNlIiwiZXh0ZW5kIiwib2JqIiwiZXh0ZW5zaW9uIiwia2V5cyIsImZvckVhY2giLCJjbG9uZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJjb25jYXQiLCJmbGF0dGVuIiwiYSIsImNvbXBhcmVQcm9wIiwicHJvcCIsImIiLCJhUHJvcCIsImJQcm9wIiwiY29tcGFyZVByb3BzIiwicHJvcHMiLCJsb2NhbGVzIiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsImxvY2FsZUNvbXBhcmUiLCJtYXAiLCJzcGxpdCIsIl9hIiwiX2IiLCJ0c2xpYl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZmlyc3RQYXJ0IiwicmVzdCIsImNtcFBhcnQiLCJmaXJzdEEiLCJmaXJzdEIiLCJyZWR1Y2UiLCJjbXAxIiwiY21wMiIsIkwiLCJ0ZXh0IiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwicnYiLCJidWlsZE1lc3NhZ2UiLCJkYXRlVGltZVJldml2ZXIiLCJleGVjIiwiRGF0ZSIsInNob3dJbmZvIiwibXNnIiwiZXZlbnQiLCJDdXN0b21FdmVudCIsImRldGFpbCIsImRpc3BhdGNoRXZlbnQiLCJzaG93RXJyb3IiLCJlcnJNc2ciLCJtZXNzYWdlIiwiY29uc29sZSIsImVycm9yIiwibWF4TGVuZ3RoIiwibWF4TGVuIiwiYXJyYXlUb0xvb2t1cCIsImtleUFjY2Vzc29yIiwiaXRlbSIsImFycmF5IiwiYXJyYXlUb01hcCIsImNoZXJyeVBpY2tQcm9wcyIsInByb3BzVG9QaWNrIiwicHJvcHNUb1BpY2tfMSIsInByb3BzVG9QaWNrXzFfMSIsIm5leHQiLCJkb25lIiwicGFyYW0iLCJkaXN0aW5jdCIsIngiLCJzaGFsbG93RXF1YWxzIiwia2V5c0EiLCJrZXlzQiIsIl9fd2VicGFja19leHBvcnRzX18iLCJlbnYiLCJfa2VkX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfanNfZGlzdF9qc19rZWRfYmFja2VuZF9jbGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNmZyIsIl9LRURfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIktlZEJhY2tlbmRTdWJzY3JpcHRpb24iLCJzdWJzY3JpYmVyIiwiY29sbGVjdGlvbiIsInRoaXMiLCJub3RpZnlTdWJzY3JpYmVyIiwibGFzdE5vdGlmaWVkRGF0YSIsImV4IiwiZXgyIiwidW5zdWJzY3JpYmUiLCJnZXRUYWJsZUZyb21MYWJlbCIsInRhYmxlIiwibGFiZWwiLCJzY2hlbWEiLCJyZWxhdGlvbnNoaXBzIiwicXVlcnlBcnJheSIsInF1ZXJ5IiwiZmlsdGVyIiwiZnJvbSIsIkFORCIsImRhdGVUaW1lIiwidG8iLCJpZHMiLCJpbmNsdWRlcyIsImlkIiwidGFncyIsInNvbWUiLCJ0YWciLCJnZXRGaWx0ZXJGcm9tUXVlcnkiLCJmaWx0ZXIxIiwiZmlsdGVyMiIsImJyYW5jaFNlbnNpdGl2ZSIsIm9wIiwiZ2xvYmFsT3AiLCJjYWNoZV9idXN0X0NhY2hlQnVzdCIsIkNhY2hlQnVzdCIsImdldENhY2hlQnVzdCIsInVzZXIiLCJnZXRJbnZvbHZlZEl0ZW1zIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImpvaW4iLCJpbnZhbGlkYXRlQ2FjaGUiLCJyZXFzIiwiZ2V0Q2FjaGVJbnZhbGlkYXRpb25zIiwic2V0SXRlbSIsIm5vdyIsImhhc0VkZ2VzRnJvbSIsInJlbGF0ZWRUYWJsZXMiLCJicmFuY2hJZCIsInNvcnQiLCJpbnZhbGlkYXRpb25TZXQiLCJyZXEiLCJzb3VyY2VUYWJsZSIsInRhcmdldEJyYW5jaElkIiwiYXBwbHlEZWx0YSIsImRvYyIsImRlbHRhIiwidGFyZ2V0RG9jIiwia2V5c18xIiwidHNsaWJfZXM2IiwidmFsIiwibWV0YUluc3RydWN0aW9ucyIsInN0YXJ0c1dpdGgiLCJfbG9vcF8xIiwibWkiLCJtaVZhbHVlIiwiJHdhc1Vuc2V0IiwidmFsdWVzVG9BZGQiLCJFcnJvciIsInRhcmdldEFycmF5IiwidmFsdWVzVG9BZGRfMSIsInYiLCJ2YWx1ZXNUb1JlbW92ZV8xIiwibWV0YUluc3RydWN0aW9uc18xIiwibWVyZ2VEZWx0YXMiLCJkZWx0YTEiLCJkZWx0YTIiLCJyZW1vdmVVbnNldFByb3BzIiwidGFyZ2V0RGVsdGEiLCJrZXlzXzIiLCJfbG9vcF8yIiwiJHVuc2V0IiwidmFsdWVzVG9BZGRfMiIsInRhcmdldE1ldGFQcm9wIiwidGFyZ2V0UmVtb3ZlQXJyYXkiLCIkcmVtb3ZlIiwidGFyZ2V0QWRkQXJyYXkiLCIkYWRkIiwidmFsdWVzVG9SZW1vdmVfMiIsIm1ldGFJbnN0cnVjdGlvbnNfMiIsImtlZGJhY2tlbmRfcXVlcnlfS2VkQmFja2VuZFF1ZXJ5IiwiS2VkQmFja2VuZFF1ZXJ5IiwicmVwbyIsIm11dGF0aW9uUXVldWUiLCJzdWJzY3JpcHRpb25zIiwiZ290SW5pdGlhbFJlc3BvbnNlIiwiaW52YWxpZCIsImxvYWRlZFZlcnNpb24iLCJfbG9hZFByb21pc2UiLCJpbmNsdWRlIiwicXVlcnlLZXkiLCJtdXRhdGlvbnNPbkVtcHR5IiwiY29tcGFyYWJsZVByb3BzIiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbmZpZ3VyYWJsZSIsInN1YnNjcmliZSIsInN1YnNjcmlwdGlvbiIsImdldERhdGFXaXRoTXV0YXRpb25zQXBwbGllZCIsInF1ZXJ5TG9jYWxseSIsImxvYWQiLCJzZW50IiwidmVyc2lvbiIsImxvYWRQcm9taXNlIiwiX3RoaXMiLCJ3cml0ZXIiLCJwZXJzaXN0ZWRWZXJzaW9uIiwiX2xvYWQiLCJ0aGVuIiwiTWF0aCIsIm1heCIsImNhdGNoIiwibm90aWZ5U3Vic2NyaWJlcnMiLCJhZmZlY3RzUXVlcnkiLCJ3YWl0Rm9yVmVyc2lvblRvUGVyc2lzdCIsInF1ZXJ5U2VydmVyIiwiY29tbWl0TXV0YXRpb25zIiwibXV0YXRpb25zIiwibXV0YXRpb25zXzEiLCJyZWZyZXNoT3JJbnZhbGlkYXRlIiwiZGVsdGFEb2MiLCJvcHRpbWlzdGljTXV0YXRpb25zIiwiZGF0YV8xIiwicXVlcnlTZXQiLCJnZXRDbGllbnQiLCJsaXN0Iiwib3B0aW1pc3RpYyIsIm11dGF0aW9uIiwiYXBwbHlNdXRhdGlvbnNPbkRhdGEiLCJsaXN0T3B0aW9ucyIsInNvdXJjZUlkcyIsInJlcXVlc3RlZFRhZ3MiLCJ1dGlscyIsInVwZGF0ZWREb2MiLCIkbWV0YSIsImluY2x1ZGVkRG9jcyIsInVwZGF0ZWRBcnJheSIsInJlbGF0ZWQiLCJ1cGRhdGVkUmVsYXRlZCIsImluZGV4T2YiLCJncmFwaFByb3AiLCJyZWxhdGVkRG9jIiwic2V0R3JhcGhQcm9wcyIsImxhYmVsc18xIiwicmVsYXRlZERvY3MiLCJjb3B5Iiwia2VkYmFja2VuZF9jb2xsZWN0aW9uX0tlZEJhY2tlbmRDb2xsZWN0aW9uIiwiX3N1cGVyIiwiS2VkQmFja2VuZENvbGxlY3Rpb24iLCJvYnNlcnZlciIsIl9pbmNsdWRlcyIsImFwcGx5UXVlcnkiLCJhZGRUb1F1ZXJ5QXJyYXlQcm9wIiwiYXJyYXlQcm9wIiwiZW50cmllcyIsImFkZEZsYWdzIiwiZmxhZ3MiLCJkZWJ1ZyIsImlkc09ubHkiLCJpZHNBbmROYW1lc09ubHkiLCJpbmNsdWRlSWRzT25seSIsImluY2x1ZGVJZHNBbmROYW1lc09ubHkiLCJiZXR3ZWVuIiwicm9sZSIsImhhc0VkZ2VzVG8iLCJzaW5nbGUiLCJvblplcm8iLCJvbk1hbnkiLCJncmFwaHMiLCJjYWNoZU9wdGltaXplZCIsImNhY2hlQnVzdCIsImdldFVzZXIiLCJtdXRhdGlvbkZhY3RvcnkiLCJ0eCIsImtlZF9iYWNrZW5kX2NsaWVudCIsIm11dGF0aW9uUmVxdWVzdHMiLCJ0aHJvd2VycyIsInRvVmFsdWUiLCJpdGVtcyIsImxvZyIsInVwZGF0ZSIsImNoYW5nZXMiLCJkZWJvdW5jZSIsIm11dGF0ZSIsInRhcmdldE5hbWUiLCJhZGRSZWxhdGVkIiwicmVtb3ZlUmVsYXRlZCIsInVuZG9MaW5rIiwicmVsYXRlZElkIiwiZGVsZXRlIiwicXVlcnlfc2V0X1F1ZXJ5U2V0IiwiUXVlcnlTZXQiLCJxdWVyaWVzIiwiUHJvbWlzZSIsImFsbCIsInEiLCJjbGVhbnVwSW52YWxpZFF1ZXJpZXMiLCJ0aW1lb3V0SGFuZGxlIiwiY2xlYXJUaW1lb3V0IiwiZmluZFF1ZXJ5IiwiZmluZCIsInFJbmNsdWRlcyIsInJlc18xIiwiZW50aXR5IiwicmVzdWx0XzEiLCJldmVyeSIsInJlc3VsdF8yIiwic3RhdGVfMSIsImtiUXVlcnkiLCJzZXRUaW1lb3V0IiwibXV0YXRpb25fcXVldWVfTXV0YXRpb25RdWV1ZSIsIk11dGF0aW9uUXVldWUiLCJxdWV1ZSIsInNhdmluZ1F1ZXVlIiwiYWRkIiwibWVyZ2UiLCJtb3ZlVG9TYXZpbmdRdWV1ZSIsImNsZWFyU2F2aW5nUXVldWUiLCJxdWV1ZTEiLCJxdWV1ZTIiLCJtdXRhYmxlUXVldWUxIiwibXV0YWJsZVF1ZXVlMiIsImxlbiIsIm92ZXJsYXBwaW5nSWRPcElkeCIsImZpbmRJbmRleCIsIm5ld011dCIsImFwcGx5TXV0YXRpb25zT25EZWx0YXMiLCJkZWx0YXMiLCJ1c2VyRGlzcGxheU5hbWUiLCJoYXNBZGRpdGlvbmFsRmlsdGVyIiwidHlwZSIsInNvdXJjZUlkIiwidGFyZ2V0SWQiLCJjb250cmlidXRvciIsImlkeCIsImRlbHRhUmVsYXRpb24iLCJjb250cmlidXRvcnMiLCJleGlzdGluZ0RlbHRhRG9jIiwibmV3RGF0YSIsImRlbHRhX2NhY2hlX0RlbHRhQ2FjaGUiLCJEZWx0YUNhY2hlIiwiZ2V0VXNlckRpc3BsYXlOYW1lIiwibG9va3VwIiwiYXBwbHlNdXRhdGlvbnMiLCJjYWNoZUVudHJ5IiwibmV3VmFsdWUiLCJmZXRjaCIsIm9wdGltaXN0aWNWYWx1ZSIsIm5vdGlmeSIsImRlbHRhX2NhY2hlX0RlbHRhQ2FjaGVFbnRyeSIsImNsZWFudXBUaW1lciIsInN1YnNjcmliZXJzIiwiaXNGZXRjaGluZyIsIkRlbHRhQ2FjaGVFbnRyeSIsImNsaWVudCIsImZldGNoT3BlcmF0aW9uSWQiLCJmZXRjaEZyb21TZXJ2ZXIiLCJmYWlsIiwicmVzIiwiX2MiLCJodHRwIiwic3RhdHVzIiwianNvbiIsImNvcHlfMSIsImtlZGJhY2tlbmRfd3JpdGVyX0tlZEJhY2tlbmRXcml0ZXIiLCJLZWRCYWNrZW5kV3JpdGVyIiwiX3RpbWVvdXRJZCIsIl9pc1NhdmluZ1Byb21pc2UiLCJjdXJyZW50VmVyc2lvbiIsIm9ic2VydmFibGUiLCJlcnJvclN1YnNjcmliZXJzIiwic3RhdGVTdWJzY3JpYmVycyIsImRlbHRhQ2FjaGUiLCJvbkVycm9yIiwiY2FsbGJhY2siLCJvblN0YXRlQ2hhbmdlIiwib2ZmIiwiZGlzcGF0Y2hFcnJvciIsInJldHJ5YWJsZSIsIl8iLCJkaXNwYXRjaFN0YXRlQ2hhbmdlIiwic2F2ZSIsInJldHJ5U2F2ZSIsImlzRWRpdGVkIiwiX3NhdmUiLCJyZXNvbHZlIiwiZXRhZ011dGF0aW9ucyIsImVycm9yXzEiLCJtYXBNdXRhdGlvbnMiLCJ0cnlzIiwiYmF0Y2giLCJuZXdFdGFncyIsIiRldGFnIiwiZGlzcGF0Y2giLCJiciIsImxpbmsyIiwidW5saW5rMiIsImNsZWFyQnJhbmNoIiwiZGVsdGFfY29sbGVjdGlvbl9EZWx0YUNvbGxlY3Rpb24iLCJEZWx0YUNvbGxlY3Rpb24iLCJrZWRiYWNrZW5kX3JlcG9fS2VkQmFja2VuZFJlcG8iLCJLZWRCYWNrZW5kUmVwbyIsImRlZmF1bHRRdWVyeU9wdGlvbnMiLCJ0YWJsZU5hbWUiLCJfY2xvbmUiLCJxdWVyeU9wdGlvbnMiLCJ1bmRlZmluZWQiLCJicmFuY2giLCJvcHRpbWl6ZUNhY2hlIiwic2F2ZU5vdyIsImRiIiwiZ2xvYmFsSWQiLCJTY2hvb2xzIiwiQ291cnNlSW5zdGFuY2VzIiwiS0VEX2VudiIsImtlZEJhY2tlbmRDbGllbnQiLCJjdXJyZW50VXNlciIsIm1haWwiLCJkaXNwbGF5TmFtZSIsIktFRF9jZmciLCJLRURfUkVBTE0iLCJzdGFuZGFyZFNjaG9vbCIsInNjaG9vbHMiLCJteVNjaG9vbCIsInNjaG9vbCIsImdldEJyYW5jaElkIiwiY291cnNlSWQiLCJzd2l0Y2hNYXAiLCJicmFuY2hlcyIsIm9mZmljaWFsQnJhbmNoSWQiLCJnZXRPckNyZWF0ZUJyYW5jaElkIiwiY291cnNlSW5zdGFuY2VzIiwiYWNsIiwic2Nob29sSWQiLCJ0cmVlUGFyZW50SWQiLCJnZXRBbGxEZXNjZW5kYW50SWRzIiwiY291cnNlQmxvY2tzIiwiY291cnNlQ29udGVudHMiLCJjb3Vyc2VUYWJzIiwidGFza3MiLCJjb21tYW5kIiwiZG9jdW1lbnQiLCJleGVjQ29tbWFuZCIsImpRdWVyeSIsIlNwaW5uZXIiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY2xhc3NOYW1lIiwiYXJpYS1oaWRkZW4iLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyIsImhhc0FjY2VzcyIsInJlcXVlc3RlZFJpZ2h0IiwiY2xhaW1zIiwicm9sZXMiLCJnZXRVc2VyQ2xhaW1zIiwidHV0b3JGb3IiLCJjbGFpbSIsImZyb21TdHJpbmdBcnJheSIsImhhc1dyaXRlQWNjZXNzIiwiaXNUZWFjaGVyQXRTY2hvb2wiLCJpc1RlYWNoZXIiLCJiZWxvbmdzVG9TY2hvb2wiLCJ0b0xvd2VyQ2FzZSIsImlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbCIsImltcGVyc29uYXRpb25FbnYiLCJhY3RBcyIsInVybCIsImN1cnJlbnRRdWVyeSIsInF1ZXJ5X3N0cmluZyIsImxvY2F0aW9uIiwic2VhcmNoIiwibmV3UXVlcnkiLCJuZXdRdWVyeVN0cmluZyIsImhyZWYiLCJoYXNoIiwicHJlc2VydmVJbXBlcnNvbmF0aW9uUXVlcnkiLCJwcmVzZXJ2ZWRRdWVyeSIsIklNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TXzEiLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNU18xXzEiLCJwSGFzaCIsImNyZWF0ZVVVSUQiLCJhdm9pZFNpbXVsdGFub3VzQ2FsbHMiLCJnZXRHbG9iYWxJZCIsImNvbXB1dGVQcmVkZXN0aW5hdGVkSWQiLCJ1cGRhdGVBcnJheSIsInJlcGxhY2UiLCJyYW5kb20iLCJmbG9vciIsInRvU3RyaW5nIiwibWV0aG9kIiwib25nb2luZ1Byb21pc2UiLCJyZWFsbSIsInBhZCIsImhleCIsImlucHV0IiwiZW5jb2RlciIsImRpZ2VzdCIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiVWludDhBcnJheSIsImNyeXB0byIsInN1YnRsZSIsIm5pYmJsZSIsIm1hcHBlciIsInJldHZhbCIsIm1hcHBlZCIsInBhcnNlUXVlcnlTdHJpbmciLCJsb2NhdGlvblNlYXJjaCIsInRvTG93ZXIiLCJwYXJ0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwidHJpbSIsImVuY29kZVBhcmFtcyIsInBhcmFtcyIsImVuY29kZVVSSUNvbXBvbmVudCIsImdlbmVyYXRlUXVlcnlTdHJpbmciLCJzcGxpdFVybEFuZFF1ZXJ5IiwidXJsV2l0aFBvc3NpYmxlUXVlcnkiLCJwUXVlcnkiLCJ1cGRhdGVEb2N1bWVudEdyYXBocyIsIm9sZERvYyIsIm5ld0RvYyIsImRvY1VwZGF0ZXMiLCJkb2NJZCIsIm5hdlByb3AiLCJmb3JlaWduVGFibGUiLCJvbGRMaXN0IiwibmV3TGlzdCIsInR1cGxlcyIsImFkZGVkIiwidHVwbGUiLCJhZGRlZF8xIiwiYWRkZWRfMV8xIiwibWV0YSIsIm11dGF0ZWRTdWJEb2MiLCJrZWRiYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwicHV0IiwibGluayIsIiRzZXQiLCJyZW1vdmVkIiwicmVtb3ZlZF8xIiwicmVtb3ZlZF8xXzEiLCJ1bmxpbmsiLCJ1cGRhdGVkIiwidXBkYXRlZF8xIiwidXBkYXRlZF8xXzEiLCJ1IiwicmVhY3RfYWRkb25zX3VwZGF0ZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fX2RlZmF1bHQiLCJkdEZvcm1hdCIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJmb3JtYXQiLCJzaG9ydERhdGVGb3JtYXQiLCJzaG9ydFBlcnNvbk5hbWVGb3JtYXQiLCJuYW1lcyIsImxhc3ROYW1lIiwicG9wIiwidXBkYXRlTW9kaWZpY2F0aW9uU3RhbXAiLCJtb2RpZmllZERhdGUiLCJtb2RpZmllZEJ5IiwidXBkYXRlQ3JlYXRpb25TdGFtcCIsImNyZWF0ZWREYXRlIiwiY3JlYXRlZEJ5IiwiZ2V0RW1haWxGcm9tRG9jQWNjZXNzIiwicmVzb3VyY2UiLCJlbWFpbCIsInN1YnN0cmluZyIsInVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzIiwiYXBwbHlFdGFncyIsImV0YWciLCJncmFwaHNfMSIsImdyYXBoc18xXzEiLCJyZWFkQmxvYiIsImJsb2IiLCJyZWplY3QiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwiZXYiLCJ0YXJnZXQiLCJvbmFib3J0Iiwib25lcnJvciIsInJlYWRCbG9iQXNUZXh0IiwicmVhZEFzVGV4dCIsImFsbG93Q29weSIsImUiLCJzdG9wUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsImRhdGFUcmFuc2ZlciIsImRyb3BFZmZlY3QiLCJ1cGRhdGVDb3Vyc2VCdWlsZGVyU3RhdHVzIiwiZGl2IiwianF1ZXJ5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19fZGVmYXVsdCIsImxvYWRDb3Vyc2UiLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJpbmNsdWRlVGVtcGxhdGVDaGFpbiIsImluY2x1ZGVUYXNrcyIsImNvdXJzZSIsImNvdXJzZVRhc2tzIiwidGVtcGxhdGVDaGFpbiIsImFiaWxpdGllcyIsImFiaWxpdGllc09yZGVyIiwia25vd2xlZGdlUmVxdWlyZW1lbnRzIiwia25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIiLCJjZW50cmFsQ29udGVudCIsImNlbnRyYWxDb250ZW50T3JkZXIiLCJjYyIsImhhc0NoYW5nZXMiLCJvcmlnaW5hbFZhbHVlcyIsImN1cnJlbnRWYWx1ZXMiLCJMYW5ndWFnZUNvbnRleHQiLCJpbnRsIiwicmVzdGNsaWVudF9SZXN0Q2xpZW50IiwiUmVzdENsaWVudCIsImlzb21vcnBoaWMiLCJiYXNlVXJsIiwibnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zIiwiX3N0YXR1cyIsImVtaXR0ZXIiLCJmZXRjaE9wdGlvbnMiLCJhdXRoSGVhZGVyIiwiYmVhcmVyIiwidXNlcm5hbWUiLCJidG9hIiwicGFzc3dvcmQiLCJiZWFyZXJQcm92aWRlciIsInBhdGgiLCJoZWFkZXJzIiwiX2ZldGNoIiwiZXJyIiwicXVlcnlTdHIiLCJ0b2tlbkluZm8iLCJ3d3dhdXRoIiwiX2QiLCJfZSIsImNhY2hlIiwibm9jYWNoZSIsImdldEJlYXJlciIsImV4cGlyZXMiLCJyZWZyZXNoQmVhcmVyIiwidG9rZW4iLCJBdXRob3JpemF0aW9uIiwidGVzdCIsIkFjY2VwdCIsInBvc3QiLCJDb250ZW50LVR5cGUiLCJib2R5Iiwia2VkX2JlYXJlcl9wcm92aWRlcl9LZWRCZWFyZXJQcm92aWRlciIsIktlZEJlYXJlclByb3ZpZGVyIiwic3RvcmFnZSIsInRva2VuSWQiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsInRva2VuVXJsIiwidG9rZW5RdWVyeSIsInJldHJpZXMiLCJ3YXJuIiwic3RhdHVzVGV4dCIsIkRvY3VtZW50QWNjZXNzIiwiYWNjZXNzQ2xhaW1UeXBlIiwiYWNjZXNzQ2xhaW1WYWx1ZSIsInJpZ2h0IiwiZnJvbVN0cmluZyIsImFjIiwiY2xhaW1UeXBlIiwidW5lc2NhcGUiLCJjbGFpbVZhbHVlIiwiZXNjYXBlIiwiYWNjZXNzQ29tcG9uZW50IiwidG9TdHJpbmdBcnJheSIsInVzZXJDbGFpbXMiLCJodHRwX2Vycm9yX0h0dHBFcnJvciIsIkh0dHBFcnJvciIsImNvZGUiLCJrZWRfYmFja2VuZF9jbGllbnRfS2VkQmFja2VuZENsaWVudCIsImtlZF9iYWNrZW5kX2NsaWVudF9CYXRjaFJ1bm5lciIsIktlZEJhY2tlbmRDbGllbnQiLCJnZXRNeUNsYWltcyIsInJlcTEiLCJyZXEyIiwiZG8iLCJzY29wZUZuIiwicnVubmVyIiwiZGVsZXRlUmVhbG0iLCJzaGFyZSIsInVuc2hhcmUiLCJ0YXJnZXRUYWJsZSIsIkJhdGNoUnVubmVyIiwiZ29hbF9wcm9ncmVzc19Hb2FsUHJvZ3Jlc3MiLCJHb2FsUHJvZ3Jlc3MiLCJjcmVhdGVQcm9ncmVzcyIsIm51bWJlck9mVGFza3MiLCJjb21wbGV0ZWROdW1iZXJPZlRhc2tzIiwibWF4aW11bVRhc2tzRGlzcGxheWVkIiwiYmFja2dyb3VuZENvbG9yIiwicHJvZ3Jlc3NDb2xvciIsInByb2dyZXNzIiwiZXh0ZXJuYWxfUmVhY3RfIiwidGFza05vIiwiZmlsbCIsImN4IiwiY3kiLCJyZW5kZXIiLCJkZWZhdWx0UHJvcHMiLCJudW1iZXJvZlRhc2tzIiwib3Blbl9jbG9zZV9ib3hfT3BlbkNsb3NlQm94IiwiT3BlbkNsb3NlQm94Iiwic3RhdGUiLCJoZWFkZXJPcGVuIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsInNldFN0YXRlIiwidGl0bGUiLCJjaGlsZHJlbiIsImhlYWRlckNsYXNzTmFtZSIsImNvbnRlbnRDbGFzc05hbWUiLCJkaXNwbGF5UHJvZ3Jlc3MiLCJwcm9ncmVzc0RhdGEiLCJpbmFjdGl2YXRlZCIsImluYWN0aXZhdGVkUmVuZGVyIiwib25DbGljayIsIm9uT3BlbkNsb3NlIiwiQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIiwic2Vzc2lvblN0b3JhZ2UiLCJwYXJzZSIsIm1pZ3JhdGVUYXNrIiwidGFzayIsInJlc291cmNlcyIsIm1pZ3JhdGUiLCJ0YXNrSWRzIiwicmVzcG9uc2libGVUZWFjaGVycyIsInJlc291cnNlcyIsIm1pZ3JhdGVDb3Vyc2UiLCJyZWRpckhhc2giLCJoYXNoX3Jlc3RvcmVyX2EiLCJ0aW1lIiwicmVtb3ZlSXRlbSIsIl9fbWlncmF0b3JfbWl4ZWRfaW4iLCJLZWRNb2RlbE1pZ3JhdG9yTWl4aW4iLCJ0aW1lT2ZQYWdlTG9hZCIsImtlZF9iYWNrZW5kX2NsaWVudF93ZWJfV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIiLCJXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciIsInRva2VuUGF0aCIsInRva2VuUmVzcG9uc2VNYXBwZXIiLCJyZWRpcmVjdCIsImNyZWRlbnRpYWxzIiwid2FudHNSZWRpcmVjdCIsInJlbG9hZCIsInNlbGYiLCJrZWRfYmFja2VuZF9jbGllbnRfd2ViX0tlZEJhY2tlbmRDbGllbnRXZWIiLCJLZWRCYWNrZW5kQ2xpZW50V2ViIiwiYXBpQmFzZVVybCIsInByb3ZpZGVyT3JUb2tlblBhdGgiLCJnZXRGaXJzdEFuZExhc3RXZWVrT2ZUZXJtIiwidGVybSIsImdldFRlcm1TdGFyRW5kRGF0ZSIsImRhdGUiLCJpc0ZpcnN0VGVybSIsInRlcm1ZZWFyIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsInRlcm1ZZWFyTW9tZW50Iiwid2VlayIsInN0YXJ0T2YiLCJlbmRPZiIsImdldFNjaG9vbE1vbWVudCIsInRoaXNZZWFyIiwieWVhciIsImlzQXV0dW1uIiwibW9udGgiLCJhY2FkZW1pY1llYXIiLCJhZGRZZWFyIiwiYVllYXIiLCJudW1ZZWFyc1RvQWRkIiwieWVhclN0ciIsInBhcnNlSW50IiwiX2ZlYXR1cmVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJLRUQiLCJFbWl0dGVyIiwiaW5pdGlhbFZhbHVlIiwiX2Rpc3BhdGNoIiwiVmFsdWUiLCJfb2JzZXJ2YWJsZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX21hcF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX2NvbGxlY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl9maWJlcl9jb250ZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJyZWFkIiwicmVzb2x2ZWQiLCJzdWJzY2lwdGlvbiIsImN1cnJlbnRGaWJlciIsImN1cnJlbnQiLCJmbiIsInByZWZpeCIsInRvQ29sbGVjdGlvbiIsImNvbWJpbmVMYXRlc3QiLCJvdGhlciIsIm15U3Vic2NyaXB0aW9uIiwib3RoZXJTdWJzY3JpcHRpb24iLCJ2YWx1ZXMiLCJtYXBwZWRTdWJzY3JpcHRpb24iLCJyZXR1cm5lZFN1YnNjcmlwdGlvbiIsIm9ic2VydmFibGVPclZhbHVlIiwiT2JzZXJ2YWJsZSIsIl9zdWJzY3JpYmUiLCJfanNfZGlzdF9qc19vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJDb2xsZWN0aW9uIiwiX3ZhbHVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfZW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX21hcCIsImVtaXR0ZXJfMSIsImZsYXQiLCJtZSIsIm9yZGVyQnkiLCJncm91cEJ5IiwiZmlyc3QiLCJhcnIiLCJSZW1vdmVJdGVtIiwic3R5bGUiLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiX3V0aWxzX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ0ZW1wbGF0ZU9iamVjdF8xIiwiX2NvbGxlY3Rpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl9lbWl0dGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJSZWFjdERPTSIsImluaXRNYXBNZXRob2QiLCJjdG9yIiwic2Nob29sX3Rlcm1fU2Nob29sVGVybSIsIlNjaG9vbFRlcm0iLCJkYXRlT3JTY2hvb2xNb21lbnQiLCJzY2hvb2xNb21lbnQiLCJzY2hvb2xfbW9tZW50IiwibW9tZW50X2RlZmF1bHQiLCJuZXh0VGVybSIsInByZXZUZXJtIiwidG9Mb2NhbGVTdHJpbmciLCJzaG9ydFllYXIiLCJmb3JtYXRNZXNzYWdlIiwiZGVmYXVsdE1lc3NhZ2UiLCJkZWZhdWx0T3B0aW9ucyIsImlzQXBpTWV0aG9kIiwiZiIsImNhY2hlRXhwaXJhdGlvbiIsImVkc2NsaWVudF9FZHNDbGllbnQiLCJFZHNDbGllbnQiLCJ1c2VyRW1haWxHZXR0ZXIiLCJvbmdvaW5nUHJvbWlzZXMiLCJhcmdzSnNvbiIsInN1c3BlbnNlIiwiYXBpIiwicHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsInN1c3BlbmRpZnkiLCJjYWNoZWRFbnRyeSIsInByb21pc2UiLCJ0aW1lb3V0IiwibWFrZVN1c3BlbnNlQXBpIiwicHJpdmF0aXppbmdDYWNoZUJ1c3QiLCJnZXRBY3RpdmVDb3Vyc2VzIiwiY291cnNlQ29kZSIsIkNvdXJzZUNvZGUiLCJwZXJpb2ROYW1lIiwiUGVyaW9kTmFtZSIsImNvdXJzZXMiLCJleF8xIiwiZ2V0TGF0ZXN0QXNzZXNzbWVudHMiLCJsaW1pdCIsImlzTmFOIiwiQ291bnQiLCJhc3Nlc3NtZW50cyIsImdldFN0dWRlbnRHb2FscyIsInN0dWRlbnRHb2FscyIsImdldFN0dWRlbnRGdXR1cmVBYmlsaXRpZXMiLCJzdHVkZW50RnV0dXJlQWJpbGl0aWVzIiwiZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMiLCJzdHVkZW50cyIsImdldFNjaG9vbFR1aXRpb25Hcm91cHMiLCJzY2hvb2xUdWl0aW9uR3JvdXBzIiwiZ2V0VHVpdGlvbkdyb3VwU3R1ZGVudHMiLCJ0dWl0aW9uR3JvdXBTdHVkZW50cyIsImdldFNjaG9vbFRlYWNoZXJzIiwic2Nob29sVGVhY2hlcnMiLCJnZXRBY2FkZW1pY1llYXJUZXJtcyIsInNjaG9vbExvY2FsZSIsIm1vY2tfZWRzX2RhdGEiLCJTb3V0aEluZGlhIiwiaXNTYW1lT3JBZnRlciIsImZpcnN0VGVybSIsInN0YXJ0RGF0ZSIsImlzU2FtZU9yQmVmb3JlIiwic2Vjb25kVGVybSIsImVuZERhdGUiLCJOb3J0aEluZGlhIiwiaG9saWRheXMiLCJmaXJzdFRlcm1Nb21lbnQiLCJzZWNvbmRUZXJtTW9tZW50Iiwic3RhcnRGaXJzdFRlcm1EYXRlIiwic3RhcnRTZWNvbmRUZXJtRGF0ZSIsImVuZEZpcnN0VGVybURhdGUiLCJlbmRTZWNvbmRUZXJtRGF0ZSIsInRvRGF0ZVN0cmluZyIsImVkc2NsaWVudF9FRFNQZXJpb2QiLCJFRFNQZXJpb2QiLCJwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm0iLCJwZXJpb2QiLCJzY2hvb2xUZXJtIiwidmFsdWVPZiIsIkFkbWluTWVudUl0ZW1zIiwiX3V0aWxzX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJyb3V0ZSIsInRlbXBsYXRlT2JqZWN0XzIiLCJOb25BZG1pbk1lbnVJdGVtcyIsInRlbXBsYXRlT2JqZWN0XzMiLCJ0ZW1wbGF0ZU9iamVjdF80Iiwic2V0Q291cnNlSW1hZ2UiLCJvcmlnQ291cnNlIiwiaG9zdCIsImltYWdlSWQiLCJrZWRiYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiaW1hZ2VzIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiQ291cnNlQmFubmVyIiwiaXNUZW1wbGF0ZSIsImJhY2tncm91bmRJbWFnZSIsImFjdGl2ZVBhZ2UiLCJpc0FkbWluIiwibWVudUl0ZW1zIiwib25EcmFnT3ZlciIsIl91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwib25Ecm9wIiwiZmlsZXMiLCJmaWxlIiwic2l6ZSIsInRlbXBsYXRlT2JqZWN0XzUiLCJmb3JtIiwiRm9ybURhdGEiLCJhcHBlbmQiLCJ0ZW1wbGF0ZU9iamVjdF82IiwibWF0Y2giLCJnZXRBc1N0cmluZyIsInRlbXBsYXRlT2JqZWN0XzciLCJvbkRyb3BJbWFnZSIsImlzQWN0aXZlIiwiY2FsbGJhY2tzIiwiZ2l2ZW5Sb3V0ZSIsInJvdXRlcyIsImRlZmF1bHRSb3V0ZSIsInJlYWN0X3JvdXRlcl9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsImdldE9yZGVyZWREb2NzIiwiZG9jcyIsIm9yZGVyIiwiYXBwZW5kTGVmdG92ZXJzIiwibWFya2VkRG9jcyIsImxlZnRPdmVycyIsInJlc29sdmVSZXF1aXJlbWVudE9yZGVyIiwib3JkZXJEZWZpbmVyIiwib3JkZXJEZWZpbmluZ0RvY09ic2VydmFibGUiLCJrZWRiYWNrZW5kX29ic2VydmFibGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImNvdXJzZUNvZGVzIiwiX2dsb2JhbHNfZGJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIm9yZGVySG9sZGVycyIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwib3JkZXJIb2xkZXIiLCJjY09yZGVyIiwia3JPcmRlciIsIm9iakNsb25lIiwiYXNzaWduIiwiRmliZXJDb250ZXh0IiwicHJvdmlkZXJzIiwiYWRkUHJvdmlkZXIiLCJnZXRDdXJyZW50RmliZXIiLCJzZXRDdXJyZW50R2V0dGVyRnJvbVByb3ZpZGVycyIsInJlbW92ZVByb3ZpZGVyIiwic2V0IiwiX2V4ZWNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImJvbGQiLCJpY29uIiwiaXRhbGljIiwidW5kZXJsaW5lIiwic3RyaWtldGhyb3VnaCIsImhlYWRpbmcxIiwiaGVhZGluZzIiLCJoZWFkaW5nMyIsInBhcmFncmFwaCIsInF1b3RlIiwib2xpc3QiLCJ1bGlzdCIsIm91dGRlbnQiLCJpbmRlbnQiLCJsaW5lIiwicHJvbXB0IiwiaW1hZ2UiLCJwcm9tcHRNc2ciLCJjb21wb25lbnQiLCJlbGVtZW50Iiwic2VsIiwicmFuZ2UiLCJpbWciLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwidGFiSW5kZXgiLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiZ2V0UmFuZ2VBdCIsImNvbGxhcHNlIiwiaW5zZXJ0Tm9kZSIsInNldFN0YXJ0QWZ0ZXIiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsIm9uZm9jdXMiLCJvbkZvY3VzIiwib25ibHVyIiwib25CbHVyIiwib25DaGFuZ2UiLCJjb250ZW50RGl2IiwiaW5uZXJIVE1MIiwicGFyc2VyIiwiRE9NUGFyc2VyIiwiSFRNTF9XQVNIX1BPTElDWSIsInN0cmlrZSIsInByZSIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJjbGFzcyIsInRhYmluZGV4IiwidWwiLCJvbCIsImxpIiwiaHIiLCJzcGFuIiwiYm9yZGVyIiwidGJvZHkiLCJ0aGVhZCIsInRmb290IiwidHIiLCJ0ZCIsImNvbHNwYW4iLCJyb3dzcGFuIiwidGgiLCJhYmJyIiwic2NvcGUiLCJzb3J0ZWQiLCJ3YXNoSHRtbCIsImh0bWwiLCJwYXJzZUZyb21TdHJpbmciLCJjaGlsZE5vZGVzIiwibW9kaWZpZWQiLCJ3YXNoTm9kZSIsIm5vZGUiLCJ0YWdOYW1lIiwiaXNFbGVtZW50IiwicG9saWN5Iiwid2FzaENoaWxkTm9kZXMiLCJwYXJlbnROb2RlIiwiaW5zZXJ0QmVmb3JlIiwicmVtb3ZlIiwicmVtb3ZlTWlkZGxlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJhdHRyIiwiYWxsb3dlZCIsInJlbW92ZUF0dHJpYnV0ZSIsIndhc2hFbGVtZW50IiwiY2xhc3NlcyIsInd5c2l3eWdfV3lzaXd5ZyIsIld5c2l3eWciLCJmb2N1c1JlY3QiLCJvbk1vdXNlRG93biIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZVVwIiwiY29tcG9uZW50RGlkTW91bnQiLCJyZWFkT25seSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJlbGVtIiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXBvcnROdW1DaGFycyIsImlubmVyVGV4dCIsImNvbXBvbmVudERpZFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIm5leHRTdGF0ZSIsInRyaWdnZXJPbkNoYW5nZSIsIm5ld1N0YXRlIiwiZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QiLCJwYXJlbnRFbGVtZW50IiwiZm9jdXNFbGVtIiwicmVsYXRlZFRhcmdldCIsImZvY3VzUmVjdERpdiIsIm1ha2VDbGlja2FibGUiLCJjb3JuZXIiLCJnZXRSZWN0Q29ybmVyIiwicmVzaXplU3RhcnRYIiwiY2xpZW50WCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwibmV3V2lkdGgiLCJlbmRzV2l0aCIsImZhY3RvciIsIm5ld0hlaWdodCIsImhlaWdodCIsImV4ZWNJbWFnZUVkaXRBY3Rpb24iLCJjbWQiLCJjc3NGbG9hdCIsImNiIiwiZGVmYXVsdEFjdGlvbnMiLCJhY3Rpb25zIiwiYWN0aW9uc1RvVXNlIiwiYWN0aW9uIiwibWF4Q2hhcnMiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImZvY3VzIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwicmVmIiwiY29udGVudEVkaXRhYmxlIiwib25QYXN0ZSIsImN1cnJlbnRUYXJnZXQiLCJlZGl0b3JUZXh0IiwidGV4dEJlaW5nUGFzdGVkIiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJvbktleVVwIiwib25LZXlQcmVzcyIsIm9uSW5wdXQiLCJvbktleURvd24iLCJ3aGljaCIsInNoaWZ0S2V5Iiwia2V5Q29kZSIsInJlbW92ZUNoaWxkIiwib3V0bGluZSIsImJvdHRvbSIsInBhcmVudCIsImNoaWxkIiwicGFyZW50UmVjdCIsImNoaWxkUmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMiLCJ1bmNvdmVyZWRSZXF1aXJlbWVudHMiLCJrciIsImdldElkc05vdENvdmVyZWRCeVRhc2tzIiwiZ2V0SWRzTm90Q292ZXJlZEJ5UmVxUmVmZXJlbmNpbmdEb2NzIiwidGVtcGxhdGVzIiwiZG9jc0JlaW5nQ2hlY2tlZCIsInVuY292ZXJlZElkcyIsInNhbml0eUNoZWNrIiwiX3V0aWxzX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJ0YXNrSWQiLCJoYXNEdXBsaWNhdGVUYXNrcyIsInRhc2tVcmxzIiwidGFza3NXaXRoU2FtZVVybCIsImhhc0VtcHR5TW9kdWxlTmFtZXMiLCJtb2R1bGVOYW1lcyIsImhhc0R1cGxpY2F0ZU1vZHVsZU5hbWVzIiwiZ2V0VGFza3NQZXJJZCIsImZ1dHVyZUFiaWxpdGllcyIsImZhIiwiZ2V0U29mdEFjY2Vzc0xpc3QiLCJkYSIsIl91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiYWNjZXNzIiwiRmVhdHVyZXMiLCJfaW5pdGlhbGl6ZWQiLCJmZWF0dXJlTmFtZSIsInRoaXNfMSIsImluaXQiLCJfZmVhdHVyZXMiLCJfZmVhdHVyZV9mbGFnc19qc29uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJ0dXJuZWRPbkZlYXR1cmVzIiwiX2dsb2JhbHNfS0VEX2NmZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiS0VEX0ZFQVRVUkVTIiwiX3V0aWxzX3F1ZXJ5X3N0cmluZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwidGVzdHZlcnNpb24iLCJmZWF0dXJlcyIsImZlYXR1cmUiLCJ0dXJuT25BbGwiLCJzZXR1cEludGwiLCJDb21wb25lbnQiLCJfU2V0dXBMYW5ndWFnZUludGwiLCJyZWFjdF9pbnRsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJyZWFjdF9pbnRsX2xvY2FsZV9kYXRhX2VuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsInJlYWN0X2ludGxfbG9jYWxlX2RhdGFfc3ZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwibWVzc2FnZXMiLCJzdiIsIl90cmFuc2xhdGlvbnNfc3ZfanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiZW4iLCJfdHJhbnNsYXRpb25zX2VuX2pzb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIm1vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fX2RlZmF1bHQiLCJsb2NhbGUiLCJfZ2xvYmFsc19LRURfY2ZnX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJLRURfTE9DQUxFIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIlNlbGVjdFJlbGF0ZWREb2NzIiwibWFya2VkSWRzIiwibWFya01vZGUiLCJtaWdyYXRlZElkcyIsImdyb3VwZWRPcHRpb25zIiwiZ3JvdXAiLCJncm91cHMiLCJfdXRpbGl0eV9jb21wb25lbnRzX29wZW5fY2xvc2VfYm94X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJvcHRpb24iLCJpc01hcmtlZCIsImlzTWlncmF0ZWQiLCJpc1VuY292ZXJlZCIsIm9uTWFya0NoYW5nZWQiLCJ1c2VycyIsInNjaG9vbFR5cGUiLCJzY2hvb2xHcmFkZSIsIkVycm9yU3VjY2Vzc0ZlZWRiYWNrIiwiZXJyb3JzIiwiaW5mb3MiLCJfdW5oYW5kbGVkUmVqZWN0aW9uIiwiX2Vycm9yIiwiX2N1c3RvbUVycm9yIiwiX29uSW5mbyIsIl9kYldyaXRlckVycm9yIiwiX2RiV3JpdGVyU3RhdGVDaGFuZ2VkIiwiX2FkZEVycm9yIiwiZGV0YWlscyIsIl9hZGRJbmZvIiwiaW5mbyIsImlzU2F2aW5nIiwiZGJXcml0ZXJJc0VkaXRlZCIsImRiV3JpdGVySXNTYXZpbmciLCJyZWFzb24iLCJwb2ludGVyRXZlbnRzIiwiZGlzcGxheSIsIm1hcmdpbiIsInNob3dEZXRhaWxzIiwiZmxvYXQiLCJfY29tcG9uZW50c19jb3Vyc2VfYnVpbGRlcl9zdWJfY29tcG9uZW50c19yZW1vdmVfaXRlbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicmVtb3ZlRXJyb3IiLCJ0b2dnbGVEZXRhaWxzIiwiUmVwbyIsImNvbW0iLCJsaXN0UHJvbWlzZSIsImVuc3VyZUhhc0RhdGEiLCJyZWZyZXNoRnJvbVNlcnZlciIsInVwZGF0ZWRJdGVtcyIsIml0IiwidXBkYXRlZEl0ZW0iLCJpbnNlcnQiLCJLbm93bGVkZ2VNYXRyaXgiLCJleHBsYWluZWRSZXF1aXJlbWVudHMiLCJpZHNUb01hcmtOb3RPayIsIm9uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZCIsImNvbHVtbnMiLCJyb3dzIiwicm93IiwiZ3JhZGUiLCJwTmV4dCIsImdyYWRlU3RlcCIsInRvVXBwZXJDYXNlIiwicmVxdWlyZW1lbnQiLCJpc01hcmtlZE9LIiwiaXNNYXJrZWROb3RPSyIsInBsYWNlaG9sZGVyIiwiR29vZ2xlUGlja2VyIiwidXBsb2FkIiwibXVsdGlwbGUiLCJzaG93IiwiZW5zdXJlSW5pdGVkIiwicGlja2VyYnVpbGRlciIsImdvb2dsZSIsInBpY2tlciIsIlBpY2tlckJ1aWxkZXIiLCJhZGRWaWV3IiwiRG9jc1ZpZXciLCJzZXRPd25lZEJ5TWUiLCJzZXRJbmNsdWRlRm9sZGVycyIsInNldExvY2FsZSIsInNldFNpemUiLCJzZXRPQXV0aFRva2VuIiwiYXV0aFRva2VuIiwic2V0Q2FsbGJhY2siLCJyZXNwb25zZSIsIkFjdGlvbiIsIkNBTkNFTCIsIlBJQ0tFRCIsInNlbGVjdGVkXzEiLCJmaWxlSWQiLCJtaW1lVHlwZSIsIm1vZGlmaWVkVGltZSIsImljb25VcmwiLCJjYW5FeHBvcnQiLCJ1cGRhdGVQZXJtaXNzaW9ucyIsIkRvY3NVcGxvYWRWaWV3IiwiZW5hYmxlRmVhdHVyZSIsIkZlYXR1cmUiLCJNVUxUSVNFTEVDVF9FTkFCTEVEIiwiYnVpbGQiLCJzZXRWaXNpYmxlIiwiZ2FwaSIsImRpc2NvdmVyeURvY3MiLCJkcml2ZSIsInBlcm1pc3Npb25zIiwic2VuZE5vdGlmaWNhdGlvbkVtYWlsIiwiZG9tYWluIiwiZG93bmxvYWRGaWxlIiwibGltaXRTaXplIiwiZXhwb3J0IiwicmVzcCIsIkFycmF5QnVmZmVyIiwiQmxvYiIsImZpbGVuYW1lIiwiRmlsZSIsImxhc3RNb2RpZmllZCIsInhockRvd25sb2FkXzEiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwicmVzcG9uc2VUeXBlIiwic2VuZCIsImZpZWxkcyIsIk51bWJlciIsIkdvb2dsZVdlYkNsaWVudCIsInNjb3BlcyIsImxvYWRHYXBpIiwiQ0xJRU5UX0lEIiwiU0NPUEVTIiwicmVhdXRob3JpemUiLCJhdXRoMiIsImF1dGhvcml6ZSIsImNsaWVudF9pZCIsInJlc3BvbnNlX3R5cGUiLCJsb2dpbl9oaW50IiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwic2NvcGVzZXRfMSIsIlNldCIsImhhcyIsImFjY2Vzc190b2tlbiIsInNjcmlwdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJnYWFwaV9sb2FkZWQiLCJEcml2ZUJ1dHRvbiIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCIsIkljb25Ecml2ZSIsInhtbG5zIiwieG1sbnNYbGluayIsInZpZXdCb3giLCJ2ZXJ0aWNhbEFsaWduIiwibWFyZ2luUmlnaHQiLCJwb2ludHMiLCJwcm9jZXNzIiwiX2dsb2JhbHNfS0VEX2NmZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiRU5WSVJPTk1FTlQiLCJLRURfQVBJX1VSTCIsIkVEU19BUElfVVJMIiwiS0VEX1RPS0VOX1VSTCIsIktFRF9DTElFTlRfSUQiLCJLRURfQ0xJRU5UX1NFQ1JFVCIsIktFRF9TQ0hPT0xfTE9DQUxFIiwiS0VEX1JFU09VUkNFU19VUkwiLCJnZXRNZXJnZWRUb2tlblBhdGgiLCJpbXBlcnNvbmF0aW9uUHJvcHMiLCJhY2Nlc3NfY29udHJvbCIsInRva2VuUGF0aFdpdGhvdXRRdWVyeSIsInRva2VuUXVlcnlTdHJpbmciLCJ0b2tlblBhdGhRdWVyeSIsImdldFRva2VuSWQiLCJtZXJnZWRUb2tlblBhdGgiLCJ1c2VyRW1haWwiLCJjcmVhdGVUZXN0VG9rZW5Qcm92aWRlciIsImNsaWVudHdlYiIsImluaXRpYWxVc2VyRW1haWwiLCJLRURfVE9LRU5fUEFUSCIsInNldF9iZWFyZXJfcHJvdmlkZXJzX21lcmdlZFRva2VuUGF0aCIsInJlc3BvbnNlVGV4dCIsIm9rIiwic2F2ZVVzZXJJbmZvIiwic3RvcmVkU2Vzc2lvblVzZXIiLCJsb2FkVXNlckluZm8iLCJnb29nbGVNZXJnZWRQYXRoIiwiZ29vZ2xlVG9rZW5Qcm92aWRlciIsImNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIiLCJlZHNDbGllbnQiLCJlZHNjbGllbnQiLCJFZGl0U2Nob29sIiwiX2NvdXJzZXNfY291cnNlX2Jhbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiZmVlZGJhY2siLCJmZWVkYmFja1VybCIsIkVkaXRTY2hvb2xOb0Jhbm5lciIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIm9yaWdTY2hvb2wiLCJpc0d5bW5hc2l1bSIsImlzUHJpbWFyeVNjaG9vbCIsImFkZFNjaG9vbEJyYW5jaCIsImRlbGV0ZVNjaG9vbCIsInNjaG9vbEJyYW5jaCIsImJyXzEiLCJhcHByb3ZlZENoaWxkcmVuIiwiYWxlcnQiLCJlZGl0RXhpc3RpbmciLCJhdXRvRm9jdXMiLCJkaXNhYmxlZCIsImVkc1NjaG9vbE5hbWVHeW1uIiwiZWRzU2Nob29sTmFtZVByaW0iLCJjaGVja2VkIiwicmVhY3Rfcm91dGVyX2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fIiwiY29uZmlybSIsImdldFNvcnRlZFRhc2tzIiwiY29tcHV0ZVVwZGF0ZWRPcmRlciIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX29yZGVyZWRfcmVxdWlyZW1lbnRzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJjb250ZW50IiwidGFza09yZGVyIiwiY3VycmVudE9yZGVyIiwic291cmNlIiwicGxhY2VtZW50Iiwib3JkZXJlZElkcyIsInBsYWNlQmVmb3JlIiwiU2hvd1N1YmplY3QiLCJzdWJqZWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX3N1Yl9jb21wb25lbnRzX3NwaW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsImNvdXJzZVRlbXBsYXRlcyIsIl9jb3Vyc2VzX2NvdXJzZV9iYW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl9zaG93X3N1YmplY3RfaW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIlNob3dTdWJqZWN0SW5uZXIiLCJfc3ViX2NvbXBvbmVudHNfc3Bpbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicHVibGlzaGFibGUiLCJTb3J0YWJsZVRhc2tMaXN0IiwidGFza01ldGFzIiwicmVuZGVyRWRpdExpbmsiLCJyZW5kZXJMaW5rIiwib25Tb3J0IiwiZHJhZ1N0YXRlIiwic2V0RHJhZ1N0YXRlIiwidGFza0JlaW5nRHJhZ2dlZCIsInRhc2tCZWluZ0hvdmVyZWQiLCJvcmlnaW5DbGllbnRZIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwidGFza01ldGEiLCJpc1Rhc2tPd25lciIsImhhc01pZ3JhdGVkVGV4dHMiLCJtaWdyYXRlZFRleHRzIiwidGFza0hhc01pZ3JhdGVkVGV4dHMiLCJGcmFnbWVudCIsImRyYWdnYWJsZSIsIm9uRHJhZ1N0YXJ0IiwiZWZmZWN0QWxsb3dlZCIsImNsaWVudFkiLCJvbkRyYWdFbmQiLCJjb2xvciIsIkVkaXRSZXNvdXJjZSIsInZhbGlkX3VybF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQiLCJpc1VyaSIsIm9uU2F2ZSIsIm9uRGVsZXRlIiwiaXNWYWxpZFVybCIsIkNob29zZVVzZXIiLCJfZGF0YV91c2Vyc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiZm9udFN0eWxlIiwiQ29udGVudEVkaXRhYmxlRmllbGQiLCJteXNlbGYiLCJUYWdUeXBlIiwiZGF0YS1wbGFjZWhvbGRlciIsImJsdXIiLCJuYXZpZ2F0ZSIsInByb3BhZ2F0ZU9uQ2hhbmdlIiwibWV0YUtleSIsImN0cmxLZXkiLCJhbGxvd05hdmlnYXRpb24iLCJuYXZEaXIiLCJjYXJldCIsImVuZE9mZnNldCIsInZhbGlkYXRlVmFsdWUiLCJkaXJlY3Rpb24iLCJvbk5hdmlnYXRlIiwicHJvcGFnYXRlZE9uQ2hhbmdlIiwiRWRpdGFibGVTY2hvb2xMaXN0Iiwidmlld0NvdXJzZVVybCIsIkxpbmsiLCJjdXJzb3IiLCJzcGlubmVyIiwiY291cnNlX2Jhbm5lciIsInNjaG9vbHNfU2Nob29sc1dpdGhvdXRCYW5uZXIiLCJTY2hvb2xzV2l0aG91dEJhbm5lciIsIlRhc2tNaWdyYXRpb25Cb3giLCJ1cGRhdGVMaW5rIiwia3JzIiwia3JBIiwia3JDIiwia3JFIiwiYWJzIiwidGFibGVzVG9TaG93IiwiYm94SW5mbyIsIm9sZFRleHQiLCJIRUFSVEJFQVRfSU5URVJWQUwiLCJIRUFSVEJFQVRfVVJMIiwiX2dsb2JhbHNfS0VEX2NmZ19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiS0VEX0tFRVBfQUxJVkVfVVJMIiwibGFzdEFjdGl2aXR5Iiwia2VlcFNlc3Npb25BbGl2ZSIsInNldEludGVydmFsIiwib25UaW1lb3V0IiwianF1ZXJ5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCIsIm1vdXNlbW92ZSIsIm9uVXNlckFjdGl2ZSIsImtleXByZXNzIiwic2Nyb2xsIiwiZXJyXzEiLCJoZWFydGJlYXQiLCJwYXJzZVNrb2x2ZXJrZXRZZWFycyIsImluWWVhciIsImRpZmZTdWJqZWN0R2xvYmFsVGV4dHMiLCJkYlRleHRNYXAiLCJ4bWxUZXh0cyIsInJlbW92ZWRJZHMiLCJuZXdUZXh0cyIsIk1hcCIsImlkc1RvQWRkIiwibmV3VGV4dCIsIm9sZElkIiwiX2ZpY3RpdmVPbGRJZCIsInN0b3BXb3JkcyIsImdldExleGVtZXMiLCJyZW1vdmVUYWdzIiwibGV4ZW1lIiwiZ2V0SWRzVG9NaWdyYXRlIiwiZGJUZXh0cyIsInRleHRUeXBlIiwiaWRzVG9NaWdyYXRlIiwieG1sU2V0IiwiZGJTZXQiLCJkYlRleHQiLCJsZXhlbWVzIiwibWF0Y2hMZXZlbCIsInhtbFNwaW5zdGVycyIsInhtbFRleHQiLCJiZXN0TWF0Y2giLCJmaW5kQmVzdE1hdGNoIiwicGFpciIsIm15TWF0Y2hMZXZlbCIsIm5ld0lkIiwic3BpbnN0ZXIiLCJpc1R5cG9GaXgiLCJ4bWxMZXhlbWVzIiwiZ2V0TWF0Y2hMZXZlbCIsInBwIiwibGV4ZW1lczEiLCJsZXhlbWVzMiIsInBvaW50czEiLCJwb2ludHMyIiwid29yZCIsInJvdW5kIiwibWlncmF0ZVN1YmplY3QiLCJleGlzdGluZ1N1YmplY3QiLCJjb3Vyc2VTZXRzIiwic3ViamVjdFRvSW1wb3J0IiwibWlncmF0ZUNvdXJzZUluc3RhbmNlIiwiY291cnNlVG9JbXBvcnQiLCJzaG93Q2hhbmdlcyIsInNob3duQ2hhbmdlcyIsImFiaWxpdHlJZHNUb01pZ3JhdGUiLCJuZXdBYmlsaXR5VGV4dHMiLCJjY3NUb01pZ3JhdGUiLCJrcnNUb01pZ3JhdGUiLCJjaGFuZ2UiLCJjY3NUb0FkZCIsImNyZWF0ZWRJZHMiLCJuZXdDQ1RleHRzIiwia3JzVG9BZGQiLCJuZXdLUlRleHRzIiwiZGVzY3JpcHRpb24iLCJtaWdyYXRlVGFza3MiLCJmZXRjaFRhc2tzSW5DaHVua3NXaXRoRWRnZXNUbyIsIm9sZElkcyIsImlkc1RvTWlncmF0ZVBlckNvdXJzZSIsImltcG9ydERhdGUiLCJvbGRNVCIsImNoYW5nZURlc2NyaXB0aW9ucyIsIm1pZ3JhdGlvbkluZm8iLCJuZXdJZF8xIiwiX2YiLCJ0YXNrQ291cnNlQ29kZXMiLCJsaW5rZWRJZHMiLCJpZHNUb01pZ3JhdGVQZXJDb3Vyc2VfMSIsImlkc1RvTWlncmF0ZVBlckNvdXJzZV8xXzEiLCJfZyIsIm5ld0lkXzIiLCJfaCIsIl9qIiwibmV3SWRfMyIsIl9rIiwiX2wiLCJ0eHQiLCJ0YXNrc18xIiwidGFza3NfMV8xIiwib3JkZXJlZEFiaWxpdGllcyIsIm9yZGVyZWRBYmlsaXRpZXNfMSIsIm9yZGVyZWRBYmlsaXRpZXNfMV8xIiwiY291cnNlU2V0c18xIiwiY291cnNlU2V0c18xXzEiLCJ0ZW1wbGF0ZSIsImFiaWxpdGllc1RvQWRkIiwiX20iLCJ4bWxDb3Vyc2UiLCJ4bWwiLCJjbGVhciIsImluc3RhbmNlcyIsImluc3RhbmNlc18xIiwiaW5zdGFuY2VzXzFfMSIsImNvdXJzZVNldHNfMiIsImNvdXJzZVNldHNfMl8xIiwiX28iLCJfcCIsImRpZmZYbWxXaXRoRGF0YWJhc2UiLCJjdCIsImNvdXJzZV9idWlsZGVyX3V0aWxzIiwiZXhwYW5kZWRDb3Vyc2VUZW1wbGF0ZXMiLCJjb3Vyc2VUZW1wbGF0ZSIsInVwbG9hZGVkX3N1YmplY3RfVXBsb2FkZWRTdWJqZWN0IiwiVXBsb2FkZWRTdWJqZWN0IiwiY291cnNlc0VsZW1zIiwiY2VudHJhbENvbnRlbnRFbGVtcyIsImtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMiLCJzaG93RnVsbFRleHQiLCJpc1dvcmtpbmciLCJpc0ltcG9ydGluZyIsImFkZENsYXNzZXNGb3JDaGVycnlQaWNrZWRFbGVtZW50cyIsImRpZmZXaXRoRXhpc3RpbmciLCJleHRlcm5hbF9qUXVlcnlfZGVmYXVsdCIsInB1cnBvc2VFbGVtIiwiYWRkQ2xhc3MiLCJjZW50cmFsQ29udGVudHMiLCJjaGVycnlQaWNrRGF0YSIsInNrb2xTdWJqZWN0IiwicHJldiIsImNyZWF0ZVRpbWUiLCJleGlzdGluZ1N1YmplY3RzIiwibmV3U3ViamVjdF8xIiwic3ViamVjdEFiaWxpdGllcyIsIm5ld0FiaWxpdHkiLCJuZXdDb3Vyc2UiLCJzdWJqZWN0Q29kZSIsInN1YmplY3RJZCIsImNjR3JvdXAiLCJuZXdDZW50cmFsQ29udGVudCIsImNyIiwibmV3S25vd2xlZGdlUmVxdWlyZW1lbnQiLCJzdWJqZWN0QWJpbGl0aWVzXzEiLCJzdWJqZWN0QWJpbGl0aWVzXzFfMSIsImNhbmNlbCIsIm9uQ2FuY2VsIiwiaW1wb3J0IiwiYWxsTXV0YXRpb25zIiwibXV0Iiwib25JbXBvcnRTdWNjZXNzIiwiZml4TCIsInBhZGRpbmciLCJjb2xTcGFuIiwicHVycG9zZSIsImtub3dubGVkZ2VSZXF1aXJlbWVudHMiLCJzdWJqZWN0c19pbm5lcl9TdWJqZWN0c0lubmVyIiwiU3ViamVjdHNJbm5lciIsImlzTGlzdGluZ1N1YmplY3RzIiwiZ3ltbmFzaXVtU3ViamVjdHMiLCJwcmltYXJ5U2Nob29sU3ViamVjdHMiLCJ1cGxvYWRlZFN1YmplY3QiLCJzdWJqZWN0cyIsImhhbmRsZUZpbGVTZWxlY3QiLCJwYXJzZVhNTCIsInR5cGVPZlNjaG9vbGluZyIsIm1vZGVsIiwic3ViamVjdHNfaW5uZXJfdGVtcGxhdGVPYmplY3RfMSIsInN0YWRpdW0iLCJzdWJqZWN0c19pbm5lcl90ZW1wbGF0ZU9iamVjdF8yIiwiY2VudHJhbENvbnRlbnRzQnlTdGFkaXVtXzEiLCJrbm93bGVkZ2VSZXF1aXJlbWVudHNCeVN0YWRpdW1fMSIsInN1YmplY3ROYW1lXzEiLCJzdWJqZWN0Q29kZV8xIiwic3ViamVjdFB1cnBvc2UiLCJjb3Vyc2VzQnlTdGFkaXVtIiwic3ViamVjdHNfaW5uZXJfdGVtcGxhdGVPYmplY3RfMyIsImxpbmtQcmVmaXgiLCIuL2VuLVNHIiwiLi9lbi1TRy5qcyIsIi4vZW4tYXUiLCIuL2VuLWF1LmpzIiwiLi9lbi1jYSIsIi4vZW4tY2EuanMiLCIuL2VuLWdiIiwiLi9lbi1nYi5qcyIsIi4vZW4taWUiLCIuL2VuLWllLmpzIiwiLi9lbi1pbCIsIi4vZW4taWwuanMiLCIuL2VuLW56IiwiLi9lbi1uei5qcyIsIi4vc3YiLCIuL3N2LmpzIiwid2VicGFja0NvbnRleHQiLCJ3ZWJwYWNrQ29udGV4dFJlc29sdmUiLCJfZ2xvYmFsc19LRURfZW52X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJfdXRpbHNfcXVlcnlfc3RyaW5nX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJOZXdTY2hvb2wiLCJlZGl0X3NjaG9vbCIsInN1YmplY3RzX1N1YmplY3RzIiwiU3ViamVjdHMiLCJzdWJqZWN0c190ZW1wbGF0ZU9iamVjdF8xIiwic3ViamVjdHNfaW5uZXIiLCJlZGl0YWJsZV9yZXNvdXJjZV9saXN0X0VkaXRhYmxlUmVzb3VyY2VMaXN0IiwiRWRpdGFibGVSZXNvdXJjZUxpc3QiLCJvblVwZGF0ZSIsInNob3dHb29nbGVQaWNrZXIiLCJzcmNfZmVhdHVyZXMiLCJvcGVuRGlhbG9nIiwiZWRpdF9yZXNvdXJjZSIsImVkaXRlZFJlc291cmNlIiwidXBkYXRlZFJlc291cmNlIiwiJHNwbGljZSIsImNsb3NlRGlhbG9nIiwibmV3UmVzb3VyY2UiLCIkcHVzaCIsImJ1dHRvbnMiLCJnb29nbGVfcGlja2VyIiwiQ2FjaGVkUmVzcG9uc2UiLCJxdWVyeWVyIiwicmVzZXQiLCJTZWFyY2hSZXN1bHRzIiwic2VhcmNoTWFya2VkSWRzIiwic2VhcmNoUmVzdWx0IiwiZWRpdFRhc2siLCJ3cml0ZUFjY2VzcyIsInRhc2tDdXN0b21pemF0aW9uIiwicHJldmlld1Rhc2tDb250ZW50IiwiZm91bmRUYXNrIiwidG9nZ2xlQ2hvb3NlVGFzayIsInVwZGF0ZVNlYXJjaE1hcmtlZElkcyIsImV4dGVybmFsX1JlYWN0RE9NXyIsInNldFN0YXRlUHJvbWlzZWQiLCJCYXNpY0VkaXRhYmxlVGFza0ZpZWxkcyIsIm5ld1Rhc2siLCJmaWxldXJsIiwidmlld3VybCIsImxhc3RJbmRleE9mIiwidGFza19taWdyYXRpb25fYm94IiwibGlua09yVW5saW5rIiwiZ2V0VGFza1Byb3AiLCJ1cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uIiwiZXMiLCJuZXh0TW9udGhCdXR0b25MYWJlbCIsInByZXZpb3VzTW9udGhCdXR0b25MYWJlbCIsInNob3dXZWVrTnVtYmVycyIsInNlbGVjdGVkIiwidG9EYXRlIiwiZGF0ZUZvcm1hdCIsInBvcHBlclBsYWNlbWVudCIsInNlbmRUb1Vya3VuZCIsIlRhc2tTdGF0dXNGcmFnbWVudCIsIlNhdmVPckNhbmNlbEJ1dHRvbnMiLCJjb3B5VGFzayIsIlRhc2tDb250ZW50RnJhZ21lbnQiLCJ3eXNpd3lnIiwiYWN0aW9uc19zdiIsIlByZXZpZXdhYmxlVGFza0ZpZWxkcyIsImxlYXJuaW5nR29hbCIsInJlc291cmNlVXBkYXRlcyIsImVkaXRfdGFza19FZGl0VGFzayIsIkVkaXRUYXNrIiwiZWRpdF90YXNrX3RlbXBsYXRlT2JqZWN0XzEiLCJzZWFyY2hNb2RlIiwiZnV0dXJlQWJpbGl0aWVzT3BlbiIsImlzU2VhcmNoaW5nIiwic2VhcmNoUmVzcG9uc2UiLCJ1cGRhdGVTZWFyY2hSZXN1bHQiLCJzZXRTdGF0ZVByb21pc2UiLCJhbGxUYXNrc0ZvclN1YmplY3QiLCJhYmlsaXR5Iiwia25vd2xlZGdlUmVxdWlyZW1lbnQiLCJjb2xsZWN0aW9uUHJvcCIsInVwZGF0ZWRDb2xsZWN0aW9uIiwiY3VycmVudFBvcyIsInVwZGF0ZWRUYXNrIiwidmFsaWRfdXJsX2RlZmF1bHQiLCJvblJlcGxhY2UiLCJvblNhdmVDdXN0b21pemF0aW9uIiwidGFza0NvcHkiLCJ0ZW1wbGF0ZU9iamVjdF84IiwidGFza1Byb3AiLCJjdXN0b21pemF0aW9uIiwidXBkYXRlcyIsIm5ld0N1c3RvbWl6YXRpb24iLCJyZWFjdF9hZGRvbnNfdXBkYXRlX2RlZmF1bHQiLCJpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrIiwia25vd2xlZGdlX21hdHJpeCIsInNlbGVjdF9yZWxhdGVkX2RvY3MiLCJrZWRfbW9kZWxzIiwiZWRpdGFibGVfdGFza19saXN0X0VkaXRhYmxlVGFza0xpc3QiLCJFZGl0YWJsZVRhc2tMaXN0Iiwib3BlblRhc2tEaWFsb2ciLCJ0YXNrQ3VzdG9taXphdGlvbnMiLCJvblRhc2tVcGRhdGVkIiwib25UYXNrQWRkZWQiLCJvblRhc2tDdXN0b21pemF0aW9uVXBkYXRlZCIsIm9uVGFza0RlbGV0ZWQiLCJvblRhc2tSZXBsYWNlZCIsIm9yZGVyZWRfcmVxdWlyZW1lbnRzIiwic29ydGFibGVfdGFza19saXN0Iiwib25UYXNrc1Jlb3JkZXJlZCIsImNob29zZW5UYXNrIiwiY291cnNlX21vZHVsZV9Db3Vyc2VNb2R1bGVDb21wb25lbnQiLCJDb3Vyc2VNb2R1bGVDb21wb25lbnQiLCJlZGl0TWFuZGF0b3J5Q29udGVudCIsImdldE1vZHVsZUluZGV4IiwiZ2V0TW9kdWxlT3JkZXJJbmRleCIsImdldE9yZGVyZWRNb2R1bGVzIiwidXBkYXRlTW9kdWxlIiwibW9kdWxlVXBkYXRlcyIsInVwZGF0ZWRNb2R1bGUiLCJtb2R1bGVJbmRleCIsImNvdXJzZVVwZGF0ZXMiLCJjdXN0b21pemF0aW9ucyIsImNvdXJzZV9tb2R1bGVfdGVtcGxhdGVPYmplY3RfMSIsInRhc2tJbmRleCIsIm9uVGFza0N1c3RvbWl6ZWQiLCJ0aWQiLCIkYXBwbHkiLCJpZHhUYXNrIiwiY291cnNlX21vZHVsZV90ZW1wbGF0ZU9iamVjdF8yIiwibmV3VGFza0lkcyIsInRhc2tfb3JkZXIiLCJtb2R1bGVPcmRlcmVkSW5kZXgiLCJzdGFydFdlZWtPcHRpb25zIiwiZW5kV2Vla09wdGlvbnMiLCJvcGVuX2Nsb3NlX2JveCIsImNiQ29sbGFwc2VCb3hlcyIsIm9uUmVvcmRlciIsInJlbW92ZV9pdGVtIiwiY291cnNlX21vZHVsZV90ZW1wbGF0ZU9iamVjdF8zIiwiY29udGVudF9lZGl0YWJsZV9maWVsZCIsIm5ld05hbWUiLCJzdGFydFdlZWsiLCJlbmRXZWVrIiwibWFuZGF0b3J5Q29udGVudCIsInJlc291cmNlc1VwZGF0ZXMiLCJjb3Vyc2VfbW9kdWxlX3RlbXBsYXRlT2JqZWN0XzQiLCJpbmFjdGl2ZSIsImNvdXJzZV9tb2R1bGVfbGlzdF9Db3Vyc2VNb2R1bGVMaXN0IiwiQ291cnNlTW9kdWxlTGlzdCIsIl9tb2R1bGVSZWZzIiwiYWRkTW9kdWxlIiwibW9kdWxlT3JkZXIiLCJyZW9yZGVyIiwib3JkZXJlZE1vZHVsZXMiLCJuZXdNb2R1bGVJbmRleCIsImN1cnJlbnRNb2R1bGVBdFBvc2l0aW9uIiwib3JpZ1Njcm9sbFBvcyIsImRvY3VtZW50RWxlbWVudCIsImVsZW1Nb2R1bGUiLCJzY3JvbGxUbyIsInNjcm9sbEhlaWdodCIsInNjcm9sbEludG9WaWV3IiwiYmVoYXZpb3IiLCJibG9jayIsIl9lbGVtIiwibXlTY2hvb2xDb3Vyc2VzUmVwbyIsIlNjaG9vbENvdXJzZXNSZXBvIiwiZ2V0U2Nob29sTmFtZSIsInNjaG9vbE5hbWUiLCJfc2Nob29sSWQiLCJzY2hvb2xfY291cnNlc190ZW1wbGF0ZU9iamVjdF8xIiwiZ2V0U2Nob29sSWQiLCJzY2hvb2xfY291cnNlc19TY2hvb2xDb3Vyc2VzIiwiU2Nob29sQ291cnNlcyIsInNjaG9vbENvdXJzZXMiLCJvblNjaG9vbENvdXJzZXNVcGRhdGVkIiwiY29tcGFyZU5hbWUiLCJjb21wYXJlQ3JlYXRlZERhdGUiLCJvdXRwdXRDb3Vyc2VzIiwiaGVhZGVyIiwiYWN0aXZlIiwibXlDb3Vyc2VzIiwib3RoZXJzQ291cnNlcyIsIm1lXzEiLCJhY3RpdmF0ZWRCeSIsImNyZWF0ZVN0dWRlbnRzIiwidHVpdGlvbkdyb3VwTmFtZSIsInN0dWRlbnRGaXJzdE5hbWUiLCJzdHVkZW50TGFzdE5hbWUiLCJzdHVkZW50RW1haWxBZGRyZXNzIiwibW9ja1RlYWNoZXJzIiwidGVhY2hlckZpcnN0TmFtZSIsInRlYWNoZXJMYXN0TmFtZSIsInRlYWNoZXJFbWFpbEFkZHJlc3MiLCJtb2NrVHVpdGlvbkdyb3VwcyIsIkRKVVPDhEwwMSIsIktFTUtFTTAxIiwiQklPQklPMDEiLCJTVkVTVkUwMyIsIm1vY2tUdWl0aW9uU3R1ZGVudHMiLCJJRFIxX0dyMSAoMTgwODE2LTE5MDYxNCkiLCJJRFIxX0dyMiAoMTgwODE2LTE5MDYxNCkiLCJJRFIxX0dyMyAoMTgwODE2LTE5MDYxNCkiLCJLRU0xX0dyMSAoMTgwODE2LTE5MDYxNCkiLCJLRU0xX0dyMiAoMTgwODE2LTE5MDYxNCkiLCJCSU8xX0dyMSAoMTgwODE2LTE5MDYxNCkiLCJCSU8xX0dyMiAoMTgwODE2LTE5MDYxNCkiLCJTVkUzX0dyMSAoMTgwODE2LTE5MDYxNCkiLCJTVkUzX0dyMiAoMTgwODE2LTE5MDYxNCkiLCJTVkUzX0dyMyAoMTgwODE2LTE5MDYxNCkiLCJTVkUzX0dyNCAoMTgwODE2LTE5MDYxNCkiLCJTVkUzX0dyNSAoMTgwODE2LTE5MDYxNCkiLCJTVkUzX0dyNiAoMTgwODE2LTE5MDYxNCkiLCJTVkUzX0dyNyAoMTgwODE2LTE5MDYxNCkiLCJTZWxlY3RUZWFjaGVyIiwic2VsZWN0ZWRUZWFjaGVycyIsIm9uU2VsZWN0IiwiZW1wdHlPck1vY2siLCJ0ZWFjaGVyTGlzdCIsInRlYWNoZXJTZXQiLCJleHRlcm5hbF9SZWFjdF9kZWZhdWx0IiwicmVhY3Rfc2VsZWN0X2VzbSIsImlzTXVsdGkiLCJkZWZhdWx0TWVudUlzT3BlbiIsInNlbGVjdF90ZWFjaGVyX3RlbXBsYXRlT2JqZWN0XzEiLCJub09wdGlvbnNNZXNzYWdlIiwic2VsZWN0X3RlYWNoZXJfdGVtcGxhdGVPYmplY3RfMiIsIkZpYmVyQ29udGV4dFJlYWN0IiwiY3JlYXRlQ29udGV4dCIsIl9jdXJyZW50VmFsdWUiLCJvYnNlcnZlX09ic2VydmUiLCJPYnNlcnZlIiwib3V0ZXJTdWJzY3JpcHRpb24iLCJjb3VudGVyIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJlcnJvckZhbGxiYWNrIiwib2JzZXJ2ZV90ZW1wbGF0ZU9iamVjdF8xIiwiZmFsbGJhY2siLCJQcm92aWRlciIsIkVkaXRhYmxlVGVhY2hlckxpc3QiLCJ0ZWFjaGVycyIsIm5hbWVFbGVtIiwic2VsZWN0aW5nVGVhY2hlciIsInNldFNlbGVjdGluZ1RlYWNoZXIiLCJkaXNwbGF5VGVhY2hlclJpZ2h0cyIsInRlYWNoZXJSaWdodHMiLCJlZGl0YWJsZV90ZWFjaGVyX2xpc3RfdGVtcGxhdGVPYmplY3RfMSIsImVkaXRhYmxlX3RlYWNoZXJfbGlzdF90ZW1wbGF0ZU9iamVjdF8yIiwiZWRpdGFibGVfdGVhY2hlcl9saXN0X3RlbXBsYXRlT2JqZWN0XzMiLCJ0ZWFjaGVyIiwiZWRpdGVkVGVhY2hlciIsImVkaXRhYmxlX3RlYWNoZXJfbGlzdF90ZW1wbGF0ZU9iamVjdF80IiwiZWRpdGFibGVfdGVhY2hlcl9saXN0X3RlbXBsYXRlT2JqZWN0XzUiLCJlZGl0YWJsZV90ZWFjaGVyX2xpc3RfdGVtcGxhdGVPYmplY3RfNiIsImVkaXRhYmxlX3RlYWNoZXJfbGlzdF90ZW1wbGF0ZU9iamVjdF83IiwibmV3VGVhY2hlciIsImVkaXRhYmxlX3RlYWNoZXJfbGlzdF90ZW1wbGF0ZU9iamVjdF84Iiwid2VpZ2h0ZWRfaXRlbXNfdGFibGVfV2VpZ2h0ZWRJdGVtc1RhYmxlIiwiV2VpZ2h0ZWRJdGVtc1RhYmxlIiwiaXNPcGVuIiwidGFza3NQZXJJZCIsImJ1c2luZXNzX2xvZ2ljIiwiZnV0dXJlQWJpbGl0eVRleHQiLCJlZGl0X3dvcmtmbG93X2xpbmtfRWRpdFdvcmtmbG93TGluayIsIkVkaXRXb3JrZmxvd0xpbmsiLCJlZGl0X3dvcmtmbG93X2xpbmtfdGVtcGxhdGVPYmplY3RfMSIsImVkaXRhYmxlX3dvcmtmbG93X2xpbmtfRWRpdGFibGVXb3JrRmxvd0xpbmsiLCJFZGl0YWJsZVdvcmtGbG93TGluayIsIm5ld1VybCIsImdldEN1cnJlbnRVc2VyIiwiU2VsZWN0U3R1ZHlHcm91cHMiLCJzZWxlY3RlZFN0dWR5R3JvdXBzIiwic2ciLCJzZWxlY3Rfc3R1ZHlfZ3JvdXBzX3RlbXBsYXRlT2JqZWN0XzEiLCJzZWxlY3Rfc3R1ZHlfZ3JvdXBzX3RlbXBsYXRlT2JqZWN0XzIiLCJpbm5lcl9lZGl0X2NvdXJzZV9Jbm5lckVkaXRDb3Vyc2UiLCJJbm5lckVkaXRDb3Vyc2UiLCJjaGFuZ2VJbWFnZVVybCIsInNldEltYWdlVXJsIiwiaW1hZ2VVcmwiLCJ1bmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMiLCJzYW5pdHlDaGVja1dhcm5pbmdzIiwiY291cnNlSW1hZ2UiLCJjb3Vyc2VJbWFnZUlzRGF0YVVybCIsImNvdXJzZUlzVXBsb2FkZWQiLCJzb2Z0QWNjZXNzTGlzdCIsImNhbkRlbGV0ZSIsImRpc3BsYXlTdHVkeUdyb3VwcyIsInN0dWR5R3JvdXBzIiwicnVuVXBUZXh0IiwibmV3SHRtbCIsIndvcmtGbG93TGluayIsImdvb2dsZUNyZWF0ZUNsYXNzcm9vbXMiLCJnb29nbGVDbGFzc1Jvb21VUkwiLCJnb29nbGVDbGFzc1Jvb21Db2RlIiwidGVhY2hlcnNVcGRhdGUiLCJpbm5lcl9lZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8xIiwiaW5uZXJfZWRpdF9jb3Vyc2VfdGVtcGxhdGVPYmplY3RfMiIsImFjdGl2YXRlZERhdGUiLCJpbmFjdGl2YXRlZEJ5IiwiaW5hY3RpdmF0ZWREYXRlIiwid2FybmluZyIsImNvbmZpcm1TYXZlQW5kU3luYyIsImluYWN0aXZhdGVBbmRTYXZlIiwiYWN0aXZhdGVBbmRTYXZlIiwiaW5uZXJfZWRpdF9jb3Vyc2VfdGVtcGxhdGVPYmplY3RfMyIsImRlbGV0ZUNvdXJzZSIsImhpc3RvcnkiLCJnbyIsInN5bmNXaXRoQ2xhc3Nyb29tQW5kU2F2ZSIsInN5bmNJblByb2dyZXNzIiwiaW5TeW5jV2l0aENsYXNzcm9vbSIsImdvb2dsZV9jbGFzc3Jvb21fc3luY19DbGFzc3Jvb21TeW5jIiwiQ2xhc3Nyb29tU3luYyIsImNhbGxTeW5jIiwiZnVuYyIsImZ1bmN0aW9uIiwicGFyYW1ldGVycyIsImRldk1vZGUiLCJpbml0U3luYyIsImZ1bGxTeW5jTmVlZGVkIiwic3R1ZHlHcm91cFN0dWRlbnRzIiwiZGlmZkNvdXJzZSIsInN1YnNldCIsImNyZWF0ZUNsYXNzcm9vbSIsInVwZGF0ZUNsYXNzcm9vbSIsImFyY2hpdmUiLCJzdWJzZXRBc3NpZ25tZW50cyIsImFzc2lnbm1lbnQiLCJkZWFkbGluZSIsImNhdGNoZXIiLCJDT05GSVJNX05BVklHQVRFX01FU1NBR0UiLCJlZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8xIiwiREVGQVVMVF9TVEFURSIsIm9yaWdUZW1wbGF0ZSIsImRpYWxvZ0NvbnRhaW5lcnMiLCJoYXNVbnNhdmVkRGF0YSIsInZpZXciLCJjbGFzc3Jvb21TeW5jSW5Qcm9ncmVzcyIsImVkaXRfY291cnNlX0VkaXRDb3Vyc2UiLCJFZGl0Q291cnNlIiwicmVmRGlhbG9nIiwiY29udGVudFlQb3MiLCJiZWZvcmVVbmxvYWQiLCJvbkNsaWNrUHJldmVudFVubG9hZCIsImRpYWxvZ3MiLCJfc2V0U3RhdGUiLCJzZXROb25TYXZlYWJsZURhdGFTdGF0ZSIsInVzZWRUYXNrSWRzXzEiLCJmaWx0ZXJlZENvdXJzZVRhc2tzIiwibW9kaWZpZWRDb3Vyc2UiLCJhbGxDb3Vyc2VzIiwiaWR4T3VyQ291cnNlIiwidGVtcGxhdGVJZCIsInByZXZQcm9wcyIsInByZXZTdGF0ZSIsImxvYWRGcm9tVGVtcGxhdGUiLCJwYXJlbnRJZCIsImxvYWRFeGlzdGluZ0NvdXJzZSIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzIiLCJmZWF0dXJlc19mZWF0dXJlcyIsIl9jaGVja0NsYXNzcm9vbUNoYW5nZXMiLCJjb3Vyc2VTY2hvb2wiLCJjaGlsZHJlbl8xIiwiY2hpbGRyZW5fMV8xIiwic3luY1dpdGhDbGFzc3Jvb20iLCJlZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8zIiwiZWRpdF9jb3Vyc2VfdGVtcGxhdGVPYmplY3RfNCIsImVuYWJsZVRlYWNoZXJSaWdodHMiLCJvcmlnQWNjZXNzTGlzdCIsIm1vZGlmaWVkQWNjZXNzTGlzdCIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzUiLCJlcnJvck1lc3NhZ2UiLCJlZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF82IiwiZWRpdF9jb3Vyc2VfdGVtcGxhdGVPYmplY3RfNyIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzgiLCJ0ZW1wbGF0ZU9iamVjdF85IiwidGVtcGxhdGVPYmplY3RfMTAiLCJjbGFzc3Jvb21TeW5jIiwidGVtcGxhdGVPYmplY3RfMTEiLCJ0ZW1wbGF0ZU9iamVjdF8xMiIsInNpbGVudFNhdmUiLCJkb2VzQWxsVGFza3NDb3ZlckFsbFJlcXVpcmVtZW50cyIsInRlbXBsYXRlT2JqZWN0XzEzIiwib3JpZyIsIm5ld0NvdXJzZVRhc2tzIiwib3JpZ1Rhc2siLCJ0ZW1wbGF0ZU9iamVjdF8xNCIsInRlbXBsYXRlT2JqZWN0XzE1IiwiYXJyMXNldCIsImFycjJzZXQiLCJoYXNUZWFjaGVyQ2hhbmdlcyIsImhhc1Rhc2tzQ2hhbmdlcyIsInkiLCJlMSIsImUyIiwiaGFzU3R1ZHlHcm91cHNDaGFuZ2VzIiwicHJldlN0YXR1cyIsImRpYWxvZ0NvbnRhaW5lciIsImRpYWxvZyIsImluZGV4Iiwic2F2ZURpYWxvZyIsInRhcmdldEVsZW0iLCJyZXR1cm5WYWx1ZSIsImdldEF0dHJpYnV0ZSIsInN0dWRlbnRQYWdlIiwiY3JlYXRlX25ld19DcmVhdGVOZXdDb3Vyc2UiLCJDcmVhdGVOZXdDb3Vyc2UiLCJjb3Vyc2VPcHRpb25zIiwic2VsZWN0ZWRUZW1wbGF0ZUlkIiwic2VsZWN0ZWRDb3Vyc2VJZCIsIm9uU2VsZWN0Q291cnNlIiwiZGVyaXZlZENvdXJzZXMiLCJkZXNjcmlwdGlvbk9yQXV0aG9yIiwia2VkU3RhbmRhcmRPcHRpb25zIiwidGVhY2hlck1hZGUiLCJjcmVhdGVfbmV3X3RlbXBsYXRlT2JqZWN0XzEiLCJrZWVwX3Nlc3Npb25fYWxpdmUiLCJjb3Vyc2VfYnVpbGRlcl9Db3Vyc2VCdWlsZGVyIiwiQ291cnNlQnVpbGRlciIsImlzQXV0aG9yaXplZCIsIkhhc2hSb3V0ZXIiLCJSb3V0ZSIsImV4YWN0IiwiY291cnNlX2J1aWxkZXJfc2Nob29scyIsImNvdXJzZV9idWlsZGVyX3RlbXBsYXRlT2JqZWN0XzEiLCJzaG93X3N1YmplY3QiLCJlcnJvcl9zdWNjZXNzX2ZlZWRiYWNrIiwiX0FwcCIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18iLCJfY29tcG9uZW50c191dGlsaXR5X2NvbXBvbmVudHNfTGFuZ3VhZ2VDb250ZXh0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18iLCJfY29tcG9uZW50c19jb3Vyc2VfYnVpbGRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fIiwiX3V0aWxzX2Nob29zZV91c2VyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJBcHAiLCJfY29tcG9uZW50c191dGlsaXR5X2NvbXBvbmVudHNfU2V0dXBMYW5ndWFnZUludGxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzlfXyIsInJlYWN0X2ludGxfX1dFQlBB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QWEsQ0FDWjdvQixjQUFjLG9CQUNkNUYsWUFBWSwyQkFFaEJ1dUIsRUFBQSxjQUFDRyxFQUFBLEVBQVUsT0FFakJMLEVBaEJBLENBQW1CRSxFQUFBLFdBa0JiSSxFQUFNcm9FLE9BQUFzb0UsRUFBQSxFQUFBdG9FLENBQVVBLE9BQUF1b0UsRUFBQSxFQUFBdm9FLENBQVcrbkUsSUFDbEIxL0QsRUFBQSIsImZpbGUiOiJ0ZXN0cGFnZWNvdXJzZWJ1aWxkZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG4gXHRcdHZhciBleGVjdXRlTW9kdWxlcyA9IGRhdGFbMl07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gYWRkIGVudHJ5IG1vZHVsZXMgZnJvbSBsb2FkZWQgY2h1bmsgdG8gZGVmZXJyZWQgbGlzdFxuIFx0XHRkZWZlcnJlZE1vZHVsZXMucHVzaC5hcHBseShkZWZlcnJlZE1vZHVsZXMsIGV4ZWN1dGVNb2R1bGVzIHx8IFtdKTtcblxuIFx0XHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIGFsbCBjaHVua3MgcmVhZHlcbiBcdFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4gXHR9O1xuIFx0ZnVuY3Rpb24gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKSB7XG4gXHRcdHZhciByZXN1bHQ7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgZGVmZXJyZWRNb2R1bGUgPSBkZWZlcnJlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG4gXHRcdFx0Zm9yKHZhciBqID0gMTsgaiA8IGRlZmVycmVkTW9kdWxlLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgZGVwSWQgPSBkZWZlcnJlZE1vZHVsZVtqXTtcbiBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tkZXBJZF0gIT09IDApIGZ1bGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxmaWxsZWQpIHtcbiBcdFx0XHRcdGRlZmVycmVkTW9kdWxlcy5zcGxpY2UoaS0tLCAxKTtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZGVmZXJyZWRNb2R1bGVbMF0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0NzogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucF9uYW1lX1wiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucF9uYW1lX1wiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMjIzLDBdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCJcbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplRmlyc3QgKHN0cikge1xuICAgIGZvciAobGV0IGk9MCwgbD1zdHIubGVuZ3RoOyBpPGw7ICsraSkge1xuICAgICAgICBpZiAoc3RyLmNoYXJDb2RlQXQoaSkgPCAweDIwMDApIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIGkpICsgc3RyW2ldLnRvTG9jYWxlVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKGkgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iaiwgZXh0ZW5zaW9uKSB7XG4gICAgaWYgKHR5cGVvZiBleHRlbnNpb24gIT09ICdvYmplY3QnKSByZXR1cm4gb2JqO1xuICAgIE9iamVjdC5rZXlzKGV4dGVuc2lvbikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBvYmpba2V5XSA9IGV4dGVuc2lvbltrZXldO1xuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZTxULEU+IChvYmogOiBULCBleHRlbnNpb24/OiBFKSB7XG4gICAgbGV0IGNsb25lID0ge307XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbG9uZSwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSk7XG4gICAgfSk7XG4gICAgaWYgKGV4dGVuc2lvbikgZXh0ZW5kKGNsb25lLCBleHRlbnNpb24pO1xuICAgIHJldHVybiBjbG9uZSBhcyAoVCAmIEUpO1xufVxuXG5jb25zdCBjb25jYXQgPSBbXS5jb25jYXQ7XG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbjxUPiAoYSA6IChUIHwgVFtdKVtdKSB7XG4gICAgcmV0dXJuIGNvbmNhdC5hcHBseShbXSwgYSkgYXMgVFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVByb3A8VD4ocHJvcDprZXlvZiBUKSB7XG4gICAgcmV0dXJuIChhOiBULGI6IFQpID0+IHtcbiAgICAgICAgY29uc3QgYVByb3AgPSBhW3Byb3BdLCBiUHJvcCA9IGJbcHJvcF07XG4gICAgICAgIHJldHVybiBhUHJvcCA+IGJQcm9wID8gMSA6IGFQcm9wIDwgYlByb3AgPyAtMSA6IDA7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVByb3BzKFxuICAgIHByb3BzOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBsb2NhbGVzPzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgb3B0aW9ucz86IEludGwuQ29sbGF0b3JPcHRpb25zKTogKGE6IGFueSwgYjogYW55KSA9PiBudW1iZXJcbntcbiAgICBwcm9wcyA9IEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdO1xuXG4gICAgY29uc3QgbG9jYWxlQ29tcGFyZSA9IChhLGIpID0+XG4gICAgICAgIHR5cGVvZiBhID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICBhLmxvY2FsZUNvbXBhcmUoYiwgbG9jYWxlcywgb3B0aW9ucykgOlxuICAgICAgICAgICAgYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG5cbiAgICBmdW5jdGlvbiBjbXBQYXJ0IChhLGIsZmlyc3RQYXJ0OiBzdHJpbmcscmVzdDogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgZmlyc3RBID0gYVtmaXJzdFBhcnRdO1xuICAgICAgICBjb25zdCBmaXJzdEIgPSBiW2ZpcnN0UGFydF07XG4gICAgICAgIGlmIChmaXJzdEEgPT09IGZpcnN0QikgcmV0dXJuIDA7XG4gICAgICAgIGlmIChmaXJzdEEgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgICAgICBpZiAoZmlyc3RCID09IG51bGwpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gcmVzdC5sZW5ndGggPT09IDAgP1xuICAgICAgICAgICAgbG9jYWxlQ29tcGFyZShmaXJzdEEsIGZpcnN0QikgOlxuICAgICAgICAgICAgY21wUGFydChmaXJzdEEsIGZpcnN0QiwgcmVzdFswXSwgcmVzdC5zbGljZSgxKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzXG4gICAgICAgIC5tYXAocHJvcCA9PiBwcm9wLnNwbGl0KCcuJykpXG4gICAgICAgIC5tYXAoKFtmaXJzdFBhcnQsIC4uLnJlc3RdKSA9PiAoYSxiKSA9PiBjbXBQYXJ0KGEsYiwgZmlyc3RQYXJ0LCByZXN0KSlcbiAgICAgICAgLnJlZHVjZSgoY21wMSwgY21wMikgPT5cbiAgICAgICAgICAgIChhLGIpID0+IGNtcDEoYSxiKSB8fCBjbXAyKGEsYikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTCh0ZXh0LCAuLi5hcmdzKSB7XG4gICAgbGV0IGZpcnN0ID0gdGV4dFswXTtcbiAgICByZXR1cm4gYnVpbGRNZXNzYWdlKHRleHQsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBidWlsZE1lc3NhZ2UgKHRleHQsIGFyZ3MpIHtcbiAgICBsZXQgcnYgPSB0ZXh0WzBdO1xuICAgIGZvciAobGV0IGk9MSwgbD10ZXh0Lmxlbmd0aDsgaTxsOyArK2kpIHtcbiAgICAgICAgcnYgKz0gYXJnc1tpLTFdICsgdGV4dFtpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJ2O1xufVxuXG5leHBvcnQgY2xhc3MgVEM8VD4ge1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBUKSB7XG4gICAgICAgIGV4dGVuZCh0aGlzLCB0ZW1wbGF0ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRpbWVSZXZpdmVyIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGE7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYSA9IC9cXC9EYXRlXFwoKFxcZCopXFwpXFwvLy5leGVjKHZhbHVlKTtcbiAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgrYVsxXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4vL2xldCBpbmZvU2VyaWFsID0gMTtcbmV4cG9ydCBmdW5jdGlvbiBzaG93SW5mbyAobXNnKSB7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpbmZvJywgeyAnZGV0YWlsJzogbXNnIH0pO1xuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dFcnJvciAoZXJyTXNnOiBzdHJpbmcgfCBFcnJvcikge1xuICAgIGNvbnN0IG1zZyA9IHR5cGVvZiBlcnJNc2cgPT09ICdzdHJpbmcnID8gZXJyTXNnIDogZXJyTXNnLm1lc3NhZ2U7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdjdXN0b21lcnJvcicsIHsgJ2RldGFpbCc6IG1zZyB9KTtcbiAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF4TGVuZ3RoKHN0cjogc3RyaW5nLCBtYXhMZW46IG51bWJlcikge1xuICAgIHJldHVybiBzdHIubGVuZ3RoID4gbWF4TGVuID9cbiAgICAgICAgc3RyLnN1YnN0cigwLCBtYXhMZW4gLSAzKSArIFwiLi4uXCIgOlxuICAgICAgICBzdHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVRvTG9va3VwPFQ+KGE6IFRbXSwga2V5QWNjZXNzb3I6IChpdGVtOiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBjb25zdCByZXN1bHQgOiB7W2tleTogc3RyaW5nXSA6IFRbXX0gPSB7fTtcbiAgICBmb3IgKGxldCBpPTAsIGw9YS5sZW5ndGg7IGk8bDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhW2ldO1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcbiAgICAgICAgbGV0IGFycmF5ID0gcmVzdWx0W2tleV07XG4gICAgICAgIGlmIChhcnJheSkgYXJyYXkucHVzaChpdGVtKTtcbiAgICAgICAgZWxzZSByZXN1bHRba2V5XSA9IFtpdGVtXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9NYXA8VD4oYTogVFtdLCBrZXlBY2Nlc3NvcjogKGl0ZW06IFQpID0+IHN0cmluZyB8IG51bWJlcikge1xuICAgIGNvbnN0IHJlc3VsdCA6IHtba2V5OiBzdHJpbmddIDogVH0gPSB7fTtcbiAgICBmb3IgKGxldCBpPTAsIGw9YS5sZW5ndGg7IGk8bDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhW2ldO1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBpdGVtO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlcnJ5UGlja1Byb3BzPFQ+IChvYmo6IFQsIHByb3BzVG9QaWNrOiBzdHJpbmdbXSk6IFBhcnRpYWw8VD4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgcGFyYW0gb2YgcHJvcHNUb1BpY2spIHtcbiAgICAgIGlmIChwYXJhbSBpbiBvYmopIHJlc3VsdFtwYXJhbV0gPSBvYmpbcGFyYW1dO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0IGFzIFBhcnRpYWw8VD47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdDxUPiAoYTogVFtdLCBrZXlBY2Nlc3Nvcj86IChpdGVtOiBUKSA9PiBhbnkpIHtcbiAgICBjb25zdCBtYXAgPSBhcnJheVRvTWFwKGEsIGtleUFjY2Vzc29yIHx8ICh4ID0+IHgpKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoa2V5ID0+IG1hcFtrZXldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbHMoYTogYW55LCBiOiBhbnkpIHtcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gICAgaWYgKCFhIHx8ICFiKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaT0wLCBsPWtleXNBLmxlbmd0aDsgaTxsOyArK2kpIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c0FbaV07XG4gICAgICAgIGlmIChrZXlzQltpXSAhPT0ga2V5KSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7VXNlciwgTGVhcm5pbmdNb2R1bGVUYXNrc30gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCwgQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQge1VzZXJUYXNrfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQge0tlZFJlcG99IGZyb20gJy4uL3JlcG9zL2tlZC1yZXBvJztcbmltcG9ydCB7RWRzQ2xpZW50fSBmcm9tICcuLi9hcGlzL2Vkc2NsaWVudCc7XG5pbXBvcnQgS0VEIGZyb20gJy4va2VkJztcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJSZXBvIH0gZnJvbSAnLi4vcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwbyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW52IHtcbiAgICBjdXJyZW50VXNlcj86IFVzZXI7XG4gICAgbGVhcm5pbmdNb2R1bGVUYXNrcz86IExlYXJuaW5nTW9kdWxlVGFza3M7XG4gICAgYmVhcmVyUHJvdmlkZXI/OiBCZWFyZXJQcm92aWRlcjtcbiAgICBnb29nbGVUb2tlblByb3ZpZGVyPzogQmVhcmVyUHJvdmlkZXI7XG4gICAga2VkQmFja2VuZENsaWVudD86IEtlZEJhY2tlbmRDbGllbnQ7XG4gICAgZWRzQ2xpZW50PzogRWRzQ2xpZW50O1xuICAgIHVzZXJUYXNrc1JlcG8/O1xuICAgIGhpZGRlbkNvdXJzZXNSZXBvPztcbiAgICB3ZWVrTm90ZXNSZXBvPztcbiAgICBrZ1Rlcm1QbGFubmVyUmVwbz87XG4gICAga3NUZXJtUGxhbm5lclJlcG8/OiBLU1Rlcm1QbGFubmVyUmVwb1xuICAgIHR1dG9yZWQ6IGJvb2xlYW47XG4gICAgZXJyb3I/OiBFcnJvcjtcbn1cblxuaWYgKCFLRUQuZW52KSBLRUQuZW52ID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IEtFRC5lbnYgYXMgRW52O1xuZXhwb3J0IGNvbnN0IGVudjogRW52ID0gS0VELmVudjtcbiIsImV4cG9ydCAqIGZyb20gJy4vanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQnOyIsImltcG9ydCBLRUQgZnJvbSAnLi9LRUQnO1xuXG4vKiBUaGlzIGRlZmF1bHQgY29uZmlndXJhdGlvbiBpcyB1c2VkIGFzIGEgZmFsbGJhY2suXG5Ob3JtYWxseSBib3RoIHRlc3QgcGFnZXMgYW5kIHByb2R1Y3Rpb24gcGFnZXMgd2lsbCBvdmVycmlkZSB0aGVzZSBjb25maWdyYXRpb25zXG4qL1xuLypjb25zdCBkZWZhdWx0Q29uZmlndXJhdGlvbiA9IHtcbiAgLy8gRW52aXJvbm1lbnRcbiAgRU5WSVJPTk1FTlQ6ICdkZXZlbG9wbWVudCcgYXMgJ3Byb2R1Y3Rpb24nIHwgJ2RldmVsb3BtZW50JyB8ICd0ZXN0JyxcbiAgLy8gQXV0aGVudGljYXRpb24gU2VydmVyOlxuICBLRURfVE9LRU5fVVJMOiAnaHR0cHM6Ly9rZWRhdXRodGVzdC5henVyZXdlYnNpdGVzLm5ldC90b2tlbicsXG4gIEtFRF9UT0tFTl9QQVRIOiAnL2FwaS90b2tlbi5Ta3JpcHQucG9ydGxldD9zdi5jb250ZW50dHlwZT1hcHBsaWNhdGlvbi9qc29uJyxcbiAgS0VEX0NMSUVOVF9JRDogJ2RldmNsaWVudCcsXG4gIEtFRF9DTElFTlRfU0VDUkVUOiAnNGZSZGZRcFd0SnFqVFdmJyxcbiAgLy8gU2VydmljZXM6XG4gIEtFRF9BUElfVVJMOiAnaHR0cHM6Ly9rZWRiYWNrZW5kdGVzdC5henVyZXdlYnNpdGVzLm5ldC9hcGkvJywgIFxuICBFRFNfQVBJX1VSTDogJ2h0dHBzOi8vZWRzcG9ydGFsb3dpbmFwaS5henVyZXdlYnNpdGVzLm5ldC9hcGkvJ1xufSovXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUtlZENvbmZpZ3VyYXRpb24ge1xuICBFTlZJUk9OTUVOVDogJ3Byb2R1Y3Rpb24nIHwgJ2RldmVsb3BtZW50JyB8ICd0ZXN0JztcbiAgS0VEX1JFQUxNOiBzdHJpbmc7XG4gIEtFRF9UT0tFTl9VUkw6IHN0cmluZztcbiAgS0VEX1RPS0VOX1BBVEg6IHN0cmluZztcbiAgS0VEX0NMSUVOVF9JRDogc3RyaW5nO1xuICBLRURfQ0xJRU5UX1NFQ1JFVDogc3RyaW5nO1xuICBLRURfQVBJX1VSTDogc3RyaW5nO1xuICBFRFNfQVBJX1VSTDogc3RyaW5nO1xuICBLRURfTE9DQUxFOiBzdHJpbmc7XG4gIEtFRF9TQ0hPT0xfTE9DQUxFOiBzdHJpbmc7XG4gIEtFRF9DT1VSU0VfQlVJTERFUl9VUkw6IHN0cmluZztcbiAgS0VEX0NPVVJTRV9WSUVXRVJfVVJMOiBzdHJpbmc7XG4gIEtFRF9TVUJKRUNUX1BMQU5ORVJfQURNSU5fVVJMOiBzdHJpbmc7XG4gIEtFRF9TVUJKRUNUX1BMQU5ORVJfVVJMOiBzdHJpbmc7XG4gIEtFRF9GRUFUVVJFUzogc3RyaW5nO1xuICBLRURfS0VFUF9BTElWRV9VUkw6IHN0cmluZztcbiAgS0VEX0VOVU1fV09SREJBTktTX1VSTDogc3RyaW5nO1xuICBLRURfV09SREJBTktTX1VSTDogc3RyaW5nO1xuICBLRURfUkVTT1VSQ0VTX1VSTDogc3RyaW5nO1xufTtcblxuaWYgKCFLRUQuY2ZnKSBLRUQuY2ZnID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IEtFRC5jZmcgYXMgSUtlZENvbmZpZ3VyYXRpb247XG5leHBvcnQgY29uc3QgY2ZnOiBJS2VkQ29uZmlndXJhdGlvbiA9IEtFRC5jZmc7XG4iLCJ2YXIgS2VkQmFja2VuZFN1YnNjcmlwdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uKHN1YnNjcmliZXIsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVyID0gc3Vic2NyaWJlcjtcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gY29sbGVjdGlvbjtcbiAgICB9XG4gICAgS2VkQmFja2VuZFN1YnNjcmlwdGlvbi5wcm90b3R5cGUubm90aWZ5U3Vic2NyaWJlciA9IGZ1bmN0aW9uIChkYXRhLCBlcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcihbXSwgZXJyb3IsIHRoaXMpO1xuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YSAhPT0gdGhpcy5sYXN0Tm90aWZpZWREYXRhKSB7IC8vIFdpbGwgaW4tZmFjdCBiZSBlcXVhbCBieSByZWZlcmVuY2UgaWYgZGF0YSBpcyBzYW1lIGFzIGxhc3Qgbm90aWZpY2F0aW9uIChhcyB3ZSB1c2UgYW4gaW1tdXRhYmxlIGFwcHJvYWNoIG9uIGRhdGEpXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0Tm90aWZpZWREYXRhID0gZGF0YTtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIoZGF0YSwgZXJyb3IsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIoW10sIGV4LCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChleDIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgbm90aWZ5aW5nIEtlZEJhY2tlbmRTdWJzY3JpYmVyOlwiLCBleDIsICdvcmlnaW5hbGx5IG5vdGlmaWVkIGVycm9yOicsIGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgS2VkQmFja2VuZFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi51bnN1YnNjcmliZSh0aGlzKTtcbiAgICB9O1xuICAgIHJldHVybiBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IEtlZEJhY2tlbmRTdWJzY3JpcHRpb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlZGJhY2tlbmQtc3Vic2NyaXB0aW9uLmpzLm1hcCIsImltcG9ydCB7IHRhYmxlcyB9IGZyb20gJ2tlZGJhY2tlbmQtc2NoZW1hL3NjaGVtYS5qc29uJztcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZUZyb21MYWJlbCh0YWJsZSwgbGFiZWwpIHtcbiAgICByZXR1cm4gdGFibGVzW3RhYmxlXS5yZWxhdGlvbnNoaXBzW2xhYmVsXTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeUFycmF5KHF1ZXJ5LCBkYXRhKSB7XG4gICAgdmFyIGZpbHRlciA9IGdldEZpbHRlckZyb21RdWVyeShxdWVyeSk7XG4gICAgcmV0dXJuIGRhdGEuZmlsdGVyKGZpbHRlcik7XG59XG5leHBvcnQgZnVuY3Rpb24gQU5EKGZpbHRlcjEsIGZpbHRlcjIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIGZpbHRlcjEoeCkgJiYgZmlsdGVyMih4KTsgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWx0ZXJGcm9tUXVlcnkocXVlcnkpIHtcbiAgICB2YXIgZmlsdGVyID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgaWYgKHF1ZXJ5LmZyb20pXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5kYXRlVGltZSA+PSBxdWVyeS5mcm9tOyB9KTtcbiAgICBpZiAocXVlcnkudG8pXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5kYXRlVGltZSA8IHF1ZXJ5LnRvOyB9KTtcbiAgICBpZiAocXVlcnkuaWRzKVxuICAgICAgICByZXR1cm4gQU5EKGZpbHRlciwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHF1ZXJ5Lmlkcy5pbmNsdWRlcyh4LmlkKTsgfSk7XG4gICAgaWYgKHF1ZXJ5Lm5hbWUpXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5uYW1lID09PSBxdWVyeS5uYW1lOyB9KTtcbiAgICBpZiAocXVlcnkudGFncylcbiAgICAgICAgcmV0dXJuIEFORChmaWx0ZXIsIGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LnRhZ3MgJiYgW10uY29uY2F0KHF1ZXJ5LnRhZ3MgfHwgW10pLnNvbWUoZnVuY3Rpb24gKHRhZykgeyByZXR1cm4geC50YWdzLmluY2x1ZGVzKHRhZyk7IH0pOyB9KTtcbiAgICAvLyBxdWVyeS5oYXNFZGdlc0Zyb20gYW5kIHF1ZXJ5Lmhhc0VkZ2VzVG8gY2Fubm90IGJ5IGZpbHRlcmVkIGhlcmVcbiAgICByZXR1cm4gZmlsdGVyO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGJyYW5jaFNlbnNpdGl2ZShtKSB7XG4gICAgcmV0dXJuIG0ub3AgIT09ICdkZWxldGUnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdsb2JhbE9wKG0pIHtcbiAgICByZXR1cm4gbS5vcCA9PT0gJ2NsZWFyLWJyYW5jaCcgfHwgbS5vcCA9PT0gJ21lcmdlJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImltcG9ydCAqIGFzIEpzb25TY2hlbWEgZnJvbSBcImtlZGJhY2tlbmQtc2NoZW1hL3NjaGVtYS5qc29uXCI7XG5pbXBvcnQgeyBnZXRUYWJsZUZyb21MYWJlbCB9IGZyb20gXCIuL3V0aWxzXCI7XG52YXIgQ2FjaGVCdXN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhY2hlQnVzdCgpIHtcbiAgICB9XG4gICAgQ2FjaGVCdXN0LmdldENhY2hlQnVzdCA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnksIHVzZXIsIGluY2x1ZGVzKSB7XG4gICAgICAgIHZhciBpbnZvbHZlZEl0ZW1zID0gQ2FjaGVCdXN0LmdldEludm9sdmVkSXRlbXModGFibGUsIHF1ZXJ5LCBpbmNsdWRlcyk7XG4gICAgICAgIHJldHVybiBpbnZvbHZlZEl0ZW1zXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImNhY2hlLWJ1c3QtXCIgKyB1c2VyICsgXCItXCIgKyBpdGVtKTsgfSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAhIXZhbHVlOyB9KVxuICAgICAgICAgICAgLmpvaW4oJy8nKSB8fCAnc3RhdGljJztcbiAgICB9O1xuICAgIENhY2hlQnVzdC5pbnZhbGlkYXRlQ2FjaGUgPSBmdW5jdGlvbiAocmVxcywgdXNlcikge1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gQ2FjaGVCdXN0LmdldENhY2hlSW52YWxpZGF0aW9ucyhyZXFzKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gX2FbX2ldO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYWNoZS1idXN0LVwiICsgdXNlciArIFwiLVwiICsgaXRlbSwgJycgKyBEYXRlLm5vdygpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQ2FjaGVCdXN0LmdldEludm9sdmVkSXRlbXMgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5LCBpbmNsdWRlcykge1xuICAgICAgICB2YXIgaGFzRWRnZXNGcm9tID0gcXVlcnkuaGFzRWRnZXNGcm9tO1xuICAgICAgICB2YXIgcmVsYXRlZFRhYmxlcyA9IGluY2x1ZGVzXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gSnNvblNjaGVtYS50YWJsZXNbdGFibGVdLnJlbGF0aW9uc2hpcHNbbGFiZWxdOyB9KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAodGFibGUpIHsgcmV0dXJuICEhdGFibGU7IH0pO1xuICAgICAgICBpZiAoaGFzRWRnZXNGcm9tKVxuICAgICAgICAgICAgcmVsYXRlZFRhYmxlcy5wdXNoKFwiaGVmXCIgKyB0YWJsZSk7XG4gICAgICAgIHJldHVybiBbdGFibGUsICdtYXN0ZXInLCBxdWVyeS5icmFuY2hJZF0uZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiAhIXg7IH0pLmNvbmNhdChyZWxhdGVkVGFibGVzKS5zb3J0KCk7XG4gICAgfTtcbiAgICBDYWNoZUJ1c3QuZ2V0Q2FjaGVJbnZhbGlkYXRpb25zID0gZnVuY3Rpb24gKHJlcXMpIHtcbiAgICAgICAgdmFyIGludmFsaWRhdGlvblNldCA9IHt9O1xuICAgICAgICByZXFzLmZvckVhY2goZnVuY3Rpb24gKHJlcSkge1xuICAgICAgICAgICAgc3dpdGNoIChyZXEub3ApIHtcbiAgICAgICAgICAgICAgICBjYXNlICdhZGQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3B1dCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGUnOlxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbcmVxLnRhYmxlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VubGluayc6XG4gICAgICAgICAgICAgICAgY2FzZSAndW5kby1saW5rJzpcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS5zb3VyY2VUYWJsZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbXCJoZWYtXCIgKyBnZXRUYWJsZUZyb21MYWJlbChyZXEuc291cmNlVGFibGUsIHJlcS5sYWJlbCldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xlYXItYnJhbmNoJzpcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS5icmFuY2hJZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtZXJnZSc6XG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGlvblNldFtyZXEuYnJhbmNoSWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS50YXJnZXRCcmFuY2hJZCB8fCBcIm1hc3RlclwiXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGludmFsaWRhdGlvblNldCk7XG4gICAgfTtcbiAgICByZXR1cm4gQ2FjaGVCdXN0O1xufSgpKTtcbmV4cG9ydCB7IENhY2hlQnVzdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FjaGUtYnVzdC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5RGVsdGEoZG9jLCBkZWx0YSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGVsdGEpO1xuICAgIHZhciB0YXJnZXREb2MgPSBkb2M7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBrZXlzXzEgPSBrZXlzOyBfaSA8IGtleXNfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNfMVtfaV07XG4gICAgICAgIGlmICh0YXJnZXREb2MgPT09IGRvYylcbiAgICAgICAgICAgIHRhcmdldERvYyA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRvYyk7XG4gICAgICAgIHZhciB2YWwgPSBkZWx0YVtrZXldO1xuICAgICAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB2YXIgbWV0YUluc3RydWN0aW9ucyA9IE9iamVjdC5rZXlzKHZhbClcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleS5zdGFydHNXaXRoKCckJyk7IH0pO1xuICAgICAgICAgICAgaWYgKG1ldGFJbnN0cnVjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKG1pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaVZhbHVlID0gdmFsW21pXTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiR1bnNldFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90aGluZyBvbiB0YXJnZXQgZG9jIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERvYy4kd2FzVW5zZXQgPSB0cnVlOyAvLyBKdXN0IG1hcmsgaXQgZm9yIHJlLXJldHJpZXZhbCBhZnRlciBzdWNjZXNzZnVsIHBvc3RpbmcgY2hhbmdlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkYWRkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzVG9BZGQgPSBtaVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNUb0FkZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJGFkZCBpbnN0cnVjdGlvbiBtdXN0IGNvbnRhaW4gYXJyYXlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRhcmdldERvY1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0YXJnZXRBcnJheSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFycmF5ID0gdGFyZ2V0QXJyYXkuc2xpY2UoKTsgLy8gT24gSlMgc2lkZSwgd2UgbXVzdCBiZSBpbW11dGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RG9jW2tleV0gPSB0YXJnZXRBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIHZhbHVlc1RvQWRkXzEgPSB2YWx1ZXNUb0FkZDsgX2kgPCB2YWx1ZXNUb0FkZF8xLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdiA9IHZhbHVlc1RvQWRkXzFbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldEFycmF5LmluY2x1ZGVzKHYpKSB7IC8vIGF2b2lkIGR1cHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFycmF5LnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJHJlbW92ZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlc1RvUmVtb3ZlXzEgPSBtaVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZXNUb1JlbW92ZV8xKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIkcmVtb3ZlIGluc3RydWN0aW9uIG11c3QgY29udGFpbiBhcnJheVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEFycmF5ID0gdGFyZ2V0RG9jW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRhcmdldEFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBcnJheSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREb2Nba2V5XSA9IHRhcmdldEFycmF5LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gIXZhbHVlc1RvUmVtb3ZlXzEuaW5jbHVkZXModCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIG1ldGFJbnN0cnVjdGlvbnNfMSA9IG1ldGFJbnN0cnVjdGlvbnM7IF9hIDwgbWV0YUluc3RydWN0aW9uc18xLmxlbmd0aDsgX2ErKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWkgPSBtZXRhSW5zdHJ1Y3Rpb25zXzFbX2FdO1xuICAgICAgICAgICAgICAgICAgICBfbG9vcF8xKG1pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0RG9jW2tleV0gPSB2YWw7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXREb2M7XG59XG4vLyB7bmFtZTogXCJVbGxhXCJ9LCB7bmFtZTogeyR1bnNldDowfVxuLy8ge3RhZ3M6IHskYWRkOiBcImhlalwifX0sIHt0YWdzOiB7JHVuc2V0OjB9XCJ9XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VEZWx0YXMoZGVsdGExLCBkZWx0YTIsIF9hKSB7XG4gICAgdmFyIHJlbW92ZVVuc2V0UHJvcHMgPSAoX2EgPT09IHZvaWQgMCA/IHsgcmVtb3ZlVW5zZXRQcm9wczogZmFsc2UgfSA6IF9hKS5yZW1vdmVVbnNldFByb3BzO1xuICAgIC8vcmV0dXJuIHsuLi5kZWx0YTEsIC4uLmRlbHRhMn07XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkZWx0YTIpO1xuICAgIHZhciB0YXJnZXREZWx0YSA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRlbHRhMSk7XG4gICAgZm9yICh2YXIgX2kgPSAwLCBrZXlzXzIgPSBrZXlzOyBfaSA8IGtleXNfMi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXNfMltfaV07XG4gICAgICAgIHZhciB2YWwgPSBkZWx0YTJba2V5XTtcbiAgICAgICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdmFyIG1ldGFJbnN0cnVjdGlvbnMgPSBPYmplY3Qua2V5cyh2YWwpXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkuc3RhcnRzV2l0aCgnJCcpOyB9KTtcbiAgICAgICAgICAgIGlmIChtZXRhSW5zdHJ1Y3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMiA9IGZ1bmN0aW9uIChtaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWlWYWx1ZSA9IHZhbFttaV07XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobWkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkdW5zZXRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW1vdmVVbnNldFByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXREZWx0YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gbWF0dGVyIGlmIHRhcmdldERlbHRhIGlzIGVtcHR5IG9yIGhhcyB2YWx1ZS4gU2V0IGl0IHRvIHskdW5zZXQ6MH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gbWFrZSBzdXJlIHRoZSB2ZXJ5IGVuZCByZXN1bHQgd2lsbCBoYXZlIHskdW5zZXQ6MH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RGVsdGFba2V5XSA9IHsgJHVuc2V0OiAwIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiRhZGRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNUb0FkZF8yID0gbWlWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9BZGRfMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJGFkZCBpbnN0cnVjdGlvbiBtdXN0IGNvbnRhaW4gYXJyYXlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhUHJvcCA9IHRhcmdldERlbHRhW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWV0YVByb3AgPSB0YXJnZXRNZXRhUHJvcCA/IHRzbGliXzEuX19hc3NpZ24oe30sIHRhcmdldE1ldGFQcm9wKSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERlbHRhW2tleV0gPSB0YXJnZXRNZXRhUHJvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJzdCwganVzdCBjaGVjayBpZiB0YXJnZXQgbWV0YVByb3AgaGFzIHskcmVtb3ZlOiBbLi4uaXRlbXNdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHNvLCByZW1vdmUgYW55IGVxdWFsIGl0ZW1zIGZyb20gdGhlcmUgYmVmb3JlIG1lcmdpbmcgdGhlIHskYWRkOiBbLi4uXX0gYXJyYXlzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZW1vdmVBcnJheSA9IHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0UmVtb3ZlQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wLiRyZW1vdmUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UmVtb3ZlQXJyYXkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiAhdmFsdWVzVG9BZGRfMi5pbmNsdWRlcyh0KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgJHJlbW92ZSBhcnJheSBiZWNhbWUgZW10cHkuIFJlbW92ZSB0aGUgJHJlbW92ZSBwcm9wLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm93IGl0J3MgdGltZSB0byBtZXJnZSBvciBjcmVhdGUgdGFyZ2V0ICRhZGQgYXJyYXkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEFkZEFycmF5ID0gdGFyZ2V0TWV0YVByb3AuJGFkZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBZGRBcnJheSA9IHRhcmdldEFkZEFycmF5ID8gdGFyZ2V0QWRkQXJyYXkuY29uY2F0KHZhbHVlc1RvQWRkXzIpIDogdmFsdWVzVG9BZGRfMi5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wLiRhZGQgPSB0YXJnZXRBZGRBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkcmVtb3ZlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzVG9SZW1vdmVfMiA9IG1pVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlc1RvUmVtb3ZlXzIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIiRyZW1vdmUgaW5zdHJ1Y3Rpb24gbXVzdCBjb250YWluIGFycmF5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YVByb3AgPSB0YXJnZXREZWx0YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wID0gdGFyZ2V0TWV0YVByb3AgPyB0c2xpYl8xLl9fYXNzaWduKHt9LCB0YXJnZXRNZXRhUHJvcCkgOiB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREZWx0YVtrZXldID0gdGFyZ2V0TWV0YVByb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyc3QsIGp1c3QgY2hlY2sgaWYgdGFyZ2V0IG1ldGFQcm9wIGhhcyB7JGFkZDogWy4uLml0ZW1zXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBzbywgcmVtb3ZlIGFueSBlcXVhbCBpdGVtcyBmcm9tIHRoZXJlIGJlZm9yZSBtZXJnaW5nIHRoZSB7JHJlbW92ZTogWy4uLl19IGFycmF5cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0QWRkQXJyYXkgPSB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldEFkZEFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcC4kYWRkID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFkZEFycmF5LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gIXZhbHVlc1RvUmVtb3ZlXzIuaW5jbHVkZXModCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWV0YVByb3AuJGFkZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmICRhZGQgYXJyYXkgYmVjYW1lIGVtdHB5LiBSZW1vdmUgdGhlICRhZGQgcHJvcC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRNZXRhUHJvcC4kYWRkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdyBpdCdzIHRpbWUgdG8gbWVyZ2Ugb3IgY3JlYXRlIHRhcmdldCAkcmVtb3ZlIGFycmF5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZW1vdmVBcnJheSA9IHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UmVtb3ZlQXJyYXkgPSB0YXJnZXRSZW1vdmVBcnJheSA/IHRhcmdldFJlbW92ZUFycmF5LmNvbmNhdCh2YWx1ZXNUb1JlbW92ZV8yKSA6IHZhbHVlc1RvUmVtb3ZlXzIuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlID0gdGFyZ2V0UmVtb3ZlQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgbWV0YUluc3RydWN0aW9uc18yID0gbWV0YUluc3RydWN0aW9uczsgX2IgPCBtZXRhSW5zdHJ1Y3Rpb25zXzIubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaSA9IG1ldGFJbnN0cnVjdGlvbnNfMltfYl07XG4gICAgICAgICAgICAgICAgICAgIF9sb29wXzIobWkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0YXJnZXREZWx0YVtrZXldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0RGVsdGE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWx0YS1tZXJnZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgdXBkYXRlQXJyYXkgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMnO1xuaW1wb3J0IHsgYnJhbmNoU2Vuc2l0aXZlLCBnZXRUYWJsZUZyb21MYWJlbCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgYXBwbHlEZWx0YSB9IGZyb20gJy4vZGVsdGEtbWVyZ2UnO1xudmFyIEtlZEJhY2tlbmRRdWVyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kUXVlcnkodGFibGUsIHF1ZXJ5LCB1c2VyLCByZXBvLCBtdXRhdGlvblF1ZXVlKSB7XG4gICAgICAgIHRoaXMudGFibGUgPSB0YWJsZTtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xuICAgICAgICB0aGlzLnJlcG8gPSByZXBvO1xuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMuZ290SW5pdGlhbFJlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW52YWxpZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvYWRlZFZlcnNpb24gPSAwO1xuICAgICAgICB0aGlzLl9sb2FkUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5jbHVkZXMgPSBxdWVyeS5pbmNsdWRlID9cbiAgICAgICAgICAgIHR5cGVvZiBxdWVyeS5pbmNsdWRlID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICAgICAgW3F1ZXJ5LmluY2x1ZGVdIDpcbiAgICAgICAgICAgICAgICBxdWVyeS5pbmNsdWRlIDpcbiAgICAgICAgICAgIFtdO1xuICAgIH1cbiAgICBLZWRCYWNrZW5kUXVlcnkucXVlcnlLZXkgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5KSB7XG4gICAgICAgIHZhciBtdXRhdGlvbnNPbkVtcHR5ID0gcXVlcnkubXV0YXRpb25zT25FbXB0eSwgY29tcGFyYWJsZVByb3BzID0gdHNsaWJfMS5fX3Jlc3QocXVlcnksIFtcIm11dGF0aW9uc09uRW1wdHlcIl0pO1xuICAgICAgICByZXR1cm4gdGFibGUgKyBKU09OLnN0cmluZ2lmeShjb21wYXJhYmxlUHJvcHMpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUsIFwicXVlcnlLZXlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBLZWRCYWNrZW5kUXVlcnkucXVlcnlLZXkodGhpcy50YWJsZSwgdGhpcy5xdWVyeSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYXRhLCBkYXRhO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5nb3RJbml0aWFsUmVzcG9uc2UgJiYgIXRoaXMuaW52YWxpZCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkKHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKSwgdHJ1ZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlTdWJzY3JpYmVyKGRhdGEsIHRoaXMuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLnF1ZXJ5TG9jYWxseSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlTdWJzY3JpYmVyKGRhdGEsIHRoaXMuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2FkKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxvYWRQcm9taXNlO1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ290SW5pdGlhbFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXV0YXRpb25zT25FbXB0eSBzaG91bGQgbmV2ZXIgYmUgdXNlZCB0d2ljZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5xdWVyeS5tdXRhdGlvbnNPbkVtcHR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIXZlcnNpb24gJiYgdGhpcy5fbG9hZFByb21pc2UpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX2xvYWRQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiBcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9hZGluZyBpcyBvbmdvaW5nLCBhbmQgY2FsbGVyIGRvZXMgbm90IHJlcXVpcmUgYSByZWNlbnQgcmVmcmVzaC5cbiAgICAgICAgICAgICAgICAgICAgLy8gd2FpdCBmb3IgdGhlIG9uZ29pbmcgbG9hZCB0byBjb21wbGV0ZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IHZlcnNpb24gfHwgdGhpcy5yZXBvLndyaXRlci5wZXJzaXN0ZWRWZXJzaW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFByb21pc2UgPSB0aGlzLl9sb2FkUHJvbWlzZSA9IHRoaXMuX2xvYWQodmVyc2lvbikudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fbG9hZFByb21pc2UgPT09IGxvYWRQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2FkZWRWZXJzaW9uID0gTWF0aC5tYXgoX3RoaXMubG9hZGVkVmVyc2lvbiwgdmVyc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9sb2FkUHJvbWlzZSA9PT0gbG9hZFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9vbmUgaGFzIHJlZnJlc2hlZCBvdXIgbG9hZC4gVGhlIGVycm9yIGlzIHRoZSBmaW5hbCByZXN1bHQuIFNldCBpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2xvYWRQcm9taXNlID09PSBsb2FkUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb29uZSBoYXMgcmVmcmVzaGVkIG91ciBsb2FkLiBXZSdyZSBmaW5pc2hlZC4gRGF0YSBvciBlcnJvciBpcyBhbHJlYWR5IHNldC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayBnb3RJbml0aWFsUmVzcG9uc2UgdG8gdHJ1ZSBhbmQgbm90aWZ5IHN1YnNjcmliZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbG9hZFByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5nb3RJbml0aWFsUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZnlTdWJzY3JpYmVycyhfdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgbW9yZSByZWNlbnQgY2FsbCB0byBsb2FkKCkgaXMgb25nb2luZywgT1Igd2FzIG9uZ29pbmcgYnV0IHJlc3BvbmRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWZvcmUgdXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIGFueSBjYXNlIHJldHVybiB0aGlzLl9sb2FkUHJvbWlzZS4gSWYgaXQncyBvbmdvaW5nIHdlJ2xsIHdhaXQgZm9yIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGZpbmlzaC4gSWYgaXQncyBudWxsLCB3ZSdsbCBiZSByZXR1cm5pbmcgZmluYWxseSBoZXJlIHdpdGhvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55IGFjdGlvbiwgYmVjYXVzZSB0aGUgYWN0aW9uIHdhcyB0YWtlbiBieSB0aGUgcmVmcmVzaGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX2xvYWRQcm9taXNlOyAvLyBXYWl0IGZvciB0aGUgcmVmcmVzaGVkIGxvYWQgdG8gY29tcGxldGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGxvYWRQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuX2xvYWQgPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm11dGF0aW9uUXVldWUuYWZmZWN0c1F1ZXJ5KHRoaXMudGFibGUsIHRoaXMucXVlcnksIHRoaXMuaW5jbHVkZXMpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBvdXRnb2luZyBtdXRhdGlvbnMgdGhhdCBhZmZlY3RzIHRoaXMgcXVlcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIHdhaXQgdGlsbCB0aGV5IHJlYWNoIHNlcnZlciBhbmQgc2VydmVyIHJlc3BvbmRzIHdpdGggT0sgYmVmb3JlIHF1ZXJ5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VydmVyLiBPdGhlcndpc2UsIHdlIG1heSBnZXQgaW5hY2N1cmF0ZSBkYXRhIGZyb20gc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZXBvLndyaXRlci53YWl0Rm9yVmVyc2lvblRvUGVyc2lzdCh2ZXJzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBvdXRnb2luZyBtdXRhdGlvbnMgdGhhdCBhZmZlY3RzIHRoaXMgcXVlcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIHdhaXQgdGlsbCB0aGV5IHJlYWNoIHNlcnZlciBhbmQgc2VydmVyIHJlc3BvbmRzIHdpdGggT0sgYmVmb3JlIHF1ZXJ5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VydmVyLiBPdGhlcndpc2UsIHdlIG1heSBnZXQgaW5hY2N1cmF0ZSBkYXRhIGZyb20gc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucXVlcnlTZXJ2ZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcyAhPT0gc3Vic2NyaXB0aW9uOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuY29tbWl0TXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9ucywgdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfaSwgbXV0YXRpb25zXzEsIG0sIGRhdGE7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pID0gMCwgbXV0YXRpb25zXzEgPSBtdXRhdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgbXV0YXRpb25zXzEubGVuZ3RoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gbXV0YXRpb25zXzFbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5vcCA9PT0gJ2NsZWFyLWJyYW5jaCcgJiYgKG0uYnJhbmNoSWQgPT09IHRoaXMucXVlcnkuYnJhbmNoSWQpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hPckludmFsaWRhdGUodmVyc2lvbildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG0ub3AgPT09ICdtZXJnZScgJiYgKCFtLnRhcmdldEJyYW5jaElkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5icmFuY2hJZCA9PT0gdGhpcy5xdWVyeS5icmFuY2hJZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udGFyZ2V0QnJhbmNoSWQgPT09IHRoaXMucXVlcnkuYnJhbmNoSWQpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hPckludmFsaWRhdGUodmVyc2lvbildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG0ub3AgPT09ICd1cGRhdGUnICYmICgobS5kZWx0YURvYy50YWdzICYmIHRoaXMucXVlcnkudGFncykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobS5kZWx0YURvYy5uYW1lICYmIHRoaXMucXVlcnkubmFtZSkpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBIHRhZyBtYXkgaGF2ZSBiZWVuIGFkZGVkLCBvciByZW5hbWVkLCBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBxdWVyeSBpcyBkZXBlbmRlbnQgb24gdGhlIHNhbWUgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcXVlcnkgbXVzdCBiZSByZWZyZXNoZWQgZnJvbSBzZXJ2ZXIgYXMgd2UgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21taXQgdGhlIG11dGF0aW9ucyBsb2NhbGx5IGFzIHdlIGRvbid0IGhhdmUgYWxsIGluZm8uXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hPckludmFsaWRhdGUodmVyc2lvbildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBIHRhZyBtYXkgaGF2ZSBiZWVuIGFkZGVkLCBvciByZW5hbWVkLCBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBxdWVyeSBpcyBkZXBlbmRlbnQgb24gdGhlIHNhbWUgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcXVlcnkgbXVzdCBiZSByZWZyZXNoZWQgZnJvbSBzZXJ2ZXIgYXMgd2UgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21taXQgdGhlIG11dGF0aW9ucyBsb2NhbGx5IGFzIHdlIGRvbid0IGhhdmUgYWxsIGluZm8uXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pKys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkKG11dGF0aW9ucywgZmFsc2UsIHRoaXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA5O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLnJlZnJlc2hPckludmFsaWRhdGUgPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aCA9PT0gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZCh2ZXJzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5ub3RpZnlTdWJzY3JpYmVycyA9IGZ1bmN0aW9uIChvcHRpbWlzdGljTXV0YXRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5nb3RJbml0aWFsUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBkYXRhXzEgPSB0aGlzLmdldERhdGFXaXRoTXV0YXRpb25zQXBwbGllZChvcHRpbWlzdGljTXV0YXRpb25zLCB0cnVlLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICBzLm5vdGlmeVN1YnNjcmliZXIoZGF0YV8xLCBfdGhpcy5lcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5xdWVyeUxvY2FsbHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcG8ucXVlcnlTZXQucXVlcnlMb2NhbGx5KHRoaXMudGFibGUsIHRoaXMucXVlcnksIHRoaXMuaW5jbHVkZXMpO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5xdWVyeVNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlcG8uZ2V0Q2xpZW50KCkubGlzdCh0aGlzLnRhYmxlLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLnF1ZXJ5KSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGRhdGFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkID0gZnVuY3Rpb24gKG11dGF0aW9ucywgb3B0aW1pc3RpYywgZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgIGRhdGEgPSBfdGhpcy5hcHBseU11dGF0aW9uc09uRGF0YShkYXRhLCBtdXRhdGlvbiwgb3B0aW1pc3RpYyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuYXBwbHlNdXRhdGlvbnNPbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSwgbSwgb3B0aW1pc3RpYykge1xuICAgICAgICBpZiAoYnJhbmNoU2Vuc2l0aXZlKG0pICYmIG0uYnJhbmNoSWQgIT0gdGhpcy5xdWVyeS5icmFuY2hJZClcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCB0YWJsZSA9IF9hLnRhYmxlLCBpbmNsdWRlcyA9IF9hLmluY2x1ZGVzLCBsaXN0T3B0aW9ucyA9IF9hLnF1ZXJ5O1xuICAgICAgICB2YXIgc291cmNlSWRzID0gbGlzdE9wdGlvbnMuaGFzRWRnZXNGcm9tID8gW10uY29uY2F0KGxpc3RPcHRpb25zLmhhc0VkZ2VzRnJvbSB8fCBbXSkgOiBbXTtcbiAgICAgICAgdmFyIHJlcXVlc3RlZFRhZ3MgPSBsaXN0T3B0aW9ucy50YWdzID8gW10uY29uY2F0KGxpc3RPcHRpb25zLnRhZ3MgfHwgW10pIDogW107XG4gICAgICAgIHN3aXRjaCAobS5vcCkge1xuICAgICAgICAgICAgY2FzZSAndXBkYXRlJzoge1xuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2MuaWQgPT09IG0uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IGRlbHRhIG9uIHVwZGF0ZWQgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkRG9jID0gYXBwbHlEZWx0YShkb2MsIG0uZGVsdGFEb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGltaXN0aWMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZERvYy4kbWV0YSA9ICd1cGRhdGluZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlZERvYztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBpZCBkb2VzIG5vdCBhcHBseSB0byB0aGlzIGRvYywgc2VhcmNoIGluIGdyYXBocyB0aGUgaWQgaXMgZm91bmRcbiAgICAgICAgICAgICAgICAgICAgLy8gYW1vbmcgZ3JhcGggaW5jbHVkZWQgZG9jcywgYW5kIGlmIHNvLCB1cGRhdGUgdGhhdCBvbmU6XG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jbHVkZWREb2NzID0gZG9jW2xhYmVsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlZERvY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZEFycmF5ID0gdXBkYXRlQXJyYXkoaW5jbHVkZWREb2NzLCBmdW5jdGlvbiAocmVsYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRlZC5pZCAhPT0gbS5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWxhdGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFJlbGF0ZWQgPSBhcHBseURlbHRhKHJlbGF0ZWQsIG0uZGVsdGFEb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW1pc3RpYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRSZWxhdGVkLiRtZXRhID0gJ3VwZGF0aW5nJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRSZWxhdGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkQXJyYXkgIT09IGluY2x1ZGVkRG9jcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MsIChfYSA9IHt9LCBfYVtsYWJlbF0gPSB1cGRhdGVkQXJyYXksIF9hKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2FkZC1yZWxhdGVkJzpcbiAgICAgICAgICAgICAgICBpZiAodGFibGUgPT09IG0udGFibGUgJiYgaW5jbHVkZXMuaW5kZXhPZihtLmdyYXBoUHJvcCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGV4cHJlc3Npb24gaXMgYGRiLmNvdXJzZUJsb2Nrcy4uLi53aGF0ZXZlci4uIC5pbmNsdWRlKFwiYWJpbGl0aWVzXCIpYCwgZGV0ZWN0OiBkYi5jb3Vyc2VCbG9ja3MuYWRkUmVsYXRlZChibG9ja0lkLCAnYWJpbGl0aWVzJywgLi4uKVxuICAgICAgICAgICAgICAgICAgICAvLyAuLi5iZWNhdXNlIHRhYmxlID0gJ2NvdXJzZUJsb2NrcycgYW5kIGluY2x1ZGVzIGhhcyBcImFiaWxpdGllc1wiLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlQXJyYXkoZGF0YSwgZnVuY3Rpb24gKGRvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvYy5pZCAhPT0gbS5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0ZWREb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBtLnJlbGF0ZWREb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGltaXN0aWMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZERvYy4kbWV0YSA9ICdhZGRpbmcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hc3NpZ24oe30sIGRvYywgKF9hID0ge30sIF9hW20uZ3JhcGhQcm9wXSA9IGRvY1ttLmdyYXBoUHJvcF0uY29uY2F0KFtyZWxhdGVkRG9jXSksIF9hKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGlzdE9wdGlvbnMuaGFzRWRnZXNGcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VJZHMuaW5jbHVkZXMobS5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGV4cHJlc3Npb24gaXM6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGBkYi5jb3Vyc2VCbG9ja3MuaGFzRWRnZXNGcm9tKFtjb3Vyc2VJZF0pYCAgKG1lYW5pbmcgdGFibGU9J2NvdXJzZUJsb2NrcycgYW5kIHNvdXJjZUlkcyBpbmNsdWRlcyBjb3Vyc2VJZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICwgZGV0ZWN0OiBkYi5jb3Vyc2VJbnN0YW5jZXMuYWRkUmVsYXRlZChjb3Vyc2VJZCwgJ2NvdXJzZUJsb2NrcycsIC4uLi4pIC8vIG0uZ3JhcGhQcm9wID09PSAnYmxvY2tzJy0tPiBnZXRUYWJsZUZyb21MYWJlbCAtLT4gJ2NvdXJzZUJsb2NrcydcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZSA9PT0gZ2V0VGFibGVGcm9tTGFiZWwobS50YWJsZSwgbS5ncmFwaFByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsaXN0T3B0aW9ucy50YWdzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb25jYXQodGhpcy5zZXRHcmFwaFByb3BzKG0ucmVsYXRlZERvYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnJlbGF0ZWREb2MudGFncyAmJiByZXF1ZXN0ZWRUYWdzLnNvbWUoZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gbS5yZWxhdGVkRG9jLnRhZ3MuaW5jbHVkZXModGFnKTsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuY29uY2F0KHRoaXMuc2V0R3JhcGhQcm9wcyhtLnJlbGF0ZWREb2MpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RPcHRpb25zLmlkcyAmJiBsaXN0T3B0aW9ucy5pZHMuc29tZShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGlkID09PSBtLnJlbGF0ZWREb2MuaWQ7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgY2VydGFpbiBJRCBpcyBvYnNlcnZlZC4gQSBkb2Mgd2l0aCB0aGlzIGlkIGlzIGJlaW5nIGFkZGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGRvYyB0byB0aGUgcmVzdWx0LiBFeGFjdGx5IHRoaXMgV0lMTCBoYXBwZW4gaW4gdGhlIGZvbGxvd2luZyB0eXBpY2FsIHNjZW5hcmlvOlxuICAgICAgICAgICAgICAgICAgICAvLyAxLiBVc2VyIGFkZHMgYSByZWxhdGVkIGRvY3VtZW50IHRvIGEgbGlzdC5cbiAgICAgICAgICAgICAgICAgICAgLy8gMi4gRG9jdW1lbnQgcmVtYWlucyB3aXRoaW4gdGhlIE11dGF0aW9uUXVldWUgd2hpbGUgYmF0Y2gtcmVxdWVzdCBpcyBiZWluZyBwcm9jZXNzZWQgYnkgc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICAvLyAzLiBVc2VyIGNsaWNrcyB0aGUgYWRkZWQgaXRlbSB0byBlZGl0IG9yIHZpZXcgaXQgKG9yIG91ciBjb21wb25lbnQgcmVkaXJlY3RzIHRvIGl0cyBlZGl0b3IpXG4gICAgICAgICAgICAgICAgICAgIC8vIDQuIEEgbmV3IHF1ZXJ5IG9mIHRoYXQgcGFydGljdWxhciBJRCBpcyBzdWJzY3JpYmVkIHRvIHtpZHM9W3RoZUlkXX1cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgS2VkQmFja2VuZFF1ZXJ5LnN1YnNjcmliZSB0aGVuIGRvZXMgdGhpczpcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAxLiBDYWxsIHF1ZXJ5TG9jYWxseSgpIGJlZm9yZSBxdWVyeWluZyBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAyLiBxdWVyeUxvY2FsbHkoKSBpbnNwZWN0cyBtdXRhdGlvbnMgYW5kIGZpbmRzIGEgbWF0Y2gsIHJldHVybmluZyBhbiBlbXB0eSBsaXN0XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgKGFzc3VtZXMgYXMgd2UgYXJlIGFkZGluZyBpdCwgaXQgY2FuJ3QgZXhpc3Qgb24gdGhlIHNlcnZlciBhbnl3YXkpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgMy4gS2VkQmFja2VuZFFVZXJ5IGFwcGxpZXMgbXV0YXRpb25zIG9udG8gdGhlIGVtcHR5IGxpc3QsIGFuZCBlbmRzIHVwIGhlcmUgdG8gYWRkXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgaXQgb3B0aW1pc3RpY2FsbHkuXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgNC4gV2hlbiBzZXJ2ZXIgcmVzcG9uZHMgd2l0aCAyMDAgT0ssIGNhbGxzIHVzIGhlcmUgYWdhaW4gd2l0aCBvcHRpbWlzdGljPWZhbHNlXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgdG8gXCJwZXJzaXN0XCIgaXQgaW4gdGhlIHF1ZXJ5J3MgZGF0YSBhcnJheS5cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICA0QjogSWYgbm90IDIwMCBPSywgbXV0YXRpb24gbWF5IGJlIGdvbmUgYW5kIHRoZSBzdWJzY3JpYmVyIHdpbGwgc2UgYW4gZXJyb3IgcGFnZVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIFwiQ291bGQgbm90IGZpbmQgZW50aXR5IHdpdGggaWQgWC5cIiBhbG9uZyB3aXRoIGEgcmVkIGVycm9yIG1lc3NhZ2Ugb24gdGhlIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGFib3V0IHRoYXQgaXQgZmFpbGVkIHRvIHNhdmUgb24gc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb25jYXQodGhpcy5zZXRHcmFwaFByb3BzKG0ucmVsYXRlZERvYykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIGNhc2UgJ3JlbW92ZS1yZWxhdGVkJzpcbiAgICAgICAgICAgICAgICBpZiAodGFibGUgPT09IG0udGFibGUgJiYgaW5jbHVkZXMuaW5kZXhPZihtLmdyYXBoUHJvcCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jbHVkZWREb2NzID0gZG9jW20uZ3JhcGhQcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZWREb2NzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jLmlkICE9PSBtLmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZG9jLCAoX2EgPSB7fSwgX2FbbS5ncmFwaFByb3BdID0gb3B0aW1pc3RpYyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayByZWxhdGVkLWRvYy10by1yZW1vdmUgd2l0aCAkbWV0YTogJ2RlbGV0aW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVkRG9jcy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgIT09IG0ucmVsYXRlZERvYy5pZCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgOiB0c2xpYl8xLl9fYXNzaWduKHt9LCBkLCB7ICRtZXRhOiAnZGVsZXRpbmcnIH0pOyB9KSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRGVsZXRlIHJlbGF0ZWQtZG9jLXRvLXJlbW92ZSBmcm9tIGRvY1tncmFwUHJvcF06XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZWREb2NzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCAhPT0gbS5yZWxhdGVkRG9jLmlkOyB9KSwgX2EpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsaXN0T3B0aW9ucy5oYXNFZGdlc0Zyb20pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZUlkcy5pbmNsdWRlcyhtLmlkKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpbWlzdGljID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCA9PT0gbS5yZWxhdGVkRG9jLmlkID8gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZCwgeyAkbWV0YTogJ2RlbGV0aW5nJyB9KSA6IGQ7IH0pIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCAhPT0gbS5yZWxhdGVkRG9jLmlkOyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgICAgIGlmICh0YWJsZSA9PT0gbS50YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgIT09IG0uaWQ7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChsaXN0T3B0aW9ucy5pbmNsdWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmNsdWRlZFRhYmxlcyA9IGluY2x1ZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gKHsgbGFiZWw6IGxhYmVsLCB0YWJsZTogZ2V0VGFibGVGcm9tTGFiZWwodGFibGUsIGxhYmVsKSB9KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbHNfMSA9IGluY2x1ZGVkVGFibGVzLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IF9hLnRhYmxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlID09PSBtLnRhYmxlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsc18xLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxzXzEuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gX2EubGFiZWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0ZWREb2NzID0gZG9jW2xhYmVsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbGF0ZWREb2NzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MsIChfYiA9IHt9LCBfYltsYWJlbF0gPSBvcHRpbWlzdGljID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkRG9jcy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgPT09IG0uaWQgPyB0c2xpYl8xLl9fYXNzaWduKHt9LCBkLCB7ICRtZXRhOiAnZGVsZXRpbmcnIH0pIDogZDsgfSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWREb2NzLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gX2EuaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZCAhPT0gbS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSwgX2IpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuc2V0R3JhcGhQcm9wcyA9IGZ1bmN0aW9uIChkb2MpIHtcbiAgICAgICAgdmFyIGNvcHkgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MpO1xuICAgICAgICB0aGlzLmluY2x1ZGVzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiBjb3B5W2xhYmVsXSA9IGNvcHlbbGFiZWxdIHx8IFtdOyB9KTtcbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgfTtcbiAgICByZXR1cm4gS2VkQmFja2VuZFF1ZXJ5O1xufSgpKTtcbmV4cG9ydCB7IEtlZEJhY2tlbmRRdWVyeSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkYmFja2VuZC1xdWVyeS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQmF0Y2hSdW5uZXIgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgS2VkQmFja2VuZFN1YnNjcmlwdGlvbiB9IGZyb20gXCIuL2tlZGJhY2tlbmQtc3Vic2NyaXB0aW9uXCI7XG5pbXBvcnQgeyBDYWNoZUJ1c3QgfSBmcm9tICcuL2NhY2hlLWJ1c3QnO1xuaW1wb3J0IHsgS2VkQmFja2VuZFF1ZXJ5IH0gZnJvbSAnLi9rZWRiYWNrZW5kLXF1ZXJ5JztcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbGxlY3Rpb24nO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgXCJsaXZlXCIgcXVlcnkgYWdhaW5zdCBhIHRhYmxlIG9yIGZpbHRlcmVkIHRhYmxlLlxuICovXG52YXIgS2VkQmFja2VuZENvbGxlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoS2VkQmFja2VuZENvbGxlY3Rpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENvbGxlY3Rpb24ocmVwbywgdGFibGUsIHF1ZXJ5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uKG9ic2VydmVyLCBfdGhpcyk7XG4gICAgICAgICAgICBfdGhpcy5yZXBvLnF1ZXJ5U2V0LnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMucmVwbyA9IHJlcG87XG4gICAgICAgIF90aGlzLnRhYmxlID0gdGFibGU7XG4gICAgICAgIF90aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZSwgXCJxdWVyeUtleVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEtlZEJhY2tlbmRRdWVyeS5xdWVyeUtleSh0aGlzLnRhYmxlLCB0aGlzLnF1ZXJ5KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZSwgXCJpbmNsdWRlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luY2x1ZGVzIHx8ICh0aGlzLl9pbmNsdWRlcyA9IFtdLmNvbmNhdCh0aGlzLnF1ZXJ5LmluY2x1ZGUgfHwgW10pKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmFwcGx5UXVlcnkgPSBmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBLZWRCYWNrZW5kQ29sbGVjdGlvbih0aGlzLnJlcG8sIHRoaXMudGFibGUsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMucXVlcnksIHF1ZXJ5KSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkVG9RdWVyeUFycmF5UHJvcCA9IGZ1bmN0aW9uIChhcnJheVByb3AsIGVudHJpZXMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KChfYSA9IHt9LCBfYVthcnJheVByb3BdID0gKHRoaXMucXVlcnlbYXJyYXlQcm9wXSB8fCBbXSkuY29uY2F0KGVudHJpZXMpLCBfYSkpO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmFkZEZsYWdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZmxhZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGZsYWdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkVG9RdWVyeUFycmF5UHJvcChcImZsYWdzXCIsIGZsYWdzKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGRlYnVnOiB0cnVlIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmlkc09ubHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZEZsYWdzKFwiaWRzT25seVwiKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5pZHNBbmROYW1lc09ubHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZEZsYWdzKFwiaWRzQW5kTmFtZXNPbmx5XCIpO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmluY2x1ZGVJZHNPbmx5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGRGbGFncyhcImluY2x1ZGVJZHNPbmx5XCIpO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmluY2x1ZGVJZHNBbmROYW1lc09ubHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZEZsYWdzKFwiaW5jbHVkZUlkc0FuZE5hbWVzT25seVwiKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5iZXR3ZWVuID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBmcm9tOiBmcm9tLCB0bzogdG8gfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUucm9sZSA9IGZ1bmN0aW9uIChyb2xlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyByb2xlOiByb2xlIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmhhc0VkZ2VzRnJvbSA9IGZ1bmN0aW9uIChpZHMpIHtcbiAgICAgICAgaWYgKGlkcy5sZW5ndGggPT09IDAgfHwgaWRzLnNvbWUoZnVuY3Rpb24gKGlkKSB7IHJldHVybiAhaWQ7IH0pKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpZCBsaXN0IGdpdmVuIHRvIENvbGxlY3Rpb24uaGFzRWRnZXNGcm9tKFwiICsgSlNPTi5zdHJpbmdpZnkoaWRzKSArIFwiKVwiKTtcbiAgICAgICAgdmFyIGhlZiA9IHRoaXMuYWRkVG9RdWVyeUFycmF5UHJvcChcImhhc0VkZ2VzRnJvbVwiLCBpZHMpO1xuICAgICAgICByZXR1cm4gaGVmO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmhhc0VkZ2VzVG8gPSBmdW5jdGlvbiAoaWRzKSB7XG4gICAgICAgIGlmIChpZHMubGVuZ3RoID09PSAwIHx8IGlkcy5zb21lKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gIWlkOyB9KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaWQgbGlzdCBnaXZlbiB0byBDb2xsZWN0aW9uLmhhc0VkZ2VzVG8oXCIgKyBKU09OLnN0cmluZ2lmeShpZHMpICsgXCIpXCIpO1xuICAgICAgICB2YXIgaGV0ID0gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiaGFzRWRnZXNUb1wiLCBpZHMpO1xuICAgICAgICByZXR1cm4gaGV0O1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmlkID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBpZHM6IFtpZF0gfSkuc2luZ2xlKHtcbiAgICAgICAgICAgIG9uWmVybzogZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBlbnRpdHkgaW4gXCIgKyBfdGhpcy50YWJsZSArIFwiIHdpdGggaWQgXCIgKyBpZCk7IH0sXG4gICAgICAgICAgICBvbk1hbnk6IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiTXVsdGlwbGUgZW50cmllcyBpbiBcIiArIF90aGlzLnRhYmxlICsgXCIgd2l0aCBpZCBcIiArIGlkKTsgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaWRzID0gZnVuY3Rpb24gKGlkcykge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgaWRzOiBpZHMgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUubmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBuYW1lOiBuYW1lIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnRhZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB0YWdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IHRhZ3M6IHRhZ3MgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuYnJhbmNoSWQgPSBmdW5jdGlvbiAoYnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGJyYW5jaElkOiBicmFuY2hJZCB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5pbmNsdWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZ3JhcGhzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBncmFwaHNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiaW5jbHVkZVwiLCBncmFwaHMpO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmNhY2hlT3B0aW1pemVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgY2FjaGVCdXN0OiBDYWNoZUJ1c3QuZ2V0Q2FjaGVCdXN0KHRoaXMudGFibGUsIHRoaXMucXVlcnksIHRoaXMucmVwby5nZXRVc2VyKCksIHRoaXMuaW5jbHVkZXMpIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLm11dGF0aW9uc09uRW1wdHkgPSBmdW5jdGlvbiAobXV0YXRpb25GYWN0b3J5KSB7XG4gICAgICAgIHZhciB0eCA9IG5ldyBCYXRjaFJ1bm5lcigpO1xuICAgICAgICBtdXRhdGlvbkZhY3RvcnkodHgpO1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgbXV0YXRpb25zT25FbXB0eTogdHgubXV0YXRpb25SZXF1ZXN0cyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5zaW5nbGUgPSBmdW5jdGlvbiAodGhyb3dlcnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9hID0gdGhyb3dlcnMgfHwge30sIG9uWmVybyA9IF9hLm9uWmVybywgb25NYW55ID0gX2Eub25NYW55O1xuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChvblplcm8pXG4gICAgICAgICAgICAgICAgICAgIG9uWmVybygpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2luZ2xlIGl0ZW0gb2YgXCIgKyBfdGhpcy50YWJsZSArIFwiIGV4cGVjdGVkIHRvIGJlIHJldHVybmVkIGJ5IHF1ZXJ5IFwiICsgSlNPTi5zdHJpbmdpZnkoX3RoaXMucXVlcnkpICsgXCIgYnV0IG5vbmUgd2FzIGZvdW5kLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgICAgICAgaWYgKG9uTWFueSlcbiAgICAgICAgICAgICAgICAgICAgb25NYW55KCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNpbmdsZSBpdGVtIG9mIFwiICsgX3RoaXMudGFibGUgKyBcIiBleHBlY3RlZCB0byBiZSByZXR1cm5lZCBieSBxdWVyeSBcIiArIEpTT04uc3RyaW5naWZ5KF90aGlzLnF1ZXJ5KSArIFwiIGJ1dCBcIiArIGl0ZW1zLmxlbmd0aCArIFwiIHdhcyBmb3VuZC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gaXRlbXNbMF07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLypjb21iaW5lTGF0ZXN0PFRPdGhlcj4ob3RoZXI6IFF1ZXJ5T2JzZXJ2YWJsZTxUT3RoZXI+KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXIoeCA9PiB4KS5jb21iaW5lTGF0ZXN0KG90aGVyKTtcbiAgICB9Ki9cbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRvYywgY2hhbmdlcywgZGVib3VuY2UpIHtcbiAgICAgICAgaWYgKGRlYm91bmNlID09PSB2b2lkIDApIHsgZGVib3VuY2UgPSAxMDAwOyB9XG4gICAgICAgIHRoaXMucmVwby53cml0ZXIubXV0YXRlKFt7XG4gICAgICAgICAgICAgICAgb3A6ICd1cGRhdGUnLFxuICAgICAgICAgICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxuICAgICAgICAgICAgICAgIGJyYW5jaElkOiB0aGlzLnF1ZXJ5LmJyYW5jaElkLFxuICAgICAgICAgICAgICAgIGlkOiBkb2MuaWQsXG4gICAgICAgICAgICAgICAgZGVsdGFEb2M6IGNoYW5nZXMsXG4gICAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogZG9jLm5hbWVcbiAgICAgICAgICAgIH1dLCBkZWJvdW5jZSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkUmVsYXRlZCA9IGZ1bmN0aW9uIChpZCwgbGFiZWwsIHJlbGF0ZWREb2MpIHtcbiAgICAgICAgdGhpcy5yZXBvLndyaXRlci5tdXRhdGUoW3tcbiAgICAgICAgICAgICAgICBvcDogJ2FkZC1yZWxhdGVkJyxcbiAgICAgICAgICAgICAgICB0YWJsZTogdGhpcy50YWJsZSxcbiAgICAgICAgICAgICAgICBicmFuY2hJZDogdGhpcy5xdWVyeS5icmFuY2hJZCxcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgZ3JhcGhQcm9wOiBsYWJlbCxcbiAgICAgICAgICAgICAgICByZWxhdGVkRG9jOiByZWxhdGVkRG9jXG4gICAgICAgICAgICB9XSwgMCk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUucmVtb3ZlUmVsYXRlZCA9IGZ1bmN0aW9uIChpZCwgbGFiZWwsIHJlbGF0ZWREb2MpIHtcbiAgICAgICAgdGhpcy5yZXBvLndyaXRlci5tdXRhdGUoW3tcbiAgICAgICAgICAgICAgICBvcDogJ3JlbW92ZS1yZWxhdGVkJyxcbiAgICAgICAgICAgICAgICB0YWJsZTogdGhpcy50YWJsZSxcbiAgICAgICAgICAgICAgICBicmFuY2hJZDogdGhpcy5xdWVyeS5icmFuY2hJZCxcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgZ3JhcGhQcm9wOiBsYWJlbCxcbiAgICAgICAgICAgICAgICByZWxhdGVkRG9jOiByZWxhdGVkRG9jXG4gICAgICAgICAgICB9XSwgMCk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUudW5kb0xpbmsgPSBmdW5jdGlvbiAoaWQsIGxhYmVsLCByZWxhdGVkSWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnF1ZXJ5LmJyYW5jaElkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5kbyBsaW5rcyBjYW4gb25seSBiZSBwZXJmb3JtZWQgb24gYnJhbmNoZXNcIik7XG4gICAgICAgIHRoaXMucmVwby53cml0ZXIubXV0YXRlKFt7XG4gICAgICAgICAgICAgICAgb3A6ICd1bmRvLWxpbmsnLFxuICAgICAgICAgICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxuICAgICAgICAgICAgICAgIGJyYW5jaElkOiB0aGlzLnF1ZXJ5LmJyYW5jaElkLFxuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBncmFwaFByb3A6IGxhYmVsLFxuICAgICAgICAgICAgICAgIHJlbGF0ZWRJZDogcmVsYXRlZElkXG4gICAgICAgICAgICB9XSwgMCk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaWRzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBpZHNbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlcG8ud3JpdGVyLm11dGF0ZShpZHMubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gKHtcbiAgICAgICAgICAgIG9wOiAnZGVsZXRlJyxcbiAgICAgICAgICAgIHRhYmxlOiBfdGhpcy50YWJsZSxcbiAgICAgICAgICAgIGlkOiBpZFxuICAgICAgICB9KTsgfSksIDApO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICB0aGlzLnJlcG8ucXVlcnlTZXQudW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uKTtcbiAgICB9O1xuICAgIHJldHVybiBLZWRCYWNrZW5kQ29sbGVjdGlvbjtcbn0oQ29sbGVjdGlvbikpO1xuZXhwb3J0IHsgS2VkQmFja2VuZENvbGxlY3Rpb24gfTtcbi8qbWl4aW4oXG4gIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZSxcbiAgTWFwcGVkQ29sbGVjdGlvbi5wcm90b3R5cGUsXG4gIFwibWFwXCIsIFwiZmxhdFwiLCBcImNvbmNhdFwiLCBcInJlbmRlclwiLCBcImxvYWRcIik7Ki9cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlZGJhY2tlbmQtY29sbGVjdGlvbi5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgS2VkQmFja2VuZFF1ZXJ5IH0gZnJvbSAnLi9rZWRiYWNrZW5kLXF1ZXJ5JztcbmltcG9ydCAqIGFzIEpzb25TY2hlbWEgZnJvbSAna2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb24nO1xuaW1wb3J0IHsgcXVlcnlBcnJheSB9IGZyb20gJy4vdXRpbHMnO1xudmFyIFF1ZXJ5U2V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFF1ZXJ5U2V0KG11dGF0aW9uUXVldWUpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlID0gbXV0YXRpb25RdWV1ZTtcbiAgICAgICAgdGhpcy5xdWVyaWVzID0gW107XG4gICAgfVxuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5jb21taXRNdXRhdGlvbnMgPSBmdW5jdGlvbiAobXV0YXRpb25zLCB2ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UuYWxsKHRoaXMucXVlcmllcy5tYXAoZnVuY3Rpb24gKHEpIHsgcmV0dXJuIHEuY29tbWl0TXV0YXRpb25zKG11dGF0aW9ucywgdmVyc2lvbik7IH0pKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cEludmFsaWRRdWVyaWVzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUXVlcnlTZXQucHJvdG90eXBlLmNsZWFudXBJbnZhbGlkUXVlcmllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5xdWVyaWVzID0gdGhpcy5xdWVyaWVzLmZpbHRlcihmdW5jdGlvbiAocSkge1xuICAgICAgICAgICAgaWYgKHEuaW52YWxpZCkge1xuICAgICAgICAgICAgICAgIGlmIChxLnRpbWVvdXRIYW5kbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHEudGltZW91dEhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIHEudGltZW91dEhhbmRsZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5ub3RpZnlTdWJzY3JpYmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wdGltaXN0aWNNdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCk7XG4gICAgICAgIHRoaXMucXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChxKSB7XG4gICAgICAgICAgICBxLm5vdGlmeVN1YnNjcmliZXJzKG9wdGltaXN0aWNNdXRhdGlvbnMpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5maW5kUXVlcnkgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnF1ZXJpZXMuZmluZChmdW5jdGlvbiAocSkgeyByZXR1cm4gcS5xdWVyeUtleSA9PT0gS2VkQmFja2VuZFF1ZXJ5LnF1ZXJ5S2V5KHRhYmxlLCBxdWVyeSk7IH0pO1xuICAgIH07XG4gICAgUXVlcnlTZXQucHJvdG90eXBlLnF1ZXJ5TG9jYWxseSA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnksIGluY2x1ZGVzKSB7XG4gICAgICAgIC8vIEZvciBub3csIG9ubHkgaGFuZGxlIHRoaXMgdmVyeSBjb21tb24gYW5kIHNwZWNpYWwgY2FzZSAod2hpY2hcbiAgICAgICAgLy8gd2lsbCBzYXZlIGEgbG90IG9mIHVubmVzY2Vzc2FyeSBuZXR3b3JrIHRyYWZmaWMgaWYgSSBhbSB0aGlua2luZyByaWdodC4uLilcbiAgICAgICAgdmFyIG11dGF0aW9ucyA9IHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKTtcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHF1ZXJ5IHdhbnRzIHRvIGdldCBhIHNpbmdsZSBlbnRpdHkgYnkgaXRzIElEOlxuICAgICAgICBpZiAocXVlcnkuaWRzICYmIHF1ZXJ5Lmlkcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIC8vIEFuZCBpZiBzbywgaWYgd2UgaGF2ZSBhbiBvdXRnb2luZyBtdXRhdGlvbiB0byBjcmVhdGUgdGhhdCBlbnRpdHk6XG4gICAgICAgICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ub3AgPT09ICdhZGQtcmVsYXRlZCcgJiYgbS5yZWxhdGVkRG9jLmlkID09PSBxdWVyeS5pZHNbMF07IH0pKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlbiByZXR1cm4gYW4gRU1QVFkgcmVzcG9uc2UsIHNpZ25hbGxpbmcgdGhhdCB3ZSBjYW4gcmVzb2x2ZSB0aGlzIGxvY2FsbHksXG4gICAgICAgICAgICAgICAgLy8gYnV0IGxldCB0aGUgb3B0aXN0aWMgZmVhdHVyZSBvZiBLZWRCYWNrZW5kUXVlcnkgYXBwbHkgdGhlIG11dGF0aW9uIGJlZm9yZVxuICAgICAgICAgICAgICAgIC8vIG5vdGlmeWluZyBzdWJzY3JpYmVycyAod2UgZG9uJ3Qgd2FudCBpdCB0byBiZSBwZXJzaXN0ZW50IGJlZm9yZSB0aGUgc2VydmVyXG4gICAgICAgICAgICAgICAgLy8gaGFzIGFjY2VwdGVkIHRoZSBtdXRhdGlvbilcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gT0ssIGFub3RoZXIgcXVpdGUgY29tbW9uIGNhc2UgaXMgd2hlbiB3ZSBhc2sgZm9yIGEgY2VydGFpbiBJRCBhbmQgdGhhdCBJRCByZXBsaWVzXG4gICAgICAgIC8vIHdpdGhpbiBhbm90aGVyIHF1ZXJ5XG4gICAgICAgIGlmIChxdWVyeS5oYXNFZGdlc0Zyb20gfHwgcXVlcnkuaGFzRWRnZXNUbylcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBOb3QgcG9zc2libGUgdG8gaGFuZGxlXG4gICAgICAgIGlmICghcXVlcnkuaWRzKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIEZvciBub3csIGp1c3QgdGFrZSBoaWdodCBmb3IgdGhpcyBwYXJ0aWN1bGFyIGFuZCBtb3N0IGNvbW1vbiBjYXNlIVxuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChxKSB7XG4gICAgICAgICAgICBpZiAoIXEuZ290SW5pdGlhbFJlc3BvbnNlKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgICAgICBpZiAocS5xdWVyeS5icmFuY2hJZCAhPT0gcXVlcnkuYnJhbmNoSWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgIGlmIChxLnF1ZXJ5LmZsYWdzKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7IC8vIEl0IHdvdWxkIGJlIGNvbXBsZXggdG8gc3VwcG9ydCB2YXJpb3VzIGZsYWdzLiBRdWVyeSdzIGRhdGEgbWF5IGluY2x1ZGUgaWRzIG9ubHkuIENhbid0IHJlbHkgb24gdGhlIHF1ZXJ5LlxuICAgICAgICAgICAgdmFyIHFJbmNsdWRlcyA9IHEuaW5jbHVkZXM7XG4gICAgICAgICAgICBpZiAocUluY2x1ZGVzLmxlbmd0aCA+IDAgJiYgKCFxdWVyeS5pbmNsdWRlIHx8IHF1ZXJ5LmluY2x1ZGUubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IGluY2x1ZGUsIGJ1dCB0aGlzIHF1ZXJ5IGRvZXMuIENoZWNrIGlmIHdlIGNhbiBmaW5kIG91ciByZXN1bHQgd2l0aGluIGl0LlxuICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IHFJbmNsdWRlcy5maW5kKGZ1bmN0aW9uIChsKSB7IHJldHVybiBKc29uU2NoZW1hLnRhYmxlc1txLnRhYmxlXVtcInJlbGF0aW9uc2hpcHNcIl1bbF0gPT09IHRhYmxlOyB9KTtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc18xID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBxLmRhdGE7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW50aXR5ID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YkRhdGEgPSBxdWVyeUFycmF5KHF1ZXJ5LCBlbnRpdHlbbGFiZWxdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YkRhdGEuZm9yRWFjaChmdW5jdGlvbiAocikgeyByZXR1cm4gcmVzXzFbci5pZF0gPSByOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0XzEgPSBPYmplY3Qua2V5cyhyZXNfMSkubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gcmVzXzFbaWRdOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSByZXR1cm4gcmVzdWx0IGlmIHdlIGNvdWxkIGxvb2sgdXAgZXZlcnkgcmVxdWVzdGVkIElEOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5Lmlkcy5ldmVyeShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIHJlc3VsdF8xLnNvbWUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguaWQgPT09IGlkOyB9KTsgfSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogcmVzdWx0XzEgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWluY2x1ZGVzLmV2ZXJ5KGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gcUluY2x1ZGVzLmluY2x1ZGVzKGxhYmVsKTsgfSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgIC8vIExhc3RseSwgaWYgdGhlIHF1ZXJ5IGluY2x1ZGVzIGFsbCBncmFwaHMgdGhhdCB3ZSBkbywgcGljayB0aGUgc3Vic2V0IGZyb20gdGhhdCBxdWVyeS5cbiAgICAgICAgICAgIC8vIENvbmNyZXRlIGV4YW1wbGU6IFdlIG9ic2VydmUgYSBjZXJ0YWluIFRhc2sgYnkgSUQgYW5kIHdhbnQgaXRzIGtub3dsZWRnZVJlcXVpcmVtZW50cyBhbG9uZyB3aXRoIGl0LFxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlJ3MgYW5vdGhlciBxdWVyeSBvZiBhbGwgdGFza3MgdGhhdCBhbHNvIGluY2x1ZGVzIGtub3dsZWRnZVJlcXVpcmVtZW50cy4gVXNlIGl0LiBcbiAgICAgICAgICAgIGlmIChxLnRhYmxlID09PSB0YWJsZSkge1xuICAgICAgICAgICAgICAgIHZhciByZXN1bHRfMiA9IHF1ZXJ5QXJyYXkocXVlcnksIHEuZGF0YSk7XG4gICAgICAgICAgICAgICAgLy8gT25seSByZXR1cm4gcmVzdWx0IGlmIHdlIGNvdWxkIGxvb2sgdXAgZXZlcnkgcmVxdWVzdGVkIElEOlxuICAgICAgICAgICAgICAgIGlmICghcXVlcnkuaWRzLmV2ZXJ5KGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gcmVzdWx0XzIuc29tZShmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5pZCA9PT0gaWQ7IH0pOyB9KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogcmVzdWx0XzIgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMucXVlcmllczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBxID0gX2FbX2ldO1xuICAgICAgICAgICAgdmFyIHN0YXRlXzEgPSBfbG9vcF8xKHEpO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZV8xID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZV8xLnZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBRdWVyeVNldC5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICB2YXIgX2EgPSBzdWJzY3JpcHRpb24uY29sbGVjdGlvbiwgdGFibGUgPSBfYS50YWJsZSwgcXVlcnkgPSBfYS5xdWVyeSwgcmVwbyA9IF9hLnJlcG87XG4gICAgICAgIHZhciBrYlF1ZXJ5ID0gdGhpcy5maW5kUXVlcnkodGFibGUsIHF1ZXJ5KTtcbiAgICAgICAgaWYgKCFrYlF1ZXJ5KSB7XG4gICAgICAgICAgICBrYlF1ZXJ5ID0gbmV3IEtlZEJhY2tlbmRRdWVyeSh0YWJsZSwgcXVlcnksIHJlcG8uZ2V0VXNlcigpLCByZXBvLCB0aGlzLm11dGF0aW9uUXVldWUpO1xuICAgICAgICAgICAgdGhpcy5xdWVyaWVzLnB1c2goa2JRdWVyeSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoa2JRdWVyeS50aW1lb3V0SGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGtiUXVlcnkudGltZW91dEhhbmRsZSk7XG4gICAgICAgICAgICAgICAga2JRdWVyeS50aW1lb3V0SGFuZGxlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBrYlF1ZXJ5LnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xuICAgIH07XG4gICAgUXVlcnlTZXQucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSBzdWJzY3JpcHRpb24uY29sbGVjdGlvbiwgdGFibGUgPSBfYS50YWJsZSwgcXVlcnkgPSBfYS5xdWVyeSwgcmVwbyA9IF9hLnJlcG87XG4gICAgICAgIHZhciBrYlF1ZXJ5ID0gdGhpcy5maW5kUXVlcnkodGFibGUsIHF1ZXJ5KTtcbiAgICAgICAgaWYgKGtiUXVlcnkpIHtcbiAgICAgICAgICAgIC8vIFByb2hpYml0IGZ1cnRoZXIgbm90aWZpY2F0aW9ucyB0byB0aGlzIHN1YnNjcmlwdGlvbjpcbiAgICAgICAgICAgIGtiUXVlcnkudW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIC8vIFJlbGVhc2UgdW5uZXNjZXNzYXJ5IG1lbW9yeSB3aGVuIHRoZXJlIGFyZSBubyBtb3JlIHN1YnNjcmlwdGlvbnMgb2YgdGhpcyBxdWVyeSwgYnkgcmVtb3ZpbmcgdGhlIHF1ZXJ5IGl0c2VsZlxuICAgICAgICAgICAgLy8gVG8gdGhhdCBpbiBhIGRlbGF5ZWQgbWFubmVyLCBzbyB0aGF0IGFuIHVuc3Vic2NyaWJlKCkgZm9sbG93ZWQgYnkgYW4gaW1tZWRpYXRlIHN1YnNjcmliZSgpIGRvbid0IGhhdmUgdG8gcmUtcXVlcnkgdGhlIHNlcnZlcjpcbiAgICAgICAgICAgIGlmIChrYlF1ZXJ5LnN1YnNjcmlwdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gU2NoZWR1bGUgZm9yIGdhcmJhZ2UgY29sbGVjdGlvbiBpbiA1IG1pbnV0ZXM6XG4gICAgICAgICAgICAgICAga2JRdWVyeS50aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGtiUXVlcnkgc3RpbGwgaGFzIG5vIHN1YnNjcmlwdGlvbnMgKG5vdCBjZXJ0YWluISBBIG5ldyBzdWJzY3JpYmVyIG1heSBoYXZlIGNvbWUgYWxvbmcuLi4pXG4gICAgICAgICAgICAgICAgICAgIGlmIChrYlF1ZXJ5LnN1YnNjcmlwdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdGlsbCBubyBzdWJzY3JpcHRpb25zIG9uIGl0LCB0aW1lIHRvIHJlbGVhc2Ugc29tZSBtZW1vcnkgYW5kIGZvcmdldCB0aGUgaW4tbWVtb3J5IGNhY2hlIG9mIHRoZSBxdWVyeSByZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnF1ZXJpZXMgPSBfdGhpcy5xdWVyaWVzLmZpbHRlcihmdW5jdGlvbiAocSkgeyByZXR1cm4gcSAhPT0ga2JRdWVyeTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCB0aGlzLnF1ZXJpZXMubGVuZ3RoID4gNTAgP1xuICAgICAgICAgICAgICAgICAgICA1MDAgOiAvLyBEb24ndCBob3N0IHRvbyBtYW55IHF1ZXJpZXMuIEdhcmJhZ2UgY29sbGVjdCB0aGlzIHdpdGhpbiA1MDAgbXNcbiAgICAgICAgICAgICAgICAgICAgNSAqIDYwMDAwKTsgLy8gQWxsb3cgcXVlcnkgaW4gbWVtb3J5IGZvciBhbm90aGVyIDUgbWludXRlc1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gUXVlcnlTZXQ7XG59KCkpO1xuZXhwb3J0IHsgUXVlcnlTZXQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5LXNldC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgZ2V0VGFibGVGcm9tTGFiZWwsIGJyYW5jaFNlbnNpdGl2ZSwgZ2xvYmFsT3AgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IG1lcmdlRGVsdGFzIH0gZnJvbSAnLi9kZWx0YS1tZXJnZSc7XG52YXIgTXV0YXRpb25RdWV1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNdXRhdGlvblF1ZXVlKCkge1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgICAgIHRoaXMuc2F2aW5nUXVldWUgPSBbXTtcbiAgICB9XG4gICAgTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICB0aGlzLnF1ZXVlID0gTXV0YXRpb25RdWV1ZS5tZXJnZSh0aGlzLnF1ZXVlLCBtdXRhdGlvbnMpO1xuICAgIH07XG4gICAgTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUubW92ZVRvU2F2aW5nUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2F2aW5nUXVldWUgPSBNdXRhdGlvblF1ZXVlLm1lcmdlKHRoaXMuc2F2aW5nUXVldWUsIHRoaXMucXVldWUpO1xuICAgICAgICB0aGlzLnF1ZXVlID0gW107XG4gICAgfTtcbiAgICBNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5jbGVhclNhdmluZ1F1ZXVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNhdmluZ1F1ZXVlID0gW107XG4gICAgfTtcbiAgICBNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhdmluZ1F1ZXVlLmNvbmNhdCh0aGlzLnF1ZXVlKTtcbiAgICB9O1xuICAgIE11dGF0aW9uUXVldWUucHJvdG90eXBlLmFmZmVjdHNRdWVyeSA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnksIGluY2x1ZGVzKSB7XG4gICAgICAgIHZhciBtdXRhdGlvbnMgPSB0aGlzLmdldCgpO1xuICAgICAgICBpZiAobXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ub3AgPT09ICdtZXJnZScgfHwgbS5vcCA9PT0gJ2NsZWFyLWJyYW5jaCc7IH0pKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmIChxdWVyeS5pZHMpIHtcbiAgICAgICAgICAgIC8vIEEgcXVlcnkgd2l0aCBcImlkc1wiIGZpbHRlciB3aWxsIGJlIGVhc3kgdG8gZGV0ZWN0IGEgbm8tbWF0Y2ggb246XG4gICAgICAgICAgICByZXR1cm4gbXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIGdsb2JhbE9wKG0pIHx8ICghYnJhbmNoU2Vuc2l0aXZlKG0pIHx8IG0uYnJhbmNoSWQgPT09IHF1ZXJ5LmJyYW5jaElkKSAmJlxuICAgICAgICAgICAgICAgIHF1ZXJ5Lmlkcy5pbmNsdWRlcyhtLmlkKTsgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBtdXRhdGlvbnMgYWZmZWN0IHNhbWUgYnJhbmNoIGFuZCB0YWJsZS4gQ291bGQgYmUgZG9uZSBtb3JlIGZpbmUgZ3JhaW5lZCxcbiAgICAgICAgLy8gYnV0IHRoYXQgd291bGQgb25seSBiZSBhIHN1Ym9wdGltaXphdGlvbi5cbiAgICAgICAgcmV0dXJuIG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5vcCA9PT0gJ2RlbGV0ZScgP1xuICAgICAgICAgICAgICAgIG0udGFibGUgPT09IHRhYmxlIHx8IChpbmNsdWRlcy5zb21lKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gZ2V0VGFibGVGcm9tTGFiZWwodGFibGUsIGxhYmVsKSA9PT0gbS50YWJsZTsgfSkpIDpcbiAgICAgICAgICAgICAgICBnbG9iYWxPcChtKSA/IHRydWUgOlxuICAgICAgICAgICAgICAgICAgICBtLmJyYW5jaElkID09IHF1ZXJ5LmJyYW5jaElkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAobS50YWJsZSA9PT0gdGFibGUgfHwgKG0ub3AgIT09ICd1cGRhdGUnICYmIChbdGFibGVdLmNvbmNhdChpbmNsdWRlcy5tYXAoZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiBnZXRUYWJsZUZyb21MYWJlbCh0YWJsZSwgbGFiZWwpOyB9KSkuc29tZShmdW5jdGlvbiAodGFibGUpIHsgcmV0dXJuIGdldFRhYmxlRnJvbUxhYmVsKG0udGFibGUsIG0uZ3JhcGhQcm9wKSA9PT0gdGFibGU7IH0pKSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE11dGF0aW9uUXVldWUubWVyZ2UgPSBmdW5jdGlvbiAocXVldWUxLCBxdWV1ZTIpIHtcbiAgICAgICAgdmFyIG11dGFibGVRdWV1ZTEgPSBxdWV1ZTEuc2xpY2UoKTtcbiAgICAgICAgdmFyIG11dGFibGVRdWV1ZTIgPSBxdWV1ZTIuc2xpY2UoKTtcbiAgICAgICAgLy9pZiAobXV0YWJsZVF1ZXVlMS5sZW5ndGggPiAwKSBkZWJ1Z2dlcjtcbiAgICAgICAgdmFyIGxlbiA9IHF1ZXVlMS5sZW5ndGg7XG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgIHZhciBtID0gcXVldWUxW2ldO1xuICAgICAgICAgICAgaWYgKG0ub3AgPT09ICd1cGRhdGUnKSB7XG4gICAgICAgICAgICAgICAgdmFyIG92ZXJsYXBwaW5nSWRPcElkeCA9IG11dGFibGVRdWV1ZTIuZmluZEluZGV4KGZ1bmN0aW9uIChuZXdNdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld011dC5vcCA9PT0gJ3VwZGF0ZScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld011dC5icmFuY2hJZCA9PT0gbS5icmFuY2hJZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TXV0LmlkID09PSBtLmlkO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChvdmVybGFwcGluZ0lkT3BJZHggPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICBtdXRhYmxlUXVldWUxW2ldID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgbSwgeyBkZWx0YURvYzogbWVyZ2VEZWx0YXMobS5kZWx0YURvYywgbXV0YWJsZVF1ZXVlMltvdmVybGFwcGluZ0lkT3BJZHhdLmRlbHRhRG9jKSB9KTtcbiAgICAgICAgICAgICAgICAgICAgbXV0YWJsZVF1ZXVlMi5zcGxpY2Uob3ZlcmxhcHBpbmdJZE9wSWR4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG11dGFibGVRdWV1ZTEuY29uY2F0KG11dGFibGVRdWV1ZTIpO1xuICAgIH07XG4gICAgcmV0dXJuIE11dGF0aW9uUXVldWU7XG59KCkpO1xuZXhwb3J0IHsgTXV0YXRpb25RdWV1ZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bXV0YXRpb24tcXVldWUuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IG1lcmdlRGVsdGFzIH0gZnJvbSAnLi4vZGVsdGEtbWVyZ2UnO1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5TXV0YXRpb25zT25EZWx0YXMoYnJhbmNoSWQsIGRlbHRhcywgbXV0YXRpb25zLCBvcHRpbWlzdGljLCB1c2VyRGlzcGxheU5hbWUsIGhhc0FkZGl0aW9uYWxGaWx0ZXIpIHtcbiAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIHN3aXRjaCAobS5vcCkge1xuICAgICAgICAgICAgY2FzZSAnYWRkLXJlbGF0ZWQnOlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gQWRkUmVsYXRlZCBSZXBvTXV0YXRpb25cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIGlmICghaGFzQWRkaXRpb25hbEZpbHRlciAmJiBtLmJyYW5jaElkID09PSBicmFuY2hJZCkge1xuICAgICAgICAgICAgICAgICAgICBkZWx0YXMgPSBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhZGQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUlkOiBtLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldElkOiBtLnJlbGF0ZWREb2MuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG0uZ3JhcGhQcm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZVRhYmxlOiBtLnRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtZXRhOiBvcHRpbWlzdGljID8gJ2FkZGluZycgOiAncGVyc2lzdGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lOiBtLnJlbGF0ZWREb2MubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmlidXRvcjogdXNlckRpc3BsYXlOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICB9XS5jb25jYXQoZGVsdGFzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjbGVhci1icmFuY2gnOlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gQ2xlYXJCcmFuY2ggUmVwb011dGF0aW9uXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICBpZiAobS5icmFuY2hJZCA9PT0gYnJhbmNoSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsdGFzID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBSZXBvTXV0YXRpb25cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgdHlwZSBvZiBtdXRhdGlvbiBjYW4gbm90IGJlIHBlcmZvcm1lZCBvbnRvIGJyYW5jaGVzLiBUaGVyZSdzIG5vIGJyYW5jaElkIHByb3BlcnR5IG9uIG0uXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtZXJnZSc6XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBNZXJnZSBSZXBvTXV0YXRpb25cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIGlmIChtLmJyYW5jaElkID09PSBicmFuY2hJZCkge1xuICAgICAgICAgICAgICAgICAgICBkZWx0YXMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobS50YXJnZXRCcmFuY2hJZCA9PT0gYnJhbmNoSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjaGFuZ2Ugd2lsbCBhcHBlbmQgbmV3IGRlbHRhcyB0byBvdXIgZGVsdGFzIGFycmF5IGJ1dCB3ZSBkb24ndCBrbm93IHdoYXQgd291bGQgY29tZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gTmVlZCB0byByZWZldGNoIGZyb20gc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGltaXN0aWMpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbnVsbCB9OyAvLyBDYWxsZXIgc2hvdWxkIGNoZWNrIGZvciBudWxsIGFuZCByZS1mZXRjaCBkYXRhIGZyb20gc2VydmVyLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3JlbW92ZS1yZWxhdGVkJzpcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZS1SZWxhdGVkIFJlcG9NdXRhdGlvblxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgaWYgKGhhc0FkZGl0aW9uYWxGaWx0ZXIgfHwgbS5icmFuY2hJZCAhPT0gYnJhbmNoSWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgICAgICAgICAgZGVsdGFzID0gW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdyZW1vdmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlSWQ6IG0uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZDogbS5yZWxhdGVkRG9jLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogbS5yZWxhdGVkRG9jLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogbS5ncmFwaFByb3AsXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VUYWJsZTogbS50YWJsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9yOiB1c2VyRGlzcGxheU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlVGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICRtZXRhOiBvcHRpbWlzdGljID8gJ2FkZGluZycgOiAncGVyc2lzdGVkJ1xuICAgICAgICAgICAgICAgICAgICB9XS5jb25jYXQoZGVsdGFzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3VuZG8tbGluayc6XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBVbmRvLUxpbmsgUmVwb011dGF0aW9uXG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICBpZiAobS5icmFuY2hJZCAhPT0gYnJhbmNoSWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaWR4ID0gZGVsdGFzLmZpbmRJbmRleChmdW5jdGlvbiAoZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChkLnR5cGUgPT09ICdhZGQnIHx8IGQudHlwZSA9PT0gJ3JlbW92ZScgfHwgZC50eXBlID09PSAndW5kby1saW5rJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnNvdXJjZUlkID09PSBtLmlkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC50YXJnZXRJZCA9PT0gbS5yZWxhdGVkSWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWR4IDwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIGFuIFwiYWRkXCIgb3IgXCJyZW1vdmVcIiBkZWx0YSB0byBjaGFuZ2U6XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpbWlzdGljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsdGFSZWxhdGlvbiA9IGRlbHRhc1tpZHhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgZXhpc3RpbmcgYWRkL3JlbW92ZSBkZWx0YSBhcyBjdXJyZW5sdHkgYmVpbmcgZGVsZXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzID0gZGVsdGFzLnNsaWNlKDAsIGlkeCkuY29uY2F0KFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0c2xpYl8xLl9fYXNzaWduKHt9LCBkZWx0YVJlbGF0aW9uLCB7ICRtZXRhOiBvcHRpbWlzdGljID8gJ3JlbW92aW5nJyA6ICdwZXJzaXN0ZWQnIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICBdLCBkZWx0YXMuc2xpY2UoaWR4ICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUGVyc2lzdGVkLiBKdXN0IHJlbW92ZSBpdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhcyA9IGRlbHRhcy5zbGljZSgwLCBpZHgpLmNvbmNhdChkZWx0YXMuc2xpY2UoaWR4ICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBSZXBvTXV0YXRpb25cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIGlmIChtLmJyYW5jaElkICE9PSBicmFuY2hJZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpZHggPSBkZWx0YXMuZmluZEluZGV4KGZ1bmN0aW9uIChkZWx0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlbHRhLnR5cGUgPT09ICdtb2RpZnknICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGEudGFyZ2V0SWQgPT09IG0uaWQ7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWR4IDwgMCAmJiAhaGFzQWRkaXRpb25hbEZpbHRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzID0gW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ21vZGlmeScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBtLnRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRJZDogbS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogbS50YXJnZXROYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBtLmRlbHRhRG9jLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRlVGltZTogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzOiBbdXNlckRpc3BsYXlOYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1ldGE6IG9wdGltaXN0aWMgPyAnYWRkaW5nJyA6ICdwZXJzaXN0ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLmNvbmNhdChkZWx0YXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0aW5nRGVsdGFEb2MgPSBkZWx0YXNbaWR4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cmlidXRvcnMgPSBleGlzdGluZ0RlbHRhRG9jLmNvbnRyaWJ1dG9ycy5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250cmlidXRvcnMuaW5jbHVkZXModXNlckRpc3BsYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9ycy5wdXNoKHVzZXJEaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGF0YSA9IG1lcmdlRGVsdGFzKGV4aXN0aW5nRGVsdGFEb2MuZGF0YSwgbS5kZWx0YURvYywgeyByZW1vdmVVbnNldFByb3BzOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvcHRpbWlzdGljICYmIE9iamVjdC5rZXlzKG5ld0RhdGEpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1pdHRlZCBtdXRhdGlvbiB0aGF0IHJlc2V0cyBhIGRlbHRhRG9jLiBSZW1vdmUgdGhlIGRlbHRhRG9jIGVudGlyZWx5OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbHRhcyA9IGRlbHRhcy5zbGljZSgwLCBpZHgpLmNvbmNhdChkZWx0YXMuc2xpY2UoaWR4ICsgMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbW9kaWZ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBtLnRhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0SWQ6IG0uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXROYW1lOiBtLnRhcmdldE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBuZXdEYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZVRpbWU6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cmlidXRvcnM6IGNvbnRyaWJ1dG9ycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtZXRhOiBvcHRpbWlzdGljID8gJ3VwZGF0aW5nJyA6ICdwZXJzaXN0ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5jb25jYXQoZGVsdGFzLnNsaWNlKDAsIGlkeCksIGRlbHRhcy5zbGljZShpZHggKyAxKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGZvciAodmFyIF9pID0gMCwgbXV0YXRpb25zXzEgPSBtdXRhdGlvbnM7IF9pIDwgbXV0YXRpb25zXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBtID0gbXV0YXRpb25zXzFbX2ldO1xuICAgICAgICB2YXIgc3RhdGVfMSA9IF9sb29wXzEobSk7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhdGVfMSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZV8xLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZGVsdGFzO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbHktbXV0YXRpb25zLW9uLWRlbHRhcy5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgSHR0cEVycm9yIH0gZnJvbSAnLi4vLi4va2VkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IGFwcGx5TXV0YXRpb25zT25EZWx0YXMgfSBmcm9tICcuL2FwcGx5LW11dGF0aW9ucy1vbi1kZWx0YXMnO1xudmFyIERlbHRhQ2FjaGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsdGFDYWNoZShnZXRDbGllbnQsIGdldFVzZXIsIGdldFVzZXJEaXNwbGF5TmFtZSkge1xuICAgICAgICB0aGlzLmdldENsaWVudCA9IGdldENsaWVudDtcbiAgICAgICAgdGhpcy5nZXRVc2VyID0gZ2V0VXNlcjtcbiAgICAgICAgdGhpcy5nZXRVc2VyRGlzcGxheU5hbWUgPSBnZXRVc2VyRGlzcGxheU5hbWU7XG4gICAgICAgIHRoaXMubG9va3VwID0ge307XG4gICAgfVxuICAgIERlbHRhQ2FjaGUucHJvdG90eXBlLmFwcGx5TXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9ucywgX2EpIHtcbiAgICAgICAgdmFyIG9wdGltaXN0aWMgPSAoX2EgPT09IHZvaWQgMCA/IHsgb3B0aW1pc3RpYzogZmFsc2UgfSA6IF9hKS5vcHRpbWlzdGljO1xuICAgICAgICAvLyBBcHBseSBtdXRhdGlvbnMgbG9jYWxseSBvbnRvIHRoZSBEZWx0YUNhY2hlIGFuZCBub3RpZnkgdGhlaXIgc3Vic2NyaWJlcnNcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYiA9IE9iamVjdC5rZXlzKHRoaXMubG9va3VwKTsgX2kgPCBfYi5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIHZhciBxdWVyeUtleSA9IF9iW19pXTtcbiAgICAgICAgICAgIHZhciBjYWNoZUVudHJ5ID0gdGhpcy5sb29rdXBbcXVlcnlLZXldO1xuICAgICAgICAgICAgaWYgKGNhY2hlRW50cnkudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAvLyBJbnN0ZWFkIGhlcmU6IFN0b3JlIHRoZSBtdXRhdGlvbnMgb24gY2FjaGVFbnRyeS4gTm8gbWF0dGVyIGlmIGl0IHlldCBoYXMgdmFsdWUgb3Igbm90LlxuICAgICAgICAgICAgICAgIC8vIFRoZW4gYXBwbHkgbXV0YXRpb24gd2hlbmV2ZXIgc3Vic2NyaWJpbmchIChCZXR0ZXIgaGFuZGxpbmcgb2YgbXV0YXRpb25zIHRoYXQgYXJyaXZlcyBiZWZvcmUgZmV0Y2goKSBpcyBkb25lKVxuICAgICAgICAgICAgICAgIC8vIChTZWUgaG93IEkgaGFuZGxlIHRoaXMgaW4gcXVlcnktc2V0LnRzKVxuICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGFwcGx5TXV0YXRpb25zT25EZWx0YXMoY2FjaGVFbnRyeS5xdWVyeS5icmFuY2hJZCwgY2FjaGVFbnRyeS52YWx1ZSwgbXV0YXRpb25zLCBvcHRpbWlzdGljLCB0aGlzLmdldFVzZXJEaXNwbGF5TmFtZSgpLCAhIWNhY2hlRW50cnkucXVlcnkudGFncyk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBtdXRhdGlvbiByZXF1aXJlcyBjYWNoZUVudHJ5IHRvIGJlIHJlZmV0Y2hlZCBmcm9tIHNlcnZlclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGltaXN0aWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbGxlciBoYXMgc3VjY2Vzc2Z1bGx5IHBlcmZvcm1lZCB0aGUgbXV0YXRpb25zIGFuZCBnb3Qgc3VjY2VzcyBiYWNrIGZyb20gc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXQncyBvayB0byByZWZldGNoIHRoZSBkZWx0YXMgZnJvbSBzZXJ2ZXIgbm93OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVFbnRyeS5mZXRjaCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWZ0ZXIgZmV0Y2ggY29tcGxldGVzLCBpdCB3aWxsIG5vdGlmeSB0aGUgc3Vic2NyaWJlcnMuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBjYWNoZUVudHJ5LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlRW50cnkub3B0aW1pc3RpY1ZhbHVlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW1pc3RpYylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlRW50cnkudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgY2FjaGVFbnRyeS5ub3RpZnkobmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVsdGFDYWNoZS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHF1ZXJ5LCBvYnNlcnZlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgY2FjaGVFbnRyeSA9IHRoaXMubG9va3VwW3F1ZXJ5LmJyYW5jaElkICsgcXVlcnkudGFnc107XG4gICAgICAgIGlmICghY2FjaGVFbnRyeSkge1xuICAgICAgICAgICAgY2FjaGVFbnRyeSA9IG5ldyBEZWx0YUNhY2hlRW50cnkodGhpcy5nZXRDbGllbnQoKSwgcXVlcnkpO1xuICAgICAgICAgICAgdGhpcy5sb29rdXBbcXVlcnkuYnJhbmNoSWQgKyBxdWVyeS50YWdzXSA9IGNhY2hlRW50cnk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhY2hlRW50cnkuY2xlYW51cFRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoY2FjaGVFbnRyeS5jbGVhbnVwVGltZXIpO1xuICAgICAgICAgICAgY2FjaGVFbnRyeS5jbGVhbnVwVGltZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNhY2hlRW50cnkuc3Vic2NyaWJlcnMgPSBjYWNoZUVudHJ5LnN1YnNjcmliZXJzLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG8gPSBfYS5vYnNlcnZlcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8gIT09IG9ic2VydmVyO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChjYWNoZUVudHJ5LnN1YnNjcmliZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjYWNoZUVudHJ5LmNsZWFudXBUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlRW50cnkuc3Vic2NyaWJlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIF90aGlzLmxvb2t1cFtxdWVyeS5icmFuY2hJZCArIHF1ZXJ5LnRhZ3NdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY2FjaGVFbnRyeS5zdWJzY3JpYmVycy5wdXNoKHsgb2JzZXJ2ZXI6IG9ic2VydmVyLCBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvbiB9KTtcbiAgICAgICAgaWYgKGNhY2hlRW50cnkudmFsdWUpIHtcbiAgICAgICAgICAgIC8vIFZhbHVlIGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSByZXRyaWV2ZWQgYWxyZWFkeS4gUGljayBmcm9tIGNhY2hlLlxuICAgICAgICAgICAgb2JzZXJ2ZXIoY2FjaGVFbnRyeS5vcHRpbWlzdGljVmFsdWUgfHwgY2FjaGVFbnRyeS52YWx1ZSwgbnVsbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjYWNoZUVudHJ5LmlzRmV0Y2hpbmcpIHtcbiAgICAgICAgICAgIC8vIEEgdmFsdWUgaXMgb24gaXRzIHdheS4gU2l0IGJhY2sgYW5kIHJlbGF4LiBBbGwgcmVnaXN0ZXJlZFxuICAgICAgICAgICAgLy8gb2JzZXJ2ZXJzIChpbmNsdWRpbmcgdGhpcyBvbmUpIHdpbGwgYmUgbm90aWZpZWQgd2hlbiBkYXRhIGFycml2ZXNcbiAgICAgICAgICAgIC8vIG9yIGZhaWxzLlxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGNhY2hlRW50cnkuZXJyb3IpIHtcbiAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGNhY2hlRW50cnkuZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWNoZUVudHJ5LmZldGNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBEZWx0YUNhY2hlO1xufSgpKTtcbmV4cG9ydCB7IERlbHRhQ2FjaGUgfTtcbnZhciBEZWx0YUNhY2hlRW50cnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVsdGFDYWNoZUVudHJ5KGNsaWVudCwgcXVlcnkpIHtcbiAgICAgICAgdGhpcy5mZXRjaE9wZXJhdGlvbklkID0gMDsgLy8gTWFrZXMgc3VyZSBhIHJlLWZldGNoIHdpbGwgZGlzY2FyZCB0aGUgcmVzdWx0IGZyb20gYW55IG9uZ29pbmcgZmV0Y2guXG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgICAgdGhpcy5vcHRpbWlzdGljVmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJzID0gW107XG4gICAgICAgIHRoaXMuaXNGZXRjaGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmNsZWFudXBUaW1lciA9IG51bGw7XG4gICAgfVxuICAgIERlbHRhQ2FjaGVFbnRyeS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBmZXRjaE9wZXJhdGlvbklkID0gKyt0aGlzLmZldGNoT3BlcmF0aW9uSWQ7XG4gICAgICAgIHRoaXMuaXNGZXRjaGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZmV0Y2hGcm9tU2VydmVyKCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIC8vIFN1Y2Nlc3NcbiAgICAgICAgICAgIGlmIChmZXRjaE9wZXJhdGlvbklkID09PSBfdGhpcy5mZXRjaE9wZXJhdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNGZXRjaGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZhbHVlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGIuZGF0ZVRpbWUgLSBhLmRhdGVUaW1lOyB9KTsgLy8gTGF0ZXN0IGZpcnN0XG4gICAgICAgICAgICAgICAgX3RoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5vcHRpbWlzdGljVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZnkodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEZhaWxcbiAgICAgICAgICAgIGlmIChmZXRjaE9wZXJhdGlvbklkID09PSBfdGhpcy5mZXRjaE9wZXJhdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNGZXRjaGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgICAgICAgX3RoaXMuZmFpbChlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRGVsdGFDYWNoZUVudHJ5LnByb3RvdHlwZS5mZXRjaEZyb21TZXJ2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMucXVlcnkuYnJhbmNoSWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWx0YXMgb25seSBhdmFpbGFibGUgb24gYnJhbmNoZXMnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2xpZW50Lmh0dHAuZ2V0KCdkZWx0YXMnLCB0aGlzLnF1ZXJ5KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgPj0gMzAwIHx8IHJlcy5zdGF0dXMgPCAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIERlbHRhQ2FjaGVFbnRyeS5wcm90b3R5cGUubm90aWZ5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLnN1YnNjcmliZXJzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIF9iID0gX2FbX2ldLCBvYnNlcnZlciA9IF9iLm9ic2VydmVyLCBzdWJzY3JpcHRpb24gPSBfYi5zdWJzY3JpcHRpb247XG4gICAgICAgICAgICBvYnNlcnZlcih2YWx1ZSwgbnVsbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRGVsdGFDYWNoZUVudHJ5LnByb3RvdHlwZS5mYWlsID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHZhciBjb3B5ID0gdGhpcy5zdWJzY3JpYmVycy5zbGljZSgpO1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgY29weV8xID0gY29weTsgX2kgPCBjb3B5XzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBjb3B5XzFbX2ldLCBvYnNlcnZlciA9IF9hLm9ic2VydmVyLCBzdWJzY3JpcHRpb24gPSBfYS5zdWJzY3JpcHRpb247XG4gICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIERlbHRhQ2FjaGVFbnRyeTtcbn0oKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWx0YS1jYWNoZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTXV0YXRpb25RdWV1ZSB9IGZyb20gJy4vbXV0YXRpb24tcXVldWUnO1xuaW1wb3J0IHsgQmF0Y2hSdW5uZXIgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgdGFibGVzIH0gZnJvbSAna2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb24nO1xuaW1wb3J0IHsgQ2FjaGVCdXN0IH0gZnJvbSAnLi9jYWNoZS1idXN0JztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlJztcbmltcG9ydCB7IERlbHRhQ2FjaGUgfSBmcm9tICcuL2RlbHRhLWNvbGxlY3Rpb24vZGVsdGEtY2FjaGUnO1xudmFyIEtlZEJhY2tlbmRXcml0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZFdyaXRlcihtdXRhdGlvblF1ZXVlLCBxdWVyeVNldCwgZ2V0Q2xpZW50LCBnZXRVc2VyLCBnZXRVc2VyRGlzcGxheU5hbWUpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlID0gbXV0YXRpb25RdWV1ZTtcbiAgICAgICAgdGhpcy5xdWVyeVNldCA9IHF1ZXJ5U2V0O1xuICAgICAgICB0aGlzLmdldENsaWVudCA9IGdldENsaWVudDtcbiAgICAgICAgdGhpcy5nZXRVc2VyID0gZ2V0VXNlcjtcbiAgICAgICAgdGhpcy5nZXRVc2VyRGlzcGxheU5hbWUgPSBnZXRVc2VyRGlzcGxheU5hbWU7XG4gICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzU2F2aW5nUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY3VycmVudFZlcnNpb24gPSAwO1xuICAgICAgICB0aGlzLnBlcnNpc3RlZFZlcnNpb24gPSBuZXcgRW1pdHRlcigwKTtcbiAgICAgICAgdGhpcy5lcnJvclN1YnNjcmliZXJzID0gW107XG4gICAgICAgIHRoaXMuc3RhdGVTdWJzY3JpYmVycyA9IFtdO1xuICAgICAgICB0aGlzLmRlbHRhQ2FjaGUgPSBuZXcgRGVsdGFDYWNoZShnZXRDbGllbnQsIGdldFVzZXIsIGdldFVzZXJEaXNwbGF5TmFtZSk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZSwgXCJpc1NhdmluZ1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gISF0aGlzLl9pc1NhdmluZ1Byb21pc2U7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZSwgXCJpc0VkaXRlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpLmxlbmd0aCA+IDA7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5lcnJvclN1YnNjcmliZXJzLnB1c2goY2FsbGJhY2spO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaWJlcnMucHVzaChjYWxsYmFjayk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5lcnJvclN1YnNjcmliZXJzID0gdGhpcy5lcnJvclN1YnNjcmliZXJzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcyAhPT0gY2FsbGJhY2s7IH0pO1xuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaWJlcnMgPSB0aGlzLnN0YXRlU3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzICE9PSBjYWxsYmFjazsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5kaXNwYXRjaEVycm9yID0gZnVuY3Rpb24gKGVycm9yLCByZXRyeWFibGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5lcnJvclN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCByZXRyeWFibGUsIF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChfKSB7IH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5kaXNwYXRjaFN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF8pIHsgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLm11dGF0ZSA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIGRlYm91bmNlKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZS5hZGQobXV0YXRpb25zKTtcbiAgICAgICAgKyt0aGlzLmN1cnJlbnRWZXJzaW9uO1xuICAgICAgICB0aGlzLmRpc3BhdGNoU3RhdGVDaGFuZ2UoKTtcbiAgICAgICAgdGhpcy5xdWVyeVNldC5ub3RpZnlTdWJzY3JpYmVycygpO1xuICAgICAgICB0aGlzLmRlbHRhQ2FjaGUuYXBwbHlNdXRhdGlvbnModGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpLCB7IG9wdGltaXN0aWM6IHRydWUgfSk7XG4gICAgICAgIGlmICghdGhpcy5faXNTYXZpbmdQcm9taXNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZW91dElkKVxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0SWQpO1xuICAgICAgICAgICAgdGhpcy5fdGltZW91dElkID0gc2V0VGltZW91dCh0aGlzLnNhdmUuYmluZCh0aGlzKSwgZGVib3VuY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGlzU2F2aW5nLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nLCBiZWNhc2UgaXQgd2lsbCByZS1jaGVjayBpZiBhZGRpdGlvbmFsXG4gICAgICAgIC8vIG11dGF0aW9ucyBoYXZlIGNvbWUsIHdoZW4gc2F2aW5nIGlzIGRvbmUuXG4gICAgfTtcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5yZXRyeVNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhdmUoKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLndhaXRGb3JWZXJzaW9uVG9QZXJzaXN0ID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcGVyc2lzdGVkVmVyc2lvbjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBlcnNpc3RlZFZlcnNpb24ubG9hZCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdGVkVmVyc2lvbiA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHBlcnNpc3RlZFZlcnNpb24gPCB2ZXJzaW9uKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoKTsgLy8gQmUgbW9yZSBlYWdlciB0byBzYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBlcnNpc3RlZFZlcnNpb24uZmlsdGVyKGZ1bmN0aW9uIChwZXJzaXN0ZWRWZXJzaW9uKSB7IHJldHVybiBwZXJzaXN0ZWRWZXJzaW9uID49IHZlcnNpb247IH0pLmxvYWQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXRJZClcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0SWQpO1xuICAgICAgICBpZiAodGhpcy5faXNTYXZpbmdQcm9taXNlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzU2F2aW5nUHJvbWlzZTtcbiAgICAgICAgaWYgKCF0aGlzLmlzRWRpdGVkKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pc1NhdmluZ1Byb21pc2UgPSB0aGlzLl9zYXZlKCk7XG4gICAgICAgIHRoaXMuX2lzU2F2aW5nUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7IH0pLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2lzU2F2aW5nUHJvbWlzZSA9IG51bGw7IH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTYXZpbmdQcm9taXNlO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUuX3NhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG11dGF0aW9ucywgdmVyc2lvbiwgbXV0YXRpb25SZXF1ZXN0cywgcmVzXzEsIGV0YWdNdXRhdGlvbnMsIGVycm9yXzE7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25zID0gdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IHRoaXMuY3VycmVudFZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUubW92ZVRvU2F2aW5nUXVldWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uUmVxdWVzdHMgPSB0aGlzLm1hcE11dGF0aW9ucyhtdXRhdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDYsIDExLCAxMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRDbGllbnQoKS5iYXRjaChtdXRhdGlvblJlcXVlc3RzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc18xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXRhZ011dGF0aW9ucyA9IE9iamVjdC5rZXlzKHJlc18xLm5ld0V0YWdzKS5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wOiAndXBkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFEb2M6IHsgJGV0YWc6IHJlc18xLm5ld0V0YWdzW2lkXSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE5hbWU6IG51bGwgLy8gV2UgZG9uJ3QgaGF2ZSB0aGUgdGFyZ2V0IG5hbWUuIEJ1dCB0aGlzIG11dGF0aW9uIHdvbid0IGJlIHZpc2libGUgaW4gYSBEZWx0YUNvbGxlY3Rpb24gYW55d2F5LCBzbyBpdCB3b250IGJlIHVzZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnZhbGlkYXRlIGNhY2hlXG4gICAgICAgICAgICAgICAgICAgICAgICBDYWNoZUJ1c3QuaW52YWxpZGF0ZUNhY2hlKG11dGF0aW9uUmVxdWVzdHMsIHRoaXMuZ2V0VXNlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1taXQgbXV0YXRpb25zIGFsb25nIHdpdGggZXRhZ011dGF0aW9ucyBpbnRvIHF1ZXJpZXMgY2FjaGVkIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVyc2lzdGVkVmVyc2lvbi5kaXNwYXRjaCh2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsdGFDYWNoZS5hcHBseU11dGF0aW9ucyhtdXRhdGlvbnMsIHsgb3B0aW1pc3RpYzogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnF1ZXJ5U2V0LmNvbW1pdE11dGF0aW9ucyhNdXRhdGlvblF1ZXVlLm1lcmdlKG11dGF0aW9ucywgZXRhZ011dGF0aW9ucyksIHZlcnNpb24pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gT24gc3VjY2VzcywgY2xlYXIgc2F2aW5nIHF1ZXVlIGFzIHRoZSBtdXRhdGlvbnMgd2lsbCBub3cgYmUgY29tbWl0dGVkIHRvIGFsbCBxdWVyeSdzIGRhdGEgaW5zdGVhZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZS5jbGVhclNhdmluZ1F1ZXVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoU3RhdGVDaGFuZ2UoKTsgLy8gaXNFZGl0ZWQgbWF5IGhhdmUgdHVybmVkIHRvIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGaW5hbGx5LCBub3RpZnkgc3Vic2NyaWJlcnMgc28gdGhhdCB2aWV3cyBnZXQgdXBkYXRlZCB3aXRoIGNvbW1pdHRlZCByZXN1bHRzXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U2V0Lm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCkubGVuZ3RoID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkaXRpb25hbCBtdXRhdGlvbnMgaGFwcGVuZCB3aGlsZSB3ZSB3ZXJlIHNhdmluZy4gSGFuZGxlIHRoZW0gYXMgd2VsbC5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX3NhdmUoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZGl0aW9uYWwgbXV0YXRpb25zIGhhcHBlbmQgd2hpbGUgd2Ugd2VyZSBzYXZpbmcuIEhhbmRsZSB0aGVtIGFzIHdlbGwuXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFszIC8qYnJlYWsqLywgMTJdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJzaXN0ZWRWZXJzaW9uLmRpc3BhdGNoRXJyb3IoZXJyb3JfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShlcnJvcl8xICYmIGVycm9yXzEubmFtZSAmJiBlcnJvcl8xLm5hbWUuc3RhcnRzV2l0aChcImh0dHA0XCIpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBY2Nlc3MgQ29udHJvbCBkZW5pZWQsIGJhZCByZXF1ZXN0IG9yIHNpbWlsYXIuIFRocm93IG11dGF0aW9ucyBhd2F5LlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEVycm9yKGVycm9yXzEsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZS5jbGVhclNhdmluZ1F1ZXVlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoU3RhdGVDaGFuZ2UoKTsgLy8gaXNFZGl0ZWQgbWF5IGhhdmUgdHVybmVkIHRvIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnF1ZXJ5U2V0Lm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCkubGVuZ3RoID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG8gaG8hIEFkZGl0aW9uYWwgbXV0YXRpb25zIGhhcHBlbmQgd2hpbGUgd2Ugd2VyZSBzYXZpbmcuIEhhbmRsZSB0aGVtIGFsb25lLiBUSGV5IG1pZ2h0IGJlIG1vcmUgbHVja3kuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLl9zYXZlKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIbyBobyEgQWRkaXRpb25hbCBtdXRhdGlvbnMgaGFwcGVuZCB3aGlsZSB3ZSB3ZXJlIHNhdmluZy4gSGFuZGxlIHRoZW0gYWxvbmUuIFRIZXkgbWlnaHQgYmUgbW9yZSBsdWNreS5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMgLypicmVhayovLCAxMF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFcnJvcihlcnJvcl8xLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTA7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbMyAvKmJyZWFrKi8sIDEyXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3IC8qZW5kZmluYWxseSovXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLm1hcE11dGF0aW9ucyA9IGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcbiAgICAgICAgdmFyIGJyID0gbmV3IEJhdGNoUnVubmVyKCk7XG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG0ub3ApIHtcbiAgICAgICAgICAgICAgICBjYXNlICd1cGRhdGUnOlxuICAgICAgICAgICAgICAgICAgICBici51cGRhdGUobS50YWJsZSwgbS5pZCwgbS5kZWx0YURvYywgbS5icmFuY2hJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FkZC1yZWxhdGVkJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtLnJlbGF0ZWREb2MuJGV0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vICRldGFnIG1lYW5zIHRoaXMgaXMgYSBuZXcgZG9jdW1lbnQuIEFkZCBpdCBiZWZvcmUgbGlua2luZyB0byBpdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyLmFkZCh0YWJsZXNbbS50YWJsZV0ucmVsYXRpb25zaGlwc1ttLmdyYXBoUHJvcF0sIG0ucmVsYXRlZERvYywgbS5icmFuY2hJZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnIubGluazIobS50YWJsZSwgbS5pZCwgbS5ncmFwaFByb3AsIG0ucmVsYXRlZERvYy5pZCwgbS5icmFuY2hJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JlbW92ZS1yZWxhdGVkJzpcbiAgICAgICAgICAgICAgICAgICAgYnIudW5saW5rMihtLnRhYmxlLCBtLmlkLCBtLmdyYXBoUHJvcCwgbS5yZWxhdGVkRG9jLmlkLCBtLmJyYW5jaElkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndW5kby1saW5rJzpcbiAgICAgICAgICAgICAgICAgICAgYnIudW5kb0xpbmsobS50YWJsZSwgbS5pZCwgbS5ncmFwaFByb3AsIG0ucmVsYXRlZElkLCBtLmJyYW5jaElkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgICAgICAgICAgYnIuZGVsZXRlKG0udGFibGUsIG0uaWQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjbGVhci1icmFuY2gnOlxuICAgICAgICAgICAgICAgICAgICBici5jbGVhckJyYW5jaChtLmJyYW5jaElkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWVyZ2UnOlxuICAgICAgICAgICAgICAgICAgICBici5tZXJnZShtLmJyYW5jaElkLCBtLnRhcmdldEJyYW5jaElkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gYnIubXV0YXRpb25SZXF1ZXN0cztcbiAgICB9O1xuICAgIHJldHVybiBLZWRCYWNrZW5kV3JpdGVyO1xufSgpKTtcbmV4cG9ydCB7IEtlZEJhY2tlbmRXcml0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlZGJhY2tlbmQtd3JpdGVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi4vLi4vb2JzZXJ2YWJsZSc7XG52YXIgRGVsdGFDb2xsZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKERlbHRhQ29sbGVjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWx0YUNvbGxlY3Rpb24oZGVsdGFDYWNoZSwgcXVlcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBfdGhpcy5kZWx0YUNhY2hlLnN1YnNjcmliZShxdWVyeSwgb2JzZXJ2ZXIpOyB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZWx0YUNhY2hlID0gZGVsdGFDYWNoZTtcbiAgICAgICAgX3RoaXMucXVlcnkgPSBxdWVyeTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBEZWx0YUNvbGxlY3Rpb24ucHJvdG90eXBlLnRhZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0YWdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB0YWdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBEZWx0YUNvbGxlY3Rpb24odGhpcy5kZWx0YUNhY2hlLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLnF1ZXJ5LCB7IHRhZ3M6IHRhZ3MgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIERlbHRhQ29sbGVjdGlvbjtcbn0oQ29sbGVjdGlvbikpO1xuZXhwb3J0IHsgRGVsdGFDb2xsZWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWx0YS1jb2xsZWN0aW9uLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyB0YWJsZXMgfSBmcm9tICdrZWRiYWNrZW5kLXNjaGVtYS9zY2hlbWEuanNvbic7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ29sbGVjdGlvbiB9IGZyb20gJy4va2VkYmFja2VuZC1jb2xsZWN0aW9uJztcbmltcG9ydCB7IFF1ZXJ5U2V0IH0gZnJvbSAnLi9xdWVyeS1zZXQnO1xuaW1wb3J0IHsgTXV0YXRpb25RdWV1ZSB9IGZyb20gJy4vbXV0YXRpb24tcXVldWUnO1xuaW1wb3J0IHsgS2VkQmFja2VuZFdyaXRlciB9IGZyb20gJy4va2VkYmFja2VuZC13cml0ZXInO1xuaW1wb3J0IHsgRGVsdGFDb2xsZWN0aW9uIH0gZnJvbSAnLi9kZWx0YS1jb2xsZWN0aW9uL2RlbHRhLWNvbGxlY3Rpb24nO1xudmFyIEtlZEJhY2tlbmRSZXBvID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRSZXBvKGdldENsaWVudCwgZ2V0VXNlciwgZ2V0VXNlckRpc3BsYXlOYW1lLCBkZWZhdWx0UXVlcnlPcHRpb25zLCBtdXRhdGlvblF1ZXVlLCBxdWVyeVNldCwgd3JpdGVyLCBjYWNoZU9wdGltaXplZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmdldENsaWVudCA9IGdldENsaWVudDtcbiAgICAgICAgdGhpcy5nZXRVc2VyID0gZ2V0VXNlcjtcbiAgICAgICAgdGhpcy5nZXRVc2VyRGlzcGxheU5hbWUgPSBnZXRVc2VyRGlzcGxheU5hbWU7XG4gICAgICAgIHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucyA9IGRlZmF1bHRRdWVyeU9wdGlvbnM7XG4gICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IG11dGF0aW9uUXVldWU7XG4gICAgICAgIHRoaXMucXVlcnlTZXQgPSBxdWVyeVNldDtcbiAgICAgICAgdGhpcy53cml0ZXIgPSB3cml0ZXI7XG4gICAgICAgIHRoaXMuY2FjaGVPcHRpbWl6ZWQgPSBjYWNoZU9wdGltaXplZDtcbiAgICAgICAgaWYgKCFkZWZhdWx0UXVlcnlPcHRpb25zKVxuICAgICAgICAgICAgdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zID0ge307XG4gICAgICAgIGlmICghbXV0YXRpb25RdWV1ZSlcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IG5ldyBNdXRhdGlvblF1ZXVlKCk7XG4gICAgICAgIGlmICghcXVlcnlTZXQpXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5U2V0ID0gbmV3IFF1ZXJ5U2V0KHRoaXMubXV0YXRpb25RdWV1ZSk7XG4gICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgdGhpcy53cml0ZXIgPSBuZXcgS2VkQmFja2VuZFdyaXRlcih0aGlzLm11dGF0aW9uUXVldWUsIHRoaXMucXVlcnlTZXQsIGdldENsaWVudCwgZ2V0VXNlciwgZ2V0VXNlckRpc3BsYXlOYW1lKTtcbiAgICAgICAgT2JqZWN0LmtleXModGFibGVzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkge1xuICAgICAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBuZXcgS2VkQmFja2VuZENvbGxlY3Rpb24oX3RoaXMsIHRhYmxlLCBkZWZhdWx0UXVlcnlPcHRpb25zIHx8IHt9KTtcbiAgICAgICAgICAgIGlmIChjYWNoZU9wdGltaXplZCkge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLmNhY2hlT3B0aW1pemVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpc1t0YWJsZV0gPSBjb2xsZWN0aW9uO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kZWx0YXMgPSBuZXcgRGVsdGFDb2xsZWN0aW9uKHRoaXMud3JpdGVyLmRlbHRhQ2FjaGUsIHtcbiAgICAgICAgICAgIGJyYW5jaElkOiB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQgLy8gSWYgYnJhbmNoSWQgaXMgdW5kZWZpbmVkLiBEZWx0YUNvbGxlY3Rpb24gd2lsbCByZXNwb25kIHdpdGggRXJyb3Igb24gc3Vic2NyaWJlKClcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS50YWJsZSA9IGZ1bmN0aW9uICh0YWJsZU5hbWUpIHtcbiAgICAgICAgdmFyIGNvbGxlY3Rpb24gPSBuZXcgS2VkQmFja2VuZENvbGxlY3Rpb24odGhpcywgdGFibGVOYW1lLCB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5jYWNoZU9wdGltaXplZClcbiAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLmNhY2hlT3B0aW1pemVkKCk7XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLl9jbG9uZSA9IGZ1bmN0aW9uIChxdWVyeU9wdGlvbnMsIGNhY2hlT3B0aW1pemVkKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IG5ldyBLZWRCYWNrZW5kUmVwbyh0aGlzLmdldENsaWVudCwgdGhpcy5nZXRVc2VyLCB0aGlzLmdldFVzZXJEaXNwbGF5TmFtZSwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zLCBxdWVyeU9wdGlvbnMpLCB0aGlzLm11dGF0aW9uUXVldWUsIHRoaXMucXVlcnlTZXQsIHRoaXMud3JpdGVyLCBjYWNoZU9wdGltaXplZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5jYWNoZU9wdGltaXplZCA6IGNhY2hlT3B0aW1pemVkKTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLmJyYW5jaCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvbmUoeyBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUucm9sZSA9IGZ1bmN0aW9uIChyb2xlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9uZSh7IHJvbGU6IHJvbGUgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUub3B0aW1pemVDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb25lKHt9LCB0cnVlKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5jbGVhckJyYW5jaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY2xlYXIgbWFzdGVyIGJyYW5jaFwiKTtcbiAgICAgICAgdGhpcy53cml0ZXIubXV0YXRlKFt7IG9wOiAnY2xlYXItYnJhbmNoJywgYnJhbmNoSWQ6IHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucy5icmFuY2hJZCB9XSwgMCk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAodGFyZ2V0QnJhbmNoSWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbWVyZ2UgZnJvbSBtYXN0ZXIgYnJhbmNoXCIpO1xuICAgICAgICB0aGlzLndyaXRlci5tdXRhdGUoW3sgb3A6ICdtZXJnZScsIGJyYW5jaElkOiB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkOiB0YXJnZXRCcmFuY2hJZCB9XSwgMCk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUuc2F2ZU5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy53cml0ZXIud2FpdEZvclZlcnNpb25Ub1BlcnNpc3QodGhpcy53cml0ZXIuY3VycmVudFZlcnNpb24pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBLZWRCYWNrZW5kUmVwbztcbn0oKSk7XG5leHBvcnQgeyBLZWRCYWNrZW5kUmVwbyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkYmFja2VuZC1yZXBvLmpzLm1hcCIsImltcG9ydCBlbnYgZnJvbSAnLi9LRUQuZW52JztcbmltcG9ydCB7IEtlZEJhY2tlbmRSZXBvIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcbmltcG9ydCB7IGdldEdsb2JhbElkLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IGNmZyBmcm9tICcuL0tFRC5jZmcnO1xuaW1wb3J0IHsgU2Nob29sLCBCcmFuY2ggfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XG5cbmV4cG9ydCBjb25zdCBkYiA9IG5ldyBLZWRCYWNrZW5kUmVwbyhcbiAgKCk9PmVudi5rZWRCYWNrZW5kQ2xpZW50LFxuICAoKT0+ZW52LmN1cnJlbnRVc2VyID9cbiAgICBlbnYuY3VycmVudFVzZXIubWFpbCA6XG4gICAgXCJcIixcbiAgKCk9PmVudi5jdXJyZW50VXNlciA/XG4gICAgZW52LmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lIHx8IGVudi5jdXJyZW50VXNlci5tYWlsIDpcbiAgICBcIlwiKTtcblxuZXhwb3J0IGNvbnN0IGdsb2JhbElkID0gZ2V0R2xvYmFsSWQoY2ZnLktFRF9SRUFMTSk7XG5leHBvcnQgY29uc3QgU2Nob29scyA9IHtcbiAgc3RhbmRhcmRTY2hvb2w6IGRiLnNjaG9vbHMubmFtZShcInN0YW5kYXJkXCIpLmNhY2hlT3B0aW1pemVkKCkuc2luZ2xlKCksXG4gIGdldCBteVNjaG9vbCAoKSB7IHJldHVybiBkYi5zY2hvb2xzLm5hbWUoZW52LmN1cnJlbnRVc2VyLnNjaG9vbCkuY2FjaGVPcHRpbWl6ZWQoKS5zaW5nbGUoKTsgfVxufTtcbmV4cG9ydCBjb25zdCBDb3Vyc2VJbnN0YW5jZXMgPSB7XG4gIGdldEJyYW5jaElkKHNjaG9vbDogVmFsdWU8U2Nob29sPiwgY291cnNlSWQ6IHN0cmluZykge1xuICAgIHJldHVybiBzY2hvb2wuc3dpdGNoTWFwKHNjaG9vbCA9PlxuICAgICAgZGIuYnJhbmNoZXNcbiAgICAgICAgLmhhc0VkZ2VzRnJvbShbc2Nob29sLm9mZmljaWFsQnJhbmNoSWRdKVxuICAgICAgICAubmFtZShcImRyYWZ0XCIpXG4gICAgICAgIC50YWdzKGNvdXJzZUlkKVxuICAgICAgICAuaWRzT25seSgpXG4gICAgICAgIC5tYXAoKHtpZH0pID0+IGlkKVxuICAgICAgICAudG9WYWx1ZSgpXG4gICAgICAgIC5tYXAoaWRzID0+IGlkcy5sZW5ndGggPiAwID8gaWRzWzBdIDogdW5kZWZpbmVkKSk7XG4gIH0sXG5cbiAgLyoqIEdldCBhIERSQUZUIGJyYW5jaCBmb3IgZ2l2ZW4gY291cnNlIElEIGFuZCBnaXZlbiBzY2hvb2wuXG4gICAqIElmIHRoZXJlIGlzIG5vdCB5ZXQgc3VjaCBhIGJyYW5jaCwgY3JlYXRlIGl0IHVzaW5nIG11dGF0aW9uc09uRW1wdHkoKSB3aGljaCB3aWxsXG4gICAqIGxlYWQgdG8gdGhlIEMjIGNvZGUgRG9jdW1lbnRSZXBvc2l0b3J5LlJlYWRPck11dGF0ZSgpIHZpYSBEb2N1bWVudENvbnRyb2xsZXIuXG4gICAqL1xuICBnZXRPckNyZWF0ZUJyYW5jaElkKHNjaG9vbDogVmFsdWU8U2Nob29sPiwgY291cnNlSWQ6IHN0cmluZykge1xuICAgIHJldHVybiBkYi5jb3Vyc2VJbnN0YW5jZXMuaWRzT25seSgpLmlkKGNvdXJzZUlkKS5zd2l0Y2hNYXAoKCk9PiAvLyBUSGlzIGZpcnN0IGxpbmUgdmVyaWZpZXMgY291cnNlIGV4aXN0cy4gSWYgZGVsZXRlZCwgZG9uJ3QgdHJ5IHRvIHJlY3JlYXRlIGl0cyBicmFuY2ghXG4gICAgICBzY2hvb2wuc3dpdGNoTWFwKHNjaG9vbCA9PiBcbiAgICAgIGRiLmJyYW5jaGVzXG4gICAgICAgIC5oYXNFZGdlc0Zyb20oW3NjaG9vbC5vZmZpY2lhbEJyYW5jaElkXSlcbiAgICAgICAgLm5hbWUoXCJkcmFmdFwiKVxuICAgICAgICAudGFncyhjb3Vyc2VJZClcbiAgICAgICAgLmlkc09ubHkoKVxuICAgICAgICAubXV0YXRpb25zT25FbXB0eSh0eCA9PiB7XG4gICAgICAgICAgLy8gVGhlc2UgMiBtdXRhdGlvbnMgd2lsbCBvY2N1ciBzZXJ2ZXIgc2lkZSwgYXRvbWljYWxseS5cbiAgICAgICAgICAvLyBXaWxsIGJlIHNlbnQgb24gZWFjaCByZXF1ZXN0IGluIHRoZSBxdWVyeSwgYnV0IHdpbGwgb25seSBleGVjdXRlIGlmIHF1ZXJ5IHJlc3VsdHMgaW4gemVybyBpdGVtcy5cbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiU2Nob29sOlwiLCBzY2hvb2wpO1xuICAgICAgICAgIGNvbnN0IGlkID0gY3JlYXRlVVVJRCgpO1xuICAgICAgICAgIHR4LmFkZChcImJyYW5jaGVzXCIsIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgYWNsOiBbXG4gICAgICAgICAgICAgIFwicm9sZTpVU0VSOlJcIixcbiAgICAgICAgICAgICAgYHNjaG9vbFJvbGU6JHtzY2hvb2wubmFtZX0vRU1QTE9ZRUU6U2BcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBuYW1lOiAnZHJhZnQnLFxuICAgICAgICAgICAgc2Nob29sSWQ6IHNjaG9vbC5pZCxcbiAgICAgICAgICAgIHRyZWVQYXJlbnRJZDogc2Nob29sLm9mZmljaWFsQnJhbmNoSWQsXG4gICAgICAgICAgICB0YWdzOiBbY291cnNlSWRdXG4gICAgICAgICAgfSBhcyBCcmFuY2gpO1xuICAgICAgICAgIC8vIEFwcHJvdmluZyB0aGUgYnJhbmNoIG1ha2VzIHN1cmUgdGhhdCBpdCB3YXMgY3JlYXRlZCBieSBhbiBFTVBMT1lFRSBvbiBnaXZlbiBzY2hvb2wuXG4gICAgICAgICAgdHgubGluazIoXCJicmFuY2hlc1wiLCBzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZCwgXCJhcHByb3ZlZENoaWxkcmVuXCIsIGlkKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnNpbmdsZSgpXG4gICAgICAgIC5tYXAoKHtpZH0pID0+IGlkKSkpO1xuICB9LFxuXG4gIGdldEFsbERlc2NlbmRhbnRJZHMoY291cnNlSWQ6IHN0cmluZykge1xuICAgIHJldHVybiBkYi5jb3Vyc2VCbG9ja3MudGFncyhjb3Vyc2VJZCkuaWRzT25seSgpLmNvbmNhdChcbiAgICAgIGRiLmNvdXJzZUNvbnRlbnRzLnRhZ3MoY291cnNlSWQpLmlkc09ubHkoKSkuY29uY2F0KFxuICAgICAgZGIuY291cnNlVGFicy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkpLmNvbmNhdChcbiAgICAgIGRiLnRhc2tzLnRhZ3MoY291cnNlSWQpLmlkc09ubHkoKSlcbiAgICAgIC5tYXAoeCA9PiB4LmlkKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgKGNvbW1hbmQsIHZhbHVlID0gbnVsbCkgPT4ge1xuICBkb2N1bWVudC5leGVjQ29tbWFuZChjb21tYW5kLCBmYWxzZSwgdmFsdWUpXG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGpRdWVyeTsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBTcGlubmVyID0gKCk9PiA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYSBmYS1zcGlubmVyIGZhLXNwaW5cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+Jm5ic3A7PC9zcGFuPjtcbiIsImltcG9ydCB7IEFjY2Vzc0NsYWltLCBEb2N1bWVudEFjY2VzcywgaGFzQWNjZXNzIGFzIF9oYXNBY2Nlc3MsIEFjY2Vzc1JpZ2h0IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgZ2V0VXNlckNsYWltcyBmcm9tICcuL2dldC11c2VyLWNsYWltcyc7XG5pbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nLCBnZW5lcmF0ZVF1ZXJ5U3RyaW5nIH0gZnJvbSBcIi4uL3V0aWxzL3F1ZXJ5LXN0cmluZ1wiO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmV4cG9ydCB7IGdldFVzZXJDbGFpbXMgfTtcblxuZXhwb3J0IGNvbnN0IElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TID0gW1xuICBcInVzZXJcIixcbiAgXCJyb2xlXCIsXG4gIFwic2Nob29sXCIsXG4gIFwiZGVidWdcIixcbiAgXCJ0ZXN0VmVyc2lvblwiLFxuICBcInRlc3R2ZXJzaW9uXCIsXG4gIFwiZmVhdHVyZXNcIixcbiAgXCJzY2hvb2xUeXBlXCIsXG4gIFwic2Nob29sdHlwZVwiXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0FjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50LCByZXF1ZXN0ZWRSaWdodDogQWNjZXNzUmlnaHQpIHtcbiAgdmFyIGNsYWltcyA9IGdldFVzZXJDbGFpbXModXNlcik7XG4gIGlmIChyZXF1ZXN0ZWRSaWdodCAhPT0gJ1InICYmIHVzZXIudHV0b3JGb3IpIHtcbiAgICBjbGFpbXMgPSBjbGFpbXMuZmlsdGVyKGNsYWltID0+IGNsYWltLnR5cGUgIT09ICdlbWFpbCcpO1xuICB9XG4gIHZhciByZXN1bHQgPSBfaGFzQWNjZXNzKERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmdBcnJheShkb2MuYWNsIHx8IFtdKSwgY2xhaW1zLCByZXF1ZXN0ZWRSaWdodCk7XG4gIC8vY29uc29sZS5sb2coYEhhcyAke3JlcXVlc3RlZFJpZ2h0fSBhY2Nlc3MgdG8gJHtkb2MubmFtZX0vJHtkb2MuaWR9OiAke3Jlc3VsdH1gKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlYWRBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xuICByZXR1cm4gaGFzQWNjZXNzKHVzZXIsIGRvYywgJ1InKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1dyaXRlQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQpIHtcbiAgcmV0dXJuIGhhc0FjY2Vzcyh1c2VyLCBkb2MsICdXJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNTaGFyZUFjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50KSB7XG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnUycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUZWFjaGVyQXRTY2hvb2wodXNlcjogVXNlciwgc2Nob29sOiBzdHJpbmcpIHtcbiAgY29uc3QgaXNUZWFjaGVyID0gdXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gJ0VNUExPWUVFJyB8fCByb2xlID09PSAnQURNSU4nKTtcbiAgY29uc3QgYmVsb25nc1RvU2Nob29sID0gKHNjaG9vbHx8XCJcIikudG9Mb3dlckNhc2UoKSA9PT0gdXNlci5zY2hvb2wudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChpc1RlYWNoZXIgJiYgYmVsb25nc1RvU2Nob29sKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbCh1c2VyOiBVc2VyLCBzY2hvb2w6IHN0cmluZykge1xuICByZXR1cm4gdXNlci5yb2xlcy5pbmNsdWRlcyhcIkFETUlOXCIpIHx8IGlzVGVhY2hlckF0U2Nob29sKHVzZXIsIHNjaG9vbCk7XG59XG5cbmV4cG9ydCBjb25zdCBpbXBlcnNvbmF0aW9uRW52ID0ge1xuICBhY3RBcyAob3B0aW9uczoge3JvbGUsIHNjaG9vbCwgdXJsP30pIHtcbiAgICBjb25zdCB7cm9sZSwgc2Nob29sLCB1cmx9ID0gb3B0aW9ucztcbiAgICBjb25zdCBjdXJyZW50UXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCk7XG4gICAgY29uc3QgbmV3UXVlcnkgPSB7Li4uY3VycmVudFF1ZXJ5LCByb2xlLCBzY2hvb2x9O1xuICAgIGNvbnN0IG5ld1F1ZXJ5U3RyaW5nID0gZ2VuZXJhdGVRdWVyeVN0cmluZyhuZXdRdWVyeSk7XG4gICAgaWYgKHVybCkge1xuICAgICAgbG9jYXRpb24uaHJlZiA9IGAke3VybH0ke25ld1F1ZXJ5U3RyaW5nfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIiNcIjtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9IG5ld1F1ZXJ5U3RyaW5nO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWN0QXMob3B0aW9uczoge3JvbGUsIHNjaG9vbCwgdXJsP30pIHtcbiAgaW1wZXJzb25hdGlvbkVudi5hY3RBcyhvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5ICh1cmw6IHN0cmluZywgcXVlcnk6IHtbbmFtZTogc3RyaW5nXSA6IHN0cmluZ30pIHtcbiAgY29uc3QgY3VycmVudFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gpO1xuICBjb25zdCBwcmVzZXJ2ZWRRdWVyeSA9IHt9O1xuICBmb3IgKGNvbnN0IHBhcmFtIG9mIElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TKSB7XG4gICAgaWYgKGN1cnJlbnRRdWVyeVtwYXJhbV0pIHByZXNlcnZlZFF1ZXJ5W3BhcmFtXSA9IGN1cnJlbnRRdWVyeVtwYXJhbV07XG4gIH1cbiAgY29uc3QgbmV3UXVlcnlTdHJpbmcgPSBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKHsuLi5wcmVzZXJ2ZWRRdWVyeSwgLi4ucXVlcnl9KTtcbiAgY29uc3QgcEhhc2ggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gcEhhc2ggPj0gMCA/XG4gICAgYCR7dXJsLnN1YnN0cigwLHBIYXNoKX0ke25ld1F1ZXJ5U3RyaW5nfSR7dXJsLnN1YnN0cihwSGFzaCl9YCA6XG4gICAgYCR7dXJsfSR7bmV3UXVlcnlTdHJpbmd9YDtcbn1cbiIsImltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY29udHJhY3RzL2tlZC1tb2RlbHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VXNlckNsYWltcyAodXNlcjogVXNlcikge1xuICByZXR1cm4gW3tcbiAgICB0eXBlOiBcImVtYWlsXCIsXG4gICAgdmFsdWU6IHVzZXIubWFpbFxuICB9LHtcbiAgICB0eXBlOiBcInNjaG9vbFwiLFxuICAgIHZhbHVlOiB1c2VyLnNjaG9vbFxuICB9XS5jb25jYXQodXNlci5yb2xlcy5tYXAocm9sZSA9PiAoe1xuICAgIHR5cGU6IFwicm9sZVwiLFxuICAgIHZhbHVlOiByb2xlXG4gIH0pKSkuY29uY2F0KHVzZXIucm9sZXMubWFwKHJvbGUgPT4gKHtcbiAgICB0eXBlOiBcInNjaG9vbFJvbGVcIixcbiAgICB2YWx1ZTogdXNlci5zY2hvb2wgKyBcIi9cIiArIHJvbGVcbiAgfSkpKTtcbn1cbiIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVVVJRCgpIHtcbiAgICAvLyBEZWNlbnQgc29sdXRpb24gZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNTAzNC9ob3ctdG8tY3JlYXRlLWEtZ3VpZC11dWlkLWluLWphdmFzY3JpcHRcbiAgICB2YXIgZCA9IERhdGUubm93KCk7XG4gICAgdmFyIHV1aWQgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciByID0gKGQgKyBNYXRoLnJhbmRvbSgpICogMTYpICUgMTYgfCAwO1xuICAgICAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xuICAgICAgICByZXR1cm4gKGMgPT09ICd4JyA/IHIgOiAociAmIDB4NyB8IDB4OCkpLnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdXVpZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhdm9pZFNpbXVsdGFub3VzQ2FsbHMobWV0aG9kKSB7XG4gICAgdmFyIG9uZ29pbmdQcm9taXNlID0gbnVsbDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIW9uZ29pbmdQcm9taXNlKSB7XG4gICAgICAgICAgICBvbmdvaW5nUHJvbWlzZSA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIG9uZ29pbmdQcm9taXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9uZ29pbmdQcm9taXNlO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsSWQocmVhbG0pIHtcbiAgICB2YXIgcHJlZml4ID0gJ2VjOTZiM2JlLTQ1ZmMtNDFkMy1iNjllLSc7XG4gICAgdmFyIHBhZCA9IFsnNTAnLCAnMDgnLCAnZTEnLCAnNDAnLCAnZTQnLCAnZTcnXTtcbiAgICBpZiAocmVhbG0ubGVuZ3RoID4gNilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVG9vIGxvbmcgcmVhbG1cIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWFsbS5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgaGV4ID0gcmVhbG0uY2hhckNvZGVBdChpKS50b1N0cmluZygxNik7XG4gICAgICAgIHBhZFtpXSA9IGhleC5sZW5ndGggPT09IDIgP1xuICAgICAgICAgICAgaGV4IDpcbiAgICAgICAgICAgICcwJyArIGhleDtcbiAgICB9XG4gICAgcmV0dXJuIHByZWZpeCArIHBhZC5qb2luKCcnKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlUHJlZGVzdGluYXRlZElkKGlucHV0KSB7XG4gICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbmNvZGVyLCBkYXRhLCBkaWdlc3QsIF9hLCBpO1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGVuY29kZXIuZW5jb2RlKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgX2EgPSBVaW50OEFycmF5LmJpbmQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGNyeXB0by5zdWJ0bGUuZGlnZXN0KCdTSEEtMjU2JywgZGF0YSldO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgZGlnZXN0ID0gbmV3IChfYS5hcHBseShVaW50OEFycmF5LCBbdm9pZCAwLCBfYi5zZW50KCldKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5pYmJsZSA9IGRpZ2VzdFtpKytdICUgMTYgfCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3YXNoZWROaWJibGUgPSBjID09PSAneCcgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaWJibGUgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaWJibGUgJiAweDcgfCAweDg7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdhc2hlZE5pYmJsZS50b1N0cmluZygxNik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLypleHBvcnQgZnVuY3Rpb24gYnVmMmhleChidWZmZXI6IEFycmF5QnVmZmVyKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoXG4gICAgbmV3IFVpbnQ4QXJyYXkoYnVmZmVyKSxcbiAgICAoeDogbnVtYmVyKSA9PiAoJzAwJyArIHgudG9TdHJpbmcoMTYpKS5zbGljZSgtMikpLmpvaW4oJycpO1xufSovXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQXJyYXkoYSwgbWFwcGVyKSB7XG4gICAgdmFyIHJldHZhbCA9IGE7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgICAgICB2YXIgdCA9IGFbaV07XG4gICAgICAgIHZhciBtYXBwZWQgPSBtYXBwZXIodCk7XG4gICAgICAgIGlmIChtYXBwZWQgIT09IHQpIHtcbiAgICAgICAgICAgIGlmIChyZXR2YWwgPT09IGEpXG4gICAgICAgICAgICAgICAgcmV0dmFsID0gYS5zbGljZSgpO1xuICAgICAgICAgICAgcmV0dmFsW2ldID0gbWFwcGVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXR2YWw7XG59XG4vKlxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUFycmF5PFQ+KGE6IFRbXSwgbWFwcGVyOiAodDogVCkgPT4gVCB8IGZhbHNlKTogVFtdIHtcbiAgbGV0IHJldHZhbCA9IGE7XG4gIGxldCBqID0gMDtcbiAgZm9yIChsZXQgaT0wLGw9YS5sZW5ndGg7IGk8bDsgKytpLCArK2opIHtcbiAgICBjb25zdCB0ID0gYVtpXTtcbiAgICBjb25zdCBtYXBwZWQgPSBtYXBwZXIodCk7XG4gICAgaWYgKG1hcHBlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIE1hcHBlciB3YW50cyB0byBkZWxldGUgdGhpcyBkb2MuXG4gICAgICBpZiAocmV0dmFsID09PSBhKSByZXR2YWwgPSBhLnNsaWNlKCk7XG4gICAgICByZXR2YWwuc3BsaWNlKGosIDEpO1xuICAgICAgLS1qOyAvLyBjb21wZW5zYXRlIGZvciArK2pcbiAgICB9IGVsc2UgaWYgKG1hcHBlZCAhPT0gdCkge1xuICAgICAgaWYgKHJldHZhbCA9PT0gYSkgcmV0dmFsID0gYS5zbGljZSgpO1xuICAgICAgcmV0dmFsW2pdID0gbWFwcGVkO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmV0dmFsO1xufVxuKi8gXG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCJleHBvcnQgaW50ZXJmYWNlIFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zIHtcbiAgdG9Mb3dlcj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uU2VhcmNoOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJzZVF1ZXJ5U3RyaW5nT3B0aW9ucyk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0ge1xuICBjb25zdCB7dG9Mb3dlcn0gPSAob3B0aW9ucyB8fMKge30pIGFzIFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zO1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgaWYgKGxvY2F0aW9uU2VhcmNoICYmIGxvY2F0aW9uU2VhcmNoLmxlbmd0aCA+IDEpXG4gICAgbG9jYXRpb25TZWFyY2guc3Vic3RyKDEpXG4gICAgICAuc3BsaXQoJyYnKVxuICAgICAgLm1hcChwYXJ0ID0+IHBhcnQuc3BsaXQoJz0nKS5tYXAocyA9PiBkZWNvZGVVUklDb21wb25lbnQocy50cmltKCkpKSlcbiAgICAgIC5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHJlc3VsdFt0b0xvd2VyID8ga2V5LnRvTG93ZXJDYXNlKCkgOiBrZXldID0gdmFsdWUpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBlbmNvZGVQYXJhbXMocGFyYW1zOiB7W2tleTogc3RyaW5nXTpzdHJpbmd9KSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwYXJhbXMpLmZpbHRlcihrZXkgPT4gcGFyYW1zW2tleV0gIT09IHVuZGVmaW5lZCkubWFwKGtleSA9PiBgJHtlbmNvZGVVUklDb21wb25lbnQoa2V5KX09JHtlbmNvZGVVUklDb21wb25lbnQocGFyYW1zW2tleV0pfWApLmpvaW4oJyYnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUXVlcnlTdHJpbmcocGFyYW1zOiB7W2tleTogc3RyaW5nXTpzdHJpbmd9KSB7XG4gIHJldHVybiBcIj9cIiArIGVuY29kZVBhcmFtcyhwYXJhbXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIYXNoUXVlcnlTdHJpbmcobG9jYXRpb25IYXNoOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJzZVF1ZXJ5U3RyaW5nT3B0aW9ucykge1xuICByZXR1cm4gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbkhhc2gsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVIYXNoUXVlcnlTdHJpbmcocGFyYW1zOiB7W2tleTogc3RyaW5nXTpzdHJpbmd9KSB7XG4gIHJldHVybiBcIiNcIiArIGVuY29kZVBhcmFtcyhwYXJhbXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXRVcmxBbmRRdWVyeSAodXJsV2l0aFBvc3NpYmxlUXVlcnk6IHN0cmluZykge1xuICBjb25zdCBwUXVlcnkgPSB1cmxXaXRoUG9zc2libGVRdWVyeS5pbmRleE9mKCc/Jyk7XG4gIHJldHVybiBwUXVlcnkgPj0gMCA/XG4gICAgW3VybFdpdGhQb3NzaWJsZVF1ZXJ5LnN1YnN0cigwLCBwUXVlcnkpLCB1cmxXaXRoUG9zc2libGVRdWVyeS5zdWJzdHIocFF1ZXJ5KV0gOlxuICAgIFt1cmxXaXRoUG9zc2libGVRdWVyeSwgXCJcIl07XG59XG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgRG9jdW1lbnQsIFJlc291cmNlLCBNb2RpZmljYXRpb25UcmFja2VkLCBDb3Vyc2UsIFRhc2ssIFNvZnREb2N1bWVudEFjY2VzcyB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IEJhdGNoUnVubmVyLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSB9IGZyb20gJy4uLy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRG9jdW1lbnRHcmFwaHMob2xkRG9jLCBuZXdEb2MsIHRhYmxlOiBzdHJpbmcsIGdyYXBoczogeyBbbGFiZWw6IHN0cmluZ106IHN0cmluZyB9LCBiYXRjaDogQmF0Y2hSdW5uZXIpIHtcbiAgY29uc3QgZG9jVXBkYXRlcyA9IHt9O1xuICBjb25zdCBkb2NJZCA9IG5ld0RvYy5pZDtcbiAgZm9yIChsZXQgbmF2UHJvcCBvZiBPYmplY3Qua2V5cyhncmFwaHMpKSB7XG4gICAgY29uc3QgZm9yZWlnblRhYmxlID0gZ3JhcGhzW25hdlByb3BdO1xuICAgIGNvbnN0IG9sZExpc3Q6IERvY3VtZW50W10gPSBvbGREb2NbbmF2UHJvcF0gfHwgW107XG4gICAgY29uc3QgbmV3TGlzdDogRG9jdW1lbnRbXSA9IG5ld0RvY1tuYXZQcm9wXTtcbiAgICBpZiAoIW5ld0xpc3QpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHR1cGxlcyA9IG5ld0xpc3RcbiAgICAgIC5tYXAoKGRvYywgaWR4KT0+KHtkb2MsIGlkeH0pKTsgLy8gQ3JlYXRlIHR1YmxlcyBvZiB7ZG9jLCBhcnJheS1pbmRleH0gc28gd2UgY2FuIHVwZGF0ZSByZXN1bHRcbiAgICBjb25zdCBhZGRlZCA9IHR1cGxlcy5maWx0ZXIodHVwbGUgPT4gIW9sZExpc3Quc29tZShvID0+IG8uaWQgPT09IHR1cGxlLmRvYy5pZCkpOyAvLyBGaW5kIGFkZGVkIGl0ZW1zXG5cbiAgICBmb3IgKGxldCBhIG9mIGFkZGVkKSB7XG4gICAgICBjb25zdCBtdXRhdGVkU3ViRG9jID0gey4uLmEuZG9jfTtcbiAgICAgIGNvbnN0IG1ldGEgPSBtdXRhdGVkU3ViRG9jLiRtZXRhO1xuICAgICAgZGVsZXRlIG11dGF0ZWRTdWJEb2MuJG1ldGE7IC8vIERlbGV0ZSAkbWV0YSBzbyB0aGF0IFwiYWRkXCIgb3IgXCJ1cGRhdGVcIiBkb2VzIG5vdCBwZXJzaXN0ZSB0byBuZXh0IHN0YXRlLlxuICAgICAgaWYgKG1ldGEgPT09ICdhZGQnKSB7XG4gICAgICAgIGlmICghbXV0YXRlZFN1YkRvYy5pZCkgbXV0YXRlZFN1YkRvYy5pZCA9IGNyZWF0ZVVVSUQoKTsgLy8gR2VuZXJhdGUgSUQgaWYgbm90IGRvbmUgeWV0LlxuICAgICAgICAvLyBOb3cgcHV0IGFuICdhZGQnIG11dGF0aW9uIGluIHRoZSBiYXRjaCBxdWV1ZS5cbiAgICAgICAgYmF0Y2guYWRkKGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XG4gICAgICB9IGVsc2UgaWYgKG1ldGEgPT09ICd1cGRhdGUnKSB7XG4gICAgICAgIGJhdGNoLnB1dChmb3JlaWduVGFibGUsIG11dGF0ZWRTdWJEb2MpO1xuICAgICAgfVxuICAgICAgYmF0Y2gubGluayh0YWJsZSwgZG9jSWQsIGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYy5pZCwgbmF2UHJvcCk7XG5cbiAgICAgIC8vIFVwZGF0ZSByZXN1bHQgc28gdGhhdCBzdGF0ZSBpcyByZWZsZWN0ZWQgYWZ0ZXIgc3VjY2VzZnVsIFBPU1QgdG8gc2VydmVyLlxuICAgICAgaWYgKCFkb2NVcGRhdGVzW25hdlByb3BdKSBkb2NVcGRhdGVzW25hdlByb3BdID0ge307XG4gICAgICBkb2NVcGRhdGVzW25hdlByb3BdW2EuaWR4XSA9IHskc2V0OiBtdXRhdGVkU3ViRG9jfTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlZCA9IG9sZExpc3QuZmlsdGVyKG8gPT4gIW5ld0xpc3Quc29tZShuID0+IG4uaWQgPT09IG8uaWQpKTtcbiAgICBmb3IgKGxldCByIG9mIHJlbW92ZWQpIHtcbiAgICAgIGJhdGNoLnVubGluayh0YWJsZSwgZG9jSWQsIGZvcmVpZ25UYWJsZSwgci5pZCwgbmF2UHJvcCk7XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZWQgPSB0dXBsZXMuZmlsdGVyKHR1cGxlID0+IG9sZExpc3Quc29tZShvID0+IG8uaWQgPT09IHR1cGxlLmRvYy5pZCAmJiB0dXBsZS5kb2MuJG1ldGEgPT09ICd1cGRhdGUnKSk7XG4gICAgZm9yIChsZXQgdSBvZiB1cGRhdGVkKSB7XG4gICAgICBjb25zdCBtdXRhdGVkU3ViRG9jID0gey4uLnUuZG9jfTtcbiAgICAgIGRlbGV0ZSBtdXRhdGVkU3ViRG9jLiRtZXRhO1xuICAgICAgYmF0Y2gucHV0KGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XG5cbiAgICAgIC8vIFVwZGF0ZSByZXN1bHQgc28gdGhhdCAkbWV0YSBpcyByZW1vdmVkIGZyb20gbmF2aWdhdGlvbiBwcm9wIGFmdGVyIHN1Y2Nlc3NmdWwgUE9TVCB0byBzZXJ2ZXIuXG4gICAgICBpZiAoIWRvY1VwZGF0ZXNbbmF2UHJvcF0pIGRvY1VwZGF0ZXNbbmF2UHJvcF0gPSB7fTtcbiAgICAgIGRvY1VwZGF0ZXNbbmF2UHJvcF1bdS5pZHhdID0geyRzZXQ6IG11dGF0ZWRTdWJEb2N9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdXBkYXRlKG5ld0RvYywgZG9jVXBkYXRlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkdEZvcm1hdChkYXRlVGltZTogbnVtYmVyIHwgRGF0ZSB8IG1vbWVudC5Nb21lbnQpIHtcbiAgcmV0dXJuIG1vbWVudChkYXRlVGltZSkuZm9ybWF0KCdZWU1NREQgSEg6bW0nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3J0RGF0ZUZvcm1hdChkYXRlVGltZTogbnVtYmVyIHwgRGF0ZSB8IG1vbWVudC5Nb21lbnQpIHtcbiAgcmV0dXJuIG1vbWVudChkYXRlVGltZSkuZm9ybWF0KCdZWU1NREQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3J0UGVyc29uTmFtZUZvcm1hdChuYW1lOiBzdHJpbmcpIHtcbiAgaWYgKCFuYW1lKSByZXR1cm4gXCJcIjtcbiAgY29uc3QgbmFtZXMgPSBuYW1lLnNwbGl0KCcgJykuZmlsdGVyKG4gPT4gISFuKTtcbiAgY29uc3QgbGFzdE5hbWUgPSBuYW1lcy5wb3AoKTtcbiAgcmV0dXJuIG5hbWVzLm1hcChuYW1lID0+IGAke25hbWVbMF19LmApLmNvbmNhdChsYXN0TmFtZSkuam9pbignICcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTW9kaWZpY2F0aW9uU3RhbXAgKG5vdzogbnVtYmVyLCBvYmo6IE1vZGlmaWNhdGlvblRyYWNrZWQsIHVzZXI6IFVzZXIpIHtcbiAgcmV0dXJuIHVwZGF0ZShvYmosIHtcbiAgICBkYXRlVGltZTogeyRzZXQ6IG5vd30sIC8vIEZvciBxdWVyaWVzLi4uXG4gICAgbW9kaWZpZWREYXRlOiB7JHNldDogbm93fSxcbiAgICBtb2RpZmllZEJ5OiB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIG5hbWU6IHVzZXIuZGlzcGxheU5hbWUsXG4gICAgICAgIHVybDogXCJtYWlsdG86XCIgKyB1c2VyLm1haWxcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ3JlYXRpb25TdGFtcDxUIGV4dGVuZHMgTW9kaWZpY2F0aW9uVHJhY2tlZD4gKG5vdzogbnVtYmVyLCBvYmo6IFQsIHVzZXI6IFVzZXIpOiBUIHtcbiAgcmV0dXJuIHVwZGF0ZShvYmosIHtcbiAgICBjcmVhdGVkRGF0ZTogeyRzZXQ6IG5vd30sXG4gICAgY3JlYXRlZEJ5OiB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIG5hbWU6IHVzZXIuZGlzcGxheU5hbWUsXG4gICAgICAgIHVybDogXCJtYWlsdG86XCIgKyB1c2VyLm1haWxcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW1haWxGcm9tRG9jQWNjZXNzIChyZXNvdXJjZTogU29mdERvY3VtZW50QWNjZXNzKSB7XG4gIGlmIChyZXNvdXJjZS5lbWFpbCkgcmV0dXJuIHJlc291cmNlLmVtYWlsO1xuICByZXR1cm4gcmVzb3VyY2UudXJsID9cbiAgICByZXNvdXJjZS51cmwuc3RhcnRzV2l0aCgnbWFpbHRvOicpID9cbiAgICAgIHJlc291cmNlLnVybC5zdWJzdHJpbmcoJ21haWx0bzonLmxlbmd0aCkgOlxuICAgICAgcmVzb3VyY2UudXJsIDpcbiAgICByZXNvdXJjZS51cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyhvYmo6IE1vZGlmaWNhdGlvblRyYWNrZWQsIHVzZXI6IFVzZXIpIHtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgb2JqID0gdXBkYXRlTW9kaWZpY2F0aW9uU3RhbXAobm93LCBvYmosIHVzZXIpO1xuICBpZiAoIW9iai5jcmVhdGVkQnkpIG9iaiA9IHVwZGF0ZUNyZWF0aW9uU3RhbXAobm93LCBvYmosIHVzZXIpO1xuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlFdGFncyhkb2M6IERvY3VtZW50LCBuZXdFdGFnczoge1tpZDogc3RyaW5nXTogc3RyaW5nfSwgZ3JhcGhzOiBzdHJpbmdbXSkge1xuICBjb25zdCByZXMgPSB7Li4uZG9jfTtcbiAgY29uc3QgZXRhZyA9IG5ld0V0YWdzW2RvYy5pZF07XG4gIGlmIChldGFnKVxuICAgIHJlcy4kZXRhZyA9IGV0YWc7XG4gIGZvciAobGV0IGxhYmVsIG9mIGdyYXBocykge1xuICAgIGNvbnN0IG5ld0xpc3QgPSBkb2NbbGFiZWxdLm1hcChkID0+IGFwcGx5RXRhZ3MoZCwgbmV3RXRhZ3MsIFtdKSk7XG4gICAgcmVzW2xhYmVsXSA9IG5ld0xpc3Q7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRCbG9iKGJsb2I6IEJsb2IsIG06IChyOkZpbGVSZWFkZXIpPT52b2lkKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICByZWFkZXIub25sb2FkID0gZXYgPT4gcmVzb2x2ZSgoZXYudGFyZ2V0IGFzIGFueSkucmVzdWx0KTtcbiAgICByZWFkZXIub25hYm9ydCA9IGV2ID0+IHJlamVjdChuZXcgRXJyb3IoXCJmaWxlIHJlYWQgYWJvcnRlZFwiKSk7XG4gICAgcmVhZGVyLm9uZXJyb3IgPSBldiA9PiByZWplY3QoKGV2LnRhcmdldCBhcyBhbnkpLmVycm9yKTtcbiAgICBtKHJlYWRlcik7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQgKGJsb2I6IEJsb2IpIHtcbiAgcmV0dXJuIHJlYWRCbG9iKGJsb2IsIHI9PnIucmVhZEFzVGV4dChibG9iKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkQmxvYkFzRGF0YVVybCAoYmxvYjogQmxvYikge1xuICByZXR1cm4gcmVhZEJsb2IoYmxvYiwgcj0+ci5yZWFkQXNEYXRhVVJMKGJsb2IpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93Q29weShlOiBSZWFjdC5EcmFnRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSB7XG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgZS5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdjb3B5Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoc3RhdHVzOiAndW5zYXZlZCcgfCAnc2F2ZWQnIHwgJ2Vycm9yJyB8ICcnKSB7XG4gIGNvbnN0IGRpdiA9ICQoJ2Rpdi5jb3Vyc2UtYnVpbGRlcicpWzBdO1xuICBpZiAoZGl2KSBkaXYuY2xhc3NOYW1lID0gXCJjb3Vyc2UtYnVpbGRlclwiICsgKHN0YXR1cyA/IFwiIHN0YXR1cyBcIiArIHN0YXR1cyA6IFwiXCIpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbG9hZENvdXJzZShpZDogc3RyaW5nLCBvcHRpb25zPzoge1xuICAgIGluY2x1ZGVUZW1wbGF0ZUNoYWluPzogYm9vbGVhbixcbiAgICBpbmNsdWRlPzogc3RyaW5nW11cbiAgfSk6IFByb21pc2U8Q291cnNlPlxue1xuICBjb25zdCBjbGllbnQgPSBlbnYua2VkQmFja2VuZENsaWVudDtcbiAgY29uc3QgaW5jbHVkZVRlbXBsYXRlQ2hhaW4gPSBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZVRlbXBsYXRlQ2hhaW47XG4gIGNvbnN0IGluY2x1ZGVUYXNrcyA9ICFvcHRpb25zIHx8ICFvcHRpb25zLmluY2x1ZGUgfHwgb3B0aW9ucy5pbmNsdWRlLmluZGV4T2YoXCJ0YXNrc1wiKSAhPT0gLTE7XG4gIGNvbnN0IFtjb3Vyc2UsIGNvdXJzZVRhc2tzLCB0ZW1wbGF0ZUNoYWluXSA9IChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgY2xpZW50LmdldChcImNvdXJzZXNcIiwgaWQsIHtcbiAgICAgIGluY2x1ZGU6IG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlID8gb3B0aW9ucy5pbmNsdWRlLmZpbHRlcihpID0+IGkgIT09IFwidGFza3NcIikgOiBbXG4gICAgICAgIFwiY2VudHJhbENvbnRlbnRcIixcbiAgICAgICAgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIixcbiAgICAgICAgXCJhYmlsaXRpZXNcIixcbiAgICAgICAgXCJpbWFnZXNcIixcbiAgICAgICAgXCJhY2xcIiAvLyBEb24ndCBpbmNsdWRlIHRhc2tzIGhlcmUuLi5cbiAgICAgIF1cbiAgICB9KSxcbiAgICAvLyAuLi4gYnV0IGluY2x1ZGUgdGFza3MgaGVyZSBpbnN0ZWFkIHNvIHRoYXQgd2UgY2FuIGxvYWQgdGhlIGdyYXBocyBmb3IgdGhlXG4gICAgLy8gdGFza3MgYXMgd2VsbCFcbiAgICBpbmNsdWRlVGFza3MgJiYgY2xpZW50Lmxpc3QoXCJ0YXNrc1wiLCB7XG4gICAgICBoYXNFZGdlc0Zyb206IGlkLFxuICAgICAgaW5jbHVkZTogWydrbm93bGVkZ2VSZXF1aXJlbWVudHMnLCAnY2VudHJhbENvbnRlbnQnLCAnYWJpbGl0aWVzJywgJ2FjbCddLFxuICAgICAgZmxhZ3M6IFsnaW5jbHVkZUlkc09ubHknXSAvLyBEb24ndCBuZWVkIHJlZHVuZGFudCBpbmZvIHRoYXQncyBhbHJlYWR5IG9uIGNvdXJzZVxuICAgIH0pLFxuICAgIGluY2x1ZGVUZW1wbGF0ZUNoYWluICYmIGNsaWVudC5saXN0KFwiY291cnNlc1wiLCB7XG4gICAgICBoYXNFZGdlc0Zyb206IGlkLFxuICAgICAgZmxhZ3M6IFsnaWRzT25seSddXG4gICAgfSlcbiAgXSkpIGFzIFtDb3Vyc2UsIFRhc2tbXSwgQ291cnNlW11dO1xuICBjb3Vyc2UudGFza3MgPSBjb3Vyc2VUYXNrcztcblxuICAvLyBDb3JyZWN0IHRoZSBvcmRlciBvZiBBYmlsaXRpZXNcbiAgaWYgKGNvdXJzZS5hYmlsaXRpZXMgJiYgY291cnNlLmFiaWxpdGllc09yZGVyKSB7XG4gICAgY291cnNlLmFiaWxpdGllcyA9IGNvdXJzZS5hYmlsaXRpZXNPcmRlci5tYXAoaWQgPT5cbiAgICAgIGNvdXJzZS5hYmlsaXRpZXMuZmluZChhID0+IGEuaWQgPT09IGlkKSk7XG4gIH1cblxuICAvLyBDb3JyZWN0IHRoZSBvcmRlciBvZiBLbm93bGVkZ2VSZXF1aXJlbWVudHNcbiAgaWYgKGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMgJiYgY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyKSB7XG4gICAgY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cyA9IGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlci5tYXAoaWQgPT5cbiAgICAgIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZmluZChjID0+IGMuaWQgPT09IGlkKSk7XG4gIH1cblxuICAvLyBDb3JyZWN0IHRoZSBvcmRlciBvZiBDZW50cmFsQ29udGVudFxuICBpZiAoY291cnNlLmNlbnRyYWxDb250ZW50ICYmIGNvdXJzZS5jZW50cmFsQ29udGVudE9yZGVyKSB7XG4gICAgY291cnNlLmNlbnRyYWxDb250ZW50ID0gY291cnNlLmNlbnRyYWxDb250ZW50T3JkZXIubWFwKGlkID0+XG4gICAgICBjb3Vyc2UuY2VudHJhbENvbnRlbnQuZmluZChjYyA9PiBjYy5pZCA9PT0gaWQpKTsvLy5maWx0ZXIoeCA9PiAhIXgpOy8vIERlYnVnZ2luZyBzb210aGluJyAuIE5vcm1hbGx5IHRoZSBsYXN0IC5maWx0ZXIoKS4uLiBwYXJ0IHNob3VsZCBub3QgYmUgbmVzY2Vzc2FyeS4uLlxuICB9XG4gIFxuICAvLyBJbmNsdWRlIHRlbXBsYXRlIGNoYWluIGlmIHJlcXVlc3RlZC5cbiAgaWYgKGluY2x1ZGVUZW1wbGF0ZUNoYWluKSBjb3Vyc2UudGVtcGxhdGVDaGFpbiA9IHRlbXBsYXRlQ2hhaW47XG4gIHJldHVybiBjb3Vyc2U7XG59XG5cbi8vIENoZWNrIGRpZmZlcmVuY2VzIGJldHdlZW4gdHdvIGFycmF5IG9mIHR5cGUgVFxuZXhwb3J0IGZ1bmN0aW9uIGhhc0NoYW5nZXMob3JpZ2luYWxWYWx1ZXM6IEFycmF5PGFueT4sIGN1cnJlbnRWYWx1ZXM6IEFycmF5PGFueT4pOiBib29sZWFue1xuICByZXR1cm4gY3VycmVudFZhbHVlcy5maWx0ZXIoKHgpID0+ICFvcmlnaW5hbFZhbHVlcy5pbmNsdWRlcyh4KSkubGVuZ3RoID4gMCB8fCBvcmlnaW5hbFZhbHVlcy5maWx0ZXIoKHgpID0+ICFjdXJyZW50VmFsdWVzLmluY2x1ZGVzKHgpKS5sZW5ndGggPiAwO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGNvbnN0IExhbmd1YWdlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoe2ludGw6IG51bGx9KTsiLCIvKlxuZGVjbGFyZSB2YXIgQnVmZmVyOyAvLyBub2RlIGJ1aWx0LWluXG5cblxuZnVuY3Rpb24gYmFzaWNBdXRoSGVhZGVyKHVzZXJuYW1lLCBwYXNzd29yZCkge1xuICAgIHJldHVybiBcIkJhc2ljIFwiICsgbmV3IEJ1ZmZlcih1c2VybmFtZSArIFwiOlwiICsgcGFzc3dvcmQpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xufVxuKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlL2VtaXR0ZXInO1xudmFyIFJlc3RDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzdENsaWVudChpc29tb3JwaGljLCBiYXNlVXJsLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuaXNvbW9ycGhpYyA9IGlzb21vcnBoaWM7XG4gICAgICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zID0gMDtcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gbmV3IEVtaXR0ZXIodGhpcyk7XG4gICAgICAgIHRoaXMuZmV0Y2hPcHRpb25zID0geyBtb2RlOiAnY29ycycgfTtcbiAgICAgICAgdGhpcy5hdXRoSGVhZGVyID0gb3B0aW9ucy5iZWFyZXIgP1xuICAgICAgICAgICAgXCJCZWFyZXIgXCIgKyBvcHRpb25zLmJlYXJlciA6XG4gICAgICAgICAgICBvcHRpb25zLnVzZXJuYW1lID9cbiAgICAgICAgICAgICAgICBcIkJhc2ljIFwiICsgaXNvbW9ycGhpYy5idG9hKG9wdGlvbnMudXNlcm5hbWUgKyBcIjpcIiArIChvcHRpb25zLnBhc3N3b3JkIHx8IFwiXCIpKSA6XG4gICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgdGhpcy5iZWFyZXJQcm92aWRlciA9IG9wdGlvbnMuYmVhcmVyUHJvdmlkZXIgfHwgbnVsbDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc3RDbGllbnQucHJvdG90eXBlLCBcInN0YXR1c1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbiAocGF0aCwgbWV0aG9kLCBoZWFkZXJzLCBxdWVyeSwgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICsrdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnM7XG4gICAgICAgIHRoaXMuX3N0YXR1cy5kaXNwYXRjaCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZldGNoKHBhdGgsIG1ldGhvZCwgaGVhZGVycywgcXVlcnksIGZldGNoT3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgIC0tX3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xuICAgICAgICAgICAgX3RoaXMuX3N0YXR1cy5kaXNwYXRjaChfdGhpcyk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAtLV90aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucztcbiAgICAgICAgICAgIF90aGlzLl9zdGF0dXMuZGlzcGF0Y2goX3RoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuX2ZldGNoID0gZnVuY3Rpb24gKHBhdGgsIG1ldGhvZCwgaGVhZGVycywgcXVlcnksIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBxdWVyeVN0ciwgX2EsIGF1dGhIZWFkZXIsIHRva2VuSW5mbywgYmVhcmVyUHJvdmlkZXIsIF9iLCBfYywgdXJsLCByZXMsIHd3d2F1dGgsIF9kO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9lKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmV0Y2hPcHRpb25zICYmIGZldGNoT3B0aW9ucy5jYWNoZSA9PT0gJ25vLWNhY2hlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGJhY2stYnV0dG9uIG5vdCByZXNwZWN0aW5nIGNhY2hlIGNvbnRyb2wgaW4gQ2hyb21lL09wZXJhLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCBhIHF1ZXJ5IHBhcmFtZXRlciB0byBmb3JjZSBhIGNhY2hlIGVudHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBxdWVyeSwgeyBub2NhY2hlOiBjcmVhdGVVVUlEKCkgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVN0ciA9IHF1ZXJ5ICYmIE9iamVjdC5rZXlzKHF1ZXJ5KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gcXVlcnlba2V5XSAhPT0gdW5kZWZpbmVkOyB9KS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiPVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5W2tleV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuam9pbignJicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzLCBhdXRoSGVhZGVyID0gX2EuYXV0aEhlYWRlciwgdG9rZW5JbmZvID0gX2EudG9rZW5JbmZvLCBiZWFyZXJQcm92aWRlciA9IF9hLmJlYXJlclByb3ZpZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIWF1dGhIZWFkZXIgJiYgIXRva2VuSW5mbyAmJiBiZWFyZXJQcm92aWRlcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYmVhcmVyUHJvdmlkZXIuZ2V0QmVhcmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi50b2tlbkluZm8gPSB0b2tlbkluZm8gPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdG9rZW5JbmZvKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRva2VuSW5mby5leHBpcmVzIDwgRGF0ZS5ub3coKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJUb2tlbiBleHBpcmVkLiBSZWZyZXNoIGl0OlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJlYXJlclByb3ZpZGVyLnJlZnJlc2hCZWFyZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnRva2VuSW5mbyA9IHRva2VuSW5mbyA9IF9lLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0aEhlYWRlciA9IFwiQmVhcmVyIFwiICsgdG9rZW5JbmZvLnRva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSA1O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbiBvbmUgd2F5IG9yIGFub3RoZXIsIHdlJ3ZlIGNvbmNsdWRlZCBhbiBBdXRob3JpemF0aW9uIGhlYWRlciB0byB1c2U6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXV0aEhlYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnMuQXV0aG9yaXphdGlvbiA9IGF1dGhIZWFkZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmJhc2VVcmwgKyBwYXRoICsgKHF1ZXJ5U3RyID8gXCI/XCIgKyBxdWVyeVN0ciA6IFwiXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5pc29tb3JwaGljLmZldGNoKHVybCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5mZXRjaE9wdGlvbnMsIHsgaGVhZGVyczogaGVhZGVycywgbWV0aG9kOiBtZXRob2QgfSwgZmV0Y2hPcHRpb25zKSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzID09IDQwMSAmJiB0aGlzLmJlYXJlclByb3ZpZGVyKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XG4gICAgICAgICAgICAgICAgICAgICAgICB3d3dhdXRoID0gcmVzLmhlYWRlcnMuZ2V0KFwid3d3LWF1dGhlbnRpY2F0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiR290IFwiICsgcmVzLnN0YXR1cyArIFwiIGZyb20gXCIgKyAodGhpcy5iYXNlVXJsICsgcGF0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEod3d3YXV0aCAmJiAvQmVhcmVyL2kudGVzdCh3d3dhdXRoKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2QgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5iZWFyZXJQcm92aWRlci5yZWZyZXNoQmVhcmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgICAgICBfZC50b2tlbkluZm8gPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBcIkJlYXJlciBcIiArIHRoaXMudG9rZW5JbmZvLnRva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5pc29tb3JwaGljLmZldGNoKHVybCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5mZXRjaE9wdGlvbnMsIHsgaGVhZGVyczogaGVhZGVycywgbWV0aG9kOiBtZXRob2QgfSwgZmV0Y2hPcHRpb25zKSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgOTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHJlc107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHBhdGgsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2gocGF0aCwgXCJHRVRcIiwgeyBBY2NlcHQ6IFwiYXBwbGljYXRpb24vanNvbjsgdGV4dC9wbGFpblwiIH0sIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpO1xuICAgIH07XG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChwYXRoLCBkYXRhLCBmZXRjaE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmV0Y2gocGF0aCwgXCJQT1NUXCIsIHtcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgXCJBY2NlcHRcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICAgICAgfSwgbnVsbCwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgZmV0Y2hPcHRpb25zLCB7IGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpIH0pKTtcbiAgICB9O1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uIChwYXRoLCBxdWVyeSwgYm9keSwgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKHBhdGgsIFwiREVMRVRFXCIsIHsgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb247IHRleHQvcGxhaW5cIiB9LCBxdWVyeSwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgZmV0Y2hPcHRpb25zLCB7IGJvZHk6IGJvZHkgfSkpO1xuICAgIH07XG4gICAgcmV0dXJuIFJlc3RDbGllbnQ7XG59KCkpO1xuZXhwb3J0IHsgUmVzdENsaWVudCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVzdGNsaWVudC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgUmVzdENsaWVudCB9IGZyb20gJy4vcmVzdGNsaWVudCc7XG5pbXBvcnQgeyBhdm9pZFNpbXVsdGFub3VzQ2FsbHMgfSBmcm9tICcuL3V0aWxzJztcbnZhciBLZWRCZWFyZXJQcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZWRCZWFyZXJQcm92aWRlcihpc29tb3JwaGljLCBzdG9yYWdlLCB0b2tlbklkLCBjbGllbnRJZCwgY2xpZW50U2VjcmV0LCB0b2tlblVybCwgdG9rZW5RdWVyeSkge1xuICAgICAgICB0aGlzLmlzb21vcnBoaWMgPSBpc29tb3JwaGljO1xuICAgICAgICB0aGlzLnN0b3JhZ2UgPSBzdG9yYWdlO1xuICAgICAgICB0aGlzLnRva2VuSWQgPSB0b2tlbklkO1xuICAgICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XG4gICAgICAgIHRoaXMuY2xpZW50U2VjcmV0ID0gY2xpZW50U2VjcmV0O1xuICAgICAgICB0aGlzLnRva2VuVXJsID0gdG9rZW5Vcmw7XG4gICAgICAgIHRoaXMudG9rZW5RdWVyeSA9IHRva2VuUXVlcnk7XG4gICAgICAgIHRoaXMudG9rZW5JbmZvID0geyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9O1xuICAgICAgICB0aGlzLmNsaWVudCA9IG5ldyBSZXN0Q2xpZW50KGlzb21vcnBoaWMsIFwiXCIsIHtcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLmNsaWVudElkLFxuICAgICAgICAgICAgcGFzc3dvcmQ6IHRoaXMuY2xpZW50U2VjcmV0XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmdldEJlYXJlciA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzLmdldEJlYXJlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoQmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMucmVmcmVzaEJlYXJlci5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgS2VkQmVhcmVyUHJvdmlkZXIucHJvdG90eXBlLmdldEJlYXJlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIHRva2VuLCBleHBpcmVzLCBfYiwgZV8xO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMudG9rZW5JbmZvLCB0b2tlbiA9IF9hLnRva2VuLCBleHBpcmVzID0gX2EuZXhwaXJlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbiAmJiBleHBpcmVzID49IERhdGUubm93KCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2MudHJ5cy5wdXNoKFsxLCA0LCAsIDZdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuc3RvcmFnZS5sb2FkKHRoaXMuY2xpZW50SWQgKyBcIi9cIiArIHRoaXMudG9rZW5JZCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi50b2tlbkluZm8gPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy50b2tlbkluZm8udG9rZW4gJiYgdGhpcy50b2tlbkluZm8uZXhwaXJlcyA+PSBEYXRlLm5vdygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hCZWFyZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVfMSA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaEJlYXJlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmVhcmVyUHJvdmlkZXIucHJvdG90eXBlLnJlZnJlc2hCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgcmV0cmllcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyaWVzID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmV0cmllcyA8IDYpKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmV0cmlldmluZyB0b2tlbiBmb3IgXCIgKyB0aGlzLnRva2VuSWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5jbGllbnQuZ2V0KHRoaXMudG9rZW5VcmwsIHRoaXMudG9rZW5RdWVyeSwgeyBjYWNoZTogJ3JlbG9hZCcgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiR290IFwiICsgcmVzLnN0YXR1cyArIFwiIFwiICsgcmVzLnN0YXR1c1RleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50b2tlbkluZm8gPSAoX2IudG9rZW4gPSBfYy5zZW50KCksIF9iLmV4cGlyZXMgPSBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDEwMDAsIF9iKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiR290IHRva2VuIGZvciBcIiArIHRoaXMudG9rZW5JZCArIFwiOiBcIiArIEpTT04uc3RyaW5naWZ5KHRoaXMudG9rZW5JbmZvKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2F2ZSh0aGlzLmNsaWVudElkICsgXCIvXCIgKyB0aGlzLnRva2VuSWQsIHRoaXMudG9rZW5JbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICsrcmV0cmllcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6IHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byByZXRyaWV2ZSB0b2tlbiBmb3IgXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnRva2VuSWQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gS2VkQmVhcmVyUHJvdmlkZXI7XG59KCkpO1xuZXhwb3J0IHsgS2VkQmVhcmVyUHJvdmlkZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlZC1iZWFyZXItcHJvdmlkZXIuanMubWFwIiwidmFyIERvY3VtZW50QWNjZXNzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERvY3VtZW50QWNjZXNzKGFjY2Vzc0NsYWltVHlwZSwgYWNjZXNzQ2xhaW1WYWx1ZSwgcmlnaHQpIHtcbiAgICAgICAgdGhpcy5hY2Nlc3NDbGFpbVR5cGUgPSBhY2Nlc3NDbGFpbVR5cGU7XG4gICAgICAgIHRoaXMuYWNjZXNzQ2xhaW1WYWx1ZSA9IGFjY2Vzc0NsYWltVmFsdWU7XG4gICAgICAgIHRoaXMucmlnaHQgPSByaWdodDtcbiAgICB9XG4gICAgRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZyA9IGZ1bmN0aW9uIChhYykge1xuICAgICAgICBpZiAoIWFjKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciBzcGxpdCA9IGFjLnNwbGl0KCc6Jyk7XG4gICAgICAgIGlmIChzcGxpdC5sZW5ndGggPCAzKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhY2Nlc3Mgc3RyaW5nOiBcIiArIGFjKTtcbiAgICAgICAgdmFyIGNsYWltVHlwZSA9IERvY3VtZW50QWNjZXNzLnVuZXNjYXBlKHNwbGl0WzBdKTtcbiAgICAgICAgdmFyIGNsYWltVmFsdWUgPSBEb2N1bWVudEFjY2Vzcy51bmVzY2FwZShzcGxpdFsxXSk7XG4gICAgICAgIHZhciByaWdodCA9IHNwbGl0WzJdO1xuICAgICAgICBpZiAocmlnaHQgIT09ICdSJyAmJiByaWdodCAhPT0gJ1cnICYmIHJpZ2h0ICE9PSAnUycpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFjY2VzcyBzdHJpbmc6IFwiICsgYWMpO1xuICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50QWNjZXNzKGNsYWltVHlwZSwgY2xhaW1WYWx1ZSwgcmlnaHQpO1xuICAgIH07XG4gICAgRG9jdW1lbnRBY2Nlc3MuZXNjYXBlID0gZnVuY3Rpb24gKGFjY2Vzc0NvbXBvbmVudCkge1xuICAgICAgICByZXR1cm4gYWNjZXNzQ29tcG9uZW50LnJlcGxhY2UoL1xcJS9nLCBcIiUyNVwiKS5yZXBsYWNlKC9cXDovZywgXCIlM0FcIik7XG4gICAgfTtcbiAgICBEb2N1bWVudEFjY2Vzcy51bmVzY2FwZSA9IGZ1bmN0aW9uIChhY2Nlc3NDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGFjY2Vzc0NvbXBvbmVudC5yZXBsYWNlKC9cXCUzQS9nLCBcIjpcIikucmVwbGFjZSgvXFwlMjUvZywgXCIlXCIpO1xuICAgIH07XG4gICAgRG9jdW1lbnRBY2Nlc3MucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRG9jdW1lbnRBY2Nlc3MuZXNjYXBlKHRoaXMuYWNjZXNzQ2xhaW1UeXBlKSArIFwiOlwiICtcbiAgICAgICAgICAgIERvY3VtZW50QWNjZXNzLmVzY2FwZSh0aGlzLmFjY2Vzc0NsYWltVmFsdWUpICsgXCI6XCIgK1xuICAgICAgICAgICAgdGhpcy5yaWdodDtcbiAgICB9O1xuICAgIERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmdBcnJheSA9IGZ1bmN0aW9uIChhY2wpIHtcbiAgICAgICAgcmV0dXJuIGFjbFxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYWMpIHsgcmV0dXJuIERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmcoYWMpOyB9KVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYWMpIHsgcmV0dXJuIGFjOyB9KTtcbiAgICB9O1xuICAgIERvY3VtZW50QWNjZXNzLnRvU3RyaW5nQXJyYXkgPSBmdW5jdGlvbiAoYWNsKSB7XG4gICAgICAgIHJldHVybiBhY2wubWFwKGZ1bmN0aW9uIChhYykgeyByZXR1cm4gYWMudG9TdHJpbmcoKTsgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gRG9jdW1lbnRBY2Nlc3M7XG59KCkpO1xuZXhwb3J0IHsgRG9jdW1lbnRBY2Nlc3MgfTtcbmV4cG9ydCBmdW5jdGlvbiBoYXNBY2Nlc3MoYWNsLCB1c2VyQ2xhaW1zLCByZXF1ZXN0ZWRSaWdodCkge1xuICAgIGlmICh1c2VyQ2xhaW1zLnNvbWUoZnVuY3Rpb24gKGNsYWltKSB7IHJldHVybiBjbGFpbS50eXBlID09PSAncm9sZScgJiYgY2xhaW0udmFsdWUgPT09IFwiQURNSU5cIjsgfSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBhY2wuc29tZShmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gdXNlckNsYWltcy5zb21lKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5hY2Nlc3NDbGFpbVR5cGUgPT09IGMudHlwZSAmJlxuICAgICAgICAgICAgICAgIGEuYWNjZXNzQ2xhaW1WYWx1ZSA9PT0gYy52YWx1ZSAmJiAoKGEucmlnaHQgPT09ICdSJyAmJiByZXF1ZXN0ZWRSaWdodCA9PT0gJ1InKSB8fFxuICAgICAgICAgICAgICAgIChhLnJpZ2h0ID09PSAnVycgJiYgWydSJywgJ1cnXS5pbmRleE9mKHJlcXVlc3RlZFJpZ2h0KSA+PSAwKSB8fFxuICAgICAgICAgICAgICAgIChhLnJpZ2h0ID09PSAnUycpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2Nlc3MtY29udHJvbC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xudmFyIEh0dHBFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhIdHRwRXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSHR0cEVycm9yKGNvZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgXCJIVFRQXCIgKyBjb2RlICsgXCIgXCIgKyBtZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgIF90aGlzLm5hbWUgPSBcImh0dHBcIiArIGNvZGU7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBcIkhUVFBcIiArIGNvZGUgKyBcIiBcIiArIG1lc3NhZ2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEh0dHBFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCB7IEh0dHBFcnJvciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cC1lcnJvci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgUmVzdENsaWVudCB9IGZyb20gJy4vcmVzdGNsaWVudCc7XG5leHBvcnQgKiBmcm9tICcuL3V0aWxzJztcbmV4cG9ydCB7IEtlZEJlYXJlclByb3ZpZGVyIH0gZnJvbSAnLi9rZWQtYmVhcmVyLXByb3ZpZGVyJztcbmV4cG9ydCAqIGZyb20gJy4vYWNjZXNzLWNvbnRyb2wnO1xuZXhwb3J0IHsgUmVzdENsaWVudCB9O1xuaW1wb3J0IHsgSHR0cEVycm9yIH0gZnJvbSAnLi9odHRwLWVycm9yJztcbmV4cG9ydCB7IEh0dHBFcnJvciB9O1xuZXhwb3J0ICogZnJvbSAnLi9yZXN0Y2xpZW50Jztcbjtcbi8vIHwgJ290aGVyRmxhZycgfCAndGhpcmRGbGFnJzsuLi5cbnZhciBLZWRCYWNrZW5kQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRDbGllbnQoaXNvbW9ycGhpYywgYmVhcmVyUHJvdmlkZXIsIGJhc2VVcmwpIHtcbiAgICAgICAgdGhpcy5odHRwID0gbmV3IFJlc3RDbGllbnQoaXNvbW9ycGhpYywgYmFzZVVybCwgeyBiZWFyZXJQcm92aWRlcjogYmVhcmVyUHJvdmlkZXIgfSk7XG4gICAgfVxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmdldE15Q2xhaW1zID0gZnVuY3Rpb24gKHRhYmxlLCBmZXRjaE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmdldChcIm1lL2NsYWltcy9cIiArICh0YWJsZSB8fCBcIlwiKSwgbnVsbCwgZmV0Y2hPcHRpb25zKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBvcHRpb25zLCBmZXRjaE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmdldCh0YWJsZSArIFwiL1wiICsgaWQsIG9wdGlvbnMsIGZldGNoT3B0aW9ucyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHF1ZXJ5LCByZXMsIF9hLCBfYjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guaW5jbHVkZXMoJ3VzZVNQJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeS5mbGFncyA9IChxdWVyeS5mbGFncyB8fCBbXSkuY29uY2F0KFsndXNlU1AnXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm11dGF0aW9uc09uRW1wdHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkubXV0YXRpb25zT25FbXB0eSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMubXV0YXRpb25zT25FbXB0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZ2V0KFwiXCIgKyB0YWJsZSwgcXVlcnksIGZldGNoT3B0aW9ucyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuYmF0Y2ggPSBmdW5jdGlvbiAocmVxcywgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW9yZGVyIG9wZXJhdGlvbnMgc28gdGhhdCAnYWRkJ3MgY29tZSBmaXJzdCBhbmQgJ2RlbGV0ZSdzIGNvbWUgbGFzdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXMgPSByZXFzLnNsaWNlKCkuc29ydChmdW5jdGlvbiAocmVxMSwgcmVxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXExLm9wID09PSAnYWRkJyA/IC0xIDogcmVxMi5vcCA9PT0gJ2FkZCcgPyAxIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxMS5vcCA9PT0gJ2RlbGV0ZScgPyAxIDogcmVxMi5vcCA9PT0gJ2RlbGV0ZScgPyAtMSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5wb3N0KFwiYmF0Y2hcIiwgcmVxcywgZmV0Y2hPcHRpb25zKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChzY29wZUZuKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJ1bm5lcjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmVyID0gbmV3IEJhdGNoUnVubmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZUZuKHJ1bm5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmJhdGNoKHJ1bm5lci5tdXRhdGlvblJlcXVlc3RzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZGVsZXRlUmVhbG0gPSBmdW5jdGlvbiAocmVhbG0pIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmRlbGV0ZShcInJlYWxtcy9cIiArIHJlYWxtKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGFibGUsIGRvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuYWRkKHRhYmxlLCBkb2MpOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnB1dCh0YWJsZSwgZG9jKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudXBkYXRlKHRhYmxlLCBpZCwgZGVsdGFEb2MsIGJyYW5jaElkKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIubWVyZ2UoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5jbGVhckJyYW5jaCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5jbGVhckJyYW5jaChicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5kZWxldGUodGFibGUsIGlkKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5zaGFyZSh0YWJsZSwgaWQsIGFjbCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bnNoYXJlKHRhYmxlLCBpZCwgYWNsKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5saW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRJZCwgbGFiZWwsIGJyYW5jaElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmxpbmsyKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmxpbmsoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51bmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIGxhYmVsLCBicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmxpbmsyKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5kb0xpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRJZCwgbGFiZWwsIGJyYW5jaElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnVuZG9MaW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEtlZEJhY2tlbmRDbGllbnQ7XG59KCkpO1xuZXhwb3J0IHsgS2VkQmFja2VuZENsaWVudCB9O1xudmFyIEJhdGNoUnVubmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhdGNoUnVubmVyKCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMgPSBbXTtcbiAgICB9XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jLCBicmFuY2hJZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnYWRkJywgdGFibGU6IHRhYmxlLCBkb2M6IGRvYywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAodGFibGUsIGRvYykge1xuICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MpO1xuICAgICAgICBkZWxldGUgZG9jLmFjbDsgLy8gRm9yYmlkZGVuIHRvIHNlbmQgYWNsIHdpdGggcHV0KCkgY2FsbHMuXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdwdXQnLCB0YWJsZTogdGFibGUsIGRvYzogZG9jIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgZGVsdGFEb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkZWx0YURvYyk7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1cGRhdGUnLCB0YWJsZTogdGFibGUsIGlkOiBpZCwgZGVsdGFEb2M6IGRlbHRhRG9jLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdtZXJnZScsIGJyYW5jaElkOiBicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQ6IHRhcmdldEJyYW5jaElkIH0pO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmNsZWFyQnJhbmNoID0gZnVuY3Rpb24gKGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdjbGVhci1icmFuY2gnLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnZGVsZXRlJywgdGFibGU6IHRhYmxlLCBpZDogaWQgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnNoYXJlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgYWNsKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdzaGFyZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBhY2w6IGFjbCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5zaGFyZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBhY2w6IGFjbCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2xpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0VGFibGU6IHRhcmdldFRhYmxlLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdsaW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5saW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldFRhYmxlOiB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bmxpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5kb0xpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bmRvLWxpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcbiAgICB9O1xuICAgIHJldHVybiBCYXRjaFJ1bm5lcjtcbn0oKSk7XG5leHBvcnQgeyBCYXRjaFJ1bm5lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICAgIG51bWJlck9mVGFza3M6IG51bWJlcjtcbiAgICBjb21wbGV0ZWROdW1iZXJPZlRhc2tzOiBudW1iZXI7XG4gICAgbWF4aW11bVRhc2tzRGlzcGxheWVkPzogbnVtYmVyO1xuICAgIGJhY2tncm91bmRDb2xvcj86IHN0cmluZztcbiAgICBwcm9ncmVzc0NvbG9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgR29hbFByb2dyZXNzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gICAgcHVibGljIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIG51bWJlcm9mVGFza3M6IDAsXG4gICAgICAgIGNvbXBsZXRlZE51bWJlck9mVGFza3M6IDAsXG4gICAgICAgIG1heGltdW1UYXNrc0Rpc3BsYXllZDogMTAsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJsaWdodGdyZXlcIixcbiAgICAgICAgcHJvZ3Jlc3NDb2xvcjogXCIjM2RiY2EyXCIsXG4gICAgfTtcblxuICAgIGNyZWF0ZVByb2dyZXNzID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB7IG51bWJlck9mVGFza3MsIGNvbXBsZXRlZE51bWJlck9mVGFza3MsIG1heGltdW1UYXNrc0Rpc3BsYXllZCwgYmFja2dyb3VuZENvbG9yLCBwcm9ncmVzc0NvbG9yIH0gPSB0aGlzLnByb3BzO1xuICAgICAgICBsZXQgcHJvZ3Jlc3MgPSBbXTtcbiAgICAgICAgaWYobnVtYmVyT2ZUYXNrcyA+IG1heGltdW1UYXNrc0Rpc3BsYXllZCl7XG4gICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInByb2dyZXNzLW92ZXJ2aWV3XCI+IHtjb21wbGV0ZWROdW1iZXJPZlRhc2tzfSAvIHtudW1iZXJPZlRhc2tzfSA8L2Rpdj47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCB0YXNrTm8gPSAxOyB0YXNrTm8gPD0gbnVtYmVyT2ZUYXNrczsgdGFza05vKyspIHtcbiAgICAgICAgICAgIHByb2dyZXNzLnB1c2goXG4gICAgICAgICAgICA8c3ZnIGtleT17dGFza05vfT5cbiAgICAgICAgICAgICAgICA8Y2lyY2xlIGNsYXNzTmFtZT1cImNpcmNsZS1jaGFydC1iYWNrZ3JvdW5kXCIgZmlsbD17dGFza05vID4gY29tcGxldGVkTnVtYmVyT2ZUYXNrcyA/IGJhY2tncm91bmRDb2xvciA6IHByb2dyZXNzQ29sb3J9IGN4PVwiOFwiIGN5PVwiOFwiIHI9XCI4XCIgLz5cbiAgICAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvZ3Jlc3M7XG4gICAgfVxuXG4gICAgcmVuZGVyKCl7ICBcbiAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiZ29hbHMtcHJvZ3Jlc3NcIj57dGhpcy5jcmVhdGVQcm9ncmVzcygpfTwvZGl2PlxuICAgIH1cbn0iLCIvKiBSRUZBQ1RPUjogTW92ZSB0aGlzIGNvbXBvbmVudCBvdXRzaWRlIGNvdXJzZWJ1aWxkZXIhXG4gICBUaGlzIGlzIGEgZ2VuZXJhbC1wdXJwb3NlIGNvbXBvbmVudFxuKi9cblxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgR29hbFByb2dyZXNzIH0gZnJvbSAnLi4vY2hhcnRzL2dvYWwtcHJvZ3Jlc3MnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB0aXRsZTogc3RyaW5nIHwgSlNYLkVsZW1lbnQ7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaGVhZGVyQ2xhc3NOYW1lPzogc3RyaW5nO1xuICBjb250ZW50Q2xhc3NOYW1lPzogc3RyaW5nO1xuICBoZWFkZXJPcGVuPzogYm9vbGVhbjtcbiAgaW5hY3RpdmF0ZWQ/OiBib29sZWFuO1xuICBpbmFjdGl2YXRlZFJlbmRlcj86ICdjaGlsZHJlbicgfCAndGl0bGVBbmRDaGlsZHJlbic7XG4gIG9uT3BlbkNsb3NlPzogKGJlY2FtZU9wZW46IGJvb2xlYW4pID0+IHZvaWQ7XG4gIGRpc3BsYXlQcm9ncmVzcz86IGJvb2xlYW47XG4gIHByb2dyZXNzRGF0YT86IHtjb21wbGV0ZWROdW1iZXJPZlRhc2tzOiBudW1iZXIsIG51bWJlck9mVGFza3M6IG51bWJlcn07XG4gIGNoaWxkcmVuO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBoZWFkZXJPcGVuOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgT3BlbkNsb3NlQm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaGVhZGVyT3BlbjogcHJvcHMuaGVhZGVyT3BlbiB8fCBmYWxzZVxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHM6IFByb3BzKSB7XG4gICAgaWYgKG5leHRQcm9wcy5oZWFkZXJPcGVuICE9PSB0aGlzLnByb3BzLmhlYWRlck9wZW4pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2hlYWRlck9wZW46IG5leHRQcm9wcy5oZWFkZXJPcGVufSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgdGl0bGUsIGNsYXNzTmFtZSwgY2hpbGRyZW4sIGhlYWRlckNsYXNzTmFtZSwgY29udGVudENsYXNzTmFtZSwgZGlzcGxheVByb2dyZXNzLCBwcm9ncmVzc0RhdGEsXG4gICAgICBpbmFjdGl2YXRlZCwgaW5hY3RpdmF0ZWRSZW5kZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBoZWFkZXJPcGVuIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgaWYgKGluYWN0aXZhdGVkKSByZXR1cm4gaW5hY3RpdmF0ZWRSZW5kZXIgPT09ICd0aXRsZUFuZENoaWxkcmVuJyA/IDw+XG4gICAgICA8Pnt0aXRsZX08Lz5cbiAgICAgIDw+e2NoaWxkcmVufTwvPlxuICAgIDwvPiA6IDw+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC8+O1xuXG4gICAgLy92YXIgY3VycmVudFByb2dyZXNzRGF0YSA9IC8vcHJvZ3Jlc3NEYXRhKCk7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXsoY2xhc3NOYW1lfHwnJykgKyBcIiBvcGVuQ2xvc2VcIiArIChoZWFkZXJPcGVuID8gXCIgb3BlblwiIDogXCJcIil9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkhlYWRlclwiICsgKGhlYWRlckNsYXNzTmFtZSA/IFwiIFwiICsgaGVhZGVyQ2xhc3NOYW1lIDogXCJcIil9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vbk9wZW5DbG9zZSkgdGhpcy5wcm9wcy5vbk9wZW5DbG9zZSghdGhpcy5zdGF0ZS5oZWFkZXJPcGVuKTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGVhZGVyT3BlbjogIXRoaXMuc3RhdGUuaGVhZGVyT3BlbiB9KTtcbiAgICAgICAgfX0gPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW5IZWFkZXJDb250YWluZXJcIj5cbiAgICAgICAgICA8ZGl2Pnt0aXRsZX08L2Rpdj5cbiAgICAgICAgICB7ZGlzcGxheVByb2dyZXNzICYmIDxHb2FsUHJvZ3Jlc3Mgey4uLnByb2dyZXNzRGF0YX0vPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcIm9wZW5Db250ZW50XCIgKyAoY29udGVudENsYXNzTmFtZSA/IFwiIFwiICsgY29udGVudENsYXNzTmFtZSA6IFwiXCIpfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+O1xuICB9XG59XG4iLCJ2YXIgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSgpIHtcbiAgICB9XG4gICAgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKGlkLCB0b2tlbkluZm8pIHtcbiAgICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcImJlYXJlci1cIiArIGlkLCBKU09OLnN0cmluZ2lmeSh0b2tlbkluZm8pKTtcbiAgICB9O1xuICAgIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGpzb24gPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwiYmVhcmVyLVwiICsgaWQpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShqc29uID8gSlNPTi5wYXJzZShqc29uKSA6IHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2U7XG59KCkpO1xuZXhwb3J0IHsgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZWFyZXItc3RvcmFnZS1zZXNzaW9uc3RvcmFnZS5qcy5tYXAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlVGFzayh0YXNrKSB7XG4gICAgaWYgKCF0YXNrLnJlc291cmNlcylcbiAgICAgICAgdGFzay5yZXNvdXJjZXMgPSBbXTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pZ3JhdGUtdGFzay5qcy5tYXAiLCJpbXBvcnQgbWlncmF0ZUNvdXJzZSBmcm9tICcuL21pZ3JhdGUtY291cnNlJztcbmltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlKGRvYywgdGFibGUsIGdyYXBocykge1xuICAgIHN3aXRjaCAodGFibGUpIHtcbiAgICAgICAgY2FzZSBcImNvdXJzZXNcIjpcbiAgICAgICAgICAgIG1pZ3JhdGVDb3Vyc2UoZG9jLCBncmFwaHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJ0YXNrc1wiOlxuICAgICAgICAgICAgbWlncmF0ZVRhc2soZG9jKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pZ3JhdGUuanMubWFwIiwiaW1wb3J0IG1pZ3JhdGVUYXNrIGZyb20gJy4vbWlncmF0ZS10YXNrJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pZ3JhdGVDb3Vyc2UoY291cnNlLCBncmFwaHMpIHtcbiAgICBpZiAoIWNvdXJzZS5tb2R1bGVzKVxuICAgICAgICBjb3Vyc2UubW9kdWxlcyA9IFtdO1xuICAgIGNvdXJzZS5tb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZSkge1xuICAgICAgICBpZiAoIW1vZHVsZS5yZXNvdXJjZXMpIHtcbiAgICAgICAgICAgIG1vZHVsZS5yZXNvdXJjZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1vZHVsZS50YXNrSWRzKSB7XG4gICAgICAgICAgICBtb2R1bGUudGFza0lkcyA9IFtdO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycykge1xuICAgICAgICBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycyA9IFtdO1xuICAgIH1cbiAgICAvLyBFYXJsaWVyIHdyb25nIHNwZWxsaW5nIG9mIHJlc291cmNlc1xuICAgIGlmICgncmVzb3Vyc2VzJyBpbiBjb3Vyc2UgJiYgISgncmVzb3VyY2VzJyBpbiBjb3Vyc2UpKSB7XG4gICAgICAgIGNvdXJzZS5yZXNvdXJjZXMgPSBjb3Vyc2UucmVzb3Vyc2VzO1xuICAgICAgICBkZWxldGUgY291cnNlLnJlc291cnNlcztcbiAgICB9XG4gICAgaWYgKCFjb3Vyc2UucmVzb3VyY2VzKSB7XG4gICAgICAgIGNvdXJzZS5yZXNvdXJjZXMgPSBbXTtcbiAgICB9XG4gICAgaWYgKGdyYXBocykge1xuICAgICAgICBncmFwaHMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlICd0YXNrcyc6XG4gICAgICAgICAgICAgICAgICAgIGNvdXJzZS50YXNrcy5mb3JFYWNoKGZ1bmN0aW9uICh0YXNrKSB7IHJldHVybiBtaWdyYXRlVGFzayh0YXNrKTsgfSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLWNvdXJzZS5qcy5tYXAiLCJpbXBvcnQgbWlncmF0ZSBmcm9tICcuL21pZ3JhdGUnO1xuZXhwb3J0IHZhciBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gPSBmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgaWYgKGNsaWVudC5fX21pZ3JhdG9yX21peGVkX2luKVxuICAgICAgICByZXR1cm47XG4gICAgY2xpZW50Ll9fbWlncmF0b3JfbWl4ZWRfaW4gPSB0cnVlO1xuICAgIHZhciBnZXQgPSBjbGllbnQuZ2V0O1xuICAgIHZhciBsaXN0ID0gY2xpZW50Lmxpc3Q7XG4gICAgY2xpZW50LmdldCA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGluY2x1ZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZTtcbiAgICAgICAgcmV0dXJuIGdldC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgbWlncmF0ZShyZXN1bHQsIHRhYmxlLCBpbmNsdWRlICYmIGluY2x1ZGUudG9TdHJpbmcoKS5zcGxpdCgnLCcpKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY2xpZW50Lmxpc3QgPSBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGluY2x1ZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZTtcbiAgICAgICAgcmV0dXJuIGxpc3QuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChkb2MpIHsgcmV0dXJuIG1pZ3JhdGUoZG9jLCB0YWJsZSwgaW5jbHVkZSAmJiBpbmNsdWRlLnRvU3RyaW5nKCkuc3BsaXQoJywnKSk7IH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gY2xpZW50O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsInZhciByZWRpckhhc2ggPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicmVkaXItaGFzaFwiKTtcbmlmIChyZWRpckhhc2gpXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIF9hID0gSlNPTi5wYXJzZShyZWRpckhhc2gpLCB0aW1lID0gX2EudGltZSwgaGFzaCA9IF9hLmhhc2g7XG4gICAgICAgIGlmICh0aW1lICYmIHRpbWUgPiBEYXRlLm5vdygpIC0gNjAwMDApIHtcbiAgICAgICAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oXCJyZWRpci1oYXNoXCIpO1xuICAgICAgICAgICAgbG9jYXRpb24uaGFzaCA9IGhhc2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKF8pIHsgfVxuZXhwb3J0IGZ1bmN0aW9uIHJlbWVtYmVySGFzaExvY2F0aW9uKCkge1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJyZWRpci1oYXNoXCIsIEpTT04uc3RyaW5naWZ5KHsgdGltZTogRGF0ZS5ub3coKSwgaGFzaDogbG9jYXRpb24uaGFzaCB9KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oYXNoLXJlc3RvcmVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50LCBIdHRwRXJyb3IgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIH0gZnJvbSBcIi4vYmVhcmVyLXN0b3JhZ2Utc2Vzc2lvbnN0b3JhZ2VcIjtcbmltcG9ydCB7IGF2b2lkU2ltdWx0YW5vdXNDYWxscyB9IGZyb20gJy4uL2tlZC1iYWNrZW5kLWNsaWVudC91dGlscyc7XG5pbXBvcnQgeyBLZWRNb2RlbE1pZ3JhdG9yTWl4aW4gfSBmcm9tICcuLi9rZWQtbW9kZWwtbWlncmF0b3InO1xuaW1wb3J0ICcuL2hhc2gtcmVzdG9yZXInO1xuaW1wb3J0IHsgcmVtZW1iZXJIYXNoTG9jYXRpb24gfSBmcm9tICcuL2hhc2gtcmVzdG9yZXInO1xuS2VkTW9kZWxNaWdyYXRvck1peGluKEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlKTtcbmV4cG9ydCB2YXIgc3RvcmFnZSA9IG5ldyBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UoKTtcbnZhciB0aW1lT2ZQYWdlTG9hZCA9IERhdGUubm93KCk7XG52YXIgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIodG9rZW5QYXRoLCB0b2tlblJlc3BvbnNlTWFwcGVyLCB0b2tlbklkKSB7XG4gICAgICAgIHRoaXMudG9rZW5QYXRoID0gdG9rZW5QYXRoO1xuICAgICAgICB0aGlzLnRva2VuUmVzcG9uc2VNYXBwZXIgPSB0b2tlblJlc3BvbnNlTWFwcGVyO1xuICAgICAgICB0aGlzLnRva2VuSWQgPSB0b2tlbklkO1xuICAgICAgICB0aGlzLnRva2VuSW5mbyA9IHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfTtcbiAgICAgICAgdGhpcy5nZXRCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRCZWFyZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMucmVmcmVzaEJlYXJlciA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzLnJlZnJlc2hCZWFyZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISF0aGlzLnRva2VuSW5mby50b2tlbikgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudG9rZW5JZCkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBzdG9yYWdlLmxvYWQodGhpcy50b2tlbklkKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRva2VuSW5mbyA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy50b2tlbkluZm8uZXhwaXJlcyA8IERhdGUubm93KCkpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaEJlYXJlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA0O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIucHJvdG90eXBlLnJlZnJlc2hCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iLCBfYywgX2Q7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9lLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godGhpcy50b2tlblBhdGgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IEFjY2VwdDogXCJ0ZXh0L3BsYWluOyBhcHBsaWNhdGlvbi9qc29uXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdDogJ21hbnVhbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6ICduby1jYWNoZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM6IFwic2FtZS1vcmlnaW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMzAyIHx8ICghcmVzLnN0YXR1cyAmJiByZXMudHlwZSA9PT0gXCJvcGFxdWVyZWRpcmVjdFwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzZXIgc2Vzc2lvbiB0aW1lZCBvdXQgYW5kIHNlcnZlciB3YW50cyB0byByZWRpcmVjdCBlbnRpcmUgcGFnZSB0byBsb2dpbiBwYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGltZSB0byByZWxvYWQgY3VycmVudCBwYWdlIHRvIGZvcmNlIGEgcmVkaXJlY3Qgb2YgdGhlIGVudGlyZSBwYWdlIGluc3RlYWQgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVzdCByZWRpcmVjdGluZyB0byAvYXBpL3Rva2VuIG9yIHdoYXRldmVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gdGltZU9mUGFnZUxvYWQgPiA2MDAwMCkgeyAvLyBwcm9oaWJpdCBlbmRsZXNzIGxvb3Agb2YgcmVsb2FkaW5nIHNlbGYuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2FudHNSZWRpcmVjdCA9IHRydWU7IC8vIFNvIHRoYXQgbGlzdGVuZXJzIHRvIG9uYmVmb3JldW5sb2FkIGNvdWxkIHNob3cgYWx0ZXJuYXRlIG1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVkaXJlY3Qgd2FudGVkLiBSZWxvYWQgcGFnZS5cIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWVtYmVySGFzaExvY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBIdHRwRXJyb3IoMzAyLCBcIlJlZGlyZWN0ZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gXCJIVFRQXCIgKyByZXMuc3RhdHVzICsgXCIgXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEVycm9yLCBbdm9pZCAwLCBfYiArIChfZS5zZW50KCkpXSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kID0gdGhpcy50b2tlblJlc3BvbnNlTWFwcGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnRva2VuSW5mbyA9IF9kLmFwcGx5KHRoaXMsIFtfZS5zZW50KCldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2F2ZSh0aGlzLnRva2VuSWQsIHRoaXMudG9rZW5JbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyO1xufSgpKTtcbmV4cG9ydCB7IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyIH07XG5leHBvcnQgdmFyIGlzb21vcnBoaWMgPSB7IGZldGNoOiBmZXRjaC5iaW5kKHNlbGYpLCBidG9hOiBidG9hLmJpbmQoc2VsZikgfTtcbnZhciBLZWRCYWNrZW5kQ2xpZW50V2ViID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEtlZEJhY2tlbmRDbGllbnRXZWIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENsaWVudFdlYihhcGlCYXNlVXJsLCBwcm92aWRlck9yVG9rZW5QYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBiZWFyZXJQcm92aWRlciA9IHR5cGVvZiBwcm92aWRlck9yVG9rZW5QYXRoICE9PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICBwcm92aWRlck9yVG9rZW5QYXRoIDpcbiAgICAgICAgICAgIG5ldyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcihwcm92aWRlck9yVG9rZW5QYXRoLCAob3B0aW9ucyAmJiBvcHRpb25zLnRva2VuUmVzcG9uc2VNYXBwZXIpIHx8IChmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHsgdG9rZW46IHgsIGV4cGlyZXM6IERhdGUubm93KCkgKyA1OSAqIDYwICogNjAgfSk7IH0pLCBvcHRpb25zICYmIG9wdGlvbnMudG9rZW5JZCk7XG4gICAgICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaXNvbW9ycGhpYywgYmVhcmVyUHJvdmlkZXIsIGFwaUJhc2VVcmwpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEtlZEJhY2tlbmRDbGllbnRXZWI7XG59KEtlZEJhY2tlbmRDbGllbnQpKTtcbmV4cG9ydCB7IEtlZEJhY2tlbmRDbGllbnRXZWIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCAqIGZyb20gJy4vanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViJzsiLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBUZXJtLCBBY2FkZW1pY1llYXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Nob29sTW9tZW50IHtcbiAgYWNhZGVtaWNZZWFyOiBBY2FkZW1pY1llYXI7XG4gIHRlcm06IFRlcm07XG4gIHdlZWs/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaXJzdEFuZExhc3RXZWVrT2ZUZXJtKHRlcm06IFRlcm0pIHtcbiAgcmV0dXJuIHRlcm0gPT09ICdBVCcgP1xuICAgIFszMiwgNTFdIDpcbiAgICBbMSwgMjVdO1xufVxuXG4vL05vdCB1c2VkIGFueW1vcmVcbi8vIGV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtU3RhcnRBbmRFbmQobm93OiBtb21lbnQuTW9tZW50KSA6IG1vbWVudC5Nb21lbnRbXSB7XG4vLyAgICAgcmV0dXJuIG5vdy5tb250aCgpID49IDYgPyAvLyA2ID0gSnVseSBpbiBKUyBEYXRlcyBhbmQgaW4gbW9tZW50IGFzIHdlbGwhXG4vLyAgICAgW21vbWVudChuZXcgRGF0ZShub3cueWVhcigpLCA3LCAxKSksIG1vbWVudChuZXcgRGF0ZShub3cueWVhcigpLCAxMSwgMzEpKV0gOiAvLyBhdWcxIC0gZGVjMzFcbi8vICAgICBbbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDAsIDEpKSwgbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDYsIDMxKSldOyAvLyBqYW4xIC0ganVseTMxXG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtU3RhckVuZERhdGUoZGF0ZTogRGF0ZSwgaXNGaXJzdFRlcm06IGJvb2xlYW4pOiBtb21lbnQuTW9tZW50W10ge1xuICB2YXIgYWRkWWVhciA9IGRhdGUuZ2V0TW9udGgoKSA+PSA3O1xuICB2YXIgdGVybVllYXIgPSBudWxsO1xuXG4gIGlmIChhZGRZZWFyKSB7XG4gICAgdGVybVllYXIgPSBpc0ZpcnN0VGVybSA/IGRhdGUuZ2V0RnVsbFllYXIoKSA6IGRhdGUuZ2V0RnVsbFllYXIoKSArIDE7XG4gIH0gZWxzZSB7XG4gICAgdGVybVllYXIgPSBpc0ZpcnN0VGVybSA/IGRhdGUuZ2V0RnVsbFllYXIoKSAtIDEgOiBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gIH1cblxuICB2YXIgdGVybVllYXJNb21lbnQgPSBtb21lbnQodGVybVllYXIudG9TdHJpbmcoKSwgXCJZWVlZXCIpO1xuXG4gIGlmICh0ZXJtWWVhck1vbWVudC53ZWVrKCkgIT0gMSkge1xuICAgIHRlcm1ZZWFyTW9tZW50ID0gdGVybVllYXJNb21lbnQuY2xvbmUoKS5hZGQoMSwgJ3dlZWsnKTtcbiAgfVxuXG4gIHJldHVybiBpc0ZpcnN0VGVybSA/IFttb21lbnQodGVybVllYXJNb21lbnQuY2xvbmUoKSkud2VlaygzMikuc3RhcnRPZignd2VlaycpLCBtb21lbnQodGVybVllYXJNb21lbnQuY2xvbmUoKSkud2Vlayg1MSkuZW5kT2YoJ3dlZWsnKV0gOlxuICAgIFttb21lbnQodGVybVllYXJNb21lbnQuY2xvbmUoKSksIG1vbWVudCh0ZXJtWWVhck1vbWVudC5jbG9uZSgpKS53ZWVrKDI1KS5lbmRPZignd2VlaycpXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaG9vbE1vbWVudChtOiBtb21lbnQuTW9tZW50KTogU2Nob29sTW9tZW50IHtcbiAgY29uc3QgdGhpc1llYXIgPSBtLnllYXIoKTtcbiAgY29uc3QgaXNBdXR1bW4gPSBtLm1vbnRoKCkgPj0gNjsgLy8gZGV0ZXJtaW5lIFxuICBjb25zdCBbYXV0dW1uWWVhciwgc3ByaW5nWWVhcl0gPSBpc0F1dHVtbiA/XG4gICAgW3RoaXNZZWFyLCB0aGlzWWVhciArIDFdIDpcbiAgICBbdGhpc1llYXIgLSAxLCB0aGlzWWVhcl07XG4gIGNvbnN0IGFjYWRlbWljWWVhciA9ICcnICsgYXV0dW1uWWVhciArICcvJyArIHNwcmluZ1llYXI7XG4gIGNvbnN0IHRlcm0gPSBpc0F1dHVtbiA/ICdBVCcgOiAnU1QnO1xuICBjb25zdCB3ZWVrID0gbS53ZWVrKCk7XG4gIHJldHVybiB7IGFjYWRlbWljWWVhciwgdGVybSwgd2VlayB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyLCBudW1ZZWFyc1RvQWRkOiBudW1iZXIpOiBBY2FkZW1pY1llYXIge1xuICByZXR1cm4gYVllYXIuc3BsaXQoJy8nKVxuICAgIC5tYXAoeWVhclN0ciA9PiBwYXJzZUludCh5ZWFyU3RyKSArIG51bVllYXJzVG9BZGQpXG4gICAgLm1hcCh5ZWFyID0+ICcnICsgeWVhcilcbiAgICAuam9pbignLycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dEFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldkFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIC0xKTtcbn1cbiIsImV4cG9ydCAqIGZyb20gJy4vZmVhdHVyZXMnO1xuIiwiXG5leHBvcnQgY29uc3QgS0VEX05BTUVTUEFDRSA9IFwiS0VEXCI7XG5cbmRlY2xhcmUgdmFyIEtFRDogYW55O1xuXG52YXIgcmVzdWx0ID0gdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcgPyB7fSA6IEtFRDtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93W0tFRF9OQU1FU1BBQ0VdID0gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJcbmV4cG9ydCBjb25zdCBLRURfTkFNRVNQQUNFID0gXCJLRURcIjtcblxuZGVjbGFyZSB2YXIgS0VEOiBhbnk7XG5cbnZhciByZXN1bHQgPSB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJyA/IHt9IDogS0VEO1xuXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB3aW5kb3dbS0VEX05BTUVTUEFDRV0gPSByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcbiIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gXCIuL3ZhbHVlXCI7XG52YXIgRW1pdHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhFbWl0dGVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEVtaXR0ZXIoaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlcnMgPSBfdGhpcy5zdWJzY3JpYmVycy5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gX2FbMF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzICE9PSBvYnNlcnZlcjtcbiAgICAgICAgICAgICAgICB9KTsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmVycy5wdXNoKFtvYnNlcnZlciwgc3Vic2NyaXB0aW9uXSk7XG4gICAgICAgICAgICBpZiAoX3RoaXMuZXJyb3IpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgX3RoaXMuZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIoX3RoaXMudmFsdWUsIHVuZGVmaW5lZCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH0pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnN1YnNjcmliZXJzID0gW107XG4gICAgICAgIF90aGlzLnZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEVtaXR0ZXIucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5lcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2goKTtcbiAgICB9O1xuICAgIEVtaXR0ZXIucHJvdG90eXBlLmRpc3BhdGNoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgICB0aGlzLl9kaXNwYXRjaCgpO1xuICAgIH07XG4gICAgRW1pdHRlci5wcm90b3R5cGUuX2Rpc3BhdGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYVswXSwgc3Vic2NyaXB0aW9uID0gX2FbMV07XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyKF90aGlzLnZhbHVlLCBfdGhpcy5lcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnIsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEVtaXR0ZXI7XG59KFZhbHVlKSk7XG5leHBvcnQgeyBFbWl0dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lbWl0dGVyLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgaW5pdE1hcE1ldGhvZCB9IGZyb20gXCIuL21hcFwiO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gXCIuL2NvbGxlY3Rpb25cIjtcbmltcG9ydCB7IEZpYmVyQ29udGV4dCB9IGZyb20gJy4vZmliZXItY29udGV4dCc7XG52YXIgVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmFsdWUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmFsdWUoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBzdWJzY3JpYmUpIHx8IHRoaXM7XG4gICAgfVxuICAgIFZhbHVlLmZyb20gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeC5zdWJzY3JpYmUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlLmZyb20oKSBjYW4gb25seSB0YWtlIG9ic2VydmFibGVzXCIpO1xuICAgIH07XG4gICAgVmFsdWUucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXNvbHZlZCA9IGZhbHNlLCByZXN1bHQsIGVyciwgbm90aWZ5O1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NpcHRpb24pIHtcbiAgICAgICAgICAgIHJlc29sdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgZXJyID0gZXJyb3I7XG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgbm90aWZ5KVxuICAgICAgICAgICAgICAgIG5vdGlmeShudWxsLCBlcnJvciwgc3Vic2NpcHRpb24pO1xuICAgICAgICAgICAgZWxzZSBpZiAobm90aWZ5KVxuICAgICAgICAgICAgICAgIG5vdGlmeSh2YWx1ZSwgbnVsbCwgc3Vic2NpcHRpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc29sdmVkKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudEZpYmVyID0gRmliZXJDb250ZXh0LmN1cnJlbnQ7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRGaWJlcikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgRmliZXIgQ29udGV4dFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9ucyA9IGN1cnJlbnRGaWJlci5zdWJzY3JpcHRpb25zLCBvYnNlcnZlciA9IGN1cnJlbnRGaWJlci5vYnNlcnZlcjtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgbm90aWZ5ID0gb2JzZXJ2ZXI7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIG5vdGlmeSA9IGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzdWJzY2lwdGlvbikge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWUoZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBlbHNlIGlmIChmbih2YWx1ZSkpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWUsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICB9KTsgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByZWZpeCwgeCk7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUudG9Db2xsZWN0aW9uID0gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIF90aGlzLm1hcChtYXBwZXIpLnN1YnNjcmliZShzKTsgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUuY29tYmluZUxhdGVzdCA9IGZ1bmN0aW9uIChvdGhlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtudWxsLCBudWxsXTtcbiAgICAgICAgICAgIHZhciBteVN1YnNjcmlwdGlvbiwgb3RoZXJTdWJzY3JpcHRpb247XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0ge1xuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIG15U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIG90aGVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG15U3Vic2NyaXB0aW9uID0gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChpdGVtcywgZXJyb3IsIHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWVzWzBdID0gaXRlbXM7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1sxXSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWVzLCBudWxsLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvdGhlclN1YnNjcmlwdGlvbiA9IG90aGVyLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlc1sxXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbMF0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlcywgbnVsbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBWYWx1ZS5wcm90b3R5cGUuc3dpdGNoTWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgICAgdmFyIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHZhciByZXR1cm5lZFN1YnNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcHBlZFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoaXRlbSwgZXJyb3IsIHMpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBzO1xuICAgICAgICAgICAgICAgIGlmIChtYXBwZWRTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHJldHVybmVkU3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZhYmxlT3JWYWx1ZSA9IG1hcHBlcihpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlT3JWYWx1ZSAmJiB0eXBlb2Ygb2JzZXJ2YWJsZU9yVmFsdWUuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZU9yVmFsdWUuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIodmFsdWUsIGVycm9yLCByZXR1cm5lZFN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihvYnNlcnZhYmxlT3JWYWx1ZSwgbnVsbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuZWRTdWJzY3JpcHRpb247XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFZhbHVlO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBWYWx1ZSB9O1xuVmFsdWUucHJvdG90eXBlLm1hcCA9IGluaXRNYXBNZXRob2QoVmFsdWUpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsdWUuanMubWFwIiwidmFyIE9ic2VydmFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLy9zdGF0aWMgZ2V0IFtTeW1ib2wuc3BlY2llc10oKSB7IHJldHVybiB0aGlzOyB9XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShfc3Vic2NyaWJlKSB7XG4gICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IF9zdWJzY3JpYmU7XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmliZShmdW5jdGlvbiAoaXRlbXMsIGVycm9yLCBzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihpdGVtcywgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHsgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHsgfSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2YWJsZS5qcy5tYXAiLCJleHBvcnQgKiBmcm9tICcuL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZSc7XG4iLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL29ic2VydmFibGVcIjtcbmltcG9ydCB7IGluaXRNYXBNZXRob2QgfSBmcm9tIFwiLi9tYXBcIjtcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vdmFsdWVcIjtcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tIFwiLi9lbWl0dGVyXCI7XG52YXIgQ29sbGVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb2xsZWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbGxlY3Rpb24oc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBzdWJzY3JpYmUpIHx8IHRoaXM7XG4gICAgfVxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLl9tYXAgPSBmdW5jdGlvbiAobWFwcGVyKSB7XG4gICAgICAgIHRocm93IFwibWl4ZWRpblwiO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5mcm9tID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKHguc3Vic2NyaWJlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgICAgICAgICB2YXIgZW1pdHRlcl8xID0gbmV3IEVtaXR0ZXIoeCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGVtaXR0ZXJfMS5zdWJzY3JpYmUocyk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9ic2VydmFibGVDb2xsZWN0aW9uLmZyb20oKSBjYW4gb25seSB0YWtlIGFycmF5cyBvciBvYnNlcnZhYmxlc1wiKTtcbiAgICB9O1xuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gbWFwcGVyKGl0ZW0pOyB9KTsgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5mbGF0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwKGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCBpdGVtcyk7IH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwKGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gaXRlbXMuZmlsdGVyKGZpbHRlcik7IH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBDb2xsZWN0aW9uLmZyb20odGhpcy50b1ZhbHVlKCkuY29tYmluZUxhdGVzdChvdGhlcikubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIG1lID0gX2FbMF0sIG90aGVyID0gX2FbMV07XG4gICAgICAgICAgICByZXR1cm4gbWUuY29uY2F0KG90aGVyKTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUub3JkZXJCeSA9IGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGFycmF5KSB7IHJldHVybiBhcnJheS5zbGljZSgpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBhUHJvcCA9IGEgJiYgYVtwcm9wXTtcbiAgICAgICAgICAgIHZhciBiUHJvcCA9IGIgJiYgYltwcm9wXTtcbiAgICAgICAgICAgIHJldHVybiBhUHJvcCA+IGJQcm9wID8gMSA6IGFQcm9wIDwgYlByb3AgPyAtMSA6IDA7XG4gICAgICAgIH0pOyB9KS50b0NvbGxlY3Rpb24oZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUudG9WYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAocykgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlKHMpOyB9KTtcbiAgICB9O1xuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmdyb3VwQnkgPSBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgdmFyIHJ2ID0ge307XG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBydltpdGVtW3Byb3BdXSB8fCAocnZbaXRlbVtwcm9wXV0gPSBbXSk7XG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcnY7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGFycikgeyByZXR1cm4gYXJyWzBdOyB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDb2xsZWN0aW9uO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBDb2xsZWN0aW9uIH07XG5Db2xsZWN0aW9uLnByb3RvdHlwZS5fbWFwID0gaW5pdE1hcE1ldGhvZChDb2xsZWN0aW9uKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbGxlY3Rpb24uanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBvbkNsaWNrLFxuICBjbGFzc05hbWU/LFxuICBzdHlsZT8sXG4gIHRpdGxlP1xufTtcblxuZXhwb3J0IGNvbnN0IFJlbW92ZUl0ZW0gPSAoeyBvbkNsaWNrLCBjbGFzc05hbWUsIHN0eWxlLCB0aXRsZSB9OiBQcm9wcykgPT5cblxuICA8ZGl2XG4gICAgdGl0bGU9e3RpdGxlIHx8IExgUmFkZXJhYH1cbiAgICBjbGFzc05hbWU9e1wicmVtb3ZlSXRlbSBcIiArIChjbGFzc05hbWUgfHwgXCJcIil9XG4gICAgb25DbGljaz17b25DbGlja30gc3R5bGU9e3N0eWxlfSAvPlxuIiwiZXhwb3J0ICogZnJvbSAnLi9vYnNlcnZhYmxlJztcbmV4cG9ydCAqIGZyb20gJy4vdmFsdWUnO1xuZXhwb3J0ICogZnJvbSAnLi9jb2xsZWN0aW9uJztcbmV4cG9ydCAqIGZyb20gJy4vZW1pdHRlcic7XG5leHBvcnQgKiBmcm9tICcuL2ZpYmVyLWNvbnRleHQnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTTsiLCJleHBvcnQgZnVuY3Rpb24gaW5pdE1hcE1ldGhvZChjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBjdG9yKGZ1bmN0aW9uIChvYnNlcnZlcikgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG1hcHBlcih2YWx1ZSksIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVyciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH0pOyB9KTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwLmpzLm1hcCIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IFNjaG9vbE1vbWVudCwgZ2V0U2Nob29sTW9tZW50LCBhZGRZZWFyIH0gZnJvbSAnLi9zY2hvb2wtbW9tZW50JztcbmltcG9ydCB7IEFjYWRlbWljWWVhciwgVGVybSB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmltcG9ydCB7SW5qZWN0ZWRJbnRsfSBmcm9tICdyZWFjdC1pbnRsJztcblxudHlwZSBNb21lbnQgPSBtb21lbnQuTW9tZW50O1xuXG5mdW5jdGlvbiBpc1NjaG9vbE1vbWVudChvYmo6IERhdGUgfCBTY2hvb2xNb21lbnQpOiBvYmogaXMgU2Nob29sTW9tZW50IHtcbiAgcmV0dXJuICdhY2FkZW1pY1llYXInIGluIG9iajtcbn1cblxuZXhwb3J0IGNsYXNzIFNjaG9vbFRlcm0ge1xuICBhY2FkZW1pY1llYXI6IEFjYWRlbWljWWVhcjtcbiAgdGVybTogVGVybTtcblxuICBjb25zdHJ1Y3RvcihkYXRlT3JTY2hvb2xNb21lbnQ6IERhdGUgfCBTY2hvb2xNb21lbnQpIHtcbiAgICBjb25zdCBzY2hvb2xNb21lbnQgPSBpc1NjaG9vbE1vbWVudChkYXRlT3JTY2hvb2xNb21lbnQpID9cbiAgICAgIGRhdGVPclNjaG9vbE1vbWVudCA6IGdldFNjaG9vbE1vbWVudChtb21lbnQoZGF0ZU9yU2Nob29sTW9tZW50KSk7XG4gICAgdGhpcy5hY2FkZW1pY1llYXIgPSBzY2hvb2xNb21lbnQuYWNhZGVtaWNZZWFyO1xuICAgIHRoaXMudGVybSA9IHNjaG9vbE1vbWVudC50ZXJtO1xuICB9XG5cbiAgZ2V0IHllYXIoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KHRoaXMuYWNhZGVtaWNZZWFyXG4gICAgICAgIC5zcGxpdCgnLycpW3RoaXMudGVybSA9PT0gJ0FUJyA/IDAgOiAxXSk7XG4gIH1cblxuICBuZXh0VGVybSgpIHtcbiAgICByZXR1cm4gbmV3IFNjaG9vbFRlcm0odGhpcy50ZXJtID09PSAnQVQnID9cbiAgICAgIHtcbiAgICAgICAgdGVybTogJ1NUJyxcbiAgICAgICAgYWNhZGVtaWNZZWFyOiB0aGlzLmFjYWRlbWljWWVhclxuICAgICAgfSA6XG4gICAgICB7XG4gICAgICAgIHRlcm06ICdBVCcsXG4gICAgICAgIGFjYWRlbWljWWVhcjogYWRkWWVhcih0aGlzLmFjYWRlbWljWWVhciwgMSlcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJldlRlcm0oKSB7XG4gICAgcmV0dXJuIG5ldyBTY2hvb2xUZXJtKHRoaXMudGVybSA9PT0gJ0FUJyA/XG4gICAgICB7XG4gICAgICAgIHRlcm06ICdTVCcsXG4gICAgICAgIGFjYWRlbWljWWVhcjogYWRkWWVhcih0aGlzLmFjYWRlbWljWWVhciwgLTEpXG4gICAgICB9IDpcbiAgICAgIHtcbiAgICAgICAgdGVybTogJ0FUJyxcbiAgICAgICAgYWNhZGVtaWNZZWFyOiB0aGlzLmFjYWRlbWljWWVhclxuICAgICAgfSk7XG4gICAgXG4gIH1cblxuICB0b0xvY2FsZVN0cmluZyhpbnRsOiBJbmplY3RlZEludGwsIHNob3J0WWVhcj86IGJvb2xlYW4pIHtcbiAgICBsZXQgeWVhciA9IHRoaXMudGVybSA9PT0gJ0FUJyA/XG4gICAgICB0aGlzLmFjYWRlbWljWWVhci5zcGxpdCgnLycpWzBdOlxuICAgICAgdGhpcy5hY2FkZW1pY1llYXIuc3BsaXQoJy8nKVsxXTtcblxuICAgIGlmIChzaG9ydFllYXIpXG4gICAgICB5ZWFyID0geWVhci5zdWJzdHIoMik7XG5cbiAgICByZXR1cm4gdGhpcy50ZXJtID09PSAnQVQnID8gaW50bC5mb3JtYXRNZXNzYWdlKHtpZDondGVybXBsYW5uZXIuc2Vjb25kVGVybScsIGRlZmF1bHRNZXNzYWdlOidIVCB7eWVhcn0nfSwge3llYXI6IHllYXJ9KSA6IFxuICAgIGludGwuZm9ybWF0TWVzc2FnZSh7aWQ6J3Rlcm1wbGFubmVyLmZpcnN0VGVybScsIGRlZmF1bHRNZXNzYWdlOidWVCB7eWVhcn0nfSwge3llYXI6IHllYXJ9KTtcbiAgfVxufVxuIiwiY29uc3QgREVGQVVMVF9DQUNIRV9FWFBJUkFUSU9OID0gMzAgKiA2MCAqIDEwMDA7IC8vIDMwIG1pbnV0ZXMuXG5cbnR5cGUgUHJvbWlzZVJldHVybmluZ01ldGhvZE5hbWVzPEFQST4gPSB7XG4gIFtNRVRIT0QgaW4ga2V5b2YgQVBJXTogQVBJW01FVEhPRF0gZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IFByb21pc2U8YW55PiA/IE1FVEhPRCA6IG5ldmVyXG59XG5cbnR5cGUgQ29udmVydE1ldGhvZFRvU3VzcGVuc2U8Rj4gPSBGIGV4dGVuZHMgKC4uLmFyZ3M6IGluZmVyIEEpID0+IFByb21pc2U8aW5mZXIgUj4gP1xuICAoLi4uYXJnczogQSkgPT4gUiA6XG4gIEY7XG5cbmV4cG9ydCB0eXBlIFN1c3BlbnNlQmFzZWRBUEk8QVBJPiA9IHtcbiAgW01FVEhPRCBpbiBrZXlvZiBQcm9taXNlUmV0dXJuaW5nTWV0aG9kTmFtZXM8QVBJPl06IENvbnZlcnRNZXRob2RUb1N1c3BlbnNlPEFQSVtNRVRIT0RdPlxufVxuXG50eXBlIE9wdGlvbnMgPSB7XG4gIGlzQXBpTWV0aG9kPzogKHByb3A6IHN0cmluZyk9PmJvb2xlYW4sXG4gIGNhY2hlRXhwaXJhdGlvbj86IG51bWJlclxufVxuXG5jb25zdCBkZWZhdWx0T3B0aW9uczogT3B0aW9ucyA9IHtcbiAgaXNBcGlNZXRob2Q6IGYgPT4gdHlwZW9mIGYgPT09ICdmdW5jdGlvbicsXG4gIGNhY2hlRXhwaXJhdGlvbjogREVGQVVMVF9DQUNIRV9FWFBJUkFUSU9OXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVN1c3BlbnNlQXBpPEFQST4oYXBpOiBBUEksIG9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucyk6IFN1c3BlbnNlQmFzZWRBUEk8QVBJPlxue1xuICBvcHRpb25zID0gey4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zfTtcbiAgY29uc3Qge2lzQXBpTWV0aG9kLCBjYWNoZUV4cGlyYXRpb259ID0gb3B0aW9ucztcblxuICBjb25zdCBydjogU3VzcGVuc2VCYXNlZEFQSTxBUEk+ID0gT2JqZWN0LmNyZWF0ZShhcGkgYXMgYW55KSBhcyBTdXNwZW5zZUJhc2VkQVBJPEFQST47XG4gIGNvbnN0IGNhY2hlOiB7W2tleTogc3RyaW5nXToge3RpbWVvdXQ6IG51bWJlciwgdmFsdWU/OiBhbnksIGVycm9yPzogYW55LCBwcm9taXNlPzogUHJvbWlzZTxhbnk+fX0gPSB7fTtcblxuICAvLyBXYWxrIHRoZSBpbnN0YW5jZSArIHByb3RvdHlwZSBjaGFpbiB0byBnZW5lcmF0ZSBzdXNwZW5zZSB2ZXJzaW9uIG9mIGVhY2ggcHJvbWlzZSByZXR1cm5pbmcgbWV0aG9kXG4gIGZvciAobGV0IHByb3RvID0gYXBpOyBwcm90byAmJiBwcm90byAhPT0gT2JqZWN0LnByb3RvdHlwZTsgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pKSB7XG4gICAgc3VzcGVuZGlmeShwcm90byk7XG4gIH1cblxuICBmdW5jdGlvbiBzdXNwZW5kaWZ5KHByb3RvKSB7XG4gICAgT2JqZWN0LmtleXMocHJvdG8pLmZvckVhY2gocHJvcCA9PiB7XG4gICAgICBpZiAoIXJ2Lmhhc093blByb3BlcnR5KHByb3ApICYmIGlzQXBpTWV0aG9kKHByb3ApKSB7XG4gICAgICAgIHJ2W3Byb3BdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICBjb25zdCBrZXkgPSBKU09OLnN0cmluZ2lmeShbcHJvcCwgLi4uYXJnc10pO1xuICAgICAgICAgIGNvbnN0IGNhY2hlZEVudHJ5ID0gY2FjaGVba2V5XTtcbiAgICAgICAgICBpZiAoY2FjaGVkRW50cnkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGNhY2hlZEVudHJ5LnByb21pc2UpIHRocm93IGNhY2hlZEVudHJ5LnByb21pc2U7XG4gICAgICAgICAgICBpZiAoY2FjaGVkRW50cnkuZXJyb3IpIHRocm93IGNhY2hlZEVudHJ5LmVycm9yO1xuICAgICAgICAgICAgaWYgKGNhY2hlZEVudHJ5LnRpbWVvdXQgPiBEYXRlLm5vdygpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZWRFbnRyeS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBwcm90b1twcm9wXS5hcHBseShhcGksIGFyZ3MpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgY2FjaGVba2V5XSA9IHt0aW1lb3V0OiBEYXRlLm5vdygpICsgY2FjaGVFeHBpcmF0aW9uLCB2YWx1ZTogcmVzdWx0fTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgICAgY2FjaGVba2V5XSA9IHt0aW1lb3V0OiBEYXRlLm5vdygpICsgY2FjaGVFeHBpcmF0aW9uLCBlcnJvcn07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhY2hlW2tleV0gPSB7dGltZW91dDogRGF0ZS5ub3coKSArIGNhY2hlRXhwaXJhdGlvbiwgcHJvbWlzZX07XG4gICAgICAgICAgICB0aHJvdyBwcm9taXNlO1xuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IudGhlbikgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICBjYWNoZVtrZXldID0ge3RpbWVvdXQ6IERhdGUubm93KCkgKyBjYWNoZUV4cGlyYXRpb24sIGVycm9yfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gYXMgYW55O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHJ2O1xufVxuIiwiaW1wb3J0IHsgRURTQ291cnNlLCBFRFNBc3Nlc3NtZW50LCBFRFNTdHVkeVBsYW4sIEVEU1N0dWRlbnRGdXR1cmVBYmlsaXR5LCBFRFNTdHVkZW50LCBFRFNUdWl0aW9uR3JvdXAsIEVEU1R1aXRpb25TdHVkZW50LCBFRFNUZWFjaGVyLCBNb2NrRURTQWNhZGVtaWNZZWFyLCBNb2NrRURTRGF0ZVJhbmdlIH0gZnJvbSAnLi4vY29udHJhY3RzL2Vkcyc7XG5pbXBvcnQgeyBSZXN0Q2xpZW50IH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgSXNvbW9ycGhpY0VudiwgQmVhcmVyUHJvdmlkZXIsIEh0dHBFcnJvciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IFNjaG9vbE1vbWVudCwgZ2V0VGVybVN0YXJFbmREYXRlIH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLW1vbWVudCc7XG5pbXBvcnQgeyBTY2hvb2xUZXJtIH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLXRlcm0nO1xuaW1wb3J0IHsgZGF0ZVRpbWVSZXZpdmVyLCBMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IG1vY2tKc29uRmlsZSBmcm9tICcuL21vY2svbW9jay1lZHMtZGF0YS5qc29uJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IFN1c3BlbnNlQmFzZWRBUEksIG1ha2VTdXNwZW5zZUFwaSB9IGZyb20gJy4uL3V0aWxzL21ha2Utc3VzcGVuc2UtYXBpJztcblxuZXhwb3J0IGNsYXNzIEVkc0NsaWVudCB7XG4gIGh0dHA6IFJlc3RDbGllbnQ7XG4gIHVzZXJFbWFpbEdldHRlcjogKCk9PnN0cmluZztcbiAgc3VzcGVuc2U6IFN1c3BlbnNlQmFzZWRBUEk8RWRzQ2xpZW50PjtcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgaXNvbW9ycGhpYzogSXNvbW9ycGhpY0VudixcbiAgICBiYXNlVXJsOiBzdHJpbmcsXG4gICAgYmVhcmVyUHJvdmlkZXI6IEJlYXJlclByb3ZpZGVyLFxuICAgIHVzZXJFbWFpbEdldHRlcjogKCk9PnN0cmluZ1xuICApIHtcbiAgICB0aGlzLmh0dHAgPSBuZXcgUmVzdENsaWVudCAoaXNvbW9ycGhpYywgYmFzZVVybCwge2JlYXJlclByb3ZpZGVyfSk7XG4gICAgdGhpcy51c2VyRW1haWxHZXR0ZXIgPSB1c2VyRW1haWxHZXR0ZXI7XG4gICAgY29uc3QgaXNBcGlNZXRob2QgPSBtID0+XG4gICAgICB0eXBlb2YgdGhpc1ttXSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgbSAhPT0gJ2NvbnN0cnVjdG9yJyAmJiAvLyBTaW5jZSBtYWtlU3VzcGVuc2VBcGkoKSB3YWxrcyBwcm90b3R5cGUgY2hhaW5cbiAgICAgIG0gIT09ICdwcml2YXRpemluZ0NhY2hlQnVzdCcgJiZcbiAgICAgIG0gIT09ICd1c2VyRW1haWxHZXR0ZXInIC8vIExpc3Qgbm9uLUFQSSBtZXRob2RzIGhlcmUuLi5cbiAgICAgIDtcblxuICAgIE9iamVjdC5rZXlzKEVkc0NsaWVudC5wcm90b3R5cGUpLmZvckVhY2gobWV0aG9kID0+IHtcbiAgICAgIGlmIChpc0FwaU1ldGhvZChtZXRob2QpKSB7XG4gICAgICAgIHRoaXNbbWV0aG9kXSA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzW21ldGhvZF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuc3VzcGVuc2UgPSBtYWtlU3VzcGVuc2VBcGkodGhpcywge2lzQXBpTWV0aG9kfSk7XG4gIH1cblxuICBwcml2YXRlIHByaXZhdGl6aW5nQ2FjaGVCdXN0KCkge1xuICAgIHJldHVybiB7dXNlcjogdGhpcy51c2VyRW1haWxHZXR0ZXIoKX07XG4gIH1cblxuLyoqXG4gICAqIFJldHJpZXZlIGFjdGl2ZSBjb3Vyc2VzIGZvciBjdXJyZW50IGxvZ2dlZCBpbiBzdHVkZW50LlxuICAgKlxuICAgKiBAcGFyYW0gY291cnNlQ29kZSBTaG9ydC1uYW1lIG9mIHRoZSBjb3Vyc2UuIE9wdGlvbmFsLlxuICAgKi9cbiAgYXN5bmMgZ2V0QWN0aXZlQ291cnNlcyhxOiB7Y291cnNlQ29kZT86IHN0cmluZywgcGVyaW9kTmFtZTogc3RyaW5nfSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBxdWVyeTphbnkgPSB0aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCk7XG4gICAgICBpZiAocSkge1xuICAgICAgICBpZiAocS5jb3Vyc2VDb2RlKSBxdWVyeS5Db3Vyc2VDb2RlID0gcS5jb3Vyc2VDb2RlO1xuICAgICAgICBpZiAocS5wZXJpb2ROYW1lKSBxdWVyeS5QZXJpb2ROYW1lID0gcS5wZXJpb2ROYW1lO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRhY3RpdmVjb3Vyc2VzXCIsIHF1ZXJ5KTtcbiAgICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgICAgcmV0dXJuIGpzb24uY291cnNlcyBhcyBFRFNDb3Vyc2VbXTtcbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZyb20gRURTOiBcIiArIGV4KTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihMYEt1bmRlIHR5dsOkcnIgaW50ZSBsYWRkYSB0ZXJtaW5zbcOlbCBlbGxlciBhdmtsYXJhZGUgc3RlZyBmcsOlbiBFRFMuIEbDtnJzw7ZrIGlnZW4gc2VuYXJlLi4uYCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIGxhdGVzdCBhc3Nlc3NtZW50cyBmb3IgY3VycmVudCBsb2dnZWQgaW4gdXNlci5cbiAgICogXG4gICAqIEBwYXJhbSBsaW1pdCBPcHRpb25hbCBsaW1pdFxuICAgKi9cbiAgYXN5bmMgZ2V0TGF0ZXN0QXNzZXNzbWVudHMobGltaXQ/OiBudW1iZXIpIHtcbiAgICBjb25zdCBxdWVyeTphbnkgPSB0aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCk7XG4gICAgaWYgKCFpc05hTihsaW1pdCkpIHF1ZXJ5LkNvdW50ID0gbGltaXQ7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRhc3Nlc3NtZW50c1wiLCBxdWVyeSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLmFzc2Vzc21lbnRzIGFzIEVEU0Fzc2Vzc21lbnRbXTsgICAgXG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmUgc3R1ZHlwbGFucyBmb3IgY3VycmVudCBsb2dnZWQtaW4gdXNlclxuICAgKi9cbiAgYXN5bmMgZ2V0U3R1ZGVudEdvYWxzKCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJzdHVkZW50Z29hbHNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudEdvYWxzIGFzIEVEU1N0dWR5UGxhbltdOyAgICBcbiAgfVxuXG4gIGFzeW5jIGdldFN0dWRlbnRGdXR1cmVBYmlsaXRpZXMoKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRGdXR1cmVBYmlsaXRpZXNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudEZ1dHVyZUFiaWxpdGllcyBhcyBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eVtdO1xuICB9XG5cbiAgYXN5bmMgZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMoKSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInRlYWNoZXJ0dXRvcnN0dWRlbnRzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnN0dWRlbnRzIGFzIEVEU1N0dWRlbnRbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXRTY2hvb2xUdWl0aW9uR3JvdXBzKClcbiAgICogXG4gICAqIFJldHVybiB0dWl0aW9uZ3JvdXBzIGZvciBzY2hvb2xcbiAgICogXG4gICAqIEBwYXJhbSBzY2hvb2xOYW1lIC0gbmFtZSBvZiBzY2hvb2xcbiAgICogQHBhcmFtIGNvdXJzZUNvZGUgLSBTa29sdmVya2V0cyBjb2RlIGZvciBjb3Vyc2VcbiAgICovXG4gIGFzeW5jIGdldFNjaG9vbFR1aXRpb25Hcm91cHMocToge3NjaG9vbE5hbWU6IHN0cmluZywgY291cnNlQ29kZTogc3RyaW5nfSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJTY2hvb2xUdWl0aW9uR3JvdXBzXCIsIHsuLi50aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCksIC4uLnF9KTtcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgY29uc3QganNvbiA9IGF3YWl0IHJlcy5qc29uKCk7XG4gICAgcmV0dXJuIGpzb24uc2Nob29sVHVpdGlvbkdyb3VwcyBhcyBFRFNUdWl0aW9uR3JvdXBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXRUdWl0aW9uR3JvdXBTdHVkZW50cygpXG4gICAqIFxuICAgKiBSZXR1cm4gbmFtZSBhbmQgbWFpbGFkcmVzc2VzIGZvciB0dXRpdGlvbmdyb3VwcyBpbiBzY2hvb2xzXG4gICAqIFxuICAgKiBAcGFyYW0gc2Nob29sTmFtZSAtIG5hbWUgb2Ygc2Nob29sXG4gICAqIEBwYXJhbSB0dWl0aW9uR3JvdXBOYW1lIC0gdHVpdGlvbiBncnVvcCBuYW1lIGluIEVEU1xuICAgKi9cbiAgYXN5bmMgZ2V0VHVpdGlvbkdyb3VwU3R1ZGVudHMocToge3NjaG9vbE5hbWU6IHN0cmluZywgdHVpdGlvbkdyb3VwTmFtZTogc3RyaW5nfSkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJUdWl0aW9uR3JvdXBTdHVkZW50c1wiLCB7Li4udGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpLCAuLi5xfSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnR1aXRpb25Hcm91cFN0dWRlbnRzIGFzIEVEU1R1aXRpb25TdHVkZW50W107XG4gIH1cblxuICAvKipcbiAgICogZ2V0U2Nob29sVGVhY2hlcnMoKVxuICAgKiBcbiAgICogUmV0dXJuIG5hbWUgYW5kIG1haWxhZHJlc3NlcyBmb3IgdHV0aXRpb25ncm91cHMgaW4gc2Nob29sc1xuICAgKiBcbiAgICogQHBhcmFtIHNjaG9vbE5hbWUgLSBuYW1lIG9mIHNjaG9vbFxuICAgKi9cbiAgYXN5bmMgZ2V0U2Nob29sVGVhY2hlcnMocToge3NjaG9vbE5hbWU6IHN0cmluZ30pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwiU2Nob29sVGVhY2hlcnNcIiwgey4uLnRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSwgLi4ucX0pO1xuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ganNvbi5zY2hvb2xUZWFjaGVycyBhcyBFRFNUZWFjaGVyW107XG4gIH1cbiAgLy8gd2UgYXNzdW1lIHRoYXQgdGhlIEVEUyB3aWxsIHJldHVybiB0aGUgY3VycmVudCBhY2FkZW1pYyB5ZWFyIGRhdGVzIGRldGVybWluZWQgYnkgdGhlIGN1cnJlbnQgZGF0ZVxuICBhc3luYyBnZXRBY2FkZW1pY1llYXJUZXJtcyhzY2hvb2xMb2NhbGU6IHN0cmluZywgZGF0ZTogRGF0ZSkge1xuICAgIC8vIG1vY2sgZGF0YVxuICAgIHN3aXRjaCAoc2Nob29sTG9jYWxlKSB7XG4gICAgICBjYXNlICdlbl9zaW4nOlxuICAgICAgcmV0dXJuIG1vY2tKc29uRmlsZS5Tb3V0aEluZGlhLmZpbHRlcihmID0+IG1vbWVudChkYXRlKS5pc1NhbWVPckFmdGVyKGYuZmlyc3RUZXJtLnN0YXJ0RGF0ZSkgJiYgbW9tZW50KGRhdGUpLmlzU2FtZU9yQmVmb3JlKGYuc2Vjb25kVGVybS5lbmREYXRlKSlbMF0gYXMgTW9ja0VEU0FjYWRlbWljWWVhcjtcbiAgICAgIGNhc2UgJ2VuX25pbic6XG4gICAgICByZXR1cm4gbW9ja0pzb25GaWxlLk5vcnRoSW5kaWEuZmlsdGVyKGYgPT4gbW9tZW50KGRhdGUpLmlzU2FtZU9yQWZ0ZXIoZi5maXJzdFRlcm0uc3RhcnREYXRlKSAmJiBtb21lbnQoZGF0ZSkuaXNTYW1lT3JCZWZvcmUoZi5zZWNvbmRUZXJtLmVuZERhdGUpKVswXSBhcyBNb2NrRURTQWNhZGVtaWNZZWFyO1xuICAgICAgY2FzZSAnc3YnOlxuICAgICAge1xuICAgICAgdmFyIGhvbGlkYXlzID0gW10gYXMgTW9ja0VEU0RhdGVSYW5nZVtdO1xuICAgICAgdmFyIGZpcnN0VGVybU1vbWVudCA9IGdldFRlcm1TdGFyRW5kRGF0ZShkYXRlLCB0cnVlKTtcbiAgICAgIHZhciBzZWNvbmRUZXJtTW9tZW50ID0gZ2V0VGVybVN0YXJFbmREYXRlKGRhdGUsIGZhbHNlKTtcblxuICAgICAgdmFyIHN0YXJ0Rmlyc3RUZXJtRGF0ZSA9IGZpcnN0VGVybU1vbWVudFswXTtcbiAgICAgIHZhciBzdGFydFNlY29uZFRlcm1EYXRlID0gc2Vjb25kVGVybU1vbWVudFswXTtcbiAgICAgIHZhciBlbmRGaXJzdFRlcm1EYXRlID0gZmlyc3RUZXJtTW9tZW50WzFdO1xuICAgICAgdmFyIGVuZFNlY29uZFRlcm1EYXRlID0gc2Vjb25kVGVybU1vbWVudFsxXTtcblxuICAgICAgY29uc3QgZmlyc3RUZXJtID0ge3N0YXJ0RGF0ZTogbmV3IERhdGUoc3RhcnRGaXJzdFRlcm1EYXRlLnllYXIoKSwgc3RhcnRGaXJzdFRlcm1EYXRlLm1vbnRoKCksIHN0YXJ0Rmlyc3RUZXJtRGF0ZS5kYXRlKCkpLnRvRGF0ZVN0cmluZygpLCBlbmREYXRlOiBuZXcgRGF0ZShzdGFydEZpcnN0VGVybURhdGUueWVhcigpLCBlbmRGaXJzdFRlcm1EYXRlLm1vbnRoKCksIGVuZEZpcnN0VGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKX07XG4gICAgICBjb25zdCBzZWNvbmRUZXJtID0ge3N0YXJ0RGF0ZTogbmV3IERhdGUoc3RhcnRTZWNvbmRUZXJtRGF0ZS55ZWFyKCksIHN0YXJ0U2Vjb25kVGVybURhdGUubW9udGgoKSwgc3RhcnRTZWNvbmRUZXJtRGF0ZS5kYXRlKCkpLnRvRGF0ZVN0cmluZygpLCBlbmREYXRlOiBuZXcgRGF0ZShzdGFydFNlY29uZFRlcm1EYXRlLnllYXIoKSwgZW5kU2Vjb25kVGVybURhdGUubW9udGgoKSwgZW5kU2Vjb25kVGVybURhdGUuZGF0ZSgpKS50b0RhdGVTdHJpbmcoKX07XG4gICAgICByZXR1cm4ge2ZpcnN0VGVybSwgc2Vjb25kVGVybSwgaG9saWRheXN9O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5cblxuZXhwb3J0IGNsYXNzIEVEU1BlcmlvZCB7XG4gIHBlcmlvZDogc3RyaW5nO1xuICB0ZXJtOiAnQVQnIHwgJ1NUJztcbiAgeWVhcjogbnVtYmVyO1xuICBjb25zdHJ1Y3RvciAocGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtOiBzdHJpbmcgfCBTY2hvb2xNb21lbnQpIHtcbiAgICBpZiAodHlwZW9mIHBlcmlvZFN0cmluZ09yU2Nob29sVGVybSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucGVyaW9kID0gcGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtO1xuICAgICAgdGhpcy50ZXJtID0gdGhpcy5wZXJpb2Quc3RhcnRzV2l0aCgnSFQnKSA/ICdBVCcgOiAnU1QnO1xuICAgICAgdGhpcy55ZWFyID0gcGFyc2VJbnQodGhpcy5wZXJpb2Quc3Vic3RyKDIpKTtcbiAgICAgIGlmIChpc05hTih0aGlzLnllYXIpKSB0aHJvdyBuZXcgRXJyb3IgKGBJbnZhbGlkIHBlcmlvZDogJHt0aGlzLnBlcmlvZH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2Nob29sVGVybSA9IG5ldyBTY2hvb2xUZXJtKHBlcmlvZFN0cmluZ09yU2Nob29sVGVybSk7XG4gICAgICB0aGlzLnBlcmlvZCA9IChzY2hvb2xUZXJtLnRlcm0gPT09ICdBVCcgPyBcIkhUXCIgOiBcIlZUXCIpICsgc2Nob29sVGVybS55ZWFyO1xuICAgICAgdGhpcy50ZXJtID0gc2Nob29sVGVybS50ZXJtO1xuICAgICAgdGhpcy55ZWFyID0gc2Nob29sVGVybS55ZWFyO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzY2hvb2xUZXJtICgpIDogU2Nob29sVGVybSB7XG4gICAgcmV0dXJuIG5ldyBTY2hvb2xUZXJtKHtcbiAgICAgIGFjYWRlbWljWWVhcjogdGhpcy50ZXJtID09PSAnQVQnID9cbiAgICAgICAgYCR7dGhpcy55ZWFyfS8ke3RoaXMueWVhciArIDF9YCA6XG4gICAgICAgIGAke3RoaXMueWVhci0xfS8ke3RoaXMueWVhcn1gLFxuICAgICAgdGVybTogdGhpcy50ZXJtXG4gICAgfSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5wZXJpb2Q7XG4gIH1cblxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnllYXIgKyBcIjpcIiArICh0aGlzLnRlcm0gPT09ICdTVCcgPyBcIjFcIiA6IFwiMlwiKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKc29uRGF0ZV9vbGQgKGpzb25EYXRlU3RyOiBzdHJpbmcpIDogRGF0ZSB7XG4gIGNvbnN0IGRhdGUgPSBkYXRlVGltZVJldml2ZXIoXCJcIiwganNvbkRhdGVTdHIpO1xuICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlNPTiBkYXRlIHN0cmluZzogXCIgKyBqc29uRGF0ZVN0cik7XG4gIHJldHVybiBkYXRlO1xufVxuXG5mdW5jdGlvbiBhdm9pZFNpbXVsdGFub3VzQ2FsbHM8VCxBPihtZXRob2Q6ICguLi5hcmdzOkFbXSk9PlByb21pc2U8VD4pIDogKC4uLmFyZ3M6QVtdKT0+UHJvbWlzZTxUPiB7XG4gIGxldCBvbmdvaW5nUHJvbWlzZXM6IHtbYXJnc0pzb246IHN0cmluZ106IFByb21pc2U8VD59ID0ge307XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBhcmdzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgaWYgKCFvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dKSB7XG4gICAgICBvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihyZXN1bHQ9PntcbiAgICAgICAgZGVsZXRlIG9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl07XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl07XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IElDb3Vyc2VFZGl0b3JIb3N0IH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0XCI7XG5pbXBvcnQgeyBDb3Vyc2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyByZWFkQmxvYkFzVGV4dCwgYWxsb3dDb3B5LCByZWFkQmxvYkFzRGF0YVVybCB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgc2hvd0Vycm9yLCBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSBcImtlZGJhY2tlbmQvY2xpZW50XCI7XG5pbXBvcnQgeyBoYXNBY2Nlc3MgfSBmcm9tIFwiLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2xcIjtcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcblxudHlwZSBDYWxsYmFjayA9ICgpID0+IHZvaWQ7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHRpdGxlOiBzdHJpbmcsXG4gIGFjdGl2ZVBhZ2U6IEJhbm5lck1lbnVJdGVtLFxuICBjYWxsYmFja3M/OiB7IFttZW51TmFtZTogc3RyaW5nXTogQ2FsbGJhY2sgfSxcbiAgcm91dGVzOiB7IFttZW51TmFtZTogc3RyaW5nXTogc3RyaW5nIH0gJiB7IGZlZWRiYWNrOiBzdHJpbmcgfSxcbiAgYmFja2dyb3VuZEltYWdlPzogc3RyaW5nLFxuICBpc1RlbXBsYXRlPyxcbiAgaG9zdD86IElDb3Vyc2VFZGl0b3JIb3N0LFxuICBjb3Vyc2U/OiBDb3Vyc2UsXG4gIG9yaWdDb3Vyc2U/OiBDb3Vyc2Vcbn1cblxudHlwZSBCYW5uZXJNZW51SXRlbSA9XG4gIFwiY291cnNlQnVpbGRlclwiIHxcbiAgXCJzdHVkZW50UGFnZVwiIHxcbiAgXCJ0ZW1wbGF0ZUJ1aWxkZXJcIiB8XG4gIFwic3ViamVjdHNcIiB8XG4gIFwic2Nob29sc1wiO1xuXG5jb25zdCBBZG1pbk1lbnVJdGVtcyA9IFtcbiAgeyBuYW1lOiBcInNjaG9vbHNcIiwgdGV4dDogTGBTa29sb3JgLCByb3V0ZTogXCIvc2Nob29sc1wiIH0sXG4gIHsgbmFtZTogXCJzdWJqZWN0c1wiLCB0ZXh0OiBMYMOEbW5lbmAsIHJvdXRlOiBcIi9zdWJqZWN0c1wiIH0sXG4gIC8ve25hbWU6IFwidGVtcGxhdGVCdWlsZGVyXCIsIHRleHQ6IExgTWFsbGJ5Z2dhcmVuYCwgcm91dGU6IFwiL2NvdXJzZS10ZW1wbGF0ZXNcIn0sXG5dXG5cbmNvbnN0IE5vbkFkbWluTWVudUl0ZW1zID0gW1xuICB7IG5hbWU6IFwiY291cnNlQnVpbGRlclwiLCB0ZXh0OiBMYEt1cnNieWdnYXJlbmAsIHJvdXRlOiBcIi9jb3Vyc2VzL25ld1wiIH0sXG4gIHsgbmFtZTogXCJzdHVkZW50UGFnZVwiLCB0ZXh0OiBMYEVsZXZzaWRhYCwgcm91dGU6IFwiXCIgfSxcbiAgeyBuYW1lOiBcImZlZWRiYWNrXCIsIHRleHQ6IDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLWNvbW1lbnRpbmctb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4gRmVlZGJhY2s8L3NwYW4+LCByb3V0ZTogXCJodHRwczovL2tnLmt1bnNrYXBzcG9ydGVuLnNlL2t1cnNieWdnYXJlbi9cIiB9XG5dXG5cblxuYXN5bmMgZnVuY3Rpb24gb25Ecm9wSW1hZ2UoZXY6IFJlYWN0LkRyYWdFdmVudDxIVE1MRGl2RWxlbWVudD4sIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0LCBjb3Vyc2U6IENvdXJzZSwgb3JpZ0NvdXJzZTogQ291cnNlKSB7XG4gIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICBjb25zdCBmaWxlcyA9IGV2LmRhdGFUcmFuc2Zlci5maWxlcztcbiAgbGV0IHVybCA9IG51bGw7XG4gIGNvbnN0IGl0ZW1zID0gQXJyYXkuZnJvbShldi5kYXRhVHJhbnNmZXIuaXRlbXMpO1xuICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGZpbGUgPSBmaWxlc1swXTtcbiAgICBpZiAoZmlsZS5zaXplID4gMiAqIDEwMjQgKiAxMDI0KSB7XG4gICAgICBzaG93RXJyb3IoTGBLYW4gaW50ZSBsYWRkYSB1cHAgYmlsZGVyIHN0w7ZycmUgw6RuIDIgTUJgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy91cmwgPSBhd2FpdCByZWFkQmxvYkFzRGF0YVVybChmaWxlKTtcbiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgZm9ybS5hcHBlbmQoXCJmaWxlc1wiLCBmaWxlKTtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5odHRwLmZldGNoKFxuICAgICAgJ3dlYi11cGxvYWQnLFxuICAgICAgJ3B1dCcsXG4gICAgICB7fSxcbiAgICAgIHt9LFxuICAgICAge1xuICAgICAgICBib2R5OiBmb3JtXG4gICAgICB9KTtcbiAgICBpZiAocmVzLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICBzaG93RXJyb3IoTGBLdW5kZSBpbnRlIGxhZGRhIHVwcCBmaWxlbiB0aWxsIEdvb2dsZSBTdG9yYWdlYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHVybCA9IGF3YWl0IHJlcy50ZXh0KCk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgaWYgKGl0ZW0udHlwZS5tYXRjaCgnXnRleHQvdXJpLWxpc3QnKSkge1xuICAgICAgICAvLyBVUklcbiAgICAgICAgdXJsID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBpdGVtLmdldEFzU3RyaW5nKHJlc29sdmUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHVybCA9PSBudWxsKSB7XG4gICAgc2hvd0Vycm9yKExgS3VuZGUgaW50ZSBoaXR0YSBuw6Vnb24gYmlsZCBpIGlubmVow6VsbGV0YCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHNldENvdXJzZUltYWdlKGNvdXJzZSwgb3JpZ0NvdXJzZSwgaG9zdCwgdXJsKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldENvdXJzZUltYWdlKFxuICBjb3Vyc2U6IENvdXJzZSxcbiAgb3JpZ0NvdXJzZTogQ291cnNlLFxuICBob3N0OiBJQ291cnNlRWRpdG9ySG9zdCxcbiAgdXJsOiBzdHJpbmdcbikge1xuICBjb25zdCBpbWFnZUlkID0gY3JlYXRlVVVJRCgpO1xuICBob3N0LnVwZGF0ZSh7XG4gICAgaW1hZ2VJZDogeyAkc2V0OiBpbWFnZUlkIH0sXG4gICAgaW1hZ2VzOiB7XG4gICAgICAkc2V0OiBbe1xuICAgICAgICBpZDogaW1hZ2VJZCxcbiAgICAgICAgdXJsLFxuICAgICAgICBhY2w6IFtcbiAgICAgICAgICBgcm9sZTpVU0VSOlJgLFxuICAgICAgICAgIGBzY2hvb2xSb2xlOiR7ZW52LmN1cnJlbnRVc2VyLnNjaG9vbH0vRU1QTE9ZRUU6U2BcbiAgICAgICAgXSxcbiAgICAgICAgJG1ldGE6ICdhZGQnXG4gICAgICB9XVxuICAgIH1cbiAgfSk7XG59XG5cbi8qIFRoaXMgdmVyc2lvbiBoYWQgdGhlIGJ1ZyB0aGF0IG9sZCBpbWFnZXMgd2VyZSBub3QgcmVwbGFjZWQuXG5PbmUgY291cnNlIGF0IFVwcHNhbGEgY29udGFpbmVkIDEyIGltYWdlcy5cblxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q291cnNlSW1hZ2VPbGQoXG4gIGNvdXJzZTogQ291cnNlLFxuICBvcmlnQ291cnNlOiBDb3Vyc2UsXG4gIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0LFxuICB1cmw6IHN0cmluZylcbntcbiAgaWYgKCFvcmlnQ291cnNlIHx8ICFvcmlnQ291cnNlLmltYWdlSWQpIHtcbiAgICBjb25zdCBpbWFnZUlkID0gY3JlYXRlVVVJRCgpO1xuICAgIGhvc3QudXBkYXRlKHtcbiAgICAgIGltYWdlSWQ6IHsgJHNldDogaW1hZ2VJZCB9LFxuICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICRwdXNoOiBbe1xuICAgICAgICAgIGlkOiBpbWFnZUlkLFxuICAgICAgICAgIHVybCxcbiAgICAgICAgICBhY2w6IGNvdXJzZS5pc1RlbXBsYXRlID8gW1wicm9sZTpVU0VSOlJcIl0gOiBbXCJyb2xlOlVTRVI6UlwiLCBgc2Nob29sUm9sZToke2Vudi5jdXJyZW50VXNlci5zY2hvb2x9L0VNUExPWUVFOlNgXSxcbiAgICAgICAgICAkbWV0YTogJ2FkZCdcbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBVcGRhdGUgZXhpc3RpbmcgaW1hZ2U6XG4gICAgY29uc3QgaW1nSWR4ID0gY291cnNlLmltYWdlcy5maW5kSW5kZXgoaW1nID0+IGltZy5pZCA9PT0gY291cnNlLmltYWdlSWQpO1xuICAgIGlmIChpbWdJZHggPj0gMCkge1xuICAgICAgY29uc3QgaW1hZ2VFbnRpdHkgPSBjb3Vyc2UuaW1hZ2VzW2ltZ0lkeF07XG4gICAgICBpZiAoY291cnNlLmlzVGVtcGxhdGUpIHtcbiAgICAgICAgLy8gVGVtcGxhdGVzOiBVcGRhdGUgdGhlIHRlbXBsYXRlIGltYWdlIGNvbnRlbnQ6XG4gICAgICAgIGhvc3QudXBkYXRlKHtcbiAgICAgICAgICBpbWFnZXM6IHtcbiAgICAgICAgICAgICRzcGxpY2U6IFtbaW1nSWR4LCAxLCB7XG4gICAgICAgICAgICAgIC4uLmltYWdlRW50aXR5LFxuICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICRtZXRhOiAndXBkYXRlJ1xuICAgICAgICAgICAgfV1dXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVhbCBjb3Vyc2VzOiBSZXBsYWNlIHdpdGggYSBuZXcgaW1hZ2VcbiAgICAgICAgY29uc3QgaW1hZ2VJZCA9IGNyZWF0ZVVVSUQoKTtcbiAgICAgICAgaG9zdC51cGRhdGUoe1xuICAgICAgICAgIGltYWdlSWQ6IHsgJHNldDogaW1hZ2VJZCB9LFxuICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgJHNwbGljZTogW1tpbWdJZHgsIDEsIHtcbiAgICAgICAgICAgICAgaWQ6IGltYWdlSWQsXG4gICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgYWNsOiBbXG4gICAgICAgICAgICAgICAgYHJvbGU6VVNFUjpSYCxcbiAgICAgICAgICAgICAgICBgc2Nob29sUm9sZToke2Vudi5jdXJyZW50VXNlci5zY2hvb2x9L0VNUExPWUVFOlNgXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICRtZXRhOiAnYWRkJ1xuICAgICAgICAgICAgfV1dXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzaG93RXJyb3IoTGBLdW5kZSBpbnRlIHVwcGRhdGVyYSBiaWxkZW4uYCk7XG4gICAgfVxuICB9XG59XG4qL1xuXG5leHBvcnQgY29uc3QgQ291cnNlQmFubmVyID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCB7IHRpdGxlLCBpc1RlbXBsYXRlLCBob3N0LCBjb3Vyc2UsIG9yaWdDb3Vyc2UsIGJhY2tncm91bmRJbWFnZSwgYWN0aXZlUGFnZSB9ID0gcHJvcHM7XG4gIGNvbnN0IGlzQWRtaW4gPSBlbnYuY3VycmVudFVzZXIucm9sZXMuc29tZShyb2xlID0+IHJvbGUgPT09IFwiQURNSU5cIik7XG4gIGxldCBtZW51SXRlbXMgPSBOb25BZG1pbk1lbnVJdGVtcztcbiAgaWYgKGlzQWRtaW4pIG1lbnVJdGVtcyA9IEFkbWluTWVudUl0ZW1zLmNvbmNhdChtZW51SXRlbXMpO1xuXG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tMTJcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytc2NyaXB0LXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgICB7YmFja2dyb3VuZEltYWdlICYmIDxzdHlsZT57YFxuICAgICAgICAucGFnZUhlYWRlciB7XG4gICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCcke2JhY2tncm91bmRJbWFnZX0nKSAhaW1wb3J0YW50O1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+fVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2VIZWFkZXJcIlxuICAgICAgICAgIG9uRHJhZ092ZXI9e2NvdXJzZSAmJiBhbGxvd0NvcHl9XG4gICAgICAgICAgb25Ecm9wPXtjb3Vyc2UgJiYgKGV2ID0+IG9uRHJvcEltYWdlKGV2LCBob3N0LCBjb3Vyc2UsIG9yaWdDb3Vyc2UpKX0+XG4gICAgICAgICAgPGE+XG4gICAgICAgICAgICA8aDE+e3RpdGxlfTwvaDE+XG4gICAgICAgICAgPC9hPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uc0ZpZWxkXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ1dHRvbnNDb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdob3Jpem9udGFsTWVudSc+XG4gICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAge21lbnVJdGVtcy5tYXAoaXRlbSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZTogYWN0aXZlUGFnZSA9PT0gaXRlbS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogcHJvcHMuY2FsbGJhY2tzICYmIHByb3BzLmNhbGxiYWNrc1tpdGVtLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICBnaXZlblJvdXRlOiAocHJvcHMucm91dGVzICYmIHByb3BzLnJvdXRlc1tpdGVtLm5hbWVdKSxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFJvdXRlOiBpdGVtLnJvdXRlXG4gICAgICAgICAgICAgICAgICB9KSkuZmlsdGVyKHggPT4geC5jYWxsYmFjayB8fCB4LmRlZmF1bHRSb3V0ZSB8fCB4LmdpdmVuUm91dGUpLm1hcCgoeyBpdGVtLCBpc0FjdGl2ZSwgY2FsbGJhY2ssIGRlZmF1bHRSb3V0ZSwgZ2l2ZW5Sb3V0ZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8bGlcbiAgICAgICAgICAgICAgICAgICAgICBrZXk9e2l0ZW0ubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2lzQWN0aXZlID8gXCJhY3RpdmVQYWdlXCIgOiBcIlwifVxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e2NhbGxiYWNrfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAge2NhbGxiYWNrID9cbiAgICAgICAgICAgICAgICAgICAgICAgIDxhPntpdGVtLnRleHR9PC9hPiA6XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Um91dGUgfHwgZ2l2ZW5Sb3V0ZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuUm91dGUgfHwgL15odHRwW3NdXFw6XFwvXFwvL2kudGVzdChkZWZhdWx0Um91dGUpID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPXtnaXZlblJvdXRlIHx8IGRlZmF1bHRSb3V0ZX0+e2l0ZW0udGV4dH08L2E+IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TGluayB0bz17ZGVmYXVsdFJvdXRlfT57aXRlbS50ZXh0fTwvTGluaz4gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8YT57aXRlbS50ZXh0fTwvYT59XG4gICAgICAgICAgICAgICAgICAgIDwvbGk+O1xuICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG59XG4iLCJpbXBvcnQgeyBDb2xsZWN0aW9uLCBFbWl0dGVyLCBWYWx1ZSB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL2RiJztcbmltcG9ydCB7IGZsYXR0ZW4sIGRpc3RpbmN0IH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgV2l0aEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XG5cbi8qKiBDb3Vyc2UgKi9cbmludGVyZmFjZSBPcmRlckRlZmluaW5nRG9jIHtcbiAga25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXI/OiBzdHJpbmdbXSAgIC8vIENvdXJzZVxuICBjZW50cmFsQ29udGVudE9yZGVyPzogc3RyaW5nW10gICAgICAgICAgLy8gQ291cnNlXG4gIGFiaWxpdGllc09yZGVyPzogc3RyaW5nW10gICAgICAgICAgICAgICAvLyBDb3Vyc2UgKyBTdWJqZWN0XG59XG5cbi8qKiBDb3Vyc2UsIENvdXJzZUluc3RhbmNlLCBUYXNrLCBMZWFybmluZ0dvYWxzQ29udGVudCBvciBDb3Vyc2VCbG9jayAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXF1aXJlbWVudHNDb250YWluaW5nRG9jIHtcbiAgdGFnczogc3RyaW5nW107ICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvdXJzZSArIENvdXJzZUluc3RhbmNlLCBUYXNrXG4gIGNlbnRyYWxDb250ZW50Pzoge2lkOiBzdHJpbmd9W107ICAgICAgICAvLyBDb3Vyc2UgKyBMZWFybmluZ0dvYWxzQ29udGVudCArIENvdXJzZUJsb2NrICsgVGFza1xuICBrbm93bGVkZ2VSZXF1aXJlbWVudHM/OiB7aWQ6IHN0cmluZ31bXTsgLy8gQ291cnNlICsgTGVhcm5pbmdHb2Fsc0NvbnRlbnQgKyBDb3Vyc2VCbG9jayArIFRhc2tcbiAgYWJpbGl0aWVzPzoge2lkOiBzdHJpbmd9W107IC8vIENvdXJzZSwgTGVhcm5pbmdHb2Fsc0NvbnRlbnQsIENvdXJzZUJsb2NrLCBUYXNrXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcmRlcmVkRG9jczxUIGV4dGVuZHMge2lkOiBzdHJpbmd9Pihkb2NzPzogVFtdLCBvcmRlcj86IHN0cmluZ1tdLCB7YXBwZW5kTGVmdG92ZXJzfSA9IHthcHBlbmRMZWZ0b3ZlcnM6ZmFsc2V9KSB7XG4gIC8vIE1hcmsgZG9jIElEcyB0aGF0IHdoZXJlIHByZXNlbnQgaW4gZ2l2ZW4gJ29yZGVyJyBhcnJheS5cbiAgLy8gV2lsbCBiZSB1c2VkIHRvIGZpbmQgbGVmdC1vdmVycyB0aGF0IHdlcmUgbm90IHByZXNlbnQgaW4gdGhlICdvcmRlcicgYXJyYXkuXG4gIGNvbnN0IG1hcmtlZERvY3M6IHtbaWQ6IHN0cmluZ106IHRydWV9ID0ge307XG5cbiAgaWYgKCFkb2NzIHx8ICFvcmRlcikge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbm8gZG9jcyBvciBubyBvcmRlci4gRG9uJ3QgZmFpbC4gSnVzdCByZXR1cm4gZG9jcyBhcyBpcy5cbiAgICByZXR1cm4gZG9jcztcbiAgfVxuXG4gIC8vIE1hcCBnaXZlbiAnb3JkZXInIGFycmF5IHRvIGNvcnJlc3BvbmRpbmcgZG9jcy4gQWxzbyBtYXJrIGluIG1hcmtlZERvY3MuXG4gIGNvbnN0IHJlc3VsdCA9IChkb2NzICYmIG9yZGVyID9cbiAgICBvcmRlci5tYXAoaWQgPT4ge1xuICAgICAgbWFya2VkRG9jc1tpZF0gPSB0cnVlO1xuICAgICAgcmV0dXJuIGRvY3MuZmluZChkb2MgPT4gZG9jLmlkID09PSBpZCk7XG4gICAgfSkuZmlsdGVyKGRvYyA9PiAhIWRvYykgOlxuICAgIGRvY3MpO1xuXG4gIGlmIChhcHBlbmRMZWZ0b3ZlcnMpIHsgICAgICBcbiAgICAvLyBJZiBhbnkgbGVmdG92ZXJzIGFyZSB0aGVyZSwgY29uY2F0IHRoZW0gYXQgdGhlIGVuZDpcbiAgICBjb25zdCBsZWZ0T3ZlcnMgPSBkb2NzLmZpbHRlcihkb2MgPT4gIW1hcmtlZERvY3NbZG9jLmlkXSk7XG4gICAgcmV0dXJuIHJlc3VsdC5jb25jYXQobGVmdE92ZXJzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUmVxdWlyZW1lbnRPcmRlcjxUIGV4dGVuZHMgUmVxdWlyZW1lbnRzQ29udGFpbmluZ0RvYz4ob2JqOiBULCBvcmRlckRlZmluZXI/OiBPcmRlckRlZmluaW5nRG9jKTogVmFsdWU8VD4ge1xuICBsZXQgb3JkZXJEZWZpbmluZ0RvY09ic2VydmFibGU6IFZhbHVlPE9yZGVyRGVmaW5pbmdEb2NbXT47XG4gIGlmIChvcmRlckRlZmluZXIpIHtcbiAgICAvLyBVc2VyIHByb3ZpZGVkIHRoZSBvcmRlckRlZmluaW5nIGRvYyAodXNlIGNhc2UgaXMgd2hlbiBvYmogaXMgYSBDb3Vyc2Ugb3IgU3ViamVjdCwgd2hpY2ggY29udGFpbnMgaXRzIG9yZGVyIGJ5IGl0c2VsZi4gVXNlciB0aGVuIHByb3ZpZGVzIHRoZSBDb3Vyc2Ugb3IgU3ViamVjdCBpbiBib3RoIGFyZ3MpXG4gICAgb3JkZXJEZWZpbmluZ0RvY09ic2VydmFibGUgPSBuZXcgRW1pdHRlcihbb3JkZXJEZWZpbmVyXSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY291cnNlQ29kZXMgPSBvYmoudGFncy5maWx0ZXIodGFnID0+IHRhZy5zdGFydHNXaXRoKFwiY291cnNlOlwiKSk7XG4gICAgaWYgKGNvdXJzZUNvZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG5ldyBFbWl0dGVyKG9iaik7IC8vIE5vIGNvdXJzZSB0YWdzLiBOb3QgcG9zc2libGUgdG8gcmVzb2x2ZSBvcmRlci5cbiAgICB9XG4gICAgb3JkZXJEZWZpbmluZ0RvY09ic2VydmFibGUgPSBkYi5jb3Vyc2VzLnRhZ3MoLi4uY291cnNlQ29kZXMpLnRvVmFsdWUoKTtcbiAgfVxuXG4gIHJldHVybiBvcmRlckRlZmluaW5nRG9jT2JzZXJ2YWJsZS5tYXAob3JkZXJIb2xkZXJzID0+IHtcbiAgICBjb25zdCBhYmlsaXRpZXNPcmRlciA9IGZsYXR0ZW4ob3JkZXJIb2xkZXJzLm1hcChvcmRlckhvbGRlciA9PiBvcmRlckhvbGRlci5hYmlsaXRpZXNPcmRlciB8fCBbXSkpO1xuICAgIGNvbnN0IGNjT3JkZXIgPSBmbGF0dGVuKG9yZGVySG9sZGVycy5tYXAob3JkZXJIb2xkZXIgPT4gb3JkZXJIb2xkZXIuY2VudHJhbENvbnRlbnRPcmRlciB8fCBbXSkpO1xuICAgIGNvbnN0IGtyT3JkZXIgPSBmbGF0dGVuKG9yZGVySG9sZGVycy5tYXAob3JkZXJIb2xkZXIgPT4gb3JkZXJIb2xkZXIua25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIgfHwgW10pKTtcbiAgICBjb25zdCBvYmpDbG9uZSA9IE9iamVjdC5hc3NpZ24oe30sIG9iaik7XG4gICAgaWYgKG9iakNsb25lLmFiaWxpdGllcykgb2JqQ2xvbmUuYWJpbGl0aWVzID0gZ2V0T3JkZXJlZERvY3Mob2JqLmFiaWxpdGllcywgYWJpbGl0aWVzT3JkZXIpO1xuICAgIGlmIChvYmpDbG9uZS5jZW50cmFsQ29udGVudCkgb2JqQ2xvbmUuY2VudHJhbENvbnRlbnQgPSBnZXRPcmRlcmVkRG9jcyhvYmouY2VudHJhbENvbnRlbnQsIGNjT3JkZXIpO1xuICAgIGlmIChvYmpDbG9uZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMpIG9iakNsb25lLmtub3dsZWRnZVJlcXVpcmVtZW50cyA9IGdldE9yZGVyZWREb2NzKG9iai5rbm93bGVkZ2VSZXF1aXJlbWVudHMsIGtyT3JkZXIpO1xuICAgIHJldHVybiBvYmpDbG9uZTtcbiAgfSk7XG59XG4iLCJ2YXIgc3RhY2sgPSBbXTtcbnZhciBjdXJyZW50RmliZXIgPSBudWxsO1xudmFyIHByb3ZpZGVycyA9IFtmdW5jdGlvbiAoKSB7IHJldHVybiBjdXJyZW50RmliZXI7IH1dO1xuZnVuY3Rpb24gcHVzaEZpYmVyKGZpYmVyKSB7XG4gICAgc3RhY2sucHVzaChjdXJyZW50RmliZXIpO1xuICAgIGN1cnJlbnRGaWJlciA9IGZpYmVyO1xufVxuZnVuY3Rpb24gcG9wRmliZXIoKSB7XG4gICAgY3VycmVudEZpYmVyID0gc3RhY2sucG9wKCk7XG59XG5leHBvcnQgdmFyIEZpYmVyQ29udGV4dCA9IHtcbiAgICBnZXQgY3VycmVudCgpIHsgcmV0dXJuIGN1cnJlbnRGaWJlcjsgfSxcbiAgICAvKnJ1bjogZnVuY3Rpb24gcmVydW48Uj4oZmliZXI6IEZpYmVyLCBmbjogKCk9PlIpOiBSIHwgUHJvbWlzZTxSPiB7XG4gICAgICBwdXNoRmliZXIoZmliZXIpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmbigpKTtcbiAgICAgIH0gY2F0Y2ggKHApIHtcbiAgICAgICAgaWYgKHAgJiYgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBwLnRoZW4oKCk9PnJlcnVuKGZpYmVyLCBmbikpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChwKTtcbiAgICAgICAgfVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgcG9wRmliZXIoKTtcbiAgICAgIH1cbiAgICB9LCovXG4gICAgYWRkUHJvdmlkZXI6IGZ1bmN0aW9uIChnZXRDdXJyZW50RmliZXIpIHtcbiAgICAgICAgcHJvdmlkZXJzLnB1c2goZ2V0Q3VycmVudEZpYmVyKTtcbiAgICAgICAgc2V0Q3VycmVudEdldHRlckZyb21Qcm92aWRlcnMoKTtcbiAgICB9LFxuICAgIHJlbW92ZVByb3ZpZGVyOiBmdW5jdGlvbiAoZ2V0Q3VycmVudEZpYmVyKSB7XG4gICAgICAgIHByb3ZpZGVycyA9IHByb3ZpZGVycy5maWx0ZXIoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAgIT09IGdldEN1cnJlbnRGaWJlcjsgfSk7XG4gICAgICAgIHNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzKCk7XG4gICAgfVxufTtcbmZ1bmN0aW9uIHNldEN1cnJlbnRHZXR0ZXJGcm9tUHJvdmlkZXJzKCkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGaWJlckNvbnRleHQsIFwiY3VycmVudFwiLCB7XG4gICAgICAgIGdldDogcHJvdmlkZXJzLnJlZHVjZShmdW5jdGlvbiAocCwgYykgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gcCgpIHx8IGMoKTsgfTsgfSksXG4gICAgICAgIHNldDogZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJVc2UgRmliZXJDb250ZXh0LnB1c2goKSB0byBjaGFuZ2UgY3VycmVudCBmaWJlclwiKTsgfVxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmliZXItY29udGV4dC5qcy5tYXAiLCJpbXBvcnQgZXhlYyBmcm9tICcuL2V4ZWMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGJvbGQ6IHtcbiAgICBpY29uOiAnPGI+RjwvYj4nLFxuICAgIHRpdGxlOiAnRmV0c3RpbCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdib2xkJylcbiAgfSxcbiAgaXRhbGljOiB7XG4gICAgaWNvbjogJzxpPks8L2k+JyxcbiAgICB0aXRsZTogJ0t1cnNpdicsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpdGFsaWMnKVxuICB9LFxuICB1bmRlcmxpbmU6IHtcbiAgICBpY29uOiAnPHU+VTwvdT4nLFxuICAgIHRpdGxlOiAnVW5kZXJzdHJ1a2VuJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3VuZGVybGluZScpXG4gIH0sXG4gIHN0cmlrZXRocm91Z2g6IHtcbiAgICBpY29uOiAnPHN0cmlrZT5TPC9zdHJpa2U+JyxcbiAgICB0aXRsZTogJ1N0cnVrZW4nLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnc3RyaWtlVGhyb3VnaCcpXG4gIH0sXG4gIGhlYWRpbmcxOiB7XG4gICAgaWNvbjogJzxiPkg8c3ViPjE8L3N1Yj48L2I+JyxcbiAgICB0aXRsZTogJ1J1YnJpayAxJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMT4nKVxuICB9LFxuICBoZWFkaW5nMjoge1xuICAgIGljb246ICc8Yj5IPHN1Yj4yPC9zdWI+PC9iPicsXG4gICAgdGl0bGU6ICdSdWJyaWsgMicsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDI+JylcbiAgfSxcbiAgaGVhZGluZzM6IHtcbiAgICBpY29uOiAnPGI+SDxzdWI+Mzwvc3ViPjwvYj4nLFxuICAgIHRpdGxlOiAnUnVicmlrIDMnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgzPicpXG4gIH0sXG4gIHBhcmFncmFwaDoge1xuICAgIGljb246ICcmIzE4MjsnLFxuICAgIHRpdGxlOiAnUGFyYWdyYWYnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFA+JylcbiAgfSxcbiAgcXVvdGU6IHtcbiAgICBpY29uOiAnJiM4MjIwOyAmIzgyMjE7JyxcbiAgICB0aXRsZTogJ0NpdGF0JyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxCTE9DS1FVT1RFPicpXG4gIH0sXG4gIG9saXN0OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtbGlzdC1vbFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxuICAgIHRpdGxlOiAnT3JkbmFkIGxpc3RhJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydE9yZGVyZWRMaXN0JylcbiAgfSxcbiAgdWxpc3Q6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1saXN0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXG4gICAgdGl0bGU6ICdQdW5rdGxpc3RhJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydFVub3JkZXJlZExpc3QnKVxuICB9LFxuICBvdXRkZW50OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtb3V0ZGVudFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxuICAgIHRpdGxlOiAnTWluc2thIGluZHJhZycsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKFwib3V0ZGVudFwiKVxuICB9LFxuICBpbmRlbnQ6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1pbmRlbnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcbiAgICB0aXRsZTogJ8OWa2EgaW5kcmFnJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoXCJpbmRlbnRcIiksXG4gIH0sXG4gIGNvZGU6IHtcbiAgICBpY29uOiAnJmx0Oy8mZ3Q7JyxcbiAgICB0aXRsZTogJ1Byb2dyYW1rb2QnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFBSRT4nKVxuICB9LFxuICBsaW5lOiB7XG4gICAgaWNvbjogJyYjODIxMzsnLFxuICAgIHRpdGxlOiAnVsOlZ3LDpHQgbGluamUnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0SG9yaXpvbnRhbFJ1bGUnKVxuICB9LFxuICBsaW5rOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtbGlua1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxuICAgIHRpdGxlOiAnSW5mb2dhIGzDpG5rJyxcbiAgICByZXN1bHQ6ICgpID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5wcm9tcHQoJ0FuZ2UgbMOkbmtlbnMgVVJMJylcbiAgICAgIGlmICh1cmwpIGV4ZWMoJ2NyZWF0ZUxpbmsnLCB1cmwpXG4gICAgfVxuICB9LFxuICBpbWFnZToge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLXBpY3R1cmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxuICAgIHRpdGxlOiAnSW5mb2dhIGJpbGQnLFxuICAgIHByb21wdE1zZzogJ0FuZ2UgYmlsZGVucyBVUkwnLFxuICAgIHJlc3VsdCAoZXYsIGNvbXBvbmVudCkge1xuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCh0aGlzLnByb21wdE1zZyk7XG4gICAgICBpZiAodXJsKSB7XG4gICAgICAgIC8vZXhlYygnaW5zZXJ0SW1hZ2UnLCB1cmwpO1xuICAgICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgICAgICBpbWcudGFiSW5kZXggPSAxO1xuICAgICAgICBpbnNlcnRFbGVtZW50KGltZyk7XG4gICAgICAgIGltZy5vbmZvY3VzID0gY29tcG9uZW50Lm9uRm9jdXM7XG4gICAgICAgIGltZy5vbmJsdXIgPSBjb21wb25lbnQub25CbHVyO1xuICAgICAgICBjb21wb25lbnQucHJvcHMub25DaGFuZ2UoY29tcG9uZW50LmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0RWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIHZhciBzZWwsIHJhbmdlO1xuICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uICYmIChzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkpLnJhbmdlQ291bnQpIHtcbiAgICAgICAgcmFuZ2UgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcbiAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgIHJhbmdlLmluc2VydE5vZGUoZWxlbWVudCk7XG4gICAgICAgIC8vIE1vdmUgdGhlIGNhcmV0IGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBpbnNlcnRlZCBzcGFuXG4gICAgICAgIHJhbmdlLnNldFN0YXJ0QWZ0ZXIoZWxlbWVudCk7XG4gICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG50eXBlIEhUTUxQb2xpY3kgPSB7W3RhZ05hbWVMb3dlcjogc3RyaW5nXToge1thdHRyaWJ1dGVMb3dlcjogc3RyaW5nXTogYm9vbGVhbn19O1xuXG4vKiogVGFncyAvIEF0dHJpYnV0ZXMgV2hpdGVsaXN0XG4gKiBcbiAqL1xuY29uc3QgSFRNTF9XQVNIX1BPTElDWTogSFRNTFBvbGljeSA9IHtcbiAgYjoge30sICAvLyBib2xkXG4gIGk6IHt9LCAgLy8gaXRhbGljXG4gIHA6IHt9LCAgLy8gcGFyYWdyYXBoXG4gIHU6IHt9LCAgLy8gdW5kZXJsaW5lXG4gIHN0cmlrZToge30sIC8vIHN0cmlrZS10aHJvdWdoXG4gIHByZToge30sIC8vIHVuZm9ybWF0dGVkXG4gIGgxOiB7fSwgLy8gaGVhZGluZyAxXG4gIGgyOiB7fSwgLy8gaGVhZGluZyAyXG4gIGgzOiB7fSwgLy8gaGVhZGluZyAzXG4gIGg0OiB7fSwgLy8gaGVhZGluZyA0XG4gIGg1OiB7fSwgLy8gaGVhZGluZyA1XG4gIGltZzoge3NyYzogdHJ1ZSwgY2xhc3M6IHRydWUsIHN0eWxlOiB0cnVlLCB0YWJpbmRleDogdHJ1ZX0sIC8vIGltYWdlLiBXZSBzZXQgc3R5bGUgYW5kIHRhYmluZGV4IG91cnNlbHZlcy4gQWNjZXB0IHRoYXQuXG4gIGE6IHtocmVmOiB0cnVlLCB0YXJnZXQ6IHRydWUsIHRhYmluZGV4OiB0cnVlfSwgLy8gbGlua1xuICB1bDoge30sIC8vIFVub3JkZXJlZCBsaXN0XG4gIG9sOiB7fSwgLy8gT3JkZXJlZCBsaXN0XG4gIGxpOiB7fSwgLy8gbGlzdCBpdGVtXG4gIGhyOiB7fSwgLy8gSG9yaXpvbnRhbCBydWxlXG4gIGJyOiB7fSwgLy8gQnJlYWsgbGluZVxuICBkaXY6IHt9LC8vIE9mIHNvbWUgcmVhc29uLCBkaXZzIGFyZSBzb21ldGltZXMgaW5zZXJ0ZWQgd2hlbiBwcmVzc2luZyBFTlRFUiBpbiB0aGUgd3lzaXd5ZyBlZGl0b3IuXG4gIHNwYW46IHt9LC8vIFNwYW5zIGFyZSBoYXJtbGVzcywganVzdCByZW1vdmUgdGhlaXIgc3R5bGUgYW5kIG90aGVyIGF0dHJpYnV0ZXMgYW5kIEkgZmVlbCBncmVhdC5cbiAgLy8gdGFibGUgdGFnczpcbiAgdGFibGU6IHtib3JkZXI6IHRydWV9LFxuICB0Ym9keToge30sXG4gIHRoZWFkOiB7fSxcbiAgdGZvb3Q6IHt9LFxuICB0cjoge30sXG4gIHRkOiB7aGVhZGVyczogdHJ1ZSwgY29sc3BhbjogdHJ1ZSwgcm93c3BhbjogdHJ1ZX0sXG4gIHRoOiB7YWJicjogdHJ1ZSwgaGVhZGVyczogdHJ1ZSwgc2NvcGU6IHRydWUsIHNvcnRlZDogdHJ1ZSwgY29sc3BhbjogdHJ1ZSwgcm93c3BhbjogdHJ1ZX1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXNoSHRtbCAoaHRtbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCBcInRleHQvaHRtbFwiKTtcbiAgY29uc3Qge2NoaWxkTm9kZXN9ID0gZG9jLmJvZHk7XG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICBmb3IgKGxldCBpPTA7IGk8Y2hpbGROb2Rlcy5sZW5ndGg7ICsraSkge1xuICAgIGlmICh3YXNoTm9kZShjaGlsZE5vZGVzLml0ZW0oaSkpKSB7XG4gICAgICBtb2RpZmllZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZCA/XG4gICAgZG9jLmJvZHkuaW5uZXJIVE1MIDpcbiAgICBodG1sOyAvLyBCeSByZXR1cm5pbmcgdGhlIG9yaWdpbmFsIEhUTUwgc3RyaW5nLCB3ZSBzcGFyZSB0aGUgdXNlciBmcm9tIHJlZnJlc2hpbmcgdGhlIGVkaXQgYXJlYSxcbiAgICAgICAgICAvLyB3aGljaCB3b3VsZCBvdGhlcndpc2UgcHV0IHRoZSBjdXJzb3IgYXQgdGhlIHRvcCwgbG9zaW5nIHRoZSBwb3NpdGlvbiB3aGVyZSB1c2VyIHdoZXJlLlxufVxuXG5mdW5jdGlvbiB3YXNoTm9kZShub2RlOiBOb2RlIHwgRWxlbWVudCB8IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICBpZiAoaXNFbGVtZW50KG5vZGUpKSB7XG4gICAgaWYgKHdhc2hFbGVtZW50KG5vZGUpKSB7XG4gICAgICBtb2RpZmllZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmICh3YXNoQ2hpbGROb2Rlcyhub2RlKSkge1xuICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gbW9kaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHdhc2hDaGlsZE5vZGVzKG5vZGU6IE5vZGUpIHtcbiAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XG4gIGNvbnN0IHtjaGlsZE5vZGVzfSA9IG5vZGU7XG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHdhc2hOb2RlKGNoaWxkTm9kZXMuaXRlbShpKSkpIHtcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkO1xufSBcblxuLyoqIFJlcGxhY2UgYW4gZWxlbWVudCB3aXRoIGl0cyBjaGlsZCBub2Rlcy5cbiAqIFxuICovXG5mdW5jdGlvbiByZW1vdmVNaWRkbGVFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgY29uc3Qge2NoaWxkTm9kZXN9ID0gZWxlbWVudDtcbiAgZm9yIChsZXQgaT0wOyBpPGNoaWxkTm9kZXMubGVuZ3RoOyArK2kpIHtcbiAgICBlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZXMuaXRlbShpKSwgZWxlbWVudCk7XG4gIH1cbiAgZWxlbWVudC5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gd2FzaEVsZW1lbnQoZWxlbWVudDogRWxlbWVudCk6IGJvb2xlYW4ge1xuICBjb25zdCBwb2xpY3kgPSBlbGVtZW50LnRhZ05hbWUgJiYgSFRNTF9XQVNIX1BPTElDWVtlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV07XG4gIGlmICghcG9saWN5KSB7XG4gICAgY29uc29sZS53YXJuKFwiV3lzaXd5Zzogbm90IGFsbG93ZWQgdGFnXCIsIGVsZW1lbnQudGFnTmFtZSk7XG4gICAgd2FzaENoaWxkTm9kZXMoZWxlbWVudCk7XG4gICAgcmVtb3ZlTWlkZGxlRWxlbWVudChlbGVtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBsZXQgbW9kaWZpZWQgPSBmYWxzZTtcbiAgZm9yIChsZXQgaT0wOyBpPGVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGF0dHIgPSBlbGVtZW50LmF0dHJpYnV0ZXMuaXRlbShpKTtcbiAgICBjb25zdCBhbGxvd2VkID0gYXR0ci5uYW1lICYmICEhcG9saWN5W2F0dHIubmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICBpZiAoIWFsbG93ZWQpIHtcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUud2FybihcIld5c2l3eWc6IG5vdCBhbGxvd2VkIGF0dHJpYnV0ZVwiLCBhdHRyLm5hbWUsIFwiVGFnOiBcIiwgZWxlbWVudC50YWdOYW1lKTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHIubmFtZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZDtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGU6IE5vZGUpIDogbm9kZSBpcyBFbGVtZW50IHtcbiAgcmV0dXJuICEhKG5vZGUgYXMgRWxlbWVudCkudGFnTmFtZTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBleGVjIGZyb20gJy4vZXhlYyc7XG5pbXBvcnQge3dhc2hIdG1sfSBmcm9tICcuL3dhc2gtaHRtbCc7XG5pbXBvcnQgaW1hZ2VFZGl0QWN0aW9ucyBmcm9tICcuL2ltYWdlLWVkaXQtYWN0aW9ucyc7XG5pbXBvcnQgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbiB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGljb246IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgcHJvbXB0TXNnPzogc3RyaW5nO1xuICByZXN1bHQ6IChldjogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4sIGNvbXBvbmVudDogV3lzaXd5ZykgPT4gdm9pZDtcbn1cblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBodG1sOiBzdHJpbmc7XG4gIG9uQ2hhbmdlPzogKGh0bWw6IHN0cmluZykgPT4gdm9pZDtcbiAgcmVwb3J0TnVtQ2hhcnM/OiAobnVtQ2hhcnM6IG51bWJlcikgPT4gdm9pZDtcbiAgbWF4Q2hhcnM/OiBudW1iZXI7XG4gIGRlZmF1bHRBY3Rpb25zPzoge1tuYW1lOiBzdHJpbmddOiBBY3Rpb259O1xuICBhY3Rpb25zPzogKFBhcnRpYWw8QWN0aW9uPiB8IHN0cmluZylbXTtcbiAgcmVhZE9ubHk/OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBmb2N1c1JlY3Q6IENsaWVudFJlY3QgfCBudWxsO1xufVxuXG5jb25zdCBjbGFzc2VzID0ge1xuICBhY3Rpb25iYXI6ICd3eXNpd3lnLWFjdGlvbmJhcicsXG4gIGJ1dHRvbjogJ3d5c2l3eWctYnV0dG9uJyxcbiAgY29udGVudDogJ3d5c2l3eWctY29udGVudCcsXG4gIGZvY3VzcmVjdDogJ3d5c2l3eWctZm9jdXNyZWN0JyxcbiAgZm9jdXNwb2ludDogJ3d5c2l3eWctZm9jdXNwb2ludCcsXG4gIHJlYWRvbmx5Q29udGVudDogJ3d5c2l3eWctY29udGVudCByZWFkb25seSdcbn1cblxuZXhwb3J0IGNsYXNzIFd5c2l3eWcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29udGVudERpdjogSFRNTERpdkVsZW1lbnQ7XG4gIGZvY3VzUmVjdERpdjogSFRNTERpdkVsZW1lbnQ7XG4gIGZvY3VzRWxlbTogSFRNTEVsZW1lbnQgfCBudWxsO1xuICBjb3JuZXI6IHN0cmluZztcbiAgcmVzaXplU3RhcnRYOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge2ZvY3VzUmVjdDogbnVsbH07XG4gICAgdGhpcy5vbkZvY3VzID0gdGhpcy5vbkZvY3VzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkJsdXIgPSB0aGlzLm9uQmx1ci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZURvd24gPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1vdXNlTW92ZSA9IHRoaXMub25Nb3VzZU1vdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VVcCA9IHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMucmVhZE9ubHkpIHtcbiAgICAgIEFycmF5LmZyb20odGhpcy5jb250ZW50RGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbWcsYVwiKSkubWFwKGVsZW0gPT4gKGVsZW0gYXMgKEhUTUxJbWFnZUVsZW1lbnQgfCBIVE1MQW5jaG9yRWxlbWVudCkpKVxuICAgICAgLmZvckVhY2goZWxlbSA9PiB7XG4gICAgICAgIGVsZW0udGFiSW5kZXggPSAxO1xuICAgICAgICBlbGVtLm9uZm9jdXMgPSB0aGlzLm9uRm9jdXM7XG4gICAgICAgIGVsZW0ub25ibHVyID0gdGhpcy5vbkJsdXIgYXMgYW55O1xuICAgICAgfSk7XG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnd5c2l3eWctY29udGVudFwiKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duKTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIud3lzaXd5Zy1jb250ZW50XCIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnMpIHtcbiAgICAgIHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnMoKHRoaXMuY29udGVudERpdiAmJiB0aGlzLmNvbnRlbnREaXYuaW5uZXJUZXh0ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQubGVuZ3RoKSB8fCAwKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgQXJyYXkuZnJvbSh0aGlzLmNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbChcImltZyxhXCIpKS5tYXAoZWxlbSA9PiAoZWxlbSBhcyAoSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50KSkpXG4gICAgLmZvckVhY2goZWxlbSA9PiB7XG4gICAgICBlbGVtLnRhYkluZGV4ID0gMTtcbiAgICAgIGVsZW0ub25mb2N1cyA9IHRoaXMub25Gb2N1cztcbiAgICAgIGVsZW0ub25ibHVyID0gdGhpcy5vbkJsdXIgYXMgYW55O1xuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKSB7XG4gICAgICB0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKCh0aGlzLmNvbnRlbnREaXYgJiYgdGhpcy5jb250ZW50RGl2LmlubmVyVGV4dCAmJiB0aGlzLmNvbnRlbnREaXYuaW5uZXJUZXh0Lmxlbmd0aCkgfHwgMCk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53eXNpd3lnLWNvbnRlbnRcIikucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcbiAgfVxuXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHM6IFByb3BzLCBuZXh0U3RhdGU6IFN0YXRlKSB7XG4gICAgLy90aGlzLmNvbnRlbnREaXYub25mb2N1cyA9IHRoaXMub25Gb2N1cztcbiAgICAvL3RoaXMuY29udGVudERpdi5vbmJsdXIgPSB0aGlzLm9uQmx1cjtcbiAgICByZXR1cm4gIXRoaXMuY29udGVudERpdiB8fFxuICAgICAgbmV4dFN0YXRlICE9IHRoaXMuc3RhdGUgfHxcbiAgICAgIG5leHRQcm9wcy5yZWFkT25seSAhPT0gdGhpcy5wcm9wcy5yZWFkT25seSB8fFxuICAgICAgd2FzaEh0bWwobmV4dFByb3BzLmh0bWwpICE9PSB3YXNoSHRtbCh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcbiAgfVxuXG4gIHRyaWdnZXJPbkNoYW5nZShodG1sOiBzdHJpbmcpIHtcbiAgICB0aGlzLnByb3BzLm9uQ2hhbmdlICYmIHRoaXMucHJvcHMub25DaGFuZ2Uod2FzaEh0bWwoaHRtbCkpO1xuICB9XG5cbiAgb25Gb2N1cyhldjogRm9jdXNFdmVudCkge1xuICAgIGNvbnN0IGVsZW0gPSBldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKCFlbGVtIHx8ICFlbGVtLnRhZ05hbWUpIHJldHVybjtcbiAgICBpZiAoZWxlbS50YWdOYW1lICE9PSAnSU1HJyAmJiBlbGVtLnRhZ05hbWUgIT09ICdBJykgcmV0dXJuO1xuICAgIGNvbnN0IGNvbnRlbnRQYXJlbnQgPSB0aGlzLmNvbnRlbnREaXYucGFyZW50RWxlbWVudDtcbiAgICBjb25zdCBuZXdTdGF0ZSA9IHtcbiAgICAgIGZvY3VzUmVjdDogZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QoY29udGVudFBhcmVudCwgZWxlbSksXG4gICAgfVxuICAgIHN3aXRjaCAoZWxlbS50YWdOYW1lKSB7XG4gICAgICBjYXNlICdBJzpcbiAgICAgIGNhc2UgJ0lNRyc6XG5cbiAgICAgIGRlZmF1bHQ6IGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcbiAgICB0aGlzLmZvY3VzRWxlbSA9IGVsZW07XG4gIH1cblxuICBvbkJsdXIoZXY6IFJlYWN0LkZvY3VzRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSB7XG4gICAgLyppZiAoZXYucmVsYXRlZFRhcmdldCkge1xuICAgICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IGV2LnJlbGF0ZWRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBpZiAocmVsYXRlZFRhcmdldC5jbGFzc05hbWUgJiYgcmVsYXRlZFRhcmdldC5jbGFzc05hbWUuc3BsaXQoJyAnKS5pbmRleE9mKGNsYXNzZXMuYnV0dG9uKSA+PSAwKSB7XG4gICAgICAgIC8vIEEgaW1hZ2UgYWN0aW9uIGJ1dHRvbiB3YXMgcHJlc3NlZFxuICAgICAgICBzZXRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0qL1xuICAgIGlmICgoZXYudGFyZ2V0ID09PSB0aGlzLmZvY3VzRWxlbSAmJiBldi5yZWxhdGVkVGFyZ2V0ICE9PSB0aGlzLmZvY3VzUmVjdERpdikgfHxcbiAgICAgIGV2LnRhcmdldCA9PT0gdGhpcy5mb2N1c1JlY3REaXYpXG4gICAge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7Zm9jdXNSZWN0OiBudWxsfSk7XG4gICAgfVxuICB9XG5cbiAgbWFrZUNsaWNrYWJsZShlbGVtOiBIVE1MRWxlbWVudCkge1xuICAgICBlbGVtLnRhYkluZGV4ID0gMTtcbiAgfVxuXG4gIG9uTW91c2VEb3duKGV2KSB7XG4gICAgaWYgKChldi50YXJnZXQuY2xhc3NOYW1lIHx8IFwiXCIpLnNwbGl0KCcgJykuaW5kZXhPZihjbGFzc2VzLmZvY3VzcG9pbnQpID49IDApIHtcbiAgICAgIGNvbnN0IGNvcm5lciA9IHRoaXMuZ2V0UmVjdENvcm5lcihldik7XG4gICAgICB0aGlzLmNvcm5lciA9IGNvcm5lcjtcbiAgICAgIHRoaXMucmVzaXplU3RhcnRYID0gZXYuY2xpZW50WDtcbiAgICB9XG4gIH1cblxuICBvbk1vdXNlTW92ZShldjogTW91c2VFdmVudCkge1xuICAgIGlmICh0aGlzLmNvcm5lciAmJiB0aGlzLnN0YXRlLmZvY3VzUmVjdCAmJiB0aGlzLmZvY3VzRWxlbSkge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIC8vIFRPRE86IFLDpGtuYSB1dCBiYXNlcmF0IHDDpSB0aGlzLmNvcm5lciBodXIgYmlsZGVucyBzdG9ybGVrIGJvcmRlIMOkbmRyYXMuXG4gICAgICAvLyBMZXRhIHVwcCBiaWxkZW4gcGVyIElEIGZyw6VuIHRoaXMuY29udGVudERpdlxuICAgICAgLy8gU8OkdHQgRElWOmVucyBzdHlsZSBhdHRyaWJ1dCB3aWR0aCB0aWxsIG55IHdpZHRoLlxuICAgICAgLy8gT20gRElWOmVuIHJlZGFuIGhhZGUgaGVpZ2h0LCBzw6R0dCBueSBoZWlnaHQgbWVkIHNhbW1hIGFzcGVjdCByYXRpbyBzb20gaW5uYW4sXG4gICAgICAvLyBhbm5hcnMsIHPDpHR0IGludGUgaGVpZ2h0IGFsbHMgKGVsbGVyIG3DtmpsaWd0dmlzIHRpbGwgYXV0bykpXG4gICAgICBjb25zdCBmb2N1c1JlY3QgPSB0aGlzLmZvY3VzUmVjdERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGlmIChmb2N1c1JlY3Qud2lkdGggPCAzMikgcmV0dXJuO1xuICAgICAgLy9jb25zdCBjdXJyZW50V2lkdGggPSBmb2N1c1JlY3Qud2lkdGg7XG4gICAgICAvL2NvbnN0IGN1cnJlbnRIZWlnaHQgPSBmb2N1c1JlY3QuaGVpZ2h0O1xuICAgICAgLy9jb25zdCBoYXNIZWlnaHRTdHlsZSA9ICF0aGlzLmZvY3VzRWxlbS5zdHlsZS5oZWlnaHQgfHwgdGhpcy5mb2N1c0VsZW0uc3R5bGUuaGVpZ2h0ID09PSBcImF1dG9cIjtcbiAgICAgIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoMzIsIHRoaXMuY29ybmVyLmVuZHNXaXRoKCdsJykgP1xuICAgICAgICBmb2N1c1JlY3Qud2lkdGggKyAodGhpcy5yZXNpemVTdGFydFggLSBldi5jbGllbnRYKSA6XG4gICAgICAgIC8vZm9jdXNSZWN0LnJpZ2h0IC0gZXYuY2xpZW50WCA6XG4gICAgICAgIGZvY3VzUmVjdC53aWR0aCAtICh0aGlzLnJlc2l6ZVN0YXJ0WCAtIGV2LmNsaWVudFgpKTtcbiAgICAgIHRoaXMucmVzaXplU3RhcnRYID0gZXYuY2xpZW50WDtcbiAgICAgICAgLy9ldi5jbGllbnRYIC0gZm9jdXNSZWN0LmxlZnQ7XG4gICAgICBjb25zdCBmYWN0b3IgPSBuZXdXaWR0aCAvIGZvY3VzUmVjdC53aWR0aDtcbiAgICAgIGNvbnN0IG5ld0hlaWdodCA9IGZvY3VzUmVjdC5oZWlnaHQgKiBmYWN0b3I7XG4gICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgXCJweFwiO1xuICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgXCJweFwiO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzUmVjdDogZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QodGhpcy5jb250ZW50RGl2LnBhcmVudEVsZW1lbnQsIHRoaXMuZm9jdXNFbGVtKSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VVcChldikge1xuICAgIGlmICh0aGlzLmNvcm5lciAmJiB0aGlzLnN0YXRlLmZvY3VzUmVjdCAmJiB0aGlzLmZvY3VzRWxlbSkge1xuICAgICAgdGhpcy5jb3JuZXIgPSBudWxsO1xuICAgICAgdGhpcy50cmlnZ2VyT25DaGFuZ2UodGhpcy5jb250ZW50RGl2LmlubmVySFRNTCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0UmVjdENvcm5lcihldikge1xuICAgIGZvciAoY29uc3QgY2xhc3NOYW1lIG9mIChldi50YXJnZXQuY2xhc3NOYW1lIHx8ICcnKS5zcGxpdCgnICcpKSB7XG4gICAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgICBjYXNlICdmcHVsJzpcbiAgICAgICAgICByZXR1cm4gJ3VsJztcbiAgICAgICAgY2FzZSAnZnB1cic6XG4gICAgICAgICAgcmV0dXJuICdmcHVyJztcbiAgICAgICAgY2FzZSAnZnBscic6XG4gICAgICAgICAgcmV0dXJuICdscic7XG4gICAgICAgIGNhc2UgJ2ZwbGwnOlxuICAgICAgICAgIHJldHVybiAnbGwnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGV4ZWNJbWFnZUVkaXRBY3Rpb24gKGNtZDogc3RyaW5nKSB7XG4gICAgLy9jb25zb2xlLmxvZyhjbWQpO1xuICAgIGlmICghdGhpcy5mb2N1c0VsZW0pIHJldHVybjtcbiAgICAvL2NvbnNvbGUubG9nKFwiZG9pbmcgaXRcIik7XG4gICAgc3dpdGNoIChjbWQpIHtcbiAgICAgIGNhc2UgJ2Zsb2F0LWxlZnQnOlxuICAgICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS5jc3NGbG9hdCA9ICdsZWZ0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdmbG9hdC1yaWdodCc6XG4gICAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLmNzc0Zsb2F0ID0gJ3JpZ2h0JztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1bmZsb2F0JzpcbiAgICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuY3NzRmxvYXQgPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMudHJpZ2dlck9uQ2hhbmdlKHRoaXMuY29udGVudERpdi5pbm5lckhUTUwpO1xuICAgIHRoaXMuc2V0U3RhdGUoe2ZvY3VzUmVjdDogZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QodGhpcy5jb250ZW50RGl2LnBhcmVudEVsZW1lbnQsIHRoaXMuZm9jdXNFbGVtKX0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGRlZmF1bHRBY3Rpb25zID0gdGhpcy5wcm9wcy5kZWZhdWx0QWN0aW9ucyB8fCBhY3Rpb25zO1xuICAgIGxldCBhY3Rpb25zVG9Vc2UgPSB0aGlzLnByb3BzLmFjdGlvbnMgPyB0aGlzLnByb3BzLmFjdGlvbnMubWFwKGFjdGlvbiA9PlxuICAgICAgdHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycgP1xuICAgICAgICBkZWZhdWx0QWN0aW9uc1thY3Rpb25dIDpcbiAgICAgICAgZGVmYXVsdEFjdGlvbnNbYWN0aW9uLm5hbWVdID9cbiAgICAgICAgICB7IC4uLmRlZmF1bHRBY3Rpb25zW2FjdGlvbi5uYW1lXSwgLi4uYWN0aW9uIH0gOlxuICAgICAgICAgIGFjdGlvbilcbiAgICA6IE9iamVjdC5rZXlzKGRlZmF1bHRBY3Rpb25zKS5tYXAoYWN0aW9uID0+IGRlZmF1bHRBY3Rpb25zW2FjdGlvbl0pO1xuXG4gICAgaWYgKHRoaXMuc3RhdGUuZm9jdXNSZWN0KSB7XG4gICAgICBhY3Rpb25zVG9Vc2UgPSBhY3Rpb25zVG9Vc2UuY29uY2F0KGltYWdlRWRpdEFjdGlvbnMoY21kID0+IHRoaXMuZXhlY0ltYWdlRWRpdEFjdGlvbihjbWQpKSk7XG4gICAgfVxuXG4gICAgY29uc3Qge2ZvY3VzUmVjdH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtyZWFkT25seSwgcmVwb3J0TnVtQ2hhcnMsIG1heENoYXJzfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfT5cbiAgICAgIHshcmVhZE9ubHkgJiYgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuYWN0aW9uYmFyfT5cbiAgICAgICAge2FjdGlvbnNUb1VzZS5tYXAoKGFjdGlvbiwgaWR4KSA9PlxuICAgICAgICAgIDxidXR0b24ga2V5PXtpZHh9IGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259XG4gICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogYWN0aW9uLmljb259fVxuICAgICAgICAgICAgdGl0bGU9e2FjdGlvbi50aXRsZX1cbiAgICAgICAgICAgIG9uTW91c2VEb3duPXtldj0+e2FjdGlvbi5yZXN1bHQoZXYsIHRoaXMpfX1cbiAgICAgICAgICAgIG9uTW91c2VVcD17ZXY9PnNldFRpbWVvdXQoKCk9PnRoaXMuY29udGVudERpdi5mb2N1cygpLCAxMCl9XG4gICAgICAgICAgLz4pfVxuICAgICAgPC9kaXY+fVxuICAgICAgPGRpdiBjbGFzc05hbWU9e3JlYWRPbmx5ID8gY2xhc3Nlcy5yZWFkb25seUNvbnRlbnQgOiBjbGFzc2VzLmNvbnRlbnR9IHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZScsIHRvcDogMCwgbGVmdDogMH19PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImVkaXRvclwiXG4gICAgICAgICAgcmVmPXtkaXYgPT4gdGhpcy5jb250ZW50RGl2ID0gZGl2fVxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiB3YXNoSHRtbCh0aGlzLnByb3BzLmh0bWwpfX1cbiAgICAgICAgICBjb250ZW50RWRpdGFibGU9eyFyZWFkT25seX1cbiAgICAgICAgICBvblBhc3RlPXtldiA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKG1heENoYXJzKSkge1xuICAgICAgICAgICAgICBjb25zdCB7dGFyZ2V0LCBjdXJyZW50VGFyZ2V0fSA9IGV2O1xuICAgICAgICAgICAgICAvL2NvbnN0IHRleHRCZWluZ092ZXJ3cml0dGVuID0gKHRhcmdldCBhcyBhbnkpLmlubmVyVGV4dCB8fCBcIlwiO1xuICAgICAgICAgICAgICBjb25zdCBlZGl0b3JUZXh0ID0gKGN1cnJlbnRUYXJnZXQgJiYgY3VycmVudFRhcmdldC5pbm5lclRleHQpIHx8IFwiXCI7XG4gICAgICAgICAgICAgIGNvbnN0IHRleHRCZWluZ1Bhc3RlZCA9IGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcInRleHQvcGxhaW5cIikgfHwgXCJcIjtcbiAgICAgICAgICAgICAgaWYgKGVkaXRvclRleHQubGVuZ3RoICsgdGV4dEJlaW5nUGFzdGVkLmxlbmd0aCA+IG1heENoYXJzKSB7XG4gICAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgICAgb25LZXlVcD17cmVwb3J0TnVtQ2hhcnMgPyBldiA9PiB7XG4gICAgICAgICAgICBjb25zdCB7aW5uZXJUZXh0fSA9IChldi50YXJnZXQgYXMgYW55KTtcbiAgICAgICAgICAgIHJlcG9ydE51bUNoYXJzKGlubmVyVGV4dCA/IGlubmVyVGV4dC5sZW5ndGggOiAwKTtcbiAgICAgICAgICB9IDogbnVsbH1cbiAgICAgICAgICBvbktleVByZXNzPXshaXNOYU4obWF4Q2hhcnMpID8gZXYgPT4ge1xuICAgICAgICAgICAgY29uc3Qge2lubmVyVGV4dH0gPSAoZXYudGFyZ2V0IGFzIGFueSk7XG4gICAgICAgICAgICBpZiAoaW5uZXJUZXh0ICYmIGlubmVyVGV4dC5sZW5ndGggPj0gbWF4Q2hhcnMpIHtcbiAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IDogbnVsbH1cbiAgICAgICAgICBvbklucHV0PXtldiA9PiB0aGlzLnRyaWdnZXJPbkNoYW5nZSgoZXYudGFyZ2V0IGFzIGFueSkuaW5uZXJIVE1MKX1cbiAgICAgICAgICBvbktleURvd249e2V2ID0+IHtcbiAgICAgICAgICAgIGlmIChyZWFkT25seSkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHJlcG9ydE51bUNoYXJzICYmIGV2LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgICAgcmVwb3J0TnVtQ2hhcnMoKGV2LmN1cnJlbnRUYXJnZXQuaW5uZXJUZXh0IHx8IFwiXCIpLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJLZXk6IFwiICsgZXYud2hpY2gpO1xuICAgICAgICAgICAgaWYgKGV2LndoaWNoID49IDM1ICYmIGV2LndoaWNoIDw9IDQwKSB7Ly8gaG9tZS9lbmQvdXAvZG93bi9sZWZ0L3JpZ2h0XG4gICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpOyAvLyBQcmV2ZW50IGVudGlyZSBwYWdlIGZyb20gc2Nyb2xsaW5nPz9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChldi53aGljaCA9PT0gOSkge1xuICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpOy8vIFRBQlxuICAgICAgICAgICAgICBpZiAoZXYuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICBleGVjKFwib3V0ZGVudFwiKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleGVjKFwiaW5kZW50XCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgKGV2LmtleUNvZGUgPT09IDggfHwgZXYua2V5Q29kZSA9PT0gNDYpICYmIC8vIERlbGV0ZSBvciBCYWNrIGJ1dHRvbnNcbiAgICAgICAgICAgICAgdGhpcy5mb2N1c0VsZW0gJiYgdGhpcy5zdGF0ZS5mb2N1c1JlY3QpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLmZvY3VzRWxlbSAmJiB0aGlzLmZvY3VzRWxlbS5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c0VsZW0ucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmZvY3VzRWxlbSk7IC8vIFJlbW92ZSBtYXJrZWQgaW1hZ2VcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLmZvY3VzRWxlbSA9IG51bGw7XG4gICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2ZvY3VzUmVjdDogbnVsbH0pO1xuICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZSh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgICB7Zm9jdXNSZWN0ICYmIDxkaXZcbiAgICAgICAgICByZWY9e2RpdiA9PiB0aGlzLmZvY3VzUmVjdERpdiA9IGRpdn1cbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNyZWN0fVxuICAgICAgICAgIG9uQmx1cj17dGhpcy5vbkJsdXJ9XG4gICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgIG91dGxpbmU6IDAsXG4gICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICAgIHRvcDogdGhpcy5zdGF0ZS5mb2N1c1JlY3QudG9wLFxuICAgICAgICAgICAgbGVmdDogdGhpcy5zdGF0ZS5mb2N1c1JlY3QubGVmdCxcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLnN0YXRlLmZvY3VzUmVjdC53aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5mb2N1c1JlY3QuaGVpZ2h0fX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNwb2ludCArIFwiIGZwdWxcIn0gc3R5bGU9e3twb3NpdGlvbjonYWJzb2x1dGUnLCB0b3A6MCwgbGVmdDowfX0gLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnB1clwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIHRvcDowLCByaWdodDowfX0gLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnBsclwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIGJvdHRvbTowLCByaWdodDowfX0gLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnBsbFwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIGJvdHRvbTowLCBsZWZ0OjB9fSAvPlxuICAgICAgICA8L2Rpdj59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCAocGFyZW50OiBIVE1MRWxlbWVudCwgY2hpbGQ6IEhUTUxFbGVtZW50KSA6IENsaWVudFJlY3Qge1xuICBjb25zdCBwYXJlbnRSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBjaGlsZFJlY3QgPSBjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IGNoaWxkUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCArIHBhcmVudC5zY3JvbGxUb3AsXG4gICAgbGVmdDogY2hpbGRSZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQgKyBwYXJlbnQuc2Nyb2xsTGVmdCxcbiAgICBib3R0b206IGNoaWxkUmVjdC5ib3R0b20gLSBwYXJlbnRSZWN0LnRvcCArIHBhcmVudC5zY3JvbGxUb3AsXG4gICAgcmlnaHQ6IGNoaWxkUmVjdC5yaWdodCAtIHBhcmVudFJlY3QubGVmdCArIHBhcmVudC5zY3JvbGxMZWZ0LFxuICAgIHdpZHRoOiBjaGlsZFJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZFJlY3QuaGVpZ2h0XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbWFnZUVkaXRBY3Rpb25zKGNiKSB7XG4gIHJldHVybiBbe1xuICAgIG5hbWU6ICdmbG9hdC1sZWZ0JyxcbiAgICBpY29uOiBgPGRpdiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlXCI+XG4gICAgICA8aSBjbGFzcz1cImZhIGZhLWFsaWduLXJpZ2h0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlOyBsZWZ0Oi00cHg7dG9wOjA7IHRyYW5zZm9ybTogc2NhbGUoMC41KTsgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCB0b3BcIj5cbiAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gLFxuICAgIHRpdGxlOiAnTMOldCBiaWxkZW4gZmx5dGEgdsOkbnN0ZXIgb20gdGV4dCcsXG4gICAgcmVzdWx0OiAoKSA9PiBjYignZmxvYXQtbGVmdCcpXG4gIH0sIHtcbiAgICBuYW1lOiAnZmxvYXQtcmlnaHQnLFxuICAgIGljb246IGA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmVcIj5cbiAgICAgIDxpIGNsYXNzPVwiZmEgZmEtYWxpZ24tbGVmdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgcmlnaHQ6LTRweDt0b3A6MDsgdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB0cmFuc2Zvcm0tb3JpZ2luOiByaWdodCB0b3BcIj5cbiAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5gLFxuICAgIHRpdGxlOiAnTMOldCBiaWxkZW4gZmx5dGEgaMO2Z2VyIG9tIHRleHQnLFxuICAgIHJlc3VsdDogKCkgPT4gY2IoJ2Zsb2F0LXJpZ2h0JylcbiAgfSwge1xuICAgIG5hbWU6ICd1bmZsb2F0JyxcbiAgICBpY29uOiBgPGRpdiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlO1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MFwiPiYjODI1NDs8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDpsZWZ0OjA7dHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbVwiPlxuICAgICAgICA8aSBjbGFzcz1cImZhIGZhLXBpY3R1cmUtb1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MFwiPl88L2Rpdj5cbiAgICA8L2Rpdj5gLFxuICAgIHRpdGxlOiAnUGxhY2VyYSBiaWxkZW4gcMOlIGVnZW4gcmFkJyxcbiAgICByZXN1bHQ6ICgpID0+IGNiKCd1bmZsb2F0JylcbiAgfV07XG59XG5cbiIsImltcG9ydCB7IERvY3VtZW50LCBDb3Vyc2UsIEtub3dsZWRnZVJlcXVpcmVtZW50LCBDb3Vyc2VNb2R1bGUsIFRhc2ssIFNvZnREb2N1bWVudEFjY2VzcyB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IGZsYXR0ZW4sIEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IFdpdGhHcmFwaHMgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xuaW1wb3J0IHsgZ2V0RW1haWxGcm9tRG9jQWNjZXNzIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzKGNvdXJzZTogQ291cnNlKSB7XG4gIGNvbnN0IHVuY292ZXJlZFJlcXVpcmVtZW50cyA9IGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMucmVkdWNlKChyZXN1bHQsIGl0ZW0pID0+IHtcbiAgICByZXN1bHRbaXRlbS5pZF0gPSBpdGVtO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sIHt9IGFzIHsgW2lkOiBzdHJpbmddOiBLbm93bGVkZ2VSZXF1aXJlbWVudCB9KTtcblxuICBjb3Vyc2UudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICB0YXNrLmtub3dsZWRnZVJlcXVpcmVtZW50cy5mb3JFYWNoKGtyID0+IHtcbiAgICAgIGRlbGV0ZSB1bmNvdmVyZWRSZXF1aXJlbWVudHNba3IuaWRdO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gT2JqZWN0LmtleXModW5jb3ZlcmVkUmVxdWlyZW1lbnRzKS5tYXAoaWQgPT4gdW5jb3ZlcmVkUmVxdWlyZW1lbnRzW2lkXSk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVxc1JlZmVyZW5jaW5nRG9jIHtcbiAga25vd2xlZGdlUmVxdWlyZW1lbnRzOiBBcnJheTx7aWQ6IHN0cmluZ30+XG4gIGFiaWxpdGllczogQXJyYXk8e2lkOiBzdHJpbmd9PlxuICBjZW50cmFsQ29udGVudDogQXJyYXk8e2lkOiBzdHJpbmd9PlxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRzTm90Q292ZXJlZEJ5VGFza3MoY291cnNlOiBDb3Vyc2UpIDoge1tpZDogc3RyaW5nXTogdHJ1ZX0ge1xuICByZXR1cm4gZ2V0SWRzTm90Q292ZXJlZEJ5UmVxUmVmZXJlbmNpbmdEb2NzKFxuICAgIFtjb3Vyc2UgYXMgV2l0aEdyYXBoczxDb3Vyc2UsIFwiYWJpbGl0aWVzXCIgfCBcImNlbnRyYWxDb250ZW50XCIgfCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiPl0sXG4gICAgY291cnNlLnRhc2tzIGFzIFdpdGhHcmFwaHM8VGFzaywgXCJhYmlsaXRpZXNcIiB8IFwiY2VudHJhbENvbnRlbnRcIiB8IFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCI+W10pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRzTm90Q292ZXJlZEJ5UmVxUmVmZXJlbmNpbmdEb2NzKFxuICB0ZW1wbGF0ZXM6IFJlcXNSZWZlcmVuY2luZ0RvY1tdLFxuICBkb2NzQmVpbmdDaGVja2VkOiBSZXFzUmVmZXJlbmNpbmdEb2NbXSkgOiB7W2lkOiBzdHJpbmddOiB0cnVlfVxue1xuICBjb25zdCB1bmNvdmVyZWRJZHMgPSB7fTtcbiAgLy8gMS4gTWFyayB0aGUgaWRzIG9mIGFsbCBrbm93bGVkZ2UgcmVxdWlyZW1lbnRzLCBhYmlsaXRpZXMgYW5kIGNlbnRyYWwgY29udGVudCBmb3IgdGhpcyBjb3Vyc2U6XG4gIHRlbXBsYXRlcy5mb3JFYWNoKGNvdXJzZSA9PiB7XG4gICAgY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cy5mb3JFYWNoKHIgPT4ge1xuICAgICAgdW5jb3ZlcmVkSWRzW3IuaWRdID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb3Vyc2UuYWJpbGl0aWVzLmZvckVhY2goYSA9PiB7XG4gICAgICB1bmNvdmVyZWRJZHNbYS5pZF0gPSB0cnVlO1xuICAgIH0pO1xuICAgIGNvdXJzZS5jZW50cmFsQ29udGVudC5mb3JFYWNoKGNjID0+IHtcbiAgICAgIHVuY292ZXJlZElkc1tjYy5pZF0gPSB0cnVlO1xuICAgIH0pO1xuICB9KTtcbiAgLy8gMi4gTGlzdCBhbGwgdGFza3MgYW5kIHVubWFyayBhbGwgaWRzIHRoYXQgdGhleSByZWZlciB0b1xuICBkb2NzQmVpbmdDaGVja2VkLmZvckVhY2goZG9jID0+IHtcbiAgICBkb2Mua25vd2xlZGdlUmVxdWlyZW1lbnRzLmZvckVhY2goa3IgPT4ge1xuICAgICAgZGVsZXRlIHVuY292ZXJlZElkc1trci5pZF07XG4gICAgfSk7XG4gICAgZG9jLmFiaWxpdGllcy5mb3JFYWNoKGEgPT4ge1xuICAgICAgZGVsZXRlIHVuY292ZXJlZElkc1thLmlkXTtcbiAgICB9KTtcbiAgICBkb2MuY2VudHJhbENvbnRlbnQuZm9yRWFjaChjYyA9PiB7XG4gICAgICBkZWxldGUgdW5jb3ZlcmVkSWRzW2NjLmlkXTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiB1bmNvdmVyZWRJZHM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW5pdHlDaGVjayAoY291cnNlOiBDb3Vyc2UpIHtcbiAgZnVuY3Rpb24gaGFzRHVwbGljYXRlVGFza3MoY291cnNlOiBDb3Vyc2UpIHtcbiAgICBjb25zdCB0YXNrSWRzOiB7W2lkOnN0cmluZ106IGJvb2xlYW59ID0ge307XG4gICAgcmV0dXJuIGZsYXR0ZW4oY291cnNlLm1vZHVsZXMubWFwKG1vZHVsZSA9PiBtb2R1bGUudGFza0lkcy5tYXAodGFza0lkID0+IHtcbiAgICAgIGlmICh0YXNrSWRzW3Rhc2tJZF0pIHtcbiAgICAgICAgY29uc3QgdGFzayA9IGNvdXJzZS50YXNrcy5maW5kKHQgPT4gdC5pZCA9PT0gdGFza0lkKTtcbiAgICAgICAgcmV0dXJuIExgU2FtbWEgdXBwZ2lmdCBmw7ZyZWtvbW1lciBmbGVyYSBnw6VuZ2VyOiBcIiR7dGFzay5uYW1lfVwiYDtcbiAgICAgIH1cbiAgICAgIHRhc2tJZHNbdGFza0lkXSA9IHRydWU7XG4gICAgfSkuZmlsdGVyKHggPT4geCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRhc2tzV2l0aFNhbWVVcmwoY291cnNlOiBDb3Vyc2UpIHtcbiAgICBjb25zdCB0YXNrVXJsczoge1t1cmw6c3RyaW5nXTogVGFza30gPSB7fTtcbiAgICByZXR1cm4gY291cnNlLnRhc2tzLm1hcCh0YXNrID0+IHtcbiAgICAgIGlmICh0YXNrLnVybCkge1xuICAgICAgICBpZiAodGFza1VybHNbdGFzay51cmxdKSB7XG4gICAgICAgICAgcmV0dXJuIExgVHbDpSB1cHBnaWZ0ZXIgcGVrYXIgcMOlIHNhbW1hIFVSTDogXCIke3Rhc2tVcmxzW3Rhc2sudXJsXS5uYW1lfVwiIHNhbXQgXCIke3Rhc2submFtZX1cImA7XG4gICAgICAgIH1cbiAgICAgICAgdGFza1VybHNbdGFzay51cmxdID0gdGFzaztcbiAgICAgIH1cbiAgICB9KS5maWx0ZXIoeCA9PiB4KTsgIFxuICB9XG5cbiAgZnVuY3Rpb24gaGFzRW1wdHlNb2R1bGVOYW1lcyhjb3Vyc2U6IENvdXJzZSkge1xuICAgIHJldHVybiBjb3Vyc2UubW9kdWxlcy5zb21lIChtb2R1bGUgPT4gbW9kdWxlLm5hbWUgPT09IFwiXCIpICYmXG4gICAgICBMYERldCBmaW5ucyBtaW5zdCBlbiBtb2R1bCB1dGFuIGFuZ2l2ZXQgbmFtbmA7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNEdXBsaWNhdGVNb2R1bGVOYW1lcyhjb3Vyc2U6IENvdXJzZSkge1xuICAgIGNvbnN0IG1vZHVsZU5hbWVzOiB7W25hbWU6IHN0cmluZ106IHRydWV9ID0ge307XG4gICAgcmV0dXJuIGNvdXJzZS5tb2R1bGVzLm1hcChtb2R1bGUgPT4ge1xuICAgICAgaWYgKG1vZHVsZS5uYW1lICYmIG1vZHVsZU5hbWVzW21vZHVsZS5uYW1lXSkge1xuICAgICAgICByZXR1cm4gTGBNb2R1bGVuIG1lZCBuYW1uICR7bW9kdWxlLm5hbWV9IGbDtnJla29tbWVyIGZsZXJhIGfDpW5nZXJgO1xuICAgICAgfVxuICAgICAgaWYgKG1vZHVsZS5uYW1lKSBtb2R1bGVOYW1lc1ttb2R1bGUubmFtZV0gPSB0cnVlO1xuICAgIH0pXG4gIH1cblxuICBjb25zdCBjaGVja3MgPSBmbGF0dGVuKFtcbiAgICBoYXNEdXBsaWNhdGVUYXNrcyhjb3Vyc2UpLFxuICAgIHRhc2tzV2l0aFNhbWVVcmwoY291cnNlKSxcbiAgICBoYXNFbXB0eU1vZHVsZU5hbWVzKGNvdXJzZSksXG4gICAgaGFzRHVwbGljYXRlTW9kdWxlTmFtZXMoY291cnNlKVxuICBdKTtcblxuICByZXR1cm4gY2hlY2tzLmZpbHRlciAocmVzdWx0ID0+IHJlc3VsdCk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRhc2tzUGVySWQgKGNvdXJzZTogQ291cnNlKSB7XG4gIGNvbnN0IHJlc3VsdDoge1tpZDogc3RyaW5nXTogVGFza1tdfSA9IHt9O1xuICBmdW5jdGlvbiBhZGQoaWQ6IHN0cmluZywgdGFzazogVGFzaykge1xuICAgIGNvbnN0IGxpc3QgPSByZXN1bHRbaWRdIHx8IChyZXN1bHRbaWRdID0gW10pO1xuICAgIGxpc3QucHVzaCh0YXNrKTtcbiAgfVxuICBjb3Vyc2UudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICB0YXNrLmFiaWxpdGllcy5mb3JFYWNoKGEgPT4gYWRkKGEuaWQsIHRhc2spKTtcbiAgICB0YXNrLmNlbnRyYWxDb250ZW50LmZvckVhY2goYyA9PiBhZGQoYy5pZCwgdGFzaykpO1xuICAgIHRhc2suZnV0dXJlQWJpbGl0aWVzLmZvckVhY2goZmEgPT4gYWRkKGZhLCB0YXNrKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKiogUmV0dXJucyBhbiBhY2Nlc3MgbGlzdCBmb3IgYSBjb3Vyc2UgaW4gYSBiYWNrd2FyZCBjb21wYXRpYmxlIHdheSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNvZnRBY2Nlc3NMaXN0IChjb3Vyc2U6IENvdXJzZSk6IFNvZnREb2N1bWVudEFjY2Vzc1tdIHtcbiAgY29uc3Qge3Jlc3BvbnNpYmxlVGVhY2hlcnN9ID0gY291cnNlO1xuICBjb25zdCByZXN1bHQgPSByZXNwb25zaWJsZVRlYWNoZXJzLm1hcChkYSA9Pih7XG4gICAgbmFtZTogZGEubmFtZSxcbiAgICBlbWFpbDogZ2V0RW1haWxGcm9tRG9jQWNjZXNzKGRhKSxcbiAgICBhY2Nlc3M6IGRhLmFjY2VzcyB8fCAnZWRpdCdcbiAgfSBhcyBTb2Z0RG9jdW1lbnRBY2Nlc3MpKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcgfSBmcm9tICcuLi91dGlscy9xdWVyeS1zdHJpbmcnO1xuaW1wb3J0IEZlYXR1cmVEZXNjcmlwdGlvbnMgZnJvbSAnLi9mZWF0dXJlLWZsYWdzLmpzb24nO1xuaW1wb3J0IHsgY2ZnIH0gZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcblxudHlwZSBGZWF0dXJlRmxhZ3MgPSB7cmVhZG9ubHkgW1AgaW4ga2V5b2YgdHlwZW9mIEZlYXR1cmVEZXNjcmlwdGlvbnNdOiBib29sZWFufTtcblxuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlcyBleHRlbmRzIEZlYXR1cmVGbGFncyB7fVxuXG5leHBvcnQgY2xhc3MgRmVhdHVyZXMge1xuICBwcml2YXRlIF9mZWF0dXJlczogRmVhdHVyZUZsYWdzO1xuICBwcml2YXRlIF9pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gIGluaXQoKSB7XG4gICAgaWYgKHRoaXMuX2luaXRpYWxpemVkKSByZXR1cm47XG4gICAgbGV0IHR1cm5lZE9uRmVhdHVyZXMgPSAoY2ZnLktFRF9GRUFUVVJFUyB8fCBcIlwiKS5zcGxpdCgnLCcpLm1hcChuYW1lID0+IG5hbWUudHJpbSgpLnRvTG93ZXJDYXNlKCkpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gsIHt0b0xvd2VyOiB0cnVlfSk7XG5cbiAgICBpZiAocXVlcnkudGVzdHZlcnNpb24pIHtcbiAgICAgIHR1cm5lZE9uRmVhdHVyZXMgPSBbXCIqXCJdO1xuICAgIH1cbiAgICBpZiAocXVlcnkuZmVhdHVyZXMpIHtcbiAgICAgIHR1cm5lZE9uRmVhdHVyZXMgPSBxdWVyeS5mZWF0dXJlc1xuICAgICAgICAuc3BsaXQoJywnKVxuICAgICAgICAubWFwKGZlYXR1cmUgPT4gZmVhdHVyZS50cmltKCkudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuICAgIGNvbnN0IHR1cm5PbkFsbCA9IHR1cm5lZE9uRmVhdHVyZXMuaW5jbHVkZXMoJyonKTtcbiAgICB0aGlzLl9mZWF0dXJlcyA9IHt9IGFzIEZlYXR1cmVGbGFncztcbiAgICBmb3IgKGNvbnN0IGZlYXR1cmVOYW1lIG9mIE9iamVjdC5rZXlzKEZlYXR1cmVEZXNjcmlwdGlvbnMpKSB7XG4gICAgICB0aGlzLl9mZWF0dXJlc1tmZWF0dXJlTmFtZV0gPSB0dXJuT25BbGwgfHxcbiAgICAgICAgdHVybmVkT25GZWF0dXJlcy5pbmNsdWRlcyhmZWF0dXJlTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgIH1cbiAgICB0aGlzLl9pbml0aWFsaXplZCA9IHRydWU7ICAgIFxuICB9XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIGZvciAoY29uc3QgZmVhdHVyZU5hbWUgb2YgT2JqZWN0LmtleXMoRmVhdHVyZURlc2NyaXB0aW9ucykpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBmZWF0dXJlTmFtZSwge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9pbml0aWFsaXplZCkgdGhpcy5pbml0KCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX2ZlYXR1cmVzW2ZlYXR1cmVOYW1lXTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0KHZhbHVlKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGZWF0dXJlIGZsYWdzIGNhbm5vdCBiZSBzZXQgaGVyZScpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZmVhdHVyZXMgPSBuZXcgRmVhdHVyZXMoKTtcbiIsImltcG9ydCB7SW50bFByb3ZpZGVyLCBhZGRMb2NhbGVEYXRhfSBmcm9tICdyZWFjdC1pbnRsJztcbmltcG9ydCBsb2NhbGVfZW4gZnJvbSAncmVhY3QtaW50bC9sb2NhbGUtZGF0YS9lbic7XG5pbXBvcnQgbG9jYWxlX3N2IGZyb20gJ3JlYWN0LWludGwvbG9jYWxlLWRhdGEvc3YnO1xuaW1wb3J0IG1lc3NhZ2VzX3N2IGZyb20gXCIuLi8uLi90cmFuc2xhdGlvbnMvc3YuanNvblwiO1xuaW1wb3J0IG1lc3NhZ2VzX2VuIGZyb20gXCIuLi8uLi90cmFuc2xhdGlvbnMvZW4uanNvblwiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5leHBvcnQgY29uc3Qgc2V0dXBJbnRsID0gPFAgZXh0ZW5kcyBvYmplY3Q+KENvbXBvbmVudDogUmVhY3QuQ29tcG9uZW50VHlwZTxQPikgPT5cbiAgICBjbGFzcyBfU2V0dXBMYW5ndWFnZUludGwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UD57XG4gICAgICAgIG1lc3NhZ2VzIDogb2JqZWN0O1xuXG4gICAgICAgIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgICAgIGFkZExvY2FsZURhdGEoWy4uLmxvY2FsZV9lbiwuLi5sb2NhbGVfc3ZdKTtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZXMgPSB7XG4gICAgICAgICAgICAnc3YnOiBtZXNzYWdlc19zdixcbiAgICAgICAgICAgICdlbic6IG1lc3NhZ2VzX2VuXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbW9tZW50KCkubG9jYWxlKGNmZy5LRURfTE9DQUxFKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcigpe1xuICAgICAgICAgICAgcmV0dXJuIDxJbnRsUHJvdmlkZXIgbG9jYWxlPXtjZmcuS0VEX0xPQ0FMRX0gbWVzc2FnZXM9e3RoaXMubWVzc2FnZXNbY2ZnLktFRF9MT0NBTEVdfT5cbiAgICAgICAgICAgICAgICA8Q29tcG9uZW50IHsuLi50aGlzLnByb3BzIGFzIFB9IC8+XG4gICAgICAgICAgICA8L0ludGxQcm92aWRlcj5cbiAgICAgICAgfVxuICAgIH0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBDb3Vyc2UsIENvdXJzZU1vZHVsZSwgVGFzaywgRG9jdW1lbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tIFwiLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94XCI7XG5pbXBvcnQgeyBhcnJheVRvTG9va3VwIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzIH0gZnJvbSAnLi4vY291cnNlcy9idXNpbmVzcy1sb2dpYyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIG9wdGlvbnM6IChEb2N1bWVudCAmIHtncm91cD86IHN0cmluZ30pW107XG4gIHRpdGxlO1xuICBtYXJrTW9kZTogYm9vbGVhbjtcbiAgbWFya2VkSWRzOiBzdHJpbmdbXTtcbiAgbWlncmF0ZWRJZHM/OiB7W2lkOiBzdHJpbmddOiBhbnl9O1xuICB1bmNvdmVyZWRJZHM/OiB7W2lkOiBzdHJpbmddOiB0cnVlfTtcbiAgb25NYXJrQ2hhbmdlZDogKGlkOiBzdHJpbmcsIGlzTWFya2VkOiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xufVxuXG5leHBvcnQgY2xhc3MgU2VsZWN0UmVsYXRlZERvY3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7fTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7b3B0aW9ucywgdGl0bGUsIG1hcmtlZElkcywgbWFya01vZGUsIG1pZ3JhdGVkSWRzLCB1bmNvdmVyZWRJZHN9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBncm91cGVkT3B0aW9ucyA9IGFycmF5VG9Mb29rdXAob3B0aW9ucywgZCA9PiBkLmdyb3VwIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBjb25zdCBncm91cHMgPSBPYmplY3Qua2V5cyhncm91cGVkT3B0aW9ucyk7XG4gICAgcmV0dXJuIDxPcGVuQ2xvc2VCb3ggdGl0bGU9ezxwPnt0aXRsZX08L3A+fSBjbGFzc05hbWU9XCJsYXJnZXJcIj5cbiAgICAgICAge2dyb3Vwcy5tYXAoZ3JvdXAgPT4gPFJlYWN0LkZyYWdtZW50IGtleT17Z3JvdXB9PlxuICAgICAgICAgIHtncm91cHMubGVuZ3RoID09PSAxID8gbnVsbCA6IDw+PGJyLz48aDU+e2dyb3VwfTwvaDU+PGhyLz48Lz59XG4gICAgICAgICAge2dyb3VwZWRPcHRpb25zW2dyb3VwXS5tYXAob3B0aW9uID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkID0gbWFya2VkSWRzLnNvbWUoeCA9PiB4ID09PSBvcHRpb24uaWQpO1xuICAgICAgICAgICAgY29uc3QgaXNNaWdyYXRlZCA9IG1pZ3JhdGVkSWRzICYmICEhbWlncmF0ZWRJZHNbb3B0aW9uLmlkXTtcbiAgICAgICAgICAgIGNvbnN0IGlzVW5jb3ZlcmVkID0gdW5jb3ZlcmVkSWRzICYmIHVuY292ZXJlZElkc1tvcHRpb24uaWRdO1xuICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17b3B0aW9uLmlkfSBvbkNsaWNrPXsoKT0+XG4gICAgICAgICAgICAgIG1hcmtNb2RlICYmIHRoaXMucHJvcHMub25NYXJrQ2hhbmdlZChvcHRpb24uaWQsICFpc01hcmtlZCl9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCIgK1xuICAgICAgICAgICAgICAgIChtYXJrTW9kZSA/IFwiIHNlbGVjdGFibGVcIiA6IFwiXCIpICtcbiAgICAgICAgICAgICAgICAoaXNNYXJrZWQgPyBcIiBtYXJrZWRHcmVlblwiIDogKGlzVW5jb3ZlcmVkID9cbiAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZFJlZFwiOlxuICAgICAgICAgICAgICAgICAgXCJcIikpICtcbiAgICAgICAgICAgICAgICAoaXNNaWdyYXRlZCA/IFwiIG1pZ3JhdGVkXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICB0aXRsZT17aXNNaWdyYXRlZCA/XG4gICAgICAgICAgICAgICAgICBtYXJrTW9kZSA/XG4gICAgICAgICAgICAgICAgICAgIGBTa29sdmVya2V0IGhhciB1cHBkYXRlcmF0IHRleHRlbnMgZm9ybXVsZXJpbmcuIER1IGthbiBncmFuc2thIMOkbmRyaW5nZW4gZ2Vub20gYXR0IGbDpGxsYSB1dCB2YXJuaW5nc2JveGVuIHRpbGwgaMO2Z2VyLCBtZWQgdGl0ZWwgXCJVcHBkYXRlcmFkZSBmb3JtdWxlcmluZ2FyIGZyw6VuIFNrb2x2ZXJrZXRcImAgOlxuICAgICAgICAgICAgICAgICAgICBgU2tvbHZlcmtldCBoYXIgdXBwZGF0ZXJhdCB0ZXh0ZW5zIGZvcm11bGVyaW5nLCBtZW4gZGV0dGEgaGFyIMOkbm51IGludGUgZ3JhbnNrYXRzIGF2IHVwcGdpZnRlbnMgcmVkaWdlcmluZ3NiZWjDtnJpZ2VgIDpcbiAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH0+XG4gICAgICAgICAgICAgICAgPHAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IG9wdGlvbi5uYW1lfX0gLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj47XG4gICAgICAgICAgfSl9XG4gICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+KX1cbiAgICA8L09wZW5DbG9zZUJveD5cbiAgfVxufSIsImltcG9ydCB7VXNlcn0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuXG5leHBvcnQgY29uc3QgdXNlcnMgOiBVc2VyW10gPSBbe1xuICAgIGRpc3BsYXlOYW1lOiBcIkFkbWluaXN0cmF0w7ZyXCIsXG4gICAgbWFpbDogXCJ2ZW1lbmRvQGtlZHNjaG9vbHMuY29tXCIsXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRSddLFxuICAgIHNjaG9vbDogJ0tFRCcsXG4gICAgdXNlcm5hbWU6IFwiYWRtaW5cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiRGF2aWRcIixcbiAgICBtYWlsOiBcImRhdmlkLmZhaGxhbmRlckB2ZW1lbmRvLnNlXCIsXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRSddLFxuICAgIHNjaG9vbDogJ0tFRCcsXG4gICAgdXNlcm5hbWU6IFwiZGF2aWRcIlxufSxcbntcbiAgICBkaXNwbGF5TmFtZTogXCJBbmRyZWlcIixcbiAgICBtYWlsOiBcImFuZHJlaS5zcGF0YXJlbHVAdmVtZW5kby5zZVwiLFxuICAgIHJvbGVzOiBbJ0FETUlOJywnRU1QTE9ZRUUnLCdTVFVERU5UJ10sXG4gICAgc2Nob29sOiAnS0VEJyxcbiAgICB1c2VybmFtZTogXCJhbmRyZWlcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiQ2FybCBIb2xtYmVyZ1wiLFxuICAgIG1haWw6IFwiY2FybC5ob2xtYmVyZ0BrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbJ0FETUlOJywnRU1QTE9ZRUUnXSxcbiAgICBzY2hvb2w6ICdOb3Jya8O2cGluZycsXG4gICAgdXNlcm5hbWU6IFwiY2FybC5ob2xtYmVyZ0BrdW5za2Fwc2d5bW5hc2lldC5zZVwiXG59LHsgXG4gICAgZGlzcGxheU5hbWU6IFwiQ2FybFwiLFxuICAgIG1haWw6IFwiY2FybEBrZWRzY2hvb2xzLmNvbVwiLFxuICAgIHJvbGVzOiBbJ0FETUlOJywnRU1QTE9ZRUUnLCdTVFVERU5UJ10sXG4gICAgc2Nob29sOiAnS0VEJyxcbiAgICB1c2VybmFtZTogXCJjYXJsXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2MVwiLFxuICAgIG1haWw6IFwidWJ3Njc1N0BlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIixcbiAgICByb2xlczogWydTVFVERU5UJ10sXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXG4gICAgdXNlcm5hbWU6IFwidWJ3Njc1N0BlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXYyXCIsXG4gICAgbWFpbDogXCJ1bXM0MzAyQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICBzY2hvb2w6ICdVcHBzYWxhJyxcbiAgICB1c2VybmFtZTogXCJ1bXM0MzAyQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjNcIixcbiAgICBtYWlsOiBcInVoaDM0NjBAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxuICAgIHVzZXJuYW1lOiBcInVoaDM0NjBAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2NChmZWwgZ29hbHMgaXNzdWUpXCIsXG4gICAgbWFpbDogXCJ1bXQ2ODI2QGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXG4gICAgdXNlcm5hbWU6IFwidW10NjgyNkBlZHUua3Vuc2thcHNza29sYW4uc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY1KGZ1dHVyZSBhYmlsaXRpZXMpXCIsXG4gICAgbWFpbDogXCJ1amczODMzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXG4gICAgdXNlcm5hbWU6IFwidWpnMzgzM0BlZHUua3Vuc2thcHNza29sYW4uc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY2KGZ1dHVyZSBhYmlsaXRpZXMpXCIsXG4gICAgbWFpbDogXCJ1anQxMzYzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXG4gICAgdXNlcm5hbWU6IFwidWp0MTM2M0BlZHUua3Vuc2thcHNza29sYW4uc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUzDpHJhcmUxXCIsXG4gICAgbWFpbDogXCJyaWNrYXJkLmFsYmVydHNzb25Aa3Vuc2thcHNneW1uYXNpZXQuc2VcIixcbiAgICByb2xlczogWydFTVBMT1lFRSddLFxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxuICAgIHVzZXJuYW1lOiBcInJpY2thcmQuYWxiZXJ0c3NvbkBrdW5za2Fwc2d5bW5hc2lldC5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJFRFNUZXN0VXNlckd5bW5hc2l1bVwiLFxuICAgIG1haWw6IFwidWhoMzIwMEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIixcbiAgICAvL21haWw6IFwiVUhIMzIwMEBFRFUuS1VOU0tBUFNHWU1OQVNJRVQuU0VcIixcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcbiAgICB1c2VybmFtZTogXCJFRFNUZXN0VXNlcjFcIixcbiAgICBzY2hvb2w6IFwiS0VEXCIsXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwidmVtZW5kby5lbGV2QGtlZHNjaG9vbHMuY29tXCIsXG4gICAgbWFpbDogXCJ2ZW1lbmRvLmVsZXZAa2Vkc2Nob29scy5jb21cIixcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcbiAgICB1c2VybmFtZTogXCJ2ZW1lbmRvLmVsZXZAa2Vkc2Nob29scy5jb21cIixcbiAgICBzY2hvb2w6IFwiS0VEXCIsXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiTWVkYXJiZXRhcmUgTmFja2FcIixcbiAgICBtYWlsOiBcIm1lZGFyYmV0YXJlLm5hY2thQGt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgcm9sZXM6IFtcIkVNUExPWUVFXCJdLFxuICAgIHVzZXJuYW1lOiBcIm1lZGFyYmV0YXJlLm5hY2thL0tTXCIsXG4gICAgc2Nob29sOiBcIk5hY2thXCIsXG4gICAgc2Nob29sVHlwZTogXCJHcnVuZHNrb2xvclwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJNZWRhcmJldGFyZSBHbG9iZW5cIixcbiAgICBtYWlsOiBcIm1lZGFyYmV0YXJlLmdsb2JlbkBrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbXCJFTVBMT1lFRVwiXSxcbiAgICB1c2VybmFtZTogXCJtZWRhcmJldGFyZS5nbG9iZW4vS1NcIixcbiAgICBzY2hvb2w6IFwiR2xvYmVuXCIsXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiRWxldiBHbG9iZW5cIixcbiAgICBtYWlsOiBcImVsZXYuZ2xvYmVuQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHNjaG9vbEdyYWRlOiAyLFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICB1c2VybmFtZTogXCJlbGV2Lmdsb2JlblwiLFxuICAgIHNjaG9vbDogXCJHbG9iZW5cIixcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJFbGV2IEJvcsOlc1wiLFxuICAgIG1haWw6IFwiZWxldi5ib3Jhc0BlZHUua3Vuc2thcHNza29sYW4uc2VcIixcbiAgICBzY2hvb2xHcmFkZTogNyxcbiAgICByb2xlczogWydTVFVERU5UJ10sXG4gICAgdXNlcm5hbWU6IFwiZWxldi5ib3Jhc1wiLFxuICAgIHNjaG9vbDogXCJCb3LDpXNcIixcbiAgICBzY2hvb2xUeXBlOiBcIkdydW5kc2tvbG9yXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgQm9ybMOkbmdlXCIsXG4gICAgbWFpbDogXCJlbGV2LmJvcmxhbmdlQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHNjaG9vbEdyYWRlOiA5LFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICB1c2VybmFtZTogJ2VsZXYuYm9ybGFuZ2UvS1MnLFxuICAgIHNjaG9vbDogJ0JvcmzDpG5nZScsXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiUm9sbC1sw7ZzXCIsXG4gICAgbWFpbDogXCJub25lQGt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgdXNlcm5hbWU6IFwibm9uZVwiLFxuICAgIHJvbGVzOiBbXVxufV07XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7TH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQge2RifSBmcm9tICcuLi9nbG9iYWxzL2RiJztcbmltcG9ydCB7IEtlZEJhY2tlbmRXcml0ZXIgfSBmcm9tICdrZWRiYWNrZW5kL3JlcG8nO1xuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0nO1xuXG5cbmludGVyZmFjZSBQcm9wcyB7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGVycm9yczogRXJyb3JTdHJ1Y3RbXTtcbiAgaW5mb3M6IHN0cmluZ1tdO1xuICAvL2RiV3JpdGVyUmV0cnlhYmxlRXJyb3I/OiBFcnJvcjtcbiAgZGJXcml0ZXJJc1NhdmluZz86IGJvb2xlYW47XG4gIGRiV3JpdGVySXNFZGl0ZWQ/OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgRXJyb3JTdHJ1Y3Qge1xuICBtZXNzYWdlOiBzdHJpbmc7XG4gIHJldHJ5YWJsZT86IGJvb2xlYW47XG4gIGRldGFpbHM/OiBFcnJvcjtcbiAgc2hvd0RldGFpbHM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgRXJyb3JTdWNjZXNzRmVlZGJhY2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IgKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlPXtcbiAgICAgIGVycm9yczogW10sXG4gICAgICBpbmZvczogW11cbiAgICB9O1xuICAgIHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbiA9IHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2Vycm9yID0gdGhpcy5fZXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9jdXN0b21FcnJvciA9IHRoaXMuX2N1c3RvbUVycm9yLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25JbmZvID0gdGhpcy5fb25JbmZvLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fZGJXcml0ZXJFcnJvciA9IHRoaXMuX2RiV3JpdGVyRXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9kYldyaXRlclN0YXRlQ2hhbmdlZCA9IHRoaXMuX2RiV3JpdGVyU3RhdGVDaGFuZ2VkLmJpbmQodGhpcyk7XG4gIH1cblxuICBwcml2YXRlIF9hZGRFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGRldGFpbHM/OiBFcnJvciwgcmV0cnlhYmxlPzogYm9vbGVhbikge1xuICAgIC8vY29uc29sZS5lcnJvcihtZXNzYWdlLCB7cmV0cnlhYmxlOiAhIXJldHJ5YWJsZSwgZGV0YWlsc30pO1xuICAgIHRoaXMuc2V0U3RhdGUoKHtlcnJvcnN9KSA9PiB7XG4gICAgICBpZiAoZXJyb3JzLnNvbWUoZSA9PiBlLm1lc3NhZ2UgPT09IG1lc3NhZ2UpKSByZXR1cm4ge2Vycm9yc307XG4gICAgICBpZiAoZXJyb3JzLmxlbmd0aCA+IDIpIGVycm9ycyA9IGVycm9ycy5zbGljZSgxKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yczogZXJyb3JzLmNvbmNhdChbe21lc3NhZ2UsIGRldGFpbHMsIHJldHJ5YWJsZX1dKVxuICAgICAgfTtcbiAgICB9KTtcbiAgICAvLyBSZW1vdmUgbm9uLXJldHJ5YWJsZSBlcnJvcnMgYWZ0ZXIgMzAgc2Vjb25kczpcbiAgICBpZiAoIXJldHJ5YWJsZSkgc2V0VGltZW91dCgoKT0+e1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoe2Vycm9yc30pID0+ICh7XG4gICAgICAgIGVycm9yczogZXJyb3JzLmZpbHRlcihlID0+IGUubWVzc2FnZSAhPT0gbWVzc2FnZSlcbiAgICAgIH0pKTtcbiAgICB9LCAzMDAwMCk7XG4gIH1cblxuICBwcml2YXRlIF9hZGRJbmZvKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIGlmIChtZXNzYWdlID09PSBcIlwiKSB7XG4gICAgICAvLyBUdXJuIG9mZiBjdXJyZW50IGluZm8gbWVzc2FnZXNcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2luZm9zOiBbXX0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKCh7aW5mb3N9KSA9PiB7XG4gICAgICBpZiAoaW5mb3Muc29tZShpbmZvID0+IGluZm8gPT09IG1lc3NhZ2UpKSByZXR1cm4ge2luZm9zfTtcbiAgICAgIGlmIChpbmZvcy5sZW5ndGggPiAxKSBpbmZvcyA9IGluZm9zLnNsaWNlKDEpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5mb3M6IFttZXNzYWdlXSAvLyB3YXM6IGluZm9zLmNvbmNhdChtZXNzYWdlKS4gQnV0IGl0IHN1Y2tzIVxuICAgICAgfTtcbiAgICB9KTtcbiAgICAvLyBSZW1vdmUgaW5mbyBtZXNzYWdlIGFmdGVyIDEwIHNlY29uZHM6XG4gICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoe2luZm9zfSkgPT4gKHtcbiAgICAgICAgaW5mb3M6IGluZm9zLmZpbHRlcihtc2cgPT4gbXNnICE9PSBtZXNzYWdlKVxuICAgICAgfSkpO1xuICAgIH0sIDEwMDAwKTtcbiAgfVxuXG4gIHByaXZhdGUgX2RiV3JpdGVyRXJyb3IgKGVycm9yOiBFcnJvciwgcmV0cnlhYmxlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fYWRkRXJyb3IoYERldCBnw6VyIGludGUgYXR0IHNwYXJhIHRpbGwgc2VydmVybmAsIGVycm9yLCByZXRyeWFibGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfZGJXcml0ZXJTdGF0ZUNoYW5nZWQgKHtpc0VkaXRlZCwgaXNTYXZpbmd9OiBLZWRCYWNrZW5kV3JpdGVyKSB7XG4gICAgaWYgKCFpc0VkaXRlZCkge1xuICAgICAgLy8gSWYgaXNFZGl0ZWQgaXMgZmFsc2UsIGEgc3VjY2Vzc2Z1bCB3cml0ZSBtdXN0IGhhdmUgaGFwcGVuZWQsIGFuZFxuICAgICAgLy8gdGhlcmUgY2Fubm90IGJlIGFueSByZXRyeWFibGUgZXJyb3IgYW55bW9yZVxuICAgICAgdGhpcy5zZXRTdGF0ZSgoe2Vycm9yc30pID0+IHtcbiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmZpbHRlcihlID0+ICFlLnJldHJ5YWJsZSk7XG4gICAgICAgIHJldHVybiB7ZXJyb3JzfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRiV3JpdGVySXNFZGl0ZWQ6IGlzRWRpdGVkLFxuICAgICAgZGJXcml0ZXJJc1NhdmluZzogaXNTYXZpbmdcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCB0aGlzLl91bmhhbmRsZWRSZWplY3Rpb24pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX2Vycm9yKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY3VzdG9tZXJyb3InLCB0aGlzLl9jdXN0b21FcnJvcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2luZm8nLCB0aGlzLl9vbkluZm8pO1xuICAgIGRiLndyaXRlci5vbkVycm9yKHRoaXMuX2RiV3JpdGVyRXJyb3IpO1xuICAgIGRiLndyaXRlci5vblN0YXRlQ2hhbmdlKHRoaXMuX2RiV3JpdGVyU3RhdGVDaGFuZ2VkKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd1bmhhbmRsZWRyZWplY3Rpb24nLCB0aGlzLl91bmhhbmRsZWRSZWplY3Rpb24pO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIHRoaXMuX2Vycm9yKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY3VzdG9tZXJyb3InLCB0aGlzLl9jdXN0b21FcnJvcik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2luZm8nLCB0aGlzLl9vbkluZm8pO1xuICAgIGRiLndyaXRlci5vZmYodGhpcy5fZGJXcml0ZXJFcnJvcik7XG4gICAgZGIud3JpdGVyLm9mZih0aGlzLl9kYldyaXRlclN0YXRlQ2hhbmdlZCk7XG4gIH1cblxuICBfdW5oYW5kbGVkUmVqZWN0aW9uIChldjogRXZlbnQgJiB7cmVhc29uOiBFcnJvcn0pIHtcbiAgICB0aGlzLl9hZGRFcnJvcihgRXR0IG9rw6RudCBmZWwgaW50csOkZmZhZGUuLi5gLCBldi5yZWFzb24pO1xuICB9XG5cbiAgX2Vycm9yIChldjogRXZlbnQgJiB7ZXJyb3I6IEVycm9yfSkge1xuICAgIHRoaXMuX2FkZEVycm9yKGV2LmVycm9yID8gZXYuZXJyb3IubWVzc2FnZSA6IGBFdHQgb2vDpG50IGZlbCBpbnRyw6RmZmFkZS4uLmAsIGV2LmVycm9yKTtcbiAgfVxuXG4gIF9jdXN0b21FcnJvciAoZXY6IEN1c3RvbUV2ZW50KSB7XG4gICAgdGhpcy5fYWRkRXJyb3IoZXYuZGV0YWlsKTtcbiAgfVxuXG4gIF9vbkluZm8oZXY6IEN1c3RvbUV2ZW50KSB7XG4gICAgdGhpcy5fYWRkSW5mbyhldi5kZXRhaWwpO1xuICB9IFxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7ZXJyb3JzLCBpbmZvcywgZGJXcml0ZXJJc1NhdmluZ30gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImVycm9yLXN1Y2Nlc3MtZmVlZGJhY2tcIiBzdHlsZT17e1xuICAgICAgcG9zaXRpb246IFwiZml4ZWRcIixcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDAsXG4gICAgICB3aWR0aDogXCIxMDAlXCIsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICB9fT5cbiAgICAgIDxkaXYgc3R5bGU9e3tkaXNwbGF5OiAndGFibGUnLCBtYXJnaW46IFwiMCBhdXRvXCJ9fT5cbiAgICAgICAge2Vycm9ycy5maWx0ZXIoZSA9PiAhZS5yZXRyeWFibGUgfHwgIWRiV3JpdGVySXNTYXZpbmcpXG4gICAgICAgIC5tYXAoKHttZXNzYWdlLCBkZXRhaWxzLCByZXRyeWFibGUsIHNob3dEZXRhaWxzfSkgPT4gKFxuICAgICAgICAgIDxkaXYga2V5PXttZXNzYWdlfSBjbGFzc05hbWU9XCJlcnJvclwiPlxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e2Zsb2F0OidsZWZ0J319PnttZXNzYWdlfTwvZGl2PlxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e3BvaW50ZXJFdmVudHM6ICdhdXRvJ319PlxuICAgICAgICAgICAgICA8UmVtb3ZlSXRlbSBvbkNsaWNrPXsoKT0+dGhpcy5yZW1vdmVFcnJvcihtZXNzYWdlKX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge2RldGFpbHMgfHwgcmV0cnlhYmxlID8gPGRpdiBzdHlsZT17e3BvaW50ZXJFdmVudHM6ICdhdXRvJ319PlxuICAgICAgICAgICAgICB7ZGV0YWlscyA/IDw+PGEgY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9PnRoaXMudG9nZ2xlRGV0YWlscyhtZXNzYWdlKX0+e3Nob3dEZXRhaWxzID8gXCJEw7ZsaiBkZXRhaWxlclwiIDogXCJWaXNhIGRldGFpbGplclwifTwvYT4mbmJzcDs8Lz4gOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgIHtzaG93RGV0YWlscyA/IDxwPnsnJytkZXRhaWxzfTwvcD46IDw+Jm5ic3A7PC8+fVxuICAgICAgICAgICAgICB7cmV0cnlhYmxlID8gPGEgY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9PnRoaXMucmV0cnlTYXZlKCl9PkbDtnJzw7ZrIHNwYXJhIG51PC9hPiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgIDwvZGl2PjogdW5kZWZpbmVkfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApKX1cbiAgICAgICAge2luZm9zLm1hcChtZXNzYWdlID0+IFxuICAgICAgICAgIDxwIGtleT17bWVzc2FnZX0gY2xhc3NOYW1lPVwiaW5mb1wiPnttZXNzYWdlfTwvcD5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PjtcbiAgfVxuICByZW1vdmVFcnJvcihtZXNzYWdlOiBzdHJpbmcpOiBhbnkge1xuICAgIHRoaXMuc2V0U3RhdGUoKHtlcnJvcnN9KSA9PiAoe1xuICAgICAgZXJyb3JzOiBlcnJvcnMuZmlsdGVyKGUgPT4gZS5tZXNzYWdlICE9PSBtZXNzYWdlKVxuICAgIH0pKTtcbiAgfVxuXG4gIHJldHJ5U2F2ZSgpIHtcbiAgICBkYi53cml0ZXIucmV0cnlTYXZlKCk7XG4gIH1cblxuICB0b2dnbGVEZXRhaWxzKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc2V0U3RhdGUoKHtlcnJvcnN9KSA9PiAoe2Vycm9yczogZXJyb3JzLm1hcChlcnJvciA9PiBlcnJvci5tZXNzYWdlID09PSBtZXNzYWdlID9cbiAgICAgIHtcbiAgICAgICAgLi4uZXJyb3IsXG4gICAgICAgIHNob3dEZXRhaWxzOiAhZXJyb3Iuc2hvd0RldGFpbHNcbiAgICAgIH0gOlxuICAgICAgZXJyb3IpXG4gICAgfSkpO1xuICB9XG59XG4iLCJcblxuZXhwb3J0IGludGVyZmFjZSBSZXBvQ29tbXVuaWNhdG9yPFQgZXh0ZW5kcyB7aWQ6IHN0cmluZ30+IHtcbiAgcXVlcnkoKTogUHJvbWlzZTxUW10+O1xufVxuXG50eXBlIFN1YnNjcmliZXI8VD4gPSAoaXRlbXM6VFtdLCBlcnJvcjogdW5kZWZpbmVkIHwgRXJyb3IpID0+IGFueTtcblxuZXhwb3J0IGNsYXNzIFJlcG88VCBleHRlbmRzIHtpZDogc3RyaW5nfT4ge1xuICBsaXN0UHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcbiAgaXRlbXM6IFRbXTtcbiAgZXJyb3I/OiBFcnJvcjtcbiAgc3Vic2NyaWJlcnM6IFN1YnNjcmliZXI8VD5bXTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgY29tbTogUmVwb0NvbW11bmljYXRvcjxUPikge1xuICAgIHRoaXMubGlzdFByb21pc2UgPSBudWxsO1xuICAgIHRoaXMuaXRlbXMgPSBudWxsO1xuICAgIHRoaXMuc3Vic2NyaWJlcnMgPSBbXTtcbiAgfVxuXG4gIHN1YnNjcmliZShzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPFQ+KSB7XG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlSGFzRGF0YSgpLnRoZW4oKCk9PntcbiAgICAgIHN1YnNjcmliZXIodGhpcy5pdGVtcywgdGhpcy5lcnJvcik7XG4gICAgICB0aGlzLnN1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlcik7XG4gICAgfSk7XG4gIH1cblxuICB1bnN1YnNjcmliZShzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPFQ+KSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHRoaXMuc3Vic2NyaWJlcnMuZmlsdGVyIChzID0+IHMgIT09IHN1YnNjcmliZXIpO1xuICB9XG5cbiAgbm90aWZ5U3Vic2NyaWJlcnMoKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKHMgPT4gcyh0aGlzLml0ZW1zLCB0aGlzLmVycm9yKSk7XG4gIH1cblxuICBlbnN1cmVIYXNEYXRhKCkge1xuICAgIGlmICghdGhpcy5saXN0UHJvbWlzZSkgdGhpcy5yZWZyZXNoRnJvbVNlcnZlcigpO1xuICAgIHJldHVybiB0aGlzLmxpc3RQcm9taXNlO1xuICB9XG5cbiAgcmVmcmVzaEZyb21TZXJ2ZXIoKSB7XG4gICAgdGhpcy5saXN0UHJvbWlzZSA9IHRoaXMuY29tbS5xdWVyeSgpLnRoZW4oaXRlbXMgPT4ge1xuICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xuICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMgfHwgW107XG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMubGlzdFByb21pc2U7XG4gIH1cbiAgXG4gIGFzeW5jIHVwZGF0ZShpdGVtOiBUIHwgVFtdKSB7XG4gICAgYXdhaXQgdGhpcy5lbnN1cmVIYXNEYXRhKCk7XG4gICAgY29uc3QgdXBkYXRlZEl0ZW1zID0gQXJyYXkuaXNBcnJheShpdGVtKSA/IGl0ZW0gOiBbaXRlbV07XG4gICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMubWFwKGl0ID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZWRJdGVtID0gdXBkYXRlZEl0ZW1zLmZpbmQoKHtpZH0pID0+IGl0LmlkID09PSBpZCk7XG4gICAgICByZXR1cm4gdXBkYXRlZEl0ZW0gP1xuICAgICAgICBPYmplY3QuYXNzaWduKHt9LCB1cGRhdGVkSXRlbSkgOlxuICAgICAgICBpdDtcbiAgICB9KTtcbiAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gIH1cblxuICBpbnNlcnQoaXRlbTogVCB8IFRbXSkge1xuICAgIHJldHVybiB0aGlzLmVuc3VyZUhhc0RhdGEoKS50aGVuKCgpPT57XG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5jb25jYXQoaXRlbSk7XG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgfSk7XG4gIH1cblxuICBkZWxldGUoaWQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgaWRzID0gQXJyYXkuaXNBcnJheShpZCkgPyBpZCA6IFtpZF07XG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlSGFzRGF0YSgpLnRoZW4oKCk9PntcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcihpdCA9PiAhaWRzLnNvbWUoaWQgPT4gaXQuaWQgPT09IGlkKSk7XG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7QWJpbGl0eSwgS25vd2xlZGdlUmVxdWlyZW1lbnR9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7UmVtb3ZlSXRlbX0gZnJvbSAnLi9yZW1vdmUtaXRlbSc7XG5pbXBvcnQgdXBkYXRlIGZyb20gJ3JlYWN0LWFkZG9ucy11cGRhdGUnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAga25vd2xlZGdlUmVxdWlyZW1lbnRzOiBLbm93bGVkZ2VSZXF1aXJlbWVudFtdO1xuICBpZHNUb01hcmtOb3RPaz86IHtbaWQ6IHN0cmluZ106IHRydWV9O1xuICBleHBsYWluZWRSZXF1aXJlbWVudHM/OiB7W3JlcXVpcmVtZW50SWQ6IHN0cmluZ106IHN0cmluZ31cbiAgLy8gUHJvcHMgdXNlZCBpbiBlZGl0IG1vZGUgKGVkaXRpbmcgY291cnNlIHRlbXBsYXRlcylcbiAgLy9jb3ZlcmVkSWRzPzogc3RyaW5nW107XG4gIC8vIFByb3BzIHVzZWQgaW4gbWFyayBtb2RlIChlZGl0aW5nIHRhc2tzKVxuICBtYXJrTW9kZT86IGJvb2xlYW47XG4gIG1hcmtlZElkcz86IHN0cmluZ1tdO1xuICBtaWdyYXRlZElkcz86IHtbaWQ6IHN0cmluZ106IGFueX07XG4gIG9uTWFya0NoYW5nZWQ6IChpZDogc3RyaW5nLCBpc01hcmtlZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgb25FeHBsYWluZWRSZXF1aXJlbWVudHNDaGFuZ2VkPzogKHJlcUlkOiBzdHJpbmcsIHRleHQ6IHN0cmluZykgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIEtub3dsZWRnZU1hdHJpeCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywge30+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsga25vd2xlZGdlUmVxdWlyZW1lbnRzLCBtYXJrZWRJZHMsIG1pZ3JhdGVkSWRzLCBleHBsYWluZWRSZXF1aXJlbWVudHMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpZHNUb01hcmtOb3RPaywgbWFya01vZGUsIG9uTWFya0NoYW5nZWQsIG9uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNvbHVtbnMgPSBbXCJFXCIsIFwiQ1wiLCBcIkFcIl07XG4gICAgY29uc3Qgcm93czogS25vd2xlZGdlUmVxdWlyZW1lbnRbXVtdID0gW107XG4gICAgY29uc3QgcmVxcyA9IGtub3dsZWRnZVJlcXVpcmVtZW50cy5zbGljZSgpO1xuICAgIGxldCByb3c6IEtub3dsZWRnZVJlcXVpcmVtZW50W10gfCBudWxsID0gbnVsbDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgcm93ID0gY29sdW1ucy5tYXAoZ3JhZGUgPT4ge1xuICAgICAgICBjb25zdCBwTmV4dCA9IHJlcXMuZmluZEluZGV4KHIgPT4gci5ncmFkZVN0ZXAgJiYgci5ncmFkZVN0ZXAudG9VcHBlckNhc2UoKSA9PT0gZ3JhZGUpO1xuICAgICAgICBpZiAocE5leHQgPCAwKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgcnYgPSByZXFzW3BOZXh0XTtcbiAgICAgICAgcmVxcy5zcGxpY2UocE5leHQsIDEpO1xuICAgICAgICByZXR1cm4gcnY7XG4gICAgICB9KTtcbiAgICAgIGlmIChyb3cuZXZlcnkociA9PiByID09PSBudWxsKSlcbiAgICAgICAgYnJlYWs7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gPGRpdj5cbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRoZWFkPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIHtjb2x1bW5zLm1hcChjID0+IDx0aCBrZXk9e2N9PntjfTwvdGg+KX1cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAge3Jvd3MubWFwKChyb3csaSkgPT4gPFJlYWN0LkZyYWdtZW50IGtleT17aX0+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIHtyb3cubWFwKChyZXF1aXJlbWVudCxqKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNNYXJrZWRPSyA9IHJlcXVpcmVtZW50ICYmIG1hcmtlZElkcyAmJiBtYXJrZWRJZHMuaW5kZXhPZihyZXF1aXJlbWVudC5pZCkgPj0gMDtcbiAgICAgICAgICAgICAgICBjb25zdCBpc01hcmtlZE5vdE9LID0gcmVxdWlyZW1lbnQgJiYgaWRzVG9NYXJrTm90T2sgJiYgaWRzVG9NYXJrTm90T2tbcmVxdWlyZW1lbnQuaWRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWlncmF0ZWQgPSByZXF1aXJlbWVudCAmJiBtaWdyYXRlZElkcyAmJiAhIW1pZ3JhdGVkSWRzW3JlcXVpcmVtZW50LmlkXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gPHRkXG4gICAgICAgICAgICAgICAgICBrZXk9e2p9XG4gICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogcmVxdWlyZW1lbnQgPyByZXF1aXJlbWVudC5uYW1lIDogXCJcIn19XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eyhtYXJrTW9kZSA/IFwic2VsZWN0YWJsZVwiIDogXCJcIikgK1xuICAgICAgICAgICAgICAgICAgKGlzTWlncmF0ZWQgPyBcIiBtaWdyYXRlZFwiIDogXCJcIikgK1xuICAgICAgICAgICAgICAgICAgKGlzTWFya2VkT0sgP1xuICAgICAgICAgICAgICAgICAgICBcIiBtYXJrZWRHcmVlblwiIDpcbiAgICAgICAgICAgICAgICAgICAgKGlzTWFya2VkTm90T0sgP1xuICAgICAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZFJlZFwiOlxuICAgICAgICAgICAgICAgICAgICAgIFwiXCIpKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17bWFya01vZGUgJiYgcmVxdWlyZW1lbnQgP1xuICAgICAgICAgICAgICAgICAgICAgICgpPT5vbk1hcmtDaGFuZ2VkKHJlcXVpcmVtZW50LmlkLCAhaXNNYXJrZWRPSykgOlxuICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2lzTWlncmF0ZWQgP1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmtNb2RlID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGBTa29sdmVya2V0IGhhciB1cHBkYXRlcmF0IHRleHRlbnMgZm9ybXVsZXJpbmcuIER1IGthbiBncmFuc2thIMOkbmRyaW5nZW4gZ2Vub20gYXR0IGbDpGxsYSB1dCB2YXJuaW5nc2JveGVuIHRpbGwgaMO2Z2VyLCBtZWQgdGl0ZWwgXCJVcHBkYXRlcmFkZSBmb3JtdWxlcmluZ2FyIGZyw6VuIFNrb2x2ZXJrZXRcImAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYFNrb2x2ZXJrZXQgaGFyIHVwcGRhdGVyYXQgdGV4dGVucyBmb3JtdWxlcmluZywgbWVuIGRldHRhIGhhciDDpG5udSBpbnRlIGdyYW5za2F0cyBhdiB1cHBnaWZ0ZW5zIHJlZGlnZXJpbmdzYmVow7ZyaWdlYCA6XG4gICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkfSAvPlxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICB7ZXhwbGFpbmVkUmVxdWlyZW1lbnRzICYmIDx0cj5cbiAgICAgICAgICAgICAge3Jvdy5tYXAoKHJlcXVpcmVtZW50LGopID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc01hcmtlZE9LID0gcmVxdWlyZW1lbnQgJiYgbWFya2VkSWRzICYmIG1hcmtlZElkcy5pbmRleE9mKHJlcXVpcmVtZW50LmlkKSA+PSAwO1xuICAgICAgICAgICAgICAgIHJldHVybiA8dGQga2V5PXtqfT5cbiAgICAgICAgICAgICAgICAgIHtpc01hcmtlZE9LID8gPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtMYEJlc2tyaXYga3JhdmV0YH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXRUZXh0Qm94IGlucHV0VGV4dExhcmdlXCIgc3R5bGU9e3t3aWR0aDogXCIxMDAlXCJ9fVxuICAgICAgICAgICAgICAgICAgICByZWFkT25seT17IW1hcmtNb2RlfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZXhwbGFpbmVkUmVxdWlyZW1lbnRzW3JlcXVpcmVtZW50LmlkXSB8fCBcIlwifVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25FeHBsYWluZWRSZXF1aXJlbWVudHNDaGFuZ2VkICYmIChcbiAgICAgICAgICAgICAgICAgICAgICBldiA9PiBvbkV4cGxhaW5lZFJlcXVpcmVtZW50c0NoYW5nZWQocmVxdWlyZW1lbnQuaWQsIGV2LnRhcmdldC52YWx1ZSkpfVxuICAgICAgICAgICAgICAgICAgLz4gOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgICA8L3RkPn0pfVxuICAgICAgICAgICAgPC90cj59XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgIDwvZGl2PlxuXG4gICAgey8qcmV0dXJuIDxkaXY+XG4gICAgICA8dGFibGU+XG4gICAgICAgIDx0aGVhZD5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+RTwvdGg+XG4gICAgICAgICAgICA8dGg+QzwvdGg+XG4gICAgICAgICAgICA8dGg+QTwvdGg+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90aGVhZD5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIHt0Ym9keS5tYXAoKHJvdywgaSkgPT4gXG4gICAgICAgICAgPHRyIGtleT17aX0+e3Jvdy5tYXAoKGNlbGwsIGopID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkT0sgPSBwcm9wcy5tYXJrZWRJZHMgJiYgcHJvcHMubWFya2VkSWRzLmluZGV4T2YoY2VsbC5pZCkgPj0gMDtcbiAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkTm90T0sgPSBwcm9wcy5pZHNUb01hcmtOb3RPayAmJiBwcm9wcy5pZHNUb01hcmtOb3RPa1tjZWxsLmlkXTtcbiAgICAgICAgICAgIHJldHVybiA8dGRcbiAgICAgICAgICAgICAga2V5PXtqfVxuICAgICAgICAgICAgICByb3dTcGFuPXtjZWxsLnJvd1NwYW59XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17KHByb3BzLm1hcmtNb2RlID8gXCJzZWxlY3RhYmxlXCIgOiBcIlwiKSArXG4gICAgICAgICAgICAgICAgKGlzTWFya2VkT0sgP1xuICAgICAgICAgICAgICAgICAgXCIgbWFya2VkR3JlZW5cIiA6XG4gICAgICAgICAgICAgICAgICAoaXNNYXJrZWROb3RPSyA/XG4gICAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZFJlZFwiOlxuICAgICAgICAgICAgICAgICAgICBcIlwiKSl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLm1hcmtNb2RlICYmICgoKT0+cHJvcHMub25NYXJrQ2hhbmdlZChjZWxsLmlkLCAhaXNNYXJrZWRPSykpfT5cbiAgICAgICAgICAgICAge2NlbGwuaHRtbCAmJiA8ZGl2IHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZSd9fT5cbiAgICAgICAgICAgICAgICA8cFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjZWxsLnR5cGUgPT09ICdhYmlsaXR5JyA/ICdhYmlsaXR5VGV4dCcgOiAnY3JpdGVyaWFUZXh0J31cbiAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBjZWxsLmh0bWx9fSAvPlxuICAgICAgICAgICAgICAgIHtwcm9wcy5lZGl0TW9kZSAmJiA8UmVtb3ZlSXRlbSBjbGFzc05hbWU9XCJ1cHBlclJpZ2h0XCIgb25DbGljaz17KCk9PlxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsSWRzKFxuICAgICAgICAgICAgICAgICAgICBjZWxsLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGNlbGwucm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2VsbElkcyhcbiAgICAgICAgICAgICAgICAgICAgICBjZWxsLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgY2VsbC5yb3dJbmRleCkuZmlsdGVyKGlkID0+IGlkICE9IGNlbGwuaWQpICl9IC8+IH1cbiAgICAgICAgICAgICAgPC9kaXY+fVxuICAgICAgICAgICAgPC90ZD59KX1cbiAgICAgICAgICA8L3RyPil9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgIDwvZGl2PiovfVxuICB9XG59XG4iLCJpbXBvcnQgZXhlYyBmcm9tICcuL2V4ZWMnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGJvbGQ6IHtcbiAgICBpY29uOiAnPGI+QjwvYj4nLFxuICAgIHRpdGxlOiAnQm9sZCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdib2xkJylcbiAgfSxcbiAgaXRhbGljOiB7XG4gICAgaWNvbjogJzxpPkk8L2k+JyxcbiAgICB0aXRsZTogJ0l0YWxpYycsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpdGFsaWMnKVxuICB9LFxuICB1bmRlcmxpbmU6IHtcbiAgICBpY29uOiAnPHU+VTwvdT4nLFxuICAgIHRpdGxlOiAnVW5kZXJsaW5lJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3VuZGVybGluZScpXG4gIH0sXG4gIHN0cmlrZXRocm91Z2g6IHtcbiAgICBpY29uOiAnPHN0cmlrZT5TPC9zdHJpa2U+JyxcbiAgICB0aXRsZTogJ1N0cmlrZS10aHJvdWdoJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3N0cmlrZVRocm91Z2gnKVxuICB9LFxuICBoZWFkaW5nMToge1xuICAgIGljb246ICc8Yj5IPHN1Yj4xPC9zdWI+PC9iPicsXG4gICAgdGl0bGU6ICdIZWFkaW5nIDEnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgxPicpXG4gIH0sXG4gIGhlYWRpbmcyOiB7XG4gICAgaWNvbjogJzxiPkg8c3ViPjI8L3N1Yj48L2I+JyxcbiAgICB0aXRsZTogJ0hlYWRpbmcgMicsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDI+JylcbiAgfSxcbiAgaGVhZGluZzM6IHtcbiAgICBpY29uOiAnPGI+SDxzdWI+Mzwvc3ViPjwvYj4nLFxuICAgIHRpdGxlOiAnSGVhZGluZyAzJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMz4nKVxuICB9LFxuICBwYXJhZ3JhcGg6IHtcbiAgICBpY29uOiAnJiMxODI7JyxcbiAgICB0aXRsZTogJ1BhcmFncmFwaCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8UD4nKVxuICB9LFxuICBxdW90ZToge1xuICAgIGljb246ICcmIzgyMjA7ICYjODIyMTsnLFxuICAgIHRpdGxlOiAnUXVvdGUnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEJMT0NLUVVPVEU+JylcbiAgfSxcbiAgb2xpc3Q6IHtcbiAgICBpY29uOiAnJiMzNTsnLFxuICAgIHRpdGxlOiAnT3JkZXJlZCBMaXN0JyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydE9yZGVyZWRMaXN0JylcbiAgfSxcbiAgdWxpc3Q6IHtcbiAgICBpY29uOiAnJiM4MjI2OycsXG4gICAgdGl0bGU6ICdVbm9yZGVyZWQgTGlzdCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRVbm9yZGVyZWRMaXN0JylcbiAgfSxcbiAgb3V0ZGVudDoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLW91dGRlbnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcbiAgICB0aXRsZTogJ091dGRlbnQnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYyhcIm91dGRlbnRcIilcbiAgfSxcbiAgaW5kZW50OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtaW5kZW50XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXG4gICAgdGl0bGU6ICdJbmRlbnQnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYyhcImluZGVudFwiKSxcbiAgfSxcbiAgY29kZToge1xuICAgIGljb246ICcmbHQ7LyZndDsnLFxuICAgIHRpdGxlOiAnQ29kZScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8UFJFPicpXG4gIH0sXG4gIGxpbmU6IHtcbiAgICBpY29uOiAnJiM4MjEzOycsXG4gICAgdGl0bGU6ICdIb3Jpem9udGFsIExpbmUnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0SG9yaXpvbnRhbFJ1bGUnKVxuICB9LFxuICBsaW5rOiB7XG4gICAgaWNvbjogJyYjMTI4Mjc5OycsXG4gICAgdGl0bGU6ICdMaW5rJyxcbiAgICByZXN1bHQ6ICgpID0+IHtcbiAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5wcm9tcHQoJ0VudGVyIHRoZSBsaW5rIFVSTCcpXG4gICAgICBpZiAodXJsKSBleGVjKCdjcmVhdGVMaW5rJywgdXJsKVxuICAgIH1cbiAgfSxcbiAgaW1hZ2U6IHtcbiAgICBpY29uOiAnJiMxMjgyNDc7JyxcbiAgICB0aXRsZTogJ0ltYWdlJyxcbiAgICBwcm9tcHRNc2c6ICdFbnRlciB0aGUgVVJMIG9mIHRoZSBpbWFnZScsXG4gICAgcmVzdWx0ICgpIHtcbiAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5wcm9tcHQodGhpcy5wcm9tcHRNc2cpXG4gICAgICBpZiAodXJsKSBleGVjKCdpbnNlcnRJbWFnZScsIHVybClcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEdvb2dsZVdlYkNsaWVudCB9IGZyb20gJy4vZ29vZ2xlLXdlYmNsaWVudCc7XG5cbmludGVyZmFjZSBvcHRpb25zIHtcbiAgdXBsb2FkPzogYm9vbGVhbjtcbiAgbXVsdGlwbGU/OiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2Ugc2VsZWN0ZWRGaWxlIHtcbiAgZmlsZUlkOiBzdHJpbmc7XG4gIHVybDogc3RyaW5nO1xuICBtaW1lVHlwZTogc3RyaW5nO1xuICBuYW1lOiBzdHJpbmc7XG4gIG1vZGlmaWVkVGltZTogbnVtYmVyO1xuICBjYW5FeHBvcnQ6IGJvb2xlYW47XG4gIGljb25Vcmw/OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBkb3dubG9hZEFyZ3Mge1xuICBmaWxlOiBzZWxlY3RlZEZpbGU7XG4gIGxpbWl0U2l6ZT86IG51bWJlcjtcbn1cblxuXG4vKipcbiAqIEdvb2dsZVBpY2tlclxuICogSW5jbHVkZXMgdGhlIGluaXRpYXRpb24gb2YgdGhlIGNvcnJlY3QgYXBpOnMuXG4gKiBDZXJ0YWluIG9wdGlvbnMgY2FuIGJlIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3JcbiAqIGFuZCB0aGVyZSBjb3VsZCBiZSBvdGhlcnMgd29ydGggaW5jb3Jwb3JhdGluZyAoaS5lLiBUZWFtIERyaXZlLXN1cHBvcnQpLlxuICogXG4gKiBSaWdodCBub3cgdHdvIG9wdGlvbnMgYXJlIGhhbmRsZWQ6XG4gKiAtIHVwbG9hZDogaWYgYSB1c2VyIGNhbiB1cGxvYWQgdG8gRHJpdmUgaW4gdGhlIEdvb2dsZSBEcml2ZSBQaWNrZXJcbiAqIC0gbXVsdGlwbGU6IGlmIGEgdXNlciBjYW4gc2VsZWN0IG11bHRpcGxlIGZpbGVzXG4gKiBcbiAqIFdlIGNvdWxkIHByb2JhYmx5IHNwbGl0IHRoaXMgaW50byBnb29nbGUtcGlja2VyIGFuZCBnb29nbGUtZHJpdmUgd2hlcmUgZ29vZ2xlLWRyaXZlXG4gKiBoYW5kbGVzIHRoZSBleHBsaWNpdCBjYWxscyB0byB0aGUgZ29vZ2xlIGRyaXZlIGFwaS5cbiAqL1xuZXhwb3J0IGNsYXNzIEdvb2dsZVBpY2tlciBleHRlbmRzIEdvb2dsZVdlYkNsaWVudCB7XG4gIHBpY2tlcjogZ29vZ2xlLnBpY2tlci5QaWNrZXI7XG4gIG9wdGlvbnM6IG9wdGlvbnM7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucz86IG9wdGlvbnMpIHtcbiAgICBzdXBlcihbJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZHJpdmUnXSk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7dXBsb2FkOiBmYWxzZSwgbXVsdGlwbGU6IGZhbHNlfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBzaG93KClcbiAgICogXG4gICAqIElmIGEgc2luZ2xlIGZpbGUgaXMgcmVxdWVzdGVkIGZyb20gdGhlIHBpY2tlciBhIGxpc3Qgb2YgZmlsZXMgd2l0aCBvbmUgZWxlbWVudCBpcyByZXR1cm5lZC5cbiAgICogSXQgaXMgdXAgdG8gdGhlIGNhbGxlciB0byBoYW5kbGUgdGhlIGxpc3QgaW4gYSByZWxldmFudCBtYW5uZXIuXG4gICAqIFxuICAgKiBNb3JlIGRhdGEgZnJvbSB0aGUgZmlsZSBjb3VsZCBiZSBleHRyYWN0ZWQgaWYgaXQgaXMgZGVlbWVkIG5lY2Vzc2FyeS5cbiAgICogXG4gICAqL1xuICBhc3luYyBzaG93KCkge1xuICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGVkKCk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPHNlbGVjdGVkRmlsZVtdPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBjYWxsYmFjayA9IChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2VbJ2FjdGlvbiddID09IGdvb2dsZS5waWNrZXIuQWN0aW9uLkNBTkNFTCkge1xuICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2VbJ2FjdGlvbiddID09IGdvb2dsZS5waWNrZXIuQWN0aW9uLlBJQ0tFRCkge1xuICAgICAgICAgIGxldCBzZWxlY3RlZCA9IFtdO1xuICAgICAgICAgIHJlc3BvbnNlLmRvY3MuZm9yRWFjaCgoZG9jKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7aWQ6IGZpbGVJZCwgbWltZVR5cGUsIG5hbWUsIG1vZGlmaWVkVGltZSwgaWNvblVybCwgdXJsfSA9IGRvYztcbiAgICAgICAgICAgIGNvbnN0IGNhbkV4cG9ydCA9IG1pbWVUeXBlLmluY2x1ZGVzKCdnb29nbGUtYXBwcycpO1xuICAgICAgICAgICAgc2VsZWN0ZWQucHVzaCh7ZmlsZUlkLCBtaW1lVHlwZSwgbmFtZSwgbW9kaWZpZWRUaW1lLCBjYW5FeHBvcnQsIGljb25VcmwsIHVybH0pO1xuICAgICAgICAgICAgLy8gdXBkYXRlIHBlcm1pc3Npb25zIHRvIHJlYWQgYnkgYWxsIGluIGRvbWFpblxuICAgICAgICAgICAgdGhpcy51cGRhdGVQZXJtaXNzaW9ucyhmaWxlSWQpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbnNvbGUubG9nKHNlbGVjdGVkKTtcbiAgICAgICAgICByZXNvbHZlKHNlbGVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIFxuICAgICAgY29uc3QgcGlja2VyYnVpbGRlciA9IG5ldyBnb29nbGUucGlja2VyLlBpY2tlckJ1aWxkZXIoKVxuICAgICAgICAuYWRkVmlldyhcbiAgICAgICAgICBuZXcgZ29vZ2xlLnBpY2tlci5Eb2NzVmlldygpXG4gICAgICAgICAgICAuc2V0T3duZWRCeU1lKHRydWUpIC8vIHNob3VsZCB0aGlzIGJlIGFuIG9wdGlvbj9cbiAgICAgICAgICAgIC5zZXRJbmNsdWRlRm9sZGVycyh0cnVlKVxuICAgICAgICApXG4gICAgICAgIC5zZXRMb2NhbGUoXCJzdlwiKSAvLyBzaG91bGQgdGhpcyBiZSBhbiBvcHRpb24/XG4gICAgICAgIC5zZXRTaXplKDEwNTEsNjUwKSAvLyBzaG91bGQgdGhpcyBiZSBhbiBvcHRpb24/XG4gICAgICAgIC5zZXRPQXV0aFRva2VuKHRoaXMuYXV0aFRva2VuKSAvLyB0ZW1wXG4gICAgICAgIC5zZXRDYWxsYmFjayhjYWxsYmFjayk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnVwbG9hZCkge1xuICAgICAgICBwaWNrZXJidWlsZGVyLmFkZFZpZXcobmV3IGdvb2dsZS5waWNrZXIuRG9jc1VwbG9hZFZpZXcoKS5zZXRJbmNsdWRlRm9sZGVycyh0cnVlKSk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLm11bHRpcGxlKSB7XG4gICAgICAgIHBpY2tlcmJ1aWxkZXIuZW5hYmxlRmVhdHVyZShnb29nbGUucGlja2VyLkZlYXR1cmUuTVVMVElTRUxFQ1RfRU5BQkxFRCk7XG4gICAgICB9XG4gICAgICB0aGlzLnBpY2tlciA9IHBpY2tlcmJ1aWxkZXIuYnVpbGQoKTtcbiAgICAgIHRoaXMucGlja2VyLnNldFZpc2libGUodHJ1ZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogdXBkYXRlUGVybWlzc2lvbnMoKVxuICAgKiBcbiAgICogQHBhcmFtIGZpbGVJZCBcbiAgICogXG4gICAqIE1ha2UgdGhlIGZpbGUgYWNjZXNzaWJsZSB0byBhbGwgaW4gdGhlIGRvbWFpbi4gU2hvdWxkIGJlIHVubmVjZXNzYXJ5IGJ1dCBzb21lXG4gICAqIHRlYWNoZXJzIGhhdmUgY2hhbmdlZCB0aGVpciBkZWZhdWx0IHBlcm1pc3Npb25zLlxuICAgKiBXZSBkb24ndCBjYXJlIHJpZ2h0IG5vdyBpZiB0aGlzIGZhaWxzIGJlY2F1c2UgdGhpcyBpcyBqdXN0IGFuIGV4dHJhIHByZWNhdXRpb24uXG4gICAqIElmIHdlIHBsYW4gb24gdXNpbmcgdGhpcyBvbiBvdGhlciBkb21haW5zIHRoZSBkb21haW4tYXR0cmlidXRlIG5lZWRzIHRvIGJlIGR5bmFtaWMuXG4gICAqIFxuICAgKi9cbiAgYXN5bmMgdXBkYXRlUGVybWlzc2lvbnMoZmlsZUlkKSB7XG4gICAgYXdhaXQgZ2FwaS5jbGllbnQuaW5pdCh7XG4gICAgICBkaXNjb3ZlcnlEb2NzOiBbXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9kaXNjb3ZlcnkvdjEvYXBpcy9kcml2ZS92My9yZXN0XCJdXG4gICAgfSk7XG4gICAgZ2FwaS5jbGllbnQuZHJpdmUucGVybWlzc2lvbnMuY3JlYXRlKDxhbnk+e1xuICAgICAgZmlsZUlkOiBmaWxlSWQsXG4gICAgICBzZW5kTm90aWZpY2F0aW9uRW1haWw6IGZhbHNlLFxuICAgICAgcm9sZTogJ3JlYWRlcicsXG4gICAgICB0eXBlOiAnZG9tYWluJyxcbiAgICAgIGRvbWFpbjogJ2t1bnNrYXBzc2tvbGFuLnNlJ1xuICAgIH0pO1xuICB9XG5cblxuICAvKipcbiAgICogZG93bmxvYWRGaWxlKClcbiAgICogQHBhcmFtIGZpbGUgXG4gICAqIFxuICAgKiBXaGVuIENsYXNzcm9vbSBoYXMgYmVlbiBpbnRlZ3JhdGVkIHdlIHdpbGwgd2FudCB0byBoYW5kbGUgb25seSB0aGUgZmlsZUlkOnNcbiAgICogc28gdGhhdCBlZGl0aW5nIGNhcGFiaWxpdGllcyBhcmUgcGVzZXJ2ZWQgb24gdGhlIGZpbGUgKGlmIGl0IGlzIGEgZ29vZ2xlLWFwcHMgZmlsZSlcbiAgICogUmlnaHQgbm93IGdvb2dsZS1hcHBzIGZpbGVzIGFyZSBjb252ZXJ0ZWQgdG8gcGRmIGFuZCBwYXNzZWQgaW50byB0aGUgY3VycmVudCBmbG93LlxuICAgKiBcbiAgICogVE9ETzogZXJyb3IgaGFuZGxpbmdcbiAgICovXG5cbiAgYXN5bmMgZG93bmxvYWRGaWxlKHtmaWxlLCBsaW1pdFNpemV9KSB7XG4gICAgLy8gQSBmaWxlIHRoYXQgY2FuIGJlIGV4cG9ydGVkIHRvIFBERiBpcyByZXRyZWl2ZWQgd2l0aFxuICAgIC8vIGZpbGUuZXhwb3J0KCkgZnJvbSBEcml2ZSwgY29udmVydGVkIHRvIGEgYmxvYiBhbmQgdGhlblxuICAgIC8vIHRvIGEgRmlsZS5cbiAgICAvLyBBIGZpbGUgdGhhdCBjYW4gbm90IGJlIGV4cG9ydGVkIHRvIFBERiBpcyByZXRyaWV2ZWRcbiAgICAvLyB0aHJvdWdoIFhIUiBhbmQgY29udmVydGVkIHRvIGEgRmlsZS5cblxuICAgIC8vIElmIHdlIGRvbid0IG5lZWQgdG8gaGFuZGxlIHRoZSBwaHlzaWNhbCBmaWxlcyBvbiB0aGUgY2xpZW50XG4gICAgLy8gd2UgY291bGQgc2F2ZSBvbmx5IHRoZSBmaWxlSWQ6cyBhbmQgZGlzcGxheSBmaWxlbmFtZSBhbmQgbWltZVR5cGVcbiAgICAvLyBmb3IgdGhlIGZpbGUgaW4gb3VyIGxpc3RpbmdzLiBXaGVuL2lmIHdlIHVzZSBHb29nbGUgQ2xhc3Nyb29tIGZvclxuICAgIC8vIG91ciB0YXNrLWhhbmRsaW5nIHRoYXQgd291bGQgYmUgdGhlIHByZWZlcnJlZCBhcHByb2FjaCB0byBrZWVwXG4gICAgLy8gdGhlIGZpbGUgYXMgYW4gZWRpdGFibGUgR29vZ2xlIGZpbGVcblxuICAgIC8vIEluaXQgdGhlIGRyaXZlLWFwaSAob25seSBuZWVkZWQgZm9yIGRvd25sb2FkIHNvIG5vdCBsb2FkZWQgaW5pdGlhbGx5KVxuICAgIGF3YWl0IGdhcGkuY2xpZW50LmluaXQoe1xuICAgICAgZGlzY292ZXJ5RG9jczogW1wiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vZGlzY292ZXJ5L3YxL2FwaXMvZHJpdmUvdjMvcmVzdFwiXVxuICAgIH0pO1xuXG4gICAgaWYgKGZpbGUuY2FuRXhwb3J0KSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8RmlsZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBnYXBpLmNsaWVudC5kcml2ZS5maWxlcy5leHBvcnQoe1xuICAgICAgICAgIGZpbGVJZDogZmlsZS5maWxlSWQsXG4gICAgICAgICAgbWltZVR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnfVxuICAgICAgICApLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgY29uc3QgbGVuID0gcmVzcC5ib2R5Lmxlbmd0aDtcbiAgICAgICAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKGxlbikpO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGRhdGFbaV0gPSByZXNwLmJvZHkuY2hhckNvZGVBdChpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtkYXRhXSwge3R5cGU6ICdhcHBsaWNhdGlvbi9wZGYnfSk7XG4gICAgICAgICAgY29uc3QgZmlsZW5hbWUgPSBmaWxlLm5hbWUrJy5wZGYnO1xuICAgICAgICAgIHJlc29sdmUobmV3IEZpbGUoW2Jsb2JdLCBmaWxlbmFtZSwge3R5cGU6ICdhcHBsaWNhdGlvbi9wZGYnLCBsYXN0TW9kaWZpZWQ6IGZpbGUubW9kaWZpZWRUaW1lfSkpO1xuICAgICAgICB9KVxuICAgICAgfSk7ICBcbiAgICB9IGVsc2Uge1xuXG4gICAgICAvLyBhIGZpbGUgdGhhdCBpc24ndCBhIGdvb2dsZS1hcHBzIGZpbGUgbmVlZHMgdG8gYmUgZmV0Y2hlZCB2aWEgWEhSXG4gICAgICAvLyBiZWNhdXNlIHJlc3BvbnNlVHlwZSBhbmQgP2FsdD1tZWRpYSBuZWVkcyB0byBiZSBzZXQgdG8gYXZvaWQgQ09SU1xuICAgICAgY29uc3QgeGhyRG93bmxvYWQgPSAoZmlsZTpzZWxlY3RlZEZpbGUpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPEZpbGU+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICB4aHIub3BlbihcIkdFVFwiLCBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2RyaXZlL3YzL2ZpbGVzL1wiK2ZpbGUuZmlsZUlkKyc/YWx0PW1lZGlhJywgdHJ1ZSk7XG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0F1dGhvcml6YXRpb24nLCdCZWFyZXIgJyt0aGlzLmF1dGhUb2tlbik7XG4gICAgICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgICAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgcmVzb2x2ZShuZXcgRmlsZShbeGhyLnJlc3BvbnNlXSwgZmlsZS5uYW1lLCB7dHlwZTogZmlsZS5taW1lVHlwZSwgbGFzdE1vZGlmaWVkOiBmaWxlLm1vZGlmaWVkVGltZX0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2U8RmlsZT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBpZiAobGltaXRTaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBnYXBpLmNsaWVudC5kcml2ZS5maWxlcy5nZXQoe1xuICAgICAgICAgICAgZmlsZUlkOiBmaWxlLmZpbGVJZCxcbiAgICAgICAgICAgIGZpZWxkczogJ3NpemUnXG4gICAgICAgICAgfSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSBOdW1iZXIocmVzcC5yZXN1bHQuc2l6ZSk7XG4gICAgICAgICAgICBpZiAoc2l6ZSA+IGxpbWl0U2l6ZSoxMDI0KjEwMjQpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KCdHb29nbGVQaWNrZXJFcnJvcjogRmlsc2l6ZSBpcyB0b28gbGFhcmdlJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHhockRvd25sb2FkKGZpbGUpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUocmVzcCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH0pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeGhyRG93bmxvYWQoZmlsZSkudGhlbihyZXNwID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzcCk7XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcblxuZXhwb3J0IGNsYXNzIEdvb2dsZVdlYkNsaWVudCB7XG4gIGF1dGhUb2tlbjogc3RyaW5nO1xuICBzY29wZXM6IHN0cmluZ1tdO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3Blcykge1xuICAgIHRoaXMuc2NvcGVzID0gWydodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3VzZXJpbmZvLmVtYWlsJywgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvdXNlcmluZm8ucHJvZmlsZSddO1xuICAgIHRoaXMuc2NvcGVzLnB1c2goLi4uc2NvcGVzKTtcbiAgfVxuICBhc3luYyBlbnN1cmVJbml0ZWQoKSB7XG4gICAgLy8gTG9hZCBHQVBJXG4gICAgaWYgKHR5cGVvZiBnYXBpID09PSBcInVuZGVmaW5lZFwiKSBhd2FpdCB0aGlzLmxvYWRHYXBpKCk7XG5cbiAgICAvLyBLRURTU2Nob29sc1xuICAgIGNvbnN0IENMSUVOVF9JRCA9IFwiNDIxNTcyMjYyMjY5LXU2OHY1bGY1bzhzczV0NjhsOGdrcTNwZmFyaDZkYmt2LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tXCI7XG4gICAgY29uc3QgU0NPUEVTID0gdGhpcy5zY29wZXMuam9pbignICcpO1xuICAgIFxuICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLHJlamVjdCkgPT4ge1xuICAgICAgZ2FwaS5sb2FkKFwiY2xpZW50OmF1dGgyXCIsICgpID0+IHtcbiAgICAgICAgLy8gQ2FsbHMgYXV0aG9yaXplIHdpdGhvdXQgcHJvbXB0aW5nIHRoZSB1c2VyLiBJZiBhdXRob3JpemF0aW9uIGhhc24ndCBiZWVuIGdpdmVuIGJ5XG4gICAgICAgIC8vIHRoZSB1c2VyIGFuIGVycm9yIGlzIHJldHVybmVkIGFuZCB3ZSBjYWxsIGF1dGhvcml6ZSBhZ2FpbiB3aXRoIGNvbnNlbnQtc2NyZWVuXG4gICAgICAgIGxldCByZWF1dGhvcml6ZSA9IGZhbHNlO1xuICAgICAgICBjb25zb2xlLmxvZygnbG9hZGluZyBjbGllbnQ6YXV0aDInKTtcbiAgICAgICAgcmV0dXJuIGdhcGkuYXV0aDIuYXV0aG9yaXplKHtcbiAgICAgICAgICBjbGllbnRfaWQ6IENMSUVOVF9JRCxcbiAgICAgICAgICBzY29wZTogU0NPUEVTLFxuICAgICAgICAgIHJlc3BvbnNlX3R5cGU6ICdwZXJtaXNzaW9uJyxcbiAgICAgICAgICBsb2dpbl9oaW50OiBlbnYuY3VycmVudFVzZXIubWFpbCxcbiAgICAgICAgICBwcm9tcHQ6ICdub25lJ1xuICAgICAgICB9LCAocmVzcCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3ApO1xuICAgICAgICAgIGlmIChyZXNwLmVycm9yKSB7XG4gICAgICAgICAgICAvLyBubyBjb25zZW50IGdpdmVuIHNvIHJlYXV0aG9yaXplXG4gICAgICAgICAgICByZWF1dGhvcml6ZSA9IHRydWU7ICAgICAgICAgICAgXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIGhhdmUgYWxsIHRoZSBzY29wZXMgd2Ugd2FudFxuICAgICAgICAgICAgY29uc3Qgc2NvcGVzZXQgPSBuZXcgU2V0KHJlc3Auc2NvcGUuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICBjb25zdCBtaXNzaW5nU2NvcGVzID0gdGhpcy5zY29wZXMuZmlsdGVyKHggPT4gIXNjb3Blc2V0Lmhhcyh4KSk7XG4gICAgICAgICAgICBpZiAobWlzc2luZ1Njb3Blcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdtaXNzaW5nIHNjb3BlcycpO1xuICAgICAgICAgICAgICAvLyBzY29wZXMgYXJlIG1pc3NpbmcgZnJvbSBvdXIgY29uc2VudCBzbyByZWF1dGhvcml6ZVxuICAgICAgICAgICAgICByZWF1dGhvcml6ZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBldmVyeXRoaW5nIHNlZW1zIHRvIGJlIG9rIHNvIHN0b3JlIG91ciB0b2tlblxuICAgICAgICAgICAgICB0aGlzLmF1dGhUb2tlbiA9IHJlc3AuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlYXV0aG9yaXplKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygncmVhdXRob3JpemUnKTtcbiAgICAgICAgICAgIHJldHVybiBnYXBpLmF1dGgyLmF1dGhvcml6ZSh7XG4gICAgICAgICAgICAgIGNsaWVudF9pZDogQ0xJRU5UX0lELFxuICAgICAgICAgICAgICBzY29wZTogU0NPUEVTLFxuICAgICAgICAgICAgICByZXNwb25zZV90eXBlOiAncGVybWlzc2lvbicsXG4gICAgICAgICAgICAgIGxvZ2luX2hpbnQ6IGVudi5jdXJyZW50VXNlci5tYWlsLFxuICAgICAgICAgICAgICBwcm9tcHQ6ICdjb25zZW50J1xuICAgICAgICAgICAgfSwgKHJlc3ApID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcCk7XG4gICAgICAgICAgICAgIGlmIChyZXNwLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgLy8gc29tZXRoaW5nIGlzIHN0aWxsIHdyb25nIHNvIHRocm93IGFuIGVycm9yXG4gICAgICAgICAgICAgICAgcmVqZWN0KCdHb29nbGUgV2ViIENsaWVudDogTm8gYWNjZXNzIHRva2VuJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gd2Ugbm93IGhhdmUgYSB0b2tlbiAoaG9wZWZ1bGx5IHdpdGggdGhlIHJpZ2h0IHNjb3BlcylcbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgd2UgY2hlY2sgYWdhaW4/XG4gICAgICAgICAgICAgICAgdGhpcy5hdXRoVG9rZW4gPSByZXNwLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICApfSk7XG4gICAgfSk7XG5cbiAgICAvLyBMb2FkIFBpY2tlciBBUElcbiAgICBpZiAodHlwZW9mIGdvb2dsZSA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgZ29vZ2xlLnBpY2tlciA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIGdhcGkubG9hZChcInBpY2tlclwiLCAoKSA9PiB7IHJlc29sdmUoKSB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG5cbiAgbG9hZEdhcGkoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgZ2FwaSAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICBzY3JpcHQuc3JjID0gXCJodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9jbGllbnQuanM/b25sb2FkPWdhYXBpX2xvYWRlZFwiO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAod2luZG93IGFzIGFueSkuZ2FhcGlfbG9hZGVkID0gcmVzb2x2ZTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5jb25zdCBJY29uRHJpdmUgPSAoeyBzaXplID0gMzAgfSkgPT4gKFxuICA8c3ZnXG4gICAgd2lkdGg9e3NpemV9XG4gICAgdmVyc2lvbj1cIjEuMVwiXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgeG1sbnNYbGluaz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIlxuICAgIHZpZXdCb3g9XCIwIDAgNTA4LjUyIDUwOC41MlwiXG4gICAgZmlsbD1cIiNmZmZmZmZcIlxuICAgIHN0eWxlPXt7dmVydGljYWxBbGlnbjogXCJtaWRkbGVcIiwgbWFyZ2luUmlnaHQ6IFwiNHB4XCJ9fVxuICA+XG4gICAgPHBvbHlnb24gcG9pbnRzPVwiNDg0LjQ5MiwyODQuNTggMzM5LjAyNCwzMi41NzcgMTY5LjQ5NiwzMi41NzcgMzE0Ljk5NiwyODQuNThcIiAvPlxuICAgIDxwb2x5Z29uIHBvaW50cz1cIjE0NS40MzcsNzQuMjc2IDAsMzI2LjI3OSA4NC43NjQsNDczLjA1IDIzMC4xNjksMjIxLjE0M1wiIC8+XG4gICAgPHBvbHlnb24gcG9pbnRzPVwiMjM0LjM5NiwzMTYuMzYzIDE0My4zNzEsNDc1Ljk0MyA0MjMuNzU2LDQ3NS45NDMgNTA4LjUyLDMxNi4zNlwiIC8+XG4gIDwvc3ZnPlxuKTtcblxuY29uc3QgSWNvbkNsYXNzcm9vbSA9ICh7IHNpemUgPSAzMCB9KSA9PiAoXG4gIDxzdmdcbiAgICB3aWR0aD17c2l6ZX1cbiAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICB4bWxuc1hsaW5rPVwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiXG4gICAgdmlld0JveD1cIjAgMCAyNCAyNFwiXG4gICAgdmVyc2lvbj1cIjEuMVwiXG4gID5cbiAgICA8cGF0aCBkPVwiTTUgMkMzLjM0OCAyIDIgMy4zNDggMiA1djE0YzAgMS42NTIgMS4zNDggMyAzIDNoMTRjMS42NTIgMCAzLTEuMzQ4IDMtM1Y1YzAtMS42NTItMS4zNDgtMy0zLTN6bTAgMmgxNGMuNTUgMCAxIC40NSAxIDF2MTRjMCAuNTUtLjQ1IDEtMSAxaC0xdi0yaC01djJINWMtLjU1IDAtMS0uNDUtMS0xVjVjMC0uNTUuNDUtMSAxLTF6bTcgMmExLjk5OSAxLjk5OSAwIDEgMCAwIDQgMS45OTkgMS45OTkgMCAxIDAgMC00ek03LjUgOGExLjUgMS41IDAgMSAwIDAgMyAxLjUgMS41IDAgMCAwIDAtM3ptOSAwYTEuNSAxLjUgMCAxIDAgMCAzIDEuNSAxLjUgMCAwIDAgMC0zek0xMiAxMWMtMi42NiAwLTMuNSAyLjUtMy41IDIuNSAwLS44NDguNS0xLjUuNS0xLjUtLjMtLjE4OC0xLjA3LS4zMTMtMS40MzgtLjMxMy0xLjIxNCAwLTIuNTYyIDEuMTkyLTIuNTYyIDJWMTZoMTR2LTIuMzEzYzAtLjgwOC0xLjUxMi0yLTIuNTYzLTItLjM2NyAwLTEuMTM2LjEyNi0xLjQzNy4zMTMgMCAwIC41LjY1Mi41IDEuNSAwIDAtLjg0LTIuNS0zLjUtMi41elwiIC8+XG4gIDwvc3ZnPlxuKTtcblxuZXhwb3J0IGNvbnN0IERyaXZlQnV0dG9uID0gKHtsYWJlbD0nR29vZ2xlIERyaXZlJywgYWN0aW9ufSkgPT4gXG4gIDxhIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9e2FjdGlvbn0+PEljb25Ecml2ZSBzaXplPXsxNn0gLz4ge2xhYmVsfTwvYT5cbiIsImltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcblxuZGVjbGFyZSB2YXIgcHJvY2VzczogYW55O1xuXG5jZmcuRU5WSVJPTk1FTlQgPSBwcm9jZXNzLmVudi5FTlZJUk9OTUVOVCBhcyBcInByb2R1Y3Rpb25cIiB8IFwiZGV2ZWxvcG1lbnRcIiB8IFwidGVzdFwiO1xuY2ZnLktFRF9BUElfVVJMID0gcHJvY2Vzcy5lbnYuS0VEX0FQSV9VUkw7IC8vIFwiaHR0cHM6Ly9rZWRiYWNrZW5kdGVzdC5henVyZXdlYnNpdGVzLm5ldC9hcGkvXCJcbmNmZy5FRFNfQVBJX1VSTCA9IHByb2Nlc3MuZW52LkVEU19BUElfVVJMOyAvLyBcImh0dHBzOi8vZWRzcG9ydGFsb3dpbmFwaS5henVyZXdlYnNpdGVzLm5ldC9hcGkvXCJcbmNmZy5LRURfVE9LRU5fVVJMID0gcHJvY2Vzcy5lbnYuS0VEX1RPS0VOX1VSTDsgLy8gXCJodHRwczovL2tlZGF1dGh0ZXN0LmF6dXJld2Vic2l0ZXMubmV0L3Rva2VuXCJcbmNmZy5LRURfQ0xJRU5UX0lEID0gcHJvY2Vzcy5lbnYuS0VEX0NMSUVOVF9JRDsgLy8gXCJkZXZjbGllbnRcIiwgXCJ0ZXN0Y2xpZW50XCIsIFwiLi4uXCJcbmNmZy5LRURfQ0xJRU5UX1NFQ1JFVCA9IHByb2Nlc3MuZW52LktFRF9DTElFTlRfU0VDUkVUO1xuY2ZnLktFRF9SRUFMTSA9IHByb2Nlc3MuZW52LktFRF9SRUFMTTsgLy8gXCJTRTFcIlxuY2ZnLktFRF9MT0NBTEUgPSBjZmcuS0VEX0xPQ0FMRSB8fCBwcm9jZXNzLmVudi5LRURfTE9DQUxFOyAvLyBcInN2XCIsIFwiZW5cIi4gT25seSBzZXQgZnJvbSBwcm9jZXNzLmVudiBpZiBub3Qgc2V0IGZyb20gU2l0ZVZpc2lvbiBlbGVtZW50IGNvbmZpZy5cbmNmZy5LRURfU0NIT09MX0xPQ0FMRSA9IGNmZy5LRURfU0NIT09MX0xPQ0FMRSB8fCBwcm9jZXNzLmVudi5LRURfU0NIT09MX0xPQ0FMRTsgLy8gXCJzdlwiLCBcImVuX3NpblwiLCBcImVuX25pblwiLiBPbmx5IHNldCBmcm9tIHByb2Nlc3MuZW52IGlmIG5vdCBzZXQgZnJvbSBTaXRlVmlzaW9uIGVsZW1lbnQgY29uZmlnLlxuY2ZnLktFRF9SRVNPVVJDRVNfVVJMID0gY2ZnLktFRF9SRVNPVVJDRVNfVVJMIHx8IHByb2Nlc3MuZW52LktFRF9SRVNPVVJDRVNfVVJMO1xuIiwiaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZywgZ2VuZXJhdGVRdWVyeVN0cmluZywgc3BsaXRVcmxBbmRRdWVyeSB9IGZyb20gXCIuLi91dGlscy9xdWVyeS1zdHJpbmdcIjtcbmltcG9ydCB7IEtlZEJhY2tlbmRDbGllbnRXZWIsIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLCBpc29tb3JwaGljLCBzdG9yYWdlIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWInO1xuaW1wb3J0IHsgQmVhcmVyUHJvdmlkZXIsIEtlZEJlYXJlclByb3ZpZGVyIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9jb250cmFjdHMva2VkLW1vZGVsc1wiO1xuaW1wb3J0IHsgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMgfSBmcm9tIFwiLi4vYWNjZXNzLWNvbnRyb2wvaW5kZXhcIjtcbmltcG9ydCB7IGNoZXJyeVBpY2tQcm9wcyB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xuXG5mdW5jdGlvbiBnZXRNZXJnZWRUb2tlblBhdGgodG9rZW5QYXRoOiBzdHJpbmcsIGxvY2F0aW9uU2VhcmNoOiBzdHJpbmcsIHNjb3Blczogc3RyaW5nW10pIHtcbiAgLy8gTWVyZ2UgY29uZmlndXJlZCBxdWVyeSBwYXJhbXMgb2YgdG9rZW4gcGF0aCB3aXRoIHBhcmFtcyBnaXZlbiB0byBjdXJyZW50IHBhZ2VcbiAgY29uc3QgY3VycmVudFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvblNlYXJjaCk7XG4gIGNvbnN0IGltcGVyc29uYXRpb25Qcm9wcyA9IGNoZXJyeVBpY2tQcm9wcyhjdXJyZW50UXVlcnksIElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TKTtcbiAgY29uc3QgW3Rva2VuUGF0aFdpdGhvdXRRdWVyeSwgdG9rZW5RdWVyeVN0cmluZ10gPSBzcGxpdFVybEFuZFF1ZXJ5KHRva2VuUGF0aCk7XG4gIGNvbnN0IHRva2VuUGF0aFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyh0b2tlblF1ZXJ5U3RyaW5nKTtcbiAgcmV0dXJuIHRva2VuUGF0aFdpdGhvdXRRdWVyeSArIGdlbmVyYXRlUXVlcnlTdHJpbmcoe1xuICAgIC4uLnRva2VuUGF0aFF1ZXJ5LFxuICAgIC4uLmltcGVyc29uYXRpb25Qcm9wcyxcbiAgICBzY29wZXM6IHNjb3Blcy5qb2luKCcsJylcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFRva2VuSWQobWVyZ2VkVG9rZW5QYXRoOiBzdHJpbmcsIHVzZXJFbWFpbDogc3RyaW5nKSB7XG4gIHJldHVybiBtZXJnZWRUb2tlblBhdGggKyBcIi9cIiArIHVzZXJFbWFpbDtcbn1cblxuZnVuY3Rpb24gc2F2ZVVzZXJJbmZvKHVzZXI6IFVzZXIsIHRva2VuSWQ6IHN0cmluZykge1xuICBlbnYuY3VycmVudFVzZXIgPSB1c2VyO1xuICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwidXNlckluZm9cIiArIHRva2VuSWQsIEpTT04uc3RyaW5naWZ5KHVzZXIpKTtcbn1cblxuZnVuY3Rpb24gbG9hZFVzZXJJbmZvKHRva2VuSWQ6IHN0cmluZykge1xuICBjb25zdCBzdG9yZWRTZXNzaW9uVXNlciA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oXCJ1c2VySW5mb1wiICsgdG9rZW5JZCk7XG4gIGlmIChzdG9yZWRTZXNzaW9uVXNlcikge1xuICAgIGVudi5jdXJyZW50VXNlciA9IEpTT04ucGFyc2Uoc3RvcmVkU2Vzc2lvblVzZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aDogc3RyaW5nLCB1c2VyRW1haWw6IHN0cmluZykge1xuICBjb25zdCB0b2tlbklkID0gZ2V0VG9rZW5JZChtZXJnZWRUb2tlblBhdGgsIHVzZXJFbWFpbCk7XG4gIHJldHVybiBuZXcgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoLCByZXNwb25zZVRleHQgPT4ge1xuICAgIGNvbnN0IHJlcyA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KSBhcyB7IG9rOiBib29sZWFuLCBlcnJvcj86IHN0cmluZywgdG9rZW4/OiBzdHJpbmcsIHVzZXI/OiBVc2VyIH07XG4gICAgaWYgKCFyZXMub2spIHRocm93IG5ldyBFcnJvcihyZXMuZXJyb3IpO1xuICAgIGlmIChyZXMudXNlcikge1xuICAgICAgc2F2ZVVzZXJJbmZvKHJlcy51c2VyLCB0b2tlbklkKTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdG9rZW46IHJlcy50b2tlbiwgZXhwaXJlczogRGF0ZS5ub3coKSArIDU5ICogNjAgKiAxMDAwIH07XG4gIH0sIHRva2VuSWQpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVHb29nbGVUb2tlblByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aDogc3RyaW5nLCB1c2VyRW1haWw6IHN0cmluZykge1xuICBjb25zdCB0b2tlbklkID0gZ2V0VG9rZW5JZChtZXJnZWRUb2tlblBhdGgsIHVzZXJFbWFpbCk7XG4gIHJldHVybiBuZXcgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoLCByZXNwb25zZVRleHQgPT4ge1xuICAgIGNvbnN0IHJlcyA9IEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KSBhcyB7IG9rOiBib29sZWFuLCBlcnJvcj86IHN0cmluZywgdG9rZW4/OiBzdHJpbmcsIHVzZXI/OiBVc2VyIH07XG4gICAgaWYgKCFyZXMub2spIHRocm93IG5ldyBFcnJvcihyZXMuZXJyb3IpO1xuICAgIHJldHVybiB7IHRva2VuOiByZXMudG9rZW4sIGV4cGlyZXM6IERhdGUubm93KCkgKyA1OSAqIDYwICogMTAwMCB9O1xuICB9LCB0b2tlbklkKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIodG9rZW5Vcmw6IHN0cmluZywgdXNlcjogVXNlciwgc2NvcGVzOiBzdHJpbmdbXSkge1xuICByZXR1cm4gbmV3IEtlZEJlYXJlclByb3ZpZGVyKFxuICAgIGlzb21vcnBoaWMsXG4gICAgc3RvcmFnZSxcbiAgICB0b2tlblVybCArIHVzZXIubWFpbCArIGxvY2F0aW9uLnNlYXJjaCxcbiAgICBjZmcuS0VEX0NMSUVOVF9JRCxcbiAgICBjZmcuS0VEX0NMSUVOVF9TRUNSRVQsXG4gICAgdG9rZW5VcmwsIHtcbiAgICAgIGVtYWlsOiB1c2VyLm1haWwudG9Mb3dlckNhc2UoKSxcbiAgICAgIHJvbGVzOiB1c2VyLnJvbGVzLFxuICAgICAgc2Nob29sOiB1c2VyLnNjaG9vbCxcbiAgICAgIHNjaG9vbFR5cGU6IHVzZXIuc2Nob29sVHlwZSxcbiAgICAgIHNjb3Blc1xuICAgIH0pO1xufVxuXG4vLyBlbnYuY3VycmVudFVzZXIubWFpbCBpcyBzZXQgYnkgU2l0ZVZpc2lvbiBzZXJ2ZXIgaW5pdGlhbGx5LlxuLy8gQSByZXNwb25zZSBmcm9tIC9hcGkvdG9rZW4gbWF5IGNoYW5nZSB0aGUgbWFpbCBhdHRyaWJ1dGUgb2YgdGhlIGN1cnJlbnRcbi8vIHVzZXIsIHNvIGVudi5jdXJyZW50VXNlci5tYWlsIG1heSBiZSBkaWZmZXJlbnQgYWZ0ZXIgZ2V0dGluZyBhIHJlc3BvbnNlLlxuLy8gSG93ZXZlciwgdGhlIGluaXRpYWwgdmFsdWUgaXMgdmFsdWFibGUgYWx3YXlzIGluIG9yZGVyIHRvIGRpc3Rpbmd1aXNoIHRoZSBjYXNlXG4vLyB3aGVuIG9uZSBub3JtYWwgdXNlciBsb2dzIG91dCBhbmQgYW5vdGhlciB1c2VyIGxvZ3MgaW4uXG5jb25zdCBpbml0aWFsVXNlckVtYWlsID0gZW52LmN1cnJlbnRVc2VyICYmIGVudi5jdXJyZW50VXNlci5tYWlsOyAvLyBJbml0aWFsIHZhbHVlIG9mIG1haWwuIE1heSBjaGFuZ2UuXG5pZiAoaW5pdGlhbFVzZXJFbWFpbCkge1xuICAvLyBLRURcbiAgaWYgKGNmZy5LRURfVE9LRU5fUEFUSCkge1xuICAgIC8vXG4gICAgLy9cbiAgICAvLyBQcm9kdWN0aW9uIC8gU2l0ZVZpc2lvbiBwcm94aWVkIC9hcGkvdG9rZW4gdG8gcmVxdWVzdCB0b2tlbnMgZnJvbTpcbiAgICAvL1xuICAgIC8vXG4gICAgY29uc3QgbWVyZ2VkVG9rZW5QYXRoID0gZ2V0TWVyZ2VkVG9rZW5QYXRoKFxuICAgICAgY2ZnLktFRF9UT0tFTl9QQVRILFxuICAgICAgbG9jYXRpb24uc2VhcmNoLCBbXG4gICAgICAgIFwia2VkYmFja2VuZFwiLFxuICAgICAgICBcIkVEU1wiLFxuICAgICAgXSk7XG4gICAgZW52LmJlYXJlclByb3ZpZGVyID0gY3JlYXRlQmVhcmVyUHJvdmlkZXIobWVyZ2VkVG9rZW5QYXRoLCBpbml0aWFsVXNlckVtYWlsKTtcbiAgICBsb2FkVXNlckluZm8oZ2V0VG9rZW5JZChtZXJnZWRUb2tlblBhdGgsIGluaXRpYWxVc2VyRW1haWwpKTtcblxuICAgIC8vIEdvb2dsZVxuICAgIGNvbnN0IGdvb2dsZU1lcmdlZFBhdGggPSBnZXRNZXJnZWRUb2tlblBhdGgoXG4gICAgICBjZmcuS0VEX1RPS0VOX1BBVEgsXG4gICAgICBsb2NhdGlvbi5zZWFyY2gsIFtcbiAgICAgICAgXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2NhbGVuZGFyLnJlYWRvbmx5XCIsXG4gICAgICBdKTtcbiAgICBlbnYuZ29vZ2xlVG9rZW5Qcm92aWRlciA9IGNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIoZ29vZ2xlTWVyZ2VkUGF0aCwgaW5pdGlhbFVzZXJFbWFpbCk7XG4gIH0gZWxzZSBpZiAoY2ZnLktFRF9UT0tFTl9VUkwgJiYgY2ZnLktFRF9DTElFTlRfSUQgJiYgY2ZnLktFRF9DTElFTlRfU0VDUkVUKSB7XG4gICAgLy9cbiAgICAvL1xuICAgIC8vIFRlc3QgLSBnbyBkaXJlY3RseSB0byBLRURBVVRIIHNlcnZlciB0byByZXRyaWV2ZSB0b2tlbnNcbiAgICAvL1xuICAgIC8vXG4gICAgZW52LmJlYXJlclByb3ZpZGVyID0gY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIoY2ZnLktFRF9UT0tFTl9VUkwsIGVudi5jdXJyZW50VXNlciwgW1xuICAgICAgXCJrZWRiYWNrZW5kXCIsXG4gICAgICBcIkVEU1wiLFxuICAgIF0pO1xuICAgIGVudi5nb29nbGVUb2tlblByb3ZpZGVyID0gY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIoY2ZnLktFRF9UT0tFTl9VUkwgKyBcIi9nb29nbGVcIiwgZW52LmN1cnJlbnRVc2VyLCBbXG4gICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2FsZW5kYXIucmVhZG9ubHlcIixcbiAgICBdKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXIgS0VEX1RPS0VOX1BBVEhgKTtcbiAgfVxufVxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudFdlYiB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcblxuZW52LmtlZEJhY2tlbmRDbGllbnQgPSBuZXcgS2VkQmFja2VuZENsaWVudFdlYiAoXG4gIGNmZy5LRURfQVBJX1VSTCxcbiAgZW52LmJlYXJlclByb3ZpZGVyKTtcblxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuaW1wb3J0IHsgaXNvbW9ycGhpYyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcbmltcG9ydCB7IEVkc0NsaWVudCB9IGZyb20gJy4uL2FwaXMvZWRzY2xpZW50JztcblxuZW52LmVkc0NsaWVudCA9IG5ldyBFZHNDbGllbnQgKFxuICBpc29tb3JwaGljLFxuICBjZmcuRURTX0FQSV9VUkwsXG4gIGVudi5iZWFyZXJQcm92aWRlcixcbiAgKCk9PmVudi5jdXJyZW50VXNlci5tYWlsKTtcblxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU2Nob29sLCBCcmFuY2gsIENvdXJzZSB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4uL2NvdXJzZXMvY291cnNlLWJhbm5lclwiO1xuaW1wb3J0IHsgc2hvd0Vycm9yLCBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBjcmVhdGVVVUlELCBEb2N1bWVudEFjY2VzcywgQmF0Y2hSdW5uZXIgfSBmcm9tIFwia2VkYmFja2VuZC9jbGllbnRcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgaWQ/OiBzdHJpbmdcbiAgdGl0bGU6IHN0cmluZ1xuICB0eXBlPzogJ2d5bW5hc2l1bScgfCAncHJpbWFyeSdcbn1cblxudHlwZSBTdGF0ZSA9IFNjaG9vbDtcblxuZXhwb3J0IGNvbnN0IEVkaXRTY2hvb2wgPSAocHJvcHM6IFByb3BzICYge2ZlZWRiYWNrVXJsOiBzdHJpbmd9KSA9PiA8ZGl2IHN0eWxlPXt7IG91dGxpbmU6IDAgfX0+XG4gIDxDb3Vyc2VCYW5uZXJcbiAgICB0aXRsZT1cIlNrb2xvclwiIGFjdGl2ZVBhZ2U9XCJzY2hvb2xzXCIgY2FsbGJhY2tzPXt7c2Nob29sczogKCk9PmxvY2F0aW9uLmhhc2g9XCIjL3NjaG9vbHNcIn19XG4gICAgcm91dGVzPXt7ZmVlZGJhY2s6IHByb3BzLmZlZWRiYWNrVXJsfX0gLz5cbiAgPEVkaXRTY2hvb2xOb0Jhbm5lciB7Li4ucHJvcHN9IC8+XG48L2Rpdj47XG5cbmV4cG9ydCBjbGFzcyBFZGl0U2Nob29sTm9CYW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgb3JpZ1NjaG9vbDogU2Nob29sO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0gbnVsbDtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubG9hZCgpLmNhdGNoKGVyciA9PiBzaG93RXJyb3IoZXJyKSk7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmlkKSB7XG4gICAgICAvLyBJRCBnaXZlbiwgbG9hZCBpdC5cbiAgICAgIGNvbnN0IHsgaWQgfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCBzY2hvb2wgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5nZXQ8U2Nob29sPihcInNjaG9vbHNcIiwgaWQpO1xuICAgICAgdGhpcy5vcmlnU2Nob29sID0geyAuLi5zY2hvb2wgfTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyAuLi5zY2hvb2wgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5vIGlkLCBjcmVhdGUgbmV3IGluc3RlYWQuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgb2ZmaWNpYWxCcmFuY2hJZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICBpc0d5bW5hc2l1bTogdGhpcy5wcm9wcy50eXBlID09PSAnZ3ltbmFzaXVtJyxcbiAgICAgICAgaXNQcmltYXJ5U2Nob29sOiB0aGlzLnByb3BzLnR5cGUgPT09ICdwcmltYXJ5J1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2F2ZSgpIHtcbiAgICBjb25zdCByID0gbmV3IEJhdGNoUnVubmVyKCk7XG4gICAgbGV0IHNjaG9vbCA9IHsgLi4udGhpcy5zdGF0ZSwgdGFnczogKHRoaXMuc3RhdGUudGFncyB8fCBbXSlcbiAgICAgIC5maWx0ZXIodGFnID0+IFtcInByaW1hcnlcIiwgXCJneW1uYXNpdW1cIl0uaW5kZXhPZih0YWcpIDwgMClcbiAgICB9O1xuXG4gICAgaWYgKHNjaG9vbC5pc1ByaW1hcnlTY2hvb2wpIHNjaG9vbC50YWdzLnB1c2goXCJwcmltYXJ5XCIpO1xuICAgIGlmIChzY2hvb2wuaXNHeW1uYXNpdW0pIHNjaG9vbC50YWdzLnB1c2goXCJneW1uYXNpdW1cIik7XG4gICAgaWYgKCEoc2Nob29sLmlzR3ltbmFzaXVtIHx8IHNjaG9vbC5pc1ByaW1hcnlTY2hvb2wpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IgKExgU2tvbGFuIG3DpXN0ZSBhbnRpbmdlbiB2YXJhIGd5bW5hc2l1bSBlbGxlciBncnVuZHNrb2xhYCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLm9yaWdTY2hvb2wpIHtcbiAgICAgIHNjaG9vbC5hY2wgPSBbXCJyb2xlOlVTRVI6UlwiXTtcbiAgICAgIHNjaG9vbC5hY2wucHVzaChcbiAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFxuICAgICAgICAgIFwic2Nob29sUm9sZVwiLFxuICAgICAgICAgIGAke3NjaG9vbC5uYW1lfS9FTVBMT1lFRWAsIFwiV1wiKS50b1N0cmluZygpKTtcbiAgICAgIHIuYWRkKFwic2Nob29sc1wiLCBzY2hvb2wpO1xuICAgICAgdGhpcy5hZGRTY2hvb2xCcmFuY2goc2Nob29sLCByKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3JpZ1NjaG9vbC5uYW1lICE9PSB0aGlzLnN0YXRlLm5hbWUpIHtcblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2tvbGFucyBuYW1uIGbDpXIgaW50ZSDDpG5kcmFzLiBLb250YWt0YSBWZW1lbmRvIEFCLlwiKVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc2Nob29sLm9mZmljaWFsQnJhbmNoSWQpIHtcbiAgICAgICAgc2Nob29sLm9mZmljaWFsQnJhbmNoSWQgPSBjcmVhdGVVVUlEKCk7XG4gICAgICAgIHRoaXMuYWRkU2Nob29sQnJhbmNoKHNjaG9vbCwgcik7XG4gICAgICB9XG4gICAgICByLnB1dChcInNjaG9vbHNcIiwgc2Nob29sKTtcbiAgICB9XG5cbiAgICBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5iYXRjaChyLm11dGF0aW9uUmVxdWVzdHMpO1xuXG4gICAgbG9jYXRpb24uaGFzaCA9IFwiIy9zY2hvb2xzXCI7XG4gIH1cblxuICBwcml2YXRlIGFkZFNjaG9vbEJyYW5jaChzY2hvb2w6IHsgdGFnczogc3RyaW5nW107IG5hbWU6IHN0cmluZzsgaXNQcmltYXJ5U2Nob29sPzogYm9vbGVhbjsgaXNHeW1uYXNpdW0/OiBib29sZWFuOyBvZmZpY2lhbEJyYW5jaElkOiBzdHJpbmc7IGNvdXJzZXM/OiBDb3Vyc2VbXTsgYWN0aXZlQ291cnNlcz86IENvdXJzZVtdOyBpZDogc3RyaW5nOyBhY2w/OiBzdHJpbmdbXTsgZGF0ZVRpbWU/OiBudW1iZXI7IHRyZWVQYXJlbnRJZD86IHN0cmluZzsgJGV0YWc/OiBzdHJpbmc7ICRtZXRhPzogXCJhZGRcIiB8IFwicmVmXCIgfCBcInVwZGF0ZVwiIHwgXCJhZGRpbmdcIiB8IFwidXBkYXRpbmdcIiB8IFwiZGVsZXRpbmdcIiB8IFwiZGVsZXRlZFwiOyB9LCByOiBCYXRjaFJ1bm5lcikge1xuICAgIGNvbnN0IGJyYW5jaDogQnJhbmNoID0ge1xuICAgICAgaWQ6IHNjaG9vbC5vZmZpY2lhbEJyYW5jaElkLFxuICAgICAgbmFtZTogc2Nob29sLm5hbWUsXG4gICAgICBzY2hvb2xJZDogc2Nob29sLmlkLFxuICAgICAgYWNsOiBbXG4gICAgICAgIFwicm9sZTpVU0VSOlJcIixcbiAgICAgICAgbmV3IERvY3VtZW50QWNjZXNzKFwic2Nob29sUm9sZVwiLCBgJHtzY2hvb2wubmFtZX0vRU1QTE9ZRUVgLCBcIldcIikudG9TdHJpbmcoKVxuICAgICAgXVxuICAgIH07XG4gICAgci5hZGQoXCJicmFuY2hlc1wiLCBicmFuY2gpO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlU2Nob29sKCkge1xuICAgIGlmIChwcm9tcHQoTGDDhHIgZHUgc8Oka2VyIHDDpSBhdHQgdGEgYm9ydCBza29sYW4gXCIke3RoaXMuc3RhdGUubmFtZX1cIj8gU2tyaXYgc2tvbGFucyBleGFrdGEgbmFtbiBmw7ZyIGF0dCBiZWtyw6RmdGFgKSA9PT0gdGhpcy5zdGF0ZS5uYW1lICkge1xuICAgICAgY29uc3Qgc2Nob29sQnJhbmNoID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxCcmFuY2g+KFwiYnJhbmNoZXNcIiwge1xuICAgICAgICBpZHM6IFt0aGlzLnN0YXRlLm9mZmljaWFsQnJhbmNoSWRdLFxuICAgICAgICBpbmNsdWRlOiBcImFwcHJvdmVkQ2hpbGRyZW5cIixcbiAgICAgICAgZmxhZ3M6IFtcImluY2x1ZGVJZHNPbmx5XCJdXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGJyID0gbmV3IEJhdGNoUnVubmVyKCk7XG4gICAgICBici5kZWxldGUoXCJzY2hvb2xzXCIsIHRoaXMuc3RhdGUuaWQpO1xuICAgICAgc2Nob29sQnJhbmNoWzBdLmFwcHJvdmVkQ2hpbGRyZW4uZm9yRWFjaCgoe2lkfSkgPT4ge1xuICAgICAgICBici5kZWxldGUoXCJicmFuY2hlc1wiLCBpZCk7XG4gICAgICB9KTtcbiAgICAgIGJyLmRlbGV0ZShcImJyYW5jaGVzXCIsIHRoaXMuc3RhdGUub2ZmaWNpYWxCcmFuY2hJZCk7XG4gICAgICBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5iYXRjaChici5tdXRhdGlvblJlcXVlc3RzKTtcbiAgICAgIGxvY2F0aW9uLmhhc2g9IFwiIy9zY2hvb2xzXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFsZXJ0KFwiU2tvbGFuIHRvZ3MgaW50ZSBib3J0IGVmdGVyc29tIGRldCBuYW1uIGR1IGFuZ2F2IGludGUgc3TDpG1tZXIuXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHRpdGxlLCBpZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBlZGl0RXhpc3RpbmcgPSAhIWlkO1xuICAgIGNvbnN0IHNjaG9vbCA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qgb3JpZ1NjaG9vbCA9IHRoaXMub3JpZ1NjaG9vbDtcbiAgICBjb25zdCBpc0FkbWluID0gZW52LmN1cnJlbnRVc2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSBcIkFETUlOXCIpO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgPGgyPnt0aXRsZX08L2gyPlxuICAgICAgICA8aHIgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5OYW1uOjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBhdXRvRm9jdXM9eyFzY2hvb2wgfHwgIXNjaG9vbC5uYW1lfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWlzQWRtaW4gfHwgZWRpdEV4aXN0aW5nfVxuICAgICAgICAgICAgICB0YWJJbmRleD17MX1cbiAgICAgICAgICAgICAgc2l6ZT17NTB9XG4gICAgICAgICAgICAgIHZhbHVlPXtzY2hvb2wgPyBzY2hvb2wubmFtZSA6IFwiXCJ9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHsgbmFtZTogZXYudGFyZ2V0LnZhbHVlIH0pfSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5WaXNuaW5nc25hbW46PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1cz17c2Nob29sICYmICFzY2hvb2wuZGlzcGxheU5hbWV9XG4gICAgICAgICAgICAgIGRpc2FibGVkPXshaXNBZG1pbn1cbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICAgIHNpemU9ezUwfVxuICAgICAgICAgICAgICB2YWx1ZT17c2Nob29sID8gc2Nob29sLmRpc3BsYXlOYW1lIDogXCJcIn1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMuc2V0U3RhdGUoeyBkaXNwbGF5TmFtZTogZXYudGFyZ2V0LnZhbHVlIH0pfSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge3NjaG9vbCAmJiBzY2hvb2wuaXNHeW1uYXNpdW0gPyA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPkVEUyBuYW1uIChneW1uYXNpdW0pOjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWlzQWRtaW59XG4gICAgICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgICAgICBzaXplPXs1MH1cbiAgICAgICAgICAgICAgdmFsdWU9e3NjaG9vbCA/IHNjaG9vbC5lZHNTY2hvb2xOYW1lR3ltbiA6IFwiXCJ9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHsgZWRzU2Nob29sTmFtZUd5bW46IGV2LnRhcmdldC52YWx1ZSB9KX0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBzcGFjZWRcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+IDogbnVsbH1cbiAgICAgICAge3NjaG9vbCAmJiBzY2hvb2wuaXNQcmltYXJ5U2Nob29sID8gPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5FRFMgbmFtbiAoZ3J1bmRza29sYSk6PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshaXNBZG1pbn1cbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICAgIHNpemU9ezUwfVxuICAgICAgICAgICAgICB2YWx1ZT17c2Nob29sID8gc2Nob29sLmVkc1NjaG9vbE5hbWVQcmltIDogXCJcIn1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMuc2V0U3RhdGUoeyBlZHNTY2hvb2xOYW1lUHJpbTogZXYudGFyZ2V0LnZhbHVlIH0pfSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj4gOiBudWxsfVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlR5cDo8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgIG5hbWU9XCJzY2hvb2xUeXBlUHJpbWFyeVwiXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshaXNBZG1pbn1cbiAgICAgICAgICAgICAgY2hlY2tlZD17c2Nob29sICYmIHNjaG9vbC5pc1ByaW1hcnlTY2hvb2x9XG4gICAgICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgICAgICB2YWx1ZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzUHJpbWFyeVNjaG9vbDogZXYudGFyZ2V0LmNoZWNrZWQgfSl9IC8+XG4gICAgICAgICAgICAmbmJzcDtHcnVuZHNrb2xhXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgbmFtZT1cInNjaG9vbFR5cGVHeW1uYXNpdW1cIlxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWlzQWRtaW59XG4gICAgICAgICAgICAgIGNoZWNrZWQ9e3NjaG9vbCAmJiBzY2hvb2wuaXNHeW1uYXNpdW19XG4gICAgICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgICAgICB2YWx1ZT1cImd5bW5hc2l1bVwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHsgaXNHeW1uYXNpdW06IGV2LnRhcmdldC5jaGVja2VkIH0pfSAvPlxuICAgICAgICAgICAgJm5ic3A7R3ltbmFzaXVtXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YnIvPlxuICAgICAgICB7aXNBZG1pbiAmJiBlZGl0RXhpc3RpbmcgJiYgPGRpdiB0YWJJbmRleD17Mn0gY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCkgPT5cbiAgICAgICAgICB0aGlzLmRlbGV0ZVNjaG9vbCgpLmNhdGNoKHNob3dFcnJvcil9PlxuICAgICAgICAgIFRhIGJvcnQgc2tvbGFcbiAgICAgICAgPC9kaXY+fVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1bGwtcmlnaHRcIj4mbmJzcDs8L2Rpdj5cbiAgICAgICAgPExpbmsgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgdG89XCIvc2Nob29sc1wiPlxuICAgICAgICAgIEF2YnJ5dFxuICAgICAgICA8L0xpbms+XG4gICAgICAgIFxuICAgICAgICB7aXNBZG1pbiAmJiA8YSB0YWJJbmRleD17MX0gY2xhc3NOYW1lPXtcImJ0biBidG4tbGFyZ2VcIn0gb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgIGlmIChvcmlnU2Nob29sICYmIG9yaWdTY2hvb2wubmFtZSAhPT0gc2Nob29sLm5hbWUpIHtcbiAgICAgICAgICAgIGlmICghY29uZmlybShMYMOEciBkdSBzw6RrZXIgcMOlIGF0dCBkdSB2aWxsIGTDtnBhIG9tIHNrb2xhbj8gRGV0dGEgcMOldmVya2FyIHBvcnRhbGVucyBmdW5rdGlvbiBmw7ZyIGzDpHJhcmUgb2NoIGVsZXZlciBzb20gdGlsbGjDtnIgc2tvbGFuLiBOYW1uZXQgbcOlc3RlIHN0w6RtbWEgZXhha3Qgw7Z2ZXJlbnMgbWVkIG5hbW5naXZuaW5nZW4gYXYgc2tvbGFuIHDDpSBhbnbDpG5kYXJvYmpla3Rlbi5cblxuRGV0IHNvbSBow6RuZGVyIGFubmFycyDDpHIgYXR0IGVsZXZlciBvY2ggbMOkcmFyZSBww6Ugc2tvbGFuIGludGUgbMOkbmdyZSBoaXR0YXIgbsOlZ3JhIGt1cnNlci5cblxuQmxpciBkZXQgZmVsIGthbiBkdSBkb2NrIGFsbHRpZCBiYXJhIGTDtnBhIHRpbGxiYWthIHNrb2xhbnMgbmFtbi5gKSkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2F2ZSgpLmNhdGNoKHNob3dFcnJvcik7XG4gICAgICAgIH19PlNwYXJhPC9hPn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PjtcbiAgfVxufSIsImltcG9ydCB7IFRhc2ssIExlYXJuaW5nR29hbHNDb250ZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgY29tcGFyZVByb3AsIGZsYXR0ZW4gfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kUmVwbyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XG5pbXBvcnQgeyBnZXRPcmRlcmVkRG9jcyB9IGZyb20gJy4vb3JkZXJlZC1yZXF1aXJlbWVudHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U29ydGVkVGFza3MoY29udGVudDogTGVhcm5pbmdHb2Fsc0NvbnRlbnQpIHtcbiAgcmV0dXJuIGdldE9yZGVyZWREb2NzKGNvbnRlbnQudGFza3MsIGNvbnRlbnQudGFza09yZGVyLCB7YXBwZW5kTGVmdG92ZXJzOiB0cnVlfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlVXBkYXRlZE9yZGVyPFQgZXh0ZW5kcyB7aWQ6IHN0cmluZ30+KFxuICBkb2NzOiBUW10sXG4gIGN1cnJlbnRPcmRlcjogc3RyaW5nW10gfCB1bmRlZmluZWQsXG4gIHNvdXJjZTogVCxcbiAgdGFyZ2V0OiBULFxuICBwbGFjZW1lbnQ6ICdiZWZvcmUnIHwgJ2FmdGVyJyxcbiAge2FwcGVuZExlZnRvdmVyc30gPSB7YXBwZW5kTGVmdG92ZXJzOiBmYWxzZX0pIDogc3RyaW5nW11cbntcbiAgY29uc3Qgb3JkZXJlZElkcyA9IGdldE9yZGVyZWREb2NzKGRvY3MsIGN1cnJlbnRPcmRlciwge2FwcGVuZExlZnRvdmVyczogdHJ1ZX0pLm1hcCh0ID0+IHQuaWQpO1xuICBjb25zdCBwbGFjZUJlZm9yZSA9IHBsYWNlbWVudCA9PT0gJ2JlZm9yZSc7XG5cbiAgY29uc3QgcmVzdWx0ID0gZmxhdHRlbihcbiAgICBvcmRlcmVkSWRzXG4gICAgICAuZmlsdGVyKGlkID0+IGlkICE9PSBzb3VyY2UuaWQpIC8vIFJlbW92ZSBzb3VyY2UgaWRcbiAgICAgIC5tYXAoaWQgPT4gaWQgIT09IHRhcmdldC5pZCA/XG4gICAgICAgIC8vIFdlJ3JlIG5vdCBvbiB0YXJnZXRcbiAgICAgICAgaWQgOlxuICAgICAgICAvLyBXZSdyZSBvbiB0YXJnZXQuIFBsYWNlIGJlZm9yZSBvciBhZnRlcj9cbiAgICAgICAgcGxhY2VCZWZvcmUgP1xuICAgICAgICAgIFtzb3VyY2UuaWQsIGlkXSA6XG4gICAgICAgICAgW2lkLCBzb3VyY2UuaWRdXG4gICAgICApXG4gICk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IENvdXJzZUJhbm5lciB9IGZyb20gXCIuLi9jb3Vyc2VzL2NvdXJzZS1iYW5uZXJcIjtcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xuaW1wb3J0IHsgU2hvd1N1YmplY3RJbm5lciB9IGZyb20gJy4vc2hvdy1zdWJqZWN0LWlubmVyJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgaWQ6IHN0cmluZ1xuICBmZWVkYmFja1VybDogc3RyaW5nXG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHN1YmplY3Q6IFN1YmplY3Rcbn1cblxuZXhwb3J0IGNsYXNzIFNob3dTdWJqZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge3N1YmplY3Q6IG51bGx9O1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMubG9hZCgpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICBjb25zdCBzdWJqZWN0ID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuZ2V0PFN1YmplY3Q+KCdzdWJqZWN0cycsIHRoaXMucHJvcHMuaWQsIHsgaW5jbHVkZTogJ2NvdXJzZVRlbXBsYXRlcycgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN1YmplY3QgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCF0aGlzLnN0YXRlLnN1YmplY3QpIHJldHVybiA8cD48U3Bpbm5lciAvPjwvcD47XG4gICAgY29uc3QgeyBuYW1lLCBjb2RlLCBjb3Vyc2VUZW1wbGF0ZXMsIHNjaG9vbFR5cGUgfSA9IHRoaXMuc3RhdGUuc3ViamVjdDtcbiAgICByZXR1cm4gPGRpdj48Q291cnNlQmFubmVyXG4gICAgICB0aXRsZT17bmFtZX1cbiAgICAgIGFjdGl2ZVBhZ2U9XCJzdWJqZWN0c1wiXG4gICAgICByb3V0ZXM9e3tmZWVkYmFjazogdGhpcy5wcm9wcy5mZWVkYmFja1VybH19XG4gICAgICAgLz5cbiAgICAgICA8U2hvd1N1YmplY3RJbm5lciBpZD17dGhpcy5wcm9wcy5pZH0gLz5cbiAgICA8L2Rpdj47XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBMaW5rLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4uL2NvdXJzZXMvY291cnNlLWJhbm5lclwiO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zcGlubmVyXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGlkOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgc3ViamVjdDogU3ViamVjdFxufVxuXG5leHBvcnQgY2xhc3MgU2hvd1N1YmplY3RJbm5lciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtzdWJqZWN0OiBudWxsfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmxvYWQoKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmdldDxTdWJqZWN0Pignc3ViamVjdHMnLCB0aGlzLnByb3BzLmlkLCB7IGluY2x1ZGU6ICdjb3Vyc2VUZW1wbGF0ZXMnIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzdWJqZWN0IH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5zdWJqZWN0KSByZXR1cm4gPHA+PFNwaW5uZXIgLz48L3A+O1xuICAgIGNvbnN0IHsgbmFtZSwgY29kZSwgY291cnNlVGVtcGxhdGVzLCBzY2hvb2xUeXBlIH0gPSB0aGlzLnN0YXRlLnN1YmplY3Q7XG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICB7c2Nob29sVHlwZSA9PT0gJ3ByaW1hcnknID8gPD5cbiAgICAgICAgPGgyPkdydW5kc2tvbGXDpG1uZXQge25hbWV9ICh7Y29kZX0pPC9oMj5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT1cImVudGl0eS1saXN0XCI+XG4gICAgICAgICAge2NvdXJzZVRlbXBsYXRlcy5tYXAoKHtpZCwgY29kZSwgcHVibGlzaGFibGUsIHBvaW50cywgc2Nob29sR3JhZGV9KSA9PlxuICAgICAgICAgIDxsaSBrZXk9e2lkfSBjbGFzc05hbWU9XCJjb21wbGV0ZVwiPlxuICAgICAgICAgICAge25hbWV9IGbDtnIgw6Vyc2t1cnMge3NjaG9vbEdyYWRlfVxuICAgICAgICAgIDwvbGk+KX1cbiAgICAgICAgPC91bD5cbiAgICAgIDwvPiAgOiA8PlxuICAgICAgICA8aDI+S3Vyc2VyIGbDtnIgw6RtbmV0IHtuYW1lfSAoe2NvZGV9KTwvaDI+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJlbnRpdHktbGlzdFwiPlxuICAgICAgICAgIHtjb3Vyc2VUZW1wbGF0ZXMubWFwKCh7aWQsIG5hbWUsIGNvZGUsIHB1Ymxpc2hhYmxlLCBwb2ludHN9KSA9PlxuICAgICAgICAgIDxsaSBrZXk9e2lkfSBjbGFzc05hbWU9XCJjb21wbGV0ZVwiPlxuICAgICAgICAgICAge25hbWV9IC0ge3BvaW50c31wXG4gICAgICAgICAgPC9saT4pfVxuICAgICAgICA8L3VsPlxuICAgICAgPC8+fVxuICAgIDwvZGl2PjtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVGFzayB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBUYXNrV2l0aE1ldGFkYXRhIHtcbiAgdGFzazogVGFzaztcbiAgaXNUYXNrT3duZXI6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHRhc2tNZXRhczogVGFza1dpdGhNZXRhZGF0YVtdO1xuICBvblNvcnQ6IChzb3VyY2U6IFRhc2ssIHRhcmdldDogVGFzaywgcGxhY2VtZW50OiAnYmVmb3JlJyB8ICdhZnRlcicpID0+IHZvaWQ7XG4gIHJlbmRlckVkaXRMaW5rPzogKHRhc2tNZXRhOiBUYXNrV2l0aE1ldGFkYXRhKSA9PiBhbnk7XG4gIHJlbmRlckxpbms6ICh0YXNrTWV0YTogVGFza1dpdGhNZXRhZGF0YSkgPT4gYW55O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFza0hhc01pZ3JhdGVkVGV4dHModGFzazogVGFzaykge1xuICByZXR1cm4gdGFzay5taWdyYXRlZFRleHRzICYmIE9iamVjdC5rZXlzKHRhc2subWlncmF0ZWRUZXh0cykuc29tZSh0eXBlID0+XG4gICAgT2JqZWN0LmtleXModGFzay5taWdyYXRlZFRleHRzW3R5cGVdKS5sZW5ndGggPiAwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNvcnRhYmxlVGFza0xpc3Qoe3Rhc2tNZXRhcywgcmVuZGVyRWRpdExpbmssIHJlbmRlckxpbmssIG9uU29ydH06IFByb3BzKSB7XG4gIGNvbnN0IFtkcmFnU3RhdGUsIHNldERyYWdTdGF0ZV0gPSB1c2VTdGF0ZSh7XG4gICAgdGFza0JlaW5nRHJhZ2dlZDogbnVsbCBhcyBUYXNrIHwgbnVsbCxcbiAgICB0YXNrQmVpbmdIb3ZlcmVkOiBudWxsIGFzIFRhc2sgfCBudWxsLFxuICAgIGluc2VydEJlZm9yZTogZmFsc2UsXG4gICAgb3JpZ2luQ2xpZW50WTogLTFcbiAgfSk7XG4gIGNvbnN0IHt0YXNrQmVpbmdEcmFnZ2VkLCB0YXNrQmVpbmdIb3ZlcmVkLCBpbnNlcnRCZWZvcmUsIG9yaWdpbkNsaWVudFl9ID0gZHJhZ1N0YXRlO1xuXG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXIgc29ydGFibGVcIlxuICAgICAgb25Ecm9wPXtldiA9PiB7XG4gICAgICAgIGlmICh0YXNrQmVpbmdIb3ZlcmVkICYmIHRhc2tCZWluZ0RyYWdnZWQpIHtcbiAgICAgICAgICBvblNvcnQodGFza0JlaW5nRHJhZ2dlZCwgdGFza0JlaW5nSG92ZXJlZCwgaW5zZXJ0QmVmb3JlID8gJ2JlZm9yZScgOiAnYWZ0ZXInKTtcbiAgICAgICAgfVxuICAgICAgICBzZXREcmFnU3RhdGUoey4uLmRyYWdTdGF0ZSwgdGFza0JlaW5nSG92ZXJlZDogbnVsbCwgdGFza0JlaW5nRHJhZ2dlZDogbnVsbH0pO1xuICAgICAgfX1cbiAgICA+XG4gIHt0YXNrTWV0YXMubWFwKHRhc2tNZXRhID0+IHtcbiAgICBjb25zdCB7dGFzaywgaXNUYXNrT3duZXJ9ID0gdGFza01ldGE7XG4gICAgY29uc3QgaGFzTWlncmF0ZWRUZXh0cyA9IHRhc2tIYXNNaWdyYXRlZFRleHRzKHRhc2spO1xuICAgIGNvbnN0IHRhc2tJZCA9IHRhc2suaWQ7XG5cbiAgICByZXR1cm4gPFJlYWN0LkZyYWdtZW50IGtleT17dGFza0lkfT5cblxuICAgICAge2luc2VydEJlZm9yZSAmJiB0YXNrQmVpbmdIb3ZlcmVkID09PSB0YXNrID9cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wLXRhcmdldFwiIG9uRHJhZ092ZXI9e2V2ID0+IGV2LnByZXZlbnREZWZhdWx0KCl9PiZuYnNwOzwvZGl2PiA6XG4gICAgICAgIG51bGxcbiAgICAgIH1cblxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9e1tcImFsaWduLWhvcml6b250YWxcIiwgXCJkcmFnZ2FibGVcIiwgdGFzayA9PT0gdGFza0JlaW5nRHJhZ2dlZCAmJiBcImRyYWctc291cmNlXCJdLmZpbHRlcih4PT54KS5qb2luKCcgJyl9XG4gICAgICAgIGRyYWdnYWJsZT17dHJ1ZX1cbiAgICAgICAgb25EcmFnU3RhcnQ9e2V2ID0+IHtcbiAgICAgICAgICBldi5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IFwibW92ZVwiO1xuICAgICAgICAgIHNldERyYWdTdGF0ZSh7Li4uZHJhZ1N0YXRlLCBvcmlnaW5DbGllbnRZOiBldi5jbGllbnRZLCB0YXNrQmVpbmdEcmFnZ2VkOiB0YXNrfSlcbiAgICAgICAgfX1cbiAgICAgICAgb25EcmFnT3Zlcj17ZXYgPT4ge1xuICAgICAgICAgIGlmICghdGFza0JlaW5nRHJhZ2dlZCkgcmV0dXJuO1xuICAgICAgICAgIGlmICh0YXNrQmVpbmdEcmFnZ2VkID09PSB0YXNrKSB7XG4gICAgICAgICAgICBzZXREcmFnU3RhdGUoey4uLmRyYWdTdGF0ZSwgdGFza0JlaW5nSG92ZXJlZDogbnVsbH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGV2LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gXCJtb3ZlXCI7XG4gICAgICAgICAgc2V0RHJhZ1N0YXRlKHsuLi5kcmFnU3RhdGUsIHRhc2tCZWluZ0hvdmVyZWQ6IHRhc2ssIGluc2VydEJlZm9yZTogb3JpZ2luQ2xpZW50WSA+IGV2LmNsaWVudFl9KTtcbiAgICAgICAgfX1cbiAgICAgICAgb25EcmFnRW5kPXtldiA9PiB7XG4gICAgICAgICAgc2V0RHJhZ1N0YXRlKHsuLi5kcmFnU3RhdGUsIHRhc2tCZWluZ0hvdmVyZWQ6IG51bGwsIHRhc2tCZWluZ0RyYWdnZWQ6IG51bGx9KTtcbiAgICAgICAgfX0+XG4gICAgICAgIHtpc1Rhc2tPd25lciAmJiBoYXNNaWdyYXRlZFRleHRzICYmIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgPGRpdiBzdHlsZT17e3Bvc2l0aW9uOidyZWxhdGl2ZScsIHRvcDonMC4yZW0nLCBsZWZ0OiAnLTAuN2VtJ319PlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGFnZWxpbmVzXCIgc3R5bGU9e3twb3NpdGlvbjonYWJzb2x1dGUnLCB0b3A6IDAsIGxlZnQ6IDAsIGNvbG9yOicjNDljMzVhJ319IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2Pn1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICB7cmVuZGVyRWRpdExpbmsodGFza01ldGEpfVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICB7cmVuZGVyTGluayh0YXNrTWV0YSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICAgIHshaW5zZXJ0QmVmb3JlICYmIHRhc2tCZWluZ0hvdmVyZWQgPT09IHRhc2sgP1xuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3AtdGFyZ2V0XCIgb25EcmFnT3Zlcj17ZXYgPT4gZXYucHJldmVudERlZmF1bHQoKX0+Jm5ic3A7PC9kaXY+IDpcbiAgICAgICAgbnVsbFxuICAgICAgfVxuXG4gICAgPC9SZWFjdC5GcmFnbWVudD47XG4gIH0pfVxuICA8L2Rpdj47XG59XG4iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmV4cG9ydCB0eXBlIFRlcm0gPSAnQVQnIHwgJ1NUJzsgLy8gc2hvdWxkIGJlIGNoYW5nZWQgaW50byBGaXJzdCBUZXJtIC8gU2Vjb25kIFRlcm1cbmV4cG9ydCB0eXBlIEFjYWRlbWljWWVhciA9IHN0cmluZzsgLy8gXCIyMDE2LzIwMTdcIiwgXCIyMDE3LzIwMThcIiwgLi4uXG5leHBvcnQgdHlwZSBTY2hvb2xHcmFkZSA9IG51bWJlcjsgLy8gMC05IChncnVuZHNrb2xhKSwgMTAtMTMgKGd5bW5hc2l1bSlcbmV4cG9ydCB0eXBlIEdyYWRlID0gJ0EnIHwgJ0InIHwgJ0MnIHwgJ0QnIHwgJ0UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXIge1xuICAgIHVzZXJuYW1lPzogc3RyaW5nO1xuICAgIG1haWw6IHN0cmluZztcbiAgICBkaXNwbGF5TmFtZTogc3RyaW5nO1xuICAgIHJvbGVzOiBzdHJpbmdbXTtcbiAgICBzY2hvb2xHcmFkZT86IG51bWJlcjtcbiAgICBzY2hvb2w/OiBzdHJpbmc7XG4gICAgc2Nob29sVHlwZT86IHN0cmluZztcbiAgICB0dXRvckZvcj86IHN0cmluZztcbiAgICBncm91cHM/OiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2FkZW1pY1llYXJTdHJ1Y3R1cmVcbntcbiBhY2FkZW1pY1llYXIgOiBBY2FkZW1pY1llYXI7XG4gc3RhcnREYXRlOiBtb21lbnQuTW9tZW50O1xuIGVuZERhdGU6IG1vbWVudC5Nb21lbnQ7XG4gYWNhZGVtaWNTdGFydFdlZWs6IG51bWJlcjtcbiBhY2FkZW1pY0VuZFdlZWs6IG51bWJlcjtcbiBob2xpZGF5czoge3N0YXJ0RGF0ZTogc3RyaW5nLCBlbmREYXRlOiBzdHJpbmd9W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdNb2R1bGVUYXNrcyB7XG4gICAgbW9kdWxlTmFtZTogc3RyaW5nO1xuICAgIHVybD86IHN0cmluZztcbiAgICBzdWJqZWN0OiBTY2hvb2xTdWJqZWN0O1xuICAgIGNvbW1vblRhc2tzPzogTGVhcm5pbmdUYXNrW107XG4gICAgbGVhcm5pbmdHb2FsczogTGVhcm5pbmdHb2FsW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdHb2FsIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdGFza3M/OiBMZWFybmluZ1Rhc2tbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21Hb2FsIHtcbiAgbmFtZTogc3RyaW5nLFxuICB1cmw6IHN0cmluZyxcbiAgY291cnNlOiBzdHJpbmcsXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcbn1cblxuXG4vKmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdHb2FsIHtcbiAgICBpZD86IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY291cnNlSWQ/OiBzdHJpbmc7XG4gICAgc3ViamVjdElkPzogc3RyaW5nO1xufSovXG5cblxuZXhwb3J0IGludGVyZmFjZSBMZWFybmluZ1Rhc2sge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB1cmw/OiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgZG9uZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdDb3Vyc2Uge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB1cmw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2Nob29sU3ViamVjdCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGNvdXJzZTogTGVhcm5pbmdDb3Vyc2U7XG59XG5cbmV4cG9ydCBjbGFzcyBDb3Vyc2Uge1xuICAgIC8vU2NoZW1hOiBcIlt5ZWFyK3Rlcm0rc2Nob29sWWVhcituYW1lXSxzb3J0b3JkZXJcIjtcbiAgICBpZD86IHN0cmluZztcbiAgICAvL2FZZWFyOiBzdHJpbmc7IC8vIEFjYWRlbWljIFllYXIgLyBMw6Rzw6VyIC8gXCIyMDE2LzIwMTdcIiwgXCIyMDE3LzIwMThcIiwgLi4uXG4gICAgLy9zY2hvb2xHcmFkZTogbnVtYmVyOyAvLyDDhXJza3VycyAoMC05IGdydW5kc2tvbGEsIDEwLTEzIGd5bW5hc2l1bSkuIDEwMCA9IGVqIGJ1bmRldCB0aWxsIMOlcnNrdXJzLlxuICAgIC8vdGVybT86IFRlcm07IC8vIEFUIChBdXR1bW4gVGVybSkgLyBTVCAoU3ByaW5nIFRlcm0pXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHBvaW50cz86IG51bWJlcjtcbiAgICBtb2R1bGVzPzogQ291cnNlTW9kdWxlW107XG4gICAgbGVhcm5pbmdHb2Fscz86IExlYXJuaW5nR29hbFtdO1xuICAgIHVybD86IHN0cmluZztcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIENvdXJzZU1vZHVsZSB7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgY291cnNlSWQ6IHN0cmluZztcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgcmVhZG9ubHkgdXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGFyZ2V0R3JhZGUge1xuICAgIGlkPzogc3RyaW5nO1xuICAgIHVzZXI6IHN0cmluZztcbiAgICBjb3Vyc2VJZD86IHN0cmluZztcbiAgICBzdWJqZWN0SWQ/OiBzdHJpbmc7XG4gICAgYVllYXI/OiBBY2FkZW1pY1llYXI7IC8vIEzDpHPDpXIsIHRleCBcIjIwMTYvMjAxN1wiLiBudWxsIG1lYW5zIGZpbmFsIGdvYWwuXG4gICAgdGVybT86IFRlcm07IC8vIG51bGwgbWVhbnMgZmluYWwgZ29hbC5cbiAgICBncmFkZTogR3JhZGU7XG59XG5cblxuZXhwb3J0IGNvbnN0IGZ1dHVyZUFiaWxpdGllcyA9IFtcbiAgICBcIkzDpHJhIGF0dCBsw6RyYVwiLFxuICAgIFwiU2FtYXJiZXRhXCIsXG4gICAgXCJBZ2VyYSBnbG9iYWx0XCIsXG4gICAgXCJWaXNhIGhhbmRsaW5nc2tyYWZ0XCIsXG4gICAgXCJWYXJhIGlubm92YXRpdlwiLFxuICAgIFwiTGV2YSBkaWdpdGFsdFwiXTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBTY2hvb2xDb3Vyc2VzIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc2Nob29sLWNvdXJzZXMnO1xuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBkdEZvcm1hdCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IERpYWxvZyB9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcbmltcG9ydCB2YWxpZFVybCBmcm9tICd2YWxpZC11cmwnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICByZXNvdXJjZT86IFJlc291cmNlO1xuICB0aXRsZTogc3RyaW5nO1xuICBvblNhdmU6IChuZXdSZXNvdXJjZTogUmVzb3VyY2UpID0+IHZvaWQ7XG4gIG9uRGVsZXRlPzogKCk9PnZvaWQ7XG59XG5cbnR5cGUgU3RhdGUgPSBSZXNvdXJjZTtcblxuZXhwb3J0IGNsYXNzIEVkaXRSZXNvdXJjZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4gaW1wbGVtZW50cyBEaWFsb2cge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvcHMucmVzb3VyY2UgfHwge25hbWU6ICcnLCB1cmw6ICcnfTtcbiAgfVxuXG4gIHNhdmUoKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLnN0YXRlO1xuICAgIGlmICghdmFsaWRVcmwuaXNVcmkocmVzb3VyY2UudXJsKSkgdGhyb3cgbmV3IEVycm9yKExgQW5naXZlbiBVUkwgJyR7cmVzb3VyY2UudXJsfScgw6RyIG9naWx0aWcuIFNrYSBiw7ZyamEgbWVkIGV4ZW1wZWx2aXMgaHR0cDosIGh0dHBzOiBlbGxlciBtYWlsdG86YCk7XG4gICAgdGhpcy5wcm9wcy5vblNhdmUocmVzb3VyY2UpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHt0aXRsZSwgb25TYXZlLCBvbkRlbGV0ZX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHJlc291cmNlID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpc1ZhbGlkVXJsID0gdmFsaWRVcmwuaXNVcmkodGhpcy5zdGF0ZS51cmwpO1xuXG4gICAgcmV0dXJuIDxkaXY+PGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgPGgyPnt0aXRsZX08L2gyPlxuICAgICAgPGhyIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5OYW1uOjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1c1xuICAgICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICBzaXplPXs1MH1cbiAgICAgICAgICAgIHZhbHVlPXtyZXNvdXJjZS5uYW1lfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2PT50aGlzLnNldFN0YXRlKHtuYW1lOiBldi50YXJnZXQudmFsdWV9KX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5Mw6Ruazo8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgICAgc2l6ZT17NTB9XG4gICAgICAgICAgICB2YWx1ZT17cmVzb3VyY2UudXJsfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2PT50aGlzLnNldFN0YXRlKHt1cmw6IGV2LnRhcmdldC52YWx1ZX0pfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxiciAvPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxuICAgICAgICB7KHJlc291cmNlLmNyZWF0ZWREYXRlIHx8IHJlc291cmNlLm1vZGlmaWVkRGF0ZSkgJiYgPGRpdj5cbiAgICAgICAgICB7cmVzb3VyY2UuY3JlYXRlZERhdGUgJiYgPHA+XG4gICAgICAgICAgICBSZXN1cnNlbi9Mw6Rua2VuIHNrYXBhZGVzIHtkdEZvcm1hdChyZXNvdXJjZS5jcmVhdGVkRGF0ZSl9IGF2IDxzdHJvbmc+e3Jlc291cmNlLmNyZWF0ZWRCeS5uYW1lfTwvc3Ryb25nPi5cbiAgICAgICAgICA8L3A+fVxuICAgICAgICAgIHtyZXNvdXJjZS5tb2RpZmllZERhdGUgJiYgPHA+XG4gICAgICAgICAgICBSZXN1cnNlbi9Mw6Rua2VuIHJlZGlnZXJhZGVzIHNlbmFzdCB7ZHRGb3JtYXQocmVzb3VyY2UubW9kaWZpZWREYXRlKX0gYXYgPHN0cm9uZz57cmVzb3VyY2UubW9kaWZpZWRCeS5uYW1lfTwvc3Ryb25nPi5cbiAgICAgICAgICA8L3A+fVxuICAgICAgICAgIDxiciAvPjxici8+XG4gICAgICAgIDwvZGl2Pn1cbiAgICAgICAge29uRGVsZXRlICYmIDxkaXYgdGFiSW5kZXg9ezJ9IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9eygpPT5vbkRlbGV0ZSgpfT5cbiAgICAgICAgICBUYSBib3J0IHJlc3Vycy9sw6Rua1xuICAgICAgICA8L2Rpdj59XG4gICAgICAgIDxhIHRhYkluZGV4PXsxfSBjbGFzc05hbWU9e1wiYnRuIGJ0bi1sYXJnZVwiICsgKGlzVmFsaWRVcmwgPyBcIlwiIDogXCIgYnRuLWluYWN0aXZlXCIpfSBvbkNsaWNrPXtpc1ZhbGlkVXJsICYmICgoKSA9PiBvblNhdmUocmVzb3VyY2UpKX0+U3BhcmE8L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlcnMgfSBmcm9tICcuLi9kYXRhL3VzZXJzJztcblxuZXhwb3J0IGZ1bmN0aW9uIENob29zZVVzZXIoKSB7XG4gIGxldCBzZWxlY3Q7XG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dFwiPlxuICAgIDxoMj5Ww6RsaiBhbnbDpG5kYXJlPC9oMj5cbiAgICA8dGFibGUgY2xhc3NOYW1lPVwibG9naW4tdGFibGVcIj48dGhlYWQ+PHRyPlxuICAgICAgPHRoPk5hbW48L3RoPlxuICAgICAgPHRoPlJvbGxlcjwvdGg+XG4gICAgICA8dGg+RS1wb3N0PC90aD5cbiAgICAgIDx0aD5Ta29sYTwvdGg+XG4gICAgPC90cj48L3RoZWFkPlxuICAgICAgPHRib2R5PlxuICAgICAgICB7dXNlcnMubWFwKCh7IHVzZXJuYW1lLCBkaXNwbGF5TmFtZSwgbWFpbCwgc2Nob29sLCByb2xlcyB9KSA9PlxuICAgICAgICAgIDx0ciBrZXk9e21haWx9IG9uQ2xpY2s9eygpID0+IGxvY2F0aW9uLnNlYXJjaCA9IGA/dXNlcj0ke3VzZXJuYW1lfWB9PlxuICAgICAgICAgICAgPHRkPntkaXNwbGF5TmFtZX08L3RkPlxuICAgICAgICAgICAgPHRkIHN0eWxlPXtyb2xlcy5sZW5ndGggPT09IDAgPyB7IGZvbnRTdHlsZTogJ2l0YWxpYycgfSA6IHt9fT57cm9sZXMubGVuZ3RoID09PSAwID8gXCJzYWtuYXIgcm9sbGVyXCIgOiByb2xlcy5qb2luKCcsICcpfTwvdGQ+XG4gICAgICAgICAgICA8dGQ+e21haWx9PC90ZD5cbiAgICAgICAgICAgIDx0ZCBzdHlsZT17c2Nob29sID8ge30gOiB7IGZvbnRTdHlsZTogJ2l0YWxpYycgfX0+e3NjaG9vbCB8fCBcInNha25hciBza29sYVwifTwvdGQ+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgKX1cbiAgICAgIDwvdGJvZHk+PC90YWJsZT5cbiAgPC9kaXY+XG59O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbnRlcmZhY2UgQ0VQcm9wcyB7XG4gICAgdGV4dDogc3RyaW5nOyAvLyBUZXh0IHRvIGJlIHNob3duIGluIGZpZWxkXG4gICAgdGFnPzogJ3RkJyB8ICd0aCcgfCAnZGl2JyB8ICdzcGFuJyB8ICdwJyB8ICdoMScgfCAnaDInIHwgJ2gzJzsgLy8gYWxsb3dkIHRhZ3MgLS0gc2hvdWxkIHdlIGFkZCBtb3JlP1xuICAgIG9uQ2hhbmdlOiAobmV3TmFtZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nOyAvLyBJZiB0ZXh0IGlzIGVtcHR5LCB0aGlzIHdpbGwgYmUgdGhlIHBsYWNlaG9sZGVyXG4gICAgbWF4Q2hhcnM/OiBudW1iZXI7XG4gICAgcmVhZE9ubHk/OiBib29sZWFuO1xuICAgIGNsYXNzTmFtZT86IHN0cmluZztcbiAgICBwbGFjZUhvbGRlcj86IHN0cmluZztcblxuICAgIHZhbGlkYXRlVmFsdWU/OiBSZWdFeHA7XG5cbiAgICAvLyBGb3IgbmF2aWdhdGlvblxuICAgIGFsbG93TmF2aWdhdGlvbj86IGJvb2xlYW47IC8vIHRvIGFjdGl2YXRlIG5hdmlnYXRpb25cbiAgICBvbk5hdmlnYXRlPzogKGRpcmVjdGlvbjogc3RyaW5nKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgQ29udGVudEVkaXRhYmxlRmllbGQgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PENFUHJvcHM+IHtcbiAgICBteXNlbGY6IFJlYWN0LlJlZk9iamVjdDxhbnk+O1xuICAgIHByb3BhZ2F0ZWRPbkNoYW5nZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IENFUHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLm15c2VsZiA9IFJlYWN0LmNyZWF0ZVJlZjxIVE1MRWxlbWVudD4oKTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgICAgIHRleHQ6IHByb3BzLnRleHQgfHwgJydcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qge3RhZywgdGV4dCwgcmVhZE9ubHl9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgY29uc3QgVGFnVHlwZSA9IHRhZztcbiAgICAgICAgcmV0dXJuIDxUYWdUeXBlXG4gICAgICAgICAgICBjb250ZW50RWRpdGFibGU9eyFyZWFkT25seX1cbiAgICAgICAgICAgIGRhdGEtcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICByZWY9e3RoaXMubXlzZWxmfVxuICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmNsYXNzTmFtZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uQ2hhbmdlLmJpbmQodGhpcyl9XG4gICAgICAgICAgICBvbktleURvd249e3RoaXMub25LZXlEb3duLmJpbmQodGhpcyl9XG4gICAgICAgICAgICBvbktleVVwPXt0aGlzLm9uS2V5VXAuYmluZCh0aGlzKX1cbiAgICAgICAgICAgIG9uQmx1cj17dGhpcy5vbkJsdXIuYmluZCh0aGlzKX1cbiAgICAgICAgICAgIG9uUGFzdGU9e3RoaXMub25QYXN0ZS5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHRleHR9fSAvPlxuICAgIH1cblxuICAgIG9uQ2hhbmdlKGU6IEV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0ZXh0OiB0aGlzLm15c2VsZi5jdXJyZW50LmlubmVyVGV4dCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUYWtlIGFjdGlvbiBkZXBlbmRpbmcgb24ga2V5LWV2ZW50XG4gICAgICogQHBhcmFtIGUgZXZlbnQgZnJvbSBmaWVsZFxuICAgICAqIFxuICAgICAqIElmIGFsbG93TmF2aWdhdGlvbiB0aGVuIGxpc3RlbiB0byBhcnJvdy1rZXlzXG4gICAgICogTGltaXRzIHRvIG1heENoYXJzXG4gICAgICovXG4gICAgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMubXlzZWxmLmN1cnJlbnQuaW5uZXJUZXh0O1xuICAgICAgICBpZiAoZS5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICB0aGlzLm15c2VsZi5jdXJyZW50LmlubmVyVGV4dCA9IHRoaXMucHJvcHMudGV4dCB8fCBcIlwiO1xuICAgICAgICAgICAgdGhpcy5teXNlbGYuY3VycmVudC5ibHVyKCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9IGVsc2UgaWYoZS5rZXkgPT09ICdFbnRlcicpe1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5uYXZpZ2F0ZSh0ZXh0LCAnZG93bicpO1xuICAgICAgICB9IGVsc2UgaWYgKGUua2V5ID09PSAnVGFiJykge1xuICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVPbkNoYW5nZSh0ZXh0KTtcbiAgICAgICAgfSAgZWxzZSBpZih0ZXh0Lmxlbmd0aCA+PSB0aGlzLnByb3BzLm1heENoYXJzICYmIChcbiAgICAgICAgICAgIC9eW1xcZFxcd1xcc10kLy50ZXN0KGUua2V5KSAmJiAhKGUubWV0YUtleSB8fCBlLmN0cmxLZXkpXG4gICAgICAgICkpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcm9wcy5hbGxvd05hdmlnYXRpb24gPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hdkRpciA9IGUua2V5LnN0YXJ0c1dpdGgoJ0Fycm93JykgPyBlLmtleS5yZXBsYWNlKCdBcnJvdycsICcnKS50b0xvd2VyQ2FzZSgpIDogZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBjYXJldCA9IGRvY3VtZW50LmdldFNlbGVjdGlvbigpLmdldFJhbmdlQXQoMCkuZW5kT2Zmc2V0OyAvLyBvbmx5IHdvcmtzIGZvciBwbGFpbnRleHRcbiAgICAgICAgICAgIGlmIChuYXZEaXIgJiYgdGV4dC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGUodGV4dCwgbmF2RGlyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmF2RGlyICYmIChuYXZEaXIgPT0gJ3VwJyB8fCBuYXZEaXIgPT0gJ2Rvd24nKSkge1xuICAgICAgICAgICAgICAgIHRoaXMubmF2aWdhdGUodGV4dCwgbmF2RGlyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobmF2RGlyICYmIChcbiAgICAgICAgICAgICAgICAobmF2RGlyID09ICdsZWZ0JyAmJiBjYXJldCA9PSAwKSB8fFxuICAgICAgICAgICAgICAgIChuYXZEaXIgPT0gJ3JpZ2h0JyAmJiBjYXJldCA9PSB0ZXh0Lmxlbmd0aClcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5hdmlnYXRlKHRleHQsIG5hdkRpcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBcbiAgICAgKiBAcGFyYW0gZSBldmVudCBmcm9tIGZpZWxkXG4gICAgICogU29sZWx5IHVzZWQgdG8gaGFuZGUgdmFsaWRhdGlvbnMtaXNzdWVzXG4gICAgICovXG4gICAgb25LZXlVcChlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLm15c2VsZi5jdXJyZW50LmlubmVyVGV4dDtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudmFsaWRhdGVWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICF0aGlzLnByb3BzLnZhbGlkYXRlVmFsdWUudGVzdCh0ZXh0KSkge1xuICAgICAgICAgICAgdGhpcy5teXNlbGYuY3VycmVudC5pbm5lclRleHQgPSB0aGlzLnByb3BzLnRleHQgfHwgXCJcIjtcbiAgICAgICAgICAgIHRoaXMubXlzZWxmLmN1cnJlbnQuYmx1cigpO1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHZhbHVlIGFuZCBwYXNzIHRvIHBhcmVudHMgbmF2aWdhdGUtZnVuY2l0b25cbiAgICAgKiBAcGFyYW0gdGV4dCBcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIFxuICAgICAqL1xuICAgIG5hdmlnYXRlKHRleHQ6IHN0cmluZywgZGlyZWN0aW9uOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gZmlyc3QgdXBkYXRlIGNlbGxcbiAgICAgICAgdGhpcy5wcm9wYWdhdGVPbkNoYW5nZSh0ZXh0KTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHRleHQ6IHRleHR9ICk7XG4gICAgICAgIC8vIHRoZW4gbmF2aWdhdGUgYXdheVxuICAgICAgICB0aGlzLnByb3BzLm9uTmF2aWdhdGUoZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNYWtlIHN1cmUgcGFzdGVkIHRleHQgaXMgcHVyZSB0ZXh0XG4gICAgICogQHBhcmFtIGUgdGhlIHBhc2V0IGV2ZW50XG4gICAgICovXG4gICAgb25QYXN0ZShlOiBDbGlwYm9hcmRFdmVudCkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHRleHQgPSAoZS5jbGlwYm9hcmREYXRhICYmIGUuY2xpcGJvYXJkRGF0YS5nZXREYXRhKT8gIGUuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwidGV4dC9wbGFpblwiKSA6ICcnO1xuICAgICAgICBkb2N1bWVudC5leGVjQ29tbWFuZChcImluc2VydEhUTUxcIiwgZmFsc2UsIHRleHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB2YWx1ZSBvbiBleGl0IGZyb20gZmllbGRcbiAgICAgKiBAcGFyYW0gZSBcbiAgICAgKi9cbiAgICBvbkJsdXIoZTogRXZlbnQpIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMubXlzZWxmLmN1cnJlbnQuaW5uZXJUZXh0O1xuICAgICAgICB0aGlzLnByb3BhZ2F0ZU9uQ2hhbmdlKHRleHQpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgdGV4dDogdGV4dCB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbmx5IHVwZGF0ZSB2YWx1ZSBpZiBpdCBoYXMgY2hhbmdlZFxuICAgICAqIEBwYXJhbSBuZXdWYWx1ZSBcbiAgICAgKi9cbiAgICBwcm9wYWdhdGVPbkNoYW5nZShuZXdWYWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5wcm9wYWdhdGVkT25DaGFuZ2UgIT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlZE9uQ2hhbmdlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBEaWFsb2dDb250YWluZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3RcIjtcbmltcG9ydCB7IEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBFZGl0U2Nob29sIH0gZnJvbSAnLi9lZGl0LXNjaG9vbCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBhY3RBcyB9IGZyb20gXCIuLi8uLi8uLi9hY2Nlc3MtY29udHJvbFwiO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zcGlubmVyXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNjaG9vbHM/OiBTY2hvb2xbXVxuICB2aWV3Q291cnNlVXJsOiBzdHJpbmdcbiAgdHlwZTogJ2d5bW5hc2l1bScgfCAncHJpbWFyeSdcbn1cblxuZXhwb3J0IGNvbnN0IEVkaXRhYmxlU2Nob29sTGlzdCA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBzY2hvb2xzLCB2aWV3Q291cnNlVXJsIH0gPSBwcm9wcztcbiAgY29uc3QgaXNBZG1pbiA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gXCJBRE1JTlwiKTtcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiZWRpdGFibGUtc2Nob29sLWxpc3RcIj5cbiAgICA8ZGl2PlxuICAgICAge3NjaG9vbHMgPyA8dGFibGU+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICB7c2Nob29scy5tYXAoc2Nob29sID0+XG4gICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17c2Nob29sLmlkfT5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgdG89e2Avc2Nob29scy8ke3NjaG9vbC5pZH0vZWRpdGB9PjwvTGluaz5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxwPntzY2hvb2wubmFtZX08L3A+XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICA8cD48YSBzdHlsZT17e2N1cnNvcjogJ3BvaW50ZXInfX0gb25DbGljaz17KCk9PmFjdEFzKHtyb2xlOiBcIkVNUExPWUVFXCIsIHNjaG9vbDogc2Nob29sLm5hbWV9KX0+QWdlcmEgc29tIGzDpHJhcmUgcMOlIGRlbm5hIHNrb2xhPC9hPjwvcD5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxwPjxhIHN0eWxlPXt7Y3Vyc29yOiAncG9pbnRlcid9fSBvbkNsaWNrPXsoKT0+YWN0QXMoe3JvbGU6IFwiU1RVREVOVFwiLCBzY2hvb2w6IHNjaG9vbC5uYW1lLCB1cmw6IHZpZXdDb3Vyc2VVcmx9KX0+QWdlcmEgc29tIGVsZXYgcMOlIGRlbm5hIHNrb2xhPC9hPjwvcD5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+KX1cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+IDogPHA+PFNwaW5uZXIgLz5WLmcuIHbDpG50YSBtZWRhbiBza29sb3IgbGFkZGFzPC9wPn1cbiAgICA8L2Rpdj5cbiAgICA8YnIgLz5cbiAgICB7c2Nob29scyAmJiBpc0FkbWluICYmIDxMaW5rIHRvPXtgL3NjaG9vbHMvbmV3LyR7cHJvcHMudHlwZX1gfSBjbGFzc05hbWU9XCJidG5cIj57XG4gICAgICAgIHByb3BzLnR5cGUgPT0gJ2d5bW5hc2l1bScgPyBMYEzDpGdnIHRpbGwgZ3ltbmFzaWVza29sYWAgOlxuICAgICAgICBwcm9wcy50eXBlID09ICdwcmltYXJ5JyA/IExgTMOkZ2cgdGlsbCBncnVuZHNrb2xhYCA6XG4gICAgICAgIExgTMOkZ2cgdGlsbCBza29sYWB9PC9MaW5rPn1cbiAgPC9kaXYgPlxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4uL2NvdXJzZXMvY291cnNlLWJhbm5lclwiO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgU2Nob29sIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgRWRpdGFibGVTY2hvb2xMaXN0IH0gZnJvbSAnLi9lZGl0YWJsZS1zY2hvb2wtbGlzdCc7XG5pbXBvcnQgeyBzaG93RXJyb3IsIGNvbXBhcmVQcm9wIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcbiAgZmVlZGJhY2tVcmw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgc2Nob29sczogU2Nob29sW10gfCBudWxsXG59XG5cbmV4cG9ydCBjb25zdCBTY2hvb2xzID0gKHByb3BzOiBQcm9wcykgPT4gPGRpdiBzdHlsZT17eyBvdXRsaW5lOiAwIH19PlxuICA8Q291cnNlQmFubmVyIHRpdGxlPVwiU2tvbG9yXCIgYWN0aXZlUGFnZT1cInNjaG9vbHNcIiByb3V0ZXM9e3tmZWVkYmFjazogcHJvcHMuZmVlZGJhY2tVcmx9fSAvPlxuICA8U2Nob29sc1dpdGhvdXRCYW5uZXIgdmlld0NvdXJzZVVybD17cHJvcHMudmlld0NvdXJzZVVybH0gLz5cbjwvZGl2PlxuXG5leHBvcnQgY2xhc3MgU2Nob29sc1dpdGhvdXRCYW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UGljazxQcm9wcywgXCJ2aWV3Q291cnNlVXJsXCI+LFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2Nob29sczogbnVsbFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubG9hZCgpLmNhdGNoKGVyciA9PiBzaG93RXJyb3IoZXJyLm1lc3NhZ2UgfHwgZXJyKSk7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIGNvbnN0IHNjaG9vbHMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFNjaG9vbD4oXCJzY2hvb2xzXCIpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzY2hvb2xzIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgc2Nob29scyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBzY2hvb2xzICYmIHNjaG9vbHMuc29ydChjb21wYXJlUHJvcChcIm5hbWVcIikpO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAge3NjaG9vbHMgPyA8PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMj5HeW1uYXNpZXNrb2xvcjwvaDI+XG4gICAgICAgICAgPEVkaXRhYmxlU2Nob29sTGlzdFxuICAgICAgICAgICAgc2Nob29scz17c2Nob29scy5maWx0ZXIoc2Nob29sID0+IHNjaG9vbC5pc0d5bW5hc2l1bSl9XG4gICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XG4gICAgICAgICAgICB0eXBlPVwiZ3ltbmFzaXVtXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGgyPkdydW5kc2tvbG9yPC9oMj5cbiAgICAgICAgICA8RWRpdGFibGVTY2hvb2xMaXN0XG4gICAgICAgICAgICBzY2hvb2xzPXtzY2hvb2xzLmZpbHRlcihzY2hvb2wgPT4gc2Nob29sLmlzUHJpbWFyeVNjaG9vbCl9XG4gICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+IDogPFNwaW5uZXIgLz59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtUYXNrLCBDb3Vyc2V9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHRhc2s6IFRhc2s7XG4gIGNvdXJzZTogQ291cnNlO1xuICB1cGRhdGVMaW5rOiAoaWQ6IHN0cmluZywgbGlua09yVW5saW5rOiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgVGFza01pZ3JhdGlvbkJveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3Rhc2ssIGNvdXJzZSwgdXBkYXRlTGlua30gPSB0aGlzLnByb3BzO1xuICAgIGlmICghdGFzay5taWdyYXRlZFRleHRzKSByZXR1cm4gPD4mbmJzcDs8Lz47XG4gICAgY29uc3Qge2FiaWxpdGllcywgY2VudHJhbENvbnRlbnQsIGtub3dsZWRnZVJlcXVpcmVtZW50c30gPSB0YXNrLm1pZ3JhdGVkVGV4dHM7XG4gICAgY29uc3Qga3JzID0gT2JqZWN0LmtleXMoa25vd2xlZGdlUmVxdWlyZW1lbnRzIHx8IHt9KS5tYXAoaWQgPT4gKHtcbiAgICAgIC4uLmNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZmluZCh0ID0+IHQuaWQgPT09IGlkKSxcbiAgICAgIC4uLmtub3dsZWRnZVJlcXVpcmVtZW50c1tpZF1cbiAgICB9KSkvLy5maWx0ZXIoKHtuYW1lfSkgPT4gISFuYW1lKTtcbiAgICBjb25zdCBrckEgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhdCBrdW5za2Fwc2tyYXYgZsO2ciBiZXR5Z2V0IEFcIiwgdHlwZTogXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgaXRlbXM6IGtycy5maWx0ZXIoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSAnQScpfTtcbiAgICBjb25zdCBrckMgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhdCBLdW5za2Fwc2tyYXYgZsO2ciBiZXR5Z2V0IENcIiwgdHlwZTogXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgaXRlbXM6IGtycy5maWx0ZXIoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSAnQycpfTtcbiAgICBjb25zdCBrckUgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhdCBrdW5za2Fwc2tyYXYgZsO2ciBiZXR5Z2V0IEVcIiwgdHlwZTogXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgaXRlbXM6IGtycy5maWx0ZXIoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSAnRScpfTtcbiAgICBjb25zdCBhYnMgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhZGUgZsO2cm3DpWdvclwiLCB0eXBlOiBcImFiaWxpdGllc1wiLCBpdGVtczogT2JqZWN0LmtleXMoYWJpbGl0aWVzIHx8IHt9KS5tYXAoaWQgPT4gKHtcbiAgICAgIC4uLmNvdXJzZS5hYmlsaXRpZXMuZmluZCh0ID0+IHQuaWQgPT09IGlkKSxcbiAgICAgIC4uLmFiaWxpdGllc1tpZF19KVxuICAgICl9Ly8uZmlsdGVyKCh7bmFtZX0pID0+ICEhbmFtZSl9O1xuICAgIGNvbnN0IGNjcyA9IHt0aXRsZTogXCJVcHBkYXRlcmF0IGNlbnRyYWx0IGlubmVow6VsbFwiLCB0eXBlOiBcImNlbnRyYWxDb250ZW50XCIsIGl0ZW1zOiBPYmplY3Qua2V5cyhjZW50cmFsQ29udGVudCB8fCB7fSkubWFwKGlkID0+ICh7XG4gICAgICAuLi5jb3Vyc2UuY2VudHJhbENvbnRlbnQuZmluZChjYyA9PiBjYy5pZCA9PSBpZCksXG4gICAgICAuLi5jZW50cmFsQ29udGVudFtpZF1cbiAgICAgIH0pXG4gICAgKX0vLy5maWx0ZXIoKHtuYW1lfSkgPT4gISFuYW1lKX07XG4gICAgY29uc3QgdGFibGVzVG9TaG93ID0gW2tyQSwga3JDLCBrckUsIGNjcywgYWJzXS5maWx0ZXIoYm94SW5mbyA9PiBib3hJbmZvLml0ZW1zLmxlbmd0aCA+IDApO1xuICAgIGlmICh0YWJsZXNUb1Nob3cubGVuZ3RoID09PSAwKSByZXR1cm4gPD4mbmJzcDs8Lz47XG5cbiAgICByZXR1cm4gKFxuICAgICAgPE9wZW5DbG9zZUJveCBjbGFzc05hbWU9XCJsYXJnZXJcIiB0aXRsZT17PGRpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3YXJuaW5nRmxhZ1wiPlxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHA+VXBwZGF0ZXJhZGUgZm9ybXVsZXJpbmdhciBmcsOlbiBTa29sdmVya2V0PC9wPlxuICAgICAgPC9kaXY+fT5cbiAgICAgICAge3RhYmxlc1RvU2hvdy5tYXAoKHt0aXRsZSwgdHlwZSwgaXRlbXN9KSA9PiA8ZGl2IGtleT17dGl0bGV9PlxuICAgICAgICAgIDxoNT57dGl0bGV9PC9oNT5cbiAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGggc3R5bGU9e3t3aWR0aDogXCI0MCVcIn19PlVyc3BydW5nbGlnIGZvcm11bGVyaW5nPC90aD5cbiAgICAgICAgICAgICAgICA8dGggc3R5bGU9e3t3aWR0aDogXCI0MCVcIn19PlNrb2x2ZXJrZXRzIG55YSBmb3JtdWxlcmluZzwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPlTDpGNrZXIgdXBwZ2lmdGVuIGRlbiBueWEgZm9ybXVsZXJpbmdlbj88L3RoPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAge2l0ZW1zLm1hcChpdGVtID0+IDx0ciBrZXk9e2l0ZW0uaWR9PlxuICAgICAgICAgICAgICAgIDx0ZCBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogaXRlbS5vbGRUZXh0fX0gLz5cbiAgICAgICAgICAgICAgICA8dGQgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IGl0ZW0ubmFtZX19IC8+XG4gICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+dXBkYXRlTGluayhpdGVtLmlkLCB0cnVlKX0+SmEgLSBiZWjDpWxsIGtvcHBsaW5nZW48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCk9PnVwZGF0ZUxpbmsoaXRlbS5pZCwgZmFsc2UpfT5OZWogLSB0YSBib3J0IGtvcHBsaW5nZW48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8L3RyPil9XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgIDwvZGl2Pil9XG4gICAgICA8L09wZW5DbG9zZUJveD5cblxuICAgIClcbiAgfVxufSIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBjZmcgfSBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xuXG5jb25zdCBIRUFSVEJFQVRfSU5URVJWQUwgPSA1ICogNjAgKiAxMDAwOyAvLyA1IG1pbnV0ZXMuXG5jb25zdCBIRUFSVEJFQVRfVVJMID0gY2ZnLktFRF9LRUVQX0FMSVZFX1VSTDtcblxubGV0IGxhc3RBY3Rpdml0eSA9IERhdGUubm93KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBrZWVwU2Vzc2lvbkFsaXZlKCkge1xuICBzZXRJbnRlcnZhbChvblRpbWVvdXQsIEhFQVJUQkVBVF9JTlRFUlZBTCk7XG4gIHNldFRpbWVvdXQoKCk9PiQoJ2JvZHknKVxuICAgIC5tb3VzZW1vdmUob25Vc2VyQWN0aXZlKVxuICAgIC5rZXlwcmVzcyhvblVzZXJBY3RpdmUpXG4gICAgLnNjcm9sbChvblVzZXJBY3RpdmUpLCAxMDApO1xufVxuXG5mdW5jdGlvbiBvblVzZXJBY3RpdmUoKSB7XG4gIGxhc3RBY3Rpdml0eSA9IERhdGUubm93KCk7XG59XG5cbmZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgY29uc3QgaW5hY3Rpdml0eVRpbWUgPSBEYXRlLm5vdygpIC0gbGFzdEFjdGl2aXR5O1xuICBpZiAoaW5hY3Rpdml0eVRpbWUgPCBIRUFSVEJFQVRfSU5URVJWQUwpIHtcbiAgICBoZWFydGJlYXQoKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBoZWFydGJlYXQoKSB7XG4gIGNvbnNvbGUubG9nKGBTZW5kaW5nIGhlYXJ0YmVhdCByZXF1ZXN0IHRvICR7SEVBUlRCRUFUX1VSTH1gKTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChIRUFSVEJFQVRfVVJMLCB7XG4gICAgICBjYWNoZTogJ25vLWNhY2hlJyxcbiAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coYFJlc3BvbnNlIGZyb20gJHtIRUFSVEJFQVRfVVJMfTogJHtyZXMuc3RhdHVzfSAke3Jlcy5zdGF0dXNUZXh0fWApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLndhcm4oYFJlcXVlc3QgdG8gJHtIRUFSVEJFQVRfVVJMfSBmYWlsZWQ6ICR7ZXJyfWApO1xuICB9XG59XG4iLCJleHBvcnQgaW50ZXJmYWNlIFNrb2x2ZXJrZXRTdWJqZWN0IHtcbiAgbmFtZTogc3RyaW5nO1xuICBzY2hvb2xUeXBlOiAnZ3ltbmFzaXVtJyB8ICdwcmltYXJ5JztcbiAgY29kZTogc3RyaW5nO1xuICBwdXJwb3NlOiBzdHJpbmc7XG4gIGNvdXJzZXM6IFNrb2x2ZXJrZXRDb3Vyc2VbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTa29sdmVya2V0Q291cnNlIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgY29kZTogc3RyaW5nO1xuICAgIGNlbnRyYWxDb250ZW50OiBzdHJpbmc7XG4gICAgeWVhcj86ICcxLTMnIHwgJzQtNicgfCAnNy05JztcbiAgICAvL2NlbnRyYWxDb250ZW50OiBBcnJheTx7eWVhcj86IHN0cmluZywgdGV4dDogc3RyaW5nfT47XG4gICAgcG9pbnRzOiBudW1iZXI7XG4gICAga25vd25sZWRnZVJlcXVpcmVtZW50czogQXJyYXk8e2dyYWRlU3RlcDogc3RyaW5nLCB0ZXh0OiBzdHJpbmd9PjtcbiAgICAvL2tub3dubGVkZ2VSZXF1aXJlbWVudHM6IEFycmF5PHtncmFkZVN0ZXA6IHN0cmluZywgdGV4dDogc3RyaW5nLCB5ZWFyPzogbnVtYmVyfT47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVNrb2x2ZXJrZXRZZWFycyAoaW5ZZWFyOiBzdHJpbmcpIDogQXJyYXk8JzEtMycgfCAnNC02JyB8ICc3LTknPiB7XG4gIHN3aXRjaChpblllYXIudHJpbSgpKSB7XG4gICAgY2FzZSAnMyc6XG4gICAgY2FzZSAnMS0zJzpcbiAgICAgIHJldHVybiBbJzEtMyddO1xuICAgIGNhc2UgJzYnOlxuICAgIGNhc2UgJzQtNic6XG4gICAgICByZXR1cm4gWyc0LTYnXTtcbiAgICBjYXNlICc3LTknOlxuICAgIGNhc2UgJzknOlxuICAgICAgcmV0dXJuIFsnNy05J107XG4gICAgLy8gU3BlY2lhbHNcbiAgICBjYXNlICcxJzogcmV0dXJuIFtcIjEtM1wiXTsgLy8gRsO2cmVrb21tZXIgaSDDpG1uZW5hIFwiU3ZlbnNrYVwiIG9jaCBcIlN2ZW5za2Egc29tIGFuZHJhc3Byw6VrXCJcbiAgICBjYXNlICcxcyc6IHJldHVybiBbXCIxLTNcIl07IC8vIEbDtnJla29tbWVyIGkgw6RtbmVuYSBcIlN2ZW5za2FcIiBvY2ggXCJTdmVuc2thIHNvbSBhbmRyYXNwcsOla1wiXG4gICAgY2FzZSAnMS02JzogcmV0dXJuIFtcIjEtM1wiLCBcIjQtNlwiXTsgLy8gRsO2cmVrb21tZXIgaSDDpG1uZXQgXCJIZW0tIG9jaCBrb25zdW1lbnRrdW5za2FwXCJcbiAgICBjYXNlICc0LTknOiByZXR1cm4gW1wiNC02XCIsIFwiNy05XCJdOyAvLyBGw7ZyZWtvbW1lciBpIMOkbW5ldCBcIk1vZGVybmEgc3Byw6VrXCJcbiAgICBkZWZhdWx0OiB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgeWVhciBpbiBTa29sdmVya2V0IFhNTDogJHtpblllYXJ9LiBFeHBlY3RpbmcgMyw2LDkgb3IgMS0zLCA0LTYsIDctOWApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgU3ViamVjdCwgQ291cnNlLCBLbm93bGVkZ2VSZXF1aXJlbWVudCwgQWJpbGl0eSwgQ2VudHJhbENvbnRlbnQsIFRhc2sgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcbmltcG9ydCB7IFN1YmplY3RUb0ltcG9ydCwgQ291cnNlVG9JbXBvcnQgfSBmcm9tIFwiLi4vc3ViamVjdC10by1pbXBvcnRcIjtcbmltcG9ydCB7IENoYW5nZSB9IGZyb20gXCIuL2NoYW5nZVwiO1xuaW1wb3J0IHsgQ291cnNlU2V0IH0gZnJvbSAnLi9jb3Vyc2Utc2V0JztcbmltcG9ydCB7IGNyZWF0ZVVVSUQsIEJhdGNoUnVubmVyLCBNdXRhdGlvblJlcXVlc3QsIExpc3RPcHRpb25zIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgQXV0b1ZhbHVlTWFwIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvYXV0by12YWx1ZS1tYXAnO1xuaW1wb3J0IHsgZmxhdHRlbiB9IGZyb20gJy4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcblxudHlwZSBJRCA9IHN0cmluZztcblxuZnVuY3Rpb24gZGlmZlN1YmplY3RHbG9iYWxUZXh0cyhkYlRleHRNYXA6IE1hcDxzdHJpbmcsIElEPiwgeG1sVGV4dHM6IHN0cmluZ1tdKSB7XG4gIGNvbnN0IHJlbW92ZWRJZHMgPSBuZXcgU2V0PElEPigpO1xuICBjb25zdCBuZXdUZXh0cyA9IG5ldyBNYXA8c3RyaW5nLCBJRD4oKTtcbiAgY29uc3QgaWRzVG9BZGQgPSBuZXcgU2V0PElEPigpO1xuXG4gIHhtbFRleHRzLmZvckVhY2gobmV3VGV4dCA9PiB7XG4gICAgbmV3VGV4dCA9IG5ld1RleHQudHJpbSgpO1xuICAgIGlmICghZGJUZXh0TWFwLmhhcyhuZXdUZXh0KSkge1xuICAgICAgY29uc3QgaWQgPSBjcmVhdGVVVUlEKCk7XG4gICAgICBjb25zb2xlLmxvZyhgTmV3IGlkOiAke2lkfS4gVGV4dDogJHtuZXdUZXh0fWApO1xuICAgICAgbmV3VGV4dHMuc2V0KG5ld1RleHQsIGlkKTtcbiAgICAgIGlkc1RvQWRkLmFkZChpZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1RleHRzLnNldChuZXdUZXh0LCBkYlRleHRNYXAuZ2V0KG5ld1RleHQpKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZvciAoY29uc3QgW29sZFRleHQsIG9sZElkXSBvZiBkYlRleHRNYXAuZW50cmllcygpKSB7XG4gICAgaWYgKHhtbFRleHRzLmluZGV4T2Yob2xkVGV4dCkgPT09IC0xKSB7XG4gICAgICByZW1vdmVkSWRzLmFkZChvbGRJZCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZW1vdmVkSWRzLFxuICAgIG5ld1RleHRzLFxuICAgIGlkc1RvQWRkXG4gIH1cbn1cblxubGV0IF9maWN0aXZlT2xkSWQgPSAxO1xuZnVuY3Rpb24gZmljdGl2ZU9sZElkKCkge1xuICByZXR1cm4gXCJmaWN0aXZlT2xkSWRcIiArICgrK19maWN0aXZlT2xkSWQpO1xufVxuXG5jb25zdCBzdG9wV29yZHMgPSBuZXcgU2V0KFxuICAvLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWhhaVZhbGVudGluL2x1bnItbGFuZ3VhZ2VzL2Jsb2IvbWFzdGVyL2x1bnIuc3YuanMjTDI1MlxuICAoJ2FsbGEgYWxsdCBhdHQgYXYgYmxldiBibGkgYmxpciBibGl2aXQgZGUgZGVtIGRlbiBkZW5uYSBkZXJhcyBkZXNzIGRlc3NhIGRldCBkZXR0YSBkaWcgZGluIGRpbmEgZGl0dCBkdSBkw6RyIGTDpSBlZnRlciBlaiBlbGxlciBlbiBlciBlcmEgZXJ0IGV0dCBmcsOlbiBmw7ZyIGhhIGhhZGUgaGFuIGhhbnMgaGFyIGhlbm5lIGhlbm5lcyBob24gaG9ub20gaHVyIGjDpHIgaSBpY2tlIGluZ2VuIGlub20gaW50ZSBqYWcganUga2FuIGt1bmRlIG1hbiBtZWQgbWVsbGFuIG1lbiBtaWcgbWluIG1pbmEgbWl0dCBtb3QgbXlja2V0IG5pIG51IG7DpHIgbsOlZ29uIG7DpWdvdCBuw6VncmEgb2NoIG9tIG9zcyBww6Ugc2FtbWEgc2VkYW4gc2lnIHNpbiBzaW5hIHNpdHRhIHNqw6RsdiBza3VsbGUgc29tIHPDpSBzw6VkYW4gc8OlZGFuYSBzw6VkYW50IHRpbGwgdW5kZXIgdXBwIHV0IHV0YW4gdmFkIHZhciB2YXJhIHZhcmbDtnIgdmFyaXQgdmFyamUgdmFycyB2YXJ0IHZlbSB2aSB2aWQgdmlsa2Egdmlsa2FzIHZpbGtlbiB2aWxrZXQgdsOlciB2w6VyYSB2w6VydCDDpG4gw6RyIMOldCDDtnZlcicgK1xuICAnIGtyaW5nJykgLy8gVGhpcyBsaW5lIGNvbnRhaW5zIGFkZGl0aW9uYWwgc3RvcC13b3JkcyBtaXNzaW5nIGluIGx1bnIuc3YuXG4gIC5zcGxpdCgnICcpKTtcblxuZnVuY3Rpb24gZ2V0TGV4ZW1lcyhodG1sOiBzdHJpbmcpOiBTZXQ8c3RyaW5nPiB7XG4gIHJldHVybiBuZXcgU2V0KHJlbW92ZVRhZ3MoaHRtbCkucmVwbGFjZSgvW15cXHdcXHPDpcOkw7ZdL2dpLCAnJykudG9Mb3dlckNhc2UoKS5zcGxpdCgvXFxzLylcbiAgICAubWFwKGxleGVtZSA9PiBsZXhlbWUudHJpbSgpKVxuICAgIC5maWx0ZXIobGV4ZW1lID0+ICEhbGV4ZW1lKVxuICAgIC5maWx0ZXIobGV4ZW1lID0+ICFzdG9wV29yZHMuaGFzKGxleGVtZSkpXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRhZ3MoaHRtbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5pbm5lckhUTUwgPSBodG1sO1xuICByZXR1cm4gJycrZGl2LmlubmVyVGV4dDtcbn1cblxuZnVuY3Rpb24gZ2V0SWRzVG9NaWdyYXRlKFxuICBkYlRleHRzOiB7aWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9W10sXG4gIHhtbFRleHRzOiB7aHRtbDogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9W10sXG4gIG5ld1RleHRzOiBNYXA8c3RyaW5nLCBJRD4sXG4gIHRleHRUeXBlOiBzdHJpbmcsXG4gIGNvdXJzZT86IHN0cmluZykgOiBNYXA8SUQsIHtcbiAgICBuZXdUZXh0Pzogc3RyaW5nLFxuICAgIG5ld0lkPzogSUQsXG4gICAgb2xkVGV4dD86IHN0cmluZyxcbiAgICBncmFkZVN0ZXA/OiBzdHJpbmcsXG4gICAgaXNUeXBvRml4PzogYm9vbGVhblxuICB9Plxue1xuICBjb25zdCBpZHNUb01pZ3JhdGUgPSBuZXcgTWFwPElELCB7XG4gICAgbmV3VGV4dD86IHN0cmluZyxcbiAgICBuZXdJZD86IElELFxuICAgIG9sZFRleHQ/OiBzdHJpbmcsXG4gICAgZ3JhZGVTdGVwPzogc3RyaW5nLFxuICAgIGlzVHlwb0ZpeD86IGJvb2xlYW4sXG4gICAgbWF0Y2hMZXZlbDogbnVtYmVyLFxuICAgIGxleGVtZXM6IFNldDxzdHJpbmc+XG4gIH0+KCk7XG4gIGRiVGV4dHMgPSBkYlRleHRzLm1hcChlbnRpdHkgPT4gKHsuLi5lbnRpdHksIG5hbWU6IGVudGl0eS5uYW1lLnRyaW0oKX0pKS5maWx0ZXIoKHtuYW1lfSkgPT4gISFuYW1lKTtcbiAgY29uc3QgeG1sU2V0ID0gbmV3IE1hcDxzdHJpbmcsIHtodG1sOiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZ30+KCk7XG4gIHhtbFRleHRzLmZvckVhY2goaXRlbSA9PiB4bWxTZXQuc2V0KGl0ZW0uaHRtbCwgaXRlbSkpO1xuICBjb25zdCBkYlNldCA9IG5ldyBNYXA8c3RyaW5nLCB7aWQ6IHN0cmluZywgbmFtZTogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9PigpO1xuICBkYlRleHRzLmZvckVhY2goZW50aXR5ID0+IGRiU2V0LnNldChlbnRpdHkubmFtZSwgZW50aXR5KSk7XG4gIC8vIFJlbW92ZSB0aG9zZSB3aG8gYWxyZWFkeSBleGlzdHMgaWRlbnRpY2FsbHlcbiAgZGJUZXh0cyA9IGRiVGV4dHMuZmlsdGVyKGVudGl0eSA9PiAheG1sU2V0LmhhcyhlbnRpdHkubmFtZSkpO1xuICB4bWxUZXh0cyA9IHhtbFRleHRzLmZpbHRlcihpdGVtID0+ICFkYlNldC5oYXMoaXRlbS5odG1sKSk7XG5cbiAgLy8gTm93LCBmb3IgdGhlIHJlbWFpbmRlciwgdHJ5IHRoZSBiZXN0IHRvIG1hcCBvbGQgdGV4dHMgdG8gbmV3IHRleHRzLCBhbmQgd2hlbiBkb25lLCBjaGVjayBpZiB0aGVyZSBhcmUgbmV3IHRleHRzIHRoYXQgbmV2ZXIgZ290IG1hcHBlZC5cblxuICAvLyBTdGFydCBieSBwdXR0aW5nIGFsbCBkYlRleHQgaW50byB0aGUgcmVzdWx0LCB3aXRob3V0IGEgcGFpcmVkIHhtbCB0ZXh0IHlldDpcbiAgZGJUZXh0cy5mb3JFYWNoKGRiVGV4dCA9PiBpZHNUb01pZ3JhdGUuc2V0KGRiVGV4dC5pZCwge1xuICAgIGdyYWRlU3RlcDogZGJUZXh0LmdyYWRlU3RlcCxcbiAgICBvbGRUZXh0OiBkYlRleHQubmFtZSxcbiAgICBsZXhlbWVzOiBnZXRMZXhlbWVzKGRiVGV4dC5uYW1lKSxcbiAgICBtYXRjaExldmVsOiAwXG4gIH0pKTtcbiAgLy8gVGhlbiB0cnkgdG8gcGFpciBlYWNoIHhtbFRleHQgdG8gYW4gaXRlbSBpbiBpZHNUb01pZ3JhdGVcbiAgY29uc3QgeG1sU3BpbnN0ZXJzOiB7aHRtbDogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9W10gPSBbXTtcbiAgd2hpbGUgKHhtbFRleHRzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCB4bWxUZXh0ID0geG1sVGV4dHNbMF07XG4gICAgY29uc3QgYmVzdE1hdGNoID0gZmluZEJlc3RNYXRjaCh4bWxUZXh0KTtcbiAgICBpZiAoIWJlc3RNYXRjaCkge1xuICAgICAgeG1sU3BpbnN0ZXJzLnB1c2goeG1sVGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChiZXN0TWF0Y2gubmV3VGV4dCkge1xuICAgICAgICAvLyBUaHJvdyBvdXQgZXhpc3RpbmcgbWF0Y2hcbiAgICAgICAgeG1sVGV4dHMucHVzaCh7aHRtbDogYmVzdE1hdGNoLm5ld1RleHQsIGdyYWRlU3RlcDogYmVzdE1hdGNoLmdyYWRlU3RlcH0pO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFpciA9IGlkc1RvTWlncmF0ZS5nZXQoYmVzdE1hdGNoLmlkKTtcbiAgICAgIC8vIFBhaXIgbXlzZWxmIHdpdGggdGhpcyBtYXRjaDpcbiAgICAgIHBhaXIubmV3VGV4dCA9IHhtbFRleHQuaHRtbDtcbiAgICAgIHBhaXIubWF0Y2hMZXZlbCA9IGJlc3RNYXRjaC5teU1hdGNoTGV2ZWw7XG4gICAgICBwYWlyLm5ld0lkID0gbmV3VGV4dHMuZ2V0KHhtbFRleHQuaHRtbCk7XG4gICAgfVxuICAgIHhtbFRleHRzLnNoaWZ0KCk7XG4gIH1cbiAgLy8gRm9yIGVhY2ggc3BpbnN0ZXIgKG5ldyB0ZXh0cyB0aGF0IGNvdWxkbid0IGZpbmQgYW55IG1hdGNoIGluIG9sZCB0ZXh0cyksXG4gIC8vIEFkZCB0aGVtIHdpdGggYW4gZmljdGl2ZSBvbGQgSUQgYnV0IG9taXQgb2xkVGV4dCB0byBtYXJrIGl0IGFzIGEgbmV3Y29tZXJcbiAgeG1sU3BpbnN0ZXJzLmZvckVhY2goc3BpbnN0ZXIgPT4ge1xuICAgIGlkc1RvTWlncmF0ZS5zZXQoZmljdGl2ZU9sZElkKCksIHtcbiAgICAgIG5ld0lkOiBuZXdUZXh0cy5nZXQoc3BpbnN0ZXIuaHRtbCksXG4gICAgICBuZXdUZXh0OiBzcGluc3Rlci5odG1sLFxuICAgICAgZ3JhZGVTdGVwOiBzcGluc3Rlci5ncmFkZVN0ZXAsXG4gICAgICBtYXRjaExldmVsOiAwLFxuICAgICAgbGV4ZW1lczogbmV3IFNldDxzdHJpbmc+KCl9KVxuICB9KTtcblxuICAvLyBNYXJrIHR5cG8tZml4ZXNcbiAgaWRzVG9NaWdyYXRlLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgIGNvbnN0IHtvbGRUZXh0LCBuZXdUZXh0fSA9IG1hdGNoO1xuICAgIGlmIChvbGRUZXh0ICYmIG5ld1RleHQpIHtcbiAgICAgIGlmIChbLi4uZ2V0TGV4ZW1lcyhvbGRUZXh0KV0uam9pbignICcpID09PSBbLi4uZ2V0TGV4ZW1lcyhuZXdUZXh0KV0uam9pbignICcpKSB7XG4gICAgICAgIG1hdGNoLmlzVHlwb0ZpeCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBjb25zb2xlLmxvZyhcIklkc1RvTWlncmF0ZVwiLCBbLi4uaWRzVG9NaWdyYXRlLnZhbHVlcygpXS5tYXAoKHtvbGRUZXh0LCBsZXhlbWVzfSkgPT4gYCR7Wy4uLmxleGVtZXNdLmpvaW4oJyAnKX06ICR7b2xkVGV4dH1gKSk7XG5cbiAgcmV0dXJuIGlkc1RvTWlncmF0ZTtcblxuICBmdW5jdGlvbiBmaW5kQmVzdE1hdGNoKHhtbFRleHQ6IHtodG1sOiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZ30pIHtcbiAgICBjb25zdCB4bWxMZXhlbWVzID0gZ2V0TGV4ZW1lcyh4bWxUZXh0Lmh0bWwpO1xuICAgIGNvbnN0IHBvc3NpYmxlUGFydG5lcnMgPSBbLi4uaWRzVG9NaWdyYXRlLmVudHJpZXMoKV1cbiAgICAgIC5maWx0ZXIoKFtpZCwgeF0pID0+IHguZ3JhZGVTdGVwID09PSB4bWxUZXh0LmdyYWRlU3RlcClcbiAgICAgIC5tYXAoKFtpZCwge2dyYWRlU3RlcCwgbWF0Y2hMZXZlbCwgbmV3VGV4dCwgbGV4ZW1lc31dKSA9PiAoe1xuICAgICAgICBpZCxcbiAgICAgICAgZ3JhZGVTdGVwLFxuICAgICAgICBtYXRjaExldmVsLFxuICAgICAgICBuZXdUZXh0LFxuICAgICAgICBteU1hdGNoTGV2ZWw6IGdldE1hdGNoTGV2ZWwoeG1sTGV4ZW1lcywgbGV4ZW1lcylcbiAgICAgIH0pKS5maWx0ZXIocHAgPT4gcHAubXlNYXRjaExldmVsID49IDUwICYmICghcHAubWF0Y2hMZXZlbCB8fCBwcC5tYXRjaExldmVsIDwgcHAubXlNYXRjaExldmVsKSk7XG4gICAgcmV0dXJuIHBvc3NpYmxlUGFydG5lcnMuc29ydCgoYSwgYikgPT4gYi5teU1hdGNoTGV2ZWwgLSBhLm15TWF0Y2hMZXZlbClbMF07IC8vIGhpZ2hlc3QgZmlyc3QuXG4gIH1cblxuICBmdW5jdGlvbiBnZXRNYXRjaExldmVsKGxleGVtZXMxOiBTZXQ8c3RyaW5nPiwgbGV4ZW1lczI6IFNldDxzdHJpbmc+KSB7XG4gICAgaWYgKGxleGVtZXMxLnNpemUgPT09IDAgfHwgbGV4ZW1lczIuc2l6ZSA9PT0gMCkgcmV0dXJuIDA7XG4gICAgbGV0IHBvaW50czEgPSAwO1xuICAgIGxldCBwb2ludHMyID0gMDtcbiAgICBsZXhlbWVzMS5mb3JFYWNoKHdvcmQgPT4ge1xuICAgICAgaWYgKGxleGVtZXMyLmhhcyh3b3JkKSkgKytwb2ludHMxO1xuICAgIH0pO1xuICAgIGxleGVtZXMyLmZvckVhY2god29yZCA9PiB7XG4gICAgICBpZiAobGV4ZW1lczEuaGFzKHdvcmQpKSArK3BvaW50czI7XG4gICAgfSk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoMTAwICogTWF0aC5tYXgocG9pbnRzMSAvIGxleGVtZXMxLnNpemUsIHBvaW50czIgLyBsZXhlbWVzMi5zaXplKSk7XG4gIH1cblxuICAvKmlmIChkYlRleHRzLmxlbmd0aCAhPT0geG1sVGV4dHMubGVuZ3RoKSB7XG4gICAgLy8gV2UgY2FuIG5vIGxvbmdlciBhc3N1bWUgdGhhdCB0aGUgY2hhbmdlZCB0ZXh0cyByZWZlciB0byBkaWZmZXJlbnQgZm9ybXVsYXRpb25zIG9mIHRoZSBzYW1lIG1lYW5pbmcuXG4gICAgLy8gV2Ugbm90IG1hcCBvbGQgZm9ybXVsYXRpb25zIHRvIG5ldyBvbmVzLlxuICAgIC8vIEluIGZ1dHVyZSwgd2UgY291bGQgaGFuZGxlIHRoaXMgY2FzZSBieSBhc3N1bWluZyBhbGwgb2xkIHRleHRzIG5vdCBvY2N1cnJpbmcgaW4gbmV3IGRhdGEsIGhhdmUgYmVlbiByZW1vdmVkIGFuZCBhbGwgbmV3IGhhdmUgYmVlbiBhZGRlZC5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOdW1iZXIgb2YgXCIgKyB0ZXh0VHlwZSArIChjb3Vyc2UgPyBgIG9uIGNvdXJzZSAke2NvdXJzZX1gIDogXCJcIikgKyBcIiBkaWZmZXJzLiBDYW5ub3QgbWlncmF0ZS5cIik7XG4gIH1cbiAgZGJUZXh0cy5mb3JFYWNoKCh7bmFtZTogb2xkVGV4dCwgaWQ6IG9sZElkLCBncmFkZVN0ZXB9LCBpKSA9PiB7XG4gICAgY29uc3QgeG1sVGV4dCA9IHhtbFRleHRzW2ldLnRyaW0oKTtcbiAgICBpZiAob2xkVGV4dC50cmltKCkgIT09IHhtbFRleHQpIHtcbiAgICAgIGlkc1RvTWlncmF0ZS5zZXQob2xkSWQsIHtuZXdUZXh0OiB4bWxUZXh0LCBuZXdJZDogbmV3VGV4dHMuZ2V0KHhtbFRleHQpLCBvbGRUZXh0LCBncmFkZVN0ZXB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gaWRzVG9NaWdyYXRlOyovXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtaWdyYXRlU3ViamVjdChleGlzdGluZ1N1YmplY3Q6IFN1YmplY3QsIGNvdXJzZVNldHM6IENvdXJzZVNldFtdLCBzdWJqZWN0VG9JbXBvcnQ6IFN1YmplY3RUb0ltcG9ydCwgY2hhbmdlczogQ2hhbmdlW10pIHtcbiAgLy8gR2VuZXJhdGUgZGJUZXh0TWFwOlxuICAvLyBkYlRleHRNYXAgY29udGFpbnMgYSBtYXAgZnJvbSBvbGQgdGV4dHMgKEFiaWxpdGllcywgQ2VudHJhbCBDb250ZW50IG9yIEtub3dsZWRnZSBSZXF1aXJlbWVudHMpIHRvIGl0cyBJRCBpbiB0aGUgZGF0YWJhc2UuXG4gIC8vIFRoZSBtYXAgc2hvdWxkIGJlIHVzZWQgdG8gbG9va3VwIElEcywgZ2l2ZW4gdGhlaXIgdHJpbW1lZCB0ZXh0LlxuICBjb25zdCBkYlRleHRNYXAgPSBuZXcgTWFwPHN0cmluZywgSUQ+KCk7XG4gIGNvbnN0IG9yZGVyZWRBYmlsaXRpZXMgPSBleGlzdGluZ1N1YmplY3QuYWJpbGl0aWVzT3JkZXIgP1xuICAgIGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXNPcmRlci5tYXAoaWQgPT4gZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllcy5maW5kKGEgPT4gYS5pZCA9PT0gaWQpKSA6XG4gICAgZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllcztcbiAgZm9yIChjb25zdCBhIG9mIG9yZGVyZWRBYmlsaXRpZXMpIHtcbiAgICBkYlRleHRNYXAuc2V0KGEubmFtZS50cmltKCksIGEuaWQpO1xuICB9XG4gIGZvciAoY29uc3Qge3RlbXBsYXRlfSBvZiBjb3Vyc2VTZXRzKSB7XG4gICAgZm9yIChjb25zdCBjYyBvZiB0ZW1wbGF0ZS5jZW50cmFsQ29udGVudCkge1xuICAgICAgZGJUZXh0TWFwLnNldChjYy5uYW1lLnRyaW0oKSwgY2MuaWQpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtyIG9mIHRlbXBsYXRlLmtub3dsZWRnZVJlcXVpcmVtZW50cykge1xuICAgICAgZGJUZXh0TWFwLnNldChrci5uYW1lLnRyaW0oKSwga3IuaWQpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpbmQgb3V0IHdoaWNoIG5ldyB0ZXh0cyAoaW4gdG90YWwpIHRoYXQgc2hvdWxkIGJlIGNyZWF0ZWQgaW4gdGhlIERCIG9uIG1pZ3JhdGluZy5cbiAgLy8gTWF5YmUgYWxzbyBmaW5kIG91dCBpZiB0aGVyZSBhcmUgYW55IG9sZCB0ZXh0cyB3aG8ncyBvYmplY3RzIGFyZSBubyBtb3JlIHVzZWQgYW5kIGNvdWxkIGJlIHJlbW92ZWQgZnJvbSB0aGUgREJcbiAgLy8gbmV3VGV4dHM6IEEgbWFwIGJldHdlZW4gYSBuZXcgdGV4dCBhbmQgaXRzIG5ldyBJRCBpbiB0aGUgZGF0YWJhc2UgYWZ0ZXIgY3JlYXRpbmcgaXQuXG4gIC8vIHJlbW92ZWRJZHM6IEEgc2V0IG9mIGV4aXN0aW5nIGlkcyB0aGF0IHdvdWxkIGJlIHNhZmUgdG8gcmVtb3ZlIG9uIG1pZ3JhdGluZyAod2lsbCBpZ25vcmUgdGhvc2UgZm9yIG5vdylcbiAgY29uc3Qge25ld1RleHRzOiBuZXdBYmlsaXR5VGV4dHMsIGlkc1RvQWRkOiBhYmlsaXRpZXNUb0FkZH0gPVxuICAgIGRpZmZTdWJqZWN0R2xvYmFsVGV4dHMoZGJUZXh0TWFwLCBzdWJqZWN0VG9JbXBvcnQuYWJpbGl0aWVzKTtcbiAgY29uc3Qge25ld1RleHRzOiBuZXdDQ1RleHRzLCBpZHNUb0FkZDogY2NzVG9BZGR9ID1cbiAgICBkaWZmU3ViamVjdEdsb2JhbFRleHRzKGRiVGV4dE1hcCwgZmxhdHRlbihzdWJqZWN0VG9JbXBvcnQuY291cnNlcy5tYXAoYyA9PiBjLmNlbnRyYWxDb250ZW50Lm1hcChjYyA9PiBjYy5odG1sKSkpKTtcbiAgY29uc3Qge25ld1RleHRzOiBuZXdLUlRleHRzLCBpZHNUb0FkZDoga3JzVG9BZGR9ID1cbiAgICBkaWZmU3ViamVjdEdsb2JhbFRleHRzKGRiVGV4dE1hcCwgZmxhdHRlbihzdWJqZWN0VG9JbXBvcnQuY291cnNlcy5tYXAoYyA9PiBjLmtub3dsZWRnZVJlcXVpcmVtZW50cy5tYXAoa3IgPT4ga3IuaHRtbCkpKSk7XG4gIFxuICBjb25zb2xlLmxvZyhgQWJpbGl0aWVzIHRvIGFkZDogJHthYmlsaXRpZXNUb0FkZC5zaXplfWApO1xuICBjb25zb2xlLmxvZyhgQ0NzIHRvIGFkZDogJHtjY3NUb0FkZC5zaXplfWApO1xuICBjb25zb2xlLmxvZyhgS1JzIHRvIGFkZDogJHtrcnNUb0FkZC5zaXplfWApO1xuXG4gIC8vIEZpbmQgb3V0IGFsbCBleGlzdGluZyBBYmlsaXR5IGlkcyB0aGF0IHdpbGwgYmUgbWlncmF0ZWQgdG8gbmV3IG9uZXNcbiAgY29uc3QgYWJpbGl0eUlkc1RvTWlncmF0ZSA9IGdldElkc1RvTWlncmF0ZShcbiAgICBvcmRlcmVkQWJpbGl0aWVzLFxuICAgIHN1YmplY3RUb0ltcG9ydC5hYmlsaXRpZXMubWFwKGh0bWwgPT4gKHtodG1sfSkpLFxuICAgIG5ld0FiaWxpdHlUZXh0cyxcbiAgICBcImFiaWxpdGllc1wiKTtcblxuICAvLyBEbyB0aGUgc2FtZSBmb3IgZWFjaCBDZW50cmFsIENvbnRlbnQgYW5kIEtub3dsZWRnZSBSZXF1aXJlbWVudHMgb24gZWFjaCBjb3Vyc2U6XG4gIGNvbnN0IGlkc1RvTWlncmF0ZVBlckNvdXJzZSA9IGNvdXJzZVNldHMubWFwKCh7dGVtcGxhdGV9LCBpKSA9PiB7XG4gICAgY29uc29sZS5sb2coYENvdXJzZTogJHt0ZW1wbGF0ZS5uYW1lfWApO1xuICAgIGNvbnN0IHhtbENvdXJzZSA9IHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzLmZpbmQoYyA9PiBjLm5hbWUgPT09IHRlbXBsYXRlLm5hbWUpIHx8XG4gICAgICBzdWJqZWN0VG9JbXBvcnQuY291cnNlcy5maW5kKGMgPT4gYy5jb2RlID09PSB0ZW1wbGF0ZS5jb2RlKTtcbiAgICByZXR1cm4ge1xuICAgICAgY291cnNlQ29kZTogdGVtcGxhdGUuY29kZSxcbiAgICAgIGNjc1RvTWlncmF0ZTogeG1sQ291cnNlID9cbiAgICAgICAgZ2V0SWRzVG9NaWdyYXRlKFxuICAgICAgICAgIHRlbXBsYXRlLmNlbnRyYWxDb250ZW50LCAvLyBIYXMgYWxyZWFkeSBiZWVuIHNvcnRlZCB3aGVuIHJldHJpZXZlZCB2aWEgbG9hZENvdXJzZSgpXG4gICAgICAgICAgeG1sQ291cnNlLmNlbnRyYWxDb250ZW50Lm1hcCgoe2h0bWx9KSA9PiAoe2h0bWx9KSksXG4gICAgICAgICAgbmV3Q0NUZXh0cyxcbiAgICAgICAgICBcImNlbnRyYWwgY29udGVudFwiLFxuICAgICAgICAgIHRlbXBsYXRlLm5hbWUpIDpcbiAgICAgICAgbmV3IE1hcDxJRCwge25ld1RleHQ6IHN0cmluZywgbmV3SWQ6IElELCBvbGRUZXh0OiBzdHJpbmcsIGlzVHlwb0ZpeDogYm9vbGVhbn0+KCksXG4gICAgICBrcnNUb01pZ3JhdGU6IHhtbENvdXJzZSA/XG4gICAgICAgIGdldElkc1RvTWlncmF0ZShcbiAgICAgICAgICB0ZW1wbGF0ZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMsIC8vIEhhcyBhbHJlYWR5IGJlZW4gc29ydGVkIHdoZW4gcmV0cmlldmVkIHZpYSBsb2FkQ291cnNlKClcbiAgICAgICAgICB4bWxDb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzLFxuICAgICAgICAgIG5ld0tSVGV4dHMsXG4gICAgICAgICAgXCJrbm93bGVkZ2UgcmVxdWlyZW1lbnRzXCIsXG4gICAgICAgICAgdGVtcGxhdGUubmFtZVxuICAgICAgICApIDpcbiAgICAgICAgbmV3IE1hcDxJRCwge25ld1RleHQ6IHN0cmluZywgbmV3SWQ6IElELCBvbGRUZXh0OiBzdHJpbmcsIGdyYWRlU3RlcDogc3RyaW5nLCBpc1R5cG9GaXg6IGJvb2xlYW59PigpXG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gT0sgc28gbm93IHdlIGhhdmUgYWxsIGluZm8uXG4gIC8vIE5vdywgd2UgbmVlZCB0bzpcbiAgLy8gU3ViamVjdDpcbiAgLy8gMS4gUmVtb3ZlIGxpbmtzIGZyb20gc3ViamVjdHMgdG8gYWJpbGl0aWVzXG4gIC8vIDIuIEFkZCBsaW5rcyBmcm9tIHN1YmplY3RzIHRvIGFiaWxpdGllc1xuICBhYmlsaXR5SWRzVG9NaWdyYXRlLmZvckVhY2goKHtuZXdUZXh0LCBuZXdJZCwgb2xkVGV4dCwgaXNUeXBvRml4fSwgb2xkSWQpID0+IHtcbiAgICAvL2NvbnN0IG9sZFRleHQgPSBleGlzdGluZ1N1YmplY3QuYWJpbGl0aWVzLmZpbmQoYSA9PiBhLmlkID09PSBvbGRJZCkubmFtZTtcbiAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgY2hhbmdlOiAoXG4gICAgICAgIG9sZFRleHQgP1xuICAgICAgICAgIG5ld1RleHQgP1xuICAgICAgICAgICAgaXNUeXBvRml4ID9cbiAgICAgICAgICAgICAgYFRyeWNrZmVsc3LDpHR0bmluZyBGw7ZybcOlZ2FgIDpcbiAgICAgICAgICAgICAgYFVwcGRhdGVyYWQgRsO2cm3DpWdhYCA6XG4gICAgICAgICAgICBgQm9ydHRhZ2VuIEbDtnJtw6VnYWAgOlxuICAgICAgICAgIGBOeSBGw7ZybcOlZ2FgXG4gICAgICApLFxuICAgICAgY29udGVudDogYDxzdHJpa2U+JHtvbGRUZXh0IHx8ICcnfTwvc3RyaWtlPjxici8+JHtuZXdUZXh0IHx8ICcnfWAsXG4gICAgICBtdXRhdGlvbnM6IGJyID0+IHtcbiAgICAgICAgaWYgKG5ld0lkICYmIGFiaWxpdGllc1RvQWRkLmhhcyhuZXdJZCkpIHtcbiAgICAgICAgICBjb25zdCBhOiBBYmlsaXR5ID0ge1xuICAgICAgICAgICAgaWQ6IG5ld0lkLFxuICAgICAgICAgICAgbmFtZTogbmV3VGV4dCxcbiAgICAgICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl0sXG4gICAgICAgICAgICBkYXRlVGltZTogRGF0ZS5ub3coKVxuICAgICAgICAgIH07XG4gICAgICAgICAgYnIuYWRkKFwiYWJpbGl0aWVzXCIsIGEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvbGRUZXh0KSBici51bmxpbmsyKFwic3ViamVjdHNcIiwgZXhpc3RpbmdTdWJqZWN0LmlkLCBcImFiaWxpdGllc1wiLCBvbGRJZCk7XG4gICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJzdWJqZWN0c1wiLCBleGlzdGluZ1N1YmplY3QuaWQsIFwiYWJpbGl0aWVzXCIsIG5ld0lkKTtcbiAgICAgIH1cbiAgICB9KVxuICB9KTtcbiAgLy8gMy4gVXBkYXRlIGFiaWxpdGllc09yZGVyIG9uIFN1YmplY3QgYmFzZWQgb24gc3ViamVjdFRvSW1wb3J0LmFiaWxpdGllcyAobWFwcGVkIHRvIGlkcyBpbiBuZXdUZXh0cylcbiAgaWYgKCFleGlzdGluZ1N1YmplY3QuYWJpbGl0aWVzT3JkZXIgfHwgYWJpbGl0eUlkc1RvTWlncmF0ZS5zaXplID4gMCkge1xuICAgIGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXNPcmRlciA9IHN1YmplY3RUb0ltcG9ydC5hYmlsaXRpZXMubWFwKHhtbCA9PiBuZXdBYmlsaXR5VGV4dHMuZ2V0KHhtbCkpO1xuICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICBtdXRhdGlvbnM6IGJyID0+IGJyLnB1dChcInN1YmplY3RzXCIsIGV4aXN0aW5nU3ViamVjdCksXG4gICAgICBjaGFuZ2U6IGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXNPcmRlciA/XG4gICAgICAgIG51bGwgOiAvLyDDhG5kcmluZ2VuIHJlZGFuIHZpc3VlbGwgc29tIFwiVXBwZGF0ZXJhZCBmw7ZyIGbDtnJtw6VnYVwiLCBldGMsIG92YW5cbiAgICAgICAgYEluZsO2ciBlbiBvcmRuYWQgbGlzdGEgcMOlIGbDtnJtw6Vnb3IgaSBkYXRhYmFzZW5gLFxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgY3JlYXRlZElkcyA9IG5ldyBTZXQ8SUQ+KCk7XG4gIGNoYW5nZXMucHVzaCh7bXV0YXRpb25zOiAoKT0+Y3JlYXRlZElkcy5jbGVhcigpfSk7IC8vIEluIGNhc2UgbXV0YXRpb25zIHJ1biB0d2ljZSAod2hpY2ggaXQgZG9lc24ndCBhcyBvZiBjdXJyZW50IGltcGwuKVxuICBjb25zdCBzaG93bkNoYW5nZXMgPSBuZXcgU2V0PHN0cmluZz4oKTsgLy8gU2V0IG9mIGNvdXJzZU5hbWVcbiAgY2hhbmdlcy5wdXNoKHttdXRhdGlvbnM6ICgpPT5zaG93bkNoYW5nZXMuY2xlYXIoKX0pO1xuICBcbiAgLy8gQ291cnNlczpcbiAgLy8gMS4gR28gdGhyb3VnaCBhbGwgY291cnNlIGluc3RhbmNlcyBhbmQ6XG4gIC8vICAgICAgQTogUmVtb3ZlIGxpbmtzIGZyb20gY291cnNlcyB0byBhYmlsaXRpZXMgbGlzdGVkIGluIGFiaWxpdHlJZHNUb01pZ3JhdGUua2V5cygpXG4gIC8vICAgICAgQjogQWRkIGxpbmtzIGZyb20gY291cnNlcyB0byBhYmlsaXRpZXMgYWJpbHRpdGllc1RvTWlncmF0ZS52YWx1ZXMoKVxuICAvLyAgICAgIEM6IFVwZGF0ZSBhYmlsaXRpZXNPcmRlciBvbiBjb3Vyc2UgaW5zdGFuY2VzIGJhc2VkIG9uIHN1YmplY3RUb0ltcG9ydCAobWFwcGVkIHRvIGlkcyBpbiBuZXdUZXh0cylcbiAgLy8gMiwgMzogRG8gdGhlIHNhbWUgZm9yIGNlbnRyYWwtY29udGVudCBhbmQga25vd2xlZGdlLXJlcXVpcmVtZW50ZXM6XG4gIC8vICAgIEZpbmQgY2NzIGFuZCBrcnMgdG8gbWlncmF0ZSBiYXNlZCBvbiBjb3Vyc2VJbnN0YW5jZS5jb2RlXG4gIC8vICAgIEZvciBib3RoIGNjcyBhbmQga3JzLCBkbzpcbiAgLy8gICAgICBBOiBVbmxpbmsgY2NzVG9NaWdyYXRlLmtleXMoKVxuICAvLyAgICAgIEI6IExpbmsgY2NzVG9NaWdyYXRlLnZhbHVlcygpXG4gIC8vICAgICAgQzogVXBkYXRlIGNlbnRyYWxDb250ZW50T3JkZXIgYmFzZWQgb24gc3ViamVjdFRvSW1wb3J0LmNlbnRyYWxDb250ZW50IG1hcHBlZCB0byBuZXdUZXh0cyBpZHNcbiAgLy8gICAgICAoc2FtZSBmb3Iga3JzVG9NaWdyYXRlLCB3aXRoIGtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyIGluc3RlYWQpXG4gIGZvciAoY29uc3Qge3RlbXBsYXRlLCBpbnN0YW5jZXN9IG9mIGNvdXJzZVNldHMpIHtcbiAgICAvLyBGaW5kIGNvdXJzZVRvSW1wb3J0XG4gICAgY29uc3QgY291cnNlVG9JbXBvcnQ6IENvdXJzZVRvSW1wb3J0ID0gKFxuICAgICAgc3ViamVjdFRvSW1wb3J0LmNvdXJzZXMuZmluZChjID0+IGMubmFtZSA9PT0gdGVtcGxhdGUubmFtZSkgfHxcbiAgICAgIHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzLmZpbmQoYyA9PiBjLmNvZGUgPT09IHRlbXBsYXRlLmNvZGUpXG4gICAgKTtcblxuICAgIC8vIEZpbmQgQ2VudHJhbCBDb250ZW50IGFuZCBLbm93bGVkZ2UgUmVxdWlyZW1lbnRzIHRvIG1pZ3JhdGVcbiAgICBjb25zdCB7Y2NzVG9NaWdyYXRlLCBrcnNUb01pZ3JhdGV9OiB7XG4gICAgICBjY3NUb01pZ3JhdGU6IE1hcDxJRCwge25ld1RleHQ/OiBzdHJpbmcsIG5ld0lkPzogSUQsIG9sZFRleHQ/OiBzdHJpbmd9PixcbiAgICAgIGtyc1RvTWlncmF0ZTogTWFwPElELCB7bmV3VGV4dD86IHN0cmluZywgbmV3SWQ/OiBJRCwgb2xkVGV4dD86IHN0cmluZywgZ3JhZGVTdGVwPzogc3RyaW5nfT5cbiAgICB9ID0gaWRzVG9NaWdyYXRlUGVyQ291cnNlLmZpbmQoeCA9PiB4LmNvdXJzZUNvZGUgPT09IHRlbXBsYXRlLmNvZGUpO1xuICAgIFxuICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgY291cnNlIGluc3RhbmNlcyAoaW5zdGFuY2VzIGFsc28gY29udGFpbnMgdGVtcGxhdGVzKVxuICAgIC8vIGFuZCBtaWdyYXRlIHRoZW0uIFRoaXMgd2lsbCBpbmNsdWRlIGNyZWF0aW5nIG1pc3NpbmcgZW50aXRpZXMgaW4gdGhlIERCLlxuICAgIGZvciAoY29uc3QgY291cnNlIG9mIGluc3RhbmNlcykge1xuICAgICAgbWlncmF0ZUNvdXJzZUluc3RhbmNlKGNvdXJzZSwgY291cnNlVG9JbXBvcnQsIHtjY3NUb01pZ3JhdGUsIGtyc1RvTWlncmF0ZX0pO1xuICAgIH1cbiAgfVxuXG4gIGF3YWl0IG1pZ3JhdGVUYXNrcygpO1xuICByZXR1cm47XG5cbiAgZnVuY3Rpb24gbWlncmF0ZUNvdXJzZUluc3RhbmNlKFxuICAgIGNvdXJzZTogQ291cnNlLFxuICAgIGNvdXJzZVRvSW1wb3J0OiBDb3Vyc2VUb0ltcG9ydCxcbiAgICBpZHNUb01pZ3JhdGU6IHtcbiAgICAgIGNjc1RvTWlncmF0ZTogTWFwPElELCB7bmV3VGV4dD86IHN0cmluZywgbmV3SWQ/OiBJRCwgb2xkVGV4dD86IHN0cmluZywgaXNUeXBvRml4PzogYm9vbGVhbn0+LFxuICAgICAga3JzVG9NaWdyYXRlOiBNYXA8SUQsIHtuZXdUZXh0Pzogc3RyaW5nLCBuZXdJZD86IElELCBvbGRUZXh0Pzogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmcsIGlzVHlwb0ZpeD86IGJvb2xlYW59PlxuICAgIH0pXG4gIHtcbiAgICBjb25zdCBzaG93Q2hhbmdlcyA9ICFzaG93bkNoYW5nZXMuaGFzKGNvdXJzZS5uYW1lKTtcbiAgICBzaG93bkNoYW5nZXMuYWRkKGNvdXJzZS5uYW1lKTtcbiAgICBhYmlsaXR5SWRzVG9NaWdyYXRlLmZvckVhY2goKHtuZXdJZCwgb2xkVGV4dH0sIG9sZElkKSA9PiB7XG4gICAgICAvLyBSZWxpbmsgdGhlIGNvdXJzZSBpbnN0YW5jZSB3aXRoIGFiaWxpdGllcy4gVGhpcyBjaGFuZ2UgZG9lcyBub3QgbmVlZCB0byBiZSB2aXNpYmxlIGluIEdVSS5cbiAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgIG11dGF0aW9uczogYnIgPT4ge1xuICAgICAgICAgIGlmIChvbGRUZXh0KSBici51bmxpbmsyKFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiYWJpbGl0aWVzXCIsIG9sZElkKTtcbiAgICAgICAgICBpZiAobmV3SWQpIGJyLmxpbmsyKFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiYWJpbGl0aWVzXCIsIG5ld0lkKTtcbiAgICAgICAgfVxuICAgICAgfSk7ICBcbiAgICB9KTtcbiAgICBjb3Vyc2UuYWJpbGl0aWVzT3JkZXIgPSBzdWJqZWN0VG9JbXBvcnQuYWJpbGl0aWVzLm1hcChodG1sID0+IG5ld0FiaWxpdHlUZXh0cy5nZXQoaHRtbCkpO1xuXG4gICAgY29uc3Qge2Njc1RvTWlncmF0ZSwga3JzVG9NaWdyYXRlfSA9IGlkc1RvTWlncmF0ZTtcblxuICAgIC8vIENlbnRyYWwgQ29udGVudFxuICAgIGNjc1RvTWlncmF0ZS5mb3JFYWNoKCh7bmV3SWQsIG5ld1RleHQsIG9sZFRleHQsIGlzVHlwb0ZpeH0sIG9sZElkKSA9PiB7XG4gICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICBjaGFuZ2U6IHNob3dDaGFuZ2VzICYmIChcbiAgICAgICAgICBvbGRUZXh0ID9cbiAgICAgICAgICAgIG5ld1RleHQgP1xuICAgICAgICAgICAgICBpc1R5cG9GaXggP1xuICAgICAgICAgICAgICAgIGBUcnlja2ZlbHNyw6R0dG5pbmcgQ2VudHJhbHQgSW5uZWjDpWxsYCA6XG4gICAgICAgICAgICAgICAgYFVwcGRhdGVyYXQgQ2VudHJhbHQgSW5uZWjDpWxsYCA6XG4gICAgICAgICAgICAgIGBCb3J0dGFnZXQgQ2VudHJhbHQgSW5uZWjDpWxsYCA6XG4gICAgICAgICAgICBgTnl0dCBDZW50cmFsdCBJbm5laMOlbGxgKSxcbiAgICAgICAgY29udGVudDogYDxoND4ke2NvdXJzZS5uYW1lfTwvaDQ+PHN0cmlrZT4ke29sZFRleHQgfHwgJyd9PC9zdHJpa2U+PGJyLz4ke25ld1RleHQgfHwgJyd9YCxcbiAgICAgICAgbXV0YXRpb25zOiBiciA9PiB7XG4gICAgICAgICAgaWYgKG5ld0lkICYmIGNjc1RvQWRkLmhhcyhuZXdJZCkgJiYgIWNyZWF0ZWRJZHMuaGFzKG5ld0lkKSkge1xuICAgICAgICAgICAgY29uc3QgY2M6IENlbnRyYWxDb250ZW50ID0ge1xuICAgICAgICAgICAgICBpZDogbmV3SWQsXG4gICAgICAgICAgICAgIG5hbWU6IG5ld1RleHQsXG4gICAgICAgICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl0sXG4gICAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnIuYWRkKFwiY2VudHJhbC1jb250ZW50XCIsIGNjKTtcbiAgICAgICAgICAgIGNyZWF0ZWRJZHMuYWRkKG5ld0lkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9sZFRleHQpIGJyLnVubGluazIoXCJjb3Vyc2VzXCIsIGNvdXJzZS5pZCwgXCJjZW50cmFsQ29udGVudFwiLCBvbGRJZCk7XG4gICAgICAgICAgaWYgKG5ld0lkKSBici5saW5rMihcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIG5ld0lkKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KTtcbiAgICBjb3Vyc2UuY2VudHJhbENvbnRlbnRPcmRlciA9IGNvdXJzZVRvSW1wb3J0LmNlbnRyYWxDb250ZW50Lm1hcCgoe2h0bWx9KSA9PiBuZXdDQ1RleHRzLmdldChodG1sKSk7XG5cbiAgICAvLyBLbm93bGVkZ2UgUmVxdWlyZW1lbnRzXG4gICAga3JzVG9NaWdyYXRlLmZvckVhY2goKHtuZXdJZCwgbmV3VGV4dCwgZ3JhZGVTdGVwLCBvbGRUZXh0LCBpc1R5cG9GaXh9LCBvbGRJZCkgPT4ge1xuICAgICAgY2hhbmdlcy5wdXNoKHtcbiAgICAgICAgY2hhbmdlOiBzaG93Q2hhbmdlcyAmJiAoXG4gICAgICAgICAgb2xkVGV4dCA/XG4gICAgICAgICAgICBuZXdUZXh0ID9cbiAgICAgICAgICAgICAgaXNUeXBvRml4ID9cbiAgICAgICAgICAgICAgICBgVHJ5Y2tmZWxzcsOkdHRuaW5nIEt1bnNrYXBza3JhdmA6XG4gICAgICAgICAgICAgICAgYFVwcGRhdGVyYXQgS3Vuc2thcHNrcmF2YCA6XG4gICAgICAgICAgICAgIGBCb3J0dGFnZXQgS3Vuc2thcHNrcmF2YCA6XG4gICAgICAgICAgICBgTnl0dCBLdW5za2Fwc2tyYXZgXG4gICAgICAgICksXG4gICAgICAgIGNvbnRlbnQ6IGA8aDQ+JHtjb3Vyc2UubmFtZX08L2g0PjxzdHJpa2U+JHtvbGRUZXh0IHx8ICcnfTwvc3RyaWtlPjxici8+JHtuZXdUZXh0IHx8ICcnfWAsXG4gICAgICAgIG11dGF0aW9uczogYnIgPT4ge1xuICAgICAgICAgIGlmIChuZXdJZCAmJiBrcnNUb0FkZC5oYXMobmV3SWQpICYmICFjcmVhdGVkSWRzLmhhcyhuZXdJZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGtyOiBLbm93bGVkZ2VSZXF1aXJlbWVudCA9IHtcbiAgICAgICAgICAgICAgaWQ6IG5ld0lkLFxuICAgICAgICAgICAgICBuYW1lOiBuZXdUZXh0LFxuICAgICAgICAgICAgICBncmFkZVN0ZXAsXG4gICAgICAgICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl0sXG4gICAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc29sZS5sb2coYEFkZGluZyBLbm93bGVkZ2UtUmVxdWlyZW1lbnQgJHtuZXdJZH06ICR7bmV3VGV4dH1gKTtcbiAgICAgICAgICAgIGJyLmFkZChcImtub3dsZWRnZS1yZXF1aXJlbWVudHNcIiwga3IpO1xuICAgICAgICAgICAgY3JlYXRlZElkcy5hZGQobmV3SWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob2xkVGV4dCkgYnIudW5saW5rMihcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBvbGRJZCk7XG4gICAgICAgICAgaWYgKG5ld0lkKSBici5saW5rMihcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBuZXdJZCk7ICBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyID1cbiAgICAgIGNvdXJzZVRvSW1wb3J0Lmtub3dsZWRnZVJlcXVpcmVtZW50cy5tYXAoa3IgPT4gbmV3S1JUZXh0cy5nZXQoa3IuaHRtbCkpO1xuXG4gICAgLy8gVXBkYXRlcyB0aGUgY291cnNlIHByb3BlcnRpZXMgY2VudHJhbENvbnRlbnRPcmRlciBhbmQga25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXJcbiAgICBpZiAoYWJpbGl0eUlkc1RvTWlncmF0ZS5zaXplID4gMCB8fCBjY3NUb01pZ3JhdGUuc2l6ZSA+IDAgfHwga3JzVG9NaWdyYXRlLnNpemUgPiAwKSB7XG4gICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICBjaGFuZ2U6ICFjb3Vyc2UuaXNUZW1wbGF0ZSA/IGBVcHBkYXRlcmFkIEt1cnNpbnN0YW5zYCA6IGBVcHBkYXRlcmFkIEt1cnNtYWxsYCxcbiAgICAgICAgY29udGVudDogIWNvdXJzZS5pc1RlbXBsYXRlID9cbiAgICAgICAgICBgJHtjb3Vyc2UubmFtZX0uIFNrb2xhOiAke2NvdXJzZS5zY2hvb2wgfHwgXCJlaiBhbmdpdmVuXCJ9LiBCZXNrcml2bmluZzogJHtjb3Vyc2UuZGVzY3JpcHRpb24gfHwgJyd9YCA6XG4gICAgICAgICAgYCR7Y291cnNlLm5hbWV9YCxcbiAgICAgICAgbXV0YXRpb25zOiBiciA9PiBici5wdXQoXCJjb3Vyc2VzXCIsIGNvdXJzZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gVGFza3M6XG4gIC8vIDEuIEFTWU5DIE9QRVJBVElPTjogR28gdGhyb3VnaCBhbGwgdGFza3MgdGhhdCBoYXMgZWRnZXMgdG8gYW55IG9mIHRoZSBvbGQgaWRzLlxuICAvLyAyLiBGb3IgZWFjaCBmb3VuZCB0YXNrLCBkbzpcbiAgLy8gICAgQTogSXRlcmF0ZSB0YWdzIHN0YXJ0aW5nIHdpdGggXCJjb3Vyc2U6XCIuIFBpY2sgdGhlIGNvdXJzZSBjb2RlLlxuICAvLyAgICBCOiBQb3B1bGF0ZSB0aGUgbmV3IHByb3BlcnR5IG1pZ3JhdGlvblRhc2tzOiB7XG4gIC8vICAgICAgICAgYWJpbGl0aWVzOiB7W25ld0lkOiBzdHJpbmddOiB7b2xkVGV4dDogc3RyaW5nLCBvbGRJZDogc3RyaW5nLCBpbXBvcnREYXRlOiBudW1iZXJ9fSwgLy8gQmUgYWJsZSB0byBjcmVhdGUgYSBjaGFpbiBpbiB0aGUgR1VJICFcbiAgLy8gICAgICAgICBjZW50cmFsQ29udGVudDoge1tuZXdJZDogc3RyaW5nXToge29sZFRleHQ6IHN0cmluZywgLi4uXCIuLi59fSxcbiAgLy8gICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IHtbbmV3SWQ6IHN0cmluZ106IHtvbGRUZXh0OiBzdHJpbmcsIC4uLlwiLi4ufX0sXG4gIC8vICAgICAgIH1cbiAgLy8gICAgICAgT0JTMSEgTWVyZ2VhIGFiaWxpdGllcywgY2VudHJhbENvbmRlbnQgb2NoIGtub3dsZWRnZVJlcXVpcmVtZW50cyBtZWQgZXYgdGlkaWdhcmUgdsOkcmRlbiAoc8OlIG1hbiBrYW4gaW1wb3J0ZXJhIG9tIG9jaCBvbSBpZ2VuISlcbiAgLy8gICAgICAgT0JTMiEgb2xkSWQga2FuIGbDtnJla29tbWEgcMOlIGZsZXJhIG5ld0lkIG9tIHRhc2sgYW52w6RuZHMgYXYgZmxlcmEga3Vyc2VyLiBcbiAgLy8gICAgQzogQ3JlYXRlIHNldHMgZm9yIHVubGlua3MgYW5kIGxpbmsgb3BlcmF0aW9ucyBwZXIgdHlwZS5cbiAgLy8gICAgRDogRm9yIGFsbCBjb3Vyc2VDb2RlcyB0aGF0IHRoZSB0YXNrIGlzIHRhZ2dlbiBvbixcbiAgLy8gICAgICAgICAqIHJlZ2lzdGVyIGNjc1RvTWlncmF0ZS5rZXlzKCkgaW4gdGhlIHVubGluayBzZXQgb2YgY2VudHJhbCBjb250ZW50c1xuICAvLyAgICAgICAgICogcmVnaXN0ZXIgY2NzVG9NaWdyYXRlLnZhbHVlcygpIGluIHRoZSBsaW5rIHNldCBvZiBjZW50cmFsIGNvbnRlbnRzXG4gIC8vICAgICAgICAgKiAtLVwiLS0gZm9yIGtub3dsZWRnZVJlcXVpcmVtZW50c1xuICAvLyAgICBFOiB1bmxpbmsgYW5kIGxpbmsgd2l0aCByZWdhcmRzIHRvIGFiaWxpdHlJZHNUb01pZ3JhdGUgKGtleXMoKSBhbmQgdmFsdWVzKCkgcmVzcGVjdGl2ZWx5KS5cbiAgLy8gICAgRjogdW5saW5rIGFuZCBsaW5rIGFjY29yZGluZyB0byB0aGUgY3JlYXRlZCBzZXRzIG9mIGxpbmsgLyB1bmxpbmsgb3BlcmF0aW9ucy5cbiAgLy8gICAgTm90ZTogVW5saWtlIGNvdXJzZSBpbnN0YW5jZXMsIHRoZXJlJ3Mgbm8gb3JkZXIgcHJvcGVydHkgdG8gdGFrZSBjYXJlIG9mIGhlcmUhXG4gIC8vXG5cbiAgYXN5bmMgZnVuY3Rpb24gbWlncmF0ZVRhc2tzKCkge1xuICAgIGNvbnN0IG9sZElkcyA9IFtcbiAgICAgIC4uLmFiaWxpdHlJZHNUb01pZ3JhdGUua2V5cygpLFxuICAgICAgLi4uZmxhdHRlbihpZHNUb01pZ3JhdGVQZXJDb3Vyc2UubWFwKGMgPT4gW1xuICAgICAgICAuLi5jLmNjc1RvTWlncmF0ZS5rZXlzKCksXG4gICAgICAgIC4uLmMua3JzVG9NaWdyYXRlLmtleXMoKVxuICAgICAgXSkpXG4gICAgXS5maWx0ZXIoaWQgPT4gIWlkLnN0YXJ0c1dpdGgoJ2ZpY3RpdmVPbGRJZCcpKTtcbiAgICBcbiAgICBjb25zdCBpbXBvcnREYXRlID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHRhc2tzID0gYXdhaXQgZmV0Y2hUYXNrc0luQ2h1bmtzV2l0aEVkZ2VzVG8ob2xkSWRzLCB7XG4gICAgICBpbmNsdWRlOiBbXCJhYmlsaXRpZXNcIiwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgXCJjZW50cmFsQ29udGVudFwiXSxcbiAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXVxuICAgIH0pO1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hUYXNrc0luQ2h1bmtzV2l0aEVkZ2VzVG8oaWRzOiBzdHJpbmdbXSwgb3B0aW9uczogTGlzdE9wdGlvbnMpOiBQcm9taXNlPFRhc2tbXT4ge1xuICAgICAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgbWFrZSB3b3JrIGFyb3VuZCB0aGUgY2FzZSB3aGVuIGdpdmVuIFwiaWRzXCIgY29udGFpbnMgdG9vIG1hbnkgaXRlbXMsIGJ5XG4gICAgICAvLyBkaXZpZGluZyB0aGUgcmVxdWVzdHMgaW50byBzZXZlcmFsIGFuZCBtZXJnZSB0aGUgcmVzdWx0IHVzaW5nIGEgTWFwLlxuICAgICAgaWYgKGlkcy5sZW5ndGggPT09IDApIHJldHVybiBbXTsgLy8gT3RoZXJ3aXNlIHdlJ2xsIHJlcXVlc3QgZXZlcnkgdGFzayBpbiB0aGUgc3lzdGVtLlxuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcDxJRCwgVGFzaz4oKTtcbiAgICAgIGNvbnNvbGUubG9nKFwiTnVtYmVyIG9mIGlkczogXCIgKyBpZHMubGVuZ3RoKTtcbiAgICAgIC8vcmV0dXJuIHJlc3VsdC52YWx1ZXMoKTtcbiAgICAgIHJldHVybiBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFRhc2s+KFwidGFza3NcIiwge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBoYXNFZGdlc1RvOiBpZHNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qY29uc3QgdGFza3MgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFRhc2s+KFwidGFza3NcIiwge1xuICAgICAgaGFzRWRnZXNUbzogb2xkSWRzLFxuICAgICAgaW5jbHVkZTogW1wiYWJpbGl0aWVzXCIsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIFwiY2VudHJhbENvbnRlbnRcIl0sXG4gICAgICBmbGFnczogW1wiaW5jbHVkZUlkc09ubHlcIl1cbiAgICB9KTsqL1xuXG4gICAgZm9yIChjb25zdCB0YXNrIG9mIHRhc2tzKSB7XG4gICAgICBjb25zdCBvbGRNVCA9IHRhc2subWlncmF0ZWRUZXh0cyB8fCB7XG4gICAgICAgIGFiaWxpdGllczoge30sXG4gICAgICAgIGNlbnRyYWxDb250ZW50OiB7fSxcbiAgICAgICAga25vd2xlZGdlUmVxdWlyZW1lbnRzOiB7fVxuICAgICAgfTtcbiAgICAgIHRhc2subWlncmF0ZWRUZXh0cyA9IHtcbiAgICAgICAgYWJpbGl0aWVzOiB7fSxcbiAgICAgICAgY2VudHJhbENvbnRlbnQ6IHt9LFxuICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IHt9XG4gICAgICB9O1xuXG4gICAgICBjb25zdCBtdXRhdGlvbnM6IEFycmF5PChicjogQmF0Y2hSdW5uZXIpPT52b2lkPiA9IFtdO1xuICAgICAgY29uc3QgY2hhbmdlRGVzY3JpcHRpb25zOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgZm9yIChjb25zdCB7aWR9IG9mIHRhc2suYWJpbGl0aWVzKSB7XG4gICAgICAgIGNvbnN0IG1pZ3JhdGlvbkluZm8gPSBhYmlsaXR5SWRzVG9NaWdyYXRlLmdldChpZCk7XG4gICAgICAgIGlmIChtaWdyYXRpb25JbmZvKSB7XG4gICAgICAgICAgY29uc3Qge25ld0lkLCBuZXdUZXh0LCBpc1R5cG9GaXh9ID0gbWlncmF0aW9uSW5mbztcbiAgICAgICAgICBsZXQge29sZFRleHR9ID0gbWlncmF0aW9uSW5mbztcbiAgICAgICAgICBsZXQgb2xkSWQgPSBpZDtcbiAgICAgICAgICBpZiAob2xkTVQuYWJpbGl0aWVzW2lkXSkge1xuICAgICAgICAgICAgLy8gSWYgbWlncmF0aW5nIHN0dWZmIHRoYXQgd2FzIG5ldmVyIGFja25vd2xlZGdlcyBieSBhIHRlYWNoZXIsXG4gICAgICAgICAgICAvLyBXZSBzaG91bGQgcG9pbnQgb3V0IHRoZSB2ZXJ5IG9sZCBpZCBhbmQgdGV4dCBpbnN0ZWFkIG9mIHRoZSBuZXZlci1hY2tub3dsZWRnZWQgb25lLlxuICAgICAgICAgICAgb2xkVGV4dCA9IG9sZE1ULmFiaWxpdGllc1tpZF0ub2xkVGV4dDtcbiAgICAgICAgICAgIG9sZElkID0gb2xkTVQuYWJpbGl0aWVzW2lkXS5vbGRJZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5ld0lkICYmIG9sZFRleHQgIT09IG5ld1RleHQpIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZTogSWYgb2xkVGV4dCA9PT0gbmV3VGV4dCwgdGhlbiB0aGlzIGlzIGEgcmVpbXBvcnQgbmV3IFhNTCB0aGF0IHJldmVydHMgYmFjayB0byBvcmlnaW4gdGV4dC4gRG9uJ3QgcmVxdWlyZSBhY2tub3dsZWRnZW1lbnQgZnJvbSB0ZWFjaGVyIVxuICAgICAgICAgICAgaWYgKCFpc1R5cG9GaXgpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhpcyB3YXNuJ3QganVzdCBhIHR5cG8gZml4IChjaGFuZ2VzIGluIHN0b3Agd29yZHMsIGNhc2luZyBvciBzcGVjaWFsIGNoYXJhY3RlcnMpXG4gICAgICAgICAgICAgIHRhc2subWlncmF0ZWRUZXh0cy5hYmlsaXRpZXNbbmV3SWRdID0ge29sZElkLCBvbGRUZXh0LCBpbXBvcnREYXRlfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgbXV0YXRpb25zLnB1c2goYnIgPT4ge1xuICAgICAgICAgICAgYnIudW5saW5rMihcInRhc2tzXCIsIHRhc2suaWQsIFwiYWJpbGl0aWVzXCIsIGlkKTtcbiAgICAgICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImFiaWxpdGllc1wiLCBuZXdJZCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2goYDxzdHJpa2U+JHtvbGRUZXh0fTwvc3RyaWtlPmApO1xuICAgICAgICAgIGlmIChuZXdJZCkge1xuICAgICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2gobmV3VGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHRhc2tDb3Vyc2VDb2RlcyA9IG5ldyBTZXQ8c3RyaW5nPih0YXNrLnRhZ3MgPyBcbiAgICAgICAgdGFzay50YWdzLmZpbHRlcih0ID0+IHQuc3RhcnRzV2l0aCgnY291cnNlOicpKS5tYXAodCA9PiB0LnN1YnN0cihcImNvdXJzZTpcIi5sZW5ndGgpKSA6XG4gICAgICAgIFtdKTtcblxuICAgICAgLy8gV2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIGxpbmtlZElkcyAoZm9yIHRoaXMgcGFydGljdWxhciB0YXNrKSBmb3IgdGhlIGZvbGxvd2luZyByZWFzb246XG4gICAgICAvLyBMZXQncyBzYXkgdGhlIHRhc2sgd2FzIHJlZmVycmVkIHRvIGJ5IHR3byBkaWZmZXJlbnQgY291cnNlcyAocG9zc2libGUgaW4gb2xkIHZlcnNpb25zKSxcbiAgICAgIC8vIGFuZCBpbiBvbGQgQ2VudHJhbCBDb250ZW50LCB0aGUgdHdvIGNvdXJzZXMgZGlkIGhhdmUgc2xpZ2h0bHkgZGlmZmVyZW50IGZvcm11bGF0aW9ucyBvZiBjZW50cmFsIGNvbnRlbnQsXG4gICAgICAvLyBzbyB0aGUgdGFzayB3YXMgbWFwcGVkIHRvIGJvdGggb2YgdGhlbS4gVGhlbiwgaW4gbmV3IFhNTCwgdGhlIHNhbWUgY2VudHJhbCBjb250ZW50IHdhcyBmb3JtdWxhdGVkXG4gICAgICAvLyBpbiBhIG5ldyB3YXkgdGhhdCBpcyBpZGVudGljYWwgdGhpcyB0aW1lIGJldHdlZW4gdGhlIHR3byBjb3Vyc2VzLiBUaGVuIGJvdGggb2xkIElEcyB3aWxsIGJlIHJlcGxhY2VkXG4gICAgICAvLyBieSBhIHNpbmdsZSBuZXcgSUQuIEl0IHdvdWxkIHRoZW4gYmUgdW5uZXNjZXNzYXJ5IHRvIGxpbmsgdG8gdGhlIG5ldyBJRCB0d2ljZS5cbiAgICAgIGNvbnN0IGxpbmtlZElkcyA9IG5ldyBTZXQ8SUQ+KCk7XG5cbiAgICAgIGZvciAoY29uc3Qge2tyc1RvTWlncmF0ZSwgY2NzVG9NaWdyYXRlLCBjb3Vyc2VDb2RlfSBvZiBpZHNUb01pZ3JhdGVQZXJDb3Vyc2UpIHtcbiAgICAgICAgaWYgKHRhc2tDb3Vyc2VDb2Rlcy5zaXplID09PSAwIHx8IHRhc2tDb3Vyc2VDb2Rlcy5oYXMoY291cnNlQ29kZSkpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IHtpZH0gb2YgdGFzay5jZW50cmFsQ29udGVudCkge1xuICAgICAgICAgICAgY29uc3QgbWlncmF0aW9uSW5mbyA9IGNjc1RvTWlncmF0ZS5nZXQoaWQpO1xuICAgICAgICAgICAgaWYgKG1pZ3JhdGlvbkluZm8pIHtcbiAgICAgICAgICAgICAgbGV0IHtuZXdJZCwgbmV3VGV4dCwgb2xkVGV4dCwgaXNUeXBvRml4fSA9IG1pZ3JhdGlvbkluZm87XG4gICAgICAgICAgICAgIGxldCBvbGRJZCA9IGlkO1xuICAgICAgICAgICAgICBpZiAob2xkTVQuY2VudHJhbENvbnRlbnRbaWRdKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgbWlncmF0aW5nIHN0dWZmIHRoYXQgd2FzIG5ldmVyIGFja25vd2xlZGdlcyBieSBhIHRlYWNoZXIsXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIHBvaW50IG91dCB0aGUgdmVyeSBvbGQgaWQgYW5kIHRleHQgaW5zdGVhZCBvZiB0aGUgbmV2ZXItYWNrbm93bGVkZ2VkIG9uZS5cbiAgICAgICAgICAgICAgICBvbGRUZXh0ID0gb2xkTVQuY2VudHJhbENvbnRlbnRbaWRdLm9sZFRleHQ7XG4gICAgICAgICAgICAgICAgb2xkSWQgPSBvbGRNVC5jZW50cmFsQ29udGVudFtpZF0ub2xkSWQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG5ld0lkICYmIG9sZFRleHQgIT09IG5ld1RleHQpIHtcbiAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIGNhc2U6IElmIG9sZFRleHQgPT09IG5ld1RleHQsIHRoZW4gdGhpcyBpcyBhIHJlaW1wb3J0IG5ldyBYTUwgdGhhdCByZXZlcnRzIGJhY2sgdG8gb3JpZ2luIHRleHQuIERvbid0IHJlcXVpcmUgYWNrbm93bGVkZ2VtZW50IGZyb20gdGVhY2hlciFcbiAgICAgICAgICAgICAgICBpZiAoIWlzVHlwb0ZpeCkge1xuICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyB3YXNuJ3QganVzdCBhIHR5cG8gZml4IChjaGFuZ2VzIGluIHN0b3Agd29yZHMsIGNhc2luZyBvciBzcGVjaWFsIGNoYXJhY3RlcnMpXG4gICAgICAgICAgICAgICAgICB0YXNrLm1pZ3JhdGVkVGV4dHMuY2VudHJhbENvbnRlbnRbbmV3SWRdID0ge29sZElkLCBvbGRUZXh0LCBpbXBvcnREYXRlfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCFuZXdJZCB8fCAhbGlua2VkSWRzLmhhcyhuZXdJZCkpIHtcbiAgICAgICAgICAgICAgICBtdXRhdGlvbnMucHVzaChiciA9PiB7XG4gICAgICAgICAgICAgICAgICBici51bmxpbmsyKFwidGFza3NcIiwgdGFzay5pZCwgXCJjZW50cmFsQ29udGVudFwiLCBpZCk7XG4gICAgICAgICAgICAgICAgICBpZiAobmV3SWQpIGJyLmxpbmsyKFwidGFza3NcIiwgdGFzay5pZCwgXCJjZW50cmFsQ29udGVudFwiLCBuZXdJZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2goYDxzdHJpa2U+JHtvbGRUZXh0fTwvc3RyaWtlPmApO1xuICAgICAgICAgICAgICAgIGlmIChuZXdJZCkge1xuICAgICAgICAgICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2gobmV3VGV4dCk7XG4gICAgICAgICAgICAgICAgICBsaW5rZWRJZHMuYWRkKG5ld0lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChjb25zdCB7aWR9IG9mIHRhc2sua25vd2xlZGdlUmVxdWlyZW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBtaWdyYXRpb25JbmZvID0ga3JzVG9NaWdyYXRlLmdldChpZCk7XG4gICAgICAgICAgICBpZiAobWlncmF0aW9uSW5mbykge1xuICAgICAgICAgICAgICBsZXQge25ld0lkLCBuZXdUZXh0LCBvbGRUZXh0LCBpc1R5cG9GaXh9ID0gbWlncmF0aW9uSW5mbztcbiAgICAgICAgICAgICAgbGV0IG9sZElkID0gaWQ7XG4gICAgICAgICAgICAgIGlmIChvbGRNVC5rbm93bGVkZ2VSZXF1aXJlbWVudHNbaWRdKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgbWlncmF0aW5nIHN0dWZmIHRoYXQgd2FzIG5ldmVyIGFja25vd2xlZGdlcyBieSBhIHRlYWNoZXIsXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIHBvaW50IG91dCB0aGUgdmVyeSBvbGQgaWQgYW5kIHRleHQgaW5zdGVhZCBvZiB0aGUgbmV2ZXItYWNrbm93bGVkZ2VkIG9uZS5cbiAgICAgICAgICAgICAgICBvbGRUZXh0ID0gb2xkTVQua25vd2xlZGdlUmVxdWlyZW1lbnRzW2lkXS5vbGRUZXh0O1xuICAgICAgICAgICAgICAgIG9sZElkID0gb2xkTVQua25vd2xlZGdlUmVxdWlyZW1lbnRzW2lkXS5vbGRJZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobmV3SWQgJiYgb2xkVGV4dCAhPT0gbmV3VGV4dCkge1xuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZTogSWYgb2xkVGV4dCA9PT0gbmV3VGV4dCwgdGhlbiB0aGlzIGlzIGEgcmVpbXBvcnQgbmV3IFhNTCB0aGF0IHJldmVydHMgYmFjayB0byBvcmlnaW4gdGV4dC4gRG9uJ3QgcmVxdWlyZSBhY2tub3dsZWRnZW1lbnQgZnJvbSB0ZWFjaGVyIVxuICAgICAgICAgICAgICAgIGlmICghaXNUeXBvRml4KSB7XG4gICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIHdhc24ndCBqdXN0IGEgdHlwbyBmaXggKGNoYW5nZXMgaW4gc3RvcCB3b3JkcywgY2FzaW5nIG9yIHNwZWNpYWwgY2hhcmFjdGVycylcbiAgICAgICAgICAgICAgICAgIHRhc2subWlncmF0ZWRUZXh0cy5rbm93bGVkZ2VSZXF1aXJlbWVudHNbbmV3SWRdID0ge29sZElkLCBvbGRUZXh0LCBpbXBvcnREYXRlfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIW5ld0lkIHx8ICFsaW5rZWRJZHMuaGFzKG5ld0lkKSkge1xuICAgICAgICAgICAgICAgIG11dGF0aW9ucy5wdXNoKGJyID0+IHtcbiAgICAgICAgICAgICAgICAgIGJyLnVubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBpZCk7XG4gICAgICAgICAgICAgICAgICBpZiAobmV3SWQpIGJyLmxpbmsyKFwidGFza3NcIiwgdGFzay5pZCwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgbmV3SWQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNoYW5nZURlc2NyaXB0aW9ucy5wdXNoKGA8c3RyaWtlPiR7b2xkVGV4dH08L3N0cmlrZT5gKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3SWQpIHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZURlc2NyaXB0aW9ucy5wdXNoKG5ld1RleHQpO1xuICAgICAgICAgICAgICAgICAgbGlua2VkSWRzLmFkZChuZXdJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgIGNoYW5nZTogYE1pZ3JlcmFkIFVwcGdpZnRgLFxuICAgICAgICBjb250ZW50OiBgPGg0PiR7dGFzay5uYW1lfSAke3Rhc2suc2Nob29sID8gYCgke3Rhc2suc2Nob29sfSkgYCA6ICcoc2tvbGEgZWogYW5naXZlbiknfTwvaDQ+XG4gICAgICAgICAgPHA+S3Vyc2tvZDogJHtbLi4udGFza0NvdXJzZUNvZGVzXS5qb2luKCcsJyl9PC9wPlxuICAgICAgICAgICR7Y2hhbmdlRGVzY3JpcHRpb25zLm1hcCh0eHQgPT4gYDxwPiR7dHh0fTwvcD5gKS5qb2luKCcnKX1gLFxuICAgICAgICBtdXRhdGlvbnM6IGJyID0+IHtcbiAgICAgICAgICBici5wdXQoXCJ0YXNrc1wiLCB0YXNrKTtcbiAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChtID0+IG0oYnIpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gVEhFIFJFU1VMVCBXSUxMIEJFOlxuICAvLyAgRnVuY3Rpb24gcG9wdWxhdGVzIGEgY29tcGxldGUgc2V0IG9mIENoYW5nZXMgdG8gZGlzcGxheSB0byB1c2VyLlxuICAvLyAgSWYgdXNlciBjbGlja3MgXCJpbXBvcnRcIiwgdGhlc2UgY2hhbmdlcyB3aWxsIGJlIHBlcmZvcm1lZC5cblxuICBcbiAgLy8gTmV4dCB0aGluZyB3aWxsIGJlIHRvIG1ha2UgdGhpcyB2aXNpYmxlIGluIEdVSTpcbiAgLy8gIFNob3cgT3BlbkNsb3NlQm94IHdpdGggd2FybmluZyBiZWZvcmUgXCJJbmzDpG1uaW5nc3VwcGdpZnRcIiBpbiBjYXNlIHRoZXJlIGFyZSBtaWdyYXRpb25UYXNrcy5cbiAgLy8gIExpc3Qga25vd2xlZGdlIHJlcXVpcmVtZW50cyBBLCBLUiBDLCBLUiBFLCBjZW50cmFsIGNvbnRlbnRzIGFuZCBhYmlsaXRpZXMgcmVzcGVjdGl2ZWx5IGluIHRvdGFsbHkgbWF4IDUgdGFibGVzLlxuICAvLyAgU2FtZSBHVUkgYXMga25vd2xlZGdlUmVxdWlyZW1lbnQgbWF0cml4IChncmVlbiBoZWFkZXIpIHBlciB0YWJsZS5cbiAgLy8gIEhlYWRlcnM6IFwiVXJzcHJ1bmdsaWcgZm9ybXVsZXJpbmdcIiwgXCJTa29sdmVya2V0cyBueWEgZm9ybXVsZXJpbmdcIiwgXCJUw6Rja2VyIHVwcGdpZnRlbiBkZW4gbnlhIGZvcm11bGVyaW5nZW4/XCJcbiAgLy8gIEZvciBlYWNoIHJvdywgc2hvdyBzdHJpa2UgdGV4dCArIG5ldyB0ZXh0IHdpdGggZ3JlZW4gYmFja2dyb3VuZC4gVGhlbiBJbXBvcnQgRGF0ZS4gVGhlbiBcIkphIC8gTmVqXCIuXG4gIC8vICBUcnlja2VyIG1hbiBKQSBlbGxlciBuZWogc8OlIHRhcyByYWRlbiBib3J0LlxuICAvLyAgVHJ5Y2tlciBtYW4gTmVqIHPDpSB0YXMgw6R2ZW4ga29wcGxpbmdlbiBib3J0IG9jaCBrdXJzZXIgc29tIGFudsOkbmRlciB1cHBnaWZ0ZW4ga2FuIHDDpXZlcmthcy5cbiAgLy9cbiAgLy8gTsOkc3RhIHNhayBhdHQgZ8O2cmE6IFBpbm5hLyB2aXNhIGJlcsO2cmRhIHVwcGdpZnRlciBtZWQgbnkgZsOkcmcgZWxsZXIgaWtvbi5cbiAgLy8gT2Nrc8OlLCBow7Znc3QgdXBwIHDDpSBrdXJzLXNpZGFuIChrdXJzYnlnZyk6IFZpc2Egc2FtbWEgdmFybmluZ3N0cmlhbmdlbCBPcGVuQ2xvc2VCb3ggb2NoIGxpc3RhXG4gIC8vIMOkbmRyYWRlIGZvcm11bGVyaW5nYXIgKyBiZXLDtnJkYSB1cHBnaWZ0ZXIuIE9tIG1hbiBpbnRlIMOkciByZWRpZ2VyaW5nc2JlaMO2cmlnIGF2IGVuIHVwcGdpZnQgYsO2clxuICAvLyBtYW4ga29udGFrdGEgdXBwZ2lmdGVucyDDpGdhcmUgZsO2ciBhdHQgZ3JhbnNrYSBtaWdyZXJpbmdlbi5cbn1cbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IFN1YmplY3QsIENvdXJzZSwgQWJpbGl0eSwgS25vd2xlZGdlUmVxdWlyZW1lbnQsIENlbnRyYWxDb250ZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgU3ViamVjdFRvSW1wb3J0IH0gZnJvbSAnLi4vc3ViamVjdC10by1pbXBvcnQnO1xuaW1wb3J0IHsgQ2hhbmdlIH0gZnJvbSAnLi9jaGFuZ2UnO1xuaW1wb3J0IHsgbWlncmF0ZU9yZGVyTGlzdHNPZkNvdXJzZUluc3RhbmNlcywgbWlncmF0ZUFiaWxpdGllc09yZGVyT25TdWJqZWN0IH0gZnJvbSAnLi9taWdyYXRpb25zJztcbmltcG9ydCB7IG1pZ3JhdGVTdWJqZWN0IH0gZnJvbSAnLi9taWdyYXRlLXN1YmplY3QnO1xuaW1wb3J0IHsgbG9hZENvdXJzZSB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IENvdXJzZVNldCB9IGZyb20gJy4vY291cnNlLXNldCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkaWZmWG1sV2l0aERhdGFiYXNlKGV4aXN0aW5nU3ViamVjdDogU3ViamVjdCwgc3ViamVjdFRvSW1wb3J0OiBTdWJqZWN0VG9JbXBvcnQsIGNoYW5nZXM6IENoYW5nZVtdKSB7XG4gIC8vIEV4cGFuZCBncmFwaHMgb2YgZXhpc3RpbmcgU3ViamVjdFxuICBleGlzdGluZ1N1YmplY3QgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5nZXQoJ3N1YmplY3RzJywgZXhpc3RpbmdTdWJqZWN0LmlkLCB7IGluY2x1ZGU6IFtcImNvdXJzZVRlbXBsYXRlc1wiLCBcImFiaWxpdGllc1wiXSB9KTtcbiAgLy8gTGF6aWx5IGxvYWQgYWxsIGNlbnRyYWwgY29udGVudHMgYW5kIGtub3dsZWRnZVJlcXVpcmVtZW50cyBvblxuICAvLyBlYWNoIGNvdXJzZSB0ZW1wbGF0ZVxuICBjb25zdCBleHBhbmRlZENvdXJzZVRlbXBsYXRlcyA9IGF3YWl0IFByb21pc2UuYWxsKGV4aXN0aW5nU3ViamVjdC5jb3Vyc2VUZW1wbGF0ZXMubWFwKGN0ID0+IGxvYWRDb3Vyc2UoY3QuaWQsIHtcbiAgICBpbmNsdWRlOiBbXG4gICAgICAnY2VudHJhbENvbnRlbnQnLFxuICAgICAgJ2tub3dsZWRnZVJlcXVpcmVtZW50cydcbiAgICBdXG4gIH0pKSk7XG5cbiAgY29uc29sZS5sb2coYFN1YmplY3Q6ICR7ZXhpc3RpbmdTdWJqZWN0Lm5hbWV9LiBDb3Vyc2VzOiAke2V4cGFuZGVkQ291cnNlVGVtcGxhdGVzLm1hcCgoe25hbWV9KSA9PiBuYW1lKX1gKTtcblxuICBjb25zdCBjb3Vyc2VTZXRzOiBDb3Vyc2VTZXRbXSA9IGF3YWl0IFByb21pc2UuYWxsKGV4cGFuZGVkQ291cnNlVGVtcGxhdGVzLm1hcCAoYXN5bmMgY291cnNlVGVtcGxhdGUgPT4gKHtcbiAgICB0ZW1wbGF0ZTogY291cnNlVGVtcGxhdGUsXG4gICAgaW5zdGFuY2VzOiBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PENvdXJzZT4oXCJjb3Vyc2VzXCIsIHsgbmFtZTogY291cnNlVGVtcGxhdGUubmFtZSwgaW5jbHVkZTogWydhYmlsaXRpZXMnXSwgZmxhZ3M6IFsnaW5jbHVkZUlkc09ubHknXSB9KVxuICB9KSkpO1xuXG4gIC8qaWYgKGV4cGFuZGVkQ291cnNlVGVtcGxhdGVzLnNvbWUgKGNvdXJzZSA9PiAhY291cnNlLmNlbnRyYWxDb250ZW50T3JkZXIgfHwgIWNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlciB8fCAhY291cnNlLmFiaWxpdGllc09yZGVyKSkge1xuICAgIG1pZ3JhdGVPcmRlckxpc3RzT2ZDb3Vyc2VJbnN0YW5jZXMoY291cnNlU2V0cywgc3ViamVjdFRvSW1wb3J0LCBjaGFuZ2VzKTtcbiAgICAvLyBJbiBmdXR1cmUsIGFzIGFiaWxpdGllcyBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCwgd2Ugd2lsbCBoYXZlIHRvIG1haW50YWluIHRoZSBvcmRlciBvZiBhYmlsaXRpZXMgb24gdGhlIGNvdXJzZSBpbnN0YW5jZXMsXG4gICAgLy8gdGhlIHNhbWUgd2F5IHdlIGRvIGl0IHdpdGggY2VudHJhbCBjb250ZW50IGFuZCBrbm93bGVkZ2UgcmVxdWlyZW1lbnRzLiBUT0RPIHJlc3BlY3QgYWJpbGl0aWVzIG9yZGVyIG9uIGV2ZXJ5IHBsYWNlIGFiaWxpdGllcyBhcmUgZW51bWVyYXRlZCxcbiAgICAvLyBzdWNoIGFzIG9uIGNvdXJzZSB2aWV3ZXIsIGNvdXJzZSBidWlsZGVyLCBldGMuXG4gICAgbWlncmF0ZUFiaWxpdGllc09yZGVyT25TdWJqZWN0KGV4aXN0aW5nU3ViamVjdCwgY291cnNlU2V0cywgY2hhbmdlcyk7XG4gIH0gZWxzZSB7Ki9cbiAgICBhd2FpdCBtaWdyYXRlU3ViamVjdChleGlzdGluZ1N1YmplY3QsIGNvdXJzZVNldHMsIHN1YmplY3RUb0ltcG9ydCwgY2hhbmdlcyk7XG4gIC8vfVxufVxuXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgU2tvbHZlcmtldFN1YmplY3QsIFNrb2x2ZXJrZXRDb3Vyc2UgfSBmcm9tICcuL3Nrb2x2ZXJrZXQtc3ViamVjdCc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgU3ViamVjdCwgQ291cnNlLCBBYmlsaXR5LCBLbm93bGVkZ2VSZXF1aXJlbWVudCwgQ2VudHJhbENvbnRlbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBNdXRhdGlvblJlcXVlc3QsIEJhdGNoUnVubmVyLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgQ2hhbmdlIH0gZnJvbSAnLi9kaWZmL2NoYW5nZSc7XG5pbXBvcnQgeyBTdWJqZWN0VG9JbXBvcnQsIENvdXJzZVRvSW1wb3J0IH0gZnJvbSAnLi9zdWJqZWN0LXRvLWltcG9ydCc7XG5pbXBvcnQgeyBkaWZmWG1sV2l0aERhdGFiYXNlIH0gZnJvbSAnLi9kaWZmL2RpZmYteG1sLXdpdGgtZGF0YWJhc2UnO1xuaW1wb3J0IHsgbG9hZENvdXJzZSB9IGZyb20gJy4uL3V0aWxzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgb25DYW5jZWw6ICgpID0+IHZvaWQ7XG4gIG9uSW1wb3J0U3VjY2VzczogKHN1YmplY3Q6IHN0cmluZykgPT4gdm9pZDtcbiAgc3ViamVjdDogU2tvbHZlcmtldFN1YmplY3Q7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHNob3dGdWxsVGV4dDogYm9vbGVhbjtcbiAgY2hhbmdlczogQ2hhbmdlW107XG4gIHN1YmplY3RUb0ltcG9ydD86IFN1YmplY3RUb0ltcG9ydDtcbiAgaXNXb3JraW5nOiBib29sZWFuO1xuICBpc0ltcG9ydGluZzogYm9vbGVhbjtcbiAgZXJyb3I/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBVcGxvYWRlZFN1YmplY3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG4gIHB1cnBvc2VFbGVtOiBIVE1MRWxlbWVudDtcbiAgY291cnNlc0VsZW1zOiB7IFtjb3Vyc2VDb2RlOiBzdHJpbmddOiB7IGNvdXJzZTogU2tvbHZlcmtldENvdXJzZSwgZWxlbTogSFRNTEVsZW1lbnQgfSB9O1xuICBjZW50cmFsQ29udGVudEVsZW1zOiBIVE1MRWxlbWVudFtdO1xuICBrbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zOiBIVE1MRWxlbWVudFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLmNvdXJzZXNFbGVtcyA9IHt9O1xuICAgIHRoaXMuY2VudHJhbENvbnRlbnRFbGVtcyA9IFtdO1xuICAgIHRoaXMua25vd2xlZGdlUmVxdWlyZW1lbnRFbGVtcyA9IFtdO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93RnVsbFRleHQ6IGZhbHNlLFxuICAgICAgY2hhbmdlczogW10sXG4gICAgICBpc1dvcmtpbmc6IHRydWUsXG4gICAgICBpc0ltcG9ydGluZzogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5hZGRDbGFzc2VzRm9yQ2hlcnJ5UGlja2VkRWxlbWVudHMoKTtcbiAgICB0cnkge1xuICAgICAgY29uc3Qge2NoYW5nZXMsIHN1YmplY3RUb0ltcG9ydH0gPSBhd2FpdCB0aGlzLmRpZmZXaXRoRXhpc3RpbmcoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjaGFuZ2VzLCBzdWJqZWN0VG9JbXBvcnQgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvcjogJycrZXJyb3IgfSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1dvcmtpbmc6IGZhbHNlIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFkZENsYXNzZXNGb3JDaGVycnlQaWNrZWRFbGVtZW50cygpIHtcbiAgICBjb25zdCBhYmlsaXRpZXMgPSAkKHRoaXMucHVycG9zZUVsZW0pLmZpbmQoJ2xpJykuZmlyc3QoKS5wYXJlbnQoKS5jaGlsZHJlbignbGknKTtcbiAgICBhYmlsaXRpZXMuYWRkQ2xhc3MoJ2FiaWxpdHknKTtcbiAgICBjb25zdCBjZW50cmFsQ29udGVudHMgPSAkKHRoaXMuY2VudHJhbENvbnRlbnRFbGVtcykuZmluZCgnbGknKTtcbiAgICBjZW50cmFsQ29udGVudHMuYWRkQ2xhc3MoJ2NlbnRyYWwtY29udGVudCcpO1xuICAgIGNvbnN0IGtub3dsZWRnZVJlcXVpcmVtZW50cyA9ICQodGhpcy5rbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zKS5maW5kKCdwJyk7XG4gICAga25vd2xlZGdlUmVxdWlyZW1lbnRzLmFkZENsYXNzKCdrbm93bGVkZ2UtcmVxdWlyZW1lbnQnKTtcbiAgICBjb25zdCBhbGwgPSAkKFthYmlsaXRpZXMsIGNlbnRyYWxDb250ZW50cywga25vd2xlZGdlUmVxdWlyZW1lbnRzXSk7XG4gICAgYWxsLmFkZENsYXNzKCdtYXJrZWQtYXJlYScpO1xuICB9XG5cbiAgY2hlcnJ5UGlja0RhdGEoKTogU3ViamVjdFRvSW1wb3J0IHtcbiAgICAvL1xuICAgIC8vIFJlYWRzIGVsZW1lbnRzICh0YWdnZWQgYnkgY2xhc3NlcyBpbiBhZGRDbGFzc2VzRm9yQ2hlcnJ5UGlja2VkRWxlbWVudHMoKSkgYW5kIGNvbnZlcnRzIHRoZWlyIGlubmVyIEhUTUwgdG8gdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAvLyBtb2RlbCBTdWJqZWN0VG9JbXBvcnQuIE5vdGUgdGhhdCBpZiB3ZSBuZWVkIHRvIGFkanVzdCBob3cgdG8gcGljayB0aGUgcmlnaHQgTEkgb3IgUCBlbGVtZW50cywgd2VcbiAgICAvLyB3aWxsIG9ubHkgbmVlZCB0byBjaGFuZ2UgdGhlIGNvZGUgaW4gYWRkQ2xhc3Nlc0ZvckNoZXJyeVBpY2tlZEVsZW1lbnRzKCksIG5vdCB0aGlzIGNvZGUuXG4gICAgLy9cbiAgICBjb25zdCBza29sU3ViamVjdCA9IHRoaXMucHJvcHMuc3ViamVjdDtcbiAgICBjb25zdCBhYmlsaXRpZXNMaXMgPSBBcnJheS5mcm9tKCQodGhpcy5wdXJwb3NlRWxlbSkuZmluZCgnbGknKS5maXJzdCgpLnBhcmVudCgpLmNoaWxkcmVuKCdsaScpKTtcbiAgICBjb25zdCBhYmlsaXRpZXMgPSBhYmlsaXRpZXNMaXMubWFwKChhLCBpKSA9PiBgJHtpICsgMX0uICR7JChhKS5odG1sKCl9YC50cmltKCkpLmZpbHRlcihodG1sID0+ICEhaHRtbCk7XG5cbiAgICBjb25zdCByZXN1bHQ6IFN1YmplY3RUb0ltcG9ydCA9IHtcbiAgICAgIG5hbWU6IHNrb2xTdWJqZWN0Lm5hbWUsXG4gICAgICBjb2RlOiBza29sU3ViamVjdC5jb2RlLFxuICAgICAgc2Nob29sVHlwZTogc2tvbFN1YmplY3Quc2Nob29sVHlwZSxcbiAgICAgIGFiaWxpdGllcyxcbiAgICAgIGNvdXJzZXM6IE9iamVjdC5rZXlzKHRoaXMuY291cnNlc0VsZW1zKVxuICAgICAgICAubWFwKGNvdXJzZUNvZGUgPT4gdGhpcy5jb3Vyc2VzRWxlbXNbY291cnNlQ29kZV0pXG4gICAgICAgIC5tYXA8Q291cnNlVG9JbXBvcnQ+KCh7IGNvdXJzZSwgZWxlbSB9KSA9PiAoe1xuICAgICAgICAgIG5hbWU6IGNvdXJzZS5uYW1lLFxuICAgICAgICAgIHllYXI6IGNvdXJzZS55ZWFyLFxuICAgICAgICAgIGNvZGU6IGNvdXJzZS5jb2RlLFxuICAgICAgICAgIHBvaW50czogY291cnNlLnBvaW50cyxcbiAgICAgICAgICBjZW50cmFsQ29udGVudDogQXJyYXkuZnJvbSgkKGVsZW0pLmZpbmQoJy5jZW50cmFsLWNvbnRlbnQnKSkubWFwKGMgPT4gKHtcbiAgICAgICAgICAgIGh0bWw6ICQoYykuaHRtbCgpLnRyaW0oKSBhcyBzdHJpbmcsXG4gICAgICAgICAgICBncm91cDogJChjKS5wYXJlbnQoJ3VsJykucHJldignaDQnKS50ZXh0KCkudHJpbSgpXG4gICAgICAgICAgfSkpLmZpbHRlcigoe2h0bWx9KSA9PiAhIWh0bWwpLFxuICAgICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50czpcbiAgICAgICAgICAgIEFycmF5LmZyb20oJChlbGVtKS5maW5kKCcuZ3JhZGUtc3RlcC1ub25lIC5rbm93bGVkZ2UtcmVxdWlyZW1lbnQnKSkubWFwKHIgPT4gJChyKS5odG1sKCkudHJpbSgpKVxuICAgICAgICAgICAgICAuZmlsdGVyKGh0bWwgPT4gISFodG1sKVxuICAgICAgICAgICAgICAubWFwKGh0bWwgPT4gKHtncmFkZVN0ZXA6IG51bGwsIGh0bWwgfSkpXG4gICAgICAgICAgICAgIC5jb25jYXQoXG4gICAgICAgICAgICAgICAgQXJyYXkuZnJvbSgkKGVsZW0pLmZpbmQoJy5ncmFkZS1zdGVwLUUgLmtub3dsZWRnZS1yZXF1aXJlbWVudCcpKS5tYXAociA9PiAkKHIpLmh0bWwoKS50cmltKCkpXG4gICAgICAgICAgICAgICAgICAuZmlsdGVyKGh0bWwgPT4gISFodG1sKVxuICAgICAgICAgICAgICAgICAgLm1hcChodG1sID0+ICh7IGdyYWRlU3RlcDogXCJFXCIsIGh0bWwgfSkpXG4gICAgICAgICAgICAgICAgICAuY29uY2F0KFxuICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKCQoZWxlbSkuZmluZCgnLmdyYWRlLXN0ZXAtQyAua25vd2xlZGdlLXJlcXVpcmVtZW50JykpLm1hcChyID0+ICQocikuaHRtbCgpLnRyaW0oKSlcbiAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGh0bWwgPT4gISFodG1sKVxuICAgICAgICAgICAgICAgICAgICAgIC5tYXAoaHRtbCA9PiAoeyBncmFkZVN0ZXA6IFwiQ1wiLCBodG1sIH0pKSlcbiAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KFxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbSgkKGVsZW0pLmZpbmQoJy5ncmFkZS1zdGVwLUEgLmtub3dsZWRnZS1yZXF1aXJlbWVudCcpKS5tYXAociA9PiAkKHIpLmh0bWwoKS50cmltKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaHRtbCA9PiAhIWh0bWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoaHRtbCA9PiAoeyBncmFkZVN0ZXA6IFwiQVwiLCBodG1sIH0pKSkpXG4gICAgICAgICAgICAgICAgICAgIH0pKVxuICAgIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGFzeW5jIGRpZmZXaXRoRXhpc3RpbmcoKTogUHJvbWlzZTx7Y2hhbmdlczogQ2hhbmdlW10sIHN1YmplY3RUb0ltcG9ydDogU3ViamVjdFRvSW1wb3J0fT4ge1xuICAgIGNvbnN0IHN1YmplY3RUb0ltcG9ydCA9IHRoaXMuY2hlcnJ5UGlja0RhdGEoKTtcbiAgICBsZXQgY2hhbmdlczogQ2hhbmdlW10gPSBbXTtcbiAgICAvLyBGaW5kIGV4aXN0aW5nIFN1YmplY3RcbiAgICBjb25zdCBleGlzdGluZ1N1YmplY3RzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTdWJqZWN0PihcInN1YmplY3RzXCIpO1xuICAgIGxldCBleGlzdGluZ1N1YmplY3QgPSBleGlzdGluZ1N1YmplY3RzLmZpbHRlcihzID0+IHMuY29kZSA9PT0gdGhpcy5wcm9wcy5zdWJqZWN0LmNvZGUpWzBdO1xuICAgIGxldCBjZW50cmFsQ29udGVudCA9IFtdIGFzIENlbnRyYWxDb250ZW50W10sXG4gICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHMgPSBbXSBhcyBLbm93bGVkZ2VSZXF1aXJlbWVudFtdO1xuXG4gICAgbGV0IGNyZWF0ZVRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGZ1bmN0aW9uIGN0KCkge1xuICAgICAgY29uc3QgcnYgPSBjcmVhdGVUaW1lO1xuICAgICAgY3JlYXRlVGltZSArPSAyO1xuICAgICAgcmV0dXJuIHJ2O1xuICAgIH1cblxuICAgIGlmIChleGlzdGluZ1N1YmplY3QpIHtcbiAgICAgIC8vIEluY2x1ZGUgYWJpbGl0aWVzIGFuZCBzdGFuZGFyZENvdXJzZXMgd2l0aCB0aGUgZm91bmQgU3ViamVjdDpcbiAgICAgIGF3YWl0IGRpZmZYbWxXaXRoRGF0YWJhc2UoZXhpc3RpbmdTdWJqZWN0LCBzdWJqZWN0VG9JbXBvcnQsIGNoYW5nZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdWJqZWN0IG5vdCBpbXBvcnRlZCBiZWZvcmUuIEFkZCBpdCFcbiAgICAgIGNvbnN0IG5ld1N1YmplY3Q6IFN1YmplY3QgPSBleGlzdGluZ1N1YmplY3QgPSB7XG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXG4gICAgICAgIHNjaG9vbFR5cGU6IHN1YmplY3RUb0ltcG9ydC5zY2hvb2xUeXBlLFxuICAgICAgICB0YWdzOiBbXCJzY2hvb2xUeXBlOlwiICsgc3ViamVjdFRvSW1wb3J0LnNjaG9vbFR5cGVdLFxuICAgICAgICBhY2w6IFtcInJvbGU6VVNFUjpSXCJdLFxuICAgICAgICBjb2RlOiBzdWJqZWN0VG9JbXBvcnQuY29kZSxcbiAgICAgICAgbmFtZTogc3ViamVjdFRvSW1wb3J0Lm5hbWUsXG4gICAgICAgIGFiaWxpdGllc09yZGVyOiBbXSwgLy8gVXBkYXRlIGxhdGVyIG9uIVxuICAgICAgICBwdWJsaXNoYWJsZTogZmFsc2UsXG4gICAgICAgIGRhdGVUaW1lOiBjdCgpXG4gICAgICB9O1xuICAgICAgY2hhbmdlcy5wdXNoKHtcbiAgICAgICAgY2hhbmdlOiBcIk55dHQgw6RtbmVcIixcbiAgICAgICAgY29udGVudDogYCR7c3ViamVjdFRvSW1wb3J0Lm5hbWV9ICgke3N1YmplY3RUb0ltcG9ydC5jb2RlfSlgLFxuICAgICAgICBtdXRhdGlvbnM6IHIgPT4gci5hZGQoXCJzdWJqZWN0c1wiLCBuZXdTdWJqZWN0KVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHN1YmplY3RBYmlsaXRpZXMgPSBbXTtcblxuICAgICAgZm9yIChsZXQgYSBvZiBzdWJqZWN0VG9JbXBvcnQuYWJpbGl0aWVzKSB7XG4gICAgICAgIGNvbnN0IG5ld0FiaWxpdHk6IEFiaWxpdHkgPSB7XG4gICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgICBuYW1lOiBhLFxuICAgICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl0sXG4gICAgICAgICAgZGF0ZVRpbWU6IGN0KClcbiAgICAgICAgfTtcblxuICAgICAgICBzdWJqZWN0QWJpbGl0aWVzLnB1c2gobmV3QWJpbGl0eSk7IC8vIFRvIHJlZmVyIGZyb20gaW4gY291cnNlcyBsYXRlciBvbiFcblxuICAgICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICAgIGNoYW5nZTogXCJOeSBmw7ZybcOlZ2FcIixcbiAgICAgICAgICBjb250ZW50OiBhLFxuICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XG4gICAgICAgICAgICByLmFkZChcImFiaWxpdGllc1wiLCBuZXdBYmlsaXR5KTtcbiAgICAgICAgICAgIHIubGluayhcInN1YmplY3RzXCIsIG5ld1N1YmplY3QuaWQsIFwiYWJpbGl0aWVzXCIsIG5ld0FiaWxpdHkuaWQsIFwiYWJpbGl0aWVzXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFVwZGF0ZSBub3cgd2hlbiB3ZSBoYXZlIGFiaWxpdGllcyBvcmRlcjpcbiAgICAgIG5ld1N1YmplY3QuYWJpbGl0aWVzT3JkZXIgPSBzdWJqZWN0QWJpbGl0aWVzLm1hcCgoe2lkfSkgPT4gaWQpO1xuXG4gICAgICBmb3IgKGxldCBjIG9mIHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzKSB7XG4gICAgICAgIGNvbnN0IG5ld0NvdXJzZTogQ291cnNlID0ge1xuICAgICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXG4gICAgICAgICAgc3ViamVjdENvZGU6IG5ld1N1YmplY3QuY29kZSxcbiAgICAgICAgICBzY2hvb2xUeXBlOiBuZXdTdWJqZWN0LnNjaG9vbFR5cGUsXG4gICAgICAgICAgdGFnczogW1xuICAgICAgICAgICAgXCJzdWI6XCIgKyBuZXdTdWJqZWN0LmNvZGUsXG4gICAgICAgICAgICBcImNvdXJzZTpcIiArIGMuY29kZSxcbiAgICAgICAgICAgIFwic2Nob29sVHlwZTpcIiArIG5ld1N1YmplY3Quc2Nob29sVHlwZVxuICAgICAgICAgIF0sXG4gICAgICAgICAgZGF0ZVRpbWU6IGN0KCksXG4gICAgICAgICAgaXNUZW1wbGF0ZTogdHJ1ZSxcbiAgICAgICAgICBhY2w6IFtcInJvbGU6RU1QTE9ZRUU6UlwiXSwgLy8gU3RhbmRhcmRrdXJzZXIgZW5kYXN0IHN5bmxpZ2EgZsO2ciBsw6RyYXJlXG4gICAgICAgICAgbmFtZTogYy5uYW1lLFxuICAgICAgICAgIGNvZGU6IGMuY29kZSxcbiAgICAgICAgICBwb2ludHM6IGMucG9pbnRzLFxuICAgICAgICAgIG1vZHVsZXM6IFtdLFxuICAgICAgICAgIHN1YmplY3RJZDogbmV3U3ViamVjdC5pZCxcbiAgICAgICAgICByZXNvdXJjZXM6IFtdLFxuICAgICAgICAgIGNyZWF0ZWRCeTogeyBuYW1lOiBlbnYuY3VycmVudFVzZXIuZGlzcGxheU5hbWUsIHVybDogXCJtYWlsdG86XCIgKyBlbnYuY3VycmVudFVzZXIubWFpbCB9LFxuICAgICAgICAgIGNyZWF0ZWREYXRlOiBEYXRlLm5vdygpLFxuICAgICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyOiBbXSxcbiAgICAgICAgICBjZW50cmFsQ29udGVudE9yZGVyOiBbXSxcbiAgICAgICAgICBhYmlsaXRpZXNPcmRlcjogc3ViamVjdEFiaWxpdGllcy5tYXAoKHtpZH0pID0+IGlkKVxuICAgICAgICB9O1xuICAgICAgICBpZiAoYy55ZWFyKSBuZXdDb3Vyc2Uuc2Nob29sR3JhZGUgPSBjLnllYXI7XG5cbiAgICAgICAgY2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICBjaGFuZ2U6IFwiTnkga3Vyc1wiLFxuICAgICAgICAgIGNvbnRlbnQ6IGMubmFtZSxcbiAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xuICAgICAgICAgICAgci5hZGQoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZSk7XG4gICAgICAgICAgICByLmxpbmsoXCJzdWJqZWN0c1wiLCBuZXdTdWJqZWN0LmlkLCBcImNvdXJzZXNcIiwgbmV3Q291cnNlLmlkLCBcImNvdXJzZVRlbXBsYXRlc1wiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAobGV0IHtncm91cDogY2NHcm91cCwgaHRtbH0gb2YgYy5jZW50cmFsQ29udGVudCkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIGV4aXN0cyBhbiBpZGVudGljYWwgY2VudHJhbCBjb250ZW50IG9uIHByZXZpb3VzIGNvdXJzZSBmaXJzdFxuICAgICAgICAgIGxldCBuZXdDZW50cmFsQ29udGVudCA9IGNlbnRyYWxDb250ZW50LmZpbHRlcihjYyA9PiBjYy5uYW1lID09PSBodG1sKVswXTtcbiAgICAgICAgICBpZiAoIW5ld0NlbnRyYWxDb250ZW50KSB7XG4gICAgICAgICAgICBuZXdDZW50cmFsQ29udGVudCA9IHtcbiAgICAgICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgICAgICAgZGF0ZVRpbWU6IGN0KCksXG4gICAgICAgICAgICAgIG5hbWU6IGh0bWwsXG4gICAgICAgICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY2NHcm91cCkgbmV3Q2VudHJhbENvbnRlbnQuZ3JvdXAgPSBjY0dyb3VwO1xuICAgICAgICAgICAgY2VudHJhbENvbnRlbnQucHVzaChuZXdDZW50cmFsQ29udGVudCk7XG5cbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgICAgIGNoYW5nZTogXCJOeXR0IGNlbnRyYWx0IGlubmVow6VsbFwiLFxuICAgICAgICAgICAgICBjb250ZW50OiBgPGg0PiR7Y2NHcm91cH08L2g0PiR7aHRtbH1gLFxuICAgICAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xuICAgICAgICAgICAgICAgIHIuYWRkKFwiY2VudHJhbC1jb250ZW50XCIsIG5ld0NlbnRyYWxDb250ZW50KTtcbiAgICAgICAgICAgICAgICByLmxpbmsoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZS5pZCwgXCJjZW50cmFsLWNvbnRlbnRcIiwgbmV3Q2VudHJhbENvbnRlbnQuaWQsIFwiY2VudHJhbENvbnRlbnRcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XG4gICAgICAgICAgICAgICAgci5saW5rKFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwiY2VudHJhbC1jb250ZW50XCIsIG5ld0NlbnRyYWxDb250ZW50LmlkLCBcImNlbnRyYWxDb250ZW50XCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmVnaXN0ZXIgdGhlIG9yZGVyIGluIHdoaWNoIHRoaXMgY2VudHJhbCBjb250ZW50IGFwcGVhcmVkIGluIHRoZSBYTUw6XG4gICAgICAgICAgbmV3Q291cnNlLmNlbnRyYWxDb250ZW50T3JkZXIucHVzaChuZXdDZW50cmFsQ29udGVudC5pZCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBjciBvZiBjLmtub3dsZWRnZVJlcXVpcmVtZW50cykge1xuICAgICAgICAgIGxldCBuZXdLbm93bGVkZ2VSZXF1aXJlbWVudCA9IGtub3dsZWRnZVJlcXVpcmVtZW50cy5maWx0ZXIoa3IgPT4ga3IubmFtZSA9PT0gY3IuaHRtbCAmJiBrci5ncmFkZVN0ZXAgPT09IGNyLmdyYWRlU3RlcClbMF07XG4gICAgICAgICAgaWYgKCFuZXdLbm93bGVkZ2VSZXF1aXJlbWVudCkge1xuICAgICAgICAgICAgbmV3S25vd2xlZGdlUmVxdWlyZW1lbnQgPSB7XG4gICAgICAgICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXG4gICAgICAgICAgICAgIGRhdGVUaW1lOiBjdCgpLFxuICAgICAgICAgICAgICBuYW1lOiBjci5odG1sLFxuICAgICAgICAgICAgICBncmFkZVN0ZXA6IGNyLmdyYWRlU3RlcCxcbiAgICAgICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAga25vd2xlZGdlUmVxdWlyZW1lbnRzLnB1c2gobmV3S25vd2xlZGdlUmVxdWlyZW1lbnQpO1xuXG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICBjaGFuZ2U6IFwiTnl0dCBrdW5za2Fwc2tyYXYgZsO2ciBiZXR5Z2V0IFwiICsgY3IuZ3JhZGVTdGVwLFxuICAgICAgICAgICAgICBjb250ZW50OiBjci5odG1sLFxuICAgICAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xuICAgICAgICAgICAgICAgIHIuYWRkKFwia25vd2xlZGdlLXJlcXVpcmVtZW50c1wiLCBuZXdLbm93bGVkZ2VSZXF1aXJlbWVudCk7XG4gICAgICAgICAgICAgICAgci5saW5rKFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwia25vd2xlZGdlLXJlcXVpcmVtZW50c1wiLCBuZXdLbm93bGVkZ2VSZXF1aXJlbWVudC5pZCwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xuICAgICAgICAgICAgICAgIHIubGluayhcImNvdXJzZXNcIiwgbmV3Q291cnNlLmlkLCBcImtub3dsZWRnZS1yZXF1aXJlbWVudHNcIiwgbmV3S25vd2xlZGdlUmVxdWlyZW1lbnQuaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZWdpc3RlciB0aGUgb3JkZXIgaW4gd2hpY2ggdGhpcyBrbm93bGVkZ2UgcmVxdWlyZW1lbnQgYXBwZWFyZWQgaW4gdGhlIFhNTDpcbiAgICAgICAgICBuZXdDb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIucHVzaChuZXdLbm93bGVkZ2VSZXF1aXJlbWVudC5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQnVpbGQga25vd2xlZGdlIG1hdHJpeFxuXG4gICAgICAgIC8vIExpbmsgZGlyZWN0bHkgZnJvbSBjb3Vyc2UgdGVtcGxhdGUgdG8gYWxsIGFiaWxpdGllcyB0aGF0IHRoZSBzdWJqZWN0IGhhczpcbiAgICAgICAgZm9yIChjb25zdCBhIG9mIHN1YmplY3RBYmlsaXRpZXMpIHtcbiAgICAgICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgbXV0YXRpb25zOiByID0+IHtcbiAgICAgICAgICAgICAgci5saW5rKFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwiYWJpbGl0aWVzXCIsIGEuaWQsIFwiYWJpbGl0aWVzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtjaGFuZ2VzLCBzdWJqZWN0VG9JbXBvcnR9O1xuICB9XG5cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMucHJvcHMub25DYW5jZWwoKTtcbiAgfVxuXG4gIGFzeW5jIGltcG9ydCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNXb3JraW5nOiB0cnVlLCBpc0ltcG9ydGluZzogdHJ1ZSB9KTtcbiAgICBjb25zdCBhbGxNdXRhdGlvbnMgPSB0aGlzLnN0YXRlLmNoYW5nZXMubWFwKGNoYW5nZSA9PiBjaGFuZ2UubXV0YXRpb25zKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuZG8ociA9PiB7XG4gICAgICAgIGFsbE11dGF0aW9ucy5mb3JFYWNoKG11dCA9PiBtdXQocikpO1xuICAgICAgfSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1dvcmtpbmc6IGZhbHNlLCBpc0ltcG9ydGluZzogZmFsc2UgfSk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25JbXBvcnRTdWNjZXNzKHRoaXMucHJvcHMuc3ViamVjdC5uYW1lKTtcbiAgfVxuXG4gIGZpeEwoaHRtbDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGh0bWw7Ly8ucmVwbGFjZSgnPGwgZnJvbWF0PVwiT0xcIj4nKVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtzdWJqZWN0VG9JbXBvcnR9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7c3ViamVjdH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiA8ZGl2PjxoMT57TGBVcHBsYWRkYXQgw4RtbmUgJHtzdWJqZWN0VG9JbXBvcnQgPyBzdWJqZWN0VG9JbXBvcnQubmFtZSA6ICcnfWB9PC9oMT5cbiAgICAgIHt0aGlzLnN0YXRlLmVycm9yID8gPHA+RmVsOiB7dGhpcy5zdGF0ZS5lcnJvcn08L3A+IDpcbiAgICAgICB0aGlzLnN0YXRlLmlzV29ya2luZyA/IDxwPkFyYmV0YXIuLi48L3A+IDpcbiAgICAgICB0aGlzLnN0YXRlLmlzSW1wb3J0aW5nID8gPHA+SW1wb3J0ZXJhci4uLjwvcD4gOlxuICAgICAgIHRoaXMuc3RhdGUuY2hhbmdlcy5ldmVyeShjID0+ICFjLmNoYW5nZSkgPyAvLyBJbmdhIMOkbmRyaW5nYXIgYXR0IHZpc2EgKGJhcmEgcHNldWRvLcOkbmRyaW5nYXIpXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8cD5LdW5kZSBpbnRlIGZpbm5hIG7DpWdyYSBmw7Zyw6RuZHJpbmdhciBmcsOlbiBiZWZpbnRsaWd0IGRhdGEuIEtsaWNrYSBPSyBmw7ZyIGF0dCBhdmJyeXRhIG9jaCDDpXRlcmfDpS48L3A+XG4gICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5jYW5jZWwoKX0+IE9LIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+IDpcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8dGFibGUgc3R5bGU9e3tib3JkZXI6IFwiMXB4IHNvbGlkIGdyYXlcIiwgcGFkZGluZzogXCIycHhcIiB9fT48dGhlYWQ+PHRyPlxuICAgICAgICAgIDx0aCBjb2xTcGFuPXsyfT5HcmFuc2tuaW5nIGF2IMOkbmRyaW5nYXIgaSBncnVuZC1kYXRhPC90aD5cbiAgICAgICAgPC90cj48dHI+XG4gICAgICAgICAgICA8dGg+w4RuZHJpbmc8L3RoPlxuICAgICAgICAgICAgPHRoPklubmVow6VsbDwvdGg+XG4gICAgICAgICAgPC90cj48L3RoZWFkPjx0Ym9keT5cbiAgICAgICAgICAgIHt0aGlzLnN0YXRlLmNoYW5nZXMuZmlsdGVyKGNoYW5nZSA9PiBjaGFuZ2UuY2hhbmdlKS5tYXAoKGNoYW5nZSxpKSA9PiA8dHIga2V5PXtpfT5cbiAgICAgICAgICAgICAgPHRkIHN0eWxlPXt7cGFkZGluZzogXCIycHhcIn19PntjaGFuZ2UuY2hhbmdlfTwvdGQ+XG4gICAgICAgICAgICAgIDx0ZCBzdHlsZT17e3BhZGRpbmc6IFwiMnB4XCJ9fSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IGNoYW5nZS5jb250ZW50IH19IC8+XG4gICAgICAgICAgICA8L3RyPil9XG4gICAgICAgICAgPC90Ym9keT48L3RhYmxlPlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuY2FuY2VsKCl9IGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzSW1wb3J0aW5nfT5BdmJyeXQ8L2J1dHRvbj5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmltcG9ydCgpfSBkaXNhYmxlZD17dGhpcy5zdGF0ZS5pc0ltcG9ydGluZ30+SW1wb3J0ZXJhPC9idXR0b24+XG4gICAgICAgIDxiciAvPlxuICAgICAgICA8L2Rpdj59IFxuICAgICAgPGJ1dHRvblxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgc2hvd0Z1bGxUZXh0OiAhdGhpcy5zdGF0ZS5zaG93RnVsbFRleHQgfSl9PlxuICAgICAgICB7dGhpcy5zdGF0ZS5zaG93RnVsbFRleHQgP1xuICAgICAgICAgIExgRMO2bGogbmVkYW5gIDpcbiAgICAgICAgICBMYFZpc2EgaGVsYSB0ZXh0ZW4gZnLDpW4gU2tvbHZlcmtldGB9XG4gICAgICA8L2J1dHRvbj5cblxuICAgICAgey8qIFRoZSB0YWJsZSBiZWxvdyBpcyBOT1QganVzdCBmb3Igc2hvdyFcbiAgICAgICAgICBGdW5jdGlvbmFsaXR5IGlzIGRlcGVuZGVudCBvbiBpdHMgZXhpc3RlbmNlIGZvciBpbXBvcnRpbmcgc3R1ZmYgdXNpbmcgalF1ZXJ5IHRvIGNoZXJyeS1waWNrIGRhdGEuICovfSAgICAgICAgICBcbiAgICAgIDx0YWJsZSBzdHlsZT17eyBkaXNwbGF5OiB0aGlzLnN0YXRlLnNob3dGdWxsVGV4dCA/ICcnIDogJ25vbmUnIH19Pjx0Ym9keT48dHI+XG4gICAgICAgIDx0aD5cbiAgICAgICAgICBOYW1uXG4gICAgICAgIDwvdGg+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICB7c3ViamVjdC5uYW1lfVxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj48dHI+XG4gICAgICAgICAgPHRoPlxuICAgICAgICAgICAgw4RtbmVza29kXG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICB7c3ViamVjdC5jb2RlfVxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+PHRyPlxuICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgIFN5ZnRlXG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGQgcmVmPXtlbGVtID0+IHRoaXMucHVycG9zZUVsZW0gPSBlbGVtfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHRoaXMuZml4TChzdWJqZWN0LnB1cnBvc2UpIH19IC8+XG4gICAgICAgIDwvdHI+PHRyPlxuICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgIEt1cnNlclxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAge3N1YmplY3QuY291cnNlcy5tYXAoY291cnNlID0+IDx0YWJsZSBrZXk9e2NvdXJzZS5jb2RlfSByZWY9e2VsZW0gPT4gdGhpcy5jb3Vyc2VzRWxlbXNbY291cnNlLmNvZGVdID0geyBjb3Vyc2UsIGVsZW0gfX0+PHRib2R5PlxuICAgICAgICAgICAgICA8dHI+PHRoPkt1cnNlbnMgbmFtbjwvdGg+PHRkPntjb3Vyc2UubmFtZX08L3RkPjwvdHI+XG4gICAgICAgICAgICAgIDx0cj48dGg+S3Vyc2tvZDwvdGg+PHRkPntjb3Vyc2UuY29kZX08L3RkPjwvdHI+XG4gICAgICAgICAgICAgIDx0cj48dGg+UG/DpG5nPC90aD48dGQ+e2NvdXJzZS5wb2ludHN9PC90ZD48L3RyPlxuICAgICAgICAgICAgICA8dHI+PHRoPkNlbnRyYWx0IGlubmVow6VsbDwvdGg+PHRkIHJlZj17ZWxlbSA9PiB0aGlzLmNlbnRyYWxDb250ZW50RWxlbXMucHVzaChlbGVtKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmZpeEwoY291cnNlLmNlbnRyYWxDb250ZW50KSB9fSAvPjwvdHI+XG4gICAgICAgICAgICAgIHtjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5zb21lKGtyID0+ICFrci5ncmFkZVN0ZXApID8gPHRyPlxuICAgICAgICAgICAgICAgIDx0aD5LdW5za2Fwc2tyYXYgdXRhbiBiZXR5Z3PDpHR0bmluZzwvdGg+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImdyYWRlLXN0ZXAtbm9uZVwiIHJlZj17ZWxlbSA9PiB0aGlzLmtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMucHVzaChlbGVtKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmZpeEwoY291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuZmlsdGVyKHIgPT4gIXIuZ3JhZGVTdGVwKS5tYXAoa3IgPT4ga3IudGV4dCkuam9pbignJykpIH19IC8+XG4gICAgICAgICAgICAgIDwvdHI+IDogdW5kZWZpbmVkfVxuXG4gICAgICAgICAgICAgIHtjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5zb21lKGtyID0+IGtyLmdyYWRlU3RlcCA9PT0nRScpID8gPHRyPlxuICAgICAgICAgICAgICAgIDx0aD5LdW5za2Fwc2tyYXYgQmV0eWcgRTwvdGg+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImdyYWRlLXN0ZXAtRVwiIHJlZj17ZWxlbSA9PiB0aGlzLmtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMucHVzaChlbGVtKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmZpeEwoY291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuZmlsdGVyKHIgPT4gci5ncmFkZVN0ZXAgPT09ICdFJykubWFwKGtyID0+IGtyLnRleHQpLmpvaW4oJycpKSB9fSAvPlxuICAgICAgICAgICAgICA8L3RyPiA6IHVuZGVmaW5lZH1cblxuICAgICAgICAgICAgICB7Y291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuc29tZShrciA9PiBrci5ncmFkZVN0ZXAgPT09J0MnKSA/IDx0cj5cbiAgICAgICAgICAgICAgICA8dGg+S3Vuc2thcHNrcmF2IEJldHlnIEM8L3RoPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJncmFkZS1zdGVwLUNcIiByZWY9e2VsZW0gPT4gdGhpcy5rbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zLnB1c2goZWxlbSl9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5maXhMKGNvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLmZpbHRlcihyID0+IHIuZ3JhZGVTdGVwID09PSAnQycpLm1hcChrciA9PiBrci50ZXh0KS5qb2luKCcnKSkgfX0gLz5cbiAgICAgICAgICAgICAgPC90cj4gOiB1bmRlZmluZWR9XG5cbiAgICAgICAgICAgICAge2NvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLnNvbWUoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSdBJykgPyA8dHI+XG4gICAgICAgICAgICAgICAgPHRoPkt1bnNrYXBza3JhdiBCZXR5ZyBBPC90aD5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZ3JhZGUtc3RlcC1BXCIgcmVmPXtlbGVtID0+IHRoaXMua25vd2xlZGdlUmVxdWlyZW1lbnRFbGVtcy5wdXNoKGVsZW0pfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHRoaXMuZml4TChjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5maWx0ZXIociA9PiByLmdyYWRlU3RlcCA9PT0gJ0EnKS5tYXAoa3IgPT4ga3IudGV4dCkuam9pbignJykpIH19IC8+XG4gICAgICAgICAgICAgIDwvdHI+IDogdW5kZWZpbmVkfVxuXG4gICAgICAgICAgICA8L3Rib2R5PjwvdGFibGU+KX1cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuICAgICAgPC90Ym9keT48L3RhYmxlPlxuICAgIDwvZGl2PlxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMLCBzaG93SW5mbywgY29tcGFyZVByb3AsIGFycmF5VG9Mb29rdXAsIGZsYXR0ZW4gfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IFNrb2x2ZXJrZXRTdWJqZWN0LCBwYXJzZVNrb2x2ZXJrZXRZZWFycywgU2tvbHZlcmtldENvdXJzZSB9IGZyb20gJy4vc2tvbHZlcmtldC1zdWJqZWN0JztcbmltcG9ydCB7IFVwbG9hZGVkU3ViamVjdCB9IGZyb20gJy4vdXBsb2FkZWQtc3ViamVjdCc7XG5leHBvcnQgeyBTaG93U3ViamVjdCB9IGZyb20gJy4vc2hvdy1zdWJqZWN0JztcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IHJlYWRCbG9iQXNUZXh0LCBhbGxvd0NvcHkgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCB7IENvdXJzZUJhbm5lciB9IGZyb20gXCIuLi9jb3Vyc2VzL2NvdXJzZS1iYW5uZXJcIjtcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBsaW5rUHJlZml4OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGd5bW5hc2l1bVN1YmplY3RzOiBTdWJqZWN0W107XG4gIHByaW1hcnlTY2hvb2xTdWJqZWN0czogU3ViamVjdFtdO1xuICBpc0xpc3RpbmdTdWJqZWN0czogYm9vbGVhbjtcbiAgdXBsb2FkZWRTdWJqZWN0OiBTa29sdmVya2V0U3ViamVjdCB8IG51bGw7XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJqZWN0c0lubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNMaXN0aW5nU3ViamVjdHM6IHRydWUsXG4gICAgICBneW1uYXNpdW1TdWJqZWN0czogW10sXG4gICAgICBwcmltYXJ5U2Nob29sU3ViamVjdHM6IFtdLFxuICAgICAgdXBsb2FkZWRTdWJqZWN0OiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmxvYWQoKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgY29uc3Qgc3ViamVjdHMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFN1YmplY3Q+KFwic3ViamVjdHNcIik7XG4gICAgc3ViamVjdHMuc29ydChjb21wYXJlUHJvcChcIm5hbWVcIikpO1xuICAgIGNvbnN0IGd5bW5hc2l1bVN1YmplY3RzID0gc3ViamVjdHMuZmlsdGVyKHMgPT4gcy5zY2hvb2xUeXBlICE9PSAncHJpbWFyeScpO1xuICAgIGNvbnN0IHByaW1hcnlTY2hvb2xTdWJqZWN0cyA9IHN1YmplY3RzLmZpbHRlcihzID0+IHMuc2Nob29sVHlwZSA9PT0gJ3ByaW1hcnknKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgZ3ltbmFzaXVtU3ViamVjdHMsIHByaW1hcnlTY2hvb2xTdWJqZWN0cywgaXNMaXN0aW5nU3ViamVjdHM6IGZhbHNlIH0pO1xuICB9XG5cbiAgYXN5bmMgaGFuZGxlRmlsZVNlbGVjdChldjogUmVhY3QuRHJhZ0V2ZW50PEhUTUxEaXZFbGVtZW50Pikge1xuICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgZmlsZXMgPSBldi5kYXRhVHJhbnNmZXIuZmlsZXM7XG4gICAgY29uc3QgeG1sID0gYXdhaXQgcmVhZEJsb2JBc1RleHQoZmlsZXNbMF0pO1xuICAgIGNvbnN0IGRvYyA9ICQoJC5wYXJzZVhNTCh4bWwpKTtcbiAgICBjb25zdCB0eXBlT2ZTY2hvb2xpbmcgPVxuICAgICAgZG9jLmZpbmQoXCJzdWJqZWN0Pm9yaWdpbmF0b3JUeXBlT2ZTY2hvb2xpbmdcIikudGV4dCgpLnRyaW0oKSB8fFxuICAgICAgZG9jLmZpbmQoXCJzdWJqZWN0PnR5cGVPZlNjaG9vbGluZ1wiKS50ZXh0KCkudHJpbSgpO1xuICAgIGNvbnN0IHNjaG9vbFR5cGU6ICdwcmltYXJ5JyB8ICdneW1uYXNpdW0nID0gdHlwZU9mU2Nob29saW5nID09PSBcIkNPTVBVTFNPUllfU0NIT09MXCIgP1xuICAgICAgJ3ByaW1hcnknIDpcbiAgICAgIHR5cGVPZlNjaG9vbGluZyA9PT0gXCJVUFBFUl9TRUNPTkRBUllfRURVQ0FUSU9OXCIgP1xuICAgICAgICAnZ3ltbmFzaXVtJyA6XG4gICAgICAgIG51bGw7XG5cbiAgICBpZiAoc2Nob29sVHlwZSA9PT0gJ2d5bW5hc2l1bScpIHtcbiAgICAgIGNvbnN0IG1vZGVsOiBTa29sdmVya2V0U3ViamVjdCA9IHtcbiAgICAgICAgbmFtZTogZG9jLmZpbmQoXCJzdWJqZWN0Pm5hbWVcIikudGV4dCgpLnRyaW0oKSxcbiAgICAgICAgY29kZTogZG9jLmZpbmQoXCJzdWJqZWN0PmNvZGVcIikudGV4dCgpLnRyaW0oKSxcbiAgICAgICAgcHVycG9zZTogZG9jLmZpbmQoXCJzdWJqZWN0PnB1cnBvc2VcIikudGV4dCgpLnRyaW0oKSxcbiAgICAgICAgY291cnNlczogW10sXG4gICAgICAgIHNjaG9vbFR5cGU6ICdneW1uYXNpdW0nXG4gICAgICB9O1xuICAgICAgY29uc3QgY291cnNlcyA9IGRvYy5maW5kKFwic3ViamVjdD5jb3Vyc2VzXCIpO1xuICAgICAgZm9yIChsZXQgaT0wOyBpPGNvdXJzZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgY291cnNlID0gJChjb3Vyc2VzW2ldKTtcbiAgICAgICAgY29uc3Qga25vd25sZWRnZVJlcXVpcmVtZW50cyA9IFtdLnNsaWNlLmNhbGwoY291cnNlLmZpbmQoXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIikpXG4gICAgICAgICAgLm1hcChyID0+ICh7XG4gICAgICAgICAgICBncmFkZVN0ZXA6ICQocikuZmluZCgnZ3JhZGVTdGVwJykudGV4dCgpLnRyaW0oKSxcbiAgICAgICAgICAgIHRleHQ6ICQocikuZmluZCgndGV4dCcpLnRleHQoKS50cmltKClcbiAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbW9kZWwuY291cnNlcy5wdXNoKHtcbiAgICAgICAgICBuYW1lOiBjb3Vyc2UuZmluZChcIm5hbWVcIikudGV4dCgpLnRyaW0oKSxcbiAgICAgICAgICBjb2RlOiBjb3Vyc2UuZmluZChcImNvZGVcIikudGV4dCgpLnRyaW0oKSxcbiAgICAgICAgICBjZW50cmFsQ29udGVudDogY291cnNlLmZpbmQoXCJjZW50cmFsQ29udGVudFwiKS50ZXh0KCkudHJpbSgpLFxuICAgICAgICAgIHBvaW50czogcGFyc2VJbnQoY291cnNlLmZpbmQoXCJwb2ludFwiKS50ZXh0KCkudHJpbSgpKSxcbiAgICAgICAgICBrbm93bmxlZGdlUmVxdWlyZW1lbnRzLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U3RhdGUoe3VwbG9hZGVkU3ViamVjdDogbW9kZWx9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY2VudHJhbENvbnRlbnRzID0gZmxhdHRlbihBcnJheS5mcm9tKGRvYy5maW5kKFwic3ViamVjdD5jZW50cmFsQ29udGVudFwiKSlcbiAgICAgICAgLm1hcChjYyA9PiB7XG4gICAgICAgICAgY29uc3QgeWVhciA9ICQoY2MpLmZpbmQoJ3llYXInKS50ZXh0KCkudHJpbSgpIGFzIHN0cmluZztcbiAgICAgICAgICBjb25zdCB0eXBlT2ZDZW50cmFsQ29udGVudCA9ICQoY2MpLmZpbmQoJ3R5cGVPZkNlbnRyYWxDb250ZW50JykudGV4dCgpLnRyaW0oKSBhcyBzdHJpbmc7XG5cbiAgICAgICAgICBpZiAodHlwZU9mQ2VudHJhbENvbnRlbnQpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCB5ZXQgc3VwcG9ydCBtdWx0aXBsZSB0eXBlcyBvZiBjZW50cmFsIGNvbnRlbnQuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgKExgw4RtbmV0IGlubmVow6VsbGVyIGZsZXJhIHBhcmFsbGVsbGEgdHlwZXIgYXYgY2VudHJhbHQgaW5uZWjDpWxsLiBEZXR0YSBzdMO2ZHMgw6RubnUgaW50ZS5gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBzdGFkaXVtcyA9IHBhcnNlU2tvbHZlcmtldFllYXJzKHllYXIpO1xuICAgICAgICAgIGNvbnN0IGNlbnRyYWxDb250ZW50c0ZvckVhY2hTdGFkaXVtID0gc3RhZGl1bXMubWFwKCBzdGFkaXVtID0+ICh7XG4gICAgICAgICAgICB5ZWFyOiBzdGFkaXVtLFxuICAgICAgICAgICAgdGV4dDogJChjYykuZmluZCgndGV4dCcpLnRleHQoKS50cmltKCkgYXMgc3RyaW5nXG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIHJldHVybiBjZW50cmFsQ29udGVudHNGb3JFYWNoU3RhZGl1bTtcbiAgICAgICAgfSkpO1xuXG4gICAgICBjb25zdCBrbm93bGVkZ2VSZXF1aXJlbWVudHMgPSBmbGF0dGVuKEFycmF5LmZyb20oZG9jLmZpbmQoXCJzdWJqZWN0Pmtub3dsZWRnZVJlcXVpcmVtZW50XCIpKVxuICAgICAgICAubWFwKGtyID0+IHtcbiAgICAgICAgICBjb25zdCB5ZWFyID0gJChrcikuZmluZCgneWVhcicpLnRleHQoKS50cmltKCk7XG5cbiAgICAgICAgICBjb25zdCB0eXBlT2ZSZXF1aXJlbWVudCA9ICQoa3IpLmZpbmQoJ3R5cGVPZlJlcXVpcmVtZW50JykudGV4dCgpLnRyaW0oKSBhcyBzdHJpbmc7XG4gICAgICAgICAgaWYgKHR5cGVPZlJlcXVpcmVtZW50KSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgeWV0IHN1cHBvcnQgbXVsdGlwbGUgdHlwZXMgb2Yga25vd2xlZGdlIHJlcXVpcmVtZW50LlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yIChMYMOEbW5ldCBpbm5laMOlbGxlciBmbGVyYSBwYXJhbGxlbGxhIHR5cGVyIGF2IGt1bnNrYXBza3Jhdi4gRGV0dGEgc3TDtmRzIMOkbm51IGludGUuYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHBhcnNlU2tvbHZlcmtldFllYXJzKHllYXIpLm1hcChzdGFkaXVtID0+ICh7XG4gICAgICAgICAgICB5ZWFyOiBzdGFkaXVtLFxuICAgICAgICAgICAgdGV4dDogJChrcikuZmluZCgndGV4dCcpLnRleHQoKS50cmltKCksXG4gICAgICAgICAgICBncmFkZVN0ZXA6ICQoa3IpLmZpbmQoJ2dyYWRlU3RlcCcpLnRleHQoKS50cmltKClcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0pKTtcbiAgICAgIFxuICAgICAgY29uc3QgY2VudHJhbENvbnRlbnRzQnlTdGFkaXVtID0gYXJyYXlUb0xvb2t1cChjZW50cmFsQ29udGVudHMsIGNjID0+IGNjLnllYXIpO1xuICAgICAgY29uc3Qga25vd2xlZGdlUmVxdWlyZW1lbnRzQnlTdGFkaXVtID0gYXJyYXlUb0xvb2t1cChrbm93bGVkZ2VSZXF1aXJlbWVudHMsIGtyID0+IGtyLnllYXIpO1xuXG4gICAgICBjb25zdCBzdWJqZWN0TmFtZSA9IGRvYy5maW5kKFwic3ViamVjdD5uYW1lXCIpLnRleHQoKS50cmltKCk7XG4gICAgICBjb25zdCBzdWJqZWN0Q29kZSA9IGRvYy5maW5kKFwic3ViamVjdD5jb2RlXCIpLnRleHQoKS50cmltKCk7XG4gICAgICBjb25zdCBzdWJqZWN0UHVycG9zZSA9IGRvYy5maW5kKFwic3ViamVjdD5wdXJwb3NlXCIpLnRleHQoKS50cmltKCk7XG4gICAgICAvKlxuXG4gICAgICAgIFByb2JsZW1hdGljIHdoZW4gdGhlIGZvbGxvd2luZyB0YWdzIGFyZSBwcmVzZW50OlxuXG4gICAgICAgIDx0eXBlT2ZSZXF1aXJlbWVudD5cbiAgICAgICAgICBXSVRISU5fU1RVREVOVF9DSE9JQ0VfQ0hJTkVTRVxuICAgICAgICA8L3R5cGVPZlJlcXVpcmVtZW50PlxuICAgICAgICA8dHlwZU9mQ2VudHJhbENvbnRlbnQ+XG4gICAgICAgICAgV0lUSElOX0xBTkdVQUdFX0NIT0lDRVxuICAgICAgICA8L3R5cGVPZkNlbnRyYWxDb250ZW50PlxuICAgICAgKi9cblxuICAgICAgY29uc3QgY291cnNlc0J5U3RhZGl1bTogU2tvbHZlcmtldENvdXJzZVtdID0gKFsnMS0zJywnNC02JywnNy05J10gYXMgQXJyYXk8JzEtMycgfCAnNC02JyB8ICc3LTknPilcbiAgICAgICAgLm1hcChzdGFkaXVtID0+ICh7XG4gICAgICAgICAgbmFtZTogc3ViamVjdE5hbWUrJyAnK3N0YWRpdW0sXG4gICAgICAgICAgY29kZTogc3ViamVjdENvZGUrJ3wnK3N0YWRpdW0sXG4gICAgICAgICAgcG9pbnRzOiAwLFxuICAgICAgICAgIHllYXI6IHN0YWRpdW0sXG4gICAgICAgICAgY2VudHJhbENvbnRlbnQ6IChjZW50cmFsQ29udGVudHNCeVN0YWRpdW1bc3RhZGl1bV18fFtdKS5tYXAoY2MgPT4gY2MudGV4dCkuam9pbignXFxuJyksXG4gICAgICAgICAga25vd25sZWRnZVJlcXVpcmVtZW50czogKGtub3dsZWRnZVJlcXVpcmVtZW50c0J5U3RhZGl1bVtzdGFkaXVtXXx8W10pLm1hcCgoe2dyYWRlU3RlcCwgdGV4dH0pID0+ICh7Z3JhZGVTdGVwLCB0ZXh0fSkpXG4gICAgICAgIH0pKTtcblxuICAgICAgY29uc3QgbW9kZWw6IFNrb2x2ZXJrZXRTdWJqZWN0ID0ge1xuICAgICAgICBuYW1lOiBzdWJqZWN0TmFtZSxcbiAgICAgICAgY29kZTogc3ViamVjdENvZGUsXG4gICAgICAgIHB1cnBvc2U6IHN1YmplY3RQdXJwb3NlLFxuICAgICAgICBzY2hvb2xUeXBlOiAncHJpbWFyeScsXG4gICAgICAgIGNvdXJzZXM6IGNvdXJzZXNCeVN0YWRpdW1cbiAgICAgIH07XG4gICAgICB0aGlzLnNldFN0YXRlKHt1cGxvYWRlZFN1YmplY3Q6IG1vZGVsfSk7XG4gICAgfVxuXG4gICAgXG4gIH1cblxuICBvbkltcG9ydFN1Y2Nlc3Moc3ViamVjdCkge1xuICAgICBzaG93SW5mbyhMYEltcG9ydGVuIGF2ICR7c3ViamVjdH0gbHlja2FkZXNgKTtcbiAgICAgdGhpcy5zZXRTdGF0ZSh7dXBsb2FkZWRTdWJqZWN0OiBudWxsfSk7XG4gICAgIHRoaXMubG9hZCgpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtsaW5rUHJlZml4fSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICB7dGhpcy5zdGF0ZS51cGxvYWRlZFN1YmplY3QgP1xuICAgICAgPFVwbG9hZGVkU3ViamVjdFxuICAgICAgICBvbkNhbmNlbD17KCk9PnRoaXMuc2V0U3RhdGUoe3VwbG9hZGVkU3ViamVjdDogbnVsbH0pfVxuICAgICAgICBvbkltcG9ydFN1Y2Nlc3M9e3N1YmplY3QgPT4gdGhpcy5vbkltcG9ydFN1Y2Nlc3Moc3ViamVjdCl9XG4gICAgICAgIHN1YmplY3Q9e3RoaXMuc3RhdGUudXBsb2FkZWRTdWJqZWN0fSAvPlxuICAgIDogdGhpcy5zdGF0ZS5pc0xpc3RpbmdTdWJqZWN0cyA/XG4gICAgICA8ZGl2PjxwPjxTcGlubmVyLz5WYXIgZ29kIHbDpG50YSBtZWRhbiDDpG1uZW4gaMOkbXRhcy4uLjwvcD48L2Rpdj4gOlxuICAgICAgPGRpdj5cbiAgICAgICAgPGgyPntMYEd5bW5hc2llw6RtbmVuYH08L2gyPlxuICAgICAgICA8dWw+e3RoaXMuc3RhdGUuZ3ltbmFzaXVtU3ViamVjdHMubWFwKHMgPT5cbiAgICAgICAgICA8bGkga2V5PXtzLmlkfSBjbGFzc05hbWU9e3MucHVibGlzaGFibGUgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIn0+XG4gICAgICAgICAgICA8TGluayB0bz17bGlua1ByZWZpeCArIHMuaWR9PntzLm5hbWV9PC9MaW5rPlxuICAgICAgICAgIDwvbGk+KX1cbiAgICAgICAgPC91bD5cbiAgICAgICAgPGgyPntMYEdydW5kc2tvbGXDpG1uZW5gfTwvaDI+XG4gICAgICAgIDx1bD57dGhpcy5zdGF0ZS5wcmltYXJ5U2Nob29sU3ViamVjdHMubWFwKHMgPT5cbiAgICAgICAgICA8bGkga2V5PXtzLmlkfSBjbGFzc05hbWU9e3MucHVibGlzaGFibGUgPyBcImNvbXBsZXRlXCIgOiBcImluY29tcGxldGVcIn0+XG4gICAgICAgICAgICA8TGluayB0bz17bGlua1ByZWZpeCArIHMuaWR9PntzLm5hbWV9PC9MaW5rPlxuICAgICAgICAgIDwvbGk+KX1cbiAgICAgICAgPC91bD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wLXpvbmVcIiBvbkRyYWdPdmVyPXthbGxvd0NvcHl9IG9uRHJvcD17ZXY9PnRoaXMuaGFuZGxlRmlsZVNlbGVjdChldil9PlxuICAgICAgICAgIERyb3BwYSBTdWJqZWN0LWZpbCBow6RyIGZyw6VuIHNrb2x2ZXJrZXQgKEjDpG10YXMgZnLDpW4gPGEgaHJlZj1cImh0dHA6Ly9vcGVuZGF0YS5za29sdmVya2V0LnNlXCIgdGFyZ2V0PVwic2tvbHZlcmtldFwiPm9wZW5kYXRhLnNrb2x2ZXJrZXQuc2U8L2E+KVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIH08L2Rpdj5cbiAgfVxufVxuIiwidmFyIG1hcCA9IHtcblx0XCIuL2VuLVNHXCI6IDgyLFxuXHRcIi4vZW4tU0cuanNcIjogODIsXG5cdFwiLi9lbi1hdVwiOiA4Myxcblx0XCIuL2VuLWF1LmpzXCI6IDgzLFxuXHRcIi4vZW4tY2FcIjogODQsXG5cdFwiLi9lbi1jYS5qc1wiOiA4NCxcblx0XCIuL2VuLWdiXCI6IDg1LFxuXHRcIi4vZW4tZ2IuanNcIjogODUsXG5cdFwiLi9lbi1pZVwiOiA4Nixcblx0XCIuL2VuLWllLmpzXCI6IDg2LFxuXHRcIi4vZW4taWxcIjogODcsXG5cdFwiLi9lbi1pbC5qc1wiOiA4Nyxcblx0XCIuL2VuLW56XCI6IDg4LFxuXHRcIi4vZW4tbnouanNcIjogODgsXG5cdFwiLi9zdlwiOiA4OSxcblx0XCIuL3N2LmpzXCI6IDg5XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMTMyOyIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IHVzZXJzIH0gZnJvbSAnLi9kYXRhL3VzZXJzJztcbmltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcgfSBmcm9tICcuLi91dGlscy9xdWVyeS1zdHJpbmcnO1xuXG5jb25zdCB1c2VybmFtZSA9IHBhcnNlUXVlcnlTdHJpbmcgKGxvY2F0aW9uLnNlYXJjaCkudXNlcjtcbmlmICh1c2VybmFtZSkge1xuICBjb25zdCB1c2VyID0gdXNlcnMuZmluZCh1ID0+IHUudXNlcm5hbWUgPT09IHVzZXJuYW1lKTtcbiAgaWYgKHVzZXIpIHtcbiAgICBlbnYuY3VycmVudFVzZXIgPSB1c2VyO1xuICB9XG59XG5cbmNvbnN0IHsgcm9sZSwgc2Nob29sIH0gPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCk7XG5pZiAoZW52LmN1cnJlbnRVc2VyKSB7XG4gIGlmIChyb2xlKSB7XG4gICAgZW52LmN1cnJlbnRVc2VyLnJvbGVzID0gcm9sZS5zcGxpdCgnLCcpO1xuICB9XG4gIGlmIChzY2hvb2wpIHtcbiAgICBlbnYuY3VycmVudFVzZXIuc2Nob29sID0gc2Nob29sO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge0VkaXRTY2hvb2x9IGZyb20gJy4vZWRpdC1zY2hvb2wnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdHlwZTogJ2d5bW5hc2l1bScgfCAncHJpbWFyeSdcbiAgZmVlZGJhY2tVcmw6IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IE5ld1NjaG9vbCA9IChwcm9wczogUHJvcHMpPT48RWRpdFNjaG9vbFxuICB0aXRsZT17TGBMw6RnZyB0aWxsIHNrb2xhYH1cbiAgdHlwZT17cHJvcHMudHlwZX1cbiAgZmVlZGJhY2tVcmw9e3Byb3BzLmZlZWRiYWNrVXJsfSAvPjtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwsIHNob3dJbmZvLCBjb21wYXJlUHJvcCwgYXJyYXlUb0xvb2t1cCwgZmxhdHRlbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgU2tvbHZlcmtldFN1YmplY3QsIFNrb2x2ZXJrZXRDb3Vyc2UsIHBhcnNlU2tvbHZlcmtldFllYXJzIH0gZnJvbSAnLi9za29sdmVya2V0LXN1YmplY3QnO1xuaW1wb3J0IHsgVXBsb2FkZWRTdWJqZWN0IH0gZnJvbSAnLi91cGxvYWRlZC1zdWJqZWN0JztcbmV4cG9ydCB7IFNob3dTdWJqZWN0IH0gZnJvbSAnLi9zaG93LXN1YmplY3QnO1xuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBMaW5rLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgcmVhZEJsb2JBc1RleHQsIGFsbG93Q29weSB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4uL2NvdXJzZXMvY291cnNlLWJhbm5lclwiO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zcGlubmVyXCI7XG5pbXBvcnQgeyBTdWJqZWN0c0lubmVyIH0gZnJvbSAnLi9zdWJqZWN0cy1pbm5lcic7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGZlZWRiYWNrVXJsOiBzdHJpbmdcbn1cblxuZXhwb3J0IGNsYXNzIFN1YmplY3RzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNMaXN0aW5nU3ViamVjdHM6IHRydWUsXG4gICAgICBwcmltYXJ5U2Nob29sU3ViamVjdHM6IFtdLFxuICAgICAgdXBsb2FkZWRTdWJqZWN0OiBudWxsXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPGRpdj48Q291cnNlQmFubmVyXG4gICAgICB0aXRsZT17TGDDhG1uZW5gfVxuICAgICAgYWN0aXZlUGFnZT1cInN1YmplY3RzXCJcbiAgICAgIHJvdXRlcz17e2ZlZWRiYWNrOiB0aGlzLnByb3BzLmZlZWRiYWNrVXJsfX1cbiAgICAgLz5cbiAgICAgPFN1YmplY3RzSW5uZXIgbGlua1ByZWZpeD1cIi9zdWJqZWN0cy9cIiAvPlxuICAgIDwvZGl2PlxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1Jlc291cmNlfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQge0xpbmt9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHtJQ291cnNlRWRpdG9ySG9zdH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3QnO1xuaW1wb3J0IHtFZGl0UmVzb3VyY2V9IGZyb20gJy4uL21vZGFsLXBhZ2VzL2VkaXQtcmVzb3VyY2UnO1xuaW1wb3J0IHsgdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBEcml2ZUJ1dHRvbiB9IGZyb20gJy4uLy4uLy4uL2FwaXMvYnV0dG9ucyc7XG5pbXBvcnQgeyBHb29nbGVQaWNrZXIgfSBmcm9tICcuLi8uLi8uLi9hcGlzL2dvb2dsZS1waWNrZXInO1xuaW1wb3J0IHsgcmVzb2x2ZVB0ciB9IGZyb20gJ2Rucyc7XG5pbXBvcnQgeyBmZWF0dXJlcyB9IGZyb20gJy4uLy4uLy4uL2ZlYXR1cmVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgcmVzb3VyY2VzOiBSZXNvdXJjZVtdO1xuICBvblVwZGF0ZTogKHJlc291cmNlc1VwZGF0ZXMpID0+IHZvaWQ7XG4gIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0O1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuXG59XG5cbmV4cG9ydCBjbGFzcyBFZGl0YWJsZVJlc291cmNlTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZT17fTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7aG9zdCwgb25VcGRhdGUsIHJlc291cmNlc30gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHNob3dHb29nbGVQaWNrZXIgPSBmZWF0dXJlcy5waWNrZXI7XG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cbiAgICAgICAge3Jlc291cmNlcy5tYXAoKHJlc291cmNlLCBpZHgpID0+IFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17aWR4fT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgb25DbGljaz17KCk9Pmhvc3Qub3BlbkRpYWxvZyh7XG4gICAgICAgICAgICAgICAgQ29tcG9uZW50OiBFZGl0UmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlJlZGlnZXJhIHJlc3Vyc1wiLFxuICAgICAgICAgICAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICBvblNhdmU6IGVkaXRlZFJlc291cmNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFJlc291cmNlID0gdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMoZWRpdGVkUmVzb3VyY2UsIGVudi5jdXJyZW50VXNlcik7XG4gICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlKHskc3BsaWNlOiBbW2lkeCwgMSwgdXBkYXRlZFJlc291cmNlXV19KTtcbiAgICAgICAgICAgICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIG9uRGVsZXRlOiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNwbGljZTogW1tpZHgsIDFdXX0pO1xuICAgICAgICAgICAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KX0+PC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICA8YSBocmVmPXtyZXNvdXJjZS51cmx9IHRhcmdldD1cIl9ibGFua1wiID57cmVzb3VyY2UubmFtZX08L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWwtYWxpZ24gc3BhY2VkXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YUl0ZW0gdG9wXCI+XG4gICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpPT5ob3N0Lm9wZW5EaWFsb2coe1xuICAgICAgICAgIENvbXBvbmVudDogRWRpdFJlc291cmNlLFxuICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICB0aXRsZTogXCJMw6RnZyB0aWxsIHJlc3Vyc1wiLFxuICAgICAgICAgICBvblNhdmU6IG5ld1Jlc291cmNlID0+IHtcbiAgICAgICAgICAgICBjb25zdCB1cGRhdGVkUmVzb3VyY2UgPSB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyhuZXdSZXNvdXJjZSwgZW52LmN1cnJlbnRVc2VyKTtcbiAgICAgICAgICAgICBvblVwZGF0ZSh7JHB1c2g6IFt1cGRhdGVkUmVzb3VyY2VdfSlcbiAgICAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pfT48aSBjbGFzc05hbWU9XCJmYSBmYS1wYXBlcmNsaXBcIiBhcmlhLWhpZGRlbj48L2k+IEzDpGdnIHRpbGwgcmVzdXJzPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAge3Nob3dHb29nbGVQaWNrZXIgJiYgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFJdGVtIHRvcFwiPlxuICAgICAgICAgIDxEcml2ZUJ1dHRvbiBsYWJlbD1cIkzDpGdnIHRpbGwgZnLDpW4gRHJpdmVcIiBhY3Rpb249eygpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBpY2tlciA9IG5ldyBHb29nbGVQaWNrZXIoeyB1cGxvYWQ6IHRydWUsIG11bHRpcGxlOiB0cnVlIH0pO1xuXG4gICAgICAgICAgICBwaWNrZXIuc2hvdygpLnRoZW4oZmlsZXMgPT4ge1xuICAgICAgICAgICAgICBmaWxlcy5mb3JFYWNoKChmaWxlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3UmVzb3VyY2U6IFJlc291cmNlID0geyB1cmw6IGZpbGUudXJsLCBuYW1lOiBmaWxlLm5hbWUgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRSZXNvdXJjZSA9IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzKG5ld1Jlc291cmNlLCBlbnYuY3VycmVudFVzZXIpO1xuICAgICAgICAgICAgICAgIG9uVXBkYXRlKHsgJHB1c2g6IFt1cGRhdGVkUmVzb3VyY2VdIH0pXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICB9fSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsIlxuZXhwb3J0IGNsYXNzIENhY2hlZFJlc3BvbnNlPFQ+IHtcbiAgICBwcm9taXNlOiBQcm9taXNlPFQ+IHwgbnVsbDtcbiAgICByZXN1bHQ6IFQgfCBudWxsO1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBxdWVyeWVyOiAoKT0+UHJvbWlzZTxUPikge1xuICAgICAgICB0aGlzLnByb21pc2UgPSBudWxsO1xuICAgICAgICB0aGlzLnJlc3VsdCA9IG51bGw7XG4gICAgfVxuXG4gICAgcXVlcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2UgP1xuICAgICAgICAgICAgdGhpcy5wcm9taXNlIDpcbiAgICAgICAgICAgICh0aGlzLnByb21pc2UgPSB0aGlzLnF1ZXJ5ZXIoKS50aGVuKHggPT4gdGhpcy5yZXN1bHQgPSB4KSk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG51bGw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVGFzayB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xuaW1wb3J0IHsgRWRpdFRhc2sgfSBmcm9tIFwiLi9lZGl0LXRhc2tcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgc2hvcnRQZXJzb25OYW1lRm9ybWF0LCBzaG9ydERhdGVGb3JtYXQgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IFByZXZpZXdhYmxlVGFza0ZpZWxkcyB9IGZyb20gJy4vcHJldmlld2FibGUtdGFzay1maWVsZHMnO1xuaW1wb3J0IHsgU2F2ZU9yQ2FuY2VsQnV0dG9ucyB9IGZyb20gJy4vc2F2ZS1vci1jYW5jZWwtYnV0dG9ucyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNlYXJjaE1hcmtlZElkczogc3RyaW5nW107XG4gIHNlYXJjaFJlc3VsdDogVGFza1tdO1xuICB0YXNrOiBUYXNrO1xuICB3cml0ZUFjY2VzczogYm9vbGVhbjtcbiAgdGFza0N1c3RvbWl6YXRpb246IFBhcnRpYWw8VGFzaz47XG4gIGVkaXRUYXNrOiBFZGl0VGFzaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNlYXJjaFJlc3VsdHMgKHtzZWFyY2hNYXJrZWRJZHMsIHNlYXJjaFJlc3VsdCwgdGFzaywgZWRpdFRhc2ssIHdyaXRlQWNjZXNzLCB0YXNrQ3VzdG9taXphdGlvbn06IFByb3BzKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtcInRhc2stc2VhcmNoLXJlc3VsdFwiICsgKCFlZGl0VGFzay5zdGF0ZS50YXNrICYmICFlZGl0VGFzay5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnQgPyBcIiBmaXhlZFwiIDogXCJcIil9PlxuICAgICAgICB7c2VhcmNoTWFya2VkSWRzLmxlbmd0aCA9PT0gMCA/XG4gICAgICAgICAgICA8aDI+U2FtdGxpZ2EgdXBwZ2lmdGVyIGbDtnIga3Vyc2VuPC9oMj4gOlxuICAgICAgICAgICAgPGgyPlVwcGdpZnRlciBzb20gdMOkY2tlciB2YWxkYSBmaWx0ZXI8L2gyPn1cbiAgICAgICAgPHRhYmxlPjx0Ym9keT5cbiAgICAgICAgICAgIHtzZWFyY2hSZXN1bHRcbiAgICAgICAgICAgICAgLmZpbHRlcih0YXNrID9cbiAgICAgICAgICAgICAgICBmb3VuZFRhc2sgPT4gZm91bmRUYXNrLmlkID09PSB0YXNrLmlkIDpcbiAgICAgICAgICAgICAgICAoKSA9PiB0cnVlKVxuICAgICAgICAgICAgICAubWFwKGZvdW5kVGFzayA9PiA8UmVhY3QuRnJhZ21lbnQga2V5PXtmb3VuZFRhc2suaWR9PlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0YWJJbmRleD17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImNoZWNrQm94XCIgKyAodGFzayAmJiB0YXNrLmlkID09PSBmb3VuZFRhc2suaWQgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9PnRvZ2dsZUNob29zZVRhc2soZm91bmRUYXNrKSB9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+PHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAge2ZvdW5kVGFzay5jb250ZW50ID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIG9uQ2xpY2s9e2V2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2hvb3NlVGFzayhmb3VuZFRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IH0+e2ZvdW5kVGFzay5uYW1lfTwvYT4gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2ZvdW5kVGFzay51cmx9IHRhcmdldD1cIl9ibGFua1wiPntmb3VuZFRhc2submFtZX08L2E+fVxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgICAge3Nob3J0UGVyc29uTmFtZUZvcm1hdChmb3VuZFRhc2subW9kaWZpZWRCeS5uYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgPC90ZD48dGQ+XG4gICAgICAgICAgICAgICAgICAgICAge2ZvdW5kVGFzay5zY2hvb2wgfHwgXCJTdGFuZGFyZFwifVxuICAgICAgICAgICAgICAgICAgICA8L3RkPjx0ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtzaG9ydERhdGVGb3JtYXQoZm91bmRUYXNrLm1vZGlmaWVkRGF0ZSl9XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICB7Lyp0YXNrICYmIHRhc2suaWQgPT09IGZvdW5kVGFzay5pZCAmJiA8dHI+PHRkIGNvbFNwYW49ezR9PlxuICAgICAgICAgICAgICAgICAge2VkaXRUYXNrLnN0YXRlLnByZXZpZXdUYXNrQ29udGVudCA/IFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBlZGl0VGFzay5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnR9fSAvPlxuICAgICAgICAgICAgICAgICAgOiA8UHJldmlld2FibGVUYXNrRmllbGRzXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlQWNjZXNzPXt3cml0ZUFjY2Vzc31cbiAgICAgICAgICAgICAgICAgICAgdGFzaz17dGFza31cbiAgICAgICAgICAgICAgICAgICAgdGFza0N1c3RvbWl6YXRpb249e3Rhc2tDdXN0b21pemF0aW9ufVxuICAgICAgICAgICAgICAgICAgICBlZGl0VGFzaz17ZWRpdFRhc2t9IC8+fVxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPFNhdmVPckNhbmNlbEJ1dHRvbnMgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfSBlZGl0VGFzaz17ZWRpdFRhc2t9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICA8L3RkPjwvdHI+Ki99XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50Pil9XG4gICAgICAgIDwvdGJvZHk+PC90YWJsZT5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxociAvPlxuICAgIDwvZGl2PjtcblxuICBmdW5jdGlvbiB0b2dnbGVDaG9vc2VUYXNrKGZvdW5kVGFzazogVGFzaykge1xuICAgIGlmICh0YXNrICYmIHRhc2suaWQgPT09IGZvdW5kVGFzay5pZCkge1xuICAgICAgZWRpdFRhc2sudXBkYXRlU2VhcmNoTWFya2VkSWRzKHNlYXJjaE1hcmtlZElkcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZmluZERPTU5vZGUoZWRpdFRhc2spLnBhcmVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAgIGVkaXRUYXNrLnNldFN0YXRlUHJvbWlzZWQoeyB0YXNrOiBmb3VuZFRhc2ssIHByZXZpZXdUYXNrQ29udGVudDogbnVsbCB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFRhc2ssIENvdXJzZSB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xuaW1wb3J0IHsgRmVhdHVyZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZmVhdHVyZXNcIjtcbmltcG9ydCB7IEVkaXRUYXNrIH0gZnJvbSBcIi4vZWRpdC10YXNrXCI7XG5pbXBvcnQgUmVhY3REYXRlUGlja2VyIGZyb20gXCJyZWFjdC1kYXRlcGlja2VyXCI7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1Rhc2tNaWdyYXRpb25Cb3h9IGZyb20gXCIuL3Rhc2stbWlncmF0aW9uLWJveFwiO1xuaW1wb3J0IHsgR29vZ2xlUGlja2VyIH0gZnJvbSAnLi4vLi4vLi4vLi4vYXBpcy9nb29nbGUtcGlja2VyJztcbmltcG9ydCB7IERyaXZlQnV0dG9uIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2FwaXMvYnV0dG9uc1wiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB0YXNrOiBUYXNrO1xuICBjb3Vyc2U6IENvdXJzZTtcbiAgd3JpdGVBY2Nlc3M6IGJvb2xlYW47XG4gIGZlYXR1cmVzOiBGZWF0dXJlcztcbiAgZWRpdFRhc2s6IEVkaXRUYXNrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQmFzaWNFZGl0YWJsZVRhc2tGaWVsZHMoe1xuICB0YXNrLFxuICBjb3Vyc2UsXG4gIHdyaXRlQWNjZXNzLFxuICBmZWF0dXJlcyxcbiAgZWRpdFRhc2tcbn06IFByb3BzKSB7XG4gIGNvbnN0IHNob3dHb29nbGVQaWNrZXIgPSBmZWF0dXJlcy5waWNrZXI7XG4gIHJldHVybiA8ZGl2PlxuICAgIDxoMj5VcHBnaWZ0ZW5zIG5hbW4gb2NoIGzDpG5rPC9oMj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICA8cD5VcHBnaWZ0ZW5zIG5hbW46PC9wPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICA8aW5wdXQgYXV0b0ZvY3VzIHR5cGU9XCJ0ZXh0XCIgc2l6ZT17MzV9IHZhbHVlPXt0YXNrLm5hbWV9IGRpc2FibGVkPXshd3JpdGVBY2Nlc3N9IHJlYWRPbmx5PXshd3JpdGVBY2Nlc3N9IG9uQ2hhbmdlPXtldiA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3VGFzayA9IHsgLi4udGFzayB9O1xuICAgICAgICAgIG5ld1Rhc2submFtZSA9IGV2LnRhcmdldC52YWx1ZTtcbiAgICAgICAgICBlZGl0VGFzay5zZXRTdGF0ZVByb21pc2VkKHsgdGFzazogbmV3VGFzayB9KTtcbiAgICAgICAgfSB9IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICA8cD5VUkw6PC9wPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgPGlucHV0IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtXCIgdHlwZT1cInRleHRcIiBzaXplPXszNX0gdmFsdWU9e3Rhc2sudXJsfSBkaXNhYmxlZD17IXdyaXRlQWNjZXNzfSByZWFkT25seT17IXdyaXRlQWNjZXNzfSBvbkNoYW5nZT17ZXYgPT4ge1xuICAgICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB7IC4uLnRhc2sgfTtcbiAgICAgICAgICBuZXdUYXNrLnVybCA9IGV2LnRhcmdldC52YWx1ZTtcbiAgICAgICAgICBlZGl0VGFzay5zZXRTdGF0ZVByb21pc2VkKHsgdGFzazogbmV3VGFzayB9KTtcbiAgICAgICAgfSB9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgIHtzaG93R29vZ2xlUGlja2VyICYmIDxEcml2ZUJ1dHRvbiBsYWJlbD1cIlwiIGFjdGlvbj17KCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcGlja2VyID0gbmV3IEdvb2dsZVBpY2tlcih7IHVwbG9hZDogdHJ1ZSB9KTtcblxuICAgICAgICAgICAgcGlja2VyLnNob3coKS50aGVuKGZpbGVzID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZmlsZXVybCA9IGZpbGVzWzBdLnVybDtcbiAgICAgICAgICAgICAgY29uc3Qgdmlld3VybCA9IGZpbGV1cmwuc3Vic3RyKDAsIGZpbGV1cmwubGFzdEluZGV4T2YoJy8nKSkgKyBcIi92aWV3XCJcbiAgICAgICAgICAgICAgaWYgKHZpZXd1cmwgPT0gdGFzay51cmwpIHJldHVybjtcbiAgICAgICAgICAgICAgY29uc3QgbmV3VGFzayA9IHsgLi4udGFzayB9O1xuICAgICAgICAgICAgICBuZXdUYXNrLnVybCA9IHZpZXd1cmw7XG4gICAgICAgICAgICAgIGVkaXRUYXNrLnNldFN0YXRlUHJvbWlzZWQoeyB0YXNrOiBuZXdUYXNrIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfX0gLz5cbiAgICAgICAgICB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAge3Rhc2subWlncmF0ZWRUZXh0cyAmJiB3cml0ZUFjY2VzcyAmJiA8VGFza01pZ3JhdGlvbkJveCB0YXNrPXt0YXNrfSBjb3Vyc2U9e2NvdXJzZX0gdXBkYXRlTGluaz17KGlkLCBsaW5rT3JVbmxpbmspID0+IGVkaXRUYXNrLnVwZGF0ZUxpbmsoaWQsIGxpbmtPclVubGluayl9IC8+fVxuICAgIDw+PGgyPklubMOkbW5pbmdzdXBwZ2lmdDwvaDI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJjaGVja0JveFwiICsgKGVkaXRUYXNrLmdldFRhc2tQcm9wKFwiYXNzaWdubWVudFwiKSA/IFwiIGNoZWNrZWRcIiA6IFwiXCIpfSBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBlZGl0VGFzay51cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uKFwiYXNzaWdubWVudFwiLCB7ICRzZXQ6ICFlZGl0VGFzay5nZXRUYXNrUHJvcChcImFzc2lnbm1lbnRcIikgfSk7XG4gICAgICAgICAgfSB9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgIDxwPkRlbiBow6RyIHVwcGdpZnRlbiDDpHIgZW4gaW5sw6RtbmluZ3N1cHBnaWZ0PC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAge2VkaXRUYXNrLmdldFRhc2tQcm9wKFwiYXNzaWdubWVudFwiKSAmJiA8PlxuICAgICAgICA8cD5JbmzDpG1uaW5nc2RhdHVtPC9wPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgPFJlYWN0RGF0ZVBpY2tlciBuZXh0TW9udGhCdXR0b25MYWJlbD1cIlwiIHByZXZpb3VzTW9udGhCdXR0b25MYWJlbD1cIlwiIHNob3dXZWVrTnVtYmVycz17dHJ1ZX0gc2VsZWN0ZWQ9e2VkaXRUYXNrLmdldFRhc2tQcm9wKFwiZGVhZGxpbmVcIikgJiYgbW9tZW50KGVkaXRUYXNrLmdldFRhc2tQcm9wKFwiZGVhZGxpbmVcIikpLnRvRGF0ZSgpfSBkYXRlRm9ybWF0PVwiWVlZWS1NTS1kZFwiIGxvY2FsZT17XCJzdlwifSBwb3BwZXJQbGFjZW1lbnQ9XCJib3R0b20tc3RhcnRcIiBvbkNoYW5nZT17dmFsdWUgPT4ge1xuICAgICAgICAgICAgICBlZGl0VGFzay51cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uKFwiZGVhZGxpbmVcIiwgeyAkc2V0OiBtb21lbnQodmFsdWUpLmZvcm1hdChcIllZWVktTU0tRERcIikgfSk7XG4gICAgICAgICAgICB9IH0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAge2VkaXRUYXNrLmdldFRhc2tQcm9wKFwiZGVhZGxpbmVcIikgJiYgPGEgY2xhc3NOYW1lPVwiZGVsZXRlRGF0ZVwiIGhyZWY9XCIjXCIgdGl0bGU9XCJUYSBib3J0IGlubMOkbW5pbmdzZGF0dW1cIiBvbkNsaWNrPXtldiA9PiB7XG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGVkaXRUYXNrLnVwZGF0ZVRhc2tPckN1c3RvbWl6YXRpb24oXCJkZWFkbGluZVwiLCB7ICRzZXQ6IG51bGwgfSk7XG4gICAgICAgICAgICB9IH0+PC9hPn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiY2hlY2tCb3hcIiArICgodGFzay5zZW5kVG9Vcmt1bmQgPT0gbnVsbCA/IHRydWUgOiB0YXNrLnNlbmRUb1Vya3VuZCkgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX0gb25DbGljaz17KCkgPT5cbiAgICAgICAgICAgICAgICBlZGl0VGFzay51cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uKFwic2VuZFRvVXJrdW5kXCIsIHsgJHNldDogdGFzay5zZW5kVG9Vcmt1bmQgPT0gbnVsbCA/IGZhbHNlIDogIXRhc2suc2VuZFRvVXJrdW5kIH0pfT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIDxwPlZlcmlmeSBhc3NpZ25tZW50cyB3aXRoIFVya3VuZDwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPn1cbiAgICA8Lz5cbiAgPC9kaXY+O1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZHRGb3JtYXQgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gVGFza1N0YXR1c0ZyYWdtZW50KHt0YXNrfToge3Rhc2s6IFRhc2t9KSB7XG4gIHJldHVybiA8PlxuICAgICAgPGgzPlVwcGdpZnRlbnMgc3RhdHVzPC9oMz5cblxuICAgICAge3Rhc2suY3JlYXRlZEJ5ICYmIHRhc2suY3JlYXRlZERhdGUgJiYgPHA+XG4gICAgICAgICAgVXBwZ2lmdGVuIHNrYXBhZGVzIHtkdEZvcm1hdCh0YXNrLmNyZWF0ZWREYXRlKX0gYXYgPHN0cm9uZz57dGFzay5jcmVhdGVkQnkubmFtZX08L3N0cm9uZz4uXG4gICAgICA8L3A+fVxuICAgICAge3Rhc2subW9kaWZpZWRCeSAmJiB0YXNrLm1vZGlmaWVkRGF0ZSAmJiA8cD5cbiAgICAgICAgICBVcHBnaWZ0ZW4gcmVkaWdlcmFkZXMgc2VuYXN0IHtkdEZvcm1hdCh0YXNrLm1vZGlmaWVkRGF0ZSl9IGF2IDxzdHJvbmc+e3Rhc2subW9kaWZpZWRCeS5uYW1lfTwvc3Ryb25nPi5cbiAgICAgIDwvcD59XG4gIDwvPjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEVkaXRUYXNrIH0gZnJvbSAnLi9lZGl0LXRhc2snO1xuaW1wb3J0IHsgc2hvd0Vycm9yIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gU2F2ZU9yQ2FuY2VsQnV0dG9ucyh7d3JpdGVBY2Nlc3MsIGVkaXRUYXNrfToge3dyaXRlQWNjZXNzOiBib29sZWFuLCBlZGl0VGFzazogRWRpdFRhc2t9KSB7XG4gIHJldHVybiA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICB7ISFlZGl0VGFzay5wcm9wcy5vbkRlbGV0ZSAmJiA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9eygpID0+IGVkaXRUYXNrLnByb3BzLm9uRGVsZXRlKCl9PlxuICAgICAgICAgIFRhIGJvcnQgZnLDpW4ga3Vyc21vZHVsXG4gICAgICA8L2Rpdj59XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1bGwtcmlnaHRcIj4mbmJzcDs8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCkgPT4gZWRpdFRhc2sucHJvcHMub25DYW5jZWwoKX0+XG4gICAgICAgICAgQXZicnl0XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlXCIgb25DbGljaz17KCkgPT4gZWRpdFRhc2suc2F2ZSgpLmNhdGNoKHNob3dFcnJvcil9PlxuICAgICAgICAgIFNwYXJhXG4gICAgICA8L2Rpdj5cbiAgICAgIHshd3JpdGVBY2Nlc3MgJiYgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlXCIgb25DbGljaz17KCkgPT4gZWRpdFRhc2suY29weVRhc2soKS5jYXRjaChzaG93RXJyb3IpfT5cbiAgICAgICAgICBTa2FwYSBrb3BpYSBhdiBkZW4gaMOkciB1cHBnaWZ0ZW5cbiAgICAgIDwvZGl2Pn1cbiAgPC9SZWFjdC5GcmFnbWVudD47XG59XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBXeXNpd3lnIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcnO1xuaW1wb3J0IGFjdGlvbnNfc3dlZGlzaCBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLXN2JztcbmltcG9ydCB7IEVkaXRUYXNrIH0gZnJvbSAnLi9lZGl0LXRhc2snO1xuXG5leHBvcnQgZnVuY3Rpb24gVGFza0NvbnRlbnRGcmFnbWVudCh7d3JpdGVBY2Nlc3MsIHRhc2ssIGVkaXRUYXNrfToge3dyaXRlQWNjZXNzOiBib29sZWFuLCB0YXNrOiBUYXNrLCBlZGl0VGFzazogRWRpdFRhc2t9KSB7XG4gIHJldHVybiA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICA8aDM+VXBwZ2lmdGVucyBpbm5laMOlbGw8L2gzPlxuICAgICAge3dyaXRlQWNjZXNzICYmIDxwPlxuICAgICAgICAgIE9tIHVwcGdpZnRlbiBpbnRlIGzDpG5rYXIgdGlsbCBuw6Vnb3QgZG9rdW1lbnQga2FuIGR1IGzDpGdnYSBpbm5laMOlbGwgaMOkci5cbiAgICAgIDwvcD59XG4gICAgICA8V3lzaXd5ZyBhY3Rpb25zPXtbXG4gICAgICAgICAgXCJib2xkXCIsXG4gICAgICAgICAgXCJpdGFsaWNcIixcbiAgICAgICAgICBcInVuZGVybGluZVwiLFxuICAgICAgICAgIFwic3RyaWtldGhyb3VnaFwiLFxuICAgICAgICAgIFwiaGVhZGluZzJcIixcbiAgICAgICAgICBcImhlYWRpbmczXCIsXG4gICAgICAgICAgXCJvbGlzdFwiLFxuICAgICAgICAgIFwidWxpc3RcIixcbiAgICAgICAgICBcIm91dGRlbnRcIixcbiAgICAgICAgICBcImluZGVudFwiLFxuICAgICAgICAgIFwibGluZVwiLFxuICAgICAgICAgIFwibGlua1wiLFxuICAgICAgICAgIFwiaW1hZ2VcIlxuICAgICAgXX0gZGVmYXVsdEFjdGlvbnM9e2FjdGlvbnNfc3dlZGlzaH0gcmVhZE9ubHk9eyF3cml0ZUFjY2Vzc30gaHRtbD17dGFzay5jb250ZW50fSBvbkNoYW5nZT17aHRtbCA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3VGFzayA9IHsgLi4udGFzayB9O1xuICAgICAgICAgIG5ld1Rhc2suY29udGVudCA9IGh0bWw7XG4gICAgICAgICAgZWRpdFRhc2suc2V0U3RhdGUoeyB0YXNrOiBuZXdUYXNrIH0pO1xuICAgICAgfSB9IC8+XG4gIDwvUmVhY3QuRnJhZ21lbnQ+O1xufVxuXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgRWRpdFRhc2sgfSBmcm9tICcuL2VkaXQtdGFzayc7XG5pbXBvcnQgeyBFZGl0YWJsZVJlc291cmNlTGlzdCB9IGZyb20gJy4uLy4uL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXJlc291cmNlLWxpc3QnO1xuaW1wb3J0IHsgVGFza0NvbnRlbnRGcmFnbWVudCB9IGZyb20gJy4vdGFzay1jb250ZW50LWZyYWdtZW50JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgd3JpdGVBY2Nlc3M6IGJvb2xlYW47XG4gIHRhc2s6IFRhc2s7XG4gIHRhc2tDdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+O1xuICBlZGl0VGFzazogRWRpdFRhc2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQcmV2aWV3YWJsZVRhc2tGaWVsZHMoe3dyaXRlQWNjZXNzLCB0YXNrLCB0YXNrQ3VzdG9taXphdGlvbiwgZWRpdFRhc2t9OiBQcm9wcykge1xuICByZXR1cm4gPD5cbiAgICA8PlxuICAgICAgPGgzPlVwcGdpZnRlbnMgbMOkcmFuZGVtw6VsPC9oMz5cbiAgICAgIDxkaXY+XG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0VGV4dEJveCBsZWFybmluZy1nb2FsLWJveFwiXG4gICAgICAgICAgZGlzYWJsZWQ9eyF3cml0ZUFjY2Vzc31cbiAgICAgICAgICB2YWx1ZT17dGFzay5sZWFybmluZ0dvYWx9XG4gICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB7IC4uLnRhc2sgfTtcbiAgICAgICAgICAgIG5ld1Rhc2subGVhcm5pbmdHb2FsID0gZXYudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgZWRpdFRhc2suc2V0U3RhdGVQcm9taXNlZCh7IHRhc2s6IG5ld1Rhc2sgfSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICAgIDxiciAvPlxuICAgIDw+XG4gICAgICB7KHdyaXRlQWNjZXNzIHx8ICEhdGFzay5jb250ZW50KSAmJiA8VGFza0NvbnRlbnRGcmFnbWVudFxuICAgICAgICB3cml0ZUFjY2Vzcz17d3JpdGVBY2Nlc3N9XG4gICAgICAgIHRhc2s9e3Rhc2t9XG4gICAgICAgIGVkaXRUYXNrPXtlZGl0VGFza30gLz59XG4gICAgPC8+XG4gICAgPD5cbiAgICAgIHt0YXNrQ3VzdG9taXphdGlvbiAmJiB0YXNrQ3VzdG9taXphdGlvbi5yZXNvdXJjZXMgP1xuICAgICAgICA8aDM+UmVzdXJzZXIgZsO2ciB1cHBnaWZ0ZW4gKG1vZGlmaWVyYWQgZsO2ciBkZW5uYSBrdXJzaW5zdGFucyk8L2gzPiA6XG4gICAgICAgIDxoMz5SZXN1cnNlciBrb3BwbGFkZSB0aWxsIHVwcGdpZnRlbjwvaDM+fVxuXG4gICAgICA8RWRpdGFibGVSZXNvdXJjZUxpc3RcbiAgICAgICAgcmVzb3VyY2VzPXtcbiAgICAgICAgICAodGFza0N1c3RvbWl6YXRpb24gJiYgdGFza0N1c3RvbWl6YXRpb24ucmVzb3VyY2VzKSB8fCB0YXNrLnJlc291cmNlc31cbiAgICAgICAgaG9zdD17ZWRpdFRhc2sucHJvcHMuaG9zdH1cbiAgICAgICAgb25VcGRhdGU9e3Jlc291cmNlVXBkYXRlcyA9PiB7XG4gICAgICAgICAgZWRpdFRhc2sudXBkYXRlVGFza09yQ3VzdG9taXphdGlvbihcInJlc291cmNlc1wiLCByZXNvdXJjZVVwZGF0ZXMpO1xuICAgICAgICB9fSAvPlxuICAgIDwvPlxuICA8Lz47XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQ291cnNlLCBDb3Vyc2VNb2R1bGUsIEFiaWxpdHksIFRhc2ssIERvY3VtZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IEtub3dsZWRnZU1hdHJpeCB9IGZyb20gJy4uLy4uL3N1Yi1jb21wb25lbnRzL2tub3dsZWRnZS1tYXRyaXgnO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcbmltcG9ydCB7IERpYWxvZywgSUNvdXJzZUVkaXRvckhvc3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3RcIjtcbmltcG9ydCB7IGhhc1dyaXRlQWNjZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xuaW1wb3J0IHsgU2VsZWN0UmVsYXRlZERvY3MgfSBmcm9tICcuLi8uLi9zdWItY29tcG9uZW50cy9zZWxlY3QtcmVsYXRlZC1kb2NzJztcbmltcG9ydCB2YWxpZFVybCBmcm9tICd2YWxpZC11cmwnO1xuaW1wb3J0IHsgTCwgc2hvd0Vycm9yIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBDYWNoZWRSZXNwb25zZSB9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9jYWNoZWQtcmVzcG9uc2VcIjtcbmltcG9ydCB7IEVkaXRhYmxlUmVzb3VyY2VMaXN0IH0gZnJvbSBcIi4uLy4uL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXJlc291cmNlLWxpc3RcIjtcbmltcG9ydCB7IGR0Rm9ybWF0LCBzaG9ydERhdGVGb3JtYXQsIHNob3J0UGVyc29uTmFtZUZvcm1hdCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgZnV0dXJlQWJpbGl0aWVzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzXCI7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uLy4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcbmltcG9ydCB7IFd5c2l3eWcgfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zyc7XG5pbXBvcnQgYWN0aW9uc19zd2VkaXNoIGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgRmVhdHVyZXMgfSBmcm9tICcuLi8uLi8uLi8uLi9mZWF0dXJlcyc7XG5pbXBvcnQgeyBTZWFyY2hSZXN1bHRzIH0gZnJvbSAnLi9zZWFyY2gtcmVzdWx0cyc7XG5pbXBvcnQgeyBCYXNpY0VkaXRhYmxlVGFza0ZpZWxkcyB9IGZyb20gJy4vYmFzaWMtZWRpdGFibGUtdGFzay1maWVsZHMnO1xuaW1wb3J0IHsgVGFza1N0YXR1c0ZyYWdtZW50IH0gZnJvbSAnLi90YXNrLXN0YXR1cy1mcmFnbWVudCc7XG5pbXBvcnQgeyBTYXZlT3JDYW5jZWxCdXR0b25zIH0gZnJvbSAnLi9zYXZlLW9yLWNhbmNlbC1idXR0b25zJztcbmltcG9ydCB7IFByZXZpZXdhYmxlVGFza0ZpZWxkcyB9IGZyb20gJy4vcHJldmlld2FibGUtdGFzay1maWVsZHMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBzZWFyY2hNb2RlPzogYm9vbGVhbjtcbiAgdGFzaz86IFRhc2s7XG4gIHRhc2tDdXN0b21pemF0aW9uPzogUGFydGlhbDxUYXNrPjtcbiAgbW9kdWxlOiBDb3Vyc2VNb2R1bGU7XG4gIGNvdXJzZTogQ291cnNlO1xuICBob3N0OiBJQ291cnNlRWRpdG9ySG9zdDtcbiAgaWRzTm90Q292ZXJlZEJ5QW55VGFzazogeyBbaWQ6IHN0cmluZ106IHRydWUgfTtcbiAgb25TYXZlOiAodGFzazogVGFzaywgdGFza0N1c3RvbWl6YXRpb246IFBhcnRpYWw8VGFzaz4pID0+IFByb21pc2U8YW55PjtcbiAgb25TYXZlQ3VzdG9taXphdGlvbjogKHRhc2tDdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+KSA9PiBQcm9taXNlPGFueT47XG4gIG9uUmVwbGFjZTogKHRhc2tJZDogc3RyaW5nLCB0YXNrOiBUYXNrKSA9PiBQcm9taXNlPGFueT47XG4gIG9uQ2FuY2VsOiAoKSA9PiB2b2lkO1xuICBvbkRlbGV0ZTogKCkgPT4gdm9pZDtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgdGl0bGU6IHN0cmluZztcbiAgdGFzazogVGFzaztcbiAgdGFza0N1c3RvbWl6YXRpb246IFBhcnRpYWw8VGFzaz5cbiAgZnV0dXJlQWJpbGl0aWVzT3BlbjogYm9vbGVhbjtcbiAgc2VhcmNoUmVzdWx0PzogVGFza1tdO1xuICBzZWFyY2hNYXJrZWRJZHM/OiBzdHJpbmdbXTtcbiAgaXNTZWFyY2hpbmc6IGJvb2xlYW47XG4gIHByZXZpZXdUYXNrQ29udGVudD86IHN0cmluZzsgLy8gVE9ETzogUmVtb3ZlIHRoaXMgc3RhdGUuIFByZXZpZXdpbmcgY29udGVudCBpcyBub3cgZXF1aXZhbGVudCB0byBjaGVja2luZyBhIGNoZWNrYm94LlxufVxuXG5leHBvcnQgY2xhc3MgRWRpdFRhc2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiBpbXBsZW1lbnRzIERpYWxvZyB7XG4gIHNlYXJjaFJlc3BvbnNlPzogQ2FjaGVkUmVzcG9uc2U8VGFza1tdPjtcbiAgZGlhbG9nRWxlbTogSFRNTERpdkVsZW1lbnQ7XG4gIGZlYXR1cmVzID0gbmV3IEZlYXR1cmVzKCk7XG5cbiAgc2V0U3RhdGVQcm9taXNlZChzdGF0ZTogUGFydGlhbDxTdGF0ZT4pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzdXBlci5zZXRTdGF0ZSgoKSA9PiBzdGF0ZSBhcyBTdGF0ZSwgcmVzb2x2ZSkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGNvbnN0IHdyaXRlQWNjZXNzID0gIXByb3BzLnRhc2sgfHwgaGFzV3JpdGVBY2Nlc3MoZW52LmN1cnJlbnRVc2VyLCBwcm9wcy50YXNrKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdGl0bGU6IHByb3BzLnRhc2sgP1xuICAgICAgICB3cml0ZUFjY2VzcyA/XG4gICAgICAgICAgTGBSZWRpZ2VyYSB1cHBnaWZ0IHRpbGwgXCIke3Byb3BzLm1vZHVsZS5uYW1lfVwiYCA6XG4gICAgICAgICAgTGBWaXNhIHVwcGdpZnQgdGlsbCBcIiR7cHJvcHMubW9kdWxlLm5hbWV9XCJgIDpcbiAgICAgICAgcHJvcHMuc2VhcmNoTW9kZSA/XG4gICAgICAgICAgTGBTw7ZrIG55IHVwcGdpZnQgdGlsbCBcIiR7cHJvcHMubW9kdWxlLm5hbWV9XCJgIDpcbiAgICAgICAgICBMYEzDpGdnIHRpbGwgZWdlbiB1cHBnaWZ0IHRpbGwgXCIke3Byb3BzLm1vZHVsZS5uYW1lfVwiYCxcbiAgICAgIGZ1dHVyZUFiaWxpdGllc09wZW46IGZhbHNlLFxuICAgICAgdGFza0N1c3RvbWl6YXRpb246IHByb3BzLnRhc2tDdXN0b21pemF0aW9uIHx8IHt9LFxuICAgICAgdGFzazogcHJvcHMudGFzayA/XG4gICAgICAgIC8vIEEgdGFzayB3YXMgZ2l2ZW4uIENsb25lIGl0IGFuZCBhZGQgJG1ldGE6ICd1cGRhdGUnIHRvIGl0XG4gICAgICAgIC8vIHRvIGluZm9ybSBFZGl0Q291cnNlLnNhdmUoKSB0byB1cGRhdGUgaXQgb24gaXRzIG93biBlbnRpdHkuXG4gICAgICAgIHtcbiAgICAgICAgICAkbWV0YTogcHJvcHMudGFzay4kbWV0YSB8fCAndXBkYXRlJyxcbiAgICAgICAgICAuLi5wcm9wcy50YXNrXG4gICAgICAgIH0gOiBwcm9wcy5zZWFyY2hNb2RlID8gbnVsbCA6XG4gICAgICAgICAgLy8gTm8gdGFzayB3YXMgZ2l2ZW4uIFNldCAkbWV0YSA9ICdhZGQnIHRvIGluZm9ybSBFZGl0Q291cnNlLnNhdmUoKVxuICAgICAgICAgIC8vIHRvIGFkZCB0aGUgdGFzayB0byB0aGUgdGFza3MgdGFibGUuXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgICAgICRtZXRhOiAnYWRkJyxcbiAgICAgICAgICAgIHRhZ3M6IFtcbiAgICAgICAgICAgICAgYHN1Yjoke3Byb3BzLmNvdXJzZS5zdWJqZWN0Q29kZX1gLFxuICAgICAgICAgICAgICBgY291cnNlOiR7cHJvcHMuY291cnNlLmNvZGV9YFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHNjaG9vbDogIXByb3BzLmNvdXJzZS5pc1RlbXBsYXRlICYmIGVudi5jdXJyZW50VXNlci5zY2hvb2wsXG4gICAgICAgICAgICByZXNvdXJjZXM6IFtdLFxuICAgICAgICAgICAgYWJpbGl0aWVzOiBbXSxcbiAgICAgICAgICAgIGNlbnRyYWxDb250ZW50OiBbXSxcbiAgICAgICAgICAgIGZ1dHVyZUFiaWxpdGllczogW10sXG4gICAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IFtdLFxuICAgICAgICAgICAgbmFtZTogXCJcIixcbiAgICAgICAgICAgIHVybDogXCJcIixcbiAgICAgICAgICAgIGFjbDogcHJvcHMuY291cnNlLmlzVGVtcGxhdGUgPyBbXG4gICAgICAgICAgICAgIGByb2xlOlVTRVI6UmAvLyAoT0sgdG8ga2VlcCBhZnRlciBrdXJzYnlnZy1jaGFuZ2VzKS4gVGVtcGxhdGVzICh3aGljaCB3aWxsIGJlIGVtcHR5ISkgd2lsbCBub3QgaGF2ZSB0YXNrcy4gSWYgdGhleSBoYWQsIG1pZ2h0IG5vdCB0YXNrcyBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG1vZGlmeS4gKEFuIEFETUlOIGNvdWxkIGJlbG9uZyB0byBhIHNjaG9vbCEgT3RoZXIgbm9uLWFkbWlucyBhdCB0aGF0IHNjaG9vbCBzaG91bGQgbm90IGJlIGFibGUgdG8gZWRpdCBpdClcbiAgICAgICAgICAgIF0gOiBbXG4gICAgICAgICAgICAgICAgYHJvbGU6VVNFUjpSYCxcbiAgICAgICAgICAgICAgICBgc2Nob29sUm9sZToke2Vudi5jdXJyZW50VXNlci5zY2hvb2x9L0VNUExPWUVFOlNgXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgc2VhcmNoTWFya2VkSWRzOiBwcm9wcy5zZWFyY2hNb2RlICYmIFtdLFxuICAgICAgc2VhcmNoUmVzdWx0OiBwcm9wcy5zZWFyY2hNb2RlICYmIFtdLFxuICAgICAgaXNTZWFyY2hpbmc6IHByb3BzLnNlYXJjaE1vZGVcbiAgICB9O1xuICAgIGlmIChwcm9wcy5zZWFyY2hNb2RlKSB7XG4gICAgICB0aGlzLnNlYXJjaFJlc3BvbnNlID0gbmV3IENhY2hlZFJlc3BvbnNlKCgpID0+XG4gICAgICAgIGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8VGFzaz4oXCJ0YXNrc1wiLCB7XG4gICAgICAgICAgdGFnczogYGNvdXJzZToke3Byb3BzLmNvdXJzZS5jb2RlfWAsXG4gICAgICAgICAgaW5jbHVkZTogWydrbm93bGVkZ2VSZXF1aXJlbWVudHMnLCAnYWJpbGl0aWVzJywgJ2NlbnRyYWxDb250ZW50J10sXG4gICAgICAgICAgZmxhZ3M6IFsnaW5jbHVkZUlkc09ubHknXVxuICAgICAgICB9KSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2VhcmNoTW9kZSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHsgaXNTZWFyY2hpbmc6IHRydWUgfSk7XG4gICAgICB0cnkge1xuICAgICAgICBhd2FpdCB0aGlzLnNlYXJjaFJlc3BvbnNlLnF1ZXJ5KCk7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNlYXJjaE1hcmtlZElkcyAmJiB0aGlzLnN0YXRlLnNlYXJjaE1hcmtlZElkcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZVNlYXJjaFJlc3VsdCh0aGlzLnN0YXRlLnNlYXJjaE1hcmtlZElkcyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBzaG93RXJyb3IoZXJyKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7IGlzU2VhcmNoaW5nOiBmYWxzZSB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhc3luYyB1cGRhdGVTZWFyY2hNYXJrZWRJZHMoc2VhcmNoTWFya2VkSWRzOiBzdHJpbmdbXSkge1xuICAgIGNvbnN0IHNldFN0YXRlUHJvbWlzZSA9IHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7IHRhc2s6IG51bGwsIHNlYXJjaE1hcmtlZElkcywgcHJldmlld1Rhc2tDb250ZW50OiBudWxsIH0pO1xuICAgIGlmICghdGhpcy5zZWFyY2hSZXNwb25zZS5yZXN1bHQpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2VhcmNoUmVzcG9uc2UucHJvbWlzZTtcbiAgICAgIC8vIFJlZnJlc2ggc2VhcmNoTWFya2VkSWRzIG5vdyBhcyB1c2VyIG1pZ2h0IGhhdmUgY2xpY2tlZCBhcm91bmQgd2hpbGUgd2FpdGluZyBmb3JcbiAgICAgIC8vIHRhc2tzIHRvIGxvYWQuLi5cbiAgICAgIGF3YWl0IHNldFN0YXRlUHJvbWlzZTsgLy8gU28gd2Uga25vdyBzdGF0ZSBoYXMgYmVlbiByZWZsZWN0ZWQuLi5cbiAgICAgIHNlYXJjaE1hcmtlZElkcyA9IHRoaXMuc3RhdGUuc2VhcmNoTWFya2VkSWRzO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVNlYXJjaFJlc3VsdChzZWFyY2hNYXJrZWRJZHMpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlU2VhcmNoUmVzdWx0KHNlYXJjaE1hcmtlZElkczogc3RyaW5nW10pIHtcbiAgICBjb25zdCBhbGxUYXNrc0ZvclN1YmplY3QgPSBhd2FpdCB0aGlzLnNlYXJjaFJlc3BvbnNlLnF1ZXJ5KCk7XG5cbiAgICBjb25zdCBzZWFyY2hSZXN1bHQgPSBhbGxUYXNrc0ZvclN1YmplY3QuZmlsdGVyKHQgPT5cbiAgICAgIHNlYXJjaE1hcmtlZElkcy5ldmVyeShpZCA9PlxuICAgICAgICB0Lmtub3dsZWRnZVJlcXVpcmVtZW50cy5zb21lKGtyID0+IGtyLmlkID09PSBpZCkgfHxcbiAgICAgICAgdC5hYmlsaXRpZXMuc29tZShhID0+IGEuaWQgPT09IGlkKSB8fFxuICAgICAgICB0LmNlbnRyYWxDb250ZW50LnNvbWUoYyA9PiBjLmlkID09PSBpZCkpKTtcblxuICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7XG4gICAgICBzZWFyY2hSZXN1bHRcbiAgICB9KTtcbiAgfVxuXG4gIG9uTWFya0NoYW5nZWQoaWQ6IHN0cmluZywgaXNNYXJrZWQ6IGJvb2xlYW4pIHtcbiAgICBjb25zdCB7IHNlYXJjaE1vZGUgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKHNlYXJjaE1vZGUpIHtcbiAgICAgIGNvbnN0IHsgc2VhcmNoTWFya2VkSWRzIH0gPSB0aGlzLnN0YXRlO1xuICAgICAgdGhpcy51cGRhdGVTZWFyY2hNYXJrZWRJZHMoaXNNYXJrZWQgP1xuICAgICAgICBzZWFyY2hNYXJrZWRJZHMuY29uY2F0KGlkKSA6XG4gICAgICAgIHNlYXJjaE1hcmtlZElkcy5maWx0ZXIoeCA9PiB4ICE9PSBpZCkpLmNhdGNoKHNob3dFcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMudXBkYXRlTGluayhpZCwgaXNNYXJrZWQpO1xuICB9XG5cbiAgdXBkYXRlTGluayhpZDogc3RyaW5nLCBsaW5rT3JVbmxpbms6IGJvb2xlYW4pIHtcbiAgICBjb25zdCB7IGNvdXJzZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHRhc2sgfSA9IHRoaXMuc3RhdGU7XG4gICAgLy8gT25lIG9mIHRoZSBmb2xsb3dpbmcgdGhyZWUgd2lsbCBiZSBmb3VuZDpcbiAgICBjb25zdCBhYmlsaXR5ID0gY291cnNlLmFiaWxpdGllcy5maW5kKGEgPT4gYS5pZCA9PT0gaWQpO1xuICAgIGNvbnN0IGtub3dsZWRnZVJlcXVpcmVtZW50ID0gY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cy5maW5kKHIgPT4gci5pZCA9PT0gaWQpO1xuICAgIGNvbnN0IGNlbnRyYWxDb250ZW50ID0gY291cnNlLmNlbnRyYWxDb250ZW50LmZpbmQoY2MgPT4gY2MuaWQgPT09IGlkKTtcblxuICAgIGNvbnN0IFtjb2xsZWN0aW9uUHJvcCwgaXRlbV0gPVxuICAgICAgYWJpbGl0eSA/XG4gICAgICAgIFtcImFiaWxpdGllc1wiLCBhYmlsaXR5XSA6XG4gICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50ID9cbiAgICAgICAgICBbXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwga25vd2xlZGdlUmVxdWlyZW1lbnRdIDpcbiAgICAgICAgICBjZW50cmFsQ29udGVudCA/XG4gICAgICAgICAgICBbXCJjZW50cmFsQ29udGVudFwiLCBjZW50cmFsQ29udGVudF0gOlxuICAgICAgICAgICAgW251bGwsIG51bGxdO1xuXG4gICAgaWYgKCFjb2xsZWN0aW9uUHJvcCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIkNvdWxkIG5vdCBmaW5kIG1hcmtlZCBpZCBcIiArIGlkKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGVkQ29sbGVjdGlvbjogRG9jdW1lbnRbXSA9IHRhc2tbY29sbGVjdGlvblByb3BdLnNsaWNlKCk7XG4gICAgY29uc3QgY3VycmVudFBvcyA9IHVwZGF0ZWRDb2xsZWN0aW9uLmZpbmRJbmRleChkb2MgPT4gZG9jLmlkID09PSBpZCk7XG4gICAgaWYgKGxpbmtPclVubGluaykge1xuICAgICAgaWYgKGN1cnJlbnRQb3MgPCAwKSB7XG4gICAgICAgIHVwZGF0ZWRDb2xsZWN0aW9uLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyZW50UG9zID49IDApIHtcbiAgICAgICAgdXBkYXRlZENvbGxlY3Rpb24uc3BsaWNlKGN1cnJlbnRQb3MsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHVwZGF0ZWRUYXNrID0geyAuLi50YXNrIH07XG4gICAgdXBkYXRlZFRhc2tbY29sbGVjdGlvblByb3BdID0gdXBkYXRlZENvbGxlY3Rpb247XG5cbiAgICAvLyBDbGVhciBtaWdyYXRlZFRleHRzIGZyb20gdGFzay5cbiAgICAvLyBGaXJzdCBkZWVwIGNsb25lOlxuICAgIGlmICh0YXNrICYmIHRhc2subWlncmF0ZWRUZXh0cykge1xuICAgICAgdXBkYXRlZFRhc2subWlncmF0ZWRUZXh0cyA9IHsuLi50YXNrLm1pZ3JhdGVkVGV4dHN9O1xuICAgICAgaWYgKHRhc2subWlncmF0ZWRUZXh0c1tjb2xsZWN0aW9uUHJvcF0pIHtcbiAgICAgICAgdXBkYXRlZFRhc2subWlncmF0ZWRUZXh0c1tjb2xsZWN0aW9uUHJvcF0gPSB7Li4udGFzay5taWdyYXRlZFRleHRzW2NvbGxlY3Rpb25Qcm9wXX07XG4gICAgICAgIC8vIERlbGV0ZSB0aGUgaWQgd2l0aGluIHRoZSBkZWVwIGNsb25lOlxuICAgICAgICBkZWxldGUgdXBkYXRlZFRhc2subWlncmF0ZWRUZXh0c1tjb2xsZWN0aW9uUHJvcF1baWRdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7XG4gICAgICB0YXNrOiB1cGRhdGVkVGFza1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc2F2ZSgpIHtcbiAgICBjb25zdCB7IHRhc2ssIHRhc2tDdXN0b21pemF0aW9uIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHdyaXRlQWNjZXNzID0gaGFzV3JpdGVBY2Nlc3MoZW52LmN1cnJlbnRVc2VyLCB0YXNrKTtcbiAgICBpZiAod3JpdGVBY2Nlc3MpIHtcbiAgICAgIGlmICghdGFzay51cmwgJiYgIXRhc2suY29udGVudClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKExgVXBwZ2lmdGVuIG3DpXN0ZSBhbnRpbmdlbiBoYSBlbiBVUkwgZWxsZXIgZXR0IGlubmVow6VsbGApO1xuICAgICAgaWYgKHRhc2sudXJsICYmICF2YWxpZFVybC5pc1VyaSh0YXNrLnVybCkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihMYEFuZ2l2ZW4gVVJMICcke3Rhc2sudXJsfScgw6RyIG9naWx0aWcuIERlbiBza2EgYsO2cmphIG1lZCBodHRwOiBlbGxlciBodHRwczpgKTtcbiAgICAgIGlmICh0aGlzLnByb3BzLnRhc2sgJiYgdGhpcy5wcm9wcy50YXNrLmlkICE9PSB0YXNrLmlkKSB7XG4gICAgICAgIC8vIFJlcGxhY2UgZXhpc3RpbmcgdGFzayB3aXRoIGNvcHlcbiAgICAgICAgYXdhaXQgdGhpcy5wcm9wcy5vblJlcGxhY2UodGhpcy5wcm9wcy50YXNrLmlkLCB0YXNrKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFVwZGF0ZSBleGlzdGluZyB0YXNrXG4gICAgICAgIGF3YWl0IHRoaXMucHJvcHMub25TYXZlKHRhc2ssIG51bGwpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5zZWFyY2hNb2RlKSB7XG4gICAgICBhd2FpdCB0aGlzLnByb3BzLm9uU2F2ZSh0YXNrLCB0YXNrQ3VzdG9taXphdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmNvdXJzZS5pc1RlbXBsYXRlICYmIHRhc2suJG1ldGEgPT09ICdhZGQnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTGBEdSBzYWtuYXIgYmVow7ZyaWdoZXQgZsO2ciBhdHQgc3BhcmEgbnlhIHZlcnNpb25lciBhdiB1cHBnaWZ0ZXIgaSBrdXJzbWFsbGVuYCk7XG5cbiAgICAgIGF3YWl0IHRoaXMucHJvcHMub25TYXZlQ3VzdG9taXphdGlvbih0YXNrQ3VzdG9taXphdGlvbik7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgY29weVRhc2soKSB7XG4gICAgY29uc3QgdGFza0NvcHkgPSB7XG4gICAgICAuLi50aGlzLnN0YXRlLnRhc2ssXG4gICAgICAuLi4odGhpcy5zdGF0ZS50YXNrQ3VzdG9taXphdGlvbiB8fCB7fSksXG4gICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgYWNsOiB0aGlzLnByb3BzLmNvdXJzZS5pc1RlbXBsYXRlID8gW1xuICAgICAgICBgcm9sZTpVU0VSOlJgIC8vIChPSyB0byBrZWVwIGJ1dCB0aGlzIGNoZWNrIG1pZ2h0IGJlY29tZSB1bm5lc2Nlc2FyeSBpZiB3ZSB0b3RhbGx5IHJlbW92ZSB0aGUgcG9zc2liaWxpdHkgdG8gZWRpdCB0ZW1wbGF0ZXMpIFRlbXBsYXRlIHRhc2tzIHNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gbW9kaWZ5LiAoQW4gQURNSU4gY291bGQgYmVsb25nIHRvIGEgc2Nob29sISBPdGhlciBub24tYWRtaW5zIGF0IHRoYXQgc2Nob29sIHNob3VsZCBub3QgYmUgYWJsZSB0byBlZGl0IGl0KVxuICAgICAgXSA6IFtcbiAgICAgICAgYHJvbGU6VVNFUjpSYCxcbiAgICAgICAgYHNjaG9vbFJvbGU6JHtlbnYuY3VycmVudFVzZXIuc2Nob29sfS9FTVBMT1lFRTpTYFxuICAgICAgXSxcbiAgICAgIHNjaG9vbDogdGhpcy5wcm9wcy5jb3Vyc2Uuc2Nob29sXG4gICAgfTtcbiAgICB0YXNrQ29weS4kbWV0YSA9ICdhZGQnO1xuXG4gICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHtcbiAgICAgIHRhc2s6IHRhc2tDb3B5LFxuICAgICAgdGl0bGU6IExgUmVkaWdlcmEga29waWVyYWQgdXBwZ2lmdCB0aWxsIFwiJHt0aGlzLnByb3BzLm1vZHVsZS5uYW1lfVwiYCxcbiAgICAgIHRhc2tDdXN0b21pemF0aW9uOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuXG4gIGdldFRhc2tQcm9wPFQgZXh0ZW5kcyBrZXlvZiBUYXNrPih0YXNrUHJvcDogVCkgOiBUYXNrW1RdIHtcbiAgICBjb25zdCB7dGFzaywgdGFza0N1c3RvbWl6YXRpb259ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBjdXN0b21pemF0aW9uID0gdGFza0N1c3RvbWl6YXRpb24gJiYgdGFza0N1c3RvbWl6YXRpb25bdGFza1Byb3BdO1xuICAgIHJldHVybiBjdXN0b21pemF0aW9uICE9PSB1bmRlZmluZWQgP1xuICAgICAgY3VzdG9taXphdGlvbiA6XG4gICAgICB0YXNrW3Rhc2tQcm9wXTtcbiAgfVxuXG4gIHVwZGF0ZVRhc2tPckN1c3RvbWl6YXRpb24gKHRhc2tQcm9wOiBrZXlvZiBUYXNrLCB1cGRhdGVzKSB7XG4gICAgY29uc3Qge3Rhc2ssIHRhc2tDdXN0b21pemF0aW9ufSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qgd3JpdGVBY2Nlc3MgPSB0YXNrICYmIGhhc1dyaXRlQWNjZXNzKGVudi5jdXJyZW50VXNlciwgdGFzayk7XG4gICAgaWYgKHdyaXRlQWNjZXNzICYmICghdGFza0N1c3RvbWl6YXRpb24gfHwgdGFza0N1c3RvbWl6YXRpb25bdGFza1Byb3BdID09PSB1bmRlZmluZWQpKSB7XG4gICAgICBjb25zdCBuZXdUYXNrID0gey4uLnRhc2t9O1xuICAgICAgbmV3VGFza1t0YXNrUHJvcF0gPSB1cGRhdGUodGFza1t0YXNrUHJvcF0sIHVwZGF0ZXMpO1xuICAgICAgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHt0YXNrOiBuZXdUYXNrfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld0N1c3RvbWl6YXRpb24gPSB7Li4udGFza0N1c3RvbWl6YXRpb259O1xuICAgICAgbmV3Q3VzdG9taXphdGlvblt0YXNrUHJvcF0gPSB1cGRhdGUgKFxuICAgICAgICBuZXdDdXN0b21pemF0aW9uW3Rhc2tQcm9wXSB8fCB0YXNrW3Rhc2tQcm9wXSxcbiAgICAgICAgdXBkYXRlc1xuICAgICAgKTtcbiAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7dGFza0N1c3RvbWl6YXRpb246IG5ld0N1c3RvbWl6YXRpb259KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb3Vyc2UsIG1vZHVsZSwgb25DYW5jZWwsIG9uRGVsZXRlLCBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrLCBzZWFyY2hNb2RlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgdGFzaywgdGFza0N1c3RvbWl6YXRpb24sIHRpdGxlLCBzZWFyY2hSZXN1bHQsIHNlYXJjaE1hcmtlZElkcywgaXNTZWFyY2hpbmcgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgbWFya2VkSWRzID0gc2VhcmNoTW9kZSA/XG4gICAgICBzZWFyY2hNYXJrZWRJZHMgOlxuICAgICAgdGFzay5jZW50cmFsQ29udGVudC5tYXAoeCA9PiB4LmlkKVxuICAgICAgICAuY29uY2F0KHRhc2suYWJpbGl0aWVzLm1hcCh4ID0+IHguaWQpKVxuICAgICAgICAuY29uY2F0KHRhc2sua25vd2xlZGdlUmVxdWlyZW1lbnRzLm1hcCh4ID0+IHguaWQpKTtcblxuICAgIGNvbnN0IHdyaXRlQWNjZXNzID0gdGFzayAmJiBoYXNXcml0ZUFjY2VzcyhlbnYuY3VycmVudFVzZXIsIHRhc2spO1xuICAgIGNvbnN0IHRhc2tVcmxWYWxpZCA9IHRhc2sgJiYgdmFsaWRVcmwuaXNVcmkodGFzay51cmwpO1xuICAgIGNvbnN0IHtmZWF0dXJlc30gPSB0aGlzO1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwic3Ytc3BhY2VyLTIwcHh2dCBzdi12ZXJ0aWNhbCBzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi10ZXh0LXBvcnRsZXQgc3YtdXNlLW1hcmdpbnMgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LXRleHQtcG9ydGxldC1jb250ZW50XCI+XG4gICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiaDFcIj57dGl0bGV9PC9oMT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtZmx1aWQtZ3JpZCBzdi1ncmlkLWtzZ3MxMiBzdi1sYXlvdXRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tNlwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxuICAgICAgICAgICAgICAgIDxoMz57c2VhcmNoTW9kZSA/XG4gICAgICAgICAgICAgICAgICBcIkZpbHRyZXJhIHDDpSBrdW5za2Fwc2tyYXZcIiA6IHdyaXRlQWNjZXNzID9cbiAgICAgICAgICAgICAgICAgICAgXCJWw6RsaiBrdW5za2Fwc2tyYXZcIiA6XG4gICAgICAgICAgICAgICAgICAgIFwiS3Vuc2thcHNrcmF2XCJ9PC9oMz5cbiAgICAgICAgICAgICAgICB7c2VhcmNoTW9kZSA/XG4gICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgTWFya2VyYSBkZSBrdW5za2Fwc2tyYXYgc29tIHVwcGdpZnRlbiBtw6VzdGUgdMOkY2thLlxuICAgICAgICAgICAgICAgICAgPC9wPiA6IHdyaXRlQWNjZXNzICYmXG4gICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgTWFya2VyYSBkZSBrdW5za2Fwc2tyYXYgc29tIGRpbiB1cHBnaWZ0IHTDpGNrZXIuXG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDxLbm93bGVkZ2VNYXRyaXhcbiAgICAgICAgICAgICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50cz17Y291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50c31cbiAgICAgICAgICAgICAgICAgIG1hcmtlZElkcz17bWFya2VkSWRzfVxuICAgICAgICAgICAgICAgICAgaWRzVG9NYXJrTm90T2s9e2lkc05vdENvdmVyZWRCeUFueVRhc2t9XG4gICAgICAgICAgICAgICAgICBtYXJrTW9kZT17c2VhcmNoTW9kZSB8fCB3cml0ZUFjY2Vzc31cbiAgICAgICAgICAgICAgICAgIG1pZ3JhdGVkSWRzPXt0YXNrICYmIHRhc2subWlncmF0ZWRUZXh0cyAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMua25vd2xlZGdlUmVxdWlyZW1lbnRzfVxuICAgICAgICAgICAgICAgICAgb25NYXJrQ2hhbmdlZD17dGhpcy5vbk1hcmtDaGFuZ2VkLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxuICAgICAgICAgICAgICA8U2VsZWN0UmVsYXRlZERvY3NcbiAgICAgICAgICAgICAgICBvcHRpb25zPXtjb3Vyc2UuYWJpbGl0aWVzfVxuICAgICAgICAgICAgICAgIHRpdGxlPXt3cml0ZUFjY2VzcyB8fCBzZWFyY2hNb2RlID8gXCJWw6RsaiBmw7ZybcOlZ29yXCIgOiBcIkbDtnJtw6Vnb3JcIn1cbiAgICAgICAgICAgICAgICBtYXJrZWRJZHM9e21hcmtlZElkc31cbiAgICAgICAgICAgICAgICBtYXJrTW9kZT17d3JpdGVBY2Nlc3MgfHwgc2VhcmNoTW9kZX1cbiAgICAgICAgICAgICAgICBtaWdyYXRlZElkcz17dGFzayAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMgJiYgdGFzay5taWdyYXRlZFRleHRzLmFiaWxpdGllc31cbiAgICAgICAgICAgICAgICBvbk1hcmtDaGFuZ2VkPXt0aGlzLm9uTWFya0NoYW5nZWQuYmluZCh0aGlzKX1cbiAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxuICAgICAgICAgICAgICA8U2VsZWN0UmVsYXRlZERvY3NcbiAgICAgICAgICAgICAgICBvcHRpb25zPXtjb3Vyc2UuY2VudHJhbENvbnRlbnR9XG4gICAgICAgICAgICAgICAgdGl0bGU9e3dyaXRlQWNjZXNzIHx8IHNlYXJjaE1vZGUgPyBcIlbDpGxqIGNlbnRyYWx0IGlubmVow6VsbFwiIDogXCJDZW50cmFsdCBpbm5laMOlbGxcIn1cbiAgICAgICAgICAgICAgICBtYXJrZWRJZHM9e21hcmtlZElkc31cbiAgICAgICAgICAgICAgICBtYXJrTW9kZT17d3JpdGVBY2Nlc3MgfHwgc2VhcmNoTW9kZX1cbiAgICAgICAgICAgICAgICBtaWdyYXRlZElkcz17dGFzayAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMgJiYgdGFzay5taWdyYXRlZFRleHRzLmNlbnRyYWxDb250ZW50fVxuICAgICAgICAgICAgICAgIG9uTWFya0NoYW5nZWQ9e3RoaXMub25NYXJrQ2hhbmdlZC5iaW5kKHRoaXMpfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIHshc2VhcmNoTW9kZSAmJiA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+PGRpdiBjbGFzc05hbWU9e1wib3BlbkNsb3NlIGxhcmdlclwiICsgKHRoaXMuc3RhdGUuZnV0dXJlQWJpbGl0aWVzT3BlbiA/IFwiIG9wZW5cIiA6IFwiXCIpfT5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuSGVhZGVyXCIgb25DbGljaz17KCkgPT4gdGhpcy5zZXRTdGF0ZVByb21pc2VkKHsgZnV0dXJlQWJpbGl0aWVzT3BlbjogIXRoaXMuc3RhdGUuZnV0dXJlQWJpbGl0aWVzT3BlbiB9KX0+XG4gICAgICAgICAgICAgICAge3dyaXRlQWNjZXNzID9cbiAgICAgICAgICAgICAgICAgIDxwPlbDpGxqIHl0dGVybGlnYXJlIGFsdGVybmF0aXY8L3A+IDpcbiAgICAgICAgICAgICAgICAgIDxwPll0dGVybGlnYXJlIGFsdGVybmF0aXY8L3A+fVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuQ29udGVudFwiPlxuICAgICAgICAgICAgICAgIDxoND5GcmFtdGlkc2bDtnJtw6Vnb3I8L2g0PlxuXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICB7ZnV0dXJlQWJpbGl0aWVzLm1hcChmYSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gdGFzay5mdXR1cmVBYmlsaXRpZXMuaW5kZXhPZihmYSkgPj0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17ZmF9PlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJjaGVja0JveFwiICsgKHNlbGVjdGVkID8gXCIgY2hlY2tlZFwiIDogXCJcIil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3dyaXRlQWNjZXNzID8gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRUYXNrID0geyAuLi50YXNrIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFRhc2suZnV0dXJlQWJpbGl0aWVzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5mdXR1cmVBYmlsaXRpZXMuZmlsdGVyKGEgPT4gYSAhPSBmYSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLmZ1dHVyZUFiaWxpdGllcy5jb25jYXQoZmEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7IHRhc2s6IHVwZGF0ZWRUYXNrIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IDogdW5kZWZpbmVkfSAvPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+e2ZhfVxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9kaXY+PC9kaXY+fVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LWNvbHVtbi02XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICAgICAgICAgIHtpc1NlYXJjaGluZyAmJiA8cD48U3Bpbm5lciAvPiBMYWRkYXIgdXBwZ2lmdGVyLi4uPC9wPn1cbiAgICAgICAgICAgICAge3NlYXJjaFJlc3VsdCA/IFxuICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgKiBTZWFyY2ggUmVzdWx0cyBGcmFnZW50XG4gICAgICAgICAgICAgICAgICAqIFxuICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8U2VhcmNoUmVzdWx0c1xuICAgICAgICAgICAgICAgICAgc2VhcmNoTWFya2VkSWRzPXtzZWFyY2hNYXJrZWRJZHN9XG4gICAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHQ9e3NlYXJjaFJlc3VsdH1cbiAgICAgICAgICAgICAgICAgIHRhc2s9e3Rhc2t9XG4gICAgICAgICAgICAgICAgICB3cml0ZUFjY2Vzcz17d3JpdGVBY2Nlc3N9XG4gICAgICAgICAgICAgICAgICB0YXNrQ3VzdG9taXphdGlvbj17dGFza0N1c3RvbWl6YXRpb259XG4gICAgICAgICAgICAgICAgICBlZGl0VGFzaz17dGhpc30gLz5cblxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnByZXZpZXdUYXNrQ29udGVudCA/IFxuICAgICAgICAgICAgICAgICAgPGRpdiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogdGhpcy5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnR9fSAvPlxuICAgICAgICAgICAgICAgIDogdGFzayAmJiA8UHJldmlld2FibGVUYXNrRmllbGRzXG4gICAgICAgICAgICAgICAgICB3cml0ZUFjY2Vzcz17d3JpdGVBY2Nlc3N9XG4gICAgICAgICAgICAgICAgICB0YXNrPXt0YXNrfVxuICAgICAgICAgICAgICAgICAgdGFza0N1c3RvbWl6YXRpb249e3Rhc2tDdXN0b21pemF0aW9ufVxuICAgICAgICAgICAgICAgICAgZWRpdFRhc2s9e3RoaXN9IC8+fVxuXG4gICAgICAgICAgICAgICAge3Rhc2sgJiYgPFRhc2tTdGF0dXNGcmFnbWVudCB0YXNrPXt0YXNrfSAvPn1cbiAgICAgICAgICAgICAgPC8+IDogXG5cbiAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICogRWRpdCBUYXNrcyBGcmFnbWVudFxuICAgICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAge3Rhc2sgJiYgPEJhc2ljRWRpdGFibGVUYXNrRmllbGRzXG4gICAgICAgICAgICAgICAgICB0YXNrPXt0YXNrfVxuICAgICAgICAgICAgICAgICAgY291cnNlPXtjb3Vyc2V9XG4gICAgICAgICAgICAgICAgICB3cml0ZUFjY2Vzcz17d3JpdGVBY2Nlc3N9XG4gICAgICAgICAgICAgICAgICBmZWF0dXJlcz17ZmVhdHVyZXN9XG4gICAgICAgICAgICAgICAgICBlZGl0VGFzaz17dGhpc30gLz59XG5cbiAgICAgICAgICAgICAgICB7dGFzayAmJiA8UHJldmlld2FibGVUYXNrRmllbGRzXG4gICAgICAgICAgICAgICAgICB3cml0ZUFjY2Vzcz17d3JpdGVBY2Nlc3N9XG4gICAgICAgICAgICAgICAgICB0YXNrPXt0YXNrfVxuICAgICAgICAgICAgICAgICAgdGFza0N1c3RvbWl6YXRpb249e3Rhc2tDdXN0b21pemF0aW9ufVxuICAgICAgICAgICAgICAgICAgZWRpdFRhc2s9e3RoaXN9IC8+fVxuXG4gICAgICAgICAgICAgICAge3Rhc2sgJiYgPFRhc2tTdGF0dXNGcmFnbWVudCB0YXNrPXt0YXNrfSAvPn1cbiAgICAgICAgICAgICAgPC8+fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7dGFzayAmJiA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XG4gICAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPFNhdmVPckNhbmNlbEJ1dHRvbnMgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfSBlZGl0VGFzaz17dGhpc30gLz5cbiAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PjwvZGl2PlxuICB9XG59XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBUYXNrLCBDb3Vyc2UsIENvdXJzZU1vZHVsZSwgQWJpbGl0eSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEVkaXRUYXNrIH0gZnJvbSAnLi4vbW9kYWwtcGFnZXMvZWRpdC10YXNrJztcbmltcG9ydCB7IElDb3Vyc2VFZGl0b3JIb3N0IH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3QnO1xuaW1wb3J0IHsgdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMgfSBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IGhhc1dyaXRlQWNjZXNzIH0gZnJvbSBcIi4uLy4uLy4uL2FjY2Vzcy1jb250cm9sXCI7XG5pbXBvcnQgeyBTb3J0YWJsZVRhc2tMaXN0LCBUYXNrV2l0aE1ldGFkYXRhIH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3NvcnRhYmxlLXRhc2stbGlzdCc7XG5pbXBvcnQgeyBnZXRPcmRlcmVkRG9jcyB9IGZyb20gJy4uLy4uL2NvdXJzZS1idWlsZGVyLWtzL2xvZ2ljL29yZGVyZWQtcmVxdWlyZW1lbnRzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdGFza0lkczogc3RyaW5nW107XG4gIHRhc2tDdXN0b21pemF0aW9ucz86IHsgW3Rhc2tJZDogc3RyaW5nXTogUGFydGlhbDxUYXNrPiB9XG4gIGNvdXJzZTogQ291cnNlO1xuICBtb2R1bGU6IENvdXJzZU1vZHVsZTtcbiAgaWRzTm90Q292ZXJlZEJ5QW55VGFzazoge1tpZDogc3RyaW5nXTogdHJ1ZX07XG4gIG9uVGFza0FkZGVkOiAodGFzazogVGFzaywgdGFza0N1c3RvbWl6YXRpb24/OiBQYXJ0aWFsPFRhc2s+KSA9PiB2b2lkO1xuICBvblRhc2tVcGRhdGVkOiAodGFzaykgPT4gdm9pZDtcbiAgb25UYXNrQ3VzdG9taXphdGlvblVwZGF0ZWQ6ICh0YXNrSWQsIGN1c3RvbWl6YXRpb24pID0+IHZvaWQ7XG4gIG9uVGFza0RlbGV0ZWQ6IChpZCkgPT4gdm9pZDtcbiAgb25UYXNrUmVwbGFjZWQ6IChpZCwgdGFzaykgPT4gdm9pZDtcbiAgb25UYXNrc1Jlb3JkZXJlZDogKHNvdXJjZTogVGFzaywgdGFyZ2V0OiBUYXNrLCBwbGFjZW1lbnQ6ICdhZnRlcicgfCAnYmVmb3JlJykgPT4gdm9pZFxuICBob3N0OiBJQ291cnNlRWRpdG9ySG9zdDtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcblxufVxuXG5leHBvcnQgY2xhc3MgRWRpdGFibGVUYXNrTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICB9XG5cbiAgb3BlblRhc2tEaWFsb2codGFzazogVGFzaykge1xuICAgIGNvbnN0IHtcbiAgICAgIHRhc2tDdXN0b21pemF0aW9ucyxcbiAgICAgIGNvdXJzZSxcbiAgICAgIGhvc3QsXG4gICAgICBtb2R1bGUsXG4gICAgICB0YXNrSWRzLFxuICAgICAgb25UYXNrQWRkZWQsXG4gICAgICBvblRhc2tVcGRhdGVkLFxuICAgICAgb25UYXNrQ3VzdG9taXphdGlvblVwZGF0ZWQsXG4gICAgICBvblRhc2tEZWxldGVkLFxuICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzayxcbiAgICAgIG9uVGFza1JlcGxhY2VkXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBob3N0Lm9wZW5EaWFsb2coe1xuICAgICAgQ29tcG9uZW50OiBFZGl0VGFzayxcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIHRhc2ssXG4gICAgICAgIHRhc2tDdXN0b21pemF0aW9uOiB0YXNrQ3VzdG9taXphdGlvbnMgJiYgdGFza0N1c3RvbWl6YXRpb25zW3Rhc2suaWRdLFxuICAgICAgICBtb2R1bGUsXG4gICAgICAgIGNvdXJzZSxcbiAgICAgICAgaG9zdCxcbiAgICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzayxcbiAgICAgICAgb25TYXZlOiB0YXNrID0+IHtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkVGFzayA9IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzKHRhc2ssIGVudi5jdXJyZW50VXNlcik7XG4gICAgICAgICAgb25UYXNrVXBkYXRlZCh1cGRhdGVkVGFzayk7XG4gICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xuICAgICAgICB9LFxuICAgICAgICBvblNhdmVDdXN0b21pemF0aW9uOiBjdXN0b21pemF0aW9uID0+IHtcbiAgICAgICAgICBvblRhc2tDdXN0b21pemF0aW9uVXBkYXRlZCh0YXNrLmlkLCBjdXN0b21pemF0aW9uKTtcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRGVsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgb25UYXNrRGVsZXRlZCh0YXNrLmlkKTtcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUmVwbGFjZTogKHRhc2tJZDogc3RyaW5nLCBuZXdUYXNrOiBUYXNrKSA9PiB7XG4gICAgICAgICAgb25UYXNrUmVwbGFjZWQodGFza0lkLCBuZXdUYXNrKTtcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2FuY2VsOiAoKSA9PiBob3N0LmNsb3NlRGlhbG9nKClcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdGFza3MgPSBnZXRPcmRlcmVkRG9jcyhwcm9wcy5jb3Vyc2UudGFza3MsIHByb3BzLnRhc2tJZHMsIHthcHBlbmRMZWZ0b3ZlcnM6IGZhbHNlfSk7XG4gICAgICAgIFxuICAgIHJldHVybiA8ZGl2PlxuICAgICAgPFNvcnRhYmxlVGFza0xpc3RcbiAgICAgICAgdGFza01ldGFzPXt0YXNrcy5tYXAodGFzayA9PiAoe3Rhc2ssIGlzVGFza093bmVyOiBoYXNXcml0ZUFjY2VzcyhlbnYuY3VycmVudFVzZXIsIHRhc2spfSkpfVxuICAgICAgICByZW5kZXJFZGl0TGluaz17KHt0YXNrLCBpc1Rhc2tPd25lcn0pID0+IDxkaXYgY2xhc3NOYW1lPXtpc1Rhc2tPd25lciA/XG4gICAgICAgICAgICBcImVkaXRJdGVtXCIgOlxuICAgICAgICAgICAgXCJ2aWV3SXRlbVwiXG4gICAgICAgICAgfSBvbkNsaWNrPXsoKT0+dGhpcy5vcGVuVGFza0RpYWxvZyh0YXNrKX0gLz59XG4gICAgICAgIHJlbmRlckxpbms9eyh7dGFza30pID0+IHRhc2suY29udGVudCA/XG4gICAgICAgICAgLy8gUmF0aGVyIHRoYW4gbGlua2luZyB0byB1cmwsIHNob3cgdGhlIHRhc2sncyBjb250ZW50IChieSBvcGVuaW5nXG4gICAgICAgICAgLy8gdGhlIHRhc2sgZGlhbG9nKVxuICAgICAgICAgIDxhIGhyZWY9XCIjXCIgb25DbGljaz17ZXY9PntcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLm9wZW5UYXNrRGlhbG9nKHRhc2spO1xuICAgICAgICAgIH19Pnt0YXNrLm5hbWV9PC9hPiA6XG4gICAgICAgICAgPGEgaHJlZj17dGFzay51cmx9IHRhcmdldD1cIl9ibGFua1wiPnt0YXNrLm5hbWV9PC9hPn1cbiAgICAgICAgb25Tb3J0PXsoc291cmNlLCB0YXJnZXQsIHBsYWNlbWVudCkgPT4ge1xuICAgICAgICAgIHRoaXMucHJvcHMub25UYXNrc1Jlb3JkZXJlZChzb3VyY2UsIHRhcmdldCwgcGxhY2VtZW50KTtcbiAgICAgICAgfX0gLz5cblxuICAgICAgPGJyIC8+XG4gICAgICA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBjb3Vyc2UsXG4gICAgICAgICAgaG9zdCxcbiAgICAgICAgICBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrLFxuICAgICAgICAgIG1vZHVsZSxcbiAgICAgICAgICBvblRhc2tBZGRlZCxcbiAgICAgICAgICBvblRhc2tDdXN0b21pemF0aW9uVXBkYXRlZCB9ID0gdGhpcy5wcm9wcztcblxuICAgICAgICBwcm9wcy5ob3N0Lm9wZW5EaWFsb2coe1xuICAgICAgICAgIENvbXBvbmVudDogRWRpdFRhc2ssXG4gICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgIHNlYXJjaE1vZGU6IHRydWUsXG4gICAgICAgICAgICBtb2R1bGUsXG4gICAgICAgICAgICBjb3Vyc2UsXG4gICAgICAgICAgICBob3N0LFxuICAgICAgICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzayxcbiAgICAgICAgICAgIG9uU2F2ZTogKGNob29zZW5UYXNrLCB0YXNrQ3VzdG9taXphdGlvbikgPT4ge1xuICAgICAgICAgICAgICBjaG9vc2VuVGFzayA9IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzKGNob29zZW5UYXNrLCBlbnYuY3VycmVudFVzZXIpO1xuICAgICAgICAgICAgICBvblRhc2tBZGRlZChjaG9vc2VuVGFzaywgdGFza0N1c3RvbWl6YXRpb24pO1xuICAgICAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb25DYW5jZWw6ICgpID0+IGhvc3QuY2xvc2VEaWFsb2coKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9fT48aSBjbGFzc05hbWU9XCJmYSBmYS1zZWFyY2hcIiBhcmlhLWhpZGRlbiAvPiBTw7ZrIHVwcGdpZnQ8L2E+XG4gICAgICAmbmJzcDtcbiAgICAgIDxhIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgY29uc3QgeyBjb3Vyc2UsIGhvc3QsIG1vZHVsZSwgdGFza0lkcywgb25UYXNrQWRkZWQsIG9uVGFza1VwZGF0ZWQsIG9uVGFza0RlbGV0ZWQsIGlkc05vdENvdmVyZWRCeUFueVRhc2sgfSA9IHRoaXMucHJvcHM7XG4gICAgICAgIGhvc3Qub3BlbkRpYWxvZyh7XG4gICAgICAgICAgQ29tcG9uZW50OiBFZGl0VGFzayxcbiAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgbW9kdWxlLFxuICAgICAgICAgICAgY291cnNlLFxuICAgICAgICAgICAgaG9zdCxcbiAgICAgICAgICAgIGlkc05vdENvdmVyZWRCeUFueVRhc2ssXG4gICAgICAgICAgICBvblNhdmU6IG5ld1Rhc2sgPT4ge1xuICAgICAgICAgICAgICBuZXdUYXNrID0gdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMobmV3VGFzaywgZW52LmN1cnJlbnRVc2VyKTtcbiAgICAgICAgICAgICAgb25UYXNrQWRkZWQobmV3VGFzayk7XG4gICAgICAgICAgICAgIGhvc3QuY2xvc2VEaWFsb2coKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gaG9zdC5jbG9zZURpYWxvZygpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH19IGNsYXNzTmFtZT1cImJ0blwiPlxuICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzXCIgYXJpYS1oaWRkZW4gLz4gTMOkZ2cgdGlsbCBlZ2VuIHVwcGdpZnRcbiAgICAgIDwvYT5cbiAgICA8L2RpdiA+XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBDb3Vyc2UsIENvdXJzZU1vZHVsZSwgSW1hZ2UsIFRhc2ssIERvY3VtZW50LCBBYmlsaXR5IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IEVkaXRhYmxlUmVzb3VyY2VMaXN0IH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtcmVzb3VyY2UtbGlzdCc7XG5pbXBvcnQgeyBFZGl0YWJsZVRhc2tMaXN0IH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtdGFzay1saXN0JztcbmltcG9ydCB1cGRhdGUgZnJvbSAncmVhY3QtYWRkb25zLXVwZGF0ZSc7XG5pbXBvcnQgeyBJQ291cnNlRWRpdG9ySG9zdCB9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcbmltcG9ydCB7IFJlbmFtZWFibGVUZXh0IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3JlbmFtZWFibGUtdGV4dCc7XG5pbXBvcnQgeyBSZW1vdmVJdGVtIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0nO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IEwsIHNob3dFcnJvciB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgV3lzaXd5ZyB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnJztcbmltcG9ydCBhY3Rpb25zX3N3ZWRpc2ggZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucy1zdic7XG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gnO1xuaW1wb3J0IHsgQ29udGVudEVkaXRhYmxlRmllbGQgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvY29udGVudC1lZGl0YWJsZS1maWVsZCc7XG5pbXBvcnQgeyBjb21wdXRlVXBkYXRlZE9yZGVyIH0gZnJvbSAnLi4vLi4vY291cnNlLWJ1aWxkZXIta3MvbG9naWMvdGFzay1vcmRlcic7XG5pbXBvcnQgeyBmZWF0dXJlcyB9IGZyb20gJy4uLy4uLy4uL2ZlYXR1cmVzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY291cnNlOiBDb3Vyc2U7XG4gIG1vZHVsZTogQ291cnNlTW9kdWxlO1xuICBob3N0OiBJQ291cnNlRWRpdG9ySG9zdDtcbiAgaWRzTm90Q292ZXJlZEJ5QW55VGFzazoge1tpZDogc3RyaW5nXTogdHJ1ZX07XG4gIG9uUmVvcmRlcjogKGRpcmVjdGlvbjogMSB8IC0xKSA9PiB2b2lkO1xuICBnZXRPcmRlcmVkTW9kdWxlczogKCk9PkNvdXJzZU1vZHVsZVtdO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBlZGl0TWFuZGF0b3J5Q29udGVudDogYm9vbGVhbjtcbn1cblxuY29uc3QgREVGQVVMVF9LTk9XTEVER0VfTUFUUklYID0gW3tcbiAgYWJpbGl0eUlkczogW10sXG4gIEVJZHM6IFtdLFxuICBDSWRzOiBbXSxcbiAgQUlkczogW11cbn1dO1xuXG5leHBvcnQgY2xhc3MgQ291cnNlTW9kdWxlQ29tcG9uZW50IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZWRpdE1hbmRhdG9yeUNvbnRlbnQ6IGZhbHNlXG4gICAgfVxuICB9XG5cbiAgZ2V0TW9kdWxlSW5kZXgoKSB7XG4gICAgY29uc3Qge2NvdXJzZSwgbW9kdWxlfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGNvdXJzZS5tb2R1bGVzLmZpbmRJbmRleChtID0+IG0uaWQgPT09IG1vZHVsZS5pZCk7XG4gIH1cblxuICBnZXRNb2R1bGVPcmRlckluZGV4KCkge1xuICAgIGNvbnN0IHtjb3Vyc2UsIG1vZHVsZX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG9yZGVyZWRNb2R1bGVzID0gdGhpcy5wcm9wcy5nZXRPcmRlcmVkTW9kdWxlcygpO1xuICAgIHJldHVybiBvcmRlcmVkTW9kdWxlcy5maW5kSW5kZXgobSA9PiBtLmlkID09PSBtb2R1bGUuaWQpO1xuICB9XG5cbiAgdXBkYXRlTW9kdWxlKG1vZHVsZVVwZGF0ZXMpIHtcbiAgICBjb25zdCB7bW9kdWxlfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdXBkYXRlZE1vZHVsZSA9IHVwZGF0ZShtb2R1bGUsIG1vZHVsZVVwZGF0ZXMpO1xuICAgIGNvbnN0IG1vZHVsZUluZGV4ID0gdGhpcy5nZXRNb2R1bGVJbmRleCgpO1xuICAgIHRoaXMucHJvcHMuaG9zdC51cGRhdGUoeyBtb2R1bGVzOiB7ICRzcGxpY2U6IFtbbW9kdWxlSW5kZXgsIDEsIHVwZGF0ZWRNb2R1bGVdXSB9IH0pO1xuICB9XG5cbiAgLyogVGhpcyBtZXRob2Qgd29ya3MgZm9yIGJvdGggYWRkaW5nIG5ldyB0YXNrcyB0byB0aGUgdGFzayB0YWJsZVxuICBhbmQgYWRkaW5nIHJlZmVyZW5jZXMgdG8gZXhpc3RpbmcgdGFza3MuIFRoZSBtYWdpYyBvZiB0aGF0IGhhcyB0byBkbyB3aXRoXG4gIHdoZXRoZXIgdGFzay4kbWV0YSA9ICdhZGQnIG9yIG5vdCBhbmQgaXMgZG9uZSBpbiBFZGl0Q291cnNlLnNhdmUoKVxuICAqL1xuICBvblRhc2tBZGRlZCAodGFzazogVGFzaywgdGFza0N1c3RvbWl6YXRpb246IFBhcnRpYWw8VGFzaz4gfCBudWxsKSB7XG4gICAgLy8gQWRkIHRhc2sgSUQgdG8gbW9kdWxlIHRhc2tJZHMgbGlzdDpcbiAgICBjb25zdCBjb3Vyc2VVcGRhdGVzOmFueSA9IHt9O1xuICAgIGNvbnN0IHRhc2tJZHMgPSB0aGlzLnByb3BzLm1vZHVsZS50YXNrSWRzLnNsaWNlKCk7XG4gICAgdGFza0lkcy5wdXNoKHRhc2suaWQpO1xuICAgIC8vIEFkZCBwaHlzaWNhbCBUYXNrIHRvIENvdXJzZS50YXNrcy5cbiAgICBpZiAoIXRoaXMucHJvcHMuY291cnNlLnRhc2tzLnNvbWUodCA9PiB0LmlkID09PXRhc2suaWQpKSB7XG4gICAgICBjb3Vyc2VVcGRhdGVzLnRhc2tzID0geyRwdXNoOiBbdGFza119O1xuICAgIH1cbiAgICBjb25zdCBjdXN0b21pemF0aW9ucyA9IHsuLi4odGhpcy5wcm9wcy5tb2R1bGUudGFza0N1c3RvbWl6YXRpb25zIHx8IHt9KX07XG4gICAgaWYgKHRhc2tDdXN0b21pemF0aW9uKSBjdXN0b21pemF0aW9uc1t0YXNrLmlkXSA9IHRhc2tDdXN0b21pemF0aW9uO1xuICAgIGNvbnN0IG1vZHVsZUluZGV4ID0gdGhpcy5nZXRNb2R1bGVJbmRleCgpO1xuICAgIGNvdXJzZVVwZGF0ZXMubW9kdWxlcyA9IHt9O1xuICAgIGNvdXJzZVVwZGF0ZXMubW9kdWxlc1ttb2R1bGVJbmRleF0gPSB7XG4gICAgICB0YXNrSWRzOiB7JHNldDogdGFza0lkc30sXG4gICAgICB0YXNrQ3VzdG9taXphdGlvbnM6IHskc2V0OiBjdXN0b21pemF0aW9uc31cbiAgICB9O1xuICAgIC8vIFVwZGF0ZSBtb2R1bGVcbiAgICB0aGlzLnByb3BzLmhvc3QudXBkYXRlKGNvdXJzZVVwZGF0ZXMpO1xuICB9XG5cbiAgb25UYXNrVXBkYXRlZCAodGFzazogVGFzaykge1xuICAgIGlmICghdGFzay4kbWV0YSkgdGhyb3cgbmV3IEVycm9yKExgSG9wcHNhbiwgYmxldiBsaXRlIGtuYXMuIEZlbCBJRDogJHsnUGE3RHEnfWApO1xuICAgIGNvbnN0IHRhc2tJbmRleCA9IHRoaXMucHJvcHMuY291cnNlLnRhc2tzLmZpbmRJbmRleCh0ID0+IHQuaWQgPT09IHRhc2suaWQpO1xuICAgIGlmICh0YXNrSW5kZXggPj0gMCkge1xuICAgICAgdGhpcy5wcm9wcy5ob3N0LnVwZGF0ZSh7dGFza3M6IHskc3BsaWNlOiBbW3Rhc2tJbmRleCwgMSwgdGFza11dfX0pO1xuICAgIH1cbiAgfVxuXG4gIG9uVGFza0N1c3RvbWl6ZWQgKHRhc2tJZDogc3RyaW5nLCBjdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+KSB7XG4gICAgY29uc3QgY3VzdG9taXphdGlvbnMgPSB7Li4uKHRoaXMucHJvcHMubW9kdWxlLnRhc2tDdXN0b21pemF0aW9ucyB8fCB7fSl9O1xuICAgIGN1c3RvbWl6YXRpb25zW3Rhc2tJZF0gPSBjdXN0b21pemF0aW9uO1xuICAgIHRoaXMudXBkYXRlTW9kdWxlKHt0YXNrQ3VzdG9taXphdGlvbnM6IHskc2V0OiBjdXN0b21pemF0aW9uc319KTtcbiAgfVxuXG4gIG9uVGFza0RlbGV0ZWQgKGlkOiBzdHJpbmcpIHtcbiAgICAvLyBSZW1vdmUgdGFzayBJRCBmcm9tIG1vZHVsZSB0YXNrSWRzIGxpc3QuXG4gICAgLy8gVGhpcyBkZXBlbmRzIG9uIHRoZSBmYWN0IHRoYXQgRWRpdENvdXJzZS5fc2V0U3RhdGUoKSBtYWludGFpbnNcbiAgICAvLyByZW1vdmVkIFRhc2sgbGlua3MgKHdoaWNoIGl0IGFjdHVhbGx5IGRvZXMgKG9yIHNob3VsZCBkbyBhdCBsZWFzdCkpLlxuICAgIHRoaXMudXBkYXRlTW9kdWxlKHtcbiAgICAgIHRhc2tJZHM6IHskc2V0OiB0aGlzLnByb3BzLm1vZHVsZS50YXNrSWRzLmZpbHRlcih0aWQgPT4gdGlkICE9PSBpZCl9LFxuICAgICAgdGFza0N1c3RvbWl6YXRpb25zOiB7XG4gICAgICAgICRhcHBseTogY3VzdG9taXphdGlvbnMgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvcHkgPSB7Li4uY3VzdG9taXphdGlvbnN9O1xuICAgICAgICAgIGRlbGV0ZSBjb3B5W2lkXTtcbiAgICAgICAgICByZXR1cm4gY29weTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgb25UYXNrUmVwbGFjZWQgKGlkOiBzdHJpbmcsIHRhc2s6IFRhc2spIHtcbiAgICBjb25zdCBpZHhUYXNrID0gdGhpcy5wcm9wcy5tb2R1bGUudGFza0lkcy5pbmRleE9mKGlkKTtcbiAgICBpZiAoaWR4VGFzayA8IDApIHtcbiAgICAgIHNob3dFcnJvcihMYEt1bmRlIGludGUgc3BhcmEgdXBwZ2lmdC4gRmVsa29kIGQ3MmtRYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZVVwZGF0ZXMgPSB7XG4gICAgICAvLyBSZXBsYWNlIG9sZCBpZCB3aXRoIG5ldyBpZDpcbiAgICAgIHRhc2tJZHM6IHskc3BsaWNlOiBbW2lkeFRhc2ssIDEsIHRhc2suaWRdXX0sXG4gICAgICB0YXNrQ3VzdG9taXphdGlvbnM6IHtcbiAgICAgICAgJGFwcGx5OiBjdXN0b21pemF0aW9ucyA9PiB7XG4gICAgICAgICAgY29uc3QgY29weSA9IHsuLi5jdXN0b21pemF0aW9uc307XG4gICAgICAgICAgZGVsZXRlIGNvcHlbaWRdO1xuICAgICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZWRNb2R1bGUgPSB1cGRhdGUodGhpcy5wcm9wcy5tb2R1bGUsIG1vZHVsZVVwZGF0ZXMpO1xuICAgIGNvbnN0IG1vZHVsZUluZGV4ID0gdGhpcy5nZXRNb2R1bGVJbmRleCgpO1xuICAgIHRoaXMucHJvcHMuaG9zdC51cGRhdGUoe1xuICAgICAgLy8gQXBwbHkgbW9kdWxlVXBkYXRlcyBmcm9tIGFib3ZlOlxuICAgICAgbW9kdWxlczogeyAkc3BsaWNlOiBbW21vZHVsZUluZGV4LCAxLCB1cGRhdGVkTW9kdWxlXV0gfSxcbiAgICAgIC8vIEFkZCB0aGUgbmV3IHRhc2sgdG8gQ291cnNlLnRhc2tzLlxuICAgICAgLy8gRG9uJ3QgcmVtb3ZlIHRoZSBvbGQgb25lISBXaHk/IEJlY2F1c2UgaXQgbWF5IGJlIHJlZmVyZW5jZWRcbiAgICAgIC8vIGJ5IGFub3RoZXIgbW9kdWxlIGluIHNhbWUgY291cnNlISBMZXQgRWRpdENvdXJzZS5fc2V0U3RhdGUoKVxuICAgICAgLy8gZG8gdGhlIFwiZ2FyYmFnZSBjb2xsZWN0aW9uXCIgaW5zdGVhZC5cbiAgICAgIHRhc2tzOiB7ICRzZXQ6IHRoaXMucHJvcHMuY291cnNlLnRhc2tzLmNvbmNhdCh0YXNrKX1cbiAgICB9KTtcbiAgfVxuXG4gIG9uVGFza3NSZW9yZGVyZWQgKHNvdXJjZTogVGFzaywgdGFyZ2V0OiBUYXNrLCBwbGFjZW1lbnQ6ICdiZWZvcmUnIHwgJ2FmdGVyJykge1xuICAgIGNvbnN0IG5ld1Rhc2tJZHMgPSBjb21wdXRlVXBkYXRlZE9yZGVyKFxuICAgICAgdGhpcy5wcm9wcy5jb3Vyc2UudGFza3MsXG4gICAgICB0aGlzLnByb3BzLm1vZHVsZS50YXNrSWRzLFxuICAgICAgc291cmNlLFxuICAgICAgdGFyZ2V0LFxuICAgICAgcGxhY2VtZW50LFxuICAgICAge2FwcGVuZExlZnRvdmVyczogZmFsc2V9KTtcblxuICAgIHRoaXMudXBkYXRlTW9kdWxlKHtcbiAgICAgIHRhc2tJZHM6IHskc2V0OiBuZXdUYXNrSWRzfVxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY291cnNlLCBob3N0LCBtb2R1bGUsIGlkc05vdENvdmVyZWRCeUFueVRhc2sgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgbW9kdWxlSW5kZXggPSB0aGlzLmdldE1vZHVsZUluZGV4KCk7XG4gICAgY29uc3QgbW9kdWxlT3JkZXJlZEluZGV4ID0gdGhpcy5nZXRNb2R1bGVPcmRlckluZGV4KCk7XG4gICAgbGV0IGtub3dsZWRnZU1hdHJpeERpdjtcblxuICAgIGNvbnN0IHVwZGF0ZU1vZHVsZSA9IHRoaXMudXBkYXRlTW9kdWxlLmJpbmQodGhpcyk7XG4gICAgbGV0IHdlZWsgPSAxO1xuICAgIGNvbnN0IHN0YXJ0V2Vla09wdGlvbnMgPSBbXCItLVwiXTtcbiAgICBjb25zdCBlbmRXZWVrT3B0aW9ucyA9IFtcIi0tXCJdO1xuICAgIGZvciAobGV0IGk9MDsgaTw1MTsgKytpKSB7XG4gICAgICBzdGFydFdlZWtPcHRpb25zLnB1c2goJycrIHdlZWspO1xuICAgICAgZW5kV2Vla09wdGlvbnMucHVzaCgnJysgKyt3ZWVrKTtcbiAgICB9XG4gICAgXG5cbiAgICByZXR1cm4gPE9wZW5DbG9zZUJveCBpbmFjdGl2YXRlZD17IWZlYXR1cmVzLmNiQ29sbGFwc2VCb3hlc30gdGl0bGU9ezw+XG4gICAgICA8ZGl2IHN0eWxlPXt7ZmxvYXQ6IFwicmlnaHRcIn19PlxuICAgICAge21vZHVsZU9yZGVyZWRJbmRleCA+IDAgJiYgPHNwYW4+XG4gICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFycm93LWNpcmNsZS11cCBzZWxlY3RhYmxlXCJcbiAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgIG9uQ2xpY2s9e2U9PntlLnN0b3BQcm9wYWdhdGlvbigpOyB0aGlzLnByb3BzLm9uUmVvcmRlcigtMSl9fSAvPiA8L3NwYW4+fVxuICAgICAge21vZHVsZU9yZGVyZWRJbmRleCA8IGNvdXJzZS5tb2R1bGVzLmxlbmd0aCAtIDEgJiYgPHNwYW4+XG4gICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFycm93LWNpcmNsZS1kb3duIHNlbGVjdGFibGVcIlxuICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgICAgb25DbGljaz17ZT0+e2Uuc3RvcFByb3BhZ2F0aW9uKCk7dGhpcy5wcm9wcy5vblJlb3JkZXIoMSl9fSAvPiA8L3NwYW4+fVxuICAgICAgPFJlbW92ZUl0ZW1cbiAgICAgICAgdGl0bGU9XCJUYSBib3J0IG1vZHVsZW5cIlxuICAgICAgICBzdHlsZT17e2Rpc3BsYXk6ICdpbmxpbmUtYmxvY2snfX1cbiAgICAgICAgb25DbGljaz17ZT0+e2Uuc3RvcFByb3BhZ2F0aW9uKCk7IGNvbmZpcm0oTGBUYSBib3J0IG1vZHVsICR7bW9kdWxlLm5hbWV9P2ApICYmIGhvc3QudXBkYXRlKHttb2R1bGVzOiB7JHNwbGljZTogW1ttb2R1bGVJbmRleCwgMV1dfX0pfX0gLz5cbiAgICA8L2Rpdj5cbiAgICA8cD57bW9kdWxlLm5hbWV9PC9wPlxuICAgIDwvPn0gaGVhZGVyT3Blbj17bW9kdWxlLm5hbWUgPT0gJ055IGt1cnNtb2R1bCd9PlxuICAgIDxkaXYgY2xhc3NOYW1lPVwiY291cnNlLW1vZHVsZSBrZWRfYm94ZWRcIiBzdHlsZT17e3Bvc2l0aW9uOiAncmVsYXRpdmUnfX0+XG4gICAgICA8Q29udGVudEVkaXRhYmxlRmllbGRcbiAgICAgICAgdGV4dD17bW9kdWxlLm5hbWV9XG4gICAgICAgIHRhZz0naDMnXG4gICAgICAgIGNsYXNzTmFtZT0ncmVuYW1lYWJsZS10ZXh0J1xuICAgICAgICBtYXhDaGFycz17MTAwfVxuICAgICAgICBwbGFjZWhvbGRlcj1cIk5hbW5sw7ZzIG1vZHVsXCJcbiAgICAgICAgb25DaGFuZ2U9e25ld05hbWUgPT4gdXBkYXRlTW9kdWxlKHtuYW1lOiB7JHNldDogbmV3TmFtZX19KX1cbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gY2VudGVyXCI+XG4gICAgICAgICAgPHA+U3RhcnR2ZWNrYTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gY2VudGVyXCI+XG4gICAgICAgICAgPHNlbGVjdCB2YWx1ZT17bW9kdWxlLnN0YXJ0V2VlayB8fCBcIi0tXCJ9XG4gICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdXBkYXRlTW9kdWxlKHtzdGFydFdlZWs6IHtcbiAgICAgICAgICAgICAgJHNldDogZXYudGFyZ2V0LnZhbHVlID09PSAnLS0nID9cbiAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxuICAgICAgICAgICAgICAgIHBhcnNlSW50KGV2LnRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KX0+XG4gICAgICAgICAgICB7c3RhcnRXZWVrT3B0aW9ucy5tYXAobyA9PiA8b3B0aW9uIGtleT17b30gdmFsdWU9e299PntvfTwvb3B0aW9uPil9XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIGNlbnRlclwiPlxuICAgICAgICAgIDxwPlNsdXR2ZWNrYTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gY2VudGVyXCI+XG4gICAgICAgICAgPHNlbGVjdCB2YWx1ZT17bW9kdWxlLmVuZFdlZWsgfHwgXCItLVwifVxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHVwZGF0ZU1vZHVsZSh7ZW5kV2Vlazoge1xuICAgICAgICAgICAgICAkc2V0OiBldi50YXJnZXQudmFsdWUgPT09ICctLScgP1xuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6XG4gICAgICAgICAgICAgICAgcGFyc2VJbnQoZXYudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pfT5cbiAgICAgICAgICAgIHtlbmRXZWVrT3B0aW9ucy5tYXAobyA9PiA8b3B0aW9uIGtleT17b30gdmFsdWU9e299PntvfTwvb3B0aW9uPil9XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8aDQ+S3Vyc21vZHVsZW5zIGludHJvZHVrdGlvbjwvaDQ+XG4gICAgICA8V3lzaXd5Z1xuICAgICAgICBhY3Rpb25zPXtbXG4gICAgICAgICAgXCJib2xkXCIsXG4gICAgICAgICAgXCJpdGFsaWNcIixcbiAgICAgICAgICBcInVuZGVybGluZVwiLFxuICAgICAgICAgIFwic3RyaWtldGhyb3VnaFwiLFxuICAgICAgICAgIFwiaGVhZGluZzJcIixcbiAgICAgICAgICBcImhlYWRpbmczXCIsXG4gICAgICAgICAgXCJvbGlzdFwiLFxuICAgICAgICAgIFwidWxpc3RcIixcbiAgICAgICAgICBcIm91dGRlbnRcIixcbiAgICAgICAgICBcImluZGVudFwiLFxuICAgICAgICAgIFwibGluZVwiLFxuICAgICAgICAgIFwibGlua1wiLFxuICAgICAgICAgIFwiaW1hZ2VcIl19XG4gICAgICAgIGRlZmF1bHRBY3Rpb25zPXthY3Rpb25zX3N3ZWRpc2h9XG4gICAgICAgIGh0bWw9e21vZHVsZS5tYW5kYXRvcnlDb250ZW50fVxuICAgICAgICBvbkNoYW5nZT17aHRtbCA9PiB7XG4gICAgICAgICAgdXBkYXRlTW9kdWxlKHttYW5kYXRvcnlDb250ZW50OiB7JHNldDogaHRtbH19KVxuICAgICAgICB9fSAvPlxuXG4gICAgICA8aDQ+VXBwZ2lmdGVyPC9oND5cbiAgICAgIDxFZGl0YWJsZVRhc2tMaXN0XG4gICAgICAgIHRhc2tJZHM9e21vZHVsZS50YXNrSWRzfVxuICAgICAgICB0YXNrQ3VzdG9taXphdGlvbnM9e21vZHVsZS50YXNrQ3VzdG9taXphdGlvbnN9XG4gICAgICAgIGNvdXJzZT17Y291cnNlfVxuICAgICAgICBtb2R1bGU9e21vZHVsZX1cbiAgICAgICAgaG9zdD17aG9zdH1cbiAgICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzaz17aWRzTm90Q292ZXJlZEJ5QW55VGFza31cbiAgICAgICAgb25UYXNrQWRkZWQ9eyh0YXNrOiBUYXNrLCB0YXNrQ3VzdG9taXphdGlvbjogUGFydGlhbDxUYXNrPikgPT4gdGhpcy5vblRhc2tBZGRlZCh0YXNrLCB0YXNrQ3VzdG9taXphdGlvbil9XG4gICAgICAgIG9uVGFza1VwZGF0ZWQ9eyh0YXNrOiBUYXNrKSA9PiB0aGlzLm9uVGFza1VwZGF0ZWQodGFzayl9XG4gICAgICAgIG9uVGFza0N1c3RvbWl6YXRpb25VcGRhdGVkPXsodGFza0lkOiBzdHJpbmcsIGN1c3RvbWl6YXRpb246IFBhcnRpYWw8VGFzaz4pID0+XG4gICAgICAgICAgdGhpcy5vblRhc2tDdXN0b21pemVkKHRhc2tJZCwgY3VzdG9taXphdGlvbil9XG4gICAgICAgIG9uVGFza0RlbGV0ZWQ9eyhpZDogc3RyaW5nKSA9PiB0aGlzLm9uVGFza0RlbGV0ZWQoaWQpfVxuICAgICAgICBvblRhc2tSZXBsYWNlZD17KGlkOiBzdHJpbmcsIHRhc2s6IFRhc2spID0+IHRoaXMub25UYXNrUmVwbGFjZWQoaWQsIHRhc2spfVxuICAgICAgICBvblRhc2tzUmVvcmRlcmVkPXsoc291cmNlLCB0YXJnZXQsIHBsYWNlbWVudCkgPT4gdGhpcy5vblRhc2tzUmVvcmRlcmVkKHNvdXJjZSwgdGFyZ2V0LCBwbGFjZW1lbnQpfSAvPlxuXG4gICAgICA8aDQ+TW9kdWxyZXN1cnNlcjwvaDQ+XG4gICAgICA8cCBjbGFzc05hbWU9XCJzdWJIZWFkZXJcIj4oRXZlbnR1ZWxsYSByZXN1c2VyIGbDtnIgcmVkb3Zpc25pbmcgYXYgbW9kdWxlbiBzYW10IGbDtnIgbW9kdWxlbiBzb20gaGVsaGV0KTwvcD5cbiAgICAgIDxFZGl0YWJsZVJlc291cmNlTGlzdFxuICAgICAgICByZXNvdXJjZXM9e21vZHVsZS5yZXNvdXJjZXN9XG4gICAgICAgIG9uVXBkYXRlPXtyZXNvdXJjZXNVcGRhdGVzID0+IHVwZGF0ZU1vZHVsZSh7IHJlc291cmNlczogcmVzb3VyY2VzVXBkYXRlcyB9KX1cbiAgICAgICAgaG9zdD17aG9zdH0gLz5cbiAgICAgIDxkaXYgc3R5bGU9e3twb3NpdGlvbjogJ2Fic29sdXRlJywgdG9wOiAwLCByaWdodDogMH19PlxuICAgICAgICB7bW9kdWxlT3JkZXJlZEluZGV4ID4gMCAmJiA8c3Bhbj5cbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hcnJvdy1jaXJjbGUtdXAgc2VsZWN0YWJsZVwiXG4gICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgICAgb25DbGljaz17KCk9PnRoaXMucHJvcHMub25SZW9yZGVyKC0xKX0gLz4gPC9zcGFuPn1cbiAgICAgICAge21vZHVsZU9yZGVyZWRJbmRleCA8IGNvdXJzZS5tb2R1bGVzLmxlbmd0aCAtIDEgJiYgPHNwYW4+XG4gICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYXJyb3ctY2lyY2xlLWRvd24gc2VsZWN0YWJsZVwiXG4gICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgICAgb25DbGljaz17KCk9PnRoaXMucHJvcHMub25SZW9yZGVyKDEpfSAvPiA8L3NwYW4+fVxuICAgICAgICA8UmVtb3ZlSXRlbVxuICAgICAgICAgIHRpdGxlPVwiVGEgYm9ydCBtb2R1bGVuXCJcbiAgICAgICAgICBzdHlsZT17e2Rpc3BsYXk6ICdpbmxpbmUtYmxvY2snfX1cbiAgICAgICAgICBvbkNsaWNrPXsoKT0+Y29uZmlybShMYFRhIGJvcnQgbW9kdWwgJHttb2R1bGUubmFtZX0/YCkgJiYgaG9zdC51cGRhdGUoe21vZHVsZXM6IHskc3BsaWNlOiBbW21vZHVsZUluZGV4LCAxXV19fSl9IC8+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbC1hbGlnblwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YUl0ZW0gYWN0aXZhdGVDb3Vyc2VNb2R1bGVcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJidG4gYnRuLWluZm9cIiArIChtb2R1bGUuaW5hY3RpdmUgPyBcIiBidG4tYWN0aXZhdGVcIiA6IFwiIGJ0bi1pbmFjdGl2YXRlXCIpfSBvbkNsaWNrPXsoKT0+IHVwZGF0ZU1vZHVsZSh7aW5hY3RpdmU6IHskc2V0OiAhbW9kdWxlLmluYWN0aXZlfX0pfT5cbiAgICAgICAgICAgIHttb2R1bGUuaW5hY3RpdmUgPyAnQWt0aXZlcmEgbW9kdWxlbicgOiAnSW5ha3RpdmVyYSBtb2R1bGVuJ31cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDwvT3BlbkNsb3NlQm94PlxuICB9XG59XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IENvdXJzZSwgQ291cnNlTW9kdWxlLCBJbWFnZSwgVGFzaywgRG9jdW1lbnQsIEFiaWxpdHkgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB1cGRhdGUgZnJvbSAncmVhY3QtYWRkb25zLXVwZGF0ZSc7XG5pbXBvcnQgeyBJQ291cnNlRWRpdG9ySG9zdCB9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcbmltcG9ydCB7IENvdXJzZU1vZHVsZUNvbXBvbmVudCB9IGZyb20gJy4vY291cnNlLW1vZHVsZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNvdXJzZTogQ291cnNlO1xuICBob3N0OiBJQ291cnNlRWRpdG9ySG9zdDtcbiAgaWRzTm90Q292ZXJlZEJ5QW55VGFzazoge1tpZDogc3RyaW5nXTogdHJ1ZX07XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG59XG5cbmV4cG9ydCBjbGFzcyBDb3Vyc2VNb2R1bGVMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIF9lbGVtOiBIVE1MRGl2RWxlbWVudDtcbiAgX21vZHVsZVJlZnM6IHtbbW9kdWxlSWQ6IHN0cmluZ106IENvdXJzZU1vZHVsZUNvbXBvbmVudH07XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuX21vZHVsZVJlZnMgPSB7fTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgIH1cbiAgfVxuXG4gIGFkZE1vZHVsZSgpIHtcbiAgICB0aGlzLnByb3BzLmhvc3QudXBkYXRlKHttb2R1bGVzOiB7JHB1c2g6IFt7XG4gICAgICBuYW1lOiBcIk55IGt1cnNtb2R1bFwiLFxuICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgIHJlc291cmNlczogW10sXG4gICAgICB0YXNrSWRzOiBbXVxuICAgICB9IGFzIENvdXJzZU1vZHVsZVxuICAgIF19fSk7XG4gIH1cblxuICBnZXRPcmRlcmVkTW9kdWxlcygpIHtcbiAgICBjb25zdCB7IGNvdXJzZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBtb2R1bGVPcmRlciA9IGNvdXJzZS5tb2R1bGVPcmRlciB8fCBjb3Vyc2UubW9kdWxlcy5tYXAobSA9PiBtLmlkKTtcbiAgICByZXR1cm4gbW9kdWxlT3JkZXJcbiAgICAgIC8vIE1hcCBvcmRlcmVkIGlkIHRvIG1vZHVsZVxuICAgICAgLm1hcChpZCA9PiBjb3Vyc2UubW9kdWxlcy5maW5kKG0gPT4gbS5pZCA9PT0gaWQpKVxuICAgICAgLy8gSWdub3JlIGVudHJpZXMgdGhhdCBvbmx5IGV4aXN0cyBpbiBtb2R1bGVPcmRlciBidXQgbm90IGluIG1vZHVsZXNcbiAgICAgIC5maWx0ZXIobSA9PiAhIW0pXG4gICAgICAvLyBBcHBlbmQgbW9kdWxlcyBhdCBlbmQgdGhhdCBhcmUgbm90IGxpc3RlZCBpbiBtb2R1bGVPcmRlclxuICAgICAgLmNvbmNhdCAoY291cnNlLm1vZHVsZXMuZmlsdGVyKG0gPT4gIW1vZHVsZU9yZGVyLmZpbmQoaWQgPT4gbS5pZCA9PT0gaWQpKSk7XG4gIH1cblxuICBhc3luYyByZW9yZGVyIChtb2R1bGVJZDogc3RyaW5nLCBkaXJlY3Rpb246IC0xIHwgMSkge1xuICAgIGNvbnN0IHsgY291cnNlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG9yZGVyZWRNb2R1bGVzID0gdGhpcy5nZXRPcmRlcmVkTW9kdWxlcygpO1xuICAgIGNvbnN0IG1vZHVsZUluZGV4ID0gb3JkZXJlZE1vZHVsZXMuZmluZEluZGV4KG0gPT4gbS5pZCA9PT0gbW9kdWxlSWQpO1xuICAgIGNvbnN0IG5ld01vZHVsZUluZGV4ID0gbW9kdWxlSW5kZXggKyBkaXJlY3Rpb247XG4gICAgaWYgKG5ld01vZHVsZUluZGV4IDwgMCB8fCBuZXdNb2R1bGVJbmRleCA+PSBvcmRlcmVkTW9kdWxlcy5sZW5ndGgpIHtcbiAgICAgIC8vIENhbm5vdCBvcmRlciBvdXRzaWRlIGxpbWl0cy5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudE1vZHVsZUF0UG9zaXRpb24gPSBvcmRlcmVkTW9kdWxlc1tuZXdNb2R1bGVJbmRleF07XG4gICAgY29uc3QgbW9kdWxlT3JkZXIgPSBvcmRlcmVkTW9kdWxlcy5tYXAobSA9PiBtLmlkKTtcbiAgICBtb2R1bGVPcmRlcltuZXdNb2R1bGVJbmRleF0gPSBtb2R1bGVJZDtcbiAgICBtb2R1bGVPcmRlclttb2R1bGVJbmRleF0gPSBjdXJyZW50TW9kdWxlQXRQb3NpdGlvbi5pZDtcbiAgICBjb25zdCBvcmlnU2Nyb2xsUG9zID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcbiAgICBhd2FpdCB0aGlzLnByb3BzLmhvc3QudXBkYXRlKHtcbiAgICAgIG1vZHVsZU9yZGVyOiB7JHNldDogbW9kdWxlT3JkZXJ9XG4gICAgfSk7XG4gICAgLy8gTm93LCBzY3JvbGwgc21vb3RobHkgaW50byB2aWV3IGFmdGVyIHJlb3JkZXJpbmc6XG4gICAgY29uc3QgZWxlbU1vZHVsZTogSFRNTEVsZW1lbnQgPSBmaW5kRE9NTm9kZSh0aGlzLl9tb2R1bGVSZWZzW21vZHVsZUlkXSkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKGVsZW1Nb2R1bGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7dG9wOiBvcmlnU2Nyb2xsUG9zfSk7IC8vIFByb2hpYml0IGRlZmF1bHQgc2Nyb2xsaW5nIGRpcmVjdGx5IHVwd2FyZHMgb24gbW92ZSB1cC5cbiAgICAgICAgaWYgKGVsZW1Nb2R1bGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIDwgMCB8fCBlbGVtTW9kdWxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpIHtcbiAgICAgICAgICBlbGVtTW9kdWxlLnNjcm9sbEludG9WaWV3KHtiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnc3RhcnQnfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gT25seSBDaHJvbWUgYmV0YSBzdXBwb3J0cyB0aGUgYXJndW1lbnRzIGdpdmVuIGFib3ZlLiBEZWZhdWx0IGZvciBvbGRlciBicm93c2Vycy5cbiAgICAgICAgd2luZG93LnNjcm9sbFRvKG51bGwsIG9yaWdTY3JvbGxQb3MpO1xuICAgICAgICBpZiAoZWxlbU1vZHVsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPCAwIHx8IGVsZW1Nb2R1bGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCkge1xuICAgICAgICAgIGVsZW1Nb2R1bGUuc2Nyb2xsSW50b1ZpZXcodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb3Vyc2UsIGhvc3QsIGlkc05vdENvdmVyZWRCeUFueVRhc2t9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBtb2R1bGVPcmRlciA9IGNvdXJzZS5tb2R1bGVPcmRlciB8fCBjb3Vyc2UubW9kdWxlcy5tYXAobSA9PiBtLmlkKTtcbiAgICBjb25zdCBvcmRlcmVkTW9kdWxlcyA9IHRoaXMuZ2V0T3JkZXJlZE1vZHVsZXMoKTtcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCIgcmVmPXtlbGVtID0+IHRoaXMuX2VsZW0gPSBlbGVtfT5cbiAgICAgIHtvcmRlcmVkTW9kdWxlcy5tYXAobW9kdWxlID0+IDxDb3Vyc2VNb2R1bGVDb21wb25lbnRcbiAgICAgICAgcmVmPXtlbGVtID0+IHRoaXMuX21vZHVsZVJlZnNbbW9kdWxlLmlkXSA9IGVsZW19XG4gICAgICAgIGtleT17bW9kdWxlLmlkfVxuICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cbiAgICAgICAgbW9kdWxlPXttb2R1bGV9XG4gICAgICAgIG9uUmVvcmRlcj17ZGlyZWN0aW9uID0+IHRoaXMucmVvcmRlcihtb2R1bGUuaWQsIGRpcmVjdGlvbil9XG4gICAgICAgIGdldE9yZGVyZWRNb2R1bGVzPXsoKT0+dGhpcy5nZXRPcmRlcmVkTW9kdWxlcygpfVxuICAgICAgICBob3N0PXtob3N0fVxuICAgICAgICBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrPXtpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrfVxuICAgICAgIC8+KX1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZVwiIG9uQ2xpY2s9eygpPT50aGlzLmFkZE1vZHVsZSgpfT5cbiAgICAgICAgTMOkZ2cgdGlsbCBrdXJzbW9kdWxcbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59XG5cbiIsImltcG9ydCB7IFJlcG8sIFJlcG9Db21tdW5pY2F0b3IgfSBmcm9tICcuL3JlcG8nO1xuaW1wb3J0IHsgQ291cnNlLCBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBmbGF0dGVuLCBMIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCI7XG5cbmNsYXNzIFNjaG9vbENvdXJzZXNSZXBvIGV4dGVuZHMgUmVwbzxDb3Vyc2U+IHtcbiAgcHJpdmF0ZSBfc2Nob29sSWQ6IHN0cmluZztcbiAgZ2V0U2Nob29sSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlSGFzRGF0YSgpLnRoZW4oKCk9PnRoaXMuX3NjaG9vbElkKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGdldFNjaG9vbE5hbWU6ICgpPT5zdHJpbmcpIHtcbiAgICBzdXBlcih7XG4gICAgICBxdWVyeTogYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBzY2hvb2xOYW1lID0gZ2V0U2Nob29sTmFtZSgpO1xuICAgICAgICBjb25zdCBzY2hvb2xzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTY2hvb2w+KFxuICAgICAgICAgIFwic2Nob29sc1wiLCB7XG4gICAgICAgICAgICBuYW1lOiBzY2hvb2xOYW1lLFxuICAgICAgICAgICAgaW5jbHVkZTogW1wiY291cnNlc1wiXVxuICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zY2hvb2xJZCA9IHNjaG9vbHMubGVuZ3RoID4gMCAmJiBzY2hvb2xzWzBdLmlkO1xuICAgICAgICBpZiAoIXRoaXMuX3NjaG9vbElkKSB0aHJvdyBuZXcgRXJyb3IoTGBTa29sYW4gJHtzY2hvb2xOYW1lfSBmaW5ucyBpbnRlIHJlZ2lzdHJlcmFkIGkgc3lzdGVtZXQuXG4gICAgICAgICAgS29udGFrdGEgZW4gYWRtaW5pc3RyYXTDtnIgZsO2ciBLdXJzYnlnZ2FydmVya3R5Z2V0IG9jaCBiZSBvbSBhdHQgbMOkZ2dhIHRpbGwgc2tvbGFuIG1lZCBuYW1uZXQgXCIke3NjaG9vbE5hbWV9XCJgKTtcbiAgICAgICAgcmV0dXJuIGZsYXR0ZW4oc2Nob29scy5tYXAoc2Nob29sID0+IHNjaG9vbC5jb3Vyc2VzKSk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbXlTY2hvb2xDb3Vyc2VzUmVwbyA9IG5ldyBTY2hvb2xDb3Vyc2VzUmVwbygoKT0+ZW52LmN1cnJlbnRVc2VyLnNjaG9vbCk7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMLCBzaG93RXJyb3IsIGNvbXBhcmVQcm9wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgQ291cnNlIH0gZnJvbSBcImtlZGJhY2tlbmQvbW9kZWxzXCI7XG5pbXBvcnQgeyBteVNjaG9vbENvdXJzZXNSZXBvIH0gZnJvbSBcIi4uLy4uLy4uL3JlcG9zL3NjaG9vbC1jb3Vyc2VzXCI7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lclwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgc2hvcnREYXRlRm9ybWF0IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBzY2hvb2xDb3Vyc2VzOiBDb3Vyc2VbXSB8IG51bGw7XG59XG5cbmV4cG9ydCBjbGFzcyBTY2hvb2xDb3Vyc2VzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2Nob29sQ291cnNlczogbnVsbFxuICAgIH1cbiAgICB0aGlzLm9uU2Nob29sQ291cnNlc1VwZGF0ZWQgPSB0aGlzLm9uU2Nob29sQ291cnNlc1VwZGF0ZWQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIG15U2Nob29sQ291cnNlc1JlcG8uc3Vic2NyaWJlKHRoaXMub25TY2hvb2xDb3Vyc2VzVXBkYXRlZCkuY2F0Y2goc2hvd0Vycm9yKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIG15U2Nob29sQ291cnNlc1JlcG8udW5zdWJzY3JpYmUodGhpcy5vblNjaG9vbENvdXJzZXNVcGRhdGVkKTtcbiAgfVxuXG4gIG9uU2Nob29sQ291cnNlc1VwZGF0ZWQoc2Nob29sQ291cnNlczogQ291cnNlW10pIHtcbiAgICBjb25zdCBjb21wYXJlTmFtZSA9IGNvbXBhcmVQcm9wKFwibmFtZVwiKTtcbiAgICBjb25zdCBjb21wYXJlQ3JlYXRlZERhdGUgPSBjb21wYXJlUHJvcChcImNyZWF0ZWREYXRlXCIpO1xuICAgIHNjaG9vbENvdXJzZXMuc29ydCgoYSxiKSA9PiBjb21wYXJlTmFtZShhLGIpIHx8IGNvbXBhcmVDcmVhdGVkRGF0ZShhLGIpKTtcbiAgICB0aGlzLnNldFN0YXRlKHtzY2hvb2xDb3Vyc2VzfSk7XG4gIH1cblxuICBvdXRwdXRDb3Vyc2VzKGNvdXJzZXMsIGhlYWRlciwgb3Blbikge1xuICAgIHJldHVybiAoPE9wZW5DbG9zZUJveCB0aXRsZT17PHA+e2hlYWRlcn08L3A+fSBoZWFkZXJPcGVuPXtvcGVufSBjb250ZW50Q2xhc3NOYW1lPVwib2RkLWV2ZW5cIj5cbiAgICAgIHtjb3Vyc2VzLm1hcChjb3Vyc2UgPT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2Nob29sQ291cnNlXCIga2V5PXtjb3Vyc2UuaWR9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBwdWxsLXJpZ2h0XCI+XG4gICAgICAgICAgICA8TGlua1xuICAgICAgICAgICAgICB0bz17YC9jb3Vyc2VzLyR7Y291cnNlLmlkfS9lZGl0YH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgPExpbmsgdG89e2AvY291cnNlcy8ke2NvdXJzZS5pZH0vZWRpdGB9Pntjb3Vyc2UubmFtZX08L0xpbms+PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICB7Y291cnNlLmFjdGl2ZSAmJiA8ZGl2IGNsYXNzTmFtZT1cInBpbGwgYWN0aXZlXCI+QWt0aXY8L2Rpdj59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtjb3Vyc2UuYWN0aXZlICYmICFjb3Vyc2UucHVibGlzaGFibGUgJiYgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGlsbCBpbmNvbXBsZXRlXCI+SW5rb21wbGV0dDwvZGl2PlxuICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgPHA+e2NvdXJzZS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgIHtjb3Vyc2UubW9kaWZpZWRCeSA/XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzbWFsbFwiPlJlZGlnZXJhZCBhdiB7Y291cnNlLm1vZGlmaWVkQnkubmFtZX0gLyB7c2hvcnREYXRlRm9ybWF0KGNvdXJzZS5tb2RpZmllZERhdGUpfTwvcD4gOlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIiBzdHlsZT17e2ZvbnRTdHlsZTogJ2l0YWxpYyd9fT4gPC9wPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj4pfVxuXG4gICAgICA8L09wZW5DbG9zZUJveD5cbiAgICApXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3NjaG9vbENvdXJzZXN9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IG15Q291cnNlcyA9IFtdO1xuICAgIGNvbnN0IG90aGVyc0NvdXJzZXMgPSBbXTtcblxuICAgIGlmIChzY2hvb2xDb3Vyc2VzKSB7XG4gICAgICBjb25zdCBtZSA9IGVudi5jdXJyZW50VXNlci5tYWlsO1xuICBcbiAgICAgIHNjaG9vbENvdXJzZXMuZm9yRWFjaChjb3Vyc2UgPT4ge1xuICAgICAgICBpZiAoY291cnNlLmFjdGl2YXRlZEJ5ICYmIGNvdXJzZS5hY3RpdmF0ZWRCeS51cmwgPT0gbWUpIHtcbiAgICAgICAgICBteUNvdXJzZXMucHVzaChjb3Vyc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvdXJzZS5yZXNwb25zaWJsZVRlYWNoZXJzLmZpbHRlcih0ID0+IHQudXJsID09IG1lKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgbXlDb3Vyc2VzLnB1c2goY291cnNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdGhlcnNDb3Vyc2VzLnB1c2goY291cnNlKTtcbiAgICAgICAgfVxuICAgICAgfSk7ICBcbiAgICB9XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIj5cbiAgICAgICAgPGgzPlNrb2xhbnMga3Vyc2VyPC9oMz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyIG9kZC1ldmVuXCI+XG4gICAgICAgICAgeyFzY2hvb2xDb3Vyc2VzID9cbiAgICAgICAgICAgIDxwPjxTcGlubmVyIC8+IExhZGRhciBza29sYW5zIGt1cnNlcjwvcD4gOlxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGhpcy5vdXRwdXRDb3Vyc2VzKG15Q291cnNlcywgJ01pbmEga3Vyc2VyJywgdHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGhpcy5vdXRwdXRDb3Vyc2VzKG90aGVyc0NvdXJzZXMsICdBbmRyYSBrdXJzZXInLCBmYWxzZSlcbiAgICAgICAgICAgIH0gIFxuICAgICAgICAgIDwvPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtsb2NhdGlvbi5oYXNoICE9PSBcIiMvY291cnNlcy9uZXdcIiAmJiA8TGlua1xuICAgICAgICAgIGNsYXNzTmFtZT1cImJ0blwiXG4gICAgICAgICAgdG89XCIvY291cnNlcy9uZXdcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpPT53aW5kb3cuc2Nyb2xsKDAsIDApfT5cbiAgICAgICAgICBTa2FwYSBueSBrdXJzXG4gICAgICAgIDwvTGluaz59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0IHsgRURTVGVhY2hlciwgRURTVHVpdGlvbkdyb3VwIH0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2Vkcyc7XG5cblxuY29uc3QgY3JlYXRlU3R1ZGVudHMgPSAoZ3JvdXAsIG4sIG0pID0+IHtcbiAgY29uc3Qgc3R1ZGVudHMgPSBbXTtcbiAgZm9yICh2YXIgaT1uOyBpIDw9IG07IGkrKykge1xuICAgIHN0dWRlbnRzLnB1c2goe1xuICAgICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgICB0dWl0aW9uR3JvdXBOYW1lOiBncm91cCxcbiAgICAgIHN0dWRlbnRGaXJzdE5hbWU6ICdTdHVkZW50ICcgKyBpLFxuICAgICAgc3R1ZGVudExhc3ROYW1lOiAnQ2xhc3Nyb29tJyxcbiAgICAgIHN0dWRlbnRFbWFpbEFkZHJlc3M6ICdzdHVkZW50JyArIGkgKyAnLmNsYXNzcm9vbUBrZWRzY2hvb2xzLmNvbSdcblxuICAgIH0pO1xuICB9XG4gIHJldHVybiBzdHVkZW50cztcbn1cblxuZXhwb3J0IGNvbnN0IG1vY2tUZWFjaGVyczogRURTVGVhY2hlcltdID0gW1xuICB7XG4gICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgdGVhY2hlckZpcnN0TmFtZTogJ1RlYWNoZXIgMScsXG4gICAgdGVhY2hlckxhc3ROYW1lOiAnQ2xhc3Nyb29tJyxcbiAgICB0ZWFjaGVyRW1haWxBZGRyZXNzOiAndGVhY2hlcjEuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tJ1xuICB9LFxuICB7XG4gICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgdGVhY2hlckZpcnN0TmFtZTogJ1RlYWNoZXIgMicsXG4gICAgdGVhY2hlckxhc3ROYW1lOiAnQ2xhc3Nyb29tJyxcbiAgICB0ZWFjaGVyRW1haWxBZGRyZXNzOiAndGVhY2hlcjIuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tJ1xuICB9LFxuICB7XG4gICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgdGVhY2hlckZpcnN0TmFtZTogJ1RlYWNoZXIgMycsXG4gICAgdGVhY2hlckxhc3ROYW1lOiAnQ2xhc3Nyb29tJyxcbiAgICB0ZWFjaGVyRW1haWxBZGRyZXNzOiAndGVhY2hlcjMuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tJ1xuICB9LFxuICB7XG4gICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgdGVhY2hlckZpcnN0TmFtZTogJ0NhcmwnLFxuICAgIHRlYWNoZXJMYXN0TmFtZTogJ0hvbG1iZXJnJyxcbiAgICB0ZWFjaGVyRW1haWxBZGRyZXNzOiAnY2FybEBrZWRzY2hvb2xzLmNvbSdcbiAgfSxcbiAge1xuICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgIHRlYWNoZXJGaXJzdE5hbWU6ICdEYXZpZCcsXG4gICAgdGVhY2hlckxhc3ROYW1lOiAnRmFobGFuZGVyJyxcbiAgICB0ZWFjaGVyRW1haWxBZGRyZXNzOiAnZGF2aWQuZmFobGFuZGVyQGtlZHNjaG9vbHMuY29tJ1xuICB9XG5dO1xuXG5leHBvcnQgY29uc3QgbW9ja1R1aXRpb25Hcm91cHMgPSB7XG4gICdESlVTw4RMMDEnOiBbXG4gICAge1xuICAgICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgICB0dWl0aW9uR3JvdXBOYW1lOiAnSURSMV9HcjEgKDE4MDgxNi0xOTA2MTQpJyxcbiAgICAgIGNvdXJzZUNvZGU6ICdESlVTw4RMMDEnXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2hvb2xOYW1lOiAnS0VEJyxcbiAgICAgIHR1aXRpb25Hcm91cE5hbWU6ICdJRFIxX0dyMiAoMTgwODE2LTE5MDYxNCknLFxuICAgICAgY291cnNlQ29kZTogJ0RKVVPDhEwwMSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ0lEUjFfR3IzICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBjb3Vyc2VDb2RlOiAnREpVU8OETDAxJ1xuICAgIH1cbiAgXSxcbiAgJ0tFTUtFTTAxJzogW1xuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ0tFTTFfR3IxICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBjb3Vyc2VDb2RlOiAnS0VNS0VNMDEnXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2hvb2xOYW1lOiAnS0VEJyxcbiAgICAgIHR1aXRpb25Hcm91cE5hbWU6ICdLRU0xX0dyMiAoMTgwODE2LTE5MDYxNCknLFxuICAgICAgY291cnNlQ29kZTogJ0tFTUtFTTAxJ1xuICAgIH1cbiAgXSxcbiAgJ0JJT0JJTzAxJzogW1xuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ0JJTzFfR3IxICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBjb3Vyc2VDb2RlOiAnQklPQklPMDEnXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2hvb2xOYW1lOiAnS0VEJyxcbiAgICAgIHR1aXRpb25Hcm91cE5hbWU6ICdCSU8xX0dyMiAoMTgwODE2LTE5MDYxNCknLFxuICAgICAgY291cnNlQ29kZTogJ0JJT0JJTzAxJ1xuICAgIH1cbiAgXSxcbiAgJ1NWRVNWRTAzJzogW1xuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ1NWRTNfR3IxICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBjb3Vyc2VDb2RlOiAnU1ZFU1ZFMDMnXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2hvb2xOYW1lOiAnS0VEJyxcbiAgICAgIHR1aXRpb25Hcm91cE5hbWU6ICdTVkUzX0dyMiAoMTgwODE2LTE5MDYxNCknLFxuICAgICAgY291cnNlQ29kZTogJ1NWRVNWRTAzJ1xuICAgIH0sXG4gICAge1xuICAgICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgICB0dWl0aW9uR3JvdXBOYW1lOiAnU1ZFM19HcjMgKDE4MDgxNi0xOTA2MTQpJyxcbiAgICAgIGNvdXJzZUNvZGU6ICdTVkVTVkUwMydcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ1NWRTNfR3I0ICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBjb3Vyc2VDb2RlOiAnU1ZFU1ZFMDMnXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2hvb2xOYW1lOiAnS0VEJyxcbiAgICAgIHR1aXRpb25Hcm91cE5hbWU6ICdTVkUzX0dyNSAoMTgwODE2LTE5MDYxNCknLFxuICAgICAgY291cnNlQ29kZTogJ1NWRVNWRTAzJ1xuICAgIH0sXG4gICAge1xuICAgICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgICB0dWl0aW9uR3JvdXBOYW1lOiAnU1ZFM19HcjYgKDE4MDgxNi0xOTA2MTQpJyxcbiAgICAgIGNvdXJzZUNvZGU6ICdTVkVTVkUwMydcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ1NWRTNfR3I3ICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBjb3Vyc2VDb2RlOiAnU1ZFU1ZFMDMnXG4gICAgfVxuICBdXG59XG5cbmV4cG9ydCBjb25zdCBtb2NrVHVpdGlvblN0dWRlbnRzID0ge1xuICAnSURSMV9HcjEgKDE4MDgxNi0xOTA2MTQpJyA6IGNyZWF0ZVN0dWRlbnRzKCdJRFIxX0dyMSAoMTgwODE2LTE5MDYxNCknICwgMSwgMTIpLFxuICAnSURSMV9HcjIgKDE4MDgxNi0xOTA2MTQpJyA6IGNyZWF0ZVN0dWRlbnRzKCdJRFIxX0dyMiAoMTgwODE2LTE5MDYxNCknICwgMTMsIDIyKSxcbiAgJ0lEUjFfR3IzICgxODA4MTYtMTkwNjE0KScgOiBjcmVhdGVTdHVkZW50cygnSURSMV9HcjMgKDE4MDgxNi0xOTA2MTQpJyAsIDIzLCAzNCksXG4gICdLRU0xX0dyMSAoMTgwODE2LTE5MDYxNCknIDogW1xuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ0tFTTFfR3IxICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBzdHVkZW50Rmlyc3ROYW1lOiAnU3R1ZGVudCAyJyxcbiAgICAgIHN0dWRlbnRMYXN0TmFtZTogJ0NsYXNzcm9vbScsXG4gICAgICBzdHVkZW50RW1haWxBZGRyZXNzOiAnc3R1ZGVudDIuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tJ1xuICAgIH0sXG4gICAge1xuICAgICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgICB0dWl0aW9uR3JvdXBOYW1lOiAnS0VNMV9HcjEgKDE4MDgxNi0xOTA2MTQpJyxcbiAgICAgIHN0dWRlbnRGaXJzdE5hbWU6ICdTdHVkZW50IDMnLFxuICAgICAgc3R1ZGVudExhc3ROYW1lOiAnQ2xhc3Nyb29tJyxcbiAgICAgIHN0dWRlbnRFbWFpbEFkZHJlc3M6ICdzdHVkZW50My5jbGFzc3Jvb21Aa2Vkc2Nob29scy5jb20nXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2hvb2xOYW1lOiAnS0VEJyxcbiAgICAgIHR1aXRpb25Hcm91cE5hbWU6ICdLRU0xX0dyMSAoMTgwODE2LTE5MDYxNCknLFxuICAgICAgc3R1ZGVudEZpcnN0TmFtZTogJ1N0dWRlbnQgOCcsXG4gICAgICBzdHVkZW50TGFzdE5hbWU6ICdDbGFzc3Jvb20nLFxuICAgICAgc3R1ZGVudEVtYWlsQWRkcmVzczogJ3N0dWRlbnQ4LmNsYXNzcm9vbUBrZWRzY2hvb2xzLmNvbSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ0tFTTFfR3IxICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBzdHVkZW50Rmlyc3ROYW1lOiAnU3R1ZGVudCA5JyxcbiAgICAgIHN0dWRlbnRMYXN0TmFtZTogJ0NsYXNzcm9vbScsXG4gICAgICBzdHVkZW50RW1haWxBZGRyZXNzOiAnc3R1ZGVudDkuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tJ1xuICAgIH1cbiAgXSxcbiAgJ0tFTTFfR3IyICgxODA4MTYtMTkwNjE0KScgOiBbXG4gICAge1xuICAgICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgICB0dWl0aW9uR3JvdXBOYW1lOiAnS0VNMV9HcjIgKDE4MDgxNi0xOTA2MTQpJyxcbiAgICAgIHN0dWRlbnRGaXJzdE5hbWU6ICdTdHVkZW50IDEnLFxuICAgICAgc3R1ZGVudExhc3ROYW1lOiAnQ2xhc3Nyb29tJyxcbiAgICAgIHN0dWRlbnRFbWFpbEFkZHJlc3M6ICdzdHVkZW50MS5jbGFzc3Jvb21Aa2Vkc2Nob29scy5jb20nXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2hvb2xOYW1lOiAnS0VEJyxcbiAgICAgIHR1aXRpb25Hcm91cE5hbWU6ICdLRU0xX0dyMiAoMTgwODE2LTE5MDYxNCknLFxuICAgICAgc3R1ZGVudEZpcnN0TmFtZTogJ1N0dWRlbnQgNScsXG4gICAgICBzdHVkZW50TGFzdE5hbWU6ICdDbGFzc3Jvb20nLFxuICAgICAgc3R1ZGVudEVtYWlsQWRkcmVzczogJ3N0dWRlbnQ1LmNsYXNzcm9vbUBrZWRzY2hvb2xzLmNvbSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ0tFTTFfR3IyICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBzdHVkZW50Rmlyc3ROYW1lOiAnU3R1ZGVudCA2JyxcbiAgICAgIHN0dWRlbnRMYXN0TmFtZTogJ0NsYXNzcm9vbScsXG4gICAgICBzdHVkZW50RW1haWxBZGRyZXNzOiAnc3R1ZGVudDYuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tJ1xuICAgIH1cbiAgXSxcbiAgJ0JJTzFfR3IxICgxODA4MTYtMTkwNjE0KScgOiBbXG4gICAge1xuICAgICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgICB0dWl0aW9uR3JvdXBOYW1lOiAnQklPMV9HcjEgKDE4MDgxNi0xOTA2MTQpJyxcbiAgICAgIHN0dWRlbnRGaXJzdE5hbWU6ICdTdHVkZW50IDEnLFxuICAgICAgc3R1ZGVudExhc3ROYW1lOiAnQ2xhc3Nyb29tJyxcbiAgICAgIHN0dWRlbnRFbWFpbEFkZHJlc3M6ICdzdHVkZW50MS5jbGFzc3Jvb21Aa2Vkc2Nob29scy5jb20nXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2hvb2xOYW1lOiAnS0VEJyxcbiAgICAgIHR1aXRpb25Hcm91cE5hbWU6ICdCSU8xX0dyMSAoMTgwODE2LTE5MDYxNCknLFxuICAgICAgc3R1ZGVudEZpcnN0TmFtZTogJ1N0dWRlbnQgNCcsXG4gICAgICBzdHVkZW50TGFzdE5hbWU6ICdDbGFzc3Jvb20nLFxuICAgICAgc3R1ZGVudEVtYWlsQWRkcmVzczogJ3N0dWRlbnQ0LmNsYXNzcm9vbUBrZWRzY2hvb2xzLmNvbSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ0JJTzFfR3IxICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBzdHVkZW50Rmlyc3ROYW1lOiAnU3R1ZGVudCA2JyxcbiAgICAgIHN0dWRlbnRMYXN0TmFtZTogJ0NsYXNzcm9vbScsXG4gICAgICBzdHVkZW50RW1haWxBZGRyZXNzOiAnc3R1ZGVudDYuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tJ1xuICAgIH0sXG4gICAge1xuICAgICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgICB0dWl0aW9uR3JvdXBOYW1lOiAnQklPMV9HcjEgKDE4MDgxNi0xOTA2MTQpJyxcbiAgICAgIHN0dWRlbnRGaXJzdE5hbWU6ICdTdHVkZW50IDEwJyxcbiAgICAgIHN0dWRlbnRMYXN0TmFtZTogJ0NsYXNzcm9vbScsXG4gICAgICBzdHVkZW50RW1haWxBZGRyZXNzOiAnc3R1ZGVudDEwLmNsYXNzcm9vbUBrZWRzY2hvb2xzLmNvbSdcbiAgICB9XG4gIF0sXG4gICdCSU8xX0dyMiAoMTgwODE2LTE5MDYxNCknIDogW1xuICAgIHtcbiAgICAgIHNjaG9vbE5hbWU6ICdLRUQnLFxuICAgICAgdHVpdGlvbkdyb3VwTmFtZTogJ0JJTzFfR3IyICgxODA4MTYtMTkwNjE0KScsXG4gICAgICBzdHVkZW50Rmlyc3ROYW1lOiAnU3R1ZGVudCAyJyxcbiAgICAgIHN0dWRlbnRMYXN0TmFtZTogJ0NsYXNzcm9vbScsXG4gICAgICBzdHVkZW50RW1haWxBZGRyZXNzOiAnc3R1ZGVudDIuY2xhc3Nyb29tQGtlZHNjaG9vbHMuY29tJ1xuICAgIH0sXG4gICAge1xuICAgICAgc2Nob29sTmFtZTogJ0tFRCcsXG4gICAgICB0dWl0aW9uR3JvdXBOYW1lOiAnQklPMV9HcjIgKDE4MDgxNi0xOTA2MTQpJyxcbiAgICAgIHN0dWRlbnRGaXJzdE5hbWU6ICdTdHVkZW50IDcnLFxuICAgICAgc3R1ZGVudExhc3ROYW1lOiAnQ2xhc3Nyb29tJyxcbiAgICAgIHN0dWRlbnRFbWFpbEFkZHJlc3M6ICdzdHVkZW50Ny5jbGFzc3Jvb21Aa2Vkc2Nob29scy5jb20nXG4gICAgfSxcbiAgICB7XG4gICAgICBzY2hvb2xOYW1lOiAnS0VEJyxcbiAgICAgIHR1aXRpb25Hcm91cE5hbWU6ICdCSU8xX0dyMiAoMTgwODE2LTE5MDYxNCknLFxuICAgICAgc3R1ZGVudEZpcnN0TmFtZTogJ1N0dWRlbnQgOCcsXG4gICAgICBzdHVkZW50TGFzdE5hbWU6ICdDbGFzc3Jvb20nLFxuICAgICAgc3R1ZGVudEVtYWlsQWRkcmVzczogJ3N0dWRlbnQ4LmNsYXNzcm9vbUBrZWRzY2hvb2xzLmNvbSdcbiAgICB9LFxuICBdLFxuICAnU1ZFM19HcjEgKDE4MDgxNi0xOTA2MTQpJyA6IGNyZWF0ZVN0dWRlbnRzKCdTVkUzX0dyMSAoMTgwODE2LTE5MDYxNCknLCAxLCAyMSksXG4gICdTVkUzX0dyMiAoMTgwODE2LTE5MDYxNCknIDogY3JlYXRlU3R1ZGVudHMoJ1NWRTNfR3IyICgxODA4MTYtMTkwNjE0KScsIDIyLCA0NCksXG4gICdTVkUzX0dyMyAoMTgwODE2LTE5MDYxNCknIDogY3JlYXRlU3R1ZGVudHMoJ1NWRTNfR3IzICgxODA4MTYtMTkwNjE0KScsIDQ1LCA2MSksXG4gICdTVkUzX0dyNCAoMTgwODE2LTE5MDYxNCknIDogY3JlYXRlU3R1ZGVudHMoJ1NWRTNfR3I0ICgxODA4MTYtMTkwNjE0KScsIDYyLCA3OCksXG4gICdTVkUzX0dyNSAoMTgwODE2LTE5MDYxNCknIDogY3JlYXRlU3R1ZGVudHMoJ1NWRTNfR3I1ICgxODA4MTYtMTkwNjE0KScsIDgzLCAxMDcpLFxuICAnU1ZFM19HcjYgKDE4MDgxNi0xOTA2MTQpJyA6IGNyZWF0ZVN0dWRlbnRzKCdTVkUzX0dyNiAoMTgwODE2LTE5MDYxNCknLCAxMDgsIDEyNCksXG4gICdTVkUzX0dyNyAoMTgwODE2LTE5MDYxNCknIDogY3JlYXRlU3R1ZGVudHMoJ1NWRTNfR3I3ICgxODA4MTYtMTkwNjE0KScsIDEyNSwgMTUwKVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNvZnREb2N1bWVudEFjY2VzcyB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IGRiIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9kYic7XG5pbXBvcnQgeyBFRFNUZWFjaGVyIH0gZnJvbSAnLi4vLi4vLi4vY29udHJhY3RzL2Vkcyc7XG5pbXBvcnQgeyBlbnYgfSBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgYXJyYXlUb0xvb2t1cCwgY29tcGFyZVByb3BzLCBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgY2ZnIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0JztcbmltcG9ydCB7IGlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbCB9IGZyb20gJy4uLy4uLy4uL2FjY2Vzcy1jb250cm9sJztcbmltcG9ydCB7IG1vY2tUZWFjaGVycyB9IGZyb20gJy4uLy4uLy4uL2FwaXMvbW9jay9tb2NrLWNsYXNzcm9vbS1kYXRhJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2Nob29sOiBzdHJpbmc7XG4gIHNlbGVjdGVkVGVhY2hlcnM6IFNvZnREb2N1bWVudEFjY2Vzc1tdO1xuICBvbkJsdXI6ICgpPT52b2lkO1xuICBvblNlbGVjdDogKHRlYWNoZXI6IHtuYW1lOiBzdHJpbmcsIGVtYWlsOiBzdHJpbmd9KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0VGVhY2hlciAoe3NjaG9vbCwgc2VsZWN0ZWRUZWFjaGVycywgb25TZWxlY3QsIG9uQmx1cn06IFByb3BzKSB7XG4gIC8vXG4gIC8vIExvYWQgdGhlIHRlYWNoZXIgbGlzdCBhc3luY2hyb25pY2FsbHkgKHVzaW5nIHN1c3BlbnNlKVxuICAvL1xuXG4gIC8vIE1vY2stZGF0YSBmb3IgS0VEXG4gIGNvbnN0IGVtcHR5T3JNb2NrID0gc2Nob29sID09PSAnS0VEJyA/IG1vY2tUZWFjaGVycyA6IFtdO1xuXG4gIC8vIFN1c3BlbnNlLXJlYWQgZnJvbSBLZWRCYWNrZW5kOlxuICBjb25zdCB7ZWRzU2Nob29sTmFtZUd5bW59ID0gZGIuc2Nob29scy5jYWNoZU9wdGltaXplZCgpLm5hbWUoc2Nob29sKS5zaW5nbGUoKS5yZWFkKCk7XG4gIFxuICAvLyBTdXNwZW5zZS1yZWFkIGZyb20gRURTOlxuICBjb25zdCBlZHNUZWFjaGVyczogRURTVGVhY2hlcltdID0gZWRzU2Nob29sTmFtZUd5bW4gP1xuICAgIGVudi5lZHNDbGllbnQuc3VzcGVuc2UuZ2V0U2Nob29sVGVhY2hlcnMoe3NjaG9vbE5hbWU6IGVkc1NjaG9vbE5hbWVHeW1ufSkgOlxuICAgIGVtcHR5T3JNb2NrO1xuXG4gIGxldCB0ZWFjaGVyTGlzdCA9IGVkc1RlYWNoZXJzLm1hcCgoe3RlYWNoZXJGaXJzdE5hbWUsIHRlYWNoZXJMYXN0TmFtZSwgdGVhY2hlckVtYWlsQWRkcmVzc30pID0+ICh7XG4gICAgbGFiZWw6IGAke3RlYWNoZXJGaXJzdE5hbWV9ICR7dGVhY2hlckxhc3ROYW1lfWAsXG4gICAgdmFsdWU6IHRlYWNoZXJFbWFpbEFkZHJlc3NcbiAgfSkpO1xuXG4gIC8vIEFkZCBjdXJyZW50IHVzZXIgdG8gdGhlIGxpc3QgKGluIGNhc2UgY3VycmVudCB1c2VyIGlzIEFETUlOIG9yIEVNUExPWUVFIGF0IHRoZSBzY2hvb2wpXG4gIGNvbnN0IGFkZEN1cnJlbnRVc2VyID0gaXNBZG1pbk9yVGVhY2hlckF0U2Nob29sKGVudi5jdXJyZW50VXNlciwgc2Nob29sKTtcbiAgaWYgKGFkZEN1cnJlbnRVc2VyICYmICF0ZWFjaGVyTGlzdC5zb21lKHQgPT4gdC52YWx1ZSA9PT0gZW52LmN1cnJlbnRVc2VyLm1haWwpKSB7XG4gICAgdGVhY2hlckxpc3QucHVzaCh7bGFiZWw6IGVudi5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSwgdmFsdWU6IGVudi5jdXJyZW50VXNlci5tYWlsfSk7XG4gIH1cbiAgXG4gIC8vIEZpbHRlciBvdXQgYWxyZWFkeSBzZWxlY3RlZCB0ZWFjaGVyczpcbiAgY29uc3QgdGVhY2hlclNldCA9IGFycmF5VG9Mb29rdXAoc2VsZWN0ZWRUZWFjaGVycywgdCA9PiB0LmVtYWlsKTtcbiAgdGVhY2hlckxpc3QgPSB0ZWFjaGVyTGlzdFxuICAgIC5maWx0ZXIodCA9PiAhdGVhY2hlclNldFt0LnZhbHVlXSkgLy8gUmVtb3ZlIGFscmVhZHkgYWRkZWQgb25lc1xuICAgIC5zb3J0KGNvbXBhcmVQcm9wcyhbXCJsYWJlbFwiXSwgY2ZnLktFRF9MT0NBTEUpKTsgLy8gU29ydCBieSBuYW1lXG5cbiAgLy8gU2hvdyB0aGUgc2VsZWN0OlxuICByZXR1cm4gPFNlbGVjdFxuICAgIGlzTXVsdGk9e2ZhbHNlfVxuICAgIG9wdGlvbnM9e3RlYWNoZXJMaXN0fVxuICAgIGRlZmF1bHRNZW51SXNPcGVuPXt0cnVlfVxuICAgIGF1dG9Gb2N1cz17dHJ1ZX1cbiAgICBvbkJsdXI9eygpPT5vbkJsdXIoKX1cbiAgICBwbGFjZWhvbGRlcj17TGBWw6RsaiBibGFuZCBza29sYW5zIGzDpHJhcmUuLi5gfVxuICAgIG5vT3B0aW9uc01lc3NhZ2U9eygpPT5MYERldCBmaW5ucyBpbmdhIGZsZXIgbMOkcmFyZSBhdHQgdsOkbGphIGZyw6VuYH1cbiAgICBvbkNoYW5nZT17b3B0aW9uID0+IHtcbiAgICAgIGNvbnN0IHtsYWJlbCwgdmFsdWV9ID0gb3B0aW9uIGFzIGFueTtcbiAgICAgIG9uU2VsZWN0KHtuYW1lOiBsYWJlbCwgZW1haWw6IHZhbHVlfSk7XG4gICAgfX0gLz5cbn1cbiIsImltcG9ydCB7IEZpYmVyLCBGaWJlckNvbnRleHQsIFN1YnNjcmlwdGlvbiB9IGZyb20gXCJrZWRiYWNrZW5kL29ic2VydmFibGVcIjtcbmltcG9ydCBSZWFjdCwgeyBTdXNwZW5zZSwgUmVhY3ROb2RlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcblxuY29uc3QgRmliZXJDb250ZXh0UmVhY3QgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEZpYmVyIHwgbnVsbD4obnVsbCk7XG5cbkZpYmVyQ29udGV4dC5hZGRQcm92aWRlcigoKT0+XG4gIC8vIEhlcmUgd2UgYWN0dWFsbCBkbyB1c2VIb29rKEZpYmVyQ29udGV4dCkgYnV0IHdpdGhvdXQgbG9nZ2luZyB0byBpbnRlcm5hbCBkZWJ1ZyBsb2dzXG4gIC8vIE5vcm1hbGx5LCByZWFjdCBob29rcyBhcmUgc2Vuc2l0aXZlIGluIHdoaWNoIG9yZGVyIHRoZXkgYXJlIGNhbGxlZCAodXNlU3RhdGUoKSwgZXRjKVxuICAvLyBidXQgdXNlQ29udGV4dCgpIGlzIG5vdCBzZW5zaXRpdmUgYWJvdXQgdGhhdCBhdCBhbGwuXG4gIC8vIFN0aWxsLCB0aGUgZGVidWcgdmVyc2lvbiBvZiByZWFjdCB3aWxsIGxvZyBjYWxscyB0byB1c2VIb29rKCkgYW5kIHRocm93IGlmIGEgcmVuZGVyXG4gIC8vIGRvZXNuJ3QgdXNlIHRoZSBzYW1lIG51bWJlciBvZiBob29rcyBldmVyeSB0aW1lLiBUaGlzIGNoZWNrIHNob3VsZCBub3QgYXBwbHlcbiAgLy8gdG8gdXNlSG9vaygpIHNpbmNlIGl0IGlzIG5vdCBzZW5zaXRpdmUgdG8gdGhlIG9yZGVyIGluIHdoaWNoIGl0IHdhcyBjYWxsZWQuXG4gIC8vIEFuZCB3ZSBuZWVkIHRvIGJlIGFibGUgdG8gY2FsbCBpdCBmcm9tIHdpdGhpbiBjb250aXRpb25hbCBleHByZXNzaW9ucyAvIHN0YXRlbWVudHMsXG4gIC8vIHNvIHdlIG11c3QgYnlwYXNzIHRoaXMgZGVidWcgbG9nZ2luZyBoZXJlIGJ5IGFjY2Vzc2luZyB0aGUgX2N1cnJlbnRWYWx1ZSBkaXJlY3RseS5cbiAgKEZpYmVyQ29udGV4dFJlYWN0IGFzIGFueSkuX2N1cnJlbnRWYWx1ZSk7IFxuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBmYWxsYmFjaz86IE5vbk51bGxhYmxlPFJlYWN0Tm9kZT58bnVsbDtcbiAgZXJyb3JGYWxsYmFjaz86IE5vbk51bGxhYmxlPFJlYWN0Tm9kZT58bnVsbDtcbiAgY2hpbGRyZW4/OiBSZWFjdE5vZGU7XG59XG5cbmV4cG9ydCBjbGFzcyBPYnNlcnZlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCB7Y291bnRlcjogbnVtYmVyLCBlcnJvcjogbnVsbCB8IEVycm9yLCBpbmZvPzogc3RyaW5nfT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvdW50ZXI6IDAsXG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvcjogYW55LCBpbmZvOiBhbnkpIHtcbiAgICBpZiAoIWVycm9yIHx8ICFlcnJvci5uYW1lKSBlcnJvciA9IG5ldyBFcnJvcignJytlcnJvcik7XG4gICAgdGhpcy5zZXRTdGF0ZSh7ZXJyb3IsIGluZm99KTtcbiAgICBjb25zb2xlLmxvZyhlcnJvciwgaW5mbyk7XG4gIH1cblxuICBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gIG91dGVyU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSB7XG4gICAgdW5zdWJzY3JpYmU6ICgpPT4ge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2gocyA9PiBzLnVuc3Vic2NyaWJlKCkpO1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuICB9XG5cbiAgb2JzZXJ2ZXIgPSAodmFsdWU6IGFueSwgZXJyb3I6IGFueSwgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24pID0+IHtcbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe2Vycm9yfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoKHtjb3VudGVyfSkgPT4gKHtjb3VudGVyOiBjb3VudGVyICsgMSwgZXJyb3J9KSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMub3V0ZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuZXJyb3JGYWxsYmFjayB8fCA8cD57TGBLdW5kZSBpbnRlIGxhZGRhIGlubmVow6VsbGV0YH08L3A+O1xuICAgIH1cbiAgICB0aGlzLm91dGVyU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIDxTdXNwZW5zZSBmYWxsYmFjaz17dGhpcy5wcm9wcy5mYWxsYmFjayB8fCBudWxsfT5cbiAgICAgIDxGaWJlckNvbnRleHRSZWFjdC5Qcm92aWRlciB2YWx1ZT17dGhpc30+e3RoaXMucHJvcHMuY2hpbGRyZW59PC9GaWJlckNvbnRleHRSZWFjdC5Qcm92aWRlcj5cbiAgICA8L1N1c3BlbnNlPjtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0LCB7dXNlUmVmLCB1c2VTdGF0ZSwgdXNlQ29udGV4dH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgU29mdERvY3VtZW50QWNjZXNzIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gXCIuL3JlbW92ZS1pdGVtXCI7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgU2VsZWN0VGVhY2hlciB9IGZyb20gJy4vc2VsZWN0LXRlYWNoZXInO1xuaW1wb3J0IHsgT2JzZXJ2ZSB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vYnNlcnZlJztcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tICcuL3NwaW5uZXInO1xuaW1wb3J0IHsgZmVhdHVyZXMgfSBmcm9tICcuLi8uLi8uLi9mZWF0dXJlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNjaG9vbDogc3RyaW5nO1xuICB0ZWFjaGVyczogU29mdERvY3VtZW50QWNjZXNzW107XG4gIG9uVXBkYXRlOiAodGVhY2hlcnM6IFNvZnREb2N1bWVudEFjY2Vzc1tdKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRWRpdGFibGVUZWFjaGVyTGlzdCAoe3NjaG9vbCwgdGVhY2hlcnMsIG9uVXBkYXRlfTogUHJvcHMpIHtcbiAgY29uc3QgbmFtZUVsZW0gPSB1c2VSZWY8SFRNTElucHV0RWxlbWVudD4oKTtcbiAgY29uc3QgW3NlbGVjdGluZ1RlYWNoZXIsIHNldFNlbGVjdGluZ1RlYWNoZXJdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBkaXNwbGF5VGVhY2hlclJpZ2h0cyA9IGZlYXR1cmVzLnRlYWNoZXJSaWdodHM7XG5cbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwidGVhY2hlcnMtbGlzdFwiPlxuICAgIDxoMz5BbnN2YXJpZ2EgbMOkcmFyZTwvaDM+XG4gICAgPHRhYmxlIHN0eWxlPXt7d2lkdGg6IFwiMTAwJVwifX0+XG4gICAgICA8dGhlYWQ+XG4gICAgICAgIHt0ZWFjaGVycy5sZW5ndGggPiAwICYmIDx0cj5cbiAgICAgICAgICA8dGggc3R5bGU9e3t3aWR0aDogXCIxNSVcIn19PntMYE5hbW5gfTwvdGg+XG4gICAgICAgICAgPHRoPntMYEUtcG9zdGFkcmVzc2B9PC90aD5cbiAgICAgICAgICB7ZGlzcGxheVRlYWNoZXJSaWdodHMgJiYgPHRoIHN0eWxlPXt7d2lkdGg6IFwiMjRweFwifX0+e0xgQmVow7ZyaWdoZXRgfTwvdGg+fVxuICAgICAgICAgIDx0aCBzdHlsZT17e3dpZHRoOiBcIjI0cHhcIn19PjwvdGg+XG4gICAgICAgIDwvdHI+fVxuICAgICAgPC90aGVhZD5cbiAgICAgIDx0Ym9keT5cbiAgICAgICAge3RlYWNoZXJzLm1hcCgodGVhY2hlciwgaWR4KSA9PiBcbiAgICAgICAgPHRyIGtleT17aWR4fT5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiByZWY9e25hbWVFbGVtfSB2YWx1ZT17dGVhY2hlci5uYW1lfSBhdXRvRm9jdXM9eyF0ZWFjaGVyLm5hbWUgJiYgaWR4ID4gMH0gb25DaGFuZ2U9e1xuICAgICAgICAgICAgZXY9PntcbiAgICAgICAgICAgICAgaWYgKGV2LnRhcmdldC52YWx1ZSB8fCB0ZWFjaGVyLmVtYWlsKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHJvd1xuICAgICAgICAgICAgICAgIGNvbnN0IGNsb25lID0gWy4uLnRlYWNoZXJzXTtcbiAgICAgICAgICAgICAgICBjbG9uZVtpZHhdID0gey4uLnRlYWNoZXIsIG5hbWU6IGV2LnRhcmdldC52YWx1ZX07XG4gICAgICAgICAgICAgICAgb25VcGRhdGUoY2xvbmUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByb3dcbiAgICAgICAgICAgICAgICBvblVwZGF0ZShbLi4udGVhY2hlcnMuc2xpY2UoMCwgaWR4KSwgLi4udGVhY2hlcnMuc2xpY2UoaWR4ICsgMSldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0vPjwvdGQ+XG4gICAgICAgICAgPHRkPjxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgc3R5bGU9e3t3aWR0aDogXCIxMDAlXCJ9fVxuICAgICAgICAgICAgdmFsdWU9e3RlYWNoZXIuZW1haWwgfHwgdGVhY2hlci51cmx9XG4gICAgICAgICAgICBvbktleURvd249e2V2ID0+IHtcbiAgICAgICAgICAgICAgaWYgKGV2LndoaWNoID09PSA5ICYmXG4gICAgICAgICAgICAgICAgICFldi5zaGlmdEtleSAmJlxuICAgICAgICAgICAgICAgICBpZHggPT09IHRlYWNoZXJzLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgICAgICAodGVhY2hlcnMubGVuZ3RoIDwgMSB8fCAhIXRlYWNoZXJzW3RlYWNoZXJzLmxlbmd0aCAtIDFdLm5hbWUpKVxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2V0U2VsZWN0aW5nVGVhY2hlcih0cnVlKTtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZWRpdGVkVGVhY2hlciA9IHtcbiAgICAgICAgICAgICAgICAuLi50ZWFjaGVyLFxuICAgICAgICAgICAgICAgIHVybDogZXYudGFyZ2V0LnZhbHVlLCAvLyBUT0RPOiBSZW1vdmUgcHJvcGVydHkgdXJsIChyZW5hbWVkIHRvICdlbWFpbCcpIHdoZW4gbWlncmF0ZWQgZnVsbHkgKGFmdGVyIHJlbGVhc2luZyBDbGFzc3Jvb20gSW50ZWdyYXRpb24pXG4gICAgICAgICAgICAgICAgZW1haWw6IGV2LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAoZXYudGFyZ2V0LnZhbHVlIHx8IHRlYWNoZXIubmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSByb3dcbiAgICAgICAgICAgICAgICBjb25zdCBjbG9uZSA9IFsuLi50ZWFjaGVyc107XG4gICAgICAgICAgICAgICAgY2xvbmVbaWR4XSA9IGVkaXRlZFRlYWNoZXI7XG4gICAgICAgICAgICAgICAgb25VcGRhdGUoY2xvbmUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByb3dcbiAgICAgICAgICAgICAgICBvblVwZGF0ZShbLi4udGVhY2hlcnMuc2xpY2UoMCwgaWR4KSwgLi4udGVhY2hlcnMuc2xpY2UoaWR4ICsgMSldKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgfS8+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBkaXNwbGF5VGVhY2hlclJpZ2h0cyAmJiA8dGQ+XG4gICAgICAgICAgICA8c2VsZWN0IGRpc2FibGVkPXshKHRlYWNoZXIuZW1haWwgfHwgdGVhY2hlci51cmwpfSB2YWx1ZT17dGVhY2hlci5hY2Nlc3MgfHzCoCdlZGl0J30gb25DaGFuZ2U9e2V2ID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgY2xvbmUgPSBbLi4udGVhY2hlcnNdO1xuICAgICAgICAgICAgICBjbG9uZVtpZHhdID0gey4uLnRlYWNoZXIsIGFjY2VzczogZXYudGFyZ2V0LnZhbHVlIGFzIFNvZnREb2N1bWVudEFjY2Vzc1tcImFjY2Vzc1wiXX07XG4gICAgICAgICAgICAgIG9uVXBkYXRlKGNsb25lKTtcbiAgICAgICAgICAgIH19PlxuICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwicmVhZFwiPntMYEzDpHNhYH08L29wdGlvbj5cbiAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImVkaXRcIj57TGBSZWRpZ2VyYWB9PC9vcHRpb24+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJmdWxsXCI+e0xgRnVsbGB9PC9vcHRpb24+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIH1cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8UmVtb3ZlSXRlbSBvbkNsaWNrPXsoKT0+e1xuICAgICAgICAgICAgICBvblVwZGF0ZShbLi4udGVhY2hlcnMuc2xpY2UoMCwgaWR4KSwgLi4udGVhY2hlcnMuc2xpY2UoaWR4ICsgMSldKTtcbiAgICAgICAgICAgIH19IC8+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj4pfVxuICAgICAgPC90Ym9keT5cbiAgICA8L3RhYmxlPlxuICAgIDxici8+XG4gICAge3NlbGVjdGluZ1RlYWNoZXIgP1xuICAgICAgPE9ic2VydmUgZmFsbGJhY2s9ezxTcGlubmVyIC8+fSBlcnJvckZhbGxiYWNrPXtMYEt1bmRlciBpbnRlIGjDpG10YSBza29sYW5zIGzDpHJhcmUgZnLDpW4gRURTYH0+XG4gICAgICAgIDxTZWxlY3RUZWFjaGVyXG4gICAgICAgICAgc2Nob29sPXtzY2hvb2x9XG4gICAgICAgICAgc2VsZWN0ZWRUZWFjaGVycz17dGVhY2hlcnN9XG4gICAgICAgICAgb25CbHVyPXsoKT0+c2V0U2VsZWN0aW5nVGVhY2hlcihmYWxzZSl9XG4gICAgICAgICAgb25TZWxlY3Q9eyh7bmFtZSwgZW1haWx9KSA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3VGVhY2hlcjogU29mdERvY3VtZW50QWNjZXNzID0ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGVtYWlsLFxuICAgICAgICAgICAgdXJsOiBlbWFpbCwgLy8gVE9ETzogUmVtb3ZlIHByb3BlcnR5IHVybCAocmVuYW1lZCB0byAnZW1haWwnKSB3aGVuIG1pZ3JhdGVkIGZ1bGx5IChhZnRlciByZWxlYXNpbmcgQ2xhc3Nyb29tIEludGVncmF0aW9uKVxuICAgICAgICAgICAgYWNjZXNzOiAnZWRpdCdcbiAgICAgICAgICB9O1xuICAgICAgICAgIGNvbnN0IGNsb25lID0gWy4uLnRlYWNoZXJzXTtcbiAgICAgICAgICBjbG9uZS5wdXNoKG5ld1RlYWNoZXIpO1xuICAgICAgICAgIG9uVXBkYXRlKGNsb25lKTtcbiAgICAgICAgICBzZXRTZWxlY3RpbmdUZWFjaGVyKGZhbHNlKTtcbiAgICAgICAgfX0gLz5cbiAgICAgIDwvT2JzZXJ2ZT4gOlxuXG4gICAgICA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKT0+e1xuICAgICAgICBzZXRTZWxlY3RpbmdUZWFjaGVyKHRydWUpO1xuICAgICAgfX0+XG4gICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS11c2VyLXBsdXNcIiBhcmlhLWhpZGRlbiAvPlxuICAgICAgIHtMYCBMw6RnZyB0aWxsIGFuc3ZhcmlnIGzDpHJhcmVgfTwvYT59XG4gIDwvZGl2PlxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvdXJzZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IGdldFRhc2tzUGVySWQgfSBmcm9tIFwiLi4vY291cnNlcy9idXNpbmVzcy1sb2dpY1wiO1xuaW1wb3J0IHsgZnV0dXJlQWJpbGl0aWVzIH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzXCI7XG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tIFwiLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94XCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNvdXJzZTogQ291cnNlO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBpc09wZW46IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBXZWlnaHRlZEl0ZW1zVGFibGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc09wZW46IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvdXJzZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGlzT3BlbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCByb3dzID0gW107XG4gICAgY29uc3QgdGFza3NQZXJJZCA9IGdldFRhc2tzUGVySWQoY291cnNlKTtcblxuICAgIHJvd3MucHVzaCg8dHIga2V5PVwiY2VudHJhbENvbnRlbnRcIiBjbGFzc05hbWU9XCJjb3ZlcmVkLWl0ZW0tbGFiZWxcIj48dGQgY29sU3Bhbj17Mn0+Q2VudHJhbHQgaW5uZWjDpWxsPC90ZD48L3RyPik7XG4gICAgY291cnNlLmNlbnRyYWxDb250ZW50LmZvckVhY2goKGNjLGlkeCkgPT4gcm93cy5wdXNoKDx0ciBrZXk9e2NjLmlkfSBjbGFzc05hbWU9e2lkeCAlIDIgPyBcInRhYmxlT2RkXCIgOiBcIlwifT5cbiAgICAgIDx0ZD48cCBjbGFzc05hbWU9XCJjcml0ZXJpYVRleHRcIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogY2MubmFtZX19Lz48L3RkPlxuICAgICAgPHRkPjxwPnsodGFza3NQZXJJZFtjYy5pZF0gfHwgW10pLmxlbmd0aH08L3A+PC90ZD5cbiAgICA8L3RyPikpO1xuXG4gICAgcm93cy5wdXNoKDx0ciBrZXk9XCJhYmlsaXRpZXNcIiBjbGFzc05hbWU9XCJjb3ZlcmVkLWl0ZW0tbGFiZWxcIj48dGQgY29sU3Bhbj17Mn0+RsO2cm3DpWdvcjwvdGQ+PC90cj4pO1xuICAgIGNvdXJzZS5hYmlsaXRpZXMuZm9yRWFjaCgoYWJpbGl0eSxpZHgpID0+IHJvd3MucHVzaCg8dHIga2V5PXthYmlsaXR5LmlkfSBjbGFzc05hbWU9e2lkeCAlIDIgPyBcInRhYmxlT2RkXCIgOiBcIlwifT5cbiAgICAgIDx0ZD48cCBjbGFzc05hbWU9XCJhYmlsaXR5VGV4dFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBhYmlsaXR5Lm5hbWV9fS8+PC90ZD5cbiAgICAgIDx0ZD48cD57KHRhc2tzUGVySWRbYWJpbGl0eS5pZF0gfHwgW10pLmxlbmd0aH08L3A+PC90ZD5cbiAgICA8L3RyPikpO1xuXG4gICAgcm93cy5wdXNoKDx0ciBrZXk9XCJmdXR1cmVBYmlsaXRpZXNcIiBjbGFzc05hbWU9XCJjb3ZlcmVkLWl0ZW0tbGFiZWxcIj48dGQgY29sU3Bhbj17Mn0+RnJhbXRpZHNmw7ZybcOlZ29yPC90ZD48L3RyPik7XG4gICAgIGZ1dHVyZUFiaWxpdGllcy5mb3JFYWNoKChmdXR1cmVBYmlsaXR5VGV4dCwgaWR4KSA9PiByb3dzLnB1c2goPHRyIGtleT17ZnV0dXJlQWJpbGl0eVRleHR9IGNsYXNzTmFtZT17aWR4ICUgMiA/IFwidGFibGVPZGRcIiA6IFwiXCJ9PlxuICAgICAgPHRkPjxwIGNsYXNzTmFtZT1cImFiaWxpdHlUZXh0XCI+e2Z1dHVyZUFiaWxpdHlUZXh0fTwvcD48L3RkPlxuICAgICAgPHRkPjxwPnsodGFza3NQZXJJZFtmdXR1cmVBYmlsaXR5VGV4dF0gfHwgW10pLmxlbmd0aH08L3A+PC90ZD5cbiAgICA8L3RyPikpO1xuXG4gICAgcmV0dXJuIDxPcGVuQ2xvc2VCb3hcbiAgICAgIGNsYXNzTmFtZT1cImxhcmdlclwiXG4gICAgICB0aXRsZT17PHA+S3Vyc2VucyB0w6Rja25pbmdzdGFiZWxsPC9wPn1cbiAgICAgIGNvbnRlbnRDbGFzc05hbWU9XCJ3ZWlnaHRlZC1pdGVtcy10YWJsZVwiPlxuICAgICAgICA8cD5UYWJlbGxlbiBhbmdlciBodXIgbcOlbmdhIHVwcGdpZnRlciBzb20gYmVyw7ZyIHZhcmplIGRlbC48L3A+XG4gICAgICAgIDx0YWJsZT48dGJvZHk+e3Jvd3N9PC90Ym9keT48L3RhYmxlPlxuICAgIDwvT3BlbkNsb3NlQm94PlxuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IFJlc291cmNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgRGlhbG9nIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3QnO1xuaW1wb3J0IHZhbGlkVXJsIGZyb20gJ3ZhbGlkLXVybCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHVybD86IHN0cmluZztcbiAgb25TYXZlOiAobmV3VXJsOiBzdHJpbmcpID0+IHZvaWQ7XG4gIG9uRGVsZXRlPzogKCk9PnZvaWQ7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgRWRpdFdvcmtmbG93TGluayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4gaW1wbGVtZW50cyBEaWFsb2cge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHt1cmw6IHRoaXMucHJvcHMudXJsIHx8ICcnfTtcbiAgfVxuXG4gIHNhdmUoKSB7XG4gICAgY29uc3Qge3VybH0gPSB0aGlzLnN0YXRlO1xuICAgIGlmICghdmFsaWRVcmwuaXNVcmkodXJsKSkgdGhyb3cgbmV3IEVycm9yKExgQW5naXZlbiBVUkwgJyR7dXJsfScgw6RyIG9naWx0aWcuIFNrYSBiw7ZyamEgbWVkIGh0dHA6IGVsbGVyIGh0dHBzOmApO1xuICAgIHRoaXMucHJvcHMub25TYXZlKHVybCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge29uU2F2ZSwgb25EZWxldGV9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBzdGF0ZSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgaXNWYWxpZFVybCA9IHZhbGlkVXJsLmlzVXJpKHRoaXMuc3RhdGUudXJsKTtcblxuICAgIHJldHVybiA8ZGl2PjxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgIDxoMj5Lb3BwbGEgZW4gYXJiZXRzZ8OlbmcgdGlsbCBrdXJzZW48L2gyPlxuICAgICAgPHA+RGV0IGfDpXIgYmFyYSBhdHQgbMOkZ2dhIGluIGVuIGFyYmV0c2fDpW5nIHBlciBrdXJzLjwvcD5cbiAgICAgIDxiciAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+TMOkbms6PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIFwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICB0YWJJbmRleD17MX1cbiAgICAgICAgICAgIHNpemU9ezUwfVxuICAgICAgICAgICAgdmFsdWU9e3N0YXRlLnVybH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtldj0+dGhpcy5zZXRTdGF0ZSh7dXJsOiBldi50YXJnZXQudmFsdWV9KX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8YnIgLz48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIiBpZD1cInN2aWQxMl80OTI0MjJkNTE1YmFkZjM2NjQ2ZTRmZjFcIj5cbiAgICAgICAge29uRGVsZXRlICYmIDxkaXYgdGFiSW5kZXg9ezJ9IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9eygpPT5vbkRlbGV0ZSgpfT5cbiAgICAgICAgICBUYSBib3J0IGFyYmV0c2fDpW5nXG4gICAgICAgIDwvZGl2Pn1cbiAgICAgICAgPGFcbiAgICAgICAgICB0YWJJbmRleD17MX1cbiAgICAgICAgICBjbGFzc05hbWU9e1wiYnRuIGJ0bi1sYXJnZVwiICsgKGlzVmFsaWRVcmwgPyBcIlwiIDogXCIgYnRuLWluYWN0aXZlXCIpfVxuICAgICAgICAgIG9uQ2xpY2s9e2lzVmFsaWRVcmwgJiYgKCgpID0+IG9uU2F2ZShzdGF0ZS51cmwpKX0+U3BhcmE8L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtSZXNvdXJjZX0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHtMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7SUNvdXJzZUVkaXRvckhvc3R9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcbmltcG9ydCB7RWRpdFJlc291cmNlfSBmcm9tICcuLi9tb2RhbC1wYWdlcy9lZGl0LXJlc291cmNlJztcbmltcG9ydCB7IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgRWRpdFdvcmtmbG93TGluayB9IGZyb20gJy4uL21vZGFsLXBhZ2VzL2VkaXQtd29ya2Zsb3ctbGluayc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHVybDogc3RyaW5nO1xuICBvblVwZGF0ZTogKHVwZGF0ZXMpID0+IHZvaWQ7XG4gIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0O1xufVxuXG5leHBvcnQgY2xhc3MgRWRpdGFibGVXb3JrRmxvd0xpbmsgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGU9e307XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2hvc3QsIG9uVXBkYXRlLCB1cmx9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gPGRpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxuICAgICAgICB7dXJsICYmXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJlZGl0SXRlbVwiIG9uQ2xpY2s9eygpPT5ob3N0Lm9wZW5EaWFsb2coe1xuICAgICAgICAgICAgICAgIENvbXBvbmVudDogRWRpdFdvcmtmbG93TGluayxcbiAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgICAgb25TYXZlOiBuZXdVcmwgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNldDogbmV3VXJsfSk7XG4gICAgICAgICAgICAgICAgICAgIGhvc3QuY2xvc2VEaWFsb2coKTtcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBvbkRlbGV0ZTogKCk9PntcbiAgICAgICAgICAgICAgICAgICAgb25VcGRhdGUoeyRzZXQ6IHVuZGVmaW5lZH0pO1xuICAgICAgICAgICAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KX0+PC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICA8YSBocmVmPXt1cmx9IHRhcmdldD1cIl9ibGFua1wiID5OdXZhcmFuZGUgYXJiZXRzZ8Olbmc8L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgfVxuICAgICA8L2Rpdj5cbiAgICB7IXVybCAmJiA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKT0+aG9zdC5vcGVuRGlhbG9nKHtcbiAgICAgIENvbXBvbmVudDogRWRpdFdvcmtmbG93TGluayxcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIG9uU2F2ZTogbmV3VXJsID0+IHtcbiAgICAgICAgICBvblVwZGF0ZSh7JHNldDogbmV3VXJsfSlcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtcGFwZXJjbGlwXCIgYXJpYS1oaWRkZW4+PC9pPiBLb3BwbGEgZW4gYXJiZXRzZ8OlbmcgdGlsbCBrdXJzZW48L2E+fVxuICAgIDwvZGl2PlxuICB9XG59XG4iLCJpbXBvcnQgZW52IGZyb20gJy4vS0VELmVudic7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDdXJyZW50VXNlciAoKSB7XG4gIHJldHVybiBlbnYuY3VycmVudFVzZXI7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBTZWxlY3QgZnJvbSAncmVhY3Qtc2VsZWN0JztcbmltcG9ydCB7IGVudiB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBkYiB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvZGInO1xuaW1wb3J0IHsgbW9ja1R1aXRpb25Hcm91cHMgfSBmcm9tICcuLi8uLi8uLi9hcGlzL21vY2svbW9jay1jbGFzc3Jvb20tZGF0YSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNjaG9vbDogc3RyaW5nXG4gIGNvdXJzZUNvZGU6IHN0cmluZ1xuICBzZWxlY3RlZFN0dWR5R3JvdXBzOiBzdHJpbmdbXVxuICBvblVwZGF0ZTogKHN0dWR5R3JvdXBzOiBzdHJpbmdbXSkgPT4gdm9pZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0U3R1ZHlHcm91cHMgKHtzY2hvb2wsIGNvdXJzZUNvZGUsIHNlbGVjdGVkU3R1ZHlHcm91cHMsIG9uVXBkYXRlfTogUHJvcHMpIHtcblxuICAvLyBNb2NrLWRhdGEgZm9yIEtFRFxuICBjb25zdCBlbXB0eU9yTW9jayA9IHNjaG9vbCA9PT0gJ0tFRCcgJiYgbW9ja1R1aXRpb25Hcm91cHNbY291cnNlQ29kZV0/IG1vY2tUdWl0aW9uR3JvdXBzW2NvdXJzZUNvZGVdIDogW107XG5cblxuICAvLyBNYXAgZ2l2ZW4ge3NjaG9vbH0gdG8gaXRzIG5hbWUgaW4gRURTOlxuICBjb25zdCB7ZWRzU2Nob29sTmFtZUd5bW59ID0gZGIuc2Nob29sc1xuICAgIC5jYWNoZU9wdGltaXplZCgpIC8vIFdpbGwgYWRkIGNhY2hlQnVzdCB0byB0aGUgcXVlcnkgKG1ha2luZyBzZXJ2ZXIgYWRkIGNhY2hlIGhlYWRlcilcbiAgICAubmFtZShzY2hvb2wpLnNpbmdsZSgpIC8vIEdldCB0aGUgc2luZ2xlIHNjaG9vbCBpbnN0YW5jZSB3aXRoIG5hbWU9e3NjaG9vbH1cbiAgICAucmVhZCgpOyAvLyBSZWFkIGl0IHRoZSBzdXNwZW5zZS13YXkgKHRocm93aW5nIFByb21pc2UgaWYgbm90IHRoZXJlLi4uKVxuXG4gIC8vIExpc3Qgc3R1ZHlncm91cHMgZm9yIHRoYXQgc2Nob29sIGFuZCBnaXZlbiBjb3Vyc2U6XG4gIGNvbnN0IHN0dWR5R3JvdXBzID0gZWRzU2Nob29sTmFtZUd5bW4/IGVudi5lZHNDbGllbnQuc3VzcGVuc2UuZ2V0U2Nob29sVHVpdGlvbkdyb3Vwcyh7XG4gICAgc2Nob29sTmFtZTogZWRzU2Nob29sTmFtZUd5bW4sXG4gICAgY291cnNlQ29kZVxuICB9KSA6IGVtcHR5T3JNb2NrO1xuXG4gIC8vIENvbnZlcnQgdG8gb3B0aW9uIG9iamVjdHMgYXMgcmVhY3Qtc2VsZWN0IHdhbnRzIHRoZW06XG4gIGNvbnN0IG9wdGlvbnMgPSBzdHVkeUdyb3Vwcy5tYXAoc2cgPT4gKHtcbiAgICBsYWJlbDogc2cudHVpdGlvbkdyb3VwTmFtZSxcbiAgICB2YWx1ZTogc2cudHVpdGlvbkdyb3VwTmFtZVxuICB9KSk7XG5cbiAgLy8gRGlzcGxheSB0aGUgbXV0bGlzZWxlY3Q6XG4gIHJldHVybiA8U2VsZWN0XG4gICAgICBpc011bHRpPXt0cnVlfVxuICAgICAgb3B0aW9ucz17b3B0aW9uc31cbiAgICAgIHZhbHVlPXtzZWxlY3RlZFN0dWR5R3JvdXBzLm1hcChncm91cCA9PiAoe2xhYmVsOiBncm91cCwgdmFsdWU6IGdyb3VwfSkpfVxuICAgICAgcGxhY2Vob2xkZXI9e0xgS29wcGxhIHN0dWRpZWdydXBwZXIgdGlsbCBrdXJzZW4uLi5gfVxuICAgICAgbm9PcHRpb25zTWVzc2FnZT17KCk9PkxgS3VuZGUgaW50ZSBoaXR0YSBzdHVkaWVncnVwcGVyIGbDtnIgZGVubmEga3Vyc2B9XG4gICAgICBvbkNoYW5nZT17KG9wdGlvbnM6IEFycmF5PHtsYWJlbDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nfT4pID0+IHtcbiAgICAgICAgb25VcGRhdGUob3B0aW9ucy5tYXAoKHt2YWx1ZX0pID0+IHZhbHVlKSk7XG4gICAgICB9fSAvPlxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ291cnNlLCBBYmlsaXR5LCBTdWJqZWN0IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgRWRpdGFibGVSZXNvdXJjZUxpc3QgfSBmcm9tICcuLi9zdWItY29tcG9uZW50cy9lZGl0YWJsZS1yZXNvdXJjZS1saXN0JztcbmltcG9ydCB7IGR0Rm9ybWF0IH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgQ291cnNlTW9kdWxlTGlzdCB9IGZyb20gJy4vY291cnNlLW1vZHVsZS1saXN0JztcbmltcG9ydCB7IFNjaG9vbENvdXJzZXMgfSBmcm9tICcuLi9zdWItY29tcG9uZW50cy9zY2hvb2wtY291cnNlcyc7XG5pbXBvcnQgeyBJQ291cnNlRWRpdG9ySG9zdCB9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcbmltcG9ydCB7IGdldFVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cywgc2FuaXR5Q2hlY2ssIGdldElkc05vdENvdmVyZWRCeVRhc2tzLCBnZXRTb2Z0QWNjZXNzTGlzdCB9IGZyb20gJy4vYnVzaW5lc3MtbG9naWMnO1xuaW1wb3J0IHsgc2V0Q291cnNlSW1hZ2UgfSBmcm9tIFwiLi9jb3Vyc2UtYmFubmVyXCI7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XG5pbXBvcnQgeyBFZGl0YWJsZVRlYWNoZXJMaXN0IH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtdGVhY2hlci1saXN0JztcbmltcG9ydCB7IHNob3dFcnJvciwgTCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgV2VpZ2h0ZWRJdGVtc1RhYmxlIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvd2VpZ2h0ZWQtaXRlbXMtdGFibGUnO1xuaW1wb3J0IHsgV3lzaXd5ZyB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2luZGV4JztcbmltcG9ydCBhY3Rpb25zX3N3ZWRpc2ggZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucy1zdic7XG5pbXBvcnQgeyBFZGl0YWJsZVdvcmtGbG93TGluayB9IGZyb20gJy4uL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXdvcmtmbG93LWxpbmsnO1xuaW1wb3J0IHsgUmVuYW1lYWJsZVRleHQgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvcmVuYW1lYWJsZS10ZXh0JztcbmltcG9ydCB7IGdldEN1cnJlbnRVc2VyIH0gZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9jdXJyZW50LXVzZXInO1xuaW1wb3J0IHsgT2JzZXJ2ZSB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vYnNlcnZlJztcbmltcG9ydCB7IFNlbGVjdFN0dWR5R3JvdXBzIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc2VsZWN0LXN0dWR5LWdyb3Vwcyc7XG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gnO1xuaW1wb3J0IHsgZmVhdHVyZXMgfSBmcm9tICcuLi8uLi8uLi9mZWF0dXJlcyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNvdXJzZTogQ291cnNlO1xuICBvcmlnQ291cnNlOiBDb3Vyc2U7XG4gIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0O1xufTtcblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgY2hhbmdlSW1hZ2VVcmw6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBJbm5lckVkaXRDb3Vyc2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgcHJvcHM6IFByb3BzO1xuICBzdGF0ZTogU3RhdGU7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY2hhbmdlSW1hZ2VVcmw6IGZhbHNlXG4gICAgfTtcbiAgfVxuXG4gIHNldEltYWdlVXJsKGltYWdlVXJsOiBzdHJpbmcpIHtcbiAgICBjb25zdCB7IGNvdXJzZSB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoIWNvdXJzZS5pbWFnZUlkKSB7XG5cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb3Vyc2UsIG9yaWdDb3Vyc2UsIGhvc3QgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgdW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzID0gZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzKGNvdXJzZSk7XG4gICAgY29uc3QgaWRzTm90Q292ZXJlZEJ5QW55VGFzayA9IGdldElkc05vdENvdmVyZWRCeVRhc2tzKGNvdXJzZSk7XG4gICAgY29uc3Qgc2FuaXR5Q2hlY2tXYXJuaW5ncyA9IHNhbml0eUNoZWNrKGNvdXJzZSk7XG4gICAgY29uc3QgY291cnNlSW1hZ2UgPSBjb3Vyc2UuaW1hZ2VzLmZpbmQoaW1nID0+IGltZy5pZCA9PT0gY291cnNlLmltYWdlSWQpO1xuICAgIGNvbnN0IGNvdXJzZUltYWdlSXNEYXRhVXJsID0gY291cnNlSW1hZ2UgJiYgY291cnNlSW1hZ2UudXJsLnN0YXJ0c1dpdGgoJ2RhdGE6Jyk7XG4gICAgY29uc3QgY291cnNlSXNVcGxvYWRlZCA9IGNvdXJzZUltYWdlICYmIGNvdXJzZUltYWdlLnVybC5pbmRleE9mKCdzdG9yYWdlLmdvb2dsZWFwaXMuY29tJykgPiAwO1xuICAgIGNvbnN0IHNvZnRBY2Nlc3NMaXN0ID0gZ2V0U29mdEFjY2Vzc0xpc3QoY291cnNlKTtcbiAgICBjb25zdCBjdXJyZW50VXNlciA9IGdldEN1cnJlbnRVc2VyKCk7XG4gICAgY29uc3QgY2FuRGVsZXRlID0gIWZlYXR1cmVzLnRlYWNoZXJSaWdodHMgfHwgc29mdEFjY2Vzc0xpc3Quc29tZSh1c2VyID0+IHVzZXIuZW1haWwgPT09IGN1cnJlbnRVc2VyLm1haWwgJiYgdXNlci5hY2Nlc3MgPT09ICdmdWxsJyk7XG4gICAgY29uc3QgZGlzcGxheVN0dWR5R3JvdXBzID0gZmVhdHVyZXMuc3R1ZHlHcm91cHM7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17XCJzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXIgc3YtY29sdW1uLTdcIn0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgICB7Y291cnNlLmlzVGVtcGxhdGUgJiYgPGgxPkt1cnNtYWxsPC9oMT4gfVxuICAgICAgICAgIDxoMj5LdXJzw7Z2ZXJncmlwYW5kZTwvaDI+XG5cbiAgICAgICAgICA8T3BlbkNsb3NlQm94IHRpdGxlPXs8cD5LdXJzw7Z2ZXJncmlwYW5kZTwvcD59IGhlYWRlck9wZW49e3RydWV9IGluYWN0aXZhdGVkPXshZmVhdHVyZXMuY2JDb2xsYXBzZUJveGVzfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGgzPkt1cnNlbnMgYmlsZDwvaDM+XG4gICAgICAgICAgICAgIHtjb3Vyc2VJbWFnZUlzRGF0YVVybCA/XG4gICAgICAgICAgICAgICAgPHA+S3Vyc2VucyBiaWxkIGxpZ2dlciBpIGRhdGFiYXNlbi4gRsO2ciBhdHQgw6RuZHJhIGJpbGQgbcOlc3RlIGR1IGRyYSBvY2ggc2zDpHBwYSBlbiBueSBiaWxkIG92YW5ww6UgZGVuIGdhbWxhIGjDtmdzdCB1cHAgcMOlIGRlbm5hIHNpZGEuXG4gICAgICAgICAgICAgICAgICBCaWxkZW4ga2FuIGFudGluZ2VuIHZhcmEgZnLDpW4gZW4gYW5uYW4gd2ViYnNpZGEuIExva2FsYSBiaWxkZmlsZXIgZ8OlciBvY2tzw6UgYnJhIGF0dCBkcmEgb2NoIHNsw6RwcGEuPC9wPlxuICAgICAgICAgICAgICAgICA6IGNvdXJzZUlzVXBsb2FkZWQgPyA8cD5cbiAgICAgICAgICAgICAgICAgICBLdXJzZW5zIGJpbGQgbGlnZ2VyIGkgS3Vuc2thcHNza29sYW5zIEdvb2dsZSBtb2xuLiBGw7ZyIGF0dCDDpG5kcmEgYmlsZCBtw6VzdGUgZHUgZHJhIG9jaCBzbMOkcHBhIGVuIG55IGJpbGQgb3ZhbnDDpSBkZW4gZ2FtbGEgaMO2Z3N0IHVwcCBww6UgZGVubmEgc2lkYS5cbiAgICAgICAgICAgICAgICAgIEJpbGRlbiBrYW4gYW50aW5nZW4gdmFyYSBmcsOlbiBlbiBhbm5hbiB3ZWJic2lkYS4gTG9rYWxhIGJpbGRmaWxlciBnw6VyIG9ja3PDpSBicmEgYXR0IGRyYSBvY2ggc2zDpHBwYS5cbiAgICAgICAgICAgICAgICAgPC9wPiA6IGNvdXJzZUltYWdlID8gPGRpdj48dGV4dGFyZWFcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXtjb3Vyc2VJbWFnZS51cmx9XG4gICAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOiAnMTAwJScsIGhlaWdodDogJzMwcHgnfX1cbiAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtldj0+c2V0Q291cnNlSW1hZ2UoY291cnNlLCBvcmlnQ291cnNlLCBob3N0LCBldi50YXJnZXQudmFsdWUpfS8+XG4gICAgICAgICAgICAgICAgICA8cD5CaWxkZW4gc29tIHZpc2FzIGjDtmdzdCB1cHAgaMOkbXRhcyBmcsOlbiBhbmdpdmVuIFVSTC5cbiAgICAgICAgICAgICAgICAgICAgRsO2ciBhdHQgw6RuZHJhIGJpbGQga2FuIGR1IHJlZGlnZXJhIFVSTCBvdmFuLiBFdHQgYW5uYXQgc8OkdHQgYXR0IMOkbmRyYSBiaWxkIMOkciBhdHQgZHJhIG9jaCBzbMOkcHBhIGVuIG55IGJpbGQgw7Z2ZXIgZGVuIGdhbWxhIGjDtmdzdCB1cHAgcMOlIHNpZGFuLjwvcD5cbiAgICAgICAgICAgICAgICA8L2Rpdj4gOlxuICAgICAgICAgICAgICAgICAgPHA+S3Vyc2VuIHNha25hciBlZ2VuIGJpbGQuXG4gICAgICAgICAgICAgICAgICAgIEzDpGdnIHRpbGwgZW4gYmlsZCBnZW5vbSBhdHQgZHJhIG9jaCBzbMOkcHBhIGVuIGJpbGQgcMOlIGt1cnMtYmFubmVybiBow7Znc3QgdXBwIHDDpSBkZW4gaMOkciBzaWRhbi48L3A+fVxuICAgICAgICAgICAgICA8YnIvPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIHshY291cnNlLmlzVGVtcGxhdGUgJiYgPGRpdj5cbiAgICAgICAgICAgICAgPGgzPkJlc2tyaXZuaW5nPC9oMz5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic3ViSGVhZGVyXCI+KEJlc2tyaXZuaW5nIGF2IGt1cnNlbi4gRsO2ciBhdHQgc2tpbGphIG1lbGxhbiBvbGlrYSB2YXJpYW50ZXIgYXYgc2FtbWEgZ3ltbmFzaWVrdXJzKTwvcD5cbiAgICAgICAgICAgICAgPHRleHRhcmVhIGNsYXNzTmFtZT1cImlucHV0VGV4dEJveCBpbnB1dFRleHRTbWFsbFwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e2NvdXJzZS5kZXNjcmlwdGlvbn1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gaG9zdC51cGRhdGUoeyBkZXNjcmlwdGlvbjogeyAkc2V0OiBldi50YXJnZXQudmFsdWUgfSB9KX0gLz5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICA8L2Rpdj59ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxoMz5VcHB0YWt0c3RleHQ8L2gzPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzdWJIZWFkZXJcIj4odGV4dGVuIHNrYSB2aXNhcyBww6Uga3Vyc2VucyB1cHB0YWt0c3Nla3Rpb24pPC9wPlxuICAgICAgICAgICAgICA8V3lzaXd5Z1xuICAgICAgICAgICAgICAgIGh0bWw9e2NvdXJzZS5ydW5VcFRleHR9XG4gICAgICAgICAgICAgICAgZGVmYXVsdEFjdGlvbnM9e2FjdGlvbnNfc3dlZGlzaH1cbiAgICAgICAgICAgICAgICBhY3Rpb25zPXtbXG4gICAgICAgICAgICAgICAgICBcImJvbGRcIixcbiAgICAgICAgICAgICAgICAgIFwiaXRhbGljXCIsXG4gICAgICAgICAgICAgICAgICBcInVuZGVybGluZVwiLFxuICAgICAgICAgICAgICAgICAgXCJzdHJpa2V0aHJvdWdoXCIsXG4gICAgICAgICAgICAgICAgICBcImhlYWRpbmcyXCIsXG4gICAgICAgICAgICAgICAgICBcImhlYWRpbmczXCIsXG4gICAgICAgICAgICAgICAgICBcIm9saXN0XCIsXG4gICAgICAgICAgICAgICAgICBcInVsaXN0XCIsXG4gICAgICAgICAgICAgICAgICBcIm91dGRlbnRcIixcbiAgICAgICAgICAgICAgICAgIFwiaW5kZW50XCIsXG4gICAgICAgICAgICAgICAgICBcImxpbmVcIixcbiAgICAgICAgICAgICAgICAgIFwibGlua1wiLFxuICAgICAgICAgICAgICAgICAgXCJpbWFnZVwiXX1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17bmV3SHRtbCA9PiBob3N0LnVwZGF0ZSh7IHJ1blVwVGV4dDogeyRzZXQ6IG5ld0h0bWx9fSl9IC8+XG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxoMz5LdXJzcmVzdXJzZXI8L2gzPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic3ViSGVhZGVyXCI+KFJlc3Vyc2VyIGbDtnIgdXBwdGFrdCBvY2gga3Vyc2VuIHNvbSBoZWxoZXQpPC9wPlxuICAgICAgICAgICAgPEVkaXRhYmxlUmVzb3VyY2VMaXN0XG4gICAgICAgICAgICAgIHJlc291cmNlcz17Y291cnNlLnJlc291cmNlc31cbiAgICAgICAgICAgICAgb25VcGRhdGU9e3Jlc291cmNlc1VwZGF0ZXMgPT4gaG9zdC51cGRhdGUoeyByZXNvdXJjZXM6IHJlc291cmNlc1VwZGF0ZXMgfSl9XG4gICAgICAgICAgICAgIGhvc3Q9e2hvc3R9IC8+XG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIDxoMz5BcmJldHNnw6VuZzwvaDM+XG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzdWJIZWFkZXJcIj4oRXZlbnR1ZWxsIGzDpG5rIHRpbGwgYXJiZXRzZ8OlbmcgZsO2ciBrdXJzZW4pPC9wPlxuICAgICAgICAgICAgPEVkaXRhYmxlV29ya0Zsb3dMaW5rXG4gICAgICAgICAgICAgIHVybD17Y291cnNlLndvcmtGbG93TGlua31cbiAgICAgICAgICAgICAgb25VcGRhdGU9e3VwZGF0ZXMgPT4gaG9zdC51cGRhdGUoeyB3b3JrRmxvd0xpbms6IHVwZGF0ZXMgfSl9XG4gICAgICAgICAgICAgIGhvc3Q9e2hvc3R9IC8+XG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIHshY291cnNlLmlzVGVtcGxhdGUgJiYgPGRpdj5cbiAgICAgICAgICAgICAgPGgzPkdvb2dsZSBDbGFzc3Jvb208L2gzPlxuICAgICAgICAgICAgICB7ZGlzcGxheVN0dWR5R3JvdXBzID8gPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImNoZWNrQm94XCIgKyAoY291cnNlLmdvb2dsZUNyZWF0ZUNsYXNzcm9vbXMgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4geyBob3N0LnVwZGF0ZSh7IGdvb2dsZUNyZWF0ZUNsYXNzcm9vbXM6IHsgJHNldDogIWNvdXJzZS5nb29nbGVDcmVhdGVDbGFzc3Jvb21zIH0gfSkgfX0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICAgICAgU2thcGEga2xhc3NydW0gZsO2ciBrdXJzZW5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+IFxuICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbCBzcGFjZWRcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiR29vZ2xlIGNsYXNzcm9vbSBVUkxcIlxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIHNpemU9ezMwfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17Y291cnNlLmdvb2dsZUNsYXNzUm9vbVVSTH1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IGhvc3QudXBkYXRlKHsgZ29vZ2xlQ2xhc3NSb29tVVJMOiB7ICRzZXQ6IGV2LnRhcmdldC52YWx1ZSB9IH0pfSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJrb2RcIlxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIHNpemU9ezh9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjb3Vyc2UuZ29vZ2xlQ2xhc3NSb29tQ29kZX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IGhvc3QudXBkYXRlKHsgZ29vZ2xlQ2xhc3NSb29tQ29kZTogeyAkc2V0OiBldi50YXJnZXQudmFsdWUgfSB9KX0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvZGl2Pn1cblxuICAgICAgICAgICAge2NvdXJzZS5pc1RlbXBsYXRlID8gbnVsbCA6IDw+XG4gICAgICAgICAgICAgIDxFZGl0YWJsZVRlYWNoZXJMaXN0IFxuICAgICAgICAgICAgICAgIHNjaG9vbD17Y291cnNlLnNjaG9vbH1cbiAgICAgICAgICAgICAgICB0ZWFjaGVycz17Y291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnN9XG4gICAgICAgICAgICAgICAgb25VcGRhdGU9e3RlYWNoZXJzVXBkYXRlID0+IHtcbiAgICAgICAgICAgICAgICAgIGhvc3QudXBkYXRlKHtyZXNwb25zaWJsZVRlYWNoZXJzOiB7JHNldDogdGVhY2hlcnNVcGRhdGV9fSk7XG4gICAgICAgICAgICAgICAgfX0gLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAge2Rpc3BsYXlTdHVkeUdyb3VwcyAmJiA8ZGl2IGNsYXNzTmFtZT1cInNlbGVjdC1zdHVkeWdyb3Vwc1wiPlxuICAgICAgICAgICAgICAgIDxoMz57TGBTdHVkaWVncnVwcGVyYH08L2gzPlxuICAgICAgICAgICAgICAgIDxPYnNlcnZlXG4gICAgICAgICAgICAgICAgICBmYWxsYmFjaz17PFNwaW5uZXIgLz59XG4gICAgICAgICAgICAgICAgICBlcnJvckZhbGxiYWNrPXtMYEt1bmRlIGludGUgbGFkZGEgc3R1ZGllZ3J1cHBlciBmcsOlbiBFRFNgfT5cblxuICAgICAgICAgICAgICAgICAgPFNlbGVjdFN0dWR5R3JvdXBzXG4gICAgICAgICAgICAgICAgICAgIHNjaG9vbD17Y291cnNlLnNjaG9vbH1cbiAgICAgICAgICAgICAgICAgICAgY291cnNlQ29kZT17Y291cnNlLmNvZGV9XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU3R1ZHlHcm91cHM9e2NvdXJzZS5zdHVkeUdyb3VwcyB8fCBbXX1cbiAgICAgICAgICAgICAgICAgICAgb25VcGRhdGU9e3N0dWR5R3JvdXBzID0+IGhvc3QudXBkYXRlKHsgc3R1ZHlHcm91cHM6IHsgJHNldDogc3R1ZHlHcm91cHMgfSB9KX0gLz5cblxuICAgICAgICAgICAgICAgIDwvT2JzZXJ2ZT5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgey8qXG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIDxoMz5JbmzDpG1uaW5ncyBFLXBvc3Q8L2gzPlxuICAgICAgICAgICAgPHRhYmxlIHRhYkluZGV4PXsxfSBzdHlsZT17e3dpZHRoOiAnMTAwJSd9fT5cbiAgICAgICAgICAgICAgPHRoZWFkPjx0cj48dGg+XG4gICAgICAgICAgICAgICAgRS1wb3N0YWRkcmVzc1xuICAgICAgICAgICAgICA8L3RoPjwvdHI+PC90aGVhZD5cbiAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICAgICAgPFJlbmFtZWFibGVUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgZWFnZXI9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgICAgY2xpY2tBZHZlcnRpc2VUZXh0PVwiS2xpY2thIGjDpHIgZsO2ciBhdHQgYW5nZSB2ZW0gc29tIHRhciBlbW90IGlubMOkbW5pbmdzdXBwZ2lmdGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICB0ZXh0PXtjb3Vyc2UuYXNzaWdubWVudEVtYWlscyA/IGNvdXJzZS5hc3NpZ25tZW50RW1haWxzWzBdIDogXCJcIn1cbiAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkFuZ2UgbW90dGFnYXJlIGF2IGlubMOkbW5pbmdzdXBwZ2lmdGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICB0YWc9XCJpbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3ZhbHVlID0+IGhvc3QudXBkYXRlKHthc3NpZ25tZW50RW1haWxzOiB7JHNldDogW3ZhbHVlXX19KX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgICAgIDwvdGFibGU+Ki99XG4gICAgICAgICAgICBcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L09wZW5DbG9zZUJveD5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XG4gICAgICAgICAgICA8ZGl2IGlkPVwiS3Vyc2Vuc21vZHVsZXJcIj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGgyPkt1cnNlbnMgbW9kdWxlcjwvaDI+XG4gICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8Q291cnNlTW9kdWxlTGlzdFxuICAgICAgICAgICAgaG9zdD17aG9zdH1cbiAgICAgICAgICAgIGNvdXJzZT17Y291cnNlfVxuICAgICAgICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzaz17aWRzTm90Q292ZXJlZEJ5QW55VGFza30gLz5cbiAgICAgICAgICBcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgIDxXZWlnaHRlZEl0ZW1zVGFibGUgY291cnNlPXtjb3Vyc2V9Lz5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cbiAgICAgICAgICAgIDxoMj5LdXJzZW5zIHN0YXR1czwvaDI+XG4gICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgIHtjb3Vyc2UuY3JlYXRlZEJ5ICYmIGNvdXJzZS5jcmVhdGVkRGF0ZSAmJiA8cD5cbiAgICAgICAgICAgICAgS3Vyc2VuIHNrYXBhZGVzIHtkdEZvcm1hdChjb3Vyc2UuY3JlYXRlZERhdGUpfSBhdiA8c3Ryb25nPntjb3Vyc2UuY3JlYXRlZEJ5Lm5hbWV9PC9zdHJvbmc+LlxuICAgICAgICAgICAgPC9wPn1cbiAgICAgICAgICAgIHtjb3Vyc2UubW9kaWZpZWRCeSAmJiBjb3Vyc2UubW9kaWZpZWREYXRlICYmIDxwPlxuICAgICAgICAgICAgICBLdXJzZW4gcmVkaWdlcmFkZXMgc2VuYXN0IHtkdEZvcm1hdChjb3Vyc2UubW9kaWZpZWREYXRlKX0gYXYgPHN0cm9uZz57Y291cnNlLm1vZGlmaWVkQnkubmFtZX08L3N0cm9uZz4uXG4gICAgICAgICAgICA8L3A+fVxuICAgICAgICAgICAge2NvdXJzZS5hY3RpdmUgPyA8cD5cbiAgICAgICAgICAgICAgS3Vyc2VuIMOkciA8c3Ryb25nPkFLVElWPC9zdHJvbmc+IHNlZGFuIHtkdEZvcm1hdChjb3Vyc2UuYWN0aXZhdGVkRGF0ZSl9IGF2IDxzdHJvbmc+e2NvdXJzZS5hY3RpdmF0ZWRCeS5uYW1lfTwvc3Ryb25nPi5cbiAgICAgICAgICAgIDwvcD4gOiA8cD5cbiAgICAgICAgICAgICAgICBLdXJzZW4gw6RyIDxzdHJvbmc+SU5BS1RJVjwvc3Ryb25nPntjb3Vyc2UuaW5hY3RpdmF0ZWRCeSA/IDxzcGFuPlxuICAgICAgICAgICAgICAgICAgc2VkYW4ge2R0Rm9ybWF0KGNvdXJzZS5pbmFjdGl2YXRlZERhdGUpfSBhdiA8c3Ryb25nPntjb3Vyc2UuaW5hY3RpdmF0ZWRCeS5uYW1lfTwvc3Ryb25nPi48L3NwYW4+IDogPHNwYW4+Ljwvc3Bhbj5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvcD59XG4gICAgICAgICAgICB7KHVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cy5sZW5ndGggPT09IDAgP1xuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJtYXJrZWRHcmVlblwiPk1vZHVsZXJuYXMga3Vuc2thcHNrcmF2IHTDpGNrZXIgc2tvbHZlcmtldHMga3JhdiBmw7ZyIGRlbm5hIGt1cnM8L3A+IDpcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXJrZWRSZWQgd2FybmluZy1ib3hcIj48ZGl2IGNsYXNzTmFtZT1cIndhcm5pbmdGbGFnXCI+XG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICAgICAgICAgIDwvZGl2PjxwPk1vZHVsZXJuYXMga3Vuc2thcHNrcmF2IHTDpGNrZXIgaW50ZSBza29sdmVya2V0cyBrcmF2IGbDtnIgZGVubmEga3Vycy48L3A+XG4gICAgICAgICAgICAgIDwvZGl2Pil9XG4gICAgICAgICAgICB7c2FuaXR5Q2hlY2tXYXJuaW5ncy5tYXAod2FybmluZyA9PiA8ZGl2IGtleT17d2FybmluZ30gY2xhc3NOYW1lPVwibWFya2VkUmVkIHdhcm5pbmctYm94XCI+PGRpdiBjbGFzc05hbWU9XCJ3YXJuaW5nRmxhZ1wiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICA8L2Rpdj48cD57d2FybmluZ308L3A+PC9kaXY+KX1cbiAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlXCIgb25DbGljaz17KCkgPT4gaG9zdC5jb25maXJtU2F2ZUFuZFN5bmMoKX0+XG4gICAgICAgICAgICAgIFNwYXJhXG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHtjb3Vyc2UuYWN0aXZlID9cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLWluZm8gYnRuLWxhcmdlXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBob3N0LmluYWN0aXZhdGVBbmRTYXZlKCl9PlxuICAgICAgICAgICAgICAgIEluYWt0aXZlcmEgb2NoIHNwYXJhXG4gICAgICAgICAgICAgIDwvZGl2PiA6XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGJ0bi1pbmZvIGJ0bi1sYXJnZVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaG9zdC5hY3RpdmF0ZUFuZFNhdmUoKX0+XG4gICAgICAgICAgICAgICAgQWt0aXZlcmEgb2NoIHNwYXJhXG4gICAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XG4gICAgICAgICAge2NhbkRlbGV0ZSAmJiAhY291cnNlLmlzVGVtcGxhdGUgJiYgKG9yaWdDb3Vyc2UgPyA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT57XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0oTGBCZWtyw6RmdGEgYm9ydHRhZ25pbmcgYXYga3Vyc2VuIFwiJHtjb3Vyc2UubmFtZX0gLSAke2NvdXJzZS5kZXNjcmlwdGlvbn1cIiBmw7ZyIHNrb2xhbiAke2NvdXJzZS5zY2hvb2x9XFxuXFxuS3Vyc2VuIGtvbW1hciBhdHQgcmFkZXJhcyBoZWx0IVxcblxcbsOEciBkdSBzw6RrZXI/YCkpXG4gICAgICAgICAgICAgICAgICBob3N0LmRlbGV0ZUNvdXJzZSgpLmNhdGNoKHNob3dFcnJvcik7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+VGEgYm9ydCBrdXJzPC9kaXY+OjxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCk9Pmhpc3RvcnkuZ28oLTEpfVxuICAgICAgICAgICAgPkF2YnJ5dFxuICAgICAgICAgICAgICA8L2Rpdj4pXG4gICAgICAgICAgICB9XG4gICAgICAgICAge2NvdXJzZS5nb29nbGVDcmVhdGVDbGFzc3Jvb21zICYmIGRpc3BsYXlTdHVkeUdyb3VwcyAmJlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCkgPT4gaG9zdC5zeW5jV2l0aENsYXNzcm9vbUFuZFNhdmUoKX0+XG4gICAgICAgICAgICAgICAgICB7aG9zdC5zeW5jSW5Qcm9ncmVzcygpID8gPFNwaW5uZXIgLz4gOiBcbiAgICAgICAgICAgICAgICAgIChjb3Vyc2UuaW5TeW5jV2l0aENsYXNzcm9vbSA/IDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhcyBmYS1jaGVja1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT48L3NwYW4+OiA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYXMgZmEtY29kZS1icmFuY2hcIj48L2k+PC9zcGFuPil9XG4gICAgICAgICAgICAgICAgICAmbmJzcDtTeW5jIG1lZCBrbGFzc3J1bVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LWNvbHVtbi01XCI+XG4gICAgICAgIDxTY2hvb2xDb3Vyc2VzIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufSIsImltcG9ydCB7IEdvb2dsZVdlYkNsaWVudCB9IGZyb20gJy4vZ29vZ2xlLXdlYmNsaWVudCc7XG5pbXBvcnQgeyBtb2NrVHVpdGlvblN0dWRlbnRzIH0gZnJvbSAnLi9tb2NrL21vY2stY2xhc3Nyb29tLWRhdGEnO1xuaW1wb3J0IHsgRURTVHVpdGlvblN0dWRlbnQgfSBmcm9tICcuLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7IGVudiB9IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5cbmludGVyZmFjZSBHQVNGaWVsZHMge1xuICBmdW5jdGlvbjogc3RyaW5nO1xuICBwYXJhbWV0ZXJzPzogYW55W107XG4gIGRldk1vZGU/OiBib29sZWFuO1xufVxuXG5cbi8qKlxuKiBcbiovXG5leHBvcnQgY2xhc3MgQ2xhc3Nyb29tU3luYyBleHRlbmRzIEdvb2dsZVdlYkNsaWVudCB7XG4gIFxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihbJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZHJpdmUnLFxuICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xhc3Nyb29tLmNvdXJzZXMnLFxuICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvY2xhc3Nyb29tLnByb2ZpbGUucGhvdG9zJyxcbiAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2NsYXNzcm9vbS5wcm9maWxlLmVtYWlscycsXG4gICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbGFzc3Jvb20ucm9zdGVycycsXG4gICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbGFzc3Jvb20ucm9zdGVycy5yZWFkb25seScsXG4gICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jbGFzc3Jvb20uY291cnNld29yay5zdHVkZW50cycsXG4gICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9zY3JpcHQuZXh0ZXJuYWxfcmVxdWVzdCdcbiAgICBdKTtcbiAgfVxuXG4gIC8qKlxuICAqIFxuICAqIEBwYXJhbSBmdW5jIGZ1bmN0aW9uIG5hbWUgdG8gY2FsbCBpbiBDbGFzc3Jvb21TZXJ2aWNlXG4gICogQHBhcmFtIHBhcmFtcyBvcHRpb25hbCBwYXJhbWV0ZXJzIHRvIHNlbmQgdG8gZnVuY3Rpb25cbiAgKiBcbiAgKiBDYWxscyB0aGUgcmVsZXZhbnQgZnVuY2l0b24gaW4gQ2xhc3Nyb29tU2VydmljZVxuICAqIFRoZSBwYXJhbWF0ZXJzIG11c3QgYmUgd2hhdCBpcyBleHBlY3RlZCBpbiB0aGUgY2FsbGVkIGZ1bmN0aW9uXG4gICogaW4gQ2xhc3Nyb29tU2VydmljZSBhbmQgY2FuIG9ubHkgYmUgYmFzaWMgdHlwZXM6IHN0cmluZyxcbiAgKiBudW1iZXIsIG9iamVjdCBvciBib29sZWFuLlxuICAqIFxuICAqL1xuICBhc3luYyBjYWxsU3luYyhmdW5jOnN0cmluZywgcGFyYW1zPzphbnlbXSkge1xuICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGVkKCk7XG4gIFxuICAgIGNvbnN0IGRhdGE6R0FTRmllbGRzID0gcGFyYW1zPyB7XG4gICAgICAnZnVuY3Rpb24nOiBmdW5jLFxuICAgICAgJ3BhcmFtZXRlcnMnOiBwYXJhbXNcbiAgICB9IDoge1xuICAgICAgJ2Z1bmN0aW9uJzogZnVuY1xuICAgIH07XG4gICAgXG4gICAgLy8gdXNpbmcgZGV2LW1vZGUgcmlnaHQgbm93IHNvIHdlIG9ubHkgbmVlZCB0byBydW4gY2xhc3AgcHVzaCBvbiBDbGFzc3Jvb21TZXJ2aWNlXG4gICAgZGF0YS5kZXZNb2RlID0gdHJ1ZTtcbiAgICBcbiAgICByZXR1cm4gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vc2NyaXB0Lmdvb2dsZWFwaXMuY29tL3YxL3NjcmlwdHMvTTFIMEJsVGt2OTgzUE5WVEpqRFhqTnFYTHhtUWlCZ0d6OnJ1bj9hbHQ9anNvbicsIHtcbiAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCZWFyZXIgJyArIHRoaXMuYXV0aFRva2VuXG4gICAgICB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICB9KS50aGVuKFxuICAgICAgcmVzcCA9PiByZXNwLmpzb24oKVxuICAgICk7XG4gIH1cblxuLyoqXG4qIFxuKiBAcGFyYW0gcGFyYW0wIFxuKi9cbmFzeW5jIGluaXRTeW5jKGNvdXJzZSwgb3JpZ0NvdXJzZSwgZnVsbFN5bmNOZWVkZWQpIHtcbiAgXG4gIC8vIE1vY2stZGF0YSBmb3IgS0VEXG4gIGNvbnN0IGVtcHR5T3JNb2NrID0ge307XG4gIFxuICBpZiAoY291cnNlLnNjaG9vbCA9PT0gJ0tFRCcpIHtcbiAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIGNvdXJzZS5zdHVkeUdyb3Vwcykge1xuICAgICAgZW1wdHlPck1vY2tbZ3JvdXBdID0gbW9ja1R1aXRpb25TdHVkZW50c1tncm91cF0/IG1vY2tUdWl0aW9uU3R1ZGVudHNbZ3JvdXBdLm1hcChzID0+IHMuc3R1ZGVudEVtYWlsQWRkcmVzcykgOiBbXTtcbiAgICB9XG4gIH1cbiAgLy8gLS0gbW9ja1xuICBcbiAgLy8gR2V0IGVkc1NjaG9vbE5hbWUgZnJvbSBLZWRCYWNrZW5kOlxuICBjb25zdCBkYXRhID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuaHR0cC5nZXQoJ3NjaG9vbHMnLCB7J2NhY2hlQnVzdCc6ICdzdGF0aWMnLCAnbmFtZSc6IGNvdXJzZS5zY2hvb2x9KS50aGVuKHJlc3AgPT4gIHJlc3AuanNvbigpKTtcbiAgY29uc3Qge2Vkc1NjaG9vbE5hbWVHeW1ufSA9IGRhdGFbMF07XG4gIFxuICBjb25zdCBzdHVkeUdyb3VwU3R1ZGVudHMgPSBlZHNTY2hvb2xOYW1lR3ltbj8ge30gOiBlbXB0eU9yTW9jaztcbiAgXG4gIC8vIEdldCBhbmQgbWVyZ2Ugc3R1ZGVudHMgZnJvbSBFRFMgdHVpdGlvbiBncm91cHM6XG4gIGlmIChjb3Vyc2Uuc3R1ZHlHcm91cHMpIHtcbiAgICBpZiAoZWRzU2Nob29sTmFtZUd5bW4pIHtcbiAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgY291cnNlLnN0dWR5R3JvdXBzKSB7XG4gICAgICAgIGNvbnN0IHR1aXRpb25Hcm91cFN0dWRlbnRzOiBFRFNUdWl0aW9uU3R1ZGVudFtdID0gYXdhaXQgZW52LmVkc0NsaWVudC5nZXRUdWl0aW9uR3JvdXBTdHVkZW50cyh7c2Nob29sTmFtZTogZWRzU2Nob29sTmFtZUd5bW4sIHR1aXRpb25Hcm91cE5hbWU6IGdyb3VwfSlcbiAgICAgICAgc3R1ZHlHcm91cFN0dWRlbnRzW2dyb3VwXcKgPSB0dWl0aW9uR3JvdXBTdHVkZW50cy5tYXAocyA9PiBzLnN0dWRlbnRFbWFpbEFkZHJlc3MpO1xuICAgICAgfVxuICAgIH0gXG4gIH1cbiAgXG4gIC8vIGNyZWF0ZSBhIHN1YnNldCBvZiB0aGUgY291cnNlIGFhbmQgY2FhbGN1bGF0ZSBjaGFuZ2VzXG4gIGNvbnN0IHtzdWJzZXQsIGNoYW5nZXMsIGFjdGlvbn0gPSB0aGlzLmRpZmZDb3Vyc2UoY291cnNlLCBvcmlnQ291cnNlLCBmdWxsU3luY05lZWRlZCk7XG4gIFxuICAvLyBzZW5kIHRoZSBjaGFuZ2VzIHRvIGNsYXNzcm9vbS1zZXJ2aWNlIHdpdGgge2lkLCBzY2hvb2wgY29kZX0gdG8gdXBkYXRlIGNsYXNzcm9vbXNcbiAgLy8gc2hvdWxkIHdlIHNlbmQgdGhlIHVzZXJzIGZyb20gdGhlIGdyb3VwcyBvciBzaG91bGQgY2xhc3Nyb29tLXNlcnZpY2UgZ2V0IHRoZXNlIGZyb20gRURTP1xuICAvLyBpZiB3ZSBoYW5kbGUgdXNlcnMgaW4ga2VkY29tcG9uZW50cyBhIGNoZWNrIGlmIHRoZXJlIGFyZSBjaGFuZ2VzIHNob3VsZCBwcm9iYWJseSBiZSBtYWRlP1xuICBjb25zb2xlLmxvZyhzdWJzZXQpO1xuICBjb25zb2xlLmxvZyhjaGFuZ2VzKTtcbiAgY29uc29sZS5sb2coc3R1ZHlHcm91cFN0dWRlbnRzKTtcbiAgaWYgKGFjdGlvbiA9PSAnZnVsbCcpIHtcbiAgICByZXR1cm4gdGhpcy5jcmVhdGVDbGFzc3Jvb20oc3Vic2V0LCBzdHVkeUdyb3VwU3R1ZGVudHMpO1xuICB9IGVsc2UgaWYgKGFjdGlvbiA9PSAndXBkYXRlJykge1xuICAgIHJldHVybiB0aGlzLnVwZGF0ZUNsYXNzcm9vbSh7Y291cnNlOiBzdWJzZXQsIGNoYW5nZXMsIHN0dWR5R3JvdXBTdHVkZW50c30pO1xuICB9XG59XG5cblxuYXN5bmMgYXJjaGl2ZShjb3Vyc2UpIHtcbiAgY29uc29sZS5sb2coJ2FyY2hpdmluZycpO1xuICByZXR1cm4gdGhpcy5jYWxsU3luYygnYXJjaGl2ZScsIFtjb3Vyc2VdKTtcbn1cblxuXG4vKipcbiogXG4qIEBwYXJhbSBjb3Vyc2UgY3VycmVudCBjb3Vyc2Ugc3RhdGVcbiogQHBhcmFtIG9yaWdDb3Vyc2UgcHJldmlvdXMgY291cnNlIHN0YXRlXG4qIFxuKiBDcmVhdGVzIGEgc3Vic2V0IG9mIGNvdXJzZSBhbmQgbWFha2VzIGEgZGlmZiBhZ2FpbnN0IHByZXZpb3VzIGNvdXJzZSBzdGF0ZVxuKiBOb3RlOiB0aGVyZSBhcmUgcHJvYmFibHkgbW9yZSB3ZSBjb3VsZCBmaWx0ZXIgb3V0IGJlZm9yZSBzZW5kaW5nIHRvIENsYXNhc3Jvb21TZXJ2aWNlXG4qL1xuZGlmZkNvdXJzZShjb3Vyc2UsIG9yaWdDb3Vyc2UsIGZ1bGxTeW5jTmVlZGVkKSB7XG4gIC8vIEZpbHRlciBvdXQgYXNzaWdubWVudHMgZnJvbSB0YXNrcyBhbmQgc3Vic2V0IHRvIG9ubHkgcHJvcGVydGllcyB3ZSBhcmUgaW50ZXJlc3RlZCBpblxuICBjb25zdCBzdWJzZXRBc3NpZ25tZW50cyA9ICh0YXNrcykgPT4ge1xuICAgIGNvbnN0IGFzc2lnbm1lbnRzID0gdGFza3MuZmlsdGVyKHQgPT4gdC5hc3NpZ25tZW50ID09PSB0cnVlKTtcbiAgICByZXR1cm4gYXNzaWdubWVudHMubWFwKHQgPT4ge1xuICAgICAgY29uc3Qge2Fzc2lnbm1lbnQsIGRlYWRsaW5lLCBpZCwgbmFtZX0gPSB0O1xuICAgICAgcmV0dXJuIHthc3NpZ25tZW50LCBkZWFkbGluZSwgaWQsIG5hbWV9O1xuICAgIH0pO1xuICB9XG4gIFxuICAvLyAvLyBDYWxjdWxhdGVzIHdoYXRzIGJlZW4gYWRkZWQgYW5kIHJlbW92ZWQgYmV0d2VlbnMgY2hhbmdlcyB0byBhbiBhcnJheS5cbiAgLy8gLy8gTm90ZTogUGVyaGFwcyB3ZSBzaG91bGQgcmV0dXJuIGZhbHNlIGlmIG5vIGNoYW5nZXM/XG4gIC8vIGNvbnN0IGRpZmZBcnJheXMgPSBmdWxsU3luY05lZWRlZCA/IG51bGwgOiAoYXJyMTogQXJyYXk8YW55PiwgYXJyMjogQXJyYXk8YW55Pik6IHthZGRlZDogQXJyYXk8YW55PiwgcmVtb3ZlZDogQXJyYXk8YW55Pn0gfCBib29sZWFuID0+IHtcbiAgLy8gICBjb25zdCBhcnIxc2V0ID0gbmV3IFNldChhcnIxKTtcbiAgLy8gICBjb25zdCBhcnIyc2V0ID0gbmV3IFNldChhcnIyKTtcbiAgLy8gICBjb25zdCBjaGFuZ2VzID0ge1xuICAvLyAgICAgYWRkZWQ6IGFycjIuZmlsdGVyKCh4KSA9PiAhYXJyMXNldC5oYXMoeCkpLFxuICAvLyAgICAgcmVtb3ZlZDogYXJyMS5maWx0ZXIoKHgpID0+ICFhcnIyc2V0Lmhhcyh4KSksXG4gIC8vICAgfVxuICAvLyAgIHJldHVybiAoY2hhbmdlcy5hZGRlZC5sZW5ndGggPiAwIHx8IGNoYW5nZXMucmVtb3ZlZC5sZW5ndGggPiAwKSA/IGNoYW5nZXMgOiBmYWxzZTtcbiAgLy8gfVxuICBcbiAgLy8gY3JlYXRlIHRoZSBzdWJzZXQgb2YgY291cnNlXG4gIGNvbnN0IHN1YnNldCA9ICgoe1xuICAgIGlkLFxuICAgIHNjaG9vbCxcbiAgICBjb2RlLFxuICAgIG5hbWUsXG4gICAgZGVzY3JpcHRpb24sXG4gICAgdGFza3MsXG4gICAgcmVzcG9uc2libGVUZWFjaGVycyxcbiAgICBzdHVkeUdyb3Vwc30pID0+ICh7IFxuICAgICAgaWQsXG4gICAgICBzY2hvb2wsXG4gICAgICBjb2RlLFxuICAgICAgbmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uLFxuICAgICAgdGFza3MsXG4gICAgICByZXNwb25zaWJsZVRlYWNoZXJzLFxuICAgICAgc3R1ZHlHcm91cHN9KVxuICAgICkoY291cnNlKTtcbiAgICAgIFxuICAgIC8vIG9ubHkgaGFuZGxlIHRzYWtzIHRoYXQgYXJlIGFhc3NpZ25tZW50c1xuICAgIChzdWJzZXQudGFza3MgYXMgYW55W10pID0gc3Vic2V0QXNzaWdubWVudHMoc3Vic2V0LnRhc2tzKTtcbiAgICAgIFxuICAgIGNvbnN0IGNoYW5nZXMgPSBvcmlnQ291cnNlPyB7XG4gICAgICB0YXNrczogc3Vic2V0QXNzaWdubWVudHMob3JpZ0NvdXJzZS50YXNrcyksXG4gICAgICByZXNwb25zaWJsZVRlYWNoZXJzOiBvcmlnQ291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMsXG4gICAgICBzdHVkeUdyb3Vwczogb3JpZ0NvdXJzZS5zdHVkeUdyb3Vwc1xuICAgIH0gOiBmYWxzZTtcblxuICAgIHJldHVybiB7c3Vic2V0LCBjaGFuZ2VzLCBhY3Rpb246IFwidXBkYXRlXCJ9O1xuXG5cbiAgICAvLyBpZiAob3JpZ0NvdXJzZS5nb29nbGVDcmVhdGVDbGFzc3Jvb21zICE9PSB0cnVlKSB7XG4gICAgLy8gICBjb25zb2xlLmxvZygnQ2xhc3Nyb29tIHN3aXRjaGVkIG9uIHNvIHN5bmMgZXZlcnl0aGluZycpO1xuICAgIC8vICAgLy8gU2VuZCBzdWJzZXQgdG8gY2xhc3Nyb29tLXNlcnZpY2UgdG8gY3JlYXRlIHRoZSBjbGFzc3Jvb21zXG4gICAgLy8gICByZXR1cm4ge3N1YnNldCwgY2hhbmdlczoge30sIGFjdGlvbjogXCJmdWxsXCJ9O1xuICAgIC8vIH0gZWxzZSB7XG4gICAgLy8gICBjb25zb2xlLmxvZygnRGF0YSBoYXMgYmVlbiB1cGRhdGVkIHNvIGNhbGN1bGF0ZSBhbmQgc3luYyBjaGFuZ2VzJyk7XG4gICAgLy8gICAvLyByZWRvIHRvIG9ubHkgc2VuZCBvbGQgc3R1ZHlHcm91cHNcbiAgICAvLyAgIGNvbnN0IGNoYW5nZXMgPSBvcmlnQ291cnNlLnN0dWR5R3JvdXBzO1xuICAgIC8vICAgLy8gY29uc3QgY2hhbmdlcyA9IHtcbiAgICAvLyAgIC8vICAgbmFtZTogKG9yaWdDb3Vyc2UubmFtZSAhPT0gY291cnNlLm5hbWUpPyBjb3Vyc2UubmFtZSA6IGZhbHNlLFxuICAgIC8vICAgLy8gICBkZXNjcmlwdGlvbjogKG9yaWdDb3Vyc2UuZGVzY3JpcHRpb24gIT09IGNvdXJzZS5kZXNjcmlwdGlvbik/IGNvdXJzZS5kZXNjcmlwdGlvbiA6IGZhbHNlLFxuICAgIC8vICAgLy8gICB0YXNrczogZGlmZkFycmF5cyhzdWJzZXRBc3NpZ25tZW50cyhvcmlnQ291cnNlLnRhc2tzKSwgc3Vic2V0LnRhc2tzKSxcbiAgICAvLyAgIC8vICAgcmVzcG9uc2libGVUZWFjaGVyczogZGlmZkFycmF5cyhvcmlnQ291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMubWFwKHQgPT4gdC51cmwpLCBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycy5tYXAodCA9PiB0LnVybCkpLFxuICAgIC8vICAgLy8gICBzdHVkeUdyb3Vwczogb3JpZ0NvdXJzZS5zdHVkeUdyb3Vwcz8gZGlmZkFycmF5cyhvcmlnQ291cnNlLnN0dWR5R3JvdXBzLCBjb3Vyc2Uuc3R1ZHlHcm91cHMpOiBmYWxzZSxcbiAgICAvLyAgIC8vIH1cbiAgICAgICAgXG4gICAgLy8gICByZXR1cm4ge3N1YnNldCwgY2hhbmdlcywgYWN0aW9uOiBcInVwZGF0ZVwifTtcbiAgICAvLyB9XG4gIH1cbiAgICBcbiAgYXN5bmMgY3JlYXRlQ2xhc3Nyb29tKGNvdXJzZSwgc3R1ZHlHcm91cFN0dWRlbnRzKSB7XG4gICAgcmV0dXJuIHRoaXMuY2FsbFN5bmMoJ2NyZWF0ZUNsYXNzcm9vbXMnLCBbY291cnNlLCBzdHVkeUdyb3VwU3R1ZGVudHNdKTtcbiAgfVxuICAgIFxuICBhc3luYyB1cGRhdGVDbGFzc3Jvb20oe2NvdXJzZSwgY2hhbmdlcywgc3R1ZHlHcm91cFN0dWRlbnRzfSkge1xuICAgIHJldHVybiB0aGlzLmNhbGxTeW5jKCd1cGRhdGVDbGFzc3Jvb21zJywgW2NvdXJzZSwgY2hhbmdlcywgc3R1ZHlHcm91cFN0dWRlbnRzXSk7XG4gIH1cbn1cbiAgIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgTCwgc2hvd0luZm8sIHNob3dFcnJvciwgZmxhdHRlbiwgY29tcGFyZVByb3AgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQge2hhc0NoYW5nZXN9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IENvdXJzZSwgUmVzb3VyY2UsIEtub3dsZWRnZVJlcXVpcmVtZW50LCBTdWJqZWN0LCBBYmlsaXR5LCBUYXNrLCBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBCYXRjaFJ1bm5lciwgSHR0cEVycm9yLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSAnLi9jb3Vyc2UtYmFubmVyJztcbmltcG9ydCB7IElubmVyRWRpdENvdXJzZSB9IGZyb20gJy4vaW5uZXItZWRpdC1jb3Vyc2UnO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcbmltcG9ydCB7IHVwZGF0ZURvY3VtZW50R3JhcGhzLCBhcHBseUV0YWdzLCB1cGRhdGVDb3Vyc2VCdWlsZGVyU3RhdHVzLCBsb2FkQ291cnNlLCB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcywgdXBkYXRlQ3JlYXRpb25TdGFtcCwgdXBkYXRlTW9kaWZpY2F0aW9uU3RhbXAgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBJQ291cnNlRWRpdG9ySG9zdCwgRGlhbG9nLCBEaWFsb2dDb250YWluZXIgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvdXJzZS1lZGl0b3ItaG9zdCc7XG5pbXBvcnQgeyBSZW1vdmVJdGVtIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0nO1xuaW1wb3J0IHsgZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzLCBnZXRJZHNOb3RDb3ZlcmVkQnlUYXNrcywgZ2V0U29mdEFjY2Vzc0xpc3QgfSBmcm9tICcuL2J1c2luZXNzLWxvZ2ljJztcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xuaW1wb3J0IHsgbXlTY2hvb2xDb3Vyc2VzUmVwbyB9IGZyb20gJy4uLy4uLy4uL3JlcG9zL3NjaG9vbC1jb3Vyc2VzJztcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSBcIi4uLy4uLy4uL2FjY2Vzcy1jb250cm9sXCI7XG5pbXBvcnQgeyBnZXRDdXJyZW50VXNlciB9IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvY3VycmVudC11c2VyJztcbmltcG9ydCB7IGZlYXR1cmVzIH0gZnJvbSAnLi4vLi4vLi4vZmVhdHVyZXMvZmVhdHVyZXMnO1xuaW1wb3J0IHsgQ2xhc3Nyb29tU3luYyB9IGZyb20gJy4uLy4uLy4uL2FwaXMvZ29vZ2xlLWNsYXNzcm9vbS1zeW5jJztcbmltcG9ydCB7IENyb3NzSWNvbiB9IGZyb20gJ3JlYWN0LXNlbGVjdC9saWIvY29tcG9uZW50cy9pbmRpY2F0b3JzJztcblxuY29uc3QgY2F0Y2hlciA9IGNmZy5FTlZJUk9OTUVOVCA9PT0gJ3Byb2R1Y3Rpb24nID9cbiAgc2hvd0Vycm9yIDogbnVsbDtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIHN1YmplY3RJZD86IHN0cmluZztcbiAgaXNUZW1wbGF0ZT86IGJvb2xlYW47XG4gIHRlbXBsYXRlSWQ/OiBzdHJpbmc7XG4gIHZpZXc/OiAnc3R1ZGVudFBhZ2UnIHwgJ2NvdXJzZUJ1aWxkZXInIHwgJ3RlbXBsYXRlQnVpbGRlcic7XG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcbiAgZmVlZGJhY2tVcmw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgb3JpZ0NvdXJzZTogQ291cnNlIHwgbnVsbDtcbiAgb3JpZ1RlbXBsYXRlOiBDb3Vyc2UgfCBudWxsO1xuICBjb3Vyc2U6IENvdXJzZTtcbiAgYWxsQ291cnNlcz86IENvdXJzZVtdO1xuICBkaWFsb2dDb250YWluZXJzOiBEaWFsb2dDb250YWluZXJbXTsgLy8gV2hlbiBlZGl0aW5nIGl0ZW1zLCBpdCBtYXkgc2hvdyBhcyBhIGRpYWxvZ1xuICBoYXNVbnNhdmVkRGF0YTogYm9vbGVhbjtcbiAgdmlldzogJ3N0dWRlbnRQYWdlJyB8ICdjb3Vyc2VCdWlsZGVyJyB8ICd0ZW1wbGF0ZUJ1aWxkZXInO1xuICBjbGFzc3Jvb21TeW5jSW5Qcm9ncmVzczogYm9vbGVhbjtcbn1cblxuY29uc3QgQ09ORklSTV9OQVZJR0FURV9NRVNTQUdFID1cbiAgTGBEdSBoYXIgb3NwYXJhdCBkYXRhLiBWw6RsaiBhdmJyeXQgb2NoIHRyeWNrIENUUkwrUyBvbSBkdSB2aWxsIHNwYXJhIGbDtnJzdC5gO1xuICBcbmNvbnN0IERFRkFVTFRfU1RBVEU6IFN0YXRlID0ge1xuICBvcmlnQ291cnNlOiBudWxsLFxuICBvcmlnVGVtcGxhdGU6IG51bGwsXG4gIGNvdXJzZTogbnVsbCxcbiAgZGlhbG9nQ29udGFpbmVyczogW10sXG4gIGhhc1Vuc2F2ZWREYXRhOiBmYWxzZSxcbiAgdmlldzogJ2NvdXJzZUJ1aWxkZXInLFxuICBjbGFzc3Jvb21TeW5jSW5Qcm9ncmVzczogZmFsc2Vcbn07XG5cbmV4cG9ydCBjbGFzcyBFZGl0Q291cnNlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiBpbXBsZW1lbnRzIElDb3Vyc2VFZGl0b3JIb3N0IHtcbiAgcGFnZVlPZmZzZXQ6IG51bWJlcjtcbiAgY29udGVudERpdjogSFRNTERpdkVsZW1lbnQ7XG4gIGNvbnRlbnRZUG9zOiBudW1iZXI7XG4gIGlzU2F2aW5nOiBib29sZWFuO1xuICBkaWFsb2dzOiBEaWFsb2dbXTtcblxuICBzZXRTdGF0ZVByb21pc2VkIChzdGF0ZTogUGFydGlhbDxTdGF0ZT4pIDogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fc2V0U3RhdGUoe2hhc1Vuc2F2ZWREYXRhOiB0cnVlLCAuLi5zdGF0ZX0pO1xuICB9XG5cbiAgc2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUgKHN0YXRlOiBQYXJ0aWFsPFN0YXRlPikgOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLl9zZXRTdGF0ZShzdGF0ZSk7XG4gIH1cblxuICBfc2V0U3RhdGUgKHN0YXRlOiBQYXJ0aWFsPFN0YXRlPikgOiBQcm9taXNlPGFueT4ge1xuICAgIGlmIChzdGF0ZS5jb3Vyc2UpIHtcbiAgICAgIHtcbiAgICAgICAgLy9cbiAgICAgICAgLy8gTWFpbnRhaW4gY291cnNlIHRhc2sgbGlua3MgKHJlbW92ZSBsaW5rcyB0byB0YXNrcyB0aGF0IGFyZSBub3QgdXNlZFxuICAgICAgICAvLyBieSBhbnkgbW9kdWxlKVxuICAgICAgICAvL1xuICAgICAgICBjb25zdCB7dGFza3MsIG1vZHVsZXN9ID0gc3RhdGUuY291cnNlO1xuICAgICAgICBjb25zdCB1c2VkVGFza0lkcyA9IHt9O1xuICAgICAgICBtb2R1bGVzLmZvckVhY2gobW9kdWxlID0+IG1vZHVsZS50YXNrSWRzLmZvckVhY2goaWQgPT4gdXNlZFRhc2tJZHNbaWRdID0gdHJ1ZSkpO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZENvdXJzZVRhc2tzID0gdGFza3MuZmlsdGVyKHQgPT4gdXNlZFRhc2tJZHNbdC5pZF0pO1xuICAgICAgICBjb25zdCBtb2RpZmllZENvdXJzZSA9IHsuLi5zdGF0ZS5jb3Vyc2V9O1xuICAgICAgICBtb2RpZmllZENvdXJzZS50YXNrcyA9IGZpbHRlcmVkQ291cnNlVGFza3M7XG4gICAgICAgIHN0YXRlID0gey4uLnN0YXRlLCBjb3Vyc2U6IG1vZGlmaWVkQ291cnNlfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJbnZva2Ugb3VyIGNvdXJzZSBpbnRvIHN0YXRlIHByb3BlcnR5IGFsbENvdXJzZXMgc28gdGhhdCB0aGVcbiAgICAvLyByaWdodC1oYW5kIHNpZGUgbGlzdCBvZiBjb3Vyc2VzIGdldHMgdXBkYXRlIGltbWVkaWF0ZWx5IHdpdGhcbiAgICAvLyB0aGUgcHVibGlzaGFibGUgc3RhdGUgb2YgdGhpcyBjb3Vyc2UuXG4gICAgbGV0IGFsbENvdXJzZXMgPSBzdGF0ZS5hbGxDb3Vyc2VzIHx8IHRoaXMuc3RhdGUuYWxsQ291cnNlcztcbiAgICBjb25zdCBjb3Vyc2UgPSBzdGF0ZS5jb3Vyc2UgfHwgdGhpcy5zdGF0ZS5jb3Vyc2U7XG4gICAgaWYgKGFsbENvdXJzZXMpIHtcbiAgICAgIGNvbnN0IGlkeE91ckNvdXJzZSA9IGFsbENvdXJzZXMuZmluZEluZGV4KGMgPT4gYy5pZCA9PT0gdGhpcy5wcm9wcy5pZCk7XG4gICAgICBhbGxDb3Vyc2VzID0gdXBkYXRlKGFsbENvdXJzZXMsIHskc3BsaWNlOiBbW2lkeE91ckNvdXJzZSwgMSwgY291cnNlXV19KTtcbiAgICAgIHN0YXRlID0gey4uLnN0YXRlfTtcbiAgICAgIHN0YXRlLmFsbENvdXJzZXMgPSBhbGxDb3Vyc2VzO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHN1cGVyLnNldFN0YXRlKCgpPT5zdGF0ZSBhcyBTdGF0ZSwgcmVzb2x2ZSkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7Li4uREVGQVVMVF9TVEFURX07XG4gICAgdGhpcy51cGRhdGUgPSB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVmRGlhbG9nID0gdGhpcy5yZWZEaWFsb2cuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNvbnRlbnRZUG9zID0gMDtcbiAgICB0aGlzLm9uS2V5RG93biA9IHRoaXMub25LZXlEb3duLmJpbmQodGhpcyk7XG4gICAgdGhpcy5iZWZvcmVVbmxvYWQgPSB0aGlzLmJlZm9yZVVubG9hZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DbGlja1ByZXZlbnRVbmxvYWQgPSB0aGlzLm9uQ2xpY2tQcmV2ZW50VW5sb2FkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pc1NhdmluZyA9IGZhbHNlO1xuICAgIHRoaXMuZGlhbG9ncyA9IFtdO1xuICAgIGlmIChwcm9wcy52aWV3KSB0aGlzLnN0YXRlID0ge1xuICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgIHZpZXc6IHByb3BzLnZpZXdcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMubG9hZCgpLmNhdGNoKGNhdGNoZXIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB0aGlzLmJlZm9yZVVubG9hZCk7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja1ByZXZlbnRVbmxvYWQpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuYmVmb3JlVW5sb2FkKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrUHJldmVudFVubG9hZCk7XG4gICAgdXBkYXRlQ291cnNlQnVpbGRlclN0YXR1cygnJyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wczogUHJvcHMpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSAmJiB0aGlzLnN0YXRlLmNvdXJzZSkge1xuICAgICAgaWYgKG5leHRQcm9wcy5pZCAhPT0gdGhpcy5wcm9wcy5pZCB8fCBuZXh0UHJvcHMudGVtcGxhdGVJZCAhPT0gdGhpcy5wcm9wcy50ZW1wbGF0ZUlkKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZChERUZBVUxUX1NUQVRFKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5leHRQcm9wcy52aWV3ICE9PSB0aGlzLnByb3BzLnZpZXcpIHtcbiAgICAgIHRoaXMuc2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUoe3ZpZXc6IG5leHRQcm9wcy52aWV3fSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogUHJvcHMsIHByZXZTdGF0ZTogU3RhdGUpIHtcbiAgICBpZiAodGhpcy5jb250ZW50RGl2KSB7XG4gICAgICBjb25zdCBjb250ZW50RGl2OiBIVE1MRGl2RWxlbWVudCA9IGZpbmRET01Ob2RlKHRoaXMuY29udGVudERpdikgYXMgSFRNTERpdkVsZW1lbnQ7XG4gICAgICBpZiAoY29udGVudERpdikge1xuICAgICAgICB0aGlzLmNvbnRlbnRZUG9zID0gY29udGVudERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZTdGF0ZSAmJiBwcmV2U3RhdGUuY291cnNlKSB7XG4gICAgICAvLyBUaGlzIHdhcyBub3QgdGhlIGluaXRpYWwgdXBkYXRlLlxuICAgICAgLy8gSWYgcHJvcHMgaGF2ZSBiZWVuIHVwZGF0ZWQgdG8gcG9pbnQgb3V0IGFub3RoZXIgY291cnNlIG9yIHRlbXBsYXRlLCByZXNldCBjb21wb25lbnQ6XG4gICAgICBpZiAodGhpcy5wcm9wcy5pZCAhPT0gcHJldlByb3BzLmlkIHx8IHRoaXMucHJvcHMudGVtcGxhdGVJZCAhPT0gcHJldlByb3BzLnRlbXBsYXRlSWQpIHtcbiAgICAgICAgdGhpcy5sb2FkKCkuY2F0Y2goY2F0Y2hlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFwcmV2U3RhdGUuaGFzVW5zYXZlZERhdGEgJiYgdGhpcy5zdGF0ZS5oYXNVbnNhdmVkRGF0YSkge1xuICAgICAgdXBkYXRlQ291cnNlQnVpbGRlclN0YXR1cygndW5zYXZlZCcpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGxvYWRGcm9tVGVtcGxhdGUodGVtcGxhdGVJZDogc3RyaW5nKSB7XG4gICAgc2hvd0luZm8oXCJMYWRkYXIgZGF0YSBmcsOlbiBtYWxsLi4uXCIpO1xuICAgIGNvbnN0IHRlbXBsYXRlID0gYXdhaXQgbG9hZENvdXJzZSh0ZW1wbGF0ZUlkLCB7aW5jbHVkZVRlbXBsYXRlQ2hhaW46IHRydWV9KTtcbiAgICBjb25zdCBjb3Vyc2UgPSB1cGRhdGVDcmVhdGlvblN0YW1wKERhdGUubm93KCksIHRlbXBsYXRlLCBlbnYuY3VycmVudFVzZXIpO1xuICAgIGNvdXJzZS5pZCA9IGNyZWF0ZVVVSUQoKTtcbiAgICBjb3Vyc2UucGFyZW50SWQgPSB0ZW1wbGF0ZUlkO1xuICAgIGNvdXJzZS5hY3RpdmUgPSBmYWxzZTtcbiAgICBjb3Vyc2UuaXNUZW1wbGF0ZSA9IGZhbHNlO1xuICAgIGNvdXJzZS50ZW1wbGF0ZUNoYWluID0gWy4uLmNvdXJzZS50ZW1wbGF0ZUNoYWluXTtcbiAgICBjb3Vyc2UudGVtcGxhdGVDaGFpbi5wdXNoKHtpZDogdGVtcGxhdGVJZCwgJG1ldGE6ICdyZWYnfSBhcyBDb3Vyc2UpO1xuICAgIGNvbnN0IG15U2Nob29sID0gZW52LmN1cnJlbnRVc2VyLnNjaG9vbDtcbiAgICBjb3Vyc2Uuc2Nob29sID0gbXlTY2hvb2w7XG4gICAgY291cnNlLmRlc2NyaXB0aW9uID0gXCJcIjtcbiAgICBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycyA9IFt7bmFtZTogZW52LmN1cnJlbnRVc2VyLmRpc3BsYXlOYW1lLCBlbWFpbDogZW52LmN1cnJlbnRVc2VyLm1haWwsIGFjY2VzczogJ2Z1bGwnLCB1cmw6IGVudi5jdXJyZW50VXNlci5tYWlsfV07XG4gICAgZGVsZXRlIGNvdXJzZS5zdHVkeUdyb3VwcztcbiAgICBjb3Vyc2UuYWNsID0gW1xuICAgICAgXCJyb2xlOlVTRVI6UlwiLCAvLyBBbGwgdXNlcnMgbWF5IHZpZXcgaXQuIChDb3VsZCBoYXZlIHJlc3RyaWN0ZWQgaXQgdG8gc2Nob29sLCBidXQgbm90IG5lc2Nlc3NhcnkhKVxuICAgICAgYHNjaG9vbFJvbGU6JHtteVNjaG9vbH0vRU1QTE9ZRUU6U2AgLy8gT3RoZXIgdGVhY2hlcnMgYXQgc2FtZSBzY2hvb2wgc2hvdWxkIGJlIGFibGUgdG8gbW9kaWZ5IHRoZSBjb3Vyc2UuXG4gICAgXTtcbiAgICBkZWxldGUgY291cnNlLiRldGFnO1xuICAgIGRlbGV0ZSBjb3Vyc2UuY3JlYXRlZEJ5O1xuICAgIGRlbGV0ZSBjb3Vyc2UuY3JlYXRlZERhdGU7XG4gICAgZGVsZXRlIGNvdXJzZS5tb2RpZmllZEJ5O1xuICAgIGRlbGV0ZSBjb3Vyc2UubW9kaWZpZWREYXRlO1xuICAgIGRlbGV0ZSBjb3Vyc2UuYWN0aXZhdGVkQnk7XG4gICAgZGVsZXRlIGNvdXJzZS5hY3RpdmF0ZWREYXRlO1xuICAgIGRlbGV0ZSBjb3Vyc2UuZ29vZ2xlQ2xhc3NSb29tQ29kZTtcbiAgICBkZWxldGUgY291cnNlLmdvb2dsZUNsYXNzUm9vbVVSTDtcbiAgICBkZWxldGUgY291cnNlLmdvb2dsZUNyZWF0ZUNsYXNzcm9vbXM7XG4gICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHsgY291cnNlLCBvcmlnQ291cnNlOiBudWxsLCBvcmlnVGVtcGxhdGU6IHRlbXBsYXRlIH0pO1xuICAgIHNob3dJbmZvKFwiXCIpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICB1cGRhdGVDb3Vyc2VCdWlsZGVyU3RhdHVzKCcnKTtcbiAgICBpZiAodGhpcy5wcm9wcy5pZCkge1xuICAgICAgYXdhaXQgdGhpcy5sb2FkRXhpc3RpbmdDb3Vyc2UodGhpcy5wcm9wcy5pZCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnRlbXBsYXRlSWQpIHtcbiAgICAgIGF3YWl0IHRoaXMubG9hZEZyb21UZW1wbGF0ZSh0aGlzLnByb3BzLnRlbXBsYXRlSWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTGBPZ2lsdGlnIHBhcmFtZXRlci4gaWQgZWxsZXIgdGVtcGxhdGVJZCBtw6VzdGUgYW5nZXNgKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBsb2FkRXhpc3RpbmdDb3Vyc2UoY291cnNlSWQ6IHN0cmluZykge1xuICAgIHNob3dJbmZvKFwiTGFkZGFyIGt1cnNcIik7XG4gICAgY29uc3QgY291cnNlID0gYXdhaXQgbG9hZENvdXJzZShjb3Vyc2VJZCk7XG4gICAgaWYgKCFjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycykgY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMgPSBbe25hbWU6IGVudi5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSwgZW1haWw6IGVudi5jdXJyZW50VXNlci5tYWlsLCBhY2Nlc3M6ICdmdWxsJywgdXJsOiBlbnYuY3VycmVudFVzZXIubWFpbH1dO1xuICAgIGF3YWl0IHRoaXMuc2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUoeyBjb3Vyc2UsIG9yaWdDb3Vyc2U6IGNvdXJzZSB9KTtcbiAgICBzaG93SW5mbyhcIlwiKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZShjb3Vyc2VVcGRhdGVzKSB7XG4gICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHsgY291cnNlOiB1cGRhdGUodGhpcy5zdGF0ZS5jb3Vyc2UsIGNvdXJzZVVwZGF0ZXMpIH0pOyAgXG4gICAgLy9jaGVjayBjbGFzc3Jvb20gY2hhbmdlc1xuICAgIGlmIChmZWF0dXJlcy5zdHVkeUdyb3Vwcyl7XG4gICAgdGhpcy5fY2hlY2tDbGFzc3Jvb21DaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZGVsZXRlQ291cnNlKCkge1xuICAgIHNob3dJbmZvKFwiUmFkZXJhciBrdXJzZW4uLi5cIik7XG4gICAgY29uc3QgY291cnNlU2Nob29sID0gdGhpcy5zdGF0ZS5jb3Vyc2Uuc2Nob29sO1xuICAgIGNvbnN0IHBhcmVudElkID0gdGhpcy5zdGF0ZS5jb3Vyc2UucGFyZW50SWQ7XG4gICAgY29uc3QgY291cnNlSWQgPSB0aGlzLnByb3BzLmlkO1xuXG4gICAgY29uc3QgY2hpbGRyZW4gPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PENvdXJzZT4oXCJjb3Vyc2VzXCIsIHtcbiAgICAgIGhhc0VkZ2VzVG86IFt0aGlzLnByb3BzLmlkXVxuICAgIH0pO1xuICAgIGNvbnN0IGJyID0gbmV3IEJhdGNoUnVubmVyKCk7XG4gICAgZm9yIChjb25zdCBjaGlsZENvdXJzZSBvZiBjaGlsZHJlbikge1xuICAgICAgLyogQ0FOTk9UIERPIFRISVMuIE1BWSBOT1QgSEFWRSBBQ0NFU1MhIGlmIChjaGlsZENvdXJzZS5wYXJlbnRJZCA9PT0gY291cnNlSWQpIHtcbiAgICAgICAgLy8gUmVjb25uZWN0IGNoaWxkIHdpdGggbXkgcGFyZW50IGluc3RlYWQsIGFzIEkgd2lsbCBiZSBkaXNhcHBlYXJpbmcuLi5cbiAgICAgICAgY2hpbGRDb3Vyc2UucGFyZW50SWQgPSBwYXJlbnRJZDtcbiAgICAgICAgYnIucHV0KFwiY291cnNlc1wiLCBjaGlsZENvdXJzZSk7XG4gICAgICB9Ki9cbiAgICB9XG5cbiAgICBici5kZWxldGUoXCJjb3Vyc2VzXCIsIGNvdXJzZUlkKTtcbiAgICBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5iYXRjaChici5tdXRhdGlvblJlcXVlc3RzKTtcbiAgICBpZiAoY291cnNlU2Nob29sID09PSBlbnYuY3VycmVudFVzZXIuc2Nob29sKSB7XG4gICAgICBteVNjaG9vbENvdXJzZXNSZXBvLmRlbGV0ZShjb3Vyc2VJZCk7XG4gICAgfVxuICAgIHNob3dJbmZvKFwiXCIpO1xuICAgIGxvY2F0aW9uLmhhc2ggPSBcIiMvY291cnNlcy9uZXdcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbiBjYXNlIHRoYXQgdGhlIGNvdXJzZSBoYXMgY2hhbmdlcyB3aGljaCBzaG91bGQgYmUgc3luY2VkIHdpdGggY2xhc3Nyb29tXG4gICAqIEFzayB0aGUgdXNlciBpZiB0aGUgc3luYyBzaG91bGQgYmUgZG9uZVxuICAgKi9cbiAgYXN5bmMgY29uZmlybVNhdmVBbmRTeW5jKCl7XG4gICAgY29uc3QgeyBjb3Vyc2V9ID0gdGhpcy5zdGF0ZTtcbiAgICB2YXIgc3luY1dpdGhDbGFzc3Jvb20gPSBmYWxzZTtcbiAgICAvL2NvbmZpcm0gc2hvdWxkIG5vdCBiZSBkaXNwbGF5ZWQgaW4gY2FzZSB0aGUgY2hlY2tib3ggd2FzIHNhdmVkIGFuZCB0aGUgZmVhdHVyZSBmbGFnIGlzIG9mZlxuICAgIGlmIChjb3Vyc2UuZ29vZ2xlQ3JlYXRlQ2xhc3Nyb29tcyAmJiAhY291cnNlLmluU3luY1dpdGhDbGFzc3Jvb20gJiYgZmVhdHVyZXMuc3R1ZHlHcm91cHMpIHtcbiAgICAgIHN5bmNXaXRoQ2xhc3Nyb29tID0gY29uZmlybShMYFN5bmt1cnMga3VycyBtZWQga2xhc3NydW0/YCk7ICAgXG4gICAgfVxuICAgIGF3YWl0IHN5bmNXaXRoQ2xhc3Nyb29tID8gdGhpcy5zeW5jV2l0aENsYXNzcm9vbUFuZFNhdmUoKSA6IHRoaXMuc2F2ZSgpO1xuICB9XG5cbiAgYXN5bmMgc2F2ZSAoKSB7XG4gICAgLy9hcmNoaXZlIGdvb2dsZSBjbGFzc3Jvb20gc3luY2VkIGNvdXJzZXNcbiAgICBjb25zdCB7IGNvdXJzZSwgb3JpZ0NvdXJzZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBpZiAoZmVhdHVyZXMuc3R1ZHlHcm91cHMgJiYgb3JpZ0NvdXJzZSAmJiBvcmlnQ291cnNlLmdvb2dsZUNyZWF0ZUNsYXNzcm9vbXMgJiYgIWNvdXJzZS5nb29nbGVDcmVhdGVDbGFzc3Jvb21zKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBjbGFzc3Jvb21TeW5jID0gbmV3IENsYXNzcm9vbVN5bmMoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGF3YWl0IGNsYXNzcm9vbVN5bmMuYXJjaGl2ZShjb3Vyc2UpO1xuICAgICAgICBpZiAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgc2hvd0Vycm9yKExgQ2xhc3Nyb29tIGNvdXJzZSBjb3VsZCBub3QgYmUgYXJjaGl2ZWRgKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoY2F0Y2hlcikgeyB9XG4gICAgfVxuXG4gICAgY29uc3QgZW5hYmxlVGVhY2hlclJpZ2h0cyA9IGZlYXR1cmVzLnRlYWNoZXJSaWdodHM7XG4gICAgY29uc3Qgb3JpZ0FjY2Vzc0xpc3QgPSB0aGlzLnN0YXRlLm9yaWdDb3Vyc2UgPyBnZXRTb2Z0QWNjZXNzTGlzdCh0aGlzLnN0YXRlLm9yaWdDb3Vyc2UpIDogW107XG4gICAgY29uc3QgbW9kaWZpZWRBY2Nlc3NMaXN0ID0gZ2V0U29mdEFjY2Vzc0xpc3QodGhpcy5zdGF0ZS5jb3Vyc2UpO1xuICAgIGNvbnN0IGN1cnJlbnRVc2VyID0gZ2V0Q3VycmVudFVzZXIoKTtcbiAgICBpZiAoZW5hYmxlVGVhY2hlclJpZ2h0cyAmJlxuICAgICAgKCFjdXJyZW50VXNlci5yb2xlcy5pbmNsdWRlcyhcIkFETUlOXCIpICYmXG4gICAgICAgICFbLi4ub3JpZ0FjY2Vzc0xpc3QsIC4uLm1vZGlmaWVkQWNjZXNzTGlzdF0uc29tZShcbiAgICAgICAgICAoe2VtYWlsLCB1cmwsIGFjY2Vzc30pID0+IC8vIHVybCBpcyBmb3IgYmFja2FyZCBjb21wYXQhIEhhcyBiZWVuIHJlbmFtZWQgdG8gZW1haWwuXG4gICAgICAgICAgICAoZW1haWwgfHwgdXJsKSA9PT0gY3VycmVudFVzZXIubWFpbCAmJiAvLyB1cmwgaXMgZm9yIGJhY2t3YXJkIGNvbXBhdCEgSGFzIGJlZW4gcmVuYW1lZCB0byBlbWFpbC5cbiAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgIWFjY2VzcyB8fCAvLyBCYWNrd2FyZCBjb21wYXQuIFdhcyBub3QgcG9zc2libGUgdG8gc2V0IGFjY2VzcyBiZWZvcmUhXG4gICAgICAgICAgICAgIGFjY2VzcyA9PT0gJ2VkaXQnIHx8IC8vIEVkaXQgaXMgZmluZVxuICAgICAgICAgICAgICBhY2Nlc3MgPT09ICdmdWxsJylcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICApXG4gICAge1xuICAgICAgc2hvd0Vycm9yKExgS3Vyc2VuIGt1bmRlIGludGUgc3BhcmFzLiBMw6RnZyB0aWxsIGRpZyBzasOkbHYgaSBsaXN0YW4gcMOlIGFuc3ZhcmlnYSBsw6RyYXJlYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLmlzU2F2aW5nKSByZXR1cm47XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuaXNTYXZpbmcgPSB0cnVlO1xuICAgICAgYXdhaXQgdGhpcy5fc2F2ZSgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGVyciAmJiBlcnIubWVzc2FnZSA/IGVyci5tZXNzYWdlIDogTGBFdHQgb2vDpG50IGZlbCBoYXIgaW50csOkZmZhdC4uLmA7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIubmFtZSA9PT0gJ2h0dHA0MDknIHx8IGVyci5uYW1lID09PSAnaHR0cDQxMicgfHwgZXJyLm5hbWUgPT09ICdodHRwNDA0Jykge1xuICAgICAgICAgIC8vIENvbmZsaWN0LiBTaG93IGEgbmljZXIgZXJyb3IgbWVzc2FnZTpcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBMYEt1cnNlbiBoYXIgcmVkaWdlcmFkIGF2IGFubmFuIGFudsOkbmRhcmUuIExhZGRhIG9tIHNpZGFuIG9jaCBnw7ZyIG9tIMOkbmRyaW5hcm5hLmA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyLm5hbWUgPT09ICdodHRwNDAzJykge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmNvdXJzZS5pc1RlbXBsYXRlKVxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gTGBJbmdlbiBiZWjDtnJpZ2hldCBhdHQgc3BhcmEga3Vyc21hbGxlbi4gRW5kYXN0IGFkbWluaXN0cmF0w7ZyZXIga2FuIHJlZGlnZXJhIGt1cnNtYWxsYXIuYDtcbiAgICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlLmNvdXJzZS5zY2hvb2wpXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBMYEluZ2VuIGJlaMO2cmlnaGV0IGF0dCBzcGFyYSBrdXJzZW4gJHt0aGlzLnN0YXRlLmNvdXJzZS5uYW1lfS4gS3Vyc2VuIGthbiBiYXJhIHJlZGlnZXJhcyBhdiBhbnN0w6RsbGRhIHDDpSAke3RoaXMuc3RhdGUuY291cnNlLnNjaG9vbH1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaG93RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoJ2Vycm9yJyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuaXNTYXZpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBzeW5jSW5Qcm9ncmVzcygpIDogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuY2xhc3Nyb29tU3luY0luUHJvZ3Jlc3M7XG4gIH1cblxuICBhc3luYyBzeW5jV2l0aENsYXNzcm9vbUFuZFNhdmUoKSB7XG4gICAgY29uc3QgeyBjb3Vyc2UsIG9yaWdDb3Vyc2UgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc29sZS5sb2coY291cnNlKTtcbiAgICBjb25zb2xlLmxvZyhvcmlnQ291cnNlKTtcbiAgICBhd2FpdCB0aGlzLnNhdmUoKTsgXG4gICAgLy8gaWYgdGhlcmUgaXMgc3RpbGwgdW5zYXZlZCBkYXRhIGl0IG1lYW5zIHRoYXQgYW4gZXJyb3IgZW5jb3VudGVyZWQgZHVyaW5nIHNhdmUuIFxuICAgIC8vIHN5bmMgd2l0aCBnb29nbGUgY2xhc3Nyb29tIHdpbGwgYmUgY2FuY2VsZWRcbiAgICBpZih0aGlzLnN0YXRlLmhhc1Vuc2F2ZWREYXRhKSB7XG4gICAgICBzaG93RXJyb3IoTGBTeW5rcm9uaXNlcmluZyBtZWQga2xhc3NydW1tZXQgc2t1bGxlIGludGUgc2tlYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjbGFzc3Jvb21TeW5jSW5Qcm9ncmVzczogdHJ1ZSB9KTtcbiAgICAgIGNvbnN0IGNsYXNzcm9vbVN5bmMgPSBuZXcgQ2xhc3Nyb29tU3luYygpO1xuICAgICAgaWYgKGNvdXJzZS5nb29nbGVDcmVhdGVDbGFzc3Jvb21zKSB7XG4gICAgICAgIC8vY291cnNlIGlzIG5vdCBjcmVhdGVkIGluIGNsYXNzcm9vbSB5ZXRcbiAgICAgICAgdmFyIGZ1bGxTeW5jTmVlZGVkID0gY291cnNlLmluU3luY1dpdGhDbGFzc3Jvb20gPT0gbnVsbDtcbiAgICAgICAgdmFyIHN5bmNSZXN1bHQgPSBhd2FpdCBjbGFzc3Jvb21TeW5jLmluaXRTeW5jKGNvdXJzZSwgb3JpZ0NvdXJzZSwgZnVsbFN5bmNOZWVkZWQpO1xuICAgICAgICBpZihzeW5jUmVzdWx0LmRvbmUpe1xuICAgICAgICAgIHRoaXMudXBkYXRlKHtpblN5bmNXaXRoQ2xhc3Nyb29tOiB7ICRzZXQ6IHRydWUgfX0pO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjbGFzc3Jvb21TeW5jSW5Qcm9ncmVzczogZmFsc2UgfSk7XG5cbiAgICAgICAgICAvL3VwZGF0ZSBpblN5bmNXaXRoQ2xhc3Nyb29tIGZsYWdcbiAgICAgICAgICBhd2FpdCB0aGlzLl9zYXZlKHRydWUpO1xuICAgICAgICAgIHNob3dJbmZvKExgU3lua3JvbmlzZXJpbmcgbWVkIGZyYW1nw6VuZ2ApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNob3dFcnJvcihMYEZlbCBzeW5rcm9uaXNlcmF0IGtsYXNzcnVtYCk7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNsYXNzcm9vbVN5bmNJblByb2dyZXNzOiBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7IGNhdGNoZXIgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBfc2F2ZShzaWxlbnRTYXZlOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICBjb25zdCB7IGNvdXJzZSwgb3JpZ0NvdXJzZSwgb3JpZ1RlbXBsYXRlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGRvZXNBbGxUYXNrc0NvdmVyQWxsUmVxdWlyZW1lbnRzID0gZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzKGNvdXJzZSkubGVuZ3RoID09PSAwO1xuXG4gICAgIXNpbGVudFNhdmUgJiYgc2hvd0luZm8oTGBTcGFyYXIuLi5gKTtcbiAgICBsZXQgbW9kaWZpZWRDb3Vyc2U6IENvdXJzZSA9IHVwZGF0ZU1vZGlmaWNhdGlvblN0YW1wKERhdGUubm93KCksIGNvdXJzZSwgZW52LmN1cnJlbnRVc2VyKTtcblxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEJhdGNoUnVubmVyKCk7XG5cbiAgICAvLyBSZXNvbHZlIG1hbmlwdWxhdGVkIGdyYXBocyBvZiBlYWNoIHRhc2sgYW5kIHJlbW92ZSAkbWV0YSwgZ2VuZXJhdGUgVVVJRCBldGMgZm9yXG4gICAgLy8gZWFjaCBhZGRlZCAvIHVwZGF0ZWQgdGFzay5cbiAgICAvLyBUaGUgcmVzdWx0IG9mIHRoaXMgb3BlcmF0aW9uIGlzIHR3by1mb2xkOlxuICAgIC8vICAxKSBSZW1vdmUgJG1ldGEgYW5kIGNyZWF0ZSBpZCBmb3IgZWFjaCB0YXNrLiBUbyBiZSByZWZsZWN0ZWQgaW50byBuZXh0IHN0YXRlLlxuICAgIC8vICAyKSBHZW5lcmF0ZSBtdXRhdGlvbiByZXF1ZXN0cyBpbnRvICdiYXRjaCcgdG8gaW5jbHVkZSBpbiB0aGUgc2luZ2xlIGJhdGNoIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cbiAgICBjb25zdCBvcmlnID0gb3JpZ0NvdXJzZSB8fCBvcmlnVGVtcGxhdGU7XG4gICAgY29uc3QgbmV3Q291cnNlVGFza3MgPSBtb2RpZmllZENvdXJzZS50YXNrcy5tYXAodGFzayA9PiB7XG4gICAgICBpZiAodGFzay4kbWV0YSA9PT0gJ2FkZCcgfHwgdGFzay4kbWV0YSA9PT0gJ3VwZGF0ZScpIHtcbiAgICAgICAgY29uc3Qgb3JpZ1Rhc2sgPSBvcmlnLnRhc2tzLmZpbmQodCA9PiB0LmlkID09PSB0YXNrLmlkKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZURvY3VtZW50R3JhcGhzKG9yaWdUYXNrIHx8IHt9LCB0YXNrLCBcInRhc2tzXCIsIHtcbiAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6ICdrbm93bGVkZ2UtcmVxdWlyZW1lbnRzJyxcbiAgICAgICAgICBjZW50cmFsQ29udGVudDogJ2NlbnRyYWwtY29udGVudCcsXG4gICAgICAgICAgYWJpbGl0aWVzOiAnYWJpbGl0aWVzJ1xuICAgICAgICB9LCBiYXRjaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB1cGRhdGVkVGFzayA9IHsuLi50YXNrfTtcbiAgICAgICAgZGVsZXRlIHVwZGF0ZWRUYXNrLiRtZXRhO1xuICAgICAgICByZXR1cm4gdXBkYXRlZFRhc2s7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbW9kaWZpZWRDb3Vyc2UgPSB1cGRhdGUobW9kaWZpZWRDb3Vyc2UsIHt0YXNrczogeyRzZXQ6IG5ld0NvdXJzZVRhc2tzfX0pO1xuXG4gICAgbW9kaWZpZWRDb3Vyc2UgPSB1cGRhdGVEb2N1bWVudEdyYXBocyhvcmlnQ291cnNlIHx8IHt9LCBtb2RpZmllZENvdXJzZSwgJ2NvdXJzZXMnLCB7XG4gICAgICB0ZW1wbGF0ZUNoYWluOiAnY291cnNlcycsXG4gICAgICBjZW50cmFsQ29udGVudDogJ2NlbnRyYWwtY29udGVudCcsXG4gICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6ICdrbm93bGVkZ2UtcmVxdWlyZW1lbnRzJyxcbiAgICAgIGFiaWxpdGllczogJ2FiaWxpdGllcycsXG4gICAgICBpbWFnZXM6ICdpbWFnZXMnLFxuICAgICAgdGFza3M6ICd0YXNrcydcbiAgICB9LCBiYXRjaCk7XG5cbiAgICBtb2RpZmllZENvdXJzZSA9IHsuLi5tb2RpZmllZENvdXJzZSB9O1xuICAgIG1vZGlmaWVkQ291cnNlLnB1Ymxpc2hhYmxlID0gZG9lc0FsbFRhc2tzQ292ZXJBbGxSZXF1aXJlbWVudHM7XG4gICAgY29uc3QgdGFncyA9IChtb2RpZmllZENvdXJzZS50YWdzIHx8IFtdKS5maWx0ZXIodGFnID0+IHRhZyAhPT0gJ2luY29tcGxldGUnKTtcbiAgICBtb2RpZmllZENvdXJzZS50YWdzID0gbW9kaWZpZWRDb3Vyc2UucHVibGlzaGFibGUgP1xuICAgICAgdGFncyA6IHRhZ3MuY29uY2F0KFwiaW5jb21wbGV0ZVwiKTtcblxuICAgIGlmICghb3JpZ0NvdXJzZSkge1xuICAgICAgLy8gQSBuZXcgY291cnNlIHNob3VsZCBiZSBhZGRlZDpcbiAgICAgIGJhdGNoLmFkZCgnY291cnNlcycsIG1vZGlmaWVkQ291cnNlKTtcbiAgICAgIGlmIChjb3Vyc2Uuc2Nob29sKSB7XG4gICAgICAgIGNvbnN0IHNjaG9vbElkID0gYXdhaXQgbXlTY2hvb2xDb3Vyc2VzUmVwby5nZXRTY2hvb2xJZCgpO1xuICAgICAgICBiYXRjaC5saW5rKFwic2Nob29sc1wiLCBzY2hvb2xJZCwgXCJjb3Vyc2VzXCIsIGNvdXJzZS5pZCwgXCJjb3Vyc2VzXCIpO1xuICAgICAgICBpZiAoY291cnNlLmFjdGl2ZSkge1xuICAgICAgICAgIGJhdGNoLmxpbmsoXCJzY2hvb2xzXCIsIHNjaG9vbElkLCBcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImFjdGl2ZUNvdXJzZXNcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQW4gZXhpc3RpbmcgY291cnNlIHNob3VsZCBiZSB1cGRhdGVkOlxuICAgICAgYmF0Y2gucHV0KCdjb3Vyc2VzJywgbW9kaWZpZWRDb3Vyc2UpO1xuICAgICAgaWYgKCFvcmlnQ291cnNlLmFjdGl2ZSAmJiBjb3Vyc2UuYWN0aXZlKSB7XG4gICAgICAgIC8vIENvdXJzZSB3YXMgYWN0aXZhdGVkLiBBZGQgYSByZWZlcmVuY2UgdG8gdGhlIGNvdXJzZSBvbiBzY2hvb2wuYWN0aXZlQ291cnNlcy5cbiAgICAgICAgY29uc3Qgc2Nob29sSWQgPSBhd2FpdCBteVNjaG9vbENvdXJzZXNSZXBvLmdldFNjaG9vbElkKCk7XG4gICAgICAgIGJhdGNoLmxpbmsoXCJzY2hvb2xzXCIsIHNjaG9vbElkLCBcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImFjdGl2ZUNvdXJzZXNcIik7XG4gICAgICB9IGVsc2UgaWYgKG9yaWdDb3Vyc2UuYWN0aXZlICYmICFjb3Vyc2UuYWN0aXZlKSB7XG4gICAgICAgIC8vIENvdXJzZSB3YXMgaW5hY3RpdmF0ZWQuIFJlbW92ZSBmcm9tIHNjaG9vbC5hY3RpdmVDb3Vyc2VzLlxuICAgICAgICBjb25zdCBzY2hvb2xJZCA9IGF3YWl0IG15U2Nob29sQ291cnNlc1JlcG8uZ2V0U2Nob29sSWQoKTtcbiAgICAgICAgYmF0Y2gudW5saW5rKFwic2Nob29sc1wiLCBzY2hvb2xJZCwgXCJjb3Vyc2VzXCIsIGNvdXJzZS5pZCwgXCJhY3RpdmVDb3Vyc2VzXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBlcmZvcm0gdGhlIGVudGlyZSBiYXRjaCB0aHJvdWdoIGEgc2luZ2xlIFBPU1QgcmVxdWVzdDpcbiAgICBjb25zdCByZXMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5iYXRjaChiYXRjaC5tdXRhdGlvblJlcXVlc3RzKTtcbiAgICAhc2lsZW50U2F2ZSAmJiBzaG93SW5mbyAob3JpZ0NvdXJzZSA/XG4gICAgICBMYMOEbmRyaW5nYXJuYSBoYXIgc3BhcmF0c2AgOlxuICAgICAgTGBLdXJzZW4gaGFyIHNrYXBhdHNgKTtcbiAgICAvLyBVcGRhdGUgc3RhdGUgdG8gcmVmbGVjdCB3aGF0IGhhcyBiZWVuIHBvc3RlZDpcbiAgICBpZiAocmVzICYmIHJlcy5uZXdFdGFncylcbiAgICAgICAgbW9kaWZpZWRDb3Vyc2UgPSBhcHBseUV0YWdzKG1vZGlmaWVkQ291cnNlLCByZXMubmV3RXRhZ3MsIFtcImltYWdlc1wiLCBcInRhc2tzXCJdKSBhcyBDb3Vyc2U7XG4gICAgXG4gICAgaWYgKGNvdXJzZS5zY2hvb2wgPT09IGVudi5jdXJyZW50VXNlci5zY2hvb2wpIHtcbiAgICAgIC8vIFVwZGF0ZSBteVNjaG9vbENvdXJzZXNSZXBvXG4gICAgICBpZiAoIW9yaWdDb3Vyc2UpIHtcbiAgICAgICAgbXlTY2hvb2xDb3Vyc2VzUmVwby5pbnNlcnQobW9kaWZpZWRDb3Vyc2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbXlTY2hvb2xDb3Vyc2VzUmVwby51cGRhdGUobW9kaWZpZWRDb3Vyc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuc2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUoe2NvdXJzZTogbW9kaWZpZWRDb3Vyc2UsIG9yaWdDb3Vyc2U6IG1vZGlmaWVkQ291cnNlLCBoYXNVbnNhdmVkRGF0YTogZmFsc2V9KTtcbiAgICB1cGRhdGVDb3Vyc2VCdWlsZGVyU3RhdHVzKCcnKTtcbiAgICBpZiAoIW9yaWdDb3Vyc2UpIHtcbiAgICAgIC8vIFRoaXMgd2FzIHRoZSBjcmVhdGlvbiBvZiBhIG5ldyBjb3Vyc2UuIENvcnJlY3QgdGhlIHJvdXRlIG5vdyB3aGVuIHRoZSB1c2VyIGVudGVycyBhbiBlZGl0IHN0YXRlOlxuICAgICAgbG9jYXRpb24uaGFzaCA9IGAjL2NvdXJzZXMvJHttb2RpZmllZENvdXJzZS5pZH0vZWRpdGA7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSAgX2NoZWNrQ2xhc3Nyb29tQ2hhbmdlcygpe1xuICAgIGNvbnN0IHsgY291cnNlLCBvcmlnQ291cnNlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IGFycjFzZXQgPSBjb3Vyc2UudGFza3MuZmlsdGVyKHggPT4geC5hc3NpZ25tZW50KTtcbiAgICBpZiAoIW9yaWdDb3Vyc2UpIHtcbiAgICAgIGNvdXJzZS5pblN5bmNXaXRoQ2xhc3Nyb29tID0gZmFsc2U7XG4gICAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoe2NvdXJzZX0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL2lmIChjb3Vyc2UuaW5TeW5jV2l0aENsYXNzcm9vbSkge1xuICAgIGNvbnN0IGFycjJzZXQgPSBvcmlnQ291cnNlLnRhc2tzLmZpbHRlcih4ID0+IHguYXNzaWdubWVudCk7ICAgXG4gICAgLy9jaGVjayB0YXNrcyBhZGRlZCBvciByZW1vdmVkXG4gICAgdmFyIGhhc1RlYWNoZXJDaGFuZ2VzID0gaGFzQ2hhbmdlcyhvcmlnQ291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMsIGNvdXJzZS5yZXNwb25zaWJsZVRlYWNoZXJzKTtcbiAgICAvL1xuICAgIHZhciBoYXNUYXNrc0NoYW5nZXMgPSBhcnIxc2V0LmZpbHRlcigoeCkgPT4gIWFycjJzZXQuZmluZCh5ID0+IHkuaWQgPT0geC5pZCkpLmxlbmd0aCA+IDAgfHwgYXJyMnNldC5maWx0ZXIoKHgpID0+ICFhcnIxc2V0LmZpbmQoeSA9PiB5LmlkID09IHguaWQpKS5sZW5ndGggPiAwOyAgICBcbiAgICAvL2NoZWNrIGlmIGFueSB0YXNrIHJlbmFtZWQgb3IgY2hhbmdlZCBpdHMgdHlwZVxuICAgIGlmICghaGFzVGFza3NDaGFuZ2VzKSB7XG4gICAgICBoYXNUYXNrc0NoYW5nZXMgPSBhcnIxc2V0LnNvbWUoZTEgPT4gYXJyMnNldC5maW5kKGUyID0+IHtcbiAgICAgICAgcmV0dXJuIGUyLmlkID09PSBlMS5pZCAmJiBlMi5uYW1lICE9PSBlMS5uYW1lO1xuICAgICAgfSkgIT0gbnVsbCk7XG4gICAgfVxuXG4gICAgdmFyIGhhc1N0dWR5R3JvdXBzQ2hhbmdlcyA9IGhhc0NoYW5nZXMob3JpZ0NvdXJzZS5zdHVkeUdyb3VwcywgY291cnNlLnN0dWR5R3JvdXBzKTtcbiAgICAvL2NoZWNrcyBhcmUgbWFkZSB3aXRoIHRoZSBwcmV2aW91cyBvYmplY3QgaW4gY2FzZSB0aGF0IHRoZSB1c2VyIHdpbGwgcmV2ZXJ0IHRoZSBjaGFuZ2VzXG4gICAgdmFyIHByZXZTdGF0dXMgPSAgY291cnNlLmluU3luY1dpdGhDbGFzc3Jvb207XG4gICAgY291cnNlLmluU3luY1dpdGhDbGFzc3Jvb20gPSAhKGhhc1RlYWNoZXJDaGFuZ2VzIHx8IGhhc1Rhc2tzQ2hhbmdlcyB8fCBoYXNTdHVkeUdyb3Vwc0NoYW5nZXMpO1xuICAgIGlmIChwcmV2U3RhdHVzICE9IGNvdXJzZS5pblN5bmNXaXRoQ2xhc3Nyb29tKSB7XG4gICAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoeyBjb3Vyc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgYWN0aXZhdGVBbmRTYXZlKCkge1xuICAgIGNvbnN0IGNvdXJzZSA9IHsuLi50aGlzLnN0YXRlLmNvdXJzZX07XG4gICAgaWYgKCFjb3Vyc2UuYWN0aXZlKSB7XG4gICAgICAvKmNvbnN0IHVuY292ZXJlZFJlcXVpcmVtZW50cyA9IGdldFVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cyhjb3Vyc2UpO1xuICAgICAgaWYgKHVuY292ZXJlZFJlcXVpcmVtZW50cy5sZW5ndGggPiAwKSBcbiAgICAgICAgcmV0dXJuIHNob3dFcnJvciAoTGBEZXQgZmlubnMga3Vuc2thcHNrcmF2IHNvbSBpbnRlIHVwcGZ5bGxzIGF2IG7DpWdvbiBtb2R1bC4gS2FuIGludGUgYWt0aXZlcmEga3Vyc2VuIGbDtnJyw6RuIGFsbGEga3Vuc2thcHNrcmF2IGZpbm5zIG1lZC5gKTtcbiAgICAgICovXG5cbiAgICAgIGNvdXJzZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgY291cnNlLmFjdGl2YXRlZEJ5ID0ge1xuICAgICAgICBuYW1lOiBlbnYuY3VycmVudFVzZXIuZGlzcGxheU5hbWUsXG4gICAgICAgIHVybDogXCJtYWlsdG86XCIgKyAgZW52LmN1cnJlbnRVc2VyLm1haWxcbiAgICAgIH07XG4gICAgICBjb3Vyc2UuYWN0aXZhdGVkRGF0ZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoe2NvdXJzZX0pXG4gICAgICAgIC50aGVuKCgpPT50aGlzLnNhdmUoKSlcbiAgICAgICAgLmNhdGNoKGNhdGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIGluYWN0aXZhdGVBbmRTYXZlKCkge1xuICAgIGNvbnN0IGNvdXJzZSA9IHsuLi50aGlzLnN0YXRlLmNvdXJzZX07XG4gICAgaWYgKGNvdXJzZS5hY3RpdmUpIHtcbiAgICAgIGNvdXJzZS5hY3RpdmUgPSBmYWxzZTtcbiAgICAgIGNvdXJzZS5pbmFjdGl2YXRlZEJ5ID0ge1xuICAgICAgICBuYW1lOiBlbnYuY3VycmVudFVzZXIuZGlzcGxheU5hbWUsXG4gICAgICAgIHVybDogXCJtYWlsdG86XCIgKyAgZW52LmN1cnJlbnRVc2VyLm1haWxcbiAgICAgIH07XG4gICAgICBjb3Vyc2UuaW5hY3RpdmF0ZWREYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7Y291cnNlfSlcbiAgICAgICAgLnRoZW4oKCk9PnRoaXMuc2F2ZSgpKVxuICAgICAgICAuY2F0Y2goY2F0Y2hlcik7XG4gICAgfVxuICB9XG5cbiAgb3BlbkRpYWxvZyhkaWFsb2dDb250YWluZXI6IERpYWxvZ0NvbnRhaW5lcikge1xuICAgIHRoaXMuc2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUoe2RpYWxvZ0NvbnRhaW5lcnM6IHRoaXMuc3RhdGUuZGlhbG9nQ29udGFpbmVycy5jb25jYXQoZGlhbG9nQ29udGFpbmVyKX0pO1xuICB9XG5cbiAgY2xvc2VEaWFsb2coKSB7XG4gICAgY29uc3Qge2RpYWxvZ0NvbnRhaW5lcnN9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7bGVuZ3RofSA9IGRpYWxvZ0NvbnRhaW5lcnM7XG4gICAgbGVuZ3RoICYmIHRoaXMuc2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUoe2RpYWxvZ0NvbnRhaW5lcnM6IGRpYWxvZ0NvbnRhaW5lcnMuc2xpY2UoMCwgbGVuZ3RoIC0gMSl9KTtcbiAgICAvLyBOb3cgc3luYyB0aGUgZGlyZWN0ICdkaWFsb2dzJyBwcm9wZXJ0eSB3aXRoIHRoZSBuZXcgc3RhdGU6XG4gICAgd2hpbGUgKHRoaXMuZGlhbG9ncy5sZW5ndGggPj0gbGVuZ3RoKSB0aGlzLmRpYWxvZ3MucG9wKCk7XG4gIH1cblxuICByZWZEaWFsb2coZGlhbG9nOiBEaWFsb2cgJiBSZWFjdC5Db21wb25lbnQsIGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLmRpYWxvZ3NbaW5kZXhdID0gZGlhbG9nOyAvLyBTZXR0aW5nIHBlciBpbmRleCBpbnN0ZWFkIG9mIHB1c2goKS4gV29ya3MgZXZlbiBpZiB0aGUgcmVmIGF0dHJpYnV0ZSBjb3VsZCBiZSBpbnZva2VkIG11bHRpcGxlIHRpbWVzLlxuICB9XG5cbiAgb25LZXlEb3duIChldjogS2V5Ym9hcmRFdmVudCkge1xuICAgIGlmIChldi53aGljaCA9PT0gODMgJiYgKGV2LmN0cmxLZXkgfHwgZXYubWV0YUtleSkpIHsgLy8gQ1RSTC1TXG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgaWYgKHRoaXMuc3RhdGUuZGlhbG9nQ29udGFpbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuc2F2ZURpYWxvZygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnNhdmUoKTtcbiAgICB9IGVsc2UgaWYgKGV2LndoaWNoID09PSAyNyAmJiB0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5jbG9zZURpYWxvZygpO1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2UgaWYgKGV2LndoaWNoID09PSAxMykge1xuICAgICAgY29uc3QgdGFyZ2V0RWxlbSA9IGV2LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGlmICh0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCAmJlxuICAgICAgICB0YXJnZXRFbGVtLnRhZ05hbWUgIT09ICdURVhUQVJFQScgJiZcbiAgICAgICAgdGFyZ2V0RWxlbS50YWdOYW1lICE9PSAnSU5QVVQnICYmXG4gICAgICAgIHRhcmdldEVsZW0udGFnTmFtZSAhPT0gJ1NFTEVDVCcgJiZcbiAgICAgICAgdGFyZ2V0RWxlbS50YWdOYW1lICE9PSAnT1BUSU9OJyAmJlxuICAgICAgICAhdGFyZ2V0RWxlbS5jb250ZW50RWRpdGFibGUpXG4gICAgICB7XG4gICAgICAgIHRoaXMuc2F2ZURpYWxvZygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGJlZm9yZVVubG9hZChldjogRXZlbnQpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5kaWFsb2dDb250YWluZXJzLmxlbmd0aCA+IDAgfHwgdGhpcy5zdGF0ZS5oYXNVbnNhdmVkRGF0YSkge1xuICAgICAgaWYgKCFlbnYua2VkQmFja2VuZENsaWVudC5odHRwLmJlYXJlclByb3ZpZGVyLndhbnRzUmVkaXJlY3QpIHtcbiAgICAgICAgZXYucmV0dXJuVmFsdWUgPSBDT05GSVJNX05BVklHQVRFX01FU1NBR0U7XG4gICAgICAgIHJldHVybiBldi5yZXR1cm5WYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBvbkNsaWNrUHJldmVudFVubG9hZChldjogRXZlbnQpIHtcbiAgICBpZiAoZXYudGFyZ2V0ICYmICgnJysoZXYudGFyZ2V0IGFzIGFueSkudGFnTmFtZSkudG9Mb3dlckNhc2UoKSA9PT0gJ2EnKSB7XG4gICAgICBjb25zdCBhOiBIVE1MQW5jaG9yRWxlbWVudCA9IGV2LnRhcmdldCBhcyBIVE1MQW5jaG9yRWxlbWVudDtcbiAgICAgIGlmIChhLmhyZWYgJiYgYS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSAhPT0gJyMnICYmICFhLnRhcmdldCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5kaWFsb2dDb250YWluZXJzLmxlbmd0aCA+IDAgfHwgdGhpcy5zdGF0ZS5oYXNVbnNhdmVkRGF0YSkge1xuICAgICAgICAgIGlmICghY29uZmlybShDT05GSVJNX05BVklHQVRFX01FU1NBR0UpKSB7XG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2F2ZURpYWxvZygpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5kaWFsb2dDb250YWluZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMuZGlhbG9nc1t0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoLTFdOyAvLyBZRVMsIHNob3VsZCByZWZlcmVuY2UgdGhpcy5kaWFsb2dzIGJ5IGxlbmd0aCBvZiBkaWFsb2dDb250YWluZXJzLiBTdHJhbmdlIHllcywgYnV0IGxlYXZlIGl0IHNvIVxuICAgICAgZGlhbG9nICYmIGRpYWxvZy5zYXZlKCk7IFxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBpc0FkbWluID0gZW52LmN1cnJlbnRVc2VyLnJvbGVzLmluZGV4T2YoXCJBRE1JTlwiKSA+PSAwO1xuICAgIGNvbnN0IGNvdXJzZSA9IHRoaXMuc3RhdGUuY291cnNlO1xuICAgIHJldHVybiAhdGhpcy5zdGF0ZS5jb3Vyc2UgPyA8ZGl2IHN0eWxlPXt7b3V0bGluZTogMH19PlxuICAgICAgPENvdXJzZUJhbm5lclxuICAgICAgICB0aXRsZT1cIlwiXG4gICAgICAgIGFjdGl2ZVBhZ2U9e3RoaXMuc3RhdGUudmlld31cbiAgICAgICAgcm91dGVzPXt7ZmVlZGJhY2s6IHRoaXMucHJvcHMuZmVlZGJhY2tVcmx9fVxuICAgICAgLz48cD48U3Bpbm5lci8+Vi5nLiB2w6RudGEgbWVkYW4ga3Vyc2VuIGxhZGRhcy4uLjwvcD5cbiAgICAgIDwvZGl2PiA6XG4gICAgICA8ZGl2IHN0eWxlPXt7b3V0bGluZTogMH19PlxuICAgICAgPENvdXJzZUJhbm5lclxuICAgICAgICB0aXRsZT17Y291cnNlLm5hbWUgKyBcIiAtIFwiICsgY291cnNlLnBvaW50cyArIFwicFwifVxuICAgICAgICBhY3RpdmVQYWdlPXt0aGlzLnN0YXRlLnZpZXd9XG4gICAgICAgIHJvdXRlcz17e1xuICAgICAgICAgIHN0dWRlbnRQYWdlOiBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSh0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmwsIHtjb3Vyc2VJZDogdGhpcy5wcm9wcy5pZH0pLFxuICAgICAgICAgIGZlZWRiYWNrOiB0aGlzLnByb3BzLmZlZWRiYWNrVXJsXG4gICAgICAgIH19XG4gICAgICAgIGhvc3Q9e3RoaXN9XG4gICAgICAgIGNvdXJzZT17Y291cnNlfVxuICAgICAgICBvcmlnQ291cnNlPXt0aGlzLnN0YXRlLm9yaWdDb3Vyc2V9XG4gICAgICAgIGJhY2tncm91bmRJbWFnZT17Y291cnNlLmltYWdlcy5maWx0ZXIoaW1nID0+IGltZy5pZCA9PT0gY291cnNlLmltYWdlSWQpLm1hcChpbWc9PmltZy51cmwpWzBdfVxuICAgICAgICBpc1RlbXBsYXRlPXtjb3Vyc2UuaXNUZW1wbGF0ZX1cbiAgICAgICAvPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0XCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyIHN2LWNvbHVtbi0xMlwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytc3BhY2VyLTIwcHh2dCBzdi12ZXJ0aWNhbCBzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIiByZWY9e1xuICAgICAgICAgICAgICBkaXYgPT4gdGhpcy5jb250ZW50RGl2ID0gZGl2fT5cbiAgICAgICAgICAgICAgPElubmVyRWRpdENvdXJzZVxuICAgICAgICAgICAgICAgIGNvdXJzZT17dGhpcy5zdGF0ZS5jb3Vyc2V9XG4gICAgICAgICAgICAgICAgb3JpZ0NvdXJzZT17dGhpcy5zdGF0ZS5vcmlnQ291cnNlfVxuICAgICAgICAgICAgICAgIGhvc3Q9e3RoaXN9IC8+XG4gICAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICAgIHt0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubWFwKCh7Q29tcG9uZW50LCBwcm9wc30sIGkpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2l9PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkYXJrZW5cIj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1wYWdlLXdyYXBcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1wYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPENvbXBvbmVudCByZWY9e2RpYWxvZz0+dGhpcy5yZWZEaWFsb2coZGlhbG9nLCBpKX0gey4uLnByb3BzfSAvPlxuICAgICAgICAgICAgICAgICAgICAgIDxSZW1vdmVJdGVtIG9uQ2xpY2s9eygpPT50aGlzLmNsb3NlRGlhbG9nKCl9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvdXJzZUJhbm5lciB9IGZyb20gXCIuL2NvdXJzZS1iYW5uZXJcIjtcbmltcG9ydCB7IEwsIHNob3dFcnJvciwgZmxhdHRlbiwgY29tcGFyZVByb3AsIHNob3dJbmZvLCBtYXhMZW5ndGgsIGNhcGl0YWxpemVGaXJzdCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgQ291cnNlLCBTdWJqZWN0IH0gZnJvbSBcImtlZGJhY2tlbmQvbW9kZWxzXCI7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcbmltcG9ydCB7IFNjaG9vbENvdXJzZXMgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc2Nob29sLWNvdXJzZXNcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgZmVlZGJhY2tVcmw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgY291cnNlT3B0aW9uczogQ291cnNlT3B0aW9uW107XG4gIHNlbGVjdGVkVGVtcGxhdGVJZDogc3RyaW5nO1xuICBjb3Vyc2VzOiBDb3Vyc2VPcHRpb25bXSB8IG51bGw7XG4gIHNlbGVjdGVkQ291cnNlSWQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIENvdXJzZU9wdGlvbiB7XG4gIGlkOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIENyZWF0ZU5ld0NvdXJzZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGNvdXJzZU9wdGlvbnM6IG51bGwsXG4gICAgICBzZWxlY3RlZFRlbXBsYXRlSWQ6IFwiLS1cIixcbiAgICAgIGNvdXJzZXM6IG51bGwsXG4gICAgICBzZWxlY3RlZENvdXJzZUlkOiBcIlwiXG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5sb2FkKCkuY2F0Y2goc2hvd0Vycm9yKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgc2hvd0luZm8oXCJMYWRkYXIga3Vyc2VyXCIpO1xuICAgIGNvbnN0IHN1YmplY3RzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTdWJqZWN0PihcInN1YmplY3RzXCIsIHtcbiAgICAgIHRhZ3M6IFtcInNjaG9vbFR5cGU6Z3ltbmFzaXVtXCJdLFxuICAgICAgaW5jbHVkZTogXCJjb3Vyc2VUZW1wbGF0ZXNcIlxuICAgIH0pO1xuICAgIGNvbnN0IGNvdXJzZXMgPSBmbGF0dGVuKHN1YmplY3RzLm1hcChzID0+IHMuY291cnNlVGVtcGxhdGVzKSkuc29ydChjb21wYXJlUHJvcChcIm5hbWVcIikpO1xuICAgIGNvbnN0IGNvdXJzZU9wdGlvbnM6IENvdXJzZU9wdGlvbltdID1cbiAgICAgIFt7IGlkOiBcIi0tXCIsIG5hbWU6IFwiLS1cIiB9XS5jb25jYXQoY291cnNlcyk7XG4gICAgc2hvd0luZm8oXCJcIik7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGNvdXJzZU9wdGlvbnMgfSk7XG4gIH1cblxuICBhc3luYyBvblNlbGVjdENvdXJzZShpZDogc3RyaW5nKSB7XG4gICAgY29uc3QgZGVyaXZlZENvdXJzZXMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PENvdXJzZT4oXCJjb3Vyc2VzXCIsIHsgaGFzRWRnZXNUbzogW2lkXSB9KTtcbiAgICBjb25zdCBjb3Vyc2VPcHRpb25zID0gZGVyaXZlZENvdXJzZXNcbiAgICAgIC5maWx0ZXIoY291cnNlID0+IGNvdXJzZS5hY3RpdmUpXG4gICAgICAubWFwKCh7IGlkLCBzY2hvb2wsIGRlc2NyaXB0aW9uLCBjcmVhdGVkQnksIG1vZGlmaWVkQnkgfSkgPT4ge1xuICAgICAgICBpZiAoZGVzY3JpcHRpb24pIGRlc2NyaXB0aW9uID0gbWF4TGVuZ3RoKGRlc2NyaXB0aW9uLCA4MCk7XG4gICAgICAgIGxldCBkZXNjcmlwdGlvbk9yQXV0aG9yID0gZGVzY3JpcHRpb24gfHxcbiAgICAgICAgICAoY3JlYXRlZEJ5ID8gYCR7Y3JlYXRlZEJ5Lm5hbWV9cyB2ZXJzaW9uYCA6XG4gICAgICAgICAgbW9kaWZpZWRCeSAmJiBgJHttb2RpZmllZEJ5Lm5hbWV9cyB2ZXJzaW9uYCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaWQsXG4gICAgICAgICAgbmFtZTogc2Nob29sID09PSAnc3RhbmRhcmQnID9cbiAgICAgICAgICAgIGRlc2NyaXB0aW9uID8gYFN0YW5kYXJkIC0gJHtkZXNjcmlwdGlvbn1gIDogXCJTdGFuZGFyZFwiIDpcbiAgICAgICAgICAgIGAke3NjaG9vbH0gLSAke21heExlbmd0aChkZXNjcmlwdGlvbk9yQXV0aG9yLCA5MCl9YCxcbiAgICAgICAgICBzY2hvb2xcbiAgICAgICAgfTtcbiAgICAgIH0pLnNvcnQoY29tcGFyZVByb3AoXCJuYW1lXCIpKTtcbiAgICBjb25zdCBrZWRTdGFuZGFyZE9wdGlvbnMgPSBjb3Vyc2VPcHRpb25zLmZpbHRlcihvcHRpb24gPT4gb3B0aW9uLnNjaG9vbCA9PT0gXCJzdGFuZGFyZFwiKTtcbiAgICBjb25zdCB0ZWFjaGVyTWFkZSA9IGNvdXJzZU9wdGlvbnMuZmlsdGVyKG9wdGlvbiA9PiBvcHRpb24uc2Nob29sICE9PSBcInN0YW5kYXJkXCIpO1xuICAgIGNvbnN0IGNvdXJzZXMgPSBbXG4gICAgICAuLi5rZWRTdGFuZGFyZE9wdGlvbnMsXG4gICAgICB7IGlkLCBuYW1lOiBcIlRvbVwiIH0sXG4gICAgICAuLi50ZWFjaGVyTWFkZV07XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb3Vyc2VzLFxuICAgICAgc2VsZWN0ZWRUZW1wbGF0ZUlkOiBpZCxcbiAgICAgIHNlbGVjdGVkQ291cnNlSWQ6IGNvdXJzZXNbMF0uaWRcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvdXJzZU9wdGlvbnMsIHNlbGVjdGVkVGVtcGxhdGVJZCwgY291cnNlcywgc2VsZWN0ZWRDb3Vyc2VJZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICByZXR1cm4gPGRpdiBzdHlsZT17eyBvdXRsaW5lOiAwIH19PlxuICAgICAgPENvdXJzZUJhbm5lclxuICAgICAgICB0aXRsZT17TGBLdXJzYnlnZ2FyZW5gfVxuICAgICAgICBhY3RpdmVQYWdlPVwiY291cnNlQnVpbGRlclwiXG4gICAgICAgIHJvdXRlcz17e2ZlZWRiYWNrOiB0aGlzLnByb3BzLmZlZWRiYWNrVXJsfX1cbiAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXRcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXIgc3YtY29sdW1uLTEyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1zcGFjZXItMjBweHZ0IHN2LXZlcnRpY2FsIHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlY29udGVudCBzdi1sYXlvdXQgc3Ytc3BhY2VyLTIwcHh2dCBzdi1za2lwLXNwYWNlclwiPlxuXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytcm93IHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tN1wifT5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGgyPlNrYXBhIG55IGt1cnM8L2gyPlxuICAgICAgICAgICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5Ww6RsaiBneW1uYXNpZWt1cnMgOjwvcD5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbCBzcGFjZWRcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyFjb3Vyc2VPcHRpb25zID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48U3Bpbm5lciAvPjxzZWxlY3QgZGlzYWJsZWQgdmFsdWU9XCJcIj48b3B0aW9uPi0tPC9vcHRpb24+PC9zZWxlY3Q+PC9kaXY+IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNlbGVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnNlbGVjdGVkVGVtcGxhdGVJZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5vblNlbGVjdENvdXJzZShldi50YXJnZXQudmFsdWUpLmNhdGNoKHNob3dFcnJvcil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y291cnNlT3B0aW9ucy5tYXAoY291cnNlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17Y291cnNlLmlkfSB2YWx1ZT17Y291cnNlLmlkfT57Y291cnNlLm5hbWV9PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+fVxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAge2NvdXJzZXMgJiYgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5VdGfDpSBmcsOlbiB2ZXJzaW9uOiA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgICAgICAgICAgICAge2NvdXJzZXMgJiYgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IHZhbHVlPXtzZWxlY3RlZENvdXJzZUlkfSBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQ291cnNlSWQ6IGV2LnRhcmdldC52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICB7Y291cnNlcy5tYXAoY291cnNlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2NvdXJzZS5pZH0gdmFsdWU9e2NvdXJzZS5pZH0+e2NvdXJzZS5uYW1lfTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+PGJyIC8+XG4gICAgICAgICAgICAgICAgICAgIHtjb3Vyc2VzICYmIHNlbGVjdGVkQ291cnNlSWQgJiYgPExpbmtcbiAgICAgICAgICAgICAgICAgICAgICB0bz17YC9jb3Vyc2VzL2NyZWF0ZS1mcm9tLXRlbXBsYXRlLyR7dGhpcy5zdGF0ZS5zZWxlY3RlZENvdXJzZUlkfWB9XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZVwiXG4gICAgICAgICAgICAgICAgICAgID5Ta2FwYTwvTGluaz59XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1jb2x1bW4tNVwiPlxuICAgICAgICAgICAgICAgICAgPFNjaG9vbENvdXJzZXMgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IEVycm9yU3VjY2Vzc0ZlZWRiYWNrIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXJyb3Itc3VjY2Vzcy1mZWVkYmFjayc7XG5pbXBvcnQgeyBTY2hvb2xzIH0gZnJvbSAnLi9zY2hvb2xzJztcbmltcG9ydCB7IE5ld1NjaG9vbCB9IGZyb20gJy4vc2Nob29scy9uZXctc2Nob29sJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcblxuLy8gVmlld3NcbmltcG9ydCB7IFN1YmplY3RzLCBTaG93U3ViamVjdCB9IGZyb20gJy4vc3ViamVjdHMnO1xuaW1wb3J0IHsgRWRpdENvdXJzZSB9IGZyb20gJy4vY291cnNlcyc7XG5pbXBvcnQgeyBFZGl0U2Nob29sIH0gZnJvbSBcIi4vc2Nob29scy9lZGl0LXNjaG9vbFwiO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4vY291cnNlcy9jb3Vyc2UtYmFubmVyXCI7XG5pbXBvcnQgeyBDcmVhdGVOZXdDb3Vyc2UgfSBmcm9tIFwiLi9jb3Vyc2VzL2NyZWF0ZS1uZXdcIjtcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi9zdWItY29tcG9uZW50cy9zcGlubmVyXCI7XG5cbi8vIEtlZXAgU2Vzc2lvbiBBbGl2ZVxuaW1wb3J0IHsga2VlcFNlc3Npb25BbGl2ZSB9IGZyb20gJy4uLy4uL3V0aWxzL2tlZXAtc2Vzc2lvbi1hbGl2ZSc7XG5rZWVwU2Vzc2lvbkFsaXZlKCk7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcbiAgZmVlZGJhY2tVcmw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbn1cblxuZXhwb3J0IGNsYXNzIENvdXJzZUJ1aWxkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGlzQXV0aG9yaXplZCA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gXCJBRE1JTlwiIHx8IHJvbGUgPT09IFwiRU1QTE9ZRUVcIik7XG4gICAgY29uc3QgaXNBZG1pbiA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gXCJBRE1JTlwiKTtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJjb3Vyc2UtYnVpbGRlclwiPlxuICAgICAgPFJvdXRlcj5cbiAgICAgICAge2lzQXV0aG9yaXplZCA/IDxkaXY+XG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgcmVuZGVyPXsoeyBtYXRjaCB9KSA9PiBpc0FkbWluID9cbiAgICAgICAgICAgIDxTY2hvb2xzIHZpZXdDb3Vyc2VVcmw9e3RoaXMucHJvcHMudmlld0NvdXJzZVVybH0gZmVlZGJhY2tVcmw9e3RoaXMucHJvcHMuZmVlZGJhY2tVcmx9IC8+IDpcbiAgICAgICAgICAgIDxDcmVhdGVOZXdDb3Vyc2UgZmVlZGJhY2tVcmw9e3RoaXMucHJvcHMuZmVlZGJhY2tVcmx9IC8+fSAvPlxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3NjaG9vbHNcIiByZW5kZXI9eyh7IG1hdGNoIH0pID0+XG4gICAgICAgICAgICA8U2Nob29sc1xuICAgICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XG4gICAgICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9zY2hvb2xzL25ldy9neW1uYXNpdW1cIiByZW5kZXI9eygpPT48TmV3U2Nob29sIHR5cGU9XCJneW1uYXNpdW1cIiBmZWVkYmFja1VybD17dGhpcy5wcm9wcy5mZWVkYmFja1VybH0gLz59IC8+XG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvc2Nob29scy9uZXcvcHJpbWFyeVwiIHJlbmRlcj17KCk9PjxOZXdTY2hvb2wgdHlwZT1cInByaW1hcnlcIiBmZWVkYmFja1VybD17dGhpcy5wcm9wcy5mZWVkYmFja1VybH0gLz59IC8+XG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvc2Nob29scy86aWQvZWRpdFwiIHJlbmRlcj17KHsgbWF0Y2ggfSkgPT4gPEVkaXRTY2hvb2xcbiAgICAgICAgICAgIGlkPXttYXRjaC5wYXJhbXMuaWR9XG4gICAgICAgICAgICB0aXRsZT17TGBFZGl0ZXJhIHNrb2xhYH1cbiAgICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9zdWJqZWN0c1wiIHJlbmRlcj17KCk9PjxTdWJqZWN0cyBmZWVkYmFja1VybD17dGhpcy5wcm9wcy5mZWVkYmFja1VybH0gLz59IC8+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvc3ViamVjdHMvOmlkXCIgcmVuZGVyPXsoeyBtYXRjaCB9KSA9PiA8U2hvd1N1YmplY3RcbiAgICAgICAgICAgIGlkPXttYXRjaC5wYXJhbXMuaWR9XG4gICAgICAgICAgICBmZWVkYmFja1VybD17dGhpcy5wcm9wcy5mZWVkYmFja1VybH0gLz59IC8+XG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvY291cnNlcy9uZXdcIiByZW5kZXI9eygpPT4gPENyZWF0ZU5ld0NvdXJzZVxuICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jb3Vyc2VzL2NyZWF0ZS1mcm9tLXRlbXBsYXRlLzp0ZW1wbGF0ZUlkXCIgcmVuZGVyPXsoe21hdGNofSkgPT4gPEVkaXRDb3Vyc2VcbiAgICAgICAgICAgIHRlbXBsYXRlSWQ9e21hdGNoLnBhcmFtcy50ZW1wbGF0ZUlkfVxuICAgICAgICAgICAgdmlldz1cImNvdXJzZUJ1aWxkZXJcIlxuICAgICAgICAgICAgdmlld0NvdXJzZVVybD17dGhpcy5wcm9wcy52aWV3Q291cnNlVXJsfVxuICAgICAgICAgICAgZmVlZGJhY2tVcmw9e3RoaXMucHJvcHMuZmVlZGJhY2tVcmx9XG4gICAgICAgICAgLz59Lz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jb3Vyc2VzLzppZC9lZGl0XCIgcmVuZGVyPXsoe21hdGNofSkgPT4gPEVkaXRDb3Vyc2VcbiAgICAgICAgICAgIGlkPXttYXRjaC5wYXJhbXMuaWR9XG4gICAgICAgICAgICB2aWV3PVwiY291cnNlQnVpbGRlclwiXG4gICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XG4gICAgICAgICAgICBmZWVkYmFja1VybD17dGhpcy5wcm9wcy5mZWVkYmFja1VybH1cbiAgICAgICAgICAvPn0gLz5cbiAgICAgICAgPC9kaXY+IDogPGRpdj5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIHJlbmRlcj17KCkgPT4gPGRpdj5cbiAgICAgICAgICAgICAgPENvdXJzZUJhbm5lciB0aXRsZT1cIkt1cnNieWdnYXJlblwiIGFjdGl2ZVBhZ2U9XCJjb3Vyc2VCdWlsZGVyXCIgcm91dGVzPXt7ZmVlZGJhY2s6IHRoaXMucHJvcHMuZmVlZGJhY2tVcmx9fSAvPlxuICAgICAgICAgICAgICA8aDI+QmVow7ZyaWdoZXQgc2FrbmFzPC9oMj5cbiAgICAgICAgICAgICAgPHA+RGV0dGEgdmVya3R5ZyDDpHIgZW5kYXN0IHRpbGwgZsO2ciBhbnN0w6RsbGRhIHDDpSBLdW5za2Fwc3Nrb2xhbi48L3A+XG4gICAgICAgICAgICAgIDxoMz5BbnbDpG5kYXJhdHRyaWJ1dDwvaDM+XG4gICAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIiBzdHlsZT17e2JvcmRlcjogXCIxcHggc29saWQgI2VlZVwifX0+XG4gICAgICAgICAgICAgICAgPHRoZWFkPlxuICAgICAgICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgICAgICA8dGg+QXR0cmlidXQ8L3RoPlxuICAgICAgICAgICAgICAgICAgICA8dGg+VsOkcmRlPC90aD5cbiAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgICAgICA8dGJvZHk+XG4gICAgICAgICAgICAgICAgICB7T2JqZWN0LmtleXMoZW52LmN1cnJlbnRVc2VyKS5tYXAoYXR0ciA9PiA8dHIga2V5PXthdHRyfT5cbiAgICAgICAgICAgICAgICAgICAgPHRkPnthdHRyfTwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDx0ZD57ZW52LmN1cnJlbnRVc2VyW2F0dHJdfTwvdGQ+XG4gICAgICAgICAgICAgICAgICA8L3RyPil9XG4gICAgICAgICAgICAgICAgPC90Ym9keT48L3RhYmxlPlxuICAgICAgICAgICAgPC9kaXY+fSAvPlxuICAgICAgICAgIDwvZGl2Pn1cbiAgICAgIDwvUm91dGVyPlxuICAgICAgPEVycm9yU3VjY2Vzc0ZlZWRiYWNrIC8+XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsIi8vIDxJbml0aWFsaXphdGlvbj5cbmltcG9ydCAnLi9zZXQtY3VycmVudC11c2VyJzsgLy8gRW11bGF0ZSBzZXJ2ZXItc2lkZSBzY3JpcHQgdG8gc2V0IGN1cnJlbnQgdXNlclxuaW1wb3J0ICcuLi9nbG9iYWwtc2V0dGVycy9zZXQtYWxsJzsgLy8gQ2xpZW50LXNpZGUgaW5pdGlhbGl6YXRpb25cbi8vIDwvSW5pdGlhbGl6YXRpb24+XG5cbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvdXJzZUJ1aWxkZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyJztcbmltcG9ydCB7IENob29zZVVzZXIgfSBmcm9tICcuL3V0aWxzL2Nob29zZS11c2VyJztcbmltcG9ydCB7IExhbmd1YWdlQ29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL0xhbmd1YWdlQ29udGV4dCc7XG5pbXBvcnQgeyBJbmplY3RlZEludGxQcm9wcywgaW5qZWN0SW50bCB9IGZyb20gJ3JlYWN0LWludGwnO1xuaW1wb3J0IHsgc2V0dXBJbnRsIH0gZnJvbSAnLi4vY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvU2V0dXBMYW5ndWFnZUludGwnO1xuXG5jbGFzcyBfQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEluamVjdGVkSW50bFByb3BzPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBhbnkpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgaWYgKCFsb2NhdGlvbi5oYXNoKSBsb2NhdGlvbi5oYXNoID0gXCIjL1wiO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtpbnRsfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIGVudi5jdXJyZW50VXNlciA/XG4gICAgICA8TGFuZ3VhZ2VDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt7IGludGwgfX0+XG4gICAgICAgIDxDb3Vyc2VCdWlsZGVyXG4gICAgICAgICAgdmlld0NvdXJzZVVybD1cImNvdXJzZXZpZXdlci5odG1sXCJcbiAgICAgICAgICBmZWVkYmFja1VybD1cImh0dHA6Ly9zdnQuc2UvbnloZXRlclwiIC8+XG4gICAgICA8L0xhbmd1YWdlQ29udGV4dC5Qcm92aWRlcj5cbiAgICA6IDxDaG9vc2VVc2VyIC8+XG4gIH1cbn1cblxuY29uc3QgQXBwID0gc2V0dXBJbnRsKGluamVjdEludGwoX0FwcCkpO1xuZXhwb3J0IGRlZmF1bHQgQXBwO1xuXG4iXSwic291cmNlUm9vdCI6IiJ9