var testpagecoursebuilder=function(e){function t(t){for(var r,s,o=t[0],l=t[1],c=t[2],d=0,m=[];d<o.length;d++)s=o[d],a[s]&&m.push(a[s][0]),a[s]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(u&&u(t);m.length;)m.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,o=1;o<n.length;o++){var l=n[o];0!==a[l]&&(r=!1)}r&&(i.splice(t--,1),e=s(s.s=n[0]))}return e}var r={},a={7:0},i=[];function s(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=r,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(n,r,function(t){return e[t]}.bind(null,r));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],l=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var u=l;return i.push([165,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return s}),n.d(t,"k",function(){return l}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return h}),n.d(t,"n",function(){return p}),n.d(t,"l",function(){return f}),n.d(t,"b",function(){return v}),n.d(t,"c",function(){return g}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return y}),n.d(t,"m",function(){return k});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function i(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function s(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&i(n,t),n}var o=[].concat;function l(e){return o.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function u(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],i=t.slice(1);return function(e,t){return function e(t,n,r,i){var s=t[r];if(null==s)return-1;var o=n[r];return null==o?1:0===i.length?a(s,o):e(s,o,i[0],i.slice(1))}(e,t,n,i)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function h(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function p(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function f(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r],s=t(i),o=n[s];o?o.push(i):n[s]=[i]}return n}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r];n[t(i)]=i}return n}function b(e,t){var n,a,i={};try{for(var s=r.h(t),o=s.next();!o.done;o=s.next()){var l=o.value;l in e&&(i[l]=e[l])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=s.return)&&a.call(s)}finally{if(n)throw n.error}}return i}function y(e,t){var n=g(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function k(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,i=n.length;a<i;++a){var s=n[a];if(r[a]!==s)return!1;if(e[s]!==t[s])return!1}return!0}},function(e,t,n){"use strict";var r=n(33);r.a.env||(r.a.env={}),t.a=r.a.env},,function(e,t,n){"use strict";var r=n(19);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,,function(e,t,n){"use strict";var r=n(29);r.a.cfg||(r.a.cfg={}),t.a=r.a.cfg},function(e,t){e.exports=jQuery},function(e,t,n){"use strict";var r=n(3),a=n(4),i=n(19),s=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(20);function l(e,t){return o.a[e].relationships[t]}function c(e,t){var n=function(e){var t=function(e){return!0};return e.from?u(t,function(t){return t.dateTime>=e.from}):e.to?u(t,function(t){return t.dateTime<e.to}):e.ids?u(t,function(t){return e.ids.includes(t.id)}):e.name?u(t,function(t){return t.name===e.name}):e.tags?u(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function u(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var h=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var i=a[r];localStorage.setItem("cache-bust-"+n+"-"+i,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":t[e.sourceTable]=!0,t["hef-"+l(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),p=n(15);function f(e,t){for(var n=Object.keys(t),r=e,i=0,s=n;i<s.length;i++){var o=s[i];r===e&&(r=a.a({},e));var l=t[o];if(l&&"object"==typeof l){var c=Object.keys(l).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var u=function(e){var t=l[e];switch(e){case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var i=0,s=n;i<s.length;i++){var c=s[i];a.includes(c)||a.push(c)}break;case"$remove":var u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!u.includes(e)})}},d=0,m=c;d<m.length;d++){u(m[d])}continue}}r[o]=l}return r}function v(e,t){for(var n=Object.keys(t),r=a.a({},e),i=0,s=n;i<s.length;i++){var o=s[i],l=t[o];if(l&&"object"==typeof l){var c=Object.keys(l).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var u=function(e){var t=l[e];switch(e){case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");s=(s=r[o])?a.a({},s):{},r[o]=s;var i=s.$remove;Array.isArray(i)&&(s.$remove=i.filter(function(e){return!n.includes(e)}),0===s.$remove.length&&delete s.$remove),u=(u=s.$add)?u.concat(n):n.slice(),s.$add=u;break;case"$remove":var s,c=t;if(!Array.isArray(c))throw new Error("$remove instruction must contain array");s=(s=r[o])?a.a({},s):{},r[o]=s;var u=s.$remove;Array.isArray(u)&&(s.$add=u.filter(function(e){return!c.includes(e)}),0===s.$add.length&&delete s.$add),i=(i=s.$remove)?i.concat(c):c.slice(),s.$remove=i}},d=0,m=c;d<m.length;d++){u(m[d])}continue}}r[o]=l}return r}var g=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,i,s;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(i=r[n]).op||i.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==i.op||i.targetBranchId&&i.branchId!==this.query.branchId&&i.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===i.op&&(i.deltaDoc.tags&&this.query.tags||i.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:s=this.getDataWithMutationsApplied(e,!1,this.data),this.data=s,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,i=this.includes,s=this.query,o=s.hasEdgesFrom?[].concat(s.hasEdgesFrom||[]):[],c=s.tags?[].concat(s.tags||[]):[];switch(t.op){case"update":return Object(p.e)(e,function(e){if(e.id===t.id){var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return i.forEach(function(r){var i,s=e[r];if(s){var o=Object(p.e)(s,function(e){if(e.id!==t.id)return e;var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==s&&(e=a.a({},e,((i={})[r]=o,i)))}}),e});case"add-related":if(r===t.table&&-1!==i.indexOf(t.graphProp))return Object(p.e)(e,function(e){var r;if(e.id!==t.id)return e;var i=a.a({},t.relatedDoc);return n&&(i.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([i]),r))});if(s.hasEdgesFrom&&o.includes(t.id)&&r===l(t.table,t.graphProp)){if(!s.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return s.ids&&s.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==i.indexOf(t.graphProp)?Object(p.e)(e,function(e){var r,i=e[t.graphProp];return i?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?i.map(function(e){return e.id!==t.relatedId?e:a.a({},e,{$meta:"deleting"})}):i.filter(function(e){return e.id!==t.relatedId}),r)):e}):s.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedId?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedId}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(s.include){var u=i.map(function(e){return{label:e,table:l(r,e)}}).filter(function(e){return e.table===t.table});if(u.length>0)return Object(p.e)(e,function(e){return u.forEach(function(r){var i,s=r.label,o=e[s];o&&(e=a.a({},e,((i={})[s]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),i)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),b=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new s(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return g.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesFrom",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.hasEdgesTo=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesTo",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:h.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new i.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e,deltaDoc:t}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(31).a),y=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===g.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var i=a.find(function(t){return o.a[r.table].relationships[t]===e});if(i){for(var s={},l=0,u=r.data;l<u.length;l++){var d=u[l];c(t,d[i]).forEach(function(e){return s[e.id]=e})}var m=Object.keys(s).map(function(e){return s[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var h=c(t,r.data);return t.ids.every(function(e){return h.some(function(t){return t.id===e})})?{value:h}:"continue"}},i=0,s=this.queries;i<s.length;i++){var l=a(s[i]);if("object"==typeof l)return l.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,i=this.findQuery(n,r);i?i.timeoutHandle&&(clearTimeout(i.timeoutHandle),i.timeoutHandle=null):(i=new g(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(i)),i.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,i=(n.repo,this.findQuery(r,a));i&&(i.unsubscribe(e),0===i.subscriptions.length&&(i.timeoutHandle=setTimeout(function(){0===i.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==i}))},this.queries.length>50?500:3e5)))},e}(),k=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return l(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return l(e,t)})).some(function(e){return l(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),i=e.length,s=function(t){var i=e[t];if("update"===i.op){var s=r.findIndex(function(e){return"update"===e.op&&e.branchId===i.branchId&&e.id===i.id});s>=0&&(n[t]=a.a({},i,{deltaDoc:v(i.deltaDoc,r[s].deltaDoc)}),r.splice(s,1))}},o=0;o<i;++o)s(o);return n.concat(r)},e}(),E=n(51),w=function(){function e(e,t,n,r){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.a(0),this.errorSubscribers=[],this.stateSubscribers=[]}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,i,s;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),i=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]}}}),h.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),[4,this.querySet.commitMutations(k.merge(e,i),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return s=a.sent(),this.persistedVersion.dispatchError(s),s&&s.name&&s.name.startsWith("http4")?(this.dispatchError(s,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(s,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new i.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),C=function(){function e(e,t,n,r,a,i,s){var l=this;this.getClient=e,this.getUser=t,this.defaultQueryOptions=n,this.mutationQueue=r,this.querySet=a,this.writer=i,this.cacheOptimized=s,r||(this.mutationQueue=new k),a||(this.querySet=new y(this.mutationQueue)),i||(this.writer=new w(this.mutationQueue,this.querySet,e,t)),Object.keys(o.a).forEach(function(e){var t=new b(l,e,n||{});s&&(t=t.cacheOptimized()),l[e]=t})}return e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var S=n(5),O=n(8);n.d(t,"c",function(){return T}),n.d(t,"d",function(){return x}),n.d(t,"b",function(){return I}),n.d(t,"a",function(){return N});var T=new C(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""}),x=Object(S.i)(O.a.KED_REALM),I={standardSchool:T.schools.name("standard").cacheOptimized().single(),get mySchool(){return T.schools.name(r.a.currentUser.school).cacheOptimized().single()}},N={getBranchId:function(e,t){return e.switchMap(function(e){return T.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return T.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return T.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(S.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return T.courseBlocks.tags(e).idsOnly().concat(T.courseContents.tags(e).idsOnly()).concat(T.courseTabs.tags(e).idsOnly()).concat(T.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},,function(e,t,n){"use strict";var r=n(1),a=n(5);var i=n(16);n.d(t,"a",function(){return s}),n.d(t,"c",function(){return l}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return h});var s=["user","role","school","debug","testVersion","testversion","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function l(e,t){return o(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function u(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,s=Object(i.b)(location.search),o=r.a({},s,{role:t,school:n}),l=Object(i.a)(o);a?location.href=""+a+l:(location.hash="#",location.search=l)}};function m(e){d.actAs(e)}function h(e,t){var n,a,o=Object(i.b)(location.search),l={};try{for(var c=r.h(s),u=c.next();!u.done;u=c.next()){var d=u.value;o[d]&&(l[d]=o[d])}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var m=Object(i.a)(r.a({},l,t)),h=e.indexOf("#");return h>=0?""+e.substr(0,h)+m+e.substr(h):""+e+m}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"d",function(){return s}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return l});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function i(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function s(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,s;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),i=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(i.apply(Uint8Array,[void 0,r.sent()])),s=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[s++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function l(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var i=e[r],s=t(i);s!==i&&(n===e&&(n=e.slice()),n[r]=s)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),i=t[0],s=t[1];return a[n?i.toLowerCase():i]=s}),a}function i(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function s(e){return"?"+i(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"k",function(){return m}),n.d(t,"c",function(){return h}),n.d(t,"g",function(){return p}),n.d(t,"h",function(){return f}),n.d(t,"m",function(){return v}),n.d(t,"j",function(){return g}),n.d(t,"l",function(){return b}),n.d(t,"b",function(){return y}),n.d(t,"f",function(){return E}),n.d(t,"a",function(){return w}),n.d(t,"i",function(){return C}),n.d(t,"e",function(){return S}),n.d(t,"d",function(){return O});var r=n(1),a=n(6),i=n.n(a),s=n(5),o=n(42),l=n.n(o),c=n(9),u=n.n(c),d=n(3);function m(e,t,n,a,i){var o,c,u={},d=t.id,m=function(o){var l,c,m,h,p,f,v=a[o],g=e[o]||[],b=t[o];if(!b)return"continue";var y=b.map(function(e,t){return{doc:e,idx:t}}),k=y.filter(function(e){return!g.some(function(t){return t.id===e.doc.id})});try{for(var E=r.h(k),w=E.next();!w.done;w=E.next()){var C=w.value,S=(D=r.a({},C.doc)).$meta;delete D.$meta,"add"===S?(D.id||(D.id=Object(s.h)()),i.add(v,D)):"update"===S&&i.put(v,D),i.link(n,d,v,D.id,o),u[o]||(u[o]={}),u[o][C.idx]={$set:D}}}catch(e){l={error:e}}finally{try{w&&!w.done&&(c=E.return)&&c.call(E)}finally{if(l)throw l.error}}var O=g.filter(function(e){return!b.some(function(t){return t.id===e.id})});try{for(var T=r.h(O),x=T.next();!x.done;x=T.next()){var I=x.value;i.unlink(n,d,v,I.id,o)}}catch(e){m={error:e}}finally{try{x&&!x.done&&(h=T.return)&&h.call(T)}finally{if(m)throw m.error}}var N=y.filter(function(e){return g.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var j=r.h(N),R=j.next();!R.done;R=j.next()){var D,U=R.value;delete(D=r.a({},U.doc)).$meta,i.put(v,D),u[o]||(u[o]={}),u[o][U.idx]={$set:D}}}catch(e){p={error:e}}finally{try{R&&!R.done&&(f=j.return)&&f.call(j)}finally{if(p)throw p.error}}};try{for(var h=r.h(Object.keys(a)),p=h.next();!p.done;p=h.next()){m(p.value)}}catch(e){o={error:e}}finally{try{p&&!p.done&&(c=h.return)&&c.call(h)}finally{if(o)throw o.error}}return l()(t,u)}function h(e){return i()(e).format("YYMMDD HH:mm")}function p(e){return i()(e).format("YYMMDD")}function f(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function v(e,t,n){return l()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function g(e,t,n){return l()(t,{createdDate:{$set:Date.now()},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function b(e,t){var n=Date.now();return(e=v(n,e,t)).createdBy||(e=g(0,e,t)),e}function y(e,t,n){var a,i,s=r.a({},e),o=t[e.id];o&&(s.$etag=o);try{for(var l=r.h(n),c=l.next();!c.done;c=l.next()){var u=c.value,d=e[u].map(function(e){return y(e,t,[])});s[u]=d}}catch(e){a={error:e}}finally{try{c&&!c.done&&(i=l.return)&&i.call(l)}finally{if(a)throw a.error}}return s}function k(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function E(e){return k(0,function(t){return t.readAsText(e)})}function w(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function C(e){var t=u()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function S(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,s,o,l,c;return r.d(this,function(u){switch(u.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,i=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),i&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return s=r.f.apply(void 0,[u.sent(),3]),o=s[0],l=s[1],c=s[2],o.tasks=l,o.abilities&&o.abilitiesOrder&&(o.abilities=o.abilitiesOrder.map(function(e){return o.abilities.find(function(t){return t.id===e})})),o.knowledgeRequirements&&o.knowledgeRequirementsOrder&&(o.knowledgeRequirements=o.knowledgeRequirementsOrder.map(function(e){return o.knowledgeRequirements.find(function(t){return t.id===e})})),o.centralContent&&o.centralContentOrder&&(o.centralContent=o.centralContentOrder.map(function(e){return o.centralContent.find(function(t){return t.id===e})})),a&&(o.templateChain=c),[2,o]}})})}function O(e){return e.migratedTexts&&Object.keys(e.migratedTexts).some(function(t){return Object.keys(e.migratedTexts[t]).length>0})}},function(e,t,n){"use strict";var r=n(4),a=n(19),i=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),s=n(15);function o(e){e.resources||(e.resources=[])}function l(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var u=JSON.parse(c),d=u.time,m=u.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return l(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return l(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var h=new i,p=Date.now(),f=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(s.a)(this.getBearer.bind(this)),this.refreshBearer=Object(s.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,h.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,i,s;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-p>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return i=this,s=this.tokenResponseMapper,[4,e.text()];case 4:return i.tokenInfo=s.apply(this,[r.sent()]),h.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),v={fetch:fetch.bind(self),btoa:btoa.bind(self)},g=function(e){function t(t,n,r){var a="string"!=typeof n?n:new f(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,v,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return h}),n.d(t,"b",function(){return f}),n.d(t,"c",function(){return v}),n.d(t,"a",function(){return g})},function(e,t,n){"use strict";var r=n(4),a=n(15),i=n(26),s=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new i.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var i=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),e}).catch(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,i,s){return r.b(this,void 0,void 0,function(){var o,l,c,u,d,m,h,p,f,v,g;return r.d(this,function(b){switch(b.label){case 0:return s&&"no-cache"===s.cache&&(i=r.a({},i,{nocache:Object(a.c)()})),o=i&&Object.keys(i).filter(function(e){return void 0!==i[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(i[e])}).join("&"),c=(l=this).authHeader,u=l.tokenInfo,d=l.bearerProvider,c||u||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=u=b.sent(),b.label=2;case 2:return u?u.expires<Date.now()?(console.log("Token expired. Refresh it:"),h=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:h.tokenInfo=u=b.sent(),b.label=4;case 4:c="Bearer "+u.token,b.label=5;case 5:return c&&(n.Authorization=c),p=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},s))];case 6:return 401==(f=b.sent()).status&&this.bearerProvider?(v=f.headers.get("www-authenticate"),console.log("Got "+f.status+" from "+(this.baseUrl+e)),v&&/Bearer/i.test(v)?(g=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return g.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},s))];case 8:f=b.sent(),b.label=9;case 9:return[2,f]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,i,o,l){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=i,this.tokenUrl=o,this.tokenQuery=l,this.tokenInfo={token:null,expires:0},this.client=new s(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),l=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),i=n[2];if("R"!==i&&"W"!==i&&"S"!==i)throw new Error("Invalid access string: "+t);return new e(r,a,i)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var u=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return l}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return s}),n.d(t,"c",function(){return u});var d=function(){function e(e,t,n){this.http=new s(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var i,s,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(i=r.sent()).status?[3,3]:(s=u.bind,o=[void 0,i.status],[4,i.text()]);case 2:throw new(s.apply(u,o.concat([r.sent()])));case 3:return[4,i.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,s,o;return r.d(this,function(l){switch(l.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(i=l.sent()).status?[3,3]:(s=u.bind,o=[void 0,i.status],[4,i.text()]);case 2:throw new(s.apply(u,o.concat([l.sent()])));case 3:return[4,i.json()];case 4:return[2,l.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=u.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(u,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(i){return i.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(i){return i.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(i){return i.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(i){return i.unlink2(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e}()},function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],autoDelete:!0,relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],autoDelete:!0,relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],autoDelete:!0,relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return l}),n.d(t,"a",function(){return c});var r=n(1),a=n(6),i=n.n(a);function s(e){return"AT"===e?[32,51]:[1,25]}function o(e){return e.month()>=6?[i()(new Date(e.year(),7,1)),i()(new Date(e.year(),11,31))]:[i()(new Date(e.year(),0,1)),i()(new Date(e.year(),6,31))]}function l(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.className,i=t.children,s=t.headerClassName,o=t.contentClassName,l=this.state.headerOpen;return a.createElement("div",{className:(r||"")+" openClose"+(l?" open":"")},a.createElement("div",{className:"openHeader"+(s?" "+s:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},n),a.createElement("div",{className:"openContent"+(o?" "+o:"")},i))},t}(a.Component)},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(27).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(4),a=n(28),i=n(37),s=n(31),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new s.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,i=[null,null],s={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,s)),i[0]=e,null!==i[1]&&t(i,null,s)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,s)),i[1]=e,null!==i[0]&&t(i,null,s)}),s})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,i={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,s,o){if(a=o,r&&(r.unsubscribe(),r=null),s)t(null,s,i);else try{var l=e(n);l&&"function"==typeof l.subscribe?r=l.subscribe(function(e,n,a){r=a,t(e,n,i)}):t(l,null,a)}catch(s){t(null,s,a)}}),i})},t}(a.a);o.prototype.map=Object(i.a)(o)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},,function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(4),a=n(28),i=n(37),s=n(27),o=n(26),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new s.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);l.prototype._map=Object(i.a)(l)},,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"b",function(){return l}),n.d(t,"a",function(){return c});var r,a=n(1),i=n(5),s=n(43),o=n(2),l=function(){function e(e,t,n,r){this.http=new i.f(e,t,{bearerProvider:n}),this.userEmailGetter=r,this.getActiveCourses=u(this.getActiveCourses),this.getLatestAssessments=u(this.getLatestAssessments),this.getStudentGoals=u(this.getStudentGoals),this.getStudentFutureAbilities=u(this.getStudentFutureAbilities),this.getTeacherTutorStudents=u(this.getTeacherTutorStudents)}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return a.b(this,void 0,void 0,function(){var t,n,s,l,c;return a.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=i.c.bind,l=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(i.c,l.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw c=u.sent(),console.error("Error from EDS: "+c),new Error(Object(o.a)(r||(r=a.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return a.b(this,void 0,void 0,function(){var t,n,r,s;return a.d(this,function(a){switch(a.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=a.sent()).status?[3,3]:(r=i.c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(r.apply(i.c,s.concat([a.sent()])));case 3:return[4,n.json()];case 4:return[2,a.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=i.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=i.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=i.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e}(),c=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new s.a(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new s.a({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}();function u(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),i=n(0),s=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,l=e.title;return i.createElement("div",{title:l||Object(s.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"b",function(){return m}),n.d(t,"a",function(){return k});var r=n(1),a=n(0),i=n(12),s=n(17),o=n(2),l=n(5),c=n(3),u=[{name:"schools",text:Object(o.a)(h||(h=r.e(["Skolor"],["Skolor"]))),route:"/schools"},{name:"subjects",text:Object(o.a)(p||(p=r.e(["Ämnen"],["Ämnen"]))),route:"/subjects"}],d=[{name:"courseBuilder",text:Object(o.a)(f||(f=r.e(["Kursbyggaren"],["Kursbyggaren"]))),route:"/courses/new"},{name:"studentPage",text:Object(o.a)(v||(v=r.e(["Elevsida"],["Elevsida"]))),route:""},{name:"feedback",text:a.createElement("span",null,a.createElement("i",{className:"fa fa-commenting-o","aria-hidden":"true"})," Feedback"),route:"https://kg.kunskapsporten.se/kursbyggaren/"}];function m(e,t,n,r){var a=Object(l.h)();n.update({imageId:{$set:a},images:{$set:[{id:a,url:r,acl:["role:USER:R","schoolRole:"+c.a.currentUser.school+"/EMPLOYEE:S"],$meta:"add"}]}})}var h,p,f,v,g,b,y,k=function(e){var t=e.title,n=(e.isTemplate,e.host),l=e.course,h=(e.origCourse,e.backgroundImage),p=e.activePage,f=c.a.currentUser.roles.some(function(e){return"ADMIN"===e}),v=d;return f&&(v=u.concat(v)),a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},h&&a.createElement("style",null,"\n        .pageHeader {\n          background-image: url('"+h+"') !important;\n        }\n      "),a.createElement("div",{className:"pageHeader",onDragOver:l&&s.a,onDrop:l&&function(e){return function(e,t,n,a){return r.b(this,void 0,void 0,function(){var n,a,i,s,l,u,d,h;return r.d(this,function(p){switch(p.label){case 0:return e.stopPropagation(),e.preventDefault(),n=e.dataTransfer.files,a=null,i=Array.from(e.dataTransfer.items),n.length>0?(s=n[0]).size>2097152?(Object(o.n)(Object(o.a)(g||(g=r.e(["Kan inte ladda upp bilder större än 2 MB"],["Kan inte ladda upp bilder större än 2 MB"])))),[2]):((l=new FormData).append("files",s),[4,c.a.kedBackendClient.http.fetch("web-upload","put",{},{},{body:l})]):[3,3];case 1:return 200!==(u=p.sent()).status?(Object(o.n)(Object(o.a)(b||(b=r.e(["Kunde inte ladda upp filen till Google Storage"],["Kunde inte ladda upp filen till Google Storage"])))),[2]):[4,u.text()];case 2:return a=p.sent(),[3,7];case 3:d=function(e){var t;return r.d(this,function(n){switch(n.label){case 0:return(t=i[e]).type.match("^text/uri-list")?[4,new Promise(function(e){return t.getAsString(e)})]:[3,2];case 1:a=n.sent(),n.label=2;case 2:return[2]}})},h=0,p.label=4;case 4:return h<i.length?[5,d(h)]:[3,7];case 5:p.sent(),p.label=6;case 6:return++h,[3,4];case 7:return null==a?(Object(o.n)(Object(o.a)(y||(y=r.e(["Kunde inte hitta någon bild i innehållet"],["Kunde inte hitta någon bild i innehållet"])))),[2]):(m(0,0,t,a),[2])}})})}(e,n)}},a.createElement("a",null,a.createElement("h1",null,t)),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement("div",{className:"align-horizontal"}),a.createElement("div",{className:"horizontalMenu"},a.createElement("ul",null,v.map(function(t){return{item:t,isActive:p===t.name,callback:e.callbacks&&e.callbacks[t.name],givenRoute:e.routes&&e.routes[t.name],defaultRoute:t.route}}).filter(function(e){return e.callback||e.defaultRoute||e.givenRoute}).map(function(e){var t=e.item,n=e.isActive,r=e.callback,s=e.defaultRoute,o=e.givenRoute;return a.createElement("li",{key:t.name,className:n?"activePage":"",onClick:r},r?a.createElement("a",null,t.text):s||o?o||/^http[s]\:\/\//i.test(s)?a.createElement("a",{href:o||s},t.text):a.createElement(i.b,{to:s},t.text):a.createElement("a",null,t.text))})))))))))}},function(e,t){e.exports=ReactDOM},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(6),i=n.n(a),s=n(21);var o=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(i()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n,a,i="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];t&&(i=i.substr(2));try{for(var s=r.h(e),o=s.next();!o.done;o=s.next()){switch(o.value.split("-")[0].split("_")[0].toLowerCase()){case"en":return("AT"===this.term?"AT":"ST")+" "+i;case"sv":return("AT"===this.term?"HT":"VT")+" "+i}}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=s.return)&&a.call(s)}finally{if(n)throw n.error}}},e}()},,,function(e,t,n){"use strict";var r=n(11);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Vågrät linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga länk",result:function(){var e=window.prompt("Ange länkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",result:function(e,t){var n,r,a,i=window.prompt("Ange bildens URL");if(i){var s=document.createElement("img");s.src=i,s.tabIndex=1,n=s,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),s.onfocus=t.onFocus,s.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(11),s=new DOMParser,o={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function l(e){for(var t=s.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)c(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function c(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&o[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),u(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),i=a.name&&!!t[a.name.toLowerCase()];i||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),u(e)&&(t=!0),t}function u(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)c(n.item(r))&&(t=!0);return t}var d={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(i.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(i.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(i.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(i.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(i.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(i.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(i.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(i.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(i.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(i.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(i.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(i.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(i.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(i.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",result:function(){var e=window.prompt("Enter the image URL");e&&Object(i.a)("insertImage",e)}}};n.d(t,"a",function(){return b});var m="wysiwyg-actionbar",h="wysiwyg-button",p="wysiwyg-content",f="wysiwyg-focusrect",v="wysiwyg-focuspoint",g="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.addEventListener("mousedown",this.onMouseDown),document.addEventListener("mousemove",this.onMouseMove),document.addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentWillUnmount=function(){document.removeEventListener("mousedown",this.onMouseDown),document.removeEventListener("mousemove",this.onMouseMove),document.removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||l(e.html)!==l(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(l(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:y(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(v)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),i=a.next();!i.done;i=a.next()){switch(i.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d,s=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(s=s.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta vänster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta höger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden på egen rad",result:function(){return e("unfloat")}}])));var o=this.state.focusRect,c=this.props,u=c.readOnly,b=c.reportNumChars,y=c.maxChars;return a.createElement("div",{className:this.props.className},!u&&a.createElement("div",{className:m},s.map(function(e,n){return a.createElement("button",{key:n,className:h,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:u?g:p,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:l(this.props.html)},contentEditable:!u,onPaste:function(e){if(!isNaN(y)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>y&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:NaN)}:null,onKeyPress:isNaN(y)?null:function(e){var t=e.target.innerText;t&&t.length>=y&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){u||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(i.a)("outdent"):Object(i.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),o&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:f,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:v+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:v+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:v+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:v+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function y(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},,,function(e,t,n){"use strict";n(28),n(27),n(31);var r=n(26);n.d(t,"a",function(){return r.a})},,function(e,t,n){"use strict";n.d(t,"d",function(){return c}),n.d(t,"b",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"e",function(){return m}),n.d(t,"c",function(){return h});var r,a,i,s,o=n(1),l=n(2);function c(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function u(e){return d([e],e.tasks)}function d(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function m(e){return Object(l.k)([function(e){var t={};return Object(l.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(l.a)(r||(r=o.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(l.a)(a||(a=o.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(l.a)(i||(i=o.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(l.a)(s||(s=o.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function h(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(22),s=n(2),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,o=t.markedIds,l=t.markMode,c=t.migratedIds,u=t.uncoveredIds,d=Object(s.b)(n,function(e){return e.group||"default"}),m=Object.keys(d);return a.createElement(i.a,{title:a.createElement("p",null,r),className:"larger"},m.map(function(t){return a.createElement(a.Fragment,{key:t},1===m.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=o.some(function(e){return e===t.id}),r=c&&!!c[t.id],i=u&&u[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return l&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(l?" selectable":"")+(n?" markedGreen":i?" markedRed":"")+(r?" migrated":""),title:r?l?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(9),s=n.n(i),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editMode:!1,runtimeStyle:null,text:t.text||""},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){this.props.text!==e.text&&this.setState({text:e.text||""})},t.prototype.render=function(){var e=this,t=this.state.text||"";return a.createElement("div",{className:"renameable-text"+(t?"":" unnamed")+(this.props.readOnly?" disabled":""),tabIndex:this.state.editMode?void 0:0,onFocus:function(t){e.rename()},style:{width:"100%"}},a.createElement("div",{ref:function(t){return e.label=t},style:{display:this.state.editMode?"none":""}},t||this.props.clickAdvertiseText),"textarea"===this.props.tag?a.createElement("textarea",{ref:function(t){return e.input=t},maxLength:this.props.maxChars,style:r.a({},this.state.runtimeStyle,{display:this.state.editMode?"":"none"}),onFocus:function(e){return s()(e.target).select()},onBlur:this.onBlur.bind(this),value:t,onKeyDown:this.onKeyDown.bind(this),onChange:this.onChange.bind(this),tabIndex:this.state.editMode?0:void 0,placeholder:this.props.placeholder}):a.createElement("input",{ref:function(t){return e.input=t},type:"text",maxLength:this.props.maxChars,style:r.a({},this.state.runtimeStyle,{display:this.state.editMode?"":"none"}),onFocus:function(e){return s()(e.target).select()},onBlur:this.onBlur.bind(this),value:t,onKeyDown:this.onKeyDown.bind(this),onChange:this.onChange.bind(this),tabIndex:this.state.editMode?0:void 0,placeholder:this.props.placeholder}))},t.prototype.onKeyDown=function(e){27===e.keyCode?(this.input.value=this.props.text||"",this.input.blur(),e.stopPropagation()):13===e.keyCode&&(this.propagateOnChange(this.input.value),this.setState({editMode:!1,text:this.input.value}))},t.prototype.onBlur=function(e){this.propagateOnChange(this.input.value),this.setState({editMode:!1,text:this.input.value})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t.prototype.onChange=function(e){this.setState({text:this.input.value}),this.props.eager&&this.propagateOnChange(this.input.value)},t.prototype.rename=function(e){var t=this;if(!this.state.editMode&&!this.props.readOnly){e=e||this.state.text||"";var n=s()(this.label);this.setState({text:e,editMode:!0,runtimeStyle:{textAlign:n.css("textAlign"),fontSize:n.css("font-size"),paddingTop:n.css("paddingTop"),paddingBottom:n.css("paddingBottom"),paddingLeft:n.css("paddingLeft"),paddingRight:n.css("paddingRight"),marginTop:n.css("marginTop"),marginBottom:n.css("marginBottom"),marginLeft:n.css("marginLeft"),marginRight:n.css("marginRight"),borderRadius:n.css("borderRadius"),backgroundColor:n.css("backgroundColor"),lineHeight:n.css("lineHeight"),fontWeight:n.css("fontWeight"),outLine:0,borderStyle:"none",height:"100%",width:"100%",boxSizing:"border-box"}},function(){return s()(t.input).focus()})}},t}(a.Component)},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"Administratör",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-Lärare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Borås",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"Borås",schoolType:"Grundskolor"},{displayName:"Elev Borlänge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"Borlänge",schoolType:"Gymnasium"},{displayName:"Roll-lös",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(10),s=n(35),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>2&&(n=n.slice(1)),{infos:n.concat(e)})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),i.c.writer.onError(this._dbWriterError),i.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),i.c.writer.off(this._dbWriterError),i.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,i=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!i}).map(function(t){var n=t.message,r=t.details,i=t.retryable,o=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(s.a,{onClick:function(){return e.removeError(n)}})),r||i?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},o?"Dölj detailer":"Visa detailjer")," "):void 0,o?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),i?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){i.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";var r=n(16),a=n(3),i=function(){return function(){a.a.currentUser,(Object(r.b)(location.search,{toLower:!0}).features||"").split(",").map(function(e){return e.toLowerCase()})}}();n.d(t,"a",function(){return i})},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),i=n(0),s=n(2),o=function(e){function t(t){return e.call(this,t)||this}return a.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.knowledgeRequirements,n=e.markedIds,o=e.migratedIds,l=e.explainedRequirements,c=this.props,u=c.idsToMarkNotOk,d=c.markMode,m=c.onMarkChanged,h=c.onExplainedRequirementsChanged,p=["E","C","A"],f=[],v=t.slice(),g=null;!(g=p.map(function(e){var t=v.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=v[t];return v.splice(t,1),n})).every(function(e){return null===e});)f.push(g);return i.createElement("div",null,i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,p.map(function(e){return i.createElement("th",{key:e},e)}))),i.createElement("tbody",null,f.map(function(e,t){return i.createElement(i.Fragment,{key:t},i.createElement("tr",null,e.map(function(e,t){var r=e&&n&&n.indexOf(e.id)>=0,a=e&&u&&u[e.id],s=e&&o&&!!o[e.id];return i.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:e?e.name:""},className:(d?"selectable":"")+(s?" migrated":"")+(r?" markedGreen":a?" markedRed":""),onClick:d&&e?function(){return m(e.id,!r)}:void 0,title:s?d?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0})})),l&&i.createElement("tr",null,e.map(function(e,t){var o=e&&n&&n.indexOf(e.id)>=0;return i.createElement("td",{key:t},o?i.createElement("textarea",{placeholder:Object(s.a)(r||(r=a.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!d,value:l[e.id]||"",onChange:h&&function(t){return h(e.id,t.target.value)}}):void 0)})))}))))},t}(i.Component)},,,,,,,,,,,,function(e,t,n){"use strict";var r=n(8);r.a.ENVIRONMENT="test",r.a.KED_API_URL="https://kedbackend.azurewebsites.net/api/",r.a.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",r.a.KED_TOKEN_URL="",r.a.KED_CLIENT_ID="",r.a.KED_CLIENT_SECRET="",r.a.KED_REALM="SE1";var a=n(1),i=n(16),s=n(18),o=n(5),l=n(3),c=n(13),u=n(2);function d(e,t,n){var r=Object(i.b)(t),s=Object(u.e)(r,c.a),o=a.f(Object(i.c)(e),2),l=o[0],d=o[1],m=Object(i.b)(d);return l+Object(i.a)(a.a({},m,s,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function h(e,t,n){return new o.e(s.c,s.d,e+t.mail+location.search,r.a.KED_CLIENT_ID,r.a.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var p,f,v=l.a.currentUser&&l.a.currentUser.mail;if(v)if(r.a.KED_TOKEN_PATH){var g=d(r.a.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);l.a.bearerProvider=(f=m(p=g,v),new s.b(p,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){l.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,f),{token:t.token,expires:Date.now()+354e4}},f)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(l.a.currentUser=JSON.parse(t))}(m(g,v));var b=d(r.a.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);l.a.googleTokenProvider=function(e,t){var n=m(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,v)}else{if(!(r.a.KED_TOKEN_URL&&r.a.KED_CLIENT_ID&&r.a.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");l.a.bearerProvider=h(r.a.KED_TOKEN_URL,l.a.currentUser,["kedbackend","EDS"]),l.a.googleTokenProvider=h(r.a.KED_TOKEN_URL+"/google",l.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}l.a.kedBackendClient=new s.a(r.a.KED_API_URL,l.a.bearerProvider);var y=n(34);l.a.edsClient=new y.b(s.c,r.a.EDS_API_URL,l.a.bearerProvider,function(){return l.a.currentUser.mail})},,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return h}),n.d(t,"b",function(){return p});var r,a,i,s=n(1),o=n(0),l=n(38),c=n(2),u=n(3),d=n(5),m=n(12),h=function(e){return o.createElement("div",{style:{outline:0}},o.createElement(l.a,{title:"Skolor",activePage:"schools",callbacks:{schools:function(){return location.hash="#/schools"}},routes:{feedback:e.feedbackUrl}}),o.createElement(p,s.a({},e)))},p=function(e){function t(t){var n=e.call(this,t)||this;return n.state=null,n}return s.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(c.n)(e)})},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:return this.props.id?(e=this.props.id,[4,u.a.kedBackendClient.get("schools",e)]):[3,2];case 1:return t=n.sent(),this.origSchool=s.a({},t),this.setState(s.a({},t)),[3,3];case 2:this.setState({id:Object(d.h)(),officialBranchId:Object(d.h)(),isGymnasium:"gymnasium"===this.props.type,isPrimarySchool:"primary"===this.props.type}),n.label=3;case 3:return[2]}})})},t.prototype.save=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:if(e=new d.a,(t=s.a({},this.state,{tags:(this.state.tags||[]).filter(function(e){return["primary","gymnasium"].indexOf(e)<0})})).isPrimarySchool&&t.tags.push("primary"),t.isGymnasium&&t.tags.push("gymnasium"),!t.isGymnasium&&!t.isPrimarySchool)throw new Error(Object(c.a)(r||(r=s.e(["Skolan måste antingen vara gymnasium eller grundskola"],["Skolan måste antingen vara gymnasium eller grundskola"]))));if(this.origSchool){if(this.origSchool.name!==this.state.name)throw new Error("Skolans namn får inte ändras. Kontakta Vemendo AB.");t.officialBranchId||(t.officialBranchId=Object(d.h)(),this.addSchoolBranch(t,e)),e.put("schools",t)}else t.acl=["role:USER:R"],t.acl.push(new d.b("schoolRole",t.name+"/EMPLOYEE","W").toString()),e.add("schools",t),this.addSchoolBranch(t,e);return[4,u.a.kedBackendClient.batch(e.mutationRequests)];case 1:return n.sent(),location.hash="#/schools",[2]}})})},t.prototype.addSchoolBranch=function(e,t){var n={id:e.officialBranchId,name:e.name,schoolId:e.id,acl:["role:USER:R",new d.b("schoolRole",e.name+"/EMPLOYEE","W").toString()]};t.add("branches",n)},t.prototype.deleteSchool=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:return prompt(Object(c.a)(a||(a=s.e(['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'],['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'])),this.state.name))!==this.state.name?[3,3]:[4,u.a.kedBackendClient.list("branches",{ids:[this.state.officialBranchId],include:"approvedChildren",flags:["includeIdsOnly"]})];case 1:return e=n.sent(),(t=new d.a).delete("schools",this.state.id),e[0].approvedChildren.forEach(function(e){var n=e.id;t.delete("branches",n)}),t.delete("branches",this.state.officialBranchId),[4,u.a.kedBackendClient.batch(t.mutationRequests)];case 2:return n.sent(),location.hash="#/schools",[3,4];case 3:alert("Skolan togs inte bort eftersom det namn du angav inte stämmer."),n.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=!!t.id,a=this.state,l=this.origSchool,d=u.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},o.createElement("h2",null,n),o.createElement("hr",null),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Namn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:!a||!a.name,disabled:!d||r,tabIndex:1,size:50,value:a?a.name:"",onChange:function(t){return e.setState({name:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Visningsnamn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:a&&!a.displayName,disabled:!d,tabIndex:1,size:50,value:a?a.displayName:"",onChange:function(t){return e.setState({displayName:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Typ:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"checkbox",name:"schoolTypePrimary",disabled:!d,checked:a&&a.isPrimarySchool,tabIndex:1,value:"primary",onChange:function(t){return e.setState({isPrimarySchool:t.target.checked})}})," Grundskola"),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"}),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"checkbox",name:"schoolTypeGymnasium",disabled:!d,checked:a&&a.isGymnasium,tabIndex:1,value:"gymnasium",onChange:function(t){return e.setState({isGymnasium:t.target.checked})}})," Gymnasium"),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("br",null),d&&r&&o.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.deleteSchool().catch(c.n)}},"Ta bort skola"),o.createElement("div",{className:"pull-right"}," "),o.createElement(m.b,{className:"btn btn-warning btn-large pull-right",to:"/schools"},"Avbryt"),d&&o.createElement("a",{tabIndex:1,className:"btn btn-large",onClick:function(){l&&l.name!==a.name&&!confirm(Object(c.a)(i||(i=s.e(["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."],["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."]))))||e.save().catch(c.n)}},"Spara")))},t}(o.Component)},,,function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),i=n(3),s=n(38),o=n(14),l=n(88),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(o.a,null));var e=this.state.subject,t=e.name;e.code,e.courseTemplates,e.schoolType;return a.createElement("div",null,a.createElement(s.a,{title:t,activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),a.createElement(l.a,{id:this.props.id}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(3),s=n(14),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(s.a,null));var e=this.state.subject,t=e.name,n=e.code,r=e.courseTemplates,i=e.schoolType;return a.createElement("div",null,"primary"===i?a.createElement(a.Fragment,null,a.createElement("h2",null,"Grundskoleämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var n=e.id,r=(e.code,e.publishable,e.points,e.schoolGrade);return a.createElement("li",{key:n,className:"complete"},t," för årskurs ",r)}))):a.createElement(a.Fragment,null,a.createElement("h2",null,"Kurser för ämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var t=e.id,n=e.name,r=(e.code,e.publishable,e.points);return a.createElement("li",{key:t,className:"complete"},n," - ",r,"p")}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=["Lära att lära","Samarbeta","Agera globalt","Visa handlingskraft","Vara innovativ","Leva digitalt"]},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(60);function i(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"Välj användare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,i=e.school,s=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===s.length?{fontStyle:"italic"}:{}},0===s.length?"saknar roller":s.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:i?{}:{fontStyle:"italic"}},i||"saknar skola"))}))))}},,function(e,t,n){"use strict";var r,a,i,s=n(1),o=n(0),l=n(38),c=n(3),u=n(2),d=n(12),m=n(13),h=n(14),p=function(e){var t=e.schools,n=e.viewCourseUrl,l=c.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"editable-school-list"},o.createElement("div",null,t?o.createElement("table",null,o.createElement("tbody",null,t.map(function(e){return o.createElement("tr",{className:"align-horizontal",key:e.id},o.createElement("td",null,o.createElement(d.b,{className:"editItem",to:"/schools/"+e.id+"/edit"})),o.createElement("td",null,o.createElement("p",null,e.name)),o.createElement("td",null,o.createElement("p",null,o.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"EMPLOYEE",school:e.name})}},"Agera som lärare på denna skola"))),o.createElement("td",null,o.createElement("p",null,o.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"STUDENT",school:e.name,url:n})}},"Agera som elev på denna skola"))))}))):o.createElement("p",null,o.createElement(h.a,null),"V.g. vänta medan skolor laddas")),o.createElement("br",null),t&&l&&o.createElement(d.b,{to:"/schools/new/"+e.type,className:"btn"},"gymnasium"==e.type?Object(u.a)(r||(r=s.e(["Lägg till gymnasieskola"],["Lägg till gymnasieskola"]))):"primary"==e.type?Object(u.a)(a||(a=s.e(["Lägg till grundskola"],["Lägg till grundskola"]))):Object(u.a)(i||(i=s.e(["Lägg till skola"],["Lägg till skola"])))))};n.d(t,"a",function(){return f}),n.d(t,"b",function(){return v});var f=function(e){return o.createElement("div",{style:{outline:0}},o.createElement(l.a,{title:"Skolor",activePage:"schools",routes:{feedback:e.feedbackUrl}}),o.createElement(v,{viewCourseUrl:e.viewCourseUrl}))},v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schools:null},n}return s.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(u.n)(e.message||e)})},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){var e;return s.d(this,function(t){switch(t.label){case 0:return[4,c.a.kedBackendClient.list("schools")];case 1:return e=t.sent(),this.setState({schools:e}),[2]}})})},t.prototype.render=function(){var e=this.state.schools;return e&&e.sort(Object(u.g)("name")),o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},e?o.createElement(o.Fragment,null,o.createElement("div",null,o.createElement("h2",null,"Gymnasieskolor"),o.createElement(p,{schools:e.filter(function(e){return e.isGymnasium}),viewCourseUrl:this.props.viewCourseUrl,type:"gymnasium"})),o.createElement("div",null,o.createElement("h2",null,"Grundskolor"),o.createElement(p,{schools:e.filter(function(e){return e.isPrimarySchool}),viewCourseUrl:this.props.viewCourseUrl,type:"primary"}))):o.createElement(h.a,null)))},t}(o.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(22),s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.task,n=e.course,s=e.updateLink;if(!t.migratedTexts)return a.createElement(a.Fragment,null," ");var o=t.migratedTexts,l=o.abilities,c=o.centralContent,u=o.knowledgeRequirements,d=Object.keys(u||{}).map(function(e){return r.a({},n.knowledgeRequirements.find(function(t){return t.id===e}),u[e])}),m={title:"Uppdaterat kunskapskrav för betyget A",type:"knowledgeRequirements",items:d.filter(function(e){return"A"===e.gradeStep})},h={title:"Uppdaterat Kunskapskrav för betyget C",type:"knowledgeRequirements",items:d.filter(function(e){return"C"===e.gradeStep})},p={title:"Uppdaterat kunskapskrav för betyget E",type:"knowledgeRequirements",items:d.filter(function(e){return"E"===e.gradeStep})},f={title:"Uppdaterade förmågor",type:"abilities",items:Object.keys(l||{}).map(function(e){return r.a({},n.abilities.find(function(t){return t.id===e}),l[e])})},v=[m,h,p,{title:"Uppdaterat centralt innehåll",type:"centralContent",items:Object.keys(c||{}).map(function(e){return r.a({},n.centralContent.find(function(t){return t.id==e}),c[e])})},f].filter(function(e){return e.items.length>0});return 0===v.length?a.createElement(a.Fragment,null," "):a.createElement(i.a,{className:"larger",title:a.createElement("div",null,a.createElement("div",{className:"warningFlag"},a.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),a.createElement("p",null,"Uppdaterade formuleringar från Skolverket"))},v.map(function(e){var t=e.title,n=(e.type,e.items);return a.createElement("div",{key:t},a.createElement("h5",null,t),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{width:"40%"}},"Ursprunglig formulering"),a.createElement("th",{style:{width:"40%"}},"Skolverkets nya formulering"),a.createElement("th",null,"Täcker uppgiften den nya formuleringen?"))),a.createElement("tbody",null,n.map(function(e){return a.createElement("tr",{key:e.id},a.createElement("td",{dangerouslySetInnerHTML:{__html:e.oldText}}),a.createElement("td",{dangerouslySetInnerHTML:{__html:e.name}}),a.createElement("td",null,a.createElement("button",{onClick:function(){return s(e.id,!0)}},"Ja - behåll kopplingen"),a.createElement("button",{onClick:function(){return s(e.id,!1)}},"Nej - ta bort kopplingen")))}))))}))},t}(a.Component)},,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(2),s=n(3),o=n(9),l=n.n(o);function c(e){switch(e.trim()){case"3":case"1-3":return["1-3"];case"6":case"4-6":return["4-6"];case"7-9":case"9":return["7-9"];case"1":case"1s":return["1-3"];case"1-6":return["1-3","4-6"];case"4-9":return["4-6","7-9"];default:throw new Error("Unexpected year in Skolverket XML: "+e+". Expecting 3,6,9 or 1-3, 4-6, 7-9")}}var u=n(5);function d(e,t){var n,a,i=new Set,s=new Map,o=new Set;t.forEach(function(t){if(t=t.trim(),e.has(t))s.set(t,e.get(t));else{var n=Object(u.h)();console.log("New id: "+n+". Text: "+t),s.set(t,n),o.add(n)}});try{for(var l=r.h(e.entries()),c=l.next();!c.done;c=l.next()){var d=r.f(c.value,2),m=d[0],h=d[1];-1===t.indexOf(m)&&i.add(h)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}return{removedIds:i,newTexts:s,idsToAdd:o}}var m=1;var h=new Set("alla allt att av blev bli blir blivit de dem den denna deras dess dessa det detta dig din dina ditt du där då efter ej eller en er era ert ett från för ha hade han hans har henne hennes hon honom hur här i icke ingen inom inte jag ju kan kunde man med mellan men mig min mina mitt mot mycket ni nu när någon något några och om oss på samma sedan sig sin sina sitta själv skulle som så sådan sådana sådant till under upp ut utan vad var vara varför varit varje vars vart vem vi vid vilka vilkas vilken vilket vår våra vårt än är åt över kring".split(" "));function p(e){return new Set(function(e){var t=document.createElement("div");return t.innerHTML=e,""+t.innerText}(e).replace(/[^\w\såäö]/gi,"").toLowerCase().split(/\s/).map(function(e){return e.trim()}).filter(function(e){return!!e}).filter(function(e){return!h.has(e)}))}function f(e,t,n,a,i){var s=new Map;e=e.map(function(e){return r.a({},e,{name:e.name.trim()})}).filter(function(e){return!!e.name});var o=new Map;t.forEach(function(e){return o.set(e.html,e)});var l=new Map;e.forEach(function(e){return l.set(e.name,e)}),e=e.filter(function(e){return!o.has(e.name)}),t=t.filter(function(e){return!l.has(e.html)}),e.forEach(function(e){return s.set(e.id,{gradeStep:e.gradeStep,oldText:e.name,lexemes:p(e.name),matchLevel:0})});for(var c=[];t.length>0;){var u=t[0],d=f(u);if(d){d.newText&&t.push({html:d.newText,gradeStep:d.gradeStep});var h=s.get(d.id);h.newText=u.html,h.matchLevel=d.myMatchLevel,h.newId=n.get(u.html)}else c.push(u);t.shift()}return c.forEach(function(e){s.set("fictiveOldId"+ ++m,{newId:n.get(e.html),newText:e.html,gradeStep:e.gradeStep,matchLevel:0,lexemes:new Set})}),s.forEach(function(e){var t=e.oldText,n=e.newText;t&&n&&r.g(p(t)).join(" ")===r.g(p(n)).join(" ")&&(e.isTypoFix=!0)}),console.log("IdsToMigrate",r.g(s.values()).map(function(e){var t=e.oldText,n=e.lexemes;return r.g(n).join(" ")+": "+t})),s;function f(e){var t=p(e.html);return r.g(s.entries()).filter(function(t){var n=r.f(t,2);n[0];return n[1].gradeStep===e.gradeStep}).map(function(e){var n=r.f(e,2),a=n[0],i=n[1],s=i.gradeStep,o=i.matchLevel,l=i.newText,c=i.lexemes;return{id:a,gradeStep:s,matchLevel:o,newText:l,myMatchLevel:v(t,c)}}).filter(function(e){return e.myMatchLevel>=50&&(!e.matchLevel||e.matchLevel<e.myMatchLevel)}).sort(function(e,t){return t.myMatchLevel-e.myMatchLevel})[0]}function v(e,t){if(0===e.size||0===t.size)return 0;var n=0,r=0;return e.forEach(function(e){t.has(e)&&++n}),t.forEach(function(t){e.has(t)&&++r}),Math.round(100*Math.max(n/e.size,r/t.size))}}function v(e,t,n,a){return r.b(this,void 0,void 0,function(){function o(e,t,r){var i=!Q.has(e.name);Q.add(e.name),F.forEach(function(t,n){var r=t.newId,i=t.oldText;a.push({mutations:function(t){i&&t.unlink2("courses",e.id,"abilities",n),r&&t.link2("courses",e.id,"abilities",r)}})}),e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)});var s=r.ccsToMigrate,o=r.krsToMigrate;s.forEach(function(t,n){var r=t.newId,s=t.newText,o=t.oldText,l=t.isTypoFix;a.push({change:i&&(o?s?l?"Tryckfelsrättning Centralt Innehåll":"Uppdaterat Centralt Innehåll":"Borttaget Centralt Innehåll":"Nytt Centralt Innehåll"),content:"<h4>"+e.name+"</h4><strike>"+(o||"")+"</strike><br/>"+(s||""),mutations:function(t){if(r&&B.has(r)&&!H.has(r)){var a={id:r,name:s,acl:["role:USER:R"],dateTime:Date.now()};t.add("central-content",a),H.add(r)}o&&t.unlink2("courses",e.id,"centralContent",n),r&&t.link2("courses",e.id,"centralContent",r)}})}),e.centralContentOrder=t.centralContent.map(function(e){var t=e.html;return _.get(t)}),o.forEach(function(t,n){var r=t.newId,s=t.newText,o=t.gradeStep,l=t.oldText,c=t.isTypoFix;a.push({change:i&&(l?s?c?"Tryckfelsrättning Kunskapskrav":"Uppdaterat Kunskapskrav":"Borttaget Kunskapskrav":"Nytt Kunskapskrav"),content:"<h4>"+e.name+"</h4><strike>"+(l||"")+"</strike><br/>"+(s||""),mutations:function(t){if(r&&K.has(r)&&!H.has(r)){var a={id:r,name:s,gradeStep:o,acl:["role:USER:R"],dateTime:Date.now()};console.log("Adding Knowledge-Requirement "+r+": "+s),t.add("knowledge-requirements",a),H.add(r)}l&&t.unlink2("courses",e.id,"knowledgeRequirements",n),r&&t.link2("courses",e.id,"knowledgeRequirements",r)}})}),e.knowledgeRequirementsOrder=t.knowledgeRequirements.map(function(e){return z.get(e.html)}),(F.size>0||s.size>0||o.size>0)&&a.push({change:e.isTemplate?"Uppdaterad Kursmall":"Uppdaterad Kursinstans",content:e.isTemplate?""+e.name:e.name+". Skola: "+(e.school||"ej angiven")+". Beskrivning: "+(e.description||""),mutations:function(t){return t.put("courses",e)}})}function l(){return r.b(this,void 0,void 0,function(){function e(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return 0===e.length?[2,[]]:(new Map,console.log("Number of ids: "+e.length),[4,s.a.kedBackendClient.list("tasks",r.a({},t,{hasEdgesTo:e}))]);case 1:return[2,n.sent()]}})})}var t,n,o,l,c,u,d,m,h;return r.d(this,function(s){switch(s.label){case 0:return o=r.g(F.keys(),Object(i.k)($.map(function(e){return r.g(e.ccsToMigrate.keys(),e.krsToMigrate.keys())}))).filter(function(e){return!e.startsWith("fictiveOldId")}),l=Date.now(),[4,e(o,{include:["abilities","knowledgeRequirements","centralContent"],flags:["includeIdsOnly"]})];case 1:c=s.sent(),u=function(e){var t,n,i,s,o,c,u,d,m=e.migratedTexts||{abilities:{},centralContent:{},knowledgeRequirements:{}};e.migratedTexts={abilities:{},centralContent:{},knowledgeRequirements:{}};var h=[],p=[],f=function(t){var n=F.get(t);if(n){var r=n.newId,a=n.newText,i=n.isTypoFix,s=n.oldText,o=t;m.abilities[t]&&(s=m.abilities[t].oldText,o=m.abilities[t].oldId),r&&s!==a&&(i||(e.migratedTexts.abilities[r]={oldId:o,oldText:s,importDate:l})),h.push(function(n){n.unlink2("tasks",e.id,"abilities",t),r&&n.link2("tasks",e.id,"abilities",r)}),p.push("<strike>"+s+"</strike>"),r&&p.push(a)}};try{for(var v=r.h(e.abilities),g=v.next();!g.done;g=v.next()){f(g.value.id)}}catch(e){t={error:e}}finally{try{g&&!g.done&&(n=v.return)&&n.call(v)}finally{if(t)throw t.error}}var b=new Set(e.tags?e.tags.filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)}):[]),y=new Set;try{for(var k=r.h($),E=k.next();!E.done;E=k.next()){var w=E.value,C=w.krsToMigrate,S=w.ccsToMigrate,O=w.courseCode;if(0===b.size||b.has(O)){var T=function(t){var n=S.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,s=n.isTypoFix,o=t;m.centralContent[t]&&(i=m.centralContent[t].oldText,o=m.centralContent[t].oldId),r&&i!==a&&(s||(e.migratedTexts.centralContent[r]={oldId:o,oldText:i,importDate:l})),r&&y.has(r)||(h.push(function(n){n.unlink2("tasks",e.id,"centralContent",t),r&&n.link2("tasks",e.id,"centralContent",r)}),p.push("<strike>"+i+"</strike>"),r&&(p.push(a),y.add(r)))}};try{for(var x=r.h(e.centralContent),I=x.next();!I.done;I=x.next()){T(I.value.id)}}catch(e){o={error:e}}finally{try{I&&!I.done&&(c=x.return)&&c.call(x)}finally{if(o)throw o.error}}var N=function(t){var n=C.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,s=n.isTypoFix,o=t;m.knowledgeRequirements[t]&&(i=m.knowledgeRequirements[t].oldText,o=m.knowledgeRequirements[t].oldId),r&&i!==a&&(s||(e.migratedTexts.knowledgeRequirements[r]={oldId:o,oldText:i,importDate:l})),r&&y.has(r)||(h.push(function(n){n.unlink2("tasks",e.id,"knowledgeRequirements",t),r&&n.link2("tasks",e.id,"knowledgeRequirements",r)}),p.push("<strike>"+i+"</strike>"),r&&(p.push(a),y.add(r)))}};try{for(var j=r.h(e.knowledgeRequirements),R=j.next();!R.done;R=j.next()){N(R.value.id)}}catch(e){u={error:e}}finally{try{R&&!R.done&&(d=j.return)&&d.call(j)}finally{if(u)throw u.error}}}}}catch(e){i={error:e}}finally{try{E&&!E.done&&(s=k.return)&&s.call(k)}finally{if(i)throw i.error}}a.push({change:"Migrerad Uppgift",content:"<h4>"+e.name+" "+(e.school?"("+e.school+") ":"(skola ej angiven)")+"</h4>\n          <p>Kurskod: "+r.g(b).join(",")+"</p>\n          "+p.map(function(e){return"<p>"+e+"</p>"}).join(""),mutations:function(t){t.put("tasks",e),h.forEach(function(e){return e(t)})}})};try{for(d=r.h(c),m=d.next();!m.done;m=d.next())h=m.value,u(h)}catch(e){t={error:e}}finally{try{m&&!m.done&&(n=d.return)&&n.call(d)}finally{if(t)throw t.error}}return[2]}})})}var c,u,m,h,p,v,g,b,y,k,E,w,C,S,O,T,x,I,N,j,R,D,U,M,A,P,L,_,B,q,z,K,F,$,H,Q,Y,V,G,W,J,X;return r.d(this,function(s){switch(s.label){case 0:E=new Map,w=e.abilitiesOrder?e.abilitiesOrder.map(function(t){return e.abilities.find(function(e){return e.id===t})}):e.abilities;try{for(C=r.h(w),S=C.next();!S.done;S=C.next())O=S.value,E.set(O.name.trim(),O.id)}catch(e){c={error:e}}finally{try{S&&!S.done&&(u=C.return)&&u.call(C)}finally{if(c)throw c.error}}try{for(T=r.h(t),x=T.next();!x.done;x=T.next()){J=x.value.template;try{for(I=r.h(J.centralContent),N=I.next();!N.done;N=I.next())j=N.value,E.set(j.name.trim(),j.id)}catch(e){p={error:e}}finally{try{N&&!N.done&&(v=I.return)&&v.call(I)}finally{if(p)throw p.error}}try{for(R=r.h(J.knowledgeRequirements),D=R.next();!D.done;D=R.next())U=D.value,E.set(U.name.trim(),U.id)}catch(e){g={error:e}}finally{try{D&&!D.done&&(b=R.return)&&b.call(R)}finally{if(g)throw g.error}}}}catch(e){m={error:e}}finally{try{x&&!x.done&&(h=T.return)&&h.call(T)}finally{if(m)throw m.error}}M=d(E,n.abilities),A=M.newTexts,P=M.idsToAdd,L=d(E,Object(i.k)(n.courses.map(function(e){return e.centralContent.map(function(e){return e.html})}))),_=L.newTexts,B=L.idsToAdd,q=d(E,Object(i.k)(n.courses.map(function(e){return e.knowledgeRequirements.map(function(e){return e.html})}))),z=q.newTexts,K=q.idsToAdd,console.log("Abilities to add: "+P.size),console.log("CCs to add: "+B.size),console.log("KRs to add: "+K.size),F=f(w,n.abilities.map(function(e){return{html:e}}),A),$=t.map(function(e,t){var r=e.template;console.log("Course: "+r.name);var a=n.courses.find(function(e){return e.name===r.name})||n.courses.find(function(e){return e.code===r.code});return{courseCode:r.code,ccsToMigrate:a?f(r.centralContent,a.centralContent.map(function(e){return{html:e.html}}),_,0,r.name):new Map,krsToMigrate:a?f(r.knowledgeRequirements,a.knowledgeRequirements,z,0,r.name):new Map}}),F.forEach(function(t,n){var r=t.newText,i=t.newId,s=t.oldText,o=t.isTypoFix;a.push({change:s?r?o?"Tryckfelsrättning Förmåga":"Uppdaterad Förmåga":"Borttagen Förmåga":"Ny Förmåga",content:"<strike>"+(s||"")+"</strike><br/>"+(r||""),mutations:function(t){if(i&&P.has(i)){var a={id:i,name:r,acl:["role:USER:R"],dateTime:Date.now()};t.add("abilities",a)}s&&t.unlink2("subjects",e.id,"abilities",n),i&&t.link2("subjects",e.id,"abilities",i)}})}),(!e.abilitiesOrder||F.size>0)&&(e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)}),a.push({mutations:function(t){return t.put("subjects",e)},change:e.abilitiesOrder?null:"Inför en ordnad lista på förmågor i databasen"})),H=new Set,a.push({mutations:function(){return H.clear()}}),Q=new Set,a.push({mutations:function(){return Q.clear()}}),Y=function(e,t){var a,i,s=n.courses.find(function(t){return t.name===e.name})||n.courses.find(function(t){return t.code===e.code}),l=$.find(function(t){return t.courseCode===e.code}),c=l.ccsToMigrate,u=l.krsToMigrate;try{for(var d=r.h(t),m=d.next();!m.done;m=d.next()){o(m.value,s,{ccsToMigrate:c,krsToMigrate:u})}}catch(e){a={error:e}}finally{try{m&&!m.done&&(i=d.return)&&i.call(d)}finally{if(a)throw a.error}}};try{for(V=r.h(t),G=V.next();!G.done;G=V.next())W=G.value,J=W.template,X=W.instances,Y(J,X)}catch(e){y={error:e}}finally{try{G&&!G.done&&(k=V.return)&&k.call(V)}finally{if(y)throw y.error}}return[4,l()];case 1:return s.sent(),[2]}})})}var g=n(17);function b(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,o=this;return r.d(this,function(l){switch(l.label){case 0:return[4,s.a.kedBackendClient.get("subjects",e.id,{include:["courseTemplates","abilities"]})];case 1:return e=l.sent(),[4,Promise.all(e.courseTemplates.map(function(e){return Object(g.e)(e.id,{include:["centralContent","knowledgeRequirements"]})}))];case 2:return a=l.sent(),console.log("Subject: "+e.name+". Courses: "+a.map(function(e){return e.name})),[4,Promise.all(a.map(function(e){return r.b(o,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t={template:e},[4,s.a.kedBackendClient.list("courses",{name:e.name,include:["abilities"],flags:["includeIdsOnly"]})];case 1:return[2,(t.instances=n.sent(),t)]}})})}))];case 3:return i=l.sent(),[4,v(e,i,t,n)];case 4:return l.sent(),[2]}})})}var y,k,E,w=function(e){function t(t){var n=e.call(this,t)||this;return n.coursesElems={},n.centralContentElems=[],n.knowledgeRequirementElems=[],n.state={showFullText:!1,changes:[],isWorking:!0,isImporting:!1},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:this.addClassesForCherryPickedElements(),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,this.diffWithExisting()];case 2:return e=r.sent(),t=e.changes,n=e.subjectToImport,this.setState({changes:t,subjectToImport:n}),[3,5];case 3:return a=r.sent(),this.setState({error:""+a}),[3,5];case 4:return this.setState({isWorking:!1}),[7];case 5:return[2]}})})},t.prototype.addClassesForCherryPickedElements=function(){var e=l()(this.purposeElem).find("li").first().parent().children("li");e.addClass("ability");var t=l()(this.centralContentElems).find("li");t.addClass("central-content");var n=l()(this.knowledgeRequirementElems).find("p");n.addClass("knowledge-requirement"),l()([e,t,n]).addClass("marked-area")},t.prototype.cherryPickData=function(){var e=this,t=this.props.subject,n=Array.from(l()(this.purposeElem).find("li").first().parent().children("li")).map(function(e,t){return(t+1+". "+l()(e).html()).trim()}).filter(function(e){return!!e});return{name:t.name,code:t.code,schoolType:t.schoolType,abilities:n,courses:Object.keys(this.coursesElems).map(function(t){return e.coursesElems[t]}).map(function(e){var t=e.course,n=e.elem;return{name:t.name,year:t.year,code:t.code,points:t.points,centralContent:Array.from(l()(n).find(".central-content")).map(function(e){return{html:l()(e).html().trim(),group:l()(e).parent("ul").prev("h4").text().trim()}}).filter(function(e){return!!e.html}),knowledgeRequirements:Array.from(l()(n).find(".grade-step-none .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:null,html:e}}).concat(Array.from(l()(n).find(".grade-step-E .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"E",html:e}}).concat(Array.from(l()(n).find(".grade-step-C .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"C",html:e}})).concat(Array.from(l()(n).find(".grade-step-A .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"A",html:e}})))}})}},t.prototype.diffWithExisting=function(){return r.b(this,void 0,void 0,function(){function e(){var e=p;return p+=2,e}var t,n,a,i,o,l,c,d,m,h,p,f,v,g,y,k,E,w,C,S,O,T=this;return r.d(this,function(x){switch(x.label){case 0:return o=this.cherryPickData(),l=[],[4,s.a.kedBackendClient.list("subjects")];case 1:return c=x.sent(),d=c.filter(function(e){return e.code===T.props.subject.code})[0],m=[],h=[],p=Date.now(),d?[4,b(d,o,l)]:[3,3];case 2:return x.sent(),[3,4];case 3:f=d={id:Object(u.h)(),schoolType:o.schoolType,tags:["schoolType:"+o.schoolType],acl:["role:USER:R"],code:o.code,name:o.name,abilitiesOrder:[],publishable:!1,dateTime:e()},l.push({change:"Nytt ämne",content:o.name+" ("+o.code+")",mutations:function(e){return e.add("subjects",f)}}),v=[],g=function(t){var n={id:Object(u.h)(),name:t,acl:["role:USER:R"],dateTime:e()};v.push(n),l.push({change:"Ny förmåga",content:t,mutations:function(e){e.add("abilities",n),e.link("subjects",f.id,"abilities",n.id,"abilities")}})};try{for(y=r.h(o.abilities),k=y.next();!k.done;k=y.next())E=k.value,g(E)}catch(e){t={error:e}}finally{try{k&&!k.done&&(n=y.return)&&n.call(y)}finally{if(t)throw t.error}}f.abilitiesOrder=v.map(function(e){return e.id}),w=function(t){var n,a,i,o,c,d,p={id:Object(u.h)(),subjectCode:f.code,schoolType:f.schoolType,tags:["sub:"+f.code,"course:"+t.code,"schoolType:"+f.schoolType],dateTime:e(),isTemplate:!0,acl:["role:EMPLOYEE:R"],name:t.name,code:t.code,points:t.points,modules:[],subjectId:f.id,resources:[],createdBy:{name:s.a.currentUser.displayName,url:"mailto:"+s.a.currentUser.mail},createdDate:Date.now(),knowledgeRequirementsOrder:[],centralContentOrder:[],abilitiesOrder:v.map(function(e){return e.id})};t.year&&(p.schoolGrade=t.year),l.push({change:"Ny kurs",content:t.name,mutations:function(e){e.add("courses",p),e.link("subjects",f.id,"courses",p.id,"courseTemplates")}});var g=function(t,n){var r=m.filter(function(e){return e.name===n})[0];r?l.push({mutations:function(e){e.link("courses",p.id,"central-content",r.id,"centralContent")}}):(r={id:Object(u.h)(),dateTime:e(),name:n,acl:["role:USER:R"]},t&&(r.group=t),m.push(r),l.push({change:"Nytt centralt innehåll",content:"<h4>"+t+"</h4>"+n,mutations:function(e){e.add("central-content",r),e.link("courses",p.id,"central-content",r.id,"centralContent")}})),p.centralContentOrder.push(r.id)};try{for(var b=r.h(t.centralContent),y=b.next();!y.done;y=b.next()){var k=y.value;g(k.group,k.html)}}catch(e){n={error:e}}finally{try{y&&!y.done&&(a=b.return)&&a.call(b)}finally{if(n)throw n.error}}var E=function(t){var n=h.filter(function(e){return e.name===t.html&&e.gradeStep===t.gradeStep})[0];n?l.push({mutations:function(e){e.link("courses",p.id,"knowledge-requirements",n.id,"knowledgeRequirements")}}):(n={id:Object(u.h)(),dateTime:e(),name:t.html,gradeStep:t.gradeStep,acl:["role:USER:R"]},h.push(n),l.push({change:"Nytt kunskapskrav för betyget "+t.gradeStep,content:t.html,mutations:function(e){e.add("knowledge-requirements",n),e.link("courses",p.id,"knowledge-requirements",n.id,"knowledgeRequirements")}})),p.knowledgeRequirementsOrder.push(n.id)};try{for(var w=r.h(t.knowledgeRequirements),C=w.next();!C.done;C=w.next()){E(C.value)}}catch(e){i={error:e}}finally{try{C&&!C.done&&(o=w.return)&&o.call(w)}finally{if(i)throw i.error}}var S=function(e){l.push({mutations:function(t){t.link("courses",p.id,"abilities",e.id,"abilities")}})};try{for(var O=r.h(v),T=O.next();!T.done;T=O.next()){S(T.value)}}catch(e){c={error:e}}finally{try{T&&!T.done&&(d=O.return)&&d.call(O)}finally{if(c)throw c.error}}};try{for(C=r.h(o.courses),S=C.next();!S.done;S=C.next())O=S.value,w(O)}catch(e){a={error:e}}finally{try{S&&!S.done&&(i=C.return)&&i.call(C)}finally{if(a)throw a.error}}x.label=4;case 4:return[2,{changes:l,subjectToImport:o}]}})})},t.prototype.cancel=function(){this.props.onCancel()},t.prototype.import=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:this.setState({isWorking:!0,isImporting:!0}),e=this.state.changes.map(function(e){return e.mutations}),t.label=1;case 1:return t.trys.push([1,,3,4]),[4,s.a.kedBackendClient.do(function(t){e.forEach(function(e){return e(t)})})];case 2:return t.sent(),[3,4];case 3:return this.setState({isWorking:!1,isImporting:!1}),[7];case 4:return this.props.onImportSuccess(this.props.subject.name),[2]}})})},t.prototype.fixL=function(e){return e},t.prototype.render=function(){var e=this,t=this.state.subjectToImport,n=this.props.subject;return a.createElement("div",null,a.createElement("h1",null,Object(i.a)(y||(y=r.e(["Uppladdat Ämne ",""],["Uppladdat Ämne ",""])),t?t.name:"")),this.state.error?a.createElement("p",null,"Fel: ",this.state.error):this.state.isWorking?a.createElement("p",null,"Arbetar..."):this.state.isImporting?a.createElement("p",null,"Importerar..."):this.state.changes.every(function(e){return!e.change})?a.createElement("div",null,a.createElement("p",null,"Kunde inte finna några förändringar från befintligt data. Klicka OK för att avbryta och återgå."),a.createElement("button",{onClick:function(){return e.cancel()}}," OK ")):a.createElement("div",null,a.createElement("table",{style:{border:"1px solid gray",padding:"2px"}},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{colSpan:2},"Granskning av ändringar i grund-data")),a.createElement("tr",null,a.createElement("th",null,"Ändring"),a.createElement("th",null,"Innehåll"))),a.createElement("tbody",null,this.state.changes.filter(function(e){return e.change}).map(function(e,t){return a.createElement("tr",{key:t},a.createElement("td",{style:{padding:"2px"}},e.change),a.createElement("td",{style:{padding:"2px"},dangerouslySetInnerHTML:{__html:e.content}}))}))),a.createElement("button",{onClick:function(){return e.cancel()},disabled:this.state.isImporting},"Avbryt"),a.createElement("button",{onClick:function(){return e.import()},disabled:this.state.isImporting},"Importera"),a.createElement("br",null)),a.createElement("button",{onClick:function(){return e.setState({showFullText:!e.state.showFullText})}},this.state.showFullText?Object(i.a)(k||(k=r.e(["Dölj nedan"],["Dölj nedan"]))):Object(i.a)(E||(E=r.e(["Visa hela texten från Skolverket"],["Visa hela texten från Skolverket"])))),a.createElement("table",{style:{display:this.state.showFullText?"":"none"}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Namn"),a.createElement("td",null,n.name)),a.createElement("tr",null,a.createElement("th",null,"Ämneskod"),a.createElement("td",null,n.code)),a.createElement("tr",null,a.createElement("th",null,"Syfte"),a.createElement("td",{ref:function(t){return e.purposeElem=t},dangerouslySetInnerHTML:{__html:this.fixL(n.purpose)}})),a.createElement("tr",null,a.createElement("th",null,"Kurser"),a.createElement("td",null,n.courses.map(function(t){return a.createElement("table",{key:t.code,ref:function(n){return e.coursesElems[t.code]={course:t,elem:n}}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Kursens namn"),a.createElement("td",null,t.name)),a.createElement("tr",null,a.createElement("th",null,"Kurskod"),a.createElement("td",null,t.code)),a.createElement("tr",null,a.createElement("th",null,"Poäng"),a.createElement("td",null,t.points)),a.createElement("tr",null,a.createElement("th",null,"Centralt innehåll"),a.createElement("td",{ref:function(t){return e.centralContentElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.centralContent)}})),t.knownledgeRequirements.some(function(e){return!e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav utan betygsättning"),a.createElement("td",{className:"grade-step-none",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return!e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"E"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg E"),a.createElement("td",{className:"grade-step-E",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"E"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"C"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg C"),a.createElement("td",{className:"grade-step-C",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"C"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"A"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg A"),a.createElement("td",{className:"grade-step-A",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"A"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0))}))))))},t}(a.Component),C=(n(86),n(12)),S=n(14);n.d(t,"a",function(){return j});var O,T,x,I,N,j=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,gymnasiumSubjects:[],primarySchoolSubjects:[],uploadedSubject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,s.a.kedBackendClient.list("subjects")];case 1:return(e=r.sent()).sort(Object(i.g)("name")),t=e.filter(function(e){return"primary"!==e.schoolType}),n=e.filter(function(e){return"primary"===e.schoolType}),this.setState({gymnasiumSubjects:t,primarySchoolSubjects:n,isListingSubjects:!1}),[2]}})})},t.prototype.handleFileSelect=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o,u,d,m,h,p,f,v,b,y,k,E,w;return r.d(this,function(C){switch(C.label){case 0:return e.stopPropagation(),e.preventDefault(),t=e.dataTransfer.files,[4,Object(g.f)(t[0])];case 1:if(n=C.sent(),a=l()(l.a.parseXML(n)),s=a.find("subject>originatorTypeOfSchooling").text().trim()||a.find("subject>typeOfSchooling").text().trim(),"gymnasium"===("COMPULSORY_SCHOOL"===s?"primary":"UPPER_SECONDARY_EDUCATION"===s?"gymnasium":null)){for(w={name:a.find("subject>name").text().trim(),code:a.find("subject>code").text().trim(),purpose:a.find("subject>purpose").text().trim(),courses:[],schoolType:"gymnasium"},o=a.find("subject>courses"),u=0;u<o.length;++u)d=l()(o[u]),m=[].slice.call(d.find("knowledgeRequirements")).map(function(e){return{gradeStep:l()(e).find("gradeStep").text().trim(),text:l()(e).find("text").text().trim()}}),w.courses.push({name:d.find("name").text().trim(),code:d.find("code").text().trim(),centralContent:d.find("centralContent").text().trim(),points:parseInt(d.find("point").text().trim()),knownledgeRequirements:m});this.setState({uploadedSubject:w})}else h=Object(i.k)(Array.from(a.find("subject>centralContent")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfCentralContent").text().trim())throw new Error(Object(i.a)(O||(O=r.e(["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim()}})})),p=Object(i.k)(Array.from(a.find("subject>knowledgeRequirement")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfRequirement").text().trim())throw new Error(Object(i.a)(T||(T=r.e(["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim(),gradeStep:l()(e).find("gradeStep").text().trim()}})})),f=Object(i.b)(h,function(e){return e.year}),v=Object(i.b)(p,function(e){return e.year}),b=a.find("subject>name").text().trim(),y=a.find("subject>code").text().trim(),k=a.find("subject>purpose").text().trim(),E=["1-3","4-6","7-9"].map(function(e){return{name:b+" "+e,code:y+"|"+e,points:0,year:e,centralContent:(f[e]||[]).map(function(e){return e.text}).join("\n"),knownledgeRequirements:(v[e]||[]).map(function(e){return{gradeStep:e.gradeStep,text:e.text}})}}),w={name:b,code:y,purpose:k,schoolType:"primary",courses:E},this.setState({uploadedSubject:w});return[2]}})})},t.prototype.onImportSuccess=function(e){Object(i.o)(Object(i.a)(x||(x=r.e(["Importen av "," lyckades"],["Importen av "," lyckades"])),e)),this.setState({uploadedSubject:null}),this.load()},t.prototype.render=function(){var e=this,t=this.props.linkPrefix;return a.createElement("div",null,this.state.uploadedSubject?a.createElement(w,{onCancel:function(){return e.setState({uploadedSubject:null})},onImportSuccess:function(t){return e.onImportSuccess(t)},subject:this.state.uploadedSubject}):this.state.isListingSubjects?a.createElement("div",null,a.createElement("p",null,a.createElement(S.a,null),"Var god vänta medan ämnen hämtas...")):a.createElement("div",null,a.createElement("h2",null,Object(i.a)(I||(I=r.e(["Gymnasieämnen"],["Gymnasieämnen"])))),a.createElement("ul",null,this.state.gymnasiumSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(C.b,{to:t+e.id},e.name))})),a.createElement("h2",null,Object(i.a)(N||(N=r.e(["Grundskoleämnen"],["Grundskoleämnen"])))),a.createElement("ul",null,this.state.primarySchoolSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(C.b,{to:t+e.id},e.name))})),a.createElement("div",{className:"drop-zone",onDragOver:g.a,onDrop:function(t){return e.handleFileSelect(t)}},"Droppa Subject-fil här från skolverket (Hämtas från ",a.createElement("a",{href:"http://opendata.skolverket.se",target:"skolverket"},"opendata.skolverket.se"),")")))},t}(a.Component)},,,function(e,t,n){var r={"./en-au":69,"./en-au.js":69,"./en-ca":70,"./en-ca.js":70,"./en-gb":71,"./en-gb.js":71,"./en-ie":72,"./en-ie.js":72,"./en-nz":73,"./en-nz.js":73,"./sv":74,"./sv.js":74};function a(e){var t=i(e);return n(t)}function i(e){var t=r[e];if(!(t+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=103},,function(e,t,n){"use strict";var r=n(3),a=n(60),i=n(16),s=Object(i.b)(location.search).user;if(s){var o=a.a.find(function(e){return e.username===s});o&&(r.a.currentUser=o)}var l=Object(i.b)(location.search),c=l.role,u=l.school;r.a.currentUser&&(c&&(r.a.currentUser.roles=c.split(",")),u&&(r.a.currentUser.school=u))},,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r,a,i,s=n(1),o=n(0),l=n(2),c=n(12),u=n(62),d=n(93),m=n(83),h=function(e){return o.createElement(m.a,{title:Object(l.a)(r||(r=s.e(["Lägg till skola"],["Lägg till skola"]))),type:e.type,feedbackUrl:e.feedbackUrl})},p=n(3),f=n(86),v=n(38),g=n(100),b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,primarySchoolSubjects:[],uploadedSubject:null},n}return s.c(t,e),t.prototype.render=function(){return o.createElement("div",null,o.createElement(v.a,{title:Object(l.a)(a||(a=s.e(["Ämnen"],["Ämnen"]))),activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),o.createElement(g.a,{linkPrefix:"/subjects/"}))},t}(o.Component),y=n(39),k=n(5),E=n(17),w=n(84),C=n.n(w),S=function(e){function t(t){var n=e.call(this,t)||this;return n.state=n.props.resource||{name:"",url:""},n}return s.c(t,e),t.prototype.save=function(){var e=this.state;if(!C.a.isUri(e.url))throw new Error(Object(l.a)(i||(i=s.e(["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"],["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"])),e.url));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.onSave,a=t.onDelete,i=this.state,s=C.a.isUri(this.state.url);return o.createElement("div",null,o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("h2",null,n),o.createElement("hr",null),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Namn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:!0,tabIndex:1,size:50,value:i.name,onChange:function(t){return e.setState({name:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Länk:"),o.createElement("div",{className:"horizontalItem top "},o.createElement("input",{type:"text",tabIndex:1,size:50,value:i.url,onChange:function(t){return e.setState({url:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("br",null)),o.createElement("div",{className:"sv-html-portlet sv-portlet"},(i.createdDate||i.modifiedDate)&&o.createElement("div",null,i.createdDate&&o.createElement("p",null,"Resursen/Länken skapades ",Object(E.c)(i.createdDate)," av ",o.createElement("strong",null,i.createdBy.name),"."),i.modifiedDate&&o.createElement("p",null,"Resursen/Länken redigerades senast ",Object(E.c)(i.modifiedDate)," av ",o.createElement("strong",null,i.modifiedBy.name),"."),o.createElement("br",null),o.createElement("br",null)),a&&o.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return a()}},"Ta bort resurs/länk"),o.createElement("a",{tabIndex:1,className:"btn btn-large"+(s?"":" btn-inactive"),onClick:s&&function(){return r(i)}},"Spara")))},t}(o.Component),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return s.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.resources;return o.createElement("div",null,o.createElement("div",{className:"taskContainer"},r.map(function(e,r){return o.createElement("div",{className:"align-horizontal",key:r},o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:S,props:{title:"Redigera resurs",resource:e,onSave:function(e){var a=Object(E.l)(e,p.a.currentUser);n({$splice:[[r,1,a]]}),t.closeDialog()},onDelete:function(){n({$splice:[[r,1]]}),t.closeDialog()}}})}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{href:e.url,target:"_blank"},e.name)))})),o.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:S,props:{title:"Lägg till resurs",onSave:function(e){var r=Object(E.l)(e,p.a.currentUser);n({$push:[r]}),t.closeDialog()}}})}},o.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Lägg till resurs"))},t}(o.Component),T=n(65),x=n(42),I=n.n(x),N=n(13),j=n(54),R=function(){function e(e){this.queryer=e,this.promise=null,this.result=null}return e.prototype.query=function(){var e=this;return this.promise?this.promise:this.promise=this.queryer().then(function(t){return e.result=t})},e.prototype.reset=function(){this.promise=null},e}(),D=n(89),U=n(14),M=n(64);function A(e){var t=e.searchMarkedIds,n=e.searchResult,r=e.task,a=e.editTask;e.writeAccess,e.taskCustomization;return o.createElement("div",{className:"task-search-result"+(a.state.task||a.state.previewTaskContent?"":" fixed")},0===t.length?o.createElement("h2",null,"Samtliga uppgifter för kursen"):o.createElement("h2",null,"Uppgifter som täcker valda filter"),o.createElement("table",null,o.createElement("tbody",null,n.filter(r?function(e){return e.id===r.id}:function(){return!0}).map(function(e){return o.createElement(o.Fragment,{key:e.id},o.createElement("tr",null,o.createElement("td",null,o.createElement("div",{tabIndex:1,className:"checkBox"+(r&&r.id===e.id?" checked":""),onClick:function(){return i(e)}})),o.createElement("td",null,e.content?o.createElement("a",{href:"#",onClick:function(t){i(e),t.preventDefault(),t.stopPropagation()}},e.name):o.createElement("a",{href:e.url,target:"_blank"},e.name)),o.createElement("td",null,Object(E.h)(e.modifiedBy.name)),o.createElement("td",null,e.school||"Standard"),o.createElement("td",null,Object(E.g)(e.modifiedDate))))}))),o.createElement("br",null),o.createElement("hr",null));function i(e){r&&r.id===e.id?a.updateSearchMarkedIds(t):(Object(y.findDOMNode)(a).parentElement.scrollTop=0,a.setStatePromised({task:e,previewTaskContent:null}))}}var P=n(76),L=n(6),_=n.n(L),B=n(98);function q(e){var t=e.task,n=e.course,r=e.writeAccess,a=(e.features,e.editTask);return o.createElement("div",null,o.createElement("h2",null,"Uppgiftens namn och länk"),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"Uppgiftens namn:")),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{autoFocus:!0,type:"text",size:35,value:t.name,disabled:!r,readOnly:!r,onChange:function(e){var n=s.a({},t);n.name=e.target.value,a.setStatePromised({task:n})}}))),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"URL:")),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",size:35,value:t.url,disabled:!r,readOnly:!r,onChange:function(e){var n=s.a({},t);n.url=e.target.value,a.setStatePromised({task:n})}}))),t.migratedTexts&&r&&o.createElement(B.a,{task:t,course:n,updateLink:function(e,t){return a.updateLink(e,t)}}),o.createElement(o.Fragment,null,o.createElement("h2",null,"Inlämningsuppgift"),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{className:"checkBox"+(a.getTaskProp("assignment")?" checked":""),onClick:function(){a.updateTaskOrCustomization("assignment",{$set:!a.getTaskProp("assignment")})}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"Den här uppgiften är en inlämningsuppgift"))),a.getTaskProp("assignment")&&o.createElement(o.Fragment,null,o.createElement("p",null,"Inlämningsdatum"),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},o.createElement(P.a,{selected:a.getTaskProp("deadline")&&_()(a.getTaskProp("deadline")),dateFormat:"YYYY-MM-DD",locale:"sv",popperPlacement:"bottom-start",onChange:function(e){a.updateTaskOrCustomization("deadline",{$set:e.format("YYYY-MM-DD")})}})),o.createElement("div",{className:"horizontalItem top"},a.getTaskProp("deadline")&&o.createElement("a",{className:"deleteDate",href:"#",title:"Ta bort inlämningsdatum",onClick:function(e){e.preventDefault(),a.updateTaskOrCustomization("deadline",{$set:null})}}))))))}function z(e){var t=e.task;return o.createElement(o.Fragment,null,o.createElement("h3",null,"Uppgiftens status"),t.createdBy&&t.createdDate&&o.createElement("p",null,"Uppgiften skapades ",Object(E.c)(t.createdDate)," av ",o.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&o.createElement("p",null,"Uppgiften redigerades senast ",Object(E.c)(t.modifiedDate)," av ",o.createElement("strong",null,t.modifiedBy.name),"."))}function K(e){var t=e.writeAccess,n=e.editTask;return o.createElement(o.Fragment,null,!!n.props.onDelete&&o.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onDelete()}},"Ta bort från kursmodul"),o.createElement("div",{className:"pull-right"}," "),o.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onCancel()}},"Avbryt"),o.createElement("div",{className:"btn btn-large",onClick:function(){return n.save().catch(l.n)}},"Spara"),!t&&o.createElement("div",{className:"btn btn-large",onClick:function(){return n.copyTask().catch(l.n)}},"Skapa kopia av den här uppgiften"))}var F=n(48),$=n(46);function H(e){var t=e.writeAccess,n=e.task,r=e.editTask;return o.createElement(o.Fragment,null,o.createElement("h3",null,"Uppgiftens innehåll"),t&&o.createElement("p",null,"Om uppgiften inte länkar till något dokument kan du lägga innehåll här."),o.createElement(F.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],defaultActions:$.a,readOnly:!t,html:n.content,onChange:function(e){var t=s.a({},n);t.content=e,r.setState({task:t})}}))}function Q(e){var t=e.writeAccess,n=e.task,r=e.taskCustomization,a=e.editTask;return o.createElement(o.Fragment,null,o.createElement(o.Fragment,null,o.createElement("h3",null,"Uppgiftens lärandemål"),o.createElement("div",null,o.createElement("textarea",{className:"inputTextBox learning-goal-box",disabled:!t,value:n.learningGoal,onChange:function(e){var t=s.a({},n);t.learningGoal=e.target.value,a.setStatePromised({task:t})}}))),o.createElement("br",null),o.createElement(o.Fragment,null,(t||!!n.content)&&o.createElement(H,{writeAccess:t,task:n,editTask:a})),o.createElement(o.Fragment,null,r&&r.resources?o.createElement("h3",null,"Resurser för uppgiften (modifierad för denna kursinstans)"):o.createElement("h3",null,"Resurser kopplade till uppgiften"),o.createElement(O,{resources:r&&r.resources||n.resources,host:a.props.host,onUpdate:function(e){a.updateTaskOrCustomization("resources",e)}})))}var Y,V,G,W,J,X,Z,ee,te,ne,re,ae,ie,se,oe,le,ce,ue,de,me,he,pe,fe,ve,ge=function(e){function t(t){var n=e.call(this,t)||this;n.features=new M.a;var r=!t.task||Object(N.c)(p.a.currentUser,t.task);return n.state={title:t.task?r?Object(l.a)(Y||(Y=s.e(['Redigera uppgift till "','"'],['Redigera uppgift till "','"'])),t.module.name):Object(l.a)(V||(V=s.e(['Visa uppgift till "','"'],['Visa uppgift till "','"'])),t.module.name):t.searchMode?Object(l.a)(G||(G=s.e(['Sök ny uppgift till "','"'],['Sök ny uppgift till "','"'])),t.module.name):Object(l.a)(W||(W=s.e(['Lägg till egen uppgift till "','"'],['Lägg till egen uppgift till "','"'])),t.module.name),futureAbilitiesOpen:!1,taskCustomization:t.taskCustomization||{},task:t.task?s.a({$meta:t.task.$meta||"update"},t.task):t.searchMode?null:{id:Object(k.h)(),$meta:"add",tags:["sub:"+t.course.subjectCode,"course:"+t.course.code],school:!t.course.isTemplate&&p.a.currentUser.school,resources:[],abilities:[],centralContent:[],futureAbilities:[],knowledgeRequirements:[],name:"",url:"",acl:t.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+p.a.currentUser.school+"/EMPLOYEE:S"]},searchMarkedIds:t.searchMode&&[],searchResult:t.searchMode&&[],isSearching:t.searchMode},t.searchMode&&(n.searchResponse=new R(function(){return p.a.kedBackendClient.list("tasks",{tags:"course:"+t.course.code,include:["knowledgeRequirements","abilities","centralContent"],flags:["includeIdsOnly"]})})),n}return s.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentDidMount=function(){return s.b(this,void 0,void 0,function(){var e;return s.d(this,function(t){switch(t.label){case 0:if(!this.props.searchMode)return[3,8];this.setStatePromised({isSearching:!0}),t.label=1;case 1:return t.trys.push([1,5,6,8]),[4,this.searchResponse.query()];case 2:return t.sent(),this.state.searchMarkedIds&&0===this.state.searchMarkedIds.length?[4,this.updateSearchResult(this.state.searchMarkedIds)]:[3,4];case 3:t.sent(),t.label=4;case 4:return[3,8];case 5:return e=t.sent(),Object(l.n)(e),[3,8];case 6:return[4,this.setStatePromised({isSearching:!1})];case 7:return t.sent(),[7];case 8:return[2]}})})},t.prototype.updateSearchMarkedIds=function(e){return s.b(this,void 0,void 0,function(){var t;return s.d(this,function(n){switch(n.label){case 0:return t=this.setStatePromised({task:null,searchMarkedIds:e,previewTaskContent:null}),this.searchResponse.result?[3,3]:[4,this.searchResponse.promise];case 1:return n.sent(),[4,t];case 2:n.sent(),e=this.state.searchMarkedIds,n.label=3;case 3:return[4,this.updateSearchResult(e)];case 4:return n.sent(),[2]}})})},t.prototype.updateSearchResult=function(e){return s.b(this,void 0,void 0,function(){var t,n;return s.d(this,function(r){switch(r.label){case 0:return[4,this.searchResponse.query()];case 1:return t=r.sent(),n=t.filter(function(t){return e.every(function(e){return t.knowledgeRequirements.some(function(t){return t.id===e})||t.abilities.some(function(t){return t.id===e})||t.centralContent.some(function(t){return t.id===e})})}),this.setStatePromised({searchResult:n}),[2]}})})},t.prototype.onMarkChanged=function(e,t){if(this.props.searchMode){var n=this.state.searchMarkedIds;this.updateSearchMarkedIds(t?n.concat(e):n.filter(function(t){return t!==e})).catch(l.n)}else this.updateLink(e,t)},t.prototype.updateLink=function(e,t){var n=this.props.course,r=this.state.task,a=n.abilities.find(function(t){return t.id===e}),i=n.knowledgeRequirements.find(function(t){return t.id===e}),o=n.centralContent.find(function(t){return t.id===e}),l=s.f(a?["abilities",a]:i?["knowledgeRequirements",i]:o?["centralContent",o]:[null,null],2),c=l[0],u=l[1];if(c){var d=r[c].slice(),m=d.findIndex(function(t){return t.id===e});t?m<0&&d.push(u):m>=0&&d.splice(m,1);var h=s.a({},r);h[c]=d,r&&r.migratedTexts&&(h.migratedTexts=s.a({},r.migratedTexts),r.migratedTexts[c]&&(h.migratedTexts[c]=s.a({},r.migratedTexts[c]),delete h.migratedTexts[c][e])),this.setStatePromised({task:h})}else console.error("Could not find marked id "+e)},t.prototype.save=function(){return s.b(this,void 0,void 0,function(){var e,t,n;return s.d(this,function(r){switch(r.label){case 0:if(e=this.state,t=e.task,n=e.taskCustomization,!Object(N.c)(p.a.currentUser,t))return[3,5];if(!t.url&&!t.content)throw new Error(Object(l.a)(J||(J=s.e(["Uppgiften måste antingen ha en URL eller ett innehåll"],["Uppgiften måste antingen ha en URL eller ett innehåll"]))));if(t.url&&!C.a.isUri(t.url))throw new Error(Object(l.a)(X||(X=s.e(["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"])),t.url));return this.props.task&&this.props.task.id!==t.id?[4,this.props.onReplace(this.props.task.id,t)]:[3,2];case 1:return r.sent(),[3,4];case 2:return[4,this.props.onSave(t,null)];case 3:r.sent(),r.label=4;case 4:return[3,9];case 5:return this.props.searchMode?[4,this.props.onSave(t,n)]:[3,7];case 6:return r.sent(),[3,9];case 7:if(this.props.course.isTemplate&&"add"===t.$meta)throw new Error(Object(l.a)(Z||(Z=s.e(["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"],["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"]))));return[4,this.props.onSaveCustomization(n)];case 8:r.sent(),r.label=9;case 9:return[2]}})})},t.prototype.copyTask=function(){return s.b(this,void 0,void 0,function(){var e;return s.d(this,function(t){switch(t.label){case 0:return(e=s.a({},this.state.task,this.state.taskCustomization||{},{id:Object(k.h)(),acl:this.props.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+p.a.currentUser.school+"/EMPLOYEE:S"],school:this.props.course.school})).$meta="add",[4,this.setStatePromised({task:e,title:Object(l.a)(ee||(ee=s.e(['Redigera kopierad uppgift till "','"'],['Redigera kopierad uppgift till "','"'])),this.props.module.name),taskCustomization:void 0})];case 1:return t.sent(),[2]}})})},t.prototype.getTaskProp=function(e){var t=this.state,n=t.task,r=t.taskCustomization,a=r&&r[e];return void 0!==a?a:n[e]},t.prototype.updateTaskOrCustomization=function(e,t){var n=this.state,r=n.task,a=n.taskCustomization;if(!(r&&Object(N.c)(p.a.currentUser,r))||a&&void 0!==a[e]){var i=s.a({},a);i[e]=I()(i[e]||r[e],t),this.setStatePromised({taskCustomization:i})}else{var o=s.a({},r);o[e]=I()(r[e],t),this.setStatePromised({task:o})}},t.prototype.render=function(){var e=this,t=this.props,n=t.course,r=(t.module,t.onCancel,t.onDelete,t.idsNotCoveredByAnyTask),a=t.searchMode,i=this.state,l=i.task,c=i.taskCustomization,u=i.title,d=i.searchResult,m=i.searchMarkedIds,h=i.isSearching,f=a?m:l.centralContent.map(function(e){return e.id}).concat(l.abilities.map(function(e){return e.id})).concat(l.knowledgeRequirements.map(function(e){return e.id})),v=l&&Object(N.c)(p.a.currentUser,l),g=(l&&C.a.isUri(l.url),this.features);return o.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},o.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},o.createElement("div",{className:"sv-text-portlet-content"},o.createElement("h1",{className:"h1"},u))),o.createElement("div",{className:"sv-fluid-grid sv-grid-ksgs12 sv-layout"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-6"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("div",{className:"ked_boxed"},o.createElement("h3",null,a?"Filtrera på kunskapskrav":v?"Välj kunskapskrav":"Kunskapskrav"),a?o.createElement("p",null,"Markera de kunskapskrav som uppgiften måste täcka."):v&&o.createElement("p",null,"Markera de kunskapskrav som din uppgift täcker."),o.createElement(T.a,{knowledgeRequirements:n.knowledgeRequirements,markedIds:f,idsToMarkNotOk:r,markMode:a||v,migratedIds:l&&l.migratedTexts&&l.migratedTexts.knowledgeRequirements,onMarkChanged:this.onMarkChanged.bind(this)}))),o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement(j.a,{options:n.abilities,title:v||a?"Välj förmågor":"Förmågor",markedIds:f,markMode:v||a,migratedIds:l&&l.migratedTexts&&l.migratedTexts.abilities,onMarkChanged:this.onMarkChanged.bind(this)})),o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement(j.a,{options:n.centralContent,title:v||a?"Välj centralt innehåll":"Centralt innehåll",markedIds:f,markMode:v||a,migratedIds:l&&l.migratedTexts&&l.migratedTexts.centralContent,onMarkChanged:this.onMarkChanged.bind(this)})),!a&&o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement("div",{className:"openClose larger"+(this.state.futureAbilitiesOpen?" open":"")},o.createElement("div",{className:"openHeader",onClick:function(){return e.setStatePromised({futureAbilitiesOpen:!e.state.futureAbilitiesOpen})}},v?o.createElement("p",null,"Välj ytterligare alternativ"):o.createElement("p",null,"Ytterligare alternativ")),o.createElement("div",{className:"openContent"},o.createElement("h4",null,"Framtidsförmågor"),o.createElement("div",{className:"taskContainer"},D.a.map(function(t){var n=l.futureAbilities.indexOf(t)>=0;return o.createElement("div",{className:"align-horizontal",key:t},o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{className:"checkBox"+(n?" checked":""),onClick:v?function(){var r=s.a({},l);r.futureAbilities=n?l.futureAbilities.filter(function(e){return e!=t}):l.futureAbilities.concat(t),e.setStatePromised({task:r})}:void 0})),o.createElement("div",{className:"horizontalItem top"},t))})))))),o.createElement("div",{className:"sv-layout sv-column-6"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},h&&o.createElement("p",null,o.createElement(U.a,null)," Laddar uppgifter..."),d?o.createElement(o.Fragment,null,o.createElement(A,{searchMarkedIds:m,searchResult:d,task:l,writeAccess:v,taskCustomization:c,editTask:this}),this.state.previewTaskContent?o.createElement("div",{dangerouslySetInnerHTML:{__html:this.state.previewTaskContent}}):l&&o.createElement(Q,{writeAccess:v,task:l,taskCustomization:c,editTask:this}),l&&o.createElement(z,{task:l})):o.createElement(o.Fragment,null,l&&o.createElement(q,{task:l,course:n,writeAccess:v,features:g,editTask:this}),l&&o.createElement(Q,{writeAccess:v,task:l,taskCustomization:c,editTask:this}),l&&o.createElement(z,{task:l}))),l&&o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement("hr",null),o.createElement("br",null),o.createElement(K,{writeAccess:v,editTask:this})))),o.createElement("div",{className:"sv-layout"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"}))))},t}(o.Component),be=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return s.c(t,e),t.prototype.openTaskDialog=function(e){var t=this.props,n=t.taskCustomizations,r=t.course,a=t.host,i=t.module,s=(t.taskIds,t.onTaskAdded,t.onTaskUpdated),o=t.onTaskCustomizationUpdated,l=t.onTaskDeleted,c=t.idsNotCoveredByAnyTask,u=t.onTaskReplaced;a.openDialog({Component:ge,props:{task:e,taskCustomization:n&&n[e.id],module:i,course:r,host:a,idsNotCoveredByAnyTask:c,onSave:function(e){var t=Object(E.l)(e,p.a.currentUser);s(t),a.closeDialog()},onSaveCustomization:function(t){o(e.id,t),a.closeDialog()},onDelete:function(){l(e.id),a.closeDialog()},onReplace:function(e,t){u(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})},t.prototype.render=function(){var e=this,t=this.props;return o.createElement("div",null,o.createElement("div",{className:"taskContainer"},t.taskIds.map(function(e){return t.course.tasks.find(function(t){return t.id===e})}).map(function(t){var n=Object(N.c)(p.a.currentUser,t);return o.createElement("div",{className:"align-horizontal",key:t.id},Object(N.c)(p.a.currentUser,t)&&Object(E.d)(t)&&o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{style:{position:"relative",top:"0.2em",left:"-0.7em"}},o.createElement("i",{className:"fa fa-pagelines",style:{position:"absolute",top:0,left:0,color:"#49c35a"}}))),o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{className:n?"editItem":"viewItem",onClick:function(){return e.openTaskDialog(t)}})),o.createElement("div",{className:"horizontalItem top"},t.content?o.createElement("a",{href:"#",onClick:function(n){n.preventDefault(),e.openTaskDialog(t)}},t.name):o.createElement("a",{href:t.url,target:"_blank"},t.name)))})),o.createElement("br",null),o.createElement("a",{className:"btn",onClick:function(){var n=e.props,r=n.course,a=n.host,i=n.idsNotCoveredByAnyTask,s=n.module,o=n.onTaskAdded;n.onTaskCustomizationUpdated;t.host.openDialog({Component:ge,props:{searchMode:!0,module:s,course:r,host:a,idsNotCoveredByAnyTask:i,onSave:function(e,t){e=Object(E.l)(e,p.a.currentUser),o(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})}},o.createElement("i",{className:"fa fa-search","aria-hidden":!0})," Sök uppgift")," ",o.createElement("a",{onClick:function(){var t=e.props,n=t.course,r=t.host,a=t.module,i=(t.taskIds,t.onTaskAdded),s=(t.onTaskUpdated,t.onTaskDeleted,t.idsNotCoveredByAnyTask);r.openDialog({Component:ge,props:{module:a,course:n,host:r,idsNotCoveredByAnyTask:s,onSave:function(e){e=Object(E.l)(e,p.a.currentUser),i(e),r.closeDialog()},onCancel:function(){return r.closeDialog()}}})},className:"btn"},o.createElement("i",{className:"fa fa-plus","aria-hidden":!0})," Lägg till egen uppgift"))},t}(o.Component),ye=n(56),ke=n(35),Ee=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editMandatoryContent:!1},n}return s.c(t,e),t.prototype.getModuleIndex=function(){var e=this.props,t=e.course,n=e.module;return t.modules.findIndex(function(e){return e.id===n.id})},t.prototype.getModuleOrderIndex=function(){var e=this.props,t=(e.course,e.module);return this.props.getOrderedModules().findIndex(function(e){return e.id===t.id})},t.prototype.updateModule=function(e){var t=this.props.module,n=I()(t,e),r=this.getModuleIndex();this.props.host.update({modules:{$splice:[[r,1,n]]}})},t.prototype.onTaskAdded=function(e,t){var n={},r=this.props.module.taskIds.slice();r.push(e.id),this.props.course.tasks.some(function(t){return t.id===e.id})||(n.tasks={$push:[e]});var a=s.a({},this.props.module.taskCustomizations||{});t&&(a[e.id]=t);var i=this.getModuleIndex();n.modules={},n.modules[i]={taskIds:{$set:r},taskCustomizations:{$set:a}},this.props.host.update(n)},t.prototype.onTaskUpdated=function(e){if(!e.$meta)throw new Error(Object(l.a)(te||(te=s.e(["Hoppsan, blev lite knas. Fel ID: ",""],["Hoppsan, blev lite knas. Fel ID: ",""])),"Pa7Dq"));var t=this.props.course.tasks.findIndex(function(t){return t.id===e.id});t>=0&&this.props.host.update({tasks:{$splice:[[t,1,e]]}})},t.prototype.onTaskCustomized=function(e,t){var n=s.a({},this.props.module.taskCustomizations||{});n[e]=t,this.updateModule({taskCustomizations:{$set:n}})},t.prototype.onTaskDeleted=function(e){this.updateModule({taskIds:{$set:this.props.module.taskIds.filter(function(t){return t!==e})},taskCustomizations:{$apply:function(t){var n=s.a({},t);return delete n[e],n}}})},t.prototype.onTaskReplaced=function(e,t){var n=this.props.module.taskIds.indexOf(e);if(n<0)Object(l.n)(Object(l.a)(ne||(ne=s.e(["Kunde inte spara uppgift. Felkod d72kQ"],["Kunde inte spara uppgift. Felkod d72kQ"]))));else{var r={taskIds:{$splice:[[n,1,t.id]]},taskCustomizations:{$apply:function(t){var n=s.a({},t);return delete n[e],n}}},a=I()(this.props.module,r),i=this.getModuleIndex();this.props.host.update({modules:{$splice:[[i,1,a]]},tasks:{$set:this.props.course.tasks.concat(t)}})}},t.prototype.render=function(){for(var e=this,t=this.props,n=t.course,r=t.host,a=t.module,i=t.idsNotCoveredByAnyTask,c=this.getModuleIndex(),u=this.getModuleOrderIndex(),d=this.updateModule.bind(this),m=1,h=["--"],p=["--"],f=0;f<51;++f)h.push(""+m),p.push(""+ ++m);return o.createElement("div",{className:"course-module ked_boxed",style:{position:"relative"}},o.createElement("h3",null,o.createElement(ye.a,{eager:!0,clickAdvertiseText:"Namnlös modul",maxChars:100,text:a.name,onChange:function(e){return d({name:{$set:e}})}})),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem center"},o.createElement("p",null,"Startvecka")),o.createElement("div",{className:"horizontalItem center"},o.createElement("select",{value:a.startWeek||"--",onChange:function(e){return d({startWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},h.map(function(e){return o.createElement("option",{key:e,value:e},e)}))),o.createElement("div",{className:"horizontalItem center"},o.createElement("p",null,"Slutvecka")),o.createElement("div",{className:"horizontalItem center"},o.createElement("select",{value:a.endWeek||"--",onChange:function(e){return d({endWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},p.map(function(e){return o.createElement("option",{key:e,value:e},e)})))),o.createElement("h4",null,"Kursmodulens introduktion"),o.createElement(F.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],defaultActions:$.a,html:a.mandatoryContent,onChange:function(e){d({mandatoryContent:{$set:e}})}}),o.createElement("h4",null,"Uppgifter"),o.createElement(be,{taskIds:a.taskIds,taskCustomizations:a.taskCustomizations,course:n,module:a,host:r,idsNotCoveredByAnyTask:i,onTaskAdded:function(t,n){return e.onTaskAdded(t,n)},onTaskUpdated:function(t){return e.onTaskUpdated(t)},onTaskCustomizationUpdated:function(t,n){return e.onTaskCustomized(t,n)},onTaskDeleted:function(t){return e.onTaskDeleted(t)},onTaskReplaced:function(t,n){return e.onTaskReplaced(t,n)}}),o.createElement("h4",null,"Modulresurser"),o.createElement("p",{className:"subHeader"},"(Eventuella resuser för redovisning av modulen samt för modulen som helhet)"),o.createElement(O,{resources:a.resources,onUpdate:function(e){return d({resources:e})},host:r}),o.createElement("div",{style:{position:"absolute",top:0,right:0}},u>0&&o.createElement("span",null,o.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(-1)}})," "),u<n.modules.length-1&&o.createElement("span",null,o.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(1)}})," "),o.createElement(ke.a,{title:"Ta bort modulen",style:{display:"inline-block"},onClick:function(){return confirm(Object(l.a)(re||(re=s.e(["Ta bort modul ","?"],["Ta bort modul ","?"])),a.name))&&r.update({modules:{$splice:[[c,1]]}})}})))},t}(o.Component),we=function(e){function t(t){var n=e.call(this,t)||this;return n._moduleRefs={},n.state={},n}return s.c(t,e),t.prototype.addModule=function(){this.props.host.update({modules:{$push:[{name:"Ny kursmodul",id:Object(k.h)(),resources:[],taskIds:[]}]}})},t.prototype.getOrderedModules=function(){var e=this.props.course,t=e.moduleOrder||e.modules.map(function(e){return e.id});return t.map(function(t){return e.modules.find(function(e){return e.id===t})}).filter(function(e){return!!e}).concat(e.modules.filter(function(e){return!t.find(function(t){return e.id===t})}))},t.prototype.reorder=function(e,t){return s.b(this,void 0,void 0,function(){var n,r,a,i,o,l,c;return s.d(this,function(s){switch(s.label){case 0:return this.props.course,n=this.getOrderedModules(),r=n.findIndex(function(t){return t.id===e}),(a=r+t)<0||a>=n.length?[2]:(i=n[a],(o=n.map(function(e){return e.id}))[a]=e,o[r]=i.id,l=document.documentElement.scrollTop,[4,this.props.host.update({moduleOrder:{$set:o}})]);case 1:if(s.sent(),c=Object(y.findDOMNode)(this._moduleRefs[e]))try{window.scrollTo({top:l}),c.scrollIntoView({behavior:"smooth",block:"start"})}catch(e){window.scrollTo(null,l),c.scrollIntoView(!0)}return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.course,r=t.host,a=t.idsNotCoveredByAnyTask,i=(n.moduleOrder||n.modules.map(function(e){return e.id}),this.getOrderedModules());return o.createElement("div",{className:"sv-html-portlet sv-portlet",ref:function(t){return e._elem=t}},i.map(function(t){return o.createElement(Ee,{ref:function(n){return e._moduleRefs[t.id]=n},key:t.id,course:n,module:t,onReorder:function(n){return e.reorder(t.id,n)},getOrderedModules:function(){return e.getOrderedModules()},host:r,idsNotCoveredByAnyTask:a})}),o.createElement("div",{className:"btn btn-large",onClick:function(){return e.addModule()}},"Lägg till kursmodul"))},t}(o.Component),Ce=new(function(e){function t(t){var n=e.call(this,{query:function(){return s.b(n,void 0,void 0,function(){var e,n;return s.d(this,function(r){switch(r.label){case 0:return e=t(),[4,p.a.kedBackendClient.list("schools",{name:e,include:["courses"]})];case 1:if(n=r.sent(),this._schoolId=n.length>0&&n[0].id,!this._schoolId)throw new Error(Object(l.a)(ae||(ae=s.e(["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'],["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'])),e,e));return[2,Object(l.k)(n.map(function(e){return e.courses}))]}})})}})||this;return n}return s.c(t,e),t.prototype.getSchoolId=function(){var e=this;return this.ensureHasData().then(function(){return e._schoolId})},t}(n(63).a))(function(){return p.a.currentUser.school}),Se=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schoolCourses:null},n.onSchoolCoursesUpdated=n.onSchoolCoursesUpdated.bind(n),n}return s.c(t,e),t.prototype.componentDidMount=function(){Ce.subscribe(this.onSchoolCoursesUpdated).catch(l.n)},t.prototype.componentWillUnmount=function(){Ce.unsubscribe(this.onSchoolCoursesUpdated)},t.prototype.onSchoolCoursesUpdated=function(e){var t=Object(l.g)("name"),n=Object(l.g)("createdDate");e.sort(function(e,r){return t(e,r)||n(e,r)}),this.setState({schoolCourses:e})},t.prototype.render=function(){var e=this.state.schoolCourses;return o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("div",{className:"ked_boxed"},o.createElement("h3",null,"Skolans kurser"),o.createElement("div",{className:"taskContainer odd-even"},e?e.map(function(e){return o.createElement("div",{className:"schoolCourse",key:e.id},o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top pull-right"},o.createElement(c.b,{to:"/courses/"+e.id+"/edit",className:"editItem"})),o.createElement("div",{className:"horizontalItem top"},o.createElement(c.b,{to:"/courses/"+e.id+"/edit"},e.name)),o.createElement("div",{className:"horizontalItem top"},e.active&&o.createElement("div",{className:"pill active"},"Aktiv")),e.active&&!e.publishable&&o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{className:"pill incomplete"},"Inkomplett"))),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,e.description)),o.createElement("div",{className:"horizontalItem top"},e.modifiedBy?o.createElement("p",{className:"small"},"Redigerad av ",e.modifiedBy.name," / ",Object(E.g)(e.modifiedDate)):o.createElement("p",{className:"small",style:{fontStyle:"italic"}}," ")))}):o.createElement("p",null,o.createElement(U.a,null)," Laddar skolans kurser")),"#/courses/new"!==location.hash&&o.createElement(c.b,{className:"btn",to:"/courses/new",onClick:function(){return window.scroll(0,0)}},"Skapa ny kurs")))},t}(o.Component),Oe=n(53),Te=function(e){function t(t){var n=e.call(this,t)||this;return n.state={addEmtpyRow:0===t.teachers.length},n}return s.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.teachers,r=t.onUpdate,a=this.state.addEmtpyRow;return a&&(n=n.concat({name:"",url:""})),o.createElement("div",{className:"teachers-list"},o.createElement("h3",null,"Ansvariga lärare"),o.createElement("table",{tabIndex:1,style:{width:"100%"},onBlur:function(t){return(!t.relatedTarget||"INPUT"!==t.relatedTarget.tagName)&&e.props.teachers.length>0&&e.setState({addEmtpyRow:!1})}},o.createElement("thead",null,n.length>0&&o.createElement("tr",null,o.createElement("th",{style:{width:"20%"}},"Namn"),o.createElement("th",null,"Länk eller E-postadress"))),o.createElement("tbody",null,n.map(function(t,i){return o.createElement("tr",{key:i},o.createElement("td",null,o.createElement("input",{type:"text",ref:function(t){return e.nameElem=t},value:t.name,autoFocus:!t.name&&i>0,onChange:function(o){a&&i==n.length-1?(r({$push:[s.a({},t,{name:o.target.value})]}),e.setState({addEmtpyRow:!1})):o.target.value||t.url?r({$splice:[[i,1,s.a({},t,{name:o.target.value})]]}):(1===e.props.teachers.length&&e.setState({addEmtpyRow:!0}),r({$splice:[[i,1]]}))}})),o.createElement("td",null,o.createElement("input",{type:"text",style:{width:"100%"},value:t.url,onKeyDown:function(t){return 9===t.which&&!t.shiftKey&&i===n.length-1&&(n.length<1||!!n[n.length-1].name&&(e.setState({addEmtpyRow:!0}),t.preventDefault()))},onChange:function(o){a&&i==n.length-1?(r({$push:[s.a({},t,{url:o.target.value})]}),e.setState({addEmtpyRow:!1})):o.target.value||t.name?r({$splice:[[i,1,s.a({},t,{url:o.target.value})]]}):(1===e.props.teachers.length&&e.setState({addEmtpyRow:!0}),r({$splice:[[i,1]]}))}})))}))),o.createElement("br",null),o.createElement("a",{className:"btn",onClick:function(){return e.state.addEmtpyRow?e.nameElem.focus():e.setState({addEmtpyRow:!0})}},o.createElement("i",{className:"fa fa-user-plus","aria-hidden":!0})," Lägg till ansvarig lärare"))},t}(o.Component),xe=n(22),Ie=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isOpen:!1},n}return s.c(t,e),t.prototype.render=function(){var e=this.props.course,t=(this.state.isOpen,[]),n=Object(Oe.c)(e);return t.push(o.createElement("tr",{key:"centralContent",className:"covered-item-label"},o.createElement("td",{colSpan:2},"Centralt innehåll"))),e.centralContent.forEach(function(e,r){return t.push(o.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},o.createElement("td",null,o.createElement("p",{className:"criteriaText",dangerouslySetInnerHTML:{__html:e.name}})),o.createElement("td",null,o.createElement("p",null,(n[e.id]||[]).length))))}),t.push(o.createElement("tr",{key:"abilities",className:"covered-item-label"},o.createElement("td",{colSpan:2},"Förmågor"))),e.abilities.forEach(function(e,r){return t.push(o.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},o.createElement("td",null,o.createElement("p",{className:"abilityText",dangerouslySetInnerHTML:{__html:e.name}})),o.createElement("td",null,o.createElement("p",null,(n[e.id]||[]).length))))}),t.push(o.createElement("tr",{key:"futureAbilities",className:"covered-item-label"},o.createElement("td",{colSpan:2},"Framtidsförmågor"))),D.a.forEach(function(e,r){return t.push(o.createElement("tr",{key:e,className:r%2?"tableOdd":""},o.createElement("td",null,o.createElement("p",{className:"abilityText"},e)),o.createElement("td",null,o.createElement("p",null,(n[e]||[]).length))))}),o.createElement(xe.a,{className:"larger",title:o.createElement("p",null,"Kursens täckningstabell"),contentClassName:"weighted-items-table"},o.createElement("p",null,"Tabellen anger hur många uppgifter som berör varje del."),o.createElement("table",null,o.createElement("tbody",null,t)))},t}(o.Component),Ne=function(e){function t(t){var n=e.call(this,t)||this;return n.state={url:n.props.url||""},n}return s.c(t,e),t.prototype.save=function(){var e=this.state.url;if(!C.a.isUri(e))throw new Error(Object(l.a)(ie||(ie=s.e(["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"])),e));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.onSave,r=t.onDelete,a=this.state,i=C.a.isUri(this.state.url);return o.createElement("div",null,o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("h2",null,"Koppla en arbetsgång till kursen"),o.createElement("p",null,"Det går bara att lägga in en arbetsgång per kurs."),o.createElement("br",null),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Länk:"),o.createElement("div",{className:"horizontalItem top "},o.createElement("input",{type:"text",tabIndex:1,size:50,value:a.url,onChange:function(t){return e.setState({url:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("br",null)),o.createElement("div",{className:"sv-html-portlet sv-portlet",id:"svid12_492422d515badf36646e4ff1"},r&&o.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return r()}},"Ta bort arbetsgång"),o.createElement("a",{tabIndex:1,className:"btn btn-large"+(i?"":" btn-inactive"),onClick:i&&function(){return n(a.url)}},"Spara")))},t}(o.Component),je=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return s.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.url;return o.createElement("div",null,o.createElement("div",{className:"taskContainer"},r&&o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:Ne,props:{url:r,onSave:function(e){n({$set:e}),t.closeDialog()},onDelete:function(){n({$set:void 0}),t.closeDialog()}}})}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{href:r,target:"_blank"},"Nuvarande arbetsgång")))),!r&&o.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:Ne,props:{onSave:function(e){n({$set:e}),t.closeDialog()}}})}},o.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Koppla en arbetsgång till kursen"))},t}(o.Component),Re=function(e){function t(t){var n=e.call(this,t)||this;return n.state={changeImageUrl:!1},n}return s.c(t,e),t.prototype.setImageUrl=function(e){this.props.course.imageId},t.prototype.render=function(){var e=this.props,t=e.course,n=e.origCourse,r=e.host,a=Object(Oe.d)(t),i=Object(Oe.b)(t),c=Object(Oe.e)(t),u=t.images.find(function(e){return e.id===t.imageId}),d=u&&u.url.startsWith("data:"),m=u&&u.url.indexOf("storage.googleapis.com")>0;return o.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},t.isTemplate&&o.createElement("h1",null,"Kursmall"),o.createElement("h2",null,"Kursövergripande"),o.createElement("hr",null),o.createElement("div",{className:"ked_boxed"},o.createElement("div",null,o.createElement("h3",null,"Kursens bild"),d?o.createElement("p",null,"Kursens bild ligger i databasen. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):m?o.createElement("p",null,"Kursens bild ligger i Kunskapsskolans Google moln. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):u?o.createElement("div",null,o.createElement("textarea",{value:u.url,style:{width:"100%",height:"30px"},onChange:function(e){return Object(v.b)(t,n,r,e.target.value)}}),o.createElement("p",null,"Bilden som visas högst upp hämtas från angiven URL. För att ändra bild kan du redigera URL ovan. Ett annat sätt att ändra bild är att dra och släppa en ny bild över den gamla högst upp på sidan.")):o.createElement("p",null,"Kursen saknar egen bild. Lägg till en bild genom att dra och släppa en bild på kurs-bannern högst upp på den här sidan."),o.createElement("br",null)),!t.isTemplate&&o.createElement("div",null,o.createElement("h3",null,"Beskrivning"),o.createElement("p",{className:"subHeader"},"(Beskrivning av kursen. För att skilja mellan olika varianter av samma gymnasiekurs)"),o.createElement("textarea",{className:"inputTextBox inputTextSmall",value:t.description,onChange:function(e){return r.update({description:{$set:e.target.value}})}}),o.createElement("br",null)),o.createElement("div",null,o.createElement("h3",null,"Upptaktstext"),o.createElement("p",{className:"subHeader"},"(texten ska visas på kursens upptaktssektion)"),o.createElement(F.a,{html:t.runUpText,defaultActions:$.a,actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],onChange:function(e){return r.update({runUpText:{$set:e}})}}),o.createElement("br",null)),o.createElement("h3",null,"Kursresurser"),o.createElement("p",{className:"subHeader"},"(Resurser för upptakt och kursen som helhet)"),o.createElement(O,{resources:t.resources,onUpdate:function(e){return r.update({resources:e})},host:r}),o.createElement("br",null),o.createElement("h3",null,"Arbetsgång"),o.createElement("p",{className:"subHeader"},"(Eventuell länk till arbetsgång för kursen)"),o.createElement(je,{url:t.workFlowLink,onUpdate:function(e){return r.update({workFlowLink:e})},host:r}),o.createElement("br",null),!t.isTemplate&&o.createElement("div",null,o.createElement("h3",null,"Google Classroom"),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{placeholder:"Google classroom URL",type:"text",size:30,value:t.googleClassRoomURL,onChange:function(e){return r.update({googleClassRoomURL:{$set:e.target.value}})}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{placeholder:"kod",type:"text",size:8,value:t.googleClassRoomCode,onChange:function(e){return r.update({googleClassRoomCode:{$set:e.target.value}})}})))),o.createElement("br",null),!t.isTemplate&&o.createElement(o.Fragment,null,o.createElement(Te,{teachers:t.responsibleTeachers,onUpdate:function(e){r.update({responsibleTeachers:e})}}))),o.createElement("div",{className:"sv-html-portlet sv-portlet",id:"svid12_6ab4811f15b13c706b43bb47"},o.createElement("div",{id:"Kursensmoduler"}),o.createElement("h2",null,"Kursens moduler"),o.createElement("hr",null)),o.createElement(we,{host:r,course:t,idsNotCoveredByAnyTask:i}),o.createElement("div",null,o.createElement("br",null),o.createElement(Ie,{course:t})),o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement("h2",null,"Kursens status"),o.createElement("hr",null),t.createdBy&&t.createdDate&&o.createElement("p",null,"Kursen skapades ",Object(E.c)(t.createdDate)," av ",o.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&o.createElement("p",null,"Kursen redigerades senast ",Object(E.c)(t.modifiedDate)," av ",o.createElement("strong",null,t.modifiedBy.name),"."),t.active?o.createElement("p",null,"Kursen är ",o.createElement("strong",null,"AKTIV")," sedan ",Object(E.c)(t.activatedDate)," av ",o.createElement("strong",null,t.activatedBy.name),"."):o.createElement("p",null,"Kursen är ",o.createElement("strong",null,"INAKTIV"),t.inactivatedBy?o.createElement("span",null,"sedan ",Object(E.c)(t.inactivatedDate)," av ",o.createElement("strong",null,t.inactivatedBy.name),"."):o.createElement("span",null,".")),0===a.length?o.createElement("p",{className:"markedGreen"},"Modulernas kunskapskrav täcker skolverkets krav för denna kurs"):o.createElement("div",{className:"markedRed warning-box"},o.createElement("div",{className:"warningFlag"},o.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),o.createElement("p",null,"Modulernas kunskapskrav täcker inte skolverkets krav för denna kurs.")),c.map(function(e){return o.createElement("div",{key:e,className:"markedRed warning-box"},o.createElement("div",{className:"warningFlag"},o.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),o.createElement("p",null,e))}),o.createElement("br",null),!t.isTemplate&&(n?o.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){confirm(Object(l.a)(se||(se=s.e(['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\n\nKursen kommar att raderas helt!\n\nÄr du säker?"],['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\\n\\nKursen kommar att raderas helt!\\n\\nÄr du säker?"])),t.name,t.description,t.school))&&r.deleteCourse().catch(l.n)}},"Ta bort kurs"):o.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return history.go(-1)}},"Avbryt")),o.createElement("div",{className:"btn btn-large",onClick:function(){return r.save()}},"Spara"),t.active?o.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.inactivateAndSave()}},"Inaktivera och spara"):o.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.activateAndSave()}},"Aktivera och spara")))),o.createElement("div",{className:"sv-layout sv-column-5"},o.createElement(Se,null)))},t}(o.Component),De="production"===n(8).a.ENVIRONMENT?l.n:null,Ue=Object(l.a)(oe||(oe=s.e(["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."],["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."]))),Me={origCourse:null,origTemplate:null,course:null,dialogContainers:[],hasUnsavedData:!1,view:"courseBuilder"},Ae=function(e){function t(t){var n=e.call(this,t)||this;return n.state=s.a({},Me),n.update=n.update.bind(n),n.refDialog=n.refDialog.bind(n),n.contentYPos=0,n.onKeyDown=n.onKeyDown.bind(n),n.beforeUnload=n.beforeUnload.bind(n),n.onClickPreventUnload=n.onClickPreventUnload.bind(n),n.isSaving=!1,n.dialogs=[],t.view&&(n.state=s.a({},n.state,{view:t.view})),n}return s.c(t,e),t.prototype.setStatePromised=function(e){return this._setState(s.a({hasUnsavedData:!0},e))},t.prototype.setNonSaveableDataState=function(e){return this._setState(e)},t.prototype._setState=function(t){var n=this;if(t.course){var r=t.course,a=r.tasks,i=r.modules,o={};i.forEach(function(e){return e.taskIds.forEach(function(e){return o[e]=!0})});var l=a.filter(function(e){return o[e.id]}),c=s.a({},t.course);c.tasks=l,t=s.a({},t,{course:c})}var u=t.allCourses||this.state.allCourses,d=t.course||this.state.course;if(u){var m=u.findIndex(function(e){return e.id===n.props.id});u=I()(u,{$splice:[[m,1,d]]}),(t=s.a({},t)).allCourses=u}return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentWillMount=function(){this.load().catch(De),window.addEventListener("keydown",this.onKeyDown),window.addEventListener("beforeunload",this.beforeUnload),document.body.addEventListener("click",this.onClickPreventUnload)},t.prototype.componentWillUnmount=function(){window.removeEventListener("keydown",this.onKeyDown),window.removeEventListener("beforeunload",this.beforeUnload),document.body.removeEventListener("click",this.onClickPreventUnload),Object(E.i)("")},t.prototype.componentWillReceiveProps=function(e){this.state&&this.state.course&&(e.id===this.props.id&&e.templateId===this.props.templateId||this.setStatePromised(Me)),e.view!==this.props.view&&this.setNonSaveableDataState({view:e.view})},t.prototype.componentDidUpdate=function(e,t){if(this.contentDiv){var n=Object(y.findDOMNode)(this.contentDiv);n&&(this.contentYPos=n.getBoundingClientRect().top)}t&&t.course&&(this.props.id===e.id&&this.props.templateId===e.templateId||this.load().catch(De)),!t.hasUnsavedData&&this.state.hasUnsavedData&&Object(E.i)("unsaved")},t.prototype.loadFromTemplate=function(e){return s.b(this,void 0,void 0,function(){var t,n,r;return s.d(this,function(a){switch(a.label){case 0:return Object(l.o)("Laddar data från mall..."),[4,Object(E.e)(e,{includeTemplateChain:!0})];case 1:return t=a.sent(),(n=Object(E.j)(Date.now(),t,p.a.currentUser)).id=Object(k.h)(),n.parentId=e,n.active=!1,n.isTemplate=!1,n.templateChain=s.g(n.templateChain),n.templateChain.push({id:e,$meta:"ref"}),r=p.a.currentUser.school,n.school=r,n.description="",n.responsibleTeachers=[],n.acl=["role:USER:R","schoolRole:"+r+"/EMPLOYEE:S"],delete n.$etag,delete n.createdBy,delete n.createdDate,delete n.modifiedBy,delete n.modifiedDate,delete n.activatedBy,delete n.activatedDate,delete n.googleClassRoomCode,delete n.googleClassRoomURL,[4,this.setStatePromised({course:n,origCourse:null,origTemplate:t})];case 2:return a.sent(),Object(l.o)(""),[2]}})})},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){return s.d(this,function(e){switch(e.label){case 0:return Object(E.i)(""),this.props.id?[4,this.loadExistingCourse(this.props.id)]:[3,2];case 1:return e.sent(),[3,5];case 2:return this.props.templateId?[4,this.loadFromTemplate(this.props.templateId)]:[3,4];case 3:return e.sent(),[3,5];case 4:throw new Error(Object(l.a)(le||(le=s.e(["Ogiltig parameter. id eller templateId måste anges"],["Ogiltig parameter. id eller templateId måste anges"]))));case 5:return[2]}})})},t.prototype.loadExistingCourse=function(e){return s.b(this,void 0,void 0,function(){var t;return s.d(this,function(n){switch(n.label){case 0:return Object(l.o)("Laddar kurs"),[4,Object(E.e)(e)];case 1:return(t=n.sent()).responsibleTeachers||(t.responsibleTeachers=[]),[4,this.setNonSaveableDataState({course:t,origCourse:t})];case 2:return n.sent(),Object(l.o)(""),[2]}})})},t.prototype.update=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return[4,this.setStatePromised({course:I()(this.state.course,e)})];case 1:return t.sent(),[2]}})})},t.prototype.deleteCourse=function(){return s.b(this,void 0,void 0,function(){var e,t,n,r,a,i,o,c;return s.d(this,function(u){switch(u.label){case 0:return Object(l.o)("Raderar kursen..."),n=this.state.course.school,this.state.course.parentId,r=this.props.id,[4,p.a.kedBackendClient.list("courses",{hasEdgesTo:[this.props.id]})];case 1:a=u.sent(),i=new k.a;try{for(o=s.h(a),c=o.next();!c.done;c=o.next())c.value}catch(t){e={error:t}}finally{try{c&&!c.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}return i.delete("courses",r),[4,p.a.kedBackendClient.batch(i.mutationRequests)];case 2:return u.sent(),n===p.a.currentUser.school&&Ce.delete(r),Object(l.o)(""),location.hash="#/courses/new",[2]}})})},t.prototype.save=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:if(this.isSaving)return[2];n.label=1;case 1:return n.trys.push([1,3,4,5]),this.isSaving=!0,[4,this._save()];case 2:return n.sent(),[3,5];case 3:return e=n.sent(),t=e&&e.message?e.message:Object(l.a)(ce||(ce=s.e(["Ett okänt fel har inträffat..."],["Ett okänt fel har inträffat..."]))),e&&("http409"===e.name||"http412"===e.name||"http404"===e.name?t=Object(l.a)(ue||(ue=s.e(["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."],["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."]))):"http403"===e.name&&(this.state.course.isTemplate?t=Object(l.a)(de||(de=s.e(["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."],["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."]))):this.state.course.school&&(t=Object(l.a)(me||(me=s.e(["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""],["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""])),this.state.course.name,this.state.course.school)))),Object(l.n)(t),Object(E.i)("error"),[3,5];case 4:return this.isSaving=!1,[7];case 5:return[2]}})})},t.prototype._save=function(){return s.b(this,void 0,void 0,function(){var e,t,n,r,a,i,o,c,u,d,m,h;return s.d(this,function(f){switch(f.label){case 0:return e=this.state,t=e.course,n=e.origCourse,r=e.origTemplate,a=0===Object(Oe.d)(t).length,Object(l.o)(Object(l.a)(he||(he=s.e(["Sparar..."],["Sparar..."])))),i=Object(E.m)(Date.now(),t,p.a.currentUser),o=new k.a,c=n||r,u=i.tasks.map(function(e){if("add"===e.$meta||"update"===e.$meta){var t=c.tasks.find(function(t){return t.id===e.id});return Object(E.k)(t||{},e,"tasks",{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"},o)}var n=s.a({},e);return delete n.$meta,n}),i=I()(i,{tasks:{$set:u}}),i=Object(E.k)(n||{},i,"courses",{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"},o),(i=s.a({},i)).publishable=a,d=(i.tags||[]).filter(function(e){return"incomplete"!==e}),i.tags=i.publishable?d:d.concat("incomplete"),n?[3,3]:(o.add("courses",i),t.school?[4,Ce.getSchoolId()]:[3,2]);case 1:m=f.sent(),o.link("schools",m,"courses",t.id,"courses"),t.active&&o.link("schools",m,"courses",t.id,"activeCourses"),f.label=2;case 2:return[3,7];case 3:return o.put("courses",i),n.active||!t.active?[3,5]:[4,Ce.getSchoolId()];case 4:return m=f.sent(),o.link("schools",m,"courses",t.id,"activeCourses"),[3,7];case 5:return!n.active||t.active?[3,7]:[4,Ce.getSchoolId()];case 6:m=f.sent(),o.unlink("schools",m,"courses",t.id,"activeCourses"),f.label=7;case 7:return[4,p.a.kedBackendClient.batch(o.mutationRequests)];case 8:return h=f.sent(),Object(l.o)(n?Object(l.a)(pe||(pe=s.e(["Ändringarna har sparats"],["Ändringarna har sparats"]))):Object(l.a)(fe||(fe=s.e(["Kursen har skapats"],["Kursen har skapats"])))),h&&h.newEtags&&(i=Object(E.b)(i,h.newEtags,["images","tasks"])),t.school===p.a.currentUser.school&&(n?Ce.update(i):Ce.insert(i)),[4,this.setNonSaveableDataState({course:i,origCourse:i,hasUnsavedData:!1})];case 9:return f.sent(),Object(E.i)(""),n||(location.hash="#/courses/"+i.id+"/edit"),[2]}})})},t.prototype.activateAndSave=function(){var e=this,t=s.a({},this.state.course);t.active||(t.active=!0,t.activatedBy={name:p.a.currentUser.displayName,url:"mailto:"+p.a.currentUser.mail},t.activatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(De))},t.prototype.inactivateAndSave=function(){var e=this,t=s.a({},this.state.course);t.active&&(t.active=!1,t.inactivatedBy={name:p.a.currentUser.displayName,url:"mailto:"+p.a.currentUser.mail},t.inactivatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(De))},t.prototype.openDialog=function(e){this.setNonSaveableDataState({dialogContainers:this.state.dialogContainers.concat(e)})},t.prototype.closeDialog=function(){var e=this.state.dialogContainers,t=e.length;for(t&&this.setNonSaveableDataState({dialogContainers:e.slice(0,t-1)});this.dialogs.length>=t;)this.dialogs.pop()},t.prototype.refDialog=function(e,t){this.dialogs[t]=e},t.prototype.onKeyDown=function(e){if(83===e.which&&(e.ctrlKey||e.metaKey)){if(e.preventDefault(),this.state.dialogContainers.length>0)return void this.saveDialog();this.save()}else if(27===e.which&&this.state.dialogContainers.length>0)this.closeDialog(),e.preventDefault();else if(13===e.which){var t=e.target;this.state.dialogContainers.length>0&&"TEXTAREA"!==t.tagName&&"INPUT"!==t.tagName&&"SELECT"!==t.tagName&&"OPTION"!==t.tagName&&!t.contentEditable&&this.saveDialog()}},t.prototype.beforeUnload=function(e){if((this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!p.a.kedBackendClient.http.bearerProvider.wantsRedirect)return e.returnValue=Ue,e.returnValue},t.prototype.onClickPreventUnload=function(e){if(e.target&&"a"===(""+e.target.tagName).toLowerCase()){var t=e.target;if(t.href&&"#"!==t.getAttribute("href")&&!t.target&&(this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!confirm(Ue))return e.preventDefault(),e.stopPropagation(),!1}},t.prototype.saveDialog=function(){if(this.state.dialogContainers.length>0){var e=this.dialogs[this.state.dialogContainers.length-1];e&&e.save()}},t.prototype.render=function(){var e=this,t=(p.a.currentUser.roles.indexOf("ADMIN"),this.state.course);return this.state.course?o.createElement("div",{style:{outline:0}},o.createElement(v.a,{title:t.name+" - "+t.points+"p",activePage:this.state.view,routes:{studentPage:Object(N.f)(this.props.viewCourseUrl,{courseId:this.props.id}),feedback:this.props.feedbackUrl},host:this,course:t,origCourse:this.state.origCourse,backgroundImage:t.images.filter(function(e){return e.id===t.imageId}).map(function(e){return e.url})[0],isTemplate:t.isTemplate}),o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},o.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer",ref:function(t){return e.contentDiv=t}},o.createElement(Re,{course:this.state.course,origCourse:this.state.origCourse,host:this}),o.createElement("br",null),this.state.dialogContainers.map(function(t,n){var r=t.Component,a=t.props;return o.createElement("div",{key:n},o.createElement("div",{className:"darken"}),o.createElement("div",{className:"modal-page-wrap"},o.createElement("div",{className:"modal-page"},o.createElement(r,s.a({ref:function(t){return e.refDialog(t,n)}},a)),o.createElement(ke.a,{onClick:function(){return e.closeDialog()}}))))})))))):o.createElement("div",{style:{outline:0}},o.createElement(v.a,{title:"",activePage:this.state.view,routes:{feedback:this.props.feedbackUrl}}),o.createElement("p",null,o.createElement(U.a,null),"V.g. vänta medan kursen laddas..."))},t}(o.Component),Pe=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courseOptions:null,selectedTemplateId:"--",courses:null,selectedCourseId:""},n}return s.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(l.n)},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){var e,t,n;return s.d(this,function(r){switch(r.label){case 0:return Object(l.o)("Laddar kurser"),[4,p.a.kedBackendClient.list("subjects",{tags:["schoolType:gymnasium"],include:"courseTemplates"})];case 1:return e=r.sent(),t=Object(l.k)(e.map(function(e){return e.courseTemplates})).sort(Object(l.g)("name")),n=[{id:"--",name:"--"}].concat(t),Object(l.o)(""),this.setState({courseOptions:n}),[2]}})})},t.prototype.onSelectCourse=function(e){return s.b(this,void 0,void 0,function(){var t,n,r,a,i;return s.d(this,function(o){switch(o.label){case 0:return[4,p.a.kedBackendClient.list("courses",{hasEdgesTo:[e]})];case 1:return t=o.sent(),n=t.filter(function(e){return e.active}).map(function(e){var t=e.id,n=e.school,r=e.description,a=e.createdBy,i=e.modifiedBy;r&&(r=Object(l.l)(r,80));var s=r||(a?a.name+"s version":i&&i.name+"s version");return{id:t,name:"standard"===n?r?"Standard - "+r:"Standard":n+" - "+Object(l.l)(s,90),school:n}}).sort(Object(l.g)("name")),r=n.filter(function(e){return"standard"===e.school}),a=n.filter(function(e){return"standard"!==e.school}),i=s.g(r,[{id:e,name:"Tom"}],a),this.setState({courses:i,selectedTemplateId:e,selectedCourseId:i[0].id}),[2]}})})},t.prototype.render=function(){var e=this,t=this.state,n=t.courseOptions,r=(t.selectedTemplateId,t.courses),a=t.selectedCourseId;return o.createElement("div",{style:{outline:0}},o.createElement(v.a,{title:Object(l.a)(ve||(ve=s.e(["Kursbyggaren"],["Kursbyggaren"]))),activePage:"courseBuilder",routes:{feedback:this.props.feedbackUrl}}),o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},o.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},o.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("h2",null,"Skapa ny kurs"),o.createElement("hr",null),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"Välj gymnasiekurs :"))),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},n?o.createElement("select",{value:this.state.selectedTemplateId,onChange:function(t){return e.onSelectCourse(t.target.value).catch(l.n)}},n.map(function(e){return o.createElement("option",{key:e.id,value:e.id},e.name)})):o.createElement("div",null,o.createElement(U.a,null),o.createElement("select",{disabled:!0,value:""},o.createElement("option",null,"--"))))),r&&o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"Utgå från version: "))),r&&o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("select",{value:a,onChange:function(t){return e.setState({selectedCourseId:t.target.value})}},r.map(function(e){return o.createElement("option",{key:e.id,value:e.id},e.name)})))),o.createElement("br",null),o.createElement("br",null),r&&a&&o.createElement(c.b,{to:"/courses/create-from-template/"+this.state.selectedCourseId,className:"btn btn-large"},"Skapa"))),o.createElement("div",{className:"sv-layout sv-column-5"},o.createElement(Se,null))))))))},t}(o.Component),Le=n(9),_e=n.n(Le),Be=3e5,qe="/4.4b4cce2a160e445593f16043.html",ze=Date.now();function Ke(){ze=Date.now()}function Fe(){Date.now()-ze<Be&&function(){s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:console.log("Sending heartbeat request to "+qe),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,fetch(qe,{cache:"no-cache",credentials:"same-origin"})];case 2:return e=n.sent(),console.log("Response from "+qe+": "+e.status+" "+e.statusText),[3,4];case 3:return t=n.sent(),console.warn("Request to "+qe+" failed: "+t),[3,4];case 4:return[2]}})})}()}n.d(t,"a",function(){return He}),setInterval(Fe,Be),setTimeout(function(){return _e()("body").mousemove(Ke).keypress(Ke).scroll(Ke)},100);var $e,He=function(e){function t(t){return e.call(this,t)||this}return s.c(t,e),t.prototype.render=function(){var e=this,t=p.a.currentUser.roles.some(function(e){return"ADMIN"===e||"EMPLOYEE"===e}),n=p.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"course-builder"},o.createElement(c.a,null,t?o.createElement("div",null,o.createElement(c.d,{exact:!0,path:"/",render:function(t){t.match;return n?o.createElement(d.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl}):o.createElement(Pe,{feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/schools",render:function(t){t.match;return o.createElement(d.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/schools/new/gymnasium",render:function(){return o.createElement(h,{type:"gymnasium",feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/schools/new/primary",render:function(){return o.createElement(h,{type:"primary",feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/schools/:id/edit",render:function(t){var n=t.match;return o.createElement(m.a,{id:n.params.id,title:Object(l.a)($e||($e=s.e(["Editera skola"],["Editera skola"]))),feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/subjects",render:function(){return o.createElement(b,{feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{path:"/subjects/:id",render:function(t){var n=t.match;return o.createElement(f.a,{id:n.params.id,feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/courses/new",render:function(){return o.createElement(Pe,{feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{path:"/courses/create-from-template/:templateId",render:function(t){var n=t.match;return o.createElement(Ae,{templateId:n.params.templateId,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{path:"/courses/:id/edit",render:function(t){var n=t.match;return o.createElement(Ae,{id:n.params.id,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}})):o.createElement("div",null,o.createElement(c.d,{path:"/",render:function(){return o.createElement("div",null,o.createElement(v.a,{title:"Kursbyggaren",activePage:"courseBuilder",routes:{feedback:e.props.feedbackUrl}}),o.createElement("h2",null,"Behörighet saknas"),o.createElement("p",null,"Detta verktyg är endast till för anställda på Kunskapsskolan."),o.createElement("h3",null,"Användarattribut"),o.createElement("table",{className:"ked_boxed",style:{border:"1px solid #eee"}},o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Attribut"),o.createElement("th",null,"Värde"))),o.createElement("tbody",null,Object.keys(p.a.currentUser).map(function(e){return o.createElement("tr",{key:e},o.createElement("td",null,e),o.createElement("td",null,p.a.currentUser[e]))}))))}}))),o.createElement(u.a,null))},t}(o.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(105),n(77),n(3)),i=n(0),s=n(130),o=n(91),l=function(e){function t(t){var n=e.call(this,t)||this;return location.hash||(location.hash="#/"),n}return r.c(t,e),t.prototype.render=function(){return a.a.currentUser?i.createElement(s.a,{viewCourseUrl:"courseviewer.html",feedbackUrl:"http://svt.se/nyheter"}):i.createElement(o.a,null)},t}(i.Component);t.default=l}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmVudi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmNmZy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1zdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL3V0aWxzLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9jYWNoZS1idXN0LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9kZWx0YS1tZXJnZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1xdWVyeS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9xdWVyeS1zZXQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL211dGF0aW9uLXF1ZXVlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9rZWRiYWNrZW5kLXdyaXRlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1yZXBvLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL2RiLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2V4ZWMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FjY2Vzcy1jb250cm9sL2luZGV4LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hY2Nlc3MtY29udHJvbC9nZXQtdXNlci1jbGFpbXMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3F1ZXJ5LXN0cmluZy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci91dGlscy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC13ZWIvYmVhcmVyLXN0b3JhZ2Utc2Vzc2lvbnN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvbWlncmF0ZS10YXNrLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvbWlncmF0ZS1jb3Vyc2UuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViL2hhc2gtcmVzdG9yZXIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViL2luZGV4LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2NsaWVudHdlYi5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9yZXN0Y2xpZW50LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2tlZC1iZWFyZXItcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvYWNjZXNzLWNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvaHR0cC1lcnJvci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvc2Nob29sLW1vbWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9lbWl0dGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS92YWx1ZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9LRUQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMva2VkLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL2Vkc2NsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9yZW1vdmUtaXRlbS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL21hcC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2NvdXJzZS1iYW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS9leHRlcm5hbCBcIlJlYWN0RE9NXCIiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3NjaG9vbC10ZXJtLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvd2FzaC1odG1sLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvaW5kZXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2ltYWdlLWVkaXQtYWN0aW9ucy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvY291cnNlcy9idXNpbmVzcy1sb2dpYy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zZWxlY3QtcmVsYXRlZC1kb2NzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvcmVuYW1lYWJsZS10ZXh0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC9kYXRhL3VzZXJzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9lcnJvci1zdWNjZXNzLWZlZWRiYWNrLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3MvcmVwby50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZmVhdHVyZXMvZmVhdHVyZXMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2ZlYXR1cmVzL2luZGV4LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2tub3dsZWRnZS1tYXRyaXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9jb25maWd1cmUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL3NldC1iZWFyZXItcHJvdmlkZXJzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9zZXQta2VkLWJhY2tlbmQtY2xpZW50LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9zZXQtZWRzLWNsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zY2hvb2xzL2VkaXQtc2Nob29sLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy9zaG93LXN1YmplY3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3Nob3ctc3ViamVjdC1pbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbnRyYWN0cy9rZWQtbW9kZWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L3V0aWxzL2Nob29zZS11c2VyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zY2hvb2xzL2VkaXRhYmxlLXNjaG9vbC1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zY2hvb2xzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svdGFzay1taWdyYXRpb24tYm94LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy9za29sdmVya2V0LXN1YmplY3QudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvZGlmZi9taWdyYXRlLXN1YmplY3QudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvZGlmZi9kaWZmLXhtbC13aXRoLWRhdGFiYXNlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3VwbG9hZGVkLXN1YmplY3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3N1YmplY3RzLWlubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIHN2fGVuIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L3NldC1jdXJyZW50LXVzZXIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc2Nob29scy9uZXctc2Nob29sLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC1yZXNvdXJjZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtcmVzb3VyY2UtbGlzdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2NhY2hlZC1yZXNwb25zZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svc2VhcmNoLXJlc3VsdHMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL21vZGFsLXBhZ2VzL2VkaXQtdGFzay9iYXNpYy1lZGl0YWJsZS10YXNrLWZpZWxkcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL3Rhc2stc3RhdHVzLWZyYWdtZW50LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svc2F2ZS1vci1jYW5jZWwtYnV0dG9ucy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL3Rhc2stY29udGVudC1mcmFnbWVudC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL3ByZXZpZXdhYmxlLXRhc2stZmllbGRzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svZWRpdC10YXNrLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9lZGl0YWJsZS10YXNrLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL2NvdXJzZXMvY291cnNlLW1vZHVsZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvY291cnNlcy9jb3Vyc2UtbW9kdWxlLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy9zY2hvb2wtY291cnNlcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zY2hvb2wtY291cnNlcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtdGVhY2hlci1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy93ZWlnaHRlZC1pdGVtcy10YWJsZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC13b3JrZmxvdy1saW5rLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9lZGl0YWJsZS13b3JrZmxvdy1saW5rLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2lubmVyLWVkaXQtY291cnNlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2VkaXQtY291cnNlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2NyZWF0ZS1uZXcudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9rZWVwLXNlc3Npb24tYWxpdmUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvaW5kZXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L3Rlc3RwYWdlLWNvdXJzZWJ1aWxkZXIudHN4Il0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiNyIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiUmVhY3QiLCJjYXBpdGFsaXplRmlyc3QiLCJzdHIiLCJjaGFyQ29kZUF0Iiwic3Vic3RyIiwidG9Mb2NhbGVVcHBlckNhc2UiLCJleHRlbmQiLCJvYmoiLCJleHRlbnNpb24iLCJrZXlzIiwiZm9yRWFjaCIsImNsb25lIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmNhdCIsImZsYXR0ZW4iLCJhIiwiY29tcGFyZVByb3AiLCJwcm9wIiwiYiIsImFQcm9wIiwiYlByb3AiLCJjb21wYXJlUHJvcHMiLCJwcm9wcyIsImxvY2FsZXMiLCJvcHRpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwibG9jYWxlQ29tcGFyZSIsIm1hcCIsInNwbGl0IiwiX2EiLCJfYiIsInRzbGliX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJmaXJzdFBhcnQiLCJyZXN0IiwiY21wUGFydCIsImZpcnN0QSIsImZpcnN0QiIsInJlZHVjZSIsImNtcDEiLCJjbXAyIiwiTCIsInRleHQiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJydiIsImJ1aWxkTWVzc2FnZSIsImRhdGVUaW1lUmV2aXZlciIsImV4ZWMiLCJEYXRlIiwic2hvd0luZm8iLCJtc2ciLCJldmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsInNob3dFcnJvciIsImVyck1zZyIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJtYXhMZW5ndGgiLCJtYXhMZW4iLCJhcnJheVRvTG9va3VwIiwia2V5QWNjZXNzb3IiLCJpdGVtIiwiYXJyYXkiLCJhcnJheVRvTWFwIiwiY2hlcnJ5UGlja1Byb3BzIiwicHJvcHNUb1BpY2siLCJwcm9wc1RvUGlja18xIiwicHJvcHNUb1BpY2tfMV8xIiwibmV4dCIsImRvbmUiLCJwYXJhbSIsImRpc3RpbmN0IiwieCIsInNoYWxsb3dFcXVhbHMiLCJrZXlzQSIsImtleXNCIiwiX2tlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZW52IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9qc19kaXN0X2pzX2tlZF9iYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX0tFRF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY2ZnIiwialF1ZXJ5IiwiS2VkQmFja2VuZFN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXIiLCJjb2xsZWN0aW9uIiwidGhpcyIsIm5vdGlmeVN1YnNjcmliZXIiLCJsYXN0Tm90aWZpZWREYXRhIiwiZXgiLCJleDIiLCJ1bnN1YnNjcmliZSIsImdldFRhYmxlRnJvbUxhYmVsIiwidGFibGUiLCJsYWJlbCIsInNjaGVtYSIsInJlbGF0aW9uc2hpcHMiLCJxdWVyeUFycmF5IiwicXVlcnkiLCJmaWx0ZXIiLCJmcm9tIiwiQU5EIiwiZGF0ZVRpbWUiLCJ0byIsImlkcyIsImluY2x1ZGVzIiwiaWQiLCJ0YWdzIiwic29tZSIsInRhZyIsImdldEZpbHRlckZyb21RdWVyeSIsImZpbHRlcjEiLCJmaWx0ZXIyIiwiYnJhbmNoU2Vuc2l0aXZlIiwib3AiLCJnbG9iYWxPcCIsImNhY2hlX2J1c3RfQ2FjaGVCdXN0IiwiQ2FjaGVCdXN0IiwiZ2V0Q2FjaGVCdXN0IiwidXNlciIsImdldEludm9sdmVkSXRlbXMiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiam9pbiIsImludmFsaWRhdGVDYWNoZSIsInJlcXMiLCJnZXRDYWNoZUludmFsaWRhdGlvbnMiLCJzZXRJdGVtIiwibm93IiwiaGFzRWRnZXNGcm9tIiwicmVsYXRlZFRhYmxlcyIsImJyYW5jaElkIiwic29ydCIsImludmFsaWRhdGlvblNldCIsInJlcSIsInNvdXJjZVRhYmxlIiwidGFyZ2V0QnJhbmNoSWQiLCJhcHBseURlbHRhIiwiZG9jIiwiZGVsdGEiLCJ0YXJnZXREb2MiLCJrZXlzXzEiLCJ0c2xpYl9lczYiLCJ2YWwiLCJtZXRhSW5zdHJ1Y3Rpb25zIiwic3RhcnRzV2l0aCIsIl9sb29wXzEiLCJtaSIsIm1pVmFsdWUiLCJ2YWx1ZXNUb0FkZCIsIkVycm9yIiwidGFyZ2V0QXJyYXkiLCJ2YWx1ZXNUb0FkZF8xIiwidiIsInZhbHVlc1RvUmVtb3ZlXzEiLCJtZXRhSW5zdHJ1Y3Rpb25zXzEiLCJtZXJnZURlbHRhcyIsImRlbHRhMSIsImRlbHRhMiIsInRhcmdldERlbHRhIiwia2V5c18yIiwiX2xvb3BfMiIsInZhbHVlc1RvQWRkXzIiLCJ0YXJnZXRNZXRhUHJvcCIsInRhcmdldFJlbW92ZUFycmF5IiwiJHJlbW92ZSIsInRhcmdldEFkZEFycmF5IiwiJGFkZCIsInZhbHVlc1RvUmVtb3ZlXzIiLCJtZXRhSW5zdHJ1Y3Rpb25zXzIiLCJrZWRiYWNrZW5kX3F1ZXJ5X0tlZEJhY2tlbmRRdWVyeSIsIktlZEJhY2tlbmRRdWVyeSIsInJlcG8iLCJtdXRhdGlvblF1ZXVlIiwic3Vic2NyaXB0aW9ucyIsImdvdEluaXRpYWxSZXNwb25zZSIsImludmFsaWQiLCJsb2FkZWRWZXJzaW9uIiwiX2xvYWRQcm9taXNlIiwiaW5jbHVkZSIsInF1ZXJ5S2V5IiwibXV0YXRpb25zT25FbXB0eSIsImNvbXBhcmFibGVQcm9wcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25maWd1cmFibGUiLCJzdWJzY3JpYmUiLCJzdWJzY3JpcHRpb24iLCJnZXREYXRhV2l0aE11dGF0aW9uc0FwcGxpZWQiLCJxdWVyeUxvY2FsbHkiLCJsb2FkIiwic2VudCIsInZlcnNpb24iLCJsb2FkUHJvbWlzZSIsIl90aGlzIiwid3JpdGVyIiwicGVyc2lzdGVkVmVyc2lvbiIsIl9sb2FkIiwidGhlbiIsIk1hdGgiLCJtYXgiLCJjYXRjaCIsIm5vdGlmeVN1YnNjcmliZXJzIiwiYWZmZWN0c1F1ZXJ5Iiwid2FpdEZvclZlcnNpb25Ub1BlcnNpc3QiLCJxdWVyeVNlcnZlciIsImNvbW1pdE11dGF0aW9ucyIsIm11dGF0aW9ucyIsIm11dGF0aW9uc18xIiwicmVmcmVzaE9ySW52YWxpZGF0ZSIsImRlbHRhRG9jIiwib3B0aW1pc3RpY011dGF0aW9ucyIsImRhdGFfMSIsInF1ZXJ5U2V0IiwiZ2V0Q2xpZW50IiwibGlzdCIsIm9wdGltaXN0aWMiLCJtdXRhdGlvbiIsImFwcGx5TXV0YXRpb25zT25EYXRhIiwibGlzdE9wdGlvbnMiLCJzb3VyY2VJZHMiLCJyZXF1ZXN0ZWRUYWdzIiwidXRpbHMiLCJ1cGRhdGVkRG9jIiwiJG1ldGEiLCJpbmNsdWRlZERvY3MiLCJ1cGRhdGVkQXJyYXkiLCJyZWxhdGVkIiwidXBkYXRlZFJlbGF0ZWQiLCJpbmRleE9mIiwiZ3JhcGhQcm9wIiwicmVsYXRlZERvYyIsInNldEdyYXBoUHJvcHMiLCJyZWxhdGVkSWQiLCJsYWJlbHNfMSIsInJlbGF0ZWREb2NzIiwiY29weSIsImtlZGJhY2tlbmRfY29sbGVjdGlvbl9LZWRCYWNrZW5kQ29sbGVjdGlvbiIsIl9zdXBlciIsIktlZEJhY2tlbmRDb2xsZWN0aW9uIiwib2JzZXJ2ZXIiLCJfaW5jbHVkZXMiLCJhcHBseVF1ZXJ5IiwiYWRkVG9RdWVyeUFycmF5UHJvcCIsImFycmF5UHJvcCIsImVudHJpZXMiLCJhZGRGbGFncyIsImZsYWdzIiwiZGVidWciLCJpZHNPbmx5IiwiaWRzQW5kTmFtZXNPbmx5IiwiaW5jbHVkZUlkc09ubHkiLCJpbmNsdWRlSWRzQW5kTmFtZXNPbmx5IiwiYmV0d2VlbiIsInJvbGUiLCJoZWYiLCJpbmNsdWRlRGVsdGFFZGdlcyIsImhhc0VkZ2VzVG8iLCJoZXQiLCJzaW5nbGUiLCJvblplcm8iLCJvbk1hbnkiLCJncmFwaHMiLCJjYWNoZU9wdGltaXplZCIsImNhY2hlQnVzdCIsImdldFVzZXIiLCJtdXRhdGlvbkZhY3RvcnkiLCJ0eCIsImtlZF9iYWNrZW5kX2NsaWVudCIsIm11dGF0aW9uUmVxdWVzdHMiLCJ0aHJvd2VycyIsInRvVmFsdWUiLCJpdGVtcyIsImxvZyIsInVwZGF0ZSIsImNoYW5nZXMiLCJkZWJvdW5jZSIsIm11dGF0ZSIsImFkZFJlbGF0ZWQiLCJyZW1vdmVSZWxhdGVkIiwiZGVsZXRlIiwicXVlcnlfc2V0X1F1ZXJ5U2V0IiwiUXVlcnlTZXQiLCJxdWVyaWVzIiwiUHJvbWlzZSIsImFsbCIsInEiLCJjbGVhbnVwSW52YWxpZFF1ZXJpZXMiLCJ0aW1lb3V0SGFuZGxlIiwiY2xlYXJUaW1lb3V0IiwiZmluZFF1ZXJ5IiwiZmluZCIsInFJbmNsdWRlcyIsInJlc18xIiwiZW50aXR5IiwicmVzdWx0XzEiLCJldmVyeSIsInJlc3VsdF8yIiwic3RhdGVfMSIsImtiUXVlcnkiLCJzZXRUaW1lb3V0IiwibXV0YXRpb25fcXVldWVfTXV0YXRpb25RdWV1ZSIsIk11dGF0aW9uUXVldWUiLCJxdWV1ZSIsInNhdmluZ1F1ZXVlIiwiYWRkIiwibWVyZ2UiLCJtb3ZlVG9TYXZpbmdRdWV1ZSIsImNsZWFyU2F2aW5nUXVldWUiLCJxdWV1ZTEiLCJxdWV1ZTIiLCJtdXRhYmxlUXVldWUxIiwibXV0YWJsZVF1ZXVlMiIsImxlbiIsIm92ZXJsYXBwaW5nSWRPcElkeCIsImZpbmRJbmRleCIsIm5ld011dCIsImtlZGJhY2tlbmRfd3JpdGVyX0tlZEJhY2tlbmRXcml0ZXIiLCJLZWRCYWNrZW5kV3JpdGVyIiwiX3RpbWVvdXRJZCIsIl9pc1NhdmluZ1Byb21pc2UiLCJjdXJyZW50VmVyc2lvbiIsIm9ic2VydmFibGUiLCJlcnJvclN1YnNjcmliZXJzIiwic3RhdGVTdWJzY3JpYmVycyIsIm9uRXJyb3IiLCJjYWxsYmFjayIsIm9uU3RhdGVDaGFuZ2UiLCJvZmYiLCJkaXNwYXRjaEVycm9yIiwicmV0cnlhYmxlIiwiXyIsImRpc3BhdGNoU3RhdGVDaGFuZ2UiLCJzYXZlIiwicmV0cnlTYXZlIiwiaXNFZGl0ZWQiLCJfc2F2ZSIsInJlc29sdmUiLCJldGFnTXV0YXRpb25zIiwiZXJyb3JfMSIsIm1hcE11dGF0aW9ucyIsInRyeXMiLCJiYXRjaCIsIm5ld0V0YWdzIiwiJGV0YWciLCJkaXNwYXRjaCIsImJyIiwibGluazIiLCJ1bmxpbmsyIiwiY2xlYXJCcmFuY2giLCJrZWRiYWNrZW5kX3JlcG9fS2VkQmFja2VuZFJlcG8iLCJLZWRCYWNrZW5kUmVwbyIsImRlZmF1bHRRdWVyeU9wdGlvbnMiLCJfY2xvbmUiLCJxdWVyeU9wdGlvbnMiLCJ1bmRlZmluZWQiLCJicmFuY2giLCJvcHRpbWl6ZUNhY2hlIiwic2F2ZU5vdyIsImRiIiwiZ2xvYmFsSWQiLCJTY2hvb2xzIiwiQ291cnNlSW5zdGFuY2VzIiwiS0VEX2VudiIsImtlZEJhY2tlbmRDbGllbnQiLCJjdXJyZW50VXNlciIsIm1haWwiLCJjbGllbnQiLCJLRURfY2ZnIiwiS0VEX1JFQUxNIiwic3RhbmRhcmRTY2hvb2wiLCJzY2hvb2xzIiwibXlTY2hvb2wiLCJzY2hvb2wiLCJnZXRCcmFuY2hJZCIsImNvdXJzZUlkIiwic3dpdGNoTWFwIiwiYnJhbmNoZXMiLCJvZmZpY2lhbEJyYW5jaElkIiwiZ2V0T3JDcmVhdGVCcmFuY2hJZCIsImNvdXJzZUluc3RhbmNlcyIsImFjbCIsInNjaG9vbElkIiwidHJlZVBhcmVudElkIiwiZ2V0QWxsRGVzY2VuZGFudElkcyIsImNvdXJzZUJsb2NrcyIsImNvdXJzZUNvbnRlbnRzIiwiY291cnNlVGFicyIsInRhc2tzIiwiY29tbWFuZCIsImRvY3VtZW50IiwiZXhlY0NvbW1hbmQiLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyIsImhhc0FjY2VzcyIsInJlcXVlc3RlZFJpZ2h0IiwiY2xhaW1zIiwidHlwZSIsInJvbGVzIiwiZ2V0VXNlckNsYWltcyIsInR1dG9yRm9yIiwiY2xhaW0iLCJmcm9tU3RyaW5nQXJyYXkiLCJoYXNXcml0ZUFjY2VzcyIsImlzVGVhY2hlckF0U2Nob29sIiwiaXNUZWFjaGVyIiwiYmVsb25nc1RvU2Nob29sIiwidG9Mb3dlckNhc2UiLCJpc0FkbWluT3JUZWFjaGVyQXRTY2hvb2wiLCJpbXBlcnNvbmF0aW9uRW52IiwiYWN0QXMiLCJ1cmwiLCJjdXJyZW50UXVlcnkiLCJxdWVyeV9zdHJpbmciLCJsb2NhdGlvbiIsInNlYXJjaCIsIm5ld1F1ZXJ5IiwibmV3UXVlcnlTdHJpbmciLCJocmVmIiwiaGFzaCIsInByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IiwicHJlc2VydmVkUXVlcnkiLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNU18xIiwiSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVNfMV8xIiwicEhhc2giLCJTcGlubmVyIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNsYXNzTmFtZSIsImFyaWEtaGlkZGVuIiwiY3JlYXRlVVVJRCIsImF2b2lkU2ltdWx0YW5vdXNDYWxscyIsImdldEdsb2JhbElkIiwiY29tcHV0ZVByZWRlc3RpbmF0ZWRJZCIsInVwZGF0ZUFycmF5IiwicmVwbGFjZSIsInJhbmRvbSIsImZsb29yIiwidG9TdHJpbmciLCJtZXRob2QiLCJvbmdvaW5nUHJvbWlzZSIsInJlYWxtIiwicGFkIiwiaGV4IiwiaW5wdXQiLCJlbmNvZGVyIiwiZGlnZXN0IiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwic3VidGxlIiwibmliYmxlIiwibWFwcGVyIiwicmV0dmFsIiwibWFwcGVkIiwicGFyc2VRdWVyeVN0cmluZyIsImxvY2F0aW9uU2VhcmNoIiwidG9Mb3dlciIsInBhcnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0cmltIiwiZW5jb2RlUGFyYW1zIiwicGFyYW1zIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2VuZXJhdGVRdWVyeVN0cmluZyIsInNwbGl0VXJsQW5kUXVlcnkiLCJ1cmxXaXRoUG9zc2libGVRdWVyeSIsInBRdWVyeSIsInVwZGF0ZURvY3VtZW50R3JhcGhzIiwib2xkRG9jIiwibmV3RG9jIiwiZG9jVXBkYXRlcyIsImRvY0lkIiwibmF2UHJvcCIsImZvcmVpZ25UYWJsZSIsIm9sZExpc3QiLCJuZXdMaXN0IiwidHVwbGVzIiwiaWR4IiwiYWRkZWQiLCJ0dXBsZSIsImFkZGVkXzEiLCJhZGRlZF8xXzEiLCJtZXRhIiwibXV0YXRlZFN1YkRvYyIsImtlZGJhY2tlbmRfY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJwdXQiLCJsaW5rIiwiJHNldCIsInJlbW92ZWQiLCJyZW1vdmVkXzEiLCJyZW1vdmVkXzFfMSIsInVubGluayIsInVwZGF0ZWQiLCJ1cGRhdGVkXzEiLCJ1cGRhdGVkXzFfMSIsInUiLCJfYyIsInJlYWN0X2FkZG9uc191cGRhdGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwiZHRGb3JtYXQiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiZm9ybWF0Iiwic2hvcnREYXRlRm9ybWF0Iiwic2hvcnRQZXJzb25OYW1lRm9ybWF0IiwibmFtZXMiLCJsYXN0TmFtZSIsInBvcCIsInVwZGF0ZU1vZGlmaWNhdGlvblN0YW1wIiwibW9kaWZpZWREYXRlIiwibW9kaWZpZWRCeSIsImRpc3BsYXlOYW1lIiwidXBkYXRlQ3JlYXRpb25TdGFtcCIsImNyZWF0ZWREYXRlIiwiY3JlYXRlZEJ5IiwidXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMiLCJhcHBseUV0YWdzIiwicmVzIiwiZXRhZyIsImdyYXBoc18xIiwiZ3JhcGhzXzFfMSIsInJlYWRCbG9iIiwiYmxvYiIsInJlamVjdCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJldiIsInRhcmdldCIsIm9uYWJvcnQiLCJvbmVycm9yIiwicmVhZEJsb2JBc1RleHQiLCJyZWFkQXNUZXh0IiwiYWxsb3dDb3B5IiwiZSIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZGF0YVRyYW5zZmVyIiwiZHJvcEVmZmVjdCIsInVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMiLCJzdGF0dXMiLCJkaXYiLCJqcXVlcnlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX19kZWZhdWx0IiwibG9hZENvdXJzZSIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsImluY2x1ZGVUZW1wbGF0ZUNoYWluIiwiaW5jbHVkZVRhc2tzIiwiY291cnNlIiwiY291cnNlVGFza3MiLCJ0ZW1wbGF0ZUNoYWluIiwiYWJpbGl0aWVzIiwiYWJpbGl0aWVzT3JkZXIiLCJrbm93bGVkZ2VSZXF1aXJlbWVudHMiLCJrbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlciIsImNlbnRyYWxDb250ZW50IiwiY2VudHJhbENvbnRlbnRPcmRlciIsImNjIiwiaGFzTWlncmF0ZWRUZXh0cyIsInRhc2siLCJtaWdyYXRlZFRleHRzIiwiQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIiwidG9rZW5JbmZvIiwic2Vzc2lvblN0b3JhZ2UiLCJqc29uIiwicGFyc2UiLCJ0b2tlbiIsImV4cGlyZXMiLCJtaWdyYXRlVGFzayIsInJlc291cmNlcyIsIm1pZ3JhdGUiLCJ0YXNrSWRzIiwicmVzcG9uc2libGVUZWFjaGVycyIsInJlc291cnNlcyIsIm1pZ3JhdGVDb3Vyc2UiLCJyZWRpckhhc2giLCJoYXNoX3Jlc3RvcmVyX2EiLCJ0aW1lIiwicmVtb3ZlSXRlbSIsIl9fbWlncmF0b3JfbWl4ZWRfaW4iLCJLZWRNb2RlbE1pZ3JhdG9yTWl4aW4iLCJzdG9yYWdlIiwidGltZU9mUGFnZUxvYWQiLCJrZWRfYmFja2VuZF9jbGllbnRfd2ViX1dlYlNlcnZlckJlYXJlclByb3ZpZGVyIiwiV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIiLCJ0b2tlblBhdGgiLCJ0b2tlblJlc3BvbnNlTWFwcGVyIiwidG9rZW5JZCIsImdldEJlYXJlciIsInJlZnJlc2hCZWFyZXIiLCJfZCIsIl9lIiwiZmV0Y2giLCJoZWFkZXJzIiwiQWNjZXB0IiwicmVkaXJlY3QiLCJjYWNoZSIsImNyZWRlbnRpYWxzIiwid2FudHNSZWRpcmVjdCIsInJlbG9hZCIsImlzb21vcnBoaWMiLCJzZWxmIiwiYnRvYSIsImtlZF9iYWNrZW5kX2NsaWVudF93ZWJfS2VkQmFja2VuZENsaWVudFdlYiIsIktlZEJhY2tlbmRDbGllbnRXZWIiLCJhcGlCYXNlVXJsIiwicHJvdmlkZXJPclRva2VuUGF0aCIsImJlYXJlclByb3ZpZGVyIiwicmVzdGNsaWVudF9SZXN0Q2xpZW50IiwiUmVzdENsaWVudCIsImJhc2VVcmwiLCJudW1PdXRzdGFuZGluZ09wZXJhdGlvbnMiLCJfc3RhdHVzIiwiZW1pdHRlciIsImZldGNoT3B0aW9ucyIsImF1dGhIZWFkZXIiLCJiZWFyZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwicGF0aCIsIl9mZXRjaCIsImVyciIsInF1ZXJ5U3RyIiwid3d3YXV0aCIsIm5vY2FjaGUiLCJBdXRob3JpemF0aW9uIiwidGVzdCIsInBvc3QiLCJDb250ZW50LVR5cGUiLCJib2R5Iiwia2VkX2JlYXJlcl9wcm92aWRlcl9LZWRCZWFyZXJQcm92aWRlciIsIktlZEJlYXJlclByb3ZpZGVyIiwiY2xpZW50SWQiLCJjbGllbnRTZWNyZXQiLCJ0b2tlblVybCIsInRva2VuUXVlcnkiLCJyZXRyaWVzIiwid2FybiIsInN0YXR1c1RleHQiLCJEb2N1bWVudEFjY2VzcyIsImFjY2Vzc0NsYWltVHlwZSIsImFjY2Vzc0NsYWltVmFsdWUiLCJyaWdodCIsImZyb21TdHJpbmciLCJhYyIsImNsYWltVHlwZSIsInVuZXNjYXBlIiwiY2xhaW1WYWx1ZSIsImVzY2FwZSIsImFjY2Vzc0NvbXBvbmVudCIsInRvU3RyaW5nQXJyYXkiLCJ1c2VyQ2xhaW1zIiwiaHR0cF9lcnJvcl9IdHRwRXJyb3IiLCJIdHRwRXJyb3IiLCJjb2RlIiwia2VkX2JhY2tlbmRfY2xpZW50X0tlZEJhY2tlbmRDbGllbnQiLCJrZWRfYmFja2VuZF9jbGllbnRfQmF0Y2hSdW5uZXIiLCJLZWRCYWNrZW5kQ2xpZW50IiwiaHR0cCIsImdldE15Q2xhaW1zIiwicmVxMSIsInJlcTIiLCJkbyIsInNjb3BlRm4iLCJydW5uZXIiLCJkZWxldGVSZWFsbSIsInNoYXJlIiwidW5zaGFyZSIsInNvdXJjZUlkIiwidGFyZ2V0VGFibGUiLCJ0YXJnZXRJZCIsIkJhdGNoUnVubmVyIiwiZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSIsInRlcm0iLCJnZXRUZXJtU3RhcnRBbmRFbmQiLCJtb250aCIsInllYXIiLCJnZXRTY2hvb2xNb21lbnQiLCJ0aGlzWWVhciIsImlzQXV0dW1uIiwiYWNhZGVtaWNZZWFyIiwid2VlayIsImFkZFllYXIiLCJhWWVhciIsIm51bVllYXJzVG9BZGQiLCJ5ZWFyU3RyIiwicGFyc2VJbnQiLCJPcGVuQ2xvc2VCb3giLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwic3RhdGUiLCJoZWFkZXJPcGVuIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsInNldFN0YXRlIiwicmVuZGVyIiwidGl0bGUiLCJjaGlsZHJlbiIsImhlYWRlckNsYXNzTmFtZSIsImNvbnRlbnRDbGFzc05hbWUiLCJvbkNsaWNrIiwib25PcGVuQ2xvc2UiLCJFbWl0dGVyIiwiaW5pdGlhbFZhbHVlIiwic3Vic2NyaWJlcnMiLCJfZGlzcGF0Y2giLCJWYWx1ZSIsIl9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfbWFwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfY29sbGVjdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwic3Vic2NpcHRpb24iLCJmbiIsInByZWZpeCIsInRvQ29sbGVjdGlvbiIsImNvbWJpbmVMYXRlc3QiLCJvdGhlciIsIm15U3Vic2NyaXB0aW9uIiwib3RoZXJTdWJzY3JpcHRpb24iLCJ2YWx1ZXMiLCJtYXBwZWRTdWJzY3JpcHRpb24iLCJyZXR1cm5lZFN1YnNjcmlwdGlvbiIsIm9ic2VydmFibGVPclZhbHVlIiwiT2JzZXJ2YWJsZSIsIl9zdWJzY3JpYmUiLCJLRUQiLCJDb2xsZWN0aW9uIiwiX3ZhbHVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfZW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX21hcCIsImVtaXR0ZXJfMSIsImZsYXQiLCJtZSIsIm9yZGVyQnkiLCJncm91cEJ5IiwiZmlyc3QiLCJhcnIiLCJFZHNDbGllbnQiLCJ1c2VyRW1haWxHZXR0ZXIiLCJrZWRiYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiZ2V0QWN0aXZlQ291cnNlcyIsImdldExhdGVzdEFzc2Vzc21lbnRzIiwiZ2V0U3R1ZGVudEdvYWxzIiwiZ2V0U3R1ZGVudEZ1dHVyZUFiaWxpdGllcyIsImdldFRlYWNoZXJUdXRvclN0dWRlbnRzIiwicHJpdmF0aXppbmdDYWNoZUJ1c3QiLCJjb3Vyc2VDb2RlIiwiQ291cnNlQ29kZSIsInBlcmlvZE5hbWUiLCJQZXJpb2ROYW1lIiwiY291cnNlcyIsImV4XzEiLCJfdXRpbHNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInRlbXBsYXRlT2JqZWN0XzEiLCJsaW1pdCIsImlzTmFOIiwiQ291bnQiLCJhc3Nlc3NtZW50cyIsInN0dWRlbnRHb2FscyIsInN0dWRlbnRGdXR1cmVBYmlsaXRpZXMiLCJzdHVkZW50cyIsIkVEU1BlcmlvZCIsInBlcmlvZFN0cmluZ09yU2Nob29sVGVybSIsInBlcmlvZCIsInNjaG9vbFRlcm0iLCJfdXRpbHNfc2Nob29sX3Rlcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInZhbHVlT2YiLCJvbmdvaW5nUHJvbWlzZXMiLCJhcmdzSnNvbiIsIlJlbW92ZUl0ZW0iLCJzdHlsZSIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiaW5pdE1hcE1ldGhvZCIsImN0b3IiLCJBZG1pbk1lbnVJdGVtcyIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwicm91dGUiLCJ0ZW1wbGF0ZU9iamVjdF8yIiwiTm9uQWRtaW5NZW51SXRlbXMiLCJ0ZW1wbGF0ZU9iamVjdF8zIiwidGVtcGxhdGVPYmplY3RfNCIsInNldENvdXJzZUltYWdlIiwib3JpZ0NvdXJzZSIsImhvc3QiLCJpbWFnZUlkIiwia2VkYmFja2VuZF9jbGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsImltYWdlcyIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIkNvdXJzZUJhbm5lciIsImlzVGVtcGxhdGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJhY3RpdmVQYWdlIiwiaXNBZG1pbiIsIm1lbnVJdGVtcyIsIm9uRHJhZ092ZXIiLCJfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIm9uRHJvcCIsImZpbGVzIiwiZmlsZSIsInNpemUiLCJ0ZW1wbGF0ZU9iamVjdF81IiwiZm9ybSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidGVtcGxhdGVPYmplY3RfNiIsIm1hdGNoIiwiZ2V0QXNTdHJpbmciLCJ0ZW1wbGF0ZU9iamVjdF83Iiwib25Ecm9wSW1hZ2UiLCJpc0FjdGl2ZSIsImNhbGxiYWNrcyIsImdpdmVuUm91dGUiLCJyb3V0ZXMiLCJkZWZhdWx0Um91dGUiLCJyZWFjdF9yb3V0ZXJfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJSZWFjdERPTSIsIlNjaG9vbFRlcm0iLCJkYXRlT3JTY2hvb2xNb21lbnQiLCJzY2hvb2xNb21lbnQiLCJfc2Nob29sX21vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwibmV4dFRlcm0iLCJwcmV2VGVybSIsInRvTG9jYWxlU3RyaW5nIiwic2hvcnRZZWFyIiwibG9jYWxlc18xIiwibG9jYWxlc18xXzEiLCJfZXhlY19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiYm9sZCIsImljb24iLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJzdHJpa2V0aHJvdWdoIiwiaGVhZGluZzEiLCJoZWFkaW5nMiIsImhlYWRpbmczIiwicGFyYWdyYXBoIiwicXVvdGUiLCJvbGlzdCIsInVsaXN0IiwibGluZSIsInByb21wdCIsImltYWdlIiwiY29tcG9uZW50IiwiZWxlbWVudCIsInNlbCIsInJhbmdlIiwiaW1nIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsInRhYkluZGV4IiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJjb2xsYXBzZSIsImluc2VydE5vZGUiLCJzZXRTdGFydEFmdGVyIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJvbmZvY3VzIiwib25Gb2N1cyIsIm9uYmx1ciIsIm9uQmx1ciIsIm9uQ2hhbmdlIiwiY29udGVudERpdiIsImlubmVySFRNTCIsInBhcnNlciIsIkRPTVBhcnNlciIsIkhUTUxfV0FTSF9QT0xJQ1kiLCJzdHJpa2UiLCJwcmUiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiY2xhc3MiLCJ0YWJpbmRleCIsInVsIiwib2wiLCJsaSIsImhyIiwic3BhbiIsImJvcmRlciIsInRib2R5IiwidGhlYWQiLCJ0Zm9vdCIsInRyIiwidGQiLCJjb2xzcGFuIiwicm93c3BhbiIsInRoIiwiYWJiciIsInNjb3BlIiwic29ydGVkIiwid2FzaEh0bWwiLCJodG1sIiwicGFyc2VGcm9tU3RyaW5nIiwiY2hpbGROb2RlcyIsIm1vZGlmaWVkIiwid2FzaE5vZGUiLCJub2RlIiwidGFnTmFtZSIsImlzRWxlbWVudCIsInBvbGljeSIsIndhc2hDaGlsZE5vZGVzIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsInJlbW92ZSIsInJlbW92ZU1pZGRsZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwiYXR0ciIsImFsbG93ZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ3YXNoRWxlbWVudCIsImFjdGlvbnMiLCJjbGFzc2VzIiwid3lzaXd5Z19XeXNpd3lnIiwiV3lzaXd5ZyIsImZvY3VzUmVjdCIsIm9uTW91c2VEb3duIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJjb21wb25lbnREaWRNb3VudCIsInJlYWRPbmx5IiwicXVlcnlTZWxlY3RvckFsbCIsImVsZW0iLCJhZGRFdmVudExpc3RlbmVyIiwicmVwb3J0TnVtQ2hhcnMiLCJpbm5lclRleHQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0U3RhdGUiLCJ0cmlnZ2VyT25DaGFuZ2UiLCJuZXdTdGF0ZSIsImdldFJlbGF0YXRpdmVDbGllbnRSZWN0IiwicGFyZW50RWxlbWVudCIsImZvY3VzRWxlbSIsInJlbGF0ZWRUYXJnZXQiLCJmb2N1c1JlY3REaXYiLCJtYWtlQ2xpY2thYmxlIiwiY29ybmVyIiwiZ2V0UmVjdENvcm5lciIsInJlc2l6ZVN0YXJ0WCIsImNsaWVudFgiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsIm5ld1dpZHRoIiwiZW5kc1dpdGgiLCJmYWN0b3IiLCJuZXdIZWlnaHQiLCJoZWlnaHQiLCJleGVjSW1hZ2VFZGl0QWN0aW9uIiwiY21kIiwiY3NzRmxvYXQiLCJjYiIsImRlZmF1bHRBY3Rpb25zIiwiYWN0aW9uc1RvVXNlIiwiYWN0aW9uIiwibWF4Q2hhcnMiLCJleHRlcm5hbF9SZWFjdF8iLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImZvY3VzIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwicmVmIiwiY29udGVudEVkaXRhYmxlIiwib25QYXN0ZSIsImN1cnJlbnRUYXJnZXQiLCJlZGl0b3JUZXh0IiwidGV4dEJlaW5nUGFzdGVkIiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJvbktleVVwIiwiTmFOIiwib25LZXlQcmVzcyIsIm9uSW5wdXQiLCJvbktleURvd24iLCJ3aGljaCIsInNoaWZ0S2V5Iiwia2V5Q29kZSIsInJlbW92ZUNoaWxkIiwib3V0bGluZSIsImJvdHRvbSIsInBhcmVudCIsImNoaWxkIiwicGFyZW50UmVjdCIsImNoaWxkUmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJfZW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzIiwidW5jb3ZlcmVkUmVxdWlyZW1lbnRzIiwia3IiLCJnZXRJZHNOb3RDb3ZlcmVkQnlUYXNrcyIsImdldElkc05vdENvdmVyZWRCeVJlcVJlZmVyZW5jaW5nRG9jcyIsInRlbXBsYXRlcyIsImRvY3NCZWluZ0NoZWNrZWQiLCJ1bmNvdmVyZWRJZHMiLCJzYW5pdHlDaGVjayIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwidGFza0lkIiwiaGFzRHVwbGljYXRlVGFza3MiLCJ0YXNrVXJscyIsInRhc2tzV2l0aFNhbWVVcmwiLCJoYXNFbXB0eU1vZHVsZU5hbWVzIiwibW9kdWxlTmFtZXMiLCJoYXNEdXBsaWNhdGVNb2R1bGVOYW1lcyIsImdldFRhc2tzUGVySWQiLCJmdXR1cmVBYmlsaXRpZXMiLCJmYSIsIlNlbGVjdFJlbGF0ZWREb2NzIiwibWFya2VkSWRzIiwibWFya01vZGUiLCJtaWdyYXRlZElkcyIsImdyb3VwZWRPcHRpb25zIiwiZ3JvdXAiLCJncm91cHMiLCJfdXRpbGl0eV9jb21wb25lbnRzX29wZW5fY2xvc2VfYm94X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJvcHRpb24iLCJpc01hcmtlZCIsImlzTWlncmF0ZWQiLCJpc1VuY292ZXJlZCIsIm9uTWFya0NoYW5nZWQiLCJSZW5hbWVhYmxlVGV4dCIsImVkaXRNb2RlIiwicnVudGltZVN0eWxlIiwicmVuYW1lIiwiZGlzcGxheSIsImNsaWNrQWR2ZXJ0aXNlVGV4dCIsImpxdWVyeV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJzZWxlY3QiLCJwbGFjZWhvbGRlciIsImJsdXIiLCJwcm9wYWdhdGVPbkNoYW5nZSIsIm5ld1ZhbHVlIiwicHJvcGFnYXRlZE9uQ2hhbmdlIiwiZWFnZXIiLCJ0eHQiLCJ0ZXh0QWxpZ24iLCJjc3MiLCJmb250U2l6ZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJsaW5lSGVpZ2h0IiwiZm9udFdlaWdodCIsIm91dExpbmUiLCJib3JkZXJTdHlsZSIsImJveFNpemluZyIsInVzZXJzIiwic2Nob29sVHlwZSIsInNjaG9vbEdyYWRlIiwiRXJyb3JTdWNjZXNzRmVlZGJhY2siLCJlcnJvcnMiLCJpbmZvcyIsIl91bmhhbmRsZWRSZWplY3Rpb24iLCJfZXJyb3IiLCJfY3VzdG9tRXJyb3IiLCJfb25JbmZvIiwiX2RiV3JpdGVyRXJyb3IiLCJfZGJXcml0ZXJTdGF0ZUNoYW5nZWQiLCJfYWRkRXJyb3IiLCJkZXRhaWxzIiwiX2FkZEluZm8iLCJpbmZvIiwiaXNTYXZpbmciLCJkYldyaXRlcklzRWRpdGVkIiwiZGJXcml0ZXJJc1NhdmluZyIsIl9nbG9iYWxzX2RiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJyZWFzb24iLCJwb2ludGVyRXZlbnRzIiwibWFyZ2luIiwic2hvd0RldGFpbHMiLCJmbG9hdCIsIl9jb21wb25lbnRzX2NvdXJzZV9idWlsZGVyX3N1Yl9jb21wb25lbnRzX3JlbW92ZV9pdGVtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJyZW1vdmVFcnJvciIsInRvZ2dsZURldGFpbHMiLCJSZXBvIiwiY29tbSIsImxpc3RQcm9taXNlIiwiZW5zdXJlSGFzRGF0YSIsInJlZnJlc2hGcm9tU2VydmVyIiwidXBkYXRlZEl0ZW1zIiwiaXQiLCJ1cGRhdGVkSXRlbSIsImFzc2lnbiIsImluc2VydCIsImZlYXR1cmVzX0ZlYXR1cmVzIiwiZmVhdHVyZXMiLCJmZWF0dXJlIiwiS25vd2xlZGdlTWF0cml4IiwiZXhwbGFpbmVkUmVxdWlyZW1lbnRzIiwiaWRzVG9NYXJrTm90T2siLCJvbkV4cGxhaW5lZFJlcXVpcmVtZW50c0NoYW5nZWQiLCJjb2x1bW5zIiwicm93cyIsInJvdyIsImdyYWRlIiwicE5leHQiLCJncmFkZVN0ZXAiLCJ0b1VwcGVyQ2FzZSIsInJlcXVpcmVtZW50IiwiaXNNYXJrZWRPSyIsImlzTWFya2VkTm90T0siLCJFTlZJUk9OTUVOVCIsIktFRF9BUElfVVJMIiwiRURTX0FQSV9VUkwiLCJLRURfVE9LRU5fVVJMIiwiS0VEX0NMSUVOVF9JRCIsIktFRF9DTElFTlRfU0VDUkVUIiwiZ2V0TWVyZ2VkVG9rZW5QYXRoIiwic2NvcGVzIiwiaW1wZXJzb25hdGlvblByb3BzIiwiYWNjZXNzX2NvbnRyb2wiLCJ0b2tlblBhdGhXaXRob3V0UXVlcnkiLCJ0b2tlblF1ZXJ5U3RyaW5nIiwidG9rZW5QYXRoUXVlcnkiLCJnZXRUb2tlbklkIiwibWVyZ2VkVG9rZW5QYXRoIiwidXNlckVtYWlsIiwiY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIiLCJjbGllbnR3ZWIiLCJlbWFpbCIsImluaXRpYWxVc2VyRW1haWwiLCJLRURfVE9LRU5fUEFUSCIsInNldF9iZWFyZXJfcHJvdmlkZXJzX21lcmdlZFRva2VuUGF0aCIsInJlc3BvbnNlVGV4dCIsIm9rIiwic2F2ZVVzZXJJbmZvIiwic3RvcmVkU2Vzc2lvblVzZXIiLCJsb2FkVXNlckluZm8iLCJnb29nbGVNZXJnZWRQYXRoIiwiZ29vZ2xlVG9rZW5Qcm92aWRlciIsImNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIiLCJlZHNDbGllbnQiLCJlZHNjbGllbnQiLCJFZGl0U2Nob29sIiwiX2NvdXJzZXNfY291cnNlX2Jhbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiZmVlZGJhY2siLCJmZWVkYmFja1VybCIsIkVkaXRTY2hvb2xOb0Jhbm5lciIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIm9yaWdTY2hvb2wiLCJpc0d5bW5hc2l1bSIsImlzUHJpbWFyeVNjaG9vbCIsImFkZFNjaG9vbEJyYW5jaCIsImRlbGV0ZVNjaG9vbCIsInNjaG9vbEJyYW5jaCIsImJyXzEiLCJhcHByb3ZlZENoaWxkcmVuIiwiYWxlcnQiLCJlZGl0RXhpc3RpbmciLCJhdXRvRm9jdXMiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJyZWFjdF9yb3V0ZXJfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJjb25maXJtIiwiU2hvd1N1YmplY3QiLCJzdWJqZWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX3N1Yl9jb21wb25lbnRzX3NwaW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsImNvdXJzZVRlbXBsYXRlcyIsIl9jb3Vyc2VzX2NvdXJzZV9iYW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl9zaG93X3N1YmplY3RfaW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIlNob3dTdWJqZWN0SW5uZXIiLCJfc3ViX2NvbXBvbmVudHNfc3Bpbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicHVibGlzaGFibGUiLCJwb2ludHMiLCJDaG9vc2VVc2VyIiwiX2RhdGFfdXNlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImZvbnRTdHlsZSIsIkVkaXRhYmxlU2Nob29sTGlzdCIsInZpZXdDb3Vyc2VVcmwiLCJlcyIsImN1cnNvciIsInNwaW5uZXIiLCJjb3Vyc2VfYmFubmVyIiwic2Nob29sc19TY2hvb2xzV2l0aG91dEJhbm5lciIsIlNjaG9vbHNXaXRob3V0QmFubmVyIiwiVGFza01pZ3JhdGlvbkJveCIsInVwZGF0ZUxpbmsiLCJrcnMiLCJrckEiLCJrckMiLCJrckUiLCJhYnMiLCJ0YWJsZXNUb1Nob3ciLCJib3hJbmZvIiwib2xkVGV4dCIsInBhcnNlU2tvbHZlcmtldFllYXJzIiwiaW5ZZWFyIiwiZGlmZlN1YmplY3RHbG9iYWxUZXh0cyIsImRiVGV4dE1hcCIsInhtbFRleHRzIiwicmVtb3ZlZElkcyIsIlNldCIsIm5ld1RleHRzIiwiTWFwIiwiaWRzVG9BZGQiLCJuZXdUZXh0IiwiaGFzIiwic2V0Iiwib2xkSWQiLCJfZmljdGl2ZU9sZElkIiwic3RvcFdvcmRzIiwiZ2V0TGV4ZW1lcyIsInJlbW92ZVRhZ3MiLCJsZXhlbWUiLCJnZXRJZHNUb01pZ3JhdGUiLCJkYlRleHRzIiwidGV4dFR5cGUiLCJpZHNUb01pZ3JhdGUiLCJ4bWxTZXQiLCJkYlNldCIsImRiVGV4dCIsImxleGVtZXMiLCJtYXRjaExldmVsIiwieG1sU3BpbnN0ZXJzIiwieG1sVGV4dCIsImJlc3RNYXRjaCIsImZpbmRCZXN0TWF0Y2giLCJwYWlyIiwibXlNYXRjaExldmVsIiwibmV3SWQiLCJzcGluc3RlciIsImlzVHlwb0ZpeCIsInhtbExleGVtZXMiLCJnZXRNYXRjaExldmVsIiwicHAiLCJsZXhlbWVzMSIsImxleGVtZXMyIiwicG9pbnRzMSIsInBvaW50czIiLCJ3b3JkIiwicm91bmQiLCJtaWdyYXRlU3ViamVjdCIsImV4aXN0aW5nU3ViamVjdCIsImNvdXJzZVNldHMiLCJzdWJqZWN0VG9JbXBvcnQiLCJtaWdyYXRlQ291cnNlSW5zdGFuY2UiLCJjb3Vyc2VUb0ltcG9ydCIsInNob3dDaGFuZ2VzIiwic2hvd25DaGFuZ2VzIiwiYWJpbGl0eUlkc1RvTWlncmF0ZSIsIm5ld0FiaWxpdHlUZXh0cyIsImNjc1RvTWlncmF0ZSIsImtyc1RvTWlncmF0ZSIsImNoYW5nZSIsImNvbnRlbnQiLCJjY3NUb0FkZCIsImNyZWF0ZWRJZHMiLCJuZXdDQ1RleHRzIiwia3JzVG9BZGQiLCJuZXdLUlRleHRzIiwiZGVzY3JpcHRpb24iLCJtaWdyYXRlVGFza3MiLCJmZXRjaFRhc2tzSW5DaHVua3NXaXRoRWRnZXNUbyIsIm9sZElkcyIsImlkc1RvTWlncmF0ZVBlckNvdXJzZSIsImltcG9ydERhdGUiLCJvbGRNVCIsImNoYW5nZURlc2NyaXB0aW9ucyIsIm1pZ3JhdGlvbkluZm8iLCJuZXdJZF8xIiwiX2YiLCJ0YXNrQ291cnNlQ29kZXMiLCJsaW5rZWRJZHMiLCJpZHNUb01pZ3JhdGVQZXJDb3Vyc2VfMSIsImlkc1RvTWlncmF0ZVBlckNvdXJzZV8xXzEiLCJfZyIsIm5ld0lkXzIiLCJfaCIsIl9qIiwibmV3SWRfMyIsIl9rIiwiX2wiLCJ0YXNrc18xIiwidGFza3NfMV8xIiwib3JkZXJlZEFiaWxpdGllcyIsIm9yZGVyZWRBYmlsaXRpZXNfMSIsIm9yZGVyZWRBYmlsaXRpZXNfMV8xIiwiY291cnNlU2V0c18xIiwiY291cnNlU2V0c18xXzEiLCJ0ZW1wbGF0ZSIsImFiaWxpdGllc1RvQWRkIiwiX20iLCJ4bWxDb3Vyc2UiLCJ4bWwiLCJjbGVhciIsImluc3RhbmNlcyIsImluc3RhbmNlc18xIiwiaW5zdGFuY2VzXzFfMSIsImNvdXJzZVNldHNfMiIsImNvdXJzZVNldHNfMl8xIiwiX28iLCJfcCIsImRpZmZYbWxXaXRoRGF0YWJhc2UiLCJjdCIsImNvdXJzZV9idWlsZGVyX3V0aWxzIiwiZXhwYW5kZWRDb3Vyc2VUZW1wbGF0ZXMiLCJjb3Vyc2VUZW1wbGF0ZSIsInVwbG9hZGVkX3N1YmplY3RfVXBsb2FkZWRTdWJqZWN0IiwiVXBsb2FkZWRTdWJqZWN0IiwiY291cnNlc0VsZW1zIiwiY2VudHJhbENvbnRlbnRFbGVtcyIsImtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMiLCJzaG93RnVsbFRleHQiLCJpc1dvcmtpbmciLCJpc0ltcG9ydGluZyIsImFkZENsYXNzZXNGb3JDaGVycnlQaWNrZWRFbGVtZW50cyIsImRpZmZXaXRoRXhpc3RpbmciLCJleHRlcm5hbF9qUXVlcnlfZGVmYXVsdCIsInB1cnBvc2VFbGVtIiwiYWRkQ2xhc3MiLCJjZW50cmFsQ29udGVudHMiLCJjaGVycnlQaWNrRGF0YSIsInNrb2xTdWJqZWN0IiwicHJldiIsImNyZWF0ZVRpbWUiLCJleGlzdGluZ1N1YmplY3RzIiwibmV3U3ViamVjdF8xIiwic3ViamVjdEFiaWxpdGllcyIsIm5ld0FiaWxpdHkiLCJuZXdDb3Vyc2UiLCJzdWJqZWN0Q29kZSIsInN1YmplY3RJZCIsImNjR3JvdXAiLCJuZXdDZW50cmFsQ29udGVudCIsImNyIiwibmV3S25vd2xlZGdlUmVxdWlyZW1lbnQiLCJzdWJqZWN0QWJpbGl0aWVzXzEiLCJzdWJqZWN0QWJpbGl0aWVzXzFfMSIsImNhbmNlbCIsIm9uQ2FuY2VsIiwiaW1wb3J0IiwiYWxsTXV0YXRpb25zIiwibXV0Iiwib25JbXBvcnRTdWNjZXNzIiwiZml4TCIsInBhZGRpbmciLCJjb2xTcGFuIiwicHVycG9zZSIsImtub3dubGVkZ2VSZXF1aXJlbWVudHMiLCJzdWJqZWN0c19pbm5lcl9TdWJqZWN0c0lubmVyIiwiU3ViamVjdHNJbm5lciIsImlzTGlzdGluZ1N1YmplY3RzIiwiZ3ltbmFzaXVtU3ViamVjdHMiLCJwcmltYXJ5U2Nob29sU3ViamVjdHMiLCJ1cGxvYWRlZFN1YmplY3QiLCJzdWJqZWN0cyIsImhhbmRsZUZpbGVTZWxlY3QiLCJwYXJzZVhNTCIsInR5cGVPZlNjaG9vbGluZyIsIm1vZGVsIiwic3ViamVjdHNfaW5uZXJfdGVtcGxhdGVPYmplY3RfMSIsInN0YWRpdW0iLCJzdWJqZWN0c19pbm5lcl90ZW1wbGF0ZU9iamVjdF8yIiwiY2VudHJhbENvbnRlbnRzQnlTdGFkaXVtXzEiLCJrbm93bGVkZ2VSZXF1aXJlbWVudHNCeVN0YWRpdW1fMSIsInN1YmplY3ROYW1lXzEiLCJzdWJqZWN0Q29kZV8xIiwic3ViamVjdFB1cnBvc2UiLCJjb3Vyc2VzQnlTdGFkaXVtIiwic3ViamVjdHNfaW5uZXJfdGVtcGxhdGVPYmplY3RfMyIsImxpbmtQcmVmaXgiLCIuL2VuLWF1IiwiLi9lbi1hdS5qcyIsIi4vZW4tY2EiLCIuL2VuLWNhLmpzIiwiLi9lbi1nYiIsIi4vZW4tZ2IuanMiLCIuL2VuLWllIiwiLi9lbi1pZS5qcyIsIi4vZW4tbnoiLCIuL2VuLW56LmpzIiwiLi9zdiIsIi4vc3YuanMiLCJ3ZWJwYWNrQ29udGV4dCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl91dGlsc19xdWVyeV9zdHJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIk5ld1NjaG9vbCIsImVkaXRfc2Nob29sIiwic3ViamVjdHNfU3ViamVjdHMiLCJTdWJqZWN0cyIsInN1YmplY3RzX3RlbXBsYXRlT2JqZWN0XzEiLCJzdWJqZWN0c19pbm5lciIsImVkaXRfcmVzb3VyY2VfRWRpdFJlc291cmNlIiwiRWRpdFJlc291cmNlIiwicmVzb3VyY2UiLCJ2YWxpZF91cmxfZGVmYXVsdCIsImlzVXJpIiwiZWRpdF9yZXNvdXJjZV90ZW1wbGF0ZU9iamVjdF8xIiwib25TYXZlIiwib25EZWxldGUiLCJpc1ZhbGlkVXJsIiwiZWRpdGFibGVfcmVzb3VyY2VfbGlzdF9FZGl0YWJsZVJlc291cmNlTGlzdCIsIkVkaXRhYmxlUmVzb3VyY2VMaXN0Iiwib25VcGRhdGUiLCJvcGVuRGlhbG9nIiwiQ29tcG9uZW50IiwiZWRpdGVkUmVzb3VyY2UiLCJ1cGRhdGVkUmVzb3VyY2UiLCIkc3BsaWNlIiwiY2xvc2VEaWFsb2ciLCJuZXdSZXNvdXJjZSIsIiRwdXNoIiwiQ2FjaGVkUmVzcG9uc2UiLCJxdWVyeWVyIiwicHJvbWlzZSIsInJlc2V0IiwiU2VhcmNoUmVzdWx0cyIsInNlYXJjaE1hcmtlZElkcyIsInNlYXJjaFJlc3VsdCIsImVkaXRUYXNrIiwid3JpdGVBY2Nlc3MiLCJ0YXNrQ3VzdG9taXphdGlvbiIsInByZXZpZXdUYXNrQ29udGVudCIsImZvdW5kVGFzayIsInRvZ2dsZUNob29zZVRhc2siLCJ1cGRhdGVTZWFyY2hNYXJrZWRJZHMiLCJleHRlcm5hbF9SZWFjdERPTV8iLCJzZXRTdGF0ZVByb21pc2VkIiwiQmFzaWNFZGl0YWJsZVRhc2tGaWVsZHMiLCJuZXdUYXNrIiwidGFza19taWdyYXRpb25fYm94IiwibGlua09yVW5saW5rIiwiZ2V0VGFza1Byb3AiLCJ1cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uIiwicmVhY3RfZGF0ZXBpY2tlcl9lcyIsInNlbGVjdGVkIiwibW9tZW50X2RlZmF1bHQiLCJkYXRlRm9ybWF0IiwibG9jYWxlIiwicG9wcGVyUGxhY2VtZW50IiwiVGFza1N0YXR1c0ZyYWdtZW50IiwiU2F2ZU9yQ2FuY2VsQnV0dG9ucyIsImNvcHlUYXNrIiwiVGFza0NvbnRlbnRGcmFnbWVudCIsInd5c2l3eWciLCJhY3Rpb25zX3N2IiwiUHJldmlld2FibGVUYXNrRmllbGRzIiwibGVhcm5pbmdHb2FsIiwicmVzb3VyY2VVcGRhdGVzIiwiZWRpdF90YXNrX0VkaXRUYXNrIiwiRWRpdFRhc2siLCJzcmNfZmVhdHVyZXMiLCJlZGl0X3Rhc2tfdGVtcGxhdGVPYmplY3RfMSIsInNlYXJjaE1vZGUiLCJmdXR1cmVBYmlsaXRpZXNPcGVuIiwiaXNTZWFyY2hpbmciLCJzZWFyY2hSZXNwb25zZSIsInVwZGF0ZVNlYXJjaFJlc3VsdCIsImVycl8xIiwic2V0U3RhdGVQcm9taXNlIiwiYWxsVGFza3NGb3JTdWJqZWN0IiwiYWJpbGl0eSIsImtub3dsZWRnZVJlcXVpcmVtZW50IiwiY29sbGVjdGlvblByb3AiLCJ1cGRhdGVkQ29sbGVjdGlvbiIsImN1cnJlbnRQb3MiLCJ1cGRhdGVkVGFzayIsIm9uUmVwbGFjZSIsIm9uU2F2ZUN1c3RvbWl6YXRpb24iLCJ0YXNrQ29weSIsInRlbXBsYXRlT2JqZWN0XzgiLCJ0YXNrUHJvcCIsImN1c3RvbWl6YXRpb24iLCJ1cGRhdGVzIiwibmV3Q3VzdG9taXphdGlvbiIsInJlYWN0X2FkZG9uc191cGRhdGVfZGVmYXVsdCIsImlkc05vdENvdmVyZWRCeUFueVRhc2siLCJrbm93bGVkZ2VfbWF0cml4Iiwic2VsZWN0X3JlbGF0ZWRfZG9jcyIsImtlZF9tb2RlbHMiLCJlZGl0YWJsZV90YXNrX2xpc3RfRWRpdGFibGVUYXNrTGlzdCIsIkVkaXRhYmxlVGFza0xpc3QiLCJvcGVuVGFza0RpYWxvZyIsInRhc2tDdXN0b21pemF0aW9ucyIsIm9uVGFza1VwZGF0ZWQiLCJvblRhc2tBZGRlZCIsIm9uVGFza0N1c3RvbWl6YXRpb25VcGRhdGVkIiwib25UYXNrRGVsZXRlZCIsIm9uVGFza1JlcGxhY2VkIiwiY2FuVXBkYXRlVGFzayIsImNvbG9yIiwiY2hvb3NlblRhc2siLCJjb3Vyc2VfbW9kdWxlX0NvdXJzZU1vZHVsZUNvbXBvbmVudCIsIkNvdXJzZU1vZHVsZUNvbXBvbmVudCIsImVkaXRNYW5kYXRvcnlDb250ZW50IiwiZ2V0TW9kdWxlSW5kZXgiLCJnZXRNb2R1bGVPcmRlckluZGV4IiwiZ2V0T3JkZXJlZE1vZHVsZXMiLCJ1cGRhdGVNb2R1bGUiLCJtb2R1bGVVcGRhdGVzIiwidXBkYXRlZE1vZHVsZSIsIm1vZHVsZUluZGV4IiwiY291cnNlVXBkYXRlcyIsImN1c3RvbWl6YXRpb25zIiwiY291cnNlX21vZHVsZV90ZW1wbGF0ZU9iamVjdF8xIiwidGFza0luZGV4Iiwib25UYXNrQ3VzdG9taXplZCIsInRpZCIsIiRhcHBseSIsImlkeFRhc2siLCJjb3Vyc2VfbW9kdWxlX3RlbXBsYXRlT2JqZWN0XzIiLCJtb2R1bGVPcmRlcmVkSW5kZXgiLCJzdGFydFdlZWtPcHRpb25zIiwiZW5kV2Vla09wdGlvbnMiLCJyZW5hbWVhYmxlX3RleHQiLCJuZXdOYW1lIiwic3RhcnRXZWVrIiwiZW5kV2VlayIsIm1hbmRhdG9yeUNvbnRlbnQiLCJyZXNvdXJjZXNVcGRhdGVzIiwib25SZW9yZGVyIiwicmVtb3ZlX2l0ZW0iLCJjb3Vyc2VfbW9kdWxlX3RlbXBsYXRlT2JqZWN0XzMiLCJjb3Vyc2VfbW9kdWxlX2xpc3RfQ291cnNlTW9kdWxlTGlzdCIsIkNvdXJzZU1vZHVsZUxpc3QiLCJfbW9kdWxlUmVmcyIsImFkZE1vZHVsZSIsIm1vZHVsZU9yZGVyIiwicmVvcmRlciIsImRpcmVjdGlvbiIsIm9yZGVyZWRNb2R1bGVzIiwibmV3TW9kdWxlSW5kZXgiLCJjdXJyZW50TW9kdWxlQXRQb3NpdGlvbiIsIm9yaWdTY3JvbGxQb3MiLCJkb2N1bWVudEVsZW1lbnQiLCJlbGVtTW9kdWxlIiwic2Nyb2xsVG8iLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiYmxvY2siLCJfZWxlbSIsIm15U2Nob29sQ291cnNlc1JlcG8iLCJTY2hvb2xDb3Vyc2VzUmVwbyIsImdldFNjaG9vbE5hbWUiLCJzY2hvb2xOYW1lIiwiX3NjaG9vbElkIiwic2Nob29sX2NvdXJzZXNfdGVtcGxhdGVPYmplY3RfMSIsImdldFNjaG9vbElkIiwic2Nob29sX2NvdXJzZXNfU2Nob29sQ291cnNlcyIsIlNjaG9vbENvdXJzZXMiLCJzY2hvb2xDb3Vyc2VzIiwib25TY2hvb2xDb3Vyc2VzVXBkYXRlZCIsImNvbXBhcmVOYW1lIiwiY29tcGFyZUNyZWF0ZWREYXRlIiwiYWN0aXZlIiwic2Nyb2xsIiwiZWRpdGFibGVfdGVhY2hlcl9saXN0X0VkaXRhYmxlVGVhY2hlckxpc3QiLCJFZGl0YWJsZVRlYWNoZXJMaXN0IiwiYWRkRW10cHlSb3ciLCJ0ZWFjaGVycyIsInRlYWNoZXIiLCJuYW1lRWxlbSIsIndlaWdodGVkX2l0ZW1zX3RhYmxlX1dlaWdodGVkSXRlbXNUYWJsZSIsIldlaWdodGVkSXRlbXNUYWJsZSIsImlzT3BlbiIsInRhc2tzUGVySWQiLCJidXNpbmVzc19sb2dpYyIsImZ1dHVyZUFiaWxpdHlUZXh0Iiwib3Blbl9jbG9zZV9ib3giLCJlZGl0X3dvcmtmbG93X2xpbmtfRWRpdFdvcmtmbG93TGluayIsIkVkaXRXb3JrZmxvd0xpbmsiLCJlZGl0X3dvcmtmbG93X2xpbmtfdGVtcGxhdGVPYmplY3RfMSIsImVkaXRhYmxlX3dvcmtmbG93X2xpbmtfRWRpdGFibGVXb3JrRmxvd0xpbmsiLCJFZGl0YWJsZVdvcmtGbG93TGluayIsIm5ld1VybCIsImlubmVyX2VkaXRfY291cnNlX0lubmVyRWRpdENvdXJzZSIsIklubmVyRWRpdENvdXJzZSIsImNoYW5nZUltYWdlVXJsIiwic2V0SW1hZ2VVcmwiLCJpbWFnZVVybCIsInVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cyIsInNhbml0eUNoZWNrV2FybmluZ3MiLCJjb3Vyc2VJbWFnZSIsImNvdXJzZUltYWdlSXNEYXRhVXJsIiwiY291cnNlSXNVcGxvYWRlZCIsInJ1blVwVGV4dCIsIm5ld0h0bWwiLCJ3b3JrRmxvd0xpbmsiLCJnb29nbGVDbGFzc1Jvb21VUkwiLCJnb29nbGVDbGFzc1Jvb21Db2RlIiwidGVhY2hlcnNVcGRhdGUiLCJhY3RpdmF0ZWREYXRlIiwiYWN0aXZhdGVkQnkiLCJpbmFjdGl2YXRlZEJ5IiwiaW5hY3RpdmF0ZWREYXRlIiwid2FybmluZyIsImlubmVyX2VkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzEiLCJkZWxldGVDb3Vyc2UiLCJoaXN0b3J5IiwiZ28iLCJpbmFjdGl2YXRlQW5kU2F2ZSIsImFjdGl2YXRlQW5kU2F2ZSIsImNhdGNoZXIiLCJDT05GSVJNX05BVklHQVRFX01FU1NBR0UiLCJlZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8xIiwiREVGQVVMVF9TVEFURSIsIm9yaWdUZW1wbGF0ZSIsImRpYWxvZ0NvbnRhaW5lcnMiLCJoYXNVbnNhdmVkRGF0YSIsInZpZXciLCJlZGl0X2NvdXJzZV9FZGl0Q291cnNlIiwiRWRpdENvdXJzZSIsInJlZkRpYWxvZyIsImNvbnRlbnRZUG9zIiwiYmVmb3JlVW5sb2FkIiwib25DbGlja1ByZXZlbnRVbmxvYWQiLCJkaWFsb2dzIiwiX3NldFN0YXRlIiwic2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUiLCJ1c2VkVGFza0lkc18xIiwiZmlsdGVyZWRDb3Vyc2VUYXNrcyIsIm1vZGlmaWVkQ291cnNlIiwiYWxsQ291cnNlcyIsImlkeE91ckNvdXJzZSIsInRlbXBsYXRlSWQiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJsb2FkRnJvbVRlbXBsYXRlIiwicGFyZW50SWQiLCJsb2FkRXhpc3RpbmdDb3Vyc2UiLCJlZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8yIiwiY291cnNlU2Nob29sIiwiY2hpbGRyZW5fMSIsImNoaWxkcmVuXzFfMSIsImVycm9yTWVzc2FnZSIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzMiLCJlZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF80IiwiZWRpdF9jb3Vyc2VfdGVtcGxhdGVPYmplY3RfNSIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzYiLCJkb2VzQWxsVGFza3NDb3ZlckFsbFJlcXVpcmVtZW50cyIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzciLCJvcmlnIiwibmV3Q291cnNlVGFza3MiLCJvcmlnVGFzayIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzgiLCJ0ZW1wbGF0ZU9iamVjdF85IiwiZGlhbG9nQ29udGFpbmVyIiwiZGlhbG9nIiwiaW5kZXgiLCJjdHJsS2V5IiwibWV0YUtleSIsInNhdmVEaWFsb2ciLCJ0YXJnZXRFbGVtIiwicmV0dXJuVmFsdWUiLCJnZXRBdHRyaWJ1dGUiLCJzdHVkZW50UGFnZSIsImNyZWF0ZV9uZXdfQ3JlYXRlTmV3Q291cnNlIiwiQ3JlYXRlTmV3Q291cnNlIiwiY291cnNlT3B0aW9ucyIsInNlbGVjdGVkVGVtcGxhdGVJZCIsInNlbGVjdGVkQ291cnNlSWQiLCJvblNlbGVjdENvdXJzZSIsImRlcml2ZWRDb3Vyc2VzIiwiZGVzY3JpcHRpb25PckF1dGhvciIsImtlZFN0YW5kYXJkT3B0aW9ucyIsInRlYWNoZXJNYWRlIiwiY3JlYXRlX25ld190ZW1wbGF0ZU9iamVjdF8xIiwiSEVBUlRCRUFUX0lOVEVSVkFMIiwiSEVBUlRCRUFUX1VSTCIsImxhc3RBY3Rpdml0eSIsIm9uVXNlckFjdGl2ZSIsIm9uVGltZW91dCIsImhlYXJ0YmVhdCIsInNldEludGVydmFsIiwibW91c2Vtb3ZlIiwia2V5cHJlc3MiLCJjb3Vyc2VfYnVpbGRlcl9Db3Vyc2VCdWlsZGVyIiwiQ291cnNlQnVpbGRlciIsImlzQXV0aG9yaXplZCIsImV4YWN0IiwiY291cnNlX2J1aWxkZXJfc2Nob29scyIsImNvdXJzZV9idWlsZGVyX3RlbXBsYXRlT2JqZWN0XzEiLCJzaG93X3N1YmplY3QiLCJlcnJvcl9zdWNjZXNzX2ZlZWRiYWNrIiwiQXBwIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl9jb21wb25lbnRzX2NvdXJzZV9idWlsZGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfdXRpbHNfY2hvb3NlX3VzZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyJdLCJtYXBwaW5ncyI6InNDQUNBLFNBQUFBLEVBQUFDLEdBUUEsSUFQQSxJQU1BQyxFQUFBQyxFQU5BQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FDQUssRUFBQUwsRUFBQSxHQUlBTSxFQUFBLEVBQUFDLEVBQUEsR0FDUUQsRUFBQUgsRUFBQUssT0FBb0JGLElBQzVCSixFQUFBQyxFQUFBRyxHQUNBRyxFQUFBUCxJQUNBSyxFQUFBRyxLQUFBRCxFQUFBUCxHQUFBLElBRUFPLEVBQUFQLEdBQUEsRUFFQSxJQUFBRCxLQUFBRyxFQUNBTyxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBVixFQUFBSCxLQUNBYyxFQUFBZCxHQUFBRyxFQUFBSCxJQUtBLElBRkFlLEtBQUFo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VXQ3QixFQUFLakwsTUFBTXdtQyxlQUM1RjdMLEVBQUEsNkNBQ0FBLEVBQUEsd0ZBQ0FBLEVBQUEsNENBQ0FBLEVBQUEsdUJBQU9saEIsVUFBVSxZQUFZbVYsTUFBTyxDQUFDZ0gsT0FBUSxtQkFDM0MrRSxFQUFBLDJCQUNFQSxFQUFBLHdCQUNFQSxFQUFBLG9DQUNBQSxFQUFBLG1DQUdKQSxFQUFBLDJCQUNHci9CLE9BQU80RCxLQUFLd1csRUFBQSxFQUFJRSxhQUFhdFYsSUFBSSxTQUFBazNCLEdBQVEsT0FBQW1ELEVBQUEsb0JBQUk1OEIsSUFBS3k1QixHQUNqRG1ELEVBQUEsd0JBQUtuRCxHQUNMbUQsRUFBQSx3QkFBS2psQixFQUFBLEVBQUlFLFlBQVk0aEIsZUFNbkNtRCxFQUFBLGNBQUN5dEIsRUFBQSxFQUFvQixRQUczQk4sRUFuRUEsQ0FBbUNudEIsRUFBQSwySUNsQm5DMHRCLEVBQUEsU0FBQXg2QyxHQUNFLFNBQUF3NkMsRUFBWXJvRCxHQUFaLElBQUFpTCxFQUNFNEMsRUFBQXBTLEtBQUE0SSxLQUFNckUsSUFBTXFFLFlBQ1B1VSxTQUFTSyxPQUFNTCxTQUFTSyxLQUFPLFFBVXhDLE9BYmlDdlksRUFBQSxFQUFBMm5ELEVBQUF4NkMsR0FNL0J3NkMsRUFBQTlzRCxVQUFBMnVCLE9BQUEsV0FDRSxPQUFPbytCLEVBQUEsRUFBSTF5QyxZQUNUMnlDLEVBQUEsY0FBQ0MsRUFBQSxFQUFhLENBQ1o5ZixjQUFjLG9CQUNkbEMsWUFBWSwwQkFDZCtoQixFQUFBLGNBQUNFLEVBQUEsRUFBVSxPQUVqQkosRUFiQSxDQUFpQ0UsRUFBQSIsImZpbGUiOiJ0ZXN0cGFnZWNvdXJzZWJ1aWxkZXIubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG4gXHRcdHZhciBleGVjdXRlTW9kdWxlcyA9IGRhdGFbMl07XG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gYWRkIGVudHJ5IG1vZHVsZXMgZnJvbSBsb2FkZWQgY2h1bmsgdG8gZGVmZXJyZWQgbGlzdFxuIFx0XHRkZWZlcnJlZE1vZHVsZXMucHVzaC5hcHBseShkZWZlcnJlZE1vZHVsZXMsIGV4ZWN1dGVNb2R1bGVzIHx8IFtdKTtcblxuIFx0XHQvLyBydW4gZGVmZXJyZWQgbW9kdWxlcyB3aGVuIGFsbCBjaHVua3MgcmVhZHlcbiBcdFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4gXHR9O1xuIFx0ZnVuY3Rpb24gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKSB7XG4gXHRcdHZhciByZXN1bHQ7XG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZWZlcnJlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHR2YXIgZGVmZXJyZWRNb2R1bGUgPSBkZWZlcnJlZE1vZHVsZXNbaV07XG4gXHRcdFx0dmFyIGZ1bGZpbGxlZCA9IHRydWU7XG4gXHRcdFx0Zm9yKHZhciBqID0gMTsgaiA8IGRlZmVycmVkTW9kdWxlLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgZGVwSWQgPSBkZWZlcnJlZE1vZHVsZVtqXTtcbiBcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tkZXBJZF0gIT09IDApIGZ1bGZpbGxlZCA9IGZhbHNlO1xuIFx0XHRcdH1cbiBcdFx0XHRpZihmdWxmaWxsZWQpIHtcbiBcdFx0XHRcdGRlZmVycmVkTW9kdWxlcy5zcGxpY2UoaS0tLCAxKTtcbiBcdFx0XHRcdHJlc3VsdCA9IF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gZGVmZXJyZWRNb2R1bGVbMF0pO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gcmVzdWx0O1xuIFx0fVxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIGFuZCBsb2FkaW5nIGNodW5rc1xuIFx0Ly8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkXG4gXHQvLyBQcm9taXNlID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxuIFx0dmFyIGluc3RhbGxlZENodW5rcyA9IHtcbiBcdFx0NzogMFxuIFx0fTtcblxuIFx0dmFyIGRlZmVycmVkTW9kdWxlcyA9IFtdO1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucF9uYW1lX1wiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucF9uYW1lX1wiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gYWRkIGVudHJ5IG1vZHVsZSB0byBkZWZlcnJlZCBsaXN0XG4gXHRkZWZlcnJlZE1vZHVsZXMucHVzaChbMTY1LDBdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCJcbmV4cG9ydCBmdW5jdGlvbiBjYXBpdGFsaXplRmlyc3QgKHN0cikge1xuICAgIGZvciAobGV0IGk9MCwgbD1zdHIubGVuZ3RoOyBpPGw7ICsraSkge1xuICAgICAgICBpZiAoc3RyLmNoYXJDb2RlQXQoaSkgPCAweDIwMDApIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyKDAsIGkpICsgc3RyW2ldLnRvTG9jYWxlVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyKGkgKyAxKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kKG9iaiwgZXh0ZW5zaW9uKSB7XG4gICAgaWYgKHR5cGVvZiBleHRlbnNpb24gIT09ICdvYmplY3QnKSByZXR1cm4gb2JqO1xuICAgIE9iamVjdC5rZXlzKGV4dGVuc2lvbikuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBvYmpba2V5XSA9IGV4dGVuc2lvbltrZXldO1xuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZTxULEU+IChvYmogOiBULCBleHRlbnNpb24/OiBFKSB7XG4gICAgbGV0IGNsb25lID0ge307XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjbG9uZSwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSk7XG4gICAgfSk7XG4gICAgaWYgKGV4dGVuc2lvbikgZXh0ZW5kKGNsb25lLCBleHRlbnNpb24pO1xuICAgIHJldHVybiBjbG9uZSBhcyAoVCAmIEUpO1xufVxuXG5jb25zdCBjb25jYXQgPSBbXS5jb25jYXQ7XG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbjxUPiAoYSA6IChUIHwgVFtdKVtdKSB7XG4gICAgcmV0dXJuIGNvbmNhdC5hcHBseShbXSwgYSkgYXMgVFtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVByb3A8VD4ocHJvcDprZXlvZiBUKSB7XG4gICAgcmV0dXJuIChhOiBULGI6IFQpID0+IHtcbiAgICAgICAgY29uc3QgYVByb3AgPSBhW3Byb3BdLCBiUHJvcCA9IGJbcHJvcF07XG4gICAgICAgIHJldHVybiBhUHJvcCA+IGJQcm9wID8gMSA6IGFQcm9wIDwgYlByb3AgPyAtMSA6IDA7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVByb3BzKFxuICAgIHByb3BzOiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgICBsb2NhbGVzPzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgb3B0aW9ucz86IEludGwuQ29sbGF0b3JPcHRpb25zKTogKGE6IGFueSwgYjogYW55KSA9PiBudW1iZXJcbntcbiAgICBwcm9wcyA9IEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdO1xuXG4gICAgY29uc3QgbG9jYWxlQ29tcGFyZSA9IChhLGIpID0+XG4gICAgICAgIHR5cGVvZiBhID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICBhLmxvY2FsZUNvbXBhcmUoYiwgbG9jYWxlcywgb3B0aW9ucykgOlxuICAgICAgICAgICAgYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG5cbiAgICBmdW5jdGlvbiBjbXBQYXJ0IChhLGIsZmlyc3RQYXJ0OiBzdHJpbmcscmVzdDogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgZmlyc3RBID0gYVtmaXJzdFBhcnRdO1xuICAgICAgICBpZiAoZmlyc3RBID09IG51bGwpIHJldHVybiAtMTtcbiAgICAgICAgY29uc3QgZmlyc3RCID0gYltmaXJzdFBhcnRdO1xuICAgICAgICBpZiAoZmlyc3RCID09IG51bGwpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gcmVzdC5sZW5ndGggPT09IDAgP1xuICAgICAgICAgICAgbG9jYWxlQ29tcGFyZShmaXJzdEEsIGZpcnN0QikgOlxuICAgICAgICAgICAgY21wUGFydChmaXJzdEEsIGZpcnN0QiwgcmVzdFswXSwgcmVzdC5zbGljZSgxKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzXG4gICAgICAgIC5tYXAocHJvcCA9PiBwcm9wLnNwbGl0KCcuJykpXG4gICAgICAgIC5tYXAoKFtmaXJzdFBhcnQsIC4uLnJlc3RdKSA9PiAoYSxiKSA9PiBjbXBQYXJ0KGEsYiwgZmlyc3RQYXJ0LCByZXN0KSlcbiAgICAgICAgLnJlZHVjZSgoY21wMSwgY21wMikgPT5cbiAgICAgICAgICAgIChhLGIpID0+IGNtcDEoYSxiKSB8fCBjbXAyKGEsYikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gTCh0ZXh0LCAuLi5hcmdzKSB7XG4gICAgbGV0IGZpcnN0ID0gdGV4dFswXTtcbiAgICByZXR1cm4gYnVpbGRNZXNzYWdlKHRleHQsIGFyZ3MpO1xufVxuXG5mdW5jdGlvbiBidWlsZE1lc3NhZ2UgKHRleHQsIGFyZ3MpIHtcbiAgICBsZXQgcnYgPSB0ZXh0WzBdO1xuICAgIGZvciAobGV0IGk9MSwgbD10ZXh0Lmxlbmd0aDsgaTxsOyArK2kpIHtcbiAgICAgICAgcnYgKz0gYXJnc1tpLTFdICsgdGV4dFtpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJ2O1xufVxuXG5leHBvcnQgY2xhc3MgVEM8VD4ge1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlOiBUKSB7XG4gICAgICAgIGV4dGVuZCh0aGlzLCB0ZW1wbGF0ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRpbWVSZXZpdmVyIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIGE7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYSA9IC9cXC9EYXRlXFwoKFxcZCopXFwpXFwvLy5leGVjKHZhbHVlKTtcbiAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgrYVsxXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG4vL2xldCBpbmZvU2VyaWFsID0gMTtcbmV4cG9ydCBmdW5jdGlvbiBzaG93SW5mbyAobXNnKSB7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdpbmZvJywgeyAnZGV0YWlsJzogbXNnIH0pO1xuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3dFcnJvciAoZXJyTXNnOiBzdHJpbmcgfCBFcnJvcikge1xuICAgIGNvbnN0IG1zZyA9IHR5cGVvZiBlcnJNc2cgPT09ICdzdHJpbmcnID8gZXJyTXNnIDogZXJyTXNnLm1lc3NhZ2U7XG4gICAgdmFyIGV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KCdjdXN0b21lcnJvcicsIHsgJ2RldGFpbCc6IG1zZyB9KTtcbiAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XG4gICAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF4TGVuZ3RoKHN0cjogc3RyaW5nLCBtYXhMZW46IG51bWJlcikge1xuICAgIHJldHVybiBzdHIubGVuZ3RoID4gbWF4TGVuID9cbiAgICAgICAgc3RyLnN1YnN0cigwLCBtYXhMZW4gLSAzKSArIFwiLi4uXCIgOlxuICAgICAgICBzdHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVRvTG9va3VwPFQ+KGE6IFRbXSwga2V5QWNjZXNzb3I6IChpdGVtOiBUKSA9PiBzdHJpbmcgfCBudW1iZXIpIHtcbiAgICBjb25zdCByZXN1bHQgOiB7W2tleTogc3RyaW5nXSA6IFRbXX0gPSB7fTtcbiAgICBmb3IgKGxldCBpPTAsIGw9YS5sZW5ndGg7IGk8bDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhW2ldO1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcbiAgICAgICAgbGV0IGFycmF5ID0gcmVzdWx0W2tleV07XG4gICAgICAgIGlmIChhcnJheSkgYXJyYXkucHVzaChpdGVtKTtcbiAgICAgICAgZWxzZSByZXN1bHRba2V5XSA9IFtpdGVtXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9NYXA8VD4oYTogVFtdLCBrZXlBY2Nlc3NvcjogKGl0ZW06IFQpID0+IHN0cmluZyB8IG51bWJlcikge1xuICAgIGNvbnN0IHJlc3VsdCA6IHtba2V5OiBzdHJpbmddIDogVH0gPSB7fTtcbiAgICBmb3IgKGxldCBpPTAsIGw9YS5sZW5ndGg7IGk8bDsgKytpKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhW2ldO1xuICAgICAgICBjb25zdCBrZXkgPSBrZXlBY2Nlc3NvcihpdGVtKTtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBpdGVtO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlcnJ5UGlja1Byb3BzPFQ+IChvYmo6IFQsIHByb3BzVG9QaWNrOiBzdHJpbmdbXSk6IFBhcnRpYWw8VD4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgcGFyYW0gb2YgcHJvcHNUb1BpY2spIHtcbiAgICAgIGlmIChwYXJhbSBpbiBvYmopIHJlc3VsdFtwYXJhbV0gPSBvYmpbcGFyYW1dO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0IGFzIFBhcnRpYWw8VD47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdDxUPiAoYTogVFtdLCBrZXlBY2Nlc3Nvcj86IChpdGVtOiBUKSA9PiBhbnkpIHtcbiAgICBjb25zdCBtYXAgPSBhcnJheVRvTWFwKGEsIGtleUFjY2Vzc29yIHx8ICh4ID0+IHgpKTtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoa2V5ID0+IG1hcFtrZXldKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbHMoYTogYW55LCBiOiBhbnkpIHtcbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gICAgaWYgKCFhIHx8ICFiKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaT0wLCBsPWtleXNBLmxlbmd0aDsgaTxsOyArK2kpIHtcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5c0FbaV07XG4gICAgICAgIGlmIChrZXlzQltpXSAhPT0ga2V5KSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChhW2tleV0gIT09IGJba2V5XSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiIsImltcG9ydCB7VXNlciwgTGVhcm5pbmdNb2R1bGVUYXNrc30gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCwgQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQge1VzZXJUYXNrfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQge0tlZFJlcG99IGZyb20gJy4uL3JlcG9zL2tlZC1yZXBvJztcbmltcG9ydCB7RWRzQ2xpZW50fSBmcm9tICcuLi9hcGlzL2Vkc2NsaWVudCc7XG5pbXBvcnQgS0VEIGZyb20gJy4va2VkJztcbmltcG9ydCB7IEtTVGVybVBsYW5uZXJSZXBvIH0gZnJvbSAnLi4vcmVwb3Mva3MtdGVybXBsYW5uZXItcmVwbyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW52IHtcbiAgICBjdXJyZW50VXNlcj86IFVzZXI7XG4gICAgbGVhcm5pbmdNb2R1bGVUYXNrcz86IExlYXJuaW5nTW9kdWxlVGFza3M7XG4gICAgYmVhcmVyUHJvdmlkZXI/OiBCZWFyZXJQcm92aWRlcjtcbiAgICBnb29nbGVUb2tlblByb3ZpZGVyPzogQmVhcmVyUHJvdmlkZXI7XG4gICAga2VkQmFja2VuZENsaWVudD86IEtlZEJhY2tlbmRDbGllbnQ7XG4gICAgZWRzQ2xpZW50PzogRWRzQ2xpZW50O1xuICAgIHVzZXJUYXNrc1JlcG8/O1xuICAgIGhpZGRlbkNvdXJzZXNSZXBvPztcbiAgICB3ZWVrTm90ZXNSZXBvPztcbiAgICBrZ1Rlcm1QbGFubmVyUmVwbz87XG4gICAga3NUZXJtUGxhbm5lclJlcG8/OiBLU1Rlcm1QbGFubmVyUmVwb1xuICAgIHR1dG9yZWQ6IGJvb2xlYW47XG4gICAgZXJyb3I/OiBFcnJvcjtcbiAgICBjb3Vyc2VBZG1pblVybEtTPzogc3RyaW5nO1xuICAgIGNvdXJzZVZpZXdlclVybEtTPzogc3RyaW5nO1xuICAgIGNvdXJzZUJ1aWxkZXJVcmw/OiBzdHJpbmc7XG4gICAgY291cnNlVmlld2VyVXJsPzogc3RyaW5nO1xufVxuXG5pZiAoIUtFRC5lbnYpIEtFRC5lbnYgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgS0VELmVudiBhcyBFbnY7XG4iLCJleHBvcnQgKiBmcm9tICcuL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50JzsiLCJpbXBvcnQgS0VEIGZyb20gJy4vS0VEJztcblxuLyogVGhpcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gaXMgdXNlZCBhcyBhIGZhbGxiYWNrLlxuTm9ybWFsbHkgYm90aCB0ZXN0IHBhZ2VzIGFuZCBwcm9kdWN0aW9uIHBhZ2VzIHdpbGwgb3ZlcnJpZGUgdGhlc2UgY29uZmlncmF0aW9uc1xuKi9cbi8qY29uc3QgZGVmYXVsdENvbmZpZ3VyYXRpb24gPSB7XG4gIC8vIEVudmlyb25tZW50XG4gIEVOVklST05NRU5UOiAnZGV2ZWxvcG1lbnQnIGFzICdwcm9kdWN0aW9uJyB8ICdkZXZlbG9wbWVudCcgfCAndGVzdCcsXG4gIC8vIEF1dGhlbnRpY2F0aW9uIFNlcnZlcjpcbiAgS0VEX1RPS0VOX1VSTDogJ2h0dHBzOi8va2VkYXV0aHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvdG9rZW4nLFxuICBLRURfVE9LRU5fUEFUSDogJy9hcGkvdG9rZW4uU2tyaXB0LnBvcnRsZXQ/c3YuY29udGVudHR5cGU9YXBwbGljYXRpb24vanNvbicsXG4gIEtFRF9DTElFTlRfSUQ6ICdkZXZjbGllbnQnLFxuICBLRURfQ0xJRU5UX1NFQ1JFVDogJzRmUmRmUXBXdEpxalRXZicsXG4gIC8vIFNlcnZpY2VzOlxuICBLRURfQVBJX1VSTDogJ2h0dHBzOi8va2VkYmFja2VuZHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpLycsICBcbiAgRURTX0FQSV9VUkw6ICdodHRwczovL2Vkc3BvcnRhbG93aW5hcGkuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpLydcbn0qL1xuXG5leHBvcnQgaW50ZXJmYWNlIElLZWRDb25maWd1cmF0aW9uIHtcbiAgRU5WSVJPTk1FTlQ6ICdwcm9kdWN0aW9uJyB8ICdkZXZlbG9wbWVudCcgfCAndGVzdCc7XG4gIEtFRF9SRUFMTTogc3RyaW5nO1xuICBLRURfVE9LRU5fVVJMOiBzdHJpbmc7XG4gIEtFRF9UT0tFTl9QQVRIOiBzdHJpbmc7XG4gIEtFRF9DTElFTlRfSUQ6IHN0cmluZztcbiAgS0VEX0NMSUVOVF9TRUNSRVQ6IHN0cmluZztcbiAgS0VEX0FQSV9VUkw6IHN0cmluZztcbiAgRURTX0FQSV9VUkw6IHN0cmluZztcbn07XG5cbmlmICghS0VELmNmZykgS0VELmNmZyA9IHt9O1xuXG5leHBvcnQgZGVmYXVsdCBLRUQuY2ZnIGFzIElLZWRDb25maWd1cmF0aW9uO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7IiwidmFyIEtlZEJhY2tlbmRTdWJzY3JpcHRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZFN1YnNjcmlwdGlvbihzdWJzY3JpYmVyLCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XG4gICAgfVxuICAgIEtlZEJhY2tlbmRTdWJzY3JpcHRpb24ucHJvdG90eXBlLm5vdGlmeVN1YnNjcmliZXIgPSBmdW5jdGlvbiAoZGF0YSwgZXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIoW10sIGVycm9yLCB0aGlzKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IHRoaXMubGFzdE5vdGlmaWVkRGF0YSkgeyAvLyBXaWxsIGluLWZhY3QgYmUgZXF1YWwgYnkgcmVmZXJlbmNlIGlmIGRhdGEgaXMgc2FtZSBhcyBsYXN0IG5vdGlmaWNhdGlvbiAoYXMgd2UgdXNlIGFuIGltbXV0YWJsZSBhcHByb2FjaCBvbiBkYXRhKVxuICAgICAgICAgICAgICAgIHRoaXMubGFzdE5vdGlmaWVkRGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyKGRhdGEsIGVycm9yLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyKFtdLCBleCwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXgyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHdoaWxlIG5vdGlmeWluZyBLZWRCYWNrZW5kU3Vic2NyaWJlcjpcIiwgZXgyLCAnb3JpZ2luYWxseSBub3RpZmllZCBlcnJvcjonLCBleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIEtlZEJhY2tlbmRTdWJzY3JpcHRpb24ucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNvbGxlY3Rpb24udW5zdWJzY3JpYmUodGhpcyk7XG4gICAgfTtcbiAgICByZXR1cm4gS2VkQmFja2VuZFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLXN1YnNjcmlwdGlvbi5qcy5tYXAiLCJpbXBvcnQgeyB0YWJsZXMgfSBmcm9tICdrZWRiYWNrZW5kLXNjaGVtYS9zY2hlbWEuanNvbic7XG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFibGVGcm9tTGFiZWwodGFibGUsIGxhYmVsKSB7XG4gICAgcmV0dXJuIHRhYmxlc1t0YWJsZV0ucmVsYXRpb25zaGlwc1tsYWJlbF07XG59XG5leHBvcnQgZnVuY3Rpb24gcXVlcnlBcnJheShxdWVyeSwgZGF0YSkge1xuICAgIHZhciBmaWx0ZXIgPSBnZXRGaWx0ZXJGcm9tUXVlcnkocXVlcnkpO1xuICAgIHJldHVybiBkYXRhLmZpbHRlcihmaWx0ZXIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIEFORChmaWx0ZXIxLCBmaWx0ZXIyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh4KSB7IHJldHVybiBmaWx0ZXIxKHgpICYmIGZpbHRlcjIoeCk7IH07XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RmlsdGVyRnJvbVF1ZXJ5KHF1ZXJ5KSB7XG4gICAgdmFyIGZpbHRlciA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiB0cnVlOyB9O1xuICAgIGlmIChxdWVyeS5mcm9tKVxuICAgICAgICByZXR1cm4gQU5EKGZpbHRlciwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZGF0ZVRpbWUgPj0gcXVlcnkuZnJvbTsgfSk7XG4gICAgaWYgKHF1ZXJ5LnRvKVxuICAgICAgICByZXR1cm4gQU5EKGZpbHRlciwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZGF0ZVRpbWUgPCBxdWVyeS50bzsgfSk7XG4gICAgaWYgKHF1ZXJ5LmlkcylcbiAgICAgICAgcmV0dXJuIEFORChmaWx0ZXIsIGZ1bmN0aW9uICh4KSB7IHJldHVybiBxdWVyeS5pZHMuaW5jbHVkZXMoeC5pZCk7IH0pO1xuICAgIGlmIChxdWVyeS5uYW1lKVxuICAgICAgICByZXR1cm4gQU5EKGZpbHRlciwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgubmFtZSA9PT0gcXVlcnkubmFtZTsgfSk7XG4gICAgaWYgKHF1ZXJ5LnRhZ3MpXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC50YWdzICYmIFtdLmNvbmNhdChxdWVyeS50YWdzIHx8IFtdKS5zb21lKGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHgudGFncy5pbmNsdWRlcyh0YWcpOyB9KTsgfSk7XG4gICAgLy8gcXVlcnkuaGFzRWRnZXNGcm9tIGFuZCBxdWVyeS5oYXNFZGdlc1RvIGNhbm5vdCBieSBmaWx0ZXJlZCBoZXJlXG4gICAgcmV0dXJuIGZpbHRlcjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBicmFuY2hTZW5zaXRpdmUobSkge1xuICAgIHJldHVybiBtLm9wICE9PSAnZGVsZXRlJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBnbG9iYWxPcChtKSB7XG4gICAgcmV0dXJuIG0ub3AgPT09ICdjbGVhci1icmFuY2gnIHx8IG0ub3AgPT09ICdtZXJnZSc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCJpbXBvcnQgKiBhcyBKc29uU2NoZW1hIGZyb20gXCJrZWRiYWNrZW5kLXNjaGVtYS9zY2hlbWEuanNvblwiO1xuaW1wb3J0IHsgZ2V0VGFibGVGcm9tTGFiZWwgfSBmcm9tIFwiLi91dGlsc1wiO1xudmFyIENhY2hlQnVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYWNoZUJ1c3QoKSB7XG4gICAgfVxuICAgIENhY2hlQnVzdC5nZXRDYWNoZUJ1c3QgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5LCB1c2VyLCBpbmNsdWRlcykge1xuICAgICAgICB2YXIgaW52b2x2ZWRJdGVtcyA9IENhY2hlQnVzdC5nZXRJbnZvbHZlZEl0ZW1zKHRhYmxlLCBxdWVyeSwgaW5jbHVkZXMpO1xuICAgICAgICByZXR1cm4gaW52b2x2ZWRJdGVtc1xuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjYWNoZS1idXN0LVwiICsgdXNlciArIFwiLVwiICsgaXRlbSk7IH0pXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gISF2YWx1ZTsgfSlcbiAgICAgICAgICAgIC5qb2luKCcvJykgfHwgJ3N0YXRpYyc7XG4gICAgfTtcbiAgICBDYWNoZUJ1c3QuaW52YWxpZGF0ZUNhY2hlID0gZnVuY3Rpb24gKHJlcXMsIHVzZXIpIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IENhY2hlQnVzdC5nZXRDYWNoZUludmFsaWRhdGlvbnMocmVxcyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IF9hW19pXTtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY2FjaGUtYnVzdC1cIiArIHVzZXIgKyBcIi1cIiArIGl0ZW0sICcnICsgRGF0ZS5ub3coKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENhY2hlQnVzdC5nZXRJbnZvbHZlZEl0ZW1zID0gZnVuY3Rpb24gKHRhYmxlLCBxdWVyeSwgaW5jbHVkZXMpIHtcbiAgICAgICAgdmFyIGhhc0VkZ2VzRnJvbSA9IHF1ZXJ5Lmhhc0VkZ2VzRnJvbTtcbiAgICAgICAgdmFyIHJlbGF0ZWRUYWJsZXMgPSBpbmNsdWRlc1xuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobGFiZWwpIHsgcmV0dXJuIEpzb25TY2hlbWEudGFibGVzW3RhYmxlXS5yZWxhdGlvbnNoaXBzW2xhYmVsXTsgfSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHRhYmxlKSB7IHJldHVybiAhIXRhYmxlOyB9KTtcbiAgICAgICAgaWYgKGhhc0VkZ2VzRnJvbSlcbiAgICAgICAgICAgIHJlbGF0ZWRUYWJsZXMucHVzaChcImhlZlwiICsgdGFibGUpO1xuICAgICAgICByZXR1cm4gW3RhYmxlLCAnbWFzdGVyJywgcXVlcnkuYnJhbmNoSWRdLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4gISF4OyB9KS5jb25jYXQocmVsYXRlZFRhYmxlcykuc29ydCgpO1xuICAgIH07XG4gICAgQ2FjaGVCdXN0LmdldENhY2hlSW52YWxpZGF0aW9ucyA9IGZ1bmN0aW9uIChyZXFzKSB7XG4gICAgICAgIHZhciBpbnZhbGlkYXRpb25TZXQgPSB7fTtcbiAgICAgICAgcmVxcy5mb3JFYWNoKGZ1bmN0aW9uIChyZXEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocmVxLm9wKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdwdXQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAndXBkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS50YWJsZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdsaW5rJzpcbiAgICAgICAgICAgICAgICBjYXNlICd1bmxpbmsnOlxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbcmVxLnNvdXJjZVRhYmxlXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGlvblNldFtcImhlZi1cIiArIGdldFRhYmxlRnJvbUxhYmVsKHJlcS5zb3VyY2VUYWJsZSwgcmVxLmxhYmVsKV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdjbGVhci1icmFuY2gnOlxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbcmVxLmJyYW5jaElkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21lcmdlJzpcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS5icmFuY2hJZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbcmVxLnRhcmdldEJyYW5jaElkIHx8IFwibWFzdGVyXCJdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMoaW52YWxpZGF0aW9uU2V0KTtcbiAgICB9O1xuICAgIHJldHVybiBDYWNoZUJ1c3Q7XG59KCkpO1xuZXhwb3J0IHsgQ2FjaGVCdXN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZS1idXN0LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5leHBvcnQgZnVuY3Rpb24gYXBwbHlEZWx0YShkb2MsIGRlbHRhKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhkZWx0YSk7XG4gICAgdmFyIHRhcmdldERvYyA9IGRvYztcbiAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMSA9IGtleXM7IF9pIDwga2V5c18xLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c18xW19pXTtcbiAgICAgICAgaWYgKHRhcmdldERvYyA9PT0gZG9jKVxuICAgICAgICAgICAgdGFyZ2V0RG9jID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZG9jKTtcbiAgICAgICAgdmFyIHZhbCA9IGRlbHRhW2tleV07XG4gICAgICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHZhciBtZXRhSW5zdHJ1Y3Rpb25zID0gT2JqZWN0LmtleXModmFsKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5LnN0YXJ0c1dpdGgoJyQnKTsgfSk7XG4gICAgICAgICAgICBpZiAobWV0YUluc3RydWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAobWkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pVmFsdWUgPSB2YWxbbWldO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJGFkZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlc1RvQWRkID0gbWlWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9BZGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIiRhZGQgaW5zdHJ1Y3Rpb24gbXVzdCBjb250YWluIGFycmF5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0YXJnZXREb2Nba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodGFyZ2V0QXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFycmF5ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBcnJheSA9IHRhcmdldEFycmF5LnNsaWNlKCk7IC8vIE9uIEpTIHNpZGUsIHdlIG11c3QgYmUgaW1tdXRhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERvY1trZXldID0gdGFyZ2V0QXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB2YWx1ZXNUb0FkZF8xID0gdmFsdWVzVG9BZGQ7IF9pIDwgdmFsdWVzVG9BZGRfMS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSB2YWx1ZXNUb0FkZF8xW19pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRBcnJheS5pbmNsdWRlcyh2KSkgeyAvLyBhdm9pZCBkdXBzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBcnJheS5wdXNoKHYpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiRyZW1vdmVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNUb1JlbW92ZV8xID0gbWlWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9SZW1vdmVfMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJHJlbW92ZSBpbnN0cnVjdGlvbiBtdXN0IGNvbnRhaW4gYXJyYXlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRhcmdldERvY1trZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0YXJnZXRBcnJheSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QXJyYXkgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RG9jW2tleV0gPSB0YXJnZXRBcnJheS5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuICF2YWx1ZXNUb1JlbW92ZV8xLmluY2x1ZGVzKHQpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBtZXRhSW5zdHJ1Y3Rpb25zXzEgPSBtZXRhSW5zdHJ1Y3Rpb25zOyBfYSA8IG1ldGFJbnN0cnVjdGlvbnNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pID0gbWV0YUluc3RydWN0aW9uc18xW19hXTtcbiAgICAgICAgICAgICAgICAgICAgX2xvb3BfMShtaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRhcmdldERvY1trZXldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0RG9jO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRGVsdGFzKGRlbHRhMSwgZGVsdGEyKSB7XG4gICAgLy9yZXR1cm4gey4uLmRlbHRhMSwgLi4uZGVsdGEyfTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlbHRhMik7XG4gICAgdmFyIHRhcmdldERlbHRhID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZGVsdGExKTtcbiAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMiA9IGtleXM7IF9pIDwga2V5c18yLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c18yW19pXTtcbiAgICAgICAgdmFyIHZhbCA9IGRlbHRhMltrZXldO1xuICAgICAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB2YXIgbWV0YUluc3RydWN0aW9ucyA9IE9iamVjdC5rZXlzKHZhbClcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleS5zdGFydHNXaXRoKCckJyk7IH0pO1xuICAgICAgICAgICAgaWYgKG1ldGFJbnN0cnVjdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBfbG9vcF8yID0gZnVuY3Rpb24gKG1pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaVZhbHVlID0gdmFsW21pXTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiRhZGRcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNUb0FkZF8yID0gbWlWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9BZGRfMikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJGFkZCBpbnN0cnVjdGlvbiBtdXN0IGNvbnRhaW4gYXJyYXlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhUHJvcCA9IHRhcmdldERlbHRhW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWV0YVByb3AgPSB0YXJnZXRNZXRhUHJvcCA/IHRzbGliXzEuX19hc3NpZ24oe30sIHRhcmdldE1ldGFQcm9wKSA6IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldERlbHRhW2tleV0gPSB0YXJnZXRNZXRhUHJvcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJzdCwganVzdCBjaGVjayBpZiB0YXJnZXQgbWV0YVByb3AgaGFzIHskcmVtb3ZlOiBbLi4uaXRlbXNdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHNvLCByZW1vdmUgYW55IGVxdWFsIGl0ZW1zIGZyb20gdGhlcmUgYmVmb3JlIG1lcmdpbmcgdGhlIHskYWRkOiBbLi4uXX0gYXJyYXlzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZW1vdmVBcnJheSA9IHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0UmVtb3ZlQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wLiRyZW1vdmUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UmVtb3ZlQXJyYXkuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiAhdmFsdWVzVG9BZGRfMi5pbmNsdWRlcyh0KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgJHJlbW92ZSBhcnJheSBiZWNhbWUgZW10cHkuIFJlbW92ZSB0aGUgJHJlbW92ZSBwcm9wLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm93IGl0J3MgdGltZSB0byBtZXJnZSBvciBjcmVhdGUgdGFyZ2V0ICRhZGQgYXJyYXkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEFkZEFycmF5ID0gdGFyZ2V0TWV0YVByb3AuJGFkZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBZGRBcnJheSA9IHRhcmdldEFkZEFycmF5ID8gdGFyZ2V0QWRkQXJyYXkuY29uY2F0KHZhbHVlc1RvQWRkXzIpIDogdmFsdWVzVG9BZGRfMi5zbGljZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wLiRhZGQgPSB0YXJnZXRBZGRBcnJheTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkcmVtb3ZlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzVG9SZW1vdmVfMiA9IG1pVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlc1RvUmVtb3ZlXzIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIiRyZW1vdmUgaW5zdHJ1Y3Rpb24gbXVzdCBjb250YWluIGFycmF5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0TWV0YVByb3AgPSB0YXJnZXREZWx0YVtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1ldGFQcm9wID0gdGFyZ2V0TWV0YVByb3AgPyB0c2xpYl8xLl9fYXNzaWduKHt9LCB0YXJnZXRNZXRhUHJvcCkgOiB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREZWx0YVtrZXldID0gdGFyZ2V0TWV0YVByb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyc3QsIGp1c3QgY2hlY2sgaWYgdGFyZ2V0IG1ldGFQcm9wIGhhcyB7JGFkZDogWy4uLml0ZW1zXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBzbywgcmVtb3ZlIGFueSBlcXVhbCBpdGVtcyBmcm9tIHRoZXJlIGJlZm9yZSBtZXJnaW5nIHRoZSB7JHJlbW92ZTogWy4uLl19IGFycmF5cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0QWRkQXJyYXkgPSB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldEFkZEFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcC4kYWRkID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFkZEFycmF5LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gIXZhbHVlc1RvUmVtb3ZlXzIuaW5jbHVkZXModCk7IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0TWV0YVByb3AuJGFkZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmICRhZGQgYXJyYXkgYmVjYW1lIGVtdHB5LiBSZW1vdmUgdGhlICRhZGQgcHJvcC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRNZXRhUHJvcC4kYWRkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdyBpdCdzIHRpbWUgdG8gbWVyZ2Ugb3IgY3JlYXRlIHRhcmdldCAkcmVtb3ZlIGFycmF5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRSZW1vdmVBcnJheSA9IHRhcmdldE1ldGFQcm9wLiRyZW1vdmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0UmVtb3ZlQXJyYXkgPSB0YXJnZXRSZW1vdmVBcnJheSA/IHRhcmdldFJlbW92ZUFycmF5LmNvbmNhdCh2YWx1ZXNUb1JlbW92ZV8yKSA6IHZhbHVlc1RvUmVtb3ZlXzIuc2xpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlID0gdGFyZ2V0UmVtb3ZlQXJyYXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9hID0gMCwgbWV0YUluc3RydWN0aW9uc18yID0gbWV0YUluc3RydWN0aW9uczsgX2EgPCBtZXRhSW5zdHJ1Y3Rpb25zXzIubGVuZ3RoOyBfYSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtaSA9IG1ldGFJbnN0cnVjdGlvbnNfMltfYV07XG4gICAgICAgICAgICAgICAgICAgIF9sb29wXzIobWkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0YXJnZXREZWx0YVtrZXldID0gdmFsO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0RGVsdGE7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWx0YS1tZXJnZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgdXBkYXRlQXJyYXkgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMnO1xuaW1wb3J0IHsgYnJhbmNoU2Vuc2l0aXZlLCBnZXRUYWJsZUZyb21MYWJlbCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgYXBwbHlEZWx0YSB9IGZyb20gJy4vZGVsdGEtbWVyZ2UnO1xudmFyIEtlZEJhY2tlbmRRdWVyeSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kUXVlcnkodGFibGUsIHF1ZXJ5LCB1c2VyLCByZXBvLCBtdXRhdGlvblF1ZXVlKSB7XG4gICAgICAgIHRoaXMudGFibGUgPSB0YWJsZTtcbiAgICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5O1xuICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xuICAgICAgICB0aGlzLnJlcG8gPSByZXBvO1xuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgICAgIHRoaXMuZ290SW5pdGlhbFJlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaW52YWxpZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvYWRlZFZlcnNpb24gPSAwO1xuICAgICAgICB0aGlzLl9sb2FkUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5jbHVkZXMgPSBxdWVyeS5pbmNsdWRlID9cbiAgICAgICAgICAgIHR5cGVvZiBxdWVyeS5pbmNsdWRlID09PSAnc3RyaW5nJyA/XG4gICAgICAgICAgICAgICAgW3F1ZXJ5LmluY2x1ZGVdIDpcbiAgICAgICAgICAgICAgICBxdWVyeS5pbmNsdWRlIDpcbiAgICAgICAgICAgIFtdO1xuICAgIH1cbiAgICBLZWRCYWNrZW5kUXVlcnkucXVlcnlLZXkgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5KSB7XG4gICAgICAgIHZhciBtdXRhdGlvbnNPbkVtcHR5ID0gcXVlcnkubXV0YXRpb25zT25FbXB0eSwgY29tcGFyYWJsZVByb3BzID0gdHNsaWJfMS5fX3Jlc3QocXVlcnksIFtcIm11dGF0aW9uc09uRW1wdHlcIl0pO1xuICAgICAgICByZXR1cm4gdGFibGUgKyBKU09OLnN0cmluZ2lmeShjb21wYXJhYmxlUHJvcHMpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUsIFwicXVlcnlLZXlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBLZWRCYWNrZW5kUXVlcnkucXVlcnlLZXkodGhpcy50YWJsZSwgdGhpcy5xdWVyeSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBkYXRhLCBkYXRhO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5nb3RJbml0aWFsUmVzcG9uc2UgJiYgIXRoaXMuaW52YWxpZCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkKHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKSwgdHJ1ZSwgdGhpcy5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlTdWJzY3JpYmVyKGRhdGEsIHRoaXMuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLnF1ZXJ5TG9jYWxseSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlTdWJzY3JpYmVyKGRhdGEsIHRoaXMuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5sb2FkKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxvYWRQcm9taXNlO1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ290SW5pdGlhbFJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXV0YXRpb25zT25FbXB0eSBzaG91bGQgbmV2ZXIgYmUgdXNlZCB0d2ljZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5xdWVyeS5tdXRhdGlvbnNPbkVtcHR5O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoIXZlcnNpb24gJiYgdGhpcy5fbG9hZFByb21pc2UpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX2xvYWRQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiBcbiAgICAgICAgICAgICAgICAgICAgLy8gbG9hZGluZyBpcyBvbmdvaW5nLCBhbmQgY2FsbGVyIGRvZXMgbm90IHJlcXVpcmUgYSByZWNlbnQgcmVmcmVzaC5cbiAgICAgICAgICAgICAgICAgICAgLy8gd2FpdCBmb3IgdGhlIG9uZ29pbmcgbG9hZCB0byBjb21wbGV0ZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IHZlcnNpb24gfHwgdGhpcy5yZXBvLndyaXRlci5wZXJzaXN0ZWRWZXJzaW9uLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFByb21pc2UgPSB0aGlzLl9sb2FkUHJvbWlzZSA9IHRoaXMuX2xvYWQodmVyc2lvbikudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fbG9hZFByb21pc2UgPT09IGxvYWRQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2FkZWRWZXJzaW9uID0gTWF0aC5tYXgoX3RoaXMubG9hZGVkVmVyc2lvbiwgdmVyc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9sb2FkUHJvbWlzZSA9PT0gbG9hZFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9vbmUgaGFzIHJlZnJlc2hlZCBvdXIgbG9hZC4gVGhlIGVycm9yIGlzIHRoZSBmaW5hbCByZXN1bHQuIFNldCBpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX2xvYWRQcm9taXNlID09PSBsb2FkUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb29uZSBoYXMgcmVmcmVzaGVkIG91ciBsb2FkLiBXZSdyZSBmaW5pc2hlZC4gRGF0YSBvciBlcnJvciBpcyBhbHJlYWR5IHNldC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayBnb3RJbml0aWFsUmVzcG9uc2UgdG8gdHJ1ZSBhbmQgbm90aWZ5IHN1YnNjcmliZXJzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fbG9hZFByb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5nb3RJbml0aWFsUmVzcG9uc2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ub3RpZnlTdWJzY3JpYmVycyhfdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgbW9yZSByZWNlbnQgY2FsbCB0byBsb2FkKCkgaXMgb25nb2luZywgT1Igd2FzIG9uZ29pbmcgYnV0IHJlc3BvbmRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBiZWZvcmUgdXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIGFueSBjYXNlIHJldHVybiB0aGlzLl9sb2FkUHJvbWlzZS4gSWYgaXQncyBvbmdvaW5nIHdlJ2xsIHdhaXQgZm9yIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvIGZpbmlzaC4gSWYgaXQncyBudWxsLCB3ZSdsbCBiZSByZXR1cm5pbmcgZmluYWxseSBoZXJlIHdpdGhvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55IGFjdGlvbiwgYmVjYXVzZSB0aGUgYWN0aW9uIHdhcyB0YWtlbiBieSB0aGUgcmVmcmVzaGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX2xvYWRQcm9taXNlOyAvLyBXYWl0IGZvciB0aGUgcmVmcmVzaGVkIGxvYWQgdG8gY29tcGxldGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGxvYWRQcm9taXNlXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuX2xvYWQgPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm11dGF0aW9uUXVldWUuYWZmZWN0c1F1ZXJ5KHRoaXMudGFibGUsIHRoaXMucXVlcnksIHRoaXMuaW5jbHVkZXMpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBvdXRnb2luZyBtdXRhdGlvbnMgdGhhdCBhZmZlY3RzIHRoaXMgcXVlcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIHdhaXQgdGlsbCB0aGV5IHJlYWNoIHNlcnZlciBhbmQgc2VydmVyIHJlc3BvbmRzIHdpdGggT0sgYmVmb3JlIHF1ZXJ5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VydmVyLiBPdGhlcndpc2UsIHdlIG1heSBnZXQgaW5hY2N1cmF0ZSBkYXRhIGZyb20gc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZXBvLndyaXRlci53YWl0Rm9yVmVyc2lvblRvUGVyc2lzdCh2ZXJzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIGFyZSBvdXRnb2luZyBtdXRhdGlvbnMgdGhhdCBhZmZlY3RzIHRoaXMgcXVlcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIHdhaXQgdGlsbCB0aGV5IHJlYWNoIHNlcnZlciBhbmQgc2VydmVyIHJlc3BvbmRzIHdpdGggT0sgYmVmb3JlIHF1ZXJ5aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VydmVyLiBPdGhlcndpc2UsIHdlIG1heSBnZXQgaW5hY2N1cmF0ZSBkYXRhIGZyb20gc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucXVlcnlTZXJ2ZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gdGhpcy5zdWJzY3JpcHRpb25zLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcyAhPT0gc3Vic2NyaXB0aW9uOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuY29tbWl0TXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9ucywgdmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfaSwgbXV0YXRpb25zXzEsIG0sIGRhdGE7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pID0gMCwgbXV0YXRpb25zXzEgPSBtdXRhdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9pIDwgbXV0YXRpb25zXzEubGVuZ3RoKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XG4gICAgICAgICAgICAgICAgICAgICAgICBtID0gbXV0YXRpb25zXzFbX2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5vcCA9PT0gJ2NsZWFyLWJyYW5jaCcgJiYgKG0uYnJhbmNoSWQgPT09IHRoaXMucXVlcnkuYnJhbmNoSWQpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hPckludmFsaWRhdGUodmVyc2lvbildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG0ub3AgPT09ICdtZXJnZScgJiYgKCFtLnRhcmdldEJyYW5jaElkIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbS5icmFuY2hJZCA9PT0gdGhpcy5xdWVyeS5icmFuY2hJZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0udGFyZ2V0QnJhbmNoSWQgPT09IHRoaXMucXVlcnkuYnJhbmNoSWQpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hPckludmFsaWRhdGUodmVyc2lvbildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG0ub3AgPT09ICd1cGRhdGUnICYmICgobS5kZWx0YURvYy50YWdzICYmIHRoaXMucXVlcnkudGFncykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobS5kZWx0YURvYy5uYW1lICYmIHRoaXMucXVlcnkubmFtZSkpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBIHRhZyBtYXkgaGF2ZSBiZWVuIGFkZGVkLCBvciByZW5hbWVkLCBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBxdWVyeSBpcyBkZXBlbmRlbnQgb24gdGhlIHNhbWUgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcXVlcnkgbXVzdCBiZSByZWZyZXNoZWQgZnJvbSBzZXJ2ZXIgYXMgd2UgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21taXQgdGhlIG11dGF0aW9ucyBsb2NhbGx5IGFzIHdlIGRvbid0IGhhdmUgYWxsIGluZm8uXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hPckludmFsaWRhdGUodmVyc2lvbildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBIHRhZyBtYXkgaGF2ZSBiZWVuIGFkZGVkLCBvciByZW5hbWVkLCBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBxdWVyeSBpcyBkZXBlbmRlbnQgb24gdGhlIHNhbWUgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcXVlcnkgbXVzdCBiZSByZWZyZXNoZWQgZnJvbSBzZXJ2ZXIgYXMgd2UgY2Fubm90XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb21taXQgdGhlIG11dGF0aW9ucyBsb2NhbGx5IGFzIHdlIGRvbid0IGhhdmUgYWxsIGluZm8uXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pKys7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkKG11dGF0aW9ucywgZmFsc2UsIHRoaXMuZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA5O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLnJlZnJlc2hPckludmFsaWRhdGUgPSBmdW5jdGlvbiAodmVyc2lvbikge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aCA9PT0gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZCh2ZXJzaW9uKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5ub3RpZnlTdWJzY3JpYmVycyA9IGZ1bmN0aW9uIChvcHRpbWlzdGljTXV0YXRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5nb3RJbml0aWFsUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZhciBkYXRhXzEgPSB0aGlzLmdldERhdGFXaXRoTXV0YXRpb25zQXBwbGllZChvcHRpbWlzdGljTXV0YXRpb25zLCB0cnVlLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgICAgICBzLm5vdGlmeVN1YnNjcmliZXIoZGF0YV8xLCBfdGhpcy5lcnJvcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5xdWVyeUxvY2FsbHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcG8ucXVlcnlTZXQucXVlcnlMb2NhbGx5KHRoaXMudGFibGUsIHRoaXMucXVlcnksIHRoaXMuaW5jbHVkZXMpO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5xdWVyeVNlcnZlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlcG8uZ2V0Q2xpZW50KCkubGlzdCh0aGlzLnRhYmxlLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLnF1ZXJ5KSldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGRhdGFdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuZ2V0RGF0YVdpdGhNdXRhdGlvbnNBcHBsaWVkID0gZnVuY3Rpb24gKG11dGF0aW9ucywgb3B0aW1pc3RpYywgZGF0YSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHtcbiAgICAgICAgICAgIGRhdGEgPSBfdGhpcy5hcHBseU11dGF0aW9uc09uRGF0YShkYXRhLCBtdXRhdGlvbiwgb3B0aW1pc3RpYyk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuYXBwbHlNdXRhdGlvbnNPbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSwgbSwgb3B0aW1pc3RpYykge1xuICAgICAgICBpZiAoYnJhbmNoU2Vuc2l0aXZlKG0pICYmIG0uYnJhbmNoSWQgIT0gdGhpcy5xdWVyeS5icmFuY2hJZClcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCB0YWJsZSA9IF9hLnRhYmxlLCBpbmNsdWRlcyA9IF9hLmluY2x1ZGVzLCBsaXN0T3B0aW9ucyA9IF9hLnF1ZXJ5O1xuICAgICAgICB2YXIgc291cmNlSWRzID0gbGlzdE9wdGlvbnMuaGFzRWRnZXNGcm9tID8gW10uY29uY2F0KGxpc3RPcHRpb25zLmhhc0VkZ2VzRnJvbSB8fCBbXSkgOiBbXTtcbiAgICAgICAgdmFyIHJlcXVlc3RlZFRhZ3MgPSBsaXN0T3B0aW9ucy50YWdzID8gW10uY29uY2F0KGxpc3RPcHRpb25zLnRhZ3MgfHwgW10pIDogW107XG4gICAgICAgIHN3aXRjaCAobS5vcCkge1xuICAgICAgICAgICAgY2FzZSAndXBkYXRlJzoge1xuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkb2MuaWQgPT09IG0uaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IGRlbHRhIG9uIHVwZGF0ZWQgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkRG9jID0gYXBwbHlEZWx0YShkb2MsIG0uZGVsdGFEb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGltaXN0aWMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZERvYy4kbWV0YSA9ICd1cGRhdGluZyc7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlZERvYztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBpZCBkb2VzIG5vdCBhcHBseSB0byB0aGlzIGRvYywgc2VhcmNoIGluIGdyYXBocyB0aGUgaWQgaXMgZm91bmRcbiAgICAgICAgICAgICAgICAgICAgLy8gYW1vbmcgZ3JhcGggaW5jbHVkZWQgZG9jcywgYW5kIGlmIHNvLCB1cGRhdGUgdGhhdCBvbmU6XG4gICAgICAgICAgICAgICAgICAgIGluY2x1ZGVzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jbHVkZWREb2NzID0gZG9jW2xhYmVsXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlZERvY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZEFycmF5ID0gdXBkYXRlQXJyYXkoaW5jbHVkZWREb2NzLCBmdW5jdGlvbiAocmVsYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRlZC5pZCAhPT0gbS5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWxhdGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFJlbGF0ZWQgPSBhcHBseURlbHRhKHJlbGF0ZWQsIG0uZGVsdGFEb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW1pc3RpYylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRSZWxhdGVkLiRtZXRhID0gJ3VwZGF0aW5nJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRSZWxhdGVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVkQXJyYXkgIT09IGluY2x1ZGVkRG9jcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MsIChfYSA9IHt9LCBfYVtsYWJlbF0gPSB1cGRhdGVkQXJyYXksIF9hKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2FkZC1yZWxhdGVkJzpcbiAgICAgICAgICAgICAgICBpZiAodGFibGUgPT09IG0udGFibGUgJiYgaW5jbHVkZXMuaW5kZXhPZihtLmdyYXBoUHJvcCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGV4cHJlc3Npb24gaXMgYGRiLmNvdXJzZUJsb2Nrcy4uLi53aGF0ZXZlci4uIC5pbmNsdWRlKFwiYWJpbGl0aWVzXCIpYCwgZGV0ZWN0OiBkYi5jb3Vyc2VCbG9ja3MuYWRkUmVsYXRlZChibG9ja0lkLCAnYWJpbGl0aWVzJywgLi4uKVxuICAgICAgICAgICAgICAgICAgICAvLyAuLi5iZWNhdXNlIHRhYmxlID0gJ2NvdXJzZUJsb2NrcycgYW5kIGluY2x1ZGVzIGhhcyBcImFiaWxpdGllc1wiLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlQXJyYXkoZGF0YSwgZnVuY3Rpb24gKGRvYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvYy5pZCAhPT0gbS5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0ZWREb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBtLnJlbGF0ZWREb2MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGltaXN0aWMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZERvYy4kbWV0YSA9ICdhZGRpbmcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hc3NpZ24oe30sIGRvYywgKF9hID0ge30sIF9hW20uZ3JhcGhQcm9wXSA9IGRvY1ttLmdyYXBoUHJvcF0uY29uY2F0KFtyZWxhdGVkRG9jXSksIF9hKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGlzdE9wdGlvbnMuaGFzRWRnZXNGcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VJZHMuaW5jbHVkZXMobS5pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIGV4cHJlc3Npb24gaXM6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGBkYi5jb3Vyc2VCbG9ja3MuaGFzRWRnZXNGcm9tKFtjb3Vyc2VJZF0pYCAgKG1lYW5pbmcgdGFibGU9J2NvdXJzZUJsb2NrcycgYW5kIHNvdXJjZUlkcyBpbmNsdWRlcyBjb3Vyc2VJZClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICwgZGV0ZWN0OiBkYi5jb3Vyc2VJbnN0YW5jZXMuYWRkUmVsYXRlZChjb3Vyc2VJZCwgJ2NvdXJzZUJsb2NrcycsIC4uLi4pIC8vIG0uZ3JhcGhQcm9wID09PSAnYmxvY2tzJy0tPiBnZXRUYWJsZUZyb21MYWJlbCAtLT4gJ2NvdXJzZUJsb2NrcydcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZSA9PT0gZ2V0VGFibGVGcm9tTGFiZWwobS50YWJsZSwgbS5ncmFwaFByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsaXN0T3B0aW9ucy50YWdzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb25jYXQodGhpcy5zZXRHcmFwaFByb3BzKG0ucmVsYXRlZERvYykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLnJlbGF0ZWREb2MudGFncyAmJiByZXF1ZXN0ZWRUYWdzLnNvbWUoZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gbS5yZWxhdGVkRG9jLnRhZ3MuaW5jbHVkZXModGFnKTsgfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuY29uY2F0KHRoaXMuc2V0R3JhcGhQcm9wcyhtLnJlbGF0ZWREb2MpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGxpc3RPcHRpb25zLmlkcyAmJiBsaXN0T3B0aW9ucy5pZHMuc29tZShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIGlkID09PSBtLnJlbGF0ZWREb2MuaWQ7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgY2VydGFpbiBJRCBpcyBvYnNlcnZlZC4gQSBkb2Mgd2l0aCB0aGlzIGlkIGlzIGJlaW5nIGFkZGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGRvYyB0byB0aGUgcmVzdWx0LiBFeGFjdGx5IHRoaXMgV0lMTCBoYXBwZW4gaW4gdGhlIGZvbGxvd2luZyB0eXBpY2FsIHNjZW5hcmlvOlxuICAgICAgICAgICAgICAgICAgICAvLyAxLiBVc2VyIGFkZHMgYSByZWxhdGVkIGRvY3VtZW50IHRvIGEgbGlzdC5cbiAgICAgICAgICAgICAgICAgICAgLy8gMi4gRG9jdW1lbnQgcmVtYWlucyB3aXRoaW4gdGhlIE11dGF0aW9uUXVldWUgd2hpbGUgYmF0Y2gtcmVxdWVzdCBpcyBiZWluZyBwcm9jZXNzZWQgYnkgc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICAvLyAzLiBVc2VyIGNsaWNrcyB0aGUgYWRkZWQgaXRlbSB0byBlZGl0IG9yIHZpZXcgaXQgKG9yIG91ciBjb21wb25lbnQgcmVkaXJlY3RzIHRvIGl0cyBlZGl0b3IpXG4gICAgICAgICAgICAgICAgICAgIC8vIDQuIEEgbmV3IHF1ZXJ5IG9mIHRoYXQgcGFydGljdWxhciBJRCBpcyBzdWJzY3JpYmVkIHRvIHtpZHM9W3RoZUlkXX1cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgS2VkQmFja2VuZFF1ZXJ5LnN1YnNjcmliZSB0aGVuIGRvZXMgdGhpczpcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAxLiBDYWxsIHF1ZXJ5TG9jYWxseSgpIGJlZm9yZSBxdWVyeWluZyBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAyLiBxdWVyeUxvY2FsbHkoKSBpbnNwZWN0cyBtdXRhdGlvbnMgYW5kIGZpbmRzIGEgbWF0Y2gsIHJldHVybmluZyBhbiBlbXB0eSBsaXN0XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgKGFzc3VtZXMgYXMgd2UgYXJlIGFkZGluZyBpdCwgaXQgY2FuJ3QgZXhpc3Qgb24gdGhlIHNlcnZlciBhbnl3YXkpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgMy4gS2VkQmFja2VuZFFVZXJ5IGFwcGxpZXMgbXV0YXRpb25zIG9udG8gdGhlIGVtcHR5IGxpc3QsIGFuZCBlbmRzIHVwIGhlcmUgdG8gYWRkXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgaXQgb3B0aW1pc3RpY2FsbHkuXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgNC4gV2hlbiBzZXJ2ZXIgcmVzcG9uZHMgd2l0aCAyMDAgT0ssIGNhbGxzIHVzIGhlcmUgYWdhaW4gd2l0aCBvcHRpbWlzdGljPWZhbHNlXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgdG8gXCJwZXJzaXN0XCIgaXQgaW4gdGhlIHF1ZXJ5J3MgZGF0YSBhcnJheS5cbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICA0QjogSWYgbm90IDIwMCBPSywgbXV0YXRpb24gbWF5IGJlIGdvbmUgYW5kIHRoZSBzdWJzY3JpYmVyIHdpbGwgc2UgYW4gZXJyb3IgcGFnZVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIFwiQ291bGQgbm90IGZpbmQgZW50aXR5IHdpdGggaWQgWC5cIiBhbG9uZyB3aXRoIGEgcmVkIGVycm9yIG1lc3NhZ2Ugb24gdGhlIHNjcmVlblxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGFib3V0IHRoYXQgaXQgZmFpbGVkIHRvIHNhdmUgb24gc2VydmVyLlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5jb25jYXQodGhpcy5zZXRHcmFwaFByb3BzKG0ucmVsYXRlZERvYykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIGNhc2UgJ3JlbW92ZS1yZWxhdGVkJzpcbiAgICAgICAgICAgICAgICBpZiAodGFibGUgPT09IG0udGFibGUgJiYgaW5jbHVkZXMuaW5kZXhPZihtLmdyYXBoUHJvcCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jbHVkZWREb2NzID0gZG9jW20uZ3JhcGhQcm9wXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZWREb2NzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jLmlkICE9PSBtLmlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb2M7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZG9jLCAoX2EgPSB7fSwgX2FbbS5ncmFwaFByb3BdID0gb3B0aW1pc3RpYyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayByZWxhdGVkLWRvYy10by1yZW1vdmUgd2l0aCAkbWV0YTogJ2RlbGV0aW5nJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVkRG9jcy5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgIT09IG0ucmVsYXRlZElkID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA6IHRzbGliXzEuX19hc3NpZ24oe30sIGQsIHsgJG1ldGE6ICdkZWxldGluZycgfSk7IH0pIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgcmVsYXRlZC1kb2MtdG8tcmVtb3ZlIGZyb20gZG9jW2dyYXBQcm9wXTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlZERvY3MuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmlkICE9PSBtLnJlbGF0ZWRJZDsgfSksIF9hKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobGlzdE9wdGlvbnMuaGFzRWRnZXNGcm9tKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2VJZHMuaW5jbHVkZXMobS5pZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW1pc3RpYyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXAoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgPT09IG0ucmVsYXRlZElkID8gdHNsaWJfMS5fX2Fzc2lnbih7fSwgZCwgeyAkbWV0YTogJ2RlbGV0aW5nJyB9KSA6IGQ7IH0pIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCAhPT0gbS5yZWxhdGVkSWQ7IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlID09PSBtLnRhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCAhPT0gbS5pZDsgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpc3RPcHRpb25zLmluY2x1ZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluY2x1ZGVkVGFibGVzID0gaW5jbHVkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiAoeyBsYWJlbDogbGFiZWwsIHRhYmxlOiBnZXRUYWJsZUZyb21MYWJlbCh0YWJsZSwgbGFiZWwpIH0pOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsc18xID0gaW5jbHVkZWRUYWJsZXMuZmlsdGVyKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gX2EudGFibGU7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUgPT09IG0udGFibGU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFiZWxzXzEubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUFycmF5KGRhdGEsIGZ1bmN0aW9uIChkb2MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbHNfMS5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBfYS5sYWJlbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9iO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVsYXRlZERvY3MgPSBkb2NbbGFiZWxdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVsYXRlZERvY3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRvYywgKF9iID0ge30sIF9iW2xhYmVsXSA9IG9wdGltaXN0aWMgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWREb2NzLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCA9PT0gbS5pZCA/IHRzbGliXzEuX19hc3NpZ24oe30sIGQsIHsgJG1ldGE6ICdkZWxldGluZycgfSkgOiBkOyB9KSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZERvY3MuZmlsdGVyKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWQgPSBfYS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkICE9PSBtLmlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBfYikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5zZXRHcmFwaFByb3BzID0gZnVuY3Rpb24gKGRvYykge1xuICAgICAgICB2YXIgY29weSA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRvYyk7XG4gICAgICAgIHRoaXMuaW5jbHVkZXMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHsgcmV0dXJuIGNvcHlbbGFiZWxdID0gY29weVtsYWJlbF0gfHwgW107IH0pO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9O1xuICAgIHJldHVybiBLZWRCYWNrZW5kUXVlcnk7XG59KCkpO1xuZXhwb3J0IHsgS2VkQmFja2VuZFF1ZXJ5IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLXF1ZXJ5LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBCYXRjaFJ1bm5lciB9IGZyb20gJy4uL2tlZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4va2VkYmFja2VuZC1zdWJzY3JpcHRpb25cIjtcbmltcG9ydCB7IENhY2hlQnVzdCB9IGZyb20gJy4vY2FjaGUtYnVzdCc7XG5pbXBvcnQgeyBLZWRCYWNrZW5kUXVlcnkgfSBmcm9tICcuL2tlZGJhY2tlbmQtcXVlcnknO1xuaW1wb3J0IHsgQ29sbGVjdGlvbiB9IGZyb20gJy4uL29ic2VydmFibGUvY29sbGVjdGlvbic7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBcImxpdmVcIiBxdWVyeSBhZ2FpbnN0IGEgdGFibGUgb3IgZmlsdGVyZWQgdGFibGUuXG4gKi9cbnZhciBLZWRCYWNrZW5kQ29sbGVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhLZWRCYWNrZW5kQ29sbGVjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kQ29sbGVjdGlvbihyZXBvLCB0YWJsZSwgcXVlcnkpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IEtlZEJhY2tlbmRTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIF90aGlzKTtcbiAgICAgICAgICAgIF90aGlzLnJlcG8ucXVlcnlTZXQuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yZXBvID0gcmVwbztcbiAgICAgICAgX3RoaXMudGFibGUgPSB0YWJsZTtcbiAgICAgICAgX3RoaXMucXVlcnkgPSBxdWVyeTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLCBcInF1ZXJ5S2V5XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gS2VkQmFja2VuZFF1ZXJ5LnF1ZXJ5S2V5KHRoaXMudGFibGUsIHRoaXMucXVlcnkpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLCBcImluY2x1ZGVzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faW5jbHVkZXMgfHwgKHRoaXMuX2luY2x1ZGVzID0gW10uY29uY2F0KHRoaXMucXVlcnkuaW5jbHVkZSB8fCBbXSkpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuYXBwbHlRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkge1xuICAgICAgICByZXR1cm4gbmV3IEtlZEJhY2tlbmRDb2xsZWN0aW9uKHRoaXMucmVwbywgdGhpcy50YWJsZSwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5xdWVyeSwgcXVlcnkpKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRUb1F1ZXJ5QXJyYXlQcm9wID0gZnVuY3Rpb24gKGFycmF5UHJvcCwgZW50cmllcykge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoKF9hID0ge30sIF9hW2FycmF5UHJvcF0gPSAodGhpcy5xdWVyeVthcnJheVByb3BdIHx8IFtdKS5jb25jYXQoZW50cmllcyksIF9hKSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkRmxhZ3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmbGFncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgZmxhZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiZmxhZ3NcIiwgZmxhZ3MpO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmRlYnVnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgZGVidWc6IHRydWUgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaWRzT25seSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpZHNPbmx5XCIpO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmlkc0FuZE5hbWVzT25seSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpZHNBbmROYW1lc09ubHlcIik7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaW5jbHVkZUlkc09ubHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkZEZsYWdzKFwiaW5jbHVkZUlkc09ubHlcIik7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaW5jbHVkZUlkc0FuZE5hbWVzT25seSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpbmNsdWRlSWRzQW5kTmFtZXNPbmx5XCIpO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmJldHdlZW4gPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGZyb206IGZyb20sIHRvOiB0byB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5yb2xlID0gZnVuY3Rpb24gKHJvbGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IHJvbGU6IHJvbGUgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaGFzRWRnZXNGcm9tID0gZnVuY3Rpb24gKGlkcywgb3B0aW9ucykge1xuICAgICAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCB8fCBpZHMuc29tZShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICFpZDsgfSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlkIGxpc3QgZ2l2ZW4gdG8gQ29sbGVjdGlvbi5oYXNFZGdlc0Zyb20oXCIgKyBKU09OLnN0cmluZ2lmeShpZHMpICsgXCIpXCIpO1xuICAgICAgICB2YXIgaGVmID0gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiaGFzRWRnZXNGcm9tXCIsIGlkcyk7XG4gICAgICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZURlbHRhRWRnZXMgP1xuICAgICAgICAgICAgaGVmLmFkZEZsYWdzKFwiaW5jbHVkZURlbHRhRWRnZXNcIikgOlxuICAgICAgICAgICAgaGVmO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmhhc0VkZ2VzVG8gPSBmdW5jdGlvbiAoaWRzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChpZHMubGVuZ3RoID09PSAwIHx8IGlkcy5zb21lKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gIWlkOyB9KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaWQgbGlzdCBnaXZlbiB0byBDb2xsZWN0aW9uLmhhc0VkZ2VzVG8oXCIgKyBKU09OLnN0cmluZ2lmeShpZHMpICsgXCIpXCIpO1xuICAgICAgICB2YXIgaGV0ID0gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiaGFzRWRnZXNUb1wiLCBpZHMpO1xuICAgICAgICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGVEZWx0YUVkZ2VzID9cbiAgICAgICAgICAgIGhldC5hZGRGbGFncyhcImluY2x1ZGVEZWx0YUVkZ2VzXCIpIDpcbiAgICAgICAgICAgIGhldDtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5pZCA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgaWRzOiBbaWRdIH0pLnNpbmdsZSh7XG4gICAgICAgICAgICBvblplcm86IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgZW50aXR5IGluIFwiICsgX3RoaXMudGFibGUgKyBcIiB3aXRoIGlkIFwiICsgaWQpOyB9LFxuICAgICAgICAgICAgb25NYW55OiBmdW5jdGlvbiAoKSB7IHRocm93IG5ldyBFcnJvcihcIk11bHRpcGxlIGVudHJpZXMgaW4gXCIgKyBfdGhpcy50YWJsZSArIFwiIHdpdGggaWQgXCIgKyBpZCk7IH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmlkcyA9IGZ1bmN0aW9uIChpZHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGlkczogaWRzIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLm5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgbmFtZTogbmFtZSB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS50YWdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGFncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdGFnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyB0YWdzOiB0YWdzIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmJyYW5jaElkID0gZnVuY3Rpb24gKGJyYW5jaElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaW5jbHVkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGdyYXBocyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgZ3JhcGhzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkVG9RdWVyeUFycmF5UHJvcChcImluY2x1ZGVcIiwgZ3JhcGhzKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5jYWNoZU9wdGltaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGNhY2hlQnVzdDogQ2FjaGVCdXN0LmdldENhY2hlQnVzdCh0aGlzLnRhYmxlLCB0aGlzLnF1ZXJ5LCB0aGlzLnJlcG8uZ2V0VXNlcigpLCB0aGlzLmluY2x1ZGVzKSB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5tdXRhdGlvbnNPbkVtcHR5ID0gZnVuY3Rpb24gKG11dGF0aW9uRmFjdG9yeSkge1xuICAgICAgICB2YXIgdHggPSBuZXcgQmF0Y2hSdW5uZXIoKTtcbiAgICAgICAgbXV0YXRpb25GYWN0b3J5KHR4KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IG11dGF0aW9uc09uRW1wdHk6IHR4Lm11dGF0aW9uUmVxdWVzdHMgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuc2luZ2xlID0gZnVuY3Rpb24gKHRocm93ZXJzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHRocm93ZXJzIHx8IHt9LCBvblplcm8gPSBfYS5vblplcm8sIG9uTWFueSA9IF9hLm9uTWFueTtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9WYWx1ZSgpLm1hcChmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAob25aZXJvKVxuICAgICAgICAgICAgICAgICAgICBvblplcm8oKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNpbmdsZSBpdGVtIG9mIFwiICsgX3RoaXMudGFibGUgKyBcIiBleHBlY3RlZCB0byBiZSByZXR1cm5lZCBieSBxdWVyeSBcIiArIEpTT04uc3RyaW5naWZ5KF90aGlzLnF1ZXJ5KSArIFwiIGJ1dCBub25lIHdhcyBmb3VuZC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGRlYnVnZ2VyO1xuICAgICAgICAgICAgICAgIGlmIChvbk1hbnkpXG4gICAgICAgICAgICAgICAgICAgIG9uTWFueSgpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTaW5nbGUgaXRlbSBvZiBcIiArIF90aGlzLnRhYmxlICsgXCIgZXhwZWN0ZWQgdG8gYmUgcmV0dXJuZWQgYnkgcXVlcnkgXCIgKyBKU09OLnN0cmluZ2lmeShfdGhpcy5xdWVyeSkgKyBcIiBidXQgXCIgKyBpdGVtcy5sZW5ndGggKyBcIiB3YXMgZm91bmQuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zWzBdO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qY29tYmluZUxhdGVzdDxUT3RoZXI+KG90aGVyOiBRdWVyeU9ic2VydmFibGU8VE90aGVyPikge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKHggPT4geCkuY29tYmluZUxhdGVzdChvdGhlcik7XG4gICAgfSovXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIChpZCwgY2hhbmdlcywgZGVib3VuY2UpIHtcbiAgICAgICAgaWYgKGRlYm91bmNlID09PSB2b2lkIDApIHsgZGVib3VuY2UgPSAxMDAwOyB9XG4gICAgICAgIHRoaXMucmVwby53cml0ZXIubXV0YXRlKFt7XG4gICAgICAgICAgICAgICAgb3A6ICd1cGRhdGUnLFxuICAgICAgICAgICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxuICAgICAgICAgICAgICAgIGJyYW5jaElkOiB0aGlzLnF1ZXJ5LmJyYW5jaElkLFxuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBkZWx0YURvYzogY2hhbmdlc1xuICAgICAgICAgICAgfV0sIGRlYm91bmNlKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRSZWxhdGVkID0gZnVuY3Rpb24gKGlkLCBsYWJlbCwgcmVsYXRlZERvYykge1xuICAgICAgICB0aGlzLnJlcG8ud3JpdGVyLm11dGF0ZShbe1xuICAgICAgICAgICAgICAgIG9wOiAnYWRkLXJlbGF0ZWQnLFxuICAgICAgICAgICAgICAgIHRhYmxlOiB0aGlzLnRhYmxlLFxuICAgICAgICAgICAgICAgIGJyYW5jaElkOiB0aGlzLnF1ZXJ5LmJyYW5jaElkLFxuICAgICAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgICAgICBncmFwaFByb3A6IGxhYmVsLFxuICAgICAgICAgICAgICAgIHJlbGF0ZWREb2M6IHJlbGF0ZWREb2NcbiAgICAgICAgICAgIH1dLCAwKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVSZWxhdGVkID0gZnVuY3Rpb24gKGlkLCBsYWJlbCwgcmVsYXRlZElkKSB7XG4gICAgICAgIHRoaXMucmVwby53cml0ZXIubXV0YXRlKFt7XG4gICAgICAgICAgICAgICAgb3A6ICdyZW1vdmUtcmVsYXRlZCcsXG4gICAgICAgICAgICAgICAgdGFibGU6IHRoaXMudGFibGUsXG4gICAgICAgICAgICAgICAgYnJhbmNoSWQ6IHRoaXMucXVlcnkuYnJhbmNoSWQsXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGdyYXBoUHJvcDogbGFiZWwsXG4gICAgICAgICAgICAgICAgcmVsYXRlZElkOiByZWxhdGVkSWRcbiAgICAgICAgICAgIH1dLCAwKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBpZHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGlkc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVwby53cml0ZXIubXV0YXRlKGlkcy5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgb3A6ICdkZWxldGUnLFxuICAgICAgICAgICAgdGFibGU6IF90aGlzLnRhYmxlLFxuICAgICAgICAgICAgaWQ6IGlkXG4gICAgICAgIH0pOyB9KSwgMCk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHRoaXMucmVwby5xdWVyeVNldC51bnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xuICAgIH07XG4gICAgcmV0dXJuIEtlZEJhY2tlbmRDb2xsZWN0aW9uO1xufShDb2xsZWN0aW9uKSk7XG5leHBvcnQgeyBLZWRCYWNrZW5kQ29sbGVjdGlvbiB9O1xuLyptaXhpbihcbiAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLFxuICBNYXBwZWRDb2xsZWN0aW9uLnByb3RvdHlwZSxcbiAgXCJtYXBcIiwgXCJmbGF0XCIsIFwiY29uY2F0XCIsIFwicmVuZGVyXCIsIFwibG9hZFwiKTsqL1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkYmFja2VuZC1jb2xsZWN0aW9uLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBLZWRCYWNrZW5kUXVlcnkgfSBmcm9tICcuL2tlZGJhY2tlbmQtcXVlcnknO1xuaW1wb3J0ICogYXMgSnNvblNjaGVtYSBmcm9tICdrZWRiYWNrZW5kLXNjaGVtYS9zY2hlbWEuanNvbic7XG5pbXBvcnQgeyBxdWVyeUFycmF5IH0gZnJvbSAnLi91dGlscyc7XG52YXIgUXVlcnlTZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUXVlcnlTZXQobXV0YXRpb25RdWV1ZSkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBbXTtcbiAgICB9XG4gICAgUXVlcnlTZXQucHJvdG90eXBlLmNvbW1pdE11dGF0aW9ucyA9IGZ1bmN0aW9uIChtdXRhdGlvbnMsIHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwodGhpcy5xdWVyaWVzLm1hcChmdW5jdGlvbiAocSkgeyByZXR1cm4gcS5jb21taXRNdXRhdGlvbnMobXV0YXRpb25zLCB2ZXJzaW9uKTsgfSkpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwSW52YWxpZFF1ZXJpZXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBRdWVyeVNldC5wcm90b3R5cGUuY2xlYW51cEludmFsaWRRdWVyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnF1ZXJpZXMgPSB0aGlzLnF1ZXJpZXMuZmlsdGVyKGZ1bmN0aW9uIChxKSB7XG4gICAgICAgICAgICBpZiAocS5pbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHEudGltZW91dEhhbmRsZSkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQocS50aW1lb3V0SGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgcS50aW1lb3V0SGFuZGxlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUXVlcnlTZXQucHJvdG90eXBlLm5vdGlmeVN1YnNjcmliZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW1pc3RpY011dGF0aW9ucyA9IHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKTtcbiAgICAgICAgdGhpcy5xdWVyaWVzLmZvckVhY2goZnVuY3Rpb24gKHEpIHtcbiAgICAgICAgICAgIHEubm90aWZ5U3Vic2NyaWJlcnMob3B0aW1pc3RpY011dGF0aW9ucyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUXVlcnlTZXQucHJvdG90eXBlLmZpbmRRdWVyeSA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucXVlcmllcy5maW5kKGZ1bmN0aW9uIChxKSB7IHJldHVybiBxLnF1ZXJ5S2V5ID09PSBLZWRCYWNrZW5kUXVlcnkucXVlcnlLZXkodGFibGUsIHF1ZXJ5KTsgfSk7XG4gICAgfTtcbiAgICBRdWVyeVNldC5wcm90b3R5cGUucXVlcnlMb2NhbGx5ID0gZnVuY3Rpb24gKHRhYmxlLCBxdWVyeSwgaW5jbHVkZXMpIHtcbiAgICAgICAgLy8gRm9yIG5vdywgb25seSBoYW5kbGUgdGhpcyB2ZXJ5IGNvbW1vbiBhbmQgc3BlY2lhbCBjYXNlICh3aGljaFxuICAgICAgICAvLyB3aWxsIHNhdmUgYSBsb3Qgb2YgdW5uZXNjZXNzYXJ5IG5ldHdvcmsgdHJhZmZpYyBpZiBJIGFtIHRoaW5raW5nIHJpZ2h0Li4uKVxuICAgICAgICB2YXIgbXV0YXRpb25zID0gdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpO1xuICAgICAgICAvLyBDaGVjayBpZiB0aGUgcXVlcnkgd2FudHMgdG8gZ2V0IGEgc2luZ2xlIGVudGl0eSBieSBpdHMgSUQ6XG4gICAgICAgIGlmIChxdWVyeS5pZHMgJiYgcXVlcnkuaWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgLy8gQW5kIGlmIHNvLCBpZiB3ZSBoYXZlIGFuIG91dGdvaW5nIG11dGF0aW9uIHRvIGNyZWF0ZSB0aGF0IGVudGl0eTpcbiAgICAgICAgICAgIGlmIChtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5vcCA9PT0gJ2FkZC1yZWxhdGVkJyAmJiBtLnJlbGF0ZWREb2MuaWQgPT09IHF1ZXJ5Lmlkc1swXTsgfSkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaGVuIHJldHVybiBhbiBFTVBUWSByZXNwb25zZSwgc2lnbmFsbGluZyB0aGF0IHdlIGNhbiByZXNvbHZlIHRoaXMgbG9jYWxseSxcbiAgICAgICAgICAgICAgICAvLyBidXQgbGV0IHRoZSBvcHRpc3RpYyBmZWF0dXJlIG9mIEtlZEJhY2tlbmRRdWVyeSBhcHBseSB0aGUgbXV0YXRpb24gYmVmb3JlXG4gICAgICAgICAgICAgICAgLy8gbm90aWZ5aW5nIHN1YnNjcmliZXJzICh3ZSBkb24ndCB3YW50IGl0IHRvIGJlIHBlcnNpc3RlbnQgYmVmb3JlIHRoZSBzZXJ2ZXJcbiAgICAgICAgICAgICAgICAvLyBoYXMgYWNjZXB0ZWQgdGhlIG11dGF0aW9uKVxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBPSywgYW5vdGhlciBxdWl0ZSBjb21tb24gY2FzZSBpcyB3aGVuIHdlIGFzayBmb3IgYSBjZXJ0YWluIElEIGFuZCB0aGF0IElEIHJlcGxpZXNcbiAgICAgICAgLy8gd2l0aGluIGFub3RoZXIgcXVlcnlcbiAgICAgICAgaWYgKHF1ZXJ5Lmhhc0VkZ2VzRnJvbSB8fCBxdWVyeS5oYXNFZGdlc1RvKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIE5vdCBwb3NzaWJsZSB0byBoYW5kbGVcbiAgICAgICAgaWYgKCFxdWVyeS5pZHMpXG4gICAgICAgICAgICByZXR1cm4gbnVsbDsgLy8gRm9yIG5vdywganVzdCB0YWtlIGhpZ2h0IGZvciB0aGlzIHBhcnRpY3VsYXIgYW5kIG1vc3QgY29tbW9uIGNhc2UhXG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHEpIHtcbiAgICAgICAgICAgIGlmICghcS5nb3RJbml0aWFsUmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICAgICAgICAgIGlmIChxLnF1ZXJ5LmJyYW5jaElkICE9PSBxdWVyeS5icmFuY2hJZClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICAgICAgaWYgKHEucXVlcnkuZmxhZ3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjsgLy8gSXQgd291bGQgYmUgY29tcGxleCB0byBzdXBwb3J0IHZhcmlvdXMgZmxhZ3MuIFF1ZXJ5J3MgZGF0YSBtYXkgaW5jbHVkZSBpZHMgb25seS4gQ2FuJ3QgcmVseSBvbiB0aGUgcXVlcnkuXG4gICAgICAgICAgICB2YXIgcUluY2x1ZGVzID0gcS5pbmNsdWRlcztcbiAgICAgICAgICAgIGlmIChxSW5jbHVkZXMubGVuZ3RoID4gMCAmJiAoIXF1ZXJ5LmluY2x1ZGUgfHwgcXVlcnkuaW5jbHVkZS5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgaW5jbHVkZSwgYnV0IHRoaXMgcXVlcnkgZG9lcy4gQ2hlY2sgaWYgd2UgY2FuIGZpbmQgb3VyIHJlc3VsdCB3aXRoaW4gaXQuXG4gICAgICAgICAgICAgICAgdmFyIGxhYmVsID0gcUluY2x1ZGVzLmZpbmQoZnVuY3Rpb24gKGwpIHsgcmV0dXJuIEpzb25TY2hlbWEudGFibGVzW3EudGFibGVdW1wicmVsYXRpb25zaGlwc1wiXVtsXSA9PT0gdGFibGU7IH0pO1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzXzEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHEuZGF0YTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbnRpdHkgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViRGF0YSA9IHF1ZXJ5QXJyYXkocXVlcnksIGVudGl0eVtsYWJlbF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ViRGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IHJldHVybiByZXNfMVtyLmlkXSA9IHI7IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRfMSA9IE9iamVjdC5rZXlzKHJlc18xKS5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiByZXNfMVtpZF07IH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyBPbmx5IHJldHVybiByZXN1bHQgaWYgd2UgY291bGQgbG9vayB1cCBldmVyeSByZXF1ZXN0ZWQgSUQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghcXVlcnkuaWRzLmV2ZXJ5KGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gcmVzdWx0XzEuc29tZShmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5pZCA9PT0gaWQ7IH0pOyB9KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiByZXN1bHRfMSB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaW5jbHVkZXMuZXZlcnkoZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiBxSW5jbHVkZXMuaW5jbHVkZXMobGFiZWwpOyB9KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICAgICAgLy8gTGFzdGx5LCBpZiB0aGUgcXVlcnkgaW5jbHVkZXMgYWxsIGdyYXBocyB0aGF0IHdlIGRvLCBwaWNrIHRoZSBzdWJzZXQgZnJvbSB0aGF0IHF1ZXJ5LlxuICAgICAgICAgICAgLy8gQ29uY3JldGUgZXhhbXBsZTogV2Ugb2JzZXJ2ZSBhIGNlcnRhaW4gVGFzayBieSBJRCBhbmQgd2FudCBpdHMga25vd2xlZGdlUmVxdWlyZW1lbnRzIGFsb25nIHdpdGggaXQsXG4gICAgICAgICAgICAvLyBhbmQgdGhlcmUncyBhbm90aGVyIHF1ZXJ5IG9mIGFsbCB0YXNrcyB0aGF0IGFsc28gaW5jbHVkZXMga25vd2xlZGdlUmVxdWlyZW1lbnRzLiBVc2UgaXQuIFxuICAgICAgICAgICAgaWYgKHEudGFibGUgPT09IHRhYmxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdF8yID0gcXVlcnlBcnJheShxdWVyeSwgcS5kYXRhKTtcbiAgICAgICAgICAgICAgICAvLyBPbmx5IHJldHVybiByZXN1bHQgaWYgd2UgY291bGQgbG9vayB1cCBldmVyeSByZXF1ZXN0ZWQgSUQ6XG4gICAgICAgICAgICAgICAgaWYgKCFxdWVyeS5pZHMuZXZlcnkoZnVuY3Rpb24gKGlkKSB7IHJldHVybiByZXN1bHRfMi5zb21lKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmlkID09PSBpZDsgfSk7IH0pKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiByZXN1bHRfMiB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5xdWVyaWVzOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHEgPSBfYVtfaV07XG4gICAgICAgICAgICB2YXIgc3RhdGVfMSA9IF9sb29wXzEocSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHN0YXRlXzEgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlXzEudmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHZhciBfYSA9IHN1YnNjcmlwdGlvbi5jb2xsZWN0aW9uLCB0YWJsZSA9IF9hLnRhYmxlLCBxdWVyeSA9IF9hLnF1ZXJ5LCByZXBvID0gX2EucmVwbztcbiAgICAgICAgdmFyIGtiUXVlcnkgPSB0aGlzLmZpbmRRdWVyeSh0YWJsZSwgcXVlcnkpO1xuICAgICAgICBpZiAoIWtiUXVlcnkpIHtcbiAgICAgICAgICAgIGtiUXVlcnkgPSBuZXcgS2VkQmFja2VuZFF1ZXJ5KHRhYmxlLCBxdWVyeSwgcmVwby5nZXRVc2VyKCksIHJlcG8sIHRoaXMubXV0YXRpb25RdWV1ZSk7XG4gICAgICAgICAgICB0aGlzLnF1ZXJpZXMucHVzaChrYlF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChrYlF1ZXJ5LnRpbWVvdXRIYW5kbGUpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoa2JRdWVyeS50aW1lb3V0SGFuZGxlKTtcbiAgICAgICAgICAgICAgICBrYlF1ZXJ5LnRpbWVvdXRIYW5kbGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGtiUXVlcnkuc3Vic2NyaWJlKHN1YnNjcmlwdGlvbik7XG4gICAgfTtcbiAgICBRdWVyeVNldC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYSA9IHN1YnNjcmlwdGlvbi5jb2xsZWN0aW9uLCB0YWJsZSA9IF9hLnRhYmxlLCBxdWVyeSA9IF9hLnF1ZXJ5LCByZXBvID0gX2EucmVwbztcbiAgICAgICAgdmFyIGtiUXVlcnkgPSB0aGlzLmZpbmRRdWVyeSh0YWJsZSwgcXVlcnkpO1xuICAgICAgICBpZiAoa2JRdWVyeSkge1xuICAgICAgICAgICAgLy8gUHJvaGliaXQgZnVydGhlciBub3RpZmljYXRpb25zIHRvIHRoaXMgc3Vic2NyaXB0aW9uOlxuICAgICAgICAgICAga2JRdWVyeS51bnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgLy8gUmVsZWFzZSB1bm5lc2Nlc3NhcnkgbWVtb3J5IHdoZW4gdGhlcmUgYXJlIG5vIG1vcmUgc3Vic2NyaXB0aW9ucyBvZiB0aGlzIHF1ZXJ5LCBieSByZW1vdmluZyB0aGUgcXVlcnkgaXRzZWxmXG4gICAgICAgICAgICAvLyBUbyB0aGF0IGluIGEgZGVsYXllZCBtYW5uZXIsIHNvIHRoYXQgYW4gdW5zdWJzY3JpYmUoKSBmb2xsb3dlZCBieSBhbiBpbW1lZGlhdGUgc3Vic2NyaWJlKCkgZG9uJ3QgaGF2ZSB0byByZS1xdWVyeSB0aGUgc2VydmVyOlxuICAgICAgICAgICAgaWYgKGtiUXVlcnkuc3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBTY2hlZHVsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uIGluIDUgbWludXRlczpcbiAgICAgICAgICAgICAgICBrYlF1ZXJ5LnRpbWVvdXRIYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYga2JRdWVyeSBzdGlsbCBoYXMgbm8gc3Vic2NyaXB0aW9ucyAobm90IGNlcnRhaW4hIEEgbmV3IHN1YnNjcmliZXIgbWF5IGhhdmUgY29tZSBhbG9uZy4uLilcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtiUXVlcnkuc3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0aWxsIG5vIHN1YnNjcmlwdGlvbnMgb24gaXQsIHRpbWUgdG8gcmVsZWFzZSBzb21lIG1lbW9yeSBhbmQgZm9yZ2V0IHRoZSBpbi1tZW1vcnkgY2FjaGUgb2YgdGhlIHF1ZXJ5IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucXVlcmllcyA9IF90aGlzLnF1ZXJpZXMuZmlsdGVyKGZ1bmN0aW9uIChxKSB7IHJldHVybiBxICE9PSBrYlF1ZXJ5OyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRoaXMucXVlcmllcy5sZW5ndGggPiA1MCA/XG4gICAgICAgICAgICAgICAgICAgIDUwMCA6IC8vIERvbid0IGhvc3QgdG9vIG1hbnkgcXVlcmllcy4gR2FyYmFnZSBjb2xsZWN0IHRoaXMgd2l0aGluIDUwMCBtc1xuICAgICAgICAgICAgICAgICAgICA1ICogNjAwMDApOyAvLyBBbGxvdyBxdWVyeSBpbiBtZW1vcnkgZm9yIGFub3RoZXIgNSBtaW51dGVzXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBRdWVyeVNldDtcbn0oKSk7XG5leHBvcnQgeyBRdWVyeVNldCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktc2V0LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBnZXRUYWJsZUZyb21MYWJlbCwgYnJhbmNoU2Vuc2l0aXZlLCBnbG9iYWxPcCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgbWVyZ2VEZWx0YXMgfSBmcm9tICcuL2RlbHRhLW1lcmdlJztcbnZhciBNdXRhdGlvblF1ZXVlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE11dGF0aW9uUXVldWUoKSB7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5zYXZpbmdRdWV1ZSA9IFtdO1xuICAgIH1cbiAgICBNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobXV0YXRpb25zKSB7XG4gICAgICAgIHRoaXMucXVldWUgPSBNdXRhdGlvblF1ZXVlLm1lcmdlKHRoaXMucXVldWUsIG11dGF0aW9ucyk7XG4gICAgfTtcbiAgICBNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5tb3ZlVG9TYXZpbmdRdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zYXZpbmdRdWV1ZSA9IE11dGF0aW9uUXVldWUubWVyZ2UodGhpcy5zYXZpbmdRdWV1ZSwgdGhpcy5xdWV1ZSk7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB9O1xuICAgIE11dGF0aW9uUXVldWUucHJvdG90eXBlLmNsZWFyU2F2aW5nUXVldWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2F2aW5nUXVldWUgPSBbXTtcbiAgICB9O1xuICAgIE11dGF0aW9uUXVldWUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2F2aW5nUXVldWUuY29uY2F0KHRoaXMucXVldWUpO1xuICAgIH07XG4gICAgTXV0YXRpb25RdWV1ZS5wcm90b3R5cGUuYWZmZWN0c1F1ZXJ5ID0gZnVuY3Rpb24gKHRhYmxlLCBxdWVyeSwgaW5jbHVkZXMpIHtcbiAgICAgICAgdmFyIG11dGF0aW9ucyA9IHRoaXMuZ2V0KCk7XG4gICAgICAgIGlmIChtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5vcCA9PT0gJ21lcmdlJyB8fCBtLm9wID09PSAnY2xlYXItYnJhbmNoJzsgfSkpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgaWYgKHF1ZXJ5Lmlkcykge1xuICAgICAgICAgICAgLy8gQSBxdWVyeSB3aXRoIFwiaWRzXCIgZmlsdGVyIHdpbGwgYmUgZWFzeSB0byBkZXRlY3QgYSBuby1tYXRjaCBvbjpcbiAgICAgICAgICAgIHJldHVybiBtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobSkgeyByZXR1cm4gZ2xvYmFsT3AobSkgfHwgKCFicmFuY2hTZW5zaXRpdmUobSkgfHwgbS5icmFuY2hJZCA9PT0gcXVlcnkuYnJhbmNoSWQpICYmXG4gICAgICAgICAgICAgICAgcXVlcnkuaWRzLmluY2x1ZGVzKG0uaWQpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGlmIG11dGF0aW9ucyBhZmZlY3Qgc2FtZSBicmFuY2ggYW5kIHRhYmxlLiBDb3VsZCBiZSBkb25lIG1vcmUgZmluZSBncmFpbmVkLFxuICAgICAgICAvLyBidXQgdGhhdCB3b3VsZCBvbmx5IGJlIGEgc3Vib3B0aW1pemF0aW9uLlxuICAgICAgICByZXR1cm4gbXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIHJldHVybiBtLm9wID09PSAnZGVsZXRlJyA/XG4gICAgICAgICAgICAgICAgbS50YWJsZSA9PT0gdGFibGUgfHwgKGluY2x1ZGVzLnNvbWUoZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiBnZXRUYWJsZUZyb21MYWJlbCh0YWJsZSwgbGFiZWwpID09PSBtLnRhYmxlOyB9KSkgOlxuICAgICAgICAgICAgICAgIGdsb2JhbE9wKG0pID8gdHJ1ZSA6XG4gICAgICAgICAgICAgICAgICAgIG0uYnJhbmNoSWQgPT0gcXVlcnkuYnJhbmNoSWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChtLnRhYmxlID09PSB0YWJsZSB8fCAobS5vcCAhPT0gJ3VwZGF0ZScgJiYgKFt0YWJsZV0uY29uY2F0KGluY2x1ZGVzLm1hcChmdW5jdGlvbiAobGFiZWwpIHsgcmV0dXJuIGdldFRhYmxlRnJvbUxhYmVsKHRhYmxlLCBsYWJlbCk7IH0pKS5zb21lKGZ1bmN0aW9uICh0YWJsZSkgeyByZXR1cm4gZ2V0VGFibGVGcm9tTGFiZWwobS50YWJsZSwgbS5ncmFwaFByb3ApID09PSB0YWJsZTsgfSkpKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTXV0YXRpb25RdWV1ZS5tZXJnZSA9IGZ1bmN0aW9uIChxdWV1ZTEsIHF1ZXVlMikge1xuICAgICAgICB2YXIgbXV0YWJsZVF1ZXVlMSA9IHF1ZXVlMS5zbGljZSgpO1xuICAgICAgICB2YXIgbXV0YWJsZVF1ZXVlMiA9IHF1ZXVlMi5zbGljZSgpO1xuICAgICAgICAvL2lmIChtdXRhYmxlUXVldWUxLmxlbmd0aCA+IDApIGRlYnVnZ2VyO1xuICAgICAgICB2YXIgbGVuID0gcXVldWUxLmxlbmd0aDtcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgdmFyIG0gPSBxdWV1ZTFbaV07XG4gICAgICAgICAgICBpZiAobS5vcCA9PT0gJ3VwZGF0ZScpIHtcbiAgICAgICAgICAgICAgICB2YXIgb3ZlcmxhcHBpbmdJZE9wSWR4ID0gbXV0YWJsZVF1ZXVlMi5maW5kSW5kZXgoZnVuY3Rpb24gKG5ld011dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TXV0Lm9wID09PSAndXBkYXRlJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TXV0LmJyYW5jaElkID09PSBtLmJyYW5jaElkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdNdXQuaWQgPT09IG0uaWQ7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKG92ZXJsYXBwaW5nSWRPcElkeCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG11dGFibGVRdWV1ZTFbaV0gPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBtLCB7IGRlbHRhRG9jOiBtZXJnZURlbHRhcyhtLmRlbHRhRG9jLCBtdXRhYmxlUXVldWUyW292ZXJsYXBwaW5nSWRPcElkeF0uZGVsdGFEb2MpIH0pO1xuICAgICAgICAgICAgICAgICAgICBtdXRhYmxlUXVldWUyLnNwbGljZShvdmVybGFwcGluZ0lkT3BJZHgsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgX2xvb3BfMShpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbXV0YWJsZVF1ZXVlMS5jb25jYXQobXV0YWJsZVF1ZXVlMik7XG4gICAgfTtcbiAgICByZXR1cm4gTXV0YXRpb25RdWV1ZTtcbn0oKSk7XG5leHBvcnQgeyBNdXRhdGlvblF1ZXVlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdXRhdGlvbi1xdWV1ZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTXV0YXRpb25RdWV1ZSB9IGZyb20gJy4vbXV0YXRpb24tcXVldWUnO1xuaW1wb3J0IHsgQmF0Y2hSdW5uZXIgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQnO1xuaW1wb3J0IHsgdGFibGVzIH0gZnJvbSAna2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb24nO1xuaW1wb3J0IHsgQ2FjaGVCdXN0IH0gZnJvbSAnLi9jYWNoZS1idXN0JztcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi9vYnNlcnZhYmxlJztcbnZhciBLZWRCYWNrZW5kV3JpdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRXcml0ZXIobXV0YXRpb25RdWV1ZSwgcXVlcnlTZXQsIGdldENsaWVudCwgZ2V0VXNlcikge1xuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xuICAgICAgICB0aGlzLnF1ZXJ5U2V0ID0gcXVlcnlTZXQ7XG4gICAgICAgIHRoaXMuZ2V0Q2xpZW50ID0gZ2V0Q2xpZW50O1xuICAgICAgICB0aGlzLmdldFVzZXIgPSBnZXRVc2VyO1xuICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pc1NhdmluZ1Byb21pc2UgPSBudWxsO1xuICAgICAgICB0aGlzLmN1cnJlbnRWZXJzaW9uID0gMDtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZWRWZXJzaW9uID0gbmV3IEVtaXR0ZXIoMCk7XG4gICAgICAgIHRoaXMuZXJyb3JTdWJzY3JpYmVycyA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaWJlcnMgPSBbXTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLCBcImlzU2F2aW5nXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiAhIXRoaXMuX2lzU2F2aW5nUHJvbWlzZTsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLCBcImlzRWRpdGVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCkubGVuZ3RoID4gMDsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmVycm9yU3Vic2NyaWJlcnMucHVzaChjYWxsYmFjayk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5vblN0YXRlQ2hhbmdlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuc3RhdGVTdWJzY3JpYmVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLmVycm9yU3Vic2NyaWJlcnMgPSB0aGlzLmVycm9yU3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzICE9PSBjYWxsYmFjazsgfSk7XG4gICAgICAgIHRoaXMuc3RhdGVTdWJzY3JpYmVycyA9IHRoaXMuc3RhdGVTdWJzY3JpYmVycy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMgIT09IGNhbGxiYWNrOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLmRpc3BhdGNoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIHJldHJ5YWJsZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmVycm9yU3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IsIHJldHJ5YWJsZSwgX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKF8pIHsgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLmRpc3BhdGNoU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuc3RhdGVTdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoXykgeyB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUubXV0YXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgZGVib3VuY2UpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlLmFkZChtdXRhdGlvbnMpO1xuICAgICAgICArK3RoaXMuY3VycmVudFZlcnNpb247XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xuICAgICAgICB0aGlzLnF1ZXJ5U2V0Lm5vdGlmeVN1YnNjcmliZXJzKCk7XG4gICAgICAgIGlmICghdGhpcy5faXNTYXZpbmdQcm9taXNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZW91dElkKVxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0SWQpO1xuICAgICAgICAgICAgdGhpcy5fdGltZW91dElkID0gc2V0VGltZW91dCh0aGlzLnNhdmUuYmluZCh0aGlzKSwgZGVib3VuY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGlzU2F2aW5nLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nLCBiZWNhc2UgaXQgd2lsbCByZS1jaGVjayBpZiBhZGRpdGlvbmFsXG4gICAgICAgIC8vIG11dGF0aW9ucyBoYXZlIGNvbWUsIHdoZW4gc2F2aW5nIGlzIGRvbmUuXG4gICAgfTtcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5yZXRyeVNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNhdmUoKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLndhaXRGb3JWZXJzaW9uVG9QZXJzaXN0ID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcGVyc2lzdGVkVmVyc2lvbjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBlcnNpc3RlZFZlcnNpb24ubG9hZCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyc2lzdGVkVmVyc2lvbiA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHBlcnNpc3RlZFZlcnNpb24gPCB2ZXJzaW9uKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmUoKTsgLy8gQmUgbW9yZSBlYWdlciB0byBzYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBlcnNpc3RlZFZlcnNpb24uZmlsdGVyKGZ1bmN0aW9uIChwZXJzaXN0ZWRWZXJzaW9uKSB7IHJldHVybiBwZXJzaXN0ZWRWZXJzaW9uID49IHZlcnNpb247IH0pLmxvYWQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXRJZClcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0SWQpO1xuICAgICAgICBpZiAodGhpcy5faXNTYXZpbmdQcm9taXNlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzU2F2aW5nUHJvbWlzZTtcbiAgICAgICAgaWYgKCF0aGlzLmlzRWRpdGVkKVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pc1NhdmluZ1Byb21pc2UgPSB0aGlzLl9zYXZlKCk7XG4gICAgICAgIHRoaXMuX2lzU2F2aW5nUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7IH0pLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2lzU2F2aW5nUHJvbWlzZSA9IG51bGw7IH0pO1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTYXZpbmdQcm9taXNlO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUuX3NhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG11dGF0aW9ucywgdmVyc2lvbiwgbXV0YXRpb25SZXF1ZXN0cywgcmVzXzEsIGV0YWdNdXRhdGlvbnMsIGVycm9yXzE7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25zID0gdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IHRoaXMuY3VycmVudFZlcnNpb247XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUubW92ZVRvU2F2aW5nUXVldWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0aW9uUmVxdWVzdHMgPSB0aGlzLm1hcE11dGF0aW9ucyhtdXRhdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50cnlzLnB1c2goWzEsIDYsIDExLCAxMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5nZXRDbGllbnQoKS5iYXRjaChtdXRhdGlvblJlcXVlc3RzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc18xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXRhZ011dGF0aW9ucyA9IE9iamVjdC5rZXlzKHJlc18xLm5ld0V0YWdzKS5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wOiAndXBkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZTogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFEb2M6IHsgJGV0YWc6IHJlc18xLm5ld0V0YWdzW2lkXSB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTsgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnZhbGlkYXRlIGNhY2hlXG4gICAgICAgICAgICAgICAgICAgICAgICBDYWNoZUJ1c3QuaW52YWxpZGF0ZUNhY2hlKG11dGF0aW9uUmVxdWVzdHMsIHRoaXMuZ2V0VXNlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvbW1taXQgbXV0YXRpb25zIGFsb25nIHdpdGggZXRhZ011dGF0aW9ucyBpbnRvIHF1ZXJpZXMgY2FjaGVkIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGVyc2lzdGVkVmVyc2lvbi5kaXNwYXRjaCh2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucXVlcnlTZXQuY29tbWl0TXV0YXRpb25zKE11dGF0aW9uUXVldWUubWVyZ2UobXV0YXRpb25zLCBldGFnTXV0YXRpb25zKSwgdmVyc2lvbildO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbiBzdWNjZXNzLCBjbGVhciBzYXZpbmcgcXVldWUgYXMgdGhlIG11dGF0aW9ucyB3aWxsIG5vdyBiZSBjb21taXR0ZWQgdG8gYWxsIHF1ZXJ5J3MgZGF0YSBpbnN0ZWFkLlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlLmNsZWFyU2F2aW5nUXVldWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpOyAvLyBpc0VkaXRlZCBtYXkgaGF2ZSB0dXJuZWQgdG8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmFsbHksIG5vdGlmeSBzdWJzY3JpYmVycyBzbyB0aGF0IHZpZXdzIGdldCB1cGRhdGVkIHdpdGggY29tbWl0dGVkIHJlc3VsdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTZXQubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKS5sZW5ndGggPiAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRpdGlvbmFsIG11dGF0aW9ucyBoYXBwZW5kIHdoaWxlIHdlIHdlcmUgc2F2aW5nLiBIYW5kbGUgdGhlbSBhcyB3ZWxsLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5fc2F2ZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkaXRpb25hbCBtdXRhdGlvbnMgaGFwcGVuZCB3aGlsZSB3ZSB3ZXJlIHNhdmluZy4gSGFuZGxlIHRoZW0gYXMgd2VsbC5cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gNTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzMgLypicmVhayovLCAxMl07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcnNpc3RlZFZlcnNpb24uZGlzcGF0Y2hFcnJvcihlcnJvcl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGVycm9yXzEgJiYgZXJyb3JfMS5uYW1lICYmIGVycm9yXzEubmFtZS5zdGFydHNXaXRoKFwiaHR0cDRcIikpKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFjY2VzcyBDb250cm9sIGRlbmllZCwgYmFkIHJlcXVlc3Qgb3Igc2ltaWxhci4gVGhyb3cgbXV0YXRpb25zIGF3YXkuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXJyb3IoZXJyb3JfMSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlLmNsZWFyU2F2aW5nUXVldWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpOyAvLyBpc0VkaXRlZCBtYXkgaGF2ZSB0dXJuZWQgdG8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTZXQubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKS5sZW5ndGggPiAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOF07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIbyBobyEgQWRkaXRpb25hbCBtdXRhdGlvbnMgaGFwcGVuZCB3aGlsZSB3ZSB3ZXJlIHNhdmluZy4gSGFuZGxlIHRoZW0gYWxvbmUuIFRIZXkgbWlnaHQgYmUgbW9yZSBsdWNreS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX3NhdmUoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhvIGhvISBBZGRpdGlvbmFsIG11dGF0aW9ucyBoYXBwZW5kIHdoaWxlIHdlIHdlcmUgc2F2aW5nLiBIYW5kbGUgdGhlbSBhbG9uZS4gVEhleSBtaWdodCBiZSBtb3JlIGx1Y2t5LlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMyAvKmJyZWFrKi8sIDEwXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEVycm9yKGVycm9yXzEsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxMDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFszIC8qYnJlYWsqLywgMTJdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaFN0YXRlQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDEyOiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUubWFwTXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgICB2YXIgYnIgPSBuZXcgQmF0Y2hSdW5uZXIoKTtcbiAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIHN3aXRjaCAobS5vcCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIGJyLnVwZGF0ZShtLnRhYmxlLCBtLmlkLCBtLmRlbHRhRG9jLCBtLmJyYW5jaElkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnYWRkLXJlbGF0ZWQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIW0ucmVsYXRlZERvYy4kZXRhZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gJGV0YWcgbWVhbnMgdGhpcyBpcyBhIG5ldyBkb2N1bWVudC4gQWRkIGl0IGJlZm9yZSBsaW5raW5nIHRvIGl0OlxuICAgICAgICAgICAgICAgICAgICAgICAgYnIuYWRkKHRhYmxlc1ttLnRhYmxlXS5yZWxhdGlvbnNoaXBzW20uZ3JhcGhQcm9wXSwgbS5yZWxhdGVkRG9jLCBtLmJyYW5jaElkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBici5saW5rMihtLnRhYmxlLCBtLmlkLCBtLmdyYXBoUHJvcCwgbS5yZWxhdGVkRG9jLmlkLCBtLmJyYW5jaElkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlLXJlbGF0ZWQnOlxuICAgICAgICAgICAgICAgICAgICBici51bmxpbmsyKG0udGFibGUsIG0uaWQsIG0uZ3JhcGhQcm9wLCBtLnJlbGF0ZWRJZCwgbS5icmFuY2hJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgICAgICAgICAgICAgIGJyLmRlbGV0ZShtLnRhYmxlLCBtLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xlYXItYnJhbmNoJzpcbiAgICAgICAgICAgICAgICAgICAgYnIuY2xlYXJCcmFuY2gobS5icmFuY2hJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21lcmdlJzpcbiAgICAgICAgICAgICAgICAgICAgYnIubWVyZ2UobS5icmFuY2hJZCwgbS50YXJnZXRCcmFuY2hJZCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGJyLm11dGF0aW9uUmVxdWVzdHM7XG4gICAgfTtcbiAgICByZXR1cm4gS2VkQmFja2VuZFdyaXRlcjtcbn0oKSk7XG5leHBvcnQgeyBLZWRCYWNrZW5kV3JpdGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLXdyaXRlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgdGFibGVzIH0gZnJvbSAna2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb24nO1xuaW1wb3J0IHsgS2VkQmFja2VuZENvbGxlY3Rpb24gfSBmcm9tICcuL2tlZGJhY2tlbmQtY29sbGVjdGlvbic7XG5pbXBvcnQgeyBRdWVyeVNldCB9IGZyb20gJy4vcXVlcnktc2V0JztcbmltcG9ydCB7IE11dGF0aW9uUXVldWUgfSBmcm9tICcuL211dGF0aW9uLXF1ZXVlJztcbmltcG9ydCB7IEtlZEJhY2tlbmRXcml0ZXIgfSBmcm9tICcuL2tlZGJhY2tlbmQtd3JpdGVyJztcbnZhciBLZWRCYWNrZW5kUmVwbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kUmVwbyhnZXRDbGllbnQsIGdldFVzZXIsIGRlZmF1bHRRdWVyeU9wdGlvbnMsIG11dGF0aW9uUXVldWUsIHF1ZXJ5U2V0LCB3cml0ZXIsIGNhY2hlT3B0aW1pemVkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZ2V0Q2xpZW50ID0gZ2V0Q2xpZW50O1xuICAgICAgICB0aGlzLmdldFVzZXIgPSBnZXRVc2VyO1xuICAgICAgICB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMgPSBkZWZhdWx0UXVlcnlPcHRpb25zO1xuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xuICAgICAgICB0aGlzLnF1ZXJ5U2V0ID0gcXVlcnlTZXQ7XG4gICAgICAgIHRoaXMud3JpdGVyID0gd3JpdGVyO1xuICAgICAgICB0aGlzLmNhY2hlT3B0aW1pemVkID0gY2FjaGVPcHRpbWl6ZWQ7XG4gICAgICAgIGlmICghbXV0YXRpb25RdWV1ZSlcbiAgICAgICAgICAgIHRoaXMubXV0YXRpb25RdWV1ZSA9IG5ldyBNdXRhdGlvblF1ZXVlKCk7XG4gICAgICAgIGlmICghcXVlcnlTZXQpXG4gICAgICAgICAgICB0aGlzLnF1ZXJ5U2V0ID0gbmV3IFF1ZXJ5U2V0KHRoaXMubXV0YXRpb25RdWV1ZSk7XG4gICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgdGhpcy53cml0ZXIgPSBuZXcgS2VkQmFja2VuZFdyaXRlcih0aGlzLm11dGF0aW9uUXVldWUsIHRoaXMucXVlcnlTZXQsIGdldENsaWVudCwgZ2V0VXNlcik7XG4gICAgICAgIE9iamVjdC5rZXlzKHRhYmxlcykuZm9yRWFjaChmdW5jdGlvbiAodGFibGUpIHtcbiAgICAgICAgICAgIHZhciBjb2xsZWN0aW9uID0gbmV3IEtlZEJhY2tlbmRDb2xsZWN0aW9uKF90aGlzLCB0YWJsZSwgZGVmYXVsdFF1ZXJ5T3B0aW9ucyB8fCB7fSk7XG4gICAgICAgICAgICBpZiAoY2FjaGVPcHRpbWl6ZWQpIHtcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uID0gY29sbGVjdGlvbi5jYWNoZU9wdGltaXplZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXNbdGFibGVdID0gY29sbGVjdGlvbjtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5fY2xvbmUgPSBmdW5jdGlvbiAocXVlcnlPcHRpb25zLCBjYWNoZU9wdGltaXplZCkge1xuICAgICAgICB2YXIgY2xvbmUgPSBuZXcgS2VkQmFja2VuZFJlcG8odGhpcy5nZXRDbGllbnQsIHRoaXMuZ2V0VXNlciwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zLCBxdWVyeU9wdGlvbnMpLCB0aGlzLm11dGF0aW9uUXVldWUsIHRoaXMucXVlcnlTZXQsIHRoaXMud3JpdGVyLCBjYWNoZU9wdGltaXplZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5jYWNoZU9wdGltaXplZCA6IGNhY2hlT3B0aW1pemVkKTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH07XG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLmJyYW5jaCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvbmUoeyBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUucm9sZSA9IGZ1bmN0aW9uIChyb2xlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9uZSh7IHJvbGU6IHJvbGUgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUub3B0aW1pemVDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb25lKHt9LCB0cnVlKTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5jbGVhckJyYW5jaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY2xlYXIgbWFzdGVyIGJyYW5jaFwiKTtcbiAgICAgICAgdGhpcy53cml0ZXIubXV0YXRlKFt7IG9wOiAnY2xlYXItYnJhbmNoJywgYnJhbmNoSWQ6IHRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucy5icmFuY2hJZCB9XSwgMCk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAodGFyZ2V0QnJhbmNoSWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbWVyZ2UgZnJvbSBtYXN0ZXIgYnJhbmNoXCIpO1xuICAgICAgICB0aGlzLndyaXRlci5tdXRhdGUoW3sgb3A6ICdtZXJnZScsIGJyYW5jaElkOiB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkOiB0YXJnZXRCcmFuY2hJZCB9XSwgMCk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUuc2F2ZU5vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy53cml0ZXIud2FpdEZvclZlcnNpb25Ub1BlcnNpc3QodGhpcy53cml0ZXIuY3VycmVudFZlcnNpb24pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBLZWRCYWNrZW5kUmVwbztcbn0oKSk7XG5leHBvcnQgeyBLZWRCYWNrZW5kUmVwbyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkYmFja2VuZC1yZXBvLmpzLm1hcCIsImltcG9ydCBlbnYgZnJvbSAnLi9LRUQuZW52JztcbmltcG9ydCB7IEtlZEJhY2tlbmRSZXBvIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcbmltcG9ydCB7IGdldEdsb2JhbElkLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IGNmZyBmcm9tICcuL0tFRC5jZmcnO1xuaW1wb3J0IHsgU2Nob29sLCBCcmFuY2ggfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBWYWx1ZSB9IGZyb20gJ2tlZGJhY2tlbmQvb2JzZXJ2YWJsZSc7XG5cbmV4cG9ydCBjb25zdCBkYiA9IG5ldyBLZWRCYWNrZW5kUmVwbygoKT0+ZW52LmtlZEJhY2tlbmRDbGllbnQsICgpPT5lbnYuY3VycmVudFVzZXIgPyBlbnYuY3VycmVudFVzZXIubWFpbCA6IFwiXCIpO1xuZXhwb3J0IGNvbnN0IGdsb2JhbElkID0gZ2V0R2xvYmFsSWQoY2ZnLktFRF9SRUFMTSk7XG5leHBvcnQgY29uc3QgU2Nob29scyA9IHtcbiAgc3RhbmRhcmRTY2hvb2w6IGRiLnNjaG9vbHMubmFtZShcInN0YW5kYXJkXCIpLmNhY2hlT3B0aW1pemVkKCkuc2luZ2xlKCksXG4gIGdldCBteVNjaG9vbCAoKSB7IHJldHVybiBkYi5zY2hvb2xzLm5hbWUoZW52LmN1cnJlbnRVc2VyLnNjaG9vbCkuY2FjaGVPcHRpbWl6ZWQoKS5zaW5nbGUoKTsgfVxufTtcbmV4cG9ydCBjb25zdCBDb3Vyc2VJbnN0YW5jZXMgPSB7XG4gIGdldEJyYW5jaElkKHNjaG9vbDogVmFsdWU8U2Nob29sPiwgY291cnNlSWQ6IHN0cmluZykge1xuICAgIHJldHVybiBzY2hvb2wuc3dpdGNoTWFwKHNjaG9vbCA9PlxuICAgICAgZGIuYnJhbmNoZXNcbiAgICAgICAgLmhhc0VkZ2VzRnJvbShbc2Nob29sLm9mZmljaWFsQnJhbmNoSWRdKVxuICAgICAgICAubmFtZShcImRyYWZ0XCIpXG4gICAgICAgIC50YWdzKGNvdXJzZUlkKVxuICAgICAgICAuaWRzT25seSgpXG4gICAgICAgIC5tYXAoKHtpZH0pID0+IGlkKVxuICAgICAgICAudG9WYWx1ZSgpXG4gICAgICAgIC5tYXAoaWRzID0+IGlkcy5sZW5ndGggPiAwID8gaWRzWzBdIDogdW5kZWZpbmVkKSk7XG4gIH0sXG5cbiAgLyoqIEdldCBhIERSQUZUIGJyYW5jaCBmb3IgZ2l2ZW4gY291cnNlIElEIGFuZCBnaXZlbiBzY2hvb2wuXG4gICAqIElmIHRoZXJlIGlzIG5vdCB5ZXQgc3VjaCBhIGJyYW5jaCwgY3JlYXRlIGl0IHVzaW5nIG11dGF0aW9uc09uRW1wdHkoKSB3aGljaCB3aWxsXG4gICAqIGxlYWQgdG8gdGhlIEMjIGNvZGUgRG9jdW1lbnRSZXBvc2l0b3J5LlJlYWRPck11dGF0ZSgpIHZpYSBEb2N1bWVudENvbnRyb2xsZXIuXG4gICAqL1xuICBnZXRPckNyZWF0ZUJyYW5jaElkKHNjaG9vbDogVmFsdWU8U2Nob29sPiwgY291cnNlSWQ6IHN0cmluZykge1xuICAgIHJldHVybiBkYi5jb3Vyc2VJbnN0YW5jZXMuaWRzT25seSgpLmlkKGNvdXJzZUlkKS5zd2l0Y2hNYXAoKCk9PiAvLyBUSGlzIGZpcnN0IGxpbmUgdmVyaWZpZXMgY291cnNlIGV4aXN0cy4gSWYgZGVsZXRlZCwgZG9uJ3QgdHJ5IHRvIHJlY3JlYXRlIGl0cyBicmFuY2ghXG4gICAgICBzY2hvb2wuc3dpdGNoTWFwKHNjaG9vbCA9PiBcbiAgICAgIGRiLmJyYW5jaGVzXG4gICAgICAgIC5oYXNFZGdlc0Zyb20oW3NjaG9vbC5vZmZpY2lhbEJyYW5jaElkXSlcbiAgICAgICAgLm5hbWUoXCJkcmFmdFwiKVxuICAgICAgICAudGFncyhjb3Vyc2VJZClcbiAgICAgICAgLmlkc09ubHkoKVxuICAgICAgICAubXV0YXRpb25zT25FbXB0eSh0eCA9PiB7XG4gICAgICAgICAgLy8gVGhlc2UgMiBtdXRhdGlvbnMgd2lsbCBvY2N1ciBzZXJ2ZXIgc2lkZSwgYXRvbWljYWxseS5cbiAgICAgICAgICAvLyBXaWxsIGJlIHNlbnQgb24gZWFjaCByZXF1ZXN0IGluIHRoZSBxdWVyeSwgYnV0IHdpbGwgb25seSBleGVjdXRlIGlmIHF1ZXJ5IHJlc3VsdHMgaW4gemVybyBpdGVtcy5cbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiU2Nob29sOlwiLCBzY2hvb2wpO1xuICAgICAgICAgIGNvbnN0IGlkID0gY3JlYXRlVVVJRCgpO1xuICAgICAgICAgIHR4LmFkZChcImJyYW5jaGVzXCIsIHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgYWNsOiBbXG4gICAgICAgICAgICAgIFwicm9sZTpVU0VSOlJcIixcbiAgICAgICAgICAgICAgYHNjaG9vbFJvbGU6JHtzY2hvb2wubmFtZX0vRU1QTE9ZRUU6U2BcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBuYW1lOiAnZHJhZnQnLFxuICAgICAgICAgICAgc2Nob29sSWQ6IHNjaG9vbC5pZCxcbiAgICAgICAgICAgIHRyZWVQYXJlbnRJZDogc2Nob29sLm9mZmljaWFsQnJhbmNoSWQsXG4gICAgICAgICAgICB0YWdzOiBbY291cnNlSWRdXG4gICAgICAgICAgfSBhcyBCcmFuY2gpO1xuICAgICAgICAgIC8vIEFwcHJvdmluZyB0aGUgYnJhbmNoIG1ha2VzIHN1cmUgdGhhdCBpdCB3YXMgY3JlYXRlZCBieSBhbiBFTVBMT1lFRSBvbiBnaXZlbiBzY2hvb2wuXG4gICAgICAgICAgdHgubGluazIoXCJicmFuY2hlc1wiLCBzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZCwgXCJhcHByb3ZlZENoaWxkcmVuXCIsIGlkKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnNpbmdsZSgpXG4gICAgICAgIC5tYXAoKHtpZH0pID0+IGlkKSkpO1xuICB9LFxuXG4gIGdldEFsbERlc2NlbmRhbnRJZHMoY291cnNlSWQ6IHN0cmluZykge1xuICAgIHJldHVybiBkYi5jb3Vyc2VCbG9ja3MudGFncyhjb3Vyc2VJZCkuaWRzT25seSgpLmNvbmNhdChcbiAgICAgIGRiLmNvdXJzZUNvbnRlbnRzLnRhZ3MoY291cnNlSWQpLmlkc09ubHkoKSkuY29uY2F0KFxuICAgICAgZGIuY291cnNlVGFicy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkpLmNvbmNhdChcbiAgICAgIGRiLnRhc2tzLnRhZ3MoY291cnNlSWQpLmlkc09ubHkoKSlcbiAgICAgIC5tYXAoeCA9PiB4LmlkKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgKGNvbW1hbmQsIHZhbHVlID0gbnVsbCkgPT4ge1xuICBkb2N1bWVudC5leGVjQ29tbWFuZChjb21tYW5kLCBmYWxzZSwgdmFsdWUpXG59XG4iLCJpbXBvcnQgeyBBY2Nlc3NDbGFpbSwgRG9jdW1lbnRBY2Nlc3MsIGhhc0FjY2VzcyBhcyBfaGFzQWNjZXNzLCBBY2Nlc3NSaWdodCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IERvY3VtZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IGdldFVzZXJDbGFpbXMgZnJvbSAnLi9nZXQtdXNlci1jbGFpbXMnO1xuaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZywgZ2VuZXJhdGVRdWVyeVN0cmluZyB9IGZyb20gXCIuLi91dGlscy9xdWVyeS1zdHJpbmdcIjtcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5leHBvcnQgeyBnZXRVc2VyQ2xhaW1zIH07XG5cbmV4cG9ydCBjb25zdCBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyA9IFtcInVzZXJcIixcInJvbGVcIixcInNjaG9vbFwiLFwiZGVidWdcIixcInRlc3RWZXJzaW9uXCIsXCJ0ZXN0dmVyc2lvblwiLFwic2Nob29sVHlwZVwiLFwic2Nob29sdHlwZVwiXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0FjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50LCByZXF1ZXN0ZWRSaWdodDogQWNjZXNzUmlnaHQpIHtcbiAgdmFyIGNsYWltcyA9IGdldFVzZXJDbGFpbXModXNlcik7XG4gIGlmIChyZXF1ZXN0ZWRSaWdodCAhPT0gJ1InICYmIHVzZXIudHV0b3JGb3IpIHtcbiAgICBjbGFpbXMgPSBjbGFpbXMuZmlsdGVyKGNsYWltID0+IGNsYWltLnR5cGUgIT09ICdlbWFpbCcpO1xuICB9XG4gIHZhciByZXN1bHQgPSBfaGFzQWNjZXNzKERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmdBcnJheShkb2MuYWNsIHx8IFtdKSwgY2xhaW1zLCByZXF1ZXN0ZWRSaWdodCk7XG4gIC8vY29uc29sZS5sb2coYEhhcyAke3JlcXVlc3RlZFJpZ2h0fSBhY2Nlc3MgdG8gJHtkb2MubmFtZX0vJHtkb2MuaWR9OiAke3Jlc3VsdH1gKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlYWRBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xuICByZXR1cm4gaGFzQWNjZXNzKHVzZXIsIGRvYywgJ1InKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1dyaXRlQWNjZXNzKHVzZXI6IFVzZXIsIGRvYzogRG9jdW1lbnQpIHtcbiAgcmV0dXJuIGhhc0FjY2Vzcyh1c2VyLCBkb2MsICdXJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNTaGFyZUFjY2Vzcyh1c2VyOiBVc2VyLCBkb2M6IERvY3VtZW50KSB7XG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnUycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUZWFjaGVyQXRTY2hvb2wodXNlcjogVXNlciwgc2Nob29sOiBzdHJpbmcpIHtcbiAgY29uc3QgaXNUZWFjaGVyID0gdXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gJ0VNUExPWUVFJyB8fCByb2xlID09PSAnQURNSU4nKTtcbiAgY29uc3QgYmVsb25nc1RvU2Nob29sID0gKHNjaG9vbHx8XCJcIikudG9Mb3dlckNhc2UoKSA9PT0gdXNlci5zY2hvb2wudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChpc1RlYWNoZXIgJiYgYmVsb25nc1RvU2Nob29sKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbCh1c2VyOiBVc2VyLCBzY2hvb2w6IHN0cmluZykge1xuICByZXR1cm4gdXNlci5yb2xlcy5pbmNsdWRlcyhcIkFETUlOXCIpIHx8IGlzVGVhY2hlckF0U2Nob29sKHVzZXIsIHNjaG9vbCk7XG59XG5cbmV4cG9ydCBjb25zdCBpbXBlcnNvbmF0aW9uRW52ID0ge1xuICBhY3RBcyAob3B0aW9uczoge3JvbGUsIHNjaG9vbCwgdXJsP30pIHtcbiAgICBjb25zdCB7cm9sZSwgc2Nob29sLCB1cmx9ID0gb3B0aW9ucztcbiAgICBjb25zdCBjdXJyZW50UXVlcnkgPSBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uLnNlYXJjaCk7XG4gICAgY29uc3QgbmV3UXVlcnkgPSB7Li4uY3VycmVudFF1ZXJ5LCByb2xlLCBzY2hvb2x9O1xuICAgIGNvbnN0IG5ld1F1ZXJ5U3RyaW5nID0gZ2VuZXJhdGVRdWVyeVN0cmluZyhuZXdRdWVyeSk7XG4gICAgaWYgKHVybCkge1xuICAgICAgbG9jYXRpb24uaHJlZiA9IGAke3VybH0ke25ld1F1ZXJ5U3RyaW5nfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSBcIiNcIjtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9IG5ld1F1ZXJ5U3RyaW5nO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWN0QXMob3B0aW9uczoge3JvbGUsIHNjaG9vbCwgdXJsP30pIHtcbiAgaW1wZXJzb25hdGlvbkVudi5hY3RBcyhvcHRpb25zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5ICh1cmw6IHN0cmluZywgcXVlcnk6IHtbbmFtZTogc3RyaW5nXSA6IHN0cmluZ30pIHtcbiAgY29uc3QgY3VycmVudFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gpO1xuICBjb25zdCBwcmVzZXJ2ZWRRdWVyeSA9IHt9O1xuICBmb3IgKGNvbnN0IHBhcmFtIG9mIElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TKSB7XG4gICAgaWYgKGN1cnJlbnRRdWVyeVtwYXJhbV0pIHByZXNlcnZlZFF1ZXJ5W3BhcmFtXSA9IGN1cnJlbnRRdWVyeVtwYXJhbV07XG4gIH1cbiAgY29uc3QgbmV3UXVlcnlTdHJpbmcgPSBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKHsuLi5wcmVzZXJ2ZWRRdWVyeSwgLi4ucXVlcnl9KTtcbiAgY29uc3QgcEhhc2ggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gcEhhc2ggPj0gMCA/XG4gICAgYCR7dXJsLnN1YnN0cigwLHBIYXNoKX0ke25ld1F1ZXJ5U3RyaW5nfSR7dXJsLnN1YnN0cihwSGFzaCl9YCA6XG4gICAgYCR7dXJsfSR7bmV3UXVlcnlTdHJpbmd9YDtcbn1cbiIsImltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY29udHJhY3RzL2tlZC1tb2RlbHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VXNlckNsYWltcyAodXNlcjogVXNlcikge1xuICByZXR1cm4gW3tcbiAgICB0eXBlOiBcImVtYWlsXCIsXG4gICAgdmFsdWU6IHVzZXIubWFpbFxuICB9LHtcbiAgICB0eXBlOiBcInNjaG9vbFwiLFxuICAgIHZhbHVlOiB1c2VyLnNjaG9vbFxuICB9XS5jb25jYXQodXNlci5yb2xlcy5tYXAocm9sZSA9PiAoe1xuICAgIHR5cGU6IFwicm9sZVwiLFxuICAgIHZhbHVlOiByb2xlXG4gIH0pKSkuY29uY2F0KHVzZXIucm9sZXMubWFwKHJvbGUgPT4gKHtcbiAgICB0eXBlOiBcInNjaG9vbFJvbGVcIixcbiAgICB2YWx1ZTogdXNlci5zY2hvb2wgKyBcIi9cIiArIHJvbGVcbiAgfSkpKTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IFNwaW5uZXIgPSAoKT0+IDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXNwaW5uZXIgZmEtc3BpblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4mbmJzcDs8L3NwYW4+O1xuIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVVUlEKCkge1xuICAgIC8vIERlY2VudCBzb2x1dGlvbiBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxuICAgIHZhciBkID0gRGF0ZS5ub3coKTtcbiAgICB2YXIgdXVpZCA9ICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgICAgIHJldHVybiAoYyA9PT0gJ3gnID8gciA6IChyICYgMHg3IHwgMHg4KSkudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIHJldHVybiB1dWlkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGF2b2lkU2ltdWx0YW5vdXNDYWxscyhtZXRob2QpIHtcbiAgICB2YXIgb25nb2luZ1Byb21pc2UgPSBudWxsO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghb25nb2luZ1Byb21pc2UpIHtcbiAgICAgICAgICAgIG9uZ29pbmdQcm9taXNlID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgb25nb2luZ1Byb21pc2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb25nb2luZ1Byb21pc2U7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxJZChyZWFsbSkge1xuICAgIHZhciBwcmVmaXggPSAnZWM5NmIzYmUtNDVmYy00MWQzLWI2OWUtJztcbiAgICB2YXIgcGFkID0gWyc1MCcsICcwOCcsICdlMScsICc0MCcsICdlNCcsICdlNyddO1xuICAgIGlmIChyZWFsbS5sZW5ndGggPiA2KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUb28gbG9uZyByZWFsbVwiKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlYWxtLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBoZXggPSByZWFsbS5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgcGFkW2ldID0gaGV4Lmxlbmd0aCA9PT0gMiA/XG4gICAgICAgICAgICBoZXggOlxuICAgICAgICAgICAgJzAnICsgaGV4O1xuICAgIH1cbiAgICByZXR1cm4gcHJlZml4ICsgcGFkLmpvaW4oJycpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVQcmVkZXN0aW5hdGVkSWQoaW5wdXQpIHtcbiAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVuY29kZXIsIGRhdGEsIGRpZ2VzdCwgX2EsIGk7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gZW5jb2Rlci5lbmNvZGUoaW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICBfYSA9IFVpbnQ4QXJyYXkuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY3J5cHRvLnN1YnRsZS5kaWdlc3QoJ1NIQS0yNTYnLCBkYXRhKV07XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBkaWdlc3QgPSBuZXcgKF9hLmFwcGx5KFVpbnQ4QXJyYXksIFt2b2lkIDAsIF9iLnNlbnQoKV0pKSgpO1xuICAgICAgICAgICAgICAgICAgICBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmliYmxlID0gZGlnZXN0W2krK10gJSAxNiB8IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdhc2hlZE5pYmJsZSA9IGMgPT09ICd4JyA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pYmJsZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pYmJsZSAmIDB4NyB8IDB4ODtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd2FzaGVkTmliYmxlLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vKmV4cG9ydCBmdW5jdGlvbiBidWYyaGV4KGJ1ZmZlcjogQXJyYXlCdWZmZXIpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5tYXAuY2FsbChcbiAgICBuZXcgVWludDhBcnJheShidWZmZXIpLFxuICAgICh4OiBudW1iZXIpID0+ICgnMDAnICsgeC50b1N0cmluZygxNikpLnNsaWNlKC0yKSkuam9pbignJyk7XG59Ki9cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVBcnJheShhLCBtYXBwZXIpIHtcbiAgICB2YXIgcmV0dmFsID0gYTtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGEubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgIHZhciB0ID0gYVtpXTtcbiAgICAgICAgdmFyIG1hcHBlZCA9IG1hcHBlcih0KTtcbiAgICAgICAgaWYgKG1hcHBlZCAhPT0gdCkge1xuICAgICAgICAgICAgaWYgKHJldHZhbCA9PT0gYSlcbiAgICAgICAgICAgICAgICByZXR2YWwgPSBhLnNsaWNlKCk7XG4gICAgICAgICAgICByZXR2YWxbaV0gPSBtYXBwZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldHZhbDtcbn1cbi8qXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQXJyYXk8VD4oYTogVFtdLCBtYXBwZXI6ICh0OiBUKSA9PiBUIHwgZmFsc2UpOiBUW10ge1xuICBsZXQgcmV0dmFsID0gYTtcbiAgbGV0IGogPSAwO1xuICBmb3IgKGxldCBpPTAsbD1hLmxlbmd0aDsgaTxsOyArK2ksICsraikge1xuICAgIGNvbnN0IHQgPSBhW2ldO1xuICAgIGNvbnN0IG1hcHBlZCA9IG1hcHBlcih0KTtcbiAgICBpZiAobWFwcGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gTWFwcGVyIHdhbnRzIHRvIGRlbGV0ZSB0aGlzIGRvYy5cbiAgICAgIGlmIChyZXR2YWwgPT09IGEpIHJldHZhbCA9IGEuc2xpY2UoKTtcbiAgICAgIHJldHZhbC5zcGxpY2UoaiwgMSk7XG4gICAgICAtLWo7IC8vIGNvbXBlbnNhdGUgZm9yICsralxuICAgIH0gZWxzZSBpZiAobWFwcGVkICE9PSB0KSB7XG4gICAgICBpZiAocmV0dmFsID09PSBhKSByZXR2YWwgPSBhLnNsaWNlKCk7XG4gICAgICByZXR2YWxbal0gPSBtYXBwZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXR2YWw7XG59XG4qLyBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImV4cG9ydCBpbnRlcmZhY2UgUGFyc2VRdWVyeVN0cmluZ09wdGlvbnMge1xuICB0b0xvd2VyPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb25TZWFyY2g6IHN0cmluZywgb3B0aW9ucz86IFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zKTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSB7XG4gIGNvbnN0IHt0b0xvd2VyfSA9IChvcHRpb25zIHx8wqB7fSkgYXMgUGFyc2VRdWVyeVN0cmluZ09wdGlvbnM7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBpZiAobG9jYXRpb25TZWFyY2ggJiYgbG9jYXRpb25TZWFyY2gubGVuZ3RoID4gMSlcbiAgICBsb2NhdGlvblNlYXJjaC5zdWJzdHIoMSlcbiAgICAgIC5zcGxpdCgnJicpXG4gICAgICAubWFwKHBhcnQgPT4gcGFydC5zcGxpdCgnPScpLm1hcChzID0+IGRlY29kZVVSSUNvbXBvbmVudChzLnRyaW0oKSkpKVxuICAgICAgLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4gcmVzdWx0W3RvTG93ZXIgPyBrZXkudG9Mb3dlckNhc2UoKSA6IGtleV0gPSB2YWx1ZSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGVuY29kZVBhcmFtcyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHBhcmFtcykuZmlsdGVyKGtleSA9PiBwYXJhbXNba2V5XSAhPT0gdW5kZWZpbmVkKS5tYXAoa2V5ID0+IGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChwYXJhbXNba2V5XSl9YCkuam9pbignJicpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVRdWVyeVN0cmluZyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcbiAgcmV0dXJuIFwiP1wiICsgZW5jb2RlUGFyYW1zKHBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUhhc2hRdWVyeVN0cmluZyhsb2NhdGlvbkhhc2g6IHN0cmluZywgb3B0aW9ucz86IFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zKSB7XG4gIHJldHVybiBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uSGFzaCwgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUhhc2hRdWVyeVN0cmluZyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcbiAgcmV0dXJuIFwiI1wiICsgZW5jb2RlUGFyYW1zKHBhcmFtcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGxpdFVybEFuZFF1ZXJ5ICh1cmxXaXRoUG9zc2libGVRdWVyeTogc3RyaW5nKSB7XG4gIGNvbnN0IHBRdWVyeSA9IHVybFdpdGhQb3NzaWJsZVF1ZXJ5LmluZGV4T2YoJz8nKTtcbiAgcmV0dXJuIHBRdWVyeSA+PSAwID9cbiAgICBbdXJsV2l0aFBvc3NpYmxlUXVlcnkuc3Vic3RyKDAsIHBRdWVyeSksIHVybFdpdGhQb3NzaWJsZVF1ZXJ5LnN1YnN0cihwUXVlcnkpXSA6XG4gICAgW3VybFdpdGhQb3NzaWJsZVF1ZXJ5LCBcIlwiXTtcbn1cbiIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBEb2N1bWVudCwgUmVzb3VyY2UsIE1vZGlmaWNhdGlvblRyYWNrZWQsIENvdXJzZSwgVGFzayB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IEJhdGNoUnVubmVyLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSB9IGZyb20gJy4uLy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlRG9jdW1lbnRHcmFwaHMob2xkRG9jLCBuZXdEb2MsIHRhYmxlOiBzdHJpbmcsIGdyYXBoczogeyBbbGFiZWw6IHN0cmluZ106IHN0cmluZyB9LCBiYXRjaDogQmF0Y2hSdW5uZXIpIHtcbiAgY29uc3QgZG9jVXBkYXRlcyA9IHt9O1xuICBjb25zdCBkb2NJZCA9IG5ld0RvYy5pZDtcbiAgZm9yIChsZXQgbmF2UHJvcCBvZiBPYmplY3Qua2V5cyhncmFwaHMpKSB7XG4gICAgY29uc3QgZm9yZWlnblRhYmxlID0gZ3JhcGhzW25hdlByb3BdO1xuICAgIGNvbnN0IG9sZExpc3Q6IERvY3VtZW50W10gPSBvbGREb2NbbmF2UHJvcF0gfHwgW107XG4gICAgY29uc3QgbmV3TGlzdDogRG9jdW1lbnRbXSA9IG5ld0RvY1tuYXZQcm9wXTtcbiAgICBpZiAoIW5ld0xpc3QpIGNvbnRpbnVlO1xuICAgIGNvbnN0IHR1cGxlcyA9IG5ld0xpc3RcbiAgICAgIC5tYXAoKGRvYywgaWR4KT0+KHtkb2MsIGlkeH0pKTsgLy8gQ3JlYXRlIHR1YmxlcyBvZiB7ZG9jLCBhcnJheS1pbmRleH0gc28gd2UgY2FuIHVwZGF0ZSByZXN1bHRcbiAgICBjb25zdCBhZGRlZCA9IHR1cGxlcy5maWx0ZXIodHVwbGUgPT4gIW9sZExpc3Quc29tZShvID0+IG8uaWQgPT09IHR1cGxlLmRvYy5pZCkpOyAvLyBGaW5kIGFkZGVkIGl0ZW1zXG5cbiAgICBmb3IgKGxldCBhIG9mIGFkZGVkKSB7XG4gICAgICBjb25zdCBtdXRhdGVkU3ViRG9jID0gey4uLmEuZG9jfTtcbiAgICAgIGNvbnN0IG1ldGEgPSBtdXRhdGVkU3ViRG9jLiRtZXRhO1xuICAgICAgZGVsZXRlIG11dGF0ZWRTdWJEb2MuJG1ldGE7IC8vIERlbGV0ZSAkbWV0YSBzbyB0aGF0IFwiYWRkXCIgb3IgXCJ1cGRhdGVcIiBkb2VzIG5vdCBwZXJzaXN0ZSB0byBuZXh0IHN0YXRlLlxuICAgICAgaWYgKG1ldGEgPT09ICdhZGQnKSB7XG4gICAgICAgIGlmICghbXV0YXRlZFN1YkRvYy5pZCkgbXV0YXRlZFN1YkRvYy5pZCA9IGNyZWF0ZVVVSUQoKTsgLy8gR2VuZXJhdGUgSUQgaWYgbm90IGRvbmUgeWV0LlxuICAgICAgICAvLyBOb3cgcHV0IGFuICdhZGQnIG11dGF0aW9uIGluIHRoZSBiYXRjaCBxdWV1ZS5cbiAgICAgICAgYmF0Y2guYWRkKGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XG4gICAgICB9IGVsc2UgaWYgKG1ldGEgPT09ICd1cGRhdGUnKSB7XG4gICAgICAgIGJhdGNoLnB1dChmb3JlaWduVGFibGUsIG11dGF0ZWRTdWJEb2MpO1xuICAgICAgfVxuICAgICAgYmF0Y2gubGluayh0YWJsZSwgZG9jSWQsIGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYy5pZCwgbmF2UHJvcCk7XG5cbiAgICAgIC8vIFVwZGF0ZSByZXN1bHQgc28gdGhhdCBzdGF0ZSBpcyByZWZsZWN0ZWQgYWZ0ZXIgc3VjY2VzZnVsIFBPU1QgdG8gc2VydmVyLlxuICAgICAgaWYgKCFkb2NVcGRhdGVzW25hdlByb3BdKSBkb2NVcGRhdGVzW25hdlByb3BdID0ge307XG4gICAgICBkb2NVcGRhdGVzW25hdlByb3BdW2EuaWR4XSA9IHskc2V0OiBtdXRhdGVkU3ViRG9jfTtcbiAgICB9XG4gICAgY29uc3QgcmVtb3ZlZCA9IG9sZExpc3QuZmlsdGVyKG8gPT4gIW5ld0xpc3Quc29tZShuID0+IG4uaWQgPT09IG8uaWQpKTtcbiAgICBmb3IgKGxldCByIG9mIHJlbW92ZWQpIHtcbiAgICAgIGJhdGNoLnVubGluayh0YWJsZSwgZG9jSWQsIGZvcmVpZ25UYWJsZSwgci5pZCwgbmF2UHJvcCk7XG4gICAgfVxuICAgIGNvbnN0IHVwZGF0ZWQgPSB0dXBsZXMuZmlsdGVyKHR1cGxlID0+IG9sZExpc3Quc29tZShvID0+IG8uaWQgPT09IHR1cGxlLmRvYy5pZCAmJiB0dXBsZS5kb2MuJG1ldGEgPT09ICd1cGRhdGUnKSk7XG4gICAgZm9yIChsZXQgdSBvZiB1cGRhdGVkKSB7XG4gICAgICBjb25zdCBtdXRhdGVkU3ViRG9jID0gey4uLnUuZG9jfTtcbiAgICAgIGRlbGV0ZSBtdXRhdGVkU3ViRG9jLiRtZXRhO1xuICAgICAgYmF0Y2gucHV0KGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XG5cbiAgICAgIC8vIFVwZGF0ZSByZXN1bHQgc28gdGhhdCAkbWV0YSBpcyByZW1vdmVkIGZyb20gbmF2aWdhdGlvbiBwcm9wIGFmdGVyIHN1Y2Nlc3NmdWwgUE9TVCB0byBzZXJ2ZXIuXG4gICAgICBpZiAoIWRvY1VwZGF0ZXNbbmF2UHJvcF0pIGRvY1VwZGF0ZXNbbmF2UHJvcF0gPSB7fTtcbiAgICAgIGRvY1VwZGF0ZXNbbmF2UHJvcF1bdS5pZHhdID0geyRzZXQ6IG11dGF0ZWRTdWJEb2N9O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdXBkYXRlKG5ld0RvYywgZG9jVXBkYXRlcyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkdEZvcm1hdChkYXRlVGltZTogbnVtYmVyIHwgRGF0ZSB8IG1vbWVudC5Nb21lbnQpIHtcbiAgcmV0dXJuIG1vbWVudChkYXRlVGltZSkuZm9ybWF0KCdZWU1NREQgSEg6bW0nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3J0RGF0ZUZvcm1hdChkYXRlVGltZTogbnVtYmVyIHwgRGF0ZSB8IG1vbWVudC5Nb21lbnQpIHtcbiAgcmV0dXJuIG1vbWVudChkYXRlVGltZSkuZm9ybWF0KCdZWU1NREQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNob3J0UGVyc29uTmFtZUZvcm1hdChuYW1lOiBzdHJpbmcpIHtcbiAgaWYgKCFuYW1lKSByZXR1cm4gXCJcIjtcbiAgY29uc3QgbmFtZXMgPSBuYW1lLnNwbGl0KCcgJykuZmlsdGVyKG4gPT4gISFuKTtcbiAgY29uc3QgbGFzdE5hbWUgPSBuYW1lcy5wb3AoKTtcbiAgcmV0dXJuIG5hbWVzLm1hcChuYW1lID0+IGAke25hbWVbMF19LmApLmNvbmNhdChsYXN0TmFtZSkuam9pbignICcpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTW9kaWZpY2F0aW9uU3RhbXAgKG5vdzogbnVtYmVyLCBvYmo6IE1vZGlmaWNhdGlvblRyYWNrZWQsIHVzZXI6IFVzZXIpIHtcbiAgcmV0dXJuIHVwZGF0ZShvYmosIHtcbiAgICBkYXRlVGltZTogeyRzZXQ6IG5vd30sIC8vIEZvciBxdWVyaWVzLi4uXG4gICAgbW9kaWZpZWREYXRlOiB7JHNldDogbm93fSxcbiAgICBtb2RpZmllZEJ5OiB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIG5hbWU6IHVzZXIuZGlzcGxheU5hbWUsXG4gICAgICAgIHVybDogXCJtYWlsdG86XCIgKyB1c2VyLm1haWxcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlQ3JlYXRpb25TdGFtcCAobm93OiBudW1iZXIsIG9iajogTW9kaWZpY2F0aW9uVHJhY2tlZCwgdXNlcjogVXNlcikge1xuICByZXR1cm4gdXBkYXRlKG9iaiwge1xuICAgIGNyZWF0ZWREYXRlOiB7JHNldDogRGF0ZS5ub3coKX0sXG4gICAgY3JlYXRlZEJ5OiB7XG4gICAgICAkc2V0OiB7XG4gICAgICAgIG5hbWU6IHVzZXIuZGlzcGxheU5hbWUsXG4gICAgICAgIHVybDogXCJtYWlsdG86XCIgKyB1c2VyLm1haWxcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMob2JqOiBNb2RpZmljYXRpb25UcmFja2VkLCB1c2VyOiBVc2VyKSB7XG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIG9iaiA9IHVwZGF0ZU1vZGlmaWNhdGlvblN0YW1wKG5vdywgb2JqLCB1c2VyKTtcbiAgaWYgKCFvYmouY3JlYXRlZEJ5KSBvYmogPSB1cGRhdGVDcmVhdGlvblN0YW1wKG5vdywgb2JqLCB1c2VyKTtcbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5RXRhZ3MoZG9jOiBEb2N1bWVudCwgbmV3RXRhZ3M6IHtbaWQ6IHN0cmluZ106IHN0cmluZ30sIGdyYXBoczogc3RyaW5nW10pIHtcbiAgY29uc3QgcmVzID0gey4uLmRvY307XG4gIGNvbnN0IGV0YWcgPSBuZXdFdGFnc1tkb2MuaWRdO1xuICBpZiAoZXRhZylcbiAgICByZXMuJGV0YWcgPSBldGFnO1xuICBmb3IgKGxldCBsYWJlbCBvZiBncmFwaHMpIHtcbiAgICBjb25zdCBuZXdMaXN0ID0gZG9jW2xhYmVsXS5tYXAoZCA9PiBhcHBseUV0YWdzKGQsIG5ld0V0YWdzLCBbXSkpO1xuICAgIHJlc1tsYWJlbF0gPSBuZXdMaXN0O1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWFkQmxvYihibG9iOiBCbG9iLCBtOiAocjpGaWxlUmVhZGVyKT0+dm9pZCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGV2ID0+IHJlc29sdmUoKGV2LnRhcmdldCBhcyBhbnkpLnJlc3VsdCk7XG4gICAgcmVhZGVyLm9uYWJvcnQgPSBldiA9PiByZWplY3QobmV3IEVycm9yKFwiZmlsZSByZWFkIGFib3J0ZWRcIikpO1xuICAgIHJlYWRlci5vbmVycm9yID0gZXYgPT4gcmVqZWN0KChldi50YXJnZXQgYXMgYW55KS5lcnJvcik7XG4gICAgbShyZWFkZXIpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0IChibG9iOiBCbG9iKSB7XG4gIHJldHVybiByZWFkQmxvYihibG9iLCByPT5yLnJlYWRBc1RleHQoYmxvYikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZEJsb2JBc0RhdGFVcmwgKGJsb2I6IEJsb2IpIHtcbiAgcmV0dXJuIHJlYWRCbG9iKGJsb2IsIHI9PnIucmVhZEFzRGF0YVVSTChibG9iKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxvd0NvcHkoZTogUmVhY3QuRHJhZ0V2ZW50PEhUTUxEaXZFbGVtZW50Pikge1xuICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnY29weSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDb3Vyc2VCdWlsZGVyU3RhdHVzKHN0YXR1czogJ3Vuc2F2ZWQnIHwgJ3NhdmVkJyB8ICdlcnJvcicgfCAnJykge1xuICBjb25zdCBkaXYgPSAkKCdkaXYuY291cnNlLWJ1aWxkZXInKVswXTtcbiAgaWYgKGRpdikgZGl2LmNsYXNzTmFtZSA9IFwiY291cnNlLWJ1aWxkZXJcIiArIChzdGF0dXMgPyBcIiBzdGF0dXMgXCIgKyBzdGF0dXMgOiBcIlwiKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvYWRDb3Vyc2UoaWQ6IHN0cmluZywgb3B0aW9ucz86IHtcbiAgICBpbmNsdWRlVGVtcGxhdGVDaGFpbj86IGJvb2xlYW4sXG4gICAgaW5jbHVkZT86IHN0cmluZ1tdXG4gIH0pOiBQcm9taXNlPENvdXJzZT5cbntcbiAgY29uc3QgY2xpZW50ID0gZW52LmtlZEJhY2tlbmRDbGllbnQ7XG4gIGNvbnN0IGluY2x1ZGVUZW1wbGF0ZUNoYWluID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGVUZW1wbGF0ZUNoYWluO1xuICBjb25zdCBpbmNsdWRlVGFza3MgPSAhb3B0aW9ucyB8fCAhb3B0aW9ucy5pbmNsdWRlIHx8IG9wdGlvbnMuaW5jbHVkZS5pbmRleE9mKFwidGFza3NcIikgIT09IC0xO1xuICBjb25zdCBbY291cnNlLCBjb3Vyc2VUYXNrcywgdGVtcGxhdGVDaGFpbl0gPSAoYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIGNsaWVudC5nZXQoXCJjb3Vyc2VzXCIsIGlkLCB7XG4gICAgICBpbmNsdWRlOiBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZSA/IG9wdGlvbnMuaW5jbHVkZS5maWx0ZXIoaSA9PiBpICE9PSBcInRhc2tzXCIpIDogW1xuICAgICAgICBcImNlbnRyYWxDb250ZW50XCIsXG4gICAgICAgIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsXG4gICAgICAgIFwiYWJpbGl0aWVzXCIsXG4gICAgICAgIFwiaW1hZ2VzXCIsXG4gICAgICAgIFwiYWNsXCIgLy8gRG9uJ3QgaW5jbHVkZSB0YXNrcyBoZXJlLi4uXG4gICAgICBdXG4gICAgfSksXG4gICAgLy8gLi4uIGJ1dCBpbmNsdWRlIHRhc2tzIGhlcmUgaW5zdGVhZCBzbyB0aGF0IHdlIGNhbiBsb2FkIHRoZSBncmFwaHMgZm9yIHRoZVxuICAgIC8vIHRhc2tzIGFzIHdlbGwhXG4gICAgaW5jbHVkZVRhc2tzICYmIGNsaWVudC5saXN0KFwidGFza3NcIiwge1xuICAgICAgaGFzRWRnZXNGcm9tOiBpZCxcbiAgICAgIGluY2x1ZGU6IFsna25vd2xlZGdlUmVxdWlyZW1lbnRzJywgJ2NlbnRyYWxDb250ZW50JywgJ2FiaWxpdGllcycsICdhY2wnXSxcbiAgICAgIGZsYWdzOiBbJ2luY2x1ZGVJZHNPbmx5J10gLy8gRG9uJ3QgbmVlZCByZWR1bmRhbnQgaW5mbyB0aGF0J3MgYWxyZWFkeSBvbiBjb3Vyc2VcbiAgICB9KSxcbiAgICBpbmNsdWRlVGVtcGxhdGVDaGFpbiAmJiBjbGllbnQubGlzdChcImNvdXJzZXNcIiwge1xuICAgICAgaGFzRWRnZXNGcm9tOiBpZCxcbiAgICAgIGZsYWdzOiBbJ2lkc09ubHknXVxuICAgIH0pXG4gIF0pKSBhcyBbQ291cnNlLCBUYXNrW10sIENvdXJzZVtdXTtcbiAgY291cnNlLnRhc2tzID0gY291cnNlVGFza3M7XG5cbiAgLy8gQ29ycmVjdCB0aGUgb3JkZXIgb2YgQWJpbGl0aWVzXG4gIGlmIChjb3Vyc2UuYWJpbGl0aWVzICYmIGNvdXJzZS5hYmlsaXRpZXNPcmRlcikge1xuICAgIGNvdXJzZS5hYmlsaXRpZXMgPSBjb3Vyc2UuYWJpbGl0aWVzT3JkZXIubWFwKGlkID0+XG4gICAgICBjb3Vyc2UuYWJpbGl0aWVzLmZpbmQoYSA9PiBhLmlkID09PSBpZCkpO1xuICB9XG5cbiAgLy8gQ29ycmVjdCB0aGUgb3JkZXIgb2YgS25vd2xlZGdlUmVxdWlyZW1lbnRzXG4gIGlmIChjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzICYmIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlcikge1xuICAgIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMgPSBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIubWFwKGlkID0+XG4gICAgICBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzLmZpbmQoYyA9PiBjLmlkID09PSBpZCkpO1xuICB9XG5cbiAgLy8gQ29ycmVjdCB0aGUgb3JkZXIgb2YgQ2VudHJhbENvbnRlbnRcbiAgaWYgKGNvdXJzZS5jZW50cmFsQ29udGVudCAmJiBjb3Vyc2UuY2VudHJhbENvbnRlbnRPcmRlcikge1xuICAgIGNvdXJzZS5jZW50cmFsQ29udGVudCA9IGNvdXJzZS5jZW50cmFsQ29udGVudE9yZGVyLm1hcChpZCA9PlxuICAgICAgY291cnNlLmNlbnRyYWxDb250ZW50LmZpbmQoY2MgPT4gY2MuaWQgPT09IGlkKSk7Ly8uZmlsdGVyKHggPT4gISF4KTsvLyBEZWJ1Z2dpbmcgc29tdGhpbicgLiBOb3JtYWxseSB0aGUgbGFzdCAuZmlsdGVyKCkuLi4gcGFydCBzaG91bGQgbm90IGJlIG5lc2Nlc3NhcnkuLi5cbiAgfVxuICBcbiAgLy8gSW5jbHVkZSB0ZW1wbGF0ZSBjaGFpbiBpZiByZXF1ZXN0ZWQuXG4gIGlmIChpbmNsdWRlVGVtcGxhdGVDaGFpbikgY291cnNlLnRlbXBsYXRlQ2hhaW4gPSB0ZW1wbGF0ZUNoYWluO1xuICByZXR1cm4gY291cnNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzTWlncmF0ZWRUZXh0cyh0YXNrOiBUYXNrKSB7XG4gIHJldHVybiB0YXNrLm1pZ3JhdGVkVGV4dHMgJiYgT2JqZWN0LmtleXModGFzay5taWdyYXRlZFRleHRzKS5zb21lKHR5cGUgPT5cbiAgICBPYmplY3Qua2V5cyh0YXNrLm1pZ3JhdGVkVGV4dHNbdHlwZV0pLmxlbmd0aCA+IDApO1xufVxuIiwidmFyIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UoKSB7XG4gICAgfVxuICAgIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZS5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIChpZCwgdG9rZW5JbmZvKSB7XG4gICAgICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJiZWFyZXItXCIgKyBpZCwgSlNPTi5zdHJpbmdpZnkodG9rZW5JbmZvKSk7XG4gICAgfTtcbiAgICBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBqc29uID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImJlYXJlci1cIiArIGlkKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoanNvbiA/IEpTT04ucGFyc2UoanNvbikgOiB7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChleCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlO1xufSgpKTtcbmV4cG9ydCB7IEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmVhcmVyLXN0b3JhZ2Utc2Vzc2lvbnN0b3JhZ2UuanMubWFwIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWlncmF0ZVRhc2sodGFzaykge1xuICAgIGlmICghdGFzay5yZXNvdXJjZXMpXG4gICAgICAgIHRhc2sucmVzb3VyY2VzID0gW107XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLXRhc2suanMubWFwIiwiaW1wb3J0IG1pZ3JhdGVDb3Vyc2UgZnJvbSAnLi9taWdyYXRlLWNvdXJzZSc7XG5pbXBvcnQgbWlncmF0ZVRhc2sgZnJvbSAnLi9taWdyYXRlLXRhc2snO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWlncmF0ZShkb2MsIHRhYmxlLCBncmFwaHMpIHtcbiAgICBzd2l0Y2ggKHRhYmxlKSB7XG4gICAgICAgIGNhc2UgXCJjb3Vyc2VzXCI6XG4gICAgICAgICAgICBtaWdyYXRlQ291cnNlKGRvYywgZ3JhcGhzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwidGFza3NcIjpcbiAgICAgICAgICAgIG1pZ3JhdGVUYXNrKGRvYyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1taWdyYXRlLmpzLm1hcCIsImltcG9ydCBtaWdyYXRlVGFzayBmcm9tICcuL21pZ3JhdGUtdGFzayc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlQ291cnNlKGNvdXJzZSwgZ3JhcGhzKSB7XG4gICAgaWYgKCFjb3Vyc2UubW9kdWxlcylcbiAgICAgICAgY291cnNlLm1vZHVsZXMgPSBbXTtcbiAgICBjb3Vyc2UubW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiAgICAgICAgaWYgKCFtb2R1bGUucmVzb3VyY2VzKSB7XG4gICAgICAgICAgICBtb2R1bGUucmVzb3VyY2VzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFtb2R1bGUudGFza0lkcykge1xuICAgICAgICAgICAgbW9kdWxlLnRhc2tJZHMgPSBbXTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMpIHtcbiAgICAgICAgY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMgPSBbXTtcbiAgICB9XG4gICAgLy8gRWFybGllciB3cm9uZyBzcGVsbGluZyBvZiByZXNvdXJjZXNcbiAgICBpZiAoJ3Jlc291cnNlcycgaW4gY291cnNlICYmICEoJ3Jlc291cmNlcycgaW4gY291cnNlKSkge1xuICAgICAgICBjb3Vyc2UucmVzb3VyY2VzID0gY291cnNlLnJlc291cnNlcztcbiAgICAgICAgZGVsZXRlIGNvdXJzZS5yZXNvdXJzZXM7XG4gICAgfVxuICAgIGlmICghY291cnNlLnJlc291cmNlcykge1xuICAgICAgICBjb3Vyc2UucmVzb3VyY2VzID0gW107XG4gICAgfVxuICAgIGlmIChncmFwaHMpIHtcbiAgICAgICAgZ3JhcGhzLmZvckVhY2goZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndGFza3MnOlxuICAgICAgICAgICAgICAgICAgICBjb3Vyc2UudGFza3MuZm9yRWFjaChmdW5jdGlvbiAodGFzaykgeyByZXR1cm4gbWlncmF0ZVRhc2sodGFzayk7IH0pO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlncmF0ZS1jb3Vyc2UuanMubWFwIiwiaW1wb3J0IG1pZ3JhdGUgZnJvbSAnLi9taWdyYXRlJztcbmV4cG9ydCB2YXIgS2VkTW9kZWxNaWdyYXRvck1peGluID0gZnVuY3Rpb24gKGNsaWVudCkge1xuICAgIGlmIChjbGllbnQuX19taWdyYXRvcl9taXhlZF9pbilcbiAgICAgICAgcmV0dXJuO1xuICAgIGNsaWVudC5fX21pZ3JhdG9yX21peGVkX2luID0gdHJ1ZTtcbiAgICB2YXIgZ2V0ID0gY2xpZW50LmdldDtcbiAgICB2YXIgbGlzdCA9IGNsaWVudC5saXN0O1xuICAgIGNsaWVudC5nZXQgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBpbmNsdWRlID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGU7XG4gICAgICAgIHJldHVybiBnZXQuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgIG1pZ3JhdGUocmVzdWx0LCB0YWJsZSwgaW5jbHVkZSAmJiBpbmNsdWRlLnRvU3RyaW5nKCkuc3BsaXQoJywnKSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNsaWVudC5saXN0ID0gZnVuY3Rpb24gKHRhYmxlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBpbmNsdWRlID0gb3B0aW9ucyAmJiBvcHRpb25zLmluY2x1ZGU7XG4gICAgICAgIHJldHVybiBsaXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQuZm9yRWFjaChmdW5jdGlvbiAoZG9jKSB7IHJldHVybiBtaWdyYXRlKGRvYywgdGFibGUsIGluY2x1ZGUgJiYgaW5jbHVkZS50b1N0cmluZygpLnNwbGl0KCcsJykpOyB9KTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIGNsaWVudDtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJ2YXIgcmVkaXJIYXNoID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcInJlZGlyLWhhc2hcIik7XG5pZiAocmVkaXJIYXNoKVxuICAgIHRyeSB7XG4gICAgICAgIHZhciBfYSA9IEpTT04ucGFyc2UocmVkaXJIYXNoKSwgdGltZSA9IF9hLnRpbWUsIGhhc2ggPSBfYS5oYXNoO1xuICAgICAgICBpZiAodGltZSAmJiB0aW1lID4gRGF0ZS5ub3coKSAtIDYwMDAwKSB7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFwicmVkaXItaGFzaFwiKTtcbiAgICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChfKSB7IH1cbmV4cG9ydCBmdW5jdGlvbiByZW1lbWJlckhhc2hMb2NhdGlvbigpIHtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicmVkaXItaGFzaFwiLCBKU09OLnN0cmluZ2lmeSh7IHRpbWU6IERhdGUubm93KCksIGhhc2g6IGxvY2F0aW9uLmhhc2ggfSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFzaC1yZXN0b3Jlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCwgSHR0cEVycm9yIH0gZnJvbSAnLi4va2VkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSB9IGZyb20gXCIuL2JlYXJlci1zdG9yYWdlLXNlc3Npb25zdG9yYWdlXCI7XG5pbXBvcnQgeyBhdm9pZFNpbXVsdGFub3VzQ2FsbHMgfSBmcm9tICcuLi9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMnO1xuaW1wb3J0IHsgS2VkTW9kZWxNaWdyYXRvck1peGluIH0gZnJvbSAnLi4va2VkLW1vZGVsLW1pZ3JhdG9yJztcbmltcG9ydCAnLi9oYXNoLXJlc3RvcmVyJztcbmltcG9ydCB7IHJlbWVtYmVySGFzaExvY2F0aW9uIH0gZnJvbSAnLi9oYXNoLXJlc3RvcmVyJztcbktlZE1vZGVsTWlncmF0b3JNaXhpbihLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZSk7XG5leHBvcnQgdmFyIHN0b3JhZ2UgPSBuZXcgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlKCk7XG52YXIgdGltZU9mUGFnZUxvYWQgPSBEYXRlLm5vdygpO1xudmFyIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKHRva2VuUGF0aCwgdG9rZW5SZXNwb25zZU1hcHBlciwgdG9rZW5JZCkge1xuICAgICAgICB0aGlzLnRva2VuUGF0aCA9IHRva2VuUGF0aDtcbiAgICAgICAgdGhpcy50b2tlblJlc3BvbnNlTWFwcGVyID0gdG9rZW5SZXNwb25zZU1hcHBlcjtcbiAgICAgICAgdGhpcy50b2tlbklkID0gdG9rZW5JZDtcbiAgICAgICAgdGhpcy50b2tlbkluZm8gPSB7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH07XG4gICAgICAgIHRoaXMuZ2V0QmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMuZ2V0QmVhcmVyLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnJlZnJlc2hCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5yZWZyZXNoQmVhcmVyLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlci5wcm90b3R5cGUuZ2V0QmVhcmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy50b2tlbkluZm8udG9rZW4pIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRva2VuSWQpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RvcmFnZS5sb2FkKHRoaXMudG9rZW5JZCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS50b2tlbkluZm8gPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMudG9rZW5JbmZvLmV4cGlyZXMgPCBEYXRlLm5vdygpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hCZWFyZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNDtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5yZWZyZXNoQmVhcmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9lKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfZS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHRoaXMudG9rZW5QYXRoLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeyBBY2NlcHQ6IFwidGV4dC9wbGFpbjsgYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q6ICdtYW51YWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlOiAnbm8tY2FjaGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDMwMiB8fCAoIXJlcy5zdGF0dXMgJiYgcmVzLnR5cGUgPT09IFwib3BhcXVlcmVkaXJlY3RcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIHNlc3Npb24gdGltZWQgb3V0IGFuZCBzZXJ2ZXIgd2FudHMgdG8gcmVkaXJlY3QgZW50aXJlIHBhZ2UgdG8gbG9naW4gcGFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRpbWUgdG8gcmVsb2FkIGN1cnJlbnQgcGFnZSB0byBmb3JjZSBhIHJlZGlyZWN0IG9mIHRoZSBlbnRpcmUgcGFnZSBpbnN0ZWFkIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGp1c3QgcmVkaXJlY3RpbmcgdG8gL2FwaS90b2tlbiBvciB3aGF0ZXZlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRpbWVPZlBhZ2VMb2FkID4gNjAwMDApIHsgLy8gcHJvaGliaXQgZW5kbGVzcyBsb29wIG9mIHJlbG9hZGluZyBzZWxmLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndhbnRzUmVkaXJlY3QgPSB0cnVlOyAvLyBTbyB0aGF0IGxpc3RlbmVycyB0byBvbmJlZm9yZXVubG9hZCBjb3VsZCBzaG93IGFsdGVybmF0ZSBtZXNzYWdlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlZGlyZWN0IHdhbnRlZC4gUmVsb2FkIHBhZ2UuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1lbWJlckhhc2hMb2NhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSHR0cEVycm9yKDMwMiwgXCJSZWRpcmVjdGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEVycm9yLmJpbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFwiSFRUUFwiICsgcmVzLnN0YXR1cyArIFwiIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShFcnJvciwgW3ZvaWQgMCwgX2IgKyAoX2Uuc2VudCgpKV0pKSgpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZCA9IHRoaXMudG9rZW5SZXNwb25zZU1hcHBlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50b2tlbkluZm8gPSBfZC5hcHBseSh0aGlzLCBbX2Uuc2VudCgpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNhdmUodGhpcy50b2tlbklkLCB0aGlzLnRva2VuSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcjtcbn0oKSk7XG5leHBvcnQgeyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciB9O1xuZXhwb3J0IHZhciBpc29tb3JwaGljID0geyBmZXRjaDogZmV0Y2guYmluZChzZWxmKSwgYnRvYTogYnRvYS5iaW5kKHNlbGYpIH07XG52YXIgS2VkQmFja2VuZENsaWVudFdlYiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhLZWRCYWNrZW5kQ2xpZW50V2ViLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRDbGllbnRXZWIoYXBpQmFzZVVybCwgcHJvdmlkZXJPclRva2VuUGF0aCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgYmVhcmVyUHJvdmlkZXIgPSB0eXBlb2YgcHJvdmlkZXJPclRva2VuUGF0aCAhPT0gJ3N0cmluZycgP1xuICAgICAgICAgICAgcHJvdmlkZXJPclRva2VuUGF0aCA6XG4gICAgICAgICAgICBuZXcgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIocHJvdmlkZXJPclRva2VuUGF0aCwgKG9wdGlvbnMgJiYgb3B0aW9ucy50b2tlblJlc3BvbnNlTWFwcGVyKSB8fCAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICh7IHRva2VuOiB4LCBleHBpcmVzOiBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDYwIH0pOyB9KSwgb3B0aW9ucyAmJiBvcHRpb25zLnRva2VuSWQpO1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBhcGlCYXNlVXJsKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBLZWRCYWNrZW5kQ2xpZW50V2ViO1xufShLZWRCYWNrZW5kQ2xpZW50KSk7XG5leHBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50V2ViIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJleHBvcnQgKiBmcm9tICcuL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50LXdlYic7IiwiLypcbmRlY2xhcmUgdmFyIEJ1ZmZlcjsgLy8gbm9kZSBidWlsdC1pblxuXG5cbmZ1bmN0aW9uIGJhc2ljQXV0aEhlYWRlcih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICByZXR1cm4gXCJCYXNpYyBcIiArIG5ldyBCdWZmZXIodXNlcm5hbWUgKyBcIjpcIiArIHBhc3N3b3JkKS50b1N0cmluZyhcImJhc2U2NFwiKTtcbn1cbiovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9lbWl0dGVyJztcbnZhciBSZXN0Q2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFJlc3RDbGllbnQoaXNvbW9ycGhpYywgYmFzZVVybCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmlzb21vcnBoaWMgPSBpc29tb3JwaGljO1xuICAgICAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucyA9IDA7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IG5ldyBFbWl0dGVyKHRoaXMpO1xuICAgICAgICB0aGlzLmZldGNoT3B0aW9ucyA9IHsgbW9kZTogJ2NvcnMnIH07XG4gICAgICAgIHRoaXMuYXV0aEhlYWRlciA9IG9wdGlvbnMuYmVhcmVyID9cbiAgICAgICAgICAgIFwiQmVhcmVyIFwiICsgb3B0aW9ucy5iZWFyZXIgOlxuICAgICAgICAgICAgb3B0aW9ucy51c2VybmFtZSA/XG4gICAgICAgICAgICAgICAgXCJCYXNpYyBcIiArIGlzb21vcnBoaWMuYnRvYShvcHRpb25zLnVzZXJuYW1lICsgXCI6XCIgKyAob3B0aW9ucy5wYXNzd29yZCB8fCBcIlwiKSkgOlxuICAgICAgICAgICAgICAgIG51bGw7XG4gICAgICAgIHRoaXMuYmVhcmVyUHJvdmlkZXIgPSBvcHRpb25zLmJlYXJlclByb3ZpZGVyIHx8IG51bGw7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZXN0Q2xpZW50LnByb3RvdHlwZSwgXCJzdGF0dXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24gKHBhdGgsIG1ldGhvZCwgaGVhZGVycywgcXVlcnksIGZldGNoT3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICArK3RoaXMubnVtT3V0c3RhbmRpbmdPcGVyYXRpb25zO1xuICAgICAgICB0aGlzLl9zdGF0dXMuZGlzcGF0Y2godGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzLl9mZXRjaChwYXRoLCBtZXRob2QsIGhlYWRlcnMsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICAtLV90aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucztcbiAgICAgICAgICAgIF90aGlzLl9zdGF0dXMuZGlzcGF0Y2goX3RoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgLS1fdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnM7XG4gICAgICAgICAgICBfdGhpcy5fc3RhdHVzLmRpc3BhdGNoKF90aGlzKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLl9mZXRjaCA9IGZ1bmN0aW9uIChwYXRoLCBtZXRob2QsIGhlYWRlcnMsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcXVlcnlTdHIsIF9hLCBhdXRoSGVhZGVyLCB0b2tlbkluZm8sIGJlYXJlclByb3ZpZGVyLCBfYiwgX2MsIHVybCwgcmVzLCB3d3dhdXRoLCBfZDtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfZSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZldGNoT3B0aW9ucyAmJiBmZXRjaE9wdGlvbnMuY2FjaGUgPT09ICduby1jYWNoZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBiYWNrLWJ1dHRvbiBub3QgcmVzcGVjdGluZyBjYWNoZSBjb250cm9sIGluIENocm9tZS9PcGVyYS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgYSBxdWVyeSBwYXJhbWV0ZXIgdG8gZm9yY2UgYSBjYWNoZSBlbnRyeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgcXVlcnksIHsgbm9jYWNoZTogY3JlYXRlVVVJRCgpIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlTdHIgPSBxdWVyeSAmJiBPYmplY3Qua2V5cyhxdWVyeSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIHF1ZXJ5W2tleV0gIT09IHVuZGVmaW5lZDsgfSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIj1cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeVtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyYnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcywgYXV0aEhlYWRlciA9IF9hLmF1dGhIZWFkZXIsIHRva2VuSW5mbyA9IF9hLnRva2VuSW5mbywgYmVhcmVyUHJvdmlkZXIgPSBfYS5iZWFyZXJQcm92aWRlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKCFhdXRoSGVhZGVyICYmICF0b2tlbkluZm8gJiYgYmVhcmVyUHJvdmlkZXIpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJlYXJlclByb3ZpZGVyLmdldEJlYXJlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudG9rZW5JbmZvID0gdG9rZW5JbmZvID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRva2VuSW5mbykgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0b2tlbkluZm8uZXhwaXJlcyA8IERhdGUubm93KCkpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVG9rZW4gZXhwaXJlZC4gUmVmcmVzaCBpdDpcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBiZWFyZXJQcm92aWRlci5yZWZyZXNoQmVhcmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50b2tlbkluZm8gPSB0b2tlbkluZm8gPSBfZS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhIZWFkZXIgPSBcIkJlYXJlciBcIiArIHRva2VuSW5mby50b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gNTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW4gb25lIHdheSBvciBhbm90aGVyLCB3ZSd2ZSBjb25jbHVkZWQgYW4gQXV0aG9yaXphdGlvbiBoZWFkZXIgdG8gdXNlOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF1dGhIZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBhdXRoSGVhZGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gdGhpcy5iYXNlVXJsICsgcGF0aCArIChxdWVyeVN0ciA/IFwiP1wiICsgcXVlcnlTdHIgOiBcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaXNvbW9ycGhpYy5mZXRjaCh1cmwsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuZmV0Y2hPcHRpb25zLCB7IGhlYWRlcnM6IGhlYWRlcnMsIG1ldGhvZDogbWV0aG9kIH0sIGZldGNoT3B0aW9ucykpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyA9PSA0MDEgJiYgdGhpcy5iZWFyZXJQcm92aWRlcikpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xuICAgICAgICAgICAgICAgICAgICAgICAgd3d3YXV0aCA9IHJlcy5oZWFkZXJzLmdldChcInd3dy1hdXRoZW50aWNhdGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCBcIiArIHJlcy5zdGF0dXMgKyBcIiBmcm9tIFwiICsgKHRoaXMuYmFzZVVybCArIHBhdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHd3d2F1dGggJiYgL0JlYXJlci9pLnRlc3Qod3d3YXV0aCkpKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuYmVhcmVyUHJvdmlkZXIucmVmcmVzaEJlYXJlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICAgICAgX2QudG9rZW5JbmZvID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gXCJCZWFyZXIgXCIgKyB0aGlzLnRva2VuSW5mby50b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaXNvbW9ycGhpYy5mZXRjaCh1cmwsIHRzbGliXzEuX19hc3NpZ24oe30sIHRoaXMuZmV0Y2hPcHRpb25zLCB7IGhlYWRlcnM6IGhlYWRlcnMsIG1ldGhvZDogbWV0aG9kIH0sIGZldGNoT3B0aW9ucykpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSA5O1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMiAvKnJldHVybiovLCByZXNdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXRoLCBxdWVyeSwgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKHBhdGgsIFwiR0VUXCIsIHsgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb247IHRleHQvcGxhaW5cIiB9LCBxdWVyeSwgZmV0Y2hPcHRpb25zKTtcbiAgICB9O1xuICAgIFJlc3RDbGllbnQucHJvdG90eXBlLnBvc3QgPSBmdW5jdGlvbiAocGF0aCwgZGF0YSwgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKHBhdGgsIFwiUE9TVFwiLCB7XG4gICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgICAgIFwiQWNjZXB0XCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgICAgIH0sIG51bGwsIHRzbGliXzEuX19hc3NpZ24oe30sIGZldGNoT3B0aW9ucywgeyBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSB9KSk7XG4gICAgfTtcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAocGF0aCwgcXVlcnksIGJvZHksIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChwYXRoLCBcIkRFTEVURVwiLCB7IEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uOyB0ZXh0L3BsYWluXCIgfSwgcXVlcnksIHRzbGliXzEuX19hc3NpZ24oe30sIGZldGNoT3B0aW9ucywgeyBib2R5OiBib2R5IH0pKTtcbiAgICB9O1xuICAgIHJldHVybiBSZXN0Q2xpZW50O1xufSgpKTtcbmV4cG9ydCB7IFJlc3RDbGllbnQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc3RjbGllbnQuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICcuL3Jlc3RjbGllbnQnO1xuaW1wb3J0IHsgYXZvaWRTaW11bHRhbm91c0NhbGxzIH0gZnJvbSAnLi91dGlscyc7XG52YXIgS2VkQmVhcmVyUHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gS2VkQmVhcmVyUHJvdmlkZXIoaXNvbW9ycGhpYywgc3RvcmFnZSwgdG9rZW5JZCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCwgdG9rZW5VcmwsIHRva2VuUXVlcnkpIHtcbiAgICAgICAgdGhpcy5pc29tb3JwaGljID0gaXNvbW9ycGhpYztcbiAgICAgICAgdGhpcy5zdG9yYWdlID0gc3RvcmFnZTtcbiAgICAgICAgdGhpcy50b2tlbklkID0gdG9rZW5JZDtcbiAgICAgICAgdGhpcy5jbGllbnRJZCA9IGNsaWVudElkO1xuICAgICAgICB0aGlzLmNsaWVudFNlY3JldCA9IGNsaWVudFNlY3JldDtcbiAgICAgICAgdGhpcy50b2tlblVybCA9IHRva2VuVXJsO1xuICAgICAgICB0aGlzLnRva2VuUXVlcnkgPSB0b2tlblF1ZXJ5O1xuICAgICAgICB0aGlzLnRva2VuSW5mbyA9IHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfTtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgUmVzdENsaWVudChpc29tb3JwaGljLCBcIlwiLCB7XG4gICAgICAgICAgICB1c2VybmFtZTogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLmNsaWVudFNlY3JldFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5nZXRCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRCZWFyZXIuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMucmVmcmVzaEJlYXJlciA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzLnJlZnJlc2hCZWFyZXIuYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIEtlZEJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5nZXRCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCB0b2tlbiwgZXhwaXJlcywgX2IsIGVfMTtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzLnRva2VuSW5mbywgdG9rZW4gPSBfYS50b2tlbiwgZXhwaXJlcyA9IF9hLmV4cGlyZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4gJiYgZXhwaXJlcyA+PSBEYXRlLm5vdygpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMSwgNCwgLCA2XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnN0b3JhZ2UubG9hZCh0aGlzLmNsaWVudElkICsgXCIvXCIgKyB0aGlzLnRva2VuSWQpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudG9rZW5JbmZvID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudG9rZW5JbmZvLnRva2VuICYmIHRoaXMudG9rZW5JbmZvLmV4cGlyZXMgPj0gRGF0ZS5ub3coKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZWZyZXNoQmVhcmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hCZWFyZXIoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5yZWZyZXNoQmVhcmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciByZXMsIHJldHJpZXMsIF9hLCBfYjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cmllcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJldHJpZXMgPCA2KSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJldHJpZXZpbmcgdG9rZW4gZm9yIFwiICsgdGhpcy50b2tlbklkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2xpZW50LmdldCh0aGlzLnRva2VuVXJsLCB0aGlzLnRva2VuUXVlcnksIHsgY2FjaGU6ICdyZWxvYWQnIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkdvdCBcIiArIHJlcy5zdGF0dXMgKyBcIiBcIiArIHJlcy5zdGF0dXNUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudG9rZW5JbmZvID0gKF9iLnRva2VuID0gX2Muc2VudCgpLCBfYi5leHBpcmVzID0gRGF0ZS5ub3coKSArIDU5ICogNjAgKiAxMDAwLCBfYik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCB0b2tlbiBmb3IgXCIgKyB0aGlzLnRva2VuSWQgKyBcIjogXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnRva2VuSW5mbykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9yYWdlLnNhdmUodGhpcy5jbGllbnRJZCArIFwiL1wiICsgdGhpcy50b2tlbklkLCB0aGlzLnRva2VuSW5mbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICArK3JldHJpZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmV0cmlldmUgdG9rZW4gZm9yIFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy50b2tlbklkKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEtlZEJlYXJlclByb3ZpZGVyO1xufSgpKTtcbmV4cG9ydCB7IEtlZEJlYXJlclByb3ZpZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWQtYmVhcmVyLXByb3ZpZGVyLmpzLm1hcCIsInZhciBEb2N1bWVudEFjY2VzcyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb2N1bWVudEFjY2VzcyhhY2Nlc3NDbGFpbVR5cGUsIGFjY2Vzc0NsYWltVmFsdWUsIHJpZ2h0KSB7XG4gICAgICAgIHRoaXMuYWNjZXNzQ2xhaW1UeXBlID0gYWNjZXNzQ2xhaW1UeXBlO1xuICAgICAgICB0aGlzLmFjY2Vzc0NsYWltVmFsdWUgPSBhY2Nlc3NDbGFpbVZhbHVlO1xuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XG4gICAgfVxuICAgIERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmcgPSBmdW5jdGlvbiAoYWMpIHtcbiAgICAgICAgaWYgKCFhYylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgc3BsaXQgPSBhYy5zcGxpdCgnOicpO1xuICAgICAgICBpZiAoc3BsaXQubGVuZ3RoIDwgMylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgYWNjZXNzIHN0cmluZzogXCIgKyBhYyk7XG4gICAgICAgIHZhciBjbGFpbVR5cGUgPSBEb2N1bWVudEFjY2Vzcy51bmVzY2FwZShzcGxpdFswXSk7XG4gICAgICAgIHZhciBjbGFpbVZhbHVlID0gRG9jdW1lbnRBY2Nlc3MudW5lc2NhcGUoc3BsaXRbMV0pO1xuICAgICAgICB2YXIgcmlnaHQgPSBzcGxpdFsyXTtcbiAgICAgICAgaWYgKHJpZ2h0ICE9PSAnUicgJiYgcmlnaHQgIT09ICdXJyAmJiByaWdodCAhPT0gJ1MnKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhY2Nlc3Mgc3RyaW5nOiBcIiArIGFjKTtcbiAgICAgICAgcmV0dXJuIG5ldyBEb2N1bWVudEFjY2VzcyhjbGFpbVR5cGUsIGNsYWltVmFsdWUsIHJpZ2h0KTtcbiAgICB9O1xuICAgIERvY3VtZW50QWNjZXNzLmVzY2FwZSA9IGZ1bmN0aW9uIChhY2Nlc3NDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIGFjY2Vzc0NvbXBvbmVudC5yZXBsYWNlKC9cXCUvZywgXCIlMjVcIikucmVwbGFjZSgvXFw6L2csIFwiJTNBXCIpO1xuICAgIH07XG4gICAgRG9jdW1lbnRBY2Nlc3MudW5lc2NhcGUgPSBmdW5jdGlvbiAoYWNjZXNzQ29tcG9uZW50KSB7XG4gICAgICAgIHJldHVybiBhY2Nlc3NDb21wb25lbnQucmVwbGFjZSgvXFwlM0EvZywgXCI6XCIpLnJlcGxhY2UoL1xcJTI1L2csIFwiJVwiKTtcbiAgICB9O1xuICAgIERvY3VtZW50QWNjZXNzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIERvY3VtZW50QWNjZXNzLmVzY2FwZSh0aGlzLmFjY2Vzc0NsYWltVHlwZSkgKyBcIjpcIiArXG4gICAgICAgICAgICBEb2N1bWVudEFjY2Vzcy5lc2NhcGUodGhpcy5hY2Nlc3NDbGFpbVZhbHVlKSArIFwiOlwiICtcbiAgICAgICAgICAgIHRoaXMucmlnaHQ7XG4gICAgfTtcbiAgICBEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nQXJyYXkgPSBmdW5jdGlvbiAoYWNsKSB7XG4gICAgICAgIHJldHVybiBhY2xcbiAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGFjKSB7IHJldHVybiBEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nKGFjKTsgfSlcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGFjKSB7IHJldHVybiBhYzsgfSk7XG4gICAgfTtcbiAgICBEb2N1bWVudEFjY2Vzcy50b1N0cmluZ0FycmF5ID0gZnVuY3Rpb24gKGFjbCkge1xuICAgICAgICByZXR1cm4gYWNsLm1hcChmdW5jdGlvbiAoYWMpIHsgcmV0dXJuIGFjLnRvU3RyaW5nKCk7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIERvY3VtZW50QWNjZXNzO1xufSgpKTtcbmV4cG9ydCB7IERvY3VtZW50QWNjZXNzIH07XG5leHBvcnQgZnVuY3Rpb24gaGFzQWNjZXNzKGFjbCwgdXNlckNsYWltcywgcmVxdWVzdGVkUmlnaHQpIHtcbiAgICBpZiAodXNlckNsYWltcy5zb21lKGZ1bmN0aW9uIChjbGFpbSkgeyByZXR1cm4gY2xhaW0udHlwZSA9PT0gJ3JvbGUnICYmIGNsYWltLnZhbHVlID09PSBcIkFETUlOXCI7IH0pKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gYWNsLnNvbWUoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgcmV0dXJuIHVzZXJDbGFpbXMuc29tZShmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIGEuYWNjZXNzQ2xhaW1UeXBlID09PSBjLnR5cGUgJiZcbiAgICAgICAgICAgICAgICBhLmFjY2Vzc0NsYWltVmFsdWUgPT09IGMudmFsdWUgJiYgKChhLnJpZ2h0ID09PSAnUicgJiYgcmVxdWVzdGVkUmlnaHQgPT09ICdSJykgfHxcbiAgICAgICAgICAgICAgICAoYS5yaWdodCA9PT0gJ1cnICYmIFsnUicsICdXJ10uaW5kZXhPZihyZXF1ZXN0ZWRSaWdodCkgPj0gMCkgfHxcbiAgICAgICAgICAgICAgICAoYS5yaWdodCA9PT0gJ1MnKSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWNjZXNzLWNvbnRyb2wuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbnZhciBIdHRwRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSHR0cEVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEh0dHBFcnJvcihjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIFwiSFRUUFwiICsgY29kZSArIFwiIFwiICsgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICBfdGhpcy5uYW1lID0gXCJodHRwXCIgKyBjb2RlO1xuICAgICAgICBfdGhpcy5tZXNzYWdlID0gXCJIVFRQXCIgKyBjb2RlICsgXCIgXCIgKyBtZXNzYWdlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBIdHRwRXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnQgeyBIdHRwRXJyb3IgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAtZXJyb3IuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICcuL3Jlc3RjbGllbnQnO1xuZXhwb3J0ICogZnJvbSAnLi91dGlscyc7XG5leHBvcnQgeyBLZWRCZWFyZXJQcm92aWRlciB9IGZyb20gJy4va2VkLWJlYXJlci1wcm92aWRlcic7XG5leHBvcnQgKiBmcm9tICcuL2FjY2Vzcy1jb250cm9sJztcbmV4cG9ydCB7IFJlc3RDbGllbnQgfTtcbmltcG9ydCB7IEh0dHBFcnJvciB9IGZyb20gJy4vaHR0cC1lcnJvcic7XG5leHBvcnQgeyBIdHRwRXJyb3IgfTtcbmV4cG9ydCAqIGZyb20gJy4vcmVzdGNsaWVudCc7XG47XG52YXIgS2VkQmFja2VuZENsaWVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kQ2xpZW50KGlzb21vcnBoaWMsIGJlYXJlclByb3ZpZGVyLCBiYXNlVXJsKSB7XG4gICAgICAgIHRoaXMuaHR0cCA9IG5ldyBSZXN0Q2xpZW50KGlzb21vcnBoaWMsIGJhc2VVcmwsIHsgYmVhcmVyUHJvdmlkZXI6IGJlYXJlclByb3ZpZGVyIH0pO1xuICAgIH1cbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5nZXRNeUNsYWltcyA9IGZ1bmN0aW9uICh0YWJsZSwgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQoXCJtZS9jbGFpbXMvXCIgKyAodGFibGUgfHwgXCJcIiksIG51bGwsIGZldGNoT3B0aW9ucyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQodGFibGUgKyBcIi9cIiArIGlkLCBvcHRpb25zLCBmZXRjaE9wdGlvbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLnRleHQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCBfYy5zZW50KCldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmxpc3QgPSBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMsIGZldGNoT3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBxdWVyeSwgcmVzLCBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5ID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm11dGF0aW9uc09uRW1wdHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkubXV0YXRpb25zT25FbXB0eSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMubXV0YXRpb25zT25FbXB0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZ2V0KFwiXCIgKyB0YWJsZSwgcXVlcnksIGZldGNoT3B0aW9ucyldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBIdHRwRXJyb3IuYmluZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOiB0aHJvdyBuZXcgKF9hLmFwcGx5KEh0dHBFcnJvciwgX2IuY29uY2F0KFtfYy5zZW50KCldKSkpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuYmF0Y2ggPSBmdW5jdGlvbiAocmVxcywgZmV0Y2hPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW9yZGVyIG9wZXJhdGlvbnMgc28gdGhhdCAnYWRkJ3MgY29tZSBmaXJzdCBhbmQgJ2RlbGV0ZSdzIGNvbWUgbGFzdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXMgPSByZXFzLnNsaWNlKCkuc29ydChmdW5jdGlvbiAocmVxMSwgcmVxMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXExLm9wID09PSAnYWRkJyA/IC0xIDogcmVxMi5vcCA9PT0gJ2FkZCcgPyAxIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxMS5vcCA9PT0gJ2RlbGV0ZScgPyAxIDogcmVxMi5vcCA9PT0gJ2RlbGV0ZScgPyAtMSA6IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5wb3N0KFwiYmF0Y2hcIiwgcmVxcywgZmV0Y2hPcHRpb25zKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5kbyA9IGZ1bmN0aW9uIChzY29wZUZuKSB7XG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJ1bm5lcjtcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmVyID0gbmV3IEJhdGNoUnVubmVyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZUZuKHJ1bm5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmJhdGNoKHJ1bm5lci5tdXRhdGlvblJlcXVlc3RzKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZGVsZXRlUmVhbG0gPSBmdW5jdGlvbiAocmVhbG0pIHtcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmRlbGV0ZShcInJlYWxtcy9cIiArIHJlYWxtKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2IgPSBbdm9pZCAwLCByZXMuc3RhdHVzXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMuanNvbigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGFibGUsIGRvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuYWRkKHRhYmxlLCBkb2MpOyB9KTtcbiAgICB9O1xuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnB1dCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnB1dCh0YWJsZSwgZG9jKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudXBkYXRlKHRhYmxlLCBpZCwgZGVsdGFEb2MsIGJyYW5jaElkKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIubWVyZ2UoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5jbGVhckJyYW5jaCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5jbGVhckJyYW5jaChicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5kZWxldGUodGFibGUsIGlkKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5zaGFyZSh0YWJsZSwgaWQsIGFjbCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bnNoYXJlKHRhYmxlLCBpZCwgYWNsKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5saW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRJZCwgbGFiZWwsIGJyYW5jaElkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmxpbmsyKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUudW5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmxpbmsoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKTsgfSk7XG4gICAgfTtcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51bmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0SWQsIGxhYmVsLCBicmFuY2hJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci51bmxpbmsyKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCk7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIEtlZEJhY2tlbmRDbGllbnQ7XG59KCkpO1xuZXhwb3J0IHsgS2VkQmFja2VuZENsaWVudCB9O1xudmFyIEJhdGNoUnVubmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJhdGNoUnVubmVyKCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMgPSBbXTtcbiAgICB9XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jLCBicmFuY2hJZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnYWRkJywgdGFibGU6IHRhYmxlLCBkb2M6IGRvYywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAodGFibGUsIGRvYykge1xuICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MpO1xuICAgICAgICBkZWxldGUgZG9jLmFjbDsgLy8gRm9yYmlkZGVuIHRvIHNlbmQgYWNsIHdpdGggcHV0KCkgY2FsbHMuXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdwdXQnLCB0YWJsZTogdGFibGUsIGRvYzogZG9jIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpIHtcbiAgICAgICAgZGVsdGFEb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkZWx0YURvYyk7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1cGRhdGUnLCB0YWJsZTogdGFibGUsIGlkOiBpZCwgZGVsdGFEb2M6IGRlbHRhRG9jLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdtZXJnZScsIGJyYW5jaElkOiBicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQ6IHRhcmdldEJyYW5jaElkIH0pO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmNsZWFyQnJhbmNoID0gZnVuY3Rpb24gKGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdjbGVhci1icmFuY2gnLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnZGVsZXRlJywgdGFibGU6IHRhYmxlLCBpZDogaWQgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnNoYXJlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgYWNsKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdzaGFyZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBhY2w6IGFjbCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5zaGFyZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBhY2w6IGFjbCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2xpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0VGFibGU6IHRhcmdldFRhYmxlLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdsaW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XG4gICAgfTtcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5saW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldFRhYmxlOiB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bmxpbmsnLCBzb3VyY2VUYWJsZTogc291cmNlVGFibGUsIHNvdXJjZUlkOiBzb3VyY2VJZCwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwsIGJyYW5jaElkOiBicmFuY2hJZCB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQmF0Y2hSdW5uZXI7XG59KCkpO1xuZXhwb3J0IHsgQmF0Y2hSdW5uZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IFRlcm0sIEFjYWRlbWljWWVhciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBTY2hvb2xNb21lbnQge1xuICBhY2FkZW1pY1llYXI6IEFjYWRlbWljWWVhcjtcbiAgdGVybTogVGVybTtcbiAgd2Vlaz86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpcnN0QW5kTGFzdFdlZWtPZlRlcm0odGVybTogVGVybSkge1xuICByZXR1cm4gdGVybSA9PT0gJ0FUJyA/XG4gICAgWzMyLCA1MV0gOlxuICAgIFsxLCAyNV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXJtU3RhcnRBbmRFbmQobm93OiBtb21lbnQuTW9tZW50KSA6IG1vbWVudC5Nb21lbnRbXSB7XG4gIHJldHVybiBub3cubW9udGgoKSA+PSA2ID8gLy8gNiA9IEp1bHkgaW4gSlMgRGF0ZXMgYW5kIGluIG1vbWVudCBhcyB3ZWxsIVxuICAgIFttb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgNywgMSkpLCBtb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgMTEsIDMxKSldIDogLy8gYXVnMSAtIGRlYzMxXG4gICAgW21vbWVudChuZXcgRGF0ZShub3cueWVhcigpLCAwLCAxKSksIG1vbWVudChuZXcgRGF0ZShub3cueWVhcigpLCA2LCAzMSkpXTsgLy8gamFuMSAtIGp1bHkzMVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2Nob29sTW9tZW50KG06IG1vbWVudC5Nb21lbnQpOiBTY2hvb2xNb21lbnQge1xuICBjb25zdCB0aGlzWWVhciA9IG0ueWVhcigpO1xuICBjb25zdCBpc0F1dHVtbiA9IG0ubW9udGgoKSA+PSA2O1xuICBjb25zdCBbYXV0dW1uWWVhciwgc3ByaW5nWWVhcl0gPSBpc0F1dHVtbiA/XG4gICAgW3RoaXNZZWFyLCB0aGlzWWVhciArIDFdIDpcbiAgICBbdGhpc1llYXIgLSAxLCB0aGlzWWVhcl07XG4gIGNvbnN0IGFjYWRlbWljWWVhciA9ICcnICsgYXV0dW1uWWVhciArICcvJyArIHNwcmluZ1llYXI7XG4gIGNvbnN0IHRlcm0gPSBpc0F1dHVtbiA/ICdBVCcgOiAnU1QnO1xuICBjb25zdCB3ZWVrID0gbS53ZWVrKCk7XG4gIHJldHVybiB7IGFjYWRlbWljWWVhciwgdGVybSwgd2VlayB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyLCBudW1ZZWFyc1RvQWRkOiBudW1iZXIpOiBBY2FkZW1pY1llYXIge1xuICByZXR1cm4gYVllYXIuc3BsaXQoJy8nKVxuICAgIC5tYXAoeWVhclN0ciA9PiBwYXJzZUludCh5ZWFyU3RyKSArIG51bVllYXJzVG9BZGQpXG4gICAgLm1hcCh5ZWFyID0+ICcnICsgeWVhcilcbiAgICAuam9pbignLycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV4dEFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJldkFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIC0xKTtcbn1cbiIsIi8qIFJFRkFDVE9SOiBNb3ZlIHRoaXMgY29tcG9uZW50IG91dHNpZGUgY291cnNlYnVpbGRlciFcbiAgIFRoaXMgaXMgYSBnZW5lcmFsLXB1cnBvc2UgY29tcG9uZW50XG4qL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHRpdGxlOiBzdHJpbmcgfCBKU1guRWxlbWVudDtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBoZWFkZXJDbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNvbnRlbnRDbGFzc05hbWU/OiBzdHJpbmc7XG4gIGhlYWRlck9wZW4/OiBib29sZWFuO1xuICBvbk9wZW5DbG9zZT86IChiZWNhbWVPcGVuOiBib29sZWFuKSA9PiB2b2lkO1xuICBjaGlsZHJlbjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgaGVhZGVyT3BlbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIE9wZW5DbG9zZUJveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhlYWRlck9wZW46IHByb3BzLmhlYWRlck9wZW4gfHwgZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzOiBQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuaGVhZGVyT3BlbiAhPT0gdGhpcy5wcm9wcy5oZWFkZXJPcGVuKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtoZWFkZXJPcGVuOiBuZXh0UHJvcHMuaGVhZGVyT3Blbn0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHRpdGxlLCBjbGFzc05hbWUsIGNoaWxkcmVuLCBoZWFkZXJDbGFzc05hbWUsIGNvbnRlbnRDbGFzc05hbWUgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBoZWFkZXJPcGVuIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXsoY2xhc3NOYW1lfHwnJykgKyBcIiBvcGVuQ2xvc2VcIiArIChoZWFkZXJPcGVuID8gXCIgb3BlblwiIDogXCJcIil9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkhlYWRlclwiICsgKGhlYWRlckNsYXNzTmFtZSA/IFwiIFwiICsgaGVhZGVyQ2xhc3NOYW1lIDogXCJcIil9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy5vbk9wZW5DbG9zZSkgdGhpcy5wcm9wcy5vbk9wZW5DbG9zZSghdGhpcy5zdGF0ZS5oZWFkZXJPcGVuKTtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGVhZGVyT3BlbjogIXRoaXMuc3RhdGUuaGVhZGVyT3BlbiB9KTtcbiAgICAgICAgfX0gPlxuICAgICAgICB7dGl0bGV9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcIm9wZW5Db250ZW50XCIgKyAoY29udGVudENsYXNzTmFtZSA/IFwiIFwiICsgY29udGVudENsYXNzTmFtZSA6IFwiXCIpfT5cbiAgICAgICAge2NoaWxkcmVufVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+O1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgVmFsdWUgfSBmcm9tIFwiLi92YWx1ZVwiO1xudmFyIEVtaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoRW1pdHRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBFbWl0dGVyKGluaXRpYWxWYWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnN1YnNjcmliZXJzID0gX3RoaXMuc3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IF9hWzBdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcyAhPT0gb2JzZXJ2ZXI7XG4gICAgICAgICAgICAgICAgfSk7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlcnMucHVzaChbb2JzZXJ2ZXIsIHN1YnNjcmlwdGlvbl0pO1xuICAgICAgICAgICAgaWYgKF90aGlzLmVycm9yKVxuICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIF90aGlzLmVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9ic2VydmVyKF90aGlzLnZhbHVlLCB1bmRlZmluZWQsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgICAgICB9KSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xuICAgICAgICBfdGhpcy52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBFbWl0dGVyLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoKCk7XG4gICAgfTtcbiAgICBFbWl0dGVyLnByb3RvdHlwZS5kaXNwYXRjaEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2goKTtcbiAgICB9O1xuICAgIEVtaXR0ZXIucHJvdG90eXBlLl9kaXNwYXRjaCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2FbMF0sIHN1YnNjcmlwdGlvbiA9IF9hWzFdO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihfdGhpcy52YWx1ZSwgX3RoaXMuZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBFbWl0dGVyO1xufShWYWx1ZSkpO1xuZXhwb3J0IHsgRW1pdHRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1pdHRlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL29ic2VydmFibGVcIjtcbmltcG9ydCB7IGluaXRNYXBNZXRob2QgfSBmcm9tIFwiLi9tYXBcIjtcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tIFwiLi9jb2xsZWN0aW9uXCI7XG52YXIgVmFsdWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoVmFsdWUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gVmFsdWUoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBzdWJzY3JpYmUpIHx8IHRoaXM7XG4gICAgfVxuICAgIFZhbHVlLmZyb20gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICBpZiAoeC5zdWJzY3JpYmUpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlLmZyb20oKSBjYW4gb25seSB0YWtlIG9ic2VydmFibGVzXCIpO1xuICAgIH07XG4gICAgVmFsdWUucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NpcHRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY2lwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVmFsdWUucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgZWxzZSBpZiAoZm4odmFsdWUpKVxuICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSk7IH0pO1xuICAgIH07XG4gICAgVmFsdWUucHJvdG90eXBlLmxvZyA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhwcmVmaXgsIHgpO1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVmFsdWUucHJvdG90eXBlLnRvQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy5tYXAobWFwcGVyKS5zdWJzY3JpYmUocyk7IH0pO1xuICAgIH07XG4gICAgVmFsdWUucHJvdG90eXBlLmNvbWJpbmVMYXRlc3QgPSBmdW5jdGlvbiAob3RoZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbbnVsbCwgbnVsbF07XG4gICAgICAgICAgICB2YXIgbXlTdWJzY3JpcHRpb24sIG90aGVyU3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBteVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBvdGhlclN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBteVN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoaXRlbXMsIGVycm9yLCBzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlc1swXSA9IGl0ZW1zO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbMV0gIT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlcywgbnVsbCwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgb3RoZXJTdWJzY3JpcHRpb24gPSBvdGhlci5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgcykge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZXNbMV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzWzBdICE9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcih2YWx1ZXMsIG51bGwsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgVmFsdWUucHJvdG90eXBlLnN3aXRjaE1hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIHZhciBtYXBwZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgICAgICB2YXIgcmV0dXJuZWRTdWJzY3JpcHRpb24gPSB7XG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXBwZWRTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKGl0ZW0sIGVycm9yLCBzKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uID0gcztcbiAgICAgICAgICAgICAgICBpZiAobWFwcGVkU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCByZXR1cm5lZFN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2YWJsZU9yVmFsdWUgPSBtYXBwZXIoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZU9yVmFsdWUgJiYgdHlwZW9mIG9ic2VydmFibGVPclZhbHVlLnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IG9ic2VydmFibGVPclZhbHVlLnN1YnNjcmliZShmdW5jdGlvbiAodmFsdWUsIGVycm9yLCBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZFN1YnNjcmlwdGlvbiA9IHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlLCBlcnJvciwgcmV0dXJuZWRTdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIob2JzZXJ2YWJsZU9yVmFsdWUsIG51bGwsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJldHVybmVkU3Vic2NyaXB0aW9uO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBWYWx1ZTtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgVmFsdWUgfTtcblZhbHVlLnByb3RvdHlwZS5tYXAgPSBpbml0TWFwTWV0aG9kKFZhbHVlKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbHVlLmpzLm1hcCIsInZhciBPYnNlcnZhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8vc3RhdGljIGdldCBbU3ltYm9sLnNwZWNpZXNdKCkgeyByZXR1cm4gdGhpczsgfVxuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoX3N1YnNjcmliZSkge1xuICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBfc3Vic2NyaWJlO1xuICAgIH1cbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoZnVuY3Rpb24gKGl0ZW1zLCBlcnJvciwgc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIoaXRlbXMsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVyciwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCB7IHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7IH0gfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBPYnNlcnZhYmxlO1xufSgpKTtcbmV4cG9ydCB7IE9ic2VydmFibGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiXG5leHBvcnQgY29uc3QgS0VEX05BTUVTUEFDRSA9IFwiS0VEXCI7XG5cbmRlY2xhcmUgdmFyIEtFRDogYW55O1xuXG52YXIgcmVzdWx0ID0gdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcgPyB7fSA6IEtFRDtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93W0tFRF9OQU1FU1BBQ0VdID0gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCIuL29ic2VydmFibGVcIjtcbmltcG9ydCB7IGluaXRNYXBNZXRob2QgfSBmcm9tIFwiLi9tYXBcIjtcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vdmFsdWVcIjtcbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tIFwiLi9lbWl0dGVyXCI7XG52YXIgQ29sbGVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb2xsZWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIENvbGxlY3Rpb24oc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBzdWJzY3JpYmUpIHx8IHRoaXM7XG4gICAgfVxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLl9tYXAgPSBmdW5jdGlvbiAobWFwcGVyKSB7XG4gICAgICAgIHRocm93IFwibWl4ZWRpblwiO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5mcm9tID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgaWYgKHguc3Vic2NyaWJlKVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHgpKSB7XG4gICAgICAgICAgICB2YXIgZW1pdHRlcl8xID0gbmV3IEVtaXR0ZXIoeCk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGVtaXR0ZXJfMS5zdWJzY3JpYmUocyk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9ic2VydmFibGVDb2xsZWN0aW9uLmZyb20oKSBjYW4gb25seSB0YWtlIGFycmF5cyBvciBvYnNlcnZhYmxlc1wiKTtcbiAgICB9O1xuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gbWFwcGVyKGl0ZW0pOyB9KTsgfSk7XG4gICAgfTtcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5mbGF0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwKGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gW10uY29uY2F0LmFwcGx5KFtdLCBpdGVtcyk7IH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuZmlsdGVyID0gZnVuY3Rpb24gKGZpbHRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwKGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gaXRlbXMuZmlsdGVyKGZpbHRlcik7IH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBDb2xsZWN0aW9uLmZyb20odGhpcy50b1ZhbHVlKCkuY29tYmluZUxhdGVzdChvdGhlcikubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIG1lID0gX2FbMF0sIG90aGVyID0gX2FbMV07XG4gICAgICAgICAgICByZXR1cm4gbWUuY29uY2F0KG90aGVyKTtcbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUub3JkZXJCeSA9IGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGFycmF5KSB7IHJldHVybiBhcnJheS5zbGljZSgpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIHZhciBhUHJvcCA9IGEgJiYgYVtwcm9wXTtcbiAgICAgICAgICAgIHZhciBiUHJvcCA9IGIgJiYgYltwcm9wXTtcbiAgICAgICAgICAgIHJldHVybiBhUHJvcCA+IGJQcm9wID8gMSA6IGFQcm9wIDwgYlByb3AgPyAtMSA6IDA7XG4gICAgICAgIH0pOyB9KS50b0NvbGxlY3Rpb24oZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUudG9WYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAocykgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlKHMpOyB9KTtcbiAgICB9O1xuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmdyb3VwQnkgPSBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgdmFyIHJ2ID0ge307XG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBydltpdGVtW3Byb3BdXSB8fCAocnZbaXRlbVtwcm9wXV0gPSBbXSk7XG4gICAgICAgICAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcnY7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGFycikgeyByZXR1cm4gYXJyWzBdOyB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDb2xsZWN0aW9uO1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBDb2xsZWN0aW9uIH07XG5Db2xsZWN0aW9uLnByb3RvdHlwZS5fbWFwID0gaW5pdE1hcE1ldGhvZChDb2xsZWN0aW9uKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbGxlY3Rpb24uanMubWFwIiwiXG5leHBvcnQgY29uc3QgS0VEX05BTUVTUEFDRSA9IFwiS0VEXCI7XG5cbmRlY2xhcmUgdmFyIEtFRDogYW55O1xuXG52YXIgcmVzdWx0ID0gdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcgPyB7fSA6IEtFRDtcblxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgd2luZG93W0tFRF9OQU1FU1BBQ0VdID0gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJpbXBvcnQgeyBFRFNDb3Vyc2UsIEVEU0Fzc2Vzc21lbnQsIEVEU1N0dWR5UGxhbiwgRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHksIEVEU1N0dWRlbnQgfSBmcm9tICcuLi9jb250cmFjdHMvZWRzJztcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBJc29tb3JwaGljRW52LCBCZWFyZXJQcm92aWRlciwgSHR0cEVycm9yIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgU2Nob29sTW9tZW50IH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLW1vbWVudCc7XG5pbXBvcnQgeyBTY2hvb2xUZXJtIH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLXRlcm0nO1xuaW1wb3J0IHsgZGF0ZVRpbWVSZXZpdmVyLCBMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgRWRzQ2xpZW50IHtcbiAgaHR0cDogUmVzdENsaWVudDtcbiAgdXNlckVtYWlsR2V0dGVyOiAoKT0+c3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBpc29tb3JwaGljOiBJc29tb3JwaGljRW52LFxuICAgIGJhc2VVcmw6IHN0cmluZyxcbiAgICBiZWFyZXJQcm92aWRlcjogQmVhcmVyUHJvdmlkZXIsXG4gICAgdXNlckVtYWlsR2V0dGVyOiAoKT0+c3RyaW5nXG4gICkge1xuICAgIHRoaXMuaHR0cCA9IG5ldyBSZXN0Q2xpZW50IChpc29tb3JwaGljLCBiYXNlVXJsLCB7YmVhcmVyUHJvdmlkZXJ9KTtcbiAgICB0aGlzLnVzZXJFbWFpbEdldHRlciA9IHVzZXJFbWFpbEdldHRlcjtcbiAgICB0aGlzLmdldEFjdGl2ZUNvdXJzZXMgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRBY3RpdmVDb3Vyc2VzKTtcbiAgICB0aGlzLmdldExhdGVzdEFzc2Vzc21lbnRzID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMuZ2V0TGF0ZXN0QXNzZXNzbWVudHMpO1xuICAgIHRoaXMuZ2V0U3R1ZGVudEdvYWxzID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMuZ2V0U3R1ZGVudEdvYWxzKTtcbiAgICB0aGlzLmdldFN0dWRlbnRGdXR1cmVBYmlsaXRpZXMgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRTdHVkZW50RnV0dXJlQWJpbGl0aWVzKTtcbiAgICB0aGlzLmdldFRlYWNoZXJUdXRvclN0dWRlbnRzID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMuZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMpO1xuICB9XG5cbiAgcHJpdmF0ZSBwcml2YXRpemluZ0NhY2hlQnVzdCgpIHtcbiAgICByZXR1cm4ge3VzZXI6IHRoaXMudXNlckVtYWlsR2V0dGVyKCl9O1xuICB9XG5cbi8qKlxuICAgKiBSZXRyaWV2ZSBhY3RpdmUgY291cnNlcyBmb3IgY3VycmVudCBsb2dnZWQgaW4gc3R1ZGVudC5cbiAgICpcbiAgICogQHBhcmFtIGNvdXJzZUNvZGUgU2hvcnQtbmFtZSBvZiB0aGUgY291cnNlLiBPcHRpb25hbC5cbiAgICovXG4gIGFzeW5jIGdldEFjdGl2ZUNvdXJzZXMocToge2NvdXJzZUNvZGU/OiBzdHJpbmcsIHBlcmlvZE5hbWU6IHN0cmluZ30pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xuICAgICAgaWYgKHEpIHtcbiAgICAgICAgaWYgKHEuY291cnNlQ29kZSkgcXVlcnkuQ291cnNlQ29kZSA9IHEuY291cnNlQ29kZTtcbiAgICAgICAgaWYgKHEucGVyaW9kTmFtZSkgcXVlcnkuUGVyaW9kTmFtZSA9IHEucGVyaW9kTmFtZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJzdHVkZW50YWN0aXZlY291cnNlc1wiLCBxdWVyeSk7XG4gICAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XG4gICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICAgIHJldHVybiBqc29uLmNvdXJzZXMgYXMgRURTQ291cnNlW107XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmcm9tIEVEUzogXCIgKyBleCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTGBLdW5kZSB0eXbDpHJyIGludGUgbGFkZGEgdGVybWluc23DpWwgZWxsZXIgYXZrbGFyYWRlIHN0ZWcgZnLDpW4gRURTLiBGw7Zyc8O2ayBpZ2VuIHNlbmFyZS4uLmApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZSBsYXRlc3QgYXNzZXNzbWVudHMgZm9yIGN1cnJlbnQgbG9nZ2VkIGluIHVzZXIuXG4gICAqIFxuICAgKiBAcGFyYW0gbGltaXQgT3B0aW9uYWwgbGltaXRcbiAgICovXG4gIGFzeW5jIGdldExhdGVzdEFzc2Vzc21lbnRzKGxpbWl0PzogbnVtYmVyKSB7XG4gICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xuICAgIGlmICghaXNOYU4obGltaXQpKSBxdWVyeS5Db3VudCA9IGxpbWl0O1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJzdHVkZW50YXNzZXNzbWVudHNcIiwgcXVlcnkpO1xuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ganNvbi5hc3Nlc3NtZW50cyBhcyBFRFNBc3Nlc3NtZW50W107ICAgIFxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlIHN0dWR5cGxhbnMgZm9yIGN1cnJlbnQgbG9nZ2VkLWluIHVzZXJcbiAgICovXG4gIGFzeW5jIGdldFN0dWRlbnRHb2FscygpIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGdvYWxzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnN0dWRlbnRHb2FscyBhcyBFRFNTdHVkeVBsYW5bXTsgICAgXG4gIH1cblxuICBhc3luYyBnZXRTdHVkZW50RnV0dXJlQWJpbGl0aWVzKCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJzdHVkZW50RnV0dXJlQWJpbGl0aWVzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XG4gICAgaWYgKHJlcy5zdGF0dXMgIT0gMjAwKSB0aHJvdyBuZXcgSHR0cEVycm9yKHJlcy5zdGF0dXMsIGF3YWl0IHJlcy50ZXh0KCkpO1xuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xuICAgIHJldHVybiBqc29uLnN0dWRlbnRGdXR1cmVBYmlsaXRpZXMgYXMgRURTU3R1ZGVudEZ1dHVyZUFiaWxpdHlbXTtcbiAgfVxuXG4gIGFzeW5jIGdldFRlYWNoZXJUdXRvclN0dWRlbnRzKCkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuaHR0cC5nZXQoXCJ0ZWFjaGVydHV0b3JzdHVkZW50c1wiLCB0aGlzLnByaXZhdGl6aW5nQ2FjaGVCdXN0KCkpO1xuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICByZXR1cm4ganNvbi5zdHVkZW50cyBhcyBFRFNTdHVkZW50W107XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVEU1BlcmlvZCB7XG4gIHBlcmlvZDogc3RyaW5nO1xuICB0ZXJtOiAnQVQnIHwgJ1NUJztcbiAgeWVhcjogbnVtYmVyO1xuICBjb25zdHJ1Y3RvciAocGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtOiBzdHJpbmcgfCBTY2hvb2xNb21lbnQpIHtcbiAgICBpZiAodHlwZW9mIHBlcmlvZFN0cmluZ09yU2Nob29sVGVybSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucGVyaW9kID0gcGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtO1xuICAgICAgdGhpcy50ZXJtID0gdGhpcy5wZXJpb2Quc3RhcnRzV2l0aCgnSFQnKSA/ICdBVCcgOiAnU1QnO1xuICAgICAgdGhpcy55ZWFyID0gcGFyc2VJbnQodGhpcy5wZXJpb2Quc3Vic3RyKDIpKTtcbiAgICAgIGlmIChpc05hTih0aGlzLnllYXIpKSB0aHJvdyBuZXcgRXJyb3IgKGBJbnZhbGlkIHBlcmlvZDogJHt0aGlzLnBlcmlvZH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2Nob29sVGVybSA9IG5ldyBTY2hvb2xUZXJtKHBlcmlvZFN0cmluZ09yU2Nob29sVGVybSk7XG4gICAgICB0aGlzLnBlcmlvZCA9IChzY2hvb2xUZXJtLnRlcm0gPT09ICdBVCcgPyBcIkhUXCIgOiBcIlZUXCIpICsgc2Nob29sVGVybS55ZWFyO1xuICAgICAgdGhpcy50ZXJtID0gc2Nob29sVGVybS50ZXJtO1xuICAgICAgdGhpcy55ZWFyID0gc2Nob29sVGVybS55ZWFyO1xuICAgIH1cbiAgfVxuXG4gIGdldCBzY2hvb2xUZXJtICgpIDogU2Nob29sVGVybSB7XG4gICAgcmV0dXJuIG5ldyBTY2hvb2xUZXJtKHtcbiAgICAgIGFjYWRlbWljWWVhcjogdGhpcy50ZXJtID09PSAnQVQnID9cbiAgICAgICAgYCR7dGhpcy55ZWFyfS8ke3RoaXMueWVhciArIDF9YCA6XG4gICAgICAgIGAke3RoaXMueWVhci0xfS8ke3RoaXMueWVhcn1gLFxuICAgICAgdGVybTogdGhpcy50ZXJtXG4gICAgfSk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5wZXJpb2Q7XG4gIH1cblxuICB2YWx1ZU9mKCkge1xuICAgIHJldHVybiB0aGlzLnllYXIgKyBcIjpcIiArICh0aGlzLnRlcm0gPT09ICdTVCcgPyBcIjFcIiA6IFwiMlwiKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKc29uRGF0ZV9vbGQgKGpzb25EYXRlU3RyOiBzdHJpbmcpIDogRGF0ZSB7XG4gIGNvbnN0IGRhdGUgPSBkYXRlVGltZVJldml2ZXIoXCJcIiwganNvbkRhdGVTdHIpO1xuICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgSlNPTiBkYXRlIHN0cmluZzogXCIgKyBqc29uRGF0ZVN0cik7XG4gIHJldHVybiBkYXRlO1xufVxuXG5mdW5jdGlvbiBhdm9pZFNpbXVsdGFub3VzQ2FsbHM8VCxBPihtZXRob2Q6ICguLi5hcmdzOkFbXSk9PlByb21pc2U8VD4pIDogKC4uLmFyZ3M6QVtdKT0+UHJvbWlzZTxUPiB7XG4gIGxldCBvbmdvaW5nUHJvbWlzZXM6IHtbYXJnc0pzb246IHN0cmluZ106IFByb21pc2U8VD59ID0ge307XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBhcmdzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgaWYgKCFvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dKSB7XG4gICAgICBvbmdvaW5nUHJvbWlzZXNbYXJnc0pzb25dID0gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihyZXN1bHQ9PntcbiAgICAgICAgZGVsZXRlIG9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl07XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl07XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgb25DbGljayxcbiAgY2xhc3NOYW1lPyxcbiAgc3R5bGU/LFxuICB0aXRsZT9cbn07XG5cbmV4cG9ydCBjb25zdCBSZW1vdmVJdGVtID0gKHsgb25DbGljaywgY2xhc3NOYW1lLCBzdHlsZSwgdGl0bGUgfTogUHJvcHMpID0+XG5cbiAgPGRpdlxuICAgIHRpdGxlPXt0aXRsZSB8fCBMYFJhZGVyYWB9XG4gICAgY2xhc3NOYW1lPXtcInJlbW92ZUl0ZW0gXCIgKyAoY2xhc3NOYW1lIHx8IFwiXCIpfVxuICAgIG9uQ2xpY2s9e29uQ2xpY2t9IHN0eWxlPXtzdHlsZX0gLz5cbiIsImV4cG9ydCBmdW5jdGlvbiBpbml0TWFwTWV0aG9kKGN0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hcHBlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IGN0b3IoZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobWFwcGVyKHZhbHVlKSwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfSk7IH0pO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBMaW5rLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgSUNvdXJzZUVkaXRvckhvc3QgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3RcIjtcbmltcG9ydCB7IENvdXJzZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IHJlYWRCbG9iQXNUZXh0LCBhbGxvd0NvcHksIHJlYWRCbG9iQXNEYXRhVXJsIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBzaG93RXJyb3IsIEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tIFwia2VkYmFja2VuZC9jbGllbnRcIjtcbmltcG9ydCB7IGhhc0FjY2VzcyB9IGZyb20gXCIuLi8uLi8uLi9hY2Nlc3MtY29udHJvbFwiO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuXG50eXBlIENhbGxiYWNrID0gKCkgPT4gdm9pZDtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdGl0bGU6IHN0cmluZyxcbiAgYWN0aXZlUGFnZTogQmFubmVyTWVudUl0ZW0sXG4gIGNhbGxiYWNrcz86IHsgW21lbnVOYW1lOiBzdHJpbmddOiBDYWxsYmFjayB9LFxuICByb3V0ZXM6IHsgW21lbnVOYW1lOiBzdHJpbmddOiBzdHJpbmcgfSAmIHsgZmVlZGJhY2s6IHN0cmluZyB9LFxuICBiYWNrZ3JvdW5kSW1hZ2U/OiBzdHJpbmcsXG4gIGlzVGVtcGxhdGU/LFxuICBob3N0PzogSUNvdXJzZUVkaXRvckhvc3QsXG4gIGNvdXJzZT86IENvdXJzZSxcbiAgb3JpZ0NvdXJzZT86IENvdXJzZVxufVxuXG50eXBlIEJhbm5lck1lbnVJdGVtID1cbiAgXCJjb3Vyc2VCdWlsZGVyXCIgfFxuICBcInN0dWRlbnRQYWdlXCIgfFxuICBcInRlbXBsYXRlQnVpbGRlclwiIHxcbiAgXCJzdWJqZWN0c1wiIHxcbiAgXCJzY2hvb2xzXCI7XG5cbmNvbnN0IEFkbWluTWVudUl0ZW1zID0gW1xuICB7IG5hbWU6IFwic2Nob29sc1wiLCB0ZXh0OiBMYFNrb2xvcmAsIHJvdXRlOiBcIi9zY2hvb2xzXCIgfSxcbiAgeyBuYW1lOiBcInN1YmplY3RzXCIsIHRleHQ6IExgw4RtbmVuYCwgcm91dGU6IFwiL3N1YmplY3RzXCIgfSxcbiAgLy97bmFtZTogXCJ0ZW1wbGF0ZUJ1aWxkZXJcIiwgdGV4dDogTGBNYWxsYnlnZ2FyZW5gLCByb3V0ZTogXCIvY291cnNlLXRlbXBsYXRlc1wifSxcbl1cblxuY29uc3QgTm9uQWRtaW5NZW51SXRlbXMgPSBbXG4gIHsgbmFtZTogXCJjb3Vyc2VCdWlsZGVyXCIsIHRleHQ6IExgS3Vyc2J5Z2dhcmVuYCwgcm91dGU6IFwiL2NvdXJzZXMvbmV3XCIgfSxcbiAgeyBuYW1lOiBcInN0dWRlbnRQYWdlXCIsIHRleHQ6IExgRWxldnNpZGFgLCByb3V0ZTogXCJcIiB9LFxuICB7IG5hbWU6IFwiZmVlZGJhY2tcIiwgdGV4dDogPHNwYW4+PGkgY2xhc3NOYW1lPVwiZmEgZmEtY29tbWVudGluZy1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPiBGZWVkYmFjazwvc3Bhbj4sIHJvdXRlOiBcImh0dHBzOi8va2cua3Vuc2thcHNwb3J0ZW4uc2Uva3Vyc2J5Z2dhcmVuL1wiIH1cbl1cblxuXG5hc3luYyBmdW5jdGlvbiBvbkRyb3BJbWFnZShldjogUmVhY3QuRHJhZ0V2ZW50PEhUTUxEaXZFbGVtZW50PiwgaG9zdDogSUNvdXJzZUVkaXRvckhvc3QsIGNvdXJzZTogQ291cnNlLCBvcmlnQ291cnNlOiBDb3Vyc2UpIHtcbiAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IGZpbGVzID0gZXYuZGF0YVRyYW5zZmVyLmZpbGVzO1xuICBsZXQgdXJsID0gbnVsbDtcbiAgY29uc3QgaXRlbXMgPSBBcnJheS5mcm9tKGV2LmRhdGFUcmFuc2Zlci5pdGVtcyk7XG4gIGlmIChmaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZmlsZSA9IGZpbGVzWzBdO1xuICAgIGlmIChmaWxlLnNpemUgPiAyICogMTAyNCAqIDEwMjQpIHtcbiAgICAgIHNob3dFcnJvcihMYEthbiBpbnRlIGxhZGRhIHVwcCBiaWxkZXIgc3TDtnJyZSDDpG4gMiBNQmApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvL3VybCA9IGF3YWl0IHJlYWRCbG9iQXNEYXRhVXJsKGZpbGUpO1xuICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgICBmb3JtLmFwcGVuZChcImZpbGVzXCIsIGZpbGUpO1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmh0dHAuZmV0Y2goXG4gICAgICAnd2ViLXVwbG9hZCcsXG4gICAgICAncHV0JyxcbiAgICAgIHt9LFxuICAgICAge30sXG4gICAgICB7XG4gICAgICAgIGJvZHk6IGZvcm1cbiAgICAgIH0pO1xuICAgIGlmIChyZXMuc3RhdHVzICE9PSAyMDApIHtcbiAgICAgIHNob3dFcnJvcihMYEt1bmRlIGludGUgbGFkZGEgdXBwIGZpbGVuIHRpbGwgR29vZ2xlIFN0b3JhZ2VgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdXJsID0gYXdhaXQgcmVzLnRleHQoKTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICBpZiAoaXRlbS50eXBlLm1hdGNoKCdedGV4dC91cmktbGlzdCcpKSB7XG4gICAgICAgIC8vIFVSSVxuICAgICAgICB1cmwgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGl0ZW0uZ2V0QXNTdHJpbmcocmVzb2x2ZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAodXJsID09IG51bGwpIHtcbiAgICBzaG93RXJyb3IoTGBLdW5kZSBpbnRlIGhpdHRhIG7DpWdvbiBiaWxkIGkgaW5uZWjDpWxsZXRgKTtcbiAgICByZXR1cm47XG4gIH1cbiAgc2V0Q291cnNlSW1hZ2UoY291cnNlLCBvcmlnQ291cnNlLCBob3N0LCB1cmwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q291cnNlSW1hZ2UoXG4gIGNvdXJzZTogQ291cnNlLFxuICBvcmlnQ291cnNlOiBDb3Vyc2UsXG4gIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0LFxuICB1cmw6IHN0cmluZ1xuKSB7XG4gIGNvbnN0IGltYWdlSWQgPSBjcmVhdGVVVUlEKCk7XG4gIGhvc3QudXBkYXRlKHtcbiAgICBpbWFnZUlkOiB7ICRzZXQ6IGltYWdlSWQgfSxcbiAgICBpbWFnZXM6IHtcbiAgICAgICRzZXQ6IFt7XG4gICAgICAgIGlkOiBpbWFnZUlkLFxuICAgICAgICB1cmwsXG4gICAgICAgIGFjbDogW1xuICAgICAgICAgIGByb2xlOlVTRVI6UmAsXG4gICAgICAgICAgYHNjaG9vbFJvbGU6JHtlbnYuY3VycmVudFVzZXIuc2Nob29sfS9FTVBMT1lFRTpTYFxuICAgICAgICBdLFxuICAgICAgICAkbWV0YTogJ2FkZCdcbiAgICAgIH1dXG4gICAgfVxuICB9KTtcbn1cblxuLyogVGhpcyB2ZXJzaW9uIGhhZCB0aGUgYnVnIHRoYXQgb2xkIGltYWdlcyB3ZXJlIG5vdCByZXBsYWNlZC5cbk9uZSBjb3Vyc2UgYXQgVXBwc2FsYSBjb250YWluZWQgMTIgaW1hZ2VzLlxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb3Vyc2VJbWFnZU9sZChcbiAgY291cnNlOiBDb3Vyc2UsXG4gIG9yaWdDb3Vyc2U6IENvdXJzZSxcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3QsXG4gIHVybDogc3RyaW5nKVxue1xuICBpZiAoIW9yaWdDb3Vyc2UgfHwgIW9yaWdDb3Vyc2UuaW1hZ2VJZCkge1xuICAgIGNvbnN0IGltYWdlSWQgPSBjcmVhdGVVVUlEKCk7XG4gICAgaG9zdC51cGRhdGUoe1xuICAgICAgaW1hZ2VJZDogeyAkc2V0OiBpbWFnZUlkIH0sXG4gICAgICBpbWFnZXM6IHtcbiAgICAgICAgJHB1c2g6IFt7XG4gICAgICAgICAgaWQ6IGltYWdlSWQsXG4gICAgICAgICAgdXJsLFxuICAgICAgICAgIGFjbDogY291cnNlLmlzVGVtcGxhdGUgPyBbXCJyb2xlOlVTRVI6UlwiXSA6IFtcInJvbGU6VVNFUjpSXCIsIGBzY2hvb2xSb2xlOiR7ZW52LmN1cnJlbnRVc2VyLnNjaG9vbH0vRU1QTE9ZRUU6U2BdLFxuICAgICAgICAgICRtZXRhOiAnYWRkJ1xuICAgICAgICB9XVxuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIFVwZGF0ZSBleGlzdGluZyBpbWFnZTpcbiAgICBjb25zdCBpbWdJZHggPSBjb3Vyc2UuaW1hZ2VzLmZpbmRJbmRleChpbWcgPT4gaW1nLmlkID09PSBjb3Vyc2UuaW1hZ2VJZCk7XG4gICAgaWYgKGltZ0lkeCA+PSAwKSB7XG4gICAgICBjb25zdCBpbWFnZUVudGl0eSA9IGNvdXJzZS5pbWFnZXNbaW1nSWR4XTtcbiAgICAgIGlmIChjb3Vyc2UuaXNUZW1wbGF0ZSkge1xuICAgICAgICAvLyBUZW1wbGF0ZXM6IFVwZGF0ZSB0aGUgdGVtcGxhdGUgaW1hZ2UgY29udGVudDpcbiAgICAgICAgaG9zdC51cGRhdGUoe1xuICAgICAgICAgIGltYWdlczoge1xuICAgICAgICAgICAgJHNwbGljZTogW1tpbWdJZHgsIDEsIHtcbiAgICAgICAgICAgICAgLi4uaW1hZ2VFbnRpdHksXG4gICAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgICAgJG1ldGE6ICd1cGRhdGUnXG4gICAgICAgICAgICB9XV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZWFsIGNvdXJzZXM6IFJlcGxhY2Ugd2l0aCBhIG5ldyBpbWFnZVxuICAgICAgICBjb25zdCBpbWFnZUlkID0gY3JlYXRlVVVJRCgpO1xuICAgICAgICBob3N0LnVwZGF0ZSh7XG4gICAgICAgICAgaW1hZ2VJZDogeyAkc2V0OiBpbWFnZUlkIH0sXG4gICAgICAgICAgaW1hZ2VzOiB7XG4gICAgICAgICAgICAkc3BsaWNlOiBbW2ltZ0lkeCwgMSwge1xuICAgICAgICAgICAgICBpZDogaW1hZ2VJZCxcbiAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICBhY2w6IFtcbiAgICAgICAgICAgICAgICBgcm9sZTpVU0VSOlJgLFxuICAgICAgICAgICAgICAgIGBzY2hvb2xSb2xlOiR7ZW52LmN1cnJlbnRVc2VyLnNjaG9vbH0vRU1QTE9ZRUU6U2BcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgJG1ldGE6ICdhZGQnXG4gICAgICAgICAgICB9XV1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dFcnJvcihMYEt1bmRlIGludGUgdXBwZGF0ZXJhIGJpbGRlbi5gKTtcbiAgICB9XG4gIH1cbn1cbiovXG5cbmV4cG9ydCBjb25zdCBDb3Vyc2VCYW5uZXIgPSAocHJvcHM6IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgdGl0bGUsIGlzVGVtcGxhdGUsIGhvc3QsIGNvdXJzZSwgb3JpZ0NvdXJzZSwgYmFja2dyb3VuZEltYWdlLCBhY3RpdmVQYWdlIH0gPSBwcm9wcztcbiAgY29uc3QgaXNBZG1pbiA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gXCJBRE1JTlwiKTtcbiAgbGV0IG1lbnVJdGVtcyA9IE5vbkFkbWluTWVudUl0ZW1zO1xuICBpZiAoaXNBZG1pbikgbWVudUl0ZW1zID0gQWRtaW5NZW51SXRlbXMuY29uY2F0KG1lbnVJdGVtcyk7XG5cbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwic3Ytcm93IHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxuICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyIHN2LWNvbHVtbi0xMlwiPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1zY3JpcHQtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICAgIHtiYWNrZ3JvdW5kSW1hZ2UgJiYgPHN0eWxlPntgXG4gICAgICAgIC5wYWdlSGVhZGVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJyR7YmFja2dyb3VuZEltYWdlfScpICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT59XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZUhlYWRlclwiXG4gICAgICAgICAgb25EcmFnT3Zlcj17Y291cnNlICYmIGFsbG93Q29weX1cbiAgICAgICAgICBvbkRyb3A9e2NvdXJzZSAmJiAoZXYgPT4gb25Ecm9wSW1hZ2UoZXYsIGhvc3QsIGNvdXJzZSwgb3JpZ0NvdXJzZSkpfT5cbiAgICAgICAgICA8YT5cbiAgICAgICAgICAgIDxoMT57dGl0bGV9PC9oMT5cbiAgICAgICAgICA8L2E+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25zRmllbGRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnV0dG9uc0NvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj48L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2hvcml6b250YWxNZW51Jz5cbiAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICB7bWVudUl0ZW1zLm1hcChpdGVtID0+ICh7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlOiBhY3RpdmVQYWdlID09PSBpdGVtLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBwcm9wcy5jYWxsYmFja3MgJiYgcHJvcHMuY2FsbGJhY2tzW2l0ZW0ubmFtZV0sXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuUm91dGU6IChwcm9wcy5yb3V0ZXMgJiYgcHJvcHMucm91dGVzW2l0ZW0ubmFtZV0pLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Um91dGU6IGl0ZW0ucm91dGVcbiAgICAgICAgICAgICAgICAgIH0pKS5maWx0ZXIoeCA9PiB4LmNhbGxiYWNrIHx8IHguZGVmYXVsdFJvdXRlIHx8IHguZ2l2ZW5Sb3V0ZSkubWFwKCh7IGl0ZW0sIGlzQWN0aXZlLCBjYWxsYmFjaywgZGVmYXVsdFJvdXRlLCBnaXZlblJvdXRlIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxsaVxuICAgICAgICAgICAgICAgICAgICAgIGtleT17aXRlbS5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17aXNBY3RpdmUgPyBcImFjdGl2ZVBhZ2VcIiA6IFwiXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17Y2FsbGJhY2t9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICB7Y2FsbGJhY2sgP1xuICAgICAgICAgICAgICAgICAgICAgICAgPGE+e2l0ZW0udGV4dH08L2E+IDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRSb3V0ZSB8fCBnaXZlblJvdXRlID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZW5Sb3V0ZSB8fCAvXmh0dHBbc11cXDpcXC9cXC8vaS50ZXN0KGRlZmF1bHRSb3V0ZSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2dpdmVuUm91dGUgfHwgZGVmYXVsdFJvdXRlfT57aXRlbS50ZXh0fTwvYT4gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtkZWZhdWx0Um91dGV9PntpdGVtLnRleHR9PC9MaW5rPiA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxhPntpdGVtLnRleHR9PC9hPn1cbiAgICAgICAgICAgICAgICAgICAgPC9saT47XG4gICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007IiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgU2Nob29sTW9tZW50LCBnZXRTY2hvb2xNb21lbnQsIGFkZFllYXIgfSBmcm9tICcuL3NjaG9vbC1tb21lbnQnO1xuaW1wb3J0IHsgQWNhZGVtaWNZZWFyLCBUZXJtIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuXG50eXBlIE1vbWVudCA9IG1vbWVudC5Nb21lbnQ7XG5cbmZ1bmN0aW9uIGlzU2Nob29sTW9tZW50KG9iajogRGF0ZSB8IFNjaG9vbE1vbWVudCk6IG9iaiBpcyBTY2hvb2xNb21lbnQge1xuICByZXR1cm4gJ2FjYWRlbWljWWVhcicgaW4gb2JqO1xufVxuXG5leHBvcnQgY2xhc3MgU2Nob29sVGVybSB7XG4gIGFjYWRlbWljWWVhcjogQWNhZGVtaWNZZWFyO1xuICB0ZXJtOiBUZXJtO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGVPclNjaG9vbE1vbWVudDogRGF0ZSB8IFNjaG9vbE1vbWVudCkge1xuICAgIGNvbnN0IHNjaG9vbE1vbWVudCA9IGlzU2Nob29sTW9tZW50KGRhdGVPclNjaG9vbE1vbWVudCkgP1xuICAgICAgZGF0ZU9yU2Nob29sTW9tZW50IDogZ2V0U2Nob29sTW9tZW50KG1vbWVudChkYXRlT3JTY2hvb2xNb21lbnQpKTtcbiAgICB0aGlzLmFjYWRlbWljWWVhciA9IHNjaG9vbE1vbWVudC5hY2FkZW1pY1llYXI7XG4gICAgdGhpcy50ZXJtID0gc2Nob29sTW9tZW50LnRlcm07XG4gIH1cblxuICBnZXQgeWVhcigpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5hY2FkZW1pY1llYXJcbiAgICAgICAgLnNwbGl0KCcvJylbdGhpcy50ZXJtID09PSAnQVQnID8gMCA6IDFdKTtcbiAgfVxuXG4gIG5leHRUZXJtKCkge1xuICAgIHJldHVybiBuZXcgU2Nob29sVGVybSh0aGlzLnRlcm0gPT09ICdBVCcgP1xuICAgICAge1xuICAgICAgICB0ZXJtOiAnU1QnLFxuICAgICAgICBhY2FkZW1pY1llYXI6IHRoaXMuYWNhZGVtaWNZZWFyXG4gICAgICB9IDpcbiAgICAgIHtcbiAgICAgICAgdGVybTogJ0FUJyxcbiAgICAgICAgYWNhZGVtaWNZZWFyOiBhZGRZZWFyKHRoaXMuYWNhZGVtaWNZZWFyLCAxKVxuICAgICAgfSk7XG4gIH1cblxuICBwcmV2VGVybSgpIHtcbiAgICByZXR1cm4gbmV3IFNjaG9vbFRlcm0odGhpcy50ZXJtID09PSAnQVQnID9cbiAgICAgIHtcbiAgICAgICAgdGVybTogJ1NUJyxcbiAgICAgICAgYWNhZGVtaWNZZWFyOiBhZGRZZWFyKHRoaXMuYWNhZGVtaWNZZWFyLCAtMSlcbiAgICAgIH0gOlxuICAgICAge1xuICAgICAgICB0ZXJtOiAnQVQnLFxuICAgICAgICBhY2FkZW1pY1llYXI6IHRoaXMuYWNhZGVtaWNZZWFyXG4gICAgICB9KTtcbiAgICBcbiAgfVxuXG4gIHRvTG9jYWxlU3RyaW5nKGxvY2FsZXM6IHN0cmluZ1tdLCBzaG9ydFllYXI/OiBib29sZWFuKSB7XG4gICAgbGV0IHllYXIgPSB0aGlzLnRlcm0gPT09ICdBVCcgP1xuICAgICAgdGhpcy5hY2FkZW1pY1llYXIuc3BsaXQoJy8nKVswXTpcbiAgICAgIHRoaXMuYWNhZGVtaWNZZWFyLnNwbGl0KCcvJylbMV07XG5cbiAgICBpZiAoc2hvcnRZZWFyKVxuICAgICAgeWVhciA9IHllYXIuc3Vic3RyKDIpO1xuXG4gICAgZm9yIChsZXQgbG9jYWxlIG9mIGxvY2FsZXMpIHtcbiAgICAgIHN3aXRjaCAobG9jYWxlLnNwbGl0KCctJylbMF0uc3BsaXQoJ18nKVswXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgJ2VuJzpcbiAgICAgICAgICByZXR1cm4gYCR7dGhpcy50ZXJtID09PSAnQVQnID8gXCJBVFwiIDogXCJTVFwifSAke3llYXJ9YDtcbiAgICAgICAgY2FzZSAnc3YnOlxuICAgICAgICAgIHJldHVybiBgJHt0aGlzLnRlcm0gPT09ICdBVCcgPyBcIkhUXCIgOiBcIlZUXCJ9ICR7eWVhcn1gO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IGV4ZWMgZnJvbSAnLi9leGVjJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBib2xkOiB7XG4gICAgaWNvbjogJzxiPkY8L2I+JyxcbiAgICB0aXRsZTogJ0ZldHN0aWwnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnYm9sZCcpXG4gIH0sXG4gIGl0YWxpYzoge1xuICAgIGljb246ICc8aT5LPC9pPicsXG4gICAgdGl0bGU6ICdLdXJzaXYnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaXRhbGljJylcbiAgfSxcbiAgdW5kZXJsaW5lOiB7XG4gICAgaWNvbjogJzx1PlU8L3U+JyxcbiAgICB0aXRsZTogJ1VuZGVyc3RydWtlbicsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCd1bmRlcmxpbmUnKVxuICB9LFxuICBzdHJpa2V0aHJvdWdoOiB7XG4gICAgaWNvbjogJzxzdHJpa2U+Uzwvc3RyaWtlPicsXG4gICAgdGl0bGU6ICdTdHJ1a2VuJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3N0cmlrZVRocm91Z2gnKVxuICB9LFxuICBoZWFkaW5nMToge1xuICAgIGljb246ICc8Yj5IPHN1Yj4xPC9zdWI+PC9iPicsXG4gICAgdGl0bGU6ICdSdWJyaWsgMScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDE+JylcbiAgfSxcbiAgaGVhZGluZzI6IHtcbiAgICBpY29uOiAnPGI+SDxzdWI+Mjwvc3ViPjwvYj4nLFxuICAgIHRpdGxlOiAnUnVicmlrIDInLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgyPicpXG4gIH0sXG4gIGhlYWRpbmczOiB7XG4gICAgaWNvbjogJzxiPkg8c3ViPjM8L3N1Yj48L2I+JyxcbiAgICB0aXRsZTogJ1J1YnJpayAzJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMz4nKVxuICB9LFxuICBwYXJhZ3JhcGg6IHtcbiAgICBpY29uOiAnJiMxODI7JyxcbiAgICB0aXRsZTogJ1BhcmFncmFmJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxQPicpXG4gIH0sXG4gIHF1b3RlOiB7XG4gICAgaWNvbjogJyYjODIyMDsgJiM4MjIxOycsXG4gICAgdGl0bGU6ICdDaXRhdCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8QkxPQ0tRVU9URT4nKVxuICB9LFxuICBvbGlzdDoge1xuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLWxpc3Qtb2xcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcbiAgICB0aXRsZTogJ09yZG5hZCBsaXN0YScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRPcmRlcmVkTGlzdCcpXG4gIH0sXG4gIHVsaXN0OiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtbGlzdFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxuICAgIHRpdGxlOiAnUHVua3RsaXN0YScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRVbm9yZGVyZWRMaXN0JylcbiAgfSxcbiAgY29kZToge1xuICAgIGljb246ICcmbHQ7LyZndDsnLFxuICAgIHRpdGxlOiAnUHJvZ3JhbWtvZCcsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8UFJFPicpXG4gIH0sXG4gIGxpbmU6IHtcbiAgICBpY29uOiAnJiM4MjEzOycsXG4gICAgdGl0bGU6ICdWw6VncsOkdCBsaW5qZScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRIb3Jpem9udGFsUnVsZScpXG4gIH0sXG4gIGxpbms6IHtcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1saW5rXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXG4gICAgdGl0bGU6ICdJbmZvZ2EgbMOkbmsnLFxuICAgIHJlc3VsdDogKCkgPT4ge1xuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCgnQW5nZSBsw6Rua2VucyBVUkwnKVxuICAgICAgaWYgKHVybCkgZXhlYygnY3JlYXRlTGluaycsIHVybClcbiAgICB9XG4gIH0sXG4gIGltYWdlOiB7XG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPicsXG4gICAgdGl0bGU6ICdJbmZvZ2EgYmlsZCcsXG4gICAgcmVzdWx0OiAoZXYsIGNvbXBvbmVudCkgPT4ge1xuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCgnQW5nZSBiaWxkZW5zIFVSTCcpXG4gICAgICBpZiAodXJsKSB7XG4gICAgICAgIC8vZXhlYygnaW5zZXJ0SW1hZ2UnLCB1cmwpO1xuICAgICAgICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuICAgICAgICBpbWcuc3JjID0gdXJsO1xuICAgICAgICBpbWcudGFiSW5kZXggPSAxO1xuICAgICAgICBpbnNlcnRFbGVtZW50KGltZyk7XG4gICAgICAgIGltZy5vbmZvY3VzID0gY29tcG9uZW50Lm9uRm9jdXM7XG4gICAgICAgIGltZy5vbmJsdXIgPSBjb21wb25lbnQub25CbHVyO1xuICAgICAgICBjb21wb25lbnQucHJvcHMub25DaGFuZ2UoY29tcG9uZW50LmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0RWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIHZhciBzZWwsIHJhbmdlO1xuICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uICYmIChzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkpLnJhbmdlQ291bnQpIHtcbiAgICAgICAgcmFuZ2UgPSBzZWwuZ2V0UmFuZ2VBdCgwKTtcbiAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgIHJhbmdlLmluc2VydE5vZGUoZWxlbWVudCk7XG4gICAgICAgIC8vIE1vdmUgdGhlIGNhcmV0IGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBpbnNlcnRlZCBzcGFuXG4gICAgICAgIHJhbmdlLnNldFN0YXJ0QWZ0ZXIoZWxlbWVudCk7XG4gICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gICAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XG4gICAgfVxufVxuIiwiaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG50eXBlIEhUTUxQb2xpY3kgPSB7W3RhZ05hbWVMb3dlcjogc3RyaW5nXToge1thdHRyaWJ1dGVMb3dlcjogc3RyaW5nXTogYm9vbGVhbn19O1xuXG4vKiogVGFncyAvIEF0dHJpYnV0ZXMgV2hpdGVsaXN0XG4gKiBcbiAqL1xuY29uc3QgSFRNTF9XQVNIX1BPTElDWTogSFRNTFBvbGljeSA9IHtcbiAgYjoge30sICAvLyBib2xkXG4gIGk6IHt9LCAgLy8gaXRhbGljXG4gIHA6IHt9LCAgLy8gcGFyYWdyYXBoXG4gIHU6IHt9LCAgLy8gdW5kZXJsaW5lXG4gIHN0cmlrZToge30sIC8vIHN0cmlrZS10aHJvdWdoXG4gIHByZToge30sIC8vIHVuZm9ybWF0dGVkXG4gIGgxOiB7fSwgLy8gaGVhZGluZyAxXG4gIGgyOiB7fSwgLy8gaGVhZGluZyAyXG4gIGgzOiB7fSwgLy8gaGVhZGluZyAzXG4gIGg0OiB7fSwgLy8gaGVhZGluZyA0XG4gIGg1OiB7fSwgLy8gaGVhZGluZyA1XG4gIGltZzoge3NyYzogdHJ1ZSwgY2xhc3M6IHRydWUsIHN0eWxlOiB0cnVlLCB0YWJpbmRleDogdHJ1ZX0sIC8vIGltYWdlLiBXZSBzZXQgc3R5bGUgYW5kIHRhYmluZGV4IG91cnNlbHZlcy4gQWNjZXB0IHRoYXQuXG4gIGE6IHtocmVmOiB0cnVlLCB0YXJnZXQ6IHRydWUsIHRhYmluZGV4OiB0cnVlfSwgLy8gbGlua1xuICB1bDoge30sIC8vIFVub3JkZXJlZCBsaXN0XG4gIG9sOiB7fSwgLy8gT3JkZXJlZCBsaXN0XG4gIGxpOiB7fSwgLy8gbGlzdCBpdGVtXG4gIGhyOiB7fSwgLy8gSG9yaXpvbnRhbCBydWxlXG4gIGJyOiB7fSwgLy8gQnJlYWsgbGluZVxuICBkaXY6IHt9LC8vIE9mIHNvbWUgcmVhc29uLCBkaXZzIGFyZSBzb21ldGltZXMgaW5zZXJ0ZWQgd2hlbiBwcmVzc2luZyBFTlRFUiBpbiB0aGUgd3lzaXd5ZyBlZGl0b3IuXG4gIHNwYW46IHt9LC8vIFNwYW5zIGFyZSBoYXJtbGVzcywganVzdCByZW1vdmUgdGhlaXIgc3R5bGUgYW5kIG90aGVyIGF0dHJpYnV0ZXMgYW5kIEkgZmVlbCBncmVhdC5cbiAgLy8gdGFibGUgdGFnczpcbiAgdGFibGU6IHtib3JkZXI6IHRydWV9LFxuICB0Ym9keToge30sXG4gIHRoZWFkOiB7fSxcbiAgdGZvb3Q6IHt9LFxuICB0cjoge30sXG4gIHRkOiB7aGVhZGVyczogdHJ1ZSwgY29sc3BhbjogdHJ1ZSwgcm93c3BhbjogdHJ1ZX0sXG4gIHRoOiB7YWJicjogdHJ1ZSwgaGVhZGVyczogdHJ1ZSwgc2NvcGU6IHRydWUsIHNvcnRlZDogdHJ1ZSwgY29sc3BhbjogdHJ1ZSwgcm93c3BhbjogdHJ1ZX1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB3YXNoSHRtbCAoaHRtbDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgZG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCBcInRleHQvaHRtbFwiKTtcbiAgY29uc3Qge2NoaWxkTm9kZXN9ID0gZG9jLmJvZHk7XG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICBmb3IgKGxldCBpPTA7IGk8Y2hpbGROb2Rlcy5sZW5ndGg7ICsraSkge1xuICAgIGlmICh3YXNoTm9kZShjaGlsZE5vZGVzLml0ZW0oaSkpKSB7XG4gICAgICBtb2RpZmllZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZCA/XG4gICAgZG9jLmJvZHkuaW5uZXJIVE1MIDpcbiAgICBodG1sOyAvLyBCeSByZXR1cm5pbmcgdGhlIG9yaWdpbmFsIEhUTUwgc3RyaW5nLCB3ZSBzcGFyZSB0aGUgdXNlciBmcm9tIHJlZnJlc2hpbmcgdGhlIGVkaXQgYXJlYSxcbiAgICAgICAgICAvLyB3aGljaCB3b3VsZCBvdGhlcndpc2UgcHV0IHRoZSBjdXJzb3IgYXQgdGhlIHRvcCwgbG9zaW5nIHRoZSBwb3NpdGlvbiB3aGVyZSB1c2VyIHdoZXJlLlxufVxuXG5mdW5jdGlvbiB3YXNoTm9kZShub2RlOiBOb2RlIHwgRWxlbWVudCB8IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xuICBpZiAoaXNFbGVtZW50KG5vZGUpKSB7XG4gICAgaWYgKHdhc2hFbGVtZW50KG5vZGUpKSB7XG4gICAgICBtb2RpZmllZCA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmICh3YXNoQ2hpbGROb2Rlcyhub2RlKSkge1xuICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gbW9kaWZpZWQ7XG59XG5cbmZ1bmN0aW9uIHdhc2hDaGlsZE5vZGVzKG5vZGU6IE5vZGUpIHtcbiAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XG4gIGNvbnN0IHtjaGlsZE5vZGVzfSA9IG5vZGU7XG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHdhc2hOb2RlKGNoaWxkTm9kZXMuaXRlbShpKSkpIHtcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkO1xufSBcblxuLyoqIFJlcGxhY2UgYW4gZWxlbWVudCB3aXRoIGl0cyBjaGlsZCBub2Rlcy5cbiAqIFxuICovXG5mdW5jdGlvbiByZW1vdmVNaWRkbGVFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgY29uc3Qge2NoaWxkTm9kZXN9ID0gZWxlbWVudDtcbiAgZm9yIChsZXQgaT0wOyBpPGNoaWxkTm9kZXMubGVuZ3RoOyArK2kpIHtcbiAgICBlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZXMuaXRlbShpKSwgZWxlbWVudCk7XG4gIH1cbiAgZWxlbWVudC5yZW1vdmUoKTtcbn1cblxuZnVuY3Rpb24gd2FzaEVsZW1lbnQoZWxlbWVudDogRWxlbWVudCk6IGJvb2xlYW4ge1xuICBjb25zdCBwb2xpY3kgPSBlbGVtZW50LnRhZ05hbWUgJiYgSFRNTF9XQVNIX1BPTElDWVtlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV07XG4gIGlmICghcG9saWN5KSB7XG4gICAgY29uc29sZS53YXJuKFwiV3lzaXd5Zzogbm90IGFsbG93ZWQgdGFnXCIsIGVsZW1lbnQudGFnTmFtZSk7XG4gICAgd2FzaENoaWxkTm9kZXMoZWxlbWVudCk7XG4gICAgcmVtb3ZlTWlkZGxlRWxlbWVudChlbGVtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBsZXQgbW9kaWZpZWQgPSBmYWxzZTtcbiAgZm9yIChsZXQgaT0wOyBpPGVsZW1lbnQuYXR0cmlidXRlcy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGF0dHIgPSBlbGVtZW50LmF0dHJpYnV0ZXMuaXRlbShpKTtcbiAgICBjb25zdCBhbGxvd2VkID0gYXR0ci5uYW1lICYmICEhcG9saWN5W2F0dHIubmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICBpZiAoIWFsbG93ZWQpIHtcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgIGNvbnNvbGUud2FybihcIld5c2l3eWc6IG5vdCBhbGxvd2VkIGF0dHJpYnV0ZVwiLCBhdHRyLm5hbWUsIFwiVGFnOiBcIiwgZWxlbWVudC50YWdOYW1lKTtcbiAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHIubmFtZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZDtcbn1cblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGU6IE5vZGUpIDogbm9kZSBpcyBFbGVtZW50IHtcbiAgcmV0dXJuICEhKG5vZGUgYXMgRWxlbWVudCkudGFnTmFtZTtcbn1cbiIsImltcG9ydCBleGVjIGZyb20gJy4vZXhlYyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYm9sZDoge1xuICAgIGljb246ICc8Yj5CPC9iPicsXG4gICAgdGl0bGU6ICdCb2xkJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2JvbGQnKVxuICB9LFxuICBpdGFsaWM6IHtcbiAgICBpY29uOiAnPGk+STwvaT4nLFxuICAgIHRpdGxlOiAnSXRhbGljJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2l0YWxpYycpXG4gIH0sXG4gIHVuZGVybGluZToge1xuICAgIGljb246ICc8dT5VPC91PicsXG4gICAgdGl0bGU6ICdVbmRlcmxpbmUnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygndW5kZXJsaW5lJylcbiAgfSxcbiAgc3RyaWtldGhyb3VnaDoge1xuICAgIGljb246ICc8c3RyaWtlPlM8L3N0cmlrZT4nLFxuICAgIHRpdGxlOiAnU3RyaWtlLXRocm91Z2gnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnc3RyaWtlVGhyb3VnaCcpXG4gIH0sXG4gIGhlYWRpbmcxOiB7XG4gICAgaWNvbjogJzxiPkg8c3ViPjE8L3N1Yj48L2I+JyxcbiAgICB0aXRsZTogJ0hlYWRpbmcgMScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDE+JylcbiAgfSxcbiAgaGVhZGluZzI6IHtcbiAgICBpY29uOiAnPGI+SDxzdWI+Mjwvc3ViPjwvYj4nLFxuICAgIHRpdGxlOiAnSGVhZGluZyAyJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMj4nKVxuICB9LFxuICBoZWFkaW5nMzoge1xuICAgIGljb246ICc8Yj5IPHN1Yj4zPC9zdWI+PC9iPicsXG4gICAgdGl0bGU6ICdIZWFkaW5nIDMnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgzPicpXG4gIH0sXG4gIHBhcmFncmFwaDoge1xuICAgIGljb246ICcmIzE4MjsnLFxuICAgIHRpdGxlOiAnUGFyYWdyYXBoJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxQPicpXG4gIH0sXG4gIHF1b3RlOiB7XG4gICAgaWNvbjogJyYjODIyMDsgJiM4MjIxOycsXG4gICAgdGl0bGU6ICdRdW90ZScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8QkxPQ0tRVU9URT4nKVxuICB9LFxuICBvbGlzdDoge1xuICAgIGljb246ICcmIzM1OycsXG4gICAgdGl0bGU6ICdPcmRlcmVkIExpc3QnLFxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0T3JkZXJlZExpc3QnKVxuICB9LFxuICB1bGlzdDoge1xuICAgIGljb246ICcmIzgyMjY7JyxcbiAgICB0aXRsZTogJ1Vub3JkZXJlZCBMaXN0JyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydFVub3JkZXJlZExpc3QnKVxuICB9LFxuICBjb2RlOiB7XG4gICAgaWNvbjogJyZsdDsvJmd0OycsXG4gICAgdGl0bGU6ICdDb2RlJyxcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxQUkU+JylcbiAgfSxcbiAgbGluZToge1xuICAgIGljb246ICcmIzgyMTM7JyxcbiAgICB0aXRsZTogJ0hvcml6b250YWwgTGluZScsXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpbnNlcnRIb3Jpem9udGFsUnVsZScpXG4gIH0sXG4gIGxpbms6IHtcbiAgICBpY29uOiAnJiMxMjgyNzk7JyxcbiAgICB0aXRsZTogJ0xpbmsnLFxuICAgIHJlc3VsdDogKCkgPT4ge1xuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCgnRW50ZXIgdGhlIGxpbmsgVVJMJylcbiAgICAgIGlmICh1cmwpIGV4ZWMoJ2NyZWF0ZUxpbmsnLCB1cmwpXG4gICAgfVxuICB9LFxuICBpbWFnZToge1xuICAgIGljb246ICcmIzEyODI0NzsnLFxuICAgIHRpdGxlOiAnSW1hZ2UnLFxuICAgIHJlc3VsdDogKCkgPT4ge1xuICAgICAgY29uc3QgdXJsID0gd2luZG93LnByb21wdCgnRW50ZXIgdGhlIGltYWdlIFVSTCcpXG4gICAgICBpZiAodXJsKSBleGVjKCdpbnNlcnRJbWFnZScsIHVybClcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBleGVjIGZyb20gJy4vZXhlYyc7XG5pbXBvcnQge3dhc2hIdG1sfSBmcm9tICcuL3dhc2gtaHRtbCc7XG5pbXBvcnQgaW1hZ2VFZGl0QWN0aW9ucyBmcm9tICcuL2ltYWdlLWVkaXQtYWN0aW9ucyc7XG5pbXBvcnQgYWN0aW9ucyBmcm9tICcuL2FjdGlvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbiB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIGljb246IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgcmVzdWx0OiAoZXY6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEJ1dHRvbkVsZW1lbnQ+LCBjb21wb25lbnQ6IFd5c2l3eWcpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgaHRtbDogc3RyaW5nO1xuICBvbkNoYW5nZT86IChodG1sOiBzdHJpbmcpID0+IHZvaWQ7XG4gIHJlcG9ydE51bUNoYXJzPzogKG51bUNoYXJzOiBudW1iZXIpID0+IHZvaWQ7XG4gIG1heENoYXJzPzogbnVtYmVyO1xuICBkZWZhdWx0QWN0aW9ucz86IHtbbmFtZTogc3RyaW5nXTogQWN0aW9ufTtcbiAgYWN0aW9ucz86IChQYXJ0aWFsPEFjdGlvbj4gfCBzdHJpbmcpW107XG4gIHJlYWRPbmx5PzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgZm9jdXNSZWN0OiBDbGllbnRSZWN0IHwgbnVsbDtcbn1cblxuY29uc3QgY2xhc3NlcyA9IHtcbiAgYWN0aW9uYmFyOiAnd3lzaXd5Zy1hY3Rpb25iYXInLFxuICBidXR0b246ICd3eXNpd3lnLWJ1dHRvbicsXG4gIGNvbnRlbnQ6ICd3eXNpd3lnLWNvbnRlbnQnLFxuICBmb2N1c3JlY3Q6ICd3eXNpd3lnLWZvY3VzcmVjdCcsXG4gIGZvY3VzcG9pbnQ6ICd3eXNpd3lnLWZvY3VzcG9pbnQnLFxuICByZWFkb25seUNvbnRlbnQ6ICd3eXNpd3lnLWNvbnRlbnQgcmVhZG9ubHknXG59XG5cbmV4cG9ydCBjbGFzcyBXeXNpd3lnIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnRlbnREaXY6IEhUTUxEaXZFbGVtZW50O1xuICBmb2N1c1JlY3REaXY6IEhUTUxEaXZFbGVtZW50O1xuICBmb2N1c0VsZW06IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgY29ybmVyOiBzdHJpbmc7XG4gIHJlc2l6ZVN0YXJ0WDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yIChwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtmb2N1c1JlY3Q6IG51bGx9O1xuICAgIHRoaXMub25Gb2N1cyA9IHRoaXMub25Gb2N1cy5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25CbHVyID0gdGhpcy5vbkJsdXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uTW91c2VEb3duID0gdGhpcy5vbk1vdXNlRG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZU1vdmUgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbk1vdXNlVXAgPSB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLnByb3BzLnJlYWRPbmx5KSB7XG4gICAgICBBcnJheS5mcm9tKHRoaXMuY29udGVudERpdi5xdWVyeVNlbGVjdG9yQWxsKFwiaW1nLGFcIikpLm1hcChlbGVtID0+IChlbGVtIGFzIChIVE1MSW1hZ2VFbGVtZW50IHwgSFRNTEFuY2hvckVsZW1lbnQpKSlcbiAgICAgIC5mb3JFYWNoKGVsZW0gPT4ge1xuICAgICAgICBlbGVtLnRhYkluZGV4ID0gMTtcbiAgICAgICAgZWxlbS5vbmZvY3VzID0gdGhpcy5vbkZvY3VzO1xuICAgICAgICBlbGVtLm9uYmx1ciA9IHRoaXMub25CbHVyIGFzIGFueTtcbiAgICAgIH0pO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKSB7XG4gICAgICB0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKHRoaXMuY29udGVudERpdiAmJiB0aGlzLmNvbnRlbnREaXYuaW5uZXJUZXh0ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgQXJyYXkuZnJvbSh0aGlzLmNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbChcImltZyxhXCIpKS5tYXAoZWxlbSA9PiAoZWxlbSBhcyAoSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50KSkpXG4gICAgLmZvckVhY2goZWxlbSA9PiB7XG4gICAgICBlbGVtLnRhYkluZGV4ID0gMTtcbiAgICAgIGVsZW0ub25mb2N1cyA9IHRoaXMub25Gb2N1cztcbiAgICAgIGVsZW0ub25ibHVyID0gdGhpcy5vbkJsdXIgYXMgYW55O1xuICAgIH0pO1xuICAgIGlmICh0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKSB7XG4gICAgICB0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKHRoaXMuY29udGVudERpdiAmJiB0aGlzLmNvbnRlbnREaXYuaW5uZXJUZXh0ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXApO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wczogUHJvcHMsIG5leHRTdGF0ZTogU3RhdGUpIHtcbiAgICAvL3RoaXMuY29udGVudERpdi5vbmZvY3VzID0gdGhpcy5vbkZvY3VzO1xuICAgIC8vdGhpcy5jb250ZW50RGl2Lm9uYmx1ciA9IHRoaXMub25CbHVyO1xuICAgIHJldHVybiAhdGhpcy5jb250ZW50RGl2IHx8XG4gICAgICBuZXh0U3RhdGUgIT0gdGhpcy5zdGF0ZSB8fFxuICAgICAgbmV4dFByb3BzLnJlYWRPbmx5ICE9PSB0aGlzLnByb3BzLnJlYWRPbmx5IHx8XG4gICAgICB3YXNoSHRtbChuZXh0UHJvcHMuaHRtbCkgIT09IHdhc2hIdG1sKHRoaXMuY29udGVudERpdi5pbm5lckhUTUwpO1xuICB9XG5cbiAgdHJpZ2dlck9uQ2hhbmdlKGh0bWw6IHN0cmluZykge1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiYgdGhpcy5wcm9wcy5vbkNoYW5nZSh3YXNoSHRtbChodG1sKSk7XG4gIH1cblxuICBvbkZvY3VzKGV2OiBGb2N1c0V2ZW50KSB7XG4gICAgY29uc3QgZWxlbSA9IGV2LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICBpZiAoIWVsZW0gfHwgIWVsZW0udGFnTmFtZSkgcmV0dXJuO1xuICAgIGlmIChlbGVtLnRhZ05hbWUgIT09ICdJTUcnICYmIGVsZW0udGFnTmFtZSAhPT0gJ0EnKSByZXR1cm47XG4gICAgY29uc3QgY29udGVudFBhcmVudCA9IHRoaXMuY29udGVudERpdi5wYXJlbnRFbGVtZW50O1xuICAgIGNvbnN0IG5ld1N0YXRlID0ge1xuICAgICAgZm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdChjb250ZW50UGFyZW50LCBlbGVtKSxcbiAgICB9XG4gICAgc3dpdGNoIChlbGVtLnRhZ05hbWUpIHtcbiAgICAgIGNhc2UgJ0EnOlxuICAgICAgY2FzZSAnSU1HJzpcblxuICAgICAgZGVmYXVsdDogYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUobmV3U3RhdGUpO1xuICAgIHRoaXMuZm9jdXNFbGVtID0gZWxlbTtcbiAgfVxuXG4gIG9uQmx1cihldjogUmVhY3QuRm9jdXNFdmVudDxIVE1MRGl2RWxlbWVudD4pIHtcbiAgICAvKmlmIChldi5yZWxhdGVkVGFyZ2V0KSB7XG4gICAgICBjb25zdCByZWxhdGVkVGFyZ2V0ID0gZXYucmVsYXRlZFRhcmdldCBhcyBIVE1MRWxlbWVudDtcbiAgICAgIGlmIChyZWxhdGVkVGFyZ2V0LmNsYXNzTmFtZSAmJiByZWxhdGVkVGFyZ2V0LmNsYXNzTmFtZS5zcGxpdCgnICcpLmluZGV4T2YoY2xhc3Nlcy5idXR0b24pID49IDApIHtcbiAgICAgICAgLy8gQSBpbWFnZSBhY3Rpb24gYnV0dG9uIHdhcyBwcmVzc2VkXG4gICAgICAgIHNldFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSovXG4gICAgaWYgKChldi50YXJnZXQgPT09IHRoaXMuZm9jdXNFbGVtICYmIGV2LnJlbGF0ZWRUYXJnZXQgIT09IHRoaXMuZm9jdXNSZWN0RGl2KSB8fFxuICAgICAgZXYudGFyZ2V0ID09PSB0aGlzLmZvY3VzUmVjdERpdilcbiAgICB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtmb2N1c1JlY3Q6IG51bGx9KTtcbiAgICB9XG4gIH1cblxuICBtYWtlQ2xpY2thYmxlKGVsZW06IEhUTUxFbGVtZW50KSB7XG4gICAgIGVsZW0udGFiSW5kZXggPSAxO1xuICB9XG5cbiAgb25Nb3VzZURvd24oZXYpIHtcbiAgICBpZiAoKGV2LnRhcmdldC5jbGFzc05hbWUgfHwgXCJcIikuc3BsaXQoJyAnKS5pbmRleE9mKGNsYXNzZXMuZm9jdXNwb2ludCkgPj0gMCkge1xuICAgICAgY29uc3QgY29ybmVyID0gdGhpcy5nZXRSZWN0Q29ybmVyKGV2KTtcbiAgICAgIHRoaXMuY29ybmVyID0gY29ybmVyO1xuICAgICAgdGhpcy5yZXNpemVTdGFydFggPSBldi5jbGllbnRYO1xuICAgIH1cbiAgfVxuXG4gIG9uTW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY29ybmVyICYmIHRoaXMuc3RhdGUuZm9jdXNSZWN0ICYmIHRoaXMuZm9jdXNFbGVtKSB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gVE9ETzogUsOka25hIHV0IGJhc2VyYXQgcMOlIHRoaXMuY29ybmVyIGh1ciBiaWxkZW5zIHN0b3JsZWsgYm9yZGUgw6RuZHJhcy5cbiAgICAgIC8vIExldGEgdXBwIGJpbGRlbiBwZXIgSUQgZnLDpW4gdGhpcy5jb250ZW50RGl2XG4gICAgICAvLyBTw6R0dCBESVY6ZW5zIHN0eWxlIGF0dHJpYnV0IHdpZHRoIHRpbGwgbnkgd2lkdGguXG4gICAgICAvLyBPbSBESVY6ZW4gcmVkYW4gaGFkZSBoZWlnaHQsIHPDpHR0IG55IGhlaWdodCBtZWQgc2FtbWEgYXNwZWN0IHJhdGlvIHNvbSBpbm5hbixcbiAgICAgIC8vIGFubmFycywgc8OkdHQgaW50ZSBoZWlnaHQgYWxscyAoZWxsZXIgbcO2amxpZ3R2aXMgdGlsbCBhdXRvKSlcbiAgICAgIGNvbnN0IGZvY3VzUmVjdCA9IHRoaXMuZm9jdXNSZWN0RGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKGZvY3VzUmVjdC53aWR0aCA8IDMyKSByZXR1cm47XG4gICAgICAvL2NvbnN0IGN1cnJlbnRXaWR0aCA9IGZvY3VzUmVjdC53aWR0aDtcbiAgICAgIC8vY29uc3QgY3VycmVudEhlaWdodCA9IGZvY3VzUmVjdC5oZWlnaHQ7XG4gICAgICAvL2NvbnN0IGhhc0hlaWdodFN0eWxlID0gIXRoaXMuZm9jdXNFbGVtLnN0eWxlLmhlaWdodCB8fCB0aGlzLmZvY3VzRWxlbS5zdHlsZS5oZWlnaHQgPT09IFwiYXV0b1wiO1xuICAgICAgY29uc3QgbmV3V2lkdGggPSBNYXRoLm1heCgzMiwgdGhpcy5jb3JuZXIuZW5kc1dpdGgoJ2wnKSA/XG4gICAgICAgIGZvY3VzUmVjdC53aWR0aCArICh0aGlzLnJlc2l6ZVN0YXJ0WCAtIGV2LmNsaWVudFgpIDpcbiAgICAgICAgLy9mb2N1c1JlY3QucmlnaHQgLSBldi5jbGllbnRYIDpcbiAgICAgICAgZm9jdXNSZWN0LndpZHRoIC0gKHRoaXMucmVzaXplU3RhcnRYIC0gZXYuY2xpZW50WCkpO1xuICAgICAgdGhpcy5yZXNpemVTdGFydFggPSBldi5jbGllbnRYO1xuICAgICAgICAvL2V2LmNsaWVudFggLSBmb2N1c1JlY3QubGVmdDtcbiAgICAgIGNvbnN0IGZhY3RvciA9IG5ld1dpZHRoIC8gZm9jdXNSZWN0LndpZHRoO1xuICAgICAgY29uc3QgbmV3SGVpZ2h0ID0gZm9jdXNSZWN0LmhlaWdodCAqIGZhY3RvcjtcbiAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyBcInB4XCI7XG4gICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS5oZWlnaHQgPSBuZXdIZWlnaHQgKyBcInB4XCI7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCh0aGlzLmNvbnRlbnREaXYucGFyZW50RWxlbWVudCwgdGhpcy5mb2N1c0VsZW0pLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgb25Nb3VzZVVwKGV2KSB7XG4gICAgaWYgKHRoaXMuY29ybmVyICYmIHRoaXMuc3RhdGUuZm9jdXNSZWN0ICYmIHRoaXMuZm9jdXNFbGVtKSB7XG4gICAgICB0aGlzLmNvcm5lciA9IG51bGw7XG4gICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZSh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcbiAgICB9XG4gIH1cblxuICBnZXRSZWN0Q29ybmVyKGV2KSB7XG4gICAgZm9yIChjb25zdCBjbGFzc05hbWUgb2YgKGV2LnRhcmdldC5jbGFzc05hbWUgfHwgJycpLnNwbGl0KCcgJykpIHtcbiAgICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAgIGNhc2UgJ2ZwdWwnOlxuICAgICAgICAgIHJldHVybiAndWwnO1xuICAgICAgICBjYXNlICdmcHVyJzpcbiAgICAgICAgICByZXR1cm4gJ2ZwdXInO1xuICAgICAgICBjYXNlICdmcGxyJzpcbiAgICAgICAgICByZXR1cm4gJ2xyJztcbiAgICAgICAgY2FzZSAnZnBsbCc6XG4gICAgICAgICAgcmV0dXJuICdsbCc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZXhlY0ltYWdlRWRpdEFjdGlvbiAoY21kOiBzdHJpbmcpIHtcbiAgICAvL2NvbnNvbGUubG9nKGNtZCk7XG4gICAgaWYgKCF0aGlzLmZvY3VzRWxlbSkgcmV0dXJuO1xuICAgIC8vY29uc29sZS5sb2coXCJkb2luZyBpdFwiKTtcbiAgICBzd2l0Y2ggKGNtZCkge1xuICAgICAgY2FzZSAnZmxvYXQtbGVmdCc6XG4gICAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLmNzc0Zsb2F0ID0gJ2xlZnQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Zsb2F0LXJpZ2h0JzpcbiAgICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuY3NzRmxvYXQgPSAncmlnaHQnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3VuZmxvYXQnOlxuICAgICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS5jc3NGbG9hdCA9ICcnO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdGhpcy50cmlnZ2VyT25DaGFuZ2UodGhpcy5jb250ZW50RGl2LmlubmVySFRNTCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7Zm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCh0aGlzLmNvbnRlbnREaXYucGFyZW50RWxlbWVudCwgdGhpcy5mb2N1c0VsZW0pfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgZGVmYXVsdEFjdGlvbnMgPSB0aGlzLnByb3BzLmRlZmF1bHRBY3Rpb25zIHx8IGFjdGlvbnM7XG4gICAgbGV0IGFjdGlvbnNUb1VzZSA9IHRoaXMucHJvcHMuYWN0aW9ucyA/IHRoaXMucHJvcHMuYWN0aW9ucy5tYXAoYWN0aW9uID0+XG4gICAgICB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyA/XG4gICAgICAgIGRlZmF1bHRBY3Rpb25zW2FjdGlvbl0gOlxuICAgICAgICBkZWZhdWx0QWN0aW9uc1thY3Rpb24ubmFtZV0gP1xuICAgICAgICAgIHsgLi4uZGVmYXVsdEFjdGlvbnNbYWN0aW9uLm5hbWVdLCAuLi5hY3Rpb24gfSA6XG4gICAgICAgICAgYWN0aW9uKVxuICAgIDogT2JqZWN0LmtleXMoZGVmYXVsdEFjdGlvbnMpLm1hcChhY3Rpb24gPT4gZGVmYXVsdEFjdGlvbnNbYWN0aW9uXSk7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5mb2N1c1JlY3QpIHtcbiAgICAgIGFjdGlvbnNUb1VzZSA9IGFjdGlvbnNUb1VzZS5jb25jYXQoaW1hZ2VFZGl0QWN0aW9ucyhjbWQgPT4gdGhpcy5leGVjSW1hZ2VFZGl0QWN0aW9uKGNtZCkpKTtcbiAgICB9XG5cbiAgICBjb25zdCB7Zm9jdXNSZWN0fSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge3JlYWRPbmx5LCByZXBvcnROdW1DaGFycywgbWF4Q2hhcnN9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17dGhpcy5wcm9wcy5jbGFzc05hbWV9PlxuICAgICAgeyFyZWFkT25seSAmJiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5hY3Rpb25iYXJ9PlxuICAgICAgICB7YWN0aW9uc1RvVXNlLm1hcCgoYWN0aW9uLCBpZHgpID0+XG4gICAgICAgICAgPGJ1dHRvbiBrZXk9e2lkeH0gY2xhc3NOYW1lPXtjbGFzc2VzLmJ1dHRvbn1cbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBhY3Rpb24uaWNvbn19XG4gICAgICAgICAgICB0aXRsZT17YWN0aW9uLnRpdGxlfVxuICAgICAgICAgICAgb25Nb3VzZURvd249e2V2PT57YWN0aW9uLnJlc3VsdChldiwgdGhpcyl9fVxuICAgICAgICAgICAgb25Nb3VzZVVwPXtldj0+c2V0VGltZW91dCgoKT0+dGhpcy5jb250ZW50RGl2LmZvY3VzKCksIDEwKX1cbiAgICAgICAgICAvPil9XG4gICAgICA8L2Rpdj59XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17cmVhZE9ubHkgPyBjbGFzc2VzLnJlYWRvbmx5Q29udGVudCA6IGNsYXNzZXMuY29udGVudH0gc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJywgdG9wOiAwLCBsZWZ0OiAwfX0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZWRpdG9yXCJcbiAgICAgICAgICByZWY9e2RpdiA9PiB0aGlzLmNvbnRlbnREaXYgPSBkaXZ9XG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHdhc2hIdG1sKHRoaXMucHJvcHMuaHRtbCl9fVxuICAgICAgICAgIGNvbnRlbnRFZGl0YWJsZT17IXJlYWRPbmx5fVxuICAgICAgICAgIG9uUGFzdGU9e2V2ID0+IHtcbiAgICAgICAgICAgIGlmICghaXNOYU4obWF4Q2hhcnMpKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHt0YXJnZXQsIGN1cnJlbnRUYXJnZXR9ID0gZXY7XG4gICAgICAgICAgICAgIC8vY29uc3QgdGV4dEJlaW5nT3ZlcndyaXR0ZW4gPSAodGFyZ2V0IGFzIGFueSkuaW5uZXJUZXh0IHx8IFwiXCI7XG4gICAgICAgICAgICAgIGNvbnN0IGVkaXRvclRleHQgPSAoY3VycmVudFRhcmdldCAmJiBjdXJyZW50VGFyZ2V0LmlubmVyVGV4dCkgfHwgXCJcIjtcbiAgICAgICAgICAgICAgY29uc3QgdGV4dEJlaW5nUGFzdGVkID0gZXYuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwidGV4dC9wbGFpblwiKSB8fCBcIlwiO1xuICAgICAgICAgICAgICBpZiAoZWRpdG9yVGV4dC5sZW5ndGggKyB0ZXh0QmVpbmdQYXN0ZWQubGVuZ3RoID4gbWF4Q2hhcnMpIHtcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgICBvbktleVVwPXtyZXBvcnROdW1DaGFycyA/IGV2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtpbm5lclRleHR9ID0gKGV2LnRhcmdldCBhcyBhbnkpO1xuICAgICAgICAgICAgcmVwb3J0TnVtQ2hhcnMoaW5uZXJUZXh0ID8gaW5uZXJUZXh0Lmxlbmd0aCA6IE5hTik7XG4gICAgICAgICAgfSA6IG51bGx9XG4gICAgICAgICAgb25LZXlQcmVzcz17IWlzTmFOKG1heENoYXJzKSA/IGV2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHtpbm5lclRleHR9ID0gKGV2LnRhcmdldCBhcyBhbnkpO1xuICAgICAgICAgICAgaWYgKGlubmVyVGV4dCAmJiBpbm5lclRleHQubGVuZ3RoID49IG1heENoYXJzKSB7XG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSA6IG51bGx9XG4gICAgICAgICAgb25JbnB1dD17ZXYgPT4gdGhpcy50cmlnZ2VyT25DaGFuZ2UoKGV2LnRhcmdldCBhcyBhbnkpLmlubmVySFRNTCl9XG4gICAgICAgICAgb25LZXlEb3duPXtldiA9PiB7XG4gICAgICAgICAgICBpZiAocmVhZE9ubHkpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChyZXBvcnROdW1DaGFycyAmJiBldi5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICAgIHJlcG9ydE51bUNoYXJzKChldi5jdXJyZW50VGFyZ2V0LmlubmVyVGV4dCB8fCBcIlwiKS5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiS2V5OiBcIiArIGV2LndoaWNoKTtcbiAgICAgICAgICAgIGlmIChldi53aGljaCA+PSAzNSAmJiBldi53aGljaCA8PSA0MCkgey8vIGhvbWUvZW5kL3VwL2Rvd24vbGVmdC9yaWdodFxuICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTsgLy8gUHJldmVudCBlbnRpcmUgcGFnZSBmcm9tIHNjcm9sbGluZz8/XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXYud2hpY2ggPT09IDkpIHtcbiAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTsvLyBUQUJcbiAgICAgICAgICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgZXhlYyhcIm91dGRlbnRcIik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhlYyhcImluZGVudFwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIChldi5rZXlDb2RlID09PSA4IHx8IGV2LmtleUNvZGUgPT09IDQ2KSAmJiAvLyBEZWxldGUgb3IgQmFjayBidXR0b25zXG4gICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtICYmIHRoaXMuc3RhdGUuZm9jdXNSZWN0KVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZiAodGhpcy5mb2N1c0VsZW0gJiYgdGhpcy5mb2N1c0VsZW0ucGFyZW50RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5mb2N1c0VsZW0pOyAvLyBSZW1vdmUgbWFya2VkIGltYWdlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5mb2N1c0VsZW0gPSBudWxsO1xuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtmb2N1c1JlY3Q6IG51bGx9KTtcbiAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyT25DaGFuZ2UodGhpcy5jb250ZW50RGl2LmlubmVySFRNTCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgICAge2ZvY3VzUmVjdCAmJiA8ZGl2XG4gICAgICAgICAgcmVmPXtkaXYgPT4gdGhpcy5mb2N1c1JlY3REaXYgPSBkaXZ9XG4gICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcmVjdH1cbiAgICAgICAgICBvbkJsdXI9e3RoaXMub25CbHVyfVxuICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICBvdXRsaW5lOiAwLFxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IHRoaXMuc3RhdGUuZm9jdXNSZWN0LnRvcCxcbiAgICAgICAgICAgIGxlZnQ6IHRoaXMuc3RhdGUuZm9jdXNSZWN0LmxlZnQsXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5zdGF0ZS5mb2N1c1JlY3Qud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuc3RhdGUuZm9jdXNSZWN0LmhlaWdodH19PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcHVsXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgdG9wOjAsIGxlZnQ6MH19IC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNwb2ludCArIFwiIGZwdXJcIn0gc3R5bGU9e3twb3NpdGlvbjonYWJzb2x1dGUnLCB0b3A6MCwgcmlnaHQ6MH19IC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNwb2ludCArIFwiIGZwbHJcIn0gc3R5bGU9e3twb3NpdGlvbjonYWJzb2x1dGUnLCBib3R0b206MCwgcmlnaHQ6MH19IC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNwb2ludCArIFwiIGZwbGxcIn0gc3R5bGU9e3twb3NpdGlvbjonYWJzb2x1dGUnLCBib3R0b206MCwgbGVmdDowfX0gLz5cbiAgICAgICAgPC9kaXY+fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QgKHBhcmVudDogSFRNTEVsZW1lbnQsIGNoaWxkOiBIVE1MRWxlbWVudCkgOiBDbGllbnRSZWN0IHtcbiAgY29uc3QgcGFyZW50UmVjdCA9IHBhcmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgY2hpbGRSZWN0ID0gY2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgdG9wOiBjaGlsZFJlY3QudG9wIC0gcGFyZW50UmVjdC50b3AgKyBwYXJlbnQuc2Nyb2xsVG9wLFxuICAgIGxlZnQ6IGNoaWxkUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0ICsgcGFyZW50LnNjcm9sbExlZnQsXG4gICAgYm90dG9tOiBjaGlsZFJlY3QuYm90dG9tIC0gcGFyZW50UmVjdC50b3AgKyBwYXJlbnQuc2Nyb2xsVG9wLFxuICAgIHJpZ2h0OiBjaGlsZFJlY3QucmlnaHQgLSBwYXJlbnRSZWN0LmxlZnQgKyBwYXJlbnQuc2Nyb2xsTGVmdCxcbiAgICB3aWR0aDogY2hpbGRSZWN0LndpZHRoLFxuICAgIGhlaWdodDogY2hpbGRSZWN0LmhlaWdodFxuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW1hZ2VFZGl0QWN0aW9ucyhjYikge1xuICByZXR1cm4gW3tcbiAgICBuYW1lOiAnZmxvYXQtbGVmdCcsXG4gICAgaWNvbjogYDxkaXYgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZVwiPlxuICAgICAgPGkgY2xhc3M9XCJmYSBmYS1hbGlnbi1yaWdodFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTsgbGVmdDotNHB4O3RvcDowOyB0cmFuc2Zvcm06IHNjYWxlKDAuNSk7IHRyYW5zZm9ybS1vcmlnaW46IGxlZnQgdG9wXCI+XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+YCxcbiAgICB0aXRsZTogJ0zDpXQgYmlsZGVuIGZseXRhIHbDpG5zdGVyIG9tIHRleHQnLFxuICAgIHJlc3VsdDogKCkgPT4gY2IoJ2Zsb2F0LWxlZnQnKVxuICB9LCB7XG4gICAgbmFtZTogJ2Zsb2F0LXJpZ2h0JyxcbiAgICBpY29uOiBgPGRpdiBzdHlsZT1cInBvc2l0aW9uOnJlbGF0aXZlXCI+XG4gICAgICA8aSBjbGFzcz1cImZhIGZhLWFsaWduLWxlZnRcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7IHJpZ2h0Oi00cHg7dG9wOjA7IHRyYW5zZm9ybTogc2NhbGUoMC41KTsgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgdG9wXCI+XG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+YCxcbiAgICB0aXRsZTogJ0zDpXQgYmlsZGVuIGZseXRhIGjDtmdlciBvbSB0ZXh0JyxcbiAgICByZXN1bHQ6ICgpID0+IGNiKCdmbG9hdC1yaWdodCcpXG4gIH0sIHtcbiAgICBuYW1lOiAndW5mbG9hdCcsXG4gICAgaWNvbjogYDxkaXYgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZTtcIiBhcmlhLWhpZGRlbj1cInRydWVcIj5cbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjBcIj4mIzgyNTQ7PC9kaXY+XG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7dG9wOjA6bGVmdDowO3RyYW5zZm9ybTogc2NhbGUoMC41KTsgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b21cIj5cbiAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjBcIj5fPC9kaXY+XG4gICAgPC9kaXY+YCxcbiAgICB0aXRsZTogJ1BsYWNlcmEgYmlsZGVuIHDDpSBlZ2VuIHJhZCcsXG4gICAgcmVzdWx0OiAoKSA9PiBjYigndW5mbG9hdCcpXG4gIH1dO1xufVxuXG4iLCJleHBvcnQgKiBmcm9tICcuL29ic2VydmFibGUnO1xuZXhwb3J0ICogZnJvbSAnLi92YWx1ZSc7XG5leHBvcnQgKiBmcm9tICcuL2NvbGxlY3Rpb24nO1xuZXhwb3J0ICogZnJvbSAnLi9lbWl0dGVyJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7IERvY3VtZW50LCBDb3Vyc2UsIEtub3dsZWRnZVJlcXVpcmVtZW50LCBDb3Vyc2VNb2R1bGUsIFRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBmbGF0dGVuLCBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBXaXRoR3JhcGhzIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cyhjb3Vyc2U6IENvdXJzZSkge1xuICBjb25zdCB1bmNvdmVyZWRSZXF1aXJlbWVudHMgPSBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzLnJlZHVjZSgocmVzdWx0LCBpdGVtKSA9PiB7XG4gICAgcmVzdWx0W2l0ZW0uaWRdID0gaXRlbTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LCB7fSBhcyB7IFtpZDogc3RyaW5nXTogS25vd2xlZGdlUmVxdWlyZW1lbnQgfSk7XG5cbiAgY291cnNlLnRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgdGFzay5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZm9yRWFjaChrciA9PiB7XG4gICAgICBkZWxldGUgdW5jb3ZlcmVkUmVxdWlyZW1lbnRzW2tyLmlkXTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKHVuY292ZXJlZFJlcXVpcmVtZW50cykubWFwKGlkID0+IHVuY292ZXJlZFJlcXVpcmVtZW50c1tpZF0pO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcXNSZWZlcmVuY2luZ0RvYyB7XG4gIGtub3dsZWRnZVJlcXVpcmVtZW50czogQXJyYXk8e2lkOiBzdHJpbmd9PlxuICBhYmlsaXRpZXM6IEFycmF5PHtpZDogc3RyaW5nfT5cbiAgY2VudHJhbENvbnRlbnQ6IEFycmF5PHtpZDogc3RyaW5nfT5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldElkc05vdENvdmVyZWRCeVRhc2tzKGNvdXJzZTogQ291cnNlKSA6IHtbaWQ6IHN0cmluZ106IHRydWV9IHtcbiAgcmV0dXJuIGdldElkc05vdENvdmVyZWRCeVJlcVJlZmVyZW5jaW5nRG9jcyhcbiAgICBbY291cnNlIGFzIFdpdGhHcmFwaHM8Q291cnNlLCBcImFiaWxpdGllc1wiIHwgXCJjZW50cmFsQ29udGVudFwiIHwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIj5dLFxuICAgIGNvdXJzZS50YXNrcyBhcyBXaXRoR3JhcGhzPFRhc2ssIFwiYWJpbGl0aWVzXCIgfCBcImNlbnRyYWxDb250ZW50XCIgfCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiPltdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldElkc05vdENvdmVyZWRCeVJlcVJlZmVyZW5jaW5nRG9jcyhcbiAgdGVtcGxhdGVzOiBSZXFzUmVmZXJlbmNpbmdEb2NbXSxcbiAgZG9jc0JlaW5nQ2hlY2tlZDogUmVxc1JlZmVyZW5jaW5nRG9jW10pIDoge1tpZDogc3RyaW5nXTogdHJ1ZX1cbntcbiAgY29uc3QgdW5jb3ZlcmVkSWRzID0ge307XG4gIC8vIDEuIE1hcmsgdGhlIGlkcyBvZiBhbGwga25vd2xlZGdlIHJlcXVpcmVtZW50cywgYWJpbGl0aWVzIGFuZCBjZW50cmFsIGNvbnRlbnQgZm9yIHRoaXMgY291cnNlOlxuICB0ZW1wbGF0ZXMuZm9yRWFjaChjb3Vyc2UgPT4ge1xuICAgIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZm9yRWFjaChyID0+IHtcbiAgICAgIHVuY292ZXJlZElkc1tyLmlkXSA9IHRydWU7XG4gICAgfSk7XG4gICAgY291cnNlLmFiaWxpdGllcy5mb3JFYWNoKGEgPT4ge1xuICAgICAgdW5jb3ZlcmVkSWRzW2EuaWRdID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb3Vyc2UuY2VudHJhbENvbnRlbnQuZm9yRWFjaChjYyA9PiB7XG4gICAgICB1bmNvdmVyZWRJZHNbY2MuaWRdID0gdHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG4gIC8vIDIuIExpc3QgYWxsIHRhc2tzIGFuZCB1bm1hcmsgYWxsIGlkcyB0aGF0IHRoZXkgcmVmZXIgdG9cbiAgZG9jc0JlaW5nQ2hlY2tlZC5mb3JFYWNoKGRvYyA9PiB7XG4gICAgZG9jLmtub3dsZWRnZVJlcXVpcmVtZW50cy5mb3JFYWNoKGtyID0+IHtcbiAgICAgIGRlbGV0ZSB1bmNvdmVyZWRJZHNba3IuaWRdO1xuICAgIH0pO1xuICAgIGRvYy5hYmlsaXRpZXMuZm9yRWFjaChhID0+IHtcbiAgICAgIGRlbGV0ZSB1bmNvdmVyZWRJZHNbYS5pZF07XG4gICAgfSk7XG4gICAgZG9jLmNlbnRyYWxDb250ZW50LmZvckVhY2goY2MgPT4ge1xuICAgICAgZGVsZXRlIHVuY292ZXJlZElkc1tjYy5pZF07XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gdW5jb3ZlcmVkSWRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FuaXR5Q2hlY2sgKGNvdXJzZTogQ291cnNlKSB7XG4gIGZ1bmN0aW9uIGhhc0R1cGxpY2F0ZVRhc2tzKGNvdXJzZTogQ291cnNlKSB7XG4gICAgY29uc3QgdGFza0lkczoge1tpZDpzdHJpbmddOiBib29sZWFufSA9IHt9O1xuICAgIHJldHVybiBmbGF0dGVuKGNvdXJzZS5tb2R1bGVzLm1hcChtb2R1bGUgPT4gbW9kdWxlLnRhc2tJZHMubWFwKHRhc2tJZCA9PiB7XG4gICAgICBpZiAodGFza0lkc1t0YXNrSWRdKSB7XG4gICAgICAgIGNvbnN0IHRhc2sgPSBjb3Vyc2UudGFza3MuZmluZCh0ID0+IHQuaWQgPT09IHRhc2tJZCk7XG4gICAgICAgIHJldHVybiBMYFNhbW1hIHVwcGdpZnQgZsO2cmVrb21tZXIgZmxlcmEgZ8OlbmdlcjogXCIke3Rhc2submFtZX1cImA7XG4gICAgICB9XG4gICAgICB0YXNrSWRzW3Rhc2tJZF0gPSB0cnVlO1xuICAgIH0pLmZpbHRlcih4ID0+IHgpKSk7XG4gIH1cblxuICBmdW5jdGlvbiB0YXNrc1dpdGhTYW1lVXJsKGNvdXJzZTogQ291cnNlKSB7XG4gICAgY29uc3QgdGFza1VybHM6IHtbdXJsOnN0cmluZ106IFRhc2t9ID0ge307XG4gICAgcmV0dXJuIGNvdXJzZS50YXNrcy5tYXAodGFzayA9PiB7XG4gICAgICBpZiAodGFzay51cmwpIHtcbiAgICAgICAgaWYgKHRhc2tVcmxzW3Rhc2sudXJsXSkge1xuICAgICAgICAgIHJldHVybiBMYFR2w6UgdXBwZ2lmdGVyIHBla2FyIHDDpSBzYW1tYSBVUkw6IFwiJHt0YXNrVXJsc1t0YXNrLnVybF0ubmFtZX1cIiBzYW10IFwiJHt0YXNrLm5hbWV9XCJgO1xuICAgICAgICB9XG4gICAgICAgIHRhc2tVcmxzW3Rhc2sudXJsXSA9IHRhc2s7XG4gICAgICB9XG4gICAgfSkuZmlsdGVyKHggPT4geCk7ICBcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc0VtcHR5TW9kdWxlTmFtZXMoY291cnNlOiBDb3Vyc2UpIHtcbiAgICByZXR1cm4gY291cnNlLm1vZHVsZXMuc29tZSAobW9kdWxlID0+IG1vZHVsZS5uYW1lID09PSBcIlwiKSAmJlxuICAgICAgTGBEZXQgZmlubnMgbWluc3QgZW4gbW9kdWwgdXRhbiBhbmdpdmV0IG5hbW5gO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFzRHVwbGljYXRlTW9kdWxlTmFtZXMoY291cnNlOiBDb3Vyc2UpIHtcbiAgICBjb25zdCBtb2R1bGVOYW1lczoge1tuYW1lOiBzdHJpbmddOiB0cnVlfSA9IHt9O1xuICAgIHJldHVybiBjb3Vyc2UubW9kdWxlcy5tYXAobW9kdWxlID0+IHtcbiAgICAgIGlmIChtb2R1bGUubmFtZSAmJiBtb2R1bGVOYW1lc1ttb2R1bGUubmFtZV0pIHtcbiAgICAgICAgcmV0dXJuIExgTW9kdWxlbiBtZWQgbmFtbiAke21vZHVsZS5uYW1lfSBmw7ZyZWtvbW1lciBmbGVyYSBnw6VuZ2VyYDtcbiAgICAgIH1cbiAgICAgIGlmIChtb2R1bGUubmFtZSkgbW9kdWxlTmFtZXNbbW9kdWxlLm5hbWVdID0gdHJ1ZTtcbiAgICB9KVxuICB9XG5cbiAgY29uc3QgY2hlY2tzID0gZmxhdHRlbihbXG4gICAgaGFzRHVwbGljYXRlVGFza3MoY291cnNlKSxcbiAgICB0YXNrc1dpdGhTYW1lVXJsKGNvdXJzZSksXG4gICAgaGFzRW1wdHlNb2R1bGVOYW1lcyhjb3Vyc2UpLFxuICAgIGhhc0R1cGxpY2F0ZU1vZHVsZU5hbWVzKGNvdXJzZSlcbiAgXSk7XG5cbiAgcmV0dXJuIGNoZWNrcy5maWx0ZXIgKHJlc3VsdCA9PiByZXN1bHQpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUYXNrc1BlcklkIChjb3Vyc2U6IENvdXJzZSkge1xuICBjb25zdCByZXN1bHQ6IHtbaWQ6IHN0cmluZ106IFRhc2tbXX0gPSB7fTtcbiAgZnVuY3Rpb24gYWRkKGlkOiBzdHJpbmcsIHRhc2s6IFRhc2spIHtcbiAgICBjb25zdCBsaXN0ID0gcmVzdWx0W2lkXSB8fCAocmVzdWx0W2lkXSA9IFtdKTtcbiAgICBsaXN0LnB1c2godGFzayk7XG4gIH1cbiAgY291cnNlLnRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgdGFzay5hYmlsaXRpZXMuZm9yRWFjaChhID0+IGFkZChhLmlkLCB0YXNrKSk7XG4gICAgdGFzay5jZW50cmFsQ29udGVudC5mb3JFYWNoKGMgPT4gYWRkKGMuaWQsIHRhc2spKTtcbiAgICB0YXNrLmZ1dHVyZUFiaWxpdGllcy5mb3JFYWNoKGZhID0+IGFkZChmYSwgdGFzaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvdXJzZSwgQ291cnNlTW9kdWxlLCBUYXNrLCBEb2N1bWVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gXCIuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3hcIjtcbmltcG9ydCB7IGFycmF5VG9Mb29rdXAgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMgfSBmcm9tICcuLi9jb3Vyc2VzL2J1c2luZXNzLWxvZ2ljJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgb3B0aW9uczogKERvY3VtZW50ICYge2dyb3VwPzogc3RyaW5nfSlbXTtcbiAgdGl0bGU7XG4gIG1hcmtNb2RlOiBib29sZWFuO1xuICBtYXJrZWRJZHM6IHN0cmluZ1tdO1xuICBtaWdyYXRlZElkcz86IHtbaWQ6IHN0cmluZ106IGFueX07XG4gIHVuY292ZXJlZElkcz86IHtbaWQ6IHN0cmluZ106IHRydWV9O1xuICBvbk1hcmtDaGFuZ2VkOiAoaWQ6IHN0cmluZywgaXNNYXJrZWQ6IGJvb2xlYW4pID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG59XG5cbmV4cG9ydCBjbGFzcyBTZWxlY3RSZWxhdGVkRG9jcyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtvcHRpb25zLCB0aXRsZSwgbWFya2VkSWRzLCBtYXJrTW9kZSwgbWlncmF0ZWRJZHMsIHVuY292ZXJlZElkc30gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGdyb3VwZWRPcHRpb25zID0gYXJyYXlUb0xvb2t1cChvcHRpb25zLCBkID0+IGQuZ3JvdXAgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGNvbnN0IGdyb3VwcyA9IE9iamVjdC5rZXlzKGdyb3VwZWRPcHRpb25zKTtcbiAgICByZXR1cm4gPE9wZW5DbG9zZUJveCB0aXRsZT17PHA+e3RpdGxlfTwvcD59IGNsYXNzTmFtZT1cImxhcmdlclwiPlxuICAgICAgICB7Z3JvdXBzLm1hcChncm91cCA9PiA8UmVhY3QuRnJhZ21lbnQga2V5PXtncm91cH0+XG4gICAgICAgICAge2dyb3Vwcy5sZW5ndGggPT09IDEgPyBudWxsIDogPD48YnIvPjxoNT57Z3JvdXB9PC9oNT48aHIvPjwvPn1cbiAgICAgICAgICB7Z3JvdXBlZE9wdGlvbnNbZ3JvdXBdLm1hcChvcHRpb24gPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNNYXJrZWQgPSBtYXJrZWRJZHMuc29tZSh4ID0+IHggPT09IG9wdGlvbi5pZCk7XG4gICAgICAgICAgICBjb25zdCBpc01pZ3JhdGVkID0gbWlncmF0ZWRJZHMgJiYgISFtaWdyYXRlZElkc1tvcHRpb24uaWRdO1xuICAgICAgICAgICAgY29uc3QgaXNVbmNvdmVyZWQgPSB1bmNvdmVyZWRJZHMgJiYgdW5jb3ZlcmVkSWRzW29wdGlvbi5pZF07XG4gICAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCIga2V5PXtvcHRpb24uaWR9IG9uQ2xpY2s9eygpPT5cbiAgICAgICAgICAgICAgbWFya01vZGUgJiYgdGhpcy5wcm9wcy5vbk1hcmtDaGFuZ2VkKG9wdGlvbi5pZCwgIWlzTWFya2VkKX0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtcImhvcml6b250YWxJdGVtIHRvcCBzcGFjZWRcIiArXG4gICAgICAgICAgICAgICAgKG1hcmtNb2RlID8gXCIgc2VsZWN0YWJsZVwiIDogXCJcIikgK1xuICAgICAgICAgICAgICAgIChpc01hcmtlZCA/IFwiIG1hcmtlZEdyZWVuXCIgOiAoaXNVbmNvdmVyZWQgP1xuICAgICAgICAgICAgICAgICAgXCIgbWFya2VkUmVkXCI6XG4gICAgICAgICAgICAgICAgICBcIlwiKSkgK1xuICAgICAgICAgICAgICAgIChpc01pZ3JhdGVkID8gXCIgbWlncmF0ZWRcIiA6IFwiXCIpfVxuICAgICAgICAgICAgICAgIHRpdGxlPXtpc01pZ3JhdGVkID9cbiAgICAgICAgICAgICAgICAgIG1hcmtNb2RlID9cbiAgICAgICAgICAgICAgICAgICAgYFNrb2x2ZXJrZXQgaGFyIHVwcGRhdGVyYXQgdGV4dGVucyBmb3JtdWxlcmluZy4gRHUga2FuIGdyYW5za2Egw6RuZHJpbmdlbiBnZW5vbSBhdHQgZsOkbGxhIHV0IHZhcm5pbmdzYm94ZW4gdGlsbCBow7ZnZXIsIG1lZCB0aXRlbCBcIlVwcGRhdGVyYWRlIGZvcm11bGVyaW5nYXIgZnLDpW4gU2tvbHZlcmtldFwiYCA6XG4gICAgICAgICAgICAgICAgICAgIGBTa29sdmVya2V0IGhhciB1cHBkYXRlcmF0IHRleHRlbnMgZm9ybXVsZXJpbmcsIG1lbiBkZXR0YSBoYXIgw6RubnUgaW50ZSBncmFuc2thdHMgYXYgdXBwZ2lmdGVucyByZWRpZ2VyaW5nc2JlaMO2cmlnZWAgOlxuICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkfT5cbiAgICAgICAgICAgICAgICA8cCBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogb3B0aW9uLm5hbWV9fSAvPlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PjtcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pfVxuICAgIDwvT3BlbkNsb3NlQm94PlxuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIHRhZz86ICdpbnB1dCcgfCAndGV4dGFyZWEnXG4gICAgZWFnZXI/OiBib29sZWFuO1xuICAgIG9uQ2hhbmdlOiAobmV3TmFtZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nOyAvLyBJZiB0ZXh0IGlzIGVtcHR5LCB0aGlzIHdpbGwgYmUgdGhlIHBsYWNlaG9sZGVyXG4gICAgY2xpY2tBZHZlcnRpc2VUZXh0Pzogc3RyaW5nO1xuICAgIG1heENoYXJzPzogbnVtYmVyO1xuICAgIHJlYWRPbmx5PzogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgICBlZGl0TW9kZTogYm9vbGVhbjtcbiAgICBydW50aW1lU3R5bGU6IE9iamVjdDtcbiAgICB0ZXh0OiBzdHJpbmcgfCBudWxsO1xufVxuXG4vKiogXG4gKiBNYWtlcyBhIHRleHQgZWxlbWVudCAoc3VjaCBhcyBhbiBBIG9yIFAgdGFnKSBwb3NzaWJsZSB0byByZXBsYWNlIHdpdGggYW4gaW5wdXQgZWxlbWVudCBvZiB0aGUgc2FtZSBDU1Mgc3R5bGUsIGZvciBleGFtcGxlIGJ5IGNsaWNraW5nIG9uIGl0LlxuICogXG4qL1xuZXhwb3J0IGNsYXNzIFJlbmFtZWFibGVUZXh0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gICAgbGFiZWw6IEhUTUxFbGVtZW50O1xuICAgIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBlZGl0TW9kZTogZmFsc2UsXG4gICAgICAgICAgICBydW50aW1lU3R5bGU6IG51bGwsXG4gICAgICAgICAgICB0ZXh0OiBwcm9wcy50ZXh0IHx8IFwiXCJcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnRleHQgIT09IG5leHRQcm9wcy50ZXh0KSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHt0ZXh0OiBuZXh0UHJvcHMudGV4dCB8fCBcIlwifSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnN0YXRlLnRleHQgfHwgXCJcIjtcbiAgICAgICAgcmV0dXJuIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wicmVuYW1lYWJsZS10ZXh0XCIgKyAodGV4dCA/IFwiXCIgOiBcIiB1bm5hbWVkXCIpICsgKHRoaXMucHJvcHMucmVhZE9ubHkgPyBcIiBkaXNhYmxlZFwiIDogXCJcIil9XG4gICAgICAgICAgICAgICAgdGFiSW5kZXg9e3RoaXMuc3RhdGUuZWRpdE1vZGUgPyB1bmRlZmluZWQgOiAwfVxuICAgICAgICAgICAgICAgIG9uRm9jdXM9eyhlKT0+e3RoaXMucmVuYW1lKCl9fVxuICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6IFwiMTAwJVwifX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICByZWY9e2xhYmVsID0+IHRoaXMubGFiZWwgPSBsYWJlbH0gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogdGhpcy5zdGF0ZS5lZGl0TW9kZSA/ICdub25lJyA6ICcnXG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dGV4dCB8fCB0aGlzLnByb3BzLmNsaWNrQWR2ZXJ0aXNlVGV4dH1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge3RoaXMucHJvcHMudGFnID09PSAndGV4dGFyZWEnID9cbiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgcmVmPXtpbnB1dCA9PiB0aGlzLmlucHV0ID0gaW5wdXR9XG4gICAgICAgICAgICAgICAgICAgIG1heExlbmd0aD17dGhpcy5wcm9wcy5tYXhDaGFyc31cbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi50aGlzLnN0YXRlLnJ1bnRpbWVTdHlsZSwgZGlzcGxheTogdGhpcy5zdGF0ZS5lZGl0TW9kZSA/ICcnIDogJ25vbmUnfX1cbiAgICAgICAgICAgICAgICAgICAgb25Gb2N1cz17ZXY9PiQoZXYudGFyZ2V0KS5zZWxlY3QoKX1cbiAgICAgICAgICAgICAgICAgICAgb25CbHVyPXt0aGlzLm9uQmx1ci5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGV4dH1cbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17dGhpcy5zdGF0ZS5lZGl0TW9kZSA/IDAgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgICAgIC8+IDogXG4gICAgICAgICAgICAgICAgPGlucHV0IHJlZj17aW5wdXQgPT4gdGhpcy5pbnB1dCA9IGlucHV0fVxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIG1heExlbmd0aD17dGhpcy5wcm9wcy5tYXhDaGFyc31cbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi50aGlzLnN0YXRlLnJ1bnRpbWVTdHlsZSwgZGlzcGxheTogdGhpcy5zdGF0ZS5lZGl0TW9kZSA/ICcnIDogJ25vbmUnfX1cbiAgICAgICAgICAgICAgICAgICAgb25Gb2N1cz17ZXY9PiQoZXYudGFyZ2V0KS5zZWxlY3QoKX1cbiAgICAgICAgICAgICAgICAgICAgb25CbHVyPXt0aGlzLm9uQmx1ci5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGV4dH1cbiAgICAgICAgICAgICAgICAgICAgb25LZXlEb3duPXt0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17dGhpcy5zdGF0ZS5lZGl0TW9kZSA/IDAgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXt0aGlzLnByb3BzLnBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB9XG4gICAgICAgIDwvZGl2PlxuICAgIH1cblxuICAgIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3KSB7IC8vIEVTQ1xuICAgICAgICAgICAgdGhpcy5pbnB1dC52YWx1ZSA9IHRoaXMucHJvcHMudGV4dCB8fCBcIlwiO1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5ibHVyKCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHsgLy8gRU5URVJcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlT25DaGFuZ2UodGhpcy5pbnB1dC52YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdE1vZGU6IGZhbHNlLCB0ZXh0OiB0aGlzLmlucHV0LnZhbHVlIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25CbHVyKGU6IEV2ZW50KSB7XG4gICAgICAgIHRoaXMucHJvcGFnYXRlT25DaGFuZ2UodGhpcy5pbnB1dC52YWx1ZSk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBlZGl0TW9kZTogZmFsc2UsIHRleHQ6IHRoaXMuaW5wdXQudmFsdWUgfSk7XG4gICAgfVxuXG4gICAgcHJvcGFnYXRlZE9uQ2hhbmdlOiBzdHJpbmc7XG5cbiAgICBwcm9wYWdhdGVPbkNoYW5nZShuZXdWYWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5wcm9wYWdhdGVkT25DaGFuZ2UgIT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlZE9uQ2hhbmdlID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB0aGlzLnByb3BzLm9uQ2hhbmdlKG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uQ2hhbmdlKGU6IEV2ZW50KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0ZXh0OiB0aGlzLmlucHV0LnZhbHVlIH0pO1xuICAgICAgICBpZiAodGhpcy5wcm9wcy5lYWdlcikgdGhpcy5wcm9wYWdhdGVPbkNoYW5nZSh0aGlzLmlucHV0LnZhbHVlKTtcbiAgICB9XG5cbiAgICByZW5hbWUodHh0Pzogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmVkaXRNb2RlIHx8IHRoaXMucHJvcHMucmVhZE9ubHkpIHJldHVybjtcbiAgICAgICAgdHh0ID0gdHh0IHx8IHRoaXMuc3RhdGUudGV4dCB8fCBcIlwiO1xuICAgICAgICBjb25zdCBsYWJlbCA9ICQodGhpcy5sYWJlbCk7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdGV4dDogdHh0LFxuICAgICAgICAgICAgZWRpdE1vZGU6IHRydWUsXG4gICAgICAgICAgICBydW50aW1lU3R5bGU6IHtcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IGxhYmVsLmNzcygndGV4dEFsaWduJyksXG4gICAgICAgICAgICAgICAgZm9udFNpemU6IGxhYmVsLmNzcygnZm9udC1zaXplJyksXG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcDogbGFiZWwuY3NzKCdwYWRkaW5nVG9wJyksXG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogbGFiZWwuY3NzKCdwYWRkaW5nQm90dG9tJyksXG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IGxhYmVsLmNzcygncGFkZGluZ0xlZnQnKSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQ6IGxhYmVsLmNzcygncGFkZGluZ1JpZ2h0JyksXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiBsYWJlbC5jc3MoJ21hcmdpblRvcCcpLFxuICAgICAgICAgICAgICAgIG1hcmdpbkJvdHRvbTogbGFiZWwuY3NzKCdtYXJnaW5Cb3R0b20nKSxcbiAgICAgICAgICAgICAgICBtYXJnaW5MZWZ0OiBsYWJlbC5jc3MoJ21hcmdpbkxlZnQnKSxcbiAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogbGFiZWwuY3NzKCdtYXJnaW5SaWdodCcpLFxuICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogbGFiZWwuY3NzKCdib3JkZXJSYWRpdXMnKSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGxhYmVsLmNzcygnYmFja2dyb3VuZENvbG9yJyksXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogbGFiZWwuY3NzKCdsaW5lSGVpZ2h0JyksXG4gICAgICAgICAgICAgICAgZm9udFdlaWdodDogbGFiZWwuY3NzKCdmb250V2VpZ2h0JyksXG4gICAgICAgICAgICAgICAgb3V0TGluZTogMCxcbiAgICAgICAgICAgICAgICBib3JkZXJTdHlsZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogXCIxMDAlXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiMTAwJVwiLFxuICAgICAgICAgICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sICgpPT4kKHRoaXMuaW5wdXQpLmZvY3VzKCkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7VXNlcn0gZnJvbSAnLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xuXG5leHBvcnQgY29uc3QgdXNlcnMgOiBVc2VyW10gPSBbe1xuICAgIGRpc3BsYXlOYW1lOiBcIkFkbWluaXN0cmF0w7ZyXCIsXG4gICAgbWFpbDogXCJ2ZW1lbmRvQGtlZHNjaG9vbHMuY29tXCIsXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRSddLFxuICAgIHNjaG9vbDogJ0tFRCcsXG4gICAgdXNlcm5hbWU6IFwiYWRtaW5cIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiRGF2aWRcIixcbiAgICBtYWlsOiBcImRhdmlkLmZhaGxhbmRlckB2ZW1lbmRvLnNlXCIsXG4gICAgcm9sZXM6IFsnQURNSU4nLCdFTVBMT1lFRSddLFxuICAgIHNjaG9vbDogJ0tFRCcsXG4gICAgdXNlcm5hbWU6IFwiZGF2aWRcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXYxXCIsXG4gICAgbWFpbDogXCJ1Ync2NzU3QGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICBzY2hvb2w6ICdVcHBzYWxhJyxcbiAgICB1c2VybmFtZTogXCJ1Ync2NzU3QGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjJcIixcbiAgICBtYWlsOiBcInVtczQzMDJAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxuICAgIHVzZXJuYW1lOiBcInVtczQzMDJAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2M1wiLFxuICAgIG1haWw6IFwidWhoMzQ2MEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIixcbiAgICByb2xlczogWydTVFVERU5UJ10sXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXG4gICAgdXNlcm5hbWU6IFwidWhoMzQ2MEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY0KGZlbCBnb2FscyBpc3N1ZSlcIixcbiAgICBtYWlsOiBcInVtdDY4MjZAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgcm9sZXM6IFtcIlNUVURFTlRcIl0sXG4gICAgc2Nob29sOiBcIlVwcHNhbGFcIixcbiAgICB1c2VybmFtZTogXCJ1bXQ2ODI2QGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjUoZnV0dXJlIGFiaWxpdGllcylcIixcbiAgICBtYWlsOiBcInVqZzM4MzNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgcm9sZXM6IFtcIlNUVURFTlRcIl0sXG4gICAgc2Nob29sOiBcIlVwcHNhbGFcIixcbiAgICB1c2VybmFtZTogXCJ1amczODMzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjYoZnV0dXJlIGFiaWxpdGllcylcIixcbiAgICBtYWlsOiBcInVqdDEzNjNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgcm9sZXM6IFtcIlNUVURFTlRcIl0sXG4gICAgc2Nob29sOiBcIlVwcHNhbGFcIixcbiAgICB1c2VybmFtZTogXCJ1anQxMzYzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtTMOkcmFyZTFcIixcbiAgICBtYWlsOiBcInJpY2thcmQuYWxiZXJ0c3NvbkBrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIHJvbGVzOiBbJ0VNUExPWUVFJ10sXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXG4gICAgdXNlcm5hbWU6IFwicmlja2FyZC5hbGJlcnRzc29uQGt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIkVEU1Rlc3RVc2VyR3ltbmFzaXVtXCIsXG4gICAgbWFpbDogXCJ1aGgzMjAwQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxuICAgIC8vbWFpbDogXCJVSEgzMjAwQEVEVS5LVU5TS0FQU0dZTU5BU0lFVC5TRVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHVzZXJuYW1lOiBcIkVEU1Rlc3RVc2VyMVwiLFxuICAgIHNjaG9vbDogXCJLRURcIixcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJ2ZW1lbmRvLmVsZXZAa2Vkc2Nob29scy5jb21cIixcbiAgICBtYWlsOiBcInZlbWVuZG8uZWxldkBrZWRzY2hvb2xzLmNvbVwiLFxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxuICAgIHVzZXJuYW1lOiBcInZlbWVuZG8uZWxldkBrZWRzY2hvb2xzLmNvbVwiLFxuICAgIHNjaG9vbDogXCJLRURcIixcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJNZWRhcmJldGFyZSBOYWNrYVwiLFxuICAgIG1haWw6IFwibWVkYXJiZXRhcmUubmFja2FAa3Vuc2thcHNza29sYW4uc2VcIixcbiAgICByb2xlczogW1wiRU1QTE9ZRUVcIl0sXG4gICAgdXNlcm5hbWU6IFwibWVkYXJiZXRhcmUubmFja2EvS1NcIixcbiAgICBzY2hvb2w6IFwiTmFja2FcIixcbiAgICBzY2hvb2xUeXBlOiBcIkdydW5kc2tvbG9yXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIk1lZGFyYmV0YXJlIEdsb2JlblwiLFxuICAgIG1haWw6IFwibWVkYXJiZXRhcmUuZ2xvYmVuQGt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXG4gICAgcm9sZXM6IFtcIkVNUExPWUVFXCJdLFxuICAgIHVzZXJuYW1lOiBcIm1lZGFyYmV0YXJlLmdsb2Jlbi9LU1wiLFxuICAgIHNjaG9vbDogXCJHbG9iZW5cIixcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJFbGV2IEdsb2JlblwiLFxuICAgIG1haWw6IFwiZWxldi5nbG9iZW5AZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXG4gICAgc2Nob29sR3JhZGU6IDIsXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxuICAgIHVzZXJuYW1lOiBcImVsZXYuZ2xvYmVuXCIsXG4gICAgc2Nob29sOiBcIkdsb2JlblwiLFxuICAgIHNjaG9vbFR5cGU6IFwiR3ltbmFzaXVtXCJcbn0se1xuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgQm9yw6VzXCIsXG4gICAgbWFpbDogXCJlbGV2LmJvcmFzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiLFxuICAgIHNjaG9vbEdyYWRlOiA3LFxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcbiAgICB1c2VybmFtZTogXCJlbGV2LmJvcmFzXCIsXG4gICAgc2Nob29sOiBcIkJvcsOlc1wiLFxuICAgIHNjaG9vbFR5cGU6IFwiR3J1bmRza29sb3JcIlxufSx7XG4gICAgZGlzcGxheU5hbWU6IFwiRWxldiBCb3Jsw6RuZ2VcIixcbiAgICBtYWlsOiBcImVsZXYuYm9ybGFuZ2VAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXG4gICAgc2Nob29sR3JhZGU6IDksXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxuICAgIHVzZXJuYW1lOiAnZWxldi5ib3JsYW5nZS9LUycsXG4gICAgc2Nob29sOiAnQm9ybMOkbmdlJyxcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXG59LHtcbiAgICBkaXNwbGF5TmFtZTogXCJSb2xsLWzDtnNcIixcbiAgICBtYWlsOiBcIm5vbmVAa3Vuc2thcHNza29sYW4uc2VcIixcbiAgICB1c2VybmFtZTogXCJub25lXCIsXG4gICAgcm9sZXM6IFtdXG59XTtcblxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtMfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7ZGJ9IGZyb20gJy4uL2dsb2JhbHMvZGInO1xuaW1wb3J0IHsgS2VkQmFja2VuZFdyaXRlciB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XG5pbXBvcnQgeyBSZW1vdmVJdGVtIH0gZnJvbSAnLi4vY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9yZW1vdmUtaXRlbSc7XG5cblxuaW50ZXJmYWNlIFByb3BzIHtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgZXJyb3JzOiBFcnJvclN0cnVjdFtdO1xuICBpbmZvczogc3RyaW5nW107XG4gIC8vZGJXcml0ZXJSZXRyeWFibGVFcnJvcj86IEVycm9yO1xuICBkYldyaXRlcklzU2F2aW5nPzogYm9vbGVhbjtcbiAgZGJXcml0ZXJJc0VkaXRlZD86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBFcnJvclN0cnVjdCB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgcmV0cnlhYmxlPzogYm9vbGVhbjtcbiAgZGV0YWlscz86IEVycm9yO1xuICBzaG93RGV0YWlscz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBFcnJvclN1Y2Nlc3NGZWVkYmFjayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGU9e1xuICAgICAgZXJyb3JzOiBbXSxcbiAgICAgIGluZm9zOiBbXVxuICAgIH07XG4gICAgdGhpcy5fdW5oYW5kbGVkUmVqZWN0aW9uID0gdGhpcy5fdW5oYW5kbGVkUmVqZWN0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fZXJyb3IgPSB0aGlzLl9lcnJvci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2N1c3RvbUVycm9yID0gdGhpcy5fY3VzdG9tRXJyb3IuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkluZm8gPSB0aGlzLl9vbkluZm8uYmluZCh0aGlzKTtcbiAgICB0aGlzLl9kYldyaXRlckVycm9yID0gdGhpcy5fZGJXcml0ZXJFcnJvci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2RiV3JpdGVyU3RhdGVDaGFuZ2VkID0gdGhpcy5fZGJXcml0ZXJTdGF0ZUNoYW5nZWQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgX2FkZEVycm9yKG1lc3NhZ2U6IHN0cmluZywgZGV0YWlscz86IEVycm9yLCByZXRyeWFibGU/OiBib29sZWFuKSB7XG4gICAgLy9jb25zb2xlLmVycm9yKG1lc3NhZ2UsIHtyZXRyeWFibGU6ICEhcmV0cnlhYmxlLCBkZXRhaWxzfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSgoe2Vycm9yc30pID0+IHtcbiAgICAgIGlmIChlcnJvcnMuc29tZShlID0+IGUubWVzc2FnZSA9PT0gbWVzc2FnZSkpIHJldHVybiB7ZXJyb3JzfTtcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMikgZXJyb3JzID0gZXJyb3JzLnNsaWNlKDEpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3JzOiBlcnJvcnMuY29uY2F0KFt7bWVzc2FnZSwgZGV0YWlscywgcmV0cnlhYmxlfV0pXG4gICAgICB9O1xuICAgIH0pO1xuICAgIC8vIFJlbW92ZSBub24tcmV0cnlhYmxlIGVycm9ycyBhZnRlciAzMCBzZWNvbmRzOlxuICAgIGlmICghcmV0cnlhYmxlKSBzZXRUaW1lb3V0KCgpPT57XG4gICAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4gKHtcbiAgICAgICAgZXJyb3JzOiBlcnJvcnMuZmlsdGVyKGUgPT4gZS5tZXNzYWdlICE9PSBtZXNzYWdlKVxuICAgICAgfSkpO1xuICAgIH0sIDMwMDAwKTtcbiAgfVxuXG4gIHByaXZhdGUgX2FkZEluZm8obWVzc2FnZTogc3RyaW5nKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IFwiXCIpIHtcbiAgICAgIC8vIFR1cm4gb2ZmIGN1cnJlbnQgaW5mbyBtZXNzYWdlc1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7aW5mb3M6IFtdfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoKHtpbmZvc30pID0+IHtcbiAgICAgIGlmIChpbmZvcy5zb21lKGluZm8gPT4gaW5mbyA9PT0gbWVzc2FnZSkpIHJldHVybiB7aW5mb3N9O1xuICAgICAgaWYgKGluZm9zLmxlbmd0aCA+IDIpIGluZm9zID0gaW5mb3Muc2xpY2UoMSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbmZvczogaW5mb3MuY29uY2F0KG1lc3NhZ2UpXG4gICAgICB9O1xuICAgIH0pO1xuICAgIC8vIFJlbW92ZSBpbmZvIG1lc3NhZ2UgYWZ0ZXIgMTAgc2Vjb25kczpcbiAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICB0aGlzLnNldFN0YXRlKCh7aW5mb3N9KSA9PiAoe1xuICAgICAgICBpbmZvczogaW5mb3MuZmlsdGVyKG1zZyA9PiBtc2cgIT09IG1lc3NhZ2UpXG4gICAgICB9KSk7XG4gICAgfSwgMTAwMDApO1xuICB9XG5cbiAgcHJpdmF0ZSBfZGJXcml0ZXJFcnJvciAoZXJyb3I6IEVycm9yLCByZXRyeWFibGU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hZGRFcnJvcihgRGV0IGfDpXIgaW50ZSBhdHQgc3BhcmEgdGlsbCBzZXJ2ZXJuYCwgZXJyb3IsIHJldHJ5YWJsZSk7XG4gIH1cblxuICBwcml2YXRlIF9kYldyaXRlclN0YXRlQ2hhbmdlZCAoe2lzRWRpdGVkLCBpc1NhdmluZ306IEtlZEJhY2tlbmRXcml0ZXIpIHtcbiAgICBpZiAoIWlzRWRpdGVkKSB7XG4gICAgICAvLyBJZiBpc0VkaXRlZCBpcyBmYWxzZSwgYSBzdWNjZXNzZnVsIHdyaXRlIG11c3QgaGF2ZSBoYXBwZW5lZCwgYW5kXG4gICAgICAvLyB0aGVyZSBjYW5ub3QgYmUgYW55IHJldHJ5YWJsZSBlcnJvciBhbnltb3JlXG4gICAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4ge1xuICAgICAgICBlcnJvcnMgPSBlcnJvcnMuZmlsdGVyKGUgPT4gIWUucmV0cnlhYmxlKTtcbiAgICAgICAgcmV0dXJuIHtlcnJvcnN9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGJXcml0ZXJJc0VkaXRlZDogaXNFZGl0ZWQsXG4gICAgICBkYldyaXRlcklzU2F2aW5nOiBpc1NhdmluZ1xuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fZXJyb3IpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjdXN0b21lcnJvcicsIHRoaXMuX2N1c3RvbUVycm9yKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaW5mbycsIHRoaXMuX29uSW5mbyk7XG4gICAgZGIud3JpdGVyLm9uRXJyb3IodGhpcy5fZGJXcml0ZXJFcnJvcik7XG4gICAgZGIud3JpdGVyLm9uU3RhdGVDaGFuZ2UodGhpcy5fZGJXcml0ZXJTdGF0ZUNoYW5nZWQpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgdGhpcy5fZXJyb3IpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjdXN0b21lcnJvcicsIHRoaXMuX2N1c3RvbUVycm9yKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5mbycsIHRoaXMuX29uSW5mbyk7XG4gICAgZGIud3JpdGVyLm9mZih0aGlzLl9kYldyaXRlckVycm9yKTtcbiAgICBkYi53cml0ZXIub2ZmKHRoaXMuX2RiV3JpdGVyU3RhdGVDaGFuZ2VkKTtcbiAgfVxuXG4gIF91bmhhbmRsZWRSZWplY3Rpb24gKGV2OiBFdmVudCAmIHtyZWFzb246IEVycm9yfSkge1xuICAgIHRoaXMuX2FkZEVycm9yKGBFdHQgb2vDpG50IGZlbCBpbnRyw6RmZmFkZS4uLmAsIGV2LnJlYXNvbik7XG4gIH1cblxuICBfZXJyb3IgKGV2OiBFdmVudCAmIHtlcnJvcjogRXJyb3J9KSB7XG4gICAgdGhpcy5fYWRkRXJyb3IoZXYuZXJyb3IgPyBldi5lcnJvci5tZXNzYWdlIDogYEV0dCBva8OkbnQgZmVsIGludHLDpGZmYWRlLi4uYCwgZXYuZXJyb3IpO1xuICB9XG5cbiAgX2N1c3RvbUVycm9yIChldjogQ3VzdG9tRXZlbnQpIHtcbiAgICB0aGlzLl9hZGRFcnJvcihldi5kZXRhaWwpO1xuICB9XG5cbiAgX29uSW5mbyhldjogQ3VzdG9tRXZlbnQpIHtcbiAgICB0aGlzLl9hZGRJbmZvKGV2LmRldGFpbCk7XG4gIH0gXG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtlcnJvcnMsIGluZm9zLCBkYldyaXRlcklzU2F2aW5nfSA9IHRoaXMuc3RhdGU7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiZXJyb3Itc3VjY2Vzcy1mZWVkYmFja1wiIHN0eWxlPXt7XG4gICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRvcDogMCxcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgIH19PlxuICAgICAgPGRpdiBzdHlsZT17e2Rpc3BsYXk6ICd0YWJsZScsIG1hcmdpbjogXCIwIGF1dG9cIn19PlxuICAgICAgICB7ZXJyb3JzLmZpbHRlcihlID0+ICFlLnJldHJ5YWJsZSB8fCAhZGJXcml0ZXJJc1NhdmluZylcbiAgICAgICAgLm1hcCgoe21lc3NhZ2UsIGRldGFpbHMsIHJldHJ5YWJsZSwgc2hvd0RldGFpbHN9KSA9PiAoXG4gICAgICAgICAgPGRpdiBrZXk9e21lc3NhZ2V9IGNsYXNzTmFtZT1cImVycm9yXCI+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7ZmxvYXQ6J2xlZnQnfX0+e21lc3NhZ2V9PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7cG9pbnRlckV2ZW50czogJ2F1dG8nfX0+XG4gICAgICAgICAgICAgIDxSZW1vdmVJdGVtIG9uQ2xpY2s9eygpPT50aGlzLnJlbW92ZUVycm9yKG1lc3NhZ2UpfSAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7ZGV0YWlscyB8fCByZXRyeWFibGUgPyA8ZGl2IHN0eWxlPXt7cG9pbnRlckV2ZW50czogJ2F1dG8nfX0+XG4gICAgICAgICAgICAgIHtkZXRhaWxzID8gPD48YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKT0+dGhpcy50b2dnbGVEZXRhaWxzKG1lc3NhZ2UpfT57c2hvd0RldGFpbHMgPyBcIkTDtmxqIGRldGFpbGVyXCIgOiBcIlZpc2EgZGV0YWlsamVyXCJ9PC9hPiZuYnNwOzwvPiA6IHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAge3Nob3dEZXRhaWxzID8gPHA+eycnK2RldGFpbHN9PC9wPjogPD4mbmJzcDs8Lz59XG4gICAgICAgICAgICAgIHtyZXRyeWFibGUgPyA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKT0+dGhpcy5yZXRyeVNhdmUoKX0+RsO2cnPDtmsgc3BhcmEgbnU8L2E+IDogdW5kZWZpbmVkfVxuICAgICAgICAgICAgPC9kaXY+OiB1bmRlZmluZWR9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgICB7aW5mb3MubWFwKG1lc3NhZ2UgPT4gXG4gICAgICAgICAgPHAga2V5PXttZXNzYWdlfSBjbGFzc05hbWU9XCJpbmZvXCI+e21lc3NhZ2V9PC9wPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+O1xuICB9XG4gIHJlbW92ZUVycm9yKG1lc3NhZ2U6IHN0cmluZyk6IGFueSB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoe2Vycm9yc30pID0+ICh7XG4gICAgICBlcnJvcnM6IGVycm9ycy5maWx0ZXIoZSA9PiBlLm1lc3NhZ2UgIT09IG1lc3NhZ2UpXG4gICAgfSkpO1xuICB9XG5cbiAgcmV0cnlTYXZlKCkge1xuICAgIGRiLndyaXRlci5yZXRyeVNhdmUoKTtcbiAgfVxuXG4gIHRvZ2dsZURldGFpbHMobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zZXRTdGF0ZSgoe2Vycm9yc30pID0+ICh7ZXJyb3JzOiBlcnJvcnMubWFwKGVycm9yID0+IGVycm9yLm1lc3NhZ2UgPT09IG1lc3NhZ2UgP1xuICAgICAge1xuICAgICAgICAuLi5lcnJvcixcbiAgICAgICAgc2hvd0RldGFpbHM6ICFlcnJvci5zaG93RGV0YWlsc1xuICAgICAgfSA6XG4gICAgICBlcnJvcilcbiAgICB9KSk7XG4gIH1cbn1cbiIsIlxuXG5leHBvcnQgaW50ZXJmYWNlIFJlcG9Db21tdW5pY2F0b3I8VCBleHRlbmRzIHtpZDogc3RyaW5nfT4ge1xuICBxdWVyeSgpOiBQcm9taXNlPFRbXT47XG59XG5cbnR5cGUgU3Vic2NyaWJlcjxUPiA9IChpdGVtczpUW10sIGVycm9yOiB1bmRlZmluZWQgfCBFcnJvcikgPT4gYW55O1xuXG5leHBvcnQgY2xhc3MgUmVwbzxUIGV4dGVuZHMge2lkOiBzdHJpbmd9PiB7XG4gIGxpc3RQcm9taXNlOiBQcm9taXNlPHZvaWQ+O1xuICBpdGVtczogVFtdO1xuICBlcnJvcj86IEVycm9yO1xuICBzdWJzY3JpYmVyczogU3Vic2NyaWJlcjxUPltdO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb21tOiBSZXBvQ29tbXVuaWNhdG9yPFQ+KSB7XG4gICAgdGhpcy5saXN0UHJvbWlzZSA9IG51bGw7XG4gICAgdGhpcy5pdGVtcyA9IG51bGw7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IFtdO1xuICB9XG5cbiAgc3Vic2NyaWJlKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pIHtcbiAgICByZXR1cm4gdGhpcy5lbnN1cmVIYXNEYXRhKCkudGhlbigoKT0+e1xuICAgICAgc3Vic2NyaWJlcih0aGlzLml0ZW1zLCB0aGlzLmVycm9yKTtcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIHVuc3Vic2NyaWJlKHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gdGhpcy5zdWJzY3JpYmVycy5maWx0ZXIgKHMgPT4gcyAhPT0gc3Vic2NyaWJlcik7XG4gIH1cblxuICBub3RpZnlTdWJzY3JpYmVycygpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2gocyA9PiBzKHRoaXMuaXRlbXMsIHRoaXMuZXJyb3IpKTtcbiAgfVxuXG4gIGVuc3VyZUhhc0RhdGEoKSB7XG4gICAgaWYgKCF0aGlzLmxpc3RQcm9taXNlKSB0aGlzLnJlZnJlc2hGcm9tU2VydmVyKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdFByb21pc2U7XG4gIH1cblxuICByZWZyZXNoRnJvbVNlcnZlcigpIHtcbiAgICB0aGlzLmxpc3RQcm9taXNlID0gdGhpcy5jb21tLnF1ZXJ5KCkudGhlbihpdGVtcyA9PiB7XG4gICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcyB8fCBbXTtcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5saXN0UHJvbWlzZTtcbiAgfVxuICBcbiAgYXN5bmMgdXBkYXRlKGl0ZW06IFQgfCBUW10pIHtcbiAgICBhd2FpdCB0aGlzLmVuc3VyZUhhc0RhdGEoKTtcbiAgICBjb25zdCB1cGRhdGVkSXRlbXMgPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbSA6IFtpdGVtXTtcbiAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcy5tYXAoaXQgPT4ge1xuICAgICAgY29uc3QgdXBkYXRlZEl0ZW0gPSB1cGRhdGVkSXRlbXMuZmluZCgoe2lkfSkgPT4gaXQuaWQgPT09IGlkKTtcbiAgICAgIHJldHVybiB1cGRhdGVkSXRlbSA/XG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHVwZGF0ZWRJdGVtKSA6XG4gICAgICAgIGl0O1xuICAgIH0pO1xuICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgfVxuXG4gIGluc2VydChpdGVtOiBUIHwgVFtdKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlSGFzRGF0YSgpLnRoZW4oKCk9PntcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmNvbmNhdChpdGVtKTtcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZShpZDogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICBjb25zdCBpZHMgPSBBcnJheS5pc0FycmF5KGlkKSA/IGlkIDogW2lkXTtcbiAgICByZXR1cm4gdGhpcy5lbnN1cmVIYXNEYXRhKCkudGhlbigoKT0+e1xuICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMuZmlsdGVyKGl0ID0+ICFpZHMuc29tZShpZCA9PiBpdC5pZCA9PT0gaWQpKTtcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVXNlciB9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcbmltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcgfSBmcm9tICcuLi91dGlscy9xdWVyeS1zdHJpbmcnO1xuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuXG5leHBvcnQgY2xhc3MgRmVhdHVyZXMge1xuICAvL0VkaXRVc2VyVGFza3NWaWFQZW5Pbmx5PzogYm9vbGVhbjtcbiAgLy9TdWJUYXNrcz86IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIGNvbnN0IHVzZXIgPSBlbnYuY3VycmVudFVzZXIhO1xuICAgIGNvbnN0IHF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gsIHt0b0xvd2VyOiB0cnVlfSk7XG4gICAgY29uc3QgZmVhdHVyZXMgPSAoKHF1ZXJ5LmZlYXR1cmVzfHwnJykuc3BsaXQoJywnKSBhcyBzdHJpbmdbXSlcbiAgICAgIC5tYXAoZmVhdHVyZSA9PiBmZWF0dXJlLnRvTG93ZXJDYXNlKCkpOyAvLyBDYW4gYmUgdXNlZCBvbiBmb3J3YXJkcy4uLlxuXG4gICAgLyp0aGlzLkVkaXRVc2VyVGFza3NWaWFQZW5Pbmx5ID1cbiAgICAgIHVzZXIuc2Nob29sVHlwZSAhPT0gJ0dydW5kc2tvbG9yJyAmJiBxdWVyeS5zY2hvb2x0eXBlICE9PSBcIkdydW5kc2tvbG9yXCI7Ki9cbiAgICAvKnRoaXMuU3ViVGFza3MgPVxuICAgICAgdXNlci5zY2hvb2xUeXBlICE9PSAnR3J1bmRza29sb3InICYmIHF1ZXJ5LnNjaG9vbHR5cGUgIT09IFwiR3J1bmRza29sb3JcIjsqL1xuICAgIC8vdGhpcy5Bc3NpZ25tZW50VGFza3MgPSAhIXF1ZXJ5LnRlc3R2ZXJzaW9uO1xuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tICcuL2ZlYXR1cmVzJztcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7QWJpbGl0eSwgS25vd2xlZGdlUmVxdWlyZW1lbnR9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7UmVtb3ZlSXRlbX0gZnJvbSAnLi9yZW1vdmUtaXRlbSc7XG5pbXBvcnQgdXBkYXRlIGZyb20gJ3JlYWN0LWFkZG9ucy11cGRhdGUnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAga25vd2xlZGdlUmVxdWlyZW1lbnRzOiBLbm93bGVkZ2VSZXF1aXJlbWVudFtdO1xuICBpZHNUb01hcmtOb3RPaz86IHtbaWQ6IHN0cmluZ106IHRydWV9O1xuICBleHBsYWluZWRSZXF1aXJlbWVudHM/OiB7W3JlcXVpcmVtZW50SWQ6IHN0cmluZ106IHN0cmluZ31cbiAgLy8gUHJvcHMgdXNlZCBpbiBlZGl0IG1vZGUgKGVkaXRpbmcgY291cnNlIHRlbXBsYXRlcylcbiAgLy9jb3ZlcmVkSWRzPzogc3RyaW5nW107XG4gIC8vIFByb3BzIHVzZWQgaW4gbWFyayBtb2RlIChlZGl0aW5nIHRhc2tzKVxuICBtYXJrTW9kZT86IGJvb2xlYW47XG4gIG1hcmtlZElkcz86IHN0cmluZ1tdO1xuICBtaWdyYXRlZElkcz86IHtbaWQ6IHN0cmluZ106IGFueX07XG4gIG9uTWFya0NoYW5nZWQ6IChpZDogc3RyaW5nLCBpc01hcmtlZDogYm9vbGVhbikgPT4gdm9pZDtcbiAgb25FeHBsYWluZWRSZXF1aXJlbWVudHNDaGFuZ2VkPzogKHJlcUlkOiBzdHJpbmcsIHRleHQ6IHN0cmluZykgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGNsYXNzIEtub3dsZWRnZU1hdHJpeCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywge30+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsga25vd2xlZGdlUmVxdWlyZW1lbnRzLCBtYXJrZWRJZHMsIG1pZ3JhdGVkSWRzLCBleHBsYWluZWRSZXF1aXJlbWVudHMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpZHNUb01hcmtOb3RPaywgbWFya01vZGUsIG9uTWFya0NoYW5nZWQsIG9uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNvbHVtbnMgPSBbXCJFXCIsIFwiQ1wiLCBcIkFcIl07XG4gICAgY29uc3Qgcm93czogS25vd2xlZGdlUmVxdWlyZW1lbnRbXVtdID0gW107XG4gICAgY29uc3QgcmVxcyA9IGtub3dsZWRnZVJlcXVpcmVtZW50cy5zbGljZSgpO1xuICAgIGxldCByb3c6IEtub3dsZWRnZVJlcXVpcmVtZW50W10gfCBudWxsID0gbnVsbDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgcm93ID0gY29sdW1ucy5tYXAoZ3JhZGUgPT4ge1xuICAgICAgICBjb25zdCBwTmV4dCA9IHJlcXMuZmluZEluZGV4KHIgPT4gci5ncmFkZVN0ZXAgJiYgci5ncmFkZVN0ZXAudG9VcHBlckNhc2UoKSA9PT0gZ3JhZGUpO1xuICAgICAgICBpZiAocE5leHQgPCAwKSByZXR1cm4gbnVsbDtcbiAgICAgICAgY29uc3QgcnYgPSByZXFzW3BOZXh0XTtcbiAgICAgICAgcmVxcy5zcGxpY2UocE5leHQsIDEpO1xuICAgICAgICByZXR1cm4gcnY7XG4gICAgICB9KTtcbiAgICAgIGlmIChyb3cuZXZlcnkociA9PiByID09PSBudWxsKSlcbiAgICAgICAgYnJlYWs7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gPGRpdj5cbiAgICAgIDx0YWJsZT5cbiAgICAgICAgPHRoZWFkPlxuICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgIHtjb2x1bW5zLm1hcChjID0+IDx0aCBrZXk9e2N9PntjfTwvdGg+KX1cbiAgICAgICAgICA8L3RyPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHk+XG4gICAgICAgICAge3Jvd3MubWFwKChyb3csaSkgPT4gPFJlYWN0LkZyYWdtZW50IGtleT17aX0+XG4gICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgIHtyb3cubWFwKChyZXF1aXJlbWVudCxqKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNNYXJrZWRPSyA9IHJlcXVpcmVtZW50ICYmIG1hcmtlZElkcyAmJiBtYXJrZWRJZHMuaW5kZXhPZihyZXF1aXJlbWVudC5pZCkgPj0gMDtcbiAgICAgICAgICAgICAgICBjb25zdCBpc01hcmtlZE5vdE9LID0gcmVxdWlyZW1lbnQgJiYgaWRzVG9NYXJrTm90T2sgJiYgaWRzVG9NYXJrTm90T2tbcmVxdWlyZW1lbnQuaWRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWlncmF0ZWQgPSByZXF1aXJlbWVudCAmJiBtaWdyYXRlZElkcyAmJiAhIW1pZ3JhdGVkSWRzW3JlcXVpcmVtZW50LmlkXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gPHRkXG4gICAgICAgICAgICAgICAgICBrZXk9e2p9XG4gICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogcmVxdWlyZW1lbnQgPyByZXF1aXJlbWVudC5uYW1lIDogXCJcIn19XG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eyhtYXJrTW9kZSA/IFwic2VsZWN0YWJsZVwiIDogXCJcIikgK1xuICAgICAgICAgICAgICAgICAgKGlzTWlncmF0ZWQgPyBcIiBtaWdyYXRlZFwiIDogXCJcIikgK1xuICAgICAgICAgICAgICAgICAgKGlzTWFya2VkT0sgP1xuICAgICAgICAgICAgICAgICAgICBcIiBtYXJrZWRHcmVlblwiIDpcbiAgICAgICAgICAgICAgICAgICAgKGlzTWFya2VkTm90T0sgP1xuICAgICAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZFJlZFwiOlxuICAgICAgICAgICAgICAgICAgICAgIFwiXCIpKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17bWFya01vZGUgJiYgcmVxdWlyZW1lbnQgP1xuICAgICAgICAgICAgICAgICAgICAgICgpPT5vbk1hcmtDaGFuZ2VkKHJlcXVpcmVtZW50LmlkLCAhaXNNYXJrZWRPSykgOlxuICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH1cbiAgICAgICAgICAgICAgICAgICAgdGl0bGU9e2lzTWlncmF0ZWQgP1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmtNb2RlID9cbiAgICAgICAgICAgICAgICAgICAgICAgIGBTa29sdmVya2V0IGhhciB1cHBkYXRlcmF0IHRleHRlbnMgZm9ybXVsZXJpbmcuIER1IGthbiBncmFuc2thIMOkbmRyaW5nZW4gZ2Vub20gYXR0IGbDpGxsYSB1dCB2YXJuaW5nc2JveGVuIHRpbGwgaMO2Z2VyLCBtZWQgdGl0ZWwgXCJVcHBkYXRlcmFkZSBmb3JtdWxlcmluZ2FyIGZyw6VuIFNrb2x2ZXJrZXRcImAgOlxuICAgICAgICAgICAgICAgICAgICAgICAgYFNrb2x2ZXJrZXQgaGFyIHVwcGRhdGVyYXQgdGV4dGVucyBmb3JtdWxlcmluZywgbWVuIGRldHRhIGhhciDDpG5udSBpbnRlIGdyYW5za2F0cyBhdiB1cHBnaWZ0ZW5zIHJlZGlnZXJpbmdzYmVow7ZyaWdlYCA6XG4gICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkfSAvPlxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICB7ZXhwbGFpbmVkUmVxdWlyZW1lbnRzICYmIDx0cj5cbiAgICAgICAgICAgICAge3Jvdy5tYXAoKHJlcXVpcmVtZW50LGopID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpc01hcmtlZE9LID0gcmVxdWlyZW1lbnQgJiYgbWFya2VkSWRzICYmIG1hcmtlZElkcy5pbmRleE9mKHJlcXVpcmVtZW50LmlkKSA+PSAwO1xuICAgICAgICAgICAgICAgIHJldHVybiA8dGQga2V5PXtqfT5cbiAgICAgICAgICAgICAgICAgIHtpc01hcmtlZE9LID8gPHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtMYEJlc2tyaXYga3JhdmV0YH1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiaW5wdXRUZXh0Qm94IGlucHV0VGV4dExhcmdlXCIgc3R5bGU9e3t3aWR0aDogXCIxMDAlXCJ9fVxuICAgICAgICAgICAgICAgICAgICByZWFkT25seT17IW1hcmtNb2RlfVxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17ZXhwbGFpbmVkUmVxdWlyZW1lbnRzW3JlcXVpcmVtZW50LmlkXSB8fCBcIlwifVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17b25FeHBsYWluZWRSZXF1aXJlbWVudHNDaGFuZ2VkICYmIChcbiAgICAgICAgICAgICAgICAgICAgICBldiA9PiBvbkV4cGxhaW5lZFJlcXVpcmVtZW50c0NoYW5nZWQocmVxdWlyZW1lbnQuaWQsIGV2LnRhcmdldC52YWx1ZSkpfVxuICAgICAgICAgICAgICAgICAgLz4gOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgICAgICA8L3RkPn0pfVxuICAgICAgICAgICAgPC90cj59XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICl9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgIDwvZGl2PlxuXG4gICAgey8qcmV0dXJuIDxkaXY+XG4gICAgICA8dGFibGU+XG4gICAgICAgIDx0aGVhZD5cbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+RTwvdGg+XG4gICAgICAgICAgICA8dGg+QzwvdGg+XG4gICAgICAgICAgICA8dGg+QTwvdGg+XG4gICAgICAgICAgPC90cj5cbiAgICAgICAgPC90aGVhZD5cbiAgICAgICAgPHRib2R5PlxuICAgICAgICAgIHt0Ym9keS5tYXAoKHJvdywgaSkgPT4gXG4gICAgICAgICAgPHRyIGtleT17aX0+e3Jvdy5tYXAoKGNlbGwsIGopID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkT0sgPSBwcm9wcy5tYXJrZWRJZHMgJiYgcHJvcHMubWFya2VkSWRzLmluZGV4T2YoY2VsbC5pZCkgPj0gMDtcbiAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkTm90T0sgPSBwcm9wcy5pZHNUb01hcmtOb3RPayAmJiBwcm9wcy5pZHNUb01hcmtOb3RPa1tjZWxsLmlkXTtcbiAgICAgICAgICAgIHJldHVybiA8dGRcbiAgICAgICAgICAgICAga2V5PXtqfVxuICAgICAgICAgICAgICByb3dTcGFuPXtjZWxsLnJvd1NwYW59XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17KHByb3BzLm1hcmtNb2RlID8gXCJzZWxlY3RhYmxlXCIgOiBcIlwiKSArXG4gICAgICAgICAgICAgICAgKGlzTWFya2VkT0sgP1xuICAgICAgICAgICAgICAgICAgXCIgbWFya2VkR3JlZW5cIiA6XG4gICAgICAgICAgICAgICAgICAoaXNNYXJrZWROb3RPSyA/XG4gICAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZFJlZFwiOlxuICAgICAgICAgICAgICAgICAgICBcIlwiKSl9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLm1hcmtNb2RlICYmICgoKT0+cHJvcHMub25NYXJrQ2hhbmdlZChjZWxsLmlkLCAhaXNNYXJrZWRPSykpfT5cbiAgICAgICAgICAgICAge2NlbGwuaHRtbCAmJiA8ZGl2IHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZSd9fT5cbiAgICAgICAgICAgICAgICA8cFxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjZWxsLnR5cGUgPT09ICdhYmlsaXR5JyA/ICdhYmlsaXR5VGV4dCcgOiAnY3JpdGVyaWFUZXh0J31cbiAgICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBjZWxsLmh0bWx9fSAvPlxuICAgICAgICAgICAgICAgIHtwcm9wcy5lZGl0TW9kZSAmJiA8UmVtb3ZlSXRlbSBjbGFzc05hbWU9XCJ1cHBlclJpZ2h0XCIgb25DbGljaz17KCk9PlxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsSWRzKFxuICAgICAgICAgICAgICAgICAgICBjZWxsLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGNlbGwucm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2VsbElkcyhcbiAgICAgICAgICAgICAgICAgICAgICBjZWxsLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgY2VsbC5yb3dJbmRleCkuZmlsdGVyKGlkID0+IGlkICE9IGNlbGwuaWQpICl9IC8+IH1cbiAgICAgICAgICAgICAgPC9kaXY+fVxuICAgICAgICAgICAgPC90ZD59KX1cbiAgICAgICAgICA8L3RyPil9XG4gICAgICAgIDwvdGJvZHk+XG4gICAgICA8L3RhYmxlPlxuICAgIDwvZGl2PiovfVxuICB9XG59XG4iLCJpbXBvcnQgY2ZnIGZyb20gJy4uL2dsb2JhbHMvS0VELmNmZyc7XG5cbmRlY2xhcmUgdmFyIHByb2Nlc3M6IGFueTtcblxuY2ZnLkVOVklST05NRU5UID0gcHJvY2Vzcy5lbnYuRU5WSVJPTk1FTlQgYXMgXCJwcm9kdWN0aW9uXCIgfCBcImRldmVsb3BtZW50XCIgfCBcInRlc3RcIjtcbmNmZy5LRURfQVBJX1VSTCA9IHByb2Nlc3MuZW52LktFRF9BUElfVVJMOyAvLyBcImh0dHBzOi8va2VkYmFja2VuZHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL1wiXG5jZmcuRURTX0FQSV9VUkwgPSBwcm9jZXNzLmVudi5FRFNfQVBJX1VSTDsgLy8gXCJodHRwczovL2Vkc3BvcnRhbG93aW5hcGkuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL1wiXG5jZmcuS0VEX1RPS0VOX1VSTCA9IHByb2Nlc3MuZW52LktFRF9UT0tFTl9VUkw7IC8vIFwiaHR0cHM6Ly9rZWRhdXRodGVzdC5henVyZXdlYnNpdGVzLm5ldC90b2tlblwiXG5jZmcuS0VEX0NMSUVOVF9JRCA9IHByb2Nlc3MuZW52LktFRF9DTElFTlRfSUQ7IC8vIFwiZGV2Y2xpZW50XCIsIFwidGVzdGNsaWVudFwiLCBcIi4uLlwiXG5jZmcuS0VEX0NMSUVOVF9TRUNSRVQgPSBwcm9jZXNzLmVudi5LRURfQ0xJRU5UX1NFQ1JFVDtcbmNmZy5LRURfUkVBTE0gPSBwcm9jZXNzLmVudi5LRURfUkVBTE07IC8vIFwiU0UxXCJcbiIsImltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcsIGdlbmVyYXRlUXVlcnlTdHJpbmcsIHNwbGl0VXJsQW5kUXVlcnkgfSBmcm9tIFwiLi4vdXRpbHMvcXVlcnktc3RyaW5nXCI7XG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50V2ViLCBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlciwgaXNvbW9ycGhpYywgc3RvcmFnZSB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcbmltcG9ydCB7IEJlYXJlclByb3ZpZGVyLCBLZWRCZWFyZXJQcm92aWRlciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY29udHJhY3RzL2tlZC1tb2RlbHNcIjtcbmltcG9ydCB7IElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TIH0gZnJvbSBcIi4uL2FjY2Vzcy1jb250cm9sL2luZGV4XCI7XG5pbXBvcnQgeyBjaGVycnlQaWNrUHJvcHMgfSBmcm9tIFwiLi4vdXRpbHMvdXRpbHNcIjtcblxuZnVuY3Rpb24gZ2V0TWVyZ2VkVG9rZW5QYXRoKHRva2VuUGF0aDogc3RyaW5nLCBsb2NhdGlvblNlYXJjaDogc3RyaW5nLCBzY29wZXM6IHN0cmluZ1tdKSB7XG4gIC8vIE1lcmdlIGNvbmZpZ3VyZWQgcXVlcnkgcGFyYW1zIG9mIHRva2VuIHBhdGggd2l0aCBwYXJhbXMgZ2l2ZW4gdG8gY3VycmVudCBwYWdlXG4gIGNvbnN0IGN1cnJlbnRRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb25TZWFyY2gpO1xuICBjb25zdCBpbXBlcnNvbmF0aW9uUHJvcHMgPSBjaGVycnlQaWNrUHJvcHMoY3VycmVudFF1ZXJ5LCBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyk7XG4gIGNvbnN0IFt0b2tlblBhdGhXaXRob3V0UXVlcnksIHRva2VuUXVlcnlTdHJpbmddID0gc3BsaXRVcmxBbmRRdWVyeSh0b2tlblBhdGgpO1xuICBjb25zdCB0b2tlblBhdGhRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcodG9rZW5RdWVyeVN0cmluZyk7XG4gIHJldHVybiB0b2tlblBhdGhXaXRob3V0UXVlcnkgKyBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKHtcbiAgICAuLi50b2tlblBhdGhRdWVyeSxcbiAgICAuLi5pbXBlcnNvbmF0aW9uUHJvcHMsXG4gICAgc2NvcGVzOiBzY29wZXMuam9pbignLCcpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRUb2tlbklkKG1lcmdlZFRva2VuUGF0aDogc3RyaW5nLCB1c2VyRW1haWw6IHN0cmluZykge1xuICByZXR1cm4gbWVyZ2VkVG9rZW5QYXRoICsgXCIvXCIgKyB1c2VyRW1haWw7XG59XG5cbmZ1bmN0aW9uIHNhdmVVc2VySW5mbyh1c2VyOiBVc2VyLCB0b2tlbklkOiBzdHJpbmcpIHtcbiAgZW52LmN1cnJlbnRVc2VyID0gdXNlcjtcbiAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShcInVzZXJJbmZvXCIgKyB0b2tlbklkLCBKU09OLnN0cmluZ2lmeSh1c2VyKSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRVc2VySW5mbyh0b2tlbklkOiBzdHJpbmcpIHtcbiAgY29uc3Qgc3RvcmVkU2Vzc2lvblVzZXIgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwidXNlckluZm9cIiArIHRva2VuSWQpO1xuICBpZiAoc3RvcmVkU2Vzc2lvblVzZXIpIHtcbiAgICBlbnYuY3VycmVudFVzZXIgPSBKU09OLnBhcnNlKHN0b3JlZFNlc3Npb25Vc2VyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGg6IHN0cmluZywgdXNlckVtYWlsOiBzdHJpbmcpIHtcbiAgY29uc3QgdG9rZW5JZCA9IGdldFRva2VuSWQobWVyZ2VkVG9rZW5QYXRoLCB1c2VyRW1haWwpO1xuICByZXR1cm4gbmV3IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aCwgcmVzcG9uc2VUZXh0ID0+IHtcbiAgICBjb25zdCByZXMgPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCkgYXMgeyBvazogYm9vbGVhbiwgZXJyb3I/OiBzdHJpbmcsIHRva2VuPzogc3RyaW5nLCB1c2VyPzogVXNlciB9O1xuICAgIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzLmVycm9yKTtcbiAgICBpZiAocmVzLnVzZXIpIHtcbiAgICAgIHNhdmVVc2VySW5mbyhyZXMudXNlciwgdG9rZW5JZCk7XG4gICAgfVxuICAgIHJldHVybiB7IHRva2VuOiByZXMudG9rZW4sIGV4cGlyZXM6IERhdGUubm93KCkgKyA1OSAqIDYwICogMTAwMCB9O1xuICB9LCB0b2tlbklkKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR29vZ2xlVG9rZW5Qcm92aWRlcihtZXJnZWRUb2tlblBhdGg6IHN0cmluZywgdXNlckVtYWlsOiBzdHJpbmcpIHtcbiAgY29uc3QgdG9rZW5JZCA9IGdldFRva2VuSWQobWVyZ2VkVG9rZW5QYXRoLCB1c2VyRW1haWwpO1xuICByZXR1cm4gbmV3IFdlYlNlcnZlckJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aCwgcmVzcG9uc2VUZXh0ID0+IHtcbiAgICBjb25zdCByZXMgPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCkgYXMgeyBvazogYm9vbGVhbiwgZXJyb3I/OiBzdHJpbmcsIHRva2VuPzogc3RyaW5nLCB1c2VyPzogVXNlciB9O1xuICAgIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzLmVycm9yKTtcbiAgICByZXR1cm4geyB0b2tlbjogcmVzLnRva2VuLCBleHBpcmVzOiBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDEwMDAgfTtcbiAgfSwgdG9rZW5JZCk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRlc3RUb2tlblByb3ZpZGVyKHRva2VuVXJsOiBzdHJpbmcsIHVzZXI6IFVzZXIsIHNjb3Blczogc3RyaW5nW10pIHtcbiAgcmV0dXJuIG5ldyBLZWRCZWFyZXJQcm92aWRlcihcbiAgICBpc29tb3JwaGljLFxuICAgIHN0b3JhZ2UsXG4gICAgdG9rZW5VcmwgKyB1c2VyLm1haWwgKyBsb2NhdGlvbi5zZWFyY2gsXG4gICAgY2ZnLktFRF9DTElFTlRfSUQsXG4gICAgY2ZnLktFRF9DTElFTlRfU0VDUkVULFxuICAgIHRva2VuVXJsLCB7XG4gICAgICBlbWFpbDogdXNlci5tYWlsLnRvTG93ZXJDYXNlKCksXG4gICAgICByb2xlczogdXNlci5yb2xlcyxcbiAgICAgIHNjaG9vbDogdXNlci5zY2hvb2wsXG4gICAgICBzY2hvb2xUeXBlOiB1c2VyLnNjaG9vbFR5cGUsXG4gICAgICBzY29wZXNcbiAgICB9KTtcbn1cblxuLy8gZW52LmN1cnJlbnRVc2VyLm1haWwgaXMgc2V0IGJ5IFNpdGVWaXNpb24gc2VydmVyIGluaXRpYWxseS5cbi8vIEEgcmVzcG9uc2UgZnJvbSAvYXBpL3Rva2VuIG1heSBjaGFuZ2UgdGhlIG1haWwgYXR0cmlidXRlIG9mIHRoZSBjdXJyZW50XG4vLyB1c2VyLCBzbyBlbnYuY3VycmVudFVzZXIubWFpbCBtYXkgYmUgZGlmZmVyZW50IGFmdGVyIGdldHRpbmcgYSByZXNwb25zZS5cbi8vIEhvd2V2ZXIsIHRoZSBpbml0aWFsIHZhbHVlIGlzIHZhbHVhYmxlIGFsd2F5cyBpbiBvcmRlciB0byBkaXN0aW5ndWlzaCB0aGUgY2FzZVxuLy8gd2hlbiBvbmUgbm9ybWFsIHVzZXIgbG9ncyBvdXQgYW5kIGFub3RoZXIgdXNlciBsb2dzIGluLlxuY29uc3QgaW5pdGlhbFVzZXJFbWFpbCA9IGVudi5jdXJyZW50VXNlciAmJiBlbnYuY3VycmVudFVzZXIubWFpbDsgLy8gSW5pdGlhbCB2YWx1ZSBvZiBtYWlsLiBNYXkgY2hhbmdlLlxuaWYgKGluaXRpYWxVc2VyRW1haWwpIHtcbiAgLy8gS0VEXG4gIGlmIChjZmcuS0VEX1RPS0VOX1BBVEgpIHtcbiAgICAvL1xuICAgIC8vXG4gICAgLy8gUHJvZHVjdGlvbiAvIFNpdGVWaXNpb24gcHJveGllZCAvYXBpL3Rva2VuIHRvIHJlcXVlc3QgdG9rZW5zIGZyb206XG4gICAgLy9cbiAgICAvL1xuICAgIGNvbnN0IG1lcmdlZFRva2VuUGF0aCA9IGdldE1lcmdlZFRva2VuUGF0aChcbiAgICAgIGNmZy5LRURfVE9LRU5fUEFUSCxcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCwgW1xuICAgICAgICBcImtlZGJhY2tlbmRcIixcbiAgICAgICAgXCJFRFNcIixcbiAgICAgIF0pO1xuICAgIGVudi5iZWFyZXJQcm92aWRlciA9IGNyZWF0ZUJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aCwgaW5pdGlhbFVzZXJFbWFpbCk7XG4gICAgbG9hZFVzZXJJbmZvKGdldFRva2VuSWQobWVyZ2VkVG9rZW5QYXRoLCBpbml0aWFsVXNlckVtYWlsKSk7XG5cbiAgICAvLyBHb29nbGVcbiAgICBjb25zdCBnb29nbGVNZXJnZWRQYXRoID0gZ2V0TWVyZ2VkVG9rZW5QYXRoKFxuICAgICAgY2ZnLktFRF9UT0tFTl9QQVRILFxuICAgICAgbG9jYXRpb24uc2VhcmNoLCBbXG4gICAgICAgIFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9jYWxlbmRhci5yZWFkb25seVwiLFxuICAgICAgXSk7XG4gICAgZW52Lmdvb2dsZVRva2VuUHJvdmlkZXIgPSBjcmVhdGVHb29nbGVUb2tlblByb3ZpZGVyKGdvb2dsZU1lcmdlZFBhdGgsIGluaXRpYWxVc2VyRW1haWwpO1xuICB9IGVsc2UgaWYgKGNmZy5LRURfVE9LRU5fVVJMICYmIGNmZy5LRURfQ0xJRU5UX0lEICYmIGNmZy5LRURfQ0xJRU5UX1NFQ1JFVCkge1xuICAgIC8vXG4gICAgLy9cbiAgICAvLyBUZXN0IC0gZ28gZGlyZWN0bHkgdG8gS0VEQVVUSCBzZXJ2ZXIgdG8gcmV0cmlldmUgdG9rZW5zXG4gICAgLy9cbiAgICAvL1xuICAgIGVudi5iZWFyZXJQcm92aWRlciA9IGNyZWF0ZVRlc3RUb2tlblByb3ZpZGVyKGNmZy5LRURfVE9LRU5fVVJMLCBlbnYuY3VycmVudFVzZXIsIFtcbiAgICAgIFwia2VkYmFja2VuZFwiLFxuICAgICAgXCJFRFNcIixcbiAgICBdKTtcbiAgICBlbnYuZ29vZ2xlVG9rZW5Qcm92aWRlciA9IGNyZWF0ZVRlc3RUb2tlblByb3ZpZGVyKGNmZy5LRURfVE9LRU5fVVJMICsgXCIvZ29vZ2xlXCIsIGVudi5jdXJyZW50VXNlciwgW1xuICAgICAgXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2NhbGVuZGFyLnJlYWRvbmx5XCIsXG4gICAgXSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyIEtFRF9UT0tFTl9QQVRIYCk7XG4gIH1cbn1cbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcbmltcG9ydCB7IEtlZEJhY2tlbmRDbGllbnRXZWIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudHdlYic7XG5cbmVudi5rZWRCYWNrZW5kQ2xpZW50ID0gbmV3IEtlZEJhY2tlbmRDbGllbnRXZWIgKFxuICBjZmcuS0VEX0FQSV9VUkwsXG4gIGVudi5iZWFyZXJQcm92aWRlcik7XG5cbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcbmltcG9ydCB7IGlzb21vcnBoaWMgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudHdlYic7XG5pbXBvcnQgeyBFZHNDbGllbnQgfSBmcm9tICcuLi9hcGlzL2Vkc2NsaWVudCc7XG5cbmVudi5lZHNDbGllbnQgPSBuZXcgRWRzQ2xpZW50IChcbiAgaXNvbW9ycGhpYyxcbiAgY2ZnLkVEU19BUElfVVJMLFxuICBlbnYuYmVhcmVyUHJvdmlkZXIsXG4gICgpPT5lbnYuY3VycmVudFVzZXIubWFpbCk7XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFNjaG9vbCwgQnJhbmNoLCBDb3Vyc2UgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcbmltcG9ydCB7IENvdXJzZUJhbm5lciB9IGZyb20gXCIuLi9jb3Vyc2VzL2NvdXJzZS1iYW5uZXJcIjtcbmltcG9ydCB7IHNob3dFcnJvciwgTCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCwgRG9jdW1lbnRBY2Nlc3MsIEJhdGNoUnVubmVyIH0gZnJvbSBcImtlZGJhY2tlbmQvY2xpZW50XCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGlkPzogc3RyaW5nXG4gIHRpdGxlOiBzdHJpbmdcbiAgdHlwZT86ICdneW1uYXNpdW0nIHwgJ3ByaW1hcnknXG59XG5cbnR5cGUgU3RhdGUgPSBTY2hvb2w7XG5cbmV4cG9ydCBjb25zdCBFZGl0U2Nob29sID0gKHByb3BzOiBQcm9wcyAmIHtmZWVkYmFja1VybDogc3RyaW5nfSkgPT4gPGRpdiBzdHlsZT17eyBvdXRsaW5lOiAwIH19PlxuICA8Q291cnNlQmFubmVyXG4gICAgdGl0bGU9XCJTa29sb3JcIiBhY3RpdmVQYWdlPVwic2Nob29sc1wiIGNhbGxiYWNrcz17e3NjaG9vbHM6ICgpPT5sb2NhdGlvbi5oYXNoPVwiIy9zY2hvb2xzXCJ9fVxuICAgIHJvdXRlcz17e2ZlZWRiYWNrOiBwcm9wcy5mZWVkYmFja1VybH19IC8+XG4gIDxFZGl0U2Nob29sTm9CYW5uZXIgey4uLnByb3BzfSAvPlxuPC9kaXY+O1xuXG5leHBvcnQgY2xhc3MgRWRpdFNjaG9vbE5vQmFubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIG9yaWdTY2hvb2w6IFNjaG9vbDtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmxvYWQoKS5jYXRjaChlcnIgPT4gc2hvd0Vycm9yKGVycikpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5pZCkge1xuICAgICAgLy8gSUQgZ2l2ZW4sIGxvYWQgaXQuXG4gICAgICBjb25zdCB7IGlkIH0gPSB0aGlzLnByb3BzO1xuICAgICAgY29uc3Qgc2Nob29sID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuZ2V0PFNjaG9vbD4oXCJzY2hvb2xzXCIsIGlkKTtcbiAgICAgIHRoaXMub3JpZ1NjaG9vbCA9IHsgLi4uc2Nob29sIH07XG4gICAgICB0aGlzLnNldFN0YXRlKHsgLi4uc2Nob29sIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBObyBpZCwgY3JlYXRlIG5ldyBpbnN0ZWFkLlxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXG4gICAgICAgIG9mZmljaWFsQnJhbmNoSWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgaXNHeW1uYXNpdW06IHRoaXMucHJvcHMudHlwZSA9PT0gJ2d5bW5hc2l1bScsXG4gICAgICAgIGlzUHJpbWFyeVNjaG9vbDogdGhpcy5wcm9wcy50eXBlID09PSAncHJpbWFyeSdcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHNhdmUoKSB7XG4gICAgY29uc3QgciA9IG5ldyBCYXRjaFJ1bm5lcigpO1xuICAgIGxldCBzY2hvb2wgPSB7IC4uLnRoaXMuc3RhdGUsIHRhZ3M6ICh0aGlzLnN0YXRlLnRhZ3MgfHwgW10pXG4gICAgICAuZmlsdGVyKHRhZyA9PiBbXCJwcmltYXJ5XCIsIFwiZ3ltbmFzaXVtXCJdLmluZGV4T2YodGFnKSA8IDApXG4gICAgfTtcblxuICAgIGlmIChzY2hvb2wuaXNQcmltYXJ5U2Nob29sKSBzY2hvb2wudGFncy5wdXNoKFwicHJpbWFyeVwiKTtcbiAgICBpZiAoc2Nob29sLmlzR3ltbmFzaXVtKSBzY2hvb2wudGFncy5wdXNoKFwiZ3ltbmFzaXVtXCIpO1xuICAgIGlmICghKHNjaG9vbC5pc0d5bW5hc2l1bSB8fCBzY2hvb2wuaXNQcmltYXJ5U2Nob29sKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yIChMYFNrb2xhbiBtw6VzdGUgYW50aW5nZW4gdmFyYSBneW1uYXNpdW0gZWxsZXIgZ3J1bmRza29sYWApO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcmlnU2Nob29sKSB7XG4gICAgICBzY2hvb2wuYWNsID0gW1wicm9sZTpVU0VSOlJcIl07XG4gICAgICBzY2hvb2wuYWNsLnB1c2goXG4gICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcbiAgICAgICAgICBcInNjaG9vbFJvbGVcIixcbiAgICAgICAgICBgJHtzY2hvb2wubmFtZX0vRU1QTE9ZRUVgLCBcIldcIikudG9TdHJpbmcoKSk7XG4gICAgICByLmFkZChcInNjaG9vbHNcIiwgc2Nob29sKTtcbiAgICAgIHRoaXMuYWRkU2Nob29sQnJhbmNoKHNjaG9vbCwgcik7XG4gICAgfSBlbHNlIGlmICh0aGlzLm9yaWdTY2hvb2wubmFtZSAhPT0gdGhpcy5zdGF0ZS5uYW1lKSB7XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlNrb2xhbnMgbmFtbiBmw6VyIGludGUgw6RuZHJhcy4gS29udGFrdGEgVmVtZW5kbyBBQi5cIilcblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXNjaG9vbC5vZmZpY2lhbEJyYW5jaElkKSB7XG4gICAgICAgIHNjaG9vbC5vZmZpY2lhbEJyYW5jaElkID0gY3JlYXRlVVVJRCgpO1xuICAgICAgICB0aGlzLmFkZFNjaG9vbEJyYW5jaChzY2hvb2wsIHIpO1xuICAgICAgfVxuICAgICAgci5wdXQoXCJzY2hvb2xzXCIsIHNjaG9vbCk7XG4gICAgfVxuXG4gICAgYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuYmF0Y2goci5tdXRhdGlvblJlcXVlc3RzKTtcblxuICAgIGxvY2F0aW9uLmhhc2ggPSBcIiMvc2Nob29sc1wiO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRTY2hvb2xCcmFuY2goc2Nob29sOiB7IHRhZ3M6IHN0cmluZ1tdOyBuYW1lOiBzdHJpbmc7IGlzUHJpbWFyeVNjaG9vbD86IGJvb2xlYW47IGlzR3ltbmFzaXVtPzogYm9vbGVhbjsgb2ZmaWNpYWxCcmFuY2hJZDogc3RyaW5nOyBjb3Vyc2VzPzogQ291cnNlW107IGFjdGl2ZUNvdXJzZXM/OiBDb3Vyc2VbXTsgaWQ6IHN0cmluZzsgYWNsPzogc3RyaW5nW107IGRhdGVUaW1lPzogbnVtYmVyOyB0cmVlUGFyZW50SWQ/OiBzdHJpbmc7ICRldGFnPzogc3RyaW5nOyAkbWV0YT86IFwiYWRkXCIgfCBcInJlZlwiIHwgXCJ1cGRhdGVcIiB8IFwiYWRkaW5nXCIgfCBcInVwZGF0aW5nXCIgfCBcImRlbGV0aW5nXCIgfCBcImRlbGV0ZWRcIjsgfSwgcjogQmF0Y2hSdW5uZXIpIHtcbiAgICBjb25zdCBicmFuY2g6IEJyYW5jaCA9IHtcbiAgICAgIGlkOiBzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZCxcbiAgICAgIG5hbWU6IHNjaG9vbC5uYW1lLFxuICAgICAgc2Nob29sSWQ6IHNjaG9vbC5pZCxcbiAgICAgIGFjbDogW1xuICAgICAgICBcInJvbGU6VVNFUjpSXCIsXG4gICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcInNjaG9vbFJvbGVcIiwgYCR7c2Nob29sLm5hbWV9L0VNUExPWUVFYCwgXCJXXCIpLnRvU3RyaW5nKClcbiAgICAgIF1cbiAgICB9O1xuICAgIHIuYWRkKFwiYnJhbmNoZXNcIiwgYnJhbmNoKTtcbiAgfVxuXG4gIGFzeW5jIGRlbGV0ZVNjaG9vbCgpIHtcbiAgICBpZiAocHJvbXB0KExgw4RyIGR1IHPDpGtlciBww6UgYXR0IHRhIGJvcnQgc2tvbGFuIFwiJHt0aGlzLnN0YXRlLm5hbWV9XCI/IFNrcml2IHNrb2xhbnMgZXhha3RhIG5hbW4gZsO2ciBhdHQgYmVrcsOkZnRhYCkgPT09IHRoaXMuc3RhdGUubmFtZSApIHtcbiAgICAgIGNvbnN0IHNjaG9vbEJyYW5jaCA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8QnJhbmNoPihcImJyYW5jaGVzXCIsIHtcbiAgICAgICAgaWRzOiBbdGhpcy5zdGF0ZS5vZmZpY2lhbEJyYW5jaElkXSxcbiAgICAgICAgaW5jbHVkZTogXCJhcHByb3ZlZENoaWxkcmVuXCIsXG4gICAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXVxuICAgICAgfSk7XG4gICAgICBjb25zdCBiciA9IG5ldyBCYXRjaFJ1bm5lcigpO1xuICAgICAgYnIuZGVsZXRlKFwic2Nob29sc1wiLCB0aGlzLnN0YXRlLmlkKTtcbiAgICAgIHNjaG9vbEJyYW5jaFswXS5hcHByb3ZlZENoaWxkcmVuLmZvckVhY2goKHtpZH0pID0+IHtcbiAgICAgICAgYnIuZGVsZXRlKFwiYnJhbmNoZXNcIiwgaWQpO1xuICAgICAgfSk7XG4gICAgICBici5kZWxldGUoXCJicmFuY2hlc1wiLCB0aGlzLnN0YXRlLm9mZmljaWFsQnJhbmNoSWQpO1xuICAgICAgYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuYmF0Y2goYnIubXV0YXRpb25SZXF1ZXN0cyk7XG4gICAgICBsb2NhdGlvbi5oYXNoPSBcIiMvc2Nob29sc1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbGVydChcIlNrb2xhbiB0b2dzIGludGUgYm9ydCBlZnRlcnNvbSBkZXQgbmFtbiBkdSBhbmdhdiBpbnRlIHN0w6RtbWVyLlwiKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0aXRsZSwgaWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZWRpdEV4aXN0aW5nID0gISFpZDtcbiAgICBjb25zdCBzY2hvb2wgPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IG9yaWdTY2hvb2wgPSB0aGlzLm9yaWdTY2hvb2w7XG4gICAgY29uc3QgaXNBZG1pbiA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gXCJBRE1JTlwiKTtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0XCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2Vjb250ZW50IHN2LWxheW91dCBzdi1zcGFjZXItMjBweHZ0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICAgIDxoMj57dGl0bGV9PC9oMj5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+TmFtbjo8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgYXV0b0ZvY3VzPXshc2Nob29sIHx8ICFzY2hvb2wubmFtZX1cbiAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFpc0FkbWluIHx8IGVkaXRFeGlzdGluZ31cbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICAgIHNpemU9ezUwfVxuICAgICAgICAgICAgICB2YWx1ZT17c2Nob29sID8gc2Nob29sLm5hbWUgOiBcIlwifVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7IG5hbWU6IGV2LnRhcmdldC52YWx1ZSB9KX0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBzcGFjZWRcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+VmlzbmluZ3NuYW1uOjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBhdXRvRm9jdXM9e3NjaG9vbCAmJiAhc2Nob29sLmRpc3BsYXlOYW1lfVxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWlzQWRtaW59XG4gICAgICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgICAgICBzaXplPXs1MH1cbiAgICAgICAgICAgICAgdmFsdWU9e3NjaG9vbCA/IHNjaG9vbC5kaXNwbGF5TmFtZSA6IFwiXCJ9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHsgZGlzcGxheU5hbWU6IGV2LnRhcmdldC52YWx1ZSB9KX0gLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBzcGFjZWRcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+VHlwOjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgbmFtZT1cInNjaG9vbFR5cGVQcmltYXJ5XCJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFpc0FkbWlufVxuICAgICAgICAgICAgICBjaGVja2VkPXtzY2hvb2wgJiYgc2Nob29sLmlzUHJpbWFyeVNjaG9vbH1cbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICAgIHZhbHVlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHsgaXNQcmltYXJ5U2Nob29sOiBldi50YXJnZXQuY2hlY2tlZCB9KX0gLz5cbiAgICAgICAgICAgICZuYnNwO0dydW5kc2tvbGFcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBzcGFjZWRcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICBuYW1lPVwic2Nob29sVHlwZUd5bW5hc2l1bVwiXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshaXNBZG1pbn1cbiAgICAgICAgICAgICAgY2hlY2tlZD17c2Nob29sICYmIHNjaG9vbC5pc0d5bW5hc2l1bX1cbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICAgIHZhbHVlPVwiZ3ltbmFzaXVtXCJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMuc2V0U3RhdGUoeyBpc0d5bW5hc2l1bTogZXYudGFyZ2V0LmNoZWNrZWQgfSl9IC8+XG4gICAgICAgICAgICAmbmJzcDtHeW1uYXNpdW1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBzcGFjZWRcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxici8+XG4gICAgICAgIHtpc0FkbWluICYmIGVkaXRFeGlzdGluZyAmJiA8ZGl2IHRhYkluZGV4PXsyfSBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgIHRoaXMuZGVsZXRlU2Nob29sKCkuY2F0Y2goc2hvd0Vycm9yKX0+XG4gICAgICAgICAgVGEgYm9ydCBza29sYVxuICAgICAgICA8L2Rpdj59XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHVsbC1yaWdodFwiPiZuYnNwOzwvZGl2PlxuICAgICAgICA8TGluayBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiB0bz1cIi9zY2hvb2xzXCI+XG4gICAgICAgICAgQXZicnl0XG4gICAgICAgIDwvTGluaz5cbiAgICAgICAgXG4gICAgICAgIHtpc0FkbWluICYmIDxhIHRhYkluZGV4PXsxfSBjbGFzc05hbWU9e1wiYnRuIGJ0bi1sYXJnZVwifSBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgaWYgKG9yaWdTY2hvb2wgJiYgb3JpZ1NjaG9vbC5uYW1lICE9PSBzY2hvb2wubmFtZSkge1xuICAgICAgICAgICAgaWYgKCFjb25maXJtKExgw4RyIGR1IHPDpGtlciBww6UgYXR0IGR1IHZpbGwgZMO2cGEgb20gc2tvbGFuPyBEZXR0YSBww6V2ZXJrYXIgcG9ydGFsZW5zIGZ1bmt0aW9uIGbDtnIgbMOkcmFyZSBvY2ggZWxldmVyIHNvbSB0aWxsaMO2ciBza29sYW4uIE5hbW5ldCBtw6VzdGUgc3TDpG1tYSBleGFrdCDDtnZlcmVucyBtZWQgbmFtbmdpdm5pbmdlbiBhdiBza29sYW4gcMOlIGFudsOkbmRhcm9iamVrdGVuLlxuXG5EZXQgc29tIGjDpG5kZXIgYW5uYXJzIMOkciBhdHQgZWxldmVyIG9jaCBsw6RyYXJlIHDDpSBza29sYW4gaW50ZSBsw6RuZ3JlIGhpdHRhciBuw6VncmEga3Vyc2VyLlxuXG5CbGlyIGRldCBmZWwga2FuIGR1IGRvY2sgYWxsdGlkIGJhcmEgZMO2cGEgdGlsbGJha2Egc2tvbGFucyBuYW1uLmApKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5zYXZlKCkuY2F0Y2goc2hvd0Vycm9yKTtcbiAgICAgICAgfX0+U3BhcmE8L2E+fVxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+O1xuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIExpbmssIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBDb3Vyc2VCYW5uZXIgfSBmcm9tIFwiLi4vY291cnNlcy9jb3Vyc2UtYmFubmVyXCI7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcbmltcG9ydCB7IFNob3dTdWJqZWN0SW5uZXIgfSBmcm9tICcuL3Nob3ctc3ViamVjdC1pbm5lcic7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGlkOiBzdHJpbmdcbiAgZmVlZGJhY2tVcmw6IHN0cmluZ1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBzdWJqZWN0OiBTdWJqZWN0XG59XG5cbmV4cG9ydCBjbGFzcyBTaG93U3ViamVjdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtzdWJqZWN0OiBudWxsfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmxvYWQoKTtcbiAgfVxuXG4gIGFzeW5jIGxvYWQoKSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmdldDxTdWJqZWN0Pignc3ViamVjdHMnLCB0aGlzLnByb3BzLmlkLCB7IGluY2x1ZGU6ICdjb3Vyc2VUZW1wbGF0ZXMnIH0pO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzdWJqZWN0IH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICghdGhpcy5zdGF0ZS5zdWJqZWN0KSByZXR1cm4gPHA+PFNwaW5uZXIgLz48L3A+O1xuICAgIGNvbnN0IHsgbmFtZSwgY29kZSwgY291cnNlVGVtcGxhdGVzLCBzY2hvb2xUeXBlIH0gPSB0aGlzLnN0YXRlLnN1YmplY3Q7XG4gICAgcmV0dXJuIDxkaXY+PENvdXJzZUJhbm5lclxuICAgICAgdGl0bGU9e25hbWV9XG4gICAgICBhY3RpdmVQYWdlPVwic3ViamVjdHNcIlxuICAgICAgcm91dGVzPXt7ZmVlZGJhY2s6IHRoaXMucHJvcHMuZmVlZGJhY2tVcmx9fVxuICAgICAgIC8+XG4gICAgICAgPFNob3dTdWJqZWN0SW5uZXIgaWQ9e3RoaXMucHJvcHMuaWR9IC8+XG4gICAgPC9kaXY+O1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IENvdXJzZUJhbm5lciB9IGZyb20gXCIuLi9jb3Vyc2VzL2NvdXJzZS1iYW5uZXJcIjtcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBpZDogc3RyaW5nXG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHN1YmplY3Q6IFN1YmplY3Rcbn1cblxuZXhwb3J0IGNsYXNzIFNob3dTdWJqZWN0SW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7c3ViamVjdDogbnVsbH07XG4gIH1cblxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgdGhpcy5sb2FkKCk7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIGNvbnN0IHN1YmplY3QgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5nZXQ8U3ViamVjdD4oJ3N1YmplY3RzJywgdGhpcy5wcm9wcy5pZCwgeyBpbmNsdWRlOiAnY291cnNlVGVtcGxhdGVzJyB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHsgc3ViamVjdCB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuc3ViamVjdCkgcmV0dXJuIDxwPjxTcGlubmVyIC8+PC9wPjtcbiAgICBjb25zdCB7IG5hbWUsIGNvZGUsIGNvdXJzZVRlbXBsYXRlcywgc2Nob29sVHlwZSB9ID0gdGhpcy5zdGF0ZS5zdWJqZWN0O1xuICAgIHJldHVybiA8ZGl2PlxuICAgICAge3NjaG9vbFR5cGUgPT09ICdwcmltYXJ5JyA/IDw+XG4gICAgICAgIDxoMj5HcnVuZHNrb2xlw6RtbmV0IHtuYW1lfSAoe2NvZGV9KTwvaDI+XG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJlbnRpdHktbGlzdFwiPlxuICAgICAgICAgIHtjb3Vyc2VUZW1wbGF0ZXMubWFwKCh7aWQsIGNvZGUsIHB1Ymxpc2hhYmxlLCBwb2ludHMsIHNjaG9vbEdyYWRlfSkgPT5cbiAgICAgICAgICA8bGkga2V5PXtpZH0gY2xhc3NOYW1lPVwiY29tcGxldGVcIj5cbiAgICAgICAgICAgIHtuYW1lfSBmw7ZyIMOlcnNrdXJzIHtzY2hvb2xHcmFkZX1cbiAgICAgICAgICA8L2xpPil9XG4gICAgICAgIDwvdWw+XG4gICAgICA8Lz4gIDogPD5cbiAgICAgICAgPGgyPkt1cnNlciBmw7ZyIMOkbW5ldCB7bmFtZX0gKHtjb2RlfSk8L2gyPlxuICAgICAgICA8dWwgY2xhc3NOYW1lPVwiZW50aXR5LWxpc3RcIj5cbiAgICAgICAgICB7Y291cnNlVGVtcGxhdGVzLm1hcCgoe2lkLCBuYW1lLCBjb2RlLCBwdWJsaXNoYWJsZSwgcG9pbnRzfSkgPT5cbiAgICAgICAgICA8bGkga2V5PXtpZH0gY2xhc3NOYW1lPVwiY29tcGxldGVcIj5cbiAgICAgICAgICAgIHtuYW1lfSAtIHtwb2ludHN9cFxuICAgICAgICAgIDwvbGk+KX1cbiAgICAgICAgPC91bD5cbiAgICAgIDwvPn1cbiAgICA8L2Rpdj47XG4gIH1cbn1cbiIsImltcG9ydCB7VEN9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgVGVybSA9ICdBVCcgfCAnU1QnO1xuZXhwb3J0IHR5cGUgQWNhZGVtaWNZZWFyID0gc3RyaW5nOyAvLyBcIjIwMTYvMjAxN1wiLCBcIjIwMTcvMjAxOFwiLCAuLi5cbmV4cG9ydCB0eXBlIFNjaG9vbEdyYWRlID0gbnVtYmVyOyAvLyAwLTkgKGdydW5kc2tvbGEpLCAxMC0xMyAoZ3ltbmFzaXVtKVxuZXhwb3J0IHR5cGUgR3JhZGUgPSAnQScgfCAnQicgfCAnQycgfCAnRCcgfCAnRSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlciB7XG4gICAgdXNlcm5hbWU/OiBzdHJpbmc7XG4gICAgbWFpbDogc3RyaW5nO1xuICAgIGRpc3BsYXlOYW1lOiBzdHJpbmc7XG4gICAgcm9sZXM6IHN0cmluZ1tdO1xuICAgIHNjaG9vbEdyYWRlPzogbnVtYmVyO1xuICAgIHNjaG9vbD86IHN0cmluZztcbiAgICBzY2hvb2xUeXBlPzogc3RyaW5nO1xuICAgIHR1dG9yRm9yPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlYXJuaW5nTW9kdWxlVGFza3Mge1xuICAgIG1vZHVsZU5hbWU6IHN0cmluZztcbiAgICB1cmw/OiBzdHJpbmc7XG4gICAgc3ViamVjdDogU2Nob29sU3ViamVjdDtcbiAgICBjb21tb25UYXNrcz86IExlYXJuaW5nVGFza1tdO1xuICAgIGxlYXJuaW5nR29hbHM6IExlYXJuaW5nR29hbFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlYXJuaW5nR29hbCB7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHRhc2tzPzogTGVhcm5pbmdUYXNrW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tR29hbCB7XG4gIG5hbWU6IHN0cmluZyxcbiAgdXJsOiBzdHJpbmcsXG4gIGNvdXJzZTogc3RyaW5nLFxuICBkZXNjcmlwdGlvbjogc3RyaW5nXG59XG5cblxuLypleHBvcnQgaW50ZXJmYWNlIExlYXJuaW5nR29hbCB7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGNvdXJzZUlkPzogc3RyaW5nO1xuICAgIHN1YmplY3RJZD86IHN0cmluZztcbn0qL1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdUYXNrIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdXJsPzogc3RyaW5nO1xuICAgIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICAgIGRvbmU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExlYXJuaW5nQ291cnNlIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgdXJsPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjaG9vbFN1YmplY3Qge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb3Vyc2U6IExlYXJuaW5nQ291cnNlO1xufVxuXG5leHBvcnQgY2xhc3MgQ291cnNlIHtcbiAgICAvL1NjaGVtYTogXCJbeWVhcit0ZXJtK3NjaG9vbFllYXIrbmFtZV0sc29ydG9yZGVyXCI7XG4gICAgaWQ/OiBzdHJpbmc7XG4gICAgLy9hWWVhcjogc3RyaW5nOyAvLyBBY2FkZW1pYyBZZWFyIC8gTMOkc8OlciAvIFwiMjAxNi8yMDE3XCIsIFwiMjAxNy8yMDE4XCIsIC4uLlxuICAgIC8vc2Nob29sR3JhZGU6IG51bWJlcjsgLy8gw4Vyc2t1cnMgKDAtOSBncnVuZHNrb2xhLCAxMC0xMyBneW1uYXNpdW0pLiAxMDAgPSBlaiBidW5kZXQgdGlsbCDDpXJza3Vycy5cbiAgICAvL3Rlcm0/OiBUZXJtOyAvLyBBVCAoQXV0dW1uIFRlcm0pIC8gU1QgKFNwcmluZyBUZXJtKVxuICAgIG5hbWU6IHN0cmluZztcbiAgICBwb2ludHM/OiBudW1iZXI7XG4gICAgbW9kdWxlcz86IENvdXJzZU1vZHVsZVtdO1xuICAgIGxlYXJuaW5nR29hbHM/OiBMZWFybmluZ0dvYWxbXTtcbiAgICB1cmw/OiBzdHJpbmc7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBDb3Vyc2VNb2R1bGUge1xuICAgIGlkPzogc3RyaW5nO1xuICAgIGNvdXJzZUlkOiBzdHJpbmc7XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IHVybDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhcmdldEdyYWRlIHtcbiAgICBpZD86IHN0cmluZztcbiAgICB1c2VyOiBzdHJpbmc7XG4gICAgY291cnNlSWQ/OiBzdHJpbmc7XG4gICAgc3ViamVjdElkPzogc3RyaW5nO1xuICAgIGFZZWFyPzogQWNhZGVtaWNZZWFyOyAvLyBMw6Rzw6VyLCB0ZXggXCIyMDE2LzIwMTdcIi4gbnVsbCBtZWFucyBmaW5hbCBnb2FsLlxuICAgIHRlcm0/OiBUZXJtOyAvLyBudWxsIG1lYW5zIGZpbmFsIGdvYWwuXG4gICAgZ3JhZGU6IEdyYWRlO1xufVxuXG5cbmV4cG9ydCBjb25zdCBmdXR1cmVBYmlsaXRpZXMgPSBbXG4gICAgXCJMw6RyYSBhdHQgbMOkcmFcIixcbiAgICBcIlNhbWFyYmV0YVwiLFxuICAgIFwiQWdlcmEgZ2xvYmFsdFwiLFxuICAgIFwiVmlzYSBoYW5kbGluZ3NrcmFmdFwiLFxuICAgIFwiVmFyYSBpbm5vdmF0aXZcIixcbiAgICBcIkxldmEgZGlnaXRhbHRcIl07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VycyB9IGZyb20gJy4uL2RhdGEvdXNlcnMnO1xuXG5leHBvcnQgZnVuY3Rpb24gQ2hvb3NlVXNlcigpIHtcbiAgbGV0IHNlbGVjdDtcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0XCI+XG4gICAgPGgyPlbDpGxqIGFudsOkbmRhcmU8L2gyPlxuICAgIDx0YWJsZSBjbGFzc05hbWU9XCJsb2dpbi10YWJsZVwiPjx0aGVhZD48dHI+XG4gICAgICA8dGg+TmFtbjwvdGg+XG4gICAgICA8dGg+Um9sbGVyPC90aD5cbiAgICAgIDx0aD5FLXBvc3Q8L3RoPlxuICAgICAgPHRoPlNrb2xhPC90aD5cbiAgICA8L3RyPjwvdGhlYWQ+XG4gICAgICA8dGJvZHk+XG4gICAgICAgIHt1c2Vycy5tYXAoKHsgdXNlcm5hbWUsIGRpc3BsYXlOYW1lLCBtYWlsLCBzY2hvb2wsIHJvbGVzIH0pID0+XG4gICAgICAgICAgPHRyIGtleT17bWFpbH0gb25DbGljaz17KCkgPT4gbG9jYXRpb24uc2VhcmNoID0gYD91c2VyPSR7dXNlcm5hbWV9YH0+XG4gICAgICAgICAgICA8dGQ+e2Rpc3BsYXlOYW1lfTwvdGQ+XG4gICAgICAgICAgICA8dGQgc3R5bGU9e3JvbGVzLmxlbmd0aCA9PT0gMCA/IHsgZm9udFN0eWxlOiAnaXRhbGljJyB9IDoge319Pntyb2xlcy5sZW5ndGggPT09IDAgPyBcInNha25hciByb2xsZXJcIiA6IHJvbGVzLmpvaW4oJywgJyl9PC90ZD5cbiAgICAgICAgICAgIDx0ZD57bWFpbH08L3RkPlxuICAgICAgICAgICAgPHRkIHN0eWxlPXtzY2hvb2wgPyB7fSA6IHsgZm9udFN0eWxlOiAnaXRhbGljJyB9fT57c2Nob29sIHx8IFwic2FrbmFyIHNrb2xhXCJ9PC90ZD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICApfVxuICAgICAgPC90Ym9keT48L3RhYmxlPlxuICA8L2Rpdj5cbn07XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBEaWFsb2dDb250YWluZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3RcIjtcbmltcG9ydCB7IEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBFZGl0U2Nob29sIH0gZnJvbSAnLi9lZGl0LXNjaG9vbCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBhY3RBcyB9IGZyb20gXCIuLi8uLi8uLi9hY2Nlc3MtY29udHJvbFwiO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zcGlubmVyXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNjaG9vbHM/OiBTY2hvb2xbXVxuICB2aWV3Q291cnNlVXJsOiBzdHJpbmdcbiAgdHlwZTogJ2d5bW5hc2l1bScgfCAncHJpbWFyeSdcbn1cblxuZXhwb3J0IGNvbnN0IEVkaXRhYmxlU2Nob29sTGlzdCA9IChwcm9wczogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBzY2hvb2xzLCB2aWV3Q291cnNlVXJsIH0gPSBwcm9wcztcbiAgY29uc3QgaXNBZG1pbiA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gXCJBRE1JTlwiKTtcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiZWRpdGFibGUtc2Nob29sLWxpc3RcIj5cbiAgICA8ZGl2PlxuICAgICAge3NjaG9vbHMgPyA8dGFibGU+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICB7c2Nob29scy5tYXAoc2Nob29sID0+XG4gICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17c2Nob29sLmlkfT5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgdG89e2Avc2Nob29scy8ke3NjaG9vbC5pZH0vZWRpdGB9PjwvTGluaz5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxwPntzY2hvb2wubmFtZX08L3A+XG4gICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgICAgICA8cD48YSBzdHlsZT17e2N1cnNvcjogJ3BvaW50ZXInfX0gb25DbGljaz17KCk9PmFjdEFzKHtyb2xlOiBcIkVNUExPWUVFXCIsIHNjaG9vbDogc2Nob29sLm5hbWV9KX0+QWdlcmEgc29tIGzDpHJhcmUgcMOlIGRlbm5hIHNrb2xhPC9hPjwvcD5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgIDxwPjxhIHN0eWxlPXt7Y3Vyc29yOiAncG9pbnRlcid9fSBvbkNsaWNrPXsoKT0+YWN0QXMoe3JvbGU6IFwiU1RVREVOVFwiLCBzY2hvb2w6IHNjaG9vbC5uYW1lLCB1cmw6IHZpZXdDb3Vyc2VVcmx9KX0+QWdlcmEgc29tIGVsZXYgcMOlIGRlbm5hIHNrb2xhPC9hPjwvcD5cbiAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgIDwvdHI+KX1cbiAgICAgICAgPC90Ym9keT5cbiAgICAgIDwvdGFibGU+IDogPHA+PFNwaW5uZXIgLz5WLmcuIHbDpG50YSBtZWRhbiBza29sb3IgbGFkZGFzPC9wPn1cbiAgICA8L2Rpdj5cbiAgICA8YnIgLz5cbiAgICB7c2Nob29scyAmJiBpc0FkbWluICYmIDxMaW5rIHRvPXtgL3NjaG9vbHMvbmV3LyR7cHJvcHMudHlwZX1gfSBjbGFzc05hbWU9XCJidG5cIj57XG4gICAgICAgIHByb3BzLnR5cGUgPT0gJ2d5bW5hc2l1bScgPyBMYEzDpGdnIHRpbGwgZ3ltbmFzaWVza29sYWAgOlxuICAgICAgICBwcm9wcy50eXBlID09ICdwcmltYXJ5JyA/IExgTMOkZ2cgdGlsbCBncnVuZHNrb2xhYCA6XG4gICAgICAgIExgTMOkZ2cgdGlsbCBza29sYWB9PC9MaW5rPn1cbiAgPC9kaXYgPlxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4uL2NvdXJzZXMvY291cnNlLWJhbm5lclwiO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgU2Nob29sIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgRWRpdGFibGVTY2hvb2xMaXN0IH0gZnJvbSAnLi9lZGl0YWJsZS1zY2hvb2wtbGlzdCc7XG5pbXBvcnQgeyBzaG93RXJyb3IsIGNvbXBhcmVQcm9wIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcbiAgZmVlZGJhY2tVcmw6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgc2Nob29sczogU2Nob29sW10gfCBudWxsXG59XG5cbmV4cG9ydCBjb25zdCBTY2hvb2xzID0gKHByb3BzOiBQcm9wcykgPT4gPGRpdiBzdHlsZT17eyBvdXRsaW5lOiAwIH19PlxuICA8Q291cnNlQmFubmVyIHRpdGxlPVwiU2tvbG9yXCIgYWN0aXZlUGFnZT1cInNjaG9vbHNcIiByb3V0ZXM9e3tmZWVkYmFjazogcHJvcHMuZmVlZGJhY2tVcmx9fSAvPlxuICA8U2Nob29sc1dpdGhvdXRCYW5uZXIgdmlld0NvdXJzZVVybD17cHJvcHMudmlld0NvdXJzZVVybH0gLz5cbjwvZGl2PlxuXG5leHBvcnQgY2xhc3MgU2Nob29sc1dpdGhvdXRCYW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UGljazxQcm9wcywgXCJ2aWV3Q291cnNlVXJsXCI+LFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc2Nob29sczogbnVsbFxuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubG9hZCgpLmNhdGNoKGVyciA9PiBzaG93RXJyb3IoZXJyLm1lc3NhZ2UgfHwgZXJyKSk7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIGNvbnN0IHNjaG9vbHMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFNjaG9vbD4oXCJzY2hvb2xzXCIpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzY2hvb2xzIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgc2Nob29scyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBzY2hvb2xzICYmIHNjaG9vbHMuc29ydChjb21wYXJlUHJvcChcIm5hbWVcIikpO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXRcIj5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAge3NjaG9vbHMgPyA8PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoMj5HeW1uYXNpZXNrb2xvcjwvaDI+XG4gICAgICAgICAgPEVkaXRhYmxlU2Nob29sTGlzdFxuICAgICAgICAgICAgc2Nob29scz17c2Nob29scy5maWx0ZXIoc2Nob29sID0+IHNjaG9vbC5pc0d5bW5hc2l1bSl9XG4gICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XG4gICAgICAgICAgICB0eXBlPVwiZ3ltbmFzaXVtXCIgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGgyPkdydW5kc2tvbG9yPC9oMj5cbiAgICAgICAgICA8RWRpdGFibGVTY2hvb2xMaXN0XG4gICAgICAgICAgICBzY2hvb2xzPXtzY2hvb2xzLmZpbHRlcihzY2hvb2wgPT4gc2Nob29sLmlzUHJpbWFyeVNjaG9vbCl9XG4gICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XG4gICAgICAgICAgICB0eXBlPVwicHJpbWFyeVwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+IDogPFNwaW5uZXIgLz59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtUYXNrLCBDb3Vyc2V9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHRhc2s6IFRhc2s7XG4gIGNvdXJzZTogQ291cnNlO1xuICB1cGRhdGVMaW5rOiAoaWQ6IHN0cmluZywgbGlua09yVW5saW5rOiBib29sZWFuKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgVGFza01pZ3JhdGlvbkJveCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3Rhc2ssIGNvdXJzZSwgdXBkYXRlTGlua30gPSB0aGlzLnByb3BzO1xuICAgIGlmICghdGFzay5taWdyYXRlZFRleHRzKSByZXR1cm4gPD4mbmJzcDs8Lz47XG4gICAgY29uc3Qge2FiaWxpdGllcywgY2VudHJhbENvbnRlbnQsIGtub3dsZWRnZVJlcXVpcmVtZW50c30gPSB0YXNrLm1pZ3JhdGVkVGV4dHM7XG4gICAgY29uc3Qga3JzID0gT2JqZWN0LmtleXMoa25vd2xlZGdlUmVxdWlyZW1lbnRzIHx8IHt9KS5tYXAoaWQgPT4gKHtcbiAgICAgIC4uLmNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZmluZCh0ID0+IHQuaWQgPT09IGlkKSxcbiAgICAgIC4uLmtub3dsZWRnZVJlcXVpcmVtZW50c1tpZF1cbiAgICB9KSkvLy5maWx0ZXIoKHtuYW1lfSkgPT4gISFuYW1lKTtcbiAgICBjb25zdCBrckEgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhdCBrdW5za2Fwc2tyYXYgZsO2ciBiZXR5Z2V0IEFcIiwgdHlwZTogXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgaXRlbXM6IGtycy5maWx0ZXIoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSAnQScpfTtcbiAgICBjb25zdCBrckMgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhdCBLdW5za2Fwc2tyYXYgZsO2ciBiZXR5Z2V0IENcIiwgdHlwZTogXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgaXRlbXM6IGtycy5maWx0ZXIoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSAnQycpfTtcbiAgICBjb25zdCBrckUgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhdCBrdW5za2Fwc2tyYXYgZsO2ciBiZXR5Z2V0IEVcIiwgdHlwZTogXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgaXRlbXM6IGtycy5maWx0ZXIoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSAnRScpfTtcbiAgICBjb25zdCBhYnMgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhZGUgZsO2cm3DpWdvclwiLCB0eXBlOiBcImFiaWxpdGllc1wiLCBpdGVtczogT2JqZWN0LmtleXMoYWJpbGl0aWVzIHx8IHt9KS5tYXAoaWQgPT4gKHtcbiAgICAgIC4uLmNvdXJzZS5hYmlsaXRpZXMuZmluZCh0ID0+IHQuaWQgPT09IGlkKSxcbiAgICAgIC4uLmFiaWxpdGllc1tpZF19KVxuICAgICl9Ly8uZmlsdGVyKCh7bmFtZX0pID0+ICEhbmFtZSl9O1xuICAgIGNvbnN0IGNjcyA9IHt0aXRsZTogXCJVcHBkYXRlcmF0IGNlbnRyYWx0IGlubmVow6VsbFwiLCB0eXBlOiBcImNlbnRyYWxDb250ZW50XCIsIGl0ZW1zOiBPYmplY3Qua2V5cyhjZW50cmFsQ29udGVudCB8fCB7fSkubWFwKGlkID0+ICh7XG4gICAgICAuLi5jb3Vyc2UuY2VudHJhbENvbnRlbnQuZmluZChjYyA9PiBjYy5pZCA9PSBpZCksXG4gICAgICAuLi5jZW50cmFsQ29udGVudFtpZF1cbiAgICAgIH0pXG4gICAgKX0vLy5maWx0ZXIoKHtuYW1lfSkgPT4gISFuYW1lKX07XG4gICAgY29uc3QgdGFibGVzVG9TaG93ID0gW2tyQSwga3JDLCBrckUsIGNjcywgYWJzXS5maWx0ZXIoYm94SW5mbyA9PiBib3hJbmZvLml0ZW1zLmxlbmd0aCA+IDApO1xuICAgIGlmICh0YWJsZXNUb1Nob3cubGVuZ3RoID09PSAwKSByZXR1cm4gPD4mbmJzcDs8Lz47XG5cbiAgICByZXR1cm4gKFxuICAgICAgPE9wZW5DbG9zZUJveCBjbGFzc05hbWU9XCJsYXJnZXJcIiB0aXRsZT17PGRpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3YXJuaW5nRmxhZ1wiPlxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHA+VXBwZGF0ZXJhZGUgZm9ybXVsZXJpbmdhciBmcsOlbiBTa29sdmVya2V0PC9wPlxuICAgICAgPC9kaXY+fT5cbiAgICAgICAge3RhYmxlc1RvU2hvdy5tYXAoKHt0aXRsZSwgdHlwZSwgaXRlbXN9KSA9PiA8ZGl2IGtleT17dGl0bGV9PlxuICAgICAgICAgIDxoNT57dGl0bGV9PC9oNT5cbiAgICAgICAgICA8dGFibGU+XG4gICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICA8dGggc3R5bGU9e3t3aWR0aDogXCI0MCVcIn19PlVyc3BydW5nbGlnIGZvcm11bGVyaW5nPC90aD5cbiAgICAgICAgICAgICAgICA8dGggc3R5bGU9e3t3aWR0aDogXCI0MCVcIn19PlNrb2x2ZXJrZXRzIG55YSBmb3JtdWxlcmluZzwvdGg+XG4gICAgICAgICAgICAgICAgPHRoPlTDpGNrZXIgdXBwZ2lmdGVuIGRlbiBueWEgZm9ybXVsZXJpbmdlbj88L3RoPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgPC90aGVhZD5cbiAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAge2l0ZW1zLm1hcChpdGVtID0+IDx0ciBrZXk9e2l0ZW0uaWR9PlxuICAgICAgICAgICAgICAgIDx0ZCBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogaXRlbS5vbGRUZXh0fX0gLz5cbiAgICAgICAgICAgICAgICA8dGQgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IGl0ZW0ubmFtZX19IC8+XG4gICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+dXBkYXRlTGluayhpdGVtLmlkLCB0cnVlKX0+SmEgLSBiZWjDpWxsIGtvcHBsaW5nZW48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCk9PnVwZGF0ZUxpbmsoaXRlbS5pZCwgZmFsc2UpfT5OZWogLSB0YSBib3J0IGtvcHBsaW5nZW48L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICA8L3RyPil9XG4gICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgIDwvdGFibGU+XG4gICAgICAgIDwvZGl2Pil9XG4gICAgICA8L09wZW5DbG9zZUJveD5cblxuICAgIClcbiAgfVxufSIsImV4cG9ydCBpbnRlcmZhY2UgU2tvbHZlcmtldFN1YmplY3Qge1xuICBuYW1lOiBzdHJpbmc7XG4gIHNjaG9vbFR5cGU6ICdneW1uYXNpdW0nIHwgJ3ByaW1hcnknO1xuICBjb2RlOiBzdHJpbmc7XG4gIHB1cnBvc2U6IHN0cmluZztcbiAgY291cnNlczogU2tvbHZlcmtldENvdXJzZVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNrb2x2ZXJrZXRDb3Vyc2Uge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb2RlOiBzdHJpbmc7XG4gICAgY2VudHJhbENvbnRlbnQ6IHN0cmluZztcbiAgICB5ZWFyPzogJzEtMycgfCAnNC02JyB8ICc3LTknO1xuICAgIC8vY2VudHJhbENvbnRlbnQ6IEFycmF5PHt5ZWFyPzogc3RyaW5nLCB0ZXh0OiBzdHJpbmd9PjtcbiAgICBwb2ludHM6IG51bWJlcjtcbiAgICBrbm93bmxlZGdlUmVxdWlyZW1lbnRzOiBBcnJheTx7Z3JhZGVTdGVwOiBzdHJpbmcsIHRleHQ6IHN0cmluZ30+O1xuICAgIC8va25vd25sZWRnZVJlcXVpcmVtZW50czogQXJyYXk8e2dyYWRlU3RlcDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcsIHllYXI/OiBudW1iZXJ9Pjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2tvbHZlcmtldFllYXJzIChpblllYXI6IHN0cmluZykgOiBBcnJheTwnMS0zJyB8ICc0LTYnIHwgJzctOSc+IHtcbiAgc3dpdGNoKGluWWVhci50cmltKCkpIHtcbiAgICBjYXNlICczJzpcbiAgICBjYXNlICcxLTMnOlxuICAgICAgcmV0dXJuIFsnMS0zJ107XG4gICAgY2FzZSAnNic6XG4gICAgY2FzZSAnNC02JzpcbiAgICAgIHJldHVybiBbJzQtNiddO1xuICAgIGNhc2UgJzctOSc6XG4gICAgY2FzZSAnOSc6XG4gICAgICByZXR1cm4gWyc3LTknXTtcbiAgICAvLyBTcGVjaWFsc1xuICAgIGNhc2UgJzEnOiByZXR1cm4gW1wiMS0zXCJdOyAvLyBGw7ZyZWtvbW1lciBpIMOkbW5lbmEgXCJTdmVuc2thXCIgb2NoIFwiU3ZlbnNrYSBzb20gYW5kcmFzcHLDpWtcIlxuICAgIGNhc2UgJzFzJzogcmV0dXJuIFtcIjEtM1wiXTsgLy8gRsO2cmVrb21tZXIgaSDDpG1uZW5hIFwiU3ZlbnNrYVwiIG9jaCBcIlN2ZW5za2Egc29tIGFuZHJhc3Byw6VrXCJcbiAgICBjYXNlICcxLTYnOiByZXR1cm4gW1wiMS0zXCIsIFwiNC02XCJdOyAvLyBGw7ZyZWtvbW1lciBpIMOkbW5ldCBcIkhlbS0gb2NoIGtvbnN1bWVudGt1bnNrYXBcIlxuICAgIGNhc2UgJzQtOSc6IHJldHVybiBbXCI0LTZcIiwgXCI3LTlcIl07IC8vIEbDtnJla29tbWVyIGkgw6RtbmV0IFwiTW9kZXJuYSBzcHLDpWtcIlxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB5ZWFyIGluIFNrb2x2ZXJrZXQgWE1MOiAke2luWWVhcn0uIEV4cGVjdGluZyAzLDYsOSBvciAxLTMsIDQtNiwgNy05YCk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTdWJqZWN0LCBDb3Vyc2UsIEtub3dsZWRnZVJlcXVpcmVtZW50LCBBYmlsaXR5LCBDZW50cmFsQ29udGVudCwgVGFzayB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xuaW1wb3J0IHsgU3ViamVjdFRvSW1wb3J0LCBDb3Vyc2VUb0ltcG9ydCB9IGZyb20gXCIuLi9zdWJqZWN0LXRvLWltcG9ydFwiO1xuaW1wb3J0IHsgQ2hhbmdlIH0gZnJvbSBcIi4vY2hhbmdlXCI7XG5pbXBvcnQgeyBDb3Vyc2VTZXQgfSBmcm9tICcuL2NvdXJzZS1zZXQnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCwgQmF0Y2hSdW5uZXIsIE11dGF0aW9uUmVxdWVzdCwgTGlzdE9wdGlvbnMgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBBdXRvVmFsdWVNYXAgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy9hdXRvLXZhbHVlLW1hcCc7XG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuXG50eXBlIElEID0gc3RyaW5nO1xuXG5mdW5jdGlvbiBkaWZmU3ViamVjdEdsb2JhbFRleHRzKGRiVGV4dE1hcDogTWFwPHN0cmluZywgSUQ+LCB4bWxUZXh0czogc3RyaW5nW10pIHtcbiAgY29uc3QgcmVtb3ZlZElkcyA9IG5ldyBTZXQ8SUQ+KCk7XG4gIGNvbnN0IG5ld1RleHRzID0gbmV3IE1hcDxzdHJpbmcsIElEPigpO1xuICBjb25zdCBpZHNUb0FkZCA9IG5ldyBTZXQ8SUQ+KCk7XG5cbiAgeG1sVGV4dHMuZm9yRWFjaChuZXdUZXh0ID0+IHtcbiAgICBuZXdUZXh0ID0gbmV3VGV4dC50cmltKCk7XG4gICAgaWYgKCFkYlRleHRNYXAuaGFzKG5ld1RleHQpKSB7XG4gICAgICBjb25zdCBpZCA9IGNyZWF0ZVVVSUQoKTtcbiAgICAgIGNvbnNvbGUubG9nKGBOZXcgaWQ6ICR7aWR9LiBUZXh0OiAke25ld1RleHR9YCk7XG4gICAgICBuZXdUZXh0cy5zZXQobmV3VGV4dCwgaWQpO1xuICAgICAgaWRzVG9BZGQuYWRkKGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3VGV4dHMuc2V0KG5ld1RleHQsIGRiVGV4dE1hcC5nZXQobmV3VGV4dCkpO1xuICAgIH1cbiAgfSk7XG5cbiAgZm9yIChjb25zdCBbb2xkVGV4dCwgb2xkSWRdIG9mIGRiVGV4dE1hcC5lbnRyaWVzKCkpIHtcbiAgICBpZiAoeG1sVGV4dHMuaW5kZXhPZihvbGRUZXh0KSA9PT0gLTEpIHtcbiAgICAgIHJlbW92ZWRJZHMuYWRkKG9sZElkKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlbW92ZWRJZHMsXG4gICAgbmV3VGV4dHMsXG4gICAgaWRzVG9BZGRcbiAgfVxufVxuXG5sZXQgX2ZpY3RpdmVPbGRJZCA9IDE7XG5mdW5jdGlvbiBmaWN0aXZlT2xkSWQoKSB7XG4gIHJldHVybiBcImZpY3RpdmVPbGRJZFwiICsgKCsrX2ZpY3RpdmVPbGRJZCk7XG59XG5cbmNvbnN0IHN0b3BXb3JkcyA9IG5ldyBTZXQoXG4gIC8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL01paGFpVmFsZW50aW4vbHVuci1sYW5ndWFnZXMvYmxvYi9tYXN0ZXIvbHVuci5zdi5qcyNMMjUyXG4gICgnYWxsYSBhbGx0IGF0dCBhdiBibGV2IGJsaSBibGlyIGJsaXZpdCBkZSBkZW0gZGVuIGRlbm5hIGRlcmFzIGRlc3MgZGVzc2EgZGV0IGRldHRhIGRpZyBkaW4gZGluYSBkaXR0IGR1IGTDpHIgZMOlIGVmdGVyIGVqIGVsbGVyIGVuIGVyIGVyYSBlcnQgZXR0IGZyw6VuIGbDtnIgaGEgaGFkZSBoYW4gaGFucyBoYXIgaGVubmUgaGVubmVzIGhvbiBob25vbSBodXIgaMOkciBpIGlja2UgaW5nZW4gaW5vbSBpbnRlIGphZyBqdSBrYW4ga3VuZGUgbWFuIG1lZCBtZWxsYW4gbWVuIG1pZyBtaW4gbWluYSBtaXR0IG1vdCBteWNrZXQgbmkgbnUgbsOkciBuw6Vnb24gbsOlZ290IG7DpWdyYSBvY2ggb20gb3NzIHDDpSBzYW1tYSBzZWRhbiBzaWcgc2luIHNpbmEgc2l0dGEgc2rDpGx2IHNrdWxsZSBzb20gc8OlIHPDpWRhbiBzw6VkYW5hIHPDpWRhbnQgdGlsbCB1bmRlciB1cHAgdXQgdXRhbiB2YWQgdmFyIHZhcmEgdmFyZsO2ciB2YXJpdCB2YXJqZSB2YXJzIHZhcnQgdmVtIHZpIHZpZCB2aWxrYSB2aWxrYXMgdmlsa2VuIHZpbGtldCB2w6VyIHbDpXJhIHbDpXJ0IMOkbiDDpHIgw6V0IMO2dmVyJyArXG4gICcga3JpbmcnKSAvLyBUaGlzIGxpbmUgY29udGFpbnMgYWRkaXRpb25hbCBzdG9wLXdvcmRzIG1pc3NpbmcgaW4gbHVuci5zdi5cbiAgLnNwbGl0KCcgJykpO1xuXG5mdW5jdGlvbiBnZXRMZXhlbWVzKGh0bWw6IHN0cmluZyk6IFNldDxzdHJpbmc+IHtcbiAgcmV0dXJuIG5ldyBTZXQocmVtb3ZlVGFncyhodG1sKS5yZXBsYWNlKC9bXlxcd1xcc8Olw6TDtl0vZ2ksICcnKS50b0xvd2VyQ2FzZSgpLnNwbGl0KC9cXHMvKVxuICAgIC5tYXAobGV4ZW1lID0+IGxleGVtZS50cmltKCkpXG4gICAgLmZpbHRlcihsZXhlbWUgPT4gISFsZXhlbWUpXG4gICAgLmZpbHRlcihsZXhlbWUgPT4gIXN0b3BXb3Jkcy5oYXMobGV4ZW1lKSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlVGFncyhodG1sOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2LmlubmVySFRNTCA9IGh0bWw7XG4gIHJldHVybiAnJytkaXYuaW5uZXJUZXh0O1xufVxuXG5mdW5jdGlvbiBnZXRJZHNUb01pZ3JhdGUoXG4gIGRiVGV4dHM6IHtpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZ31bXSxcbiAgeG1sVGV4dHM6IHtodG1sOiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZ31bXSxcbiAgbmV3VGV4dHM6IE1hcDxzdHJpbmcsIElEPixcbiAgdGV4dFR5cGU6IHN0cmluZyxcbiAgY291cnNlPzogc3RyaW5nKSA6IE1hcDxJRCwge1xuICAgIG5ld1RleHQ/OiBzdHJpbmcsXG4gICAgbmV3SWQ/OiBJRCxcbiAgICBvbGRUZXh0Pzogc3RyaW5nLFxuICAgIGdyYWRlU3RlcD86IHN0cmluZyxcbiAgICBpc1R5cG9GaXg/OiBib29sZWFuXG4gIH0+XG57XG4gIGNvbnN0IGlkc1RvTWlncmF0ZSA9IG5ldyBNYXA8SUQsIHtcbiAgICBuZXdUZXh0Pzogc3RyaW5nLFxuICAgIG5ld0lkPzogSUQsXG4gICAgb2xkVGV4dD86IHN0cmluZyxcbiAgICBncmFkZVN0ZXA/OiBzdHJpbmcsXG4gICAgaXNUeXBvRml4PzogYm9vbGVhbixcbiAgICBtYXRjaExldmVsOiBudW1iZXIsXG4gICAgbGV4ZW1lczogU2V0PHN0cmluZz5cbiAgfT4oKTtcbiAgZGJUZXh0cyA9IGRiVGV4dHMubWFwKGVudGl0eSA9PiAoey4uLmVudGl0eSwgbmFtZTogZW50aXR5Lm5hbWUudHJpbSgpfSkpLmZpbHRlcigoe25hbWV9KSA9PiAhIW5hbWUpO1xuICBjb25zdCB4bWxTZXQgPSBuZXcgTWFwPHN0cmluZywge2h0bWw6IHN0cmluZywgZ3JhZGVTdGVwPzogc3RyaW5nfT4oKTtcbiAgeG1sVGV4dHMuZm9yRWFjaChpdGVtID0+IHhtbFNldC5zZXQoaXRlbS5odG1sLCBpdGVtKSk7XG4gIGNvbnN0IGRiU2V0ID0gbmV3IE1hcDxzdHJpbmcsIHtpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZ30+KCk7XG4gIGRiVGV4dHMuZm9yRWFjaChlbnRpdHkgPT4gZGJTZXQuc2V0KGVudGl0eS5uYW1lLCBlbnRpdHkpKTtcbiAgLy8gUmVtb3ZlIHRob3NlIHdobyBhbHJlYWR5IGV4aXN0cyBpZGVudGljYWxseVxuICBkYlRleHRzID0gZGJUZXh0cy5maWx0ZXIoZW50aXR5ID0+ICF4bWxTZXQuaGFzKGVudGl0eS5uYW1lKSk7XG4gIHhtbFRleHRzID0geG1sVGV4dHMuZmlsdGVyKGl0ZW0gPT4gIWRiU2V0LmhhcyhpdGVtLmh0bWwpKTtcblxuICAvLyBOb3csIGZvciB0aGUgcmVtYWluZGVyLCB0cnkgdGhlIGJlc3QgdG8gbWFwIG9sZCB0ZXh0cyB0byBuZXcgdGV4dHMsIGFuZCB3aGVuIGRvbmUsIGNoZWNrIGlmIHRoZXJlIGFyZSBuZXcgdGV4dHMgdGhhdCBuZXZlciBnb3QgbWFwcGVkLlxuXG4gIC8vIFN0YXJ0IGJ5IHB1dHRpbmcgYWxsIGRiVGV4dCBpbnRvIHRoZSByZXN1bHQsIHdpdGhvdXQgYSBwYWlyZWQgeG1sIHRleHQgeWV0OlxuICBkYlRleHRzLmZvckVhY2goZGJUZXh0ID0+IGlkc1RvTWlncmF0ZS5zZXQoZGJUZXh0LmlkLCB7XG4gICAgZ3JhZGVTdGVwOiBkYlRleHQuZ3JhZGVTdGVwLFxuICAgIG9sZFRleHQ6IGRiVGV4dC5uYW1lLFxuICAgIGxleGVtZXM6IGdldExleGVtZXMoZGJUZXh0Lm5hbWUpLFxuICAgIG1hdGNoTGV2ZWw6IDBcbiAgfSkpO1xuICAvLyBUaGVuIHRyeSB0byBwYWlyIGVhY2ggeG1sVGV4dCB0byBhbiBpdGVtIGluIGlkc1RvTWlncmF0ZVxuICBjb25zdCB4bWxTcGluc3RlcnM6IHtodG1sOiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZ31bXSA9IFtdO1xuICB3aGlsZSAoeG1sVGV4dHMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IHhtbFRleHQgPSB4bWxUZXh0c1swXTtcbiAgICBjb25zdCBiZXN0TWF0Y2ggPSBmaW5kQmVzdE1hdGNoKHhtbFRleHQpO1xuICAgIGlmICghYmVzdE1hdGNoKSB7XG4gICAgICB4bWxTcGluc3RlcnMucHVzaCh4bWxUZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGJlc3RNYXRjaC5uZXdUZXh0KSB7XG4gICAgICAgIC8vIFRocm93IG91dCBleGlzdGluZyBtYXRjaFxuICAgICAgICB4bWxUZXh0cy5wdXNoKHtodG1sOiBiZXN0TWF0Y2gubmV3VGV4dCwgZ3JhZGVTdGVwOiBiZXN0TWF0Y2guZ3JhZGVTdGVwfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBwYWlyID0gaWRzVG9NaWdyYXRlLmdldChiZXN0TWF0Y2guaWQpO1xuICAgICAgLy8gUGFpciBteXNlbGYgd2l0aCB0aGlzIG1hdGNoOlxuICAgICAgcGFpci5uZXdUZXh0ID0geG1sVGV4dC5odG1sO1xuICAgICAgcGFpci5tYXRjaExldmVsID0gYmVzdE1hdGNoLm15TWF0Y2hMZXZlbDtcbiAgICAgIHBhaXIubmV3SWQgPSBuZXdUZXh0cy5nZXQoeG1sVGV4dC5odG1sKTtcbiAgICB9XG4gICAgeG1sVGV4dHMuc2hpZnQoKTtcbiAgfVxuICAvLyBGb3IgZWFjaCBzcGluc3RlciAobmV3IHRleHRzIHRoYXQgY291bGRuJ3QgZmluZCBhbnkgbWF0Y2ggaW4gb2xkIHRleHRzKSxcbiAgLy8gQWRkIHRoZW0gd2l0aCBhbiBmaWN0aXZlIG9sZCBJRCBidXQgb21pdCBvbGRUZXh0IHRvIG1hcmsgaXQgYXMgYSBuZXdjb21lclxuICB4bWxTcGluc3RlcnMuZm9yRWFjaChzcGluc3RlciA9PiB7XG4gICAgaWRzVG9NaWdyYXRlLnNldChmaWN0aXZlT2xkSWQoKSwge1xuICAgICAgbmV3SWQ6IG5ld1RleHRzLmdldChzcGluc3Rlci5odG1sKSxcbiAgICAgIG5ld1RleHQ6IHNwaW5zdGVyLmh0bWwsXG4gICAgICBncmFkZVN0ZXA6IHNwaW5zdGVyLmdyYWRlU3RlcCxcbiAgICAgIG1hdGNoTGV2ZWw6IDAsXG4gICAgICBsZXhlbWVzOiBuZXcgU2V0PHN0cmluZz4oKX0pXG4gIH0pO1xuXG4gIC8vIE1hcmsgdHlwby1maXhlc1xuICBpZHNUb01pZ3JhdGUuZm9yRWFjaChtYXRjaCA9PiB7XG4gICAgY29uc3Qge29sZFRleHQsIG5ld1RleHR9ID0gbWF0Y2g7XG4gICAgaWYgKG9sZFRleHQgJiYgbmV3VGV4dCkge1xuICAgICAgaWYgKFsuLi5nZXRMZXhlbWVzKG9sZFRleHQpXS5qb2luKCcgJykgPT09IFsuLi5nZXRMZXhlbWVzKG5ld1RleHQpXS5qb2luKCcgJykpIHtcbiAgICAgICAgbWF0Y2guaXNUeXBvRml4ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGNvbnNvbGUubG9nKFwiSWRzVG9NaWdyYXRlXCIsIFsuLi5pZHNUb01pZ3JhdGUudmFsdWVzKCldLm1hcCgoe29sZFRleHQsIGxleGVtZXN9KSA9PiBgJHtbLi4ubGV4ZW1lc10uam9pbignICcpfTogJHtvbGRUZXh0fWApKTtcblxuICByZXR1cm4gaWRzVG9NaWdyYXRlO1xuXG4gIGZ1bmN0aW9uIGZpbmRCZXN0TWF0Y2goeG1sVGV4dDoge2h0bWw6IHN0cmluZywgZ3JhZGVTdGVwPzogc3RyaW5nfSkge1xuICAgIGNvbnN0IHhtbExleGVtZXMgPSBnZXRMZXhlbWVzKHhtbFRleHQuaHRtbCk7XG4gICAgY29uc3QgcG9zc2libGVQYXJ0bmVycyA9IFsuLi5pZHNUb01pZ3JhdGUuZW50cmllcygpXVxuICAgICAgLmZpbHRlcigoW2lkLCB4XSkgPT4geC5ncmFkZVN0ZXAgPT09IHhtbFRleHQuZ3JhZGVTdGVwKVxuICAgICAgLm1hcCgoW2lkLCB7Z3JhZGVTdGVwLCBtYXRjaExldmVsLCBuZXdUZXh0LCBsZXhlbWVzfV0pID0+ICh7XG4gICAgICAgIGlkLFxuICAgICAgICBncmFkZVN0ZXAsXG4gICAgICAgIG1hdGNoTGV2ZWwsXG4gICAgICAgIG5ld1RleHQsXG4gICAgICAgIG15TWF0Y2hMZXZlbDogZ2V0TWF0Y2hMZXZlbCh4bWxMZXhlbWVzLCBsZXhlbWVzKVxuICAgICAgfSkpLmZpbHRlcihwcCA9PiBwcC5teU1hdGNoTGV2ZWwgPj0gNTAgJiYgKCFwcC5tYXRjaExldmVsIHx8IHBwLm1hdGNoTGV2ZWwgPCBwcC5teU1hdGNoTGV2ZWwpKTtcbiAgICByZXR1cm4gcG9zc2libGVQYXJ0bmVycy5zb3J0KChhLCBiKSA9PiBiLm15TWF0Y2hMZXZlbCAtIGEubXlNYXRjaExldmVsKVswXTsgLy8gaGlnaGVzdCBmaXJzdC5cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE1hdGNoTGV2ZWwobGV4ZW1lczE6IFNldDxzdHJpbmc+LCBsZXhlbWVzMjogU2V0PHN0cmluZz4pIHtcbiAgICBpZiAobGV4ZW1lczEuc2l6ZSA9PT0gMCB8fCBsZXhlbWVzMi5zaXplID09PSAwKSByZXR1cm4gMDtcbiAgICBsZXQgcG9pbnRzMSA9IDA7XG4gICAgbGV0IHBvaW50czIgPSAwO1xuICAgIGxleGVtZXMxLmZvckVhY2god29yZCA9PiB7XG4gICAgICBpZiAobGV4ZW1lczIuaGFzKHdvcmQpKSArK3BvaW50czE7XG4gICAgfSk7XG4gICAgbGV4ZW1lczIuZm9yRWFjaCh3b3JkID0+IHtcbiAgICAgIGlmIChsZXhlbWVzMS5oYXMod29yZCkpICsrcG9pbnRzMjtcbiAgICB9KTtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCgxMDAgKiBNYXRoLm1heChwb2ludHMxIC8gbGV4ZW1lczEuc2l6ZSwgcG9pbnRzMiAvIGxleGVtZXMyLnNpemUpKTtcbiAgfVxuXG4gIC8qaWYgKGRiVGV4dHMubGVuZ3RoICE9PSB4bWxUZXh0cy5sZW5ndGgpIHtcbiAgICAvLyBXZSBjYW4gbm8gbG9uZ2VyIGFzc3VtZSB0aGF0IHRoZSBjaGFuZ2VkIHRleHRzIHJlZmVyIHRvIGRpZmZlcmVudCBmb3JtdWxhdGlvbnMgb2YgdGhlIHNhbWUgbWVhbmluZy5cbiAgICAvLyBXZSBub3QgbWFwIG9sZCBmb3JtdWxhdGlvbnMgdG8gbmV3IG9uZXMuXG4gICAgLy8gSW4gZnV0dXJlLCB3ZSBjb3VsZCBoYW5kbGUgdGhpcyBjYXNlIGJ5IGFzc3VtaW5nIGFsbCBvbGQgdGV4dHMgbm90IG9jY3VycmluZyBpbiBuZXcgZGF0YSwgaGF2ZSBiZWVuIHJlbW92ZWQgYW5kIGFsbCBuZXcgaGF2ZSBiZWVuIGFkZGVkLlxuICAgIHRocm93IG5ldyBFcnJvcihcIk51bWJlciBvZiBcIiArIHRleHRUeXBlICsgKGNvdXJzZSA/IGAgb24gY291cnNlICR7Y291cnNlfWAgOiBcIlwiKSArIFwiIGRpZmZlcnMuIENhbm5vdCBtaWdyYXRlLlwiKTtcbiAgfVxuICBkYlRleHRzLmZvckVhY2goKHtuYW1lOiBvbGRUZXh0LCBpZDogb2xkSWQsIGdyYWRlU3RlcH0sIGkpID0+IHtcbiAgICBjb25zdCB4bWxUZXh0ID0geG1sVGV4dHNbaV0udHJpbSgpO1xuICAgIGlmIChvbGRUZXh0LnRyaW0oKSAhPT0geG1sVGV4dCkge1xuICAgICAgaWRzVG9NaWdyYXRlLnNldChvbGRJZCwge25ld1RleHQ6IHhtbFRleHQsIG5ld0lkOiBuZXdUZXh0cy5nZXQoeG1sVGV4dCksIG9sZFRleHQsIGdyYWRlU3RlcH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpZHNUb01pZ3JhdGU7Ki9cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1pZ3JhdGVTdWJqZWN0KGV4aXN0aW5nU3ViamVjdDogU3ViamVjdCwgY291cnNlU2V0czogQ291cnNlU2V0W10sIHN1YmplY3RUb0ltcG9ydDogU3ViamVjdFRvSW1wb3J0LCBjaGFuZ2VzOiBDaGFuZ2VbXSkge1xuICAvLyBHZW5lcmF0ZSBkYlRleHRNYXA6XG4gIC8vIGRiVGV4dE1hcCBjb250YWlucyBhIG1hcCBmcm9tIG9sZCB0ZXh0cyAoQWJpbGl0aWVzLCBDZW50cmFsIENvbnRlbnQgb3IgS25vd2xlZGdlIFJlcXVpcmVtZW50cykgdG8gaXRzIElEIGluIHRoZSBkYXRhYmFzZS5cbiAgLy8gVGhlIG1hcCBzaG91bGQgYmUgdXNlZCB0byBsb29rdXAgSURzLCBnaXZlbiB0aGVpciB0cmltbWVkIHRleHQuXG4gIGNvbnN0IGRiVGV4dE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBJRD4oKTtcbiAgY29uc3Qgb3JkZXJlZEFiaWxpdGllcyA9IGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXNPcmRlciA/XG4gICAgZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllc09yZGVyLm1hcChpZCA9PiBleGlzdGluZ1N1YmplY3QuYWJpbGl0aWVzLmZpbmQoYSA9PiBhLmlkID09PSBpZCkpIDpcbiAgICBleGlzdGluZ1N1YmplY3QuYWJpbGl0aWVzO1xuICBmb3IgKGNvbnN0IGEgb2Ygb3JkZXJlZEFiaWxpdGllcykge1xuICAgIGRiVGV4dE1hcC5zZXQoYS5uYW1lLnRyaW0oKSwgYS5pZCk7XG4gIH1cbiAgZm9yIChjb25zdCB7dGVtcGxhdGV9IG9mIGNvdXJzZVNldHMpIHtcbiAgICBmb3IgKGNvbnN0IGNjIG9mIHRlbXBsYXRlLmNlbnRyYWxDb250ZW50KSB7XG4gICAgICBkYlRleHRNYXAuc2V0KGNjLm5hbWUudHJpbSgpLCBjYy5pZCk7XG4gICAgfVxuICAgIGZvciAoY29uc3Qga3Igb2YgdGVtcGxhdGUua25vd2xlZGdlUmVxdWlyZW1lbnRzKSB7XG4gICAgICBkYlRleHRNYXAuc2V0KGtyLm5hbWUudHJpbSgpLCBrci5pZCk7XG4gICAgfVxuICB9XG5cbiAgLy8gRmluZCBvdXQgd2hpY2ggbmV3IHRleHRzIChpbiB0b3RhbCkgdGhhdCBzaG91bGQgYmUgY3JlYXRlZCBpbiB0aGUgREIgb24gbWlncmF0aW5nLlxuICAvLyBNYXliZSBhbHNvIGZpbmQgb3V0IGlmIHRoZXJlIGFyZSBhbnkgb2xkIHRleHRzIHdobydzIG9iamVjdHMgYXJlIG5vIG1vcmUgdXNlZCBhbmQgY291bGQgYmUgcmVtb3ZlZCBmcm9tIHRoZSBEQlxuICAvLyBuZXdUZXh0czogQSBtYXAgYmV0d2VlbiBhIG5ldyB0ZXh0IGFuZCBpdHMgbmV3IElEIGluIHRoZSBkYXRhYmFzZSBhZnRlciBjcmVhdGluZyBpdC5cbiAgLy8gcmVtb3ZlZElkczogQSBzZXQgb2YgZXhpc3RpbmcgaWRzIHRoYXQgd291bGQgYmUgc2FmZSB0byByZW1vdmUgb24gbWlncmF0aW5nICh3aWxsIGlnbm9yZSB0aG9zZSBmb3Igbm93KVxuICBjb25zdCB7bmV3VGV4dHM6IG5ld0FiaWxpdHlUZXh0cywgaWRzVG9BZGQ6IGFiaWxpdGllc1RvQWRkfSA9XG4gICAgZGlmZlN1YmplY3RHbG9iYWxUZXh0cyhkYlRleHRNYXAsIHN1YmplY3RUb0ltcG9ydC5hYmlsaXRpZXMpO1xuICBjb25zdCB7bmV3VGV4dHM6IG5ld0NDVGV4dHMsIGlkc1RvQWRkOiBjY3NUb0FkZH0gPVxuICAgIGRpZmZTdWJqZWN0R2xvYmFsVGV4dHMoZGJUZXh0TWFwLCBmbGF0dGVuKHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzLm1hcChjID0+IGMuY2VudHJhbENvbnRlbnQubWFwKGNjID0+IGNjLmh0bWwpKSkpO1xuICBjb25zdCB7bmV3VGV4dHM6IG5ld0tSVGV4dHMsIGlkc1RvQWRkOiBrcnNUb0FkZH0gPVxuICAgIGRpZmZTdWJqZWN0R2xvYmFsVGV4dHMoZGJUZXh0TWFwLCBmbGF0dGVuKHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzLm1hcChjID0+IGMua25vd2xlZGdlUmVxdWlyZW1lbnRzLm1hcChrciA9PiBrci5odG1sKSkpKTtcbiAgXG4gIGNvbnNvbGUubG9nKGBBYmlsaXRpZXMgdG8gYWRkOiAke2FiaWxpdGllc1RvQWRkLnNpemV9YCk7XG4gIGNvbnNvbGUubG9nKGBDQ3MgdG8gYWRkOiAke2Njc1RvQWRkLnNpemV9YCk7XG4gIGNvbnNvbGUubG9nKGBLUnMgdG8gYWRkOiAke2tyc1RvQWRkLnNpemV9YCk7XG5cbiAgLy8gRmluZCBvdXQgYWxsIGV4aXN0aW5nIEFiaWxpdHkgaWRzIHRoYXQgd2lsbCBiZSBtaWdyYXRlZCB0byBuZXcgb25lc1xuICBjb25zdCBhYmlsaXR5SWRzVG9NaWdyYXRlID0gZ2V0SWRzVG9NaWdyYXRlKFxuICAgIG9yZGVyZWRBYmlsaXRpZXMsXG4gICAgc3ViamVjdFRvSW1wb3J0LmFiaWxpdGllcy5tYXAoaHRtbCA9PiAoe2h0bWx9KSksXG4gICAgbmV3QWJpbGl0eVRleHRzLFxuICAgIFwiYWJpbGl0aWVzXCIpO1xuXG4gIC8vIERvIHRoZSBzYW1lIGZvciBlYWNoIENlbnRyYWwgQ29udGVudCBhbmQgS25vd2xlZGdlIFJlcXVpcmVtZW50cyBvbiBlYWNoIGNvdXJzZTpcbiAgY29uc3QgaWRzVG9NaWdyYXRlUGVyQ291cnNlID0gY291cnNlU2V0cy5tYXAoKHt0ZW1wbGF0ZX0sIGkpID0+IHtcbiAgICBjb25zb2xlLmxvZyhgQ291cnNlOiAke3RlbXBsYXRlLm5hbWV9YCk7XG4gICAgY29uc3QgeG1sQ291cnNlID0gc3ViamVjdFRvSW1wb3J0LmNvdXJzZXMuZmluZChjID0+IGMubmFtZSA9PT0gdGVtcGxhdGUubmFtZSkgfHxcbiAgICAgIHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzLmZpbmQoYyA9PiBjLmNvZGUgPT09IHRlbXBsYXRlLmNvZGUpO1xuICAgIHJldHVybiB7XG4gICAgICBjb3Vyc2VDb2RlOiB0ZW1wbGF0ZS5jb2RlLFxuICAgICAgY2NzVG9NaWdyYXRlOiB4bWxDb3Vyc2UgP1xuICAgICAgICBnZXRJZHNUb01pZ3JhdGUoXG4gICAgICAgICAgdGVtcGxhdGUuY2VudHJhbENvbnRlbnQsIC8vIEhhcyBhbHJlYWR5IGJlZW4gc29ydGVkIHdoZW4gcmV0cmlldmVkIHZpYSBsb2FkQ291cnNlKClcbiAgICAgICAgICB4bWxDb3Vyc2UuY2VudHJhbENvbnRlbnQubWFwKCh7aHRtbH0pID0+ICh7aHRtbH0pKSxcbiAgICAgICAgICBuZXdDQ1RleHRzLFxuICAgICAgICAgIFwiY2VudHJhbCBjb250ZW50XCIsXG4gICAgICAgICAgdGVtcGxhdGUubmFtZSkgOlxuICAgICAgICBuZXcgTWFwPElELCB7bmV3VGV4dDogc3RyaW5nLCBuZXdJZDogSUQsIG9sZFRleHQ6IHN0cmluZywgaXNUeXBvRml4OiBib29sZWFufT4oKSxcbiAgICAgIGtyc1RvTWlncmF0ZTogeG1sQ291cnNlID9cbiAgICAgICAgZ2V0SWRzVG9NaWdyYXRlKFxuICAgICAgICAgIHRlbXBsYXRlLmtub3dsZWRnZVJlcXVpcmVtZW50cywgLy8gSGFzIGFscmVhZHkgYmVlbiBzb3J0ZWQgd2hlbiByZXRyaWV2ZWQgdmlhIGxvYWRDb3Vyc2UoKVxuICAgICAgICAgIHhtbENvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMsXG4gICAgICAgICAgbmV3S1JUZXh0cyxcbiAgICAgICAgICBcImtub3dsZWRnZSByZXF1aXJlbWVudHNcIixcbiAgICAgICAgICB0ZW1wbGF0ZS5uYW1lXG4gICAgICAgICkgOlxuICAgICAgICBuZXcgTWFwPElELCB7bmV3VGV4dDogc3RyaW5nLCBuZXdJZDogSUQsIG9sZFRleHQ6IHN0cmluZywgZ3JhZGVTdGVwOiBzdHJpbmcsIGlzVHlwb0ZpeDogYm9vbGVhbn0+KClcbiAgICB9O1xuICB9KTtcblxuICAvLyBPSyBzbyBub3cgd2UgaGF2ZSBhbGwgaW5mby5cbiAgLy8gTm93LCB3ZSBuZWVkIHRvOlxuICAvLyBTdWJqZWN0OlxuICAvLyAxLiBSZW1vdmUgbGlua3MgZnJvbSBzdWJqZWN0cyB0byBhYmlsaXRpZXNcbiAgLy8gMi4gQWRkIGxpbmtzIGZyb20gc3ViamVjdHMgdG8gYWJpbGl0aWVzXG4gIGFiaWxpdHlJZHNUb01pZ3JhdGUuZm9yRWFjaCgoe25ld1RleHQsIG5ld0lkLCBvbGRUZXh0LCBpc1R5cG9GaXh9LCBvbGRJZCkgPT4ge1xuICAgIC8vY29uc3Qgb2xkVGV4dCA9IGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXMuZmluZChhID0+IGEuaWQgPT09IG9sZElkKS5uYW1lO1xuICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICBjaGFuZ2U6IChcbiAgICAgICAgb2xkVGV4dCA/XG4gICAgICAgICAgbmV3VGV4dCA/XG4gICAgICAgICAgICBpc1R5cG9GaXggP1xuICAgICAgICAgICAgICBgVHJ5Y2tmZWxzcsOkdHRuaW5nIEbDtnJtw6VnYWAgOlxuICAgICAgICAgICAgICBgVXBwZGF0ZXJhZCBGw7ZybcOlZ2FgIDpcbiAgICAgICAgICAgIGBCb3J0dGFnZW4gRsO2cm3DpWdhYCA6XG4gICAgICAgICAgYE55IEbDtnJtw6VnYWBcbiAgICAgICksXG4gICAgICBjb250ZW50OiBgPHN0cmlrZT4ke29sZFRleHQgfHwgJyd9PC9zdHJpa2U+PGJyLz4ke25ld1RleHQgfHwgJyd9YCxcbiAgICAgIG11dGF0aW9uczogYnIgPT4ge1xuICAgICAgICBpZiAobmV3SWQgJiYgYWJpbGl0aWVzVG9BZGQuaGFzKG5ld0lkKSkge1xuICAgICAgICAgIGNvbnN0IGE6IEFiaWxpdHkgPSB7XG4gICAgICAgICAgICBpZDogbmV3SWQsXG4gICAgICAgICAgICBuYW1lOiBuZXdUZXh0LFxuICAgICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXSxcbiAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpXG4gICAgICAgICAgfTtcbiAgICAgICAgICBici5hZGQoXCJhYmlsaXRpZXNcIiwgYSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9sZFRleHQpIGJyLnVubGluazIoXCJzdWJqZWN0c1wiLCBleGlzdGluZ1N1YmplY3QuaWQsIFwiYWJpbGl0aWVzXCIsIG9sZElkKTtcbiAgICAgICAgaWYgKG5ld0lkKSBici5saW5rMihcInN1YmplY3RzXCIsIGV4aXN0aW5nU3ViamVjdC5pZCwgXCJhYmlsaXRpZXNcIiwgbmV3SWQpO1xuICAgICAgfVxuICAgIH0pXG4gIH0pO1xuICAvLyAzLiBVcGRhdGUgYWJpbGl0aWVzT3JkZXIgb24gU3ViamVjdCBiYXNlZCBvbiBzdWJqZWN0VG9JbXBvcnQuYWJpbGl0aWVzIChtYXBwZWQgdG8gaWRzIGluIG5ld1RleHRzKVxuICBpZiAoIWV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXNPcmRlciB8fCBhYmlsaXR5SWRzVG9NaWdyYXRlLnNpemUgPiAwKSB7XG4gICAgZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllc09yZGVyID0gc3ViamVjdFRvSW1wb3J0LmFiaWxpdGllcy5tYXAoeG1sID0+IG5ld0FiaWxpdHlUZXh0cy5nZXQoeG1sKSk7XG4gICAgY2hhbmdlcy5wdXNoKHtcbiAgICAgIG11dGF0aW9uczogYnIgPT4gYnIucHV0KFwic3ViamVjdHNcIiwgZXhpc3RpbmdTdWJqZWN0KSxcbiAgICAgIGNoYW5nZTogZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllc09yZGVyID9cbiAgICAgICAgbnVsbCA6IC8vIMOEbmRyaW5nZW4gcmVkYW4gdmlzdWVsbCBzb20gXCJVcHBkYXRlcmFkIGbDtnIgZsO2cm3DpWdhXCIsIGV0Yywgb3ZhblxuICAgICAgICBgSW5mw7ZyIGVuIG9yZG5hZCBsaXN0YSBww6UgZsO2cm3DpWdvciBpIGRhdGFiYXNlbmAsXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBjcmVhdGVkSWRzID0gbmV3IFNldDxJRD4oKTtcbiAgY2hhbmdlcy5wdXNoKHttdXRhdGlvbnM6ICgpPT5jcmVhdGVkSWRzLmNsZWFyKCl9KTsgLy8gSW4gY2FzZSBtdXRhdGlvbnMgcnVuIHR3aWNlICh3aGljaCBpdCBkb2Vzbid0IGFzIG9mIGN1cnJlbnQgaW1wbC4pXG4gIGNvbnN0IHNob3duQ2hhbmdlcyA9IG5ldyBTZXQ8c3RyaW5nPigpOyAvLyBTZXQgb2YgY291cnNlTmFtZVxuICBjaGFuZ2VzLnB1c2goe211dGF0aW9uczogKCk9PnNob3duQ2hhbmdlcy5jbGVhcigpfSk7XG4gIFxuICAvLyBDb3Vyc2VzOlxuICAvLyAxLiBHbyB0aHJvdWdoIGFsbCBjb3Vyc2UgaW5zdGFuY2VzIGFuZDpcbiAgLy8gICAgICBBOiBSZW1vdmUgbGlua3MgZnJvbSBjb3Vyc2VzIHRvIGFiaWxpdGllcyBsaXN0ZWQgaW4gYWJpbGl0eUlkc1RvTWlncmF0ZS5rZXlzKClcbiAgLy8gICAgICBCOiBBZGQgbGlua3MgZnJvbSBjb3Vyc2VzIHRvIGFiaWxpdGllcyBhYmlsdGl0aWVzVG9NaWdyYXRlLnZhbHVlcygpXG4gIC8vICAgICAgQzogVXBkYXRlIGFiaWxpdGllc09yZGVyIG9uIGNvdXJzZSBpbnN0YW5jZXMgYmFzZWQgb24gc3ViamVjdFRvSW1wb3J0IChtYXBwZWQgdG8gaWRzIGluIG5ld1RleHRzKVxuICAvLyAyLCAzOiBEbyB0aGUgc2FtZSBmb3IgY2VudHJhbC1jb250ZW50IGFuZCBrbm93bGVkZ2UtcmVxdWlyZW1lbnRlczpcbiAgLy8gICAgRmluZCBjY3MgYW5kIGtycyB0byBtaWdyYXRlIGJhc2VkIG9uIGNvdXJzZUluc3RhbmNlLmNvZGVcbiAgLy8gICAgRm9yIGJvdGggY2NzIGFuZCBrcnMsIGRvOlxuICAvLyAgICAgIEE6IFVubGluayBjY3NUb01pZ3JhdGUua2V5cygpXG4gIC8vICAgICAgQjogTGluayBjY3NUb01pZ3JhdGUudmFsdWVzKClcbiAgLy8gICAgICBDOiBVcGRhdGUgY2VudHJhbENvbnRlbnRPcmRlciBiYXNlZCBvbiBzdWJqZWN0VG9JbXBvcnQuY2VudHJhbENvbnRlbnQgbWFwcGVkIHRvIG5ld1RleHRzIGlkc1xuICAvLyAgICAgIChzYW1lIGZvciBrcnNUb01pZ3JhdGUsIHdpdGgga25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIgaW5zdGVhZClcbiAgZm9yIChjb25zdCB7dGVtcGxhdGUsIGluc3RhbmNlc30gb2YgY291cnNlU2V0cykge1xuICAgIC8vIEZpbmQgY291cnNlVG9JbXBvcnRcbiAgICBjb25zdCBjb3Vyc2VUb0ltcG9ydDogQ291cnNlVG9JbXBvcnQgPSAoXG4gICAgICBzdWJqZWN0VG9JbXBvcnQuY291cnNlcy5maW5kKGMgPT4gYy5uYW1lID09PSB0ZW1wbGF0ZS5uYW1lKSB8fFxuICAgICAgc3ViamVjdFRvSW1wb3J0LmNvdXJzZXMuZmluZChjID0+IGMuY29kZSA9PT0gdGVtcGxhdGUuY29kZSlcbiAgICApO1xuXG4gICAgLy8gRmluZCBDZW50cmFsIENvbnRlbnQgYW5kIEtub3dsZWRnZSBSZXF1aXJlbWVudHMgdG8gbWlncmF0ZVxuICAgIGNvbnN0IHtjY3NUb01pZ3JhdGUsIGtyc1RvTWlncmF0ZX06IHtcbiAgICAgIGNjc1RvTWlncmF0ZTogTWFwPElELCB7bmV3VGV4dD86IHN0cmluZywgbmV3SWQ/OiBJRCwgb2xkVGV4dD86IHN0cmluZ30+LFxuICAgICAga3JzVG9NaWdyYXRlOiBNYXA8SUQsIHtuZXdUZXh0Pzogc3RyaW5nLCBuZXdJZD86IElELCBvbGRUZXh0Pzogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9PlxuICAgIH0gPSBpZHNUb01pZ3JhdGVQZXJDb3Vyc2UuZmluZCh4ID0+IHguY291cnNlQ29kZSA9PT0gdGVtcGxhdGUuY29kZSk7XG4gICAgXG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBjb3Vyc2UgaW5zdGFuY2VzIChpbnN0YW5jZXMgYWxzbyBjb250YWlucyB0ZW1wbGF0ZXMpXG4gICAgLy8gYW5kIG1pZ3JhdGUgdGhlbS4gVGhpcyB3aWxsIGluY2x1ZGUgY3JlYXRpbmcgbWlzc2luZyBlbnRpdGllcyBpbiB0aGUgREIuXG4gICAgZm9yIChjb25zdCBjb3Vyc2Ugb2YgaW5zdGFuY2VzKSB7XG4gICAgICBtaWdyYXRlQ291cnNlSW5zdGFuY2UoY291cnNlLCBjb3Vyc2VUb0ltcG9ydCwge2Njc1RvTWlncmF0ZSwga3JzVG9NaWdyYXRlfSk7XG4gICAgfVxuICB9XG5cbiAgYXdhaXQgbWlncmF0ZVRhc2tzKCk7XG4gIHJldHVybjtcblxuICBmdW5jdGlvbiBtaWdyYXRlQ291cnNlSW5zdGFuY2UoXG4gICAgY291cnNlOiBDb3Vyc2UsXG4gICAgY291cnNlVG9JbXBvcnQ6IENvdXJzZVRvSW1wb3J0LFxuICAgIGlkc1RvTWlncmF0ZToge1xuICAgICAgY2NzVG9NaWdyYXRlOiBNYXA8SUQsIHtuZXdUZXh0Pzogc3RyaW5nLCBuZXdJZD86IElELCBvbGRUZXh0Pzogc3RyaW5nLCBpc1R5cG9GaXg/OiBib29sZWFufT4sXG4gICAgICBrcnNUb01pZ3JhdGU6IE1hcDxJRCwge25ld1RleHQ/OiBzdHJpbmcsIG5ld0lkPzogSUQsIG9sZFRleHQ/OiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZywgaXNUeXBvRml4PzogYm9vbGVhbn0+XG4gICAgfSlcbiAge1xuICAgIGNvbnN0IHNob3dDaGFuZ2VzID0gIXNob3duQ2hhbmdlcy5oYXMoY291cnNlLm5hbWUpO1xuICAgIHNob3duQ2hhbmdlcy5hZGQoY291cnNlLm5hbWUpO1xuICAgIGFiaWxpdHlJZHNUb01pZ3JhdGUuZm9yRWFjaCgoe25ld0lkLCBvbGRUZXh0fSwgb2xkSWQpID0+IHtcbiAgICAgIC8vIFJlbGluayB0aGUgY291cnNlIGluc3RhbmNlIHdpdGggYWJpbGl0aWVzLiBUaGlzIGNoYW5nZSBkb2VzIG5vdCBuZWVkIHRvIGJlIHZpc2libGUgaW4gR1VJLlxuICAgICAgY2hhbmdlcy5wdXNoKHtcbiAgICAgICAgbXV0YXRpb25zOiBiciA9PiB7XG4gICAgICAgICAgaWYgKG9sZFRleHQpIGJyLnVubGluazIoXCJjb3Vyc2VzXCIsIGNvdXJzZS5pZCwgXCJhYmlsaXRpZXNcIiwgb2xkSWQpO1xuICAgICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJjb3Vyc2VzXCIsIGNvdXJzZS5pZCwgXCJhYmlsaXRpZXNcIiwgbmV3SWQpO1xuICAgICAgICB9XG4gICAgICB9KTsgIFxuICAgIH0pO1xuICAgIGNvdXJzZS5hYmlsaXRpZXNPcmRlciA9IHN1YmplY3RUb0ltcG9ydC5hYmlsaXRpZXMubWFwKGh0bWwgPT4gbmV3QWJpbGl0eVRleHRzLmdldChodG1sKSk7XG5cbiAgICBjb25zdCB7Y2NzVG9NaWdyYXRlLCBrcnNUb01pZ3JhdGV9ID0gaWRzVG9NaWdyYXRlO1xuXG4gICAgLy8gQ2VudHJhbCBDb250ZW50XG4gICAgY2NzVG9NaWdyYXRlLmZvckVhY2goKHtuZXdJZCwgbmV3VGV4dCwgb2xkVGV4dCwgaXNUeXBvRml4fSwgb2xkSWQpID0+IHtcbiAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgIGNoYW5nZTogc2hvd0NoYW5nZXMgJiYgKFxuICAgICAgICAgIG9sZFRleHQgP1xuICAgICAgICAgICAgbmV3VGV4dCA/XG4gICAgICAgICAgICAgIGlzVHlwb0ZpeCA/XG4gICAgICAgICAgICAgICAgYFRyeWNrZmVsc3LDpHR0bmluZyBDZW50cmFsdCBJbm5laMOlbGxgIDpcbiAgICAgICAgICAgICAgICBgVXBwZGF0ZXJhdCBDZW50cmFsdCBJbm5laMOlbGxgIDpcbiAgICAgICAgICAgICAgYEJvcnR0YWdldCBDZW50cmFsdCBJbm5laMOlbGxgIDpcbiAgICAgICAgICAgIGBOeXR0IENlbnRyYWx0IElubmVow6VsbGApLFxuICAgICAgICBjb250ZW50OiBgPGg0PiR7Y291cnNlLm5hbWV9PC9oND48c3RyaWtlPiR7b2xkVGV4dCB8fCAnJ308L3N0cmlrZT48YnIvPiR7bmV3VGV4dCB8fCAnJ31gLFxuICAgICAgICBtdXRhdGlvbnM6IGJyID0+IHtcbiAgICAgICAgICBpZiAobmV3SWQgJiYgY2NzVG9BZGQuaGFzKG5ld0lkKSAmJiAhY3JlYXRlZElkcy5oYXMobmV3SWQpKSB7XG4gICAgICAgICAgICBjb25zdCBjYzogQ2VudHJhbENvbnRlbnQgPSB7XG4gICAgICAgICAgICAgIGlkOiBuZXdJZCxcbiAgICAgICAgICAgICAgbmFtZTogbmV3VGV4dCxcbiAgICAgICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXSxcbiAgICAgICAgICAgICAgZGF0ZVRpbWU6IERhdGUubm93KClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBici5hZGQoXCJjZW50cmFsLWNvbnRlbnRcIiwgY2MpO1xuICAgICAgICAgICAgY3JlYXRlZElkcy5hZGQobmV3SWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob2xkVGV4dCkgYnIudW5saW5rMihcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIG9sZElkKTtcbiAgICAgICAgICBpZiAobmV3SWQpIGJyLmxpbmsyKFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiY2VudHJhbENvbnRlbnRcIiwgbmV3SWQpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pO1xuICAgIGNvdXJzZS5jZW50cmFsQ29udGVudE9yZGVyID0gY291cnNlVG9JbXBvcnQuY2VudHJhbENvbnRlbnQubWFwKCh7aHRtbH0pID0+IG5ld0NDVGV4dHMuZ2V0KGh0bWwpKTtcblxuICAgIC8vIEtub3dsZWRnZSBSZXF1aXJlbWVudHNcbiAgICBrcnNUb01pZ3JhdGUuZm9yRWFjaCgoe25ld0lkLCBuZXdUZXh0LCBncmFkZVN0ZXAsIG9sZFRleHQsIGlzVHlwb0ZpeH0sIG9sZElkKSA9PiB7XG4gICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICBjaGFuZ2U6IHNob3dDaGFuZ2VzICYmIChcbiAgICAgICAgICBvbGRUZXh0ID9cbiAgICAgICAgICAgIG5ld1RleHQgP1xuICAgICAgICAgICAgICBpc1R5cG9GaXggP1xuICAgICAgICAgICAgICAgIGBUcnlja2ZlbHNyw6R0dG5pbmcgS3Vuc2thcHNrcmF2YDpcbiAgICAgICAgICAgICAgICBgVXBwZGF0ZXJhdCBLdW5za2Fwc2tyYXZgIDpcbiAgICAgICAgICAgICAgYEJvcnR0YWdldCBLdW5za2Fwc2tyYXZgIDpcbiAgICAgICAgICAgIGBOeXR0IEt1bnNrYXBza3JhdmBcbiAgICAgICAgKSxcbiAgICAgICAgY29udGVudDogYDxoND4ke2NvdXJzZS5uYW1lfTwvaDQ+PHN0cmlrZT4ke29sZFRleHQgfHwgJyd9PC9zdHJpa2U+PGJyLz4ke25ld1RleHQgfHwgJyd9YCxcbiAgICAgICAgbXV0YXRpb25zOiBiciA9PiB7XG4gICAgICAgICAgaWYgKG5ld0lkICYmIGtyc1RvQWRkLmhhcyhuZXdJZCkgJiYgIWNyZWF0ZWRJZHMuaGFzKG5ld0lkKSkge1xuICAgICAgICAgICAgY29uc3Qga3I6IEtub3dsZWRnZVJlcXVpcmVtZW50ID0ge1xuICAgICAgICAgICAgICBpZDogbmV3SWQsXG4gICAgICAgICAgICAgIG5hbWU6IG5ld1RleHQsXG4gICAgICAgICAgICAgIGdyYWRlU3RlcCxcbiAgICAgICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXSxcbiAgICAgICAgICAgICAgZGF0ZVRpbWU6IERhdGUubm93KClcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQWRkaW5nIEtub3dsZWRnZS1SZXF1aXJlbWVudCAke25ld0lkfTogJHtuZXdUZXh0fWApO1xuICAgICAgICAgICAgYnIuYWRkKFwia25vd2xlZGdlLXJlcXVpcmVtZW50c1wiLCBrcik7XG4gICAgICAgICAgICBjcmVhdGVkSWRzLmFkZChuZXdJZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChvbGRUZXh0KSBici51bmxpbmsyKFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIG9sZElkKTtcbiAgICAgICAgICBpZiAobmV3SWQpIGJyLmxpbmsyKFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIG5ld0lkKTsgIFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIgPVxuICAgICAgY291cnNlVG9JbXBvcnQua25vd2xlZGdlUmVxdWlyZW1lbnRzLm1hcChrciA9PiBuZXdLUlRleHRzLmdldChrci5odG1sKSk7XG5cbiAgICAvLyBVcGRhdGVzIHRoZSBjb3Vyc2UgcHJvcGVydGllcyBjZW50cmFsQ29udGVudE9yZGVyIGFuZCBrbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlclxuICAgIGlmIChhYmlsaXR5SWRzVG9NaWdyYXRlLnNpemUgPiAwIHx8IGNjc1RvTWlncmF0ZS5zaXplID4gMCB8fCBrcnNUb01pZ3JhdGUuc2l6ZSA+IDApIHtcbiAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgIGNoYW5nZTogIWNvdXJzZS5pc1RlbXBsYXRlID8gYFVwcGRhdGVyYWQgS3Vyc2luc3RhbnNgIDogYFVwcGRhdGVyYWQgS3Vyc21hbGxgLFxuICAgICAgICBjb250ZW50OiAhY291cnNlLmlzVGVtcGxhdGUgP1xuICAgICAgICAgIGAke2NvdXJzZS5uYW1lfS4gU2tvbGE6ICR7Y291cnNlLnNjaG9vbCB8fCBcImVqIGFuZ2l2ZW5cIn0uIEJlc2tyaXZuaW5nOiAke2NvdXJzZS5kZXNjcmlwdGlvbiB8fCAnJ31gIDpcbiAgICAgICAgICBgJHtjb3Vyc2UubmFtZX1gLFxuICAgICAgICBtdXRhdGlvbnM6IGJyID0+IGJyLnB1dChcImNvdXJzZXNcIiwgY291cnNlKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIFxuICAvLyBUYXNrczpcbiAgLy8gMS4gQVNZTkMgT1BFUkFUSU9OOiBHbyB0aHJvdWdoIGFsbCB0YXNrcyB0aGF0IGhhcyBlZGdlcyB0byBhbnkgb2YgdGhlIG9sZCBpZHMuXG4gIC8vIDIuIEZvciBlYWNoIGZvdW5kIHRhc2ssIGRvOlxuICAvLyAgICBBOiBJdGVyYXRlIHRhZ3Mgc3RhcnRpbmcgd2l0aCBcImNvdXJzZTpcIi4gUGljayB0aGUgY291cnNlIGNvZGUuXG4gIC8vICAgIEI6IFBvcHVsYXRlIHRoZSBuZXcgcHJvcGVydHkgbWlncmF0aW9uVGFza3M6IHtcbiAgLy8gICAgICAgICBhYmlsaXRpZXM6IHtbbmV3SWQ6IHN0cmluZ106IHtvbGRUZXh0OiBzdHJpbmcsIG9sZElkOiBzdHJpbmcsIGltcG9ydERhdGU6IG51bWJlcn19LCAvLyBCZSBhYmxlIHRvIGNyZWF0ZSBhIGNoYWluIGluIHRoZSBHVUkgIVxuICAvLyAgICAgICAgIGNlbnRyYWxDb250ZW50OiB7W25ld0lkOiBzdHJpbmddOiB7b2xkVGV4dDogc3RyaW5nLCAuLi5cIi4uLn19LFxuICAvLyAgICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50czoge1tuZXdJZDogc3RyaW5nXToge29sZFRleHQ6IHN0cmluZywgLi4uXCIuLi59fSxcbiAgLy8gICAgICAgfVxuICAvLyAgICAgICBPQlMxISBNZXJnZWEgYWJpbGl0aWVzLCBjZW50cmFsQ29uZGVudCBvY2gga25vd2xlZGdlUmVxdWlyZW1lbnRzIG1lZCBldiB0aWRpZ2FyZSB2w6RyZGVuIChzw6UgbWFuIGthbiBpbXBvcnRlcmEgb20gb2NoIG9tIGlnZW4hKVxuICAvLyAgICAgICBPQlMyISBvbGRJZCBrYW4gZsO2cmVrb21tYSBww6UgZmxlcmEgbmV3SWQgb20gdGFzayBhbnbDpG5kcyBhdiBmbGVyYSBrdXJzZXIuIFxuICAvLyAgICBDOiBDcmVhdGUgc2V0cyBmb3IgdW5saW5rcyBhbmQgbGluayBvcGVyYXRpb25zIHBlciB0eXBlLlxuICAvLyAgICBEOiBGb3IgYWxsIGNvdXJzZUNvZGVzIHRoYXQgdGhlIHRhc2sgaXMgdGFnZ2VuIG9uLFxuICAvLyAgICAgICAgICogcmVnaXN0ZXIgY2NzVG9NaWdyYXRlLmtleXMoKSBpbiB0aGUgdW5saW5rIHNldCBvZiBjZW50cmFsIGNvbnRlbnRzXG4gIC8vICAgICAgICAgKiByZWdpc3RlciBjY3NUb01pZ3JhdGUudmFsdWVzKCkgaW4gdGhlIGxpbmsgc2V0IG9mIGNlbnRyYWwgY29udGVudHNcbiAgLy8gICAgICAgICAqIC0tXCItLSBmb3Iga25vd2xlZGdlUmVxdWlyZW1lbnRzXG4gIC8vICAgIEU6IHVubGluayBhbmQgbGluayB3aXRoIHJlZ2FyZHMgdG8gYWJpbGl0eUlkc1RvTWlncmF0ZSAoa2V5cygpIGFuZCB2YWx1ZXMoKSByZXNwZWN0aXZlbHkpLlxuICAvLyAgICBGOiB1bmxpbmsgYW5kIGxpbmsgYWNjb3JkaW5nIHRvIHRoZSBjcmVhdGVkIHNldHMgb2YgbGluayAvIHVubGluayBvcGVyYXRpb25zLlxuICAvLyAgICBOb3RlOiBVbmxpa2UgY291cnNlIGluc3RhbmNlcywgdGhlcmUncyBubyBvcmRlciBwcm9wZXJ0eSB0byB0YWtlIGNhcmUgb2YgaGVyZSFcbiAgLy9cblxuICBhc3luYyBmdW5jdGlvbiBtaWdyYXRlVGFza3MoKSB7XG4gICAgY29uc3Qgb2xkSWRzID0gW1xuICAgICAgLi4uYWJpbGl0eUlkc1RvTWlncmF0ZS5rZXlzKCksXG4gICAgICAuLi5mbGF0dGVuKGlkc1RvTWlncmF0ZVBlckNvdXJzZS5tYXAoYyA9PiBbXG4gICAgICAgIC4uLmMuY2NzVG9NaWdyYXRlLmtleXMoKSxcbiAgICAgICAgLi4uYy5rcnNUb01pZ3JhdGUua2V5cygpXG4gICAgICBdKSlcbiAgICBdLmZpbHRlcihpZCA9PiAhaWQuc3RhcnRzV2l0aCgnZmljdGl2ZU9sZElkJykpO1xuICAgIFxuICAgIGNvbnN0IGltcG9ydERhdGUgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3QgdGFza3MgPSBhd2FpdCBmZXRjaFRhc2tzSW5DaHVua3NXaXRoRWRnZXNUbyhvbGRJZHMsIHtcbiAgICAgIGluY2x1ZGU6IFtcImFiaWxpdGllc1wiLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBcImNlbnRyYWxDb250ZW50XCJdLFxuICAgICAgZmxhZ3M6IFtcImluY2x1ZGVJZHNPbmx5XCJdXG4gICAgfSk7XG5cbiAgICBhc3luYyBmdW5jdGlvbiBmZXRjaFRhc2tzSW5DaHVua3NXaXRoRWRnZXNUbyhpZHM6IHN0cmluZ1tdLCBvcHRpb25zOiBMaXN0T3B0aW9ucyk6IFByb21pc2U8VGFza1tdPiB7XG4gICAgICAvLyBUaGlzIGZ1bmN0aW9uIHNob3VsZCBtYWtlIHdvcmsgYXJvdW5kIHRoZSBjYXNlIHdoZW4gZ2l2ZW4gXCJpZHNcIiBjb250YWlucyB0b28gbWFueSBpdGVtcywgYnlcbiAgICAgIC8vIGRpdmlkaW5nIHRoZSByZXF1ZXN0cyBpbnRvIHNldmVyYWwgYW5kIG1lcmdlIHRoZSByZXN1bHQgdXNpbmcgYSBNYXAuXG4gICAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdOyAvLyBPdGhlcndpc2Ugd2UnbGwgcmVxdWVzdCBldmVyeSB0YXNrIGluIHRoZSBzeXN0ZW0uXG4gICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWFwPElELCBUYXNrPigpO1xuICAgICAgY29uc29sZS5sb2coXCJOdW1iZXIgb2YgaWRzOiBcIiArIGlkcy5sZW5ndGgpO1xuICAgICAgLy9yZXR1cm4gcmVzdWx0LnZhbHVlcygpO1xuICAgICAgcmV0dXJuIGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8VGFzaz4oXCJ0YXNrc1wiLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGhhc0VkZ2VzVG86IGlkc1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLypjb25zdCB0YXNrcyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8VGFzaz4oXCJ0YXNrc1wiLCB7XG4gICAgICBoYXNFZGdlc1RvOiBvbGRJZHMsXG4gICAgICBpbmNsdWRlOiBbXCJhYmlsaXRpZXNcIiwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgXCJjZW50cmFsQ29udGVudFwiXSxcbiAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXVxuICAgIH0pOyovXG5cbiAgICBmb3IgKGNvbnN0IHRhc2sgb2YgdGFza3MpIHtcbiAgICAgIGNvbnN0IG9sZE1UID0gdGFzay5taWdyYXRlZFRleHRzIHx8IHtcbiAgICAgICAgYWJpbGl0aWVzOiB7fSxcbiAgICAgICAgY2VudHJhbENvbnRlbnQ6IHt9LFxuICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IHt9XG4gICAgICB9O1xuICAgICAgdGFzay5taWdyYXRlZFRleHRzID0ge1xuICAgICAgICBhYmlsaXRpZXM6IHt9LFxuICAgICAgICBjZW50cmFsQ29udGVudDoge30sXG4gICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50czoge31cbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IG11dGF0aW9uczogQXJyYXk8KGJyOiBCYXRjaFJ1bm5lcik9PnZvaWQ+ID0gW107XG4gICAgICBjb25zdCBjaGFuZ2VEZXNjcmlwdGlvbnM6IHN0cmluZ1tdID0gW107XG4gICAgICBmb3IgKGNvbnN0IHtpZH0gb2YgdGFzay5hYmlsaXRpZXMpIHtcbiAgICAgICAgY29uc3QgbWlncmF0aW9uSW5mbyA9IGFiaWxpdHlJZHNUb01pZ3JhdGUuZ2V0KGlkKTtcbiAgICAgICAgaWYgKG1pZ3JhdGlvbkluZm8pIHtcbiAgICAgICAgICBjb25zdCB7bmV3SWQsIG5ld1RleHQsIGlzVHlwb0ZpeH0gPSBtaWdyYXRpb25JbmZvO1xuICAgICAgICAgIGxldCB7b2xkVGV4dH0gPSBtaWdyYXRpb25JbmZvO1xuICAgICAgICAgIGxldCBvbGRJZCA9IGlkO1xuICAgICAgICAgIGlmIChvbGRNVC5hYmlsaXRpZXNbaWRdKSB7XG4gICAgICAgICAgICAvLyBJZiBtaWdyYXRpbmcgc3R1ZmYgdGhhdCB3YXMgbmV2ZXIgYWNrbm93bGVkZ2VzIGJ5IGEgdGVhY2hlcixcbiAgICAgICAgICAgIC8vIFdlIHNob3VsZCBwb2ludCBvdXQgdGhlIHZlcnkgb2xkIGlkIGFuZCB0ZXh0IGluc3RlYWQgb2YgdGhlIG5ldmVyLWFja25vd2xlZGdlZCBvbmUuXG4gICAgICAgICAgICBvbGRUZXh0ID0gb2xkTVQuYWJpbGl0aWVzW2lkXS5vbGRUZXh0O1xuICAgICAgICAgICAgb2xkSWQgPSBvbGRNVC5hYmlsaXRpZXNbaWRdLm9sZElkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobmV3SWQgJiYgb2xkVGV4dCAhPT0gbmV3VGV4dCkge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlOiBJZiBvbGRUZXh0ID09PSBuZXdUZXh0LCB0aGVuIHRoaXMgaXMgYSByZWltcG9ydCBuZXcgWE1MIHRoYXQgcmV2ZXJ0cyBiYWNrIHRvIG9yaWdpbiB0ZXh0LiBEb24ndCByZXF1aXJlIGFja25vd2xlZGdlbWVudCBmcm9tIHRlYWNoZXIhXG4gICAgICAgICAgICBpZiAoIWlzVHlwb0ZpeCkge1xuICAgICAgICAgICAgICAvLyBJZiB0aGlzIHdhc24ndCBqdXN0IGEgdHlwbyBmaXggKGNoYW5nZXMgaW4gc3RvcCB3b3JkcywgY2FzaW5nIG9yIHNwZWNpYWwgY2hhcmFjdGVycylcbiAgICAgICAgICAgICAgdGFzay5taWdyYXRlZFRleHRzLmFiaWxpdGllc1tuZXdJZF0gPSB7b2xkSWQsIG9sZFRleHQsIGltcG9ydERhdGV9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBtdXRhdGlvbnMucHVzaChiciA9PiB7XG4gICAgICAgICAgICBici51bmxpbmsyKFwidGFza3NcIiwgdGFzay5pZCwgXCJhYmlsaXRpZXNcIiwgaWQpO1xuICAgICAgICAgICAgaWYgKG5ld0lkKSBici5saW5rMihcInRhc2tzXCIsIHRhc2suaWQsIFwiYWJpbGl0aWVzXCIsIG5ld0lkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjaGFuZ2VEZXNjcmlwdGlvbnMucHVzaChgPHN0cmlrZT4ke29sZFRleHR9PC9zdHJpa2U+YCk7XG4gICAgICAgICAgaWYgKG5ld0lkKSB7XG4gICAgICAgICAgICBjaGFuZ2VEZXNjcmlwdGlvbnMucHVzaChuZXdUZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdGFza0NvdXJzZUNvZGVzID0gbmV3IFNldDxzdHJpbmc+KHRhc2sudGFncyA/IFxuICAgICAgICB0YXNrLnRhZ3MuZmlsdGVyKHQgPT4gdC5zdGFydHNXaXRoKCdjb3Vyc2U6JykpLm1hcCh0ID0+IHQuc3Vic3RyKFwiY291cnNlOlwiLmxlbmd0aCkpIDpcbiAgICAgICAgW10pO1xuXG4gICAgICAvLyBXZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgbGlua2VkSWRzIChmb3IgdGhpcyBwYXJ0aWN1bGFyIHRhc2spIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbjpcbiAgICAgIC8vIExldCdzIHNheSB0aGUgdGFzayB3YXMgcmVmZXJyZWQgdG8gYnkgdHdvIGRpZmZlcmVudCBjb3Vyc2VzIChwb3NzaWJsZSBpbiBvbGQgdmVyc2lvbnMpLFxuICAgICAgLy8gYW5kIGluIG9sZCBDZW50cmFsIENvbnRlbnQsIHRoZSB0d28gY291cnNlcyBkaWQgaGF2ZSBzbGlnaHRseSBkaWZmZXJlbnQgZm9ybXVsYXRpb25zIG9mIGNlbnRyYWwgY29udGVudCxcbiAgICAgIC8vIHNvIHRoZSB0YXNrIHdhcyBtYXBwZWQgdG8gYm90aCBvZiB0aGVtLiBUaGVuLCBpbiBuZXcgWE1MLCB0aGUgc2FtZSBjZW50cmFsIGNvbnRlbnQgd2FzIGZvcm11bGF0ZWRcbiAgICAgIC8vIGluIGEgbmV3IHdheSB0aGF0IGlzIGlkZW50aWNhbCB0aGlzIHRpbWUgYmV0d2VlbiB0aGUgdHdvIGNvdXJzZXMuIFRoZW4gYm90aCBvbGQgSURzIHdpbGwgYmUgcmVwbGFjZWRcbiAgICAgIC8vIGJ5IGEgc2luZ2xlIG5ldyBJRC4gSXQgd291bGQgdGhlbiBiZSB1bm5lc2Nlc3NhcnkgdG8gbGluayB0byB0aGUgbmV3IElEIHR3aWNlLlxuICAgICAgY29uc3QgbGlua2VkSWRzID0gbmV3IFNldDxJRD4oKTtcblxuICAgICAgZm9yIChjb25zdCB7a3JzVG9NaWdyYXRlLCBjY3NUb01pZ3JhdGUsIGNvdXJzZUNvZGV9IG9mIGlkc1RvTWlncmF0ZVBlckNvdXJzZSkge1xuICAgICAgICBpZiAodGFza0NvdXJzZUNvZGVzLnNpemUgPT09IDAgfHwgdGFza0NvdXJzZUNvZGVzLmhhcyhjb3Vyc2VDb2RlKSkge1xuICAgICAgICAgIGZvciAoY29uc3Qge2lkfSBvZiB0YXNrLmNlbnRyYWxDb250ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBtaWdyYXRpb25JbmZvID0gY2NzVG9NaWdyYXRlLmdldChpZCk7XG4gICAgICAgICAgICBpZiAobWlncmF0aW9uSW5mbykge1xuICAgICAgICAgICAgICBsZXQge25ld0lkLCBuZXdUZXh0LCBvbGRUZXh0LCBpc1R5cG9GaXh9ID0gbWlncmF0aW9uSW5mbztcbiAgICAgICAgICAgICAgbGV0IG9sZElkID0gaWQ7XG4gICAgICAgICAgICAgIGlmIChvbGRNVC5jZW50cmFsQ29udGVudFtpZF0pIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBtaWdyYXRpbmcgc3R1ZmYgdGhhdCB3YXMgbmV2ZXIgYWNrbm93bGVkZ2VzIGJ5IGEgdGVhY2hlcixcbiAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQgcG9pbnQgb3V0IHRoZSB2ZXJ5IG9sZCBpZCBhbmQgdGV4dCBpbnN0ZWFkIG9mIHRoZSBuZXZlci1hY2tub3dsZWRnZWQgb25lLlxuICAgICAgICAgICAgICAgIG9sZFRleHQgPSBvbGRNVC5jZW50cmFsQ29udGVudFtpZF0ub2xkVGV4dDtcbiAgICAgICAgICAgICAgICBvbGRJZCA9IG9sZE1ULmNlbnRyYWxDb250ZW50W2lkXS5vbGRJZDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobmV3SWQgJiYgb2xkVGV4dCAhPT0gbmV3VGV4dCkge1xuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZTogSWYgb2xkVGV4dCA9PT0gbmV3VGV4dCwgdGhlbiB0aGlzIGlzIGEgcmVpbXBvcnQgbmV3IFhNTCB0aGF0IHJldmVydHMgYmFjayB0byBvcmlnaW4gdGV4dC4gRG9uJ3QgcmVxdWlyZSBhY2tub3dsZWRnZW1lbnQgZnJvbSB0ZWFjaGVyIVxuICAgICAgICAgICAgICAgIGlmICghaXNUeXBvRml4KSB7XG4gICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIHdhc24ndCBqdXN0IGEgdHlwbyBmaXggKGNoYW5nZXMgaW4gc3RvcCB3b3JkcywgY2FzaW5nIG9yIHNwZWNpYWwgY2hhcmFjdGVycylcbiAgICAgICAgICAgICAgICAgIHRhc2subWlncmF0ZWRUZXh0cy5jZW50cmFsQ29udGVudFtuZXdJZF0gPSB7b2xkSWQsIG9sZFRleHQsIGltcG9ydERhdGV9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoIW5ld0lkIHx8ICFsaW5rZWRJZHMuaGFzKG5ld0lkKSkge1xuICAgICAgICAgICAgICAgIG11dGF0aW9ucy5wdXNoKGJyID0+IHtcbiAgICAgICAgICAgICAgICAgIGJyLnVubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIGlkKTtcbiAgICAgICAgICAgICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIG5ld0lkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXNjcmlwdGlvbnMucHVzaChgPHN0cmlrZT4ke29sZFRleHR9PC9zdHJpa2U+YCk7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0lkKSB7XG4gICAgICAgICAgICAgICAgICBjaGFuZ2VEZXNjcmlwdGlvbnMucHVzaChuZXdUZXh0KTtcbiAgICAgICAgICAgICAgICAgIGxpbmtlZElkcy5hZGQobmV3SWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKGNvbnN0IHtpZH0gb2YgdGFzay5rbm93bGVkZ2VSZXF1aXJlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pZ3JhdGlvbkluZm8gPSBrcnNUb01pZ3JhdGUuZ2V0KGlkKTtcbiAgICAgICAgICAgIGlmIChtaWdyYXRpb25JbmZvKSB7XG4gICAgICAgICAgICAgIGxldCB7bmV3SWQsIG5ld1RleHQsIG9sZFRleHQsIGlzVHlwb0ZpeH0gPSBtaWdyYXRpb25JbmZvO1xuICAgICAgICAgICAgICBsZXQgb2xkSWQgPSBpZDtcbiAgICAgICAgICAgICAgaWYgKG9sZE1ULmtub3dsZWRnZVJlcXVpcmVtZW50c1tpZF0pIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBtaWdyYXRpbmcgc3R1ZmYgdGhhdCB3YXMgbmV2ZXIgYWNrbm93bGVkZ2VzIGJ5IGEgdGVhY2hlcixcbiAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQgcG9pbnQgb3V0IHRoZSB2ZXJ5IG9sZCBpZCBhbmQgdGV4dCBpbnN0ZWFkIG9mIHRoZSBuZXZlci1hY2tub3dsZWRnZWQgb25lLlxuICAgICAgICAgICAgICAgIG9sZFRleHQgPSBvbGRNVC5rbm93bGVkZ2VSZXF1aXJlbWVudHNbaWRdLm9sZFRleHQ7XG4gICAgICAgICAgICAgICAgb2xkSWQgPSBvbGRNVC5rbm93bGVkZ2VSZXF1aXJlbWVudHNbaWRdLm9sZElkO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChuZXdJZCAmJiBvbGRUZXh0ICE9PSBuZXdUZXh0KSB7XG4gICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlOiBJZiBvbGRUZXh0ID09PSBuZXdUZXh0LCB0aGVuIHRoaXMgaXMgYSByZWltcG9ydCBuZXcgWE1MIHRoYXQgcmV2ZXJ0cyBiYWNrIHRvIG9yaWdpbiB0ZXh0LiBEb24ndCByZXF1aXJlIGFja25vd2xlZGdlbWVudCBmcm9tIHRlYWNoZXIhXG4gICAgICAgICAgICAgICAgaWYgKCFpc1R5cG9GaXgpIHtcbiAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgd2Fzbid0IGp1c3QgYSB0eXBvIGZpeCAoY2hhbmdlcyBpbiBzdG9wIHdvcmRzLCBjYXNpbmcgb3Igc3BlY2lhbCBjaGFyYWN0ZXJzKVxuICAgICAgICAgICAgICAgICAgdGFzay5taWdyYXRlZFRleHRzLmtub3dsZWRnZVJlcXVpcmVtZW50c1tuZXdJZF0gPSB7b2xkSWQsIG9sZFRleHQsIGltcG9ydERhdGV9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghbmV3SWQgfHwgIWxpbmtlZElkcy5oYXMobmV3SWQpKSB7XG4gICAgICAgICAgICAgICAgbXV0YXRpb25zLnB1c2goYnIgPT4ge1xuICAgICAgICAgICAgICAgICAgYnIudW5saW5rMihcInRhc2tzXCIsIHRhc2suaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIGlkKTtcbiAgICAgICAgICAgICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBuZXdJZCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2goYDxzdHJpa2U+JHtvbGRUZXh0fTwvc3RyaWtlPmApO1xuICAgICAgICAgICAgICAgIGlmIChuZXdJZCkge1xuICAgICAgICAgICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2gobmV3VGV4dCk7XG4gICAgICAgICAgICAgICAgICBsaW5rZWRJZHMuYWRkKG5ld0lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hhbmdlcy5wdXNoKHtcbiAgICAgICAgY2hhbmdlOiBgTWlncmVyYWQgVXBwZ2lmdGAsXG4gICAgICAgIGNvbnRlbnQ6IGA8aDQ+JHt0YXNrLm5hbWV9ICR7dGFzay5zY2hvb2wgPyBgKCR7dGFzay5zY2hvb2x9KSBgIDogJyhza29sYSBlaiBhbmdpdmVuKSd9PC9oND5cbiAgICAgICAgICA8cD5LdXJza29kOiAke1suLi50YXNrQ291cnNlQ29kZXNdLmpvaW4oJywnKX08L3A+XG4gICAgICAgICAgJHtjaGFuZ2VEZXNjcmlwdGlvbnMubWFwKHR4dCA9PiBgPHA+JHt0eHR9PC9wPmApLmpvaW4oJycpfWAsXG4gICAgICAgIG11dGF0aW9uczogYnIgPT4ge1xuICAgICAgICAgIGJyLnB1dChcInRhc2tzXCIsIHRhc2spO1xuICAgICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKG0gPT4gbShicikpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvLyBUSEUgUkVTVUxUIFdJTEwgQkU6XG4gIC8vICBGdW5jdGlvbiBwb3B1bGF0ZXMgYSBjb21wbGV0ZSBzZXQgb2YgQ2hhbmdlcyB0byBkaXNwbGF5IHRvIHVzZXIuXG4gIC8vICBJZiB1c2VyIGNsaWNrcyBcImltcG9ydFwiLCB0aGVzZSBjaGFuZ2VzIHdpbGwgYmUgcGVyZm9ybWVkLlxuXG4gIFxuICAvLyBOZXh0IHRoaW5nIHdpbGwgYmUgdG8gbWFrZSB0aGlzIHZpc2libGUgaW4gR1VJOlxuICAvLyAgU2hvdyBPcGVuQ2xvc2VCb3ggd2l0aCB3YXJuaW5nIGJlZm9yZSBcIklubMOkbW5pbmdzdXBwZ2lmdFwiIGluIGNhc2UgdGhlcmUgYXJlIG1pZ3JhdGlvblRhc2tzLlxuICAvLyAgTGlzdCBrbm93bGVkZ2UgcmVxdWlyZW1lbnRzIEEsIEtSIEMsIEtSIEUsIGNlbnRyYWwgY29udGVudHMgYW5kIGFiaWxpdGllcyByZXNwZWN0aXZlbHkgaW4gdG90YWxseSBtYXggNSB0YWJsZXMuXG4gIC8vICBTYW1lIEdVSSBhcyBrbm93bGVkZ2VSZXF1aXJlbWVudCBtYXRyaXggKGdyZWVuIGhlYWRlcikgcGVyIHRhYmxlLlxuICAvLyAgSGVhZGVyczogXCJVcnNwcnVuZ2xpZyBmb3JtdWxlcmluZ1wiLCBcIlNrb2x2ZXJrZXRzIG55YSBmb3JtdWxlcmluZ1wiLCBcIlTDpGNrZXIgdXBwZ2lmdGVuIGRlbiBueWEgZm9ybXVsZXJpbmdlbj9cIlxuICAvLyAgRm9yIGVhY2ggcm93LCBzaG93IHN0cmlrZSB0ZXh0ICsgbmV3IHRleHQgd2l0aCBncmVlbiBiYWNrZ3JvdW5kLiBUaGVuIEltcG9ydCBEYXRlLiBUaGVuIFwiSmEgLyBOZWpcIi5cbiAgLy8gIFRyeWNrZXIgbWFuIEpBIGVsbGVyIG5laiBzw6UgdGFzIHJhZGVuIGJvcnQuXG4gIC8vICBUcnlja2VyIG1hbiBOZWogc8OlIHRhcyDDpHZlbiBrb3BwbGluZ2VuIGJvcnQgb2NoIGt1cnNlciBzb20gYW52w6RuZGVyIHVwcGdpZnRlbiBrYW4gcMOldmVya2FzLlxuICAvL1xuICAvLyBOw6RzdGEgc2FrIGF0dCBnw7ZyYTogUGlubmEvIHZpc2EgYmVyw7ZyZGEgdXBwZ2lmdGVyIG1lZCBueSBmw6RyZyBlbGxlciBpa29uLlxuICAvLyBPY2tzw6UsIGjDtmdzdCB1cHAgcMOlIGt1cnMtc2lkYW4gKGt1cnNieWdnKTogVmlzYSBzYW1tYSB2YXJuaW5nc3RyaWFuZ2VsIE9wZW5DbG9zZUJveCBvY2ggbGlzdGFcbiAgLy8gw6RuZHJhZGUgZm9ybXVsZXJpbmdhciArIGJlcsO2cmRhIHVwcGdpZnRlci4gT20gbWFuIGludGUgw6RyIHJlZGlnZXJpbmdzYmVow7ZyaWcgYXYgZW4gdXBwZ2lmdCBiw7ZyXG4gIC8vIG1hbiBrb250YWt0YSB1cHBnaWZ0ZW5zIMOkZ2FyZSBmw7ZyIGF0dCBncmFuc2thIG1pZ3JlcmluZ2VuLlxufVxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgU3ViamVjdCwgQ291cnNlLCBBYmlsaXR5LCBLbm93bGVkZ2VSZXF1aXJlbWVudCwgQ2VudHJhbENvbnRlbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBTdWJqZWN0VG9JbXBvcnQgfSBmcm9tICcuLi9zdWJqZWN0LXRvLWltcG9ydCc7XG5pbXBvcnQgeyBDaGFuZ2UgfSBmcm9tICcuL2NoYW5nZSc7XG5pbXBvcnQgeyBtaWdyYXRlT3JkZXJMaXN0c09mQ291cnNlSW5zdGFuY2VzLCBtaWdyYXRlQWJpbGl0aWVzT3JkZXJPblN1YmplY3QgfSBmcm9tICcuL21pZ3JhdGlvbnMnO1xuaW1wb3J0IHsgbWlncmF0ZVN1YmplY3QgfSBmcm9tICcuL21pZ3JhdGUtc3ViamVjdCc7XG5pbXBvcnQgeyBsb2FkQ291cnNlIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgQ291cnNlU2V0IH0gZnJvbSAnLi9jb3Vyc2Utc2V0JztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRpZmZYbWxXaXRoRGF0YWJhc2UoZXhpc3RpbmdTdWJqZWN0OiBTdWJqZWN0LCBzdWJqZWN0VG9JbXBvcnQ6IFN1YmplY3RUb0ltcG9ydCwgY2hhbmdlczogQ2hhbmdlW10pIHtcbiAgLy8gRXhwYW5kIGdyYXBocyBvZiBleGlzdGluZyBTdWJqZWN0XG4gIGV4aXN0aW5nU3ViamVjdCA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmdldCgnc3ViamVjdHMnLCBleGlzdGluZ1N1YmplY3QuaWQsIHsgaW5jbHVkZTogW1wiY291cnNlVGVtcGxhdGVzXCIsIFwiYWJpbGl0aWVzXCJdIH0pO1xuICAvLyBMYXppbHkgbG9hZCBhbGwgY2VudHJhbCBjb250ZW50cyBhbmQga25vd2xlZGdlUmVxdWlyZW1lbnRzIG9uXG4gIC8vIGVhY2ggY291cnNlIHRlbXBsYXRlXG4gIGNvbnN0IGV4cGFuZGVkQ291cnNlVGVtcGxhdGVzID0gYXdhaXQgUHJvbWlzZS5hbGwoZXhpc3RpbmdTdWJqZWN0LmNvdXJzZVRlbXBsYXRlcy5tYXAoY3QgPT4gbG9hZENvdXJzZShjdC5pZCwge1xuICAgIGluY2x1ZGU6IFtcbiAgICAgICdjZW50cmFsQ29udGVudCcsXG4gICAgICAna25vd2xlZGdlUmVxdWlyZW1lbnRzJ1xuICAgIF1cbiAgfSkpKTtcblxuICBjb25zb2xlLmxvZyhgU3ViamVjdDogJHtleGlzdGluZ1N1YmplY3QubmFtZX0uIENvdXJzZXM6ICR7ZXhwYW5kZWRDb3Vyc2VUZW1wbGF0ZXMubWFwKCh7bmFtZX0pID0+IG5hbWUpfWApO1xuXG4gIGNvbnN0IGNvdXJzZVNldHM6IENvdXJzZVNldFtdID0gYXdhaXQgUHJvbWlzZS5hbGwoZXhwYW5kZWRDb3Vyc2VUZW1wbGF0ZXMubWFwIChhc3luYyBjb3Vyc2VUZW1wbGF0ZSA9PiAoe1xuICAgIHRlbXBsYXRlOiBjb3Vyc2VUZW1wbGF0ZSxcbiAgICBpbnN0YW5jZXM6IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8Q291cnNlPihcImNvdXJzZXNcIiwgeyBuYW1lOiBjb3Vyc2VUZW1wbGF0ZS5uYW1lLCBpbmNsdWRlOiBbJ2FiaWxpdGllcyddLCBmbGFnczogWydpbmNsdWRlSWRzT25seSddIH0pXG4gIH0pKSk7XG5cbiAgLyppZiAoZXhwYW5kZWRDb3Vyc2VUZW1wbGF0ZXMuc29tZSAoY291cnNlID0+ICFjb3Vyc2UuY2VudHJhbENvbnRlbnRPcmRlciB8fCAhY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyIHx8ICFjb3Vyc2UuYWJpbGl0aWVzT3JkZXIpKSB7XG4gICAgbWlncmF0ZU9yZGVyTGlzdHNPZkNvdXJzZUluc3RhbmNlcyhjb3Vyc2VTZXRzLCBzdWJqZWN0VG9JbXBvcnQsIGNoYW5nZXMpO1xuICAgIC8vIEluIGZ1dHVyZSwgYXMgYWJpbGl0aWVzIG1heSBiZSBhZGRlZCBvciByZW1vdmVkLCB3ZSB3aWxsIGhhdmUgdG8gbWFpbnRhaW4gdGhlIG9yZGVyIG9mIGFiaWxpdGllcyBvbiB0aGUgY291cnNlIGluc3RhbmNlcyxcbiAgICAvLyB0aGUgc2FtZSB3YXkgd2UgZG8gaXQgd2l0aCBjZW50cmFsIGNvbnRlbnQgYW5kIGtub3dsZWRnZSByZXF1aXJlbWVudHMuIFRPRE8gcmVzcGVjdCBhYmlsaXRpZXMgb3JkZXIgb24gZXZlcnkgcGxhY2UgYWJpbGl0aWVzIGFyZSBlbnVtZXJhdGVkLFxuICAgIC8vIHN1Y2ggYXMgb24gY291cnNlIHZpZXdlciwgY291cnNlIGJ1aWxkZXIsIGV0Yy5cbiAgICBtaWdyYXRlQWJpbGl0aWVzT3JkZXJPblN1YmplY3QoZXhpc3RpbmdTdWJqZWN0LCBjb3Vyc2VTZXRzLCBjaGFuZ2VzKTtcbiAgfSBlbHNlIHsqL1xuICAgIGF3YWl0IG1pZ3JhdGVTdWJqZWN0KGV4aXN0aW5nU3ViamVjdCwgY291cnNlU2V0cywgc3ViamVjdFRvSW1wb3J0LCBjaGFuZ2VzKTtcbiAgLy99XG59XG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBTa29sdmVya2V0U3ViamVjdCwgU2tvbHZlcmtldENvdXJzZSB9IGZyb20gJy4vc2tvbHZlcmtldC1zdWJqZWN0JztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBTdWJqZWN0LCBDb3Vyc2UsIEFiaWxpdHksIEtub3dsZWRnZVJlcXVpcmVtZW50LCBDZW50cmFsQ29udGVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IE11dGF0aW9uUmVxdWVzdCwgQmF0Y2hSdW5uZXIsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgeyBDaGFuZ2UgfSBmcm9tICcuL2RpZmYvY2hhbmdlJztcbmltcG9ydCB7IFN1YmplY3RUb0ltcG9ydCwgQ291cnNlVG9JbXBvcnQgfSBmcm9tICcuL3N1YmplY3QtdG8taW1wb3J0JztcbmltcG9ydCB7IGRpZmZYbWxXaXRoRGF0YWJhc2UgfSBmcm9tICcuL2RpZmYvZGlmZi14bWwtd2l0aC1kYXRhYmFzZSc7XG5pbXBvcnQgeyBsb2FkQ291cnNlIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBvbkNhbmNlbDogKCkgPT4gdm9pZDtcbiAgb25JbXBvcnRTdWNjZXNzOiAoc3ViamVjdDogc3RyaW5nKSA9PiB2b2lkO1xuICBzdWJqZWN0OiBTa29sdmVya2V0U3ViamVjdDtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgc2hvd0Z1bGxUZXh0OiBib29sZWFuO1xuICBjaGFuZ2VzOiBDaGFuZ2VbXTtcbiAgc3ViamVjdFRvSW1wb3J0PzogU3ViamVjdFRvSW1wb3J0O1xuICBpc1dvcmtpbmc6IGJvb2xlYW47XG4gIGlzSW1wb3J0aW5nOiBib29sZWFuO1xuICBlcnJvcj86IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFVwbG9hZGVkU3ViamVjdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgcHVycG9zZUVsZW06IEhUTUxFbGVtZW50O1xuICBjb3Vyc2VzRWxlbXM6IHsgW2NvdXJzZUNvZGU6IHN0cmluZ106IHsgY291cnNlOiBTa29sdmVya2V0Q291cnNlLCBlbGVtOiBIVE1MRWxlbWVudCB9IH07XG4gIGNlbnRyYWxDb250ZW50RWxlbXM6IEhUTUxFbGVtZW50W107XG4gIGtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXM6IEhUTUxFbGVtZW50W107XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuY291cnNlc0VsZW1zID0ge307XG4gICAgdGhpcy5jZW50cmFsQ29udGVudEVsZW1zID0gW107XG4gICAgdGhpcy5rbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zID0gW107XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNob3dGdWxsVGV4dDogZmFsc2UsXG4gICAgICBjaGFuZ2VzOiBbXSxcbiAgICAgIGlzV29ya2luZzogdHJ1ZSxcbiAgICAgIGlzSW1wb3J0aW5nOiBmYWxzZVxuICAgIH07XG4gIH1cblxuICBhc3luYyBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmFkZENsYXNzZXNGb3JDaGVycnlQaWNrZWRFbGVtZW50cygpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7Y2hhbmdlcywgc3ViamVjdFRvSW1wb3J0fSA9IGF3YWl0IHRoaXMuZGlmZldpdGhFeGlzdGluZygpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNoYW5nZXMsIHN1YmplY3RUb0ltcG9ydCB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yOiAnJytlcnJvciB9KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzV29ya2luZzogZmFsc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgYWRkQ2xhc3Nlc0ZvckNoZXJyeVBpY2tlZEVsZW1lbnRzKCkge1xuICAgIGNvbnN0IGFiaWxpdGllcyA9ICQodGhpcy5wdXJwb3NlRWxlbSkuZmluZCgnbGknKS5maXJzdCgpLnBhcmVudCgpLmNoaWxkcmVuKCdsaScpO1xuICAgIGFiaWxpdGllcy5hZGRDbGFzcygnYWJpbGl0eScpO1xuICAgIGNvbnN0IGNlbnRyYWxDb250ZW50cyA9ICQodGhpcy5jZW50cmFsQ29udGVudEVsZW1zKS5maW5kKCdsaScpO1xuICAgIGNlbnRyYWxDb250ZW50cy5hZGRDbGFzcygnY2VudHJhbC1jb250ZW50Jyk7XG4gICAgY29uc3Qga25vd2xlZGdlUmVxdWlyZW1lbnRzID0gJCh0aGlzLmtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMpLmZpbmQoJ3AnKTtcbiAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHMuYWRkQ2xhc3MoJ2tub3dsZWRnZS1yZXF1aXJlbWVudCcpO1xuICAgIGNvbnN0IGFsbCA9ICQoW2FiaWxpdGllcywgY2VudHJhbENvbnRlbnRzLCBrbm93bGVkZ2VSZXF1aXJlbWVudHNdKTtcbiAgICBhbGwuYWRkQ2xhc3MoJ21hcmtlZC1hcmVhJyk7XG4gIH1cblxuICBjaGVycnlQaWNrRGF0YSgpOiBTdWJqZWN0VG9JbXBvcnQge1xuICAgIC8vXG4gICAgLy8gUmVhZHMgZWxlbWVudHMgKHRhZ2dlZCBieSBjbGFzc2VzIGluIGFkZENsYXNzZXNGb3JDaGVycnlQaWNrZWRFbGVtZW50cygpKSBhbmQgY29udmVydHMgdGhlaXIgaW5uZXIgSFRNTCB0byB0aGUgY29ycmVzcG9uZGluZ1xuICAgIC8vIG1vZGVsIFN1YmplY3RUb0ltcG9ydC4gTm90ZSB0aGF0IGlmIHdlIG5lZWQgdG8gYWRqdXN0IGhvdyB0byBwaWNrIHRoZSByaWdodCBMSSBvciBQIGVsZW1lbnRzLCB3ZVxuICAgIC8vIHdpbGwgb25seSBuZWVkIHRvIGNoYW5nZSB0aGUgY29kZSBpbiBhZGRDbGFzc2VzRm9yQ2hlcnJ5UGlja2VkRWxlbWVudHMoKSwgbm90IHRoaXMgY29kZS5cbiAgICAvL1xuICAgIGNvbnN0IHNrb2xTdWJqZWN0ID0gdGhpcy5wcm9wcy5zdWJqZWN0O1xuICAgIGNvbnN0IGFiaWxpdGllc0xpcyA9IEFycmF5LmZyb20oJCh0aGlzLnB1cnBvc2VFbGVtKS5maW5kKCdsaScpLmZpcnN0KCkucGFyZW50KCkuY2hpbGRyZW4oJ2xpJykpO1xuICAgIGNvbnN0IGFiaWxpdGllcyA9IGFiaWxpdGllc0xpcy5tYXAoKGEsIGkpID0+IGAke2kgKyAxfS4gJHskKGEpLmh0bWwoKX1gLnRyaW0oKSkuZmlsdGVyKGh0bWwgPT4gISFodG1sKTtcblxuICAgIGNvbnN0IHJlc3VsdDogU3ViamVjdFRvSW1wb3J0ID0ge1xuICAgICAgbmFtZTogc2tvbFN1YmplY3QubmFtZSxcbiAgICAgIGNvZGU6IHNrb2xTdWJqZWN0LmNvZGUsXG4gICAgICBzY2hvb2xUeXBlOiBza29sU3ViamVjdC5zY2hvb2xUeXBlLFxuICAgICAgYWJpbGl0aWVzLFxuICAgICAgY291cnNlczogT2JqZWN0LmtleXModGhpcy5jb3Vyc2VzRWxlbXMpXG4gICAgICAgIC5tYXAoY291cnNlQ29kZSA9PiB0aGlzLmNvdXJzZXNFbGVtc1tjb3Vyc2VDb2RlXSlcbiAgICAgICAgLm1hcDxDb3Vyc2VUb0ltcG9ydD4oKHsgY291cnNlLCBlbGVtIH0pID0+ICh7XG4gICAgICAgICAgbmFtZTogY291cnNlLm5hbWUsXG4gICAgICAgICAgeWVhcjogY291cnNlLnllYXIsXG4gICAgICAgICAgY29kZTogY291cnNlLmNvZGUsXG4gICAgICAgICAgcG9pbnRzOiBjb3Vyc2UucG9pbnRzLFxuICAgICAgICAgIGNlbnRyYWxDb250ZW50OiBBcnJheS5mcm9tKCQoZWxlbSkuZmluZCgnLmNlbnRyYWwtY29udGVudCcpKS5tYXAoYyA9PiAoe1xuICAgICAgICAgICAgaHRtbDogJChjKS5odG1sKCkudHJpbSgpIGFzIHN0cmluZyxcbiAgICAgICAgICAgIGdyb3VwOiAkKGMpLnBhcmVudCgndWwnKS5wcmV2KCdoNCcpLnRleHQoKS50cmltKClcbiAgICAgICAgICB9KSkuZmlsdGVyKCh7aHRtbH0pID0+ICEhaHRtbCksXG4gICAgICAgICAga25vd2xlZGdlUmVxdWlyZW1lbnRzOlxuICAgICAgICAgICAgQXJyYXkuZnJvbSgkKGVsZW0pLmZpbmQoJy5ncmFkZS1zdGVwLW5vbmUgLmtub3dsZWRnZS1yZXF1aXJlbWVudCcpKS5tYXAociA9PiAkKHIpLmh0bWwoKS50cmltKCkpXG4gICAgICAgICAgICAgIC5maWx0ZXIoaHRtbCA9PiAhIWh0bWwpXG4gICAgICAgICAgICAgIC5tYXAoaHRtbCA9PiAoe2dyYWRlU3RlcDogbnVsbCwgaHRtbCB9KSlcbiAgICAgICAgICAgICAgLmNvbmNhdChcbiAgICAgICAgICAgICAgICBBcnJheS5mcm9tKCQoZWxlbSkuZmluZCgnLmdyYWRlLXN0ZXAtRSAua25vd2xlZGdlLXJlcXVpcmVtZW50JykpLm1hcChyID0+ICQocikuaHRtbCgpLnRyaW0oKSlcbiAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaHRtbCA9PiAhIWh0bWwpXG4gICAgICAgICAgICAgICAgICAubWFwKGh0bWwgPT4gKHsgZ3JhZGVTdGVwOiBcIkVcIiwgaHRtbCB9KSlcbiAgICAgICAgICAgICAgICAgIC5jb25jYXQoXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20oJChlbGVtKS5maW5kKCcuZ3JhZGUtc3RlcC1DIC5rbm93bGVkZ2UtcmVxdWlyZW1lbnQnKSkubWFwKHIgPT4gJChyKS5odG1sKCkudHJpbSgpKVxuICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaHRtbCA9PiAhIWh0bWwpXG4gICAgICAgICAgICAgICAgICAgICAgLm1hcChodG1sID0+ICh7IGdyYWRlU3RlcDogXCJDXCIsIGh0bWwgfSkpKVxuICAgICAgICAgICAgICAgICAgICAgIC5jb25jYXQoXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKCQoZWxlbSkuZmluZCgnLmdyYWRlLXN0ZXAtQSAua25vd2xlZGdlLXJlcXVpcmVtZW50JykpLm1hcChyID0+ICQocikuaHRtbCgpLnRyaW0oKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihodG1sID0+ICEhaHRtbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChodG1sID0+ICh7IGdyYWRlU3RlcDogXCJBXCIsIGh0bWwgfSkpKSlcbiAgICAgICAgICAgICAgICAgICAgfSkpXG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgYXN5bmMgZGlmZldpdGhFeGlzdGluZygpOiBQcm9taXNlPHtjaGFuZ2VzOiBDaGFuZ2VbXSwgc3ViamVjdFRvSW1wb3J0OiBTdWJqZWN0VG9JbXBvcnR9PiB7XG4gICAgY29uc3Qgc3ViamVjdFRvSW1wb3J0ID0gdGhpcy5jaGVycnlQaWNrRGF0YSgpO1xuICAgIGxldCBjaGFuZ2VzOiBDaGFuZ2VbXSA9IFtdO1xuICAgIC8vIEZpbmQgZXhpc3RpbmcgU3ViamVjdFxuICAgIGNvbnN0IGV4aXN0aW5nU3ViamVjdHMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFN1YmplY3Q+KFwic3ViamVjdHNcIik7XG4gICAgbGV0IGV4aXN0aW5nU3ViamVjdCA9IGV4aXN0aW5nU3ViamVjdHMuZmlsdGVyKHMgPT4gcy5jb2RlID09PSB0aGlzLnByb3BzLnN1YmplY3QuY29kZSlbMF07XG4gICAgbGV0IGNlbnRyYWxDb250ZW50ID0gW10gYXMgQ2VudHJhbENvbnRlbnRbXSxcbiAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50cyA9IFtdIGFzIEtub3dsZWRnZVJlcXVpcmVtZW50W107XG5cbiAgICBsZXQgY3JlYXRlVGltZSA9IERhdGUubm93KCk7XG4gICAgZnVuY3Rpb24gY3QoKSB7XG4gICAgICBjb25zdCBydiA9IGNyZWF0ZVRpbWU7XG4gICAgICBjcmVhdGVUaW1lICs9IDI7XG4gICAgICByZXR1cm4gcnY7XG4gICAgfVxuXG4gICAgaWYgKGV4aXN0aW5nU3ViamVjdCkge1xuICAgICAgLy8gSW5jbHVkZSBhYmlsaXRpZXMgYW5kIHN0YW5kYXJkQ291cnNlcyB3aXRoIHRoZSBmb3VuZCBTdWJqZWN0OlxuICAgICAgYXdhaXQgZGlmZlhtbFdpdGhEYXRhYmFzZShleGlzdGluZ1N1YmplY3QsIHN1YmplY3RUb0ltcG9ydCwgY2hhbmdlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFN1YmplY3Qgbm90IGltcG9ydGVkIGJlZm9yZS4gQWRkIGl0IVxuICAgICAgY29uc3QgbmV3U3ViamVjdDogU3ViamVjdCA9IGV4aXN0aW5nU3ViamVjdCA9IHtcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgc2Nob29sVHlwZTogc3ViamVjdFRvSW1wb3J0LnNjaG9vbFR5cGUsXG4gICAgICAgIHRhZ3M6IFtcInNjaG9vbFR5cGU6XCIgKyBzdWJqZWN0VG9JbXBvcnQuc2Nob29sVHlwZV0sXG4gICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl0sXG4gICAgICAgIGNvZGU6IHN1YmplY3RUb0ltcG9ydC5jb2RlLFxuICAgICAgICBuYW1lOiBzdWJqZWN0VG9JbXBvcnQubmFtZSxcbiAgICAgICAgYWJpbGl0aWVzT3JkZXI6IFtdLCAvLyBVcGRhdGUgbGF0ZXIgb24hXG4gICAgICAgIHB1Ymxpc2hhYmxlOiBmYWxzZSxcbiAgICAgICAgZGF0ZVRpbWU6IGN0KClcbiAgICAgIH07XG4gICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICBjaGFuZ2U6IFwiTnl0dCDDpG1uZVwiLFxuICAgICAgICBjb250ZW50OiBgJHtzdWJqZWN0VG9JbXBvcnQubmFtZX0gKCR7c3ViamVjdFRvSW1wb3J0LmNvZGV9KWAsXG4gICAgICAgIG11dGF0aW9uczogciA9PiByLmFkZChcInN1YmplY3RzXCIsIG5ld1N1YmplY3QpXG4gICAgICB9KTtcblxuICAgICAgY29uc3Qgc3ViamVjdEFiaWxpdGllcyA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBhIG9mIHN1YmplY3RUb0ltcG9ydC5hYmlsaXRpZXMpIHtcbiAgICAgICAgY29uc3QgbmV3QWJpbGl0eTogQWJpbGl0eSA9IHtcbiAgICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICAgIG5hbWU6IGEsXG4gICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXSxcbiAgICAgICAgICBkYXRlVGltZTogY3QoKVxuICAgICAgICB9O1xuXG4gICAgICAgIHN1YmplY3RBYmlsaXRpZXMucHVzaChuZXdBYmlsaXR5KTsgLy8gVG8gcmVmZXIgZnJvbSBpbiBjb3Vyc2VzIGxhdGVyIG9uIVxuXG4gICAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgY2hhbmdlOiBcIk55IGbDtnJtw6VnYVwiLFxuICAgICAgICAgIGNvbnRlbnQ6IGEsXG4gICAgICAgICAgbXV0YXRpb25zOiByID0+IHtcbiAgICAgICAgICAgIHIuYWRkKFwiYWJpbGl0aWVzXCIsIG5ld0FiaWxpdHkpO1xuICAgICAgICAgICAgci5saW5rKFwic3ViamVjdHNcIiwgbmV3U3ViamVjdC5pZCwgXCJhYmlsaXRpZXNcIiwgbmV3QWJpbGl0eS5pZCwgXCJhYmlsaXRpZXNcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gVXBkYXRlIG5vdyB3aGVuIHdlIGhhdmUgYWJpbGl0aWVzIG9yZGVyOlxuICAgICAgbmV3U3ViamVjdC5hYmlsaXRpZXNPcmRlciA9IHN1YmplY3RBYmlsaXRpZXMubWFwKCh7aWR9KSA9PiBpZCk7XG5cbiAgICAgIGZvciAobGV0IGMgb2Ygc3ViamVjdFRvSW1wb3J0LmNvdXJzZXMpIHtcbiAgICAgICAgY29uc3QgbmV3Q291cnNlOiBDb3Vyc2UgPSB7XG4gICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgICBzdWJqZWN0Q29kZTogbmV3U3ViamVjdC5jb2RlLFxuICAgICAgICAgIHNjaG9vbFR5cGU6IG5ld1N1YmplY3Quc2Nob29sVHlwZSxcbiAgICAgICAgICB0YWdzOiBbXG4gICAgICAgICAgICBcInN1YjpcIiArIG5ld1N1YmplY3QuY29kZSxcbiAgICAgICAgICAgIFwiY291cnNlOlwiICsgYy5jb2RlLFxuICAgICAgICAgICAgXCJzY2hvb2xUeXBlOlwiICsgbmV3U3ViamVjdC5zY2hvb2xUeXBlXG4gICAgICAgICAgXSxcbiAgICAgICAgICBkYXRlVGltZTogY3QoKSxcbiAgICAgICAgICBpc1RlbXBsYXRlOiB0cnVlLFxuICAgICAgICAgIGFjbDogW1wicm9sZTpFTVBMT1lFRTpSXCJdLCAvLyBTdGFuZGFyZGt1cnNlciBlbmRhc3Qgc3lubGlnYSBmw7ZyIGzDpHJhcmVcbiAgICAgICAgICBuYW1lOiBjLm5hbWUsXG4gICAgICAgICAgY29kZTogYy5jb2RlLFxuICAgICAgICAgIHBvaW50czogYy5wb2ludHMsXG4gICAgICAgICAgbW9kdWxlczogW10sXG4gICAgICAgICAgc3ViamVjdElkOiBuZXdTdWJqZWN0LmlkLFxuICAgICAgICAgIHJlc291cmNlczogW10sXG4gICAgICAgICAgY3JlYXRlZEJ5OiB7IG5hbWU6IGVudi5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSwgdXJsOiBcIm1haWx0bzpcIiArIGVudi5jdXJyZW50VXNlci5tYWlsIH0sXG4gICAgICAgICAgY3JlYXRlZERhdGU6IERhdGUubm93KCksXG4gICAgICAgICAga25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXI6IFtdLFxuICAgICAgICAgIGNlbnRyYWxDb250ZW50T3JkZXI6IFtdLFxuICAgICAgICAgIGFiaWxpdGllc09yZGVyOiBzdWJqZWN0QWJpbGl0aWVzLm1hcCgoe2lkfSkgPT4gaWQpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChjLnllYXIpIG5ld0NvdXJzZS5zY2hvb2xHcmFkZSA9IGMueWVhcjtcblxuICAgICAgICBjaGFuZ2VzLnB1c2goe1xuICAgICAgICAgIGNoYW5nZTogXCJOeSBrdXJzXCIsXG4gICAgICAgICAgY29udGVudDogYy5uYW1lLFxuICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XG4gICAgICAgICAgICByLmFkZChcImNvdXJzZXNcIiwgbmV3Q291cnNlKTtcbiAgICAgICAgICAgIHIubGluayhcInN1YmplY3RzXCIsIG5ld1N1YmplY3QuaWQsIFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwiY291cnNlVGVtcGxhdGVzXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQge2dyb3VwOiBjY0dyb3VwLCBodG1sfSBvZiBjLmNlbnRyYWxDb250ZW50KSB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgZXhpc3RzIGFuIGlkZW50aWNhbCBjZW50cmFsIGNvbnRlbnQgb24gcHJldmlvdXMgY291cnNlIGZpcnN0XG4gICAgICAgICAgbGV0IG5ld0NlbnRyYWxDb250ZW50ID0gY2VudHJhbENvbnRlbnQuZmlsdGVyKGNjID0+IGNjLm5hbWUgPT09IGh0bWwpWzBdO1xuICAgICAgICAgIGlmICghbmV3Q2VudHJhbENvbnRlbnQpIHtcbiAgICAgICAgICAgIG5ld0NlbnRyYWxDb250ZW50ID0ge1xuICAgICAgICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgICAgICAgICBkYXRlVGltZTogY3QoKSxcbiAgICAgICAgICAgICAgbmFtZTogaHRtbCxcbiAgICAgICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChjY0dyb3VwKSBuZXdDZW50cmFsQ29udGVudC5ncm91cCA9IGNjR3JvdXA7XG4gICAgICAgICAgICBjZW50cmFsQ29udGVudC5wdXNoKG5ld0NlbnRyYWxDb250ZW50KTtcblxuICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgY2hhbmdlOiBcIk55dHQgY2VudHJhbHQgaW5uZWjDpWxsXCIsXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IGA8aDQ+JHtjY0dyb3VwfTwvaDQ+JHtodG1sfWAsXG4gICAgICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XG4gICAgICAgICAgICAgICAgci5hZGQoXCJjZW50cmFsLWNvbnRlbnRcIiwgbmV3Q2VudHJhbENvbnRlbnQpO1xuICAgICAgICAgICAgICAgIHIubGluayhcImNvdXJzZXNcIiwgbmV3Q291cnNlLmlkLCBcImNlbnRyYWwtY29udGVudFwiLCBuZXdDZW50cmFsQ29udGVudC5pZCwgXCJjZW50cmFsQ29udGVudFwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgbXV0YXRpb25zOiByID0+IHtcbiAgICAgICAgICAgICAgICByLmxpbmsoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZS5pZCwgXCJjZW50cmFsLWNvbnRlbnRcIiwgbmV3Q2VudHJhbENvbnRlbnQuaWQsIFwiY2VudHJhbENvbnRlbnRcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZWdpc3RlciB0aGUgb3JkZXIgaW4gd2hpY2ggdGhpcyBjZW50cmFsIGNvbnRlbnQgYXBwZWFyZWQgaW4gdGhlIFhNTDpcbiAgICAgICAgICBuZXdDb3Vyc2UuY2VudHJhbENvbnRlbnRPcmRlci5wdXNoKG5ld0NlbnRyYWxDb250ZW50LmlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGNyIG9mIGMua25vd2xlZGdlUmVxdWlyZW1lbnRzKSB7XG4gICAgICAgICAgbGV0IG5ld0tub3dsZWRnZVJlcXVpcmVtZW50ID0ga25vd2xlZGdlUmVxdWlyZW1lbnRzLmZpbHRlcihrciA9PiBrci5uYW1lID09PSBjci5odG1sICYmIGtyLmdyYWRlU3RlcCA9PT0gY3IuZ3JhZGVTdGVwKVswXTtcbiAgICAgICAgICBpZiAoIW5ld0tub3dsZWRnZVJlcXVpcmVtZW50KSB7XG4gICAgICAgICAgICBuZXdLbm93bGVkZ2VSZXF1aXJlbWVudCA9IHtcbiAgICAgICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgICAgICAgICAgZGF0ZVRpbWU6IGN0KCksXG4gICAgICAgICAgICAgIG5hbWU6IGNyLmh0bWwsXG4gICAgICAgICAgICAgIGdyYWRlU3RlcDogY3IuZ3JhZGVTdGVwLFxuICAgICAgICAgICAgICBhY2w6IFtcInJvbGU6VVNFUjpSXCJdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHMucHVzaChuZXdLbm93bGVkZ2VSZXF1aXJlbWVudCk7XG5cbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgICAgIGNoYW5nZTogXCJOeXR0IGt1bnNrYXBza3JhdiBmw7ZyIGJldHlnZXQgXCIgKyBjci5ncmFkZVN0ZXAsXG4gICAgICAgICAgICAgIGNvbnRlbnQ6IGNyLmh0bWwsXG4gICAgICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XG4gICAgICAgICAgICAgICAgci5hZGQoXCJrbm93bGVkZ2UtcmVxdWlyZW1lbnRzXCIsIG5ld0tub3dsZWRnZVJlcXVpcmVtZW50KTtcbiAgICAgICAgICAgICAgICByLmxpbmsoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZS5pZCwgXCJrbm93bGVkZ2UtcmVxdWlyZW1lbnRzXCIsIG5ld0tub3dsZWRnZVJlcXVpcmVtZW50LmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XG4gICAgICAgICAgICAgICAgci5saW5rKFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwia25vd2xlZGdlLXJlcXVpcmVtZW50c1wiLCBuZXdLbm93bGVkZ2VSZXF1aXJlbWVudC5pZCwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJlZ2lzdGVyIHRoZSBvcmRlciBpbiB3aGljaCB0aGlzIGtub3dsZWRnZSByZXF1aXJlbWVudCBhcHBlYXJlZCBpbiB0aGUgWE1MOlxuICAgICAgICAgIG5ld0NvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlci5wdXNoKG5ld0tub3dsZWRnZVJlcXVpcmVtZW50LmlkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBCdWlsZCBrbm93bGVkZ2UgbWF0cml4XG5cbiAgICAgICAgLy8gTGluayBkaXJlY3RseSBmcm9tIGNvdXJzZSB0ZW1wbGF0ZSB0byBhbGwgYWJpbGl0aWVzIHRoYXQgdGhlIHN1YmplY3QgaGFzOlxuICAgICAgICBmb3IgKGNvbnN0IGEgb2Ygc3ViamVjdEFiaWxpdGllcykge1xuICAgICAgICAgIGNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xuICAgICAgICAgICAgICByLmxpbmsoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZS5pZCwgXCJhYmlsaXRpZXNcIiwgYS5pZCwgXCJhYmlsaXRpZXNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge2NoYW5nZXMsIHN1YmplY3RUb0ltcG9ydH07XG4gIH1cblxuICBjYW5jZWwoKSB7XG4gICAgdGhpcy5wcm9wcy5vbkNhbmNlbCgpO1xuICB9XG5cbiAgYXN5bmMgaW1wb3J0KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc1dvcmtpbmc6IHRydWUsIGlzSW1wb3J0aW5nOiB0cnVlIH0pO1xuICAgIGNvbnN0IGFsbE11dGF0aW9ucyA9IHRoaXMuc3RhdGUuY2hhbmdlcy5tYXAoY2hhbmdlID0+IGNoYW5nZS5tdXRhdGlvbnMpO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5kbyhyID0+IHtcbiAgICAgICAgYWxsTXV0YXRpb25zLmZvckVhY2gobXV0ID0+IG11dChyKSk7XG4gICAgICB9KTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzV29ya2luZzogZmFsc2UsIGlzSW1wb3J0aW5nOiBmYWxzZSB9KTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vbkltcG9ydFN1Y2Nlc3ModGhpcy5wcm9wcy5zdWJqZWN0Lm5hbWUpO1xuICB9XG5cbiAgZml4TChodG1sOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gaHRtbDsvLy5yZXBsYWNlKCc8bCBmcm9tYXQ9XCJPTFwiPicpXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge3N1YmplY3RUb0ltcG9ydH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtzdWJqZWN0fSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxkaXY+PGgxPntMYFVwcGxhZGRhdCDDhG1uZSAke3N1YmplY3RUb0ltcG9ydCA/IHN1YmplY3RUb0ltcG9ydC5uYW1lIDogJyd9YH08L2gxPlxuICAgICAge3RoaXMuc3RhdGUuZXJyb3IgPyA8cD5GZWw6IHt0aGlzLnN0YXRlLmVycm9yfTwvcD4gOlxuICAgICAgIHRoaXMuc3RhdGUuaXNXb3JraW5nID8gPHA+QXJiZXRhci4uLjwvcD4gOlxuICAgICAgIHRoaXMuc3RhdGUuaXNJbXBvcnRpbmcgPyA8cD5JbXBvcnRlcmFyLi4uPC9wPiA6XG4gICAgICAgdGhpcy5zdGF0ZS5jaGFuZ2VzLmV2ZXJ5KGMgPT4gIWMuY2hhbmdlKSA/IC8vIEluZ2Egw6RuZHJpbmdhciBhdHQgdmlzYSAoYmFyYSBwc2V1ZG8tw6RuZHJpbmdhcilcbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxwPkt1bmRlIGludGUgZmlubmEgbsOlZ3JhIGbDtnLDpG5kcmluZ2FyIGZyw6VuIGJlZmludGxpZ3QgZGF0YS4gS2xpY2thIE9LIGbDtnIgYXR0IGF2YnJ5dGEgb2NoIMOldGVyZ8OlLjwvcD5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmNhbmNlbCgpfT4gT0sgPC9idXR0b24+XG4gICAgICAgICAgICA8L2Rpdj4gOlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDx0YWJsZSBzdHlsZT17e2JvcmRlcjogXCIxcHggc29saWQgZ3JheVwiLCBwYWRkaW5nOiBcIjJweFwiIH19Pjx0aGVhZD48dHI+XG4gICAgICAgICAgPHRoIGNvbFNwYW49ezJ9PkdyYW5za25pbmcgYXYgw6RuZHJpbmdhciBpIGdydW5kLWRhdGE8L3RoPlxuICAgICAgICA8L3RyPjx0cj5cbiAgICAgICAgICAgIDx0aD7DhG5kcmluZzwvdGg+XG4gICAgICAgICAgICA8dGg+SW5uZWjDpWxsPC90aD5cbiAgICAgICAgICA8L3RyPjwvdGhlYWQ+PHRib2R5PlxuICAgICAgICAgICAge3RoaXMuc3RhdGUuY2hhbmdlcy5maWx0ZXIoY2hhbmdlID0+IGNoYW5nZS5jaGFuZ2UpLm1hcCgoY2hhbmdlLGkpID0+IDx0ciBrZXk9e2l9PlxuICAgICAgICAgICAgICA8dGQgc3R5bGU9e3twYWRkaW5nOiBcIjJweFwifX0+e2NoYW5nZS5jaGFuZ2V9PC90ZD5cbiAgICAgICAgICAgICAgPHRkIHN0eWxlPXt7cGFkZGluZzogXCIycHhcIn19IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogY2hhbmdlLmNvbnRlbnQgfX0gLz5cbiAgICAgICAgICAgIDwvdHI+KX1cbiAgICAgICAgICA8L3Rib2R5PjwvdGFibGU+XG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5jYW5jZWwoKX0gZGlzYWJsZWQ9e3RoaXMuc3RhdGUuaXNJbXBvcnRpbmd9PkF2YnJ5dDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuaW1wb3J0KCl9IGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzSW1wb3J0aW5nfT5JbXBvcnRlcmE8L2J1dHRvbj5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDwvZGl2Pn0gXG4gICAgICA8YnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGUoeyBzaG93RnVsbFRleHQ6ICF0aGlzLnN0YXRlLnNob3dGdWxsVGV4dCB9KX0+XG4gICAgICAgIHt0aGlzLnN0YXRlLnNob3dGdWxsVGV4dCA/XG4gICAgICAgICAgTGBEw7ZsaiBuZWRhbmAgOlxuICAgICAgICAgIExgVmlzYSBoZWxhIHRleHRlbiBmcsOlbiBTa29sdmVya2V0YH1cbiAgICAgIDwvYnV0dG9uPlxuXG4gICAgICB7LyogVGhlIHRhYmxlIGJlbG93IGlzIE5PVCBqdXN0IGZvciBzaG93IVxuICAgICAgICAgIEZ1bmN0aW9uYWxpdHkgaXMgZGVwZW5kZW50IG9uIGl0cyBleGlzdGVuY2UgZm9yIGltcG9ydGluZyBzdHVmZiB1c2luZyBqUXVlcnkgdG8gY2hlcnJ5LXBpY2sgZGF0YS4gKi99ICAgICAgICAgIFxuICAgICAgPHRhYmxlIHN0eWxlPXt7IGRpc3BsYXk6IHRoaXMuc3RhdGUuc2hvd0Z1bGxUZXh0ID8gJycgOiAnbm9uZScgfX0+PHRib2R5Pjx0cj5cbiAgICAgICAgPHRoPlxuICAgICAgICAgIE5hbW5cbiAgICAgICAgPC90aD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIHtzdWJqZWN0Lm5hbWV9XG4gICAgICAgIDwvdGQ+XG4gICAgICA8L3RyPjx0cj5cbiAgICAgICAgICA8dGg+XG4gICAgICAgICAgICDDhG1uZXNrb2RcbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0ZD5cbiAgICAgICAgICAgIHtzdWJqZWN0LmNvZGV9XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgPC90cj48dHI+XG4gICAgICAgICAgPHRoPlxuICAgICAgICAgICAgU3lmdGVcbiAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDx0ZCByZWY9e2VsZW0gPT4gdGhpcy5wdXJwb3NlRWxlbSA9IGVsZW19IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5maXhMKHN1YmplY3QucHVycG9zZSkgfX0gLz5cbiAgICAgICAgPC90cj48dHI+XG4gICAgICAgICAgPHRoPlxuICAgICAgICAgICAgS3Vyc2VyXG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICB7c3ViamVjdC5jb3Vyc2VzLm1hcChjb3Vyc2UgPT4gPHRhYmxlIGtleT17Y291cnNlLmNvZGV9IHJlZj17ZWxlbSA9PiB0aGlzLmNvdXJzZXNFbGVtc1tjb3Vyc2UuY29kZV0gPSB7IGNvdXJzZSwgZWxlbSB9fT48dGJvZHk+XG4gICAgICAgICAgICAgIDx0cj48dGg+S3Vyc2VucyBuYW1uPC90aD48dGQ+e2NvdXJzZS5uYW1lfTwvdGQ+PC90cj5cbiAgICAgICAgICAgICAgPHRyPjx0aD5LdXJza29kPC90aD48dGQ+e2NvdXJzZS5jb2RlfTwvdGQ+PC90cj5cbiAgICAgICAgICAgICAgPHRyPjx0aD5Qb8Okbmc8L3RoPjx0ZD57Y291cnNlLnBvaW50c308L3RkPjwvdHI+XG4gICAgICAgICAgICAgIDx0cj48dGg+Q2VudHJhbHQgaW5uZWjDpWxsPC90aD48dGQgcmVmPXtlbGVtID0+IHRoaXMuY2VudHJhbENvbnRlbnRFbGVtcy5wdXNoKGVsZW0pfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHRoaXMuZml4TChjb3Vyc2UuY2VudHJhbENvbnRlbnQpIH19IC8+PC90cj5cbiAgICAgICAgICAgICAge2NvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLnNvbWUoa3IgPT4gIWtyLmdyYWRlU3RlcCkgPyA8dHI+XG4gICAgICAgICAgICAgICAgPHRoPkt1bnNrYXBza3JhdiB1dGFuIGJldHlnc8OkdHRuaW5nPC90aD5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZ3JhZGUtc3RlcC1ub25lXCIgcmVmPXtlbGVtID0+IHRoaXMua25vd2xlZGdlUmVxdWlyZW1lbnRFbGVtcy5wdXNoKGVsZW0pfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHRoaXMuZml4TChjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5maWx0ZXIociA9PiAhci5ncmFkZVN0ZXApLm1hcChrciA9PiBrci50ZXh0KS5qb2luKCcnKSkgfX0gLz5cbiAgICAgICAgICAgICAgPC90cj4gOiB1bmRlZmluZWR9XG5cbiAgICAgICAgICAgICAge2NvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLnNvbWUoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSdFJykgPyA8dHI+XG4gICAgICAgICAgICAgICAgPHRoPkt1bnNrYXBza3JhdiBCZXR5ZyBFPC90aD5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZ3JhZGUtc3RlcC1FXCIgcmVmPXtlbGVtID0+IHRoaXMua25vd2xlZGdlUmVxdWlyZW1lbnRFbGVtcy5wdXNoKGVsZW0pfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHRoaXMuZml4TChjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5maWx0ZXIociA9PiByLmdyYWRlU3RlcCA9PT0gJ0UnKS5tYXAoa3IgPT4ga3IudGV4dCkuam9pbignJykpIH19IC8+XG4gICAgICAgICAgICAgIDwvdHI+IDogdW5kZWZpbmVkfVxuXG4gICAgICAgICAgICAgIHtjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5zb21lKGtyID0+IGtyLmdyYWRlU3RlcCA9PT0nQycpID8gPHRyPlxuICAgICAgICAgICAgICAgIDx0aD5LdW5za2Fwc2tyYXYgQmV0eWcgQzwvdGg+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImdyYWRlLXN0ZXAtQ1wiIHJlZj17ZWxlbSA9PiB0aGlzLmtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMucHVzaChlbGVtKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmZpeEwoY291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuZmlsdGVyKHIgPT4gci5ncmFkZVN0ZXAgPT09ICdDJykubWFwKGtyID0+IGtyLnRleHQpLmpvaW4oJycpKSB9fSAvPlxuICAgICAgICAgICAgICA8L3RyPiA6IHVuZGVmaW5lZH1cblxuICAgICAgICAgICAgICB7Y291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuc29tZShrciA9PiBrci5ncmFkZVN0ZXAgPT09J0EnKSA/IDx0cj5cbiAgICAgICAgICAgICAgICA8dGg+S3Vuc2thcHNrcmF2IEJldHlnIEE8L3RoPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJncmFkZS1zdGVwLUFcIiByZWY9e2VsZW0gPT4gdGhpcy5rbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zLnB1c2goZWxlbSl9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5maXhMKGNvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLmZpbHRlcihyID0+IHIuZ3JhZGVTdGVwID09PSAnQScpLm1hcChrciA9PiBrci50ZXh0KS5qb2luKCcnKSkgfX0gLz5cbiAgICAgICAgICAgICAgPC90cj4gOiB1bmRlZmluZWR9XG5cbiAgICAgICAgICAgIDwvdGJvZHk+PC90YWJsZT4pfVxuICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L3Rib2R5PjwvdGFibGU+XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwsIHNob3dJbmZvLCBjb21wYXJlUHJvcCwgYXJyYXlUb0xvb2t1cCwgZmxhdHRlbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgU2tvbHZlcmtldFN1YmplY3QsIHBhcnNlU2tvbHZlcmtldFllYXJzLCBTa29sdmVya2V0Q291cnNlIH0gZnJvbSAnLi9za29sdmVya2V0LXN1YmplY3QnO1xuaW1wb3J0IHsgVXBsb2FkZWRTdWJqZWN0IH0gZnJvbSAnLi91cGxvYWRlZC1zdWJqZWN0JztcbmV4cG9ydCB7IFNob3dTdWJqZWN0IH0gZnJvbSAnLi9zaG93LXN1YmplY3QnO1xuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBMaW5rLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgcmVhZEJsb2JBc1RleHQsIGFsbG93Q29weSB9IGZyb20gXCIuLi91dGlsc1wiO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4uL2NvdXJzZXMvY291cnNlLWJhbm5lclwiO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zcGlubmVyXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGxpbmtQcmVmaXg6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgZ3ltbmFzaXVtU3ViamVjdHM6IFN1YmplY3RbXTtcbiAgcHJpbWFyeVNjaG9vbFN1YmplY3RzOiBTdWJqZWN0W107XG4gIGlzTGlzdGluZ1N1YmplY3RzOiBib29sZWFuO1xuICB1cGxvYWRlZFN1YmplY3Q6IFNrb2x2ZXJrZXRTdWJqZWN0IHwgbnVsbDtcbn1cblxuZXhwb3J0IGNsYXNzIFN1YmplY3RzSW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0xpc3RpbmdTdWJqZWN0czogdHJ1ZSxcbiAgICAgIGd5bW5hc2l1bVN1YmplY3RzOiBbXSxcbiAgICAgIHByaW1hcnlTY2hvb2xTdWJqZWN0czogW10sXG4gICAgICB1cGxvYWRlZFN1YmplY3Q6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHRoaXMubG9hZCgpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICBjb25zdCBzdWJqZWN0cyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8U3ViamVjdD4oXCJzdWJqZWN0c1wiKTtcbiAgICBzdWJqZWN0cy5zb3J0KGNvbXBhcmVQcm9wKFwibmFtZVwiKSk7XG4gICAgY29uc3QgZ3ltbmFzaXVtU3ViamVjdHMgPSBzdWJqZWN0cy5maWx0ZXIocyA9PiBzLnNjaG9vbFR5cGUgIT09ICdwcmltYXJ5Jyk7XG4gICAgY29uc3QgcHJpbWFyeVNjaG9vbFN1YmplY3RzID0gc3ViamVjdHMuZmlsdGVyKHMgPT4gcy5zY2hvb2xUeXBlID09PSAncHJpbWFyeScpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyBneW1uYXNpdW1TdWJqZWN0cywgcHJpbWFyeVNjaG9vbFN1YmplY3RzLCBpc0xpc3RpbmdTdWJqZWN0czogZmFsc2UgfSk7XG4gIH1cblxuICBhc3luYyBoYW5kbGVGaWxlU2VsZWN0KGV2OiBSZWFjdC5EcmFnRXZlbnQ8SFRNTERpdkVsZW1lbnQ+KSB7XG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBmaWxlcyA9IGV2LmRhdGFUcmFuc2Zlci5maWxlcztcbiAgICBjb25zdCB4bWwgPSBhd2FpdCByZWFkQmxvYkFzVGV4dChmaWxlc1swXSk7XG4gICAgY29uc3QgZG9jID0gJCgkLnBhcnNlWE1MKHhtbCkpO1xuICAgIGNvbnN0IHR5cGVPZlNjaG9vbGluZyA9XG4gICAgICBkb2MuZmluZChcInN1YmplY3Q+b3JpZ2luYXRvclR5cGVPZlNjaG9vbGluZ1wiKS50ZXh0KCkudHJpbSgpIHx8XG4gICAgICBkb2MuZmluZChcInN1YmplY3Q+dHlwZU9mU2Nob29saW5nXCIpLnRleHQoKS50cmltKCk7XG4gICAgY29uc3Qgc2Nob29sVHlwZTogJ3ByaW1hcnknIHwgJ2d5bW5hc2l1bScgPSB0eXBlT2ZTY2hvb2xpbmcgPT09IFwiQ09NUFVMU09SWV9TQ0hPT0xcIiA/XG4gICAgICAncHJpbWFyeScgOlxuICAgICAgdHlwZU9mU2Nob29saW5nID09PSBcIlVQUEVSX1NFQ09OREFSWV9FRFVDQVRJT05cIiA/XG4gICAgICAgICdneW1uYXNpdW0nIDpcbiAgICAgICAgbnVsbDtcblxuICAgIGlmIChzY2hvb2xUeXBlID09PSAnZ3ltbmFzaXVtJykge1xuICAgICAgY29uc3QgbW9kZWw6IFNrb2x2ZXJrZXRTdWJqZWN0ID0ge1xuICAgICAgICBuYW1lOiBkb2MuZmluZChcInN1YmplY3Q+bmFtZVwiKS50ZXh0KCkudHJpbSgpLFxuICAgICAgICBjb2RlOiBkb2MuZmluZChcInN1YmplY3Q+Y29kZVwiKS50ZXh0KCkudHJpbSgpLFxuICAgICAgICBwdXJwb3NlOiBkb2MuZmluZChcInN1YmplY3Q+cHVycG9zZVwiKS50ZXh0KCkudHJpbSgpLFxuICAgICAgICBjb3Vyc2VzOiBbXSxcbiAgICAgICAgc2Nob29sVHlwZTogJ2d5bW5hc2l1bSdcbiAgICAgIH07XG4gICAgICBjb25zdCBjb3Vyc2VzID0gZG9jLmZpbmQoXCJzdWJqZWN0PmNvdXJzZXNcIik7XG4gICAgICBmb3IgKGxldCBpPTA7IGk8Y291cnNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBjb3Vyc2UgPSAkKGNvdXJzZXNbaV0pO1xuICAgICAgICBjb25zdCBrbm93bmxlZGdlUmVxdWlyZW1lbnRzID0gW10uc2xpY2UuY2FsbChjb3Vyc2UuZmluZChcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiKSlcbiAgICAgICAgICAubWFwKHIgPT4gKHtcbiAgICAgICAgICAgIGdyYWRlU3RlcDogJChyKS5maW5kKCdncmFkZVN0ZXAnKS50ZXh0KCkudHJpbSgpLFxuICAgICAgICAgICAgdGV4dDogJChyKS5maW5kKCd0ZXh0JykudGV4dCgpLnRyaW0oKVxuICAgICAgICAgIH0pKTtcblxuICAgICAgICBtb2RlbC5jb3Vyc2VzLnB1c2goe1xuICAgICAgICAgIG5hbWU6IGNvdXJzZS5maW5kKFwibmFtZVwiKS50ZXh0KCkudHJpbSgpLFxuICAgICAgICAgIGNvZGU6IGNvdXJzZS5maW5kKFwiY29kZVwiKS50ZXh0KCkudHJpbSgpLFxuICAgICAgICAgIGNlbnRyYWxDb250ZW50OiBjb3Vyc2UuZmluZChcImNlbnRyYWxDb250ZW50XCIpLnRleHQoKS50cmltKCksXG4gICAgICAgICAgcG9pbnRzOiBwYXJzZUludChjb3Vyc2UuZmluZChcInBvaW50XCIpLnRleHQoKS50cmltKCkpLFxuICAgICAgICAgIGtub3dubGVkZ2VSZXF1aXJlbWVudHMsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7dXBsb2FkZWRTdWJqZWN0OiBtb2RlbH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjZW50cmFsQ29udGVudHMgPSBmbGF0dGVuKEFycmF5LmZyb20oZG9jLmZpbmQoXCJzdWJqZWN0PmNlbnRyYWxDb250ZW50XCIpKVxuICAgICAgICAubWFwKGNjID0+IHtcbiAgICAgICAgICBjb25zdCB5ZWFyID0gJChjYykuZmluZCgneWVhcicpLnRleHQoKS50cmltKCkgYXMgc3RyaW5nO1xuICAgICAgICAgIGNvbnN0IHR5cGVPZkNlbnRyYWxDb250ZW50ID0gJChjYykuZmluZCgndHlwZU9mQ2VudHJhbENvbnRlbnQnKS50ZXh0KCkudHJpbSgpIGFzIHN0cmluZztcblxuICAgICAgICAgIGlmICh0eXBlT2ZDZW50cmFsQ29udGVudCkge1xuICAgICAgICAgICAgLy8gRG8gbm90IHlldCBzdXBwb3J0IG11bHRpcGxlIHR5cGVzIG9mIGNlbnRyYWwgY29udGVudC5cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciAoTGDDhG1uZXQgaW5uZWjDpWxsZXIgZmxlcmEgcGFyYWxsZWxsYSB0eXBlciBhdiBjZW50cmFsdCBpbm5laMOlbGwuIERldHRhIHN0w7ZkcyDDpG5udSBpbnRlLmApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHN0YWRpdW1zID0gcGFyc2VTa29sdmVya2V0WWVhcnMoeWVhcik7XG4gICAgICAgICAgY29uc3QgY2VudHJhbENvbnRlbnRzRm9yRWFjaFN0YWRpdW0gPSBzdGFkaXVtcy5tYXAoIHN0YWRpdW0gPT4gKHtcbiAgICAgICAgICAgIHllYXI6IHN0YWRpdW0sXG4gICAgICAgICAgICB0ZXh0OiAkKGNjKS5maW5kKCd0ZXh0JykudGV4dCgpLnRyaW0oKSBhcyBzdHJpbmdcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgcmV0dXJuIGNlbnRyYWxDb250ZW50c0ZvckVhY2hTdGFkaXVtO1xuICAgICAgICB9KSk7XG5cbiAgICAgIGNvbnN0IGtub3dsZWRnZVJlcXVpcmVtZW50cyA9IGZsYXR0ZW4oQXJyYXkuZnJvbShkb2MuZmluZChcInN1YmplY3Q+a25vd2xlZGdlUmVxdWlyZW1lbnRcIikpXG4gICAgICAgIC5tYXAoa3IgPT4ge1xuICAgICAgICAgIGNvbnN0IHllYXIgPSAkKGtyKS5maW5kKCd5ZWFyJykudGV4dCgpLnRyaW0oKTtcblxuICAgICAgICAgIGNvbnN0IHR5cGVPZlJlcXVpcmVtZW50ID0gJChrcikuZmluZCgndHlwZU9mUmVxdWlyZW1lbnQnKS50ZXh0KCkudHJpbSgpIGFzIHN0cmluZztcbiAgICAgICAgICBpZiAodHlwZU9mUmVxdWlyZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIERvIG5vdCB5ZXQgc3VwcG9ydCBtdWx0aXBsZSB0eXBlcyBvZiBrbm93bGVkZ2UgcmVxdWlyZW1lbnQuXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgKExgw4RtbmV0IGlubmVow6VsbGVyIGZsZXJhIHBhcmFsbGVsbGEgdHlwZXIgYXYga3Vuc2thcHNrcmF2LiBEZXR0YSBzdMO2ZHMgw6RubnUgaW50ZS5gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcGFyc2VTa29sdmVya2V0WWVhcnMoeWVhcikubWFwKHN0YWRpdW0gPT4gKHtcbiAgICAgICAgICAgIHllYXI6IHN0YWRpdW0sXG4gICAgICAgICAgICB0ZXh0OiAkKGtyKS5maW5kKCd0ZXh0JykudGV4dCgpLnRyaW0oKSxcbiAgICAgICAgICAgIGdyYWRlU3RlcDogJChrcikuZmluZCgnZ3JhZGVTdGVwJykudGV4dCgpLnRyaW0oKVxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfSkpO1xuICAgICAgXG4gICAgICBjb25zdCBjZW50cmFsQ29udGVudHNCeVN0YWRpdW0gPSBhcnJheVRvTG9va3VwKGNlbnRyYWxDb250ZW50cywgY2MgPT4gY2MueWVhcik7XG4gICAgICBjb25zdCBrbm93bGVkZ2VSZXF1aXJlbWVudHNCeVN0YWRpdW0gPSBhcnJheVRvTG9va3VwKGtub3dsZWRnZVJlcXVpcmVtZW50cywga3IgPT4ga3IueWVhcik7XG5cbiAgICAgIGNvbnN0IHN1YmplY3ROYW1lID0gZG9jLmZpbmQoXCJzdWJqZWN0Pm5hbWVcIikudGV4dCgpLnRyaW0oKTtcbiAgICAgIGNvbnN0IHN1YmplY3RDb2RlID0gZG9jLmZpbmQoXCJzdWJqZWN0PmNvZGVcIikudGV4dCgpLnRyaW0oKTtcbiAgICAgIGNvbnN0IHN1YmplY3RQdXJwb3NlID0gZG9jLmZpbmQoXCJzdWJqZWN0PnB1cnBvc2VcIikudGV4dCgpLnRyaW0oKTtcbiAgICAgIC8qXG5cbiAgICAgICAgUHJvYmxlbWF0aWMgd2hlbiB0aGUgZm9sbG93aW5nIHRhZ3MgYXJlIHByZXNlbnQ6XG5cbiAgICAgICAgPHR5cGVPZlJlcXVpcmVtZW50PlxuICAgICAgICAgIFdJVEhJTl9TVFVERU5UX0NIT0lDRV9DSElORVNFXG4gICAgICAgIDwvdHlwZU9mUmVxdWlyZW1lbnQ+XG4gICAgICAgIDx0eXBlT2ZDZW50cmFsQ29udGVudD5cbiAgICAgICAgICBXSVRISU5fTEFOR1VBR0VfQ0hPSUNFXG4gICAgICAgIDwvdHlwZU9mQ2VudHJhbENvbnRlbnQ+XG4gICAgICAqL1xuXG4gICAgICBjb25zdCBjb3Vyc2VzQnlTdGFkaXVtOiBTa29sdmVya2V0Q291cnNlW10gPSAoWycxLTMnLCc0LTYnLCc3LTknXSBhcyBBcnJheTwnMS0zJyB8ICc0LTYnIHwgJzctOSc+KVxuICAgICAgICAubWFwKHN0YWRpdW0gPT4gKHtcbiAgICAgICAgICBuYW1lOiBzdWJqZWN0TmFtZSsnICcrc3RhZGl1bSxcbiAgICAgICAgICBjb2RlOiBzdWJqZWN0Q29kZSsnfCcrc3RhZGl1bSxcbiAgICAgICAgICBwb2ludHM6IDAsXG4gICAgICAgICAgeWVhcjogc3RhZGl1bSxcbiAgICAgICAgICBjZW50cmFsQ29udGVudDogKGNlbnRyYWxDb250ZW50c0J5U3RhZGl1bVtzdGFkaXVtXXx8W10pLm1hcChjYyA9PiBjYy50ZXh0KS5qb2luKCdcXG4nKSxcbiAgICAgICAgICBrbm93bmxlZGdlUmVxdWlyZW1lbnRzOiAoa25vd2xlZGdlUmVxdWlyZW1lbnRzQnlTdGFkaXVtW3N0YWRpdW1dfHxbXSkubWFwKCh7Z3JhZGVTdGVwLCB0ZXh0fSkgPT4gKHtncmFkZVN0ZXAsIHRleHR9KSlcbiAgICAgICAgfSkpO1xuXG4gICAgICBjb25zdCBtb2RlbDogU2tvbHZlcmtldFN1YmplY3QgPSB7XG4gICAgICAgIG5hbWU6IHN1YmplY3ROYW1lLFxuICAgICAgICBjb2RlOiBzdWJqZWN0Q29kZSxcbiAgICAgICAgcHVycG9zZTogc3ViamVjdFB1cnBvc2UsXG4gICAgICAgIHNjaG9vbFR5cGU6ICdwcmltYXJ5JyxcbiAgICAgICAgY291cnNlczogY291cnNlc0J5U3RhZGl1bVxuICAgICAgfTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3VwbG9hZGVkU3ViamVjdDogbW9kZWx9KTtcbiAgICB9XG5cbiAgICBcbiAgfVxuXG4gIG9uSW1wb3J0U3VjY2VzcyhzdWJqZWN0KSB7XG4gICAgIHNob3dJbmZvKExgSW1wb3J0ZW4gYXYgJHtzdWJqZWN0fSBseWNrYWRlc2ApO1xuICAgICB0aGlzLnNldFN0YXRlKHt1cGxvYWRlZFN1YmplY3Q6IG51bGx9KTtcbiAgICAgdGhpcy5sb2FkKCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge2xpbmtQcmVmaXh9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gPGRpdj5cbiAgICAgIHt0aGlzLnN0YXRlLnVwbG9hZGVkU3ViamVjdCA/XG4gICAgICA8VXBsb2FkZWRTdWJqZWN0XG4gICAgICAgIG9uQ2FuY2VsPXsoKT0+dGhpcy5zZXRTdGF0ZSh7dXBsb2FkZWRTdWJqZWN0OiBudWxsfSl9XG4gICAgICAgIG9uSW1wb3J0U3VjY2Vzcz17c3ViamVjdCA9PiB0aGlzLm9uSW1wb3J0U3VjY2VzcyhzdWJqZWN0KX1cbiAgICAgICAgc3ViamVjdD17dGhpcy5zdGF0ZS51cGxvYWRlZFN1YmplY3R9IC8+XG4gICAgOiB0aGlzLnN0YXRlLmlzTGlzdGluZ1N1YmplY3RzID9cbiAgICAgIDxkaXY+PHA+PFNwaW5uZXIvPlZhciBnb2QgdsOkbnRhIG1lZGFuIMOkbW5lbiBow6RtdGFzLi4uPC9wPjwvZGl2PiA6XG4gICAgICA8ZGl2PlxuICAgICAgICA8aDI+e0xgR3ltbmFzaWXDpG1uZW5gfTwvaDI+XG4gICAgICAgIDx1bD57dGhpcy5zdGF0ZS5neW1uYXNpdW1TdWJqZWN0cy5tYXAocyA9PlxuICAgICAgICAgIDxsaSBrZXk9e3MuaWR9IGNsYXNzTmFtZT17cy5wdWJsaXNoYWJsZSA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwifT5cbiAgICAgICAgICAgIDxMaW5rIHRvPXtsaW5rUHJlZml4ICsgcy5pZH0+e3MubmFtZX08L0xpbms+XG4gICAgICAgICAgPC9saT4pfVxuICAgICAgICA8L3VsPlxuICAgICAgICA8aDI+e0xgR3J1bmRza29sZcOkbW5lbmB9PC9oMj5cbiAgICAgICAgPHVsPnt0aGlzLnN0YXRlLnByaW1hcnlTY2hvb2xTdWJqZWN0cy5tYXAocyA9PlxuICAgICAgICAgIDxsaSBrZXk9e3MuaWR9IGNsYXNzTmFtZT17cy5wdWJsaXNoYWJsZSA/IFwiY29tcGxldGVcIiA6IFwiaW5jb21wbGV0ZVwifT5cbiAgICAgICAgICAgIDxMaW5rIHRvPXtsaW5rUHJlZml4ICsgcy5pZH0+e3MubmFtZX08L0xpbms+XG4gICAgICAgICAgPC9saT4pfVxuICAgICAgICA8L3VsPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyb3Atem9uZVwiIG9uRHJhZ092ZXI9e2FsbG93Q29weX0gb25Ecm9wPXtldj0+dGhpcy5oYW5kbGVGaWxlU2VsZWN0KGV2KX0+XG4gICAgICAgICAgRHJvcHBhIFN1YmplY3QtZmlsIGjDpHIgZnLDpW4gc2tvbHZlcmtldCAoSMOkbXRhcyBmcsOlbiA8YSBocmVmPVwiaHR0cDovL29wZW5kYXRhLnNrb2x2ZXJrZXQuc2VcIiB0YXJnZXQ9XCJza29sdmVya2V0XCI+b3BlbmRhdGEuc2tvbHZlcmtldC5zZTwvYT4pXG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgfTwvZGl2PlxuICB9XG59XG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vZW4tYXVcIjogNjksXG5cdFwiLi9lbi1hdS5qc1wiOiA2OSxcblx0XCIuL2VuLWNhXCI6IDcwLFxuXHRcIi4vZW4tY2EuanNcIjogNzAsXG5cdFwiLi9lbi1nYlwiOiA3MSxcblx0XCIuL2VuLWdiLmpzXCI6IDcxLFxuXHRcIi4vZW4taWVcIjogNzIsXG5cdFwiLi9lbi1pZS5qc1wiOiA3Mixcblx0XCIuL2VuLW56XCI6IDczLFxuXHRcIi4vZW4tbnouanNcIjogNzMsXG5cdFwiLi9zdlwiOiA3NCxcblx0XCIuL3N2LmpzXCI6IDc0XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSB7IC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBpZDtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxMDM7IiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgdXNlcnMgfSBmcm9tICcuL2RhdGEvdXNlcnMnO1xuaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZyB9IGZyb20gJy4uL3V0aWxzL3F1ZXJ5LXN0cmluZyc7XG5cbmNvbnN0IHVzZXJuYW1lID0gcGFyc2VRdWVyeVN0cmluZyAobG9jYXRpb24uc2VhcmNoKS51c2VyO1xuaWYgKHVzZXJuYW1lKSB7XG4gIGNvbnN0IHVzZXIgPSB1c2Vycy5maW5kKHUgPT4gdS51c2VybmFtZSA9PT0gdXNlcm5hbWUpO1xuICBpZiAodXNlcikge1xuICAgIGVudi5jdXJyZW50VXNlciA9IHVzZXI7XG4gIH1cbn1cblxuY29uc3QgeyByb2xlLCBzY2hvb2wgfSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoKTtcbmlmIChlbnYuY3VycmVudFVzZXIpIHtcbiAgaWYgKHJvbGUpIHtcbiAgICBlbnYuY3VycmVudFVzZXIucm9sZXMgPSByb2xlLnNwbGl0KCcsJyk7XG4gIH1cbiAgaWYgKHNjaG9vbCkge1xuICAgIGVudi5jdXJyZW50VXNlci5zY2hvb2wgPSBzY2hvb2w7XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7RWRpdFNjaG9vbH0gZnJvbSAnLi9lZGl0LXNjaG9vbCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB0eXBlOiAnZ3ltbmFzaXVtJyB8ICdwcmltYXJ5J1xuICBmZWVkYmFja1VybDogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgTmV3U2Nob29sID0gKHByb3BzOiBQcm9wcyk9PjxFZGl0U2Nob29sXG4gIHRpdGxlPXtMYEzDpGdnIHRpbGwgc2tvbGFgfVxuICB0eXBlPXtwcm9wcy50eXBlfVxuICBmZWVkYmFja1VybD17cHJvcHMuZmVlZGJhY2tVcmx9IC8+O1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTCwgc2hvd0luZm8sIGNvbXBhcmVQcm9wLCBhcnJheVRvTG9va3VwLCBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgeyBTa29sdmVya2V0U3ViamVjdCwgU2tvbHZlcmtldENvdXJzZSwgcGFyc2VTa29sdmVya2V0WWVhcnMgfSBmcm9tICcuL3Nrb2x2ZXJrZXQtc3ViamVjdCc7XG5pbXBvcnQgeyBVcGxvYWRlZFN1YmplY3QgfSBmcm9tICcuL3VwbG9hZGVkLXN1YmplY3QnO1xuZXhwb3J0IHsgU2hvd1N1YmplY3QgfSBmcm9tICcuL3Nob3ctc3ViamVjdCc7XG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIExpbmssIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyByZWFkQmxvYkFzVGV4dCwgYWxsb3dDb3B5IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgeyBDb3Vyc2VCYW5uZXIgfSBmcm9tIFwiLi4vY291cnNlcy9jb3Vyc2UtYmFubmVyXCI7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcbmltcG9ydCB7IFN1YmplY3RzSW5uZXIgfSBmcm9tICcuL3N1YmplY3RzLWlubmVyJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgZmVlZGJhY2tVcmw6IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgU3ViamVjdHMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0xpc3RpbmdTdWJqZWN0czogdHJ1ZSxcbiAgICAgIHByaW1hcnlTY2hvb2xTdWJqZWN0czogW10sXG4gICAgICB1cGxvYWRlZFN1YmplY3Q6IG51bGxcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiA8ZGl2PjxDb3Vyc2VCYW5uZXJcbiAgICAgIHRpdGxlPXtMYMOEbW5lbmB9XG4gICAgICBhY3RpdmVQYWdlPVwic3ViamVjdHNcIlxuICAgICAgcm91dGVzPXt7ZmVlZGJhY2s6IHRoaXMucHJvcHMuZmVlZGJhY2tVcmx9fVxuICAgICAvPlxuICAgICA8U3ViamVjdHNJbm5lciBsaW5rUHJlZml4PVwiL3N1YmplY3RzL1wiIC8+XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XG5pbXBvcnQgeyBTY2hvb2xDb3Vyc2VzIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc2Nob29sLWNvdXJzZXMnO1xuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBkdEZvcm1hdCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IERpYWxvZyB9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcbmltcG9ydCB2YWxpZFVybCBmcm9tICd2YWxpZC11cmwnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICByZXNvdXJjZT86IFJlc291cmNlO1xuICB0aXRsZTogc3RyaW5nO1xuICBvblNhdmU6IChuZXdSZXNvdXJjZTogUmVzb3VyY2UpID0+IHZvaWQ7XG4gIG9uRGVsZXRlPzogKCk9PnZvaWQ7XG59XG5cbnR5cGUgU3RhdGUgPSBSZXNvdXJjZTtcblxuZXhwb3J0IGNsYXNzIEVkaXRSZXNvdXJjZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4gaW1wbGVtZW50cyBEaWFsb2cge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMucHJvcHMucmVzb3VyY2UgfHwge25hbWU6ICcnLCB1cmw6ICcnfTtcbiAgfVxuXG4gIHNhdmUoKSB7XG4gICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLnN0YXRlO1xuICAgIGlmICghdmFsaWRVcmwuaXNVcmkocmVzb3VyY2UudXJsKSkgdGhyb3cgbmV3IEVycm9yKExgQW5naXZlbiBVUkwgJyR7cmVzb3VyY2UudXJsfScgw6RyIG9naWx0aWcuIFNrYSBiw7ZyamEgbWVkIGV4ZW1wZWx2aXMgaHR0cDosIGh0dHBzOiBlbGxlciBtYWlsdG86YCk7XG4gICAgdGhpcy5wcm9wcy5vblNhdmUocmVzb3VyY2UpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHt0aXRsZSwgb25TYXZlLCBvbkRlbGV0ZX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHJlc291cmNlID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpc1ZhbGlkVXJsID0gdmFsaWRVcmwuaXNVcmkodGhpcy5zdGF0ZS51cmwpO1xuXG4gICAgcmV0dXJuIDxkaXY+PGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgPGgyPnt0aXRsZX08L2gyPlxuICAgICAgPGhyIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5OYW1uOjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1c1xuICAgICAgICAgICAgdGFiSW5kZXg9ezF9XG4gICAgICAgICAgICBzaXplPXs1MH1cbiAgICAgICAgICAgIHZhbHVlPXtyZXNvdXJjZS5uYW1lfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2PT50aGlzLnNldFN0YXRlKHtuYW1lOiBldi50YXJnZXQudmFsdWV9KX0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5Mw6Ruazo8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgICAgc2l6ZT17NTB9XG4gICAgICAgICAgICB2YWx1ZT17cmVzb3VyY2UudXJsfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2PT50aGlzLnNldFN0YXRlKHt1cmw6IGV2LnRhcmdldC52YWx1ZX0pfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxiciAvPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxuICAgICAgICB7KHJlc291cmNlLmNyZWF0ZWREYXRlIHx8IHJlc291cmNlLm1vZGlmaWVkRGF0ZSkgJiYgPGRpdj5cbiAgICAgICAgICB7cmVzb3VyY2UuY3JlYXRlZERhdGUgJiYgPHA+XG4gICAgICAgICAgICBSZXN1cnNlbi9Mw6Rua2VuIHNrYXBhZGVzIHtkdEZvcm1hdChyZXNvdXJjZS5jcmVhdGVkRGF0ZSl9IGF2IDxzdHJvbmc+e3Jlc291cmNlLmNyZWF0ZWRCeS5uYW1lfTwvc3Ryb25nPi5cbiAgICAgICAgICA8L3A+fVxuICAgICAgICAgIHtyZXNvdXJjZS5tb2RpZmllZERhdGUgJiYgPHA+XG4gICAgICAgICAgICBSZXN1cnNlbi9Mw6Rua2VuIHJlZGlnZXJhZGVzIHNlbmFzdCB7ZHRGb3JtYXQocmVzb3VyY2UubW9kaWZpZWREYXRlKX0gYXYgPHN0cm9uZz57cmVzb3VyY2UubW9kaWZpZWRCeS5uYW1lfTwvc3Ryb25nPi5cbiAgICAgICAgICA8L3A+fVxuICAgICAgICAgIDxiciAvPjxici8+XG4gICAgICAgIDwvZGl2Pn1cbiAgICAgICAge29uRGVsZXRlICYmIDxkaXYgdGFiSW5kZXg9ezJ9IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9eygpPT5vbkRlbGV0ZSgpfT5cbiAgICAgICAgICBUYSBib3J0IHJlc3Vycy9sw6Rua1xuICAgICAgICA8L2Rpdj59XG4gICAgICAgIDxhIHRhYkluZGV4PXsxfSBjbGFzc05hbWU9e1wiYnRuIGJ0bi1sYXJnZVwiICsgKGlzVmFsaWRVcmwgPyBcIlwiIDogXCIgYnRuLWluYWN0aXZlXCIpfSBvbkNsaWNrPXtpc1ZhbGlkVXJsICYmICgoKSA9PiBvblNhdmUocmVzb3VyY2UpKX0+U3BhcmE8L2E+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtSZXNvdXJjZX0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHtMaW5rfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7SUNvdXJzZUVkaXRvckhvc3R9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcbmltcG9ydCB7RWRpdFJlc291cmNlfSBmcm9tICcuLi9tb2RhbC1wYWdlcy9lZGl0LXJlc291cmNlJztcbmltcG9ydCB7IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICByZXNvdXJjZXM6IFJlc291cmNlW107XG4gIG9uVXBkYXRlOiAocmVzb3VyY2VzVXBkYXRlcykgPT4gdm9pZDtcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3Q7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG5cbn1cblxuZXhwb3J0IGNsYXNzIEVkaXRhYmxlUmVzb3VyY2VMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlPXt9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtob3N0LCBvblVwZGF0ZSwgcmVzb3VyY2VzfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cbiAgICAgICAge3Jlc291cmNlcy5tYXAoKHJlc291cmNlLCBpZHgpID0+IFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17aWR4fT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgb25DbGljaz17KCk9Pmhvc3Qub3BlbkRpYWxvZyh7XG4gICAgICAgICAgICAgICAgQ29tcG9uZW50OiBFZGl0UmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlJlZGlnZXJhIHJlc3Vyc1wiLFxuICAgICAgICAgICAgICAgICAgcmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICBvblNhdmU6IGVkaXRlZFJlc291cmNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlZFJlc291cmNlID0gdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMoZWRpdGVkUmVzb3VyY2UsIGVudi5jdXJyZW50VXNlcik7XG4gICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlKHskc3BsaWNlOiBbW2lkeCwgMSwgdXBkYXRlZFJlc291cmNlXV19KTtcbiAgICAgICAgICAgICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIG9uRGVsZXRlOiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNwbGljZTogW1tpZHgsIDFdXX0pO1xuICAgICAgICAgICAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KX0+PC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICA8YSBocmVmPXtyZXNvdXJjZS51cmx9IHRhcmdldD1cIl9ibGFua1wiID57cmVzb3VyY2UubmFtZX08L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj4pfVxuICAgICA8L2Rpdj5cbiAgICA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKT0+aG9zdC5vcGVuRGlhbG9nKHtcbiAgICAgIENvbXBvbmVudDogRWRpdFJlc291cmNlLFxuICAgICAgcHJvcHM6IHtcbiAgICAgICAgdGl0bGU6IFwiTMOkZ2cgdGlsbCByZXN1cnNcIixcbiAgICAgICAgb25TYXZlOiBuZXdSZXNvdXJjZSA9PiB7XG4gICAgICAgICAgY29uc3QgdXBkYXRlZFJlc291cmNlID0gdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMobmV3UmVzb3VyY2UsIGVudi5jdXJyZW50VXNlcik7XG4gICAgICAgICAgb25VcGRhdGUoeyRwdXNoOiBbdXBkYXRlZFJlc291cmNlXX0pXG4gICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLXBhcGVyY2xpcFwiIGFyaWEtaGlkZGVuPjwvaT4gTMOkZ2cgdGlsbCByZXN1cnM8L2E+XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsIlxuZXhwb3J0IGNsYXNzIENhY2hlZFJlc3BvbnNlPFQ+IHtcbiAgICBwcm9taXNlOiBQcm9taXNlPFQ+IHwgbnVsbDtcbiAgICByZXN1bHQ6IFQgfCBudWxsO1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBxdWVyeWVyOiAoKT0+UHJvbWlzZTxUPikge1xuICAgICAgICB0aGlzLnByb21pc2UgPSBudWxsO1xuICAgICAgICB0aGlzLnJlc3VsdCA9IG51bGw7XG4gICAgfVxuXG4gICAgcXVlcnkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2UgP1xuICAgICAgICAgICAgdGhpcy5wcm9taXNlIDpcbiAgICAgICAgICAgICh0aGlzLnByb21pc2UgPSB0aGlzLnF1ZXJ5ZXIoKS50aGVuKHggPT4gdGhpcy5yZXN1bHQgPSB4KSk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG51bGw7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgVGFzayB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xuaW1wb3J0IHsgRWRpdFRhc2sgfSBmcm9tIFwiLi9lZGl0LXRhc2tcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgc2hvcnRQZXJzb25OYW1lRm9ybWF0LCBzaG9ydERhdGVGb3JtYXQgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IFByZXZpZXdhYmxlVGFza0ZpZWxkcyB9IGZyb20gJy4vcHJldmlld2FibGUtdGFzay1maWVsZHMnO1xuaW1wb3J0IHsgU2F2ZU9yQ2FuY2VsQnV0dG9ucyB9IGZyb20gJy4vc2F2ZS1vci1jYW5jZWwtYnV0dG9ucyc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHNlYXJjaE1hcmtlZElkczogc3RyaW5nW107XG4gIHNlYXJjaFJlc3VsdDogVGFza1tdO1xuICB0YXNrOiBUYXNrO1xuICB3cml0ZUFjY2VzczogYm9vbGVhbjtcbiAgdGFza0N1c3RvbWl6YXRpb246IFBhcnRpYWw8VGFzaz47XG4gIGVkaXRUYXNrOiBFZGl0VGFzaztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNlYXJjaFJlc3VsdHMgKHtzZWFyY2hNYXJrZWRJZHMsIHNlYXJjaFJlc3VsdCwgdGFzaywgZWRpdFRhc2ssIHdyaXRlQWNjZXNzLCB0YXNrQ3VzdG9taXphdGlvbn06IFByb3BzKSB7XG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtcInRhc2stc2VhcmNoLXJlc3VsdFwiICsgKCFlZGl0VGFzay5zdGF0ZS50YXNrICYmICFlZGl0VGFzay5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnQgPyBcIiBmaXhlZFwiIDogXCJcIil9PlxuICAgICAgICB7c2VhcmNoTWFya2VkSWRzLmxlbmd0aCA9PT0gMCA/XG4gICAgICAgICAgICA8aDI+U2FtdGxpZ2EgdXBwZ2lmdGVyIGbDtnIga3Vyc2VuPC9oMj4gOlxuICAgICAgICAgICAgPGgyPlVwcGdpZnRlciBzb20gdMOkY2tlciB2YWxkYSBmaWx0ZXI8L2gyPn1cbiAgICAgICAgPHRhYmxlPjx0Ym9keT5cbiAgICAgICAgICAgIHtzZWFyY2hSZXN1bHRcbiAgICAgICAgICAgICAgLmZpbHRlcih0YXNrID9cbiAgICAgICAgICAgICAgICBmb3VuZFRhc2sgPT4gZm91bmRUYXNrLmlkID09PSB0YXNrLmlkIDpcbiAgICAgICAgICAgICAgICAoKSA9PiB0cnVlKVxuICAgICAgICAgICAgICAubWFwKGZvdW5kVGFzayA9PiA8UmVhY3QuRnJhZ21lbnQga2V5PXtmb3VuZFRhc2suaWR9PlxuICAgICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB0YWJJbmRleD17MX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImNoZWNrQm94XCIgKyAodGFzayAmJiB0YXNrLmlkID09PSBmb3VuZFRhc2suaWQgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCk9PnRvZ2dsZUNob29zZVRhc2soZm91bmRUYXNrKSB9IC8+XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+PHRkPlxuICAgICAgICAgICAgICAgICAgICAgICAge2ZvdW5kVGFzay5jb250ZW50ID9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIG9uQ2xpY2s9e2V2ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlQ2hvb3NlVGFzayhmb3VuZFRhc2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IH0+e2ZvdW5kVGFzay5uYW1lfTwvYT4gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2ZvdW5kVGFzay51cmx9IHRhcmdldD1cIl9ibGFua1wiPntmb3VuZFRhc2submFtZX08L2E+fVxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgICAge3Nob3J0UGVyc29uTmFtZUZvcm1hdChmb3VuZFRhc2subW9kaWZpZWRCeS5uYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgPC90ZD48dGQ+XG4gICAgICAgICAgICAgICAgICAgICAge2ZvdW5kVGFzay5zY2hvb2wgfHwgXCJTdGFuZGFyZFwifVxuICAgICAgICAgICAgICAgICAgICA8L3RkPjx0ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtzaG9ydERhdGVGb3JtYXQoZm91bmRUYXNrLm1vZGlmaWVkRGF0ZSl9XG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICB7Lyp0YXNrICYmIHRhc2suaWQgPT09IGZvdW5kVGFzay5pZCAmJiA8dHI+PHRkIGNvbFNwYW49ezR9PlxuICAgICAgICAgICAgICAgICAge2VkaXRUYXNrLnN0YXRlLnByZXZpZXdUYXNrQ29udGVudCA/IFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBlZGl0VGFzay5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnR9fSAvPlxuICAgICAgICAgICAgICAgICAgOiA8UHJldmlld2FibGVUYXNrRmllbGRzXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlQWNjZXNzPXt3cml0ZUFjY2Vzc31cbiAgICAgICAgICAgICAgICAgICAgdGFzaz17dGFza31cbiAgICAgICAgICAgICAgICAgICAgdGFza0N1c3RvbWl6YXRpb249e3Rhc2tDdXN0b21pemF0aW9ufVxuICAgICAgICAgICAgICAgICAgICBlZGl0VGFzaz17ZWRpdFRhc2t9IC8+fVxuICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgPFNhdmVPckNhbmNlbEJ1dHRvbnMgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfSBlZGl0VGFzaz17ZWRpdFRhc2t9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICA8L3RkPjwvdHI+Ki99XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50Pil9XG4gICAgICAgIDwvdGJvZHk+PC90YWJsZT5cbiAgICAgICAgPGJyIC8+XG4gICAgICAgIDxociAvPlxuICAgIDwvZGl2PjtcblxuICBmdW5jdGlvbiB0b2dnbGVDaG9vc2VUYXNrKGZvdW5kVGFzazogVGFzaykge1xuICAgIGlmICh0YXNrICYmIHRhc2suaWQgPT09IGZvdW5kVGFzay5pZCkge1xuICAgICAgZWRpdFRhc2sudXBkYXRlU2VhcmNoTWFya2VkSWRzKHNlYXJjaE1hcmtlZElkcyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgZmluZERPTU5vZGUoZWRpdFRhc2spLnBhcmVudEVsZW1lbnQuc2Nyb2xsVG9wID0gMDtcbiAgICAgIGVkaXRUYXNrLnNldFN0YXRlUHJvbWlzZWQoeyB0YXNrOiBmb3VuZFRhc2ssIHByZXZpZXdUYXNrQ29udGVudDogbnVsbCB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFRhc2ssIENvdXJzZSB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xuaW1wb3J0IHsgRmVhdHVyZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vZmVhdHVyZXNcIjtcbmltcG9ydCB7IEVkaXRUYXNrIH0gZnJvbSBcIi4vZWRpdC10YXNrXCI7XG5pbXBvcnQgUmVhY3REYXRlUGlja2VyIGZyb20gXCJyZWFjdC1kYXRlcGlja2VyXCI7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1Rhc2tNaWdyYXRpb25Cb3h9IGZyb20gXCIuL3Rhc2stbWlncmF0aW9uLWJveFwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB0YXNrOiBUYXNrO1xuICBjb3Vyc2U6IENvdXJzZTtcbiAgd3JpdGVBY2Nlc3M6IGJvb2xlYW47XG4gIGZlYXR1cmVzOiBGZWF0dXJlcztcbiAgZWRpdFRhc2s6IEVkaXRUYXNrO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gQmFzaWNFZGl0YWJsZVRhc2tGaWVsZHMoe1xuICB0YXNrLFxuICBjb3Vyc2UsXG4gIHdyaXRlQWNjZXNzLFxuICBmZWF0dXJlcyxcbiAgZWRpdFRhc2tcbn06IFByb3BzKSB7XG4gIHJldHVybiA8ZGl2PlxuICAgIDxoMj5VcHBnaWZ0ZW5zIG5hbW4gb2NoIGzDpG5rPC9oMj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICA8cD5VcHBnaWZ0ZW5zIG5hbW46PC9wPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICA8aW5wdXQgYXV0b0ZvY3VzIHR5cGU9XCJ0ZXh0XCIgc2l6ZT17MzV9IHZhbHVlPXt0YXNrLm5hbWV9IGRpc2FibGVkPXshd3JpdGVBY2Nlc3N9IHJlYWRPbmx5PXshd3JpdGVBY2Nlc3N9IG9uQ2hhbmdlPXtldiA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3VGFzayA9IHsgLi4udGFzayB9O1xuICAgICAgICAgIG5ld1Rhc2submFtZSA9IGV2LnRhcmdldC52YWx1ZTtcbiAgICAgICAgICBlZGl0VGFzay5zZXRTdGF0ZVByb21pc2VkKHsgdGFzazogbmV3VGFzayB9KTtcbiAgICAgICAgfSB9IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICA8cD5VUkw6PC9wPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17XCJob3Jpem9udGFsSXRlbSB0b3BcIn0+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHNpemU9ezM1fSB2YWx1ZT17dGFzay51cmx9IGRpc2FibGVkPXshd3JpdGVBY2Nlc3N9IHJlYWRPbmx5PXshd3JpdGVBY2Nlc3N9IG9uQ2hhbmdlPXtldiA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3VGFzayA9IHsgLi4udGFzayB9O1xuICAgICAgICAgIG5ld1Rhc2sudXJsID0gZXYudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgIGVkaXRUYXNrLnNldFN0YXRlUHJvbWlzZWQoeyB0YXNrOiBuZXdUYXNrIH0pO1xuICAgICAgICB9IH0gLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIHt0YXNrLm1pZ3JhdGVkVGV4dHMgJiYgd3JpdGVBY2Nlc3MgJiYgPFRhc2tNaWdyYXRpb25Cb3ggdGFzaz17dGFza30gY291cnNlPXtjb3Vyc2V9IHVwZGF0ZUxpbms9eyhpZCwgbGlua09yVW5saW5rKSA9PiBlZGl0VGFzay51cGRhdGVMaW5rKGlkLCBsaW5rT3JVbmxpbmspfSAvPn1cbiAgICA8PjxoMj5JbmzDpG1uaW5nc3VwcGdpZnQ8L2gyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiY2hlY2tCb3hcIiArIChlZGl0VGFzay5nZXRUYXNrUHJvcChcImFzc2lnbm1lbnRcIikgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX0gb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgZWRpdFRhc2sudXBkYXRlVGFza09yQ3VzdG9taXphdGlvbihcImFzc2lnbm1lbnRcIiwgeyAkc2V0OiAhZWRpdFRhc2suZ2V0VGFza1Byb3AoXCJhc3NpZ25tZW50XCIpIH0pO1xuICAgICAgICAgIH0gfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICA8cD5EZW4gaMOkciB1cHBnaWZ0ZW4gw6RyIGVuIGlubMOkbW5pbmdzdXBwZ2lmdDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIHtlZGl0VGFzay5nZXRUYXNrUHJvcChcImFzc2lnbm1lbnRcIikgJiYgPD5cbiAgICAgICAgPHA+SW5sw6RtbmluZ3NkYXR1bTwvcD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgIDxSZWFjdERhdGVQaWNrZXIgc2VsZWN0ZWQ9e2VkaXRUYXNrLmdldFRhc2tQcm9wKFwiZGVhZGxpbmVcIikgJiYgbW9tZW50KGVkaXRUYXNrLmdldFRhc2tQcm9wKFwiZGVhZGxpbmVcIikpfSBkYXRlRm9ybWF0PVwiWVlZWS1NTS1ERFwiIGxvY2FsZT17XCJzdlwifSBwb3BwZXJQbGFjZW1lbnQ9XCJib3R0b20tc3RhcnRcIiBvbkNoYW5nZT17dmFsdWUgPT4ge1xuICAgICAgICAgICAgICBlZGl0VGFzay51cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uKFwiZGVhZGxpbmVcIiwgeyAkc2V0OiB2YWx1ZS5mb3JtYXQoXCJZWVlZLU1NLUREXCIpIH0pO1xuICAgICAgICAgICAgfSB9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgIHtlZGl0VGFzay5nZXRUYXNrUHJvcChcImRlYWRsaW5lXCIpICYmIDxhIGNsYXNzTmFtZT1cImRlbGV0ZURhdGVcIiBocmVmPVwiI1wiIHRpdGxlPVwiVGEgYm9ydCBpbmzDpG1uaW5nc2RhdHVtXCIgb25DbGljaz17ZXYgPT4ge1xuICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICBlZGl0VGFzay51cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uKFwiZGVhZGxpbmVcIiwgeyAkc2V0OiBudWxsIH0pO1xuICAgICAgICAgICAgfSB9PjwvYT59XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC8+fVxuICAgIDwvPlxuICA8L2Rpdj47XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkdEZvcm1hdCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IFRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBUYXNrU3RhdHVzRnJhZ21lbnQoe3Rhc2t9OiB7dGFzazogVGFza30pIHtcbiAgcmV0dXJuIDw+XG4gICAgICA8aDM+VXBwZ2lmdGVucyBzdGF0dXM8L2gzPlxuXG4gICAgICB7dGFzay5jcmVhdGVkQnkgJiYgdGFzay5jcmVhdGVkRGF0ZSAmJiA8cD5cbiAgICAgICAgICBVcHBnaWZ0ZW4gc2thcGFkZXMge2R0Rm9ybWF0KHRhc2suY3JlYXRlZERhdGUpfSBhdiA8c3Ryb25nPnt0YXNrLmNyZWF0ZWRCeS5uYW1lfTwvc3Ryb25nPi5cbiAgICAgIDwvcD59XG4gICAgICB7dGFzay5tb2RpZmllZEJ5ICYmIHRhc2subW9kaWZpZWREYXRlICYmIDxwPlxuICAgICAgICAgIFVwcGdpZnRlbiByZWRpZ2VyYWRlcyBzZW5hc3Qge2R0Rm9ybWF0KHRhc2subW9kaWZpZWREYXRlKX0gYXYgPHN0cm9uZz57dGFzay5tb2RpZmllZEJ5Lm5hbWV9PC9zdHJvbmc+LlxuICAgICAgPC9wPn1cbiAgPC8+O1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRWRpdFRhc2sgfSBmcm9tICcuL2VkaXQtdGFzayc7XG5pbXBvcnQgeyBzaG93RXJyb3IgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBTYXZlT3JDYW5jZWxCdXR0b25zKHt3cml0ZUFjY2VzcywgZWRpdFRhc2t9OiB7d3JpdGVBY2Nlc3M6IGJvb2xlYW4sIGVkaXRUYXNrOiBFZGl0VGFza30pIHtcbiAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIHshIWVkaXRUYXNrLnByb3BzLm9uRGVsZXRlICYmIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCkgPT4gZWRpdFRhc2sucHJvcHMub25EZWxldGUoKX0+XG4gICAgICAgICAgVGEgYm9ydCBmcsOlbiBrdXJzbW9kdWxcbiAgICAgIDwvZGl2Pn1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHVsbC1yaWdodFwiPiZuYnNwOzwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiBvbkNsaWNrPXsoKSA9PiBlZGl0VGFzay5wcm9wcy5vbkNhbmNlbCgpfT5cbiAgICAgICAgICBBdmJyeXRcbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2VcIiBvbkNsaWNrPXsoKSA9PiBlZGl0VGFzay5zYXZlKCkuY2F0Y2goc2hvd0Vycm9yKX0+XG4gICAgICAgICAgU3BhcmFcbiAgICAgIDwvZGl2PlxuICAgICAgeyF3cml0ZUFjY2VzcyAmJiA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2VcIiBvbkNsaWNrPXsoKSA9PiBlZGl0VGFzay5jb3B5VGFzaygpLmNhdGNoKHNob3dFcnJvcil9PlxuICAgICAgICAgIFNrYXBhIGtvcGlhIGF2IGRlbiBow6RyIHVwcGdpZnRlblxuICAgICAgPC9kaXY+fVxuICA8L1JlYWN0LkZyYWdtZW50Pjtcbn1cblxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVGFzayB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IFd5c2l3eWcgfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zyc7XG5pbXBvcnQgYWN0aW9uc19zd2VkaXNoIGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YnO1xuaW1wb3J0IHsgRWRpdFRhc2sgfSBmcm9tICcuL2VkaXQtdGFzayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBUYXNrQ29udGVudEZyYWdtZW50KHt3cml0ZUFjY2VzcywgdGFzaywgZWRpdFRhc2t9OiB7d3JpdGVBY2Nlc3M6IGJvb2xlYW4sIHRhc2s6IFRhc2ssIGVkaXRUYXNrOiBFZGl0VGFza30pIHtcbiAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgIDxoMz5VcHBnaWZ0ZW5zIGlubmVow6VsbDwvaDM+XG4gICAgICB7d3JpdGVBY2Nlc3MgJiYgPHA+XG4gICAgICAgICAgT20gdXBwZ2lmdGVuIGludGUgbMOkbmthciB0aWxsIG7DpWdvdCBkb2t1bWVudCBrYW4gZHUgbMOkZ2dhIGlubmVow6VsbCBow6RyLlxuICAgICAgPC9wPn1cbiAgICAgIDxXeXNpd3lnIGFjdGlvbnM9e1tcbiAgICAgICAgICBcImJvbGRcIixcbiAgICAgICAgICBcIml0YWxpY1wiLFxuICAgICAgICAgIFwidW5kZXJsaW5lXCIsXG4gICAgICAgICAgXCJzdHJpa2V0aHJvdWdoXCIsXG4gICAgICAgICAgXCJoZWFkaW5nMlwiLFxuICAgICAgICAgIFwiaGVhZGluZzNcIixcbiAgICAgICAgICBcIm9saXN0XCIsXG4gICAgICAgICAgXCJ1bGlzdFwiLFxuICAgICAgICAgIFwibGluZVwiLFxuICAgICAgICAgIFwibGlua1wiLFxuICAgICAgICAgIFwiaW1hZ2VcIlxuICAgICAgXX0gZGVmYXVsdEFjdGlvbnM9e2FjdGlvbnNfc3dlZGlzaH0gcmVhZE9ubHk9eyF3cml0ZUFjY2Vzc30gaHRtbD17dGFzay5jb250ZW50fSBvbkNoYW5nZT17aHRtbCA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3VGFzayA9IHsgLi4udGFzayB9O1xuICAgICAgICAgIG5ld1Rhc2suY29udGVudCA9IGh0bWw7XG4gICAgICAgICAgZWRpdFRhc2suc2V0U3RhdGUoeyB0YXNrOiBuZXdUYXNrIH0pO1xuICAgICAgfSB9IC8+XG4gIDwvUmVhY3QuRnJhZ21lbnQ+O1xufVxuXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgRWRpdFRhc2sgfSBmcm9tICcuL2VkaXQtdGFzayc7XG5pbXBvcnQgeyBFZGl0YWJsZVJlc291cmNlTGlzdCB9IGZyb20gJy4uLy4uL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXJlc291cmNlLWxpc3QnO1xuaW1wb3J0IHsgVGFza0NvbnRlbnRGcmFnbWVudCB9IGZyb20gJy4vdGFzay1jb250ZW50LWZyYWdtZW50JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgd3JpdGVBY2Nlc3M6IGJvb2xlYW47XG4gIHRhc2s6IFRhc2s7XG4gIHRhc2tDdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+O1xuICBlZGl0VGFzazogRWRpdFRhc2s7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBQcmV2aWV3YWJsZVRhc2tGaWVsZHMoe3dyaXRlQWNjZXNzLCB0YXNrLCB0YXNrQ3VzdG9taXphdGlvbiwgZWRpdFRhc2t9OiBQcm9wcykge1xuICByZXR1cm4gPD5cbiAgICA8PlxuICAgICAgPGgzPlVwcGdpZnRlbnMgbMOkcmFuZGVtw6VsPC9oMz5cbiAgICAgIDxkaXY+XG4gICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0VGV4dEJveCBsZWFybmluZy1nb2FsLWJveFwiXG4gICAgICAgICAgZGlzYWJsZWQ9eyF3cml0ZUFjY2Vzc31cbiAgICAgICAgICB2YWx1ZT17dGFzay5sZWFybmluZ0dvYWx9XG4gICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB7IC4uLnRhc2sgfTtcbiAgICAgICAgICAgIG5ld1Rhc2subGVhcm5pbmdHb2FsID0gZXYudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgZWRpdFRhc2suc2V0U3RhdGVQcm9taXNlZCh7IHRhc2s6IG5ld1Rhc2sgfSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvPlxuICAgIDxiciAvPlxuICAgIDw+XG4gICAgICB7KHdyaXRlQWNjZXNzIHx8ICEhdGFzay5jb250ZW50KSAmJiA8VGFza0NvbnRlbnRGcmFnbWVudFxuICAgICAgICB3cml0ZUFjY2Vzcz17d3JpdGVBY2Nlc3N9XG4gICAgICAgIHRhc2s9e3Rhc2t9XG4gICAgICAgIGVkaXRUYXNrPXtlZGl0VGFza30gLz59XG4gICAgPC8+XG4gICAgPD5cbiAgICAgIHt0YXNrQ3VzdG9taXphdGlvbiAmJiB0YXNrQ3VzdG9taXphdGlvbi5yZXNvdXJjZXMgP1xuICAgICAgICA8aDM+UmVzdXJzZXIgZsO2ciB1cHBnaWZ0ZW4gKG1vZGlmaWVyYWQgZsO2ciBkZW5uYSBrdXJzaW5zdGFucyk8L2gzPiA6XG4gICAgICAgIDxoMz5SZXN1cnNlciBrb3BwbGFkZSB0aWxsIHVwcGdpZnRlbjwvaDM+fVxuXG4gICAgICA8RWRpdGFibGVSZXNvdXJjZUxpc3RcbiAgICAgICAgcmVzb3VyY2VzPXtcbiAgICAgICAgICAodGFza0N1c3RvbWl6YXRpb24gJiYgdGFza0N1c3RvbWl6YXRpb24ucmVzb3VyY2VzKSB8fCB0YXNrLnJlc291cmNlc31cbiAgICAgICAgaG9zdD17ZWRpdFRhc2sucHJvcHMuaG9zdH1cbiAgICAgICAgb25VcGRhdGU9e3Jlc291cmNlVXBkYXRlcyA9PiB7XG4gICAgICAgICAgZWRpdFRhc2sudXBkYXRlVGFza09yQ3VzdG9taXphdGlvbihcInJlc291cmNlc1wiLCByZXNvdXJjZVVwZGF0ZXMpO1xuICAgICAgICB9fSAvPlxuICAgIDwvPlxuICA8Lz47XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQ291cnNlLCBDb3Vyc2VNb2R1bGUsIEFiaWxpdHksIFRhc2ssIERvY3VtZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcbmltcG9ydCB7IEtub3dsZWRnZU1hdHJpeCB9IGZyb20gJy4uLy4uL3N1Yi1jb21wb25lbnRzL2tub3dsZWRnZS1tYXRyaXgnO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcbmltcG9ydCB7IERpYWxvZywgSUNvdXJzZUVkaXRvckhvc3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3RcIjtcbmltcG9ydCB7IGhhc1dyaXRlQWNjZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xuaW1wb3J0IHsgU2VsZWN0UmVsYXRlZERvY3MgfSBmcm9tICcuLi8uLi9zdWItY29tcG9uZW50cy9zZWxlY3QtcmVsYXRlZC1kb2NzJztcbmltcG9ydCB2YWxpZFVybCBmcm9tICd2YWxpZC11cmwnO1xuaW1wb3J0IHsgTCwgc2hvd0Vycm9yIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBDYWNoZWRSZXNwb25zZSB9IGZyb20gXCIuLi8uLi8uLi8uLi91dGlscy9jYWNoZWQtcmVzcG9uc2VcIjtcbmltcG9ydCB7IEVkaXRhYmxlUmVzb3VyY2VMaXN0IH0gZnJvbSBcIi4uLy4uL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXJlc291cmNlLWxpc3RcIjtcbmltcG9ydCB7IGR0Rm9ybWF0LCBzaG9ydERhdGVGb3JtYXQsIHNob3J0UGVyc29uTmFtZUZvcm1hdCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xuaW1wb3J0IHsgZnV0dXJlQWJpbGl0aWVzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzXCI7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uLy4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcbmltcG9ydCB7IFd5c2l3eWcgfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zyc7XG5pbXBvcnQgYWN0aW9uc19zd2VkaXNoIGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YnO1xuaW1wb3J0IFJlYWN0RGF0ZVBpY2tlciBmcm9tICdyZWFjdC1kYXRlcGlja2VyJztcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IEZlYXR1cmVzIH0gZnJvbSAnLi4vLi4vLi4vLi4vZmVhdHVyZXMnO1xuaW1wb3J0IHsgU2VhcmNoUmVzdWx0cyB9IGZyb20gJy4vc2VhcmNoLXJlc3VsdHMnO1xuaW1wb3J0IHsgQmFzaWNFZGl0YWJsZVRhc2tGaWVsZHMgfSBmcm9tICcuL2Jhc2ljLWVkaXRhYmxlLXRhc2stZmllbGRzJztcbmltcG9ydCB7IFRhc2tTdGF0dXNGcmFnbWVudCB9IGZyb20gJy4vdGFzay1zdGF0dXMtZnJhZ21lbnQnO1xuaW1wb3J0IHsgU2F2ZU9yQ2FuY2VsQnV0dG9ucyB9IGZyb20gJy4vc2F2ZS1vci1jYW5jZWwtYnV0dG9ucyc7XG5pbXBvcnQgeyBQcmV2aWV3YWJsZVRhc2tGaWVsZHMgfSBmcm9tICcuL3ByZXZpZXdhYmxlLXRhc2stZmllbGRzJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgc2VhcmNoTW9kZT86IGJvb2xlYW47XG4gIHRhc2s/OiBUYXNrO1xuICB0YXNrQ3VzdG9taXphdGlvbj86IFBhcnRpYWw8VGFzaz47XG4gIG1vZHVsZTogQ291cnNlTW9kdWxlO1xuICBjb3Vyc2U6IENvdXJzZTtcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3Q7XG4gIGlkc05vdENvdmVyZWRCeUFueVRhc2s6IHsgW2lkOiBzdHJpbmddOiB0cnVlIH07XG4gIG9uU2F2ZTogKHRhc2s6IFRhc2ssIHRhc2tDdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+KSA9PiBQcm9taXNlPGFueT47XG4gIG9uU2F2ZUN1c3RvbWl6YXRpb246ICh0YXNrQ3VzdG9taXphdGlvbjogUGFydGlhbDxUYXNrPikgPT4gUHJvbWlzZTxhbnk+O1xuICBvblJlcGxhY2U6ICh0YXNrSWQ6IHN0cmluZywgdGFzazogVGFzaykgPT4gUHJvbWlzZTxhbnk+O1xuICBvbkNhbmNlbDogKCkgPT4gdm9pZDtcbiAgb25EZWxldGU6ICgpID0+IHZvaWQ7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIHRhc2s6IFRhc2s7XG4gIHRhc2tDdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+XG4gIGZ1dHVyZUFiaWxpdGllc09wZW46IGJvb2xlYW47XG4gIHNlYXJjaFJlc3VsdD86IFRhc2tbXTtcbiAgc2VhcmNoTWFya2VkSWRzPzogc3RyaW5nW107XG4gIGlzU2VhcmNoaW5nOiBib29sZWFuO1xuICBwcmV2aWV3VGFza0NvbnRlbnQ/OiBzdHJpbmc7IC8vIFRPRE86IFJlbW92ZSB0aGlzIHN0YXRlLiBQcmV2aWV3aW5nIGNvbnRlbnQgaXMgbm93IGVxdWl2YWxlbnQgdG8gY2hlY2tpbmcgYSBjaGVja2JveC5cbn1cblxuZXhwb3J0IGNsYXNzIEVkaXRUYXNrIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4gaW1wbGVtZW50cyBEaWFsb2cge1xuICBzZWFyY2hSZXNwb25zZT86IENhY2hlZFJlc3BvbnNlPFRhc2tbXT47XG4gIGRpYWxvZ0VsZW06IEhUTUxEaXZFbGVtZW50O1xuICBmZWF0dXJlcyA9IG5ldyBGZWF0dXJlcygpO1xuXG4gIHNldFN0YXRlUHJvbWlzZWQoc3RhdGU6IFBhcnRpYWw8U3RhdGU+KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc3VwZXIuc2V0U3RhdGUoKCkgPT4gc3RhdGUgYXMgU3RhdGUsIHJlc29sdmUpKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCB3cml0ZUFjY2VzcyA9ICFwcm9wcy50YXNrIHx8IGhhc1dyaXRlQWNjZXNzKGVudi5jdXJyZW50VXNlciwgcHJvcHMudGFzayk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHRpdGxlOiBwcm9wcy50YXNrID9cbiAgICAgICAgd3JpdGVBY2Nlc3MgP1xuICAgICAgICAgIExgUmVkaWdlcmEgdXBwZ2lmdCB0aWxsIFwiJHtwcm9wcy5tb2R1bGUubmFtZX1cImAgOlxuICAgICAgICAgIExgVmlzYSB1cHBnaWZ0IHRpbGwgXCIke3Byb3BzLm1vZHVsZS5uYW1lfVwiYCA6XG4gICAgICAgIHByb3BzLnNlYXJjaE1vZGUgP1xuICAgICAgICAgIExgU8O2ayBueSB1cHBnaWZ0IHRpbGwgXCIke3Byb3BzLm1vZHVsZS5uYW1lfVwiYCA6XG4gICAgICAgICAgTGBMw6RnZyB0aWxsIGVnZW4gdXBwZ2lmdCB0aWxsIFwiJHtwcm9wcy5tb2R1bGUubmFtZX1cImAsXG4gICAgICBmdXR1cmVBYmlsaXRpZXNPcGVuOiBmYWxzZSxcbiAgICAgIHRhc2tDdXN0b21pemF0aW9uOiBwcm9wcy50YXNrQ3VzdG9taXphdGlvbiB8fCB7fSxcbiAgICAgIHRhc2s6IHByb3BzLnRhc2sgP1xuICAgICAgICAvLyBBIHRhc2sgd2FzIGdpdmVuLiBDbG9uZSBpdCBhbmQgYWRkICRtZXRhOiAndXBkYXRlJyB0byBpdFxuICAgICAgICAvLyB0byBpbmZvcm0gRWRpdENvdXJzZS5zYXZlKCkgdG8gdXBkYXRlIGl0IG9uIGl0cyBvd24gZW50aXR5LlxuICAgICAgICB7XG4gICAgICAgICAgJG1ldGE6IHByb3BzLnRhc2suJG1ldGEgfHwgJ3VwZGF0ZScsXG4gICAgICAgICAgLi4ucHJvcHMudGFza1xuICAgICAgICB9IDogcHJvcHMuc2VhcmNoTW9kZSA/IG51bGwgOlxuICAgICAgICAgIC8vIE5vIHRhc2sgd2FzIGdpdmVuLiBTZXQgJG1ldGEgPSAnYWRkJyB0byBpbmZvcm0gRWRpdENvdXJzZS5zYXZlKClcbiAgICAgICAgICAvLyB0byBhZGQgdGhlIHRhc2sgdG8gdGhlIHRhc2tzIHRhYmxlLlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXG4gICAgICAgICAgICAkbWV0YTogJ2FkZCcsXG4gICAgICAgICAgICB0YWdzOiBbXG4gICAgICAgICAgICAgIGBzdWI6JHtwcm9wcy5jb3Vyc2Uuc3ViamVjdENvZGV9YCxcbiAgICAgICAgICAgICAgYGNvdXJzZToke3Byb3BzLmNvdXJzZS5jb2RlfWBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBzY2hvb2w6ICFwcm9wcy5jb3Vyc2UuaXNUZW1wbGF0ZSAmJiBlbnYuY3VycmVudFVzZXIuc2Nob29sLFxuICAgICAgICAgICAgcmVzb3VyY2VzOiBbXSxcbiAgICAgICAgICAgIGFiaWxpdGllczogW10sXG4gICAgICAgICAgICBjZW50cmFsQ29udGVudDogW10sXG4gICAgICAgICAgICBmdXR1cmVBYmlsaXRpZXM6IFtdLFxuICAgICAgICAgICAga25vd2xlZGdlUmVxdWlyZW1lbnRzOiBbXSxcbiAgICAgICAgICAgIG5hbWU6IFwiXCIsXG4gICAgICAgICAgICB1cmw6IFwiXCIsXG4gICAgICAgICAgICBhY2w6IHByb3BzLmNvdXJzZS5pc1RlbXBsYXRlID8gW1xuICAgICAgICAgICAgICBgcm9sZTpVU0VSOlJgLy8gKE9LIHRvIGtlZXAgYWZ0ZXIga3Vyc2J5Z2ctY2hhbmdlcykuIFRlbXBsYXRlcyAod2hpY2ggd2lsbCBiZSBlbXB0eSEpIHdpbGwgbm90IGhhdmUgdGFza3MuIElmIHRoZXkgaGFkLCBtaWdodCBub3QgdGFza3Mgc2hvdWxkIG5vdCBiZSBwb3NzaWJsZSB0byBtb2RpZnkuIChBbiBBRE1JTiBjb3VsZCBiZWxvbmcgdG8gYSBzY2hvb2whIE90aGVyIG5vbi1hZG1pbnMgYXQgdGhhdCBzY2hvb2wgc2hvdWxkIG5vdCBiZSBhYmxlIHRvIGVkaXQgaXQpXG4gICAgICAgICAgICBdIDogW1xuICAgICAgICAgICAgICAgIGByb2xlOlVTRVI6UmAsXG4gICAgICAgICAgICAgICAgYHNjaG9vbFJvbGU6JHtlbnYuY3VycmVudFVzZXIuc2Nob29sfS9FTVBMT1lFRTpTYFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgIHNlYXJjaE1hcmtlZElkczogcHJvcHMuc2VhcmNoTW9kZSAmJiBbXSxcbiAgICAgIHNlYXJjaFJlc3VsdDogcHJvcHMuc2VhcmNoTW9kZSAmJiBbXSxcbiAgICAgIGlzU2VhcmNoaW5nOiBwcm9wcy5zZWFyY2hNb2RlXG4gICAgfTtcbiAgICBpZiAocHJvcHMuc2VhcmNoTW9kZSkge1xuICAgICAgdGhpcy5zZWFyY2hSZXNwb25zZSA9IG5ldyBDYWNoZWRSZXNwb25zZSgoKSA9PlxuICAgICAgICBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFRhc2s+KFwidGFza3NcIiwge1xuICAgICAgICAgIHRhZ3M6IGBjb3Vyc2U6JHtwcm9wcy5jb3Vyc2UuY29kZX1gLFxuICAgICAgICAgIGluY2x1ZGU6IFsna25vd2xlZGdlUmVxdWlyZW1lbnRzJywgJ2FiaWxpdGllcycsICdjZW50cmFsQ29udGVudCddLFxuICAgICAgICAgIGZsYWdzOiBbJ2luY2x1ZGVJZHNPbmx5J11cbiAgICAgICAgfSkpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNlYXJjaE1vZGUpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7IGlzU2VhcmNoaW5nOiB0cnVlIH0pO1xuICAgICAgdHJ5IHtcbiAgICAgICAgYXdhaXQgdGhpcy5zZWFyY2hSZXNwb25zZS5xdWVyeSgpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWFyY2hNYXJrZWRJZHMgJiYgdGhpcy5zdGF0ZS5zZWFyY2hNYXJrZWRJZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVTZWFyY2hSZXN1bHQodGhpcy5zdGF0ZS5zZWFyY2hNYXJrZWRJZHMpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgc2hvd0Vycm9yKGVycik7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBhd2FpdCB0aGlzLnNldFN0YXRlUHJvbWlzZWQoeyBpc1NlYXJjaGluZzogZmFsc2UgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlU2VhcmNoTWFya2VkSWRzKHNlYXJjaE1hcmtlZElkczogc3RyaW5nW10pIHtcbiAgICBjb25zdCBzZXRTdGF0ZVByb21pc2UgPSB0aGlzLnNldFN0YXRlUHJvbWlzZWQoeyB0YXNrOiBudWxsLCBzZWFyY2hNYXJrZWRJZHMsIHByZXZpZXdUYXNrQ29udGVudDogbnVsbCB9KTtcbiAgICBpZiAoIXRoaXMuc2VhcmNoUmVzcG9uc2UucmVzdWx0KSB7XG4gICAgICBhd2FpdCB0aGlzLnNlYXJjaFJlc3BvbnNlLnByb21pc2U7XG4gICAgICAvLyBSZWZyZXNoIHNlYXJjaE1hcmtlZElkcyBub3cgYXMgdXNlciBtaWdodCBoYXZlIGNsaWNrZWQgYXJvdW5kIHdoaWxlIHdhaXRpbmcgZm9yXG4gICAgICAvLyB0YXNrcyB0byBsb2FkLi4uXG4gICAgICBhd2FpdCBzZXRTdGF0ZVByb21pc2U7IC8vIFNvIHdlIGtub3cgc3RhdGUgaGFzIGJlZW4gcmVmbGVjdGVkLi4uXG4gICAgICBzZWFyY2hNYXJrZWRJZHMgPSB0aGlzLnN0YXRlLnNlYXJjaE1hcmtlZElkcztcbiAgICB9XG4gICAgYXdhaXQgdGhpcy51cGRhdGVTZWFyY2hSZXN1bHQoc2VhcmNoTWFya2VkSWRzKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVNlYXJjaFJlc3VsdChzZWFyY2hNYXJrZWRJZHM6IHN0cmluZ1tdKSB7XG4gICAgY29uc3QgYWxsVGFza3NGb3JTdWJqZWN0ID0gYXdhaXQgdGhpcy5zZWFyY2hSZXNwb25zZS5xdWVyeSgpO1xuXG4gICAgY29uc3Qgc2VhcmNoUmVzdWx0ID0gYWxsVGFza3NGb3JTdWJqZWN0LmZpbHRlcih0ID0+XG4gICAgICBzZWFyY2hNYXJrZWRJZHMuZXZlcnkoaWQgPT5cbiAgICAgICAgdC5rbm93bGVkZ2VSZXF1aXJlbWVudHMuc29tZShrciA9PiBrci5pZCA9PT0gaWQpIHx8XG4gICAgICAgIHQuYWJpbGl0aWVzLnNvbWUoYSA9PiBhLmlkID09PSBpZCkgfHxcbiAgICAgICAgdC5jZW50cmFsQ29udGVudC5zb21lKGMgPT4gYy5pZCA9PT0gaWQpKSk7XG5cbiAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoe1xuICAgICAgc2VhcmNoUmVzdWx0XG4gICAgfSk7XG4gIH1cblxuICBvbk1hcmtDaGFuZ2VkKGlkOiBzdHJpbmcsIGlzTWFya2VkOiBib29sZWFuKSB7XG4gICAgY29uc3QgeyBzZWFyY2hNb2RlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmIChzZWFyY2hNb2RlKSB7XG4gICAgICBjb25zdCB7IHNlYXJjaE1hcmtlZElkcyB9ID0gdGhpcy5zdGF0ZTtcbiAgICAgIHRoaXMudXBkYXRlU2VhcmNoTWFya2VkSWRzKGlzTWFya2VkID9cbiAgICAgICAgc2VhcmNoTWFya2VkSWRzLmNvbmNhdChpZCkgOlxuICAgICAgICBzZWFyY2hNYXJrZWRJZHMuZmlsdGVyKHggPT4geCAhPT0gaWQpKS5jYXRjaChzaG93RXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZUxpbmsoaWQsIGlzTWFya2VkKTtcbiAgfVxuXG4gIHVwZGF0ZUxpbmsoaWQ6IHN0cmluZywgbGlua09yVW5saW5rOiBib29sZWFuKSB7XG4gICAgY29uc3QgeyBjb3Vyc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB0YXNrIH0gPSB0aGlzLnN0YXRlO1xuICAgIC8vIE9uZSBvZiB0aGUgZm9sbG93aW5nIHRocmVlIHdpbGwgYmUgZm91bmQ6XG4gICAgY29uc3QgYWJpbGl0eSA9IGNvdXJzZS5hYmlsaXRpZXMuZmluZChhID0+IGEuaWQgPT09IGlkKTtcbiAgICBjb25zdCBrbm93bGVkZ2VSZXF1aXJlbWVudCA9IGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZmluZChyID0+IHIuaWQgPT09IGlkKTtcbiAgICBjb25zdCBjZW50cmFsQ29udGVudCA9IGNvdXJzZS5jZW50cmFsQ29udGVudC5maW5kKGNjID0+IGNjLmlkID09PSBpZCk7XG5cbiAgICBjb25zdCBbY29sbGVjdGlvblByb3AsIGl0ZW1dID1cbiAgICAgIGFiaWxpdHkgP1xuICAgICAgICBbXCJhYmlsaXRpZXNcIiwgYWJpbGl0eV0gOlxuICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudCA/XG4gICAgICAgICAgW1wia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIGtub3dsZWRnZVJlcXVpcmVtZW50XSA6XG4gICAgICAgICAgY2VudHJhbENvbnRlbnQgP1xuICAgICAgICAgICAgW1wiY2VudHJhbENvbnRlbnRcIiwgY2VudHJhbENvbnRlbnRdIDpcbiAgICAgICAgICAgIFtudWxsLCBudWxsXTtcblxuICAgIGlmICghY29sbGVjdGlvblByb3ApIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgZmluZCBtYXJrZWQgaWQgXCIgKyBpZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdXBkYXRlZENvbGxlY3Rpb246IERvY3VtZW50W10gPSB0YXNrW2NvbGxlY3Rpb25Qcm9wXS5zbGljZSgpO1xuICAgIGNvbnN0IGN1cnJlbnRQb3MgPSB1cGRhdGVkQ29sbGVjdGlvbi5maW5kSW5kZXgoZG9jID0+IGRvYy5pZCA9PT0gaWQpO1xuICAgIGlmIChsaW5rT3JVbmxpbmspIHtcbiAgICAgIGlmIChjdXJyZW50UG9zIDwgMCkge1xuICAgICAgICB1cGRhdGVkQ29sbGVjdGlvbi5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA+PSAwKSB7XG4gICAgICAgIHVwZGF0ZWRDb2xsZWN0aW9uLnNwbGljZShjdXJyZW50UG9zLCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGVkVGFzayA9IHsgLi4udGFzayB9O1xuICAgIHVwZGF0ZWRUYXNrW2NvbGxlY3Rpb25Qcm9wXSA9IHVwZGF0ZWRDb2xsZWN0aW9uO1xuXG4gICAgLy8gQ2xlYXIgbWlncmF0ZWRUZXh0cyBmcm9tIHRhc2suXG4gICAgLy8gRmlyc3QgZGVlcCBjbG9uZTpcbiAgICBpZiAodGFzayAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMpIHtcbiAgICAgIHVwZGF0ZWRUYXNrLm1pZ3JhdGVkVGV4dHMgPSB7Li4udGFzay5taWdyYXRlZFRleHRzfTtcbiAgICAgIGlmICh0YXNrLm1pZ3JhdGVkVGV4dHNbY29sbGVjdGlvblByb3BdKSB7XG4gICAgICAgIHVwZGF0ZWRUYXNrLm1pZ3JhdGVkVGV4dHNbY29sbGVjdGlvblByb3BdID0gey4uLnRhc2subWlncmF0ZWRUZXh0c1tjb2xsZWN0aW9uUHJvcF19O1xuICAgICAgICAvLyBEZWxldGUgdGhlIGlkIHdpdGhpbiB0aGUgZGVlcCBjbG9uZTpcbiAgICAgICAgZGVsZXRlIHVwZGF0ZWRUYXNrLm1pZ3JhdGVkVGV4dHNbY29sbGVjdGlvblByb3BdW2lkXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoe1xuICAgICAgdGFzazogdXBkYXRlZFRhc2tcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIHNhdmUoKSB7XG4gICAgY29uc3QgeyB0YXNrLCB0YXNrQ3VzdG9taXphdGlvbiB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB3cml0ZUFjY2VzcyA9IGhhc1dyaXRlQWNjZXNzKGVudi5jdXJyZW50VXNlciwgdGFzayk7XG4gICAgaWYgKHdyaXRlQWNjZXNzKSB7XG4gICAgICBpZiAoIXRhc2sudXJsICYmICF0YXNrLmNvbnRlbnQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihMYFVwcGdpZnRlbiBtw6VzdGUgYW50aW5nZW4gaGEgZW4gVVJMIGVsbGVyIGV0dCBpbm5laMOlbGxgKTtcbiAgICAgIGlmICh0YXNrLnVybCAmJiAhdmFsaWRVcmwuaXNVcmkodGFzay51cmwpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTGBBbmdpdmVuIFVSTCAnJHt0YXNrLnVybH0nIMOkciBvZ2lsdGlnLiBEZW4gc2thIGLDtnJqYSBtZWQgaHR0cDogZWxsZXIgaHR0cHM6YCk7XG4gICAgICBpZiAodGhpcy5wcm9wcy50YXNrICYmIHRoaXMucHJvcHMudGFzay5pZCAhPT0gdGFzay5pZCkge1xuICAgICAgICAvLyBSZXBsYWNlIGV4aXN0aW5nIHRhc2sgd2l0aCBjb3B5XG4gICAgICAgIGF3YWl0IHRoaXMucHJvcHMub25SZXBsYWNlKHRoaXMucHJvcHMudGFzay5pZCwgdGFzayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBVcGRhdGUgZXhpc3RpbmcgdGFza1xuICAgICAgICBhd2FpdCB0aGlzLnByb3BzLm9uU2F2ZSh0YXNrLCBudWxsKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMuc2VhcmNoTW9kZSkge1xuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5vblNhdmUodGFzaywgdGFza0N1c3RvbWl6YXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5jb3Vyc2UuaXNUZW1wbGF0ZSAmJiB0YXNrLiRtZXRhID09PSAnYWRkJylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKExgRHUgc2FrbmFyIGJlaMO2cmlnaGV0IGbDtnIgYXR0IHNwYXJhIG55YSB2ZXJzaW9uZXIgYXYgdXBwZ2lmdGVyIGkga3Vyc21hbGxlbmApO1xuXG4gICAgICBhd2FpdCB0aGlzLnByb3BzLm9uU2F2ZUN1c3RvbWl6YXRpb24odGFza0N1c3RvbWl6YXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGNvcHlUYXNrKCkge1xuICAgIGNvbnN0IHRhc2tDb3B5ID0ge1xuICAgICAgLi4udGhpcy5zdGF0ZS50YXNrLFxuICAgICAgLi4uKHRoaXMuc3RhdGUudGFza0N1c3RvbWl6YXRpb24gfHwge30pLFxuICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcbiAgICAgIGFjbDogdGhpcy5wcm9wcy5jb3Vyc2UuaXNUZW1wbGF0ZSA/IFtcbiAgICAgICAgYHJvbGU6VVNFUjpSYCAvLyAoT0sgdG8ga2VlcCBidXQgdGhpcyBjaGVjayBtaWdodCBiZWNvbWUgdW5uZXNjZXNhcnkgaWYgd2UgdG90YWxseSByZW1vdmUgdGhlIHBvc3NpYmlsaXR5IHRvIGVkaXQgdGVtcGxhdGVzKSBUZW1wbGF0ZSB0YXNrcyBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG1vZGlmeS4gKEFuIEFETUlOIGNvdWxkIGJlbG9uZyB0byBhIHNjaG9vbCEgT3RoZXIgbm9uLWFkbWlucyBhdCB0aGF0IHNjaG9vbCBzaG91bGQgbm90IGJlIGFibGUgdG8gZWRpdCBpdClcbiAgICAgIF0gOiBbXG4gICAgICAgIGByb2xlOlVTRVI6UmAsXG4gICAgICAgIGBzY2hvb2xSb2xlOiR7ZW52LmN1cnJlbnRVc2VyLnNjaG9vbH0vRU1QTE9ZRUU6U2BcbiAgICAgIF0sXG4gICAgICBzY2hvb2w6IHRoaXMucHJvcHMuY291cnNlLnNjaG9vbFxuICAgIH07XG4gICAgdGFza0NvcHkuJG1ldGEgPSAnYWRkJztcblxuICAgIGF3YWl0IHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7XG4gICAgICB0YXNrOiB0YXNrQ29weSxcbiAgICAgIHRpdGxlOiBMYFJlZGlnZXJhIGtvcGllcmFkIHVwcGdpZnQgdGlsbCBcIiR7dGhpcy5wcm9wcy5tb2R1bGUubmFtZX1cImAsXG4gICAgICB0YXNrQ3VzdG9taXphdGlvbjogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH1cblxuICBnZXRUYXNrUHJvcDxUIGV4dGVuZHMga2V5b2YgVGFzaz4odGFza1Byb3A6IFQpIDogVGFza1tUXSB7XG4gICAgY29uc3Qge3Rhc2ssIHRhc2tDdXN0b21pemF0aW9ufSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgY3VzdG9taXphdGlvbiA9IHRhc2tDdXN0b21pemF0aW9uICYmIHRhc2tDdXN0b21pemF0aW9uW3Rhc2tQcm9wXTtcbiAgICByZXR1cm4gY3VzdG9taXphdGlvbiAhPT0gdW5kZWZpbmVkID9cbiAgICAgIGN1c3RvbWl6YXRpb24gOlxuICAgICAgdGFza1t0YXNrUHJvcF07XG4gIH1cblxuICB1cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uICh0YXNrUHJvcDoga2V5b2YgVGFzaywgdXBkYXRlcykge1xuICAgIGNvbnN0IHt0YXNrLCB0YXNrQ3VzdG9taXphdGlvbn0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHdyaXRlQWNjZXNzID0gdGFzayAmJiBoYXNXcml0ZUFjY2VzcyhlbnYuY3VycmVudFVzZXIsIHRhc2spO1xuICAgIGlmICh3cml0ZUFjY2VzcyAmJiAoIXRhc2tDdXN0b21pemF0aW9uIHx8IHRhc2tDdXN0b21pemF0aW9uW3Rhc2tQcm9wXSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgY29uc3QgbmV3VGFzayA9IHsuLi50YXNrfTtcbiAgICAgIG5ld1Rhc2tbdGFza1Byb3BdID0gdXBkYXRlKHRhc2tbdGFza1Byb3BdLCB1cGRhdGVzKTtcbiAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7dGFzazogbmV3VGFza30pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdDdXN0b21pemF0aW9uID0gey4uLnRhc2tDdXN0b21pemF0aW9ufTtcbiAgICAgIG5ld0N1c3RvbWl6YXRpb25bdGFza1Byb3BdID0gdXBkYXRlIChcbiAgICAgICAgbmV3Q3VzdG9taXphdGlvblt0YXNrUHJvcF0gfHwgdGFza1t0YXNrUHJvcF0sXG4gICAgICAgIHVwZGF0ZXNcbiAgICAgICk7XG4gICAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoe3Rhc2tDdXN0b21pemF0aW9uOiBuZXdDdXN0b21pemF0aW9ufSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY291cnNlLCBtb2R1bGUsIG9uQ2FuY2VsLCBvbkRlbGV0ZSwgaWRzTm90Q292ZXJlZEJ5QW55VGFzaywgc2VhcmNoTW9kZSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHRhc2ssIHRhc2tDdXN0b21pemF0aW9uLCB0aXRsZSwgc2VhcmNoUmVzdWx0LCBzZWFyY2hNYXJrZWRJZHMsIGlzU2VhcmNoaW5nIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IG1hcmtlZElkcyA9IHNlYXJjaE1vZGUgP1xuICAgICAgc2VhcmNoTWFya2VkSWRzIDpcbiAgICAgIHRhc2suY2VudHJhbENvbnRlbnQubWFwKHggPT4geC5pZClcbiAgICAgICAgLmNvbmNhdCh0YXNrLmFiaWxpdGllcy5tYXAoeCA9PiB4LmlkKSlcbiAgICAgICAgLmNvbmNhdCh0YXNrLmtub3dsZWRnZVJlcXVpcmVtZW50cy5tYXAoeCA9PiB4LmlkKSk7XG5cbiAgICBjb25zdCB3cml0ZUFjY2VzcyA9IHRhc2sgJiYgaGFzV3JpdGVBY2Nlc3MoZW52LmN1cnJlbnRVc2VyLCB0YXNrKTtcbiAgICBjb25zdCB0YXNrVXJsVmFsaWQgPSB0YXNrICYmIHZhbGlkVXJsLmlzVXJpKHRhc2sudXJsKTtcbiAgICBjb25zdCB7ZmVhdHVyZXN9ID0gdGhpcztcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LXNwYWNlci0yMHB4dnQgc3YtdmVydGljYWwgc3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2Vjb250ZW50IHN2LWxheW91dCBzdi1zcGFjZXItMjBweHZ0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtdGV4dC1wb3J0bGV0IHN2LXVzZS1tYXJnaW5zIHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi10ZXh0LXBvcnRsZXQtY29udGVudFwiPlxuICAgICAgICAgICAgPGgxIGNsYXNzTmFtZT1cImgxXCI+e3RpdGxlfTwvaDE+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWZsdWlkLWdyaWQgc3YtZ3JpZC1rc2dzMTIgc3YtbGF5b3V0XCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXIgc3YtY29sdW1uLTZcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIj5cbiAgICAgICAgICAgICAgICA8aDM+e3NlYXJjaE1vZGUgP1xuICAgICAgICAgICAgICAgICAgXCJGaWx0cmVyYSBww6Uga3Vuc2thcHNrcmF2XCIgOiB3cml0ZUFjY2VzcyA/XG4gICAgICAgICAgICAgICAgICAgIFwiVsOkbGoga3Vuc2thcHNrcmF2XCIgOlxuICAgICAgICAgICAgICAgICAgICBcIkt1bnNrYXBza3JhdlwifTwvaDM+XG4gICAgICAgICAgICAgICAge3NlYXJjaE1vZGUgP1xuICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIE1hcmtlcmEgZGUga3Vuc2thcHNrcmF2IHNvbSB1cHBnaWZ0ZW4gbcOlc3RlIHTDpGNrYS5cbiAgICAgICAgICAgICAgICAgIDwvcD4gOiB3cml0ZUFjY2VzcyAmJlxuICAgICAgICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgICAgICAgIE1hcmtlcmEgZGUga3Vuc2thcHNrcmF2IHNvbSBkaW4gdXBwZ2lmdCB0w6Rja2VyLlxuICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA8S25vd2xlZGdlTWF0cml4XG4gICAgICAgICAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM9e2NvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHN9XG4gICAgICAgICAgICAgICAgICBtYXJrZWRJZHM9e21hcmtlZElkc31cbiAgICAgICAgICAgICAgICAgIGlkc1RvTWFya05vdE9rPXtpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrfVxuICAgICAgICAgICAgICAgICAgbWFya01vZGU9e3NlYXJjaE1vZGUgfHwgd3JpdGVBY2Nlc3N9XG4gICAgICAgICAgICAgICAgICBtaWdyYXRlZElkcz17dGFzayAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMgJiYgdGFzay5taWdyYXRlZFRleHRzLmtub3dsZWRnZVJlcXVpcmVtZW50c31cbiAgICAgICAgICAgICAgICAgIG9uTWFya0NoYW5nZWQ9e3RoaXMub25NYXJrQ2hhbmdlZC5iaW5kKHRoaXMpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cbiAgICAgICAgICAgICAgPFNlbGVjdFJlbGF0ZWREb2NzXG4gICAgICAgICAgICAgICAgb3B0aW9ucz17Y291cnNlLmFiaWxpdGllc31cbiAgICAgICAgICAgICAgICB0aXRsZT17d3JpdGVBY2Nlc3MgfHwgc2VhcmNoTW9kZSA/IFwiVsOkbGogZsO2cm3DpWdvclwiIDogXCJGw7ZybcOlZ29yXCJ9XG4gICAgICAgICAgICAgICAgbWFya2VkSWRzPXttYXJrZWRJZHN9XG4gICAgICAgICAgICAgICAgbWFya01vZGU9e3dyaXRlQWNjZXNzIHx8IHNlYXJjaE1vZGV9XG4gICAgICAgICAgICAgICAgbWlncmF0ZWRJZHM9e3Rhc2sgJiYgdGFzay5taWdyYXRlZFRleHRzICYmIHRhc2subWlncmF0ZWRUZXh0cy5hYmlsaXRpZXN9XG4gICAgICAgICAgICAgICAgb25NYXJrQ2hhbmdlZD17dGhpcy5vbk1hcmtDaGFuZ2VkLmJpbmQodGhpcyl9XG4gICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cbiAgICAgICAgICAgICAgPFNlbGVjdFJlbGF0ZWREb2NzXG4gICAgICAgICAgICAgICAgb3B0aW9ucz17Y291cnNlLmNlbnRyYWxDb250ZW50fVxuICAgICAgICAgICAgICAgIHRpdGxlPXt3cml0ZUFjY2VzcyB8fCBzZWFyY2hNb2RlID8gXCJWw6RsaiBjZW50cmFsdCBpbm5laMOlbGxcIiA6IFwiQ2VudHJhbHQgaW5uZWjDpWxsXCJ9XG4gICAgICAgICAgICAgICAgbWFya2VkSWRzPXttYXJrZWRJZHN9XG4gICAgICAgICAgICAgICAgbWFya01vZGU9e3dyaXRlQWNjZXNzIHx8IHNlYXJjaE1vZGV9XG4gICAgICAgICAgICAgICAgbWlncmF0ZWRJZHM9e3Rhc2sgJiYgdGFzay5taWdyYXRlZFRleHRzICYmIHRhc2subWlncmF0ZWRUZXh0cy5jZW50cmFsQ29udGVudH1cbiAgICAgICAgICAgICAgICBvbk1hcmtDaGFuZ2VkPXt0aGlzLm9uTWFya0NoYW5nZWQuYmluZCh0aGlzKX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICB7IXNlYXJjaE1vZGUgJiYgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPjxkaXYgY2xhc3NOYW1lPXtcIm9wZW5DbG9zZSBsYXJnZXJcIiArICh0aGlzLnN0YXRlLmZ1dHVyZUFiaWxpdGllc09wZW4gPyBcIiBvcGVuXCIgOiBcIlwiKX0+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3BlbkhlYWRlclwiIG9uQ2xpY2s9eygpID0+IHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7IGZ1dHVyZUFiaWxpdGllc09wZW46ICF0aGlzLnN0YXRlLmZ1dHVyZUFiaWxpdGllc09wZW4gfSl9PlxuICAgICAgICAgICAgICAgIHt3cml0ZUFjY2VzcyA/XG4gICAgICAgICAgICAgICAgICA8cD5Ww6RsaiB5dHRlcmxpZ2FyZSBhbHRlcm5hdGl2PC9wPiA6XG4gICAgICAgICAgICAgICAgICA8cD5ZdHRlcmxpZ2FyZSBhbHRlcm5hdGl2PC9wPn1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3BlbkNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICA8aDQ+RnJhbXRpZHNmw7ZybcOlZ29yPC9oND5cblxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAge2Z1dHVyZUFiaWxpdGllcy5tYXAoZmEgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRhc2suZnV0dXJlQWJpbGl0aWVzLmluZGV4T2YoZmEpID49IDA7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIiBrZXk9e2ZhfT5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e1wiY2hlY2tCb3hcIiArIChzZWxlY3RlZCA/IFwiIGNoZWNrZWRcIiA6IFwiXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt3cml0ZUFjY2VzcyA/ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkVGFzayA9IHsgLi4udGFzayB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRUYXNrLmZ1dHVyZUFiaWxpdGllcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suZnV0dXJlQWJpbGl0aWVzLmZpbHRlcihhID0+IGEgIT0gZmEpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFzay5mdXR1cmVBYmlsaXRpZXMuY29uY2F0KGZhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoeyB0YXNrOiB1cGRhdGVkVGFzayB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZH0gLz5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPntmYX1cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDwvZGl2PjwvZGl2Pn1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1jb2x1bW4tNlwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgICAgICAgICB7aXNTZWFyY2hpbmcgJiYgPHA+PFNwaW5uZXIgLz4gTGFkZGFyIHVwcGdpZnRlci4uLjwvcD59XG4gICAgICAgICAgICAgIHtzZWFyY2hSZXN1bHQgPyBcbiAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICogU2VhcmNoIFJlc3VsdHMgRnJhZ2VudFxuICAgICAgICAgICAgICAgICAgKiBcbiAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFNlYXJjaFJlc3VsdHNcbiAgICAgICAgICAgICAgICAgIHNlYXJjaE1hcmtlZElkcz17c2VhcmNoTWFya2VkSWRzfVxuICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0PXtzZWFyY2hSZXN1bHR9XG4gICAgICAgICAgICAgICAgICB0YXNrPXt0YXNrfVxuICAgICAgICAgICAgICAgICAgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfVxuICAgICAgICAgICAgICAgICAgdGFza0N1c3RvbWl6YXRpb249e3Rhc2tDdXN0b21pemF0aW9ufVxuICAgICAgICAgICAgICAgICAgZWRpdFRhc2s9e3RoaXN9IC8+XG5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnQgPyBcbiAgICAgICAgICAgICAgICAgIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHRoaXMuc3RhdGUucHJldmlld1Rhc2tDb250ZW50fX0gLz5cbiAgICAgICAgICAgICAgICA6IHRhc2sgJiYgPFByZXZpZXdhYmxlVGFza0ZpZWxkc1xuICAgICAgICAgICAgICAgICAgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfVxuICAgICAgICAgICAgICAgICAgdGFzaz17dGFza31cbiAgICAgICAgICAgICAgICAgIHRhc2tDdXN0b21pemF0aW9uPXt0YXNrQ3VzdG9taXphdGlvbn1cbiAgICAgICAgICAgICAgICAgIGVkaXRUYXNrPXt0aGlzfSAvPn1cblxuICAgICAgICAgICAgICAgIHt0YXNrICYmIDxUYXNrU3RhdHVzRnJhZ21lbnQgdGFzaz17dGFza30gLz59XG4gICAgICAgICAgICAgIDwvPiA6IFxuXG4gICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAqIEVkaXQgVGFza3MgRnJhZ21lbnRcbiAgICAgICAgICAgICAgICAgICogXG4gICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIHt0YXNrICYmIDxCYXNpY0VkaXRhYmxlVGFza0ZpZWxkc1xuICAgICAgICAgICAgICAgICAgdGFzaz17dGFza31cbiAgICAgICAgICAgICAgICAgIGNvdXJzZT17Y291cnNlfVxuICAgICAgICAgICAgICAgICAgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfVxuICAgICAgICAgICAgICAgICAgZmVhdHVyZXM9e2ZlYXR1cmVzfVxuICAgICAgICAgICAgICAgICAgZWRpdFRhc2s9e3RoaXN9IC8+fVxuXG4gICAgICAgICAgICAgICAge3Rhc2sgJiYgPFByZXZpZXdhYmxlVGFza0ZpZWxkc1xuICAgICAgICAgICAgICAgICAgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfVxuICAgICAgICAgICAgICAgICAgdGFzaz17dGFza31cbiAgICAgICAgICAgICAgICAgIHRhc2tDdXN0b21pemF0aW9uPXt0YXNrQ3VzdG9taXphdGlvbn1cbiAgICAgICAgICAgICAgICAgIGVkaXRUYXNrPXt0aGlzfSAvPn1cblxuICAgICAgICAgICAgICAgIHt0YXNrICYmIDxUYXNrU3RhdHVzRnJhZ21lbnQgdGFzaz17dGFza30gLz59XG4gICAgICAgICAgICAgIDwvPn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAge3Rhc2sgJiYgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxuICAgICAgICAgICAgICA8aHIgLz5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDxTYXZlT3JDYW5jZWxCdXR0b25zIHdyaXRlQWNjZXNzPXt3cml0ZUFjY2Vzc30gZWRpdFRhc2s9e3RoaXN9IC8+XG4gICAgICAgICAgICA8L2Rpdj59XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj48L2Rpdj5cbiAgfVxufVxuXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgVGFzaywgQ291cnNlLCBDb3Vyc2VNb2R1bGUsIEFiaWxpdHkgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBFZGl0VGFzayB9IGZyb20gJy4uL21vZGFsLXBhZ2VzL2VkaXQtdGFzayc7XG5pbXBvcnQgeyBJQ291cnNlRWRpdG9ySG9zdCB9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcbmltcG9ydCB7IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzLCBoYXNNaWdyYXRlZFRleHRzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBoYXNXcml0ZUFjY2VzcyB9IGZyb20gXCIuLi8uLi8uLi9hY2Nlc3MtY29udHJvbFwiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICB0YXNrSWRzOiBzdHJpbmdbXTtcbiAgdGFza0N1c3RvbWl6YXRpb25zPzogeyBbdGFza0lkOiBzdHJpbmddOiBQYXJ0aWFsPFRhc2s+IH1cbiAgY291cnNlOiBDb3Vyc2U7XG4gIG1vZHVsZTogQ291cnNlTW9kdWxlO1xuICBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrOiB7W2lkOiBzdHJpbmddOiB0cnVlfTtcbiAgb25UYXNrQWRkZWQ6ICh0YXNrOiBUYXNrLCB0YXNrQ3VzdG9taXphdGlvbj86IFBhcnRpYWw8VGFzaz4pID0+IHZvaWQ7XG4gIG9uVGFza1VwZGF0ZWQ6ICh0YXNrKSA9PiB2b2lkO1xuICBvblRhc2tDdXN0b21pemF0aW9uVXBkYXRlZDogKHRhc2tJZCwgY3VzdG9taXphdGlvbikgPT4gdm9pZDtcbiAgb25UYXNrRGVsZXRlZDogKGlkKSA9PiB2b2lkO1xuICBvblRhc2tSZXBsYWNlZDogKGlkLCB0YXNrKSA9PiB2b2lkO1xuICBob3N0OiBJQ291cnNlRWRpdG9ySG9zdDtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcblxufVxuXG5leHBvcnQgY2xhc3MgRWRpdGFibGVUYXNrTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICB9XG5cbiAgb3BlblRhc2tEaWFsb2codGFzazogVGFzaykge1xuICAgIGNvbnN0IHtcbiAgICAgIHRhc2tDdXN0b21pemF0aW9ucyxcbiAgICAgIGNvdXJzZSxcbiAgICAgIGhvc3QsXG4gICAgICBtb2R1bGUsXG4gICAgICB0YXNrSWRzLFxuICAgICAgb25UYXNrQWRkZWQsXG4gICAgICBvblRhc2tVcGRhdGVkLFxuICAgICAgb25UYXNrQ3VzdG9taXphdGlvblVwZGF0ZWQsXG4gICAgICBvblRhc2tEZWxldGVkLFxuICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzayxcbiAgICAgIG9uVGFza1JlcGxhY2VkXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBob3N0Lm9wZW5EaWFsb2coe1xuICAgICAgQ29tcG9uZW50OiBFZGl0VGFzayxcbiAgICAgIHByb3BzOiB7XG4gICAgICAgIHRhc2ssXG4gICAgICAgIHRhc2tDdXN0b21pemF0aW9uOiB0YXNrQ3VzdG9taXphdGlvbnMgJiYgdGFza0N1c3RvbWl6YXRpb25zW3Rhc2suaWRdLFxuICAgICAgICBtb2R1bGUsXG4gICAgICAgIGNvdXJzZSxcbiAgICAgICAgaG9zdCxcbiAgICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzayxcbiAgICAgICAgb25TYXZlOiB0YXNrID0+IHtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkVGFzayA9IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzKHRhc2ssIGVudi5jdXJyZW50VXNlcik7XG4gICAgICAgICAgb25UYXNrVXBkYXRlZCh1cGRhdGVkVGFzayk7XG4gICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xuICAgICAgICB9LFxuICAgICAgICBvblNhdmVDdXN0b21pemF0aW9uOiBjdXN0b21pemF0aW9uID0+IHtcbiAgICAgICAgICBvblRhc2tDdXN0b21pemF0aW9uVXBkYXRlZCh0YXNrLmlkLCBjdXN0b21pemF0aW9uKTtcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uRGVsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgb25UYXNrRGVsZXRlZCh0YXNrLmlkKTtcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uUmVwbGFjZTogKHRhc2tJZDogc3RyaW5nLCBuZXdUYXNrOiBUYXNrKSA9PiB7XG4gICAgICAgICAgb25UYXNrUmVwbGFjZWQodGFza0lkLCBuZXdUYXNrKTtcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2FuY2VsOiAoKSA9PiBob3N0LmNsb3NlRGlhbG9nKClcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIDxkaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cbiAgICAgICAge3Byb3BzLnRhc2tJZHMubWFwKGlkID0+IHByb3BzLmNvdXJzZS50YXNrcy5maW5kKHQgPT4gdC5pZCA9PT0gaWQpKS5tYXAodGFzayA9PiB7XG4gICAgICAgICAgY29uc3QgY2FuVXBkYXRlVGFzayA9IGhhc1dyaXRlQWNjZXNzKGVudi5jdXJyZW50VXNlciwgdGFzayk7XG5cbiAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCIga2V5PXt0YXNrLmlkfT5cbiAgICAgICAgICAgIHtoYXNXcml0ZUFjY2VzcyhlbnYuY3VycmVudFVzZXIsIHRhc2spICYmIGhhc01pZ3JhdGVkVGV4dHModGFzaykgJiYgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgPGRpdiBzdHlsZT17e3Bvc2l0aW9uOidyZWxhdGl2ZScsIHRvcDonMC4yZW0nLCBsZWZ0OiAnLTAuN2VtJ319PlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBhZ2VsaW5lc1wiIHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgdG9wOiAwLCBsZWZ0OiAwLCBjb2xvcjonIzQ5YzM1YSd9fSAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjYW5VcGRhdGVUYXNrID8gXCJlZGl0SXRlbVwiIDogXCJ2aWV3SXRlbVwifSBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMub3BlblRhc2tEaWFsb2codGFzayl9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIHt0YXNrLmNvbnRlbnQgP1xuICAgICAgICAgICAgICAgIC8vIFJhdGhlciB0aGFuIGxpbmtpbmcgdG8gdXJsLCBzaG93IHRoZSB0YXNrJ3MgY29udGVudCAoYnkgb3BlbmluZ1xuICAgICAgICAgICAgICAgIC8vIHRoZSB0YXNrIGRpYWxvZylcbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiI1wiIG9uQ2xpY2s9e2V2PT57XG4gICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgdGhpcy5vcGVuVGFza0RpYWxvZyh0YXNrKTtcbiAgICAgICAgICAgICAgICB9fT57dGFzay5uYW1lfTwvYT4gOlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9e3Rhc2sudXJsfSB0YXJnZXQ9XCJfYmxhbmtcIj57dGFzay5uYW1lfTwvYT59XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj47XG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgICA8YnIgLz5cbiAgICAgIDxhIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGNvdXJzZSxcbiAgICAgICAgICBob3N0LFxuICAgICAgICAgIGlkc05vdENvdmVyZWRCeUFueVRhc2ssXG4gICAgICAgICAgbW9kdWxlLFxuICAgICAgICAgIG9uVGFza0FkZGVkLFxuICAgICAgICAgIG9uVGFza0N1c3RvbWl6YXRpb25VcGRhdGVkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgIHByb3BzLmhvc3Qub3BlbkRpYWxvZyh7XG4gICAgICAgICAgQ29tcG9uZW50OiBFZGl0VGFzayxcbiAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgc2VhcmNoTW9kZTogdHJ1ZSxcbiAgICAgICAgICAgIG1vZHVsZSxcbiAgICAgICAgICAgIGNvdXJzZSxcbiAgICAgICAgICAgIGhvc3QsXG4gICAgICAgICAgICBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrLFxuICAgICAgICAgICAgb25TYXZlOiAoY2hvb3NlblRhc2ssIHRhc2tDdXN0b21pemF0aW9uKSA9PiB7XG4gICAgICAgICAgICAgIGNob29zZW5UYXNrID0gdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMoY2hvb3NlblRhc2ssIGVudi5jdXJyZW50VXNlcik7XG4gICAgICAgICAgICAgIG9uVGFza0FkZGVkKGNob29zZW5UYXNrLCB0YXNrQ3VzdG9taXphdGlvbik7XG4gICAgICAgICAgICAgIGhvc3QuY2xvc2VEaWFsb2coKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gaG9zdC5jbG9zZURpYWxvZygpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH19PjxpIGNsYXNzTmFtZT1cImZhIGZhLXNlYXJjaFwiIGFyaWEtaGlkZGVuIC8+IFPDtmsgdXBwZ2lmdDwvYT5cbiAgICAgICZuYnNwO1xuICAgICAgPGEgb25DbGljaz17KCkgPT4ge1xuICAgICAgICBjb25zdCB7IGNvdXJzZSwgaG9zdCwgbW9kdWxlLCB0YXNrSWRzLCBvblRhc2tBZGRlZCwgb25UYXNrVXBkYXRlZCwgb25UYXNrRGVsZXRlZCwgaWRzTm90Q292ZXJlZEJ5QW55VGFzayB9ID0gdGhpcy5wcm9wcztcbiAgICAgICAgaG9zdC5vcGVuRGlhbG9nKHtcbiAgICAgICAgICBDb21wb25lbnQ6IEVkaXRUYXNrLFxuICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICBtb2R1bGUsXG4gICAgICAgICAgICBjb3Vyc2UsXG4gICAgICAgICAgICBob3N0LFxuICAgICAgICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzayxcbiAgICAgICAgICAgIG9uU2F2ZTogbmV3VGFzayA9PiB7XG4gICAgICAgICAgICAgIG5ld1Rhc2sgPSB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyhuZXdUYXNrLCBlbnYuY3VycmVudFVzZXIpO1xuICAgICAgICAgICAgICBvblRhc2tBZGRlZChuZXdUYXNrKTtcbiAgICAgICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiBob3N0LmNsb3NlRGlhbG9nKClcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfX0gY2xhc3NOYW1lPVwiYnRuXCI+XG4gICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbiAvPiBMw6RnZyB0aWxsIGVnZW4gdXBwZ2lmdFxuICAgICAgPC9hPlxuICAgIDwvZGl2ID5cbiAgfVxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCB7IENvdXJzZSwgQ291cnNlTW9kdWxlLCBJbWFnZSwgVGFzaywgRG9jdW1lbnQsIEFiaWxpdHkgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHsgRWRpdGFibGVSZXNvdXJjZUxpc3QgfSBmcm9tICcuLi9zdWItY29tcG9uZW50cy9lZGl0YWJsZS1yZXNvdXJjZS1saXN0JztcbmltcG9ydCB7IEVkaXRhYmxlVGFza0xpc3QgfSBmcm9tICcuLi9zdWItY29tcG9uZW50cy9lZGl0YWJsZS10YXNrLWxpc3QnO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcbmltcG9ydCB7IElDb3Vyc2VFZGl0b3JIb3N0IH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3QnO1xuaW1wb3J0IHsgUmVuYW1lYWJsZVRleHQgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvcmVuYW1lYWJsZS10ZXh0JztcbmltcG9ydCB7IFJlbW92ZUl0ZW0gfSBmcm9tICcuLi9zdWItY29tcG9uZW50cy9yZW1vdmUtaXRlbSc7XG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IHsgTCwgc2hvd0Vycm9yIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBXeXNpd3lnIH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcnO1xuaW1wb3J0IGFjdGlvbnNfc3dlZGlzaCBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLXN2JztcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9vcGVuLWNsb3NlLWJveCc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGNvdXJzZTogQ291cnNlO1xuICBtb2R1bGU6IENvdXJzZU1vZHVsZTtcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3Q7XG4gIGlkc05vdENvdmVyZWRCeUFueVRhc2s6IHtbaWQ6IHN0cmluZ106IHRydWV9O1xuICBvblJlb3JkZXI6IChkaXJlY3Rpb246IDEgfCAtMSkgPT4gdm9pZDtcbiAgZ2V0T3JkZXJlZE1vZHVsZXM6ICgpPT5Db3Vyc2VNb2R1bGVbXTtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgZWRpdE1hbmRhdG9yeUNvbnRlbnQ6IGJvb2xlYW47XG59XG5cbmNvbnN0IERFRkFVTFRfS05PV0xFREdFX01BVFJJWCA9IFt7XG4gIGFiaWxpdHlJZHM6IFtdLFxuICBFSWRzOiBbXSxcbiAgQ0lkczogW10sXG4gIEFJZHM6IFtdXG59XTtcblxuZXhwb3J0IGNsYXNzIENvdXJzZU1vZHVsZUNvbXBvbmVudCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVkaXRNYW5kYXRvcnlDb250ZW50OiBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIGdldE1vZHVsZUluZGV4KCkge1xuICAgIGNvbnN0IHtjb3Vyc2UsIG1vZHVsZX0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiBjb3Vyc2UubW9kdWxlcy5maW5kSW5kZXgobSA9PiBtLmlkID09PSBtb2R1bGUuaWQpO1xuICB9XG5cbiAgZ2V0TW9kdWxlT3JkZXJJbmRleCgpIHtcbiAgICBjb25zdCB7Y291cnNlLCBtb2R1bGV9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBvcmRlcmVkTW9kdWxlcyA9IHRoaXMucHJvcHMuZ2V0T3JkZXJlZE1vZHVsZXMoKTtcbiAgICByZXR1cm4gb3JkZXJlZE1vZHVsZXMuZmluZEluZGV4KG0gPT4gbS5pZCA9PT0gbW9kdWxlLmlkKTtcbiAgfVxuXG4gIHVwZGF0ZU1vZHVsZShtb2R1bGVVcGRhdGVzKSB7XG4gICAgY29uc3Qge21vZHVsZX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHVwZGF0ZWRNb2R1bGUgPSB1cGRhdGUobW9kdWxlLCBtb2R1bGVVcGRhdGVzKTtcbiAgICBjb25zdCBtb2R1bGVJbmRleCA9IHRoaXMuZ2V0TW9kdWxlSW5kZXgoKTtcbiAgICB0aGlzLnByb3BzLmhvc3QudXBkYXRlKHsgbW9kdWxlczogeyAkc3BsaWNlOiBbW21vZHVsZUluZGV4LCAxLCB1cGRhdGVkTW9kdWxlXV0gfSB9KTtcbiAgfVxuXG4gIC8qIFRoaXMgbWV0aG9kIHdvcmtzIGZvciBib3RoIGFkZGluZyBuZXcgdGFza3MgdG8gdGhlIHRhc2sgdGFibGVcbiAgYW5kIGFkZGluZyByZWZlcmVuY2VzIHRvIGV4aXN0aW5nIHRhc2tzLiBUaGUgbWFnaWMgb2YgdGhhdCBoYXMgdG8gZG8gd2l0aFxuICB3aGV0aGVyIHRhc2suJG1ldGEgPSAnYWRkJyBvciBub3QgYW5kIGlzIGRvbmUgaW4gRWRpdENvdXJzZS5zYXZlKClcbiAgKi9cbiAgb25UYXNrQWRkZWQgKHRhc2s6IFRhc2ssIHRhc2tDdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+IHwgbnVsbCkge1xuICAgIC8vIEFkZCB0YXNrIElEIHRvIG1vZHVsZSB0YXNrSWRzIGxpc3Q6XG4gICAgY29uc3QgY291cnNlVXBkYXRlczphbnkgPSB7fTtcbiAgICBjb25zdCB0YXNrSWRzID0gdGhpcy5wcm9wcy5tb2R1bGUudGFza0lkcy5zbGljZSgpO1xuICAgIHRhc2tJZHMucHVzaCh0YXNrLmlkKTtcbiAgICAvLyBBZGQgcGh5c2ljYWwgVGFzayB0byBDb3Vyc2UudGFza3MuXG4gICAgaWYgKCF0aGlzLnByb3BzLmNvdXJzZS50YXNrcy5zb21lKHQgPT4gdC5pZCA9PT10YXNrLmlkKSkge1xuICAgICAgY291cnNlVXBkYXRlcy50YXNrcyA9IHskcHVzaDogW3Rhc2tdfTtcbiAgICB9XG4gICAgY29uc3QgY3VzdG9taXphdGlvbnMgPSB7Li4uKHRoaXMucHJvcHMubW9kdWxlLnRhc2tDdXN0b21pemF0aW9ucyB8fCB7fSl9O1xuICAgIGlmICh0YXNrQ3VzdG9taXphdGlvbikgY3VzdG9taXphdGlvbnNbdGFzay5pZF0gPSB0YXNrQ3VzdG9taXphdGlvbjtcbiAgICBjb25zdCBtb2R1bGVJbmRleCA9IHRoaXMuZ2V0TW9kdWxlSW5kZXgoKTtcbiAgICBjb3Vyc2VVcGRhdGVzLm1vZHVsZXMgPSB7fTtcbiAgICBjb3Vyc2VVcGRhdGVzLm1vZHVsZXNbbW9kdWxlSW5kZXhdID0ge1xuICAgICAgdGFza0lkczogeyRzZXQ6IHRhc2tJZHN9LFxuICAgICAgdGFza0N1c3RvbWl6YXRpb25zOiB7JHNldDogY3VzdG9taXphdGlvbnN9XG4gICAgfTtcbiAgICAvLyBVcGRhdGUgbW9kdWxlXG4gICAgdGhpcy5wcm9wcy5ob3N0LnVwZGF0ZShjb3Vyc2VVcGRhdGVzKTtcbiAgfVxuXG4gIG9uVGFza1VwZGF0ZWQgKHRhc2s6IFRhc2spIHtcbiAgICBpZiAoIXRhc2suJG1ldGEpIHRocm93IG5ldyBFcnJvcihMYEhvcHBzYW4sIGJsZXYgbGl0ZSBrbmFzLiBGZWwgSUQ6ICR7J1BhN0RxJ31gKTtcbiAgICBjb25zdCB0YXNrSW5kZXggPSB0aGlzLnByb3BzLmNvdXJzZS50YXNrcy5maW5kSW5kZXgodCA9PiB0LmlkID09PSB0YXNrLmlkKTtcbiAgICBpZiAodGFza0luZGV4ID49IDApIHtcbiAgICAgIHRoaXMucHJvcHMuaG9zdC51cGRhdGUoe3Rhc2tzOiB7JHNwbGljZTogW1t0YXNrSW5kZXgsIDEsIHRhc2tdXX19KTtcbiAgICB9XG4gIH1cblxuICBvblRhc2tDdXN0b21pemVkICh0YXNrSWQ6IHN0cmluZywgY3VzdG9taXphdGlvbjogUGFydGlhbDxUYXNrPikge1xuICAgIGNvbnN0IGN1c3RvbWl6YXRpb25zID0gey4uLih0aGlzLnByb3BzLm1vZHVsZS50YXNrQ3VzdG9taXphdGlvbnMgfHwge30pfTtcbiAgICBjdXN0b21pemF0aW9uc1t0YXNrSWRdID0gY3VzdG9taXphdGlvbjtcbiAgICB0aGlzLnVwZGF0ZU1vZHVsZSh7dGFza0N1c3RvbWl6YXRpb25zOiB7JHNldDogY3VzdG9taXphdGlvbnN9fSk7XG4gIH1cblxuICBvblRhc2tEZWxldGVkIChpZDogc3RyaW5nKSB7XG4gICAgLy8gUmVtb3ZlIHRhc2sgSUQgZnJvbSBtb2R1bGUgdGFza0lkcyBsaXN0LlxuICAgIC8vIFRoaXMgZGVwZW5kcyBvbiB0aGUgZmFjdCB0aGF0IEVkaXRDb3Vyc2UuX3NldFN0YXRlKCkgbWFpbnRhaW5zXG4gICAgLy8gcmVtb3ZlZCBUYXNrIGxpbmtzICh3aGljaCBpdCBhY3R1YWxseSBkb2VzIChvciBzaG91bGQgZG8gYXQgbGVhc3QpKS5cbiAgICB0aGlzLnVwZGF0ZU1vZHVsZSh7XG4gICAgICB0YXNrSWRzOiB7JHNldDogdGhpcy5wcm9wcy5tb2R1bGUudGFza0lkcy5maWx0ZXIodGlkID0+IHRpZCAhPT0gaWQpfSxcbiAgICAgIHRhc2tDdXN0b21pemF0aW9uczoge1xuICAgICAgICAkYXBwbHk6IGN1c3RvbWl6YXRpb25zID0+IHtcbiAgICAgICAgICBjb25zdCBjb3B5ID0gey4uLmN1c3RvbWl6YXRpb25zfTtcbiAgICAgICAgICBkZWxldGUgY29weVtpZF07XG4gICAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG9uVGFza1JlcGxhY2VkIChpZDogc3RyaW5nLCB0YXNrOiBUYXNrKSB7XG4gICAgY29uc3QgaWR4VGFzayA9IHRoaXMucHJvcHMubW9kdWxlLnRhc2tJZHMuaW5kZXhPZihpZCk7XG4gICAgaWYgKGlkeFRhc2sgPCAwKSB7XG4gICAgICBzaG93RXJyb3IoTGBLdW5kZSBpbnRlIHNwYXJhIHVwcGdpZnQuIEZlbGtvZCBkNzJrUWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtb2R1bGVVcGRhdGVzID0ge1xuICAgICAgLy8gUmVwbGFjZSBvbGQgaWQgd2l0aCBuZXcgaWQ6XG4gICAgICB0YXNrSWRzOiB7JHNwbGljZTogW1tpZHhUYXNrLCAxLCB0YXNrLmlkXV19LFxuICAgICAgdGFza0N1c3RvbWl6YXRpb25zOiB7XG4gICAgICAgICRhcHBseTogY3VzdG9taXphdGlvbnMgPT4ge1xuICAgICAgICAgIGNvbnN0IGNvcHkgPSB7Li4uY3VzdG9taXphdGlvbnN9O1xuICAgICAgICAgIGRlbGV0ZSBjb3B5W2lkXTtcbiAgICAgICAgICByZXR1cm4gY29weTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB1cGRhdGVkTW9kdWxlID0gdXBkYXRlKHRoaXMucHJvcHMubW9kdWxlLCBtb2R1bGVVcGRhdGVzKTtcbiAgICBjb25zdCBtb2R1bGVJbmRleCA9IHRoaXMuZ2V0TW9kdWxlSW5kZXgoKTtcbiAgICB0aGlzLnByb3BzLmhvc3QudXBkYXRlKHtcbiAgICAgIC8vIEFwcGx5IG1vZHVsZVVwZGF0ZXMgZnJvbSBhYm92ZTpcbiAgICAgIG1vZHVsZXM6IHsgJHNwbGljZTogW1ttb2R1bGVJbmRleCwgMSwgdXBkYXRlZE1vZHVsZV1dIH0sXG4gICAgICAvLyBBZGQgdGhlIG5ldyB0YXNrIHRvIENvdXJzZS50YXNrcy5cbiAgICAgIC8vIERvbid0IHJlbW92ZSB0aGUgb2xkIG9uZSEgV2h5PyBCZWNhdXNlIGl0IG1heSBiZSByZWZlcmVuY2VkXG4gICAgICAvLyBieSBhbm90aGVyIG1vZHVsZSBpbiBzYW1lIGNvdXJzZSEgTGV0IEVkaXRDb3Vyc2UuX3NldFN0YXRlKClcbiAgICAgIC8vIGRvIHRoZSBcImdhcmJhZ2UgY29sbGVjdGlvblwiIGluc3RlYWQuXG4gICAgICB0YXNrczogeyAkc2V0OiB0aGlzLnByb3BzLmNvdXJzZS50YXNrcy5jb25jYXQodGFzayl9XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb3Vyc2UsIGhvc3QsIG1vZHVsZSwgaWRzTm90Q292ZXJlZEJ5QW55VGFzayB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBtb2R1bGVJbmRleCA9IHRoaXMuZ2V0TW9kdWxlSW5kZXgoKTtcbiAgICBjb25zdCBtb2R1bGVPcmRlcmVkSW5kZXggPSB0aGlzLmdldE1vZHVsZU9yZGVySW5kZXgoKTtcbiAgICBsZXQga25vd2xlZGdlTWF0cml4RGl2O1xuXG4gICAgY29uc3QgdXBkYXRlTW9kdWxlID0gdGhpcy51cGRhdGVNb2R1bGUuYmluZCh0aGlzKTtcbiAgICBsZXQgd2VlayA9IDE7XG4gICAgY29uc3Qgc3RhcnRXZWVrT3B0aW9ucyA9IFtcIi0tXCJdO1xuICAgIGNvbnN0IGVuZFdlZWtPcHRpb25zID0gW1wiLS1cIl07XG4gICAgZm9yIChsZXQgaT0wOyBpPDUxOyArK2kpIHtcbiAgICAgIHN0YXJ0V2Vla09wdGlvbnMucHVzaCgnJysgd2Vlayk7XG4gICAgICBlbmRXZWVrT3B0aW9ucy5wdXNoKCcnKyArK3dlZWspO1xuICAgIH1cblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNvdXJzZS1tb2R1bGUga2VkX2JveGVkXCIgc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJ319PlxuICAgICAgPGgzPjxSZW5hbWVhYmxlVGV4dCBlYWdlcj17dHJ1ZX1cbiAgICAgICAgY2xpY2tBZHZlcnRpc2VUZXh0PVwiTmFtbmzDtnMgbW9kdWxcIlxuICAgICAgICBtYXhDaGFycz17MTAwfVxuICAgICAgICB0ZXh0PXttb2R1bGUubmFtZX1cbiAgICAgICAgb25DaGFuZ2U9e25ld05hbWUgPT4gdXBkYXRlTW9kdWxlKHtuYW1lOiB7JHNldDogbmV3TmFtZX19KX0gLz5cbiAgICAgIDwvaDM+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gY2VudGVyXCI+XG4gICAgICAgICAgPHA+U3RhcnR2ZWNrYTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gY2VudGVyXCI+XG4gICAgICAgICAgPHNlbGVjdCB2YWx1ZT17bW9kdWxlLnN0YXJ0V2VlayB8fCBcIi0tXCJ9XG4gICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdXBkYXRlTW9kdWxlKHtzdGFydFdlZWs6IHtcbiAgICAgICAgICAgICAgJHNldDogZXYudGFyZ2V0LnZhbHVlID09PSAnLS0nID9cbiAgICAgICAgICAgICAgICB1bmRlZmluZWQgOlxuICAgICAgICAgICAgICAgIHBhcnNlSW50KGV2LnRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KX0+XG4gICAgICAgICAgICB7c3RhcnRXZWVrT3B0aW9ucy5tYXAobyA9PiA8b3B0aW9uIGtleT17b30gdmFsdWU9e299PntvfTwvb3B0aW9uPil9XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIGNlbnRlclwiPlxuICAgICAgICAgIDxwPlNsdXR2ZWNrYTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gY2VudGVyXCI+XG4gICAgICAgICAgPHNlbGVjdCB2YWx1ZT17bW9kdWxlLmVuZFdlZWsgfHwgXCItLVwifVxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHVwZGF0ZU1vZHVsZSh7ZW5kV2Vlazoge1xuICAgICAgICAgICAgICAkc2V0OiBldi50YXJnZXQudmFsdWUgPT09ICctLScgP1xuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6XG4gICAgICAgICAgICAgICAgcGFyc2VJbnQoZXYudGFyZ2V0LnZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pfT5cbiAgICAgICAgICAgIHtlbmRXZWVrT3B0aW9ucy5tYXAobyA9PiA8b3B0aW9uIGtleT17b30gdmFsdWU9e299PntvfTwvb3B0aW9uPil9XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8aDQ+S3Vyc21vZHVsZW5zIGludHJvZHVrdGlvbjwvaDQ+XG4gICAgICA8V3lzaXd5Z1xuICAgICAgICBhY3Rpb25zPXtbXG4gICAgICAgICAgXCJib2xkXCIsXG4gICAgICAgICAgXCJpdGFsaWNcIixcbiAgICAgICAgICBcInVuZGVybGluZVwiLFxuICAgICAgICAgIFwic3RyaWtldGhyb3VnaFwiLFxuICAgICAgICAgIFwiaGVhZGluZzJcIixcbiAgICAgICAgICBcImhlYWRpbmczXCIsXG4gICAgICAgICAgXCJvbGlzdFwiLFxuICAgICAgICAgIFwidWxpc3RcIixcbiAgICAgICAgICBcImxpbmVcIixcbiAgICAgICAgICBcImxpbmtcIixcbiAgICAgICAgICBcImltYWdlXCJdfVxuICAgICAgICBkZWZhdWx0QWN0aW9ucz17YWN0aW9uc19zd2VkaXNofVxuICAgICAgICBodG1sPXttb2R1bGUubWFuZGF0b3J5Q29udGVudH1cbiAgICAgICAgb25DaGFuZ2U9e2h0bWwgPT4ge1xuICAgICAgICAgIHVwZGF0ZU1vZHVsZSh7bWFuZGF0b3J5Q29udGVudDogeyRzZXQ6IGh0bWx9fSlcbiAgICAgICAgfX0gLz5cblxuICAgICAgPGg0PlVwcGdpZnRlcjwvaDQ+XG4gICAgICA8RWRpdGFibGVUYXNrTGlzdFxuICAgICAgICB0YXNrSWRzPXttb2R1bGUudGFza0lkc31cbiAgICAgICAgdGFza0N1c3RvbWl6YXRpb25zPXttb2R1bGUudGFza0N1c3RvbWl6YXRpb25zfVxuICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cbiAgICAgICAgbW9kdWxlPXttb2R1bGV9XG4gICAgICAgIGhvc3Q9e2hvc3R9XG4gICAgICAgIGlkc05vdENvdmVyZWRCeUFueVRhc2s9e2lkc05vdENvdmVyZWRCeUFueVRhc2t9XG4gICAgICAgIG9uVGFza0FkZGVkPXsodGFzazogVGFzaywgdGFza0N1c3RvbWl6YXRpb246IFBhcnRpYWw8VGFzaz4pID0+IHRoaXMub25UYXNrQWRkZWQodGFzaywgdGFza0N1c3RvbWl6YXRpb24pfVxuICAgICAgICBvblRhc2tVcGRhdGVkPXsodGFzazogVGFzaykgPT4gdGhpcy5vblRhc2tVcGRhdGVkKHRhc2spfVxuICAgICAgICBvblRhc2tDdXN0b21pemF0aW9uVXBkYXRlZD17KHRhc2tJZDogc3RyaW5nLCBjdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+KSA9PlxuICAgICAgICAgIHRoaXMub25UYXNrQ3VzdG9taXplZCh0YXNrSWQsIGN1c3RvbWl6YXRpb24pfVxuICAgICAgICBvblRhc2tEZWxldGVkPXsoaWQ6IHN0cmluZykgPT4gdGhpcy5vblRhc2tEZWxldGVkKGlkKX1cbiAgICAgICAgb25UYXNrUmVwbGFjZWQ9eyhpZDogc3RyaW5nLCB0YXNrOiBUYXNrKSA9PiB0aGlzLm9uVGFza1JlcGxhY2VkKGlkLCB0YXNrKX0gLz5cblxuICAgICAgPGg0Pk1vZHVscmVzdXJzZXI8L2g0PlxuICAgICAgPHAgY2xhc3NOYW1lPVwic3ViSGVhZGVyXCI+KEV2ZW50dWVsbGEgcmVzdXNlciBmw7ZyIHJlZG92aXNuaW5nIGF2IG1vZHVsZW4gc2FtdCBmw7ZyIG1vZHVsZW4gc29tIGhlbGhldCk8L3A+XG4gICAgICA8RWRpdGFibGVSZXNvdXJjZUxpc3RcbiAgICAgICAgcmVzb3VyY2VzPXttb2R1bGUucmVzb3VyY2VzfVxuICAgICAgICBvblVwZGF0ZT17cmVzb3VyY2VzVXBkYXRlcyA9PiB1cGRhdGVNb2R1bGUoeyByZXNvdXJjZXM6IHJlc291cmNlc1VwZGF0ZXMgfSl9XG4gICAgICAgIGhvc3Q9e2hvc3R9IC8+XG4gICAgICA8ZGl2IHN0eWxlPXt7cG9zaXRpb246ICdhYnNvbHV0ZScsIHRvcDogMCwgcmlnaHQ6IDB9fT5cbiAgICAgICAge21vZHVsZU9yZGVyZWRJbmRleCA+IDAgJiYgPHNwYW4+XG4gICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtYXJyb3ctY2lyY2xlLXVwIHNlbGVjdGFibGVcIlxuICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpPT50aGlzLnByb3BzLm9uUmVvcmRlcigtMSl9IC8+IDwvc3Bhbj59XG4gICAgICAgIHttb2R1bGVPcmRlcmVkSW5kZXggPCBjb3Vyc2UubW9kdWxlcy5sZW5ndGggLSAxICYmIDxzcGFuPlxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWFycm93LWNpcmNsZS1kb3duIHNlbGVjdGFibGVcIlxuICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpPT50aGlzLnByb3BzLm9uUmVvcmRlcigxKX0gLz4gPC9zcGFuPn1cbiAgICAgICAgPFJlbW92ZUl0ZW1cbiAgICAgICAgICB0aXRsZT1cIlRhIGJvcnQgbW9kdWxlblwiXG4gICAgICAgICAgc3R5bGU9e3tkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ319XG4gICAgICAgICAgb25DbGljaz17KCk9PmNvbmZpcm0oTGBUYSBib3J0IG1vZHVsICR7bW9kdWxlLm5hbWV9P2ApICYmIGhvc3QudXBkYXRlKHttb2R1bGVzOiB7JHNwbGljZTogW1ttb2R1bGVJbmRleCwgMV1dfX0pfSAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH1cbn1cblxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQ291cnNlLCBDb3Vyc2VNb2R1bGUsIEltYWdlLCBUYXNrLCBEb2N1bWVudCwgQWJpbGl0eSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcbmltcG9ydCB7IElDb3Vyc2VFZGl0b3JIb3N0IH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3QnO1xuaW1wb3J0IHsgQ291cnNlTW9kdWxlQ29tcG9uZW50IH0gZnJvbSAnLi9jb3Vyc2UtbW9kdWxlJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY291cnNlOiBDb3Vyc2U7XG4gIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0O1xuICBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrOiB7W2lkOiBzdHJpbmddOiB0cnVlfTtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbn1cblxuZXhwb3J0IGNsYXNzIENvdXJzZU1vZHVsZUxpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgX2VsZW06IEhUTUxEaXZFbGVtZW50O1xuICBfbW9kdWxlUmVmczoge1ttb2R1bGVJZDogc3RyaW5nXTogQ291cnNlTW9kdWxlQ29tcG9uZW50fTtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5fbW9kdWxlUmVmcyA9IHt9O1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgfVxuICB9XG5cbiAgYWRkTW9kdWxlKCkge1xuICAgIHRoaXMucHJvcHMuaG9zdC51cGRhdGUoe21vZHVsZXM6IHskcHVzaDogW3tcbiAgICAgIG5hbWU6IFwiTnkga3Vyc21vZHVsXCIsXG4gICAgICBpZDogY3JlYXRlVVVJRCgpLFxuICAgICAgcmVzb3VyY2VzOiBbXSxcbiAgICAgIHRhc2tJZHM6IFtdXG4gICAgIH0gYXMgQ291cnNlTW9kdWxlXG4gICAgXX19KTtcbiAgfVxuXG4gIGdldE9yZGVyZWRNb2R1bGVzKCkge1xuICAgIGNvbnN0IHsgY291cnNlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG1vZHVsZU9yZGVyID0gY291cnNlLm1vZHVsZU9yZGVyIHx8IGNvdXJzZS5tb2R1bGVzLm1hcChtID0+IG0uaWQpO1xuICAgIHJldHVybiBtb2R1bGVPcmRlclxuICAgICAgLy8gTWFwIG9yZGVyZWQgaWQgdG8gbW9kdWxlXG4gICAgICAubWFwKGlkID0+IGNvdXJzZS5tb2R1bGVzLmZpbmQobSA9PiBtLmlkID09PSBpZCkpXG4gICAgICAvLyBJZ25vcmUgZW50cmllcyB0aGF0IG9ubHkgZXhpc3RzIGluIG1vZHVsZU9yZGVyIGJ1dCBub3QgaW4gbW9kdWxlc1xuICAgICAgLmZpbHRlcihtID0+ICEhbSlcbiAgICAgIC8vIEFwcGVuZCBtb2R1bGVzIGF0IGVuZCB0aGF0IGFyZSBub3QgbGlzdGVkIGluIG1vZHVsZU9yZGVyXG4gICAgICAuY29uY2F0IChjb3Vyc2UubW9kdWxlcy5maWx0ZXIobSA9PiAhbW9kdWxlT3JkZXIuZmluZChpZCA9PiBtLmlkID09PSBpZCkpKTtcbiAgfVxuXG4gIGFzeW5jIHJlb3JkZXIgKG1vZHVsZUlkOiBzdHJpbmcsIGRpcmVjdGlvbjogLTEgfCAxKSB7XG4gICAgY29uc3QgeyBjb3Vyc2UgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgb3JkZXJlZE1vZHVsZXMgPSB0aGlzLmdldE9yZGVyZWRNb2R1bGVzKCk7XG4gICAgY29uc3QgbW9kdWxlSW5kZXggPSBvcmRlcmVkTW9kdWxlcy5maW5kSW5kZXgobSA9PiBtLmlkID09PSBtb2R1bGVJZCk7XG4gICAgY29uc3QgbmV3TW9kdWxlSW5kZXggPSBtb2R1bGVJbmRleCArIGRpcmVjdGlvbjtcbiAgICBpZiAobmV3TW9kdWxlSW5kZXggPCAwIHx8IG5ld01vZHVsZUluZGV4ID49IG9yZGVyZWRNb2R1bGVzLmxlbmd0aCkge1xuICAgICAgLy8gQ2Fubm90IG9yZGVyIG91dHNpZGUgbGltaXRzLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50TW9kdWxlQXRQb3NpdGlvbiA9IG9yZGVyZWRNb2R1bGVzW25ld01vZHVsZUluZGV4XTtcbiAgICBjb25zdCBtb2R1bGVPcmRlciA9IG9yZGVyZWRNb2R1bGVzLm1hcChtID0+IG0uaWQpO1xuICAgIG1vZHVsZU9yZGVyW25ld01vZHVsZUluZGV4XSA9IG1vZHVsZUlkO1xuICAgIG1vZHVsZU9yZGVyW21vZHVsZUluZGV4XSA9IGN1cnJlbnRNb2R1bGVBdFBvc2l0aW9uLmlkO1xuICAgIGNvbnN0IG9yaWdTY3JvbGxQb3MgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIGF3YWl0IHRoaXMucHJvcHMuaG9zdC51cGRhdGUoe1xuICAgICAgbW9kdWxlT3JkZXI6IHskc2V0OiBtb2R1bGVPcmRlcn1cbiAgICB9KTtcbiAgICAvLyBOb3csIHNjcm9sbCBzbW9vdGhseSBpbnRvIHZpZXcgYWZ0ZXIgcmVvcmRlcmluZzpcbiAgICBjb25zdCBlbGVtTW9kdWxlOiBIVE1MRWxlbWVudCA9IGZpbmRET01Ob2RlKHRoaXMuX21vZHVsZVJlZnNbbW9kdWxlSWRdKTtcbiAgICBpZiAoZWxlbU1vZHVsZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKHt0b3A6IG9yaWdTY3JvbGxQb3N9KTsgLy8gUHJvaGliaXQgZGVmYXVsdCBzY3JvbGxpbmcgZGlyZWN0bHkgdXB3YXJkcyBvbiBtb3ZlIHVwLlxuICAgICAgICBlbGVtTW9kdWxlLnNjcm9sbEludG9WaWV3KHtiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnc3RhcnQnfSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIE9ubHkgQ2hyb21lIGJldGEgc3VwcG9ydHMgdGhlIGFyZ3VtZW50cyBnaXZlbiBhYm92ZS4gRGVmYXVsdCBmb3Igb2xkZXIgYnJvd3NlcnMuXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyhudWxsLCBvcmlnU2Nyb2xsUG9zKTtcbiAgICAgICAgZWxlbU1vZHVsZS5zY3JvbGxJbnRvVmlldyh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBjb3Vyc2UsIGhvc3QsIGlkc05vdENvdmVyZWRCeUFueVRhc2t9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBtb2R1bGVPcmRlciA9IGNvdXJzZS5tb2R1bGVPcmRlciB8fCBjb3Vyc2UubW9kdWxlcy5tYXAobSA9PiBtLmlkKTtcbiAgICBjb25zdCBvcmRlcmVkTW9kdWxlcyA9IHRoaXMuZ2V0T3JkZXJlZE1vZHVsZXMoKTtcblxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCIgcmVmPXtlbGVtID0+IHRoaXMuX2VsZW0gPSBlbGVtfT5cbiAgICAgIHtvcmRlcmVkTW9kdWxlcy5tYXAobW9kdWxlID0+IDxDb3Vyc2VNb2R1bGVDb21wb25lbnRcbiAgICAgICAgcmVmPXtlbGVtID0+IHRoaXMuX21vZHVsZVJlZnNbbW9kdWxlLmlkXSA9IGVsZW19XG4gICAgICAgIGtleT17bW9kdWxlLmlkfVxuICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cbiAgICAgICAgbW9kdWxlPXttb2R1bGV9XG4gICAgICAgIG9uUmVvcmRlcj17ZGlyZWN0aW9uID0+IHRoaXMucmVvcmRlcihtb2R1bGUuaWQsIGRpcmVjdGlvbil9XG4gICAgICAgIGdldE9yZGVyZWRNb2R1bGVzPXsoKT0+dGhpcy5nZXRPcmRlcmVkTW9kdWxlcygpfVxuICAgICAgICBob3N0PXtob3N0fVxuICAgICAgICBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrPXtpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrfVxuICAgICAgIC8+KX1cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGJ0bi1sYXJnZVwiIG9uQ2xpY2s9eygpPT50aGlzLmFkZE1vZHVsZSgpfT5cbiAgICAgICAgTMOkZ2cgdGlsbCBrdXJzbW9kdWxcbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59XG5cbiIsImltcG9ydCB7IFJlcG8sIFJlcG9Db21tdW5pY2F0b3IgfSBmcm9tICcuL3JlcG8nO1xuaW1wb3J0IHsgQ291cnNlLCBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBmbGF0dGVuLCBMIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCI7XG5cbmNsYXNzIFNjaG9vbENvdXJzZXNSZXBvIGV4dGVuZHMgUmVwbzxDb3Vyc2U+IHtcbiAgcHJpdmF0ZSBfc2Nob29sSWQ6IHN0cmluZztcbiAgZ2V0U2Nob29sSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlSGFzRGF0YSgpLnRoZW4oKCk9PnRoaXMuX3NjaG9vbElkKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGdldFNjaG9vbE5hbWU6ICgpPT5zdHJpbmcpIHtcbiAgICBzdXBlcih7XG4gICAgICBxdWVyeTogYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBzY2hvb2xOYW1lID0gZ2V0U2Nob29sTmFtZSgpO1xuICAgICAgICBjb25zdCBzY2hvb2xzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTY2hvb2w+KFxuICAgICAgICAgIFwic2Nob29sc1wiLCB7XG4gICAgICAgICAgICBuYW1lOiBzY2hvb2xOYW1lLFxuICAgICAgICAgICAgaW5jbHVkZTogW1wiY291cnNlc1wiXVxuICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9zY2hvb2xJZCA9IHNjaG9vbHMubGVuZ3RoID4gMCAmJiBzY2hvb2xzWzBdLmlkO1xuICAgICAgICBpZiAoIXRoaXMuX3NjaG9vbElkKSB0aHJvdyBuZXcgRXJyb3IoTGBTa29sYW4gJHtzY2hvb2xOYW1lfSBmaW5ucyBpbnRlIHJlZ2lzdHJlcmFkIGkgc3lzdGVtZXQuXG4gICAgICAgICAgS29udGFrdGEgZW4gYWRtaW5pc3RyYXTDtnIgZsO2ciBLdXJzYnlnZ2FydmVya3R5Z2V0IG9jaCBiZSBvbSBhdHQgbMOkZ2dhIHRpbGwgc2tvbGFuIG1lZCBuYW1uZXQgXCIke3NjaG9vbE5hbWV9XCJgKTtcbiAgICAgICAgcmV0dXJuIGZsYXR0ZW4oc2Nob29scy5tYXAoc2Nob29sID0+IHNjaG9vbC5jb3Vyc2VzKSk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbXlTY2hvb2xDb3Vyc2VzUmVwbyA9IG5ldyBTY2hvb2xDb3Vyc2VzUmVwbygoKT0+ZW52LmN1cnJlbnRVc2VyLnNjaG9vbCk7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMLCBzaG93RXJyb3IsIGNvbXBhcmVQcm9wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgQ291cnNlIH0gZnJvbSBcImtlZGJhY2tlbmQvbW9kZWxzXCI7XG5pbXBvcnQgeyBteVNjaG9vbENvdXJzZXNSZXBvIH0gZnJvbSBcIi4uLy4uLy4uL3JlcG9zL3NjaG9vbC1jb3Vyc2VzXCI7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lclwiO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgc2hvcnREYXRlRm9ybWF0IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmludGVyZmFjZSBQcm9wcyB7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIHNjaG9vbENvdXJzZXM6IENvdXJzZVtdIHwgbnVsbDtcbn1cblxuZXhwb3J0IGNsYXNzIFNjaG9vbENvdXJzZXMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzY2hvb2xDb3Vyc2VzOiBudWxsXG4gICAgfVxuICAgIHRoaXMub25TY2hvb2xDb3Vyc2VzVXBkYXRlZCA9IHRoaXMub25TY2hvb2xDb3Vyc2VzVXBkYXRlZC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgbXlTY2hvb2xDb3Vyc2VzUmVwby5zdWJzY3JpYmUodGhpcy5vblNjaG9vbENvdXJzZXNVcGRhdGVkKS5jYXRjaChzaG93RXJyb3IpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgbXlTY2hvb2xDb3Vyc2VzUmVwby51bnN1YnNjcmliZSh0aGlzLm9uU2Nob29sQ291cnNlc1VwZGF0ZWQpO1xuICB9XG5cbiAgb25TY2hvb2xDb3Vyc2VzVXBkYXRlZChzY2hvb2xDb3Vyc2VzOiBDb3Vyc2VbXSkge1xuICAgIGNvbnN0IGNvbXBhcmVOYW1lID0gY29tcGFyZVByb3AoXCJuYW1lXCIpO1xuICAgIGNvbnN0IGNvbXBhcmVDcmVhdGVkRGF0ZSA9IGNvbXBhcmVQcm9wKFwiY3JlYXRlZERhdGVcIik7XG4gICAgc2Nob29sQ291cnNlcy5zb3J0KChhLGIpID0+IGNvbXBhcmVOYW1lKGEsYikgfHwgY29tcGFyZUNyZWF0ZWREYXRlKGEsYikpO1xuICAgIHRoaXMuc2V0U3RhdGUoe3NjaG9vbENvdXJzZXN9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7c2Nob29sQ291cnNlc30gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxuICAgICAgICA8aDM+U2tvbGFucyBrdXJzZXI8L2gzPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXIgb2RkLWV2ZW5cIj5cbiAgICAgICAgICB7IXNjaG9vbENvdXJzZXMgP1xuICAgICAgICAgICAgPHA+PFNwaW5uZXIgLz4gTGFkZGFyIHNrb2xhbnMga3Vyc2VyPC9wPiA6XG4gICAgICAgICAgICBzY2hvb2xDb3Vyc2VzLm1hcChjb3Vyc2UgPT4gPGRpdiBjbGFzc05hbWU9XCJzY2hvb2xDb3Vyc2VcIiBrZXk9e2NvdXJzZS5pZH0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgcHVsbC1yaWdodFwiPlxuICAgICAgICAgICAgICAgIDxMaW5rXG4gICAgICAgICAgICAgICAgICB0bz17YC9jb3Vyc2VzLyR7Y291cnNlLmlkfS9lZGl0YH1cbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXRJdGVtXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICA8TGluayB0bz17YC9jb3Vyc2VzLyR7Y291cnNlLmlkfS9lZGl0YH0+e2NvdXJzZS5uYW1lfTwvTGluaz48L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICB7Y291cnNlLmFjdGl2ZSAmJiA8ZGl2IGNsYXNzTmFtZT1cInBpbGwgYWN0aXZlXCI+QWt0aXY8L2Rpdj59XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICB7Y291cnNlLmFjdGl2ZSAmJiAhY291cnNlLnB1Ymxpc2hhYmxlICYmIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwaWxsIGluY29tcGxldGVcIj5JbmtvbXBsZXR0PC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgPHA+e2NvdXJzZS5kZXNjcmlwdGlvbn08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIHtjb3Vyc2UubW9kaWZpZWRCeSA/XG4gICAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5SZWRpZ2VyYWQgYXYge2NvdXJzZS5tb2RpZmllZEJ5Lm5hbWV9IC8ge3Nob3J0RGF0ZUZvcm1hdChjb3Vyc2UubW9kaWZpZWREYXRlKX08L3A+IDpcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzbWFsbFwiIHN0eWxlPXt7Zm9udFN0eWxlOiAnaXRhbGljJ319PiA8L3A+fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+KX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHtsb2NhdGlvbi5oYXNoICE9PSBcIiMvY291cnNlcy9uZXdcIiAmJiA8TGlua1xuICAgICAgICAgIGNsYXNzTmFtZT1cImJ0blwiXG4gICAgICAgICAgdG89XCIvY291cnNlcy9uZXdcIlxuICAgICAgICAgIG9uQ2xpY2s9eygpPT53aW5kb3cuc2Nyb2xsKDAsIDApfT5cbiAgICAgICAgICBTa2FwYSBueSBrdXJzXG4gICAgICAgIDwvTGluaz59XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBSZW1vdmVJdGVtIH0gZnJvbSBcIi4vcmVtb3ZlLWl0ZW1cIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdGVhY2hlcnM6IFJlc291cmNlW107XG4gIG9uVXBkYXRlOiAodGVhY2hlcnNVcGRhdGVzKSA9PiB2b2lkO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBhZGRFbXRweVJvdzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIEVkaXRhYmxlVGVhY2hlckxpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcbiAgbmFtZUVsZW06IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGU9e2FkZEVtdHB5Um93OiBwcm9wcy50ZWFjaGVycy5sZW5ndGggPT09IDB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7dGVhY2hlcnMsIG9uVXBkYXRlfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qge2FkZEVtdHB5Um93fSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKGFkZEVtdHB5Um93KSB0ZWFjaGVycyA9IHRlYWNoZXJzLmNvbmNhdCh7bmFtZTogXCJcIiwgdXJsOiBcIlwifSk7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJ0ZWFjaGVycy1saXN0XCI+XG4gICAgICA8aDM+QW5zdmFyaWdhIGzDpHJhcmU8L2gzPlxuICAgICAgPHRhYmxlIHRhYkluZGV4PXsxfSBzdHlsZT17e3dpZHRoOiBcIjEwMCVcIn19IG9uQmx1cj17ZXY9PlxuICAgICAgICAoIWV2LnJlbGF0ZWRUYXJnZXQgfHxcbiAgICAgICAgKGV2LnJlbGF0ZWRUYXJnZXQgYXMgYW55KS50YWdOYW1lICE9PSAnSU5QVVQnKSAmJlxuICAgICAgICB0aGlzLnByb3BzLnRlYWNoZXJzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWRkRW10cHlSb3c6IGZhbHNlfSlcbiAgICAgIH0+XG4gICAgICAgIDx0aGVhZD5cbiAgICAgICAgICB7dGVhY2hlcnMubGVuZ3RoID4gMCAmJiA8dHI+XG4gICAgICAgICAgICA8dGggc3R5bGU9e3t3aWR0aDogXCIyMCVcIn19Pk5hbW48L3RoPlxuICAgICAgICAgICAgPHRoPkzDpG5rIGVsbGVyIEUtcG9zdGFkcmVzczwvdGg+XG4gICAgICAgICAgPC90cj59XG4gICAgICAgIDwvdGhlYWQ+XG4gICAgICAgIDx0Ym9keT5cbiAgICAgICAgICB7dGVhY2hlcnMubWFwKCh0ZWFjaGVyLCBpZHgpID0+IFxuICAgICAgICAgIDx0ciBrZXk9e2lkeH0+XG4gICAgICAgICAgICA8dGQ+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPXtlbGVtID0+IHRoaXMubmFtZUVsZW0gPSBlbGVtfSB2YWx1ZT17dGVhY2hlci5uYW1lfSBhdXRvRm9jdXM9eyF0ZWFjaGVyLm5hbWUgJiYgaWR4ID4gMH0gb25DaGFuZ2U9e1xuICAgICAgICAgICAgICBldj0+e1xuICAgICAgICAgICAgICAgIGlmIChhZGRFbXRweVJvdyAmJiBpZHggPT0gdGVhY2hlcnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgb25VcGRhdGUoeyRwdXNoOiBbey4uLnRlYWNoZXIsIG5hbWU6IGV2LnRhcmdldC52YWx1ZX1dIH0pO1xuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWRkRW10cHlSb3c6IGZhbHNlfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldi50YXJnZXQudmFsdWUgfHwgdGVhY2hlci51cmwpIHtcbiAgICAgICAgICAgICAgICAgIG9uVXBkYXRlKHskc3BsaWNlOiBbW2lkeCwgMSwgey4uLnRlYWNoZXIsIG5hbWU6IGV2LnRhcmdldC52YWx1ZX1dXSB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMudGVhY2hlcnMubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHthZGRFbXRweVJvdzogdHJ1ZX0pO1xuICAgICAgICAgICAgICAgICAgb25VcGRhdGUoeyRzcGxpY2U6IFtbaWR4LCAxXV19KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0vPjwvdGQ+XG4gICAgICAgICAgICA8dGQ+PGlucHV0XG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgc3R5bGU9e3t3aWR0aDogXCIxMDAlXCJ9fVxuICAgICAgICAgICAgICB2YWx1ZT17dGVhY2hlci51cmx9XG4gICAgICAgICAgICAgIG9uS2V5RG93bj17ZXYgPT5cbiAgICAgICAgICAgICAgICBldi53aGljaCA9PT0gOSAmJlxuICAgICAgICAgICAgICAgICFldi5zaGlmdEtleSAmJlxuICAgICAgICAgICAgICAgIGlkeCA9PT0gdGVhY2hlcnMubGVuZ3RoIC0gMSAmJlxuICAgICAgICAgICAgICAgICh0ZWFjaGVycy5sZW5ndGggPCAxIHx8ICEhdGVhY2hlcnNbdGVhY2hlcnMubGVuZ3RoIC0gMV0ubmFtZSAmJlxuICAgICAgICAgICAgICAgICAgKHRoaXMuc2V0U3RhdGUoe2FkZEVtdHB5Um93OiB0cnVlfSksZXYucHJldmVudERlZmF1bHQoKSkpfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhZGRFbXRweVJvdyAmJiBpZHggPT0gdGVhY2hlcnMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgb25VcGRhdGUoeyRwdXNoOiBbey4uLnRlYWNoZXIsIHVybDogZXYudGFyZ2V0LnZhbHVlfV19KVxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWRkRW10cHlSb3c6IGZhbHNlfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChldi50YXJnZXQudmFsdWUgfHwgdGVhY2hlci5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNwbGljZTogW1tpZHgsIDEsIHsuLi50ZWFjaGVyLCB1cmw6IGV2LnRhcmdldC52YWx1ZX1dXX0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50ZWFjaGVycy5sZW5ndGggPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2FkZEVtdHB5Um93OiB0cnVlfSk7XG4gICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNwbGljZTogW1tpZHgsIDFdXX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0vPjwvdGQ+XG4gICAgICAgICAgPC90cj4pfVxuICAgICAgICA8L3Rib2R5PlxuICAgICAgPC90YWJsZT5cbiAgICAgIDxici8+XG4gICAgICA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKSA9PlxuICAgICAgICB0aGlzLnN0YXRlLmFkZEVtdHB5Um93ID9cbiAgICAgICAgICB0aGlzLm5hbWVFbGVtLmZvY3VzKCkgOlxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2FkZEVtdHB5Um93OiB0cnVlfSl9PlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtdXNlci1wbHVzXCIgYXJpYS1oaWRkZW4gLz4gTMOkZ2cgdGlsbCBhbnN2YXJpZyBsw6RyYXJlPC9hPlxuICAgIDwvZGl2PlxuICB9XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ291cnNlIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xuaW1wb3J0IHsgZ2V0VGFza3NQZXJJZCB9IGZyb20gXCIuLi9jb3Vyc2VzL2J1c2luZXNzLWxvZ2ljXCI7XG5pbXBvcnQgeyBmdXR1cmVBYmlsaXRpZXMgfSBmcm9tIFwiLi4vLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHNcIjtcbmltcG9ydCB7IE9wZW5DbG9zZUJveCB9IGZyb20gXCIuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3hcIjtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY291cnNlOiBDb3Vyc2U7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIGlzT3BlbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIFdlaWdodGVkSXRlbXNUYWJsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzT3BlbjogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY291cnNlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgaXNPcGVuIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHJvd3MgPSBbXTtcbiAgICBjb25zdCB0YXNrc1BlcklkID0gZ2V0VGFza3NQZXJJZChjb3Vyc2UpO1xuXG4gICAgcm93cy5wdXNoKDx0ciBrZXk9XCJjZW50cmFsQ29udGVudFwiIGNsYXNzTmFtZT1cImNvdmVyZWQtaXRlbS1sYWJlbFwiPjx0ZCBjb2xTcGFuPXsyfT5DZW50cmFsdCBpbm5laMOlbGw8L3RkPjwvdHI+KTtcbiAgICBjb3Vyc2UuY2VudHJhbENvbnRlbnQuZm9yRWFjaCgoY2MsaWR4KSA9PiByb3dzLnB1c2goPHRyIGtleT17Y2MuaWR9IGNsYXNzTmFtZT17aWR4ICUgMiA/IFwidGFibGVPZGRcIiA6IFwiXCJ9PlxuICAgICAgPHRkPjxwIGNsYXNzTmFtZT1cImNyaXRlcmlhVGV4dFwiIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBjYy5uYW1lfX0vPjwvdGQ+XG4gICAgICA8dGQ+PHA+eyh0YXNrc1BlcklkW2NjLmlkXSB8fCBbXSkubGVuZ3RofTwvcD48L3RkPlxuICAgIDwvdHI+KSk7XG5cbiAgICByb3dzLnB1c2goPHRyIGtleT1cImFiaWxpdGllc1wiIGNsYXNzTmFtZT1cImNvdmVyZWQtaXRlbS1sYWJlbFwiPjx0ZCBjb2xTcGFuPXsyfT5Gw7ZybcOlZ29yPC90ZD48L3RyPik7XG4gICAgY291cnNlLmFiaWxpdGllcy5mb3JFYWNoKChhYmlsaXR5LGlkeCkgPT4gcm93cy5wdXNoKDx0ciBrZXk9e2FiaWxpdHkuaWR9IGNsYXNzTmFtZT17aWR4ICUgMiA/IFwidGFibGVPZGRcIiA6IFwiXCJ9PlxuICAgICAgPHRkPjxwIGNsYXNzTmFtZT1cImFiaWxpdHlUZXh0XCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IGFiaWxpdHkubmFtZX19Lz48L3RkPlxuICAgICAgPHRkPjxwPnsodGFza3NQZXJJZFthYmlsaXR5LmlkXSB8fCBbXSkubGVuZ3RofTwvcD48L3RkPlxuICAgIDwvdHI+KSk7XG5cbiAgICByb3dzLnB1c2goPHRyIGtleT1cImZ1dHVyZUFiaWxpdGllc1wiIGNsYXNzTmFtZT1cImNvdmVyZWQtaXRlbS1sYWJlbFwiPjx0ZCBjb2xTcGFuPXsyfT5GcmFtdGlkc2bDtnJtw6Vnb3I8L3RkPjwvdHI+KTtcbiAgICAgZnV0dXJlQWJpbGl0aWVzLmZvckVhY2goKGZ1dHVyZUFiaWxpdHlUZXh0LCBpZHgpID0+IHJvd3MucHVzaCg8dHIga2V5PXtmdXR1cmVBYmlsaXR5VGV4dH0gY2xhc3NOYW1lPXtpZHggJSAyID8gXCJ0YWJsZU9kZFwiIDogXCJcIn0+XG4gICAgICA8dGQ+PHAgY2xhc3NOYW1lPVwiYWJpbGl0eVRleHRcIj57ZnV0dXJlQWJpbGl0eVRleHR9PC9wPjwvdGQ+XG4gICAgICA8dGQ+PHA+eyh0YXNrc1BlcklkW2Z1dHVyZUFiaWxpdHlUZXh0XSB8fCBbXSkubGVuZ3RofTwvcD48L3RkPlxuICAgIDwvdHI+KSk7XG5cbiAgICByZXR1cm4gPE9wZW5DbG9zZUJveFxuICAgICAgY2xhc3NOYW1lPVwibGFyZ2VyXCJcbiAgICAgIHRpdGxlPXs8cD5LdXJzZW5zIHTDpGNrbmluZ3N0YWJlbGw8L3A+fVxuICAgICAgY29udGVudENsYXNzTmFtZT1cIndlaWdodGVkLWl0ZW1zLXRhYmxlXCI+XG4gICAgICAgIDxwPlRhYmVsbGVuIGFuZ2VyIGh1ciBtw6VuZ2EgdXBwZ2lmdGVyIHNvbSBiZXLDtnIgdmFyamUgZGVsLjwvcD5cbiAgICAgICAgPHRhYmxlPjx0Ym9keT57cm93c308L3Rib2R5PjwvdGFibGU+XG4gICAgPC9PcGVuQ2xvc2VCb3g+XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBEaWFsb2cgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvdXJzZS1lZGl0b3ItaG9zdCc7XG5pbXBvcnQgdmFsaWRVcmwgZnJvbSAndmFsaWQtdXJsJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdXJsPzogc3RyaW5nO1xuICBvblNhdmU6IChuZXdVcmw6IHN0cmluZykgPT4gdm9pZDtcbiAgb25EZWxldGU/OiAoKT0+dm9pZDtcbn1cblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgdXJsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBFZGl0V29ya2Zsb3dMaW5rIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiBpbXBsZW1lbnRzIERpYWxvZyB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge3VybDogdGhpcy5wcm9wcy51cmwgfHwgJyd9O1xuICB9XG5cbiAgc2F2ZSgpIHtcbiAgICBjb25zdCB7dXJsfSA9IHRoaXMuc3RhdGU7XG4gICAgaWYgKCF2YWxpZFVybC5pc1VyaSh1cmwpKSB0aHJvdyBuZXcgRXJyb3IoTGBBbmdpdmVuIFVSTCAnJHt1cmx9JyDDpHIgb2dpbHRpZy4gU2thIGLDtnJqYSBtZWQgaHR0cDogZWxsZXIgaHR0cHM6YCk7XG4gICAgdGhpcy5wcm9wcy5vblNhdmUodXJsKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7b25TYXZlLCBvbkRlbGV0ZX0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpc1ZhbGlkVXJsID0gdmFsaWRVcmwuaXNVcmkodGhpcy5zdGF0ZS51cmwpO1xuXG4gICAgcmV0dXJuIDxkaXY+PGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgPGgyPktvcHBsYSBlbiBhcmJldHNnw6VuZyB0aWxsIGt1cnNlbjwvaDI+XG4gICAgICA8cD5EZXQgZ8OlciBiYXJhIGF0dCBsw6RnZ2EgaW4gZW4gYXJiZXRzZ8OlbmcgcGVyIGt1cnMuPC9wPlxuICAgICAgPGJyIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5Mw6Ruazo8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgXCI+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgICAgc2l6ZT17NTB9XG4gICAgICAgICAgICB2YWx1ZT17c3RhdGUudXJsfVxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2PT50aGlzLnNldFN0YXRlKHt1cmw6IGV2LnRhcmdldC52YWx1ZX0pfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxiciAvPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiIGlkPVwic3ZpZDEyXzQ5MjQyMmQ1MTViYWRmMzY2NDZlNGZmMVwiPlxuICAgICAgICB7b25EZWxldGUgJiYgPGRpdiB0YWJJbmRleD17Mn0gY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCk9Pm9uRGVsZXRlKCl9PlxuICAgICAgICAgIFRhIGJvcnQgYXJiZXRzZ8OlbmdcbiAgICAgICAgPC9kaXY+fVxuICAgICAgICA8YVxuICAgICAgICAgIHRhYkluZGV4PXsxfVxuICAgICAgICAgIGNsYXNzTmFtZT17XCJidG4gYnRuLWxhcmdlXCIgKyAoaXNWYWxpZFVybCA/IFwiXCIgOiBcIiBidG4taW5hY3RpdmVcIil9XG4gICAgICAgICAgb25DbGljaz17aXNWYWxpZFVybCAmJiAoKCkgPT4gb25TYXZlKHN0YXRlLnVybCkpfT5TcGFyYTwvYT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1Jlc291cmNlfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQge0xpbmt9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHtJQ291cnNlRWRpdG9ySG9zdH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3QnO1xuaW1wb3J0IHtFZGl0UmVzb3VyY2V9IGZyb20gJy4uL21vZGFsLXBhZ2VzL2VkaXQtcmVzb3VyY2UnO1xuaW1wb3J0IHsgdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XG5pbXBvcnQgeyBFZGl0V29ya2Zsb3dMaW5rIH0gZnJvbSAnLi4vbW9kYWwtcGFnZXMvZWRpdC13b3JrZmxvdy1saW5rJztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdXJsOiBzdHJpbmc7XG4gIG9uVXBkYXRlOiAodXBkYXRlcykgPT4gdm9pZDtcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3Q7XG59XG5cbmV4cG9ydCBjbGFzcyBFZGl0YWJsZVdvcmtGbG93TGluayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZT17fTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7aG9zdCwgb25VcGRhdGUsIHVybH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiA8ZGl2PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyXCI+XG4gICAgICAgIHt1cmwgJiZcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgb25DbGljaz17KCk9Pmhvc3Qub3BlbkRpYWxvZyh7XG4gICAgICAgICAgICAgICAgQ29tcG9uZW50OiBFZGl0V29ya2Zsb3dMaW5rLFxuICAgICAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgICBvblNhdmU6IG5ld1VybCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9uVXBkYXRlKHskc2V0OiBuZXdVcmx9KTtcbiAgICAgICAgICAgICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIG9uRGVsZXRlOiAoKT0+e1xuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNldDogdW5kZWZpbmVkfSk7XG4gICAgICAgICAgICAgICAgICAgIGhvc3QuY2xvc2VEaWFsb2coKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pfT48L2E+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgIDxhIGhyZWY9e3VybH0gdGFyZ2V0PVwiX2JsYW5rXCIgPk51dmFyYW5kZSBhcmJldHNnw6VuZzwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICB9XG4gICAgIDwvZGl2PlxuICAgIHshdXJsICYmIDxhIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpPT5ob3N0Lm9wZW5EaWFsb2coe1xuICAgICAgQ29tcG9uZW50OiBFZGl0V29ya2Zsb3dMaW5rLFxuICAgICAgcHJvcHM6IHtcbiAgICAgICAgb25TYXZlOiBuZXdVcmwgPT4ge1xuICAgICAgICAgIG9uVXBkYXRlKHskc2V0OiBuZXdVcmx9KVxuICAgICAgICAgIGhvc3QuY2xvc2VEaWFsb2coKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pfT48aSBjbGFzc05hbWU9XCJmYSBmYS1wYXBlcmNsaXBcIiBhcmlhLWhpZGRlbj48L2k+IEtvcHBsYSBlbiBhcmJldHNnw6VuZyB0aWxsIGt1cnNlbjwvYT59XG4gICAgPC9kaXY+XG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IENvdXJzZSwgQWJpbGl0eSwgU3ViamVjdCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcbmltcG9ydCB7IEVkaXRhYmxlUmVzb3VyY2VMaXN0IH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtcmVzb3VyY2UtbGlzdCc7XG5pbXBvcnQgeyBkdEZvcm1hdCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IENvdXJzZU1vZHVsZUxpc3QgfSBmcm9tICcuL2NvdXJzZS1tb2R1bGUtbGlzdCc7XG5pbXBvcnQgeyBTY2hvb2xDb3Vyc2VzIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc2Nob29sLWNvdXJzZXMnO1xuaW1wb3J0IHsgSUNvdXJzZUVkaXRvckhvc3QgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvdXJzZS1lZGl0b3ItaG9zdCc7XG5pbXBvcnQgeyBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMsIHNhbml0eUNoZWNrLCBnZXRJZHNOb3RDb3ZlcmVkQnlUYXNrcyB9IGZyb20gJy4vYnVzaW5lc3MtbG9naWMnO1xuaW1wb3J0IHsgc2V0Q291cnNlSW1hZ2UgfSBmcm9tIFwiLi9jb3Vyc2UtYmFubmVyXCI7XG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XG5pbXBvcnQgeyBFZGl0YWJsZVRlYWNoZXJMaXN0IH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtdGVhY2hlci1saXN0JztcbmltcG9ydCB7IHNob3dFcnJvciwgTCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xuaW1wb3J0IHsgV2VpZ2h0ZWRJdGVtc1RhYmxlIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvd2VpZ2h0ZWQtaXRlbXMtdGFibGUnO1xuaW1wb3J0IHsgV3lzaXd5ZyB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2luZGV4JztcbmltcG9ydCBhY3Rpb25zX3N3ZWRpc2ggZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvYWN0aW9ucy1zdic7XG5pbXBvcnQgeyBFZGl0YWJsZVdvcmtGbG93TGluayB9IGZyb20gJy4uL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXdvcmtmbG93LWxpbmsnO1xuaW1wb3J0IHsgUmVuYW1lYWJsZVRleHQgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvcmVuYW1lYWJsZS10ZXh0JztcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY291cnNlOiBDb3Vyc2U7XG4gIG9yaWdDb3Vyc2U6IENvdXJzZTtcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3Q7XG59O1xuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBjaGFuZ2VJbWFnZVVybDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNsYXNzIElubmVyRWRpdENvdXJzZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBwcm9wczogUHJvcHM7XG4gIHN0YXRlOiBTdGF0ZTtcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBjaGFuZ2VJbWFnZVVybDogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgc2V0SW1hZ2VVcmwoaW1hZ2VVcmw6IHN0cmluZykge1xuICAgIGNvbnN0IHsgY291cnNlIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICghY291cnNlLmltYWdlSWQpIHtcblxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvdXJzZSwgb3JpZ0NvdXJzZSwgaG9zdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB1bmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMgPSBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMoY291cnNlKTtcbiAgICBjb25zdCBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrID0gZ2V0SWRzTm90Q292ZXJlZEJ5VGFza3MoY291cnNlKTtcbiAgICBjb25zdCBzYW5pdHlDaGVja1dhcm5pbmdzID0gc2FuaXR5Q2hlY2soY291cnNlKTtcbiAgICBjb25zdCBjb3Vyc2VJbWFnZSA9IGNvdXJzZS5pbWFnZXMuZmluZChpbWcgPT4gaW1nLmlkID09PSBjb3Vyc2UuaW1hZ2VJZCk7XG4gICAgY29uc3QgY291cnNlSW1hZ2VJc0RhdGFVcmwgPSBjb3Vyc2VJbWFnZSAmJiBjb3Vyc2VJbWFnZS51cmwuc3RhcnRzV2l0aCgnZGF0YTonKTtcbiAgICBjb25zdCBjb3Vyc2VJc1VwbG9hZGVkID0gY291cnNlSW1hZ2UgJiYgY291cnNlSW1hZ2UudXJsLmluZGV4T2YoJ3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20nKSA+IDA7XG5cbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17XCJzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXIgc3YtY29sdW1uLTdcIn0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cbiAgICAgICAgICB7Y291cnNlLmlzVGVtcGxhdGUgJiYgPGgxPkt1cnNtYWxsPC9oMT4gfVxuICAgICAgICAgIDxoMj5LdXJzw7Z2ZXJncmlwYW5kZTwvaDI+XG4gICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgIDxoMz5LdXJzZW5zIGJpbGQ8L2gzPlxuICAgICAgICAgICAgICB7Y291cnNlSW1hZ2VJc0RhdGFVcmwgP1xuICAgICAgICAgICAgICAgIDxwPkt1cnNlbnMgYmlsZCBsaWdnZXIgaSBkYXRhYmFzZW4uIEbDtnIgYXR0IMOkbmRyYSBiaWxkIG3DpXN0ZSBkdSBkcmEgb2NoIHNsw6RwcGEgZW4gbnkgYmlsZCBvdmFucMOlIGRlbiBnYW1sYSBow7Znc3QgdXBwIHDDpSBkZW5uYSBzaWRhLlxuICAgICAgICAgICAgICAgICAgQmlsZGVuIGthbiBhbnRpbmdlbiB2YXJhIGZyw6VuIGVuIGFubmFuIHdlYmJzaWRhLiBMb2thbGEgYmlsZGZpbGVyIGfDpXIgb2Nrc8OlIGJyYSBhdHQgZHJhIG9jaCBzbMOkcHBhLjwvcD5cbiAgICAgICAgICAgICAgICAgOiBjb3Vyc2VJc1VwbG9hZGVkID8gPHA+XG4gICAgICAgICAgICAgICAgICAgS3Vyc2VucyBiaWxkIGxpZ2dlciBpIEt1bnNrYXBzc2tvbGFucyBHb29nbGUgbW9sbi4gRsO2ciBhdHQgw6RuZHJhIGJpbGQgbcOlc3RlIGR1IGRyYSBvY2ggc2zDpHBwYSBlbiBueSBiaWxkIG92YW5ww6UgZGVuIGdhbWxhIGjDtmdzdCB1cHAgcMOlIGRlbm5hIHNpZGEuXG4gICAgICAgICAgICAgICAgICBCaWxkZW4ga2FuIGFudGluZ2VuIHZhcmEgZnLDpW4gZW4gYW5uYW4gd2ViYnNpZGEuIExva2FsYSBiaWxkZmlsZXIgZ8OlciBvY2tzw6UgYnJhIGF0dCBkcmEgb2NoIHNsw6RwcGEuXG4gICAgICAgICAgICAgICAgIDwvcD4gOiBjb3Vyc2VJbWFnZSA/IDxkaXY+PHRleHRhcmVhXG4gICAgICAgICAgICAgICAgICB2YWx1ZT17Y291cnNlSW1hZ2UudXJsfVxuICAgICAgICAgICAgICAgICAgc3R5bGU9e3t3aWR0aDogJzEwMCUnLCBoZWlnaHQ6ICczMHB4J319XG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZXY9PnNldENvdXJzZUltYWdlKGNvdXJzZSwgb3JpZ0NvdXJzZSwgaG9zdCwgZXYudGFyZ2V0LnZhbHVlKX0vPlxuICAgICAgICAgICAgICAgICAgPHA+QmlsZGVuIHNvbSB2aXNhcyBow7Znc3QgdXBwIGjDpG10YXMgZnLDpW4gYW5naXZlbiBVUkwuXG4gICAgICAgICAgICAgICAgICAgIEbDtnIgYXR0IMOkbmRyYSBiaWxkIGthbiBkdSByZWRpZ2VyYSBVUkwgb3Zhbi4gRXR0IGFubmF0IHPDpHR0IGF0dCDDpG5kcmEgYmlsZCDDpHIgYXR0IGRyYSBvY2ggc2zDpHBwYSBlbiBueSBiaWxkIMO2dmVyIGRlbiBnYW1sYSBow7Znc3QgdXBwIHDDpSBzaWRhbi48L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+IDpcbiAgICAgICAgICAgICAgICAgIDxwPkt1cnNlbiBzYWtuYXIgZWdlbiBiaWxkLlxuICAgICAgICAgICAgICAgICAgICBMw6RnZyB0aWxsIGVuIGJpbGQgZ2Vub20gYXR0IGRyYSBvY2ggc2zDpHBwYSBlbiBiaWxkIHDDpSBrdXJzLWJhbm5lcm4gaMO2Z3N0IHVwcCBww6UgZGVuIGjDpHIgc2lkYW4uPC9wPn1cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICB7IWNvdXJzZS5pc1RlbXBsYXRlICYmIDxkaXY+XG4gICAgICAgICAgICAgIDxoMz5CZXNrcml2bmluZzwvaDM+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInN1YkhlYWRlclwiPihCZXNrcml2bmluZyBhdiBrdXJzZW4uIEbDtnIgYXR0IHNraWxqYSBtZWxsYW4gb2xpa2EgdmFyaWFudGVyIGF2IHNhbW1hIGd5bW5hc2lla3Vycyk8L3A+XG4gICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzc05hbWU9XCJpbnB1dFRleHRCb3ggaW5wdXRUZXh0U21hbGxcIlxuICAgICAgICAgICAgICAgIHZhbHVlPXtjb3Vyc2UuZGVzY3JpcHRpb259XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IGhvc3QudXBkYXRlKHsgZGVzY3JpcHRpb246IHsgJHNldDogZXYudGFyZ2V0LnZhbHVlIH0gfSl9IC8+XG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgPC9kaXY+fSAgICAgICAgICAgIFxuXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8aDM+VXBwdGFrdHN0ZXh0PC9oMz5cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic3ViSGVhZGVyXCI+KHRleHRlbiBza2EgdmlzYXMgcMOlIGt1cnNlbnMgdXBwdGFrdHNzZWt0aW9uKTwvcD5cbiAgICAgICAgICAgICAgPFd5c2l3eWdcbiAgICAgICAgICAgICAgICBodG1sPXtjb3Vyc2UucnVuVXBUZXh0fVxuICAgICAgICAgICAgICAgIGRlZmF1bHRBY3Rpb25zPXthY3Rpb25zX3N3ZWRpc2h9XG4gICAgICAgICAgICAgICAgYWN0aW9ucz17W1xuICAgICAgICAgICAgICAgICAgXCJib2xkXCIsXG4gICAgICAgICAgICAgICAgICBcIml0YWxpY1wiLFxuICAgICAgICAgICAgICAgICAgXCJ1bmRlcmxpbmVcIixcbiAgICAgICAgICAgICAgICAgIFwic3RyaWtldGhyb3VnaFwiLFxuICAgICAgICAgICAgICAgICAgXCJoZWFkaW5nMlwiLFxuICAgICAgICAgICAgICAgICAgXCJoZWFkaW5nM1wiLFxuICAgICAgICAgICAgICAgICAgXCJvbGlzdFwiLFxuICAgICAgICAgICAgICAgICAgXCJ1bGlzdFwiLFxuICAgICAgICAgICAgICAgICAgXCJsaW5lXCIsXG4gICAgICAgICAgICAgICAgICBcImxpbmtcIixcbiAgICAgICAgICAgICAgICAgIFwiaW1hZ2VcIl19XG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e25ld0h0bWwgPT4gaG9zdC51cGRhdGUoeyBydW5VcFRleHQ6IHskc2V0OiBuZXdIdG1sfX0pfSAvPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8aDM+S3Vyc3Jlc3Vyc2VyPC9oMz5cbiAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInN1YkhlYWRlclwiPihSZXN1cnNlciBmw7ZyIHVwcHRha3Qgb2NoIGt1cnNlbiBzb20gaGVsaGV0KTwvcD5cbiAgICAgICAgICAgIDxFZGl0YWJsZVJlc291cmNlTGlzdFxuICAgICAgICAgICAgICByZXNvdXJjZXM9e2NvdXJzZS5yZXNvdXJjZXN9XG4gICAgICAgICAgICAgIG9uVXBkYXRlPXtyZXNvdXJjZXNVcGRhdGVzID0+IGhvc3QudXBkYXRlKHsgcmVzb3VyY2VzOiByZXNvdXJjZXNVcGRhdGVzIH0pfVxuICAgICAgICAgICAgICBob3N0PXtob3N0fSAvPlxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICA8aDM+QXJiZXRzZ8Olbmc8L2gzPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic3ViSGVhZGVyXCI+KEV2ZW50dWVsbCBsw6RuayB0aWxsIGFyYmV0c2fDpW5nIGbDtnIga3Vyc2VuKTwvcD5cbiAgICAgICAgICAgIDxFZGl0YWJsZVdvcmtGbG93TGlua1xuICAgICAgICAgICAgICB1cmw9e2NvdXJzZS53b3JrRmxvd0xpbmt9XG4gICAgICAgICAgICAgIG9uVXBkYXRlPXt1cGRhdGVzID0+IGhvc3QudXBkYXRlKHsgd29ya0Zsb3dMaW5rOiB1cGRhdGVzIH0pfVxuICAgICAgICAgICAgICBob3N0PXtob3N0fSAvPlxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICB7IWNvdXJzZS5pc1RlbXBsYXRlICYmIDxkaXY+XG4gICAgICAgICAgICAgIDxoMz5Hb29nbGUgQ2xhc3Nyb29tPC9oMz5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJHb29nbGUgY2xhc3Nyb29tIFVSTFwiXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZT17MzB9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjb3Vyc2UuZ29vZ2xlQ2xhc3NSb29tVVJMfVxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gaG9zdC51cGRhdGUoe2dvb2dsZUNsYXNzUm9vbVVSTDogeyRzZXQ6IGV2LnRhcmdldC52YWx1ZX19KX0vPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJrb2RcIlxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgIHNpemU9ezh9XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtjb3Vyc2UuZ29vZ2xlQ2xhc3NSb29tQ29kZX1cbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IGhvc3QudXBkYXRlKHtnb29nbGVDbGFzc1Jvb21Db2RlOiB7JHNldDogZXYudGFyZ2V0LnZhbHVlfX0pfSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2Pn1cblxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICB7IWNvdXJzZS5pc1RlbXBsYXRlICYmIDw+PEVkaXRhYmxlVGVhY2hlckxpc3QgXG4gICAgICAgICAgICAgIHRlYWNoZXJzPXtjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVyc31cbiAgICAgICAgICAgICAgb25VcGRhdGU9e3RlYWNoZXJzVXBkYXRlID0+IHtcbiAgICAgICAgICAgICAgICBob3N0LnVwZGF0ZSh7cmVzcG9uc2libGVUZWFjaGVyczogdGVhY2hlcnNVcGRhdGV9KTtcbiAgICAgICAgICAgICAgfX0gLz5cbiAgICAgICAgICAgIHsvKlxuICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICA8aDM+SW5sw6RtbmluZ3MgRS1wb3N0PC9oMz5cbiAgICAgICAgICAgIDx0YWJsZSB0YWJJbmRleD17MX0gc3R5bGU9e3t3aWR0aDogJzEwMCUnfX0+XG4gICAgICAgICAgICAgIDx0aGVhZD48dHI+PHRoPlxuICAgICAgICAgICAgICAgIEUtcG9zdGFkZHJlc3NcbiAgICAgICAgICAgICAgPC90aD48L3RyPjwvdGhlYWQ+XG4gICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgIDxSZW5hbWVhYmxlVGV4dFxuICAgICAgICAgICAgICAgICAgICAgIGVhZ2VyPXt0cnVlfVxuICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWR2ZXJ0aXNlVGV4dD1cIktsaWNrYSBow6RyIGbDtnIgYXR0IGFuZ2UgdmVtIHNvbSB0YXIgZW1vdCBpbmzDpG1uaW5nc3VwcGdpZnRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgdGV4dD17Y291cnNlLmFzc2lnbm1lbnRFbWFpbHMgPyBjb3Vyc2UuYXNzaWdubWVudEVtYWlsc1swXSA6IFwiXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBbmdlIG1vdHRhZ2FyZSBhdiBpbmzDpG1uaW5nc3VwcGdpZnRlclwiXG4gICAgICAgICAgICAgICAgICAgICAgdGFnPVwiaW5wdXRcIlxuICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXt2YWx1ZSA9PiBob3N0LnVwZGF0ZSh7YXNzaWdubWVudEVtYWlsczogeyRzZXQ6IFt2YWx1ZV19fSl9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICA8L3RhYmxlPiovfVxuICAgICAgICAgICAgPC8+fVxuXG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiIGlkPVwic3ZpZDEyXzZhYjQ4MTFmMTViMTNjNzA2YjQzYmI0N1wiPlxuICAgICAgICAgICAgPGRpdiBpZD1cIkt1cnNlbnNtb2R1bGVyXCI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxoMj5LdXJzZW5zIG1vZHVsZXI8L2gyPlxuICAgICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPENvdXJzZU1vZHVsZUxpc3RcbiAgICAgICAgICAgIGhvc3Q9e2hvc3R9XG4gICAgICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cbiAgICAgICAgICAgIGlkc05vdENvdmVyZWRCeUFueVRhc2s9e2lkc05vdENvdmVyZWRCeUFueVRhc2t9IC8+XG4gICAgICAgICAgXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICA8V2VpZ2h0ZWRJdGVtc1RhYmxlIGNvdXJzZT17Y291cnNlfS8+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XG4gICAgICAgICAgICA8aDI+S3Vyc2VucyBzdGF0dXM8L2gyPlxuICAgICAgICAgICAgPGhyIC8+XG4gICAgICAgICAgICB7Y291cnNlLmNyZWF0ZWRCeSAmJiBjb3Vyc2UuY3JlYXRlZERhdGUgJiYgPHA+XG4gICAgICAgICAgICAgIEt1cnNlbiBza2FwYWRlcyB7ZHRGb3JtYXQoY291cnNlLmNyZWF0ZWREYXRlKX0gYXYgPHN0cm9uZz57Y291cnNlLmNyZWF0ZWRCeS5uYW1lfTwvc3Ryb25nPi5cbiAgICAgICAgICAgIDwvcD59XG4gICAgICAgICAgICB7Y291cnNlLm1vZGlmaWVkQnkgJiYgY291cnNlLm1vZGlmaWVkRGF0ZSAmJiA8cD5cbiAgICAgICAgICAgICAgS3Vyc2VuIHJlZGlnZXJhZGVzIHNlbmFzdCB7ZHRGb3JtYXQoY291cnNlLm1vZGlmaWVkRGF0ZSl9IGF2IDxzdHJvbmc+e2NvdXJzZS5tb2RpZmllZEJ5Lm5hbWV9PC9zdHJvbmc+LlxuICAgICAgICAgICAgPC9wPn1cbiAgICAgICAgICAgIHtjb3Vyc2UuYWN0aXZlID8gPHA+XG4gICAgICAgICAgICAgIEt1cnNlbiDDpHIgPHN0cm9uZz5BS1RJVjwvc3Ryb25nPiBzZWRhbiB7ZHRGb3JtYXQoY291cnNlLmFjdGl2YXRlZERhdGUpfSBhdiA8c3Ryb25nPntjb3Vyc2UuYWN0aXZhdGVkQnkubmFtZX08L3N0cm9uZz4uXG4gICAgICAgICAgICA8L3A+IDogPHA+XG4gICAgICAgICAgICAgICAgS3Vyc2VuIMOkciA8c3Ryb25nPklOQUtUSVY8L3N0cm9uZz57Y291cnNlLmluYWN0aXZhdGVkQnkgPyA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgIHNlZGFuIHtkdEZvcm1hdChjb3Vyc2UuaW5hY3RpdmF0ZWREYXRlKX0gYXYgPHN0cm9uZz57Y291cnNlLmluYWN0aXZhdGVkQnkubmFtZX08L3N0cm9uZz4uPC9zcGFuPiA6IDxzcGFuPi48L3NwYW4+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICA8L3A+fVxuICAgICAgICAgICAgeyh1bmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMubGVuZ3RoID09PSAwID9cbiAgICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibWFya2VkR3JlZW5cIj5Nb2R1bGVybmFzIGt1bnNrYXBza3JhdiB0w6Rja2VyIHNrb2x2ZXJrZXRzIGtyYXYgZsO2ciBkZW5uYSBrdXJzPC9wPiA6XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFya2VkUmVkIHdhcm5pbmctYm94XCI+PGRpdiBjbGFzc05hbWU9XCJ3YXJuaW5nRmxhZ1wiPlxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLWV4Y2xhbWF0aW9uLXRyaWFuZ2xlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICA8L2Rpdj48cD5Nb2R1bGVybmFzIGt1bnNrYXBza3JhdiB0w6Rja2VyIGludGUgc2tvbHZlcmtldHMga3JhdiBmw7ZyIGRlbm5hIGt1cnMuPC9wPlxuICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAge3Nhbml0eUNoZWNrV2FybmluZ3MubWFwKHdhcm5pbmcgPT4gPGRpdiBrZXk9e3dhcm5pbmd9IGNsYXNzTmFtZT1cIm1hcmtlZFJlZCB3YXJuaW5nLWJveFwiPjxkaXYgY2xhc3NOYW1lPVwid2FybmluZ0ZsYWdcIj5cbiAgICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1leGNsYW1hdGlvbi10cmlhbmdsZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgPC9kaXY+PHA+e3dhcm5pbmd9PC9wPjwvZGl2Pil9XG4gICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgIHshY291cnNlLmlzVGVtcGxhdGUgJiYgKG9yaWdDb3Vyc2UgPyA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpPT57XG4gICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0oTGBCZWtyw6RmdGEgYm9ydHRhZ25pbmcgYXYga3Vyc2VuIFwiJHtjb3Vyc2UubmFtZX0gLSAke2NvdXJzZS5kZXNjcmlwdGlvbn1cIiBmw7ZyIHNrb2xhbiAke2NvdXJzZS5zY2hvb2x9XFxuXFxuS3Vyc2VuIGtvbW1hciBhdHQgcmFkZXJhcyBoZWx0IVxcblxcbsOEciBkdSBzw6RrZXI/YCkpXG4gICAgICAgICAgICAgICAgICBob3N0LmRlbGV0ZUNvdXJzZSgpLmNhdGNoKHNob3dFcnJvcik7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+VGEgYm9ydCBrdXJzPC9kaXY+OjxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCk9Pmhpc3RvcnkuZ28oLTEpfVxuICAgICAgICAgICAgPkF2YnJ5dFxuICAgICAgICAgICAgICA8L2Rpdj4pfVxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlXCIgb25DbGljaz17KCkgPT4gaG9zdC5zYXZlKCl9PlxuICAgICAgICAgICAgICBTcGFyYVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7Y291cnNlLmFjdGl2ZSA/XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGJ0bi1pbmZvIGJ0bi1sYXJnZVwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaG9zdC5pbmFjdGl2YXRlQW5kU2F2ZSgpfT5cbiAgICAgICAgICAgICAgICBJbmFrdGl2ZXJhIG9jaCBzcGFyYVxuICAgICAgICAgICAgICA8L2Rpdj4gOlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4taW5mbyBidG4tbGFyZ2VcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhvc3QuYWN0aXZhdGVBbmRTYXZlKCl9PlxuICAgICAgICAgICAgICAgIEFrdGl2ZXJhIG9jaCBzcGFyYVxuICAgICAgICAgICAgICA8L2Rpdj59XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1jb2x1bW4tNVwiPlxuICAgICAgICA8U2Nob29sQ291cnNlcyAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH1cbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBMLCBzaG93SW5mbywgc2hvd0Vycm9yLCBmbGF0dGVuLCBjb21wYXJlUHJvcCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCB7IENvdXJzZSwgUmVzb3VyY2UsIEtub3dsZWRnZVJlcXVpcmVtZW50LCBTdWJqZWN0LCBBYmlsaXR5LCBUYXNrLCBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XG5pbXBvcnQgeyBCYXRjaFJ1bm5lciwgSHR0cEVycm9yLCBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSAnLi9jb3Vyc2UtYmFubmVyJztcbmltcG9ydCB7IElubmVyRWRpdENvdXJzZSB9IGZyb20gJy4vaW5uZXItZWRpdC1jb3Vyc2UnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcbmltcG9ydCB7IHVwZGF0ZURvY3VtZW50R3JhcGhzLCBhcHBseUV0YWdzLCB1cGRhdGVDb3Vyc2VCdWlsZGVyU3RhdHVzLCBsb2FkQ291cnNlLCB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcywgdXBkYXRlQ3JlYXRpb25TdGFtcCwgdXBkYXRlTW9kaWZpY2F0aW9uU3RhbXAgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBJQ291cnNlRWRpdG9ySG9zdCwgRGlhbG9nLCBEaWFsb2dDb250YWluZXIgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvdXJzZS1lZGl0b3ItaG9zdCc7XG5pbXBvcnQgeyBSZW1vdmVJdGVtIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0nO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCB7IGdldFVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cywgZ2V0SWRzTm90Q292ZXJlZEJ5VGFza3MgfSBmcm9tICcuL2J1c2luZXNzLWxvZ2ljJztcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xuaW1wb3J0IHsgbXlTY2hvb2xDb3Vyc2VzUmVwbyB9IGZyb20gJy4uLy4uLy4uL3JlcG9zL3NjaG9vbC1jb3Vyc2VzJztcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSBcIi4uLy4uLy4uL2FjY2Vzcy1jb250cm9sXCI7XG5cbmNvbnN0IGNhdGNoZXIgPSBjZmcuRU5WSVJPTk1FTlQgPT09ICdwcm9kdWN0aW9uJyA/XG4gIHNob3dFcnJvciA6IG51bGw7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIGlkPzogc3RyaW5nO1xuICBzdWJqZWN0SWQ/OiBzdHJpbmc7XG4gIGlzVGVtcGxhdGU/OiBib29sZWFuO1xuICB0ZW1wbGF0ZUlkPzogc3RyaW5nO1xuICB2aWV3PzogJ3N0dWRlbnRQYWdlJyB8ICdjb3Vyc2VCdWlsZGVyJyB8ICd0ZW1wbGF0ZUJ1aWxkZXInO1xuICB2aWV3Q291cnNlVXJsOiBzdHJpbmc7XG4gIGZlZWRiYWNrVXJsOiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG4gIG9yaWdDb3Vyc2U6IENvdXJzZSB8IG51bGw7XG4gIG9yaWdUZW1wbGF0ZTogQ291cnNlIHwgbnVsbDtcbiAgY291cnNlOiBDb3Vyc2U7XG4gIGFsbENvdXJzZXM/OiBDb3Vyc2VbXTtcbiAgZGlhbG9nQ29udGFpbmVyczogRGlhbG9nQ29udGFpbmVyW107IC8vIFdoZW4gZWRpdGluZyBpdGVtcywgaXQgbWF5IHNob3cgYXMgYSBkaWFsb2dcbiAgaGFzVW5zYXZlZERhdGE6IGJvb2xlYW47XG4gIHZpZXc6ICdzdHVkZW50UGFnZScgfCAnY291cnNlQnVpbGRlcicgfCAndGVtcGxhdGVCdWlsZGVyJztcbn1cblxuY29uc3QgQ09ORklSTV9OQVZJR0FURV9NRVNTQUdFID1cbiAgTGBEdSBoYXIgb3NwYXJhdCBkYXRhLiBWw6RsaiBhdmJyeXQgb2NoIHRyeWNrIENUUkwrUyBvbSBkdSB2aWxsIHNwYXJhIGbDtnJzdC5gO1xuICBcbmNvbnN0IERFRkFVTFRfU1RBVEU6IFN0YXRlID0ge1xuICBvcmlnQ291cnNlOiBudWxsLFxuICBvcmlnVGVtcGxhdGU6IG51bGwsXG4gIGNvdXJzZTogbnVsbCxcbiAgZGlhbG9nQ29udGFpbmVyczogW10sXG4gIGhhc1Vuc2F2ZWREYXRhOiBmYWxzZSxcbiAgdmlldzogJ2NvdXJzZUJ1aWxkZXInXG59O1xuXG5leHBvcnQgY2xhc3MgRWRpdENvdXJzZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4gaW1wbGVtZW50cyBJQ291cnNlRWRpdG9ySG9zdCB7XG4gIHBhZ2VZT2Zmc2V0OiBudW1iZXI7XG4gIGNvbnRlbnREaXY6IEhUTUxEaXZFbGVtZW50O1xuICBjb250ZW50WVBvczogbnVtYmVyO1xuICBpc1NhdmluZzogYm9vbGVhbjtcbiAgZGlhbG9nczogRGlhbG9nW107XG5cbiAgc2V0U3RhdGVQcm9taXNlZCAoc3RhdGU6IFBhcnRpYWw8U3RhdGU+KSA6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuX3NldFN0YXRlKHtoYXNVbnNhdmVkRGF0YTogdHJ1ZSwgLi4uc3RhdGV9KTtcbiAgfVxuXG4gIHNldE5vblNhdmVhYmxlRGF0YVN0YXRlIChzdGF0ZTogUGFydGlhbDxTdGF0ZT4pIDogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5fc2V0U3RhdGUoc3RhdGUpO1xuICB9XG5cbiAgX3NldFN0YXRlIChzdGF0ZTogUGFydGlhbDxTdGF0ZT4pIDogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAoc3RhdGUuY291cnNlKSB7XG4gICAgICB7XG4gICAgICAgIC8vXG4gICAgICAgIC8vIE1haW50YWluIGNvdXJzZSB0YXNrIGxpbmtzIChyZW1vdmUgbGlua3MgdG8gdGFza3MgdGhhdCBhcmUgbm90IHVzZWRcbiAgICAgICAgLy8gYnkgYW55IG1vZHVsZSlcbiAgICAgICAgLy9cbiAgICAgICAgY29uc3Qge3Rhc2tzLCBtb2R1bGVzfSA9IHN0YXRlLmNvdXJzZTtcbiAgICAgICAgY29uc3QgdXNlZFRhc2tJZHMgPSB7fTtcbiAgICAgICAgbW9kdWxlcy5mb3JFYWNoKG1vZHVsZSA9PiBtb2R1bGUudGFza0lkcy5mb3JFYWNoKGlkID0+IHVzZWRUYXNrSWRzW2lkXSA9IHRydWUpKTtcbiAgICAgICAgY29uc3QgZmlsdGVyZWRDb3Vyc2VUYXNrcyA9IHRhc2tzLmZpbHRlcih0ID0+IHVzZWRUYXNrSWRzW3QuaWRdKTtcbiAgICAgICAgY29uc3QgbW9kaWZpZWRDb3Vyc2UgPSB7Li4uc3RhdGUuY291cnNlfTtcbiAgICAgICAgbW9kaWZpZWRDb3Vyc2UudGFza3MgPSBmaWx0ZXJlZENvdXJzZVRhc2tzO1xuICAgICAgICBzdGF0ZSA9IHsuLi5zdGF0ZSwgY291cnNlOiBtb2RpZmllZENvdXJzZX07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW52b2tlIG91ciBjb3Vyc2UgaW50byBzdGF0ZSBwcm9wZXJ0eSBhbGxDb3Vyc2VzIHNvIHRoYXQgdGhlXG4gICAgLy8gcmlnaHQtaGFuZCBzaWRlIGxpc3Qgb2YgY291cnNlcyBnZXRzIHVwZGF0ZSBpbW1lZGlhdGVseSB3aXRoXG4gICAgLy8gdGhlIHB1Ymxpc2hhYmxlIHN0YXRlIG9mIHRoaXMgY291cnNlLlxuICAgIGxldCBhbGxDb3Vyc2VzID0gc3RhdGUuYWxsQ291cnNlcyB8fCB0aGlzLnN0YXRlLmFsbENvdXJzZXM7XG4gICAgY29uc3QgY291cnNlID0gc3RhdGUuY291cnNlIHx8IHRoaXMuc3RhdGUuY291cnNlO1xuICAgIGlmIChhbGxDb3Vyc2VzKSB7XG4gICAgICBjb25zdCBpZHhPdXJDb3Vyc2UgPSBhbGxDb3Vyc2VzLmZpbmRJbmRleChjID0+IGMuaWQgPT09IHRoaXMucHJvcHMuaWQpO1xuICAgICAgYWxsQ291cnNlcyA9IHVwZGF0ZShhbGxDb3Vyc2VzLCB7JHNwbGljZTogW1tpZHhPdXJDb3Vyc2UsIDEsIGNvdXJzZV1dfSk7XG4gICAgICBzdGF0ZSA9IHsuLi5zdGF0ZX07XG4gICAgICBzdGF0ZS5hbGxDb3Vyc2VzID0gYWxsQ291cnNlcztcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzdXBlci5zZXRTdGF0ZSgoKT0+c3RhdGUgYXMgU3RhdGUsIHJlc29sdmUpKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0gey4uLkRFRkFVTFRfU1RBVEV9O1xuICAgIHRoaXMudXBkYXRlID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlZkRpYWxvZyA9IHRoaXMucmVmRGlhbG9nLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jb250ZW50WVBvcyA9IDA7XG4gICAgdGhpcy5vbktleURvd24gPSB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuYmVmb3JlVW5sb2FkID0gdGhpcy5iZWZvcmVVbmxvYWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ2xpY2tQcmV2ZW50VW5sb2FkID0gdGhpcy5vbkNsaWNrUHJldmVudFVubG9hZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaXNTYXZpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmRpYWxvZ3MgPSBbXTtcbiAgICBpZiAocHJvcHMudmlldykgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIC4uLnRoaXMuc3RhdGUsXG4gICAgICB2aWV3OiBwcm9wcy52aWV3XG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB0aGlzLmxvYWQoKS5jYXRjaChjYXRjaGVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlEb3duKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5iZWZvcmVVbmxvYWQpO1xuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tQcmV2ZW50VW5sb2FkKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCB0aGlzLmJlZm9yZVVubG9hZCk7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja1ByZXZlbnRVbmxvYWQpO1xuICAgIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoJycpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHM6IFByb3BzKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS5jb3Vyc2UpIHtcbiAgICAgIGlmIChuZXh0UHJvcHMuaWQgIT09IHRoaXMucHJvcHMuaWQgfHwgbmV4dFByb3BzLnRlbXBsYXRlSWQgIT09IHRoaXMucHJvcHMudGVtcGxhdGVJZCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoREVGQVVMVF9TVEFURSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZXh0UHJvcHMudmlldyAhPT0gdGhpcy5wcm9wcy52aWV3KSB7XG4gICAgICB0aGlzLnNldE5vblNhdmVhYmxlRGF0YVN0YXRlKHt2aWV3OiBuZXh0UHJvcHMudmlld30pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IFByb3BzLCBwcmV2U3RhdGU6IFN0YXRlKSB7XG4gICAgaWYgKHRoaXMuY29udGVudERpdikge1xuICAgICAgY29uc3QgY29udGVudERpdjogSFRNTERpdkVsZW1lbnQgPSBmaW5kRE9NTm9kZSh0aGlzLmNvbnRlbnREaXYpO1xuICAgICAgaWYgKGNvbnRlbnREaXYpIHtcbiAgICAgICAgdGhpcy5jb250ZW50WVBvcyA9IGNvbnRlbnREaXYuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2U3RhdGUgJiYgcHJldlN0YXRlLmNvdXJzZSkge1xuICAgICAgLy8gVGhpcyB3YXMgbm90IHRoZSBpbml0aWFsIHVwZGF0ZS5cbiAgICAgIC8vIElmIHByb3BzIGhhdmUgYmVlbiB1cGRhdGVkIHRvIHBvaW50IG91dCBhbm90aGVyIGNvdXJzZSBvciB0ZW1wbGF0ZSwgcmVzZXQgY29tcG9uZW50OlxuICAgICAgaWYgKHRoaXMucHJvcHMuaWQgIT09IHByZXZQcm9wcy5pZCB8fCB0aGlzLnByb3BzLnRlbXBsYXRlSWQgIT09IHByZXZQcm9wcy50ZW1wbGF0ZUlkKSB7XG4gICAgICAgIHRoaXMubG9hZCgpLmNhdGNoKGNhdGNoZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcHJldlN0YXRlLmhhc1Vuc2F2ZWREYXRhICYmIHRoaXMuc3RhdGUuaGFzVW5zYXZlZERhdGEpIHtcbiAgICAgIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoJ3Vuc2F2ZWQnKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBsb2FkRnJvbVRlbXBsYXRlKHRlbXBsYXRlSWQ6IHN0cmluZykge1xuICAgIHNob3dJbmZvKFwiTGFkZGFyIGRhdGEgZnLDpW4gbWFsbC4uLlwiKTtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGF3YWl0IGxvYWRDb3Vyc2UodGVtcGxhdGVJZCwge2luY2x1ZGVUZW1wbGF0ZUNoYWluOiB0cnVlfSk7XG4gICAgY29uc3QgY291cnNlID0gdXBkYXRlQ3JlYXRpb25TdGFtcChEYXRlLm5vdygpLCB0ZW1wbGF0ZSwgZW52LmN1cnJlbnRVc2VyKTtcbiAgICBjb3Vyc2UuaWQgPSBjcmVhdGVVVUlEKCk7XG4gICAgY291cnNlLnBhcmVudElkID0gdGVtcGxhdGVJZDtcbiAgICBjb3Vyc2UuYWN0aXZlID0gZmFsc2U7XG4gICAgY291cnNlLmlzVGVtcGxhdGUgPSBmYWxzZTtcbiAgICBjb3Vyc2UudGVtcGxhdGVDaGFpbiA9IFsuLi5jb3Vyc2UudGVtcGxhdGVDaGFpbl07XG4gICAgY291cnNlLnRlbXBsYXRlQ2hhaW4ucHVzaCh7aWQ6IHRlbXBsYXRlSWQsICRtZXRhOiAncmVmJ30gYXMgQ291cnNlKTtcbiAgICBjb25zdCBteVNjaG9vbCA9IGVudi5jdXJyZW50VXNlci5zY2hvb2w7XG4gICAgY291cnNlLnNjaG9vbCA9IG15U2Nob29sO1xuICAgIGNvdXJzZS5kZXNjcmlwdGlvbiA9IFwiXCI7XG4gICAgY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMgPSBbXTtcbiAgICBjb3Vyc2UuYWNsID0gW1xuICAgICAgXCJyb2xlOlVTRVI6UlwiLCAvLyBBbGwgdXNlcnMgbWF5IHZpZXcgaXQuIChDb3VsZCBoYXZlIHJlc3RyaWN0ZWQgaXQgdG8gc2Nob29sLCBidXQgbm90IG5lc2Nlc3NhcnkhKVxuICAgICAgYHNjaG9vbFJvbGU6JHtteVNjaG9vbH0vRU1QTE9ZRUU6U2AgLy8gT3RoZXIgdGVhY2hlcnMgYXQgc2FtZSBzY2hvb2wgc2hvdWxkIGJlIGFibGUgdG8gbW9kaWZ5IHRoZSBjb3Vyc2UuXG4gICAgXTtcbiAgICBkZWxldGUgY291cnNlLiRldGFnO1xuICAgIGRlbGV0ZSBjb3Vyc2UuY3JlYXRlZEJ5O1xuICAgIGRlbGV0ZSBjb3Vyc2UuY3JlYXRlZERhdGU7XG4gICAgZGVsZXRlIGNvdXJzZS5tb2RpZmllZEJ5O1xuICAgIGRlbGV0ZSBjb3Vyc2UubW9kaWZpZWREYXRlO1xuICAgIGRlbGV0ZSBjb3Vyc2UuYWN0aXZhdGVkQnk7XG4gICAgZGVsZXRlIGNvdXJzZS5hY3RpdmF0ZWREYXRlO1xuICAgIGRlbGV0ZSBjb3Vyc2UuZ29vZ2xlQ2xhc3NSb29tQ29kZTtcbiAgICBkZWxldGUgY291cnNlLmdvb2dsZUNsYXNzUm9vbVVSTDtcbiAgICBhd2FpdCB0aGlzLnNldFN0YXRlUHJvbWlzZWQoeyBjb3Vyc2UsIG9yaWdDb3Vyc2U6IG51bGwsIG9yaWdUZW1wbGF0ZTogdGVtcGxhdGUgfSk7XG4gICAgc2hvd0luZm8oXCJcIik7XG4gIH1cblxuICBhc3luYyBsb2FkKCkge1xuICAgIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoJycpO1xuICAgIGlmICh0aGlzLnByb3BzLmlkKSB7XG4gICAgICBhd2FpdCB0aGlzLmxvYWRFeGlzdGluZ0NvdXJzZSh0aGlzLnByb3BzLmlkKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudGVtcGxhdGVJZCkge1xuICAgICAgYXdhaXQgdGhpcy5sb2FkRnJvbVRlbXBsYXRlKHRoaXMucHJvcHMudGVtcGxhdGVJZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihMYE9naWx0aWcgcGFyYW1ldGVyLiBpZCBlbGxlciB0ZW1wbGF0ZUlkIG3DpXN0ZSBhbmdlc2ApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGxvYWRFeGlzdGluZ0NvdXJzZShjb3Vyc2VJZDogc3RyaW5nKSB7XG4gICAgc2hvd0luZm8oXCJMYWRkYXIga3Vyc1wiKTtcbiAgICBjb25zdCBjb3Vyc2UgPSBhd2FpdCBsb2FkQ291cnNlKGNvdXJzZUlkKTtcbiAgICBpZiAoIWNvdXJzZS5yZXNwb25zaWJsZVRlYWNoZXJzKSBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycyA9IFtdO1xuICAgIGF3YWl0IHRoaXMuc2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUoeyBjb3Vyc2UsIG9yaWdDb3Vyc2U6IGNvdXJzZSB9KTtcbiAgICBzaG93SW5mbyhcIlwiKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZShjb3Vyc2VVcGRhdGVzKSB7XG4gICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHsgY291cnNlOiB1cGRhdGUodGhpcy5zdGF0ZS5jb3Vyc2UsIGNvdXJzZVVwZGF0ZXMpIH0pO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlQ291cnNlKCkge1xuICAgIHNob3dJbmZvKFwiUmFkZXJhciBrdXJzZW4uLi5cIik7XG4gICAgY29uc3QgY291cnNlU2Nob29sID0gdGhpcy5zdGF0ZS5jb3Vyc2Uuc2Nob29sO1xuICAgIGNvbnN0IHBhcmVudElkID0gdGhpcy5zdGF0ZS5jb3Vyc2UucGFyZW50SWQ7XG4gICAgY29uc3QgY291cnNlSWQgPSB0aGlzLnByb3BzLmlkO1xuXG4gICAgY29uc3QgY2hpbGRyZW4gPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PENvdXJzZT4oXCJjb3Vyc2VzXCIsIHtcbiAgICAgIGhhc0VkZ2VzVG86IFt0aGlzLnByb3BzLmlkXVxuICAgIH0pO1xuICAgIGNvbnN0IGJyID0gbmV3IEJhdGNoUnVubmVyKCk7XG4gICAgZm9yIChjb25zdCBjaGlsZENvdXJzZSBvZiBjaGlsZHJlbikge1xuICAgICAgLyogQ0FOTk9UIERPIFRISVMuIE1BWSBOT1QgSEFWRSBBQ0NFU1MhIGlmIChjaGlsZENvdXJzZS5wYXJlbnRJZCA9PT0gY291cnNlSWQpIHtcbiAgICAgICAgLy8gUmVjb25uZWN0IGNoaWxkIHdpdGggbXkgcGFyZW50IGluc3RlYWQsIGFzIEkgd2lsbCBiZSBkaXNhcHBlYXJpbmcuLi5cbiAgICAgICAgY2hpbGRDb3Vyc2UucGFyZW50SWQgPSBwYXJlbnRJZDtcbiAgICAgICAgYnIucHV0KFwiY291cnNlc1wiLCBjaGlsZENvdXJzZSk7XG4gICAgICB9Ki9cbiAgICB9XG5cbiAgICBici5kZWxldGUoXCJjb3Vyc2VzXCIsIGNvdXJzZUlkKTtcbiAgICBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5iYXRjaChici5tdXRhdGlvblJlcXVlc3RzKTtcbiAgICBpZiAoY291cnNlU2Nob29sID09PSBlbnYuY3VycmVudFVzZXIuc2Nob29sKSB7XG4gICAgICBteVNjaG9vbENvdXJzZXNSZXBvLmRlbGV0ZShjb3Vyc2VJZCk7XG4gICAgfVxuICAgIHNob3dJbmZvKFwiXCIpO1xuICAgIGxvY2F0aW9uLmhhc2ggPSBcIiMvY291cnNlcy9uZXdcIjtcbiAgfVxuXG4gIGFzeW5jIHNhdmUgKCkge1xuICAgIGlmICh0aGlzLmlzU2F2aW5nKSByZXR1cm47XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuaXNTYXZpbmcgPSB0cnVlO1xuICAgICAgYXdhaXQgdGhpcy5fc2F2ZSgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGVyciAmJiBlcnIubWVzc2FnZSA/IGVyci5tZXNzYWdlIDogTGBFdHQgb2vDpG50IGZlbCBoYXIgaW50csOkZmZhdC4uLmA7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIGlmIChlcnIubmFtZSA9PT0gJ2h0dHA0MDknIHx8IGVyci5uYW1lID09PSAnaHR0cDQxMicgfHwgZXJyLm5hbWUgPT09ICdodHRwNDA0Jykge1xuICAgICAgICAgIC8vIENvbmZsaWN0LiBTaG93IGEgbmljZXIgZXJyb3IgbWVzc2FnZTpcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBMYEt1cnNlbiBoYXIgcmVkaWdlcmFkIGF2IGFubmFuIGFudsOkbmRhcmUuIExhZGRhIG9tIHNpZGFuIG9jaCBnw7ZyIG9tIMOkbmRyaW5hcm5hLmA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyLm5hbWUgPT09ICdodHRwNDAzJykge1xuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmNvdXJzZS5pc1RlbXBsYXRlKVxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gTGBJbmdlbiBiZWjDtnJpZ2hldCBhdHQgc3BhcmEga3Vyc21hbGxlbi4gRW5kYXN0IGFkbWluaXN0cmF0w7ZyZXIga2FuIHJlZGlnZXJhIGt1cnNtYWxsYXIuYDtcbiAgICAgICAgICBlbHNlIGlmICh0aGlzLnN0YXRlLmNvdXJzZS5zY2hvb2wpXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBMYEluZ2VuIGJlaMO2cmlnaGV0IGF0dCBzcGFyYSBrdXJzZW4gJHt0aGlzLnN0YXRlLmNvdXJzZS5uYW1lfS4gS3Vyc2VuIGthbiBiYXJhIHJlZGlnZXJhcyBhdiBhbnN0w6RsbGRhIHDDpSAke3RoaXMuc3RhdGUuY291cnNlLnNjaG9vbH1gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaG93RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoJ2Vycm9yJyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuaXNTYXZpbmcgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIF9zYXZlKCkge1xuICAgIGNvbnN0IHsgY291cnNlLCBvcmlnQ291cnNlLCBvcmlnVGVtcGxhdGUgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZG9lc0FsbFRhc2tzQ292ZXJBbGxSZXF1aXJlbWVudHMgPSBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMoY291cnNlKS5sZW5ndGggPT09IDA7XG5cbiAgICBzaG93SW5mbyhMYFNwYXJhci4uLmApO1xuICAgIGxldCBtb2RpZmllZENvdXJzZTogQ291cnNlID0gdXBkYXRlTW9kaWZpY2F0aW9uU3RhbXAoRGF0ZS5ub3coKSwgY291cnNlLCBlbnYuY3VycmVudFVzZXIpO1xuXG4gICAgY29uc3QgYmF0Y2ggPSBuZXcgQmF0Y2hSdW5uZXIoKTtcblxuICAgIC8vIFJlc29sdmUgbWFuaXB1bGF0ZWQgZ3JhcGhzIG9mIGVhY2ggdGFzayBhbmQgcmVtb3ZlICRtZXRhLCBnZW5lcmF0ZSBVVUlEIGV0YyBmb3JcbiAgICAvLyBlYWNoIGFkZGVkIC8gdXBkYXRlZCB0YXNrLlxuICAgIC8vIFRoZSByZXN1bHQgb2YgdGhpcyBvcGVyYXRpb24gaXMgdHdvLWZvbGQ6XG4gICAgLy8gIDEpIFJlbW92ZSAkbWV0YSBhbmQgY3JlYXRlIGlkIGZvciBlYWNoIHRhc2suIFRvIGJlIHJlZmxlY3RlZCBpbnRvIG5leHQgc3RhdGUuXG4gICAgLy8gIDIpIEdlbmVyYXRlIG11dGF0aW9uIHJlcXVlc3RzIGludG8gJ2JhdGNoJyB0byBpbmNsdWRlIGluIHRoZSBzaW5nbGUgYmF0Y2ggcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICAgIGNvbnN0IG9yaWcgPSBvcmlnQ291cnNlIHx8IG9yaWdUZW1wbGF0ZTtcbiAgICBjb25zdCBuZXdDb3Vyc2VUYXNrcyA9IG1vZGlmaWVkQ291cnNlLnRhc2tzLm1hcCh0YXNrID0+IHtcbiAgICAgIGlmICh0YXNrLiRtZXRhID09PSAnYWRkJyB8fCB0YXNrLiRtZXRhID09PSAndXBkYXRlJykge1xuICAgICAgICBjb25zdCBvcmlnVGFzayA9IG9yaWcudGFza3MuZmluZCh0ID0+IHQuaWQgPT09IHRhc2suaWQpO1xuICAgICAgICByZXR1cm4gdXBkYXRlRG9jdW1lbnRHcmFwaHMob3JpZ1Rhc2sgfHwge30sIHRhc2ssIFwidGFza3NcIiwge1xuICAgICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50czogJ2tub3dsZWRnZS1yZXF1aXJlbWVudHMnLFxuICAgICAgICAgIGNlbnRyYWxDb250ZW50OiAnY2VudHJhbC1jb250ZW50JyxcbiAgICAgICAgICBhYmlsaXRpZXM6ICdhYmlsaXRpZXMnXG4gICAgICAgIH0sIGJhdGNoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWRUYXNrID0gey4uLnRhc2t9O1xuICAgICAgICBkZWxldGUgdXBkYXRlZFRhc2suJG1ldGE7XG4gICAgICAgIHJldHVybiB1cGRhdGVkVGFzaztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtb2RpZmllZENvdXJzZSA9IHVwZGF0ZShtb2RpZmllZENvdXJzZSwge3Rhc2tzOiB7JHNldDogbmV3Q291cnNlVGFza3N9fSk7XG5cbiAgICBtb2RpZmllZENvdXJzZSA9IHVwZGF0ZURvY3VtZW50R3JhcGhzKG9yaWdDb3Vyc2UgfHwge30sIG1vZGlmaWVkQ291cnNlLCAnY291cnNlcycsIHtcbiAgICAgIHRlbXBsYXRlQ2hhaW46ICdjb3Vyc2VzJyxcbiAgICAgIGNlbnRyYWxDb250ZW50OiAnY2VudHJhbC1jb250ZW50JyxcbiAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50czogJ2tub3dsZWRnZS1yZXF1aXJlbWVudHMnLFxuICAgICAgYWJpbGl0aWVzOiAnYWJpbGl0aWVzJyxcbiAgICAgIGltYWdlczogJ2ltYWdlcycsXG4gICAgICB0YXNrczogJ3Rhc2tzJ1xuICAgIH0sIGJhdGNoKTtcblxuICAgIG1vZGlmaWVkQ291cnNlID0gey4uLm1vZGlmaWVkQ291cnNlIH07XG4gICAgbW9kaWZpZWRDb3Vyc2UucHVibGlzaGFibGUgPSBkb2VzQWxsVGFza3NDb3ZlckFsbFJlcXVpcmVtZW50cztcbiAgICBjb25zdCB0YWdzID0gKG1vZGlmaWVkQ291cnNlLnRhZ3MgfHwgW10pLmZpbHRlcih0YWcgPT4gdGFnICE9PSAnaW5jb21wbGV0ZScpO1xuICAgIG1vZGlmaWVkQ291cnNlLnRhZ3MgPSBtb2RpZmllZENvdXJzZS5wdWJsaXNoYWJsZSA/XG4gICAgICB0YWdzIDogdGFncy5jb25jYXQoXCJpbmNvbXBsZXRlXCIpO1xuXG4gICAgaWYgKCFvcmlnQ291cnNlKSB7XG4gICAgICAvLyBBIG5ldyBjb3Vyc2Ugc2hvdWxkIGJlIGFkZGVkOlxuICAgICAgYmF0Y2guYWRkKCdjb3Vyc2VzJywgbW9kaWZpZWRDb3Vyc2UpO1xuICAgICAgaWYgKGNvdXJzZS5zY2hvb2wpIHtcbiAgICAgICAgY29uc3Qgc2Nob29sSWQgPSBhd2FpdCBteVNjaG9vbENvdXJzZXNSZXBvLmdldFNjaG9vbElkKCk7XG4gICAgICAgIGJhdGNoLmxpbmsoXCJzY2hvb2xzXCIsIHNjaG9vbElkLCBcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImNvdXJzZXNcIik7XG4gICAgICAgIGlmIChjb3Vyc2UuYWN0aXZlKSB7XG4gICAgICAgICAgYmF0Y2gubGluayhcInNjaG9vbHNcIiwgc2Nob29sSWQsIFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiYWN0aXZlQ291cnNlc1wiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBbiBleGlzdGluZyBjb3Vyc2Ugc2hvdWxkIGJlIHVwZGF0ZWQ6XG4gICAgICBiYXRjaC5wdXQoJ2NvdXJzZXMnLCBtb2RpZmllZENvdXJzZSk7XG4gICAgICBpZiAoIW9yaWdDb3Vyc2UuYWN0aXZlICYmIGNvdXJzZS5hY3RpdmUpIHtcbiAgICAgICAgLy8gQ291cnNlIHdhcyBhY3RpdmF0ZWQuIEFkZCBhIHJlZmVyZW5jZSB0byB0aGUgY291cnNlIG9uIHNjaG9vbC5hY3RpdmVDb3Vyc2VzLlxuICAgICAgICBjb25zdCBzY2hvb2xJZCA9IGF3YWl0IG15U2Nob29sQ291cnNlc1JlcG8uZ2V0U2Nob29sSWQoKTtcbiAgICAgICAgYmF0Y2gubGluayhcInNjaG9vbHNcIiwgc2Nob29sSWQsIFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiYWN0aXZlQ291cnNlc1wiKTtcbiAgICAgIH0gZWxzZSBpZiAob3JpZ0NvdXJzZS5hY3RpdmUgJiYgIWNvdXJzZS5hY3RpdmUpIHtcbiAgICAgICAgLy8gQ291cnNlIHdhcyBpbmFjdGl2YXRlZC4gUmVtb3ZlIGZyb20gc2Nob29sLmFjdGl2ZUNvdXJzZXMuXG4gICAgICAgIGNvbnN0IHNjaG9vbElkID0gYXdhaXQgbXlTY2hvb2xDb3Vyc2VzUmVwby5nZXRTY2hvb2xJZCgpO1xuICAgICAgICBiYXRjaC51bmxpbmsoXCJzY2hvb2xzXCIsIHNjaG9vbElkLCBcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImFjdGl2ZUNvdXJzZXNcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUGVyZm9ybSB0aGUgZW50aXJlIGJhdGNoIHRocm91Z2ggYSBzaW5nbGUgUE9TVCByZXF1ZXN0OlxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmJhdGNoKGJhdGNoLm11dGF0aW9uUmVxdWVzdHMpO1xuICAgIHNob3dJbmZvIChvcmlnQ291cnNlID9cbiAgICAgIExgw4RuZHJpbmdhcm5hIGhhciBzcGFyYXRzYCA6XG4gICAgICBMYEt1cnNlbiBoYXIgc2thcGF0c2ApO1xuICAgIC8vIFVwZGF0ZSBzdGF0ZSB0byByZWZsZWN0IHdoYXQgaGFzIGJlZW4gcG9zdGVkOlxuICAgIGlmIChyZXMgJiYgcmVzLm5ld0V0YWdzKVxuICAgICAgICBtb2RpZmllZENvdXJzZSA9IGFwcGx5RXRhZ3MobW9kaWZpZWRDb3Vyc2UsIHJlcy5uZXdFdGFncywgW1wiaW1hZ2VzXCIsIFwidGFza3NcIl0pIGFzIENvdXJzZTtcbiAgICBcbiAgICBpZiAoY291cnNlLnNjaG9vbCA9PT0gZW52LmN1cnJlbnRVc2VyLnNjaG9vbCkge1xuICAgICAgLy8gVXBkYXRlIG15U2Nob29sQ291cnNlc1JlcG9cbiAgICAgIGlmICghb3JpZ0NvdXJzZSkge1xuICAgICAgICBteVNjaG9vbENvdXJzZXNSZXBvLmluc2VydChtb2RpZmllZENvdXJzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBteVNjaG9vbENvdXJzZXNSZXBvLnVwZGF0ZShtb2RpZmllZENvdXJzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXdhaXQgdGhpcy5zZXROb25TYXZlYWJsZURhdGFTdGF0ZSh7Y291cnNlOiBtb2RpZmllZENvdXJzZSwgb3JpZ0NvdXJzZTogbW9kaWZpZWRDb3Vyc2UsIGhhc1Vuc2F2ZWREYXRhOiBmYWxzZX0pO1xuICAgIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoJycpO1xuICAgIGlmICghb3JpZ0NvdXJzZSkge1xuICAgICAgLy8gVGhpcyB3YXMgdGhlIGNyZWF0aW9uIG9mIGEgbmV3IGNvdXJzZS4gQ29ycmVjdCB0aGUgcm91dGUgbm93IHdoZW4gdGhlIHVzZXIgZW50ZXJzIGFuIGVkaXQgc3RhdGU6XG4gICAgICBsb2NhdGlvbi5oYXNoID0gYCMvY291cnNlcy8ke21vZGlmaWVkQ291cnNlLmlkfS9lZGl0YDtcbiAgICB9XG4gIH1cblxuICBhY3RpdmF0ZUFuZFNhdmUoKSB7XG4gICAgY29uc3QgY291cnNlID0gey4uLnRoaXMuc3RhdGUuY291cnNlfTtcbiAgICBpZiAoIWNvdXJzZS5hY3RpdmUpIHtcbiAgICAgIC8qY29uc3QgdW5jb3ZlcmVkUmVxdWlyZW1lbnRzID0gZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzKGNvdXJzZSk7XG4gICAgICBpZiAodW5jb3ZlcmVkUmVxdWlyZW1lbnRzLmxlbmd0aCA+IDApIFxuICAgICAgICByZXR1cm4gc2hvd0Vycm9yIChMYERldCBmaW5ucyBrdW5za2Fwc2tyYXYgc29tIGludGUgdXBwZnlsbHMgYXYgbsOlZ29uIG1vZHVsLiBLYW4gaW50ZSBha3RpdmVyYSBrdXJzZW4gZsO2cnLDpG4gYWxsYSBrdW5za2Fwc2tyYXYgZmlubnMgbWVkLmApO1xuICAgICAgKi9cblxuICAgICAgY291cnNlLmFjdGl2ZSA9IHRydWU7XG4gICAgICBjb3Vyc2UuYWN0aXZhdGVkQnkgPSB7XG4gICAgICAgIG5hbWU6IGVudi5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSxcbiAgICAgICAgdXJsOiBcIm1haWx0bzpcIiArICBlbnYuY3VycmVudFVzZXIubWFpbFxuICAgICAgfTtcbiAgICAgIGNvdXJzZS5hY3RpdmF0ZWREYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7Y291cnNlfSlcbiAgICAgICAgLnRoZW4oKCk9PnRoaXMuc2F2ZSgpKVxuICAgICAgICAuY2F0Y2goY2F0Y2hlcik7XG4gICAgfVxuICB9XG5cbiAgaW5hY3RpdmF0ZUFuZFNhdmUoKSB7XG4gICAgY29uc3QgY291cnNlID0gey4uLnRoaXMuc3RhdGUuY291cnNlfTtcbiAgICBpZiAoY291cnNlLmFjdGl2ZSkge1xuICAgICAgY291cnNlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgY291cnNlLmluYWN0aXZhdGVkQnkgPSB7XG4gICAgICAgIG5hbWU6IGVudi5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSxcbiAgICAgICAgdXJsOiBcIm1haWx0bzpcIiArICBlbnYuY3VycmVudFVzZXIubWFpbFxuICAgICAgfTtcbiAgICAgIGNvdXJzZS5pbmFjdGl2YXRlZERhdGUgPSBEYXRlLm5vdygpO1xuICAgICAgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHtjb3Vyc2V9KVxuICAgICAgICAudGhlbigoKT0+dGhpcy5zYXZlKCkpXG4gICAgICAgIC5jYXRjaChjYXRjaGVyKTtcbiAgICB9XG4gIH1cblxuICBvcGVuRGlhbG9nKGRpYWxvZ0NvbnRhaW5lcjogRGlhbG9nQ29udGFpbmVyKSB7XG4gICAgdGhpcy5zZXROb25TYXZlYWJsZURhdGFTdGF0ZSh7ZGlhbG9nQ29udGFpbmVyczogdGhpcy5zdGF0ZS5kaWFsb2dDb250YWluZXJzLmNvbmNhdChkaWFsb2dDb250YWluZXIpfSk7XG4gIH1cblxuICBjbG9zZURpYWxvZygpIHtcbiAgICBjb25zdCB7ZGlhbG9nQ29udGFpbmVyc30gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHtsZW5ndGh9ID0gZGlhbG9nQ29udGFpbmVycztcbiAgICBsZW5ndGggJiYgdGhpcy5zZXROb25TYXZlYWJsZURhdGFTdGF0ZSh7ZGlhbG9nQ29udGFpbmVyczogZGlhbG9nQ29udGFpbmVycy5zbGljZSgwLCBsZW5ndGggLSAxKX0pO1xuICAgIC8vIE5vdyBzeW5jIHRoZSBkaXJlY3QgJ2RpYWxvZ3MnIHByb3BlcnR5IHdpdGggdGhlIG5ldyBzdGF0ZTpcbiAgICB3aGlsZSAodGhpcy5kaWFsb2dzLmxlbmd0aCA+PSBsZW5ndGgpIHRoaXMuZGlhbG9ncy5wb3AoKTtcbiAgfVxuXG4gIHJlZkRpYWxvZyhkaWFsb2c6IERpYWxvZyAmIFJlYWN0LkNvbXBvbmVudCwgaW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuZGlhbG9nc1tpbmRleF0gPSBkaWFsb2c7IC8vIFNldHRpbmcgcGVyIGluZGV4IGluc3RlYWQgb2YgcHVzaCgpLiBXb3JrcyBldmVuIGlmIHRoZSByZWYgYXR0cmlidXRlIGNvdWxkIGJlIGludm9rZWQgbXVsdGlwbGUgdGltZXMuXG4gIH1cblxuICBvbktleURvd24gKGV2OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgaWYgKGV2LndoaWNoID09PSA4MyAmJiAoZXYuY3RybEtleSB8fCBldi5tZXRhS2V5KSkgeyAvLyBDVFJMLVNcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5kaWFsb2dDb250YWluZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5zYXZlRGlhbG9nKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2F2ZSgpO1xuICAgIH0gZWxzZSBpZiAoZXYud2hpY2ggPT09IDI3ICYmIHRoaXMuc3RhdGUuZGlhbG9nQ29udGFpbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLmNsb3NlRGlhbG9nKCk7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gZWxzZSBpZiAoZXYud2hpY2ggPT09IDEzKSB7XG4gICAgICBjb25zdCB0YXJnZXRFbGVtID0gZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgICAgaWYgKHRoaXMuc3RhdGUuZGlhbG9nQ29udGFpbmVycy5sZW5ndGggPiAwICYmXG4gICAgICAgIHRhcmdldEVsZW0udGFnTmFtZSAhPT0gJ1RFWFRBUkVBJyAmJlxuICAgICAgICB0YXJnZXRFbGVtLnRhZ05hbWUgIT09ICdJTlBVVCcgJiZcbiAgICAgICAgdGFyZ2V0RWxlbS50YWdOYW1lICE9PSAnU0VMRUNUJyAmJlxuICAgICAgICB0YXJnZXRFbGVtLnRhZ05hbWUgIT09ICdPUFRJT04nICYmXG4gICAgICAgICF0YXJnZXRFbGVtLmNvbnRlbnRFZGl0YWJsZSlcbiAgICAgIHtcbiAgICAgICAgdGhpcy5zYXZlRGlhbG9nKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYmVmb3JlVW5sb2FkKGV2OiBFdmVudCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCB8fCB0aGlzLnN0YXRlLmhhc1Vuc2F2ZWREYXRhKSB7XG4gICAgICBpZiAoIWVudi5rZWRCYWNrZW5kQ2xpZW50Lmh0dHAuYmVhcmVyUHJvdmlkZXIud2FudHNSZWRpcmVjdCkge1xuICAgICAgICBldi5yZXR1cm5WYWx1ZSA9IENPTkZJUk1fTkFWSUdBVEVfTUVTU0FHRTtcbiAgICAgICAgcmV0dXJuIGV2LnJldHVyblZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQ2xpY2tQcmV2ZW50VW5sb2FkKGV2OiBFdmVudCkge1xuICAgIGlmIChldi50YXJnZXQgJiYgKCcnKyhldi50YXJnZXQgYXMgYW55KS50YWdOYW1lKS50b0xvd2VyQ2FzZSgpID09PSAnYScpIHtcbiAgICAgIGNvbnN0IGE6IEhUTUxBbmNob3JFbGVtZW50ID0gZXYudGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50O1xuICAgICAgaWYgKGEuaHJlZiAmJiBhLmdldEF0dHJpYnV0ZSgnaHJlZicpICE9PSAnIycgJiYgIWEudGFyZ2V0KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCB8fCB0aGlzLnN0YXRlLmhhc1Vuc2F2ZWREYXRhKSB7XG4gICAgICAgICAgaWYgKCFjb25maXJtKENPTkZJUk1fTkFWSUdBVEVfTUVTU0FHRSkpIHtcbiAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzYXZlRGlhbG9nKCkge1xuICAgIGlmICh0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZGlhbG9nID0gdGhpcy5kaWFsb2dzW3RoaXMuc3RhdGUuZGlhbG9nQ29udGFpbmVycy5sZW5ndGgtMV07IC8vIFlFUywgc2hvdWxkIHJlZmVyZW5jZSB0aGlzLmRpYWxvZ3MgYnkgbGVuZ3RoIG9mIGRpYWxvZ0NvbnRhaW5lcnMuIFN0cmFuZ2UgeWVzLCBidXQgbGVhdmUgaXQgc28hXG4gICAgICBkaWFsb2cgJiYgZGlhbG9nLnNhdmUoKTsgXG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGlzQWRtaW4gPSBlbnYuY3VycmVudFVzZXIucm9sZXMuaW5kZXhPZihcIkFETUlOXCIpID49IDA7XG4gICAgY29uc3QgY291cnNlID0gdGhpcy5zdGF0ZS5jb3Vyc2U7XG4gICAgcmV0dXJuICF0aGlzLnN0YXRlLmNvdXJzZSA/IDxkaXYgc3R5bGU9e3tvdXRsaW5lOiAwfX0+XG4gICAgICA8Q291cnNlQmFubmVyXG4gICAgICAgIHRpdGxlPVwiXCJcbiAgICAgICAgYWN0aXZlUGFnZT17dGhpcy5zdGF0ZS52aWV3fVxuICAgICAgICByb3V0ZXM9e3tmZWVkYmFjazogdGhpcy5wcm9wcy5mZWVkYmFja1VybH19XG4gICAgICAvPjxwPjxTcGlubmVyLz5WLmcuIHbDpG50YSBtZWRhbiBrdXJzZW4gbGFkZGFzLi4uPC9wPlxuICAgICAgPC9kaXY+IDpcbiAgICAgIDxkaXYgc3R5bGU9e3tvdXRsaW5lOiAwfX0+XG4gICAgICA8Q291cnNlQmFubmVyXG4gICAgICAgIHRpdGxlPXtjb3Vyc2UubmFtZSArIFwiIC0gXCIgKyBjb3Vyc2UucG9pbnRzICsgXCJwXCJ9XG4gICAgICAgIGFjdGl2ZVBhZ2U9e3RoaXMuc3RhdGUudmlld31cbiAgICAgICAgcm91dGVzPXt7XG4gICAgICAgICAgc3R1ZGVudFBhZ2U6IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5KHRoaXMucHJvcHMudmlld0NvdXJzZVVybCwge2NvdXJzZUlkOiB0aGlzLnByb3BzLmlkfSksXG4gICAgICAgICAgZmVlZGJhY2s6IHRoaXMucHJvcHMuZmVlZGJhY2tVcmxcbiAgICAgICAgfX1cbiAgICAgICAgaG9zdD17dGhpc31cbiAgICAgICAgY291cnNlPXtjb3Vyc2V9XG4gICAgICAgIG9yaWdDb3Vyc2U9e3RoaXMuc3RhdGUub3JpZ0NvdXJzZX1cbiAgICAgICAgYmFja2dyb3VuZEltYWdlPXtjb3Vyc2UuaW1hZ2VzLmZpbHRlcihpbWcgPT4gaW1nLmlkID09PSBjb3Vyc2UuaW1hZ2VJZCkubWFwKGltZz0+aW1nLnVybClbMF19XG4gICAgICAgIGlzVGVtcGxhdGU9e2NvdXJzZS5pc1RlbXBsYXRlfVxuICAgICAgIC8+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXRcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXIgc3YtY29sdW1uLTEyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1zcGFjZXItMjBweHZ0IHN2LXZlcnRpY2FsIHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlY29udGVudCBzdi1sYXlvdXQgc3Ytc3BhY2VyLTIwcHh2dCBzdi1za2lwLXNwYWNlclwiIHJlZj17XG4gICAgICAgICAgICAgIGRpdiA9PiB0aGlzLmNvbnRlbnREaXYgPSBkaXZ9PlxuICAgICAgICAgICAgICA8SW5uZXJFZGl0Q291cnNlXG4gICAgICAgICAgICAgICAgY291cnNlPXt0aGlzLnN0YXRlLmNvdXJzZX1cbiAgICAgICAgICAgICAgICBvcmlnQ291cnNlPXt0aGlzLnN0YXRlLm9yaWdDb3Vyc2V9XG4gICAgICAgICAgICAgICAgaG9zdD17dGhpc30gLz5cbiAgICAgICAgICAgICAgPGJyLz5cbiAgICAgICAgICAgICAge3RoaXMuc3RhdGUuZGlhbG9nQ29udGFpbmVycy5tYXAoKHtDb21wb25lbnQsIHByb3BzfSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IGtleT17aX0+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRhcmtlblwiPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLXBhZ2Utd3JhcFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLXBhZ2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8Q29tcG9uZW50IHJlZj17ZGlhbG9nPT50aGlzLnJlZkRpYWxvZyhkaWFsb2csIGkpfSB7Li4ucHJvcHN9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgPFJlbW92ZUl0ZW0gb25DbGljaz17KCk9PnRoaXMuY2xvc2VEaWFsb2coKX0gLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4vY291cnNlLWJhbm5lclwiO1xuaW1wb3J0IHsgTCwgc2hvd0Vycm9yLCBmbGF0dGVuLCBjb21wYXJlUHJvcCwgc2hvd0luZm8sIG1heExlbmd0aCwgY2FwaXRhbGl6ZUZpcnN0IH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XG5pbXBvcnQgeyBDb3Vyc2UsIFN1YmplY3QgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xuaW1wb3J0IHsgU2Nob29sQ291cnNlcyB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zY2hvb2wtY291cnNlc1wiO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBmZWVkYmFja1VybDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuICBjb3Vyc2VPcHRpb25zOiBDb3Vyc2VPcHRpb25bXTtcbiAgc2VsZWN0ZWRUZW1wbGF0ZUlkOiBzdHJpbmc7XG4gIGNvdXJzZXM6IENvdXJzZU9wdGlvbltdIHwgbnVsbDtcbiAgc2VsZWN0ZWRDb3Vyc2VJZDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgQ291cnNlT3B0aW9uIHtcbiAgaWQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQ3JlYXRlTmV3Q291cnNlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgY291cnNlT3B0aW9uczogbnVsbCxcbiAgICAgIHNlbGVjdGVkVGVtcGxhdGVJZDogXCItLVwiLFxuICAgICAgY291cnNlczogbnVsbCxcbiAgICAgIHNlbGVjdGVkQ291cnNlSWQ6IFwiXCJcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmxvYWQoKS5jYXRjaChzaG93RXJyb3IpO1xuICB9XG5cbiAgYXN5bmMgbG9hZCgpIHtcbiAgICBzaG93SW5mbyhcIkxhZGRhciBrdXJzZXJcIik7XG4gICAgY29uc3Qgc3ViamVjdHMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFN1YmplY3Q+KFwic3ViamVjdHNcIiwge1xuICAgICAgdGFnczogW1wic2Nob29sVHlwZTpneW1uYXNpdW1cIl0sXG4gICAgICBpbmNsdWRlOiBcImNvdXJzZVRlbXBsYXRlc1wiXG4gICAgfSk7XG4gICAgY29uc3QgY291cnNlcyA9IGZsYXR0ZW4oc3ViamVjdHMubWFwKHMgPT4gcy5jb3Vyc2VUZW1wbGF0ZXMpKS5zb3J0KGNvbXBhcmVQcm9wKFwibmFtZVwiKSk7XG4gICAgY29uc3QgY291cnNlT3B0aW9uczogQ291cnNlT3B0aW9uW10gPVxuICAgICAgW3sgaWQ6IFwiLS1cIiwgbmFtZTogXCItLVwiIH1dLmNvbmNhdChjb3Vyc2VzKTtcbiAgICBzaG93SW5mbyhcIlwiKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgY291cnNlT3B0aW9ucyB9KTtcbiAgfVxuXG4gIGFzeW5jIG9uU2VsZWN0Q291cnNlKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBkZXJpdmVkQ291cnNlcyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8Q291cnNlPihcImNvdXJzZXNcIiwgeyBoYXNFZGdlc1RvOiBbaWRdIH0pO1xuICAgIGNvbnN0IGNvdXJzZU9wdGlvbnMgPSBkZXJpdmVkQ291cnNlc1xuICAgICAgLmZpbHRlcihjb3Vyc2UgPT4gY291cnNlLmFjdGl2ZSlcbiAgICAgIC5tYXAoKHsgaWQsIHNjaG9vbCwgZGVzY3JpcHRpb24sIGNyZWF0ZWRCeSwgbW9kaWZpZWRCeSB9KSA9PiB7XG4gICAgICAgIGlmIChkZXNjcmlwdGlvbikgZGVzY3JpcHRpb24gPSBtYXhMZW5ndGgoZGVzY3JpcHRpb24sIDgwKTtcbiAgICAgICAgbGV0IGRlc2NyaXB0aW9uT3JBdXRob3IgPSBkZXNjcmlwdGlvbiB8fFxuICAgICAgICAgIChjcmVhdGVkQnkgPyBgJHtjcmVhdGVkQnkubmFtZX1zIHZlcnNpb25gIDpcbiAgICAgICAgICBtb2RpZmllZEJ5ICYmIGAke21vZGlmaWVkQnkubmFtZX1zIHZlcnNpb25gKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZCxcbiAgICAgICAgICBuYW1lOiBzY2hvb2wgPT09ICdzdGFuZGFyZCcgP1xuICAgICAgICAgICAgZGVzY3JpcHRpb24gPyBgU3RhbmRhcmQgLSAke2Rlc2NyaXB0aW9ufWAgOiBcIlN0YW5kYXJkXCIgOlxuICAgICAgICAgICAgYCR7c2Nob29sfSAtICR7bWF4TGVuZ3RoKGRlc2NyaXB0aW9uT3JBdXRob3IsIDkwKX1gLFxuICAgICAgICAgIHNjaG9vbFxuICAgICAgICB9O1xuICAgICAgfSkuc29ydChjb21wYXJlUHJvcChcIm5hbWVcIikpO1xuICAgIGNvbnN0IGtlZFN0YW5kYXJkT3B0aW9ucyA9IGNvdXJzZU9wdGlvbnMuZmlsdGVyKG9wdGlvbiA9PiBvcHRpb24uc2Nob29sID09PSBcInN0YW5kYXJkXCIpO1xuICAgIGNvbnN0IHRlYWNoZXJNYWRlID0gY291cnNlT3B0aW9ucy5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi5zY2hvb2wgIT09IFwic3RhbmRhcmRcIik7XG4gICAgY29uc3QgY291cnNlcyA9IFtcbiAgICAgIC4uLmtlZFN0YW5kYXJkT3B0aW9ucyxcbiAgICAgIHsgaWQsIG5hbWU6IFwiVG9tXCIgfSxcbiAgICAgIC4uLnRlYWNoZXJNYWRlXTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGNvdXJzZXMsXG4gICAgICBzZWxlY3RlZFRlbXBsYXRlSWQ6IGlkLFxuICAgICAgc2VsZWN0ZWRDb3Vyc2VJZDogY291cnNlc1swXS5pZFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY291cnNlT3B0aW9ucywgc2VsZWN0ZWRUZW1wbGF0ZUlkLCBjb3Vyc2VzLCBzZWxlY3RlZENvdXJzZUlkIH0gPSB0aGlzLnN0YXRlO1xuICAgIHJldHVybiA8ZGl2IHN0eWxlPXt7IG91dGxpbmU6IDAgfX0+XG4gICAgICA8Q291cnNlQmFubmVyXG4gICAgICAgIHRpdGxlPXtMYEt1cnNieWdnYXJlbmB9XG4gICAgICAgIGFjdGl2ZVBhZ2U9XCJjb3Vyc2VCdWlsZGVyXCJcbiAgICAgICAgcm91dGVzPXt7ZmVlZGJhY2s6IHRoaXMucHJvcHMuZmVlZGJhY2tVcmx9fVxuICAgICAgLz5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytcm93IHN2LWxheW91dFwiPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tMTJcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LXNwYWNlci0yMHB4dnQgc3YtdmVydGljYWwgc3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2Vjb250ZW50IHN2LWxheW91dCBzdi1zcGFjZXItMjBweHZ0IHN2LXNraXAtc3BhY2VyXCI+XG5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wic3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyIHN2LWNvbHVtbi03XCJ9PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxuICAgICAgICAgICAgICAgICAgICA8aDI+U2thcGEgbnkga3VyczwvaDI+XG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlbDpGxqIGd5bW5hc2lla3VycyA6PC9wPlxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7IWNvdXJzZU9wdGlvbnMgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxTcGlubmVyIC8+PHNlbGVjdCBkaXNhYmxlZCB2YWx1ZT1cIlwiPjxvcHRpb24+LS08L29wdGlvbj48L3NlbGVjdD48L2Rpdj4gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuc2VsZWN0ZWRUZW1wbGF0ZUlkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLm9uU2VsZWN0Q291cnNlKGV2LnRhcmdldC52YWx1ZSkuY2F0Y2goc2hvd0Vycm9yKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjb3Vyc2VPcHRpb25zLm1hcChjb3Vyc2UgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtjb3Vyc2UuaWR9IHZhbHVlPXtjb3Vyc2UuaWR9Pntjb3Vyc2UubmFtZX08L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD59XG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB7Y291cnNlcyAmJiA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlV0Z8OlIGZyw6VuIHZlcnNpb246IDwvcD5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+fVxuICAgICAgICAgICAgICAgICAgICB7Y291cnNlcyAmJiA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgdmFsdWU9e3NlbGVjdGVkQ291cnNlSWR9IG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRDb3Vyc2VJZDogZXYudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtjb3Vyc2VzLm1hcChjb3Vyc2UgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIGtleT17Y291cnNlLmlkfSB2YWx1ZT17Y291cnNlLmlkfT57Y291cnNlLm5hbWV9PC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+fVxuICAgICAgICAgICAgICAgICAgICA8YnIgLz48YnIgLz5cbiAgICAgICAgICAgICAgICAgICAge2NvdXJzZXMgJiYgc2VsZWN0ZWRDb3Vyc2VJZCAmJiA8TGlua1xuICAgICAgICAgICAgICAgICAgICAgIHRvPXtgL2NvdXJzZXMvY3JlYXRlLWZyb20tdGVtcGxhdGUvJHt0aGlzLnN0YXRlLnNlbGVjdGVkQ291cnNlSWR9YH1cbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlXCJcbiAgICAgICAgICAgICAgICAgICAgPlNrYXBhPC9MaW5rPn1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LWNvbHVtbi01XCI+XG4gICAgICAgICAgICAgICAgICA8U2Nob29sQ291cnNlcyAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIH1cbn0iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuXG5jb25zdCBIRUFSVEJFQVRfSU5URVJWQUwgPSA1ICogNjAgKiAxMDAwOyAvLyA1IG1pbnV0ZXMuXG5jb25zdCBIRUFSVEJFQVRfVVJMID0gXCIvNC40YjRjY2UyYTE2MGU0NDU1OTNmMTYwNDMuaHRtbFwiOyAvLyBDb3VsZCBiZSBhbnkgcHJvdGVjdGVkIHJlc291cmNlLiBCVUdCVUc6IENvbmZpZ3VyYWJsZS5cblxubGV0IGxhc3RBY3Rpdml0eSA9IERhdGUubm93KCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBrZWVwU2Vzc2lvbkFsaXZlKCkge1xuICBzZXRJbnRlcnZhbChvblRpbWVvdXQsIEhFQVJUQkVBVF9JTlRFUlZBTCk7XG4gIHNldFRpbWVvdXQoKCk9PiQoJ2JvZHknKVxuICAgIC5tb3VzZW1vdmUob25Vc2VyQWN0aXZlKVxuICAgIC5rZXlwcmVzcyhvblVzZXJBY3RpdmUpXG4gICAgLnNjcm9sbChvblVzZXJBY3RpdmUpLCAxMDApO1xufVxuXG5mdW5jdGlvbiBvblVzZXJBY3RpdmUoKSB7XG4gIGxhc3RBY3Rpdml0eSA9IERhdGUubm93KCk7XG59XG5cbmZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgY29uc3QgaW5hY3Rpdml0eVRpbWUgPSBEYXRlLm5vdygpIC0gbGFzdEFjdGl2aXR5O1xuICBpZiAoaW5hY3Rpdml0eVRpbWUgPCBIRUFSVEJFQVRfSU5URVJWQUwpIHtcbiAgICBoZWFydGJlYXQoKTtcbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBoZWFydGJlYXQoKSB7XG4gIGNvbnNvbGUubG9nKGBTZW5kaW5nIGhlYXJ0YmVhdCByZXF1ZXN0IHRvICR7SEVBUlRCRUFUX1VSTH1gKTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChIRUFSVEJFQVRfVVJMLCB7XG4gICAgICBjYWNoZTogJ25vLWNhY2hlJyxcbiAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coYFJlc3BvbnNlIGZyb20gJHtIRUFSVEJFQVRfVVJMfTogJHtyZXMuc3RhdHVzfSAke3Jlcy5zdGF0dXNUZXh0fWApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLndhcm4oYFJlcXVlc3QgdG8gJHtIRUFSVEJFQVRfVVJMfSBmYWlsZWQ6ICR7ZXJyfWApO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBMaW5rLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgRXJyb3JTdWNjZXNzRmVlZGJhY2sgfSBmcm9tICcuLi8uLi91dGlscy9lcnJvci1zdWNjZXNzLWZlZWRiYWNrJztcbmltcG9ydCB7IFNjaG9vbHMgfSBmcm9tICcuL3NjaG9vbHMnO1xuaW1wb3J0IHsgTmV3U2Nob29sIH0gZnJvbSAnLi9zY2hvb2xzL25ldy1zY2hvb2wnO1xuaW1wb3J0IGVudiBmcm9tICcuLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xuXG4vLyBWaWV3c1xuaW1wb3J0IHsgU3ViamVjdHMsIFNob3dTdWJqZWN0IH0gZnJvbSAnLi9zdWJqZWN0cyc7XG5pbXBvcnQgeyBFZGl0Q291cnNlIH0gZnJvbSAnLi9jb3Vyc2VzJztcbmltcG9ydCB7IEVkaXRTY2hvb2wgfSBmcm9tIFwiLi9zY2hvb2xzL2VkaXQtc2Nob29sXCI7XG5pbXBvcnQgeyBDb3Vyc2VCYW5uZXIgfSBmcm9tIFwiLi9jb3Vyc2VzL2NvdXJzZS1iYW5uZXJcIjtcbmltcG9ydCB7IENyZWF0ZU5ld0NvdXJzZSB9IGZyb20gXCIuL2NvdXJzZXMvY3JlYXRlLW5ld1wiO1xuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCIuL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcblxuLy8gS2VlcCBTZXNzaW9uIEFsaXZlXG5pbXBvcnQgeyBrZWVwU2Vzc2lvbkFsaXZlIH0gZnJvbSAnLi4vLi4vdXRpbHMva2VlcC1zZXNzaW9uLWFsaXZlJztcbmtlZXBTZXNzaW9uQWxpdmUoKTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgdmlld0NvdXJzZVVybDogc3RyaW5nO1xuICBmZWVkYmFja1VybDogc3RyaW5nO1xufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xufVxuXG5leHBvcnQgY2xhc3MgQ291cnNlQnVpbGRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgaXNBdXRob3JpemVkID0gZW52LmN1cnJlbnRVc2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSBcIkFETUlOXCIgfHwgcm9sZSA9PT0gXCJFTVBMT1lFRVwiKTtcbiAgICBjb25zdCBpc0FkbWluID0gZW52LmN1cnJlbnRVc2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSBcIkFETUlOXCIpO1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImNvdXJzZS1idWlsZGVyXCI+XG4gICAgICA8Um91dGVyPlxuICAgICAgICB7aXNBdXRob3JpemVkID8gPGRpdj5cbiAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIiByZW5kZXI9eyh7IG1hdGNoIH0pID0+IGlzQWRtaW4gP1xuICAgICAgICAgICAgPFNjaG9vbHMgdmlld0NvdXJzZVVybD17dGhpcy5wcm9wcy52aWV3Q291cnNlVXJsfSBmZWVkYmFja1VybD17dGhpcy5wcm9wcy5mZWVkYmFja1VybH0gLz4gOlxuICAgICAgICAgICAgPENyZWF0ZU5ld0NvdXJzZSBmZWVkYmFja1VybD17dGhpcy5wcm9wcy5mZWVkYmFja1VybH0gLz59IC8+XG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvc2Nob29sc1wiIHJlbmRlcj17KHsgbWF0Y2ggfSkgPT5cbiAgICAgICAgICAgIDxTY2hvb2xzXG4gICAgICAgICAgICAgIHZpZXdDb3Vyc2VVcmw9e3RoaXMucHJvcHMudmlld0NvdXJzZVVybH1cbiAgICAgICAgICAgICAgZmVlZGJhY2tVcmw9e3RoaXMucHJvcHMuZmVlZGJhY2tVcmx9IC8+fSAvPlxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3NjaG9vbHMvbmV3L2d5bW5hc2l1bVwiIHJlbmRlcj17KCk9PjxOZXdTY2hvb2wgdHlwZT1cImd5bW5hc2l1bVwiIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9zY2hvb2xzL25ldy9wcmltYXJ5XCIgcmVuZGVyPXsoKT0+PE5ld1NjaG9vbCB0eXBlPVwicHJpbWFyeVwiIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9zY2hvb2xzLzppZC9lZGl0XCIgcmVuZGVyPXsoeyBtYXRjaCB9KSA9PiA8RWRpdFNjaG9vbFxuICAgICAgICAgICAgaWQ9e21hdGNoLnBhcmFtcy5pZH1cbiAgICAgICAgICAgIHRpdGxlPXtMYEVkaXRlcmEgc2tvbGFgfVxuICAgICAgICAgICAgZmVlZGJhY2tVcmw9e3RoaXMucHJvcHMuZmVlZGJhY2tVcmx9IC8+fSAvPlxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3N1YmplY3RzXCIgcmVuZGVyPXsoKT0+PFN1YmplY3RzIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zdWJqZWN0cy86aWRcIiByZW5kZXI9eyh7IG1hdGNoIH0pID0+IDxTaG93U3ViamVjdFxuICAgICAgICAgICAgaWQ9e21hdGNoLnBhcmFtcy5pZH1cbiAgICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9jb3Vyc2VzL25ld1wiIHJlbmRlcj17KCk9PiA8Q3JlYXRlTmV3Q291cnNlXG4gICAgICAgICAgZmVlZGJhY2tVcmw9e3RoaXMucHJvcHMuZmVlZGJhY2tVcmx9IC8+fSAvPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2NvdXJzZXMvY3JlYXRlLWZyb20tdGVtcGxhdGUvOnRlbXBsYXRlSWRcIiByZW5kZXI9eyh7bWF0Y2h9KSA9PiA8RWRpdENvdXJzZVxuICAgICAgICAgICAgdGVtcGxhdGVJZD17bWF0Y2gucGFyYW1zLnRlbXBsYXRlSWR9XG4gICAgICAgICAgICB2aWV3PVwiY291cnNlQnVpbGRlclwiXG4gICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XG4gICAgICAgICAgICBmZWVkYmFja1VybD17dGhpcy5wcm9wcy5mZWVkYmFja1VybH1cbiAgICAgICAgICAvPn0vPlxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2NvdXJzZXMvOmlkL2VkaXRcIiByZW5kZXI9eyh7bWF0Y2h9KSA9PiA8RWRpdENvdXJzZVxuICAgICAgICAgICAgaWQ9e21hdGNoLnBhcmFtcy5pZH1cbiAgICAgICAgICAgIHZpZXc9XCJjb3Vyc2VCdWlsZGVyXCJcbiAgICAgICAgICAgIHZpZXdDb3Vyc2VVcmw9e3RoaXMucHJvcHMudmlld0NvdXJzZVVybH1cbiAgICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfVxuICAgICAgICAgIC8+fSAvPlxuICAgICAgICA8L2Rpdj4gOiA8ZGl2PlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvXCIgcmVuZGVyPXsoKSA9PiA8ZGl2PlxuICAgICAgICAgICAgICA8Q291cnNlQmFubmVyIHRpdGxlPVwiS3Vyc2J5Z2dhcmVuXCIgYWN0aXZlUGFnZT1cImNvdXJzZUJ1aWxkZXJcIiByb3V0ZXM9e3tmZWVkYmFjazogdGhpcy5wcm9wcy5mZWVkYmFja1VybH19IC8+XG4gICAgICAgICAgICAgIDxoMj5CZWjDtnJpZ2hldCBzYWtuYXM8L2gyPlxuICAgICAgICAgICAgICA8cD5EZXR0YSB2ZXJrdHlnIMOkciBlbmRhc3QgdGlsbCBmw7ZyIGFuc3TDpGxsZGEgcMOlIEt1bnNrYXBzc2tvbGFuLjwvcD5cbiAgICAgICAgICAgICAgPGgzPkFudsOkbmRhcmF0dHJpYnV0PC9oMz5cbiAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiIHN0eWxlPXt7Ym9yZGVyOiBcIjFweCBzb2xpZCAjZWVlXCJ9fT5cbiAgICAgICAgICAgICAgICA8dGhlYWQ+XG4gICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgIDx0aD5BdHRyaWJ1dDwvdGg+XG4gICAgICAgICAgICAgICAgICAgIDx0aD5Ww6RyZGU8L3RoPlxuICAgICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICAgIHtPYmplY3Qua2V5cyhlbnYuY3VycmVudFVzZXIpLm1hcChhdHRyID0+IDx0ciBrZXk9e2F0dHJ9PlxuICAgICAgICAgICAgICAgICAgICA8dGQ+e2F0dHJ9PC90ZD5cbiAgICAgICAgICAgICAgICAgICAgPHRkPntlbnYuY3VycmVudFVzZXJbYXR0cl19PC90ZD5cbiAgICAgICAgICAgICAgICAgIDwvdHI+KX1cbiAgICAgICAgICAgICAgICA8L3Rib2R5PjwvdGFibGU+XG4gICAgICAgICAgICA8L2Rpdj59IC8+XG4gICAgICAgICAgPC9kaXY+fVxuICAgICAgPC9Sb3V0ZXI+XG4gICAgICA8RXJyb3JTdWNjZXNzRmVlZGJhY2sgLz5cbiAgICA8L2Rpdj5cbiAgfVxufVxuIiwiLy8gPEluaXRpYWxpemF0aW9uPlxuaW1wb3J0ICcuL3NldC1jdXJyZW50LXVzZXInOyAvLyBFbXVsYXRlIHNlcnZlci1zaWRlIHNjcmlwdCB0byBzZXQgY3VycmVudCB1c2VyXG5pbXBvcnQgJy4uL2dsb2JhbC1zZXR0ZXJzL3NldC1hbGwnOyAvLyBDbGllbnQtc2lkZSBpbml0aWFsaXphdGlvblxuLy8gPC9Jbml0aWFsaXphdGlvbj5cblxuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQ291cnNlQnVpbGRlciB9IGZyb20gJy4uL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXInO1xuaW1wb3J0IHsgQ2hvb3NlVXNlciB9IGZyb20gJy4vdXRpbHMvY2hvb3NlLXVzZXInO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IGFueSkge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBpZiAoIWxvY2F0aW9uLmhhc2gpIGxvY2F0aW9uLmhhc2ggPSBcIiMvXCI7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIGVudi5jdXJyZW50VXNlciA/XG4gICAgICA8Q291cnNlQnVpbGRlclxuICAgICAgICB2aWV3Q291cnNlVXJsPVwiY291cnNldmlld2VyLmh0bWxcIlxuICAgICAgICBmZWVkYmFja1VybD1cImh0dHA6Ly9zdnQuc2UvbnloZXRlclwiIC8+IDpcbiAgICAgIDxDaG9vc2VVc2VyIC8+XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=