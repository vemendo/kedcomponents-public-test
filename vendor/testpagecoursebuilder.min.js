var testpagecoursebuilder=function(e){function t(t){for(var r,s,o=t[0],l=t[1],c=t[2],d=0,m=[];d<o.length;d++)s=o[d],a[s]&&m.push(a[s][0]),a[s]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(u&&u(t);m.length;)m.shift()();return i.push.apply(i,c||[]),n()}function n(){for(var e,t=0;t<i.length;t++){for(var n=i[t],r=!0,o=1;o<n.length;o++){var l=n[o];0!==a[l]&&(r=!1)}r&&(i.splice(t--,1),e=s(s.s=n[0]))}return e}var r={},a={7:0},i=[];function s(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=e,s.c=r,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(n,r,function(t){return e[t]}.bind(null,r));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],l=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var u=l;return i.push([195,0]),n()}([function(e,t){e.exports=React},,function(e,t,n){"use strict";n.d(t,"d",function(){return a}),n.d(t,"f",function(){return s}),n.d(t,"k",function(){return l}),n.d(t,"g",function(){return c}),n.d(t,"h",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"i",function(){return m}),n.d(t,"o",function(){return h}),n.d(t,"n",function(){return p}),n.d(t,"l",function(){return f}),n.d(t,"b",function(){return v}),n.d(t,"c",function(){return g}),n.d(t,"e",function(){return b}),n.d(t,"j",function(){return y}),n.d(t,"m",function(){return k});var r=n(1);function a(e){for(var t=0,n=e.length;t<n;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function i(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(n){e[n]=t[n]}),e)}function s(e,t){var n={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}),t&&i(n,t),n}var o=[].concat;function l(e){return o.apply([],e)}function c(e){return function(t,n){var r=t[e],a=n[e];return r>a?1:r<a?-1:0}}function u(e,t,n){e=Array.isArray(e)?e:[e];var a=function(e,r){return"string"==typeof e?e.localeCompare(r,t,n):e<r?-1:e>r?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=r.f(e),n=t[0],i=t.slice(1);return function(e,t){return function e(t,n,r,i){var s=t[r];if(null==s)return-1;var o=n[r];return null==o?1:0===i.length?a(s,o):e(s,o,i[0],i.slice(1))}(e,t,n,i)}}).reduce(function(e,t){return function(n,r){return e(n,r)||t(n,r)}})}function d(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];e[0];return function(e,t){for(var n=e[0],r=1,a=e.length;r<a;++r)n+=t[r-1]+e[r];return n}(e,t)}function m(e,t){var n;return"string"==typeof t&&(n=/\/Date\((\d*)\)\//.exec(t))?new Date(+n[1]):t}function h(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function p(e){var t="string"==typeof e?e:e.message,n=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(n)}function f(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function v(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r],s=t(i),o=n[s];o?o.push(i):n[s]=[i]}return n}function g(e,t){for(var n={},r=0,a=e.length;r<a;++r){var i=e[r];n[t(i)]=i}return n}function b(e,t){var n,a,i={};try{for(var s=r.h(t),o=s.next();!o.done;o=s.next()){var l=o.value;l in e&&(i[l]=e[l])}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=s.return)&&a.call(s)}finally{if(n)throw n.error}}return i}function y(e,t){var n=g(e,t||function(e){return e});return Object.keys(n).map(function(e){return n[e]})}function k(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0,i=n.length;a<i;++a){var s=n[a];if(r[a]!==s)return!1;if(e[s]!==t[s])return!1}return!0}},function(e,t,n){"use strict";var r=n(35);r.a.env||(r.a.env={}),t.a=r.a.env},,function(e,t,n){"use strict";var r=n(20);n.d(t,"a",function(){return r.a}),n.d(t,"b",function(){return r.b}),n.d(t,"c",function(){return r.c}),n.d(t,"d",function(){return r.d}),n.d(t,"e",function(){return r.e}),n.d(t,"f",function(){return r.f}),n.d(t,"g",function(){return r.g}),n.d(t,"h",function(){return r.h}),n.d(t,"i",function(){return r.i}),n.d(t,"j",function(){return r.j})},,,function(e,t,n){"use strict";var r=n(31);r.a.cfg||(r.a.cfg={}),t.a=r.a.cfg},,function(e,t){e.exports=jQuery},function(e,t,n){"use strict";var r=n(3),a=n(4),i=n(20),s=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=n(21);function l(e,t){return o.a[e].relationships[t]}function c(e,t){var n=function(e){var t=function(e){return!0};return e.from?u(t,function(t){return t.dateTime>=e.from}):e.to?u(t,function(t){return t.dateTime<e.to}):e.ids?u(t,function(t){return e.ids.includes(t.id)}):e.name?u(t,function(t){return t.name===e.name}):e.tags?u(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(n)}function u(e,t){return function(n){return e(n)&&t(n)}}function d(e){return"delete"!==e.op}function m(e){return"clear-branch"===e.op||"merge"===e.op}var h=function(){function e(){}return e.getCacheBust=function(t,n,r,a){return e.getInvolvedItems(t,n,a).map(function(e){return localStorage.getItem("cache-bust-"+r+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,n){for(var r=0,a=e.getCacheInvalidations(t);r<a.length;r++){var i=a[r];localStorage.setItem("cache-bust-"+n+"-"+i,""+Date.now())}},e.getInvolvedItems=function(e,t,n){var r=t.hasEdgesFrom,a=n.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return r&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":t[e.sourceTable]=!0,t["hef-"+l(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),p=n(16);function f(e,t){for(var n=Object.keys(t),r=e,i=0,s=n;i<s.length;i++){var o=s[i];r===e&&(r=a.a({},e));var l=t[o];if(l&&"object"==typeof l){var c=Object.keys(l).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var u=function(e){var t=l[e];switch(e){case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");var a=r[o];a=Array.isArray(a)?a.slice():[],r[o]=a;for(var i=0,s=n;i<s.length;i++){var c=s[i];a.includes(c)||a.push(c)}break;case"$remove":var u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");a=r[o];Array.isArray(a)||(a=[]),r[o]=a.filter(function(e){return!u.includes(e)})}},d=0,m=c;d<m.length;d++){u(m[d])}continue}}r[o]=l}return r}function v(e,t){for(var n=Object.keys(t),r=a.a({},e),i=0,s=n;i<s.length;i++){var o=s[i],l=t[o];if(l&&"object"==typeof l){var c=Object.keys(l).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var u=function(e){var t=l[e];switch(e){case"$add":var n=t;if(!Array.isArray(n))throw new Error("$add instruction must contain array");s=(s=r[o])?a.a({},s):{},r[o]=s;var i=s.$remove;Array.isArray(i)&&(s.$remove=i.filter(function(e){return!n.includes(e)}),0===s.$remove.length&&delete s.$remove),u=(u=s.$add)?u.concat(n):n.slice(),s.$add=u;break;case"$remove":var s,c=t;if(!Array.isArray(c))throw new Error("$remove instruction must contain array");s=(s=r[o])?a.a({},s):{},r[o]=s;var u=s.$remove;Array.isArray(u)&&(s.$add=u.filter(function(e){return!c.includes(e)}),0===s.$add.length&&delete s.$add),i=(i=s.$remove)?i.concat(c):c.slice(),s.$remove=i}},d=0,m=c;d<m.length;d++){u(m[d])}continue}}r[o]=l}return r}var g=function(){function e(e,t,n,r,a){this.table=e,this.query=t,this.user=n,this.repo=r,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var n=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(n)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(n){switch(n.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:n.sent(),n.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,n=this;return a.d(this,function(r){switch(r.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,r.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(r){n._loadPromise===t&&(n.data=r,n.loadedVersion=Math.max(n.loadedVersion,e))}).catch(function(e){n._loadPromise===t&&(n.error=e)}).then(function(){if(n._loadPromise!==t)return n._loadPromise;n._loadPromise=null,n.gotInitialResponse=!0,n.notifySubscribers(n.mutationQueue.get())})];case 3:return r.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var n,r,i,s;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];n=0,r=e,a.label=1;case 1:return n<r.length?"clear-branch"!==(i=r[n]).op||i.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==i.op||i.targetBranchId&&i.branchId!==this.query.branchId&&i.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===i.op&&(i.deltaDoc.tags&&this.query.tags||i.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return n++,[3,1];case 8:s=this.getDataWithMutationsApplied(e,!1,this.data),this.data=s,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var n=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(n,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,n){var r=this;return e.forEach(function(e){n=r.applyMutationsOnData(n,e,t)}),n},e.prototype.applyMutationsOnData=function(e,t,n){if(d(t)&&t.branchId!=this.query.branchId)return e;var r=this.table,i=this.includes,s=this.query,o=s.hasEdgesFrom?[].concat(s.hasEdgesFrom||[]):[],c=s.tags?[].concat(s.tags||[]):[];switch(t.op){case"update":return Object(p.e)(e,function(e){if(e.id===t.id){var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r}return i.forEach(function(r){var i,s=e[r];if(s){var o=Object(p.e)(s,function(e){if(e.id!==t.id)return e;var r=f(e,t.deltaDoc);return n&&(r.$meta="updating"),r});o!==s&&(e=a.a({},e,((i={})[r]=o,i)))}}),e});case"add-related":if(r===t.table&&-1!==i.indexOf(t.graphProp))return Object(p.e)(e,function(e){var r;if(e.id!==t.id)return e;var i=a.a({},t.relatedDoc);return n&&(i.$meta="adding"),a.a({},e,((r={})[t.graphProp]=e[t.graphProp].concat([i]),r))});if(s.hasEdgesFrom&&o.includes(t.id)&&r===l(t.table,t.graphProp)){if(!s.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return s.ids&&s.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return r===t.table&&-1!==i.indexOf(t.graphProp)?Object(p.e)(e,function(e){var r,i=e[t.graphProp];return i?e.id!==t.id?e:a.a({},e,((r={})[t.graphProp]=n?i.map(function(e){return e.id!==t.relatedId?e:a.a({},e,{$meta:"deleting"})}):i.filter(function(e){return e.id!==t.relatedId}),r)):e}):s.hasEdgesFrom&&o.includes(t.id)?n?e.map(function(e){return e.id===t.relatedId?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedId}):e;case"delete":if(r===t.table)return e.filter(function(e){return e.id!==t.id});if(s.include){var u=i.map(function(e){return{label:e,table:l(r,e)}}).filter(function(e){return e.table===t.table});if(u.length>0)return Object(p.e)(e,function(e){return u.forEach(function(r){var i,s=r.label,o=e[s];o&&(e=a.a({},e,((i={})[s]=n?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),i)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),b=function(e){function t(t,n,r){var a=e.call(this,function(e){var t=new s(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=n,a.query=r,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return g.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var n;return this.applyQuery(((n={})[e]=(this.query[e]||[]).concat(t),n))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesFrom",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.hasEdgesTo=function(e,t){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");var n=this.addToQueryArrayProp("hasEdgesTo",e);return t&&t.includeDeltaEdges?n.addFlags("includeDeltaEdges"):n},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:h.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new i.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,n=e||{},r=n.onZero,a=n.onMany;return this.toValue().map(function(e){if(0===e.length){if(!r)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");r()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,n){void 0===n&&(n=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e,deltaDoc:t}],n)},t.prototype.addRelated=function(e,t,n){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:n}],0)},t.prototype.removeRelated=function(e,t,n){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:n}],0)},t.prototype.delete=function(){for(var e=this,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(n(33).a),y=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(n){switch(n.label){case 0:return[4,Promise.all(this.queries.map(function(n){return n.commitMutations(e,t)}))];case 1:return n.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(n){return n.queryKey===g.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,n){var r=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&r.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(r){if(!r.gotInitialResponse)return"continue";if(r.query.branchId!==t.branchId)return"continue";if(r.query.flags)return"continue";var a=r.includes;if(a.length>0&&(!t.include||0===t.include.length)){var i=a.find(function(t){return o.a[r.table].relationships[t]===e});if(i){for(var s={},l=0,u=r.data;l<u.length;l++){var d=u[l];c(t,d[i]).forEach(function(e){return s[e.id]=e})}var m=Object.keys(s).map(function(e){return s[e]});return t.ids.every(function(e){return m.some(function(t){return t.id===e})})?{value:m}:"continue"}}if(!n.every(function(e){return a.includes(e)}))return"continue";if(r.table===e){var h=c(t,r.data);return t.ids.every(function(e){return h.some(function(t){return t.id===e})})?{value:h}:"continue"}},i=0,s=this.queries;i<s.length;i++){var l=a(s[i]);if("object"==typeof l)return l.value}},e.prototype.subscribe=function(e){var t=e.collection,n=t.table,r=t.query,a=t.repo,i=this.findQuery(n,r);i?i.timeoutHandle&&(clearTimeout(i.timeoutHandle),i.timeoutHandle=null):(i=new g(n,r,a.getUser(),a,this.mutationQueue),this.queries.push(i)),i.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,n=e.collection,r=n.table,a=n.query,i=(n.repo,this.findQuery(r,a));i&&(i.unsubscribe(e),0===i.subscriptions.length&&(i.timeoutHandle=setTimeout(function(){0===i.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==i}))},this.queries.length>50?500:3e5)))},e}(),k=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,n){var r=this.get();return!!r.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?r.some(function(e){return m(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):r.some(function(r){return"delete"===r.op?r.table===e||n.some(function(t){return l(e,t)===r.table}):!!m(r)||r.branchId==t.branchId&&(r.table===e||"update"!==r.op&&[e].concat(n.map(function(t){return l(e,t)})).some(function(e){return l(r.table,r.graphProp)===e}))}))},e.merge=function(e,t){for(var n=e.slice(),r=t.slice(),i=e.length,s=function(t){var i=e[t];if("update"===i.op){var s=r.findIndex(function(e){return"update"===e.op&&e.branchId===i.branchId&&e.id===i.id});s>=0&&(n[t]=a.a({},i,{deltaDoc:v(i.deltaDoc,r[s].deltaDoc)}),r.splice(s,1))}},o=0;o<i;++o)s(o);return n.concat(r)},e}(),E=n(53),w=function(){function e(e,t,n,r){this.mutationQueue=e,this.querySet=t,this.getClient=n,this.getUser=r,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.a(0),this.errorSubscribers=[],this.stateSubscribers=[]}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var n=this;this.errorSubscribers.forEach(function(r){try{r(e,t,n)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,n,r,i,s;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),n=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(n)];case 2:return r=a.sent(),i=Object.keys(r.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:r.newEtags[e]}}}),h.invalidateCache(n,this.getUser()),this.persistedVersion.dispatch(t),[4,this.querySet.commitMutations(k.merge(e,i),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return s=a.sent(),this.persistedVersion.dispatchError(s),s&&s.name&&s.name.startsWith("http4")?(this.dispatchError(s,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(s,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new i.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),C=function(){function e(e,t,n,r,a,i,s){var l=this;this.getClient=e,this.getUser=t,this.defaultQueryOptions=n,this.mutationQueue=r,this.querySet=a,this.writer=i,this.cacheOptimized=s,r||(this.mutationQueue=new k),a||(this.querySet=new y(this.mutationQueue)),i||(this.writer=new w(this.mutationQueue,this.querySet,e,t)),Object.keys(o.a).forEach(function(e){var t=new b(l,e,n||{});s&&(t=t.cacheOptimized()),l[e]=t})}return e.prototype._clone=function(t,n){return new e(this.getClient,this.getUser,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===n?this.cacheOptimized:n)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var S=n(5),O=n(8);n.d(t,"c",function(){return T}),n.d(t,"d",function(){return x}),n.d(t,"b",function(){return I}),n.d(t,"a",function(){return N});var T=new C(function(){return r.a.kedBackendClient},function(){return r.a.currentUser?r.a.currentUser.mail:""}),x=Object(S.i)(O.a.KED_REALM),I={standardSchool:T.schools.name("standard").cacheOptimized().single(),get mySchool(){return T.schools.name(r.a.currentUser.school).cacheOptimized().single()}},N={getBranchId:function(e,t){return e.switchMap(function(e){return T.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return T.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return T.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(n){var r=Object(S.h)();n.add("branches",{id:r,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),n.link2("branches",e.officialBranchId,"approvedChildren",r)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return T.courseBlocks.tags(e).idsOnly().concat(T.courseContents.tags(e).idsOnly()).concat(T.courseTabs.tags(e).idsOnly()).concat(T.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},function(e,t,n){"use strict";t.a=function(e,t){void 0===t&&(t=null),document.execCommand(e,!1,t)}},,function(e,t,n){"use strict";var r=n(1),a=n(5);var i=n(17);n.d(t,"a",function(){return s}),n.d(t,"c",function(){return l}),n.d(t,"e",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"b",function(){return m}),n.d(t,"f",function(){return h});var s=["user","role","school","debug","testVersion","testversion","schoolType","schooltype"];function o(e,t,n){var r=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==n&&e.tutorFor&&(r=r.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),r,n)}function l(e,t){return o(e,t,"W")}function c(e,t){var n=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),r=(t||"").toLowerCase()===e.school.toLowerCase();return n&&r}function u(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,n=e.school,a=e.url,s=Object(i.b)(location.search),o=r.a({},s,{role:t,school:n}),l=Object(i.a)(o);a?location.href=""+a+l:(location.hash="#",location.search=l)}};function m(e){d.actAs(e)}function h(e,t){var n,a,o=Object(i.b)(location.search),l={};try{for(var c=r.h(s),u=c.next();!u.done;u=c.next()){var d=u.value;o[d]&&(l[d]=o[d])}}catch(e){n={error:e}}finally{try{u&&!u.done&&(a=c.return)&&a.call(c)}finally{if(n)throw n.error}}var m=Object(i.a)(r.a({},l,t)),h=e.indexOf("#");return h>=0?""+e.substr(0,h)+m+e.substr(h):""+e+m}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(0),a=function(){return r.createElement("span",null,r.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ")}},function(e,t,n){"use strict";n.d(t,"c",function(){return a}),n.d(t,"a",function(){return i}),n.d(t,"d",function(){return s}),n.d(t,"b",function(){return o}),n.d(t,"e",function(){return l});var r=n(4);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var n=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?n:7&n|8).toString(16)})}function i(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function s(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var n=0;n<e.length;++n){var r=e.charCodeAt(n).toString(16);t[n]=2===r.length?r:"0"+r}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return r.b(this,void 0,void 0,function(){var t,n,a,i,s;return r.d(this,function(r){switch(r.label){case 0:return t=new TextEncoder,n=t.encode(e),i=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",n)];case 1:return a=new(i.apply(Uint8Array,[void 0,r.sent()])),s=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[s++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function l(e,t){for(var n=e,r=0,a=e.length;r<a;++r){var i=e[r],s=t(i);s!==i&&(n===e&&(n=e.slice()),n[r]=s)}return n}},function(e,t,n){"use strict";n.d(t,"b",function(){return a}),n.d(t,"a",function(){return s}),n.d(t,"c",function(){return o});var r=n(1);function a(e,t){var n=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=r.f(e,2),i=t[0],s=t[1];return a[n?i.toLowerCase():i]=s}),a}function i(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function s(e){return"?"+i(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},function(e,t,n){"use strict";n.d(t,"k",function(){return m}),n.d(t,"c",function(){return h}),n.d(t,"g",function(){return p}),n.d(t,"h",function(){return f}),n.d(t,"m",function(){return v}),n.d(t,"j",function(){return g}),n.d(t,"l",function(){return b}),n.d(t,"b",function(){return y}),n.d(t,"f",function(){return E}),n.d(t,"a",function(){return w}),n.d(t,"i",function(){return C}),n.d(t,"e",function(){return S}),n.d(t,"d",function(){return O});var r=n(1),a=n(6),i=n.n(a),s=n(5),o=n(44),l=n.n(o),c=n(10),u=n.n(c),d=n(3);function m(e,t,n,a,i){var o,c,u={},d=t.id,m=function(o){var l,c,m,h,p,f,v=a[o],g=e[o]||[],b=t[o];if(!b)return"continue";var y=b.map(function(e,t){return{doc:e,idx:t}}),k=y.filter(function(e){return!g.some(function(t){return t.id===e.doc.id})});try{for(var E=r.h(k),w=E.next();!w.done;w=E.next()){var C=w.value,S=(D=r.a({},C.doc)).$meta;delete D.$meta,"add"===S?(D.id||(D.id=Object(s.h)()),i.add(v,D)):"update"===S&&i.put(v,D),i.link(n,d,v,D.id,o),u[o]||(u[o]={}),u[o][C.idx]={$set:D}}}catch(e){l={error:e}}finally{try{w&&!w.done&&(c=E.return)&&c.call(E)}finally{if(l)throw l.error}}var O=g.filter(function(e){return!b.some(function(t){return t.id===e.id})});try{for(var T=r.h(O),x=T.next();!x.done;x=T.next()){var I=x.value;i.unlink(n,d,v,I.id,o)}}catch(e){m={error:e}}finally{try{x&&!x.done&&(h=T.return)&&h.call(T)}finally{if(m)throw m.error}}var N=y.filter(function(e){return g.some(function(t){return t.id===e.doc.id&&"update"===e.doc.$meta})});try{for(var j=r.h(N),R=j.next();!R.done;R=j.next()){var D,U=R.value;delete(D=r.a({},U.doc)).$meta,i.put(v,D),u[o]||(u[o]={}),u[o][U.idx]={$set:D}}}catch(e){p={error:e}}finally{try{R&&!R.done&&(f=j.return)&&f.call(j)}finally{if(p)throw p.error}}};try{for(var h=r.h(Object.keys(a)),p=h.next();!p.done;p=h.next()){m(p.value)}}catch(e){o={error:e}}finally{try{p&&!p.done&&(c=h.return)&&c.call(h)}finally{if(o)throw o.error}}return l()(t,u)}function h(e){return i()(e).format("YYMMDD HH:mm")}function p(e){return i()(e).format("YYMMDD")}function f(e){if(!e)return"";var t=e.split(" ").filter(function(e){return!!e}),n=t.pop();return t.map(function(e){return e[0]+"."}).concat(n).join(" ")}function v(e,t,n){return l()(t,{dateTime:{$set:e},modifiedDate:{$set:e},modifiedBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function g(e,t,n){return l()(t,{createdDate:{$set:Date.now()},createdBy:{$set:{name:n.displayName,url:"mailto:"+n.mail}}})}function b(e,t){var n=Date.now();return(e=v(n,e,t)).createdBy||(e=g(0,e,t)),e}function y(e,t,n){var a,i,s=r.a({},e),o=t[e.id];o&&(s.$etag=o);try{for(var l=r.h(n),c=l.next();!c.done;c=l.next()){var u=c.value,d=e[u].map(function(e){return y(e,t,[])});s[u]=d}}catch(e){a={error:e}}finally{try{c&&!c.done&&(i=l.return)&&i.call(l)}finally{if(a)throw a.error}}return s}function k(e,t){return new Promise(function(e,n){var r=new FileReader;r.onload=function(t){return e(t.target.result)},r.onabort=function(e){return n(new Error("file read aborted"))},r.onerror=function(e){return n(e.target.error)},t(r)})}function E(e){return k(0,function(t){return t.readAsText(e)})}function w(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"}function C(e){var t=u()("div.course-builder")[0];t&&(t.className="course-builder"+(e?" status "+e:""))}function S(e,t){return r.b(this,void 0,void 0,function(){var n,a,i,s,o,l,c;return r.d(this,function(u){switch(u.label){case 0:return n=d.a.kedBackendClient,a=t&&t.includeTemplateChain,i=!t||!t.include||-1!==t.include.indexOf("tasks"),[4,Promise.all([n.get("courses",e,{include:t&&t.include?t.include.filter(function(e){return"tasks"!==e}):["centralContent","knowledgeRequirements","abilities","images","acl"]}),i&&n.list("tasks",{hasEdgesFrom:e,include:["knowledgeRequirements","centralContent","abilities","acl"],flags:["includeIdsOnly"]}),a&&n.list("courses",{hasEdgesFrom:e,flags:["idsOnly"]})])];case 1:return s=r.f.apply(void 0,[u.sent(),3]),o=s[0],l=s[1],c=s[2],o.tasks=l,o.abilities&&o.abilitiesOrder&&(o.abilities=o.abilitiesOrder.map(function(e){return o.abilities.find(function(t){return t.id===e})})),o.knowledgeRequirements&&o.knowledgeRequirementsOrder&&(o.knowledgeRequirements=o.knowledgeRequirementsOrder.map(function(e){return o.knowledgeRequirements.find(function(t){return t.id===e})})),o.centralContent&&o.centralContentOrder&&(o.centralContent=o.centralContentOrder.map(function(e){return o.centralContent.find(function(t){return t.id===e})})),a&&(o.templateChain=c),[2,o]}})})}function O(e){return e.migratedTexts&&Object.keys(e.migratedTexts).some(function(t){return Object.keys(e.migratedTexts[t]).length>0})}},function(e,t,n){"use strict";var r=n(4),a=n(20),i=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),s=n(16);function o(e){e.resources||(e.resources=[])}function l(e,t,n){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,n);break;case"tasks":o(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var u=JSON.parse(c),d=u.time,m=u.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=m)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,n=e.list;e.get=function(e,n,r){var a=r&&r.include;return t.apply(this,arguments).then(function(t){return l(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var r=t&&t.include;return n.apply(this,arguments).then(function(t){return t.forEach(function(t){return l(t,e,r&&r.toString().split(","))}),t})}}}(a.d.prototype);var h=new i,p=Date.now(),f=function(){function e(e,t,n){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=n,this.tokenInfo={token:null,expires:0},this.getBearer=Object(s.a)(this.getBearer.bind(this)),this.refreshBearer=Object(s.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,h.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,i,s;return r.d(this,function(r){switch(r.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=r.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-p>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,n="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,n+r.sent()]));case 3:return i=this,s=this.tokenResponseMapper,[4,e.text()];case 4:return i.tokenInfo=s.apply(this,[r.sent()]),h.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),v={fetch:fetch.bind(self),btoa:btoa.bind(self)},g=function(e){function t(t,n,r){var a="string"!=typeof n?n:new f(n,r&&r.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},r&&r.tokenId);return e.call(this,v,a,t)||this}return r.c(t,e),t}(a.d);n.d(t,"d",function(){return h}),n.d(t,"b",function(){return f}),n.d(t,"c",function(){return v}),n.d(t,"a",function(){return g})},function(e,t,n){"use strict";var r=n(4),a=n(16),i=n(28),s=function(){function e(e,t,n){this.isomorphic=e,this.baseUrl=t,this.options=n,this.numOutstandingOperations=0,this._status=new i.a(this),this.fetchOptions={mode:"cors"},this.authHeader=n.bearer?"Bearer "+n.bearer:n.username?"Basic "+e.btoa(n.username+":"+(n.password||"")):null,this.bearerProvider=n.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.fetch=function(e,t,n,r,a){var i=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,n,r,a).then(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),e}).catch(function(e){return--i.numOutstandingOperations,i._status.dispatch(i),Promise.reject(e)})},e.prototype._fetch=function(e,t,n,i,s){return r.b(this,void 0,void 0,function(){var o,l,c,u,d,m,h,p,f,v,g;return r.d(this,function(b){switch(b.label){case 0:return s&&"no-cache"===s.cache&&(i=r.a({},i,{nocache:Object(a.c)()})),o=i&&Object.keys(i).filter(function(e){return void 0!==i[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(i[e])}).join("&"),c=(l=this).authHeader,u=l.tokenInfo,d=l.bearerProvider,c||u||!d?[3,2]:(m=this,[4,d.getBearer()]);case 1:m.tokenInfo=u=b.sent(),b.label=2;case 2:return u?u.expires<Date.now()?(console.log("Token expired. Refresh it:"),h=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:h.tokenInfo=u=b.sent(),b.label=4;case 4:c="Bearer "+u.token,b.label=5;case 5:return c&&(n.Authorization=c),p=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},s))];case 6:return 401==(f=b.sent()).status&&this.bearerProvider?(v=f.headers.get("www-authenticate"),console.log("Got "+f.status+" from "+(this.baseUrl+e)),v&&/Bearer/i.test(v)?(g=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return g.tokenInfo=b.sent(),n.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(p,r.a({},this.fetchOptions,{headers:n,method:t},s))];case 8:f=b.sent(),b.label=9;case 9:return[2,f]}})})},e.prototype.get=function(e,t,n){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,n)},e.prototype.post=function(e,t,n){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,r.a({},n,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,n,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,r.a({},a,{body:n}))},e}(),o=function(){function e(e,t,n,r,i,o,l){this.isomorphic=e,this.storage=t,this.tokenId=n,this.clientId=r,this.clientSecret=i,this.tokenUrl=o,this.tokenQuery=l,this.tokenInfo={token:null,expires:0},this.client=new s(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:if(e=this.tokenInfo,t=e.token,n=e.expires,t&&n>=Date.now())return[2,this.tokenInfo];r.label=1;case 1:return r.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=r.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return r.sent(),[2,this.tokenInfo];case 4:return r.sent(),[4,this.refreshBearer()];case 5:return r.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:t=0,r.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=r.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(n=this,a={},[4,e.text()]);case 3:return n.tokenInfo=(a.token=r.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),l=function(){function e(e,t,n){this.accessClaimType=e,this.accessClaimValue=t,this.right=n}return e.fromString=function(t){if(!t)return null;var n=t.split(":");if(n.length<3)throw new Error("Invalid access string: "+t);var r=e.unescape(n[0]),a=e.unescape(n[1]),i=n[2];if("R"!==i&&"W"!==i&&"S"!==i)throw new Error("Invalid access string: "+t);return new e(r,a,i)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,n){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===n||"W"===e.right&&["R","W"].indexOf(n)>=0||"S"===e.right)})})}var u=function(e){function t(t,n){var r=e.call(this,"HTTP"+t+" "+n)||this;return r.code=t,r.message=n,r.name="http"+t,r.message="HTTP"+t+" "+n,r}return r.c(t,e),t}(Error);n.d(t,"d",function(){return d}),n.d(t,"a",function(){return m}),n.d(t,"h",function(){return a.c}),n.d(t,"i",function(){return a.d}),n.d(t,"g",function(){return a.b}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return l}),n.d(t,"j",function(){return c}),n.d(t,"f",function(){return s}),n.d(t,"c",function(){return u});var d=function(){function e(e,t,n){this.http=new s(e,n,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.get=function(e,t,n,a){return r.b(this,void 0,void 0,function(){var i,s,o;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.get(e+"/"+t,n,a)];case 1:return 200==(i=r.sent()).status?[3,3]:(s=u.bind,o=[void 0,i.status],[4,i.text()]);case 2:throw new(s.apply(u,o.concat([r.sent()])));case 3:return[4,i.json()];case 4:return[2,r.sent()]}})})},e.prototype.list=function(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,s,o;return r.d(this,function(l){switch(l.label){case 0:return a=r.a({},t),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,n)];case 1:return 200==(i=l.sent()).status?[3,3]:(s=u.bind,o=[void 0,i.status],[4,i.text()]);case 2:throw new(s.apply(u,o.concat([l.sent()])));case 3:return[4,i.json()];case 4:return[2,l.sent()]}})})},e.prototype.batch=function(e,t){return r.b(this,void 0,void 0,function(){var n,a,i;return r.d(this,function(r){switch(r.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(n=r.sent()).status?[3,3]:(a=u.bind,i=[void 0,n.status],[4,n.text()]);case 2:throw new(a.apply(u,i.concat([r.sent()])));case 3:return[4,n.json()];case 4:return[2,r.sent()]}})})},e.prototype.do=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t=new m,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,n.sent()]}})})},e.prototype.deleteRealm=function(e){return r.b(this,void 0,void 0,function(){var t,n,a;return r.d(this,function(r){switch(r.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=r.sent()).status?[3,3]:(n=u.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(n.apply(u,a.concat([r.sent()])));case 3:return[4,t.json()];case 4:return[2,r.sent()]}})})},e.prototype.add=function(e,t,n){return this.do(function(n){return n.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(n){return n.put(e,t)})},e.prototype.update=function(e,t,n,r){return this.do(function(a){return a.update(e,t,n,r)})},e.prototype.merge=function(e,t){return this.do(function(n){return n.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(n){return n.delete(e,t)})},e.prototype.share=function(e,t,n){return this.do(function(r){return r.share(e,t,n)})},e.prototype.unshare=function(e,t,n){return this.do(function(r){return r.unshare(e,t,n)})},e.prototype.link=function(e,t,n,r,a){return this.do(function(i){return i.link(e,t,n,r,a)})},e.prototype.link2=function(e,t,n,r,a){return this.do(function(i){return i.link2(e,t,r,n,a)})},e.prototype.unlink=function(e,t,n,r,a){return this.do(function(i){return i.unlink(e,t,n,r,a)})},e.prototype.unlink2=function(e,t,n,r,a){return this.do(function(i){return i.unlink2(e,t,r,n,a)})},e}(),m=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,n){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:n}),this},e.prototype.put=function(e,t){return delete(t=r.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,n,a){n=r.a({},n),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:n,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,n){return this.mutationRequests.push({op:"share",table:e,id:t,acl:n}),this},e.prototype.unshare=function(e,t,n){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:n}),this},e.prototype.link=function(e,t,n,r,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.link2=function(e,t,n,r,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a})},e.prototype.unlink=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:n,targetId:r,label:a}),this},e.prototype.unlink2=function(e,t,n,r,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:r,label:n,branchId:a}),this},e}()},function(e){e.exports={a:{branches:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{USER:{email:["*"],schoolRole:["*"],role:["*"]}},relationships:{parents:"branches",approvedChildren:"branches"}},global:{accessClaimTypes:["role","schoolRole"],relationships:{courseInstances:"courseInstances"}},courseInstances:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",blocks:"courseBlocks",tabs:"courseTabs"}},courseBlocks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],autoDelete:!0,relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",tabs:"courseTabs",tasks:"tasks"}},courseTabs:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],autoDelete:!0,relationships:{abilities:"abilities",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",contents:"courseContents"}},courseContents:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{USER:{schoolRole:["*"],role:["*"]}},defaultAcl:["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],autoDelete:!0,relationships:{tasks:"tasks"}},weekplans:{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},"weekplans-ks":{accessClaimTypes:["email","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"]},usertasks:{accessClaimTypes:["email","schoolRole","tutorFor"],sharingAccessPerRole:{USER:{email:["{email}:*","{tutorFor}:*"],schoolRole:["{school}/EMPLOYEE:*"],tutorFor:["{tutorFor}:*"]}},defaultAcl:["email:{email}:S"],relationships:{task:"tasks",course:"courses"}},userhiddencourses:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},usercalendarvisibility:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}},subjects:{relationships:{courseTemplates:"courses",abilities:"abilities"}},schools:{accessClaimTypes:["role","schoolRole"],relationships:{courses:"courses",activeCourses:"courses"}},courses:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:*"],relationships:{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"}},tasks:{accessClaimTypes:["role","schoolRole"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]}},defaultAcl:["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],relationships:{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"}},images:{accessClaimTypes:["role","schoolRole","email"],sharingAccessPerRole:{EMPLOYEE:{schoolRole:["{school}/EMPLOYEE:*"],role:["USER:R"]},USER:{email:["{email}:*"]}}},"central-content":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},"knowledge-requirements":{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},abilities:{accessClaimTypes:["role"],defaultAcl:["role:USER:R"]},notes:{accessClaimTypes:["email"],sharingAccessPerRole:{USER:{email:["{email}:*"]}},defaultAcl:["email:{email}:S"],relationships:{}}}}},,function(e,t,n){"use strict";n.d(t,"b",function(){return s}),n.d(t,"d",function(){return o}),n.d(t,"c",function(){return l}),n.d(t,"a",function(){return c});var r=n(1),a=n(6),i=n.n(a);function s(e){return"AT"===e?[32,51]:[1,25]}function o(e){return e.month()>=6?[i()(new Date(e.year(),7,1)),i()(new Date(e.year(),11,31))]:[i()(new Date(e.year(),0,1)),i()(new Date(e.year(),6,31))]}function l(e){var t=e.year(),n=e.month()>=6,a=r.f(n?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:n?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(1),a=n(0),i=function(e){function t(t){var n=e.call(this,t)||this;return n.state={headerOpen:t.headerOpen||!1},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.className,i=t.children,s=t.headerClassName,o=t.contentClassName,l=this.state.headerOpen;return a.createElement("div",{className:(r||"")+" openClose"+(l?" open":"")},a.createElement("div",{className:"openHeader"+(s?" "+s:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},n),a.createElement("div",{className:"openContent"+(o?" "+o:"")},i))},t}(a.Component)},,,,function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(4),a=function(e){function t(t){var n=e.call(this,function(e){var t={unsubscribe:function(){return n.subscribers=n.subscribers.filter(function(t){return t[0]!==e})}};return n.subscribers.push([e,t]),n.error?e(null,n.error,t):e(n.value,void 0,t),t})||this;return n.subscribers=[],n.value=t,n}return r.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var n=t[0],r=t[1];try{n(e.value,e.error,r)}catch(e){n(null,e,r)}})},t}(n(29).a)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(4),a=n(30),i=n(39),s=n(33),o=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.load=function(){var e=this;return new Promise(function(t,n){e.subscribe(function(e,r,a){r?n(r):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var n=this;return new t(function(t){return n.subscribe(function(n,r,a){r?t(null,r,a):e(n)&&t(n,r,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new s.a(function(n){return t.map(e).subscribe(n)})},t.prototype.combineLatest=function(e){var n=this;return new t(function(t){var r,a,i=[null,null],s={unsubscribe:function(){r.unsubscribe(),a.unsubscribe()}};return r=n.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,s)),i[0]=e,null!==i[1]&&t(i,null,s)}),a=e.subscribe(function(e,n,r){n&&(r.unsubscribe(),t(null,n,s)),i[1]=e,null!==i[0]&&t(i,null,s)}),s})},t.prototype.switchMap=function(e){var n=this;return new t(function(t){var r=null,a=null,i={unsubscribe:function(){a.unsubscribe(),r&&(r.unsubscribe(),r=null)}};return a=n.subscribe(function(n,s,o){if(a=o,r&&(r.unsubscribe(),r=null),s)t(null,s,i);else try{var l=e(n);l&&"function"==typeof l.subscribe?r=l.subscribe(function(e,n,a){r=a,t(e,n,i)}):t(l,null,a)}catch(s){t(null,s,a)}}),i})},t}(a.a);o.prototype.map=Object(i.a)(o)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,n,r){try{e(t,n,r)}catch(t){e(null,t,r)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},,function(e,t,n){"use strict";n.d(t,"a",function(){return l});var r=n(4),a=n(30),i=n(39),s=n(29),o=n(28),l=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var n=new o.a(e);return new t(function(e){return n.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],n=e[1];return t.concat(n)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,n){var r=t&&t[e],a=n&&n[e];return r>a?1:r<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new s.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var n={};return t.forEach(function(t){(n[t[e]]||(n[t[e]]=[])).push(t)}),n})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);l.prototype._map=Object(i.a)(l)},,function(e,t,n){"use strict";var r="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=r),t.a=r},function(e,t,n){"use strict";n.d(t,"b",function(){return l}),n.d(t,"a",function(){return c});var r,a=n(1),i=n(5),s=n(45),o=n(2),l=function(){function e(e,t,n,r){this.http=new i.f(e,t,{bearerProvider:n}),this.userEmailGetter=r,this.getActiveCourses=u(this.getActiveCourses),this.getLatestAssessments=u(this.getLatestAssessments),this.getStudentGoals=u(this.getStudentGoals),this.getStudentFutureAbilities=u(this.getStudentFutureAbilities),this.getTeacherTutorStudents=u(this.getTeacherTutorStudents)}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return a.b(this,void 0,void 0,function(){var t,n,s,l,c;return a.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(n=u.sent()).status?[3,3]:(s=i.c.bind,l=[void 0,n.status],[4,n.text()]);case 2:throw new(s.apply(i.c,l.concat([u.sent()])));case 3:return[4,n.json()];case 4:return[2,u.sent().courses];case 5:throw c=u.sent(),console.error("Error from EDS: "+c),new Error(Object(o.a)(r||(r=a.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return a.b(this,void 0,void 0,function(){var t,n,r,s;return a.d(this,function(a){switch(a.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(n=a.sent()).status?[3,3]:(r=i.c.bind,s=[void 0,n.status],[4,n.text()]);case 2:throw new(r.apply(i.c,s.concat([a.sent()])));case 3:return[4,n.json()];case 4:return[2,a.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=i.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=i.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return a.b(this,void 0,void 0,function(){var e,t,n;return a.d(this,function(r){switch(r.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=r.sent()).status?[3,3]:(t=i.c.bind,n=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(i.c,n.concat([r.sent()])));case 3:return[4,e.json()];case 4:return[2,r.sent().students]}})})},e}(),c=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new s.a(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new s.a({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}();function u(e){var t={};return function(){var n=JSON.stringify([].slice.call(arguments));return t[n]||(t[n]=e.apply(this,arguments).then(function(e){return delete t[n],e})),t[n]}}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),i=n(0),s=n(2),o=function(e){var t=e.onClick,n=e.className,o=e.style,l=e.title;return i.createElement("div",{title:l||Object(s.a)(r||(r=a.e(["Radera"],["Radera"]))),className:"removeItem "+(n||""),onClick:t,style:o})}},,function(e,t,n){"use strict";function r(e){return function(t){var n=this;return new e(function(e){return n.subscribe(function(n,r,a){if(r)e(null,r,a);else try{e(t(n),r,a)}catch(t){e(null,t,a)}})})}}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";n.d(t,"b",function(){return m}),n.d(t,"a",function(){return k});var r=n(1),a=n(0),i=n(13),s=n(18),o=n(2),l=n(5),c=n(3),u=[{name:"schools",text:Object(o.a)(h||(h=r.e(["Skolor"],["Skolor"]))),route:"/schools"},{name:"subjects",text:Object(o.a)(p||(p=r.e(["Ämnen"],["Ämnen"]))),route:"/subjects"}],d=[{name:"courseBuilder",text:Object(o.a)(f||(f=r.e(["Kursbyggaren"],["Kursbyggaren"]))),route:"/courses/new"},{name:"studentPage",text:Object(o.a)(v||(v=r.e(["Elevsida"],["Elevsida"]))),route:""},{name:"feedback",text:a.createElement("span",null,a.createElement("i",{className:"fa fa-commenting-o","aria-hidden":"true"})," Feedback"),route:"https://kg.kunskapsporten.se/kursbyggaren/"}];function m(e,t,n,r){var a=Object(l.h)();n.update({imageId:{$set:a},images:{$set:[{id:a,url:r,acl:["role:USER:R","schoolRole:"+c.a.currentUser.school+"/EMPLOYEE:S"],$meta:"add"}]}})}var h,p,f,v,g,b,y,k=function(e){var t=e.title,n=(e.isTemplate,e.host),l=e.course,h=(e.origCourse,e.backgroundImage),p=e.activePage,f=c.a.currentUser.roles.some(function(e){return"ADMIN"===e}),v=d;return f&&(v=u.concat(v)),a.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},a.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},a.createElement("div",{className:"sv-script-portlet sv-portlet sv-skip-spacer"},h&&a.createElement("style",null,"\n        .pageHeader {\n          background-image: url('"+h+"') !important;\n        }\n      "),a.createElement("div",{className:"pageHeader",onDragOver:l&&s.a,onDrop:l&&function(e){return function(e,t,n,a){return r.b(this,void 0,void 0,function(){var n,a,i,s,l,u,d,h;return r.d(this,function(p){switch(p.label){case 0:return e.stopPropagation(),e.preventDefault(),n=e.dataTransfer.files,a=null,i=Array.from(e.dataTransfer.items),n.length>0?(s=n[0]).size>2097152?(Object(o.n)(Object(o.a)(g||(g=r.e(["Kan inte ladda upp bilder större än 2 MB"],["Kan inte ladda upp bilder större än 2 MB"])))),[2]):((l=new FormData).append("files",s),[4,c.a.kedBackendClient.http.fetch("web-upload","put",{},{},{body:l})]):[3,3];case 1:return 200!==(u=p.sent()).status?(Object(o.n)(Object(o.a)(b||(b=r.e(["Kunde inte ladda upp filen till Google Storage"],["Kunde inte ladda upp filen till Google Storage"])))),[2]):[4,u.text()];case 2:return a=p.sent(),[3,7];case 3:d=function(e){var t;return r.d(this,function(n){switch(n.label){case 0:return(t=i[e]).type.match("^text/uri-list")?[4,new Promise(function(e){return t.getAsString(e)})]:[3,2];case 1:a=n.sent(),n.label=2;case 2:return[2]}})},h=0,p.label=4;case 4:return h<i.length?[5,d(h)]:[3,7];case 5:p.sent(),p.label=6;case 6:return++h,[3,4];case 7:return null==a?(Object(o.n)(Object(o.a)(y||(y=r.e(["Kunde inte hitta någon bild i innehållet"],["Kunde inte hitta någon bild i innehållet"])))),[2]):(m(0,0,t,a),[2])}})})}(e,n)}},a.createElement("a",null,a.createElement("h1",null,t)),a.createElement("div",{className:"buttonsField"},a.createElement("div",{className:"buttonsContainer"},a.createElement("div",{className:"align-horizontal"}),a.createElement("div",{className:"horizontalMenu"},a.createElement("ul",null,v.map(function(t){return{item:t,isActive:p===t.name,callback:e.callbacks&&e.callbacks[t.name],givenRoute:e.routes&&e.routes[t.name],defaultRoute:t.route}}).filter(function(e){return e.callback||e.defaultRoute||e.givenRoute}).map(function(e){var t=e.item,n=e.isActive,r=e.callback,s=e.defaultRoute,o=e.givenRoute;return a.createElement("li",{key:t.name,className:n?"activePage":"",onClick:r},r?a.createElement("a",null,t.text):s||o?o||/^http[s]\:\/\//i.test(s)?a.createElement("a",{href:o||s},t.text):a.createElement(i.b,{to:s},t.text):a.createElement("a",null,t.text))})))))))))}},,function(e,t){e.exports=ReactDOM},,,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(6),i=n.n(a),s=n(23);var o=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(i()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var n,a,i="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];t&&(i=i.substr(2));try{for(var s=r.h(e),o=s.next();!o.done;o=s.next()){switch(o.value.split("-")[0].split("_")[0].toLowerCase()){case"en":return("AT"===this.term?"AT":"ST")+" "+i;case"sv":return("AT"===this.term?"HT":"VT")+" "+i}}}catch(e){n={error:e}}finally{try{o&&!o.done&&(a=s.return)&&a.call(s)}finally{if(n)throw n.error}}},e}()},,,function(e,t,n){"use strict";var r=n(12);t.a={bold:{icon:"<b>F</b>",title:"Fetstil",result:function(){return Object(r.a)("bold")}},italic:{icon:"<i>K</i>",title:"Kursiv",result:function(){return Object(r.a)("italic")}},underline:{icon:"<u>U</u>",title:"Understruken",result:function(){return Object(r.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Struken",result:function(){return Object(r.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Rubrik 1",result:function(){return Object(r.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Rubrik 2",result:function(){return Object(r.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Rubrik 3",result:function(){return Object(r.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraf",result:function(){return Object(r.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Citat",result:function(){return Object(r.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:'<i class="fa fa-list-ol" aria-hidden="true"></i>',title:"Ordnad lista",result:function(){return Object(r.a)("insertOrderedList")}},ulist:{icon:'<i class="fa fa-list" aria-hidden="true"></i>',title:"Punktlista",result:function(){return Object(r.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Programkod",result:function(){return Object(r.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Vågrät linje",result:function(){return Object(r.a)("insertHorizontalRule")}},link:{icon:'<i class="fa fa-link" aria-hidden="true"></i>',title:"Infoga länk",result:function(){var e=window.prompt("Ange länkens URL");e&&Object(r.a)("createLink",e)}},image:{icon:'<i class="fa fa-picture-o" aria-hidden="true"></i>',title:"Infoga bild",result:function(e,t){var n,r,a,i=window.prompt("Ange bildens URL");if(i){var s=document.createElement("img");s.src=i,s.tabIndex=1,n=s,window.getSelection&&(r=window.getSelection()).rangeCount&&((a=r.getRangeAt(0)).collapse(!0),a.insertNode(n),a.setStartAfter(n),a.collapse(!0),r.removeAllRanges(),r.addRange(a)),s.onfocus=t.onFocus,s.onblur=t.onBlur,t.props.onChange(t.contentDiv.innerHTML)}}}}},,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(12),s=new DOMParser,o={b:{},i:{},p:{},u:{},strike:{},pre:{},h1:{},h2:{},h3:{},h4:{},h5:{},img:{src:!0,class:!0,style:!0,tabindex:!0},a:{href:!0,target:!0,tabindex:!0},ul:{},ol:{},li:{},hr:{},br:{},div:{},span:{},table:{border:!0},tbody:{},thead:{},tfoot:{},tr:{},td:{headers:!0,colspan:!0,rowspan:!0},th:{abbr:!0,headers:!0,scope:!0,sorted:!0,colspan:!0,rowspan:!0}};function l(e){for(var t=s.parseFromString(e,"text/html"),n=t.body.childNodes,r=!1,a=0;a<n.length;++a)c(n.item(a))&&(r=!0);return r?t.body.innerHTML:e}function c(e){var t=!1;return function(e){return!!e.tagName}(e)&&function(e){var t=e.tagName&&o[e.tagName.toLowerCase()];if(!t)return console.warn("Wysiwyg: not allowed tag",e.tagName),u(e),function(e){for(var t=e.childNodes,n=0;n<t.length;++n)e.parentNode.insertBefore(t.item(n),e);e.remove()}(e),!0;for(var n=!1,r=0;r<e.attributes.length;++r){var a=e.attributes.item(r),i=a.name&&!!t[a.name.toLowerCase()];i||(n=!0,console.warn("Wysiwyg: not allowed attribute",a.name,"Tag: ",e.tagName),e.removeAttribute(a.name))}return n}(e)&&(t=!0),u(e)&&(t=!0),t}function u(e){for(var t=!1,n=e.childNodes,r=0;r<n.length;++r)c(n.item(r))&&(t=!0);return t}var d={bold:{icon:"<b>B</b>",title:"Bold",result:function(){return Object(i.a)("bold")}},italic:{icon:"<i>I</i>",title:"Italic",result:function(){return Object(i.a)("italic")}},underline:{icon:"<u>U</u>",title:"Underline",result:function(){return Object(i.a)("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",result:function(){return Object(i.a)("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return Object(i.a)("formatBlock","<H1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return Object(i.a)("formatBlock","<H2>")}},heading3:{icon:"<b>H<sub>3</sub></b>",title:"Heading 3",result:function(){return Object(i.a)("formatBlock","<H3>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return Object(i.a)("formatBlock","<P>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return Object(i.a)("formatBlock","<BLOCKQUOTE>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return Object(i.a)("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return Object(i.a)("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return Object(i.a)("formatBlock","<PRE>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return Object(i.a)("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&Object(i.a)("createLink",e)}},image:{icon:"&#128247;",title:"Image",result:function(){var e=window.prompt("Enter the image URL");e&&Object(i.a)("insertImage",e)}}};n.d(t,"a",function(){return b});var m="wysiwyg-actionbar",h="wysiwyg-button",p="wysiwyg-content",f="wysiwyg-focusrect",v="wysiwyg-focuspoint",g="wysiwyg-content readonly",b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={focusRect:null},n.onFocus=n.onFocus.bind(n),n.onBlur=n.onBlur.bind(n),n.onMouseDown=n.onMouseDown.bind(n),n.onMouseMove=n.onMouseMove.bind(n),n.onMouseUp=n.onMouseUp.bind(n),n}return r.c(t,e),t.prototype.componentDidMount=function(){var e=this;this.props.readOnly||(Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),document.addEventListener("mousedown",this.onMouseDown),document.addEventListener("mousemove",this.onMouseMove),document.addEventListener("mouseup",this.onMouseUp)),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentDidUpdate=function(){var e=this;Array.from(this.contentDiv.querySelectorAll("img,a")).map(function(e){return e}).forEach(function(t){t.tabIndex=1,t.onfocus=e.onFocus,t.onblur=e.onBlur}),this.props.reportNumChars&&this.props.reportNumChars(this.contentDiv&&this.contentDiv.innerText&&this.contentDiv.innerText.length)},t.prototype.componentWillUnmount=function(){document.removeEventListener("mousedown",this.onMouseDown),document.removeEventListener("mousemove",this.onMouseMove),document.removeEventListener("mouseup",this.onMouseUp)},t.prototype.shouldComponentUpdate=function(e,t){return!this.contentDiv||t!=this.state||e.readOnly!==this.props.readOnly||l(e.html)!==l(this.contentDiv.innerHTML)},t.prototype.triggerOnChange=function(e){this.props.onChange&&this.props.onChange(l(e))},t.prototype.onFocus=function(e){var t=e.target;if(t&&t.tagName&&("IMG"===t.tagName||"A"===t.tagName)){var n={focusRect:y(this.contentDiv.parentElement,t)};t.tagName,this.setState(n),this.focusElem=t}},t.prototype.onBlur=function(e){(e.target===this.focusElem&&e.relatedTarget!==this.focusRectDiv||e.target===this.focusRectDiv)&&this.setState({focusRect:null})},t.prototype.makeClickable=function(e){e.tabIndex=1},t.prototype.onMouseDown=function(e){if((e.target.className||"").split(" ").indexOf(v)>=0){var t=this.getRectCorner(e);this.corner=t,this.resizeStartX=e.clientX}},t.prototype.onMouseMove=function(e){if(this.corner&&this.state.focusRect&&this.focusElem){e.preventDefault();var t=this.focusRectDiv.getBoundingClientRect();if(t.width<32)return;var n=Math.max(32,this.corner.endsWith("l")?t.width+(this.resizeStartX-e.clientX):t.width-(this.resizeStartX-e.clientX));this.resizeStartX=e.clientX;var r=n/t.width,a=t.height*r;this.focusElem.style.width=n+"px",this.focusElem.style.height=a+"px",this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.onMouseUp=function(e){this.corner&&this.state.focusRect&&this.focusElem&&(this.corner=null,this.triggerOnChange(this.contentDiv.innerHTML))},t.prototype.getRectCorner=function(e){var t,n;try{for(var a=r.h((e.target.className||"").split(" ")),i=a.next();!i.done;i=a.next()){switch(i.value){case"fpul":return"ul";case"fpur":return"fpur";case"fplr":return"lr";case"fpll":return"ll"}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return null},t.prototype.execImageEditAction=function(e){if(this.focusElem){switch(e){case"float-left":this.focusElem.style.cssFloat="left";break;case"float-right":this.focusElem.style.cssFloat="right";break;case"unfloat":this.focusElem.style.cssFloat=""}this.triggerOnChange(this.contentDiv.innerHTML),this.setState({focusRect:y(this.contentDiv.parentElement,this.focusElem)})}},t.prototype.render=function(){var e,t=this,n=this.props.defaultActions||d,s=this.props.actions?this.props.actions.map(function(e){return"string"==typeof e?n[e]:n[e.name]?r.a({},n[e.name],e):e}):Object.keys(n).map(function(e){return n[e]});this.state.focusRect&&(s=s.concat((e=function(e){return t.execImageEditAction(e)},[{name:"float-left",icon:'<div style="position:relative">\n      <i class="fa fa-align-right" aria-hidden="true"></i>\n      <div style="position:absolute; left:-4px;top:0; transform: scale(0.5); transform-origin: left top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta vänster om text",result:function(){return e("float-left")}},{name:"float-right",icon:'<div style="position:relative">\n      <i class="fa fa-align-left" aria-hidden="true"></i>\n      <div style="position:absolute; right:-4px;top:0; transform: scale(0.5); transform-origin: right top">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n    </div>',title:"Låt bilden flyta höger om text",result:function(){return e("float-right")}},{name:"unfloat",icon:'<div style="position:relative;" aria-hidden="true">\n      <div style="position:absolute;top:0;left:0">&#8254;</div>\n      <div style="position:absolute;top:0:left:0;transform: scale(0.5); transform-origin: left bottom">\n        <i class="fa fa-picture-o" aria-hidden="true"></i>\n      </div>\n      <div style="position:absolute;top:0;left:0">_</div>\n    </div>',title:"Placera bilden på egen rad",result:function(){return e("unfloat")}}])));var o=this.state.focusRect,c=this.props,u=c.readOnly,b=c.reportNumChars,y=c.maxChars;return a.createElement("div",{className:this.props.className},!u&&a.createElement("div",{className:m},s.map(function(e,n){return a.createElement("button",{key:n,className:h,dangerouslySetInnerHTML:{__html:e.icon},title:e.title,onMouseDown:function(n){e.result(n,t)},onMouseUp:function(e){return setTimeout(function(){return t.contentDiv.focus()},10)}})})),a.createElement("div",{className:u?g:p,style:{position:"relative",top:0,left:0}},a.createElement("div",{className:"editor",ref:function(e){return t.contentDiv=e},dangerouslySetInnerHTML:{__html:l(this.props.html)},contentEditable:!u,onPaste:function(e){if(!isNaN(y)){e.target;var t=e.currentTarget,n=t&&t.innerText||"",r=e.clipboardData.getData("text/plain")||"";n.length+r.length>y&&e.preventDefault()}},onKeyUp:b?function(e){var t=e.target.innerText;b(t?t.length:NaN)}:null,onKeyPress:isNaN(y)?null:function(e){var t=e.target.innerText;t&&t.length>=y&&e.preventDefault()},onInput:function(e){return t.triggerOnChange(e.target.innerHTML)},onKeyDown:function(e){u||(b&&e.currentTarget&&b((e.currentTarget.innerText||"").length),e.which>=35&&e.which<=40&&e.stopPropagation(),9===e.which&&(e.preventDefault(),e.shiftKey?Object(i.a)("outdent"):Object(i.a)("indent")),(8===e.keyCode||46===e.keyCode)&&t.focusElem&&t.state.focusRect&&(t.focusElem&&t.focusElem.parentElement&&t.focusElem.parentElement.removeChild(t.focusElem),t.focusElem=null,t.setState({focusRect:null}),t.triggerOnChange(t.contentDiv.innerHTML)))}}),o&&a.createElement("div",{ref:function(e){return t.focusRectDiv=e},className:f,onBlur:this.onBlur,tabIndex:1,style:{outline:0,position:"absolute",top:this.state.focusRect.top,left:this.state.focusRect.left,width:this.state.focusRect.width,height:this.state.focusRect.height}},a.createElement("div",{className:v+" fpul",style:{position:"absolute",top:0,left:0}}),a.createElement("div",{className:v+" fpur",style:{position:"absolute",top:0,right:0}}),a.createElement("div",{className:v+" fplr",style:{position:"absolute",bottom:0,right:0}}),a.createElement("div",{className:v+" fpll",style:{position:"absolute",bottom:0,left:0}}))))},t}(a.Component);function y(e,t){var n=e.getBoundingClientRect(),r=t.getBoundingClientRect();return{top:r.top-n.top+e.scrollTop,left:r.left-n.left+e.scrollLeft,bottom:r.bottom-n.top+e.scrollTop,right:r.right-n.left+e.scrollLeft,width:r.width,height:r.height}}},,,function(e,t,n){"use strict";n(30),n(29),n(33);var r=n(28);n.d(t,"a",function(){return r.a})},,function(e,t,n){"use strict";n.d(t,"d",function(){return c}),n.d(t,"b",function(){return u}),n.d(t,"a",function(){return d}),n.d(t,"e",function(){return m}),n.d(t,"c",function(){return h});var r,a,i,s,o=n(1),l=n(2);function c(e){var t=e.knowledgeRequirements.reduce(function(e,t){return e[t.id]=t,e},{});return e.tasks.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete t[e.id]})}),Object.keys(t).map(function(e){return t[e]})}function u(e){return d([e],e.tasks)}function d(e,t){var n={};return e.forEach(function(e){e.knowledgeRequirements.forEach(function(e){n[e.id]=!0}),e.abilities.forEach(function(e){n[e.id]=!0}),e.centralContent.forEach(function(e){n[e.id]=!0})}),t.forEach(function(e){e.knowledgeRequirements.forEach(function(e){delete n[e.id]}),e.abilities.forEach(function(e){delete n[e.id]}),e.centralContent.forEach(function(e){delete n[e.id]})}),n}function m(e){return Object(l.k)([function(e){var t={};return Object(l.k)(e.modules.map(function(n){return n.taskIds.map(function(n){if(t[n]){var a=e.tasks.find(function(e){return e.id===n});return Object(l.a)(r||(r=o.e(['Samma uppgift förekommer flera gånger: "','"'],['Samma uppgift förekommer flera gånger: "','"'])),a.name)}t[n]=!0}).filter(function(e){return e})}))}(e),function(e){var t={};return e.tasks.map(function(e){if(e.url){if(t[e.url])return Object(l.a)(a||(a=o.e(['Två uppgifter pekar på samma URL: "','" samt "','"'],['Två uppgifter pekar på samma URL: "','" samt "','"'])),t[e.url].name,e.name);t[e.url]=e}}).filter(function(e){return e})}(e),function(e){return e.modules.some(function(e){return""===e.name})&&Object(l.a)(i||(i=o.e(["Det finns minst en modul utan angivet namn"],["Det finns minst en modul utan angivet namn"])))}(e),function(e){var t={};return e.modules.map(function(e){if(e.name&&t[e.name])return Object(l.a)(s||(s=o.e(["Modulen med namn "," förekommer flera gånger"],["Modulen med namn "," förekommer flera gånger"])),e.name);e.name&&(t[e.name]=!0)})}(e)]).filter(function(e){return e})}function h(e){var t={};function n(e,n){(t[e]||(t[e]=[])).push(n)}return e.tasks.forEach(function(e){e.abilities.forEach(function(t){return n(t.id,e)}),e.centralContent.forEach(function(t){return n(t.id,e)}),e.futureAbilities.forEach(function(t){return n(t,e)})}),t}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(24),s=n(2),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return r.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.options,r=t.title,o=t.markedIds,l=t.markMode,c=t.migratedIds,u=t.uncoveredIds,d=Object(s.b)(n,function(e){return e.group||"default"}),m=Object.keys(d);return a.createElement(i.a,{title:a.createElement("p",null,r),className:"larger"},m.map(function(t){return a.createElement(a.Fragment,{key:t},1===m.length?null:a.createElement(a.Fragment,null,a.createElement("br",null),a.createElement("h5",null,t),a.createElement("hr",null)),d[t].map(function(t){var n=o.some(function(e){return e===t.id}),r=c&&!!c[t.id],i=u&&u[t.id];return a.createElement("div",{className:"align-horizontal",key:t.id,onClick:function(){return l&&e.props.onMarkChanged(t.id,!n)}},a.createElement("div",{className:"horizontalItem top spaced"+(l?" selectable":"")+(n?" markedGreen":i?" markedRed":"")+(r?" migrated":""),title:r?l?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0},a.createElement("p",{dangerouslySetInnerHTML:{__html:t.name}}),a.createElement("br",null)))}))}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(10),s=n.n(i),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editMode:!1,runtimeStyle:null,text:t.text||""},n}return r.c(t,e),t.prototype.componentWillReceiveProps=function(e){this.props.text!==e.text&&this.setState({text:e.text||""})},t.prototype.render=function(){var e=this,t=this.state.text||"";return a.createElement("div",{className:"renameable-text"+(t?"":" unnamed")+(this.props.readOnly?" disabled":""),tabIndex:this.state.editMode?void 0:0,onFocus:function(t){e.rename()},style:{width:"100%"}},a.createElement("div",{ref:function(t){return e.label=t},style:{display:this.state.editMode?"none":""}},t||this.props.clickAdvertiseText),"textarea"===this.props.tag?a.createElement("textarea",{ref:function(t){return e.input=t},maxLength:this.props.maxChars,style:r.a({},this.state.runtimeStyle,{display:this.state.editMode?"":"none"}),onFocus:function(e){return s()(e.target).select()},onBlur:this.onBlur.bind(this),value:t,onKeyDown:this.onKeyDown.bind(this),onChange:this.onChange.bind(this),tabIndex:this.state.editMode?0:void 0,placeholder:this.props.placeholder}):a.createElement("input",{ref:function(t){return e.input=t},type:"text",maxLength:this.props.maxChars,style:r.a({},this.state.runtimeStyle,{display:this.state.editMode?"":"none"}),onFocus:function(e){return s()(e.target).select()},onBlur:this.onBlur.bind(this),value:t,onKeyDown:this.onKeyDown.bind(this),onChange:this.onChange.bind(this),tabIndex:this.state.editMode?0:void 0,placeholder:this.props.placeholder}))},t.prototype.onKeyDown=function(e){27===e.keyCode?(this.input.value=this.props.text||"",this.input.blur(),e.stopPropagation()):13===e.keyCode&&(this.propagateOnChange(this.input.value),this.setState({editMode:!1,text:this.input.value}))},t.prototype.onBlur=function(e){this.propagateOnChange(this.input.value),this.setState({editMode:!1,text:this.input.value})},t.prototype.propagateOnChange=function(e){this.propagatedOnChange!=e&&(this.propagatedOnChange=e,this.props.onChange(e))},t.prototype.onChange=function(e){this.setState({text:this.input.value}),this.props.eager&&this.propagateOnChange(this.input.value)},t.prototype.rename=function(e){var t=this;if(!this.state.editMode&&!this.props.readOnly){e=e||this.state.text||"";var n=s()(this.label);this.setState({text:e,editMode:!0,runtimeStyle:{textAlign:n.css("textAlign"),fontSize:n.css("font-size"),paddingTop:n.css("paddingTop"),paddingBottom:n.css("paddingBottom"),paddingLeft:n.css("paddingLeft"),paddingRight:n.css("paddingRight"),marginTop:n.css("marginTop"),marginBottom:n.css("marginBottom"),marginLeft:n.css("marginLeft"),marginRight:n.css("marginRight"),borderRadius:n.css("borderRadius"),backgroundColor:n.css("backgroundColor"),lineHeight:n.css("lineHeight"),fontWeight:n.css("fontWeight"),outLine:0,borderStyle:"none",height:"100%",width:"100%",boxSizing:"border-box"}},function(){return s()(t.input).focus()})}},t}(a.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=[{displayName:"Administratör",mail:"vemendo@kedschools.com",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"admin"},{displayName:"David",mail:"david.fahlander@vemendo.se",roles:["ADMIN","EMPLOYEE"],school:"KED",username:"david"},{displayName:"Test-Live-Elev1",mail:"ubw6757@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ubw6757@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev2",mail:"ums4302@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"ums4302@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev3",mail:"uhh3460@edu.kunskapsgymnasiet.se",roles:["STUDENT"],school:"Uppsala",username:"uhh3460@edu.kunskapsgymnasiet.se"},{displayName:"Test-Live-Elev4(fel goals issue)",mail:"umt6826@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"umt6826@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev5(future abilities)",mail:"ujg3833@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujg3833@edu.kunskapsskolan.se"},{displayName:"Test-Live-Elev6(future abilities)",mail:"ujt1363@edu.kunskapsskolan.se",roles:["STUDENT"],school:"Uppsala",username:"ujt1363@edu.kunskapsskolan.se"},{displayName:"Test-Live-Lärare1",mail:"rickard.albertsson@kunskapsgymnasiet.se",roles:["EMPLOYEE"],school:"Uppsala",username:"rickard.albertsson@kunskapsgymnasiet.se"},{displayName:"EDSTestUserGymnasium",mail:"uhh3200@edu.kunskapsgymnasiet.se",roles:["STUDENT"],username:"EDSTestUser1",school:"KED",schoolType:"Gymnasium"},{displayName:"vemendo.elev@kedschools.com",mail:"vemendo.elev@kedschools.com",roles:["STUDENT"],username:"vemendo.elev@kedschools.com",school:"KED",schoolType:"Gymnasium"},{displayName:"Medarbetare Nacka",mail:"medarbetare.nacka@kunskapsskolan.se",roles:["EMPLOYEE"],username:"medarbetare.nacka/KS",school:"Nacka",schoolType:"Grundskolor"},{displayName:"Medarbetare Globen",mail:"medarbetare.globen@kunskapsgymnasiet.se",roles:["EMPLOYEE"],username:"medarbetare.globen/KS",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Globen",mail:"elev.globen@edu.kunskapsgymnasiet.se",schoolGrade:2,roles:["STUDENT"],username:"elev.globen",school:"Globen",schoolType:"Gymnasium"},{displayName:"Elev Borås",mail:"elev.boras@edu.kunskapsskolan.se",schoolGrade:7,roles:["STUDENT"],username:"elev.boras",school:"Borås",schoolType:"Grundskolor"},{displayName:"Elev Borlänge",mail:"elev.borlange@edu.kunskapsskolan.se",schoolGrade:9,roles:["STUDENT"],username:"elev.borlange/KS",school:"Borlänge",schoolType:"Gymnasium"},{displayName:"Roll-lös",mail:"none@kunskapsskolan.se",username:"none",roles:[]}]},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(11),s=n(37),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={errors:[],infos:[]},n._unhandledRejection=n._unhandledRejection.bind(n),n._error=n._error.bind(n),n._customError=n._customError.bind(n),n._onInfo=n._onInfo.bind(n),n._dbWriterError=n._dbWriterError.bind(n),n._dbWriterStateChanged=n._dbWriterStateChanged.bind(n),n}return r.c(t,e),t.prototype._addError=function(e,t,n){var r=this;this.setState(function(r){var a=r.errors;return a.some(function(t){return t.message===e})?{errors:a}:(a.length>2&&(a=a.slice(1)),{errors:a.concat([{message:e,details:t,retryable:n}])})}),n||setTimeout(function(){r.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},3e4)},t.prototype._addInfo=function(e){var t=this;""!==e?(this.setState(function(t){var n=t.infos;return n.some(function(t){return t===e})?{infos:n}:(n.length>2&&(n=n.slice(1)),{infos:n.concat(e)})}),setTimeout(function(){t.setState(function(t){return{infos:t.infos.filter(function(t){return t!==e})}})},1e4)):this.setState({infos:[]})},t.prototype._dbWriterError=function(e,t){this._addError("Det går inte att spara till servern",e,t)},t.prototype._dbWriterStateChanged=function(e){var t=e.isEdited,n=e.isSaving;t||this.setState(function(e){var t=e.errors;return{errors:t=t.filter(function(e){return!e.retryable})}}),this.setState({dbWriterIsEdited:t,dbWriterIsSaving:n})},t.prototype.componentDidMount=function(){window.addEventListener("unhandledrejection",this._unhandledRejection),window.addEventListener("error",this._error),window.addEventListener("customerror",this._customError),window.addEventListener("info",this._onInfo),i.c.writer.onError(this._dbWriterError),i.c.writer.onStateChange(this._dbWriterStateChanged)},t.prototype.componentWillUnmount=function(){window.removeEventListener("unhandledrejection",this._unhandledRejection),window.removeEventListener("error",this._error),window.removeEventListener("customerror",this._customError),window.removeEventListener("info",this._onInfo),i.c.writer.off(this._dbWriterError),i.c.writer.off(this._dbWriterStateChanged)},t.prototype._unhandledRejection=function(e){this._addError("Ett okänt fel inträffade...",e.reason)},t.prototype._error=function(e){this._addError(e.error?e.error.message:"Ett okänt fel inträffade...",e.error)},t.prototype._customError=function(e){this._addError(e.detail)},t.prototype._onInfo=function(e){this._addInfo(e.detail)},t.prototype.render=function(){var e=this,t=this.state,n=t.errors,r=t.infos,i=t.dbWriterIsSaving;return a.createElement("div",{className:"error-success-feedback",style:{position:"fixed",left:0,top:0,width:"100%",pointerEvents:"none"}},a.createElement("div",{style:{display:"table",margin:"0 auto"}},n.filter(function(e){return!e.retryable||!i}).map(function(t){var n=t.message,r=t.details,i=t.retryable,o=t.showDetails;return a.createElement("div",{key:n,className:"error"},a.createElement("div",{style:{float:"left"}},n),a.createElement("div",{style:{pointerEvents:"auto"}},a.createElement(s.a,{onClick:function(){return e.removeError(n)}})),r||i?a.createElement("div",{style:{pointerEvents:"auto"}},r?a.createElement(a.Fragment,null,a.createElement("a",{className:"btn",onClick:function(){return e.toggleDetails(n)}},o?"Dölj detailer":"Visa detailjer")," "):void 0,o?a.createElement("p",null,""+r):a.createElement(a.Fragment,null," "),i?a.createElement("a",{className:"btn",onClick:function(){return e.retrySave()}},"Försök spara nu"):void 0):void 0)}),r.map(function(e){return a.createElement("p",{key:e,className:"info"},e)})))},t.prototype.removeError=function(e){this.setState(function(t){return{errors:t.errors.filter(function(t){return t.message!==e})}})},t.prototype.retrySave=function(){i.c.writer.retrySave()},t.prototype.toggleDetails=function(e){this.setState(function(t){return{errors:t.errors.map(function(t){return t.message===e?r.a({},t,{showDetails:!t.showDetails}):t})}})},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(1),a=function(){function e(e){this.comm=e,this.listPromise=null,this.items=null,this.subscribers=[]}return e.prototype.subscribe=function(e){var t=this;return this.ensureHasData().then(function(){e(t.items,t.error),t.subscribers.push(e)})},e.prototype.unsubscribe=function(e){this.subscribers=this.subscribers.filter(function(t){return t!==e})},e.prototype.notifySubscribers=function(){var e=this;this.subscribers.forEach(function(t){return t(e.items,e.error)})},e.prototype.ensureHasData=function(){return this.listPromise||this.refreshFromServer(),this.listPromise},e.prototype.refreshFromServer=function(){var e=this;return this.listPromise=this.comm.query().then(function(t){e.items=t,e.error=null,e.notifySubscribers()}).catch(function(t){e.error=t,e.items=e.items||[],e.notifySubscribers()}),this.listPromise},e.prototype.update=function(e){return r.b(this,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return[4,this.ensureHasData()];case 1:return n.sent(),t=Array.isArray(e)?e:[e],this.items=this.items.map(function(e){var n=t.find(function(t){var n=t.id;return e.id===n});return n?Object.assign({},n):e}),this.notifySubscribers(),[2]}})})},e.prototype.insert=function(e){var t=this;return this.ensureHasData().then(function(){t.items=t.items.concat(e),t.notifySubscribers()})},e.prototype.delete=function(e){var t=this,n=Array.isArray(e)?e:[e];return this.ensureHasData().then(function(){t.items=t.items.filter(function(e){return!n.some(function(t){return e.id===t})}),t.notifySubscribers()})},e}()},function(e,t,n){"use strict";var r=n(17),a=n(3),i=function(){return function(){a.a.currentUser,(Object(r.b)(location.search,{toLower:!0}).features||"").split(",").map(function(e){return e.toLowerCase()})}}();n.d(t,"a",function(){return i})},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r,a=n(1),i=n(0),s=n(2),o=function(e){function t(t){return e.call(this,t)||this}return a.c(t,e),t.prototype.render=function(){for(var e=this.props,t=e.knowledgeRequirements,n=e.markedIds,o=e.migratedIds,l=e.explainedRequirements,c=this.props,u=c.idsToMarkNotOk,d=c.markMode,m=c.onMarkChanged,h=c.onExplainedRequirementsChanged,p=["E","C","A"],f=[],v=t.slice(),g=null;!(g=p.map(function(e){var t=v.findIndex(function(t){return t.gradeStep&&t.gradeStep.toUpperCase()===e});if(t<0)return null;var n=v[t];return v.splice(t,1),n})).every(function(e){return null===e});)f.push(g);return i.createElement("div",null,i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,p.map(function(e){return i.createElement("th",{key:e},e)}))),i.createElement("tbody",null,f.map(function(e,t){return i.createElement(i.Fragment,{key:t},i.createElement("tr",null,e.map(function(e,t){var r=e&&n&&n.indexOf(e.id)>=0,a=e&&u&&u[e.id],s=e&&o&&!!o[e.id];return i.createElement("td",{key:t,dangerouslySetInnerHTML:{__html:e?e.name:""},className:(d?"selectable":"")+(s?" migrated":"")+(r?" markedGreen":a?" markedRed":""),onClick:d&&e?function(){return m(e.id,!r)}:void 0,title:s?d?'Skolverket har uppdaterat textens formulering. Du kan granska ändringen genom att fälla ut varningsboxen till höger, med titel "Uppdaterade formuleringar från Skolverket"':"Skolverket har uppdaterat textens formulering, men detta har ännu inte granskats av uppgiftens redigeringsbehörige":void 0})})),l&&i.createElement("tr",null,e.map(function(e,t){var o=e&&n&&n.indexOf(e.id)>=0;return i.createElement("td",{key:t},o?i.createElement("textarea",{placeholder:Object(s.a)(r||(r=a.e(["Beskriv kravet"],["Beskriv kravet"]))),className:"inputTextBox inputTextLarge",style:{width:"100%"},readOnly:!d,value:l[e.id]||"",onChange:h&&function(t){return h(e.id,t.target.value)}}):void 0)})))}))))},t}(i.Component)},,,,,,,,,,,function(e,t,n){"use strict";var r=n(8);r.a.ENVIRONMENT="development",r.a.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",r.a.EDS_API_URL="http://localhost:8082/testdata/eds/",r.a.KED_TOKEN_URL="https://kedauth.azurewebsites.net/token",r.a.KED_CLIENT_ID="Vemendo-dev",r.a.KED_CLIENT_SECRET="BwBB4Vs58sQSmDspqIbq",r.a.KED_REALM="SE1";var a=n(1),i=n(17),s=n(19),o=n(5),l=n(3),c=n(14),u=n(2);function d(e,t,n){var r=Object(i.b)(t),s=Object(u.e)(r,c.a),o=a.f(Object(i.c)(e),2),l=o[0],d=o[1],m=Object(i.b)(d);return l+Object(i.a)(a.a({},m,s,{scopes:n.join(",")}))}function m(e,t){return e+"/"+t}function h(e,t,n){return new o.e(s.c,s.d,e+t.mail+location.search,r.a.KED_CLIENT_ID,r.a.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:n})}var p,f,v=l.a.currentUser&&l.a.currentUser.mail;if(v)if(r.a.KED_TOKEN_PATH){var g=d(r.a.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);l.a.bearerProvider=(f=m(p=g,v),new s.b(p,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){l.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,f),{token:t.token,expires:Date.now()+354e4}},f)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(l.a.currentUser=JSON.parse(t))}(m(g,v));var b=d(r.a.KED_TOKEN_PATH,location.search,["https://www.googleapis.com/auth/calendar.readonly"]);l.a.googleTokenProvider=function(e,t){var n=m(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},n)}(b,v)}else{if(!(r.a.KED_TOKEN_URL&&r.a.KED_CLIENT_ID&&r.a.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");l.a.bearerProvider=h(r.a.KED_TOKEN_URL,l.a.currentUser,["kedbackend","EDS"]),l.a.googleTokenProvider=h(r.a.KED_TOKEN_URL+"/google",l.a.currentUser,["https://www.googleapis.com/auth/calendar.readonly"])}l.a.kedBackendClient=new s.a(r.a.KED_API_URL,l.a.bearerProvider);var y=n(36);l.a.edsClient=new y.b(s.c,r.a.EDS_API_URL,l.a.bearerProvider,function(){return l.a.currentUser.mail})},,,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return h}),n.d(t,"b",function(){return p});var r,a,i,s=n(1),o=n(0),l=n(40),c=n(2),u=n(3),d=n(5),m=n(13),h=function(e){return o.createElement("div",{style:{outline:0}},o.createElement(l.a,{title:"Skolor",activePage:"schools",callbacks:{schools:function(){return location.hash="#/schools"}},routes:{feedback:e.feedbackUrl}}),o.createElement(p,s.a({},e)))},p=function(e){function t(t){var n=e.call(this,t)||this;return n.state=null,n}return s.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(c.n)(e)})},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:return this.props.id?(e=this.props.id,[4,u.a.kedBackendClient.get("schools",e)]):[3,2];case 1:return t=n.sent(),this.origSchool=s.a({},t),this.setState(s.a({},t)),[3,3];case 2:this.setState({id:Object(d.h)(),officialBranchId:Object(d.h)(),isGymnasium:"gymnasium"===this.props.type,isPrimarySchool:"primary"===this.props.type}),n.label=3;case 3:return[2]}})})},t.prototype.save=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:if(e=new d.a,(t=s.a({},this.state,{tags:(this.state.tags||[]).filter(function(e){return["primary","gymnasium"].indexOf(e)<0})})).isPrimarySchool&&t.tags.push("primary"),t.isGymnasium&&t.tags.push("gymnasium"),!t.isGymnasium&&!t.isPrimarySchool)throw new Error(Object(c.a)(r||(r=s.e(["Skolan måste antingen vara gymnasium eller grundskola"],["Skolan måste antingen vara gymnasium eller grundskola"]))));if(this.origSchool){if(this.origSchool.name!==this.state.name)throw new Error("Skolans namn får inte ändras. Kontakta Vemendo AB.");t.officialBranchId||(t.officialBranchId=Object(d.h)(),this.addSchoolBranch(t,e)),e.put("schools",t)}else t.acl=["role:USER:R"],t.acl.push(new d.b("schoolRole",t.name+"/EMPLOYEE","W").toString()),e.add("schools",t),this.addSchoolBranch(t,e);return[4,u.a.kedBackendClient.batch(e.mutationRequests)];case 1:return n.sent(),location.hash="#/schools",[2]}})})},t.prototype.addSchoolBranch=function(e,t){var n={id:e.officialBranchId,name:e.name,schoolId:e.id,acl:["role:USER:R",new d.b("schoolRole",e.name+"/EMPLOYEE","W").toString()]};t.add("branches",n)},t.prototype.deleteSchool=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:return prompt(Object(c.a)(a||(a=s.e(['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'],['Är du säker på att ta bort skolan "','"? Skriv skolans exakta namn för att bekräfta'])),this.state.name))!==this.state.name?[3,3]:[4,u.a.kedBackendClient.list("branches",{ids:[this.state.officialBranchId],include:"approvedChildren",flags:["includeIdsOnly"]})];case 1:return e=n.sent(),(t=new d.a).delete("schools",this.state.id),e[0].approvedChildren.forEach(function(e){var n=e.id;t.delete("branches",n)}),t.delete("branches",this.state.officialBranchId),[4,u.a.kedBackendClient.batch(t.mutationRequests)];case 2:return n.sent(),location.hash="#/schools",[3,4];case 3:alert("Skolan togs inte bort eftersom det namn du angav inte stämmer."),n.label=4;case 4:return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=!!t.id,a=this.state,l=this.origSchool,d=u.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},o.createElement("h2",null,n),o.createElement("hr",null),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Namn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:!a||!a.name,disabled:!d||r,tabIndex:1,size:50,value:a?a.name:"",onChange:function(t){return e.setState({name:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Visningsnamn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:a&&!a.displayName,disabled:!d,tabIndex:1,size:50,value:a?a.displayName:"",onChange:function(t){return e.setState({displayName:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Typ:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"checkbox",name:"schoolTypePrimary",disabled:!d,checked:a&&a.isPrimarySchool,tabIndex:1,value:"primary",onChange:function(t){return e.setState({isPrimarySchool:t.target.checked})}})," Grundskola"),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"}),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"checkbox",name:"schoolTypeGymnasium",disabled:!d,checked:a&&a.isGymnasium,tabIndex:1,value:"gymnasium",onChange:function(t){return e.setState({isGymnasium:t.target.checked})}})," Gymnasium"),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("br",null),d&&r&&o.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return e.deleteSchool().catch(c.n)}},"Ta bort skola"),o.createElement("div",{className:"pull-right"}," "),o.createElement(m.b,{className:"btn btn-warning btn-large pull-right",to:"/schools"},"Avbryt"),d&&o.createElement("a",{tabIndex:1,className:"btn btn-large",onClick:function(){l&&l.name!==a.name&&!confirm(Object(c.a)(i||(i=s.e(["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."],["Är du säker på att du vill döpa om skolan? Detta påverkar portalens funktion för lärare och elever som tillhör skolan. Namnet måste stämma exakt överens med namngivningen av skolan på användarobjekten.\n\nDet som händer annars är att elever och lärare på skolan inte längre hittar några kurser.\n\nBlir det fel kan du dock alltid bara döpa tillbaka skolans namn."]))))||e.save().catch(c.n)}},"Spara")))},t}(o.Component)},,,function(e,t,n){"use strict";n.d(t,"a",function(){return c});var r=n(1),a=n(0),i=n(3),s=n(40),o=n(15),l=n(90),c=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(o.a,null));var e=this.state.subject,t=e.name;e.code,e.courseTemplates,e.schoolType;return a.createElement("div",null,a.createElement(s.a,{title:t,activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),a.createElement(l.a,{id:this.props.id}))},t}(a.Component)},,function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1),a=n(0),i=n(3),s=n(15),o=function(e){function t(t){var n=e.call(this,t)||this;return n.state={subject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:return[4,i.a.kedBackendClient.get("subjects",this.props.id,{include:"courseTemplates"})];case 1:return e=t.sent(),this.setState({subject:e}),[2]}})})},t.prototype.render=function(){if(!this.state.subject)return a.createElement("p",null,a.createElement(s.a,null));var e=this.state.subject,t=e.name,n=e.code,r=e.courseTemplates,i=e.schoolType;return a.createElement("div",null,"primary"===i?a.createElement(a.Fragment,null,a.createElement("h2",null,"Grundskoleämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var n=e.id,r=(e.code,e.publishable,e.points,e.schoolGrade);return a.createElement("li",{key:n,className:"complete"},t," för årskurs ",r)}))):a.createElement(a.Fragment,null,a.createElement("h2",null,"Kurser för ämnet ",t," (",n,")"),a.createElement("ul",{className:"entity-list"},r.map(function(e){var t=e.id,n=e.name,r=(e.code,e.publishable,e.points);return a.createElement("li",{key:t,className:"complete"},n," - ",r,"p")}))))},t}(a.Component)},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=["Lära att lära","Samarbeta","Agera globalt","Visa handlingskraft","Vara innovativ","Leva digitalt"]},,function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(0),a=n(63);function i(){return r.createElement("div",{className:"sv-layout"},r.createElement("h2",null,"Välj användare"),r.createElement("table",{className:"login-table"},r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Namn"),r.createElement("th",null,"Roller"),r.createElement("th",null,"E-post"),r.createElement("th",null,"Skola"))),r.createElement("tbody",null,a.a.map(function(e){var t=e.username,n=e.displayName,a=e.mail,i=e.school,s=e.roles;return r.createElement("tr",{key:a,onClick:function(){return location.search="?user="+t}},r.createElement("td",null,n),r.createElement("td",{style:0===s.length?{fontStyle:"italic"}:{}},0===s.length?"saknar roller":s.join(", ")),r.createElement("td",null,a),r.createElement("td",{style:i?{}:{fontStyle:"italic"}},i||"saknar skola"))}))))}},,function(e,t,n){"use strict";var r,a,i,s=n(1),o=n(0),l=n(40),c=n(3),u=n(2),d=n(13),m=n(14),h=n(15),p=function(e){var t=e.schools,n=e.viewCourseUrl,l=c.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"editable-school-list"},o.createElement("div",null,t?o.createElement("table",null,o.createElement("tbody",null,t.map(function(e){return o.createElement("tr",{className:"align-horizontal",key:e.id},o.createElement("td",null,o.createElement(d.b,{className:"editItem",to:"/schools/"+e.id+"/edit"})),o.createElement("td",null,o.createElement("p",null,e.name)),o.createElement("td",null,o.createElement("p",null,o.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"EMPLOYEE",school:e.name})}},"Agera som lärare på denna skola"))),o.createElement("td",null,o.createElement("p",null,o.createElement("a",{style:{cursor:"pointer"},onClick:function(){return Object(m.b)({role:"STUDENT",school:e.name,url:n})}},"Agera som elev på denna skola"))))}))):o.createElement("p",null,o.createElement(h.a,null),"V.g. vänta medan skolor laddas")),o.createElement("br",null),t&&l&&o.createElement(d.b,{to:"/schools/new/"+e.type,className:"btn"},"gymnasium"==e.type?Object(u.a)(r||(r=s.e(["Lägg till gymnasieskola"],["Lägg till gymnasieskola"]))):"primary"==e.type?Object(u.a)(a||(a=s.e(["Lägg till grundskola"],["Lägg till grundskola"]))):Object(u.a)(i||(i=s.e(["Lägg till skola"],["Lägg till skola"])))))};n.d(t,"a",function(){return f}),n.d(t,"b",function(){return v});var f=function(e){return o.createElement("div",{style:{outline:0}},o.createElement(l.a,{title:"Skolor",activePage:"schools",routes:{feedback:e.feedbackUrl}}),o.createElement(v,{viewCourseUrl:e.viewCourseUrl}))},v=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schools:null},n}return s.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(function(e){return Object(u.n)(e.message||e)})},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){var e;return s.d(this,function(t){switch(t.label){case 0:return[4,c.a.kedBackendClient.list("schools")];case 1:return e=t.sent(),this.setState({schools:e}),[2]}})})},t.prototype.render=function(){var e=this.state.schools;return e&&e.sort(Object(u.g)("name")),o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},e?o.createElement(o.Fragment,null,o.createElement("div",null,o.createElement("h2",null,"Gymnasieskolor"),o.createElement(p,{schools:e.filter(function(e){return e.isGymnasium}),viewCourseUrl:this.props.viewCourseUrl,type:"gymnasium"})),o.createElement("div",null,o.createElement("h2",null,"Grundskolor"),o.createElement(p,{schools:e.filter(function(e){return e.isPrimarySchool}),viewCourseUrl:this.props.viewCourseUrl,type:"primary"}))):o.createElement(h.a,null)))},t}(o.Component)},,,,,function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1),a=n(0),i=n(24),s=function(e){function t(t){return e.call(this,t)||this}return r.c(t,e),t.prototype.render=function(){var e=this.props,t=e.task,n=e.course,s=e.updateLink;if(!t.migratedTexts)return a.createElement(a.Fragment,null," ");var o=t.migratedTexts,l=o.abilities,c=o.centralContent,u=o.knowledgeRequirements,d=Object.keys(u||{}).map(function(e){return r.a({},n.knowledgeRequirements.find(function(t){return t.id===e}),u[e])}),m={title:"Uppdaterat kunskapskrav för betyget A",type:"knowledgeRequirements",items:d.filter(function(e){return"A"===e.gradeStep})},h={title:"Uppdaterat Kunskapskrav för betyget C",type:"knowledgeRequirements",items:d.filter(function(e){return"C"===e.gradeStep})},p={title:"Uppdaterat kunskapskrav för betyget E",type:"knowledgeRequirements",items:d.filter(function(e){return"E"===e.gradeStep})},f={title:"Uppdaterade förmågor",type:"abilities",items:Object.keys(l||{}).map(function(e){return r.a({},n.abilities.find(function(t){return t.id===e}),l[e])})},v=[m,h,p,{title:"Uppdaterat centralt innehåll",type:"centralContent",items:Object.keys(c||{}).map(function(e){return r.a({},n.centralContent.find(function(t){return t.id==e}),c[e])})},f].filter(function(e){return e.items.length>0});return 0===v.length?a.createElement(a.Fragment,null," "):a.createElement(i.a,{className:"larger",title:a.createElement("div",null,a.createElement("div",{className:"warningFlag"},a.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),a.createElement("p",null,"Uppdaterade formuleringar från Skolverket"))},v.map(function(e){var t=e.title,n=(e.type,e.items);return a.createElement("div",{key:t},a.createElement("h5",null,t),a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{style:{width:"40%"}},"Ursprunglig formulering"),a.createElement("th",{style:{width:"40%"}},"Skolverkets nya formulering"),a.createElement("th",null,"Täcker uppgiften den nya formuleringen?"))),a.createElement("tbody",null,n.map(function(e){return a.createElement("tr",{key:e.id},a.createElement("td",{dangerouslySetInnerHTML:{__html:e.oldText}}),a.createElement("td",{dangerouslySetInnerHTML:{__html:e.name}}),a.createElement("td",null,a.createElement("button",{onClick:function(){return s(e.id,!0)}},"Ja - behåll kopplingen"),a.createElement("button",{onClick:function(){return s(e.id,!1)}},"Nej - ta bort kopplingen")))}))))}))},t}(a.Component)},,,,,function(e,t,n){"use strict";var r=n(1),a=n(0),i=n(2),s=n(3),o=n(10),l=n.n(o);function c(e){switch(e.trim()){case"3":case"1-3":return["1-3"];case"6":case"4-6":return["4-6"];case"7-9":case"9":return["7-9"];case"1":case"1s":return["1-3"];case"1-6":return["1-3","4-6"];case"4-9":return["4-6","7-9"];default:throw new Error("Unexpected year in Skolverket XML: "+e+". Expecting 3,6,9 or 1-3, 4-6, 7-9")}}var u=n(5);function d(e,t){var n,a,i=new Set,s=new Map,o=new Set;t.forEach(function(t){if(t=t.trim(),e.has(t))s.set(t,e.get(t));else{var n=Object(u.h)();console.log("New id: "+n+". Text: "+t),s.set(t,n),o.add(n)}});try{for(var l=r.h(e.entries()),c=l.next();!c.done;c=l.next()){var d=r.f(c.value,2),m=d[0],h=d[1];-1===t.indexOf(m)&&i.add(h)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(a=l.return)&&a.call(l)}finally{if(n)throw n.error}}return{removedIds:i,newTexts:s,idsToAdd:o}}var m=1;var h=new Set("alla allt att av blev bli blir blivit de dem den denna deras dess dessa det detta dig din dina ditt du där då efter ej eller en er era ert ett från för ha hade han hans har henne hennes hon honom hur här i icke ingen inom inte jag ju kan kunde man med mellan men mig min mina mitt mot mycket ni nu när någon något några och om oss på samma sedan sig sin sina sitta själv skulle som så sådan sådana sådant till under upp ut utan vad var vara varför varit varje vars vart vem vi vid vilka vilkas vilken vilket vår våra vårt än är åt över kring".split(" "));function p(e){return new Set(function(e){var t=document.createElement("div");return t.innerHTML=e,""+t.innerText}(e).replace(/[^\w\såäö]/gi,"").toLowerCase().split(/\s/).map(function(e){return e.trim()}).filter(function(e){return!!e}).filter(function(e){return!h.has(e)}))}function f(e,t,n,a,i){var s=new Map;e=e.map(function(e){return r.a({},e,{name:e.name.trim()})}).filter(function(e){return!!e.name});var o=new Map;t.forEach(function(e){return o.set(e.html,e)});var l=new Map;e.forEach(function(e){return l.set(e.name,e)}),e=e.filter(function(e){return!o.has(e.name)}),t=t.filter(function(e){return!l.has(e.html)}),e.forEach(function(e){return s.set(e.id,{gradeStep:e.gradeStep,oldText:e.name,lexemes:p(e.name),matchLevel:0})});for(var c=[];t.length>0;){var u=t[0],d=f(u);if(d){d.newText&&t.push({html:d.newText,gradeStep:d.gradeStep});var h=s.get(d.id);h.newText=u.html,h.matchLevel=d.myMatchLevel,h.newId=n.get(u.html)}else c.push(u);t.shift()}return c.forEach(function(e){s.set("fictiveOldId"+ ++m,{newId:n.get(e.html),newText:e.html,gradeStep:e.gradeStep,matchLevel:0,lexemes:new Set})}),s.forEach(function(e){var t=e.oldText,n=e.newText;t&&n&&r.g(p(t)).join(" ")===r.g(p(n)).join(" ")&&(e.isTypoFix=!0)}),console.log("IdsToMigrate",r.g(s.values()).map(function(e){var t=e.oldText,n=e.lexemes;return r.g(n).join(" ")+": "+t})),s;function f(e){var t=p(e.html);return r.g(s.entries()).filter(function(t){var n=r.f(t,2);n[0];return n[1].gradeStep===e.gradeStep}).map(function(e){var n=r.f(e,2),a=n[0],i=n[1],s=i.gradeStep,o=i.matchLevel,l=i.newText,c=i.lexemes;return{id:a,gradeStep:s,matchLevel:o,newText:l,myMatchLevel:v(t,c)}}).filter(function(e){return e.myMatchLevel>=50&&(!e.matchLevel||e.matchLevel<e.myMatchLevel)}).sort(function(e,t){return t.myMatchLevel-e.myMatchLevel})[0]}function v(e,t){if(0===e.size||0===t.size)return 0;var n=0,r=0;return e.forEach(function(e){t.has(e)&&++n}),t.forEach(function(t){e.has(t)&&++r}),Math.round(100*Math.max(n/e.size,r/t.size))}}function v(e,t,n,a){return r.b(this,void 0,void 0,function(){function o(e,t,r){var i=!Q.has(e.name);Q.add(e.name),F.forEach(function(t,n){var r=t.newId,i=t.oldText;a.push({mutations:function(t){i&&t.unlink2("courses",e.id,"abilities",n),r&&t.link2("courses",e.id,"abilities",r)}})}),e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)});var s=r.ccsToMigrate,o=r.krsToMigrate;s.forEach(function(t,n){var r=t.newId,s=t.newText,o=t.oldText,l=t.isTypoFix;a.push({change:i&&(o?s?l?"Tryckfelsrättning Centralt Innehåll":"Uppdaterat Centralt Innehåll":"Borttaget Centralt Innehåll":"Nytt Centralt Innehåll"),content:"<h4>"+e.name+"</h4><strike>"+(o||"")+"</strike><br/>"+(s||""),mutations:function(t){if(r&&B.has(r)&&!H.has(r)){var a={id:r,name:s,acl:["role:USER:R"],dateTime:Date.now()};t.add("central-content",a),H.add(r)}o&&t.unlink2("courses",e.id,"centralContent",n),r&&t.link2("courses",e.id,"centralContent",r)}})}),e.centralContentOrder=t.centralContent.map(function(e){var t=e.html;return _.get(t)}),o.forEach(function(t,n){var r=t.newId,s=t.newText,o=t.gradeStep,l=t.oldText,c=t.isTypoFix;a.push({change:i&&(l?s?c?"Tryckfelsrättning Kunskapskrav":"Uppdaterat Kunskapskrav":"Borttaget Kunskapskrav":"Nytt Kunskapskrav"),content:"<h4>"+e.name+"</h4><strike>"+(l||"")+"</strike><br/>"+(s||""),mutations:function(t){if(r&&K.has(r)&&!H.has(r)){var a={id:r,name:s,gradeStep:o,acl:["role:USER:R"],dateTime:Date.now()};console.log("Adding Knowledge-Requirement "+r+": "+s),t.add("knowledge-requirements",a),H.add(r)}l&&t.unlink2("courses",e.id,"knowledgeRequirements",n),r&&t.link2("courses",e.id,"knowledgeRequirements",r)}})}),e.knowledgeRequirementsOrder=t.knowledgeRequirements.map(function(e){return z.get(e.html)}),(F.size>0||s.size>0||o.size>0)&&a.push({change:e.isTemplate?"Uppdaterad Kursmall":"Uppdaterad Kursinstans",content:e.isTemplate?""+e.name:e.name+". Skola: "+(e.school||"ej angiven")+". Beskrivning: "+(e.description||""),mutations:function(t){return t.put("courses",e)}})}function l(){return r.b(this,void 0,void 0,function(){function e(e,t){return r.b(this,void 0,void 0,function(){return r.d(this,function(n){switch(n.label){case 0:return 0===e.length?[2,[]]:(new Map,console.log("Number of ids: "+e.length),[4,s.a.kedBackendClient.list("tasks",r.a({},t,{hasEdgesTo:e}))]);case 1:return[2,n.sent()]}})})}var t,n,o,l,c,u,d,m,h;return r.d(this,function(s){switch(s.label){case 0:return o=r.g(F.keys(),Object(i.k)($.map(function(e){return r.g(e.ccsToMigrate.keys(),e.krsToMigrate.keys())}))).filter(function(e){return!e.startsWith("fictiveOldId")}),l=Date.now(),[4,e(o,{include:["abilities","knowledgeRequirements","centralContent"],flags:["includeIdsOnly"]})];case 1:c=s.sent(),u=function(e){var t,n,i,s,o,c,u,d,m=e.migratedTexts||{abilities:{},centralContent:{},knowledgeRequirements:{}};e.migratedTexts={abilities:{},centralContent:{},knowledgeRequirements:{}};var h=[],p=[],f=function(t){var n=F.get(t);if(n){var r=n.newId,a=n.newText,i=n.isTypoFix,s=n.oldText,o=t;m.abilities[t]&&(s=m.abilities[t].oldText,o=m.abilities[t].oldId),r&&s!==a&&(i||(e.migratedTexts.abilities[r]={oldId:o,oldText:s,importDate:l})),h.push(function(n){n.unlink2("tasks",e.id,"abilities",t),r&&n.link2("tasks",e.id,"abilities",r)}),p.push("<strike>"+s+"</strike>"),r&&p.push(a)}};try{for(var v=r.h(e.abilities),g=v.next();!g.done;g=v.next()){f(g.value.id)}}catch(e){t={error:e}}finally{try{g&&!g.done&&(n=v.return)&&n.call(v)}finally{if(t)throw t.error}}var b=new Set(e.tags?e.tags.filter(function(e){return e.startsWith("course:")}).map(function(e){return e.substr("course:".length)}):[]),y=new Set;try{for(var k=r.h($),E=k.next();!E.done;E=k.next()){var w=E.value,C=w.krsToMigrate,S=w.ccsToMigrate,O=w.courseCode;if(0===b.size||b.has(O)){var T=function(t){var n=S.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,s=n.isTypoFix,o=t;m.centralContent[t]&&(i=m.centralContent[t].oldText,o=m.centralContent[t].oldId),r&&i!==a&&(s||(e.migratedTexts.centralContent[r]={oldId:o,oldText:i,importDate:l})),r&&y.has(r)||(h.push(function(n){n.unlink2("tasks",e.id,"centralContent",t),r&&n.link2("tasks",e.id,"centralContent",r)}),p.push("<strike>"+i+"</strike>"),r&&(p.push(a),y.add(r)))}};try{for(var x=r.h(e.centralContent),I=x.next();!I.done;I=x.next()){T(I.value.id)}}catch(e){o={error:e}}finally{try{I&&!I.done&&(c=x.return)&&c.call(x)}finally{if(o)throw o.error}}var N=function(t){var n=C.get(t);if(n){var r=n.newId,a=n.newText,i=n.oldText,s=n.isTypoFix,o=t;m.knowledgeRequirements[t]&&(i=m.knowledgeRequirements[t].oldText,o=m.knowledgeRequirements[t].oldId),r&&i!==a&&(s||(e.migratedTexts.knowledgeRequirements[r]={oldId:o,oldText:i,importDate:l})),r&&y.has(r)||(h.push(function(n){n.unlink2("tasks",e.id,"knowledgeRequirements",t),r&&n.link2("tasks",e.id,"knowledgeRequirements",r)}),p.push("<strike>"+i+"</strike>"),r&&(p.push(a),y.add(r)))}};try{for(var j=r.h(e.knowledgeRequirements),R=j.next();!R.done;R=j.next()){N(R.value.id)}}catch(e){u={error:e}}finally{try{R&&!R.done&&(d=j.return)&&d.call(j)}finally{if(u)throw u.error}}}}}catch(e){i={error:e}}finally{try{E&&!E.done&&(s=k.return)&&s.call(k)}finally{if(i)throw i.error}}a.push({change:"Migrerad Uppgift",content:"<h4>"+e.name+" "+(e.school?"("+e.school+") ":"(skola ej angiven)")+"</h4>\n          <p>Kurskod: "+r.g(b).join(",")+"</p>\n          "+p.map(function(e){return"<p>"+e+"</p>"}).join(""),mutations:function(t){t.put("tasks",e),h.forEach(function(e){return e(t)})}})};try{for(d=r.h(c),m=d.next();!m.done;m=d.next())h=m.value,u(h)}catch(e){t={error:e}}finally{try{m&&!m.done&&(n=d.return)&&n.call(d)}finally{if(t)throw t.error}}return[2]}})})}var c,u,m,h,p,v,g,b,y,k,E,w,C,S,O,T,x,I,N,j,R,D,U,M,A,P,L,_,B,q,z,K,F,$,H,Q,V,Y,G,W,J,X;return r.d(this,function(s){switch(s.label){case 0:E=new Map,w=e.abilitiesOrder?e.abilitiesOrder.map(function(t){return e.abilities.find(function(e){return e.id===t})}):e.abilities;try{for(C=r.h(w),S=C.next();!S.done;S=C.next())O=S.value,E.set(O.name.trim(),O.id)}catch(e){c={error:e}}finally{try{S&&!S.done&&(u=C.return)&&u.call(C)}finally{if(c)throw c.error}}try{for(T=r.h(t),x=T.next();!x.done;x=T.next()){J=x.value.template;try{for(I=r.h(J.centralContent),N=I.next();!N.done;N=I.next())j=N.value,E.set(j.name.trim(),j.id)}catch(e){p={error:e}}finally{try{N&&!N.done&&(v=I.return)&&v.call(I)}finally{if(p)throw p.error}}try{for(R=r.h(J.knowledgeRequirements),D=R.next();!D.done;D=R.next())U=D.value,E.set(U.name.trim(),U.id)}catch(e){g={error:e}}finally{try{D&&!D.done&&(b=R.return)&&b.call(R)}finally{if(g)throw g.error}}}}catch(e){m={error:e}}finally{try{x&&!x.done&&(h=T.return)&&h.call(T)}finally{if(m)throw m.error}}M=d(E,n.abilities),A=M.newTexts,P=M.idsToAdd,L=d(E,Object(i.k)(n.courses.map(function(e){return e.centralContent.map(function(e){return e.html})}))),_=L.newTexts,B=L.idsToAdd,q=d(E,Object(i.k)(n.courses.map(function(e){return e.knowledgeRequirements.map(function(e){return e.html})}))),z=q.newTexts,K=q.idsToAdd,console.log("Abilities to add: "+P.size),console.log("CCs to add: "+B.size),console.log("KRs to add: "+K.size),F=f(w,n.abilities.map(function(e){return{html:e}}),A),$=t.map(function(e,t){var r=e.template;console.log("Course: "+r.name);var a=n.courses.find(function(e){return e.name===r.name})||n.courses.find(function(e){return e.code===r.code});return{courseCode:r.code,ccsToMigrate:a?f(r.centralContent,a.centralContent.map(function(e){return{html:e.html}}),_,0,r.name):new Map,krsToMigrate:a?f(r.knowledgeRequirements,a.knowledgeRequirements,z,0,r.name):new Map}}),F.forEach(function(t,n){var r=t.newText,i=t.newId,s=t.oldText,o=t.isTypoFix;a.push({change:s?r?o?"Tryckfelsrättning Förmåga":"Uppdaterad Förmåga":"Borttagen Förmåga":"Ny Förmåga",content:"<strike>"+(s||"")+"</strike><br/>"+(r||""),mutations:function(t){if(i&&P.has(i)){var a={id:i,name:r,acl:["role:USER:R"],dateTime:Date.now()};t.add("abilities",a)}s&&t.unlink2("subjects",e.id,"abilities",n),i&&t.link2("subjects",e.id,"abilities",i)}})}),(!e.abilitiesOrder||F.size>0)&&(e.abilitiesOrder=n.abilities.map(function(e){return A.get(e)}),a.push({mutations:function(t){return t.put("subjects",e)},change:e.abilitiesOrder?null:"Inför en ordnad lista på förmågor i databasen"})),H=new Set,a.push({mutations:function(){return H.clear()}}),Q=new Set,a.push({mutations:function(){return Q.clear()}}),V=function(e,t){var a,i,s=n.courses.find(function(t){return t.name===e.name})||n.courses.find(function(t){return t.code===e.code}),l=$.find(function(t){return t.courseCode===e.code}),c=l.ccsToMigrate,u=l.krsToMigrate;try{for(var d=r.h(t),m=d.next();!m.done;m=d.next()){o(m.value,s,{ccsToMigrate:c,krsToMigrate:u})}}catch(e){a={error:e}}finally{try{m&&!m.done&&(i=d.return)&&i.call(d)}finally{if(a)throw a.error}}};try{for(Y=r.h(t),G=Y.next();!G.done;G=Y.next())W=G.value,J=W.template,X=W.instances,V(J,X)}catch(e){y={error:e}}finally{try{G&&!G.done&&(k=Y.return)&&k.call(Y)}finally{if(y)throw y.error}}return[4,l()];case 1:return s.sent(),[2]}})})}var g=n(18);function b(e,t,n){return r.b(this,void 0,void 0,function(){var a,i,o=this;return r.d(this,function(l){switch(l.label){case 0:return[4,s.a.kedBackendClient.get("subjects",e.id,{include:["courseTemplates","abilities"]})];case 1:return e=l.sent(),[4,Promise.all(e.courseTemplates.map(function(e){return Object(g.e)(e.id,{include:["centralContent","knowledgeRequirements"]})}))];case 2:return a=l.sent(),console.log("Subject: "+e.name+". Courses: "+a.map(function(e){return e.name})),[4,Promise.all(a.map(function(e){return r.b(o,void 0,void 0,function(){var t;return r.d(this,function(n){switch(n.label){case 0:return t={template:e},[4,s.a.kedBackendClient.list("courses",{name:e.name,include:["abilities"],flags:["includeIdsOnly"]})];case 1:return[2,(t.instances=n.sent(),t)]}})})}))];case 3:return i=l.sent(),[4,v(e,i,t,n)];case 4:return l.sent(),[2]}})})}var y,k,E,w=function(e){function t(t){var n=e.call(this,t)||this;return n.coursesElems={},n.centralContentElems=[],n.knowledgeRequirementElems=[],n.state={showFullText:!1,changes:[],isWorking:!0,isImporting:!1},n}return r.c(t,e),t.prototype.componentDidMount=function(){return r.b(this,void 0,void 0,function(){var e,t,n,a;return r.d(this,function(r){switch(r.label){case 0:this.addClassesForCherryPickedElements(),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,this.diffWithExisting()];case 2:return e=r.sent(),t=e.changes,n=e.subjectToImport,this.setState({changes:t,subjectToImport:n}),[3,5];case 3:return a=r.sent(),this.setState({error:""+a}),[3,5];case 4:return this.setState({isWorking:!1}),[7];case 5:return[2]}})})},t.prototype.addClassesForCherryPickedElements=function(){var e=l()(this.purposeElem).find("li").first().parent().children("li");e.addClass("ability");var t=l()(this.centralContentElems).find("li");t.addClass("central-content");var n=l()(this.knowledgeRequirementElems).find("p");n.addClass("knowledge-requirement"),l()([e,t,n]).addClass("marked-area")},t.prototype.cherryPickData=function(){var e=this,t=this.props.subject,n=Array.from(l()(this.purposeElem).find("li").first().parent().children("li")).map(function(e,t){return(t+1+". "+l()(e).html()).trim()}).filter(function(e){return!!e});return{name:t.name,code:t.code,schoolType:t.schoolType,abilities:n,courses:Object.keys(this.coursesElems).map(function(t){return e.coursesElems[t]}).map(function(e){var t=e.course,n=e.elem;return{name:t.name,year:t.year,code:t.code,points:t.points,centralContent:Array.from(l()(n).find(".central-content")).map(function(e){return{html:l()(e).html().trim(),group:l()(e).parent("ul").prev("h4").text().trim()}}).filter(function(e){return!!e.html}),knowledgeRequirements:Array.from(l()(n).find(".grade-step-none .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:null,html:e}}).concat(Array.from(l()(n).find(".grade-step-E .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"E",html:e}}).concat(Array.from(l()(n).find(".grade-step-C .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"C",html:e}})).concat(Array.from(l()(n).find(".grade-step-A .knowledge-requirement")).map(function(e){return l()(e).html().trim()}).filter(function(e){return!!e}).map(function(e){return{gradeStep:"A",html:e}})))}})}},t.prototype.diffWithExisting=function(){return r.b(this,void 0,void 0,function(){function e(){var e=p;return p+=2,e}var t,n,a,i,o,l,c,d,m,h,p,f,v,g,y,k,E,w,C,S,O,T=this;return r.d(this,function(x){switch(x.label){case 0:return o=this.cherryPickData(),l=[],[4,s.a.kedBackendClient.list("subjects")];case 1:return c=x.sent(),d=c.filter(function(e){return e.code===T.props.subject.code})[0],m=[],h=[],p=Date.now(),d?[4,b(d,o,l)]:[3,3];case 2:return x.sent(),[3,4];case 3:f=d={id:Object(u.h)(),schoolType:o.schoolType,tags:["schoolType:"+o.schoolType],acl:["role:USER:R"],code:o.code,name:o.name,abilitiesOrder:[],publishable:!1,dateTime:e()},l.push({change:"Nytt ämne",content:o.name+" ("+o.code+")",mutations:function(e){return e.add("subjects",f)}}),v=[],g=function(t){var n={id:Object(u.h)(),name:t,acl:["role:USER:R"],dateTime:e()};v.push(n),l.push({change:"Ny förmåga",content:t,mutations:function(e){e.add("abilities",n),e.link("subjects",f.id,"abilities",n.id,"abilities")}})};try{for(y=r.h(o.abilities),k=y.next();!k.done;k=y.next())E=k.value,g(E)}catch(e){t={error:e}}finally{try{k&&!k.done&&(n=y.return)&&n.call(y)}finally{if(t)throw t.error}}f.abilitiesOrder=v.map(function(e){return e.id}),w=function(t){var n,a,i,o,c,d,p={id:Object(u.h)(),subjectCode:f.code,schoolType:f.schoolType,tags:["sub:"+f.code,"course:"+t.code,"schoolType:"+f.schoolType],dateTime:e(),isTemplate:!0,acl:["role:EMPLOYEE:R"],name:t.name,code:t.code,points:t.points,modules:[],subjectId:f.id,resources:[],createdBy:{name:s.a.currentUser.displayName,url:"mailto:"+s.a.currentUser.mail},createdDate:Date.now(),knowledgeRequirementsOrder:[],centralContentOrder:[],abilitiesOrder:v.map(function(e){return e.id})};t.year&&(p.schoolGrade=t.year),l.push({change:"Ny kurs",content:t.name,mutations:function(e){e.add("courses",p),e.link("subjects",f.id,"courses",p.id,"courseTemplates")}});var g=function(t,n){var r=m.filter(function(e){return e.name===n})[0];r?l.push({mutations:function(e){e.link("courses",p.id,"central-content",r.id,"centralContent")}}):(r={id:Object(u.h)(),dateTime:e(),name:n,acl:["role:USER:R"]},t&&(r.group=t),m.push(r),l.push({change:"Nytt centralt innehåll",content:"<h4>"+t+"</h4>"+n,mutations:function(e){e.add("central-content",r),e.link("courses",p.id,"central-content",r.id,"centralContent")}})),p.centralContentOrder.push(r.id)};try{for(var b=r.h(t.centralContent),y=b.next();!y.done;y=b.next()){var k=y.value;g(k.group,k.html)}}catch(e){n={error:e}}finally{try{y&&!y.done&&(a=b.return)&&a.call(b)}finally{if(n)throw n.error}}var E=function(t){var n=h.filter(function(e){return e.name===t.html&&e.gradeStep===t.gradeStep})[0];n?l.push({mutations:function(e){e.link("courses",p.id,"knowledge-requirements",n.id,"knowledgeRequirements")}}):(n={id:Object(u.h)(),dateTime:e(),name:t.html,gradeStep:t.gradeStep,acl:["role:USER:R"]},h.push(n),l.push({change:"Nytt kunskapskrav för betyget "+t.gradeStep,content:t.html,mutations:function(e){e.add("knowledge-requirements",n),e.link("courses",p.id,"knowledge-requirements",n.id,"knowledgeRequirements")}})),p.knowledgeRequirementsOrder.push(n.id)};try{for(var w=r.h(t.knowledgeRequirements),C=w.next();!C.done;C=w.next()){E(C.value)}}catch(e){i={error:e}}finally{try{C&&!C.done&&(o=w.return)&&o.call(w)}finally{if(i)throw i.error}}var S=function(e){l.push({mutations:function(t){t.link("courses",p.id,"abilities",e.id,"abilities")}})};try{for(var O=r.h(v),T=O.next();!T.done;T=O.next()){S(T.value)}}catch(e){c={error:e}}finally{try{T&&!T.done&&(d=O.return)&&d.call(O)}finally{if(c)throw c.error}}};try{for(C=r.h(o.courses),S=C.next();!S.done;S=C.next())O=S.value,w(O)}catch(e){a={error:e}}finally{try{S&&!S.done&&(i=C.return)&&i.call(C)}finally{if(a)throw a.error}}x.label=4;case 4:return[2,{changes:l,subjectToImport:o}]}})})},t.prototype.cancel=function(){this.props.onCancel()},t.prototype.import=function(){return r.b(this,void 0,void 0,function(){var e;return r.d(this,function(t){switch(t.label){case 0:this.setState({isWorking:!0,isImporting:!0}),e=this.state.changes.map(function(e){return e.mutations}),t.label=1;case 1:return t.trys.push([1,,3,4]),[4,s.a.kedBackendClient.do(function(t){e.forEach(function(e){return e(t)})})];case 2:return t.sent(),[3,4];case 3:return this.setState({isWorking:!1,isImporting:!1}),[7];case 4:return this.props.onImportSuccess(this.props.subject.name),[2]}})})},t.prototype.fixL=function(e){return e},t.prototype.render=function(){var e=this,t=this.state.subjectToImport,n=this.props.subject;return a.createElement("div",null,a.createElement("h1",null,Object(i.a)(y||(y=r.e(["Uppladdat Ämne ",""],["Uppladdat Ämne ",""])),t?t.name:"")),this.state.error?a.createElement("p",null,"Fel: ",this.state.error):this.state.isWorking?a.createElement("p",null,"Arbetar..."):this.state.isImporting?a.createElement("p",null,"Importerar..."):this.state.changes.every(function(e){return!e.change})?a.createElement("div",null,a.createElement("p",null,"Kunde inte finna några förändringar från befintligt data. Klicka OK för att avbryta och återgå."),a.createElement("button",{onClick:function(){return e.cancel()}}," OK ")):a.createElement("div",null,a.createElement("table",{style:{border:"1px solid gray",padding:"2px"}},a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",{colSpan:2},"Granskning av ändringar i grund-data")),a.createElement("tr",null,a.createElement("th",null,"Ändring"),a.createElement("th",null,"Innehåll"))),a.createElement("tbody",null,this.state.changes.filter(function(e){return e.change}).map(function(e,t){return a.createElement("tr",{key:t},a.createElement("td",{style:{padding:"2px"}},e.change),a.createElement("td",{style:{padding:"2px"},dangerouslySetInnerHTML:{__html:e.content}}))}))),a.createElement("button",{onClick:function(){return e.cancel()},disabled:this.state.isImporting},"Avbryt"),a.createElement("button",{onClick:function(){return e.import()},disabled:this.state.isImporting},"Importera"),a.createElement("br",null)),a.createElement("button",{onClick:function(){return e.setState({showFullText:!e.state.showFullText})}},this.state.showFullText?Object(i.a)(k||(k=r.e(["Dölj nedan"],["Dölj nedan"]))):Object(i.a)(E||(E=r.e(["Visa hela texten från Skolverket"],["Visa hela texten från Skolverket"])))),a.createElement("table",{style:{display:this.state.showFullText?"":"none"}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Namn"),a.createElement("td",null,n.name)),a.createElement("tr",null,a.createElement("th",null,"Ämneskod"),a.createElement("td",null,n.code)),a.createElement("tr",null,a.createElement("th",null,"Syfte"),a.createElement("td",{ref:function(t){return e.purposeElem=t},dangerouslySetInnerHTML:{__html:this.fixL(n.purpose)}})),a.createElement("tr",null,a.createElement("th",null,"Kurser"),a.createElement("td",null,n.courses.map(function(t){return a.createElement("table",{key:t.code,ref:function(n){return e.coursesElems[t.code]={course:t,elem:n}}},a.createElement("tbody",null,a.createElement("tr",null,a.createElement("th",null,"Kursens namn"),a.createElement("td",null,t.name)),a.createElement("tr",null,a.createElement("th",null,"Kurskod"),a.createElement("td",null,t.code)),a.createElement("tr",null,a.createElement("th",null,"Poäng"),a.createElement("td",null,t.points)),a.createElement("tr",null,a.createElement("th",null,"Centralt innehåll"),a.createElement("td",{ref:function(t){return e.centralContentElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.centralContent)}})),t.knownledgeRequirements.some(function(e){return!e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav utan betygsättning"),a.createElement("td",{className:"grade-step-none",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return!e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"E"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg E"),a.createElement("td",{className:"grade-step-E",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"E"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"C"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg C"),a.createElement("td",{className:"grade-step-C",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"C"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0,t.knownledgeRequirements.some(function(e){return"A"===e.gradeStep})?a.createElement("tr",null,a.createElement("th",null,"Kunskapskrav Betyg A"),a.createElement("td",{className:"grade-step-A",ref:function(t){return e.knowledgeRequirementElems.push(t)},dangerouslySetInnerHTML:{__html:e.fixL(t.knownledgeRequirements.filter(function(e){return"A"===e.gradeStep}).map(function(e){return e.text}).join(""))}})):void 0))}))))))},t}(a.Component),C=(n(88),n(13)),S=n(15);n.d(t,"a",function(){return j});var O,T,x,I,N,j=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,gymnasiumSubjects:[],primarySchoolSubjects:[],uploadedSubject:null},n}return r.c(t,e),t.prototype.componentWillMount=function(){this.load()},t.prototype.load=function(){return r.b(this,void 0,void 0,function(){var e,t,n;return r.d(this,function(r){switch(r.label){case 0:return[4,s.a.kedBackendClient.list("subjects")];case 1:return(e=r.sent()).sort(Object(i.g)("name")),t=e.filter(function(e){return"primary"!==e.schoolType}),n=e.filter(function(e){return"primary"===e.schoolType}),this.setState({gymnasiumSubjects:t,primarySchoolSubjects:n,isListingSubjects:!1}),[2]}})})},t.prototype.handleFileSelect=function(e){return r.b(this,void 0,void 0,function(){var t,n,a,s,o,u,d,m,h,p,f,v,b,y,k,E,w;return r.d(this,function(C){switch(C.label){case 0:return e.stopPropagation(),e.preventDefault(),t=e.dataTransfer.files,[4,Object(g.f)(t[0])];case 1:if(n=C.sent(),a=l()(l.a.parseXML(n)),s=a.find("subject>originatorTypeOfSchooling").text().trim()||a.find("subject>typeOfSchooling").text().trim(),"gymnasium"===("COMPULSORY_SCHOOL"===s?"primary":"UPPER_SECONDARY_EDUCATION"===s?"gymnasium":null)){for(w={name:a.find("subject>name").text().trim(),code:a.find("subject>code").text().trim(),purpose:a.find("subject>purpose").text().trim(),courses:[],schoolType:"gymnasium"},o=a.find("subject>courses"),u=0;u<o.length;++u)d=l()(o[u]),m=[].slice.call(d.find("knowledgeRequirements")).map(function(e){return{gradeStep:l()(e).find("gradeStep").text().trim(),text:l()(e).find("text").text().trim()}}),w.courses.push({name:d.find("name").text().trim(),code:d.find("code").text().trim(),centralContent:d.find("centralContent").text().trim(),points:parseInt(d.find("point").text().trim()),knownledgeRequirements:m});this.setState({uploadedSubject:w})}else h=Object(i.k)(Array.from(a.find("subject>centralContent")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfCentralContent").text().trim())throw new Error(Object(i.a)(O||(O=r.e(["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av centralt innehåll. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim()}})})),p=Object(i.k)(Array.from(a.find("subject>knowledgeRequirement")).map(function(e){var t=l()(e).find("year").text().trim();if(l()(e).find("typeOfRequirement").text().trim())throw new Error(Object(i.a)(T||(T=r.e(["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."],["Ämnet innehåller flera parallella typer av kunskapskrav. Detta stöds ännu inte."]))));return c(t).map(function(t){return{year:t,text:l()(e).find("text").text().trim(),gradeStep:l()(e).find("gradeStep").text().trim()}})})),f=Object(i.b)(h,function(e){return e.year}),v=Object(i.b)(p,function(e){return e.year}),b=a.find("subject>name").text().trim(),y=a.find("subject>code").text().trim(),k=a.find("subject>purpose").text().trim(),E=["1-3","4-6","7-9"].map(function(e){return{name:b+" "+e,code:y+"|"+e,points:0,year:e,centralContent:(f[e]||[]).map(function(e){return e.text}).join("\n"),knownledgeRequirements:(v[e]||[]).map(function(e){return{gradeStep:e.gradeStep,text:e.text}})}}),w={name:b,code:y,purpose:k,schoolType:"primary",courses:E},this.setState({uploadedSubject:w});return[2]}})})},t.prototype.onImportSuccess=function(e){Object(i.o)(Object(i.a)(x||(x=r.e(["Importen av "," lyckades"],["Importen av "," lyckades"])),e)),this.setState({uploadedSubject:null}),this.load()},t.prototype.render=function(){var e=this,t=this.props.linkPrefix;return a.createElement("div",null,this.state.uploadedSubject?a.createElement(w,{onCancel:function(){return e.setState({uploadedSubject:null})},onImportSuccess:function(t){return e.onImportSuccess(t)},subject:this.state.uploadedSubject}):this.state.isListingSubjects?a.createElement("div",null,a.createElement("p",null,a.createElement(S.a,null),"Var god vänta medan ämnen hämtas...")):a.createElement("div",null,a.createElement("h2",null,Object(i.a)(I||(I=r.e(["Gymnasieämnen"],["Gymnasieämnen"])))),a.createElement("ul",null,this.state.gymnasiumSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(C.b,{to:t+e.id},e.name))})),a.createElement("h2",null,Object(i.a)(N||(N=r.e(["Grundskoleämnen"],["Grundskoleämnen"])))),a.createElement("ul",null,this.state.primarySchoolSubjects.map(function(e){return a.createElement("li",{key:e.id,className:e.publishable?"complete":"incomplete"},a.createElement(C.b,{to:t+e.id},e.name))})),a.createElement("div",{className:"drop-zone",onDragOver:g.a,onDrop:function(t){return e.handleFileSelect(t)}},"Droppa Subject-fil här från skolverket (Hämtas från ",a.createElement("a",{href:"http://opendata.skolverket.se",target:"skolverket"},"opendata.skolverket.se"),")")))},t}(a.Component)},,,function(e,t,n){var r={"./en-au":72,"./en-au.js":72,"./en-ca":73,"./en-ca.js":73,"./en-gb":74,"./en-gb.js":74,"./en-ie":75,"./en-ie.js":75,"./en-nz":76,"./en-nz.js":76,"./sv":77,"./sv.js":77};function a(e){var t=i(e);return n(t)}function i(e){var t=r[e];if(!(t+1)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=108},,function(e,t,n){"use strict";var r=n(3),a=n(63),i=n(17),s=Object(i.b)(location.search).user;if(s){var o=a.a.find(function(e){return e.username===s});o&&(r.a.currentUser=o)}var l=Object(i.b)(location.search),c=l.role,u=l.school;r.a.currentUser&&(c&&(r.a.currentUser.roles=c.split(",")),u&&(r.a.currentUser.school=u))},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";var r,a,i,s=n(1),o=n(0),l=n(2),c=n(13),u=n(65),d=n(95),m=n(85),h=function(e){return o.createElement(m.a,{title:Object(l.a)(r||(r=s.e(["Lägg till skola"],["Lägg till skola"]))),type:e.type,feedbackUrl:e.feedbackUrl})},p=n(3),f=n(88),v=n(40),g=n(105),b=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isListingSubjects:!0,primarySchoolSubjects:[],uploadedSubject:null},n}return s.c(t,e),t.prototype.render=function(){return o.createElement("div",null,o.createElement(v.a,{title:Object(l.a)(a||(a=s.e(["Ämnen"],["Ämnen"]))),activePage:"subjects",routes:{feedback:this.props.feedbackUrl}}),o.createElement(g.a,{linkPrefix:"/subjects/"}))},t}(o.Component),y=n(42),k=n(5),E=n(18),w=n(86),C=n.n(w),S=function(e){function t(t){var n=e.call(this,t)||this;return n.state=n.props.resource||{name:"",url:""},n}return s.c(t,e),t.prototype.save=function(){var e=this.state;if(!C.a.isUri(e.url))throw new Error(Object(l.a)(i||(i=s.e(["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"],["Angiven URL '","' är ogiltig. Ska börja med exempelvis http:, https: eller mailto:"])),e.url));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.title,r=t.onSave,a=t.onDelete,i=this.state,s=C.a.isUri(this.state.url);return o.createElement("div",null,o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("h2",null,n),o.createElement("hr",null),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Namn:"),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",autoFocus:!0,tabIndex:1,size:50,value:i.name,onChange:function(t){return e.setState({name:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Länk:"),o.createElement("div",{className:"horizontalItem top "},o.createElement("input",{type:"text",tabIndex:1,size:50,value:i.url,onChange:function(t){return e.setState({url:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("br",null)),o.createElement("div",{className:"sv-html-portlet sv-portlet"},(i.createdDate||i.modifiedDate)&&o.createElement("div",null,i.createdDate&&o.createElement("p",null,"Resursen/Länken skapades ",Object(E.c)(i.createdDate)," av ",o.createElement("strong",null,i.createdBy.name),"."),i.modifiedDate&&o.createElement("p",null,"Resursen/Länken redigerades senast ",Object(E.c)(i.modifiedDate)," av ",o.createElement("strong",null,i.modifiedBy.name),"."),o.createElement("br",null),o.createElement("br",null)),a&&o.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return a()}},"Ta bort resurs/länk"),o.createElement("a",{tabIndex:1,className:"btn btn-large"+(s?"":" btn-inactive"),onClick:s&&function(){return r(i)}},"Spara")))},t}(o.Component),O=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return s.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.resources;return o.createElement("div",null,o.createElement("div",{className:"taskContainer"},r.map(function(e,r){return o.createElement("div",{className:"align-horizontal",key:r},o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:S,props:{title:"Redigera resurs",resource:e,onSave:function(e){var a=Object(E.l)(e,p.a.currentUser);n({$splice:[[r,1,a]]}),t.closeDialog()},onDelete:function(){n({$splice:[[r,1]]}),t.closeDialog()}}})}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{href:e.url,target:"_blank"},e.name)))})),o.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:S,props:{title:"Lägg till resurs",onSave:function(e){var r=Object(E.l)(e,p.a.currentUser);n({$push:[r]}),t.closeDialog()}}})}},o.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Lägg till resurs"))},t}(o.Component),T=n(68),x=n(44),I=n.n(x),N=n(14),j=n(56),R=function(){function e(e){this.queryer=e,this.promise=null,this.result=null}return e.prototype.query=function(){var e=this;return this.promise?this.promise:this.promise=this.queryer().then(function(t){return e.result=t})},e.prototype.reset=function(){this.promise=null},e}(),D=n(91),U=n(15),M=n(67);function A(e){var t=e.searchMarkedIds,n=e.searchResult,r=e.task,a=e.editTask;e.writeAccess,e.taskCustomization;return o.createElement("div",{className:"task-search-result"+(a.state.task||a.state.previewTaskContent?"":" fixed")},0===t.length?o.createElement("h2",null,"Samtliga uppgifter för kursen"):o.createElement("h2",null,"Uppgifter som täcker valda filter"),o.createElement("table",null,o.createElement("tbody",null,n.filter(r?function(e){return e.id===r.id}:function(){return!0}).map(function(e){return o.createElement(o.Fragment,{key:e.id},o.createElement("tr",null,o.createElement("td",null,o.createElement("div",{tabIndex:1,className:"checkBox"+(r&&r.id===e.id?" checked":""),onClick:function(){return i(e)}})),o.createElement("td",null,e.content?o.createElement("a",{href:"#",onClick:function(t){i(e),t.preventDefault(),t.stopPropagation()}},e.name):o.createElement("a",{href:e.url,target:"_blank"},e.name)),o.createElement("td",null,Object(E.h)(e.modifiedBy.name)),o.createElement("td",null,e.school||"Standard"),o.createElement("td",null,Object(E.g)(e.modifiedDate))))}))),o.createElement("br",null),o.createElement("hr",null));function i(e){r&&r.id===e.id?a.updateSearchMarkedIds(t):(Object(y.findDOMNode)(a).parentElement.scrollTop=0,a.setStatePromised({task:e,previewTaskContent:null}))}}var P=n(78),L=n(6),_=n.n(L),B=n(100);function q(e){var t=e.task,n=e.course,r=e.writeAccess,a=(e.features,e.editTask);return o.createElement("div",null,o.createElement("h2",null,"Uppgiftens namn och länk"),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"Uppgiftens namn:")),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{autoFocus:!0,type:"text",size:35,value:t.name,disabled:!r,readOnly:!r,onChange:function(e){var n=s.a({},t);n.name=e.target.value,a.setStatePromised({task:n})}}))),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"URL:")),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{type:"text",size:35,value:t.url,disabled:!r,readOnly:!r,onChange:function(e){var n=s.a({},t);n.url=e.target.value,a.setStatePromised({task:n})}}))),t.migratedTexts&&r&&o.createElement(B.a,{task:t,course:n,updateLink:function(e,t){return a.updateLink(e,t)}}),o.createElement(o.Fragment,null,o.createElement("h2",null,"Inlämningsuppgift"),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{className:"checkBox"+(a.getTaskProp("assignment")?" checked":""),onClick:function(){a.updateTaskOrCustomization("assignment",{$set:!a.getTaskProp("assignment")})}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"Den här uppgiften är en inlämningsuppgift"))),a.getTaskProp("assignment")&&o.createElement(o.Fragment,null,o.createElement("p",null,"Inlämningsdatum"),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},o.createElement(P.a,{selected:a.getTaskProp("deadline")&&_()(a.getTaskProp("deadline")),dateFormat:"YYYY-MM-DD",locale:"sv",popperPlacement:"bottom-start",onChange:function(e){a.updateTaskOrCustomization("deadline",{$set:e.format("YYYY-MM-DD")})}})),o.createElement("div",{className:"horizontalItem top"},a.getTaskProp("deadline")&&o.createElement("a",{className:"deleteDate",href:"#",title:"Ta bort inlämningsdatum",onClick:function(e){e.preventDefault(),a.updateTaskOrCustomization("deadline",{$set:null})}}))))))}function z(e){var t=e.task;return o.createElement(o.Fragment,null,o.createElement("h3",null,"Uppgiftens status"),t.createdBy&&t.createdDate&&o.createElement("p",null,"Uppgiften skapades ",Object(E.c)(t.createdDate)," av ",o.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&o.createElement("p",null,"Uppgiften redigerades senast ",Object(E.c)(t.modifiedDate)," av ",o.createElement("strong",null,t.modifiedBy.name),"."))}function K(e){var t=e.writeAccess,n=e.editTask;return o.createElement(o.Fragment,null,!!n.props.onDelete&&o.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onDelete()}},"Ta bort från kursmodul"),o.createElement("div",{className:"pull-right"}," "),o.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return n.props.onCancel()}},"Avbryt"),o.createElement("div",{className:"btn btn-large",onClick:function(){return n.save().catch(l.n)}},"Spara"),!t&&o.createElement("div",{className:"btn btn-large",onClick:function(){return n.copyTask().catch(l.n)}},"Skapa kopia av den här uppgiften"))}var F=n(50),$=n(48);function H(e){var t=e.writeAccess,n=e.task,r=e.editTask;return o.createElement(o.Fragment,null,o.createElement("h3",null,"Uppgiftens innehåll"),t&&o.createElement("p",null,"Om uppgiften inte länkar till något dokument kan du lägga innehåll här."),o.createElement(F.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],defaultActions:$.a,readOnly:!t,html:n.content,onChange:function(e){var t=s.a({},n);t.content=e,r.setState({task:t})}}))}function Q(e){var t=e.writeAccess,n=e.task,r=e.taskCustomization,a=e.editTask;return o.createElement(o.Fragment,null,o.createElement(o.Fragment,null,o.createElement("h3",null,"Uppgiftens lärandemål"),o.createElement("div",null,o.createElement("textarea",{className:"inputTextBox learning-goal-box",disabled:!t,value:n.learningGoal,onChange:function(e){var t=s.a({},n);t.learningGoal=e.target.value,a.setStatePromised({task:t})}}))),o.createElement("br",null),o.createElement(o.Fragment,null,(t||!!n.content)&&o.createElement(H,{writeAccess:t,task:n,editTask:a})),o.createElement(o.Fragment,null,r&&r.resources?o.createElement("h3",null,"Resurser för uppgiften (modifierad för denna kursinstans)"):o.createElement("h3",null,"Resurser kopplade till uppgiften"),o.createElement(O,{resources:r&&r.resources||n.resources,host:a.props.host,onUpdate:function(e){a.updateTaskOrCustomization("resources",e)}})))}var V,Y,G,W,J,X,Z,ee,te,ne,re,ae,ie,se,oe,le,ce,ue,de,me,he,pe,fe,ve,ge=function(e){function t(t){var n=e.call(this,t)||this;n.features=new M.a;var r=!t.task||Object(N.c)(p.a.currentUser,t.task);return n.state={title:t.task?r?Object(l.a)(V||(V=s.e(['Redigera uppgift till "','"'],['Redigera uppgift till "','"'])),t.module.name):Object(l.a)(Y||(Y=s.e(['Visa uppgift till "','"'],['Visa uppgift till "','"'])),t.module.name):t.searchMode?Object(l.a)(G||(G=s.e(['Sök ny uppgift till "','"'],['Sök ny uppgift till "','"'])),t.module.name):Object(l.a)(W||(W=s.e(['Lägg till egen uppgift till "','"'],['Lägg till egen uppgift till "','"'])),t.module.name),futureAbilitiesOpen:!1,taskCustomization:t.taskCustomization||{},task:t.task?s.a({$meta:t.task.$meta||"update"},t.task):t.searchMode?null:{id:Object(k.h)(),$meta:"add",tags:["sub:"+t.course.subjectCode,"course:"+t.course.code],school:!t.course.isTemplate&&p.a.currentUser.school,resources:[],abilities:[],centralContent:[],futureAbilities:[],knowledgeRequirements:[],name:"",url:"",acl:t.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+p.a.currentUser.school+"/EMPLOYEE:S"]},searchMarkedIds:t.searchMode&&[],searchResult:t.searchMode&&[],isSearching:t.searchMode},t.searchMode&&(n.searchResponse=new R(function(){return p.a.kedBackendClient.list("tasks",{tags:"course:"+t.course.code,include:["knowledgeRequirements","abilities","centralContent"],flags:["includeIdsOnly"]})})),n}return s.c(t,e),t.prototype.setStatePromised=function(t){var n=this;return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentDidMount=function(){return s.b(this,void 0,void 0,function(){var e;return s.d(this,function(t){switch(t.label){case 0:if(!this.props.searchMode)return[3,8];this.setStatePromised({isSearching:!0}),t.label=1;case 1:return t.trys.push([1,5,6,8]),[4,this.searchResponse.query()];case 2:return t.sent(),this.state.searchMarkedIds&&0===this.state.searchMarkedIds.length?[4,this.updateSearchResult(this.state.searchMarkedIds)]:[3,4];case 3:t.sent(),t.label=4;case 4:return[3,8];case 5:return e=t.sent(),Object(l.n)(e),[3,8];case 6:return[4,this.setStatePromised({isSearching:!1})];case 7:return t.sent(),[7];case 8:return[2]}})})},t.prototype.updateSearchMarkedIds=function(e){return s.b(this,void 0,void 0,function(){var t;return s.d(this,function(n){switch(n.label){case 0:return t=this.setStatePromised({task:null,searchMarkedIds:e,previewTaskContent:null}),this.searchResponse.result?[3,3]:[4,this.searchResponse.promise];case 1:return n.sent(),[4,t];case 2:n.sent(),e=this.state.searchMarkedIds,n.label=3;case 3:return[4,this.updateSearchResult(e)];case 4:return n.sent(),[2]}})})},t.prototype.updateSearchResult=function(e){return s.b(this,void 0,void 0,function(){var t,n;return s.d(this,function(r){switch(r.label){case 0:return[4,this.searchResponse.query()];case 1:return t=r.sent(),n=t.filter(function(t){return e.every(function(e){return t.knowledgeRequirements.some(function(t){return t.id===e})||t.abilities.some(function(t){return t.id===e})||t.centralContent.some(function(t){return t.id===e})})}),this.setStatePromised({searchResult:n}),[2]}})})},t.prototype.onMarkChanged=function(e,t){if(this.props.searchMode){var n=this.state.searchMarkedIds;this.updateSearchMarkedIds(t?n.concat(e):n.filter(function(t){return t!==e})).catch(l.n)}else this.updateLink(e,t)},t.prototype.updateLink=function(e,t){var n=this.props.course,r=this.state.task,a=n.abilities.find(function(t){return t.id===e}),i=n.knowledgeRequirements.find(function(t){return t.id===e}),o=n.centralContent.find(function(t){return t.id===e}),l=s.f(a?["abilities",a]:i?["knowledgeRequirements",i]:o?["centralContent",o]:[null,null],2),c=l[0],u=l[1];if(c){var d=r[c].slice(),m=d.findIndex(function(t){return t.id===e});t?m<0&&d.push(u):m>=0&&d.splice(m,1);var h=s.a({},r);h[c]=d,r&&r.migratedTexts&&(h.migratedTexts=s.a({},r.migratedTexts),r.migratedTexts[c]&&(h.migratedTexts[c]=s.a({},r.migratedTexts[c]),delete h.migratedTexts[c][e])),this.setStatePromised({task:h})}else console.error("Could not find marked id "+e)},t.prototype.save=function(){return s.b(this,void 0,void 0,function(){var e,t,n;return s.d(this,function(r){switch(r.label){case 0:if(e=this.state,t=e.task,n=e.taskCustomization,!Object(N.c)(p.a.currentUser,t))return[3,5];if(!t.url&&!t.content)throw new Error(Object(l.a)(J||(J=s.e(["Uppgiften måste antingen ha en URL eller ett innehåll"],["Uppgiften måste antingen ha en URL eller ett innehåll"]))));if(t.url&&!C.a.isUri(t.url))throw new Error(Object(l.a)(X||(X=s.e(["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Den ska börja med http: eller https:"])),t.url));return this.props.task&&this.props.task.id!==t.id?[4,this.props.onReplace(this.props.task.id,t)]:[3,2];case 1:return r.sent(),[3,4];case 2:return[4,this.props.onSave(t,null)];case 3:r.sent(),r.label=4;case 4:return[3,9];case 5:return this.props.searchMode?[4,this.props.onSave(t,n)]:[3,7];case 6:return r.sent(),[3,9];case 7:if(this.props.course.isTemplate&&"add"===t.$meta)throw new Error(Object(l.a)(Z||(Z=s.e(["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"],["Du saknar behörighet för att spara nya versioner av uppgifter i kursmallen"]))));return[4,this.props.onSaveCustomization(n)];case 8:r.sent(),r.label=9;case 9:return[2]}})})},t.prototype.copyTask=function(){return s.b(this,void 0,void 0,function(){var e;return s.d(this,function(t){switch(t.label){case 0:return(e=s.a({},this.state.task,this.state.taskCustomization||{},{id:Object(k.h)(),acl:this.props.course.isTemplate?["role:USER:R"]:["role:USER:R","schoolRole:"+p.a.currentUser.school+"/EMPLOYEE:S"],school:this.props.course.school})).$meta="add",[4,this.setStatePromised({task:e,title:Object(l.a)(ee||(ee=s.e(['Redigera kopierad uppgift till "','"'],['Redigera kopierad uppgift till "','"'])),this.props.module.name),taskCustomization:void 0})];case 1:return t.sent(),[2]}})})},t.prototype.getTaskProp=function(e){var t=this.state,n=t.task,r=t.taskCustomization,a=r&&r[e];return void 0!==a?a:n[e]},t.prototype.updateTaskOrCustomization=function(e,t){var n=this.state,r=n.task,a=n.taskCustomization;if(!(r&&Object(N.c)(p.a.currentUser,r))||a&&void 0!==a[e]){var i=s.a({},a);i[e]=I()(i[e]||r[e],t),this.setStatePromised({taskCustomization:i})}else{var o=s.a({},r);o[e]=I()(r[e],t),this.setStatePromised({task:o})}},t.prototype.render=function(){var e=this,t=this.props,n=t.course,r=(t.module,t.onCancel,t.onDelete,t.idsNotCoveredByAnyTask),a=t.searchMode,i=this.state,l=i.task,c=i.taskCustomization,u=i.title,d=i.searchResult,m=i.searchMarkedIds,h=i.isSearching,f=a?m:l.centralContent.map(function(e){return e.id}).concat(l.abilities.map(function(e){return e.id})).concat(l.knowledgeRequirements.map(function(e){return e.id})),v=l&&Object(N.c)(p.a.currentUser,l),g=(l&&C.a.isUri(l.url),this.features);return o.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},o.createElement("div",{className:"sv-text-portlet sv-use-margins sv-skip-spacer"},o.createElement("div",{className:"sv-text-portlet-content"},o.createElement("h1",{className:"h1"},u))),o.createElement("div",{className:"sv-fluid-grid sv-grid-ksgs12 sv-layout"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-6"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("div",{className:"ked_boxed"},o.createElement("h3",null,a?"Filtrera på kunskapskrav":v?"Välj kunskapskrav":"Kunskapskrav"),a?o.createElement("p",null,"Markera de kunskapskrav som uppgiften måste täcka."):v&&o.createElement("p",null,"Markera de kunskapskrav som din uppgift täcker."),o.createElement(T.a,{knowledgeRequirements:n.knowledgeRequirements,markedIds:f,idsToMarkNotOk:r,markMode:a||v,migratedIds:l&&l.migratedTexts&&l.migratedTexts.knowledgeRequirements,onMarkChanged:this.onMarkChanged.bind(this)}))),o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement(j.a,{options:n.abilities,title:v||a?"Välj förmågor":"Förmågor",markedIds:f,markMode:v||a,migratedIds:l&&l.migratedTexts&&l.migratedTexts.abilities,onMarkChanged:this.onMarkChanged.bind(this)})),o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement(j.a,{options:n.centralContent,title:v||a?"Välj centralt innehåll":"Centralt innehåll",markedIds:f,markMode:v||a,migratedIds:l&&l.migratedTexts&&l.migratedTexts.centralContent,onMarkChanged:this.onMarkChanged.bind(this)})),!a&&o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement("div",{className:"openClose larger"+(this.state.futureAbilitiesOpen?" open":"")},o.createElement("div",{className:"openHeader",onClick:function(){return e.setStatePromised({futureAbilitiesOpen:!e.state.futureAbilitiesOpen})}},v?o.createElement("p",null,"Välj ytterligare alternativ"):o.createElement("p",null,"Ytterligare alternativ")),o.createElement("div",{className:"openContent"},o.createElement("h4",null,"Framtidsförmågor"),o.createElement("div",{className:"taskContainer"},D.a.map(function(t){var n=l.futureAbilities.indexOf(t)>=0;return o.createElement("div",{className:"align-horizontal",key:t},o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{className:"checkBox"+(n?" checked":""),onClick:v?function(){var r=s.a({},l);r.futureAbilities=n?l.futureAbilities.filter(function(e){return e!=t}):l.futureAbilities.concat(t),e.setStatePromised({task:r})}:void 0})),o.createElement("div",{className:"horizontalItem top"},t))})))))),o.createElement("div",{className:"sv-layout sv-column-6"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},h&&o.createElement("p",null,o.createElement(U.a,null)," Laddar uppgifter..."),d?o.createElement(o.Fragment,null,o.createElement(A,{searchMarkedIds:m,searchResult:d,task:l,writeAccess:v,taskCustomization:c,editTask:this}),this.state.previewTaskContent?o.createElement("div",{dangerouslySetInnerHTML:{__html:this.state.previewTaskContent}}):l&&o.createElement(Q,{writeAccess:v,task:l,taskCustomization:c,editTask:this}),l&&o.createElement(z,{task:l})):o.createElement(o.Fragment,null,l&&o.createElement(q,{task:l,course:n,writeAccess:v,features:g,editTask:this}),l&&o.createElement(Q,{writeAccess:v,task:l,taskCustomization:c,editTask:this}),l&&o.createElement(z,{task:l}))),l&&o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement("hr",null),o.createElement("br",null),o.createElement(K,{writeAccess:v,editTask:this})))),o.createElement("div",{className:"sv-layout"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"}))))},t}(o.Component),be=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return s.c(t,e),t.prototype.openTaskDialog=function(e){var t=this.props,n=t.taskCustomizations,r=t.course,a=t.host,i=t.module,s=(t.taskIds,t.onTaskAdded,t.onTaskUpdated),o=t.onTaskCustomizationUpdated,l=t.onTaskDeleted,c=t.idsNotCoveredByAnyTask,u=t.onTaskReplaced;a.openDialog({Component:ge,props:{task:e,taskCustomization:n&&n[e.id],module:i,course:r,host:a,idsNotCoveredByAnyTask:c,onSave:function(e){var t=Object(E.l)(e,p.a.currentUser);s(t),a.closeDialog()},onSaveCustomization:function(t){o(e.id,t),a.closeDialog()},onDelete:function(){l(e.id),a.closeDialog()},onReplace:function(e,t){u(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})},t.prototype.render=function(){var e=this,t=this.props;return o.createElement("div",null,o.createElement("div",{className:"taskContainer"},t.taskIds.map(function(e){return t.course.tasks.find(function(t){return t.id===e})}).map(function(t){var n=Object(N.c)(p.a.currentUser,t);return o.createElement("div",{className:"align-horizontal",key:t.id},Object(N.c)(p.a.currentUser,t)&&Object(E.d)(t)&&o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{style:{position:"relative",top:"0.2em",left:"-0.7em"}},o.createElement("i",{className:"fa fa-pagelines",style:{position:"absolute",top:0,left:0,color:"#49c35a"}}))),o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{className:n?"editItem":"viewItem",onClick:function(){return e.openTaskDialog(t)}})),o.createElement("div",{className:"horizontalItem top"},t.content?o.createElement("a",{href:"#",onClick:function(n){n.preventDefault(),e.openTaskDialog(t)}},t.name):o.createElement("a",{href:t.url,target:"_blank"},t.name)))})),o.createElement("br",null),o.createElement("a",{className:"btn",onClick:function(){var n=e.props,r=n.course,a=n.host,i=n.idsNotCoveredByAnyTask,s=n.module,o=n.onTaskAdded;n.onTaskCustomizationUpdated;t.host.openDialog({Component:ge,props:{searchMode:!0,module:s,course:r,host:a,idsNotCoveredByAnyTask:i,onSave:function(e,t){e=Object(E.l)(e,p.a.currentUser),o(e,t),a.closeDialog()},onCancel:function(){return a.closeDialog()}}})}},o.createElement("i",{className:"fa fa-search","aria-hidden":!0})," Sök uppgift")," ",o.createElement("a",{onClick:function(){var t=e.props,n=t.course,r=t.host,a=t.module,i=(t.taskIds,t.onTaskAdded),s=(t.onTaskUpdated,t.onTaskDeleted,t.idsNotCoveredByAnyTask);r.openDialog({Component:ge,props:{module:a,course:n,host:r,idsNotCoveredByAnyTask:s,onSave:function(e){e=Object(E.l)(e,p.a.currentUser),i(e),r.closeDialog()},onCancel:function(){return r.closeDialog()}}})},className:"btn"},o.createElement("i",{className:"fa fa-plus","aria-hidden":!0})," Lägg till egen uppgift"))},t}(o.Component),ye=n(58),ke=n(37),Ee=function(e){function t(t){var n=e.call(this,t)||this;return n.state={editMandatoryContent:!1},n}return s.c(t,e),t.prototype.getModuleIndex=function(){var e=this.props,t=e.course,n=e.module;return t.modules.findIndex(function(e){return e.id===n.id})},t.prototype.getModuleOrderIndex=function(){var e=this.props,t=(e.course,e.module);return this.props.getOrderedModules().findIndex(function(e){return e.id===t.id})},t.prototype.updateModule=function(e){var t=this.props.module,n=I()(t,e),r=this.getModuleIndex();this.props.host.update({modules:{$splice:[[r,1,n]]}})},t.prototype.onTaskAdded=function(e,t){var n={},r=this.props.module.taskIds.slice();r.push(e.id),this.props.course.tasks.some(function(t){return t.id===e.id})||(n.tasks={$push:[e]});var a=s.a({},this.props.module.taskCustomizations||{});t&&(a[e.id]=t);var i=this.getModuleIndex();n.modules={},n.modules[i]={taskIds:{$set:r},taskCustomizations:{$set:a}},this.props.host.update(n)},t.prototype.onTaskUpdated=function(e){if(!e.$meta)throw new Error(Object(l.a)(te||(te=s.e(["Hoppsan, blev lite knas. Fel ID: ",""],["Hoppsan, blev lite knas. Fel ID: ",""])),"Pa7Dq"));var t=this.props.course.tasks.findIndex(function(t){return t.id===e.id});t>=0&&this.props.host.update({tasks:{$splice:[[t,1,e]]}})},t.prototype.onTaskCustomized=function(e,t){var n=s.a({},this.props.module.taskCustomizations||{});n[e]=t,this.updateModule({taskCustomizations:{$set:n}})},t.prototype.onTaskDeleted=function(e){this.updateModule({taskIds:{$set:this.props.module.taskIds.filter(function(t){return t!==e})},taskCustomizations:{$apply:function(t){var n=s.a({},t);return delete n[e],n}}})},t.prototype.onTaskReplaced=function(e,t){var n=this.props.module.taskIds.indexOf(e);if(n<0)Object(l.n)(Object(l.a)(ne||(ne=s.e(["Kunde inte spara uppgift. Felkod d72kQ"],["Kunde inte spara uppgift. Felkod d72kQ"]))));else{var r={taskIds:{$splice:[[n,1,t.id]]},taskCustomizations:{$apply:function(t){var n=s.a({},t);return delete n[e],n}}},a=I()(this.props.module,r),i=this.getModuleIndex();this.props.host.update({modules:{$splice:[[i,1,a]]},tasks:{$set:this.props.course.tasks.concat(t)}})}},t.prototype.render=function(){for(var e=this,t=this.props,n=t.course,r=t.host,a=t.module,i=t.idsNotCoveredByAnyTask,c=this.getModuleIndex(),u=this.getModuleOrderIndex(),d=this.updateModule.bind(this),m=1,h=["--"],p=["--"],f=0;f<51;++f)h.push(""+m),p.push(""+ ++m);return o.createElement("div",{className:"course-module ked_boxed",style:{position:"relative"}},o.createElement("h3",null,o.createElement(ye.a,{eager:!0,clickAdvertiseText:"Namnlös modul",maxChars:100,text:a.name,onChange:function(e){return d({name:{$set:e}})}})),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem center"},o.createElement("p",null,"Startvecka")),o.createElement("div",{className:"horizontalItem center"},o.createElement("select",{value:a.startWeek||"--",onChange:function(e){return d({startWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},h.map(function(e){return o.createElement("option",{key:e,value:e},e)}))),o.createElement("div",{className:"horizontalItem center"},o.createElement("p",null,"Slutvecka")),o.createElement("div",{className:"horizontalItem center"},o.createElement("select",{value:a.endWeek||"--",onChange:function(e){return d({endWeek:{$set:"--"===e.target.value?void 0:parseInt(e.target.value)}})}},p.map(function(e){return o.createElement("option",{key:e,value:e},e)})))),o.createElement("h4",null,"Kursmodulens introduktion"),o.createElement(F.a,{actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],defaultActions:$.a,html:a.mandatoryContent,onChange:function(e){d({mandatoryContent:{$set:e}})}}),o.createElement("h4",null,"Uppgifter"),o.createElement(be,{taskIds:a.taskIds,taskCustomizations:a.taskCustomizations,course:n,module:a,host:r,idsNotCoveredByAnyTask:i,onTaskAdded:function(t,n){return e.onTaskAdded(t,n)},onTaskUpdated:function(t){return e.onTaskUpdated(t)},onTaskCustomizationUpdated:function(t,n){return e.onTaskCustomized(t,n)},onTaskDeleted:function(t){return e.onTaskDeleted(t)},onTaskReplaced:function(t,n){return e.onTaskReplaced(t,n)}}),o.createElement("h4",null,"Modulresurser"),o.createElement("p",{className:"subHeader"},"(Eventuella resuser för redovisning av modulen samt för modulen som helhet)"),o.createElement(O,{resources:a.resources,onUpdate:function(e){return d({resources:e})},host:r}),o.createElement("div",{style:{position:"absolute",top:0,right:0}},u>0&&o.createElement("span",null,o.createElement("i",{className:"fa fa-arrow-circle-up selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(-1)}})," "),u<n.modules.length-1&&o.createElement("span",null,o.createElement("i",{className:"fa fa-arrow-circle-down selectable","aria-hidden":"true",onClick:function(){return e.props.onReorder(1)}})," "),o.createElement(ke.a,{title:"Ta bort modulen",style:{display:"inline-block"},onClick:function(){return confirm(Object(l.a)(re||(re=s.e(["Ta bort modul ","?"],["Ta bort modul ","?"])),a.name))&&r.update({modules:{$splice:[[c,1]]}})}})))},t}(o.Component),we=function(e){function t(t){var n=e.call(this,t)||this;return n._moduleRefs={},n.state={},n}return s.c(t,e),t.prototype.addModule=function(){this.props.host.update({modules:{$push:[{name:"Ny kursmodul",id:Object(k.h)(),resources:[],taskIds:[]}]}})},t.prototype.getOrderedModules=function(){var e=this.props.course,t=e.moduleOrder||e.modules.map(function(e){return e.id});return t.map(function(t){return e.modules.find(function(e){return e.id===t})}).filter(function(e){return!!e}).concat(e.modules.filter(function(e){return!t.find(function(t){return e.id===t})}))},t.prototype.reorder=function(e,t){return s.b(this,void 0,void 0,function(){var n,r,a,i,o,l,c;return s.d(this,function(s){switch(s.label){case 0:return this.props.course,n=this.getOrderedModules(),r=n.findIndex(function(t){return t.id===e}),(a=r+t)<0||a>=n.length?[2]:(i=n[a],(o=n.map(function(e){return e.id}))[a]=e,o[r]=i.id,l=document.documentElement.scrollTop,[4,this.props.host.update({moduleOrder:{$set:o}})]);case 1:if(s.sent(),c=Object(y.findDOMNode)(this._moduleRefs[e]))try{window.scrollTo({top:l}),c.scrollIntoView({behavior:"smooth",block:"start"})}catch(e){window.scrollTo(null,l),c.scrollIntoView(!0)}return[2]}})})},t.prototype.render=function(){var e=this,t=this.props,n=t.course,r=t.host,a=t.idsNotCoveredByAnyTask,i=(n.moduleOrder||n.modules.map(function(e){return e.id}),this.getOrderedModules());return o.createElement("div",{className:"sv-html-portlet sv-portlet",ref:function(t){return e._elem=t}},i.map(function(t){return o.createElement(Ee,{ref:function(n){return e._moduleRefs[t.id]=n},key:t.id,course:n,module:t,onReorder:function(n){return e.reorder(t.id,n)},getOrderedModules:function(){return e.getOrderedModules()},host:r,idsNotCoveredByAnyTask:a})}),o.createElement("div",{className:"btn btn-large",onClick:function(){return e.addModule()}},"Lägg till kursmodul"))},t}(o.Component),Ce=new(function(e){function t(t){var n=e.call(this,{query:function(){return s.b(n,void 0,void 0,function(){var e,n;return s.d(this,function(r){switch(r.label){case 0:return e=t(),[4,p.a.kedBackendClient.list("schools",{name:e,include:["courses"]})];case 1:if(n=r.sent(),this._schoolId=n.length>0&&n[0].id,!this._schoolId)throw new Error(Object(l.a)(ae||(ae=s.e(["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'],["Skolan ",' finns inte registrerad i systemet.\n          Kontakta en administratör för Kursbyggarverktyget och be om att lägga till skolan med namnet "','"'])),e,e));return[2,Object(l.k)(n.map(function(e){return e.courses}))]}})})}})||this;return n}return s.c(t,e),t.prototype.getSchoolId=function(){var e=this;return this.ensureHasData().then(function(){return e._schoolId})},t}(n(66).a))(function(){return p.a.currentUser.school}),Se=function(e){function t(t){var n=e.call(this,t)||this;return n.state={schoolCourses:null},n.onSchoolCoursesUpdated=n.onSchoolCoursesUpdated.bind(n),n}return s.c(t,e),t.prototype.componentDidMount=function(){Ce.subscribe(this.onSchoolCoursesUpdated).catch(l.n)},t.prototype.componentWillUnmount=function(){Ce.unsubscribe(this.onSchoolCoursesUpdated)},t.prototype.onSchoolCoursesUpdated=function(e){var t=Object(l.g)("name"),n=Object(l.g)("createdDate");e.sort(function(e,r){return t(e,r)||n(e,r)}),this.setState({schoolCourses:e})},t.prototype.render=function(){var e=this.state.schoolCourses;return o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("div",{className:"ked_boxed"},o.createElement("h3",null,"Skolans kurser"),o.createElement("div",{className:"taskContainer odd-even"},e?e.map(function(e){return o.createElement("div",{className:"schoolCourse",key:e.id},o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top pull-right"},o.createElement(c.b,{to:"/courses/"+e.id+"/edit",className:"editItem"})),o.createElement("div",{className:"horizontalItem top"},o.createElement(c.b,{to:"/courses/"+e.id+"/edit"},e.name)),o.createElement("div",{className:"horizontalItem top"},e.active&&o.createElement("div",{className:"pill active"},"Aktiv")),e.active&&!e.publishable&&o.createElement("div",{className:"horizontalItem top"},o.createElement("div",{className:"pill incomplete"},"Inkomplett"))),o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,e.description)),o.createElement("div",{className:"horizontalItem top"},e.modifiedBy?o.createElement("p",{className:"small"},"Redigerad av ",e.modifiedBy.name," / ",Object(E.g)(e.modifiedDate)):o.createElement("p",{className:"small",style:{fontStyle:"italic"}}," ")))}):o.createElement("p",null,o.createElement(U.a,null)," Laddar skolans kurser")),"#/courses/new"!==location.hash&&o.createElement(c.b,{className:"btn",to:"/courses/new",onClick:function(){return window.scroll(0,0)}},"Skapa ny kurs")))},t}(o.Component),Oe=n(55),Te=function(e){function t(t){var n=e.call(this,t)||this;return n.state={addEmtpyRow:0===t.teachers.length},n}return s.c(t,e),t.prototype.render=function(){var e=this,t=this.props,n=t.teachers,r=t.onUpdate,a=this.state.addEmtpyRow;return a&&(n=n.concat({name:"",url:""})),o.createElement("div",{className:"teachers-list"},o.createElement("h3",null,"Ansvariga lärare"),o.createElement("table",{tabIndex:1,style:{width:"100%"},onBlur:function(t){return(!t.relatedTarget||"INPUT"!==t.relatedTarget.tagName)&&e.props.teachers.length>0&&e.setState({addEmtpyRow:!1})}},o.createElement("thead",null,n.length>0&&o.createElement("tr",null,o.createElement("th",{style:{width:"20%"}},"Namn"),o.createElement("th",null,"Länk eller E-postadress"))),o.createElement("tbody",null,n.map(function(t,i){return o.createElement("tr",{key:i},o.createElement("td",null,o.createElement("input",{type:"text",ref:function(t){return e.nameElem=t},value:t.name,autoFocus:!t.name&&i>0,onChange:function(o){a&&i==n.length-1?(r({$push:[s.a({},t,{name:o.target.value})]}),e.setState({addEmtpyRow:!1})):o.target.value||t.url?r({$splice:[[i,1,s.a({},t,{name:o.target.value})]]}):(1===e.props.teachers.length&&e.setState({addEmtpyRow:!0}),r({$splice:[[i,1]]}))}})),o.createElement("td",null,o.createElement("input",{type:"text",style:{width:"100%"},value:t.url,onKeyDown:function(t){return 9===t.which&&!t.shiftKey&&i===n.length-1&&(n.length<1||!!n[n.length-1].name&&(e.setState({addEmtpyRow:!0}),t.preventDefault()))},onChange:function(o){a&&i==n.length-1?(r({$push:[s.a({},t,{url:o.target.value})]}),e.setState({addEmtpyRow:!1})):o.target.value||t.name?r({$splice:[[i,1,s.a({},t,{url:o.target.value})]]}):(1===e.props.teachers.length&&e.setState({addEmtpyRow:!0}),r({$splice:[[i,1]]}))}})))}))),o.createElement("br",null),o.createElement("a",{className:"btn",onClick:function(){return e.state.addEmtpyRow?e.nameElem.focus():e.setState({addEmtpyRow:!0})}},o.createElement("i",{className:"fa fa-user-plus","aria-hidden":!0})," Lägg till ansvarig lärare"))},t}(o.Component),xe=n(24),Ie=function(e){function t(t){var n=e.call(this,t)||this;return n.state={isOpen:!1},n}return s.c(t,e),t.prototype.render=function(){var e=this.props.course,t=(this.state.isOpen,[]),n=Object(Oe.c)(e);return t.push(o.createElement("tr",{key:"centralContent",className:"covered-item-label"},o.createElement("td",{colSpan:2},"Centralt innehåll"))),e.centralContent.forEach(function(e,r){return t.push(o.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},o.createElement("td",null,o.createElement("p",{className:"criteriaText",dangerouslySetInnerHTML:{__html:e.name}})),o.createElement("td",null,o.createElement("p",null,(n[e.id]||[]).length))))}),t.push(o.createElement("tr",{key:"abilities",className:"covered-item-label"},o.createElement("td",{colSpan:2},"Förmågor"))),e.abilities.forEach(function(e,r){return t.push(o.createElement("tr",{key:e.id,className:r%2?"tableOdd":""},o.createElement("td",null,o.createElement("p",{className:"abilityText",dangerouslySetInnerHTML:{__html:e.name}})),o.createElement("td",null,o.createElement("p",null,(n[e.id]||[]).length))))}),t.push(o.createElement("tr",{key:"futureAbilities",className:"covered-item-label"},o.createElement("td",{colSpan:2},"Framtidsförmågor"))),D.a.forEach(function(e,r){return t.push(o.createElement("tr",{key:e,className:r%2?"tableOdd":""},o.createElement("td",null,o.createElement("p",{className:"abilityText"},e)),o.createElement("td",null,o.createElement("p",null,(n[e]||[]).length))))}),o.createElement(xe.a,{className:"larger",title:o.createElement("p",null,"Kursens täckningstabell"),contentClassName:"weighted-items-table"},o.createElement("p",null,"Tabellen anger hur många uppgifter som berör varje del."),o.createElement("table",null,o.createElement("tbody",null,t)))},t}(o.Component),Ne=function(e){function t(t){var n=e.call(this,t)||this;return n.state={url:n.props.url||""},n}return s.c(t,e),t.prototype.save=function(){var e=this.state.url;if(!C.a.isUri(e))throw new Error(Object(l.a)(ie||(ie=s.e(["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"],["Angiven URL '","' är ogiltig. Ska börja med http: eller https:"])),e));this.props.onSave(e)},t.prototype.render=function(){var e=this,t=this.props,n=t.onSave,r=t.onDelete,a=this.state,i=C.a.isUri(this.state.url);return o.createElement("div",null,o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("h2",null,"Koppla en arbetsgång till kursen"),o.createElement("p",null,"Det går bara att lägga in en arbetsgång per kurs."),o.createElement("br",null),o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},"Länk:"),o.createElement("div",{className:"horizontalItem top "},o.createElement("input",{type:"text",tabIndex:1,size:50,value:a.url,onChange:function(t){return e.setState({url:t.target.value})}})),o.createElement("div",{className:"horizontalItem top spaced"})),o.createElement("br",null)),o.createElement("div",{className:"sv-html-portlet sv-portlet",id:"svid12_492422d515badf36646e4ff1"},r&&o.createElement("div",{tabIndex:2,className:"btn btn-warning btn-large pull-right",onClick:function(){return r()}},"Ta bort arbetsgång"),o.createElement("a",{tabIndex:1,className:"btn btn-large"+(i?"":" btn-inactive"),onClick:i&&function(){return n(a.url)}},"Spara")))},t}(o.Component),je=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return s.c(t,e),t.prototype.render=function(){var e=this.props,t=e.host,n=e.onUpdate,r=e.url;return o.createElement("div",null,o.createElement("div",{className:"taskContainer"},r&&o.createElement("div",{className:"align-horizontal"},o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{className:"editItem",onClick:function(){return t.openDialog({Component:Ne,props:{url:r,onSave:function(e){n({$set:e}),t.closeDialog()},onDelete:function(){n({$set:void 0}),t.closeDialog()}}})}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("a",{href:r,target:"_blank"},"Nuvarande arbetsgång")))),!r&&o.createElement("a",{className:"btn",onClick:function(){return t.openDialog({Component:Ne,props:{onSave:function(e){n({$set:e}),t.closeDialog()}}})}},o.createElement("i",{className:"fa fa-paperclip","aria-hidden":!0})," Koppla en arbetsgång till kursen"))},t}(o.Component),Re=function(e){function t(t){var n=e.call(this,t)||this;return n.state={changeImageUrl:!1},n}return s.c(t,e),t.prototype.setImageUrl=function(e){this.props.course.imageId},t.prototype.render=function(){var e=this.props,t=e.course,n=e.origCourse,r=e.host,a=Object(Oe.d)(t),i=Object(Oe.b)(t),c=Object(Oe.e)(t),u=t.images.find(function(e){return e.id===t.imageId}),d=u&&u.url.startsWith("data:"),m=u&&u.url.indexOf("storage.googleapis.com")>0;return o.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},t.isTemplate&&o.createElement("h1",null,"Kursmall"),o.createElement("h2",null,"Kursövergripande"),o.createElement("hr",null),o.createElement("div",{className:"ked_boxed"},o.createElement("div",null,o.createElement("h3",null,"Kursens bild"),d?o.createElement("p",null,"Kursens bild ligger i databasen. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):m?o.createElement("p",null,"Kursens bild ligger i Kunskapsskolans Google moln. För att ändra bild måste du dra och släppa en ny bild ovanpå den gamla högst upp på denna sida. Bilden kan antingen vara från en annan webbsida. Lokala bildfiler går också bra att dra och släppa."):u?o.createElement("div",null,o.createElement("textarea",{value:u.url,style:{width:"100%",height:"30px"},onChange:function(e){return Object(v.b)(t,n,r,e.target.value)}}),o.createElement("p",null,"Bilden som visas högst upp hämtas från angiven URL. För att ändra bild kan du redigera URL ovan. Ett annat sätt att ändra bild är att dra och släppa en ny bild över den gamla högst upp på sidan.")):o.createElement("p",null,"Kursen saknar egen bild. Lägg till en bild genom att dra och släppa en bild på kurs-bannern högst upp på den här sidan."),o.createElement("br",null)),!t.isTemplate&&o.createElement("div",null,o.createElement("h3",null,"Beskrivning"),o.createElement("p",{className:"subHeader"},"(Beskrivning av kursen. För att skilja mellan olika varianter av samma gymnasiekurs)"),o.createElement("textarea",{className:"inputTextBox inputTextSmall",value:t.description,onChange:function(e){return r.update({description:{$set:e.target.value}})}}),o.createElement("br",null)),o.createElement("div",null,o.createElement("h3",null,"Upptaktstext"),o.createElement("p",{className:"subHeader"},"(texten ska visas på kursens upptaktssektion)"),o.createElement(F.a,{html:t.runUpText,defaultActions:$.a,actions:["bold","italic","underline","strikethrough","heading2","heading3","olist","ulist","line","link","image"],onChange:function(e){return r.update({runUpText:{$set:e}})}}),o.createElement("br",null)),o.createElement("h3",null,"Kursresurser"),o.createElement("p",{className:"subHeader"},"(Resurser för upptakt och kursen som helhet)"),o.createElement(O,{resources:t.resources,onUpdate:function(e){return r.update({resources:e})},host:r}),o.createElement("br",null),o.createElement("h3",null,"Arbetsgång"),o.createElement("p",{className:"subHeader"},"(Eventuell länk till arbetsgång för kursen)"),o.createElement(je,{url:t.workFlowLink,onUpdate:function(e){return r.update({workFlowLink:e})},host:r}),o.createElement("br",null),!t.isTemplate&&o.createElement("div",null,o.createElement("h3",null,"Google Classroom"),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{placeholder:"Google classroom URL",type:"text",size:30,value:t.googleClassRoomURL,onChange:function(e){return r.update({googleClassRoomURL:{$set:e.target.value}})}})),o.createElement("div",{className:"horizontalItem top"},o.createElement("input",{placeholder:"kod",type:"text",size:8,value:t.googleClassRoomCode,onChange:function(e){return r.update({googleClassRoomCode:{$set:e.target.value}})}})))),o.createElement("br",null),!t.isTemplate&&o.createElement(o.Fragment,null,o.createElement(Te,{teachers:t.responsibleTeachers,onUpdate:function(e){r.update({responsibleTeachers:e})}}))),o.createElement("div",{className:"sv-html-portlet sv-portlet",id:"svid12_6ab4811f15b13c706b43bb47"},o.createElement("div",{id:"Kursensmoduler"}),o.createElement("h2",null,"Kursens moduler"),o.createElement("hr",null)),o.createElement(we,{host:r,course:t,idsNotCoveredByAnyTask:i}),o.createElement("div",null,o.createElement("br",null),o.createElement(Ie,{course:t})),o.createElement("div",{className:"sv-html-portlet sv-portlet"},o.createElement("h2",null,"Kursens status"),o.createElement("hr",null),t.createdBy&&t.createdDate&&o.createElement("p",null,"Kursen skapades ",Object(E.c)(t.createdDate)," av ",o.createElement("strong",null,t.createdBy.name),"."),t.modifiedBy&&t.modifiedDate&&o.createElement("p",null,"Kursen redigerades senast ",Object(E.c)(t.modifiedDate)," av ",o.createElement("strong",null,t.modifiedBy.name),"."),t.active?o.createElement("p",null,"Kursen är ",o.createElement("strong",null,"AKTIV")," sedan ",Object(E.c)(t.activatedDate)," av ",o.createElement("strong",null,t.activatedBy.name),"."):o.createElement("p",null,"Kursen är ",o.createElement("strong",null,"INAKTIV"),t.inactivatedBy?o.createElement("span",null,"sedan ",Object(E.c)(t.inactivatedDate)," av ",o.createElement("strong",null,t.inactivatedBy.name),"."):o.createElement("span",null,".")),0===a.length?o.createElement("p",{className:"markedGreen"},"Modulernas kunskapskrav täcker skolverkets krav för denna kurs"):o.createElement("div",{className:"markedRed warning-box"},o.createElement("div",{className:"warningFlag"},o.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),o.createElement("p",null,"Modulernas kunskapskrav täcker inte skolverkets krav för denna kurs.")),c.map(function(e){return o.createElement("div",{key:e,className:"markedRed warning-box"},o.createElement("div",{className:"warningFlag"},o.createElement("i",{className:"fa fa-exclamation-triangle","aria-hidden":"true"})),o.createElement("p",null,e))}),o.createElement("br",null),!t.isTemplate&&(n?o.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){confirm(Object(l.a)(se||(se=s.e(['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\n\nKursen kommar att raderas helt!\n\nÄr du säker?"],['Bekräfta borttagning av kursen "'," - ",'" för skolan ',"\\n\\nKursen kommar att raderas helt!\\n\\nÄr du säker?"])),t.name,t.description,t.school))&&r.deleteCourse().catch(l.n)}},"Ta bort kurs"):o.createElement("div",{className:"btn btn-warning btn-large pull-right",onClick:function(){return history.go(-1)}},"Avbryt")),o.createElement("div",{className:"btn btn-large",onClick:function(){return r.save()}},"Spara"),t.active?o.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.inactivateAndSave()}},"Inaktivera och spara"):o.createElement("div",{className:"btn btn-info btn-large",onClick:function(){return r.activateAndSave()}},"Aktivera och spara")))),o.createElement("div",{className:"sv-layout sv-column-5"},o.createElement(Se,null)))},t}(o.Component),De="production"===n(8).a.ENVIRONMENT?l.n:null,Ue=Object(l.a)(oe||(oe=s.e(["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."],["Du har osparat data. Välj avbryt och tryck CTRL+S om du vill spara först."]))),Me={origCourse:null,origTemplate:null,course:null,dialogContainers:[],hasUnsavedData:!1,view:"courseBuilder"},Ae=function(e){function t(t){var n=e.call(this,t)||this;return n.state=s.a({},Me),n.update=n.update.bind(n),n.refDialog=n.refDialog.bind(n),n.contentYPos=0,n.onKeyDown=n.onKeyDown.bind(n),n.beforeUnload=n.beforeUnload.bind(n),n.onClickPreventUnload=n.onClickPreventUnload.bind(n),n.isSaving=!1,n.dialogs=[],t.view&&(n.state=s.a({},n.state,{view:t.view})),n}return s.c(t,e),t.prototype.setStatePromised=function(e){return this._setState(s.a({hasUnsavedData:!0},e))},t.prototype.setNonSaveableDataState=function(e){return this._setState(e)},t.prototype._setState=function(t){var n=this;if(t.course){var r=t.course,a=r.tasks,i=r.modules,o={};i.forEach(function(e){return e.taskIds.forEach(function(e){return o[e]=!0})});var l=a.filter(function(e){return o[e.id]}),c=s.a({},t.course);c.tasks=l,t=s.a({},t,{course:c})}var u=t.allCourses||this.state.allCourses,d=t.course||this.state.course;if(u){var m=u.findIndex(function(e){return e.id===n.props.id});u=I()(u,{$splice:[[m,1,d]]}),(t=s.a({},t)).allCourses=u}return new Promise(function(r){return e.prototype.setState.call(n,function(){return t},r)})},t.prototype.componentWillMount=function(){this.load().catch(De),window.addEventListener("keydown",this.onKeyDown),window.addEventListener("beforeunload",this.beforeUnload),document.body.addEventListener("click",this.onClickPreventUnload)},t.prototype.componentWillUnmount=function(){window.removeEventListener("keydown",this.onKeyDown),window.removeEventListener("beforeunload",this.beforeUnload),document.body.removeEventListener("click",this.onClickPreventUnload),Object(E.i)("")},t.prototype.componentWillReceiveProps=function(e){this.state&&this.state.course&&(e.id===this.props.id&&e.templateId===this.props.templateId||this.setStatePromised(Me)),e.view!==this.props.view&&this.setNonSaveableDataState({view:e.view})},t.prototype.componentDidUpdate=function(e,t){if(this.contentDiv){var n=Object(y.findDOMNode)(this.contentDiv);n&&(this.contentYPos=n.getBoundingClientRect().top)}t&&t.course&&(this.props.id===e.id&&this.props.templateId===e.templateId||this.load().catch(De)),!t.hasUnsavedData&&this.state.hasUnsavedData&&Object(E.i)("unsaved")},t.prototype.loadFromTemplate=function(e){return s.b(this,void 0,void 0,function(){var t,n,r;return s.d(this,function(a){switch(a.label){case 0:return Object(l.o)("Laddar data från mall..."),[4,Object(E.e)(e,{includeTemplateChain:!0})];case 1:return t=a.sent(),(n=Object(E.j)(Date.now(),t,p.a.currentUser)).id=Object(k.h)(),n.parentId=e,n.active=!1,n.isTemplate=!1,n.templateChain=s.g(n.templateChain),n.templateChain.push({id:e,$meta:"ref"}),r=p.a.currentUser.school,n.school=r,n.description="",n.responsibleTeachers=[],n.acl=["role:USER:R","schoolRole:"+r+"/EMPLOYEE:S"],delete n.$etag,delete n.createdBy,delete n.createdDate,delete n.modifiedBy,delete n.modifiedDate,delete n.activatedBy,delete n.activatedDate,delete n.googleClassRoomCode,delete n.googleClassRoomURL,[4,this.setStatePromised({course:n,origCourse:null,origTemplate:t})];case 2:return a.sent(),Object(l.o)(""),[2]}})})},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){return s.d(this,function(e){switch(e.label){case 0:return Object(E.i)(""),this.props.id?[4,this.loadExistingCourse(this.props.id)]:[3,2];case 1:return e.sent(),[3,5];case 2:return this.props.templateId?[4,this.loadFromTemplate(this.props.templateId)]:[3,4];case 3:return e.sent(),[3,5];case 4:throw new Error(Object(l.a)(le||(le=s.e(["Ogiltig parameter. id eller templateId måste anges"],["Ogiltig parameter. id eller templateId måste anges"]))));case 5:return[2]}})})},t.prototype.loadExistingCourse=function(e){return s.b(this,void 0,void 0,function(){var t;return s.d(this,function(n){switch(n.label){case 0:return Object(l.o)("Laddar kurs"),[4,Object(E.e)(e)];case 1:return(t=n.sent()).responsibleTeachers||(t.responsibleTeachers=[]),[4,this.setNonSaveableDataState({course:t,origCourse:t})];case 2:return n.sent(),Object(l.o)(""),[2]}})})},t.prototype.update=function(e){return s.b(this,void 0,void 0,function(){return s.d(this,function(t){switch(t.label){case 0:return[4,this.setStatePromised({course:I()(this.state.course,e)})];case 1:return t.sent(),[2]}})})},t.prototype.deleteCourse=function(){return s.b(this,void 0,void 0,function(){var e,t,n,r,a,i,o,c;return s.d(this,function(u){switch(u.label){case 0:return Object(l.o)("Raderar kursen..."),n=this.state.course.school,this.state.course.parentId,r=this.props.id,[4,p.a.kedBackendClient.list("courses",{hasEdgesTo:[this.props.id]})];case 1:a=u.sent(),i=new k.a;try{for(o=s.h(a),c=o.next();!c.done;c=o.next())c.value}catch(t){e={error:t}}finally{try{c&&!c.done&&(t=o.return)&&t.call(o)}finally{if(e)throw e.error}}return i.delete("courses",r),[4,p.a.kedBackendClient.batch(i.mutationRequests)];case 2:return u.sent(),n===p.a.currentUser.school&&Ce.delete(r),Object(l.o)(""),location.hash="#/courses/new",[2]}})})},t.prototype.save=function(){return s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:if(this.isSaving)return[2];n.label=1;case 1:return n.trys.push([1,3,4,5]),this.isSaving=!0,[4,this._save()];case 2:return n.sent(),[3,5];case 3:return e=n.sent(),t=e&&e.message?e.message:Object(l.a)(ce||(ce=s.e(["Ett okänt fel har inträffat..."],["Ett okänt fel har inträffat..."]))),e&&("http409"===e.name||"http412"===e.name||"http404"===e.name?t=Object(l.a)(ue||(ue=s.e(["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."],["Kursen har redigerad av annan användare. Ladda om sidan och gör om ändrinarna."]))):"http403"===e.name&&(this.state.course.isTemplate?t=Object(l.a)(de||(de=s.e(["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."],["Ingen behörighet att spara kursmallen. Endast administratörer kan redigera kursmallar."]))):this.state.course.school&&(t=Object(l.a)(me||(me=s.e(["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""],["Ingen behörighet att spara kursen ",". Kursen kan bara redigeras av anställda på ",""])),this.state.course.name,this.state.course.school)))),Object(l.n)(t),Object(E.i)("error"),[3,5];case 4:return this.isSaving=!1,[7];case 5:return[2]}})})},t.prototype._save=function(){return s.b(this,void 0,void 0,function(){var e,t,n,r,a,i,o,c,u,d,m,h;return s.d(this,function(f){switch(f.label){case 0:return e=this.state,t=e.course,n=e.origCourse,r=e.origTemplate,a=0===Object(Oe.d)(t).length,Object(l.o)(Object(l.a)(he||(he=s.e(["Sparar..."],["Sparar..."])))),i=Object(E.m)(Date.now(),t,p.a.currentUser),o=new k.a,c=n||r,u=i.tasks.map(function(e){if("add"===e.$meta||"update"===e.$meta){var t=c.tasks.find(function(t){return t.id===e.id});return Object(E.k)(t||{},e,"tasks",{knowledgeRequirements:"knowledge-requirements",centralContent:"central-content",abilities:"abilities"},o)}var n=s.a({},e);return delete n.$meta,n}),i=I()(i,{tasks:{$set:u}}),i=Object(E.k)(n||{},i,"courses",{templateChain:"courses",centralContent:"central-content",knowledgeRequirements:"knowledge-requirements",abilities:"abilities",images:"images",tasks:"tasks"},o),(i=s.a({},i)).publishable=a,d=(i.tags||[]).filter(function(e){return"incomplete"!==e}),i.tags=i.publishable?d:d.concat("incomplete"),n?[3,3]:(o.add("courses",i),t.school?[4,Ce.getSchoolId()]:[3,2]);case 1:m=f.sent(),o.link("schools",m,"courses",t.id,"courses"),t.active&&o.link("schools",m,"courses",t.id,"activeCourses"),f.label=2;case 2:return[3,7];case 3:return o.put("courses",i),n.active||!t.active?[3,5]:[4,Ce.getSchoolId()];case 4:return m=f.sent(),o.link("schools",m,"courses",t.id,"activeCourses"),[3,7];case 5:return!n.active||t.active?[3,7]:[4,Ce.getSchoolId()];case 6:m=f.sent(),o.unlink("schools",m,"courses",t.id,"activeCourses"),f.label=7;case 7:return[4,p.a.kedBackendClient.batch(o.mutationRequests)];case 8:return h=f.sent(),Object(l.o)(n?Object(l.a)(pe||(pe=s.e(["Ändringarna har sparats"],["Ändringarna har sparats"]))):Object(l.a)(fe||(fe=s.e(["Kursen har skapats"],["Kursen har skapats"])))),h&&h.newEtags&&(i=Object(E.b)(i,h.newEtags,["images","tasks"])),t.school===p.a.currentUser.school&&(n?Ce.update(i):Ce.insert(i)),[4,this.setNonSaveableDataState({course:i,origCourse:i,hasUnsavedData:!1})];case 9:return f.sent(),Object(E.i)(""),n||(location.hash="#/courses/"+i.id+"/edit"),[2]}})})},t.prototype.activateAndSave=function(){var e=this,t=s.a({},this.state.course);t.active||(t.active=!0,t.activatedBy={name:p.a.currentUser.displayName,url:"mailto:"+p.a.currentUser.mail},t.activatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(De))},t.prototype.inactivateAndSave=function(){var e=this,t=s.a({},this.state.course);t.active&&(t.active=!1,t.inactivatedBy={name:p.a.currentUser.displayName,url:"mailto:"+p.a.currentUser.mail},t.inactivatedDate=Date.now(),this.setStatePromised({course:t}).then(function(){return e.save()}).catch(De))},t.prototype.openDialog=function(e){this.setNonSaveableDataState({dialogContainers:this.state.dialogContainers.concat(e)})},t.prototype.closeDialog=function(){var e=this.state.dialogContainers,t=e.length;for(t&&this.setNonSaveableDataState({dialogContainers:e.slice(0,t-1)});this.dialogs.length>=t;)this.dialogs.pop()},t.prototype.refDialog=function(e,t){this.dialogs[t]=e},t.prototype.onKeyDown=function(e){if(83===e.which&&(e.ctrlKey||e.metaKey)){if(e.preventDefault(),this.state.dialogContainers.length>0)return void this.saveDialog();this.save()}else if(27===e.which&&this.state.dialogContainers.length>0)this.closeDialog(),e.preventDefault();else if(13===e.which){var t=e.target;this.state.dialogContainers.length>0&&"TEXTAREA"!==t.tagName&&"INPUT"!==t.tagName&&"SELECT"!==t.tagName&&"OPTION"!==t.tagName&&!t.contentEditable&&this.saveDialog()}},t.prototype.beforeUnload=function(e){if((this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!p.a.kedBackendClient.http.bearerProvider.wantsRedirect)return e.returnValue=Ue,e.returnValue},t.prototype.onClickPreventUnload=function(e){if(e.target&&"a"===(""+e.target.tagName).toLowerCase()){var t=e.target;if(t.href&&"#"!==t.getAttribute("href")&&!t.target&&(this.state.dialogContainers.length>0||this.state.hasUnsavedData)&&!confirm(Ue))return e.preventDefault(),e.stopPropagation(),!1}},t.prototype.saveDialog=function(){if(this.state.dialogContainers.length>0){var e=this.dialogs[this.state.dialogContainers.length-1];e&&e.save()}},t.prototype.render=function(){var e=this,t=(p.a.currentUser.roles.indexOf("ADMIN"),this.state.course);return this.state.course?o.createElement("div",{style:{outline:0}},o.createElement(v.a,{title:t.name+" - "+t.points+"p",activePage:this.state.view,routes:{studentPage:Object(N.f)(this.props.viewCourseUrl,{courseId:this.props.id}),feedback:this.props.feedbackUrl},host:this,course:t,origCourse:this.state.origCourse,backgroundImage:t.images.filter(function(e){return e.id===t.imageId}).map(function(e){return e.url})[0],isTemplate:t.isTemplate}),o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},o.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer",ref:function(t){return e.contentDiv=t}},o.createElement(Re,{course:this.state.course,origCourse:this.state.origCourse,host:this}),o.createElement("br",null),this.state.dialogContainers.map(function(t,n){var r=t.Component,a=t.props;return o.createElement("div",{key:n},o.createElement("div",{className:"darken"}),o.createElement("div",{className:"modal-page-wrap"},o.createElement("div",{className:"modal-page"},o.createElement(r,s.a({ref:function(t){return e.refDialog(t,n)}},a)),o.createElement(ke.a,{onClick:function(){return e.closeDialog()}}))))})))))):o.createElement("div",{style:{outline:0}},o.createElement(v.a,{title:"",activePage:this.state.view,routes:{feedback:this.props.feedbackUrl}}),o.createElement("p",null,o.createElement(U.a,null),"V.g. vänta medan kursen laddas..."))},t}(o.Component),Pe=function(e){function t(t){var n=e.call(this,t)||this;return n.state={courseOptions:null,selectedTemplateId:"--",courses:null,selectedCourseId:""},n}return s.c(t,e),t.prototype.componentDidMount=function(){this.load().catch(l.n)},t.prototype.load=function(){return s.b(this,void 0,void 0,function(){var e,t,n;return s.d(this,function(r){switch(r.label){case 0:return Object(l.o)("Laddar kurser"),[4,p.a.kedBackendClient.list("subjects",{tags:["schoolType:gymnasium"],include:"courseTemplates"})];case 1:return e=r.sent(),t=Object(l.k)(e.map(function(e){return e.courseTemplates})).sort(Object(l.g)("name")),n=[{id:"--",name:"--"}].concat(t),Object(l.o)(""),this.setState({courseOptions:n}),[2]}})})},t.prototype.onSelectCourse=function(e){return s.b(this,void 0,void 0,function(){var t,n,r,a,i;return s.d(this,function(o){switch(o.label){case 0:return[4,p.a.kedBackendClient.list("courses",{hasEdgesTo:[e]})];case 1:return t=o.sent(),n=t.filter(function(e){return e.active}).map(function(e){var t=e.id,n=e.school,r=e.description,a=e.createdBy,i=e.modifiedBy;r&&(r=Object(l.l)(r,80));var s=r||(a?a.name+"s version":i&&i.name+"s version");return{id:t,name:"standard"===n?r?"Standard - "+r:"Standard":n+" - "+Object(l.l)(s,90),school:n}}).sort(Object(l.g)("name")),r=n.filter(function(e){return"standard"===e.school}),a=n.filter(function(e){return"standard"!==e.school}),i=s.g(r,[{id:e,name:"Tom"}],a),this.setState({courses:i,selectedTemplateId:e,selectedCourseId:i[0].id}),[2]}})})},t.prototype.render=function(){var e=this,t=this.state,n=t.courseOptions,r=(t.selectedTemplateId,t.courses),a=t.selectedCourseId;return o.createElement("div",{style:{outline:0}},o.createElement(v.a,{title:Object(l.a)(ve||(ve=s.e(["Kursbyggaren"],["Kursbyggaren"]))),activePage:"courseBuilder",routes:{feedback:this.props.feedbackUrl}}),o.createElement("div",{className:"sv-row sv-layout"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},o.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},o.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},o.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},o.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-7"},o.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},o.createElement("h2",null,"Skapa ny kurs"),o.createElement("hr",null),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"Välj gymnasiekurs :"))),o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},n?o.createElement("select",{value:this.state.selectedTemplateId,onChange:function(t){return e.onSelectCourse(t.target.value).catch(l.n)}},n.map(function(e){return o.createElement("option",{key:e.id,value:e.id},e.name)})):o.createElement("div",null,o.createElement(U.a,null),o.createElement("select",{disabled:!0,value:""},o.createElement("option",null,"--"))))),r&&o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("p",null,"Utgå från version: "))),r&&o.createElement("div",{className:"align-horizontal spaced"},o.createElement("div",{className:"horizontalItem top"},o.createElement("select",{value:a,onChange:function(t){return e.setState({selectedCourseId:t.target.value})}},r.map(function(e){return o.createElement("option",{key:e.id,value:e.id},e.name)})))),o.createElement("br",null),o.createElement("br",null),r&&a&&o.createElement(c.b,{to:"/courses/create-from-template/"+this.state.selectedCourseId,className:"btn btn-large"},"Skapa"))),o.createElement("div",{className:"sv-layout sv-column-5"},o.createElement(Se,null))))))))},t}(o.Component),Le=n(10),_e=n.n(Le),Be=3e5,qe="/4.4b4cce2a160e445593f16043.html",ze=Date.now();function Ke(){ze=Date.now()}function Fe(){Date.now()-ze<Be&&function(){s.b(this,void 0,void 0,function(){var e,t;return s.d(this,function(n){switch(n.label){case 0:console.log("Sending heartbeat request to "+qe),n.label=1;case 1:return n.trys.push([1,3,,4]),[4,fetch(qe,{cache:"no-cache",credentials:"same-origin"})];case 2:return e=n.sent(),console.log("Response from "+qe+": "+e.status+" "+e.statusText),[3,4];case 3:return t=n.sent(),console.warn("Request to "+qe+" failed: "+t),[3,4];case 4:return[2]}})})}()}n.d(t,"a",function(){return He}),setInterval(Fe,Be),setTimeout(function(){return _e()("body").mousemove(Ke).keypress(Ke).scroll(Ke)},100);var $e,He=function(e){function t(t){return e.call(this,t)||this}return s.c(t,e),t.prototype.render=function(){var e=this,t=p.a.currentUser.roles.some(function(e){return"ADMIN"===e||"EMPLOYEE"===e}),n=p.a.currentUser.roles.some(function(e){return"ADMIN"===e});return o.createElement("div",{className:"course-builder"},o.createElement(c.a,null,t?o.createElement("div",null,o.createElement(c.d,{exact:!0,path:"/",render:function(t){t.match;return n?o.createElement(d.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl}):o.createElement(Pe,{feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/schools",render:function(t){t.match;return o.createElement(d.a,{viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/schools/new/gymnasium",render:function(){return o.createElement(h,{type:"gymnasium",feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/schools/new/primary",render:function(){return o.createElement(h,{type:"primary",feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/schools/:id/edit",render:function(t){var n=t.match;return o.createElement(m.a,{id:n.params.id,title:Object(l.a)($e||($e=s.e(["Editera skola"],["Editera skola"]))),feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/subjects",render:function(){return o.createElement(b,{feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{path:"/subjects/:id",render:function(t){var n=t.match;return o.createElement(f.a,{id:n.params.id,feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{exact:!0,path:"/courses/new",render:function(){return o.createElement(Pe,{feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{path:"/courses/create-from-template/:templateId",render:function(t){var n=t.match;return o.createElement(Ae,{templateId:n.params.templateId,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}}),o.createElement(c.d,{path:"/courses/:id/edit",render:function(t){var n=t.match;return o.createElement(Ae,{id:n.params.id,view:"courseBuilder",viewCourseUrl:e.props.viewCourseUrl,feedbackUrl:e.props.feedbackUrl})}})):o.createElement("div",null,o.createElement(c.d,{path:"/",render:function(){return o.createElement("div",null,o.createElement(v.a,{title:"Kursbyggaren",activePage:"courseBuilder",routes:{feedback:e.props.feedbackUrl}}),o.createElement("h2",null,"Behörighet saknas"),o.createElement("p",null,"Detta verktyg är endast till för anställda på Kunskapsskolan."),o.createElement("h3",null,"Användarattribut"),o.createElement("table",{className:"ked_boxed",style:{border:"1px solid #eee"}},o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Attribut"),o.createElement("th",null,"Värde"))),o.createElement("tbody",null,Object.keys(p.a.currentUser).map(function(e){return o.createElement("tr",{key:e},o.createElement("td",null,e),o.createElement("td",null,p.a.currentUser[e]))}))))}}))),o.createElement(u.a,null))},t}(o.Component)},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t,n){"use strict";n.r(t);var r=n(1),a=(n(110),n(79),n(3)),i=n(0),s=n(144),o=n(93),l=function(e){function t(t){var n=e.call(this,t)||this;return location.hash||(location.hash="#/"),n}return r.c(t,e),t.prototype.render=function(){return a.a.currentUser?i.createElement(s.a,{viewCourseUrl:"courseviewer.html",feedbackUrl:"http://svt.se/nyheter"}):i.createElement(o.a,null)},t}(i.Component);t.default=l}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9bbmFtZV0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vW25hbWVdL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmVudi50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMvS0VELmNmZy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vZXh0ZXJuYWwgXCJqUXVlcnlcIiIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1zdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL3V0aWxzLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9jYWNoZS1idXN0LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9kZWx0YS1tZXJnZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1xdWVyeS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9xdWVyeS1zZXQuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1yZXBvL211dGF0aW9uLXF1ZXVlLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtcmVwby9rZWRiYWNrZW5kLXdyaXRlci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLXJlcG8va2VkYmFja2VuZC1yZXBvLmpzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWxzL2RiLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2V4ZWMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2FjY2Vzcy1jb250cm9sL2luZGV4LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hY2Nlc3MtY29udHJvbC9nZXQtdXNlci1jbGFpbXMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvc3Bpbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3F1ZXJ5LXN0cmluZy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci91dGlscy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC13ZWIvYmVhcmVyLXN0b3JhZ2Utc2Vzc2lvbnN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvbWlncmF0ZS10YXNrLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLW1vZGVsLW1pZ3JhdG9yL21pZ3JhdGUuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvbWlncmF0ZS1jb3Vyc2UuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtbW9kZWwtbWlncmF0b3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViL2hhc2gtcmVzdG9yZXIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQtd2ViL2luZGV4LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2NsaWVudHdlYi5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9yZXN0Y2xpZW50LmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMva2VkLWJhY2tlbmQtY2xpZW50L2tlZC1iZWFyZXItcHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvYWNjZXNzLWNvbnRyb2wuanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQvaHR0cC1lcnJvci5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC9pbmRleC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdXRpbHMvc2Nob29sLW1vbWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gudHN4Iiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS9lbWl0dGVyLmpzIiwid2VicGFjazovL1tuYW1lXS8uLi9rZWRiYWNrZW5kL2pzL2Rpc3QvanMvb2JzZXJ2YWJsZS92YWx1ZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvb2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZ2xvYmFscy9LRUQudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbHMva2VkLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9hcGlzL2Vkc2NsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9yZW1vdmUtaXRlbS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4uL2tlZGJhY2tlbmQvanMvZGlzdC9qcy9vYnNlcnZhYmxlL21hcC5qcyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2NvdXJzZS1iYW5uZXIudHN4Iiwid2VicGFjazovL1tuYW1lXS9leHRlcm5hbCBcIlJlYWN0RE9NXCIiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL3NjaG9vbC10ZXJtLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvd2FzaC1odG1sLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvaW5kZXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2ltYWdlLWVkaXQtYWN0aW9ucy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi4va2VkYmFja2VuZC9qcy9kaXN0L2pzL29ic2VydmFibGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvY291cnNlcy9idXNpbmVzcy1sb2dpYy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zZWxlY3QtcmVsYXRlZC1kb2NzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy91dGlsaXR5LWNvbXBvbmVudHMvcmVuYW1lYWJsZS10ZXh0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvdGVzdC9kYXRhL3VzZXJzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9lcnJvci1zdWNjZXNzLWZlZWRiYWNrLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvcmVwb3MvcmVwby50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvZmVhdHVyZXMvZmVhdHVyZXMudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2ZlYXR1cmVzL2luZGV4LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1Yi1jb21wb25lbnRzL2tub3dsZWRnZS1tYXRyaXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9jb25maWd1cmUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2dsb2JhbC1zZXR0ZXJzL3NldC1iZWFyZXItcHJvdmlkZXJzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9zZXQta2VkLWJhY2tlbmQtY2xpZW50LnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9nbG9iYWwtc2V0dGVycy9zZXQtZWRzLWNsaWVudC50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zY2hvb2xzL2VkaXQtc2Nob29sLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy9zaG93LXN1YmplY3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3Nob3ctc3ViamVjdC1pbm5lci50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbnRyYWN0cy9rZWQtbW9kZWxzLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L3V0aWxzL2Nob29zZS11c2VyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zY2hvb2xzL2VkaXRhYmxlLXNjaG9vbC1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zY2hvb2xzL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svdGFzay1taWdyYXRpb24tYm94LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy9za29sdmVya2V0LXN1YmplY3QudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvZGlmZi9taWdyYXRlLXN1YmplY3QudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViamVjdHMvZGlmZi9kaWZmLXhtbC13aXRoLWRhdGFiYXNlLnRzIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3VwbG9hZGVkLXN1YmplY3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL3N1YmplY3RzL3N1YmplY3RzLWlubmVyLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZSBzeW5jIHN2fGVuIiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L3NldC1jdXJyZW50LXVzZXIudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc2Nob29scy9uZXctc2Nob29sLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWJqZWN0cy9pbmRleC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC1yZXNvdXJjZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtcmVzb3VyY2UtbGlzdC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL3V0aWxzL2NhY2hlZC1yZXNwb25zZS50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svc2VhcmNoLXJlc3VsdHMudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL21vZGFsLXBhZ2VzL2VkaXQtdGFzay9iYXNpYy1lZGl0YWJsZS10YXNrLWZpZWxkcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL3Rhc2stc3RhdHVzLWZyYWdtZW50LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svc2F2ZS1vci1jYW5jZWwtYnV0dG9ucy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL3Rhc2stY29udGVudC1mcmFnbWVudC50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC10YXNrL3ByZXZpZXdhYmxlLXRhc2stZmllbGRzLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9tb2RhbC1wYWdlcy9lZGl0LXRhc2svZWRpdC10YXNrLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9lZGl0YWJsZS10YXNrLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9jb21wb25lbnRzL2NvdXJzZS1idWlsZGVyL2NvdXJzZXMvY291cnNlLW1vZHVsZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvY291cnNlcy9jb3Vyc2UtbW9kdWxlLWxpc3QudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy9yZXBvcy9zY2hvb2wtY291cnNlcy50cyIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9zY2hvb2wtY291cnNlcy50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtdGVhY2hlci1saXN0LnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy93ZWlnaHRlZC1pdGVtcy10YWJsZS50c3giLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvbW9kYWwtcGFnZXMvZWRpdC13b3JrZmxvdy1saW5rLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9zdWItY29tcG9uZW50cy9lZGl0YWJsZS13b3JrZmxvdy1saW5rLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2lubmVyLWVkaXQtY291cnNlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2VkaXQtY291cnNlLnRzeCIsIndlYnBhY2s6Ly9bbmFtZV0vLi9zcmMvY29tcG9uZW50cy9jb3Vyc2UtYnVpbGRlci9jb3Vyc2VzL2NyZWF0ZS1uZXcudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy91dGlscy9rZWVwLXNlc3Npb24tYWxpdmUudHMiLCJ3ZWJwYWNrOi8vW25hbWVdLy4vc3JjL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvaW5kZXgudHN4Iiwid2VicGFjazovL1tuYW1lXS8uL3NyYy90ZXN0L3Rlc3RwYWdlLWNvdXJzZWJ1aWxkZXIudHN4Il0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiNyIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiUmVhY3QiLCJjYXBpdGFsaXplRmlyc3QiLCJzdHIiLCJjaGFyQ29kZUF0Iiwic3Vic3RyIiwidG9Mb2NhbGVVcHBlckNhc2UiLCJleHRlbmQiLCJvYmoiLCJleHRlbnNpb24iLCJrZXlzIiwiZm9yRWFjaCIsImNsb25lIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmNhdCIsImZsYXR0ZW4iLCJhIiwiY29tcGFyZVByb3AiLCJwcm9wIiwiYiIsImFQcm9wIiwiYlByb3AiLCJjb21wYXJlUHJvcHMiLCJwcm9wcyIsImxvY2FsZXMiLCJvcHRpb25zIiwiQXJyYXkiLCJpc0FycmF5IiwibG9jYWxlQ29tcGFyZSIsIm1hcCIsInNwbGl0IiwiX2EiLCJfYiIsInRzbGliX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJmaXJzdFBhcnQiLCJyZXN0IiwiY21wUGFydCIsImZpcnN0QSIsImZpcnN0QiIsInJlZHVjZSIsImNtcDEiLCJjbXAyIiwiTCIsInRleHQiLCJhcmdzIiwiX2kiLCJhcmd1bWVudHMiLCJydiIsImJ1aWxkTWVzc2FnZSIsImRhdGVUaW1lUmV2aXZlciIsImV4ZWMiLCJEYXRlIiwic2hvd0luZm8iLCJtc2ciLCJldmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsInNob3dFcnJvciIsImVyck1zZyIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJtYXhMZW5ndGgiLCJtYXhMZW4iLCJhcnJheVRvTG9va3VwIiwia2V5QWNjZXNzb3IiLCJpdGVtIiwiYXJyYXkiLCJhcnJheVRvTWFwIiwiY2hlcnJ5UGlja1Byb3BzIiwicHJvcHNUb1BpY2siLCJwcm9wc1RvUGlja18xIiwicHJvcHNUb1BpY2tfMV8xIiwibmV4dCIsImRvbmUiLCJwYXJhbSIsImRpc3RpbmN0IiwieCIsInNoYWxsb3dFcXVhbHMiLCJrZXlzQSIsImtleXNCIiwiX2tlZF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZW52IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9qc19kaXN0X2pzX2tlZF9iYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX0tFRF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiY2ZnIiwialF1ZXJ5IiwiS2VkQmFja2VuZFN1YnNjcmlwdGlvbiIsInN1YnNjcmliZXIiLCJjb2xsZWN0aW9uIiwidGhpcyIsIm5vdGlmeVN1YnNjcmliZXIiLCJsYXN0Tm90aWZpZWREYXRhIiwiZXgiLCJleDIiLCJ1bnN1YnNjcmliZSIsImdldFRhYmxlRnJvbUxhYmVsIiwidGFibGUiLCJsYWJlbCIsInNjaGVtYSIsInJlbGF0aW9uc2hpcHMiLCJxdWVyeUFycmF5IiwicXVlcnkiLCJmaWx0ZXIiLCJmcm9tIiwiQU5EIiwiZGF0ZVRpbWUiLCJ0byIsImlkcyIsImluY2x1ZGVzIiwiaWQiLCJ0YWdzIiwic29tZSIsInRhZyIsImdldEZpbHRlckZyb21RdWVyeSIsImZpbHRlcjEiLCJmaWx0ZXIyIiwiYnJhbmNoU2Vuc2l0aXZlIiwib3AiLCJnbG9iYWxPcCIsImNhY2hlX2J1c3RfQ2FjaGVCdXN0IiwiQ2FjaGVCdXN0IiwiZ2V0Q2FjaGVCdXN0IiwidXNlciIsImdldEludm9sdmVkSXRlbXMiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiam9pbiIsImludmFsaWRhdGVDYWNoZSIsInJlcXMiLCJnZXRDYWNoZUludmFsaWRhdGlvbnMiLCJzZXRJdGVtIiwibm93IiwiaGFzRWRnZXNGcm9tIiwicmVsYXRlZFRhYmxlcyIsImJyYW5jaElkIiwic29ydCIsImludmFsaWRhdGlvblNldCIsInJlcSIsInNvdXJjZVRhYmxlIiwidGFyZ2V0QnJhbmNoSWQiLCJhcHBseURlbHRhIiwiZG9jIiwiZGVsdGEiLCJ0YXJnZXREb2MiLCJrZXlzXzEiLCJ0c2xpYl9lczYiLCJ2YWwiLCJtZXRhSW5zdHJ1Y3Rpb25zIiwic3RhcnRzV2l0aCIsIl9sb29wXzEiLCJtaSIsIm1pVmFsdWUiLCJ2YWx1ZXNUb0FkZCIsIkVycm9yIiwidGFyZ2V0QXJyYXkiLCJ2YWx1ZXNUb0FkZF8xIiwidiIsInZhbHVlc1RvUmVtb3ZlXzEiLCJtZXRhSW5zdHJ1Y3Rpb25zXzEiLCJtZXJnZURlbHRhcyIsImRlbHRhMSIsImRlbHRhMiIsInRhcmdldERlbHRhIiwia2V5c18yIiwiX2xvb3BfMiIsInZhbHVlc1RvQWRkXzIiLCJ0YXJnZXRNZXRhUHJvcCIsInRhcmdldFJlbW92ZUFycmF5IiwiJHJlbW92ZSIsInRhcmdldEFkZEFycmF5IiwiJGFkZCIsInZhbHVlc1RvUmVtb3ZlXzIiLCJtZXRhSW5zdHJ1Y3Rpb25zXzIiLCJrZWRiYWNrZW5kX3F1ZXJ5X0tlZEJhY2tlbmRRdWVyeSIsIktlZEJhY2tlbmRRdWVyeSIsInJlcG8iLCJtdXRhdGlvblF1ZXVlIiwic3Vic2NyaXB0aW9ucyIsImdvdEluaXRpYWxSZXNwb25zZSIsImludmFsaWQiLCJsb2FkZWRWZXJzaW9uIiwiX2xvYWRQcm9taXNlIiwiaW5jbHVkZSIsInF1ZXJ5S2V5IiwibXV0YXRpb25zT25FbXB0eSIsImNvbXBhcmFibGVQcm9wcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25maWd1cmFibGUiLCJzdWJzY3JpYmUiLCJzdWJzY3JpcHRpb24iLCJnZXREYXRhV2l0aE11dGF0aW9uc0FwcGxpZWQiLCJxdWVyeUxvY2FsbHkiLCJsb2FkIiwic2VudCIsInZlcnNpb24iLCJsb2FkUHJvbWlzZSIsIl90aGlzIiwid3JpdGVyIiwicGVyc2lzdGVkVmVyc2lvbiIsIl9sb2FkIiwidGhlbiIsIk1hdGgiLCJtYXgiLCJjYXRjaCIsIm5vdGlmeVN1YnNjcmliZXJzIiwiYWZmZWN0c1F1ZXJ5Iiwid2FpdEZvclZlcnNpb25Ub1BlcnNpc3QiLCJxdWVyeVNlcnZlciIsImNvbW1pdE11dGF0aW9ucyIsIm11dGF0aW9ucyIsIm11dGF0aW9uc18xIiwicmVmcmVzaE9ySW52YWxpZGF0ZSIsImRlbHRhRG9jIiwib3B0aW1pc3RpY011dGF0aW9ucyIsImRhdGFfMSIsInF1ZXJ5U2V0IiwiZ2V0Q2xpZW50IiwibGlzdCIsIm9wdGltaXN0aWMiLCJtdXRhdGlvbiIsImFwcGx5TXV0YXRpb25zT25EYXRhIiwibGlzdE9wdGlvbnMiLCJzb3VyY2VJZHMiLCJyZXF1ZXN0ZWRUYWdzIiwidXRpbHMiLCJ1cGRhdGVkRG9jIiwiJG1ldGEiLCJpbmNsdWRlZERvY3MiLCJ1cGRhdGVkQXJyYXkiLCJyZWxhdGVkIiwidXBkYXRlZFJlbGF0ZWQiLCJpbmRleE9mIiwiZ3JhcGhQcm9wIiwicmVsYXRlZERvYyIsInNldEdyYXBoUHJvcHMiLCJyZWxhdGVkSWQiLCJsYWJlbHNfMSIsInJlbGF0ZWREb2NzIiwiY29weSIsImtlZGJhY2tlbmRfY29sbGVjdGlvbl9LZWRCYWNrZW5kQ29sbGVjdGlvbiIsIl9zdXBlciIsIktlZEJhY2tlbmRDb2xsZWN0aW9uIiwib2JzZXJ2ZXIiLCJfaW5jbHVkZXMiLCJhcHBseVF1ZXJ5IiwiYWRkVG9RdWVyeUFycmF5UHJvcCIsImFycmF5UHJvcCIsImVudHJpZXMiLCJhZGRGbGFncyIsImZsYWdzIiwiZGVidWciLCJpZHNPbmx5IiwiaWRzQW5kTmFtZXNPbmx5IiwiaW5jbHVkZUlkc09ubHkiLCJpbmNsdWRlSWRzQW5kTmFtZXNPbmx5IiwiYmV0d2VlbiIsInJvbGUiLCJoZWYiLCJpbmNsdWRlRGVsdGFFZGdlcyIsImhhc0VkZ2VzVG8iLCJoZXQiLCJzaW5nbGUiLCJvblplcm8iLCJvbk1hbnkiLCJncmFwaHMiLCJjYWNoZU9wdGltaXplZCIsImNhY2hlQnVzdCIsImdldFVzZXIiLCJtdXRhdGlvbkZhY3RvcnkiLCJ0eCIsImtlZF9iYWNrZW5kX2NsaWVudCIsIm11dGF0aW9uUmVxdWVzdHMiLCJ0aHJvd2VycyIsInRvVmFsdWUiLCJpdGVtcyIsImxvZyIsInVwZGF0ZSIsImNoYW5nZXMiLCJkZWJvdW5jZSIsIm11dGF0ZSIsImFkZFJlbGF0ZWQiLCJyZW1vdmVSZWxhdGVkIiwiZGVsZXRlIiwicXVlcnlfc2V0X1F1ZXJ5U2V0IiwiUXVlcnlTZXQiLCJxdWVyaWVzIiwiUHJvbWlzZSIsImFsbCIsInEiLCJjbGVhbnVwSW52YWxpZFF1ZXJpZXMiLCJ0aW1lb3V0SGFuZGxlIiwiY2xlYXJUaW1lb3V0IiwiZmluZFF1ZXJ5IiwiZmluZCIsInFJbmNsdWRlcyIsInJlc18xIiwiZW50aXR5IiwicmVzdWx0XzEiLCJldmVyeSIsInJlc3VsdF8yIiwic3RhdGVfMSIsImtiUXVlcnkiLCJzZXRUaW1lb3V0IiwibXV0YXRpb25fcXVldWVfTXV0YXRpb25RdWV1ZSIsIk11dGF0aW9uUXVldWUiLCJxdWV1ZSIsInNhdmluZ1F1ZXVlIiwiYWRkIiwibWVyZ2UiLCJtb3ZlVG9TYXZpbmdRdWV1ZSIsImNsZWFyU2F2aW5nUXVldWUiLCJxdWV1ZTEiLCJxdWV1ZTIiLCJtdXRhYmxlUXVldWUxIiwibXV0YWJsZVF1ZXVlMiIsImxlbiIsIm92ZXJsYXBwaW5nSWRPcElkeCIsImZpbmRJbmRleCIsIm5ld011dCIsImtlZGJhY2tlbmRfd3JpdGVyX0tlZEJhY2tlbmRXcml0ZXIiLCJLZWRCYWNrZW5kV3JpdGVyIiwiX3RpbWVvdXRJZCIsIl9pc1NhdmluZ1Byb21pc2UiLCJjdXJyZW50VmVyc2lvbiIsIm9ic2VydmFibGUiLCJlcnJvclN1YnNjcmliZXJzIiwic3RhdGVTdWJzY3JpYmVycyIsIm9uRXJyb3IiLCJjYWxsYmFjayIsIm9uU3RhdGVDaGFuZ2UiLCJvZmYiLCJkaXNwYXRjaEVycm9yIiwicmV0cnlhYmxlIiwiXyIsImRpc3BhdGNoU3RhdGVDaGFuZ2UiLCJzYXZlIiwicmV0cnlTYXZlIiwiaXNFZGl0ZWQiLCJfc2F2ZSIsInJlc29sdmUiLCJldGFnTXV0YXRpb25zIiwiZXJyb3JfMSIsIm1hcE11dGF0aW9ucyIsInRyeXMiLCJiYXRjaCIsIm5ld0V0YWdzIiwiJGV0YWciLCJkaXNwYXRjaCIsImJyIiwibGluazIiLCJ1bmxpbmsyIiwiY2xlYXJCcmFuY2giLCJrZWRiYWNrZW5kX3JlcG9fS2VkQmFja2VuZFJlcG8iLCJLZWRCYWNrZW5kUmVwbyIsImRlZmF1bHRRdWVyeU9wdGlvbnMiLCJfY2xvbmUiLCJxdWVyeU9wdGlvbnMiLCJ1bmRlZmluZWQiLCJicmFuY2giLCJvcHRpbWl6ZUNhY2hlIiwic2F2ZU5vdyIsImRiIiwiZ2xvYmFsSWQiLCJTY2hvb2xzIiwiQ291cnNlSW5zdGFuY2VzIiwiS0VEX2VudiIsImtlZEJhY2tlbmRDbGllbnQiLCJjdXJyZW50VXNlciIsIm1haWwiLCJjbGllbnQiLCJLRURfY2ZnIiwiS0VEX1JFQUxNIiwic3RhbmRhcmRTY2hvb2wiLCJzY2hvb2xzIiwibXlTY2hvb2wiLCJzY2hvb2wiLCJnZXRCcmFuY2hJZCIsImNvdXJzZUlkIiwic3dpdGNoTWFwIiwiYnJhbmNoZXMiLCJvZmZpY2lhbEJyYW5jaElkIiwiZ2V0T3JDcmVhdGVCcmFuY2hJZCIsImNvdXJzZUluc3RhbmNlcyIsImFjbCIsInNjaG9vbElkIiwidHJlZVBhcmVudElkIiwiZ2V0QWxsRGVzY2VuZGFudElkcyIsImNvdXJzZUJsb2NrcyIsImNvdXJzZUNvbnRlbnRzIiwiY291cnNlVGFicyIsInRhc2tzIiwiY29tbWFuZCIsImRvY3VtZW50IiwiZXhlY0NvbW1hbmQiLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyIsImhhc0FjY2VzcyIsInJlcXVlc3RlZFJpZ2h0IiwiY2xhaW1zIiwidHlwZSIsInJvbGVzIiwiZ2V0VXNlckNsYWltcyIsInR1dG9yRm9yIiwiY2xhaW0iLCJmcm9tU3RyaW5nQXJyYXkiLCJoYXNXcml0ZUFjY2VzcyIsImlzVGVhY2hlckF0U2Nob29sIiwiaXNUZWFjaGVyIiwiYmVsb25nc1RvU2Nob29sIiwidG9Mb3dlckNhc2UiLCJpc0FkbWluT3JUZWFjaGVyQXRTY2hvb2wiLCJpbXBlcnNvbmF0aW9uRW52IiwiYWN0QXMiLCJ1cmwiLCJjdXJyZW50UXVlcnkiLCJxdWVyeV9zdHJpbmciLCJsb2NhdGlvbiIsInNlYXJjaCIsIm5ld1F1ZXJ5IiwibmV3UXVlcnlTdHJpbmciLCJocmVmIiwiaGFzaCIsInByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IiwicHJlc2VydmVkUXVlcnkiLCJJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNU18xIiwiSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVNfMV8xIiwicEhhc2giLCJTcGlubmVyIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsImNsYXNzTmFtZSIsImFyaWEtaGlkZGVuIiwiY3JlYXRlVVVJRCIsImF2b2lkU2ltdWx0YW5vdXNDYWxscyIsImdldEdsb2JhbElkIiwiY29tcHV0ZVByZWRlc3RpbmF0ZWRJZCIsInVwZGF0ZUFycmF5IiwicmVwbGFjZSIsInJhbmRvbSIsImZsb29yIiwidG9TdHJpbmciLCJtZXRob2QiLCJvbmdvaW5nUHJvbWlzZSIsInJlYWxtIiwicGFkIiwiaGV4IiwiaW5wdXQiLCJlbmNvZGVyIiwiZGlnZXN0IiwiVGV4dEVuY29kZXIiLCJlbmNvZGUiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwic3VidGxlIiwibmliYmxlIiwibWFwcGVyIiwicmV0dmFsIiwibWFwcGVkIiwicGFyc2VRdWVyeVN0cmluZyIsImxvY2F0aW9uU2VhcmNoIiwidG9Mb3dlciIsInBhcnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0cmltIiwiZW5jb2RlUGFyYW1zIiwicGFyYW1zIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2VuZXJhdGVRdWVyeVN0cmluZyIsInNwbGl0VXJsQW5kUXVlcnkiLCJ1cmxXaXRoUG9zc2libGVRdWVyeSIsInBRdWVyeSIsInVwZGF0ZURvY3VtZW50R3JhcGhzIiwib2xkRG9jIiwibmV3RG9jIiwiZG9jVXBkYXRlcyIsImRvY0lkIiwibmF2UHJvcCIsImZvcmVpZ25UYWJsZSIsIm9sZExpc3QiLCJuZXdMaXN0IiwidHVwbGVzIiwiaWR4IiwiYWRkZWQiLCJ0dXBsZSIsImFkZGVkXzEiLCJhZGRlZF8xXzEiLCJtZXRhIiwibXV0YXRlZFN1YkRvYyIsImtlZGJhY2tlbmRfY2xpZW50X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJwdXQiLCJsaW5rIiwiJHNldCIsInJlbW92ZWQiLCJyZW1vdmVkXzEiLCJyZW1vdmVkXzFfMSIsInVubGluayIsInVwZGF0ZWQiLCJ1cGRhdGVkXzEiLCJ1cGRhdGVkXzFfMSIsInUiLCJfYyIsInJlYWN0X2FkZG9uc191cGRhdGVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0IiwiZHRGb3JtYXQiLCJtb21lbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0IiwiZm9ybWF0Iiwic2hvcnREYXRlRm9ybWF0Iiwic2hvcnRQZXJzb25OYW1lRm9ybWF0IiwibmFtZXMiLCJsYXN0TmFtZSIsInBvcCIsInVwZGF0ZU1vZGlmaWNhdGlvblN0YW1wIiwibW9kaWZpZWREYXRlIiwibW9kaWZpZWRCeSIsImRpc3BsYXlOYW1lIiwidXBkYXRlQ3JlYXRpb25TdGFtcCIsImNyZWF0ZWREYXRlIiwiY3JlYXRlZEJ5IiwidXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMiLCJhcHBseUV0YWdzIiwicmVzIiwiZXRhZyIsImdyYXBoc18xIiwiZ3JhcGhzXzFfMSIsInJlYWRCbG9iIiwiYmxvYiIsInJlamVjdCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJldiIsInRhcmdldCIsIm9uYWJvcnQiLCJvbmVycm9yIiwicmVhZEJsb2JBc1RleHQiLCJyZWFkQXNUZXh0IiwiYWxsb3dDb3B5IiwiZSIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiZGF0YVRyYW5zZmVyIiwiZHJvcEVmZmVjdCIsInVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMiLCJzdGF0dXMiLCJkaXYiLCJqcXVlcnlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX19kZWZhdWx0IiwibG9hZENvdXJzZSIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsImluY2x1ZGVUZW1wbGF0ZUNoYWluIiwiaW5jbHVkZVRhc2tzIiwiY291cnNlIiwiY291cnNlVGFza3MiLCJ0ZW1wbGF0ZUNoYWluIiwiYWJpbGl0aWVzIiwiYWJpbGl0aWVzT3JkZXIiLCJrbm93bGVkZ2VSZXF1aXJlbWVudHMiLCJrbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlciIsImNlbnRyYWxDb250ZW50IiwiY2VudHJhbENvbnRlbnRPcmRlciIsImNjIiwiaGFzTWlncmF0ZWRUZXh0cyIsInRhc2siLCJtaWdyYXRlZFRleHRzIiwiQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIiwidG9rZW5JbmZvIiwic2Vzc2lvblN0b3JhZ2UiLCJqc29uIiwicGFyc2UiLCJ0b2tlbiIsImV4cGlyZXMiLCJtaWdyYXRlVGFzayIsInJlc291cmNlcyIsIm1pZ3JhdGUiLCJ0YXNrSWRzIiwicmVzcG9uc2libGVUZWFjaGVycyIsInJlc291cnNlcyIsIm1pZ3JhdGVDb3Vyc2UiLCJyZWRpckhhc2giLCJoYXNoX3Jlc3RvcmVyX2EiLCJ0aW1lIiwicmVtb3ZlSXRlbSIsIl9fbWlncmF0b3JfbWl4ZWRfaW4iLCJLZWRNb2RlbE1pZ3JhdG9yTWl4aW4iLCJzdG9yYWdlIiwidGltZU9mUGFnZUxvYWQiLCJrZWRfYmFja2VuZF9jbGllbnRfd2ViX1dlYlNlcnZlckJlYXJlclByb3ZpZGVyIiwiV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIiLCJ0b2tlblBhdGgiLCJ0b2tlblJlc3BvbnNlTWFwcGVyIiwidG9rZW5JZCIsImdldEJlYXJlciIsInJlZnJlc2hCZWFyZXIiLCJfZCIsIl9lIiwiZmV0Y2giLCJoZWFkZXJzIiwiQWNjZXB0IiwicmVkaXJlY3QiLCJjYWNoZSIsImNyZWRlbnRpYWxzIiwid2FudHNSZWRpcmVjdCIsInJlbG9hZCIsImlzb21vcnBoaWMiLCJzZWxmIiwiYnRvYSIsImtlZF9iYWNrZW5kX2NsaWVudF93ZWJfS2VkQmFja2VuZENsaWVudFdlYiIsIktlZEJhY2tlbmRDbGllbnRXZWIiLCJhcGlCYXNlVXJsIiwicHJvdmlkZXJPclRva2VuUGF0aCIsImJlYXJlclByb3ZpZGVyIiwicmVzdGNsaWVudF9SZXN0Q2xpZW50IiwiUmVzdENsaWVudCIsImJhc2VVcmwiLCJudW1PdXRzdGFuZGluZ09wZXJhdGlvbnMiLCJfc3RhdHVzIiwiZW1pdHRlciIsImZldGNoT3B0aW9ucyIsImF1dGhIZWFkZXIiLCJiZWFyZXIiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwicGF0aCIsIl9mZXRjaCIsImVyciIsInF1ZXJ5U3RyIiwid3d3YXV0aCIsIm5vY2FjaGUiLCJBdXRob3JpemF0aW9uIiwidGVzdCIsInBvc3QiLCJDb250ZW50LVR5cGUiLCJib2R5Iiwia2VkX2JlYXJlcl9wcm92aWRlcl9LZWRCZWFyZXJQcm92aWRlciIsIktlZEJlYXJlclByb3ZpZGVyIiwiY2xpZW50SWQiLCJjbGllbnRTZWNyZXQiLCJ0b2tlblVybCIsInRva2VuUXVlcnkiLCJyZXRyaWVzIiwid2FybiIsInN0YXR1c1RleHQiLCJEb2N1bWVudEFjY2VzcyIsImFjY2Vzc0NsYWltVHlwZSIsImFjY2Vzc0NsYWltVmFsdWUiLCJyaWdodCIsImZyb21TdHJpbmciLCJhYyIsImNsYWltVHlwZSIsInVuZXNjYXBlIiwiY2xhaW1WYWx1ZSIsImVzY2FwZSIsImFjY2Vzc0NvbXBvbmVudCIsInRvU3RyaW5nQXJyYXkiLCJ1c2VyQ2xhaW1zIiwiaHR0cF9lcnJvcl9IdHRwRXJyb3IiLCJIdHRwRXJyb3IiLCJjb2RlIiwia2VkX2JhY2tlbmRfY2xpZW50X0tlZEJhY2tlbmRDbGllbnQiLCJrZWRfYmFja2VuZF9jbGllbnRfQmF0Y2hSdW5uZXIiLCJLZWRCYWNrZW5kQ2xpZW50IiwiaHR0cCIsImdldE15Q2xhaW1zIiwicmVxMSIsInJlcTIiLCJkbyIsInNjb3BlRm4iLCJydW5uZXIiLCJkZWxldGVSZWFsbSIsInNoYXJlIiwidW5zaGFyZSIsInNvdXJjZUlkIiwidGFyZ2V0VGFibGUiLCJ0YXJnZXRJZCIsIkJhdGNoUnVubmVyIiwiZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSIsInRlcm0iLCJnZXRUZXJtU3RhcnRBbmRFbmQiLCJtb250aCIsInllYXIiLCJnZXRTY2hvb2xNb21lbnQiLCJ0aGlzWWVhciIsImlzQXV0dW1uIiwiYWNhZGVtaWNZZWFyIiwid2VlayIsImFkZFllYXIiLCJhWWVhciIsIm51bVllYXJzVG9BZGQiLCJ5ZWFyU3RyIiwicGFyc2VJbnQiLCJPcGVuQ2xvc2VCb3giLCJyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwic3RhdGUiLCJoZWFkZXJPcGVuIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsInNldFN0YXRlIiwicmVuZGVyIiwidGl0bGUiLCJjaGlsZHJlbiIsImhlYWRlckNsYXNzTmFtZSIsImNvbnRlbnRDbGFzc05hbWUiLCJvbkNsaWNrIiwib25PcGVuQ2xvc2UiLCJFbWl0dGVyIiwiaW5pdGlhbFZhbHVlIiwic3Vic2NyaWJlcnMiLCJfZGlzcGF0Y2giLCJWYWx1ZSIsIl9vYnNlcnZhYmxlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18iLCJfbWFwX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJfY29sbGVjdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwic3Vic2NpcHRpb24iLCJmbiIsInByZWZpeCIsInRvQ29sbGVjdGlvbiIsImNvbWJpbmVMYXRlc3QiLCJvdGhlciIsIm15U3Vic2NyaXB0aW9uIiwib3RoZXJTdWJzY3JpcHRpb24iLCJ2YWx1ZXMiLCJtYXBwZWRTdWJzY3JpcHRpb24iLCJyZXR1cm5lZFN1YnNjcmlwdGlvbiIsIm9ic2VydmFibGVPclZhbHVlIiwiT2JzZXJ2YWJsZSIsIl9zdWJzY3JpYmUiLCJLRUQiLCJDb2xsZWN0aW9uIiwiX3ZhbHVlX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJfZW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwiX21hcCIsImVtaXR0ZXJfMSIsImZsYXQiLCJtZSIsIm9yZGVyQnkiLCJncm91cEJ5IiwiZmlyc3QiLCJhcnIiLCJFZHNDbGllbnQiLCJ1c2VyRW1haWxHZXR0ZXIiLCJrZWRiYWNrZW5kX2NsaWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwiZ2V0QWN0aXZlQ291cnNlcyIsImdldExhdGVzdEFzc2Vzc21lbnRzIiwiZ2V0U3R1ZGVudEdvYWxzIiwiZ2V0U3R1ZGVudEZ1dHVyZUFiaWxpdGllcyIsImdldFRlYWNoZXJUdXRvclN0dWRlbnRzIiwicHJpdmF0aXppbmdDYWNoZUJ1c3QiLCJjb3Vyc2VDb2RlIiwiQ291cnNlQ29kZSIsInBlcmlvZE5hbWUiLCJQZXJpb2ROYW1lIiwiY291cnNlcyIsImV4XzEiLCJfdXRpbHNfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsInRlbXBsYXRlT2JqZWN0XzEiLCJsaW1pdCIsImlzTmFOIiwiQ291bnQiLCJhc3Nlc3NtZW50cyIsInN0dWRlbnRHb2FscyIsInN0dWRlbnRGdXR1cmVBYmlsaXRpZXMiLCJzdHVkZW50cyIsIkVEU1BlcmlvZCIsInBlcmlvZFN0cmluZ09yU2Nob29sVGVybSIsInBlcmlvZCIsInNjaG9vbFRlcm0iLCJfdXRpbHNfc2Nob29sX3Rlcm1fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsInZhbHVlT2YiLCJvbmdvaW5nUHJvbWlzZXMiLCJhcmdzSnNvbiIsIlJlbW92ZUl0ZW0iLCJzdHlsZSIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiaW5pdE1hcE1ldGhvZCIsImN0b3IiLCJBZG1pbk1lbnVJdGVtcyIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fIiwicm91dGUiLCJ0ZW1wbGF0ZU9iamVjdF8yIiwiTm9uQWRtaW5NZW51SXRlbXMiLCJ0ZW1wbGF0ZU9iamVjdF8zIiwidGVtcGxhdGVPYmplY3RfNCIsInNldENvdXJzZUltYWdlIiwib3JpZ0NvdXJzZSIsImhvc3QiLCJpbWFnZUlkIiwia2VkYmFja2VuZF9jbGllbnRfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsImltYWdlcyIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyIsIkNvdXJzZUJhbm5lciIsImlzVGVtcGxhdGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJhY3RpdmVQYWdlIiwiaXNBZG1pbiIsIm1lbnVJdGVtcyIsIm9uRHJhZ092ZXIiLCJfdXRpbHNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIm9uRHJvcCIsImZpbGVzIiwiZmlsZSIsInNpemUiLCJ0ZW1wbGF0ZU9iamVjdF81IiwiZm9ybSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwidGVtcGxhdGVPYmplY3RfNiIsIm1hdGNoIiwiZ2V0QXNTdHJpbmciLCJ0ZW1wbGF0ZU9iamVjdF83Iiwib25Ecm9wSW1hZ2UiLCJpc0FjdGl2ZSIsImNhbGxiYWNrcyIsImdpdmVuUm91dGUiLCJyb3V0ZXMiLCJkZWZhdWx0Um91dGUiLCJyZWFjdF9yb3V0ZXJfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJSZWFjdERPTSIsIlNjaG9vbFRlcm0iLCJkYXRlT3JTY2hvb2xNb21lbnQiLCJzY2hvb2xNb21lbnQiLCJfc2Nob29sX21vbWVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwibmV4dFRlcm0iLCJwcmV2VGVybSIsInRvTG9jYWxlU3RyaW5nIiwic2hvcnRZZWFyIiwibG9jYWxlc18xIiwibG9jYWxlc18xXzEiLCJfZXhlY19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiYm9sZCIsImljb24iLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJzdHJpa2V0aHJvdWdoIiwiaGVhZGluZzEiLCJoZWFkaW5nMiIsImhlYWRpbmczIiwicGFyYWdyYXBoIiwicXVvdGUiLCJvbGlzdCIsInVsaXN0IiwibGluZSIsInByb21wdCIsImltYWdlIiwiY29tcG9uZW50IiwiZWxlbWVudCIsInNlbCIsInJhbmdlIiwiaW1nIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsInRhYkluZGV4IiwiZ2V0U2VsZWN0aW9uIiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJjb2xsYXBzZSIsImluc2VydE5vZGUiLCJzZXRTdGFydEFmdGVyIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJvbmZvY3VzIiwib25Gb2N1cyIsIm9uYmx1ciIsIm9uQmx1ciIsIm9uQ2hhbmdlIiwiY29udGVudERpdiIsImlubmVySFRNTCIsInBhcnNlciIsIkRPTVBhcnNlciIsIkhUTUxfV0FTSF9QT0xJQ1kiLCJzdHJpa2UiLCJwcmUiLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiY2xhc3MiLCJ0YWJpbmRleCIsInVsIiwib2wiLCJsaSIsImhyIiwic3BhbiIsImJvcmRlciIsInRib2R5IiwidGhlYWQiLCJ0Zm9vdCIsInRyIiwidGQiLCJjb2xzcGFuIiwicm93c3BhbiIsInRoIiwiYWJiciIsInNjb3BlIiwic29ydGVkIiwid2FzaEh0bWwiLCJodG1sIiwicGFyc2VGcm9tU3RyaW5nIiwiY2hpbGROb2RlcyIsIm1vZGlmaWVkIiwid2FzaE5vZGUiLCJub2RlIiwidGFnTmFtZSIsImlzRWxlbWVudCIsInBvbGljeSIsIndhc2hDaGlsZE5vZGVzIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsInJlbW92ZSIsInJlbW92ZU1pZGRsZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwiYXR0ciIsImFsbG93ZWQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ3YXNoRWxlbWVudCIsImFjdGlvbnMiLCJjbGFzc2VzIiwid3lzaXd5Z19XeXNpd3lnIiwiV3lzaXd5ZyIsImZvY3VzUmVjdCIsIm9uTW91c2VEb3duIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJjb21wb25lbnREaWRNb3VudCIsInJlYWRPbmx5IiwicXVlcnlTZWxlY3RvckFsbCIsImVsZW0iLCJhZGRFdmVudExpc3RlbmVyIiwicmVwb3J0TnVtQ2hhcnMiLCJpbm5lclRleHQiLCJjb21wb25lbnREaWRVcGRhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0U3RhdGUiLCJ0cmlnZ2VyT25DaGFuZ2UiLCJuZXdTdGF0ZSIsImdldFJlbGF0YXRpdmVDbGllbnRSZWN0IiwicGFyZW50RWxlbWVudCIsImZvY3VzRWxlbSIsInJlbGF0ZWRUYXJnZXQiLCJmb2N1c1JlY3REaXYiLCJtYWtlQ2xpY2thYmxlIiwiY29ybmVyIiwiZ2V0UmVjdENvcm5lciIsInJlc2l6ZVN0YXJ0WCIsImNsaWVudFgiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aWR0aCIsIm5ld1dpZHRoIiwiZW5kc1dpdGgiLCJmYWN0b3IiLCJuZXdIZWlnaHQiLCJoZWlnaHQiLCJleGVjSW1hZ2VFZGl0QWN0aW9uIiwiY21kIiwiY3NzRmxvYXQiLCJjYiIsImRlZmF1bHRBY3Rpb25zIiwiYWN0aW9uc1RvVXNlIiwiYWN0aW9uIiwibWF4Q2hhcnMiLCJleHRlcm5hbF9SZWFjdF8iLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsImZvY3VzIiwicG9zaXRpb24iLCJ0b3AiLCJsZWZ0IiwicmVmIiwiY29udGVudEVkaXRhYmxlIiwib25QYXN0ZSIsImN1cnJlbnRUYXJnZXQiLCJlZGl0b3JUZXh0IiwidGV4dEJlaW5nUGFzdGVkIiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJvbktleVVwIiwiTmFOIiwib25LZXlQcmVzcyIsIm9uSW5wdXQiLCJvbktleURvd24iLCJ3aGljaCIsInNoaWZ0S2V5Iiwia2V5Q29kZSIsInJlbW92ZUNoaWxkIiwib3V0bGluZSIsImJvdHRvbSIsInBhcmVudCIsImNoaWxkIiwicGFyZW50UmVjdCIsImNoaWxkUmVjdCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJfZW1pdHRlcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzIiwidW5jb3ZlcmVkUmVxdWlyZW1lbnRzIiwia3IiLCJnZXRJZHNOb3RDb3ZlcmVkQnlUYXNrcyIsImdldElkc05vdENvdmVyZWRCeVJlcVJlZmVyZW5jaW5nRG9jcyIsInRlbXBsYXRlcyIsImRvY3NCZWluZ0NoZWNrZWQiLCJ1bmNvdmVyZWRJZHMiLCJzYW5pdHlDaGVjayIsIl91dGlsc191dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwidGFza0lkIiwiaGFzRHVwbGljYXRlVGFza3MiLCJ0YXNrVXJscyIsInRhc2tzV2l0aFNhbWVVcmwiLCJoYXNFbXB0eU1vZHVsZU5hbWVzIiwibW9kdWxlTmFtZXMiLCJoYXNEdXBsaWNhdGVNb2R1bGVOYW1lcyIsImdldFRhc2tzUGVySWQiLCJmdXR1cmVBYmlsaXRpZXMiLCJmYSIsIlNlbGVjdFJlbGF0ZWREb2NzIiwibWFya2VkSWRzIiwibWFya01vZGUiLCJtaWdyYXRlZElkcyIsImdyb3VwZWRPcHRpb25zIiwiZ3JvdXAiLCJncm91cHMiLCJfdXRpbGl0eV9jb21wb25lbnRzX29wZW5fY2xvc2VfYm94X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJvcHRpb24iLCJpc01hcmtlZCIsImlzTWlncmF0ZWQiLCJpc1VuY292ZXJlZCIsIm9uTWFya0NoYW5nZWQiLCJSZW5hbWVhYmxlVGV4dCIsImVkaXRNb2RlIiwicnVudGltZVN0eWxlIiwicmVuYW1lIiwiZGlzcGxheSIsImNsaWNrQWR2ZXJ0aXNlVGV4dCIsImpxdWVyeV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQiLCJzZWxlY3QiLCJwbGFjZWhvbGRlciIsImJsdXIiLCJwcm9wYWdhdGVPbkNoYW5nZSIsIm5ld1ZhbHVlIiwicHJvcGFnYXRlZE9uQ2hhbmdlIiwiZWFnZXIiLCJ0eHQiLCJ0ZXh0QWxpZ24iLCJjc3MiLCJmb250U2l6ZSIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJtYXJnaW5Ub3AiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJib3JkZXJSYWRpdXMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJsaW5lSGVpZ2h0IiwiZm9udFdlaWdodCIsIm91dExpbmUiLCJib3JkZXJTdHlsZSIsImJveFNpemluZyIsInVzZXJzIiwic2Nob29sVHlwZSIsInNjaG9vbEdyYWRlIiwiRXJyb3JTdWNjZXNzRmVlZGJhY2siLCJlcnJvcnMiLCJpbmZvcyIsIl91bmhhbmRsZWRSZWplY3Rpb24iLCJfZXJyb3IiLCJfY3VzdG9tRXJyb3IiLCJfb25JbmZvIiwiX2RiV3JpdGVyRXJyb3IiLCJfZGJXcml0ZXJTdGF0ZUNoYW5nZWQiLCJfYWRkRXJyb3IiLCJkZXRhaWxzIiwiX2FkZEluZm8iLCJpbmZvIiwiaXNTYXZpbmciLCJkYldyaXRlcklzRWRpdGVkIiwiZGJXcml0ZXJJc1NhdmluZyIsIl9nbG9iYWxzX2RiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18iLCJyZWFzb24iLCJwb2ludGVyRXZlbnRzIiwibWFyZ2luIiwic2hvd0RldGFpbHMiLCJmbG9hdCIsIl9jb21wb25lbnRzX2NvdXJzZV9idWlsZGVyX3N1Yl9jb21wb25lbnRzX3JlbW92ZV9pdGVtX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18iLCJyZW1vdmVFcnJvciIsInRvZ2dsZURldGFpbHMiLCJSZXBvIiwiY29tbSIsImxpc3RQcm9taXNlIiwiZW5zdXJlSGFzRGF0YSIsInJlZnJlc2hGcm9tU2VydmVyIiwidXBkYXRlZEl0ZW1zIiwiaXQiLCJ1cGRhdGVkSXRlbSIsImFzc2lnbiIsImluc2VydCIsImZlYXR1cmVzX0ZlYXR1cmVzIiwiZmVhdHVyZXMiLCJmZWF0dXJlIiwiS25vd2xlZGdlTWF0cml4IiwiZXhwbGFpbmVkUmVxdWlyZW1lbnRzIiwiaWRzVG9NYXJrTm90T2siLCJvbkV4cGxhaW5lZFJlcXVpcmVtZW50c0NoYW5nZWQiLCJjb2x1bW5zIiwicm93cyIsInJvdyIsImdyYWRlIiwicE5leHQiLCJncmFkZVN0ZXAiLCJ0b1VwcGVyQ2FzZSIsInJlcXVpcmVtZW50IiwiaXNNYXJrZWRPSyIsImlzTWFya2VkTm90T0siLCJFTlZJUk9OTUVOVCIsIktFRF9BUElfVVJMIiwiRURTX0FQSV9VUkwiLCJLRURfVE9LRU5fVVJMIiwiS0VEX0NMSUVOVF9JRCIsIktFRF9DTElFTlRfU0VDUkVUIiwiZ2V0TWVyZ2VkVG9rZW5QYXRoIiwic2NvcGVzIiwiaW1wZXJzb25hdGlvblByb3BzIiwiYWNjZXNzX2NvbnRyb2wiLCJ0b2tlblBhdGhXaXRob3V0UXVlcnkiLCJ0b2tlblF1ZXJ5U3RyaW5nIiwidG9rZW5QYXRoUXVlcnkiLCJnZXRUb2tlbklkIiwibWVyZ2VkVG9rZW5QYXRoIiwidXNlckVtYWlsIiwiY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIiLCJjbGllbnR3ZWIiLCJlbWFpbCIsImluaXRpYWxVc2VyRW1haWwiLCJLRURfVE9LRU5fUEFUSCIsInNldF9iZWFyZXJfcHJvdmlkZXJzX21lcmdlZFRva2VuUGF0aCIsInJlc3BvbnNlVGV4dCIsIm9rIiwic2F2ZVVzZXJJbmZvIiwic3RvcmVkU2Vzc2lvblVzZXIiLCJsb2FkVXNlckluZm8iLCJnb29nbGVNZXJnZWRQYXRoIiwiZ29vZ2xlVG9rZW5Qcm92aWRlciIsImNyZWF0ZUdvb2dsZVRva2VuUHJvdmlkZXIiLCJlZHNDbGllbnQiLCJlZHNjbGllbnQiLCJFZGl0U2Nob29sIiwiX2NvdXJzZXNfY291cnNlX2Jhbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiZmVlZGJhY2siLCJmZWVkYmFja1VybCIsIkVkaXRTY2hvb2xOb0Jhbm5lciIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIm9yaWdTY2hvb2wiLCJpc0d5bW5hc2l1bSIsImlzUHJpbWFyeVNjaG9vbCIsImFkZFNjaG9vbEJyYW5jaCIsImRlbGV0ZVNjaG9vbCIsInNjaG9vbEJyYW5jaCIsImJyXzEiLCJhcHByb3ZlZENoaWxkcmVuIiwiYWxlcnQiLCJlZGl0RXhpc3RpbmciLCJhdXRvRm9jdXMiLCJkaXNhYmxlZCIsImNoZWNrZWQiLCJyZWFjdF9yb3V0ZXJfZG9tX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X18iLCJjb25maXJtIiwiU2hvd1N1YmplY3QiLCJzdWJqZWN0IiwiY29tcG9uZW50V2lsbE1vdW50IiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fIiwiX3N1Yl9jb21wb25lbnRzX3NwaW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsImNvdXJzZVRlbXBsYXRlcyIsIl9jb3Vyc2VzX2NvdXJzZV9iYW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyIsIl9zaG93X3N1YmplY3RfaW5uZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIlNob3dTdWJqZWN0SW5uZXIiLCJfc3ViX2NvbXBvbmVudHNfc3Bpbm5lcl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicHVibGlzaGFibGUiLCJwb2ludHMiLCJDaG9vc2VVc2VyIiwiX2RhdGFfdXNlcnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsImZvbnRTdHlsZSIsIkVkaXRhYmxlU2Nob29sTGlzdCIsInZpZXdDb3Vyc2VVcmwiLCJlcyIsImN1cnNvciIsInNwaW5uZXIiLCJjb3Vyc2VfYmFubmVyIiwic2Nob29sc19TY2hvb2xzV2l0aG91dEJhbm5lciIsIlNjaG9vbHNXaXRob3V0QmFubmVyIiwiVGFza01pZ3JhdGlvbkJveCIsInVwZGF0ZUxpbmsiLCJrcnMiLCJrckEiLCJrckMiLCJrckUiLCJhYnMiLCJ0YWJsZXNUb1Nob3ciLCJib3hJbmZvIiwib2xkVGV4dCIsInBhcnNlU2tvbHZlcmtldFllYXJzIiwiaW5ZZWFyIiwiZGlmZlN1YmplY3RHbG9iYWxUZXh0cyIsImRiVGV4dE1hcCIsInhtbFRleHRzIiwicmVtb3ZlZElkcyIsIlNldCIsIm5ld1RleHRzIiwiTWFwIiwiaWRzVG9BZGQiLCJuZXdUZXh0IiwiaGFzIiwic2V0Iiwib2xkSWQiLCJfZmljdGl2ZU9sZElkIiwic3RvcFdvcmRzIiwiZ2V0TGV4ZW1lcyIsInJlbW92ZVRhZ3MiLCJsZXhlbWUiLCJnZXRJZHNUb01pZ3JhdGUiLCJkYlRleHRzIiwidGV4dFR5cGUiLCJpZHNUb01pZ3JhdGUiLCJ4bWxTZXQiLCJkYlNldCIsImRiVGV4dCIsImxleGVtZXMiLCJtYXRjaExldmVsIiwieG1sU3BpbnN0ZXJzIiwieG1sVGV4dCIsImJlc3RNYXRjaCIsImZpbmRCZXN0TWF0Y2giLCJwYWlyIiwibXlNYXRjaExldmVsIiwibmV3SWQiLCJzcGluc3RlciIsImlzVHlwb0ZpeCIsInhtbExleGVtZXMiLCJnZXRNYXRjaExldmVsIiwicHAiLCJsZXhlbWVzMSIsImxleGVtZXMyIiwicG9pbnRzMSIsInBvaW50czIiLCJ3b3JkIiwicm91bmQiLCJtaWdyYXRlU3ViamVjdCIsImV4aXN0aW5nU3ViamVjdCIsImNvdXJzZVNldHMiLCJzdWJqZWN0VG9JbXBvcnQiLCJtaWdyYXRlQ291cnNlSW5zdGFuY2UiLCJjb3Vyc2VUb0ltcG9ydCIsInNob3dDaGFuZ2VzIiwic2hvd25DaGFuZ2VzIiwiYWJpbGl0eUlkc1RvTWlncmF0ZSIsIm5ld0FiaWxpdHlUZXh0cyIsImNjc1RvTWlncmF0ZSIsImtyc1RvTWlncmF0ZSIsImNoYW5nZSIsImNvbnRlbnQiLCJjY3NUb0FkZCIsImNyZWF0ZWRJZHMiLCJuZXdDQ1RleHRzIiwia3JzVG9BZGQiLCJuZXdLUlRleHRzIiwiZGVzY3JpcHRpb24iLCJtaWdyYXRlVGFza3MiLCJmZXRjaFRhc2tzSW5DaHVua3NXaXRoRWRnZXNUbyIsIm9sZElkcyIsImlkc1RvTWlncmF0ZVBlckNvdXJzZSIsImltcG9ydERhdGUiLCJvbGRNVCIsImNoYW5nZURlc2NyaXB0aW9ucyIsIm1pZ3JhdGlvbkluZm8iLCJuZXdJZF8xIiwiX2YiLCJ0YXNrQ291cnNlQ29kZXMiLCJsaW5rZWRJZHMiLCJpZHNUb01pZ3JhdGVQZXJDb3Vyc2VfMSIsImlkc1RvTWlncmF0ZVBlckNvdXJzZV8xXzEiLCJfZyIsIm5ld0lkXzIiLCJfaCIsIl9qIiwibmV3SWRfMyIsIl9rIiwiX2wiLCJ0YXNrc18xIiwidGFza3NfMV8xIiwib3JkZXJlZEFiaWxpdGllcyIsIm9yZGVyZWRBYmlsaXRpZXNfMSIsIm9yZGVyZWRBYmlsaXRpZXNfMV8xIiwiY291cnNlU2V0c18xIiwiY291cnNlU2V0c18xXzEiLCJ0ZW1wbGF0ZSIsImFiaWxpdGllc1RvQWRkIiwiX20iLCJ4bWxDb3Vyc2UiLCJ4bWwiLCJjbGVhciIsImluc3RhbmNlcyIsImluc3RhbmNlc18xIiwiaW5zdGFuY2VzXzFfMSIsImNvdXJzZVNldHNfMiIsImNvdXJzZVNldHNfMl8xIiwiX28iLCJfcCIsImRpZmZYbWxXaXRoRGF0YWJhc2UiLCJjdCIsImNvdXJzZV9idWlsZGVyX3V0aWxzIiwiZXhwYW5kZWRDb3Vyc2VUZW1wbGF0ZXMiLCJjb3Vyc2VUZW1wbGF0ZSIsInVwbG9hZGVkX3N1YmplY3RfVXBsb2FkZWRTdWJqZWN0IiwiVXBsb2FkZWRTdWJqZWN0IiwiY291cnNlc0VsZW1zIiwiY2VudHJhbENvbnRlbnRFbGVtcyIsImtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMiLCJzaG93RnVsbFRleHQiLCJpc1dvcmtpbmciLCJpc0ltcG9ydGluZyIsImFkZENsYXNzZXNGb3JDaGVycnlQaWNrZWRFbGVtZW50cyIsImRpZmZXaXRoRXhpc3RpbmciLCJleHRlcm5hbF9qUXVlcnlfZGVmYXVsdCIsInB1cnBvc2VFbGVtIiwiYWRkQ2xhc3MiLCJjZW50cmFsQ29udGVudHMiLCJjaGVycnlQaWNrRGF0YSIsInNrb2xTdWJqZWN0IiwicHJldiIsImNyZWF0ZVRpbWUiLCJleGlzdGluZ1N1YmplY3RzIiwibmV3U3ViamVjdF8xIiwic3ViamVjdEFiaWxpdGllcyIsIm5ld0FiaWxpdHkiLCJuZXdDb3Vyc2UiLCJzdWJqZWN0Q29kZSIsInN1YmplY3RJZCIsImNjR3JvdXAiLCJuZXdDZW50cmFsQ29udGVudCIsImNyIiwibmV3S25vd2xlZGdlUmVxdWlyZW1lbnQiLCJzdWJqZWN0QWJpbGl0aWVzXzEiLCJzdWJqZWN0QWJpbGl0aWVzXzFfMSIsImNhbmNlbCIsIm9uQ2FuY2VsIiwiaW1wb3J0IiwiYWxsTXV0YXRpb25zIiwibXV0Iiwib25JbXBvcnRTdWNjZXNzIiwiZml4TCIsInBhZGRpbmciLCJjb2xTcGFuIiwicHVycG9zZSIsImtub3dubGVkZ2VSZXF1aXJlbWVudHMiLCJzdWJqZWN0c19pbm5lcl9TdWJqZWN0c0lubmVyIiwiU3ViamVjdHNJbm5lciIsImlzTGlzdGluZ1N1YmplY3RzIiwiZ3ltbmFzaXVtU3ViamVjdHMiLCJwcmltYXJ5U2Nob29sU3ViamVjdHMiLCJ1cGxvYWRlZFN1YmplY3QiLCJzdWJqZWN0cyIsImhhbmRsZUZpbGVTZWxlY3QiLCJwYXJzZVhNTCIsInR5cGVPZlNjaG9vbGluZyIsIm1vZGVsIiwic3ViamVjdHNfaW5uZXJfdGVtcGxhdGVPYmplY3RfMSIsInN0YWRpdW0iLCJzdWJqZWN0c19pbm5lcl90ZW1wbGF0ZU9iamVjdF8yIiwiY2VudHJhbENvbnRlbnRzQnlTdGFkaXVtXzEiLCJrbm93bGVkZ2VSZXF1aXJlbWVudHNCeVN0YWRpdW1fMSIsInN1YmplY3ROYW1lXzEiLCJzdWJqZWN0Q29kZV8xIiwic3ViamVjdFB1cnBvc2UiLCJjb3Vyc2VzQnlTdGFkaXVtIiwic3ViamVjdHNfaW5uZXJfdGVtcGxhdGVPYmplY3RfMyIsImxpbmtQcmVmaXgiLCIuL2VuLWF1IiwiLi9lbi1hdS5qcyIsIi4vZW4tY2EiLCIuL2VuLWNhLmpzIiwiLi9lbi1nYiIsIi4vZW4tZ2IuanMiLCIuL2VuLWllIiwiLi9lbi1pZS5qcyIsIi4vZW4tbnoiLCIuL2VuLW56LmpzIiwiLi9zdiIsIi4vc3YuanMiLCJ3ZWJwYWNrQ29udGV4dCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIl9nbG9iYWxzX0tFRF9lbnZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyIsIl91dGlsc19xdWVyeV9zdHJpbmdfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIk5ld1NjaG9vbCIsImVkaXRfc2Nob29sIiwic3ViamVjdHNfU3ViamVjdHMiLCJTdWJqZWN0cyIsInN1YmplY3RzX3RlbXBsYXRlT2JqZWN0XzEiLCJzdWJqZWN0c19pbm5lciIsImVkaXRfcmVzb3VyY2VfRWRpdFJlc291cmNlIiwiRWRpdFJlc291cmNlIiwicmVzb3VyY2UiLCJ2YWxpZF91cmxfZGVmYXVsdCIsImlzVXJpIiwiZWRpdF9yZXNvdXJjZV90ZW1wbGF0ZU9iamVjdF8xIiwib25TYXZlIiwib25EZWxldGUiLCJpc1ZhbGlkVXJsIiwiZWRpdGFibGVfcmVzb3VyY2VfbGlzdF9FZGl0YWJsZVJlc291cmNlTGlzdCIsIkVkaXRhYmxlUmVzb3VyY2VMaXN0Iiwib25VcGRhdGUiLCJvcGVuRGlhbG9nIiwiQ29tcG9uZW50IiwiZWRpdGVkUmVzb3VyY2UiLCJ1cGRhdGVkUmVzb3VyY2UiLCIkc3BsaWNlIiwiY2xvc2VEaWFsb2ciLCJuZXdSZXNvdXJjZSIsIiRwdXNoIiwiQ2FjaGVkUmVzcG9uc2UiLCJxdWVyeWVyIiwicHJvbWlzZSIsInJlc2V0IiwiU2VhcmNoUmVzdWx0cyIsInNlYXJjaE1hcmtlZElkcyIsInNlYXJjaFJlc3VsdCIsImVkaXRUYXNrIiwid3JpdGVBY2Nlc3MiLCJ0YXNrQ3VzdG9taXphdGlvbiIsInByZXZpZXdUYXNrQ29udGVudCIsImZvdW5kVGFzayIsInRvZ2dsZUNob29zZVRhc2siLCJ1cGRhdGVTZWFyY2hNYXJrZWRJZHMiLCJleHRlcm5hbF9SZWFjdERPTV8iLCJzZXRTdGF0ZVByb21pc2VkIiwiQmFzaWNFZGl0YWJsZVRhc2tGaWVsZHMiLCJuZXdUYXNrIiwidGFza19taWdyYXRpb25fYm94IiwibGlua09yVW5saW5rIiwiZ2V0VGFza1Byb3AiLCJ1cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uIiwicmVhY3RfZGF0ZXBpY2tlcl9lcyIsInNlbGVjdGVkIiwibW9tZW50X2RlZmF1bHQiLCJkYXRlRm9ybWF0IiwibG9jYWxlIiwicG9wcGVyUGxhY2VtZW50IiwiVGFza1N0YXR1c0ZyYWdtZW50IiwiU2F2ZU9yQ2FuY2VsQnV0dG9ucyIsImNvcHlUYXNrIiwiVGFza0NvbnRlbnRGcmFnbWVudCIsInd5c2l3eWciLCJhY3Rpb25zX3N2IiwiUHJldmlld2FibGVUYXNrRmllbGRzIiwibGVhcm5pbmdHb2FsIiwicmVzb3VyY2VVcGRhdGVzIiwiZWRpdF90YXNrX0VkaXRUYXNrIiwiRWRpdFRhc2siLCJzcmNfZmVhdHVyZXMiLCJlZGl0X3Rhc2tfdGVtcGxhdGVPYmplY3RfMSIsInNlYXJjaE1vZGUiLCJmdXR1cmVBYmlsaXRpZXNPcGVuIiwiaXNTZWFyY2hpbmciLCJzZWFyY2hSZXNwb25zZSIsInVwZGF0ZVNlYXJjaFJlc3VsdCIsImVycl8xIiwic2V0U3RhdGVQcm9taXNlIiwiYWxsVGFza3NGb3JTdWJqZWN0IiwiYWJpbGl0eSIsImtub3dsZWRnZVJlcXVpcmVtZW50IiwiY29sbGVjdGlvblByb3AiLCJ1cGRhdGVkQ29sbGVjdGlvbiIsImN1cnJlbnRQb3MiLCJ1cGRhdGVkVGFzayIsIm9uUmVwbGFjZSIsIm9uU2F2ZUN1c3RvbWl6YXRpb24iLCJ0YXNrQ29weSIsInRlbXBsYXRlT2JqZWN0XzgiLCJ0YXNrUHJvcCIsImN1c3RvbWl6YXRpb24iLCJ1cGRhdGVzIiwibmV3Q3VzdG9taXphdGlvbiIsInJlYWN0X2FkZG9uc191cGRhdGVfZGVmYXVsdCIsImlkc05vdENvdmVyZWRCeUFueVRhc2siLCJrbm93bGVkZ2VfbWF0cml4Iiwic2VsZWN0X3JlbGF0ZWRfZG9jcyIsImtlZF9tb2RlbHMiLCJlZGl0YWJsZV90YXNrX2xpc3RfRWRpdGFibGVUYXNrTGlzdCIsIkVkaXRhYmxlVGFza0xpc3QiLCJvcGVuVGFza0RpYWxvZyIsInRhc2tDdXN0b21pemF0aW9ucyIsIm9uVGFza1VwZGF0ZWQiLCJvblRhc2tBZGRlZCIsIm9uVGFza0N1c3RvbWl6YXRpb25VcGRhdGVkIiwib25UYXNrRGVsZXRlZCIsIm9uVGFza1JlcGxhY2VkIiwiY2FuVXBkYXRlVGFzayIsImNvbG9yIiwiY2hvb3NlblRhc2siLCJjb3Vyc2VfbW9kdWxlX0NvdXJzZU1vZHVsZUNvbXBvbmVudCIsIkNvdXJzZU1vZHVsZUNvbXBvbmVudCIsImVkaXRNYW5kYXRvcnlDb250ZW50IiwiZ2V0TW9kdWxlSW5kZXgiLCJnZXRNb2R1bGVPcmRlckluZGV4IiwiZ2V0T3JkZXJlZE1vZHVsZXMiLCJ1cGRhdGVNb2R1bGUiLCJtb2R1bGVVcGRhdGVzIiwidXBkYXRlZE1vZHVsZSIsIm1vZHVsZUluZGV4IiwiY291cnNlVXBkYXRlcyIsImN1c3RvbWl6YXRpb25zIiwiY291cnNlX21vZHVsZV90ZW1wbGF0ZU9iamVjdF8xIiwidGFza0luZGV4Iiwib25UYXNrQ3VzdG9taXplZCIsInRpZCIsIiRhcHBseSIsImlkeFRhc2siLCJjb3Vyc2VfbW9kdWxlX3RlbXBsYXRlT2JqZWN0XzIiLCJtb2R1bGVPcmRlcmVkSW5kZXgiLCJzdGFydFdlZWtPcHRpb25zIiwiZW5kV2Vla09wdGlvbnMiLCJyZW5hbWVhYmxlX3RleHQiLCJuZXdOYW1lIiwic3RhcnRXZWVrIiwiZW5kV2VlayIsIm1hbmRhdG9yeUNvbnRlbnQiLCJyZXNvdXJjZXNVcGRhdGVzIiwib25SZW9yZGVyIiwicmVtb3ZlX2l0ZW0iLCJjb3Vyc2VfbW9kdWxlX3RlbXBsYXRlT2JqZWN0XzMiLCJjb3Vyc2VfbW9kdWxlX2xpc3RfQ291cnNlTW9kdWxlTGlzdCIsIkNvdXJzZU1vZHVsZUxpc3QiLCJfbW9kdWxlUmVmcyIsImFkZE1vZHVsZSIsIm1vZHVsZU9yZGVyIiwicmVvcmRlciIsImRpcmVjdGlvbiIsIm9yZGVyZWRNb2R1bGVzIiwibmV3TW9kdWxlSW5kZXgiLCJjdXJyZW50TW9kdWxlQXRQb3NpdGlvbiIsIm9yaWdTY3JvbGxQb3MiLCJkb2N1bWVudEVsZW1lbnQiLCJlbGVtTW9kdWxlIiwic2Nyb2xsVG8iLCJzY3JvbGxJbnRvVmlldyIsImJlaGF2aW9yIiwiYmxvY2siLCJfZWxlbSIsIm15U2Nob29sQ291cnNlc1JlcG8iLCJTY2hvb2xDb3Vyc2VzUmVwbyIsImdldFNjaG9vbE5hbWUiLCJzY2hvb2xOYW1lIiwiX3NjaG9vbElkIiwic2Nob29sX2NvdXJzZXNfdGVtcGxhdGVPYmplY3RfMSIsImdldFNjaG9vbElkIiwic2Nob29sX2NvdXJzZXNfU2Nob29sQ291cnNlcyIsIlNjaG9vbENvdXJzZXMiLCJzY2hvb2xDb3Vyc2VzIiwib25TY2hvb2xDb3Vyc2VzVXBkYXRlZCIsImNvbXBhcmVOYW1lIiwiY29tcGFyZUNyZWF0ZWREYXRlIiwiYWN0aXZlIiwic2Nyb2xsIiwiZWRpdGFibGVfdGVhY2hlcl9saXN0X0VkaXRhYmxlVGVhY2hlckxpc3QiLCJFZGl0YWJsZVRlYWNoZXJMaXN0IiwiYWRkRW10cHlSb3ciLCJ0ZWFjaGVycyIsInRlYWNoZXIiLCJuYW1lRWxlbSIsIndlaWdodGVkX2l0ZW1zX3RhYmxlX1dlaWdodGVkSXRlbXNUYWJsZSIsIldlaWdodGVkSXRlbXNUYWJsZSIsImlzT3BlbiIsInRhc2tzUGVySWQiLCJidXNpbmVzc19sb2dpYyIsImZ1dHVyZUFiaWxpdHlUZXh0Iiwib3Blbl9jbG9zZV9ib3giLCJlZGl0X3dvcmtmbG93X2xpbmtfRWRpdFdvcmtmbG93TGluayIsIkVkaXRXb3JrZmxvd0xpbmsiLCJlZGl0X3dvcmtmbG93X2xpbmtfdGVtcGxhdGVPYmplY3RfMSIsImVkaXRhYmxlX3dvcmtmbG93X2xpbmtfRWRpdGFibGVXb3JrRmxvd0xpbmsiLCJFZGl0YWJsZVdvcmtGbG93TGluayIsIm5ld1VybCIsImlubmVyX2VkaXRfY291cnNlX0lubmVyRWRpdENvdXJzZSIsIklubmVyRWRpdENvdXJzZSIsImNoYW5nZUltYWdlVXJsIiwic2V0SW1hZ2VVcmwiLCJpbWFnZVVybCIsInVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cyIsInNhbml0eUNoZWNrV2FybmluZ3MiLCJjb3Vyc2VJbWFnZSIsImNvdXJzZUltYWdlSXNEYXRhVXJsIiwiY291cnNlSXNVcGxvYWRlZCIsInJ1blVwVGV4dCIsIm5ld0h0bWwiLCJ3b3JrRmxvd0xpbmsiLCJnb29nbGVDbGFzc1Jvb21VUkwiLCJnb29nbGVDbGFzc1Jvb21Db2RlIiwidGVhY2hlcnNVcGRhdGUiLCJhY3RpdmF0ZWREYXRlIiwiYWN0aXZhdGVkQnkiLCJpbmFjdGl2YXRlZEJ5IiwiaW5hY3RpdmF0ZWREYXRlIiwid2FybmluZyIsImlubmVyX2VkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzEiLCJkZWxldGVDb3Vyc2UiLCJoaXN0b3J5IiwiZ28iLCJpbmFjdGl2YXRlQW5kU2F2ZSIsImFjdGl2YXRlQW5kU2F2ZSIsImNhdGNoZXIiLCJDT05GSVJNX05BVklHQVRFX01FU1NBR0UiLCJlZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8xIiwiREVGQVVMVF9TVEFURSIsIm9yaWdUZW1wbGF0ZSIsImRpYWxvZ0NvbnRhaW5lcnMiLCJoYXNVbnNhdmVkRGF0YSIsInZpZXciLCJlZGl0X2NvdXJzZV9FZGl0Q291cnNlIiwiRWRpdENvdXJzZSIsInJlZkRpYWxvZyIsImNvbnRlbnRZUG9zIiwiYmVmb3JlVW5sb2FkIiwib25DbGlja1ByZXZlbnRVbmxvYWQiLCJkaWFsb2dzIiwiX3NldFN0YXRlIiwic2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUiLCJ1c2VkVGFza0lkc18xIiwiZmlsdGVyZWRDb3Vyc2VUYXNrcyIsIm1vZGlmaWVkQ291cnNlIiwiYWxsQ291cnNlcyIsImlkeE91ckNvdXJzZSIsInRlbXBsYXRlSWQiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJsb2FkRnJvbVRlbXBsYXRlIiwicGFyZW50SWQiLCJsb2FkRXhpc3RpbmdDb3Vyc2UiLCJlZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF8yIiwiY291cnNlU2Nob29sIiwiY2hpbGRyZW5fMSIsImNoaWxkcmVuXzFfMSIsImVycm9yTWVzc2FnZSIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzMiLCJlZGl0X2NvdXJzZV90ZW1wbGF0ZU9iamVjdF80IiwiZWRpdF9jb3Vyc2VfdGVtcGxhdGVPYmplY3RfNSIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzYiLCJkb2VzQWxsVGFza3NDb3ZlckFsbFJlcXVpcmVtZW50cyIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzciLCJvcmlnIiwibmV3Q291cnNlVGFza3MiLCJvcmlnVGFzayIsImVkaXRfY291cnNlX3RlbXBsYXRlT2JqZWN0XzgiLCJ0ZW1wbGF0ZU9iamVjdF85IiwiZGlhbG9nQ29udGFpbmVyIiwiZGlhbG9nIiwiaW5kZXgiLCJjdHJsS2V5IiwibWV0YUtleSIsInNhdmVEaWFsb2ciLCJ0YXJnZXRFbGVtIiwicmV0dXJuVmFsdWUiLCJnZXRBdHRyaWJ1dGUiLCJzdHVkZW50UGFnZSIsImNyZWF0ZV9uZXdfQ3JlYXRlTmV3Q291cnNlIiwiQ3JlYXRlTmV3Q291cnNlIiwiY291cnNlT3B0aW9ucyIsInNlbGVjdGVkVGVtcGxhdGVJZCIsInNlbGVjdGVkQ291cnNlSWQiLCJvblNlbGVjdENvdXJzZSIsImRlcml2ZWRDb3Vyc2VzIiwiZGVzY3JpcHRpb25PckF1dGhvciIsImtlZFN0YW5kYXJkT3B0aW9ucyIsInRlYWNoZXJNYWRlIiwiY3JlYXRlX25ld190ZW1wbGF0ZU9iamVjdF8xIiwiSEVBUlRCRUFUX0lOVEVSVkFMIiwiSEVBUlRCRUFUX1VSTCIsImxhc3RBY3Rpdml0eSIsIm9uVXNlckFjdGl2ZSIsIm9uVGltZW91dCIsImhlYXJ0YmVhdCIsInNldEludGVydmFsIiwibW91c2Vtb3ZlIiwia2V5cHJlc3MiLCJjb3Vyc2VfYnVpbGRlcl9Db3Vyc2VCdWlsZGVyIiwiQ291cnNlQnVpbGRlciIsImlzQXV0aG9yaXplZCIsImV4YWN0IiwiY291cnNlX2J1aWxkZXJfc2Nob29scyIsImNvdXJzZV9idWlsZGVyX3RlbXBsYXRlT2JqZWN0XzEiLCJzaG93X3N1YmplY3QiLCJlcnJvcl9zdWNjZXNzX2ZlZWRiYWNrIiwiQXBwIiwiX2dsb2JhbHNfS0VEX2Vudl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwicmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyIsIl9jb21wb25lbnRzX2NvdXJzZV9idWlsZGVyX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18iLCJfdXRpbHNfY2hvb3NlX3VzZXJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyJdLCJtYXBwaW5ncyI6InNDQUNBLFNBQUFBLEVBQUFDLEdBUUEsSUFQQSxJQU1BQyxFQUFBQyxFQU5BQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FDQUssRUFBQUwsRUFBQSxHQUlBTSxFQUFBLEVBQUFDLEVBQUEsR0FDUUQsRUFBQUgsRUFBQUssT0FBb0JGLElBQzVCSixFQUFBQyxFQUFBRyxHQUNBRyxFQUFBUCxJQUNBSyxFQUFBRyxLQUFBRCxFQUFBUCxHQUFBLElBRUFPLEVBQUFQLEdBQUEsRUFFQSxJQUFBRCxLQUFBRyxFQUNBTyxPQUFBQyxVQUFBQyxlQUFBQyxLQUFBVixFQUFBSCxLQUNBYyxFQUFBZCxHQUFBRyxFQUFBSCxJQUtBLElBRkFlLEtBQUFo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QUFVdDdCLEVBQUtqTCxNQUFNd21DLGVBQzVGN0wsRUFBQSw2Q0FDQUEsRUFBQSx3RkFDQUEsRUFBQSw0Q0FDQUEsRUFBQSx1QkFBT2xoQixVQUFVLFlBQVltVixNQUFPLENBQUNnSCxPQUFRLG1CQUMzQytFLEVBQUEsMkJBQ0VBLEVBQUEsd0JBQ0VBLEVBQUEsb0NBQ0FBLEVBQUEsbUNBR0pBLEVBQUEsMkJBQ0dyL0IsT0FBTzRELEtBQUt3VyxFQUFBLEVBQUlFLGFBQWF0VixJQUFJLFNBQUFrM0IsR0FBUSxPQUFBbUQsRUFBQSxvQkFBSTU4QixJQUFLeTVCLEdBQ2pEbUQsRUFBQSx3QkFBS25ELEdBQ0xtRCxFQUFBLHdCQUFLamxCLEVBQUEsRUFBSUUsWUFBWTRoQixlQU1uQ21ELEVBQUEsY0FBQ3l0QixFQUFBLEVBQW9CLFFBRzNCTixFQW5FQSxDQUFtQ250QixFQUFBLDJKQ2xCbkMwdEIsRUFBQSxTQUFBeDZDLEdBQ0UsU0FBQXc2QyxFQUFZcm9ELEdBQVosSUFBQWlMLEVBQ0U0QyxFQUFBcFMsS0FBQTRJLEtBQU1yRSxJQUFNcUUsWUFDUHVVLFNBQVNLLE9BQU1MLFNBQVNLLEtBQU8sUUFVeEMsT0FiaUN2WSxFQUFBLEVBQUEybkQsRUFBQXg2QyxHQU0vQnc2QyxFQUFBOXNELFVBQUEydUIsT0FBQSxXQUNFLE9BQU9vK0IsRUFBQSxFQUFJMXlDLFlBQ1QyeUMsRUFBQSxjQUFDQyxFQUFBLEVBQWEsQ0FDWjlmLGNBQWMsb0JBQ2RsQyxZQUFZLDBCQUNkK2hCLEVBQUEsY0FBQ0UsRUFBQSxFQUFVLE9BRWpCSixFQWJBLENBQWlDRSxFQUFBIiwiZmlsZSI6InRlc3RwYWdlY291cnNlYnVpbGRlci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdHJldHVybiByZXN1bHQ7XG4gXHR9XG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4gXHQvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbiBcdC8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG4gXHR2YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuIFx0XHQ3OiAwXG4gXHR9O1xuXG4gXHR2YXIgZGVmZXJyZWRNb2R1bGVzID0gW107XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wX25hbWVfXCJdID0gd2luZG93W1wid2VicGFja0pzb25wX25hbWVfXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBhZGQgZW50cnkgbW9kdWxlIHRvIGRlZmVycmVkIGxpc3RcbiBcdGRlZmVycmVkTW9kdWxlcy5wdXNoKFsxOTUsMF0pO1xuIFx0Ly8gcnVuIGRlZmVycmVkIG1vZHVsZXMgd2hlbiByZWFkeVxuIFx0cmV0dXJuIGNoZWNrRGVmZXJyZWRNb2R1bGVzKCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0OyIsIlxyXG5leHBvcnQgZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0IChzdHIpIHtcclxuICAgIGZvciAobGV0IGk9MCwgbD1zdHIubGVuZ3RoOyBpPGw7ICsraSkge1xyXG4gICAgICAgIGlmIChzdHIuY2hhckNvZGVBdChpKSA8IDB4MjAwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gc3RyLnN1YnN0cigwLCBpKSArIHN0cltpXS50b0xvY2FsZVVwcGVyQ2FzZSgpICsgc3RyLnN1YnN0cihpICsgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0cjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChvYmosIGV4dGVuc2lvbikge1xyXG4gICAgaWYgKHR5cGVvZiBleHRlbnNpb24gIT09ICdvYmplY3QnKSByZXR1cm4gb2JqO1xyXG4gICAgT2JqZWN0LmtleXMoZXh0ZW5zaW9uKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgb2JqW2tleV0gPSBleHRlbnNpb25ba2V5XTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lPFQsRT4gKG9iaiA6IFQsIGV4dGVuc2lvbj86IEUpIHtcclxuICAgIGxldCBjbG9uZSA9IHt9O1xyXG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNsb25lLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGV4dGVuc2lvbikgZXh0ZW5kKGNsb25lLCBleHRlbnNpb24pO1xyXG4gICAgcmV0dXJuIGNsb25lIGFzIChUICYgRSk7XHJcbn1cclxuXHJcbmNvbnN0IGNvbmNhdCA9IFtdLmNvbmNhdDtcclxuZXhwb3J0IGZ1bmN0aW9uIGZsYXR0ZW48VD4gKGEgOiAoVCB8IFRbXSlbXSkge1xyXG4gICAgcmV0dXJuIGNvbmNhdC5hcHBseShbXSwgYSkgYXMgVFtdO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZVByb3A8VD4ocHJvcDprZXlvZiBUKSB7XHJcbiAgICByZXR1cm4gKGE6IFQsYjogVCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGFQcm9wID0gYVtwcm9wXSwgYlByb3AgPSBiW3Byb3BdO1xyXG4gICAgICAgIHJldHVybiBhUHJvcCA+IGJQcm9wID8gMSA6IGFQcm9wIDwgYlByb3AgPyAtMSA6IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlUHJvcHMoXHJcbiAgICBwcm9wczogc3RyaW5nIHwgc3RyaW5nW10sXHJcbiAgICBsb2NhbGVzPzogc3RyaW5nIHwgc3RyaW5nW10sXHJcbiAgICBvcHRpb25zPzogSW50bC5Db2xsYXRvck9wdGlvbnMpOiAoYTogYW55LCBiOiBhbnkpID0+IG51bWJlclxyXG57XHJcbiAgICBwcm9wcyA9IEFycmF5LmlzQXJyYXkocHJvcHMpID8gcHJvcHMgOiBbcHJvcHNdO1xyXG5cclxuICAgIGNvbnN0IGxvY2FsZUNvbXBhcmUgPSAoYSxiKSA9PlxyXG4gICAgICAgIHR5cGVvZiBhID09PSAnc3RyaW5nJyA/XHJcbiAgICAgICAgICAgIGEubG9jYWxlQ29tcGFyZShiLCBsb2NhbGVzLCBvcHRpb25zKSA6XHJcbiAgICAgICAgICAgIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiAwO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNtcFBhcnQgKGEsYixmaXJzdFBhcnQ6IHN0cmluZyxyZXN0OiBzdHJpbmdbXSkge1xyXG4gICAgICAgIGNvbnN0IGZpcnN0QSA9IGFbZmlyc3RQYXJ0XTtcclxuICAgICAgICBpZiAoZmlyc3RBID09IG51bGwpIHJldHVybiAtMTtcclxuICAgICAgICBjb25zdCBmaXJzdEIgPSBiW2ZpcnN0UGFydF07XHJcbiAgICAgICAgaWYgKGZpcnN0QiA9PSBudWxsKSByZXR1cm4gMTtcclxuICAgICAgICByZXR1cm4gcmVzdC5sZW5ndGggPT09IDAgP1xyXG4gICAgICAgICAgICBsb2NhbGVDb21wYXJlKGZpcnN0QSwgZmlyc3RCKSA6XHJcbiAgICAgICAgICAgIGNtcFBhcnQoZmlyc3RBLCBmaXJzdEIsIHJlc3RbMF0sIHJlc3Quc2xpY2UoMSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwcm9wc1xyXG4gICAgICAgIC5tYXAocHJvcCA9PiBwcm9wLnNwbGl0KCcuJykpXHJcbiAgICAgICAgLm1hcCgoW2ZpcnN0UGFydCwgLi4ucmVzdF0pID0+IChhLGIpID0+IGNtcFBhcnQoYSxiLCBmaXJzdFBhcnQsIHJlc3QpKVxyXG4gICAgICAgIC5yZWR1Y2UoKGNtcDEsIGNtcDIpID0+XHJcbiAgICAgICAgICAgIChhLGIpID0+IGNtcDEoYSxiKSB8fCBjbXAyKGEsYikpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gTCh0ZXh0LCAuLi5hcmdzKSB7XHJcbiAgICBsZXQgZmlyc3QgPSB0ZXh0WzBdO1xyXG4gICAgcmV0dXJuIGJ1aWxkTWVzc2FnZSh0ZXh0LCBhcmdzKTtcclxufVxyXG5cclxuZnVuY3Rpb24gYnVpbGRNZXNzYWdlICh0ZXh0LCBhcmdzKSB7XHJcbiAgICBsZXQgcnYgPSB0ZXh0WzBdO1xyXG4gICAgZm9yIChsZXQgaT0xLCBsPXRleHQubGVuZ3RoOyBpPGw7ICsraSkge1xyXG4gICAgICAgIHJ2ICs9IGFyZ3NbaS0xXSArIHRleHRbaV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcnY7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUQzxUPiB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0ZW1wbGF0ZTogVCkge1xyXG4gICAgICAgIGV4dGVuZCh0aGlzLCB0ZW1wbGF0ZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkYXRlVGltZVJldml2ZXIgKGtleSwgdmFsdWUpIHtcclxuICAgIHZhciBhO1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBhID0gL1xcL0RhdGVcXCgoXFxkKilcXClcXC8vLmV4ZWModmFsdWUpO1xyXG4gICAgICAgIGlmIChhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSgrYVsxXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcblxyXG4vL2xldCBpbmZvU2VyaWFsID0gMTtcclxuZXhwb3J0IGZ1bmN0aW9uIHNob3dJbmZvIChtc2cpIHtcclxuICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnaW5mbycsIHsgJ2RldGFpbCc6IG1zZyB9KTtcclxuICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3dFcnJvciAoZXJyTXNnOiBzdHJpbmcgfCBFcnJvcikge1xyXG4gICAgY29uc3QgbXNnID0gdHlwZW9mIGVyck1zZyA9PT0gJ3N0cmluZycgPyBlcnJNc2cgOiBlcnJNc2cubWVzc2FnZTtcclxuICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudCgnY3VzdG9tZXJyb3InLCB7ICdkZXRhaWwnOiBtc2cgfSk7XHJcbiAgICBjb25zb2xlLmVycm9yKGVyck1zZyk7XHJcbiAgICB3aW5kb3cuZGlzcGF0Y2hFdmVudChldmVudCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXhMZW5ndGgoc3RyOiBzdHJpbmcsIG1heExlbjogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gc3RyLmxlbmd0aCA+IG1heExlbiA/XHJcbiAgICAgICAgc3RyLnN1YnN0cigwLCBtYXhMZW4gLSAzKSArIFwiLi4uXCIgOlxyXG4gICAgICAgIHN0cjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFycmF5VG9Mb29rdXA8VD4oYTogVFtdLCBrZXlBY2Nlc3NvcjogKGl0ZW06IFQpID0+IHN0cmluZyB8IG51bWJlcikge1xyXG4gICAgY29uc3QgcmVzdWx0IDoge1trZXk6IHN0cmluZ10gOiBUW119ID0ge307XHJcbiAgICBmb3IgKGxldCBpPTAsIGw9YS5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGFbaV07XHJcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5QWNjZXNzb3IoaXRlbSk7XHJcbiAgICAgICAgbGV0IGFycmF5ID0gcmVzdWx0W2tleV07XHJcbiAgICAgICAgaWYgKGFycmF5KSBhcnJheS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIGVsc2UgcmVzdWx0W2tleV0gPSBbaXRlbV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXJyYXlUb01hcDxUPihhOiBUW10sIGtleUFjY2Vzc29yOiAoaXRlbTogVCkgPT4gc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICBjb25zdCByZXN1bHQgOiB7W2tleTogc3RyaW5nXSA6IFR9ID0ge307XHJcbiAgICBmb3IgKGxldCBpPTAsIGw9YS5sZW5ndGg7IGk8bDsgKytpKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IGFbaV07XHJcbiAgICAgICAgY29uc3Qga2V5ID0ga2V5QWNjZXNzb3IoaXRlbSk7XHJcbiAgICAgICAgcmVzdWx0W2tleV0gPSBpdGVtO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZXJyeVBpY2tQcm9wczxUPiAob2JqOiBULCBwcm9wc1RvUGljazogc3RyaW5nW10pOiBQYXJ0aWFsPFQ+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBwYXJhbSBvZiBwcm9wc1RvUGljaykge1xyXG4gICAgICBpZiAocGFyYW0gaW4gb2JqKSByZXN1bHRbcGFyYW1dID0gb2JqW3BhcmFtXTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQgYXMgUGFydGlhbDxUPjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0PFQ+IChhOiBUW10sIGtleUFjY2Vzc29yPzogKGl0ZW06IFQpID0+IGFueSkge1xyXG4gICAgY29uc3QgbWFwID0gYXJyYXlUb01hcChhLCBrZXlBY2Nlc3NvciB8fCAoeCA9PiB4KSk7XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoa2V5ID0+IG1hcFtrZXldKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbHMoYTogYW55LCBiOiBhbnkpIHtcclxuICAgIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcclxuICAgIGlmICghYSB8fCAhYikgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKHR5cGVvZiBhICE9PSAnb2JqZWN0JyB8fCB0eXBlb2YgYiAhPT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcclxuICAgIGNvbnN0IGtleXNBID0gT2JqZWN0LmtleXMoYSk7XHJcbiAgICBjb25zdCBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xyXG4gICAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSByZXR1cm4gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBpPTAsIGw9a2V5c0EubGVuZ3RoOyBpPGw7ICsraSkge1xyXG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNBW2ldO1xyXG4gICAgICAgIGlmIChrZXlzQltpXSAhPT0ga2V5KSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgaWYgKGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4iLCJpbXBvcnQge1VzZXIsIExlYXJuaW5nTW9kdWxlVGFza3N9IGZyb20gJy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcclxuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCwgQmVhcmVyUHJvdmlkZXIgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7VXNlclRhc2t9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHtLZWRSZXBvfSBmcm9tICcuLi9yZXBvcy9rZWQtcmVwbyc7XHJcbmltcG9ydCB7RWRzQ2xpZW50fSBmcm9tICcuLi9hcGlzL2Vkc2NsaWVudCc7XHJcbmltcG9ydCBLRUQgZnJvbSAnLi9rZWQnO1xyXG5pbXBvcnQgeyBLU1Rlcm1QbGFubmVyUmVwbyB9IGZyb20gJy4uL3JlcG9zL2tzLXRlcm1wbGFubmVyLXJlcG8nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBFbnYge1xyXG4gICAgY3VycmVudFVzZXI/OiBVc2VyO1xyXG4gICAgbGVhcm5pbmdNb2R1bGVUYXNrcz86IExlYXJuaW5nTW9kdWxlVGFza3M7XHJcbiAgICBiZWFyZXJQcm92aWRlcj86IEJlYXJlclByb3ZpZGVyO1xyXG4gICAgZ29vZ2xlVG9rZW5Qcm92aWRlcj86IEJlYXJlclByb3ZpZGVyO1xyXG4gICAga2VkQmFja2VuZENsaWVudD86IEtlZEJhY2tlbmRDbGllbnQ7XHJcbiAgICBlZHNDbGllbnQ/OiBFZHNDbGllbnQ7XHJcbiAgICB1c2VyVGFza3NSZXBvPztcclxuICAgIGhpZGRlbkNvdXJzZXNSZXBvPztcclxuICAgIHdlZWtOb3Rlc1JlcG8/O1xyXG4gICAga2dUZXJtUGxhbm5lclJlcG8/O1xyXG4gICAga3NUZXJtUGxhbm5lclJlcG8/OiBLU1Rlcm1QbGFubmVyUmVwb1xyXG4gICAgdHV0b3JlZDogYm9vbGVhbjtcclxuICAgIGVycm9yPzogRXJyb3I7XHJcbiAgICAvLyBUaGUgdmFycyBiZWxvdyBzaG91bGQgYmUgbW92ZWQgdG8gS0VELmNmZzpcclxuICAgIGNvdXJzZUFkbWluVXJsS1M/OiBzdHJpbmc7XHJcbiAgICBjb3Vyc2VWaWV3ZXJVcmxLUz86IHN0cmluZztcclxuICAgIGNvdXJzZUJ1aWxkZXJVcmw/OiBzdHJpbmc7XHJcbiAgICBjb3Vyc2VWaWV3ZXJVcmw/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmlmICghS0VELmVudikgS0VELmVudiA9IHt9O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgS0VELmVudiBhcyBFbnY7XHJcbiIsImV4cG9ydCAqIGZyb20gJy4vanMvZGlzdC9qcy9rZWQtYmFja2VuZC1jbGllbnQnOyIsImltcG9ydCBLRUQgZnJvbSAnLi9LRUQnO1xyXG5cclxuLyogVGhpcyBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gaXMgdXNlZCBhcyBhIGZhbGxiYWNrLlxyXG5Ob3JtYWxseSBib3RoIHRlc3QgcGFnZXMgYW5kIHByb2R1Y3Rpb24gcGFnZXMgd2lsbCBvdmVycmlkZSB0aGVzZSBjb25maWdyYXRpb25zXHJcbiovXHJcbi8qY29uc3QgZGVmYXVsdENvbmZpZ3VyYXRpb24gPSB7XHJcbiAgLy8gRW52aXJvbm1lbnRcclxuICBFTlZJUk9OTUVOVDogJ2RldmVsb3BtZW50JyBhcyAncHJvZHVjdGlvbicgfCAnZGV2ZWxvcG1lbnQnIHwgJ3Rlc3QnLFxyXG4gIC8vIEF1dGhlbnRpY2F0aW9uIFNlcnZlcjpcclxuICBLRURfVE9LRU5fVVJMOiAnaHR0cHM6Ly9rZWRhdXRodGVzdC5henVyZXdlYnNpdGVzLm5ldC90b2tlbicsXHJcbiAgS0VEX1RPS0VOX1BBVEg6ICcvYXBpL3Rva2VuLlNrcmlwdC5wb3J0bGV0P3N2LmNvbnRlbnR0eXBlPWFwcGxpY2F0aW9uL2pzb24nLFxyXG4gIEtFRF9DTElFTlRfSUQ6ICdkZXZjbGllbnQnLFxyXG4gIEtFRF9DTElFTlRfU0VDUkVUOiAnNGZSZGZRcFd0SnFqVFdmJyxcclxuICAvLyBTZXJ2aWNlczpcclxuICBLRURfQVBJX1VSTDogJ2h0dHBzOi8va2VkYmFja2VuZHRlc3QuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpLycsICBcclxuICBFRFNfQVBJX1VSTDogJ2h0dHBzOi8vZWRzcG9ydGFsb3dpbmFwaS5henVyZXdlYnNpdGVzLm5ldC9hcGkvJ1xyXG59Ki9cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUtlZENvbmZpZ3VyYXRpb24ge1xyXG4gIEVOVklST05NRU5UOiAncHJvZHVjdGlvbicgfCAnZGV2ZWxvcG1lbnQnIHwgJ3Rlc3QnO1xyXG4gIEtFRF9SRUFMTTogc3RyaW5nO1xyXG4gIEtFRF9UT0tFTl9VUkw6IHN0cmluZztcclxuICBLRURfVE9LRU5fUEFUSDogc3RyaW5nO1xyXG4gIEtFRF9DTElFTlRfSUQ6IHN0cmluZztcclxuICBLRURfQ0xJRU5UX1NFQ1JFVDogc3RyaW5nO1xyXG4gIEtFRF9BUElfVVJMOiBzdHJpbmc7XHJcbiAgRURTX0FQSV9VUkw6IHN0cmluZztcclxuICBMT0NBTEU6IHN0cmluZztcclxufTtcclxuXHJcbmlmICghS0VELmNmZykgS0VELmNmZyA9IHt9O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgS0VELmNmZyBhcyBJS2VkQ29uZmlndXJhdGlvbjtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7IiwidmFyIEtlZEJhY2tlbmRTdWJzY3JpcHRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uKHN1YnNjcmliZXIsIGNvbGxlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmliZXIgPSBzdWJzY3JpYmVyO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IGNvbGxlY3Rpb247XHJcbiAgICB9XHJcbiAgICBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5ub3RpZnlTdWJzY3JpYmVyID0gZnVuY3Rpb24gKGRhdGEsIGVycm9yKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVyKFtdLCBlcnJvciwgdGhpcyk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEgIT09IHRoaXMubGFzdE5vdGlmaWVkRGF0YSkgeyAvLyBXaWxsIGluLWZhY3QgYmUgZXF1YWwgYnkgcmVmZXJlbmNlIGlmIGRhdGEgaXMgc2FtZSBhcyBsYXN0IG5vdGlmaWNhdGlvbiAoYXMgd2UgdXNlIGFuIGltbXV0YWJsZSBhcHByb2FjaCBvbiBkYXRhKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0Tm90aWZpZWREYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlcihkYXRhLCBlcnJvciwgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGV4KSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnNjcmliZXIoW10sIGV4LCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXgyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgbm90aWZ5aW5nIEtlZEJhY2tlbmRTdWJzY3JpYmVyOlwiLCBleDIsICdvcmlnaW5hbGx5IG5vdGlmaWVkIGVycm9yOicsIGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24udW5zdWJzY3JpYmUodGhpcyk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEtlZEJhY2tlbmRTdWJzY3JpcHRpb247XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEtlZEJhY2tlbmRTdWJzY3JpcHRpb24gfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkYmFja2VuZC1zdWJzY3JpcHRpb24uanMubWFwIiwiaW1wb3J0IHsgdGFibGVzIH0gZnJvbSAna2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb24nO1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFibGVGcm9tTGFiZWwodGFibGUsIGxhYmVsKSB7XHJcbiAgICByZXR1cm4gdGFibGVzW3RhYmxlXS5yZWxhdGlvbnNoaXBzW2xhYmVsXTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlBcnJheShxdWVyeSwgZGF0YSkge1xyXG4gICAgdmFyIGZpbHRlciA9IGdldEZpbHRlckZyb21RdWVyeShxdWVyeSk7XHJcbiAgICByZXR1cm4gZGF0YS5maWx0ZXIoZmlsdGVyKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gQU5EKGZpbHRlcjEsIGZpbHRlcjIpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gZmlsdGVyMSh4KSAmJiBmaWx0ZXIyKHgpOyB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWx0ZXJGcm9tUXVlcnkocXVlcnkpIHtcclxuICAgIHZhciBmaWx0ZXIgPSBmdW5jdGlvbiAoeCkgeyByZXR1cm4gdHJ1ZTsgfTtcclxuICAgIGlmIChxdWVyeS5mcm9tKVxyXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5kYXRlVGltZSA+PSBxdWVyeS5mcm9tOyB9KTtcclxuICAgIGlmIChxdWVyeS50bylcclxuICAgICAgICByZXR1cm4gQU5EKGZpbHRlciwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZGF0ZVRpbWUgPCBxdWVyeS50bzsgfSk7XHJcbiAgICBpZiAocXVlcnkuaWRzKVxyXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4gcXVlcnkuaWRzLmluY2x1ZGVzKHguaWQpOyB9KTtcclxuICAgIGlmIChxdWVyeS5uYW1lKVxyXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5uYW1lID09PSBxdWVyeS5uYW1lOyB9KTtcclxuICAgIGlmIChxdWVyeS50YWdzKVxyXG4gICAgICAgIHJldHVybiBBTkQoZmlsdGVyLCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC50YWdzICYmIFtdLmNvbmNhdChxdWVyeS50YWdzIHx8IFtdKS5zb21lKGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHgudGFncy5pbmNsdWRlcyh0YWcpOyB9KTsgfSk7XHJcbiAgICAvLyBxdWVyeS5oYXNFZGdlc0Zyb20gYW5kIHF1ZXJ5Lmhhc0VkZ2VzVG8gY2Fubm90IGJ5IGZpbHRlcmVkIGhlcmVcclxuICAgIHJldHVybiBmaWx0ZXI7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGJyYW5jaFNlbnNpdGl2ZShtKSB7XHJcbiAgICByZXR1cm4gbS5vcCAhPT0gJ2RlbGV0ZSc7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGdsb2JhbE9wKG0pIHtcclxuICAgIHJldHVybiBtLm9wID09PSAnY2xlYXItYnJhbmNoJyB8fCBtLm9wID09PSAnbWVyZ2UnO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImltcG9ydCAqIGFzIEpzb25TY2hlbWEgZnJvbSBcImtlZGJhY2tlbmQtc2NoZW1hL3NjaGVtYS5qc29uXCI7XHJcbmltcG9ydCB7IGdldFRhYmxlRnJvbUxhYmVsIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxudmFyIENhY2hlQnVzdCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIENhY2hlQnVzdCgpIHtcclxuICAgIH1cclxuICAgIENhY2hlQnVzdC5nZXRDYWNoZUJ1c3QgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5LCB1c2VyLCBpbmNsdWRlcykge1xyXG4gICAgICAgIHZhciBpbnZvbHZlZEl0ZW1zID0gQ2FjaGVCdXN0LmdldEludm9sdmVkSXRlbXModGFibGUsIHF1ZXJ5LCBpbmNsdWRlcyk7XHJcbiAgICAgICAgcmV0dXJuIGludm9sdmVkSXRlbXNcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJjYWNoZS1idXN0LVwiICsgdXNlciArIFwiLVwiICsgaXRlbSk7IH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAhIXZhbHVlOyB9KVxyXG4gICAgICAgICAgICAuam9pbignLycpIHx8ICdzdGF0aWMnO1xyXG4gICAgfTtcclxuICAgIENhY2hlQnVzdC5pbnZhbGlkYXRlQ2FjaGUgPSBmdW5jdGlvbiAocmVxcywgdXNlcikge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBDYWNoZUJ1c3QuZ2V0Q2FjaGVJbnZhbGlkYXRpb25zKHJlcXMpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IF9hW19pXTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjYWNoZS1idXN0LVwiICsgdXNlciArIFwiLVwiICsgaXRlbSwgJycgKyBEYXRlLm5vdygpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgQ2FjaGVCdXN0LmdldEludm9sdmVkSXRlbXMgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5LCBpbmNsdWRlcykge1xyXG4gICAgICAgIHZhciBoYXNFZGdlc0Zyb20gPSBxdWVyeS5oYXNFZGdlc0Zyb207XHJcbiAgICAgICAgdmFyIHJlbGF0ZWRUYWJsZXMgPSBpbmNsdWRlc1xyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gSnNvblNjaGVtYS50YWJsZXNbdGFibGVdLnJlbGF0aW9uc2hpcHNbbGFiZWxdOyB9KVxyXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uICh0YWJsZSkgeyByZXR1cm4gISF0YWJsZTsgfSk7XHJcbiAgICAgICAgaWYgKGhhc0VkZ2VzRnJvbSlcclxuICAgICAgICAgICAgcmVsYXRlZFRhYmxlcy5wdXNoKFwiaGVmXCIgKyB0YWJsZSk7XHJcbiAgICAgICAgcmV0dXJuIFt0YWJsZSwgJ21hc3RlcicsIHF1ZXJ5LmJyYW5jaElkXS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuICEheDsgfSkuY29uY2F0KHJlbGF0ZWRUYWJsZXMpLnNvcnQoKTtcclxuICAgIH07XHJcbiAgICBDYWNoZUJ1c3QuZ2V0Q2FjaGVJbnZhbGlkYXRpb25zID0gZnVuY3Rpb24gKHJlcXMpIHtcclxuICAgICAgICB2YXIgaW52YWxpZGF0aW9uU2V0ID0ge307XHJcbiAgICAgICAgcmVxcy5mb3JFYWNoKGZ1bmN0aW9uIChyZXEpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChyZXEub3ApIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2FkZCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdwdXQnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS50YWJsZV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbGluayc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICd1bmxpbmsnOlxyXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGlvblNldFtyZXEuc291cmNlVGFibGVdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbXCJoZWYtXCIgKyBnZXRUYWJsZUZyb21MYWJlbChyZXEuc291cmNlVGFibGUsIHJlcS5sYWJlbCldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NsZWFyLWJyYW5jaCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaW52YWxpZGF0aW9uU2V0W3JlcS5icmFuY2hJZF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnbWVyZ2UnOlxyXG4gICAgICAgICAgICAgICAgICAgIGludmFsaWRhdGlvblNldFtyZXEuYnJhbmNoSWRdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkYXRpb25TZXRbcmVxLnRhcmdldEJyYW5jaElkIHx8IFwibWFzdGVyXCJdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhpbnZhbGlkYXRpb25TZXQpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBDYWNoZUJ1c3Q7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IENhY2hlQnVzdCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZS1idXN0LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseURlbHRhKGRvYywgZGVsdGEpIHtcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGVsdGEpO1xyXG4gICAgdmFyIHRhcmdldERvYyA9IGRvYztcclxuICAgIGZvciAodmFyIF9pID0gMCwga2V5c18xID0ga2V5czsgX2kgPCBrZXlzXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGtleXNfMVtfaV07XHJcbiAgICAgICAgaWYgKHRhcmdldERvYyA9PT0gZG9jKVxyXG4gICAgICAgICAgICB0YXJnZXREb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MpO1xyXG4gICAgICAgIHZhciB2YWwgPSBkZWx0YVtrZXldO1xyXG4gICAgICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgdmFyIG1ldGFJbnN0cnVjdGlvbnMgPSBPYmplY3Qua2V5cyh2YWwpXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleS5zdGFydHNXaXRoKCckJyk7IH0pO1xyXG4gICAgICAgICAgICBpZiAobWV0YUluc3RydWN0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChtaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaVZhbHVlID0gdmFsW21pXTtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIkYWRkXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNUb0FkZCA9IG1pVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9BZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJGFkZCBpbnN0cnVjdGlvbiBtdXN0IGNvbnRhaW4gYXJyYXlcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0QXJyYXkgPSB0YXJnZXREb2Nba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0YXJnZXRBcnJheSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QXJyYXkgPSB0YXJnZXRBcnJheS5zbGljZSgpOyAvLyBPbiBKUyBzaWRlLCB3ZSBtdXN0IGJlIGltbXV0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RG9jW2tleV0gPSB0YXJnZXRBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgdmFsdWVzVG9BZGRfMSA9IHZhbHVlc1RvQWRkOyBfaSA8IHZhbHVlc1RvQWRkXzEubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHYgPSB2YWx1ZXNUb0FkZF8xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldEFycmF5LmluY2x1ZGVzKHYpKSB7IC8vIGF2b2lkIGR1cHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QXJyYXkucHVzaCh2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJHJlbW92ZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzVG9SZW1vdmVfMSA9IG1pVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9SZW1vdmVfMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIkcmVtb3ZlIGluc3RydWN0aW9uIG11c3QgY29udGFpbiBhcnJheVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRBcnJheSA9IHRhcmdldERvY1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRhcmdldEFycmF5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREb2Nba2V5XSA9IHRhcmdldEFycmF5LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gIXZhbHVlc1RvUmVtb3ZlXzEuaW5jbHVkZXModCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBtZXRhSW5zdHJ1Y3Rpb25zXzEgPSBtZXRhSW5zdHJ1Y3Rpb25zOyBfYSA8IG1ldGFJbnN0cnVjdGlvbnNfMS5sZW5ndGg7IF9hKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWkgPSBtZXRhSW5zdHJ1Y3Rpb25zXzFbX2FdO1xyXG4gICAgICAgICAgICAgICAgICAgIF9sb29wXzEobWkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0RG9jW2tleV0gPSB2YWw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0RG9jO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURlbHRhcyhkZWx0YTEsIGRlbHRhMikge1xyXG4gICAgLy9yZXR1cm4gey4uLmRlbHRhMSwgLi4uZGVsdGEyfTtcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGVsdGEyKTtcclxuICAgIHZhciB0YXJnZXREZWx0YSA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRlbHRhMSk7XHJcbiAgICBmb3IgKHZhciBfaSA9IDAsIGtleXNfMiA9IGtleXM7IF9pIDwga2V5c18yLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlzXzJbX2ldO1xyXG4gICAgICAgIHZhciB2YWwgPSBkZWx0YTJba2V5XTtcclxuICAgICAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXRhSW5zdHJ1Y3Rpb25zID0gT2JqZWN0LmtleXModmFsKVxyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkuc3RhcnRzV2l0aCgnJCcpOyB9KTtcclxuICAgICAgICAgICAgaWYgKG1ldGFJbnN0cnVjdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9sb29wXzIgPSBmdW5jdGlvbiAobWkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWlWYWx1ZSA9IHZhbFttaV07XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJGFkZFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzVG9BZGRfMiA9IG1pVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9BZGRfMikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIkYWRkIGluc3RydWN0aW9uIG11c3QgY29udGFpbiBhcnJheVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhUHJvcCA9IHRhcmdldERlbHRhW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcCA9IHRhcmdldE1ldGFQcm9wID8gdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGFyZ2V0TWV0YVByb3ApIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREZWx0YVtrZXldID0gdGFyZ2V0TWV0YVByb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJzdCwganVzdCBjaGVjayBpZiB0YXJnZXQgbWV0YVByb3AgaGFzIHskcmVtb3ZlOiBbLi4uaXRlbXNdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgc28sIHJlbW92ZSBhbnkgZXF1YWwgaXRlbXMgZnJvbSB0aGVyZSBiZWZvcmUgbWVyZ2luZyB0aGUgeyRhZGQ6IFsuLi5dfSBhcnJheXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0UmVtb3ZlQXJyYXkgPSB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0UmVtb3ZlQXJyYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWV0YVByb3AuJHJlbW92ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFJlbW92ZUFycmF5LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gIXZhbHVlc1RvQWRkXzIuaW5jbHVkZXModCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiAkcmVtb3ZlIGFycmF5IGJlY2FtZSBlbXRweS4gUmVtb3ZlIHRoZSAkcmVtb3ZlIHByb3AuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdyBpdCdzIHRpbWUgdG8gbWVyZ2Ugb3IgY3JlYXRlIHRhcmdldCAkYWRkIGFycmF5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEFkZEFycmF5ID0gdGFyZ2V0TWV0YVByb3AuJGFkZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFkZEFycmF5ID0gdGFyZ2V0QWRkQXJyYXkgPyB0YXJnZXRBZGRBcnJheS5jb25jYXQodmFsdWVzVG9BZGRfMikgOiB2YWx1ZXNUb0FkZF8yLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcC4kYWRkID0gdGFyZ2V0QWRkQXJyYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiJHJlbW92ZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzVG9SZW1vdmVfMiA9IG1pVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzVG9SZW1vdmVfMikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIkcmVtb3ZlIGluc3RydWN0aW9uIG11c3QgY29udGFpbiBhcnJheVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRNZXRhUHJvcCA9IHRhcmdldERlbHRhW2tleV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcCA9IHRhcmdldE1ldGFQcm9wID8gdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGFyZ2V0TWV0YVByb3ApIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXREZWx0YVtrZXldID0gdGFyZ2V0TWV0YVByb3A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGaXJzdCwganVzdCBjaGVjayBpZiB0YXJnZXQgbWV0YVByb3AgaGFzIHskYWRkOiBbLi4uaXRlbXNdfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgc28sIHJlbW92ZSBhbnkgZXF1YWwgaXRlbXMgZnJvbSB0aGVyZSBiZWZvcmUgbWVyZ2luZyB0aGUgeyRyZW1vdmU6IFsuLi5dfSBhcnJheXMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0QWRkQXJyYXkgPSB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0QWRkQXJyYXkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TWV0YVByb3AuJGFkZCA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFkZEFycmF5LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gIXZhbHVlc1RvUmVtb3ZlXzIuaW5jbHVkZXModCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRNZXRhUHJvcC4kYWRkLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiAkYWRkIGFycmF5IGJlY2FtZSBlbXRweS4gUmVtb3ZlIHRoZSAkYWRkIHByb3AuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXRNZXRhUHJvcC4kYWRkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdyBpdCdzIHRpbWUgdG8gbWVyZ2Ugb3IgY3JlYXRlIHRhcmdldCAkcmVtb3ZlIGFycmF5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFJlbW92ZUFycmF5ID0gdGFyZ2V0TWV0YVByb3AuJHJlbW92ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFJlbW92ZUFycmF5ID0gdGFyZ2V0UmVtb3ZlQXJyYXkgPyB0YXJnZXRSZW1vdmVBcnJheS5jb25jYXQodmFsdWVzVG9SZW1vdmVfMikgOiB2YWx1ZXNUb1JlbW92ZV8yLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRNZXRhUHJvcC4kcmVtb3ZlID0gdGFyZ2V0UmVtb3ZlQXJyYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYSA9IDAsIG1ldGFJbnN0cnVjdGlvbnNfMiA9IG1ldGFJbnN0cnVjdGlvbnM7IF9hIDwgbWV0YUluc3RydWN0aW9uc18yLmxlbmd0aDsgX2ErKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaSA9IG1ldGFJbnN0cnVjdGlvbnNfMltfYV07XHJcbiAgICAgICAgICAgICAgICAgICAgX2xvb3BfMihtaSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0YXJnZXREZWx0YVtrZXldID0gdmFsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRhcmdldERlbHRhO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlbHRhLW1lcmdlLmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IHVwZGF0ZUFycmF5IH0gZnJvbSAnLi4va2VkLWJhY2tlbmQtY2xpZW50L3V0aWxzJztcclxuaW1wb3J0IHsgYnJhbmNoU2Vuc2l0aXZlLCBnZXRUYWJsZUZyb21MYWJlbCB9IGZyb20gJy4vdXRpbHMnO1xyXG5pbXBvcnQgeyBhcHBseURlbHRhIH0gZnJvbSAnLi9kZWx0YS1tZXJnZSc7XHJcbnZhciBLZWRCYWNrZW5kUXVlcnkgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBLZWRCYWNrZW5kUXVlcnkodGFibGUsIHF1ZXJ5LCB1c2VyLCByZXBvLCBtdXRhdGlvblF1ZXVlKSB7XHJcbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xyXG4gICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeTtcclxuICAgICAgICB0aGlzLnVzZXIgPSB1c2VyO1xyXG4gICAgICAgIHRoaXMucmVwbyA9IHJlcG87XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlID0gbXV0YXRpb25RdWV1ZTtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBbXTtcclxuICAgICAgICB0aGlzLmdvdEluaXRpYWxSZXNwb25zZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW52YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubG9hZGVkVmVyc2lvbiA9IDA7XHJcbiAgICAgICAgdGhpcy5fbG9hZFByb21pc2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5jbHVkZXMgPSBxdWVyeS5pbmNsdWRlID9cclxuICAgICAgICAgICAgdHlwZW9mIHF1ZXJ5LmluY2x1ZGUgPT09ICdzdHJpbmcnID9cclxuICAgICAgICAgICAgICAgIFtxdWVyeS5pbmNsdWRlXSA6XHJcbiAgICAgICAgICAgICAgICBxdWVyeS5pbmNsdWRlIDpcclxuICAgICAgICAgICAgW107XHJcbiAgICB9XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucXVlcnlLZXkgPSBmdW5jdGlvbiAodGFibGUsIHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIG11dGF0aW9uc09uRW1wdHkgPSBxdWVyeS5tdXRhdGlvbnNPbkVtcHR5LCBjb21wYXJhYmxlUHJvcHMgPSB0c2xpYl8xLl9fcmVzdChxdWVyeSwgW1wibXV0YXRpb25zT25FbXB0eVwiXSk7XHJcbiAgICAgICAgcmV0dXJuIHRhYmxlICsgSlNPTi5zdHJpbmdpZnkoY29tcGFyYWJsZVByb3BzKTtcclxuICAgIH07XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZSwgXCJxdWVyeUtleVwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZWRCYWNrZW5kUXVlcnkucXVlcnlLZXkodGhpcy50YWJsZSwgdGhpcy5xdWVyeSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEsIGRhdGE7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5nb3RJbml0aWFsUmVzcG9uc2UgJiYgIXRoaXMuaW52YWxpZCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5nZXREYXRhV2l0aE11dGF0aW9uc0FwcGxpZWQodGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpLCB0cnVlLCB0aGlzLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ubm90aWZ5U3Vic2NyaWJlcihkYXRhLCB0aGlzLmVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdGhpcy5xdWVyeUxvY2FsbHkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXRhKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlTdWJzY3JpYmVyKGRhdGEsIHRoaXMuZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA0XTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSA0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLmxvYWQgPSBmdW5jdGlvbiAodmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbG9hZFByb21pc2U7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ290SW5pdGlhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtdXRhdGlvbnNPbkVtcHR5IHNob3VsZCBuZXZlciBiZSB1c2VkIHR3aWNlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucXVlcnkubXV0YXRpb25zT25FbXB0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISghdmVyc2lvbiAmJiB0aGlzLl9sb2FkUHJvbWlzZSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLl9sb2FkUHJvbWlzZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiBcclxuICAgICAgICAgICAgICAgICAgICAvLyBsb2FkaW5nIGlzIG9uZ29pbmcsIGFuZCBjYWxsZXIgZG9lcyBub3QgcmVxdWlyZSBhIHJlY2VudCByZWZyZXNoLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdhaXQgZm9yIHRoZSBvbmdvaW5nIGxvYWQgdG8gY29tcGxldGVcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gPSB2ZXJzaW9uIHx8IHRoaXMucmVwby53cml0ZXIucGVyc2lzdGVkVmVyc2lvbi52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZFByb21pc2UgPSB0aGlzLl9sb2FkUHJvbWlzZSA9IHRoaXMuX2xvYWQodmVyc2lvbikudGhlbihmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9sb2FkUHJvbWlzZSA9PT0gbG9hZFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5sb2FkZWRWZXJzaW9uID0gTWF0aC5tYXgoX3RoaXMubG9hZGVkVmVyc2lvbiwgdmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9sb2FkUHJvbWlzZSA9PT0gbG9hZFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb29uZSBoYXMgcmVmcmVzaGVkIG91ciBsb2FkLiBUaGUgZXJyb3IgaXMgdGhlIGZpbmFsIHJlc3VsdC4gU2V0IGl0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmVycm9yID0gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9sb2FkUHJvbWlzZSA9PT0gbG9hZFByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBOb29uZSBoYXMgcmVmcmVzaGVkIG91ciBsb2FkLiBXZSdyZSBmaW5pc2hlZC4gRGF0YSBvciBlcnJvciBpcyBhbHJlYWR5IHNldC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYXJrIGdvdEluaXRpYWxSZXNwb25zZSB0byB0cnVlIGFuZCBub3RpZnkgc3Vic2NyaWJlcnMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2xvYWRQcm9taXNlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5nb3RJbml0aWFsUmVzcG9uc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm5vdGlmeVN1YnNjcmliZXJzKF90aGlzLm11dGF0aW9uUXVldWUuZ2V0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQSBtb3JlIHJlY2VudCBjYWxsIHRvIGxvYWQoKSBpcyBvbmdvaW5nLCBPUiB3YXMgb25nb2luZyBidXQgcmVzcG9uZGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVmb3JlIHVzLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIGFueSBjYXNlIHJldHVybiB0aGlzLl9sb2FkUHJvbWlzZS4gSWYgaXQncyBvbmdvaW5nIHdlJ2xsIHdhaXQgZm9yIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gZmluaXNoLiBJZiBpdCdzIG51bGwsIHdlJ2xsIGJlIHJldHVybmluZyBmaW5hbGx5IGhlcmUgd2l0aG91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueSBhY3Rpb24sIGJlY2F1c2UgdGhlIGFjdGlvbiB3YXMgdGFrZW4gYnkgdGhlIHJlZnJlc2hlci5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuX2xvYWRQcm9taXNlOyAvLyBXYWl0IGZvciB0aGUgcmVmcmVzaGVkIGxvYWQgdG8gY29tcGxldGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGxvYWRQcm9taXNlXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLl9sb2FkID0gZnVuY3Rpb24gKHZlcnNpb24pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubXV0YXRpb25RdWV1ZS5hZmZlY3RzUXVlcnkodGhpcy50YWJsZSwgdGhpcy5xdWVyeSwgdGhpcy5pbmNsdWRlcykpIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGVyZSBhcmUgb3V0Z29pbmcgbXV0YXRpb25zIHRoYXQgYWZmZWN0cyB0aGlzIHF1ZXJ5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIHdhaXQgdGlsbCB0aGV5IHJlYWNoIHNlcnZlciBhbmQgc2VydmVyIHJlc3BvbmRzIHdpdGggT0sgYmVmb3JlIHF1ZXJ5aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzZXJ2ZXIuIE90aGVyd2lzZSwgd2UgbWF5IGdldCBpbmFjY3VyYXRlIGRhdGEgZnJvbSBzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVwby53cml0ZXIud2FpdEZvclZlcnNpb25Ub1BlcnNpc3QodmVyc2lvbildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgYXJlIG91dGdvaW5nIG11dGF0aW9ucyB0aGF0IGFmZmVjdHMgdGhpcyBxdWVyeS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTmVlZCB0byB3YWl0IHRpbGwgdGhleSByZWFjaCBzZXJ2ZXIgYW5kIHNlcnZlciByZXNwb25kcyB3aXRoIE9LIGJlZm9yZSBxdWVyeWluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgc2VydmVyLiBPdGhlcndpc2UsIHdlIG1heSBnZXQgaW5hY2N1cmF0ZSBkYXRhIGZyb20gc2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucXVlcnlTZXJ2ZXIoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSB0aGlzLnN1YnNjcmlwdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzICE9PSBzdWJzY3JpcHRpb247IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUuY29tbWl0TXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9ucywgdmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2ksIG11dGF0aW9uc18xLCBtLCBkYXRhO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kYXRhKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2kgPSAwLCBtdXRhdGlvbnNfMSA9IG11dGF0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoX2kgPCBtdXRhdGlvbnNfMS5sZW5ndGgpKSByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbSA9IG11dGF0aW9uc18xW19pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEobS5vcCA9PT0gJ2NsZWFyLWJyYW5jaCcgJiYgKG0uYnJhbmNoSWQgPT09IHRoaXMucXVlcnkuYnJhbmNoSWQpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaE9ySW52YWxpZGF0ZSh2ZXJzaW9uKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG0ub3AgPT09ICdtZXJnZScgJiYgKCFtLnRhcmdldEJyYW5jaElkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmJyYW5jaElkID09PSB0aGlzLnF1ZXJ5LmJyYW5jaElkIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLnRhcmdldEJyYW5jaElkID09PSB0aGlzLnF1ZXJ5LmJyYW5jaElkKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hPckludmFsaWRhdGUodmVyc2lvbildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtLm9wID09PSAndXBkYXRlJyAmJiAoKG0uZGVsdGFEb2MudGFncyAmJiB0aGlzLnF1ZXJ5LnRhZ3MpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAobS5kZWx0YURvYy5uYW1lICYmIHRoaXMucXVlcnkubmFtZSkpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgN107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgdGFnIG1heSBoYXZlIGJlZW4gYWRkZWQsIG9yIHJlbmFtZWQsIGFuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcXVlcnkgaXMgZGVwZW5kZW50IG9uIHRoZSBzYW1lIHByb3BlcnR5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcXVlcnkgbXVzdCBiZSByZWZyZXNoZWQgZnJvbSBzZXJ2ZXIgYXMgd2UgY2Fubm90XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbW1pdCB0aGUgbXV0YXRpb25zIGxvY2FsbHkgYXMgd2UgZG9uJ3QgaGF2ZSBhbGwgaW5mby5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZWZyZXNoT3JJbnZhbGlkYXRlKHZlcnNpb24pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgdGFnIG1heSBoYXZlIGJlZW4gYWRkZWQsIG9yIHJlbmFtZWQsIGFuZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGUgcXVlcnkgaXMgZGVwZW5kZW50IG9uIHRoZSBzYW1lIHByb3BlcnR5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcXVlcnkgbXVzdCBiZSByZWZyZXNoZWQgZnJvbSBzZXJ2ZXIgYXMgd2UgY2Fubm90XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbW1pdCB0aGUgbXV0YXRpb25zIGxvY2FsbHkgYXMgd2UgZG9uJ3QgaGF2ZSBhbGwgaW5mby5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfaSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAxXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDg6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB0aGlzLmdldERhdGFXaXRoTXV0YXRpb25zQXBwbGllZChtdXRhdGlvbnMsIGZhbHNlLCB0aGlzLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRRdWVyeS5wcm90b3R5cGUucmVmcmVzaE9ySW52YWxpZGF0ZSA9IGZ1bmN0aW9uICh2ZXJzaW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5zdWJzY3JpcHRpb25zLmxlbmd0aCA9PT0gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmludmFsaWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMubG9hZCh2ZXJzaW9uKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5ub3RpZnlTdWJzY3JpYmVycyA9IGZ1bmN0aW9uIChvcHRpbWlzdGljTXV0YXRpb25zKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5kYXRhICYmIHRoaXMuZ290SW5pdGlhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIHZhciBkYXRhXzEgPSB0aGlzLmdldERhdGFXaXRoTXV0YXRpb25zQXBwbGllZChvcHRpbWlzdGljTXV0YXRpb25zLCB0cnVlLCB0aGlzLmRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgcy5ub3RpZnlTdWJzY3JpYmVyKGRhdGFfMSwgX3RoaXMuZXJyb3IpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5xdWVyeUxvY2FsbHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwby5xdWVyeVNldC5xdWVyeUxvY2FsbHkodGhpcy50YWJsZSwgdGhpcy5xdWVyeSwgdGhpcy5pbmNsdWRlcyk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5xdWVyeVNlcnZlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGE7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5yZXBvLmdldENsaWVudCgpLmxpc3QodGhpcy50YWJsZSwgdHNsaWJfMS5fX2Fzc2lnbih7fSwgdGhpcy5xdWVyeSkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBkYXRhXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFF1ZXJ5LnByb3RvdHlwZS5nZXREYXRhV2l0aE11dGF0aW9uc0FwcGxpZWQgPSBmdW5jdGlvbiAobXV0YXRpb25zLCBvcHRpbWlzdGljLCBkYXRhKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHtcclxuICAgICAgICAgICAgZGF0YSA9IF90aGlzLmFwcGx5TXV0YXRpb25zT25EYXRhKGRhdGEsIG11dGF0aW9uLCBvcHRpbWlzdGljKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLmFwcGx5TXV0YXRpb25zT25EYXRhID0gZnVuY3Rpb24gKGRhdGEsIG0sIG9wdGltaXN0aWMpIHtcclxuICAgICAgICBpZiAoYnJhbmNoU2Vuc2l0aXZlKG0pICYmIG0uYnJhbmNoSWQgIT0gdGhpcy5xdWVyeS5icmFuY2hJZClcclxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgdmFyIF9hID0gdGhpcywgdGFibGUgPSBfYS50YWJsZSwgaW5jbHVkZXMgPSBfYS5pbmNsdWRlcywgbGlzdE9wdGlvbnMgPSBfYS5xdWVyeTtcclxuICAgICAgICB2YXIgc291cmNlSWRzID0gbGlzdE9wdGlvbnMuaGFzRWRnZXNGcm9tID8gW10uY29uY2F0KGxpc3RPcHRpb25zLmhhc0VkZ2VzRnJvbSB8fCBbXSkgOiBbXTtcclxuICAgICAgICB2YXIgcmVxdWVzdGVkVGFncyA9IGxpc3RPcHRpb25zLnRhZ3MgPyBbXS5jb25jYXQobGlzdE9wdGlvbnMudGFncyB8fCBbXSkgOiBbXTtcclxuICAgICAgICBzd2l0Y2ggKG0ub3ApIHtcclxuICAgICAgICAgICAgY2FzZSAndXBkYXRlJzoge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUFycmF5KGRhdGEsIGZ1bmN0aW9uIChkb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZG9jLmlkID09PSBtLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IGRlbHRhIG9uIHVwZGF0ZWQgZG9jdW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWREb2MgPSBhcHBseURlbHRhKGRvYywgbS5kZWx0YURvYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpbWlzdGljKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZERvYy4kbWV0YSA9ICd1cGRhdGluZyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVkRG9jO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBpZCBkb2VzIG5vdCBhcHBseSB0byB0aGlzIGRvYywgc2VhcmNoIGluIGdyYXBocyB0aGUgaWQgaXMgZm91bmRcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbW9uZyBncmFwaCBpbmNsdWRlZCBkb2NzLCBhbmQgaWYgc28sIHVwZGF0ZSB0aGF0IG9uZTpcclxuICAgICAgICAgICAgICAgICAgICBpbmNsdWRlcy5mb3JFYWNoKGZ1bmN0aW9uIChsYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmNsdWRlZERvY3MgPSBkb2NbbGFiZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZWREb2NzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZEFycmF5ID0gdXBkYXRlQXJyYXkoaW5jbHVkZWREb2NzLCBmdW5jdGlvbiAocmVsYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWxhdGVkLmlkICE9PSBtLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVsYXRlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFJlbGF0ZWQgPSBhcHBseURlbHRhKHJlbGF0ZWQsIG0uZGVsdGFEb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpbWlzdGljKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUmVsYXRlZC4kbWV0YSA9ICd1cGRhdGluZyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZWRSZWxhdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlZEFycmF5ICE9PSBpbmNsdWRlZERvY3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MsIChfYSA9IHt9LCBfYVtsYWJlbF0gPSB1cGRhdGVkQXJyYXksIF9hKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2FzZSAnYWRkLXJlbGF0ZWQnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlID09PSBtLnRhYmxlICYmIGluY2x1ZGVzLmluZGV4T2YobS5ncmFwaFByb3ApICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIGV4cHJlc3Npb24gaXMgYGRiLmNvdXJzZUJsb2Nrcy4uLi53aGF0ZXZlci4uIC5pbmNsdWRlKFwiYWJpbGl0aWVzXCIpYCwgZGV0ZWN0OiBkYi5jb3Vyc2VCbG9ja3MuYWRkUmVsYXRlZChibG9ja0lkLCAnYWJpbGl0aWVzJywgLi4uKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIC4uLmJlY2F1c2UgdGFibGUgPSAnY291cnNlQmxvY2tzJyBhbmQgaW5jbHVkZXMgaGFzIFwiYWJpbGl0aWVzXCIuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUFycmF5KGRhdGEsIGZ1bmN0aW9uIChkb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jLmlkICE9PSBtLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0ZWREb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBtLnJlbGF0ZWREb2MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW1pc3RpYylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWREb2MuJG1ldGEgPSAnYWRkaW5nJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hc3NpZ24oe30sIGRvYywgKF9hID0ge30sIF9hW20uZ3JhcGhQcm9wXSA9IGRvY1ttLmdyYXBoUHJvcF0uY29uY2F0KFtyZWxhdGVkRG9jXSksIF9hKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobGlzdE9wdGlvbnMuaGFzRWRnZXNGcm9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZUlkcy5pbmNsdWRlcyhtLmlkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiBleHByZXNzaW9uIGlzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGBkYi5jb3Vyc2VCbG9ja3MuaGFzRWRnZXNGcm9tKFtjb3Vyc2VJZF0pYCAgKG1lYW5pbmcgdGFibGU9J2NvdXJzZUJsb2NrcycgYW5kIHNvdXJjZUlkcyBpbmNsdWRlcyBjb3Vyc2VJZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLCBkZXRlY3Q6IGRiLmNvdXJzZUluc3RhbmNlcy5hZGRSZWxhdGVkKGNvdXJzZUlkLCAnY291cnNlQmxvY2tzJywgLi4uLikgLy8gbS5ncmFwaFByb3AgPT09ICdibG9ja3MnLS0+IGdldFRhYmxlRnJvbUxhYmVsIC0tPiAnY291cnNlQmxvY2tzJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFibGUgPT09IGdldFRhYmxlRnJvbUxhYmVsKG0udGFibGUsIG0uZ3JhcGhQcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsaXN0T3B0aW9ucy50YWdzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhLmNvbmNhdCh0aGlzLnNldEdyYXBoUHJvcHMobS5yZWxhdGVkRG9jKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobS5yZWxhdGVkRG9jLnRhZ3MgJiYgcmVxdWVzdGVkVGFncy5zb21lKGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIG0ucmVsYXRlZERvYy50YWdzLmluY2x1ZGVzKHRhZyk7IH0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuY29uY2F0KHRoaXMuc2V0R3JhcGhQcm9wcyhtLnJlbGF0ZWREb2MpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsaXN0T3B0aW9ucy5pZHMgJiYgbGlzdE9wdGlvbnMuaWRzLnNvbWUoZnVuY3Rpb24gKGlkKSB7IHJldHVybiBpZCA9PT0gbS5yZWxhdGVkRG9jLmlkOyB9KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEEgY2VydGFpbiBJRCBpcyBvYnNlcnZlZC4gQSBkb2Mgd2l0aCB0aGlzIGlkIGlzIGJlaW5nIGFkZGVkLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgZG9jIHRvIHRoZSByZXN1bHQuIEV4YWN0bHkgdGhpcyBXSUxMIGhhcHBlbiBpbiB0aGUgZm9sbG93aW5nIHR5cGljYWwgc2NlbmFyaW86XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gMS4gVXNlciBhZGRzIGEgcmVsYXRlZCBkb2N1bWVudCB0byBhIGxpc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gMi4gRG9jdW1lbnQgcmVtYWlucyB3aXRoaW4gdGhlIE11dGF0aW9uUXVldWUgd2hpbGUgYmF0Y2gtcmVxdWVzdCBpcyBiZWluZyBwcm9jZXNzZWQgYnkgc2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIDMuIFVzZXIgY2xpY2tzIHRoZSBhZGRlZCBpdGVtIHRvIGVkaXQgb3IgdmlldyBpdCAob3Igb3VyIGNvbXBvbmVudCByZWRpcmVjdHMgdG8gaXRzIGVkaXRvcilcclxuICAgICAgICAgICAgICAgICAgICAvLyA0LiBBIG5ldyBxdWVyeSBvZiB0aGF0IHBhcnRpY3VsYXIgSUQgaXMgc3Vic2NyaWJlZCB0byB7aWRzPVt0aGVJZF19XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgS2VkQmFja2VuZFF1ZXJ5LnN1YnNjcmliZSB0aGVuIGRvZXMgdGhpczpcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgIDEuIENhbGwgcXVlcnlMb2NhbGx5KCkgYmVmb3JlIHF1ZXJ5aW5nIHNlcnZlclxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgMi4gcXVlcnlMb2NhbGx5KCkgaW5zcGVjdHMgbXV0YXRpb25zIGFuZCBmaW5kcyBhIG1hdGNoLCByZXR1cm5pbmcgYW4gZW1wdHkgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgKGFzc3VtZXMgYXMgd2UgYXJlIGFkZGluZyBpdCwgaXQgY2FuJ3QgZXhpc3Qgb24gdGhlIHNlcnZlciBhbnl3YXkpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAzLiBLZWRCYWNrZW5kUVVlcnkgYXBwbGllcyBtdXRhdGlvbnMgb250byB0aGUgZW1wdHkgbGlzdCwgYW5kIGVuZHMgdXAgaGVyZSB0byBhZGRcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGl0IG9wdGltaXN0aWNhbGx5LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgNC4gV2hlbiBzZXJ2ZXIgcmVzcG9uZHMgd2l0aCAyMDAgT0ssIGNhbGxzIHVzIGhlcmUgYWdhaW4gd2l0aCBvcHRpbWlzdGljPWZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICB0byBcInBlcnNpc3RcIiBpdCBpbiB0aGUgcXVlcnkncyBkYXRhIGFycmF5LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgNEI6IElmIG5vdCAyMDAgT0ssIG11dGF0aW9uIG1heSBiZSBnb25lIGFuZCB0aGUgc3Vic2NyaWJlciB3aWxsIHNlIGFuIGVycm9yIHBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIFwiQ291bGQgbm90IGZpbmQgZW50aXR5IHdpdGggaWQgWC5cIiBhbG9uZyB3aXRoIGEgcmVkIGVycm9yIG1lc3NhZ2Ugb24gdGhlIHNjcmVlblxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgYWJvdXQgdGhhdCBpdCBmYWlsZWQgdG8gc2F2ZSBvbiBzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuY29uY2F0KHRoaXMuc2V0R3JhcGhQcm9wcyhtLnJlbGF0ZWREb2MpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICBjYXNlICdyZW1vdmUtcmVsYXRlZCc6XHJcbiAgICAgICAgICAgICAgICBpZiAodGFibGUgPT09IG0udGFibGUgJiYgaW5jbHVkZXMuaW5kZXhPZihtLmdyYXBoUHJvcCkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZUFycmF5KGRhdGEsIGZ1bmN0aW9uIChkb2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jbHVkZWREb2NzID0gZG9jW20uZ3JhcGhQcm9wXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmNsdWRlZERvY3MpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jLmlkICE9PSBtLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hc3NpZ24oe30sIGRvYywgKF9hID0ge30sIF9hW20uZ3JhcGhQcm9wXSA9IG9wdGltaXN0aWMgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayByZWxhdGVkLWRvYy10by1yZW1vdmUgd2l0aCAkbWV0YTogJ2RlbGV0aW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jbHVkZWREb2NzLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCAhPT0gbS5yZWxhdGVkSWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgOiB0c2xpYl8xLl9fYXNzaWduKHt9LCBkLCB7ICRtZXRhOiAnZGVsZXRpbmcnIH0pOyB9KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWxldGUgcmVsYXRlZC1kb2MtdG8tcmVtb3ZlIGZyb20gZG9jW2dyYXBQcm9wXTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVkRG9jcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgIT09IG0ucmVsYXRlZElkOyB9KSwgX2EpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsaXN0T3B0aW9ucy5oYXNFZGdlc0Zyb20pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlSWRzLmluY2x1ZGVzKG0uaWQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW1pc3RpYyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCA9PT0gbS5yZWxhdGVkSWQgPyB0c2xpYl8xLl9fYXNzaWduKHt9LCBkLCB7ICRtZXRhOiAnZGVsZXRpbmcnIH0pIDogZDsgfSkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuaWQgIT09IG0ucmVsYXRlZElkOyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICBjYXNlICdkZWxldGUnOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRhYmxlID09PSBtLnRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmlkICE9PSBtLmlkOyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGxpc3RPcHRpb25zLmluY2x1ZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5jbHVkZWRUYWJsZXMgPSBpbmNsdWRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChsYWJlbCkgeyByZXR1cm4gKHsgbGFiZWw6IGxhYmVsLCB0YWJsZTogZ2V0VGFibGVGcm9tTGFiZWwodGFibGUsIGxhYmVsKSB9KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhYmVsc18xID0gaW5jbHVkZWRUYWJsZXMuZmlsdGVyKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBfYS50YWJsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlID09PSBtLnRhYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbHNfMS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVBcnJheShkYXRhLCBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbHNfMS5mb3JFYWNoKGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYWJlbCA9IF9hLmxhYmVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVsYXRlZERvY3MgPSBkb2NbbGFiZWxdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWxhdGVkRG9jcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MsIChfYiA9IHt9LCBfYltsYWJlbF0gPSBvcHRpbWlzdGljID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWREb2NzLm1hcChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5pZCA9PT0gbS5pZCA/IHRzbGliXzEuX19hc3NpZ24oe30sIGQsIHsgJG1ldGE6ICdkZWxldGluZycgfSkgOiBkOyB9KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkRG9jcy5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkID0gX2EuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkICE9PSBtLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksIF9iKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUXVlcnkucHJvdG90eXBlLnNldEdyYXBoUHJvcHMgPSBmdW5jdGlvbiAoZG9jKSB7XHJcbiAgICAgICAgdmFyIGNvcHkgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBkb2MpO1xyXG4gICAgICAgIHRoaXMuaW5jbHVkZXMuZm9yRWFjaChmdW5jdGlvbiAobGFiZWwpIHsgcmV0dXJuIGNvcHlbbGFiZWxdID0gY29weVtsYWJlbF0gfHwgW107IH0pO1xyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgfTtcclxuICAgIHJldHVybiBLZWRCYWNrZW5kUXVlcnk7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEtlZEJhY2tlbmRRdWVyeSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLXF1ZXJ5LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IEJhdGNoUnVubmVyIH0gZnJvbSAnLi4va2VkLWJhY2tlbmQtY2xpZW50JztcclxuaW1wb3J0IHsgS2VkQmFja2VuZFN1YnNjcmlwdGlvbiB9IGZyb20gXCIuL2tlZGJhY2tlbmQtc3Vic2NyaXB0aW9uXCI7XHJcbmltcG9ydCB7IENhY2hlQnVzdCB9IGZyb20gJy4vY2FjaGUtYnVzdCc7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRRdWVyeSB9IGZyb20gJy4va2VkYmFja2VuZC1xdWVyeSc7XHJcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2NvbGxlY3Rpb24nO1xyXG4vKipcclxuICogUmVwcmVzZW50cyBhIFwibGl2ZVwiIHF1ZXJ5IGFnYWluc3QgYSB0YWJsZSBvciBmaWx0ZXJlZCB0YWJsZS5cclxuICovXHJcbnZhciBLZWRCYWNrZW5kQ29sbGVjdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKEtlZEJhY2tlbmRDb2xsZWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENvbGxlY3Rpb24ocmVwbywgdGFibGUsIHF1ZXJ5KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgS2VkQmFja2VuZFN1YnNjcmlwdGlvbihvYnNlcnZlciwgX3RoaXMpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZXBvLnF1ZXJ5U2V0LnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xyXG4gICAgICAgIH0pIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMucmVwbyA9IHJlcG87XHJcbiAgICAgICAgX3RoaXMudGFibGUgPSB0YWJsZTtcclxuICAgICAgICBfdGhpcy5xdWVyeSA9IHF1ZXJ5O1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUsIFwicXVlcnlLZXlcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gS2VkQmFja2VuZFF1ZXJ5LnF1ZXJ5S2V5KHRoaXMudGFibGUsIHRoaXMucXVlcnkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZSwgXCJpbmNsdWRlc1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbmNsdWRlcyB8fCAodGhpcy5faW5jbHVkZXMgPSBbXS5jb25jYXQodGhpcy5xdWVyeS5pbmNsdWRlIHx8IFtdKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuYXBwbHlRdWVyeSA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgS2VkQmFja2VuZENvbGxlY3Rpb24odGhpcy5yZXBvLCB0aGlzLnRhYmxlLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLnF1ZXJ5LCBxdWVyeSkpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRUb1F1ZXJ5QXJyYXlQcm9wID0gZnVuY3Rpb24gKGFycmF5UHJvcCwgZW50cmllcykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KChfYSA9IHt9LCBfYVthcnJheVByb3BdID0gKHRoaXMucXVlcnlbYXJyYXlQcm9wXSB8fCBbXSkuY29uY2F0KGVudHJpZXMpLCBfYSkpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5hZGRGbGFncyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgZmxhZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBmbGFnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiZmxhZ3NcIiwgZmxhZ3MpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgZGVidWc6IHRydWUgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmlkc09ubHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpZHNPbmx5XCIpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5pZHNBbmROYW1lc09ubHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpZHNBbmROYW1lc09ubHlcIik7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmluY2x1ZGVJZHNPbmx5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFkZEZsYWdzKFwiaW5jbHVkZUlkc09ubHlcIik7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmluY2x1ZGVJZHNBbmROYW1lc09ubHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkRmxhZ3MoXCJpbmNsdWRlSWRzQW5kTmFtZXNPbmx5XCIpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5iZXR3ZWVuID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGZyb206IGZyb20sIHRvOiB0byB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUucm9sZSA9IGZ1bmN0aW9uIChyb2xlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IHJvbGU6IHJvbGUgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmhhc0VkZ2VzRnJvbSA9IGZ1bmN0aW9uIChpZHMsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCB8fCBpZHMuc29tZShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICFpZDsgfSkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaWQgbGlzdCBnaXZlbiB0byBDb2xsZWN0aW9uLmhhc0VkZ2VzRnJvbShcIiArIEpTT04uc3RyaW5naWZ5KGlkcykgKyBcIilcIik7XHJcbiAgICAgICAgdmFyIGhlZiA9IHRoaXMuYWRkVG9RdWVyeUFycmF5UHJvcChcImhhc0VkZ2VzRnJvbVwiLCBpZHMpO1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZURlbHRhRWRnZXMgP1xyXG4gICAgICAgICAgICBoZWYuYWRkRmxhZ3MoXCJpbmNsdWRlRGVsdGFFZGdlc1wiKSA6XHJcbiAgICAgICAgICAgIGhlZjtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaGFzRWRnZXNUbyA9IGZ1bmN0aW9uIChpZHMsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMCB8fCBpZHMuc29tZShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICFpZDsgfSkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaWQgbGlzdCBnaXZlbiB0byBDb2xsZWN0aW9uLmhhc0VkZ2VzVG8oXCIgKyBKU09OLnN0cmluZ2lmeShpZHMpICsgXCIpXCIpO1xyXG4gICAgICAgIHZhciBoZXQgPSB0aGlzLmFkZFRvUXVlcnlBcnJheVByb3AoXCJoYXNFZGdlc1RvXCIsIGlkcyk7XHJcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlRGVsdGFFZGdlcyA/XHJcbiAgICAgICAgICAgIGhldC5hZGRGbGFncyhcImluY2x1ZGVEZWx0YUVkZ2VzXCIpIDpcclxuICAgICAgICAgICAgaGV0O1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5pZCA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IGlkczogW2lkXSB9KS5zaW5nbGUoe1xyXG4gICAgICAgICAgICBvblplcm86IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgZW50aXR5IGluIFwiICsgX3RoaXMudGFibGUgKyBcIiB3aXRoIGlkIFwiICsgaWQpOyB9LFxyXG4gICAgICAgICAgICBvbk1hbnk6IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKFwiTXVsdGlwbGUgZW50cmllcyBpbiBcIiArIF90aGlzLnRhYmxlICsgXCIgd2l0aCBpZCBcIiArIGlkKTsgfSxcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuaWRzID0gZnVuY3Rpb24gKGlkcykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBpZHM6IGlkcyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUubmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IG5hbWU6IG5hbWUgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnRhZ3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHRhZ3MgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICB0YWdzW19pXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyB0YWdzOiB0YWdzIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5icmFuY2hJZCA9IGZ1bmN0aW9uIChicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFwcGx5UXVlcnkoeyBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmluY2x1ZGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGdyYXBocyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGdyYXBoc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5hZGRUb1F1ZXJ5QXJyYXlQcm9wKFwiaW5jbHVkZVwiLCBncmFwaHMpO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5jYWNoZU9wdGltaXplZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hcHBseVF1ZXJ5KHsgY2FjaGVCdXN0OiBDYWNoZUJ1c3QuZ2V0Q2FjaGVCdXN0KHRoaXMudGFibGUsIHRoaXMucXVlcnksIHRoaXMucmVwby5nZXRVc2VyKCksIHRoaXMuaW5jbHVkZXMpIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5tdXRhdGlvbnNPbkVtcHR5ID0gZnVuY3Rpb24gKG11dGF0aW9uRmFjdG9yeSkge1xyXG4gICAgICAgIHZhciB0eCA9IG5ldyBCYXRjaFJ1bm5lcigpO1xyXG4gICAgICAgIG11dGF0aW9uRmFjdG9yeSh0eCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHlRdWVyeSh7IG11dGF0aW9uc09uRW1wdHk6IHR4Lm11dGF0aW9uUmVxdWVzdHMgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLnNpbmdsZSA9IGZ1bmN0aW9uICh0aHJvd2Vycykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIF9hID0gdGhyb3dlcnMgfHwge30sIG9uWmVybyA9IF9hLm9uWmVybywgb25NYW55ID0gX2Eub25NYW55O1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmIChvblplcm8pXHJcbiAgICAgICAgICAgICAgICAgICAgb25aZXJvKCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2luZ2xlIGl0ZW0gb2YgXCIgKyBfdGhpcy50YWJsZSArIFwiIGV4cGVjdGVkIHRvIGJlIHJldHVybmVkIGJ5IHF1ZXJ5IFwiICsgSlNPTi5zdHJpbmdpZnkoX3RoaXMucXVlcnkpICsgXCIgYnV0IG5vbmUgd2FzIGZvdW5kLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgZGVidWdnZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAob25NYW55KVxyXG4gICAgICAgICAgICAgICAgICAgIG9uTWFueSgpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2luZ2xlIGl0ZW0gb2YgXCIgKyBfdGhpcy50YWJsZSArIFwiIGV4cGVjdGVkIHRvIGJlIHJldHVybmVkIGJ5IHF1ZXJ5IFwiICsgSlNPTi5zdHJpbmdpZnkoX3RoaXMucXVlcnkpICsgXCIgYnV0IFwiICsgaXRlbXMubGVuZ3RoICsgXCIgd2FzIGZvdW5kLlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXRlbXNbMF07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLypjb21iaW5lTGF0ZXN0PFRPdGhlcj4ob3RoZXI6IFF1ZXJ5T2JzZXJ2YWJsZTxUT3RoZXI+KSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcih4ID0+IHgpLmNvbWJpbmVMYXRlc3Qob3RoZXIpO1xyXG4gICAgfSovXHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGlkLCBjaGFuZ2VzLCBkZWJvdW5jZSkge1xyXG4gICAgICAgIGlmIChkZWJvdW5jZSA9PT0gdm9pZCAwKSB7IGRlYm91bmNlID0gMTAwMDsgfVxyXG4gICAgICAgIHRoaXMucmVwby53cml0ZXIubXV0YXRlKFt7XHJcbiAgICAgICAgICAgICAgICBvcDogJ3VwZGF0ZScsXHJcbiAgICAgICAgICAgICAgICB0YWJsZTogdGhpcy50YWJsZSxcclxuICAgICAgICAgICAgICAgIGJyYW5jaElkOiB0aGlzLnF1ZXJ5LmJyYW5jaElkLFxyXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgZGVsdGFEb2M6IGNoYW5nZXNcclxuICAgICAgICAgICAgfV0sIGRlYm91bmNlKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkUmVsYXRlZCA9IGZ1bmN0aW9uIChpZCwgbGFiZWwsIHJlbGF0ZWREb2MpIHtcclxuICAgICAgICB0aGlzLnJlcG8ud3JpdGVyLm11dGF0ZShbe1xyXG4gICAgICAgICAgICAgICAgb3A6ICdhZGQtcmVsYXRlZCcsXHJcbiAgICAgICAgICAgICAgICB0YWJsZTogdGhpcy50YWJsZSxcclxuICAgICAgICAgICAgICAgIGJyYW5jaElkOiB0aGlzLnF1ZXJ5LmJyYW5jaElkLFxyXG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgZ3JhcGhQcm9wOiBsYWJlbCxcclxuICAgICAgICAgICAgICAgIHJlbGF0ZWREb2M6IHJlbGF0ZWREb2NcclxuICAgICAgICAgICAgfV0sIDApO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVSZWxhdGVkID0gZnVuY3Rpb24gKGlkLCBsYWJlbCwgcmVsYXRlZElkKSB7XHJcbiAgICAgICAgdGhpcy5yZXBvLndyaXRlci5tdXRhdGUoW3tcclxuICAgICAgICAgICAgICAgIG9wOiAncmVtb3ZlLXJlbGF0ZWQnLFxyXG4gICAgICAgICAgICAgICAgdGFibGU6IHRoaXMudGFibGUsXHJcbiAgICAgICAgICAgICAgICBicmFuY2hJZDogdGhpcy5xdWVyeS5icmFuY2hJZCxcclxuICAgICAgICAgICAgICAgIGlkOiBpZCxcclxuICAgICAgICAgICAgICAgIGdyYXBoUHJvcDogbGFiZWwsXHJcbiAgICAgICAgICAgICAgICByZWxhdGVkSWQ6IHJlbGF0ZWRJZFxyXG4gICAgICAgICAgICB9XSwgMCk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENvbGxlY3Rpb24ucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHZhciBpZHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICBpZHNbX2ldID0gYXJndW1lbnRzW19pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXBvLndyaXRlci5tdXRhdGUoaWRzLm1hcChmdW5jdGlvbiAoaWQpIHsgcmV0dXJuICh7XHJcbiAgICAgICAgICAgIG9wOiAnZGVsZXRlJyxcclxuICAgICAgICAgICAgdGFibGU6IF90aGlzLnRhYmxlLFxyXG4gICAgICAgICAgICBpZDogaWRcclxuICAgICAgICB9KTsgfSksIDApO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICAgICAgICB0aGlzLnJlcG8ucXVlcnlTZXQudW5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2VkQmFja2VuZENvbGxlY3Rpb247XHJcbn0oQ29sbGVjdGlvbikpO1xyXG5leHBvcnQgeyBLZWRCYWNrZW5kQ29sbGVjdGlvbiB9O1xyXG4vKm1peGluKFxyXG4gIEtlZEJhY2tlbmRDb2xsZWN0aW9uLnByb3RvdHlwZSxcclxuICBNYXBwZWRDb2xsZWN0aW9uLnByb3RvdHlwZSxcclxuICBcIm1hcFwiLCBcImZsYXRcIiwgXCJjb25jYXRcIiwgXCJyZW5kZXJcIiwgXCJsb2FkXCIpOyovXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlZGJhY2tlbmQtY29sbGVjdGlvbi5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kUXVlcnkgfSBmcm9tICcuL2tlZGJhY2tlbmQtcXVlcnknO1xyXG5pbXBvcnQgKiBhcyBKc29uU2NoZW1hIGZyb20gJ2tlZGJhY2tlbmQtc2NoZW1hL3NjaGVtYS5qc29uJztcclxuaW1wb3J0IHsgcXVlcnlBcnJheSB9IGZyb20gJy4vdXRpbHMnO1xyXG52YXIgUXVlcnlTZXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBRdWVyeVNldChtdXRhdGlvblF1ZXVlKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlID0gbXV0YXRpb25RdWV1ZTtcclxuICAgICAgICB0aGlzLnF1ZXJpZXMgPSBbXTtcclxuICAgIH1cclxuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5jb21taXRNdXRhdGlvbnMgPSBmdW5jdGlvbiAobXV0YXRpb25zLCB2ZXJzaW9uKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgUHJvbWlzZS5hbGwodGhpcy5xdWVyaWVzLm1hcChmdW5jdGlvbiAocSkgeyByZXR1cm4gcS5jb21taXRNdXRhdGlvbnMobXV0YXRpb25zLCB2ZXJzaW9uKTsgfSkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhbnVwSW52YWxpZFF1ZXJpZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBRdWVyeVNldC5wcm90b3R5cGUuY2xlYW51cEludmFsaWRRdWVyaWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucXVlcmllcyA9IHRoaXMucXVlcmllcy5maWx0ZXIoZnVuY3Rpb24gKHEpIHtcclxuICAgICAgICAgICAgaWYgKHEuaW52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHEudGltZW91dEhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChxLnRpbWVvdXRIYW5kbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHEudGltZW91dEhhbmRsZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUXVlcnlTZXQucHJvdG90eXBlLm5vdGlmeVN1YnNjcmliZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvcHRpbWlzdGljTXV0YXRpb25zID0gdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpO1xyXG4gICAgICAgIHRoaXMucXVlcmllcy5mb3JFYWNoKGZ1bmN0aW9uIChxKSB7XHJcbiAgICAgICAgICAgIHEubm90aWZ5U3Vic2NyaWJlcnMob3B0aW1pc3RpY011dGF0aW9ucyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgUXVlcnlTZXQucHJvdG90eXBlLmZpbmRRdWVyeSA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5xdWVyaWVzLmZpbmQoZnVuY3Rpb24gKHEpIHsgcmV0dXJuIHEucXVlcnlLZXkgPT09IEtlZEJhY2tlbmRRdWVyeS5xdWVyeUtleSh0YWJsZSwgcXVlcnkpOyB9KTtcclxuICAgIH07XHJcbiAgICBRdWVyeVNldC5wcm90b3R5cGUucXVlcnlMb2NhbGx5ID0gZnVuY3Rpb24gKHRhYmxlLCBxdWVyeSwgaW5jbHVkZXMpIHtcclxuICAgICAgICAvLyBGb3Igbm93LCBvbmx5IGhhbmRsZSB0aGlzIHZlcnkgY29tbW9uIGFuZCBzcGVjaWFsIGNhc2UgKHdoaWNoXHJcbiAgICAgICAgLy8gd2lsbCBzYXZlIGEgbG90IG9mIHVubmVzY2Vzc2FyeSBuZXR3b3JrIHRyYWZmaWMgaWYgSSBhbSB0aGlua2luZyByaWdodC4uLilcclxuICAgICAgICB2YXIgbXV0YXRpb25zID0gdGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpO1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBxdWVyeSB3YW50cyB0byBnZXQgYSBzaW5nbGUgZW50aXR5IGJ5IGl0cyBJRDpcclxuICAgICAgICBpZiAocXVlcnkuaWRzICYmIHF1ZXJ5Lmlkcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgLy8gQW5kIGlmIHNvLCBpZiB3ZSBoYXZlIGFuIG91dGdvaW5nIG11dGF0aW9uIHRvIGNyZWF0ZSB0aGF0IGVudGl0eTpcclxuICAgICAgICAgICAgaWYgKG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm9wID09PSAnYWRkLXJlbGF0ZWQnICYmIG0ucmVsYXRlZERvYy5pZCA9PT0gcXVlcnkuaWRzWzBdOyB9KSkge1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlbiByZXR1cm4gYW4gRU1QVFkgcmVzcG9uc2UsIHNpZ25hbGxpbmcgdGhhdCB3ZSBjYW4gcmVzb2x2ZSB0aGlzIGxvY2FsbHksXHJcbiAgICAgICAgICAgICAgICAvLyBidXQgbGV0IHRoZSBvcHRpc3RpYyBmZWF0dXJlIG9mIEtlZEJhY2tlbmRRdWVyeSBhcHBseSB0aGUgbXV0YXRpb24gYmVmb3JlXHJcbiAgICAgICAgICAgICAgICAvLyBub3RpZnlpbmcgc3Vic2NyaWJlcnMgKHdlIGRvbid0IHdhbnQgaXQgdG8gYmUgcGVyc2lzdGVudCBiZWZvcmUgdGhlIHNlcnZlclxyXG4gICAgICAgICAgICAgICAgLy8gaGFzIGFjY2VwdGVkIHRoZSBtdXRhdGlvbilcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBPSywgYW5vdGhlciBxdWl0ZSBjb21tb24gY2FzZSBpcyB3aGVuIHdlIGFzayBmb3IgYSBjZXJ0YWluIElEIGFuZCB0aGF0IElEIHJlcGxpZXNcclxuICAgICAgICAvLyB3aXRoaW4gYW5vdGhlciBxdWVyeVxyXG4gICAgICAgIGlmIChxdWVyeS5oYXNFZGdlc0Zyb20gfHwgcXVlcnkuaGFzRWRnZXNUbylcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIE5vdCBwb3NzaWJsZSB0byBoYW5kbGVcclxuICAgICAgICBpZiAoIXF1ZXJ5LmlkcylcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIEZvciBub3csIGp1c3QgdGFrZSBoaWdodCBmb3IgdGhpcyBwYXJ0aWN1bGFyIGFuZCBtb3N0IGNvbW1vbiBjYXNlIVxyXG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKHEpIHtcclxuICAgICAgICAgICAgaWYgKCFxLmdvdEluaXRpYWxSZXNwb25zZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgIGlmIChxLnF1ZXJ5LmJyYW5jaElkICE9PSBxdWVyeS5icmFuY2hJZClcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgIGlmIChxLnF1ZXJ5LmZsYWdzKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjsgLy8gSXQgd291bGQgYmUgY29tcGxleCB0byBzdXBwb3J0IHZhcmlvdXMgZmxhZ3MuIFF1ZXJ5J3MgZGF0YSBtYXkgaW5jbHVkZSBpZHMgb25seS4gQ2FuJ3QgcmVseSBvbiB0aGUgcXVlcnkuXHJcbiAgICAgICAgICAgIHZhciBxSW5jbHVkZXMgPSBxLmluY2x1ZGVzO1xyXG4gICAgICAgICAgICBpZiAocUluY2x1ZGVzLmxlbmd0aCA+IDAgJiYgKCFxdWVyeS5pbmNsdWRlIHx8IHF1ZXJ5LmluY2x1ZGUubGVuZ3RoID09PSAwKSkge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgaW5jbHVkZSwgYnV0IHRoaXMgcXVlcnkgZG9lcy4gQ2hlY2sgaWYgd2UgY2FuIGZpbmQgb3VyIHJlc3VsdCB3aXRoaW4gaXQuXHJcbiAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBxSW5jbHVkZXMuZmluZChmdW5jdGlvbiAobCkgeyByZXR1cm4gSnNvblNjaGVtYS50YWJsZXNbcS50YWJsZV1bXCJyZWxhdGlvbnNoaXBzXCJdW2xdID09PSB0YWJsZTsgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzXzEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gcS5kYXRhOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW50aXR5ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViRGF0YSA9IHF1ZXJ5QXJyYXkocXVlcnksIGVudGl0eVtsYWJlbF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJEYXRhLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHJlc18xW3IuaWRdID0gcjsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRfMSA9IE9iamVjdC5rZXlzKHJlc18xKS5tYXAoZnVuY3Rpb24gKGlkKSB7IHJldHVybiByZXNfMVtpZF07IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9ubHkgcmV0dXJuIHJlc3VsdCBpZiB3ZSBjb3VsZCBsb29rIHVwIGV2ZXJ5IHJlcXVlc3RlZCBJRDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXF1ZXJ5Lmlkcy5ldmVyeShmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIHJlc3VsdF8xLnNvbWUoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguaWQgPT09IGlkOyB9KTsgfSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHJlc3VsdF8xIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFpbmNsdWRlcy5ldmVyeShmdW5jdGlvbiAobGFiZWwpIHsgcmV0dXJuIHFJbmNsdWRlcy5pbmNsdWRlcyhsYWJlbCk7IH0pKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcclxuICAgICAgICAgICAgLy8gTGFzdGx5LCBpZiB0aGUgcXVlcnkgaW5jbHVkZXMgYWxsIGdyYXBocyB0aGF0IHdlIGRvLCBwaWNrIHRoZSBzdWJzZXQgZnJvbSB0aGF0IHF1ZXJ5LlxyXG4gICAgICAgICAgICAvLyBDb25jcmV0ZSBleGFtcGxlOiBXZSBvYnNlcnZlIGEgY2VydGFpbiBUYXNrIGJ5IElEIGFuZCB3YW50IGl0cyBrbm93bGVkZ2VSZXF1aXJlbWVudHMgYWxvbmcgd2l0aCBpdCxcclxuICAgICAgICAgICAgLy8gYW5kIHRoZXJlJ3MgYW5vdGhlciBxdWVyeSBvZiBhbGwgdGFza3MgdGhhdCBhbHNvIGluY2x1ZGVzIGtub3dsZWRnZVJlcXVpcmVtZW50cy4gVXNlIGl0LiBcclxuICAgICAgICAgICAgaWYgKHEudGFibGUgPT09IHRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0XzIgPSBxdWVyeUFycmF5KHF1ZXJ5LCBxLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgLy8gT25seSByZXR1cm4gcmVzdWx0IGlmIHdlIGNvdWxkIGxvb2sgdXAgZXZlcnkgcmVxdWVzdGVkIElEOlxyXG4gICAgICAgICAgICAgICAgaWYgKCFxdWVyeS5pZHMuZXZlcnkoZnVuY3Rpb24gKGlkKSB7IHJldHVybiByZXN1bHRfMi5zb21lKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmlkID09PSBpZDsgfSk7IH0pKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogcmVzdWx0XzIgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMucXVlcmllczsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHEgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZV8xID0gX2xvb3BfMShxKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZV8xID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlXzEudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIFF1ZXJ5U2V0LnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdmFyIF9hID0gc3Vic2NyaXB0aW9uLmNvbGxlY3Rpb24sIHRhYmxlID0gX2EudGFibGUsIHF1ZXJ5ID0gX2EucXVlcnksIHJlcG8gPSBfYS5yZXBvO1xyXG4gICAgICAgIHZhciBrYlF1ZXJ5ID0gdGhpcy5maW5kUXVlcnkodGFibGUsIHF1ZXJ5KTtcclxuICAgICAgICBpZiAoIWtiUXVlcnkpIHtcclxuICAgICAgICAgICAga2JRdWVyeSA9IG5ldyBLZWRCYWNrZW5kUXVlcnkodGFibGUsIHF1ZXJ5LCByZXBvLmdldFVzZXIoKSwgcmVwbywgdGhpcy5tdXRhdGlvblF1ZXVlKTtcclxuICAgICAgICAgICAgdGhpcy5xdWVyaWVzLnB1c2goa2JRdWVyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoa2JRdWVyeS50aW1lb3V0SGFuZGxlKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoa2JRdWVyeS50aW1lb3V0SGFuZGxlKTtcclxuICAgICAgICAgICAgICAgIGtiUXVlcnkudGltZW91dEhhbmRsZSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAga2JRdWVyeS5zdWJzY3JpYmUoc3Vic2NyaXB0aW9uKTtcclxuICAgIH07XHJcbiAgICBRdWVyeVNldC5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB2YXIgX2EgPSBzdWJzY3JpcHRpb24uY29sbGVjdGlvbiwgdGFibGUgPSBfYS50YWJsZSwgcXVlcnkgPSBfYS5xdWVyeSwgcmVwbyA9IF9hLnJlcG87XHJcbiAgICAgICAgdmFyIGtiUXVlcnkgPSB0aGlzLmZpbmRRdWVyeSh0YWJsZSwgcXVlcnkpO1xyXG4gICAgICAgIGlmIChrYlF1ZXJ5KSB7XHJcbiAgICAgICAgICAgIC8vIFByb2hpYml0IGZ1cnRoZXIgbm90aWZpY2F0aW9ucyB0byB0aGlzIHN1YnNjcmlwdGlvbjpcclxuICAgICAgICAgICAga2JRdWVyeS51bnN1YnNjcmliZShzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAvLyBSZWxlYXNlIHVubmVzY2Vzc2FyeSBtZW1vcnkgd2hlbiB0aGVyZSBhcmUgbm8gbW9yZSBzdWJzY3JpcHRpb25zIG9mIHRoaXMgcXVlcnksIGJ5IHJlbW92aW5nIHRoZSBxdWVyeSBpdHNlbGZcclxuICAgICAgICAgICAgLy8gVG8gdGhhdCBpbiBhIGRlbGF5ZWQgbWFubmVyLCBzbyB0aGF0IGFuIHVuc3Vic2NyaWJlKCkgZm9sbG93ZWQgYnkgYW4gaW1tZWRpYXRlIHN1YnNjcmliZSgpIGRvbid0IGhhdmUgdG8gcmUtcXVlcnkgdGhlIHNlcnZlcjpcclxuICAgICAgICAgICAgaWYgKGtiUXVlcnkuc3Vic2NyaXB0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIFNjaGVkdWxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24gaW4gNSBtaW51dGVzOlxyXG4gICAgICAgICAgICAgICAga2JRdWVyeS50aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYga2JRdWVyeSBzdGlsbCBoYXMgbm8gc3Vic2NyaXB0aW9ucyAobm90IGNlcnRhaW4hIEEgbmV3IHN1YnNjcmliZXIgbWF5IGhhdmUgY29tZSBhbG9uZy4uLilcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2JRdWVyeS5zdWJzY3JpcHRpb25zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdGlsbCBubyBzdWJzY3JpcHRpb25zIG9uIGl0LCB0aW1lIHRvIHJlbGVhc2Ugc29tZSBtZW1vcnkgYW5kIGZvcmdldCB0aGUgaW4tbWVtb3J5IGNhY2hlIG9mIHRoZSBxdWVyeSByZXN1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucXVlcmllcyA9IF90aGlzLnF1ZXJpZXMuZmlsdGVyKGZ1bmN0aW9uIChxKSB7IHJldHVybiBxICE9PSBrYlF1ZXJ5OyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzLnF1ZXJpZXMubGVuZ3RoID4gNTAgP1xyXG4gICAgICAgICAgICAgICAgICAgIDUwMCA6IC8vIERvbid0IGhvc3QgdG9vIG1hbnkgcXVlcmllcy4gR2FyYmFnZSBjb2xsZWN0IHRoaXMgd2l0aGluIDUwMCBtc1xyXG4gICAgICAgICAgICAgICAgICAgIDUgKiA2MDAwMCk7IC8vIEFsbG93IHF1ZXJ5IGluIG1lbW9yeSBmb3IgYW5vdGhlciA1IG1pbnV0ZXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gUXVlcnlTZXQ7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFF1ZXJ5U2V0IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5LXNldC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBnZXRUYWJsZUZyb21MYWJlbCwgYnJhbmNoU2Vuc2l0aXZlLCBnbG9iYWxPcCB9IGZyb20gJy4vdXRpbHMnO1xyXG5pbXBvcnQgeyBtZXJnZURlbHRhcyB9IGZyb20gJy4vZGVsdGEtbWVyZ2UnO1xyXG52YXIgTXV0YXRpb25RdWV1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE11dGF0aW9uUXVldWUoKSB7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2F2aW5nUXVldWUgPSBbXTtcclxuICAgIH1cclxuICAgIE11dGF0aW9uUXVldWUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIChtdXRhdGlvbnMpIHtcclxuICAgICAgICB0aGlzLnF1ZXVlID0gTXV0YXRpb25RdWV1ZS5tZXJnZSh0aGlzLnF1ZXVlLCBtdXRhdGlvbnMpO1xyXG4gICAgfTtcclxuICAgIE11dGF0aW9uUXVldWUucHJvdG90eXBlLm1vdmVUb1NhdmluZ1F1ZXVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc2F2aW5nUXVldWUgPSBNdXRhdGlvblF1ZXVlLm1lcmdlKHRoaXMuc2F2aW5nUXVldWUsIHRoaXMucXVldWUpO1xyXG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcclxuICAgIH07XHJcbiAgICBNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5jbGVhclNhdmluZ1F1ZXVlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc2F2aW5nUXVldWUgPSBbXTtcclxuICAgIH07XHJcbiAgICBNdXRhdGlvblF1ZXVlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2F2aW5nUXVldWUuY29uY2F0KHRoaXMucXVldWUpO1xyXG4gICAgfTtcclxuICAgIE11dGF0aW9uUXVldWUucHJvdG90eXBlLmFmZmVjdHNRdWVyeSA9IGZ1bmN0aW9uICh0YWJsZSwgcXVlcnksIGluY2x1ZGVzKSB7XHJcbiAgICAgICAgdmFyIG11dGF0aW9ucyA9IHRoaXMuZ2V0KCk7XHJcbiAgICAgICAgaWYgKG11dGF0aW9ucy5zb21lKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm9wID09PSAnbWVyZ2UnIHx8IG0ub3AgPT09ICdjbGVhci1icmFuY2gnOyB9KSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKHF1ZXJ5Lmlkcykge1xyXG4gICAgICAgICAgICAvLyBBIHF1ZXJ5IHdpdGggXCJpZHNcIiBmaWx0ZXIgd2lsbCBiZSBlYXN5IHRvIGRldGVjdCBhIG5vLW1hdGNoIG9uOlxyXG4gICAgICAgICAgICByZXR1cm4gbXV0YXRpb25zLnNvbWUoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIGdsb2JhbE9wKG0pIHx8ICghYnJhbmNoU2Vuc2l0aXZlKG0pIHx8IG0uYnJhbmNoSWQgPT09IHF1ZXJ5LmJyYW5jaElkKSAmJlxyXG4gICAgICAgICAgICAgICAgcXVlcnkuaWRzLmluY2x1ZGVzKG0uaWQpOyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBtdXRhdGlvbnMgYWZmZWN0IHNhbWUgYnJhbmNoIGFuZCB0YWJsZS4gQ291bGQgYmUgZG9uZSBtb3JlIGZpbmUgZ3JhaW5lZCxcclxuICAgICAgICAvLyBidXQgdGhhdCB3b3VsZCBvbmx5IGJlIGEgc3Vib3B0aW1pemF0aW9uLlxyXG4gICAgICAgIHJldHVybiBtdXRhdGlvbnMuc29tZShmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbS5vcCA9PT0gJ2RlbGV0ZScgP1xyXG4gICAgICAgICAgICAgICAgbS50YWJsZSA9PT0gdGFibGUgfHwgKGluY2x1ZGVzLnNvbWUoZnVuY3Rpb24gKGxhYmVsKSB7IHJldHVybiBnZXRUYWJsZUZyb21MYWJlbCh0YWJsZSwgbGFiZWwpID09PSBtLnRhYmxlOyB9KSkgOlxyXG4gICAgICAgICAgICAgICAgZ2xvYmFsT3AobSkgPyB0cnVlIDpcclxuICAgICAgICAgICAgICAgICAgICBtLmJyYW5jaElkID09IHF1ZXJ5LmJyYW5jaElkICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChtLnRhYmxlID09PSB0YWJsZSB8fCAobS5vcCAhPT0gJ3VwZGF0ZScgJiYgKFt0YWJsZV0uY29uY2F0KGluY2x1ZGVzLm1hcChmdW5jdGlvbiAobGFiZWwpIHsgcmV0dXJuIGdldFRhYmxlRnJvbUxhYmVsKHRhYmxlLCBsYWJlbCk7IH0pKS5zb21lKGZ1bmN0aW9uICh0YWJsZSkgeyByZXR1cm4gZ2V0VGFibGVGcm9tTGFiZWwobS50YWJsZSwgbS5ncmFwaFByb3ApID09PSB0YWJsZTsgfSkpKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgTXV0YXRpb25RdWV1ZS5tZXJnZSA9IGZ1bmN0aW9uIChxdWV1ZTEsIHF1ZXVlMikge1xyXG4gICAgICAgIHZhciBtdXRhYmxlUXVldWUxID0gcXVldWUxLnNsaWNlKCk7XHJcbiAgICAgICAgdmFyIG11dGFibGVRdWV1ZTIgPSBxdWV1ZTIuc2xpY2UoKTtcclxuICAgICAgICAvL2lmIChtdXRhYmxlUXVldWUxLmxlbmd0aCA+IDApIGRlYnVnZ2VyO1xyXG4gICAgICAgIHZhciBsZW4gPSBxdWV1ZTEubGVuZ3RoO1xyXG4gICAgICAgIHZhciBfbG9vcF8xID0gZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgdmFyIG0gPSBxdWV1ZTFbaV07XHJcbiAgICAgICAgICAgIGlmIChtLm9wID09PSAndXBkYXRlJykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG92ZXJsYXBwaW5nSWRPcElkeCA9IG11dGFibGVRdWV1ZTIuZmluZEluZGV4KGZ1bmN0aW9uIChuZXdNdXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3TXV0Lm9wID09PSAndXBkYXRlJyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdNdXQuYnJhbmNoSWQgPT09IG0uYnJhbmNoSWQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TXV0LmlkID09PSBtLmlkO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3ZlcmxhcHBpbmdJZE9wSWR4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBtdXRhYmxlUXVldWUxW2ldID0gdHNsaWJfMS5fX2Fzc2lnbih7fSwgbSwgeyBkZWx0YURvYzogbWVyZ2VEZWx0YXMobS5kZWx0YURvYywgbXV0YWJsZVF1ZXVlMltvdmVybGFwcGluZ0lkT3BJZHhdLmRlbHRhRG9jKSB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtdXRhYmxlUXVldWUyLnNwbGljZShvdmVybGFwcGluZ0lkT3BJZHgsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgICAgICAgIF9sb29wXzEoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBtdXRhYmxlUXVldWUxLmNvbmNhdChtdXRhYmxlUXVldWUyKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gTXV0YXRpb25RdWV1ZTtcclxufSgpKTtcclxuZXhwb3J0IHsgTXV0YXRpb25RdWV1ZSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tdXRhdGlvbi1xdWV1ZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBNdXRhdGlvblF1ZXVlIH0gZnJvbSAnLi9tdXRhdGlvbi1xdWV1ZSc7XHJcbmltcG9ydCB7IEJhdGNoUnVubmVyIH0gZnJvbSAnLi4va2VkLWJhY2tlbmQtY2xpZW50JztcclxuaW1wb3J0IHsgdGFibGVzIH0gZnJvbSAna2VkYmFja2VuZC1zY2hlbWEvc2NoZW1hLmpzb24nO1xyXG5pbXBvcnQgeyBDYWNoZUJ1c3QgfSBmcm9tICcuL2NhY2hlLWJ1c3QnO1xyXG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZSc7XHJcbnZhciBLZWRCYWNrZW5kV3JpdGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZFdyaXRlcihtdXRhdGlvblF1ZXVlLCBxdWVyeVNldCwgZ2V0Q2xpZW50LCBnZXRVc2VyKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblF1ZXVlID0gbXV0YXRpb25RdWV1ZTtcclxuICAgICAgICB0aGlzLnF1ZXJ5U2V0ID0gcXVlcnlTZXQ7XHJcbiAgICAgICAgdGhpcy5nZXRDbGllbnQgPSBnZXRDbGllbnQ7XHJcbiAgICAgICAgdGhpcy5nZXRVc2VyID0gZ2V0VXNlcjtcclxuICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2lzU2F2aW5nUHJvbWlzZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VmVyc2lvbiA9IDA7XHJcbiAgICAgICAgdGhpcy5wZXJzaXN0ZWRWZXJzaW9uID0gbmV3IEVtaXR0ZXIoMCk7XHJcbiAgICAgICAgdGhpcy5lcnJvclN1YnNjcmliZXJzID0gW107XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN1YnNjcmliZXJzID0gW107XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUsIFwiaXNTYXZpbmdcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gISF0aGlzLl9pc1NhdmluZ1Byb21pc2U7IH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLCBcImlzRWRpdGVkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubXV0YXRpb25RdWV1ZS5nZXQoKS5sZW5ndGggPiAwOyB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmVycm9yU3Vic2NyaWJlcnMucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUub25TdGF0ZUNoYW5nZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuc3RhdGVTdWJzY3JpYmVycy5wdXNoKGNhbGxiYWNrKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kV3JpdGVyLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmVycm9yU3Vic2NyaWJlcnMgPSB0aGlzLmVycm9yU3Vic2NyaWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzICE9PSBjYWxsYmFjazsgfSk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZVN1YnNjcmliZXJzID0gdGhpcy5zdGF0ZVN1YnNjcmliZXJzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcyAhPT0gY2FsbGJhY2s7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLmRpc3BhdGNoRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IsIHJldHJ5YWJsZSkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lcnJvclN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgcmV0cnlhYmxlLCBfdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKF8pIHsgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLmRpc3BhdGNoU3RhdGVDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLnN0YXRlU3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKF90aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoXykgeyB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUubXV0YXRlID0gZnVuY3Rpb24gKG11dGF0aW9ucywgZGVib3VuY2UpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUuYWRkKG11dGF0aW9ucyk7XHJcbiAgICAgICAgKyt0aGlzLmN1cnJlbnRWZXJzaW9uO1xyXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgIHRoaXMucXVlcnlTZXQubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICAgICAgICBpZiAoIXRoaXMuX2lzU2F2aW5nUHJvbWlzZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdGltZW91dElkKVxyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXRJZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IHNldFRpbWVvdXQodGhpcy5zYXZlLmJpbmQodGhpcyksIGRlYm91bmNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgaXNTYXZpbmcsIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcsIGJlY2FzZSBpdCB3aWxsIHJlLWNoZWNrIGlmIGFkZGl0aW9uYWxcclxuICAgICAgICAvLyBtdXRhdGlvbnMgaGF2ZSBjb21lLCB3aGVuIHNhdmluZyBpcyBkb25lLlxyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLnJldHJ5U2F2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zYXZlKCk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUud2FpdEZvclZlcnNpb25Ub1BlcnNpc3QgPSBmdW5jdGlvbiAodmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcGVyc2lzdGVkVmVyc2lvbjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnBlcnNpc3RlZFZlcnNpb24ubG9hZCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcnNpc3RlZFZlcnNpb24gPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHBlcnNpc3RlZFZlcnNpb24gPCB2ZXJzaW9uKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZSgpOyAvLyBCZSBtb3JlIGVhZ2VyIHRvIHNhdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5wZXJzaXN0ZWRWZXJzaW9uLmZpbHRlcihmdW5jdGlvbiAocGVyc2lzdGVkVmVyc2lvbikgeyByZXR1cm4gcGVyc2lzdGVkVmVyc2lvbiA+PSB2ZXJzaW9uOyB9KS5sb2FkKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDM7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzIgLypyZXR1cm4qL107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRXcml0ZXIucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5fdGltZW91dElkKVxyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dElkKTtcclxuICAgICAgICBpZiAodGhpcy5faXNTYXZpbmdQcm9taXNlKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNTYXZpbmdQcm9taXNlO1xyXG4gICAgICAgIGlmICghdGhpcy5pc0VkaXRlZClcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHRoaXMuX3RpbWVvdXRJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5faXNTYXZpbmdQcm9taXNlID0gdGhpcy5fc2F2ZSgpO1xyXG4gICAgICAgIHRoaXMuX2lzU2F2aW5nUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7IH0pLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2lzU2F2aW5nUHJvbWlzZSA9IG51bGw7IH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc1NhdmluZ1Byb21pc2U7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUuX3NhdmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBtdXRhdGlvbnMsIHZlcnNpb24sIG11dGF0aW9uUmVxdWVzdHMsIHJlc18xLCBldGFnTXV0YXRpb25zLCBlcnJvcl8xO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbnMgPSB0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gPSB0aGlzLmN1cnJlbnRWZXJzaW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUubW92ZVRvU2F2aW5nUXVldWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXV0YXRpb25SZXF1ZXN0cyA9IHRoaXMubWFwTXV0YXRpb25zKG11dGF0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRyeXMucHVzaChbMSwgNiwgMTEsIDEyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZ2V0Q2xpZW50KCkuYmF0Y2gobXV0YXRpb25SZXF1ZXN0cyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzXzEgPSBfYS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV0YWdNdXRhdGlvbnMgPSBPYmplY3Qua2V5cyhyZXNfMS5uZXdFdGFncykubWFwKGZ1bmN0aW9uIChpZCkgeyByZXR1cm4gKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wOiAndXBkYXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsdGFEb2M6IHsgJGV0YWc6IHJlc18xLm5ld0V0YWdzW2lkXSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSBjYWNoZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDYWNoZUJ1c3QuaW52YWxpZGF0ZUNhY2hlKG11dGF0aW9uUmVxdWVzdHMsIHRoaXMuZ2V0VXNlcigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tbW1pdCBtdXRhdGlvbnMgYWxvbmcgd2l0aCBldGFnTXV0YXRpb25zIGludG8gcXVlcmllcyBjYWNoZWQgZGF0YVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcnNpc3RlZFZlcnNpb24uZGlzcGF0Y2godmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucXVlcnlTZXQuY29tbWl0TXV0YXRpb25zKE11dGF0aW9uUXVldWUubWVyZ2UobXV0YXRpb25zLCBldGFnTXV0YXRpb25zKSwgdmVyc2lvbildO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbiBzdWNjZXNzLCBjbGVhciBzYXZpbmcgcXVldWUgYXMgdGhlIG11dGF0aW9ucyB3aWxsIG5vdyBiZSBjb21taXR0ZWQgdG8gYWxsIHF1ZXJ5J3MgZGF0YSBpbnN0ZWFkLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUuY2xlYXJTYXZpbmdRdWV1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoU3RhdGVDaGFuZ2UoKTsgLy8gaXNFZGl0ZWQgbWF5IGhhdmUgdHVybmVkIHRvIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpbmFsbHksIG5vdGlmeSBzdWJzY3JpYmVycyBzbyB0aGF0IHZpZXdzIGdldCB1cGRhdGVkIHdpdGggY29tbWl0dGVkIHJlc3VsdHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWVyeVNldC5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLm11dGF0aW9uUXVldWUuZ2V0KCkubGVuZ3RoID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGRpdGlvbmFsIG11dGF0aW9ucyBoYXBwZW5kIHdoaWxlIHdlIHdlcmUgc2F2aW5nLiBIYW5kbGUgdGhlbSBhcyB3ZWxsLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLl9zYXZlKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWRkaXRpb25hbCBtdXRhdGlvbnMgaGFwcGVuZCB3aGlsZSB3ZSB3ZXJlIHNhdmluZy4gSGFuZGxlIHRoZW0gYXMgd2VsbC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzMgLypicmVhayovLCAxMl07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl8xID0gX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlcnNpc3RlZFZlcnNpb24uZGlzcGF0Y2hFcnJvcihlcnJvcl8xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEoZXJyb3JfMSAmJiBlcnJvcl8xLm5hbWUgJiYgZXJyb3JfMS5uYW1lLnN0YXJ0c1dpdGgoXCJodHRwNFwiKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBY2Nlc3MgQ29udHJvbCBkZW5pZWQsIGJhZCByZXF1ZXN0IG9yIHNpbWlsYXIuIFRocm93IG11dGF0aW9ucyBhd2F5LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXJyb3IoZXJyb3JfMSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUuY2xlYXJTYXZpbmdRdWV1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoU3RhdGVDaGFuZ2UoKTsgLy8gaXNFZGl0ZWQgbWF5IGhhdmUgdHVybmVkIHRvIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVlcnlTZXQubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5tdXRhdGlvblF1ZXVlLmdldCgpLmxlbmd0aCA+IDApKSByZXR1cm4gWzMgLypicmVhayovLCA4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSG8gaG8hIEFkZGl0aW9uYWwgbXV0YXRpb25zIGhhcHBlbmQgd2hpbGUgd2Ugd2VyZSBzYXZpbmcuIEhhbmRsZSB0aGVtIGFsb25lLiBUSGV5IG1pZ2h0IGJlIG1vcmUgbHVja3kuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuX3NhdmUoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA3OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIbyBobyEgQWRkaXRpb25hbCBtdXRhdGlvbnMgaGFwcGVuZCB3aGlsZSB3ZSB3ZXJlIHNhdmluZy4gSGFuZGxlIHRoZW0gYWxvbmUuIFRIZXkgbWlnaHQgYmUgbW9yZSBsdWNreS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2Euc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDg7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMgLypicmVhayovLCAxMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA5OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXJyb3IoZXJyb3JfMSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFszIC8qYnJlYWsqLywgMTJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hTdGF0ZUNoYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzcgLyplbmRmaW5hbGx5Ki9dO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTI6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFdyaXRlci5wcm90b3R5cGUubWFwTXV0YXRpb25zID0gZnVuY3Rpb24gKG11dGF0aW9ucykge1xyXG4gICAgICAgIHZhciBiciA9IG5ldyBCYXRjaFJ1bm5lcigpO1xyXG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAobS5vcCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndXBkYXRlJzpcclxuICAgICAgICAgICAgICAgICAgICBici51cGRhdGUobS50YWJsZSwgbS5pZCwgbS5kZWx0YURvYywgbS5icmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdhZGQtcmVsYXRlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtLnJlbGF0ZWREb2MuJGV0YWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm8gJGV0YWcgbWVhbnMgdGhpcyBpcyBhIG5ldyBkb2N1bWVudC4gQWRkIGl0IGJlZm9yZSBsaW5raW5nIHRvIGl0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBici5hZGQodGFibGVzW20udGFibGVdLnJlbGF0aW9uc2hpcHNbbS5ncmFwaFByb3BdLCBtLnJlbGF0ZWREb2MsIG0uYnJhbmNoSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBici5saW5rMihtLnRhYmxlLCBtLmlkLCBtLmdyYXBoUHJvcCwgbS5yZWxhdGVkRG9jLmlkLCBtLmJyYW5jaElkKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JlbW92ZS1yZWxhdGVkJzpcclxuICAgICAgICAgICAgICAgICAgICBici51bmxpbmsyKG0udGFibGUsIG0uaWQsIG0uZ3JhcGhQcm9wLCBtLnJlbGF0ZWRJZCwgbS5icmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkZWxldGUnOlxyXG4gICAgICAgICAgICAgICAgICAgIGJyLmRlbGV0ZShtLnRhYmxlLCBtLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NsZWFyLWJyYW5jaCc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnIuY2xlYXJCcmFuY2gobS5icmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdtZXJnZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnIubWVyZ2UobS5icmFuY2hJZCwgbS50YXJnZXRCcmFuY2hJZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gYnIubXV0YXRpb25SZXF1ZXN0cztcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2VkQmFja2VuZFdyaXRlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZFdyaXRlciB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZWRiYWNrZW5kLXdyaXRlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyB0YWJsZXMgfSBmcm9tICdrZWRiYWNrZW5kLXNjaGVtYS9zY2hlbWEuanNvbic7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRDb2xsZWN0aW9uIH0gZnJvbSAnLi9rZWRiYWNrZW5kLWNvbGxlY3Rpb24nO1xyXG5pbXBvcnQgeyBRdWVyeVNldCB9IGZyb20gJy4vcXVlcnktc2V0JztcclxuaW1wb3J0IHsgTXV0YXRpb25RdWV1ZSB9IGZyb20gJy4vbXV0YXRpb24tcXVldWUnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kV3JpdGVyIH0gZnJvbSAnLi9rZWRiYWNrZW5kLXdyaXRlcic7XHJcbnZhciBLZWRCYWNrZW5kUmVwbyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRSZXBvKGdldENsaWVudCwgZ2V0VXNlciwgZGVmYXVsdFF1ZXJ5T3B0aW9ucywgbXV0YXRpb25RdWV1ZSwgcXVlcnlTZXQsIHdyaXRlciwgY2FjaGVPcHRpbWl6ZWQpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZ2V0Q2xpZW50ID0gZ2V0Q2xpZW50O1xyXG4gICAgICAgIHRoaXMuZ2V0VXNlciA9IGdldFVzZXI7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zID0gZGVmYXVsdFF1ZXJ5T3B0aW9ucztcclxuICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBtdXRhdGlvblF1ZXVlO1xyXG4gICAgICAgIHRoaXMucXVlcnlTZXQgPSBxdWVyeVNldDtcclxuICAgICAgICB0aGlzLndyaXRlciA9IHdyaXRlcjtcclxuICAgICAgICB0aGlzLmNhY2hlT3B0aW1pemVkID0gY2FjaGVPcHRpbWl6ZWQ7XHJcbiAgICAgICAgaWYgKCFtdXRhdGlvblF1ZXVlKVxyXG4gICAgICAgICAgICB0aGlzLm11dGF0aW9uUXVldWUgPSBuZXcgTXV0YXRpb25RdWV1ZSgpO1xyXG4gICAgICAgIGlmICghcXVlcnlTZXQpXHJcbiAgICAgICAgICAgIHRoaXMucXVlcnlTZXQgPSBuZXcgUXVlcnlTZXQodGhpcy5tdXRhdGlvblF1ZXVlKTtcclxuICAgICAgICBpZiAoIXdyaXRlcilcclxuICAgICAgICAgICAgdGhpcy53cml0ZXIgPSBuZXcgS2VkQmFja2VuZFdyaXRlcih0aGlzLm11dGF0aW9uUXVldWUsIHRoaXMucXVlcnlTZXQsIGdldENsaWVudCwgZ2V0VXNlcik7XHJcbiAgICAgICAgT2JqZWN0LmtleXModGFibGVzKS5mb3JFYWNoKGZ1bmN0aW9uICh0YWJsZSkge1xyXG4gICAgICAgICAgICB2YXIgY29sbGVjdGlvbiA9IG5ldyBLZWRCYWNrZW5kQ29sbGVjdGlvbihfdGhpcywgdGFibGUsIGRlZmF1bHRRdWVyeU9wdGlvbnMgfHwge30pO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVPcHRpbWl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb24gPSBjb2xsZWN0aW9uLmNhY2hlT3B0aW1pemVkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgX3RoaXNbdGFibGVdID0gY29sbGVjdGlvbjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5fY2xvbmUgPSBmdW5jdGlvbiAocXVlcnlPcHRpb25zLCBjYWNoZU9wdGltaXplZCkge1xyXG4gICAgICAgIHZhciBjbG9uZSA9IG5ldyBLZWRCYWNrZW5kUmVwbyh0aGlzLmdldENsaWVudCwgdGhpcy5nZXRVc2VyLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMsIHF1ZXJ5T3B0aW9ucyksIHRoaXMubXV0YXRpb25RdWV1ZSwgdGhpcy5xdWVyeVNldCwgdGhpcy53cml0ZXIsIGNhY2hlT3B0aW1pemVkID09PSB1bmRlZmluZWQgPyB0aGlzLmNhY2hlT3B0aW1pemVkIDogY2FjaGVPcHRpbWl6ZWQpO1xyXG4gICAgICAgIHJldHVybiBjbG9uZTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUuYnJhbmNoID0gZnVuY3Rpb24gKGJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Nsb25lKHsgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5yb2xlID0gZnVuY3Rpb24gKHJvbGUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2xvbmUoeyByb2xlOiByb2xlIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRSZXBvLnByb3RvdHlwZS5vcHRpbWl6ZUNhY2hlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9uZSh7fSwgdHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLmNsZWFyQnJhbmNoID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zLmJyYW5jaElkKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY2xlYXIgbWFzdGVyIGJyYW5jaFwiKTtcclxuICAgICAgICB0aGlzLndyaXRlci5tdXRhdGUoW3sgb3A6ICdjbGVhci1icmFuY2gnLCBicmFuY2hJZDogdGhpcy5kZWZhdWx0UXVlcnlPcHRpb25zLmJyYW5jaElkIH1dLCAwKTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kUmVwby5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAodGFyZ2V0QnJhbmNoSWQpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGVmYXVsdFF1ZXJ5T3B0aW9ucy5icmFuY2hJZClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG1lcmdlIGZyb20gbWFzdGVyIGJyYW5jaFwiKTtcclxuICAgICAgICB0aGlzLndyaXRlci5tdXRhdGUoW3sgb3A6ICdtZXJnZScsIGJyYW5jaElkOiB0aGlzLmRlZmF1bHRRdWVyeU9wdGlvbnMuYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkOiB0YXJnZXRCcmFuY2hJZCB9XSwgMCk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZFJlcG8ucHJvdG90eXBlLnNhdmVOb3cgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy53cml0ZXIud2FpdEZvclZlcnNpb25Ub1BlcnNpc3QodGhpcy53cml0ZXIuY3VycmVudFZlcnNpb24pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2VkQmFja2VuZFJlcG87XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEtlZEJhY2tlbmRSZXBvIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWtlZGJhY2tlbmQtcmVwby5qcy5tYXAiLCJpbXBvcnQgZW52IGZyb20gJy4vS0VELmVudic7XHJcbmltcG9ydCB7IEtlZEJhY2tlbmRSZXBvIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgZ2V0R2xvYmFsSWQsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi9LRUQuY2ZnJztcclxuaW1wb3J0IHsgU2Nob29sLCBCcmFuY2ggfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSAna2VkYmFja2VuZC9vYnNlcnZhYmxlJztcclxuXHJcbmV4cG9ydCBjb25zdCBkYiA9IG5ldyBLZWRCYWNrZW5kUmVwbygoKT0+ZW52LmtlZEJhY2tlbmRDbGllbnQsICgpPT5lbnYuY3VycmVudFVzZXIgPyBlbnYuY3VycmVudFVzZXIubWFpbCA6IFwiXCIpO1xyXG5leHBvcnQgY29uc3QgZ2xvYmFsSWQgPSBnZXRHbG9iYWxJZChjZmcuS0VEX1JFQUxNKTtcclxuZXhwb3J0IGNvbnN0IFNjaG9vbHMgPSB7XHJcbiAgc3RhbmRhcmRTY2hvb2w6IGRiLnNjaG9vbHMubmFtZShcInN0YW5kYXJkXCIpLmNhY2hlT3B0aW1pemVkKCkuc2luZ2xlKCksXHJcbiAgZ2V0IG15U2Nob29sICgpIHsgcmV0dXJuIGRiLnNjaG9vbHMubmFtZShlbnYuY3VycmVudFVzZXIuc2Nob29sKS5jYWNoZU9wdGltaXplZCgpLnNpbmdsZSgpOyB9XHJcbn07XHJcbmV4cG9ydCBjb25zdCBDb3Vyc2VJbnN0YW5jZXMgPSB7XHJcbiAgZ2V0QnJhbmNoSWQoc2Nob29sOiBWYWx1ZTxTY2hvb2w+LCBjb3Vyc2VJZDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gc2Nob29sLnN3aXRjaE1hcChzY2hvb2wgPT5cclxuICAgICAgZGIuYnJhbmNoZXNcclxuICAgICAgICAuaGFzRWRnZXNGcm9tKFtzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZF0pXHJcbiAgICAgICAgLm5hbWUoXCJkcmFmdFwiKVxyXG4gICAgICAgIC50YWdzKGNvdXJzZUlkKVxyXG4gICAgICAgIC5pZHNPbmx5KClcclxuICAgICAgICAubWFwKCh7aWR9KSA9PiBpZClcclxuICAgICAgICAudG9WYWx1ZSgpXHJcbiAgICAgICAgLm1hcChpZHMgPT4gaWRzLmxlbmd0aCA+IDAgPyBpZHNbMF0gOiB1bmRlZmluZWQpKTtcclxuICB9LFxyXG5cclxuICAvKiogR2V0IGEgRFJBRlQgYnJhbmNoIGZvciBnaXZlbiBjb3Vyc2UgSUQgYW5kIGdpdmVuIHNjaG9vbC5cclxuICAgKiBJZiB0aGVyZSBpcyBub3QgeWV0IHN1Y2ggYSBicmFuY2gsIGNyZWF0ZSBpdCB1c2luZyBtdXRhdGlvbnNPbkVtcHR5KCkgd2hpY2ggd2lsbFxyXG4gICAqIGxlYWQgdG8gdGhlIEMjIGNvZGUgRG9jdW1lbnRSZXBvc2l0b3J5LlJlYWRPck11dGF0ZSgpIHZpYSBEb2N1bWVudENvbnRyb2xsZXIuXHJcbiAgICovXHJcbiAgZ2V0T3JDcmVhdGVCcmFuY2hJZChzY2hvb2w6IFZhbHVlPFNjaG9vbD4sIGNvdXJzZUlkOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBkYi5jb3Vyc2VJbnN0YW5jZXMuaWRzT25seSgpLmlkKGNvdXJzZUlkKS5zd2l0Y2hNYXAoKCk9PiAvLyBUSGlzIGZpcnN0IGxpbmUgdmVyaWZpZXMgY291cnNlIGV4aXN0cy4gSWYgZGVsZXRlZCwgZG9uJ3QgdHJ5IHRvIHJlY3JlYXRlIGl0cyBicmFuY2ghXHJcbiAgICAgIHNjaG9vbC5zd2l0Y2hNYXAoc2Nob29sID0+IFxyXG4gICAgICBkYi5icmFuY2hlc1xyXG4gICAgICAgIC5oYXNFZGdlc0Zyb20oW3NjaG9vbC5vZmZpY2lhbEJyYW5jaElkXSlcclxuICAgICAgICAubmFtZShcImRyYWZ0XCIpXHJcbiAgICAgICAgLnRhZ3MoY291cnNlSWQpXHJcbiAgICAgICAgLmlkc09ubHkoKVxyXG4gICAgICAgIC5tdXRhdGlvbnNPbkVtcHR5KHR4ID0+IHtcclxuICAgICAgICAgIC8vIFRoZXNlIDIgbXV0YXRpb25zIHdpbGwgb2NjdXIgc2VydmVyIHNpZGUsIGF0b21pY2FsbHkuXHJcbiAgICAgICAgICAvLyBXaWxsIGJlIHNlbnQgb24gZWFjaCByZXF1ZXN0IGluIHRoZSBxdWVyeSwgYnV0IHdpbGwgb25seSBleGVjdXRlIGlmIHF1ZXJ5IHJlc3VsdHMgaW4gemVybyBpdGVtcy5cclxuICAgICAgICAgIC8vY29uc29sZS5sb2coXCJTY2hvb2w6XCIsIHNjaG9vbCk7XHJcbiAgICAgICAgICBjb25zdCBpZCA9IGNyZWF0ZVVVSUQoKTtcclxuICAgICAgICAgIHR4LmFkZChcImJyYW5jaGVzXCIsIHtcclxuICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgIGFjbDogW1xyXG4gICAgICAgICAgICAgIFwicm9sZTpVU0VSOlJcIixcclxuICAgICAgICAgICAgICBgc2Nob29sUm9sZToke3NjaG9vbC5uYW1lfS9FTVBMT1lFRTpTYFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBuYW1lOiAnZHJhZnQnLFxyXG4gICAgICAgICAgICBzY2hvb2xJZDogc2Nob29sLmlkLFxyXG4gICAgICAgICAgICB0cmVlUGFyZW50SWQ6IHNjaG9vbC5vZmZpY2lhbEJyYW5jaElkLFxyXG4gICAgICAgICAgICB0YWdzOiBbY291cnNlSWRdXHJcbiAgICAgICAgICB9IGFzIEJyYW5jaCk7XHJcbiAgICAgICAgICAvLyBBcHByb3ZpbmcgdGhlIGJyYW5jaCBtYWtlcyBzdXJlIHRoYXQgaXQgd2FzIGNyZWF0ZWQgYnkgYW4gRU1QTE9ZRUUgb24gZ2l2ZW4gc2Nob29sLlxyXG4gICAgICAgICAgdHgubGluazIoXCJicmFuY2hlc1wiLCBzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZCwgXCJhcHByb3ZlZENoaWxkcmVuXCIsIGlkKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zaW5nbGUoKVxyXG4gICAgICAgIC5tYXAoKHtpZH0pID0+IGlkKSkpO1xyXG4gIH0sXHJcblxyXG4gIGdldEFsbERlc2NlbmRhbnRJZHMoY291cnNlSWQ6IHN0cmluZykge1xyXG4gICAgcmV0dXJuIGRiLmNvdXJzZUJsb2Nrcy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkuY29uY2F0KFxyXG4gICAgICBkYi5jb3Vyc2VDb250ZW50cy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkpLmNvbmNhdChcclxuICAgICAgZGIuY291cnNlVGFicy50YWdzKGNvdXJzZUlkKS5pZHNPbmx5KCkpLmNvbmNhdChcclxuICAgICAgZGIudGFza3MudGFncyhjb3Vyc2VJZCkuaWRzT25seSgpKVxyXG4gICAgICAubWFwKHggPT4geC5pZCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IChjb21tYW5kLCB2YWx1ZSA9IG51bGwpID0+IHtcclxuICBkb2N1bWVudC5leGVjQ29tbWFuZChjb21tYW5kLCBmYWxzZSwgdmFsdWUpXHJcbn1cclxuIiwiaW1wb3J0IHsgQWNjZXNzQ2xhaW0sIERvY3VtZW50QWNjZXNzLCBoYXNBY2Nlc3MgYXMgX2hhc0FjY2VzcywgQWNjZXNzUmlnaHQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IERvY3VtZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgZ2V0VXNlckNsYWltcyBmcm9tICcuL2dldC11c2VyLWNsYWltcyc7XHJcbmltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcsIGdlbmVyYXRlUXVlcnlTdHJpbmcgfSBmcm9tIFwiLi4vdXRpbHMvcXVlcnktc3RyaW5nXCI7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcbmV4cG9ydCB7IGdldFVzZXJDbGFpbXMgfTtcclxuXHJcbmV4cG9ydCBjb25zdCBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUyA9IFtcInVzZXJcIixcInJvbGVcIixcInNjaG9vbFwiLFwiZGVidWdcIixcInRlc3RWZXJzaW9uXCIsXCJ0ZXN0dmVyc2lvblwiLFwic2Nob29sVHlwZVwiLFwic2Nob29sdHlwZVwiXTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCwgcmVxdWVzdGVkUmlnaHQ6IEFjY2Vzc1JpZ2h0KSB7XHJcbiAgdmFyIGNsYWltcyA9IGdldFVzZXJDbGFpbXModXNlcik7XHJcbiAgaWYgKHJlcXVlc3RlZFJpZ2h0ICE9PSAnUicgJiYgdXNlci50dXRvckZvcikge1xyXG4gICAgY2xhaW1zID0gY2xhaW1zLmZpbHRlcihjbGFpbSA9PiBjbGFpbS50eXBlICE9PSAnZW1haWwnKTtcclxuICB9XHJcbiAgdmFyIHJlc3VsdCA9IF9oYXNBY2Nlc3MoRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZ0FycmF5KGRvYy5hY2wgfHwgW10pLCBjbGFpbXMsIHJlcXVlc3RlZFJpZ2h0KTtcclxuICAvL2NvbnNvbGUubG9nKGBIYXMgJHtyZXF1ZXN0ZWRSaWdodH0gYWNjZXNzIHRvICR7ZG9jLm5hbWV9LyR7ZG9jLmlkfTogJHtyZXN1bHR9YCk7XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc1JlYWRBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xyXG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnUicpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFzV3JpdGVBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xyXG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnVycpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFzU2hhcmVBY2Nlc3ModXNlcjogVXNlciwgZG9jOiBEb2N1bWVudCkge1xyXG4gIHJldHVybiBoYXNBY2Nlc3ModXNlciwgZG9jLCAnUycpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNUZWFjaGVyQXRTY2hvb2wodXNlcjogVXNlciwgc2Nob29sOiBzdHJpbmcpIHtcclxuICBjb25zdCBpc1RlYWNoZXIgPSB1c2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSAnRU1QTE9ZRUUnIHx8IHJvbGUgPT09ICdBRE1JTicpO1xyXG4gIGNvbnN0IGJlbG9uZ3NUb1NjaG9vbCA9IChzY2hvb2x8fFwiXCIpLnRvTG93ZXJDYXNlKCkgPT09IHVzZXIuc2Nob29sLnRvTG93ZXJDYXNlKCk7XHJcbiAgcmV0dXJuIChpc1RlYWNoZXIgJiYgYmVsb25nc1RvU2Nob29sKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQWRtaW5PclRlYWNoZXJBdFNjaG9vbCh1c2VyOiBVc2VyLCBzY2hvb2w6IHN0cmluZykge1xyXG4gIHJldHVybiB1c2VyLnJvbGVzLmluY2x1ZGVzKFwiQURNSU5cIikgfHwgaXNUZWFjaGVyQXRTY2hvb2wodXNlciwgc2Nob29sKTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGltcGVyc29uYXRpb25FbnYgPSB7XHJcbiAgYWN0QXMgKG9wdGlvbnM6IHtyb2xlLCBzY2hvb2wsIHVybD99KSB7XHJcbiAgICBjb25zdCB7cm9sZSwgc2Nob29sLCB1cmx9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IGN1cnJlbnRRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoKTtcclxuICAgIGNvbnN0IG5ld1F1ZXJ5ID0gey4uLmN1cnJlbnRRdWVyeSwgcm9sZSwgc2Nob29sfTtcclxuICAgIGNvbnN0IG5ld1F1ZXJ5U3RyaW5nID0gZ2VuZXJhdGVRdWVyeVN0cmluZyhuZXdRdWVyeSk7XHJcbiAgICBpZiAodXJsKSB7XHJcbiAgICAgIGxvY2F0aW9uLmhyZWYgPSBgJHt1cmx9JHtuZXdRdWVyeVN0cmluZ31gO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbG9jYXRpb24uaGFzaCA9IFwiI1wiO1xyXG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSBuZXdRdWVyeVN0cmluZztcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhY3RBcyhvcHRpb25zOiB7cm9sZSwgc2Nob29sLCB1cmw/fSkge1xyXG4gIGltcGVyc29uYXRpb25FbnYuYWN0QXMob3B0aW9ucyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmVzZXJ2ZUltcGVyc29uYXRpb25RdWVyeSAodXJsOiBzdHJpbmcsIHF1ZXJ5OiB7W25hbWU6IHN0cmluZ10gOiBzdHJpbmd9KSB7XHJcbiAgY29uc3QgY3VycmVudFF1ZXJ5ID0gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvbi5zZWFyY2gpO1xyXG4gIGNvbnN0IHByZXNlcnZlZFF1ZXJ5ID0ge307XHJcbiAgZm9yIChjb25zdCBwYXJhbSBvZiBJTVBFUlNPTkFUSU9OX1FVRVJZX1BBUkFNUykge1xyXG4gICAgaWYgKGN1cnJlbnRRdWVyeVtwYXJhbV0pIHByZXNlcnZlZFF1ZXJ5W3BhcmFtXSA9IGN1cnJlbnRRdWVyeVtwYXJhbV07XHJcbiAgfVxyXG4gIGNvbnN0IG5ld1F1ZXJ5U3RyaW5nID0gZ2VuZXJhdGVRdWVyeVN0cmluZyh7Li4ucHJlc2VydmVkUXVlcnksIC4uLnF1ZXJ5fSk7XHJcbiAgY29uc3QgcEhhc2ggPSB1cmwuaW5kZXhPZignIycpO1xyXG4gIHJldHVybiBwSGFzaCA+PSAwID9cclxuICAgIGAke3VybC5zdWJzdHIoMCxwSGFzaCl9JHtuZXdRdWVyeVN0cmluZ30ke3VybC5zdWJzdHIocEhhc2gpfWAgOlxyXG4gICAgYCR7dXJsfSR7bmV3UXVlcnlTdHJpbmd9YDtcclxufVxyXG4iLCJpbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVc2VyQ2xhaW1zICh1c2VyOiBVc2VyKSB7XHJcbiAgcmV0dXJuIFt7XHJcbiAgICB0eXBlOiBcImVtYWlsXCIsXHJcbiAgICB2YWx1ZTogdXNlci5tYWlsXHJcbiAgfSx7XHJcbiAgICB0eXBlOiBcInNjaG9vbFwiLFxyXG4gICAgdmFsdWU6IHVzZXIuc2Nob29sXHJcbiAgfV0uY29uY2F0KHVzZXIucm9sZXMubWFwKHJvbGUgPT4gKHtcclxuICAgIHR5cGU6IFwicm9sZVwiLFxyXG4gICAgdmFsdWU6IHJvbGVcclxuICB9KSkpLmNvbmNhdCh1c2VyLnJvbGVzLm1hcChyb2xlID0+ICh7XHJcbiAgICB0eXBlOiBcInNjaG9vbFJvbGVcIixcclxuICAgIHZhbHVlOiB1c2VyLnNjaG9vbCArIFwiL1wiICsgcm9sZVxyXG4gIH0pKSk7XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNwaW5uZXIgPSAoKT0+IDxzcGFuPjxpIGNsYXNzTmFtZT1cImZhIGZhLXNwaW5uZXIgZmEtc3BpblwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4mbmJzcDs8L3NwYW4+O1xyXG4iLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVVVJRCgpIHtcclxuICAgIC8vIERlY2VudCBzb2x1dGlvbiBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTA1MDM0L2hvdy10by1jcmVhdGUtYS1ndWlkLXV1aWQtaW4tamF2YXNjcmlwdFxyXG4gICAgdmFyIGQgPSBEYXRlLm5vdygpO1xyXG4gICAgdmFyIHV1aWQgPSAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XHJcbiAgICAgICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KTtcclxuICAgICAgICByZXR1cm4gKGMgPT09ICd4JyA/IHIgOiAociAmIDB4NyB8IDB4OCkpLnRvU3RyaW5nKDE2KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHV1aWQ7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGF2b2lkU2ltdWx0YW5vdXNDYWxscyhtZXRob2QpIHtcclxuICAgIHZhciBvbmdvaW5nUHJvbWlzZSA9IG51bGw7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghb25nb2luZ1Byb21pc2UpIHtcclxuICAgICAgICAgICAgb25nb2luZ1Byb21pc2UgPSBtZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIG9uZ29pbmdQcm9taXNlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb25nb2luZ1Byb21pc2U7XHJcbiAgICB9O1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxJZChyZWFsbSkge1xyXG4gICAgdmFyIHByZWZpeCA9ICdlYzk2YjNiZS00NWZjLTQxZDMtYjY5ZS0nO1xyXG4gICAgdmFyIHBhZCA9IFsnNTAnLCAnMDgnLCAnZTEnLCAnNDAnLCAnZTQnLCAnZTcnXTtcclxuICAgIGlmIChyZWFsbS5sZW5ndGggPiA2KVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRvbyBsb25nIHJlYWxtXCIpO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWFsbS5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIHZhciBoZXggPSByZWFsbS5jaGFyQ29kZUF0KGkpLnRvU3RyaW5nKDE2KTtcclxuICAgICAgICBwYWRbaV0gPSBoZXgubGVuZ3RoID09PSAyID9cclxuICAgICAgICAgICAgaGV4IDpcclxuICAgICAgICAgICAgJzAnICsgaGV4O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByZWZpeCArIHBhZC5qb2luKCcnKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVByZWRlc3RpbmF0ZWRJZChpbnB1dCkge1xyXG4gICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVuY29kZXIsIGRhdGEsIGRpZ2VzdCwgX2EsIGk7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGVuY29kZXIuZW5jb2RlKGlucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICBfYSA9IFVpbnQ4QXJyYXkuYmluZDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBjcnlwdG8uc3VidGxlLmRpZ2VzdCgnU0hBLTI1NicsIGRhdGEpXTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICBkaWdlc3QgPSBuZXcgKF9hLmFwcGx5KFVpbnQ4QXJyYXksIFt2b2lkIDAsIF9iLnNlbnQoKV0pKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmliYmxlID0gZGlnZXN0W2krK10gJSAxNiB8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2FzaGVkTmliYmxlID0gYyA9PT0gJ3gnID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuaWJibGUgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pYmJsZSAmIDB4NyB8IDB4ODtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3YXNoZWROaWJibGUudG9TdHJpbmcoMTYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qZXhwb3J0IGZ1bmN0aW9uIGJ1ZjJoZXgoYnVmZmVyOiBBcnJheUJ1ZmZlcikge1xyXG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoXHJcbiAgICBuZXcgVWludDhBcnJheShidWZmZXIpLFxyXG4gICAgKHg6IG51bWJlcikgPT4gKCcwMCcgKyB4LnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpKS5qb2luKCcnKTtcclxufSovXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVBcnJheShhLCBtYXBwZXIpIHtcclxuICAgIHZhciByZXR2YWwgPSBhO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhLmxlbmd0aDsgaSA8IGw7ICsraSkge1xyXG4gICAgICAgIHZhciB0ID0gYVtpXTtcclxuICAgICAgICB2YXIgbWFwcGVkID0gbWFwcGVyKHQpO1xyXG4gICAgICAgIGlmIChtYXBwZWQgIT09IHQpIHtcclxuICAgICAgICAgICAgaWYgKHJldHZhbCA9PT0gYSlcclxuICAgICAgICAgICAgICAgIHJldHZhbCA9IGEuc2xpY2UoKTtcclxuICAgICAgICAgICAgcmV0dmFsW2ldID0gbWFwcGVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXR2YWw7XHJcbn1cclxuLypcclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUFycmF5PFQ+KGE6IFRbXSwgbWFwcGVyOiAodDogVCkgPT4gVCB8IGZhbHNlKTogVFtdIHtcclxuICBsZXQgcmV0dmFsID0gYTtcclxuICBsZXQgaiA9IDA7XHJcbiAgZm9yIChsZXQgaT0wLGw9YS5sZW5ndGg7IGk8bDsgKytpLCArK2opIHtcclxuICAgIGNvbnN0IHQgPSBhW2ldO1xyXG4gICAgY29uc3QgbWFwcGVkID0gbWFwcGVyKHQpO1xyXG4gICAgaWYgKG1hcHBlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgLy8gTWFwcGVyIHdhbnRzIHRvIGRlbGV0ZSB0aGlzIGRvYy5cclxuICAgICAgaWYgKHJldHZhbCA9PT0gYSkgcmV0dmFsID0gYS5zbGljZSgpO1xyXG4gICAgICByZXR2YWwuc3BsaWNlKGosIDEpO1xyXG4gICAgICAtLWo7IC8vIGNvbXBlbnNhdGUgZm9yICsralxyXG4gICAgfSBlbHNlIGlmIChtYXBwZWQgIT09IHQpIHtcclxuICAgICAgaWYgKHJldHZhbCA9PT0gYSkgcmV0dmFsID0gYS5zbGljZSgpO1xyXG4gICAgICByZXR2YWxbal0gPSBtYXBwZWQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZXR2YWw7XHJcbn1cclxuKi8gXHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCIsImV4cG9ydCBpbnRlcmZhY2UgUGFyc2VRdWVyeVN0cmluZ09wdGlvbnMge1xyXG4gIHRvTG93ZXI/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZyhsb2NhdGlvblNlYXJjaDogc3RyaW5nLCBvcHRpb25zPzogUGFyc2VRdWVyeVN0cmluZ09wdGlvbnMpOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9IHtcclxuICBjb25zdCB7dG9Mb3dlcn0gPSAob3B0aW9ucyB8fMKge30pIGFzIFBhcnNlUXVlcnlTdHJpbmdPcHRpb25zO1xyXG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xyXG4gIGlmIChsb2NhdGlvblNlYXJjaCAmJiBsb2NhdGlvblNlYXJjaC5sZW5ndGggPiAxKVxyXG4gICAgbG9jYXRpb25TZWFyY2guc3Vic3RyKDEpXHJcbiAgICAgIC5zcGxpdCgnJicpXHJcbiAgICAgIC5tYXAocGFydCA9PiBwYXJ0LnNwbGl0KCc9JykubWFwKHMgPT4gZGVjb2RlVVJJQ29tcG9uZW50KHMudHJpbSgpKSkpXHJcbiAgICAgIC5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHJlc3VsdFt0b0xvd2VyID8ga2V5LnRvTG93ZXJDYXNlKCkgOiBrZXldID0gdmFsdWUpO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVuY29kZVBhcmFtcyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcclxuICByZXR1cm4gT2JqZWN0LmtleXMocGFyYW1zKS5maWx0ZXIoa2V5ID0+IHBhcmFtc1trZXldICE9PSB1bmRlZmluZWQpLm1hcChrZXkgPT4gYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtc1trZXldKX1gKS5qb2luKCcmJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZVF1ZXJ5U3RyaW5nKHBhcmFtczoge1trZXk6IHN0cmluZ106c3RyaW5nfSkge1xyXG4gIHJldHVybiBcIj9cIiArIGVuY29kZVBhcmFtcyhwYXJhbXMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VIYXNoUXVlcnlTdHJpbmcobG9jYXRpb25IYXNoOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJzZVF1ZXJ5U3RyaW5nT3B0aW9ucykge1xyXG4gIHJldHVybiBwYXJzZVF1ZXJ5U3RyaW5nKGxvY2F0aW9uSGFzaCwgb3B0aW9ucyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZUhhc2hRdWVyeVN0cmluZyhwYXJhbXM6IHtba2V5OiBzdHJpbmddOnN0cmluZ30pIHtcclxuICByZXR1cm4gXCIjXCIgKyBlbmNvZGVQYXJhbXMocGFyYW1zKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0VXJsQW5kUXVlcnkgKHVybFdpdGhQb3NzaWJsZVF1ZXJ5OiBzdHJpbmcpIHtcclxuICBjb25zdCBwUXVlcnkgPSB1cmxXaXRoUG9zc2libGVRdWVyeS5pbmRleE9mKCc/Jyk7XHJcbiAgcmV0dXJuIHBRdWVyeSA+PSAwID9cclxuICAgIFt1cmxXaXRoUG9zc2libGVRdWVyeS5zdWJzdHIoMCwgcFF1ZXJ5KSwgdXJsV2l0aFBvc3NpYmxlUXVlcnkuc3Vic3RyKHBRdWVyeSldIDpcclxuICAgIFt1cmxXaXRoUG9zc2libGVRdWVyeSwgXCJcIl07XHJcbn1cclxuIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBEb2N1bWVudCwgUmVzb3VyY2UsIE1vZGlmaWNhdGlvblRyYWNrZWQsIENvdXJzZSwgVGFzayB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgQmF0Y2hSdW5uZXIsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB1cGRhdGUgZnJvbSAncmVhY3QtYWRkb25zLXVwZGF0ZSc7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuLi8uLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSB9IGZyb20gJy4uLy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZURvY3VtZW50R3JhcGhzKG9sZERvYywgbmV3RG9jLCB0YWJsZTogc3RyaW5nLCBncmFwaHM6IHsgW2xhYmVsOiBzdHJpbmddOiBzdHJpbmcgfSwgYmF0Y2g6IEJhdGNoUnVubmVyKSB7XHJcbiAgY29uc3QgZG9jVXBkYXRlcyA9IHt9O1xyXG4gIGNvbnN0IGRvY0lkID0gbmV3RG9jLmlkO1xyXG4gIGZvciAobGV0IG5hdlByb3Agb2YgT2JqZWN0LmtleXMoZ3JhcGhzKSkge1xyXG4gICAgY29uc3QgZm9yZWlnblRhYmxlID0gZ3JhcGhzW25hdlByb3BdO1xyXG4gICAgY29uc3Qgb2xkTGlzdDogRG9jdW1lbnRbXSA9IG9sZERvY1tuYXZQcm9wXSB8fCBbXTtcclxuICAgIGNvbnN0IG5ld0xpc3Q6IERvY3VtZW50W10gPSBuZXdEb2NbbmF2UHJvcF07XHJcbiAgICBpZiAoIW5ld0xpc3QpIGNvbnRpbnVlO1xyXG4gICAgY29uc3QgdHVwbGVzID0gbmV3TGlzdFxyXG4gICAgICAubWFwKChkb2MsIGlkeCk9Pih7ZG9jLCBpZHh9KSk7IC8vIENyZWF0ZSB0dWJsZXMgb2Yge2RvYywgYXJyYXktaW5kZXh9IHNvIHdlIGNhbiB1cGRhdGUgcmVzdWx0XHJcbiAgICBjb25zdCBhZGRlZCA9IHR1cGxlcy5maWx0ZXIodHVwbGUgPT4gIW9sZExpc3Quc29tZShvID0+IG8uaWQgPT09IHR1cGxlLmRvYy5pZCkpOyAvLyBGaW5kIGFkZGVkIGl0ZW1zXHJcblxyXG4gICAgZm9yIChsZXQgYSBvZiBhZGRlZCkge1xyXG4gICAgICBjb25zdCBtdXRhdGVkU3ViRG9jID0gey4uLmEuZG9jfTtcclxuICAgICAgY29uc3QgbWV0YSA9IG11dGF0ZWRTdWJEb2MuJG1ldGE7XHJcbiAgICAgIGRlbGV0ZSBtdXRhdGVkU3ViRG9jLiRtZXRhOyAvLyBEZWxldGUgJG1ldGEgc28gdGhhdCBcImFkZFwiIG9yIFwidXBkYXRlXCIgZG9lcyBub3QgcGVyc2lzdGUgdG8gbmV4dCBzdGF0ZS5cclxuICAgICAgaWYgKG1ldGEgPT09ICdhZGQnKSB7XHJcbiAgICAgICAgaWYgKCFtdXRhdGVkU3ViRG9jLmlkKSBtdXRhdGVkU3ViRG9jLmlkID0gY3JlYXRlVVVJRCgpOyAvLyBHZW5lcmF0ZSBJRCBpZiBub3QgZG9uZSB5ZXQuXHJcbiAgICAgICAgLy8gTm93IHB1dCBhbiAnYWRkJyBtdXRhdGlvbiBpbiB0aGUgYmF0Y2ggcXVldWUuXHJcbiAgICAgICAgYmF0Y2guYWRkKGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XHJcbiAgICAgIH0gZWxzZSBpZiAobWV0YSA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgICBiYXRjaC5wdXQoZm9yZWlnblRhYmxlLCBtdXRhdGVkU3ViRG9jKTtcclxuICAgICAgfVxyXG4gICAgICBiYXRjaC5saW5rKHRhYmxlLCBkb2NJZCwgZm9yZWlnblRhYmxlLCBtdXRhdGVkU3ViRG9jLmlkLCBuYXZQcm9wKTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSByZXN1bHQgc28gdGhhdCBzdGF0ZSBpcyByZWZsZWN0ZWQgYWZ0ZXIgc3VjY2VzZnVsIFBPU1QgdG8gc2VydmVyLlxyXG4gICAgICBpZiAoIWRvY1VwZGF0ZXNbbmF2UHJvcF0pIGRvY1VwZGF0ZXNbbmF2UHJvcF0gPSB7fTtcclxuICAgICAgZG9jVXBkYXRlc1tuYXZQcm9wXVthLmlkeF0gPSB7JHNldDogbXV0YXRlZFN1YkRvY307XHJcbiAgICB9XHJcbiAgICBjb25zdCByZW1vdmVkID0gb2xkTGlzdC5maWx0ZXIobyA9PiAhbmV3TGlzdC5zb21lKG4gPT4gbi5pZCA9PT0gby5pZCkpO1xyXG4gICAgZm9yIChsZXQgciBvZiByZW1vdmVkKSB7XHJcbiAgICAgIGJhdGNoLnVubGluayh0YWJsZSwgZG9jSWQsIGZvcmVpZ25UYWJsZSwgci5pZCwgbmF2UHJvcCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB1cGRhdGVkID0gdHVwbGVzLmZpbHRlcih0dXBsZSA9PiBvbGRMaXN0LnNvbWUobyA9PiBvLmlkID09PSB0dXBsZS5kb2MuaWQgJiYgdHVwbGUuZG9jLiRtZXRhID09PSAndXBkYXRlJykpO1xyXG4gICAgZm9yIChsZXQgdSBvZiB1cGRhdGVkKSB7XHJcbiAgICAgIGNvbnN0IG11dGF0ZWRTdWJEb2MgPSB7Li4udS5kb2N9O1xyXG4gICAgICBkZWxldGUgbXV0YXRlZFN1YkRvYy4kbWV0YTtcclxuICAgICAgYmF0Y2gucHV0KGZvcmVpZ25UYWJsZSwgbXV0YXRlZFN1YkRvYyk7XHJcblxyXG4gICAgICAvLyBVcGRhdGUgcmVzdWx0IHNvIHRoYXQgJG1ldGEgaXMgcmVtb3ZlZCBmcm9tIG5hdmlnYXRpb24gcHJvcCBhZnRlciBzdWNjZXNzZnVsIFBPU1QgdG8gc2VydmVyLlxyXG4gICAgICBpZiAoIWRvY1VwZGF0ZXNbbmF2UHJvcF0pIGRvY1VwZGF0ZXNbbmF2UHJvcF0gPSB7fTtcclxuICAgICAgZG9jVXBkYXRlc1tuYXZQcm9wXVt1LmlkeF0gPSB7JHNldDogbXV0YXRlZFN1YkRvY307XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB1cGRhdGUobmV3RG9jLCBkb2NVcGRhdGVzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGR0Rm9ybWF0KGRhdGVUaW1lOiBudW1iZXIgfCBEYXRlIHwgbW9tZW50Lk1vbWVudCkge1xyXG4gIHJldHVybiBtb21lbnQoZGF0ZVRpbWUpLmZvcm1hdCgnWVlNTUREIEhIOm1tJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzaG9ydERhdGVGb3JtYXQoZGF0ZVRpbWU6IG51bWJlciB8IERhdGUgfCBtb21lbnQuTW9tZW50KSB7XHJcbiAgcmV0dXJuIG1vbWVudChkYXRlVGltZSkuZm9ybWF0KCdZWU1NREQnKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3J0UGVyc29uTmFtZUZvcm1hdChuYW1lOiBzdHJpbmcpIHtcclxuICBpZiAoIW5hbWUpIHJldHVybiBcIlwiO1xyXG4gIGNvbnN0IG5hbWVzID0gbmFtZS5zcGxpdCgnICcpLmZpbHRlcihuID0+ICEhbik7XHJcbiAgY29uc3QgbGFzdE5hbWUgPSBuYW1lcy5wb3AoKTtcclxuICByZXR1cm4gbmFtZXMubWFwKG5hbWUgPT4gYCR7bmFtZVswXX0uYCkuY29uY2F0KGxhc3ROYW1lKS5qb2luKCcgJyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVNb2RpZmljYXRpb25TdGFtcCAobm93OiBudW1iZXIsIG9iajogTW9kaWZpY2F0aW9uVHJhY2tlZCwgdXNlcjogVXNlcikge1xyXG4gIHJldHVybiB1cGRhdGUob2JqLCB7XHJcbiAgICBkYXRlVGltZTogeyRzZXQ6IG5vd30sIC8vIEZvciBxdWVyaWVzLi4uXHJcbiAgICBtb2RpZmllZERhdGU6IHskc2V0OiBub3d9LFxyXG4gICAgbW9kaWZpZWRCeToge1xyXG4gICAgICAkc2V0OiB7XHJcbiAgICAgICAgbmFtZTogdXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgICB1cmw6IFwibWFpbHRvOlwiICsgdXNlci5tYWlsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZUNyZWF0aW9uU3RhbXAgKG5vdzogbnVtYmVyLCBvYmo6IE1vZGlmaWNhdGlvblRyYWNrZWQsIHVzZXI6IFVzZXIpIHtcclxuICByZXR1cm4gdXBkYXRlKG9iaiwge1xyXG4gICAgY3JlYXRlZERhdGU6IHskc2V0OiBEYXRlLm5vdygpfSxcclxuICAgIGNyZWF0ZWRCeToge1xyXG4gICAgICAkc2V0OiB7XHJcbiAgICAgICAgbmFtZTogdXNlci5kaXNwbGF5TmFtZSxcclxuICAgICAgICB1cmw6IFwibWFpbHRvOlwiICsgdXNlci5tYWlsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzKG9iajogTW9kaWZpY2F0aW9uVHJhY2tlZCwgdXNlcjogVXNlcikge1xyXG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgb2JqID0gdXBkYXRlTW9kaWZpY2F0aW9uU3RhbXAobm93LCBvYmosIHVzZXIpO1xyXG4gIGlmICghb2JqLmNyZWF0ZWRCeSkgb2JqID0gdXBkYXRlQ3JlYXRpb25TdGFtcChub3csIG9iaiwgdXNlcik7XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5RXRhZ3MoZG9jOiBEb2N1bWVudCwgbmV3RXRhZ3M6IHtbaWQ6IHN0cmluZ106IHN0cmluZ30sIGdyYXBoczogc3RyaW5nW10pIHtcclxuICBjb25zdCByZXMgPSB7Li4uZG9jfTtcclxuICBjb25zdCBldGFnID0gbmV3RXRhZ3NbZG9jLmlkXTtcclxuICBpZiAoZXRhZylcclxuICAgIHJlcy4kZXRhZyA9IGV0YWc7XHJcbiAgZm9yIChsZXQgbGFiZWwgb2YgZ3JhcGhzKSB7XHJcbiAgICBjb25zdCBuZXdMaXN0ID0gZG9jW2xhYmVsXS5tYXAoZCA9PiBhcHBseUV0YWdzKGQsIG5ld0V0YWdzLCBbXSkpO1xyXG4gICAgcmVzW2xhYmVsXSA9IG5ld0xpc3Q7XHJcbiAgfVxyXG4gIHJldHVybiByZXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZWFkQmxvYihibG9iOiBCbG9iLCBtOiAocjpGaWxlUmVhZGVyKT0+dm9pZCkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgcmVhZGVyLm9ubG9hZCA9IGV2ID0+IHJlc29sdmUoKGV2LnRhcmdldCBhcyBhbnkpLnJlc3VsdCk7XHJcbiAgICByZWFkZXIub25hYm9ydCA9IGV2ID0+IHJlamVjdChuZXcgRXJyb3IoXCJmaWxlIHJlYWQgYWJvcnRlZFwiKSk7XHJcbiAgICByZWFkZXIub25lcnJvciA9IGV2ID0+IHJlamVjdCgoZXYudGFyZ2V0IGFzIGFueSkuZXJyb3IpO1xyXG4gICAgbShyZWFkZXIpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVhZEJsb2JBc1RleHQgKGJsb2I6IEJsb2IpIHtcclxuICByZXR1cm4gcmVhZEJsb2IoYmxvYiwgcj0+ci5yZWFkQXNUZXh0KGJsb2IpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRCbG9iQXNEYXRhVXJsIChibG9iOiBCbG9iKSB7XHJcbiAgcmV0dXJuIHJlYWRCbG9iKGJsb2IsIHI9PnIucmVhZEFzRGF0YVVSTChibG9iKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhbGxvd0NvcHkoZTogUmVhY3QuRHJhZ0V2ZW50PEhUTUxEaXZFbGVtZW50Pikge1xyXG4gIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSAnY29weSc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVDb3Vyc2VCdWlsZGVyU3RhdHVzKHN0YXR1czogJ3Vuc2F2ZWQnIHwgJ3NhdmVkJyB8ICdlcnJvcicgfCAnJykge1xyXG4gIGNvbnN0IGRpdiA9ICQoJ2Rpdi5jb3Vyc2UtYnVpbGRlcicpWzBdO1xyXG4gIGlmIChkaXYpIGRpdi5jbGFzc05hbWUgPSBcImNvdXJzZS1idWlsZGVyXCIgKyAoc3RhdHVzID8gXCIgc3RhdHVzIFwiICsgc3RhdHVzIDogXCJcIik7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2FkQ291cnNlKGlkOiBzdHJpbmcsIG9wdGlvbnM/OiB7XHJcbiAgICBpbmNsdWRlVGVtcGxhdGVDaGFpbj86IGJvb2xlYW4sXHJcbiAgICBpbmNsdWRlPzogc3RyaW5nW11cclxuICB9KTogUHJvbWlzZTxDb3Vyc2U+XHJcbntcclxuICBjb25zdCBjbGllbnQgPSBlbnYua2VkQmFja2VuZENsaWVudDtcclxuICBjb25zdCBpbmNsdWRlVGVtcGxhdGVDaGFpbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlVGVtcGxhdGVDaGFpbjtcclxuICBjb25zdCBpbmNsdWRlVGFza3MgPSAhb3B0aW9ucyB8fCAhb3B0aW9ucy5pbmNsdWRlIHx8IG9wdGlvbnMuaW5jbHVkZS5pbmRleE9mKFwidGFza3NcIikgIT09IC0xO1xyXG4gIGNvbnN0IFtjb3Vyc2UsIGNvdXJzZVRhc2tzLCB0ZW1wbGF0ZUNoYWluXSA9IChhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICBjbGllbnQuZ2V0KFwiY291cnNlc1wiLCBpZCwge1xyXG4gICAgICBpbmNsdWRlOiBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZSA/IG9wdGlvbnMuaW5jbHVkZS5maWx0ZXIoaSA9PiBpICE9PSBcInRhc2tzXCIpIDogW1xyXG4gICAgICAgIFwiY2VudHJhbENvbnRlbnRcIixcclxuICAgICAgICBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLFxyXG4gICAgICAgIFwiYWJpbGl0aWVzXCIsXHJcbiAgICAgICAgXCJpbWFnZXNcIixcclxuICAgICAgICBcImFjbFwiIC8vIERvbid0IGluY2x1ZGUgdGFza3MgaGVyZS4uLlxyXG4gICAgICBdXHJcbiAgICB9KSxcclxuICAgIC8vIC4uLiBidXQgaW5jbHVkZSB0YXNrcyBoZXJlIGluc3RlYWQgc28gdGhhdCB3ZSBjYW4gbG9hZCB0aGUgZ3JhcGhzIGZvciB0aGVcclxuICAgIC8vIHRhc2tzIGFzIHdlbGwhXHJcbiAgICBpbmNsdWRlVGFza3MgJiYgY2xpZW50Lmxpc3QoXCJ0YXNrc1wiLCB7XHJcbiAgICAgIGhhc0VkZ2VzRnJvbTogaWQsXHJcbiAgICAgIGluY2x1ZGU6IFsna25vd2xlZGdlUmVxdWlyZW1lbnRzJywgJ2NlbnRyYWxDb250ZW50JywgJ2FiaWxpdGllcycsICdhY2wnXSxcclxuICAgICAgZmxhZ3M6IFsnaW5jbHVkZUlkc09ubHknXSAvLyBEb24ndCBuZWVkIHJlZHVuZGFudCBpbmZvIHRoYXQncyBhbHJlYWR5IG9uIGNvdXJzZVxyXG4gICAgfSksXHJcbiAgICBpbmNsdWRlVGVtcGxhdGVDaGFpbiAmJiBjbGllbnQubGlzdChcImNvdXJzZXNcIiwge1xyXG4gICAgICBoYXNFZGdlc0Zyb206IGlkLFxyXG4gICAgICBmbGFnczogWydpZHNPbmx5J11cclxuICAgIH0pXHJcbiAgXSkpIGFzIFtDb3Vyc2UsIFRhc2tbXSwgQ291cnNlW11dO1xyXG4gIGNvdXJzZS50YXNrcyA9IGNvdXJzZVRhc2tzO1xyXG5cclxuICAvLyBDb3JyZWN0IHRoZSBvcmRlciBvZiBBYmlsaXRpZXNcclxuICBpZiAoY291cnNlLmFiaWxpdGllcyAmJiBjb3Vyc2UuYWJpbGl0aWVzT3JkZXIpIHtcclxuICAgIGNvdXJzZS5hYmlsaXRpZXMgPSBjb3Vyc2UuYWJpbGl0aWVzT3JkZXIubWFwKGlkID0+XHJcbiAgICAgIGNvdXJzZS5hYmlsaXRpZXMuZmluZChhID0+IGEuaWQgPT09IGlkKSk7XHJcbiAgfVxyXG5cclxuICAvLyBDb3JyZWN0IHRoZSBvcmRlciBvZiBLbm93bGVkZ2VSZXF1aXJlbWVudHNcclxuICBpZiAoY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cyAmJiBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIpIHtcclxuICAgIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMgPSBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIubWFwKGlkID0+XHJcbiAgICAgIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZmluZChjID0+IGMuaWQgPT09IGlkKSk7XHJcbiAgfVxyXG5cclxuICAvLyBDb3JyZWN0IHRoZSBvcmRlciBvZiBDZW50cmFsQ29udGVudFxyXG4gIGlmIChjb3Vyc2UuY2VudHJhbENvbnRlbnQgJiYgY291cnNlLmNlbnRyYWxDb250ZW50T3JkZXIpIHtcclxuICAgIGNvdXJzZS5jZW50cmFsQ29udGVudCA9IGNvdXJzZS5jZW50cmFsQ29udGVudE9yZGVyLm1hcChpZCA9PlxyXG4gICAgICBjb3Vyc2UuY2VudHJhbENvbnRlbnQuZmluZChjYyA9PiBjYy5pZCA9PT0gaWQpKTsvLy5maWx0ZXIoeCA9PiAhIXgpOy8vIERlYnVnZ2luZyBzb210aGluJyAuIE5vcm1hbGx5IHRoZSBsYXN0IC5maWx0ZXIoKS4uLiBwYXJ0IHNob3VsZCBub3QgYmUgbmVzY2Vzc2FyeS4uLlxyXG4gIH1cclxuICBcclxuICAvLyBJbmNsdWRlIHRlbXBsYXRlIGNoYWluIGlmIHJlcXVlc3RlZC5cclxuICBpZiAoaW5jbHVkZVRlbXBsYXRlQ2hhaW4pIGNvdXJzZS50ZW1wbGF0ZUNoYWluID0gdGVtcGxhdGVDaGFpbjtcclxuICByZXR1cm4gY291cnNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaGFzTWlncmF0ZWRUZXh0cyh0YXNrOiBUYXNrKSB7XHJcbiAgcmV0dXJuIHRhc2subWlncmF0ZWRUZXh0cyAmJiBPYmplY3Qua2V5cyh0YXNrLm1pZ3JhdGVkVGV4dHMpLnNvbWUodHlwZSA9PlxyXG4gICAgT2JqZWN0LmtleXModGFzay5taWdyYXRlZFRleHRzW3R5cGVdKS5sZW5ndGggPiAwKTtcclxufVxyXG4iLCJ2YXIgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlKCkge1xyXG4gICAgfVxyXG4gICAgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKGlkLCB0b2tlbkluZm8pIHtcclxuICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwiYmVhcmVyLVwiICsgaWQsIEpTT04uc3RyaW5naWZ5KHRva2VuSW5mbykpO1xyXG4gICAgfTtcclxuICAgIEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHZhciBqc29uID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcImJlYXJlci1cIiArIGlkKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShqc29uID8gSlNPTi5wYXJzZShqc29uKSA6IHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgdG9rZW46IG51bGwsIGV4cGlyZXM6IDAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2U7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IEJlYXJlclN0b3JhZ2VTZXNzaW9uU3RvcmFnZSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1iZWFyZXItc3RvcmFnZS1zZXNzaW9uc3RvcmFnZS5qcy5tYXAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlVGFzayh0YXNrKSB7XHJcbiAgICBpZiAoIXRhc2sucmVzb3VyY2VzKVxyXG4gICAgICAgIHRhc2sucmVzb3VyY2VzID0gW107XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlncmF0ZS10YXNrLmpzLm1hcCIsImltcG9ydCBtaWdyYXRlQ291cnNlIGZyb20gJy4vbWlncmF0ZS1jb3Vyc2UnO1xyXG5pbXBvcnQgbWlncmF0ZVRhc2sgZnJvbSAnLi9taWdyYXRlLXRhc2snO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlKGRvYywgdGFibGUsIGdyYXBocykge1xyXG4gICAgc3dpdGNoICh0YWJsZSkge1xyXG4gICAgICAgIGNhc2UgXCJjb3Vyc2VzXCI6XHJcbiAgICAgICAgICAgIG1pZ3JhdGVDb3Vyc2UoZG9jLCBncmFwaHMpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIFwidGFza3NcIjpcclxuICAgICAgICAgICAgbWlncmF0ZVRhc2soZG9jKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWlncmF0ZS5qcy5tYXAiLCJpbXBvcnQgbWlncmF0ZVRhc2sgZnJvbSAnLi9taWdyYXRlLXRhc2snO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtaWdyYXRlQ291cnNlKGNvdXJzZSwgZ3JhcGhzKSB7XHJcbiAgICBpZiAoIWNvdXJzZS5tb2R1bGVzKVxyXG4gICAgICAgIGNvdXJzZS5tb2R1bGVzID0gW107XHJcbiAgICBjb3Vyc2UubW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGUpIHtcclxuICAgICAgICBpZiAoIW1vZHVsZS5yZXNvdXJjZXMpIHtcclxuICAgICAgICAgICAgbW9kdWxlLnJlc291cmNlcyA9IFtdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW1vZHVsZS50YXNrSWRzKSB7XHJcbiAgICAgICAgICAgIG1vZHVsZS50YXNrSWRzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZiAoIWNvdXJzZS5yZXNwb25zaWJsZVRlYWNoZXJzKSB7XHJcbiAgICAgICAgY291cnNlLnJlc3BvbnNpYmxlVGVhY2hlcnMgPSBbXTtcclxuICAgIH1cclxuICAgIC8vIEVhcmxpZXIgd3Jvbmcgc3BlbGxpbmcgb2YgcmVzb3VyY2VzXHJcbiAgICBpZiAoJ3Jlc291cnNlcycgaW4gY291cnNlICYmICEoJ3Jlc291cmNlcycgaW4gY291cnNlKSkge1xyXG4gICAgICAgIGNvdXJzZS5yZXNvdXJjZXMgPSBjb3Vyc2UucmVzb3Vyc2VzO1xyXG4gICAgICAgIGRlbGV0ZSBjb3Vyc2UucmVzb3Vyc2VzO1xyXG4gICAgfVxyXG4gICAgaWYgKCFjb3Vyc2UucmVzb3VyY2VzKSB7XHJcbiAgICAgICAgY291cnNlLnJlc291cmNlcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgaWYgKGdyYXBocykge1xyXG4gICAgICAgIGdyYXBocy5mb3JFYWNoKGZ1bmN0aW9uIChsYWJlbCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICd0YXNrcyc6XHJcbiAgICAgICAgICAgICAgICAgICAgY291cnNlLnRhc2tzLmZvckVhY2goZnVuY3Rpb24gKHRhc2spIHsgcmV0dXJuIG1pZ3JhdGVUYXNrKHRhc2spOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1pZ3JhdGUtY291cnNlLmpzLm1hcCIsImltcG9ydCBtaWdyYXRlIGZyb20gJy4vbWlncmF0ZSc7XHJcbmV4cG9ydCB2YXIgS2VkTW9kZWxNaWdyYXRvck1peGluID0gZnVuY3Rpb24gKGNsaWVudCkge1xyXG4gICAgaWYgKGNsaWVudC5fX21pZ3JhdG9yX21peGVkX2luKVxyXG4gICAgICAgIHJldHVybjtcclxuICAgIGNsaWVudC5fX21pZ3JhdG9yX21peGVkX2luID0gdHJ1ZTtcclxuICAgIHZhciBnZXQgPSBjbGllbnQuZ2V0O1xyXG4gICAgdmFyIGxpc3QgPSBjbGllbnQubGlzdDtcclxuICAgIGNsaWVudC5nZXQgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGluY2x1ZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuaW5jbHVkZTtcclxuICAgICAgICByZXR1cm4gZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIG1pZ3JhdGUocmVzdWx0LCB0YWJsZSwgaW5jbHVkZSAmJiBpbmNsdWRlLnRvU3RyaW5nKCkuc3BsaXQoJywnKSk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgY2xpZW50Lmxpc3QgPSBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgaW5jbHVkZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5pbmNsdWRlO1xyXG4gICAgICAgIHJldHVybiBsaXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChkb2MpIHsgcmV0dXJuIG1pZ3JhdGUoZG9jLCB0YWJsZSwgaW5jbHVkZSAmJiBpbmNsdWRlLnRvU3RyaW5nKCkuc3BsaXQoJywnKSk7IH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBjbGllbnQ7XHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsInZhciByZWRpckhhc2ggPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwicmVkaXItaGFzaFwiKTtcclxuaWYgKHJlZGlySGFzaClcclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIF9hID0gSlNPTi5wYXJzZShyZWRpckhhc2gpLCB0aW1lID0gX2EudGltZSwgaGFzaCA9IF9hLmhhc2g7XHJcbiAgICAgICAgaWYgKHRpbWUgJiYgdGltZSA+IERhdGUubm93KCkgLSA2MDAwMCkge1xyXG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5yZW1vdmVJdGVtKFwicmVkaXItaGFzaFwiKTtcclxuICAgICAgICAgICAgbG9jYXRpb24uaGFzaCA9IGhhc2g7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKF8pIHsgfVxyXG5leHBvcnQgZnVuY3Rpb24gcmVtZW1iZXJIYXNoTG9jYXRpb24oKSB7XHJcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFwicmVkaXItaGFzaFwiLCBKU09OLnN0cmluZ2lmeSh7IHRpbWU6IERhdGUubm93KCksIGhhc2g6IGxvY2F0aW9uLmhhc2ggfSkpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhc2gtcmVzdG9yZXIuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudCwgSHR0cEVycm9yIH0gZnJvbSAnLi4va2VkLWJhY2tlbmQtY2xpZW50JztcclxuaW1wb3J0IHsgQmVhcmVyU3RvcmFnZVNlc3Npb25TdG9yYWdlIH0gZnJvbSBcIi4vYmVhcmVyLXN0b3JhZ2Utc2Vzc2lvbnN0b3JhZ2VcIjtcclxuaW1wb3J0IHsgYXZvaWRTaW11bHRhbm91c0NhbGxzIH0gZnJvbSAnLi4va2VkLWJhY2tlbmQtY2xpZW50L3V0aWxzJztcclxuaW1wb3J0IHsgS2VkTW9kZWxNaWdyYXRvck1peGluIH0gZnJvbSAnLi4va2VkLW1vZGVsLW1pZ3JhdG9yJztcclxuaW1wb3J0ICcuL2hhc2gtcmVzdG9yZXInO1xyXG5pbXBvcnQgeyByZW1lbWJlckhhc2hMb2NhdGlvbiB9IGZyb20gJy4vaGFzaC1yZXN0b3Jlcic7XHJcbktlZE1vZGVsTWlncmF0b3JNaXhpbihLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZSk7XHJcbmV4cG9ydCB2YXIgc3RvcmFnZSA9IG5ldyBCZWFyZXJTdG9yYWdlU2Vzc2lvblN0b3JhZ2UoKTtcclxudmFyIHRpbWVPZlBhZ2VMb2FkID0gRGF0ZS5ub3coKTtcclxudmFyIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIodG9rZW5QYXRoLCB0b2tlblJlc3BvbnNlTWFwcGVyLCB0b2tlbklkKSB7XHJcbiAgICAgICAgdGhpcy50b2tlblBhdGggPSB0b2tlblBhdGg7XHJcbiAgICAgICAgdGhpcy50b2tlblJlc3BvbnNlTWFwcGVyID0gdG9rZW5SZXNwb25zZU1hcHBlcjtcclxuICAgICAgICB0aGlzLnRva2VuSWQgPSB0b2tlbklkO1xyXG4gICAgICAgIHRoaXMudG9rZW5JbmZvID0geyB0b2tlbjogbnVsbCwgZXhwaXJlczogMCB9O1xyXG4gICAgICAgIHRoaXMuZ2V0QmVhcmVyID0gYXZvaWRTaW11bHRhbm91c0NhbGxzKHRoaXMuZ2V0QmVhcmVyLmJpbmQodGhpcykpO1xyXG4gICAgICAgIHRoaXMucmVmcmVzaEJlYXJlciA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzLnJlZnJlc2hCZWFyZXIuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcbiAgICBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlci5wcm90b3R5cGUuZ2V0QmVhcmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEhdGhpcy50b2tlbkluZm8udG9rZW4pIHJldHVybiBbMyAvKmJyZWFrKi8sIDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMudG9rZW5JZCkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgc3RvcmFnZS5sb2FkKHRoaXMudG9rZW5JZCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EudG9rZW5JbmZvID0gX2Iuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnRva2VuSW5mby5leHBpcmVzIDwgRGF0ZS5ub3coKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hCZWFyZXIoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFdlYlNlcnZlckJlYXJlclByb3ZpZGVyLnByb3RvdHlwZS5yZWZyZXNoQmVhcmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2IsIF9jLCBfZDtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9lKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9lLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaCh0aGlzLnRva2VuUGF0aCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeyBBY2NlcHQ6IFwidGV4dC9wbGFpbjsgYXBwbGljYXRpb24vanNvblwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdDogJ21hbnVhbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZTogJ25vLWNhY2hlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBcInNhbWUtb3JpZ2luXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Uuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLnN0YXR1cyA9PT0gMzAyIHx8ICghcmVzLnN0YXR1cyAmJiByZXMudHlwZSA9PT0gXCJvcGFxdWVyZWRpcmVjdFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlciBzZXNzaW9uIHRpbWVkIG91dCBhbmQgc2VydmVyIHdhbnRzIHRvIHJlZGlyZWN0IGVudGlyZSBwYWdlIHRvIGxvZ2luIHBhZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRpbWUgdG8gcmVsb2FkIGN1cnJlbnQgcGFnZSB0byBmb3JjZSBhIHJlZGlyZWN0IG9mIHRoZSBlbnRpcmUgcGFnZSBpbnN0ZWFkIGZvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ganVzdCByZWRpcmVjdGluZyB0byAvYXBpL3Rva2VuIG9yIHdoYXRldmVyLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERhdGUubm93KCkgLSB0aW1lT2ZQYWdlTG9hZCA+IDYwMDAwKSB7IC8vIHByb2hpYml0IGVuZGxlc3MgbG9vcCBvZiByZWxvYWRpbmcgc2VsZi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndhbnRzUmVkaXJlY3QgPSB0cnVlOyAvLyBTbyB0aGF0IGxpc3RlbmVycyB0byBvbmJlZm9yZXVubG9hZCBjb3VsZCBzaG93IGFsdGVybmF0ZSBtZXNzYWdlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVkaXJlY3Qgd2FudGVkLiBSZWxvYWQgcGFnZS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtZW1iZXJIYXNoTG9jYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBIdHRwRXJyb3IoMzAyLCBcIlJlZGlyZWN0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzLnN0YXR1cyAhPSAyMDApKSByZXR1cm4gWzMgLypicmVhayovLCAzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSBFcnJvci5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFwiSFRUUFwiICsgcmVzLnN0YXR1cyArIFwiIFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoRXJyb3IsIFt2b2lkIDAsIF9iICsgKF9lLnNlbnQoKSldKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QgPSB0aGlzLnRva2VuUmVzcG9uc2VNYXBwZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MudG9rZW5JbmZvID0gX2QuYXBwbHkodGhpcywgW19lLnNlbnQoKV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNhdmUodGhpcy50b2tlbklkLCB0aGlzLnRva2VuSW5mbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIgfTtcclxuZXhwb3J0IHZhciBpc29tb3JwaGljID0geyBmZXRjaDogZmV0Y2guYmluZChzZWxmKSwgYnRvYTogYnRvYS5iaW5kKHNlbGYpIH07XHJcbnZhciBLZWRCYWNrZW5kQ2xpZW50V2ViID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoS2VkQmFja2VuZENsaWVudFdlYiwgX3N1cGVyKTtcclxuICAgIGZ1bmN0aW9uIEtlZEJhY2tlbmRDbGllbnRXZWIoYXBpQmFzZVVybCwgcHJvdmlkZXJPclRva2VuUGF0aCwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGJlYXJlclByb3ZpZGVyID0gdHlwZW9mIHByb3ZpZGVyT3JUb2tlblBhdGggIT09ICdzdHJpbmcnID9cclxuICAgICAgICAgICAgcHJvdmlkZXJPclRva2VuUGF0aCA6XHJcbiAgICAgICAgICAgIG5ldyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcihwcm92aWRlck9yVG9rZW5QYXRoLCAob3B0aW9ucyAmJiBvcHRpb25zLnRva2VuUmVzcG9uc2VNYXBwZXIpIHx8IChmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHsgdG9rZW46IHgsIGV4cGlyZXM6IERhdGUubm93KCkgKyA1OSAqIDYwICogNjAgfSk7IH0pLCBvcHRpb25zICYmIG9wdGlvbnMudG9rZW5JZCk7XHJcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBpc29tb3JwaGljLCBiZWFyZXJQcm92aWRlciwgYXBpQmFzZVVybCkgfHwgdGhpcztcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gS2VkQmFja2VuZENsaWVudFdlYjtcclxufShLZWRCYWNrZW5kQ2xpZW50KSk7XHJcbmV4cG9ydCB7IEtlZEJhY2tlbmRDbGllbnRXZWIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZXhwb3J0ICogZnJvbSAnLi9qcy9kaXN0L2pzL2tlZC1iYWNrZW5kLWNsaWVudC13ZWInOyIsIi8qXHJcbmRlY2xhcmUgdmFyIEJ1ZmZlcjsgLy8gbm9kZSBidWlsdC1pblxyXG5cclxuXHJcbmZ1bmN0aW9uIGJhc2ljQXV0aEhlYWRlcih1c2VybmFtZSwgcGFzc3dvcmQpIHtcclxuICAgIHJldHVybiBcIkJhc2ljIFwiICsgbmV3IEJ1ZmZlcih1c2VybmFtZSArIFwiOlwiICsgcGFzc3dvcmQpLnRvU3RyaW5nKFwiYmFzZTY0XCIpO1xyXG59XHJcbiovXHJcbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBFbWl0dGVyIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9lbWl0dGVyJztcclxudmFyIFJlc3RDbGllbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBSZXN0Q2xpZW50KGlzb21vcnBoaWMsIGJhc2VVcmwsIG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmlzb21vcnBoaWMgPSBpc29tb3JwaGljO1xyXG4gICAgICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgICAgICB0aGlzLm51bU91dHN0YW5kaW5nT3BlcmF0aW9ucyA9IDA7XHJcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gbmV3IEVtaXR0ZXIodGhpcyk7XHJcbiAgICAgICAgdGhpcy5mZXRjaE9wdGlvbnMgPSB7IG1vZGU6ICdjb3JzJyB9O1xyXG4gICAgICAgIHRoaXMuYXV0aEhlYWRlciA9IG9wdGlvbnMuYmVhcmVyID9cclxuICAgICAgICAgICAgXCJCZWFyZXIgXCIgKyBvcHRpb25zLmJlYXJlciA6XHJcbiAgICAgICAgICAgIG9wdGlvbnMudXNlcm5hbWUgP1xyXG4gICAgICAgICAgICAgICAgXCJCYXNpYyBcIiArIGlzb21vcnBoaWMuYnRvYShvcHRpb25zLnVzZXJuYW1lICsgXCI6XCIgKyAob3B0aW9ucy5wYXNzd29yZCB8fCBcIlwiKSkgOlxyXG4gICAgICAgICAgICAgICAgbnVsbDtcclxuICAgICAgICB0aGlzLmJlYXJlclByb3ZpZGVyID0gb3B0aW9ucy5iZWFyZXJQcm92aWRlciB8fCBudWxsO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc3RDbGllbnQucHJvdG90eXBlLCBcInN0YXR1c1wiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGF0dXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uIChwYXRoLCBtZXRob2QsIGhlYWRlcnMsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICsrdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnM7XHJcbiAgICAgICAgdGhpcy5fc3RhdHVzLmRpc3BhdGNoKHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mZXRjaChwYXRoLCBtZXRob2QsIGhlYWRlcnMsIHF1ZXJ5LCBmZXRjaE9wdGlvbnMpXHJcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcclxuICAgICAgICAgICAgLS1fdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnM7XHJcbiAgICAgICAgICAgIF90aGlzLl9zdGF0dXMuZGlzcGF0Y2goX3RoaXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzO1xyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgLS1fdGhpcy5udW1PdXRzdGFuZGluZ09wZXJhdGlvbnM7XHJcbiAgICAgICAgICAgIF90aGlzLl9zdGF0dXMuZGlzcGF0Y2goX3RoaXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5fZmV0Y2ggPSBmdW5jdGlvbiAocGF0aCwgbWV0aG9kLCBoZWFkZXJzLCBxdWVyeSwgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeVN0ciwgX2EsIGF1dGhIZWFkZXIsIHRva2VuSW5mbywgYmVhcmVyUHJvdmlkZXIsIF9iLCBfYywgdXJsLCByZXMsIHd3d2F1dGgsIF9kO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2UpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2UubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZXRjaE9wdGlvbnMgJiYgZmV0Y2hPcHRpb25zLmNhY2hlID09PSAnbm8tY2FjaGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBiYWNrLWJ1dHRvbiBub3QgcmVzcGVjdGluZyBjYWNoZSBjb250cm9sIGluIENocm9tZS9PcGVyYS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCBhIHF1ZXJ5IHBhcmFtZXRlciB0byBmb3JjZSBhIGNhY2hlIGVudHJ5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeSA9IHRzbGliXzEuX19hc3NpZ24oe30sIHF1ZXJ5LCB7IG5vY2FjaGU6IGNyZWF0ZVVVSUQoKSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWVyeVN0ciA9IHF1ZXJ5ICYmIE9iamVjdC5rZXlzKHF1ZXJ5KS5maWx0ZXIoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gcXVlcnlba2V5XSAhPT0gdW5kZWZpbmVkOyB9KS5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIj1cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5W2tleV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJyYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzLCBhdXRoSGVhZGVyID0gX2EuYXV0aEhlYWRlciwgdG9rZW5JbmZvID0gX2EudG9rZW5JbmZvLCBiZWFyZXJQcm92aWRlciA9IF9hLmJlYXJlclByb3ZpZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISghYXV0aEhlYWRlciAmJiAhdG9rZW5JbmZvICYmIGJlYXJlclByb3ZpZGVyKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgYmVhcmVyUHJvdmlkZXIuZ2V0QmVhcmVyKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudG9rZW5JbmZvID0gdG9rZW5JbmZvID0gX2Uuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfZS5sYWJlbCA9IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRva2VuSW5mbykgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRva2VuSW5mby5leHBpcmVzIDwgRGF0ZS5ub3coKSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRva2VuIGV4cGlyZWQuIFJlZnJlc2ggaXQ6XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGJlYXJlclByb3ZpZGVyLnJlZnJlc2hCZWFyZXIoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy50b2tlbkluZm8gPSB0b2tlbkluZm8gPSBfZS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gNDtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dGhIZWFkZXIgPSBcIkJlYXJlciBcIiArIHRva2VuSW5mby50b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2UubGFiZWwgPSA1O1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW4gb25lIHdheSBvciBhbm90aGVyLCB3ZSd2ZSBjb25jbHVkZWQgYW4gQXV0aG9yaXphdGlvbiBoZWFkZXIgdG8gdXNlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXV0aEhlYWRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVycy5BdXRob3JpemF0aW9uID0gYXV0aEhlYWRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSB0aGlzLmJhc2VVcmwgKyBwYXRoICsgKHF1ZXJ5U3RyID8gXCI/XCIgKyBxdWVyeVN0ciA6IFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmlzb21vcnBoaWMuZmV0Y2godXJsLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLmZldGNoT3B0aW9ucywgeyBoZWFkZXJzOiBoZWFkZXJzLCBtZXRob2Q6IG1ldGhvZCB9LCBmZXRjaE9wdGlvbnMpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfZS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgPT0gNDAxICYmIHRoaXMuYmVhcmVyUHJvdmlkZXIpKSByZXR1cm4gWzMgLypicmVhayovLCA5XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd3d3YXV0aCA9IHJlcy5oZWFkZXJzLmdldChcInd3dy1hdXRoZW50aWNhdGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiR290IFwiICsgcmVzLnN0YXR1cyArIFwiIGZyb20gXCIgKyAodGhpcy5iYXNlVXJsICsgcGF0aCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh3d3dhdXRoICYmIC9CZWFyZXIvaS50ZXN0KHd3d2F1dGgpKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgOV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5iZWFyZXJQcm92aWRlci5yZWZyZXNoQmVhcmVyKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2QudG9rZW5JbmZvID0gX2Uuc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzLkF1dGhvcml6YXRpb24gPSBcIkJlYXJlciBcIiArIHRoaXMudG9rZW5JbmZvLnRva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmlzb21vcnBoaWMuZmV0Y2godXJsLCB0c2xpYl8xLl9fYXNzaWduKHt9LCB0aGlzLmZldGNoT3B0aW9ucywgeyBoZWFkZXJzOiBoZWFkZXJzLCBtZXRob2Q6IG1ldGhvZCB9LCBmZXRjaE9wdGlvbnMpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA4OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfZS5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9lLmxhYmVsID0gOTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDk6IHJldHVybiBbMiAvKnJldHVybiovLCByZXNdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocGF0aCwgcXVlcnksIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKHBhdGgsIFwiR0VUXCIsIHsgQWNjZXB0OiBcImFwcGxpY2F0aW9uL2pzb247IHRleHQvcGxhaW5cIiB9LCBxdWVyeSwgZmV0Y2hPcHRpb25zKTtcclxuICAgIH07XHJcbiAgICBSZXN0Q2xpZW50LnByb3RvdHlwZS5wb3N0ID0gZnVuY3Rpb24gKHBhdGgsIGRhdGEsIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZldGNoKHBhdGgsIFwiUE9TVFwiLCB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgICBcIkFjY2VwdFwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxyXG4gICAgICAgIH0sIG51bGwsIHRzbGliXzEuX19hc3NpZ24oe30sIGZldGNoT3B0aW9ucywgeyBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSB9KSk7XHJcbiAgICB9O1xyXG4gICAgUmVzdENsaWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKHBhdGgsIHF1ZXJ5LCBib2R5LCBmZXRjaE9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mZXRjaChwYXRoLCBcIkRFTEVURVwiLCB7IEFjY2VwdDogXCJhcHBsaWNhdGlvbi9qc29uOyB0ZXh0L3BsYWluXCIgfSwgcXVlcnksIHRzbGliXzEuX19hc3NpZ24oe30sIGZldGNoT3B0aW9ucywgeyBib2R5OiBib2R5IH0pKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gUmVzdENsaWVudDtcclxufSgpKTtcclxuZXhwb3J0IHsgUmVzdENsaWVudCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXN0Y2xpZW50LmpzLm1hcCIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICcuL3Jlc3RjbGllbnQnO1xyXG5pbXBvcnQgeyBhdm9pZFNpbXVsdGFub3VzQ2FsbHMgfSBmcm9tICcuL3V0aWxzJztcclxudmFyIEtlZEJlYXJlclByb3ZpZGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gS2VkQmVhcmVyUHJvdmlkZXIoaXNvbW9ycGhpYywgc3RvcmFnZSwgdG9rZW5JZCwgY2xpZW50SWQsIGNsaWVudFNlY3JldCwgdG9rZW5VcmwsIHRva2VuUXVlcnkpIHtcclxuICAgICAgICB0aGlzLmlzb21vcnBoaWMgPSBpc29tb3JwaGljO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZSA9IHN0b3JhZ2U7XHJcbiAgICAgICAgdGhpcy50b2tlbklkID0gdG9rZW5JZDtcclxuICAgICAgICB0aGlzLmNsaWVudElkID0gY2xpZW50SWQ7XHJcbiAgICAgICAgdGhpcy5jbGllbnRTZWNyZXQgPSBjbGllbnRTZWNyZXQ7XHJcbiAgICAgICAgdGhpcy50b2tlblVybCA9IHRva2VuVXJsO1xyXG4gICAgICAgIHRoaXMudG9rZW5RdWVyeSA9IHRva2VuUXVlcnk7XHJcbiAgICAgICAgdGhpcy50b2tlbkluZm8gPSB7IHRva2VuOiBudWxsLCBleHBpcmVzOiAwIH07XHJcbiAgICAgICAgdGhpcy5jbGllbnQgPSBuZXcgUmVzdENsaWVudChpc29tb3JwaGljLCBcIlwiLCB7XHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLmNsaWVudElkLFxyXG4gICAgICAgICAgICBwYXNzd29yZDogdGhpcy5jbGllbnRTZWNyZXRcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdldEJlYXJlciA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzLmdldEJlYXJlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICB0aGlzLnJlZnJlc2hCZWFyZXIgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5yZWZyZXNoQmVhcmVyLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG4gICAgS2VkQmVhcmVyUHJvdmlkZXIucHJvdG90eXBlLmdldEJlYXJlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF9hLCB0b2tlbiwgZXhwaXJlcywgX2IsIGVfMTtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXMudG9rZW5JbmZvLCB0b2tlbiA9IF9hLnRva2VuLCBleHBpcmVzID0gX2EuZXhwaXJlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuICYmIGV4cGlyZXMgPj0gRGF0ZS5ub3coKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLmxhYmVsID0gMTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnRyeXMucHVzaChbMSwgNCwgLCA2XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5zdG9yYWdlLmxvYWQodGhpcy5jbGllbnRJZCArIFwiL1wiICsgdGhpcy50b2tlbklkKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi50b2tlbkluZm8gPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRva2VuSW5mby50b2tlbiAmJiB0aGlzLnRva2VuSW5mby5leHBpcmVzID49IERhdGUubm93KCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy50b2tlbkluZm9dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJlZnJlc2hCZWFyZXIoKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB0aGlzLnRva2VuSW5mb107XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlXzEgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMucmVmcmVzaEJlYXJlcigpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbMiAvKnJldHVybiovXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmVhcmVyUHJvdmlkZXIucHJvdG90eXBlLnJlZnJlc2hCZWFyZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIHJldHJpZXMsIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRyaWVzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocmV0cmllcyA8IDYpKSByZXR1cm4gWzMgLypicmVhayovLCA1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZXRyaWV2aW5nIHRva2VuIGZvciBcIiArIHRoaXMudG9rZW5JZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuY2xpZW50LmdldCh0aGlzLnRva2VuVXJsLCB0aGlzLnRva2VuUXVlcnksIHsgY2FjaGU6ICdyZWxvYWQnIH0pXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcyA9IF9jLnNlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiR290IFwiICsgcmVzLnN0YXR1cyArIFwiIFwiICsgcmVzLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgX2EgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnRva2VuSW5mbyA9IChfYi50b2tlbiA9IF9jLnNlbnQoKSwgX2IuZXhwaXJlcyA9IERhdGUubm93KCkgKyA1OSAqIDYwICogMTAwMCwgX2IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdvdCB0b2tlbiBmb3IgXCIgKyB0aGlzLnRva2VuSWQgKyBcIjogXCIgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnRva2VuSW5mbykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2F2ZSh0aGlzLmNsaWVudElkICsgXCIvXCIgKyB0aGlzLnRva2VuSWQsIHRoaXMudG9rZW5JbmZvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHRoaXMudG9rZW5JbmZvXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsrcmV0cmllcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcmV0cmlldmUgdG9rZW4gZm9yIFwiICsgSlNPTi5zdHJpbmdpZnkodGhpcy50b2tlbklkKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBLZWRCZWFyZXJQcm92aWRlcjtcclxufSgpKTtcclxuZXhwb3J0IHsgS2VkQmVhcmVyUHJvdmlkZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2VkLWJlYXJlci1wcm92aWRlci5qcy5tYXAiLCJ2YXIgRG9jdW1lbnRBY2Nlc3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEb2N1bWVudEFjY2VzcyhhY2Nlc3NDbGFpbVR5cGUsIGFjY2Vzc0NsYWltVmFsdWUsIHJpZ2h0KSB7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NDbGFpbVR5cGUgPSBhY2Nlc3NDbGFpbVR5cGU7XHJcbiAgICAgICAgdGhpcy5hY2Nlc3NDbGFpbVZhbHVlID0gYWNjZXNzQ2xhaW1WYWx1ZTtcclxuICAgICAgICB0aGlzLnJpZ2h0ID0gcmlnaHQ7XHJcbiAgICB9XHJcbiAgICBEb2N1bWVudEFjY2Vzcy5mcm9tU3RyaW5nID0gZnVuY3Rpb24gKGFjKSB7XHJcbiAgICAgICAgaWYgKCFhYylcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgdmFyIHNwbGl0ID0gYWMuc3BsaXQoJzonKTtcclxuICAgICAgICBpZiAoc3BsaXQubGVuZ3RoIDwgMylcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhY2Nlc3Mgc3RyaW5nOiBcIiArIGFjKTtcclxuICAgICAgICB2YXIgY2xhaW1UeXBlID0gRG9jdW1lbnRBY2Nlc3MudW5lc2NhcGUoc3BsaXRbMF0pO1xyXG4gICAgICAgIHZhciBjbGFpbVZhbHVlID0gRG9jdW1lbnRBY2Nlc3MudW5lc2NhcGUoc3BsaXRbMV0pO1xyXG4gICAgICAgIHZhciByaWdodCA9IHNwbGl0WzJdO1xyXG4gICAgICAgIGlmIChyaWdodCAhPT0gJ1InICYmIHJpZ2h0ICE9PSAnVycgJiYgcmlnaHQgIT09ICdTJylcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBhY2Nlc3Mgc3RyaW5nOiBcIiArIGFjKTtcclxuICAgICAgICByZXR1cm4gbmV3IERvY3VtZW50QWNjZXNzKGNsYWltVHlwZSwgY2xhaW1WYWx1ZSwgcmlnaHQpO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50QWNjZXNzLmVzY2FwZSA9IGZ1bmN0aW9uIChhY2Nlc3NDb21wb25lbnQpIHtcclxuICAgICAgICByZXR1cm4gYWNjZXNzQ29tcG9uZW50LnJlcGxhY2UoL1xcJS9nLCBcIiUyNVwiKS5yZXBsYWNlKC9cXDovZywgXCIlM0FcIik7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRBY2Nlc3MudW5lc2NhcGUgPSBmdW5jdGlvbiAoYWNjZXNzQ29tcG9uZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGFjY2Vzc0NvbXBvbmVudC5yZXBsYWNlKC9cXCUzQS9nLCBcIjpcIikucmVwbGFjZSgvXFwlMjUvZywgXCIlXCIpO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50QWNjZXNzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gRG9jdW1lbnRBY2Nlc3MuZXNjYXBlKHRoaXMuYWNjZXNzQ2xhaW1UeXBlKSArIFwiOlwiICtcclxuICAgICAgICAgICAgRG9jdW1lbnRBY2Nlc3MuZXNjYXBlKHRoaXMuYWNjZXNzQ2xhaW1WYWx1ZSkgKyBcIjpcIiArXHJcbiAgICAgICAgICAgIHRoaXMucmlnaHQ7XHJcbiAgICB9O1xyXG4gICAgRG9jdW1lbnRBY2Nlc3MuZnJvbVN0cmluZ0FycmF5ID0gZnVuY3Rpb24gKGFjbCkge1xyXG4gICAgICAgIHJldHVybiBhY2xcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYWMpIHsgcmV0dXJuIERvY3VtZW50QWNjZXNzLmZyb21TdHJpbmcoYWMpOyB9KVxyXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhYykgeyByZXR1cm4gYWM7IH0pO1xyXG4gICAgfTtcclxuICAgIERvY3VtZW50QWNjZXNzLnRvU3RyaW5nQXJyYXkgPSBmdW5jdGlvbiAoYWNsKSB7XHJcbiAgICAgICAgcmV0dXJuIGFjbC5tYXAoZnVuY3Rpb24gKGFjKSB7IHJldHVybiBhYy50b1N0cmluZygpOyB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gRG9jdW1lbnRBY2Nlc3M7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IERvY3VtZW50QWNjZXNzIH07XHJcbmV4cG9ydCBmdW5jdGlvbiBoYXNBY2Nlc3MoYWNsLCB1c2VyQ2xhaW1zLCByZXF1ZXN0ZWRSaWdodCkge1xyXG4gICAgaWYgKHVzZXJDbGFpbXMuc29tZShmdW5jdGlvbiAoY2xhaW0pIHsgcmV0dXJuIGNsYWltLnR5cGUgPT09ICdyb2xlJyAmJiBjbGFpbS52YWx1ZSA9PT0gXCJBRE1JTlwiOyB9KSlcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIHJldHVybiBhY2wuc29tZShmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgIHJldHVybiB1c2VyQ2xhaW1zLnNvbWUoZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEuYWNjZXNzQ2xhaW1UeXBlID09PSBjLnR5cGUgJiZcclxuICAgICAgICAgICAgICAgIGEuYWNjZXNzQ2xhaW1WYWx1ZSA9PT0gYy52YWx1ZSAmJiAoKGEucmlnaHQgPT09ICdSJyAmJiByZXF1ZXN0ZWRSaWdodCA9PT0gJ1InKSB8fFxyXG4gICAgICAgICAgICAgICAgKGEucmlnaHQgPT09ICdXJyAmJiBbJ1InLCAnVyddLmluZGV4T2YocmVxdWVzdGVkUmlnaHQpID49IDApIHx8XHJcbiAgICAgICAgICAgICAgICAoYS5yaWdodCA9PT0gJ1MnKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hY2Nlc3MtY29udHJvbC5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG52YXIgSHR0cEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoSHR0cEVycm9yLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gSHR0cEVycm9yKGNvZGUsIG1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBcIkhUVFBcIiArIGNvZGUgKyBcIiBcIiArIG1lc3NhZ2UpIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgX3RoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbiAgICAgICAgX3RoaXMubmFtZSA9IFwiaHR0cFwiICsgY29kZTtcclxuICAgICAgICBfdGhpcy5tZXNzYWdlID0gXCJIVFRQXCIgKyBjb2RlICsgXCIgXCIgKyBtZXNzYWdlO1xyXG4gICAgICAgIHJldHVybiBfdGhpcztcclxuICAgIH1cclxuICAgIHJldHVybiBIdHRwRXJyb3I7XHJcbn0oRXJyb3IpKTtcclxuZXhwb3J0IHsgSHR0cEVycm9yIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHAtZXJyb3IuanMubWFwIiwiaW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tIFwidHNsaWJcIjtcclxuaW1wb3J0IHsgUmVzdENsaWVudCB9IGZyb20gJy4vcmVzdGNsaWVudCc7XHJcbmV4cG9ydCAqIGZyb20gJy4vdXRpbHMnO1xyXG5leHBvcnQgeyBLZWRCZWFyZXJQcm92aWRlciB9IGZyb20gJy4va2VkLWJlYXJlci1wcm92aWRlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4vYWNjZXNzLWNvbnRyb2wnO1xyXG5leHBvcnQgeyBSZXN0Q2xpZW50IH07XHJcbmltcG9ydCB7IEh0dHBFcnJvciB9IGZyb20gJy4vaHR0cC1lcnJvcic7XHJcbmV4cG9ydCB7IEh0dHBFcnJvciB9O1xyXG5leHBvcnQgKiBmcm9tICcuL3Jlc3RjbGllbnQnO1xyXG47XHJcbnZhciBLZWRCYWNrZW5kQ2xpZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gS2VkQmFja2VuZENsaWVudChpc29tb3JwaGljLCBiZWFyZXJQcm92aWRlciwgYmFzZVVybCkge1xyXG4gICAgICAgIHRoaXMuaHR0cCA9IG5ldyBSZXN0Q2xpZW50KGlzb21vcnBoaWMsIGJhc2VVcmwsIHsgYmVhcmVyUHJvdmlkZXI6IGJlYXJlclByb3ZpZGVyIH0pO1xyXG4gICAgfVxyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZ2V0TXlDbGFpbXMgPSBmdW5jdGlvbiAodGFibGUsIGZldGNoT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0c2xpYl8xLl9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy5odHRwLmdldChcIm1lL2NsYWltcy9cIiArICh0YWJsZSB8fCBcIlwiKSwgbnVsbCwgZmV0Y2hPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAuZ2V0KHRhYmxlICsgXCIvXCIgKyBpZCwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUubGlzdCA9IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucywgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBxdWVyeSwgcmVzLCBfYSwgX2I7XHJcbiAgICAgICAgICAgIHJldHVybiB0c2xpYl8xLl9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYy5sYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSB0c2xpYl8xLl9fYXNzaWduKHt9LCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5tdXRhdGlvbnNPbkVtcHR5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkubXV0YXRpb25zT25FbXB0eSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMubXV0YXRpb25zT25FbXB0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5nZXQoXCJcIiArIHRhYmxlLCBxdWVyeSwgZmV0Y2hPcHRpb25zKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgPSBfYy5zZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHJlcy5zdGF0dXMgIT0gMjAwKSkgcmV0dXJuIFszIC8qYnJlYWsqLywgM107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gSHR0cEVycm9yLmJpbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iID0gW3ZvaWQgMCwgcmVzLnN0YXR1c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy50ZXh0KCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjogdGhyb3cgbmV3IChfYS5hcHBseShIdHRwRXJyb3IsIF9iLmNvbmNhdChbX2Muc2VudCgpXSkpKSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmpzb24oKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Muc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuYmF0Y2ggPSBmdW5jdGlvbiAocmVxcywgZmV0Y2hPcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIHRzbGliXzEuX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXMsIF9hLCBfYjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9jKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW9yZGVyIG9wZXJhdGlvbnMgc28gdGhhdCAnYWRkJ3MgY29tZSBmaXJzdCBhbmQgJ2RlbGV0ZSdzIGNvbWUgbGFzdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxcyA9IHJlcXMuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChyZXExLCByZXEyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVxMS5vcCA9PT0gJ2FkZCcgPyAtMSA6IHJlcTIub3AgPT09ICdhZGQnID8gMSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxMS5vcCA9PT0gJ2RlbGV0ZScgPyAxIDogcmVxMi5vcCA9PT0gJ2RlbGV0ZScgPyAtMSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmh0dHAucG9zdChcImJhdGNoXCIsIHJlcXMsIGZldGNoT3B0aW9ucyldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmRvID0gZnVuY3Rpb24gKHNjb3BlRm4pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJ1bm5lcjtcclxuICAgICAgICAgICAgcmV0dXJuIHRzbGliXzEuX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uZXIgPSBuZXcgQmF0Y2hSdW5uZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVGbihydW5uZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLmJhdGNoKHJ1bm5lci5tdXRhdGlvblJlcXVlc3RzKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUuZGVsZXRlUmVhbG0gPSBmdW5jdGlvbiAocmVhbG0pIHtcclxuICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlcywgX2EsIF9iO1xyXG4gICAgICAgICAgICByZXR1cm4gdHNsaWJfMS5fX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2MpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaHR0cC5kZWxldGUoXCJyZWFsbXMvXCIgKyByZWFsbSldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzID0gX2Muc2VudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShyZXMuc3RhdHVzICE9IDIwMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IEh0dHBFcnJvci5iaW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IFt2b2lkIDAsIHJlcy5zdGF0dXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXMudGV4dCgpXTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6IHRocm93IG5ldyAoX2EuYXBwbHkoSHR0cEVycm9yLCBfYi5jb25jYXQoW19jLnNlbnQoKV0pKSkoKTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbNCAvKnlpZWxkKi8sIHJlcy5qc29uKCldO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9jLnNlbnQoKV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0YWJsZSwgZG9jLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmFkZCh0YWJsZSwgZG9jKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgS2VkQmFja2VuZENsaWVudC5wcm90b3R5cGUucHV0ID0gZnVuY3Rpb24gKHRhYmxlLCBkb2MpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5wdXQodGFibGUsIGRvYyk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGRlbHRhRG9jLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnVwZGF0ZSh0YWJsZSwgaWQsIGRlbHRhRG9jLCBicmFuY2hJZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gKGJyYW5jaElkLCB0YXJnZXRCcmFuY2hJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRvKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLm1lcmdlKGJyYW5jaElkLCB0YXJnZXRCcmFuY2hJZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmNsZWFyQnJhbmNoID0gZnVuY3Rpb24gKGJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuY2xlYXJCcmFuY2goYnJhbmNoSWQpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodGFibGUsIGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZGVsZXRlKHRhYmxlLCBpZCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnNoYXJlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgYWNsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuc2hhcmUodGFibGUsIGlkLCBhY2wpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51bnNoYXJlID0gZnVuY3Rpb24gKHRhYmxlLCBpZCwgYWNsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5zaGFyZSh0YWJsZSwgaWQsIGFjbCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLmxpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIubGluayhzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS5saW5rMiA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldElkLCBsYWJlbCwgYnJhbmNoSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kbyhmdW5jdGlvbiAocikgeyByZXR1cm4gci5saW5rMihzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpOyB9KTtcclxuICAgIH07XHJcbiAgICBLZWRCYWNrZW5kQ2xpZW50LnByb3RvdHlwZS51bmxpbmsgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQsIGxhYmVsKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5saW5rKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCk7IH0pO1xyXG4gICAgfTtcclxuICAgIEtlZEJhY2tlbmRDbGllbnQucHJvdG90eXBlLnVubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCB0YXJnZXRJZCwgbGFiZWwsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZG8oZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIudW5saW5rMihzb3VyY2VUYWJsZSwgc291cmNlSWQsIGxhYmVsLCB0YXJnZXRJZCwgYnJhbmNoSWQpOyB9KTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gS2VkQmFja2VuZENsaWVudDtcclxufSgpKTtcclxuZXhwb3J0IHsgS2VkQmFja2VuZENsaWVudCB9O1xyXG52YXIgQmF0Y2hSdW5uZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBCYXRjaFJ1bm5lcigpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMgPSBbXTtcclxuICAgIH1cclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAodGFibGUsIGRvYywgYnJhbmNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnYWRkJywgdGFibGU6IHRhYmxlLCBkb2M6IGRvYywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5wdXQgPSBmdW5jdGlvbiAodGFibGUsIGRvYykge1xyXG4gICAgICAgIGRvYyA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRvYyk7XHJcbiAgICAgICAgZGVsZXRlIGRvYy5hY2w7IC8vIEZvcmJpZGRlbiB0byBzZW5kIGFjbCB3aXRoIHB1dCgpIGNhbGxzLlxyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdwdXQnLCB0YWJsZTogdGFibGUsIGRvYzogZG9jIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAodGFibGUsIGlkLCBkZWx0YURvYywgYnJhbmNoSWQpIHtcclxuICAgICAgICBkZWx0YURvYyA9IHRzbGliXzEuX19hc3NpZ24oe30sIGRlbHRhRG9jKTtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndXBkYXRlJywgdGFibGU6IHRhYmxlLCBpZDogaWQsIGRlbHRhRG9jOiBkZWx0YURvYywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIChicmFuY2hJZCwgdGFyZ2V0QnJhbmNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnbWVyZ2UnLCBicmFuY2hJZDogYnJhbmNoSWQsIHRhcmdldEJyYW5jaElkOiB0YXJnZXRCcmFuY2hJZCB9KTtcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUuY2xlYXJCcmFuY2ggPSBmdW5jdGlvbiAoYnJhbmNoSWQpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAnY2xlYXItYnJhbmNoJywgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAodGFibGUsIGlkKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ2RlbGV0ZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdzaGFyZScsIHRhYmxlOiB0YWJsZSwgaWQ6IGlkLCBhY2w6IGFjbCB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICBCYXRjaFJ1bm5lci5wcm90b3R5cGUudW5zaGFyZSA9IGZ1bmN0aW9uICh0YWJsZSwgaWQsIGFjbCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICd1bnNoYXJlJywgdGFibGU6IHRhYmxlLCBpZDogaWQsIGFjbDogYWNsIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIEJhdGNoUnVubmVyLnByb3RvdHlwZS5saW5rID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgdGFyZ2V0VGFibGUsIHRhcmdldElkLCBsYWJlbCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdsaW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldFRhYmxlOiB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLmxpbmsyID0gZnVuY3Rpb24gKHNvdXJjZVRhYmxlLCBzb3VyY2VJZCwgbGFiZWwsIHRhcmdldElkLCBicmFuY2hJZCkge1xyXG4gICAgICAgIHRoaXMubXV0YXRpb25SZXF1ZXN0cy5wdXNoKHsgb3A6ICdsaW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldElkOiB0YXJnZXRJZCwgbGFiZWw6IGxhYmVsLCBicmFuY2hJZDogYnJhbmNoSWQgfSk7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVubGluayA9IGZ1bmN0aW9uIChzb3VyY2VUYWJsZSwgc291cmNlSWQsIHRhcmdldFRhYmxlLCB0YXJnZXRJZCwgbGFiZWwpIHtcclxuICAgICAgICB0aGlzLm11dGF0aW9uUmVxdWVzdHMucHVzaCh7IG9wOiAndW5saW5rJywgc291cmNlVGFibGU6IHNvdXJjZVRhYmxlLCBzb3VyY2VJZDogc291cmNlSWQsIHRhcmdldFRhYmxlOiB0YXJnZXRUYWJsZSwgdGFyZ2V0SWQ6IHRhcmdldElkLCBsYWJlbDogbGFiZWwgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG4gICAgQmF0Y2hSdW5uZXIucHJvdG90eXBlLnVubGluazIgPSBmdW5jdGlvbiAoc291cmNlVGFibGUsIHNvdXJjZUlkLCBsYWJlbCwgdGFyZ2V0SWQsIGJyYW5jaElkKSB7XHJcbiAgICAgICAgdGhpcy5tdXRhdGlvblJlcXVlc3RzLnB1c2goeyBvcDogJ3VubGluaycsIHNvdXJjZVRhYmxlOiBzb3VyY2VUYWJsZSwgc291cmNlSWQ6IHNvdXJjZUlkLCB0YXJnZXRJZDogdGFyZ2V0SWQsIGxhYmVsOiBsYWJlbCwgYnJhbmNoSWQ6IGJyYW5jaElkIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBCYXRjaFJ1bm5lcjtcclxufSgpKTtcclxuZXhwb3J0IHsgQmF0Y2hSdW5uZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBUZXJtLCBBY2FkZW1pY1llYXIgfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNjaG9vbE1vbWVudCB7XHJcbiAgYWNhZGVtaWNZZWFyOiBBY2FkZW1pY1llYXI7XHJcbiAgdGVybTogVGVybTtcclxuICB3ZWVrPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Rmlyc3RBbmRMYXN0V2Vla09mVGVybSh0ZXJtOiBUZXJtKSB7XHJcbiAgcmV0dXJuIHRlcm0gPT09ICdBVCcgP1xyXG4gICAgWzMyLCA1MV0gOlxyXG4gICAgWzEsIDI1XTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRlcm1TdGFydEFuZEVuZChub3c6IG1vbWVudC5Nb21lbnQpIDogbW9tZW50Lk1vbWVudFtdIHtcclxuICByZXR1cm4gbm93Lm1vbnRoKCkgPj0gNiA/IC8vIDYgPSBKdWx5IGluIEpTIERhdGVzIGFuZCBpbiBtb21lbnQgYXMgd2VsbCFcclxuICAgIFttb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgNywgMSkpLCBtb21lbnQobmV3IERhdGUobm93LnllYXIoKSwgMTEsIDMxKSldIDogLy8gYXVnMSAtIGRlYzMxXHJcbiAgICBbbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDAsIDEpKSwgbW9tZW50KG5ldyBEYXRlKG5vdy55ZWFyKCksIDYsIDMxKSldOyAvLyBqYW4xIC0ganVseTMxXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTY2hvb2xNb21lbnQobTogbW9tZW50Lk1vbWVudCk6IFNjaG9vbE1vbWVudCB7XHJcbiAgY29uc3QgdGhpc1llYXIgPSBtLnllYXIoKTtcclxuICBjb25zdCBpc0F1dHVtbiA9IG0ubW9udGgoKSA+PSA2O1xyXG4gIGNvbnN0IFthdXR1bW5ZZWFyLCBzcHJpbmdZZWFyXSA9IGlzQXV0dW1uID9cclxuICAgIFt0aGlzWWVhciwgdGhpc1llYXIgKyAxXSA6XHJcbiAgICBbdGhpc1llYXIgLSAxLCB0aGlzWWVhcl07XHJcbiAgY29uc3QgYWNhZGVtaWNZZWFyID0gJycgKyBhdXR1bW5ZZWFyICsgJy8nICsgc3ByaW5nWWVhcjtcclxuICBjb25zdCB0ZXJtID0gaXNBdXR1bW4gPyAnQVQnIDogJ1NUJztcclxuICBjb25zdCB3ZWVrID0gbS53ZWVrKCk7XHJcbiAgcmV0dXJuIHsgYWNhZGVtaWNZZWFyLCB0ZXJtLCB3ZWVrIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRZZWFyKGFZZWFyOiBBY2FkZW1pY1llYXIsIG51bVllYXJzVG9BZGQ6IG51bWJlcik6IEFjYWRlbWljWWVhciB7XHJcbiAgcmV0dXJuIGFZZWFyLnNwbGl0KCcvJylcclxuICAgIC5tYXAoeWVhclN0ciA9PiBwYXJzZUludCh5ZWFyU3RyKSArIG51bVllYXJzVG9BZGQpXHJcbiAgICAubWFwKHllYXIgPT4gJycgKyB5ZWFyKVxyXG4gICAgLmpvaW4oJy8nKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5leHRBY2FkZW1pY1llYXIoYVllYXI6IEFjYWRlbWljWWVhcik6IEFjYWRlbWljWWVhciB7XHJcbiAgcmV0dXJuIGFkZFllYXIoYVllYXIsIDEpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcHJldkFjYWRlbWljWWVhcihhWWVhcjogQWNhZGVtaWNZZWFyKTogQWNhZGVtaWNZZWFyIHtcclxuICByZXR1cm4gYWRkWWVhcihhWWVhciwgLTEpO1xyXG59XHJcbiIsIi8qIFJFRkFDVE9SOiBNb3ZlIHRoaXMgY29tcG9uZW50IG91dHNpZGUgY291cnNlYnVpbGRlciFcclxuICAgVGhpcyBpcyBhIGdlbmVyYWwtcHVycG9zZSBjb21wb25lbnRcclxuKi9cclxuXHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdGl0bGU6IHN0cmluZyB8IEpTWC5FbGVtZW50O1xyXG4gIGNsYXNzTmFtZT86IHN0cmluZztcclxuICBoZWFkZXJDbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgY29udGVudENsYXNzTmFtZT86IHN0cmluZztcclxuICBoZWFkZXJPcGVuPzogYm9vbGVhbjtcclxuICBvbk9wZW5DbG9zZT86IChiZWNhbWVPcGVuOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIGNoaWxkcmVuO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGhlYWRlck9wZW46IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBPcGVuQ2xvc2VCb3ggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGhlYWRlck9wZW46IHByb3BzLmhlYWRlck9wZW4gfHwgZmFsc2VcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIChuZXh0UHJvcHM6IFByb3BzKSB7XHJcbiAgICBpZiAobmV4dFByb3BzLmhlYWRlck9wZW4gIT09IHRoaXMucHJvcHMuaGVhZGVyT3Blbikge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtoZWFkZXJPcGVuOiBuZXh0UHJvcHMuaGVhZGVyT3Blbn0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyB0aXRsZSwgY2xhc3NOYW1lLCBjaGlsZHJlbiwgaGVhZGVyQ2xhc3NOYW1lLCBjb250ZW50Q2xhc3NOYW1lIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyBoZWFkZXJPcGVuIH0gPSB0aGlzLnN0YXRlO1xyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17KGNsYXNzTmFtZXx8JycpICsgXCIgb3BlbkNsb3NlXCIgKyAoaGVhZGVyT3BlbiA/IFwiIG9wZW5cIiA6IFwiXCIpfT5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkhlYWRlclwiICsgKGhlYWRlckNsYXNzTmFtZSA/IFwiIFwiICsgaGVhZGVyQ2xhc3NOYW1lIDogXCJcIil9XHJcbiAgICAgICAgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHMub25PcGVuQ2xvc2UpIHRoaXMucHJvcHMub25PcGVuQ2xvc2UoIXRoaXMuc3RhdGUuaGVhZGVyT3Blbik7XHJcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaGVhZGVyT3BlbjogIXRoaXMuc3RhdGUuaGVhZGVyT3BlbiB9KTtcclxuICAgICAgICB9fSA+XHJcbiAgICAgICAge3RpdGxlfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9e1wib3BlbkNvbnRlbnRcIiArIChjb250ZW50Q2xhc3NOYW1lID8gXCIgXCIgKyBjb250ZW50Q2xhc3NOYW1lIDogXCJcIil9PlxyXG4gICAgICAgIHtjaGlsZHJlbn1cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj47XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XHJcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vdmFsdWVcIjtcclxudmFyIEVtaXR0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhFbWl0dGVyLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gRW1pdHRlcihpbml0aWFsVmFsdWUpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmVycyA9IF90aGlzLnN1YnNjcmliZXJzLmZpbHRlcihmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IF9hWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzICE9PSBvYnNlcnZlcjtcclxuICAgICAgICAgICAgICAgIH0pOyB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmVycy5wdXNoKFtvYnNlcnZlciwgc3Vic2NyaXB0aW9uXSk7XHJcbiAgICAgICAgICAgIGlmIChfdGhpcy5lcnJvcilcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIF90aGlzLmVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihfdGhpcy52YWx1ZSwgdW5kZWZpbmVkLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xyXG4gICAgICAgIH0pIHx8IHRoaXM7XHJcbiAgICAgICAgX3RoaXMuc3Vic2NyaWJlcnMgPSBbXTtcclxuICAgICAgICBfdGhpcy52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcclxuICAgICAgICByZXR1cm4gX3RoaXM7XHJcbiAgICB9XHJcbiAgICBFbWl0dGVyLnByb3RvdHlwZS5kaXNwYXRjaCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmVycm9yID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoKCk7XHJcbiAgICB9O1xyXG4gICAgRW1pdHRlci5wcm90b3R5cGUuZGlzcGF0Y2hFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcclxuICAgICAgICB0aGlzLl9kaXNwYXRjaCgpO1xyXG4gICAgfTtcclxuICAgIEVtaXR0ZXIucHJvdG90eXBlLl9kaXNwYXRjaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2FbMF0sIHN1YnNjcmlwdGlvbiA9IF9hWzFdO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIoX3RoaXMudmFsdWUsIF90aGlzLmVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVyciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBFbWl0dGVyO1xyXG59KFZhbHVlKSk7XHJcbmV4cG9ydCB7IEVtaXR0ZXIgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1pdHRlci5qcy5tYXAiLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBpbml0TWFwTWV0aG9kIH0gZnJvbSBcIi4vbWFwXCI7XHJcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tIFwiLi9jb2xsZWN0aW9uXCI7XHJcbnZhciBWYWx1ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgIHRzbGliXzEuX19leHRlbmRzKFZhbHVlLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gVmFsdWUoc3Vic2NyaWJlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIHN1YnNjcmliZSkgfHwgdGhpcztcclxuICAgIH1cclxuICAgIFZhbHVlLmZyb20gPSBmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgIGlmICh4LnN1YnNjcmliZSlcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWYWx1ZShmdW5jdGlvbiAocykgeyByZXR1cm4geC5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlZhbHVlLmZyb20oKSBjYW4gb25seSB0YWtlIG9ic2VydmFibGVzXCIpO1xyXG4gICAgfTtcclxuICAgIFZhbHVlLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHN1YnNjaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFZhbHVlLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZm4pIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgVmFsdWUoZnVuY3Rpb24gKG9ic2VydmVyKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlLCBlcnJvciwgc3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnJvcilcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChmbih2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlcih2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIFZhbHVlLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiAocHJlZml4KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByZWZpeCwgeCk7XHJcbiAgICAgICAgICAgIHJldHVybiB4O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFZhbHVlLnByb3RvdHlwZS50b0NvbGxlY3Rpb24gPSBmdW5jdGlvbiAobWFwcGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIF90aGlzLm1hcChtYXBwZXIpLnN1YnNjcmliZShzKTsgfSk7XHJcbiAgICB9O1xyXG4gICAgVmFsdWUucHJvdG90eXBlLmNvbWJpbmVMYXRlc3QgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBuZXcgVmFsdWUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbbnVsbCwgbnVsbF07XHJcbiAgICAgICAgICAgIHZhciBteVN1YnNjcmlwdGlvbiwgb3RoZXJTdWJzY3JpcHRpb247XHJcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG15U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb3RoZXJTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgbXlTdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKGl0ZW1zLCBlcnJvciwgcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFsdWVzWzBdID0gaXRlbXM7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzWzFdICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlcywgbnVsbCwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG90aGVyU3Vic2NyaXB0aW9uID0gb3RoZXIuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHMudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhbHVlc1sxXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1swXSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcih2YWx1ZXMsIG51bGwsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIFZhbHVlLnByb3RvdHlwZS5zd2l0Y2hNYXAgPSBmdW5jdGlvbiAobWFwcGVyKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgICAgICB2YXIgbWFwcGVkU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgICAgIHZhciByZXR1cm5lZFN1YnNjcmlwdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcHBlZFN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoaXRlbSwgZXJyb3IsIHMpIHtcclxuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IHM7XHJcbiAgICAgICAgICAgICAgICBpZiAobWFwcGVkU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgcmV0dXJuZWRTdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGVPclZhbHVlID0gbWFwcGVyKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZU9yVmFsdWUgJiYgdHlwZW9mIG9ic2VydmFibGVPclZhbHVlLnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwcGVkU3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZU9yVmFsdWUuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwZWRTdWJzY3JpcHRpb24gPSBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyKHZhbHVlLCBlcnJvciwgcmV0dXJuZWRTdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihvYnNlcnZhYmxlT3JWYWx1ZSwgbnVsbCwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJldHVybmVkU3Vic2NyaXB0aW9uO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBWYWx1ZTtcclxufShPYnNlcnZhYmxlKSk7XHJcbmV4cG9ydCB7IFZhbHVlIH07XHJcblZhbHVlLnByb3RvdHlwZS5tYXAgPSBpbml0TWFwTWV0aG9kKFZhbHVlKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsdWUuanMubWFwIiwidmFyIE9ic2VydmFibGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvL3N0YXRpYyBnZXQgW1N5bWJvbC5zcGVjaWVzXSgpIHsgcmV0dXJuIHRoaXM7IH1cclxuICAgIGZ1bmN0aW9uIE9ic2VydmFibGUoX3N1YnNjcmliZSkge1xyXG4gICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IF9zdWJzY3JpYmU7XHJcbiAgICB9XHJcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKGZ1bmN0aW9uIChpdGVtcywgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihpdGVtcywgZXJyb3IsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIobnVsbCwgZXJyLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyKG51bGwsIGVycm9yLCB7IHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoKSB7IH0gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBPYnNlcnZhYmxlO1xyXG59KCkpO1xyXG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiXHJcbmV4cG9ydCBjb25zdCBLRURfTkFNRVNQQUNFID0gXCJLRURcIjtcclxuXHJcbmRlY2xhcmUgdmFyIEtFRDogYW55O1xyXG5cclxudmFyIHJlc3VsdCA9IHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnID8ge30gOiBLRUQ7XHJcblxyXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEtFRCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHdpbmRvd1tLRURfTkFNRVNQQUNFXSA9IHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xyXG4iLCJpbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcIi4vb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQgeyBpbml0TWFwTWV0aG9kIH0gZnJvbSBcIi4vbWFwXCI7XHJcbmltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4vdmFsdWVcIjtcclxuaW1wb3J0IHsgRW1pdHRlciB9IGZyb20gXCIuL2VtaXR0ZXJcIjtcclxudmFyIENvbGxlY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICB0c2xpYl8xLl9fZXh0ZW5kcyhDb2xsZWN0aW9uLCBfc3VwZXIpO1xyXG4gICAgZnVuY3Rpb24gQ29sbGVjdGlvbihzdWJzY3JpYmUpIHtcclxuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgc3Vic2NyaWJlKSB8fCB0aGlzO1xyXG4gICAgfVxyXG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUuX21hcCA9IGZ1bmN0aW9uIChtYXBwZXIpIHtcclxuICAgICAgICB0aHJvdyBcIm1peGVkaW5cIjtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLmZyb20gPSBmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgIGlmICh4LnN1YnNjcmliZSlcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xsZWN0aW9uKGZ1bmN0aW9uIChzKSB7IHJldHVybiB4LnN1YnNjcmliZShzKTsgfSk7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcclxuICAgICAgICAgICAgdmFyIGVtaXR0ZXJfMSA9IG5ldyBFbWl0dGVyKHgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb24oZnVuY3Rpb24gKHMpIHsgcmV0dXJuIGVtaXR0ZXJfMS5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYnNlcnZhYmxlQ29sbGVjdGlvbi5mcm9tKCkgY2FuIG9ubHkgdGFrZSBhcnJheXMgb3Igb2JzZXJ2YWJsZXNcIik7XHJcbiAgICB9O1xyXG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7IHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuIG1hcHBlcihpdGVtKTsgfSk7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmZsYXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgaXRlbXMpOyB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hcChmdW5jdGlvbiAoaXRlbXMpIHsgcmV0dXJuIGl0ZW1zLmZpbHRlcihmaWx0ZXIpOyB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5jb25jYXQgPSBmdW5jdGlvbiAob3RoZXIpIHtcclxuICAgICAgICByZXR1cm4gQ29sbGVjdGlvbi5mcm9tKHRoaXMudG9WYWx1ZSgpLmNvbWJpbmVMYXRlc3Qob3RoZXIpLm1hcChmdW5jdGlvbiAoX2EpIHtcclxuICAgICAgICAgICAgdmFyIG1lID0gX2FbMF0sIG90aGVyID0gX2FbMV07XHJcbiAgICAgICAgICAgIHJldHVybiBtZS5jb25jYXQob3RoZXIpO1xyXG4gICAgICAgIH0pKTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5vcmRlckJ5ID0gZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChhcnJheSkgeyByZXR1cm4gYXJyYXkuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHZhciBhUHJvcCA9IGEgJiYgYVtwcm9wXTtcclxuICAgICAgICAgICAgdmFyIGJQcm9wID0gYiAmJiBiW3Byb3BdO1xyXG4gICAgICAgICAgICByZXR1cm4gYVByb3AgPiBiUHJvcCA/IDEgOiBhUHJvcCA8IGJQcm9wID8gLTEgOiAwO1xyXG4gICAgICAgIH0pOyB9KS50b0NvbGxlY3Rpb24oZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHg7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLnRvVmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlKGZ1bmN0aW9uIChzKSB7IHJldHVybiBfdGhpcy5zdWJzY3JpYmUocyk7IH0pO1xyXG4gICAgfTtcclxuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlLmdyb3VwQnkgPSBmdW5jdGlvbiAocHJvcCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvVmFsdWUoKS5tYXAoZnVuY3Rpb24gKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIHZhciBydiA9IHt9O1xyXG4gICAgICAgICAgICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHJ2W2l0ZW1bcHJvcF1dIHx8IChydltpdGVtW3Byb3BdXSA9IFtdKTtcclxuICAgICAgICAgICAgICAgIGxpc3QucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBydjtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBDb2xsZWN0aW9uLnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50b1ZhbHVlKCkubWFwKGZ1bmN0aW9uIChhcnIpIHsgcmV0dXJuIGFyclswXTsgfSk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIENvbGxlY3Rpb247XHJcbn0oT2JzZXJ2YWJsZSkpO1xyXG5leHBvcnQgeyBDb2xsZWN0aW9uIH07XHJcbkNvbGxlY3Rpb24ucHJvdG90eXBlLl9tYXAgPSBpbml0TWFwTWV0aG9kKENvbGxlY3Rpb24pO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsZWN0aW9uLmpzLm1hcCIsIlxyXG5leHBvcnQgY29uc3QgS0VEX05BTUVTUEFDRSA9IFwiS0VEXCI7XHJcblxyXG5kZWNsYXJlIHZhciBLRUQ6IGFueTtcclxuXHJcbnZhciByZXN1bHQgPSB0eXBlb2YgS0VEID09PSAndW5kZWZpbmVkJyA/IHt9IDogS0VEO1xyXG5cclxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBLRUQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB3aW5kb3dbS0VEX05BTUVTUEFDRV0gPSByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJlc3VsdDtcclxuIiwiaW1wb3J0IHsgRURTQ291cnNlLCBFRFNBc3Nlc3NtZW50LCBFRFNTdHVkeVBsYW4sIEVEU1N0dWRlbnRGdXR1cmVBYmlsaXR5LCBFRFNTdHVkZW50IH0gZnJvbSAnLi4vY29udHJhY3RzL2Vkcyc7XHJcbmltcG9ydCB7IFJlc3RDbGllbnQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IElzb21vcnBoaWNFbnYsIEJlYXJlclByb3ZpZGVyLCBIdHRwRXJyb3IgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IFNjaG9vbE1vbWVudCB9IGZyb20gJy4uL3V0aWxzL3NjaG9vbC1tb21lbnQnO1xyXG5pbXBvcnQgeyBTY2hvb2xUZXJtIH0gZnJvbSAnLi4vdXRpbHMvc2Nob29sLXRlcm0nO1xyXG5pbXBvcnQgeyBkYXRlVGltZVJldml2ZXIsIEwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRWRzQ2xpZW50IHtcclxuICBodHRwOiBSZXN0Q2xpZW50O1xyXG4gIHVzZXJFbWFpbEdldHRlcjogKCk9PnN0cmluZztcclxuXHJcbiAgY29uc3RydWN0b3IgKFxyXG4gICAgaXNvbW9ycGhpYzogSXNvbW9ycGhpY0VudixcclxuICAgIGJhc2VVcmw6IHN0cmluZyxcclxuICAgIGJlYXJlclByb3ZpZGVyOiBCZWFyZXJQcm92aWRlcixcclxuICAgIHVzZXJFbWFpbEdldHRlcjogKCk9PnN0cmluZ1xyXG4gICkge1xyXG4gICAgdGhpcy5odHRwID0gbmV3IFJlc3RDbGllbnQgKGlzb21vcnBoaWMsIGJhc2VVcmwsIHtiZWFyZXJQcm92aWRlcn0pO1xyXG4gICAgdGhpcy51c2VyRW1haWxHZXR0ZXIgPSB1c2VyRW1haWxHZXR0ZXI7XHJcbiAgICB0aGlzLmdldEFjdGl2ZUNvdXJzZXMgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRBY3RpdmVDb3Vyc2VzKTtcclxuICAgIHRoaXMuZ2V0TGF0ZXN0QXNzZXNzbWVudHMgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRMYXRlc3RBc3Nlc3NtZW50cyk7XHJcbiAgICB0aGlzLmdldFN0dWRlbnRHb2FscyA9IGF2b2lkU2ltdWx0YW5vdXNDYWxscyh0aGlzLmdldFN0dWRlbnRHb2Fscyk7XHJcbiAgICB0aGlzLmdldFN0dWRlbnRGdXR1cmVBYmlsaXRpZXMgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRTdHVkZW50RnV0dXJlQWJpbGl0aWVzKTtcclxuICAgIHRoaXMuZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMgPSBhdm9pZFNpbXVsdGFub3VzQ2FsbHModGhpcy5nZXRUZWFjaGVyVHV0b3JTdHVkZW50cyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHByaXZhdGl6aW5nQ2FjaGVCdXN0KCkge1xyXG4gICAgcmV0dXJuIHt1c2VyOiB0aGlzLnVzZXJFbWFpbEdldHRlcigpfTtcclxuICB9XHJcblxyXG4vKipcclxuICAgKiBSZXRyaWV2ZSBhY3RpdmUgY291cnNlcyBmb3IgY3VycmVudCBsb2dnZWQgaW4gc3R1ZGVudC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBjb3Vyc2VDb2RlIFNob3J0LW5hbWUgb2YgdGhlIGNvdXJzZS4gT3B0aW9uYWwuXHJcbiAgICovXHJcbiAgYXN5bmMgZ2V0QWN0aXZlQ291cnNlcyhxOiB7Y291cnNlQ29kZT86IHN0cmluZywgcGVyaW9kTmFtZTogc3RyaW5nfSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xyXG4gICAgICBpZiAocSkge1xyXG4gICAgICAgIGlmIChxLmNvdXJzZUNvZGUpIHF1ZXJ5LkNvdXJzZUNvZGUgPSBxLmNvdXJzZUNvZGU7XHJcbiAgICAgICAgaWYgKHEucGVyaW9kTmFtZSkgcXVlcnkuUGVyaW9kTmFtZSA9IHEucGVyaW9kTmFtZTtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGFjdGl2ZWNvdXJzZXNcIiwgcXVlcnkpO1xyXG4gICAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgICByZXR1cm4ganNvbi5jb3Vyc2VzIGFzIEVEU0NvdXJzZVtdO1xyXG4gICAgfSBjYXRjaCAoZXgpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZyb20gRURTOiBcIiArIGV4KTtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKExgS3VuZGUgdHl2w6RyciBpbnRlIGxhZGRhIHRlcm1pbnNtw6VsIGVsbGVyIGF2a2xhcmFkZSBzdGVnIGZyw6VuIEVEUy4gRsO2cnPDtmsgaWdlbiBzZW5hcmUuLi5gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlIGxhdGVzdCBhc3Nlc3NtZW50cyBmb3IgY3VycmVudCBsb2dnZWQgaW4gdXNlci5cclxuICAgKiBcclxuICAgKiBAcGFyYW0gbGltaXQgT3B0aW9uYWwgbGltaXRcclxuICAgKi9cclxuICBhc3luYyBnZXRMYXRlc3RBc3Nlc3NtZW50cyhsaW1pdD86IG51bWJlcikge1xyXG4gICAgY29uc3QgcXVlcnk6YW55ID0gdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpO1xyXG4gICAgaWYgKCFpc05hTihsaW1pdCkpIHF1ZXJ5LkNvdW50ID0gbGltaXQ7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGFzc2Vzc21lbnRzXCIsIHF1ZXJ5KTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uYXNzZXNzbWVudHMgYXMgRURTQXNzZXNzbWVudFtdOyAgICBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHJpZXZlIHN0dWR5cGxhbnMgZm9yIGN1cnJlbnQgbG9nZ2VkLWluIHVzZXJcclxuICAgKi9cclxuICBhc3luYyBnZXRTdHVkZW50R29hbHMoKSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwic3R1ZGVudGdvYWxzXCIsIHRoaXMucHJpdmF0aXppbmdDYWNoZUJ1c3QoKSk7XHJcbiAgICBpZiAocmVzLnN0YXR1cyAhPSAyMDApIHRocm93IG5ldyBIdHRwRXJyb3IocmVzLnN0YXR1cywgYXdhaXQgcmVzLnRleHQoKSk7XHJcbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICAgIHJldHVybiBqc29uLnN0dWRlbnRHb2FscyBhcyBFRFNTdHVkeVBsYW5bXTsgICAgXHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRTdHVkZW50RnV0dXJlQWJpbGl0aWVzKCkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5odHRwLmdldChcInN0dWRlbnRGdXR1cmVBYmlsaXRpZXNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudEZ1dHVyZUFiaWxpdGllcyBhcyBFRFNTdHVkZW50RnV0dXJlQWJpbGl0eVtdO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0VGVhY2hlclR1dG9yU3R1ZGVudHMoKSB7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmh0dHAuZ2V0KFwidGVhY2hlcnR1dG9yc3R1ZGVudHNcIiwgdGhpcy5wcml2YXRpemluZ0NhY2hlQnVzdCgpKTtcclxuICAgIGlmIChyZXMuc3RhdHVzICE9IDIwMCkgdGhyb3cgbmV3IEh0dHBFcnJvcihyZXMuc3RhdHVzLCBhd2FpdCByZXMudGV4dCgpKTtcclxuICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXMuanNvbigpO1xyXG4gICAgcmV0dXJuIGpzb24uc3R1ZGVudHMgYXMgRURTU3R1ZGVudFtdO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVEU1BlcmlvZCB7XHJcbiAgcGVyaW9kOiBzdHJpbmc7XHJcbiAgdGVybTogJ0FUJyB8ICdTVCc7XHJcbiAgeWVhcjogbnVtYmVyO1xyXG4gIGNvbnN0cnVjdG9yIChwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm06IHN0cmluZyB8IFNjaG9vbE1vbWVudCkge1xyXG4gICAgaWYgKHR5cGVvZiBwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHRoaXMucGVyaW9kID0gcGVyaW9kU3RyaW5nT3JTY2hvb2xUZXJtO1xyXG4gICAgICB0aGlzLnRlcm0gPSB0aGlzLnBlcmlvZC5zdGFydHNXaXRoKCdIVCcpID8gJ0FUJyA6ICdTVCc7XHJcbiAgICAgIHRoaXMueWVhciA9IHBhcnNlSW50KHRoaXMucGVyaW9kLnN1YnN0cigyKSk7XHJcbiAgICAgIGlmIChpc05hTih0aGlzLnllYXIpKSB0aHJvdyBuZXcgRXJyb3IgKGBJbnZhbGlkIHBlcmlvZDogJHt0aGlzLnBlcmlvZH1gKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IHNjaG9vbFRlcm0gPSBuZXcgU2Nob29sVGVybShwZXJpb2RTdHJpbmdPclNjaG9vbFRlcm0pO1xyXG4gICAgICB0aGlzLnBlcmlvZCA9IChzY2hvb2xUZXJtLnRlcm0gPT09ICdBVCcgPyBcIkhUXCIgOiBcIlZUXCIpICsgc2Nob29sVGVybS55ZWFyO1xyXG4gICAgICB0aGlzLnRlcm0gPSBzY2hvb2xUZXJtLnRlcm07XHJcbiAgICAgIHRoaXMueWVhciA9IHNjaG9vbFRlcm0ueWVhcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldCBzY2hvb2xUZXJtICgpIDogU2Nob29sVGVybSB7XHJcbiAgICByZXR1cm4gbmV3IFNjaG9vbFRlcm0oe1xyXG4gICAgICBhY2FkZW1pY1llYXI6IHRoaXMudGVybSA9PT0gJ0FUJyA/XHJcbiAgICAgICAgYCR7dGhpcy55ZWFyfS8ke3RoaXMueWVhciArIDF9YCA6XHJcbiAgICAgICAgYCR7dGhpcy55ZWFyLTF9LyR7dGhpcy55ZWFyfWAsXHJcbiAgICAgIHRlcm06IHRoaXMudGVybVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiB0aGlzLnBlcmlvZDtcclxuICB9XHJcblxyXG4gIHZhbHVlT2YoKSB7XHJcbiAgICByZXR1cm4gdGhpcy55ZWFyICsgXCI6XCIgKyAodGhpcy50ZXJtID09PSAnU1QnID8gXCIxXCIgOiBcIjJcIik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VKc29uRGF0ZV9vbGQgKGpzb25EYXRlU3RyOiBzdHJpbmcpIDogRGF0ZSB7XHJcbiAgY29uc3QgZGF0ZSA9IGRhdGVUaW1lUmV2aXZlcihcIlwiLCBqc29uRGF0ZVN0cik7XHJcbiAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIEpTT04gZGF0ZSBzdHJpbmc6IFwiICsganNvbkRhdGVTdHIpO1xyXG4gIHJldHVybiBkYXRlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhdm9pZFNpbXVsdGFub3VzQ2FsbHM8VCxBPihtZXRob2Q6ICguLi5hcmdzOkFbXSk9PlByb21pc2U8VD4pIDogKC4uLmFyZ3M6QVtdKT0+UHJvbWlzZTxUPiB7XHJcbiAgbGV0IG9uZ29pbmdQcm9taXNlczoge1thcmdzSnNvbjogc3RyaW5nXTogUHJvbWlzZTxUPn0gPSB7fTtcclxuICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICBjb25zdCBhcmdzSnNvbiA9IEpTT04uc3RyaW5naWZ5KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XHJcbiAgICBpZiAoIW9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl0pIHtcclxuICAgICAgb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXSA9IG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpLnRoZW4ocmVzdWx0PT57XHJcbiAgICAgICAgZGVsZXRlIG9uZ29pbmdQcm9taXNlc1thcmdzSnNvbl07XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb25nb2luZ1Byb21pc2VzW2FyZ3NKc29uXTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIG9uQ2xpY2ssXHJcbiAgY2xhc3NOYW1lPyxcclxuICBzdHlsZT8sXHJcbiAgdGl0bGU/XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgUmVtb3ZlSXRlbSA9ICh7IG9uQ2xpY2ssIGNsYXNzTmFtZSwgc3R5bGUsIHRpdGxlIH06IFByb3BzKSA9PlxyXG5cclxuICA8ZGl2XHJcbiAgICB0aXRsZT17dGl0bGUgfHwgTGBSYWRlcmFgfVxyXG4gICAgY2xhc3NOYW1lPXtcInJlbW92ZUl0ZW0gXCIgKyAoY2xhc3NOYW1lIHx8IFwiXCIpfVxyXG4gICAgb25DbGljaz17b25DbGlja30gc3R5bGU9e3N0eWxlfSAvPlxyXG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdE1hcE1ldGhvZChjdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1hcHBlcikge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjdG9yKGZ1bmN0aW9uIChvYnNlcnZlcikgeyByZXR1cm4gX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh2YWx1ZSwgZXJyb3IsIHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpXHJcbiAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihtYXBwZXIodmFsdWUpLCBlcnJvciwgc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihudWxsLCBlcnIsIHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7IH0pO1xyXG4gICAgfTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIExpbmssIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IElDb3Vyc2VFZGl0b3JIb3N0IH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0XCI7XHJcbmltcG9ydCB7IENvdXJzZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgcmVhZEJsb2JBc1RleHQsIGFsbG93Q29weSwgcmVhZEJsb2JBc0RhdGFVcmwgfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgc2hvd0Vycm9yLCBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tIFwia2VkYmFja2VuZC9jbGllbnRcIjtcclxuaW1wb3J0IHsgaGFzQWNjZXNzIH0gZnJvbSBcIi4uLy4uLy4uL2FjY2Vzcy1jb250cm9sXCI7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuXHJcbnR5cGUgQ2FsbGJhY2sgPSAoKSA9PiB2b2lkO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICB0aXRsZTogc3RyaW5nLFxyXG4gIGFjdGl2ZVBhZ2U6IEJhbm5lck1lbnVJdGVtLFxyXG4gIGNhbGxiYWNrcz86IHsgW21lbnVOYW1lOiBzdHJpbmddOiBDYWxsYmFjayB9LFxyXG4gIHJvdXRlczogeyBbbWVudU5hbWU6IHN0cmluZ106IHN0cmluZyB9ICYgeyBmZWVkYmFjazogc3RyaW5nIH0sXHJcbiAgYmFja2dyb3VuZEltYWdlPzogc3RyaW5nLFxyXG4gIGlzVGVtcGxhdGU/LFxyXG4gIGhvc3Q/OiBJQ291cnNlRWRpdG9ySG9zdCxcclxuICBjb3Vyc2U/OiBDb3Vyc2UsXHJcbiAgb3JpZ0NvdXJzZT86IENvdXJzZVxyXG59XHJcblxyXG50eXBlIEJhbm5lck1lbnVJdGVtID1cclxuICBcImNvdXJzZUJ1aWxkZXJcIiB8XHJcbiAgXCJzdHVkZW50UGFnZVwiIHxcclxuICBcInRlbXBsYXRlQnVpbGRlclwiIHxcclxuICBcInN1YmplY3RzXCIgfFxyXG4gIFwic2Nob29sc1wiO1xyXG5cclxuY29uc3QgQWRtaW5NZW51SXRlbXMgPSBbXHJcbiAgeyBuYW1lOiBcInNjaG9vbHNcIiwgdGV4dDogTGBTa29sb3JgLCByb3V0ZTogXCIvc2Nob29sc1wiIH0sXHJcbiAgeyBuYW1lOiBcInN1YmplY3RzXCIsIHRleHQ6IExgw4RtbmVuYCwgcm91dGU6IFwiL3N1YmplY3RzXCIgfSxcclxuICAvL3tuYW1lOiBcInRlbXBsYXRlQnVpbGRlclwiLCB0ZXh0OiBMYE1hbGxieWdnYXJlbmAsIHJvdXRlOiBcIi9jb3Vyc2UtdGVtcGxhdGVzXCJ9LFxyXG5dXHJcblxyXG5jb25zdCBOb25BZG1pbk1lbnVJdGVtcyA9IFtcclxuICB7IG5hbWU6IFwiY291cnNlQnVpbGRlclwiLCB0ZXh0OiBMYEt1cnNieWdnYXJlbmAsIHJvdXRlOiBcIi9jb3Vyc2VzL25ld1wiIH0sXHJcbiAgeyBuYW1lOiBcInN0dWRlbnRQYWdlXCIsIHRleHQ6IExgRWxldnNpZGFgLCByb3V0ZTogXCJcIiB9LFxyXG4gIHsgbmFtZTogXCJmZWVkYmFja1wiLCB0ZXh0OiA8c3Bhbj48aSBjbGFzc05hbWU9XCJmYSBmYS1jb21tZW50aW5nLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+IEZlZWRiYWNrPC9zcGFuPiwgcm91dGU6IFwiaHR0cHM6Ly9rZy5rdW5za2Fwc3BvcnRlbi5zZS9rdXJzYnlnZ2FyZW4vXCIgfVxyXG5dXHJcblxyXG5cclxuYXN5bmMgZnVuY3Rpb24gb25Ecm9wSW1hZ2UoZXY6IFJlYWN0LkRyYWdFdmVudDxIVE1MRGl2RWxlbWVudD4sIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0LCBjb3Vyc2U6IENvdXJzZSwgb3JpZ0NvdXJzZTogQ291cnNlKSB7XHJcbiAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICBjb25zdCBmaWxlcyA9IGV2LmRhdGFUcmFuc2Zlci5maWxlcztcclxuICBsZXQgdXJsID0gbnVsbDtcclxuICBjb25zdCBpdGVtcyA9IEFycmF5LmZyb20oZXYuZGF0YVRyYW5zZmVyLml0ZW1zKTtcclxuICBpZiAoZmlsZXMubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3QgZmlsZSA9IGZpbGVzWzBdO1xyXG4gICAgaWYgKGZpbGUuc2l6ZSA+IDIgKiAxMDI0ICogMTAyNCkge1xyXG4gICAgICBzaG93RXJyb3IoTGBLYW4gaW50ZSBsYWRkYSB1cHAgYmlsZGVyIHN0w7ZycmUgw6RuIDIgTUJgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgLy91cmwgPSBhd2FpdCByZWFkQmxvYkFzRGF0YVVybChmaWxlKTtcclxuICAgIGNvbnN0IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcclxuICAgIGZvcm0uYXBwZW5kKFwiZmlsZXNcIiwgZmlsZSk7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5odHRwLmZldGNoKFxyXG4gICAgICAnd2ViLXVwbG9hZCcsXHJcbiAgICAgICdwdXQnLFxyXG4gICAgICB7fSxcclxuICAgICAge30sXHJcbiAgICAgIHtcclxuICAgICAgICBib2R5OiBmb3JtXHJcbiAgICAgIH0pO1xyXG4gICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCkge1xyXG4gICAgICBzaG93RXJyb3IoTGBLdW5kZSBpbnRlIGxhZGRhIHVwcCBmaWxlbiB0aWxsIEdvb2dsZSBTdG9yYWdlYCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHVybCA9IGF3YWl0IHJlcy50ZXh0KCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xyXG4gICAgICBpZiAoaXRlbS50eXBlLm1hdGNoKCdedGV4dC91cmktbGlzdCcpKSB7XHJcbiAgICAgICAgLy8gVVJJXHJcbiAgICAgICAgdXJsID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBpdGVtLmdldEFzU3RyaW5nKHJlc29sdmUpKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBpZiAodXJsID09IG51bGwpIHtcclxuICAgIHNob3dFcnJvcihMYEt1bmRlIGludGUgaGl0dGEgbsOlZ29uIGJpbGQgaSBpbm5laMOlbGxldGApO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBzZXRDb3Vyc2VJbWFnZShjb3Vyc2UsIG9yaWdDb3Vyc2UsIGhvc3QsIHVybCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRDb3Vyc2VJbWFnZShcclxuICBjb3Vyc2U6IENvdXJzZSxcclxuICBvcmlnQ291cnNlOiBDb3Vyc2UsXHJcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3QsXHJcbiAgdXJsOiBzdHJpbmdcclxuKSB7XHJcbiAgY29uc3QgaW1hZ2VJZCA9IGNyZWF0ZVVVSUQoKTtcclxuICBob3N0LnVwZGF0ZSh7XHJcbiAgICBpbWFnZUlkOiB7ICRzZXQ6IGltYWdlSWQgfSxcclxuICAgIGltYWdlczoge1xyXG4gICAgICAkc2V0OiBbe1xyXG4gICAgICAgIGlkOiBpbWFnZUlkLFxyXG4gICAgICAgIHVybCxcclxuICAgICAgICBhY2w6IFtcclxuICAgICAgICAgIGByb2xlOlVTRVI6UmAsXHJcbiAgICAgICAgICBgc2Nob29sUm9sZToke2Vudi5jdXJyZW50VXNlci5zY2hvb2x9L0VNUExPWUVFOlNgXHJcbiAgICAgICAgXSxcclxuICAgICAgICAkbWV0YTogJ2FkZCdcclxuICAgICAgfV1cclxuICAgIH1cclxuICB9KTtcclxufVxyXG5cclxuLyogVGhpcyB2ZXJzaW9uIGhhZCB0aGUgYnVnIHRoYXQgb2xkIGltYWdlcyB3ZXJlIG5vdCByZXBsYWNlZC5cclxuT25lIGNvdXJzZSBhdCBVcHBzYWxhIGNvbnRhaW5lZCAxMiBpbWFnZXMuXHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldENvdXJzZUltYWdlT2xkKFxyXG4gIGNvdXJzZTogQ291cnNlLFxyXG4gIG9yaWdDb3Vyc2U6IENvdXJzZSxcclxuICBob3N0OiBJQ291cnNlRWRpdG9ySG9zdCxcclxuICB1cmw6IHN0cmluZylcclxue1xyXG4gIGlmICghb3JpZ0NvdXJzZSB8fCAhb3JpZ0NvdXJzZS5pbWFnZUlkKSB7XHJcbiAgICBjb25zdCBpbWFnZUlkID0gY3JlYXRlVVVJRCgpO1xyXG4gICAgaG9zdC51cGRhdGUoe1xyXG4gICAgICBpbWFnZUlkOiB7ICRzZXQ6IGltYWdlSWQgfSxcclxuICAgICAgaW1hZ2VzOiB7XHJcbiAgICAgICAgJHB1c2g6IFt7XHJcbiAgICAgICAgICBpZDogaW1hZ2VJZCxcclxuICAgICAgICAgIHVybCxcclxuICAgICAgICAgIGFjbDogY291cnNlLmlzVGVtcGxhdGUgPyBbXCJyb2xlOlVTRVI6UlwiXSA6IFtcInJvbGU6VVNFUjpSXCIsIGBzY2hvb2xSb2xlOiR7ZW52LmN1cnJlbnRVc2VyLnNjaG9vbH0vRU1QTE9ZRUU6U2BdLFxyXG4gICAgICAgICAgJG1ldGE6ICdhZGQnXHJcbiAgICAgICAgfV1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFVwZGF0ZSBleGlzdGluZyBpbWFnZTpcclxuICAgIGNvbnN0IGltZ0lkeCA9IGNvdXJzZS5pbWFnZXMuZmluZEluZGV4KGltZyA9PiBpbWcuaWQgPT09IGNvdXJzZS5pbWFnZUlkKTtcclxuICAgIGlmIChpbWdJZHggPj0gMCkge1xyXG4gICAgICBjb25zdCBpbWFnZUVudGl0eSA9IGNvdXJzZS5pbWFnZXNbaW1nSWR4XTtcclxuICAgICAgaWYgKGNvdXJzZS5pc1RlbXBsYXRlKSB7XHJcbiAgICAgICAgLy8gVGVtcGxhdGVzOiBVcGRhdGUgdGhlIHRlbXBsYXRlIGltYWdlIGNvbnRlbnQ6XHJcbiAgICAgICAgaG9zdC51cGRhdGUoe1xyXG4gICAgICAgICAgaW1hZ2VzOiB7XHJcbiAgICAgICAgICAgICRzcGxpY2U6IFtbaW1nSWR4LCAxLCB7XHJcbiAgICAgICAgICAgICAgLi4uaW1hZ2VFbnRpdHksXHJcbiAgICAgICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgICAgICRtZXRhOiAndXBkYXRlJ1xyXG4gICAgICAgICAgICB9XV1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIFJlYWwgY291cnNlczogUmVwbGFjZSB3aXRoIGEgbmV3IGltYWdlXHJcbiAgICAgICAgY29uc3QgaW1hZ2VJZCA9IGNyZWF0ZVVVSUQoKTtcclxuICAgICAgICBob3N0LnVwZGF0ZSh7XHJcbiAgICAgICAgICBpbWFnZUlkOiB7ICRzZXQ6IGltYWdlSWQgfSxcclxuICAgICAgICAgIGltYWdlczoge1xyXG4gICAgICAgICAgICAkc3BsaWNlOiBbW2ltZ0lkeCwgMSwge1xyXG4gICAgICAgICAgICAgIGlkOiBpbWFnZUlkLFxyXG4gICAgICAgICAgICAgIHVybCxcclxuICAgICAgICAgICAgICBhY2w6IFtcclxuICAgICAgICAgICAgICAgIGByb2xlOlVTRVI6UmAsXHJcbiAgICAgICAgICAgICAgICBgc2Nob29sUm9sZToke2Vudi5jdXJyZW50VXNlci5zY2hvb2x9L0VNUExPWUVFOlNgXHJcbiAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAkbWV0YTogJ2FkZCdcclxuICAgICAgICAgICAgfV1dXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2hvd0Vycm9yKExgS3VuZGUgaW50ZSB1cHBkYXRlcmEgYmlsZGVuLmApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4qL1xyXG5cclxuZXhwb3J0IGNvbnN0IENvdXJzZUJhbm5lciA9IChwcm9wczogUHJvcHMpID0+IHtcclxuICBjb25zdCB7IHRpdGxlLCBpc1RlbXBsYXRlLCBob3N0LCBjb3Vyc2UsIG9yaWdDb3Vyc2UsIGJhY2tncm91bmRJbWFnZSwgYWN0aXZlUGFnZSB9ID0gcHJvcHM7XHJcbiAgY29uc3QgaXNBZG1pbiA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gXCJBRE1JTlwiKTtcclxuICBsZXQgbWVudUl0ZW1zID0gTm9uQWRtaW5NZW51SXRlbXM7XHJcbiAgaWYgKGlzQWRtaW4pIG1lbnVJdGVtcyA9IEFkbWluTWVudUl0ZW1zLmNvbmNhdChtZW51SXRlbXMpO1xyXG5cclxuICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tMTJcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1zY3JpcHQtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICAgICAge2JhY2tncm91bmRJbWFnZSAmJiA8c3R5bGU+e2BcclxuICAgICAgICAucGFnZUhlYWRlciB7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJyR7YmFja2dyb3VuZEltYWdlfScpICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICBgfTwvc3R5bGU+fVxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZUhlYWRlclwiXHJcbiAgICAgICAgICBvbkRyYWdPdmVyPXtjb3Vyc2UgJiYgYWxsb3dDb3B5fVxyXG4gICAgICAgICAgb25Ecm9wPXtjb3Vyc2UgJiYgKGV2ID0+IG9uRHJvcEltYWdlKGV2LCBob3N0LCBjb3Vyc2UsIG9yaWdDb3Vyc2UpKX0+XHJcbiAgICAgICAgICA8YT5cclxuICAgICAgICAgICAgPGgxPnt0aXRsZX08L2gxPlxyXG4gICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25zRmllbGRcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJidXR0b25zQ29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2hvcml6b250YWxNZW51Jz5cclxuICAgICAgICAgICAgICAgIDx1bD5cclxuICAgICAgICAgICAgICAgICAge21lbnVJdGVtcy5tYXAoaXRlbSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmU6IGFjdGl2ZVBhZ2UgPT09IGl0ZW0ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogcHJvcHMuY2FsbGJhY2tzICYmIHByb3BzLmNhbGxiYWNrc1tpdGVtLm5hbWVdLFxyXG4gICAgICAgICAgICAgICAgICAgIGdpdmVuUm91dGU6IChwcm9wcy5yb3V0ZXMgJiYgcHJvcHMucm91dGVzW2l0ZW0ubmFtZV0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHRSb3V0ZTogaXRlbS5yb3V0ZVxyXG4gICAgICAgICAgICAgICAgICB9KSkuZmlsdGVyKHggPT4geC5jYWxsYmFjayB8fCB4LmRlZmF1bHRSb3V0ZSB8fCB4LmdpdmVuUm91dGUpLm1hcCgoeyBpdGVtLCBpc0FjdGl2ZSwgY2FsbGJhY2ssIGRlZmF1bHRSb3V0ZSwgZ2l2ZW5Sb3V0ZSB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxsaVxyXG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtpdGVtLm5hbWV9XHJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2lzQWN0aXZlID8gXCJhY3RpdmVQYWdlXCIgOiBcIlwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17Y2FsbGJhY2t9XHJcbiAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAge2NhbGxiYWNrID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGE+e2l0ZW0udGV4dH08L2E+IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFJvdXRlIHx8IGdpdmVuUm91dGUgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuUm91dGUgfHwgL15odHRwW3NdXFw6XFwvXFwvL2kudGVzdChkZWZhdWx0Um91dGUpID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2dpdmVuUm91dGUgfHwgZGVmYXVsdFJvdXRlfT57aXRlbS50ZXh0fTwvYT4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPExpbmsgdG89e2RlZmF1bHRSb3V0ZX0+e2l0ZW0udGV4dH08L0xpbms+IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8YT57aXRlbS50ZXh0fTwvYT59XHJcbiAgICAgICAgICAgICAgICAgICAgPC9saT47XHJcbiAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NOyIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgU2Nob29sTW9tZW50LCBnZXRTY2hvb2xNb21lbnQsIGFkZFllYXIgfSBmcm9tICcuL3NjaG9vbC1tb21lbnQnO1xyXG5pbXBvcnQgeyBBY2FkZW1pY1llYXIsIFRlcm0gfSBmcm9tICcuLi9jb250cmFjdHMva2VkLW1vZGVscyc7XHJcblxyXG50eXBlIE1vbWVudCA9IG1vbWVudC5Nb21lbnQ7XHJcblxyXG5mdW5jdGlvbiBpc1NjaG9vbE1vbWVudChvYmo6IERhdGUgfCBTY2hvb2xNb21lbnQpOiBvYmogaXMgU2Nob29sTW9tZW50IHtcclxuICByZXR1cm4gJ2FjYWRlbWljWWVhcicgaW4gb2JqO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2Nob29sVGVybSB7XHJcbiAgYWNhZGVtaWNZZWFyOiBBY2FkZW1pY1llYXI7XHJcbiAgdGVybTogVGVybTtcclxuXHJcbiAgY29uc3RydWN0b3IoZGF0ZU9yU2Nob29sTW9tZW50OiBEYXRlIHwgU2Nob29sTW9tZW50KSB7XHJcbiAgICBjb25zdCBzY2hvb2xNb21lbnQgPSBpc1NjaG9vbE1vbWVudChkYXRlT3JTY2hvb2xNb21lbnQpID9cclxuICAgICAgZGF0ZU9yU2Nob29sTW9tZW50IDogZ2V0U2Nob29sTW9tZW50KG1vbWVudChkYXRlT3JTY2hvb2xNb21lbnQpKTtcclxuICAgIHRoaXMuYWNhZGVtaWNZZWFyID0gc2Nob29sTW9tZW50LmFjYWRlbWljWWVhcjtcclxuICAgIHRoaXMudGVybSA9IHNjaG9vbE1vbWVudC50ZXJtO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHllYXIoKSB7XHJcbiAgICByZXR1cm4gcGFyc2VJbnQodGhpcy5hY2FkZW1pY1llYXJcclxuICAgICAgICAuc3BsaXQoJy8nKVt0aGlzLnRlcm0gPT09ICdBVCcgPyAwIDogMV0pO1xyXG4gIH1cclxuXHJcbiAgbmV4dFRlcm0oKSB7XHJcbiAgICByZXR1cm4gbmV3IFNjaG9vbFRlcm0odGhpcy50ZXJtID09PSAnQVQnID9cclxuICAgICAge1xyXG4gICAgICAgIHRlcm06ICdTVCcsXHJcbiAgICAgICAgYWNhZGVtaWNZZWFyOiB0aGlzLmFjYWRlbWljWWVhclxyXG4gICAgICB9IDpcclxuICAgICAge1xyXG4gICAgICAgIHRlcm06ICdBVCcsXHJcbiAgICAgICAgYWNhZGVtaWNZZWFyOiBhZGRZZWFyKHRoaXMuYWNhZGVtaWNZZWFyLCAxKVxyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHByZXZUZXJtKCkge1xyXG4gICAgcmV0dXJuIG5ldyBTY2hvb2xUZXJtKHRoaXMudGVybSA9PT0gJ0FUJyA/XHJcbiAgICAgIHtcclxuICAgICAgICB0ZXJtOiAnU1QnLFxyXG4gICAgICAgIGFjYWRlbWljWWVhcjogYWRkWWVhcih0aGlzLmFjYWRlbWljWWVhciwgLTEpXHJcbiAgICAgIH0gOlxyXG4gICAgICB7XHJcbiAgICAgICAgdGVybTogJ0FUJyxcclxuICAgICAgICBhY2FkZW1pY1llYXI6IHRoaXMuYWNhZGVtaWNZZWFyXHJcbiAgICAgIH0pO1xyXG4gICAgXHJcbiAgfVxyXG5cclxuICB0b0xvY2FsZVN0cmluZyhsb2NhbGVzOiBzdHJpbmdbXSwgc2hvcnRZZWFyPzogYm9vbGVhbikge1xyXG4gICAgbGV0IHllYXIgPSB0aGlzLnRlcm0gPT09ICdBVCcgP1xyXG4gICAgICB0aGlzLmFjYWRlbWljWWVhci5zcGxpdCgnLycpWzBdOlxyXG4gICAgICB0aGlzLmFjYWRlbWljWWVhci5zcGxpdCgnLycpWzFdO1xyXG5cclxuICAgIGlmIChzaG9ydFllYXIpXHJcbiAgICAgIHllYXIgPSB5ZWFyLnN1YnN0cigyKTtcclxuXHJcbiAgICBmb3IgKGxldCBsb2NhbGUgb2YgbG9jYWxlcykge1xyXG4gICAgICBzd2l0Y2ggKGxvY2FsZS5zcGxpdCgnLScpWzBdLnNwbGl0KCdfJylbMF0udG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgIGNhc2UgJ2VuJzpcclxuICAgICAgICAgIHJldHVybiBgJHt0aGlzLnRlcm0gPT09ICdBVCcgPyBcIkFUXCIgOiBcIlNUXCJ9ICR7eWVhcn1gO1xyXG4gICAgICAgIGNhc2UgJ3N2JzpcclxuICAgICAgICAgIHJldHVybiBgJHt0aGlzLnRlcm0gPT09ICdBVCcgPyBcIkhUXCIgOiBcIlZUXCJ9ICR7eWVhcn1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBleGVjIGZyb20gJy4vZXhlYyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgYm9sZDoge1xyXG4gICAgaWNvbjogJzxiPkY8L2I+JyxcclxuICAgIHRpdGxlOiAnRmV0c3RpbCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2JvbGQnKVxyXG4gIH0sXHJcbiAgaXRhbGljOiB7XHJcbiAgICBpY29uOiAnPGk+SzwvaT4nLFxyXG4gICAgdGl0bGU6ICdLdXJzaXYnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdpdGFsaWMnKVxyXG4gIH0sXHJcbiAgdW5kZXJsaW5lOiB7XHJcbiAgICBpY29uOiAnPHU+VTwvdT4nLFxyXG4gICAgdGl0bGU6ICdVbmRlcnN0cnVrZW4nLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCd1bmRlcmxpbmUnKVxyXG4gIH0sXHJcbiAgc3RyaWtldGhyb3VnaDoge1xyXG4gICAgaWNvbjogJzxzdHJpa2U+Uzwvc3RyaWtlPicsXHJcbiAgICB0aXRsZTogJ1N0cnVrZW4nLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdzdHJpa2VUaHJvdWdoJylcclxuICB9LFxyXG4gIGhlYWRpbmcxOiB7XHJcbiAgICBpY29uOiAnPGI+SDxzdWI+MTwvc3ViPjwvYj4nLFxyXG4gICAgdGl0bGU6ICdSdWJyaWsgMScsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMT4nKVxyXG4gIH0sXHJcbiAgaGVhZGluZzI6IHtcclxuICAgIGljb246ICc8Yj5IPHN1Yj4yPC9zdWI+PC9iPicsXHJcbiAgICB0aXRsZTogJ1J1YnJpayAyJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPEgyPicpXHJcbiAgfSxcclxuICBoZWFkaW5nMzoge1xyXG4gICAgaWNvbjogJzxiPkg8c3ViPjM8L3N1Yj48L2I+JyxcclxuICAgIHRpdGxlOiAnUnVicmlrIDMnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8SDM+JylcclxuICB9LFxyXG4gIHBhcmFncmFwaDoge1xyXG4gICAgaWNvbjogJyYjMTgyOycsXHJcbiAgICB0aXRsZTogJ1BhcmFncmFmJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFA+JylcclxuICB9LFxyXG4gIHF1b3RlOiB7XHJcbiAgICBpY29uOiAnJiM4MjIwOyAmIzgyMjE7JyxcclxuICAgIHRpdGxlOiAnQ2l0YXQnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8QkxPQ0tRVU9URT4nKVxyXG4gIH0sXHJcbiAgb2xpc3Q6IHtcclxuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLWxpc3Qtb2xcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcclxuICAgIHRpdGxlOiAnT3JkbmFkIGxpc3RhJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0T3JkZXJlZExpc3QnKVxyXG4gIH0sXHJcbiAgdWxpc3Q6IHtcclxuICAgIGljb246ICc8aSBjbGFzcz1cImZhIGZhLWxpc3RcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcclxuICAgIHRpdGxlOiAnUHVua3RsaXN0YScsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydFVub3JkZXJlZExpc3QnKVxyXG4gIH0sXHJcbiAgY29kZToge1xyXG4gICAgaWNvbjogJyZsdDsvJmd0OycsXHJcbiAgICB0aXRsZTogJ1Byb2dyYW1rb2QnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8UFJFPicpXHJcbiAgfSxcclxuICBsaW5lOiB7XHJcbiAgICBpY29uOiAnJiM4MjEzOycsXHJcbiAgICB0aXRsZTogJ1bDpWdyw6R0IGxpbmplJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0SG9yaXpvbnRhbFJ1bGUnKVxyXG4gIH0sXHJcbiAgbGluazoge1xyXG4gICAgaWNvbjogJzxpIGNsYXNzPVwiZmEgZmEtbGlua1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nLFxyXG4gICAgdGl0bGU6ICdJbmZvZ2EgbMOkbmsnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5wcm9tcHQoJ0FuZ2UgbMOkbmtlbnMgVVJMJylcclxuICAgICAgaWYgKHVybCkgZXhlYygnY3JlYXRlTGluaycsIHVybClcclxuICAgIH1cclxuICB9LFxyXG4gIGltYWdlOiB7XHJcbiAgICBpY29uOiAnPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+JyxcclxuICAgIHRpdGxlOiAnSW5mb2dhIGJpbGQnLFxyXG4gICAgcmVzdWx0OiAoZXYsIGNvbXBvbmVudCkgPT4ge1xyXG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KCdBbmdlIGJpbGRlbnMgVVJMJylcclxuICAgICAgaWYgKHVybCkge1xyXG4gICAgICAgIC8vZXhlYygnaW5zZXJ0SW1hZ2UnLCB1cmwpO1xyXG4gICAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgICAgaW1nLnNyYyA9IHVybDtcclxuICAgICAgICBpbWcudGFiSW5kZXggPSAxO1xyXG4gICAgICAgIGluc2VydEVsZW1lbnQoaW1nKTtcclxuICAgICAgICBpbWcub25mb2N1cyA9IGNvbXBvbmVudC5vbkZvY3VzO1xyXG4gICAgICAgIGltZy5vbmJsdXIgPSBjb21wb25lbnQub25CbHVyO1xyXG4gICAgICAgIGNvbXBvbmVudC5wcm9wcy5vbkNoYW5nZShjb21wb25lbnQuY29udGVudERpdi5pbm5lckhUTUwpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBpbnNlcnRFbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50KSB7XHJcbiAgICB2YXIgc2VsLCByYW5nZTtcclxuICAgIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uICYmIChzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkpLnJhbmdlQ291bnQpIHtcclxuICAgICAgICByYW5nZSA9IHNlbC5nZXRSYW5nZUF0KDApO1xyXG4gICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xyXG4gICAgICAgIHJhbmdlLmluc2VydE5vZGUoZWxlbWVudCk7XHJcbiAgICAgICAgLy8gTW92ZSB0aGUgY2FyZXQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIGluc2VydGVkIHNwYW5cclxuICAgICAgICByYW5nZS5zZXRTdGFydEFmdGVyKGVsZW1lbnQpO1xyXG4gICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xyXG4gICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcclxuICAgICAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcblxyXG5jb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XHJcblxyXG50eXBlIEhUTUxQb2xpY3kgPSB7W3RhZ05hbWVMb3dlcjogc3RyaW5nXToge1thdHRyaWJ1dGVMb3dlcjogc3RyaW5nXTogYm9vbGVhbn19O1xyXG5cclxuLyoqIFRhZ3MgLyBBdHRyaWJ1dGVzIFdoaXRlbGlzdFxyXG4gKiBcclxuICovXHJcbmNvbnN0IEhUTUxfV0FTSF9QT0xJQ1k6IEhUTUxQb2xpY3kgPSB7XHJcbiAgYjoge30sICAvLyBib2xkXHJcbiAgaToge30sICAvLyBpdGFsaWNcclxuICBwOiB7fSwgIC8vIHBhcmFncmFwaFxyXG4gIHU6IHt9LCAgLy8gdW5kZXJsaW5lXHJcbiAgc3RyaWtlOiB7fSwgLy8gc3RyaWtlLXRocm91Z2hcclxuICBwcmU6IHt9LCAvLyB1bmZvcm1hdHRlZFxyXG4gIGgxOiB7fSwgLy8gaGVhZGluZyAxXHJcbiAgaDI6IHt9LCAvLyBoZWFkaW5nIDJcclxuICBoMzoge30sIC8vIGhlYWRpbmcgM1xyXG4gIGg0OiB7fSwgLy8gaGVhZGluZyA0XHJcbiAgaDU6IHt9LCAvLyBoZWFkaW5nIDVcclxuICBpbWc6IHtzcmM6IHRydWUsIGNsYXNzOiB0cnVlLCBzdHlsZTogdHJ1ZSwgdGFiaW5kZXg6IHRydWV9LCAvLyBpbWFnZS4gV2Ugc2V0IHN0eWxlIGFuZCB0YWJpbmRleCBvdXJzZWx2ZXMuIEFjY2VwdCB0aGF0LlxyXG4gIGE6IHtocmVmOiB0cnVlLCB0YXJnZXQ6IHRydWUsIHRhYmluZGV4OiB0cnVlfSwgLy8gbGlua1xyXG4gIHVsOiB7fSwgLy8gVW5vcmRlcmVkIGxpc3RcclxuICBvbDoge30sIC8vIE9yZGVyZWQgbGlzdFxyXG4gIGxpOiB7fSwgLy8gbGlzdCBpdGVtXHJcbiAgaHI6IHt9LCAvLyBIb3Jpem9udGFsIHJ1bGVcclxuICBicjoge30sIC8vIEJyZWFrIGxpbmVcclxuICBkaXY6IHt9LC8vIE9mIHNvbWUgcmVhc29uLCBkaXZzIGFyZSBzb21ldGltZXMgaW5zZXJ0ZWQgd2hlbiBwcmVzc2luZyBFTlRFUiBpbiB0aGUgd3lzaXd5ZyBlZGl0b3IuXHJcbiAgc3Bhbjoge30sLy8gU3BhbnMgYXJlIGhhcm1sZXNzLCBqdXN0IHJlbW92ZSB0aGVpciBzdHlsZSBhbmQgb3RoZXIgYXR0cmlidXRlcyBhbmQgSSBmZWVsIGdyZWF0LlxyXG4gIC8vIHRhYmxlIHRhZ3M6XHJcbiAgdGFibGU6IHtib3JkZXI6IHRydWV9LFxyXG4gIHRib2R5OiB7fSxcclxuICB0aGVhZDoge30sXHJcbiAgdGZvb3Q6IHt9LFxyXG4gIHRyOiB7fSxcclxuICB0ZDoge2hlYWRlcnM6IHRydWUsIGNvbHNwYW46IHRydWUsIHJvd3NwYW46IHRydWV9LFxyXG4gIHRoOiB7YWJicjogdHJ1ZSwgaGVhZGVyczogdHJ1ZSwgc2NvcGU6IHRydWUsIHNvcnRlZDogdHJ1ZSwgY29sc3BhbjogdHJ1ZSwgcm93c3BhbjogdHJ1ZX1cclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB3YXNoSHRtbCAoaHRtbDogc3RyaW5nKTogc3RyaW5nIHtcclxuICBjb25zdCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGh0bWwsIFwidGV4dC9odG1sXCIpO1xyXG4gIGNvbnN0IHtjaGlsZE5vZGVzfSA9IGRvYy5ib2R5O1xyXG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xyXG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZiAod2FzaE5vZGUoY2hpbGROb2Rlcy5pdGVtKGkpKSkge1xyXG4gICAgICBtb2RpZmllZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBtb2RpZmllZCA/XHJcbiAgICBkb2MuYm9keS5pbm5lckhUTUwgOlxyXG4gICAgaHRtbDsgLy8gQnkgcmV0dXJuaW5nIHRoZSBvcmlnaW5hbCBIVE1MIHN0cmluZywgd2Ugc3BhcmUgdGhlIHVzZXIgZnJvbSByZWZyZXNoaW5nIHRoZSBlZGl0IGFyZWEsXHJcbiAgICAgICAgICAvLyB3aGljaCB3b3VsZCBvdGhlcndpc2UgcHV0IHRoZSBjdXJzb3IgYXQgdGhlIHRvcCwgbG9zaW5nIHRoZSBwb3NpdGlvbiB3aGVyZSB1c2VyIHdoZXJlLlxyXG59XHJcblxyXG5mdW5jdGlvbiB3YXNoTm9kZShub2RlOiBOb2RlIHwgRWxlbWVudCB8IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XHJcbiAgbGV0IG1vZGlmaWVkID0gZmFsc2U7XHJcbiAgaWYgKGlzRWxlbWVudChub2RlKSkge1xyXG4gICAgaWYgKHdhc2hFbGVtZW50KG5vZGUpKSB7XHJcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKHdhc2hDaGlsZE5vZGVzKG5vZGUpKSB7XHJcbiAgICBtb2RpZmllZCA9IHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBtb2RpZmllZDtcclxufVxyXG5cclxuZnVuY3Rpb24gd2FzaENoaWxkTm9kZXMobm9kZTogTm9kZSkge1xyXG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xyXG4gIGNvbnN0IHtjaGlsZE5vZGVzfSA9IG5vZGU7XHJcbiAgZm9yIChsZXQgaT0wOyBpPGNoaWxkTm9kZXMubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmICh3YXNoTm9kZShjaGlsZE5vZGVzLml0ZW0oaSkpKSB7XHJcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG1vZGlmaWVkO1xyXG59IFxyXG5cclxuLyoqIFJlcGxhY2UgYW4gZWxlbWVudCB3aXRoIGl0cyBjaGlsZCBub2Rlcy5cclxuICogXHJcbiAqL1xyXG5mdW5jdGlvbiByZW1vdmVNaWRkbGVFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpIHtcclxuICBjb25zdCB7Y2hpbGROb2Rlc30gPSBlbGVtZW50O1xyXG4gIGZvciAobGV0IGk9MDsgaTxjaGlsZE5vZGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBlbGVtZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZXMuaXRlbShpKSwgZWxlbWVudCk7XHJcbiAgfVxyXG4gIGVsZW1lbnQucmVtb3ZlKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdhc2hFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpOiBib29sZWFuIHtcclxuICBjb25zdCBwb2xpY3kgPSBlbGVtZW50LnRhZ05hbWUgJiYgSFRNTF9XQVNIX1BPTElDWVtlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV07XHJcbiAgaWYgKCFwb2xpY3kpIHtcclxuICAgIGNvbnNvbGUud2FybihcIld5c2l3eWc6IG5vdCBhbGxvd2VkIHRhZ1wiLCBlbGVtZW50LnRhZ05hbWUpO1xyXG4gICAgd2FzaENoaWxkTm9kZXMoZWxlbWVudCk7XHJcbiAgICByZW1vdmVNaWRkbGVFbGVtZW50KGVsZW1lbnQpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIGxldCBtb2RpZmllZCA9IGZhbHNlO1xyXG4gIGZvciAobGV0IGk9MDsgaTxlbGVtZW50LmF0dHJpYnV0ZXMubGVuZ3RoOyArK2kpIHtcclxuICAgIGNvbnN0IGF0dHIgPSBlbGVtZW50LmF0dHJpYnV0ZXMuaXRlbShpKTtcclxuICAgIGNvbnN0IGFsbG93ZWQgPSBhdHRyLm5hbWUgJiYgISFwb2xpY3lbYXR0ci5uYW1lLnRvTG93ZXJDYXNlKCldO1xyXG4gICAgaWYgKCFhbGxvd2VkKSB7XHJcbiAgICAgIG1vZGlmaWVkID0gdHJ1ZTtcclxuICAgICAgY29uc29sZS53YXJuKFwiV3lzaXd5Zzogbm90IGFsbG93ZWQgYXR0cmlidXRlXCIsIGF0dHIubmFtZSwgXCJUYWc6IFwiLCBlbGVtZW50LnRhZ05hbWUpO1xyXG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyLm5hbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gbW9kaWZpZWQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlOiBOb2RlKSA6IG5vZGUgaXMgRWxlbWVudCB7XHJcbiAgcmV0dXJuICEhKG5vZGUgYXMgRWxlbWVudCkudGFnTmFtZTtcclxufVxyXG4iLCJpbXBvcnQgZXhlYyBmcm9tICcuL2V4ZWMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGJvbGQ6IHtcclxuICAgIGljb246ICc8Yj5CPC9iPicsXHJcbiAgICB0aXRsZTogJ0JvbGQnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdib2xkJylcclxuICB9LFxyXG4gIGl0YWxpYzoge1xyXG4gICAgaWNvbjogJzxpPkk8L2k+JyxcclxuICAgIHRpdGxlOiAnSXRhbGljJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaXRhbGljJylcclxuICB9LFxyXG4gIHVuZGVybGluZToge1xyXG4gICAgaWNvbjogJzx1PlU8L3U+JyxcclxuICAgIHRpdGxlOiAnVW5kZXJsaW5lJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygndW5kZXJsaW5lJylcclxuICB9LFxyXG4gIHN0cmlrZXRocm91Z2g6IHtcclxuICAgIGljb246ICc8c3RyaWtlPlM8L3N0cmlrZT4nLFxyXG4gICAgdGl0bGU6ICdTdHJpa2UtdGhyb3VnaCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ3N0cmlrZVRocm91Z2gnKVxyXG4gIH0sXHJcbiAgaGVhZGluZzE6IHtcclxuICAgIGljb246ICc8Yj5IPHN1Yj4xPC9zdWI+PC9iPicsXHJcbiAgICB0aXRsZTogJ0hlYWRpbmcgMScsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMT4nKVxyXG4gIH0sXHJcbiAgaGVhZGluZzI6IHtcclxuICAgIGljb246ICc8Yj5IPHN1Yj4yPC9zdWI+PC9iPicsXHJcbiAgICB0aXRsZTogJ0hlYWRpbmcgMicsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMj4nKVxyXG4gIH0sXHJcbiAgaGVhZGluZzM6IHtcclxuICAgIGljb246ICc8Yj5IPHN1Yj4zPC9zdWI+PC9iPicsXHJcbiAgICB0aXRsZTogJ0hlYWRpbmcgMycsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxIMz4nKVxyXG4gIH0sXHJcbiAgcGFyYWdyYXBoOiB7XHJcbiAgICBpY29uOiAnJiMxODI7JyxcclxuICAgIHRpdGxlOiAnUGFyYWdyYXBoJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnZm9ybWF0QmxvY2snLCAnPFA+JylcclxuICB9LFxyXG4gIHF1b3RlOiB7XHJcbiAgICBpY29uOiAnJiM4MjIwOyAmIzgyMjE7JyxcclxuICAgIHRpdGxlOiAnUXVvdGUnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBleGVjKCdmb3JtYXRCbG9jaycsICc8QkxPQ0tRVU9URT4nKVxyXG4gIH0sXHJcbiAgb2xpc3Q6IHtcclxuICAgIGljb246ICcmIzM1OycsXHJcbiAgICB0aXRsZTogJ09yZGVyZWQgTGlzdCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2luc2VydE9yZGVyZWRMaXN0JylcclxuICB9LFxyXG4gIHVsaXN0OiB7XHJcbiAgICBpY29uOiAnJiM4MjI2OycsXHJcbiAgICB0aXRsZTogJ1Vub3JkZXJlZCBMaXN0JyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0VW5vcmRlcmVkTGlzdCcpXHJcbiAgfSxcclxuICBjb2RlOiB7XHJcbiAgICBpY29uOiAnJmx0Oy8mZ3Q7JyxcclxuICAgIHRpdGxlOiAnQ29kZScsXHJcbiAgICByZXN1bHQ6ICgpID0+IGV4ZWMoJ2Zvcm1hdEJsb2NrJywgJzxQUkU+JylcclxuICB9LFxyXG4gIGxpbmU6IHtcclxuICAgIGljb246ICcmIzgyMTM7JyxcclxuICAgIHRpdGxlOiAnSG9yaXpvbnRhbCBMaW5lJyxcclxuICAgIHJlc3VsdDogKCkgPT4gZXhlYygnaW5zZXJ0SG9yaXpvbnRhbFJ1bGUnKVxyXG4gIH0sXHJcbiAgbGluazoge1xyXG4gICAgaWNvbjogJyYjMTI4Mjc5OycsXHJcbiAgICB0aXRsZTogJ0xpbmsnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5wcm9tcHQoJ0VudGVyIHRoZSBsaW5rIFVSTCcpXHJcbiAgICAgIGlmICh1cmwpIGV4ZWMoJ2NyZWF0ZUxpbmsnLCB1cmwpXHJcbiAgICB9XHJcbiAgfSxcclxuICBpbWFnZToge1xyXG4gICAgaWNvbjogJyYjMTI4MjQ3OycsXHJcbiAgICB0aXRsZTogJ0ltYWdlJyxcclxuICAgIHJlc3VsdDogKCkgPT4ge1xyXG4gICAgICBjb25zdCB1cmwgPSB3aW5kb3cucHJvbXB0KCdFbnRlciB0aGUgaW1hZ2UgVVJMJylcclxuICAgICAgaWYgKHVybCkgZXhlYygnaW5zZXJ0SW1hZ2UnLCB1cmwpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IGV4ZWMgZnJvbSAnLi9leGVjJztcclxuaW1wb3J0IHt3YXNoSHRtbH0gZnJvbSAnLi93YXNoLWh0bWwnO1xyXG5pbXBvcnQgaW1hZ2VFZGl0QWN0aW9ucyBmcm9tICcuL2ltYWdlLWVkaXQtYWN0aW9ucyc7XHJcbmltcG9ydCBhY3Rpb25zIGZyb20gJy4vYWN0aW9ucyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbiB7XHJcbiAgbmFtZT86IHN0cmluZztcclxuICBpY29uOiBzdHJpbmc7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICByZXN1bHQ6IChldjogUmVhY3QuTW91c2VFdmVudDxIVE1MQnV0dG9uRWxlbWVudD4sIGNvbXBvbmVudDogV3lzaXd5ZykgPT4gdm9pZDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBjbGFzc05hbWU/OiBzdHJpbmc7XHJcbiAgaHRtbDogc3RyaW5nO1xyXG4gIG9uQ2hhbmdlPzogKGh0bWw6IHN0cmluZykgPT4gdm9pZDtcclxuICByZXBvcnROdW1DaGFycz86IChudW1DaGFyczogbnVtYmVyKSA9PiB2b2lkO1xyXG4gIG1heENoYXJzPzogbnVtYmVyO1xyXG4gIGRlZmF1bHRBY3Rpb25zPzoge1tuYW1lOiBzdHJpbmddOiBBY3Rpb259O1xyXG4gIGFjdGlvbnM/OiAoUGFydGlhbDxBY3Rpb24+IHwgc3RyaW5nKVtdO1xyXG4gIHJlYWRPbmx5PzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBmb2N1c1JlY3Q6IENsaWVudFJlY3QgfCBudWxsO1xyXG59XHJcblxyXG5jb25zdCBjbGFzc2VzID0ge1xyXG4gIGFjdGlvbmJhcjogJ3d5c2l3eWctYWN0aW9uYmFyJyxcclxuICBidXR0b246ICd3eXNpd3lnLWJ1dHRvbicsXHJcbiAgY29udGVudDogJ3d5c2l3eWctY29udGVudCcsXHJcbiAgZm9jdXNyZWN0OiAnd3lzaXd5Zy1mb2N1c3JlY3QnLFxyXG4gIGZvY3VzcG9pbnQ6ICd3eXNpd3lnLWZvY3VzcG9pbnQnLFxyXG4gIHJlYWRvbmx5Q29udGVudDogJ3d5c2l3eWctY29udGVudCByZWFkb25seSdcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFd5c2l3eWcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb250ZW50RGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICBmb2N1c1JlY3REaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gIGZvY3VzRWxlbTogSFRNTEVsZW1lbnQgfCBudWxsO1xyXG4gIGNvcm5lcjogc3RyaW5nO1xyXG4gIHJlc2l6ZVN0YXJ0WDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge2ZvY3VzUmVjdDogbnVsbH07XHJcbiAgICB0aGlzLm9uRm9jdXMgPSB0aGlzLm9uRm9jdXMuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25CbHVyID0gdGhpcy5vbkJsdXIuYmluZCh0aGlzKTtcclxuICAgIHRoaXMub25Nb3VzZURvd24gPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLm9uTW91c2VNb3ZlID0gdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbk1vdXNlVXAgPSB0aGlzLm9uTW91c2VVcC5iaW5kKHRoaXMpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICBpZiAoIXRoaXMucHJvcHMucmVhZE9ubHkpIHtcclxuICAgICAgQXJyYXkuZnJvbSh0aGlzLmNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbChcImltZyxhXCIpKS5tYXAoZWxlbSA9PiAoZWxlbSBhcyAoSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50KSkpXHJcbiAgICAgIC5mb3JFYWNoKGVsZW0gPT4ge1xyXG4gICAgICAgIGVsZW0udGFiSW5kZXggPSAxO1xyXG4gICAgICAgIGVsZW0ub25mb2N1cyA9IHRoaXMub25Gb2N1cztcclxuICAgICAgICBlbGVtLm9uYmx1ciA9IHRoaXMub25CbHVyIGFzIGFueTtcclxuICAgICAgfSk7XHJcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xyXG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKTtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKSB7XHJcbiAgICAgIHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnModGhpcy5jb250ZW50RGl2ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQgJiYgdGhpcy5jb250ZW50RGl2LmlubmVyVGV4dC5sZW5ndGgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xyXG4gICAgQXJyYXkuZnJvbSh0aGlzLmNvbnRlbnREaXYucXVlcnlTZWxlY3RvckFsbChcImltZyxhXCIpKS5tYXAoZWxlbSA9PiAoZWxlbSBhcyAoSFRNTEltYWdlRWxlbWVudCB8IEhUTUxBbmNob3JFbGVtZW50KSkpXHJcbiAgICAuZm9yRWFjaChlbGVtID0+IHtcclxuICAgICAgZWxlbS50YWJJbmRleCA9IDE7XHJcbiAgICAgIGVsZW0ub25mb2N1cyA9IHRoaXMub25Gb2N1cztcclxuICAgICAgZWxlbS5vbmJsdXIgPSB0aGlzLm9uQmx1ciBhcyBhbnk7XHJcbiAgICB9KTtcclxuICAgIGlmICh0aGlzLnByb3BzLnJlcG9ydE51bUNoYXJzKSB7XHJcbiAgICAgIHRoaXMucHJvcHMucmVwb3J0TnVtQ2hhcnModGhpcy5jb250ZW50RGl2ICYmIHRoaXMuY29udGVudERpdi5pbm5lclRleHQgJiYgdGhpcy5jb250ZW50RGl2LmlubmVyVGV4dC5sZW5ndGgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcclxuICB9XHJcblxyXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHM6IFByb3BzLCBuZXh0U3RhdGU6IFN0YXRlKSB7XHJcbiAgICAvL3RoaXMuY29udGVudERpdi5vbmZvY3VzID0gdGhpcy5vbkZvY3VzO1xyXG4gICAgLy90aGlzLmNvbnRlbnREaXYub25ibHVyID0gdGhpcy5vbkJsdXI7XHJcbiAgICByZXR1cm4gIXRoaXMuY29udGVudERpdiB8fFxyXG4gICAgICBuZXh0U3RhdGUgIT0gdGhpcy5zdGF0ZSB8fFxyXG4gICAgICBuZXh0UHJvcHMucmVhZE9ubHkgIT09IHRoaXMucHJvcHMucmVhZE9ubHkgfHxcclxuICAgICAgd2FzaEh0bWwobmV4dFByb3BzLmh0bWwpICE9PSB3YXNoSHRtbCh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcclxuICB9XHJcblxyXG4gIHRyaWdnZXJPbkNoYW5nZShodG1sOiBzdHJpbmcpIHtcclxuICAgIHRoaXMucHJvcHMub25DaGFuZ2UgJiYgdGhpcy5wcm9wcy5vbkNoYW5nZSh3YXNoSHRtbChodG1sKSk7XHJcbiAgfVxyXG5cclxuICBvbkZvY3VzKGV2OiBGb2N1c0V2ZW50KSB7XHJcbiAgICBjb25zdCBlbGVtID0gZXYudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xyXG4gICAgaWYgKCFlbGVtIHx8ICFlbGVtLnRhZ05hbWUpIHJldHVybjtcclxuICAgIGlmIChlbGVtLnRhZ05hbWUgIT09ICdJTUcnICYmIGVsZW0udGFnTmFtZSAhPT0gJ0EnKSByZXR1cm47XHJcbiAgICBjb25zdCBjb250ZW50UGFyZW50ID0gdGhpcy5jb250ZW50RGl2LnBhcmVudEVsZW1lbnQ7XHJcbiAgICBjb25zdCBuZXdTdGF0ZSA9IHtcclxuICAgICAgZm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdChjb250ZW50UGFyZW50LCBlbGVtKSxcclxuICAgIH1cclxuICAgIHN3aXRjaCAoZWxlbS50YWdOYW1lKSB7XHJcbiAgICAgIGNhc2UgJ0EnOlxyXG4gICAgICBjYXNlICdJTUcnOlxyXG5cclxuICAgICAgZGVmYXVsdDogYnJlYWs7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldFN0YXRlKG5ld1N0YXRlKTtcclxuICAgIHRoaXMuZm9jdXNFbGVtID0gZWxlbTtcclxuICB9XHJcblxyXG4gIG9uQmx1cihldjogUmVhY3QuRm9jdXNFdmVudDxIVE1MRGl2RWxlbWVudD4pIHtcclxuICAgIC8qaWYgKGV2LnJlbGF0ZWRUYXJnZXQpIHtcclxuICAgICAgY29uc3QgcmVsYXRlZFRhcmdldCA9IGV2LnJlbGF0ZWRUYXJnZXQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGlmIChyZWxhdGVkVGFyZ2V0LmNsYXNzTmFtZSAmJiByZWxhdGVkVGFyZ2V0LmNsYXNzTmFtZS5zcGxpdCgnICcpLmluZGV4T2YoY2xhc3Nlcy5idXR0b24pID49IDApIHtcclxuICAgICAgICAvLyBBIGltYWdlIGFjdGlvbiBidXR0b24gd2FzIHByZXNzZWRcclxuICAgICAgICBzZXRcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH0qL1xyXG4gICAgaWYgKChldi50YXJnZXQgPT09IHRoaXMuZm9jdXNFbGVtICYmIGV2LnJlbGF0ZWRUYXJnZXQgIT09IHRoaXMuZm9jdXNSZWN0RGl2KSB8fFxyXG4gICAgICBldi50YXJnZXQgPT09IHRoaXMuZm9jdXNSZWN0RGl2KVxyXG4gICAge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtmb2N1c1JlY3Q6IG51bGx9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1ha2VDbGlja2FibGUoZWxlbTogSFRNTEVsZW1lbnQpIHtcclxuICAgICBlbGVtLnRhYkluZGV4ID0gMTtcclxuICB9XHJcblxyXG4gIG9uTW91c2VEb3duKGV2KSB7XHJcbiAgICBpZiAoKGV2LnRhcmdldC5jbGFzc05hbWUgfHwgXCJcIikuc3BsaXQoJyAnKS5pbmRleE9mKGNsYXNzZXMuZm9jdXNwb2ludCkgPj0gMCkge1xyXG4gICAgICBjb25zdCBjb3JuZXIgPSB0aGlzLmdldFJlY3RDb3JuZXIoZXYpO1xyXG4gICAgICB0aGlzLmNvcm5lciA9IGNvcm5lcjtcclxuICAgICAgdGhpcy5yZXNpemVTdGFydFggPSBldi5jbGllbnRYO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZU1vdmUoZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgIGlmICh0aGlzLmNvcm5lciAmJiB0aGlzLnN0YXRlLmZvY3VzUmVjdCAmJiB0aGlzLmZvY3VzRWxlbSkge1xyXG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAvLyBUT0RPOiBSw6RrbmEgdXQgYmFzZXJhdCBww6UgdGhpcy5jb3JuZXIgaHVyIGJpbGRlbnMgc3RvcmxlayBib3JkZSDDpG5kcmFzLlxyXG4gICAgICAvLyBMZXRhIHVwcCBiaWxkZW4gcGVyIElEIGZyw6VuIHRoaXMuY29udGVudERpdlxyXG4gICAgICAvLyBTw6R0dCBESVY6ZW5zIHN0eWxlIGF0dHJpYnV0IHdpZHRoIHRpbGwgbnkgd2lkdGguXHJcbiAgICAgIC8vIE9tIERJVjplbiByZWRhbiBoYWRlIGhlaWdodCwgc8OkdHQgbnkgaGVpZ2h0IG1lZCBzYW1tYSBhc3BlY3QgcmF0aW8gc29tIGlubmFuLFxyXG4gICAgICAvLyBhbm5hcnMsIHPDpHR0IGludGUgaGVpZ2h0IGFsbHMgKGVsbGVyIG3DtmpsaWd0dmlzIHRpbGwgYXV0bykpXHJcbiAgICAgIGNvbnN0IGZvY3VzUmVjdCA9IHRoaXMuZm9jdXNSZWN0RGl2LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICBpZiAoZm9jdXNSZWN0LndpZHRoIDwgMzIpIHJldHVybjtcclxuICAgICAgLy9jb25zdCBjdXJyZW50V2lkdGggPSBmb2N1c1JlY3Qud2lkdGg7XHJcbiAgICAgIC8vY29uc3QgY3VycmVudEhlaWdodCA9IGZvY3VzUmVjdC5oZWlnaHQ7XHJcbiAgICAgIC8vY29uc3QgaGFzSGVpZ2h0U3R5bGUgPSAhdGhpcy5mb2N1c0VsZW0uc3R5bGUuaGVpZ2h0IHx8IHRoaXMuZm9jdXNFbGVtLnN0eWxlLmhlaWdodCA9PT0gXCJhdXRvXCI7XHJcbiAgICAgIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5tYXgoMzIsIHRoaXMuY29ybmVyLmVuZHNXaXRoKCdsJykgP1xyXG4gICAgICAgIGZvY3VzUmVjdC53aWR0aCArICh0aGlzLnJlc2l6ZVN0YXJ0WCAtIGV2LmNsaWVudFgpIDpcclxuICAgICAgICAvL2ZvY3VzUmVjdC5yaWdodCAtIGV2LmNsaWVudFggOlxyXG4gICAgICAgIGZvY3VzUmVjdC53aWR0aCAtICh0aGlzLnJlc2l6ZVN0YXJ0WCAtIGV2LmNsaWVudFgpKTtcclxuICAgICAgdGhpcy5yZXNpemVTdGFydFggPSBldi5jbGllbnRYO1xyXG4gICAgICAgIC8vZXYuY2xpZW50WCAtIGZvY3VzUmVjdC5sZWZ0O1xyXG4gICAgICBjb25zdCBmYWN0b3IgPSBuZXdXaWR0aCAvIGZvY3VzUmVjdC53aWR0aDtcclxuICAgICAgY29uc3QgbmV3SGVpZ2h0ID0gZm9jdXNSZWN0LmhlaWdodCAqIGZhY3RvcjtcclxuICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUud2lkdGggPSBuZXdXaWR0aCArIFwicHhcIjtcclxuICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICBmb2N1c1JlY3Q6IGdldFJlbGF0YXRpdmVDbGllbnRSZWN0KHRoaXMuY29udGVudERpdi5wYXJlbnRFbGVtZW50LCB0aGlzLmZvY3VzRWxlbSksXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZVVwKGV2KSB7XHJcbiAgICBpZiAodGhpcy5jb3JuZXIgJiYgdGhpcy5zdGF0ZS5mb2N1c1JlY3QgJiYgdGhpcy5mb2N1c0VsZW0pIHtcclxuICAgICAgdGhpcy5jb3JuZXIgPSBudWxsO1xyXG4gICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZSh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGdldFJlY3RDb3JuZXIoZXYpIHtcclxuICAgIGZvciAoY29uc3QgY2xhc3NOYW1lIG9mIChldi50YXJnZXQuY2xhc3NOYW1lIHx8ICcnKS5zcGxpdCgnICcpKSB7XHJcbiAgICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnZnB1bCc6XHJcbiAgICAgICAgICByZXR1cm4gJ3VsJztcclxuICAgICAgICBjYXNlICdmcHVyJzpcclxuICAgICAgICAgIHJldHVybiAnZnB1cic7XHJcbiAgICAgICAgY2FzZSAnZnBscic6XHJcbiAgICAgICAgICByZXR1cm4gJ2xyJztcclxuICAgICAgICBjYXNlICdmcGxsJzpcclxuICAgICAgICAgIHJldHVybiAnbGwnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGV4ZWNJbWFnZUVkaXRBY3Rpb24gKGNtZDogc3RyaW5nKSB7XHJcbiAgICAvL2NvbnNvbGUubG9nKGNtZCk7XHJcbiAgICBpZiAoIXRoaXMuZm9jdXNFbGVtKSByZXR1cm47XHJcbiAgICAvL2NvbnNvbGUubG9nKFwiZG9pbmcgaXRcIik7XHJcbiAgICBzd2l0Y2ggKGNtZCkge1xyXG4gICAgICBjYXNlICdmbG9hdC1sZWZ0JzpcclxuICAgICAgICB0aGlzLmZvY3VzRWxlbS5zdHlsZS5jc3NGbG9hdCA9ICdsZWZ0JztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZmxvYXQtcmlnaHQnOlxyXG4gICAgICAgIHRoaXMuZm9jdXNFbGVtLnN0eWxlLmNzc0Zsb2F0ID0gJ3JpZ2h0JztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAndW5mbG9hdCc6XHJcbiAgICAgICAgdGhpcy5mb2N1c0VsZW0uc3R5bGUuY3NzRmxvYXQgPSAnJztcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICAgIHRoaXMudHJpZ2dlck9uQ2hhbmdlKHRoaXMuY29udGVudERpdi5pbm5lckhUTUwpO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7Zm9jdXNSZWN0OiBnZXRSZWxhdGF0aXZlQ2xpZW50UmVjdCh0aGlzLmNvbnRlbnREaXYucGFyZW50RWxlbWVudCwgdGhpcy5mb2N1c0VsZW0pfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCBkZWZhdWx0QWN0aW9ucyA9IHRoaXMucHJvcHMuZGVmYXVsdEFjdGlvbnMgfHwgYWN0aW9ucztcclxuICAgIGxldCBhY3Rpb25zVG9Vc2UgPSB0aGlzLnByb3BzLmFjdGlvbnMgPyB0aGlzLnByb3BzLmFjdGlvbnMubWFwKGFjdGlvbiA9PlxyXG4gICAgICB0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJyA/XHJcbiAgICAgICAgZGVmYXVsdEFjdGlvbnNbYWN0aW9uXSA6XHJcbiAgICAgICAgZGVmYXVsdEFjdGlvbnNbYWN0aW9uLm5hbWVdID9cclxuICAgICAgICAgIHsgLi4uZGVmYXVsdEFjdGlvbnNbYWN0aW9uLm5hbWVdLCAuLi5hY3Rpb24gfSA6XHJcbiAgICAgICAgICBhY3Rpb24pXHJcbiAgICA6IE9iamVjdC5rZXlzKGRlZmF1bHRBY3Rpb25zKS5tYXAoYWN0aW9uID0+IGRlZmF1bHRBY3Rpb25zW2FjdGlvbl0pO1xyXG5cclxuICAgIGlmICh0aGlzLnN0YXRlLmZvY3VzUmVjdCkge1xyXG4gICAgICBhY3Rpb25zVG9Vc2UgPSBhY3Rpb25zVG9Vc2UuY29uY2F0KGltYWdlRWRpdEFjdGlvbnMoY21kID0+IHRoaXMuZXhlY0ltYWdlRWRpdEFjdGlvbihjbWQpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qge2ZvY3VzUmVjdH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3Qge3JlYWRPbmx5LCByZXBvcnROdW1DaGFycywgbWF4Q2hhcnN9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e3RoaXMucHJvcHMuY2xhc3NOYW1lfT5cclxuICAgICAgeyFyZWFkT25seSAmJiA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5hY3Rpb25iYXJ9PlxyXG4gICAgICAgIHthY3Rpb25zVG9Vc2UubWFwKChhY3Rpb24sIGlkeCkgPT5cclxuICAgICAgICAgIDxidXR0b24ga2V5PXtpZHh9IGNsYXNzTmFtZT17Y2xhc3Nlcy5idXR0b259XHJcbiAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBhY3Rpb24uaWNvbn19XHJcbiAgICAgICAgICAgIHRpdGxlPXthY3Rpb24udGl0bGV9XHJcbiAgICAgICAgICAgIG9uTW91c2VEb3duPXtldj0+e2FjdGlvbi5yZXN1bHQoZXYsIHRoaXMpfX1cclxuICAgICAgICAgICAgb25Nb3VzZVVwPXtldj0+c2V0VGltZW91dCgoKT0+dGhpcy5jb250ZW50RGl2LmZvY3VzKCksIDEwKX1cclxuICAgICAgICAgIC8+KX1cclxuICAgICAgPC9kaXY+fVxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17cmVhZE9ubHkgPyBjbGFzc2VzLnJlYWRvbmx5Q29udGVudCA6IGNsYXNzZXMuY29udGVudH0gc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJywgdG9wOiAwLCBsZWZ0OiAwfX0+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJlZGl0b3JcIlxyXG4gICAgICAgICAgcmVmPXtkaXYgPT4gdGhpcy5jb250ZW50RGl2ID0gZGl2fVxyXG4gICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHdhc2hIdG1sKHRoaXMucHJvcHMuaHRtbCl9fVxyXG4gICAgICAgICAgY29udGVudEVkaXRhYmxlPXshcmVhZE9ubHl9XHJcbiAgICAgICAgICBvblBhc3RlPXtldiA9PiB7XHJcbiAgICAgICAgICAgIGlmICghaXNOYU4obWF4Q2hhcnMpKSB7XHJcbiAgICAgICAgICAgICAgY29uc3Qge3RhcmdldCwgY3VycmVudFRhcmdldH0gPSBldjtcclxuICAgICAgICAgICAgICAvL2NvbnN0IHRleHRCZWluZ092ZXJ3cml0dGVuID0gKHRhcmdldCBhcyBhbnkpLmlubmVyVGV4dCB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgIGNvbnN0IGVkaXRvclRleHQgPSAoY3VycmVudFRhcmdldCAmJiBjdXJyZW50VGFyZ2V0LmlubmVyVGV4dCkgfHwgXCJcIjtcclxuICAgICAgICAgICAgICBjb25zdCB0ZXh0QmVpbmdQYXN0ZWQgPSBldi5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpIHx8IFwiXCI7XHJcbiAgICAgICAgICAgICAgaWYgKGVkaXRvclRleHQubGVuZ3RoICsgdGV4dEJlaW5nUGFzdGVkLmxlbmd0aCA+IG1heENoYXJzKSB7XHJcbiAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfX1cclxuICAgICAgICAgIG9uS2V5VXA9e3JlcG9ydE51bUNoYXJzID8gZXYgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCB7aW5uZXJUZXh0fSA9IChldi50YXJnZXQgYXMgYW55KTtcclxuICAgICAgICAgICAgcmVwb3J0TnVtQ2hhcnMoaW5uZXJUZXh0ID8gaW5uZXJUZXh0Lmxlbmd0aCA6IE5hTik7XHJcbiAgICAgICAgICB9IDogbnVsbH1cclxuICAgICAgICAgIG9uS2V5UHJlc3M9eyFpc05hTihtYXhDaGFycykgPyBldiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtpbm5lclRleHR9ID0gKGV2LnRhcmdldCBhcyBhbnkpO1xyXG4gICAgICAgICAgICBpZiAoaW5uZXJUZXh0ICYmIGlubmVyVGV4dC5sZW5ndGggPj0gbWF4Q2hhcnMpIHtcclxuICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IDogbnVsbH1cclxuICAgICAgICAgIG9uSW5wdXQ9e2V2ID0+IHRoaXMudHJpZ2dlck9uQ2hhbmdlKChldi50YXJnZXQgYXMgYW55KS5pbm5lckhUTUwpfVxyXG4gICAgICAgICAgb25LZXlEb3duPXtldiA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZWFkT25seSkgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAocmVwb3J0TnVtQ2hhcnMgJiYgZXYuY3VycmVudFRhcmdldCkge1xyXG4gICAgICAgICAgICAgIHJlcG9ydE51bUNoYXJzKChldi5jdXJyZW50VGFyZ2V0LmlubmVyVGV4dCB8fCBcIlwiKS5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiS2V5OiBcIiArIGV2LndoaWNoKTtcclxuICAgICAgICAgICAgaWYgKGV2LndoaWNoID49IDM1ICYmIGV2LndoaWNoIDw9IDQwKSB7Ly8gaG9tZS9lbmQvdXAvZG93bi9sZWZ0L3JpZ2h0XHJcbiAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIFByZXZlbnQgZW50aXJlIHBhZ2UgZnJvbSBzY3JvbGxpbmc/P1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldi53aGljaCA9PT0gOSkge1xyXG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7Ly8gVEFCXHJcbiAgICAgICAgICAgICAgaWYgKGV2LnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICBleGVjKFwib3V0ZGVudFwiKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZXhlYyhcImluZGVudFwiKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAoZXYua2V5Q29kZSA9PT0gOCB8fCBldi5rZXlDb2RlID09PSA0NikgJiYgLy8gRGVsZXRlIG9yIEJhY2sgYnV0dG9uc1xyXG4gICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtICYmIHRoaXMuc3RhdGUuZm9jdXNSZWN0KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNFbGVtICYmIHRoaXMuZm9jdXNFbGVtLnBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQodGhpcy5mb2N1c0VsZW0pOyAvLyBSZW1vdmUgbWFya2VkIGltYWdlXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtID0gbnVsbDtcclxuICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtmb2N1c1JlY3Q6IG51bGx9KTtcclxuICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJPbkNoYW5nZSh0aGlzLmNvbnRlbnREaXYuaW5uZXJIVE1MKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfX1cclxuICAgICAgICAvPlxyXG4gICAgICAgIHtmb2N1c1JlY3QgJiYgPGRpdlxyXG4gICAgICAgICAgcmVmPXtkaXYgPT4gdGhpcy5mb2N1c1JlY3REaXYgPSBkaXZ9XHJcbiAgICAgICAgICBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNyZWN0fVxyXG4gICAgICAgICAgb25CbHVyPXt0aGlzLm9uQmx1cn1cclxuICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgb3V0bGluZTogMCxcclxuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgICAgIHRvcDogdGhpcy5zdGF0ZS5mb2N1c1JlY3QudG9wLFxyXG4gICAgICAgICAgICBsZWZ0OiB0aGlzLnN0YXRlLmZvY3VzUmVjdC5sZWZ0LFxyXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5zdGF0ZS5mb2N1c1JlY3Qud2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodDogdGhpcy5zdGF0ZS5mb2N1c1JlY3QuaGVpZ2h0fX0+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnB1bFwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIHRvcDowLCBsZWZ0OjB9fSAvPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMuZm9jdXNwb2ludCArIFwiIGZwdXJcIn0gc3R5bGU9e3twb3NpdGlvbjonYWJzb2x1dGUnLCB0b3A6MCwgcmlnaHQ6MH19IC8+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5mb2N1c3BvaW50ICsgXCIgZnBsclwifSBzdHlsZT17e3Bvc2l0aW9uOidhYnNvbHV0ZScsIGJvdHRvbTowLCByaWdodDowfX0gLz5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLmZvY3VzcG9pbnQgKyBcIiBmcGxsXCJ9IHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgYm90dG9tOjAsIGxlZnQ6MH19IC8+XHJcbiAgICAgICAgPC9kaXY+fVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UmVsYXRhdGl2ZUNsaWVudFJlY3QgKHBhcmVudDogSFRNTEVsZW1lbnQsIGNoaWxkOiBIVE1MRWxlbWVudCkgOiBDbGllbnRSZWN0IHtcclxuICBjb25zdCBwYXJlbnRSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIGNvbnN0IGNoaWxkUmVjdCA9IGNoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIHJldHVybiB7XHJcbiAgICB0b3A6IGNoaWxkUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCArIHBhcmVudC5zY3JvbGxUb3AsXHJcbiAgICBsZWZ0OiBjaGlsZFJlY3QubGVmdCAtIHBhcmVudFJlY3QubGVmdCArIHBhcmVudC5zY3JvbGxMZWZ0LFxyXG4gICAgYm90dG9tOiBjaGlsZFJlY3QuYm90dG9tIC0gcGFyZW50UmVjdC50b3AgKyBwYXJlbnQuc2Nyb2xsVG9wLFxyXG4gICAgcmlnaHQ6IGNoaWxkUmVjdC5yaWdodCAtIHBhcmVudFJlY3QubGVmdCArIHBhcmVudC5zY3JvbGxMZWZ0LFxyXG4gICAgd2lkdGg6IGNoaWxkUmVjdC53aWR0aCxcclxuICAgIGhlaWdodDogY2hpbGRSZWN0LmhlaWdodFxyXG4gIH07XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW1hZ2VFZGl0QWN0aW9ucyhjYikge1xyXG4gIHJldHVybiBbe1xyXG4gICAgbmFtZTogJ2Zsb2F0LWxlZnQnLFxyXG4gICAgaWNvbjogYDxkaXYgc3R5bGU9XCJwb3NpdGlvbjpyZWxhdGl2ZVwiPlxyXG4gICAgICA8aSBjbGFzcz1cImZhIGZhLWFsaWduLXJpZ2h0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7IGxlZnQ6LTRweDt0b3A6MDsgdHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IHRvcFwiPlxyXG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmAsXHJcbiAgICB0aXRsZTogJ0zDpXQgYmlsZGVuIGZseXRhIHbDpG5zdGVyIG9tIHRleHQnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBjYignZmxvYXQtbGVmdCcpXHJcbiAgfSwge1xyXG4gICAgbmFtZTogJ2Zsb2F0LXJpZ2h0JyxcclxuICAgIGljb246IGA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmVcIj5cclxuICAgICAgPGkgY2xhc3M9XCJmYSBmYS1hbGlnbi1sZWZ0XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICA8ZGl2IHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7IHJpZ2h0Oi00cHg7dG9wOjA7IHRyYW5zZm9ybTogc2NhbGUoMC41KTsgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgdG9wXCI+XHJcbiAgICAgICAgPGkgY2xhc3M9XCJmYSBmYS1waWN0dXJlLW9cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YCxcclxuICAgIHRpdGxlOiAnTMOldCBiaWxkZW4gZmx5dGEgaMO2Z2VyIG9tIHRleHQnLFxyXG4gICAgcmVzdWx0OiAoKSA9PiBjYignZmxvYXQtcmlnaHQnKVxyXG4gIH0sIHtcclxuICAgIG5hbWU6ICd1bmZsb2F0JyxcclxuICAgIGljb246IGA8ZGl2IHN0eWxlPVwicG9zaXRpb246cmVsYXRpdmU7XCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XHJcbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjBcIj4mIzgyNTQ7PC9kaXY+XHJcbiAgICAgIDxkaXYgc3R5bGU9XCJwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDpsZWZ0OjA7dHJhbnNmb3JtOiBzY2FsZSgwLjUpOyB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IGJvdHRvbVwiPlxyXG4gICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtcGljdHVyZS1vXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MFwiPl88L2Rpdj5cclxuICAgIDwvZGl2PmAsXHJcbiAgICB0aXRsZTogJ1BsYWNlcmEgYmlsZGVuIHDDpSBlZ2VuIHJhZCcsXHJcbiAgICByZXN1bHQ6ICgpID0+IGNiKCd1bmZsb2F0JylcclxuICB9XTtcclxufVxyXG5cclxuIiwiZXhwb3J0ICogZnJvbSAnLi9vYnNlcnZhYmxlJztcclxuZXhwb3J0ICogZnJvbSAnLi92YWx1ZSc7XHJcbmV4cG9ydCAqIGZyb20gJy4vY29sbGVjdGlvbic7XHJcbmV4cG9ydCAqIGZyb20gJy4vZW1pdHRlcic7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCB7IERvY3VtZW50LCBDb3Vyc2UsIEtub3dsZWRnZVJlcXVpcmVtZW50LCBDb3Vyc2VNb2R1bGUsIFRhc2sgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGZsYXR0ZW4sIEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcclxuaW1wb3J0IHsgV2l0aEdyYXBocyB9IGZyb20gJ2tlZGJhY2tlbmQvcmVwbyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzKGNvdXJzZTogQ291cnNlKSB7XHJcbiAgY29uc3QgdW5jb3ZlcmVkUmVxdWlyZW1lbnRzID0gY291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cy5yZWR1Y2UoKHJlc3VsdCwgaXRlbSkgPT4ge1xyXG4gICAgcmVzdWx0W2l0ZW0uaWRdID0gaXRlbTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfSwge30gYXMgeyBbaWQ6IHN0cmluZ106IEtub3dsZWRnZVJlcXVpcmVtZW50IH0pO1xyXG5cclxuICBjb3Vyc2UudGFza3MuZm9yRWFjaCh0YXNrID0+IHtcclxuICAgIHRhc2sua25vd2xlZGdlUmVxdWlyZW1lbnRzLmZvckVhY2goa3IgPT4ge1xyXG4gICAgICBkZWxldGUgdW5jb3ZlcmVkUmVxdWlyZW1lbnRzW2tyLmlkXTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gT2JqZWN0LmtleXModW5jb3ZlcmVkUmVxdWlyZW1lbnRzKS5tYXAoaWQgPT4gdW5jb3ZlcmVkUmVxdWlyZW1lbnRzW2lkXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVxc1JlZmVyZW5jaW5nRG9jIHtcclxuICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IEFycmF5PHtpZDogc3RyaW5nfT5cclxuICBhYmlsaXRpZXM6IEFycmF5PHtpZDogc3RyaW5nfT5cclxuICBjZW50cmFsQ29udGVudDogQXJyYXk8e2lkOiBzdHJpbmd9PlxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRzTm90Q292ZXJlZEJ5VGFza3MoY291cnNlOiBDb3Vyc2UpIDoge1tpZDogc3RyaW5nXTogdHJ1ZX0ge1xyXG4gIHJldHVybiBnZXRJZHNOb3RDb3ZlcmVkQnlSZXFSZWZlcmVuY2luZ0RvY3MoXHJcbiAgICBbY291cnNlIGFzIFdpdGhHcmFwaHM8Q291cnNlLCBcImFiaWxpdGllc1wiIHwgXCJjZW50cmFsQ29udGVudFwiIHwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIj5dLFxyXG4gICAgY291cnNlLnRhc2tzIGFzIFdpdGhHcmFwaHM8VGFzaywgXCJhYmlsaXRpZXNcIiB8IFwiY2VudHJhbENvbnRlbnRcIiB8IFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCI+W10pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRzTm90Q292ZXJlZEJ5UmVxUmVmZXJlbmNpbmdEb2NzKFxyXG4gIHRlbXBsYXRlczogUmVxc1JlZmVyZW5jaW5nRG9jW10sXHJcbiAgZG9jc0JlaW5nQ2hlY2tlZDogUmVxc1JlZmVyZW5jaW5nRG9jW10pIDoge1tpZDogc3RyaW5nXTogdHJ1ZX1cclxue1xyXG4gIGNvbnN0IHVuY292ZXJlZElkcyA9IHt9O1xyXG4gIC8vIDEuIE1hcmsgdGhlIGlkcyBvZiBhbGwga25vd2xlZGdlIHJlcXVpcmVtZW50cywgYWJpbGl0aWVzIGFuZCBjZW50cmFsIGNvbnRlbnQgZm9yIHRoaXMgY291cnNlOlxyXG4gIHRlbXBsYXRlcy5mb3JFYWNoKGNvdXJzZSA9PiB7XHJcbiAgICBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzLmZvckVhY2gociA9PiB7XHJcbiAgICAgIHVuY292ZXJlZElkc1tyLmlkXSA9IHRydWU7XHJcbiAgICB9KTtcclxuICAgIGNvdXJzZS5hYmlsaXRpZXMuZm9yRWFjaChhID0+IHtcclxuICAgICAgdW5jb3ZlcmVkSWRzW2EuaWRdID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gICAgY291cnNlLmNlbnRyYWxDb250ZW50LmZvckVhY2goY2MgPT4ge1xyXG4gICAgICB1bmNvdmVyZWRJZHNbY2MuaWRdID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG4gIC8vIDIuIExpc3QgYWxsIHRhc2tzIGFuZCB1bm1hcmsgYWxsIGlkcyB0aGF0IHRoZXkgcmVmZXIgdG9cclxuICBkb2NzQmVpbmdDaGVja2VkLmZvckVhY2goZG9jID0+IHtcclxuICAgIGRvYy5rbm93bGVkZ2VSZXF1aXJlbWVudHMuZm9yRWFjaChrciA9PiB7XHJcbiAgICAgIGRlbGV0ZSB1bmNvdmVyZWRJZHNba3IuaWRdO1xyXG4gICAgfSk7XHJcbiAgICBkb2MuYWJpbGl0aWVzLmZvckVhY2goYSA9PiB7XHJcbiAgICAgIGRlbGV0ZSB1bmNvdmVyZWRJZHNbYS5pZF07XHJcbiAgICB9KTtcclxuICAgIGRvYy5jZW50cmFsQ29udGVudC5mb3JFYWNoKGNjID0+IHtcclxuICAgICAgZGVsZXRlIHVuY292ZXJlZElkc1tjYy5pZF07XHJcbiAgICB9KTtcclxuICB9KTtcclxuICByZXR1cm4gdW5jb3ZlcmVkSWRzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2FuaXR5Q2hlY2sgKGNvdXJzZTogQ291cnNlKSB7XHJcbiAgZnVuY3Rpb24gaGFzRHVwbGljYXRlVGFza3MoY291cnNlOiBDb3Vyc2UpIHtcclxuICAgIGNvbnN0IHRhc2tJZHM6IHtbaWQ6c3RyaW5nXTogYm9vbGVhbn0gPSB7fTtcclxuICAgIHJldHVybiBmbGF0dGVuKGNvdXJzZS5tb2R1bGVzLm1hcChtb2R1bGUgPT4gbW9kdWxlLnRhc2tJZHMubWFwKHRhc2tJZCA9PiB7XHJcbiAgICAgIGlmICh0YXNrSWRzW3Rhc2tJZF0pIHtcclxuICAgICAgICBjb25zdCB0YXNrID0gY291cnNlLnRhc2tzLmZpbmQodCA9PiB0LmlkID09PSB0YXNrSWQpO1xyXG4gICAgICAgIHJldHVybiBMYFNhbW1hIHVwcGdpZnQgZsO2cmVrb21tZXIgZmxlcmEgZ8OlbmdlcjogXCIke3Rhc2submFtZX1cImA7XHJcbiAgICAgIH1cclxuICAgICAgdGFza0lkc1t0YXNrSWRdID0gdHJ1ZTtcclxuICAgIH0pLmZpbHRlcih4ID0+IHgpKSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0YXNrc1dpdGhTYW1lVXJsKGNvdXJzZTogQ291cnNlKSB7XHJcbiAgICBjb25zdCB0YXNrVXJsczoge1t1cmw6c3RyaW5nXTogVGFza30gPSB7fTtcclxuICAgIHJldHVybiBjb3Vyc2UudGFza3MubWFwKHRhc2sgPT4ge1xyXG4gICAgICBpZiAodGFzay51cmwpIHtcclxuICAgICAgICBpZiAodGFza1VybHNbdGFzay51cmxdKSB7XHJcbiAgICAgICAgICByZXR1cm4gTGBUdsOlIHVwcGdpZnRlciBwZWthciBww6Ugc2FtbWEgVVJMOiBcIiR7dGFza1VybHNbdGFzay51cmxdLm5hbWV9XCIgc2FtdCBcIiR7dGFzay5uYW1lfVwiYDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFza1VybHNbdGFzay51cmxdID0gdGFzaztcclxuICAgICAgfVxyXG4gICAgfSkuZmlsdGVyKHggPT4geCk7ICBcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhhc0VtcHR5TW9kdWxlTmFtZXMoY291cnNlOiBDb3Vyc2UpIHtcclxuICAgIHJldHVybiBjb3Vyc2UubW9kdWxlcy5zb21lIChtb2R1bGUgPT4gbW9kdWxlLm5hbWUgPT09IFwiXCIpICYmXHJcbiAgICAgIExgRGV0IGZpbm5zIG1pbnN0IGVuIG1vZHVsIHV0YW4gYW5naXZldCBuYW1uYDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhhc0R1cGxpY2F0ZU1vZHVsZU5hbWVzKGNvdXJzZTogQ291cnNlKSB7XHJcbiAgICBjb25zdCBtb2R1bGVOYW1lczoge1tuYW1lOiBzdHJpbmddOiB0cnVlfSA9IHt9O1xyXG4gICAgcmV0dXJuIGNvdXJzZS5tb2R1bGVzLm1hcChtb2R1bGUgPT4ge1xyXG4gICAgICBpZiAobW9kdWxlLm5hbWUgJiYgbW9kdWxlTmFtZXNbbW9kdWxlLm5hbWVdKSB7XHJcbiAgICAgICAgcmV0dXJuIExgTW9kdWxlbiBtZWQgbmFtbiAke21vZHVsZS5uYW1lfSBmw7ZyZWtvbW1lciBmbGVyYSBnw6VuZ2VyYDtcclxuICAgICAgfVxyXG4gICAgICBpZiAobW9kdWxlLm5hbWUpIG1vZHVsZU5hbWVzW21vZHVsZS5uYW1lXSA9IHRydWU7XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY29uc3QgY2hlY2tzID0gZmxhdHRlbihbXHJcbiAgICBoYXNEdXBsaWNhdGVUYXNrcyhjb3Vyc2UpLFxyXG4gICAgdGFza3NXaXRoU2FtZVVybChjb3Vyc2UpLFxyXG4gICAgaGFzRW1wdHlNb2R1bGVOYW1lcyhjb3Vyc2UpLFxyXG4gICAgaGFzRHVwbGljYXRlTW9kdWxlTmFtZXMoY291cnNlKVxyXG4gIF0pO1xyXG5cclxuICByZXR1cm4gY2hlY2tzLmZpbHRlciAocmVzdWx0ID0+IHJlc3VsdCk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGFza3NQZXJJZCAoY291cnNlOiBDb3Vyc2UpIHtcclxuICBjb25zdCByZXN1bHQ6IHtbaWQ6IHN0cmluZ106IFRhc2tbXX0gPSB7fTtcclxuICBmdW5jdGlvbiBhZGQoaWQ6IHN0cmluZywgdGFzazogVGFzaykge1xyXG4gICAgY29uc3QgbGlzdCA9IHJlc3VsdFtpZF0gfHwgKHJlc3VsdFtpZF0gPSBbXSk7XHJcbiAgICBsaXN0LnB1c2godGFzayk7XHJcbiAgfVxyXG4gIGNvdXJzZS50YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xyXG4gICAgdGFzay5hYmlsaXRpZXMuZm9yRWFjaChhID0+IGFkZChhLmlkLCB0YXNrKSk7XHJcbiAgICB0YXNrLmNlbnRyYWxDb250ZW50LmZvckVhY2goYyA9PiBhZGQoYy5pZCwgdGFzaykpO1xyXG4gICAgdGFzay5mdXR1cmVBYmlsaXRpZXMuZm9yRWFjaChmYSA9PiBhZGQoZmEsIHRhc2spKTtcclxuICB9KTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ291cnNlLCBDb3Vyc2VNb2R1bGUsIFRhc2ssIERvY3VtZW50IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tIFwiLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94XCI7XHJcbmltcG9ydCB7IGFycmF5VG9Mb29rdXAgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IGdldFVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cyB9IGZyb20gJy4uL2NvdXJzZXMvYnVzaW5lc3MtbG9naWMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBvcHRpb25zOiAoRG9jdW1lbnQgJiB7Z3JvdXA/OiBzdHJpbmd9KVtdO1xyXG4gIHRpdGxlO1xyXG4gIG1hcmtNb2RlOiBib29sZWFuO1xyXG4gIG1hcmtlZElkczogc3RyaW5nW107XHJcbiAgbWlncmF0ZWRJZHM/OiB7W2lkOiBzdHJpbmddOiBhbnl9O1xyXG4gIHVuY292ZXJlZElkcz86IHtbaWQ6IHN0cmluZ106IHRydWV9O1xyXG4gIG9uTWFya0NoYW5nZWQ6IChpZDogc3RyaW5nLCBpc01hcmtlZDogYm9vbGVhbikgPT4gdm9pZDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNlbGVjdFJlbGF0ZWREb2NzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge307XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7b3B0aW9ucywgdGl0bGUsIG1hcmtlZElkcywgbWFya01vZGUsIG1pZ3JhdGVkSWRzLCB1bmNvdmVyZWRJZHN9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IGdyb3VwZWRPcHRpb25zID0gYXJyYXlUb0xvb2t1cChvcHRpb25zLCBkID0+IGQuZ3JvdXAgfHwgXCJkZWZhdWx0XCIpO1xyXG4gICAgY29uc3QgZ3JvdXBzID0gT2JqZWN0LmtleXMoZ3JvdXBlZE9wdGlvbnMpO1xyXG4gICAgcmV0dXJuIDxPcGVuQ2xvc2VCb3ggdGl0bGU9ezxwPnt0aXRsZX08L3A+fSBjbGFzc05hbWU9XCJsYXJnZXJcIj5cclxuICAgICAgICB7Z3JvdXBzLm1hcChncm91cCA9PiA8UmVhY3QuRnJhZ21lbnQga2V5PXtncm91cH0+XHJcbiAgICAgICAgICB7Z3JvdXBzLmxlbmd0aCA9PT0gMSA/IG51bGwgOiA8Pjxici8+PGg1Pntncm91cH08L2g1Pjxoci8+PC8+fVxyXG4gICAgICAgICAge2dyb3VwZWRPcHRpb25zW2dyb3VwXS5tYXAob3B0aW9uID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaXNNYXJrZWQgPSBtYXJrZWRJZHMuc29tZSh4ID0+IHggPT09IG9wdGlvbi5pZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzTWlncmF0ZWQgPSBtaWdyYXRlZElkcyAmJiAhIW1pZ3JhdGVkSWRzW29wdGlvbi5pZF07XHJcbiAgICAgICAgICAgIGNvbnN0IGlzVW5jb3ZlcmVkID0gdW5jb3ZlcmVkSWRzICYmIHVuY292ZXJlZElkc1tvcHRpb24uaWRdO1xyXG4gICAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCIga2V5PXtvcHRpb24uaWR9IG9uQ2xpY2s9eygpPT5cclxuICAgICAgICAgICAgICBtYXJrTW9kZSAmJiB0aGlzLnByb3BzLm9uTWFya0NoYW5nZWQob3B0aW9uLmlkLCAhaXNNYXJrZWQpfT5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCIgK1xyXG4gICAgICAgICAgICAgICAgKG1hcmtNb2RlID8gXCIgc2VsZWN0YWJsZVwiIDogXCJcIikgK1xyXG4gICAgICAgICAgICAgICAgKGlzTWFya2VkID8gXCIgbWFya2VkR3JlZW5cIiA6IChpc1VuY292ZXJlZCA/XHJcbiAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZFJlZFwiOlxyXG4gICAgICAgICAgICAgICAgICBcIlwiKSkgK1xyXG4gICAgICAgICAgICAgICAgKGlzTWlncmF0ZWQgPyBcIiBtaWdyYXRlZFwiIDogXCJcIil9XHJcbiAgICAgICAgICAgICAgICB0aXRsZT17aXNNaWdyYXRlZCA/XHJcbiAgICAgICAgICAgICAgICAgIG1hcmtNb2RlID9cclxuICAgICAgICAgICAgICAgICAgICBgU2tvbHZlcmtldCBoYXIgdXBwZGF0ZXJhdCB0ZXh0ZW5zIGZvcm11bGVyaW5nLiBEdSBrYW4gZ3JhbnNrYSDDpG5kcmluZ2VuIGdlbm9tIGF0dCBmw6RsbGEgdXQgdmFybmluZ3Nib3hlbiB0aWxsIGjDtmdlciwgbWVkIHRpdGVsIFwiVXBwZGF0ZXJhZGUgZm9ybXVsZXJpbmdhciBmcsOlbiBTa29sdmVya2V0XCJgIDpcclxuICAgICAgICAgICAgICAgICAgICBgU2tvbHZlcmtldCBoYXIgdXBwZGF0ZXJhdCB0ZXh0ZW5zIGZvcm11bGVyaW5nLCBtZW4gZGV0dGEgaGFyIMOkbm51IGludGUgZ3JhbnNrYXRzIGF2IHVwcGdpZnRlbnMgcmVkaWdlcmluZ3NiZWjDtnJpZ2VgIDpcclxuICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkfT5cclxuICAgICAgICAgICAgICAgIDxwIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBvcHRpb24ubmFtZX19IC8+XHJcbiAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+O1xyXG4gICAgICAgICAgfSl9XHJcbiAgICAgICAgPC9SZWFjdC5GcmFnbWVudD4pfVxyXG4gICAgPC9PcGVuQ2xvc2VCb3g+XHJcbiAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIHRleHQ6IHN0cmluZztcclxuICAgIHRhZz86ICdpbnB1dCcgfCAndGV4dGFyZWEnXHJcbiAgICBlYWdlcj86IGJvb2xlYW47XHJcbiAgICBvbkNoYW5nZTogKG5ld05hbWU6IHN0cmluZykgPT4gdm9pZDtcclxuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nOyAvLyBJZiB0ZXh0IGlzIGVtcHR5LCB0aGlzIHdpbGwgYmUgdGhlIHBsYWNlaG9sZGVyXHJcbiAgICBjbGlja0FkdmVydGlzZVRleHQ/OiBzdHJpbmc7XHJcbiAgICBtYXhDaGFycz86IG51bWJlcjtcclxuICAgIHJlYWRPbmx5PzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICAgIGVkaXRNb2RlOiBib29sZWFuO1xyXG4gICAgcnVudGltZVN0eWxlOiBPYmplY3Q7XHJcbiAgICB0ZXh0OiBzdHJpbmcgfCBudWxsO1xyXG59XHJcblxyXG4vKiogXHJcbiAqIE1ha2VzIGEgdGV4dCBlbGVtZW50IChzdWNoIGFzIGFuIEEgb3IgUCB0YWcpIHBvc3NpYmxlIHRvIHJlcGxhY2Ugd2l0aCBhbiBpbnB1dCBlbGVtZW50IG9mIHRoZSBzYW1lIENTUyBzdHlsZSwgZm9yIGV4YW1wbGUgYnkgY2xpY2tpbmcgb24gaXQuXHJcbiAqIFxyXG4qL1xyXG5leHBvcnQgY2xhc3MgUmVuYW1lYWJsZVRleHQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICAgIGxhYmVsOiBIVE1MRWxlbWVudDtcclxuICAgIGlucHV0OiBIVE1MSW5wdXRFbGVtZW50IHwgSFRNTFRleHRBcmVhRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgICAgICBzdXBlcihwcm9wcyk7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgICAgICAgZWRpdE1vZGU6IGZhbHNlLFxyXG4gICAgICAgICAgICBydW50aW1lU3R5bGU6IG51bGwsXHJcbiAgICAgICAgICAgIHRleHQ6IHByb3BzLnRleHQgfHwgXCJcIlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnRleHQgIT09IG5leHRQcm9wcy50ZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe3RleHQ6IG5leHRQcm9wcy50ZXh0IHx8IFwiXCJ9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnN0YXRlLnRleHQgfHwgXCJcIjtcclxuICAgICAgICByZXR1cm4gPGRpdlxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcInJlbmFtZWFibGUtdGV4dFwiICsgKHRleHQgPyBcIlwiIDogXCIgdW5uYW1lZFwiKSArICh0aGlzLnByb3BzLnJlYWRPbmx5ID8gXCIgZGlzYWJsZWRcIiA6IFwiXCIpfVxyXG4gICAgICAgICAgICAgICAgdGFiSW5kZXg9e3RoaXMuc3RhdGUuZWRpdE1vZGUgPyB1bmRlZmluZWQgOiAwfVxyXG4gICAgICAgICAgICAgICAgb25Gb2N1cz17KGUpPT57dGhpcy5yZW5hbWUoKX19XHJcbiAgICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOiBcIjEwMCVcIn19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgcmVmPXtsYWJlbCA9PiB0aGlzLmxhYmVsID0gbGFiZWx9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiB0aGlzLnN0YXRlLmVkaXRNb2RlID8gJ25vbmUnIDogJydcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgIHt0ZXh0IHx8IHRoaXMucHJvcHMuY2xpY2tBZHZlcnRpc2VUZXh0fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAge3RoaXMucHJvcHMudGFnID09PSAndGV4dGFyZWEnID9cclxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSByZWY9e2lucHV0ID0+IHRoaXMuaW5wdXQgPSBpbnB1dH1cclxuICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGg9e3RoaXMucHJvcHMubWF4Q2hhcnN9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi50aGlzLnN0YXRlLnJ1bnRpbWVTdHlsZSwgZGlzcGxheTogdGhpcy5zdGF0ZS5lZGl0TW9kZSA/ICcnIDogJ25vbmUnfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzPXtldj0+JChldi50YXJnZXQpLnNlbGVjdCgpfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQmx1cj17dGhpcy5vbkJsdXIuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGV4dH1cclxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMub25LZXlEb3duLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17dGhpcy5zdGF0ZS5lZGl0TW9kZSA/IDAgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgICAgICAgICAvPiA6IFxyXG4gICAgICAgICAgICAgICAgPGlucHV0IHJlZj17aW5wdXQgPT4gdGhpcy5pbnB1dCA9IGlucHV0fVxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICBtYXhMZW5ndGg9e3RoaXMucHJvcHMubWF4Q2hhcnN9XHJcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3suLi50aGlzLnN0YXRlLnJ1bnRpbWVTdHlsZSwgZGlzcGxheTogdGhpcy5zdGF0ZS5lZGl0TW9kZSA/ICcnIDogJ25vbmUnfX1cclxuICAgICAgICAgICAgICAgICAgICBvbkZvY3VzPXtldj0+JChldi50YXJnZXQpLnNlbGVjdCgpfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQmx1cj17dGhpcy5vbkJsdXIuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGV4dH1cclxuICAgICAgICAgICAgICAgICAgICBvbktleURvd249e3RoaXMub25LZXlEb3duLmJpbmQodGhpcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DaGFuZ2UuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgICAgICB0YWJJbmRleD17dGhpcy5zdGF0ZS5lZGl0TW9kZSA/IDAgOiB1bmRlZmluZWR9XHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3RoaXMucHJvcHMucGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICB9XHJcblxyXG4gICAgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykgeyAvLyBFU0NcclxuICAgICAgICAgICAgdGhpcy5pbnB1dC52YWx1ZSA9IHRoaXMucHJvcHMudGV4dCB8fCBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0LmJsdXIoKTtcclxuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMTMpIHsgLy8gRU5URVJcclxuICAgICAgICAgICAgdGhpcy5wcm9wYWdhdGVPbkNoYW5nZSh0aGlzLmlucHV0LnZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVkaXRNb2RlOiBmYWxzZSwgdGV4dDogdGhpcy5pbnB1dC52YWx1ZSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25CbHVyKGU6IEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5wcm9wYWdhdGVPbkNoYW5nZSh0aGlzLmlucHV0LnZhbHVlKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZWRpdE1vZGU6IGZhbHNlLCB0ZXh0OiB0aGlzLmlucHV0LnZhbHVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3BhZ2F0ZWRPbkNoYW5nZTogc3RyaW5nO1xyXG5cclxuICAgIHByb3BhZ2F0ZU9uQ2hhbmdlKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGFnYXRlZE9uQ2hhbmdlICE9IG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcGFnYXRlZE9uQ2hhbmdlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgIHRoaXMucHJvcHMub25DaGFuZ2UobmV3VmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkNoYW5nZShlOiBFdmVudCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyB0ZXh0OiB0aGlzLmlucHV0LnZhbHVlIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLmVhZ2VyKSB0aGlzLnByb3BhZ2F0ZU9uQ2hhbmdlKHRoaXMuaW5wdXQudmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmFtZSh0eHQ/OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lZGl0TW9kZSB8fCB0aGlzLnByb3BzLnJlYWRPbmx5KSByZXR1cm47XHJcbiAgICAgICAgdHh0ID0gdHh0IHx8IHRoaXMuc3RhdGUudGV4dCB8fCBcIlwiO1xyXG4gICAgICAgIGNvbnN0IGxhYmVsID0gJCh0aGlzLmxhYmVsKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgdGV4dDogdHh0LFxyXG4gICAgICAgICAgICBlZGl0TW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgcnVudGltZVN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IGxhYmVsLmNzcygndGV4dEFsaWduJyksXHJcbiAgICAgICAgICAgICAgICBmb250U2l6ZTogbGFiZWwuY3NzKCdmb250LXNpemUnKSxcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdUb3A6IGxhYmVsLmNzcygncGFkZGluZ1RvcCcpLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbTogbGFiZWwuY3NzKCdwYWRkaW5nQm90dG9tJyksXHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdDogbGFiZWwuY3NzKCdwYWRkaW5nTGVmdCcpLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0OiBsYWJlbC5jc3MoJ3BhZGRpbmdSaWdodCcpLFxyXG4gICAgICAgICAgICAgICAgbWFyZ2luVG9wOiBsYWJlbC5jc3MoJ21hcmdpblRvcCcpLFxyXG4gICAgICAgICAgICAgICAgbWFyZ2luQm90dG9tOiBsYWJlbC5jc3MoJ21hcmdpbkJvdHRvbScpLFxyXG4gICAgICAgICAgICAgICAgbWFyZ2luTGVmdDogbGFiZWwuY3NzKCdtYXJnaW5MZWZ0JyksXHJcbiAgICAgICAgICAgICAgICBtYXJnaW5SaWdodDogbGFiZWwuY3NzKCdtYXJnaW5SaWdodCcpLFxyXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiBsYWJlbC5jc3MoJ2JvcmRlclJhZGl1cycpLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBsYWJlbC5jc3MoJ2JhY2tncm91bmRDb2xvcicpLFxyXG4gICAgICAgICAgICAgICAgbGluZUhlaWdodDogbGFiZWwuY3NzKCdsaW5lSGVpZ2h0JyksXHJcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBsYWJlbC5jc3MoJ2ZvbnRXZWlnaHQnKSxcclxuICAgICAgICAgICAgICAgIG91dExpbmU6IDAsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJTdHlsZTogJ25vbmUnLFxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBcIjEwMCVcIixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcclxuICAgICAgICAgICAgICAgIGJveFNpemluZzogXCJib3JkZXItYm94XCIsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCAoKT0+JCh0aGlzLmlucHV0KS5mb2N1cygpKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQge1VzZXJ9IGZyb20gJy4uLy4uL2NvbnRyYWN0cy9rZWQtbW9kZWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCB1c2VycyA6IFVzZXJbXSA9IFt7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJBZG1pbmlzdHJhdMO2clwiLFxyXG4gICAgbWFpbDogXCJ2ZW1lbmRvQGtlZHNjaG9vbHMuY29tXCIsXHJcbiAgICByb2xlczogWydBRE1JTicsJ0VNUExPWUVFJ10sXHJcbiAgICBzY2hvb2w6ICdLRUQnLFxyXG4gICAgdXNlcm5hbWU6IFwiYWRtaW5cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIkRhdmlkXCIsXHJcbiAgICBtYWlsOiBcImRhdmlkLmZhaGxhbmRlckB2ZW1lbmRvLnNlXCIsXHJcbiAgICByb2xlczogWydBRE1JTicsJ0VNUExPWUVFJ10sXHJcbiAgICBzY2hvb2w6ICdLRUQnLFxyXG4gICAgdXNlcm5hbWU6IFwiZGF2aWRcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2MVwiLFxyXG4gICAgbWFpbDogXCJ1Ync2NzU3QGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgcm9sZXM6IFsnU1RVREVOVCddLFxyXG4gICAgc2Nob29sOiAnVXBwc2FsYScsXHJcbiAgICB1c2VybmFtZTogXCJ1Ync2NzU3QGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXYyXCIsXHJcbiAgICBtYWlsOiBcInVtczQzMDJAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCIsXHJcbiAgICByb2xlczogWydTVFVERU5UJ10sXHJcbiAgICBzY2hvb2w6ICdVcHBzYWxhJyxcclxuICAgIHVzZXJuYW1lOiBcInVtczQzMDJAZWR1Lmt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJUZXN0LUxpdmUtRWxldjNcIixcclxuICAgIG1haWw6IFwidWhoMzQ2MEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIixcclxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcclxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxyXG4gICAgdXNlcm5hbWU6IFwidWhoMzQ2MEBlZHUua3Vuc2thcHNneW1uYXNpZXQuc2VcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIlRlc3QtTGl2ZS1FbGV2NChmZWwgZ29hbHMgaXNzdWUpXCIsXHJcbiAgICBtYWlsOiBcInVtdDY4MjZAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcclxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXHJcbiAgICB1c2VybmFtZTogXCJ1bXQ2ODI2QGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY1KGZ1dHVyZSBhYmlsaXRpZXMpXCIsXHJcbiAgICBtYWlsOiBcInVqZzM4MzNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcclxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXHJcbiAgICB1c2VybmFtZTogXCJ1amczODMzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUVsZXY2KGZ1dHVyZSBhYmlsaXRpZXMpXCIsXHJcbiAgICBtYWlsOiBcInVqdDEzNjNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcclxuICAgIHNjaG9vbDogXCJVcHBzYWxhXCIsXHJcbiAgICB1c2VybmFtZTogXCJ1anQxMzYzQGVkdS5rdW5za2Fwc3Nrb2xhbi5zZVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiVGVzdC1MaXZlLUzDpHJhcmUxXCIsXHJcbiAgICBtYWlsOiBcInJpY2thcmQuYWxiZXJ0c3NvbkBrdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgcm9sZXM6IFsnRU1QTE9ZRUUnXSxcclxuICAgIHNjaG9vbDogJ1VwcHNhbGEnLFxyXG4gICAgdXNlcm5hbWU6IFwicmlja2FyZC5hbGJlcnRzc29uQGt1bnNrYXBzZ3ltbmFzaWV0LnNlXCJcclxufSx7XHJcbiAgICBkaXNwbGF5TmFtZTogXCJFRFNUZXN0VXNlckd5bW5hc2l1bVwiLFxyXG4gICAgbWFpbDogXCJ1aGgzMjAwQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgLy9tYWlsOiBcIlVISDMyMDBARURVLktVTlNLQVBTR1lNTkFTSUVULlNFXCIsXHJcbiAgICByb2xlczogW1wiU1RVREVOVFwiXSxcclxuICAgIHVzZXJuYW1lOiBcIkVEU1Rlc3RVc2VyMVwiLFxyXG4gICAgc2Nob29sOiBcIktFRFwiLFxyXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcInZlbWVuZG8uZWxldkBrZWRzY2hvb2xzLmNvbVwiLFxyXG4gICAgbWFpbDogXCJ2ZW1lbmRvLmVsZXZAa2Vkc2Nob29scy5jb21cIixcclxuICAgIHJvbGVzOiBbXCJTVFVERU5UXCJdLFxyXG4gICAgdXNlcm5hbWU6IFwidmVtZW5kby5lbGV2QGtlZHNjaG9vbHMuY29tXCIsXHJcbiAgICBzY2hvb2w6IFwiS0VEXCIsXHJcbiAgICBzY2hvb2xUeXBlOiBcIkd5bW5hc2l1bVwiXHJcbn0se1xyXG4gICAgZGlzcGxheU5hbWU6IFwiTWVkYXJiZXRhcmUgTmFja2FcIixcclxuICAgIG1haWw6IFwibWVkYXJiZXRhcmUubmFja2FAa3Vuc2thcHNza29sYW4uc2VcIixcclxuICAgIHJvbGVzOiBbXCJFTVBMT1lFRVwiXSxcclxuICAgIHVzZXJuYW1lOiBcIm1lZGFyYmV0YXJlLm5hY2thL0tTXCIsXHJcbiAgICBzY2hvb2w6IFwiTmFja2FcIixcclxuICAgIHNjaG9vbFR5cGU6IFwiR3J1bmRza29sb3JcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIk1lZGFyYmV0YXJlIEdsb2JlblwiLFxyXG4gICAgbWFpbDogXCJtZWRhcmJldGFyZS5nbG9iZW5Aa3Vuc2thcHNneW1uYXNpZXQuc2VcIixcclxuICAgIHJvbGVzOiBbXCJFTVBMT1lFRVwiXSxcclxuICAgIHVzZXJuYW1lOiBcIm1lZGFyYmV0YXJlLmdsb2Jlbi9LU1wiLFxyXG4gICAgc2Nob29sOiBcIkdsb2JlblwiLFxyXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgR2xvYmVuXCIsXHJcbiAgICBtYWlsOiBcImVsZXYuZ2xvYmVuQGVkdS5rdW5za2Fwc2d5bW5hc2lldC5zZVwiLFxyXG4gICAgc2Nob29sR3JhZGU6IDIsXHJcbiAgICByb2xlczogWydTVFVERU5UJ10sXHJcbiAgICB1c2VybmFtZTogXCJlbGV2Lmdsb2JlblwiLFxyXG4gICAgc2Nob29sOiBcIkdsb2JlblwiLFxyXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgQm9yw6VzXCIsXHJcbiAgICBtYWlsOiBcImVsZXYuYm9yYXNAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICBzY2hvb2xHcmFkZTogNyxcclxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcclxuICAgIHVzZXJuYW1lOiBcImVsZXYuYm9yYXNcIixcclxuICAgIHNjaG9vbDogXCJCb3LDpXNcIixcclxuICAgIHNjaG9vbFR5cGU6IFwiR3J1bmRza29sb3JcIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIkVsZXYgQm9ybMOkbmdlXCIsXHJcbiAgICBtYWlsOiBcImVsZXYuYm9ybGFuZ2VAZWR1Lmt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICBzY2hvb2xHcmFkZTogOSxcclxuICAgIHJvbGVzOiBbJ1NUVURFTlQnXSxcclxuICAgIHVzZXJuYW1lOiAnZWxldi5ib3JsYW5nZS9LUycsXHJcbiAgICBzY2hvb2w6ICdCb3Jsw6RuZ2UnLFxyXG4gICAgc2Nob29sVHlwZTogXCJHeW1uYXNpdW1cIlxyXG59LHtcclxuICAgIGRpc3BsYXlOYW1lOiBcIlJvbGwtbMO2c1wiLFxyXG4gICAgbWFpbDogXCJub25lQGt1bnNrYXBzc2tvbGFuLnNlXCIsXHJcbiAgICB1c2VybmFtZTogXCJub25lXCIsXHJcbiAgICByb2xlczogW11cclxufV07XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7TH0gZnJvbSAnLi91dGlscyc7XHJcbmltcG9ydCB7ZGJ9IGZyb20gJy4uL2dsb2JhbHMvZGInO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kV3JpdGVyIH0gZnJvbSAna2VkYmFja2VuZC9yZXBvJztcclxuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXIvc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0nO1xyXG5cclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgZXJyb3JzOiBFcnJvclN0cnVjdFtdO1xyXG4gIGluZm9zOiBzdHJpbmdbXTtcclxuICAvL2RiV3JpdGVyUmV0cnlhYmxlRXJyb3I/OiBFcnJvcjtcclxuICBkYldyaXRlcklzU2F2aW5nPzogYm9vbGVhbjtcclxuICBkYldyaXRlcklzRWRpdGVkPzogYm9vbGVhbjtcclxufVxyXG5cclxuaW50ZXJmYWNlIEVycm9yU3RydWN0IHtcclxuICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgcmV0cnlhYmxlPzogYm9vbGVhbjtcclxuICBkZXRhaWxzPzogRXJyb3I7XHJcbiAgc2hvd0RldGFpbHM/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRXJyb3JTdWNjZXNzRmVlZGJhY2sgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb25zdHJ1Y3RvciAocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlPXtcclxuICAgICAgZXJyb3JzOiBbXSxcclxuICAgICAgaW5mb3M6IFtdXHJcbiAgICB9O1xyXG4gICAgdGhpcy5fdW5oYW5kbGVkUmVqZWN0aW9uID0gdGhpcy5fdW5oYW5kbGVkUmVqZWN0aW9uLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9lcnJvciA9IHRoaXMuX2Vycm9yLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9jdXN0b21FcnJvciA9IHRoaXMuX2N1c3RvbUVycm9yLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9vbkluZm8gPSB0aGlzLl9vbkluZm8uYmluZCh0aGlzKTtcclxuICAgIHRoaXMuX2RiV3JpdGVyRXJyb3IgPSB0aGlzLl9kYldyaXRlckVycm9yLmJpbmQodGhpcyk7XHJcbiAgICB0aGlzLl9kYldyaXRlclN0YXRlQ2hhbmdlZCA9IHRoaXMuX2RiV3JpdGVyU3RhdGVDaGFuZ2VkLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9hZGRFcnJvcihtZXNzYWdlOiBzdHJpbmcsIGRldGFpbHM/OiBFcnJvciwgcmV0cnlhYmxlPzogYm9vbGVhbikge1xyXG4gICAgLy9jb25zb2xlLmVycm9yKG1lc3NhZ2UsIHtyZXRyeWFibGU6ICEhcmV0cnlhYmxlLCBkZXRhaWxzfSk7XHJcbiAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4ge1xyXG4gICAgICBpZiAoZXJyb3JzLnNvbWUoZSA9PiBlLm1lc3NhZ2UgPT09IG1lc3NhZ2UpKSByZXR1cm4ge2Vycm9yc307XHJcbiAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMikgZXJyb3JzID0gZXJyb3JzLnNsaWNlKDEpO1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGVycm9yczogZXJyb3JzLmNvbmNhdChbe21lc3NhZ2UsIGRldGFpbHMsIHJldHJ5YWJsZX1dKVxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICAvLyBSZW1vdmUgbm9uLXJldHJ5YWJsZSBlcnJvcnMgYWZ0ZXIgMzAgc2Vjb25kczpcclxuICAgIGlmICghcmV0cnlhYmxlKSBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoKHtlcnJvcnN9KSA9PiAoe1xyXG4gICAgICAgIGVycm9yczogZXJyb3JzLmZpbHRlcihlID0+IGUubWVzc2FnZSAhPT0gbWVzc2FnZSlcclxuICAgICAgfSkpO1xyXG4gICAgfSwgMzAwMDApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfYWRkSW5mbyhtZXNzYWdlOiBzdHJpbmcpIHtcclxuICAgIGlmIChtZXNzYWdlID09PSBcIlwiKSB7XHJcbiAgICAgIC8vIFR1cm4gb2ZmIGN1cnJlbnQgaW5mbyBtZXNzYWdlc1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHtpbmZvczogW119KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zZXRTdGF0ZSgoe2luZm9zfSkgPT4ge1xyXG4gICAgICBpZiAoaW5mb3Muc29tZShpbmZvID0+IGluZm8gPT09IG1lc3NhZ2UpKSByZXR1cm4ge2luZm9zfTtcclxuICAgICAgaWYgKGluZm9zLmxlbmd0aCA+IDIpIGluZm9zID0gaW5mb3Muc2xpY2UoMSk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgaW5mb3M6IGluZm9zLmNvbmNhdChtZXNzYWdlKVxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICAvLyBSZW1vdmUgaW5mbyBtZXNzYWdlIGFmdGVyIDEwIHNlY29uZHM6XHJcbiAgICBzZXRUaW1lb3V0KCgpPT57XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoKHtpbmZvc30pID0+ICh7XHJcbiAgICAgICAgaW5mb3M6IGluZm9zLmZpbHRlcihtc2cgPT4gbXNnICE9PSBtZXNzYWdlKVxyXG4gICAgICB9KSk7XHJcbiAgICB9LCAxMDAwMCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF9kYldyaXRlckVycm9yIChlcnJvcjogRXJyb3IsIHJldHJ5YWJsZTogYm9vbGVhbikge1xyXG4gICAgdGhpcy5fYWRkRXJyb3IoYERldCBnw6VyIGludGUgYXR0IHNwYXJhIHRpbGwgc2VydmVybmAsIGVycm9yLCByZXRyeWFibGUpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfZGJXcml0ZXJTdGF0ZUNoYW5nZWQgKHtpc0VkaXRlZCwgaXNTYXZpbmd9OiBLZWRCYWNrZW5kV3JpdGVyKSB7XHJcbiAgICBpZiAoIWlzRWRpdGVkKSB7XHJcbiAgICAgIC8vIElmIGlzRWRpdGVkIGlzIGZhbHNlLCBhIHN1Y2Nlc3NmdWwgd3JpdGUgbXVzdCBoYXZlIGhhcHBlbmVkLCBhbmRcclxuICAgICAgLy8gdGhlcmUgY2Fubm90IGJlIGFueSByZXRyeWFibGUgZXJyb3IgYW55bW9yZVxyXG4gICAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4ge1xyXG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5maWx0ZXIoZSA9PiAhZS5yZXRyeWFibGUpO1xyXG4gICAgICAgIHJldHVybiB7ZXJyb3JzfTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgZGJXcml0ZXJJc0VkaXRlZDogaXNFZGl0ZWQsXHJcbiAgICAgIGRiV3JpdGVySXNTYXZpbmc6IGlzU2F2aW5nXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9lcnJvcik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY3VzdG9tZXJyb3InLCB0aGlzLl9jdXN0b21FcnJvcik7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaW5mbycsIHRoaXMuX29uSW5mbyk7XHJcbiAgICBkYi53cml0ZXIub25FcnJvcih0aGlzLl9kYldyaXRlckVycm9yKTtcclxuICAgIGRiLndyaXRlci5vblN0YXRlQ2hhbmdlKHRoaXMuX2RiV3JpdGVyU3RhdGVDaGFuZ2VkKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3VuaGFuZGxlZHJlamVjdGlvbicsIHRoaXMuX3VuaGFuZGxlZFJlamVjdGlvbik7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCB0aGlzLl9lcnJvcik7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY3VzdG9tZXJyb3InLCB0aGlzLl9jdXN0b21FcnJvcik7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5mbycsIHRoaXMuX29uSW5mbyk7XHJcbiAgICBkYi53cml0ZXIub2ZmKHRoaXMuX2RiV3JpdGVyRXJyb3IpO1xyXG4gICAgZGIud3JpdGVyLm9mZih0aGlzLl9kYldyaXRlclN0YXRlQ2hhbmdlZCk7XHJcbiAgfVxyXG5cclxuICBfdW5oYW5kbGVkUmVqZWN0aW9uIChldjogRXZlbnQgJiB7cmVhc29uOiBFcnJvcn0pIHtcclxuICAgIHRoaXMuX2FkZEVycm9yKGBFdHQgb2vDpG50IGZlbCBpbnRyw6RmZmFkZS4uLmAsIGV2LnJlYXNvbik7XHJcbiAgfVxyXG5cclxuICBfZXJyb3IgKGV2OiBFdmVudCAmIHtlcnJvcjogRXJyb3J9KSB7XHJcbiAgICB0aGlzLl9hZGRFcnJvcihldi5lcnJvciA/IGV2LmVycm9yLm1lc3NhZ2UgOiBgRXR0IG9rw6RudCBmZWwgaW50csOkZmZhZGUuLi5gLCBldi5lcnJvcik7XHJcbiAgfVxyXG5cclxuICBfY3VzdG9tRXJyb3IgKGV2OiBDdXN0b21FdmVudCkge1xyXG4gICAgdGhpcy5fYWRkRXJyb3IoZXYuZGV0YWlsKTtcclxuICB9XHJcblxyXG4gIF9vbkluZm8oZXY6IEN1c3RvbUV2ZW50KSB7XHJcbiAgICB0aGlzLl9hZGRJbmZvKGV2LmRldGFpbCk7XHJcbiAgfSBcclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge2Vycm9ycywgaW5mb3MsIGRiV3JpdGVySXNTYXZpbmd9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImVycm9yLXN1Y2Nlc3MtZmVlZGJhY2tcIiBzdHlsZT17e1xyXG4gICAgICBwb3NpdGlvbjogXCJmaXhlZFwiLFxyXG4gICAgICBsZWZ0OiAwLFxyXG4gICAgICB0b3A6IDAsXHJcbiAgICAgIHdpZHRoOiBcIjEwMCVcIixcclxuICAgICAgcG9pbnRlckV2ZW50czogJ25vbmUnXHJcbiAgICB9fT5cclxuICAgICAgPGRpdiBzdHlsZT17e2Rpc3BsYXk6ICd0YWJsZScsIG1hcmdpbjogXCIwIGF1dG9cIn19PlxyXG4gICAgICAgIHtlcnJvcnMuZmlsdGVyKGUgPT4gIWUucmV0cnlhYmxlIHx8ICFkYldyaXRlcklzU2F2aW5nKVxyXG4gICAgICAgIC5tYXAoKHttZXNzYWdlLCBkZXRhaWxzLCByZXRyeWFibGUsIHNob3dEZXRhaWxzfSkgPT4gKFxyXG4gICAgICAgICAgPGRpdiBrZXk9e21lc3NhZ2V9IGNsYXNzTmFtZT1cImVycm9yXCI+XHJcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3tmbG9hdDonbGVmdCd9fT57bWVzc2FnZX08L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBzdHlsZT17e3BvaW50ZXJFdmVudHM6ICdhdXRvJ319PlxyXG4gICAgICAgICAgICAgIDxSZW1vdmVJdGVtIG9uQ2xpY2s9eygpPT50aGlzLnJlbW92ZUVycm9yKG1lc3NhZ2UpfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAge2RldGFpbHMgfHwgcmV0cnlhYmxlID8gPGRpdiBzdHlsZT17e3BvaW50ZXJFdmVudHM6ICdhdXRvJ319PlxyXG4gICAgICAgICAgICAgIHtkZXRhaWxzID8gPD48YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKT0+dGhpcy50b2dnbGVEZXRhaWxzKG1lc3NhZ2UpfT57c2hvd0RldGFpbHMgPyBcIkTDtmxqIGRldGFpbGVyXCIgOiBcIlZpc2EgZGV0YWlsamVyXCJ9PC9hPiZuYnNwOzwvPiA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICB7c2hvd0RldGFpbHMgPyA8cD57JycrZGV0YWlsc308L3A+OiA8PiZuYnNwOzwvPn1cclxuICAgICAgICAgICAgICB7cmV0cnlhYmxlID8gPGEgY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9PnRoaXMucmV0cnlTYXZlKCl9PkbDtnJzw7ZrIHNwYXJhIG51PC9hPiA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgPC9kaXY+OiB1bmRlZmluZWR9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApKX1cclxuICAgICAgICB7aW5mb3MubWFwKG1lc3NhZ2UgPT4gXHJcbiAgICAgICAgICA8cCBrZXk9e21lc3NhZ2V9IGNsYXNzTmFtZT1cImluZm9cIj57bWVzc2FnZX08L3A+XHJcbiAgICAgICAgKX1cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj47XHJcbiAgfVxyXG4gIHJlbW92ZUVycm9yKG1lc3NhZ2U6IHN0cmluZyk6IGFueSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKCh7ZXJyb3JzfSkgPT4gKHtcclxuICAgICAgZXJyb3JzOiBlcnJvcnMuZmlsdGVyKGUgPT4gZS5tZXNzYWdlICE9PSBtZXNzYWdlKVxyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgcmV0cnlTYXZlKCkge1xyXG4gICAgZGIud3JpdGVyLnJldHJ5U2F2ZSgpO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRGV0YWlscyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIHRoaXMuc2V0U3RhdGUoKHtlcnJvcnN9KSA9PiAoe2Vycm9yczogZXJyb3JzLm1hcChlcnJvciA9PiBlcnJvci5tZXNzYWdlID09PSBtZXNzYWdlID9cclxuICAgICAge1xyXG4gICAgICAgIC4uLmVycm9yLFxyXG4gICAgICAgIHNob3dEZXRhaWxzOiAhZXJyb3Iuc2hvd0RldGFpbHNcclxuICAgICAgfSA6XHJcbiAgICAgIGVycm9yKVxyXG4gICAgfSkpO1xyXG4gIH1cclxufVxyXG4iLCJcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmVwb0NvbW11bmljYXRvcjxUIGV4dGVuZHMge2lkOiBzdHJpbmd9PiB7XHJcbiAgcXVlcnkoKTogUHJvbWlzZTxUW10+O1xyXG59XHJcblxyXG50eXBlIFN1YnNjcmliZXI8VD4gPSAoaXRlbXM6VFtdLCBlcnJvcjogdW5kZWZpbmVkIHwgRXJyb3IpID0+IGFueTtcclxuXHJcbmV4cG9ydCBjbGFzcyBSZXBvPFQgZXh0ZW5kcyB7aWQ6IHN0cmluZ30+IHtcclxuICBsaXN0UHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcclxuICBpdGVtczogVFtdO1xyXG4gIGVycm9yPzogRXJyb3I7XHJcbiAgc3Vic2NyaWJlcnM6IFN1YnNjcmliZXI8VD5bXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIGNvbW06IFJlcG9Db21tdW5pY2F0b3I8VD4pIHtcclxuICAgIHRoaXMubGlzdFByb21pc2UgPSBudWxsO1xyXG4gICAgdGhpcy5pdGVtcyA9IG51bGw7XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gW107XHJcbiAgfVxyXG5cclxuICBzdWJzY3JpYmUoc3Vic2NyaWJlcjogU3Vic2NyaWJlcjxUPikge1xyXG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlSGFzRGF0YSgpLnRoZW4oKCk9PntcclxuICAgICAgc3Vic2NyaWJlcih0aGlzLml0ZW1zLCB0aGlzLmVycm9yKTtcclxuICAgICAgdGhpcy5zdWJzY3JpYmVycy5wdXNoKHN1YnNjcmliZXIpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB1bnN1YnNjcmliZShzdWJzY3JpYmVyOiBTdWJzY3JpYmVyPFQ+KSB7XHJcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gdGhpcy5zdWJzY3JpYmVycy5maWx0ZXIgKHMgPT4gcyAhPT0gc3Vic2NyaWJlcik7XHJcbiAgfVxyXG5cclxuICBub3RpZnlTdWJzY3JpYmVycygpIHtcclxuICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChzID0+IHModGhpcy5pdGVtcywgdGhpcy5lcnJvcikpO1xyXG4gIH1cclxuXHJcbiAgZW5zdXJlSGFzRGF0YSgpIHtcclxuICAgIGlmICghdGhpcy5saXN0UHJvbWlzZSkgdGhpcy5yZWZyZXNoRnJvbVNlcnZlcigpO1xyXG4gICAgcmV0dXJuIHRoaXMubGlzdFByb21pc2U7XHJcbiAgfVxyXG5cclxuICByZWZyZXNoRnJvbVNlcnZlcigpIHtcclxuICAgIHRoaXMubGlzdFByb21pc2UgPSB0aGlzLmNvbW0ucXVlcnkoKS50aGVuKGl0ZW1zID0+IHtcclxuICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xyXG4gICAgICB0aGlzLmVycm9yID0gbnVsbDtcclxuICAgICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICB0aGlzLmVycm9yID0gZXJyb3I7XHJcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zIHx8IFtdO1xyXG4gICAgICB0aGlzLm5vdGlmeVN1YnNjcmliZXJzKCk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiB0aGlzLmxpc3RQcm9taXNlO1xyXG4gIH1cclxuICBcclxuICBhc3luYyB1cGRhdGUoaXRlbTogVCB8IFRbXSkge1xyXG4gICAgYXdhaXQgdGhpcy5lbnN1cmVIYXNEYXRhKCk7XHJcbiAgICBjb25zdCB1cGRhdGVkSXRlbXMgPSBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbSA6IFtpdGVtXTtcclxuICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLm1hcChpdCA9PiB7XHJcbiAgICAgIGNvbnN0IHVwZGF0ZWRJdGVtID0gdXBkYXRlZEl0ZW1zLmZpbmQoKHtpZH0pID0+IGl0LmlkID09PSBpZCk7XHJcbiAgICAgIHJldHVybiB1cGRhdGVkSXRlbSA/XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgdXBkYXRlZEl0ZW0pIDpcclxuICAgICAgICBpdDtcclxuICAgIH0pO1xyXG4gICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gIH1cclxuXHJcbiAgaW5zZXJ0KGl0ZW06IFQgfCBUW10pIHtcclxuICAgIHJldHVybiB0aGlzLmVuc3VyZUhhc0RhdGEoKS50aGVuKCgpPT57XHJcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmNvbmNhdChpdGVtKTtcclxuICAgICAgdGhpcy5ub3RpZnlTdWJzY3JpYmVycygpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoaWQ6IHN0cmluZyB8IHN0cmluZ1tdKSB7XHJcbiAgICBjb25zdCBpZHMgPSBBcnJheS5pc0FycmF5KGlkKSA/IGlkIDogW2lkXTtcclxuICAgIHJldHVybiB0aGlzLmVuc3VyZUhhc0RhdGEoKS50aGVuKCgpPT57XHJcbiAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcihpdCA9PiAhaWRzLnNvbWUoaWQgPT4gaXQuaWQgPT09IGlkKSk7XHJcbiAgICAgIHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoKTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vY29udHJhY3RzL2tlZC1tb2RlbHMnO1xyXG5pbXBvcnQgeyBwYXJzZVF1ZXJ5U3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvcXVlcnktc3RyaW5nJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZlYXR1cmVzIHtcclxuICAvL0VkaXRVc2VyVGFza3NWaWFQZW5Pbmx5PzogYm9vbGVhbjtcclxuICAvL1N1YlRhc2tzPzogYm9vbGVhbjtcclxuXHJcbiAgY29uc3RydWN0b3IgKCkge1xyXG4gICAgY29uc3QgdXNlciA9IGVudi5jdXJyZW50VXNlciE7XHJcbiAgICBjb25zdCBxdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoLCB7dG9Mb3dlcjogdHJ1ZX0pO1xyXG4gICAgY29uc3QgZmVhdHVyZXMgPSAoKHF1ZXJ5LmZlYXR1cmVzfHwnJykuc3BsaXQoJywnKSBhcyBzdHJpbmdbXSlcclxuICAgICAgLm1hcChmZWF0dXJlID0+IGZlYXR1cmUudG9Mb3dlckNhc2UoKSk7IC8vIENhbiBiZSB1c2VkIG9uIGZvcndhcmRzLi4uXHJcblxyXG4gICAgLyp0aGlzLkVkaXRVc2VyVGFza3NWaWFQZW5Pbmx5ID1cclxuICAgICAgdXNlci5zY2hvb2xUeXBlICE9PSAnR3J1bmRza29sb3InICYmIHF1ZXJ5LnNjaG9vbHR5cGUgIT09IFwiR3J1bmRza29sb3JcIjsqL1xyXG4gICAgLyp0aGlzLlN1YlRhc2tzID1cclxuICAgICAgdXNlci5zY2hvb2xUeXBlICE9PSAnR3J1bmRza29sb3InICYmIHF1ZXJ5LnNjaG9vbHR5cGUgIT09IFwiR3J1bmRza29sb3JcIjsqL1xyXG4gICAgLy90aGlzLkFzc2lnbm1lbnRUYXNrcyA9ICEhcXVlcnkudGVzdHZlcnNpb247XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCAqIGZyb20gJy4vZmVhdHVyZXMnO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7QWJpbGl0eSwgS25vd2xlZGdlUmVxdWlyZW1lbnR9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQge1JlbW92ZUl0ZW19IGZyb20gJy4vcmVtb3ZlLWl0ZW0nO1xyXG5pbXBvcnQgdXBkYXRlIGZyb20gJ3JlYWN0LWFkZG9ucy11cGRhdGUnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IEtub3dsZWRnZVJlcXVpcmVtZW50W107XHJcbiAgaWRzVG9NYXJrTm90T2s/OiB7W2lkOiBzdHJpbmddOiB0cnVlfTtcclxuICBleHBsYWluZWRSZXF1aXJlbWVudHM/OiB7W3JlcXVpcmVtZW50SWQ6IHN0cmluZ106IHN0cmluZ31cclxuICAvLyBQcm9wcyB1c2VkIGluIGVkaXQgbW9kZSAoZWRpdGluZyBjb3Vyc2UgdGVtcGxhdGVzKVxyXG4gIC8vY292ZXJlZElkcz86IHN0cmluZ1tdO1xyXG4gIC8vIFByb3BzIHVzZWQgaW4gbWFyayBtb2RlIChlZGl0aW5nIHRhc2tzKVxyXG4gIG1hcmtNb2RlPzogYm9vbGVhbjtcclxuICBtYXJrZWRJZHM/OiBzdHJpbmdbXTtcclxuICBtaWdyYXRlZElkcz86IHtbaWQ6IHN0cmluZ106IGFueX07XHJcbiAgb25NYXJrQ2hhbmdlZDogKGlkOiBzdHJpbmcsIGlzTWFya2VkOiBib29sZWFuKSA9PiB2b2lkO1xyXG4gIG9uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZD86IChyZXFJZDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBLbm93bGVkZ2VNYXRyaXggZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIHt9PiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGtub3dsZWRnZVJlcXVpcmVtZW50cywgbWFya2VkSWRzLCBtaWdyYXRlZElkcywgZXhwbGFpbmVkUmVxdWlyZW1lbnRzIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyBpZHNUb01hcmtOb3RPaywgbWFya01vZGUsIG9uTWFya0NoYW5nZWQsIG9uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZCB9ID0gdGhpcy5wcm9wcztcclxuXHJcbiAgICBjb25zdCBjb2x1bW5zID0gW1wiRVwiLCBcIkNcIiwgXCJBXCJdO1xyXG4gICAgY29uc3Qgcm93czogS25vd2xlZGdlUmVxdWlyZW1lbnRbXVtdID0gW107XHJcbiAgICBjb25zdCByZXFzID0ga25vd2xlZGdlUmVxdWlyZW1lbnRzLnNsaWNlKCk7XHJcbiAgICBsZXQgcm93OiBLbm93bGVkZ2VSZXF1aXJlbWVudFtdIHwgbnVsbCA9IG51bGw7XHJcbiAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICByb3cgPSBjb2x1bW5zLm1hcChncmFkZSA9PiB7XHJcbiAgICAgICAgY29uc3QgcE5leHQgPSByZXFzLmZpbmRJbmRleChyID0+IHIuZ3JhZGVTdGVwICYmIHIuZ3JhZGVTdGVwLnRvVXBwZXJDYXNlKCkgPT09IGdyYWRlKTtcclxuICAgICAgICBpZiAocE5leHQgPCAwKSByZXR1cm4gbnVsbDtcclxuICAgICAgICBjb25zdCBydiA9IHJlcXNbcE5leHRdO1xyXG4gICAgICAgIHJlcXMuc3BsaWNlKHBOZXh0LCAxKTtcclxuICAgICAgICByZXR1cm4gcnY7XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAocm93LmV2ZXJ5KHIgPT4gciA9PT0gbnVsbCkpXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIHJvd3MucHVzaChyb3cpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICA8dGFibGU+XHJcbiAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICB7Y29sdW1ucy5tYXAoYyA9PiA8dGgga2V5PXtjfT57Y308L3RoPil9XHJcbiAgICAgICAgICA8L3RyPlxyXG4gICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAge3Jvd3MubWFwKChyb3csaSkgPT4gPFJlYWN0LkZyYWdtZW50IGtleT17aX0+XHJcbiAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICB7cm93Lm1hcCgocmVxdWlyZW1lbnQsaikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNNYXJrZWRPSyA9IHJlcXVpcmVtZW50ICYmIG1hcmtlZElkcyAmJiBtYXJrZWRJZHMuaW5kZXhPZihyZXF1aXJlbWVudC5pZCkgPj0gMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkTm90T0sgPSByZXF1aXJlbWVudCAmJiBpZHNUb01hcmtOb3RPayAmJiBpZHNUb01hcmtOb3RPa1tyZXF1aXJlbWVudC5pZF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc01pZ3JhdGVkID0gcmVxdWlyZW1lbnQgJiYgbWlncmF0ZWRJZHMgJiYgISFtaWdyYXRlZElkc1tyZXF1aXJlbWVudC5pZF07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPHRkXHJcbiAgICAgICAgICAgICAgICAgIGtleT17an1cclxuICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IHJlcXVpcmVtZW50ID8gcmVxdWlyZW1lbnQubmFtZSA6IFwiXCJ9fVxyXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9eyhtYXJrTW9kZSA/IFwic2VsZWN0YWJsZVwiIDogXCJcIikgK1xyXG4gICAgICAgICAgICAgICAgICAoaXNNaWdyYXRlZCA/IFwiIG1pZ3JhdGVkXCIgOiBcIlwiKSArXHJcbiAgICAgICAgICAgICAgICAgIChpc01hcmtlZE9LID9cclxuICAgICAgICAgICAgICAgICAgICBcIiBtYXJrZWRHcmVlblwiIDpcclxuICAgICAgICAgICAgICAgICAgICAoaXNNYXJrZWROb3RPSyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICBcIiBtYXJrZWRSZWRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgIFwiXCIpKX1cclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXttYXJrTW9kZSAmJiByZXF1aXJlbWVudCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAoKT0+b25NYXJrQ2hhbmdlZChyZXF1aXJlbWVudC5pZCwgIWlzTWFya2VkT0spIDpcclxuICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17aXNNaWdyYXRlZCA/XHJcbiAgICAgICAgICAgICAgICAgICAgICBtYXJrTW9kZSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBTa29sdmVya2V0IGhhciB1cHBkYXRlcmF0IHRleHRlbnMgZm9ybXVsZXJpbmcuIER1IGthbiBncmFuc2thIMOkbmRyaW5nZW4gZ2Vub20gYXR0IGbDpGxsYSB1dCB2YXJuaW5nc2JveGVuIHRpbGwgaMO2Z2VyLCBtZWQgdGl0ZWwgXCJVcHBkYXRlcmFkZSBmb3JtdWxlcmluZ2FyIGZyw6VuIFNrb2x2ZXJrZXRcImAgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBgU2tvbHZlcmtldCBoYXIgdXBwZGF0ZXJhdCB0ZXh0ZW5zIGZvcm11bGVyaW5nLCBtZW4gZGV0dGEgaGFyIMOkbm51IGludGUgZ3JhbnNrYXRzIGF2IHVwcGdpZnRlbnMgcmVkaWdlcmluZ3NiZWjDtnJpZ2VgIDpcclxuICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZH0gLz5cclxuICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAge2V4cGxhaW5lZFJlcXVpcmVtZW50cyAmJiA8dHI+XHJcbiAgICAgICAgICAgICAge3Jvdy5tYXAoKHJlcXVpcmVtZW50LGopID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzTWFya2VkT0sgPSByZXF1aXJlbWVudCAmJiBtYXJrZWRJZHMgJiYgbWFya2VkSWRzLmluZGV4T2YocmVxdWlyZW1lbnQuaWQpID49IDA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPHRkIGtleT17an0+XHJcbiAgICAgICAgICAgICAgICAgIHtpc01hcmtlZE9LID8gPHRleHRhcmVhXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e0xgQmVza3JpdiBrcmF2ZXRgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0VGV4dEJveCBpbnB1dFRleHRMYXJnZVwiIHN0eWxlPXt7d2lkdGg6IFwiMTAwJVwifX1cclxuICAgICAgICAgICAgICAgICAgICByZWFkT25seT17IW1hcmtNb2RlfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlPXtleHBsYWluZWRSZXF1aXJlbWVudHNbcmVxdWlyZW1lbnQuaWRdIHx8IFwiXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e29uRXhwbGFpbmVkUmVxdWlyZW1lbnRzQ2hhbmdlZCAmJiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICBldiA9PiBvbkV4cGxhaW5lZFJlcXVpcmVtZW50c0NoYW5nZWQocmVxdWlyZW1lbnQuaWQsIGV2LnRhcmdldC52YWx1ZSkpfVxyXG4gICAgICAgICAgICAgICAgICAvPiA6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgICAgICAgPC90ZD59KX1cclxuICAgICAgICAgICAgPC90cj59XHJcbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XHJcbiAgICAgICAgICApfVxyXG4gICAgICAgIDwvdGJvZHk+XHJcbiAgICAgIDwvdGFibGU+XHJcbiAgICA8L2Rpdj5cclxuXHJcbiAgICB7LypyZXR1cm4gPGRpdj5cclxuICAgICAgPHRhYmxlPlxyXG4gICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgPHRoPkU8L3RoPlxyXG4gICAgICAgICAgICA8dGg+QzwvdGg+XHJcbiAgICAgICAgICAgIDx0aD5BPC90aD5cclxuICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgPC90aGVhZD5cclxuICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICB7dGJvZHkubWFwKChyb3csIGkpID0+IFxyXG4gICAgICAgICAgPHRyIGtleT17aX0+e3Jvdy5tYXAoKGNlbGwsIGopID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaXNNYXJrZWRPSyA9IHByb3BzLm1hcmtlZElkcyAmJiBwcm9wcy5tYXJrZWRJZHMuaW5kZXhPZihjZWxsLmlkKSA+PSAwO1xyXG4gICAgICAgICAgICBjb25zdCBpc01hcmtlZE5vdE9LID0gcHJvcHMuaWRzVG9NYXJrTm90T2sgJiYgcHJvcHMuaWRzVG9NYXJrTm90T2tbY2VsbC5pZF07XHJcbiAgICAgICAgICAgIHJldHVybiA8dGRcclxuICAgICAgICAgICAgICBrZXk9e2p9XHJcbiAgICAgICAgICAgICAgcm93U3Bhbj17Y2VsbC5yb3dTcGFufVxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17KHByb3BzLm1hcmtNb2RlID8gXCJzZWxlY3RhYmxlXCIgOiBcIlwiKSArXHJcbiAgICAgICAgICAgICAgICAoaXNNYXJrZWRPSyA/XHJcbiAgICAgICAgICAgICAgICAgIFwiIG1hcmtlZEdyZWVuXCIgOlxyXG4gICAgICAgICAgICAgICAgICAoaXNNYXJrZWROb3RPSyA/XHJcbiAgICAgICAgICAgICAgICAgICAgXCIgbWFya2VkUmVkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgXCJcIikpfVxyXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLm1hcmtNb2RlICYmICgoKT0+cHJvcHMub25NYXJrQ2hhbmdlZChjZWxsLmlkLCAhaXNNYXJrZWRPSykpfT5cclxuICAgICAgICAgICAgICB7Y2VsbC5odG1sICYmIDxkaXYgc3R5bGU9e3twb3NpdGlvbjogJ3JlbGF0aXZlJ319PlxyXG4gICAgICAgICAgICAgICAgPHBcclxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjZWxsLnR5cGUgPT09ICdhYmlsaXR5JyA/ICdhYmlsaXR5VGV4dCcgOiAnY3JpdGVyaWFUZXh0J31cclxuICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IGNlbGwuaHRtbH19IC8+XHJcbiAgICAgICAgICAgICAgICB7cHJvcHMuZWRpdE1vZGUgJiYgPFJlbW92ZUl0ZW0gY2xhc3NOYW1lPVwidXBwZXJSaWdodFwiIG9uQ2xpY2s9eygpPT5cclxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsSWRzKFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwudHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLnJvd0luZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0Q2VsbElkcyhcclxuICAgICAgICAgICAgICAgICAgICAgIGNlbGwudHlwZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGNlbGwucm93SW5kZXgpLmZpbHRlcihpZCA9PiBpZCAhPSBjZWxsLmlkKSApfSAvPiB9XHJcbiAgICAgICAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgICAgICA8L3RkPn0pfVxyXG4gICAgICAgICAgPC90cj4pfVxyXG4gICAgICAgIDwvdGJvZHk+XHJcbiAgICAgIDwvdGFibGU+XHJcbiAgICA8L2Rpdj4qL31cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5cclxuZGVjbGFyZSB2YXIgcHJvY2VzczogYW55O1xyXG5cclxuY2ZnLkVOVklST05NRU5UID0gcHJvY2Vzcy5lbnYuRU5WSVJPTk1FTlQgYXMgXCJwcm9kdWN0aW9uXCIgfCBcImRldmVsb3BtZW50XCIgfCBcInRlc3RcIjtcclxuY2ZnLktFRF9BUElfVVJMID0gcHJvY2Vzcy5lbnYuS0VEX0FQSV9VUkw7IC8vIFwiaHR0cHM6Ly9rZWRiYWNrZW5kdGVzdC5henVyZXdlYnNpdGVzLm5ldC9hcGkvXCJcclxuY2ZnLkVEU19BUElfVVJMID0gcHJvY2Vzcy5lbnYuRURTX0FQSV9VUkw7IC8vIFwiaHR0cHM6Ly9lZHNwb3J0YWxvd2luYXBpLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9cIlxyXG5jZmcuS0VEX1RPS0VOX1VSTCA9IHByb2Nlc3MuZW52LktFRF9UT0tFTl9VUkw7IC8vIFwiaHR0cHM6Ly9rZWRhdXRodGVzdC5henVyZXdlYnNpdGVzLm5ldC90b2tlblwiXHJcbmNmZy5LRURfQ0xJRU5UX0lEID0gcHJvY2Vzcy5lbnYuS0VEX0NMSUVOVF9JRDsgLy8gXCJkZXZjbGllbnRcIiwgXCJ0ZXN0Y2xpZW50XCIsIFwiLi4uXCJcclxuY2ZnLktFRF9DTElFTlRfU0VDUkVUID0gcHJvY2Vzcy5lbnYuS0VEX0NMSUVOVF9TRUNSRVQ7XHJcbmNmZy5LRURfUkVBTE0gPSBwcm9jZXNzLmVudi5LRURfUkVBTE07IC8vIFwiU0UxXCJcclxuIiwiaW1wb3J0IHsgcGFyc2VRdWVyeVN0cmluZywgZ2VuZXJhdGVRdWVyeVN0cmluZywgc3BsaXRVcmxBbmRRdWVyeSB9IGZyb20gXCIuLi91dGlscy9xdWVyeS1zdHJpbmdcIjtcclxuaW1wb3J0IHsgS2VkQmFja2VuZENsaWVudFdlYiwgV2ViU2VydmVyQmVhcmVyUHJvdmlkZXIsIGlzb21vcnBoaWMsIHN0b3JhZ2UgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudHdlYic7XHJcbmltcG9ydCB7IEJlYXJlclByb3ZpZGVyLCBLZWRCZWFyZXJQcm92aWRlciB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IFVzZXIgfSBmcm9tIFwiLi4vY29udHJhY3RzL2tlZC1tb2RlbHNcIjtcclxuaW1wb3J0IHsgSU1QRVJTT05BVElPTl9RVUVSWV9QQVJBTVMgfSBmcm9tIFwiLi4vYWNjZXNzLWNvbnRyb2wvaW5kZXhcIjtcclxuaW1wb3J0IHsgY2hlcnJ5UGlja1Byb3BzIH0gZnJvbSBcIi4uL3V0aWxzL3V0aWxzXCI7XHJcblxyXG5mdW5jdGlvbiBnZXRNZXJnZWRUb2tlblBhdGgodG9rZW5QYXRoOiBzdHJpbmcsIGxvY2F0aW9uU2VhcmNoOiBzdHJpbmcsIHNjb3Blczogc3RyaW5nW10pIHtcclxuICAvLyBNZXJnZSBjb25maWd1cmVkIHF1ZXJ5IHBhcmFtcyBvZiB0b2tlbiBwYXRoIHdpdGggcGFyYW1zIGdpdmVuIHRvIGN1cnJlbnQgcGFnZVxyXG4gIGNvbnN0IGN1cnJlbnRRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb25TZWFyY2gpO1xyXG4gIGNvbnN0IGltcGVyc29uYXRpb25Qcm9wcyA9IGNoZXJyeVBpY2tQcm9wcyhjdXJyZW50UXVlcnksIElNUEVSU09OQVRJT05fUVVFUllfUEFSQU1TKTtcclxuICBjb25zdCBbdG9rZW5QYXRoV2l0aG91dFF1ZXJ5LCB0b2tlblF1ZXJ5U3RyaW5nXSA9IHNwbGl0VXJsQW5kUXVlcnkodG9rZW5QYXRoKTtcclxuICBjb25zdCB0b2tlblBhdGhRdWVyeSA9IHBhcnNlUXVlcnlTdHJpbmcodG9rZW5RdWVyeVN0cmluZyk7XHJcbiAgcmV0dXJuIHRva2VuUGF0aFdpdGhvdXRRdWVyeSArIGdlbmVyYXRlUXVlcnlTdHJpbmcoe1xyXG4gICAgLi4udG9rZW5QYXRoUXVlcnksXHJcbiAgICAuLi5pbXBlcnNvbmF0aW9uUHJvcHMsXHJcbiAgICBzY29wZXM6IHNjb3Blcy5qb2luKCcsJylcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VG9rZW5JZChtZXJnZWRUb2tlblBhdGg6IHN0cmluZywgdXNlckVtYWlsOiBzdHJpbmcpIHtcclxuICByZXR1cm4gbWVyZ2VkVG9rZW5QYXRoICsgXCIvXCIgKyB1c2VyRW1haWw7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNhdmVVc2VySW5mbyh1c2VyOiBVc2VyLCB0b2tlbklkOiBzdHJpbmcpIHtcclxuICBlbnYuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oXCJ1c2VySW5mb1wiICsgdG9rZW5JZCwgSlNPTi5zdHJpbmdpZnkodXNlcikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsb2FkVXNlckluZm8odG9rZW5JZDogc3RyaW5nKSB7XHJcbiAgY29uc3Qgc3RvcmVkU2Vzc2lvblVzZXIgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFwidXNlckluZm9cIiArIHRva2VuSWQpO1xyXG4gIGlmIChzdG9yZWRTZXNzaW9uVXNlcikge1xyXG4gICAgZW52LmN1cnJlbnRVc2VyID0gSlNPTi5wYXJzZShzdG9yZWRTZXNzaW9uVXNlcik7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGg6IHN0cmluZywgdXNlckVtYWlsOiBzdHJpbmcpIHtcclxuICBjb25zdCB0b2tlbklkID0gZ2V0VG9rZW5JZChtZXJnZWRUb2tlblBhdGgsIHVzZXJFbWFpbCk7XHJcbiAgcmV0dXJuIG5ldyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGgsIHJlc3BvbnNlVGV4dCA9PiB7XHJcbiAgICBjb25zdCByZXMgPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCkgYXMgeyBvazogYm9vbGVhbiwgZXJyb3I/OiBzdHJpbmcsIHRva2VuPzogc3RyaW5nLCB1c2VyPzogVXNlciB9O1xyXG4gICAgaWYgKCFyZXMub2spIHRocm93IG5ldyBFcnJvcihyZXMuZXJyb3IpO1xyXG4gICAgaWYgKHJlcy51c2VyKSB7XHJcbiAgICAgIHNhdmVVc2VySW5mbyhyZXMudXNlciwgdG9rZW5JZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyB0b2tlbjogcmVzLnRva2VuLCBleHBpcmVzOiBEYXRlLm5vdygpICsgNTkgKiA2MCAqIDEwMDAgfTtcclxuICB9LCB0b2tlbklkKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlR29vZ2xlVG9rZW5Qcm92aWRlcihtZXJnZWRUb2tlblBhdGg6IHN0cmluZywgdXNlckVtYWlsOiBzdHJpbmcpIHtcclxuICBjb25zdCB0b2tlbklkID0gZ2V0VG9rZW5JZChtZXJnZWRUb2tlblBhdGgsIHVzZXJFbWFpbCk7XHJcbiAgcmV0dXJuIG5ldyBXZWJTZXJ2ZXJCZWFyZXJQcm92aWRlcihtZXJnZWRUb2tlblBhdGgsIHJlc3BvbnNlVGV4dCA9PiB7XHJcbiAgICBjb25zdCByZXMgPSBKU09OLnBhcnNlKHJlc3BvbnNlVGV4dCkgYXMgeyBvazogYm9vbGVhbiwgZXJyb3I/OiBzdHJpbmcsIHRva2VuPzogc3RyaW5nLCB1c2VyPzogVXNlciB9O1xyXG4gICAgaWYgKCFyZXMub2spIHRocm93IG5ldyBFcnJvcihyZXMuZXJyb3IpO1xyXG4gICAgcmV0dXJuIHsgdG9rZW46IHJlcy50b2tlbiwgZXhwaXJlczogRGF0ZS5ub3coKSArIDU5ICogNjAgKiAxMDAwIH07XHJcbiAgfSwgdG9rZW5JZCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVRlc3RUb2tlblByb3ZpZGVyKHRva2VuVXJsOiBzdHJpbmcsIHVzZXI6IFVzZXIsIHNjb3Blczogc3RyaW5nW10pIHtcclxuICByZXR1cm4gbmV3IEtlZEJlYXJlclByb3ZpZGVyKFxyXG4gICAgaXNvbW9ycGhpYyxcclxuICAgIHN0b3JhZ2UsXHJcbiAgICB0b2tlblVybCArIHVzZXIubWFpbCArIGxvY2F0aW9uLnNlYXJjaCxcclxuICAgIGNmZy5LRURfQ0xJRU5UX0lELFxyXG4gICAgY2ZnLktFRF9DTElFTlRfU0VDUkVULFxyXG4gICAgdG9rZW5VcmwsIHtcclxuICAgICAgZW1haWw6IHVzZXIubWFpbC50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICByb2xlczogdXNlci5yb2xlcyxcclxuICAgICAgc2Nob29sOiB1c2VyLnNjaG9vbCxcclxuICAgICAgc2Nob29sVHlwZTogdXNlci5zY2hvb2xUeXBlLFxyXG4gICAgICBzY29wZXNcclxuICAgIH0pO1xyXG59XHJcblxyXG4vLyBlbnYuY3VycmVudFVzZXIubWFpbCBpcyBzZXQgYnkgU2l0ZVZpc2lvbiBzZXJ2ZXIgaW5pdGlhbGx5LlxyXG4vLyBBIHJlc3BvbnNlIGZyb20gL2FwaS90b2tlbiBtYXkgY2hhbmdlIHRoZSBtYWlsIGF0dHJpYnV0ZSBvZiB0aGUgY3VycmVudFxyXG4vLyB1c2VyLCBzbyBlbnYuY3VycmVudFVzZXIubWFpbCBtYXkgYmUgZGlmZmVyZW50IGFmdGVyIGdldHRpbmcgYSByZXNwb25zZS5cclxuLy8gSG93ZXZlciwgdGhlIGluaXRpYWwgdmFsdWUgaXMgdmFsdWFibGUgYWx3YXlzIGluIG9yZGVyIHRvIGRpc3Rpbmd1aXNoIHRoZSBjYXNlXHJcbi8vIHdoZW4gb25lIG5vcm1hbCB1c2VyIGxvZ3Mgb3V0IGFuZCBhbm90aGVyIHVzZXIgbG9ncyBpbi5cclxuY29uc3QgaW5pdGlhbFVzZXJFbWFpbCA9IGVudi5jdXJyZW50VXNlciAmJiBlbnYuY3VycmVudFVzZXIubWFpbDsgLy8gSW5pdGlhbCB2YWx1ZSBvZiBtYWlsLiBNYXkgY2hhbmdlLlxyXG5pZiAoaW5pdGlhbFVzZXJFbWFpbCkge1xyXG4gIC8vIEtFRFxyXG4gIGlmIChjZmcuS0VEX1RPS0VOX1BBVEgpIHtcclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgLy8gUHJvZHVjdGlvbiAvIFNpdGVWaXNpb24gcHJveGllZCAvYXBpL3Rva2VuIHRvIHJlcXVlc3QgdG9rZW5zIGZyb206XHJcbiAgICAvL1xyXG4gICAgLy9cclxuICAgIGNvbnN0IG1lcmdlZFRva2VuUGF0aCA9IGdldE1lcmdlZFRva2VuUGF0aChcclxuICAgICAgY2ZnLktFRF9UT0tFTl9QQVRILFxyXG4gICAgICBsb2NhdGlvbi5zZWFyY2gsIFtcclxuICAgICAgICBcImtlZGJhY2tlbmRcIixcclxuICAgICAgICBcIkVEU1wiLFxyXG4gICAgICBdKTtcclxuICAgIGVudi5iZWFyZXJQcm92aWRlciA9IGNyZWF0ZUJlYXJlclByb3ZpZGVyKG1lcmdlZFRva2VuUGF0aCwgaW5pdGlhbFVzZXJFbWFpbCk7XHJcbiAgICBsb2FkVXNlckluZm8oZ2V0VG9rZW5JZChtZXJnZWRUb2tlblBhdGgsIGluaXRpYWxVc2VyRW1haWwpKTtcclxuXHJcbiAgICAvLyBHb29nbGVcclxuICAgIGNvbnN0IGdvb2dsZU1lcmdlZFBhdGggPSBnZXRNZXJnZWRUb2tlblBhdGgoXHJcbiAgICAgIGNmZy5LRURfVE9LRU5fUEFUSCxcclxuICAgICAgbG9jYXRpb24uc2VhcmNoLCBbXHJcbiAgICAgICAgXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2NhbGVuZGFyLnJlYWRvbmx5XCIsXHJcbiAgICAgIF0pO1xyXG4gICAgZW52Lmdvb2dsZVRva2VuUHJvdmlkZXIgPSBjcmVhdGVHb29nbGVUb2tlblByb3ZpZGVyKGdvb2dsZU1lcmdlZFBhdGgsIGluaXRpYWxVc2VyRW1haWwpO1xyXG4gIH0gZWxzZSBpZiAoY2ZnLktFRF9UT0tFTl9VUkwgJiYgY2ZnLktFRF9DTElFTlRfSUQgJiYgY2ZnLktFRF9DTElFTlRfU0VDUkVUKSB7XHJcbiAgICAvL1xyXG4gICAgLy9cclxuICAgIC8vIFRlc3QgLSBnbyBkaXJlY3RseSB0byBLRURBVVRIIHNlcnZlciB0byByZXRyaWV2ZSB0b2tlbnNcclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgZW52LmJlYXJlclByb3ZpZGVyID0gY3JlYXRlVGVzdFRva2VuUHJvdmlkZXIoY2ZnLktFRF9UT0tFTl9VUkwsIGVudi5jdXJyZW50VXNlciwgW1xyXG4gICAgICBcImtlZGJhY2tlbmRcIixcclxuICAgICAgXCJFRFNcIixcclxuICAgIF0pO1xyXG4gICAgZW52Lmdvb2dsZVRva2VuUHJvdmlkZXIgPSBjcmVhdGVUZXN0VG9rZW5Qcm92aWRlcihjZmcuS0VEX1RPS0VOX1VSTCArIFwiL2dvb2dsZVwiLCBlbnYuY3VycmVudFVzZXIsIFtcclxuICAgICAgXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2NhbGVuZGFyLnJlYWRvbmx5XCIsXHJcbiAgICBdKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyIEtFRF9UT0tFTl9QQVRIYCk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IGNmZyBmcm9tICcuLi9nbG9iYWxzL0tFRC5jZmcnO1xyXG5pbXBvcnQgeyBLZWRCYWNrZW5kQ2xpZW50V2ViIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnR3ZWInO1xyXG5cclxuZW52LmtlZEJhY2tlbmRDbGllbnQgPSBuZXcgS2VkQmFja2VuZENsaWVudFdlYiAoXHJcbiAgY2ZnLktFRF9BUElfVVJMLFxyXG4gIGVudi5iZWFyZXJQcm92aWRlcik7XHJcblxyXG4iLCJpbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IHsgaXNvbW9ycGhpYyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50d2ViJztcclxuaW1wb3J0IHsgRWRzQ2xpZW50IH0gZnJvbSAnLi4vYXBpcy9lZHNjbGllbnQnO1xyXG5cclxuZW52LmVkc0NsaWVudCA9IG5ldyBFZHNDbGllbnQgKFxyXG4gIGlzb21vcnBoaWMsXHJcbiAgY2ZnLkVEU19BUElfVVJMLFxyXG4gIGVudi5iZWFyZXJQcm92aWRlcixcclxuICAoKT0+ZW52LmN1cnJlbnRVc2VyLm1haWwpO1xyXG5cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBTY2hvb2wsIEJyYW5jaCwgQ291cnNlIH0gZnJvbSBcImtlZGJhY2tlbmQvbW9kZWxzXCI7XHJcbmltcG9ydCB7IENvdXJzZUJhbm5lciB9IGZyb20gXCIuLi9jb3Vyc2VzL2NvdXJzZS1iYW5uZXJcIjtcclxuaW1wb3J0IHsgc2hvd0Vycm9yLCBMIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCwgRG9jdW1lbnRBY2Nlc3MsIEJhdGNoUnVubmVyIH0gZnJvbSBcImtlZGJhY2tlbmQvY2xpZW50XCI7XHJcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgaWQ/OiBzdHJpbmdcclxuICB0aXRsZTogc3RyaW5nXHJcbiAgdHlwZT86ICdneW1uYXNpdW0nIHwgJ3ByaW1hcnknXHJcbn1cclxuXHJcbnR5cGUgU3RhdGUgPSBTY2hvb2w7XHJcblxyXG5leHBvcnQgY29uc3QgRWRpdFNjaG9vbCA9IChwcm9wczogUHJvcHMgJiB7ZmVlZGJhY2tVcmw6IHN0cmluZ30pID0+IDxkaXYgc3R5bGU9e3sgb3V0bGluZTogMCB9fT5cclxuICA8Q291cnNlQmFubmVyXHJcbiAgICB0aXRsZT1cIlNrb2xvclwiIGFjdGl2ZVBhZ2U9XCJzY2hvb2xzXCIgY2FsbGJhY2tzPXt7c2Nob29sczogKCk9PmxvY2F0aW9uLmhhc2g9XCIjL3NjaG9vbHNcIn19XHJcbiAgICByb3V0ZXM9e3tmZWVkYmFjazogcHJvcHMuZmVlZGJhY2tVcmx9fSAvPlxyXG4gIDxFZGl0U2Nob29sTm9CYW5uZXIgey4uLnByb3BzfSAvPlxyXG48L2Rpdj47XHJcblxyXG5leHBvcnQgY2xhc3MgRWRpdFNjaG9vbE5vQmFubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgb3JpZ1NjaG9vbDogU2Nob29sO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSBudWxsO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLmxvYWQoKS5jYXRjaChlcnIgPT4gc2hvd0Vycm9yKGVycikpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZCgpIHtcclxuICAgIGlmICh0aGlzLnByb3BzLmlkKSB7XHJcbiAgICAgIC8vIElEIGdpdmVuLCBsb2FkIGl0LlxyXG4gICAgICBjb25zdCB7IGlkIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgICBjb25zdCBzY2hvb2wgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5nZXQ8U2Nob29sPihcInNjaG9vbHNcIiwgaWQpO1xyXG4gICAgICB0aGlzLm9yaWdTY2hvb2wgPSB7IC4uLnNjaG9vbCB9O1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgLi4uc2Nob29sIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gTm8gaWQsIGNyZWF0ZSBuZXcgaW5zdGVhZC5cclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XHJcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICBvZmZpY2lhbEJyYW5jaElkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgICAgaXNHeW1uYXNpdW06IHRoaXMucHJvcHMudHlwZSA9PT0gJ2d5bW5hc2l1bScsXHJcbiAgICAgICAgaXNQcmltYXJ5U2Nob29sOiB0aGlzLnByb3BzLnR5cGUgPT09ICdwcmltYXJ5J1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIHNhdmUoKSB7XHJcbiAgICBjb25zdCByID0gbmV3IEJhdGNoUnVubmVyKCk7XHJcbiAgICBsZXQgc2Nob29sID0geyAuLi50aGlzLnN0YXRlLCB0YWdzOiAodGhpcy5zdGF0ZS50YWdzIHx8IFtdKVxyXG4gICAgICAuZmlsdGVyKHRhZyA9PiBbXCJwcmltYXJ5XCIsIFwiZ3ltbmFzaXVtXCJdLmluZGV4T2YodGFnKSA8IDApXHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChzY2hvb2wuaXNQcmltYXJ5U2Nob29sKSBzY2hvb2wudGFncy5wdXNoKFwicHJpbWFyeVwiKTtcclxuICAgIGlmIChzY2hvb2wuaXNHeW1uYXNpdW0pIHNjaG9vbC50YWdzLnB1c2goXCJneW1uYXNpdW1cIik7XHJcbiAgICBpZiAoIShzY2hvb2wuaXNHeW1uYXNpdW0gfHwgc2Nob29sLmlzUHJpbWFyeVNjaG9vbCkpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yIChMYFNrb2xhbiBtw6VzdGUgYW50aW5nZW4gdmFyYSBneW1uYXNpdW0gZWxsZXIgZ3J1bmRza29sYWApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdGhpcy5vcmlnU2Nob29sKSB7XHJcbiAgICAgIHNjaG9vbC5hY2wgPSBbXCJyb2xlOlVTRVI6UlwiXTtcclxuICAgICAgc2Nob29sLmFjbC5wdXNoKFxyXG4gICAgICAgIG5ldyBEb2N1bWVudEFjY2VzcyhcclxuICAgICAgICAgIFwic2Nob29sUm9sZVwiLFxyXG4gICAgICAgICAgYCR7c2Nob29sLm5hbWV9L0VNUExPWUVFYCwgXCJXXCIpLnRvU3RyaW5nKCkpO1xyXG4gICAgICByLmFkZChcInNjaG9vbHNcIiwgc2Nob29sKTtcclxuICAgICAgdGhpcy5hZGRTY2hvb2xCcmFuY2goc2Nob29sLCByKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5vcmlnU2Nob29sLm5hbWUgIT09IHRoaXMuc3RhdGUubmFtZSkge1xyXG5cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2tvbGFucyBuYW1uIGbDpXIgaW50ZSDDpG5kcmFzLiBLb250YWt0YSBWZW1lbmRvIEFCLlwiKVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICghc2Nob29sLm9mZmljaWFsQnJhbmNoSWQpIHtcclxuICAgICAgICBzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZCA9IGNyZWF0ZVVVSUQoKTtcclxuICAgICAgICB0aGlzLmFkZFNjaG9vbEJyYW5jaChzY2hvb2wsIHIpO1xyXG4gICAgICB9XHJcbiAgICAgIHIucHV0KFwic2Nob29sc1wiLCBzY2hvb2wpO1xyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmJhdGNoKHIubXV0YXRpb25SZXF1ZXN0cyk7XHJcblxyXG4gICAgbG9jYXRpb24uaGFzaCA9IFwiIy9zY2hvb2xzXCI7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFkZFNjaG9vbEJyYW5jaChzY2hvb2w6IHsgdGFnczogc3RyaW5nW107IG5hbWU6IHN0cmluZzsgaXNQcmltYXJ5U2Nob29sPzogYm9vbGVhbjsgaXNHeW1uYXNpdW0/OiBib29sZWFuOyBvZmZpY2lhbEJyYW5jaElkOiBzdHJpbmc7IGNvdXJzZXM/OiBDb3Vyc2VbXTsgYWN0aXZlQ291cnNlcz86IENvdXJzZVtdOyBpZDogc3RyaW5nOyBhY2w/OiBzdHJpbmdbXTsgZGF0ZVRpbWU/OiBudW1iZXI7IHRyZWVQYXJlbnRJZD86IHN0cmluZzsgJGV0YWc/OiBzdHJpbmc7ICRtZXRhPzogXCJhZGRcIiB8IFwicmVmXCIgfCBcInVwZGF0ZVwiIHwgXCJhZGRpbmdcIiB8IFwidXBkYXRpbmdcIiB8IFwiZGVsZXRpbmdcIiB8IFwiZGVsZXRlZFwiOyB9LCByOiBCYXRjaFJ1bm5lcikge1xyXG4gICAgY29uc3QgYnJhbmNoOiBCcmFuY2ggPSB7XHJcbiAgICAgIGlkOiBzY2hvb2wub2ZmaWNpYWxCcmFuY2hJZCxcclxuICAgICAgbmFtZTogc2Nob29sLm5hbWUsXHJcbiAgICAgIHNjaG9vbElkOiBzY2hvb2wuaWQsXHJcbiAgICAgIGFjbDogW1xyXG4gICAgICAgIFwicm9sZTpVU0VSOlJcIixcclxuICAgICAgICBuZXcgRG9jdW1lbnRBY2Nlc3MoXCJzY2hvb2xSb2xlXCIsIGAke3NjaG9vbC5uYW1lfS9FTVBMT1lFRWAsIFwiV1wiKS50b1N0cmluZygpXHJcbiAgICAgIF1cclxuICAgIH07XHJcbiAgICByLmFkZChcImJyYW5jaGVzXCIsIGJyYW5jaCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBkZWxldGVTY2hvb2woKSB7XHJcbiAgICBpZiAocHJvbXB0KExgw4RyIGR1IHPDpGtlciBww6UgYXR0IHRhIGJvcnQgc2tvbGFuIFwiJHt0aGlzLnN0YXRlLm5hbWV9XCI/IFNrcml2IHNrb2xhbnMgZXhha3RhIG5hbW4gZsO2ciBhdHQgYmVrcsOkZnRhYCkgPT09IHRoaXMuc3RhdGUubmFtZSApIHtcclxuICAgICAgY29uc3Qgc2Nob29sQnJhbmNoID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxCcmFuY2g+KFwiYnJhbmNoZXNcIiwge1xyXG4gICAgICAgIGlkczogW3RoaXMuc3RhdGUub2ZmaWNpYWxCcmFuY2hJZF0sXHJcbiAgICAgICAgaW5jbHVkZTogXCJhcHByb3ZlZENoaWxkcmVuXCIsXHJcbiAgICAgICAgZmxhZ3M6IFtcImluY2x1ZGVJZHNPbmx5XCJdXHJcbiAgICAgIH0pO1xyXG4gICAgICBjb25zdCBiciA9IG5ldyBCYXRjaFJ1bm5lcigpO1xyXG4gICAgICBici5kZWxldGUoXCJzY2hvb2xzXCIsIHRoaXMuc3RhdGUuaWQpO1xyXG4gICAgICBzY2hvb2xCcmFuY2hbMF0uYXBwcm92ZWRDaGlsZHJlbi5mb3JFYWNoKCh7aWR9KSA9PiB7XHJcbiAgICAgICAgYnIuZGVsZXRlKFwiYnJhbmNoZXNcIiwgaWQpO1xyXG4gICAgICB9KTtcclxuICAgICAgYnIuZGVsZXRlKFwiYnJhbmNoZXNcIiwgdGhpcy5zdGF0ZS5vZmZpY2lhbEJyYW5jaElkKTtcclxuICAgICAgYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuYmF0Y2goYnIubXV0YXRpb25SZXF1ZXN0cyk7XHJcbiAgICAgIGxvY2F0aW9uLmhhc2g9IFwiIy9zY2hvb2xzXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhbGVydChcIlNrb2xhbiB0b2dzIGludGUgYm9ydCBlZnRlcnNvbSBkZXQgbmFtbiBkdSBhbmdhdiBpbnRlIHN0w6RtbWVyLlwiKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgdGl0bGUsIGlkIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgZWRpdEV4aXN0aW5nID0gISFpZDtcclxuICAgIGNvbnN0IHNjaG9vbCA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCBvcmlnU2Nob29sID0gdGhpcy5vcmlnU2Nob29sO1xyXG4gICAgY29uc3QgaXNBZG1pbiA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5zb21lKHJvbGUgPT4gcm9sZSA9PT0gXCJBRE1JTlwiKTtcclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXRcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlY29udGVudCBzdi1sYXlvdXQgc3Ytc3BhY2VyLTIwcHh2dCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgIDxoMj57dGl0bGV9PC9oMj5cclxuICAgICAgICA8aHIgLz5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+TmFtbjo8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIGF1dG9Gb2N1cz17IXNjaG9vbCB8fCAhc2Nob29sLm5hbWV9XHJcbiAgICAgICAgICAgICAgZGlzYWJsZWQ9eyFpc0FkbWluIHx8IGVkaXRFeGlzdGluZ31cclxuICAgICAgICAgICAgICB0YWJJbmRleD17MX1cclxuICAgICAgICAgICAgICBzaXplPXs1MH1cclxuICAgICAgICAgICAgICB2YWx1ZT17c2Nob29sID8gc2Nob29sLm5hbWUgOiBcIlwifVxyXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHsgbmFtZTogZXYudGFyZ2V0LnZhbHVlIH0pfSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBzcGFjZWRcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+VmlzbmluZ3NuYW1uOjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgYXV0b0ZvY3VzPXtzY2hvb2wgJiYgIXNjaG9vbC5kaXNwbGF5TmFtZX1cclxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWlzQWRtaW59XHJcbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICAgICAgc2l6ZT17NTB9XHJcbiAgICAgICAgICAgICAgdmFsdWU9e3NjaG9vbCA/IHNjaG9vbC5kaXNwbGF5TmFtZSA6IFwiXCJ9XHJcbiAgICAgICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHRoaXMuc2V0U3RhdGUoeyBkaXNwbGF5TmFtZTogZXYudGFyZ2V0LnZhbHVlIH0pfSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBzcGFjZWRcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+VHlwOjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgbmFtZT1cInNjaG9vbFR5cGVQcmltYXJ5XCJcclxuICAgICAgICAgICAgICBkaXNhYmxlZD17IWlzQWRtaW59XHJcbiAgICAgICAgICAgICAgY2hlY2tlZD17c2Nob29sICYmIHNjaG9vbC5pc1ByaW1hcnlTY2hvb2x9XHJcbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICAgICAgdmFsdWU9XCJwcmltYXJ5XCJcclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzUHJpbWFyeVNjaG9vbDogZXYudGFyZ2V0LmNoZWNrZWQgfSl9IC8+XHJcbiAgICAgICAgICAgICZuYnNwO0dydW5kc2tvbGFcclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiXHJcbiAgICAgICAgICAgICAgbmFtZT1cInNjaG9vbFR5cGVHeW1uYXNpdW1cIlxyXG4gICAgICAgICAgICAgIGRpc2FibGVkPXshaXNBZG1pbn1cclxuICAgICAgICAgICAgICBjaGVja2VkPXtzY2hvb2wgJiYgc2Nob29sLmlzR3ltbmFzaXVtfVxyXG4gICAgICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgICAgIHZhbHVlPVwiZ3ltbmFzaXVtXCJcclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdGhpcy5zZXRTdGF0ZSh7IGlzR3ltbmFzaXVtOiBldi50YXJnZXQuY2hlY2tlZCB9KX0gLz5cclxuICAgICAgICAgICAgJm5ic3A7R3ltbmFzaXVtXHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxici8+XHJcbiAgICAgICAge2lzQWRtaW4gJiYgZWRpdEV4aXN0aW5nICYmIDxkaXYgdGFiSW5kZXg9ezJ9IGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiIG9uQ2xpY2s9eygpID0+XHJcbiAgICAgICAgICB0aGlzLmRlbGV0ZVNjaG9vbCgpLmNhdGNoKHNob3dFcnJvcil9PlxyXG4gICAgICAgICAgVGEgYm9ydCBza29sYVxyXG4gICAgICAgIDwvZGl2Pn1cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1bGwtcmlnaHRcIj4mbmJzcDs8L2Rpdj5cclxuICAgICAgICA8TGluayBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiB0bz1cIi9zY2hvb2xzXCI+XHJcbiAgICAgICAgICBBdmJyeXRcclxuICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgXHJcbiAgICAgICAge2lzQWRtaW4gJiYgPGEgdGFiSW5kZXg9ezF9IGNsYXNzTmFtZT17XCJidG4gYnRuLWxhcmdlXCJ9IG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICAgIGlmIChvcmlnU2Nob29sICYmIG9yaWdTY2hvb2wubmFtZSAhPT0gc2Nob29sLm5hbWUpIHtcclxuICAgICAgICAgICAgaWYgKCFjb25maXJtKExgw4RyIGR1IHPDpGtlciBww6UgYXR0IGR1IHZpbGwgZMO2cGEgb20gc2tvbGFuPyBEZXR0YSBww6V2ZXJrYXIgcG9ydGFsZW5zIGZ1bmt0aW9uIGbDtnIgbMOkcmFyZSBvY2ggZWxldmVyIHNvbSB0aWxsaMO2ciBza29sYW4uIE5hbW5ldCBtw6VzdGUgc3TDpG1tYSBleGFrdCDDtnZlcmVucyBtZWQgbmFtbmdpdm5pbmdlbiBhdiBza29sYW4gcMOlIGFudsOkbmRhcm9iamVrdGVuLlxyXG5cclxuRGV0IHNvbSBow6RuZGVyIGFubmFycyDDpHIgYXR0IGVsZXZlciBvY2ggbMOkcmFyZSBww6Ugc2tvbGFuIGludGUgbMOkbmdyZSBoaXR0YXIgbsOlZ3JhIGt1cnNlci5cclxuXHJcbkJsaXIgZGV0IGZlbCBrYW4gZHUgZG9jayBhbGx0aWQgYmFyYSBkw7ZwYSB0aWxsYmFrYSBza29sYW5zIG5hbW4uYCkpIHtcclxuICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuc2F2ZSgpLmNhdGNoKHNob3dFcnJvcik7XHJcbiAgICAgICAgfX0+U3BhcmE8L2E+fVxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PjtcclxuICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBMaW5rLCBSZWRpcmVjdCB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBDb3Vyc2VCYW5uZXIgfSBmcm9tIFwiLi4vY291cnNlcy9jb3Vyc2UtYmFubmVyXCI7XHJcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xyXG5pbXBvcnQgeyBTaG93U3ViamVjdElubmVyIH0gZnJvbSAnLi9zaG93LXN1YmplY3QtaW5uZXInO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBpZDogc3RyaW5nXHJcbiAgZmVlZGJhY2tVcmw6IHN0cmluZ1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIHN1YmplY3Q6IFN1YmplY3RcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNob3dTdWJqZWN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge3N1YmplY3Q6IG51bGx9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgdGhpcy5sb2FkKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkKCkge1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmdldDxTdWJqZWN0Pignc3ViamVjdHMnLCB0aGlzLnByb3BzLmlkLCB7IGluY2x1ZGU6ICdjb3Vyc2VUZW1wbGF0ZXMnIH0pO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN1YmplY3QgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUuc3ViamVjdCkgcmV0dXJuIDxwPjxTcGlubmVyIC8+PC9wPjtcclxuICAgIGNvbnN0IHsgbmFtZSwgY29kZSwgY291cnNlVGVtcGxhdGVzLCBzY2hvb2xUeXBlIH0gPSB0aGlzLnN0YXRlLnN1YmplY3Q7XHJcbiAgICByZXR1cm4gPGRpdj48Q291cnNlQmFubmVyXHJcbiAgICAgIHRpdGxlPXtuYW1lfVxyXG4gICAgICBhY3RpdmVQYWdlPVwic3ViamVjdHNcIlxyXG4gICAgICByb3V0ZXM9e3tmZWVkYmFjazogdGhpcy5wcm9wcy5mZWVkYmFja1VybH19XHJcbiAgICAgICAvPlxyXG4gICAgICAgPFNob3dTdWJqZWN0SW5uZXIgaWQ9e3RoaXMucHJvcHMuaWR9IC8+XHJcbiAgICA8L2Rpdj47XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIExpbmssIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IENvdXJzZUJhbm5lciB9IGZyb20gXCIuLi9jb3Vyc2VzL2NvdXJzZS1iYW5uZXJcIjtcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zcGlubmVyXCI7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGlkOiBzdHJpbmdcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBzdWJqZWN0OiBTdWJqZWN0XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTaG93U3ViamVjdElubmVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge3N1YmplY3Q6IG51bGx9O1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbE1vdW50KCkge1xyXG4gICAgdGhpcy5sb2FkKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkKCkge1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmdldDxTdWJqZWN0Pignc3ViamVjdHMnLCB0aGlzLnByb3BzLmlkLCB7IGluY2x1ZGU6ICdjb3Vyc2VUZW1wbGF0ZXMnIH0pO1xyXG4gICAgdGhpcy5zZXRTdGF0ZSh7IHN1YmplY3QgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBpZiAoIXRoaXMuc3RhdGUuc3ViamVjdCkgcmV0dXJuIDxwPjxTcGlubmVyIC8+PC9wPjtcclxuICAgIGNvbnN0IHsgbmFtZSwgY29kZSwgY291cnNlVGVtcGxhdGVzLCBzY2hvb2xUeXBlIH0gPSB0aGlzLnN0YXRlLnN1YmplY3Q7XHJcbiAgICByZXR1cm4gPGRpdj5cclxuICAgICAge3NjaG9vbFR5cGUgPT09ICdwcmltYXJ5JyA/IDw+XHJcbiAgICAgICAgPGgyPkdydW5kc2tvbGXDpG1uZXQge25hbWV9ICh7Y29kZX0pPC9oMj5cclxuICAgICAgICA8dWwgY2xhc3NOYW1lPVwiZW50aXR5LWxpc3RcIj5cclxuICAgICAgICAgIHtjb3Vyc2VUZW1wbGF0ZXMubWFwKCh7aWQsIGNvZGUsIHB1Ymxpc2hhYmxlLCBwb2ludHMsIHNjaG9vbEdyYWRlfSkgPT5cclxuICAgICAgICAgIDxsaSBrZXk9e2lkfSBjbGFzc05hbWU9XCJjb21wbGV0ZVwiPlxyXG4gICAgICAgICAgICB7bmFtZX0gZsO2ciDDpXJza3VycyB7c2Nob29sR3JhZGV9XHJcbiAgICAgICAgICA8L2xpPil9XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC8+ICA6IDw+XHJcbiAgICAgICAgPGgyPkt1cnNlciBmw7ZyIMOkbW5ldCB7bmFtZX0gKHtjb2RlfSk8L2gyPlxyXG4gICAgICAgIDx1bCBjbGFzc05hbWU9XCJlbnRpdHktbGlzdFwiPlxyXG4gICAgICAgICAge2NvdXJzZVRlbXBsYXRlcy5tYXAoKHtpZCwgbmFtZSwgY29kZSwgcHVibGlzaGFibGUsIHBvaW50c30pID0+XHJcbiAgICAgICAgICA8bGkga2V5PXtpZH0gY2xhc3NOYW1lPVwiY29tcGxldGVcIj5cclxuICAgICAgICAgICAge25hbWV9IC0ge3BvaW50c31wXHJcbiAgICAgICAgICA8L2xpPil9XHJcbiAgICAgICAgPC91bD5cclxuICAgICAgPC8+fVxyXG4gICAgPC9kaXY+O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQge1RDfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5leHBvcnQgdHlwZSBUZXJtID0gJ0FUJyB8ICdTVCc7XHJcbmV4cG9ydCB0eXBlIEFjYWRlbWljWWVhciA9IHN0cmluZzsgLy8gXCIyMDE2LzIwMTdcIiwgXCIyMDE3LzIwMThcIiwgLi4uXHJcbmV4cG9ydCB0eXBlIFNjaG9vbEdyYWRlID0gbnVtYmVyOyAvLyAwLTkgKGdydW5kc2tvbGEpLCAxMC0xMyAoZ3ltbmFzaXVtKVxyXG5leHBvcnQgdHlwZSBHcmFkZSA9ICdBJyB8ICdCJyB8ICdDJyB8ICdEJyB8ICdFJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVXNlciB7XHJcbiAgICB1c2VybmFtZT86IHN0cmluZztcclxuICAgIG1haWw6IHN0cmluZztcclxuICAgIGRpc3BsYXlOYW1lOiBzdHJpbmc7XHJcbiAgICByb2xlczogc3RyaW5nW107XHJcbiAgICBzY2hvb2xHcmFkZT86IG51bWJlcjtcclxuICAgIHNjaG9vbD86IHN0cmluZztcclxuICAgIHNjaG9vbFR5cGU/OiBzdHJpbmc7XHJcbiAgICB0dXRvckZvcj86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMZWFybmluZ01vZHVsZVRhc2tzIHtcclxuICAgIG1vZHVsZU5hbWU6IHN0cmluZztcclxuICAgIHVybD86IHN0cmluZztcclxuICAgIHN1YmplY3Q6IFNjaG9vbFN1YmplY3Q7XHJcbiAgICBjb21tb25UYXNrcz86IExlYXJuaW5nVGFza1tdO1xyXG4gICAgbGVhcm5pbmdHb2FsczogTGVhcm5pbmdHb2FsW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGVhcm5pbmdHb2FsIHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHRhc2tzPzogTGVhcm5pbmdUYXNrW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tR29hbCB7XHJcbiAgbmFtZTogc3RyaW5nLFxyXG4gIHVybDogc3RyaW5nLFxyXG4gIGNvdXJzZTogc3RyaW5nLFxyXG4gIGRlc2NyaXB0aW9uOiBzdHJpbmdcclxufVxyXG5cclxuXHJcbi8qZXhwb3J0IGludGVyZmFjZSBMZWFybmluZ0dvYWwge1xyXG4gICAgaWQ/OiBzdHJpbmc7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBjb3Vyc2VJZD86IHN0cmluZztcclxuICAgIHN1YmplY3RJZD86IHN0cmluZztcclxufSovXHJcblxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMZWFybmluZ1Rhc2sge1xyXG4gICAgbmFtZTogc3RyaW5nO1xyXG4gICAgdXJsPzogc3RyaW5nO1xyXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XHJcbiAgICBkb25lPzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMZWFybmluZ0NvdXJzZSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICB1cmw/OiBzdHJpbmc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2Nob29sU3ViamVjdCB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBjb3Vyc2U6IExlYXJuaW5nQ291cnNlO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ291cnNlIHtcclxuICAgIC8vU2NoZW1hOiBcIlt5ZWFyK3Rlcm0rc2Nob29sWWVhcituYW1lXSxzb3J0b3JkZXJcIjtcclxuICAgIGlkPzogc3RyaW5nO1xyXG4gICAgLy9hWWVhcjogc3RyaW5nOyAvLyBBY2FkZW1pYyBZZWFyIC8gTMOkc8OlciAvIFwiMjAxNi8yMDE3XCIsIFwiMjAxNy8yMDE4XCIsIC4uLlxyXG4gICAgLy9zY2hvb2xHcmFkZTogbnVtYmVyOyAvLyDDhXJza3VycyAoMC05IGdydW5kc2tvbGEsIDEwLTEzIGd5bW5hc2l1bSkuIDEwMCA9IGVqIGJ1bmRldCB0aWxsIMOlcnNrdXJzLlxyXG4gICAgLy90ZXJtPzogVGVybTsgLy8gQVQgKEF1dHVtbiBUZXJtKSAvIFNUIChTcHJpbmcgVGVybSlcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHBvaW50cz86IG51bWJlcjtcclxuICAgIG1vZHVsZXM/OiBDb3Vyc2VNb2R1bGVbXTtcclxuICAgIGxlYXJuaW5nR29hbHM/OiBMZWFybmluZ0dvYWxbXTtcclxuICAgIHVybD86IHN0cmluZztcclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ291cnNlTW9kdWxlIHtcclxuICAgIGlkPzogc3RyaW5nO1xyXG4gICAgY291cnNlSWQ6IHN0cmluZztcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHJlYWRvbmx5IHVybDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhcmdldEdyYWRlIHtcclxuICAgIGlkPzogc3RyaW5nO1xyXG4gICAgdXNlcjogc3RyaW5nO1xyXG4gICAgY291cnNlSWQ/OiBzdHJpbmc7XHJcbiAgICBzdWJqZWN0SWQ/OiBzdHJpbmc7XHJcbiAgICBhWWVhcj86IEFjYWRlbWljWWVhcjsgLy8gTMOkc8OlciwgdGV4IFwiMjAxNi8yMDE3XCIuIG51bGwgbWVhbnMgZmluYWwgZ29hbC5cclxuICAgIHRlcm0/OiBUZXJtOyAvLyBudWxsIG1lYW5zIGZpbmFsIGdvYWwuXHJcbiAgICBncmFkZTogR3JhZGU7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgY29uc3QgZnV0dXJlQWJpbGl0aWVzID0gW1xyXG4gICAgXCJMw6RyYSBhdHQgbMOkcmFcIixcclxuICAgIFwiU2FtYXJiZXRhXCIsXHJcbiAgICBcIkFnZXJhIGdsb2JhbHRcIixcclxuICAgIFwiVmlzYSBoYW5kbGluZ3NrcmFmdFwiLFxyXG4gICAgXCJWYXJhIGlubm92YXRpdlwiLFxyXG4gICAgXCJMZXZhIGRpZ2l0YWx0XCJdO1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZXJzIH0gZnJvbSAnLi4vZGF0YS91c2Vycyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ2hvb3NlVXNlcigpIHtcclxuICBsZXQgc2VsZWN0O1xyXG4gIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dFwiPlxyXG4gICAgPGgyPlbDpGxqIGFudsOkbmRhcmU8L2gyPlxyXG4gICAgPHRhYmxlIGNsYXNzTmFtZT1cImxvZ2luLXRhYmxlXCI+PHRoZWFkPjx0cj5cclxuICAgICAgPHRoPk5hbW48L3RoPlxyXG4gICAgICA8dGg+Um9sbGVyPC90aD5cclxuICAgICAgPHRoPkUtcG9zdDwvdGg+XHJcbiAgICAgIDx0aD5Ta29sYTwvdGg+XHJcbiAgICA8L3RyPjwvdGhlYWQ+XHJcbiAgICAgIDx0Ym9keT5cclxuICAgICAgICB7dXNlcnMubWFwKCh7IHVzZXJuYW1lLCBkaXNwbGF5TmFtZSwgbWFpbCwgc2Nob29sLCByb2xlcyB9KSA9PlxyXG4gICAgICAgICAgPHRyIGtleT17bWFpbH0gb25DbGljaz17KCkgPT4gbG9jYXRpb24uc2VhcmNoID0gYD91c2VyPSR7dXNlcm5hbWV9YH0+XHJcbiAgICAgICAgICAgIDx0ZD57ZGlzcGxheU5hbWV9PC90ZD5cclxuICAgICAgICAgICAgPHRkIHN0eWxlPXtyb2xlcy5sZW5ndGggPT09IDAgPyB7IGZvbnRTdHlsZTogJ2l0YWxpYycgfSA6IHt9fT57cm9sZXMubGVuZ3RoID09PSAwID8gXCJzYWtuYXIgcm9sbGVyXCIgOiByb2xlcy5qb2luKCcsICcpfTwvdGQ+XHJcbiAgICAgICAgICAgIDx0ZD57bWFpbH08L3RkPlxyXG4gICAgICAgICAgICA8dGQgc3R5bGU9e3NjaG9vbCA/IHt9IDogeyBmb250U3R5bGU6ICdpdGFsaWMnIH19PntzY2hvb2wgfHwgXCJzYWtuYXIgc2tvbGFcIn08L3RkPlxyXG4gICAgICAgICAgPC90cj5cclxuICAgICAgICApfVxyXG4gICAgICA8L3Rib2R5PjwvdGFibGU+XHJcbiAgPC9kaXY+XHJcbn07XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgU2Nob29sIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBEaWFsb2dDb250YWluZXIgfSBmcm9tIFwiLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3RcIjtcclxuaW1wb3J0IHsgTCB9IGZyb20gXCIuLi8uLi8uLi91dGlscy91dGlsc1wiO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XHJcbmltcG9ydCB7IEVkaXRTY2hvb2wgfSBmcm9tICcuL2VkaXQtc2Nob29sJztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBhY3RBcyB9IGZyb20gXCIuLi8uLi8uLi9hY2Nlc3MtY29udHJvbFwiO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgc2Nob29scz86IFNjaG9vbFtdXHJcbiAgdmlld0NvdXJzZVVybDogc3RyaW5nXHJcbiAgdHlwZTogJ2d5bW5hc2l1bScgfCAncHJpbWFyeSdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEVkaXRhYmxlU2Nob29sTGlzdCA9IChwcm9wczogUHJvcHMpID0+IHtcclxuICBjb25zdCB7IHNjaG9vbHMsIHZpZXdDb3Vyc2VVcmwgfSA9IHByb3BzO1xyXG4gIGNvbnN0IGlzQWRtaW4gPSBlbnYuY3VycmVudFVzZXIucm9sZXMuc29tZShyb2xlID0+IHJvbGUgPT09IFwiQURNSU5cIik7XHJcbiAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiZWRpdGFibGUtc2Nob29sLWxpc3RcIj5cclxuICAgIDxkaXY+XHJcbiAgICAgIHtzY2hvb2xzID8gPHRhYmxlPlxyXG4gICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgIHtzY2hvb2xzLm1hcChzY2hvb2wgPT5cclxuICAgICAgICAgICAgPHRyIGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIiBrZXk9e3NjaG9vbC5pZH0+XHJcbiAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgPExpbmsgY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIiB0bz17YC9zY2hvb2xzLyR7c2Nob29sLmlkfS9lZGl0YH0+PC9MaW5rPlxyXG4gICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgPHA+e3NjaG9vbC5uYW1lfTwvcD5cclxuICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgIDxwPjxhIHN0eWxlPXt7Y3Vyc29yOiAncG9pbnRlcid9fSBvbkNsaWNrPXsoKT0+YWN0QXMoe3JvbGU6IFwiRU1QTE9ZRUVcIiwgc2Nob29sOiBzY2hvb2wubmFtZX0pfT5BZ2VyYSBzb20gbMOkcmFyZSBww6UgZGVubmEgc2tvbGE8L2E+PC9wPlxyXG4gICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgPHA+PGEgc3R5bGU9e3tjdXJzb3I6ICdwb2ludGVyJ319IG9uQ2xpY2s9eygpPT5hY3RBcyh7cm9sZTogXCJTVFVERU5UXCIsIHNjaG9vbDogc2Nob29sLm5hbWUsIHVybDogdmlld0NvdXJzZVVybH0pfT5BZ2VyYSBzb20gZWxldiBww6UgZGVubmEgc2tvbGE8L2E+PC9wPlxyXG4gICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgIDwvdHI+KX1cclxuICAgICAgICA8L3Rib2R5PlxyXG4gICAgICA8L3RhYmxlPiA6IDxwPjxTcGlubmVyIC8+Vi5nLiB2w6RudGEgbWVkYW4gc2tvbG9yIGxhZGRhczwvcD59XHJcbiAgICA8L2Rpdj5cclxuICAgIDxiciAvPlxyXG4gICAge3NjaG9vbHMgJiYgaXNBZG1pbiAmJiA8TGluayB0bz17YC9zY2hvb2xzL25ldy8ke3Byb3BzLnR5cGV9YH0gY2xhc3NOYW1lPVwiYnRuXCI+e1xyXG4gICAgICAgIHByb3BzLnR5cGUgPT0gJ2d5bW5hc2l1bScgPyBMYEzDpGdnIHRpbGwgZ3ltbmFzaWVza29sYWAgOlxyXG4gICAgICAgIHByb3BzLnR5cGUgPT0gJ3ByaW1hcnknID8gTGBMw6RnZyB0aWxsIGdydW5kc2tvbGFgIDpcclxuICAgICAgICBMYEzDpGdnIHRpbGwgc2tvbGFgfTwvTGluaz59XHJcbiAgPC9kaXYgPlxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4uL2NvdXJzZXMvY291cnNlLWJhbm5lclwiO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IFNjaG9vbCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgRWRpdGFibGVTY2hvb2xMaXN0IH0gZnJvbSAnLi9lZGl0YWJsZS1zY2hvb2wtbGlzdCc7XHJcbmltcG9ydCB7IHNob3dFcnJvciwgY29tcGFyZVByb3AgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gJy4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXInO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICB2aWV3Q291cnNlVXJsOiBzdHJpbmc7XHJcbiAgZmVlZGJhY2tVcmw6IHN0cmluZztcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBzY2hvb2xzOiBTY2hvb2xbXSB8IG51bGxcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFNjaG9vbHMgPSAocHJvcHM6IFByb3BzKSA9PiA8ZGl2IHN0eWxlPXt7IG91dGxpbmU6IDAgfX0+XHJcbiAgPENvdXJzZUJhbm5lciB0aXRsZT1cIlNrb2xvclwiIGFjdGl2ZVBhZ2U9XCJzY2hvb2xzXCIgcm91dGVzPXt7ZmVlZGJhY2s6IHByb3BzLmZlZWRiYWNrVXJsfX0gLz5cclxuICA8U2Nob29sc1dpdGhvdXRCYW5uZXIgdmlld0NvdXJzZVVybD17cHJvcHMudmlld0NvdXJzZVVybH0gLz5cclxuPC9kaXY+XHJcblxyXG5leHBvcnQgY2xhc3MgU2Nob29sc1dpdGhvdXRCYW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UGljazxQcm9wcywgXCJ2aWV3Q291cnNlVXJsXCI+LFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBzY2hvb2xzOiBudWxsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnREaWRNb3VudCgpIHtcclxuICAgIHRoaXMubG9hZCgpLmNhdGNoKGVyciA9PiBzaG93RXJyb3IoZXJyLm1lc3NhZ2UgfHwgZXJyKSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkKCkge1xyXG4gICAgY29uc3Qgc2Nob29scyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8U2Nob29sPihcInNjaG9vbHNcIik7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgc2Nob29scyB9KTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgc2Nob29scyB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHNjaG9vbHMgJiYgc2Nob29scy5zb3J0KGNvbXBhcmVQcm9wKFwibmFtZVwiKSk7XHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0XCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICB7c2Nob29scyA/IDw+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxoMj5HeW1uYXNpZXNrb2xvcjwvaDI+XHJcbiAgICAgICAgICA8RWRpdGFibGVTY2hvb2xMaXN0XHJcbiAgICAgICAgICAgIHNjaG9vbHM9e3NjaG9vbHMuZmlsdGVyKHNjaG9vbCA9PiBzY2hvb2wuaXNHeW1uYXNpdW0pfVxyXG4gICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XHJcbiAgICAgICAgICAgIHR5cGU9XCJneW1uYXNpdW1cIiAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICA8aDI+R3J1bmRza29sb3I8L2gyPlxyXG4gICAgICAgICAgPEVkaXRhYmxlU2Nob29sTGlzdFxyXG4gICAgICAgICAgICBzY2hvb2xzPXtzY2hvb2xzLmZpbHRlcihzY2hvb2wgPT4gc2Nob29sLmlzUHJpbWFyeVNjaG9vbCl9XHJcbiAgICAgICAgICAgIHZpZXdDb3Vyc2VVcmw9e3RoaXMucHJvcHMudmlld0NvdXJzZVVybH1cclxuICAgICAgICAgICAgdHlwZT1cInByaW1hcnlcIiAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8Lz4gOiA8U3Bpbm5lciAvPn1cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1Rhc2ssIENvdXJzZX0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvb3Blbi1jbG9zZS1ib3gnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICB0YXNrOiBUYXNrO1xyXG4gIGNvdXJzZTogQ291cnNlO1xyXG4gIHVwZGF0ZUxpbms6IChpZDogc3RyaW5nLCBsaW5rT3JVbmxpbms6IGJvb2xlYW4pID0+IHZvaWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBUYXNrTWlncmF0aW9uQm94IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7dGFzaywgY291cnNlLCB1cGRhdGVMaW5rfSA9IHRoaXMucHJvcHM7XHJcbiAgICBpZiAoIXRhc2subWlncmF0ZWRUZXh0cykgcmV0dXJuIDw+Jm5ic3A7PC8+O1xyXG4gICAgY29uc3Qge2FiaWxpdGllcywgY2VudHJhbENvbnRlbnQsIGtub3dsZWRnZVJlcXVpcmVtZW50c30gPSB0YXNrLm1pZ3JhdGVkVGV4dHM7XHJcbiAgICBjb25zdCBrcnMgPSBPYmplY3Qua2V5cyhrbm93bGVkZ2VSZXF1aXJlbWVudHMgfHwge30pLm1hcChpZCA9PiAoe1xyXG4gICAgICAuLi5jb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzLmZpbmQodCA9PiB0LmlkID09PSBpZCksXHJcbiAgICAgIC4uLmtub3dsZWRnZVJlcXVpcmVtZW50c1tpZF1cclxuICAgIH0pKS8vLmZpbHRlcigoe25hbWV9KSA9PiAhIW5hbWUpO1xyXG4gICAgY29uc3Qga3JBID0ge3RpdGxlOiBcIlVwcGRhdGVyYXQga3Vuc2thcHNrcmF2IGbDtnIgYmV0eWdldCBBXCIsIHR5cGU6IFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIGl0ZW1zOiBrcnMuZmlsdGVyKGtyID0+IGtyLmdyYWRlU3RlcCA9PT0gJ0EnKX07XHJcbiAgICBjb25zdCBrckMgPSB7dGl0bGU6IFwiVXBwZGF0ZXJhdCBLdW5za2Fwc2tyYXYgZsO2ciBiZXR5Z2V0IENcIiwgdHlwZTogXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIiwgaXRlbXM6IGtycy5maWx0ZXIoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSAnQycpfTtcclxuICAgIGNvbnN0IGtyRSA9IHt0aXRsZTogXCJVcHBkYXRlcmF0IGt1bnNrYXBza3JhdiBmw7ZyIGJldHlnZXQgRVwiLCB0eXBlOiBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBpdGVtczoga3JzLmZpbHRlcihrciA9PiBrci5ncmFkZVN0ZXAgPT09ICdFJyl9O1xyXG4gICAgY29uc3QgYWJzID0ge3RpdGxlOiBcIlVwcGRhdGVyYWRlIGbDtnJtw6Vnb3JcIiwgdHlwZTogXCJhYmlsaXRpZXNcIiwgaXRlbXM6IE9iamVjdC5rZXlzKGFiaWxpdGllcyB8fCB7fSkubWFwKGlkID0+ICh7XHJcbiAgICAgIC4uLmNvdXJzZS5hYmlsaXRpZXMuZmluZCh0ID0+IHQuaWQgPT09IGlkKSxcclxuICAgICAgLi4uYWJpbGl0aWVzW2lkXX0pXHJcbiAgICApfS8vLmZpbHRlcigoe25hbWV9KSA9PiAhIW5hbWUpfTtcclxuICAgIGNvbnN0IGNjcyA9IHt0aXRsZTogXCJVcHBkYXRlcmF0IGNlbnRyYWx0IGlubmVow6VsbFwiLCB0eXBlOiBcImNlbnRyYWxDb250ZW50XCIsIGl0ZW1zOiBPYmplY3Qua2V5cyhjZW50cmFsQ29udGVudCB8fCB7fSkubWFwKGlkID0+ICh7XHJcbiAgICAgIC4uLmNvdXJzZS5jZW50cmFsQ29udGVudC5maW5kKGNjID0+IGNjLmlkID09IGlkKSxcclxuICAgICAgLi4uY2VudHJhbENvbnRlbnRbaWRdXHJcbiAgICAgIH0pXHJcbiAgICApfS8vLmZpbHRlcigoe25hbWV9KSA9PiAhIW5hbWUpfTtcclxuICAgIGNvbnN0IHRhYmxlc1RvU2hvdyA9IFtrckEsIGtyQywga3JFLCBjY3MsIGFic10uZmlsdGVyKGJveEluZm8gPT4gYm94SW5mby5pdGVtcy5sZW5ndGggPiAwKTtcclxuICAgIGlmICh0YWJsZXNUb1Nob3cubGVuZ3RoID09PSAwKSByZXR1cm4gPD4mbmJzcDs8Lz47XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgPE9wZW5DbG9zZUJveCBjbGFzc05hbWU9XCJsYXJnZXJcIiB0aXRsZT17PGRpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIndhcm5pbmdGbGFnXCI+XHJcbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1leGNsYW1hdGlvbi10cmlhbmdsZVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8cD5VcHBkYXRlcmFkZSBmb3JtdWxlcmluZ2FyIGZyw6VuIFNrb2x2ZXJrZXQ8L3A+XHJcbiAgICAgIDwvZGl2Pn0+XHJcbiAgICAgICAge3RhYmxlc1RvU2hvdy5tYXAoKHt0aXRsZSwgdHlwZSwgaXRlbXN9KSA9PiA8ZGl2IGtleT17dGl0bGV9PlxyXG4gICAgICAgICAgPGg1Pnt0aXRsZX08L2g1PlxyXG4gICAgICAgICAgPHRhYmxlPlxyXG4gICAgICAgICAgICA8dGhlYWQ+XHJcbiAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgPHRoIHN0eWxlPXt7d2lkdGg6IFwiNDAlXCJ9fT5VcnNwcnVuZ2xpZyBmb3JtdWxlcmluZzwvdGg+XHJcbiAgICAgICAgICAgICAgICA8dGggc3R5bGU9e3t3aWR0aDogXCI0MCVcIn19PlNrb2x2ZXJrZXRzIG55YSBmb3JtdWxlcmluZzwvdGg+XHJcbiAgICAgICAgICAgICAgICA8dGg+VMOkY2tlciB1cHBnaWZ0ZW4gZGVuIG55YSBmb3JtdWxlcmluZ2VuPzwvdGg+XHJcbiAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgPC90aGVhZD5cclxuICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgIHtpdGVtcy5tYXAoaXRlbSA9PiA8dHIga2V5PXtpdGVtLmlkfT5cclxuICAgICAgICAgICAgICAgIDx0ZCBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogaXRlbS5vbGRUZXh0fX0gLz5cclxuICAgICAgICAgICAgICAgIDx0ZCBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogaXRlbS5uYW1lfX0gLz5cclxuICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+dXBkYXRlTGluayhpdGVtLmlkLCB0cnVlKX0+SmEgLSBiZWjDpWxsIGtvcHBsaW5nZW48L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKT0+dXBkYXRlTGluayhpdGVtLmlkLCBmYWxzZSl9Pk5laiAtIHRhIGJvcnQga29wcGxpbmdlbjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICA8L3RyPil9XHJcbiAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICA8L3RhYmxlPlxyXG4gICAgICAgIDwvZGl2Pil9XHJcbiAgICAgIDwvT3BlbkNsb3NlQm94PlxyXG5cclxuICAgIClcclxuICB9XHJcbn0iLCJleHBvcnQgaW50ZXJmYWNlIFNrb2x2ZXJrZXRTdWJqZWN0IHtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgc2Nob29sVHlwZTogJ2d5bW5hc2l1bScgfCAncHJpbWFyeSc7XHJcbiAgY29kZTogc3RyaW5nO1xyXG4gIHB1cnBvc2U6IHN0cmluZztcclxuICBjb3Vyc2VzOiBTa29sdmVya2V0Q291cnNlW107XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2tvbHZlcmtldENvdXJzZSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBjb2RlOiBzdHJpbmc7XHJcbiAgICBjZW50cmFsQ29udGVudDogc3RyaW5nO1xyXG4gICAgeWVhcj86ICcxLTMnIHwgJzQtNicgfCAnNy05JztcclxuICAgIC8vY2VudHJhbENvbnRlbnQ6IEFycmF5PHt5ZWFyPzogc3RyaW5nLCB0ZXh0OiBzdHJpbmd9PjtcclxuICAgIHBvaW50czogbnVtYmVyO1xyXG4gICAga25vd25sZWRnZVJlcXVpcmVtZW50czogQXJyYXk8e2dyYWRlU3RlcDogc3RyaW5nLCB0ZXh0OiBzdHJpbmd9PjtcclxuICAgIC8va25vd25sZWRnZVJlcXVpcmVtZW50czogQXJyYXk8e2dyYWRlU3RlcDogc3RyaW5nLCB0ZXh0OiBzdHJpbmcsIHllYXI/OiBudW1iZXJ9PjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2tvbHZlcmtldFllYXJzIChpblllYXI6IHN0cmluZykgOiBBcnJheTwnMS0zJyB8ICc0LTYnIHwgJzctOSc+IHtcclxuICBzd2l0Y2goaW5ZZWFyLnRyaW0oKSkge1xyXG4gICAgY2FzZSAnMyc6XHJcbiAgICBjYXNlICcxLTMnOlxyXG4gICAgICByZXR1cm4gWycxLTMnXTtcclxuICAgIGNhc2UgJzYnOlxyXG4gICAgY2FzZSAnNC02JzpcclxuICAgICAgcmV0dXJuIFsnNC02J107XHJcbiAgICBjYXNlICc3LTknOlxyXG4gICAgY2FzZSAnOSc6XHJcbiAgICAgIHJldHVybiBbJzctOSddO1xyXG4gICAgLy8gU3BlY2lhbHNcclxuICAgIGNhc2UgJzEnOiByZXR1cm4gW1wiMS0zXCJdOyAvLyBGw7ZyZWtvbW1lciBpIMOkbW5lbmEgXCJTdmVuc2thXCIgb2NoIFwiU3ZlbnNrYSBzb20gYW5kcmFzcHLDpWtcIlxyXG4gICAgY2FzZSAnMXMnOiByZXR1cm4gW1wiMS0zXCJdOyAvLyBGw7ZyZWtvbW1lciBpIMOkbW5lbmEgXCJTdmVuc2thXCIgb2NoIFwiU3ZlbnNrYSBzb20gYW5kcmFzcHLDpWtcIlxyXG4gICAgY2FzZSAnMS02JzogcmV0dXJuIFtcIjEtM1wiLCBcIjQtNlwiXTsgLy8gRsO2cmVrb21tZXIgaSDDpG1uZXQgXCJIZW0tIG9jaCBrb25zdW1lbnRrdW5za2FwXCJcclxuICAgIGNhc2UgJzQtOSc6IHJldHVybiBbXCI0LTZcIiwgXCI3LTlcIl07IC8vIEbDtnJla29tbWVyIGkgw6RtbmV0IFwiTW9kZXJuYSBzcHLDpWtcIlxyXG4gICAgZGVmYXVsdDoge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgeWVhciBpbiBTa29sdmVya2V0IFhNTDogJHtpblllYXJ9LiBFeHBlY3RpbmcgMyw2LDkgb3IgMS0zLCA0LTYsIDctOWApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTdWJqZWN0LCBDb3Vyc2UsIEtub3dsZWRnZVJlcXVpcmVtZW50LCBBYmlsaXR5LCBDZW50cmFsQ29udGVudCwgVGFzayB9IGZyb20gXCJrZWRiYWNrZW5kL21vZGVsc1wiO1xyXG5pbXBvcnQgeyBTdWJqZWN0VG9JbXBvcnQsIENvdXJzZVRvSW1wb3J0IH0gZnJvbSBcIi4uL3N1YmplY3QtdG8taW1wb3J0XCI7XHJcbmltcG9ydCB7IENoYW5nZSB9IGZyb20gXCIuL2NoYW5nZVwiO1xyXG5pbXBvcnQgeyBDb3Vyc2VTZXQgfSBmcm9tICcuL2NvdXJzZS1zZXQnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlELCBCYXRjaFJ1bm5lciwgTXV0YXRpb25SZXF1ZXN0LCBMaXN0T3B0aW9ucyB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgQXV0b1ZhbHVlTWFwIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvYXV0by12YWx1ZS1tYXAnO1xyXG5pbXBvcnQgeyBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcblxyXG50eXBlIElEID0gc3RyaW5nO1xyXG5cclxuZnVuY3Rpb24gZGlmZlN1YmplY3RHbG9iYWxUZXh0cyhkYlRleHRNYXA6IE1hcDxzdHJpbmcsIElEPiwgeG1sVGV4dHM6IHN0cmluZ1tdKSB7XHJcbiAgY29uc3QgcmVtb3ZlZElkcyA9IG5ldyBTZXQ8SUQ+KCk7XHJcbiAgY29uc3QgbmV3VGV4dHMgPSBuZXcgTWFwPHN0cmluZywgSUQ+KCk7XHJcbiAgY29uc3QgaWRzVG9BZGQgPSBuZXcgU2V0PElEPigpO1xyXG5cclxuICB4bWxUZXh0cy5mb3JFYWNoKG5ld1RleHQgPT4ge1xyXG4gICAgbmV3VGV4dCA9IG5ld1RleHQudHJpbSgpO1xyXG4gICAgaWYgKCFkYlRleHRNYXAuaGFzKG5ld1RleHQpKSB7XHJcbiAgICAgIGNvbnN0IGlkID0gY3JlYXRlVVVJRCgpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgTmV3IGlkOiAke2lkfS4gVGV4dDogJHtuZXdUZXh0fWApO1xyXG4gICAgICBuZXdUZXh0cy5zZXQobmV3VGV4dCwgaWQpO1xyXG4gICAgICBpZHNUb0FkZC5hZGQoaWQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbmV3VGV4dHMuc2V0KG5ld1RleHQsIGRiVGV4dE1hcC5nZXQobmV3VGV4dCkpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBmb3IgKGNvbnN0IFtvbGRUZXh0LCBvbGRJZF0gb2YgZGJUZXh0TWFwLmVudHJpZXMoKSkge1xyXG4gICAgaWYgKHhtbFRleHRzLmluZGV4T2Yob2xkVGV4dCkgPT09IC0xKSB7XHJcbiAgICAgIHJlbW92ZWRJZHMuYWRkKG9sZElkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICByZW1vdmVkSWRzLFxyXG4gICAgbmV3VGV4dHMsXHJcbiAgICBpZHNUb0FkZFxyXG4gIH1cclxufVxyXG5cclxubGV0IF9maWN0aXZlT2xkSWQgPSAxO1xyXG5mdW5jdGlvbiBmaWN0aXZlT2xkSWQoKSB7XHJcbiAgcmV0dXJuIFwiZmljdGl2ZU9sZElkXCIgKyAoKytfZmljdGl2ZU9sZElkKTtcclxufVxyXG5cclxuY29uc3Qgc3RvcFdvcmRzID0gbmV3IFNldChcclxuICAvLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWhhaVZhbGVudGluL2x1bnItbGFuZ3VhZ2VzL2Jsb2IvbWFzdGVyL2x1bnIuc3YuanMjTDI1MlxyXG4gICgnYWxsYSBhbGx0IGF0dCBhdiBibGV2IGJsaSBibGlyIGJsaXZpdCBkZSBkZW0gZGVuIGRlbm5hIGRlcmFzIGRlc3MgZGVzc2EgZGV0IGRldHRhIGRpZyBkaW4gZGluYSBkaXR0IGR1IGTDpHIgZMOlIGVmdGVyIGVqIGVsbGVyIGVuIGVyIGVyYSBlcnQgZXR0IGZyw6VuIGbDtnIgaGEgaGFkZSBoYW4gaGFucyBoYXIgaGVubmUgaGVubmVzIGhvbiBob25vbSBodXIgaMOkciBpIGlja2UgaW5nZW4gaW5vbSBpbnRlIGphZyBqdSBrYW4ga3VuZGUgbWFuIG1lZCBtZWxsYW4gbWVuIG1pZyBtaW4gbWluYSBtaXR0IG1vdCBteWNrZXQgbmkgbnUgbsOkciBuw6Vnb24gbsOlZ290IG7DpWdyYSBvY2ggb20gb3NzIHDDpSBzYW1tYSBzZWRhbiBzaWcgc2luIHNpbmEgc2l0dGEgc2rDpGx2IHNrdWxsZSBzb20gc8OlIHPDpWRhbiBzw6VkYW5hIHPDpWRhbnQgdGlsbCB1bmRlciB1cHAgdXQgdXRhbiB2YWQgdmFyIHZhcmEgdmFyZsO2ciB2YXJpdCB2YXJqZSB2YXJzIHZhcnQgdmVtIHZpIHZpZCB2aWxrYSB2aWxrYXMgdmlsa2VuIHZpbGtldCB2w6VyIHbDpXJhIHbDpXJ0IMOkbiDDpHIgw6V0IMO2dmVyJyArXHJcbiAgJyBrcmluZycpIC8vIFRoaXMgbGluZSBjb250YWlucyBhZGRpdGlvbmFsIHN0b3Atd29yZHMgbWlzc2luZyBpbiBsdW5yLnN2LlxyXG4gIC5zcGxpdCgnICcpKTtcclxuXHJcbmZ1bmN0aW9uIGdldExleGVtZXMoaHRtbDogc3RyaW5nKTogU2V0PHN0cmluZz4ge1xyXG4gIHJldHVybiBuZXcgU2V0KHJlbW92ZVRhZ3MoaHRtbCkucmVwbGFjZSgvW15cXHdcXHPDpcOkw7ZdL2dpLCAnJykudG9Mb3dlckNhc2UoKS5zcGxpdCgvXFxzLylcclxuICAgIC5tYXAobGV4ZW1lID0+IGxleGVtZS50cmltKCkpXHJcbiAgICAuZmlsdGVyKGxleGVtZSA9PiAhIWxleGVtZSlcclxuICAgIC5maWx0ZXIobGV4ZW1lID0+ICFzdG9wV29yZHMuaGFzKGxleGVtZSkpXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlVGFncyhodG1sOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIGRpdi5pbm5lckhUTUwgPSBodG1sO1xyXG4gIHJldHVybiAnJytkaXYuaW5uZXJUZXh0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRJZHNUb01pZ3JhdGUoXHJcbiAgZGJUZXh0czoge2lkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZ3JhZGVTdGVwPzogc3RyaW5nfVtdLFxyXG4gIHhtbFRleHRzOiB7aHRtbDogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9W10sXHJcbiAgbmV3VGV4dHM6IE1hcDxzdHJpbmcsIElEPixcclxuICB0ZXh0VHlwZTogc3RyaW5nLFxyXG4gIGNvdXJzZT86IHN0cmluZykgOiBNYXA8SUQsIHtcclxuICAgIG5ld1RleHQ/OiBzdHJpbmcsXHJcbiAgICBuZXdJZD86IElELFxyXG4gICAgb2xkVGV4dD86IHN0cmluZyxcclxuICAgIGdyYWRlU3RlcD86IHN0cmluZyxcclxuICAgIGlzVHlwb0ZpeD86IGJvb2xlYW5cclxuICB9PlxyXG57XHJcbiAgY29uc3QgaWRzVG9NaWdyYXRlID0gbmV3IE1hcDxJRCwge1xyXG4gICAgbmV3VGV4dD86IHN0cmluZyxcclxuICAgIG5ld0lkPzogSUQsXHJcbiAgICBvbGRUZXh0Pzogc3RyaW5nLFxyXG4gICAgZ3JhZGVTdGVwPzogc3RyaW5nLFxyXG4gICAgaXNUeXBvRml4PzogYm9vbGVhbixcclxuICAgIG1hdGNoTGV2ZWw6IG51bWJlcixcclxuICAgIGxleGVtZXM6IFNldDxzdHJpbmc+XHJcbiAgfT4oKTtcclxuICBkYlRleHRzID0gZGJUZXh0cy5tYXAoZW50aXR5ID0+ICh7Li4uZW50aXR5LCBuYW1lOiBlbnRpdHkubmFtZS50cmltKCl9KSkuZmlsdGVyKCh7bmFtZX0pID0+ICEhbmFtZSk7XHJcbiAgY29uc3QgeG1sU2V0ID0gbmV3IE1hcDxzdHJpbmcsIHtodG1sOiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZ30+KCk7XHJcbiAgeG1sVGV4dHMuZm9yRWFjaChpdGVtID0+IHhtbFNldC5zZXQoaXRlbS5odG1sLCBpdGVtKSk7XHJcbiAgY29uc3QgZGJTZXQgPSBuZXcgTWFwPHN0cmluZywge2lkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgZ3JhZGVTdGVwPzogc3RyaW5nfT4oKTtcclxuICBkYlRleHRzLmZvckVhY2goZW50aXR5ID0+IGRiU2V0LnNldChlbnRpdHkubmFtZSwgZW50aXR5KSk7XHJcbiAgLy8gUmVtb3ZlIHRob3NlIHdobyBhbHJlYWR5IGV4aXN0cyBpZGVudGljYWxseVxyXG4gIGRiVGV4dHMgPSBkYlRleHRzLmZpbHRlcihlbnRpdHkgPT4gIXhtbFNldC5oYXMoZW50aXR5Lm5hbWUpKTtcclxuICB4bWxUZXh0cyA9IHhtbFRleHRzLmZpbHRlcihpdGVtID0+ICFkYlNldC5oYXMoaXRlbS5odG1sKSk7XHJcblxyXG4gIC8vIE5vdywgZm9yIHRoZSByZW1haW5kZXIsIHRyeSB0aGUgYmVzdCB0byBtYXAgb2xkIHRleHRzIHRvIG5ldyB0ZXh0cywgYW5kIHdoZW4gZG9uZSwgY2hlY2sgaWYgdGhlcmUgYXJlIG5ldyB0ZXh0cyB0aGF0IG5ldmVyIGdvdCBtYXBwZWQuXHJcblxyXG4gIC8vIFN0YXJ0IGJ5IHB1dHRpbmcgYWxsIGRiVGV4dCBpbnRvIHRoZSByZXN1bHQsIHdpdGhvdXQgYSBwYWlyZWQgeG1sIHRleHQgeWV0OlxyXG4gIGRiVGV4dHMuZm9yRWFjaChkYlRleHQgPT4gaWRzVG9NaWdyYXRlLnNldChkYlRleHQuaWQsIHtcclxuICAgIGdyYWRlU3RlcDogZGJUZXh0LmdyYWRlU3RlcCxcclxuICAgIG9sZFRleHQ6IGRiVGV4dC5uYW1lLFxyXG4gICAgbGV4ZW1lczogZ2V0TGV4ZW1lcyhkYlRleHQubmFtZSksXHJcbiAgICBtYXRjaExldmVsOiAwXHJcbiAgfSkpO1xyXG4gIC8vIFRoZW4gdHJ5IHRvIHBhaXIgZWFjaCB4bWxUZXh0IHRvIGFuIGl0ZW0gaW4gaWRzVG9NaWdyYXRlXHJcbiAgY29uc3QgeG1sU3BpbnN0ZXJzOiB7aHRtbDogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9W10gPSBbXTtcclxuICB3aGlsZSAoeG1sVGV4dHMubGVuZ3RoID4gMCkge1xyXG4gICAgY29uc3QgeG1sVGV4dCA9IHhtbFRleHRzWzBdO1xyXG4gICAgY29uc3QgYmVzdE1hdGNoID0gZmluZEJlc3RNYXRjaCh4bWxUZXh0KTtcclxuICAgIGlmICghYmVzdE1hdGNoKSB7XHJcbiAgICAgIHhtbFNwaW5zdGVycy5wdXNoKHhtbFRleHQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGJlc3RNYXRjaC5uZXdUZXh0KSB7XHJcbiAgICAgICAgLy8gVGhyb3cgb3V0IGV4aXN0aW5nIG1hdGNoXHJcbiAgICAgICAgeG1sVGV4dHMucHVzaCh7aHRtbDogYmVzdE1hdGNoLm5ld1RleHQsIGdyYWRlU3RlcDogYmVzdE1hdGNoLmdyYWRlU3RlcH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHBhaXIgPSBpZHNUb01pZ3JhdGUuZ2V0KGJlc3RNYXRjaC5pZCk7XHJcbiAgICAgIC8vIFBhaXIgbXlzZWxmIHdpdGggdGhpcyBtYXRjaDpcclxuICAgICAgcGFpci5uZXdUZXh0ID0geG1sVGV4dC5odG1sO1xyXG4gICAgICBwYWlyLm1hdGNoTGV2ZWwgPSBiZXN0TWF0Y2gubXlNYXRjaExldmVsO1xyXG4gICAgICBwYWlyLm5ld0lkID0gbmV3VGV4dHMuZ2V0KHhtbFRleHQuaHRtbCk7XHJcbiAgICB9XHJcbiAgICB4bWxUZXh0cy5zaGlmdCgpO1xyXG4gIH1cclxuICAvLyBGb3IgZWFjaCBzcGluc3RlciAobmV3IHRleHRzIHRoYXQgY291bGRuJ3QgZmluZCBhbnkgbWF0Y2ggaW4gb2xkIHRleHRzKSxcclxuICAvLyBBZGQgdGhlbSB3aXRoIGFuIGZpY3RpdmUgb2xkIElEIGJ1dCBvbWl0IG9sZFRleHQgdG8gbWFyayBpdCBhcyBhIG5ld2NvbWVyXHJcbiAgeG1sU3BpbnN0ZXJzLmZvckVhY2goc3BpbnN0ZXIgPT4ge1xyXG4gICAgaWRzVG9NaWdyYXRlLnNldChmaWN0aXZlT2xkSWQoKSwge1xyXG4gICAgICBuZXdJZDogbmV3VGV4dHMuZ2V0KHNwaW5zdGVyLmh0bWwpLFxyXG4gICAgICBuZXdUZXh0OiBzcGluc3Rlci5odG1sLFxyXG4gICAgICBncmFkZVN0ZXA6IHNwaW5zdGVyLmdyYWRlU3RlcCxcclxuICAgICAgbWF0Y2hMZXZlbDogMCxcclxuICAgICAgbGV4ZW1lczogbmV3IFNldDxzdHJpbmc+KCl9KVxyXG4gIH0pO1xyXG5cclxuICAvLyBNYXJrIHR5cG8tZml4ZXNcclxuICBpZHNUb01pZ3JhdGUuZm9yRWFjaChtYXRjaCA9PiB7XHJcbiAgICBjb25zdCB7b2xkVGV4dCwgbmV3VGV4dH0gPSBtYXRjaDtcclxuICAgIGlmIChvbGRUZXh0ICYmIG5ld1RleHQpIHtcclxuICAgICAgaWYgKFsuLi5nZXRMZXhlbWVzKG9sZFRleHQpXS5qb2luKCcgJykgPT09IFsuLi5nZXRMZXhlbWVzKG5ld1RleHQpXS5qb2luKCcgJykpIHtcclxuICAgICAgICBtYXRjaC5pc1R5cG9GaXggPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGNvbnNvbGUubG9nKFwiSWRzVG9NaWdyYXRlXCIsIFsuLi5pZHNUb01pZ3JhdGUudmFsdWVzKCldLm1hcCgoe29sZFRleHQsIGxleGVtZXN9KSA9PiBgJHtbLi4ubGV4ZW1lc10uam9pbignICcpfTogJHtvbGRUZXh0fWApKTtcclxuXHJcbiAgcmV0dXJuIGlkc1RvTWlncmF0ZTtcclxuXHJcbiAgZnVuY3Rpb24gZmluZEJlc3RNYXRjaCh4bWxUZXh0OiB7aHRtbDogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9KSB7XHJcbiAgICBjb25zdCB4bWxMZXhlbWVzID0gZ2V0TGV4ZW1lcyh4bWxUZXh0Lmh0bWwpO1xyXG4gICAgY29uc3QgcG9zc2libGVQYXJ0bmVycyA9IFsuLi5pZHNUb01pZ3JhdGUuZW50cmllcygpXVxyXG4gICAgICAuZmlsdGVyKChbaWQsIHhdKSA9PiB4LmdyYWRlU3RlcCA9PT0geG1sVGV4dC5ncmFkZVN0ZXApXHJcbiAgICAgIC5tYXAoKFtpZCwge2dyYWRlU3RlcCwgbWF0Y2hMZXZlbCwgbmV3VGV4dCwgbGV4ZW1lc31dKSA9PiAoe1xyXG4gICAgICAgIGlkLFxyXG4gICAgICAgIGdyYWRlU3RlcCxcclxuICAgICAgICBtYXRjaExldmVsLFxyXG4gICAgICAgIG5ld1RleHQsXHJcbiAgICAgICAgbXlNYXRjaExldmVsOiBnZXRNYXRjaExldmVsKHhtbExleGVtZXMsIGxleGVtZXMpXHJcbiAgICAgIH0pKS5maWx0ZXIocHAgPT4gcHAubXlNYXRjaExldmVsID49IDUwICYmICghcHAubWF0Y2hMZXZlbCB8fCBwcC5tYXRjaExldmVsIDwgcHAubXlNYXRjaExldmVsKSk7XHJcbiAgICByZXR1cm4gcG9zc2libGVQYXJ0bmVycy5zb3J0KChhLCBiKSA9PiBiLm15TWF0Y2hMZXZlbCAtIGEubXlNYXRjaExldmVsKVswXTsgLy8gaGlnaGVzdCBmaXJzdC5cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGdldE1hdGNoTGV2ZWwobGV4ZW1lczE6IFNldDxzdHJpbmc+LCBsZXhlbWVzMjogU2V0PHN0cmluZz4pIHtcclxuICAgIGlmIChsZXhlbWVzMS5zaXplID09PSAwIHx8IGxleGVtZXMyLnNpemUgPT09IDApIHJldHVybiAwO1xyXG4gICAgbGV0IHBvaW50czEgPSAwO1xyXG4gICAgbGV0IHBvaW50czIgPSAwO1xyXG4gICAgbGV4ZW1lczEuZm9yRWFjaCh3b3JkID0+IHtcclxuICAgICAgaWYgKGxleGVtZXMyLmhhcyh3b3JkKSkgKytwb2ludHMxO1xyXG4gICAgfSk7XHJcbiAgICBsZXhlbWVzMi5mb3JFYWNoKHdvcmQgPT4ge1xyXG4gICAgICBpZiAobGV4ZW1lczEuaGFzKHdvcmQpKSArK3BvaW50czI7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBNYXRoLnJvdW5kKDEwMCAqIE1hdGgubWF4KHBvaW50czEgLyBsZXhlbWVzMS5zaXplLCBwb2ludHMyIC8gbGV4ZW1lczIuc2l6ZSkpO1xyXG4gIH1cclxuXHJcbiAgLyppZiAoZGJUZXh0cy5sZW5ndGggIT09IHhtbFRleHRzLmxlbmd0aCkge1xyXG4gICAgLy8gV2UgY2FuIG5vIGxvbmdlciBhc3N1bWUgdGhhdCB0aGUgY2hhbmdlZCB0ZXh0cyByZWZlciB0byBkaWZmZXJlbnQgZm9ybXVsYXRpb25zIG9mIHRoZSBzYW1lIG1lYW5pbmcuXHJcbiAgICAvLyBXZSBub3QgbWFwIG9sZCBmb3JtdWxhdGlvbnMgdG8gbmV3IG9uZXMuXHJcbiAgICAvLyBJbiBmdXR1cmUsIHdlIGNvdWxkIGhhbmRsZSB0aGlzIGNhc2UgYnkgYXNzdW1pbmcgYWxsIG9sZCB0ZXh0cyBub3Qgb2NjdXJyaW5nIGluIG5ldyBkYXRhLCBoYXZlIGJlZW4gcmVtb3ZlZCBhbmQgYWxsIG5ldyBoYXZlIGJlZW4gYWRkZWQuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOdW1iZXIgb2YgXCIgKyB0ZXh0VHlwZSArIChjb3Vyc2UgPyBgIG9uIGNvdXJzZSAke2NvdXJzZX1gIDogXCJcIikgKyBcIiBkaWZmZXJzLiBDYW5ub3QgbWlncmF0ZS5cIik7XHJcbiAgfVxyXG4gIGRiVGV4dHMuZm9yRWFjaCgoe25hbWU6IG9sZFRleHQsIGlkOiBvbGRJZCwgZ3JhZGVTdGVwfSwgaSkgPT4ge1xyXG4gICAgY29uc3QgeG1sVGV4dCA9IHhtbFRleHRzW2ldLnRyaW0oKTtcclxuICAgIGlmIChvbGRUZXh0LnRyaW0oKSAhPT0geG1sVGV4dCkge1xyXG4gICAgICBpZHNUb01pZ3JhdGUuc2V0KG9sZElkLCB7bmV3VGV4dDogeG1sVGV4dCwgbmV3SWQ6IG5ld1RleHRzLmdldCh4bWxUZXh0KSwgb2xkVGV4dCwgZ3JhZGVTdGVwfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgcmV0dXJuIGlkc1RvTWlncmF0ZTsqL1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWlncmF0ZVN1YmplY3QoZXhpc3RpbmdTdWJqZWN0OiBTdWJqZWN0LCBjb3Vyc2VTZXRzOiBDb3Vyc2VTZXRbXSwgc3ViamVjdFRvSW1wb3J0OiBTdWJqZWN0VG9JbXBvcnQsIGNoYW5nZXM6IENoYW5nZVtdKSB7XHJcbiAgLy8gR2VuZXJhdGUgZGJUZXh0TWFwOlxyXG4gIC8vIGRiVGV4dE1hcCBjb250YWlucyBhIG1hcCBmcm9tIG9sZCB0ZXh0cyAoQWJpbGl0aWVzLCBDZW50cmFsIENvbnRlbnQgb3IgS25vd2xlZGdlIFJlcXVpcmVtZW50cykgdG8gaXRzIElEIGluIHRoZSBkYXRhYmFzZS5cclxuICAvLyBUaGUgbWFwIHNob3VsZCBiZSB1c2VkIHRvIGxvb2t1cCBJRHMsIGdpdmVuIHRoZWlyIHRyaW1tZWQgdGV4dC5cclxuICBjb25zdCBkYlRleHRNYXAgPSBuZXcgTWFwPHN0cmluZywgSUQ+KCk7XHJcbiAgY29uc3Qgb3JkZXJlZEFiaWxpdGllcyA9IGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXNPcmRlciA/XHJcbiAgICBleGlzdGluZ1N1YmplY3QuYWJpbGl0aWVzT3JkZXIubWFwKGlkID0+IGV4aXN0aW5nU3ViamVjdC5hYmlsaXRpZXMuZmluZChhID0+IGEuaWQgPT09IGlkKSkgOlxyXG4gICAgZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllcztcclxuICBmb3IgKGNvbnN0IGEgb2Ygb3JkZXJlZEFiaWxpdGllcykge1xyXG4gICAgZGJUZXh0TWFwLnNldChhLm5hbWUudHJpbSgpLCBhLmlkKTtcclxuICB9XHJcbiAgZm9yIChjb25zdCB7dGVtcGxhdGV9IG9mIGNvdXJzZVNldHMpIHtcclxuICAgIGZvciAoY29uc3QgY2Mgb2YgdGVtcGxhdGUuY2VudHJhbENvbnRlbnQpIHtcclxuICAgICAgZGJUZXh0TWFwLnNldChjYy5uYW1lLnRyaW0oKSwgY2MuaWQpO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrciBvZiB0ZW1wbGF0ZS5rbm93bGVkZ2VSZXF1aXJlbWVudHMpIHtcclxuICAgICAgZGJUZXh0TWFwLnNldChrci5uYW1lLnRyaW0oKSwga3IuaWQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gRmluZCBvdXQgd2hpY2ggbmV3IHRleHRzIChpbiB0b3RhbCkgdGhhdCBzaG91bGQgYmUgY3JlYXRlZCBpbiB0aGUgREIgb24gbWlncmF0aW5nLlxyXG4gIC8vIE1heWJlIGFsc28gZmluZCBvdXQgaWYgdGhlcmUgYXJlIGFueSBvbGQgdGV4dHMgd2hvJ3Mgb2JqZWN0cyBhcmUgbm8gbW9yZSB1c2VkIGFuZCBjb3VsZCBiZSByZW1vdmVkIGZyb20gdGhlIERCXHJcbiAgLy8gbmV3VGV4dHM6IEEgbWFwIGJldHdlZW4gYSBuZXcgdGV4dCBhbmQgaXRzIG5ldyBJRCBpbiB0aGUgZGF0YWJhc2UgYWZ0ZXIgY3JlYXRpbmcgaXQuXHJcbiAgLy8gcmVtb3ZlZElkczogQSBzZXQgb2YgZXhpc3RpbmcgaWRzIHRoYXQgd291bGQgYmUgc2FmZSB0byByZW1vdmUgb24gbWlncmF0aW5nICh3aWxsIGlnbm9yZSB0aG9zZSBmb3Igbm93KVxyXG4gIGNvbnN0IHtuZXdUZXh0czogbmV3QWJpbGl0eVRleHRzLCBpZHNUb0FkZDogYWJpbGl0aWVzVG9BZGR9ID1cclxuICAgIGRpZmZTdWJqZWN0R2xvYmFsVGV4dHMoZGJUZXh0TWFwLCBzdWJqZWN0VG9JbXBvcnQuYWJpbGl0aWVzKTtcclxuICBjb25zdCB7bmV3VGV4dHM6IG5ld0NDVGV4dHMsIGlkc1RvQWRkOiBjY3NUb0FkZH0gPVxyXG4gICAgZGlmZlN1YmplY3RHbG9iYWxUZXh0cyhkYlRleHRNYXAsIGZsYXR0ZW4oc3ViamVjdFRvSW1wb3J0LmNvdXJzZXMubWFwKGMgPT4gYy5jZW50cmFsQ29udGVudC5tYXAoY2MgPT4gY2MuaHRtbCkpKSk7XHJcbiAgY29uc3Qge25ld1RleHRzOiBuZXdLUlRleHRzLCBpZHNUb0FkZDoga3JzVG9BZGR9ID1cclxuICAgIGRpZmZTdWJqZWN0R2xvYmFsVGV4dHMoZGJUZXh0TWFwLCBmbGF0dGVuKHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzLm1hcChjID0+IGMua25vd2xlZGdlUmVxdWlyZW1lbnRzLm1hcChrciA9PiBrci5odG1sKSkpKTtcclxuICBcclxuICBjb25zb2xlLmxvZyhgQWJpbGl0aWVzIHRvIGFkZDogJHthYmlsaXRpZXNUb0FkZC5zaXplfWApO1xyXG4gIGNvbnNvbGUubG9nKGBDQ3MgdG8gYWRkOiAke2Njc1RvQWRkLnNpemV9YCk7XHJcbiAgY29uc29sZS5sb2coYEtScyB0byBhZGQ6ICR7a3JzVG9BZGQuc2l6ZX1gKTtcclxuXHJcbiAgLy8gRmluZCBvdXQgYWxsIGV4aXN0aW5nIEFiaWxpdHkgaWRzIHRoYXQgd2lsbCBiZSBtaWdyYXRlZCB0byBuZXcgb25lc1xyXG4gIGNvbnN0IGFiaWxpdHlJZHNUb01pZ3JhdGUgPSBnZXRJZHNUb01pZ3JhdGUoXHJcbiAgICBvcmRlcmVkQWJpbGl0aWVzLFxyXG4gICAgc3ViamVjdFRvSW1wb3J0LmFiaWxpdGllcy5tYXAoaHRtbCA9PiAoe2h0bWx9KSksXHJcbiAgICBuZXdBYmlsaXR5VGV4dHMsXHJcbiAgICBcImFiaWxpdGllc1wiKTtcclxuXHJcbiAgLy8gRG8gdGhlIHNhbWUgZm9yIGVhY2ggQ2VudHJhbCBDb250ZW50IGFuZCBLbm93bGVkZ2UgUmVxdWlyZW1lbnRzIG9uIGVhY2ggY291cnNlOlxyXG4gIGNvbnN0IGlkc1RvTWlncmF0ZVBlckNvdXJzZSA9IGNvdXJzZVNldHMubWFwKCh7dGVtcGxhdGV9LCBpKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgQ291cnNlOiAke3RlbXBsYXRlLm5hbWV9YCk7XHJcbiAgICBjb25zdCB4bWxDb3Vyc2UgPSBzdWJqZWN0VG9JbXBvcnQuY291cnNlcy5maW5kKGMgPT4gYy5uYW1lID09PSB0ZW1wbGF0ZS5uYW1lKSB8fFxyXG4gICAgICBzdWJqZWN0VG9JbXBvcnQuY291cnNlcy5maW5kKGMgPT4gYy5jb2RlID09PSB0ZW1wbGF0ZS5jb2RlKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNvdXJzZUNvZGU6IHRlbXBsYXRlLmNvZGUsXHJcbiAgICAgIGNjc1RvTWlncmF0ZTogeG1sQ291cnNlID9cclxuICAgICAgICBnZXRJZHNUb01pZ3JhdGUoXHJcbiAgICAgICAgICB0ZW1wbGF0ZS5jZW50cmFsQ29udGVudCwgLy8gSGFzIGFscmVhZHkgYmVlbiBzb3J0ZWQgd2hlbiByZXRyaWV2ZWQgdmlhIGxvYWRDb3Vyc2UoKVxyXG4gICAgICAgICAgeG1sQ291cnNlLmNlbnRyYWxDb250ZW50Lm1hcCgoe2h0bWx9KSA9PiAoe2h0bWx9KSksXHJcbiAgICAgICAgICBuZXdDQ1RleHRzLFxyXG4gICAgICAgICAgXCJjZW50cmFsIGNvbnRlbnRcIixcclxuICAgICAgICAgIHRlbXBsYXRlLm5hbWUpIDpcclxuICAgICAgICBuZXcgTWFwPElELCB7bmV3VGV4dDogc3RyaW5nLCBuZXdJZDogSUQsIG9sZFRleHQ6IHN0cmluZywgaXNUeXBvRml4OiBib29sZWFufT4oKSxcclxuICAgICAga3JzVG9NaWdyYXRlOiB4bWxDb3Vyc2UgP1xyXG4gICAgICAgIGdldElkc1RvTWlncmF0ZShcclxuICAgICAgICAgIHRlbXBsYXRlLmtub3dsZWRnZVJlcXVpcmVtZW50cywgLy8gSGFzIGFscmVhZHkgYmVlbiBzb3J0ZWQgd2hlbiByZXRyaWV2ZWQgdmlhIGxvYWRDb3Vyc2UoKVxyXG4gICAgICAgICAgeG1sQ291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50cyxcclxuICAgICAgICAgIG5ld0tSVGV4dHMsXHJcbiAgICAgICAgICBcImtub3dsZWRnZSByZXF1aXJlbWVudHNcIixcclxuICAgICAgICAgIHRlbXBsYXRlLm5hbWVcclxuICAgICAgICApIDpcclxuICAgICAgICBuZXcgTWFwPElELCB7bmV3VGV4dDogc3RyaW5nLCBuZXdJZDogSUQsIG9sZFRleHQ6IHN0cmluZywgZ3JhZGVTdGVwOiBzdHJpbmcsIGlzVHlwb0ZpeDogYm9vbGVhbn0+KClcclxuICAgIH07XHJcbiAgfSk7XHJcblxyXG4gIC8vIE9LIHNvIG5vdyB3ZSBoYXZlIGFsbCBpbmZvLlxyXG4gIC8vIE5vdywgd2UgbmVlZCB0bzpcclxuICAvLyBTdWJqZWN0OlxyXG4gIC8vIDEuIFJlbW92ZSBsaW5rcyBmcm9tIHN1YmplY3RzIHRvIGFiaWxpdGllc1xyXG4gIC8vIDIuIEFkZCBsaW5rcyBmcm9tIHN1YmplY3RzIHRvIGFiaWxpdGllc1xyXG4gIGFiaWxpdHlJZHNUb01pZ3JhdGUuZm9yRWFjaCgoe25ld1RleHQsIG5ld0lkLCBvbGRUZXh0LCBpc1R5cG9GaXh9LCBvbGRJZCkgPT4ge1xyXG4gICAgLy9jb25zdCBvbGRUZXh0ID0gZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllcy5maW5kKGEgPT4gYS5pZCA9PT0gb2xkSWQpLm5hbWU7XHJcbiAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICBjaGFuZ2U6IChcclxuICAgICAgICBvbGRUZXh0ID9cclxuICAgICAgICAgIG5ld1RleHQgP1xyXG4gICAgICAgICAgICBpc1R5cG9GaXggP1xyXG4gICAgICAgICAgICAgIGBUcnlja2ZlbHNyw6R0dG5pbmcgRsO2cm3DpWdhYCA6XHJcbiAgICAgICAgICAgICAgYFVwcGRhdGVyYWQgRsO2cm3DpWdhYCA6XHJcbiAgICAgICAgICAgIGBCb3J0dGFnZW4gRsO2cm3DpWdhYCA6XHJcbiAgICAgICAgICBgTnkgRsO2cm3DpWdhYFxyXG4gICAgICApLFxyXG4gICAgICBjb250ZW50OiBgPHN0cmlrZT4ke29sZFRleHQgfHwgJyd9PC9zdHJpa2U+PGJyLz4ke25ld1RleHQgfHwgJyd9YCxcclxuICAgICAgbXV0YXRpb25zOiBiciA9PiB7XHJcbiAgICAgICAgaWYgKG5ld0lkICYmIGFiaWxpdGllc1RvQWRkLmhhcyhuZXdJZCkpIHtcclxuICAgICAgICAgIGNvbnN0IGE6IEFiaWxpdHkgPSB7XHJcbiAgICAgICAgICAgIGlkOiBuZXdJZCxcclxuICAgICAgICAgICAgbmFtZTogbmV3VGV4dCxcclxuICAgICAgICAgICAgYWNsOiBbXCJyb2xlOlVTRVI6UlwiXSxcclxuICAgICAgICAgICAgZGF0ZVRpbWU6IERhdGUubm93KClcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBici5hZGQoXCJhYmlsaXRpZXNcIiwgYSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvbGRUZXh0KSBici51bmxpbmsyKFwic3ViamVjdHNcIiwgZXhpc3RpbmdTdWJqZWN0LmlkLCBcImFiaWxpdGllc1wiLCBvbGRJZCk7XHJcbiAgICAgICAgaWYgKG5ld0lkKSBici5saW5rMihcInN1YmplY3RzXCIsIGV4aXN0aW5nU3ViamVjdC5pZCwgXCJhYmlsaXRpZXNcIiwgbmV3SWQpO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0pO1xyXG4gIC8vIDMuIFVwZGF0ZSBhYmlsaXRpZXNPcmRlciBvbiBTdWJqZWN0IGJhc2VkIG9uIHN1YmplY3RUb0ltcG9ydC5hYmlsaXRpZXMgKG1hcHBlZCB0byBpZHMgaW4gbmV3VGV4dHMpXHJcbiAgaWYgKCFleGlzdGluZ1N1YmplY3QuYWJpbGl0aWVzT3JkZXIgfHwgYWJpbGl0eUlkc1RvTWlncmF0ZS5zaXplID4gMCkge1xyXG4gICAgZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllc09yZGVyID0gc3ViamVjdFRvSW1wb3J0LmFiaWxpdGllcy5tYXAoeG1sID0+IG5ld0FiaWxpdHlUZXh0cy5nZXQoeG1sKSk7XHJcbiAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICBtdXRhdGlvbnM6IGJyID0+IGJyLnB1dChcInN1YmplY3RzXCIsIGV4aXN0aW5nU3ViamVjdCksXHJcbiAgICAgIGNoYW5nZTogZXhpc3RpbmdTdWJqZWN0LmFiaWxpdGllc09yZGVyID9cclxuICAgICAgICBudWxsIDogLy8gw4RuZHJpbmdlbiByZWRhbiB2aXN1ZWxsIHNvbSBcIlVwcGRhdGVyYWQgZsO2ciBmw7ZybcOlZ2FcIiwgZXRjLCBvdmFuXHJcbiAgICAgICAgYEluZsO2ciBlbiBvcmRuYWQgbGlzdGEgcMOlIGbDtnJtw6Vnb3IgaSBkYXRhYmFzZW5gLFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBjcmVhdGVkSWRzID0gbmV3IFNldDxJRD4oKTtcclxuICBjaGFuZ2VzLnB1c2goe211dGF0aW9uczogKCk9PmNyZWF0ZWRJZHMuY2xlYXIoKX0pOyAvLyBJbiBjYXNlIG11dGF0aW9ucyBydW4gdHdpY2UgKHdoaWNoIGl0IGRvZXNuJ3QgYXMgb2YgY3VycmVudCBpbXBsLilcclxuICBjb25zdCBzaG93bkNoYW5nZXMgPSBuZXcgU2V0PHN0cmluZz4oKTsgLy8gU2V0IG9mIGNvdXJzZU5hbWVcclxuICBjaGFuZ2VzLnB1c2goe211dGF0aW9uczogKCk9PnNob3duQ2hhbmdlcy5jbGVhcigpfSk7XHJcbiAgXHJcbiAgLy8gQ291cnNlczpcclxuICAvLyAxLiBHbyB0aHJvdWdoIGFsbCBjb3Vyc2UgaW5zdGFuY2VzIGFuZDpcclxuICAvLyAgICAgIEE6IFJlbW92ZSBsaW5rcyBmcm9tIGNvdXJzZXMgdG8gYWJpbGl0aWVzIGxpc3RlZCBpbiBhYmlsaXR5SWRzVG9NaWdyYXRlLmtleXMoKVxyXG4gIC8vICAgICAgQjogQWRkIGxpbmtzIGZyb20gY291cnNlcyB0byBhYmlsaXRpZXMgYWJpbHRpdGllc1RvTWlncmF0ZS52YWx1ZXMoKVxyXG4gIC8vICAgICAgQzogVXBkYXRlIGFiaWxpdGllc09yZGVyIG9uIGNvdXJzZSBpbnN0YW5jZXMgYmFzZWQgb24gc3ViamVjdFRvSW1wb3J0IChtYXBwZWQgdG8gaWRzIGluIG5ld1RleHRzKVxyXG4gIC8vIDIsIDM6IERvIHRoZSBzYW1lIGZvciBjZW50cmFsLWNvbnRlbnQgYW5kIGtub3dsZWRnZS1yZXF1aXJlbWVudGVzOlxyXG4gIC8vICAgIEZpbmQgY2NzIGFuZCBrcnMgdG8gbWlncmF0ZSBiYXNlZCBvbiBjb3Vyc2VJbnN0YW5jZS5jb2RlXHJcbiAgLy8gICAgRm9yIGJvdGggY2NzIGFuZCBrcnMsIGRvOlxyXG4gIC8vICAgICAgQTogVW5saW5rIGNjc1RvTWlncmF0ZS5rZXlzKClcclxuICAvLyAgICAgIEI6IExpbmsgY2NzVG9NaWdyYXRlLnZhbHVlcygpXHJcbiAgLy8gICAgICBDOiBVcGRhdGUgY2VudHJhbENvbnRlbnRPcmRlciBiYXNlZCBvbiBzdWJqZWN0VG9JbXBvcnQuY2VudHJhbENvbnRlbnQgbWFwcGVkIHRvIG5ld1RleHRzIGlkc1xyXG4gIC8vICAgICAgKHNhbWUgZm9yIGtyc1RvTWlncmF0ZSwgd2l0aCBrbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlciBpbnN0ZWFkKVxyXG4gIGZvciAoY29uc3Qge3RlbXBsYXRlLCBpbnN0YW5jZXN9IG9mIGNvdXJzZVNldHMpIHtcclxuICAgIC8vIEZpbmQgY291cnNlVG9JbXBvcnRcclxuICAgIGNvbnN0IGNvdXJzZVRvSW1wb3J0OiBDb3Vyc2VUb0ltcG9ydCA9IChcclxuICAgICAgc3ViamVjdFRvSW1wb3J0LmNvdXJzZXMuZmluZChjID0+IGMubmFtZSA9PT0gdGVtcGxhdGUubmFtZSkgfHxcclxuICAgICAgc3ViamVjdFRvSW1wb3J0LmNvdXJzZXMuZmluZChjID0+IGMuY29kZSA9PT0gdGVtcGxhdGUuY29kZSlcclxuICAgICk7XHJcblxyXG4gICAgLy8gRmluZCBDZW50cmFsIENvbnRlbnQgYW5kIEtub3dsZWRnZSBSZXF1aXJlbWVudHMgdG8gbWlncmF0ZVxyXG4gICAgY29uc3Qge2Njc1RvTWlncmF0ZSwga3JzVG9NaWdyYXRlfToge1xyXG4gICAgICBjY3NUb01pZ3JhdGU6IE1hcDxJRCwge25ld1RleHQ/OiBzdHJpbmcsIG5ld0lkPzogSUQsIG9sZFRleHQ/OiBzdHJpbmd9PixcclxuICAgICAga3JzVG9NaWdyYXRlOiBNYXA8SUQsIHtuZXdUZXh0Pzogc3RyaW5nLCBuZXdJZD86IElELCBvbGRUZXh0Pzogc3RyaW5nLCBncmFkZVN0ZXA/OiBzdHJpbmd9PlxyXG4gICAgfSA9IGlkc1RvTWlncmF0ZVBlckNvdXJzZS5maW5kKHggPT4geC5jb3Vyc2VDb2RlID09PSB0ZW1wbGF0ZS5jb2RlKTtcclxuICAgIFxyXG4gICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBjb3Vyc2UgaW5zdGFuY2VzIChpbnN0YW5jZXMgYWxzbyBjb250YWlucyB0ZW1wbGF0ZXMpXHJcbiAgICAvLyBhbmQgbWlncmF0ZSB0aGVtLiBUaGlzIHdpbGwgaW5jbHVkZSBjcmVhdGluZyBtaXNzaW5nIGVudGl0aWVzIGluIHRoZSBEQi5cclxuICAgIGZvciAoY29uc3QgY291cnNlIG9mIGluc3RhbmNlcykge1xyXG4gICAgICBtaWdyYXRlQ291cnNlSW5zdGFuY2UoY291cnNlLCBjb3Vyc2VUb0ltcG9ydCwge2Njc1RvTWlncmF0ZSwga3JzVG9NaWdyYXRlfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhd2FpdCBtaWdyYXRlVGFza3MoKTtcclxuICByZXR1cm47XHJcblxyXG4gIGZ1bmN0aW9uIG1pZ3JhdGVDb3Vyc2VJbnN0YW5jZShcclxuICAgIGNvdXJzZTogQ291cnNlLFxyXG4gICAgY291cnNlVG9JbXBvcnQ6IENvdXJzZVRvSW1wb3J0LFxyXG4gICAgaWRzVG9NaWdyYXRlOiB7XHJcbiAgICAgIGNjc1RvTWlncmF0ZTogTWFwPElELCB7bmV3VGV4dD86IHN0cmluZywgbmV3SWQ/OiBJRCwgb2xkVGV4dD86IHN0cmluZywgaXNUeXBvRml4PzogYm9vbGVhbn0+LFxyXG4gICAgICBrcnNUb01pZ3JhdGU6IE1hcDxJRCwge25ld1RleHQ/OiBzdHJpbmcsIG5ld0lkPzogSUQsIG9sZFRleHQ/OiBzdHJpbmcsIGdyYWRlU3RlcD86IHN0cmluZywgaXNUeXBvRml4PzogYm9vbGVhbn0+XHJcbiAgICB9KVxyXG4gIHtcclxuICAgIGNvbnN0IHNob3dDaGFuZ2VzID0gIXNob3duQ2hhbmdlcy5oYXMoY291cnNlLm5hbWUpO1xyXG4gICAgc2hvd25DaGFuZ2VzLmFkZChjb3Vyc2UubmFtZSk7XHJcbiAgICBhYmlsaXR5SWRzVG9NaWdyYXRlLmZvckVhY2goKHtuZXdJZCwgb2xkVGV4dH0sIG9sZElkKSA9PiB7XHJcbiAgICAgIC8vIFJlbGluayB0aGUgY291cnNlIGluc3RhbmNlIHdpdGggYWJpbGl0aWVzLiBUaGlzIGNoYW5nZSBkb2VzIG5vdCBuZWVkIHRvIGJlIHZpc2libGUgaW4gR1VJLlxyXG4gICAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICAgIG11dGF0aW9uczogYnIgPT4ge1xyXG4gICAgICAgICAgaWYgKG9sZFRleHQpIGJyLnVubGluazIoXCJjb3Vyc2VzXCIsIGNvdXJzZS5pZCwgXCJhYmlsaXRpZXNcIiwgb2xkSWQpO1xyXG4gICAgICAgICAgaWYgKG5ld0lkKSBici5saW5rMihcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImFiaWxpdGllc1wiLCBuZXdJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTsgIFxyXG4gICAgfSk7XHJcbiAgICBjb3Vyc2UuYWJpbGl0aWVzT3JkZXIgPSBzdWJqZWN0VG9JbXBvcnQuYWJpbGl0aWVzLm1hcChodG1sID0+IG5ld0FiaWxpdHlUZXh0cy5nZXQoaHRtbCkpO1xyXG5cclxuICAgIGNvbnN0IHtjY3NUb01pZ3JhdGUsIGtyc1RvTWlncmF0ZX0gPSBpZHNUb01pZ3JhdGU7XHJcblxyXG4gICAgLy8gQ2VudHJhbCBDb250ZW50XHJcbiAgICBjY3NUb01pZ3JhdGUuZm9yRWFjaCgoe25ld0lkLCBuZXdUZXh0LCBvbGRUZXh0LCBpc1R5cG9GaXh9LCBvbGRJZCkgPT4ge1xyXG4gICAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICAgIGNoYW5nZTogc2hvd0NoYW5nZXMgJiYgKFxyXG4gICAgICAgICAgb2xkVGV4dCA/XHJcbiAgICAgICAgICAgIG5ld1RleHQgP1xyXG4gICAgICAgICAgICAgIGlzVHlwb0ZpeCA/XHJcbiAgICAgICAgICAgICAgICBgVHJ5Y2tmZWxzcsOkdHRuaW5nIENlbnRyYWx0IElubmVow6VsbGAgOlxyXG4gICAgICAgICAgICAgICAgYFVwcGRhdGVyYXQgQ2VudHJhbHQgSW5uZWjDpWxsYCA6XHJcbiAgICAgICAgICAgICAgYEJvcnR0YWdldCBDZW50cmFsdCBJbm5laMOlbGxgIDpcclxuICAgICAgICAgICAgYE55dHQgQ2VudHJhbHQgSW5uZWjDpWxsYCksXHJcbiAgICAgICAgY29udGVudDogYDxoND4ke2NvdXJzZS5uYW1lfTwvaDQ+PHN0cmlrZT4ke29sZFRleHQgfHwgJyd9PC9zdHJpa2U+PGJyLz4ke25ld1RleHQgfHwgJyd9YCxcclxuICAgICAgICBtdXRhdGlvbnM6IGJyID0+IHtcclxuICAgICAgICAgIGlmIChuZXdJZCAmJiBjY3NUb0FkZC5oYXMobmV3SWQpICYmICFjcmVhdGVkSWRzLmhhcyhuZXdJZCkpIHtcclxuICAgICAgICAgICAgY29uc3QgY2M6IENlbnRyYWxDb250ZW50ID0ge1xyXG4gICAgICAgICAgICAgIGlkOiBuZXdJZCxcclxuICAgICAgICAgICAgICBuYW1lOiBuZXdUZXh0LFxyXG4gICAgICAgICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl0sXHJcbiAgICAgICAgICAgICAgZGF0ZVRpbWU6IERhdGUubm93KClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYnIuYWRkKFwiY2VudHJhbC1jb250ZW50XCIsIGNjKTtcclxuICAgICAgICAgICAgY3JlYXRlZElkcy5hZGQobmV3SWQpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKG9sZFRleHQpIGJyLnVubGluazIoXCJjb3Vyc2VzXCIsIGNvdXJzZS5pZCwgXCJjZW50cmFsQ29udGVudFwiLCBvbGRJZCk7XHJcbiAgICAgICAgICBpZiAobmV3SWQpIGJyLmxpbmsyKFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiY2VudHJhbENvbnRlbnRcIiwgbmV3SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH0pO1xyXG4gICAgY291cnNlLmNlbnRyYWxDb250ZW50T3JkZXIgPSBjb3Vyc2VUb0ltcG9ydC5jZW50cmFsQ29udGVudC5tYXAoKHtodG1sfSkgPT4gbmV3Q0NUZXh0cy5nZXQoaHRtbCkpO1xyXG5cclxuICAgIC8vIEtub3dsZWRnZSBSZXF1aXJlbWVudHNcclxuICAgIGtyc1RvTWlncmF0ZS5mb3JFYWNoKCh7bmV3SWQsIG5ld1RleHQsIGdyYWRlU3RlcCwgb2xkVGV4dCwgaXNUeXBvRml4fSwgb2xkSWQpID0+IHtcclxuICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICBjaGFuZ2U6IHNob3dDaGFuZ2VzICYmIChcclxuICAgICAgICAgIG9sZFRleHQgP1xyXG4gICAgICAgICAgICBuZXdUZXh0ID9cclxuICAgICAgICAgICAgICBpc1R5cG9GaXggP1xyXG4gICAgICAgICAgICAgICAgYFRyeWNrZmVsc3LDpHR0bmluZyBLdW5za2Fwc2tyYXZgOlxyXG4gICAgICAgICAgICAgICAgYFVwcGRhdGVyYXQgS3Vuc2thcHNrcmF2YCA6XHJcbiAgICAgICAgICAgICAgYEJvcnR0YWdldCBLdW5za2Fwc2tyYXZgIDpcclxuICAgICAgICAgICAgYE55dHQgS3Vuc2thcHNrcmF2YFxyXG4gICAgICAgICksXHJcbiAgICAgICAgY29udGVudDogYDxoND4ke2NvdXJzZS5uYW1lfTwvaDQ+PHN0cmlrZT4ke29sZFRleHQgfHwgJyd9PC9zdHJpa2U+PGJyLz4ke25ld1RleHQgfHwgJyd9YCxcclxuICAgICAgICBtdXRhdGlvbnM6IGJyID0+IHtcclxuICAgICAgICAgIGlmIChuZXdJZCAmJiBrcnNUb0FkZC5oYXMobmV3SWQpICYmICFjcmVhdGVkSWRzLmhhcyhuZXdJZCkpIHtcclxuICAgICAgICAgICAgY29uc3Qga3I6IEtub3dsZWRnZVJlcXVpcmVtZW50ID0ge1xyXG4gICAgICAgICAgICAgIGlkOiBuZXdJZCxcclxuICAgICAgICAgICAgICBuYW1lOiBuZXdUZXh0LFxyXG4gICAgICAgICAgICAgIGdyYWRlU3RlcCxcclxuICAgICAgICAgICAgICBhY2w6IFtcInJvbGU6VVNFUjpSXCJdLFxyXG4gICAgICAgICAgICAgIGRhdGVUaW1lOiBEYXRlLm5vdygpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBBZGRpbmcgS25vd2xlZGdlLVJlcXVpcmVtZW50ICR7bmV3SWR9OiAke25ld1RleHR9YCk7XHJcbiAgICAgICAgICAgIGJyLmFkZChcImtub3dsZWRnZS1yZXF1aXJlbWVudHNcIiwga3IpO1xyXG4gICAgICAgICAgICBjcmVhdGVkSWRzLmFkZChuZXdJZCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAob2xkVGV4dCkgYnIudW5saW5rMihcImNvdXJzZXNcIiwgY291cnNlLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBvbGRJZCk7XHJcbiAgICAgICAgICBpZiAobmV3SWQpIGJyLmxpbmsyKFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIG5ld0lkKTsgIFxyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIGNvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHNPcmRlciA9XHJcbiAgICAgIGNvdXJzZVRvSW1wb3J0Lmtub3dsZWRnZVJlcXVpcmVtZW50cy5tYXAoa3IgPT4gbmV3S1JUZXh0cy5nZXQoa3IuaHRtbCkpO1xyXG5cclxuICAgIC8vIFVwZGF0ZXMgdGhlIGNvdXJzZSBwcm9wZXJ0aWVzIGNlbnRyYWxDb250ZW50T3JkZXIgYW5kIGtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyXHJcbiAgICBpZiAoYWJpbGl0eUlkc1RvTWlncmF0ZS5zaXplID4gMCB8fCBjY3NUb01pZ3JhdGUuc2l6ZSA+IDAgfHwga3JzVG9NaWdyYXRlLnNpemUgPiAwKSB7XHJcbiAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgY2hhbmdlOiAhY291cnNlLmlzVGVtcGxhdGUgPyBgVXBwZGF0ZXJhZCBLdXJzaW5zdGFuc2AgOiBgVXBwZGF0ZXJhZCBLdXJzbWFsbGAsXHJcbiAgICAgICAgY29udGVudDogIWNvdXJzZS5pc1RlbXBsYXRlID9cclxuICAgICAgICAgIGAke2NvdXJzZS5uYW1lfS4gU2tvbGE6ICR7Y291cnNlLnNjaG9vbCB8fCBcImVqIGFuZ2l2ZW5cIn0uIEJlc2tyaXZuaW5nOiAke2NvdXJzZS5kZXNjcmlwdGlvbiB8fCAnJ31gIDpcclxuICAgICAgICAgIGAke2NvdXJzZS5uYW1lfWAsXHJcbiAgICAgICAgbXV0YXRpb25zOiBiciA9PiBici5wdXQoXCJjb3Vyc2VzXCIsIGNvdXJzZSlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vIFRhc2tzOlxyXG4gIC8vIDEuIEFTWU5DIE9QRVJBVElPTjogR28gdGhyb3VnaCBhbGwgdGFza3MgdGhhdCBoYXMgZWRnZXMgdG8gYW55IG9mIHRoZSBvbGQgaWRzLlxyXG4gIC8vIDIuIEZvciBlYWNoIGZvdW5kIHRhc2ssIGRvOlxyXG4gIC8vICAgIEE6IEl0ZXJhdGUgdGFncyBzdGFydGluZyB3aXRoIFwiY291cnNlOlwiLiBQaWNrIHRoZSBjb3Vyc2UgY29kZS5cclxuICAvLyAgICBCOiBQb3B1bGF0ZSB0aGUgbmV3IHByb3BlcnR5IG1pZ3JhdGlvblRhc2tzOiB7XHJcbiAgLy8gICAgICAgICBhYmlsaXRpZXM6IHtbbmV3SWQ6IHN0cmluZ106IHtvbGRUZXh0OiBzdHJpbmcsIG9sZElkOiBzdHJpbmcsIGltcG9ydERhdGU6IG51bWJlcn19LCAvLyBCZSBhYmxlIHRvIGNyZWF0ZSBhIGNoYWluIGluIHRoZSBHVUkgIVxyXG4gIC8vICAgICAgICAgY2VudHJhbENvbnRlbnQ6IHtbbmV3SWQ6IHN0cmluZ106IHtvbGRUZXh0OiBzdHJpbmcsIC4uLlwiLi4ufX0sXHJcbiAgLy8gICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6IHtbbmV3SWQ6IHN0cmluZ106IHtvbGRUZXh0OiBzdHJpbmcsIC4uLlwiLi4ufX0sXHJcbiAgLy8gICAgICAgfVxyXG4gIC8vICAgICAgIE9CUzEhIE1lcmdlYSBhYmlsaXRpZXMsIGNlbnRyYWxDb25kZW50IG9jaCBrbm93bGVkZ2VSZXF1aXJlbWVudHMgbWVkIGV2IHRpZGlnYXJlIHbDpHJkZW4gKHPDpSBtYW4ga2FuIGltcG9ydGVyYSBvbSBvY2ggb20gaWdlbiEpXHJcbiAgLy8gICAgICAgT0JTMiEgb2xkSWQga2FuIGbDtnJla29tbWEgcMOlIGZsZXJhIG5ld0lkIG9tIHRhc2sgYW52w6RuZHMgYXYgZmxlcmEga3Vyc2VyLiBcclxuICAvLyAgICBDOiBDcmVhdGUgc2V0cyBmb3IgdW5saW5rcyBhbmQgbGluayBvcGVyYXRpb25zIHBlciB0eXBlLlxyXG4gIC8vICAgIEQ6IEZvciBhbGwgY291cnNlQ29kZXMgdGhhdCB0aGUgdGFzayBpcyB0YWdnZW4gb24sXHJcbiAgLy8gICAgICAgICAqIHJlZ2lzdGVyIGNjc1RvTWlncmF0ZS5rZXlzKCkgaW4gdGhlIHVubGluayBzZXQgb2YgY2VudHJhbCBjb250ZW50c1xyXG4gIC8vICAgICAgICAgKiByZWdpc3RlciBjY3NUb01pZ3JhdGUudmFsdWVzKCkgaW4gdGhlIGxpbmsgc2V0IG9mIGNlbnRyYWwgY29udGVudHNcclxuICAvLyAgICAgICAgICogLS1cIi0tIGZvciBrbm93bGVkZ2VSZXF1aXJlbWVudHNcclxuICAvLyAgICBFOiB1bmxpbmsgYW5kIGxpbmsgd2l0aCByZWdhcmRzIHRvIGFiaWxpdHlJZHNUb01pZ3JhdGUgKGtleXMoKSBhbmQgdmFsdWVzKCkgcmVzcGVjdGl2ZWx5KS5cclxuICAvLyAgICBGOiB1bmxpbmsgYW5kIGxpbmsgYWNjb3JkaW5nIHRvIHRoZSBjcmVhdGVkIHNldHMgb2YgbGluayAvIHVubGluayBvcGVyYXRpb25zLlxyXG4gIC8vICAgIE5vdGU6IFVubGlrZSBjb3Vyc2UgaW5zdGFuY2VzLCB0aGVyZSdzIG5vIG9yZGVyIHByb3BlcnR5IHRvIHRha2UgY2FyZSBvZiBoZXJlIVxyXG4gIC8vXHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIG1pZ3JhdGVUYXNrcygpIHtcclxuICAgIGNvbnN0IG9sZElkcyA9IFtcclxuICAgICAgLi4uYWJpbGl0eUlkc1RvTWlncmF0ZS5rZXlzKCksXHJcbiAgICAgIC4uLmZsYXR0ZW4oaWRzVG9NaWdyYXRlUGVyQ291cnNlLm1hcChjID0+IFtcclxuICAgICAgICAuLi5jLmNjc1RvTWlncmF0ZS5rZXlzKCksXHJcbiAgICAgICAgLi4uYy5rcnNUb01pZ3JhdGUua2V5cygpXHJcbiAgICAgIF0pKVxyXG4gICAgXS5maWx0ZXIoaWQgPT4gIWlkLnN0YXJ0c1dpdGgoJ2ZpY3RpdmVPbGRJZCcpKTtcclxuICAgIFxyXG4gICAgY29uc3QgaW1wb3J0RGF0ZSA9IERhdGUubm93KCk7XHJcblxyXG4gICAgY29uc3QgdGFza3MgPSBhd2FpdCBmZXRjaFRhc2tzSW5DaHVua3NXaXRoRWRnZXNUbyhvbGRJZHMsIHtcclxuICAgICAgaW5jbHVkZTogW1wiYWJpbGl0aWVzXCIsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIFwiY2VudHJhbENvbnRlbnRcIl0sXHJcbiAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXVxyXG4gICAgfSk7XHJcblxyXG4gICAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hUYXNrc0luQ2h1bmtzV2l0aEVkZ2VzVG8oaWRzOiBzdHJpbmdbXSwgb3B0aW9uczogTGlzdE9wdGlvbnMpOiBQcm9taXNlPFRhc2tbXT4ge1xyXG4gICAgICAvLyBUaGlzIGZ1bmN0aW9uIHNob3VsZCBtYWtlIHdvcmsgYXJvdW5kIHRoZSBjYXNlIHdoZW4gZ2l2ZW4gXCJpZHNcIiBjb250YWlucyB0b28gbWFueSBpdGVtcywgYnlcclxuICAgICAgLy8gZGl2aWRpbmcgdGhlIHJlcXVlc3RzIGludG8gc2V2ZXJhbCBhbmQgbWVyZ2UgdGhlIHJlc3VsdCB1c2luZyBhIE1hcC5cclxuICAgICAgaWYgKGlkcy5sZW5ndGggPT09IDApIHJldHVybiBbXTsgLy8gT3RoZXJ3aXNlIHdlJ2xsIHJlcXVlc3QgZXZlcnkgdGFzayBpbiB0aGUgc3lzdGVtLlxyXG4gICAgICBjb25zdCByZXN1bHQgPSBuZXcgTWFwPElELCBUYXNrPigpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIk51bWJlciBvZiBpZHM6IFwiICsgaWRzLmxlbmd0aCk7XHJcbiAgICAgIC8vcmV0dXJuIHJlc3VsdC52YWx1ZXMoKTtcclxuICAgICAgcmV0dXJuIGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8VGFzaz4oXCJ0YXNrc1wiLCB7XHJcbiAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICBoYXNFZGdlc1RvOiBpZHNcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLypjb25zdCB0YXNrcyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8VGFzaz4oXCJ0YXNrc1wiLCB7XHJcbiAgICAgIGhhc0VkZ2VzVG86IG9sZElkcyxcclxuICAgICAgaW5jbHVkZTogW1wiYWJpbGl0aWVzXCIsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIFwiY2VudHJhbENvbnRlbnRcIl0sXHJcbiAgICAgIGZsYWdzOiBbXCJpbmNsdWRlSWRzT25seVwiXVxyXG4gICAgfSk7Ki9cclxuXHJcbiAgICBmb3IgKGNvbnN0IHRhc2sgb2YgdGFza3MpIHtcclxuICAgICAgY29uc3Qgb2xkTVQgPSB0YXNrLm1pZ3JhdGVkVGV4dHMgfHwge1xyXG4gICAgICAgIGFiaWxpdGllczoge30sXHJcbiAgICAgICAgY2VudHJhbENvbnRlbnQ6IHt9LFxyXG4gICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50czoge31cclxuICAgICAgfTtcclxuICAgICAgdGFzay5taWdyYXRlZFRleHRzID0ge1xyXG4gICAgICAgIGFiaWxpdGllczoge30sXHJcbiAgICAgICAgY2VudHJhbENvbnRlbnQ6IHt9LFxyXG4gICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50czoge31cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IG11dGF0aW9uczogQXJyYXk8KGJyOiBCYXRjaFJ1bm5lcik9PnZvaWQ+ID0gW107XHJcbiAgICAgIGNvbnN0IGNoYW5nZURlc2NyaXB0aW9uczogc3RyaW5nW10gPSBbXTtcclxuICAgICAgZm9yIChjb25zdCB7aWR9IG9mIHRhc2suYWJpbGl0aWVzKSB7XHJcbiAgICAgICAgY29uc3QgbWlncmF0aW9uSW5mbyA9IGFiaWxpdHlJZHNUb01pZ3JhdGUuZ2V0KGlkKTtcclxuICAgICAgICBpZiAobWlncmF0aW9uSW5mbykge1xyXG4gICAgICAgICAgY29uc3Qge25ld0lkLCBuZXdUZXh0LCBpc1R5cG9GaXh9ID0gbWlncmF0aW9uSW5mbztcclxuICAgICAgICAgIGxldCB7b2xkVGV4dH0gPSBtaWdyYXRpb25JbmZvO1xyXG4gICAgICAgICAgbGV0IG9sZElkID0gaWQ7XHJcbiAgICAgICAgICBpZiAob2xkTVQuYWJpbGl0aWVzW2lkXSkge1xyXG4gICAgICAgICAgICAvLyBJZiBtaWdyYXRpbmcgc3R1ZmYgdGhhdCB3YXMgbmV2ZXIgYWNrbm93bGVkZ2VzIGJ5IGEgdGVhY2hlcixcclxuICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIHBvaW50IG91dCB0aGUgdmVyeSBvbGQgaWQgYW5kIHRleHQgaW5zdGVhZCBvZiB0aGUgbmV2ZXItYWNrbm93bGVkZ2VkIG9uZS5cclxuICAgICAgICAgICAgb2xkVGV4dCA9IG9sZE1ULmFiaWxpdGllc1tpZF0ub2xkVGV4dDtcclxuICAgICAgICAgICAgb2xkSWQgPSBvbGRNVC5hYmlsaXRpZXNbaWRdLm9sZElkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKG5ld0lkICYmIG9sZFRleHQgIT09IG5ld1RleHQpIHtcclxuICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlOiBJZiBvbGRUZXh0ID09PSBuZXdUZXh0LCB0aGVuIHRoaXMgaXMgYSByZWltcG9ydCBuZXcgWE1MIHRoYXQgcmV2ZXJ0cyBiYWNrIHRvIG9yaWdpbiB0ZXh0LiBEb24ndCByZXF1aXJlIGFja25vd2xlZGdlbWVudCBmcm9tIHRlYWNoZXIhXHJcbiAgICAgICAgICAgIGlmICghaXNUeXBvRml4KSB7XHJcbiAgICAgICAgICAgICAgLy8gSWYgdGhpcyB3YXNuJ3QganVzdCBhIHR5cG8gZml4IChjaGFuZ2VzIGluIHN0b3Agd29yZHMsIGNhc2luZyBvciBzcGVjaWFsIGNoYXJhY3RlcnMpXHJcbiAgICAgICAgICAgICAgdGFzay5taWdyYXRlZFRleHRzLmFiaWxpdGllc1tuZXdJZF0gPSB7b2xkSWQsIG9sZFRleHQsIGltcG9ydERhdGV9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBtdXRhdGlvbnMucHVzaChiciA9PiB7XHJcbiAgICAgICAgICAgIGJyLnVubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImFiaWxpdGllc1wiLCBpZCk7XHJcbiAgICAgICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImFiaWxpdGllc1wiLCBuZXdJZCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNoYW5nZURlc2NyaXB0aW9ucy5wdXNoKGA8c3RyaWtlPiR7b2xkVGV4dH08L3N0cmlrZT5gKTtcclxuICAgICAgICAgIGlmIChuZXdJZCkge1xyXG4gICAgICAgICAgICBjaGFuZ2VEZXNjcmlwdGlvbnMucHVzaChuZXdUZXh0KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHRhc2tDb3Vyc2VDb2RlcyA9IG5ldyBTZXQ8c3RyaW5nPih0YXNrLnRhZ3MgPyBcclxuICAgICAgICB0YXNrLnRhZ3MuZmlsdGVyKHQgPT4gdC5zdGFydHNXaXRoKCdjb3Vyc2U6JykpLm1hcCh0ID0+IHQuc3Vic3RyKFwiY291cnNlOlwiLmxlbmd0aCkpIDpcclxuICAgICAgICBbXSk7XHJcblxyXG4gICAgICAvLyBXZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgbGlua2VkSWRzIChmb3IgdGhpcyBwYXJ0aWN1bGFyIHRhc2spIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbjpcclxuICAgICAgLy8gTGV0J3Mgc2F5IHRoZSB0YXNrIHdhcyByZWZlcnJlZCB0byBieSB0d28gZGlmZmVyZW50IGNvdXJzZXMgKHBvc3NpYmxlIGluIG9sZCB2ZXJzaW9ucyksXHJcbiAgICAgIC8vIGFuZCBpbiBvbGQgQ2VudHJhbCBDb250ZW50LCB0aGUgdHdvIGNvdXJzZXMgZGlkIGhhdmUgc2xpZ2h0bHkgZGlmZmVyZW50IGZvcm11bGF0aW9ucyBvZiBjZW50cmFsIGNvbnRlbnQsXHJcbiAgICAgIC8vIHNvIHRoZSB0YXNrIHdhcyBtYXBwZWQgdG8gYm90aCBvZiB0aGVtLiBUaGVuLCBpbiBuZXcgWE1MLCB0aGUgc2FtZSBjZW50cmFsIGNvbnRlbnQgd2FzIGZvcm11bGF0ZWRcclxuICAgICAgLy8gaW4gYSBuZXcgd2F5IHRoYXQgaXMgaWRlbnRpY2FsIHRoaXMgdGltZSBiZXR3ZWVuIHRoZSB0d28gY291cnNlcy4gVGhlbiBib3RoIG9sZCBJRHMgd2lsbCBiZSByZXBsYWNlZFxyXG4gICAgICAvLyBieSBhIHNpbmdsZSBuZXcgSUQuIEl0IHdvdWxkIHRoZW4gYmUgdW5uZXNjZXNzYXJ5IHRvIGxpbmsgdG8gdGhlIG5ldyBJRCB0d2ljZS5cclxuICAgICAgY29uc3QgbGlua2VkSWRzID0gbmV3IFNldDxJRD4oKTtcclxuXHJcbiAgICAgIGZvciAoY29uc3Qge2tyc1RvTWlncmF0ZSwgY2NzVG9NaWdyYXRlLCBjb3Vyc2VDb2RlfSBvZiBpZHNUb01pZ3JhdGVQZXJDb3Vyc2UpIHtcclxuICAgICAgICBpZiAodGFza0NvdXJzZUNvZGVzLnNpemUgPT09IDAgfHwgdGFza0NvdXJzZUNvZGVzLmhhcyhjb3Vyc2VDb2RlKSkge1xyXG4gICAgICAgICAgZm9yIChjb25zdCB7aWR9IG9mIHRhc2suY2VudHJhbENvbnRlbnQpIHtcclxuICAgICAgICAgICAgY29uc3QgbWlncmF0aW9uSW5mbyA9IGNjc1RvTWlncmF0ZS5nZXQoaWQpO1xyXG4gICAgICAgICAgICBpZiAobWlncmF0aW9uSW5mbykge1xyXG4gICAgICAgICAgICAgIGxldCB7bmV3SWQsIG5ld1RleHQsIG9sZFRleHQsIGlzVHlwb0ZpeH0gPSBtaWdyYXRpb25JbmZvO1xyXG4gICAgICAgICAgICAgIGxldCBvbGRJZCA9IGlkO1xyXG4gICAgICAgICAgICAgIGlmIChvbGRNVC5jZW50cmFsQ29udGVudFtpZF0pIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIG1pZ3JhdGluZyBzdHVmZiB0aGF0IHdhcyBuZXZlciBhY2tub3dsZWRnZXMgYnkgYSB0ZWFjaGVyLFxyXG4gICAgICAgICAgICAgICAgLy8gV2Ugc2hvdWxkIHBvaW50IG91dCB0aGUgdmVyeSBvbGQgaWQgYW5kIHRleHQgaW5zdGVhZCBvZiB0aGUgbmV2ZXItYWNrbm93bGVkZ2VkIG9uZS5cclxuICAgICAgICAgICAgICAgIG9sZFRleHQgPSBvbGRNVC5jZW50cmFsQ29udGVudFtpZF0ub2xkVGV4dDtcclxuICAgICAgICAgICAgICAgIG9sZElkID0gb2xkTVQuY2VudHJhbENvbnRlbnRbaWRdLm9sZElkO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBpZiAobmV3SWQgJiYgb2xkVGV4dCAhPT0gbmV3VGV4dCkge1xyXG4gICAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlOiBJZiBvbGRUZXh0ID09PSBuZXdUZXh0LCB0aGVuIHRoaXMgaXMgYSByZWltcG9ydCBuZXcgWE1MIHRoYXQgcmV2ZXJ0cyBiYWNrIHRvIG9yaWdpbiB0ZXh0LiBEb24ndCByZXF1aXJlIGFja25vd2xlZGdlbWVudCBmcm9tIHRlYWNoZXIhXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzVHlwb0ZpeCkge1xyXG4gICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIHdhc24ndCBqdXN0IGEgdHlwbyBmaXggKGNoYW5nZXMgaW4gc3RvcCB3b3JkcywgY2FzaW5nIG9yIHNwZWNpYWwgY2hhcmFjdGVycylcclxuICAgICAgICAgICAgICAgICAgdGFzay5taWdyYXRlZFRleHRzLmNlbnRyYWxDb250ZW50W25ld0lkXSA9IHtvbGRJZCwgb2xkVGV4dCwgaW1wb3J0RGF0ZX07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGlmICghbmV3SWQgfHwgIWxpbmtlZElkcy5oYXMobmV3SWQpKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdGlvbnMucHVzaChiciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGJyLnVubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImNlbnRyYWxDb250ZW50XCIsIGlkKTtcclxuICAgICAgICAgICAgICAgICAgaWYgKG5ld0lkKSBici5saW5rMihcInRhc2tzXCIsIHRhc2suaWQsIFwiY2VudHJhbENvbnRlbnRcIiwgbmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VEZXNjcmlwdGlvbnMucHVzaChgPHN0cmlrZT4ke29sZFRleHR9PC9zdHJpa2U+YCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3SWQpIHtcclxuICAgICAgICAgICAgICAgICAgY2hhbmdlRGVzY3JpcHRpb25zLnB1c2gobmV3VGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgIGxpbmtlZElkcy5hZGQobmV3SWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZm9yIChjb25zdCB7aWR9IG9mIHRhc2sua25vd2xlZGdlUmVxdWlyZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1pZ3JhdGlvbkluZm8gPSBrcnNUb01pZ3JhdGUuZ2V0KGlkKTtcclxuICAgICAgICAgICAgaWYgKG1pZ3JhdGlvbkluZm8pIHtcclxuICAgICAgICAgICAgICBsZXQge25ld0lkLCBuZXdUZXh0LCBvbGRUZXh0LCBpc1R5cG9GaXh9ID0gbWlncmF0aW9uSW5mbztcclxuICAgICAgICAgICAgICBsZXQgb2xkSWQgPSBpZDtcclxuICAgICAgICAgICAgICBpZiAob2xkTVQua25vd2xlZGdlUmVxdWlyZW1lbnRzW2lkXSkge1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgbWlncmF0aW5nIHN0dWZmIHRoYXQgd2FzIG5ldmVyIGFja25vd2xlZGdlcyBieSBhIHRlYWNoZXIsXHJcbiAgICAgICAgICAgICAgICAvLyBXZSBzaG91bGQgcG9pbnQgb3V0IHRoZSB2ZXJ5IG9sZCBpZCBhbmQgdGV4dCBpbnN0ZWFkIG9mIHRoZSBuZXZlci1hY2tub3dsZWRnZWQgb25lLlxyXG4gICAgICAgICAgICAgICAgb2xkVGV4dCA9IG9sZE1ULmtub3dsZWRnZVJlcXVpcmVtZW50c1tpZF0ub2xkVGV4dDtcclxuICAgICAgICAgICAgICAgIG9sZElkID0gb2xkTVQua25vd2xlZGdlUmVxdWlyZW1lbnRzW2lkXS5vbGRJZDtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgaWYgKG5ld0lkICYmIG9sZFRleHQgIT09IG5ld1RleHQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFNwZWNpYWwgY2FzZTogSWYgb2xkVGV4dCA9PT0gbmV3VGV4dCwgdGhlbiB0aGlzIGlzIGEgcmVpbXBvcnQgbmV3IFhNTCB0aGF0IHJldmVydHMgYmFjayB0byBvcmlnaW4gdGV4dC4gRG9uJ3QgcmVxdWlyZSBhY2tub3dsZWRnZW1lbnQgZnJvbSB0ZWFjaGVyIVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc1R5cG9GaXgpIHtcclxuICAgICAgICAgICAgICAgICAgLy8gSWYgdGhpcyB3YXNuJ3QganVzdCBhIHR5cG8gZml4IChjaGFuZ2VzIGluIHN0b3Agd29yZHMsIGNhc2luZyBvciBzcGVjaWFsIGNoYXJhY3RlcnMpXHJcbiAgICAgICAgICAgICAgICAgIHRhc2subWlncmF0ZWRUZXh0cy5rbm93bGVkZ2VSZXF1aXJlbWVudHNbbmV3SWRdID0ge29sZElkLCBvbGRUZXh0LCBpbXBvcnREYXRlfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIGlmICghbmV3SWQgfHwgIWxpbmtlZElkcy5oYXMobmV3SWQpKSB7XHJcbiAgICAgICAgICAgICAgICBtdXRhdGlvbnMucHVzaChiciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgIGJyLnVubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBpZCk7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChuZXdJZCkgYnIubGluazIoXCJ0YXNrc1wiLCB0YXNrLmlkLCBcImtub3dsZWRnZVJlcXVpcmVtZW50c1wiLCBuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNoYW5nZURlc2NyaXB0aW9ucy5wdXNoKGA8c3RyaWtlPiR7b2xkVGV4dH08L3N0cmlrZT5gKTtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdJZCkge1xyXG4gICAgICAgICAgICAgICAgICBjaGFuZ2VEZXNjcmlwdGlvbnMucHVzaChuZXdUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgbGlua2VkSWRzLmFkZChuZXdJZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICAgIGNoYW5nZTogYE1pZ3JlcmFkIFVwcGdpZnRgLFxyXG4gICAgICAgIGNvbnRlbnQ6IGA8aDQ+JHt0YXNrLm5hbWV9ICR7dGFzay5zY2hvb2wgPyBgKCR7dGFzay5zY2hvb2x9KSBgIDogJyhza29sYSBlaiBhbmdpdmVuKSd9PC9oND5cclxuICAgICAgICAgIDxwPkt1cnNrb2Q6ICR7Wy4uLnRhc2tDb3Vyc2VDb2Rlc10uam9pbignLCcpfTwvcD5cclxuICAgICAgICAgICR7Y2hhbmdlRGVzY3JpcHRpb25zLm1hcCh0eHQgPT4gYDxwPiR7dHh0fTwvcD5gKS5qb2luKCcnKX1gLFxyXG4gICAgICAgIG11dGF0aW9uczogYnIgPT4ge1xyXG4gICAgICAgICAgYnIucHV0KFwidGFza3NcIiwgdGFzayk7XHJcbiAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChtID0+IG0oYnIpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gVEhFIFJFU1VMVCBXSUxMIEJFOlxyXG4gIC8vICBGdW5jdGlvbiBwb3B1bGF0ZXMgYSBjb21wbGV0ZSBzZXQgb2YgQ2hhbmdlcyB0byBkaXNwbGF5IHRvIHVzZXIuXHJcbiAgLy8gIElmIHVzZXIgY2xpY2tzIFwiaW1wb3J0XCIsIHRoZXNlIGNoYW5nZXMgd2lsbCBiZSBwZXJmb3JtZWQuXHJcblxyXG4gIFxyXG4gIC8vIE5leHQgdGhpbmcgd2lsbCBiZSB0byBtYWtlIHRoaXMgdmlzaWJsZSBpbiBHVUk6XHJcbiAgLy8gIFNob3cgT3BlbkNsb3NlQm94IHdpdGggd2FybmluZyBiZWZvcmUgXCJJbmzDpG1uaW5nc3VwcGdpZnRcIiBpbiBjYXNlIHRoZXJlIGFyZSBtaWdyYXRpb25UYXNrcy5cclxuICAvLyAgTGlzdCBrbm93bGVkZ2UgcmVxdWlyZW1lbnRzIEEsIEtSIEMsIEtSIEUsIGNlbnRyYWwgY29udGVudHMgYW5kIGFiaWxpdGllcyByZXNwZWN0aXZlbHkgaW4gdG90YWxseSBtYXggNSB0YWJsZXMuXHJcbiAgLy8gIFNhbWUgR1VJIGFzIGtub3dsZWRnZVJlcXVpcmVtZW50IG1hdHJpeCAoZ3JlZW4gaGVhZGVyKSBwZXIgdGFibGUuXHJcbiAgLy8gIEhlYWRlcnM6IFwiVXJzcHJ1bmdsaWcgZm9ybXVsZXJpbmdcIiwgXCJTa29sdmVya2V0cyBueWEgZm9ybXVsZXJpbmdcIiwgXCJUw6Rja2VyIHVwcGdpZnRlbiBkZW4gbnlhIGZvcm11bGVyaW5nZW4/XCJcclxuICAvLyAgRm9yIGVhY2ggcm93LCBzaG93IHN0cmlrZSB0ZXh0ICsgbmV3IHRleHQgd2l0aCBncmVlbiBiYWNrZ3JvdW5kLiBUaGVuIEltcG9ydCBEYXRlLiBUaGVuIFwiSmEgLyBOZWpcIi5cclxuICAvLyAgVHJ5Y2tlciBtYW4gSkEgZWxsZXIgbmVqIHPDpSB0YXMgcmFkZW4gYm9ydC5cclxuICAvLyAgVHJ5Y2tlciBtYW4gTmVqIHPDpSB0YXMgw6R2ZW4ga29wcGxpbmdlbiBib3J0IG9jaCBrdXJzZXIgc29tIGFudsOkbmRlciB1cHBnaWZ0ZW4ga2FuIHDDpXZlcmthcy5cclxuICAvL1xyXG4gIC8vIE7DpHN0YSBzYWsgYXR0IGfDtnJhOiBQaW5uYS8gdmlzYSBiZXLDtnJkYSB1cHBnaWZ0ZXIgbWVkIG55IGbDpHJnIGVsbGVyIGlrb24uXHJcbiAgLy8gT2Nrc8OlLCBow7Znc3QgdXBwIHDDpSBrdXJzLXNpZGFuIChrdXJzYnlnZyk6IFZpc2Egc2FtbWEgdmFybmluZ3N0cmlhbmdlbCBPcGVuQ2xvc2VCb3ggb2NoIGxpc3RhXHJcbiAgLy8gw6RuZHJhZGUgZm9ybXVsZXJpbmdhciArIGJlcsO2cmRhIHVwcGdpZnRlci4gT20gbWFuIGludGUgw6RyIHJlZGlnZXJpbmdzYmVow7ZyaWcgYXYgZW4gdXBwZ2lmdCBiw7ZyXHJcbiAgLy8gbWFuIGtvbnRha3RhIHVwcGdpZnRlbnMgw6RnYXJlIGbDtnIgYXR0IGdyYW5za2EgbWlncmVyaW5nZW4uXHJcbn1cclxuIiwiaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBTdWJqZWN0LCBDb3Vyc2UsIEFiaWxpdHksIEtub3dsZWRnZVJlcXVpcmVtZW50LCBDZW50cmFsQ29udGVudCB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgU3ViamVjdFRvSW1wb3J0IH0gZnJvbSAnLi4vc3ViamVjdC10by1pbXBvcnQnO1xyXG5pbXBvcnQgeyBDaGFuZ2UgfSBmcm9tICcuL2NoYW5nZSc7XHJcbmltcG9ydCB7IG1pZ3JhdGVPcmRlckxpc3RzT2ZDb3Vyc2VJbnN0YW5jZXMsIG1pZ3JhdGVBYmlsaXRpZXNPcmRlck9uU3ViamVjdCB9IGZyb20gJy4vbWlncmF0aW9ucyc7XHJcbmltcG9ydCB7IG1pZ3JhdGVTdWJqZWN0IH0gZnJvbSAnLi9taWdyYXRlLXN1YmplY3QnO1xyXG5pbXBvcnQgeyBsb2FkQ291cnNlIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBDb3Vyc2VTZXQgfSBmcm9tICcuL2NvdXJzZS1zZXQnO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRpZmZYbWxXaXRoRGF0YWJhc2UoZXhpc3RpbmdTdWJqZWN0OiBTdWJqZWN0LCBzdWJqZWN0VG9JbXBvcnQ6IFN1YmplY3RUb0ltcG9ydCwgY2hhbmdlczogQ2hhbmdlW10pIHtcclxuICAvLyBFeHBhbmQgZ3JhcGhzIG9mIGV4aXN0aW5nIFN1YmplY3RcclxuICBleGlzdGluZ1N1YmplY3QgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5nZXQoJ3N1YmplY3RzJywgZXhpc3RpbmdTdWJqZWN0LmlkLCB7IGluY2x1ZGU6IFtcImNvdXJzZVRlbXBsYXRlc1wiLCBcImFiaWxpdGllc1wiXSB9KTtcclxuICAvLyBMYXppbHkgbG9hZCBhbGwgY2VudHJhbCBjb250ZW50cyBhbmQga25vd2xlZGdlUmVxdWlyZW1lbnRzIG9uXHJcbiAgLy8gZWFjaCBjb3Vyc2UgdGVtcGxhdGVcclxuICBjb25zdCBleHBhbmRlZENvdXJzZVRlbXBsYXRlcyA9IGF3YWl0IFByb21pc2UuYWxsKGV4aXN0aW5nU3ViamVjdC5jb3Vyc2VUZW1wbGF0ZXMubWFwKGN0ID0+IGxvYWRDb3Vyc2UoY3QuaWQsIHtcclxuICAgIGluY2x1ZGU6IFtcclxuICAgICAgJ2NlbnRyYWxDb250ZW50JyxcclxuICAgICAgJ2tub3dsZWRnZVJlcXVpcmVtZW50cydcclxuICAgIF1cclxuICB9KSkpO1xyXG5cclxuICBjb25zb2xlLmxvZyhgU3ViamVjdDogJHtleGlzdGluZ1N1YmplY3QubmFtZX0uIENvdXJzZXM6ICR7ZXhwYW5kZWRDb3Vyc2VUZW1wbGF0ZXMubWFwKCh7bmFtZX0pID0+IG5hbWUpfWApO1xyXG5cclxuICBjb25zdCBjb3Vyc2VTZXRzOiBDb3Vyc2VTZXRbXSA9IGF3YWl0IFByb21pc2UuYWxsKGV4cGFuZGVkQ291cnNlVGVtcGxhdGVzLm1hcCAoYXN5bmMgY291cnNlVGVtcGxhdGUgPT4gKHtcclxuICAgIHRlbXBsYXRlOiBjb3Vyc2VUZW1wbGF0ZSxcclxuICAgIGluc3RhbmNlczogYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxDb3Vyc2U+KFwiY291cnNlc1wiLCB7IG5hbWU6IGNvdXJzZVRlbXBsYXRlLm5hbWUsIGluY2x1ZGU6IFsnYWJpbGl0aWVzJ10sIGZsYWdzOiBbJ2luY2x1ZGVJZHNPbmx5J10gfSlcclxuICB9KSkpO1xyXG5cclxuICAvKmlmIChleHBhbmRlZENvdXJzZVRlbXBsYXRlcy5zb21lIChjb3Vyc2UgPT4gIWNvdXJzZS5jZW50cmFsQ29udGVudE9yZGVyIHx8ICFjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzT3JkZXIgfHwgIWNvdXJzZS5hYmlsaXRpZXNPcmRlcikpIHtcclxuICAgIG1pZ3JhdGVPcmRlckxpc3RzT2ZDb3Vyc2VJbnN0YW5jZXMoY291cnNlU2V0cywgc3ViamVjdFRvSW1wb3J0LCBjaGFuZ2VzKTtcclxuICAgIC8vIEluIGZ1dHVyZSwgYXMgYWJpbGl0aWVzIG1heSBiZSBhZGRlZCBvciByZW1vdmVkLCB3ZSB3aWxsIGhhdmUgdG8gbWFpbnRhaW4gdGhlIG9yZGVyIG9mIGFiaWxpdGllcyBvbiB0aGUgY291cnNlIGluc3RhbmNlcyxcclxuICAgIC8vIHRoZSBzYW1lIHdheSB3ZSBkbyBpdCB3aXRoIGNlbnRyYWwgY29udGVudCBhbmQga25vd2xlZGdlIHJlcXVpcmVtZW50cy4gVE9ETyByZXNwZWN0IGFiaWxpdGllcyBvcmRlciBvbiBldmVyeSBwbGFjZSBhYmlsaXRpZXMgYXJlIGVudW1lcmF0ZWQsXHJcbiAgICAvLyBzdWNoIGFzIG9uIGNvdXJzZSB2aWV3ZXIsIGNvdXJzZSBidWlsZGVyLCBldGMuXHJcbiAgICBtaWdyYXRlQWJpbGl0aWVzT3JkZXJPblN1YmplY3QoZXhpc3RpbmdTdWJqZWN0LCBjb3Vyc2VTZXRzLCBjaGFuZ2VzKTtcclxuICB9IGVsc2UgeyovXHJcbiAgICBhd2FpdCBtaWdyYXRlU3ViamVjdChleGlzdGluZ1N1YmplY3QsIGNvdXJzZVNldHMsIHN1YmplY3RUb0ltcG9ydCwgY2hhbmdlcyk7XHJcbiAgLy99XHJcbn1cclxuXHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgU2tvbHZlcmtldFN1YmplY3QsIFNrb2x2ZXJrZXRDb3Vyc2UgfSBmcm9tICcuL3Nrb2x2ZXJrZXQtc3ViamVjdCc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgU3ViamVjdCwgQ291cnNlLCBBYmlsaXR5LCBLbm93bGVkZ2VSZXF1aXJlbWVudCwgQ2VudHJhbENvbnRlbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IE11dGF0aW9uUmVxdWVzdCwgQmF0Y2hSdW5uZXIsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IENoYW5nZSB9IGZyb20gJy4vZGlmZi9jaGFuZ2UnO1xyXG5pbXBvcnQgeyBTdWJqZWN0VG9JbXBvcnQsIENvdXJzZVRvSW1wb3J0IH0gZnJvbSAnLi9zdWJqZWN0LXRvLWltcG9ydCc7XHJcbmltcG9ydCB7IGRpZmZYbWxXaXRoRGF0YWJhc2UgfSBmcm9tICcuL2RpZmYvZGlmZi14bWwtd2l0aC1kYXRhYmFzZSc7XHJcbmltcG9ydCB7IGxvYWRDb3Vyc2UgfSBmcm9tICcuLi91dGlscyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIG9uQ2FuY2VsOiAoKSA9PiB2b2lkO1xyXG4gIG9uSW1wb3J0U3VjY2VzczogKHN1YmplY3Q6IHN0cmluZykgPT4gdm9pZDtcclxuICBzdWJqZWN0OiBTa29sdmVya2V0U3ViamVjdDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBzaG93RnVsbFRleHQ6IGJvb2xlYW47XHJcbiAgY2hhbmdlczogQ2hhbmdlW107XHJcbiAgc3ViamVjdFRvSW1wb3J0PzogU3ViamVjdFRvSW1wb3J0O1xyXG4gIGlzV29ya2luZzogYm9vbGVhbjtcclxuICBpc0ltcG9ydGluZzogYm9vbGVhbjtcclxuICBlcnJvcj86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFVwbG9hZGVkU3ViamVjdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcclxuICBwdXJwb3NlRWxlbTogSFRNTEVsZW1lbnQ7XHJcbiAgY291cnNlc0VsZW1zOiB7IFtjb3Vyc2VDb2RlOiBzdHJpbmddOiB7IGNvdXJzZTogU2tvbHZlcmtldENvdXJzZSwgZWxlbTogSFRNTEVsZW1lbnQgfSB9O1xyXG4gIGNlbnRyYWxDb250ZW50RWxlbXM6IEhUTUxFbGVtZW50W107XHJcbiAga25vd2xlZGdlUmVxdWlyZW1lbnRFbGVtczogSFRNTEVsZW1lbnRbXTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLmNvdXJzZXNFbGVtcyA9IHt9O1xyXG4gICAgdGhpcy5jZW50cmFsQ29udGVudEVsZW1zID0gW107XHJcbiAgICB0aGlzLmtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMgPSBbXTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHNob3dGdWxsVGV4dDogZmFsc2UsXHJcbiAgICAgIGNoYW5nZXM6IFtdLFxyXG4gICAgICBpc1dvcmtpbmc6IHRydWUsXHJcbiAgICAgIGlzSW1wb3J0aW5nOiBmYWxzZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgdGhpcy5hZGRDbGFzc2VzRm9yQ2hlcnJ5UGlja2VkRWxlbWVudHMoKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHtjaGFuZ2VzLCBzdWJqZWN0VG9JbXBvcnR9ID0gYXdhaXQgdGhpcy5kaWZmV2l0aEV4aXN0aW5nKCk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBjaGFuZ2VzLCBzdWJqZWN0VG9JbXBvcnQgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3I6ICcnK2Vycm9yIH0pO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzV29ya2luZzogZmFsc2UgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRDbGFzc2VzRm9yQ2hlcnJ5UGlja2VkRWxlbWVudHMoKSB7XHJcbiAgICBjb25zdCBhYmlsaXRpZXMgPSAkKHRoaXMucHVycG9zZUVsZW0pLmZpbmQoJ2xpJykuZmlyc3QoKS5wYXJlbnQoKS5jaGlsZHJlbignbGknKTtcclxuICAgIGFiaWxpdGllcy5hZGRDbGFzcygnYWJpbGl0eScpO1xyXG4gICAgY29uc3QgY2VudHJhbENvbnRlbnRzID0gJCh0aGlzLmNlbnRyYWxDb250ZW50RWxlbXMpLmZpbmQoJ2xpJyk7XHJcbiAgICBjZW50cmFsQ29udGVudHMuYWRkQ2xhc3MoJ2NlbnRyYWwtY29udGVudCcpO1xyXG4gICAgY29uc3Qga25vd2xlZGdlUmVxdWlyZW1lbnRzID0gJCh0aGlzLmtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMpLmZpbmQoJ3AnKTtcclxuICAgIGtub3dsZWRnZVJlcXVpcmVtZW50cy5hZGRDbGFzcygna25vd2xlZGdlLXJlcXVpcmVtZW50Jyk7XHJcbiAgICBjb25zdCBhbGwgPSAkKFthYmlsaXRpZXMsIGNlbnRyYWxDb250ZW50cywga25vd2xlZGdlUmVxdWlyZW1lbnRzXSk7XHJcbiAgICBhbGwuYWRkQ2xhc3MoJ21hcmtlZC1hcmVhJyk7XHJcbiAgfVxyXG5cclxuICBjaGVycnlQaWNrRGF0YSgpOiBTdWJqZWN0VG9JbXBvcnQge1xyXG4gICAgLy9cclxuICAgIC8vIFJlYWRzIGVsZW1lbnRzICh0YWdnZWQgYnkgY2xhc3NlcyBpbiBhZGRDbGFzc2VzRm9yQ2hlcnJ5UGlja2VkRWxlbWVudHMoKSkgYW5kIGNvbnZlcnRzIHRoZWlyIGlubmVyIEhUTUwgdG8gdGhlIGNvcnJlc3BvbmRpbmdcclxuICAgIC8vIG1vZGVsIFN1YmplY3RUb0ltcG9ydC4gTm90ZSB0aGF0IGlmIHdlIG5lZWQgdG8gYWRqdXN0IGhvdyB0byBwaWNrIHRoZSByaWdodCBMSSBvciBQIGVsZW1lbnRzLCB3ZVxyXG4gICAgLy8gd2lsbCBvbmx5IG5lZWQgdG8gY2hhbmdlIHRoZSBjb2RlIGluIGFkZENsYXNzZXNGb3JDaGVycnlQaWNrZWRFbGVtZW50cygpLCBub3QgdGhpcyBjb2RlLlxyXG4gICAgLy9cclxuICAgIGNvbnN0IHNrb2xTdWJqZWN0ID0gdGhpcy5wcm9wcy5zdWJqZWN0O1xyXG4gICAgY29uc3QgYWJpbGl0aWVzTGlzID0gQXJyYXkuZnJvbSgkKHRoaXMucHVycG9zZUVsZW0pLmZpbmQoJ2xpJykuZmlyc3QoKS5wYXJlbnQoKS5jaGlsZHJlbignbGknKSk7XHJcbiAgICBjb25zdCBhYmlsaXRpZXMgPSBhYmlsaXRpZXNMaXMubWFwKChhLCBpKSA9PiBgJHtpICsgMX0uICR7JChhKS5odG1sKCl9YC50cmltKCkpLmZpbHRlcihodG1sID0+ICEhaHRtbCk7XHJcblxyXG4gICAgY29uc3QgcmVzdWx0OiBTdWJqZWN0VG9JbXBvcnQgPSB7XHJcbiAgICAgIG5hbWU6IHNrb2xTdWJqZWN0Lm5hbWUsXHJcbiAgICAgIGNvZGU6IHNrb2xTdWJqZWN0LmNvZGUsXHJcbiAgICAgIHNjaG9vbFR5cGU6IHNrb2xTdWJqZWN0LnNjaG9vbFR5cGUsXHJcbiAgICAgIGFiaWxpdGllcyxcclxuICAgICAgY291cnNlczogT2JqZWN0LmtleXModGhpcy5jb3Vyc2VzRWxlbXMpXHJcbiAgICAgICAgLm1hcChjb3Vyc2VDb2RlID0+IHRoaXMuY291cnNlc0VsZW1zW2NvdXJzZUNvZGVdKVxyXG4gICAgICAgIC5tYXA8Q291cnNlVG9JbXBvcnQ+KCh7IGNvdXJzZSwgZWxlbSB9KSA9PiAoe1xyXG4gICAgICAgICAgbmFtZTogY291cnNlLm5hbWUsXHJcbiAgICAgICAgICB5ZWFyOiBjb3Vyc2UueWVhcixcclxuICAgICAgICAgIGNvZGU6IGNvdXJzZS5jb2RlLFxyXG4gICAgICAgICAgcG9pbnRzOiBjb3Vyc2UucG9pbnRzLFxyXG4gICAgICAgICAgY2VudHJhbENvbnRlbnQ6IEFycmF5LmZyb20oJChlbGVtKS5maW5kKCcuY2VudHJhbC1jb250ZW50JykpLm1hcChjID0+ICh7XHJcbiAgICAgICAgICAgIGh0bWw6ICQoYykuaHRtbCgpLnRyaW0oKSBhcyBzdHJpbmcsXHJcbiAgICAgICAgICAgIGdyb3VwOiAkKGMpLnBhcmVudCgndWwnKS5wcmV2KCdoNCcpLnRleHQoKS50cmltKClcclxuICAgICAgICAgIH0pKS5maWx0ZXIoKHtodG1sfSkgPT4gISFodG1sKSxcclxuICAgICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50czpcclxuICAgICAgICAgICAgQXJyYXkuZnJvbSgkKGVsZW0pLmZpbmQoJy5ncmFkZS1zdGVwLW5vbmUgLmtub3dsZWRnZS1yZXF1aXJlbWVudCcpKS5tYXAociA9PiAkKHIpLmh0bWwoKS50cmltKCkpXHJcbiAgICAgICAgICAgICAgLmZpbHRlcihodG1sID0+ICEhaHRtbClcclxuICAgICAgICAgICAgICAubWFwKGh0bWwgPT4gKHtncmFkZVN0ZXA6IG51bGwsIGh0bWwgfSkpXHJcbiAgICAgICAgICAgICAgLmNvbmNhdChcclxuICAgICAgICAgICAgICAgIEFycmF5LmZyb20oJChlbGVtKS5maW5kKCcuZ3JhZGUtc3RlcC1FIC5rbm93bGVkZ2UtcmVxdWlyZW1lbnQnKSkubWFwKHIgPT4gJChyKS5odG1sKCkudHJpbSgpKVxyXG4gICAgICAgICAgICAgICAgICAuZmlsdGVyKGh0bWwgPT4gISFodG1sKVxyXG4gICAgICAgICAgICAgICAgICAubWFwKGh0bWwgPT4gKHsgZ3JhZGVTdGVwOiBcIkVcIiwgaHRtbCB9KSlcclxuICAgICAgICAgICAgICAgICAgLmNvbmNhdChcclxuICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKCQoZWxlbSkuZmluZCgnLmdyYWRlLXN0ZXAtQyAua25vd2xlZGdlLXJlcXVpcmVtZW50JykpLm1hcChyID0+ICQocikuaHRtbCgpLnRyaW0oKSlcclxuICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoaHRtbCA9PiAhIWh0bWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAubWFwKGh0bWwgPT4gKHsgZ3JhZGVTdGVwOiBcIkNcIiwgaHRtbCB9KSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAuY29uY2F0KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKCQoZWxlbSkuZmluZCgnLmdyYWRlLXN0ZXAtQSAua25vd2xlZGdlLXJlcXVpcmVtZW50JykpLm1hcChyID0+ICQocikuaHRtbCgpLnRyaW0oKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGh0bWwgPT4gISFodG1sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoaHRtbCA9PiAoeyBncmFkZVN0ZXA6IFwiQVwiLCBodG1sIH0pKSkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRpZmZXaXRoRXhpc3RpbmcoKTogUHJvbWlzZTx7Y2hhbmdlczogQ2hhbmdlW10sIHN1YmplY3RUb0ltcG9ydDogU3ViamVjdFRvSW1wb3J0fT4ge1xyXG4gICAgY29uc3Qgc3ViamVjdFRvSW1wb3J0ID0gdGhpcy5jaGVycnlQaWNrRGF0YSgpO1xyXG4gICAgbGV0IGNoYW5nZXM6IENoYW5nZVtdID0gW107XHJcbiAgICAvLyBGaW5kIGV4aXN0aW5nIFN1YmplY3RcclxuICAgIGNvbnN0IGV4aXN0aW5nU3ViamVjdHMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PFN1YmplY3Q+KFwic3ViamVjdHNcIik7XHJcbiAgICBsZXQgZXhpc3RpbmdTdWJqZWN0ID0gZXhpc3RpbmdTdWJqZWN0cy5maWx0ZXIocyA9PiBzLmNvZGUgPT09IHRoaXMucHJvcHMuc3ViamVjdC5jb2RlKVswXTtcclxuICAgIGxldCBjZW50cmFsQ29udGVudCA9IFtdIGFzIENlbnRyYWxDb250ZW50W10sXHJcbiAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50cyA9IFtdIGFzIEtub3dsZWRnZVJlcXVpcmVtZW50W107XHJcblxyXG4gICAgbGV0IGNyZWF0ZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgZnVuY3Rpb24gY3QoKSB7XHJcbiAgICAgIGNvbnN0IHJ2ID0gY3JlYXRlVGltZTtcclxuICAgICAgY3JlYXRlVGltZSArPSAyO1xyXG4gICAgICByZXR1cm4gcnY7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV4aXN0aW5nU3ViamVjdCkge1xyXG4gICAgICAvLyBJbmNsdWRlIGFiaWxpdGllcyBhbmQgc3RhbmRhcmRDb3Vyc2VzIHdpdGggdGhlIGZvdW5kIFN1YmplY3Q6XHJcbiAgICAgIGF3YWl0IGRpZmZYbWxXaXRoRGF0YWJhc2UoZXhpc3RpbmdTdWJqZWN0LCBzdWJqZWN0VG9JbXBvcnQsIGNoYW5nZXMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gU3ViamVjdCBub3QgaW1wb3J0ZWQgYmVmb3JlLiBBZGQgaXQhXHJcbiAgICAgIGNvbnN0IG5ld1N1YmplY3Q6IFN1YmplY3QgPSBleGlzdGluZ1N1YmplY3QgPSB7XHJcbiAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICBzY2hvb2xUeXBlOiBzdWJqZWN0VG9JbXBvcnQuc2Nob29sVHlwZSxcclxuICAgICAgICB0YWdzOiBbXCJzY2hvb2xUeXBlOlwiICsgc3ViamVjdFRvSW1wb3J0LnNjaG9vbFR5cGVdLFxyXG4gICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl0sXHJcbiAgICAgICAgY29kZTogc3ViamVjdFRvSW1wb3J0LmNvZGUsXHJcbiAgICAgICAgbmFtZTogc3ViamVjdFRvSW1wb3J0Lm5hbWUsXHJcbiAgICAgICAgYWJpbGl0aWVzT3JkZXI6IFtdLCAvLyBVcGRhdGUgbGF0ZXIgb24hXHJcbiAgICAgICAgcHVibGlzaGFibGU6IGZhbHNlLFxyXG4gICAgICAgIGRhdGVUaW1lOiBjdCgpXHJcbiAgICAgIH07XHJcbiAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgY2hhbmdlOiBcIk55dHQgw6RtbmVcIixcclxuICAgICAgICBjb250ZW50OiBgJHtzdWJqZWN0VG9JbXBvcnQubmFtZX0gKCR7c3ViamVjdFRvSW1wb3J0LmNvZGV9KWAsXHJcbiAgICAgICAgbXV0YXRpb25zOiByID0+IHIuYWRkKFwic3ViamVjdHNcIiwgbmV3U3ViamVjdClcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBjb25zdCBzdWJqZWN0QWJpbGl0aWVzID0gW107XHJcblxyXG4gICAgICBmb3IgKGxldCBhIG9mIHN1YmplY3RUb0ltcG9ydC5hYmlsaXRpZXMpIHtcclxuICAgICAgICBjb25zdCBuZXdBYmlsaXR5OiBBYmlsaXR5ID0ge1xyXG4gICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICAgIG5hbWU6IGEsXHJcbiAgICAgICAgICBhY2w6IFtcInJvbGU6VVNFUjpSXCJdLFxyXG4gICAgICAgICAgZGF0ZVRpbWU6IGN0KClcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzdWJqZWN0QWJpbGl0aWVzLnB1c2gobmV3QWJpbGl0eSk7IC8vIFRvIHJlZmVyIGZyb20gaW4gY291cnNlcyBsYXRlciBvbiFcclxuXHJcbiAgICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICAgIGNoYW5nZTogXCJOeSBmw7ZybcOlZ2FcIixcclxuICAgICAgICAgIGNvbnRlbnQ6IGEsXHJcbiAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xyXG4gICAgICAgICAgICByLmFkZChcImFiaWxpdGllc1wiLCBuZXdBYmlsaXR5KTtcclxuICAgICAgICAgICAgci5saW5rKFwic3ViamVjdHNcIiwgbmV3U3ViamVjdC5pZCwgXCJhYmlsaXRpZXNcIiwgbmV3QWJpbGl0eS5pZCwgXCJhYmlsaXRpZXNcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBub3cgd2hlbiB3ZSBoYXZlIGFiaWxpdGllcyBvcmRlcjpcclxuICAgICAgbmV3U3ViamVjdC5hYmlsaXRpZXNPcmRlciA9IHN1YmplY3RBYmlsaXRpZXMubWFwKCh7aWR9KSA9PiBpZCk7XHJcblxyXG4gICAgICBmb3IgKGxldCBjIG9mIHN1YmplY3RUb0ltcG9ydC5jb3Vyc2VzKSB7XHJcbiAgICAgICAgY29uc3QgbmV3Q291cnNlOiBDb3Vyc2UgPSB7XHJcbiAgICAgICAgICBpZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICAgICAgc3ViamVjdENvZGU6IG5ld1N1YmplY3QuY29kZSxcclxuICAgICAgICAgIHNjaG9vbFR5cGU6IG5ld1N1YmplY3Quc2Nob29sVHlwZSxcclxuICAgICAgICAgIHRhZ3M6IFtcclxuICAgICAgICAgICAgXCJzdWI6XCIgKyBuZXdTdWJqZWN0LmNvZGUsXHJcbiAgICAgICAgICAgIFwiY291cnNlOlwiICsgYy5jb2RlLFxyXG4gICAgICAgICAgICBcInNjaG9vbFR5cGU6XCIgKyBuZXdTdWJqZWN0LnNjaG9vbFR5cGVcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgICBkYXRlVGltZTogY3QoKSxcclxuICAgICAgICAgIGlzVGVtcGxhdGU6IHRydWUsXHJcbiAgICAgICAgICBhY2w6IFtcInJvbGU6RU1QTE9ZRUU6UlwiXSwgLy8gU3RhbmRhcmRrdXJzZXIgZW5kYXN0IHN5bmxpZ2EgZsO2ciBsw6RyYXJlXHJcbiAgICAgICAgICBuYW1lOiBjLm5hbWUsXHJcbiAgICAgICAgICBjb2RlOiBjLmNvZGUsXHJcbiAgICAgICAgICBwb2ludHM6IGMucG9pbnRzLFxyXG4gICAgICAgICAgbW9kdWxlczogW10sXHJcbiAgICAgICAgICBzdWJqZWN0SWQ6IG5ld1N1YmplY3QuaWQsXHJcbiAgICAgICAgICByZXNvdXJjZXM6IFtdLFxyXG4gICAgICAgICAgY3JlYXRlZEJ5OiB7IG5hbWU6IGVudi5jdXJyZW50VXNlci5kaXNwbGF5TmFtZSwgdXJsOiBcIm1haWx0bzpcIiArIGVudi5jdXJyZW50VXNlci5tYWlsIH0sXHJcbiAgICAgICAgICBjcmVhdGVkRGF0ZTogRGF0ZS5ub3coKSxcclxuICAgICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyOiBbXSxcclxuICAgICAgICAgIGNlbnRyYWxDb250ZW50T3JkZXI6IFtdLFxyXG4gICAgICAgICAgYWJpbGl0aWVzT3JkZXI6IHN1YmplY3RBYmlsaXRpZXMubWFwKCh7aWR9KSA9PiBpZClcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChjLnllYXIpIG5ld0NvdXJzZS5zY2hvb2xHcmFkZSA9IGMueWVhcjtcclxuXHJcbiAgICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICAgIGNoYW5nZTogXCJOeSBrdXJzXCIsXHJcbiAgICAgICAgICBjb250ZW50OiBjLm5hbWUsXHJcbiAgICAgICAgICBtdXRhdGlvbnM6IHIgPT4ge1xyXG4gICAgICAgICAgICByLmFkZChcImNvdXJzZXNcIiwgbmV3Q291cnNlKTtcclxuICAgICAgICAgICAgci5saW5rKFwic3ViamVjdHNcIiwgbmV3U3ViamVjdC5pZCwgXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZS5pZCwgXCJjb3Vyc2VUZW1wbGF0ZXNcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHtncm91cDogY2NHcm91cCwgaHRtbH0gb2YgYy5jZW50cmFsQ29udGVudCkge1xyXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUgZXhpc3RzIGFuIGlkZW50aWNhbCBjZW50cmFsIGNvbnRlbnQgb24gcHJldmlvdXMgY291cnNlIGZpcnN0XHJcbiAgICAgICAgICBsZXQgbmV3Q2VudHJhbENvbnRlbnQgPSBjZW50cmFsQ29udGVudC5maWx0ZXIoY2MgPT4gY2MubmFtZSA9PT0gaHRtbClbMF07XHJcbiAgICAgICAgICBpZiAoIW5ld0NlbnRyYWxDb250ZW50KSB7XHJcbiAgICAgICAgICAgIG5ld0NlbnRyYWxDb250ZW50ID0ge1xyXG4gICAgICAgICAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgICAgICAgICAgZGF0ZVRpbWU6IGN0KCksXHJcbiAgICAgICAgICAgICAgbmFtZTogaHRtbCxcclxuICAgICAgICAgICAgICBhY2w6IFtcInJvbGU6VVNFUjpSXCJdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChjY0dyb3VwKSBuZXdDZW50cmFsQ29udGVudC5ncm91cCA9IGNjR3JvdXA7XHJcbiAgICAgICAgICAgIGNlbnRyYWxDb250ZW50LnB1c2gobmV3Q2VudHJhbENvbnRlbnQpO1xyXG5cclxuICAgICAgICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICAgICAgICBjaGFuZ2U6IFwiTnl0dCBjZW50cmFsdCBpbm5laMOlbGxcIixcclxuICAgICAgICAgICAgICBjb250ZW50OiBgPGg0PiR7Y2NHcm91cH08L2g0PiR7aHRtbH1gLFxyXG4gICAgICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XHJcbiAgICAgICAgICAgICAgICByLmFkZChcImNlbnRyYWwtY29udGVudFwiLCBuZXdDZW50cmFsQ29udGVudCk7XHJcbiAgICAgICAgICAgICAgICByLmxpbmsoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZS5pZCwgXCJjZW50cmFsLWNvbnRlbnRcIiwgbmV3Q2VudHJhbENvbnRlbnQuaWQsIFwiY2VudHJhbENvbnRlbnRcIik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBjaGFuZ2VzLnB1c2goe1xyXG4gICAgICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XHJcbiAgICAgICAgICAgICAgICByLmxpbmsoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZS5pZCwgXCJjZW50cmFsLWNvbnRlbnRcIiwgbmV3Q2VudHJhbENvbnRlbnQuaWQsIFwiY2VudHJhbENvbnRlbnRcIik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIFJlZ2lzdGVyIHRoZSBvcmRlciBpbiB3aGljaCB0aGlzIGNlbnRyYWwgY29udGVudCBhcHBlYXJlZCBpbiB0aGUgWE1MOlxyXG4gICAgICAgICAgbmV3Q291cnNlLmNlbnRyYWxDb250ZW50T3JkZXIucHVzaChuZXdDZW50cmFsQ29udGVudC5pZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBjciBvZiBjLmtub3dsZWRnZVJlcXVpcmVtZW50cykge1xyXG4gICAgICAgICAgbGV0IG5ld0tub3dsZWRnZVJlcXVpcmVtZW50ID0ga25vd2xlZGdlUmVxdWlyZW1lbnRzLmZpbHRlcihrciA9PiBrci5uYW1lID09PSBjci5odG1sICYmIGtyLmdyYWRlU3RlcCA9PT0gY3IuZ3JhZGVTdGVwKVswXTtcclxuICAgICAgICAgIGlmICghbmV3S25vd2xlZGdlUmVxdWlyZW1lbnQpIHtcclxuICAgICAgICAgICAgbmV3S25vd2xlZGdlUmVxdWlyZW1lbnQgPSB7XHJcbiAgICAgICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICAgICAgICBkYXRlVGltZTogY3QoKSxcclxuICAgICAgICAgICAgICBuYW1lOiBjci5odG1sLFxyXG4gICAgICAgICAgICAgIGdyYWRlU3RlcDogY3IuZ3JhZGVTdGVwLFxyXG4gICAgICAgICAgICAgIGFjbDogW1wicm9sZTpVU0VSOlJcIl1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGtub3dsZWRnZVJlcXVpcmVtZW50cy5wdXNoKG5ld0tub3dsZWRnZVJlcXVpcmVtZW50KTtcclxuXHJcbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgY2hhbmdlOiBcIk55dHQga3Vuc2thcHNrcmF2IGbDtnIgYmV0eWdldCBcIiArIGNyLmdyYWRlU3RlcCxcclxuICAgICAgICAgICAgICBjb250ZW50OiBjci5odG1sLFxyXG4gICAgICAgICAgICAgIG11dGF0aW9uczogciA9PiB7XHJcbiAgICAgICAgICAgICAgICByLmFkZChcImtub3dsZWRnZS1yZXF1aXJlbWVudHNcIiwgbmV3S25vd2xlZGdlUmVxdWlyZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgci5saW5rKFwiY291cnNlc1wiLCBuZXdDb3Vyc2UuaWQsIFwia25vd2xlZGdlLXJlcXVpcmVtZW50c1wiLCBuZXdLbm93bGVkZ2VSZXF1aXJlbWVudC5pZCwgXCJrbm93bGVkZ2VSZXF1aXJlbWVudHNcIik7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNoYW5nZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgbXV0YXRpb25zOiByID0+IHtcclxuICAgICAgICAgICAgICAgIHIubGluayhcImNvdXJzZXNcIiwgbmV3Q291cnNlLmlkLCBcImtub3dsZWRnZS1yZXF1aXJlbWVudHNcIiwgbmV3S25vd2xlZGdlUmVxdWlyZW1lbnQuaWQsIFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIFJlZ2lzdGVyIHRoZSBvcmRlciBpbiB3aGljaCB0aGlzIGtub3dsZWRnZSByZXF1aXJlbWVudCBhcHBlYXJlZCBpbiB0aGUgWE1MOlxyXG4gICAgICAgICAgbmV3Q291cnNlLmtub3dsZWRnZVJlcXVpcmVtZW50c09yZGVyLnB1c2gobmV3S25vd2xlZGdlUmVxdWlyZW1lbnQuaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBCdWlsZCBrbm93bGVkZ2UgbWF0cml4XHJcblxyXG4gICAgICAgIC8vIExpbmsgZGlyZWN0bHkgZnJvbSBjb3Vyc2UgdGVtcGxhdGUgdG8gYWxsIGFiaWxpdGllcyB0aGF0IHRoZSBzdWJqZWN0IGhhczpcclxuICAgICAgICBmb3IgKGNvbnN0IGEgb2Ygc3ViamVjdEFiaWxpdGllcykge1xyXG4gICAgICAgICAgY2hhbmdlcy5wdXNoKHtcclxuICAgICAgICAgICAgbXV0YXRpb25zOiByID0+IHtcclxuICAgICAgICAgICAgICByLmxpbmsoXCJjb3Vyc2VzXCIsIG5ld0NvdXJzZS5pZCwgXCJhYmlsaXRpZXNcIiwgYS5pZCwgXCJhYmlsaXRpZXNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge2NoYW5nZXMsIHN1YmplY3RUb0ltcG9ydH07XHJcbiAgfVxyXG5cclxuICBjYW5jZWwoKSB7XHJcbiAgICB0aGlzLnByb3BzLm9uQ2FuY2VsKCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBpbXBvcnQoKSB7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgaXNXb3JraW5nOiB0cnVlLCBpc0ltcG9ydGluZzogdHJ1ZSB9KTtcclxuICAgIGNvbnN0IGFsbE11dGF0aW9ucyA9IHRoaXMuc3RhdGUuY2hhbmdlcy5tYXAoY2hhbmdlID0+IGNoYW5nZS5tdXRhdGlvbnMpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQuZG8ociA9PiB7XHJcbiAgICAgICAgYWxsTXV0YXRpb25zLmZvckVhY2gobXV0ID0+IG11dChyKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBmaW5hbGx5IHtcclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzV29ya2luZzogZmFsc2UsIGlzSW1wb3J0aW5nOiBmYWxzZSB9KTtcclxuICAgIH1cclxuICAgIHRoaXMucHJvcHMub25JbXBvcnRTdWNjZXNzKHRoaXMucHJvcHMuc3ViamVjdC5uYW1lKTtcclxuICB9XHJcblxyXG4gIGZpeEwoaHRtbDogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gaHRtbDsvLy5yZXBsYWNlKCc8bCBmcm9tYXQ9XCJPTFwiPicpXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7c3ViamVjdFRvSW1wb3J0fSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB7c3ViamVjdH0gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIDxkaXY+PGgxPntMYFVwcGxhZGRhdCDDhG1uZSAke3N1YmplY3RUb0ltcG9ydCA/IHN1YmplY3RUb0ltcG9ydC5uYW1lIDogJyd9YH08L2gxPlxyXG4gICAgICB7dGhpcy5zdGF0ZS5lcnJvciA/IDxwPkZlbDoge3RoaXMuc3RhdGUuZXJyb3J9PC9wPiA6XHJcbiAgICAgICB0aGlzLnN0YXRlLmlzV29ya2luZyA/IDxwPkFyYmV0YXIuLi48L3A+IDpcclxuICAgICAgIHRoaXMuc3RhdGUuaXNJbXBvcnRpbmcgPyA8cD5JbXBvcnRlcmFyLi4uPC9wPiA6XHJcbiAgICAgICB0aGlzLnN0YXRlLmNoYW5nZXMuZXZlcnkoYyA9PiAhYy5jaGFuZ2UpID8gLy8gSW5nYSDDpG5kcmluZ2FyIGF0dCB2aXNhIChiYXJhIHBzZXVkby3DpG5kcmluZ2FyKVxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxwPkt1bmRlIGludGUgZmlubmEgbsOlZ3JhIGbDtnLDpG5kcmluZ2FyIGZyw6VuIGJlZmludGxpZ3QgZGF0YS4gS2xpY2thIE9LIGbDtnIgYXR0IGF2YnJ5dGEgb2NoIMOldGVyZ8OlLjwvcD5cclxuICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuY2FuY2VsKCl9PiBPSyA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+IDpcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgPHRhYmxlIHN0eWxlPXt7Ym9yZGVyOiBcIjFweCBzb2xpZCBncmF5XCIsIHBhZGRpbmc6IFwiMnB4XCIgfX0+PHRoZWFkPjx0cj5cclxuICAgICAgICAgIDx0aCBjb2xTcGFuPXsyfT5HcmFuc2tuaW5nIGF2IMOkbmRyaW5nYXIgaSBncnVuZC1kYXRhPC90aD5cclxuICAgICAgICA8L3RyPjx0cj5cclxuICAgICAgICAgICAgPHRoPsOEbmRyaW5nPC90aD5cclxuICAgICAgICAgICAgPHRoPklubmVow6VsbDwvdGg+XHJcbiAgICAgICAgICA8L3RyPjwvdGhlYWQ+PHRib2R5PlxyXG4gICAgICAgICAgICB7dGhpcy5zdGF0ZS5jaGFuZ2VzLmZpbHRlcihjaGFuZ2UgPT4gY2hhbmdlLmNoYW5nZSkubWFwKChjaGFuZ2UsaSkgPT4gPHRyIGtleT17aX0+XHJcbiAgICAgICAgICAgICAgPHRkIHN0eWxlPXt7cGFkZGluZzogXCIycHhcIn19PntjaGFuZ2UuY2hhbmdlfTwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkIHN0eWxlPXt7cGFkZGluZzogXCIycHhcIn19IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogY2hhbmdlLmNvbnRlbnQgfX0gLz5cclxuICAgICAgICAgICAgPC90cj4pfVxyXG4gICAgICAgICAgPC90Ym9keT48L3RhYmxlPlxyXG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5jYW5jZWwoKX0gZGlzYWJsZWQ9e3RoaXMuc3RhdGUuaXNJbXBvcnRpbmd9PkF2YnJ5dDwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5pbXBvcnQoKX0gZGlzYWJsZWQ9e3RoaXMuc3RhdGUuaXNJbXBvcnRpbmd9PkltcG9ydGVyYTwvYnV0dG9uPlxyXG4gICAgICAgIDxiciAvPlxyXG4gICAgICAgIDwvZGl2Pn0gXHJcbiAgICAgIDxidXR0b25cclxuICAgICAgICBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlKHsgc2hvd0Z1bGxUZXh0OiAhdGhpcy5zdGF0ZS5zaG93RnVsbFRleHQgfSl9PlxyXG4gICAgICAgIHt0aGlzLnN0YXRlLnNob3dGdWxsVGV4dCA/XHJcbiAgICAgICAgICBMYETDtmxqIG5lZGFuYCA6XHJcbiAgICAgICAgICBMYFZpc2EgaGVsYSB0ZXh0ZW4gZnLDpW4gU2tvbHZlcmtldGB9XHJcbiAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgey8qIFRoZSB0YWJsZSBiZWxvdyBpcyBOT1QganVzdCBmb3Igc2hvdyFcclxuICAgICAgICAgIEZ1bmN0aW9uYWxpdHkgaXMgZGVwZW5kZW50IG9uIGl0cyBleGlzdGVuY2UgZm9yIGltcG9ydGluZyBzdHVmZiB1c2luZyBqUXVlcnkgdG8gY2hlcnJ5LXBpY2sgZGF0YS4gKi99ICAgICAgICAgIFxyXG4gICAgICA8dGFibGUgc3R5bGU9e3sgZGlzcGxheTogdGhpcy5zdGF0ZS5zaG93RnVsbFRleHQgPyAnJyA6ICdub25lJyB9fT48dGJvZHk+PHRyPlxyXG4gICAgICAgIDx0aD5cclxuICAgICAgICAgIE5hbW5cclxuICAgICAgICA8L3RoPlxyXG4gICAgICAgIDx0ZD5cclxuICAgICAgICAgIHtzdWJqZWN0Lm5hbWV9XHJcbiAgICAgICAgPC90ZD5cclxuICAgICAgPC90cj48dHI+XHJcbiAgICAgICAgICA8dGg+XHJcbiAgICAgICAgICAgIMOEbW5lc2tvZFxyXG4gICAgICAgICAgPC90aD5cclxuICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAge3N1YmplY3QuY29kZX1cclxuICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgPC90cj48dHI+XHJcbiAgICAgICAgICA8dGg+XHJcbiAgICAgICAgICAgIFN5ZnRlXHJcbiAgICAgICAgICA8L3RoPlxyXG4gICAgICAgICAgPHRkIHJlZj17ZWxlbSA9PiB0aGlzLnB1cnBvc2VFbGVtID0gZWxlbX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmZpeEwoc3ViamVjdC5wdXJwb3NlKSB9fSAvPlxyXG4gICAgICAgIDwvdHI+PHRyPlxyXG4gICAgICAgICAgPHRoPlxyXG4gICAgICAgICAgICBLdXJzZXJcclxuICAgICAgICAgIDwvdGg+XHJcbiAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgIHtzdWJqZWN0LmNvdXJzZXMubWFwKGNvdXJzZSA9PiA8dGFibGUga2V5PXtjb3Vyc2UuY29kZX0gcmVmPXtlbGVtID0+IHRoaXMuY291cnNlc0VsZW1zW2NvdXJzZS5jb2RlXSA9IHsgY291cnNlLCBlbGVtIH19Pjx0Ym9keT5cclxuICAgICAgICAgICAgICA8dHI+PHRoPkt1cnNlbnMgbmFtbjwvdGg+PHRkPntjb3Vyc2UubmFtZX08L3RkPjwvdHI+XHJcbiAgICAgICAgICAgICAgPHRyPjx0aD5LdXJza29kPC90aD48dGQ+e2NvdXJzZS5jb2RlfTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICA8dHI+PHRoPlBvw6RuZzwvdGg+PHRkPntjb3Vyc2UucG9pbnRzfTwvdGQ+PC90cj5cclxuICAgICAgICAgICAgICA8dHI+PHRoPkNlbnRyYWx0IGlubmVow6VsbDwvdGg+PHRkIHJlZj17ZWxlbSA9PiB0aGlzLmNlbnRyYWxDb250ZW50RWxlbXMucHVzaChlbGVtKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmZpeEwoY291cnNlLmNlbnRyYWxDb250ZW50KSB9fSAvPjwvdHI+XHJcbiAgICAgICAgICAgICAge2NvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLnNvbWUoa3IgPT4gIWtyLmdyYWRlU3RlcCkgPyA8dHI+XHJcbiAgICAgICAgICAgICAgICA8dGg+S3Vuc2thcHNrcmF2IHV0YW4gYmV0eWdzw6R0dG5pbmc8L3RoPlxyXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImdyYWRlLXN0ZXAtbm9uZVwiIHJlZj17ZWxlbSA9PiB0aGlzLmtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMucHVzaChlbGVtKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmZpeEwoY291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuZmlsdGVyKHIgPT4gIXIuZ3JhZGVTdGVwKS5tYXAoa3IgPT4ga3IudGV4dCkuam9pbignJykpIH19IC8+XHJcbiAgICAgICAgICAgICAgPC90cj4gOiB1bmRlZmluZWR9XHJcblxyXG4gICAgICAgICAgICAgIHtjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5zb21lKGtyID0+IGtyLmdyYWRlU3RlcCA9PT0nRScpID8gPHRyPlxyXG4gICAgICAgICAgICAgICAgPHRoPkt1bnNrYXBza3JhdiBCZXR5ZyBFPC90aD5cclxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJncmFkZS1zdGVwLUVcIiByZWY9e2VsZW0gPT4gdGhpcy5rbm93bGVkZ2VSZXF1aXJlbWVudEVsZW1zLnB1c2goZWxlbSl9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7IF9faHRtbDogdGhpcy5maXhMKGNvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLmZpbHRlcihyID0+IHIuZ3JhZGVTdGVwID09PSAnRScpLm1hcChrciA9PiBrci50ZXh0KS5qb2luKCcnKSkgfX0gLz5cclxuICAgICAgICAgICAgICA8L3RyPiA6IHVuZGVmaW5lZH1cclxuXHJcbiAgICAgICAgICAgICAge2NvdXJzZS5rbm93bmxlZGdlUmVxdWlyZW1lbnRzLnNvbWUoa3IgPT4ga3IuZ3JhZGVTdGVwID09PSdDJykgPyA8dHI+XHJcbiAgICAgICAgICAgICAgICA8dGg+S3Vuc2thcHNrcmF2IEJldHlnIEM8L3RoPlxyXG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImdyYWRlLXN0ZXAtQ1wiIHJlZj17ZWxlbSA9PiB0aGlzLmtub3dsZWRnZVJlcXVpcmVtZW50RWxlbXMucHVzaChlbGVtKX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiB0aGlzLmZpeEwoY291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuZmlsdGVyKHIgPT4gci5ncmFkZVN0ZXAgPT09ICdDJykubWFwKGtyID0+IGtyLnRleHQpLmpvaW4oJycpKSB9fSAvPlxyXG4gICAgICAgICAgICAgIDwvdHI+IDogdW5kZWZpbmVkfVxyXG5cclxuICAgICAgICAgICAgICB7Y291cnNlLmtub3dubGVkZ2VSZXF1aXJlbWVudHMuc29tZShrciA9PiBrci5ncmFkZVN0ZXAgPT09J0EnKSA/IDx0cj5cclxuICAgICAgICAgICAgICAgIDx0aD5LdW5za2Fwc2tyYXYgQmV0eWcgQTwvdGg+XHJcbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZ3JhZGUtc3RlcC1BXCIgcmVmPXtlbGVtID0+IHRoaXMua25vd2xlZGdlUmVxdWlyZW1lbnRFbGVtcy5wdXNoKGVsZW0pfSBkYW5nZXJvdXNseVNldElubmVySFRNTD17eyBfX2h0bWw6IHRoaXMuZml4TChjb3Vyc2Uua25vd25sZWRnZVJlcXVpcmVtZW50cy5maWx0ZXIociA9PiByLmdyYWRlU3RlcCA9PT0gJ0EnKS5tYXAoa3IgPT4ga3IudGV4dCkuam9pbignJykpIH19IC8+XHJcbiAgICAgICAgICAgICAgPC90cj4gOiB1bmRlZmluZWR9XHJcblxyXG4gICAgICAgICAgICA8L3Rib2R5PjwvdGFibGU+KX1cclxuICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgPC90cj5cclxuICAgICAgPC90Ym9keT48L3RhYmxlPlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCwgc2hvd0luZm8sIGNvbXBhcmVQcm9wLCBhcnJheVRvTG9va3VwLCBmbGF0dGVuIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgZW52IGZyb20gJy4uLy4uLy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCB7IFNrb2x2ZXJrZXRTdWJqZWN0LCBwYXJzZVNrb2x2ZXJrZXRZZWFycywgU2tvbHZlcmtldENvdXJzZSB9IGZyb20gJy4vc2tvbHZlcmtldC1zdWJqZWN0JztcclxuaW1wb3J0IHsgVXBsb2FkZWRTdWJqZWN0IH0gZnJvbSAnLi91cGxvYWRlZC1zdWJqZWN0JztcclxuZXhwb3J0IHsgU2hvd1N1YmplY3QgfSBmcm9tICcuL3Nob3ctc3ViamVjdCc7XHJcbmltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluaywgUmVkaXJlY3QgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgcmVhZEJsb2JBc1RleHQsIGFsbG93Q29weSB9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBDb3Vyc2VCYW5uZXIgfSBmcm9tIFwiLi4vY291cnNlcy9jb3Vyc2UtYmFubmVyXCI7XHJcbmltcG9ydCB7IFNwaW5uZXIgfSBmcm9tIFwiLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBsaW5rUHJlZml4OiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgZ3ltbmFzaXVtU3ViamVjdHM6IFN1YmplY3RbXTtcclxuICBwcmltYXJ5U2Nob29sU3ViamVjdHM6IFN1YmplY3RbXTtcclxuICBpc0xpc3RpbmdTdWJqZWN0czogYm9vbGVhbjtcclxuICB1cGxvYWRlZFN1YmplY3Q6IFNrb2x2ZXJrZXRTdWJqZWN0IHwgbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFN1YmplY3RzSW5uZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGlzTGlzdGluZ1N1YmplY3RzOiB0cnVlLFxyXG4gICAgICBneW1uYXNpdW1TdWJqZWN0czogW10sXHJcbiAgICAgIHByaW1hcnlTY2hvb2xTdWJqZWN0czogW10sXHJcbiAgICAgIHVwbG9hZGVkU3ViamVjdDogbnVsbFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcclxuICAgIHRoaXMubG9hZCgpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZCgpIHtcclxuICAgIGNvbnN0IHN1YmplY3RzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTdWJqZWN0PihcInN1YmplY3RzXCIpO1xyXG4gICAgc3ViamVjdHMuc29ydChjb21wYXJlUHJvcChcIm5hbWVcIikpO1xyXG4gICAgY29uc3QgZ3ltbmFzaXVtU3ViamVjdHMgPSBzdWJqZWN0cy5maWx0ZXIocyA9PiBzLnNjaG9vbFR5cGUgIT09ICdwcmltYXJ5Jyk7XHJcbiAgICBjb25zdCBwcmltYXJ5U2Nob29sU3ViamVjdHMgPSBzdWJqZWN0cy5maWx0ZXIocyA9PiBzLnNjaG9vbFR5cGUgPT09ICdwcmltYXJ5Jyk7XHJcbiAgICB0aGlzLnNldFN0YXRlKHsgZ3ltbmFzaXVtU3ViamVjdHMsIHByaW1hcnlTY2hvb2xTdWJqZWN0cywgaXNMaXN0aW5nU3ViamVjdHM6IGZhbHNlIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgaGFuZGxlRmlsZVNlbGVjdChldjogUmVhY3QuRHJhZ0V2ZW50PEhUTUxEaXZFbGVtZW50Pikge1xyXG4gICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgZmlsZXMgPSBldi5kYXRhVHJhbnNmZXIuZmlsZXM7XHJcbiAgICBjb25zdCB4bWwgPSBhd2FpdCByZWFkQmxvYkFzVGV4dChmaWxlc1swXSk7XHJcbiAgICBjb25zdCBkb2MgPSAkKCQucGFyc2VYTUwoeG1sKSk7XHJcbiAgICBjb25zdCB0eXBlT2ZTY2hvb2xpbmcgPVxyXG4gICAgICBkb2MuZmluZChcInN1YmplY3Q+b3JpZ2luYXRvclR5cGVPZlNjaG9vbGluZ1wiKS50ZXh0KCkudHJpbSgpIHx8XHJcbiAgICAgIGRvYy5maW5kKFwic3ViamVjdD50eXBlT2ZTY2hvb2xpbmdcIikudGV4dCgpLnRyaW0oKTtcclxuICAgIGNvbnN0IHNjaG9vbFR5cGU6ICdwcmltYXJ5JyB8ICdneW1uYXNpdW0nID0gdHlwZU9mU2Nob29saW5nID09PSBcIkNPTVBVTFNPUllfU0NIT09MXCIgP1xyXG4gICAgICAncHJpbWFyeScgOlxyXG4gICAgICB0eXBlT2ZTY2hvb2xpbmcgPT09IFwiVVBQRVJfU0VDT05EQVJZX0VEVUNBVElPTlwiID9cclxuICAgICAgICAnZ3ltbmFzaXVtJyA6XHJcbiAgICAgICAgbnVsbDtcclxuXHJcbiAgICBpZiAoc2Nob29sVHlwZSA9PT0gJ2d5bW5hc2l1bScpIHtcclxuICAgICAgY29uc3QgbW9kZWw6IFNrb2x2ZXJrZXRTdWJqZWN0ID0ge1xyXG4gICAgICAgIG5hbWU6IGRvYy5maW5kKFwic3ViamVjdD5uYW1lXCIpLnRleHQoKS50cmltKCksXHJcbiAgICAgICAgY29kZTogZG9jLmZpbmQoXCJzdWJqZWN0PmNvZGVcIikudGV4dCgpLnRyaW0oKSxcclxuICAgICAgICBwdXJwb3NlOiBkb2MuZmluZChcInN1YmplY3Q+cHVycG9zZVwiKS50ZXh0KCkudHJpbSgpLFxyXG4gICAgICAgIGNvdXJzZXM6IFtdLFxyXG4gICAgICAgIHNjaG9vbFR5cGU6ICdneW1uYXNpdW0nXHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGNvdXJzZXMgPSBkb2MuZmluZChcInN1YmplY3Q+Y291cnNlc1wiKTtcclxuICAgICAgZm9yIChsZXQgaT0wOyBpPGNvdXJzZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICBjb25zdCBjb3Vyc2UgPSAkKGNvdXJzZXNbaV0pO1xyXG4gICAgICAgIGNvbnN0IGtub3dubGVkZ2VSZXF1aXJlbWVudHMgPSBbXS5zbGljZS5jYWxsKGNvdXJzZS5maW5kKFwia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIpKVxyXG4gICAgICAgICAgLm1hcChyID0+ICh7XHJcbiAgICAgICAgICAgIGdyYWRlU3RlcDogJChyKS5maW5kKCdncmFkZVN0ZXAnKS50ZXh0KCkudHJpbSgpLFxyXG4gICAgICAgICAgICB0ZXh0OiAkKHIpLmZpbmQoJ3RleHQnKS50ZXh0KCkudHJpbSgpXHJcbiAgICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIG1vZGVsLmNvdXJzZXMucHVzaCh7XHJcbiAgICAgICAgICBuYW1lOiBjb3Vyc2UuZmluZChcIm5hbWVcIikudGV4dCgpLnRyaW0oKSxcclxuICAgICAgICAgIGNvZGU6IGNvdXJzZS5maW5kKFwiY29kZVwiKS50ZXh0KCkudHJpbSgpLFxyXG4gICAgICAgICAgY2VudHJhbENvbnRlbnQ6IGNvdXJzZS5maW5kKFwiY2VudHJhbENvbnRlbnRcIikudGV4dCgpLnRyaW0oKSxcclxuICAgICAgICAgIHBvaW50czogcGFyc2VJbnQoY291cnNlLmZpbmQoXCJwb2ludFwiKS50ZXh0KCkudHJpbSgpKSxcclxuICAgICAgICAgIGtub3dubGVkZ2VSZXF1aXJlbWVudHMsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5zZXRTdGF0ZSh7dXBsb2FkZWRTdWJqZWN0OiBtb2RlbH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgY2VudHJhbENvbnRlbnRzID0gZmxhdHRlbihBcnJheS5mcm9tKGRvYy5maW5kKFwic3ViamVjdD5jZW50cmFsQ29udGVudFwiKSlcclxuICAgICAgICAubWFwKGNjID0+IHtcclxuICAgICAgICAgIGNvbnN0IHllYXIgPSAkKGNjKS5maW5kKCd5ZWFyJykudGV4dCgpLnRyaW0oKSBhcyBzdHJpbmc7XHJcbiAgICAgICAgICBjb25zdCB0eXBlT2ZDZW50cmFsQ29udGVudCA9ICQoY2MpLmZpbmQoJ3R5cGVPZkNlbnRyYWxDb250ZW50JykudGV4dCgpLnRyaW0oKSBhcyBzdHJpbmc7XHJcblxyXG4gICAgICAgICAgaWYgKHR5cGVPZkNlbnRyYWxDb250ZW50KSB7XHJcbiAgICAgICAgICAgIC8vIERvIG5vdCB5ZXQgc3VwcG9ydCBtdWx0aXBsZSB0eXBlcyBvZiBjZW50cmFsIGNvbnRlbnQuXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvciAoTGDDhG1uZXQgaW5uZWjDpWxsZXIgZmxlcmEgcGFyYWxsZWxsYSB0eXBlciBhdiBjZW50cmFsdCBpbm5laMOlbGwuIERldHRhIHN0w7ZkcyDDpG5udSBpbnRlLmApO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnN0IHN0YWRpdW1zID0gcGFyc2VTa29sdmVya2V0WWVhcnMoeWVhcik7XHJcbiAgICAgICAgICBjb25zdCBjZW50cmFsQ29udGVudHNGb3JFYWNoU3RhZGl1bSA9IHN0YWRpdW1zLm1hcCggc3RhZGl1bSA9PiAoe1xyXG4gICAgICAgICAgICB5ZWFyOiBzdGFkaXVtLFxyXG4gICAgICAgICAgICB0ZXh0OiAkKGNjKS5maW5kKCd0ZXh0JykudGV4dCgpLnRyaW0oKSBhcyBzdHJpbmdcclxuICAgICAgICAgIH0pKTtcclxuICAgICAgICAgIHJldHVybiBjZW50cmFsQ29udGVudHNGb3JFYWNoU3RhZGl1bTtcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICBjb25zdCBrbm93bGVkZ2VSZXF1aXJlbWVudHMgPSBmbGF0dGVuKEFycmF5LmZyb20oZG9jLmZpbmQoXCJzdWJqZWN0Pmtub3dsZWRnZVJlcXVpcmVtZW50XCIpKVxyXG4gICAgICAgIC5tYXAoa3IgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeWVhciA9ICQoa3IpLmZpbmQoJ3llYXInKS50ZXh0KCkudHJpbSgpO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHR5cGVPZlJlcXVpcmVtZW50ID0gJChrcikuZmluZCgndHlwZU9mUmVxdWlyZW1lbnQnKS50ZXh0KCkudHJpbSgpIGFzIHN0cmluZztcclxuICAgICAgICAgIGlmICh0eXBlT2ZSZXF1aXJlbWVudCkge1xyXG4gICAgICAgICAgICAvLyBEbyBub3QgeWV0IHN1cHBvcnQgbXVsdGlwbGUgdHlwZXMgb2Yga25vd2xlZGdlIHJlcXVpcmVtZW50LlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IgKExgw4RtbmV0IGlubmVow6VsbGVyIGZsZXJhIHBhcmFsbGVsbGEgdHlwZXIgYXYga3Vuc2thcHNrcmF2LiBEZXR0YSBzdMO2ZHMgw6RubnUgaW50ZS5gKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gcGFyc2VTa29sdmVya2V0WWVhcnMoeWVhcikubWFwKHN0YWRpdW0gPT4gKHtcclxuICAgICAgICAgICAgeWVhcjogc3RhZGl1bSxcclxuICAgICAgICAgICAgdGV4dDogJChrcikuZmluZCgndGV4dCcpLnRleHQoKS50cmltKCksXHJcbiAgICAgICAgICAgIGdyYWRlU3RlcDogJChrcikuZmluZCgnZ3JhZGVTdGVwJykudGV4dCgpLnRyaW0oKVxyXG4gICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgXHJcbiAgICAgIGNvbnN0IGNlbnRyYWxDb250ZW50c0J5U3RhZGl1bSA9IGFycmF5VG9Mb29rdXAoY2VudHJhbENvbnRlbnRzLCBjYyA9PiBjYy55ZWFyKTtcclxuICAgICAgY29uc3Qga25vd2xlZGdlUmVxdWlyZW1lbnRzQnlTdGFkaXVtID0gYXJyYXlUb0xvb2t1cChrbm93bGVkZ2VSZXF1aXJlbWVudHMsIGtyID0+IGtyLnllYXIpO1xyXG5cclxuICAgICAgY29uc3Qgc3ViamVjdE5hbWUgPSBkb2MuZmluZChcInN1YmplY3Q+bmFtZVwiKS50ZXh0KCkudHJpbSgpO1xyXG4gICAgICBjb25zdCBzdWJqZWN0Q29kZSA9IGRvYy5maW5kKFwic3ViamVjdD5jb2RlXCIpLnRleHQoKS50cmltKCk7XHJcbiAgICAgIGNvbnN0IHN1YmplY3RQdXJwb3NlID0gZG9jLmZpbmQoXCJzdWJqZWN0PnB1cnBvc2VcIikudGV4dCgpLnRyaW0oKTtcclxuICAgICAgLypcclxuXHJcbiAgICAgICAgUHJvYmxlbWF0aWMgd2hlbiB0aGUgZm9sbG93aW5nIHRhZ3MgYXJlIHByZXNlbnQ6XHJcblxyXG4gICAgICAgIDx0eXBlT2ZSZXF1aXJlbWVudD5cclxuICAgICAgICAgIFdJVEhJTl9TVFVERU5UX0NIT0lDRV9DSElORVNFXHJcbiAgICAgICAgPC90eXBlT2ZSZXF1aXJlbWVudD5cclxuICAgICAgICA8dHlwZU9mQ2VudHJhbENvbnRlbnQ+XHJcbiAgICAgICAgICBXSVRISU5fTEFOR1VBR0VfQ0hPSUNFXHJcbiAgICAgICAgPC90eXBlT2ZDZW50cmFsQ29udGVudD5cclxuICAgICAgKi9cclxuXHJcbiAgICAgIGNvbnN0IGNvdXJzZXNCeVN0YWRpdW06IFNrb2x2ZXJrZXRDb3Vyc2VbXSA9IChbJzEtMycsJzQtNicsJzctOSddIGFzIEFycmF5PCcxLTMnIHwgJzQtNicgfCAnNy05Jz4pXHJcbiAgICAgICAgLm1hcChzdGFkaXVtID0+ICh7XHJcbiAgICAgICAgICBuYW1lOiBzdWJqZWN0TmFtZSsnICcrc3RhZGl1bSxcclxuICAgICAgICAgIGNvZGU6IHN1YmplY3RDb2RlKyd8JytzdGFkaXVtLFxyXG4gICAgICAgICAgcG9pbnRzOiAwLFxyXG4gICAgICAgICAgeWVhcjogc3RhZGl1bSxcclxuICAgICAgICAgIGNlbnRyYWxDb250ZW50OiAoY2VudHJhbENvbnRlbnRzQnlTdGFkaXVtW3N0YWRpdW1dfHxbXSkubWFwKGNjID0+IGNjLnRleHQpLmpvaW4oJ1xcbicpLFxyXG4gICAgICAgICAga25vd25sZWRnZVJlcXVpcmVtZW50czogKGtub3dsZWRnZVJlcXVpcmVtZW50c0J5U3RhZGl1bVtzdGFkaXVtXXx8W10pLm1hcCgoe2dyYWRlU3RlcCwgdGV4dH0pID0+ICh7Z3JhZGVTdGVwLCB0ZXh0fSkpXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgY29uc3QgbW9kZWw6IFNrb2x2ZXJrZXRTdWJqZWN0ID0ge1xyXG4gICAgICAgIG5hbWU6IHN1YmplY3ROYW1lLFxyXG4gICAgICAgIGNvZGU6IHN1YmplY3RDb2RlLFxyXG4gICAgICAgIHB1cnBvc2U6IHN1YmplY3RQdXJwb3NlLFxyXG4gICAgICAgIHNjaG9vbFR5cGU6ICdwcmltYXJ5JyxcclxuICAgICAgICBjb3Vyc2VzOiBjb3Vyc2VzQnlTdGFkaXVtXHJcbiAgICAgIH07XHJcbiAgICAgIHRoaXMuc2V0U3RhdGUoe3VwbG9hZGVkU3ViamVjdDogbW9kZWx9KTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICB9XHJcblxyXG4gIG9uSW1wb3J0U3VjY2VzcyhzdWJqZWN0KSB7XHJcbiAgICAgc2hvd0luZm8oTGBJbXBvcnRlbiBhdiAke3N1YmplY3R9IGx5Y2thZGVzYCk7XHJcbiAgICAgdGhpcy5zZXRTdGF0ZSh7dXBsb2FkZWRTdWJqZWN0OiBudWxsfSk7XHJcbiAgICAgdGhpcy5sb2FkKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7bGlua1ByZWZpeH0gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgIHt0aGlzLnN0YXRlLnVwbG9hZGVkU3ViamVjdCA/XHJcbiAgICAgIDxVcGxvYWRlZFN1YmplY3RcclxuICAgICAgICBvbkNhbmNlbD17KCk9PnRoaXMuc2V0U3RhdGUoe3VwbG9hZGVkU3ViamVjdDogbnVsbH0pfVxyXG4gICAgICAgIG9uSW1wb3J0U3VjY2Vzcz17c3ViamVjdCA9PiB0aGlzLm9uSW1wb3J0U3VjY2VzcyhzdWJqZWN0KX1cclxuICAgICAgICBzdWJqZWN0PXt0aGlzLnN0YXRlLnVwbG9hZGVkU3ViamVjdH0gLz5cclxuICAgIDogdGhpcy5zdGF0ZS5pc0xpc3RpbmdTdWJqZWN0cyA/XHJcbiAgICAgIDxkaXY+PHA+PFNwaW5uZXIvPlZhciBnb2QgdsOkbnRhIG1lZGFuIMOkbW5lbiBow6RtdGFzLi4uPC9wPjwvZGl2PiA6XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGgyPntMYEd5bW5hc2llw6RtbmVuYH08L2gyPlxyXG4gICAgICAgIDx1bD57dGhpcy5zdGF0ZS5neW1uYXNpdW1TdWJqZWN0cy5tYXAocyA9PlxyXG4gICAgICAgICAgPGxpIGtleT17cy5pZH0gY2xhc3NOYW1lPXtzLnB1Ymxpc2hhYmxlID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCJ9PlxyXG4gICAgICAgICAgICA8TGluayB0bz17bGlua1ByZWZpeCArIHMuaWR9PntzLm5hbWV9PC9MaW5rPlxyXG4gICAgICAgICAgPC9saT4pfVxyXG4gICAgICAgIDwvdWw+XHJcbiAgICAgICAgPGgyPntMYEdydW5kc2tvbGXDpG1uZW5gfTwvaDI+XHJcbiAgICAgICAgPHVsPnt0aGlzLnN0YXRlLnByaW1hcnlTY2hvb2xTdWJqZWN0cy5tYXAocyA9PlxyXG4gICAgICAgICAgPGxpIGtleT17cy5pZH0gY2xhc3NOYW1lPXtzLnB1Ymxpc2hhYmxlID8gXCJjb21wbGV0ZVwiIDogXCJpbmNvbXBsZXRlXCJ9PlxyXG4gICAgICAgICAgICA8TGluayB0bz17bGlua1ByZWZpeCArIHMuaWR9PntzLm5hbWV9PC9MaW5rPlxyXG4gICAgICAgICAgPC9saT4pfVxyXG4gICAgICAgIDwvdWw+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcm9wLXpvbmVcIiBvbkRyYWdPdmVyPXthbGxvd0NvcHl9IG9uRHJvcD17ZXY9PnRoaXMuaGFuZGxlRmlsZVNlbGVjdChldil9PlxyXG4gICAgICAgICAgRHJvcHBhIFN1YmplY3QtZmlsIGjDpHIgZnLDpW4gc2tvbHZlcmtldCAoSMOkbXRhcyBmcsOlbiA8YSBocmVmPVwiaHR0cDovL29wZW5kYXRhLnNrb2x2ZXJrZXQuc2VcIiB0YXJnZXQ9XCJza29sdmVya2V0XCI+b3BlbmRhdGEuc2tvbHZlcmtldC5zZTwvYT4pXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgfTwvZGl2PlxyXG4gIH1cclxufVxyXG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vZW4tYXVcIjogNzIsXG5cdFwiLi9lbi1hdS5qc1wiOiA3Mixcblx0XCIuL2VuLWNhXCI6IDczLFxuXHRcIi4vZW4tY2EuanNcIjogNzMsXG5cdFwiLi9lbi1nYlwiOiA3NCxcblx0XCIuL2VuLWdiLmpzXCI6IDc0LFxuXHRcIi4vZW4taWVcIjogNzUsXG5cdFwiLi9lbi1pZS5qc1wiOiA3NSxcblx0XCIuL2VuLW56XCI6IDc2LFxuXHRcIi4vZW4tbnouanNcIjogNzYsXG5cdFwiLi9zdlwiOiA3Nyxcblx0XCIuL3N2LmpzXCI6IDc3XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSB7IC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBpZDtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAxMDg7IiwiaW1wb3J0IGVudiBmcm9tICcuLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyB1c2VycyB9IGZyb20gJy4vZGF0YS91c2Vycyc7XHJcbmltcG9ydCB7IHBhcnNlUXVlcnlTdHJpbmcgfSBmcm9tICcuLi91dGlscy9xdWVyeS1zdHJpbmcnO1xyXG5cclxuY29uc3QgdXNlcm5hbWUgPSBwYXJzZVF1ZXJ5U3RyaW5nIChsb2NhdGlvbi5zZWFyY2gpLnVzZXI7XHJcbmlmICh1c2VybmFtZSkge1xyXG4gIGNvbnN0IHVzZXIgPSB1c2Vycy5maW5kKHUgPT4gdS51c2VybmFtZSA9PT0gdXNlcm5hbWUpO1xyXG4gIGlmICh1c2VyKSB7XHJcbiAgICBlbnYuY3VycmVudFVzZXIgPSB1c2VyO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgeyByb2xlLCBzY2hvb2wgfSA9IHBhcnNlUXVlcnlTdHJpbmcobG9jYXRpb24uc2VhcmNoKTtcclxuaWYgKGVudi5jdXJyZW50VXNlcikge1xyXG4gIGlmIChyb2xlKSB7XHJcbiAgICBlbnYuY3VycmVudFVzZXIucm9sZXMgPSByb2xlLnNwbGl0KCcsJyk7XHJcbiAgfVxyXG4gIGlmIChzY2hvb2wpIHtcclxuICAgIGVudi5jdXJyZW50VXNlci5zY2hvb2wgPSBzY2hvb2w7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHtFZGl0U2Nob29sfSBmcm9tICcuL2VkaXQtc2Nob29sJztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdHlwZTogJ2d5bW5hc2l1bScgfCAncHJpbWFyeSdcclxuICBmZWVkYmFja1VybDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTmV3U2Nob29sID0gKHByb3BzOiBQcm9wcyk9PjxFZGl0U2Nob29sXHJcbiAgdGl0bGU9e0xgTMOkZ2cgdGlsbCBza29sYWB9XHJcbiAgdHlwZT17cHJvcHMudHlwZX1cclxuICBmZWVkYmFja1VybD17cHJvcHMuZmVlZGJhY2tVcmx9IC8+O1xyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEwsIHNob3dJbmZvLCBjb21wYXJlUHJvcCwgYXJyYXlUb0xvb2t1cCwgZmxhdHRlbiB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgeyBTa29sdmVya2V0U3ViamVjdCwgU2tvbHZlcmtldENvdXJzZSwgcGFyc2VTa29sdmVya2V0WWVhcnMgfSBmcm9tICcuL3Nrb2x2ZXJrZXQtc3ViamVjdCc7XHJcbmltcG9ydCB7IFVwbG9hZGVkU3ViamVjdCB9IGZyb20gJy4vdXBsb2FkZWQtc3ViamVjdCc7XHJcbmV4cG9ydCB7IFNob3dTdWJqZWN0IH0gZnJvbSAnLi9zaG93LXN1YmplY3QnO1xyXG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIExpbmssIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IHJlYWRCbG9iQXNUZXh0LCBhbGxvd0NvcHkgfSBmcm9tIFwiLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4uL2NvdXJzZXMvY291cnNlLWJhbm5lclwiO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcclxuaW1wb3J0IHsgU3ViamVjdHNJbm5lciB9IGZyb20gJy4vc3ViamVjdHMtaW5uZXInO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBmZWVkYmFja1VybDogc3RyaW5nXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTdWJqZWN0cyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcz4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgaXNMaXN0aW5nU3ViamVjdHM6IHRydWUsXHJcbiAgICAgIHByaW1hcnlTY2hvb2xTdWJqZWN0czogW10sXHJcbiAgICAgIHVwbG9hZGVkU3ViamVjdDogbnVsbFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHJldHVybiA8ZGl2PjxDb3Vyc2VCYW5uZXJcclxuICAgICAgdGl0bGU9e0xgw4RtbmVuYH1cclxuICAgICAgYWN0aXZlUGFnZT1cInN1YmplY3RzXCJcclxuICAgICAgcm91dGVzPXt7ZmVlZGJhY2s6IHRoaXMucHJvcHMuZmVlZGJhY2tVcmx9fVxyXG4gICAgIC8+XHJcbiAgICAgPFN1YmplY3RzSW5uZXIgbGlua1ByZWZpeD1cIi9zdWJqZWN0cy9cIiAvPlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgU2Nob29sQ291cnNlcyB9IGZyb20gJy4uL3N1Yi1jb21wb25lbnRzL3NjaG9vbC1jb3Vyc2VzJztcclxuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGR0Rm9ybWF0IH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBEaWFsb2cgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvdXJzZS1lZGl0b3ItaG9zdCc7XHJcbmltcG9ydCB2YWxpZFVybCBmcm9tICd2YWxpZC11cmwnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICByZXNvdXJjZT86IFJlc291cmNlO1xyXG4gIHRpdGxlOiBzdHJpbmc7XHJcbiAgb25TYXZlOiAobmV3UmVzb3VyY2U6IFJlc291cmNlKSA9PiB2b2lkO1xyXG4gIG9uRGVsZXRlPzogKCk9PnZvaWQ7XHJcbn1cclxuXHJcbnR5cGUgU3RhdGUgPSBSZXNvdXJjZTtcclxuXHJcbmV4cG9ydCBjbGFzcyBFZGl0UmVzb3VyY2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IGltcGxlbWVudHMgRGlhbG9nIHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB0aGlzLnByb3BzLnJlc291cmNlIHx8IHtuYW1lOiAnJywgdXJsOiAnJ307XHJcbiAgfVxyXG5cclxuICBzYXZlKCkge1xyXG4gICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLnN0YXRlO1xyXG4gICAgaWYgKCF2YWxpZFVybC5pc1VyaShyZXNvdXJjZS51cmwpKSB0aHJvdyBuZXcgRXJyb3IoTGBBbmdpdmVuIFVSTCAnJHtyZXNvdXJjZS51cmx9JyDDpHIgb2dpbHRpZy4gU2thIGLDtnJqYSBtZWQgZXhlbXBlbHZpcyBodHRwOiwgaHR0cHM6IGVsbGVyIG1haWx0bzpgKTtcclxuICAgIHRoaXMucHJvcHMub25TYXZlKHJlc291cmNlKTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHt0aXRsZSwgb25TYXZlLCBvbkRlbGV0ZX0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgcmVzb3VyY2UgPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgaXNWYWxpZFVybCA9IHZhbGlkVXJsLmlzVXJpKHRoaXMuc3RhdGUudXJsKTtcclxuXHJcbiAgICByZXR1cm4gPGRpdj48ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICAgIDxoMj57dGl0bGV9PC9oMj5cclxuICAgICAgPGhyIC8+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+TmFtbjo8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgYXV0b0ZvY3VzXHJcbiAgICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgICBzaXplPXs1MH1cclxuICAgICAgICAgICAgdmFsdWU9e3Jlc291cmNlLm5hbWV9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtldj0+dGhpcy5zZXRTdGF0ZSh7bmFtZTogZXYudGFyZ2V0LnZhbHVlfSl9IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPkzDpG5rOjwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIFwiPlxyXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICAgIHNpemU9ezUwfVxyXG4gICAgICAgICAgICB2YWx1ZT17cmVzb3VyY2UudXJsfVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17ZXY9PnRoaXMuc2V0U3RhdGUoe3VybDogZXYudGFyZ2V0LnZhbHVlfSl9IC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3Agc3BhY2VkXCI+PC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8YnIgLz48L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxyXG4gICAgICAgIHsocmVzb3VyY2UuY3JlYXRlZERhdGUgfHwgcmVzb3VyY2UubW9kaWZpZWREYXRlKSAmJiA8ZGl2PlxyXG4gICAgICAgICAge3Jlc291cmNlLmNyZWF0ZWREYXRlICYmIDxwPlxyXG4gICAgICAgICAgICBSZXN1cnNlbi9Mw6Rua2VuIHNrYXBhZGVzIHtkdEZvcm1hdChyZXNvdXJjZS5jcmVhdGVkRGF0ZSl9IGF2IDxzdHJvbmc+e3Jlc291cmNlLmNyZWF0ZWRCeS5uYW1lfTwvc3Ryb25nPi5cclxuICAgICAgICAgIDwvcD59XHJcbiAgICAgICAgICB7cmVzb3VyY2UubW9kaWZpZWREYXRlICYmIDxwPlxyXG4gICAgICAgICAgICBSZXN1cnNlbi9Mw6Rua2VuIHJlZGlnZXJhZGVzIHNlbmFzdCB7ZHRGb3JtYXQocmVzb3VyY2UubW9kaWZpZWREYXRlKX0gYXYgPHN0cm9uZz57cmVzb3VyY2UubW9kaWZpZWRCeS5uYW1lfTwvc3Ryb25nPi5cclxuICAgICAgICAgIDwvcD59XHJcbiAgICAgICAgICA8YnIgLz48YnIvPlxyXG4gICAgICAgIDwvZGl2Pn1cclxuICAgICAgICB7b25EZWxldGUgJiYgPGRpdiB0YWJJbmRleD17Mn0gY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCk9Pm9uRGVsZXRlKCl9PlxyXG4gICAgICAgICAgVGEgYm9ydCByZXN1cnMvbMOkbmtcclxuICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgPGEgdGFiSW5kZXg9ezF9IGNsYXNzTmFtZT17XCJidG4gYnRuLWxhcmdlXCIgKyAoaXNWYWxpZFVybCA/IFwiXCIgOiBcIiBidG4taW5hY3RpdmVcIil9IG9uQ2xpY2s9e2lzVmFsaWRVcmwgJiYgKCgpID0+IG9uU2F2ZShyZXNvdXJjZSkpfT5TcGFyYTwvYT5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1Jlc291cmNlfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7TGlua30gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7SUNvdXJzZUVkaXRvckhvc3R9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcclxuaW1wb3J0IHtFZGl0UmVzb3VyY2V9IGZyb20gJy4uL21vZGFsLXBhZ2VzL2VkaXQtcmVzb3VyY2UnO1xyXG5pbXBvcnQgeyB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICByZXNvdXJjZXM6IFJlc291cmNlW107XHJcbiAgb25VcGRhdGU6IChyZXNvdXJjZXNVcGRhdGVzKSA9PiB2b2lkO1xyXG4gIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVkaXRhYmxlUmVzb3VyY2VMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlPXt9O1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qge2hvc3QsIG9uVXBkYXRlLCByZXNvdXJjZXN9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhc2tDb250YWluZXJcIj5cclxuICAgICAgICB7cmVzb3VyY2VzLm1hcCgocmVzb3VyY2UsIGlkeCkgPT4gXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIiBrZXk9e2lkeH0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiZWRpdEl0ZW1cIiBvbkNsaWNrPXsoKT0+aG9zdC5vcGVuRGlhbG9nKHtcclxuICAgICAgICAgICAgICAgIENvbXBvbmVudDogRWRpdFJlc291cmNlLFxyXG4gICAgICAgICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiUmVkaWdlcmEgcmVzdXJzXCIsXHJcbiAgICAgICAgICAgICAgICAgIHJlc291cmNlLFxyXG4gICAgICAgICAgICAgICAgICBvblNhdmU6IGVkaXRlZFJlc291cmNlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkUmVzb3VyY2UgPSB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyhlZGl0ZWRSZXNvdXJjZSwgZW52LmN1cnJlbnRVc2VyKTtcclxuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNwbGljZTogW1tpZHgsIDEsIHVwZGF0ZWRSZXNvdXJjZV1dfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICBvbkRlbGV0ZTogKCk9PntcclxuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNwbGljZTogW1tpZHgsIDFdXX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGhvc3QuY2xvc2VEaWFsb2coKTtcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0pfT48L2E+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgIDxhIGhyZWY9e3Jlc291cmNlLnVybH0gdGFyZ2V0PVwiX2JsYW5rXCIgPntyZXNvdXJjZS5uYW1lfTwvYT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj4pfVxyXG4gICAgIDwvZGl2PlxyXG4gICAgPGEgY2xhc3NOYW1lPVwiYnRuXCIgb25DbGljaz17KCk9Pmhvc3Qub3BlbkRpYWxvZyh7XHJcbiAgICAgIENvbXBvbmVudDogRWRpdFJlc291cmNlLFxyXG4gICAgICBwcm9wczoge1xyXG4gICAgICAgIHRpdGxlOiBcIkzDpGdnIHRpbGwgcmVzdXJzXCIsXHJcbiAgICAgICAgb25TYXZlOiBuZXdSZXNvdXJjZSA9PiB7XHJcbiAgICAgICAgICBjb25zdCB1cGRhdGVkUmVzb3VyY2UgPSB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyhuZXdSZXNvdXJjZSwgZW52LmN1cnJlbnRVc2VyKTtcclxuICAgICAgICAgIG9uVXBkYXRlKHskcHVzaDogW3VwZGF0ZWRSZXNvdXJjZV19KVxyXG4gICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSl9PjxpIGNsYXNzTmFtZT1cImZhIGZhLXBhcGVyY2xpcFwiIGFyaWEtaGlkZGVuPjwvaT4gTMOkZ2cgdGlsbCByZXN1cnM8L2E+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuIiwiXHJcbmV4cG9ydCBjbGFzcyBDYWNoZWRSZXNwb25zZTxUPiB7XHJcbiAgICBwcm9taXNlOiBQcm9taXNlPFQ+IHwgbnVsbDtcclxuICAgIHJlc3VsdDogVCB8IG51bGw7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcXVlcnllcjogKCk9PlByb21pc2U8VD4pIHtcclxuICAgICAgICB0aGlzLnByb21pc2UgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmVzdWx0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBxdWVyeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlID9cclxuICAgICAgICAgICAgdGhpcy5wcm9taXNlIDpcclxuICAgICAgICAgICAgKHRoaXMucHJvbWlzZSA9IHRoaXMucXVlcnllcigpLnRoZW4oeCA9PiB0aGlzLnJlc3VsdCA9IHgpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICB0aGlzLnByb21pc2UgPSBudWxsO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFRhc2sgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcclxuaW1wb3J0IHsgRWRpdFRhc2sgfSBmcm9tIFwiLi9lZGl0LXRhc2tcIjtcclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgc2hvcnRQZXJzb25OYW1lRm9ybWF0LCBzaG9ydERhdGVGb3JtYXQgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcclxuaW1wb3J0IHsgUHJldmlld2FibGVUYXNrRmllbGRzIH0gZnJvbSAnLi9wcmV2aWV3YWJsZS10YXNrLWZpZWxkcyc7XHJcbmltcG9ydCB7IFNhdmVPckNhbmNlbEJ1dHRvbnMgfSBmcm9tICcuL3NhdmUtb3ItY2FuY2VsLWJ1dHRvbnMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzZWFyY2hNYXJrZWRJZHM6IHN0cmluZ1tdO1xyXG4gIHNlYXJjaFJlc3VsdDogVGFza1tdO1xyXG4gIHRhc2s6IFRhc2s7XHJcbiAgd3JpdGVBY2Nlc3M6IGJvb2xlYW47XHJcbiAgdGFza0N1c3RvbWl6YXRpb246IFBhcnRpYWw8VGFzaz47XHJcbiAgZWRpdFRhc2s6IEVkaXRUYXNrO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gU2VhcmNoUmVzdWx0cyAoe3NlYXJjaE1hcmtlZElkcywgc2VhcmNoUmVzdWx0LCB0YXNrLCBlZGl0VGFzaywgd3JpdGVBY2Nlc3MsIHRhc2tDdXN0b21pemF0aW9ufTogUHJvcHMpIHtcclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17XCJ0YXNrLXNlYXJjaC1yZXN1bHRcIiArICghZWRpdFRhc2suc3RhdGUudGFzayAmJiAhZWRpdFRhc2suc3RhdGUucHJldmlld1Rhc2tDb250ZW50ID8gXCIgZml4ZWRcIiA6IFwiXCIpfT5cclxuICAgICAgICB7c2VhcmNoTWFya2VkSWRzLmxlbmd0aCA9PT0gMCA/XHJcbiAgICAgICAgICAgIDxoMj5TYW10bGlnYSB1cHBnaWZ0ZXIgZsO2ciBrdXJzZW48L2gyPiA6XHJcbiAgICAgICAgICAgIDxoMj5VcHBnaWZ0ZXIgc29tIHTDpGNrZXIgdmFsZGEgZmlsdGVyPC9oMj59XHJcbiAgICAgICAgPHRhYmxlPjx0Ym9keT5cclxuICAgICAgICAgICAge3NlYXJjaFJlc3VsdFxyXG4gICAgICAgICAgICAgIC5maWx0ZXIodGFzayA/XHJcbiAgICAgICAgICAgICAgICBmb3VuZFRhc2sgPT4gZm91bmRUYXNrLmlkID09PSB0YXNrLmlkIDpcclxuICAgICAgICAgICAgICAgICgpID0+IHRydWUpXHJcbiAgICAgICAgICAgICAgLm1hcChmb3VuZFRhc2sgPT4gPFJlYWN0LkZyYWdtZW50IGtleT17Zm91bmRUYXNrLmlkfT5cclxuICAgICAgICAgICAgICAgIDx0cj5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcImNoZWNrQm94XCIgKyAodGFzayAmJiB0YXNrLmlkID09PSBmb3VuZFRhc2suaWQgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+dG9nZ2xlQ2hvb3NlVGFzayhmb3VuZFRhc2spIH0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8L3RkPjx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2ZvdW5kVGFzay5jb250ZW50ID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgb25DbGljaz17ZXYgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZUNob29zZVRhc2soZm91bmRUYXNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB9Pntmb3VuZFRhc2submFtZX08L2E+IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9e2ZvdW5kVGFzay51cmx9IHRhcmdldD1cIl9ibGFua1wiPntmb3VuZFRhc2submFtZX08L2E+fVxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkPlxyXG4gICAgICAgICAgICAgICAgICAgICAge3Nob3J0UGVyc29uTmFtZUZvcm1hdChmb3VuZFRhc2subW9kaWZpZWRCeS5uYW1lKX1cclxuICAgICAgICAgICAgICAgICAgICA8L3RkPjx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgIHtmb3VuZFRhc2suc2Nob29sIHx8IFwiU3RhbmRhcmRcIn1cclxuICAgICAgICAgICAgICAgICAgICA8L3RkPjx0ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAge3Nob3J0RGF0ZUZvcm1hdChmb3VuZFRhc2subW9kaWZpZWREYXRlKX1cclxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxyXG4gICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgIHsvKnRhc2sgJiYgdGFzay5pZCA9PT0gZm91bmRUYXNrLmlkICYmIDx0cj48dGQgY29sU3Bhbj17NH0+XHJcbiAgICAgICAgICAgICAgICAgIHtlZGl0VGFzay5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnQgPyBcclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBlZGl0VGFzay5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnR9fSAvPlxyXG4gICAgICAgICAgICAgICAgICA6IDxQcmV2aWV3YWJsZVRhc2tGaWVsZHNcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZUFjY2Vzcz17d3JpdGVBY2Nlc3N9XHJcbiAgICAgICAgICAgICAgICAgICAgdGFzaz17dGFza31cclxuICAgICAgICAgICAgICAgICAgICB0YXNrQ3VzdG9taXphdGlvbj17dGFza0N1c3RvbWl6YXRpb259XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdFRhc2s9e2VkaXRUYXNrfSAvPn1cclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgICAgPFNhdmVPckNhbmNlbEJ1dHRvbnMgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfSBlZGl0VGFzaz17ZWRpdFRhc2t9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgPC90ZD48L3RyPiovfVxyXG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50Pil9XHJcbiAgICAgICAgPC90Ym9keT48L3RhYmxlPlxyXG4gICAgICAgIDxiciAvPlxyXG4gICAgICAgIDxociAvPlxyXG4gICAgPC9kaXY+O1xyXG5cclxuICBmdW5jdGlvbiB0b2dnbGVDaG9vc2VUYXNrKGZvdW5kVGFzazogVGFzaykge1xyXG4gICAgaWYgKHRhc2sgJiYgdGFzay5pZCA9PT0gZm91bmRUYXNrLmlkKSB7XHJcbiAgICAgIGVkaXRUYXNrLnVwZGF0ZVNlYXJjaE1hcmtlZElkcyhzZWFyY2hNYXJrZWRJZHMpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGZpbmRET01Ob2RlKGVkaXRUYXNrKS5wYXJlbnRFbGVtZW50LnNjcm9sbFRvcCA9IDA7XHJcbiAgICAgIGVkaXRUYXNrLnNldFN0YXRlUHJvbWlzZWQoeyB0YXNrOiBmb3VuZFRhc2ssIHByZXZpZXdUYXNrQ29udGVudDogbnVsbCB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVGFzaywgQ291cnNlIH0gZnJvbSBcImtlZGJhY2tlbmQvbW9kZWxzXCI7XHJcbmltcG9ydCB7IEZlYXR1cmVzIH0gZnJvbSBcIi4uLy4uLy4uLy4uL2ZlYXR1cmVzXCI7XHJcbmltcG9ydCB7IEVkaXRUYXNrIH0gZnJvbSBcIi4vZWRpdC10YXNrXCI7XHJcbmltcG9ydCBSZWFjdERhdGVQaWNrZXIgZnJvbSBcInJlYWN0LWRhdGVwaWNrZXJcIjtcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7VGFza01pZ3JhdGlvbkJveH0gZnJvbSBcIi4vdGFzay1taWdyYXRpb24tYm94XCI7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHRhc2s6IFRhc2s7XHJcbiAgY291cnNlOiBDb3Vyc2U7XHJcbiAgd3JpdGVBY2Nlc3M6IGJvb2xlYW47XHJcbiAgZmVhdHVyZXM6IEZlYXR1cmVzO1xyXG4gIGVkaXRUYXNrOiBFZGl0VGFzaztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIEJhc2ljRWRpdGFibGVUYXNrRmllbGRzKHtcclxuICB0YXNrLFxyXG4gIGNvdXJzZSxcclxuICB3cml0ZUFjY2VzcyxcclxuICBmZWF0dXJlcyxcclxuICBlZGl0VGFza1xyXG59OiBQcm9wcykge1xyXG4gIHJldHVybiA8ZGl2PlxyXG4gICAgPGgyPlVwcGdpZnRlbnMgbmFtbiBvY2ggbMOkbms8L2gyPlxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgIDxwPlVwcGdpZnRlbnMgbmFtbjo8L3A+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgIDxpbnB1dCBhdXRvRm9jdXMgdHlwZT1cInRleHRcIiBzaXplPXszNX0gdmFsdWU9e3Rhc2submFtZX0gZGlzYWJsZWQ9eyF3cml0ZUFjY2Vzc30gcmVhZE9ubHk9eyF3cml0ZUFjY2Vzc30gb25DaGFuZ2U9e2V2ID0+IHtcclxuICAgICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB7IC4uLnRhc2sgfTtcclxuICAgICAgICAgIG5ld1Rhc2submFtZSA9IGV2LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgIGVkaXRUYXNrLnNldFN0YXRlUHJvbWlzZWQoeyB0YXNrOiBuZXdUYXNrIH0pO1xyXG4gICAgICAgIH0gfSAvPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgIDxwPlVSTDo8L3A+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17XCJob3Jpem9udGFsSXRlbSB0b3BcIn0+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgc2l6ZT17MzV9IHZhbHVlPXt0YXNrLnVybH0gZGlzYWJsZWQ9eyF3cml0ZUFjY2Vzc30gcmVhZE9ubHk9eyF3cml0ZUFjY2Vzc30gb25DaGFuZ2U9e2V2ID0+IHtcclxuICAgICAgICAgIGNvbnN0IG5ld1Rhc2sgPSB7IC4uLnRhc2sgfTtcclxuICAgICAgICAgIG5ld1Rhc2sudXJsID0gZXYudGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgZWRpdFRhc2suc2V0U3RhdGVQcm9taXNlZCh7IHRhc2s6IG5ld1Rhc2sgfSk7XHJcbiAgICAgICAgfSB9IC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgICB7dGFzay5taWdyYXRlZFRleHRzICYmIHdyaXRlQWNjZXNzICYmIDxUYXNrTWlncmF0aW9uQm94IHRhc2s9e3Rhc2t9IGNvdXJzZT17Y291cnNlfSB1cGRhdGVMaW5rPXsoaWQsIGxpbmtPclVubGluaykgPT4gZWRpdFRhc2sudXBkYXRlTGluayhpZCwgbGlua09yVW5saW5rKX0gLz59XHJcbiAgICA8PjxoMj5JbmzDpG1uaW5nc3VwcGdpZnQ8L2gyPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wiY2hlY2tCb3hcIiArIChlZGl0VGFzay5nZXRUYXNrUHJvcChcImFzc2lnbm1lbnRcIikgPyBcIiBjaGVja2VkXCIgOiBcIlwiKX0gb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgICAgICBlZGl0VGFzay51cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uKFwiYXNzaWdubWVudFwiLCB7ICRzZXQ6ICFlZGl0VGFzay5nZXRUYXNrUHJvcChcImFzc2lnbm1lbnRcIikgfSk7XHJcbiAgICAgICAgICB9IH0gLz5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgPHA+RGVuIGjDpHIgdXBwZ2lmdGVuIMOkciBlbiBpbmzDpG1uaW5nc3VwcGdpZnQ8L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICB7ZWRpdFRhc2suZ2V0VGFza1Byb3AoXCJhc3NpZ25tZW50XCIpICYmIDw+XHJcbiAgICAgICAgPHA+SW5sw6RtbmluZ3NkYXR1bTwvcD5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgIDxSZWFjdERhdGVQaWNrZXIgc2VsZWN0ZWQ9e2VkaXRUYXNrLmdldFRhc2tQcm9wKFwiZGVhZGxpbmVcIikgJiYgbW9tZW50KGVkaXRUYXNrLmdldFRhc2tQcm9wKFwiZGVhZGxpbmVcIikpfSBkYXRlRm9ybWF0PVwiWVlZWS1NTS1ERFwiIGxvY2FsZT17XCJzdlwifSBwb3BwZXJQbGFjZW1lbnQ9XCJib3R0b20tc3RhcnRcIiBvbkNoYW5nZT17dmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgIGVkaXRUYXNrLnVwZGF0ZVRhc2tPckN1c3RvbWl6YXRpb24oXCJkZWFkbGluZVwiLCB7ICRzZXQ6IHZhbHVlLmZvcm1hdChcIllZWVktTU0tRERcIikgfSk7XHJcbiAgICAgICAgICAgIH0gfSAvPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICB7ZWRpdFRhc2suZ2V0VGFza1Byb3AoXCJkZWFkbGluZVwiKSAmJiA8YSBjbGFzc05hbWU9XCJkZWxldGVEYXRlXCIgaHJlZj1cIiNcIiB0aXRsZT1cIlRhIGJvcnQgaW5sw6RtbmluZ3NkYXR1bVwiIG9uQ2xpY2s9e2V2ID0+IHtcclxuICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgIGVkaXRUYXNrLnVwZGF0ZVRhc2tPckN1c3RvbWl6YXRpb24oXCJkZWFkbGluZVwiLCB7ICRzZXQ6IG51bGwgfSk7XHJcbiAgICAgICAgICAgIH0gfT48L2E+fVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvPn1cclxuICAgIDwvPlxyXG4gIDwvZGl2PjtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGR0Rm9ybWF0IH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIFRhc2tTdGF0dXNGcmFnbWVudCh7dGFza306IHt0YXNrOiBUYXNrfSkge1xyXG4gIHJldHVybiA8PlxyXG4gICAgICA8aDM+VXBwZ2lmdGVucyBzdGF0dXM8L2gzPlxyXG5cclxuICAgICAge3Rhc2suY3JlYXRlZEJ5ICYmIHRhc2suY3JlYXRlZERhdGUgJiYgPHA+XHJcbiAgICAgICAgICBVcHBnaWZ0ZW4gc2thcGFkZXMge2R0Rm9ybWF0KHRhc2suY3JlYXRlZERhdGUpfSBhdiA8c3Ryb25nPnt0YXNrLmNyZWF0ZWRCeS5uYW1lfTwvc3Ryb25nPi5cclxuICAgICAgPC9wPn1cclxuICAgICAge3Rhc2subW9kaWZpZWRCeSAmJiB0YXNrLm1vZGlmaWVkRGF0ZSAmJiA8cD5cclxuICAgICAgICAgIFVwcGdpZnRlbiByZWRpZ2VyYWRlcyBzZW5hc3Qge2R0Rm9ybWF0KHRhc2subW9kaWZpZWREYXRlKX0gYXYgPHN0cm9uZz57dGFzay5tb2RpZmllZEJ5Lm5hbWV9PC9zdHJvbmc+LlxyXG4gICAgICA8L3A+fVxyXG4gIDwvPjtcclxufVxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEVkaXRUYXNrIH0gZnJvbSAnLi9lZGl0LXRhc2snO1xyXG5pbXBvcnQgeyBzaG93RXJyb3IgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlscy91dGlscyc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gU2F2ZU9yQ2FuY2VsQnV0dG9ucyh7d3JpdGVBY2Nlc3MsIGVkaXRUYXNrfToge3dyaXRlQWNjZXNzOiBib29sZWFuLCBlZGl0VGFzazogRWRpdFRhc2t9KSB7XHJcbiAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudD5cclxuICAgICAgeyEhZWRpdFRhc2sucHJvcHMub25EZWxldGUgJiYgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLXdhcm5pbmcgYnRuLWxhcmdlIHB1bGwtcmlnaHRcIiBvbkNsaWNrPXsoKSA9PiBlZGl0VGFzay5wcm9wcy5vbkRlbGV0ZSgpfT5cclxuICAgICAgICAgIFRhIGJvcnQgZnLDpW4ga3Vyc21vZHVsXHJcbiAgICAgIDwvZGl2Pn1cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJwdWxsLXJpZ2h0XCI+Jm5ic3A7PC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCkgPT4gZWRpdFRhc2sucHJvcHMub25DYW5jZWwoKX0+XHJcbiAgICAgICAgICBBdmJyeXRcclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2VcIiBvbkNsaWNrPXsoKSA9PiBlZGl0VGFzay5zYXZlKCkuY2F0Y2goc2hvd0Vycm9yKX0+XHJcbiAgICAgICAgICBTcGFyYVxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgeyF3cml0ZUFjY2VzcyAmJiA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2VcIiBvbkNsaWNrPXsoKSA9PiBlZGl0VGFzay5jb3B5VGFzaygpLmNhdGNoKHNob3dFcnJvcil9PlxyXG4gICAgICAgICAgU2thcGEga29waWEgYXYgZGVuIGjDpHIgdXBwZ2lmdGVuXHJcbiAgICAgIDwvZGl2Pn1cclxuICA8L1JlYWN0LkZyYWdtZW50PjtcclxufVxyXG5cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBXeXNpd3lnIH0gZnJvbSAnLi4vLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcnO1xyXG5pbXBvcnQgYWN0aW9uc19zd2VkaXNoIGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YnO1xyXG5pbXBvcnQgeyBFZGl0VGFzayB9IGZyb20gJy4vZWRpdC10YXNrJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBUYXNrQ29udGVudEZyYWdtZW50KHt3cml0ZUFjY2VzcywgdGFzaywgZWRpdFRhc2t9OiB7d3JpdGVBY2Nlc3M6IGJvb2xlYW4sIHRhc2s6IFRhc2ssIGVkaXRUYXNrOiBFZGl0VGFza30pIHtcclxuICByZXR1cm4gPFJlYWN0LkZyYWdtZW50PlxyXG4gICAgICA8aDM+VXBwZ2lmdGVucyBpbm5laMOlbGw8L2gzPlxyXG4gICAgICB7d3JpdGVBY2Nlc3MgJiYgPHA+XHJcbiAgICAgICAgICBPbSB1cHBnaWZ0ZW4gaW50ZSBsw6Rua2FyIHRpbGwgbsOlZ290IGRva3VtZW50IGthbiBkdSBsw6RnZ2EgaW5uZWjDpWxsIGjDpHIuXHJcbiAgICAgIDwvcD59XHJcbiAgICAgIDxXeXNpd3lnIGFjdGlvbnM9e1tcclxuICAgICAgICAgIFwiYm9sZFwiLFxyXG4gICAgICAgICAgXCJpdGFsaWNcIixcclxuICAgICAgICAgIFwidW5kZXJsaW5lXCIsXHJcbiAgICAgICAgICBcInN0cmlrZXRocm91Z2hcIixcclxuICAgICAgICAgIFwiaGVhZGluZzJcIixcclxuICAgICAgICAgIFwiaGVhZGluZzNcIixcclxuICAgICAgICAgIFwib2xpc3RcIixcclxuICAgICAgICAgIFwidWxpc3RcIixcclxuICAgICAgICAgIFwibGluZVwiLFxyXG4gICAgICAgICAgXCJsaW5rXCIsXHJcbiAgICAgICAgICBcImltYWdlXCJcclxuICAgICAgXX0gZGVmYXVsdEFjdGlvbnM9e2FjdGlvbnNfc3dlZGlzaH0gcmVhZE9ubHk9eyF3cml0ZUFjY2Vzc30gaHRtbD17dGFzay5jb250ZW50fSBvbkNoYW5nZT17aHRtbCA9PiB7XHJcbiAgICAgICAgICBjb25zdCBuZXdUYXNrID0geyAuLi50YXNrIH07XHJcbiAgICAgICAgICBuZXdUYXNrLmNvbnRlbnQgPSBodG1sO1xyXG4gICAgICAgICAgZWRpdFRhc2suc2V0U3RhdGUoeyB0YXNrOiBuZXdUYXNrIH0pO1xyXG4gICAgICB9IH0gLz5cclxuICA8L1JlYWN0LkZyYWdtZW50PjtcclxufVxyXG5cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUYXNrIH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBFZGl0VGFzayB9IGZyb20gJy4vZWRpdC10YXNrJztcclxuaW1wb3J0IHsgRWRpdGFibGVSZXNvdXJjZUxpc3QgfSBmcm9tICcuLi8uLi9zdWItY29tcG9uZW50cy9lZGl0YWJsZS1yZXNvdXJjZS1saXN0JztcclxuaW1wb3J0IHsgVGFza0NvbnRlbnRGcmFnbWVudCB9IGZyb20gJy4vdGFzay1jb250ZW50LWZyYWdtZW50JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgd3JpdGVBY2Nlc3M6IGJvb2xlYW47XHJcbiAgdGFzazogVGFzaztcclxuICB0YXNrQ3VzdG9taXphdGlvbjogUGFydGlhbDxUYXNrPjtcclxuICBlZGl0VGFzazogRWRpdFRhc2s7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBQcmV2aWV3YWJsZVRhc2tGaWVsZHMoe3dyaXRlQWNjZXNzLCB0YXNrLCB0YXNrQ3VzdG9taXphdGlvbiwgZWRpdFRhc2t9OiBQcm9wcykge1xyXG4gIHJldHVybiA8PlxyXG4gICAgPD5cclxuICAgICAgPGgzPlVwcGdpZnRlbnMgbMOkcmFuZGVtw6VsPC9oMz5cclxuICAgICAgPGRpdj5cclxuICAgICAgICA8dGV4dGFyZWFcclxuICAgICAgICAgIGNsYXNzTmFtZT1cImlucHV0VGV4dEJveCBsZWFybmluZy1nb2FsLWJveFwiXHJcbiAgICAgICAgICBkaXNhYmxlZD17IXdyaXRlQWNjZXNzfVxyXG4gICAgICAgICAgdmFsdWU9e3Rhc2subGVhcm5pbmdHb2FsfVxyXG4gICAgICAgICAgb25DaGFuZ2U9e2V2ID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbmV3VGFzayA9IHsgLi4udGFzayB9O1xyXG4gICAgICAgICAgICBuZXdUYXNrLmxlYXJuaW5nR29hbCA9IGV2LnRhcmdldC52YWx1ZTtcclxuICAgICAgICAgICAgZWRpdFRhc2suc2V0U3RhdGVQcm9taXNlZCh7IHRhc2s6IG5ld1Rhc2sgfSk7XHJcbiAgICAgICAgICB9fVxyXG4gICAgICAgIC8+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC8+XHJcbiAgICA8YnIgLz5cclxuICAgIDw+XHJcbiAgICAgIHsod3JpdGVBY2Nlc3MgfHwgISF0YXNrLmNvbnRlbnQpICYmIDxUYXNrQ29udGVudEZyYWdtZW50XHJcbiAgICAgICAgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfVxyXG4gICAgICAgIHRhc2s9e3Rhc2t9XHJcbiAgICAgICAgZWRpdFRhc2s9e2VkaXRUYXNrfSAvPn1cclxuICAgIDwvPlxyXG4gICAgPD5cclxuICAgICAge3Rhc2tDdXN0b21pemF0aW9uICYmIHRhc2tDdXN0b21pemF0aW9uLnJlc291cmNlcyA/XHJcbiAgICAgICAgPGgzPlJlc3Vyc2VyIGbDtnIgdXBwZ2lmdGVuIChtb2RpZmllcmFkIGbDtnIgZGVubmEga3Vyc2luc3RhbnMpPC9oMz4gOlxyXG4gICAgICAgIDxoMz5SZXN1cnNlciBrb3BwbGFkZSB0aWxsIHVwcGdpZnRlbjwvaDM+fVxyXG5cclxuICAgICAgPEVkaXRhYmxlUmVzb3VyY2VMaXN0XHJcbiAgICAgICAgcmVzb3VyY2VzPXtcclxuICAgICAgICAgICh0YXNrQ3VzdG9taXphdGlvbiAmJiB0YXNrQ3VzdG9taXphdGlvbi5yZXNvdXJjZXMpIHx8IHRhc2sucmVzb3VyY2VzfVxyXG4gICAgICAgIGhvc3Q9e2VkaXRUYXNrLnByb3BzLmhvc3R9XHJcbiAgICAgICAgb25VcGRhdGU9e3Jlc291cmNlVXBkYXRlcyA9PiB7XHJcbiAgICAgICAgICBlZGl0VGFzay51cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uKFwicmVzb3VyY2VzXCIsIHJlc291cmNlVXBkYXRlcyk7XHJcbiAgICAgICAgfX0gLz5cclxuICAgIDwvPlxyXG4gIDwvPjtcclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBDb3Vyc2UsIENvdXJzZU1vZHVsZSwgQWJpbGl0eSwgVGFzaywgRG9jdW1lbnQgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCB7IEtub3dsZWRnZU1hdHJpeCB9IGZyb20gJy4uLy4uL3N1Yi1jb21wb25lbnRzL2tub3dsZWRnZS1tYXRyaXgnO1xyXG5pbXBvcnQgdXBkYXRlIGZyb20gJ3JlYWN0LWFkZG9ucy11cGRhdGUnO1xyXG5pbXBvcnQgeyBEaWFsb2csIElDb3Vyc2VFZGl0b3JIb3N0IH0gZnJvbSBcIi4uLy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0XCI7XHJcbmltcG9ydCB7IGhhc1dyaXRlQWNjZXNzIH0gZnJvbSAnLi4vLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2wnO1xyXG5pbXBvcnQgeyBTZWxlY3RSZWxhdGVkRG9jcyB9IGZyb20gJy4uLy4uL3N1Yi1jb21wb25lbnRzL3NlbGVjdC1yZWxhdGVkLWRvY3MnO1xyXG5pbXBvcnQgdmFsaWRVcmwgZnJvbSAndmFsaWQtdXJsJztcclxuaW1wb3J0IHsgTCwgc2hvd0Vycm9yIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XHJcbmltcG9ydCB7IENhY2hlZFJlc3BvbnNlIH0gZnJvbSBcIi4uLy4uLy4uLy4uL3V0aWxzL2NhY2hlZC1yZXNwb25zZVwiO1xyXG5pbXBvcnQgeyBFZGl0YWJsZVJlc291cmNlTGlzdCB9IGZyb20gXCIuLi8uLi9zdWItY29tcG9uZW50cy9lZGl0YWJsZS1yZXNvdXJjZS1saXN0XCI7XHJcbmltcG9ydCB7IGR0Rm9ybWF0LCBzaG9ydERhdGVGb3JtYXQsIHNob3J0UGVyc29uTmFtZUZvcm1hdCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBmdXR1cmVBYmlsaXRpZXMgfSBmcm9tIFwiLi4vLi4vLi4vLi4vY29udHJhY3RzL2tlZC1tb2RlbHNcIjtcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uLy4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcclxuaW1wb3J0IHsgV3lzaXd5ZyB9IGZyb20gJy4uLy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnJztcclxuaW1wb3J0IGFjdGlvbnNfc3dlZGlzaCBmcm9tICcuLi8uLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLXN2JztcclxuaW1wb3J0IFJlYWN0RGF0ZVBpY2tlciBmcm9tICdyZWFjdC1kYXRlcGlja2VyJztcclxuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xyXG5pbXBvcnQgeyBGZWF0dXJlcyB9IGZyb20gJy4uLy4uLy4uLy4uL2ZlYXR1cmVzJztcclxuaW1wb3J0IHsgU2VhcmNoUmVzdWx0cyB9IGZyb20gJy4vc2VhcmNoLXJlc3VsdHMnO1xyXG5pbXBvcnQgeyBCYXNpY0VkaXRhYmxlVGFza0ZpZWxkcyB9IGZyb20gJy4vYmFzaWMtZWRpdGFibGUtdGFzay1maWVsZHMnO1xyXG5pbXBvcnQgeyBUYXNrU3RhdHVzRnJhZ21lbnQgfSBmcm9tICcuL3Rhc2stc3RhdHVzLWZyYWdtZW50JztcclxuaW1wb3J0IHsgU2F2ZU9yQ2FuY2VsQnV0dG9ucyB9IGZyb20gJy4vc2F2ZS1vci1jYW5jZWwtYnV0dG9ucyc7XHJcbmltcG9ydCB7IFByZXZpZXdhYmxlVGFza0ZpZWxkcyB9IGZyb20gJy4vcHJldmlld2FibGUtdGFzay1maWVsZHMnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBzZWFyY2hNb2RlPzogYm9vbGVhbjtcclxuICB0YXNrPzogVGFzaztcclxuICB0YXNrQ3VzdG9taXphdGlvbj86IFBhcnRpYWw8VGFzaz47XHJcbiAgbW9kdWxlOiBDb3Vyc2VNb2R1bGU7XHJcbiAgY291cnNlOiBDb3Vyc2U7XHJcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3Q7XHJcbiAgaWRzTm90Q292ZXJlZEJ5QW55VGFzazogeyBbaWQ6IHN0cmluZ106IHRydWUgfTtcclxuICBvblNhdmU6ICh0YXNrOiBUYXNrLCB0YXNrQ3VzdG9taXphdGlvbjogUGFydGlhbDxUYXNrPikgPT4gUHJvbWlzZTxhbnk+O1xyXG4gIG9uU2F2ZUN1c3RvbWl6YXRpb246ICh0YXNrQ3VzdG9taXphdGlvbjogUGFydGlhbDxUYXNrPikgPT4gUHJvbWlzZTxhbnk+O1xyXG4gIG9uUmVwbGFjZTogKHRhc2tJZDogc3RyaW5nLCB0YXNrOiBUYXNrKSA9PiBQcm9taXNlPGFueT47XHJcbiAgb25DYW5jZWw6ICgpID0+IHZvaWQ7XHJcbiAgb25EZWxldGU6ICgpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgdGl0bGU6IHN0cmluZztcclxuICB0YXNrOiBUYXNrO1xyXG4gIHRhc2tDdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+XHJcbiAgZnV0dXJlQWJpbGl0aWVzT3BlbjogYm9vbGVhbjtcclxuICBzZWFyY2hSZXN1bHQ/OiBUYXNrW107XHJcbiAgc2VhcmNoTWFya2VkSWRzPzogc3RyaW5nW107XHJcbiAgaXNTZWFyY2hpbmc6IGJvb2xlYW47XHJcbiAgcHJldmlld1Rhc2tDb250ZW50Pzogc3RyaW5nOyAvLyBUT0RPOiBSZW1vdmUgdGhpcyBzdGF0ZS4gUHJldmlld2luZyBjb250ZW50IGlzIG5vdyBlcXVpdmFsZW50IHRvIGNoZWNraW5nIGEgY2hlY2tib3guXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFZGl0VGFzayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcywgU3RhdGU+IGltcGxlbWVudHMgRGlhbG9nIHtcclxuICBzZWFyY2hSZXNwb25zZT86IENhY2hlZFJlc3BvbnNlPFRhc2tbXT47XHJcbiAgZGlhbG9nRWxlbTogSFRNTERpdkVsZW1lbnQ7XHJcbiAgZmVhdHVyZXMgPSBuZXcgRmVhdHVyZXMoKTtcclxuXHJcbiAgc2V0U3RhdGVQcm9taXNlZChzdGF0ZTogUGFydGlhbDxTdGF0ZT4pIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHN1cGVyLnNldFN0YXRlKCgpID0+IHN0YXRlIGFzIFN0YXRlLCByZXNvbHZlKSk7XHJcbiAgfVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIGNvbnN0IHdyaXRlQWNjZXNzID0gIXByb3BzLnRhc2sgfHwgaGFzV3JpdGVBY2Nlc3MoZW52LmN1cnJlbnRVc2VyLCBwcm9wcy50YXNrKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIHRpdGxlOiBwcm9wcy50YXNrID9cclxuICAgICAgICB3cml0ZUFjY2VzcyA/XHJcbiAgICAgICAgICBMYFJlZGlnZXJhIHVwcGdpZnQgdGlsbCBcIiR7cHJvcHMubW9kdWxlLm5hbWV9XCJgIDpcclxuICAgICAgICAgIExgVmlzYSB1cHBnaWZ0IHRpbGwgXCIke3Byb3BzLm1vZHVsZS5uYW1lfVwiYCA6XHJcbiAgICAgICAgcHJvcHMuc2VhcmNoTW9kZSA/XHJcbiAgICAgICAgICBMYFPDtmsgbnkgdXBwZ2lmdCB0aWxsIFwiJHtwcm9wcy5tb2R1bGUubmFtZX1cImAgOlxyXG4gICAgICAgICAgTGBMw6RnZyB0aWxsIGVnZW4gdXBwZ2lmdCB0aWxsIFwiJHtwcm9wcy5tb2R1bGUubmFtZX1cImAsXHJcbiAgICAgIGZ1dHVyZUFiaWxpdGllc09wZW46IGZhbHNlLFxyXG4gICAgICB0YXNrQ3VzdG9taXphdGlvbjogcHJvcHMudGFza0N1c3RvbWl6YXRpb24gfHwge30sXHJcbiAgICAgIHRhc2s6IHByb3BzLnRhc2sgP1xyXG4gICAgICAgIC8vIEEgdGFzayB3YXMgZ2l2ZW4uIENsb25lIGl0IGFuZCBhZGQgJG1ldGE6ICd1cGRhdGUnIHRvIGl0XHJcbiAgICAgICAgLy8gdG8gaW5mb3JtIEVkaXRDb3Vyc2Uuc2F2ZSgpIHRvIHVwZGF0ZSBpdCBvbiBpdHMgb3duIGVudGl0eS5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAkbWV0YTogcHJvcHMudGFzay4kbWV0YSB8fCAndXBkYXRlJyxcclxuICAgICAgICAgIC4uLnByb3BzLnRhc2tcclxuICAgICAgICB9IDogcHJvcHMuc2VhcmNoTW9kZSA/IG51bGwgOlxyXG4gICAgICAgICAgLy8gTm8gdGFzayB3YXMgZ2l2ZW4uIFNldCAkbWV0YSA9ICdhZGQnIHRvIGluZm9ybSBFZGl0Q291cnNlLnNhdmUoKVxyXG4gICAgICAgICAgLy8gdG8gYWRkIHRoZSB0YXNrIHRvIHRoZSB0YXNrcyB0YWJsZS5cclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IGNyZWF0ZVVVSUQoKSxcclxuICAgICAgICAgICAgJG1ldGE6ICdhZGQnLFxyXG4gICAgICAgICAgICB0YWdzOiBbXHJcbiAgICAgICAgICAgICAgYHN1Yjoke3Byb3BzLmNvdXJzZS5zdWJqZWN0Q29kZX1gLFxyXG4gICAgICAgICAgICAgIGBjb3Vyc2U6JHtwcm9wcy5jb3Vyc2UuY29kZX1gXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHNjaG9vbDogIXByb3BzLmNvdXJzZS5pc1RlbXBsYXRlICYmIGVudi5jdXJyZW50VXNlci5zY2hvb2wsXHJcbiAgICAgICAgICAgIHJlc291cmNlczogW10sXHJcbiAgICAgICAgICAgIGFiaWxpdGllczogW10sXHJcbiAgICAgICAgICAgIGNlbnRyYWxDb250ZW50OiBbXSxcclxuICAgICAgICAgICAgZnV0dXJlQWJpbGl0aWVzOiBbXSxcclxuICAgICAgICAgICAga25vd2xlZGdlUmVxdWlyZW1lbnRzOiBbXSxcclxuICAgICAgICAgICAgbmFtZTogXCJcIixcclxuICAgICAgICAgICAgdXJsOiBcIlwiLFxyXG4gICAgICAgICAgICBhY2w6IHByb3BzLmNvdXJzZS5pc1RlbXBsYXRlID8gW1xyXG4gICAgICAgICAgICAgIGByb2xlOlVTRVI6UmAvLyAoT0sgdG8ga2VlcCBhZnRlciBrdXJzYnlnZy1jaGFuZ2VzKS4gVGVtcGxhdGVzICh3aGljaCB3aWxsIGJlIGVtcHR5ISkgd2lsbCBub3QgaGF2ZSB0YXNrcy4gSWYgdGhleSBoYWQsIG1pZ2h0IG5vdCB0YXNrcyBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG1vZGlmeS4gKEFuIEFETUlOIGNvdWxkIGJlbG9uZyB0byBhIHNjaG9vbCEgT3RoZXIgbm9uLWFkbWlucyBhdCB0aGF0IHNjaG9vbCBzaG91bGQgbm90IGJlIGFibGUgdG8gZWRpdCBpdClcclxuICAgICAgICAgICAgXSA6IFtcclxuICAgICAgICAgICAgICAgIGByb2xlOlVTRVI6UmAsXHJcbiAgICAgICAgICAgICAgICBgc2Nob29sUm9sZToke2Vudi5jdXJyZW50VXNlci5zY2hvb2x9L0VNUExPWUVFOlNgXHJcbiAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgfSxcclxuICAgICAgc2VhcmNoTWFya2VkSWRzOiBwcm9wcy5zZWFyY2hNb2RlICYmIFtdLFxyXG4gICAgICBzZWFyY2hSZXN1bHQ6IHByb3BzLnNlYXJjaE1vZGUgJiYgW10sXHJcbiAgICAgIGlzU2VhcmNoaW5nOiBwcm9wcy5zZWFyY2hNb2RlXHJcbiAgICB9O1xyXG4gICAgaWYgKHByb3BzLnNlYXJjaE1vZGUpIHtcclxuICAgICAgdGhpcy5zZWFyY2hSZXNwb25zZSA9IG5ldyBDYWNoZWRSZXNwb25zZSgoKSA9PlxyXG4gICAgICAgIGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8VGFzaz4oXCJ0YXNrc1wiLCB7XHJcbiAgICAgICAgICB0YWdzOiBgY291cnNlOiR7cHJvcHMuY291cnNlLmNvZGV9YCxcclxuICAgICAgICAgIGluY2x1ZGU6IFsna25vd2xlZGdlUmVxdWlyZW1lbnRzJywgJ2FiaWxpdGllcycsICdjZW50cmFsQ29udGVudCddLFxyXG4gICAgICAgICAgZmxhZ3M6IFsnaW5jbHVkZUlkc09ubHknXVxyXG4gICAgICAgIH0pKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgaWYgKHRoaXMucHJvcHMuc2VhcmNoTW9kZSkge1xyXG4gICAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoeyBpc1NlYXJjaGluZzogdHJ1ZSB9KTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBhd2FpdCB0aGlzLnNlYXJjaFJlc3BvbnNlLnF1ZXJ5KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2VhcmNoTWFya2VkSWRzICYmIHRoaXMuc3RhdGUuc2VhcmNoTWFya2VkSWRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVTZWFyY2hSZXN1bHQodGhpcy5zdGF0ZS5zZWFyY2hNYXJrZWRJZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgc2hvd0Vycm9yKGVycik7XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHsgaXNTZWFyY2hpbmc6IGZhbHNlIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cGRhdGVTZWFyY2hNYXJrZWRJZHMoc2VhcmNoTWFya2VkSWRzOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3Qgc2V0U3RhdGVQcm9taXNlID0gdGhpcy5zZXRTdGF0ZVByb21pc2VkKHsgdGFzazogbnVsbCwgc2VhcmNoTWFya2VkSWRzLCBwcmV2aWV3VGFza0NvbnRlbnQ6IG51bGwgfSk7XHJcbiAgICBpZiAoIXRoaXMuc2VhcmNoUmVzcG9uc2UucmVzdWx0KSB7XHJcbiAgICAgIGF3YWl0IHRoaXMuc2VhcmNoUmVzcG9uc2UucHJvbWlzZTtcclxuICAgICAgLy8gUmVmcmVzaCBzZWFyY2hNYXJrZWRJZHMgbm93IGFzIHVzZXIgbWlnaHQgaGF2ZSBjbGlja2VkIGFyb3VuZCB3aGlsZSB3YWl0aW5nIGZvclxyXG4gICAgICAvLyB0YXNrcyB0byBsb2FkLi4uXHJcbiAgICAgIGF3YWl0IHNldFN0YXRlUHJvbWlzZTsgLy8gU28gd2Uga25vdyBzdGF0ZSBoYXMgYmVlbiByZWZsZWN0ZWQuLi5cclxuICAgICAgc2VhcmNoTWFya2VkSWRzID0gdGhpcy5zdGF0ZS5zZWFyY2hNYXJrZWRJZHM7XHJcbiAgICB9XHJcbiAgICBhd2FpdCB0aGlzLnVwZGF0ZVNlYXJjaFJlc3VsdChzZWFyY2hNYXJrZWRJZHMpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgdXBkYXRlU2VhcmNoUmVzdWx0KHNlYXJjaE1hcmtlZElkczogc3RyaW5nW10pIHtcclxuICAgIGNvbnN0IGFsbFRhc2tzRm9yU3ViamVjdCA9IGF3YWl0IHRoaXMuc2VhcmNoUmVzcG9uc2UucXVlcnkoKTtcclxuXHJcbiAgICBjb25zdCBzZWFyY2hSZXN1bHQgPSBhbGxUYXNrc0ZvclN1YmplY3QuZmlsdGVyKHQgPT5cclxuICAgICAgc2VhcmNoTWFya2VkSWRzLmV2ZXJ5KGlkID0+XHJcbiAgICAgICAgdC5rbm93bGVkZ2VSZXF1aXJlbWVudHMuc29tZShrciA9PiBrci5pZCA9PT0gaWQpIHx8XHJcbiAgICAgICAgdC5hYmlsaXRpZXMuc29tZShhID0+IGEuaWQgPT09IGlkKSB8fFxyXG4gICAgICAgIHQuY2VudHJhbENvbnRlbnQuc29tZShjID0+IGMuaWQgPT09IGlkKSkpO1xyXG5cclxuICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7XHJcbiAgICAgIHNlYXJjaFJlc3VsdFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvbk1hcmtDaGFuZ2VkKGlkOiBzdHJpbmcsIGlzTWFya2VkOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCB7IHNlYXJjaE1vZGUgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBpZiAoc2VhcmNoTW9kZSkge1xyXG4gICAgICBjb25zdCB7IHNlYXJjaE1hcmtlZElkcyB9ID0gdGhpcy5zdGF0ZTtcclxuICAgICAgdGhpcy51cGRhdGVTZWFyY2hNYXJrZWRJZHMoaXNNYXJrZWQgP1xyXG4gICAgICAgIHNlYXJjaE1hcmtlZElkcy5jb25jYXQoaWQpIDpcclxuICAgICAgICBzZWFyY2hNYXJrZWRJZHMuZmlsdGVyKHggPT4geCAhPT0gaWQpKS5jYXRjaChzaG93RXJyb3IpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnVwZGF0ZUxpbmsoaWQsIGlzTWFya2VkKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUxpbmsoaWQ6IHN0cmluZywgbGlua09yVW5saW5rOiBib29sZWFuKSB7XHJcbiAgICBjb25zdCB7IGNvdXJzZSB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHsgdGFzayB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIC8vIE9uZSBvZiB0aGUgZm9sbG93aW5nIHRocmVlIHdpbGwgYmUgZm91bmQ6XHJcbiAgICBjb25zdCBhYmlsaXR5ID0gY291cnNlLmFiaWxpdGllcy5maW5kKGEgPT4gYS5pZCA9PT0gaWQpO1xyXG4gICAgY29uc3Qga25vd2xlZGdlUmVxdWlyZW1lbnQgPSBjb3Vyc2Uua25vd2xlZGdlUmVxdWlyZW1lbnRzLmZpbmQociA9PiByLmlkID09PSBpZCk7XHJcbiAgICBjb25zdCBjZW50cmFsQ29udGVudCA9IGNvdXJzZS5jZW50cmFsQ29udGVudC5maW5kKGNjID0+IGNjLmlkID09PSBpZCk7XHJcblxyXG4gICAgY29uc3QgW2NvbGxlY3Rpb25Qcm9wLCBpdGVtXSA9XHJcbiAgICAgIGFiaWxpdHkgP1xyXG4gICAgICAgIFtcImFiaWxpdGllc1wiLCBhYmlsaXR5XSA6XHJcbiAgICAgICAga25vd2xlZGdlUmVxdWlyZW1lbnQgP1xyXG4gICAgICAgICAgW1wia25vd2xlZGdlUmVxdWlyZW1lbnRzXCIsIGtub3dsZWRnZVJlcXVpcmVtZW50XSA6XHJcbiAgICAgICAgICBjZW50cmFsQ29udGVudCA/XHJcbiAgICAgICAgICAgIFtcImNlbnRyYWxDb250ZW50XCIsIGNlbnRyYWxDb250ZW50XSA6XHJcbiAgICAgICAgICAgIFtudWxsLCBudWxsXTtcclxuXHJcbiAgICBpZiAoIWNvbGxlY3Rpb25Qcm9wKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJDb3VsZCBub3QgZmluZCBtYXJrZWQgaWQgXCIgKyBpZCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB1cGRhdGVkQ29sbGVjdGlvbjogRG9jdW1lbnRbXSA9IHRhc2tbY29sbGVjdGlvblByb3BdLnNsaWNlKCk7XHJcbiAgICBjb25zdCBjdXJyZW50UG9zID0gdXBkYXRlZENvbGxlY3Rpb24uZmluZEluZGV4KGRvYyA9PiBkb2MuaWQgPT09IGlkKTtcclxuICAgIGlmIChsaW5rT3JVbmxpbmspIHtcclxuICAgICAgaWYgKGN1cnJlbnRQb3MgPCAwKSB7XHJcbiAgICAgICAgdXBkYXRlZENvbGxlY3Rpb24ucHVzaChpdGVtKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKGN1cnJlbnRQb3MgPj0gMCkge1xyXG4gICAgICAgIHVwZGF0ZWRDb2xsZWN0aW9uLnNwbGljZShjdXJyZW50UG9zLCAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWRUYXNrID0geyAuLi50YXNrIH07XHJcbiAgICB1cGRhdGVkVGFza1tjb2xsZWN0aW9uUHJvcF0gPSB1cGRhdGVkQ29sbGVjdGlvbjtcclxuXHJcbiAgICAvLyBDbGVhciBtaWdyYXRlZFRleHRzIGZyb20gdGFzay5cclxuICAgIC8vIEZpcnN0IGRlZXAgY2xvbmU6XHJcbiAgICBpZiAodGFzayAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMpIHtcclxuICAgICAgdXBkYXRlZFRhc2subWlncmF0ZWRUZXh0cyA9IHsuLi50YXNrLm1pZ3JhdGVkVGV4dHN9O1xyXG4gICAgICBpZiAodGFzay5taWdyYXRlZFRleHRzW2NvbGxlY3Rpb25Qcm9wXSkge1xyXG4gICAgICAgIHVwZGF0ZWRUYXNrLm1pZ3JhdGVkVGV4dHNbY29sbGVjdGlvblByb3BdID0gey4uLnRhc2subWlncmF0ZWRUZXh0c1tjb2xsZWN0aW9uUHJvcF19O1xyXG4gICAgICAgIC8vIERlbGV0ZSB0aGUgaWQgd2l0aGluIHRoZSBkZWVwIGNsb25lOlxyXG4gICAgICAgIGRlbGV0ZSB1cGRhdGVkVGFzay5taWdyYXRlZFRleHRzW2NvbGxlY3Rpb25Qcm9wXVtpZF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNldFN0YXRlUHJvbWlzZWQoe1xyXG4gICAgICB0YXNrOiB1cGRhdGVkVGFza1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBzYXZlKCkge1xyXG4gICAgY29uc3QgeyB0YXNrLCB0YXNrQ3VzdG9taXphdGlvbiB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHdyaXRlQWNjZXNzID0gaGFzV3JpdGVBY2Nlc3MoZW52LmN1cnJlbnRVc2VyLCB0YXNrKTtcclxuICAgIGlmICh3cml0ZUFjY2Vzcykge1xyXG4gICAgICBpZiAoIXRhc2sudXJsICYmICF0YXNrLmNvbnRlbnQpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKExgVXBwZ2lmdGVuIG3DpXN0ZSBhbnRpbmdlbiBoYSBlbiBVUkwgZWxsZXIgZXR0IGlubmVow6VsbGApO1xyXG4gICAgICBpZiAodGFzay51cmwgJiYgIXZhbGlkVXJsLmlzVXJpKHRhc2sudXJsKSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoTGBBbmdpdmVuIFVSTCAnJHt0YXNrLnVybH0nIMOkciBvZ2lsdGlnLiBEZW4gc2thIGLDtnJqYSBtZWQgaHR0cDogZWxsZXIgaHR0cHM6YCk7XHJcbiAgICAgIGlmICh0aGlzLnByb3BzLnRhc2sgJiYgdGhpcy5wcm9wcy50YXNrLmlkICE9PSB0YXNrLmlkKSB7XHJcbiAgICAgICAgLy8gUmVwbGFjZSBleGlzdGluZyB0YXNrIHdpdGggY29weVxyXG4gICAgICAgIGF3YWl0IHRoaXMucHJvcHMub25SZXBsYWNlKHRoaXMucHJvcHMudGFzay5pZCwgdGFzayk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gVXBkYXRlIGV4aXN0aW5nIHRhc2tcclxuICAgICAgICBhd2FpdCB0aGlzLnByb3BzLm9uU2F2ZSh0YXNrLCBudWxsKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnNlYXJjaE1vZGUpIHtcclxuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5vblNhdmUodGFzaywgdGFza0N1c3RvbWl6YXRpb24pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMucHJvcHMuY291cnNlLmlzVGVtcGxhdGUgJiYgdGFzay4kbWV0YSA9PT0gJ2FkZCcpXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKExgRHUgc2FrbmFyIGJlaMO2cmlnaGV0IGbDtnIgYXR0IHNwYXJhIG55YSB2ZXJzaW9uZXIgYXYgdXBwZ2lmdGVyIGkga3Vyc21hbGxlbmApO1xyXG5cclxuICAgICAgYXdhaXQgdGhpcy5wcm9wcy5vblNhdmVDdXN0b21pemF0aW9uKHRhc2tDdXN0b21pemF0aW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGNvcHlUYXNrKCkge1xyXG4gICAgY29uc3QgdGFza0NvcHkgPSB7XHJcbiAgICAgIC4uLnRoaXMuc3RhdGUudGFzayxcclxuICAgICAgLi4uKHRoaXMuc3RhdGUudGFza0N1c3RvbWl6YXRpb24gfHwge30pLFxyXG4gICAgICBpZDogY3JlYXRlVVVJRCgpLFxyXG4gICAgICBhY2w6IHRoaXMucHJvcHMuY291cnNlLmlzVGVtcGxhdGUgPyBbXHJcbiAgICAgICAgYHJvbGU6VVNFUjpSYCAvLyAoT0sgdG8ga2VlcCBidXQgdGhpcyBjaGVjayBtaWdodCBiZWNvbWUgdW5uZXNjZXNhcnkgaWYgd2UgdG90YWxseSByZW1vdmUgdGhlIHBvc3NpYmlsaXR5IHRvIGVkaXQgdGVtcGxhdGVzKSBUZW1wbGF0ZSB0YXNrcyBzaG91bGQgbm90IGJlIHBvc3NpYmxlIHRvIG1vZGlmeS4gKEFuIEFETUlOIGNvdWxkIGJlbG9uZyB0byBhIHNjaG9vbCEgT3RoZXIgbm9uLWFkbWlucyBhdCB0aGF0IHNjaG9vbCBzaG91bGQgbm90IGJlIGFibGUgdG8gZWRpdCBpdClcclxuICAgICAgXSA6IFtcclxuICAgICAgICBgcm9sZTpVU0VSOlJgLFxyXG4gICAgICAgIGBzY2hvb2xSb2xlOiR7ZW52LmN1cnJlbnRVc2VyLnNjaG9vbH0vRU1QTE9ZRUU6U2BcclxuICAgICAgXSxcclxuICAgICAgc2Nob29sOiB0aGlzLnByb3BzLmNvdXJzZS5zY2hvb2xcclxuICAgIH07XHJcbiAgICB0YXNrQ29weS4kbWV0YSA9ICdhZGQnO1xyXG5cclxuICAgIGF3YWl0IHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7XHJcbiAgICAgIHRhc2s6IHRhc2tDb3B5LFxyXG4gICAgICB0aXRsZTogTGBSZWRpZ2VyYSBrb3BpZXJhZCB1cHBnaWZ0IHRpbGwgXCIke3RoaXMucHJvcHMubW9kdWxlLm5hbWV9XCJgLFxyXG4gICAgICB0YXNrQ3VzdG9taXphdGlvbjogdW5kZWZpbmVkXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFRhc2tQcm9wPFQgZXh0ZW5kcyBrZXlvZiBUYXNrPih0YXNrUHJvcDogVCkgOiBUYXNrW1RdIHtcclxuICAgIGNvbnN0IHt0YXNrLCB0YXNrQ3VzdG9taXphdGlvbn0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgY3VzdG9taXphdGlvbiA9IHRhc2tDdXN0b21pemF0aW9uICYmIHRhc2tDdXN0b21pemF0aW9uW3Rhc2tQcm9wXTtcclxuICAgIHJldHVybiBjdXN0b21pemF0aW9uICE9PSB1bmRlZmluZWQgP1xyXG4gICAgICBjdXN0b21pemF0aW9uIDpcclxuICAgICAgdGFza1t0YXNrUHJvcF07XHJcbiAgfVxyXG5cclxuICB1cGRhdGVUYXNrT3JDdXN0b21pemF0aW9uICh0YXNrUHJvcDoga2V5b2YgVGFzaywgdXBkYXRlcykge1xyXG4gICAgY29uc3Qge3Rhc2ssIHRhc2tDdXN0b21pemF0aW9ufSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCB3cml0ZUFjY2VzcyA9IHRhc2sgJiYgaGFzV3JpdGVBY2Nlc3MoZW52LmN1cnJlbnRVc2VyLCB0YXNrKTtcclxuICAgIGlmICh3cml0ZUFjY2VzcyAmJiAoIXRhc2tDdXN0b21pemF0aW9uIHx8IHRhc2tDdXN0b21pemF0aW9uW3Rhc2tQcm9wXSA9PT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICBjb25zdCBuZXdUYXNrID0gey4uLnRhc2t9O1xyXG4gICAgICBuZXdUYXNrW3Rhc2tQcm9wXSA9IHVwZGF0ZSh0YXNrW3Rhc2tQcm9wXSwgdXBkYXRlcyk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7dGFzazogbmV3VGFza30pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgbmV3Q3VzdG9taXphdGlvbiA9IHsuLi50YXNrQ3VzdG9taXphdGlvbn07XHJcbiAgICAgIG5ld0N1c3RvbWl6YXRpb25bdGFza1Byb3BdID0gdXBkYXRlIChcclxuICAgICAgICBuZXdDdXN0b21pemF0aW9uW3Rhc2tQcm9wXSB8fCB0YXNrW3Rhc2tQcm9wXSxcclxuICAgICAgICB1cGRhdGVzXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7dGFza0N1c3RvbWl6YXRpb246IG5ld0N1c3RvbWl6YXRpb259KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgY291cnNlLCBtb2R1bGUsIG9uQ2FuY2VsLCBvbkRlbGV0ZSwgaWRzTm90Q292ZXJlZEJ5QW55VGFzaywgc2VhcmNoTW9kZSB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IHsgdGFzaywgdGFza0N1c3RvbWl6YXRpb24sIHRpdGxlLCBzZWFyY2hSZXN1bHQsIHNlYXJjaE1hcmtlZElkcywgaXNTZWFyY2hpbmcgfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCBtYXJrZWRJZHMgPSBzZWFyY2hNb2RlID9cclxuICAgICAgc2VhcmNoTWFya2VkSWRzIDpcclxuICAgICAgdGFzay5jZW50cmFsQ29udGVudC5tYXAoeCA9PiB4LmlkKVxyXG4gICAgICAgIC5jb25jYXQodGFzay5hYmlsaXRpZXMubWFwKHggPT4geC5pZCkpXHJcbiAgICAgICAgLmNvbmNhdCh0YXNrLmtub3dsZWRnZVJlcXVpcmVtZW50cy5tYXAoeCA9PiB4LmlkKSk7XHJcblxyXG4gICAgY29uc3Qgd3JpdGVBY2Nlc3MgPSB0YXNrICYmIGhhc1dyaXRlQWNjZXNzKGVudi5jdXJyZW50VXNlciwgdGFzayk7XHJcbiAgICBjb25zdCB0YXNrVXJsVmFsaWQgPSB0YXNrICYmIHZhbGlkVXJsLmlzVXJpKHRhc2sudXJsKTtcclxuICAgIGNvbnN0IHtmZWF0dXJlc30gPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInN2LXNwYWNlci0yMHB4dnQgc3YtdmVydGljYWwgc3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZWNvbnRlbnQgc3YtbGF5b3V0IHN2LXNwYWNlci0yMHB4dnQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LXRleHQtcG9ydGxldCBzdi11c2UtbWFyZ2lucyBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi10ZXh0LXBvcnRsZXQtY29udGVudFwiPlxyXG4gICAgICAgICAgICA8aDEgY2xhc3NOYW1lPVwiaDFcIj57dGl0bGV9PC9oMT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtZmx1aWQtZ3JpZCBzdi1ncmlkLWtzZ3MxMiBzdi1sYXlvdXRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyIHN2LWNvbHVtbi02XCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiPlxyXG4gICAgICAgICAgICAgICAgPGgzPntzZWFyY2hNb2RlID9cclxuICAgICAgICAgICAgICAgICAgXCJGaWx0cmVyYSBww6Uga3Vuc2thcHNrcmF2XCIgOiB3cml0ZUFjY2VzcyA/XHJcbiAgICAgICAgICAgICAgICAgICAgXCJWw6RsaiBrdW5za2Fwc2tyYXZcIiA6XHJcbiAgICAgICAgICAgICAgICAgICAgXCJLdW5za2Fwc2tyYXZcIn08L2gzPlxyXG4gICAgICAgICAgICAgICAge3NlYXJjaE1vZGUgP1xyXG4gICAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICBNYXJrZXJhIGRlIGt1bnNrYXBza3JhdiBzb20gdXBwZ2lmdGVuIG3DpXN0ZSB0w6Rja2EuXHJcbiAgICAgICAgICAgICAgICAgIDwvcD4gOiB3cml0ZUFjY2VzcyAmJlxyXG4gICAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICBNYXJrZXJhIGRlIGt1bnNrYXBza3JhdiBzb20gZGluIHVwcGdpZnQgdMOkY2tlci5cclxuICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgPEtub3dsZWRnZU1hdHJpeFxyXG4gICAgICAgICAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM9e2NvdXJzZS5rbm93bGVkZ2VSZXF1aXJlbWVudHN9XHJcbiAgICAgICAgICAgICAgICAgIG1hcmtlZElkcz17bWFya2VkSWRzfVxyXG4gICAgICAgICAgICAgICAgICBpZHNUb01hcmtOb3RPaz17aWRzTm90Q292ZXJlZEJ5QW55VGFza31cclxuICAgICAgICAgICAgICAgICAgbWFya01vZGU9e3NlYXJjaE1vZGUgfHwgd3JpdGVBY2Nlc3N9XHJcbiAgICAgICAgICAgICAgICAgIG1pZ3JhdGVkSWRzPXt0YXNrICYmIHRhc2subWlncmF0ZWRUZXh0cyAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMua25vd2xlZGdlUmVxdWlyZW1lbnRzfVxyXG4gICAgICAgICAgICAgICAgICBvbk1hcmtDaGFuZ2VkPXt0aGlzLm9uTWFya0NoYW5nZWQuYmluZCh0aGlzKX1cclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiPlxyXG4gICAgICAgICAgICAgIDxTZWxlY3RSZWxhdGVkRG9jc1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucz17Y291cnNlLmFiaWxpdGllc31cclxuICAgICAgICAgICAgICAgIHRpdGxlPXt3cml0ZUFjY2VzcyB8fCBzZWFyY2hNb2RlID8gXCJWw6RsaiBmw7ZybcOlZ29yXCIgOiBcIkbDtnJtw6Vnb3JcIn1cclxuICAgICAgICAgICAgICAgIG1hcmtlZElkcz17bWFya2VkSWRzfVxyXG4gICAgICAgICAgICAgICAgbWFya01vZGU9e3dyaXRlQWNjZXNzIHx8IHNlYXJjaE1vZGV9XHJcbiAgICAgICAgICAgICAgICBtaWdyYXRlZElkcz17dGFzayAmJiB0YXNrLm1pZ3JhdGVkVGV4dHMgJiYgdGFzay5taWdyYXRlZFRleHRzLmFiaWxpdGllc31cclxuICAgICAgICAgICAgICAgIG9uTWFya0NoYW5nZWQ9e3RoaXMub25NYXJrQ2hhbmdlZC5iaW5kKHRoaXMpfVxyXG4gICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIj5cclxuICAgICAgICAgICAgICA8U2VsZWN0UmVsYXRlZERvY3NcclxuICAgICAgICAgICAgICAgIG9wdGlvbnM9e2NvdXJzZS5jZW50cmFsQ29udGVudH1cclxuICAgICAgICAgICAgICAgIHRpdGxlPXt3cml0ZUFjY2VzcyB8fCBzZWFyY2hNb2RlID8gXCJWw6RsaiBjZW50cmFsdCBpbm5laMOlbGxcIiA6IFwiQ2VudHJhbHQgaW5uZWjDpWxsXCJ9XHJcbiAgICAgICAgICAgICAgICBtYXJrZWRJZHM9e21hcmtlZElkc31cclxuICAgICAgICAgICAgICAgIG1hcmtNb2RlPXt3cml0ZUFjY2VzcyB8fCBzZWFyY2hNb2RlfVxyXG4gICAgICAgICAgICAgICAgbWlncmF0ZWRJZHM9e3Rhc2sgJiYgdGFzay5taWdyYXRlZFRleHRzICYmIHRhc2subWlncmF0ZWRUZXh0cy5jZW50cmFsQ29udGVudH1cclxuICAgICAgICAgICAgICAgIG9uTWFya0NoYW5nZWQ9e3RoaXMub25NYXJrQ2hhbmdlZC5iaW5kKHRoaXMpfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIHshc2VhcmNoTW9kZSAmJiA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+PGRpdiBjbGFzc05hbWU9e1wib3BlbkNsb3NlIGxhcmdlclwiICsgKHRoaXMuc3RhdGUuZnV0dXJlQWJpbGl0aWVzT3BlbiA/IFwiIG9wZW5cIiA6IFwiXCIpfT5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm9wZW5IZWFkZXJcIiBvbkNsaWNrPXsoKSA9PiB0aGlzLnNldFN0YXRlUHJvbWlzZWQoeyBmdXR1cmVBYmlsaXRpZXNPcGVuOiAhdGhpcy5zdGF0ZS5mdXR1cmVBYmlsaXRpZXNPcGVuIH0pfT5cclxuICAgICAgICAgICAgICAgIHt3cml0ZUFjY2VzcyA/XHJcbiAgICAgICAgICAgICAgICAgIDxwPlbDpGxqIHl0dGVybGlnYXJlIGFsdGVybmF0aXY8L3A+IDpcclxuICAgICAgICAgICAgICAgICAgPHA+WXR0ZXJsaWdhcmUgYWx0ZXJuYXRpdjwvcD59XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVuQ29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgPGg0PkZyYW10aWRzZsO2cm3DpWdvcjwvaDQ+XHJcblxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgICAgIHtmdXR1cmVBYmlsaXRpZXMubWFwKGZhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZCA9IHRhc2suZnV0dXJlQWJpbGl0aWVzLmluZGV4T2YoZmEpID49IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiIGtleT17ZmF9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17XCJjaGVja0JveFwiICsgKHNlbGVjdGVkID8gXCIgY2hlY2tlZFwiIDogXCJcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17d3JpdGVBY2Nlc3MgPyAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkVGFzayA9IHsgLi4udGFzayB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFRhc2suZnV0dXJlQWJpbGl0aWVzID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2suZnV0dXJlQWJpbGl0aWVzLmZpbHRlcihhID0+IGEgIT0gZmEpIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLmZ1dHVyZUFiaWxpdGllcy5jb25jYXQoZmEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHsgdGFzazogdXBkYXRlZFRhc2sgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHVuZGVmaW5lZH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj57ZmF9XHJcbiAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PjwvZGl2Pn1cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1sYXlvdXQgc3YtY29sdW1uLTZcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgICAgICAgIHtpc1NlYXJjaGluZyAmJiA8cD48U3Bpbm5lciAvPiBMYWRkYXIgdXBwZ2lmdGVyLi4uPC9wPn1cclxuICAgICAgICAgICAgICB7c2VhcmNoUmVzdWx0ID8gXHJcbiAgICAgICAgICAgICAgICAgLypcclxuICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICAqIFNlYXJjaCBSZXN1bHRzIEZyYWdlbnRcclxuICAgICAgICAgICAgICAgICAgKiBcclxuICAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgIDw+XHJcbiAgICAgICAgICAgICAgICA8U2VhcmNoUmVzdWx0c1xyXG4gICAgICAgICAgICAgICAgICBzZWFyY2hNYXJrZWRJZHM9e3NlYXJjaE1hcmtlZElkc31cclxuICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0PXtzZWFyY2hSZXN1bHR9XHJcbiAgICAgICAgICAgICAgICAgIHRhc2s9e3Rhc2t9XHJcbiAgICAgICAgICAgICAgICAgIHdyaXRlQWNjZXNzPXt3cml0ZUFjY2Vzc31cclxuICAgICAgICAgICAgICAgICAgdGFza0N1c3RvbWl6YXRpb249e3Rhc2tDdXN0b21pemF0aW9ufVxyXG4gICAgICAgICAgICAgICAgICBlZGl0VGFzaz17dGhpc30gLz5cclxuXHJcbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnQgPyBcclxuICAgICAgICAgICAgICAgICAgPGRpdiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogdGhpcy5zdGF0ZS5wcmV2aWV3VGFza0NvbnRlbnR9fSAvPlxyXG4gICAgICAgICAgICAgICAgOiB0YXNrICYmIDxQcmV2aWV3YWJsZVRhc2tGaWVsZHNcclxuICAgICAgICAgICAgICAgICAgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfVxyXG4gICAgICAgICAgICAgICAgICB0YXNrPXt0YXNrfVxyXG4gICAgICAgICAgICAgICAgICB0YXNrQ3VzdG9taXphdGlvbj17dGFza0N1c3RvbWl6YXRpb259XHJcbiAgICAgICAgICAgICAgICAgIGVkaXRUYXNrPXt0aGlzfSAvPn1cclxuXHJcbiAgICAgICAgICAgICAgICB7dGFzayAmJiA8VGFza1N0YXR1c0ZyYWdtZW50IHRhc2s9e3Rhc2t9IC8+fVxyXG4gICAgICAgICAgICAgIDwvPiA6IFxyXG5cclxuICAgICAgICAgICAgICAgICAvKlxyXG4gICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAgICAgICogRWRpdCBUYXNrcyBGcmFnbWVudFxyXG4gICAgICAgICAgICAgICAgICAqIFxyXG4gICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgPD5cclxuICAgICAgICAgICAgICAgIHt0YXNrICYmIDxCYXNpY0VkaXRhYmxlVGFza0ZpZWxkc1xyXG4gICAgICAgICAgICAgICAgICB0YXNrPXt0YXNrfVxyXG4gICAgICAgICAgICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cclxuICAgICAgICAgICAgICAgICAgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfVxyXG4gICAgICAgICAgICAgICAgICBmZWF0dXJlcz17ZmVhdHVyZXN9XHJcbiAgICAgICAgICAgICAgICAgIGVkaXRUYXNrPXt0aGlzfSAvPn1cclxuXHJcbiAgICAgICAgICAgICAgICB7dGFzayAmJiA8UHJldmlld2FibGVUYXNrRmllbGRzXHJcbiAgICAgICAgICAgICAgICAgIHdyaXRlQWNjZXNzPXt3cml0ZUFjY2Vzc31cclxuICAgICAgICAgICAgICAgICAgdGFzaz17dGFza31cclxuICAgICAgICAgICAgICAgICAgdGFza0N1c3RvbWl6YXRpb249e3Rhc2tDdXN0b21pemF0aW9ufVxyXG4gICAgICAgICAgICAgICAgICBlZGl0VGFzaz17dGhpc30gLz59XHJcblxyXG4gICAgICAgICAgICAgICAge3Rhc2sgJiYgPFRhc2tTdGF0dXNGcmFnbWVudCB0YXNrPXt0YXNrfSAvPn1cclxuICAgICAgICAgICAgICA8Lz59XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICB7dGFzayAmJiA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XHJcbiAgICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgPFNhdmVPckNhbmNlbEJ1dHRvbnMgd3JpdGVBY2Nlc3M9e3dyaXRlQWNjZXNzfSBlZGl0VGFzaz17dGhpc30gLz5cclxuICAgICAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1sYXlvdXRcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+PC9kaXY+XHJcbiAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IEwgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IFRhc2ssIENvdXJzZSwgQ291cnNlTW9kdWxlLCBBYmlsaXR5IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IEVkaXRUYXNrIH0gZnJvbSAnLi4vbW9kYWwtcGFnZXMvZWRpdC10YXNrJztcclxuaW1wb3J0IHsgSUNvdXJzZUVkaXRvckhvc3QgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvdXJzZS1lZGl0b3ItaG9zdCc7XHJcbmltcG9ydCB7IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzLCBoYXNNaWdyYXRlZFRleHRzIH0gZnJvbSBcIi4uL3V0aWxzXCI7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgaGFzV3JpdGVBY2Nlc3MgfSBmcm9tIFwiLi4vLi4vLi4vYWNjZXNzLWNvbnRyb2xcIjtcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdGFza0lkczogc3RyaW5nW107XHJcbiAgdGFza0N1c3RvbWl6YXRpb25zPzogeyBbdGFza0lkOiBzdHJpbmddOiBQYXJ0aWFsPFRhc2s+IH1cclxuICBjb3Vyc2U6IENvdXJzZTtcclxuICBtb2R1bGU6IENvdXJzZU1vZHVsZTtcclxuICBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrOiB7W2lkOiBzdHJpbmddOiB0cnVlfTtcclxuICBvblRhc2tBZGRlZDogKHRhc2s6IFRhc2ssIHRhc2tDdXN0b21pemF0aW9uPzogUGFydGlhbDxUYXNrPikgPT4gdm9pZDtcclxuICBvblRhc2tVcGRhdGVkOiAodGFzaykgPT4gdm9pZDtcclxuICBvblRhc2tDdXN0b21pemF0aW9uVXBkYXRlZDogKHRhc2tJZCwgY3VzdG9taXphdGlvbikgPT4gdm9pZDtcclxuICBvblRhc2tEZWxldGVkOiAoaWQpID0+IHZvaWQ7XHJcbiAgb25UYXNrUmVwbGFjZWQ6IChpZCwgdGFzaykgPT4gdm9pZDtcclxuICBob3N0OiBJQ291cnNlRWRpdG9ySG9zdDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFZGl0YWJsZVRhc2tMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge307XHJcbiAgfVxyXG5cclxuICBvcGVuVGFza0RpYWxvZyh0YXNrOiBUYXNrKSB7XHJcbiAgICBjb25zdCB7XHJcbiAgICAgIHRhc2tDdXN0b21pemF0aW9ucyxcclxuICAgICAgY291cnNlLFxyXG4gICAgICBob3N0LFxyXG4gICAgICBtb2R1bGUsXHJcbiAgICAgIHRhc2tJZHMsXHJcbiAgICAgIG9uVGFza0FkZGVkLFxyXG4gICAgICBvblRhc2tVcGRhdGVkLFxyXG4gICAgICBvblRhc2tDdXN0b21pemF0aW9uVXBkYXRlZCxcclxuICAgICAgb25UYXNrRGVsZXRlZCxcclxuICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzayxcclxuICAgICAgb25UYXNrUmVwbGFjZWRcclxuICAgIH0gPSB0aGlzLnByb3BzO1xyXG5cclxuICAgIGhvc3Qub3BlbkRpYWxvZyh7XHJcbiAgICAgIENvbXBvbmVudDogRWRpdFRhc2ssXHJcbiAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgdGFzayxcclxuICAgICAgICB0YXNrQ3VzdG9taXphdGlvbjogdGFza0N1c3RvbWl6YXRpb25zICYmIHRhc2tDdXN0b21pemF0aW9uc1t0YXNrLmlkXSxcclxuICAgICAgICBtb2R1bGUsXHJcbiAgICAgICAgY291cnNlLFxyXG4gICAgICAgIGhvc3QsXHJcbiAgICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzayxcclxuICAgICAgICBvblNhdmU6IHRhc2sgPT4ge1xyXG4gICAgICAgICAgY29uc3QgdXBkYXRlZFRhc2sgPSB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyh0YXNrLCBlbnYuY3VycmVudFVzZXIpO1xyXG4gICAgICAgICAgb25UYXNrVXBkYXRlZCh1cGRhdGVkVGFzayk7XHJcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblNhdmVDdXN0b21pemF0aW9uOiBjdXN0b21pemF0aW9uID0+IHtcclxuICAgICAgICAgIG9uVGFza0N1c3RvbWl6YXRpb25VcGRhdGVkKHRhc2suaWQsIGN1c3RvbWl6YXRpb24pO1xyXG4gICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25EZWxldGU6ICgpID0+IHtcclxuICAgICAgICAgIG9uVGFza0RlbGV0ZWQodGFzay5pZCk7XHJcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvblJlcGxhY2U6ICh0YXNrSWQ6IHN0cmluZywgbmV3VGFzazogVGFzaykgPT4ge1xyXG4gICAgICAgICAgb25UYXNrUmVwbGFjZWQodGFza0lkLCBuZXdUYXNrKTtcclxuICAgICAgICAgIGhvc3QuY2xvc2VEaWFsb2coKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uQ2FuY2VsOiAoKSA9PiBob3N0LmNsb3NlRGlhbG9nKClcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCBwcm9wcyA9IHRoaXMucHJvcHM7XHJcbiAgICByZXR1cm4gPGRpdj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YXNrQ29udGFpbmVyXCI+XHJcbiAgICAgICAge3Byb3BzLnRhc2tJZHMubWFwKGlkID0+IHByb3BzLmNvdXJzZS50YXNrcy5maW5kKHQgPT4gdC5pZCA9PT0gaWQpKS5tYXAodGFzayA9PiB7XHJcbiAgICAgICAgICBjb25zdCBjYW5VcGRhdGVUYXNrID0gaGFzV3JpdGVBY2Nlc3MoZW52LmN1cnJlbnRVc2VyLCB0YXNrKTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCIga2V5PXt0YXNrLmlkfT5cclxuICAgICAgICAgICAge2hhc1dyaXRlQWNjZXNzKGVudi5jdXJyZW50VXNlciwgdGFzaykgJiYgaGFzTWlncmF0ZWRUZXh0cyh0YXNrKSAmJiA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3twb3NpdGlvbjoncmVsYXRpdmUnLCB0b3A6JzAuMmVtJywgbGVmdDogJy0wLjdlbSd9fT5cclxuICAgICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBhZ2VsaW5lc1wiIHN0eWxlPXt7cG9zaXRpb246J2Fic29sdXRlJywgdG9wOiAwLCBsZWZ0OiAwLCBjb2xvcjonIzQ5YzM1YSd9fSAvPlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NhblVwZGF0ZVRhc2sgPyBcImVkaXRJdGVtXCIgOiBcInZpZXdJdGVtXCJ9IG9uQ2xpY2s9eygpID0+XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5UYXNrRGlhbG9nKHRhc2spfSAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICB7dGFzay5jb250ZW50ID9cclxuICAgICAgICAgICAgICAgIC8vIFJhdGhlciB0aGFuIGxpbmtpbmcgdG8gdXJsLCBzaG93IHRoZSB0YXNrJ3MgY29udGVudCAoYnkgb3BlbmluZ1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHRhc2sgZGlhbG9nKVxyXG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBvbkNsaWNrPXtldj0+e1xyXG4gICAgICAgICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLm9wZW5UYXNrRGlhbG9nKHRhc2spO1xyXG4gICAgICAgICAgICAgICAgfX0+e3Rhc2submFtZX08L2E+IDpcclxuICAgICAgICAgICAgICAgIDxhIGhyZWY9e3Rhc2sudXJsfSB0YXJnZXQ9XCJfYmxhbmtcIj57dGFzay5uYW1lfTwvYT59XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+O1xyXG4gICAgICAgIH0pfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGJyIC8+XHJcbiAgICAgIDxhIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpID0+IHtcclxuICAgICAgICBjb25zdCB7XHJcbiAgICAgICAgICBjb3Vyc2UsXHJcbiAgICAgICAgICBob3N0LFxyXG4gICAgICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzayxcclxuICAgICAgICAgIG1vZHVsZSxcclxuICAgICAgICAgIG9uVGFza0FkZGVkLFxyXG4gICAgICAgICAgb25UYXNrQ3VzdG9taXphdGlvblVwZGF0ZWQgfSA9IHRoaXMucHJvcHM7XHJcblxyXG4gICAgICAgIHByb3BzLmhvc3Qub3BlbkRpYWxvZyh7XHJcbiAgICAgICAgICBDb21wb25lbnQ6IEVkaXRUYXNrLFxyXG4gICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgc2VhcmNoTW9kZTogdHJ1ZSxcclxuICAgICAgICAgICAgbW9kdWxlLFxyXG4gICAgICAgICAgICBjb3Vyc2UsXHJcbiAgICAgICAgICAgIGhvc3QsXHJcbiAgICAgICAgICAgIGlkc05vdENvdmVyZWRCeUFueVRhc2ssXHJcbiAgICAgICAgICAgIG9uU2F2ZTogKGNob29zZW5UYXNrLCB0YXNrQ3VzdG9taXphdGlvbikgPT4ge1xyXG4gICAgICAgICAgICAgIGNob29zZW5UYXNrID0gdXBkYXRlTW9kaWZpY2F0aW9uQW5kQ3JlYXRpb25TdGFtcHMoY2hvb3NlblRhc2ssIGVudi5jdXJyZW50VXNlcik7XHJcbiAgICAgICAgICAgICAgb25UYXNrQWRkZWQoY2hvb3NlblRhc2ssIHRhc2tDdXN0b21pemF0aW9uKTtcclxuICAgICAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ2FuY2VsOiAoKSA9PiBob3N0LmNsb3NlRGlhbG9nKClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtc2VhcmNoXCIgYXJpYS1oaWRkZW4gLz4gU8O2ayB1cHBnaWZ0PC9hPlxyXG4gICAgICAmbmJzcDtcclxuICAgICAgPGEgb25DbGljaz17KCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgY291cnNlLCBob3N0LCBtb2R1bGUsIHRhc2tJZHMsIG9uVGFza0FkZGVkLCBvblRhc2tVcGRhdGVkLCBvblRhc2tEZWxldGVkLCBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgICAgIGhvc3Qub3BlbkRpYWxvZyh7XHJcbiAgICAgICAgICBDb21wb25lbnQ6IEVkaXRUYXNrLFxyXG4gICAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgbW9kdWxlLFxyXG4gICAgICAgICAgICBjb3Vyc2UsXHJcbiAgICAgICAgICAgIGhvc3QsXHJcbiAgICAgICAgICAgIGlkc05vdENvdmVyZWRCeUFueVRhc2ssXHJcbiAgICAgICAgICAgIG9uU2F2ZTogbmV3VGFzayA9PiB7XHJcbiAgICAgICAgICAgICAgbmV3VGFzayA9IHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzKG5ld1Rhc2ssIGVudi5jdXJyZW50VXNlcik7XHJcbiAgICAgICAgICAgICAgb25UYXNrQWRkZWQobmV3VGFzayk7XHJcbiAgICAgICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkNhbmNlbDogKCkgPT4gaG9zdC5jbG9zZURpYWxvZygpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH19IGNsYXNzTmFtZT1cImJ0blwiPlxyXG4gICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXNcIiBhcmlhLWhpZGRlbiAvPiBMw6RnZyB0aWxsIGVnZW4gdXBwZ2lmdFxyXG4gICAgICA8L2E+XHJcbiAgICA8L2RpdiA+XHJcbiAgfVxyXG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBmaW5kRE9NTm9kZSB9IGZyb20gJ3JlYWN0LWRvbSc7XHJcbmltcG9ydCB7IENvdXJzZSwgQ291cnNlTW9kdWxlLCBJbWFnZSwgVGFzaywgRG9jdW1lbnQsIEFiaWxpdHkgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XHJcbmltcG9ydCB7IEVkaXRhYmxlUmVzb3VyY2VMaXN0IH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvZWRpdGFibGUtcmVzb3VyY2UtbGlzdCc7XHJcbmltcG9ydCB7IEVkaXRhYmxlVGFza0xpc3QgfSBmcm9tICcuLi9zdWItY29tcG9uZW50cy9lZGl0YWJsZS10YXNrLWxpc3QnO1xyXG5pbXBvcnQgdXBkYXRlIGZyb20gJ3JlYWN0LWFkZG9ucy11cGRhdGUnO1xyXG5pbXBvcnQgeyBJQ291cnNlRWRpdG9ySG9zdCB9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcclxuaW1wb3J0IHsgUmVuYW1lYWJsZVRleHQgfSBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvcmVuYW1lYWJsZS10ZXh0JztcclxuaW1wb3J0IHsgUmVtb3ZlSXRlbSB9IGZyb20gJy4uL3N1Yi1jb21wb25lbnRzL3JlbW92ZS1pdGVtJztcclxuaW1wb3J0IHsgY3JlYXRlVVVJRCB9IGZyb20gJ2tlZGJhY2tlbmQvY2xpZW50JztcclxuaW1wb3J0IHsgTCwgc2hvd0Vycm9yIH0gZnJvbSBcIi4uLy4uLy4uL3V0aWxzL3V0aWxzXCI7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHsgV3lzaXd5ZyB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnJztcclxuaW1wb3J0IGFjdGlvbnNfc3dlZGlzaCBmcm9tICcuLi8uLi91dGlsaXR5LWNvbXBvbmVudHMvd3lzaXd5Zy9hY3Rpb25zLXN2JztcclxuaW1wb3J0IHsgT3BlbkNsb3NlQm94IH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94JztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgY291cnNlOiBDb3Vyc2U7XHJcbiAgbW9kdWxlOiBDb3Vyc2VNb2R1bGU7XHJcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3Q7XHJcbiAgaWRzTm90Q292ZXJlZEJ5QW55VGFzazoge1tpZDogc3RyaW5nXTogdHJ1ZX07XHJcbiAgb25SZW9yZGVyOiAoZGlyZWN0aW9uOiAxIHwgLTEpID0+IHZvaWQ7XHJcbiAgZ2V0T3JkZXJlZE1vZHVsZXM6ICgpPT5Db3Vyc2VNb2R1bGVbXTtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBlZGl0TWFuZGF0b3J5Q29udGVudDogYm9vbGVhbjtcclxufVxyXG5cclxuY29uc3QgREVGQVVMVF9LTk9XTEVER0VfTUFUUklYID0gW3tcclxuICBhYmlsaXR5SWRzOiBbXSxcclxuICBFSWRzOiBbXSxcclxuICBDSWRzOiBbXSxcclxuICBBSWRzOiBbXVxyXG59XTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb3Vyc2VNb2R1bGVDb21wb25lbnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGVkaXRNYW5kYXRvcnlDb250ZW50OiBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0TW9kdWxlSW5kZXgoKSB7XHJcbiAgICBjb25zdCB7Y291cnNlLCBtb2R1bGV9ID0gdGhpcy5wcm9wcztcclxuICAgIHJldHVybiBjb3Vyc2UubW9kdWxlcy5maW5kSW5kZXgobSA9PiBtLmlkID09PSBtb2R1bGUuaWQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0TW9kdWxlT3JkZXJJbmRleCgpIHtcclxuICAgIGNvbnN0IHtjb3Vyc2UsIG1vZHVsZX0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3Qgb3JkZXJlZE1vZHVsZXMgPSB0aGlzLnByb3BzLmdldE9yZGVyZWRNb2R1bGVzKCk7XHJcbiAgICByZXR1cm4gb3JkZXJlZE1vZHVsZXMuZmluZEluZGV4KG0gPT4gbS5pZCA9PT0gbW9kdWxlLmlkKTtcclxuICB9XHJcblxyXG4gIHVwZGF0ZU1vZHVsZShtb2R1bGVVcGRhdGVzKSB7XHJcbiAgICBjb25zdCB7bW9kdWxlfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB1cGRhdGVkTW9kdWxlID0gdXBkYXRlKG1vZHVsZSwgbW9kdWxlVXBkYXRlcyk7XHJcbiAgICBjb25zdCBtb2R1bGVJbmRleCA9IHRoaXMuZ2V0TW9kdWxlSW5kZXgoKTtcclxuICAgIHRoaXMucHJvcHMuaG9zdC51cGRhdGUoeyBtb2R1bGVzOiB7ICRzcGxpY2U6IFtbbW9kdWxlSW5kZXgsIDEsIHVwZGF0ZWRNb2R1bGVdXSB9IH0pO1xyXG4gIH1cclxuXHJcbiAgLyogVGhpcyBtZXRob2Qgd29ya3MgZm9yIGJvdGggYWRkaW5nIG5ldyB0YXNrcyB0byB0aGUgdGFzayB0YWJsZVxyXG4gIGFuZCBhZGRpbmcgcmVmZXJlbmNlcyB0byBleGlzdGluZyB0YXNrcy4gVGhlIG1hZ2ljIG9mIHRoYXQgaGFzIHRvIGRvIHdpdGhcclxuICB3aGV0aGVyIHRhc2suJG1ldGEgPSAnYWRkJyBvciBub3QgYW5kIGlzIGRvbmUgaW4gRWRpdENvdXJzZS5zYXZlKClcclxuICAqL1xyXG4gIG9uVGFza0FkZGVkICh0YXNrOiBUYXNrLCB0YXNrQ3VzdG9taXphdGlvbjogUGFydGlhbDxUYXNrPiB8IG51bGwpIHtcclxuICAgIC8vIEFkZCB0YXNrIElEIHRvIG1vZHVsZSB0YXNrSWRzIGxpc3Q6XHJcbiAgICBjb25zdCBjb3Vyc2VVcGRhdGVzOmFueSA9IHt9O1xyXG4gICAgY29uc3QgdGFza0lkcyA9IHRoaXMucHJvcHMubW9kdWxlLnRhc2tJZHMuc2xpY2UoKTtcclxuICAgIHRhc2tJZHMucHVzaCh0YXNrLmlkKTtcclxuICAgIC8vIEFkZCBwaHlzaWNhbCBUYXNrIHRvIENvdXJzZS50YXNrcy5cclxuICAgIGlmICghdGhpcy5wcm9wcy5jb3Vyc2UudGFza3Muc29tZSh0ID0+IHQuaWQgPT09dGFzay5pZCkpIHtcclxuICAgICAgY291cnNlVXBkYXRlcy50YXNrcyA9IHskcHVzaDogW3Rhc2tdfTtcclxuICAgIH1cclxuICAgIGNvbnN0IGN1c3RvbWl6YXRpb25zID0gey4uLih0aGlzLnByb3BzLm1vZHVsZS50YXNrQ3VzdG9taXphdGlvbnMgfHwge30pfTtcclxuICAgIGlmICh0YXNrQ3VzdG9taXphdGlvbikgY3VzdG9taXphdGlvbnNbdGFzay5pZF0gPSB0YXNrQ3VzdG9taXphdGlvbjtcclxuICAgIGNvbnN0IG1vZHVsZUluZGV4ID0gdGhpcy5nZXRNb2R1bGVJbmRleCgpO1xyXG4gICAgY291cnNlVXBkYXRlcy5tb2R1bGVzID0ge307XHJcbiAgICBjb3Vyc2VVcGRhdGVzLm1vZHVsZXNbbW9kdWxlSW5kZXhdID0ge1xyXG4gICAgICB0YXNrSWRzOiB7JHNldDogdGFza0lkc30sXHJcbiAgICAgIHRhc2tDdXN0b21pemF0aW9uczogeyRzZXQ6IGN1c3RvbWl6YXRpb25zfVxyXG4gICAgfTtcclxuICAgIC8vIFVwZGF0ZSBtb2R1bGVcclxuICAgIHRoaXMucHJvcHMuaG9zdC51cGRhdGUoY291cnNlVXBkYXRlcyk7XHJcbiAgfVxyXG5cclxuICBvblRhc2tVcGRhdGVkICh0YXNrOiBUYXNrKSB7XHJcbiAgICBpZiAoIXRhc2suJG1ldGEpIHRocm93IG5ldyBFcnJvcihMYEhvcHBzYW4sIGJsZXYgbGl0ZSBrbmFzLiBGZWwgSUQ6ICR7J1BhN0RxJ31gKTtcclxuICAgIGNvbnN0IHRhc2tJbmRleCA9IHRoaXMucHJvcHMuY291cnNlLnRhc2tzLmZpbmRJbmRleCh0ID0+IHQuaWQgPT09IHRhc2suaWQpO1xyXG4gICAgaWYgKHRhc2tJbmRleCA+PSAwKSB7XHJcbiAgICAgIHRoaXMucHJvcHMuaG9zdC51cGRhdGUoe3Rhc2tzOiB7JHNwbGljZTogW1t0YXNrSW5kZXgsIDEsIHRhc2tdXX19KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uVGFza0N1c3RvbWl6ZWQgKHRhc2tJZDogc3RyaW5nLCBjdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+KSB7XHJcbiAgICBjb25zdCBjdXN0b21pemF0aW9ucyA9IHsuLi4odGhpcy5wcm9wcy5tb2R1bGUudGFza0N1c3RvbWl6YXRpb25zIHx8IHt9KX07XHJcbiAgICBjdXN0b21pemF0aW9uc1t0YXNrSWRdID0gY3VzdG9taXphdGlvbjtcclxuICAgIHRoaXMudXBkYXRlTW9kdWxlKHt0YXNrQ3VzdG9taXphdGlvbnM6IHskc2V0OiBjdXN0b21pemF0aW9uc319KTtcclxuICB9XHJcblxyXG4gIG9uVGFza0RlbGV0ZWQgKGlkOiBzdHJpbmcpIHtcclxuICAgIC8vIFJlbW92ZSB0YXNrIElEIGZyb20gbW9kdWxlIHRhc2tJZHMgbGlzdC5cclxuICAgIC8vIFRoaXMgZGVwZW5kcyBvbiB0aGUgZmFjdCB0aGF0IEVkaXRDb3Vyc2UuX3NldFN0YXRlKCkgbWFpbnRhaW5zXHJcbiAgICAvLyByZW1vdmVkIFRhc2sgbGlua3MgKHdoaWNoIGl0IGFjdHVhbGx5IGRvZXMgKG9yIHNob3VsZCBkbyBhdCBsZWFzdCkpLlxyXG4gICAgdGhpcy51cGRhdGVNb2R1bGUoe1xyXG4gICAgICB0YXNrSWRzOiB7JHNldDogdGhpcy5wcm9wcy5tb2R1bGUudGFza0lkcy5maWx0ZXIodGlkID0+IHRpZCAhPT0gaWQpfSxcclxuICAgICAgdGFza0N1c3RvbWl6YXRpb25zOiB7XHJcbiAgICAgICAgJGFwcGx5OiBjdXN0b21pemF0aW9ucyA9PiB7XHJcbiAgICAgICAgICBjb25zdCBjb3B5ID0gey4uLmN1c3RvbWl6YXRpb25zfTtcclxuICAgICAgICAgIGRlbGV0ZSBjb3B5W2lkXTtcclxuICAgICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBvblRhc2tSZXBsYWNlZCAoaWQ6IHN0cmluZywgdGFzazogVGFzaykge1xyXG4gICAgY29uc3QgaWR4VGFzayA9IHRoaXMucHJvcHMubW9kdWxlLnRhc2tJZHMuaW5kZXhPZihpZCk7XHJcbiAgICBpZiAoaWR4VGFzayA8IDApIHtcclxuICAgICAgc2hvd0Vycm9yKExgS3VuZGUgaW50ZSBzcGFyYSB1cHBnaWZ0LiBGZWxrb2QgZDcya1FgKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbW9kdWxlVXBkYXRlcyA9IHtcclxuICAgICAgLy8gUmVwbGFjZSBvbGQgaWQgd2l0aCBuZXcgaWQ6XHJcbiAgICAgIHRhc2tJZHM6IHskc3BsaWNlOiBbW2lkeFRhc2ssIDEsIHRhc2suaWRdXX0sXHJcbiAgICAgIHRhc2tDdXN0b21pemF0aW9uczoge1xyXG4gICAgICAgICRhcHBseTogY3VzdG9taXphdGlvbnMgPT4ge1xyXG4gICAgICAgICAgY29uc3QgY29weSA9IHsuLi5jdXN0b21pemF0aW9uc307XHJcbiAgICAgICAgICBkZWxldGUgY29weVtpZF07XHJcbiAgICAgICAgICByZXR1cm4gY29weTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IHVwZGF0ZWRNb2R1bGUgPSB1cGRhdGUodGhpcy5wcm9wcy5tb2R1bGUsIG1vZHVsZVVwZGF0ZXMpO1xyXG4gICAgY29uc3QgbW9kdWxlSW5kZXggPSB0aGlzLmdldE1vZHVsZUluZGV4KCk7XHJcbiAgICB0aGlzLnByb3BzLmhvc3QudXBkYXRlKHtcclxuICAgICAgLy8gQXBwbHkgbW9kdWxlVXBkYXRlcyBmcm9tIGFib3ZlOlxyXG4gICAgICBtb2R1bGVzOiB7ICRzcGxpY2U6IFtbbW9kdWxlSW5kZXgsIDEsIHVwZGF0ZWRNb2R1bGVdXSB9LFxyXG4gICAgICAvLyBBZGQgdGhlIG5ldyB0YXNrIHRvIENvdXJzZS50YXNrcy5cclxuICAgICAgLy8gRG9uJ3QgcmVtb3ZlIHRoZSBvbGQgb25lISBXaHk/IEJlY2F1c2UgaXQgbWF5IGJlIHJlZmVyZW5jZWRcclxuICAgICAgLy8gYnkgYW5vdGhlciBtb2R1bGUgaW4gc2FtZSBjb3Vyc2UhIExldCBFZGl0Q291cnNlLl9zZXRTdGF0ZSgpXHJcbiAgICAgIC8vIGRvIHRoZSBcImdhcmJhZ2UgY29sbGVjdGlvblwiIGluc3RlYWQuXHJcbiAgICAgIHRhc2tzOiB7ICRzZXQ6IHRoaXMucHJvcHMuY291cnNlLnRhc2tzLmNvbmNhdCh0YXNrKX1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgeyBjb3Vyc2UsIGhvc3QsIG1vZHVsZSwgaWRzTm90Q292ZXJlZEJ5QW55VGFzayB9ID0gdGhpcy5wcm9wcztcclxuICAgIGNvbnN0IG1vZHVsZUluZGV4ID0gdGhpcy5nZXRNb2R1bGVJbmRleCgpO1xyXG4gICAgY29uc3QgbW9kdWxlT3JkZXJlZEluZGV4ID0gdGhpcy5nZXRNb2R1bGVPcmRlckluZGV4KCk7XHJcbiAgICBsZXQga25vd2xlZGdlTWF0cml4RGl2O1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZU1vZHVsZSA9IHRoaXMudXBkYXRlTW9kdWxlLmJpbmQodGhpcyk7XHJcbiAgICBsZXQgd2VlayA9IDE7XHJcbiAgICBjb25zdCBzdGFydFdlZWtPcHRpb25zID0gW1wiLS1cIl07XHJcbiAgICBjb25zdCBlbmRXZWVrT3B0aW9ucyA9IFtcIi0tXCJdO1xyXG4gICAgZm9yIChsZXQgaT0wOyBpPDUxOyArK2kpIHtcclxuICAgICAgc3RhcnRXZWVrT3B0aW9ucy5wdXNoKCcnKyB3ZWVrKTtcclxuICAgICAgZW5kV2Vla09wdGlvbnMucHVzaCgnJysgKyt3ZWVrKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJjb3Vyc2UtbW9kdWxlIGtlZF9ib3hlZFwiIHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZSd9fT5cclxuICAgICAgPGgzPjxSZW5hbWVhYmxlVGV4dCBlYWdlcj17dHJ1ZX1cclxuICAgICAgICBjbGlja0FkdmVydGlzZVRleHQ9XCJOYW1ubMO2cyBtb2R1bFwiXHJcbiAgICAgICAgbWF4Q2hhcnM9ezEwMH1cclxuICAgICAgICB0ZXh0PXttb2R1bGUubmFtZX1cclxuICAgICAgICBvbkNoYW5nZT17bmV3TmFtZSA9PiB1cGRhdGVNb2R1bGUoe25hbWU6IHskc2V0OiBuZXdOYW1lfX0pfSAvPlxyXG4gICAgICA8L2gzPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImFsaWduLWhvcml6b250YWwgc3BhY2VkXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSBjZW50ZXJcIj5cclxuICAgICAgICAgIDxwPlN0YXJ0dmVja2E8L3A+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSBjZW50ZXJcIj5cclxuICAgICAgICAgIDxzZWxlY3QgdmFsdWU9e21vZHVsZS5zdGFydFdlZWsgfHwgXCItLVwifVxyXG4gICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gdXBkYXRlTW9kdWxlKHtzdGFydFdlZWs6IHtcclxuICAgICAgICAgICAgICAkc2V0OiBldi50YXJnZXQudmFsdWUgPT09ICctLScgP1xyXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkIDpcclxuICAgICAgICAgICAgICAgIHBhcnNlSW50KGV2LnRhcmdldC52YWx1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSl9PlxyXG4gICAgICAgICAgICB7c3RhcnRXZWVrT3B0aW9ucy5tYXAobyA9PiA8b3B0aW9uIGtleT17b30gdmFsdWU9e299PntvfTwvb3B0aW9uPil9XHJcbiAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIGNlbnRlclwiPlxyXG4gICAgICAgICAgPHA+U2x1dHZlY2thPC9wPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gY2VudGVyXCI+XHJcbiAgICAgICAgICA8c2VsZWN0IHZhbHVlPXttb2R1bGUuZW5kV2VlayB8fCBcIi0tXCJ9XHJcbiAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB1cGRhdGVNb2R1bGUoe2VuZFdlZWs6IHtcclxuICAgICAgICAgICAgICAkc2V0OiBldi50YXJnZXQudmFsdWUgPT09ICctLScgP1xyXG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkIDpcclxuICAgICAgICAgICAgICAgIHBhcnNlSW50KGV2LnRhcmdldC52YWx1ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSl9PlxyXG4gICAgICAgICAgICB7ZW5kV2Vla09wdGlvbnMubWFwKG8gPT4gPG9wdGlvbiBrZXk9e299IHZhbHVlPXtvfT57b308L29wdGlvbj4pfVxyXG4gICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8aDQ+S3Vyc21vZHVsZW5zIGludHJvZHVrdGlvbjwvaDQ+XHJcbiAgICAgIDxXeXNpd3lnXHJcbiAgICAgICAgYWN0aW9ucz17W1xyXG4gICAgICAgICAgXCJib2xkXCIsXHJcbiAgICAgICAgICBcIml0YWxpY1wiLFxyXG4gICAgICAgICAgXCJ1bmRlcmxpbmVcIixcclxuICAgICAgICAgIFwic3RyaWtldGhyb3VnaFwiLFxyXG4gICAgICAgICAgXCJoZWFkaW5nMlwiLFxyXG4gICAgICAgICAgXCJoZWFkaW5nM1wiLFxyXG4gICAgICAgICAgXCJvbGlzdFwiLFxyXG4gICAgICAgICAgXCJ1bGlzdFwiLFxyXG4gICAgICAgICAgXCJsaW5lXCIsXHJcbiAgICAgICAgICBcImxpbmtcIixcclxuICAgICAgICAgIFwiaW1hZ2VcIl19XHJcbiAgICAgICAgZGVmYXVsdEFjdGlvbnM9e2FjdGlvbnNfc3dlZGlzaH1cclxuICAgICAgICBodG1sPXttb2R1bGUubWFuZGF0b3J5Q29udGVudH1cclxuICAgICAgICBvbkNoYW5nZT17aHRtbCA9PiB7XHJcbiAgICAgICAgICB1cGRhdGVNb2R1bGUoe21hbmRhdG9yeUNvbnRlbnQ6IHskc2V0OiBodG1sfX0pXHJcbiAgICAgICAgfX0gLz5cclxuXHJcbiAgICAgIDxoND5VcHBnaWZ0ZXI8L2g0PlxyXG4gICAgICA8RWRpdGFibGVUYXNrTGlzdFxyXG4gICAgICAgIHRhc2tJZHM9e21vZHVsZS50YXNrSWRzfVxyXG4gICAgICAgIHRhc2tDdXN0b21pemF0aW9ucz17bW9kdWxlLnRhc2tDdXN0b21pemF0aW9uc31cclxuICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cclxuICAgICAgICBtb2R1bGU9e21vZHVsZX1cclxuICAgICAgICBob3N0PXtob3N0fVxyXG4gICAgICAgIGlkc05vdENvdmVyZWRCeUFueVRhc2s9e2lkc05vdENvdmVyZWRCeUFueVRhc2t9XHJcbiAgICAgICAgb25UYXNrQWRkZWQ9eyh0YXNrOiBUYXNrLCB0YXNrQ3VzdG9taXphdGlvbjogUGFydGlhbDxUYXNrPikgPT4gdGhpcy5vblRhc2tBZGRlZCh0YXNrLCB0YXNrQ3VzdG9taXphdGlvbil9XHJcbiAgICAgICAgb25UYXNrVXBkYXRlZD17KHRhc2s6IFRhc2spID0+IHRoaXMub25UYXNrVXBkYXRlZCh0YXNrKX1cclxuICAgICAgICBvblRhc2tDdXN0b21pemF0aW9uVXBkYXRlZD17KHRhc2tJZDogc3RyaW5nLCBjdXN0b21pemF0aW9uOiBQYXJ0aWFsPFRhc2s+KSA9PlxyXG4gICAgICAgICAgdGhpcy5vblRhc2tDdXN0b21pemVkKHRhc2tJZCwgY3VzdG9taXphdGlvbil9XHJcbiAgICAgICAgb25UYXNrRGVsZXRlZD17KGlkOiBzdHJpbmcpID0+IHRoaXMub25UYXNrRGVsZXRlZChpZCl9XHJcbiAgICAgICAgb25UYXNrUmVwbGFjZWQ9eyhpZDogc3RyaW5nLCB0YXNrOiBUYXNrKSA9PiB0aGlzLm9uVGFza1JlcGxhY2VkKGlkLCB0YXNrKX0gLz5cclxuXHJcbiAgICAgIDxoND5Nb2R1bHJlc3Vyc2VyPC9oND5cclxuICAgICAgPHAgY2xhc3NOYW1lPVwic3ViSGVhZGVyXCI+KEV2ZW50dWVsbGEgcmVzdXNlciBmw7ZyIHJlZG92aXNuaW5nIGF2IG1vZHVsZW4gc2FtdCBmw7ZyIG1vZHVsZW4gc29tIGhlbGhldCk8L3A+XHJcbiAgICAgIDxFZGl0YWJsZVJlc291cmNlTGlzdFxyXG4gICAgICAgIHJlc291cmNlcz17bW9kdWxlLnJlc291cmNlc31cclxuICAgICAgICBvblVwZGF0ZT17cmVzb3VyY2VzVXBkYXRlcyA9PiB1cGRhdGVNb2R1bGUoeyByZXNvdXJjZXM6IHJlc291cmNlc1VwZGF0ZXMgfSl9XHJcbiAgICAgICAgaG9zdD17aG9zdH0gLz5cclxuICAgICAgPGRpdiBzdHlsZT17e3Bvc2l0aW9uOiAnYWJzb2x1dGUnLCB0b3A6IDAsIHJpZ2h0OiAwfX0+XHJcbiAgICAgICAge21vZHVsZU9yZGVyZWRJbmRleCA+IDAgJiYgPHNwYW4+XHJcbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hcnJvdy1jaXJjbGUtdXAgc2VsZWN0YWJsZVwiXHJcbiAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpPT50aGlzLnByb3BzLm9uUmVvcmRlcigtMSl9IC8+IDwvc3Bhbj59XHJcbiAgICAgICAge21vZHVsZU9yZGVyZWRJbmRleCA8IGNvdXJzZS5tb2R1bGVzLmxlbmd0aCAtIDEgJiYgPHNwYW4+XHJcbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1hcnJvdy1jaXJjbGUtZG93biBzZWxlY3RhYmxlXCJcclxuICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcclxuICAgICAgICAgICAgb25DbGljaz17KCk9PnRoaXMucHJvcHMub25SZW9yZGVyKDEpfSAvPiA8L3NwYW4+fVxyXG4gICAgICAgIDxSZW1vdmVJdGVtXHJcbiAgICAgICAgICB0aXRsZT1cIlRhIGJvcnQgbW9kdWxlblwiXHJcbiAgICAgICAgICBzdHlsZT17e2Rpc3BsYXk6ICdpbmxpbmUtYmxvY2snfX1cclxuICAgICAgICAgIG9uQ2xpY2s9eygpPT5jb25maXJtKExgVGEgYm9ydCBtb2R1bCAke21vZHVsZS5uYW1lfT9gKSAmJiBob3N0LnVwZGF0ZSh7bW9kdWxlczogeyRzcGxpY2U6IFtbbW9kdWxlSW5kZXgsIDFdXX19KX0gLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgZmluZERPTU5vZGUgfSBmcm9tICdyZWFjdC1kb20nO1xyXG5pbXBvcnQgeyBDb3Vyc2UsIENvdXJzZU1vZHVsZSwgSW1hZ2UsIFRhc2ssIERvY3VtZW50LCBBYmlsaXR5IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBjcmVhdGVVVUlEIH0gZnJvbSAna2VkYmFja2VuZC9jbGllbnQnO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgdXBkYXRlIGZyb20gJ3JlYWN0LWFkZG9ucy11cGRhdGUnO1xyXG5pbXBvcnQgeyBJQ291cnNlRWRpdG9ySG9zdCB9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcclxuaW1wb3J0IHsgQ291cnNlTW9kdWxlQ29tcG9uZW50IH0gZnJvbSAnLi9jb3Vyc2UtbW9kdWxlJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgY291cnNlOiBDb3Vyc2U7XHJcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3Q7XHJcbiAgaWRzTm90Q292ZXJlZEJ5QW55VGFzazoge1tpZDogc3RyaW5nXTogdHJ1ZX07XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb3Vyc2VNb2R1bGVMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgX2VsZW06IEhUTUxEaXZFbGVtZW50O1xyXG4gIF9tb2R1bGVSZWZzOiB7W21vZHVsZUlkOiBzdHJpbmddOiBDb3Vyc2VNb2R1bGVDb21wb25lbnR9O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuX21vZHVsZVJlZnMgPSB7fTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhZGRNb2R1bGUoKSB7XHJcbiAgICB0aGlzLnByb3BzLmhvc3QudXBkYXRlKHttb2R1bGVzOiB7JHB1c2g6IFt7XHJcbiAgICAgIG5hbWU6IFwiTnkga3Vyc21vZHVsXCIsXHJcbiAgICAgIGlkOiBjcmVhdGVVVUlEKCksXHJcbiAgICAgIHJlc291cmNlczogW10sXHJcbiAgICAgIHRhc2tJZHM6IFtdXHJcbiAgICAgfSBhcyBDb3Vyc2VNb2R1bGVcclxuICAgIF19fSk7XHJcbiAgfVxyXG5cclxuICBnZXRPcmRlcmVkTW9kdWxlcygpIHtcclxuICAgIGNvbnN0IHsgY291cnNlIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgbW9kdWxlT3JkZXIgPSBjb3Vyc2UubW9kdWxlT3JkZXIgfHwgY291cnNlLm1vZHVsZXMubWFwKG0gPT4gbS5pZCk7XHJcbiAgICByZXR1cm4gbW9kdWxlT3JkZXJcclxuICAgICAgLy8gTWFwIG9yZGVyZWQgaWQgdG8gbW9kdWxlXHJcbiAgICAgIC5tYXAoaWQgPT4gY291cnNlLm1vZHVsZXMuZmluZChtID0+IG0uaWQgPT09IGlkKSlcclxuICAgICAgLy8gSWdub3JlIGVudHJpZXMgdGhhdCBvbmx5IGV4aXN0cyBpbiBtb2R1bGVPcmRlciBidXQgbm90IGluIG1vZHVsZXNcclxuICAgICAgLmZpbHRlcihtID0+ICEhbSlcclxuICAgICAgLy8gQXBwZW5kIG1vZHVsZXMgYXQgZW5kIHRoYXQgYXJlIG5vdCBsaXN0ZWQgaW4gbW9kdWxlT3JkZXJcclxuICAgICAgLmNvbmNhdCAoY291cnNlLm1vZHVsZXMuZmlsdGVyKG0gPT4gIW1vZHVsZU9yZGVyLmZpbmQoaWQgPT4gbS5pZCA9PT0gaWQpKSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyByZW9yZGVyIChtb2R1bGVJZDogc3RyaW5nLCBkaXJlY3Rpb246IC0xIHwgMSkge1xyXG4gICAgY29uc3QgeyBjb3Vyc2UgfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCBvcmRlcmVkTW9kdWxlcyA9IHRoaXMuZ2V0T3JkZXJlZE1vZHVsZXMoKTtcclxuICAgIGNvbnN0IG1vZHVsZUluZGV4ID0gb3JkZXJlZE1vZHVsZXMuZmluZEluZGV4KG0gPT4gbS5pZCA9PT0gbW9kdWxlSWQpO1xyXG4gICAgY29uc3QgbmV3TW9kdWxlSW5kZXggPSBtb2R1bGVJbmRleCArIGRpcmVjdGlvbjtcclxuICAgIGlmIChuZXdNb2R1bGVJbmRleCA8IDAgfHwgbmV3TW9kdWxlSW5kZXggPj0gb3JkZXJlZE1vZHVsZXMubGVuZ3RoKSB7XHJcbiAgICAgIC8vIENhbm5vdCBvcmRlciBvdXRzaWRlIGxpbWl0cy5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgY3VycmVudE1vZHVsZUF0UG9zaXRpb24gPSBvcmRlcmVkTW9kdWxlc1tuZXdNb2R1bGVJbmRleF07XHJcbiAgICBjb25zdCBtb2R1bGVPcmRlciA9IG9yZGVyZWRNb2R1bGVzLm1hcChtID0+IG0uaWQpO1xyXG4gICAgbW9kdWxlT3JkZXJbbmV3TW9kdWxlSW5kZXhdID0gbW9kdWxlSWQ7XHJcbiAgICBtb2R1bGVPcmRlclttb2R1bGVJbmRleF0gPSBjdXJyZW50TW9kdWxlQXRQb3NpdGlvbi5pZDtcclxuICAgIGNvbnN0IG9yaWdTY3JvbGxQb3MgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gICAgYXdhaXQgdGhpcy5wcm9wcy5ob3N0LnVwZGF0ZSh7XHJcbiAgICAgIG1vZHVsZU9yZGVyOiB7JHNldDogbW9kdWxlT3JkZXJ9XHJcbiAgICB9KTtcclxuICAgIC8vIE5vdywgc2Nyb2xsIHNtb290aGx5IGludG8gdmlldyBhZnRlciByZW9yZGVyaW5nOlxyXG4gICAgY29uc3QgZWxlbU1vZHVsZTogSFRNTEVsZW1lbnQgPSBmaW5kRE9NTm9kZSh0aGlzLl9tb2R1bGVSZWZzW21vZHVsZUlkXSk7XHJcbiAgICBpZiAoZWxlbU1vZHVsZSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyh7dG9wOiBvcmlnU2Nyb2xsUG9zfSk7IC8vIFByb2hpYml0IGRlZmF1bHQgc2Nyb2xsaW5nIGRpcmVjdGx5IHVwd2FyZHMgb24gbW92ZSB1cC5cclxuICAgICAgICBlbGVtTW9kdWxlLnNjcm9sbEludG9WaWV3KHtiZWhhdmlvcjogJ3Ntb290aCcsIGJsb2NrOiAnc3RhcnQnfSk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAvLyBPbmx5IENocm9tZSBiZXRhIHN1cHBvcnRzIHRoZSBhcmd1bWVudHMgZ2l2ZW4gYWJvdmUuIERlZmF1bHQgZm9yIG9sZGVyIGJyb3dzZXJzLlxyXG4gICAgICAgIHdpbmRvdy5zY3JvbGxUbyhudWxsLCBvcmlnU2Nyb2xsUG9zKTtcclxuICAgICAgICBlbGVtTW9kdWxlLnNjcm9sbEludG9WaWV3KHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGNvdXJzZSwgaG9zdCwgaWRzTm90Q292ZXJlZEJ5QW55VGFza30gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgbW9kdWxlT3JkZXIgPSBjb3Vyc2UubW9kdWxlT3JkZXIgfHwgY291cnNlLm1vZHVsZXMubWFwKG0gPT4gbS5pZCk7XHJcbiAgICBjb25zdCBvcmRlcmVkTW9kdWxlcyA9IHRoaXMuZ2V0T3JkZXJlZE1vZHVsZXMoKTtcclxuXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1odG1sLXBvcnRsZXQgc3YtcG9ydGxldFwiIHJlZj17ZWxlbSA9PiB0aGlzLl9lbGVtID0gZWxlbX0+XHJcbiAgICAgIHtvcmRlcmVkTW9kdWxlcy5tYXAobW9kdWxlID0+IDxDb3Vyc2VNb2R1bGVDb21wb25lbnRcclxuICAgICAgICByZWY9e2VsZW0gPT4gdGhpcy5fbW9kdWxlUmVmc1ttb2R1bGUuaWRdID0gZWxlbX1cclxuICAgICAgICBrZXk9e21vZHVsZS5pZH1cclxuICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cclxuICAgICAgICBtb2R1bGU9e21vZHVsZX1cclxuICAgICAgICBvblJlb3JkZXI9e2RpcmVjdGlvbiA9PiB0aGlzLnJlb3JkZXIobW9kdWxlLmlkLCBkaXJlY3Rpb24pfVxyXG4gICAgICAgIGdldE9yZGVyZWRNb2R1bGVzPXsoKT0+dGhpcy5nZXRPcmRlcmVkTW9kdWxlcygpfVxyXG4gICAgICAgIGhvc3Q9e2hvc3R9XHJcbiAgICAgICAgaWRzTm90Q292ZXJlZEJ5QW55VGFzaz17aWRzTm90Q292ZXJlZEJ5QW55VGFza31cclxuICAgICAgIC8+KX1cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlXCIgb25DbGljaz17KCk9PnRoaXMuYWRkTW9kdWxlKCl9PlxyXG4gICAgICAgIEzDpGdnIHRpbGwga3Vyc21vZHVsXHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgeyBSZXBvLCBSZXBvQ29tbXVuaWNhdG9yIH0gZnJvbSAnLi9yZXBvJztcclxuaW1wb3J0IHsgQ291cnNlLCBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgZmxhdHRlbiwgTCB9IGZyb20gXCIuLi91dGlscy91dGlsc1wiO1xyXG5cclxuY2xhc3MgU2Nob29sQ291cnNlc1JlcG8gZXh0ZW5kcyBSZXBvPENvdXJzZT4ge1xyXG4gIHByaXZhdGUgX3NjaG9vbElkOiBzdHJpbmc7XHJcbiAgZ2V0U2Nob29sSWQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbnN1cmVIYXNEYXRhKCkudGhlbigoKT0+dGhpcy5fc2Nob29sSWQpO1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IoZ2V0U2Nob29sTmFtZTogKCk9PnN0cmluZykge1xyXG4gICAgc3VwZXIoe1xyXG4gICAgICBxdWVyeTogYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNjaG9vbE5hbWUgPSBnZXRTY2hvb2xOYW1lKCk7XHJcbiAgICAgICAgY29uc3Qgc2Nob29scyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50Lmxpc3Q8U2Nob29sPihcclxuICAgICAgICAgIFwic2Nob29sc1wiLCB7XHJcbiAgICAgICAgICAgIG5hbWU6IHNjaG9vbE5hbWUsXHJcbiAgICAgICAgICAgIGluY2x1ZGU6IFtcImNvdXJzZXNcIl1cclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3NjaG9vbElkID0gc2Nob29scy5sZW5ndGggPiAwICYmIHNjaG9vbHNbMF0uaWQ7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9zY2hvb2xJZCkgdGhyb3cgbmV3IEVycm9yKExgU2tvbGFuICR7c2Nob29sTmFtZX0gZmlubnMgaW50ZSByZWdpc3RyZXJhZCBpIHN5c3RlbWV0LlxyXG4gICAgICAgICAgS29udGFrdGEgZW4gYWRtaW5pc3RyYXTDtnIgZsO2ciBLdXJzYnlnZ2FydmVya3R5Z2V0IG9jaCBiZSBvbSBhdHQgbMOkZ2dhIHRpbGwgc2tvbGFuIG1lZCBuYW1uZXQgXCIke3NjaG9vbE5hbWV9XCJgKTtcclxuICAgICAgICByZXR1cm4gZmxhdHRlbihzY2hvb2xzLm1hcChzY2hvb2wgPT4gc2Nob29sLmNvdXJzZXMpKTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBteVNjaG9vbENvdXJzZXNSZXBvID0gbmV3IFNjaG9vbENvdXJzZXNSZXBvKCgpPT5lbnYuY3VycmVudFVzZXIuc2Nob29sKTtcclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMLCBzaG93RXJyb3IsIGNvbXBhcmVQcm9wIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBDb3Vyc2UgfSBmcm9tIFwia2VkYmFja2VuZC9tb2RlbHNcIjtcclxuaW1wb3J0IHsgbXlTY2hvb2xDb3Vyc2VzUmVwbyB9IGZyb20gXCIuLi8uLi8uLi9yZXBvcy9zY2hvb2wtY291cnNlc1wiO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4vc3Bpbm5lclwiO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IHNob3J0RGF0ZUZvcm1hdCB9IGZyb20gXCIuLi91dGlsc1wiO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBzY2hvb2xDb3Vyc2VzOiBDb3Vyc2VbXSB8IG51bGw7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTY2hvb2xDb3Vyc2VzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBzY2hvb2xDb3Vyc2VzOiBudWxsXHJcbiAgICB9XHJcbiAgICB0aGlzLm9uU2Nob29sQ291cnNlc1VwZGF0ZWQgPSB0aGlzLm9uU2Nob29sQ291cnNlc1VwZGF0ZWQuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgbXlTY2hvb2xDb3Vyc2VzUmVwby5zdWJzY3JpYmUodGhpcy5vblNjaG9vbENvdXJzZXNVcGRhdGVkKS5jYXRjaChzaG93RXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XHJcbiAgICBteVNjaG9vbENvdXJzZXNSZXBvLnVuc3Vic2NyaWJlKHRoaXMub25TY2hvb2xDb3Vyc2VzVXBkYXRlZCk7XHJcbiAgfVxyXG5cclxuICBvblNjaG9vbENvdXJzZXNVcGRhdGVkKHNjaG9vbENvdXJzZXM6IENvdXJzZVtdKSB7XHJcbiAgICBjb25zdCBjb21wYXJlTmFtZSA9IGNvbXBhcmVQcm9wKFwibmFtZVwiKTtcclxuICAgIGNvbnN0IGNvbXBhcmVDcmVhdGVkRGF0ZSA9IGNvbXBhcmVQcm9wKFwiY3JlYXRlZERhdGVcIik7XHJcbiAgICBzY2hvb2xDb3Vyc2VzLnNvcnQoKGEsYikgPT4gY29tcGFyZU5hbWUoYSxiKSB8fCBjb21wYXJlQ3JlYXRlZERhdGUoYSxiKSk7XHJcbiAgICB0aGlzLnNldFN0YXRlKHtzY2hvb2xDb3Vyc2VzfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7c2Nob29sQ291cnNlc30gPSB0aGlzLnN0YXRlO1xyXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIj5cclxuICAgICAgICA8aDM+U2tvbGFucyBrdXJzZXI8L2gzPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lciBvZGQtZXZlblwiPlxyXG4gICAgICAgICAgeyFzY2hvb2xDb3Vyc2VzID9cclxuICAgICAgICAgICAgPHA+PFNwaW5uZXIgLz4gTGFkZGFyIHNrb2xhbnMga3Vyc2VyPC9wPiA6XHJcbiAgICAgICAgICAgIHNjaG9vbENvdXJzZXMubWFwKGNvdXJzZSA9PiA8ZGl2IGNsYXNzTmFtZT1cInNjaG9vbENvdXJzZVwiIGtleT17Y291cnNlLmlkfT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3AgcHVsbC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgPExpbmtcclxuICAgICAgICAgICAgICAgICAgdG89e2AvY291cnNlcy8ke2NvdXJzZS5pZH0vZWRpdGB9XHJcbiAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXRJdGVtXCJcclxuICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPXtgL2NvdXJzZXMvJHtjb3Vyc2UuaWR9L2VkaXRgfT57Y291cnNlLm5hbWV9PC9MaW5rPjwvZGl2PlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICB7Y291cnNlLmFjdGl2ZSAmJiA8ZGl2IGNsYXNzTmFtZT1cInBpbGwgYWN0aXZlXCI+QWt0aXY8L2Rpdj59XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAge2NvdXJzZS5hY3RpdmUgJiYgIWNvdXJzZS5wdWJsaXNoYWJsZSAmJiA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwaWxsIGluY29tcGxldGVcIj5JbmtvbXBsZXR0PC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICA8cD57Y291cnNlLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAge2NvdXJzZS5tb2RpZmllZEJ5ID9cclxuICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+UmVkaWdlcmFkIGF2IHtjb3Vyc2UubW9kaWZpZWRCeS5uYW1lfSAvIHtzaG9ydERhdGVGb3JtYXQoY291cnNlLm1vZGlmaWVkRGF0ZSl9PC9wPiA6XHJcbiAgICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzbWFsbFwiIHN0eWxlPXt7Zm9udFN0eWxlOiAnaXRhbGljJ319PiA8L3A+fVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2Pil9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAge2xvY2F0aW9uLmhhc2ggIT09IFwiIy9jb3Vyc2VzL25ld1wiICYmIDxMaW5rXHJcbiAgICAgICAgICBjbGFzc05hbWU9XCJidG5cIlxyXG4gICAgICAgICAgdG89XCIvY291cnNlcy9uZXdcIlxyXG4gICAgICAgICAgb25DbGljaz17KCk9PndpbmRvdy5zY3JvbGwoMCwgMCl9PlxyXG4gICAgICAgICAgU2thcGEgbnkga3Vyc1xyXG4gICAgICAgIDwvTGluaz59XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IFJlbW92ZUl0ZW0gfSBmcm9tIFwiLi9yZW1vdmUtaXRlbVwiO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICB0ZWFjaGVyczogUmVzb3VyY2VbXTtcclxuICBvblVwZGF0ZTogKHRlYWNoZXJzVXBkYXRlcykgPT4gdm9pZDtcclxufVxyXG5cclxuaW50ZXJmYWNlIFN0YXRlIHtcclxuICBhZGRFbXRweVJvdzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEVkaXRhYmxlVGVhY2hlckxpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsU3RhdGU+IHtcclxuICBuYW1lRWxlbTogSFRNTElucHV0RWxlbWVudDtcclxuXHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlPXthZGRFbXRweVJvdzogcHJvcHMudGVhY2hlcnMubGVuZ3RoID09PSAwfTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGxldCB7dGVhY2hlcnMsIG9uVXBkYXRlfSA9IHRoaXMucHJvcHM7XHJcbiAgICBjb25zdCB7YWRkRW10cHlSb3d9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGlmIChhZGRFbXRweVJvdykgdGVhY2hlcnMgPSB0ZWFjaGVycy5jb25jYXQoe25hbWU6IFwiXCIsIHVybDogXCJcIn0pO1xyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cInRlYWNoZXJzLWxpc3RcIj5cclxuICAgICAgPGgzPkFuc3ZhcmlnYSBsw6RyYXJlPC9oMz5cclxuICAgICAgPHRhYmxlIHRhYkluZGV4PXsxfSBzdHlsZT17e3dpZHRoOiBcIjEwMCVcIn19IG9uQmx1cj17ZXY9PlxyXG4gICAgICAgICghZXYucmVsYXRlZFRhcmdldCB8fFxyXG4gICAgICAgIChldi5yZWxhdGVkVGFyZ2V0IGFzIGFueSkudGFnTmFtZSAhPT0gJ0lOUFVUJykgJiZcclxuICAgICAgICB0aGlzLnByb3BzLnRlYWNoZXJzLmxlbmd0aCA+IDAgJiZcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHthZGRFbXRweVJvdzogZmFsc2V9KVxyXG4gICAgICB9PlxyXG4gICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgIHt0ZWFjaGVycy5sZW5ndGggPiAwICYmIDx0cj5cclxuICAgICAgICAgICAgPHRoIHN0eWxlPXt7d2lkdGg6IFwiMjAlXCJ9fT5OYW1uPC90aD5cclxuICAgICAgICAgICAgPHRoPkzDpG5rIGVsbGVyIEUtcG9zdGFkcmVzczwvdGg+XHJcbiAgICAgICAgICA8L3RyPn1cclxuICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgIHt0ZWFjaGVycy5tYXAoKHRlYWNoZXIsIGlkeCkgPT4gXHJcbiAgICAgICAgICA8dHIga2V5PXtpZHh9PlxyXG4gICAgICAgICAgICA8dGQ+PGlucHV0IHR5cGU9XCJ0ZXh0XCIgcmVmPXtlbGVtID0+IHRoaXMubmFtZUVsZW0gPSBlbGVtfSB2YWx1ZT17dGVhY2hlci5uYW1lfSBhdXRvRm9jdXM9eyF0ZWFjaGVyLm5hbWUgJiYgaWR4ID4gMH0gb25DaGFuZ2U9e1xyXG4gICAgICAgICAgICAgIGV2PT57XHJcbiAgICAgICAgICAgICAgICBpZiAoYWRkRW10cHlSb3cgJiYgaWR4ID09IHRlYWNoZXJzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgb25VcGRhdGUoeyRwdXNoOiBbey4uLnRlYWNoZXIsIG5hbWU6IGV2LnRhcmdldC52YWx1ZX1dIH0pO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHthZGRFbXRweVJvdzogZmFsc2V9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXYudGFyZ2V0LnZhbHVlIHx8IHRlYWNoZXIudXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgIG9uVXBkYXRlKHskc3BsaWNlOiBbW2lkeCwgMSwgey4uLnRlYWNoZXIsIG5hbWU6IGV2LnRhcmdldC52YWx1ZX1dXSB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRlYWNoZXJzLmxlbmd0aCA9PT0gMSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHthZGRFbXRweVJvdzogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNwbGljZTogW1tpZHgsIDFdXX0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfS8+PC90ZD5cclxuICAgICAgICAgICAgPHRkPjxpbnB1dFxyXG4gICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICBzdHlsZT17e3dpZHRoOiBcIjEwMCVcIn19XHJcbiAgICAgICAgICAgICAgdmFsdWU9e3RlYWNoZXIudXJsfVxyXG4gICAgICAgICAgICAgIG9uS2V5RG93bj17ZXYgPT5cclxuICAgICAgICAgICAgICAgIGV2LndoaWNoID09PSA5ICYmXHJcbiAgICAgICAgICAgICAgICAhZXYuc2hpZnRLZXkgJiZcclxuICAgICAgICAgICAgICAgIGlkeCA9PT0gdGVhY2hlcnMubGVuZ3RoIC0gMSAmJlxyXG4gICAgICAgICAgICAgICAgKHRlYWNoZXJzLmxlbmd0aCA8IDEgfHwgISF0ZWFjaGVyc1t0ZWFjaGVycy5sZW5ndGggLSAxXS5uYW1lICYmXHJcbiAgICAgICAgICAgICAgICAgICh0aGlzLnNldFN0YXRlKHthZGRFbXRweVJvdzogdHJ1ZX0pLGV2LnByZXZlbnREZWZhdWx0KCkpKX1cclxuICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFkZEVtdHB5Um93ICYmIGlkeCA9PSB0ZWFjaGVycy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgIG9uVXBkYXRlKHskcHVzaDogW3suLi50ZWFjaGVyLCB1cmw6IGV2LnRhcmdldC52YWx1ZX1dfSlcclxuICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7YWRkRW10cHlSb3c6IGZhbHNlfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGV2LnRhcmdldC52YWx1ZSB8fCB0ZWFjaGVyLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgb25VcGRhdGUoeyRzcGxpY2U6IFtbaWR4LCAxLCB7Li4udGVhY2hlciwgdXJsOiBldi50YXJnZXQudmFsdWV9XV19KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLnRlYWNoZXJzLmxlbmd0aCA9PT0gMSlcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHthZGRFbXRweVJvdzogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNwbGljZTogW1tpZHgsIDFdXX0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfS8+PC90ZD5cclxuICAgICAgICAgIDwvdHI+KX1cclxuICAgICAgICA8L3Rib2R5PlxyXG4gICAgICA8L3RhYmxlPlxyXG4gICAgICA8YnIvPlxyXG4gICAgICA8YSBjbGFzc05hbWU9XCJidG5cIiBvbkNsaWNrPXsoKSA9PlxyXG4gICAgICAgIHRoaXMuc3RhdGUuYWRkRW10cHlSb3cgP1xyXG4gICAgICAgICAgdGhpcy5uYW1lRWxlbS5mb2N1cygpIDpcclxuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2FkZEVtdHB5Um93OiB0cnVlfSl9PlxyXG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS11c2VyLXBsdXNcIiBhcmlhLWhpZGRlbiAvPiBMw6RnZyB0aWxsIGFuc3ZhcmlnIGzDpHJhcmU8L2E+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IENvdXJzZSB9IGZyb20gJ2tlZGJhY2tlbmQvbW9kZWxzJztcclxuaW1wb3J0IHsgZ2V0VGFza3NQZXJJZCB9IGZyb20gXCIuLi9jb3Vyc2VzL2J1c2luZXNzLWxvZ2ljXCI7XHJcbmltcG9ydCB7IGZ1dHVyZUFiaWxpdGllcyB9IGZyb20gXCIuLi8uLi8uLi9jb250cmFjdHMva2VkLW1vZGVsc1wiO1xyXG5pbXBvcnQgeyBPcGVuQ2xvc2VCb3ggfSBmcm9tIFwiLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL29wZW4tY2xvc2UtYm94XCI7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGNvdXJzZTogQ291cnNlO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGlzT3BlbjogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFdlaWdodGVkSXRlbXNUYWJsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHtcclxuICAgICAgaXNPcGVuOiBmYWxzZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgY291cnNlIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgeyBpc09wZW4gfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBjb25zdCByb3dzID0gW107XHJcbiAgICBjb25zdCB0YXNrc1BlcklkID0gZ2V0VGFza3NQZXJJZChjb3Vyc2UpO1xyXG5cclxuICAgIHJvd3MucHVzaCg8dHIga2V5PVwiY2VudHJhbENvbnRlbnRcIiBjbGFzc05hbWU9XCJjb3ZlcmVkLWl0ZW0tbGFiZWxcIj48dGQgY29sU3Bhbj17Mn0+Q2VudHJhbHQgaW5uZWjDpWxsPC90ZD48L3RyPik7XHJcbiAgICBjb3Vyc2UuY2VudHJhbENvbnRlbnQuZm9yRWFjaCgoY2MsaWR4KSA9PiByb3dzLnB1c2goPHRyIGtleT17Y2MuaWR9IGNsYXNzTmFtZT17aWR4ICUgMiA/IFwidGFibGVPZGRcIiA6IFwiXCJ9PlxyXG4gICAgICA8dGQ+PHAgY2xhc3NOYW1lPVwiY3JpdGVyaWFUZXh0XCIgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tfX2h0bWw6IGNjLm5hbWV9fS8+PC90ZD5cclxuICAgICAgPHRkPjxwPnsodGFza3NQZXJJZFtjYy5pZF0gfHwgW10pLmxlbmd0aH08L3A+PC90ZD5cclxuICAgIDwvdHI+KSk7XHJcblxyXG4gICAgcm93cy5wdXNoKDx0ciBrZXk9XCJhYmlsaXRpZXNcIiBjbGFzc05hbWU9XCJjb3ZlcmVkLWl0ZW0tbGFiZWxcIj48dGQgY29sU3Bhbj17Mn0+RsO2cm3DpWdvcjwvdGQ+PC90cj4pO1xyXG4gICAgY291cnNlLmFiaWxpdGllcy5mb3JFYWNoKChhYmlsaXR5LGlkeCkgPT4gcm93cy5wdXNoKDx0ciBrZXk9e2FiaWxpdHkuaWR9IGNsYXNzTmFtZT17aWR4ICUgMiA/IFwidGFibGVPZGRcIiA6IFwiXCJ9PlxyXG4gICAgICA8dGQ+PHAgY2xhc3NOYW1lPVwiYWJpbGl0eVRleHRcIiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogYWJpbGl0eS5uYW1lfX0vPjwvdGQ+XHJcbiAgICAgIDx0ZD48cD57KHRhc2tzUGVySWRbYWJpbGl0eS5pZF0gfHwgW10pLmxlbmd0aH08L3A+PC90ZD5cclxuICAgIDwvdHI+KSk7XHJcblxyXG4gICAgcm93cy5wdXNoKDx0ciBrZXk9XCJmdXR1cmVBYmlsaXRpZXNcIiBjbGFzc05hbWU9XCJjb3ZlcmVkLWl0ZW0tbGFiZWxcIj48dGQgY29sU3Bhbj17Mn0+RnJhbXRpZHNmw7ZybcOlZ29yPC90ZD48L3RyPik7XHJcbiAgICAgZnV0dXJlQWJpbGl0aWVzLmZvckVhY2goKGZ1dHVyZUFiaWxpdHlUZXh0LCBpZHgpID0+IHJvd3MucHVzaCg8dHIga2V5PXtmdXR1cmVBYmlsaXR5VGV4dH0gY2xhc3NOYW1lPXtpZHggJSAyID8gXCJ0YWJsZU9kZFwiIDogXCJcIn0+XHJcbiAgICAgIDx0ZD48cCBjbGFzc05hbWU9XCJhYmlsaXR5VGV4dFwiPntmdXR1cmVBYmlsaXR5VGV4dH08L3A+PC90ZD5cclxuICAgICAgPHRkPjxwPnsodGFza3NQZXJJZFtmdXR1cmVBYmlsaXR5VGV4dF0gfHwgW10pLmxlbmd0aH08L3A+PC90ZD5cclxuICAgIDwvdHI+KSk7XHJcblxyXG4gICAgcmV0dXJuIDxPcGVuQ2xvc2VCb3hcclxuICAgICAgY2xhc3NOYW1lPVwibGFyZ2VyXCJcclxuICAgICAgdGl0bGU9ezxwPkt1cnNlbnMgdMOkY2tuaW5nc3RhYmVsbDwvcD59XHJcbiAgICAgIGNvbnRlbnRDbGFzc05hbWU9XCJ3ZWlnaHRlZC1pdGVtcy10YWJsZVwiPlxyXG4gICAgICAgIDxwPlRhYmVsbGVuIGFuZ2VyIGh1ciBtw6VuZ2EgdXBwZ2lmdGVyIHNvbSBiZXLDtnIgdmFyamUgZGVsLjwvcD5cclxuICAgICAgICA8dGFibGU+PHRib2R5Pntyb3dzfTwvdGJvZHk+PC90YWJsZT5cclxuICAgIDwvT3BlbkNsb3NlQm94PlxyXG4gIH1cclxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgTCB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IHsgUmVzb3VyY2UgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IERpYWxvZyB9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcclxuaW1wb3J0IHZhbGlkVXJsIGZyb20gJ3ZhbGlkLXVybCc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHVybD86IHN0cmluZztcclxuICBvblNhdmU6IChuZXdVcmw6IHN0cmluZykgPT4gdm9pZDtcclxuICBvbkRlbGV0ZT86ICgpPT52b2lkO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIHVybDogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRWRpdFdvcmtmbG93TGluayBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4gaW1wbGVtZW50cyBEaWFsb2cge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHt1cmw6IHRoaXMucHJvcHMudXJsIHx8ICcnfTtcclxuICB9XHJcblxyXG4gIHNhdmUoKSB7XHJcbiAgICBjb25zdCB7dXJsfSA9IHRoaXMuc3RhdGU7XHJcbiAgICBpZiAoIXZhbGlkVXJsLmlzVXJpKHVybCkpIHRocm93IG5ldyBFcnJvcihMYEFuZ2l2ZW4gVVJMICcke3VybH0nIMOkciBvZ2lsdGlnLiBTa2EgYsO2cmphIG1lZCBodHRwOiBlbGxlciBodHRwczpgKTtcclxuICAgIHRoaXMucHJvcHMub25TYXZlKHVybCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7b25TYXZlLCBvbkRlbGV0ZX0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgaXNWYWxpZFVybCA9IHZhbGlkVXJsLmlzVXJpKHRoaXMuc3RhdGUudXJsKTtcclxuXHJcbiAgICByZXR1cm4gPGRpdj48ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICAgIDxoMj5Lb3BwbGEgZW4gYXJiZXRzZ8OlbmcgdGlsbCBrdXJzZW48L2gyPlxyXG4gICAgICA8cD5EZXQgZ8OlciBiYXJhIGF0dCBsw6RnZ2EgaW4gZW4gYXJiZXRzZ8OlbmcgcGVyIGt1cnMuPC9wPlxyXG4gICAgICA8YnIgLz5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5Mw6Ruazo8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcCBcIj5cclxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgIHRhYkluZGV4PXsxfVxyXG4gICAgICAgICAgICBzaXplPXs1MH1cclxuICAgICAgICAgICAgdmFsdWU9e3N0YXRlLnVybH1cclxuICAgICAgICAgICAgb25DaGFuZ2U9e2V2PT50aGlzLnNldFN0YXRlKHt1cmw6IGV2LnRhcmdldC52YWx1ZX0pfSAvPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wIHNwYWNlZFwiPjwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGJyIC8+PC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIiBpZD1cInN2aWQxMl80OTI0MjJkNTE1YmFkZjM2NjQ2ZTRmZjFcIj5cclxuICAgICAgICB7b25EZWxldGUgJiYgPGRpdiB0YWJJbmRleD17Mn0gY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCIgb25DbGljaz17KCk9Pm9uRGVsZXRlKCl9PlxyXG4gICAgICAgICAgVGEgYm9ydCBhcmJldHNnw6VuZ1xyXG4gICAgICAgIDwvZGl2Pn1cclxuICAgICAgICA8YVxyXG4gICAgICAgICAgdGFiSW5kZXg9ezF9XHJcbiAgICAgICAgICBjbGFzc05hbWU9e1wiYnRuIGJ0bi1sYXJnZVwiICsgKGlzVmFsaWRVcmwgPyBcIlwiIDogXCIgYnRuLWluYWN0aXZlXCIpfVxyXG4gICAgICAgICAgb25DbGljaz17aXNWYWxpZFVybCAmJiAoKCkgPT4gb25TYXZlKHN0YXRlLnVybCkpfT5TcGFyYTwvYT5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1Jlc291cmNlfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7TGlua30gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7SUNvdXJzZUVkaXRvckhvc3R9IGZyb20gJy4uL2ludGVyZmFjZXMvY291cnNlLWVkaXRvci1ob3N0JztcclxuaW1wb3J0IHtFZGl0UmVzb3VyY2V9IGZyb20gJy4uL21vZGFsLXBhZ2VzL2VkaXQtcmVzb3VyY2UnO1xyXG5pbXBvcnQgeyB1cGRhdGVNb2RpZmljYXRpb25BbmRDcmVhdGlvblN0YW1wcyB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IGVudiBmcm9tICcuLi8uLi8uLi9nbG9iYWxzL0tFRC5lbnYnO1xyXG5pbXBvcnQgeyBFZGl0V29ya2Zsb3dMaW5rIH0gZnJvbSAnLi4vbW9kYWwtcGFnZXMvZWRpdC13b3JrZmxvdy1saW5rJztcclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdXJsOiBzdHJpbmc7XHJcbiAgb25VcGRhdGU6ICh1cGRhdGVzKSA9PiB2b2lkO1xyXG4gIGhvc3Q6IElDb3Vyc2VFZGl0b3JIb3N0O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRWRpdGFibGVXb3JrRmxvd0xpbmsgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHM+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGU9e307XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7aG9zdCwgb25VcGRhdGUsIHVybH0gPSB0aGlzLnByb3BzO1xyXG4gICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFza0NvbnRhaW5lclwiPlxyXG4gICAgICAgIHt1cmwgJiZcclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImVkaXRJdGVtXCIgb25DbGljaz17KCk9Pmhvc3Qub3BlbkRpYWxvZyh7XHJcbiAgICAgICAgICAgICAgICBDb21wb25lbnQ6IEVkaXRXb3JrZmxvd0xpbmssXHJcbiAgICAgICAgICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgICAgICAgIG9uU2F2ZTogbmV3VXJsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNldDogbmV3VXJsfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xyXG4gICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICBvbkRlbGV0ZTogKCk9PntcclxuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZSh7JHNldDogdW5kZWZpbmVkfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaG9zdC5jbG9zZURpYWxvZygpO1xyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSl9PjwvYT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgPGEgaHJlZj17dXJsfSB0YXJnZXQ9XCJfYmxhbmtcIiA+TnV2YXJhbmRlIGFyYmV0c2fDpW5nPC9hPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIH1cclxuICAgICA8L2Rpdj5cclxuICAgIHshdXJsICYmIDxhIGNsYXNzTmFtZT1cImJ0blwiIG9uQ2xpY2s9eygpPT5ob3N0Lm9wZW5EaWFsb2coe1xyXG4gICAgICBDb21wb25lbnQ6IEVkaXRXb3JrZmxvd0xpbmssXHJcbiAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgb25TYXZlOiBuZXdVcmwgPT4ge1xyXG4gICAgICAgICAgb25VcGRhdGUoeyRzZXQ6IG5ld1VybH0pXHJcbiAgICAgICAgICBob3N0LmNsb3NlRGlhbG9nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KX0+PGkgY2xhc3NOYW1lPVwiZmEgZmEtcGFwZXJjbGlwXCIgYXJpYS1oaWRkZW4+PC9pPiBLb3BwbGEgZW4gYXJiZXRzZ8OlbmcgdGlsbCBrdXJzZW48L2E+fVxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ291cnNlLCBBYmlsaXR5LCBTdWJqZWN0IH0gZnJvbSAna2VkYmFja2VuZC9tb2RlbHMnO1xyXG5pbXBvcnQgeyBFZGl0YWJsZVJlc291cmNlTGlzdCB9IGZyb20gJy4uL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXJlc291cmNlLWxpc3QnO1xyXG5pbXBvcnQgeyBkdEZvcm1hdCB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgQ291cnNlTW9kdWxlTGlzdCB9IGZyb20gJy4vY291cnNlLW1vZHVsZS1saXN0JztcclxuaW1wb3J0IHsgU2Nob29sQ291cnNlcyB9IGZyb20gJy4uL3N1Yi1jb21wb25lbnRzL3NjaG9vbC1jb3Vyc2VzJztcclxuaW1wb3J0IHsgSUNvdXJzZUVkaXRvckhvc3QgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvdXJzZS1lZGl0b3ItaG9zdCc7XHJcbmltcG9ydCB7IGdldFVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cywgc2FuaXR5Q2hlY2ssIGdldElkc05vdENvdmVyZWRCeVRhc2tzIH0gZnJvbSAnLi9idXNpbmVzcy1sb2dpYyc7XHJcbmltcG9ydCB7IHNldENvdXJzZUltYWdlIH0gZnJvbSBcIi4vY291cnNlLWJhbm5lclwiO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lcic7XHJcbmltcG9ydCB7IEVkaXRhYmxlVGVhY2hlckxpc3QgfSBmcm9tICcuLi9zdWItY29tcG9uZW50cy9lZGl0YWJsZS10ZWFjaGVyLWxpc3QnO1xyXG5pbXBvcnQgeyBzaG93RXJyb3IsIEwgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcclxuaW1wb3J0IHsgV2VpZ2h0ZWRJdGVtc1RhYmxlIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvd2VpZ2h0ZWQtaXRlbXMtdGFibGUnO1xyXG5pbXBvcnQgeyBXeXNpd3lnIH0gZnJvbSAnLi4vLi4vdXRpbGl0eS1jb21wb25lbnRzL3d5c2l3eWcvaW5kZXgnO1xyXG5pbXBvcnQgYWN0aW9uc19zd2VkaXNoIGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy93eXNpd3lnL2FjdGlvbnMtc3YnO1xyXG5pbXBvcnQgeyBFZGl0YWJsZVdvcmtGbG93TGluayB9IGZyb20gJy4uL3N1Yi1jb21wb25lbnRzL2VkaXRhYmxlLXdvcmtmbG93LWxpbmsnO1xyXG5pbXBvcnQgeyBSZW5hbWVhYmxlVGV4dCB9IGZyb20gJy4uLy4uL3V0aWxpdHktY29tcG9uZW50cy9yZW5hbWVhYmxlLXRleHQnO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBjb3Vyc2U6IENvdXJzZTtcclxuICBvcmlnQ291cnNlOiBDb3Vyc2U7XHJcbiAgaG9zdDogSUNvdXJzZUVkaXRvckhvc3Q7XHJcbn07XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGNoYW5nZUltYWdlVXJsOiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSW5uZXJFZGl0Q291cnNlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgcHJvcHM6IFByb3BzO1xyXG4gIHN0YXRlOiBTdGF0ZTtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogUHJvcHMpIHtcclxuICAgIHN1cGVyKHByb3BzKTtcclxuICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIGNoYW5nZUltYWdlVXJsOiBmYWxzZVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHNldEltYWdlVXJsKGltYWdlVXJsOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHsgY291cnNlIH0gPSB0aGlzLnByb3BzO1xyXG4gICAgaWYgKCFjb3Vyc2UuaW1hZ2VJZCkge1xyXG5cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IHsgY291cnNlLCBvcmlnQ291cnNlLCBob3N0IH0gPSB0aGlzLnByb3BzO1xyXG4gICAgY29uc3QgdW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzID0gZ2V0VW5jb3ZlcmVkS25vd2xlZGdlUmVxdWlyZW1lbnRzKGNvdXJzZSk7XHJcbiAgICBjb25zdCBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrID0gZ2V0SWRzTm90Q292ZXJlZEJ5VGFza3MoY291cnNlKTtcclxuICAgIGNvbnN0IHNhbml0eUNoZWNrV2FybmluZ3MgPSBzYW5pdHlDaGVjayhjb3Vyc2UpO1xyXG4gICAgY29uc3QgY291cnNlSW1hZ2UgPSBjb3Vyc2UuaW1hZ2VzLmZpbmQoaW1nID0+IGltZy5pZCA9PT0gY291cnNlLmltYWdlSWQpO1xyXG4gICAgY29uc3QgY291cnNlSW1hZ2VJc0RhdGFVcmwgPSBjb3Vyc2VJbWFnZSAmJiBjb3Vyc2VJbWFnZS51cmwuc3RhcnRzV2l0aCgnZGF0YTonKTtcclxuICAgIGNvbnN0IGNvdXJzZUlzVXBsb2FkZWQgPSBjb3Vyc2VJbWFnZSAmJiBjb3Vyc2VJbWFnZS51cmwuaW5kZXhPZignc3RvcmFnZS5nb29nbGVhcGlzLmNvbScpID4gMDtcclxuXHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJzdi1yb3cgc3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtcInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tN1wifT5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICAgICAgICB7Y291cnNlLmlzVGVtcGxhdGUgJiYgPGgxPkt1cnNtYWxsPC9oMT4gfVxyXG4gICAgICAgICAgPGgyPkt1cnPDtnZlcmdyaXBhbmRlPC9oMj5cclxuICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJrZWRfYm94ZWRcIj5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICA8aDM+S3Vyc2VucyBiaWxkPC9oMz5cclxuICAgICAgICAgICAgICB7Y291cnNlSW1hZ2VJc0RhdGFVcmwgP1xyXG4gICAgICAgICAgICAgICAgPHA+S3Vyc2VucyBiaWxkIGxpZ2dlciBpIGRhdGFiYXNlbi4gRsO2ciBhdHQgw6RuZHJhIGJpbGQgbcOlc3RlIGR1IGRyYSBvY2ggc2zDpHBwYSBlbiBueSBiaWxkIG92YW5ww6UgZGVuIGdhbWxhIGjDtmdzdCB1cHAgcMOlIGRlbm5hIHNpZGEuXHJcbiAgICAgICAgICAgICAgICAgIEJpbGRlbiBrYW4gYW50aW5nZW4gdmFyYSBmcsOlbiBlbiBhbm5hbiB3ZWJic2lkYS4gTG9rYWxhIGJpbGRmaWxlciBnw6VyIG9ja3PDpSBicmEgYXR0IGRyYSBvY2ggc2zDpHBwYS48L3A+XHJcbiAgICAgICAgICAgICAgICAgOiBjb3Vyc2VJc1VwbG9hZGVkID8gPHA+XHJcbiAgICAgICAgICAgICAgICAgICBLdXJzZW5zIGJpbGQgbGlnZ2VyIGkgS3Vuc2thcHNza29sYW5zIEdvb2dsZSBtb2xuLiBGw7ZyIGF0dCDDpG5kcmEgYmlsZCBtw6VzdGUgZHUgZHJhIG9jaCBzbMOkcHBhIGVuIG55IGJpbGQgb3ZhbnDDpSBkZW4gZ2FtbGEgaMO2Z3N0IHVwcCBww6UgZGVubmEgc2lkYS5cclxuICAgICAgICAgICAgICAgICAgQmlsZGVuIGthbiBhbnRpbmdlbiB2YXJhIGZyw6VuIGVuIGFubmFuIHdlYmJzaWRhLiBMb2thbGEgYmlsZGZpbGVyIGfDpXIgb2Nrc8OlIGJyYSBhdHQgZHJhIG9jaCBzbMOkcHBhLlxyXG4gICAgICAgICAgICAgICAgIDwvcD4gOiBjb3Vyc2VJbWFnZSA/IDxkaXY+PHRleHRhcmVhXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlPXtjb3Vyc2VJbWFnZS51cmx9XHJcbiAgICAgICAgICAgICAgICAgIHN0eWxlPXt7d2lkdGg6ICcxMDAlJywgaGVpZ2h0OiAnMzBweCd9fVxyXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZXY9PnNldENvdXJzZUltYWdlKGNvdXJzZSwgb3JpZ0NvdXJzZSwgaG9zdCwgZXYudGFyZ2V0LnZhbHVlKX0vPlxyXG4gICAgICAgICAgICAgICAgICA8cD5CaWxkZW4gc29tIHZpc2FzIGjDtmdzdCB1cHAgaMOkbXRhcyBmcsOlbiBhbmdpdmVuIFVSTC5cclxuICAgICAgICAgICAgICAgICAgICBGw7ZyIGF0dCDDpG5kcmEgYmlsZCBrYW4gZHUgcmVkaWdlcmEgVVJMIG92YW4uIEV0dCBhbm5hdCBzw6R0dCBhdHQgw6RuZHJhIGJpbGQgw6RyIGF0dCBkcmEgb2NoIHNsw6RwcGEgZW4gbnkgYmlsZCDDtnZlciBkZW4gZ2FtbGEgaMO2Z3N0IHVwcCBww6Ugc2lkYW4uPC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+IDpcclxuICAgICAgICAgICAgICAgICAgPHA+S3Vyc2VuIHNha25hciBlZ2VuIGJpbGQuXHJcbiAgICAgICAgICAgICAgICAgICAgTMOkZ2cgdGlsbCBlbiBiaWxkIGdlbm9tIGF0dCBkcmEgb2NoIHNsw6RwcGEgZW4gYmlsZCBww6Uga3Vycy1iYW5uZXJuIGjDtmdzdCB1cHAgcMOlIGRlbiBow6RyIHNpZGFuLjwvcD59XHJcbiAgICAgICAgICAgICAgPGJyLz5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICB7IWNvdXJzZS5pc1RlbXBsYXRlICYmIDxkaXY+XHJcbiAgICAgICAgICAgICAgPGgzPkJlc2tyaXZuaW5nPC9oMz5cclxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzdWJIZWFkZXJcIj4oQmVza3Jpdm5pbmcgYXYga3Vyc2VuLiBGw7ZyIGF0dCBza2lsamEgbWVsbGFuIG9saWthIHZhcmlhbnRlciBhdiBzYW1tYSBneW1uYXNpZWt1cnMpPC9wPlxyXG4gICAgICAgICAgICAgIDx0ZXh0YXJlYSBjbGFzc05hbWU9XCJpbnB1dFRleHRCb3ggaW5wdXRUZXh0U21hbGxcIlxyXG4gICAgICAgICAgICAgICAgdmFsdWU9e2NvdXJzZS5kZXNjcmlwdGlvbn1cclxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiBob3N0LnVwZGF0ZSh7IGRlc2NyaXB0aW9uOiB7ICRzZXQ6IGV2LnRhcmdldC52YWx1ZSB9IH0pfSAvPlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8L2Rpdj59ICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgIDxoMz5VcHB0YWt0c3RleHQ8L2gzPlxyXG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInN1YkhlYWRlclwiPih0ZXh0ZW4gc2thIHZpc2FzIHDDpSBrdXJzZW5zIHVwcHRha3Rzc2VrdGlvbik8L3A+XHJcbiAgICAgICAgICAgICAgPFd5c2l3eWdcclxuICAgICAgICAgICAgICAgIGh0bWw9e2NvdXJzZS5ydW5VcFRleHR9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0QWN0aW9ucz17YWN0aW9uc19zd2VkaXNofVxyXG4gICAgICAgICAgICAgICAgYWN0aW9ucz17W1xyXG4gICAgICAgICAgICAgICAgICBcImJvbGRcIixcclxuICAgICAgICAgICAgICAgICAgXCJpdGFsaWNcIixcclxuICAgICAgICAgICAgICAgICAgXCJ1bmRlcmxpbmVcIixcclxuICAgICAgICAgICAgICAgICAgXCJzdHJpa2V0aHJvdWdoXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwiaGVhZGluZzJcIixcclxuICAgICAgICAgICAgICAgICAgXCJoZWFkaW5nM1wiLFxyXG4gICAgICAgICAgICAgICAgICBcIm9saXN0XCIsXHJcbiAgICAgICAgICAgICAgICAgIFwidWxpc3RcIixcclxuICAgICAgICAgICAgICAgICAgXCJsaW5lXCIsXHJcbiAgICAgICAgICAgICAgICAgIFwibGlua1wiLFxyXG4gICAgICAgICAgICAgICAgICBcImltYWdlXCJdfVxyXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e25ld0h0bWwgPT4gaG9zdC51cGRhdGUoeyBydW5VcFRleHQ6IHskc2V0OiBuZXdIdG1sfX0pfSAvPlxyXG4gICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxoMz5LdXJzcmVzdXJzZXI8L2gzPlxyXG4gICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJzdWJIZWFkZXJcIj4oUmVzdXJzZXIgZsO2ciB1cHB0YWt0IG9jaCBrdXJzZW4gc29tIGhlbGhldCk8L3A+XHJcbiAgICAgICAgICAgIDxFZGl0YWJsZVJlc291cmNlTGlzdFxyXG4gICAgICAgICAgICAgIHJlc291cmNlcz17Y291cnNlLnJlc291cmNlc31cclxuICAgICAgICAgICAgICBvblVwZGF0ZT17cmVzb3VyY2VzVXBkYXRlcyA9PiBob3N0LnVwZGF0ZSh7IHJlc291cmNlczogcmVzb3VyY2VzVXBkYXRlcyB9KX1cclxuICAgICAgICAgICAgICBob3N0PXtob3N0fSAvPlxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgPGgzPkFyYmV0c2fDpW5nPC9oMz5cclxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwic3ViSGVhZGVyXCI+KEV2ZW50dWVsbCBsw6RuayB0aWxsIGFyYmV0c2fDpW5nIGbDtnIga3Vyc2VuKTwvcD5cclxuICAgICAgICAgICAgPEVkaXRhYmxlV29ya0Zsb3dMaW5rXHJcbiAgICAgICAgICAgICAgdXJsPXtjb3Vyc2Uud29ya0Zsb3dMaW5rfVxyXG4gICAgICAgICAgICAgIG9uVXBkYXRlPXt1cGRhdGVzID0+IGhvc3QudXBkYXRlKHsgd29ya0Zsb3dMaW5rOiB1cGRhdGVzIH0pfVxyXG4gICAgICAgICAgICAgIGhvc3Q9e2hvc3R9IC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICB7IWNvdXJzZS5pc1RlbXBsYXRlICYmIDxkaXY+XHJcbiAgICAgICAgICAgICAgPGgzPkdvb2dsZSBDbGFzc3Jvb208L2gzPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbCBzcGFjZWRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiR29vZ2xlIGNsYXNzcm9vbSBVUkxcIlxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcclxuICAgICAgICAgICAgICAgICAgICBzaXplPXszMH1cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZT17Y291cnNlLmdvb2dsZUNsYXNzUm9vbVVSTH1cclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17ZXYgPT4gaG9zdC51cGRhdGUoe2dvb2dsZUNsYXNzUm9vbVVSTDogeyRzZXQ6IGV2LnRhcmdldC52YWx1ZX19KX0vPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImhvcml6b250YWxJdGVtIHRvcFwiPlxyXG4gICAgICAgICAgICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cImtvZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU9ezh9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9e2NvdXJzZS5nb29nbGVDbGFzc1Jvb21Db2RlfVxyXG4gICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiBob3N0LnVwZGF0ZSh7Z29vZ2xlQ2xhc3NSb29tQ29kZTogeyRzZXQ6IGV2LnRhcmdldC52YWx1ZX19KX0gLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj59XHJcblxyXG4gICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgeyFjb3Vyc2UuaXNUZW1wbGF0ZSAmJiA8PjxFZGl0YWJsZVRlYWNoZXJMaXN0IFxyXG4gICAgICAgICAgICAgIHRlYWNoZXJzPXtjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVyc31cclxuICAgICAgICAgICAgICBvblVwZGF0ZT17dGVhY2hlcnNVcGRhdGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgaG9zdC51cGRhdGUoe3Jlc3BvbnNpYmxlVGVhY2hlcnM6IHRlYWNoZXJzVXBkYXRlfSk7XHJcbiAgICAgICAgICAgICAgfX0gLz5cclxuICAgICAgICAgICAgey8qXHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8aDM+SW5sw6RtbmluZ3MgRS1wb3N0PC9oMz5cclxuICAgICAgICAgICAgPHRhYmxlIHRhYkluZGV4PXsxfSBzdHlsZT17e3dpZHRoOiAnMTAwJSd9fT5cclxuICAgICAgICAgICAgICA8dGhlYWQ+PHRyPjx0aD5cclxuICAgICAgICAgICAgICAgIEUtcG9zdGFkZHJlc3NcclxuICAgICAgICAgICAgICA8L3RoPjwvdHI+PC90aGVhZD5cclxuICAgICAgICAgICAgICA8dGJvZHk+XHJcbiAgICAgICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICAgIDx0ZD5cclxuICAgICAgICAgICAgICAgICAgICA8UmVuYW1lYWJsZVRleHRcclxuICAgICAgICAgICAgICAgICAgICAgIGVhZ2VyPXt0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgY2xpY2tBZHZlcnRpc2VUZXh0PVwiS2xpY2thIGjDpHIgZsO2ciBhdHQgYW5nZSB2ZW0gc29tIHRhciBlbW90IGlubMOkbW5pbmdzdXBwZ2lmdGVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgIHRleHQ9e2NvdXJzZS5hc3NpZ25tZW50RW1haWxzID8gY291cnNlLmFzc2lnbm1lbnRFbWFpbHNbMF0gOiBcIlwifVxyXG4gICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBbmdlIG1vdHRhZ2FyZSBhdiBpbmzDpG1uaW5nc3VwcGdpZnRlclwiXHJcbiAgICAgICAgICAgICAgICAgICAgICB0YWc9XCJpbnB1dFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dmFsdWUgPT4gaG9zdC51cGRhdGUoe2Fzc2lnbm1lbnRFbWFpbHM6IHskc2V0OiBbdmFsdWVdfX0pfVxyXG4gICAgICAgICAgICAgICAgICAgIC8+XHJcbiAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgICAgIDwvdGFibGU+Ki99XHJcbiAgICAgICAgICAgIDwvPn1cclxuXHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtaHRtbC1wb3J0bGV0IHN2LXBvcnRsZXRcIiBpZD1cInN2aWQxMl82YWI0ODExZjE1YjEzYzcwNmI0M2JiNDdcIj5cclxuICAgICAgICAgICAgPGRpdiBpZD1cIkt1cnNlbnNtb2R1bGVyXCI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8aDI+S3Vyc2VucyBtb2R1bGVyPC9oMj5cclxuICAgICAgICAgICAgPGhyIC8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxDb3Vyc2VNb2R1bGVMaXN0XHJcbiAgICAgICAgICAgIGhvc3Q9e2hvc3R9XHJcbiAgICAgICAgICAgIGNvdXJzZT17Y291cnNlfVxyXG4gICAgICAgICAgICBpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrPXtpZHNOb3RDb3ZlcmVkQnlBbnlUYXNrfSAvPlxyXG4gICAgICAgICAgXHJcbiAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8YnIvPlxyXG4gICAgICAgICAgICA8V2VpZ2h0ZWRJdGVtc1RhYmxlIGNvdXJzZT17Y291cnNlfS8+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0XCI+XHJcbiAgICAgICAgICAgIDxoMj5LdXJzZW5zIHN0YXR1czwvaDI+XHJcbiAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICB7Y291cnNlLmNyZWF0ZWRCeSAmJiBjb3Vyc2UuY3JlYXRlZERhdGUgJiYgPHA+XHJcbiAgICAgICAgICAgICAgS3Vyc2VuIHNrYXBhZGVzIHtkdEZvcm1hdChjb3Vyc2UuY3JlYXRlZERhdGUpfSBhdiA8c3Ryb25nPntjb3Vyc2UuY3JlYXRlZEJ5Lm5hbWV9PC9zdHJvbmc+LlxyXG4gICAgICAgICAgICA8L3A+fVxyXG4gICAgICAgICAgICB7Y291cnNlLm1vZGlmaWVkQnkgJiYgY291cnNlLm1vZGlmaWVkRGF0ZSAmJiA8cD5cclxuICAgICAgICAgICAgICBLdXJzZW4gcmVkaWdlcmFkZXMgc2VuYXN0IHtkdEZvcm1hdChjb3Vyc2UubW9kaWZpZWREYXRlKX0gYXYgPHN0cm9uZz57Y291cnNlLm1vZGlmaWVkQnkubmFtZX08L3N0cm9uZz4uXHJcbiAgICAgICAgICAgIDwvcD59XHJcbiAgICAgICAgICAgIHtjb3Vyc2UuYWN0aXZlID8gPHA+XHJcbiAgICAgICAgICAgICAgS3Vyc2VuIMOkciA8c3Ryb25nPkFLVElWPC9zdHJvbmc+IHNlZGFuIHtkdEZvcm1hdChjb3Vyc2UuYWN0aXZhdGVkRGF0ZSl9IGF2IDxzdHJvbmc+e2NvdXJzZS5hY3RpdmF0ZWRCeS5uYW1lfTwvc3Ryb25nPi5cclxuICAgICAgICAgICAgPC9wPiA6IDxwPlxyXG4gICAgICAgICAgICAgICAgS3Vyc2VuIMOkciA8c3Ryb25nPklOQUtUSVY8L3N0cm9uZz57Y291cnNlLmluYWN0aXZhdGVkQnkgPyA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgc2VkYW4ge2R0Rm9ybWF0KGNvdXJzZS5pbmFjdGl2YXRlZERhdGUpfSBhdiA8c3Ryb25nPntjb3Vyc2UuaW5hY3RpdmF0ZWRCeS5uYW1lfTwvc3Ryb25nPi48L3NwYW4+IDogPHNwYW4+Ljwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICA8L3A+fVxyXG4gICAgICAgICAgICB7KHVuY292ZXJlZEtub3dsZWRnZVJlcXVpcmVtZW50cy5sZW5ndGggPT09IDAgP1xyXG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cIm1hcmtlZEdyZWVuXCI+TW9kdWxlcm5hcyBrdW5za2Fwc2tyYXYgdMOkY2tlciBza29sdmVya2V0cyBrcmF2IGbDtnIgZGVubmEga3VyczwvcD4gOlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWFya2VkUmVkIHdhcm5pbmctYm94XCI+PGRpdiBjbGFzc05hbWU9XCJ3YXJuaW5nRmxhZ1wiPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgPC9kaXY+PHA+TW9kdWxlcm5hcyBrdW5za2Fwc2tyYXYgdMOkY2tlciBpbnRlIHNrb2x2ZXJrZXRzIGtyYXYgZsO2ciBkZW5uYSBrdXJzLjwvcD5cclxuICAgICAgICAgICAgICA8L2Rpdj4pfVxyXG4gICAgICAgICAgICB7c2FuaXR5Q2hlY2tXYXJuaW5ncy5tYXAod2FybmluZyA9PiA8ZGl2IGtleT17d2FybmluZ30gY2xhc3NOYW1lPVwibWFya2VkUmVkIHdhcm5pbmctYm94XCI+PGRpdiBjbGFzc05hbWU9XCJ3YXJuaW5nRmxhZ1wiPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtZXhjbGFtYXRpb24tdHJpYW5nbGVcIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L2k+XHJcbiAgICAgICAgICAgICAgPC9kaXY+PHA+e3dhcm5pbmd9PC9wPjwvZGl2Pil9XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICB7IWNvdXJzZS5pc1RlbXBsYXRlICYmIChvcmlnQ291cnNlID8gPGRpdlxyXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4td2FybmluZyBidG4tbGFyZ2UgcHVsbC1yaWdodFwiXHJcbiAgICAgICAgICAgICAgb25DbGljaz17KCk9PntcclxuICAgICAgICAgICAgICAgIGlmIChjb25maXJtKExgQmVrcsOkZnRhIGJvcnR0YWduaW5nIGF2IGt1cnNlbiBcIiR7Y291cnNlLm5hbWV9IC0gJHtjb3Vyc2UuZGVzY3JpcHRpb259XCIgZsO2ciBza29sYW4gJHtjb3Vyc2Uuc2Nob29sfVxcblxcbkt1cnNlbiBrb21tYXIgYXR0IHJhZGVyYXMgaGVsdCFcXG5cXG7DhHIgZHUgc8Oka2VyP2ApKVxyXG4gICAgICAgICAgICAgICAgICBob3N0LmRlbGV0ZUNvdXJzZSgpLmNhdGNoKHNob3dFcnJvcik7XHJcbiAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgPlRhIGJvcnQga3VyczwvZGl2Pjo8ZGl2XHJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi13YXJuaW5nIGJ0bi1sYXJnZSBwdWxsLXJpZ2h0XCJcclxuICAgICAgICAgICAgICBvbkNsaWNrPXsoKT0+aGlzdG9yeS5nbygtMSl9XHJcbiAgICAgICAgICAgID5BdmJyeXRcclxuICAgICAgICAgICAgICA8L2Rpdj4pfVxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4tbGFyZ2VcIiBvbkNsaWNrPXsoKSA9PiBob3N0LnNhdmUoKX0+XHJcbiAgICAgICAgICAgICAgU3BhcmFcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIHtjb3Vyc2UuYWN0aXZlID9cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4taW5mbyBidG4tbGFyZ2VcIlxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaG9zdC5pbmFjdGl2YXRlQW5kU2F2ZSgpfT5cclxuICAgICAgICAgICAgICAgIEluYWt0aXZlcmEgb2NoIHNwYXJhXHJcbiAgICAgICAgICAgICAgPC9kaXY+IDpcclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJ0biBidG4taW5mbyBidG4tbGFyZ2VcIlxyXG4gICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gaG9zdC5hY3RpdmF0ZUFuZFNhdmUoKX0+XHJcbiAgICAgICAgICAgICAgICBBa3RpdmVyYSBvY2ggc3BhcmFcclxuICAgICAgICAgICAgICA8L2Rpdj59XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LWNvbHVtbi01XCI+XHJcbiAgICAgICAgPFNjaG9vbENvdXJzZXMgLz5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGZpbmRET01Ob2RlIH0gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgTCwgc2hvd0luZm8sIHNob3dFcnJvciwgZmxhdHRlbiwgY29tcGFyZVByb3AgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscyc7XHJcbmltcG9ydCB7IENvdXJzZSwgUmVzb3VyY2UsIEtub3dsZWRnZVJlcXVpcmVtZW50LCBTdWJqZWN0LCBBYmlsaXR5LCBUYXNrLCBTY2hvb2wgfSBmcm9tICdrZWRiYWNrZW5kL21vZGVscyc7XHJcbmltcG9ydCB7IEJhdGNoUnVubmVyLCBIdHRwRXJyb3IsIGNyZWF0ZVVVSUQgfSBmcm9tICdrZWRiYWNrZW5kL2NsaWVudCc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSAnLi9jb3Vyc2UtYmFubmVyJztcclxuaW1wb3J0IHsgSW5uZXJFZGl0Q291cnNlIH0gZnJvbSAnLi9pbm5lci1lZGl0LWNvdXJzZSc7XHJcbmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcclxuaW1wb3J0IHVwZGF0ZSBmcm9tICdyZWFjdC1hZGRvbnMtdXBkYXRlJztcclxuaW1wb3J0IHsgdXBkYXRlRG9jdW1lbnRHcmFwaHMsIGFwcGx5RXRhZ3MsIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMsIGxvYWRDb3Vyc2UsIHVwZGF0ZU1vZGlmaWNhdGlvbkFuZENyZWF0aW9uU3RhbXBzLCB1cGRhdGVDcmVhdGlvblN0YW1wLCB1cGRhdGVNb2RpZmljYXRpb25TdGFtcCB9IGZyb20gJy4uL3V0aWxzJztcclxuaW1wb3J0IHsgSUNvdXJzZUVkaXRvckhvc3QsIERpYWxvZywgRGlhbG9nQ29udGFpbmVyIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9jb3Vyc2UtZWRpdG9yLWhvc3QnO1xyXG5pbXBvcnQgeyBSZW1vdmVJdGVtIH0gZnJvbSAnLi4vc3ViLWNvbXBvbmVudHMvcmVtb3ZlLWl0ZW0nO1xyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgeyBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMsIGdldElkc05vdENvdmVyZWRCeVRhc2tzIH0gZnJvbSAnLi9idXNpbmVzcy1sb2dpYyc7XHJcbmltcG9ydCBjZmcgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuY2ZnJztcclxuaW1wb3J0IHsgU3Bpbm5lciB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zcGlubmVyXCI7XHJcbmltcG9ydCB7IG15U2Nob29sQ291cnNlc1JlcG8gfSBmcm9tICcuLi8uLi8uLi9yZXBvcy9zY2hvb2wtY291cnNlcyc7XHJcbmltcG9ydCB7IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5IH0gZnJvbSBcIi4uLy4uLy4uL2FjY2Vzcy1jb250cm9sXCI7XHJcblxyXG5jb25zdCBjYXRjaGVyID0gY2ZnLkVOVklST05NRU5UID09PSAncHJvZHVjdGlvbicgP1xyXG4gIHNob3dFcnJvciA6IG51bGw7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIGlkPzogc3RyaW5nO1xyXG4gIHN1YmplY3RJZD86IHN0cmluZztcclxuICBpc1RlbXBsYXRlPzogYm9vbGVhbjtcclxuICB0ZW1wbGF0ZUlkPzogc3RyaW5nO1xyXG4gIHZpZXc/OiAnc3R1ZGVudFBhZ2UnIHwgJ2NvdXJzZUJ1aWxkZXInIHwgJ3RlbXBsYXRlQnVpbGRlcic7XHJcbiAgdmlld0NvdXJzZVVybDogc3RyaW5nO1xyXG4gIGZlZWRiYWNrVXJsOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBTdGF0ZSB7XHJcbiAgb3JpZ0NvdXJzZTogQ291cnNlIHwgbnVsbDtcclxuICBvcmlnVGVtcGxhdGU6IENvdXJzZSB8IG51bGw7XHJcbiAgY291cnNlOiBDb3Vyc2U7XHJcbiAgYWxsQ291cnNlcz86IENvdXJzZVtdO1xyXG4gIGRpYWxvZ0NvbnRhaW5lcnM6IERpYWxvZ0NvbnRhaW5lcltdOyAvLyBXaGVuIGVkaXRpbmcgaXRlbXMsIGl0IG1heSBzaG93IGFzIGEgZGlhbG9nXHJcbiAgaGFzVW5zYXZlZERhdGE6IGJvb2xlYW47XHJcbiAgdmlldzogJ3N0dWRlbnRQYWdlJyB8ICdjb3Vyc2VCdWlsZGVyJyB8ICd0ZW1wbGF0ZUJ1aWxkZXInO1xyXG59XHJcblxyXG5jb25zdCBDT05GSVJNX05BVklHQVRFX01FU1NBR0UgPVxyXG4gIExgRHUgaGFyIG9zcGFyYXQgZGF0YS4gVsOkbGogYXZicnl0IG9jaCB0cnljayBDVFJMK1Mgb20gZHUgdmlsbCBzcGFyYSBmw7Zyc3QuYDtcclxuICBcclxuY29uc3QgREVGQVVMVF9TVEFURTogU3RhdGUgPSB7XHJcbiAgb3JpZ0NvdXJzZTogbnVsbCxcclxuICBvcmlnVGVtcGxhdGU6IG51bGwsXHJcbiAgY291cnNlOiBudWxsLFxyXG4gIGRpYWxvZ0NvbnRhaW5lcnM6IFtdLFxyXG4gIGhhc1Vuc2F2ZWREYXRhOiBmYWxzZSxcclxuICB2aWV3OiAnY291cnNlQnVpbGRlcidcclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBFZGl0Q291cnNlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiBpbXBsZW1lbnRzIElDb3Vyc2VFZGl0b3JIb3N0IHtcclxuICBwYWdlWU9mZnNldDogbnVtYmVyO1xyXG4gIGNvbnRlbnREaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gIGNvbnRlbnRZUG9zOiBudW1iZXI7XHJcbiAgaXNTYXZpbmc6IGJvb2xlYW47XHJcbiAgZGlhbG9nczogRGlhbG9nW107XHJcblxyXG4gIHNldFN0YXRlUHJvbWlzZWQgKHN0YXRlOiBQYXJ0aWFsPFN0YXRlPikgOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3NldFN0YXRlKHtoYXNVbnNhdmVkRGF0YTogdHJ1ZSwgLi4uc3RhdGV9KTtcclxuICB9XHJcblxyXG4gIHNldE5vblNhdmVhYmxlRGF0YVN0YXRlIChzdGF0ZTogUGFydGlhbDxTdGF0ZT4pIDogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybiB0aGlzLl9zZXRTdGF0ZShzdGF0ZSk7XHJcbiAgfVxyXG5cclxuICBfc2V0U3RhdGUgKHN0YXRlOiBQYXJ0aWFsPFN0YXRlPikgOiBQcm9taXNlPGFueT4ge1xyXG4gICAgaWYgKHN0YXRlLmNvdXJzZSkge1xyXG4gICAgICB7XHJcbiAgICAgICAgLy9cclxuICAgICAgICAvLyBNYWludGFpbiBjb3Vyc2UgdGFzayBsaW5rcyAocmVtb3ZlIGxpbmtzIHRvIHRhc2tzIHRoYXQgYXJlIG5vdCB1c2VkXHJcbiAgICAgICAgLy8gYnkgYW55IG1vZHVsZSlcclxuICAgICAgICAvL1xyXG4gICAgICAgIGNvbnN0IHt0YXNrcywgbW9kdWxlc30gPSBzdGF0ZS5jb3Vyc2U7XHJcbiAgICAgICAgY29uc3QgdXNlZFRhc2tJZHMgPSB7fTtcclxuICAgICAgICBtb2R1bGVzLmZvckVhY2gobW9kdWxlID0+IG1vZHVsZS50YXNrSWRzLmZvckVhY2goaWQgPT4gdXNlZFRhc2tJZHNbaWRdID0gdHJ1ZSkpO1xyXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkQ291cnNlVGFza3MgPSB0YXNrcy5maWx0ZXIodCA9PiB1c2VkVGFza0lkc1t0LmlkXSk7XHJcbiAgICAgICAgY29uc3QgbW9kaWZpZWRDb3Vyc2UgPSB7Li4uc3RhdGUuY291cnNlfTtcclxuICAgICAgICBtb2RpZmllZENvdXJzZS50YXNrcyA9IGZpbHRlcmVkQ291cnNlVGFza3M7XHJcbiAgICAgICAgc3RhdGUgPSB7Li4uc3RhdGUsIGNvdXJzZTogbW9kaWZpZWRDb3Vyc2V9O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW52b2tlIG91ciBjb3Vyc2UgaW50byBzdGF0ZSBwcm9wZXJ0eSBhbGxDb3Vyc2VzIHNvIHRoYXQgdGhlXHJcbiAgICAvLyByaWdodC1oYW5kIHNpZGUgbGlzdCBvZiBjb3Vyc2VzIGdldHMgdXBkYXRlIGltbWVkaWF0ZWx5IHdpdGhcclxuICAgIC8vIHRoZSBwdWJsaXNoYWJsZSBzdGF0ZSBvZiB0aGlzIGNvdXJzZS5cclxuICAgIGxldCBhbGxDb3Vyc2VzID0gc3RhdGUuYWxsQ291cnNlcyB8fCB0aGlzLnN0YXRlLmFsbENvdXJzZXM7XHJcbiAgICBjb25zdCBjb3Vyc2UgPSBzdGF0ZS5jb3Vyc2UgfHwgdGhpcy5zdGF0ZS5jb3Vyc2U7XHJcbiAgICBpZiAoYWxsQ291cnNlcykge1xyXG4gICAgICBjb25zdCBpZHhPdXJDb3Vyc2UgPSBhbGxDb3Vyc2VzLmZpbmRJbmRleChjID0+IGMuaWQgPT09IHRoaXMucHJvcHMuaWQpO1xyXG4gICAgICBhbGxDb3Vyc2VzID0gdXBkYXRlKGFsbENvdXJzZXMsIHskc3BsaWNlOiBbW2lkeE91ckNvdXJzZSwgMSwgY291cnNlXV19KTtcclxuICAgICAgc3RhdGUgPSB7Li4uc3RhdGV9O1xyXG4gICAgICBzdGF0ZS5hbGxDb3Vyc2VzID0gYWxsQ291cnNlcztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzdXBlci5zZXRTdGF0ZSgoKT0+c3RhdGUgYXMgU3RhdGUsIHJlc29sdmUpKTtcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gICAgdGhpcy5zdGF0ZSA9IHsuLi5ERUZBVUxUX1NUQVRFfTtcclxuICAgIHRoaXMudXBkYXRlID0gdGhpcy51cGRhdGUuYmluZCh0aGlzKTtcclxuICAgIHRoaXMucmVmRGlhbG9nID0gdGhpcy5yZWZEaWFsb2cuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuY29udGVudFlQb3MgPSAwO1xyXG4gICAgdGhpcy5vbktleURvd24gPSB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5iZWZvcmVVbmxvYWQgPSB0aGlzLmJlZm9yZVVubG9hZC5iaW5kKHRoaXMpO1xyXG4gICAgdGhpcy5vbkNsaWNrUHJldmVudFVubG9hZCA9IHRoaXMub25DbGlja1ByZXZlbnRVbmxvYWQuYmluZCh0aGlzKTtcclxuICAgIHRoaXMuaXNTYXZpbmcgPSBmYWxzZTtcclxuICAgIHRoaXMuZGlhbG9ncyA9IFtdO1xyXG4gICAgaWYgKHByb3BzLnZpZXcpIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgIC4uLnRoaXMuc3RhdGUsXHJcbiAgICAgIHZpZXc6IHByb3BzLnZpZXdcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsTW91bnQoKSB7XHJcbiAgICB0aGlzLmxvYWQoKS5jYXRjaChjYXRjaGVyKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIHRoaXMuYmVmb3JlVW5sb2FkKTtcclxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tQcmV2ZW50VW5sb2FkKTtcclxuICB9XHJcblxyXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xyXG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bik7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdGhpcy5iZWZvcmVVbmxvYWQpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja1ByZXZlbnRVbmxvYWQpO1xyXG4gICAgdXBkYXRlQ291cnNlQnVpbGRlclN0YXR1cygnJyk7XHJcbiAgfVxyXG5cclxuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wczogUHJvcHMpIHtcclxuICAgIGlmICh0aGlzLnN0YXRlICYmIHRoaXMuc3RhdGUuY291cnNlKSB7XHJcbiAgICAgIGlmIChuZXh0UHJvcHMuaWQgIT09IHRoaXMucHJvcHMuaWQgfHwgbmV4dFByb3BzLnRlbXBsYXRlSWQgIT09IHRoaXMucHJvcHMudGVtcGxhdGVJZCkge1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZChERUZBVUxUX1NUQVRFKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKG5leHRQcm9wcy52aWV3ICE9PSB0aGlzLnByb3BzLnZpZXcpIHtcclxuICAgICAgdGhpcy5zZXROb25TYXZlYWJsZURhdGFTdGF0ZSh7dmlldzogbmV4dFByb3BzLnZpZXd9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IFByb3BzLCBwcmV2U3RhdGU6IFN0YXRlKSB7XHJcbiAgICBpZiAodGhpcy5jb250ZW50RGl2KSB7XHJcbiAgICAgIGNvbnN0IGNvbnRlbnREaXY6IEhUTUxEaXZFbGVtZW50ID0gZmluZERPTU5vZGUodGhpcy5jb250ZW50RGl2KTtcclxuICAgICAgaWYgKGNvbnRlbnREaXYpIHtcclxuICAgICAgICB0aGlzLmNvbnRlbnRZUG9zID0gY29udGVudERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAocHJldlN0YXRlICYmIHByZXZTdGF0ZS5jb3Vyc2UpIHtcclxuICAgICAgLy8gVGhpcyB3YXMgbm90IHRoZSBpbml0aWFsIHVwZGF0ZS5cclxuICAgICAgLy8gSWYgcHJvcHMgaGF2ZSBiZWVuIHVwZGF0ZWQgdG8gcG9pbnQgb3V0IGFub3RoZXIgY291cnNlIG9yIHRlbXBsYXRlLCByZXNldCBjb21wb25lbnQ6XHJcbiAgICAgIGlmICh0aGlzLnByb3BzLmlkICE9PSBwcmV2UHJvcHMuaWQgfHwgdGhpcy5wcm9wcy50ZW1wbGF0ZUlkICE9PSBwcmV2UHJvcHMudGVtcGxhdGVJZCkge1xyXG4gICAgICAgIHRoaXMubG9hZCgpLmNhdGNoKGNhdGNoZXIpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFwcmV2U3RhdGUuaGFzVW5zYXZlZERhdGEgJiYgdGhpcy5zdGF0ZS5oYXNVbnNhdmVkRGF0YSkge1xyXG4gICAgICB1cGRhdGVDb3Vyc2VCdWlsZGVyU3RhdHVzKCd1bnNhdmVkJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBsb2FkRnJvbVRlbXBsYXRlKHRlbXBsYXRlSWQ6IHN0cmluZykge1xyXG4gICAgc2hvd0luZm8oXCJMYWRkYXIgZGF0YSBmcsOlbiBtYWxsLi4uXCIpO1xyXG4gICAgY29uc3QgdGVtcGxhdGUgPSBhd2FpdCBsb2FkQ291cnNlKHRlbXBsYXRlSWQsIHtpbmNsdWRlVGVtcGxhdGVDaGFpbjogdHJ1ZX0pO1xyXG4gICAgY29uc3QgY291cnNlID0gdXBkYXRlQ3JlYXRpb25TdGFtcChEYXRlLm5vdygpLCB0ZW1wbGF0ZSwgZW52LmN1cnJlbnRVc2VyKTtcclxuICAgIGNvdXJzZS5pZCA9IGNyZWF0ZVVVSUQoKTtcclxuICAgIGNvdXJzZS5wYXJlbnRJZCA9IHRlbXBsYXRlSWQ7XHJcbiAgICBjb3Vyc2UuYWN0aXZlID0gZmFsc2U7XHJcbiAgICBjb3Vyc2UuaXNUZW1wbGF0ZSA9IGZhbHNlO1xyXG4gICAgY291cnNlLnRlbXBsYXRlQ2hhaW4gPSBbLi4uY291cnNlLnRlbXBsYXRlQ2hhaW5dO1xyXG4gICAgY291cnNlLnRlbXBsYXRlQ2hhaW4ucHVzaCh7aWQ6IHRlbXBsYXRlSWQsICRtZXRhOiAncmVmJ30gYXMgQ291cnNlKTtcclxuICAgIGNvbnN0IG15U2Nob29sID0gZW52LmN1cnJlbnRVc2VyLnNjaG9vbDtcclxuICAgIGNvdXJzZS5zY2hvb2wgPSBteVNjaG9vbDtcclxuICAgIGNvdXJzZS5kZXNjcmlwdGlvbiA9IFwiXCI7XHJcbiAgICBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycyA9IFtdO1xyXG4gICAgY291cnNlLmFjbCA9IFtcclxuICAgICAgXCJyb2xlOlVTRVI6UlwiLCAvLyBBbGwgdXNlcnMgbWF5IHZpZXcgaXQuIChDb3VsZCBoYXZlIHJlc3RyaWN0ZWQgaXQgdG8gc2Nob29sLCBidXQgbm90IG5lc2Nlc3NhcnkhKVxyXG4gICAgICBgc2Nob29sUm9sZToke215U2Nob29sfS9FTVBMT1lFRTpTYCAvLyBPdGhlciB0ZWFjaGVycyBhdCBzYW1lIHNjaG9vbCBzaG91bGQgYmUgYWJsZSB0byBtb2RpZnkgdGhlIGNvdXJzZS5cclxuICAgIF07XHJcbiAgICBkZWxldGUgY291cnNlLiRldGFnO1xyXG4gICAgZGVsZXRlIGNvdXJzZS5jcmVhdGVkQnk7XHJcbiAgICBkZWxldGUgY291cnNlLmNyZWF0ZWREYXRlO1xyXG4gICAgZGVsZXRlIGNvdXJzZS5tb2RpZmllZEJ5O1xyXG4gICAgZGVsZXRlIGNvdXJzZS5tb2RpZmllZERhdGU7XHJcbiAgICBkZWxldGUgY291cnNlLmFjdGl2YXRlZEJ5O1xyXG4gICAgZGVsZXRlIGNvdXJzZS5hY3RpdmF0ZWREYXRlO1xyXG4gICAgZGVsZXRlIGNvdXJzZS5nb29nbGVDbGFzc1Jvb21Db2RlO1xyXG4gICAgZGVsZXRlIGNvdXJzZS5nb29nbGVDbGFzc1Jvb21VUkw7XHJcbiAgICBhd2FpdCB0aGlzLnNldFN0YXRlUHJvbWlzZWQoeyBjb3Vyc2UsIG9yaWdDb3Vyc2U6IG51bGwsIG9yaWdUZW1wbGF0ZTogdGVtcGxhdGUgfSk7XHJcbiAgICBzaG93SW5mbyhcIlwiKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWQoKSB7XHJcbiAgICB1cGRhdGVDb3Vyc2VCdWlsZGVyU3RhdHVzKCcnKTtcclxuICAgIGlmICh0aGlzLnByb3BzLmlkKSB7XHJcbiAgICAgIGF3YWl0IHRoaXMubG9hZEV4aXN0aW5nQ291cnNlKHRoaXMucHJvcHMuaWQpO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLnRlbXBsYXRlSWQpIHtcclxuICAgICAgYXdhaXQgdGhpcy5sb2FkRnJvbVRlbXBsYXRlKHRoaXMucHJvcHMudGVtcGxhdGVJZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTGBPZ2lsdGlnIHBhcmFtZXRlci4gaWQgZWxsZXIgdGVtcGxhdGVJZCBtw6VzdGUgYW5nZXNgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFzeW5jIGxvYWRFeGlzdGluZ0NvdXJzZShjb3Vyc2VJZDogc3RyaW5nKSB7XHJcbiAgICBzaG93SW5mbyhcIkxhZGRhciBrdXJzXCIpO1xyXG4gICAgY29uc3QgY291cnNlID0gYXdhaXQgbG9hZENvdXJzZShjb3Vyc2VJZCk7XHJcbiAgICBpZiAoIWNvdXJzZS5yZXNwb25zaWJsZVRlYWNoZXJzKSBjb3Vyc2UucmVzcG9uc2libGVUZWFjaGVycyA9IFtdO1xyXG4gICAgYXdhaXQgdGhpcy5zZXROb25TYXZlYWJsZURhdGFTdGF0ZSh7IGNvdXJzZSwgb3JpZ0NvdXJzZTogY291cnNlIH0pO1xyXG4gICAgc2hvd0luZm8oXCJcIik7XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cGRhdGUoY291cnNlVXBkYXRlcykge1xyXG4gICAgYXdhaXQgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHsgY291cnNlOiB1cGRhdGUodGhpcy5zdGF0ZS5jb3Vyc2UsIGNvdXJzZVVwZGF0ZXMpIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZGVsZXRlQ291cnNlKCkge1xyXG4gICAgc2hvd0luZm8oXCJSYWRlcmFyIGt1cnNlbi4uLlwiKTtcclxuICAgIGNvbnN0IGNvdXJzZVNjaG9vbCA9IHRoaXMuc3RhdGUuY291cnNlLnNjaG9vbDtcclxuICAgIGNvbnN0IHBhcmVudElkID0gdGhpcy5zdGF0ZS5jb3Vyc2UucGFyZW50SWQ7XHJcbiAgICBjb25zdCBjb3Vyc2VJZCA9IHRoaXMucHJvcHMuaWQ7XHJcblxyXG4gICAgY29uc3QgY2hpbGRyZW4gPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PENvdXJzZT4oXCJjb3Vyc2VzXCIsIHtcclxuICAgICAgaGFzRWRnZXNUbzogW3RoaXMucHJvcHMuaWRdXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGJyID0gbmV3IEJhdGNoUnVubmVyKCk7XHJcbiAgICBmb3IgKGNvbnN0IGNoaWxkQ291cnNlIG9mIGNoaWxkcmVuKSB7XHJcbiAgICAgIC8qIENBTk5PVCBETyBUSElTLiBNQVkgTk9UIEhBVkUgQUNDRVNTISBpZiAoY2hpbGRDb3Vyc2UucGFyZW50SWQgPT09IGNvdXJzZUlkKSB7XHJcbiAgICAgICAgLy8gUmVjb25uZWN0IGNoaWxkIHdpdGggbXkgcGFyZW50IGluc3RlYWQsIGFzIEkgd2lsbCBiZSBkaXNhcHBlYXJpbmcuLi5cclxuICAgICAgICBjaGlsZENvdXJzZS5wYXJlbnRJZCA9IHBhcmVudElkO1xyXG4gICAgICAgIGJyLnB1dChcImNvdXJzZXNcIiwgY2hpbGRDb3Vyc2UpO1xyXG4gICAgICB9Ki9cclxuICAgIH1cclxuXHJcbiAgICBici5kZWxldGUoXCJjb3Vyc2VzXCIsIGNvdXJzZUlkKTtcclxuICAgIGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmJhdGNoKGJyLm11dGF0aW9uUmVxdWVzdHMpO1xyXG4gICAgaWYgKGNvdXJzZVNjaG9vbCA9PT0gZW52LmN1cnJlbnRVc2VyLnNjaG9vbCkge1xyXG4gICAgICBteVNjaG9vbENvdXJzZXNSZXBvLmRlbGV0ZShjb3Vyc2VJZCk7XHJcbiAgICB9XHJcbiAgICBzaG93SW5mbyhcIlwiKTtcclxuICAgIGxvY2F0aW9uLmhhc2ggPSBcIiMvY291cnNlcy9uZXdcIjtcclxuICB9XHJcblxyXG4gIGFzeW5jIHNhdmUgKCkge1xyXG4gICAgaWYgKHRoaXMuaXNTYXZpbmcpIHJldHVybjtcclxuICAgIHRyeSB7XHJcbiAgICAgIHRoaXMuaXNTYXZpbmcgPSB0cnVlO1xyXG4gICAgICBhd2FpdCB0aGlzLl9zYXZlKCk7XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGVyciAmJiBlcnIubWVzc2FnZSA/IGVyci5tZXNzYWdlIDogTGBFdHQgb2vDpG50IGZlbCBoYXIgaW50csOkZmZhdC4uLmA7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICBpZiAoZXJyLm5hbWUgPT09ICdodHRwNDA5JyB8fCBlcnIubmFtZSA9PT0gJ2h0dHA0MTInIHx8IGVyci5uYW1lID09PSAnaHR0cDQwNCcpIHtcclxuICAgICAgICAgIC8vIENvbmZsaWN0LiBTaG93IGEgbmljZXIgZXJyb3IgbWVzc2FnZTpcclxuICAgICAgICAgIGVycm9yTWVzc2FnZSA9IExgS3Vyc2VuIGhhciByZWRpZ2VyYWQgYXYgYW5uYW4gYW52w6RuZGFyZS4gTGFkZGEgb20gc2lkYW4gb2NoIGfDtnIgb20gw6RuZHJpbmFybmEuYDtcclxuICAgICAgICB9IGVsc2UgaWYgKGVyci5uYW1lID09PSAnaHR0cDQwMycpIHtcclxuICAgICAgICAgIGlmICh0aGlzLnN0YXRlLmNvdXJzZS5pc1RlbXBsYXRlKVxyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBMYEluZ2VuIGJlaMO2cmlnaGV0IGF0dCBzcGFyYSBrdXJzbWFsbGVuLiBFbmRhc3QgYWRtaW5pc3RyYXTDtnJlciBrYW4gcmVkaWdlcmEga3Vyc21hbGxhci5gO1xyXG4gICAgICAgICAgZWxzZSBpZiAodGhpcy5zdGF0ZS5jb3Vyc2Uuc2Nob29sKVxyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBMYEluZ2VuIGJlaMO2cmlnaGV0IGF0dCBzcGFyYSBrdXJzZW4gJHt0aGlzLnN0YXRlLmNvdXJzZS5uYW1lfS4gS3Vyc2VuIGthbiBiYXJhIHJlZGlnZXJhcyBhdiBhbnN0w6RsbGRhIHDDpSAke3RoaXMuc3RhdGUuY291cnNlLnNjaG9vbH1gO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBzaG93RXJyb3IoZXJyb3JNZXNzYWdlKTtcclxuICAgICAgdXBkYXRlQ291cnNlQnVpbGRlclN0YXR1cygnZXJyb3InKTtcclxuICAgIH0gZmluYWxseSB7XHJcbiAgICAgIHRoaXMuaXNTYXZpbmcgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgX3NhdmUoKSB7XHJcbiAgICBjb25zdCB7IGNvdXJzZSwgb3JpZ0NvdXJzZSwgb3JpZ1RlbXBsYXRlIH0gPSB0aGlzLnN0YXRlO1xyXG4gICAgY29uc3QgZG9lc0FsbFRhc2tzQ292ZXJBbGxSZXF1aXJlbWVudHMgPSBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMoY291cnNlKS5sZW5ndGggPT09IDA7XHJcblxyXG4gICAgc2hvd0luZm8oTGBTcGFyYXIuLi5gKTtcclxuICAgIGxldCBtb2RpZmllZENvdXJzZTogQ291cnNlID0gdXBkYXRlTW9kaWZpY2F0aW9uU3RhbXAoRGF0ZS5ub3coKSwgY291cnNlLCBlbnYuY3VycmVudFVzZXIpO1xyXG5cclxuICAgIGNvbnN0IGJhdGNoID0gbmV3IEJhdGNoUnVubmVyKCk7XHJcblxyXG4gICAgLy8gUmVzb2x2ZSBtYW5pcHVsYXRlZCBncmFwaHMgb2YgZWFjaCB0YXNrIGFuZCByZW1vdmUgJG1ldGEsIGdlbmVyYXRlIFVVSUQgZXRjIGZvclxyXG4gICAgLy8gZWFjaCBhZGRlZCAvIHVwZGF0ZWQgdGFzay5cclxuICAgIC8vIFRoZSByZXN1bHQgb2YgdGhpcyBvcGVyYXRpb24gaXMgdHdvLWZvbGQ6XHJcbiAgICAvLyAgMSkgUmVtb3ZlICRtZXRhIGFuZCBjcmVhdGUgaWQgZm9yIGVhY2ggdGFzay4gVG8gYmUgcmVmbGVjdGVkIGludG8gbmV4dCBzdGF0ZS5cclxuICAgIC8vICAyKSBHZW5lcmF0ZSBtdXRhdGlvbiByZXF1ZXN0cyBpbnRvICdiYXRjaCcgdG8gaW5jbHVkZSBpbiB0aGUgc2luZ2xlIGJhdGNoIHJlcXVlc3QgdG8gdGhlIHNlcnZlci5cclxuICAgIGNvbnN0IG9yaWcgPSBvcmlnQ291cnNlIHx8IG9yaWdUZW1wbGF0ZTtcclxuICAgIGNvbnN0IG5ld0NvdXJzZVRhc2tzID0gbW9kaWZpZWRDb3Vyc2UudGFza3MubWFwKHRhc2sgPT4ge1xyXG4gICAgICBpZiAodGFzay4kbWV0YSA9PT0gJ2FkZCcgfHwgdGFzay4kbWV0YSA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgICBjb25zdCBvcmlnVGFzayA9IG9yaWcudGFza3MuZmluZCh0ID0+IHQuaWQgPT09IHRhc2suaWQpO1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVEb2N1bWVudEdyYXBocyhvcmlnVGFzayB8fCB7fSwgdGFzaywgXCJ0YXNrc1wiLCB7XHJcbiAgICAgICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6ICdrbm93bGVkZ2UtcmVxdWlyZW1lbnRzJyxcclxuICAgICAgICAgIGNlbnRyYWxDb250ZW50OiAnY2VudHJhbC1jb250ZW50JyxcclxuICAgICAgICAgIGFiaWxpdGllczogJ2FiaWxpdGllcydcclxuICAgICAgICB9LCBiYXRjaCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZFRhc2sgPSB7Li4udGFza307XHJcbiAgICAgICAgZGVsZXRlIHVwZGF0ZWRUYXNrLiRtZXRhO1xyXG4gICAgICAgIHJldHVybiB1cGRhdGVkVGFzaztcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBtb2RpZmllZENvdXJzZSA9IHVwZGF0ZShtb2RpZmllZENvdXJzZSwge3Rhc2tzOiB7JHNldDogbmV3Q291cnNlVGFza3N9fSk7XHJcblxyXG4gICAgbW9kaWZpZWRDb3Vyc2UgPSB1cGRhdGVEb2N1bWVudEdyYXBocyhvcmlnQ291cnNlIHx8IHt9LCBtb2RpZmllZENvdXJzZSwgJ2NvdXJzZXMnLCB7XHJcbiAgICAgIHRlbXBsYXRlQ2hhaW46ICdjb3Vyc2VzJyxcclxuICAgICAgY2VudHJhbENvbnRlbnQ6ICdjZW50cmFsLWNvbnRlbnQnLFxyXG4gICAgICBrbm93bGVkZ2VSZXF1aXJlbWVudHM6ICdrbm93bGVkZ2UtcmVxdWlyZW1lbnRzJyxcclxuICAgICAgYWJpbGl0aWVzOiAnYWJpbGl0aWVzJyxcclxuICAgICAgaW1hZ2VzOiAnaW1hZ2VzJyxcclxuICAgICAgdGFza3M6ICd0YXNrcydcclxuICAgIH0sIGJhdGNoKTtcclxuXHJcbiAgICBtb2RpZmllZENvdXJzZSA9IHsuLi5tb2RpZmllZENvdXJzZSB9O1xyXG4gICAgbW9kaWZpZWRDb3Vyc2UucHVibGlzaGFibGUgPSBkb2VzQWxsVGFza3NDb3ZlckFsbFJlcXVpcmVtZW50cztcclxuICAgIGNvbnN0IHRhZ3MgPSAobW9kaWZpZWRDb3Vyc2UudGFncyB8fCBbXSkuZmlsdGVyKHRhZyA9PiB0YWcgIT09ICdpbmNvbXBsZXRlJyk7XHJcbiAgICBtb2RpZmllZENvdXJzZS50YWdzID0gbW9kaWZpZWRDb3Vyc2UucHVibGlzaGFibGUgP1xyXG4gICAgICB0YWdzIDogdGFncy5jb25jYXQoXCJpbmNvbXBsZXRlXCIpO1xyXG5cclxuICAgIGlmICghb3JpZ0NvdXJzZSkge1xyXG4gICAgICAvLyBBIG5ldyBjb3Vyc2Ugc2hvdWxkIGJlIGFkZGVkOlxyXG4gICAgICBiYXRjaC5hZGQoJ2NvdXJzZXMnLCBtb2RpZmllZENvdXJzZSk7XHJcbiAgICAgIGlmIChjb3Vyc2Uuc2Nob29sKSB7XHJcbiAgICAgICAgY29uc3Qgc2Nob29sSWQgPSBhd2FpdCBteVNjaG9vbENvdXJzZXNSZXBvLmdldFNjaG9vbElkKCk7XHJcbiAgICAgICAgYmF0Y2gubGluayhcInNjaG9vbHNcIiwgc2Nob29sSWQsIFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiY291cnNlc1wiKTtcclxuICAgICAgICBpZiAoY291cnNlLmFjdGl2ZSkge1xyXG4gICAgICAgICAgYmF0Y2gubGluayhcInNjaG9vbHNcIiwgc2Nob29sSWQsIFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiYWN0aXZlQ291cnNlc1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIEFuIGV4aXN0aW5nIGNvdXJzZSBzaG91bGQgYmUgdXBkYXRlZDpcclxuICAgICAgYmF0Y2gucHV0KCdjb3Vyc2VzJywgbW9kaWZpZWRDb3Vyc2UpO1xyXG4gICAgICBpZiAoIW9yaWdDb3Vyc2UuYWN0aXZlICYmIGNvdXJzZS5hY3RpdmUpIHtcclxuICAgICAgICAvLyBDb3Vyc2Ugd2FzIGFjdGl2YXRlZC4gQWRkIGEgcmVmZXJlbmNlIHRvIHRoZSBjb3Vyc2Ugb24gc2Nob29sLmFjdGl2ZUNvdXJzZXMuXHJcbiAgICAgICAgY29uc3Qgc2Nob29sSWQgPSBhd2FpdCBteVNjaG9vbENvdXJzZXNSZXBvLmdldFNjaG9vbElkKCk7XHJcbiAgICAgICAgYmF0Y2gubGluayhcInNjaG9vbHNcIiwgc2Nob29sSWQsIFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiYWN0aXZlQ291cnNlc1wiKTtcclxuICAgICAgfSBlbHNlIGlmIChvcmlnQ291cnNlLmFjdGl2ZSAmJiAhY291cnNlLmFjdGl2ZSkge1xyXG4gICAgICAgIC8vIENvdXJzZSB3YXMgaW5hY3RpdmF0ZWQuIFJlbW92ZSBmcm9tIHNjaG9vbC5hY3RpdmVDb3Vyc2VzLlxyXG4gICAgICAgIGNvbnN0IHNjaG9vbElkID0gYXdhaXQgbXlTY2hvb2xDb3Vyc2VzUmVwby5nZXRTY2hvb2xJZCgpO1xyXG4gICAgICAgIGJhdGNoLnVubGluayhcInNjaG9vbHNcIiwgc2Nob29sSWQsIFwiY291cnNlc1wiLCBjb3Vyc2UuaWQsIFwiYWN0aXZlQ291cnNlc1wiKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFBlcmZvcm0gdGhlIGVudGlyZSBiYXRjaCB0aHJvdWdoIGEgc2luZ2xlIFBPU1QgcmVxdWVzdDpcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGVudi5rZWRCYWNrZW5kQ2xpZW50LmJhdGNoKGJhdGNoLm11dGF0aW9uUmVxdWVzdHMpO1xyXG4gICAgc2hvd0luZm8gKG9yaWdDb3Vyc2UgP1xyXG4gICAgICBMYMOEbmRyaW5nYXJuYSBoYXIgc3BhcmF0c2AgOlxyXG4gICAgICBMYEt1cnNlbiBoYXIgc2thcGF0c2ApO1xyXG4gICAgLy8gVXBkYXRlIHN0YXRlIHRvIHJlZmxlY3Qgd2hhdCBoYXMgYmVlbiBwb3N0ZWQ6XHJcbiAgICBpZiAocmVzICYmIHJlcy5uZXdFdGFncylcclxuICAgICAgICBtb2RpZmllZENvdXJzZSA9IGFwcGx5RXRhZ3MobW9kaWZpZWRDb3Vyc2UsIHJlcy5uZXdFdGFncywgW1wiaW1hZ2VzXCIsIFwidGFza3NcIl0pIGFzIENvdXJzZTtcclxuICAgIFxyXG4gICAgaWYgKGNvdXJzZS5zY2hvb2wgPT09IGVudi5jdXJyZW50VXNlci5zY2hvb2wpIHtcclxuICAgICAgLy8gVXBkYXRlIG15U2Nob29sQ291cnNlc1JlcG9cclxuICAgICAgaWYgKCFvcmlnQ291cnNlKSB7XHJcbiAgICAgICAgbXlTY2hvb2xDb3Vyc2VzUmVwby5pbnNlcnQobW9kaWZpZWRDb3Vyc2UpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG15U2Nob29sQ291cnNlc1JlcG8udXBkYXRlKG1vZGlmaWVkQ291cnNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IHRoaXMuc2V0Tm9uU2F2ZWFibGVEYXRhU3RhdGUoe2NvdXJzZTogbW9kaWZpZWRDb3Vyc2UsIG9yaWdDb3Vyc2U6IG1vZGlmaWVkQ291cnNlLCBoYXNVbnNhdmVkRGF0YTogZmFsc2V9KTtcclxuICAgIHVwZGF0ZUNvdXJzZUJ1aWxkZXJTdGF0dXMoJycpO1xyXG4gICAgaWYgKCFvcmlnQ291cnNlKSB7XHJcbiAgICAgIC8vIFRoaXMgd2FzIHRoZSBjcmVhdGlvbiBvZiBhIG5ldyBjb3Vyc2UuIENvcnJlY3QgdGhlIHJvdXRlIG5vdyB3aGVuIHRoZSB1c2VyIGVudGVycyBhbiBlZGl0IHN0YXRlOlxyXG4gICAgICBsb2NhdGlvbi5oYXNoID0gYCMvY291cnNlcy8ke21vZGlmaWVkQ291cnNlLmlkfS9lZGl0YDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFjdGl2YXRlQW5kU2F2ZSgpIHtcclxuICAgIGNvbnN0IGNvdXJzZSA9IHsuLi50aGlzLnN0YXRlLmNvdXJzZX07XHJcbiAgICBpZiAoIWNvdXJzZS5hY3RpdmUpIHtcclxuICAgICAgLypjb25zdCB1bmNvdmVyZWRSZXF1aXJlbWVudHMgPSBnZXRVbmNvdmVyZWRLbm93bGVkZ2VSZXF1aXJlbWVudHMoY291cnNlKTtcclxuICAgICAgaWYgKHVuY292ZXJlZFJlcXVpcmVtZW50cy5sZW5ndGggPiAwKSBcclxuICAgICAgICByZXR1cm4gc2hvd0Vycm9yIChMYERldCBmaW5ucyBrdW5za2Fwc2tyYXYgc29tIGludGUgdXBwZnlsbHMgYXYgbsOlZ29uIG1vZHVsLiBLYW4gaW50ZSBha3RpdmVyYSBrdXJzZW4gZsO2cnLDpG4gYWxsYSBrdW5za2Fwc2tyYXYgZmlubnMgbWVkLmApO1xyXG4gICAgICAqL1xyXG5cclxuICAgICAgY291cnNlLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgIGNvdXJzZS5hY3RpdmF0ZWRCeSA9IHtcclxuICAgICAgICBuYW1lOiBlbnYuY3VycmVudFVzZXIuZGlzcGxheU5hbWUsXHJcbiAgICAgICAgdXJsOiBcIm1haWx0bzpcIiArICBlbnYuY3VycmVudFVzZXIubWFpbFxyXG4gICAgICB9O1xyXG4gICAgICBjb3Vyc2UuYWN0aXZhdGVkRGF0ZSA9IERhdGUubm93KCk7XHJcbiAgICAgIHRoaXMuc2V0U3RhdGVQcm9taXNlZCh7Y291cnNlfSlcclxuICAgICAgICAudGhlbigoKT0+dGhpcy5zYXZlKCkpXHJcbiAgICAgICAgLmNhdGNoKGNhdGNoZXIpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaW5hY3RpdmF0ZUFuZFNhdmUoKSB7XHJcbiAgICBjb25zdCBjb3Vyc2UgPSB7Li4udGhpcy5zdGF0ZS5jb3Vyc2V9O1xyXG4gICAgaWYgKGNvdXJzZS5hY3RpdmUpIHtcclxuICAgICAgY291cnNlLmFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICBjb3Vyc2UuaW5hY3RpdmF0ZWRCeSA9IHtcclxuICAgICAgICBuYW1lOiBlbnYuY3VycmVudFVzZXIuZGlzcGxheU5hbWUsXHJcbiAgICAgICAgdXJsOiBcIm1haWx0bzpcIiArICBlbnYuY3VycmVudFVzZXIubWFpbFxyXG4gICAgICB9O1xyXG4gICAgICBjb3Vyc2UuaW5hY3RpdmF0ZWREYXRlID0gRGF0ZS5ub3coKTtcclxuICAgICAgdGhpcy5zZXRTdGF0ZVByb21pc2VkKHtjb3Vyc2V9KVxyXG4gICAgICAgIC50aGVuKCgpPT50aGlzLnNhdmUoKSlcclxuICAgICAgICAuY2F0Y2goY2F0Y2hlcik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvcGVuRGlhbG9nKGRpYWxvZ0NvbnRhaW5lcjogRGlhbG9nQ29udGFpbmVyKSB7XHJcbiAgICB0aGlzLnNldE5vblNhdmVhYmxlRGF0YVN0YXRlKHtkaWFsb2dDb250YWluZXJzOiB0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMuY29uY2F0KGRpYWxvZ0NvbnRhaW5lcil9KTtcclxuICB9XHJcblxyXG4gIGNsb3NlRGlhbG9nKCkge1xyXG4gICAgY29uc3Qge2RpYWxvZ0NvbnRhaW5lcnN9ID0gdGhpcy5zdGF0ZTtcclxuICAgIGNvbnN0IHtsZW5ndGh9ID0gZGlhbG9nQ29udGFpbmVycztcclxuICAgIGxlbmd0aCAmJiB0aGlzLnNldE5vblNhdmVhYmxlRGF0YVN0YXRlKHtkaWFsb2dDb250YWluZXJzOiBkaWFsb2dDb250YWluZXJzLnNsaWNlKDAsIGxlbmd0aCAtIDEpfSk7XHJcbiAgICAvLyBOb3cgc3luYyB0aGUgZGlyZWN0ICdkaWFsb2dzJyBwcm9wZXJ0eSB3aXRoIHRoZSBuZXcgc3RhdGU6XHJcbiAgICB3aGlsZSAodGhpcy5kaWFsb2dzLmxlbmd0aCA+PSBsZW5ndGgpIHRoaXMuZGlhbG9ncy5wb3AoKTtcclxuICB9XHJcblxyXG4gIHJlZkRpYWxvZyhkaWFsb2c6IERpYWxvZyAmIFJlYWN0LkNvbXBvbmVudCwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgdGhpcy5kaWFsb2dzW2luZGV4XSA9IGRpYWxvZzsgLy8gU2V0dGluZyBwZXIgaW5kZXggaW5zdGVhZCBvZiBwdXNoKCkuIFdvcmtzIGV2ZW4gaWYgdGhlIHJlZiBhdHRyaWJ1dGUgY291bGQgYmUgaW52b2tlZCBtdWx0aXBsZSB0aW1lcy5cclxuICB9XHJcblxyXG4gIG9uS2V5RG93biAoZXY6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgIGlmIChldi53aGljaCA9PT0gODMgJiYgKGV2LmN0cmxLZXkgfHwgZXYubWV0YUtleSkpIHsgLy8gQ1RSTC1TXHJcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHRoaXMuc2F2ZURpYWxvZygpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnNhdmUoKTtcclxuICAgIH0gZWxzZSBpZiAoZXYud2hpY2ggPT09IDI3ICYmIHRoaXMuc3RhdGUuZGlhbG9nQ29udGFpbmVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIHRoaXMuY2xvc2VEaWFsb2coKTtcclxuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0gZWxzZSBpZiAoZXYud2hpY2ggPT09IDEzKSB7XHJcbiAgICAgIGNvbnN0IHRhcmdldEVsZW0gPSBldi50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIGlmICh0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgIHRhcmdldEVsZW0udGFnTmFtZSAhPT0gJ1RFWFRBUkVBJyAmJlxyXG4gICAgICAgIHRhcmdldEVsZW0udGFnTmFtZSAhPT0gJ0lOUFVUJyAmJlxyXG4gICAgICAgIHRhcmdldEVsZW0udGFnTmFtZSAhPT0gJ1NFTEVDVCcgJiZcclxuICAgICAgICB0YXJnZXRFbGVtLnRhZ05hbWUgIT09ICdPUFRJT04nICYmXHJcbiAgICAgICAgIXRhcmdldEVsZW0uY29udGVudEVkaXRhYmxlKVxyXG4gICAgICB7XHJcbiAgICAgICAgdGhpcy5zYXZlRGlhbG9nKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGJlZm9yZVVubG9hZChldjogRXZlbnQpIHtcclxuICAgIGlmICh0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCB8fCB0aGlzLnN0YXRlLmhhc1Vuc2F2ZWREYXRhKSB7XHJcbiAgICAgIGlmICghZW52LmtlZEJhY2tlbmRDbGllbnQuaHR0cC5iZWFyZXJQcm92aWRlci53YW50c1JlZGlyZWN0KSB7XHJcbiAgICAgICAgZXYucmV0dXJuVmFsdWUgPSBDT05GSVJNX05BVklHQVRFX01FU1NBR0U7XHJcbiAgICAgICAgcmV0dXJuIGV2LnJldHVyblZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkNsaWNrUHJldmVudFVubG9hZChldjogRXZlbnQpIHtcclxuICAgIGlmIChldi50YXJnZXQgJiYgKCcnKyhldi50YXJnZXQgYXMgYW55KS50YWdOYW1lKS50b0xvd2VyQ2FzZSgpID09PSAnYScpIHtcclxuICAgICAgY29uc3QgYTogSFRNTEFuY2hvckVsZW1lbnQgPSBldi50YXJnZXQgYXMgSFRNTEFuY2hvckVsZW1lbnQ7XHJcbiAgICAgIGlmIChhLmhyZWYgJiYgYS5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSAhPT0gJyMnICYmICFhLnRhcmdldCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCB8fCB0aGlzLnN0YXRlLmhhc1Vuc2F2ZWREYXRhKSB7XHJcbiAgICAgICAgICBpZiAoIWNvbmZpcm0oQ09ORklSTV9OQVZJR0FURV9NRVNTQUdFKSkge1xyXG4gICAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2F2ZURpYWxvZygpIHtcclxuICAgIGlmICh0aGlzLnN0YXRlLmRpYWxvZ0NvbnRhaW5lcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zdCBkaWFsb2cgPSB0aGlzLmRpYWxvZ3NbdGhpcy5zdGF0ZS5kaWFsb2dDb250YWluZXJzLmxlbmd0aC0xXTsgLy8gWUVTLCBzaG91bGQgcmVmZXJlbmNlIHRoaXMuZGlhbG9ncyBieSBsZW5ndGggb2YgZGlhbG9nQ29udGFpbmVycy4gU3RyYW5nZSB5ZXMsIGJ1dCBsZWF2ZSBpdCBzbyFcclxuICAgICAgZGlhbG9nICYmIGRpYWxvZy5zYXZlKCk7IFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgaXNBZG1pbiA9IGVudi5jdXJyZW50VXNlci5yb2xlcy5pbmRleE9mKFwiQURNSU5cIikgPj0gMDtcclxuICAgIGNvbnN0IGNvdXJzZSA9IHRoaXMuc3RhdGUuY291cnNlO1xyXG4gICAgcmV0dXJuICF0aGlzLnN0YXRlLmNvdXJzZSA/IDxkaXYgc3R5bGU9e3tvdXRsaW5lOiAwfX0+XHJcbiAgICAgIDxDb3Vyc2VCYW5uZXJcclxuICAgICAgICB0aXRsZT1cIlwiXHJcbiAgICAgICAgYWN0aXZlUGFnZT17dGhpcy5zdGF0ZS52aWV3fVxyXG4gICAgICAgIHJvdXRlcz17e2ZlZWRiYWNrOiB0aGlzLnByb3BzLmZlZWRiYWNrVXJsfX1cclxuICAgICAgLz48cD48U3Bpbm5lci8+Vi5nLiB2w6RudGEgbWVkYW4ga3Vyc2VuIGxhZGRhcy4uLjwvcD5cclxuICAgICAgPC9kaXY+IDpcclxuICAgICAgPGRpdiBzdHlsZT17e291dGxpbmU6IDB9fT5cclxuICAgICAgPENvdXJzZUJhbm5lclxyXG4gICAgICAgIHRpdGxlPXtjb3Vyc2UubmFtZSArIFwiIC0gXCIgKyBjb3Vyc2UucG9pbnRzICsgXCJwXCJ9XHJcbiAgICAgICAgYWN0aXZlUGFnZT17dGhpcy5zdGF0ZS52aWV3fVxyXG4gICAgICAgIHJvdXRlcz17e1xyXG4gICAgICAgICAgc3R1ZGVudFBhZ2U6IHByZXNlcnZlSW1wZXJzb25hdGlvblF1ZXJ5KHRoaXMucHJvcHMudmlld0NvdXJzZVVybCwge2NvdXJzZUlkOiB0aGlzLnByb3BzLmlkfSksXHJcbiAgICAgICAgICBmZWVkYmFjazogdGhpcy5wcm9wcy5mZWVkYmFja1VybFxyXG4gICAgICAgIH19XHJcbiAgICAgICAgaG9zdD17dGhpc31cclxuICAgICAgICBjb3Vyc2U9e2NvdXJzZX1cclxuICAgICAgICBvcmlnQ291cnNlPXt0aGlzLnN0YXRlLm9yaWdDb3Vyc2V9XHJcbiAgICAgICAgYmFja2dyb3VuZEltYWdlPXtjb3Vyc2UuaW1hZ2VzLmZpbHRlcihpbWcgPT4gaW1nLmlkID09PSBjb3Vyc2UuaW1hZ2VJZCkubWFwKGltZz0+aW1nLnVybClbMF19XHJcbiAgICAgICAgaXNUZW1wbGF0ZT17Y291cnNlLmlzVGVtcGxhdGV9XHJcbiAgICAgICAvPlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LXJvdyBzdi1sYXlvdXRcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWxheW91dCBzdi1za2lwLXNwYWNlciBzdi1jb2x1bW4tMTJcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytc3BhY2VyLTIwcHh2dCBzdi12ZXJ0aWNhbCBzdi1sYXlvdXQgc3Ytc2tpcC1zcGFjZXJcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJwYWdlY29udGVudCBzdi1sYXlvdXQgc3Ytc3BhY2VyLTIwcHh2dCBzdi1za2lwLXNwYWNlclwiIHJlZj17XHJcbiAgICAgICAgICAgICAgZGl2ID0+IHRoaXMuY29udGVudERpdiA9IGRpdn0+XHJcbiAgICAgICAgICAgICAgPElubmVyRWRpdENvdXJzZVxyXG4gICAgICAgICAgICAgICAgY291cnNlPXt0aGlzLnN0YXRlLmNvdXJzZX1cclxuICAgICAgICAgICAgICAgIG9yaWdDb3Vyc2U9e3RoaXMuc3RhdGUub3JpZ0NvdXJzZX1cclxuICAgICAgICAgICAgICAgIGhvc3Q9e3RoaXN9IC8+XHJcbiAgICAgICAgICAgICAgPGJyLz5cclxuICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5kaWFsb2dDb250YWluZXJzLm1hcCgoe0NvbXBvbmVudCwgcHJvcHN9LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2l9PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRhcmtlblwiPlxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJtb2RhbC1wYWdlLXdyYXBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1vZGFsLXBhZ2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxDb21wb25lbnQgcmVmPXtkaWFsb2c9PnRoaXMucmVmRGlhbG9nKGRpYWxvZywgaSl9IHsuLi5wcm9wc30gLz5cclxuICAgICAgICAgICAgICAgICAgICAgIDxSZW1vdmVJdGVtIG9uQ2xpY2s9eygpPT50aGlzLmNsb3NlRGlhbG9nKCl9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4vY291cnNlLWJhbm5lclwiO1xyXG5pbXBvcnQgeyBMLCBzaG93RXJyb3IsIGZsYXR0ZW4sIGNvbXBhcmVQcm9wLCBzaG93SW5mbywgbWF4TGVuZ3RoLCBjYXBpdGFsaXplRmlyc3QgfSBmcm9tIFwiLi4vLi4vLi4vdXRpbHMvdXRpbHNcIjtcclxuaW1wb3J0IHsgQ291cnNlLCBTdWJqZWN0IH0gZnJvbSBcImtlZGJhY2tlbmQvbW9kZWxzXCI7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4uL3N1Yi1jb21wb25lbnRzL3NwaW5uZXJcIjtcclxuaW1wb3J0IHsgU2Nob29sQ291cnNlcyB9IGZyb20gXCIuLi9zdWItY29tcG9uZW50cy9zY2hvb2wtY291cnNlc1wiO1xyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICBmZWVkYmFja1VybDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG4gIGNvdXJzZU9wdGlvbnM6IENvdXJzZU9wdGlvbltdO1xyXG4gIHNlbGVjdGVkVGVtcGxhdGVJZDogc3RyaW5nO1xyXG4gIGNvdXJzZXM6IENvdXJzZU9wdGlvbltdIHwgbnVsbDtcclxuICBzZWxlY3RlZENvdXJzZUlkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmludGVyZmFjZSBDb3Vyc2VPcHRpb24ge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ3JlYXRlTmV3Q291cnNlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLFN0YXRlPiB7XHJcbiAgY29uc3RydWN0b3IocHJvcHM6IFByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICB0aGlzLnN0YXRlID0ge1xyXG4gICAgICBjb3Vyc2VPcHRpb25zOiBudWxsLFxyXG4gICAgICBzZWxlY3RlZFRlbXBsYXRlSWQ6IFwiLS1cIixcclxuICAgICAgY291cnNlczogbnVsbCxcclxuICAgICAgc2VsZWN0ZWRDb3Vyc2VJZDogXCJcIlxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB0aGlzLmxvYWQoKS5jYXRjaChzaG93RXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgbG9hZCgpIHtcclxuICAgIHNob3dJbmZvKFwiTGFkZGFyIGt1cnNlclwiKTtcclxuICAgIGNvbnN0IHN1YmplY3RzID0gYXdhaXQgZW52LmtlZEJhY2tlbmRDbGllbnQubGlzdDxTdWJqZWN0PihcInN1YmplY3RzXCIsIHtcclxuICAgICAgdGFnczogW1wic2Nob29sVHlwZTpneW1uYXNpdW1cIl0sXHJcbiAgICAgIGluY2x1ZGU6IFwiY291cnNlVGVtcGxhdGVzXCJcclxuICAgIH0pO1xyXG4gICAgY29uc3QgY291cnNlcyA9IGZsYXR0ZW4oc3ViamVjdHMubWFwKHMgPT4gcy5jb3Vyc2VUZW1wbGF0ZXMpKS5zb3J0KGNvbXBhcmVQcm9wKFwibmFtZVwiKSk7XHJcbiAgICBjb25zdCBjb3Vyc2VPcHRpb25zOiBDb3Vyc2VPcHRpb25bXSA9XHJcbiAgICAgIFt7IGlkOiBcIi0tXCIsIG5hbWU6IFwiLS1cIiB9XS5jb25jYXQoY291cnNlcyk7XHJcbiAgICBzaG93SW5mbyhcIlwiKTtcclxuICAgIHRoaXMuc2V0U3RhdGUoeyBjb3Vyc2VPcHRpb25zIH0pO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgb25TZWxlY3RDb3Vyc2UoaWQ6IHN0cmluZykge1xyXG4gICAgY29uc3QgZGVyaXZlZENvdXJzZXMgPSBhd2FpdCBlbnYua2VkQmFja2VuZENsaWVudC5saXN0PENvdXJzZT4oXCJjb3Vyc2VzXCIsIHsgaGFzRWRnZXNUbzogW2lkXSB9KTtcclxuICAgIGNvbnN0IGNvdXJzZU9wdGlvbnMgPSBkZXJpdmVkQ291cnNlc1xyXG4gICAgICAuZmlsdGVyKGNvdXJzZSA9PiBjb3Vyc2UuYWN0aXZlKVxyXG4gICAgICAubWFwKCh7IGlkLCBzY2hvb2wsIGRlc2NyaXB0aW9uLCBjcmVhdGVkQnksIG1vZGlmaWVkQnkgfSkgPT4ge1xyXG4gICAgICAgIGlmIChkZXNjcmlwdGlvbikgZGVzY3JpcHRpb24gPSBtYXhMZW5ndGgoZGVzY3JpcHRpb24sIDgwKTtcclxuICAgICAgICBsZXQgZGVzY3JpcHRpb25PckF1dGhvciA9IGRlc2NyaXB0aW9uIHx8XHJcbiAgICAgICAgICAoY3JlYXRlZEJ5ID8gYCR7Y3JlYXRlZEJ5Lm5hbWV9cyB2ZXJzaW9uYCA6XHJcbiAgICAgICAgICBtb2RpZmllZEJ5ICYmIGAke21vZGlmaWVkQnkubmFtZX1zIHZlcnNpb25gKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgaWQsXHJcbiAgICAgICAgICBuYW1lOiBzY2hvb2wgPT09ICdzdGFuZGFyZCcgP1xyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbiA/IGBTdGFuZGFyZCAtICR7ZGVzY3JpcHRpb259YCA6IFwiU3RhbmRhcmRcIiA6XHJcbiAgICAgICAgICAgIGAke3NjaG9vbH0gLSAke21heExlbmd0aChkZXNjcmlwdGlvbk9yQXV0aG9yLCA5MCl9YCxcclxuICAgICAgICAgIHNjaG9vbFxyXG4gICAgICAgIH07XHJcbiAgICAgIH0pLnNvcnQoY29tcGFyZVByb3AoXCJuYW1lXCIpKTtcclxuICAgIGNvbnN0IGtlZFN0YW5kYXJkT3B0aW9ucyA9IGNvdXJzZU9wdGlvbnMuZmlsdGVyKG9wdGlvbiA9PiBvcHRpb24uc2Nob29sID09PSBcInN0YW5kYXJkXCIpO1xyXG4gICAgY29uc3QgdGVhY2hlck1hZGUgPSBjb3Vyc2VPcHRpb25zLmZpbHRlcihvcHRpb24gPT4gb3B0aW9uLnNjaG9vbCAhPT0gXCJzdGFuZGFyZFwiKTtcclxuICAgIGNvbnN0IGNvdXJzZXMgPSBbXHJcbiAgICAgIC4uLmtlZFN0YW5kYXJkT3B0aW9ucyxcclxuICAgICAgeyBpZCwgbmFtZTogXCJUb21cIiB9LFxyXG4gICAgICAuLi50ZWFjaGVyTWFkZV07XHJcbiAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgY291cnNlcyxcclxuICAgICAgc2VsZWN0ZWRUZW1wbGF0ZUlkOiBpZCxcclxuICAgICAgc2VsZWN0ZWRDb3Vyc2VJZDogY291cnNlc1swXS5pZFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICBjb25zdCB7IGNvdXJzZU9wdGlvbnMsIHNlbGVjdGVkVGVtcGxhdGVJZCwgY291cnNlcywgc2VsZWN0ZWRDb3Vyc2VJZCB9ID0gdGhpcy5zdGF0ZTtcclxuICAgIHJldHVybiA8ZGl2IHN0eWxlPXt7IG91dGxpbmU6IDAgfX0+XHJcbiAgICAgIDxDb3Vyc2VCYW5uZXJcclxuICAgICAgICB0aXRsZT17TGBLdXJzYnlnZ2FyZW5gfVxyXG4gICAgICAgIGFjdGl2ZVBhZ2U9XCJjb3Vyc2VCdWlsZGVyXCJcclxuICAgICAgICByb3V0ZXM9e3tmZWVkYmFjazogdGhpcy5wcm9wcy5mZWVkYmFja1VybH19XHJcbiAgICAgIC8+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytcm93IHN2LWxheW91dFwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyIHN2LWNvbHVtbi0xMlwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1zcGFjZXItMjBweHZ0IHN2LXZlcnRpY2FsIHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2Vjb250ZW50IHN2LWxheW91dCBzdi1zcGFjZXItMjBweHZ0IHN2LXNraXAtc3BhY2VyXCI+XHJcblxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Ytcm93IHN2LWxheW91dCBzdi1za2lwLXNwYWNlclwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e1wic3YtbGF5b3V0IHN2LXNraXAtc3BhY2VyIHN2LWNvbHVtbi03XCJ9PlxyXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInN2LWh0bWwtcG9ydGxldCBzdi1wb3J0bGV0IHN2LXNraXAtc3BhY2VyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPlNrYXBhIG55IGt1cnM8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxociAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbCBzcGFjZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPlbDpGxqIGd5bW5hc2lla3VycyA6PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgeyFjb3Vyc2VPcHRpb25zID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjxTcGlubmVyIC8+PHNlbGVjdCBkaXNhYmxlZCB2YWx1ZT1cIlwiPjxvcHRpb24+LS08L29wdGlvbj48L3NlbGVjdD48L2Rpdj4gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnNlbGVjdGVkVGVtcGxhdGVJZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXtldiA9PiB0aGlzLm9uU2VsZWN0Q291cnNlKGV2LnRhcmdldC52YWx1ZSkuY2F0Y2goc2hvd0Vycm9yKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Y291cnNlT3B0aW9ucy5tYXAoY291cnNlID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtjb3Vyc2UuaWR9IHZhbHVlPXtjb3Vyc2UuaWR9Pntjb3Vyc2UubmFtZX08L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+fVxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAge2NvdXJzZXMgJiYgPGRpdiBjbGFzc05hbWU9XCJhbGlnbi1ob3Jpem9udGFsIHNwYWNlZFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJob3Jpem9udGFsSXRlbSB0b3BcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+VXRnw6UgZnLDpW4gdmVyc2lvbjogPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+fVxyXG4gICAgICAgICAgICAgICAgICAgIHtjb3Vyc2VzICYmIDxkaXYgY2xhc3NOYW1lPVwiYWxpZ24taG9yaXpvbnRhbCBzcGFjZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaG9yaXpvbnRhbEl0ZW0gdG9wXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgdmFsdWU9e3NlbGVjdGVkQ291cnNlSWR9IG9uQ2hhbmdlPXtldiA9PiB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZENvdXJzZUlkOiBldi50YXJnZXQudmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtjb3Vyc2VzLm1hcChjb3Vyc2UgPT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24ga2V5PXtjb3Vyc2UuaWR9IHZhbHVlPXtjb3Vyc2UuaWR9Pntjb3Vyc2UubmFtZX08L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2Pn1cclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz48YnIgLz5cclxuICAgICAgICAgICAgICAgICAgICB7Y291cnNlcyAmJiBzZWxlY3RlZENvdXJzZUlkICYmIDxMaW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICB0bz17YC9jb3Vyc2VzL2NyZWF0ZS1mcm9tLXRlbXBsYXRlLyR7dGhpcy5zdGF0ZS5zZWxlY3RlZENvdXJzZUlkfWB9XHJcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJidG4gYnRuLWxhcmdlXCJcclxuICAgICAgICAgICAgICAgICAgICA+U2thcGE8L0xpbms+fVxyXG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzdi1sYXlvdXQgc3YtY29sdW1uLTVcIj5cclxuICAgICAgICAgICAgICAgICAgPFNjaG9vbENvdXJzZXMgLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICB9XHJcbn0iLCJpbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5cclxuY29uc3QgSEVBUlRCRUFUX0lOVEVSVkFMID0gNSAqIDYwICogMTAwMDsgLy8gNSBtaW51dGVzLlxyXG5jb25zdCBIRUFSVEJFQVRfVVJMID0gXCIvNC40YjRjY2UyYTE2MGU0NDU1OTNmMTYwNDMuaHRtbFwiOyAvLyBDb3VsZCBiZSBhbnkgcHJvdGVjdGVkIHJlc291cmNlLiBCVUdCVUc6IENvbmZpZ3VyYWJsZS5cclxuXHJcbmxldCBsYXN0QWN0aXZpdHkgPSBEYXRlLm5vdygpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGtlZXBTZXNzaW9uQWxpdmUoKSB7XHJcbiAgc2V0SW50ZXJ2YWwob25UaW1lb3V0LCBIRUFSVEJFQVRfSU5URVJWQUwpO1xyXG4gIHNldFRpbWVvdXQoKCk9PiQoJ2JvZHknKVxyXG4gICAgLm1vdXNlbW92ZShvblVzZXJBY3RpdmUpXHJcbiAgICAua2V5cHJlc3Mob25Vc2VyQWN0aXZlKVxyXG4gICAgLnNjcm9sbChvblVzZXJBY3RpdmUpLCAxMDApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBvblVzZXJBY3RpdmUoKSB7XHJcbiAgbGFzdEFjdGl2aXR5ID0gRGF0ZS5ub3coKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25UaW1lb3V0KCkge1xyXG4gIGNvbnN0IGluYWN0aXZpdHlUaW1lID0gRGF0ZS5ub3coKSAtIGxhc3RBY3Rpdml0eTtcclxuICBpZiAoaW5hY3Rpdml0eVRpbWUgPCBIRUFSVEJFQVRfSU5URVJWQUwpIHtcclxuICAgIGhlYXJ0YmVhdCgpO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gaGVhcnRiZWF0KCkge1xyXG4gIGNvbnNvbGUubG9nKGBTZW5kaW5nIGhlYXJ0YmVhdCByZXF1ZXN0IHRvICR7SEVBUlRCRUFUX1VSTH1gKTtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goSEVBUlRCRUFUX1VSTCwge1xyXG4gICAgICBjYWNoZTogJ25vLWNhY2hlJyxcclxuICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbidcclxuICAgIH0pO1xyXG4gICAgY29uc29sZS5sb2coYFJlc3BvbnNlIGZyb20gJHtIRUFSVEJFQVRfVVJMfTogJHtyZXMuc3RhdHVzfSAke3Jlcy5zdGF0dXNUZXh0fWApO1xyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS53YXJuKGBSZXF1ZXN0IHRvICR7SEVBUlRCRUFUX1VSTH0gZmFpbGVkOiAke2Vycn1gKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBMIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBIYXNoUm91dGVyIGFzIFJvdXRlciwgUm91dGUsIExpbmssIFJlZGlyZWN0IH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCB7IEVycm9yU3VjY2Vzc0ZlZWRiYWNrIH0gZnJvbSAnLi4vLi4vdXRpbHMvZXJyb3Itc3VjY2Vzcy1mZWVkYmFjayc7XHJcbmltcG9ydCB7IFNjaG9vbHMgfSBmcm9tICcuL3NjaG9vbHMnO1xyXG5pbXBvcnQgeyBOZXdTY2hvb2wgfSBmcm9tICcuL3NjaG9vbHMvbmV3LXNjaG9vbCc7XHJcbmltcG9ydCBlbnYgZnJvbSAnLi4vLi4vZ2xvYmFscy9LRUQuZW52JztcclxuXHJcbi8vIFZpZXdzXHJcbmltcG9ydCB7IFN1YmplY3RzLCBTaG93U3ViamVjdCB9IGZyb20gJy4vc3ViamVjdHMnO1xyXG5pbXBvcnQgeyBFZGl0Q291cnNlIH0gZnJvbSAnLi9jb3Vyc2VzJztcclxuaW1wb3J0IHsgRWRpdFNjaG9vbCB9IGZyb20gXCIuL3NjaG9vbHMvZWRpdC1zY2hvb2xcIjtcclxuaW1wb3J0IHsgQ291cnNlQmFubmVyIH0gZnJvbSBcIi4vY291cnNlcy9jb3Vyc2UtYmFubmVyXCI7XHJcbmltcG9ydCB7IENyZWF0ZU5ld0NvdXJzZSB9IGZyb20gXCIuL2NvdXJzZXMvY3JlYXRlLW5ld1wiO1xyXG5pbXBvcnQgeyBTcGlubmVyIH0gZnJvbSBcIi4vc3ViLWNvbXBvbmVudHMvc3Bpbm5lclwiO1xyXG5cclxuLy8gS2VlcCBTZXNzaW9uIEFsaXZlXHJcbmltcG9ydCB7IGtlZXBTZXNzaW9uQWxpdmUgfSBmcm9tICcuLi8uLi91dGlscy9rZWVwLXNlc3Npb24tYWxpdmUnO1xyXG5rZWVwU2Vzc2lvbkFsaXZlKCk7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gIHZpZXdDb3Vyc2VVcmw6IHN0cmluZztcclxuICBmZWVkYmFja1VybDogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgU3RhdGUge1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ291cnNlQnVpbGRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxQcm9wcyxTdGF0ZT4ge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBQcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3QgaXNBdXRob3JpemVkID0gZW52LmN1cnJlbnRVc2VyLnJvbGVzLnNvbWUocm9sZSA9PiByb2xlID09PSBcIkFETUlOXCIgfHwgcm9sZSA9PT0gXCJFTVBMT1lFRVwiKTtcclxuICAgIGNvbnN0IGlzQWRtaW4gPSBlbnYuY3VycmVudFVzZXIucm9sZXMuc29tZShyb2xlID0+IHJvbGUgPT09IFwiQURNSU5cIik7XHJcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJjb3Vyc2UtYnVpbGRlclwiPlxyXG4gICAgICA8Um91dGVyPlxyXG4gICAgICAgIHtpc0F1dGhvcml6ZWQgPyA8ZGl2PlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvXCIgcmVuZGVyPXsoeyBtYXRjaCB9KSA9PiBpc0FkbWluID9cclxuICAgICAgICAgICAgPFNjaG9vbHMgdmlld0NvdXJzZVVybD17dGhpcy5wcm9wcy52aWV3Q291cnNlVXJsfSBmZWVkYmFja1VybD17dGhpcy5wcm9wcy5mZWVkYmFja1VybH0gLz4gOlxyXG4gICAgICAgICAgICA8Q3JlYXRlTmV3Q291cnNlIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3NjaG9vbHNcIiByZW5kZXI9eyh7IG1hdGNoIH0pID0+XHJcbiAgICAgICAgICAgIDxTY2hvb2xzXHJcbiAgICAgICAgICAgICAgdmlld0NvdXJzZVVybD17dGhpcy5wcm9wcy52aWV3Q291cnNlVXJsfVxyXG4gICAgICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3NjaG9vbHMvbmV3L2d5bW5hc2l1bVwiIHJlbmRlcj17KCk9PjxOZXdTY2hvb2wgdHlwZT1cImd5bW5hc2l1bVwiIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3NjaG9vbHMvbmV3L3ByaW1hcnlcIiByZW5kZXI9eygpPT48TmV3U2Nob29sIHR5cGU9XCJwcmltYXJ5XCIgZmVlZGJhY2tVcmw9e3RoaXMucHJvcHMuZmVlZGJhY2tVcmx9IC8+fSAvPlxyXG4gICAgICAgICAgPFJvdXRlIGV4YWN0IHBhdGg9XCIvc2Nob29scy86aWQvZWRpdFwiIHJlbmRlcj17KHsgbWF0Y2ggfSkgPT4gPEVkaXRTY2hvb2xcclxuICAgICAgICAgICAgaWQ9e21hdGNoLnBhcmFtcy5pZH1cclxuICAgICAgICAgICAgdGl0bGU9e0xgRWRpdGVyYSBza29sYWB9XHJcbiAgICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL3N1YmplY3RzXCIgcmVuZGVyPXsoKT0+PFN1YmplY3RzIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3N1YmplY3RzLzppZFwiIHJlbmRlcj17KHsgbWF0Y2ggfSkgPT4gPFNob3dTdWJqZWN0XHJcbiAgICAgICAgICAgIGlkPXttYXRjaC5wYXJhbXMuaWR9XHJcbiAgICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBleGFjdCBwYXRoPVwiL2NvdXJzZXMvbmV3XCIgcmVuZGVyPXsoKT0+IDxDcmVhdGVOZXdDb3Vyc2VcclxuICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfSAvPn0gLz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2NvdXJzZXMvY3JlYXRlLWZyb20tdGVtcGxhdGUvOnRlbXBsYXRlSWRcIiByZW5kZXI9eyh7bWF0Y2h9KSA9PiA8RWRpdENvdXJzZVxyXG4gICAgICAgICAgICB0ZW1wbGF0ZUlkPXttYXRjaC5wYXJhbXMudGVtcGxhdGVJZH1cclxuICAgICAgICAgICAgdmlldz1cImNvdXJzZUJ1aWxkZXJcIlxyXG4gICAgICAgICAgICB2aWV3Q291cnNlVXJsPXt0aGlzLnByb3BzLnZpZXdDb3Vyc2VVcmx9XHJcbiAgICAgICAgICAgIGZlZWRiYWNrVXJsPXt0aGlzLnByb3BzLmZlZWRiYWNrVXJsfVxyXG4gICAgICAgICAgLz59Lz5cclxuICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2NvdXJzZXMvOmlkL2VkaXRcIiByZW5kZXI9eyh7bWF0Y2h9KSA9PiA8RWRpdENvdXJzZVxyXG4gICAgICAgICAgICBpZD17bWF0Y2gucGFyYW1zLmlkfVxyXG4gICAgICAgICAgICB2aWV3PVwiY291cnNlQnVpbGRlclwiXHJcbiAgICAgICAgICAgIHZpZXdDb3Vyc2VVcmw9e3RoaXMucHJvcHMudmlld0NvdXJzZVVybH1cclxuICAgICAgICAgICAgZmVlZGJhY2tVcmw9e3RoaXMucHJvcHMuZmVlZGJhY2tVcmx9XHJcbiAgICAgICAgICAvPn0gLz5cclxuICAgICAgICA8L2Rpdj4gOiA8ZGl2PlxyXG4gICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiByZW5kZXI9eygpID0+IDxkaXY+XHJcbiAgICAgICAgICAgICAgPENvdXJzZUJhbm5lciB0aXRsZT1cIkt1cnNieWdnYXJlblwiIGFjdGl2ZVBhZ2U9XCJjb3Vyc2VCdWlsZGVyXCIgcm91dGVzPXt7ZmVlZGJhY2s6IHRoaXMucHJvcHMuZmVlZGJhY2tVcmx9fSAvPlxyXG4gICAgICAgICAgICAgIDxoMj5CZWjDtnJpZ2hldCBzYWtuYXM8L2gyPlxyXG4gICAgICAgICAgICAgIDxwPkRldHRhIHZlcmt0eWcgw6RyIGVuZGFzdCB0aWxsIGbDtnIgYW5zdMOkbGxkYSBww6UgS3Vuc2thcHNza29sYW4uPC9wPlxyXG4gICAgICAgICAgICAgIDxoMz5BbnbDpG5kYXJhdHRyaWJ1dDwvaDM+XHJcbiAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cImtlZF9ib3hlZFwiIHN0eWxlPXt7Ym9yZGVyOiBcIjFweCBzb2xpZCAjZWVlXCJ9fT5cclxuICAgICAgICAgICAgICAgIDx0aGVhZD5cclxuICAgICAgICAgICAgICAgICAgPHRyPlxyXG4gICAgICAgICAgICAgICAgICAgIDx0aD5BdHRyaWJ1dDwvdGg+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRoPlbDpHJkZTwvdGg+XHJcbiAgICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICAgICA8L3RoZWFkPlxyXG4gICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAgICB7T2JqZWN0LmtleXMoZW52LmN1cnJlbnRVc2VyKS5tYXAoYXR0ciA9PiA8dHIga2V5PXthdHRyfT5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+e2F0dHJ9PC90ZD5cclxuICAgICAgICAgICAgICAgICAgICA8dGQ+e2Vudi5jdXJyZW50VXNlclthdHRyXX08L3RkPlxyXG4gICAgICAgICAgICAgICAgICA8L3RyPil9XHJcbiAgICAgICAgICAgICAgICA8L3Rib2R5PjwvdGFibGU+XHJcbiAgICAgICAgICAgIDwvZGl2Pn0gLz5cclxuICAgICAgICAgIDwvZGl2Pn1cclxuICAgICAgPC9Sb3V0ZXI+XHJcbiAgICAgIDxFcnJvclN1Y2Nlc3NGZWVkYmFjayAvPlxyXG4gICAgPC9kaXY+XHJcbiAgfVxyXG59XHJcbiIsIi8vIDxJbml0aWFsaXphdGlvbj5cclxuaW1wb3J0ICcuL3NldC1jdXJyZW50LXVzZXInOyAvLyBFbXVsYXRlIHNlcnZlci1zaWRlIHNjcmlwdCB0byBzZXQgY3VycmVudCB1c2VyXHJcbmltcG9ydCAnLi4vZ2xvYmFsLXNldHRlcnMvc2V0LWFsbCc7IC8vIENsaWVudC1zaWRlIGluaXRpYWxpemF0aW9uXHJcbi8vIDwvSW5pdGlhbGl6YXRpb24+XHJcblxyXG5pbXBvcnQgZW52IGZyb20gJy4uL2dsb2JhbHMvS0VELmVudic7XHJcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgQ291cnNlQnVpbGRlciB9IGZyb20gJy4uL2NvbXBvbmVudHMvY291cnNlLWJ1aWxkZXInO1xyXG5pbXBvcnQgeyBDaG9vc2VVc2VyIH0gZnJvbSAnLi91dGlscy9jaG9vc2UtdXNlcic7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcHAgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8e30+IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wczogYW55KSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgICBpZiAoIWxvY2F0aW9uLmhhc2gpIGxvY2F0aW9uLmhhc2ggPSBcIiMvXCI7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICByZXR1cm4gZW52LmN1cnJlbnRVc2VyID9cclxuICAgICAgPENvdXJzZUJ1aWxkZXJcclxuICAgICAgICB2aWV3Q291cnNlVXJsPVwiY291cnNldmlld2VyLmh0bWxcIlxyXG4gICAgICAgIGZlZWRiYWNrVXJsPVwiaHR0cDovL3N2dC5zZS9ueWhldGVyXCIgLz4gOlxyXG4gICAgICA8Q2hvb3NlVXNlciAvPlxyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9