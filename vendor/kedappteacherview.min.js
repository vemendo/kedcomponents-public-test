var kedappteacherview=function(e){function t(t){for(var n,i,o=t[0],u=t[1],c=t[2],d=0,h=[];d<o.length;d++)i=o[d],Object.prototype.hasOwnProperty.call(a,i)&&a[i]&&h.push(a[i][0]),a[i]=0;for(n in u)Object.prototype.hasOwnProperty.call(u,n)&&(e[n]=u[n]);for(l&&l(t);h.length;)h.shift()();return s.push.apply(s,c||[]),r()}function r(){for(var e,t=0;t<s.length;t++){for(var r=s[t],n=!0,o=1;o<r.length;o++){var u=r[o];0!==a[u]&&(n=!1)}n&&(s.splice(t--,1),e=i(i.s=r[0]))}return e}var n={},a={5:0},s=[];function i(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=e,i.c=n,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var o=window.webpackJsonp_name_=window.webpackJsonp_name_||[],u=o.push.bind(o);o.push=t,o=o.slice();for(var c=0;c<o.length;c++)t(o[c]);var l=u;return s.push([302,0]),r()}({0:function(e,t){e.exports=React},105:function(e,t,r){"use strict";r.d(t,"a",function(){return l});var n=r(1),a=r(32),s=r(0),i=r.n(s),o=r(2),u=i.a.createContext(null);a.b.addProvider(function(){return u._currentValue});var c,l=function(e){function t(t){var r=e.call(this,t)||this;return r.subscriptions=[],r.outerSubscription={unsubscribe:function(){r.subscriptions.forEach(function(e){return e.unsubscribe()}),r.subscriptions=[]}},r.observer=function(e,t,n){t?r.setState({error:t}):r.setState(function(e){return{counter:e.counter+1,error:t}})},r.state={counter:0,error:null},r}return n.c(t,e),t.prototype.componentDidCatch=function(e,t){e&&e.name||(e=new Error(""+e)),this.setState({error:e,info:t}),console.log(e,t)},t.prototype.componentWillMount=function(){this.outerSubscription.unsubscribe()},t.prototype.render=function(){return this.state.error?this.props.errorFallback||i.a.createElement("p",null,Object(o.a)(c||(c=n.e(["Kunde inte ladda innehållet"],["Kunde inte ladda innehållet"])))):(this.outerSubscription.unsubscribe(),i.a.createElement(s.Suspense,{fallback:this.props.fallback||null},i.a.createElement(u.Provider,{value:this},this.props.children)))},t}(i.a.Component)},11:function(e,t,r){"use strict";r.d(t,"c",function(){return a}),r.d(t,"a",function(){return s}),r.d(t,"d",function(){return i}),r.d(t,"b",function(){return o}),r.d(t,"e",function(){return u}),r.d(t,"f",function(){return l}),r.d(t,"g",function(){return d});var n=r(3);function a(){var e=Date.now();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var r=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===t?r:7&r|8).toString(16)})}function s(e){var t=null;return function(){return t||(t=e.apply(this,arguments).then(function(e){return t=null,e})),t}}function i(e){var t=["50","08","e1","40","e4","e7"];if(e.length>6)throw new Error("Too long realm");for(var r=0;r<e.length;++r){var n=e.charCodeAt(r).toString(16);t[r]=2===n.length?n:"0"+n}return"ec96b3be-45fc-41d3-b69e-"+t.join("")}function o(e){return n.b(this,void 0,void 0,function(){var t,r,a,s,i;return n.d(this,function(n){switch(n.label){case 0:return t=new TextEncoder,r=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",r)];case 1:return a=new(s.apply(Uint8Array,[void 0,n.sent()])),i=0,[2,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=a[i++]%16|0;return("x"===e?t:7&t|8).toString(16)})]}})})}function u(e){return n.b(this,void 0,void 0,function(){var t,r,a,s;return n.d(this,function(n){switch(n.label){case 0:return t=new TextEncoder,r=t.encode(e),s=Uint8Array.bind,[4,crypto.subtle.digest("SHA-256",r)];case 1:return a=new(s.apply(Uint8Array,[void 0,n.sent(),0,16])),[2,(i=a,Array.prototype.map.call(i,function(e){return("00"+e.toString(16)).slice(-2)}).join(""))]}var i})})}var c={};function l(e){var t=e.map(function(e){return c[e]}),r=[];if(t.forEach(function(t,n){t||r.push(e[n])}),0===r.length)return t;throw Promise.all(r.map(function(e){return u(e).then(function(t){return c[e]=t})}))}function d(e,t){for(var r=e,n=0,a=e.length;n<a;++n){var s=e[n],i=t(s);i!==s&&(r===e&&(r=e.slice()),r[n]=i)}return r}},13:function(e,t,r){"use strict";r.d(t,"a",function(){return a});var n=r(0),a=function(e){var t=e.label,r=void 0===t?"":t;return n.createElement("span",null,n.createElement("i",{className:"fa fa-spinner fa-spin","aria-hidden":"true"})," ",r)}},131:function(e,t){},137:function(e,t,r){var n={"./en-SG":85,"./en-SG.js":85,"./en-au":86,"./en-au.js":86,"./en-ca":87,"./en-ca.js":87,"./en-gb":88,"./en-gb.js":88,"./en-ie":89,"./en-ie.js":89,"./en-il":90,"./en-il.js":90,"./en-nz":91,"./en-nz.js":91,"./sv":92,"./sv.js":92};function a(e){var t=s(e);return r(t)}function s(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=s,e.exports=a,a.id=137},138:function(e,t){},139:function(e,t){},14:function(e,t,r){"use strict";var n=r(1),a=r(5);var s=r(15);r.d(t,"a",function(){return i}),r.d(t,"c",function(){return u}),r.d(t,"e",function(){return c}),r.d(t,"d",function(){return l}),r.d(t,"b",function(){return h}),r.d(t,"f",function(){return p});var i=["user","role","school","debug","testVersion","testversion","features","schoolType","schooltype"];function o(e,t,r){var n=function(e){return[{type:"email",value:e.mail},{type:"school",value:e.school}].concat(e.roles.map(function(e){return{type:"role",value:e}})).concat(e.roles.map(function(t){return{type:"schoolRole",value:e.school+"/"+t}}))}(e);return"R"!==r&&e.tutorFor&&(n=n.filter(function(e){return"email"!==e.type})),Object(a.j)(a.b.fromStringArray(t.acl||[]),n,r)}function u(e,t){return o(e,t,"W")}function c(e,t){var r=e.roles.some(function(e){return"EMPLOYEE"===e||"ADMIN"===e}),n=(t||"").toLowerCase()===e.school.toLowerCase();return r&&n}function l(e,t){return e.roles.includes("ADMIN")||c(e,t)}var d={actAs:function(e){var t=e.role,r=e.school,a=e.url,i=Object(s.b)(location.search),o=n.a({},i,{role:t,school:r}),u=Object(s.a)(o);a?location.href=""+a+u:(location.hash="#",location.search=u)}};function h(e){d.actAs(e)}function p(e,t){var r,a,o=Object(s.b)(location.search),u={};try{for(var c=n.h(i),l=c.next();!l.done;l=c.next()){var d=l.value;o[d]&&(u[d]=o[d])}}catch(e){r={error:e}}finally{try{l&&!l.done&&(a=c.return)&&a.call(c)}finally{if(r)throw r.error}}var h=Object(s.a)(n.a({},u,t)),p=e.indexOf("#");return p>=0?""+e.substr(0,p)+h+e.substr(p):""+e+h}},15:function(e,t,r){"use strict";r.d(t,"b",function(){return a}),r.d(t,"a",function(){return i}),r.d(t,"c",function(){return o});var n=r(1);function a(e,t){var r=(t||{}).toLower,a={};return e&&e.length>1&&e.substr(1).split("&").map(function(e){return e.split("=").map(function(e){return decodeURIComponent(e.trim())})}).forEach(function(e){var t=n.f(e,2),s=t[0],i=t[1];return a[r?s.toLowerCase():s]=i}),a}function s(e){return Object.keys(e).filter(function(t){return void 0!==e[t]}).map(function(t){return encodeURIComponent(t)+"="+encodeURIComponent(e[t])}).join("&")}function i(e){return"?"+s(e)}function o(e){var t=e.indexOf("?");return t>=0?[e.substr(0,t),e.substr(t)]:[e,""]}},16:function(e,t,r){"use strict";r.d(t,"a",function(){return a});var n=r(0),a=n.createContext({intl:null})},17:function(e,t,r){"use strict";var n=r(3),a=r(11),s=r(28),i=function(){function e(e,t,r){this.isomorphic=e,this.baseUrl=t,this.options=r,this.numOutstandingOperations=0,this.cache={},this._status=new s.a(this),this.fetchOptions={mode:"cors"},this.authHeader=r.bearer?"Bearer "+r.bearer:r.username?"Basic "+e.btoa(r.username+":"+(r.password||"")):null,this.bearerProvider=r.bearerProvider||null}return Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),e.prototype.suspenseFetch=function(e,t,r,a,s){var i=this,o=t+" "+e+" "+JSON.stringify(r)+" "+JSON.stringify(a)+" "+JSON.stringify(s),u=this.cache[o];if(u){if("promise"in u)throw u.promise;return u.result}var c=this.fetch(e,t,r,a,s).then(function(e){return n.b(i,void 0,void 0,function(){var t,r;return n.d(this,function(n){switch(n.label){case 0:return t=e.status,[4,e.text()];case 1:return r=n.sent(),this.cache[o]={result:{status:t,text:function(){return r},json:function(){return JSON.parse(r)}}},[2]}})})});throw this.cache[o]={promise:c},c},e.prototype.fetch=function(e,t,r,n,a){var s=this;return++this.numOutstandingOperations,this._status.dispatch(this),this._fetch(e,t,r,n,a).then(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),e}).catch(function(e){return--s.numOutstandingOperations,s._status.dispatch(s),Promise.reject(e)})},e.prototype._fetch=function(e,t,r,s,i){return n.b(this,void 0,void 0,function(){var o,u,c,l,d,h,p,f,m,g,b;return n.d(this,function(v){switch(v.label){case 0:return i&&"no-cache"===i.cache&&(s=n.a({},s,{nocache:Object(a.c)()})),o=s&&Object.keys(s).filter(function(e){return void 0!==s[e]}).map(function(e){return encodeURIComponent(e)+"="+encodeURIComponent(s[e])}).join("&"),c=(u=this).authHeader,l=u.tokenInfo,d=u.bearerProvider,c||l||!d?[3,2]:(h=this,[4,d.getBearer()]);case 1:h.tokenInfo=l=v.sent(),v.label=2;case 2:return l?l.expires<Date.now()?(console.log("Token expired. Refresh it:"),p=this,[4,d.refreshBearer()]):[3,4]:[3,5];case 3:p.tokenInfo=l=v.sent(),v.label=4;case 4:c="Bearer "+l.token,v.label=5;case 5:return c&&(r.Authorization=c),f=this.baseUrl+e+(o?"?"+o:""),[4,this.isomorphic.fetch(f,n.a({},this.fetchOptions,{headers:r,method:t},i))];case 6:return 401==(m=v.sent()).status&&this.bearerProvider?(g=m.headers.get("www-authenticate"),console.log("Got "+m.status+" from "+(this.baseUrl+e)),g&&/Bearer/i.test(g)?(b=this,[4,this.bearerProvider.refreshBearer()]):[3,9]):[3,9];case 7:return b.tokenInfo=v.sent(),r.Authorization="Bearer "+this.tokenInfo.token,[4,this.isomorphic.fetch(f,n.a({},this.fetchOptions,{headers:r,method:t},i))];case 8:m=v.sent(),v.label=9;case 9:return[2,m]}})})},e.prototype.get=function(e,t,r){return this.fetch(e,"GET",{Accept:"application/json; text/plain"},t,r)},e.prototype.suspenseGet=function(e,t,r){return this.suspenseFetch(e,"GET",{Accept:"application/json; text/plain"},t,r)},e.prototype.post=function(e,t,r){return this.fetch(e,"POST",{"Content-Type":"application/json",Accept:"application/json"},null,n.a({},r,{body:JSON.stringify(t)}))},e.prototype.delete=function(e,t,r,a){return this.fetch(e,"DELETE",{Accept:"application/json; text/plain"},t,n.a({},a,{body:r}))},e}(),o=function(){function e(e,t,r,n,s,o,u){this.isomorphic=e,this.storage=t,this.tokenId=r,this.clientId=n,this.clientSecret=s,this.tokenUrl=o,this.tokenQuery=u,this.tokenInfo={token:null,expires:0},this.client=new i(e,"",{username:this.clientId,password:this.clientSecret}),this.getBearer=Object(a.a)(this.getBearer.bind(this)),this.refreshBearer=Object(a.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return n.b(this,void 0,void 0,function(){var e,t,r,a;return n.d(this,function(n){switch(n.label){case 0:if(e=this.tokenInfo,t=e.token,r=e.expires,t&&r>=Date.now())return[2,this.tokenInfo];n.label=1;case 1:return n.trys.push([1,4,,6]),a=this,[4,this.storage.load(this.clientId+"/"+this.tokenId)];case 2:return a.tokenInfo=n.sent(),this.tokenInfo.token&&this.tokenInfo.expires>=Date.now()?[2,this.tokenInfo]:[4,this.refreshBearer()];case 3:return n.sent(),[2,this.tokenInfo];case 4:return n.sent(),[4,this.refreshBearer()];case 5:return n.sent(),[2,this.tokenInfo];case 6:return[2]}})})},e.prototype.refreshBearer=function(){return n.b(this,void 0,void 0,function(){var e,t,r,a;return n.d(this,function(n){switch(n.label){case 0:t=0,n.label=1;case 1:return t<6?(console.log("Retrieving token for "+this.tokenId),[4,this.client.get(this.tokenUrl,this.tokenQuery,{cache:"reload"})]):[3,5];case 2:return 200!==(e=n.sent()).status?(console.warn("Got "+e.status+" "+e.statusText),[3,4]):(r=this,a={},[4,e.text()]);case 3:return r.tokenInfo=(a.token=n.sent(),a.expires=Date.now()+354e4,a),console.log("Got token for "+this.tokenId+": "+JSON.stringify(this.tokenInfo)),this.storage.save(this.clientId+"/"+this.tokenId,this.tokenInfo),[2,this.tokenInfo];case 4:return++t,[3,1];case 5:throw new Error("Failed to retrieve token for "+JSON.stringify(this.tokenId))}})})},e}(),u=function(){function e(e,t,r){this.accessClaimType=e,this.accessClaimValue=t,this.right=r}return e.fromString=function(t){if(!t)return null;var r=t.split(":");if(r.length<3)throw new Error("Invalid access string: "+t);var n=e.unescape(r[0]),a=e.unescape(r[1]),s=r[2];if("R"!==s&&"W"!==s&&"S"!==s)throw new Error("Invalid access string: "+t);return new e(n,a,s)},e.escape=function(e){return e.replace(/\%/g,"%25").replace(/\:/g,"%3A")},e.unescape=function(e){return e.replace(/\%3A/g,":").replace(/\%25/g,"%")},e.prototype.toString=function(){return e.escape(this.accessClaimType)+":"+e.escape(this.accessClaimValue)+":"+this.right},e.fromStringArray=function(t){return t.map(function(t){return e.fromString(t)}).filter(function(e){return e})},e.toStringArray=function(e){return e.map(function(e){return e.toString()})},e}();function c(e,t,r){return!!t.some(function(e){return"role"===e.type&&"ADMIN"===e.value})||e.some(function(e){return t.some(function(t){return e.accessClaimType===t.type&&e.accessClaimValue===t.value&&("R"===e.right&&"R"===r||"W"===e.right&&["R","W"].indexOf(r)>=0||"S"===e.right)})})}var l=function(e){function t(t,r){var n=e.call(this,"HTTP"+t+" "+r)||this;return n.code=t,n.message=r,n.name="http"+t,n.message="HTTP"+t+" "+r,n}return n.c(t,e),t}(Error);r.d(t,"d",function(){return d}),r.d(t,"a",function(){return h}),r.d(t,"h",function(){return a.c}),r.d(t,"i",function(){return a.d}),r.d(t,"g",function(){return a.b}),r.d(t,"k",function(){return a.e}),r.d(t,"l",function(){return a.f}),r.d(t,"e",function(){return o}),r.d(t,"b",function(){return u}),r.d(t,"j",function(){return c}),r.d(t,"f",function(){return i}),r.d(t,"c",function(){return l});var d=function(){function e(e,t,r){this.http=new i(e,r,{bearerProvider:t})}return e.prototype.getMyClaims=function(e,t){return n.b(this,void 0,void 0,function(){var r,a,s;return n.d(this,function(n){switch(n.label){case 0:return[4,this.http.get("me/claims/"+(e||""),null,t)];case 1:return 200==(r=n.sent()).status?[3,3]:(a=l.bind,s=[void 0,r.status],[4,r.text()]);case 2:throw new(a.apply(l,s.concat([n.sent()])));case 3:return[4,r.json()];case 4:return[2,n.sent()]}})})},e.prototype.get=function(e,t,r,a){return n.b(this,void 0,void 0,function(){var s,i,o;return n.d(this,function(n){switch(n.label){case 0:return[4,this.http.get(e+"/"+t,r,a)];case 1:return 200==(s=n.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([n.sent()])));case 3:return[4,s.json()];case 4:return[2,n.sent()]}})})},e.prototype.list=function(e,t,r){return n.b(this,void 0,void 0,function(){var a,s,i,o;return n.d(this,function(u){switch(u.label){case 0:return a=n.a({},t),"undefined"!=typeof location&&location.search.includes("useSP")&&(a.flags=(a.flags||[]).concat(["useSP"])),t&&t.mutationsOnEmpty&&(a.mutationsOnEmpty=JSON.stringify(t.mutationsOnEmpty)),[4,this.http.get(""+e,a,r)];case 1:return 200==(s=u.sent()).status?[3,3]:(i=l.bind,o=[void 0,s.status],[4,s.text()]);case 2:throw new(i.apply(l,o.concat([u.sent()])));case 3:return[4,s.json()];case 4:return[2,u.sent()]}})})},e.prototype.batch=function(e,t){return n.b(this,void 0,void 0,function(){var r,a,s;return n.d(this,function(n){switch(n.label){case 0:return e=e.slice().sort(function(e,t){return"add"===e.op?-1:"add"===t.op?1:"delete"===e.op?1:"delete"===t.op?-1:0}),[4,this.http.post("batch",e,t)];case 1:return 200==(r=n.sent()).status?[3,3]:(a=l.bind,s=[void 0,r.status],[4,r.text()]);case 2:throw new(a.apply(l,s.concat([n.sent()])));case 3:return[4,r.json()];case 4:return[2,n.sent()]}})})},e.prototype.do=function(e){return n.b(this,void 0,void 0,function(){var t;return n.d(this,function(r){switch(r.label){case 0:return t=new h,e(t),[4,this.batch(t.mutationRequests)];case 1:return[2,r.sent()]}})})},e.prototype.deleteRealm=function(e){return n.b(this,void 0,void 0,function(){var t,r,a;return n.d(this,function(n){switch(n.label){case 0:return[4,this.http.delete("realms/"+e)];case 1:return 200==(t=n.sent()).status?[3,3]:(r=l.bind,a=[void 0,t.status],[4,t.text()]);case 2:throw new(r.apply(l,a.concat([n.sent()])));case 3:return[4,t.json()];case 4:return[2,n.sent()]}})})},e.prototype.add=function(e,t,r){return this.do(function(r){return r.add(e,t)})},e.prototype.put=function(e,t){return this.do(function(r){return r.put(e,t)})},e.prototype.update=function(e,t,r,n){return this.do(function(a){return a.update(e,t,r,n)})},e.prototype.merge=function(e,t){return this.do(function(r){return r.merge(e,t)})},e.prototype.clearBranch=function(e){return this.do(function(t){return t.clearBranch(e)})},e.prototype.delete=function(e,t){return this.do(function(r){return r.delete(e,t)})},e.prototype.share=function(e,t,r){return this.do(function(n){return n.share(e,t,r)})},e.prototype.unshare=function(e,t,r){return this.do(function(n){return n.unshare(e,t,r)})},e.prototype.link=function(e,t,r,n,a){return this.do(function(s){return s.link(e,t,r,n,a)})},e.prototype.link2=function(e,t,r,n,a){return this.do(function(s){return s.link2(e,t,n,r,a)})},e.prototype.unlink=function(e,t,r,n,a){return this.do(function(s){return s.unlink(e,t,r,n,a)})},e.prototype.unlink2=function(e,t,r,n,a){return this.do(function(s){return s.unlink2(e,t,n,r,a)})},e.prototype.undoLink=function(e,t,r,n,a){return this.do(function(s){return s.undoLink(e,t,n,r,a)})},e}(),h=function(){function e(){this.mutationRequests=[]}return e.prototype.add=function(e,t,r){return this.mutationRequests.push({op:"add",table:e,doc:t,branchId:r}),this},e.prototype.put=function(e,t){return delete(t=n.a({},t)).acl,this.mutationRequests.push({op:"put",table:e,doc:t}),this},e.prototype.update=function(e,t,r,a){r=n.a({},r),this.mutationRequests.push({op:"update",table:e,id:t,deltaDoc:r,branchId:a})},e.prototype.merge=function(e,t){this.mutationRequests.push({op:"merge",branchId:e,targetBranchId:t})},e.prototype.clearBranch=function(e){this.mutationRequests.push({op:"clear-branch",branchId:e})},e.prototype.delete=function(e,t){return this.mutationRequests.push({op:"delete",table:e,id:t}),this},e.prototype.share=function(e,t,r){return this.mutationRequests.push({op:"share",table:e,id:t,acl:r}),this},e.prototype.unshare=function(e,t,r){return this.mutationRequests.push({op:"unshare",table:e,id:t,acl:r}),this},e.prototype.link=function(e,t,r,n,a){return this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetTable:r,targetId:n,label:a}),this},e.prototype.link2=function(e,t,r,n,a){this.mutationRequests.push({op:"link",sourceTable:e,sourceId:t,targetId:n,label:r,branchId:a})},e.prototype.unlink=function(e,t,r,n,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetTable:r,targetId:n,label:a}),this},e.prototype.unlink2=function(e,t,r,n,a){return this.mutationRequests.push({op:"unlink",sourceTable:e,sourceId:t,targetId:n,label:r,branchId:a}),this},e.prototype.undoLink=function(e,t,r,n,a){this.mutationRequests.push({op:"undo-link",sourceTable:e,sourceId:t,targetId:n,label:r,branchId:a})},e}()},19:function(e,t,r){"use strict";var n=r(1),a=r(0),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.createProgress=function(){var e=t.props,r=e.numberOfTasks,n=e.completedNumberOfTasks,s=e.maximumTasksDisplayed,i=e.backgroundColor,o=e.progressColor,u=[];if(r>s)return a.createElement("div",{className:"progress-overview"}," ",n," / ",r," ");for(var c=1;c<=r;c++)u.push(a.createElement("svg",{key:c},a.createElement("circle",{className:"circle-chart-background",fill:c>n?i:o,cx:"8",cy:"8",r:"8"})));return u},t}return n.c(t,e),t.prototype.render=function(){return a.createElement("div",{className:"goals-progress"},this.createProgress())},t.defaultProps={numberofTasks:0,completedNumberOfTasks:0,maximumTasksDisplayed:10,backgroundColor:"lightgrey",progressColor:"#3dbca2"},t}(a.Component);r.d(t,"a",function(){return i});var i=function(e){function t(t){var r=e.call(this,t)||this;return r.state={headerOpen:t.headerOpen||!1},r}return n.c(t,e),t.prototype.componentWillReceiveProps=function(e){e.headerOpen!==this.props.headerOpen&&this.setState({headerOpen:e.headerOpen})},t.prototype.render=function(){var e=this,t=this.props,r=t.title,i=t.className,o=t.children,u=t.headerClassName,c=t.contentClassName,l=t.displayProgress,d=t.progressData,h=t.inactivated,p=t.inactivatedRender,f=this.state.headerOpen;return h?"titleAndChildren"===p?a.createElement(a.Fragment,null,a.createElement(a.Fragment,null,r),a.createElement(a.Fragment,null,o)):a.createElement(a.Fragment,null,o):a.createElement("div",{className:(i||"")+" openClose"+(f?" open":"")},a.createElement("div",{className:"openHeader"+(u?" "+u:""),onClick:function(){e.props.onOpenClose&&e.props.onOpenClose(!e.state.headerOpen),e.setState({headerOpen:!e.state.headerOpen})}},a.createElement("div",{className:"openHeaderContainer"},a.createElement("div",null,r),l&&a.createElement(s,n.a({},d)))),a.createElement("div",{className:"openContent"+(c?" "+c:"")},o))},t}(a.Component)},194:function(e,t,r){"use strict";var n=r(0),a=r.n(n),s=r(313),i=r(312),o=r(314),u=r(105),c=r(72),l=r(1),d=r(236),h=r(70),p=r(19),f=r(6),m=r.n(f),g=r(56),b=r(4),v=r(5),y=r(2),k=function(e){var t=e.assignment,r=e.shouldGetUrkundStatus,a=l.f(Object(n.useState)(t),2),s=a[0],i=a[1];return Object(n.useEffect)(function(){r&&i(l.a({},t,{isRefreshing:!0}))},[r,t]),n.createElement("tr",{key:s.mediaLink,style:s.metadata.$meta?{opacity:.5}:{}},n.createElement("td",null,n.createElement("a",{href:"mailto:"+s.user},s.metadata.userDisplayName||s.user)),n.createElement("td",null,s.metadata.driveFileId?n.createElement(g.a,{file:s}):n.createElement("a",{href:"#",onClick:function(e){e.preventDefault(),e.stopPropagation(),Object(g.b)(s)}},Object(y.l)(s.filename,32))),n.createElement("td",{className:"assignment-date-col"},m()(s.uploadDate).format("YYYY-MM-DD HH:mm")),Object(g.c)(s,function(e){return l.b(this,void 0,void 0,function(){var t,r,n,a,s,o,u,c,d,h,p,f;return l.d(this,function(m){switch(m.label){case 0:return t=b.b.kedBackendClient.http,r=this.props,n=r.courseId,a=r.taskId,s=r.school,o=e.user,u=e.filename,[4,i(l.a({},e,{isRefreshing:!0}))];case 1:m.sent(),m.label=2;case 2:return m.trys.push([2,8,,10]),[4,t.get("assignments/urkund/"+s+"/"+n+"/"+a+"/"+o+"/"+u)];case 3:return(c=m.sent()).status>=400?(d=v.c.bind,h=[void 0,c.status],[4,c.text()]):[3,5];case 4:throw new(d.apply(v.c,h.concat([m.sent()])));case 5:return[4,c.text()];case 6:return p=m.sent(),[4,i(l.a({},e,{isRefreshing:!1,metadata:l.a({},e.metadata,{urkundResponse:p})}))];case 7:return m.sent(),[3,10];case 8:return f=m.sent(),[4,i(l.a({},e,{isRefreshing:!1,refreshError:f}))];case 9:return m.sent(),[3,10];case 10:return[2]}})})},r))},E=r(16),w=r(51),S=function(e){var t=e.assignments,r=e.checkWithUrkund,a=Object(n.useContext)(E.a).intl,s=n.useContext(R).filterStudyGroups,i=Object.assign([],t),o=s.length>0&&Object.keys(w.c).filter(function(e){return s.includes(e)}).map(function(e){return w.c[e]}),u=s.length>0?i.filter(function(e){return Object(y.k)(o).find(function(t){return t.studentEmailAddress===e.user})}):i;return r&&u.length>0&&u.forEach(function(e){e.shouldRefresh=!1,e.metadata&&e.metadata.urkundExternalId&&e.metadata.urkundExternalId.length>0&&!e.metadata.urkundUploadError&&(!e.metadata.urkundLastPoll||["Accepted","Submitted"].indexOf(JSON.parse(e.metadata.urkundResponse)[0].Status.State)>=0&&parseInt(e.metadata.urkundLastPoll)<m()().add(-15,"seconds").toDate().getTime())&&(e.shouldRefresh=!0)}),u.length>0?n.createElement("table",{className:"task-assignments-table"},n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,a.formatMessage({id:"teacherView.assignmentStudentName",defaultMessage:"Elev"})),n.createElement("th",null,a.formatMessage({id:"teacherView.assignmentFileName",defaultMessage:"Filnamn"})),n.createElement("th",null,a.formatMessage({id:"teacherView.assignmentSubmittedAt",defaultMessage:"Inlamnat"})),n.createElement("th",null,a.formatMessage({id:"teacherView.assignmentReport",defaultMessage:"Rapport"})),n.createElement("th",null,a.formatMessage({id:"teacherView.assignmentGrade",defaultMessage:"Niva"})))),n.createElement("tbody",null,u.map(function(e){return n.createElement(k,{key:e.uploadDate,assignment:e,shouldGetUrkundStatus:e.shouldRefresh})}))):n.createElement("div",null,a.formatMessage({id:"teacherView.noTaskAssignments",defaultMessage:"Inga uppdrag uppladdade för denna uppgift"}))},T=function(e){var t=e.notSubmittedUsers,r=Object(n.useContext)(E.a).intl,a=t&&t.length,s=l.f(Object(n.useState)([]),2),i=s[0],o=s[1];return t&&0!==t.length?n.createElement("div",{className:"not-submitted-users taskContainer"},n.createElement("h4",null,r.formatMessage({id:"teacherView.notSubmittedAssignments",defaultMessage:"Ej lämnat in"})),t.map(function(e,t){return n.createElement("div",{key:"notHandedIn_"+t,className:"align-horizontal student-row"+(a===t+1?" last":"")},n.createElement("div",{className:"horizontalItem top pull-right",onClick:function(){o(i.indexOf(e.email)>-1?i.filter(function(t){return t!=e.email}):l.g(i,[e.email]))}},n.createElement("div",{className:"checkBox"+(i.indexOf(e.email)>-1?" checked":"")})),n.createElement("div",{className:"horizontalItem top"},e.displayName))}),n.createElement("div",{className:"align-horizontal remind-assignment"},n.createElement("div",{className:"horizontalItem top pull-right"},n.createElement("button",{className:"btn"},r.formatMessage({id:"teacherView.remindBtn",defaultMessage:"Påminn"}))))):null},D=r(25),N=function(e){var t=e.course,r=e.entity,n=e.moduleId,s=e.taskId,i=e.notificationdigests,o=a.a.useContext(U).seenDigestsObservable;return a.a.createElement(D.a,null,o.map(function(e){var o=0,u=i[t.id];if(u)if("course"===r)t.modules.forEach(function(e){e.taskIds.forEach(function(e){o+=l(u[e])})});else if("module"===r){var c=t.modules.find(function(e){return e.id==n});c&&c.taskIds.forEach(function(e){o+=l(u[e])})}else"task"===r&&(o+=l(u[s]));function l(t){return t?t.filter(function(t){return!e.find(function(e){return e.digest===t.digest})}).length:0}return o>0&&a.a.createElement("div",{className:"notification-icon"},o)}))},O=r(9),I=function(e){var t=e.task,r=e.assignments,a=e.notSubmittedUsers,s=n.useContext(U),i=s.notificationdigests,o=s.selectedCourse,u=s.seenDigestsObservable;return n.createElement(p.a,{onOpenClose:function(e){return function(e){return l.b(this,void 0,void 0,function(){var n,a,s=this;return l.d(this,function(c){switch(c.label){case 0:return e&&i[o.id][t.id]?[4,Object(v.k)(b.b.currentUser.mail+o.id)]:[3,3];case 1:return n=c.sent(),[4,u.load()];case 2:a=c.sent(),r.forEach(function(e){return l.b(s,void 0,void 0,function(){var t;return l.d(this,function(r){switch(r.label){case 0:return[4,Object(v.k)(e.user+e.courseId+e.taskId+e.uploadDate+(e.metadata.driveFileId||""))];case 1:return t=r.sent(),a&&a.find(function(e){return e.digest===t})||O.c.seenStudentAssignments.add({id:Object(v.h)(),tags:[n],digest:t}),[2]}})})}),c.label=3;case 3:return[2]}})})}(e)},className:"task-container",title:n.createElement("div",{className:"notification-container"},n.createElement("span",null,t.name),n.createElement(N,{course:o,entity:"task",taskId:t.id,notificationdigests:i})),headerOpen:!1},n.createElement("div",{className:"ked_boxed"},n.createElement(S,{assignments:r,checkWithUrkund:t.sendToUrkund}),n.createElement("br",null),n.createElement(T,{notSubmittedUsers:a})))},C=function(e){var t=e.module,r=e.tasks,a=Object(n.useContext)(E.a).intl,s=Object(n.useContext)(U),i=s.notificationdigests,o=s.selectedCourse,u=Object(n.useContext)(R).filterStudyGroups,c=i[o.id];return r&&r.length>0&&n.createElement(n.Fragment,null,n.createElement(p.a,{title:n.createElement("div",{className:"notification-container"},n.createElement("span",null,t.name),n.createElement(N,{course:o,entity:"module",moduleId:t.id,notificationdigests:i})),headerOpen:!1},c&&Object.keys(c).length>0?n.createElement("div",null,r.map(function(e){var t=c[e.id]?c[e.id].map(function(e){return e.assignment}):[],r=o.studyGroups&&o.studyGroups.length>0&&function(e){var t=[];return(u.length>0?o.studyGroups.filter(function(e){return u.includes(e)}):o.studyGroups).forEach(function(r){var n=w.c[r].filter(function(t){return!e.find(function(e){return e.user===t.studentEmailAddress})}).map(function(e){return{displayName:e.studentFirstName+" "+e.studentLastName,email:e.studentEmailAddress}});n&&t.push.apply(t,l.g(n))}),t.map(function(e){var t=l.f(e.displayName.split(" ")),r=t[0],n=t.slice(1);return l.a({},e,{firstName:r,lastName:n.join(" ")})}).sort(Object(y.h)(["lastName","firstName"]))}(t);return(r&&r.length>0||t&&t.length>0)&&n.createElement(I,{key:e.id,task:e,assignments:t,notSubmittedUsers:r})})):n.createElement("div",null,a.formatMessage({id:"teacherView.noUploadedAssignmentsForModule",defaultMessage:"No assignments have been uploaded for this module"}))))},A=r(120),R=Object(n.createContext)({filterStudyGroups:[]}),P=function(){var e=Object(n.useContext)(E.a).intl,t=l.f(Object(n.useState)([]),2),r=t[0],a=t[1],s=Object(n.useContext)(U),i=s.tasks,o=s.selectedCourse;return n.createElement(n.Fragment,null," ",o?n.createElement(R.Provider,{value:{filterStudyGroups:r}},n.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},n.createElement("h2",null,e.formatMessage({id:"teacherView.assignmentsViewTitle",defaultMessage:"Inlämningsuppgifter"})),n.createElement("p",null,e.formatMessage({id:"teacherView.assignmentsViewDescription",defaultMessage:{defaultDescriptionMessage:"Här listas samtliga inlämningsuppgifter i din/dina kurser du handleder.Klicka till höger för att välja kurs. Kursens uppgifter syns nedan. Du kan öppna/dölja varje modul."}})),n.createElement("h3",null,o.name,"-",o.description),o.studyGroups&&o.studyGroups.length>0&&n.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},n.createElement("div",{className:"horizontalItem top pull-right study-group-filter"},n.createElement(A.a,{isMulti:!0,options:o.studyGroups.map(function(e){return{label:e,value:e}}),value:r.map(function(e){return{label:e,value:e}}),placeholder:e.formatMessage({id:"teacherView.filterByStudygroupsPlaceholder",defaultMessage:"Välj studiegrupp"}),onChange:function(e){a(e.map(function(e){return e.value}))}}))),o.modules.map(function(e){var t=i.filter(function(t){return e.taskIds.find(function(e){return e===t.id})});return t.length>0?n.createElement(C,{tasks:t,key:e.id,module:e}):null}))):null)},_=r(121),G=r(14),L=function(e){var t=e.courseBuilderUrl,r=Object(n.useContext)(E.a).intl,s=Object(n.useContext)(U),i=s.notificationdigests,o=s.teacherCourses,u=s.selectedCourse;return a.a.createElement("div",{className:"sv-html-portlet sv-portlet sv-skip-spacer"},a.a.createElement("div",{className:"ked_boxed"},a.a.createElement("h3",null,r.formatMessage({id:"teacherView.coursesViewTitle",defaultMessage:"Mina kurser/ uppgifter"})),a.a.createElement("div",{className:"taskContainer odd-even"},o.map(function(e){return a.a.createElement("div",{key:e.id+e.code,className:"align-horizontal"},a.a.createElement("div",{className:"teacherSchoolCourse"},a.a.createElement("div",{className:"horizontalItem top pull-right"},a.a.createElement("a",{target:"_blank",href:Object(G.f)(t,{})+"#/courses/"+e.id+"/edit",className:"editItem"})),a.a.createElement("div",{className:"horizontalItem top"},a.a.createElement("div",{className:"notification-container"},a.a.createElement(_.a,{key:"linkCourse_"+e.id,className:u&&u.id===e.id?"selected":"",to:"/overview/course/"+e.id+"/assignments"},e.name," - ",e.description),a.a.createElement(N,{key:"notifictiona_"+e.id,notificationdigests:i,entity:"course",course:e})))))}))))},x=r(32),j={notificationdigests:{},selectedCourse:null,teacherCourses:[],seenDigestsObservable:new x.a([]),school:"",tasks:[]},U=Object(n.createContext)(j),M=Object(d.a)(function(e){var t,r=e.match,a=e.courseBuilderUrl,s=(s=r?r.params.courseId:null)||null,i=[],o=O.c.schools.tags("gymnasium").name(b.b.currentUser.school).include("courses").single().read(),u=o?o.courses:[];if(u){var c=b.b.currentUser.mail;u.forEach(function(e){e.modules.length>0&&(e.activatedBy&&e.activatedBy.url==c?i.push(e):e.responsibleTeachers.filter(function(e){return e.url==c}).length>0&&i.push(e))})}var d=((i=i.sort(Object(y.h)(["name","dateTime"])))?O.c.tasks.hasEdgesFrom(i.map(function(e){return e.id})).toValue().read():[]).filter(function(e){return!0===e.assignment}),p=o.name,f=i.map(function(e){return e.id}).join(","),m=i.find(function(e){return e.id===s}),g=b.b.kedBackendClient.http.suspenseGet("assignments/notificationdigests",{school:p,courseIds:f});if(200!==g.status)throw new v.c(g.status,g.text());var k=g.json(),E=Object(v.l)(i.map(function(e){return b.b.currentUser.mail+e.id})),w=E.length>0?(t=O.c.seenStudentAssignments).tags.apply(t,l.g(E)).toValue():new x.a([]),S={notificationdigests:k,selectedCourse:m,teacherCourses:i,seenDigestsObservable:w,school:p,tasks:d};return n.createElement(U.Provider,{value:S},n.createElement(h.a,{left:n.createElement(P,{key:m?m.id:""}),right:n.createElement(L,{courseBuilderUrl:a}),rightWidth:5}))});r.d(t,"a",function(){return K});var K=function(e){var t=e.courseBuilderUrl;return a.a.createElement(s.a,null,a.a.createElement("div",{className:"teacher-view"},a.a.createElement(i.a,{path:"/",exact:!0,render:function(){return a.a.createElement(o.a,{to:"/overview"})}}),a.a.createElement(i.a,{exact:!1,path:"/overview/course/:courseId/assignments"},a.a.createElement(u.a,{fallback:a.a.createElement(c.a,null)},a.a.createElement(M,{courseBuilderUrl:t})))))}},2:function(e,t,r){"use strict";r.d(t,"d",function(){return a}),r.d(t,"f",function(){return i}),r.d(t,"k",function(){return u}),r.d(t,"g",function(){return c}),r.d(t,"h",function(){return l}),r.d(t,"a",function(){return d}),r.d(t,"i",function(){return h}),r.d(t,"o",function(){return p}),r.d(t,"n",function(){return f}),r.d(t,"l",function(){return m}),r.d(t,"b",function(){return g}),r.d(t,"c",function(){return b}),r.d(t,"e",function(){return v}),r.d(t,"j",function(){return y}),r.d(t,"m",function(){return k});var n=r(1);function a(e){for(var t=0,r=e.length;t<r;++t)if(e.charCodeAt(t)<8192)return e.substr(0,t)+e[t].toLocaleUpperCase()+e.substr(t+1);return e}function s(e,t){return"object"!=typeof t?e:(Object.keys(t).forEach(function(r){e[r]=t[r]}),e)}function i(e,t){var r={};return Object.getOwnPropertyNames(e).forEach(function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(e,t))}),t&&s(r,t),r}var o=[].concat;function u(e){return o.apply([],e)}function c(e){return function(t,r){var n=t[e],a=r[e];return n>a?1:n<a?-1:0}}function l(e,t,r){e=Array.isArray(e)?e:[e];var a=function(e,n){return"string"==typeof e?e.localeCompare(n,t,r):e<n?-1:e>n?1:0};return e.map(function(e){return e.split(".")}).map(function(e){var t=n.f(e),r=t[0],s=t.slice(1);return function(e,t){return function e(t,r,n,s){var i=t[n],o=r[n];return i===o?0:null==i?-1:null==o?1:0===s.length?a(i,o):e(i,o,s[0],s.slice(1))}(e,t,r,s)}}).reduce(function(e,t){return function(r,n){return e(r,n)||t(r,n)}})}function d(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];e[0];return function(e,t){for(var r=e[0],n=1,a=e.length;n<a;++n)r+=t[n-1]+e[n];return r}(e,t)}function h(e,t){var r;return"string"==typeof t&&(r=/\/Date\((\d*)\)\//.exec(t))?new Date(+r[1]):t}function p(e){var t=new CustomEvent("info",{detail:e});window.dispatchEvent(t)}function f(e){var t="string"==typeof e?e:e.message,r=new CustomEvent("customerror",{detail:t});console.error(e),window.dispatchEvent(r)}function m(e,t){return e.length>t?e.substr(0,t-3)+"...":e}function g(e,t){for(var r={},n=0,a=e.length;n<a;++n){var s=e[n],i=t(s),o=r[i];o?o.push(s):r[i]=[s]}return r}function b(e,t){for(var r={},n=0,a=e.length;n<a;++n){var s=e[n];r[t(s)]=s}return r}function v(e,t){var r,a,s={};try{for(var i=n.h(t),o=i.next();!o.done;o=i.next()){var u=o.value;u in e&&(s[u]=e[u])}}catch(e){r={error:e}}finally{try{o&&!o.done&&(a=i.return)&&a.call(i)}finally{if(r)throw r.error}}return s}function y(e,t){var r=b(e,t||function(e){return e});return Object.keys(r).map(function(e){return r[e]})}function k(e,t){if(e===t)return!0;if(!e||!t)return!1;if("object"!=typeof e||"object"!=typeof t)return!1;var r=Object.keys(e),n=Object.keys(t);if(r.length!==n.length)return!1;for(var a=0,s=r.length;a<s;++a){var i=r[a];if(n[a]!==i)return!1;if(e[i]!==t[i])return!1}return!0}},20:function(e){e.exports=JSON.parse('{"a":{"branches":{"accessClaimTypes":["role","schoolRole","email"],"sharingAccessPerRole":{"USER":{"email":["*"],"schoolRole":["*"],"role":["*"]}},"relationships":{"parents":"branches","approvedChildren":"branches"},"isPublic":true},"global":{"accessClaimTypes":["role","schoolRole"],"relationships":{"courseInstances":"courseInstances"},"isPublic":true},"courseInstances":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","blocks":"courseBlocks","tabs":"courseTabs"},"isPublic":true},"courseBlocks":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","tabs":"courseTabs","tasks":"tasks"},"isPublic":true},"courseTabs":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"abilities":"abilities","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","contents":"courseContents"},"isPublic":true},"courseContents":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"USER":{"schoolRole":["*"],"role":["*"]}},"defaultAcl":["role:USER:R","schoolRole:{school}/EMPLOYEE:S"],"relationships":{"tasks":"tasks"},"isPublic":true},"weekplans":{"accessClaimTypes":["email","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"isPublic":false},"weekplans-ks":{"accessClaimTypes":["email","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"isPublic":false},"usertasks":{"accessClaimTypes":["email","schoolRole","tutorFor"],"sharingAccessPerRole":{"USER":{"email":["{email}:*","{tutorFor}:*"],"schoolRole":["{school}/EMPLOYEE:*"],"tutorFor":["{tutorFor}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{"task":"tasks","course":"courses"},"isPublic":false},"userhiddencourses":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false},"usercalendarvisibility":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false},"subjects":{"relationships":{"courseTemplates":"courses","abilities":"abilities"},"isPublic":true},"schools":{"accessClaimTypes":["role","schoolRole"],"relationships":{"courses":"courses","activeCourses":"courses"},"isPublic":true},"courses":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]}},"defaultAcl":["schoolRole:{school}/EMPLOYEE:*"],"relationships":{"templateChain":"courses","centralContent":"central-content","knowledgeRequirements":"knowledge-requirements","abilities":"abilities","images":"images","tasks":"tasks"},"isPublic":true},"tasks":{"accessClaimTypes":["role","schoolRole"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]}},"defaultAcl":["schoolRole:{school}/EMPLOYEE:S","role:USER:R"],"relationships":{"knowledgeRequirements":"knowledge-requirements","centralContent":"central-content","abilities":"abilities"},"isPublic":true},"images":{"accessClaimTypes":["role","schoolRole","email"],"sharingAccessPerRole":{"EMPLOYEE":{"schoolRole":["{school}/EMPLOYEE:*"],"role":["USER:R"]},"USER":{"email":["{email}:*"]}},"isPublic":true},"central-content":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"]},"knowledge-requirements":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"],"isPublic":true},"abilities":{"accessClaimTypes":["role"],"defaultAcl":["role:USER:R"],"isPublic":true},"seenStudentAssignments":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":true},"notes":{"accessClaimTypes":["email"],"sharingAccessPerRole":{"USER":{"email":["{email}:*"]}},"defaultAcl":["email:{email}:S"],"relationships":{},"isPublic":false}}}')},21:function(e,t,r){"use strict";var n=r(3),a=r(17),s=function(){function e(){}return e.prototype.save=function(e,t){sessionStorage.setItem("bearer-"+e,JSON.stringify(t))},e.prototype.load=function(e){try{var t=sessionStorage.getItem("bearer-"+e);return Promise.resolve(t?JSON.parse(t):{token:null,expires:0})}catch(e){return Promise.resolve({token:null,expires:0})}},e}(),i=r(11);function o(e){e.resources||(e.resources=[])}function u(e,t,r){switch(t){case"courses":!function(e,t){e.modules||(e.modules=[]),e.modules.forEach(function(e){e.resources||(e.resources=[]),e.taskIds||(e.taskIds=[])}),e.responsibleTeachers||(e.responsibleTeachers=[]),"resourses"in e&&!("resources"in e)&&(e.resources=e.resourses,delete e.resourses),e.resources||(e.resources=[]),t&&t.forEach(function(t){switch(t){case"tasks":e.tasks.forEach(function(e){return o(e)})}})}(e,r);break;case"tasks":o(e)}}var c=sessionStorage.getItem("redir-hash");if(c)try{var l=JSON.parse(c),d=l.time,h=l.hash;d&&d>Date.now()-6e4&&(sessionStorage.removeItem("redir-hash"),location.hash=h)}catch(e){}!function(e){if(!e.__migrator_mixed_in){e.__migrator_mixed_in=!0;var t=e.get,r=e.list;e.get=function(e,r,n){var a=n&&n.include;return t.apply(this,arguments).then(function(t){return u(t,e,a&&a.toString().split(",")),t})},e.list=function(e,t){var n=t&&t.include;return r.apply(this,arguments).then(function(t){return t.forEach(function(t){return u(t,e,n&&n.toString().split(","))}),t})}}}(a.d.prototype);var p=new s,f=Date.now(),m=function(){function e(e,t,r){this.tokenPath=e,this.tokenResponseMapper=t,this.tokenId=r,this.tokenInfo={token:null,expires:0},this.getBearer=Object(i.a)(this.getBearer.bind(this)),this.refreshBearer=Object(i.a)(this.refreshBearer.bind(this))}return e.prototype.getBearer=function(){return n.b(this,void 0,void 0,function(){var e;return n.d(this,function(t){switch(t.label){case 0:return this.tokenInfo.token?[3,2]:this.tokenId?(e=this,[4,p.load(this.tokenId)]):[3,2];case 1:e.tokenInfo=t.sent(),t.label=2;case 2:return this.tokenInfo.expires<Date.now()?[4,this.refreshBearer()]:[3,4];case 3:t.sent(),t.label=4;case 4:return[2,this.tokenInfo]}})})},e.prototype.refreshBearer=function(){return n.b(this,void 0,void 0,function(){var e,t,r,s,i;return n.d(this,function(n){switch(n.label){case 0:return[4,fetch(this.tokenPath,{headers:{Accept:"text/plain; application/json"},redirect:"manual",cache:"no-cache",credentials:"same-origin"})];case 1:if((302===(e=n.sent()).status||!e.status&&"opaqueredirect"===e.type)&&Date.now()-f>6e4)throw this.wantsRedirect=!0,console.log("Redirect wanted. Reload page."),sessionStorage.setItem("redir-hash",JSON.stringify({time:Date.now(),hash:location.hash})),window.location.reload(!0),new a.c(302,"Redirected");return 200==e.status?[3,3]:(t=Error.bind,r="HTTP"+e.status+" ",[4,e.text()]);case 2:throw new(t.apply(Error,[void 0,r+n.sent()]));case 3:return s=this,i=this.tokenResponseMapper,[4,e.text()];case 4:return s.tokenInfo=i.apply(this,[n.sent()]),p.save(this.tokenId,this.tokenInfo),[2,this.tokenInfo]}})})},e}(),g={fetch:fetch.bind(self),btoa:btoa.bind(self)},b=function(e){function t(t,r,n){var a="string"!=typeof r?r:new m(r,n&&n.tokenResponseMapper||function(e){return{token:e,expires:Date.now()+212400}},n&&n.tokenId);return e.call(this,g,a,t)||this}return n.c(t,e),t}(a.d);r.d(t,"d",function(){return p}),r.d(t,"b",function(){return m}),r.d(t,"c",function(){return g}),r.d(t,"a",function(){return b})},22:function(e,t,r){"use strict";r.d(t,"b",function(){return i}),r.d(t,"d",function(){return o}),r.d(t,"c",function(){return u}),r.d(t,"a",function(){return c});var n=r(1),a=r(6),s=r.n(a);function i(e){return"AT"===e?[32,51]:[1,25]}function o(e,t){var r=null;r=e.getMonth()>=7?t?e.getFullYear():e.getFullYear()+1:t?e.getFullYear()-1:e.getFullYear();var n=s()(r.toString(),"YYYY");return 1!=n.week()&&(n=n.clone().add(1,"week")),t?[s()(n.clone()).week(32).startOf("week"),s()(n.clone()).week(51).endOf("week")]:[s()(n.clone()),s()(n.clone()).week(25).endOf("week")]}function u(e){var t=e.year(),r=e.month()>=6,a=n.f(r?[t,t+1]:[t-1,t],2);return{academicYear:a[0]+"/"+a[1],term:r?"AT":"ST",week:e.week()}}function c(e,t){return e.split("/").map(function(e){return parseInt(e)+t}).map(function(e){return""+e}).join("/")}},25:function(e,t,r){"use strict";r.d(t,"a",function(){return s});var n=r(0),a=r(40);function s(e){var t=e.children,r=e.spinner,s=e.onError,i=e.noError;return n.createElement(a.a,{props:t,spinner:r,noError:i,onError:s,fn:function(e){return e}})}},26:function(e,t,r){"use strict";var n="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=n),t.a=n},28:function(e,t,r){"use strict";r.d(t,"a",function(){return a});var n=r(3),a=function(e){function t(t){var r=e.call(this,function(e){var t={unsubscribe:function(){return r.subscribers=r.subscribers.filter(function(t){return t[0]!==e})}};return r.subscribers.push([e,t]),r.error?e(null,r.error,t):e(r.value,void 0,t),t})||this;return r.subscribers=[],r.value=t,r}return n.c(t,e),t.prototype.dispatch=function(e){this.value=e,this.error=void 0,this._dispatch()},t.prototype.dispatchError=function(e){this.error=e,this._dispatch()},t.prototype._dispatch=function(){var e=this;this.subscribers.forEach(function(t){var r=t[0],n=t[1];try{r(e.value,e.error,n)}catch(e){r(null,e,n)}})},t}(r(29).a)},29:function(e,t,r){"use strict";r.d(t,"a",function(){return u});var n=r(3),a=r(30),s=r(42),i=r(31),o=r(41),u=function(e){function t(t){return e.call(this,t)||this}return n.c(t,e),t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});throw new Error("Value.from() can only take observables")},t.prototype.read=function(){var e,t,r,n=!1,a=this.subscribe(function(a,s,i){n=!0,e=a,t=s,s&&r?r(null,s,i):r&&r(a,null,i)});if(n){var s=o.a.current;if(!s)throw a.unsubscribe(),new Error("Invalid Fiber Context");if(t)throw a.unsubscribe(),t;var i=s.subscriptions,u=s.observer;return i.push(a),r=u,e}throw new Promise(function(e,t){r=function(r,n,a){a.unsubscribe(),n?t(n):e(r)}})},t.prototype.load=function(){var e=this;return new Promise(function(t,r){e.subscribe(function(e,n,a){n?r(n):t(e),a.unsubscribe()})})},t.prototype.filter=function(e){var r=this;return new t(function(t){return r.subscribe(function(r,n,a){n?t(null,n,a):e(r)&&t(r,n,a)})})},t.prototype.log=function(e){return this.map(function(t){return console.log(e,t),t})},t.prototype.toCollection=function(e){var t=this;return new i.a(function(r){return t.map(e).subscribe(r)})},t.prototype.combineLatest=function(e){var r=this;return new t(function(t){var n,a,s=[null,null],i={unsubscribe:function(){n.unsubscribe(),a.unsubscribe()}};return n=r.subscribe(function(e,r,n){r&&(n.unsubscribe(),t(null,r,i)),s[0]=e,null!==s[1]&&t(s,null,i)}),a=e.subscribe(function(e,r,n){r&&(n.unsubscribe(),t(null,r,i)),s[1]=e,null!==s[0]&&t(s,null,i)}),i})},t.prototype.switchMap=function(e){var r=this;return new t(function(t){var n=null,a=null,s={unsubscribe:function(){a.unsubscribe(),n&&(n.unsubscribe(),n=null)}};return a=r.subscribe(function(r,i,o){if(a=o,n&&(n.unsubscribe(),n=null),i)t(null,i,s);else try{var u=e(r);u&&"function"==typeof u.subscribe?n=u.subscribe(function(e,r,a){n=a,t(e,r,s)}):t(u,null,a)}catch(i){t(null,i,a)}}),s})},t}(a.a);u.prototype.map=Object(s.a)(u)},30:function(e,t,r){"use strict";r.d(t,"a",function(){return n});var n=function(){function e(e){this._subscribe=e}return e.prototype.subscribe=function(e){try{return this._subscribe(function(t,r,n){try{e(t,r,n)}catch(t){e(null,t,n)}})}catch(t){e(null,t,{unsubscribe:function(){}})}},e}()},302:function(e,t,r){"use strict";r.r(t);var n=r(1),a=r(26),s=(r(97),r(4)),i=r(7),o=r(0),u=r(194),c=r(2),l=r(13),d=r(16),h=r(8),p=r(59),f=s.a.bearerProvider.getBearer(),m=function(e){function t(t){var r=e.call(this,t)||this;return r.state={isTokenLoaded:!1},r}return n.c(t,e),t.prototype.componentWillMount=function(){var e=this;f.then(function(){e.setState({isTokenLoaded:!0})}).catch(function(e){Object(c.n)(e)})},t.prototype.render=function(){var e=this.props.intl;return this.state.isTokenLoaded?o.createElement(d.a.Provider,{value:{intl:e}},o.createElement(u.a,{courseBuilderUrl:i.b.KED_COURSE_BUILDER_URL})):o.createElement("p",null,o.createElement(l.a,null),"V.g. vänta... autenticerar...")},t}(o.Component),g=Object(p.a)(Object(h.d)(m));a.a.components=n.a({},a.a.components,{KEDAppTeacherView:g})},31:function(e,t,r){"use strict";r.d(t,"a",function(){return u});var n=r(3),a=r(30),s=r(42),i=r(29),o=r(28),u=function(e){function t(t){return e.call(this,t)||this}return n.c(t,e),t.prototype._map=function(e){throw"mixedin"},t.from=function(e){if(e.subscribe)return new t(function(t){return e.subscribe(t)});if(Array.isArray(e)){var r=new o.a(e);return new t(function(e){return r.subscribe(e)})}throw new Error("ObservableCollection.from() can only take arrays or observables")},t.prototype.map=function(e){return this._map(function(t){return t.map(function(t){return e(t)})})},t.prototype.flat=function(){return this._map(function(e){return[].concat.apply([],e)})},t.prototype.filter=function(e){return this._map(function(t){return t.filter(e)})},t.prototype.concat=function(e){return t.from(this.toValue().combineLatest(e).map(function(e){var t=e[0],r=e[1];return t.concat(r)}))},t.prototype.orderBy=function(e){return this.toValue().map(function(t){return t.slice().sort(function(t,r){var n=t&&t[e],a=r&&r[e];return n>a?1:n<a?-1:0})}).toCollection(function(e){return e})},t.prototype.toValue=function(){var e=this;return new i.a(function(t){return e.subscribe(t)})},t.prototype.groupBy=function(e){return this.toValue().map(function(t){var r={};return t.forEach(function(t){(r[t[e]]||(r[t[e]]=[])).push(t)}),r})},t.prototype.first=function(){return this.toValue().map(function(e){return e[0]})},t}(a.a);u.prototype._map=Object(s.a)(u)},32:function(e,t,r){"use strict";var n=r(33);r.d(t,"a",function(){return n.b}),r.d(t,"b",function(){return n.c})},33:function(e,t,r){"use strict";r(30),r(29);var n=r(31);r.d(t,"a",function(){return n.a});var a=r(28);r.d(t,"b",function(){return a.a});var s=r(41);r.d(t,"c",function(){return s.a})},34:function(e,t,r){"use strict";var n="undefined"==typeof KED?{}:KED;"undefined"!=typeof window&&"undefined"==typeof KED&&(window.KED=n),t.a=n},4:function(e,t,r){"use strict";r.d(t,"b",function(){return a});var n=r(34);n.a.env||(n.a.env={}),t.a=n.a.env;var a=n.a.env},40:function(e,t,r){"use strict";r.d(t,"b",function(){return i}),r.d(t,"a",function(){return o});var n=r(1),a=r(0),s=r(2);function i(e,t){return function(r){return a.createElement(o,n.a({props:r,fn:e},t))}}var o=function(e){function t(t){var r=e.call(this,t)||this;return r.state={result:null,isLoading:!0},r}return n.c(t,e),t.prototype.componentDidMount=function(){this.subscribe()},t.prototype.componentWillUnmount=function(){this.unsubscribe()},t.prototype.shouldComponentUpdate=function(e,t){return this.state.error!==t.error||this.state.isLoading!==t.isLoading||this.state.result!==t.result||!Object(s.m)(e.props,this.props.props)},t.prototype.componentDidUpdate=function(e){Object(s.m)(e.props,this.props.props)||(this.unsubscribe(),this.subscribe())},t.prototype.subscribe=function(){var e=this;this.setState({isLoading:!0}),this.subscription=this.props.fn(this.props.props).subscribe(function(t,r){return e.setState({result:t,error:r,isLoading:!1})})},t.prototype.unsubscribe=function(){this.subscription&&(this.subscription.unsubscribe(),this.subscription=null)},t.prototype.render=function(){var e=this.state,t=e.result,r=e.error,n=e.isLoading,s=this.props,i=s.spinner,o=s.onError,u=s.noError;return r?u?"":o?o(r):a.createElement("p",null,"Error: ",r.message):n?i||"":void 0===t?"":t},t}(a.Component)},41:function(e,t,r){"use strict";r.d(t,"a",function(){return s});var n=null,a=[function(){return n}];var s={get current(){return n},addProvider:function(e){a.push(e),i()},removeProvider:function(e){a=a.filter(function(t){return t!==e}),i()}};function i(){Object.defineProperty(s,"current",{get:a.reduce(function(e,t){return function(){return e()||t()}}),set:function(){throw new Error("Use FiberContext.push() to change current fiber")}})}},42:function(e,t,r){"use strict";function n(e){return function(t){var r=this;return new e(function(e){return r.subscribe(function(r,n,a){if(n)e(null,n,a);else try{e(t(r),n,a)}catch(t){e(null,t,a)}})})}}r.d(t,"a",function(){return n})},45:function(e,t,r){"use strict";var n=r(1),a=r(5),s=r(22),i=r(6),o=r.n(i);var u=function(){function e(e){var t="academicYear"in e?e:Object(s.c)(o()(e));this.academicYear=t.academicYear,this.term=t.term}return Object.defineProperty(e.prototype,"year",{get:function(){return parseInt(this.academicYear.split("/")["AT"===this.term?0:1])},enumerable:!0,configurable:!0}),e.prototype.nextTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:this.academicYear}:{term:"AT",academicYear:Object(s.a)(this.academicYear,1)})},e.prototype.prevTerm=function(){return new e("AT"===this.term?{term:"ST",academicYear:Object(s.a)(this.academicYear,-1)}:{term:"AT",academicYear:this.academicYear})},e.prototype.toLocaleString=function(e,t){var r="AT"===this.term?this.academicYear.split("/")[0]:this.academicYear.split("/")[1];return t&&(r=r.substr(2)),"AT"===this.term?e.formatMessage({id:"termplanner.secondTerm",defaultMessage:"HT {year}"},{year:r}):e.formatMessage({id:"termplanner.firstTerm",defaultMessage:"VT {year}"},{year:r})},e}(),c=r(2),l=r(53),d={isApiMethod:function(e){return"function"==typeof e},cacheExpiration:18e5};r.d(t,"b",function(){return p}),r.d(t,"a",function(){return f});var h,p=function(){function e(t,r,s,i){var o=this;this.http=new a.f(t,r,{bearerProvider:s}),this.userEmailGetter=i;var u=function(e){return"function"==typeof o[e]&&"constructor"!==e&&"privatizingCacheBust"!==e&&"userEmailGetter"!==e};Object.keys(e.prototype).forEach(function(e){u(e)&&(o[e]=function(e){var t={};return function(){var r=JSON.stringify([].slice.call(arguments));return t[r]||(t[r]=e.apply(this,arguments).then(function(e){return delete t[r],e})),t[r]}}(o[e]))}),this.suspense=function(e,t){void 0===t&&(t=d);for(var r=(t=n.a({},d,t)).isApiMethod,a=t.cacheExpiration,s=Object.create(e),i={},o=e;o&&o!==Object.prototype;o=Object.getPrototypeOf(o))u(o);function u(t){Object.keys(t).forEach(function(o){!s.hasOwnProperty(o)&&r(o)&&(s[o]=function(){for(var r=[],s=0;s<arguments.length;s++)r[s]=arguments[s];var u=JSON.stringify(n.g([o],r)),c=i[u];if(void 0!==c){if(c.promise)throw c.promise;if(c.error)throw c.error;if(c.timeout>Date.now())return c.value}try{var l=t[o].apply(e,r).then(function(e){i[u]={timeout:Date.now()+a,value:e}}).catch(function(e){i[u]={timeout:Date.now()+a,error:e}});throw i[u]={timeout:Date.now()+a,promise:l},l}catch(e){if(e.then)throw e;i[u]={timeout:Date.now()+a,error:e}}})})}return s}(this,{isApiMethod:u})}return e.prototype.privatizingCacheBust=function(){return{user:this.userEmailGetter()}},e.prototype.getActiveCourses=function(e){return n.b(this,void 0,void 0,function(){var t,r,s,i,o;return n.d(this,function(u){switch(u.label){case 0:return u.trys.push([0,5,,6]),t=this.privatizingCacheBust(),e&&(e.courseCode&&(t.CourseCode=e.courseCode),e.periodName&&(t.PeriodName=e.periodName)),[4,this.http.get("studentactivecourses",t)];case 1:return 200==(r=u.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,r.status],[4,r.text()]);case 2:throw new(s.apply(a.c,i.concat([u.sent()])));case 3:return[4,r.json()];case 4:return[2,u.sent().courses];case 5:throw o=u.sent(),console.error("Error from EDS: "+o),new Error(Object(c.a)(h||(h=n.e(["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."],["Kunde tyvärr inte ladda terminsmål eller avklarade steg från EDS. Försök igen senare..."]))));case 6:return[2]}})})},e.prototype.getLatestAssessments=function(e){return n.b(this,void 0,void 0,function(){var t,r,s,i;return n.d(this,function(n){switch(n.label){case 0:return t=this.privatizingCacheBust(),isNaN(e)||(t.Count=e),[4,this.http.get("studentassessments",t)];case 1:return 200==(r=n.sent()).status?[3,3]:(s=a.c.bind,i=[void 0,r.status],[4,r.text()]);case 2:throw new(s.apply(a.c,i.concat([n.sent()])));case 3:return[4,r.json()];case 4:return[2,n.sent().assessments]}})})},e.prototype.getStudentGoals=function(){return n.b(this,void 0,void 0,function(){var e,t,r;return n.d(this,function(n){switch(n.label){case 0:return[4,this.http.get("studentgoals",this.privatizingCacheBust())];case 1:return 200==(e=n.sent()).status?[3,3]:(t=a.c.bind,r=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,r.concat([n.sent()])));case 3:return[4,e.json()];case 4:return[2,n.sent().studentGoals]}})})},e.prototype.getStudentFutureAbilities=function(){return n.b(this,void 0,void 0,function(){var e,t,r;return n.d(this,function(n){switch(n.label){case 0:return[4,this.http.get("studentFutureAbilities",this.privatizingCacheBust())];case 1:return 200==(e=n.sent()).status?[3,3]:(t=a.c.bind,r=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,r.concat([n.sent()])));case 3:return[4,e.json()];case 4:return[2,n.sent().studentFutureAbilities]}})})},e.prototype.getTeacherTutorStudents=function(){return n.b(this,void 0,void 0,function(){var e,t,r;return n.d(this,function(n){switch(n.label){case 0:return[4,this.http.get("teachertutorstudents",this.privatizingCacheBust())];case 1:return 200==(e=n.sent()).status?[3,3]:(t=a.c.bind,r=[void 0,e.status],[4,e.text()]);case 2:throw new(t.apply(a.c,r.concat([n.sent()])));case 3:return[4,e.json()];case 4:return[2,n.sent().students]}})})},e.prototype.getSchoolTuitionGroups=function(e){return n.b(this,void 0,void 0,function(){var t,r,s;return n.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTuitionGroups",n.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(r=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(r.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTuitionGroups]}})})},e.prototype.getTuitionGroupStudents=function(e){return n.b(this,void 0,void 0,function(){var t,r,s;return n.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("TuitionGroupStudents",n.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(r=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(r.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().tuitionGroupStudents]}})})},e.prototype.getSchoolTeachers=function(e){return n.b(this,void 0,void 0,function(){var t,r,s;return n.d(this,function(i){switch(i.label){case 0:return[4,this.http.get("SchoolTeachers",n.a({},this.privatizingCacheBust(),e))];case 1:return 200==(t=i.sent()).status?[3,3]:(r=a.c.bind,s=[void 0,t.status],[4,t.text()]);case 2:throw new(r.apply(a.c,s.concat([i.sent()])));case 3:return[4,t.json()];case 4:return[2,i.sent().schoolTeachers]}})})},e.prototype.getAcademicYearTerms=function(e,t){return n.b(this,void 0,void 0,function(){var r,a,i,u,c,d,h,p,f;return n.d(this,function(n){switch(e){case"en_sin":return[2,l.SouthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"en_nin":return[2,l.NorthIndia.filter(function(e){return o()(t).isSameOrAfter(e.firstTerm.startDate)&&o()(t).isSameOrBefore(e.secondTerm.endDate)})[0]];case"sv":return r=[],a=Object(s.d)(t,!0),i=Object(s.d)(t,!1),u=a[0],c=i[0],d=a[1],h=i[1],p={startDate:new Date(u.year(),u.month(),u.date()).toDateString(),endDate:new Date(u.year(),d.month(),d.date()).toDateString()},f={startDate:new Date(c.year(),c.month(),c.date()).toDateString(),endDate:new Date(c.year(),h.month(),h.date()).toDateString()},[2,{firstTerm:p,secondTerm:f,holidays:r}]}return[2]})})},e}(),f=function(){function e(e){if("string"==typeof e){if(this.period=e,this.term=this.period.startsWith("HT")?"AT":"ST",this.year=parseInt(this.period.substr(2)),isNaN(this.year))throw new Error("Invalid period: "+this.period)}else{var t=new u(e);this.period=("AT"===t.term?"HT":"VT")+t.year,this.term=t.term,this.year=t.year}}return Object.defineProperty(e.prototype,"schoolTerm",{get:function(){return new u({academicYear:"AT"===this.term?this.year+"/"+(this.year+1):this.year-1+"/"+this.year,term:this.term})},enumerable:!0,configurable:!0}),e.prototype.toString=function(){return this.period},e.prototype.valueOf=function(){return this.year+":"+("ST"===this.term?"1":"2")},e}()},47:function(e,t){e.exports=ReactDOM},5:function(e,t,r){"use strict";var n=r(17);r.d(t,"a",function(){return n.a}),r.d(t,"b",function(){return n.b}),r.d(t,"c",function(){return n.c}),r.d(t,"d",function(){return n.d}),r.d(t,"e",function(){return n.e}),r.d(t,"f",function(){return n.f}),r.d(t,"g",function(){return n.g}),r.d(t,"h",function(){return n.h}),r.d(t,"i",function(){return n.i}),r.d(t,"j",function(){return n.j}),r.d(t,"k",function(){return n.k}),r.d(t,"l",function(){return n.l})},51:function(e,t,r){"use strict";r.d(t,"a",function(){return s}),r.d(t,"b",function(){return i}),r.d(t,"c",function(){return o});var n=r(1),a=function(e,t,r){for(var n=[],a=t;a<=r;a++)n.push({schoolName:"KED",tuitionGroupName:e,studentFirstName:"Student "+a,studentLastName:"Classroom",studentEmailAddress:"student"+a+".classroom@kedschools.com"});return n},s=[{schoolName:"KED",teacherFirstName:"Teacher 1",teacherLastName:"Classroom",teacherEmailAddress:"teacher1.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 2",teacherLastName:"Classroom",teacherEmailAddress:"teacher2.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Teacher 3",teacherLastName:"Classroom",teacherEmailAddress:"teacher3.classroom@kedschools.com"},{schoolName:"KED",teacherFirstName:"Carl",teacherLastName:"Holmberg",teacherEmailAddress:"carl@kedschools.com"},{schoolName:"KED",teacherFirstName:"David",teacherLastName:"Fahlander",teacherEmailAddress:"david.fahlander@kedschools.com"},{schoolName:"KED",teacherFirstName:"Andrei",teacherLastName:"Spatarelu",teacherEmailAddress:"andrei.spatarelu@vemendo.se"}],i={"DJUSÄL01":[{schoolName:"KED",tuitionGroupName:"DJUR1_GR1 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"DJUR1_GR2 (180816-190614)",courseCode:"DJUSÄL01"},{schoolName:"KED",tuitionGroupName:"DJUR1_GR3 (180816-190614)",courseCode:"DJUSÄL01"}],DJUDJI0:[{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr1 (180816-190614)",courseCode:"DJUDJI0"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",courseCode:"DJUDJI0"}],KEMKEM01:[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",courseCode:"KEMKEM01"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",courseCode:"KEMKEM01"}],MATMAT03b:[{schoolName:"KED",tuitionGroupName:"MAT3b_Gr1 (180816-190614)",courseCode:"MATMAT03b"},{schoolName:"KED",tuitionGroupName:"MAT3b_Gr2 (180816-190614)",courseCode:"MATMAT03b"},{schoolName:"KED",tuitionGroupName:"MAT3b_Gr3 (180816-190614)",courseCode:"MATMAT03b"}],BIOBIO01:[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",courseCode:"BIOBIO01"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",courseCode:"BIOBIO01"}],SVESVE03:[{schoolName:"KED",tuitionGroupName:"SVE3_Gr1 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr2 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr3 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr4 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr5 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr6 (180816-190614)",courseCode:"SVESVE03"},{schoolName:"KED",tuitionGroupName:"SVE3_Gr7 (180816-190614)",courseCode:"SVESVE03"}]},o={"DJUR1_GR1 (180816-190614)":a("DJUR1_GR1 (180816-190614)",1,12),"DJUR1_GR2 (180816-190614)":a("DJUR1_GR2 (180816-190614)",13,24),"DJUR1_GR3 (180816-190614)":n.g([{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Student2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Carl",studentLastName:"Holmberg",studentEmailAddress:"carl@kedschools.com"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Andrei",studentLastName:"Spatarelu",studentEmailAddress:"andrei.spatarelu@vemendo.se"},{schoolName:"KED",tuitionGroupName:"DJUDJ_Gr2 (180816-190614)",studentFirstName:"Student3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"}],a("DJUR1_GR3 (180816-190614)",23,34)),"MAT3b_Gr1 (180816-190614)":a("MAT3b_Gr1 (180816-190614)",3,23),"MAT3b_Gr2 (180816-190614)":a("MAT3b_Gr2 (180816-190614)",24,49),"MAT3b_Gr3 (180816-190614)":a("MAT3b_Gr3 (180816-190614)",50,72),"IDR1_Gr1 (180816-190614)":a("IDR1_Gr1 (180816-190614)",1,12),"IDR1_Gr2 (180816-190614)":a("IDR1_Gr2 (180816-190614)",13,22),"IDR1_Gr3 (180816-190614)":a("IDR1_Gr3 (180816-190614)",23,34),"KEM1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 3",studentLastName:"Classroom",studentEmailAddress:"student3.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr1 (180816-190614)",studentFirstName:"Student 9",studentLastName:"Classroom",studentEmailAddress:"student9.classroom@kedschools.com"}],"KEM1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 5",studentLastName:"Classroom",studentEmailAddress:"student5.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"KEM1_Gr2 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"}],"BIO1_Gr1 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 1",studentLastName:"Classroom",studentEmailAddress:"student1.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 4",studentLastName:"Classroom",studentEmailAddress:"student4.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 6",studentLastName:"Classroom",studentEmailAddress:"student6.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr1 (180816-190614)",studentFirstName:"Student 10",studentLastName:"Classroom",studentEmailAddress:"student10.classroom@kedschools.com"}],"BIO1_Gr2 (180816-190614)":[{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 2",studentLastName:"Classroom",studentEmailAddress:"student2.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 7",studentLastName:"Classroom",studentEmailAddress:"student7.classroom@kedschools.com"},{schoolName:"KED",tuitionGroupName:"BIO1_Gr2 (180816-190614)",studentFirstName:"Student 8",studentLastName:"Classroom",studentEmailAddress:"student8.classroom@kedschools.com"}],"SVE3_Gr1 (180816-190614)":a("SVE3_Gr1 (180816-190614)",1,21),"SVE3_Gr2 (180816-190614)":a("SVE3_Gr2 (180816-190614)",22,44),"SVE3_Gr3 (180816-190614)":a("SVE3_Gr3 (180816-190614)",45,61),"SVE3_Gr4 (180816-190614)":a("SVE3_Gr4 (180816-190614)",62,78),"SVE3_Gr5 (180816-190614)":a("SVE3_Gr5 (180816-190614)",83,107),"SVE3_Gr6 (180816-190614)":a("SVE3_Gr6 (180816-190614)",108,124),"SVE3_Gr7 (180816-190614)":a("SVE3_Gr7 (180816-190614)",125,150)}},53:function(e){e.exports=JSON.parse('{"SouthIndia":[{"firstTerm":{"startDate":"2015-06-01T00:00:00.000Z","endDate":"2015-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2015-11-01T00:00:00.000Z","endDate":"2016-03-27T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2016-06-23T00:00:00.000Z","endDate":"2016-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2016-11-01T00:00:00.000Z","endDate":"2017-03-25T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2017-06-05T00:00:00.000Z","endDate":"2017-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2017-11-01T00:00:00.000Z","endDate":"2018-03-30T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2018-06-04T00:00:00.000Z","endDate":"2018-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2018-11-01T00:00:00.000Z","endDate":"2019-04-29T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2019-06-03T00:00:00.000Z","endDate":"2019-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2019-11-01T00:00:00.000Z","endDate":"2020-03-27T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2020-06-01T00:00:00.000Z","endDate":"2020-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2020-11-01T00:00:00.000Z","endDate":"2021-03-26T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2021-06-06T00:00:00.000Z","endDate":"2021-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2021-11-01T00:00:00.000Z","endDate":"2022-03-25T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2022-06-05T00:00:00.000Z","endDate":"2022-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2022-11-01T00:00:00.000Z","endDate":"2023-03-31T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2023-06-04T00:00:00.000Z","endDate":"2023-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2023-11-01T00:00:00.000Z","endDate":"2024-03-29T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2024-06-03T00:00:00.000Z","endDate":"2024-10-31T00:00:00.000Z"},"secondTerm":{"startDate":"2024-11-01T00:00:00.000Z","endDate":"2025-03-28T00:00:00.000Z"},"holidays":[]}],"NorthIndia":[{"firstTerm":{"startDate":"2024-04-03T00:00:00.000Z","endDate":"2024-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2024-10-01T00:00:00.000Z","endDate":"2025-04-02T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2023-04-05T00:00:00.000Z","endDate":"2023-10-01T00:00:00.000Z"},"secondTerm":{"startDate":"2023-10-02T00:00:00.000Z","endDate":"2024-04-02T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2022-04-06T00:00:00.000Z","endDate":"2022-10-03T00:00:00.000Z"},"secondTerm":{"startDate":"2022-10-04T00:00:00.000Z","endDate":"2023-04-04T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2021-04-01T00:00:00.000Z","endDate":"2021-10-04T00:00:00.000Z"},"secondTerm":{"startDate":"2021-10-05T00:00:00.000Z","endDate":"2022-04-05T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2020-04-01T00:00:00.000Z","endDate":"2020-09-28T00:00:00.000Z"},"secondTerm":{"startDate":"2020-09-29T00:00:00.000Z","endDate":"2021-03-31T00:00:00.000Z"},"holidays":[{"startDate":"2020-05-17","endDate":"2020-06-28"}]},{"firstTerm":{"startDate":"2019-04-04T00:00:00.000Z","endDate":"2019-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2019-10-01T00:00:00.000Z","endDate":"2020-03-31T00:00:00.000Z"},"holidays":[{"startDate":"2019-05-19","endDate":"2019-06-29"}]},{"firstTerm":{"startDate":"2018-04-04T00:00:00.000Z","endDate":"2018-09-30T00:00:00.000Z"},"secondTerm":{"startDate":"2018-10-01T00:00:00.000Z","endDate":"2019-04-03T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2017-04-05T00:00:00.000Z","endDate":"2017-10-02T00:00:00.000Z"},"secondTerm":{"startDate":"2017-10-03T00:00:00.000Z","endDate":"2018-04-03T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2016-04-06T00:00:00.000Z","endDate":"2016-10-03T00:00:00.000Z"},"secondTerm":{"startDate":"2016-10-04T00:00:00.000Z","endDate":"2017-04-04T00:00:00.000Z"},"holidays":[]},{"firstTerm":{"startDate":"2015-04-01T00:00:00.000Z","endDate":"2015-10-05T00:00:00.000Z"},"secondTerm":{"startDate":"2015-10-06T00:00:00.000Z","endDate":"2016-04-05T00:00:00.000Z"},"holidays":[]}]}')},56:function(e,t,r){"use strict";r.d(t,"c",function(){return d}),r.d(t,"d",function(){return h}),r.d(t,"b",function(){return p}),r.d(t,"a",function(){return f});var n=r(1),a=r(0),s=r(5),i=r(4),o=r(140),u=r.n(o),c=r(13),l=r(63);function d(e,t,r){var n,s=e.metadata;try{n=s.urkundResponse&&JSON.parse(s.urkundResponse)}catch(e){n=null}var i=n&&n[0];return!i&&e.metadata.urkundUploadError&&(i={Status:{ErrorCode:-1,Message:e.metadata.urkundUploadError,State:"Error"},ExternalId:e.metadata.urkundExternalId}),e.isRefreshing?a.createElement("td",{colSpan:2},a.createElement(c.a,null)," Uppdaterar..."):i?a.createElement(a.Fragment,null,a.createElement("td",{className:"urkund-status-col"},a.createElement("a",{href:i.Report&&i.Report.ReportUrl,onClick:function(n){-1!==["Accepted","Submitted"].indexOf(i.Status.State)&&(n.preventDefault(),n.stopPropagation(),r&&t(e))},target:"_blank",title:Object(l.a)(i)},a.createElement("div",{className:Object(l.c)(i)}))),a.createElement("td",{className:"urkund-status-col"},a.createElement("div",{className:Object(l.b)(i)},i.Report&&"number"==typeof i.Report.Significance?i.Report.Significance.toFixed()+"%":" "))):a.createElement("td",{colSpan:2})}function h(e,t){return n.g([t],e.filter(function(e){var r=e.user,n=e.filename;return r!==t.user||n!==t.filename}))}function p(e){return n.b(this,void 0,void 0,function(){var t,r,a,o,c;return n.d(this,function(n){switch(n.label){case 0:return n.trys.push([0,5,,6]),[4,i.b.kedBackendClient.http.fetch(e.mediaLink,"get",{})];case 1:return(t=n.sent()).status>=400?(r=s.c.bind,a=[void 0,t.status],[4,t.text()]):[3,3];case 2:throw new(r.apply(s.c,a.concat([n.sent()])));case 3:return[4,t.blob()];case 4:return o=n.sent(),u()(o,e.filename,e.contentType),[3,6];case 5:return c=n.sent(),this.setState({error:"Kunde inte ladda ned filen. "+(c.message||c)}),console.error(c),[3,6];case 6:return[2]}})})}function f(e){var t=e.file,r=t.metadata,n=r.driveFileIconUrl,s=r.driveFileUrl,i=t.filename.substr(0,t.filename.lastIndexOf("."));return a.createElement("div",{className:"align-horizontal spaced"},a.createElement("div",{className:"horizontalItem top"},a.createElement("img",{className:"file-icon",src:n})),a.createElement("div",{className:"horizontalItem top"},a.createElement("span",null,a.createElement("a",{target:"_blank",href:s},i))))}},59:function(e,t,r){"use strict";r.d(t,"a",function(){return m});var n=r(1),a=r(8),s=r(93),i=r.n(s),o=r(94),u=r.n(o),c=r(64),l=r(65),d=r(0),h=r(7),p=r(6),f=r.n(p),m=function(e){return function(t){function r(e){var r=t.call(this,e)||this;return Object(a.c)(n.g(i.a,u.a)),r.messages={sv:c,en:l},f()().locale(h.b.KED_LOCALE),r}return n.c(r,t),r.prototype.render=function(){return d.createElement(a.b,{locale:h.b.KED_LOCALE,messages:this.messages[h.b.KED_LOCALE]},d.createElement(e,n.a({},this.props)))},r}(d.Component)}},63:function(e,t,r){"use strict";function n(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return"urkund-status urkund-status-error";case"Submitted":return"urkund-status urkund-status-submitted";case"Accepted":return"urkund-status urkund-status-accepted";case"Analyzed":return"urkund-status urkund-status-analyzed"}}function a(e){if(!e||!e.Status)return null;switch(e.Status.State){case"Error":return e.ExternalId?"Kunde inte tas emot av urkund. Felkod: "+e.Status.ErrorCode+"\nExternal ID: "+e.ExternalId+"\nFelmeddelande: "+e.Status.Message:e.Status.Message;case"Submitted":return"Filen är uppladdad till Urkund. Klicka för att uppdatera status.";case"Accepted":return"Filen analyseras fortfarande av Urkund. Klicka för att uppdatera status.";case"Analyzed":return"Rapport skapad. Klicka för att öppna rapporten i nytt fönster"}}function s(e){if(!e||!e.Status)return"";switch(e.Status.State){case"Error":return"urkund-significance-error";case"Submitted":return"urkund-significance-submitted";case"Accepted":return"urkund-significance-accepted"}var t=e.Report;return t?t.Significance<1?"urkund-significance urkund-significance-0":t.Significance<10?"urkund-significance urkund-significance-1":t.Significance<25?"urkund-significance urkund-significance-2":t.Significance<40?"urkund-significance urkund-significance-3":t.Significance<55?"urkund-significance urkund-significance-4":t.Significance<70?"urkund-significance urkund-significance-5":t.Significance<85?"urkund-significance urkund-significance-6":t.Significance<99.9?"urkund-significance urkund-significance-7":t.Significance>=99.9?"urkund-significance urkund-significance-8":"":""}r.d(t,"c",function(){return n}),r.d(t,"a",function(){return a}),r.d(t,"b",function(){return s})},64:function(e){e.exports=JSON.parse('{"addeditsubtask.addSubtask":"Lägg till underuppgift","addeditsubtask.deleteSubtask":"Ta bort underuppgift","addeditsubtask.editSubtask":"Redigera underuppgift","addeditsubtask.nameLabel":"Underuppgiftens namn","calendar.currentDate":"Vecka {week}, {year}","calendar.fullDayEventLocation":"Plats: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"V{weekNumber}","common.addDescriptionPlhd":"Lägg till en beskrivning...","common.cancel":"Avbryt","common.changesNotSavedErrorOccured":"För tillfället problem att spara data. Dina ändringar sparades inte.","common.changesNotSavedUnauthorized":"Ändringarna sparades inte p.g.a. otillräcklig behörighet.","common.descriptionLabel":"Beskrivning","common.errorSavingData":"Kunde inte spara.","common.linkLabel":"Länk","common.loading":"Laddar...","common.nameLabel":"Namn","common.save":" Spara","common.saved":" Sparad","common.saving":"Sparar...","common.remove":"Ta bort","customTask.addWorkGoalPrimarySchoolTitle":"Lägg till eget arbetsmål","customTask.addWorkGoalGymnasiumSchoolTitle":"Lägg till uppgift","customTask.enterNamePlhd":"Ange namn...","learningGoalsLost.overall":"Övergripande","task.addSubtask":"Lägg till underuppgift","task.editTask":"Redigera uppgift","task.editWorkGoals":"Redigera arbetsmål","task.enterTaskNamePlhd":"Ange uppgiftens namn...","task.removeDeadline":"Ta bort deadline","task.removeThisTask":"Ta bort den här uppgiften","task.removeWorkGoals":"Ta bort arbetsmål","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Ange deadline...","task.subTasks":"Underuppgifter","task.targetNameLabel":"Arbetsmålets namn","task.taskNameLabel":"Uppgiftens namn","task.whatShouldYouDoPlhd":"Vad ska du göra?","taskList.nextWeekTask":"för nästa vecka (v{week})","taskList.lastWeekTask":"för förra veckan (v{week})","taskList.currentWeekTask":"för vecka {week}","taskList.removeTaskFromWeeklyPlanning":"Ta bort uppgiften från egen veckoplanering {week}","taskList.addTaskToWeeklyPlanning":"Lägg till uppgiften i egen veckoplanering {week}","termplanner.comments":"Kommentar","termplanner.course":"Kurs","termplanner.edsGoalGrades":"Terminsmål","termplanner.englishLanguage":"Eng","termplanner.swedishLanguage":"Sv/SvA","termplanner.finalStep":"Slutsteg","termplanner.firstTerm":"HT {year}","termplanner.hindiLanguage":"","termplanner.loadingTermplanner":"V.g. vänta medan terminsplaner laddas...","termplanner.modernLanguageFullname":"M.språk","termplanner.mathsFullname":"Matematik","termplanner.noFinalStepAvailable":"Inget slutsteg tillgängligt","termplanner.swedishLanguageFullName":"Svenska","termplanner.englishLanguageFullName":"Engelska","termplanner.maths":"Ma","termplanner.modernLanguage":"M.spr","termplanner.secondTerm":"VT {year}","termplanner.termPlanning":"Terminsplanering","termplanner.weekNumber":"Vecka","termplanner.chartsBoxTitle":"Min progression","tutorNoteDialog.weekComment":"Kommentar för vecka {weekNumber}","test.chooseComponentLabel":"Komponent","test.pageDescription":"Testsida för komponenter till nya startsidan","userTasks.addLearningGoal":"Eget arbetsmål","userTasks.deleteLearningGoal":"Ta bort lärandemålet och dess uppgifter","userTasks.primarySchoolGoals":"Egna lärandemål","userTasks.gymnasiumSchoolGoals":"Övriga uppgifter","weekNotebook.title":"Anteckningar","weekplanner.addLearningGoalGymnasiumSchool":"Rubrik:","weekplanner.addLearningGoalPrimarySchool":"Mål:","weekplanner.addLearningGoalPrimarySchoolTitle":"Lägg till eget lärandemål","weekplanner.addLearningGoalGymnasiumSchoolTitle":"Lägg till rubrik","weekplanner.confirmRemoveLearningObjectives":"Ta bort lärandemål samt {learningGoalsNumber} uppgifter?","weekplanner.copyPreviousWeekTaks":"Kopiera ej klara från föregående vecka","weekplanner.emptyLearningGoalErr":"Lärandemålet kan inte vara tomt","weekplanner.evaluation":"Utvärdering","weekplanner.evaluationDescription":"Reflektion kring din arbetsinsats och dina valda strategier under veckan.Utvärdera i förhållande till dina mål.","weekplanner.learningGoalPrimary":"Eget lärandemål","weekplanner.learningGoalGymnasium":"Uppgift","weekplanner.logBook":"Loggbok","weekplanner.nameCannotBeEmpty":"Namnet kan inte vara tomt","weekplanner.nameMustNotBeEmpty":"Namnet får inte vara tomt","weekplanner.strategy":"Strategi","weekplanner.strategyAndEvaluation":"Strategi & Utvärdering","weekplanner.strategyDescription":"Hur jag ska göra för att lära mig.","weekplanner.weekNumber":"Vecka {weekNumber}","wysiwyg.bold":"Fetstil","wysiwyg.code":"Programkod","wysiwyg.heading1":"Rubrik 1","wysiwyg.heading2":"Rubrik 2","wysiwyg.heading3":"Rubrik 3","wysiwyg.image":"Infoga bild","wysiwyg.imagePromptMsg":"Ange bildens URL","wysiwyg.italic":"Kursiv","wysiwyg.line":"Vågrät linje","wysiwyg.link":"Infoga länk","wysiwyg.olist":"Ordnad lista","wysiwyg.paragraph":"Paragraf","wysiwyg.quote":"Citat","wysiwyg.strikethrough":"Struken","wysiwyg.ulist":"Punktlista","wysiwyg.underline":"Understruken","teacherView.coursesViewTitle":"Mina kurser/ uppgifter","teacherView.assignmentsViewTitle":"Inlämningsuppgifter","teacherView.assignmentsViewDescription":"Här listas samtliga inlämningsuppgifter i din/dina kurser du handleder. Klicka till höger för att välja kurs. Kursens uppgifter syns nedan. Du kan öppna/dölja varje modul.","teacherView.noUploadedAssignmentsForModule":"No assignments have been uploaded for this module","teacherView.assignmentStudentName":"Elev","teacherView.assignmentFileName":"Filnamn","teacherView.assignmentSubmittedAt":"Inlamnat","teacherView.assignmentReport":"Rapport","teacherView.assignmentGrade":"Niva","teacherView.noTaskAssignments":"Inga uppdrag uppladdade för denna uppgift","teacherView.notSubmittedAssignments":"Ej lämnat in","teacherView.remindBtn":"Påminn","teacherView.filterByStudygroupsPlaceholder":"Välj studiegrupp"}')},65:function(e){e.exports=JSON.parse('{"addeditsubtask.deleteSubtask":"Delete subtask","addeditsubtask.editSubtask":"Edit subtask","addeditsubtask.nameLabel":"Name of subtask","addeditsubtask.addSubtask":"Add sub-task","calendar.currentDate":"Week {week}, {year}","calendar.fullDayEventLocation":"Place: {location}","calendar.loadCalendarEvents":"Load calendar events...","calendar.loadingCalendar":"Loading calendars... (listing...)","calendar.weekNumber":"W{weekNumber}","common.addDescriptionPlhd":"Add description...","common.cancel":"Cancel","common.changesNotSavedErrorOccured":"An error occured while saving data. Your changes were not saved.","common.changesNotSavedUnauthorized":"The changes were not saved due to insufficient authority","common.descriptionLabel":"Description","common.errorSavingData":"An error occured while saving data.","common.linkLabel":"Link","common.loading":"Loading...","common.nameLabel":"Name","common.save":" Save","common.saved":" Saved","common.saving":"Saving","common.remove":"Delete","customTask.addWorkGoalPrimarySchoolTitle":"Add own working goal","customTask.addWorkGoalGymnasiumSchoolTitle":"Add own working goal","customTask.enterNamePlhd":"Enter Name...","learningGoalsLost.overall":"Overall","task.addSubtask":"Add subtask","task.editTask":"Edit task","task.editWorkGoals":"Edit working goal","task.enterTaskNamePlhd":"Enter the name of task...","task.removeDeadline":"Delete deadline","task.removeThisTask":"Delete this task","task.removeWorkGoals":"Delete working goal","task.setDeadline":"Set deadline","task.setDeadlineLabel":"Set deadline...","task.subTasks":"Subtasks","task.targetNameLabel":"Name of working goal","task.taskNameLabel":"Name of task","task.whatShouldYouDoPlhd":"What should you do?","taskList.nextWeekTask":"for next week (w{week})","taskList.lastWeekTask":"for last week (w{week})","taskList.currentWeekTask":"for week {week}","taskList.removeTaskFromWeeklyPlanning":"Delete task from your weekly planning {week}","taskList.addTaskToWeeklyPlanning":"Add task to your weekly planning {week}","termplanner.comments":"Comments","termplanner.course":"Theme course","termplanner.edsGoalGrades":"Intermediate goals","termplanner.englishLanguage":"Eng","termplanner.finalStep":"Final Step","termplanner.firstTerm":"FT {year}","termplanner.hindiLanguage":"Hindi","termplanner.ict":"ICT","termplanner.loadingTermplanner":"Loading Termplanner","termplanner.maths":"Maths","termplanner.modernLanguage":"MFL","termplanner.noFinalStepAvailable":"No final step available","termplanner.secondTerm":"ST {year}","termplanner.termPlanning":"Term planner","termplanner.weekNumber":"Week","termplanner.chartsBoxTitle":"Progress Charts","termplanner.yoga":"Yoga","tutorNoteDialog.weekComment":"Note for week {weekNumber}","test.chooseComponentLabel":"Component","test.pageDescription":"Test page for the components on the starting page","userTasks.addLearningGoal":"Own working goal","userTasks.deleteLearningGoal":"Delete learning goal and its tasks","userTasks.primarySchoolGoals":"Own learning goal","userTasks.gymnasiumSchoolGoals":"Own learning goal","weekNotebook.title":"Notepad","weekplanner.addLearningGoalGymnasiumSchool":"Goal:","weekplanner.addLearningGoalPrimarySchool":"Goal:","weekplanner.addLearningGoalPrimarySchoolTitle":"Add own learning goal","weekplanner.addLearningGoalGymnasiumSchoolTitle":"Add own learning goal","weekplanner.confirmRemoveLearningObjectives":"Delete learning goal and {learningGoalsNumber} tasks?","weekplanner.copyPreviousWeekTaks":"Copy from previous week","weekplanner.emptyLearningGoalErr":"The learning goal cannot be empty","weekplanner.evaluation":"Evaluation","weekplanner.evaluationDescription":"Reflection on your work effort and your chosen strategies during the week. Evaluate in relation to your goals.","weekplanner.learningGoalPrimary":"Own learning goal","weekplanner.learningGoalGymnasium":"Own learning goal","weekplanner.logBook":"Logbook","weekplanner.nameCannotBeEmpty":"Name cannot be empty","weekplanner.nameMustNotBeEmpty":"Name must not be empty","weekplanner.strategy":"Strategy","weekplanner.strategyAndEvaluation":"Strategy & Evaluation","weekplanner.strategyDescription":"What I should do to learn","weekplanner.weekNumber":"Week {weekNumber}","wysiwyg.bold":"Bold","wysiwyg.code":"Code","wysiwyg.heading1":"Heading 1","wysiwyg.heading2":"Heading 2","wysiwyg.heading3":"Heading 3","wysiwyg.image":"Insert image","wysiwyg.imagePromptMsg":"Enter the URL of the image","wysiwyg.italic":"Italics","wysiwyg.line":"Horizontal line","wysiwyg.link":"Insert link","wysiwyg.olist":"Ordered list","wysiwyg.paragraph":"Paragraph","wysiwyg.quote":"Quote","wysiwyg.strikethrough":"Strikethrough","wysiwyg.ulist":"Bullet list","wysiwyg.underline":"Underline","teacherView.coursesViewTitle":"My Courses","teacherView.assignmentsViewTitle":"Assignments","teacherView.assignmentsViewDescription":"Here you cand find all the assignments you supervise. Click on the right menu to select course. The details are displayed below. You can open/hide each module.","teacherView.noUploadedAssignmentsForModule":"No assignments have been uploaded for this module","teacherView.assignmentStudentName":"Pupil","teacherView.assignmentFileName":"Filename","teacherView.assignmentSubmittedAt":"Submitted","teacherView.assignmentReport":"Report","teacherView.assignmentGrade":"Grade","teacherView.noTaskAssignments":"No assignments uploaded for this task","teacherView.notSubmittedAssignments":"Not submitted","teacherView.remindBtn":"Remind","teacherView.filterByStudygroupsPlaceholder":"Select study groups"}')},7:function(e,t,r){"use strict";r.d(t,"a",function(){return a});var n=r(26);n.a.cfg||(n.a.cfg={}),t.b=n.a.cfg;var a=n.a.cfg},70:function(e,t,r){"use strict";r.d(t,"a",function(){return a});var n=r(0),a=function(e){var t=e.left,r=e.right,a=e.rightWidth;return n.createElement("div",{className:"sv-row sv-layout"},n.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-12"},n.createElement("div",{className:"sv-spacer-20pxvt sv-vertical sv-layout sv-skip-spacer"},n.createElement("div",{className:"pagecontent sv-layout sv-spacer-20pxvt sv-skip-spacer"},n.createElement("div",{className:"sv-row sv-layout sv-skip-spacer"},n.createElement("div",{className:"sv-layout sv-skip-spacer sv-column-"+(12-a)},t),n.createElement("div",{className:"sv-layout sv-column-"+a},r))))))}},72:function(e,t,r){"use strict";r.d(t,"a",function(){return a});var n=r(0),a=function(){return n.createElement("img",{style:{border:0,margin:0,padding:0},className:"ellipsis-loader"})}},9:function(e,t,r){"use strict";var n=r(4),a=r(3),s=r(17),i=function(){function e(e,t){this.subscriber=e,this.collection=t}return e.prototype.notifySubscriber=function(e,t){try{t?this.subscriber([],t,this):e!==this.lastNotifiedData&&(this.lastNotifiedData=e,this.subscriber(e,t,this))}catch(e){try{this.subscriber([],e,this)}catch(t){console.error("Error while notifying KedBackendSubscriber:",t,"originally notified error:",e)}}},e.prototype.unsubscribe=function(){this.collection.unsubscribe(this)},e}(),o=r(20);function u(e,t){return o.a[e].relationships[t]}function c(e,t){var r=function(e){var t=function(e){return!0};return e.from?l(t,function(t){return t.dateTime>=e.from}):e.to?l(t,function(t){return t.dateTime<e.to}):e.ids?l(t,function(t){return e.ids.includes(t.id)}):e.name?l(t,function(t){return t.name===e.name}):e.tags?l(t,function(t){return t.tags&&[].concat(e.tags||[]).some(function(e){return t.tags.includes(e)})}):t}(e);return t.filter(r)}function l(e,t){return function(r){return e(r)&&t(r)}}function d(e){return"delete"!==e.op}function h(e){return"clear-branch"===e.op||"merge"===e.op}var p=function(){function e(){}return e.getCacheBust=function(t,r,n,a){return e.getInvolvedItems(t,r,a).map(function(e){return localStorage.getItem("cache-bust-"+n+"-"+e)}).filter(function(e){return!!e}).join("/")||"static"},e.invalidateCache=function(t,r){for(var n=0,a=e.getCacheInvalidations(t);n<a.length;n++){var s=a[n];localStorage.setItem("cache-bust-"+r+"-"+s,""+Date.now())}},e.getInvolvedItems=function(e,t,r){var n=t.hasEdgesFrom,a=r.map(function(t){return o.a[e].relationships[t]}).filter(function(e){return!!e});return n&&a.push("hef"+e),[e,"master",t.branchId].filter(function(e){return!!e}).concat(a).sort()},e.getCacheInvalidations=function(e){var t={};return e.forEach(function(e){switch(e.op){case"add":case"put":case"delete":case"update":t[e.table]=!0;break;case"link":case"unlink":case"undo-link":t[e.sourceTable]=!0,t["hef-"+u(e.sourceTable,e.label)]=!0;break;case"clear-branch":t[e.branchId]=!0;break;case"merge":t[e.branchId]=!0,t[e.targetBranchId||"master"]=!0}}),Object.keys(t)},e}(),f=r(11);function m(e,t){for(var r=Object.keys(t),n=e,s=0,i=r;s<i.length;s++){var o=i[s];n===e&&(n=a.a({},e));var u=t[o];if(u&&"object"==typeof u){var c=Object.keys(u).filter(function(e){return e.startsWith("$")});if(c.length>0){for(var l=function(e){var t=u[e];switch(e){case"$unset":n.$wasUnset=!0;break;case"$add":var r=t;if(!Array.isArray(r))throw new Error("$add instruction must contain array");var a=n[o];a=Array.isArray(a)?a.slice():[],n[o]=a;for(var s=0,i=r;s<i.length;s++){var c=i[s];a.includes(c)||a.push(c)}break;case"$remove":var l=t;if(!Array.isArray(l))throw new Error("$remove instruction must contain array");a=n[o];Array.isArray(a)||(a=[]),n[o]=a.filter(function(e){return!l.includes(e)})}},d=0,h=c;d<h.length;d++){l(h[d])}continue}}n[o]=u}return n}function g(e,t,r){for(var n=(void 0===r?{removeUnsetProps:!1}:r).removeUnsetProps,s=Object.keys(t),i=a.a({},e),o=0,u=s;o<u.length;o++){var c=u[o],l=t[c];if(l&&"object"==typeof l){var d=Object.keys(l).filter(function(e){return e.startsWith("$")});if(d.length>0){for(var h=function(e){var t=l[e];switch(e){case"$unset":n?delete i[c]:i[c]={$unset:0};break;case"$add":var r=t;if(!Array.isArray(r))throw new Error("$add instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var s=o.$remove;Array.isArray(s)&&(o.$remove=s.filter(function(e){return!r.includes(e)}),0===o.$remove.length&&delete o.$remove),d=(d=o.$add)?d.concat(r):r.slice(),o.$add=d;break;case"$remove":var o,u=t;if(!Array.isArray(u))throw new Error("$remove instruction must contain array");o=(o=i[c])?a.a({},o):{},i[c]=o;var d=o.$remove;Array.isArray(d)&&(o.$add=d.filter(function(e){return!u.includes(e)}),0===o.$add.length&&delete o.$add),s=(s=o.$remove)?s.concat(u):u.slice(),o.$remove=s}},p=0,f=d;p<f.length;p++){h(f[p])}continue}}i[c]=l}return i}var b=function(){function e(e,t,r,n,a){this.table=e,this.query=t,this.user=r,this.repo=n,this.mutationQueue=a,this.subscriptions=[],this.data=[],this.gotInitialResponse=!1,this.invalid=!1,this.loadedVersion=0,this._loadPromise=null,this.includes=t.include?"string"==typeof t.include?[t.include]:t.include:[]}return e.queryKey=function(e,t){t.mutationsOnEmpty;var r=a.e(t,["mutationsOnEmpty"]);return e+JSON.stringify(r)},Object.defineProperty(e.prototype,"queryKey",{get:function(){return e.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),e.prototype.subscribe=function(e){return a.b(this,void 0,void 0,function(){var t;return a.d(this,function(r){switch(r.label){case 0:return this.subscriptions.push(e),!this.gotInitialResponse||this.invalid?[3,1]:(t=this.getDataWithMutationsApplied(this.mutationQueue.get(),!0,this.data),e.notifySubscriber(t,this.error),[3,4]);case 1:return(t=this.queryLocally())?(this.data=t,this.error=null,e.notifySubscriber(t,this.error),[3,4]):[3,2];case 2:return[4,this.load()];case 3:r.sent(),r.label=4;case 4:return[2]}})})},e.prototype.load=function(e){return a.b(this,void 0,void 0,function(){var t,r=this;return a.d(this,function(n){switch(n.label){case 0:return this.gotInitialResponse&&delete this.query.mutationsOnEmpty,e||!this._loadPromise?[3,2]:[4,this._loadPromise];case 1:return[2,n.sent()];case 2:return e=e||this.repo.writer.persistedVersion.value,[4,t=this._loadPromise=this._load(e).then(function(n){r._loadPromise===t&&(r.data=n,r.loadedVersion=Math.max(r.loadedVersion,e))}).catch(function(e){r._loadPromise===t&&(r.error=e)}).then(function(){if(r._loadPromise!==t)return r._loadPromise;r._loadPromise=null,r.gotInitialResponse=!0,r.notifySubscribers(r.mutationQueue.get())})];case 3:return n.sent(),[2]}})})},e.prototype._load=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return this.mutationQueue.affectsQuery(this.table,this.query,this.includes)?[4,this.repo.writer.waitForVersionToPersist(e)]:[3,2];case 1:t.sent(),t.label=2;case 2:return[4,this.queryServer()];case 3:return[2,t.sent()]}})})},e.prototype.unsubscribe=function(e){this.subscriptions=this.subscriptions.filter(function(t){return t!==e})},e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){var r,n,s,i;return a.d(this,function(a){switch(a.label){case 0:if(!this.data)return[3,9];r=0,n=e,a.label=1;case 1:return r<n.length?"clear-branch"!==(s=n[r]).op||s.branchId!==this.query.branchId?[3,3]:[4,this.refreshOrInvalidate(t)]:[3,8];case 2:return a.sent(),[2];case 3:return"merge"!==s.op||s.targetBranchId&&s.branchId!==this.query.branchId&&s.targetBranchId!==this.query.branchId?[3,5]:[4,this.refreshOrInvalidate(t)];case 4:return a.sent(),[2];case 5:return"update"===s.op&&(s.deltaDoc.tags&&this.query.tags||s.deltaDoc.name&&this.query.name)?[4,this.refreshOrInvalidate(t)]:[3,7];case 6:return a.sent(),[2];case 7:return r++,[3,1];case 8:i=this.getDataWithMutationsApplied(e,!1,this.data),this.data=i,a.label=9;case 9:return[2]}})})},e.prototype.refreshOrInvalidate=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return 0!==this.subscriptions.length?[3,1]:(this.invalid=!0,[3,3]);case 1:return[4,this.load(e)];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.notifySubscribers=function(e){var t=this;if(this.data&&this.gotInitialResponse){var r=this.getDataWithMutationsApplied(e,!0,this.data);this.subscriptions.forEach(function(e){e.notifySubscriber(r,t.error)})}},e.prototype.queryLocally=function(){return this.repo.querySet.queryLocally(this.table,this.query,this.includes)},e.prototype.queryServer=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.repo.getClient().list(this.table,a.a({},this.query))];case 1:return[2,e.sent()]}})})},e.prototype.getDataWithMutationsApplied=function(e,t,r){var n=this;return e.forEach(function(e){r=n.applyMutationsOnData(r,e,t)}),r},e.prototype.applyMutationsOnData=function(e,t,r){if(d(t)&&t.branchId!=this.query.branchId)return e;var n=this.table,s=this.includes,i=this.query,o=i.hasEdgesFrom?[].concat(i.hasEdgesFrom||[]):[],c=i.tags?[].concat(i.tags||[]):[];switch(t.op){case"update":return Object(f.g)(e,function(e){if(e.id===t.id){var n=m(e,t.deltaDoc);return r&&(n.$meta="updating"),n}return s.forEach(function(n){var s,i=e[n];if(i){var o=Object(f.g)(i,function(e){if(e.id!==t.id)return e;var n=m(e,t.deltaDoc);return r&&(n.$meta="updating"),n});o!==i&&(e=a.a({},e,((s={})[n]=o,s)))}}),e});case"add":if(n===t.table&&i.tags){var l=[].concat(i.tags);if(t.doc.tags&&t.doc.tags.some(function(e){return l.includes(e)}))return e.concat([t.doc])}return e;case"add-related":if(n===t.table&&-1!==s.indexOf(t.graphProp))return Object(f.g)(e,function(e){var n;if(e.id!==t.id)return e;var s=a.a({},t.relatedDoc);return r&&(s.$meta="adding"),a.a({},e,((n={})[t.graphProp]=e[t.graphProp].concat([s]),n))});if(i.hasEdgesFrom&&o.includes(t.id)&&n===u(t.table,t.graphProp)){if(!i.tags)return e.concat(this.setGraphProps(t.relatedDoc));if(t.relatedDoc.tags&&c.some(function(e){return t.relatedDoc.tags.includes(e)}))return e.concat(this.setGraphProps(t.relatedDoc))}return i.ids&&i.ids.some(function(e){return e===t.relatedDoc.id})?e.concat(this.setGraphProps(t.relatedDoc)):e;case"remove-related":return n===t.table&&-1!==s.indexOf(t.graphProp)?Object(f.g)(e,function(e){var n,s=e[t.graphProp];return s?e.id!==t.id?e:a.a({},e,((n={})[t.graphProp]=r?s.map(function(e){return e.id!==t.relatedDoc.id?e:a.a({},e,{$meta:"deleting"})}):s.filter(function(e){return e.id!==t.relatedDoc.id}),n)):e}):i.hasEdgesFrom&&o.includes(t.id)?r?e.map(function(e){return e.id===t.relatedDoc.id?a.a({},e,{$meta:"deleting"}):e}):e.filter(function(e){return e.id!==t.relatedDoc.id}):e;case"delete":if(n===t.table)return e.filter(function(e){return e.id!==t.id});if(i.include){var h=s.map(function(e){return{label:e,table:u(n,e)}}).filter(function(e){return e.table===t.table});if(h.length>0)return Object(f.g)(e,function(e){return h.forEach(function(n){var s,i=n.label,o=e[i];o&&(e=a.a({},e,((s={})[i]=r?o.map(function(e){return e.id===t.id?a.a({},e,{$meta:"deleting"}):e}):o.filter(function(e){return e.id!==t.id}),s)))}),e})}return e;default:return e}},e.prototype.setGraphProps=function(e){var t=a.a({},e);return this.includes.forEach(function(e){return t[e]=t[e]||[]}),t},e}(),v=function(e){function t(t,r,n){var a=e.call(this,function(e){var t=new i(e,a);return a.repo.querySet.subscribe(t),t})||this;return a.repo=t,a.table=r,a.query=n,a}return a.c(t,e),Object.defineProperty(t.prototype,"queryKey",{get:function(){return b.queryKey(this.table,this.query)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"includes",{get:function(){return this._includes||(this._includes=[].concat(this.query.include||[]))},enumerable:!0,configurable:!0}),t.prototype.applyQuery=function(e){return new t(this.repo,this.table,a.a({},this.query,e))},t.prototype.addToQueryArrayProp=function(e,t){var r;return this.applyQuery(((r={})[e]=(this.query[e]||[]).concat(t),r))},t.prototype.addFlags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("flags",e)},t.prototype.debug=function(){return this.applyQuery({debug:!0})},t.prototype.idsOnly=function(){return this.addFlags("idsOnly")},t.prototype.idsAndNamesOnly=function(){return this.addFlags("idsAndNamesOnly")},t.prototype.includeIdsOnly=function(){return this.addFlags("includeIdsOnly")},t.prototype.includeIdsAndNamesOnly=function(){return this.addFlags("includeIdsAndNamesOnly")},t.prototype.between=function(e,t){return this.applyQuery({from:e,to:t})},t.prototype.role=function(e){return this.applyQuery({role:e})},t.prototype.hasEdgesFrom=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesFrom("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesFrom",e)},t.prototype.hasEdgesTo=function(e){if(0===e.length||e.some(function(e){return!e}))throw new Error("Invalid id list given to Collection.hasEdgesTo("+JSON.stringify(e)+")");return this.addToQueryArrayProp("hasEdgesTo",e)},t.prototype.id=function(e){var t=this;return this.applyQuery({ids:[e]}).single({onZero:function(){throw new Error("Could not find entity in "+t.table+" with id "+e)},onMany:function(){throw new Error("Multiple entries in "+t.table+" with id "+e)}})},t.prototype.ids=function(e){return this.applyQuery({ids:e})},t.prototype.name=function(e){return this.applyQuery({name:e})},t.prototype.tags=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.applyQuery({tags:e})},t.prototype.branchId=function(e){return this.applyQuery({branchId:e})},t.prototype.include=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.addToQueryArrayProp("include",e)},t.prototype.cacheOptimized=function(){return this.applyQuery({cacheBust:p.getCacheBust(this.table,this.query,this.repo.getUser(),this.includes)})},t.prototype.mutationsOnEmpty=function(e){var t=new s.a;return e(t),this.applyQuery({mutationsOnEmpty:t.mutationRequests})},t.prototype.single=function(e){var t=this,r=e||{},n=r.onZero,a=r.onMany;return this.toValue().map(function(e){if(0===e.length){if(!n)throw new Error("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but none was found.");n()}return e.length>1&&(a?a():console.log("Single item of "+t.table+" expected to be returned by query "+JSON.stringify(t.query)+" but "+e.length+" was found.")),e[0]})},t.prototype.update=function(e,t,r){void 0===r&&(r=1e3),this.repo.writer.mutate([{op:"update",table:this.table,branchId:this.query.branchId,id:e.id,deltaDoc:t,targetName:e.name}],r)},t.prototype.addRelated=function(e,t,r){this.repo.writer.mutate([{op:"add-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:r}],0)},t.prototype.add=function(e){this.repo.writer.mutate([{op:"add",id:e.id,table:this.table,doc:e}],0)},t.prototype.removeRelated=function(e,t,r){this.repo.writer.mutate([{op:"remove-related",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedDoc:r}],0)},t.prototype.undoLink=function(e,t,r){if(!this.query.branchId)throw new Error("undo links can only be performed on branches");this.repo.writer.mutate([{op:"undo-link",table:this.table,branchId:this.query.branchId,id:e,graphProp:t,relatedId:r}],0)},t.prototype.delete=function(){for(var e=this,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];this.repo.writer.mutate(t.map(function(t){return{op:"delete",table:e.table,id:t}}),0)},t.prototype.unsubscribe=function(e){this.repo.querySet.unsubscribe(e)},t}(r(31).a),y=function(){function e(e){this.mutationQueue=e,this.queries=[]}return e.prototype.commitMutations=function(e,t){return a.b(this,void 0,void 0,function(){return a.d(this,function(r){switch(r.label){case 0:return[4,Promise.all(this.queries.map(function(r){return r.commitMutations(e,t)}))];case 1:return r.sent(),this.cleanupInvalidQueries(),[2]}})})},e.prototype.cleanupInvalidQueries=function(){this.queries=this.queries.filter(function(e){return!e.invalid||(e.timeoutHandle&&(clearTimeout(e.timeoutHandle),e.timeoutHandle=null),!1)})},e.prototype.notifySubscribers=function(){var e=this.mutationQueue.get();this.queries.forEach(function(t){t.notifySubscribers(e)})},e.prototype.findQuery=function(e,t){return this.queries.find(function(r){return r.queryKey===b.queryKey(e,t)})},e.prototype.queryLocally=function(e,t,r){var n=this.mutationQueue.get();if(t.ids&&1===t.ids.length&&n.some(function(e){return"add-related"===e.op&&e.relatedDoc.id===t.ids[0]}))return[];if(t.hasEdgesFrom||t.hasEdgesTo)return null;if(!t.ids)return null;for(var a=function(n){if(!n.gotInitialResponse)return"continue";if(n.query.branchId!==t.branchId)return"continue";if(n.query.flags)return"continue";var a=n.includes;if(a.length>0&&(!t.include||0===t.include.length)){var s=a.find(function(t){return o.a[n.table].relationships[t]===e});if(s){for(var i={},u=0,l=n.data;u<l.length;u++){var d=l[u];c(t,d[s]).forEach(function(e){return i[e.id]=e})}var h=Object.keys(i).map(function(e){return i[e]});return t.ids.every(function(e){return h.some(function(t){return t.id===e})})?{value:h}:"continue"}}if(!r.every(function(e){return a.includes(e)}))return"continue";if(n.table===e){var p=c(t,n.data);return t.ids.every(function(e){return p.some(function(t){return t.id===e})})?{value:p}:"continue"}},s=0,i=this.queries;s<i.length;s++){var u=a(i[s]);if("object"==typeof u)return u.value}},e.prototype.subscribe=function(e){var t=e.collection,r=t.table,n=t.query,a=t.repo,s=this.findQuery(r,n);s?s.timeoutHandle&&(clearTimeout(s.timeoutHandle),s.timeoutHandle=null):(s=new b(r,n,a.getUser(),a,this.mutationQueue),this.queries.push(s)),s.subscribe(e)},e.prototype.unsubscribe=function(e){var t=this,r=e.collection,n=r.table,a=r.query,s=(r.repo,this.findQuery(n,a));s&&(s.unsubscribe(e),0===s.subscriptions.length&&(s.timeoutHandle=setTimeout(function(){0===s.subscriptions.length&&(t.queries=t.queries.filter(function(e){return e!==s}))},this.queries.length>50?500:3e5)))},e}(),k=function(){function e(){this.queue=[],this.savingQueue=[]}return e.prototype.add=function(t){this.queue=e.merge(this.queue,t)},e.prototype.moveToSavingQueue=function(){this.savingQueue=e.merge(this.savingQueue,this.queue),this.queue=[]},e.prototype.clearSavingQueue=function(){this.savingQueue=[]},e.prototype.get=function(){return this.savingQueue.concat(this.queue)},e.prototype.affectsQuery=function(e,t,r){var n=this.get();return!!n.some(function(e){return"merge"===e.op||"clear-branch"===e.op})||(t.ids?n.some(function(e){return h(e)||(!d(e)||e.branchId===t.branchId)&&t.ids.includes(e.id)}):n.some(function(n){return"add"===n.op?n.table===e:"delete"===n.op?n.table===e||r.some(function(t){return u(e,t)===n.table}):!!h(n)||n.branchId==t.branchId&&(n.table===e||"update"!==n.op&&[e].concat(r.map(function(t){return u(e,t)})).some(function(e){return u(n.table,n.graphProp)===e}))}))},e.merge=function(e,t){for(var r=e.slice(),n=t.slice(),s=e.length,i=function(t){var s=e[t];if("update"===s.op){var i=n.findIndex(function(e){return"update"===e.op&&e.branchId===s.branchId&&e.id===s.id});i>=0&&(r[t]=a.a({},s,{deltaDoc:g(s.deltaDoc,n[i].deltaDoc)}),n.splice(i,1))}},o=0;o<s;++o)i(o);return r.concat(n)},e}(),E=r(33);function w(e,t,r,n,s,i){for(var o=function(r){switch(r.op){case"add-related":i||r.branchId!==e||(t=[{type:"add",sourceId:r.id,targetId:r.relatedDoc.id,label:r.graphProp,sourceTable:r.table,$meta:n?"adding":"persisted",dateTime:Date.now(),targetName:r.relatedDoc.name,contributor:s}].concat(t));break;case"clear-branch":r.branchId===e&&(t=[]);break;case"delete":break;case"merge":if(r.branchId===e)t=[];else if(r.targetBranchId===e&&!n)return{value:null};break;case"remove-related":if(i||r.branchId!==e)return"continue";t=[{type:"remove",sourceId:r.id,targetId:r.relatedDoc.id,targetName:r.relatedDoc.name,label:r.graphProp,sourceTable:r.table,contributor:s,dateTime:Date.now(),$meta:n?"adding":"persisted"}].concat(t);break;case"undo-link":if(r.branchId!==e)return"continue";if((u=t.findIndex(function(e){return("add"===e.type||"remove"===e.type||"undo-link"===e.type)&&e.sourceId===r.id&&e.targetId===r.relatedId}))<0)return"continue";if(n){var o=t[u];t=t.slice(0,u).concat([a.a({},o,{$meta:n?"removing":"persisted"})],t.slice(u+1))}else t=t.slice(0,u).concat(t.slice(u+1));break;case"update":if(r.branchId!==e)return"continue";var u;if((u=t.findIndex(function(e){return"modify"===e.type&&e.targetId===r.id}))<0&&!i)t=[{type:"modify",table:r.table,targetId:r.id,targetName:r.targetName,data:r.deltaDoc,dateTime:Date.now(),contributors:[s],$meta:n?"adding":"persisted"}].concat(t);else{var c=t[u],l=c.contributors.slice();l.includes(s)||l.push(s);var d=g(c.data,r.deltaDoc,{removeUnsetProps:!0});t=n||0!==Object.keys(d).length?[{type:"modify",table:r.table,targetId:r.id,targetName:r.targetName,data:d,dateTime:Date.now(),contributors:l,$meta:n?"updating":"persisted"}].concat(t.slice(0,u),t.slice(u+1)):t.slice(0,u).concat(t.slice(u+1))}}},u=0,c=r;u<c.length;u++){var l=o(c[u]);if("object"==typeof l)return l.value}return t}var S=function(){function e(e,t,r){this.getClient=e,this.getUser=t,this.getUserDisplayName=r,this.lookup={}}return e.prototype.applyMutations=function(e,t){for(var r=(void 0===t?{optimistic:!1}:t).optimistic,n=0,a=Object.keys(this.lookup);n<a.length;n++){var s=a[n],i=this.lookup[s];if(i.value){var o=w(i.query.branchId,i.value,e,r,this.getUserDisplayName(),!!i.query.tags);null===o&&(r||i.fetch()),o!==i.value&&(i.optimisticValue=o,r||(i.value=o),i.notify(o))}}},e.prototype.subscribe=function(e,t){var r=this,n=this.lookup[e.branchId+e.tags];n||(n=new T(this.getClient(),e),this.lookup[e.branchId+e.tags]=n),n.cleanupTimer&&(clearTimeout(n.cleanupTimer),n.cleanupTimer=null);var a={unsubscribe:function(){n.subscribers=n.subscribers.filter(function(e){return e.observer!==t}),0===n.subscribers.length&&(n.cleanupTimer=setTimeout(function(){0===n.subscribers.length&&delete r.lookup[e.branchId+e.tags]},100))}};return n.subscribers.push({observer:t,subscription:a}),n.value?t(n.optimisticValue||n.value,null,a):n.isFetching||(n.error?t(null,n.error,a):n.fetch()),a},e}(),T=function(){function e(e,t){this.fetchOperationId=0,this.client=e,this.query=t,this.value=null,this.error=null,this.optimisticValue=null,this.subscribers=[],this.isFetching=!1,this.cleanupTimer=null}return e.prototype.fetch=function(){var e=this,t=++this.fetchOperationId;this.isFetching=!0,this.fetchFromServer().then(function(r){t===e.fetchOperationId&&(e.isFetching=!1,r.sort(function(e,t){return t.dateTime-e.dateTime}),e.value=r,e.optimisticValue=r,e.notify(r))}).catch(function(r){t===e.fetchOperationId&&(e.isFetching=!1,e.error=r,e.fail(r))})},e.prototype.fetchFromServer=function(){return a.b(this,void 0,void 0,function(){var e,t,r;return a.d(this,function(n){switch(n.label){case 0:if(!this.query.branchId)throw new Error("Deltas only available on branches");return[4,this.client.http.get("deltas",this.query)];case 1:return(e=n.sent()).status>=300||e.status<200?(t=s.c.bind,r=[void 0,e.status],[4,e.text()]):[3,3];case 2:throw new(t.apply(s.c,r.concat([n.sent()])));case 3:return[4,e.json()];case 4:return[2,n.sent()]}})})},e.prototype.notify=function(e){for(var t=0,r=this.subscribers;t<r.length;t++){var n=r[t];(0,n.observer)(e,null,n.subscription)}},e.prototype.fail=function(e){var t=this.subscribers.slice();this.subscribers=[];for(var r=0,n=t;r<n.length;r++){var a=n[r];(0,a.observer)(null,e,a.subscription)}},e}(),D=function(){function e(e,t,r,n,a){this.mutationQueue=e,this.querySet=t,this.getClient=r,this.getUser=n,this.getUserDisplayName=a,this._timeoutId=null,this._isSavingPromise=null,this.currentVersion=0,this.persistedVersion=new E.b(0),this.errorSubscribers=[],this.stateSubscribers=[],this.deltaCache=new S(r,n,a)}return Object.defineProperty(e.prototype,"isSaving",{get:function(){return!!this._isSavingPromise},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isEdited",{get:function(){return this.mutationQueue.get().length>0},enumerable:!0,configurable:!0}),e.prototype.onError=function(e){this.errorSubscribers.push(e)},e.prototype.onStateChange=function(e){this.stateSubscribers.push(e)},e.prototype.off=function(e){this.errorSubscribers=this.errorSubscribers.filter(function(t){return t!==e}),this.stateSubscribers=this.stateSubscribers.filter(function(t){return t!==e})},e.prototype.dispatchError=function(e,t){var r=this;this.errorSubscribers.forEach(function(n){try{n(e,t,r)}catch(e){}})},e.prototype.dispatchStateChange=function(){var e=this;this.stateSubscribers.forEach(function(t){try{t(e)}catch(e){}})},e.prototype.mutate=function(e,t){this.mutationQueue.add(e),++this.currentVersion,this.dispatchStateChange(),this.querySet.notifySubscribers(),this.deltaCache.applyMutations(this.mutationQueue.get(),{optimistic:!0}),this._isSavingPromise||(this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=setTimeout(this.save.bind(this),t))},e.prototype.retrySave=function(){return this.save()},e.prototype.waitForVersionToPersist=function(e){return a.b(this,void 0,void 0,function(){return a.d(this,function(t){switch(t.label){case 0:return[4,this.persistedVersion.load()];case 1:return t.sent()<e?(this.save(),[4,this.persistedVersion.filter(function(t){return t>=e}).load()]):[3,3];case 2:t.sent(),t.label=3;case 3:return[2]}})})},e.prototype.save=function(){var e=this;return this._timeoutId&&clearTimeout(this._timeoutId),this._isSavingPromise?this._isSavingPromise:this.isEdited?(this._timeoutId=null,this._isSavingPromise=this._save(),this._isSavingPromise.catch(function(){}).then(function(){return e._isSavingPromise=null}),this._isSavingPromise):Promise.resolve()},e.prototype._save=function(){return a.b(this,void 0,void 0,function(){var e,t,r,n,s,i;return a.d(this,function(a){switch(a.label){case 0:this.dispatchStateChange(),e=this.mutationQueue.get(),t=this.currentVersion,this.mutationQueue.moveToSavingQueue(),r=this.mapMutations(e),a.label=1;case 1:return a.trys.push([1,6,11,12]),[4,this.getClient().batch(r)];case 2:return n=a.sent(),s=Object.keys(n.newEtags).map(function(e){return{op:"update",table:null,id:e,deltaDoc:{$etag:n.newEtags[e]},targetName:null}}),p.invalidateCache(r,this.getUser()),this.persistedVersion.dispatch(t),this.deltaCache.applyMutations(e,{optimistic:!1}),[4,this.querySet.commitMutations(k.merge(e,s),t)];case 3:return a.sent(),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,5];case 4:a.sent(),a.label=5;case 5:return[3,12];case 6:return i=a.sent(),this.persistedVersion.dispatchError(i),i&&i.name&&i.name.startsWith("http4")?(this.dispatchError(i,!1),this.mutationQueue.clearSavingQueue(),this.dispatchStateChange(),this.querySet.notifySubscribers(),this.mutationQueue.get().length>0?[4,this._save()]:[3,8]):[3,9];case 7:a.sent(),a.label=8;case 8:return[3,10];case 9:this.dispatchError(i,!0),a.label=10;case 10:return[3,12];case 11:return this.dispatchStateChange(),[7];case 12:return[2]}})})},e.prototype.mapMutations=function(e){var t=new s.a;return e.forEach(function(e){switch(e.op){case"update":t.update(e.table,e.id,e.deltaDoc,e.branchId);break;case"add":t.add(e.table,e.doc);break;case"add-related":e.relatedDoc.$etag||t.add(o.a[e.table].relationships[e.graphProp],e.relatedDoc,e.branchId),t.link2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"remove-related":t.unlink2(e.table,e.id,e.graphProp,e.relatedDoc.id,e.branchId);break;case"undo-link":t.undoLink(e.table,e.id,e.graphProp,e.relatedId,e.branchId);break;case"delete":t.delete(e.table,e.id);break;case"clear-branch":t.clearBranch(e.branchId);break;case"merge":t.merge(e.branchId,e.targetBranchId)}}),t.mutationRequests},e}(),N=function(e){function t(t,r){var n=e.call(this,function(e){return n.deltaCache.subscribe(r,e)})||this;return n.deltaCache=t,n.query=r,n}return a.c(t,e),t.prototype.tags=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return new t(this.deltaCache,a.a({},this.query,{tags:e}))},t}(E.a),O=function(){function e(e,t,r,n,a,s,i,u){var c=this;this.getClient=e,this.getUser=t,this.getUserDisplayName=r,this.defaultQueryOptions=n,this.mutationQueue=a,this.querySet=s,this.writer=i,this.cacheOptimized=u,n||(this.defaultQueryOptions={}),a||(this.mutationQueue=new k),s||(this.querySet=new y(this.mutationQueue)),i||(this.writer=new D(this.mutationQueue,this.querySet,e,t,r)),Object.keys(o.a).forEach(function(e){var t=new v(c,e,n||{});u&&(t=t.cacheOptimized()),c[e]=t}),this.deltas=new N(this.writer.deltaCache,{branchId:this.defaultQueryOptions.branchId})}return e.prototype.table=function(e){var t=new v(this,e,this.defaultQueryOptions);return this.cacheOptimized&&(t=t.cacheOptimized()),t},e.prototype._clone=function(t,r){return new e(this.getClient,this.getUser,this.getUserDisplayName,a.a({},this.defaultQueryOptions,t),this.mutationQueue,this.querySet,this.writer,void 0===r?this.cacheOptimized:r)},e.prototype.branch=function(e){return this._clone({branchId:e})},e.prototype.role=function(e){return this._clone({role:e})},e.prototype.optimizeCache=function(){return this._clone({},!0)},e.prototype.clearBranch=function(){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot clear master branch");this.writer.mutate([{op:"clear-branch",branchId:this.defaultQueryOptions.branchId}],0)},e.prototype.merge=function(e){if(!this.defaultQueryOptions.branchId)throw new Error("Cannot merge from master branch");this.writer.mutate([{op:"merge",branchId:this.defaultQueryOptions.branchId,targetBranchId:e}],0)},e.prototype.saveNow=function(){return a.b(this,void 0,void 0,function(){return a.d(this,function(e){switch(e.label){case 0:return[4,this.writer.waitForVersionToPersist(this.writer.currentVersion)];case 1:return e.sent(),[2]}})})},e}();var I=r(5),C=r(7);r.d(t,"c",function(){return A}),r.d(t,"d",function(){return R}),r.d(t,"b",function(){return P}),r.d(t,"a",function(){return _});var A=new O(function(){return n.a.kedBackendClient},function(){return n.a.currentUser?n.a.currentUser.mail:""},function(){return n.a.currentUser?n.a.currentUser.displayName||n.a.currentUser.mail:""}),R=Object(I.i)(C.b.KED_REALM),P={standardSchool:A.schools.name("standard").cacheOptimized().single(),get mySchool(){return A.schools.name(n.a.currentUser.school).cacheOptimized().single()}},_={getBranchId:function(e,t){return e.switchMap(function(e){return A.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().map(function(e){return e.id}).toValue().map(function(e){return e.length>0?e[0]:void 0})})},getOrCreateBranchId:function(e,t){return A.courseInstances.idsOnly().id(t).switchMap(function(){return e.switchMap(function(e){return A.branches.hasEdgesFrom([e.officialBranchId]).name("draft").tags(t).idsOnly().mutationsOnEmpty(function(r){var n=Object(I.h)();r.add("branches",{id:n,acl:["role:USER:R","schoolRole:"+e.name+"/EMPLOYEE:S"],name:"draft",schoolId:e.id,treeParentId:e.officialBranchId,tags:[t]}),r.link2("branches",e.officialBranchId,"approvedChildren",n)}).single().map(function(e){return e.id})})})},getAllDescendantIds:function(e){return A.courseBlocks.tags(e).idsOnly().concat(A.courseContents.tags(e).idsOnly()).concat(A.courseTabs.tags(e).idsOnly()).concat(A.tasks.tags(e).idsOnly()).map(function(e){return e.id})}}},96:function(e,t,r){"use strict";(function(e){var t=r(7);t.b.ENVIRONMENT="test",t.b.KED_API_URL="https://backend.kedschools.com/kedbackend-next/api/",t.b.EDS_API_URL="https://edsportalowinapitest.azurewebsites.net/studentportal/",t.b.KED_TOKEN_URL="",t.b.KED_CLIENT_ID="",t.b.KED_CLIENT_SECRET="",t.b.KED_REALM="SE1",t.b.KED_LOCALE=t.b.KED_LOCALE||"sv",t.b.KED_SCHOOL_LOCALE=t.b.KED_SCHOOL_LOCALE||"sv",t.b.KED_RESOURCES_URL=t.b.KED_RESOURCES_URL||e.env.KED_RESOURCES_URL}).call(this,r(130))},97:function(e,t,r){"use strict";r(96);var n=r(1),a=r(15),s=r(21),i=r(5),o=r(7),u=r(4),c=r(14),l=r(2),d=["https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.profile.emails","https://www.googleapis.com/auth/classroom.rosters","https://www.googleapis.com/auth/classroom.coursework.students"],h=["https://www.googleapis.com/auth/classroom.courses","https://www.googleapis.com/auth/classroom.coursework.me"];function p(e,t,r){var s=Object(a.b)(t),i=Object(l.e)(s,c.a),o=n.f(Object(a.c)(e),2),u=o[0],d=o[1],h=Object(a.b)(d);return u+Object(a.a)(n.a({},h,i,{scopes:r.join(",")}))}function f(e,t){return e+"/"+t}function m(e,t,r){return new i.e(s.c,s.d,e+t.mail+location.search,o.b.KED_CLIENT_ID,o.b.KED_CLIENT_SECRET,e,{email:t.mail.toLowerCase(),roles:t.roles,school:t.school,schoolType:t.schoolType,scopes:r})}var g,b,v=u.a.currentUser&&u.a.currentUser.mail;if(v)if(o.b.KED_TOKEN_PATH){var y=p(o.b.KED_TOKEN_PATH,location.search,["kedbackend","EDS"]);u.a.bearerProvider=(b=f(g=y,v),new s.b(g,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return t.user&&function(e,t){u.a.currentUser=e,sessionStorage.setItem("userInfo"+t,JSON.stringify(e))}(t.user,b),{token:t.token,expires:Date.now()+354e4}},b)),function(e){var t=sessionStorage.getItem("userInfo"+e);t&&(u.a.currentUser=JSON.parse(t))}(f(y,v));var k=["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"].concat(u.a.currentUser.roles.includes("EMPLOYEE")?d:h),E=p(o.b.KED_TOKEN_PATH,location.search,k);u.a.googleTokenProvider=function(e,t){var r=f(e,t);return new s.b(e,function(e){var t=JSON.parse(e);if(!t.ok)throw new Error(t.error);return{token:t.token,expires:Date.now()+354e4}},r)}(E,v)}else{if(!(o.b.KED_TOKEN_URL&&o.b.KED_CLIENT_ID&&o.b.KED_CLIENT_SECRET))throw new Error("Missing configuration parameter KED_TOKEN_PATH");u.a.bearerProvider=m(o.b.KED_TOKEN_URL,u.a.currentUser,["kedbackend","EDS"]);k=["https://www.googleapis.com/auth/calendar.readonly","https://www.googleapis.com/auth/drive"].concat(u.a.currentUser.roles.includes("EMPLOYEE")?d:h);u.a.googleTokenProvider=m(o.b.KED_TOKEN_URL+"/google",u.a.currentUser,k)}u.a.kedBackendClient=new s.a(o.b.KED_API_URL,u.a.bearerProvider);var w=r(45);u.a.edsClient=new w.b(s.c,o.b.EDS_API_URL,u.a.bearerProvider,function(){return u.a.currentUser.mail})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,